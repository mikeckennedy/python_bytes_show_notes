
00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.000 --> 00:00:11.240
This is episode 322 recorded February 7th, 2023. I'm Michael Kennedy.


00:00:11.240 --> 00:00:12.540
And I'm Brian Okken.


00:00:12.540 --> 00:00:14.000
I'm Calvin Hendricks-Parker.


00:00:14.000 --> 00:00:16.000
Welcome Calvin. Awesome to have you here.


00:00:16.000 --> 00:00:18.740
I'm excited to be back. I love this kind of my annual retreat.


00:00:18.740 --> 00:00:23.740
That's right. That's right. Your annual drop in to share all your ideas with us.


00:00:23.740 --> 00:00:25.740
You got some good ones to talk about, I know.


00:00:25.740 --> 00:00:28.460
Also want to say thank you to Microsoft


00:00:28.460 --> 00:00:31.260
for Startups Founders Hub for sponsoring this episode.


00:00:31.260 --> 00:00:33.780
If you want to connect with any of us,


00:00:33.780 --> 00:00:36.260
me, Brian, Calvin, or even just the show,


00:00:36.260 --> 00:00:38.020
you can find us over on Fostedon.


00:00:38.020 --> 00:00:40.380
We're all over there actually on Mastodon.


00:00:40.380 --> 00:00:41.580
So you can find links and show notes.


00:00:41.580 --> 00:00:43.820
And if you're listening, but not watching,


00:00:43.820 --> 00:00:46.740
just go to pythonbytes.fm/stream/live


00:00:46.740 --> 00:00:51.020
where we will be streaming live every Tuesday, usually,


00:00:51.020 --> 00:00:53.300
but you can definitely subscribe to get notified there.


00:00:53.300 --> 00:00:56.980
Calvin, I know you've been here before, multiple times.


00:00:56.980 --> 00:00:58.440
You always come to put us to shame


00:00:58.440 --> 00:01:03.020
with your fancy camera that you got going, we love it.


00:01:03.020 --> 00:01:05.140
Tell people who maybe haven't heard about you


00:01:05.140 --> 00:01:06.900
or met you before who you are.


00:01:06.900 --> 00:01:08.460
- Sure, so I'm Calvin X. Parker.


00:01:08.460 --> 00:01:10.620
I'm co-founder and CTO of Six Feet Up.


00:01:10.620 --> 00:01:12.900
We are a software development company


00:01:12.900 --> 00:01:16.500
that helps digital leaders transform their impact.


00:01:16.500 --> 00:01:18.100
We do a lot of interesting work now


00:01:18.100 --> 00:01:19.320
around impactful projects.


00:01:19.320 --> 00:01:21.020
So it's like climate change,


00:01:21.020 --> 00:01:22.780
making the world a better place.


00:01:22.780 --> 00:01:25.100
In addition, I've started a couple of communities.


00:01:25.100 --> 00:01:27.660
So the IndiePy community here local at Indianapolis,


00:01:27.660 --> 00:01:29.740
and then we branched out from that into


00:01:29.740 --> 00:01:33.400
some little local conferences into now Python web conference.


00:01:33.400 --> 00:01:36.620
So that's why the big thing you'll hear from me,


00:01:36.620 --> 00:01:38.180
at least this month and next month.


00:01:38.180 --> 00:01:40.020
>> Yeah, we'll talk about that at the end of the show.


00:01:40.020 --> 00:01:41.900
But that's an amazing conference you have.


00:01:41.900 --> 00:01:47.860
I would say potentially more talks or on par as many talks as US PyCon.


00:01:47.860 --> 00:01:49.700
It's really a lot going on there.


00:01:49.700 --> 00:01:51.740
>> Last year, there were almost too many.


00:01:51.740 --> 00:01:54.300
It was so good, I just kept saying yes to everybody.


00:01:54.300 --> 00:01:56.780
This year, we pulled back a little bit.


00:01:56.780 --> 00:01:58.540
We had more submissions.


00:01:58.540 --> 00:02:01.180
We'll talk about this later, but it was really hard to choose.


00:02:01.180 --> 00:02:03.940
>> Yeah, it's tough to say no to deserving people.


00:02:03.940 --> 00:02:05.500
>> It's so much talent.


00:02:05.500 --> 00:02:06.620
So many great people.


00:02:06.620 --> 00:02:09.500
>> Indeed. All right, Brian, kick us off.


00:02:09.500 --> 00:02:12.620
>> I just wanted to talk about packaging today a little bit.


00:02:12.620 --> 00:02:14.660
I'm splitting it up into two segments,


00:02:14.660 --> 00:02:17.340
but I really want to focus right now on


00:02:17.340 --> 00:02:22.600
the PyPA has a packaging Python projects tutorial page.


00:02:22.600 --> 00:02:25.480
It's linked in the show notes, of course.


00:02:25.480 --> 00:02:29.740
But I think it's really pretty good, well-written.


00:02:29.740 --> 00:02:31.700
I want to point people in this direction.


00:02:31.700 --> 00:02:34.900
If you want to share your Python code with somebody else,


00:02:34.900 --> 00:02:38.020
packaging it is the right way to go, I think.


00:02:38.020 --> 00:02:41.060
This tutorial walks through,


00:02:41.060 --> 00:02:44.420
it's not necessarily trivial to do it.


00:02:44.420 --> 00:02:47.980
I wish it was easier, but it's not bad.


00:02:47.980 --> 00:02:53.700
It walks through setting up your directory structure.


00:02:53.700 --> 00:02:56.500
Then you have to have some package files with it.


00:02:56.500 --> 00:02:59.960
You've got to have a license file and a pyproject.toml now,


00:02:59.960 --> 00:03:02.460
and a readme, and then it talks about


00:03:02.460 --> 00:03:05.500
your source directory and your test directory.


00:03:05.500 --> 00:03:07.460
You've got the directory set up.


00:03:07.460 --> 00:03:10.540
>> I know you're a fan of the source directory for packages.


00:03:10.540 --> 00:03:11.700
It looks like-


00:03:11.700 --> 00:03:13.340
>> Yeah, IPA is real.


00:03:13.340 --> 00:03:15.100
>> Exactly. Your philosophy is winning


00:03:15.100 --> 00:03:17.480
out here is the official recommendation.


00:03:17.480 --> 00:03:22.020
>> Yeah. I used to have good reasons behind it.


00:03:22.020 --> 00:03:25.280
Now I just like having the top-level stuff just be


00:03:25.280 --> 00:03:28.100
packaging and having the actual source code


00:03:28.100 --> 00:03:30.660
be somewhere else in the source directory.


00:03:30.660 --> 00:03:33.940
While you're developing, it's nicer.


00:03:33.940 --> 00:03:35.220
If you have a single,


00:03:35.220 --> 00:03:36.820
there is caveats though.


00:03:36.820 --> 00:03:39.380
If you have a single file that you're just sharing,


00:03:39.380 --> 00:03:41.860
that might seem like overkill.


00:03:41.860 --> 00:03:45.260
I'm fine with, of course, I have packages as well


00:03:45.260 --> 00:03:47.500
that are single file that I don't do this with.


00:03:47.500 --> 00:03:50.700
So you don't have to, but most projects


00:03:50.700 --> 00:03:53.580
are gonna have more than one file if you're sharing it.


00:03:53.580 --> 00:03:56.460
So there's this, and then what do you put in it?


00:03:56.460 --> 00:03:59.060
So it talks about what you put in the different things


00:03:59.060 --> 00:04:02.940
in the pyproject.toml and a little bit into the readme


00:04:02.940 --> 00:04:04.180
and some of the metadata.


00:04:04.180 --> 00:04:09.020
One of the things we're gonna jump into a little bit later


00:04:09.020 --> 00:04:11.820
in the show is that there are lots of options


00:04:11.820 --> 00:04:14.580
for what build backend you use.


00:04:14.580 --> 00:04:17.860
This project itself or this document


00:04:17.860 --> 00:04:22.260
talks about Hatchling, SetupTools, Flit and PDM.


00:04:22.260 --> 00:04:24.380
And neither of them look that different.


00:04:24.380 --> 00:04:26.180
And they kind of do the same thing,


00:04:26.180 --> 00:04:28.420
but you can have different metadata that goes with it.


00:04:28.420 --> 00:04:31.860
So that's, I think both a good thing that we have options


00:04:31.860 --> 00:04:35.080
and a bad thing that some people don't know how to choose.


00:04:35.080 --> 00:04:36.540
So--


00:04:36.540 --> 00:04:39.580
- Is it really tough to like know why should you do it?


00:04:39.580 --> 00:04:42.840
Maybe setup tools probably shouldn't be the choice.


00:04:42.840 --> 00:04:43.680
I feel like that--


00:04:43.680 --> 00:04:44.520
- Yeah, I don't know.


00:04:44.520 --> 00:04:45.840
- Moving a little bit away from that, but--


00:04:45.840 --> 00:04:47.600
- The history here is so deep.


00:04:47.600 --> 00:04:49.960
Like, I feel like there's like a whole day,


00:04:49.960 --> 00:04:52.200
a whole college course you could give


00:04:52.200 --> 00:04:54.200
on why these things are the way they are now.


00:04:54.200 --> 00:04:55.600
- Yeah, yeah.


00:04:55.600 --> 00:04:59.640
So the project, the tutorial goes down


00:04:59.640 --> 00:05:01.040
into even distributing.


00:05:01.040 --> 00:05:06.040
So all the way down to recommending that you use Twine


00:05:06.280 --> 00:05:10.520
to upload to the test repository, test pipe here.


00:05:10.520 --> 00:05:13.680
And you have to get a token and it's not trivial


00:05:13.680 --> 00:05:15.200
and all this sort of stuff.


00:05:15.200 --> 00:05:17.440
So it's still a little daunting,


00:05:17.440 --> 00:05:20.720
but this will walk you through all the steps.


00:05:20.720 --> 00:05:22.560
I have a personal opinion, of course,


00:05:22.560 --> 00:05:26.840
and my opinion is read this and then check out Flit.


00:05:26.840 --> 00:05:28.680
Because for simple projects,


00:05:28.680 --> 00:05:31.880
Flit is, I think, still the easiest.


00:05:31.880 --> 00:05:36.040
It replaces the build step with Flit build,


00:05:36.040 --> 00:05:39.480
and it replaces the creation of some of these files


00:05:39.480 --> 00:05:42.880
with flit init, and it replaces the twine upload


00:05:42.880 --> 00:05:44.680
with just flit publish.


00:05:44.680 --> 00:05:46.800
And I use it on a few projects


00:05:46.800 --> 00:05:49.920
and I haven't had reason to switch yet.


00:05:49.920 --> 00:05:54.580
It's not perfect, but it's pretty easy for small projects.


00:05:54.580 --> 00:05:56.240
So I would say read both of these


00:05:56.240 --> 00:05:58.960
if you wanna share some Python code.


00:05:58.960 --> 00:06:00.740
- Excellent, yeah, very good recommendation.


00:06:00.740 --> 00:06:02.400
And I think people need guidance here


00:06:02.400 --> 00:06:04.240
because there are so many choices.


00:06:04.240 --> 00:06:06.440
There's going to be a lot of conversation in the Python space


00:06:06.440 --> 00:06:07.600
around this, actually.


00:06:07.600 --> 00:06:08.440
- For sure.


00:06:08.440 --> 00:06:09.800
- Yep.


00:06:09.800 --> 00:06:12.200
- All right, let's move on though for right now.


00:06:12.200 --> 00:06:14.480
- Real time follow up here.


00:06:14.480 --> 00:06:19.480
As of about 30 minutes ago, Ofek, the creator of Hatch,


00:06:19.480 --> 00:06:21.680
and I are going to have a conversation March 1st


00:06:21.680 --> 00:06:22.520
on Talk Python.


00:06:22.520 --> 00:06:24.640
So if people want to hear more about Hatch,


00:06:24.640 --> 00:06:27.400
that's coming up in about three weeks or so.


00:06:27.400 --> 00:06:29.120
But what do I want to talk about?


00:06:29.120 --> 00:06:30.280
Something fun.


00:06:30.280 --> 00:06:32.680
Last time we had the Unrapple.


00:06:32.680 --> 00:06:35.400
This time, we have the Untangle.


00:06:35.400 --> 00:06:40.200
So Untangle by stchris on GitHub converts


00:06:40.200 --> 00:06:43.720
XML to dynamic Python objects.


00:06:43.720 --> 00:06:47.620
So thankfully, we've largely moved past XML.


00:06:47.620 --> 00:06:49.720
And really thankfully, we've largely


00:06:49.720 --> 00:06:52.480
moved past XML namespaces, because that just


00:06:52.480 --> 00:06:55.480
is a complication that never needed to exist.


00:06:55.480 --> 00:06:57.360
But there's still plenty of XML stuff


00:06:57.360 --> 00:06:59.020
out there that people have to work with.


00:06:59.020 --> 00:07:02.000
So here's a cool little library that people can use.


00:07:02.000 --> 00:07:05.120
So we already have XML support in Python


00:07:05.120 --> 00:07:09.200
through the element tree API, which is pretty nice.


00:07:09.200 --> 00:07:09.760
It works well.


00:07:09.760 --> 00:07:12.280
You give it a XML document.


00:07:12.280 --> 00:07:14.120
But then you do--


00:07:14.120 --> 00:07:17.280
you sort of navigate it through like child, parent,


00:07:17.280 --> 00:07:19.520
or dot attribute.


00:07:19.520 --> 00:07:22.840
There's like some-- it's not the totally cleanest, most


00:07:22.840 --> 00:07:24.480
straightforward API.


00:07:24.480 --> 00:07:26.680
So with this untangle thing, you can treat it


00:07:26.680 --> 00:07:29.360
like a Python object that just dynamically


00:07:29.360 --> 00:07:34.360
adopts the nodes as fields of those objects as a hierarchy.


00:07:34.360 --> 00:07:40.160
So super simple, you just get it to parse either a URL,


00:07:40.160 --> 00:07:44.080
a file or from a string, just an XML string.


00:07:44.080 --> 00:07:45.720
There's an example that is just real simple.


00:07:45.720 --> 00:07:48.680
It has a root and it has a child node.


00:07:48.680 --> 00:07:51.240
And on the child node, it has an attribute


00:07:51.240 --> 00:07:53.760
where it says name equals child one.


00:07:53.760 --> 00:07:57.180
So if you were to load that up with this untangled thing,


00:07:57.180 --> 00:07:58.640
you just, whatever you get back,


00:07:58.640 --> 00:08:01.300
you say dot root because that's the first element.


00:08:01.300 --> 00:08:02.480
You wanted to say, for example,


00:08:02.480 --> 00:08:04.360
that name attribute, say dot root,


00:08:04.360 --> 00:08:06.120
because that's the name of the root,


00:08:06.120 --> 00:08:07.120
is whatever the first element.


00:08:07.120 --> 00:08:09.200
Then the next element is dot child.


00:08:09.200 --> 00:08:10.960
Then to get the attribute,


00:08:10.960 --> 00:08:13.040
you just treat it like a dictionary and say bracket name,


00:08:13.040 --> 00:08:15.000
and outcomes that value.


00:08:15.000 --> 00:08:17.160
So that seems really clean and nice.


00:08:17.160 --> 00:08:18.720
>> It does look clean, other than the fact


00:08:18.720 --> 00:08:19.920
you're still dealing with XML.


00:08:19.920 --> 00:08:21.400
>> Yeah, well.


00:08:21.400 --> 00:08:24.840
>> I was just dealing with XML this morning. Yuck.


00:08:24.840 --> 00:08:26.720
>> Yeah, absolutely.


00:08:26.720 --> 00:08:31.940
So I suppose there's an API for enumerating things.


00:08:31.940 --> 00:08:34.160
We have multiple ones, you could have child, child, child,


00:08:34.160 --> 00:08:36.320
child with name one, child with name two,


00:08:36.320 --> 00:08:39.760
as a list of things in this XML.


00:08:39.760 --> 00:08:43.500
So there's probably maybe if there's multiple ones, I don't know,


00:08:43.500 --> 00:08:45.040
maybe it's a list or something I have to look,


00:08:45.040 --> 00:08:46.840
actually realize I didn't totally look into that.


00:08:46.840 --> 00:08:52.120
But it's a pretty cool library if people are doing things like that.


00:08:52.120 --> 00:08:54.560
They can definitely check it out. Here we go.


00:08:54.560 --> 00:09:01.420
>> I think I will try this out because I have used the elementary and it does the job,


00:09:01.420 --> 00:09:04.980
but I always thought maybe it could be easier.


00:09:04.980 --> 00:09:08.920
>> What's the speed like? Do you know anything on if it's fast, slow?


00:09:08.920 --> 00:09:12.560
>> Honestly, I would imagine what it's doing is it's probably using


00:09:12.560 --> 00:09:16.740
the elementary and just like a thin wrapper over top of it.


00:09:16.740 --> 00:09:19.920
But I don't know. Let's see.


00:09:20.560 --> 00:09:24.060
Oh, it's using defused XML.


00:09:24.060 --> 00:09:24.300
>> Yes.


00:09:24.300 --> 00:09:28.580
>> SACS. Okay. I don't know anything about SACS XML,


00:09:28.580 --> 00:09:30.880
but yeah, okay. Pretty interesting.


00:09:30.880 --> 00:09:32.900
No, I don't know anything. Unfortunately,


00:09:32.900 --> 00:09:35.420
the readme doesn't have a lot of information


00:09:35.420 --> 00:09:38.540
about its performance and other things.


00:09:38.540 --> 00:09:40.600
But yeah, they also have a blog post you can


00:09:40.600 --> 00:09:42.860
check out about why they built it, which is neat.


00:09:42.860 --> 00:09:45.500
So also short and sweet.


00:09:45.500 --> 00:09:47.140
But check it out if that sounds


00:09:47.140 --> 00:09:48.500
like something that would benefit you.


00:09:48.500 --> 00:09:49.380
>> That's very cool.


00:09:49.380 --> 00:09:51.380
Indeed. All right, over to you, Calvin.


00:09:51.380 --> 00:09:54.380
Something else that could benefit you is going to be


00:09:54.380 --> 00:09:57.580
mypy is official 1.0 released.


00:09:57.580 --> 00:10:00.880
I think this was as of about a week and a half ago.


00:10:00.880 --> 00:10:03.880
So it's pretty new news. A ton of stuff here.


00:10:03.880 --> 00:10:07.180
So for those who don't know, mypy is the static type checker


00:10:07.180 --> 00:10:10.880
for Python, basically a Python linter on steroids.


00:10:10.880 --> 00:10:14.580
So if you are using type hints, this is going to be a great way for you


00:10:14.580 --> 00:10:17.980
to make sure your code is basically


00:10:17.980 --> 00:10:23.580
ready to go before it even runs. Something a lot of developers coming to Python from other


00:10:23.580 --> 00:10:28.620
statically or strongly typed languages really appreciate. And I think it's something that


00:10:28.620 --> 00:10:33.180
a lot of Python developers are moving to, especially with the surge in populative


00:10:33.180 --> 00:10:39.420
languages like TypeScript, because the IDEs are really supporting this so well. So you get a


00:10:39.420 --> 00:10:44.060
significant improvement in your quality of life if you move to a tool like mypy and start using


00:10:44.060 --> 00:10:49.820
my Python and Python hints. So type hints in Python. There's some things to watch out for.


00:10:49.820 --> 00:10:54.460
So as this new release rolls out, they are changing their numbering scheme. It used to be like


00:10:54.460 --> 00:11:02.780
0.999. They kept kind of extending this like 0.9 beta release window, but it's actually


00:11:02.780 --> 00:11:08.940
now 1.0. It is not Simver. So do not count on minor releases not having backwarding


00:11:08.940 --> 00:11:13.740
compatibilities, although they should be very minimal is what they claim. But some of you may


00:11:13.740 --> 00:11:16.280
you may want to be aware of if you are upgrading this.


00:11:16.280 --> 00:11:20.220
And when you go in and pin your mypy version,


00:11:20.220 --> 00:11:21.600
you want to be really explicit about it


00:11:21.600 --> 00:11:22.980
because they're going to make sure they announce


00:11:22.980 --> 00:11:25.040
those significant backward incompatibilities


00:11:25.040 --> 00:11:26.400
in any kind of blog posts


00:11:26.400 --> 00:11:28.920
in the release before that feature releases.


00:11:28.920 --> 00:11:29.760
So the idea--


00:11:29.760 --> 00:11:32.360
- You say it has a gut feel-ver?


00:11:32.360 --> 00:11:33.200
- Yeah, yeah, right.


00:11:33.200 --> 00:11:35.080
- Instead of the official term,


00:11:35.080 --> 00:11:36.640
like, "Yeah, it feels like a big release.


00:11:36.640 --> 00:11:38.280
Let's go ahead and change this part of the version."


00:11:38.280 --> 00:11:40.080
- But on that same note,


00:11:40.080 --> 00:11:42.200
they do have feature flags for this.


00:11:42.200 --> 00:11:44.380
So if there is a new big feature coming


00:11:44.380 --> 00:11:46.620
that is going to be a backward incompatible feature,


00:11:46.620 --> 00:11:48.420
the previous release notes will note it,


00:11:48.420 --> 00:11:51.100
the release will have it, there'll be a flag to turn it on


00:11:51.100 --> 00:11:53.280
so you can then try it out easily in your workflow,


00:11:53.280 --> 00:11:56.500
see what breaks without having to downgrade, re-upgrade,


00:11:56.500 --> 00:11:59.000
downgrade, re-upgrade, so you can actually turn it on and off


00:11:59.000 --> 00:12:02.180
and make sure it works inside your workflow and your process.


00:12:02.180 --> 00:12:03.380
Lots of performance improvements.


00:12:03.380 --> 00:12:07.780
So 1.0 is 40% faster than 0.991.


00:12:07.780 --> 00:12:10.700
There's about 20 optimizations in this list.


00:12:10.700 --> 00:12:12.900
And this is, you can see by my scroll bar,


00:12:12.900 --> 00:12:14.900
there's a ton of stuff that happened


00:12:14.900 --> 00:12:16.540
when they went to release 1.0.


00:12:16.540 --> 00:12:18.700
But some more things in here that are nice features,


00:12:18.700 --> 00:12:21.660
for example, warning about variables before definition


00:12:21.660 --> 00:12:24.620
and kind of goes along with this possibly undefined variables.


00:12:24.620 --> 00:12:27.860
So for example, B is never true, X never happens,


00:12:27.860 --> 00:12:29.400
you'll never be able to print X.


00:12:29.400 --> 00:12:31.820
mypy will tell you about that before you ever run your code.


00:12:31.820 --> 00:12:34.780
So it's kind of like just a lot of those belts and suspenders,


00:12:34.780 --> 00:12:37.320
nice safety checks, keep your code nice and clean,


00:12:37.320 --> 00:12:40.400
combine this with tools like Black and things like that


00:12:40.400 --> 00:12:44.100
to just have super tight code that is easy to read for everybody.


00:12:44.100 --> 00:12:47.600
Some new features that are supported as of Python 3.11,


00:12:47.600 --> 00:12:50.200
the new self type is supported.


00:12:50.200 --> 00:12:55.440
If you are having a method that returns an instance of the class,


00:12:55.440 --> 00:12:58.960
you can use the self type so that if you have a subclass,


00:12:58.960 --> 00:13:01.760
you get the correct subclass return instead of having to


00:13:01.760 --> 00:13:05.680
explicitly redefine that for every subclass you are doing.


00:13:05.680 --> 00:13:08.280
More convenience methods for those who are diving


00:13:08.280 --> 00:13:10.760
deep into the typing system here.


00:13:10.760 --> 00:13:12.320
>> The self-type is so good.


00:13:12.320 --> 00:13:14.940
>> Yeah. It really cleans up a lot of problems.


00:13:14.940 --> 00:13:16.680
>> It was really janky.


00:13:16.680 --> 00:13:18.180
If you're inside the class,


00:13:18.180 --> 00:13:20.580
you put in quotes, the name of the class.


00:13:20.580 --> 00:13:23.460
Well, how's it supposed to find that one?


00:13:23.460 --> 00:13:25.760
Or if it's going to create a circular dependency,


00:13:25.760 --> 00:13:26.860
you've got to do weird things.


00:13:26.860 --> 00:13:28.940
So yeah, that's really, really nice.


00:13:28.940 --> 00:13:34.400
I do wish that Python had a two-stage parser aspect,


00:13:34.400 --> 00:13:35.800
where it would say, go through,


00:13:35.800 --> 00:13:37.860
here's all the stuff that's defined in the class.


00:13:37.860 --> 00:13:40.540
"Oh, here's some type things and other reference.


00:13:40.540 --> 00:13:41.500
We might not know what that is.


00:13:41.500 --> 00:13:43.580
Let's go all through and then go back again


00:13:43.580 --> 00:13:45.380
and see if we can figure out what that is."


00:13:45.380 --> 00:13:47.900
But the way it works now is when you're in the middle


00:13:47.900 --> 00:13:50.540
of a class, that class doesn't exist yet


00:13:50.540 --> 00:13:52.720
because it's not done defining it till you're at the end.


00:13:52.720 --> 00:13:54.620
But if you gotta say, "I'm gonna compare this


00:13:54.620 --> 00:13:55.700
against another one of me."


00:13:55.700 --> 00:13:57.500
Well, how do you say that in types?


00:13:57.500 --> 00:13:58.460
Self.


00:13:58.460 --> 00:13:59.300
- Right.


00:13:59.300 --> 00:14:00.140
- That's what we got.


00:14:00.140 --> 00:14:04.540
- And I can see this being rolled in to proper Python.


00:14:04.540 --> 00:14:06.020
It seems like at some point.


00:14:06.020 --> 00:14:12.000
I just feel like types went on from being this pie in the sky idea to bolted on type


00:14:12.000 --> 00:14:16.500
feature to it's really getting ironed out and really well supported by the community


00:14:16.500 --> 00:14:18.300
and really well supported by all the editors.


00:14:18.300 --> 00:14:23.140
There's some new parameters back stuff in here that I don't know too much about params


00:14:23.140 --> 00:14:24.140
to backs.


00:14:24.140 --> 00:14:26.380
We're not heavy into types yet.


00:14:26.380 --> 00:14:30.940
We're doing a lot with Django and doing some type ends there to start making some APIs.


00:14:30.940 --> 00:14:32.580
But that's where we're still diving in.


00:14:32.580 --> 00:14:34.480
A bunch of new miscellaneous features.


00:14:34.480 --> 00:14:39.380
So if you are looking for features galore that has happened in mypy 1.0,


00:14:39.380 --> 00:14:41.180
there's a bunch of fixes to crashes.


00:14:41.180 --> 00:14:43.820
So this seems like it's a really robust release.


00:14:43.820 --> 00:14:48.980
Another important one here is going to be the Python 3.10 match statement support.


00:14:48.980 --> 00:14:50.880
So it can compile those as well.


00:14:50.880 --> 00:14:54.120
So they're staying on top of all the recent language features,


00:14:54.120 --> 00:14:58.880
which is obviously what's needed to get momentum behind a project like this.


00:14:58.880 --> 00:15:02.740
I think anybody who's using Type-ins better using the mypy stuff.


00:15:02.740 --> 00:15:06.480
For those who don't know, it's also supported by Dropbox.


00:15:06.480 --> 00:15:10.120
When I said 40 percent faster,


00:15:10.120 --> 00:15:14.120
that was actually running against the Dropbox main code base.


00:15:14.120 --> 00:15:17.560
So that's the benchmark against Dropbox itself.


00:15:17.560 --> 00:15:18.520
>> Interesting.


00:15:18.520 --> 00:15:19.040
>> Yeah.


00:15:19.040 --> 00:15:20.280
>> Yeah. mypy C is pretty


00:15:20.280 --> 00:15:23.120
an interesting thing that opens up once you start to adopt types.


00:15:23.120 --> 00:15:26.440
For me, the main reason I use types in my world and I


00:15:26.440 --> 00:15:28.700
I realized that I live in a different world


00:15:28.700 --> 00:15:30.460
than a lot of folks, but for me,


00:15:30.460 --> 00:15:33.700
it's really about making the editor tell me


00:15:33.700 --> 00:15:36.900
what it should know already and not,


00:15:36.900 --> 00:15:38.180
do I need to go look in that method?


00:15:38.180 --> 00:15:40.100
Does this actually take, when it says user ID,


00:15:40.100 --> 00:15:44.220
is that a string or is that a BSON from MongoDB?


00:15:44.220 --> 00:15:46.420
I can't remember what kind of thing this stores


00:15:46.420 --> 00:15:48.520
for this, it says, you know?


00:15:48.520 --> 00:15:50.060
And then, oh, okay, that's obvious, right?


00:15:50.060 --> 00:15:51.980
Just so you don't have to keep bouncing around,


00:15:51.980 --> 00:15:54.460
you just stay in the way you're trying to focus.


00:15:54.460 --> 00:15:55.300
And I love it.


00:15:55.300 --> 00:15:56.120
- Yeah, it's extra smart.


00:15:56.120 --> 00:15:58.880
If you're using a PyCharm or VS Code


00:15:58.880 --> 00:16:00.420
and you thought it was smart before,


00:16:00.420 --> 00:16:02.440
once you introduce these types in there,


00:16:02.440 --> 00:16:04.160
it gets even smarter.


00:16:04.160 --> 00:16:07.000
>> Absolutely. Awesome one.


00:16:07.000 --> 00:16:09.280
Now, two pieces of real-time feedback.


00:16:09.280 --> 00:16:12.120
One, I found out with the untangle that if you


00:16:12.120 --> 00:16:15.200
have multiple nodes of the same thing,


00:16:15.200 --> 00:16:16.520
like you would in an RSS feed,


00:16:16.520 --> 00:16:18.160
you have multiple posts or a blog post,


00:16:18.160 --> 00:16:20.200
same thing for the post.


00:16:20.200 --> 00:16:24.960
You just still say root.mainthing.child,


00:16:24.960 --> 00:16:26.480
or whatever the name of that node is,


00:16:26.480 --> 00:16:28.920
that becomes a list instead of a single thing,


00:16:28.920 --> 00:16:30.960
if there's more than one.


00:16:30.960 --> 00:16:33.600
That's pretty interesting.


00:16:33.600 --> 00:16:38.120
Then the other one here is over to you, Brian.


00:16:38.120 --> 00:16:41.560
Jeff asked, can an old project be converted to work with Flit?


00:16:41.560 --> 00:16:44.120
>> Yes, probably, maybe.


00:16:44.120 --> 00:16:46.760
It really depends on the project.


00:16:46.760 --> 00:16:50.400
>> Some of it can be, there's not that much to it.


00:16:50.400 --> 00:16:53.080
There's pyproject.toml and a few other things,


00:16:53.080 --> 00:16:57.240
and it's probably not that much work to migrate it, I guess.


00:16:57.240 --> 00:17:01.400
- Yeah, but I mean, I'm assuming by old project,


00:17:01.400 --> 00:17:05.320
it's an old setup.py setup tools project,


00:17:05.320 --> 00:17:07.480
and you could do anything in that.


00:17:07.480 --> 00:17:11.920
So if you were going crazy, you can't go crazy anymore.


00:17:11.920 --> 00:17:15.040
But if it was a fairly simple, straightforward,


00:17:15.040 --> 00:17:16.680
then yeah, probably.


00:17:16.680 --> 00:17:18.480
- If you were going crazy, you get what you deserve.


00:17:18.480 --> 00:17:19.320
How about that?


00:17:19.320 --> 00:17:22.040
(laughing)


00:17:22.040 --> 00:17:25.960
So, all right, before we move on to our next topic,


00:17:25.960 --> 00:17:28.800
well, let me tell you about our sponsor for this week,


00:17:28.800 --> 00:17:31.260
Microsoft for Startups Founders Hub.


00:17:31.260 --> 00:17:32.220
Really great program.


00:17:32.220 --> 00:17:35.820
If you have a startup and you wanna get tons of support,


00:17:35.820 --> 00:17:37.500
not just technical support,


00:17:37.500 --> 00:17:40.080
but also networking with people


00:17:40.080 --> 00:17:42.040
who have founded their own startups,


00:17:42.040 --> 00:17:42.880
then you should check out


00:17:42.880 --> 00:17:45.480
Microsoft for Startups Founders Hub.


00:17:45.480 --> 00:17:46.560
As Brian mentioned last time,


00:17:46.560 --> 00:17:48.200
we heard back from one of our listeners


00:17:48.200 --> 00:17:49.960
who signed up and had done several startups


00:17:49.960 --> 00:17:51.400
and said, "I was a little skeptical,


00:17:51.400 --> 00:17:53.240
but this is a really great program.


00:17:53.240 --> 00:17:54.360
It's fantastic for us.


00:17:54.360 --> 00:17:57.000
And I just wanted to let you know how well it's working out.


00:17:57.000 --> 00:17:58.500
So definitely a good program.


00:17:58.500 --> 00:17:59.700
People should check it out.


00:17:59.700 --> 00:18:02.540
So what it is, is Microsoft created this program


00:18:02.540 --> 00:18:06.620
to help people become successful starting a business.


00:18:06.620 --> 00:18:08.840
By some estimates, 90% of startups


00:18:08.840 --> 00:18:10.620
go out of business within the first year.


00:18:10.620 --> 00:18:12.580
That's not what you want for your startup.


00:18:12.580 --> 00:18:14.420
You want it to succeed.


00:18:14.420 --> 00:18:16.220
So with Microsoft for Startup Founders Hub,


00:18:16.220 --> 00:18:18.880
you get access to free resources.


00:18:18.880 --> 00:18:23.800
So this includes platform technologies like Azure, GitHub,


00:18:23.800 --> 00:18:25.600
a partner with OpenAI.


00:18:25.600 --> 00:18:27.720
I've heard chat GTP is catching on,


00:18:27.720 --> 00:18:28.600
so that's cool.


00:18:28.600 --> 00:18:31.560
So you get access to some of the resources from them,


00:18:31.560 --> 00:18:34.400
which is fantastic, but you also get access to


00:18:34.400 --> 00:18:36.360
a mentorship network which I think maybe


00:18:36.360 --> 00:18:38.160
is even the most important part.


00:18:38.160 --> 00:18:39.960
You get access to a pool of hundreds of mentors


00:18:39.960 --> 00:18:41.440
across ranges of disciplines,


00:18:41.440 --> 00:18:44.080
across areas like idea validation,


00:18:44.080 --> 00:18:45.840
fundraising, management and coaching,


00:18:45.840 --> 00:18:48.640
sales and marketing, and others.


00:18:48.640 --> 00:18:51.560
So you can go and book one-on-one meetings with these folks,


00:18:51.560 --> 00:18:54.020
and many of them are former founders themselves.


00:18:54.020 --> 00:18:57.840
So you can make your idea reality today,


00:18:57.840 --> 00:19:00.660
the critical support you get from Microsoft for Startups Founders Hub.


00:19:00.660 --> 00:19:07.300
Just visit pythonbytes.fm/foundershub2022 to go apply.


00:19:07.300 --> 00:19:08.660
The link's in your show notes.


00:19:08.660 --> 00:19:10.900
You don't have to be VC-backed,


00:19:10.900 --> 00:19:13.080
don't have to be third-party validated.


00:19:13.080 --> 00:19:16.440
You just apply. If they like what you want, it's free,


00:19:16.440 --> 00:19:19.240
and they'll take you into the program and you can get started.


00:19:19.240 --> 00:19:22.640
Thank you to Microsoft for supporting our show.


00:19:22.640 --> 00:19:24.880
With that, Brian, over to you.


00:19:24.880 --> 00:19:29.240
>> Yeah. Go back to the same article for a second.


00:19:29.240 --> 00:19:32.320
>> Just scroll a little further down the same page. I got it.


00:19:32.320 --> 00:19:37.760
>> Within the same packaging Python projects thing,


00:19:37.760 --> 00:19:39.920
I have a reason to bring this up.


00:19:39.920 --> 00:19:42.000
But anyway, it lists a whole bunch of tools you can


00:19:42.000 --> 00:19:45.040
use for your build a backend.


00:19:45.040 --> 00:19:47.920
It's got PDM, FLIT, Subtools, and Hatchling.


00:19:47.920 --> 00:19:54.900
There's another page on the same in PyPI or PyPA that is the packaging flow.


00:19:54.900 --> 00:19:57.820
This one talks about it as more of a high-level.


00:19:57.820 --> 00:20:00.440
It's not a tutorial, talks about the high-level thing.


00:20:00.440 --> 00:20:05.320
There, it lists all of those, FLIT, Hatch, PDM, Poetry, Subtools,


00:20:05.320 --> 00:20:07.660
and then also Trampoline and Way,


00:20:07.660 --> 00:20:09.420
which I've not heard of.


00:20:09.420 --> 00:20:11.820
This can cause confusion,


00:20:11.820 --> 00:20:13.820
and that's really what we're talking about.


00:20:13.820 --> 00:20:16.180
I have, and I'm bringing this up because


00:20:16.180 --> 00:20:20.380
just independent of my involvement with Python bytes,


00:20:20.380 --> 00:20:23.780
I've been involved with people having trouble


00:20:23.780 --> 00:20:26.580
figuring out how to package their Python code


00:20:26.580 --> 00:20:28.980
independently. I've got a web developer doing it,


00:20:28.980 --> 00:20:34.300
a tools backend person, and then somebody that's just trying, he's a C# person that just


00:20:34.300 --> 00:20:38.620
was trying to package a frontend to his tool, a Python frontend.


00:20:38.620 --> 00:20:41.020
And he was like, I don't know how to do all this.


00:20:41.020 --> 00:20:43.220
And it is confusing.


00:20:43.220 --> 00:20:47.020
And it even is confusing for seasoned Python developers.


00:20:47.020 --> 00:20:50.220
And here we've got, oh, I didn't link it right now.


00:20:50.220 --> 00:20:55.720
But there was a Doug Hellman from Module of the Week


00:20:55.720 --> 00:20:59.720
posted that he's published lots of packages,


00:20:59.720 --> 00:21:02.720
and he went to do it again, and was a little lost


00:21:02.720 --> 00:21:03.920
and wanted some advice.


00:21:03.920 --> 00:21:08.020
So new people or people that are outside of the scope


00:21:08.020 --> 00:21:09.420
are confused.


00:21:09.420 --> 00:21:12.620
And I think it's fair to recognize that.


00:21:12.620 --> 00:21:15.540
And so there's a lot of discussion around it.


00:21:15.540 --> 00:21:22.740
And Pradyun put together a blog post, was talking about it on Disqus.


00:21:22.740 --> 00:21:28.060
And he put together an article called "Thoughts on the Python Packaging Ecosystem."


00:21:28.060 --> 00:21:31.020
And I think it's a kind of a fair discussion around it.


00:21:31.020 --> 00:21:37.860
And one of the points is that a lot of Python users are not software engineers.


00:21:37.860 --> 00:21:41.020
And, but we also have to recognize that a lot are.


00:21:41.020 --> 00:21:47.580
So it's a diverse ecosystem, and I think it's going to be a mess.


00:21:47.580 --> 00:21:49.100
It's going to be a mess for a while.


00:21:49.100 --> 00:21:53.260
And I think it's good that it's a mess in some cases.


00:21:53.260 --> 00:21:56.860
It's good that we don't just have setup tools now.


00:21:56.860 --> 00:22:01.900
We have a lot of ways that are working on different pieces of the problem,


00:22:01.900 --> 00:22:07.260
of how to make it easier around PyProject.toml,


00:22:07.260 --> 00:22:09.420
and you can have a different build back end.


00:22:09.420 --> 00:22:13.020
But he breaks down the points.


00:22:13.020 --> 00:22:15.720
It's a big article, but one of the things is,


00:22:15.720 --> 00:22:22.520
it kind of unintentionally, the packaging ecosystem unintentionally became a competitive space that it is today.


00:22:22.520 --> 00:22:30.660
And maybe we need to make, the community needs to make an explicit decision if we should continue operating under that model


00:22:30.660 --> 00:22:32.660
that led to what we have now.


00:22:32.660 --> 00:22:37.860
We could pick from different tools to do in different things.


00:22:37.860 --> 00:22:40.500
that's a good model, according to this.


00:22:40.500 --> 00:22:45.500
Or in approximately the same choices to get a really


00:22:45.500 --> 00:22:49.060
bad user experience, bad for some people, good for others.


00:22:49.060 --> 00:22:52.380
And then, also maybe we should pick a default,


00:22:52.380 --> 00:22:55.660
because picking a default doesn't make the other approaches illegal,


00:22:55.660 --> 00:22:57.340
they just aren't the default.


00:22:57.340 --> 00:23:00.820
And I'm kind of leaning towards that, I think it would be good to have something,


00:23:00.820 --> 00:23:02.340
but I'm not sure what.


00:23:02.340 --> 00:23:05.420
Down, longer down the line,


00:23:05.420 --> 00:23:09.180
pardon me, of the scroll, is PIP.


00:23:09.180 --> 00:23:12.700
One of the ideas is maybe we should have PIP.


00:23:12.700 --> 00:23:14.620
Well, okay, I'll back up a little bit.


00:23:14.620 --> 00:23:19.000
Some of these tools like Poetry and PDM are workflow tools,


00:23:19.000 --> 00:23:23.620
and other tools like Flit are more build.


00:23:23.620 --> 00:23:26.700
Flit's more like I want to just build a wheel.


00:23:26.700 --> 00:23:27.880
It also does publish,


00:23:27.880 --> 00:23:31.420
but mostly the workload is around building the wheel.


00:23:31.420 --> 00:23:36.220
Whereas PDM and Poetry are like this whole workflow thing,


00:23:36.220 --> 00:23:38.140
control your virtual environment,


00:23:38.140 --> 00:23:39.660
do a whole bunch of stuff.


00:23:39.660 --> 00:23:43.980
I know a lot of people from other languages like JavaScript,


00:23:43.980 --> 00:23:46.540
maybe Go, I don't know,


00:23:46.540 --> 00:23:51.180
are used to these high-end workflow things that do everything for you.


00:23:51.180 --> 00:23:54.380
But we're already used to a multi-tool model now,


00:23:54.380 --> 00:23:56.640
so I'm not sure how to get from here to there.


00:23:56.640 --> 00:23:59.700
It would be interesting to have pip do it.


00:23:59.700 --> 00:24:01.200
we already all use pip,


00:24:01.200 --> 00:24:03.680
so could pip expand to do


00:24:03.680 --> 00:24:07.500
both the focus thing it's doing now, installing a package,


00:24:07.500 --> 00:24:11.480
and then also do some workflow stuff?


00:24:11.480 --> 00:24:14.700
I guess I'd be open to explore that idea,


00:24:14.700 --> 00:24:16.260
but I was curious what you guys thought.


00:24:16.260 --> 00:24:17.700
>> I'd be open to explore it.


00:24:17.700 --> 00:24:20.160
Not to disparage anything, but I personally dislike


00:24:20.160 --> 00:24:22.900
the things that try to put their workflow onto you.


00:24:22.900 --> 00:24:24.980
I'd much rather have something simpler.


00:24:24.980 --> 00:24:26.620
As someone who teaches Python,


00:24:26.620 --> 00:24:29.580
this is a huge problem for people getting into language.


00:24:29.580 --> 00:24:31.860
They feel like it's a big challenge.


00:24:31.860 --> 00:24:33.320
Why is it so hard?


00:24:33.320 --> 00:24:34.780
Why do I have to learn all these things?


00:24:34.780 --> 00:24:37.180
I picked the wrong thing and now am I screwed?


00:24:37.180 --> 00:24:38.420
No, you're not out of luck.


00:24:38.420 --> 00:24:41.540
You just delete your virtual environment and start over.


00:24:41.540 --> 00:24:47.140
But yes, I think having many of them, one, is a problem.


00:24:47.140 --> 00:24:47.540
>> Yeah.


00:24:47.540 --> 00:24:52.020
>> I think something that forces workflows on you,


00:24:52.020 --> 00:24:53.660
I'm not a huge fan of.


00:24:53.660 --> 00:24:57.860
I feel like we've already got lots of tools that solve it pretty well.


00:24:57.860 --> 00:25:00.620
I'm not against pip doing a little bit more.


00:25:00.620 --> 00:25:04.920
I use pip-tools for managing my dependencies and it is so good.


00:25:04.920 --> 00:25:06.620
It is so good.


00:25:06.620 --> 00:25:09.480
You state just your top-level dependencies and when it's time to,


00:25:09.480 --> 00:25:11.820
let's see what new, let's make sure we upgrade to the new things.


00:25:11.820 --> 00:25:14.060
You just run pip-tools upgrade and it'll regenerate.


00:25:14.060 --> 00:25:15.940
You can evaluate what the changes are.


00:25:15.940 --> 00:25:17.500
I really like pip-tools.


00:25:17.500 --> 00:25:21.620
I think it's a much simpler scenario than a lot of us.


00:25:21.620 --> 00:25:23.420
I know other people really like it.


00:25:23.420 --> 00:25:25.160
But anyway, this is what I like.


00:25:25.160 --> 00:25:29.700
We could possibly leave pip alone and expand pip-tools to do the rest of the workflow stuff.


00:25:29.700 --> 00:25:30.900
Yes, potentially.


00:25:30.900 --> 00:25:33.160
Yeah, we could, but I kind of agree with that,


00:25:33.160 --> 00:25:36.660
like Unix small tools do one thing really well,


00:25:36.660 --> 00:25:39.900
which is why I've kind of gone with the pip-tools approach as well,


00:25:39.900 --> 00:25:42.900
because I really feel like pip-tools does such an incredible job


00:25:42.900 --> 00:25:46.160
at that dependency resolution and getting exactly what you need


00:25:46.160 --> 00:25:49.660
way better and way faster than pip itself does.


00:25:49.660 --> 00:25:53.400
I think that approach that Flit takes, it seems like, I've never used Flit,


00:25:53.400 --> 00:25:56.640
but the fact that it can just wrap around pre-existing tools


00:25:56.640 --> 00:26:00.920
to provide a common interface for users to be able to build,


00:26:00.920 --> 00:26:05.520
package, push the whole deal seems really nice because it


00:26:05.520 --> 00:26:08.640
guides them through step-by-step that process until maybe at


00:26:08.640 --> 00:26:10.920
some point they don't need it or they just enjoy it and it's


00:26:10.920 --> 00:26:13.480
using some of the standard tools behind the scenes.


00:26:13.480 --> 00:26:13.960
>> Yeah.


00:26:13.960 --> 00:26:15.360
>> I'm also with Michael, I don't like


00:26:15.360 --> 00:26:19.160
the predefined workflows that I'm not a huge fan of poetry


00:26:19.160 --> 00:26:21.080
necessarily because it just doesn't


00:26:21.080 --> 00:26:23.480
fit the way my brain wants to work down a project.


00:26:23.480 --> 00:26:24.980
And I'm not surprised.


00:26:24.980 --> 00:26:30.280
So I was I was thinking an analogy of like, if you're going to have a pocket knife,


00:26:30.280 --> 00:26:32.700
which tools should be in the pocket knife?


00:26:32.700 --> 00:26:36.400
And if you go into like the medium pocket knives on the Victoria Knox site,


00:26:36.400 --> 00:26:37.740
oh, no, it won't load.


00:26:37.740 --> 00:26:39.880
You get like even the small ones.


00:26:39.880 --> 00:26:42.600
So the medium ones, you get like tons of different tools,


00:26:42.600 --> 00:26:43.800
which tools should be there.


00:26:43.800 --> 00:26:45.640
Nobody's going to agree.


00:26:45.640 --> 00:26:49.640
And I thought, well, at least in the small ones, maybe people can agree


00:26:49.640 --> 00:26:53.000
because, oh no, not even in the small ones, people can't agree,


00:26:53.000 --> 00:26:55.000
which should go together.


00:26:55.000 --> 00:26:59.400
I want my Swiss Army knife to also have drywall tools


00:26:59.400 --> 00:27:01.400
and something for my car.


00:27:01.400 --> 00:27:04.400
It seems like a combination of


00:27:04.400 --> 00:27:07.000
really small tools that do one thing really well


00:27:07.000 --> 00:27:09.280
with some tools that layer on top of it,


00:27:09.280 --> 00:27:11.280
whether it's DryIDE, whether it's Flit,


00:27:11.280 --> 00:27:14.120
and you can have the opinionated workflows


00:27:14.120 --> 00:27:16.560
layered on top of this. They rest on top of


00:27:16.560 --> 00:27:19.520
a solid set of identical tools that produce


00:27:19.520 --> 00:27:21.520
It's the identical thing.


00:27:21.520 --> 00:27:22.520
Yeah.


00:27:22.520 --> 00:27:24.360
I'm in that camp as well.


00:27:24.360 --> 00:27:26.560
That's where it, but I totally get that.


00:27:26.560 --> 00:27:27.960
That's confusing for people.


00:27:27.960 --> 00:27:28.960
Oh, totally confusing.


00:27:28.960 --> 00:27:32.720
I mean, the first time I go to explain to someone how they're going to manage like their


00:27:32.720 --> 00:27:36.920
dependencies on a Django project, I'm like, oh my gosh, I had to step back and think about


00:27:36.920 --> 00:27:41.420
the 20 steps that kind of go into how I learned to do this, that I'm now explaining to some


00:27:41.420 --> 00:27:42.420
new person.


00:27:42.420 --> 00:27:45.000
I'm like, I'm sorry, this doesn't sound easy at all.


00:27:45.000 --> 00:27:48.160
There's gotta be a better way, but I don't know if there is.


00:27:48.160 --> 00:27:49.160
Yeah.


00:27:49.160 --> 00:27:51.880
Anyway, okay, rabbit hole, but.


00:27:51.880 --> 00:27:52.720
- Oh, totally.


00:27:52.720 --> 00:27:55.320
I mean, Python packaging is the ultimate rabbit hole


00:27:55.320 --> 00:27:56.600
in the Python community.


00:27:56.600 --> 00:27:57.420
- Yeah.


00:27:57.420 --> 00:27:58.540
Speaking of packages,


00:27:58.540 --> 00:28:01.920
Michael, do you wanna jump into yours?


00:28:01.920 --> 00:28:03.840
- I do wanna talk about more packages.


00:28:03.840 --> 00:28:05.080
This is the simplified version,


00:28:05.080 --> 00:28:08.080
but also a bit of real-time follow-up as well.


00:28:08.080 --> 00:28:11.880
Again, I'm having many of the folks that were on that


00:28:11.880 --> 00:28:14.520
discuss thread that you mentioned, Brian,


00:28:14.520 --> 00:28:16.560
about this topic on Talk Python,


00:28:16.560 --> 00:28:17.800
probably in a couple of weeks,


00:28:17.800 --> 00:28:19.280
has a big panel discussion about it.


00:28:19.280 --> 00:28:21.880
So if you all want to hear more of this,


00:28:21.880 --> 00:28:24.600
but for a long time with the folks who are participating


00:28:24.600 --> 00:28:26.560
and dive on in.


00:28:26.560 --> 00:28:27.640
Okay.


00:28:27.640 --> 00:28:31.880
Oh, also, apparently I said chat GTP,


00:28:31.880 --> 00:28:36.040
rather than I meant ChatGPT, as Misharraf pointed out.


00:28:36.040 --> 00:28:37.480
So thanks for that.


00:28:37.480 --> 00:28:38.960
That's the one I meant, you know the one.


00:28:38.960 --> 00:28:42.760
All right, so there's this cool GitHub page, I guess,


00:28:42.760 --> 00:28:45.440
called toppypi packages.


00:28:45.440 --> 00:28:47.880
And so this is a pretty neat place.


00:28:47.880 --> 00:28:51.360
It shows you the top 5,000 most downloaded


00:28:51.360 --> 00:28:54.080
PyPI packages updated monthly.


00:28:54.080 --> 00:28:56.420
So you can scroll down here and you can say,


00:28:56.420 --> 00:29:00.840
show me the top 100, show me the top 1,000, whatever.


00:29:00.840 --> 00:29:02.720
I'll pull up the 1,000 for you, Brian.


00:29:02.720 --> 00:29:03.600
There you go.


00:29:03.600 --> 00:29:05.720
So these are updated over the last 30 days.


00:29:05.720 --> 00:29:07.600
And it actually says when it was last updated


00:29:07.600 --> 00:29:09.320
and that was February 1st,


00:29:09.320 --> 00:29:11.480
which is a week ago as of this recording.


00:29:11.480 --> 00:29:13.640
So that's pretty fresh, really.


00:29:13.640 --> 00:29:17.080
And so you can find things like pytest-check.


00:29:17.080 --> 00:29:18.480
Is it in here somewhere, Brian?


00:29:18.480 --> 00:29:22.160
- It's in the top 5,000, but not the top 1,000.


00:29:22.160 --> 00:29:23.400
- Oh, okay, did I hit the wrong one?


00:29:23.400 --> 00:29:24.800
Sorry, I tried to pull you up there.


00:29:24.800 --> 00:29:27.960
But you see things like Boto3 and URLlib


00:29:27.960 --> 00:29:30.020
are the most popular.


00:29:30.020 --> 00:29:35.020
So Boto3 is downloaded 522 million times every month,


00:29:35.020 --> 00:29:38.720
every 30 days or so, which is just insane.


00:29:38.720 --> 00:29:40.160
You gotta be careful because some of these


00:29:40.160 --> 00:29:41.960
are really popular dependencies


00:29:41.960 --> 00:29:45.040
rather than directly really important libraries.


00:29:45.040 --> 00:29:48.240
Like I use Boto3 all the time as a dependency,


00:29:48.240 --> 00:29:51.320
the less often directly, definitely for your OLIB3,


00:29:51.320 --> 00:29:52.640
I don't think I've ever used it directly,


00:29:52.640 --> 00:29:54.080
but obviously it gets installed,


00:29:54.080 --> 00:29:55.440
but I'm gonna use many things.


00:29:55.440 --> 00:29:58.400
So this is pretty cool if people wanna check it out.


00:29:58.400 --> 00:29:59.560
Calvin, what do you think?


00:29:59.560 --> 00:30:00.920
- Oh, I'm excited about this too,


00:30:00.920 --> 00:30:03.640
'cause just thinking about the number of times


00:30:03.640 --> 00:30:08.640
the Amazon cloud must go download Boto3 from like Wi-Fi,


00:30:09.600 --> 00:30:14.980
mind blowing. Like, there's all the serverless that's on server someplace downloading packages


00:30:14.980 --> 00:30:18.340
in the background. Now you get a feel for it with a big number.


00:30:18.340 --> 00:30:22.100
Yeah, it's really nuts, which is also a little bit ironic because it comes from AWS and they


00:30:22.100 --> 00:30:25.300
sent it over to PyPI and then it comes back to AWS.


00:30:25.300 --> 00:30:28.380
It's a weird, root goal world.


00:30:28.380 --> 00:30:33.380
Don't they use Fastly for their CDN? I think they use Fastly.


00:30:33.380 --> 00:30:34.380
PyPI?


00:30:34.380 --> 00:30:35.380
Yeah.


00:30:35.380 --> 00:30:36.380
I believe so.


00:30:36.380 --> 00:30:38.300
- Yeah, it's like, you have to go to a competitor


00:30:38.300 --> 00:30:40.260
to get like, yes, exactly.


00:30:40.260 --> 00:30:42.300
- Yeah, how interesting.


00:30:42.300 --> 00:30:44.300
So this is interesting in and of itself,


00:30:44.300 --> 00:30:45.460
and it tells you which ones are there.


00:30:45.460 --> 00:30:47.380
And there's an API which you can hit,


00:30:47.380 --> 00:30:48.340
let's not hit the minified one,


00:30:48.340 --> 00:30:50.220
let's hit the non-minified one.


00:30:50.220 --> 00:30:53.100
And it'll tell you actually returns when it was updated,


00:30:53.100 --> 00:30:55.460
what the query was, et cetera, et cetera.


00:30:55.460 --> 00:30:58.220
And so you actually can get this as a JSON endpoint,


00:30:58.220 --> 00:30:59.060
which is pretty cool.


00:30:59.060 --> 00:31:01.820
It's just a static file that gets updated,


00:31:01.820 --> 00:31:04.540
you know, every couple of days on this GitHub page setup.


00:31:04.540 --> 00:31:07.060
That's also an interesting way to think of an API.


00:31:07.060 --> 00:31:10.360
My API is a static file that periodically gets refreshed,


00:31:10.360 --> 00:31:13.240
but there it is. I don't think you'll hear much there.


00:31:13.240 --> 00:31:14.420
>> I love it though.


00:31:14.420 --> 00:31:15.740
>> I do too.


00:31:15.740 --> 00:31:16.980
>> Just a static cache.


00:31:16.980 --> 00:31:17.660
>> Yeah.


00:31:17.660 --> 00:31:20.460
>> Yeah. Think how scalable that bad boy is.


00:31:20.460 --> 00:31:23.100
Especially if you put a CDN behind it.


00:31:23.100 --> 00:31:26.860
Then related to that by the same person,


00:31:26.860 --> 00:31:31.180
there is HugoVic top PyPI packages on GitHub,


00:31:31.180 --> 00:31:32.760
which is a regular dump of


00:31:32.760 --> 00:31:35.080
the most downloaded packages from PyPI.


00:31:35.080 --> 00:31:36.400
So it sounds like, "Yeah,


00:31:36.400 --> 00:31:39.200
Michael, you told us about that. Thanks a bunch."


00:31:39.200 --> 00:31:42.980
No, it's not the names, it's all of it.


00:31:42.980 --> 00:31:46.720
It's all of the data that is here.


00:31:46.720 --> 00:31:48.240
Where do they have it? This one?


00:31:48.240 --> 00:31:50.960
I don't know if I want to open this up, but it's really big.


00:31:50.960 --> 00:31:53.480
So it's all the XML.


00:31:53.480 --> 00:31:57.080
I'm not sure where it is in here, but it's all the XML files.


00:31:57.080 --> 00:32:01.560
The JSON files that Untangle got me thinking XML.


00:32:01.560 --> 00:32:07.060
So it's all the JSON files of what comes out of the PyPI API,


00:32:07.060 --> 00:32:10.060
but all of them, it's when I checked it out and unzipped it,


00:32:10.060 --> 00:32:12.420
and it was like 22 gigs on disk.


00:32:12.420 --> 00:32:16.860
So this is a big beast right here if you download it.


00:32:16.860 --> 00:32:18.700
Actually, no, this is not the right link.


00:32:18.700 --> 00:32:21.000
I have to find it. I'll put it in the show notes.


00:32:21.000 --> 00:32:23.180
But there's this guy,


00:32:23.180 --> 00:32:25.140
darn it, this is the wrong one.


00:32:25.140 --> 00:32:27.060
But there's also linked off of this.


00:32:27.060 --> 00:32:29.580
There's one where you get all of the packages,


00:32:29.580 --> 00:32:31.980
which is all the JSON for every package.


00:32:31.980 --> 00:32:34.340
I'll have to figure out where I got that from, unfortunately.


00:32:34.340 --> 00:32:35.980
It's the wrong link I pulled up.


00:32:35.980 --> 00:32:38.540
But anyway, these are both really cool resources,


00:32:38.540 --> 00:32:40.580
and you'll have to check the links for that other one.


00:32:40.580 --> 00:32:41.020
>> Cool.


00:32:41.020 --> 00:32:41.540
>> Definitely.


00:32:41.540 --> 00:32:43.140
>> Yeah. All right.


00:32:43.140 --> 00:32:43.940
>> Cowell.


00:32:43.940 --> 00:32:49.460
>> Coming in at 57 on that list for the last 30 days is SQL.


00:32:49.460 --> 00:32:52.860
For those of you who aren't familiar and do like Swiss Army Knives,


00:32:52.860 --> 00:32:55.420
this is the Swiss Army Knife of database tools.


00:32:55.420 --> 00:32:56.860
It's not only an ORM,


00:32:56.860 --> 00:32:59.740
but it has a whole SQL toolkit built into it.


00:32:59.740 --> 00:33:01.260
If you've never touched SQLAlchemy,


00:33:01.260 --> 00:33:02.600
but deal with databases,


00:33:02.600 --> 00:33:03.740
you may want to check this out.


00:33:03.740 --> 00:33:05.520
More importantly, and this ties in with


00:33:05.520 --> 00:33:09.120
my previous announcement on the mypy 1.0 release,


00:33:09.120 --> 00:33:13.620
there's a lot more support in this release for types and typing.


00:33:13.620 --> 00:33:18.740
There's native out of the box mypy experience has been improved.


00:33:18.740 --> 00:33:21.540
Now, the author of SQLAlchemy,


00:33:21.540 --> 00:33:23.680
Mike Bayer is actually going to be joining us in


00:33:23.680 --> 00:33:25.980
a few weeks here at Python Web Conference and giving


00:33:25.980 --> 00:33:29.260
a tutorial-length session on SQLAlchemy.


00:33:29.260 --> 00:33:32.700
He did this last time two years ago when he released 1.4.


00:33:32.700 --> 00:33:35.180
For those of you who have been following along in the background,


00:33:35.180 --> 00:33:38.060
the 1.4 release was the first half of


00:33:38.060 --> 00:33:42.140
this major revamp of SQLAlchemy into this new world.


00:33:42.140 --> 00:33:45.040
2.0 is the second half of that revamp.


00:33:45.040 --> 00:33:47.340
It's really been four years


00:33:47.340 --> 00:33:49.860
coming for this major release of SQLAlchemy.


00:33:49.860 --> 00:33:52.900
If you want to know what's new and hear it from the horse's mouth,


00:33:52.900 --> 00:33:55.700
Mike Bear is going to be joining us and he'll be


00:33:55.700 --> 00:33:57.740
happy to answer all of your questions.


00:33:57.740 --> 00:34:01.580
Let's see, there's a ton of new things released in here.


00:34:01.580 --> 00:34:03.260
I think if I just scroll down--


00:34:03.260 --> 00:34:08.020
yeah, so plugin-free, PEP484 compatible ORM syntaxes.


00:34:08.020 --> 00:34:10.980
So again, kind of ripping out the old stuff.


00:34:10.980 --> 00:34:14.420
All the typing support in here is all fresh.


00:34:14.420 --> 00:34:18.580
If you are using the mypy plugins from before,


00:34:18.580 --> 00:34:20.900
you're going to want to take all those out.


00:34:20.900 --> 00:34:22.860
They're considered deprecated at this point.


00:34:22.860 --> 00:34:25.980
So that's something that's very important for you to consider.


00:34:25.980 --> 00:34:29.720
But now, SQLAlchemy 2.0 is using all the new Python 3


00:34:29.720 --> 00:34:33.780
wonderfulness of data classes, enums, inline annotations.


00:34:33.780 --> 00:34:36.260
It's just really a nice modernization


00:34:36.260 --> 00:34:38.660
of a really powerful package.


00:34:38.660 --> 00:34:41.340
See what else is in here that was of super importance.


00:34:41.340 --> 00:34:42.780
Oh, yeah, some performance stuff.


00:34:42.780 --> 00:34:47.300
So this all new fully integrated ORM approach to bulk inserts


00:34:47.300 --> 00:34:48.780
is quite interesting.


00:34:48.780 --> 00:34:50.860
You will get a major speed increase


00:34:50.860 --> 00:34:52.860
except if you're using MySQL.


00:34:52.860 --> 00:34:57.360
The MySQL folks have not implemented the insert returning syntax,


00:34:57.360 --> 00:34:59.700
but if you're on MariaDB, you're good to go.


00:34:59.700 --> 00:35:01.500
So that's something to pay attention to.


00:35:01.500 --> 00:35:03.660
In addition to that performance,


00:35:03.660 --> 00:35:06.660
there's also the bulk optimized schema reflection.


00:35:06.660 --> 00:35:09.460
So if you were using SQLAlchemy,


00:35:09.460 --> 00:35:12.660
it was basically doing a table by table reflection


00:35:12.660 --> 00:35:15.360
if you were asking it for metadata about the tables.


00:35:15.360 --> 00:35:19.960
Now in all of the backends, there is basically a--


00:35:19.960 --> 00:35:22.760
Oh, sorry, I think it's only for Postgres and Oracle right now.


00:35:22.760 --> 00:35:26.480
So Postgres and Oracle support the bulk schema upgrades.


00:35:26.480 --> 00:35:29.960
You can see right here for Postgres, a 250% improvement,


00:35:29.960 --> 00:35:33.160
and for Oracle, a 900% improvement.


00:35:33.160 --> 00:35:34.760
I'm not sure what it was doing before,


00:35:34.760 --> 00:35:38.120
but it's a heck of a lot faster now at 900% improvement.


00:35:38.120 --> 00:35:39.840
Always a benefit there.


00:35:39.840 --> 00:35:42.520
And in addition, I'll point out some other things


00:35:42.520 --> 00:35:46.000
that were in the migration guide and the what's new in 2.0 guide.


00:35:46.000 --> 00:35:48.760
You're going to want to make sure you check those out here.


00:35:48.760 --> 00:35:52.260
there's like the migration process link from this article or blog post.


00:35:52.260 --> 00:35:54.920
You're going to want to make sure you read through those because there's major


00:35:54.920 --> 00:35:57.720
incompatibilities from 1.4 into 2.0.


00:35:57.720 --> 00:36:00.720
But the migration guide


00:36:00.720 --> 00:36:03.560
is really similar to like the 2.3 guide Python had.


00:36:03.560 --> 00:36:07.220
It tells you how to mechanically go through and make sure you're going to be compatible


00:36:07.220 --> 00:36:09.220
for the latest version of SQLAlchemy.


00:36:09.220 --> 00:36:12.420
Another speed improvement here is that all the native


00:36:12.420 --> 00:36:14.820
C extensions have been ported to Cython.


00:36:14.820 --> 00:36:17.420
Some of them are, they're all as fast.


00:36:17.420 --> 00:36:20.820
Some of them are slightly faster than their previous C extensions,


00:36:20.820 --> 00:36:24.060
but this also removes risks of memory corruption


00:36:24.060 --> 00:36:27.660
and stomping on each other and things that C does really well


00:36:27.660 --> 00:36:30.260
that you don't want. So that's also a nice benefit.


00:36:30.260 --> 00:36:32.660
And then the kind of tying into that same benefit


00:36:32.660 --> 00:36:36.120
is the SQLAlchemy is now PEP 517 enabled.


00:36:36.120 --> 00:36:38.760
So that means the PyProject.toml file


00:36:38.760 --> 00:36:42.460
that we just saw in the last couple announcements is supported,


00:36:42.460 --> 00:36:44.820
which means when you're on your local machine


00:36:44.820 --> 00:36:47.160
and doing a source build of SQLAlchemy,


00:36:47.160 --> 00:36:50.000
it can automatically go grab some of the dependencies such as


00:36:50.000 --> 00:36:52.880
Cython which can be tricky to get installed for some people.


00:36:52.880 --> 00:36:55.320
That is simplifying a lot of people's lives


00:36:55.320 --> 00:36:57.600
to go to SQLAlchemy 2.0.


00:36:57.600 --> 00:37:00.040
>> Yeah, SQLAlchemy 2.0 is a huge release.


00:37:00.040 --> 00:37:01.640
>> Yeah, it's a big deal.


00:37:01.640 --> 00:37:03.600
>> It's been years in the coming and it was in


00:37:03.600 --> 00:37:07.320
this intermediate 1.4 mode where you could choose


00:37:07.320 --> 00:37:10.020
either API and they finally removed some things.


00:37:10.020 --> 00:37:12.320
But to me, the biggest deal is the async.


00:37:12.320 --> 00:37:12.880
>> Yeah.


00:37:12.880 --> 00:37:15.000
>> Right. In the prior versions,


00:37:15.000 --> 00:37:17.000
there was just no way to do any async things,


00:37:17.000 --> 00:37:19.880
which meant on all the scalable areas,


00:37:19.880 --> 00:37:22.520
you were stuck trying to find somewhere else to go.


00:37:22.520 --> 00:37:23.800
Now, if you really like SQLAlchemy,


00:37:23.800 --> 00:37:25.560
you can just use the Async API.


00:37:25.560 --> 00:37:27.680
>> Yeah. I think a lot of people are going to benefit from those types,


00:37:27.680 --> 00:37:30.880
all the type support in mypy native support.


00:37:30.880 --> 00:37:31.920
>> Yeah, absolutely.


00:37:31.920 --> 00:37:33.160
>> And get back to your editor.


00:37:33.160 --> 00:37:36.840
>> The Vulcan search have always been a hassle in ORMs.


00:37:36.840 --> 00:37:39.320
Sounds like that's really gotten a lot of love too.


00:37:39.320 --> 00:37:41.680
>> Yeah, definitely. I look forward to it.


00:37:41.680 --> 00:37:44.920
>> I do as well. All right.


00:37:44.920 --> 00:37:47.280
Well, that's all of our topics.


00:37:47.280 --> 00:37:49.680
Brian, what do you got for us as an extra?


00:37:49.680 --> 00:37:53.680
I guess just one quick extra is like,


00:37:53.680 --> 00:37:56.320
one of the things I've been working on on the side is I'm going to build a,


00:37:56.320 --> 00:38:00.520
I'm going to create a new build back end for Python and a new workflow tool.


00:38:00.520 --> 00:38:01.520
[LAUGHTER]


00:38:01.520 --> 00:38:02.520
No.


00:38:02.520 --> 00:38:03.520
[LAUGHTER]


00:38:03.520 --> 00:38:04.520
I'm not.


00:38:04.520 --> 00:38:05.520
[LAUGHTER]


00:38:05.520 --> 00:38:06.520
But what will you name it?


00:38:06.520 --> 00:38:07.520
[LAUGHTER]


00:38:07.520 --> 00:38:10.720
Well, I think Flick,


00:38:10.720 --> 00:38:13.000
because I always thought Flit should have been Flick.


00:38:13.000 --> 00:38:19.400
So like a little football. So yeah, yeah. So how about let's go to Calvin's extras.


00:38:19.400 --> 00:38:23.880
Yeah, sure. So I kind of mentioned this in the intro, but we are putting on the Python


00:38:23.880 --> 00:38:30.440
web conference. This will be our fifth annual so big five years. I'm wearing one of the jerseys


00:38:30.440 --> 00:38:36.040
from last year. You can't see it, but it was really awesome. Last year we had 90 speakers.


00:38:36.040 --> 00:38:44.280
we had over 400 attendees, something like 23 or 22 time zones. It was really a global event.


00:38:44.280 --> 00:38:48.840
That's one of the things I'm really proud of. This event was meant to fill a hole, I felt like,


00:38:48.840 --> 00:38:53.960
in the Python community for folks who couldn't travel, couldn't afford to go to an in-person


00:38:53.960 --> 00:38:57.880
conference, or wasn't a regional conference near them. I know the PSF is doing a lot of work right


00:38:57.880 --> 00:39:02.280
now and getting some regional conferences into other areas, but this is still and will always


00:39:02.280 --> 00:39:05.320
be virtual and always be accessible to folks.


00:39:05.320 --> 00:39:10.040
So if you go and register and you can't afford to pay for this, we do have a grant program.


00:39:10.040 --> 00:39:14.040
We want to make sure that if you have a need to be in this room, you should be in this room


00:39:14.040 --> 00:39:18.360
and everyone is included. This year is going to be no exception. There's a lot of amazing speakers


00:39:18.360 --> 00:39:23.320
who have joined us. It'll be five half days from the 13th to the 17th. There'll be a keynote


00:39:23.320 --> 00:39:27.480
speaker kickoff every day, a keynote speaker at the end of every day, and there's some awesome


00:39:27.480 --> 00:39:31.880
speakers coming up. We've got some people from GitLab. We've been focusing on finding some folks


00:39:31.880 --> 00:39:35.380
from climate initiatives to actually come and give some of our talks


00:39:35.380 --> 00:39:38.580
where they're using technology for good in these areas.


00:39:38.580 --> 00:39:40.380
There'll be a set of tutorials as well.


00:39:40.380 --> 00:39:42.380
So I mentioned Mike Baer's tutorial already,


00:39:42.380 --> 00:39:46.180
but there'll be three or four other tutorials as well.


00:39:46.180 --> 00:39:48.680
I know Matt Harrison's going to be giving one of the tutorials--


00:39:48.680 --> 00:39:51.280
not tutorial, he'll be giving a keynote this year.


00:39:51.280 --> 00:39:54.080
So he's back again from last year.


00:39:54.080 --> 00:39:55.880
He gave a keynote and a tutorial.


00:39:55.880 --> 00:39:58.180
Man's the hardest working man in Python.


00:39:58.180 --> 00:40:01.180
But we really appreciate him joining us as well.


00:40:01.180 --> 00:40:05.260
If you've got questions, make sure you just go to pythonwebconf.com.


00:40:05.260 --> 00:40:08.460
You can also find me on @CalvinHP on Twitter.


00:40:08.460 --> 00:40:10.660
There's also a Twitter account for Python Web Conf,


00:40:10.660 --> 00:40:13.260
so you can follow Python Web Conf on all the socials.


00:40:13.260 --> 00:40:16.760
And join us. There'll be socials actually during the event as well.


00:40:16.760 --> 00:40:18.020
So it should be tons of fun.


00:40:18.020 --> 00:40:21.220
We'll have just everything for the community.


00:40:21.220 --> 00:40:23.060
So I have a question right off the bat.


00:40:23.060 --> 00:40:25.960
It says Web Conf. If I'm not a web developer,


00:40:25.960 --> 00:40:27.460
am I still going to be interested in this?


00:40:27.460 --> 00:40:29.060
Or is it primarily web development?


00:40:29.060 --> 00:40:30.580
That's an excellent question, Brian.


00:40:30.580 --> 00:40:36.340
And we originally, the webconf name meant a conference for web people, but we switched


00:40:36.340 --> 00:40:40.620
it around, you know, because we felt like this was an opportunity for the conference


00:40:40.620 --> 00:40:42.560
for Python to be on the web.


00:40:42.560 --> 00:40:46.980
And now we have app dev track, which is like not more than just web, we'll have a cloud


00:40:46.980 --> 00:40:54.300
track, we will have a PyData track, it's actually a officially sanctioned PyData event.


00:40:54.300 --> 00:40:56.900
And we have a culture track, in addition to the tutorial.


00:40:56.900 --> 00:41:00.420
So there is actually something for everybody in the Python world here.


00:41:00.420 --> 00:41:03.220
We're really trying to, again, I've mentioned filling the gap


00:41:03.220 --> 00:41:05.540
for people who can't make it to specific conferences.


00:41:05.540 --> 00:41:09.060
We're also trying to fill the gap for talks that I feel are a little more


00:41:09.060 --> 00:41:12.100
on the intermediate to advanced level.


00:41:12.100 --> 00:41:14.580
If you're looking for very entry-level tutorials,


00:41:14.580 --> 00:41:16.420
this may not be the conference for you.


00:41:16.420 --> 00:41:18.740
I mean, there'll be great community, lots of questions you can ask,


00:41:18.740 --> 00:41:21.380
there'll be tutorials, but I really wanted to make sure


00:41:21.380 --> 00:41:24.420
that the talks kind of scaled up that next notch.


00:41:24.420 --> 00:41:28.680
When I go to a lot of regional conferences or even PyCon,


00:41:28.680 --> 00:41:30.640
there's some entry-level stuff there that's


00:41:30.640 --> 00:41:32.280
great for people who are new to Python.


00:41:32.280 --> 00:41:33.840
This is that next step.


00:41:33.840 --> 00:41:36.160
>> Cool. I don't need to cut you off,


00:41:36.160 --> 00:41:39.340
but can we see if Michael's got any extras?


00:41:39.340 --> 00:41:40.080
>> Yeah.


00:41:40.080 --> 00:41:43.300
>> I do. One while Calvin's thing is up,


00:41:43.300 --> 00:41:45.880
I'm going to be speaking at their conference


00:41:45.880 --> 00:41:49.240
about making your Python web apps fly with CDNs.


00:41:49.240 --> 00:41:50.360
Speaking of CDNs earlier,


00:41:50.360 --> 00:41:51.840
so I'm really excited about that one.


00:41:51.840 --> 00:41:53.180
That's a fun topic.


00:41:53.180 --> 00:41:56.580
But I want to tell you a couple of tips and tricks.


00:41:56.580 --> 00:41:58.960
I'll keep these short here, but they're kind of fun.


00:41:58.960 --> 00:42:03.160
So I recently discovered that with many of the browsers,


00:42:03.160 --> 00:42:07.160
like Vivaldi or Chrome, sadly not Firefox.


00:42:07.160 --> 00:42:09.660
Honestly, that's one of the reasons I quit using Firefox.


00:42:09.660 --> 00:42:11.600
They support progressive web apps,


00:42:11.600 --> 00:42:12.760
which many people may know.


00:42:12.760 --> 00:42:15.600
But even if you have a thing that is not a progressive web app,


00:42:15.600 --> 00:42:17.360
you can install it as


00:42:17.360 --> 00:42:21.680
a standalone from your perspective application that lives in the dock.


00:42:21.680 --> 00:42:25.560
So the thing I got on my screen and I link to in the show notes is here's my


00:42:25.560 --> 00:42:28.600
Vivaldi, but then I have my different mail clients.


00:42:28.600 --> 00:42:31.600
I got Proton Mail and Gmail and I got the Google calendar.


00:42:31.600 --> 00:42:33.500
All of those are just regular web apps.


00:42:33.500 --> 00:42:36.440
I don't think any of them are progressive web apps, but if you right click on the


00:42:36.440 --> 00:42:40.040
tab, you say, create shortcut and say, open in a window, they become their own


00:42:40.040 --> 00:42:43.520
little app that you have, you put in your dock or your taskbar or whatever.


00:42:43.520 --> 00:42:47.520
So for example, like here's Proton Mail running.


00:42:47.520 --> 00:42:50.040
You can see again, link in the show notes to the picture.


00:42:50.320 --> 00:42:52.320
And it just looks like an app, like you would know it was an app.


00:42:52.320 --> 00:42:52.920
It does.


00:42:52.920 --> 00:42:54.920
You'd think it was an electron JS app basically.


00:42:54.920 --> 00:42:57.120
But so if you want to have those as separate things,


00:42:57.120 --> 00:43:00.120
you're going to run in and alt tab or control tab over to.


00:43:00.120 --> 00:43:00.920
There you go.


00:43:00.920 --> 00:43:03.120
Oh no, I closed my browser and my mail is gone again.


00:43:03.120 --> 00:43:04.320
I got to open it back up, right?


00:43:04.320 --> 00:43:06.920
If that ever frustrates you, here's a cool fix for it.


00:43:06.920 --> 00:43:08.120
All right.


00:43:08.120 --> 00:43:10.720
Also speaking of Proton, I started using simple login.


00:43:10.720 --> 00:43:12.120
Have either of you all used this?


00:43:12.120 --> 00:43:13.120
No.


00:43:13.120 --> 00:43:16.120
So I have a pro account at Proton, which is like, I don't know,


00:43:16.120 --> 00:43:18.720
a couple of dollars a month for a bunch of years.


00:43:18.720 --> 00:43:21.920
if you pay like way in advance, I think it's not very much.


00:43:21.920 --> 00:43:24.400
But along with that comes a thing called simple logon,


00:43:24.400 --> 00:43:27.040
which every time you go to a website,


00:43:27.040 --> 00:43:28.520
I don't think I have the extension


00:43:28.520 --> 00:43:30.400
in this profile in my browser,


00:43:30.400 --> 00:43:32.680
but if you go to a website, it suggests,


00:43:32.680 --> 00:43:35.920
hey, we'll create an automatic fake one-off email address


00:43:35.920 --> 00:43:38.520
that gets sent to wherever you decide it gets sent to.


00:43:38.520 --> 00:43:41.200
And you can reply to it and it goes back through there


00:43:41.200 --> 00:43:42.720
and things like that, it's really cool.


00:43:42.720 --> 00:43:46.880
So like if I went to rstechnica.com and I created,


00:43:46.880 --> 00:43:53.500
It would be like some random thing at RS Technica dash simple log on ish.io or whatever.


00:43:53.500 --> 00:43:57.380
So you kind of know where it comes from, but it's, it's, if you want to just delete that


00:43:57.380 --> 00:44:00.220
and make it mailstop or you can figure out if it's sold or whatever.


00:44:00.220 --> 00:44:03.860
So anyway, recommendation on checking that as well.


00:44:03.860 --> 00:44:04.860
It's also open source.


00:44:04.860 --> 00:44:08.420
You can host it yourself if, if you like hosting email.


00:44:08.420 --> 00:44:12.260
I don't really feel like, I don't feel like doing that.


00:44:12.260 --> 00:44:18.740
If you've heard about a new topic if you've heard about all the crazy stuff with chips the chips act in the US


00:44:18.740 --> 00:44:21.060
similar stuff in Europe if


00:44:21.060 --> 00:44:27.900
You've heard about biting banning chips or the US government banning chips to be used in certain things


00:44:27.900 --> 00:44:29.860
primarily in China


00:44:29.860 --> 00:44:36.340
But you know, there's a bunch of angles in which this kind of stuff is heating up not just with the US but primarily


00:44:36.340 --> 00:44:40.240
Around the US. There's an incredibly good documentary on


00:44:41.300 --> 00:44:43.440
on YouTube called US versus China,


00:44:43.440 --> 00:44:44.700
the war you can't see,


00:44:44.700 --> 00:44:46.260
that talks about the history of this.


00:44:46.260 --> 00:44:50.280
It just reminds me of how much good stuff there is on YouTube.


00:44:50.280 --> 00:44:52.880
I mean, I know there's a lot of stupid cats falling off of


00:44:52.880 --> 00:44:56.020
chairs and like idiots but hidden in there,


00:44:56.020 --> 00:44:58.860
there were some, this is a better documentary than you would find


00:44:58.860 --> 00:45:02.380
on professional top-tier television networks.


00:45:02.380 --> 00:45:03.980
It's really good.


00:45:03.980 --> 00:45:06.460
Anyway, if that's interesting to you.


00:45:06.460 --> 00:45:09.340
>> I will second that documentary.


00:45:09.340 --> 00:45:14.580
I have a 15 year old here who's obsessed with long form YouTube.


00:45:14.580 --> 00:45:17.960
And some of the things he has shown me, it just blow my mind, like why the superconducting


00:45:17.960 --> 00:45:20.560
super collider didn't succeed.


00:45:20.560 --> 00:45:22.760
Eight hours of like documentary on that.


00:45:22.760 --> 00:45:23.760
I was like, what?


00:45:23.760 --> 00:45:26.060
Yeah, there's there is no more Discovery Channel.


00:45:26.060 --> 00:45:27.460
There's no more History Channel.


00:45:27.460 --> 00:45:31.100
Yeah, I know they exist in name, but not in what they were, where they actually have real


00:45:31.100 --> 00:45:33.260
science and real information.


00:45:33.260 --> 00:45:35.500
They're just reality TV and other silly stuff.


00:45:35.500 --> 00:45:36.500
So all right.


00:45:36.500 --> 00:45:39.940
I know we're getting short on time, Brian, so I'll go quick.


00:45:39.940 --> 00:45:42.780
Talk Python's hiring, so I'm looking


00:45:42.780 --> 00:45:46.540
to hire somebody that does Flutter and Dart, not Python,


00:45:46.540 --> 00:45:48.540
because if it's Python, I'd be doing it myself.


00:45:48.540 --> 00:45:50.460
But if you're out there and you have experience


00:45:50.460 --> 00:45:52.960
with publishing apps and Flutter apps in particular


00:45:52.960 --> 00:45:55.780
to the various app stores, if you're


00:45:55.780 --> 00:45:59.740
used to working on Android and iOS and others with Flutter,


00:45:59.740 --> 00:46:01.440
and you can show me an app in that store,


00:46:01.440 --> 00:46:02.980
I would love to work with you.


00:46:02.980 --> 00:46:05.300
I'm going to post this somewhere pretty soon,


00:46:05.300 --> 00:46:07.260
but I want to put it out to the community first


00:46:07.260 --> 00:46:09.300
'cause I'd rather hire somebody from our community


00:46:09.300 --> 00:46:11.860
than just some random person off the internet.


00:46:11.860 --> 00:46:14.340
And it's primarily to do a complete rework


00:46:14.340 --> 00:46:16.220
of our mobile apps for Talk Python Training.


00:46:16.220 --> 00:46:18.060
So that'd be a lot of fun if people are interested,


00:46:18.060 --> 00:46:22.260
just email me, michael@talkpython.fm.


00:46:22.260 --> 00:46:25.660
That's it, those are all my extras, yeah.


00:46:25.660 --> 00:46:27.220
- Nice.


00:46:27.220 --> 00:46:28.700
- Calvin, thanks for being here.


00:46:28.700 --> 00:46:30.740
- Thanks for having me, I really enjoy it.


00:46:30.740 --> 00:46:31.560
It's lots of fun.


00:46:31.560 --> 00:46:33.900
I get to go learn new things each time I come.


00:46:33.900 --> 00:46:36.100
- Yeah, we do every time we show up as well.


00:46:36.100 --> 00:46:36.940
It's a lot of fun.


00:46:36.940 --> 00:46:38.340
All right, and Brian, thanks as always.


00:46:38.340 --> 00:46:39.180
- Thank you.

