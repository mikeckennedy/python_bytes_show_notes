
00:00:00.000 --> 00:00:05.120
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.120 --> 00:00:10.240
This is episode 185 recorded June 4th, 2020. I'm Michael Kennedy.


00:00:10.240 --> 00:00:11.280
And I am Brian Okken.


00:00:11.280 --> 00:00:14.880
And this episode is brought to you by Datadog. More on that later.


00:00:14.880 --> 00:00:17.120
Check them out at pythonbytes.fm/datadog.


00:00:17.120 --> 00:00:21.680
Brian, I feel like we're all working from home. Everyone's life is scrambled.


00:00:21.680 --> 00:00:23.600
Even like my sleep schedules are scrambled.


00:00:23.600 --> 00:00:28.320
Like some crazy stuff happened and I slept from like 6 to 930 and I was up for like four hours


00:00:28.320 --> 00:00:30.420
and I slept in it, like it's just, it's weird.


00:00:30.420 --> 00:00:31.920
Don't we need more structure in our life?


00:00:31.920 --> 00:00:32.760
(laughing)


00:00:32.760 --> 00:00:34.460
- Nice, nice intro.


00:00:34.460 --> 00:00:36.120
Yes, more structure.


00:00:36.120 --> 00:00:38.860
Yeah, I'm a fan of Markdown also.


00:00:38.860 --> 00:00:41.080
Believe it, trust me, it's not a tangent.


00:00:41.080 --> 00:00:44.820
Though we have just a repo that we want to point people to


00:00:44.820 --> 00:00:47.720
called Myst, it's gotta be called Myst, don't you think?


00:00:47.720 --> 00:00:49.020
- Oh yeah, definitely.


00:00:49.020 --> 00:00:53.220
- M-Y-S-T, which is Markedly Structured Text.


00:00:53.220 --> 00:00:58.120
And what this is, is a fully functional Markdown parser


00:00:58.120 --> 00:01:02.920
for Sphinx, it's Markdown plus a whole bunch of stuff from Restructured Text.


00:01:02.920 --> 00:01:09.280
Restructured to text. So, Mist allows you to write Sphinx documentation entirely


00:01:09.280 --> 00:01:14.880
in Markdown, and things that you could do in Restructured Text but could not do in


00:01:14.880 --> 00:01:20.880
Markdown have been put in a... there's a new flavor of Markdown, so you can do all


00:01:20.880 --> 00:01:25.880
of your directives and all sorts of cool things, like anything you could do in


00:01:25.880 --> 00:01:30.440
restructured text with Sphinx you can now do in Markdown. It's based on CommonMark


00:01:30.440 --> 00:01:34.800
and some other tools, so they're standing on other tools that are


00:01:34.800 --> 00:01:39.360
already doing things really well and just extending them a bit. But this is


00:01:39.360 --> 00:01:43.600
pretty powerful. One of the things I like about this is I particularly don't use a


00:01:43.600 --> 00:01:49.840
lot of Sphinx, but this also includes a standalone parser so you can see how


00:01:49.840 --> 00:01:54.560
somebody's extended Markdown for these extra directives and even use some of


00:01:54.560 --> 00:01:56.100
them in your own code if you want.


00:01:56.100 --> 00:01:58.280
>> Yeah, this looks really, really nice.


00:01:58.280 --> 00:02:01.960
Restructured text is good and all, but I don't know.


00:02:01.960 --> 00:02:04.720
If I'm going to write something like restructured text,


00:02:04.720 --> 00:02:07.140
my heart just wants to write Markdown, I got to tell you.


00:02:07.140 --> 00:02:11.600
>> Yeah, me too. I think one of the things that was holding a lot of people back is


00:02:11.600 --> 00:02:17.020
some of the extra directives like information boxes and other things like that,


00:02:17.020 --> 00:02:21.620
that you can't necessarily do in Markdown off the shelf,


00:02:21.620 --> 00:02:23.440
but some extensions are nice.


00:02:23.440 --> 00:02:28.520
I played with it a little bit doing some just I didn't pull it down with Sphinx.


00:02:28.520 --> 00:02:33.240
I just pulled it down so that I could run some markdown through it and some of the extra


00:02:33.240 --> 00:02:35.200
directives to see what it has.


00:02:35.200 --> 00:02:39.600
So for instance, some of the directives like I tried like an information box, you can have


00:02:39.600 --> 00:02:42.960
structure around putting an information box somewhere.


00:02:42.960 --> 00:02:46.960
And what you end up with is a div that has a class to it.


00:02:46.960 --> 00:02:47.960
Oh, nice.


00:02:47.960 --> 00:02:53.240
If you're not using Sphinx, then you'll have to use your own CSS, I guess to style it.


00:02:53.240 --> 00:02:56.360
it puts in enough hooks for you to be able to do that.


00:02:56.360 --> 00:02:57.240
- That's really nice.


00:02:57.240 --> 00:03:00.300
I do wish you could sort of indicate CSS styles


00:03:00.300 --> 00:03:03.120
and mark down because, wow, that would just,


00:03:03.120 --> 00:03:06.000
that would be the end of what you need HTML for


00:03:06.000 --> 00:03:07.360
for many, many things.


00:03:07.360 --> 00:03:08.320
That would be nice.


00:03:08.320 --> 00:03:11.880
So last week, you brought up dir inf.


00:03:11.880 --> 00:03:14.640
We were talking about how do you store your secrets,


00:03:14.640 --> 00:03:18.160
how do you activate and configure different environments.


00:03:18.160 --> 00:03:20.680
I think I even said something about like


00:03:20.680 --> 00:03:22.420
specifying where Python was running.


00:03:22.420 --> 00:03:26.100
I don't remember what the context was exactly, but you're like, "Durinf."


00:03:26.100 --> 00:03:27.900
And actually, I've been meaning to cover this.


00:03:27.900 --> 00:03:29.860
DunderDan, I linked him on Twitter.


00:03:29.860 --> 00:03:30.660
Don't know his last name is.


00:03:30.660 --> 00:03:31.780
Thanks, Dan.


00:03:31.780 --> 00:03:34.580
Sent this over to us as a recommendation.


00:03:34.580 --> 00:03:36.140
And I'm like, "Yeah, you brought it up.


00:03:36.140 --> 00:03:37.100
It seems definitely cool."


00:03:37.100 --> 00:03:41.220
So let me tell you about Durinf, D-I-R-E-N-V.


00:03:41.220 --> 00:03:43.900
So it's an extension that goes into your shell.


00:03:43.900 --> 00:03:46.380
And normally what you do is you open your shell,


00:03:46.380 --> 00:03:50.260
and it runs your Bash RC, ZHRC, whatever,


00:03:50.260 --> 00:03:52.340
and sets up some stuff.


00:03:52.340 --> 00:03:53.860
Or if you're over on Windows,


00:03:53.860 --> 00:03:54.620
works a little bit different,


00:03:54.620 --> 00:03:59.420
but I think Dura-env is only for the POSIX type systems.


00:03:59.420 --> 00:04:03.020
Anyway, it'll set up some values that you put in there,


00:04:03.020 --> 00:04:05.980
like environment variables and whatnot,


00:04:05.980 --> 00:04:07.820
and that's just global, right?


00:04:07.820 --> 00:04:10.900
You can also set up when you activate a virtual environment


00:04:10.900 --> 00:04:14.020
to export other values, that's pretty cool.


00:04:14.020 --> 00:04:16.420
But what it doesn't really do


00:04:16.420 --> 00:04:18.500
is allow you to have like a hierarchy of values.


00:04:18.500 --> 00:04:21.420
So if I'm in the sub directory over here,


00:04:21.420 --> 00:04:23.800
I want this version of Python active


00:04:23.800 --> 00:04:27.540
or this version of where the Flask app lives.


00:04:27.540 --> 00:04:28.940
And then if I change to another directory,


00:04:28.940 --> 00:04:30.300
I want it to automatically go,


00:04:30.300 --> 00:04:32.620
well, that means different values


00:04:32.620 --> 00:04:34.780
and dir env basically does that.


00:04:34.780 --> 00:04:35.620
- Oh, nice.


00:04:35.620 --> 00:04:37.780
- Yeah, so as you go into different parts


00:04:37.780 --> 00:04:40.100
of your folder system,


00:04:40.100 --> 00:04:44.140
it'll look for certain files, .envrc.


00:04:44.140 --> 00:04:45.500
And if it finds that,


00:04:45.500 --> 00:04:47.820
it'll automatically grab all the,


00:04:47.820 --> 00:04:50.740
basically all the exports and then jam them


00:04:50.740 --> 00:04:51.980
into whatever your shell is.


00:04:51.980 --> 00:04:54.500
And it's also cool because it's not a shell, right?


00:04:54.500 --> 00:04:55.540
It's not like, well, here's a shell


00:04:55.540 --> 00:04:56.880
that has this cool feature.


00:04:56.880 --> 00:05:01.880
It works with Bash, Zshell, TCshell, Fish, and others.


00:05:01.880 --> 00:05:06.820
Right, so it's basically a hook that gets installed for,


00:05:06.820 --> 00:05:09.900
like I use OhMyZshell because, oh my gosh, it's awesome.


00:05:09.900 --> 00:05:11.620
And then I would just plug this into it


00:05:11.620 --> 00:05:16.100
and as I do stuff with Zshell, it will just apply its magic.


00:05:16.100 --> 00:05:19.440
- Yeah, and so one of the things you can do with this


00:05:19.440 --> 00:05:22.100
is to automatically set a virtual environment


00:05:22.100 --> 00:05:24.560
if you go into special directories.


00:05:24.560 --> 00:05:26.500
That's not the only thing it can do,


00:05:26.500 --> 00:05:29.180
but that's one of the reasons why a lot of people use it.


00:05:29.180 --> 00:05:31.860
- Right, you basically, well, I guess you can't do aliases.


00:05:31.860 --> 00:05:33.340
You can't change what Python means,


00:05:33.340 --> 00:05:35.700
but you can say where the Python path is, yeah.


00:05:35.700 --> 00:05:36.700
Yeah, and that's one of the things


00:05:36.700 --> 00:05:39.100
that's a limitation of this that people should be aware of


00:05:39.100 --> 00:05:41.340
is it doesn't, the way to think of it


00:05:41.340 --> 00:05:43.420
is not as a sub-rc, right?


00:05:43.420 --> 00:05:48.260
It's not a sub-bash-rc where it runs aliases and all sorts of stuff.


00:05:48.260 --> 00:05:52.540
The way it works is it runs a bash shell, like a little tiny hidden bash shell.


00:05:52.540 --> 00:05:57.900
It imports that as the bash-rc and it captures what the exported variables are, throws away


00:05:57.900 --> 00:06:03.220
that shell, and then jams that into whatever active shell you have, like zshell or bash


00:06:03.220 --> 00:06:04.700
or phish or whatever.


00:06:04.700 --> 00:06:05.700
Yeah.


00:06:05.700 --> 00:06:10.300
I would probably use this all the time if I wasn't somebody that used both Windows and


00:06:10.300 --> 00:06:13.300
Mac and Linux frequently.


00:06:13.300 --> 00:06:15.420
- You know, probably, I bet somebody could come up


00:06:15.420 --> 00:06:17.180
with this thing for Windows as well.


00:06:17.180 --> 00:06:19.140
It's just gotta be like totally from scratch,


00:06:19.140 --> 00:06:20.340
different type of thing, right?


00:06:20.340 --> 00:06:24.420
- People have already pointed me to Windows versions of it,


00:06:24.420 --> 00:06:26.140
but it's one of those things of like,


00:06:26.140 --> 00:06:28.380
you gotta jump through hoops to make it work.


00:06:28.380 --> 00:06:31.420
And it's just not, for me, it's not solving


00:06:31.420 --> 00:06:32.900
a big enough problem that I have


00:06:32.900 --> 00:06:35.460
that I need to jump through the hoops.


00:06:35.460 --> 00:06:36.460
- I agree, I agree.


00:06:36.460 --> 00:06:40.260
It is cool, but it's not like life-changing in that regard.


00:06:40.260 --> 00:06:43.060
I guess one more thing to point out is it's,


00:06:43.060 --> 00:06:46.300
you don't have to go to the directory


00:06:46.300 --> 00:06:48.740
where the environment RC file is.


00:06:48.740 --> 00:06:51.500
It looks up the parent directories until it finds one.


00:06:51.500 --> 00:06:52.820
So you have this hierarchy.


00:06:52.820 --> 00:06:56.460
I'm down here in the views part of my website


00:06:56.460 --> 00:06:58.220
and the top level of that Git repo,


00:06:58.220 --> 00:07:00.220
I have one of these env RCs.


00:07:00.220 --> 00:07:02.540
It would find that and activate that for you.


00:07:02.540 --> 00:07:03.820
So that's pretty cool that it has,


00:07:03.820 --> 00:07:05.540
it's kind of like Node.js,


00:07:05.540 --> 00:07:07.660
where the Node modules live in that regard.


00:07:07.660 --> 00:07:08.500
That's pretty cool.


00:07:08.500 --> 00:07:09.820
- Yeah, that's a really nice feature.


00:07:09.820 --> 00:07:11.020
- Yeah, for sure.


00:07:11.020 --> 00:07:12.500
Also nice, Datadog.


00:07:12.500 --> 00:07:13.940
So before we get to the next thing,


00:07:13.940 --> 00:07:15.520
let me talk about them real quick.


00:07:15.520 --> 00:07:16.540
They're supporting the show.


00:07:16.540 --> 00:07:18.660
So thank you, they've been sponsors for a long time.


00:07:18.660 --> 00:07:20.500
Please check them out and see what they're offering.


00:07:20.500 --> 00:07:22.940
It's good software and it helps support the show.


00:07:22.940 --> 00:07:25.420
So if you're having trouble visualizing bottlenecks


00:07:25.420 --> 00:07:26.240
and latency in your app,


00:07:26.240 --> 00:07:28.060
and you're not sure where the issues are coming from


00:07:28.060 --> 00:07:29.180
or how to solve it,


00:07:29.180 --> 00:07:32.580
you can use Datadog's end-to-end monitoring platform


00:07:32.580 --> 00:07:34.700
with their customizable built-in dashboards


00:07:34.700 --> 00:07:36.860
to collect metrics and visualize app performance


00:07:36.860 --> 00:07:37.960
in real time.


00:07:37.960 --> 00:07:40.680
they automatically correlate logs and traces


00:07:40.680 --> 00:07:42.400
at the individual level of requests,


00:07:42.400 --> 00:07:44.160
allowing you to troubleshoot your apps


00:07:44.160 --> 00:07:46.760
and track requests across tiers.


00:07:46.760 --> 00:07:48.960
Plus their service map automatically plots


00:07:48.960 --> 00:07:50.160
the flow of these requests


00:07:50.160 --> 00:07:51.880
across your application architecture.


00:07:51.880 --> 00:07:53.360
So you can understand dependencies


00:07:53.360 --> 00:07:56.400
and proactively monitor performance of your apps.


00:07:56.400 --> 00:07:58.920
So be the hero that got that app at your company


00:07:58.920 --> 00:08:00.380
back on track.


00:08:00.380 --> 00:08:01.660
Get started with a free trial


00:08:01.660 --> 00:08:04.120
at pythonbytes.fm/datadog.


00:08:04.120 --> 00:08:05.160
You can get a cool shirt.


00:08:05.160 --> 00:08:06.600
All right, Brian, what's next?


00:08:06.600 --> 00:08:07.760
Yep, thanks Datadog.


00:08:07.760 --> 00:08:08.860
I had a problem.


00:08:08.860 --> 00:08:12.040
So my problem was a little application that had a database


00:08:12.040 --> 00:08:15.440
and it was a, I was using tinyDB just for development.


00:08:15.440 --> 00:08:16.760
You could use Mongo, similar.


00:08:16.760 --> 00:08:18.440
It's a document database.


00:08:18.440 --> 00:08:20.800
Thrown some data into it, no problems.


00:08:20.800 --> 00:08:24.080
But I, that was one of the values that I decided to change


00:08:24.080 --> 00:08:28.320
to use Python enums because I thought enums are cool.


00:08:28.320 --> 00:08:29.920
I don't use them very often.


00:08:29.920 --> 00:08:32.240
I'll give these a shot 'cause they seem like perfect.


00:08:32.240 --> 00:08:34.280
And then everything blew up


00:08:34.280 --> 00:08:36.940
because I couldn't save it to the database


00:08:36.940 --> 00:08:41.300
because enums are not serializable by default.


00:08:41.300 --> 00:08:44.420
So I'm like, there's gotta be an easy workaround for this.


00:08:44.420 --> 00:08:48.120
And I first ran into questions about,


00:08:48.120 --> 00:08:51.900
or topics about creating your own serializer.


00:08:51.900 --> 00:08:54.340
That just didn't seem like something I wanted to do.


00:08:54.340 --> 00:08:56.140
- You could do it, but it's not so fun, right?


00:08:56.140 --> 00:08:58.540
- Yeah, well, so I ran across an article,


00:08:58.540 --> 00:09:01.780
a little short article written by Alexander Hultner


00:09:01.780 --> 00:09:04.340
called "Convert a Python Enum to JSON."


00:09:04.340 --> 00:09:06.440
And I didn't need it converted to JSON,


00:09:06.440 --> 00:09:08.680
but I did need it serializable.


00:09:08.680 --> 00:09:11.680
And the trick is to just, if you're doing your,


00:09:11.680 --> 00:09:15.520
when you use enums, you do from enum import


00:09:15.520 --> 00:09:18.600
the capital enum type, and then you have a class


00:09:18.600 --> 00:09:22.040
that derives from that, and then you have your values.


00:09:22.040 --> 00:09:24.560
Well, if you also derive from not just enum,


00:09:24.560 --> 00:09:29.560
but another concrete type like int or string,


00:09:29.560 --> 00:09:32.680
and in my case, I was using, I used string


00:09:32.680 --> 00:09:35.620
so that my string values would be stored.


00:09:35.620 --> 00:09:39.620
Now it is serializable and it works just the same as it always did before.


00:09:39.620 --> 00:09:43.620
It's just, it uses the serializer from the other type.


00:09:43.620 --> 00:09:47.620
And it just works incredible. So, for instance, I'm going to put a little


00:09:47.620 --> 00:09:51.620
example in the show notes about using a color which is red and blue.


00:09:51.620 --> 00:09:55.620
And if you just, you derive from enum, you can't


00:09:55.620 --> 00:09:59.620
convert it to JSON because it's not serializable. You can either do an


00:09:59.620 --> 00:10:03.620
int enum, which is a built-in one, or combine a str and enum.


00:10:03.620 --> 00:10:10.020
and enum. Now it serializes just to the string red and blue if that's the values. And then that's


00:10:10.020 --> 00:10:15.780
what's stored in your database too. So when I'm using it's really handy for debugging to be able


00:10:15.780 --> 00:10:20.740
to have these readable values as well. Yeah, this is really cool. It's a little bit like


00:10:20.740 --> 00:10:24.900
abstract based classes versus concrete classes or something like that, right? You've like the


00:10:24.900 --> 00:10:30.020
sort of general enum, but if you do the int enum, then it has this other capability, which is cool.


00:10:30.660 --> 00:10:34.660
Yeah, multiple inheritance str, enum is the one you went for, right?


00:10:34.660 --> 00:10:40.100
Yeah, so the multiple inheritance is the thing that Alexander recommended in his post. That's


00:10:40.100 --> 00:10:44.980
what I'm using. It works just fine. But I was interested to find out that in the Python


00:10:44.980 --> 00:10:49.860
documentation for int enum, int enum is almost just there as an example to say,


00:10:49.860 --> 00:10:54.260
we realize that it might not be integers that you want, you might want something else. But there's


00:10:54.260 --> 00:10:59.700
an example right in the in the Python documentation on using multiple inheritance to create your own


00:11:00.340 --> 00:11:04.340
It doesn't talk about serializability there, but that's one of the benefits.


00:11:04.340 --> 00:11:06.340
Yeah, it seems like it works anyway. Awesome.


00:11:06.340 --> 00:11:09.340
How much time did it take you to figure that out? Was it a long time?


00:11:09.340 --> 00:11:11.340
No, I don't know. About 10 minutes of Googling?


00:11:11.340 --> 00:11:12.340
Yeah, that's pretty cool.


00:11:12.340 --> 00:11:17.340
Well, you could compute it with Python, of course, but the datetimes in Python and time spans,


00:11:17.340 --> 00:11:20.340
they're pretty good, actually, but they're a little bit lacking.


00:11:20.340 --> 00:11:23.340
There are certain types of things you might want to do with them.


00:11:23.340 --> 00:11:25.340
And so there's a couple of replacement libraries,


00:11:25.340 --> 00:11:30.340
and one that Tucker Beck sent over, it's called Pendulum.


00:11:30.340 --> 00:11:31.340
That's pretty cool.


00:11:31.340 --> 00:11:32.160
Have you played with Pendulum?


00:11:32.160 --> 00:11:33.140
- I haven't, but I like the name.


00:11:33.140 --> 00:11:33.980
- Yeah, I do too.


00:11:33.980 --> 00:11:35.060
It's really good.


00:11:35.060 --> 00:11:36.500
I've played with Arrow.


00:11:36.500 --> 00:11:38.260
So this is a little bit like Arrow,


00:11:38.260 --> 00:11:39.540
but it doesn't seem like it tries


00:11:39.540 --> 00:11:41.100
to solve exactly the same problem.


00:11:41.100 --> 00:11:43.420
It's just like, let's make Python date times


00:11:43.420 --> 00:11:45.520
and time deltas better,


00:11:45.520 --> 00:11:46.820
which is kind of the goal of both of them.


00:11:46.820 --> 00:11:48.700
So it's more or less a drop-in replacement


00:11:48.700 --> 00:11:50.220
for standard date time.


00:11:50.220 --> 00:11:53.620
So you can create like time deltas, which are pretty cool.


00:11:53.620 --> 00:11:57.100
like I could say pendulum.duration, days equals 15,


00:11:57.100 --> 00:11:58.540
I have this duration.


00:11:58.540 --> 00:12:01.980
It has more properties than the standard date time,


00:12:01.980 --> 00:12:03.060
or the time delta.


00:12:03.060 --> 00:12:05.140
You get like total seconds or something like that,


00:12:05.140 --> 00:12:07.380
but that's not that helpful.


00:12:07.380 --> 00:12:11.540
So this one has like duration.weeks, duration.hours,


00:12:11.540 --> 00:12:13.280
and so on, which is pretty cool.


00:12:13.280 --> 00:12:15.560
You can ask for the duration in hours,


00:12:15.560 --> 00:12:17.240
like the total number of hours,


00:12:17.240 --> 00:12:19.820
not just the number of hour,


00:12:19.820 --> 00:12:22.360
like three hours and two days or whatever.


00:12:22.360 --> 00:12:25.640
but you also have this cool like human friendly version.


00:12:25.640 --> 00:12:29.600
So I can say duration in words and give it a locale


00:12:29.600 --> 00:12:31.440
and say like locale is US English.


00:12:31.440 --> 00:12:33.160
And it'll say that's two weeks in one day.


00:12:33.160 --> 00:12:34.000
- Nice.


00:12:34.000 --> 00:12:36.360
- You can also, like, let's suppose I'm trying to do


00:12:36.360 --> 00:12:39.420
some work with like calendars or some kind of difference.


00:12:39.420 --> 00:12:42.060
I say the time from here to there,


00:12:42.060 --> 00:12:45.280
I wanna do something for every weekday that appears, right?


00:12:45.280 --> 00:12:46.800
So skip Saturday and Sunday,


00:12:46.800 --> 00:12:49.280
but if it's like from Thursday to Wednesday,


00:12:49.280 --> 00:12:51.360
I need to go Thursday, Friday, Monday, Tuesday, Wednesday.


00:12:51.360 --> 00:12:52.200
Yeah?


00:12:52.200 --> 00:12:57.560
So I could say pendulum.now, and then I could go from that and subtract three days, so that


00:12:57.560 --> 00:12:59.360
would be a period of three days.


00:12:59.360 --> 00:13:02.600
And that gives you what they call a period, which is a little bit different.


00:13:02.600 --> 00:13:07.720
And then I can go to it and say, convert yourself to in weekdays.


00:13:07.720 --> 00:13:08.720
Okay.


00:13:08.720 --> 00:13:09.720
Right.


00:13:09.720 --> 00:13:10.720
Not interesting.


00:13:10.720 --> 00:13:11.720
Then you can loop over it.


00:13:11.720 --> 00:13:18.200
You can say for each day or each time period in this period and go, it would go, you know,


00:13:18.200 --> 00:13:20.880
over the weekdays that are involved in that time span.


00:13:20.880 --> 00:13:21.880
That's pretty cool.


00:13:21.880 --> 00:13:23.880
that would not be so much fun to do yourself.


00:13:23.880 --> 00:13:25.880
There's a bunch of stuff that it does and I don't want to go like


00:13:25.880 --> 00:13:27.880
read all the capabilities and whatever.


00:13:27.880 --> 00:13:29.880
But that gives you a sense, like if these are the kinds of problems


00:13:29.880 --> 00:13:31.880
you're trying to work through and you're like,


00:13:31.880 --> 00:13:33.880
"Man, this is a challenge to do with


00:13:33.880 --> 00:13:35.880
the built-in one."


00:13:35.880 --> 00:13:37.880
Check out Pendulum. Also check out Arrow.


00:13:37.880 --> 00:13:39.880
I think we covered Arrow a long time ago.


00:13:39.880 --> 00:13:41.880
If we haven't, I'll cover it at some point. It's a good one.


00:13:41.880 --> 00:13:43.880
Yeah, and I think, actually, I don't think it's a matter


00:13:43.880 --> 00:13:45.880
of which one's the best either.


00:13:45.880 --> 00:13:47.880
It's whatever seems to speak to you


00:13:47.880 --> 00:13:49.880
and has an API that


00:13:49.880 --> 00:13:52.380
that thinks like you do.


00:13:52.380 --> 00:13:53.220
- Yeah.


00:13:53.220 --> 00:13:54.720
- It's good that lots of people have solved things like this.


00:13:54.720 --> 00:13:56.000
- Yep, absolutely.


00:13:56.000 --> 00:13:58.680
All right, well, what's this next one?


00:13:58.680 --> 00:14:00.640
You trying to be like a private detective


00:14:00.640 --> 00:14:02.040
or what's going on with this?


00:14:02.040 --> 00:14:03.200
(laughing)


00:14:03.200 --> 00:14:04.680
- Yeah, a private detective.


00:14:04.680 --> 00:14:07.360
Looking into and spying on your code.


00:14:07.360 --> 00:14:11.960
So this was sent off by a Twitter account called PyLang


00:14:11.960 --> 00:14:13.880
and this is PySnooper.


00:14:13.880 --> 00:14:16.800
The claim is never use print for debugging again


00:14:16.800 --> 00:14:20.780
And I have to admit, I am one to lean on the print statement


00:14:20.780 --> 00:14:23.620
every once in a while, especially if I'm just--


00:14:23.620 --> 00:14:26.060
sometimes I don't really want to use breakpoint


00:14:26.060 --> 00:14:29.300
because I've got some code that's getting hit a lot.


00:14:29.300 --> 00:14:32.320
And I really do want to see what it looks like over time.


00:14:32.320 --> 00:14:34.420
So one of the things that people often do


00:14:34.420 --> 00:14:37.140
is throw a print statement somewhere in a line just


00:14:37.140 --> 00:14:38.540
to say, hey, I'm here.


00:14:38.540 --> 00:14:40.900
The other thing they do is print out a variable name


00:14:40.900 --> 00:14:43.200
right after an assignment so that they


00:14:43.200 --> 00:14:44.980
can see when it changes.


00:14:44.980 --> 00:14:45.780
But that's exactly--


00:14:45.780 --> 00:14:47.460
- It was this and now it's that.


00:14:47.460 --> 00:14:49.700
- Yeah, so this is exactly kind of what it does.


00:14:49.700 --> 00:14:51.820
So by default, it's just a,


00:14:51.820 --> 00:14:54.700
you can throw a decorator onto a function.


00:14:54.700 --> 00:14:56.500
That's the easiest way to apply it


00:14:56.500 --> 00:14:59.100
for PySnooper, decorate a function.


00:14:59.100 --> 00:15:01.500
And now every time that function gets run,


00:15:01.500 --> 00:15:04.500
you get a play by play log of your function.


00:15:04.500 --> 00:15:07.420
And what it logs is it logs the parameters


00:15:07.420 --> 00:15:08.860
that gets past your function.


00:15:08.860 --> 00:15:11.540
It logs all the output of your function,


00:15:11.540 --> 00:15:13.900
but also every line of the code of the function


00:15:13.900 --> 00:15:15.140
that gets run.


00:15:15.140 --> 00:15:18.540
And every time a variable is changed, it changes its value.


00:15:18.540 --> 00:15:19.860
And then even at the end,


00:15:19.860 --> 00:15:22.160
it tells you the elapsed time for the function.


00:15:22.160 --> 00:15:23.720
So that's quite a bit.


00:15:23.720 --> 00:15:25.080
If that's great for you, great.


00:15:25.080 --> 00:15:26.580
But if it's too much information,


00:15:26.580 --> 00:15:29.120
you can also isolate it with a width block


00:15:29.120 --> 00:15:32.260
and just take a section of your function under test


00:15:32.260 --> 00:15:35.220
and just log a subset.


00:15:35.220 --> 00:15:38.480
And then if local variables are not enough


00:15:38.480 --> 00:15:40.860
and you're changing some global variable,


00:15:40.860 --> 00:15:43.180
you can tell it to watch that as well.


00:15:43.180 --> 00:15:44.860
Anyway, it's a pretty simple API.


00:15:44.860 --> 00:15:46.920
And there's actually quite a few times


00:15:46.920 --> 00:15:48.540
I think I'll probably reach for this.


00:15:48.540 --> 00:15:49.940
- When I first saw this, I'm like,


00:15:49.940 --> 00:15:51.860
ah, yeah, it's kind of cool.


00:15:51.860 --> 00:15:53.080
There's a lot of these replacements


00:15:53.080 --> 00:15:55.220
where I think like, you know what?


00:15:55.220 --> 00:15:57.980
You've got PyCharm or you've got VS Code,


00:15:57.980 --> 00:15:59.680
you're better off just sitting in a breakpoint.


00:15:59.680 --> 00:16:03.660
And the tooling is so much better than like say,


00:16:03.660 --> 00:16:05.180
PDB or something like that, right?


00:16:05.180 --> 00:16:06.020
- Yeah.


00:16:06.020 --> 00:16:07.260
- This though, this solves a problem


00:16:07.260 --> 00:16:09.620
that always frustrates me when I'm doing debugging,


00:16:09.620 --> 00:16:11.820
which is you're going around,


00:16:11.820 --> 00:16:13.500
you've got to keep a track in your mind.


00:16:13.500 --> 00:16:15.420
Okay, this value was that now it's this


00:16:15.420 --> 00:16:18.440
and then it became that and like sort of the flow of data,


00:16:18.440 --> 00:16:19.860
like at any frozen point,


00:16:19.860 --> 00:16:22.520
you can see really well with the visual debuggers,


00:16:22.520 --> 00:16:24.360
right, like PyCharm or whatnot,


00:16:24.360 --> 00:16:26.780
what the state is, you can see even what's changed,


00:16:26.780 --> 00:16:29.700
but like this number of when this list was empty, empty,


00:16:29.700 --> 00:16:31.500
then this was added, then this was added


00:16:31.500 --> 00:16:33.420
and here's how it evolved over time.


00:16:33.420 --> 00:16:35.400
Yeah, people should check out the readme for this


00:16:35.400 --> 00:16:37.460
because that view of it is like,


00:16:37.460 --> 00:16:39.540
there's a loop where it shows going through the loop


00:16:39.540 --> 00:16:42.160
four times and as like all the values


00:16:42.160 --> 00:16:43.300
and variables like build up.


00:16:43.300 --> 00:16:45.700
So you can just like review it and see how it flows.


00:16:45.700 --> 00:16:47.260
I think it's pretty sweet actually.


00:16:47.260 --> 00:16:49.500
- Yeah, one of the other things that I forgot to mention


00:16:49.500 --> 00:16:53.240
is if you're like debugging a process on a server,


00:16:53.240 --> 00:16:57.960
maybe you've got a small service that's running


00:16:57.960 --> 00:16:59.780
and instead of standard out,


00:16:59.780 --> 00:17:03.940
you can pipe these logs to a file and review them later.


00:17:03.940 --> 00:17:05.780
- Yeah, definitely for a server as well,


00:17:05.780 --> 00:17:07.820
it would be nice to flip that on.


00:17:07.820 --> 00:17:10.140
And I guess with the conditional,


00:17:10.140 --> 00:17:13.180
but you could probably even in code say,


00:17:13.180 --> 00:17:14.340
Do you feel like you're running into trouble?


00:17:14.340 --> 00:17:16.580
Turn on the PySnooper for a minute and then turn it off.


00:17:16.580 --> 00:17:18.700
You know, like there's probably options there,


00:17:18.700 --> 00:17:20.420
but yeah, you definitely wouldn't want to attach


00:17:20.420 --> 00:17:22.420
a real debugger to like production.


00:17:22.420 --> 00:17:25.220
Dude, why wasn't the site work?


00:17:25.220 --> 00:17:26.900
Oh, somebody's got to go back to their desk


00:17:26.900 --> 00:17:31.100
and hit F5 or continue or whatever.


00:17:31.100 --> 00:17:32.420
That's not going to go well.


00:17:32.420 --> 00:17:34.620
So I have something that's pretty similar


00:17:34.620 --> 00:17:36.740
to follow this up with that's, you know,


00:17:36.740 --> 00:17:39.460
this is about debugging and seeing how your code is running.


00:17:39.460 --> 00:17:44.100
Like per usual, we talk about one tool and people are like,


00:17:44.100 --> 00:17:45.940
"Oh yeah, but did you know about?"


00:17:45.940 --> 00:17:47.420
So we've talked about Austin


00:17:47.420 --> 00:17:48.620
and we've talked about some of the other


00:17:48.620 --> 00:17:50.700
cool debugger profilers.


00:17:50.700 --> 00:17:55.700
And so over on PyCoders, they talked about FIL,


00:17:55.700 --> 00:18:00.700
which is a new memory profiler for data scientists


00:18:00.700 --> 00:18:02.940
and well, general scientists.


00:18:02.940 --> 00:18:06.220
And you might wonder like, why do data scientists,


00:18:06.220 --> 00:18:10.820
or biologists, why can't they just use our memory profile?


00:18:10.820 --> 00:18:13.380
Like why is Austin not their thing, right?


00:18:13.380 --> 00:18:14.740
And it may or may not be,


00:18:14.740 --> 00:18:16.500
like it may answer some great questions for them.


00:18:16.500 --> 00:18:19.580
Like obviously, they do a lot of computational stuff,


00:18:19.580 --> 00:18:21.340
making that go much faster


00:18:21.340 --> 00:18:22.780
to let some ask more questions, right?


00:18:22.780 --> 00:18:24.680
So maybe profilers in general


00:18:24.680 --> 00:18:26.720
are like things they should pay attention to.


00:18:26.720 --> 00:18:28.780
But when they talk about this, they say,


00:18:28.780 --> 00:18:29.980
look, there's a really big difference


00:18:29.980 --> 00:18:33.440
between servers and like data pipeline


00:18:33.440 --> 00:18:36.600
our sort of imperative, just top to bottom code,


00:18:36.600 --> 00:18:39.880
we're just gonna run scripts, sort of, right?


00:18:39.880 --> 00:18:42.200
And that's what scientists and data scientists do a lot.


00:18:42.200 --> 00:18:44.000
It's like, I just need to do this computation


00:18:44.000 --> 00:18:45.320
and get the answer.


00:18:45.320 --> 00:18:47.560
So with servers, if you're worried about memory,


00:18:47.560 --> 00:18:49.600
remember this is a memory profiler,


00:18:49.600 --> 00:18:52.040
what you're worried mostly about is,


00:18:52.040 --> 00:18:54.680
you know, this has been running for three hours.


00:18:54.680 --> 00:18:57.040
Now the server's out of memory.


00:18:57.040 --> 00:18:58.360
That's a problem, right?


00:18:58.360 --> 00:19:01.960
Like it's probably an issue of a memory leak somewhere.


00:19:01.960 --> 00:19:05.060
something is hanging on to a reference that it shouldn't,


00:19:05.060 --> 00:19:07.680
and it builds up over time like cruft,


00:19:07.680 --> 00:19:09.960
and it just eventually wears it down,


00:19:09.960 --> 00:19:14.400
and it's just bloated with too much memory.


00:19:14.400 --> 00:19:15.800
So that's the server problem,


00:19:15.800 --> 00:19:18.020
and I think that's what a lot of the tooling is built for.


00:19:18.020 --> 00:19:22.120
But data pipelines, they go and they just run top to bottom,


00:19:22.120 --> 00:19:24.000
and they don't, for the most part,


00:19:24.000 --> 00:19:25.720
don't really care about memory leaks,


00:19:25.720 --> 00:19:27.560
because they're only gonna run for 10 seconds.


00:19:27.560 --> 00:19:30.280
But what they need to know is if I'm using too much memory,


00:19:30.280 --> 00:19:33.720
what line of code allocated that memory?


00:19:33.720 --> 00:19:36.120
Like I need to know what line, where,


00:19:36.120 --> 00:19:38.840
I'm using too much memory and how can I like maybe


00:19:38.840 --> 00:19:41.480
use a generator instead of a function in a list


00:19:41.480 --> 00:19:43.040
or something like that, right?


00:19:43.040 --> 00:19:45.560
So that's what the focus of this tool is,


00:19:45.560 --> 00:19:47.960
is it's like, it's gonna show you exactly


00:19:47.960 --> 00:19:50.880
what your peak memory usage is


00:19:50.880 --> 00:19:53.200
and what line of code is responsible for it.


00:19:53.200 --> 00:19:54.400
- This is actually pretty cool.


00:19:54.400 --> 00:19:55.320
- It is, right?


00:19:55.320 --> 00:19:56.480
At first I thought, what is this?


00:19:56.480 --> 00:19:57.720
Like why do they need their own thing?


00:19:57.720 --> 00:19:58.720
But as I'm looking through, I'm like,


00:19:58.720 --> 00:20:00.120
yeah, this is actually pretty cool


00:20:00.120 --> 00:20:03.080
And if you go to the site, you can actually see,


00:20:03.080 --> 00:20:05.880
they give you this graph, like a nice visualization


00:20:05.880 --> 00:20:08.000
of like, here are the lines of code.


00:20:08.000 --> 00:20:10.320
And then it's like more red or less red,


00:20:10.320 --> 00:20:12.320
depending on how much memory it's allocated.


00:20:12.320 --> 00:20:13.160
- Oh, wow.


00:20:13.160 --> 00:20:14.000
- Yeah, and then the total amount,


00:20:14.000 --> 00:20:15.680
and you can like dive into like, okay,


00:20:15.680 --> 00:20:17.320
well, I need to see like this loop


00:20:17.320 --> 00:20:19.320
or this sub-function that I'm calling.


00:20:19.320 --> 00:20:20.160
How much is it?


00:20:20.160 --> 00:20:22.480
So you can like navigate through this visual,


00:20:22.480 --> 00:20:26.000
like red, pink, gray of like memory badness, I guess.


00:20:26.000 --> 00:20:27.120
I don't know, memory usage.


00:20:27.120 --> 00:20:28.040
- Yeah. - Yeah, it's not bad, right?


00:20:28.040 --> 00:20:29.720
- No, yeah, and when you're staring at code,


00:20:29.720 --> 00:20:33.760
it's not obvious where the huge array might get generated or used.


00:20:33.760 --> 00:20:36.240
>> Yeah, and the example they have here, it's like, okay, well,


00:20:36.240 --> 00:20:39.520
they have a function called makeBigArray, okay, so probably.


00:20:39.520 --> 00:20:40.920
You might look there.


00:20:40.920 --> 00:20:43.560
And there's also things like using NumPy,


00:20:43.560 --> 00:20:45.960
like okay, here we're creating a bunch of stuff with NumPy.


00:20:45.960 --> 00:20:49.000
You might say, well, here's the NumPy thing that we're doing that makes too much.


00:20:49.000 --> 00:20:52.520
But you could be doing a whole bunch of NumPy and


00:20:52.520 --> 00:20:56.160
pandas work and one line is actually responsible.


00:20:56.160 --> 00:20:58.480
But you're probably pretty sure it has to do with pandas, but


00:20:58.480 --> 00:21:00.140
that you're not sure where exactly, right?


00:21:00.140 --> 00:21:02.180
So you could, you know, dig into it and see.


00:21:02.180 --> 00:21:03.020
I think it's cool.


00:21:03.020 --> 00:21:04.540
- Yeah, we thought we were using arrays


00:21:04.540 --> 00:21:08.060
and suddenly we have this huge matrix that accidentally.


00:21:08.060 --> 00:21:08.940
- Exactly.


00:21:08.940 --> 00:21:10.500
Why is all this stuff still in here?


00:21:10.500 --> 00:21:11.700
Yeah, yeah, cool.


00:21:11.700 --> 00:21:13.420
Well, anyway, if you're doing data science


00:21:13.420 --> 00:21:16.900
and you care about memory pressure,


00:21:16.900 --> 00:21:18.460
this thing seems super easy.


00:21:18.460 --> 00:21:20.980
It even has like a try it on your own code on the website,


00:21:20.980 --> 00:21:23.420
which I don't know what that means, but that's crazy.


00:21:23.420 --> 00:21:24.580
(laughing)


00:21:24.580 --> 00:21:26.460
Not uploading my code there, but it's fine.


00:21:26.460 --> 00:21:28.580
All right, well, Brian, that's it for our main items.


00:21:28.580 --> 00:21:29.660
You got anything?


00:21:29.660 --> 00:21:30.980
- I don't.


00:21:30.980 --> 00:21:33.220
I've just been trying to get through the day lately.


00:21:33.220 --> 00:21:34.300
- Yeah, I hear you.


00:21:34.300 --> 00:21:36.300
Well, I have one really quick announcement


00:21:36.300 --> 00:21:38.260
and then an unannouncement in a sense.


00:21:38.260 --> 00:21:40.940
So I sent out a message to a ton of people.


00:21:40.940 --> 00:21:43.760
So unannouncement is for them.


00:21:43.760 --> 00:21:45.900
So what I'm trying to do is I'm trying to create


00:21:45.900 --> 00:21:48.800
some communities for students going through the courses


00:21:48.800 --> 00:21:50.140
to go through them together.


00:21:50.140 --> 00:21:51.780
And I'm calling these cohorts, right?


00:21:51.780 --> 00:21:54.240
So I set up like a beginner Python cohort


00:21:54.240 --> 00:21:59.120
in a WebPython cohort and put like 20 or 30 people,


00:21:59.120 --> 00:22:00.520
I had 20 or 30 slots, let's say,


00:22:00.520 --> 00:22:03.360
for people to go through over like three or four,


00:22:03.360 --> 00:22:05.680
three months or so, where they each work a little,


00:22:05.680 --> 00:22:07.760
like they all work on the same part of the course


00:22:07.760 --> 00:22:10.280
at the same time and they're there to help each other.


00:22:10.280 --> 00:22:11.680
There's like private Slack channels


00:22:11.680 --> 00:22:14.320
and other stuff around it.


00:22:14.320 --> 00:22:16.320
So that's really fun, but it turns out


00:22:16.320 --> 00:22:18.040
that after one day of having that open,


00:22:18.040 --> 00:22:22.200
I got many hundreds of applicants for like 20 spots.


00:22:22.200 --> 00:22:24.240
So I had to stop taking applications.


00:22:24.240 --> 00:22:26.480
So if people got those messages and like,


00:22:26.480 --> 00:22:28.680
I want to apply, but it looks like the form is down,


00:22:28.680 --> 00:22:30.760
it's because there's like an insane number


00:22:30.760 --> 00:22:34.320
of applicants per spot.


00:22:34.320 --> 00:22:37.000
So those will come back and people can sign up


00:22:37.000 --> 00:22:37.840
to get notified.


00:22:37.840 --> 00:22:39.160
There's a link in the show notes,


00:22:39.160 --> 00:22:41.460
but I just want to say like, that's what I was doing,


00:22:41.460 --> 00:22:42.300
which is fun.


00:22:42.300 --> 00:22:44.280
But for those of you who didn't get a chance to apply,


00:22:44.280 --> 00:22:46.440
cause it got closed right away, that's why.


00:22:46.440 --> 00:22:49.200
- And that's for training at talkpython.fm.


00:22:49.200 --> 00:22:50.040
- Yes, exactly.


00:22:50.040 --> 00:22:54.840
So there's like certain courses, and if you got one of the courses and you want to go


00:22:54.840 --> 00:22:58.240
through it with a group of students all on the same schedule.


00:22:58.240 --> 00:23:01.080
This was like a free thing that I was doing to try that out.


00:23:01.080 --> 00:23:02.680
Yeah, I think it's a neat idea.


00:23:02.680 --> 00:23:03.680
Yeah, thanks.


00:23:03.680 --> 00:23:04.680
Yeah, people seem to like it.


00:23:04.680 --> 00:23:05.680
Yeah, too many.


00:23:05.680 --> 00:23:09.640
But yeah, we've got to give it a try, get it dialed in, then we can open up some more


00:23:09.640 --> 00:23:10.640
groups.


00:23:10.640 --> 00:23:11.640
Yeah.


00:23:11.640 --> 00:23:13.480
All right, well, I've got a joke I kind of like for you here.


00:23:13.480 --> 00:23:14.480
I love this one.


00:23:14.480 --> 00:23:15.640
Are you ready for it?


00:23:15.640 --> 00:23:16.640
Yeah.


00:23:16.640 --> 00:23:17.640
You want to be...


00:23:17.640 --> 00:23:18.640
Why don't I be the junior dev?


00:23:18.640 --> 00:23:19.640
You can be the senior dev.


00:23:19.640 --> 00:23:21.400
Junior Dev and Senior Dev are having a chat.


00:23:21.400 --> 00:23:23.680
And I feel like that you may be a little skeptical


00:23:23.680 --> 00:23:25.160
of what I've done here.


00:23:25.160 --> 00:23:26.000
Let's just do this.


00:23:26.000 --> 00:23:27.880
All right, why don't you hit me with a question.


00:23:27.880 --> 00:23:31.560
- Okay, so where did you get the code that does this?


00:23:31.560 --> 00:23:32.720
Where did you get the code from?


00:23:32.720 --> 00:23:33.960
- Oh, I got it from Stack Overflow.


00:23:33.960 --> 00:23:36.520
- Was it from the question part or the answer part?


00:23:36.520 --> 00:23:38.760
(laughing)


00:23:38.760 --> 00:23:40.800
- Isn't that so good?


00:23:40.800 --> 00:23:43.840
It's like people say copy from Stack Overflow is bad.


00:23:43.840 --> 00:23:45.240
I think this is the real--


00:23:45.240 --> 00:23:46.320
- Copy from the question.


00:23:46.320 --> 00:23:49.040
- You definitely don't want to copy from the question part.


00:23:49.040 --> 00:23:51.080
- Yeah, but actually I've never heard anybody


00:23:51.080 --> 00:23:52.820
like, you know, spell that out.


00:23:52.820 --> 00:23:55.640
You know, you can look up stuff on Stack Overflow,


00:23:55.640 --> 00:23:58.320
but at the top with the question, don't copy that.


00:23:58.320 --> 00:24:01.120
That's the code that somebody's saying, this doesn't work.


00:24:01.120 --> 00:24:01.960
Yeah.


00:24:01.960 --> 00:24:02.800
(laughing)


00:24:02.800 --> 00:24:04.120
- Exactly, exactly.


00:24:04.120 --> 00:24:04.960
- That's funny.


00:24:04.960 --> 00:24:06.760
- All right, yeah, this is a good one.


00:24:06.760 --> 00:24:09.400
- Ah, it's too funny.


00:24:09.400 --> 00:24:10.240
- It's too funny.


00:24:10.240 --> 00:24:12.160
All right, well, thanks as always.


00:24:12.160 --> 00:24:14.440
Great to chat with you and share these things with everyone.


00:24:14.440 --> 00:24:15.280
- Thank you.


00:24:15.280 --> 00:24:16.100
- Yeah, bye-bye.


00:24:16.100 --> 00:24:18.200
Follow the show on Twitter via @PythonByte.


00:24:18.200 --> 00:24:21.240
that's Python Bytes as in B-Y-T-E-S.


00:24:21.240 --> 00:24:24.440
And get the full show notes at PythonBytes.fm.


00:24:24.440 --> 00:24:26.040
If you have a news item you want featured,


00:24:26.040 --> 00:24:28.480
just visit PythonBytes.fm and send it our way.


00:24:28.480 --> 00:24:31.360
We're always on the lookout for sharing something cool.


00:24:31.360 --> 00:24:33.200
On behalf of myself and Brian Okken,


00:24:33.200 --> 00:24:34.520
this is Michael Kennedy.


00:24:34.520 --> 00:24:36.520
Thank you for listening and sharing this podcast


00:24:36.520 --> 00:24:38.160
with your friends and colleagues.

