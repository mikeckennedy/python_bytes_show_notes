
00:00:00.000 --> 00:00:05.060
Hey everyone, Michael here. Just a quick show note before we get started on this


00:00:05.060 --> 00:00:09.720
episode. I think we have a great set of topics to cover but unfortunately


00:00:09.720 --> 00:00:15.360
something went crazy with my computer and just pinned all the cores and


00:00:15.360 --> 00:00:19.680
basically made the recording of my high-quality version fall apart. And so


00:00:19.680 --> 00:00:22.840
when you listen to this there'll be a little bit of static on my end and I


00:00:22.840 --> 00:00:27.440
just want to say sorry about that. We had some backup audio but it also got


00:00:27.440 --> 00:00:31.400
messed up. So basically this I've tried to make it as good as possible but


00:00:31.400 --> 00:00:35.840
there's a little bit of issue with the audio. If you can handle it there's some


00:00:35.840 --> 00:00:39.400
great news and if you want to skip this one and just wait for next week totally


00:00:39.400 --> 00:00:44.560
understand as well. All right without further ado let's get to the news. Thanks.


00:00:44.560 --> 00:00:50.520
This is Python Bytes. Python news delivered directly to your earbuds. It's


00:00:50.520 --> 00:00:57.200
Monday March 13th 2017 and this is your host Michael Kennedy here with my co-host


00:00:57.200 --> 00:01:00.700
Brian Okken. Hey Brian, you ready to share the Python news with the world?


00:01:00.700 --> 00:01:02.700
I am very ready. Excited.


00:01:02.700 --> 00:01:04.700
Would you say that you're on fire?


00:01:04.700 --> 00:01:06.700
I am on fire, yeah.


00:01:06.700 --> 00:01:08.700
Awesome. Yeah, Google's on fire too, right?


00:01:08.700 --> 00:01:12.700
Well, yeah. So I'm actually a little confused about where this is coming from.


00:01:12.700 --> 00:01:16.700
But there's a, yeah, our first topic is, was suggested by several listeners.


00:01:16.700 --> 00:01:18.700
We got it through email and through Twitter.


00:01:18.700 --> 00:01:24.700
To cover a tool called Python Fire from, I don't know where it's from.


00:01:24.700 --> 00:01:32.700
It's on the Google repo on GitHub, but at the bottom it says it's not a Google product.


00:01:32.700 --> 00:01:34.200
So I don't know what that means.


00:01:34.200 --> 00:01:38.700
I think it means it might have been created by somebody at Google, but it's not supported in any way.


00:01:38.700 --> 00:01:42.700
It's just, "Hey, this is a cool thing we made. We all should have it."


00:01:42.700 --> 00:01:44.700
Yeah, I downloaded it and gave it a shot.


00:01:44.700 --> 00:01:48.700
It says, so we haven't even said what it is, it's a command line interface utility.


00:01:48.700 --> 00:01:54.220
and their tag at the top of the repo says Python fire is a library for


00:01:54.220 --> 00:01:58.860
automatically generating command-line interfaces from absolutely any Python


00:01:58.860 --> 00:02:04.220
object. It is pretty cool. Another thing it says the list of the benefits a


00:02:04.220 --> 00:02:08.500
simple way to create a command-line interface in Python and you can use it


00:02:08.500 --> 00:02:13.180
for exploring and debugging existing Python code and it makes transitioning


00:02:13.180 --> 00:02:15.420
between bash and Python easier.


00:02:15.420 --> 00:02:18.860
I actually, so I tried it out, downloaded it,


00:02:18.860 --> 00:02:20.860
wrote a couple of little tools,


00:02:20.860 --> 00:02:23.580
and I actually, it was pretty fun,


00:02:23.580 --> 00:02:27.860
but I don't think I would use it for a shippable,


00:02:27.860 --> 00:02:30.780
a shippable Python like command line interface


00:02:30.780 --> 00:02:32.260
because it's pretty big.


00:02:32.260 --> 00:02:33.900
- Yeah, and by big, you mean it has


00:02:33.900 --> 00:02:35.500
some heavyweight dependencies, right?


00:02:35.500 --> 00:02:37.580
- Yeah, like it includes all of IPython.


00:02:37.580 --> 00:02:39.100
That's quite a bit coming with it.


00:02:39.100 --> 00:02:40.540
I mean, it also includes six,


00:02:40.540 --> 00:02:42.540
but that's really not that big of a deal.


00:02:42.540 --> 00:02:45.620
Yeah, six is just like a basically one little module or whatever.


00:02:45.620 --> 00:02:51.260
But yeah, I Python that's, that can be one of those things that's really hard to,


00:02:51.260 --> 00:02:53.820
to even install for some people, right?


00:02:53.820 --> 00:02:56.940
Like you give that to somebody on a Windows machine, they don't have like a


00:02:56.940 --> 00:02:58.140
compiler setup, right?


00:02:58.140 --> 00:02:59.900
That can be quite challenging.


00:02:59.900 --> 00:03:00.820
I'll have to see.


00:03:00.820 --> 00:03:05.860
I'm going to, I'm going to install it on a Windows machine this week to try that out.


00:03:05.860 --> 00:03:06.780
Yeah, cool.


00:03:06.780 --> 00:03:08.060
But it does look really great.


00:03:08.060 --> 00:03:11.020
You basically have a class and you just, for your main,


00:03:11.020 --> 00:03:14.380
you just call fire and you pass it the class


00:03:14.380 --> 00:03:17.540
and boom, that thing is CLI callable, right?


00:03:17.540 --> 00:03:19.460
- Yeah, but you don't have to use a class.


00:03:19.460 --> 00:03:22.180
You can also use just, you can have a set of functions


00:03:22.180 --> 00:03:26.460
you can put together and add those as the interface.


00:03:26.460 --> 00:03:29.980
And there can be multiple entry points as well.


00:03:29.980 --> 00:03:33.980
Like I tried throwing in like two or three functions


00:03:33.980 --> 00:03:36.340
and then listing those as all things


00:03:36.340 --> 00:03:38.340
that you can call from the command line.


00:03:38.340 --> 00:03:41.820
And it actually picks up doc strings pretty well


00:03:41.820 --> 00:03:46.860
to show you, so you kind of have help built in as well.


00:03:46.860 --> 00:03:48.180
I'm going to use it for--


00:03:48.180 --> 00:03:50.860
like, we've got test instruments we try to communicate with.


00:03:50.860 --> 00:03:54.500
And writing to and from the instrument from Python


00:03:54.500 --> 00:03:55.740
is really easy.


00:03:55.740 --> 00:03:58.420
From the Bash, not so easy.


00:03:58.420 --> 00:04:00.140
But I think I'm going to use this


00:04:00.140 --> 00:04:01.900
to try to do that at work.


00:04:01.900 --> 00:04:02.580
OK, yeah.


00:04:02.580 --> 00:04:03.140
Sounds cool.


00:04:03.140 --> 00:04:07.260
to give us a report on your experience.


00:04:07.260 --> 00:04:08.260
Cool.


00:04:08.260 --> 00:04:10.980
So the next thing I want to talk about is Simon.


00:04:10.980 --> 00:04:16.500
Like not Simon Says, but a cool menu bar application for Mac OS.


00:04:16.500 --> 00:04:20.820
So if you don't care about Mac OS, maybe you don't care too much about this, but one of


00:04:20.820 --> 00:04:28.900
my pet peeves is I think we need more full on native cross platform GUI things.


00:04:28.900 --> 00:04:33.620
We've had PyQt and PySide and the Qt framework.


00:04:33.620 --> 00:04:38.660
That's one option that we've had that's pretty good, but there's a lot of versioning, licensing,


00:04:38.660 --> 00:04:42.460
funkiness going on until maybe till the end of this year actually, till they come out


00:04:42.460 --> 00:04:44.700
with PySide 2.


00:04:44.700 --> 00:04:47.300
Maybe that becomes a really great option.


00:04:47.300 --> 00:04:55.300
But we have things like PyOBJC, similar stuff for Windows, similar stuff for Linux, where


00:04:55.300 --> 00:05:01.560
you can basically somebody already has wrapped the truly native OS elements.


00:05:01.560 --> 00:05:07.620
So with this thing called PIO BJC, you can basically create using Python what is indistinguishable


00:05:07.620 --> 00:05:13.220
from a native app like the controls literally are the same as if you had done it with Xcode


00:05:13.220 --> 00:05:14.820
and Objective-C or Swift.


00:05:14.820 --> 00:05:15.820
That's pretty cool, right?


00:05:15.820 --> 00:05:18.140
Yeah, it's like I hadn't heard of this.


00:05:18.140 --> 00:05:19.140
This is neat.


00:05:19.140 --> 00:05:21.100
Yeah, so the Simon thing is not like a framework.


00:05:21.100 --> 00:05:22.100
It's just an app, right?


00:05:22.100 --> 00:05:26.740
So some guy is like, "Hey, I really want to have a little thing I can click on and it'll


00:05:26.740 --> 00:05:31.900
tell me my network usage, my CPU usage, battery or whatever, something like this, right?"


00:05:31.900 --> 00:05:34.960
And he did it as one of those little menu bar things, like what runs in the top right


00:05:34.960 --> 00:05:37.100
by the clock on macOS.


00:05:37.100 --> 00:05:40.500
And you click and it drops down info about your system.


00:05:40.500 --> 00:05:45.940
If you look at the code, it's like, it depends on PyOBJC, but beyond that, it's like 150


00:05:45.940 --> 00:05:48.900
lines for a full implementation of that app.


00:05:48.900 --> 00:05:50.340
That's pretty cool.


00:05:50.340 --> 00:05:53.840
So if you're thinking about you need just a little simple something to run,


00:05:53.840 --> 00:05:57.840
like as a menu bar app or in the notification tray on Windows or something


00:05:57.840 --> 00:06:00.700
like this, you know, this is a really cool option.


00:06:00.700 --> 00:06:02.960
And I've mostly wanted to pull it out as like, Hey, here's an example.


00:06:02.960 --> 00:06:06.980
You could probably clone and tweak or just take the ideas of this and go.


00:06:06.980 --> 00:06:10.060
So you just, you create an app, you derive from NS application,


00:06:10.060 --> 00:06:11.980
which comes from Pio BJC.


00:06:11.980 --> 00:06:15.980
You implement a few methods and boom, you've got a nice native GUI app.


00:06:15.980 --> 00:06:16.540
Okay.


00:06:16.540 --> 00:06:17.940
I'm going to have to try this one out too.


00:06:17.940 --> 00:06:19.500
It's neat, right?


00:06:19.740 --> 00:06:22.460
The final mix would be to use something like Py2App


00:06:22.460 --> 00:06:24.640
or something where you bundle it in a distributable way


00:06:24.640 --> 00:06:28.000
so it's not like, well, make sure you pip install this thing


00:06:28.000 --> 00:06:28.920
before you can run it, right?


00:06:28.920 --> 00:06:30.920
Like that's probably not gonna fly so well


00:06:30.920 --> 00:06:33.680
for like end users, but still pretty excellent.


00:06:33.680 --> 00:06:37.440
- So is this PyOBJ, what is that other one?


00:06:37.440 --> 00:06:39.480
- PyOBJC as Objective-C,


00:06:39.480 --> 00:06:41.520
like the Python wrappers for Objective-C.


00:06:41.520 --> 00:06:44.120
- Okay, so that's just a Mac only thing, right?


00:06:44.120 --> 00:06:45.440
- Yes, exactly.


00:06:45.440 --> 00:06:48.040
But we can do similar stuff in the other frameworks,


00:06:48.040 --> 00:06:49.160
I believe, right?


00:06:49.160 --> 00:06:52.120
Like on the Windows side, you can use WPF,


00:06:52.120 --> 00:06:53.680
which is kind of way more heavyweight,


00:06:53.680 --> 00:06:57.040
but you can build the Python stuff using Iron Python.


00:06:57.040 --> 00:07:00.400
And I'm sure there's something with GDK and Linux as well.


00:07:00.400 --> 00:07:01.240
- Neat.


00:07:01.240 --> 00:07:02.320
- Yep, neat.


00:07:02.320 --> 00:07:04.200
It's kind of lunchtime, I'm getting hungry.


00:07:04.200 --> 00:07:05.480
I wish I had some free food.


00:07:05.480 --> 00:07:06.920
Really, I'm hungry.


00:07:06.920 --> 00:07:08.280
- Well, I was just amused.


00:07:08.280 --> 00:07:09.680
I don't know if these are useful or not,


00:07:09.680 --> 00:07:13.920
but I was amused by in reading Reddit this last week,


00:07:13.920 --> 00:07:16.080
there were a couple of things that popped up.


00:07:16.080 --> 00:07:18.880
And one of them was finding,


00:07:18.880 --> 00:07:22.760
this was actually useful, finding free food with Python.


00:07:22.760 --> 00:07:25.600
And it's actually an article talking


00:07:25.600 --> 00:07:30.080
about using web scraping to-- apparently, there's


00:07:30.080 --> 00:07:34.520
a couple of places that have food delivery places that


00:07:34.520 --> 00:07:37.080
sometimes run specials where they actually


00:07:37.080 --> 00:07:39.440
deliver free food to you.


00:07:39.440 --> 00:07:42.280
But you have to be paying attention to have that work.


00:07:42.280 --> 00:07:46.360
And so somebody wrote an app with web scraping and Twilio


00:07:46.360 --> 00:07:55.080
to occasionally check on this and then text him information about the free specials.


00:07:55.080 --> 00:08:04.400
And I probably won't do this, but I think it's a nice example of showing combining Twilio


00:08:04.400 --> 00:08:05.400
with web scraping.


00:08:05.400 --> 00:08:06.400
It's cool.


00:08:06.400 --> 00:08:07.400
Do you know what I like about it?


00:08:07.400 --> 00:08:12.720
It's taking these techie digital API type things and it's making real stuff happen.


00:08:12.720 --> 00:08:13.720
Yeah.


00:08:13.720 --> 00:08:14.560
- Yeah.


00:08:14.560 --> 00:08:16.200
- Like you're integrating Twilio and screen scraping


00:08:16.200 --> 00:08:17.240
and then you have free food.


00:08:17.240 --> 00:08:19.200
Like how cool is that, right?


00:08:19.200 --> 00:08:20.800
- Yeah, but I, so I would,


00:08:20.800 --> 00:08:23.960
you definitely real world probably have free food.


00:08:23.960 --> 00:08:25.840
I think it'd be cool to run,


00:08:25.840 --> 00:08:27.640
I was thinking about doing a similar thing,


00:08:27.640 --> 00:08:30.240
like monitoring.


00:08:30.240 --> 00:08:33.040
So we have build machines and stuff


00:08:33.040 --> 00:08:35.200
and I wouldn't mind having something


00:08:35.200 --> 00:08:37.080
that sat around and monitored that


00:08:37.080 --> 00:08:39.960
and then texted me the results


00:08:39.960 --> 00:08:41.400
'cause I don't know how to do that.


00:08:41.400 --> 00:08:42.320
- Yeah, that's cool.


00:08:42.320 --> 00:08:44.320
Definitely some cool Twilio integration there.


00:08:44.320 --> 00:08:48.160
- And then the next article just amused the heck out of me.


00:08:48.160 --> 00:08:53.080
It's called "Notification When Friends Order Pizza."


00:08:53.080 --> 00:08:56.800
So I don't know if this is a great thing


00:08:56.800 --> 00:08:59.480
or not for Domino's to do,


00:08:59.480 --> 00:09:02.000
but there's apparently a way


00:09:02.000 --> 00:09:03.760
that you can plug in phone numbers


00:09:03.760 --> 00:09:06.320
and find out whether that phone number


00:09:06.320 --> 00:09:07.680
has ordered pizza recently.


00:09:07.680 --> 00:09:11.440
And so somebody wrote a script


00:09:11.440 --> 00:09:14.560
to put in all of their friends' phone numbers


00:09:14.560 --> 00:09:17.360
and text them or let them know


00:09:17.360 --> 00:09:20.380
when one of their friends is ordering pizza.


00:09:20.380 --> 00:09:22.260
I guess another way to get free food


00:09:22.260 --> 00:09:24.760
is to mooch off your friends when they order food.


00:09:24.760 --> 00:09:27.500
- Yeah, that's, I'm not sure how I feel about that,


00:09:27.500 --> 00:09:29.840
actually, that's a little creepy, man.


00:09:29.840 --> 00:09:30.880
- It actually is creepy.


00:09:30.880 --> 00:09:34.300
I was thinking that, like, I was wondering


00:09:34.300 --> 00:09:35.800
whether or not I should include that,


00:09:35.800 --> 00:09:38.240
but it amused me.


00:09:39.680 --> 00:09:44.120
I don't think that really it ought to be that easy to find out whether or not somebody ordered some pizza.


00:09:44.120 --> 00:09:48.520
Yeah, well, if all your friends start showing up every time you have Domino's.


00:09:48.520 --> 00:09:52.720
Yeah. Domino's is trying some funky stuff, man.


00:09:52.720 --> 00:09:58.120
They also have a bot, like you can order pizza just by like chatting with Domino's, which is also kind of funky.


00:09:58.120 --> 00:10:02.860
I want, yeah, but but like you could order food for other people then or something.


00:10:02.860 --> 00:10:08.000
I don't know. It seems, seems like they're playing with scary interfaces, but at least they're playing with interfaces.


00:10:08.000 --> 00:10:09.000
>> Yeah, exactly.


00:10:09.000 --> 00:10:11.000
It is pretty cool.


00:10:11.000 --> 00:10:15.000
Okay, so speaking of food, I want to talk about Pi.


00:10:15.000 --> 00:10:16.000
[laughter]


00:10:16.000 --> 00:10:24.000
Httpi, which is a little utility written in Python that is kind of like Wget or curl,


00:10:24.000 --> 00:10:26.000
except for that it's awesome.


00:10:26.000 --> 00:10:30.000
The reason it's awesome is it runs on the command line.


00:10:30.000 --> 00:10:34.440
command line. So if I wanted to like call a JSON API, I could say like HTTP


00:10:34.440 --> 00:10:40.480
space and I would you know give it the URL whatever the that is maybe some


00:10:40.480 --> 00:10:44.340
additional data you can even post data from the command line and so on and it


00:10:44.340 --> 00:10:50.640
comes back formatted pretty printed color-coded everything. So it's quite


00:10:50.640 --> 00:10:54.280
glorious. You can create sessions and have those like authentic sessions


00:10:54.280 --> 00:11:01.120
persist across multiple calls. You can do XML, you can do JSON, you can do HTTP,


00:11:01.120 --> 00:11:04.920
or HTML, all these different things that it knows about, it will


00:11:04.920 --> 00:11:09.480
color code and format pretty for you on the command line. That's great, and this


00:11:09.480 --> 00:11:14.760
is multiple operating systems. Yes, absolutely. Yeah, so this works


00:11:14.760 --> 00:11:19.880
everywhere. This is just a Python 3 little library, and that's the the Pi


00:11:19.880 --> 00:11:24.120
part, right, the Python. And so I spoke about Postman before, it's been a really


00:11:24.120 --> 00:11:27.320
cool way to test APIs and just play around with them.


00:11:27.320 --> 00:11:31.840
But this is kind of like the CLI version, because if you do that with curl or even with


00:11:31.840 --> 00:11:36.160
Python and request and then you spit it out, it shows you it, but it's usually not well


00:11:36.160 --> 00:11:37.160
formatted.


00:11:37.160 --> 00:11:38.160
It's usually minified.


00:11:38.160 --> 00:11:39.160
It's not color-coded.


00:11:39.160 --> 00:11:41.440
So this is pretty tricky.


00:11:41.440 --> 00:11:44.480
The color-coding actually makes it really readable.


00:11:44.480 --> 00:11:45.480
That's nice.


00:11:45.480 --> 00:11:53.320
So if you've been using curl or Wget a lot, check out HTTP, HTTPie.


00:11:53.320 --> 00:11:57.280
links in the show notes it's on GitHub and it's got a got a cool cool little


00:11:57.280 --> 00:12:00.600
interface. I put the link to the home page in there just click on that and


00:12:00.600 --> 00:12:03.960
you'll see a screenshot comparison of that versus curl and it's night and day


00:12:03.960 --> 00:12:10.080
it's great. Well the last thing I've got is speaking of command lines and hard to


00:12:10.080 --> 00:12:18.360
pronounce packages it's pipdeptry. There's a little utility you can do it


00:12:18.360 --> 00:12:22.360
with pip install, I think it's pip dep tree altogether.


00:12:22.360 --> 00:12:23.120
>> Yeah.


00:12:23.120 --> 00:12:23.620
>> But-


00:12:23.620 --> 00:12:28.080
>> As in pip dependency tree, but just P-I-P-D-E-P-T-R-E-E, right?


00:12:28.080 --> 00:12:28.840
>> Yes.


00:12:28.840 --> 00:12:32.240
And it is a godsend for me.


00:12:32.240 --> 00:12:35.760
Since for, like for this podcast, I'm trying out stuff all the time,


00:12:35.760 --> 00:12:37.360
trying out new packages.


00:12:37.360 --> 00:12:43.800
And also for, like right now, I'm working on the plug-in chapter in the PyTest book,


00:12:43.800 --> 00:12:46.360
and I'm installing a lot of stuff.


00:12:46.360 --> 00:12:48.400
And I am using virtual environments,


00:12:48.400 --> 00:12:53.480
but I still don't really want to throw them away all the time.


00:12:53.480 --> 00:12:55.080
So I want to clean them out.


00:12:55.080 --> 00:12:58.600
But if you just do a pip list, often I


00:12:58.600 --> 00:13:01.280
see a whole bunch of stuff that I don't remember installing,


00:13:01.280 --> 00:13:03.360
and it's because of all the dependencies.


00:13:03.360 --> 00:13:06.840
And this pip dep tree just shows all


00:13:06.840 --> 00:13:10.760
of the things you've installed and what depends on what.


00:13:10.760 --> 00:13:13.200
When I look up and don't know what arrow is


00:13:13.200 --> 00:13:15.560
or where it came from, pip dep tree


00:13:15.560 --> 00:13:18.080
shows me that, oh, I installed cookie cutter,


00:13:18.080 --> 00:13:20.440
and cookie cutter installed Jinja 2,


00:13:20.440 --> 00:13:22.440
and Jinja 2 installed Arrow.


00:13:22.440 --> 00:13:24.000
Now I know.


00:13:24.000 --> 00:13:25.360
- Yeah, that's very cool, right?


00:13:25.360 --> 00:13:28.360
- Yeah, and it's nice, I like it.


00:13:28.360 --> 00:13:30.080
It's kind of, I wish that was just,


00:13:30.080 --> 00:13:34.700
it should just be an option in pip list, I think.


00:13:34.700 --> 00:13:36.360
- Yeah, it really should be part of pip, shouldn't it?


00:13:36.360 --> 00:13:38.960
But it's not, and so we have pipteptree,


00:13:38.960 --> 00:13:39.800
and I think that's cool.


00:13:39.800 --> 00:13:40.840
You can reverse it as well.


00:13:40.840 --> 00:13:43.840
You can say, okay, this thing, what depends upon this?


00:13:43.840 --> 00:13:46.040
And it'll show, say, well, these three packages,


00:13:46.040 --> 00:13:47.880
through some sort of transitive closure


00:13:47.880 --> 00:13:49.480
of their dependency graph,


00:13:49.480 --> 00:13:53.480
these are the things that you need this to be here for,


00:13:53.480 --> 00:13:54.560
or you can do it the other way,


00:13:54.560 --> 00:13:57.960
and you can say what is installed this, right?


00:13:57.960 --> 00:13:59.360
Or what does this thing depend upon?


00:13:59.360 --> 00:14:00.240
Which is pretty cool.


00:14:00.240 --> 00:14:02.460
So you can view it from either direction.


00:14:02.460 --> 00:14:03.300
- Oh, cool.


00:14:03.300 --> 00:14:04.120
I didn't know that.


00:14:04.120 --> 00:14:06.440
- Yeah, there's a dash R for reverse.


00:14:06.440 --> 00:14:08.720
So hit it with the dash R.


00:14:08.720 --> 00:14:09.560
Cool, okay.


00:14:09.560 --> 00:14:11.600
So final thing we have for today


00:14:11.600 --> 00:14:16.240
is a real testament to Python 3, to modern Python,


00:14:16.240 --> 00:14:17.680
to asynchrony.


00:14:17.680 --> 00:14:20.760
You know, we've been hitting this async/await,


00:14:20.760 --> 00:14:23.060
the power of asynchrony, a couple of times.


00:14:23.060 --> 00:14:25.320
So I want to come back with a few comments


00:14:25.320 --> 00:14:26.480
from what people have talked about,


00:14:26.480 --> 00:14:27.920
but I also want to feature an article.


00:14:27.920 --> 00:14:29.400
And this is a really great article


00:14:29.400 --> 00:14:33.040
by the folks at Signet by AI,


00:14:33.040 --> 00:14:36.480
which is an AI platform that uses Python.


00:14:36.480 --> 00:14:39.600
So basically the title of what we're going to talk about


00:14:39.600 --> 00:14:43.040
is not your father's Python, Amazing Python Frameworks.


00:14:43.040 --> 00:14:46.520
They sort of went through what they had been thinking about


00:14:46.520 --> 00:14:48.480
when they created this company and said,


00:14:48.480 --> 00:14:51.040
look, we all know Python and we like Python,


00:14:51.040 --> 00:14:53.120
but it's super important that we can do


00:14:53.120 --> 00:14:55.240
crazy amounts of data processing.


00:14:55.240 --> 00:14:56.920
Their product and editor has to handle


00:14:56.920 --> 00:14:59.900
hundreds of thousands of events per second.


00:14:59.900 --> 00:15:02.740
And they've been hearing the drumbeat that,


00:15:02.740 --> 00:15:05.120
you know, you can't scale with Python,


00:15:05.120 --> 00:15:07.880
you need to switch to Go, et cetera, et cetera, et cetera.


00:15:07.880 --> 00:15:09.740
And they said, "All right, well, let's have a look


00:15:09.740 --> 00:15:10.980
"and let's see how this is gonna work out."


00:15:10.980 --> 00:15:14.120
They evaluated Go and what the good and the bad of it was.


00:15:14.120 --> 00:15:15.580
They evaluated Python and said,


00:15:15.580 --> 00:15:18.180
"Let's look not at traditional Python,


00:15:18.180 --> 00:15:20.900
"like the way, the sort of synchronous style of programming,


00:15:20.900 --> 00:15:25.100
"but there's a number of really powerful async frameworks."


00:15:25.100 --> 00:15:27.740
So we've covered, I think, at least two out of three of them.


00:15:27.740 --> 00:15:31.380
So there's UVLoop, which is pretty awesome.


00:15:31.380 --> 00:15:35.100
There's Sanic and there's Gepronto, okay?


00:15:35.100 --> 00:15:36.980
So Sanic and Gepronto, these are the web things


00:15:36.980 --> 00:15:42.580
that we've talked about tons and they're built on async I/O just like this UV loop is but


00:15:42.580 --> 00:15:48.020
UV loop is actually a re-implementation in Cython, so the compiled version of Python


00:15:48.020 --> 00:15:50.980
that's more than twice as fast as what's built into Python itself.


00:15:50.980 --> 00:15:51.980
Interesting, right?


00:15:51.980 --> 00:15:56.820
So like maybe we should just like bring that feature into Python itself in some way to


00:15:56.820 --> 00:15:58.940
make async I/O twice as fast.


00:15:58.940 --> 00:16:03.380
So they said, "Let's look at this and evaluate it and decide if this scalability thing's


00:16:03.380 --> 00:16:04.380
going to work."


00:16:04.380 --> 00:16:05.380
All right.


00:16:05.380 --> 00:16:10.060
we all know about the gill, is this a real problem? So they ran, they ran some comparisons


00:16:10.060 --> 00:16:15.940
and did some work. And it turns out like they've got some graphs of UV loop, and the other


00:16:15.940 --> 00:16:21.640
frameworks just like blowing away things like node j s, in terms of performance, keeping


00:16:21.640 --> 00:16:28.060
up with I think go on some some use cases faster, some slower, but really very, very


00:16:28.060 --> 00:16:32.180
high performance. And so after this really detailed write up with like numbers and everything,


00:16:32.180 --> 00:16:34.320
graphs and analysis.


00:16:34.320 --> 00:16:36.160
They said, "Look, the future of Python is here.


00:16:36.160 --> 00:16:38.340
"Overall, it looks like fast, asynchronous Python


00:16:38.340 --> 00:16:39.960
"might be here to stay.


00:16:39.960 --> 00:16:43.180
"Now that async IO really seems to be the default way


00:16:43.180 --> 00:16:44.820
"that people are willing to work in Python,


00:16:44.820 --> 00:16:48.020
"and async and await has really caught on,


00:16:48.020 --> 00:16:50.760
"because of the non-blocking network


00:16:50.760 --> 00:16:53.460
"and disk IO is usually the problem,


00:16:53.460 --> 00:16:55.560
"it turns out the GIL probably doesn't really


00:16:55.560 --> 00:16:58.300
"get in the way of speed that much for most use cases."


00:16:58.300 --> 00:16:59.140
- That's cool.


00:16:59.140 --> 00:16:59.960
- Isn't that cool?


00:16:59.960 --> 00:17:03.300
They said, look, it's working out great for us, Python 3,


00:17:03.300 --> 00:17:05.740
and we've got the scalability we need, no problem,


00:17:05.740 --> 00:17:07.280
and we're happy we didn't abandon it,


00:17:07.280 --> 00:17:09.920
because traditionally it hadn't been fast enough.


00:17:09.920 --> 00:17:12.320
- So somehow I'm missing this,


00:17:12.320 --> 00:17:16.500
which they looked at Gepronto and Sanic and UVloop.


00:17:16.500 --> 00:17:18.480
Are they deciding on anything here?


00:17:18.480 --> 00:17:20.880
- I don't know which one they decided upon.


00:17:20.880 --> 00:17:23.640
I think UVloop is a little more established.


00:17:23.640 --> 00:17:25.320
And UVloop is actually the foundation


00:17:25.320 --> 00:17:27.420
for Gepronto and Sanic.


00:17:27.420 --> 00:17:28.880
So there's a bit of a mixing, right?


00:17:28.880 --> 00:17:31.840
like Pronto and Sanic are extending these and insert.


00:17:31.840 --> 00:17:32.920
It's pretty cool.


00:17:32.920 --> 00:17:34.240
There's a nice comment,


00:17:34.240 --> 00:17:37.380
which I linked in the show notes for this section.


00:17:37.380 --> 00:17:38.460
And there's somebody in there saying,


00:17:38.460 --> 00:17:42.000
hey, we went through the same basic thinking


00:17:42.000 --> 00:17:43.200
and here's how it worked out for us.


00:17:43.200 --> 00:17:46.280
And they said, we're also doing this async Python 3 thing,


00:17:46.280 --> 00:17:47.400
which is cool.


00:17:47.400 --> 00:17:50.640
On Twitter, we got a message from Sasha Kurta.


00:17:50.640 --> 00:17:53.080
And he said basically, hey, Michael, hey, Brian,


00:17:53.080 --> 00:17:56.080
I have this example where I was doing a bunch


00:17:56.080 --> 00:17:58.400
of HTTP client stuff.


00:17:58.400 --> 00:18:01.400
And we talked, remember, we talked about AIO HTTP,


00:18:01.400 --> 00:18:04.160
the client side stuff, how much faster that can make it.


00:18:04.160 --> 00:18:05.520
And he said, "That's cool."


00:18:05.520 --> 00:18:06.960
I was doing some scraping and whatnot.


00:18:06.960 --> 00:18:11.020
And my particular project went from eight minutes,


00:18:11.020 --> 00:18:13.840
over eight minutes, doing requests,


00:18:13.840 --> 00:18:17.800
to less than 45 seconds using the async and await stuff


00:18:17.800 --> 00:18:19.340
with AIO HTTP.


00:18:19.340 --> 00:18:20.280
Basically the same code.


00:18:20.280 --> 00:18:21.440
He was blown away.


00:18:21.440 --> 00:18:22.360
- Yeah, that's really cool.


00:18:22.360 --> 00:18:23.640
And I'm glad that he shared that with us.


00:18:23.640 --> 00:18:24.680
- Yeah, I am too.


00:18:24.680 --> 00:18:26.960
Of course, you drew the correct conclusion


00:18:26.960 --> 00:18:29.040
from this conversation.


00:18:29.040 --> 00:18:33.560
That look at the, what is that, like 10 time


00:18:33.560 --> 00:18:36.840
increase in productivity you get by listening to Python Bytes?


00:18:36.840 --> 00:18:38.460
- Yeah, yes, definitely.


00:18:38.460 --> 00:18:40.220
- All right.


00:18:40.220 --> 00:18:43.120
- You can save your company money too by listening to us.


00:18:43.120 --> 00:18:44.400
- Absolutely, all right.


00:18:44.400 --> 00:18:46.200
Well, that's it for this week's news.


00:18:46.200 --> 00:18:48.760
You got anything finally you wanna share personally?


00:18:48.760 --> 00:18:51.120
- Nope, nope, just plugging away at the book.


00:18:51.120 --> 00:18:52.720
- Same here, plugging away at the courses.


00:18:52.720 --> 00:18:55.380
So thank you everyone for supporting all of our work,


00:18:55.380 --> 00:19:00.960
not just this podcast, but Brian's other podcast, his book, my courses, my other podcasts.


00:19:00.960 --> 00:19:02.240
It's great to be doing this for everyone.


00:19:02.240 --> 00:19:03.240
So thank you.


00:19:03.240 --> 00:19:04.240
Thank you, Michael.


00:19:04.240 --> 00:19:05.240
Yep.


00:19:05.240 --> 00:19:06.240
See you later.


00:19:06.240 --> 00:19:08.760
Thank you for listening to Python Bytes.


00:19:08.760 --> 00:19:11.260
Follow the show on Twitter via @PythonBytes.


00:19:11.260 --> 00:19:14.400
That's Python Bytes as in B-Y-T-E-S.


00:19:14.400 --> 00:19:17.680
And get the full show notes at PythonBytes.fm.


00:19:17.680 --> 00:19:21.400
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:19:21.400 --> 00:19:22.400
way.


00:19:22.400 --> 00:19:24.880
We're always on the lookout for sharing something cool.


00:19:24.880 --> 00:19:28.360
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:19:28.360 --> 00:19:31.400
Thank you for listening and sharing this podcast with your friends and colleagues.

