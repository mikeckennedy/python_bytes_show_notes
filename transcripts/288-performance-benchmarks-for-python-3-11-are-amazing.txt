00:00:00 >> Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 288, recorded June 14th, 2022. I'm Michael Kennedy.

00:00:11 >> I am Brian Okken.

00:00:12 >> Brian, how are you doing?

00:00:14 >> I'm excellent today.

00:00:15 >> I hear you're a little busy.

00:00:17 >> But it's just being a parent and having side jobs and stuff like that.

00:00:21 >> Of course. Well, it's better than the alternative.

00:00:24 >> Definitely. I was talking to somebody this weekend about their one job and trying to balance job and life.

00:00:30 And I'm like, I don't even remember what that's like with just one job.

00:00:33 - I know, or you have a job where you go to work and you do the work, and then when you go home, there's no real reason to do the job anymore, so you can just step away from it.

00:00:41 Guns, glories.

00:00:43 And yet, I continue to choose the opposite, which I also love.

00:00:46 All right, well, speaking of stuff people might love, you wanna kick us off with your first item?

00:00:50 - Yeah, we're gonna talk about polar bears.

00:00:52 No, not polar bears.

00:00:54 A project called Polars.

00:00:56 Actually, it's super fun and cool.

00:00:59 Polars was suggested to us by actually several listeners.

00:01:02 We got several people sent in.

00:01:05 I'm sorry I don't have their names, but thank you, always send great stuff our way.

00:01:09 We love it. But Polars is billed as a lightning fast DataFrame library for Rust and Python.

00:01:18 It is written in Rust, But they have like a, they have a full, the full API is present in Python and it's just, it's kind of neat actually how they've done it.

00:01:35 But so we've got up on the screen, the splash screen for the Polars project.

00:01:40 There's a user guide and API reference, of course, but one of the things I wanted to talk about is there some of their, why you would consider it.

00:01:48 So Polars is lightning fast data frame library.

00:01:52 It uses an in-memory query engine, and it says it's embarrassingly parallel in execution.

00:01:59 And it has a cache efficient algorithms and expressive API.

00:02:04 And they say it makes it perfect for efficient data wrangling, data pipelines, snappy APIs, and so much more.

00:02:11 But I just, also it's fun.

00:02:13 I played with it a little bit.

00:02:16 It's zippy and fun.

00:02:17 They have both the ability to do lazy execution and eager execution, whichever you prefer for your use.

00:02:27 It's multi-threaded, has a notion of single instruction, multiple data, not exactly sure what that means, but makes it faster apparently.

00:02:38 And I was looking through the whole, the introduction to the user's guide is actually written like a very well-written book.

00:02:48 It looks like the whole guide as far as I can tell is written for the Python API.

00:02:54 I think that was part of the intent all along is to write it quickly in Rust, expose it to Rust users also, but also run it with Python.

00:03:04 It's just really pretty clean and super fast.

00:03:08 One of these benchmark results performance things was, it's like Spark was taken 332 seconds and they took 43 seconds.

00:03:17 >> Wow.

00:03:18 >> I know.

00:03:19 >> It's a 100 million rows.

00:03:21 >> Yeah.

00:03:22 >> And seven columns. That's not just like let's load up a couple of pieces of data or something.

00:03:27 >> Right. There's a lot of focus on this, making sure that it's fast, especially when you don't need everything, like doing lazy evaluation or making sure you do multiprocessing.

00:03:41 One of the things I thought was really cool about it, I was looking through the documentation, is there's a section on, that says, it was a section that was talking about parallelization.

00:03:54 It says do not kill the parallelization because with Python, we know we, there is, basically there's ways to use polars that can kill parallel processing because of the gill.

00:04:07 If you're using, if you don't do it the way they've set it up, you can use it in a way that makes it a little slower, I guess is what I'm saying.

00:04:16 But so there's a section on this talking about the Polar's expressions.

00:04:22 And these are all set up so that you can pass these expressive queries into Polars and have it run in the background and just make things really fast with and sort of skirt around the gill because you're doing all the work in the rust part of the world.

00:04:41 and then collecting the data later.

00:04:44 So there's like a set up the query and then collect the query.

00:04:48 It's kind of cool. So anyway, I just thought this is a really looks fun.

00:04:52 It's just there's nothing to, you don't have to know that it's in Rust.

00:04:57 You just say pip install pollers and it works.

00:05:00 >> Yeah, that's great. Out in the audience, Dharab asks, why Rust and not C?

00:05:06 Maybe an example there is Pandas versus this.

00:05:10 Also, probably the person who wrote it just really likes Rust.

00:05:13 And I think Rust has a little bit more thread safety than straight C does. I'm not 100% sure.

00:05:18 But this uses threads, as you point out, whereas the other one, pandas and others in C don't.

00:05:24 I also think that we're going to see a lot more things like this.

00:05:27 Like, because I think some of the early faster packages for Python were written in C because Rust wasn't around or it wasn't mature enough.

00:05:37 But I think we're going to see more people saying, well, I want it to be closer to the processor for some of the stuff.

00:05:45 Why not Rust?

00:05:46 'Cause I think Rust is a cleaner development environment than C right now, so.

00:05:51 - Yeah, I agree, absolutely.

00:05:53 It's just a more modern language, right?

00:05:55 - You know, C's keeping up.

00:05:57 C is never gonna be old, I don't think, but yeah.

00:06:01 - Yeah, yeah, I don't mean to say that C is not modern in the sense that people are not using it, but it doesn't embrace, in its sort of natural form, the most smart pointers and things like that.

00:06:12 >> Yeah.

00:06:13 >> C++ maybe, but not C.

00:06:15 >> There's safety features built into Rust to make sure you don't just make it easier to not do dumb things.

00:06:21 I guess, let's put it that way.

00:06:24 >> Indeed. All right. Well, let's jump on to my first item, which is a follow-up from last week, Python Developer Survey 2021.

00:06:32 Yes, you heard that right. I know it's 2022.

00:06:34 These are the results from the survey that was at the end of last year.

00:06:37 Let's, I'm going to kind of skim through this and just hit on some of the main ideas here.

00:06:42 There's a ton of information and I encourage people to go over and scroll through it.

00:06:46 This is done in conjunction with the folks over at JetBrains, the PyCharm team and all that.

00:06:51 So it was collected and analyzed by the JetBrains folks, but put together independently by the PSF, right?

00:06:58 So it's not intended to not be skewed in any way towards them.

00:07:01 All right.

00:07:02 So first thing is if you're using Python, is it your main language or your secondary language?

00:07:07 84% of the people say it's their main language, with 16% picking up the balance of not so much.

00:07:12 It's been pretty stable over the last four years.

00:07:14 What do you think of this, Brian?

00:07:15 (Brian laughs)

00:07:18 - I think that there's a lot of people like me, I think, that it started out as my secondary language and now it's my main language.

00:07:25 - Yeah, interesting, yeah.

00:07:27 Kind of got sucked in.

00:07:28 Like, "Ah, maybe I'll use it to test my C stuff." Wait, actually, this is kind of nice.

00:07:31 Maybe I'll do more of this.

00:07:31 - Yeah. (laughs)

00:07:32 - There's always the next question, analysis is always fraught with weird overlaps.

00:07:39 But I like the way they ask this a little bit better than a lot of times it says, Python usage with other languages, what other languages do you use Python with?

00:07:47 Rather than maybe a more general one where they ask, well what is the most popular language?

00:07:51 And you'll see weird stuff like, well most people code in CSS.

00:07:54 Like I'm a full stack CSS developer.

00:07:57 Like no you're not, just everyone has to use it.

00:07:59 Like what is this?

00:08:00 It's a horrible question.

00:08:01 - Yeah.

00:08:01 - Right, so this is like if you're doing Python, what other languages do you bring into the mix?

00:08:05 And I guess maybe just hit the top five, JavaScript, because you might be doing frontend and backend, HTML, CSS, same reason, Bash shell, 'cause you're doing automation build, so on, SQL, that's SQL.

00:08:16 I'm surprised there's that much direct SQL, but there it is.

00:08:19 And then C and C++, speaking of that language.

00:08:22 - Yeah.

00:08:22 - Also to sort of address the thing that I brought up before, Rust is at 6%, last year it was at 5%.

00:08:29 So it's compared to C at 30, and 29, So they both grew by 1% this year.

00:08:33 - Okay.

00:08:34 - Yeah.

00:08:35 - I think they both grew, that's interesting.

00:08:37 - Yeah, exactly.

00:08:38 Another thing that people might want to pay attention to is you'll see year over year stuff all over the place in these reports because they've been doing this for a while.

00:08:46 So like the top bar that's darker, or sorry, brighter, is this year, but they always also put last year.

00:08:54 So for example, people are doing less bash.

00:08:57 You can see like it's lower bar is higher and they're doing less PHP.

00:09:00 probably means they love themselves a little bit more.

00:09:03 (laughs)

00:09:04 Don't go home crying, okay.

00:09:06 Let's see, languages for web and data science.

00:09:10 This is kind of like if you're doing these things, what do you use more?

00:09:13 So if you're doing data science, you do more, SQL is your most common thing.

00:09:17 If you're doing web, surprise, JavaScript and HTML is the most common other thing.

00:09:22 Let's see, what do you use Python for?

00:09:25 Work and personal is 50%, Personal is 29 and work 20%.

00:09:31 Kind of interesting that more people use it for side projects if they use it for just one or the other of work or personal.

00:09:37 I guess people who know Python at work, they wanna go home, they're like, you know what, I could automate my house with this too.

00:09:42 Let's do that.

00:09:42 - I think that, yeah, I would take it like that.

00:09:45 I think more people, it isn't just even automating your house, it's just playing around with it at home, like, yeah, I heard about this new web framework, FastAPI, I wanna try it out, things like that, so.

00:09:55 - Yeah, absolutely.

00:09:56 I'm gonna skip down here through a bunch of stuff.

00:09:59 Where do you use Python for the most?

00:10:02 Web development, but that fell year over year.

00:10:04 Data analysis stayed the same year over year.

00:10:06 Machine learning fell year over year.

00:10:09 And a bunch of stuff.

00:10:10 But so, sort of the growth areas year over year are education and desktop development, and then other, I think it's pretty, also game development doubled.

00:10:19 - Doubled from one to 2%.

00:10:21 - I mean, from one to two is probably like, there was, you know, that might be within the margin of error type of thing, but still it doubled.

00:10:27 But I think just the other, no other didn't grow.

00:10:30 There's just, I think it's just more spread out.

00:10:31 I don't know.

00:10:32 'Cause there's still, I think same number of people using Python.

00:10:34 All right, are you a data scientist?

00:10:36 One third yes, two thirds no.

00:10:38 That's that fits with my mental model of the Python space.

00:10:42 One third data science, one third web and API and one third massively diverse other.

00:10:47 The way I see the ecosystem.

00:10:49 Python three versus two, I think we're asymptotically as a limit approaching Python 3 only, but year over year it goes 25% from 2017, then 16% Python 2, then 10%, then six, then five, and then there's just huge code bases that are stuck on Python 2.

00:11:07 Some of the big banks have 5,000 Python developers working on Python 2 code bases that are so specialized and tweaked that they can't just swap out stuff.

00:11:17 That might represent 5% bank usage, I don't know.

00:11:19 (laughing)

00:11:22 I just, I feel bad for you.

00:11:24 We're rooting for you.

00:11:25 Everybody out there using Python 2.

00:11:28 Stick in there.

00:11:28 - Let's approach that limit.

00:11:29 Yeah, yeah, let's divide by n factorial, not n for your limit there.

00:11:32 Let's go, get in there.

00:11:34 All right, Python 3.9 is the most common version.

00:11:38 3.10 being 16% and 3.8 being 27% versus 35.

00:11:43 So that's pretty interesting.

00:11:44 I feel like this is, hey, this is what comes with my Linux.

00:11:48 And this is what comes with my Docker, so I'm using that.

00:11:50 but maybe it's more--

00:11:52 - Yeah, it's interesting 'cause you and I are in an interesting space, 'cause we're always looking at the new stuff.

00:11:57 So I'm at 3.10 and I can't wait to jump to 3.11.

00:12:01 And actually I've switched to 3.11 for some projects.

00:12:05 But there's a lot of people that's like, "Man, Python's pretty good, "and it's been good for a while, "so I don't need a lot of the new features." - Yeah, for sure.

00:12:15 I'm going to later talk about something it might shift that to the right.

00:12:22 I've actually been thinking like, should I maybe install 3.11 beta?

00:12:25 See how stable that is on the servers.

00:12:27 We'll see, that might be a bad choice.

00:12:30 Might be a good choice, as we'll see.

00:12:31 Okay, where do you install Python from?

00:12:34 38%, just download the thing from python.org and run with that.

00:12:38 The next most common option is to install it via your OS package manager, apt, homebrew, whatever.

00:12:47 And Alvaro has a great little recommendation out there for people who are stuck on Python 2.

00:12:52 There probably is a support group for Python 2 users.

00:12:55 - Hi, my name's Brian and I use Python 2.

00:12:57 (laughing)

00:12:59 - Hi, Brian.

00:13:00 All right.

00:13:02 Another one I thought was pretty interesting is the packaging stuff, the isolation stuff.

00:13:09 Before we get there really quick, Web Frameworks, FastAPI continues to grow.

00:13:13 - Yeah.

00:13:14 - Pretty strong here.

00:13:15 We've got Flask is now maybe within the margin error, but just edged ahead of Django.

00:13:21 But FastAPI almost doubled in usage over the last year.

00:13:25 It grew nine percentage points, but it was at 12% last year, and so now it's at 21%, which is, that's a pretty big chunk to take out of established frameworks.

00:13:32 - Yeah, well, and it looks like the third is none.

00:13:36 I haven't tried that yet.

00:13:38 - Yeah, it gets a lot of attribute errors, but it's really efficient because it doesn't do much work.

00:13:42 - Yeah. (laughs)

00:13:44 - Yeah, people who maybe don't know, FastAPI, the name would indicate it's only for building APIs, but you can build web apps with it as well, and it's pretty good at that.

00:13:52 - Especially if you check out Michael's--

00:13:55 Yeah, especially if you check out Michael's courses.

00:13:57 He's got like two courses on building web apps with FastAPI.

00:14:00 - I do, and I also have some sort of template extensions for it that make it easier.

00:14:04 All right, data science libraries.

00:14:07 I don't know how I feel about this one.

00:14:08 Do you use NumPy?

00:14:09 Well, yes, but if you use other libraries, then you also use NumPy, so--

00:14:12 - Yeah, it's like all of these are using NumPy, so.

00:14:16 - Exactly, exactly.

00:14:17 - Yeah.

00:14:18 - A bunch of other stuff.

00:14:19 Look at that, for unit testing.

00:14:21 Would it surprise you that PyTest is winning?

00:14:23 - No.

00:14:24 - It just overtook none this year, didn't it?

00:14:26 (laughing)

00:14:28 - Yeah, so.

00:14:32 - All right, ORMs, SQLAlchemy is ahead, and then there's Django ORM.

00:14:38 Django is tied to Django, SQLAlchemy is broad, so there's that.

00:14:41 and then kind of the none of the ORM world is raw SQL at 16%, that's pretty interesting.

00:14:47 Postgres is the most common database by far at 43%.

00:14:51 Then you have SQLite, which is a little bit of a side case.

00:14:54 You can use it directly, but it's also used for development.

00:14:56 And then MySQL, the MongoDB, and then Redis, and Microsoft SQL Server.

00:15:00 - Yeah, huh.

00:15:01 Actually, SQL Server and Oracle are higher than I would have expected, even though, you know, but that's okay.

00:15:06 - Well, I think what you're gonna find is that there's like certain places, especially in the enterprise, where it's like we're a SQL Server shop or we're an Oracle shop and our DBAs manage our databases.

00:15:17 So here you put in a, you file a ticket and they'll create a database for you.

00:15:21 - Yeah, or there's already an existing database and you're connecting to it or something.

00:15:25 - Yep, yep, exactly.

00:15:27 All right, let's keep going.

00:15:29 Cloud platforms, AWS is at the top.

00:15:31 Then you got Google Cloud at 50%, then GCP, Google Cloud Platform, then Azure, then Heroku, DigitalOcean.

00:15:38 Linode has made it on the list here.

00:15:39 So, you know, former or sometimes sponsor of the show.

00:15:44 It's good for them.

00:15:45 And let's see, how do you run stuff in the cloud?

00:15:48 Let's skip over this.

00:15:49 I think a bunch of interesting, a few more interesting things and we'll call it.

00:15:52 Compared to 2020, Linux and Mac OS popularity decreased by 5% while Windows usage has risen by 10%.

00:16:00 - Wow.

00:16:01 - Yeah, where the Windows people now double, more than double the Mac OS people and are almost rivaling the Linux people.

00:16:07 - That's, I think that's just towards the growth of Python.

00:16:11 I think Python's just making it more into everybody's using it sort of thing.

00:16:16 - Yeah, and there's also Windows subsystem for Linux.

00:16:19 It's been coming along pretty strong, which makes Windows a more viable, more on, have more parity with your cloud targets, right?

00:16:26 - Yeah.

00:16:27 - And Felix out in the audience says, because of WSL?

00:16:29 Yeah, maybe.

00:16:30 - Yeah.

00:16:31 - Okay, let's see, a few more things.

00:16:33 Documentation, it's cool they're asking about what documentation frameworks you use.

00:16:36 This one's interesting to me.

00:16:38 What's your main editor, VS Code or PyCharm?

00:16:41 I ask this question a lot at the end of Talk Python and it feels like VS Code, VS Code, VS Code, VS Code is what people are saying all the time, but it's 35% VS Code, 31% PyCharm.

00:16:49 And Brian, right there for you, 7% Vim.

00:16:51 But. (laughs)

00:16:53 - Okay, yeah.

00:16:55 - I just teased you.

00:16:55 - Yeah.

00:16:56 To be fair, it's both VS Code, it's all three, or top four for me, but yeah.

00:17:03 - Yeah, exactly.

00:17:04 - Well, often you probably just use Vim bindings within the other two, right?

00:17:07 - Yep. - Yeah.

00:17:09 Let's see, I think also, maybe another interesting breakdown is that if you look at the usage scenarios or the type of development done with the editors, you get different answers.

00:17:21 So like for data science, you've got more PyCharm, and for web development, I think, hold on, did I have that right?

00:17:29 - Oh, interesting. - No.

00:17:30 For data science, you have a lot more VS Code.

00:17:32 For web development, you have more PyCharm.

00:17:34 You have a lot less other in data science, AKA Jupiter.

00:17:38 Yeah.

00:17:40 Okay.

00:17:40 How did you learn about your editor?

00:17:42 I fall or first one here is from a friend.

00:17:45 So basically friends like push editors, like drug dealers, like you gotta get out.

00:17:49 What are you doing?

00:17:49 I think getting here.

00:17:50 And I think it's like, if I'm, if I'm watching somebody do something cool, I want to do it also because it looks, yeah, exactly.

00:17:57 You sit down next to your friend.

00:17:58 You're like, how did you do that?

00:17:59 That's awesome.

00:18:00 I want that feature.

00:18:01 Right.

00:18:01 I think you're probably right.

00:18:02 Okay.

00:18:03 Let's just bust down a few things better.

00:18:05 One, do you know, or what do you think about the new developer in residence role?

00:18:09 This is Luca Schlinga that's going on right now.

00:18:12 77% are like, the what?

00:18:14 Never heard of it.

00:18:17 So maybe we got a little more advocacy job to do here, but he's been doing a great job really speeding things up and sort of greasing the wheels of open source contributions and whatnot.

00:18:30 - Yeah, but I'm gonna take it like design because if design's done well, nobody knows it's there.

00:18:35 And I think the same thing.

00:18:37 I think if he's doing his job really, really well, most people won't notice.

00:18:40 Things will just work.

00:18:41 - Yep.

00:18:42 Quick real-time follow-up.

00:18:44 Felix out in the audience says, "I use PyCharm because of Michael." Ah, that's nice.

00:18:48 - So, I think it should have been one of the options in the survey, because of Michael.

00:18:53 - Oh, come on, that's awesome.

00:18:55 But no, let's see.

00:18:57 There's a bunch of questions about that.

00:18:58 And the final thing I want to touch on is Python packaging.

00:19:01 Let's see here, which tools related to Python packaging do you use directly?

00:19:07 And we've talked about Poetry, we've talked about Flit, Pipenv and so on, and 81% of the people are like, I use Pip for packaging.

00:19:18 (laughing)

00:19:21 As opposed to Flit or something.

00:19:22 And then sort of parallel to that is for virtual environment do you use the, what do you use for virtual environments basically?

00:19:28 - Yeah.

00:19:29 percent is like, I just use the built in one or I use the virtual EMV wrapper and then it's like poetry, pip, EMV, talks and so on.

00:19:39 There's a few, I don't know what this is.

00:19:40 Yeah.

00:19:42 Well, I'm, I'm glad they included that because the, the, one of the original questions didn't include like the built in V and V and that's, I think that's what most people use.

00:19:52 So, and it is right.

00:19:54 Yeah, absolutely.

00:19:55 All right.

00:19:55 Well, I think there's, there's more in my progress bar here.

00:19:58 This is a super detailed report.

00:20:00 Link into it in the show notes.

00:20:02 So just go over there and check it out if you want to see all the cool graphs and play with the interactive aspects.

00:20:06 But thanks again to the PSF and JetBranch for putting this together.

00:20:09 It's really good to have this insight and these projections of where things are going.

00:20:14 - Yeah.

00:20:15 Hey, I'm gonna grab the next one.

00:20:17 Ooh, we did this smoothly this time.

00:20:19 Nice.

00:20:20 So, GinConfig is just gin actually, but the project's called GenConfig.

00:20:29 And it's kind of a neat little thing.

00:20:32 It's a different way to think about configuration files.

00:20:35 So like you have your PyProject, or you have .toml files, you could have .ini files.

00:20:43 There's a lot of ways to have configuration files, but Gen takes the perspective of, oh, well, what if you just, what if you're not really into all of that stuff and you're a machine learning person and you just have a whole bunch of stuff to configure and you're changing stuff a lot.

00:21:00 Maybe let's make it easier.

00:21:02 I actually came across this because of Vincent Warmerdam.

00:21:10 He's got an excellent intro to Gin on his CalmCode site.

00:21:15 The idea is you just have for a function that you want to, in your code, you got some code and you have part of it that you want configurable, you just slap a gen configurable decorator onto it, and then all of the parameters to that function are now something that can show up in a config file.

00:21:36 It's not in any file.

00:21:38 I actually don't know the exact syntax, but it just looks like Python.

00:21:41 You just have names.

00:21:46 Like in this example that I'm showing, there's a file called simulate, and there's actually a function called simulate, and a parameter called in samples.

00:21:56 In your config file, you can just say simulate.in_samples equals 100 or something like that.

00:22:02 >> Oh, wow. This is like it basically sets the default parameters for all your functions you're calling.

00:22:09 >> Yeah. The ones that you want to be configurable and you just do that.

00:22:13 Now, you can still set defaults within your code just like you normally would.

00:22:20 Then you can configure the ones that you want to be different than the defaults.

00:22:24 So that's a possibility.

00:22:26 There's a whole bunch of, I'm going to expand this a little bit.

00:22:30 There's a whole bunch of different things that Vincent goes through like required settings.

00:22:36 You can specify like a dot, what is it?

00:22:40 Gin.required as a function and it makes it as your parameter, and then it makes it so that your user has to put it in their config file.

00:22:50 That's cool. Then you can also, if you don't want somebody to configure something, you can mark it as, he's got blacklist the in-samples.

00:23:03 If you want, like in this example, he's got a simulate function with two parameters, random func and in-samples.

00:23:08 You want people to configure the random func, but you don't want them to touch the in-samples, you can say don't do that.

00:23:16 It's neat. There's a whole bunch of cool features around it, like being able to specify different functions.

00:23:23 So you can name things and do it around, like to say, like in his example, he's got random functions.

00:23:29 And if you can specify, you know, one of the other, like a random triangle function, you can specify a function and assign it to that.

00:23:39 He's got named things.

00:23:41 It's a really, it's a interesting way to think about configuration.

00:23:47 And the motivation section of the documentation for Gen says that often modern machine learning experiments require just configuring a whole bunch of parameters and then you're tweaking them and stuff.

00:24:02 And to have that be as easy as possible and as simple as possible, because, and you're gonna add some and take some away and things like that, because some things you want configured and then you decide not to, not having to go through a config parser system and just making it as trivial as possible to add parameters.

00:24:22 I think it's a really cool idea.

00:24:24 - It is a cool idea.

00:24:25 It reminds me of like dependency injection a little bit.

00:24:28 - Yeah.

00:24:29 - You know, where you would like configure, say like if somebody asked for a function that implements this or that goes here, like this is the data access layer to use, or here's the ORM I want you to pick this time.

00:24:41 It's not super common in Python, but it's pretty common in a lot of languages and it feels a little bit like that.

00:24:47 Can we configure stuff so we have these parameters that we might use for testing or something, but they get filled in automatically.

00:24:55 Even FastAPI has that, for example.

00:24:57 Pretty cool.

00:24:59 - Somebody in the audience says, isn't Gin used with Go?

00:25:04 And I'm not sure about that, but Gin is not an officially supported Google product, but it's under the Google like GitHub repo group.

00:25:14 So maybe, I don't know.

00:25:16 - Yeah, maybe.

00:25:17 It does look very Python like though for the config files and that's cool.

00:25:20 - Yeah.

00:25:21 - Good one.

00:25:21 All right, let me switch back before I swap over.

00:25:24 Okay, here we go.

00:25:25 Now, this next one, I think universally will be well accepted.

00:25:30 Although the comment section about it was a little bit rough and tumble.

00:25:33 Nonetheless, I think it should be universally exciting to everyone.

00:25:37 And this comes to us from Eduardo Orochina, who sent over this article that said the, what's it called?

00:25:44 The Python 3.11 performance benchmarks are looking fantastic.

00:25:49 And oh boy, are they.

00:25:50 So we're talking beta code six months out, right?

00:25:54 And still, still we've got some pretty neat stuff.

00:25:56 So this links over to an article with that same title by Michael Larabelle.

00:26:02 Basically says, look, we took a whole bunch of different performance benchmarks for Python and ran them on Python 3.11 beta, which this is the thing I was hinting at, like you might really want to consider this for if you're thinking, should we upgrade from nine to 10?

00:26:18 Maybe you wanna just go straight to 11, right?

00:26:20 I mean, and you know, sort of a side thought, Brian, isn't it awesome that the one that goes like crazy performance, this one goes to 11?

00:26:28 (both laughing)

00:26:31 All right, so they show all the stuff they're testing on like AMD Ryzen 16 core 32 with hyper-threading the motherboard, I mean like down to the motherboard and the chip set and the memory and all that.

00:26:44 So a pretty decent stuff.

00:26:46 And then also the build commands and all sorts of things here.

00:26:50 So pretty repeatable, I think rather than just like, Hey, I ran it and here's a graph without, without axes or something like that.

00:27:00 So you can kind of click through here and you see some pictures and it says, all right, well, there's the PI bench, which I think is like the standard, simple one, it says, look at this, the Python 311 beta is faster than 310, which by the way, was slightly slower than the previous ones, but you know, what is that 10% or something?

00:27:17 So already actually 16% better.

00:27:20 So that's already pretty awesome, but there's a whole bunch of other ones.

00:27:24 They did one called go.

00:27:25 I don't know what these benchmarks are.

00:27:27 This is, I don't think this has anything to do with the language go.

00:27:30 Just the name of the benchmark.

00:27:31 And then there's two to three and chaos.

00:27:33 That one sounds like the funnest, but if you look at this go one, this one is like almost 50% faster, 50% faster.

00:27:41 That's insane.

00:27:42 Right?

00:27:42 Yeah.

00:27:43 Wow.

00:27:43 And you come down to the two to three is, these are all estimates 25, 20% faster, say 40% faster with the chaos one, come down to the float operations and Python three 10 was already better than the others, but this is again, and maybe 30% faster and let's roll into the next page.

00:28:04 You just kind of see this across the board, better, better.

00:28:06 Some of them are super better.

00:28:07 Some are like a little bit better, like path labs better, but not crazy.

00:28:11 Ray tracing is like, again, 40% better here.

00:28:15 And you keep going.

00:28:16 There's another one with this huge crypto IAES, some sort of encryption thing.

00:28:21 So there's just a bunch of, a couple of these are, there's like this one at the end, you're like, oh wait, this one got way worse.

00:28:26 Be careful 'cause it says more is better on this composition.

00:28:30 I guess it's the results here, like how much more computing power do you get per CPU cycle or whatever?

00:28:37 What is that?

00:28:37 That's a massive jump.

00:28:38 You saw a little bit better improvements from 3.8 to 3.9, 3.9 to 3.10, but 3.10 to 11 is like a 40%, yeah, 41% better on the beta before it's even final.

00:28:50 - Wow.

00:28:51 - That's pretty exciting, right?

00:28:52 - That's very exciting.

00:28:53 >> Actually, I'm curious what some of these negative comments are.

00:28:58 But the interesting thing is they run lots of different metrics and lots of different benchmarks.

00:29:05 Having them all be, it's faster, kind of means that, I mean, I take it as your mileage may vary, but it's going to be better for whatever you're doing probably.

00:29:16 >> Yeah. It feels like this is a thing you could just install and things get better.

00:29:20 The negative comments are mostly like, Well, if Python was so slow, it could be made this faster than Python's a crappy language.

00:29:26 It's pretty much I've summed up like 65 comments right there.

00:29:29 By the way, so I interviewed Guido van Rassum and Mark Shannon a little while ago about this whole project about making Python five times not 40% but five times faster. And the goal is to make it a little bit faster like this each release for five releases in a row. And because of compounding, that'll get you to like 5%.

00:29:51 So it looks like they're delivering, which is awesome.

00:29:53 >> Yeah, this is good.

00:29:54 >> Yeah.

00:29:55 >> Cool.

00:29:55 >> All right. Yeah, I think that's it for all of our items.

00:30:00 >> Yeah.

00:30:00 >> Got any extras?

00:30:01 >> No, I was going to pull up the, so yeah, this one goes to 11.

00:30:06 If people don't know that, that's a Spinal Tap reference.

00:30:10 >> Yeah, exactly. All right.

00:30:13 I got a few extras to throw out real quick.

00:30:15 Python 3.10.5 is out with a bunch of bug fixes, like what happens if you create an F string that doesn't have a closing curly and just a bunch of crashes and bug fixes.

00:30:25 So if you've been running into issues, you know, maybe there's a decent amount of stuff in the changelog here.

00:30:30 - Nice.

00:30:31 - People can check that out.

00:30:31 Also real quick, people might, if they're on a Mac, they might check out Raycast, which is a replacement for the command space spotlight thing that has like all these developer plugins.

00:30:41 So you can do like interact with your GitHub repo through command space and stuff.

00:30:46 You can create little macros and there's a bunch of extensions, like this thing's free, at least for not for team, if you're not on a team, but there's a bunch of different things you can get that are cool, like managing processes, doing searches, VS Code project management from command space and whatnot.

00:31:05 The one that I set up is I can now do command space and then just type PyPI and then it'll just search PyPI for whatever I type.

00:31:11 Here's an example, typing PyPI, then fast API, and it'll like pull up all the fast API packages.

00:31:15 So anyway, people might find that fun to check out.

00:31:18 - Yeah, that's cool.

00:31:19 - Yeah, it's pretty neat.

00:31:20 All right, well, I think I'll not talk about my other one.

00:31:23 And then joke, shall we close it out with a joke?

00:31:26 - Yeah, let's do a joke.

00:31:27 - So I think this ties really well back to the PSF survey.

00:31:31 We talked about, well, what framework do you use?

00:31:33 What data science framework do you use?

00:31:34 Or what web framework do you wanna use?

00:31:36 Django or Flask or FastAPI or what?

00:31:39 So here's one that is a pretty interesting analysis.

00:31:43 And the title is, why wouldn't you choose Parrot for your next application?

00:31:46 Not a framework, but literally a parrot.

00:31:49 And this is compared to machine learning.

00:31:52 So it has like this breakdown of features, like a feature table, and it has a parrot, which literally just has a picture of a parrot.

00:31:58 And this is machine learning algorithms with a neural network.

00:32:01 And then it lists off the features.

00:32:03 Learns random phrases, check, check.

00:32:05 Doesn't understand anything about what it learns, check, check.

00:32:10 Occasionally speaks nonsense, check, check.

00:32:13 Is a cute birdie parrot, check, fail.

00:32:15 (laughing)

00:32:18 - Why wouldn't you choose this, Brian?

00:32:20 - This is funny.

00:32:22 I love it.

00:32:24 - Yeah, it's pretty good, pretty good stuff.

00:32:26 - It actually reminds me of, I have to pull up this article.

00:32:28 So I was reading about some machine learning stuff to try to get models even closer and closer to reality.

00:32:35 There's a whole bunch of tricks people do, and then there's some analysis of, sometimes it's actually not doing anything more than just a linear regression.

00:32:45 So, yeah, I simple for an if statement.

00:32:48 Yeah.

00:32:48 Yeah, yeah, yeah, yeah, for sure.

00:32:50 So they're using artificial intelligence to make the computer decide.

00:32:54 No, it's an if statement.

00:32:54 Like it's just computers deciding things the old fashioned way.

00:32:58 Yeah.

00:32:58 Yeah.

00:32:59 Awesome.

00:33:00 All right.

00:33:00 Well, thanks for being here.

00:33:01 Thank you everyone for listening.

00:33:03 Bye.

