WEBVTT

00:00:00.001 --> 00:00:03.880
Hey there, thanks for listening. Before we jump into this episode, I just want to remind you

00:00:03.880 --> 00:00:09.680
that this episode is brought to you by us over at Talk Python Training and Brian through his pytest

00:00:09.680 --> 00:00:14.940
book. So if you want to get hands-on and learn something with Python, be sure to consider our

00:00:14.940 --> 00:00:21.720
courses over at Talk Python Training. Visit them via pythonbytes.fm/courses. And if you're

00:00:21.720 --> 00:00:27.320
looking to do testing and get better with pytest, check out Brian's book at pythonbytes.fm slash

00:00:27.320 --> 00:00:32.280
pytest. Enjoy the episode. Hello and welcome to Python Bytes, where we deliver Python news and

00:00:32.280 --> 00:00:39.160
headlines directly to your earbuds. This is episode 250, recorded September 15th, 2021. I'm

00:00:39.160 --> 00:00:46.000
Michael Kennedy. And I'm Brian Arkin. And I am Grayson. Grayson, welcome to Python Bytes. Yeah, it's a

00:00:46.000 --> 00:00:51.140
pleasure. I've been looking so much forward to joining you guys. Yeah, you've been somebody out

00:00:51.140 --> 00:00:56.220
there who's been giving us a lot of good ideas and topics and helping us learn about new things. So

00:00:56.220 --> 00:00:59.100
you've been a big supporter of the show and now you are part of the show.

00:00:59.100 --> 00:01:00.220
Yeah, I'm hurrah.

00:01:00.220 --> 00:01:01.700
Hurrah.

00:01:01.700 --> 00:01:08.540
Yeah, yeah, hurrah. It's, yeah, it's, I've been looking so much for it. Like, for the first

00:01:08.540 --> 00:01:13.120
time I saw, oh, we can take part in this. I go like, oh, I should try to just get myself

00:01:13.120 --> 00:01:14.600
in there. And here I am.

00:01:14.600 --> 00:01:18.340
Yeah, here you are. Thanks for, thanks for doing that. That's really nice. Tell people a bit

00:01:18.340 --> 00:01:22.160
about yourself before we dive into Brian's first topic.

00:01:22.160 --> 00:01:30.540
Yes. Well, my name is Grayson Daniel and I'm originally from Tanzania, but living in Denmark,

00:01:30.540 --> 00:01:40.040
married with three awesome kids. Currently, I'm a principal data scientist at NTT Data Business

00:01:40.040 --> 00:01:50.480
Business Solution here in Copenhagen. And yeah, so accidentally became a data scientist and somehow

00:01:50.480 --> 00:01:55.660
discovering that I was really, really good at it. Then I just started climbing my way out

00:01:55.660 --> 00:01:59.580
thanks to the Python community and everything that is out there.

00:02:00.240 --> 00:02:04.180
Yeah, awesome. Congratulations. Nice to see you finding your way in the data science world.

00:02:04.180 --> 00:02:08.200
Very cool. Accidentally becoming a data scientist. That's interesting.

00:02:08.200 --> 00:02:12.600
Exactly. All right, Brian, have people been doing things wrong?

00:02:12.600 --> 00:02:13.660
I think so.

00:02:13.660 --> 00:02:17.820
Including race conditions with screen sharing.

00:02:17.820 --> 00:02:24.200
Yeah. So I just couldn't resist this article. There's an article out called Exciting New Ways

00:02:24.200 --> 00:02:30.220
to be Told That Your Python Code is Bad, which is just a great title. And the, the,

00:02:30.220 --> 00:02:38.360
the gist is there's two new pilot errors. So it's pretty simple. There's, but it made me think

00:02:38.360 --> 00:02:45.100
about my code a little bit. And the first one is, is an error to tell you to consider ternary

00:02:45.100 --> 00:02:53.060
expressions. So if you, if you have, if you've got like if condition, and then you assign a variable

00:02:53.060 --> 00:03:00.720
in both the, the, if clause and the else clause, and it's a short thing, maybe, maybe use a conditional

00:03:00.720 --> 00:03:07.260
expression instead and do all in one line, like say, in one, one of the examples in the blog post says,

00:03:07.260 --> 00:03:14.980
um, X equals four, if condition else five. So ternary operators are pretty cool. and they're pretty

00:03:14.980 --> 00:03:20.620
easy to read in Python, but I was just curious what you thought, is this, is a ternary expression

00:03:20.620 --> 00:03:26.700
easier to read or more difficult? Well, for me, I think this is pretty nice. I'm always on the edge

00:03:26.700 --> 00:03:32.740
about the ternary condition, the value, if condition else, other value. A lot of times it starts to

00:03:32.740 --> 00:03:38.660
stretch out to be a little bit verbose. And then it's kind of, you know, it's not entirely obvious.

00:03:38.660 --> 00:03:43.660
One thing I recently learned about, I don't know how it took me so long is the simpler version of that,

00:03:43.800 --> 00:03:51.760
like variable or other option at, without the, the, if else, just the thing or that thing. Right. So for

00:03:51.760 --> 00:03:57.540
example, if you try to get a user back, and you just want to return the user or you want to return,

00:03:57.540 --> 00:04:01.780
uh, maybe you want to check if they're admin. If they are, you return them. Otherwise you might turn

00:04:01.780 --> 00:04:07.260
them back. You could say something to the effect of like, you know, if I say user or a result equals

00:04:07.260 --> 00:04:13.220
user or false or, or something like that. Some, it's not a totally good example here, but this like

00:04:13.220 --> 00:04:19.040
super short version of value where you kind of have the return value and the test and then the fallback,

00:04:19.040 --> 00:04:23.860
the else case, it wouldn't work in the example that I have here, but that one, I actually,

00:04:23.860 --> 00:04:29.600
I started to really like because it's so concise. Yeah. I don't know. I think I'm very traditional.

00:04:29.600 --> 00:04:35.500
I like reading my code up, going down. So whenever it started stretching sideways to me, I'm like,

00:04:35.500 --> 00:04:41.360
Oh, okay. I think I just love the flow of if, then I know I have to look down for the else. Right.

00:04:41.360 --> 00:04:47.120
But now I have to look the else from the other side. Then they, yeah, but I, well, line is,

00:04:47.120 --> 00:04:53.200
good in some places, but in most of the cases, out of readability, I usually just try to avoid them.

00:04:53.200 --> 00:04:57.280
Yeah, I do as well. The one thing I was thinking is interesting on the data science side,

00:04:57.400 --> 00:05:02.420
Jason is a lot of times you're trying to take instead of statements, multiple lines,

00:05:02.420 --> 00:05:06.380
you're trying to create little expressions that you can put together in like little list

00:05:06.380 --> 00:05:11.520
comprehensions and other types of things. And these, these one liners become really valuable there.

00:05:11.520 --> 00:05:16.020
Yeah. Yeah. Definitely. Definitely. Mostly when we're using lambdas everywhere, right?

00:05:16.020 --> 00:05:17.860
Yes, exactly. Yeah, exactly.

00:05:17.860 --> 00:05:25.200
So the, then the next error condition is funny, I think, and it's just the while is used. So it's just a

00:05:25.200 --> 00:05:30.760
warning to say you have a while in your code. And this, the comment really is there's,

00:05:30.760 --> 00:05:38.280
it's just not really usually good to have a while because it can, like never terminate. You can,

00:05:38.280 --> 00:05:43.720
there's no, it's not guaranteed to terminate if you've got a while loop. So, I thought that

00:05:43.720 --> 00:05:48.400
was interesting. I actually was just thinking about this the other day is that I don't,

00:05:48.680 --> 00:05:53.160
I can't even remember the last time I've used a while loop in some code. So I think this,

00:05:53.160 --> 00:05:56.380
I think this is actually pretty good just to warn people they've got a while loop.

00:05:56.380 --> 00:06:01.400
It's pretty strong. It's a pretty strong warning to say you have used this language construct. That's

00:06:01.400 --> 00:06:09.800
a problem. I certainly think it's, I'm on board with the Zen of the idea that most of the time,

00:06:09.800 --> 00:06:14.700
a while means you're doing it wrong. Most of the time you could probably iterate over a collection

00:06:14.700 --> 00:06:20.800
or you could enumerate and then iterate over the index and the value. But there are times where you

00:06:20.800 --> 00:06:27.560
actually need to test for something and then break out and, and to put it as a full on warning just for

00:06:27.560 --> 00:06:34.180
its existence. To me, it seems a bit too far, but it's, it's interesting to say the first one.

00:06:34.380 --> 00:06:37.020
yeah, I think these are both sort of in the eye of the beholder a bit.

00:06:37.020 --> 00:06:43.640
Yeah. Yeah. I actually been in like in our team or in my whole existence, I think we're using while

00:06:43.640 --> 00:06:50.140
only once, and this is on the computer vision. So you are trying to capture videos, from the

00:06:50.140 --> 00:06:56.400
camera and then do analysis with them. So it says, while there's a frame, keep on doing this. And of course,

00:06:56.400 --> 00:07:03.820
you always have to catch, some way to go out of this while loop. But I think that's the

00:07:03.820 --> 00:07:10.200
only time we use while. And we usually want one people says never use while, except when you are

00:07:10.200 --> 00:07:11.040
doing computer vision.

00:07:11.040 --> 00:07:15.340
Interesting. Yeah. And especially if you got things like pandas and stuff, or maybe you shouldn't even

00:07:15.340 --> 00:07:16.180
be looping at all.

00:07:16.180 --> 00:07:17.440
No, no, not at all.

00:07:17.440 --> 00:07:17.880
Not at all.

00:07:17.880 --> 00:07:18.740
Yeah. Interesting.

00:07:18.740 --> 00:07:19.220
Interesting.

00:07:19.220 --> 00:07:25.260
A couple of thoughts from the live stream. So Sam Morley out there says X equals Y or Z is really

00:07:25.260 --> 00:07:29.760
handy for setting instance variables in a class, where they're using nuns. I totally agree.

00:07:29.760 --> 00:07:35.020
Chris May. Hey, Chris says turn air is a great idea if it's simple else. Not so much.

00:07:35.020 --> 00:07:39.700
Yeah. Brandon Brainer out there agrees with you,

00:07:39.700 --> 00:07:46.320
that the traditional if else is probably easier to read. Henry Schreider says turn air is much

00:07:46.320 --> 00:07:51.880
better for type type checking as well. Okay. Yeah. Probably because the type of print is more

00:07:51.880 --> 00:07:58.480
obvious there. So yeah, pretty neat, pretty neat. Also speaking of neat stuff, what if you could have

00:07:58.480 --> 00:08:04.660
all sorts of little placards and things about your read me? So here is a project I want to tell people

00:08:04.660 --> 00:08:12.040
about called GitHub read me stats and get up read me stats is pretty interesting. It's, comes to us

00:08:12.040 --> 00:08:16.260
from Poma. So thank you, Poma, for sending that in. And the description says it's

00:08:16.260 --> 00:08:23.200
dynamically, dynamically generated stats for your GitHub read me's, but I feel like that scope is

00:08:23.200 --> 00:08:29.600
actually way too short. It's dynamically generated little placards for wherever you want to put them

00:08:29.600 --> 00:08:34.940
on the internet. You might want to put them on a project read me so the project can describe itself

00:08:34.940 --> 00:08:40.400
more dynamically, but you might also want to put it on your about page on your blog or something like

00:08:40.400 --> 00:08:45.260
that. So give you all a sense of what's going on here. If you come down here, you can have these

00:08:45.260 --> 00:08:49.680
different, there's a whole bunch of different options. You can get like a GitHub stats card.

00:08:49.680 --> 00:08:56.220
You can get extra pins. You can get the languages. Like for example, we could say what the languages

00:08:56.220 --> 00:09:02.420
you are most likely to use across all of your repositories, the walk of time week stats.

00:09:02.420 --> 00:09:06.960
there's a bunch of themes and visualizations and stuff. So I think the best way to get a sense of

00:09:06.960 --> 00:09:11.380
this is to see an example. So I put a couple of projects in my own self in here to kind of pick

00:09:11.380 --> 00:09:18.680
on me. So here's a image that I could add. I'll zoom that in. So I have this Python switch package

00:09:18.680 --> 00:09:23.640
that I created a while ago when Python didn't have anything like a switch statement. So I wanted to add

00:09:23.640 --> 00:09:28.340
a switch statement to the Python language. So I did. And apparently here are the stats of it. These are live,

00:09:28.380 --> 00:09:33.300
right. If I refresh it, it'll regenerate it. And it gives you a little bit of info about the project,

00:09:33.300 --> 00:09:40.180
like the name and it's little description. That's mostly Python. As it says, it has 238 stars and 18

00:09:40.180 --> 00:09:45.120
forks, which is pretty awesome. So all I got to do to get that is to go up here and say, I want to get

00:09:45.120 --> 00:09:50.100
the pin and I want to have the username be Mike C. Kennedy and the repo be Python dash switch.

00:09:50.100 --> 00:09:54.880
And then this returns an image that I can put, like I said, anywhere, right? If you put this as the image

00:09:54.880 --> 00:09:59.980
source, it'll go, it's not just like it'll only render on GitHub. It'll go wherever you put it.

00:09:59.980 --> 00:10:04.780
So I think that that's pretty cool. Another example would be your stats. I'll refresh this

00:10:04.780 --> 00:10:09.620
because your little animation, I can get my Michael Kennedy's GitHub stats. Apparently I have an A plus

00:10:09.620 --> 00:10:14.520
plus, but a two thirds closed red ring. I'm not totally sure what the ring means, but kind of a

00:10:14.520 --> 00:10:19.980
cool little graphic here. Apparently I've got 3.5,000 stars, which surprised me. A lot of commits,

00:10:20.180 --> 00:10:27.220
73 PRs, 103 issues, 23 repositories that contributed to. I don't know if that's this year or maybe this

00:10:27.220 --> 00:10:31.160
year, who knows? Or total. Anyway, that's kind of cool, right? You could put that on your blog or

00:10:31.160 --> 00:10:36.320
somewhere where you're trying to talk about yourself, like you're trying to get hired or you do consulting

00:10:36.320 --> 00:10:40.520
or something. And then the third one here is you can say your most used languages. So apparently I've

00:10:40.520 --> 00:10:46.640
most used JavaScript, which is very much not true, but I've probably committed a ton of like

00:10:46.640 --> 00:10:52.320
node modules to some projects that I don't actually want to have to, you know, re-NPM install.

00:10:52.320 --> 00:10:55.900
I want to just make sure they're there for like a course or something like that. Right. But it'll show

00:10:55.900 --> 00:11:01.420
you through the breakdown of your various languages and whatnot. So that gives you kind of a sense of

00:11:01.420 --> 00:11:06.280
what these are all about, what the idea of this thing is. You generate these little cards and you can

00:11:06.280 --> 00:11:09.720
put them, like I said, wherever you want. What do you think? Like on our resume page.

00:11:09.720 --> 00:11:17.820
Yeah. Yeah. I really love it. But it's kind of sad because some most of our time is spent in GitLab and all

00:11:17.820 --> 00:11:24.900
this other and all our commits are done there. And then when I come to my GitHub, it looks so empty and it makes my heart sick.

00:11:24.900 --> 00:11:27.400
What has President been doing? He hasn't committed anything for a week.

00:11:27.400 --> 00:11:30.840
Yeah. Yeah. So it's really, really awesome.

00:11:30.840 --> 00:11:36.120
Yeah. Cool. Yeah. I guess it really only works for GitHub and that's where it's really handy, but still pretty nice.

00:11:36.120 --> 00:11:40.680
Do you know if the stats are only on public repos or are they public and private?

00:11:40.680 --> 00:11:55.720
It's a good question. So you can choose as a user, if you go down here and like the stuff that shows in your contributions in your GitHub profile, you can check whether you want public and private contributions to appear in that little green.

00:11:55.720 --> 00:11:56.520
Okay.

00:11:56.520 --> 00:12:00.200
How much contributions have you made this year by day?

00:12:00.200 --> 00:12:00.800
Okay.

00:12:00.800 --> 00:12:04.480
So maybe it depends on whether you've checked that or not. You know what I mean?

00:12:04.480 --> 00:12:05.000
Probably.

00:12:05.000 --> 00:12:06.480
But it might not.

00:12:06.480 --> 00:12:07.120
Cool.

00:12:07.120 --> 00:12:09.480
Anyway. Yeah. Pretty cool. A little project.

00:12:10.200 --> 00:12:11.960
Brayson, you're up next. What you got?

00:12:11.960 --> 00:12:20.080
Yes. Yes. Yes. So I got this one here. Actually, this is, it's something that has been covered, not covered, covered, but been mentioned.

00:12:20.080 --> 00:12:31.280
So I could see it in footnotes as when I searched through. Actually, Brian, you covered it in episode 182 with hypermodern Python.

00:12:31.280 --> 00:12:40.100
I think it's just a name that was there. Yeah. But it was not mentioned. I think it's just been, oh, this could be used in this hypermodern Python way of doing awesome.

00:12:40.100 --> 00:12:52.860
stuff. And then in episode 248, it was mentioned again with hypermodern Python cookie cutter, but it's just like a footnote of, oh, it use Nox instead of Tox.

00:12:52.860 --> 00:13:11.100
So this is really, really an awesome tool that we've been using recently because when we do machine learning, we are encountering a lot of problems where we have to test how our models are performing and how are they ethical.

00:13:11.240 --> 00:13:23.120
So the test, when we do tests of our pipelines, we're not just testing that the models are accurate or they are doing the things that they're doing, like the API.

00:13:24.000 --> 00:13:39.960
So we actually, you cannot just testing our API, you need to have keys and all those. We actually also have to test about the ethicalness of our models. So like if we say our models does not segregate between, let's say, gender.

00:13:39.960 --> 00:13:48.560
So we test, we have counterfactual tests where we send different genders and see what are the models responding. Are they responding with the similar results?

00:13:48.560 --> 00:14:05.240
So when we say it doesn't segregate between sexual orientation, then we send different inputs where it pretends to be either straight or homosexual and just try to say, do we receive the same results?

00:14:05.240 --> 00:14:13.680
So we've been trying to run this very automatic way. And before that, we use a lot of TOCs.

00:14:13.680 --> 00:14:24.000
But the problem is, TOCs, the way of defining your TOCs is just not Pythonic. Like you don't write this Pythonic way of doing things.

00:14:24.000 --> 00:14:34.680
It's similar to, we had this issue with make. I really could not debug make. So whenever I made a make file, I copied from someone else and then changed some things.

00:14:34.680 --> 00:14:40.120
Because anything I touched in, I have a syntax error. Oh, this thing is not in the right place.

00:14:40.120 --> 00:14:48.160
And then I came across evoc, which it was almost like Pythonic. I can write everything in a Python way.

00:14:48.160 --> 00:14:58.160
So this Nox is actually similar to what evoc did to make, but it's doing exactly to TOCs.

00:14:58.160 --> 00:15:12.480
So in this case, you can create simple pipelines like this one here, where it creates a session, installs the package that needs to be installed, and then run whatever experiments you're trying to run.

00:15:12.480 --> 00:15:29.920
And this is really, really handy. At least we found it really handy because you can select that it actually use the KONDA environment. Like the KONDA world has been used a lot in data science. So you can say first create a KONDA virtual environment, install these packages, and then test them.

00:15:29.920 --> 00:15:47.360
So what I like about this tool, it's almost similar to pytest. Like if you know how pytest works, then you know how this guy works because there's a parameterization. And whenever you run tests, you can select which part of station needs to be run.

00:15:47.360 --> 00:16:08.360
Like in pytest, we use the -k run this kind of test. And here you use the same thing, -k run only these kind of builds, right? So it is dark. We really, really enjoy that. Like you can pass in environment variable. But I actually wanted to show you the coolest part here.

00:16:08.360 --> 00:16:09.800
-yeah. -yeah, this does look nice.

00:16:09.800 --> 00:16:31.360
-it's just amazing. I cannot, I cannot, I mean, the guy who created this, I just give him all the thumbs up with everything that they have come up with. So it's really, really handy if you're not using it, or if you're using TOX, you should probably consider changing to NOX.

00:16:31.360 --> 00:16:42.800
-that's cool. If you can, for example, write that you have a test and then say, I want this, you know, as a decorator, sort of parameterized. I want this to run on 2736, 3738, and it'll do that, right?

00:16:42.800 --> 00:17:01.360
-yeah. So, so, so, so you can see, it's like this example here, right? So you can see we are parameterizing different Django. So we want it to first install this version and then run the tests, right? And then later it will come and take this version and run the test. But then in the command line, you can

00:17:01.360 --> 00:17:23.360
actually just select it to run only the test with this guy and skip this guy here. So it's really, I mean, it's the ability that it, it gives you, it's incredible. So if I could see, so you can see like here, right here, right? This is exactly what like it goes into the py test-ish world.

00:17:23.360 --> 00:17:33.360
-I see. So you can run it and say, don't, don't run the linter or just lint it, don't run the test or test. You can even put Python expressions. It looks like tests and not lint, for example.

00:17:33.360 --> 00:17:38.360
-Is it, I mean, it's just, it's just, insanely great.

00:17:38.360 --> 00:17:41.360
-Nice. Brian, what do you think of this?

00:17:41.360 --> 00:17:52.360
-Oh, I really like NOX. It's neat. the parameter is, the use of parameters is really cool. and the example of like using a couple of different Django's is good, but you can also,

00:17:52.360 --> 00:18:21.360
uh, build up, matrices of testing easily with like a couple, you can stack these so you can have two parameters together. it's, it's a pretty cool project. I just really love talks. So I haven't, I haven't switched. there's, but, but I know that the, you know, there's, there's like invoke also people are using invoke for automation, but people are using NOX for, more than just automating testing.

00:18:21.360 --> 00:18:26.360
-You can automate, really whatever you want to, you can run. It's just running a command, right? So.

00:18:26.360 --> 00:18:28.360
-Nice. Yeah.

00:18:28.360 --> 00:18:31.360
-Prayson, you've got a lot of comments from the live stream on this one.

00:18:31.360 --> 00:18:43.360
Henry Schreider says, "I love NOX. TOX is mired in backwards, compatibility defaults. It is hard to tell what's actually doing. Whereas NOX is simple. It doesn't hide or guess stuff. It's just program like pytest." Sounds great.

00:18:43.360 --> 00:18:49.360
Sam Morley says, "This is the only way to write a make file with invoke."

00:18:49.360 --> 00:18:54.360
-I had, I mean, I had, I had that one.

00:18:54.360 --> 00:19:00.360
-Yeah. Henry also says, "The PyPA projects have some very powerful NOX files, CI build, wheel, pip, and so on." which is good. And then Sam Morley also has a question for you. "Can it also, NOX, run external tools? For example, build a C extension or run a C test suite?"

00:19:00.360 --> 00:19:05.360
-Oh, I don't know, Brian. -I don't know that either. I assume so.

00:19:05.360 --> 00:19:10.360
-It definitely can, because Python has sub-process, but can it do it without you forcing that into it? You know, but you could put technically, you know, Python call this other command.

00:19:10.360 --> 00:19:12.360
-Oh, I don't know.

00:19:12.360 --> 00:19:13.360
-Oh, I don't know.

00:19:13.360 --> 00:19:14.360
-Oh, I don't know.

00:19:14.360 --> 00:19:15.360
-Oh, I don't know.

00:19:15.360 --> 00:19:16.360
-Oh, I don't know.

00:19:16.360 --> 00:19:17.360
-Oh, I don't know.

00:19:17.360 --> 00:19:18.360
-Oh, I don't know.

00:19:18.360 --> 00:19:19.360
-Oh, I don't know.

00:19:19.360 --> 00:19:20.360
-Oh, I don't know.

00:19:20.360 --> 00:19:21.360
-Oh, I don't know.

00:19:21.360 --> 00:19:22.360
-Oh, I don't know.

00:19:22.360 --> 00:19:23.360
-Oh, I don't know.

00:19:23.360 --> 00:19:24.360
-Oh, I don't know.

00:19:24.360 --> 00:19:25.360
-Oh, I don't know.

00:19:25.360 --> 00:19:26.360
-Oh, I don't know.

00:19:26.360 --> 00:19:31.360
-You could put technically, you know, Python call this other command, right?

00:19:31.360 --> 00:19:36.360
-Well, there's an example in one of the, in the tutorial of, of calling CMake.

00:19:36.360 --> 00:19:39.360
-Yeah, I saw the CMake as well. So that probably counts, right?

00:19:39.360 --> 00:19:40.360
-Yeah.

00:19:40.360 --> 00:19:41.360
-Yeah, I think that would count.

00:19:41.360 --> 00:19:43.360
-So it's just running a command.

00:19:43.360 --> 00:19:44.360
-Yeah.

00:19:44.360 --> 00:19:45.360
-Yeah.

00:19:45.360 --> 00:19:46.360
-Of course.

00:19:46.360 --> 00:19:48.360
-And then, Brian, Brandon out there has a comment for you. New lights look great.

00:19:48.360 --> 00:19:49.360
- Thanks.

00:19:49.360 --> 00:19:50.360
-I agree with him.

00:19:50.360 --> 00:19:54.360
I actually need to adjust my, my camera a little bit, which is a little bit off on the lights.

00:19:54.360 --> 00:19:55.360
Very cool.

00:19:55.360 --> 00:19:56.360
-All right.

00:19:56.360 --> 00:19:58.360
-let's see. I think Brian, you got the next one.

00:19:58.360 --> 00:19:59.360
-Oh, okay.

00:19:59.360 --> 00:20:01.360
I forgot what I was talking about.

00:20:01.360 --> 00:20:02.360
yeah.

00:20:02.360 --> 00:20:05.360
So I've got the old document there.

00:20:05.360 --> 00:20:07.360
So I've got a couple of things I wanted to talk about.

00:20:07.360 --> 00:20:11.360
So this is, one of those extra, extra, extra things, but there's just two.

00:20:11.360 --> 00:20:18.360
a couple of things around dealing with text and I've been playing with my blog a little bit lately,

00:20:18.360 --> 00:20:24.360
not really writing much, which is a problem, but, but actually dealing with some of the old things.

00:20:24.360 --> 00:20:26.360
-The whole thing you wrote looks really good now.

00:20:26.360 --> 00:20:27.360
-

00:20:27.360 --> 00:20:33.360
Well, I'm, I'm, I'm doing some, automated, trying to automate some of the parsing of some of the old stuff.

00:20:33.360 --> 00:20:42.360
So I grabbed a whole bunch of blog posts from, from, WordPress and which, yeah, you can, nobody needs to throw eggs at me.

00:20:42.360 --> 00:20:51.360
I'm already switching, and using Hugo now, but, but I've got a whole bunch of files that I automatically generated markdown files, but there there's problems with them.

00:20:51.360 --> 00:20:53.360
So I have to, I have to keep track.

00:20:53.360 --> 00:20:54.360
So I've got some scripts.

00:20:54.360 --> 00:20:56.360
So they, a couple of tools are helping me.

00:20:56.360 --> 00:21:10.360
Python front matter is, is a really pretty, it's a package that's, it's just a really small package, but it, all it does is really takes, like YAML style, front matter stuff.

00:21:10.360 --> 00:21:14.360
And, and parses those, you could just load it.

00:21:14.360 --> 00:21:23.360
So you load, I'm using a markdown files of the example shows a text file and, and you can get at all the pieces of the file, like the content and stuff.

00:21:23.360 --> 00:21:27.360
But it, for instance, I can grab, I can grab the title.

00:21:27.360 --> 00:21:38.360
You can look at what the keys are, but so for blog posts, I've got, you know, tags and, the date and it's all, it's all converted to, Python objects.

00:21:38.360 --> 00:21:46.360
So, if I have a date, listed in, a blog post, it'll show up as a date time object.

00:21:46.360 --> 00:21:49.360
So you can do math on it and all sorts of stuff.

00:21:49.360 --> 00:21:50.360
So this is pretty cool.

00:21:50.360 --> 00:21:53.360
it's really small, but super handy for it.

00:21:53.360 --> 00:21:54.360
For what I need.

00:21:54.360 --> 00:21:55.360
So it's good.

00:21:55.360 --> 00:21:56.360
Yeah.

00:21:56.360 --> 00:21:57.360
This looks nice.

00:21:57.360 --> 00:22:04.360
The other tool I wanted to talk about, which is even a tinier use case, I think is, called FTFY fixes text for you.

00:22:04.360 --> 00:22:10.360
and really it just takes bad Unicode conversions and makes them good.

00:22:10.360 --> 00:22:22.360
So it takes like common problems with Unicode conversions and, fixes them in like where it looks like you have Greek or Russian letters or something instead of a space or apostrophe or something like that.

00:22:22.360 --> 00:22:23.360
Yeah.

00:22:23.360 --> 00:22:31.360
Like the, one of the first example, a quick example, there's like, yeah, like this weird AE character and really it was intended to be a check mark.

00:22:31.360 --> 00:22:34.360
So it just converted it to the proper, what it was.

00:22:34.360 --> 00:22:35.360
What it was.

00:22:35.360 --> 00:22:37.360
I'm not sure how it's doing this, but it's pretty neat.

00:22:37.360 --> 00:22:38.360
That is very cool.

00:22:38.360 --> 00:22:43.360
the, the, this gets me all the time with stuff like goes from word.

00:22:43.360 --> 00:22:49.360
If I'm converting from word or something, or copying, copy and pasting, or other things.

00:22:49.360 --> 00:22:57.360
There's a lot of different quote marks that word processors put in and like, it just ends up being gross in a lot of places.

00:22:57.360 --> 00:22:58.360
Yeah.

00:22:58.360 --> 00:23:11.360
And, having that converted to just the, the, one example is, the Mona Lisa doesn't have eyebrows, but instead of the just apostrophe T it's this weird, ugly, big Unicode thing.

00:23:11.360 --> 00:23:12.360
yeah.

00:23:12.360 --> 00:23:15.360
So just, just replacing that with an apostrophe is a good idea.

00:23:15.360 --> 00:23:16.360
Yeah.

00:23:16.360 --> 00:23:17.360
Nice.

00:23:17.360 --> 00:23:20.360
Does it change single quotes to double quotes and stuff like that as well?

00:23:20.360 --> 00:23:22.360
I don't know.

00:23:22.360 --> 00:23:26.360
I don't know if it should either.

00:23:26.360 --> 00:23:27.360
I'm not sure.

00:23:27.360 --> 00:23:29.360
Yeah, this is cool.

00:23:29.360 --> 00:23:32.360
So you just run this across like your Markdown files or something like that.

00:23:32.360 --> 00:23:33.360
Yeah.

00:23:33.360 --> 00:23:40.360
So, I'm not using it really for the blog stuff, but there's, there was some other text parsing I was doing where I was scraping some information from somewhere.

00:23:40.360 --> 00:23:43.360
And it just was just gross.

00:23:43.360 --> 00:23:46.360
there's a, had a bunch of gross Unicode stuff in it.

00:23:46.360 --> 00:23:51.360
And I just wanted to, you know, have something easy to just convert it quickly.

00:23:51.360 --> 00:23:53.360
And this does the trick.

00:23:53.360 --> 00:23:54.360
Yeah.

00:23:54.360 --> 00:23:55.360
Yeah.

00:23:55.360 --> 00:23:56.360
Very cool.

00:23:56.360 --> 00:23:57.360
Nice one.

00:23:57.360 --> 00:23:58.360
Nice finds.

00:23:58.360 --> 00:23:59.360
So I'd follow up on that.

00:23:59.360 --> 00:24:03.360
I was playing with my, Oh, my posh shell and the new windows terminal and the new windows

00:24:03.360 --> 00:24:09.360
power shell on windows 11 earlier this week, trying to set up some testing over there.

00:24:09.360 --> 00:24:13.360
And I found they have all these cool themes that show you all kinds of neat stuff.

00:24:13.360 --> 00:24:19.360
So you can see like, the get branch you're on and they've got these little cool arrows and all these colors.

00:24:19.360 --> 00:24:24.360
And they'll even do certain things for like showing the version of the Python virtual environment.

00:24:24.360 --> 00:24:25.360
And they'll be able to do certain things for you to do.

00:24:25.360 --> 00:24:26.360
And they'll be able to do certain things for you to do.

00:24:26.360 --> 00:24:27.360
And they'll be able to do certain things for you to do.

00:24:27.360 --> 00:24:28.360
And they'll be able to do certain things for you to do.

00:24:28.360 --> 00:24:29.360
And they'll be able to do certain things for you to do.

00:24:29.360 --> 00:24:30.360
And they'll be able to do certain things for you to do.

00:24:30.360 --> 00:24:32.360
And they'll be able to do certain things for you to do.

00:24:32.360 --> 00:24:33.360
And they'll be able to do certain things for you to do.

00:24:33.360 --> 00:24:34.360
And they'll be able to do certain things for you to do.

00:24:34.360 --> 00:24:35.360
And they'll be able to do certain things for you to do.

00:24:35.360 --> 00:24:36.360
And they'll be able to do certain things for you to do.

00:24:36.360 --> 00:24:37.360
And they'll be able to do certain things for you to do.

00:24:37.360 --> 00:24:38.360
And they'll be able to do certain things for you to do.

00:24:38.360 --> 00:24:39.360
And they'll be able to do certain things for you to do.

00:24:39.360 --> 00:24:40.360
And they'll be able to do certain things for you to do.

00:24:40.360 --> 00:24:42.360
Posh Shell is tested on Nerd Fonts.

00:24:42.360 --> 00:24:49.360
But Nerd Fonts is full of all these amazing developer fonts that have font ligatures and all sorts of cool stuff.

00:24:49.360 --> 00:24:50.360
And they're all free.

00:24:50.360 --> 00:24:53.360
There's like 50 developer fonts and terminal fonts and stuff.

00:24:53.360 --> 00:24:54.360
So, yeah.

00:24:54.360 --> 00:24:56.360
One more thing along those lines to check out.

00:24:56.360 --> 00:24:57.360
Very neat.

00:24:57.360 --> 00:25:02.360
But what I wanted to talk about is stealing this idea from Preycin that he was going to cover.

00:25:02.360 --> 00:25:03.360
But I got to it.

00:25:03.360 --> 00:25:05.360
Got to it before.

00:25:05.360 --> 00:25:10.360
So, there's this new project that recently is making traction.

00:25:10.360 --> 00:25:13.360
It's been around for a couple of months.

00:25:13.360 --> 00:25:15.360
Even, I guess it's about two years old, honestly.

00:25:15.360 --> 00:25:20.360
But somehow it got discovered and is now getting some traction called Empire.

00:25:20.360 --> 00:25:22.360
M-P-I-R-E.

00:25:22.360 --> 00:25:26.360
And the idea is it's a Python package for easy multiprocessing.

00:25:26.360 --> 00:25:30.360
It's like the multiprocessing module, but faster, better, stronger.

00:25:30.360 --> 00:25:32.360
It's like the Bionic one.

00:25:32.360 --> 00:25:37.360
So, the acronym stands for multiprocessing is really easy.

00:25:37.360 --> 00:25:38.360
I love that thought.

00:25:38.360 --> 00:25:47.360
And it primarily works around taking multiprocessing pools, but then adding on some features that make it more efficient.

00:25:47.360 --> 00:25:53.360
For example, instead of creating a clone, a copy of every object that gets shared across all the multiprocessing,

00:25:53.360 --> 00:25:55.360
it'll actually do copy on write.

00:25:55.360 --> 00:25:58.360
So, it won't make a copy of the objects you're just reading.

00:25:58.360 --> 00:26:00.360
It'll only make a copy of the ones you're changing.

00:26:00.360 --> 00:26:06.360
So, if you start like 10 sub-processes, you might not have to make copies, 10 copies of that, which can make it faster.

00:26:06.360 --> 00:26:11.360
It comes with cool like progress bar functionality and insight to how much progress it's made.

00:26:11.360 --> 00:26:13.360
It's also supposed to be faster.

00:26:13.360 --> 00:26:14.360
I'll talk about it in a second.

00:26:14.360 --> 00:26:18.360
But it has map, map unordered, and things like that.

00:26:18.360 --> 00:26:19.360
Interim maps.

00:26:19.360 --> 00:26:22.360
The copy on write I talked about, which is cool.

00:26:22.360 --> 00:26:28.360
Each worker has its own state and some like startup shutdown type of behaviors you can add to it.

00:26:28.360 --> 00:26:32.360
It has integration with TQDM, the progress bar.

00:26:32.360 --> 00:26:34.360
What else does it have?

00:26:34.360 --> 00:26:35.360
Like I said, some insights.

00:26:35.360 --> 00:26:39.360
It has user-friendly exception handling, which is pretty awesome.

00:26:39.360 --> 00:26:47.360
You can also do automatic chunking to break up blocks of queues across sub-processes and multiprocessing,

00:26:47.360 --> 00:26:49.360
including NumPy arrays.

00:26:49.360 --> 00:26:54.360
You can adjust the maximum number of tasks or restart them after a certain number.

00:26:54.360 --> 00:26:57.360
Restart the worker processes after a certain amount of work.

00:26:57.360 --> 00:27:02.360
So, in case there's like a memory leak or it just hasn't cleaned it up, you can sort of work on that.

00:27:02.360 --> 00:27:05.360
And create pools of these workers with like a daemon option.

00:27:05.360 --> 00:27:08.360
So, they're just up and running and they grab the work.

00:27:08.360 --> 00:27:09.360
Let's see.

00:27:09.360 --> 00:27:15.360
It can be pinned to a specific or a range, specific CPU or a range of CPUs,

00:27:15.360 --> 00:27:19.360
which can be useful for cache invalidation.

00:27:19.360 --> 00:27:23.360
So, if you're getting a lot of like thrashing and moving across different CPUs,

00:27:23.360 --> 00:27:27.360
then the caches have to read different data, which is of course way, way, way slower.

00:27:27.360 --> 00:27:28.360
So, a bunch of neat things.

00:27:28.360 --> 00:27:30.360
I'll show you a quick example.

00:27:30.360 --> 00:27:35.360
So, in the docs, if you pull their page up, there's a multiprocessing example.

00:27:35.360 --> 00:27:40.360
So, you write a function and then you say with pool processes equals five as pool, pool.map,

00:27:40.360 --> 00:27:44.360
and give the function and the data iterable and it runs each one through there.

00:27:44.360 --> 00:27:47.360
With the empire one, it's quite simple, similar.

00:27:47.360 --> 00:27:51.360
So, you just create a empire worker pool and you specify the number of jobs.

00:27:51.360 --> 00:27:54.360
And it says the difference of the code or small, you don't have to relearn anything,

00:27:54.360 --> 00:27:59.360
but you get things like all the stuff I talked about, the more efficient shared objects,

00:27:59.360 --> 00:28:01.360
the progress bar, if you want.

00:28:01.360 --> 00:28:07.360
You can just say progress bar equals true and you automatically get a cool little TQDM progress bar.

00:28:07.360 --> 00:28:15.360
You get startup and shutdown methods for the workers so you can initialize them and what else you need to do.

00:28:15.360 --> 00:28:17.360
So, yeah, pretty cool little project.

00:28:17.360 --> 00:28:20.360
And benchmarks show it down here at the bottom in the fast area.

00:28:20.360 --> 00:28:22.360
So, you all can check that out.

00:28:22.360 --> 00:28:24.360
Grayson, what did you like about this?

00:28:24.360 --> 00:28:31.360
Well, I think it's also going to transition really well to the other topic that I have.

00:28:31.360 --> 00:28:38.360
I like when one creates an API that you can just easily plug to your existing code.

00:28:38.360 --> 00:28:39.360
Yeah.

00:28:39.360 --> 00:28:44.360
So, you can just import this as this and do not change the entire code and then you take care of that.

00:28:44.360 --> 00:28:48.360
You know, like writing your code in a way that one can just plug and play.

00:28:48.360 --> 00:28:50.360
That's the amazing thing.

00:28:50.360 --> 00:28:55.360
So, it's easy that you don't have to relearn a lot of stuff, but it just gives you the power that you need.

00:28:55.360 --> 00:28:58.360
So, this is why we move toward this one.

00:28:58.360 --> 00:29:01.360
So, we gain the power without changing much of our code.

00:29:01.360 --> 00:29:02.360
Yeah.

00:29:02.360 --> 00:29:03.360
Yeah, definitely.

00:29:03.360 --> 00:29:04.360
I love that as well.

00:29:04.360 --> 00:29:08.360
You know, I think of like HTTPX and requests for a while.

00:29:08.360 --> 00:29:10.360
I think they diverged at some point, but yeah.

00:29:10.360 --> 00:29:13.360
Let's see some feedback from audience real quick.

00:29:13.360 --> 00:29:15.360
I'll jump back to the nerd fonts.

00:29:15.360 --> 00:29:17.360
Chris says they're amazing.

00:29:17.360 --> 00:29:21.360
Henry Schreiner says, "Fish shell plus Fisher plus oh my fish."

00:29:21.360 --> 00:29:26.360
And then the theme, "Bob the fish plus sauce code pro nerd font is fantastic."

00:29:26.360 --> 00:29:27.360
Oh my gosh.

00:29:27.360 --> 00:29:28.360
I have no idea.

00:29:28.360 --> 00:29:29.360
I've explored this yet.

00:29:29.360 --> 00:29:30.360
These are great names.

00:29:30.360 --> 00:29:31.360
Yeah.

00:29:31.360 --> 00:29:32.360
You're going to see me on a serious rat hole.

00:29:32.360 --> 00:29:34.360
I'm going to be losing like the rest of the day.

00:29:34.360 --> 00:29:35.360
No, I'm afraid.

00:29:35.360 --> 00:29:36.360
To just fiddle with that, I'm afraid.

00:29:36.360 --> 00:29:41.360
Well, I keep on messing my terminal every time I start fiddling around, right?

00:29:41.360 --> 00:29:42.360
That's right.

00:29:42.360 --> 00:29:47.360
Because I'm using WSL, Windows Subsystem, Linux, right?

00:29:47.360 --> 00:29:48.360
Right.

00:29:48.360 --> 00:29:51.360
So, whenever I fix something, then I get it right.

00:29:51.360 --> 00:29:54.360
And before I know it, I broke it again.

00:29:54.360 --> 00:29:56.360
And so, but yeah, it looks really awesome.

00:29:56.360 --> 00:29:57.360
Yeah.

00:29:57.360 --> 00:29:58.360
Fantastic.

00:29:58.360 --> 00:30:03.360
And then on topic, what I was most recently talking about, Chris Mesa's "Whoa, Empire looks

00:30:03.360 --> 00:30:04.360
nice."

00:30:04.360 --> 00:30:08.360
Alvaro asks, "Will it help to get logging working in multiprocessing?"

00:30:08.360 --> 00:30:11.360
I don't know that it'll make any change.

00:30:11.360 --> 00:30:13.360
I mean, it really is mostly still multiprocessing.

00:30:13.360 --> 00:30:14.360
So, probably not.

00:30:14.360 --> 00:30:15.360
Yeah.

00:30:15.360 --> 00:30:16.360
Yeah.

00:30:16.360 --> 00:30:17.360
Very cool.

00:30:17.360 --> 00:30:18.360
All right.

00:30:18.360 --> 00:30:19.360
Grayson, I think you got the last one here.

00:30:19.360 --> 00:30:20.360
Yes.

00:30:20.360 --> 00:30:21.360
Yes.

00:30:21.360 --> 00:30:22.360
Yes.

00:30:22.360 --> 00:30:24.360
So, I have this awesome tool here.

00:30:24.360 --> 00:30:25.360
It's called Scotch.

00:30:25.360 --> 00:30:31.360
It's really like a mixture of scikit-learn and torch.

00:30:31.360 --> 00:30:36.360
This is really, really cool bit, whereas we were talking about building an API that it's

00:30:36.360 --> 00:30:37.360
easy to integrate.

00:30:37.360 --> 00:30:44.360
So, if someone already knows scikit-learn and a bit of torch, then you don't really need

00:30:44.360 --> 00:30:48.360
to learn anything in this tool because everything just fits in together.

00:30:48.360 --> 00:30:56.360
So, basically, when you're using scikit-learn, so if you are not familiar with scikit-learn,

00:30:56.360 --> 00:31:03.360
it's just this, what we call it, the must-have toolkit for data scientists, because here they

00:31:03.360 --> 00:31:09.360
have created a really good tool with a really good API where you can build an entire pipeline

00:31:09.360 --> 00:31:17.360
from cleaning your data to building interesting models and everything like that.

00:31:17.360 --> 00:31:23.360
But the biggest problem which we keep on experiencing when working with scikit-learn is when it comes

00:31:23.360 --> 00:31:29.360
to neural networks, that you really don't have a lot of power to customize your networks in

00:31:29.360 --> 00:31:38.360
the way that you will, like, it's very limited with this input that you already have here.

00:31:38.360 --> 00:31:44.360
And in most cases, someone says, "Well, just create your own neural network classifier

00:31:44.360 --> 00:31:50.360
or a regressor and then wrap it in the scikit-learn wrapper." But then, oh, sometimes one does not

00:31:50.360 --> 00:32:06.360
want to do that. But nice thing is, another guy just came up with this project, which is really, really neat. So, basically, it's just, I think mostly I will just go about, maybe I should shamelessly show you an example.

00:32:06.360 --> 00:32:20.360
I should shamelessly show you an example in one of my gifts, which is, I know this is a shameless way to do it, but it's easier like doing a demo on how it works, right?

00:32:20.360 --> 00:32:28.360
So, like, if you're using scikit-learn, you are very familiar with all these other tools that someone needs to have, like the way to split your data, et cetera, et cetera.

00:32:28.360 --> 00:32:49.360
But then it's the pipeline and all that kind of stuff. But the coolest thing is, instead of using one of the scikit-learn models, you can create your own custom neural net, right? So this will be like a neural network where we decided what, how many, what will, how many nodes we want in the first layer, how many nodes we want in the first layer, how many nodes we want in the first layer, how many nodes we want in the first layer.

00:32:49.360 --> 00:33:04.360
How many nodes we want in the second layer. And here we can build as many interesting net as we see fit, right? And then basically here, we just do the calling of it. So this is very standard, high touch way of creating your net.

00:33:04.360 --> 00:33:19.360
The awesome part is that now this net, forgetting about all this process, we can see. So we just create this net, wrap it up like this, and now we are using it as part of our pipeline. So you can see, I will just go down right here.

00:33:19.360 --> 00:33:37.360
So I am having my preprocessor scikit-learn-ish and I'm having my net. And the coolest thing is, now I just call this thing as I will do with any scikit-learn model with my classifier.fit this. And later I will do my classifier.predict these things, right?

00:33:37.360 --> 00:34:01.360
So this example is, we are trying to predict the species of penguin given the data that we have. So this whole thing is really, really cool because it obscures the whole fuzz of, when you do it in PyTorch, pure PyTorch, you will have to write this folder with optimizer, stepping up, stepping down, all these things.

00:34:01.360 --> 00:34:15.360
But here, just transforming to the scikit-learn-world, where you just do fit, which just train your model. And now you can just do predict as if you're predicting any other scikit-learn tool.

00:34:15.360 --> 00:34:29.360
So, so Scorch is a really, really tool that just does that. So it allows you to connect your touch net with the scikit-learn pipeline. So this is really, really awesome.

00:34:29.360 --> 00:34:32.360
So I would just, I encourage people to take a look at it.

00:34:32.360 --> 00:34:42.360
I love the idea of it, that basically you can create these PyTorch models and do what you need to do to set them up and then just hand them off to the rest of the scikit-learn world.

00:34:42.360 --> 00:34:54.360
And I can see some really interesting uses for this. Like I've got some library and it can either integrate with PyTorch or it can integrate with scikit-learn and it just uses this little wrapper to pass it around. I like it.

00:34:54.360 --> 00:35:12.360
Yeah. Yeah. So just for me, it's like, it just gave me this ability to create this, more extended, algorithms, and then just continue using my scikit-learn, my scikit, my, scikit pipelines.

00:35:12.360 --> 00:35:24.360
So that's the coolest thing that I don't have to change my code because I just want to replace one line and that is the model. So I get the model from, scotch and then pass it in my ordinary, something like logistical regression.

00:35:24.360 --> 00:35:26.360
Instead. Now I'm using a net.

00:35:26.360 --> 00:35:29.360
Love it. Nice. Brian, what do you think? You like this pattern?

00:35:29.360 --> 00:35:38.360
Yeah, I do. I like the, I like the pattern of, being able to use, not have to change your entire tool chain, just, to change one piece. Nice and clean.

00:35:38.360 --> 00:35:50.360
Yeah. I like it as well. So, that's it for our main items. Brian, I've got one. I feel like, I feel like I should have let you have this one, but I grabbed this little extra thing I wanted to throw out there. Cause I thought it would make you happy.

00:35:50.360 --> 00:36:19.360
Cause I thought it would make you happy. Neat. Can't wait. Yeah. So, Marco Garelli sent over this thing and said, if you want to work in JupyterLab, right. I know that one of your requirements for working with tools and shells and stuff is that they're Vim ish. You can do Vim keyboard things to it. I'm excited. Yeah. So he sent in this thing called JupyterLab dash Vim, which is Vim notebook cell bindings for a JupyterLab. So if you're editing a notebook cell, you can do all of your, your magic Vim.

00:36:19.360 --> 00:36:25.500
he's to make all the various changes and whatnot, that you want. So yeah. Cool. What do you think?

00:36:25.500 --> 00:36:48.360
I'm definitely going to try this. Yes. Yeah. Awesome. All right. Let's see. What else do I have? I got, oh yeah, this, I nevermind my picture. I didn't really intend to put that up there, but I just want to point out that I'm going to be speaking. And the reason the picture is there is the conference, the pie bay conference that is running next month. they featured my talk that I'm doing. So that's why there's a picture of me, but the pie bay 2021 food truck.

00:36:48.360 --> 00:37:10.360
And food truck edition, they have rented out an entire, like food cart topia type place with a bunch of these pods and having a conference outdoors and putting up multimedia, like camera TVs and stuff for each pod. So even if you're not at the, like a great line of sight, you can still see the live talks, but sit outside and drink and eat food, cart food in California. Sounds fun.

00:37:10.360 --> 00:37:25.280
Sounds fun. So I'm going to be talking about, what, what did I say? My title, my talk was, is going to be HTMX plus flask modern Python web apps, hold the JavaScript. So I'm looking forward to giving that talk in there. So people, if they're generally in that area, they might want to check that out.

00:37:25.280 --> 00:37:27.740
I might, that just sounds fun.

00:37:27.740 --> 00:37:33.020
Yeah. Yes, indeed. All right. That's it for my extra items. You got any extras, Brian?

00:37:33.020 --> 00:37:34.900
No. How about you, Preston?

00:37:34.900 --> 00:37:43.020
Yes, I got one. I had to actually search if this one has been covered and I was surprised that has not been covered.

00:37:43.020 --> 00:37:45.020
I don't think it has. What is this?

00:37:45.020 --> 00:38:11.020
It's so it's, you know, there is something called pi dot inf. So we've been using pi dot inf to, of course, ones can say, why don't you just use always dot inf then get whatever that is. Why do we need to, to install another package just to get the environment variable or something. But this is pretty, pretty neat. it's quite recent project, I think. and it's rising slowly.

00:38:11.020 --> 00:38:40.020
And, there's a lot of contributor and it's, yeah, it, it's very promising. so what it does, I think I can just bring it, somewhere here. it allows you to do all this, type convention, casting, et cetera, et cetera. Right. Like you can say, you say, I'm going to get my debug here and then I will set the defaults and also I will do the casting here. Right. So this is really, really neat.

00:38:40.020 --> 00:38:55.720
So often when you're reading config files, everything is a string and then you're like, Oh, this one is a date time. So I got to parse it. This one. Yeah. Yeah. Yeah. Yeah. So I got to parse it. Yeah. Okay. Yeah. But it's really even, it's so much that. So there's another way where you can say from decouple import auto config.

00:38:55.880 --> 00:39:09.680
So it goes in search, dot in file is. So, otherwise you can just tell where the environment variable is, but it's just, it's just neat. It's very simple. It does what you want it to do.

00:39:09.680 --> 00:39:26.380
So I will really encourage people to look at it. It's, I just, we, we, I've just changed every places where I've been using, dot in or always dot in with, with this one. And it's just, helped me clean some unnecessary steps in my code.

00:39:26.540 --> 00:39:35.720
That's pretty cool. Yeah. Yeah. Great, great idea. Definitely check that one out. All right. Well, I think that's it for all of our items. Well, what do you think? Should we do a joke?

00:39:35.720 --> 00:39:51.280
Definitely. I love it. Cause I've almost forgotten what the joke is. So it's going to be new to me as well. All right. So the joke is called adoption. This comes from monkey user.com. And you've heard about the Python idea of you came for the language, but you stayed for the community.

00:39:51.540 --> 00:40:21.300
Well, what if it is a little bit different? What if actually people get brought in unwillingly and then they kind of realize they like it. So here's a picture of, like kind of an open field, you know, think, gazelle or something. And there's, there's a couple of developers just running and there's one who is fixated on a butterfly who doesn't actually see what there's a bunch of like a pack of Python developers coming to adopt them. It says a pack of Python developers spotting a junior dev away from its pack, initiate their conversion assault.

00:40:21.300 --> 00:40:51.280
Yeah. Silly, silly, silly, silly, silly, silly. Man, I'm that way even for non-programmers. So, and my family just sort of like rolls their eyes every time this happens, but every time I like get a, some, a young, somebody going, coming over either in college or high school or just out of college, I'll, I'll say, so if you haven't done it already, I, no matter what your field is, you really should learn how to code. and while you're at it, why not?

00:40:51.280 --> 00:40:55.640
Just choose Python. So I'm trying to make Python developers out of every person I meet.

00:40:55.640 --> 00:41:02.440
I think that's, you do him a favor. It's, it's, it'll, it'll be their superpower amongst all their non-developer friends.

00:41:02.440 --> 00:41:03.200
Yeah.

00:41:03.200 --> 00:41:04.520
Awesome.

00:41:04.520 --> 00:41:05.560
That's funny.

00:41:05.560 --> 00:41:10.600
Brian, thanks as always. And Pracin, really great to have you on the show this week and thanks for being here.

00:41:10.600 --> 00:41:12.380
Yeah. Thank you, Michael. Thank you, Brian.

00:41:12.380 --> 00:41:13.060
Thank you.

00:41:13.060 --> 00:41:13.940
You bet. Bye.

00:41:13.940 --> 00:41:14.540
Bye.

00:41:14.540 --> 00:41:21.260
Thanks for listening to Python Bytes. Follow the show on Twitter via at Python Bytes. That's Python Bytes as in

00:41:21.260 --> 00:41:25.220
B-Y-T-E-S. Get the full show notes over at Python Bytes.fm.

00:41:25.220 --> 00:41:30.540
If you have a news item we should cover, just visit Python Bytes.fm and click submit in the nav bar.

00:41:30.540 --> 00:41:32.680
We're always on the lookout for sharing something cool.

00:41:32.680 --> 00:41:37.540
If you want to join us for the live recording, just visit the website and click live stream to get

00:41:37.540 --> 00:41:43.700
notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays

00:41:43.700 --> 00:41:44.500
over at YouTube.

00:41:44.920 --> 00:41:51.580
On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

