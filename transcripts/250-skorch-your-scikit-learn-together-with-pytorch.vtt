
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.360
to you by us over at TalkBython Training, and Brian through his pytest book.


00:00:10.360 --> 00:00:15.460
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.460 --> 00:00:17.320
over at TalkBython Training.


00:00:17.320 --> 00:00:21.040
Visit them via pythonbytes.fm/courses.


00:00:21.040 --> 00:00:25.420
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.420 --> 00:00:28.440
at pythonbytes.fm/pytest.


00:00:28.440 --> 00:00:29.440
Enjoy the episode.


00:00:29.440 --> 00:00:33.100
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:33.100 --> 00:00:34.100
to your earbuds.


00:00:34.100 --> 00:00:38.820
This is episode 250, recorded September 15th, 2021.


00:00:38.820 --> 00:00:39.820
I'm Michael Kennedy.


00:00:39.820 --> 00:00:41.440
And I'm Brian Okken.


00:00:41.440 --> 00:00:42.800
And I am Preysen.


00:00:42.800 --> 00:00:45.120
Preysen, welcome to Python Bytes.


00:00:45.120 --> 00:00:46.120
Yeah, it's a pleasure.


00:00:46.120 --> 00:00:49.120
I've been looking so much forward to joining you guys.


00:00:49.120 --> 00:00:53.800
Yeah, you've been somebody out there who's been giving us a lot of good ideas and topics


00:00:53.800 --> 00:00:56.040
and helping us learn about new things.


00:00:56.040 --> 00:00:59.080
So you've been a big supporter of the show and now you are part of the show.


00:00:59.080 --> 00:00:59.740
Yeah.


00:00:59.740 --> 00:01:00.300
I'm around.


00:01:00.300 --> 00:01:02.140
Yeah.


00:01:02.140 --> 00:01:02.400
Yeah.


00:01:02.400 --> 00:01:02.880
For row.


00:01:02.880 --> 00:01:05.840
It's a, it's a, I'm been looking so much for it.


00:01:05.840 --> 00:01:10.720
Uh, like, for the first time I saw, Oh, we can take part in this.


00:01:10.720 --> 00:01:13.520
I go like, Oh, I should try to just get myself in there.


00:01:13.520 --> 00:01:14.600
And here I am.


00:01:14.600 --> 00:01:15.080
Yeah.


00:01:15.080 --> 00:01:15.480
Here you are.


00:01:15.480 --> 00:01:16.680
Thanks for, thanks for doing that.


00:01:16.680 --> 00:01:17.360
That's really nice.


00:01:17.360 --> 00:01:22.160
Tell people a bit about yourself before we dive into Brian's first topic.


00:01:22.160 --> 00:01:22.920
Yes.


00:01:22.920 --> 00:01:25.920
Well, well, my name is, price and Daniel.


00:01:25.920 --> 00:01:33.840
and I'm originally from Tanzania, but living in Denmark, married with three awesome kids.


00:01:33.840 --> 00:01:43.800
Currently, I'm a principal data scientist at NTT Data Business Solution here in Copenhagen.


00:01:43.800 --> 00:01:53.200
Yeah, so I accidentally became a data scientist and somehow discovering that I was really, really good at it.


00:01:53.200 --> 00:01:55.800
Then I just started climbing my way up,


00:01:55.800 --> 00:02:00.040
thanks to the Python community and everything that is out there.


00:02:00.040 --> 00:02:01.920
>> Yeah, awesome. Congratulations.


00:02:01.920 --> 00:02:04.400
Nice to see you finding your way in the data science world.


00:02:04.400 --> 00:02:05.200
>> Very cool.


00:02:05.200 --> 00:02:05.640
>> Yeah, Brian.


00:02:05.640 --> 00:02:08.520
>> Accidentally becoming a data scientist, that's interesting.


00:02:08.520 --> 00:02:09.600
>> Exactly.


00:02:09.600 --> 00:02:10.040
>> Yeah.


00:02:10.040 --> 00:02:12.880
>> All right, Brian. Have people been doing things wrong?


00:02:12.880 --> 00:02:14.400
>> I think so.


00:02:14.400 --> 00:02:18.140
>> Including race conditions with screen sharing.


00:02:18.140 --> 00:02:21.360
>> Yeah. I just couldn't resist this article.


00:02:21.360 --> 00:02:26.400
There's an article out called "Exciting New Ways to be Told that Your Python Code is Bad,"


00:02:26.400 --> 00:02:36.080
which is just a great title. And the gist is there's two new Pylint errors. So it's pretty


00:02:36.080 --> 00:02:43.440
simple. But it made me think about my code a little bit. And the first one is an error to


00:02:43.440 --> 00:02:46.200
to tell you to consider ternary expressions.


00:02:46.200 --> 00:02:51.360
If you've got like if condition,


00:02:51.360 --> 00:02:53.660
and then you assign a variable in


00:02:53.660 --> 00:02:57.260
both the if clause and the else clause,


00:02:57.260 --> 00:02:58.720
and it's a short thing,


00:02:58.720 --> 00:03:03.820
maybe use a conditional expression instead and do all in one line,


00:03:03.820 --> 00:03:07.040
like say, in one of the examples in the blog post


00:03:07.040 --> 00:03:11.300
says x equals four if condition else five.


00:03:11.300 --> 00:03:13.980
Ternary operators are pretty cool,


00:03:13.980 --> 00:03:16.340
and they're pretty easy to read in Python.


00:03:16.340 --> 00:03:18.540
But I was just curious what you thought.


00:03:18.540 --> 00:03:22.940
Is a ternary expression easier to read or more difficult?


00:03:22.940 --> 00:03:25.420
>> Well, for me, I think this is pretty nice.


00:03:25.420 --> 00:03:28.140
I'm always on the edge about the ternary condition,


00:03:28.140 --> 00:03:31.340
the value if condition else other value.


00:03:31.340 --> 00:03:35.580
A lot of times it starts to stretch out to be a little bit verbose,


00:03:35.580 --> 00:03:38.920
and then it's not entirely obvious.


00:03:38.920 --> 00:03:40.620
One thing I recently learned about,


00:03:40.620 --> 00:03:44.060
I don't know how it took me so long is the simpler version of that, like


00:03:44.060 --> 00:03:50.860
variable or other option at without the, if else, just the thing or that thing.


00:03:50.860 --> 00:03:51.380
Right.


00:03:51.380 --> 00:03:55.620
So for example, if you try to get a user back, and you just want to return


00:03:55.620 --> 00:03:59.860
the user or you want to return, maybe you want to check if their admin, if


00:03:59.860 --> 00:04:02.580
they are, you return them, otherwise you might turn them back, you could say


00:04:02.580 --> 00:04:07.320
something to the effect of like, you know, if I say user or a result equals


00:04:07.620 --> 00:04:10.420
user or false or something like that.


00:04:10.420 --> 00:04:15.300
Some, it's not a totally good example here, but this like super short version of value


00:04:15.300 --> 00:04:19.980
where you kind of have the return value and the test and then fall back to else case.


00:04:19.980 --> 00:04:24.500
Um, it wouldn't work in the example that I have here, but that one I actually started


00:04:24.500 --> 00:04:26.460
to really like because it's so concise.


00:04:26.460 --> 00:04:27.940
I don't know.


00:04:27.940 --> 00:04:29.740
I think I'm very traditional.


00:04:29.740 --> 00:04:32.100
I like reading my code up going down.


00:04:32.100 --> 00:04:36.300
So whenever it started stretching sideways to me, I go like, Oh, okay.


00:04:36.800 --> 00:04:39.040
I think I just love the flow of if,


00:04:39.040 --> 00:04:41.680
then I know I have to look down for the else, right?


00:04:41.680 --> 00:04:43.880
But now I have to look the else from the other side.


00:04:43.880 --> 00:04:48.760
Then, yeah, but one-liners are good in some places,


00:04:48.760 --> 00:04:51.640
but in most of the cases, out of readability,


00:04:51.640 --> 00:04:53.560
I usually just try to avoid them.


00:04:53.560 --> 00:04:54.400
- Yeah, I do as well.


00:04:54.400 --> 00:04:56.160
The one thing I was thinking is interesting


00:04:56.160 --> 00:04:58.040
on the data science side, Preysen,


00:04:58.040 --> 00:05:00.760
is a lot of times you're trying to take,


00:05:00.760 --> 00:05:02.440
instead of statements, multiple lines,


00:05:02.440 --> 00:05:04.000
you're trying to create little expressions


00:05:04.000 --> 00:05:05.480
that you can put together


00:05:05.480 --> 00:05:08.520
in like little list comprehensions and other types of things.


00:05:08.520 --> 00:05:11.880
And these one-liners become really valuable there.


00:05:11.880 --> 00:05:13.800
- Yeah, yeah, definitely, definitely.


00:05:13.800 --> 00:05:16.400
Mostly when we're using lambdas everywhere, right?


00:05:16.400 --> 00:05:18.280
- Yes, exactly, exactly.


00:05:18.280 --> 00:05:21.560
- So the next error condition is funny, I think,


00:05:21.560 --> 00:05:23.900
and it's just the while is used.


00:05:23.900 --> 00:05:28.240
So it's just a warning to say you have a while in your code.


00:05:28.240 --> 00:05:31.120
And this, the comment really is there's,


00:05:31.120 --> 00:05:33.960
it's just not really usually good to have a while


00:05:33.960 --> 00:05:38.560
because it can never terminate.


00:05:38.560 --> 00:05:42.640
It's not guaranteed to terminate if you've got a while loop.


00:05:42.640 --> 00:05:44.440
I thought that was interesting.


00:05:44.440 --> 00:05:47.840
I actually was just thinking about this the other day.


00:05:47.840 --> 00:05:52.200
I can't even remember the last time I've used a while loop in some code.


00:05:52.200 --> 00:05:54.600
I think this is actually pretty good,


00:05:54.600 --> 00:05:56.840
just to warn people they've got a while loop.


00:05:56.840 --> 00:05:59.320
>> It's pretty strong. It's a pretty strong warning to say,


00:05:59.320 --> 00:06:01.960
you have used this language construct. That's a problem.


00:06:01.960 --> 00:06:09.900
I certainly think it's, I'm on board with the Zen of the idea that most of the time,


00:06:09.900 --> 00:06:11.540
a while means you're doing it wrong.


00:06:11.540 --> 00:06:15.460
Most of the time, you could probably iterate over a collection or you could


00:06:15.460 --> 00:06:19.260
enumerate and then iterate over the index and the value.


00:06:19.260 --> 00:06:25.100
But there are times where you actually need to test for something and then break out.


00:06:25.100 --> 00:06:29.380
To put it as a full-on warning just for its existence.


00:06:29.380 --> 00:06:32.980
To me, it seems a bit too far, but it's interesting to say.


00:06:32.980 --> 00:06:37.180
The first one, I think these are both sort of in the eye of the beholder a bit.


00:06:37.180 --> 00:06:41.980
Yeah, I actually, like in our team, or in my whole existence,


00:06:41.980 --> 00:06:46.780
I think we're using WILD only once, and this is on the computer vision.


00:06:46.780 --> 00:06:52.180
So you are trying to capture videos from the camera and then do analysis with them.


00:06:52.180 --> 00:06:55.780
So it says, "WILD is a frame, keep on doing this."


00:06:55.780 --> 00:07:02.580
And of course you always have to catch some way to go out of this while loop.


00:07:02.580 --> 00:07:05.860
But I think that's the only time we use while.


00:07:05.860 --> 00:07:11.300
And we usually warn people, say, never use while except when you are doing computer vision.


00:07:11.300 --> 00:07:14.340
Interesting. Yeah. Especially if you got things like pandas and stuff,


00:07:14.340 --> 00:07:16.100
where maybe you shouldn't even be looping at all.


00:07:16.100 --> 00:07:18.020
No, no. Not at all. Not at all.


00:07:18.020 --> 00:07:18.820
Yeah. Interesting.


00:07:18.820 --> 00:07:19.540
Interesting.


00:07:19.540 --> 00:07:22.500
A couple of thoughts from the live stream.


00:07:22.500 --> 00:07:23.960
So Sam Morley out there says,


00:07:23.960 --> 00:07:26.080
"X equals Y or Z is really handy for setting


00:07:26.080 --> 00:07:29.000
instance variables in a class where they're using nones."


00:07:29.000 --> 00:07:29.960
I totally agree.


00:07:29.960 --> 00:07:31.460
Chris May, hey Chris, says,


00:07:31.460 --> 00:07:33.980
"Ternary is a great idea if it's simple,


00:07:33.980 --> 00:07:35.960
else not so much."


00:07:35.960 --> 00:07:38.040
>> Nice, clever.


00:07:38.040 --> 00:07:39.680
>> Brandon Brainer out there agrees with you,


00:07:39.680 --> 00:07:43.200
Preston, that the traditional if-else is probably easier to read.


00:07:43.200 --> 00:07:45.540
Henry Schreider says,


00:07:45.540 --> 00:07:48.920
"Ternary is much better for type checking as well."


00:07:48.920 --> 00:07:52.800
>> Okay. Yeah, probably because the type of reference is more obvious there.


00:07:52.800 --> 00:07:55.000
So yeah, pretty neat.


00:07:55.000 --> 00:07:57.200
Also speaking of neat stuff,


00:07:57.200 --> 00:08:02.760
what if you could have all sorts of little placards and things about your README?


00:08:02.760 --> 00:08:07.680
So here is a project I want to tell people about called GitHub README stats.


00:08:07.680 --> 00:08:10.640
GitHub README stats is pretty interesting.


00:08:10.640 --> 00:08:12.920
It comes to us from Palma.


00:08:12.920 --> 00:08:14.840
So thank you Palma for sending that in.


00:08:14.840 --> 00:08:19.320
And the description says it dynamically generated stats


00:08:19.320 --> 00:08:21.440
for your GitHub readmes.


00:08:21.440 --> 00:08:25.440
But I feel like that scope is actually way too short.


00:08:25.440 --> 00:08:28.360
It's dynamically generated little package


00:08:28.360 --> 00:08:30.240
for wherever you wanna put them on the internet.


00:08:30.240 --> 00:08:33.160
You might wanna put them on a project's readme


00:08:33.160 --> 00:08:35.800
so the project can describe itself more dynamically.


00:08:35.800 --> 00:08:38.180
But you might also wanna put it on your about page


00:08:38.180 --> 00:08:40.620
on your blog or something like that.


00:08:40.620 --> 00:08:43.600
So give you all a sense of what's going on here.


00:08:43.600 --> 00:08:46.120
You come down here, you can have these different,


00:08:46.120 --> 00:08:47.520
there's a whole bunch of different options.


00:08:47.520 --> 00:08:49.760
You can get like a GitHub stats card,


00:08:49.760 --> 00:08:51.260
you can get extra pins,


00:08:51.260 --> 00:08:53.800
you can get the languages, like for example,


00:08:53.800 --> 00:08:57.640
we could say what the languages you are most likely to use


00:08:57.640 --> 00:08:59.680
across all of your repositories,


00:08:59.680 --> 00:09:02.400
the walk of time, week stats,


00:09:02.400 --> 00:09:05.160
there's a bunch of themes and visualizations and stuff.


00:09:05.160 --> 00:09:07.160
So I think the best way to get a sense of this


00:09:07.160 --> 00:09:08.000
is to see an example.


00:09:08.000 --> 00:09:10.720
So I put a couple of projects in my own self in here


00:09:10.720 --> 00:09:11.680
to kind of pick on me.


00:09:11.680 --> 00:09:14.780
So here's a image that I could add.


00:09:14.780 --> 00:09:15.820
I'll zoom that in.


00:09:15.820 --> 00:09:19.000
So I have this Python switch package


00:09:19.000 --> 00:09:20.360
that I created a while ago


00:09:20.360 --> 00:09:22.820
when Python didn't have anything like a switch statement.


00:09:22.820 --> 00:09:24.600
So I wanted to add a switch statement


00:09:24.600 --> 00:09:26.180
to the Python language, so I did.


00:09:26.180 --> 00:09:27.600
And apparently here are the stats of it.


00:09:27.600 --> 00:09:28.780
These are live, right?


00:09:28.780 --> 00:09:30.760
If I refresh it, it'll regenerate it.


00:09:30.760 --> 00:09:33.380
And it gives you a little bit of info about the project,


00:09:33.380 --> 00:09:35.460
like the name and its little description.


00:09:35.460 --> 00:09:36.560
That's mostly Python.


00:09:36.560 --> 00:09:41.060
As it says, it has 238 stars and 18 forks,


00:09:41.060 --> 00:09:42.520
which is pretty awesome.


00:09:42.520 --> 00:09:44.600
So all I gotta do to get that is go up here


00:09:44.600 --> 00:09:46.040
and say I wanna get the pin


00:09:46.040 --> 00:09:48.240
and I wanna have the username be Mike C. Kennedy


00:09:48.240 --> 00:09:50.780
and the repo be Python-Switch.


00:09:50.780 --> 00:09:52.720
And then this returns an image that I can put,


00:09:52.720 --> 00:09:53.760
like I said, anywhere, right?


00:09:53.760 --> 00:09:55.760
If you put this as the image source,


00:09:55.760 --> 00:09:58.560
it'll go, it's not just like it'll only render on GitHub,


00:09:58.560 --> 00:10:00.120
it'll go wherever you put it.


00:10:00.120 --> 00:10:01.760
So I think that that's pretty cool.


00:10:01.760 --> 00:10:03.560
Another example would be,


00:10:03.560 --> 00:10:04.800
your stats, I'll refresh this


00:10:04.800 --> 00:10:05.840
'cause there's a little animation.


00:10:05.840 --> 00:10:08.600
I can get my Michael Kennedy's GitHub stats.


00:10:08.600 --> 00:10:10.240
Apparently I have an A++


00:10:10.240 --> 00:10:12.160
but a two thirds closed red ring.


00:10:12.160 --> 00:10:13.520
I'm not totally sure what the ring means,


00:10:13.520 --> 00:10:15.600
but kind of a cool little graphic here.


00:10:15.600 --> 00:10:17.840
Apparently I've got 3.5 thousand stars,


00:10:17.840 --> 00:10:19.000
which surprised me.


00:10:19.000 --> 00:10:22.280
A lot of commits, 73 PRs, 103 issues,


00:10:22.280 --> 00:10:25.200
23 repositories I contributed to.


00:10:25.200 --> 00:10:27.400
I don't know if that's this year or maybe this year,


00:10:27.400 --> 00:10:28.680
who knows, or total.


00:10:28.680 --> 00:10:29.840
Anyway, that's kind of cool, right?


00:10:29.840 --> 00:10:30.980
You could put that on your blog


00:10:30.980 --> 00:10:33.680
or somewhere where you're trying to talk about yourself,


00:10:33.680 --> 00:10:35.480
like you're trying to get hired


00:10:35.480 --> 00:10:37.160
or you do consulting or something.


00:10:37.160 --> 00:10:38.200
And then the third one here


00:10:38.200 --> 00:10:39.800
is you can say your most used languages.


00:10:39.800 --> 00:10:41.600
So apparently I have most used JavaScript,


00:10:41.600 --> 00:10:43.480
which is very much not true.


00:10:43.480 --> 00:10:48.120
But I've probably committed a ton of like node modules


00:10:48.120 --> 00:10:50.680
to some projects that I don't actually want to have to,


00:10:50.680 --> 00:10:52.800
you know, re-NPM install.


00:10:52.800 --> 00:10:54.600
I want to just make sure they're there for like a course


00:10:54.600 --> 00:10:55.480
or something like that, right?


00:10:55.480 --> 00:10:57.080
But it'll show you through the breakdown


00:10:57.080 --> 00:10:59.200
of your various languages and whatnot.


00:10:59.200 --> 00:11:01.840
So that gives you kind of a sense of


00:11:01.840 --> 00:11:03.320
what these are all about,


00:11:03.320 --> 00:11:04.840
what the idea of this thing is.


00:11:04.840 --> 00:11:07.240
So it generates these little cards and you can put them,


00:11:07.240 --> 00:11:08.320
like I said, wherever you want.


00:11:08.320 --> 00:11:10.080
- What do you think? - Like on a resume page.


00:11:10.080 --> 00:11:10.920
- Yeah. - Yeah.


00:11:10.920 --> 00:11:14.420
- I really love it, but it's kind of sad


00:11:14.420 --> 00:11:17.520
because most of our time is spent in GitLab


00:11:17.520 --> 00:11:20.980
and all this other, and all our commits are done there.


00:11:20.980 --> 00:11:23.680
And then when I come to my GitHub, it looks so empty


00:11:23.680 --> 00:11:25.080
and it makes my heart sing.


00:11:25.080 --> 00:11:26.000
- What has Fraser been doing?


00:11:26.000 --> 00:11:28.080
He hasn't committed anything for a week.


00:11:28.080 --> 00:11:28.920
- Yeah, yeah.


00:11:28.920 --> 00:11:31.280
So this is really, really awesome.


00:11:31.280 --> 00:11:32.280
- Yeah, cool.


00:11:32.280 --> 00:11:34.320
Yeah, I guess it really only works for GitHub


00:11:34.320 --> 00:11:36.120
and that's where it's really handy, but still pretty nice.


00:11:36.120 --> 00:11:39.400
- Tina, if the stats are only on public repos


00:11:39.400 --> 00:11:41.000
or are they public and private?


00:11:41.000 --> 00:11:42.600
- It's a good question.


00:11:42.600 --> 00:11:44.880
So you can choose as a user,


00:11:44.880 --> 00:11:46.400
if you go down here and like the stuff


00:11:46.400 --> 00:11:48.040
that shows in your contributions,


00:11:48.040 --> 00:11:50.000
in your GitHub profile,


00:11:50.000 --> 00:11:52.320
you can check whether you want public


00:11:52.320 --> 00:11:56.280
and private contributions to appear in that little green


00:11:56.280 --> 00:12:00.880
of how much contributions have you made this year by day.


00:12:00.880 --> 00:12:04.040
So maybe it depends on whether you've checked that or not.


00:12:04.040 --> 00:12:04.880
You know what I mean?


00:12:04.880 --> 00:12:05.720
- Probably.


00:12:05.720 --> 00:12:06.720
But it might not.


00:12:06.720 --> 00:12:09.720
But anyway, yeah, pretty cool little project.


00:12:09.720 --> 00:12:11.640
Brayston, you're up next.


00:12:11.640 --> 00:12:12.640
What you got?


00:12:12.640 --> 00:12:13.640
Yes, yes, yes.


00:12:13.640 --> 00:12:15.320
So I got this one here.


00:12:15.320 --> 00:12:20.400
Actually this is it's something that has been covered, not covered, covered, but been mentioned.


00:12:20.400 --> 00:12:26.120
So I could see it in the footnotes as when I search through.


00:12:26.120 --> 00:12:31.720
Actually Brian, you covered it in episode 182 with HyperMod in Python.


00:12:31.720 --> 00:12:33.600
I think it's just a name that was there.


00:12:33.600 --> 00:12:34.800
Yeah, but it was not mentioned.


00:12:34.800 --> 00:12:39.800
I think it's just been, oh, this could be used in this hyper modern Python way of doing


00:12:39.800 --> 00:12:41.040
awesome stuff.


00:12:41.040 --> 00:12:48.080
And then in episode 248, it was mentioned again with hyper modern Python cookie cutter,


00:12:48.080 --> 00:12:53.440
but it's just like a footnote of, oh, it use knocks instead of talks.


00:12:53.440 --> 00:13:01.160
So this is really, really an awesome tool that we've been using recently because when


00:13:01.160 --> 00:13:06.920
When we do machine learning, we are encountering a lot of problems where we have to test how


00:13:06.920 --> 00:13:11.680
our models are performing and how are they ethical.


00:13:11.680 --> 00:13:18.200
So the test, when we do tests of our pipelines, we're not just testing that the models are


00:13:18.200 --> 00:13:24.680
accurate, or they are doing the things that they're doing, like the API, it's actually,


00:13:24.680 --> 00:13:28.320
you cannot just ping our API, you need to have keys and all those.


00:13:28.320 --> 00:13:32.080
we actually also have to test about the ethicalness of our models.


00:13:32.080 --> 00:13:40.240
So if we say our models does not segregate between, let's say, gender,


00:13:40.240 --> 00:13:45.040
so we have counterfactual tests where we send different genders


00:13:45.040 --> 00:13:46.960
and see what are the models responding.


00:13:46.960 --> 00:13:48.480
Are they responding with a similar result?


00:13:48.480 --> 00:13:53.720
So when we say it doesn't segregate between sexual orientation,


00:13:53.800 --> 00:14:02.880
And then we send different inputs where it pretends to be either straight or homosexual


00:14:02.880 --> 00:14:05.760
and just try to see, do we receive the same results?


00:14:05.760 --> 00:14:12.000
So we've been trying to run this in an automatic way.


00:14:12.000 --> 00:14:14.200
And before that, we used a lot of talks.


00:14:14.200 --> 00:14:20.500
But the problem is, the way of defining your talks is just not Pythonic.


00:14:20.500 --> 00:14:24.020
don't write this Pythonic way of doing things.


00:14:24.020 --> 00:14:27.420
It's similar to, we had this issue with make.


00:14:27.420 --> 00:14:29.620
I really could not debug make.


00:14:29.620 --> 00:14:34.180
So whenever I made a make file, I copied from someone else and then changed some


00:14:34.180 --> 00:14:38.060
things because anything I touched, then I have a syntax error.


00:14:38.060 --> 00:14:40.100
Oh, this thing is not in the right place.


00:14:40.100 --> 00:14:46.020
And then I came across evoke, which it was almost like Pythonic.


00:14:46.020 --> 00:14:48.180
I can write everything in a Python way.


00:14:48.500 --> 00:14:53.500
So this Knox is actually similar to what Evoke did to Make,


00:14:53.500 --> 00:14:58.580
but it's doing exactly to Tux.


00:14:58.580 --> 00:15:02.900
So in this case, you can create simple pipelines


00:15:02.900 --> 00:15:06.620
like this one here, where it creates a session,


00:15:06.620 --> 00:15:08.780
installs the package that needs to be installed,


00:15:08.780 --> 00:15:12.660
and then run whatever experiment you're trying to run.


00:15:12.660 --> 00:15:15.260
And this is really, really handy, at least.


00:15:15.260 --> 00:15:18.100
We found it really handy because you can select


00:15:18.100 --> 00:15:20.620
that it actually used the Conda environment,


00:15:20.620 --> 00:15:22.640
like the Conda world,


00:15:22.640 --> 00:15:24.540
it's been used a lot in data science.


00:15:24.540 --> 00:15:27.880
So you can say first create a Conda virtual environment,


00:15:27.880 --> 00:15:30.460
install these packages and then test them.


00:15:30.460 --> 00:15:32.420
So what I like about this tool,


00:15:32.420 --> 00:15:35.300
it's almost similar to pytest.


00:15:35.300 --> 00:15:37.700
Like if you know how pytest works,


00:15:37.700 --> 00:15:39.340
then you know how this guy works


00:15:39.340 --> 00:15:41.940
because there's a parametrization


00:15:41.940 --> 00:15:44.540
and whenever you run tests,


00:15:44.540 --> 00:15:47.540
you can select which part of session needs to be run,


00:15:47.540 --> 00:15:52.540
Like in pytest, we use the -k, run this kind of test.


00:15:52.540 --> 00:15:55.680
And here you use the same thing, -k,


00:15:55.680 --> 00:15:58.320
run only this kind of builds, right?


00:15:58.320 --> 00:16:00.220
So it is dope.


00:16:00.220 --> 00:16:02.020
We really, really enjoy that.


00:16:02.020 --> 00:16:05.300
Like you can pass in a environment variable,


00:16:05.300 --> 00:16:08.820
but I actually wanted to show you the coolest part here.


00:16:08.820 --> 00:16:10.220
- Yeah, this does look nice.


00:16:10.220 --> 00:16:12.220
- It's just amazing.


00:16:12.220 --> 00:16:17.040
I cannot, I mean, the guy who created this,


00:16:17.040 --> 00:16:21.080
I just give him all the thumbs up with everything that they have,


00:16:21.080 --> 00:16:22.480
they have come up with.


00:16:22.480 --> 00:16:26.280
So it's really, really handy if you're not using it,


00:16:26.280 --> 00:16:28.200
or if you're using Tux,


00:16:28.200 --> 00:16:31.960
you should probably consider changing to Nuxt.


00:16:31.960 --> 00:16:32.800
- That's cool.


00:16:32.800 --> 00:16:34.960
You can, for example, write that you have a test


00:16:34.960 --> 00:16:37.860
and then say, I want this, you know, as a decorator,


00:16:37.860 --> 00:16:42.200
sort of parameterize, I want this to run on 2736, 3738,


00:16:42.200 --> 00:16:43.320
and it'll do that, right?


00:16:43.320 --> 00:16:44.160
- Yeah.


00:16:44.160 --> 00:16:47.440
So you can see it's like this example here, right?


00:16:47.440 --> 00:16:51.040
So you can see we are parameterizing a different Django.


00:16:51.040 --> 00:16:56.000
So we want it to first install this version and then run the tests, right?


00:16:56.000 --> 00:16:59.840
And then later it will come and take this version and run the test.


00:16:59.840 --> 00:17:02.560
But then in the command line, you can actually just select it


00:17:02.560 --> 00:17:06.560
to run only the test with this guy and skip this guy here.


00:17:06.560 --> 00:17:09.280
So it's really, I mean, it's...


00:17:10.160 --> 00:17:15.000
the ability that it gives you, it's incredible.


00:17:15.000 --> 00:17:19.620
So if I could see, so you can see like here, right here, right?


00:17:19.620 --> 00:17:23.820
This is exactly what like it goes into the pytest-ish world.


00:17:23.820 --> 00:17:26.940
- I see, so you can run it and say, don't run the linter,


00:17:26.940 --> 00:17:29.500
or just lint it, don't run the test, or test.


00:17:29.500 --> 00:17:31.780
You can even put Python expressions, it looks like,


00:17:31.780 --> 00:17:34.140
test and not lint, for example.


00:17:34.140 --> 00:17:39.140
- Is it, I mean, it's just insanely great.


00:17:39.260 --> 00:17:42.060
>> Nice. Brian, what do you think of this?


00:17:42.060 --> 00:17:44.060
>> I really like Knox. It's neat.


00:17:44.060 --> 00:17:48.180
The use of parameters is really cool.


00:17:48.180 --> 00:17:52.380
The example of using a couple of different Django's is good,


00:17:52.380 --> 00:17:58.580
but you can also build up matrices of testing easily with a couple.


00:17:58.580 --> 00:18:02.020
You can stack these, so you can have two parameters together.


00:18:02.020 --> 00:18:04.180
It's a pretty cool project.


00:18:04.180 --> 00:18:06.700
I just really love talks,


00:18:06.700 --> 00:18:09.640
So I haven't switched.


00:18:09.640 --> 00:18:15.600
But I know that there's like invoke also,


00:18:15.600 --> 00:18:17.880
people are using invoke for automation,


00:18:17.880 --> 00:18:21.360
but people are using Knox for more than just


00:18:21.360 --> 00:18:23.800
automating testing, you can automate


00:18:23.800 --> 00:18:24.920
really whatever you want to.


00:18:24.920 --> 00:18:27.920
You can run, it's just running a command, right?


00:18:27.920 --> 00:18:29.200
- Nice, yeah.


00:18:29.200 --> 00:18:30.400
Bracen, you've got a lot of comments


00:18:30.400 --> 00:18:31.680
from the live stream on this one.


00:18:31.680 --> 00:18:33.960
Henry Schreider says, "I love Knox.


00:18:33.960 --> 00:18:37.660
Tox is mired in backwards compatibility defaults.


00:18:37.660 --> 00:18:39.980
It is hard to tell what's actually doing,


00:18:39.980 --> 00:18:40.960
whereas Knox is simple.


00:18:40.960 --> 00:18:43.000
It doesn't hide or guess stuff.


00:18:43.000 --> 00:18:45.840
It's just programmed like pytest, which sounds great.


00:18:45.840 --> 00:18:48.200
Sam Morley says, "This is the only way


00:18:48.200 --> 00:18:50.240
"to write a makefile, which can invoke."


00:18:50.240 --> 00:18:52.280
(laughing)


00:18:52.280 --> 00:18:55.520
- I mean, I had that one.


00:18:55.520 --> 00:18:56.520
- Yeah.


00:18:56.520 --> 00:18:58.480
Henry also says, "The PyPA projects


00:18:58.480 --> 00:19:00.440
"have some very powerful Knox files,


00:19:00.440 --> 00:19:03.400
"CI build, wheel, pip, and so on,"


00:19:03.400 --> 00:19:04.440
- Which is good.


00:19:04.440 --> 00:19:07.500
And then Sam Morley also has a question for you.


00:19:07.500 --> 00:19:10.400
Can it also Knox run external tools,


00:19:10.400 --> 00:19:13.700
for example, build a C extension or run a C test suite?


00:19:13.700 --> 00:19:15.640
- Oh, I don't know, Brian.


00:19:15.640 --> 00:19:17.240
- I don't know that either.


00:19:17.240 --> 00:19:18.880
- I assume so.


00:19:18.880 --> 00:19:22.240
- It definitely can because Python has sub process,


00:19:22.240 --> 00:19:26.000
but can it do it without you forcing that into it?


00:19:26.000 --> 00:19:27.840
But you could put technically,


00:19:27.840 --> 00:19:31.440
you know, Python call this other command, right?


00:19:31.440 --> 00:19:36.440
- Well, there's an example in the tutorial of calling CMake.


00:19:36.440 --> 00:19:37.960
- Yeah, I saw the CMake as well.


00:19:37.960 --> 00:19:39.400
So that probably counts, right?


00:19:39.400 --> 00:19:40.240
- Yeah.


00:19:40.240 --> 00:19:41.200
- Yeah, I think that would count.


00:19:41.200 --> 00:19:43.160
- So it's just running a command.


00:19:43.160 --> 00:19:44.120
- Yeah. - Yeah.


00:19:44.120 --> 00:19:44.940
- Of course.


00:19:44.940 --> 00:19:47.520
- And then Brian, Brandon out there has a comment for you.


00:19:47.520 --> 00:19:48.600
New lights look great.


00:19:48.600 --> 00:19:49.560
(laughing)


00:19:49.560 --> 00:19:50.560
I agree with him.


00:19:50.560 --> 00:19:53.200
I actually need to adjust my camera a little bit,


00:19:53.200 --> 00:19:54.920
which is a little bit off on the lights.


00:19:54.920 --> 00:19:55.760
Very cool.


00:19:55.760 --> 00:19:57.000
All right, let's see.


00:19:57.000 --> 00:19:59.160
I think, Brian, you got the next one.


00:19:59.160 --> 00:20:00.200
- Oh, okay.


00:20:00.200 --> 00:20:02.240
I forgot what I was talking about.


00:20:02.240 --> 00:20:06.280
I've got the old document there.


00:20:06.280 --> 00:20:08.680
I've got a couple of things I wanted to talk about.


00:20:08.680 --> 00:20:10.960
One of those extra, extra, extra things,


00:20:10.960 --> 00:20:12.400
but there's just two.


00:20:12.400 --> 00:20:15.560
A couple of things around dealing with text.


00:20:15.560 --> 00:20:18.720
I've been playing with my blog a little bit lately,


00:20:18.720 --> 00:20:21.920
not really writing much, which is a problem,


00:20:21.920 --> 00:20:24.240
but actually dealing with some of the old text.


00:20:24.240 --> 00:20:25.960
>> What you wrote looks really good now.


00:20:25.960 --> 00:20:33.740
>> Well, I'm trying to automate some of the parsing of some of the old stuff.


00:20:33.740 --> 00:20:39.040
I grabbed a whole bunch of blog posts from WordPress.


00:20:39.040 --> 00:20:42.160
Nobody needs to throw eggs at me,


00:20:42.160 --> 00:20:45.320
I'm already switching and using Hugo now.


00:20:45.320 --> 00:20:50.240
But I've got a whole bunch of files that I automatically generated Markdown files,


00:20:50.240 --> 00:20:52.080
but there's problems with them,


00:20:52.080 --> 00:20:54.000
so I have to keep track of them.


00:20:54.000 --> 00:20:57.760
I've got some scripts, a couple of tools are helping me.


00:20:57.760 --> 00:21:02.280
Python FrontMatter is a package.


00:21:02.280 --> 00:21:04.160
It's just a really small package,


00:21:04.160 --> 00:21:09.120
but all it does is really takes YAML style,


00:21:09.120 --> 00:21:13.620
FrontMatter stuff, and parses those.


00:21:13.620 --> 00:21:15.160
You could just load it.


00:21:15.160 --> 00:21:17.000
I'm using a markdown files,


00:21:17.000 --> 00:21:19.120
the example shows a text file.


00:21:19.120 --> 00:21:23.080
You can get at all the pieces of the file,


00:21:23.080 --> 00:21:25.640
like the content and stuff, but for instance,


00:21:25.640 --> 00:21:27.680
I can grab the title,


00:21:27.680 --> 00:21:29.560
you can look at what the keys are.


00:21:29.560 --> 00:21:34.940
For blog posts, I've got tags and the date,


00:21:34.940 --> 00:21:39.480
and it's all converted to Python objects.


00:21:39.480 --> 00:21:44.440
If I have a date listed in a blog post,


00:21:44.440 --> 00:21:46.960
it'll show up as a date-time object.


00:21:46.960 --> 00:21:49.560
You can do math on it and all sorts of stuff.


00:21:49.560 --> 00:21:50.920
This is pretty cool.


00:21:50.920 --> 00:21:54.420
It's really small, but super handy for what I need.


00:21:54.420 --> 00:21:56.480
>> Yeah, this looks nice.


00:21:56.480 --> 00:21:58.440
>> The other tool I wanted to talk about,


00:21:58.440 --> 00:22:00.700
which is even a tinier use case,


00:22:00.700 --> 00:22:03.300
I think is called FTFY,


00:22:03.300 --> 00:22:05.540
fixes text for you.


00:22:05.540 --> 00:22:11.200
Really, it just takes bad Unicode conversions and makes them good.


00:22:11.200 --> 00:22:16.960
It takes common problems with Unicode conversions and fixes them.


00:22:16.960 --> 00:22:18.540
>> It looks like you have


00:22:18.540 --> 00:22:22.980
Greek or Russian letters or something instead of a space or apostrophe or something like that.


00:22:22.980 --> 00:22:25.060
>> Yeah. The first example,


00:22:25.060 --> 00:22:29.100
a quick example, there's this weird AE character,


00:22:29.100 --> 00:22:31.300
and really it was intended to be a check mark.


00:22:31.300 --> 00:22:35.220
So it just converted it to the proper what it was.


00:22:35.220 --> 00:22:37.420
I'm not sure how it's doing this, but it's pretty neat.


00:22:37.420 --> 00:22:39.260
>> That is very cool.


00:22:39.260 --> 00:22:41.380
>> This gets me all the time.


00:22:41.380 --> 00:22:43.180
My stuff goes from Word,


00:22:43.180 --> 00:22:45.460
if I'm converting from Word or something,


00:22:45.460 --> 00:22:49.140
or copy and pasting, or other things.


00:22:49.140 --> 00:22:53.560
There's a lot of different quote marks that word processors put in,


00:22:53.560 --> 00:22:58.240
and it just ends up being gross in a lot of places.


00:22:58.240 --> 00:23:00.460
Having that converted to just,


00:23:00.460 --> 00:23:05.140
one example is the Mona Lisa doesn't have eyebrows,


00:23:05.140 --> 00:23:08.100
but instead of just apostrophe T,


00:23:08.100 --> 00:23:09.820
it's this weird, ugly,


00:23:09.820 --> 00:23:11.980
big Unicode thing.


00:23:11.980 --> 00:23:16.100
Yeah, so just replacing that with an apostrophe is a good idea.


00:23:16.100 --> 00:23:17.940
>> Yeah, nice. Does it change


00:23:17.940 --> 00:23:21.140
single quotes to double quotes and stuff like that as well?


00:23:21.140 --> 00:23:23.900
>> I don't know.


00:23:23.900 --> 00:23:28.620
>> It's nice. I don't know if it should either. I'm not sure.


00:23:28.620 --> 00:23:31.220
Yeah, this is cool. So you just run this


00:23:31.220 --> 00:23:33.500
across your markdown files or something like that?


00:23:33.500 --> 00:23:36.340
>> Yeah. So I'm not using it really for the blog stuff,


00:23:36.340 --> 00:23:38.780
but there was some other text parsing I was


00:23:38.780 --> 00:23:41.660
doing where I was scraping some information from somewhere.


00:23:41.660 --> 00:23:43.740
and it just was just gross.


00:23:43.740 --> 00:23:47.260
It had a bunch of gross Unicode stuff in it,


00:23:47.260 --> 00:23:50.160
and I just wanted to have something easy


00:23:50.160 --> 00:23:51.980
to just convert it quickly.


00:23:51.980 --> 00:23:53.520
And this does the trick.


00:23:53.520 --> 00:23:55.600
- Yeah, very cool.


00:23:55.600 --> 00:23:56.900
Nice one, nice finds.


00:23:56.900 --> 00:23:58.260
So I'd follow up on that.


00:23:58.260 --> 00:24:01.380
I was playing with my OhMyPosh shell


00:24:01.380 --> 00:24:02.840
and the new Windows Terminal


00:24:02.840 --> 00:24:06.380
and the new Windows PowerShell on Windows 11.


00:24:06.380 --> 00:24:07.420
Ooh, earlier this week,


00:24:07.420 --> 00:24:09.940
trying to set up some testing over there,


00:24:09.940 --> 00:24:12.300
And I found they have all these cool themes


00:24:12.300 --> 00:24:13.780
that show you all kinds of neat stuff.


00:24:13.780 --> 00:24:17.000
So you can see like the Git branch you're on,


00:24:17.000 --> 00:24:18.580
and they've got these little cool arrows


00:24:18.580 --> 00:24:19.900
and all these colors,


00:24:19.900 --> 00:24:21.700
and they'll even do certain things


00:24:21.700 --> 00:24:23.100
for like showing the version


00:24:23.100 --> 00:24:26.340
of the Python virtual environment that's active


00:24:26.340 --> 00:24:27.900
in the prompt and stuff like that


00:24:27.900 --> 00:24:29.380
if you activate the virtual environment.


00:24:29.380 --> 00:24:31.120
And all that had a bunch of weird blocks


00:24:31.120 --> 00:24:33.000
and like squiggly junk like that.


00:24:33.000 --> 00:24:35.020
And so it's not exactly the same problem.


00:24:35.020 --> 00:24:36.460
I'm gonna talk more about this later,


00:24:36.460 --> 00:24:39.380
but I found that there's this place called Nerd Fonts,


00:24:39.380 --> 00:24:42.180
And apparently Hotshell is tested on nerd fonts,


00:24:42.180 --> 00:24:46.820
but nerd fonts is full of all these amazing developer fonts


00:24:46.820 --> 00:24:49.740
that have font ligatures and all sorts of cool stuff.


00:24:49.740 --> 00:24:50.580
And they're all free.


00:24:50.580 --> 00:24:53.640
There's like 50 developer fonts and terminal fonts


00:24:53.640 --> 00:24:54.480
and stuff.


00:24:54.480 --> 00:24:57.060
So yeah, one more thing along those lines to check out.


00:24:57.060 --> 00:24:58.420
Very neat.


00:24:58.420 --> 00:25:01.540
But what I wanted to talk about is stealing this idea


00:25:01.540 --> 00:25:04.860
from Preston that he was gonna cover, but I got to it.


00:25:04.860 --> 00:25:06.160
Got to it before.


00:25:07.300 --> 00:25:11.060
So there's this new project that recently is making traction.


00:25:11.060 --> 00:25:13.440
It's been around for a couple of months,


00:25:13.440 --> 00:25:15.480
even I guess it's about two years old, honestly,


00:25:15.480 --> 00:25:17.920
but somehow it got discovered


00:25:17.920 --> 00:25:22.600
and is now getting some traction called MPIRE, M-P-I-R-E.


00:25:22.600 --> 00:25:24.940
And the idea is it's a Python package


00:25:24.940 --> 00:25:27.120
for easy multiprocessing.


00:25:27.120 --> 00:25:29.280
It's like the multiprocessing module,


00:25:29.280 --> 00:25:31.000
but faster, better, stronger.


00:25:31.000 --> 00:25:32.440
It's like the Bionic one.


00:25:32.440 --> 00:25:37.440
So the acronym stands for multiprocessing is really easy.


00:25:37.440 --> 00:25:39.080
I love that thought.


00:25:39.080 --> 00:25:43.380
And it primarily works around taking multiprocessing pools,


00:25:43.380 --> 00:25:45.800
but then adding on some features


00:25:45.800 --> 00:25:47.180
that make it more efficient.


00:25:47.180 --> 00:25:50.000
For example, instead of creating a clone,


00:25:50.000 --> 00:25:52.180
a copy of every object that gets shared


00:25:52.180 --> 00:25:53.560
across all the multiprocessing,


00:25:53.560 --> 00:25:55.440
it'll actually do copy on write.


00:25:55.440 --> 00:25:58.180
So it won't make a copy of the objects you're just reading,


00:25:58.180 --> 00:26:00.480
it'll only make a copy of the ones you're changing.


00:26:00.480 --> 00:26:02.720
So if you start like 10 sub-processes,


00:26:02.720 --> 00:26:05.080
you might not have to make copies, 10 copies of that,


00:26:05.080 --> 00:26:06.960
which can make it faster.


00:26:06.960 --> 00:26:09.240
It comes with cool like progress bar functionality


00:26:09.240 --> 00:26:11.880
and insight to how much progress it's made.


00:26:11.880 --> 00:26:13.280
It's also supposed to be faster,


00:26:13.280 --> 00:26:14.880
I'll talk about in a second,


00:26:14.880 --> 00:26:17.360
but it has map, map unordered,


00:26:17.360 --> 00:26:19.360
and things like that, iterative maps.


00:26:19.360 --> 00:26:22.680
The copy on right I talked about, which is cool.


00:26:22.680 --> 00:26:24.960
Each worker has its own state


00:26:24.960 --> 00:26:27.980
and some like startup shutdown type of behaviors


00:26:27.980 --> 00:26:28.840
you can add to it.


00:26:28.840 --> 00:26:33.460
It has integration with TQDM, the progress bar.


00:26:33.460 --> 00:26:34.540
What else does it have?


00:26:34.540 --> 00:26:36.060
Like I said, some insights.


00:26:36.060 --> 00:26:38.460
It has user-friendly exception handling,


00:26:38.460 --> 00:26:39.760
which is pretty awesome.


00:26:39.760 --> 00:26:41.860
You can also do automatic chunking


00:26:41.860 --> 00:26:46.460
to break up blocks of queues across sub-processes


00:26:46.460 --> 00:26:49.300
and multiprocessing, including NumPy arrays.


00:26:49.300 --> 00:26:51.860
You can adjust the maximum number of tasks


00:26:51.860 --> 00:26:54.160
or restart them after a certain number.


00:26:54.160 --> 00:26:56.140
Restart the worker processes


00:26:56.140 --> 00:26:57.840
after a certain amount of work.


00:26:57.840 --> 00:26:59.520
So in case there's like a memory leak


00:26:59.520 --> 00:27:00.820
or it's just hasn't cleaned it up,


00:27:00.820 --> 00:27:03.000
you can sort of work on that


00:27:03.000 --> 00:27:05.900
and create pools of these workers with like a daemon option.


00:27:05.900 --> 00:27:08.360
So they're just up and running and they grab the work.


00:27:08.360 --> 00:27:12.120
Let's see, it can be pinned to a specific


00:27:12.120 --> 00:27:15.880
or a range, specific CPU or a range of CPUs,


00:27:15.880 --> 00:27:19.440
which can be useful for cache invalidation.


00:27:19.440 --> 00:27:21.840
So if you're getting a lot of like thrashing


00:27:21.840 --> 00:27:23.360
and moving across different CPUs,


00:27:23.360 --> 00:27:25.780
then the caches have to read different data,


00:27:25.780 --> 00:27:27.720
which is of course way, way, way slower.


00:27:27.720 --> 00:27:30.880
So a bunch of neat things, I'll show you a quick example.


00:27:30.880 --> 00:27:33.240
So in the docs, if you pull their page up,


00:27:33.240 --> 00:27:35.320
there's a multi-processing example.


00:27:35.320 --> 00:27:37.040
So you write a function and then you say,


00:27:37.040 --> 00:27:39.880
with pool processes equals five as pool,


00:27:39.880 --> 00:27:42.760
pool.map and give the function and the data interval


00:27:42.760 --> 00:27:44.500
and it runs each one through there.


00:27:44.500 --> 00:27:47.760
With the Empire one, it's quite simple, similar.


00:27:47.760 --> 00:27:50.000
You just create a Empire worker pool


00:27:50.000 --> 00:27:51.920
and you specify the number of jobs.


00:27:51.920 --> 00:27:53.640
It says the difference of the code are small,


00:27:53.640 --> 00:27:55.320
you don't have to relearn anything,


00:27:55.320 --> 00:27:57.640
but you get things like all the stuff I talked about,


00:27:57.640 --> 00:27:59.560
the more efficient shared objects,


00:27:59.560 --> 00:28:01.340
the progress bar, if you want.


00:28:01.340 --> 00:28:03.400
You can just say progress bar equals true


00:28:03.400 --> 00:28:07.540
and you automatically get a cool little TQDM progress bar.


00:28:07.540 --> 00:28:12.460
You get startup and shutdown methods for the workers


00:28:12.460 --> 00:28:15.700
so you can initialize them and what else you need to do.


00:28:15.700 --> 00:28:17.720
So yeah, pretty cool little project.


00:28:17.720 --> 00:28:20.240
And the benchmarks show it down here at the bottom


00:28:20.240 --> 00:28:22.600
in the fast area so you all can check that out.


00:28:22.600 --> 00:28:24.800
Grayson, what did you like about this?


00:28:24.800 --> 00:28:39.040
Well, I think it's also going to transition really well to the other topic that I have is I like when one create an API that you can just easily plug to your existing code.


00:28:39.040 --> 00:28:39.560
Yeah.


00:28:39.560 --> 00:28:44.560
So you can just import this as this and do not change the entire code and then you take care of that.


00:28:44.560 --> 00:28:49.040
You know, like writing your code in a way that one can just plug and play.


00:28:49.040 --> 00:28:50.800
That's the amazing thing.


00:28:50.800 --> 00:28:54.360
So it's easy that you don't have to relearn a lot of stuff,


00:28:54.360 --> 00:28:56.280
but it just gives you the power that you need.


00:28:56.280 --> 00:28:59.220
So this is why we moved toward this one.


00:28:59.220 --> 00:29:02.440
So we gain the power without changing much of our code.


00:29:02.440 --> 00:29:03.800
- Yeah, yeah, definitely.


00:29:03.800 --> 00:29:05.160
I love that as well.


00:29:05.160 --> 00:29:08.760
You know, I think of like HTTPX and requests for a while,


00:29:08.760 --> 00:29:11.240
and I think they diverged at some point, but yeah.


00:29:11.240 --> 00:29:14.440
Let's see some feedback from audience real quick.


00:29:14.440 --> 00:29:15.840
I'll jump back to the nerd fonts.


00:29:15.840 --> 00:29:17.600
Chris says they're amazing.


00:29:17.600 --> 00:29:21.920
Henry Schreiner says, "Fish shell plus Fisher plus oh my fish,


00:29:21.920 --> 00:29:23.900
then the theme Bob the fish plus


00:29:23.900 --> 00:29:26.780
Sauce Code Pro nerd font is fantastic."


00:29:26.780 --> 00:29:29.020
Oh my gosh. I have no idea.


00:29:29.020 --> 00:29:30.420
>> These are great names.


00:29:30.420 --> 00:29:32.860
>> You're going to send me on a serious rattle.


00:29:32.860 --> 00:29:35.020
I'm going to be losing the rest of the day.


00:29:35.020 --> 00:29:35.860
>> No way.


00:29:35.860 --> 00:29:36.940
>> I'm afraid.


00:29:36.940 --> 00:29:40.180
>> Well, I keep on missing my terminal


00:29:40.180 --> 00:29:42.580
every time I start fiddling around, right?


00:29:42.580 --> 00:29:43.700
>> That's right.


00:29:43.700 --> 00:29:46.140
because I'm using a, yeah,


00:29:46.140 --> 00:29:48.860
WSL Windows subsystem Linux, right?


00:29:48.860 --> 00:29:51.980
So whenever I fix something, then I get it right.


00:29:51.980 --> 00:29:54.100
And before I know it, I broke it again.


00:29:54.100 --> 00:29:57.220
And so, but yeah, it looks really awesome.


00:29:57.220 --> 00:29:58.300
- Yeah, fantastic.


00:29:58.300 --> 00:30:01.660
And then on topic was most recently talking about


00:30:01.660 --> 00:30:04.700
Chris Mace's, whoa, Empire looks nice.


00:30:04.700 --> 00:30:07.460
Alvaro asked, will it help to get logging


00:30:07.460 --> 00:30:09.060
working in multiprocessing?


00:30:09.060 --> 00:30:11.460
I don't know that it'll make any change.


00:30:11.460 --> 00:30:13.460
I mean, it really is mostly still multiprocessing.


00:30:13.460 --> 00:30:14.300
So probably not.


00:30:14.300 --> 00:30:14.820
Yeah.


00:30:14.820 --> 00:30:15.260
Yeah.


00:30:15.260 --> 00:30:15.660
Very cool.


00:30:15.660 --> 00:30:16.380
All right.


00:30:16.380 --> 00:30:18.020
Grayson, I think you got the last one here.


00:30:18.020 --> 00:30:19.420
Yes, yes, yes.


00:30:19.420 --> 00:30:22.780
So I have this awesome tool here.


00:30:22.780 --> 00:30:25.700
Like, it's a, it's called Scotch.


00:30:25.700 --> 00:30:30.180
It's really like a mixture of scikit-learn and touch.


00:30:30.180 --> 00:30:35.620
Um, this is really, really cool bit where as we were talking about having a building


00:30:35.620 --> 00:30:37.980
an API that it's easy to integrate.


00:30:38.220 --> 00:30:43.060
So if someone already knows Scikit-Learn and a bit of Torch,


00:30:43.060 --> 00:30:46.060
then you don't really need to learn anything in this tool,


00:30:46.060 --> 00:30:48.860
because everything just fits in together.


00:30:48.860 --> 00:30:53.340
So basically, when you're using Scikit-Learn,


00:30:53.340 --> 00:30:56.220
so if you are not familiar with Scikit-Learn,


00:30:56.220 --> 00:31:01.780
it's just this, what we call, the must-have toolkit for data scientists,


00:31:01.780 --> 00:31:07.100
because here they have created a really good tool with a really good API,


00:31:07.180 --> 00:31:11.260
where you can build an entire pipeline from cleaning your data


00:31:11.260 --> 00:31:16.720
to building interesting models and everything like that.


00:31:16.720 --> 00:31:21.060
But the biggest problem which we've been experiencing


00:31:21.060 --> 00:31:25.520
when working with Scikit-Learn is when it comes to neural networks,


00:31:25.520 --> 00:31:29.160
that you really don't have a lot of power to customize your networks


00:31:29.160 --> 00:31:30.620
in the way that you will…


00:31:32.620 --> 00:31:37.940
Like, it's very limited with this input that you already have here.


00:31:37.940 --> 00:31:40.140
And in most cases, someone says,


00:31:40.140 --> 00:31:45.620
"Well, just create your own neural network classifier or a regressor,


00:31:45.620 --> 00:31:48.540
and then wrap it in the scikit-learn wrapper."


00:31:48.540 --> 00:31:51.660
But then, sometimes one does not want to do that.


00:31:51.660 --> 00:31:57.940
But the nice thing is, another guy just came up with this project,


00:31:57.940 --> 00:32:00.180
which is really, really neat.


00:32:00.260 --> 00:32:04.220
So basically, it's just, I think mostly,


00:32:04.220 --> 00:32:07.620
I will just go about, maybe I should shamelessly


00:32:07.620 --> 00:32:12.620
show you an example in one of my gist,


00:32:12.620 --> 00:32:17.700
which is, I know this is a shameless way to do,


00:32:17.700 --> 00:32:21.060
but it's easier like giving a demo on how it works, right?


00:32:21.060 --> 00:32:23.380
So like, if you're using scikit-learn,


00:32:23.380 --> 00:32:25.780
you are very familiar with all these other tools


00:32:25.780 --> 00:32:26.940
that someone needs to have,


00:32:26.940 --> 00:32:29.460
like the way to split your data, et cetera, et cetera.


00:32:29.460 --> 00:32:33.860
But then it's the pipeline and all that kind of stuff.


00:32:33.860 --> 00:32:35.380
But the coolest thing is,


00:32:35.380 --> 00:32:38.500
instead of using one of the scikit-learn models,


00:32:38.500 --> 00:32:42.100
you can create your own custom neural net.


00:32:42.100 --> 00:32:45.060
This will be like a neural network where we decided


00:32:45.060 --> 00:32:49.580
how many nodes we want in the first layer,


00:32:49.580 --> 00:32:51.780
how many nodes do we want in the second layer,


00:32:51.780 --> 00:32:56.820
and here we can build as many interesting net as we see fit.


00:32:56.820 --> 00:33:00.620
and then basically here we just do the calling of it.


00:33:00.620 --> 00:33:05.520
So this is a very standard PyTorch way of creating your net.


00:33:05.520 --> 00:33:08.420
The awesome part is that now this net,


00:33:08.420 --> 00:33:10.820
forgetting about all this process,


00:33:10.820 --> 00:33:13.020
we can see, so we just create this net,


00:33:13.020 --> 00:33:17.120
wrap it up like this, and now we are using it as part of our pipeline.


00:33:17.120 --> 00:33:20.320
So you can see, I will just go down right here.


00:33:20.320 --> 00:33:24.020
So I'm having my preprocessor, scikit-learn-ish,


00:33:24.020 --> 00:33:25.620
and I'm having my net.


00:33:25.620 --> 00:33:30.980
And the coolest thing is, now I just call this thing as I will do with any scikit-learn model,


00:33:30.980 --> 00:33:38.900
with my classifier.fitThis, and later I will do my classifier.predict these things. So this


00:33:38.900 --> 00:33:46.180
example is we're trying to predict the species of penguin given the data that we have. So this


00:33:46.180 --> 00:33:54.260
whole thing is really, really cool because it obscures the whole fuzz of when you do it in


00:33:54.260 --> 00:34:00.660
PyTorch, pure PyTorch, you will have to write this for loop with optimizer, stepping up,


00:34:00.660 --> 00:34:02.060
stepping down, all these things.


00:34:02.060 --> 00:34:09.060
But here, just transforming to the scikit-learn world, where you just do fit, which just train


00:34:09.060 --> 00:34:14.580
your model, and now you can just do predict as if you're predicting any other scikit-learn


00:34:14.580 --> 00:34:15.580
tool.


00:34:15.580 --> 00:34:21.080
So, Scorch is a really, really tool that just does that.


00:34:21.080 --> 00:34:27.560
So it allows you to connect your Torch net with the Scikit-learn pipeline.


00:34:27.560 --> 00:34:29.860
So this is really, really awesome.


00:34:29.860 --> 00:34:32.480
So I would just encourage people to take a look at it.


00:34:32.480 --> 00:34:37.800
I love the idea of it that basically you can create these PyTorch models and do what you


00:34:37.800 --> 00:34:42.720
need to do to set them up and then just hand them off to the rest of the Scikit-learn world.


00:34:42.720 --> 00:34:45.440
And I can see some really interesting uses for this.


00:34:45.440 --> 00:34:50.040
Like I've got some library and it can either integrate with PyTorch or it can integrate


00:34:50.040 --> 00:34:54.760
with scikit-learn and it just uses this little wrapper to pass it around. I like it.


00:34:54.760 --> 00:35:01.000
Yeah, yeah. So just for me, it just gives me this ability to create these more extended


00:35:01.000 --> 00:35:12.920
algorithms and then just continue using my scikit-learn, my scikit-pipelines. So that's


00:35:12.920 --> 00:35:17.560
the coolest thing that I don't have to change my code because I just want to replace one line and


00:35:17.560 --> 00:35:18.720
and that is the model.


00:35:18.720 --> 00:35:21.040
So I get the model from Scorch


00:35:21.040 --> 00:35:23.240
and then pass it in my ordinary


00:35:23.240 --> 00:35:25.280
something like logistical regression instead.


00:35:25.280 --> 00:35:27.320
Now I'm using Annette.


00:35:27.320 --> 00:35:28.160
- Love it.


00:35:28.160 --> 00:35:29.160
- Nice. - Brian, what do you think?


00:35:29.160 --> 00:35:30.160
You like this pattern?


00:35:30.160 --> 00:35:31.000
- Yeah, I do.


00:35:31.000 --> 00:35:33.880
I like the pattern of being able to use,


00:35:33.880 --> 00:35:36.040
not have to change your entire tool chain,


00:35:36.040 --> 00:35:38.880
just to change one piece.


00:35:38.880 --> 00:35:39.860
Nice and clean. - Yeah.


00:35:39.860 --> 00:35:40.920
I like it as well.


00:35:40.920 --> 00:35:44.080
So that's it for our main items.


00:35:44.080 --> 00:35:46.080
Brian, I've got one I feel like,


00:35:46.080 --> 00:35:48.080
I feel like I should have let you have this one,


00:35:48.080 --> 00:35:49.640
but I grabbed this little extra thing


00:35:49.640 --> 00:35:50.480
I wanted to throw out there


00:35:50.480 --> 00:35:51.840
'cause I thought it would make you happy.


00:35:51.840 --> 00:35:53.080
- Neat, can't wait.


00:35:53.080 --> 00:35:56.880
- Yeah, so Marco Gorelli sent over this thing


00:35:56.880 --> 00:35:59.760
and said, "If you want to work in JupyterLab," right?


00:35:59.760 --> 00:36:01.560
I know that one of your requirements


00:36:01.560 --> 00:36:03.600
for working with tools and shells and stuff


00:36:03.600 --> 00:36:05.160
is that they're Vim-ish.


00:36:05.160 --> 00:36:07.440
You can do Vim keyboard things to it.


00:36:07.440 --> 00:36:08.320
- I'm excited.


00:36:08.320 --> 00:36:12.120
- Yeah, so he sent in this thing called JupyterLab-Vim,


00:36:12.120 --> 00:36:14.880
which is Vim notebook cell bindings for JupyterLab.


00:36:14.880 --> 00:36:16.800
So if you're editing a notebook cell,


00:36:16.800 --> 00:36:20.240
you can do all of your magic Vim keys


00:36:20.240 --> 00:36:23.920
to make all the various changes and whatnot that you want.


00:36:23.920 --> 00:36:25.040
So yeah, cool.


00:36:25.040 --> 00:36:25.880
What do you think?


00:36:25.880 --> 00:36:28.120
- I'm definitely gonna try this, yes.


00:36:28.120 --> 00:36:29.100
- Yeah, awesome.


00:36:29.100 --> 00:36:30.560
All right, let's see, what else do I have?


00:36:30.560 --> 00:36:33.780
I got, oh yeah, this, nevermind my picture.


00:36:33.780 --> 00:36:35.360
I didn't really intend to put that up there,


00:36:35.360 --> 00:36:37.800
but I just wanna point out that I'm gonna be speaking


00:36:37.800 --> 00:36:40.300
and the reason the picture's there is the conference,


00:36:40.300 --> 00:36:43.840
the PyBay conference that's running next month.


00:36:43.840 --> 00:36:45.580
They featured my talk that I'm doing.


00:36:45.580 --> 00:36:46.680
So that's why there's a picture of me,


00:36:46.680 --> 00:36:49.680
but the Pie Bay 2021 food truck edition,


00:36:49.680 --> 00:36:54.680
they have rented out an entire like food cartopia type place


00:36:54.680 --> 00:36:58.960
with a bunch of these pods and having a conference outdoors


00:36:58.960 --> 00:37:02.720
and putting up multimedia like TVs and stuff for each pods.


00:37:02.720 --> 00:37:05.240
Even if you're not at the, like a great line of sight,


00:37:05.240 --> 00:37:06.600
you can still see the live talks,


00:37:06.600 --> 00:37:09.280
but sit outside and drink and eat food cart food


00:37:09.280 --> 00:37:11.000
in California, sounds fun.


00:37:11.000 --> 00:37:13.080
So I'm gonna be talking about,


00:37:13.080 --> 00:37:15.380
what did I say my title of my talk was?


00:37:15.380 --> 00:37:17.140
It's gonna be HTMX plus Flask,


00:37:17.140 --> 00:37:19.360
Modern Python Web Apps Hold the JavaScript.


00:37:19.360 --> 00:37:21.960
So I'm looking forward to giving that talk in there.


00:37:21.960 --> 00:37:24.340
So people, if they're generally in that area,


00:37:24.340 --> 00:37:25.740
they might wanna check that out.


00:37:25.740 --> 00:37:28.120
- I might, that just sounds fun.


00:37:28.120 --> 00:37:29.840
- Yeah, yes, indeed.


00:37:29.840 --> 00:37:32.160
All right, that's it for my extra items.


00:37:32.160 --> 00:37:33.480
You got any extras, Brian?


00:37:33.480 --> 00:37:35.320
- No, how about you, Preston?


00:37:35.320 --> 00:37:37.560
- Yes, I got one.


00:37:37.560 --> 00:37:41.800
I had to actually search if this one has been covered,


00:37:41.800 --> 00:37:43.400
and I was surprised that it has not been covered.


00:37:43.400 --> 00:37:45.300
- I don't think it has, what is this?


00:37:45.300 --> 00:37:49.740
- There's something called py.inv.


00:37:49.740 --> 00:37:51.940
So we've been using py.inv to,


00:37:51.940 --> 00:37:54.180
of course, one can say,


00:37:54.180 --> 00:37:56.580
why don't you just use always.inv,


00:37:56.580 --> 00:37:58.060
then get whatever that is?


00:37:58.060 --> 00:38:01.140
Why do we need to install another package


00:38:01.140 --> 00:38:03.940
just to get the environment variable or something?


00:38:03.940 --> 00:38:06.180
But this is pretty neat.


00:38:06.180 --> 00:38:12.020
It's quite a recent project, I think, and it's rising slowly.


00:38:12.020 --> 00:38:17.600
And there's a lot of contributors and it's very promising.


00:38:17.600 --> 00:38:22.820
So what it does, I think I can just bring it somewhere here.


00:38:22.820 --> 00:38:30.340
It allows you to do all this type convention, casting, etc.


00:38:30.340 --> 00:38:36.420
Like you can say, I'm going to get my debug here and then I will set the defaults and


00:38:36.420 --> 00:38:38.840
also I will do the casting here.


00:38:38.840 --> 00:38:40.100
So this is really, really neat.


00:38:40.100 --> 00:38:43.380
So often when you're reading config files, everything is a string and then you're like,


00:38:43.380 --> 00:38:45.580
oh, this one is a date time, so I got to parse it.


00:38:45.580 --> 00:38:49.220
This one is a float, so I got to parse it.


00:38:49.220 --> 00:38:51.740
But it's really even, it's so much that.


00:38:51.740 --> 00:38:56.260
So there's another way where you can say from decouple import auto config.


00:38:56.260 --> 00:39:01.140
So it goes and searches where that .inv file is.


00:39:01.140 --> 00:39:04.300
So otherwise you can just tell where the environment variable is.


00:39:04.300 --> 00:39:06.700
But it's just neat.


00:39:06.700 --> 00:39:07.740
It's very simple.


00:39:07.740 --> 00:39:10.260
It does what you want it to do.


00:39:10.260 --> 00:39:15.500
So I would really encourage people to look at it.


00:39:15.500 --> 00:39:21.740
We have just changed every place where I've been using .inv or always.inv with this one.


00:39:21.740 --> 00:39:25.900
and it's just helped me clean some unnecessary steps


00:39:25.900 --> 00:39:26.780
in my code.


00:39:26.780 --> 00:39:27.620
- That's pretty cool.


00:39:27.620 --> 00:39:29.740
- Yeah, yeah, great, great idea.


00:39:29.740 --> 00:39:30.900
Definitely check that one out.


00:39:30.900 --> 00:39:34.140
All right, well, I think that's it for all of our items.


00:39:34.140 --> 00:39:35.100
Well, what do you think?


00:39:35.100 --> 00:39:36.380
Should we do a joke?


00:39:36.380 --> 00:39:37.260
- Definitely.


00:39:37.260 --> 00:39:39.020
- I love it 'cause I've almost forgotten what the joke is,


00:39:39.020 --> 00:39:40.500
so it's gonna be new to me as well.


00:39:40.500 --> 00:39:43.500
All right, so the joke is called adoption.


00:39:43.500 --> 00:39:45.620
This comes from monkeyuser.com.


00:39:45.620 --> 00:39:49.020
And you've heard about the Python idea


00:39:49.020 --> 00:39:50.140
of you came for the language,


00:39:50.140 --> 00:39:51.900
but you stayed for the community.


00:39:51.900 --> 00:39:53.820
Well, what if it is a little bit different?


00:39:53.820 --> 00:39:57.480
What if actually people get brought in unwillingly


00:39:57.480 --> 00:39:59.600
and then they kind of realize they like it.


00:39:59.600 --> 00:40:03.360
So here's a picture of like kind of an open field,


00:40:03.360 --> 00:40:05.420
you know, think Gazelle or something.


00:40:05.420 --> 00:40:07.780
And there's a couple of developers just running


00:40:07.780 --> 00:40:09.900
and there's one who is fixated on a butterfly


00:40:09.900 --> 00:40:11.660
who doesn't actually see what's,


00:40:11.660 --> 00:40:14.580
there's a bunch of like a pack of Python developers


00:40:14.580 --> 00:40:15.540
coming to adopt them.


00:40:15.540 --> 00:40:16.980
It says a pack of Python developers


00:40:16.980 --> 00:40:19.440
spotting a junior dev away from its pack,


00:40:19.440 --> 00:40:21.640
initiate their conversion assault.


00:40:21.640 --> 00:40:24.160
(laughing)


00:40:24.160 --> 00:40:25.000
- Ah, yeah.


00:40:25.000 --> 00:40:26.140
This is good. - Yeah, silly.


00:40:26.140 --> 00:40:27.160
Silly, silly.


00:40:27.160 --> 00:40:29.640
- Man, I'm that way even for non-programmers.


00:40:29.640 --> 00:40:33.120
So, and my family just sort of like rolls their eyes


00:40:33.120 --> 00:40:34.080
every time this happens.


00:40:34.080 --> 00:40:38.000
But every time I like get a young,


00:40:38.000 --> 00:40:41.560
somebody young coming over either in college or high school


00:40:41.560 --> 00:40:44.480
or just out of college, I'll say,


00:40:44.480 --> 00:40:46.400
"So if you haven't done it already,


00:40:46.400 --> 00:40:47.840
"no matter what your field is,


00:40:47.840 --> 00:40:50.080
you really should learn how to code.


00:40:50.080 --> 00:40:52.520
And while you're at it, why not just choose Python?


00:40:52.520 --> 00:40:54.080
So I'm trying to make Python developers


00:40:54.080 --> 00:40:55.760
out of every person I meet.


00:40:55.760 --> 00:40:58.600
- I think that's, do them a favor.


00:40:58.600 --> 00:41:01.000
It'll be their superpower amongst


00:41:01.000 --> 00:41:02.640
all their non-developer friends.


00:41:02.640 --> 00:41:05.200
- Yeah, definitely.


00:41:05.200 --> 00:41:06.040
- That's funny.


00:41:06.040 --> 00:41:07.800
- Brian, thanks as always, and Preysen,


00:41:07.800 --> 00:41:09.800
really great to have you on the show this week,


00:41:09.800 --> 00:41:10.920
and thanks for being here.


00:41:10.920 --> 00:41:11.840
- Yeah, thank you, Michael.


00:41:11.840 --> 00:41:12.680
Thank you, Brian.


00:41:12.680 --> 00:41:13.520
- Thank you.


00:41:13.520 --> 00:41:14.340
- You bet, bye.


00:41:14.340 --> 00:41:15.180
- Bye.


00:41:15.180 --> 00:41:16.760
- Thanks for listening to Python Bytes.


00:41:16.760 --> 00:41:19.760
Follow the show on Twitter via @pythonbytes.


00:41:19.760 --> 00:41:22.800
That's Python bytes as in B-Y-T-E-S.


00:41:22.800 --> 00:41:25.640
Get the full show notes over at pythonbytes.fm.


00:41:25.640 --> 00:41:30.040
If you have a news item we should cover, just visit pythonbytes.fm and click submit in the


00:41:30.040 --> 00:41:31.040
nav bar.


00:41:31.040 --> 00:41:33.120
We're always on the lookout for sharing something cool.


00:41:33.120 --> 00:41:37.180
If you want to join us for the live recording, just visit the website and click live stream


00:41:37.180 --> 00:41:40.600
to get notified of when our next episode goes live.


00:41:40.600 --> 00:41:44.880
That's usually happening at noon Pacific on Wednesdays over at YouTube.


00:41:44.880 --> 00:41:48.380
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:41:48.380 --> 00:41:51.700
Thank you for listening and sharing this podcast with your friends and colleagues.

