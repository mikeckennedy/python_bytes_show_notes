WEBVTT

00:00:00.000 --> 00:00:06.400
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:06.400 --> 00:00:13.520
This is episode 338, recorded May 30th, 2023. I'm Michael Kennedy.


00:00:13.520 --> 00:00:14.880
And I am Brian Okken.


00:00:14.880 --> 00:00:19.440
And this episode is brought to you by us, our courses and books and things like that.


00:00:19.440 --> 00:00:25.760
Talk to you more about that later. Also connect with us on Mastodon or all over on Fosstodon


00:00:25.760 --> 00:00:28.760
@mkennedy, @brianokken and @pythonbytes.


00:00:28.760 --> 00:00:30.760
And we love it when people join the live show.


00:00:30.760 --> 00:00:34.760
If you want to be part of that, you can see the next scheduled upcoming one


00:00:34.760 --> 00:00:37.760
at pythonbytes.fm/live and click that notify me


00:00:37.760 --> 00:00:40.760
and YouTube and guess what, it'll notify you when it's live.


00:00:40.760 --> 00:00:43.760
So that's the front matter, Brian.


00:00:43.760 --> 00:00:45.760
I think we should start it off with some basics.


00:00:45.760 --> 00:00:46.760
What do you think?


00:00:46.760 --> 00:00:48.760
>> Yeah, let's go back to the basics.


00:00:48.760 --> 00:00:50.760
Basics of Python packaging.


00:00:50.760 --> 00:00:53.760
So actually this is something near and dear to what I've been paying


00:00:53.760 --> 00:00:59.160
a lot of attention to lately is packaging and just how it's changed.


00:00:59.160 --> 00:01:03.760
And it's kind of in the most people have switched over to pyproject.toml now.


00:01:03.760 --> 00:01:06.460
And that's really what this is about.


00:01:06.460 --> 00:01:10.760
So when you're packaging, especially a pure Python package,


00:01:10.760 --> 00:01:13.960
one of the things I like about this is it's not just for pure Python,


00:01:13.960 --> 00:01:15.460
but that's the easy part.


00:01:15.460 --> 00:01:17.960
If we're using pure Python packaging,


00:01:17.960 --> 00:01:20.760
you're probably using a pyproject.toml now.


00:01:20.760 --> 00:01:24.440
And there has been several write-ups of it,


00:01:24.440 --> 00:01:27.680
but some of them are kind of tool-centric.


00:01:27.680 --> 00:01:32.960
So I like this write-up from Jakey, not sure,


00:01:32.960 --> 00:01:38.280
that talks about just sort of the easy, a fairly standard


00:01:38.280 --> 00:01:38.800
setup.


00:01:38.800 --> 00:01:43.720
So it does talk about the PEPs in this article,


00:01:43.720 --> 00:01:45.920
but you don't really need to know much about that.


00:01:45.920 --> 00:01:48.320
You can just kind of skip to how do I do it.


00:01:48.320 --> 00:01:54.240
So using the PEPs and using pyproject.toml,


00:01:54.240 --> 00:01:59.040
you do have to specify what your build backend is.


00:01:59.040 --> 00:02:04.840
So in the top example of this article, it talks about using flit core,


00:02:04.840 --> 00:02:07.560
and that's one I've used a lot of that.


00:02:07.560 --> 00:02:10.480
But then what else do you put in there?


00:02:10.480 --> 00:02:16.000
So within the rest of the pyproject.toml is mostly metadata.


00:02:16.000 --> 00:02:18.120
You can have other stuff too, like black and everything,


00:02:18.120 --> 00:02:21.520
but for your project building, the project metadata,


00:02:21.520 --> 00:02:23.160
there's not a lot that goes in it.


00:02:23.160 --> 00:02:25.400
I mean, it looks like a lot when you just glance,


00:02:25.400 --> 00:02:28.040
but it's really, you know, it's your name,


00:02:28.040 --> 00:02:31.040
the name of the project, the version, description of it,


00:02:31.040 --> 00:02:34.440
your author, I will point out that this is not minimal


00:02:34.440 --> 00:02:36.440
because it includes the email.


00:02:36.440 --> 00:02:37.800
You don't have to include the email.


00:02:37.800 --> 00:02:40.580
If you don't want to, you can just put the name.


00:02:40.580 --> 00:02:43.160
And where your license and readme and classifiers are.


00:02:43.160 --> 00:02:44.780
The thing, one of the things I wanna highlight


00:02:44.780 --> 00:02:47.400
is make sure you have the license.


00:02:47.400 --> 00:02:50.740
at the very least have your license classifier listed,


00:02:50.740 --> 00:02:55.740
because that's how the license shows up on the PyPI.


00:02:55.740 --> 00:02:58.220
So when PyPI is looking at projects,


00:02:58.220 --> 00:02:59.940
it looks at the classifier.


00:02:59.940 --> 00:03:03.540
And then, and try to throw in which Python's required,


00:03:03.540 --> 00:03:06.160
and then any of your dependencies that you're using,


00:03:06.160 --> 00:03:07.200
and then some links.


00:03:07.200 --> 00:03:10.440
I mean, it's really, when you just talk about it


00:03:10.440 --> 00:03:12.480
as a stream of conscious, it seems like a lot,


00:03:12.480 --> 00:03:13.920
but it's really not that much.


00:03:13.920 --> 00:03:15.320
And you're pretty much done.


00:03:15.320 --> 00:03:18.400
you can do a build now with this.


00:03:18.400 --> 00:03:19.240
This is--


00:03:19.240 --> 00:03:20.660
- I think Brian, before you move on from that,


00:03:20.660 --> 00:03:22.400
that I just noticed that I really like,


00:03:22.400 --> 00:03:25.120
if you do like a setup.py,


00:03:25.120 --> 00:03:28.520
what you've got to put is like the readme


00:03:28.520 --> 00:03:31.640
and details and the descriptions


00:03:31.640 --> 00:03:33.040
and all those kinds of things,


00:03:33.040 --> 00:03:34.240
at least a long description,


00:03:34.240 --> 00:03:36.120
you've got to actually load the file


00:03:36.120 --> 00:03:38.200
and inject the content to the file.


00:03:38.200 --> 00:03:41.120
And here you just put the file names for like the license


00:03:41.120 --> 00:03:43.520
and for the readme and it'll just pull those in, right?


00:03:43.520 --> 00:03:44.360
That's cool.


00:03:44.360 --> 00:03:47.480
It is one of the things I've harassed people about before,


00:03:47.480 --> 00:03:50.720
is it's weird that the readme and license are specified


00:03:50.720 --> 00:03:51.960
completely different.


00:03:51.960 --> 00:03:56.600
So the license has this, like, what, curly braces,


00:03:56.600 --> 00:03:57.840
and then file equals license.


00:03:57.840 --> 00:03:58.440
Dictionary-ish.


00:03:58.440 --> 00:03:59.840
Yeah, it's a dictionary.


00:03:59.840 --> 00:04:02.080
Whereas the readme is just a text string


00:04:02.080 --> 00:04:04.080
with the name of the readme.


00:04:04.080 --> 00:04:05.280
It's odd.


00:04:05.280 --> 00:04:07.000
I think that maybe we could have it


00:04:07.000 --> 00:04:09.840
so the license could just be a string with the license


00:04:09.840 --> 00:04:11.200
file on it also.


00:04:11.200 --> 00:04:16.200
But anyway, there's probably reasons, I'm sure.


00:04:16.200 --> 00:04:18.080
The thing that I also want to point out


00:04:18.080 --> 00:04:20.320
is you can put as many URLs as you want in here.


00:04:20.320 --> 00:04:23.600
You can have like this example as homepage and bug tracker.


00:04:23.600 --> 00:04:28.180
A lot of people just list home that lists the GitHub link,


00:04:28.180 --> 00:04:30.840
but you can have your documentation and other stuff.


00:04:30.840 --> 00:04:33.240
And all of these show up in PyPI also


00:04:33.240 --> 00:04:35.320
when you're, if you're published to PyPI.


00:04:35.320 --> 00:04:37.920
And if you don't want to publish to PyPI,


00:04:37.920 --> 00:04:42.760
One extra is to, that Kim reminds us of,


00:04:42.760 --> 00:04:45.000
is another classifier I learned about,


00:04:45.000 --> 00:04:47.420
is private do not upload,


00:04:47.420 --> 00:04:50.120
which tells PyPI to not upload it.


00:04:50.120 --> 00:04:52.000
So this is all great.


00:04:52.000 --> 00:04:53.280
And a lot of this,


00:04:53.280 --> 00:04:55.440
also, if you want to watch it in video form,


00:04:55.440 --> 00:04:59.000
is covered in the sharing is caring video.


00:04:59.000 --> 00:05:01.500
It's a talk I gave in PyCascades.


00:05:01.500 --> 00:05:03.000
The video is now online.


00:05:03.000 --> 00:05:05.160
We'll put a link in the show notes.


00:05:05.160 --> 00:05:09.540
But this document or this article goes through


00:05:09.540 --> 00:05:10.600
some of the different,


00:05:10.600 --> 00:05:12.400
make sure that you understand the build step


00:05:12.400 --> 00:05:15.240
of Python-inbuild is one way to do it.


00:05:15.240 --> 00:05:16.720
There's other ways.


00:05:16.720 --> 00:05:20.760
But then it talks about some of the discussion


00:05:20.760 --> 00:05:24.680
around why pyproduct.toml is there instead of setup.py.


00:05:24.680 --> 00:05:26.920
I think we're all convinced, hopefully.


00:05:26.920 --> 00:05:28.880
But then also some choices of backends.


00:05:28.880 --> 00:05:32.080
So this article used Flick Core to start with,


00:05:32.080 --> 00:05:35.080
but there's also Hatchling and Setup Tools


00:05:35.080 --> 00:05:36.920
and Poetry Core.


00:05:36.920 --> 00:05:39.820
So why would you choose different ones?


00:05:39.820 --> 00:05:43.080
And one of the, and it's 'cause there's extra features.


00:05:43.080 --> 00:05:46.300
Some of them allow extra tags to go in there.


00:05:46.300 --> 00:05:48.100
And the example they're using,


00:05:48.100 --> 00:05:51.620
and that's one of the reasons why I use Hatch a lot,


00:05:51.620 --> 00:05:56.620
is you can have include and exclude things to say,


00:05:56.620 --> 00:05:59.260
you know, the normal stuff that you'd probably include


00:05:59.260 --> 00:06:01.220
in a source distribution,


00:06:01.220 --> 00:06:05.120
also add the tests, for instance, or something else.


00:06:05.120 --> 00:06:09.040
The test is one that distributors, redistributors,


00:06:09.040 --> 00:06:12.020
like Linux distros, like to have your tests


00:06:12.020 --> 00:06:15.140
in the source distribution, so throwing those in there


00:06:15.140 --> 00:06:16.160
is a good idea.


00:06:16.160 --> 00:06:20.200
I'm not sure why they're in there by default, but anyway.


00:06:20.200 --> 00:06:22.660
Cool discussion.


00:06:22.660 --> 00:06:25.340
One of the things I also love is it talks about


00:06:25.340 --> 00:06:27.620
what happens if you're not just Python.


00:06:27.620 --> 00:06:29.180
What if you have to include C?


00:06:29.180 --> 00:06:31.500
Well, it doesn't really discuss it too much.


00:06:31.500 --> 00:06:32.940
It just points you in the right direction.


00:06:32.940 --> 00:06:35.500
So if you have C or C++ extension,


00:06:35.500 --> 00:06:38.620
there's a scikit-build core that you can use.


00:06:38.620 --> 00:06:40.180
I haven't tried any of these.


00:06:40.180 --> 00:06:44.180
If you're into Mason, you can use Mason Python.


00:06:44.180 --> 00:06:46.260
And then also setup tool supports it.


00:06:46.260 --> 00:06:49.500
So there's a direction for that sort of stuff.


00:06:49.500 --> 00:06:51.460
- Yeah, straightforward.


00:06:51.460 --> 00:06:53.660
Back to the basics, I like it.


00:06:53.660 --> 00:06:55.740
Definitely demystifies some of that.


00:06:55.740 --> 00:06:57.660
Henry points out in the audience,


00:06:57.660 --> 00:07:01.900
license key will likely change via PEP 649.


00:07:01.900 --> 00:07:04.380
And currently, Flit just ignores whatever you put there.


00:07:04.380 --> 00:07:07.820
The true classifiers are the canonical location


00:07:07.820 --> 00:07:09.300
for the license.


00:07:09.300 --> 00:07:10.660
So just FYI.


00:07:10.660 --> 00:07:11.900
Thanks for that, Henry.


00:07:11.900 --> 00:07:15.100
He always has such excellent extra information,


00:07:15.100 --> 00:07:16.060
background information.


00:07:16.060 --> 00:07:18.020
- And we're so lucky to have some smart people


00:07:18.020 --> 00:07:19.860
show up on the chat, so thank you.


00:07:19.860 --> 00:07:20.780
- Yes, absolutely.


00:07:20.780 --> 00:07:24.580
All right, let's talk vectors.


00:07:24.580 --> 00:07:26.540
So I wanna talk about VEX,


00:07:26.540 --> 00:07:30.060
And this project comes to us from Oli,


00:07:30.060 --> 00:07:31.900
who open sourced this, Oli Rice.


00:07:31.900 --> 00:07:33.820
Now, before I actually tell you about what VEX is


00:07:33.820 --> 00:07:36.820
and what it does, let's take a step back


00:07:36.820 --> 00:07:40.380
and talk about the PG vector extension


00:07:40.380 --> 00:07:42.400
for Postgres, the database.


00:07:42.400 --> 00:07:44.420
So this is an open source,


00:07:44.420 --> 00:07:46.740
because VEX has to like build on top of this.


00:07:46.740 --> 00:07:49.980
So this is an open source vector similarity search


00:07:49.980 --> 00:07:53.360
extension for Postgres.


00:07:53.360 --> 00:07:57.260
So you can do things like given a bunch of points


00:07:57.260 --> 00:08:00.100
in different dimensions, this could be X, Y,


00:08:00.100 --> 00:08:02.760
it could be X, Y, Z, could be, you know,


00:08:02.760 --> 00:08:04.840
temperature and time, I don't know, right?


00:08:04.840 --> 00:08:06.880
It could be whatever you come up with.


00:08:06.880 --> 00:08:10.440
It'll give you the exact and approximate nearest neighbors,


00:08:10.440 --> 00:08:12.800
allow you to query that, like given some measurement,


00:08:12.800 --> 00:08:14.320
what other measurement is closest,


00:08:14.320 --> 00:08:17.580
or give me the five measurements or positions


00:08:17.580 --> 00:08:20.880
that are closest to this, gives you L2 distance,


00:08:20.880 --> 00:08:23.080
it'll do the inner product and cosine distance,


00:08:23.080 --> 00:08:25.720
So different metrics, if that makes sense.


00:08:25.720 --> 00:08:29.600
And any language with a Postgres client can speak to it.


00:08:29.600 --> 00:08:30.640
It's pretty cool, right?


00:08:30.640 --> 00:08:31.480
- Yeah.


00:08:31.480 --> 00:08:33.480
- Yeah, so let me see if I can find some examples.


00:08:33.480 --> 00:08:38.360
So I can say, get me the nearest neighbor by L2 distance.


00:08:38.360 --> 00:08:40.760
And it says, the way you would do that directly


00:08:40.760 --> 00:08:43.760
is you say, select star from items,


00:08:43.760 --> 00:08:47.200
order by embedding, whatever the value is,


00:08:47.200 --> 00:08:52.000
is closest to, in this case, the vector value 3, 1, 2,


00:08:52.000 --> 00:08:54.440
and then limit five, just like you do in databases,


00:08:54.440 --> 00:08:55.280
give me the first five.


00:08:55.280 --> 00:08:57.440
So order by closest to farthest,


00:08:57.440 --> 00:08:58.440
and then just give me five,


00:08:58.440 --> 00:09:00.240
that'll give you the five nearest, right?


00:09:00.240 --> 00:09:03.400
You could do things like sort by distance,


00:09:03.400 --> 00:09:04.800
you can find exact matches,


00:09:04.800 --> 00:09:07.360
and you can also do other database things.


00:09:07.360 --> 00:09:10.640
Let's see, like give me like where the ID is


00:09:10.640 --> 00:09:14.020
or is not equal to some value and so on, right?


00:09:14.020 --> 00:09:15.160
So pretty neat.


00:09:15.160 --> 00:09:20.040
Now that's the PG vector extension just for Postgres.


00:09:20.040 --> 00:09:24.200
So you're speaking to it in a special flavor of SQL, sort of.


00:09:24.200 --> 00:09:27.400
In Python, you can talk to this


00:09:27.400 --> 00:09:30.240
using this thing called VEX, okay?


00:09:30.240 --> 00:09:32.580
So with VEX, you just pip install it,


00:09:32.580 --> 00:09:35.140
and then you insert a bunch of vectors,


00:09:35.140 --> 00:09:39.560
and then you can write queries that are more API-based,


00:09:39.560 --> 00:09:41.960
I guess, not just direct SQL statements.


00:09:41.960 --> 00:09:44.320
So you give it the vector that you want to query against,


00:09:44.320 --> 00:09:48.000
and then, you know, like how many you want back.


00:09:48.000 --> 00:09:49.360
If there's a filter to say,


00:09:49.360 --> 00:09:51.620
I only want the ones for a certain year, right?


00:09:51.620 --> 00:09:53.460
Filter it down and then do that query


00:09:53.460 --> 00:09:55.620
based on distance or whatever.


00:09:55.620 --> 00:09:57.100
So pretty cool.


00:09:57.100 --> 00:09:59.560
If people are out there doing that kind of work,


00:09:59.560 --> 00:10:01.980
I think they might find this pretty helpful.


00:10:01.980 --> 00:10:03.860
- Yeah, very.


00:10:03.860 --> 00:10:04.700
Oops.


00:10:04.700 --> 00:10:08.700
- It's not something that I have exact direct use for


00:10:08.700 --> 00:10:11.820
these days, but you know, a lot of scientific


00:10:11.820 --> 00:10:14.660
or geospatial type of things seem relevant.


00:10:14.660 --> 00:10:16.180
- Yeah, I've been spending more and more time


00:10:16.180 --> 00:10:17.620
in SQL queries lately.


00:10:17.620 --> 00:10:19.820
So anything to help with that is good.


00:10:19.820 --> 00:10:20.860
- Yeah, absolutely.


00:10:20.860 --> 00:10:23.240
Now, one final thing, it says in here,


00:10:23.240 --> 00:10:25.140
it says you've gotta have,


00:10:25.140 --> 00:10:27.780
I can't remember which one talked about getting Postgres.


00:10:27.780 --> 00:10:29.540
One of them, yeah, this one says,


00:10:29.540 --> 00:10:30.900
if you don't have a Postgres database,


00:10:30.900 --> 00:10:32.100
see some hosting options.


00:10:32.100 --> 00:10:32.980
And if you're on Mac,


00:10:32.980 --> 00:10:34.620
I just wanna throw out there really quick,


00:10:34.620 --> 00:10:36.700
postgresapp.com.


00:10:36.700 --> 00:10:39.220
All you do for this one is, it's super awesome.


00:10:39.220 --> 00:10:42.400
You download it, you unzip it or un-DMG,


00:10:42.400 --> 00:10:44.220
whatever its packaging format is,


00:10:44.220 --> 00:10:45.940
and it's just a postgres.app.


00:10:45.940 --> 00:10:47.540
You double-click it, Postgres is running.


00:10:47.540 --> 00:10:49.340
you close it, Postgres is not running.


00:10:49.340 --> 00:10:50.620
It auto updates itself.


00:10:50.620 --> 00:10:52.500
Yeah, so pretty sweet.


00:10:52.500 --> 00:10:53.700
And it's open source too.


00:10:53.700 --> 00:10:54.540
- Cool.


00:10:54.540 --> 00:10:55.360
- Neat.


00:10:55.360 --> 00:10:56.540
- Yeah, yeah, very neat.


00:10:56.540 --> 00:10:58.500
- I'll be needing that very soon.


00:10:58.500 --> 00:10:59.840
- Yeah.


00:10:59.840 --> 00:11:00.680
Yeah, cool, check it out.


00:11:00.680 --> 00:11:01.860
Yeah, that one's, that's pretty nice.


00:11:01.860 --> 00:11:04.460
Okay, now before we move on, Brian,


00:11:04.460 --> 00:11:07.020
brought to you by us, this episode is.


00:11:07.020 --> 00:11:08.900
So I wanted to remind people to, you know,


00:11:08.900 --> 00:11:12.540
please check out the brand new TalkBython training apps.


00:11:12.540 --> 00:11:14.860
They're rebuilt for iOS and Android.


00:11:14.860 --> 00:11:16.060
Really think it's a cool experience


00:11:16.060 --> 00:11:17.020
for a lot of people to take it.


00:11:17.020 --> 00:11:20.020
It has offline playback and obviously way better


00:11:20.020 --> 00:11:22.660
on the mobile and tablet type of things.


00:11:22.660 --> 00:11:24.940
And it comes with six free courses


00:11:24.940 --> 00:11:27.500
that you can just tap on and join the free courses


00:11:27.500 --> 00:11:28.860
plus anything you might've gotten.


00:11:28.860 --> 00:11:30.040
So check that out.


00:11:30.040 --> 00:11:31.860
And I wanna shout out your book


00:11:31.860 --> 00:11:33.580
or what do you wanna shout out today?


00:11:33.580 --> 00:11:36.420
- Yeah, well, time is running out,


00:11:36.420 --> 00:11:40.600
but the book is still on a promo.


00:11:40.600 --> 00:11:45.100
So Python Testing with pytest, there is,


00:11:45.100 --> 00:11:46.300
what is the promo?


00:11:46.300 --> 00:11:51.260
It is spring 2023, all caps, all one word,


00:11:51.260 --> 00:11:52.600
and you get 50% off.


00:11:52.600 --> 00:11:54.680
And it's just for like today and tomorrow,


00:11:54.680 --> 00:11:57.300
I think it runs out at the end of May.


00:11:57.300 --> 00:12:01.900
But anytime you want it, there's a 25, that's 50% off.


00:12:01.900 --> 00:12:05.920
But if you want to sign up and get to their email list,


00:12:05.920 --> 00:12:08.600
you can get 25% off normally.


00:12:08.600 --> 00:12:11.480
So anyway, that's a good thing.


00:12:11.480 --> 00:12:12.320
- Excellent.


00:12:12.320 --> 00:12:14.360
Also really quick follow up.


00:12:14.360 --> 00:12:17.900
Henry points out that it was actually PEP 639,


00:12:17.900 --> 00:12:19.940
not 649, typo there.


00:12:19.940 --> 00:12:22.740
- Yeah, so 639 is improved license clarity


00:12:22.740 --> 00:12:25.920
with better package metadata.


00:12:25.920 --> 00:12:28.820
It's in draft, but hopefully there'll be,


00:12:28.820 --> 00:12:30.120
it's in draft, really?


00:12:30.120 --> 00:12:35.120
Anyway, some changes to how you specify the license,


00:12:35.120 --> 00:12:36.900
which would be good, so.


00:12:36.900 --> 00:12:39.820
- All right, let's talk about plagues next.


00:12:39.820 --> 00:12:43.820
- Plagues, like locusts and grasshoppers?


00:12:43.820 --> 00:12:45.180
- Yes, exactly.


00:12:45.180 --> 00:12:46.020
- Nice.


00:12:46.020 --> 00:12:47.780
- I like these kind of plugs.


00:12:47.780 --> 00:12:48.780
These are awesome tools.


00:12:48.780 --> 00:12:51.380
- So I've used Locust before.


00:12:51.380 --> 00:12:53.420
I think you've used Locust for--


00:12:53.420 --> 00:12:55.300
- I love Locust, yeah, for load testing.


00:12:55.300 --> 00:12:56.460
So good.


00:12:56.460 --> 00:13:01.460
- So there's a company, AlterX, maybe?


00:13:01.460 --> 00:13:05.680
Anyway, they've introduced Grasshopper.


00:13:05.680 --> 00:13:07.620
So it's Locust Grasshopper.


00:13:07.620 --> 00:13:10.420
It's a open source Python library for load testing,


00:13:10.420 --> 00:13:12.820
but it's built on Locust.


00:13:12.820 --> 00:13:14.980
So what's the difference?


00:13:14.980 --> 00:13:17.540
So we're linking to an article


00:13:17.540 --> 00:13:19.320
that discusses the introduction


00:13:19.320 --> 00:13:21.820
and discusses why they love Locust and everything,


00:13:21.820 --> 00:13:26.000
which is great, but they have a check,


00:13:26.000 --> 00:13:28.200
like Grasshopper, what does it add?


00:13:28.200 --> 00:13:30.400
Well, it adds a whole bunch of really cool features


00:13:30.400 --> 00:13:32.040
that you might need if you're load testing


00:13:32.040 --> 00:13:34.500
and developing a package


00:13:34.500 --> 00:13:36.980
and keeping track of your load testing over time.


00:13:36.980 --> 00:13:39.420
So it has these extra checks in here


00:13:39.420 --> 00:13:41.640
and checks, if I get this right,


00:13:41.640 --> 00:13:45.260
are things like special validation functions,


00:13:45.260 --> 00:13:48.340
Boolean functions that can run,


00:13:48.340 --> 00:13:50.400
and you can tell different checks


00:13:50.400 --> 00:13:52.740
whether or not they're passing or failing over time,


00:13:52.740 --> 00:13:53.580
which is based on--


00:13:53.580 --> 00:13:56.860
- I see, the document had this text in it


00:13:56.860 --> 00:14:00.020
to make sure it wasn't insane in the response or something.


00:14:00.020 --> 00:14:01.740
- Yeah, actually I'm not quite sure,


00:14:01.740 --> 00:14:03.300
so I'd have to dig into that more.


00:14:03.300 --> 00:14:05.700
But one of the things I really like


00:14:05.700 --> 00:14:07.220
is these custom trends,


00:14:07.220 --> 00:14:10.860
which custom trends and timing thresholds


00:14:10.860 --> 00:14:14.800
and integration with pytest, of course, that's awesome.


00:14:14.800 --> 00:14:17.580
Time series, database integration and reporting.


00:14:17.580 --> 00:14:18.720
This all sounds great.


00:14:18.720 --> 00:14:20.460
One of the things I really love


00:14:20.460 --> 00:14:23.060
that's talked about in the read me a little bit more


00:14:23.060 --> 00:14:26.820
is this idea of like tagging your test suite.


00:14:26.820 --> 00:14:31.820
So tag-based suites, so you can see your load test results


00:14:31.820 --> 00:14:34.660
based on different versions.


00:14:34.660 --> 00:14:37.460
So if you're tagging with using version tagging


00:14:37.460 --> 00:14:40.380
on your repo, you can see what the progression is


00:14:40.380 --> 00:14:45.280
and how well your application is doing based on different load requirements.


00:14:45.280 --> 00:14:47.280
And you can have thresholds like


00:14:47.280 --> 00:14:49.980
with this load, you need to have like 90%


00:14:49.980 --> 00:14:51.980
the speeds of things.


00:14:51.980 --> 00:14:54.780
The other thing is some speed thresholds like


00:14:54.780 --> 00:14:58.580
you can have multiple


00:14:58.580 --> 00:15:02.980
timing little functions that have multiple time,


00:15:02.980 --> 00:15:05.580
multiple HTTP requests.


00:15:05.580 --> 00:15:08.480
So an action that really is


00:15:08.480 --> 00:15:11.480
like a user action often is several interactions,


00:15:11.480 --> 00:15:14.040
like how fast can somebody log in or something like that,


00:15:14.040 --> 00:15:15.600
or go through the checkout.


00:15:15.600 --> 00:15:18.160
That's going to be a multiple sequence thing.


00:15:18.160 --> 00:15:21.260
You can time that under load and under stress,


00:15:21.260 --> 00:15:23.280
and that's a pretty cool addition.


00:15:23.280 --> 00:15:25.660
>> Or even to load this page,


00:15:25.660 --> 00:15:29.680
we're going to, it's probably some complicated JavaScript front-end.


00:15:29.680 --> 00:15:32.160
So it's going to call this API and that API and that API


00:15:32.160 --> 00:15:34.440
just to load this HTML page.


00:15:34.440 --> 00:15:34.880
>> Yeah, sure.


00:15:34.880 --> 00:15:37.820
>> So you want to treat that as like the page is loaded when


00:15:37.820 --> 00:15:40.580
these seven API calls finish, right?


00:15:40.580 --> 00:15:41.660
Something like that.


00:15:41.660 --> 00:15:42.480
- Yeah.


00:15:42.480 --> 00:15:46.460
- 'Cause they're not using HTMX like they should.


00:15:46.460 --> 00:15:50.880
Also, nice shout out to sponsor there, InfluxDB.


00:15:50.880 --> 00:15:53.060
So, pythonbytes.fm/influxdb.


00:15:53.060 --> 00:15:56.160
This is the time series database that it integrates into.


00:15:56.160 --> 00:15:57.940
When I looked at this, Brian, I'm like,


00:15:57.940 --> 00:15:59.500
yeah, but Locust is pretty awesome.


00:15:59.500 --> 00:16:02.580
Why would somebody go create another one of these


00:16:02.580 --> 00:16:04.580
for the Python world when Locust exists?


00:16:04.580 --> 00:16:07.300
And then I read it, it's like, oh, we've extended Locust.


00:16:07.300 --> 00:16:09.780
"Oh, and here's why," and they give some pretty good reasons.


00:16:09.780 --> 00:16:11.940
Another trend that would be cool,


00:16:11.940 --> 00:16:13.900
I don't know if you can actually measure it here,


00:16:13.900 --> 00:16:17.340
but it talks about custom trends is one of the things you can track.


00:16:17.340 --> 00:16:23.340
Things like CPU load and memory load on the server would be really interesting,


00:16:23.340 --> 00:16:26.620
or maybe CPU load on


00:16:26.620 --> 00:16:29.880
the database server while we're hammering the web server.


00:16:29.880 --> 00:16:31.700
If you could pull those kinds of things in,


00:16:31.700 --> 00:16:33.460
that would be really cool.


00:16:33.460 --> 00:16:34.460
>> Maybe you can.


00:16:34.460 --> 00:16:39.740
Yeah, maybe it's kind of get the sense that it might be possible, but I don't let's see then. Not sure.


00:16:39.740 --> 00:16:43.900
But very cool. Yeah, this this looks nice.


00:16:43.900 --> 00:16:44.900
It's definitely worth checking out.


00:16:44.900 --> 00:16:49.460
Some of the check functions, you might be able to like abuse that for that purposes too.


00:16:49.460 --> 00:16:56.140
If while it's while your load test is running, check CPU levels and stuff like that.


00:16:56.140 --> 00:16:57.540
I don't know. Yeah, exactly.


00:16:57.540 --> 00:17:00.220
So anyway, neat, neat project.


00:17:00.220 --> 00:17:01.940
Yeah, that's a good project.


00:17:01.940 --> 00:17:03.780
So Grasshopper, right?


00:17:03.900 --> 00:17:23.820
Yeah, oh, one of the things that that they talk about in the I wasn't clear on it because I went and look at pipey I and looked for grasshopper and I found the wrong one. So it's locust dash grasshopper. So that's the that's the GitHub repos under that. And that's what you pip install also is locust dash grasshopper. So just to be clear,


00:17:23.840 --> 00:17:25.260
- Got it.


00:17:25.260 --> 00:17:29.140
I wonder if it's like a super set, probably.


00:17:29.140 --> 00:17:32.140
So if I have already written a bunch of Locust tests,


00:17:32.140 --> 00:17:34.940
could I run them or how easy is it to--


00:17:34.940 --> 00:17:38.660
- I don't know, but I imagine it's not that bad to convert.


00:17:38.660 --> 00:17:41.360
- Yeah, it looks like the code is super similar.


00:17:41.360 --> 00:17:43.640
So worst case, you maybe change the base class,


00:17:43.640 --> 00:17:46.060
but possibly the base class is like derived


00:17:46.060 --> 00:17:47.860
from the Locust base class that you use


00:17:47.860 --> 00:17:50.380
for your test cases or test suites.


00:17:50.380 --> 00:17:52.580
Yeah, anyway, I haven't played with it yet,


00:17:52.580 --> 00:17:53.420
but it looks cool.


00:17:53.420 --> 00:17:55.160
- The readme's got tons of information too.


00:17:55.160 --> 00:17:59.420
Good job on loading up the readme with lots of examples.


00:17:59.420 --> 00:18:01.060
- Indeed.


00:18:01.060 --> 00:18:03.200
And before we move on, Kim says,


00:18:03.200 --> 00:18:05.460
it could possibly hook into telemetry tooling


00:18:05.460 --> 00:18:07.460
like Prometheus, which would enable metrics


00:18:07.460 --> 00:18:09.100
from other servers and stuff like that.


00:18:09.100 --> 00:18:11.140
Yeah, that's kinda what I was talking about,


00:18:11.140 --> 00:18:13.940
but not with actually concrete ways of doing it,


00:18:13.940 --> 00:18:15.300
like Prometheus, so cool.


00:18:15.300 --> 00:18:16.340
- Neat.


00:18:16.340 --> 00:18:20.580
- Yeah, and I wanna talk to you about something


00:18:20.580 --> 00:18:23.820
that is near and dear to this podcast.


00:18:23.820 --> 00:18:27.020
We talk about a lot of topics, right, Brian?


00:18:27.020 --> 00:18:27.860
- Yeah.


00:18:27.860 --> 00:18:31.060
- And if you go over to Python Bytes


00:18:31.060 --> 00:18:33.260
and you pick a particular episode


00:18:33.260 --> 00:18:34.380
and you scroll through here,


00:18:34.380 --> 00:18:37.740
you can see it is chock full of links.


00:18:37.740 --> 00:18:40.620
So one of the things you might wanna do,


00:18:40.620 --> 00:18:42.560
you might wanna say, oh, I'm listening to this.


00:18:42.560 --> 00:18:44.740
I wanna remember not all of them,


00:18:44.740 --> 00:18:47.400
but just three things that I can come back to.


00:18:47.400 --> 00:18:50.540
And if you're on your iThing, your iPhone,


00:18:50.540 --> 00:18:53.100
iPad, et cetera, or even on your Mac,


00:18:53.100 --> 00:18:55.980
technically, if you've got an Apple Silicon Mac,


00:18:55.980 --> 00:18:59.500
you can use this thing called MemoCast.


00:18:59.500 --> 00:19:04.500
So MemoCast was created by Daniel Engvall.


00:19:04.500 --> 00:19:06.980
It's interesting on its own,


00:19:06.980 --> 00:19:08.500
but it's also interesting in a way


00:19:08.500 --> 00:19:12.020
to kind of script iOS with Python,


00:19:12.020 --> 00:19:13.520
which I hadn't really thought about doing.


00:19:13.520 --> 00:19:15.580
So first of all, let me tell you about MemoCast


00:19:15.580 --> 00:19:17.620
and then you can think how this might apply to you.


00:19:17.620 --> 00:19:19.940
So this is a small iOS app


00:19:19.940 --> 00:19:23.200
that allows you to add links heard about in a podcast


00:19:23.200 --> 00:19:26.700
as a reminder, so you can check them off your reminder list,


00:19:26.700 --> 00:19:29.020
you know, the @reminder app when you're done with them.


00:19:29.020 --> 00:19:30.260
So check this out.


00:19:30.260 --> 00:19:32.740
Imagine, this is reading the website,


00:19:32.740 --> 00:19:35.540
imagine you just as often as I,


00:19:35.540 --> 00:19:37.300
imagine that you just as often as I do


00:19:37.300 --> 00:19:40.400
listen to a podcast such as Python Bytes, a fantastic one.


00:19:40.400 --> 00:19:41.340
Thank you, thank you. - Nice.


00:19:41.340 --> 00:19:43.620
- Using Google Podcasts, walk around,


00:19:43.620 --> 00:19:45.660
you know, you're doing it while you're out


00:19:45.660 --> 00:19:48.740
and maybe busy like mowing the lawn or something, right?


00:19:48.740 --> 00:19:51.540
And then there's some thing talked about,


00:19:51.540 --> 00:19:52.900
you wish you had more time to check out.


00:19:52.900 --> 00:19:54.720
Thankfully, the reference in the show notes,


00:19:54.720 --> 00:19:56.820
but you'd have to look it up and go through it


00:19:56.820 --> 00:19:58.860
and copy paste and all that.


00:19:58.860 --> 00:20:02.700
So there's a little video here, notice this.


00:20:02.700 --> 00:20:03.540
- Nice.


00:20:03.540 --> 00:20:04.360
- On this page.


00:20:04.360 --> 00:20:06.980
And it shows all you gotta do is say share,


00:20:06.980 --> 00:20:10.160
go to the podcast player, say share, click memo cast,


00:20:10.160 --> 00:20:11.540
and it gives it a second,


00:20:11.540 --> 00:20:13.300
then it has a list of all the links


00:20:13.300 --> 00:20:15.100
that it's discovered in there.


00:20:15.100 --> 00:20:16.020
Isn't that cool, Brian?


00:20:16.020 --> 00:20:16.860
- That is neat.


00:20:16.860 --> 00:20:18.580
- I can't really zoom that without the,


00:20:18.580 --> 00:20:22.580
I can't really zoom it without the responsive design only making it smaller.


00:20:22.580 --> 00:20:25.580
But so how is this possible?


00:20:25.580 --> 00:20:28.580
The thing you share it to is you don't share it directly to MemoCast.


00:20:28.580 --> 00:20:30.580
You say run in Pythonista.


00:20:30.580 --> 00:20:38.580
And so this is a Python script that Daniel wrote that basically you run it through Pythonista,


00:20:38.580 --> 00:20:40.580
Python 10 on iOS.


00:20:40.580 --> 00:20:46.580
It does a guessing request or something called over to our website and parses out all the links


00:20:46.580 --> 00:20:49.180
and then turns that into a UI that you can interact with.


00:20:49.180 --> 00:20:49.820
Cool, right?


00:20:49.820 --> 00:20:51.460
>> That's all done on the phone then?


00:20:51.460 --> 00:20:51.780
>> Yeah.


00:20:51.780 --> 00:20:52.300
>> That's pretty cool.


00:20:52.300 --> 00:20:54.180
>> Yeah, it's pretty cool.


00:20:54.180 --> 00:20:57.420
Basically, this is an example,


00:20:57.420 --> 00:21:00.060
supports Python by StockPython and RealPython as


00:21:00.060 --> 00:21:01.660
the three supported podcasts,


00:21:01.660 --> 00:21:03.460
but you can integrate new ones if you wish.


00:21:03.460 --> 00:21:06.100
You install it once you have Python Nista,


00:21:06.100 --> 00:21:09.420
which I think cost $10 US one time.


00:21:09.420 --> 00:21:11.140
But then you can install it,


00:21:11.140 --> 00:21:13.860
scanning the QR code here with Python Nista,


00:21:13.860 --> 00:21:14.980
and that will download it.


00:21:14.980 --> 00:21:16.900
then you can just turn it into a thing that you can run.


00:21:16.900 --> 00:21:18.300
It also talks about how you add


00:21:18.300 --> 00:21:20.560
new podcasts if you want to add a different one.


00:21:20.560 --> 00:21:23.300
But that's somewhat interesting.


00:21:23.300 --> 00:21:26.580
I think what's more interesting is he took this Python code,


00:21:26.580 --> 00:21:27.940
and the code is right here,


00:21:27.940 --> 00:21:32.420
to build a scriptable GUI for iOS,


00:21:32.420 --> 00:21:33.500
which I think is pretty cool.


00:21:33.500 --> 00:21:35.460
>> Yeah, that is nice. Cool.


00:21:35.460 --> 00:21:38.980
>> So talked about, I did try to do this with Kivy and other stuff,


00:21:38.980 --> 00:21:40.940
but let me tell you the build chain and


00:21:40.940 --> 00:21:44.020
code signing and all of that is like a nightmare.


00:21:44.020 --> 00:21:48.660
And so here you just write a Python script and just run it inside of this app that already exists.


00:21:48.660 --> 00:21:55.220
And final bonus before I call all the time on this one, Daniel also discovered that if you're on


00:21:55.220 --> 00:22:02.900
a Mac with a Apple Silicon, then you can run Pythonista as an iOS app within macOS. So you go


00:22:02.900 --> 00:22:07.540
to the App Store, search for it on Mac, and it doesn't come up, but then you click, say,


00:22:07.540 --> 00:22:12.260
show me tablet, you know, iPad apps, and then it'll come up. And then it integrates with your


00:22:12.260 --> 00:22:15.720
your favorite IDE such as PyCharm and you can run it.


00:22:15.720 --> 00:22:18.480
So you can develop these little things on


00:22:18.480 --> 00:22:21.120
your Mac with a proper keyboard and everything,


00:22:21.120 --> 00:22:24.880
and then just deploy it to Python and Easter on iOS.


00:22:24.880 --> 00:22:25.840
>> Yeah, that's pretty cool.


00:22:25.840 --> 00:22:28.900
>> So yeah, people can check that out, MemoCast.


00:22:28.900 --> 00:22:31.200
It's cool that it's about our podcast in this way,


00:22:31.200 --> 00:22:33.920
but it's also more cool that it just shows you how to take


00:22:33.920 --> 00:22:36.980
Python and leverage Python and Easter a little bit


00:22:36.980 --> 00:22:38.740
more than maybe I realized you could,


00:22:38.740 --> 00:22:40.640
like an OS integration level.


00:22:40.640 --> 00:22:42.120
- Yeah, I didn't know you could do that.


00:22:42.120 --> 00:22:42.960
That's cool.


00:22:42.960 --> 00:22:44.480
- I did not either.


00:22:44.480 --> 00:22:45.520
- Nice.


00:22:45.520 --> 00:22:48.240
- And I guess before we jump out of here as well,


00:22:48.240 --> 00:22:49.800
Kim points out on Android,


00:22:49.800 --> 00:22:51.560
I have some but not tons of experience with,


00:22:51.560 --> 00:22:54.040
you can run Python code with QPython


00:22:54.040 --> 00:22:57.280
should someone want to emulate this for Android.


00:22:57.280 --> 00:22:58.120
Thanks, Kim.


00:22:58.120 --> 00:22:58.940
- Cool.


00:22:58.940 --> 00:23:00.600
- All right, is that all of our topics, Brian?


00:23:00.600 --> 00:23:02.600
- That is all of our main topics, yes.


00:23:02.600 --> 00:23:05.400
- Yes, of course, 'cause we always have extras.


00:23:05.400 --> 00:23:06.560
- Yeah. - I'm joking.


00:23:06.560 --> 00:23:07.720
Any extras for you, though?


00:23:07.720 --> 00:23:09.720
- Yeah, I can kick this off.


00:23:09.720 --> 00:23:14.720
So just a few, a shout out from,


00:23:14.720 --> 00:23:16.160
oh, who wrote this?


00:23:16.160 --> 00:23:17.120
I'm not sure.


00:23:17.120 --> 00:23:20.260
Hugo. - Hugo Van Kimenad.


00:23:20.260 --> 00:23:23.960
- Wrote, "Help test Python 3.12 beta."


00:23:23.960 --> 00:23:25.920
So 3.12 is in beta.


00:23:25.920 --> 00:23:27.920
If you are a package maintainer


00:23:27.920 --> 00:23:29.600
or just your own application,


00:23:29.600 --> 00:23:31.120
you may as well start testing


00:23:31.120 --> 00:23:33.280
to make sure that you don't have any surprises.


00:23:33.280 --> 00:23:36.840
So this article does talk through


00:23:36.840 --> 00:23:38.960
basically how to hook up your GitHub actions


00:23:38.960 --> 00:23:42.420
so that you're testing 3.12 also.


00:23:42.420 --> 00:23:47.040
And then whether it's the official Ubuntu latest


00:23:47.040 --> 00:23:49.860
or the Dead Snakes version, a couple of ways to do it.


00:23:49.860 --> 00:23:53.380
And then even if you're using Travis CI still, bye,


00:23:53.380 --> 00:23:56.940
anyway, you can do that with that as well.


00:23:56.940 --> 00:23:58.340
So that's the first.


00:23:58.340 --> 00:24:01.240
Secondly, I wanted to say that


00:24:01.240 --> 00:24:04.820
at the Python Software Foundation blog,


00:24:04.820 --> 00:24:06.900
there is a whole bunch of new articles.


00:24:06.900 --> 00:24:08.080
They basically wrote up,


00:24:08.080 --> 00:24:10.440
There's articles writing up all the different things


00:24:10.440 --> 00:24:13.100
that happened at the Python Language Summit.


00:24:13.100 --> 00:24:15.360
I haven't gone through these, they're just available.


00:24:15.360 --> 00:24:16.940
Wanted to shout that out.


00:24:16.940 --> 00:24:18.540
It's some interesting stuff though.


00:24:18.540 --> 00:24:20.520
- There is, I just interviewed Brett Cannon


00:24:20.520 --> 00:24:22.460
over on Talk Python about this.


00:24:22.460 --> 00:24:25.480
He gave us a walkthrough of all the presentations


00:24:25.480 --> 00:24:28.640
and thoughts at the Language Summit.


00:24:28.640 --> 00:24:31.480
- Okay, and then from the news from the weird,


00:24:31.480 --> 00:24:33.160
I don't have much information about this


00:24:33.160 --> 00:24:37.400
other than on the Python Package Index blog,


00:24:37.400 --> 00:24:39.360
I say, "Hey, PyPI was subpoenaed,


00:24:39.360 --> 00:24:42.360
"and this thing happened, and we complied,


00:24:42.360 --> 00:24:44.240
"and talked to lawyers, and it's weird,


00:24:44.240 --> 00:24:47.100
"but it's just odd."


00:24:47.100 --> 00:24:47.940
- Yeah.


00:24:47.940 --> 00:24:49.920
- So how about you, any extras?


00:24:49.920 --> 00:24:51.020
- Yeah, I wonder if this has to do


00:24:51.020 --> 00:24:53.200
with some of the malware or cryptojacking--


00:24:53.200 --> 00:24:54.040
- Maybe.


00:24:54.040 --> 00:24:55.240
- Stuff that was uploaded to it,


00:24:55.240 --> 00:24:56.120
and they're like, "All right, we're gonna try


00:24:56.120 --> 00:24:58.080
"to track down some of these people."


00:24:58.080 --> 00:25:00.840
There are certain places that are not allowed


00:25:00.840 --> 00:25:03.740
to say whether they received a request,


00:25:03.740 --> 00:25:05.100
and I think this is not a subpoena,


00:25:05.100 --> 00:25:07.320
this is more of a, what is it, FASA?


00:25:07.320 --> 00:25:12.320
like the more international crime investigation laws.


00:25:12.320 --> 00:25:15.360
So we'll have a subpoena canaries,


00:25:15.360 --> 00:25:17.400
that it'll be like the canary will be here


00:25:17.400 --> 00:25:19.480
unless we are subpoenaed, then the canary's gone.


00:25:19.480 --> 00:25:21.240
We won't say anything, but we'll just,


00:25:21.240 --> 00:25:23.520
this bird won't be on the page or something anymore,


00:25:23.520 --> 00:25:25.360
so you can kind of know.


00:25:25.360 --> 00:25:26.920
But yeah, it's kind of cool there,


00:25:26.920 --> 00:25:28.480
they're being transparent about that.


00:25:28.480 --> 00:25:29.320
- Yeah, one of the--


00:25:29.320 --> 00:25:30.680
- #transparency it says right there.


00:25:30.680 --> 00:25:32.600
- Yeah, and one of the things that was interesting


00:25:32.600 --> 00:25:34.360
is that they got asked for addresses,


00:25:34.360 --> 00:25:36.400
including mailing and residential addresses,


00:25:36.400 --> 00:25:38.080
but they don't collect that.


00:25:38.080 --> 00:25:41.880
They just, I mean, that information isn't saved.


00:25:41.880 --> 00:25:42.720
So it's not there.


00:25:42.720 --> 00:25:43.920
- Yeah, I'm sure it's a form


00:25:43.920 --> 00:25:45.320
and like we would like this information.


00:25:45.320 --> 00:25:46.480
Well, we don't have that.


00:25:46.480 --> 00:25:47.960
So we'll give you what we got.


00:25:47.960 --> 00:25:49.680
- Yeah, okay.


00:25:49.680 --> 00:25:50.520
- Nice, all right.


00:25:50.520 --> 00:25:52.600
I got a couple of real quick ones here.


00:25:52.600 --> 00:25:54.440
Not Python needs one.


00:25:54.440 --> 00:25:56.760
I wrote something called, "You can ignore this post."


00:25:56.760 --> 00:25:58.840
Trying to get a lot of attention, of course.


00:25:58.840 --> 00:26:01.320
What it actually was is I just wrote about


00:26:01.320 --> 00:26:06.320
the github.com/github/gitignore repo,


00:26:06.380 --> 00:26:08.400
which has all, like when you go to GitHub


00:26:08.400 --> 00:26:09.860
and you say create a new project,


00:26:09.860 --> 00:26:12.180
and it says do you want an ignore file,


00:26:12.180 --> 00:26:13.620
and it gives you a list.


00:26:13.620 --> 00:26:15.780
These are all the ignore files


00:26:15.780 --> 00:26:17.500
for every language supported there,


00:26:17.500 --> 00:26:21.200
including Python, which is in here somewhere right there.


00:26:21.200 --> 00:26:24.300
And so you can actually see what they all are.


00:26:24.300 --> 00:26:25.260
You could even do a PR,


00:26:25.260 --> 00:26:27.180
like we really need to start ignoring,


00:26:27.180 --> 00:26:28.540
you know, if there's a new file format


00:26:28.540 --> 00:26:30.800
that's like a build output of some new


00:26:30.800 --> 00:26:34.060
pyproject.toml tooling, and it starts to,


00:26:34.060 --> 00:26:35.000
you know, it needs to be ignored,


00:26:35.000 --> 00:26:37.080
you could say do a PR against this.


00:26:37.080 --> 00:26:39.480
So every repo on GitHub starts to adopt it.


00:26:39.480 --> 00:26:44.120
But also if you're doing say Python and front end stuff,


00:26:44.120 --> 00:26:47.040
you could go look for node and you could select one


00:26:47.040 --> 00:26:49.840
and then copy some stuff out of another


00:26:49.840 --> 00:26:51.880
to kind of create a combined one, right?


00:26:51.880 --> 00:26:53.880
So you're not like, well, is it node or is it Python?


00:26:53.880 --> 00:26:55.240
I really want the ignore for.


00:26:55.240 --> 00:26:59.360
So anyway, that article is just sort of about that,


00:26:59.360 --> 00:27:01.200
really short, people can check that out.


00:27:01.200 --> 00:27:04.440
- I use that all the time because I'm also on GitLab


00:27:04.440 --> 00:27:07.840
and GitLab doesn't fill those out for you.


00:27:07.840 --> 00:27:09.080
- Oh yeah, I hadn't really thought about it,


00:27:09.080 --> 00:27:11.440
but you can nab it for other purposes as well, right?


00:27:11.440 --> 00:27:12.280
- Yeah, yeah.


00:27:12.280 --> 00:27:14.080
- And then someone on Massadon pointed out


00:27:14.080 --> 00:27:16.720
you can do Knox Python ignore,


00:27:16.720 --> 00:27:18.840
and I think it'll generate that file for you


00:27:18.840 --> 00:27:20.600
and uses that as the backend.


00:27:20.600 --> 00:27:22.160
I think, I think so.


00:27:22.160 --> 00:27:23.960
Some of the Knox and some incantation


00:27:23.960 --> 00:27:26.720
will generate an ignore file for you.


00:27:26.720 --> 00:27:29.200
- And if we have that wrong, somebody will correct us.


00:27:29.200 --> 00:27:30.760
- They sure will, and we appreciate it.


00:27:30.760 --> 00:27:33.560
And speaking of incantations, are you ready for the joke?


00:27:33.560 --> 00:27:34.400
- Yes.


00:27:34.400 --> 00:27:37.160
Okay, so here's the joke for developers.


00:27:37.160 --> 00:27:40.280
It says, "Careful, or you might end up summoning a demon."


00:27:40.280 --> 00:27:43.680
And it has two categories, what you do in programming


00:27:43.680 --> 00:27:46.240
and what you do in demon summoning.


00:27:46.240 --> 00:27:47.080
So first one is,


00:27:47.080 --> 00:27:50.400
"You must know a language unspoken by mankind."


00:27:50.400 --> 00:27:52.080
Programming, check.


00:27:52.080 --> 00:27:53.680
Demon summoning, check.


00:27:53.680 --> 00:27:58.040
"Requires that you be exact or suffer dire consequences."


00:27:58.040 --> 00:27:59.160
Programming, check.


00:27:59.160 --> 00:28:01.080
Demon summoning, check.


00:28:01.080 --> 00:28:04.080
"Involves much cursing, swearing of oaths,


00:28:04.080 --> 00:28:06.880
and pleading with a higher power programming check.


00:28:06.880 --> 00:28:07.820
(laughs)


00:28:07.820 --> 00:28:09.000
Demon summoning check.


00:28:09.000 --> 00:28:12.160
Another one is not understanding the true power you wield


00:28:12.160 --> 00:28:15.400
or the consequences of your actions programming check.


00:28:15.400 --> 00:28:16.880
Demon summoning check.


00:28:16.880 --> 00:28:18.480
The only differentiation,


00:28:18.480 --> 00:28:21.200
which I think is debatable is candles.


00:28:21.200 --> 00:28:23.200
Do you use candles to accomplish this job?


00:28:23.200 --> 00:28:24.560
Programming, no.


00:28:24.560 --> 00:28:25.840
Demon summoning, yes.


00:28:25.840 --> 00:28:27.720
And if you look over on Reddit,


00:28:27.720 --> 00:28:29.880
the comments are pretty glorious.


00:28:29.880 --> 00:28:30.840
(laughs)


00:28:30.840 --> 00:28:31.680
- That's funny.


00:28:32.600 --> 00:28:35.900
Let me see if I'm finding these good ones just here.


00:28:35.900 --> 00:28:38.140
Someone has said something like,


00:28:38.140 --> 00:28:41.940
I've been trying for hours to get this daemon to run


00:28:41.940 --> 00:28:43.040
and I just can't get it to work,


00:28:43.040 --> 00:28:44.460
that's what I'm writing on.


00:28:44.460 --> 00:28:47.920
Well, I'm trying daemon, not daemon, right?


00:28:47.920 --> 00:28:48.760
Of course.


00:28:48.760 --> 00:28:49.580
- Daemon.


00:28:49.580 --> 00:28:51.460
- And then someone else points out,


00:28:51.460 --> 00:28:54.220
you know, there actually is a candle app platform,


00:28:54.220 --> 00:28:56.800
which sounds truly demonic to me.


00:28:56.800 --> 00:28:58.640
So let me describe, this is like a real thing,


00:28:58.640 --> 00:28:59.480
this is not a joke.


00:28:59.480 --> 00:29:01.340
Candlescript.org, somebody created this.


00:29:01.340 --> 00:29:03.500
Let me lay out the beautiful technologies


00:29:03.500 --> 00:29:05.740
that CandleScript combines.


00:29:05.740 --> 00:29:08.100
Are you ready to use the new open source platform


00:29:08.100 --> 00:29:13.100
that unifies core features of XSLT, XQuery, XML schema,


00:29:13.100 --> 00:29:16.460
RelaxNG, BNF, and XQuery update


00:29:16.460 --> 00:29:19.860
and more into a single language called Candle?


00:29:19.860 --> 00:29:23.140
No, please, no, XSLT, no.


00:29:23.140 --> 00:29:24.820
Yeah, that sounds pretty demonic already,


00:29:24.820 --> 00:29:27.260
so I'm a little suspicious of that one.


00:29:27.260 --> 00:29:30.660
- Yeah, and I think actual daemon summoning,


00:29:30.660 --> 00:29:33.580
probably worried about climate change


00:29:33.580 --> 00:29:37.680
and probably switching to low carbon lighting.


00:29:37.680 --> 00:29:41.240
So probably LEDs now instead of actual candles.


00:29:41.240 --> 00:29:44.340
- Yep, LEDs, gotta be careful about home automation.


00:29:44.340 --> 00:29:47.500
You might complete all the check boxes.


00:29:47.500 --> 00:29:51.000
- Yeah, I think sometimes you have to execute a child.


00:29:51.000 --> 00:29:52.780
That's funny, child processes.


00:29:52.780 --> 00:29:54.500
- Yeah, they both execute children, right?


00:29:54.500 --> 00:29:56.900
I mean, that's a pretty rough one.


00:29:56.900 --> 00:30:00.340
Kim, I believe, maybe has done enough XSLT as I have


00:30:00.340 --> 00:30:02.200
to know that it should never ever be done.


00:30:02.200 --> 00:30:04.940
And says, "Candlescript has just triggered my PTSD."


00:30:04.940 --> 00:30:06.940
(both laughing)


00:30:06.940 --> 00:30:08.060
- Yeah, funny.


00:30:08.060 --> 00:30:09.460
- The battle XML days.


00:30:09.460 --> 00:30:12.260
Well, that's it, Brian.


00:30:12.260 --> 00:30:13.180
Great show as always.


00:30:13.180 --> 00:30:14.180
Thank you for being here.


00:30:14.180 --> 00:30:15.020
- Well, thank you.


00:30:15.020 --> 00:30:16.060
- Mm-hmm.


00:30:16.060 --> 00:30:17.360
Thanks to you everyone for listening


00:30:17.360 --> 00:30:18.860
and those of you who joined live.

