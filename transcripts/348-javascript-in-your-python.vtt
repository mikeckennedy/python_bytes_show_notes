WEBVTT

00:00:00.000 --> 00:00:02.220
- Hello, and welcome to Python Bytes


00:00:02.220 --> 00:00:03.920
where we deliver Python news and headlines


00:00:03.920 --> 00:00:05.440
directly to your earbuds.


00:00:05.440 --> 00:00:10.440
This is episode 348 recorded August 15th, 2023.


00:00:10.440 --> 00:00:11.480
I'm Michael Kennedy.


00:00:11.480 --> 00:00:12.680
- And I'm Brian Okken.


00:00:12.680 --> 00:00:15.880
- And Brian, this episode is brought to everybody by us.


00:00:15.880 --> 00:00:19.600
I think you might be making a more concrete case for that


00:00:19.600 --> 00:00:21.420
than other times today.


00:00:21.420 --> 00:00:24.080
So, but yeah, check out all of our courses,


00:00:24.080 --> 00:00:25.400
books, things like that.


00:00:25.400 --> 00:00:27.840
It genuinely makes it possible for us


00:00:27.840 --> 00:00:28.880
to do this kind of stuff.


00:00:28.880 --> 00:00:30.760
So we really appreciate it. - Yeah, we love doing it,


00:00:30.760 --> 00:00:32.280
but yeah, also.


00:00:32.280 --> 00:00:33.560
- Yeah, yeah, also.


00:00:33.560 --> 00:00:37.160
And if you want to be part of the live show


00:00:37.160 --> 00:00:38.640
and you're not watching live now,


00:00:38.640 --> 00:00:41.400
Tuesdays at 11, at on by Set FM/Live,


00:00:41.400 --> 00:00:42.460
all the details there.


00:00:42.460 --> 00:00:44.040
Brian, let's kick it off.


00:00:44.040 --> 00:00:45.200
What's your first item?


00:00:45.200 --> 00:00:47.820
- Actually, I'm kind of on a packaging,


00:00:47.820 --> 00:00:49.440
a little bit of a packaging thing today.


00:00:49.440 --> 00:00:50.640
- Okay, okay.


00:00:50.640 --> 00:00:52.320
- Brett Cannon wrote an article called


00:00:52.320 --> 00:00:55.080
"Differentiating Between Writing Down Dependencies


00:00:55.080 --> 00:00:58.880
to use packages and for packages themselves.


00:00:58.880 --> 00:01:01.740
It's kind of a big title, but here's the idea.


00:01:01.740 --> 00:01:03.600
And I've been thinking about this also.


00:01:03.600 --> 00:01:07.200
So I really, there's requirements.txt files


00:01:07.200 --> 00:01:09.240
and those are often used for applications.


00:01:09.240 --> 00:01:13.280
And then there's, but that was really when we had like,


00:01:13.280 --> 00:01:16.760
that was either that or setup.py for packages.


00:01:16.760 --> 00:01:18.560
And now we have pyproject.toml.


00:01:18.560 --> 00:01:21.080
So can't we just use that?


00:01:21.080 --> 00:01:23.040
I mean, I kind of want to,


00:01:23.040 --> 00:01:25.340
But it doesn't quite work that way.


00:01:25.340 --> 00:01:28.380
You install dependencies with a pyproject.toml


00:01:28.380 --> 00:01:30.980
by installing your package.


00:01:30.980 --> 00:01:34.220
And you can install it like pip install.e.


00:01:34.220 --> 00:01:36.500
I think, Brett, yeah, pip install.e.


00:01:36.500 --> 00:01:37.580
- Dash e, dot.


00:01:37.580 --> 00:01:39.460
- Dash e, right.


00:01:39.460 --> 00:01:40.380
On the current directory,


00:01:40.380 --> 00:01:42.840
or you can give it a local project directory.


00:01:42.840 --> 00:01:45.740
And you can even do optional things


00:01:45.740 --> 00:01:47.820
like optional test dependencies and stuff.


00:01:47.820 --> 00:01:51.260
And I think when you do the dash e,


00:01:51.260 --> 00:01:54.420
it installs your optional test dependencies also,


00:01:54.420 --> 00:01:55.260
I'm not sure.


00:01:55.260 --> 00:01:58.320
But, and I'm used to that 'cause I do packages also,


00:01:58.320 --> 00:02:01.040
but we still have the requirements.txt file,


00:02:01.040 --> 00:02:03.160
there really are for different things.


00:02:03.160 --> 00:02:07.140
So Brett has talks about this a lot in here


00:02:07.140 --> 00:02:10.920
and looking at why there's a thing called


00:02:10.920 --> 00:02:12.520
like project dependencies


00:02:12.520 --> 00:02:15.600
and the project is really meant for packaging.


00:02:15.600 --> 00:02:18.960
It's really meant just for the whole packaging system.


00:02:18.960 --> 00:02:23.780
so that when you install something, install a wheel,


00:02:23.780 --> 00:02:26.560
it knows how to get packages for it.


00:02:26.560 --> 00:02:27.400
That's it.


00:02:27.400 --> 00:02:29.340
It's not supposed to be for applications.


00:02:29.340 --> 00:02:32.680
So really that's kind of the discussion around here,


00:02:32.680 --> 00:02:33.840
around this article.


00:02:33.840 --> 00:02:36.160
However, there's a couple ideas.


00:02:36.160 --> 00:02:41.160
He references, also references back a Donald stuffed article


00:02:41.160 --> 00:02:45.840
from 2013 about setup.py versus requirements.txt.


00:02:45.840 --> 00:02:47.920
But like I said, that was setup.py.


00:02:47.920 --> 00:02:50.840
Wait, maybe we could do something better.


00:02:50.840 --> 00:02:54.440
Brett's consideration is maybe we could have


00:02:54.440 --> 00:02:58.660
some standard, something, some other file


00:02:58.660 --> 00:03:00.320
that we could have.


00:03:00.320 --> 00:03:03.120
I personally, I have a,


00:03:03.120 --> 00:03:05.880
I think that maybe we could expand Pyproject.toml.


00:03:05.880 --> 00:03:07.280
I really like the toml thing.


00:03:07.280 --> 00:03:11.080
So maybe we could either have a requirements.toml,


00:03:11.080 --> 00:03:12.760
or maybe we could have like,


00:03:12.760 --> 00:03:15.720
instead of a project section of the toml file,


00:03:15.720 --> 00:03:19.060
maybe we could have maybe an application section.


00:03:19.060 --> 00:03:20.520
Maybe that would work.


00:03:20.520 --> 00:03:23.580
- So yeah, I think like a dev requirements


00:03:23.580 --> 00:03:25.760
even just in the pyproject.com


00:03:25.760 --> 00:03:27.380
all seems pretty straightforward to me.


00:03:27.380 --> 00:03:31.020
- Yeah, I mean, I run into it in other places too,


00:03:31.020 --> 00:03:35.120
like just in a Git repo that has like a couple


00:03:35.120 --> 00:03:38.860
of Python tools in it that people can install on their own,


00:03:38.860 --> 00:03:40.780
but they might have some requirements.


00:03:40.780 --> 00:03:41.620
How do you list those?


00:03:41.620 --> 00:03:43.280
Do you stick them as applications?


00:03:43.280 --> 00:03:46.920
I mean, requirements.txt is normally the thing that's used for,


00:03:46.920 --> 00:03:51.760
for like Django web applications and things like that.


00:03:51.760 --> 00:03:55.680
So maybe requirements.txt is fine, but I think--


00:03:55.680 --> 00:03:58.080
>> Perhaps. What I have is I have, for my world,


00:03:58.080 --> 00:04:01.960
I have requirements.txt, which is like from the web apps and stuff.


00:04:01.960 --> 00:04:04.600
That is what is required for the app to run.


00:04:04.600 --> 00:04:07.040
Without that, you can't make it go.


00:04:07.040 --> 00:04:09.200
Then I have requirements-dev.txt.


00:04:09.200 --> 00:04:10.560
I've seen that pattern a lot.


00:04:10.560 --> 00:04:12.820
Then to actually generate those,


00:04:12.820 --> 00:04:14.780
I use pip-tools and pip compiles.


00:04:14.780 --> 00:04:17.560
I have requirements.in and requirements-dev.in,


00:04:17.560 --> 00:04:19.660
and then I can auto-update


00:04:19.660 --> 00:04:22.100
all the dependencies and keep them in sync.


00:04:22.100 --> 00:04:24.300
That's how I do it these days.


00:04:24.300 --> 00:04:29.820
>> But now, even people with Django or other things are


00:04:29.820 --> 00:04:32.780
using a pyproject.toml also to


00:04:32.780 --> 00:04:35.620
store their black settings and things like that.


00:04:35.620 --> 00:04:37.340
>> Yeah.


00:04:37.340 --> 00:04:39.740
>> We're using pyproject.toml,


00:04:39.740 --> 00:04:41.580
the PI project Tomo for more things.


00:04:41.580 --> 00:04:43.460
And I think maybe we could extend it for this.


00:04:43.460 --> 00:04:44.700
Anyway, that's my hope.


00:04:44.700 --> 00:04:45.180
It's reasonable.


00:04:45.180 --> 00:04:45.540
Yeah.


00:04:45.540 --> 00:04:48.180
So anyway, what do you got for us?


00:04:48.180 --> 00:04:51.340
Well, let's, let's monkey around a little bit with the Python monkey


00:04:51.340 --> 00:04:53.020
with the Python monkey.


00:04:53.020 --> 00:04:53.620
That's cool.


00:04:53.620 --> 00:04:54.820
That's it is.


00:04:54.820 --> 00:05:00.420
So this comes to us from created by will Pringle, I believe amongst others.


00:05:00.420 --> 00:05:03.700
Let's see on the contributors here.


00:05:03.700 --> 00:05:06.940
Um, there, yeah, there we go.


00:05:06.940 --> 00:05:07.380
Yeah.


00:05:07.380 --> 00:05:09.340
So a bunch of folks that work on this project.


00:05:09.340 --> 00:05:12.660
It's not super popular with only 276 stars,


00:05:12.660 --> 00:05:16.300
but I think it might be a pretty darn interesting


00:05:16.300 --> 00:05:18.740
compatibility layer for Python.


00:05:18.740 --> 00:05:19.800
So what do I mean by that?


00:05:19.800 --> 00:05:24.180
So imagine I'm, you can look at this from two perspectives.


00:05:24.180 --> 00:05:27.380
So don't scoff at one if you prefer the other.


00:05:27.380 --> 00:05:30.300
So imagine I'm a JavaScript developer


00:05:30.300 --> 00:05:32.680
and I've got a ton of cool JavaScript code


00:05:32.680 --> 00:05:35.440
that not just for the web front end,


00:05:35.440 --> 00:05:37.400
but you know, kind of in the Node.js sense,


00:05:37.400 --> 00:05:40.380
like a bunch of utilities or a bunch of libraries that, that work


00:05:40.380 --> 00:05:41.900
and do certain things, right?


00:05:41.900 --> 00:05:42.300
Yeah.


00:05:42.300 --> 00:05:45.900
But I also have a Python app and I'd like to somehow use those together.


00:05:45.900 --> 00:05:49.100
So Python monkey is a straight way to put it.


00:05:49.100 --> 00:05:50.780
It basically hosts.


00:05:50.780 --> 00:05:57.140
Ja a JavaScript, a full on high performance JavaScript JIT compiled to almost native


00:05:57.140 --> 00:06:01.020
performance JavaScript engine inside of Python through pip install.


00:06:01.020 --> 00:06:07.160
So if I wanted to use some of the JavaScript code, I just write my Python


00:06:07.160 --> 00:06:11.840
application and for that function or that functionality, I just import the


00:06:11.840 --> 00:06:15.980
job, you know, first spider monkey or Python monkey.


00:06:15.980 --> 00:06:20.360
And then I import the JavaScript files that you would use.


00:06:20.360 --> 00:06:22.380
And then you just call them like Python functions.


00:06:22.380 --> 00:06:23.360
Okay.


00:06:23.360 --> 00:06:27.640
Or reverse I'm writing a Python application and you know, one


00:06:27.640 --> 00:06:32.400
option to make like slow loops go faster would be to write that in


00:06:32.400 --> 00:06:35.380
Cython and Cython is getting better with the Cython three release that


00:06:35.380 --> 00:06:37.420
we discussed already in the previous episode.


00:06:37.420 --> 00:06:40.860
But JavaScript, because this thing,


00:06:40.860 --> 00:06:43.300
the SpiderMonkey JavaScript engine


00:06:43.300 --> 00:06:45.160
is the one that I believe Firefox uses,


00:06:45.160 --> 00:06:48.380
does JIT compilation to native code,


00:06:48.380 --> 00:06:50.820
it basically is near-native performance as well.


00:06:50.820 --> 00:06:53.400
So if you'd like, you could rewrite that part


00:06:53.400 --> 00:06:56.660
in TypeScript or JavaScript and run just that section.


00:06:56.660 --> 00:06:59.100
And it uses things like shared memory


00:06:59.100 --> 00:07:00.740
between JavaScript and Python.


00:07:00.740 --> 00:07:03.560
So if you've got like a string or a list,


00:07:03.560 --> 00:07:05.300
those are the same objects,


00:07:05.300 --> 00:07:06.900
which is pretty crazy.


00:07:06.900 --> 00:07:07.740
- Wow.


00:07:07.740 --> 00:07:08.560
- At least for the strings.


00:07:08.560 --> 00:07:11.220
Okay, so let's look at some examples.


00:07:11.220 --> 00:07:12.760
There's an article by Will,


00:07:12.760 --> 00:07:15.020
and no, I will not log into Medium.


00:07:15.020 --> 00:07:15.860
You're partially evil.


00:07:15.860 --> 00:07:20.860
Okay, so here's an article by Will here.


00:07:20.860 --> 00:07:23.100
So let's look at some code examples.


00:07:23.100 --> 00:07:25.820
All right, so import PythonMonkey as PM,


00:07:25.820 --> 00:07:29.020
and then you say PM eval and give it JavaScript code,


00:07:29.020 --> 00:07:30.340
and boom, it runs that.


00:07:30.340 --> 00:07:31.460
That's one way.


00:07:31.460 --> 00:07:34.020
What you can do maybe is more interesting is look at this.


00:07:34.020 --> 00:07:38.420
I can say EM dot eval and give it an anonymous JavaScript function.


00:07:38.420 --> 00:07:42.420
And then what comes back, not evaluating it, but just the thing to


00:07:42.420 --> 00:07:44.140
define the function in JavaScript.


00:07:44.140 --> 00:07:44.420
Okay.


00:07:44.420 --> 00:07:48.260
And then what comes back is an object that itself is a function.


00:07:48.260 --> 00:07:49.300
Okay.


00:07:49.300 --> 00:07:50.660
So that's pretty cool.


00:07:50.660 --> 00:07:51.100
Yeah.


00:07:51.100 --> 00:07:53.940
Um, like, and hold on, there's two parts of this.


00:07:53.940 --> 00:07:58.740
So I've got a, I've created a JavaScript function that's jet compiled in spider


00:07:58.740 --> 00:08:02.800
monkey through this eval and what the, I didn't say this part, what the function


00:08:02.800 --> 00:08:07.760
takes is given a function, it will call that function passing hello world to it.


00:08:07.760 --> 00:08:09.280
Okay, the string hello world.


00:08:09.280 --> 00:08:10.280
Okay.


00:08:10.280 --> 00:08:15.280
So what you do is you get the function back as a Python function and then they pass print.


00:08:15.280 --> 00:08:20.960
It somehow proxies the print function into the JavaScript space and then JavaScript calls


00:08:20.960 --> 00:08:25.080
the Python print, which then comes back to the console, to the terminal.


00:08:25.080 --> 00:08:26.080
Wow.


00:08:26.080 --> 00:08:27.080
Okay.


00:08:27.080 --> 00:08:28.080
That's some deep integration, right?


00:08:28.080 --> 00:08:30.560
That's some pretty wild stuff.


00:08:30.560 --> 00:08:31.560
Let's see.


00:08:31.560 --> 00:08:33.560
else can we do here that's pretty interesting?


00:08:33.560 --> 00:08:37.840
I can say, given a JavaScript module like I described,


00:08:37.840 --> 00:08:42.240
I can, here's an example, it has a say hello export.


00:08:42.240 --> 00:08:45.680
Then you can just say pm.require that JavaScript module, and


00:08:45.680 --> 00:08:48.160
now you've got all the function,


00:08:48.160 --> 00:08:52.160
all the export behavior from that JavaScript module, right, which is cool.


00:08:52.160 --> 00:08:55.920
Yeah, there's some more examples in here.


00:08:55.920 --> 00:08:57.440
The other angle that's pretty interesting,


00:08:57.440 --> 00:08:59.040
there's two more angles that are interesting.


00:08:59.040 --> 00:09:03.480
Because it uses spider monkey and spider monkey is awesome with WebAssembly,


00:09:03.480 --> 00:09:08.960
allows you to run an untrusted WASM code from languages like C, C++ and


00:09:08.960 --> 00:09:15.120
rust, you can now basically do, any, you can call any WebAssembly code as


00:09:15.120 --> 00:09:17.320
well that you'd like inside of your function.


00:09:17.320 --> 00:09:18.080
Now we're getting into it.


00:09:18.080 --> 00:09:19.040
Yeah.


00:09:19.040 --> 00:09:22.840
It supports things like async and await using the async and await keywords to


00:09:22.840 --> 00:09:30.120
handle the callback nature of JavaScript, like the dot then type of deferreds and different


00:09:30.120 --> 00:09:35.000
things. So you can just async and await those behaviors, right? Just await a WebAssembly


00:09:35.000 --> 00:09:40.040
call, which is pretty excellent. Yeah. So there's a bunch of examples, some pretty cool


00:09:40.040 --> 00:09:47.800
graphics here with Spock and Captain Kurg going, "My mind to your mind, my object to


00:09:47.800 --> 00:09:50.720
your dicks, your dicks to my objects.


00:09:50.720 --> 00:09:52.160
It's pretty awesome there.


00:09:52.160 --> 00:09:54.680
Another angle that is worth considering is


00:09:54.680 --> 00:09:58.040
this allows the entire Python data science stack


00:09:58.040 --> 00:10:01.720
to become accessible to JavaScript developers, right?


00:10:01.720 --> 00:10:02.560
- Yeah.


00:10:02.560 --> 00:10:05.200
- So if you wanna use the machine learning stuff,


00:10:05.200 --> 00:10:07.840
if you wanna use pandas or pollers, right?


00:10:07.840 --> 00:10:11.800
You just write your code and then do the integration here.


00:10:11.800 --> 00:10:14.240
And yeah, that's pretty much it.


00:10:14.240 --> 00:10:17.280
It finishes with some funny little pictures here


00:10:17.280 --> 00:10:22.000
of a Noah on the ark, got a Python and JavaScript,


00:10:22.000 --> 00:10:23.120
which looks like a penguin,


00:10:23.120 --> 00:10:24.560
and then it has the Python monkey.


00:10:24.560 --> 00:10:26.400
What is that? What the heck is this?


00:10:26.400 --> 00:10:30.320
All right. Anyway, that's Python monkey,


00:10:30.320 --> 00:10:33.760
which is, I think, potentially interesting.


00:10:33.760 --> 00:10:35.760
>> With the WebAssembly and stuff,


00:10:35.760 --> 00:10:39.040
you could potentially have every other function in


00:10:39.040 --> 00:10:43.080
your system be implemented by a different language.


00:10:43.080 --> 00:10:48.080
- Yeah, I'm bored of C, C++, Rust, Go.


00:10:48.080 --> 00:10:51.360
What else do we want to write it in?


00:10:51.360 --> 00:10:53.520
- Yeah, why not everything?


00:10:53.520 --> 00:10:55.520
Just make sure that your application's


00:10:55.520 --> 00:10:57.000
only maintainable by you.


00:10:57.000 --> 00:10:58.120
That'd be-- - Exactly.


00:10:58.120 --> 00:10:59.920
Like, do you know how many compilers you need to do this?


00:10:59.920 --> 00:11:00.960
- No, this-- - You need them all.


00:11:00.960 --> 00:11:02.840
- That's kind of fun to joke about,


00:11:02.840 --> 00:11:05.000
but this does look pretty cool, so yeah.


00:11:05.000 --> 00:11:06.120
- Yeah, it does look pretty cool.


00:11:06.120 --> 00:11:08.680
So, you know, congrats to the folks there.


00:11:08.680 --> 00:11:10.600
This, maybe it'll go somewhere, we'll see.


00:11:10.600 --> 00:11:11.960
It's pretty interesting.


00:11:11.960 --> 00:11:16.120
I think also it's worth noting that there is


00:11:16.120 --> 00:11:19.120
a somewhere in here that there's a comparison


00:11:19.120 --> 00:11:19.960
to other things.


00:11:19.960 --> 00:11:21.660
So this apparently is not the only time


00:11:21.660 --> 00:11:25.440
such a type of creation has been attempted.


00:11:25.440 --> 00:11:26.720
So it says there are other projects


00:11:26.720 --> 00:11:28.200
that already do JavaScript and Python,


00:11:28.200 --> 00:11:31.240
such as Js2Py, PyV8 and MetaCol.


00:11:31.240 --> 00:11:33.960
But there's a bunch of different drawbacks or stuff.


00:11:33.960 --> 00:11:36.700
And so this is why we created it basically in addition.


00:11:36.700 --> 00:11:39.560
So Js2Py is implemented entirely in Python,


00:11:39.560 --> 00:11:40.680
which sounds awesome,


00:11:40.680 --> 00:11:43.040
except, you know, V8 and SpiderMonkey


00:11:43.040 --> 00:11:45.520
compiled a native code and run ultra fast.


00:11:45.520 --> 00:11:47.240
Whereas, you know, if you just run it in Python,


00:11:47.240 --> 00:11:49.240
it probably doesn't have any of those things, right?


00:11:49.240 --> 00:11:50.240
- Yeah.


00:11:50.240 --> 00:11:54.520
- PyV8 has a wrapper around Google's V8 JavaScript engine,


00:11:54.520 --> 00:11:56.520
which is great, but it's just super low level.


00:11:56.520 --> 00:11:59.640
You just like talk directly to the JavaScript bits,


00:11:59.640 --> 00:12:01.080
which for things, for example,


00:12:01.080 --> 00:12:02.360
doesn't have any sync and await.


00:12:02.360 --> 00:12:04.800
And finally, MetaCall is extensible,


00:12:04.800 --> 00:12:06.000
embeddable and interoperable,


00:12:06.000 --> 00:12:09.200
but you've got to install a bunch of different run times


00:12:09.200 --> 00:12:10.400
outside of just pip install.


00:12:10.400 --> 00:12:13.800
So anyway, if people are going, but it exists, it does,


00:12:13.800 --> 00:12:16.360
but this apparently is why it exists like this.


00:12:16.360 --> 00:12:20.360
Yeah, and John out in the audience says,


00:12:20.360 --> 00:12:23.640
I do this, but going the other way using transcript.


00:12:23.640 --> 00:12:24.480
- Okay.


00:12:24.480 --> 00:12:26.960
- Interesting, something new to check out.


00:12:26.960 --> 00:12:27.800
Thanks, John.


00:12:27.800 --> 00:12:29.180
- I'll take that out.


00:12:29.180 --> 00:12:30.720
- All right, over to you, Brian.


00:12:30.720 --> 00:12:32.840
- Well, I just, one more thing.


00:12:32.840 --> 00:12:36.520
Alvaro says, Python monkey perfect


00:12:36.520 --> 00:12:38.520
for works on my machine certification.


00:12:38.520 --> 00:12:41.160
there is an official works on my machine certification.


00:12:41.160 --> 00:12:43.240
If you have, I know we talked about it before,


00:12:43.240 --> 00:12:45.920
it's glorious, it comes with a sticker.


00:12:45.920 --> 00:12:47.480
Hire your application code,


00:12:47.480 --> 00:12:49.420
getting the latest version of any recent changes


00:12:49.420 --> 00:12:51.360
from other developers, purely optional


00:12:51.360 --> 00:12:53.240
and not a requirement for certification.


00:12:53.240 --> 00:12:54.920
Launch the application,


00:12:54.920 --> 00:12:57.280
cause one code path in the code


00:12:57.280 --> 00:12:58.320
you're checking to be executed.


00:12:58.320 --> 00:13:01.280
The preferred way to do this is with ad hoc manual testing.


00:13:01.280 --> 00:13:02.960
You can omit this step if the code change


00:13:02.960 --> 00:13:04.700
is less than five lines,


00:13:04.700 --> 00:13:06.960
or if in the developer's professional opinion,


00:13:06.960 --> 00:13:09.120
the code cannot possibly result in an error.


00:13:09.120 --> 00:13:11.820
Check your code into version control, you're certified.


00:13:11.820 --> 00:13:13.000
(laughing)


00:13:13.000 --> 00:13:13.840
- Yeah. - There we go.


00:13:13.840 --> 00:13:15.760
Two jokes in one episode, how about that?


00:13:15.760 --> 00:13:16.600
- Awesome.


00:13:16.600 --> 00:13:18.640
Well, we got a little bit more,


00:13:18.640 --> 00:13:21.000
a little more humor to add to it.


00:13:21.000 --> 00:13:24.760
So because I thought it was a serious article,


00:13:24.760 --> 00:13:27.000
and it is, it's just funny and weird.


00:13:27.000 --> 00:13:29.040
So Seth Larson wrote,


00:13:29.040 --> 00:13:31.840
"Quirks of Python Package Versioning."


00:13:31.840 --> 00:13:35.140
Package, Python package versioning, that's it.


00:13:35.140 --> 00:13:38.780
So we're used to, well, we're kind of getting used to


00:13:38.780 --> 00:13:43.100
the world where we all have SemVer like 1.2.3


00:13:43.100 --> 00:13:45.020
and for semantic versioning,


00:13:45.020 --> 00:13:49.320
but we also have calendar versioning like 2023.6.1.


00:13:49.320 --> 00:13:52.620
And then there's stuff like you can add a prerelease suffix


00:13:52.620 --> 00:13:56.420
and things like that, but it gets way weirder and fun.


00:13:56.420 --> 00:14:00.280
So, and I have noticed this, especially with GitHub,


00:14:00.280 --> 00:14:01.980
like GitHub versioning,


00:14:01.980 --> 00:14:05.020
sometimes people will do a V versioning.


00:14:05.020 --> 00:14:07.060
So there's V prefixes you can do.


00:14:07.060 --> 00:14:11.580
And I guess you can pull that into your Python application


00:14:11.580 --> 00:14:12.420
version as well.


00:14:12.420 --> 00:14:14.060
Why not?


00:14:14.060 --> 00:14:16.380
So V versions are allowed.


00:14:16.380 --> 00:14:18.980
Epic versions-- did you know about Epic versions?


00:14:18.980 --> 00:14:20.260
I just learned about this.


00:14:20.260 --> 00:14:21.340
>>I don't think so.


00:14:21.340 --> 00:14:29.020
>>So you can have an exclamation point separating your Epic


00:14:29.020 --> 00:14:31.580
from the rest of your version.


00:14:31.580 --> 00:14:38.220
So like one bang 2.0.0 would be Epic one version 2.0.0.


00:14:38.220 --> 00:14:42.260
>> I got to tell you, I already had a hard time deciding when the two or when the middle


00:14:42.260 --> 00:14:43.660
zero or the last zero changes.


00:14:43.660 --> 00:14:47.620
If I put a number in front and exclamation point, I'm going to just lost.


00:14:47.620 --> 00:14:48.620
>> Yeah, apparently.


00:14:48.620 --> 00:14:50.340
>> Too much decision, too many decisions.


00:14:50.340 --> 00:14:54.940
>> Apparently some systems use colons for epics, but Python chose, this is all based


00:14:54.940 --> 00:14:57.980
on Python PEP 440.


00:14:57.980 --> 00:15:03.980
And the yeah, apparently we chose the bang symbol or is that's bang right?


00:15:03.980 --> 00:15:06.380
The exclamation point.


00:15:06.380 --> 00:15:10.220
So and that just kind of looks like a one if you did one bang one that would be hard


00:15:10.220 --> 00:15:16.540
to tell local versions and is you can you can extend after you have versions you can


00:15:16.540 --> 00:15:23.620
have alphanumeric and other stuff like you know your plus I don't know if the plus is


00:15:23.620 --> 00:15:25.260
part of it anyway.


00:15:25.260 --> 00:15:28.000
So after your normal version, like 1.0.0,


00:15:28.000 --> 00:15:31.980
he has an example of plus Ubuntu-1.


00:15:31.980 --> 00:15:36.980
This gets normalized, but this is kind of nice for local.


00:15:36.980 --> 00:15:40.280
It's local versions because PyPI doesn't like it.


00:15:40.280 --> 00:15:43.980
So PyPI will not let you push up local versions to PyPI,


00:15:43.980 --> 00:15:45.960
which is probably right.


00:15:45.960 --> 00:15:46.980
It's local builds.


00:15:46.980 --> 00:15:53.140
Long versions, apparently you can use the first 217 digits


00:15:53.740 --> 00:15:55.660
a pie and that works fine.


00:15:55.660 --> 00:15:59.100
As is one of the digits, there's no limits.


00:15:59.100 --> 00:16:01.420
Case insensitivity.


00:16:01.420 --> 00:16:04.280
So yeah, okay, that's fine.


00:16:04.280 --> 00:16:08.060
It gets normalized lower or something so that,


00:16:08.060 --> 00:16:12.340
you know, capital RC1 is the same as lowercase RC1.


00:16:12.340 --> 00:16:13.780
That's appropriate.


00:16:13.780 --> 00:16:17.740
So pre-release, I've seen, I've actually used pre-release,


00:16:17.740 --> 00:16:19.500
post, I don't know if I use pre.


00:16:19.500 --> 00:16:22.420
I've seen pre and I've used post-release occasionally.


00:16:22.420 --> 00:16:25.060
Although it's so weird that people don't understand


00:16:25.060 --> 00:16:27.840
what's going on, so I don't do that anymore.


00:16:27.840 --> 00:16:31.660
But apparently pre, post and dev are not mutually exclusive.


00:16:31.660 --> 00:16:35.500
You can have all three allowed in one version.


00:16:35.500 --> 00:16:38.300
Why would you do that?


00:16:38.300 --> 00:16:43.020
So, and yeah, no delimiters needed.


00:16:43.020 --> 00:16:44.800
There's just a lot of fun here.


00:16:44.800 --> 00:16:48.100
So implicit hyphens are allowed.


00:16:48.100 --> 00:16:50.500
So this is both the serious and non-serious.


00:16:50.500 --> 00:16:52.580
Oh, implicit zeros are weird.


00:16:52.580 --> 00:16:57.580
So if you have a version 2.0.4,


00:16:57.580 --> 00:17:02.100
you can just keep adding a bunch of .0.0.0s


00:17:02.100 --> 00:17:03.300
and it works fine.


00:17:03.300 --> 00:17:05.340
It resolves to 2.0.4.


00:17:05.340 --> 00:17:06.180
That's awesome.


00:17:06.180 --> 00:17:10.460
I definitely need to advertise some version,


00:17:10.460 --> 00:17:15.460
say just pick up 2.0.3.0.0.0.0.


00:17:15.460 --> 00:17:19.020
- Yeah, it makes it sound tough.


00:17:19.020 --> 00:17:20.700
Yeah, I mean, in releases we've had.


00:17:20.700 --> 00:17:24.220
Anyway, totally, totally fun articles.


00:17:24.220 --> 00:17:25.060
So thanks, Seth.


00:17:25.060 --> 00:17:26.100
Brian, do you hear that?


00:17:26.100 --> 00:17:26.940
No.


00:17:26.940 --> 00:17:30.060
That's the sound of a million regexs dying.


00:17:30.060 --> 00:17:31.980
(laughing)


00:17:31.980 --> 00:17:33.380
They're supposed to be scanning


00:17:33.380 --> 00:17:35.740
for the version string in your code.


00:17:35.740 --> 00:17:40.740
Yeah, but maybe that's why Python just has it as a string.


00:17:40.740 --> 00:17:44.980
If you do dunder version equals, it's just a string, so.


00:17:44.980 --> 00:17:45.820
Yeah.


00:17:47.100 --> 00:17:51.060
Act last, if you use C++ compiled code, so I guess native code, that's


00:17:51.060 --> 00:17:53.520
like not part of just source only Python.


00:17:53.520 --> 00:17:56.560
Is there a way to define which compiler you use in the versioning?


00:17:56.560 --> 00:17:59.820
Maybe that Ubuntu type variant, that local version, but


00:17:59.820 --> 00:18:01.060
you can't publish that, right?


00:18:01.060 --> 00:18:02.540
Uh, you can't push the pipe.


00:18:02.540 --> 00:18:02.780
Yeah.


00:18:02.780 --> 00:18:04.140
I like that.


00:18:04.140 --> 00:18:08.280
But like, for instance, it's, Hey, I'm not sure how this, this relates


00:18:08.280 --> 00:18:13.540
to, like the wheel naming the wheel download naming thing.


00:18:13.540 --> 00:18:13.820
Yeah.


00:18:13.820 --> 00:18:15.460
Um, so, yeah.


00:18:15.780 --> 00:18:18.340
I'm sure there's some metadata you could put in there, right?


00:18:18.340 --> 00:18:20.420
Like you can do Dunder version, right?


00:18:20.420 --> 00:18:23.780
You could just do Dunder compiler and say, you know, print that out and it'll tell you,


00:18:23.780 --> 00:18:26.660
but it's not, there's no standard that I can think of.


00:18:26.660 --> 00:18:30.500
- Well, there's the, there is the wheel standard.


00:18:30.500 --> 00:18:31.700
I just don't remember where the link is.


00:18:31.700 --> 00:18:33.500
- But that's more platform-based, right?


00:18:33.500 --> 00:18:34.860
Than a compiler.


00:18:34.860 --> 00:18:36.420
- Oh, right. It's not compiler-based.


00:18:36.420 --> 00:18:37.620
It's platform-based.


00:18:37.620 --> 00:18:39.540
- I mean, the compiler's got to compile to the platform,


00:18:39.540 --> 00:18:45.740
but it doesn't say like use GCC versus LLVM, Clang, Visual Studio, whatever, right?


00:18:45.740 --> 00:18:46.240
Right.


00:18:46.240 --> 00:18:46.740
Yeah.


00:18:46.740 --> 00:18:51.120
And usually I'm just doing pure Python, so I have all listed, but the wheel.


00:18:51.120 --> 00:18:51.840
Anyway.


00:18:51.840 --> 00:18:52.640
Exactly.


00:18:52.640 --> 00:18:53.140
So.


00:18:53.140 --> 00:18:53.880
Exactly.


00:18:53.880 --> 00:18:54.720
All right.


00:18:54.720 --> 00:18:59.880
Well, with all that Python monkeying around, I could just barely stand it.


00:18:59.880 --> 00:19:00.740
Oh dear.


00:19:00.740 --> 00:19:02.140
About bear type.


00:19:02.140 --> 00:19:02.680
Nice.


00:19:02.680 --> 00:19:04.520
The bear metal type checker.


00:19:04.520 --> 00:19:05.020
Okay.


00:19:05.020 --> 00:19:08.680
So people know I'm a huge fan of types, Python, type hints, and all those things.


00:19:08.680 --> 00:19:13.580
They're super, super empowering and make the editors so much more helpful.


00:19:13.580 --> 00:19:17.380
means you don't have to go into the documentation and go,


00:19:17.380 --> 00:19:18.540
what does this take again?


00:19:18.540 --> 00:19:21.820
I know it takes an args here, but is args a dictionary?


00:19:21.820 --> 00:19:22.640
Is it a class?


00:19:22.640 --> 00:19:23.580
Is it a string?


00:19:23.580 --> 00:19:24.940
Is it a, what is it?


00:19:24.940 --> 00:19:25.780
Right?


00:19:25.780 --> 00:19:26.900
Like crazy stuff like that, right?


00:19:26.900 --> 00:19:29.820
So types are awesome for conveying that information


00:19:29.820 --> 00:19:31.540
without asking to go to the docs


00:19:31.540 --> 00:19:33.360
or some other place to figure it out.


00:19:33.360 --> 00:19:35.900
However, what Python type hints,


00:19:35.900 --> 00:19:37.980
annotations generally don't do,


00:19:37.980 --> 00:19:40.580
as the word hint would indicate,


00:19:40.580 --> 00:19:42.500
they don't require the hint.


00:19:42.500 --> 00:19:45.300
You can use tools like mypy and mypy will say


00:19:45.300 --> 00:19:48.220
the typing looks consistent or inconsistent,


00:19:48.220 --> 00:19:51.100
but regardless of what it says, when you run the code,


00:19:51.100 --> 00:19:52.620
whether or not the typing is consistent,


00:19:52.620 --> 00:19:56.060
long as it actually still semantically valid,


00:19:56.060 --> 00:19:58.300
it's gonna run, even if you tell the types,


00:19:58.300 --> 00:20:00.700
it takes a string, but you really pass an int,


00:20:00.700 --> 00:20:02.420
and it did plus to it, but you know what?


00:20:02.420 --> 00:20:03.980
You pass two integers and two strings


00:20:03.980 --> 00:20:05.500
and it still worked, right?


00:20:05.500 --> 00:20:08.060
So the runtime version of typing in Python


00:20:08.060 --> 00:20:10.140
is mostly absent, right?


00:20:10.140 --> 00:20:12.460
excluding things like Pydantic and a few others.


00:20:12.460 --> 00:20:16.780
So this bear type thing is a near zero cost,


00:20:16.780 --> 00:20:20.140
near real time, pure Python runtime type checker


00:20:20.140 --> 00:20:24.300
that makes runtime mismatches for typing,


00:20:24.300 --> 00:20:25.620
runtime errors.


00:20:25.620 --> 00:20:26.460
- Interesting.


00:20:26.460 --> 00:20:29.580
- Okay, so you can say, this sounds like a horrible idea


00:20:29.580 --> 00:20:30.780
and I will never touch it.


00:20:30.780 --> 00:20:33.220
Please don't, you know, install the bear.


00:20:33.220 --> 00:20:35.300
Or you could say, I come from a static language


00:20:35.300 --> 00:20:38.700
and this dynamic typing business is freaking me out.


00:20:38.700 --> 00:20:40.020
Can we get a little closer?


00:20:40.020 --> 00:20:40.860
then you can have it.


00:20:40.860 --> 00:20:42.120
I feel like this is the kind of thing


00:20:42.120 --> 00:20:44.160
that for little projects is completely useless,


00:20:44.160 --> 00:20:45.580
but for huge projects,


00:20:45.580 --> 00:20:47.800
it maybe it starts to become more valuable, right?


00:20:47.800 --> 00:20:48.640
- Yeah.


00:20:48.640 --> 00:20:49.980
- So if you just jump right into it,


00:20:49.980 --> 00:20:52.300
you pip install bare type,


00:20:52.300 --> 00:20:56.400
and then you can do things like import the decorator


00:20:56.400 --> 00:20:58.300
and just put a decorator onto a function


00:20:58.300 --> 00:21:02.380
that has a type annotation or hint right there like that.


00:21:02.380 --> 00:21:04.740
So here's one that says, quote Wigham,


00:21:04.740 --> 00:21:06.220
and then it passes lines


00:21:06.220 --> 00:21:09.740
and the type declaration says lines is a list of str,


00:21:09.740 --> 00:21:11.420
and it returns none, okay?


00:21:11.420 --> 00:21:13.840
So then if you just use this function,


00:21:13.840 --> 00:21:16.740
pass it a list of strings, it just runs, right?


00:21:16.740 --> 00:21:17.580
- Yeah.


00:21:17.580 --> 00:21:20.500
- If however though you pass it a list of bytes,


00:21:20.500 --> 00:21:23.100
which kind of look like strings but are not strings,


00:21:23.100 --> 00:21:25.920
you get an exception that says parameter


00:21:25.920 --> 00:21:27.480
such and such and such.


00:21:27.480 --> 00:21:29.300
- Well, it's a type.


00:21:29.300 --> 00:21:32.820
- The first, and it gives you the actual index in the list.


00:21:32.820 --> 00:21:36.580
It says list item zero with this value is not a string


00:21:36.580 --> 00:21:39.260
'cause it's a B string, which is really bytes, right?


00:21:39.260 --> 00:21:39.660
>> Yeah.


00:21:39.660 --> 00:21:40.580
>> It's pretty cool, right?


00:21:40.580 --> 00:21:43.020
>> Yeah, it is really cool.


00:21:43.020 --> 00:21:48.220
I'm agreeing with Alvaro said,


00:21:48.220 --> 00:21:51.380
maybe running with the test suite,


00:21:51.380 --> 00:21:54.980
and I was thinking maybe dynamically add these somehow,


00:21:54.980 --> 00:22:01.100
use the var types during development and maybe take them off later.


00:22:01.100 --> 00:22:03.580
But if it's really fast, yeah.


00:22:03.580 --> 00:22:06.260
>> Yeah. I'll comment on that in a second.


00:22:06.260 --> 00:22:08.100
There are also validators.


00:22:08.100 --> 00:22:10.700
There's an is and an annotated validator.


00:22:10.700 --> 00:22:14.900
If you want to be more restrictive, maybe even then you might expect.


00:22:14.900 --> 00:22:18.060
It's part of Python, but it's not a commonly known part of the type.


00:22:18.060 --> 00:22:19.220
And then things.


00:22:19.220 --> 00:22:22.700
So for example, I could define a new type using annotated


00:22:22.700 --> 00:22:25.220
called list of strings.


00:22:25.220 --> 00:22:25.920
Okay.


00:22:25.920 --> 00:22:32.100
And it says, it has to be a list of strings as one part of the annotation.


00:22:32.100 --> 00:22:37.320
And then another one is, well, if it's, it has to be a non empty set of strings


00:22:37.320 --> 00:22:39.120
is what they're trying to create here.


00:22:39.120 --> 00:22:42.320
Okay, so it says if it's a list with a bunch of stuff,


00:22:42.320 --> 00:22:44.280
the bunch of stuff has to be strings,


00:22:44.280 --> 00:22:47.520
but it also contests that it's not falsy,


00:22:47.520 --> 00:22:49.640
which would be the case when it's a just,


00:22:49.640 --> 00:22:51.720
you know, zero length list.


00:22:51.720 --> 00:22:54.200
So then you can annotate with that type.


00:22:54.200 --> 00:22:57.040
And if you call with regular somewhere,


00:22:57.040 --> 00:22:58.920
you call it with regular code is fine.


00:22:58.920 --> 00:23:00.920
But if you call it with the empty list,


00:23:00.920 --> 00:23:02.040
where it says a list of strings,


00:23:02.040 --> 00:23:03.920
it says, no, no, no, it can't be an empty list.


00:23:03.920 --> 00:23:05.880
It has to be a non-empty list of strings.


00:23:05.880 --> 00:23:11.000
So there's like some pretty crazy things that you can do here.


00:23:11.000 --> 00:23:13.240
Yeah, some other stuff you can check if you like.


00:23:13.240 --> 00:23:17.720
But yeah, I wanted to read this introduction article here,


00:23:17.720 --> 00:23:20.480
which actually comes after all the examples.


00:23:20.480 --> 00:23:25.840
By the way, it also, in order to run this whole bunch of times,


00:23:25.840 --> 00:23:30.040
it took 33 microseconds, which is pretty incredible.


00:23:30.040 --> 00:23:35.480
The test, test this for like an array of tuples of arrays of,


00:23:35.480 --> 00:23:38.220
What is that a million, you know, 33 microseconds.


00:23:38.220 --> 00:23:39.320
So that's pretty fast, actually.


00:23:39.320 --> 00:23:39.920
Yeah.


00:23:39.920 --> 00:23:43.780
You still want to like compare it like your entire, like some workflow


00:23:43.780 --> 00:23:45.300
compared to with or without.


00:23:45.300 --> 00:23:46.680
So, yep.


00:23:46.680 --> 00:23:47.620
So let me read this.


00:23:47.620 --> 00:23:49.520
So if people are wondering, well, what the heck is this?


00:23:49.520 --> 00:23:54.200
Bare type brings rust and C++ inspired zero cost abstractions into the


00:23:54.200 --> 00:23:58.920
lawless world of dynamic typing, a dynamically typed Python, enforcing type


00:23:58.920 --> 00:24:03.760
safety at the granular level of functions and methods against type hints standardized


00:24:03.760 --> 00:24:05.560
by the Python community in 01,


00:24:05.560 --> 00:24:09.560
non-amortized worst-case time with negligible constant factors.


00:24:09.560 --> 00:24:11.880
How about that? If anyone asks what bear type is,


00:24:11.880 --> 00:24:12.800
there's a good description.


00:24:12.800 --> 00:24:14.760
>> Yeah.


00:24:14.760 --> 00:24:16.600
>> But yeah, it's pretty cool.


00:24:16.600 --> 00:24:17.800
Then there's a whole bunch of stuff about it.


00:24:17.800 --> 00:24:19.340
But anyway, that's bear type.


00:24:19.340 --> 00:24:21.000
It looks pretty promising to me.


00:24:21.000 --> 00:24:23.480
The drawback of a lot of these, I think,


00:24:23.480 --> 00:24:24.880
really is like, well,


00:24:24.880 --> 00:24:26.120
now you're doing a bunch of checking for


00:24:26.120 --> 00:24:27.840
every little function call and it's super slow.


00:24:27.840 --> 00:24:30.240
But if it's fast enough, that's pretty cool.


00:24:30.240 --> 00:24:33.160
>> Yeah. A couple of comments in the chat.


00:24:33.160 --> 00:24:38.160
Mike Felder doesn't, Pydantic includes call validators too,


00:24:38.160 --> 00:24:41.000
so I'm not sure how that relates.


00:24:41.000 --> 00:24:42.660
- I don't know if that's out of beta.


00:24:42.660 --> 00:24:46.620
Last time I looked at it, it was still in a testing phase.


00:24:46.620 --> 00:24:47.780
It may be out now.


00:24:47.780 --> 00:24:50.500
I mean, there's a ton of work that's happened on Pydantic.


00:24:50.500 --> 00:24:53.160
It's all been redone, so I don't know the status of that.


00:24:53.160 --> 00:24:54.140
Maybe Mike does.


00:24:54.140 --> 00:24:57.600
- Okay, and then also, is there a mypy plugin that does that?


00:24:57.600 --> 00:24:58.880
I don't know.


00:24:58.880 --> 00:25:01.780
I wasn't aware that mypy could be used at runtime, but.


00:25:01.780 --> 00:25:05.380
I wasn't aware of my PI could be used at runtime either, but perhaps.


00:25:05.380 --> 00:25:06.100
Yeah.


00:25:06.100 --> 00:25:09.720
Anyway, but anyway, this, this looks pretty, you know, quite straightforward.


00:25:09.720 --> 00:25:10.360
Be useful.


00:25:10.360 --> 00:25:14.440
You just do type ins, you put app bear type on it and it, it makes sure that it behaves.


00:25:14.440 --> 00:25:14.960
Yeah.


00:25:14.960 --> 00:25:18.960
So to do what you were looking at, sorry to do where you might want to turn it off


00:25:18.960 --> 00:25:21.600
in production, but run it in testing, which is reasonable.


00:25:21.600 --> 00:25:23.880
I don't see any mechanism for that.


00:25:23.880 --> 00:25:24.520
There may be.


00:25:24.520 --> 00:25:25.000
Yeah.


00:25:25.000 --> 00:25:27.320
It's a decorator mechanism.


00:25:27.320 --> 00:25:29.800
So you could, you could work around it if you needed to.


00:25:29.800 --> 00:25:33.120
- Well, you could just write a decorator that looks


00:25:33.120 --> 00:25:35.140
whether that setting is on or off,


00:25:35.140 --> 00:25:37.240
and either returns the bare type wrap thing


00:25:37.240 --> 00:25:39.360
or the direct function directly,


00:25:39.360 --> 00:25:42.840
and it would be like zero runtime cost once it's turned off


00:25:42.840 --> 00:25:44.960
'cause the function is replaced with itself.


00:25:44.960 --> 00:25:47.400
Otherwise, it's replaced by the bare type decorated one.


00:25:47.400 --> 00:25:51.400
So you might have to write like 10 lines of Python,


00:25:51.400 --> 00:25:52.920
then you've got that feature, right?


00:25:52.920 --> 00:25:55.520
- The other thing is, how much of your code


00:25:55.520 --> 00:25:56.640
are you really gonna wanna throw


00:25:56.640 --> 00:25:59.680
bare type decorators around all over the place?


00:25:59.680 --> 00:26:00.240
That's a good point.


00:26:00.240 --> 00:26:01.600
Maybe just the boundary, right?


00:26:01.600 --> 00:26:01.960
Yeah.


00:26:01.960 --> 00:26:03.720
The API at the API level or something.


00:26:03.720 --> 00:26:04.360
Yeah, exactly.


00:26:04.360 --> 00:26:05.080
Exactly.


00:26:05.080 --> 00:26:05.560
Yeah.


00:26:05.560 --> 00:26:06.360
Cool.


00:26:06.360 --> 00:26:06.640
Yep.


00:26:06.640 --> 00:26:07.560
Anyway, there it is.


00:26:07.560 --> 00:26:10.160
Uh, and I suppose that's it for all of our items.


00:26:10.160 --> 00:26:12.160
That's what we got lined up for you.


00:26:12.160 --> 00:26:12.840
Anything else?


00:26:12.840 --> 00:26:13.800
Uh, extras.


00:26:13.800 --> 00:26:15.200
I have, you want me to go first?


00:26:15.200 --> 00:26:17.280
You want to save yours or you go first?


00:26:17.280 --> 00:26:18.760
I already got my screen up anyway.


00:26:18.760 --> 00:26:19.280
Okay.


00:26:19.280 --> 00:26:22.800
So first of all, congratulations.


00:26:22.800 --> 00:26:26.920
Mike Fowler, who is right here in the audience.


00:26:26.920 --> 00:26:27.280
Yeah.


00:26:27.280 --> 00:26:28.800
And I mispronounced his last name.


00:26:28.800 --> 00:26:29.120
Sorry.


00:26:29.640 --> 00:26:31.280
I'm hopefully I got it right.


00:26:31.280 --> 00:26:31.840
You did.


00:26:31.840 --> 00:26:32.520
I got it.


00:26:32.520 --> 00:26:39.400
At Mike, the man on Twitter, isn't the new safety and security engineer or


00:26:39.400 --> 00:26:41.240
PI PI that's awesome, Mike.


00:26:41.240 --> 00:26:42.080
Thank you so much.


00:26:42.080 --> 00:26:42.640
Cool.


00:26:42.640 --> 00:26:45.120
Clearly an area that needs lots of attention.


00:26:45.120 --> 00:26:47.660
So I just wanted to say welcome.


00:26:47.660 --> 00:26:49.280
Thanks for keeping us all safe out there.


00:26:49.280 --> 00:26:51.240
And, excellent.


00:26:51.240 --> 00:26:51.640
Yeah.


00:26:51.640 --> 00:26:53.700
I got to hang out with Mike a lot at PyCon.


00:26:53.700 --> 00:26:55.200
So that's really pretty cool.


00:26:55.200 --> 00:26:56.000
Yeah.


00:26:56.000 --> 00:26:56.240
Thanks.


00:26:56.240 --> 00:26:56.640
Super cool.


00:26:56.640 --> 00:26:57.160
Super cool.


00:26:57.360 --> 00:27:00.840
And then a couple of quick announcements to two conferences for people.


00:27:00.840 --> 00:27:04.440
A packaging con follow up on all of your items, Brian packaging


00:27:04.440 --> 00:27:07.980
con is happening fully online.


00:27:07.980 --> 00:27:08.740
Uh, no, hold on.


00:27:08.740 --> 00:27:10.880
No, it's happening in Berlin as hybrid.


00:27:10.880 --> 00:27:15.840
So it's in Berlin, October 26 to 28 for all things, packaging,


00:27:15.840 --> 00:27:18.900
Python, people, Rust, people, et cetera.


00:27:18.900 --> 00:27:20.540
So, check that out.


00:27:20.540 --> 00:27:24.820
And the cloud builders Python conf is September 6th, 2023.


00:27:24.820 --> 00:27:28.560
that's put together by a Ukrainian group, and it's just online.


00:27:28.560 --> 00:27:30.760
So people can check that out as well.


00:27:30.760 --> 00:27:34.560
And speakers, are they still have a call for proposals?


00:27:34.560 --> 00:27:35.760
Doesn't look like it.


00:27:35.760 --> 00:27:36.660
I think it's open.


00:27:36.660 --> 00:27:39.420
It's already all set for the agenda.


00:27:39.420 --> 00:27:40.860
So people can check that out.


00:27:40.860 --> 00:27:41.960
Should be fun.


00:27:41.960 --> 00:27:43.320
And onto your business.


00:27:43.320 --> 00:27:45.860
OK, well, a couple


00:27:45.860 --> 00:27:48.760
just a couple notes that I wanted to mention.


00:27:48.760 --> 00:27:54.220
The August release of Visual Studio Code has something I've been long awaiting.


00:27:54.220 --> 00:27:56.820
It's an error-tolerant pytest discovery.


00:27:56.820 --> 00:27:58.520
So what does this mean?


00:27:58.520 --> 00:28:02.020
It means you've got, and there's some comments down here.


00:28:02.020 --> 00:28:03.820
Oh, I went too far.


00:28:03.820 --> 00:28:07.420
You have to turn it on right now, but it's just in a setting.


00:28:07.420 --> 00:28:09.320
Apparently, some people have it on by default.


00:28:09.320 --> 00:28:12.120
Anyway, they should just turn it on. It's better.


00:28:12.120 --> 00:28:17.620
But the gist is, if you've got errors in some of your code,


00:28:17.620 --> 00:28:19.920
it used to just blow up.


00:28:19.920 --> 00:28:21.720
Like, let's say you've got a test suite,


00:28:21.720 --> 00:28:27.020
but you also have some old junk tests off in a side directory that you don't use anymore.


00:28:27.020 --> 00:28:29.740
If they had import errors or syntax errors or whatever,


00:28:29.740 --> 00:28:33.020
it would just blow up the whole thing and you couldn't get any tests to import.


00:28:33.020 --> 00:28:39.400
Now, it's tolerant and it doesn't import those tests that have import errors.


00:28:39.400 --> 00:28:43.640
That's great. You can still run the rest of the suite. That's good.


00:28:43.640 --> 00:28:46.060
There's a couple of things.


00:28:46.060 --> 00:28:48.440
It'd be cool if it could tell you which ones have had


00:28:48.440 --> 00:28:51.120
errors instead of just making them disappear.


00:28:51.120 --> 00:28:51.720
So that'd be neat.


00:28:51.720 --> 00:28:56.200
Uh, the other thing is guys, pytest isn't capitalized, though.


00:28:56.200 --> 00:28:59.520
You gotta work on your capitalization, non-capitalization.


00:28:59.520 --> 00:29:00.680
Uh, anyway.


00:29:00.680 --> 00:29:01.960
>> But discovery probably should be.


00:29:01.960 --> 00:29:02.800
>> Oh yeah.


00:29:02.800 --> 00:29:03.320
Oh yeah.


00:29:03.320 --> 00:29:04.360
Discovery should be.


00:29:04.360 --> 00:29:06.760
Oh, that's tough.


00:29:06.760 --> 00:29:07.280
Anyway.


00:29:07.280 --> 00:29:10.320
>> I always, I'm always unsure about my capitalization.


00:29:10.320 --> 00:29:13.040
It's so formal to capitalize everything.


00:29:13.200 --> 00:29:20.080
It's this time of year again, we got Python 3.12 release candidate one.


00:29:20.080 --> 00:29:24.120
So we're in the release candidates for Python 3.12.


00:29:24.120 --> 00:29:24.920
It's pretty exciting.


00:29:24.920 --> 00:29:27.320
Release candidate is a big deal though, right?


00:29:27.320 --> 00:29:31.640
It's we think this is the final version unless there's something gone wrong.


00:29:31.640 --> 00:29:34.280
Yeah, it's right out of beta.


00:29:34.280 --> 00:29:37.080
So anyway, speaking of beta,


00:29:37.080 --> 00:29:43.160
the big news for today is that I've got a Python testing with pytest.


00:29:43.160 --> 00:29:47.400
bundle course up and I'm super excited about it.


00:29:47.400 --> 00:29:48.760
I'm working really hard.


00:29:48.760 --> 00:29:54.920
However, it is in pre-release, pre-release beta.


00:29:54.920 --> 00:29:56.880
I don't know, I made up something that-


00:29:56.880 --> 00:29:57.560
>> Early bird.


00:29:57.560 --> 00:29:59.040
>> Early bird.


00:29:59.040 --> 00:30:00.280
>> Early beta bird.


00:30:00.280 --> 00:30:02.920
>> Yeah. What is going on?


00:30:02.920 --> 00:30:05.560
In the end, it's going to be,


00:30:05.560 --> 00:30:11.720
actually I included on here is a video that is got,


00:30:11.720 --> 00:30:14.380
Welcome to the pre-release beta and what does that mean?


00:30:14.380 --> 00:30:17.180
Video. So you can watch that. The gist of it is,


00:30:17.180 --> 00:30:19.300
is the three sections of


00:30:19.300 --> 00:30:21.440
the book are going to go into three different courses.


00:30:21.440 --> 00:30:26.580
But the pre-release right now that's for sale is a bundle of all,


00:30:26.580 --> 00:30:28.320
that will be all three.


00:30:28.320 --> 00:30:34.020
There's two chapters ready for the primary power for the first part.


00:30:34.020 --> 00:30:37.820
But I'm just going to chug along and people can jump in if they want.


00:30:37.820 --> 00:30:41.380
I'm doing it as a beta because the book itself really is


00:30:41.380 --> 00:30:44.100
better because of the beta program that I did


00:30:44.100 --> 00:30:45.280
when I was writing the book.


00:30:45.280 --> 00:30:47.600
And I'd love to have people come in


00:30:47.600 --> 00:30:50.680
and let me know where things need a little polish


00:30:50.680 --> 00:30:54.520
and we can fix it along the way.


00:30:54.520 --> 00:30:59.180
I also am setting up a job, or not a job board,


00:30:59.180 --> 00:31:01.700
a discussion board for people to ask questions


00:31:01.700 --> 00:31:02.740
if they get stuck.


00:31:02.740 --> 00:31:05.480
I really wanna make sure everybody's successful


00:31:05.480 --> 00:31:07.360
in getting this up and running,


00:31:07.360 --> 00:31:09.060
getting up and running in pytest quickly.


00:31:09.060 --> 00:31:11.700
So totally excited about getting this done.


00:31:11.700 --> 00:31:13.100
Oh, one more thing.


00:31:13.100 --> 00:31:17.140
I set up, I just launched it last night,


00:31:17.140 --> 00:31:20.060
but for Python Bytes listeners,


00:31:20.060 --> 00:31:23.700
you can use the coupon code Python Bytes with a Y.


00:31:23.700 --> 00:31:27.700
So, and we'll just throw that in the show notes.


00:31:27.700 --> 00:31:30.700
Use Python Bytes with a Y,


00:31:30.700 --> 00:31:33.100
and you can get 20% discount now


00:31:33.100 --> 00:31:35.300
through the end of the 17th.


00:31:35.300 --> 00:31:39.320
So just a few days, but that's enough time to grab it.


00:31:39.320 --> 00:31:40.160
So cool.


00:31:40.160 --> 00:31:41.000
- Yeah, awesome.


00:31:41.000 --> 00:31:41.820
Congrats on this, Brian.


00:31:41.820 --> 00:31:43.000
This will be exciting.


00:31:43.000 --> 00:31:44.560
And I know it's a lot of work, so.


00:31:44.560 --> 00:31:45.760
(Brian laughs)


00:31:45.760 --> 00:31:46.600
- Yeah.


00:31:46.600 --> 00:31:47.420
- Good luck.


00:31:47.420 --> 00:31:48.260
- Thanks.


00:31:48.260 --> 00:31:49.100
- Yeah, absolutely.


00:31:49.100 --> 00:31:49.920
- Oh.


00:31:49.920 --> 00:31:50.760
- You know what else is a lot of work


00:31:50.760 --> 00:31:52.500
and ties back to my first item?


00:31:52.500 --> 00:31:53.960
Learning JavaScript.


00:31:53.960 --> 00:31:55.020
Let's make that our joke.


00:31:55.020 --> 00:31:55.960
- Okay.


00:31:55.960 --> 00:31:56.800
- All right.


00:31:56.800 --> 00:31:57.880
So here's the text.


00:31:57.880 --> 00:31:59.560
It looks like a WhatsApp conversation


00:31:59.560 --> 00:32:01.320
that somebody got, unfortunately,


00:32:01.320 --> 00:32:04.080
from their apartment manager.


00:32:04.080 --> 00:32:06.420
And of course, it's addressed to Michael, which is extra funny.


00:32:06.420 --> 00:32:07.380
Hello, Michael.


00:32:07.380 --> 00:32:11.340
Your apartment has received the second complaint.


00:32:11.340 --> 00:32:13.140
Noise from the apartment is the problem.


00:32:13.140 --> 00:32:13.940
The dog whines.


00:32:13.940 --> 00:32:16.780
Apparently, you leave one home and the dog gets bored.


00:32:16.780 --> 00:32:18.740
Please address this.


00:32:18.740 --> 00:32:21.260
The response from Michael is, hello, I don't have a dog.


00:32:21.260 --> 00:32:24.060
This is me learning JavaScript.


00:32:24.060 --> 00:32:26.740
Like screaming and yelling and kicking.


00:32:26.740 --> 00:32:28.020
Oh, dog whines.


00:32:28.020 --> 00:32:28.740
OK.


00:32:28.740 --> 00:32:31.580
[LAUGHTER]


00:32:31.580 --> 00:32:32.380
Yeah.


00:32:32.380 --> 00:32:33.420
That's pretty good.


00:32:33.420 --> 00:32:34.060
>> That is pretty funny.


00:32:34.060 --> 00:32:35.500
>> It could be like learning all sorts of programs.


00:32:35.500 --> 00:32:37.220
It could be learning Python, but yeah,


00:32:37.220 --> 00:32:38.460
it's a little extra special,


00:32:38.460 --> 00:32:39.700
a little extra special there.


00:32:39.700 --> 00:32:41.480
You got your web pack working,


00:32:41.480 --> 00:32:43.740
have you got your requires working,


00:32:43.740 --> 00:32:46.780
have you got your transpiler working yet?


00:32:46.780 --> 00:32:50.820
>> Man, that was me with trying to relearn CSS.


00:32:50.820 --> 00:32:53.140
So first time I learned CSS,


00:32:53.140 --> 00:32:56.300
we didn't have all these pre-compilers and stuff.


00:32:56.300 --> 00:32:59.700
So CSS is a completely different ballgame now.


00:32:59.700 --> 00:33:00.260
>> Yeah.


00:33:00.260 --> 00:33:00.700
>> Yeah.


00:33:00.700 --> 00:33:01.140
>> Well.


00:33:01.140 --> 00:33:03.020
>> Yeah, it's crazy stuff. Cool.


00:33:03.020 --> 00:33:05.260
>> Well, anyway, this is my joke for everyone.


00:33:05.260 --> 00:33:07.300
We've received a noise complaint, I'm sorry.


00:33:07.300 --> 00:33:08.700
I don't have a dog.


00:33:08.700 --> 00:33:11.180
>> Awesome, well, it was a fun episode.


00:33:11.180 --> 00:33:11.940
Thanks again.


00:33:11.940 --> 00:33:13.260
>> Yeah, sure was.


00:33:13.260 --> 00:33:13.860
See you later.

