00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 433, recorded May 26th, 2025.

00:00:11 I am Brian Okken.

00:00:12 And I'm Michael Kennedy.

00:00:13 And this episode is sponsored by us.

00:00:15 So please check out offerings at the courses at Talk Python Training and at pythontest.com, of course, to learn your pytest goodies.

00:00:25 And also thank you to Patreon supporters.

00:00:28 You rock.

00:00:28 If you'd like to connect with us, of course, check out the links in the show notes for both Michael, myself, and the show at Blue Sky and at Mastodon on Fosstodon.

00:00:39 And if you'd like to listen to the show, if you listen to the show, thank you.

00:00:44 If you'd like to watch it also live, check out pythonbytes.fm/live, usually Monday at 10 a.m., even when we forget that it's a holiday today.

00:00:54 But yeah, also, if you'd like to get, if you're listening to this and you kind of want to check out some of the stuff that we're talking about, but you can't remember the link, sign up for our newsletter on at pythonbytes.fm.

00:01:08 Really easy to find the link there.

00:01:10 And you'll get an email every week with all of the links and everything we talked about, plus extra goodies to help you get up to speed if you want to.

00:01:22 So that's wonderful.

00:01:23 What do we got to start with, Michael?

00:01:25 Let's start with a throwback, okay?

00:01:28 Okay.

00:01:28 So, did you ever watch the movie Fight Club, Brad Pitt, Edward Norton?

00:01:32 Yeah.

00:01:34 It was a cult classic, right?

00:01:36 It was definitely a...

00:01:37 First rule of Fight Club.

00:01:38 Yeah, first rule of Fight Club.

00:01:40 Don't talk about Fight Club.

00:01:42 Second rule of Fight Club.

00:01:42 You do not talk about Fight Club.

00:01:46 So, what are we doing?

00:01:47 What are we talking about?

00:01:48 Why am I talking?

00:01:49 Because up next are get flight rules.

00:01:54 fight rules. I want to call it fight. So what are flight rules? They're a guide for astronauts

00:02:00 or programmers who use Git who now do things when stuff goes wrong with Git. So they're hard earned,

00:02:07 they're not fight club rules. They're hard earned body of knowledge recorded in manuals that like,

00:02:12 if this goes on, what do you do? If you stir the tanks and there's an explosion

00:02:17 and a lot of the oxygen shoots out of the spaceship, what do you do? And so on. Okay.

00:02:23 All right.

00:02:24 So this is actually pretty cool.

00:02:25 I think this is going to be super helpful for a lot of people.

00:02:28 So it talks about, well, what do you do with Git when things go wrong, basically?

00:02:33 I mean, source control is awesome until you're like, it says there's a merge conflict and I don't know how to merge it or I don't know how to do that correctly.

00:02:41 Or I've created the repo here, but I want to push to a different origin there.

00:02:45 And how do I do that?

00:02:46 So this is like, uh-oh.

00:02:48 Okay, so it's grouped by sort of category or something, I guess.

00:02:53 So repositories.

00:02:54 I want to start a local repository.

00:02:56 I want to clone a remote one.

00:02:57 These are pretty standard, right?

00:02:58 But as you go down, you'll see.

00:03:00 I set the wrong remote repository.

00:03:04 I want to push to a different origin and so on.

00:03:07 There's edit rules.

00:03:08 There's staging.

00:03:09 And they're pretty interesting.

00:03:10 There's discarding changes.

00:03:13 I want to discard specific unstaged changes, or I want to discard all of my untracked files,

00:03:21 but not the tracked ones, and so on. Or maybe if I am staging, let's see, I staged too many edits,

00:03:29 and I want to break them into a separate commit. What do I do? I want to unstage my edits and

00:03:35 unstage my staged edits, right? So all these things of sort of, here's the scenario,

00:03:40 rebase emerging. I need to update the parent commit in my branch when I'm rebasing. Whatever,

00:03:45 there's a bunch here. I even called out a few in the show notes.

00:03:49 I got to check out the rebasing stuff because that always stresses me out. I

00:03:53 know, me too. One is like, what did I just commit?

00:03:57 I want to store a deleted file. I want to discard a specific unstaged changes. Not all of them,

00:04:05 just one of them and so on. Isn't this cool? Yeah, this is great. Yeah. Well, I think you're

00:04:10 letting me stretch the fight rules a bit, but I do. It's fine. But I think this will be super

00:04:16 helpful. It's sort of how to deal with stuff when, how to deal with Git when Git stuff goes wrong.

00:04:22 It's sub modules, man. Oh boy. That's a whole nother. That's a whole nother.

00:04:28 No, it's good.

00:04:31 Okay.

00:04:32 So let's talk about t-strings a little bit.

00:04:35 We've already covered t-strings on the show before, I believe.

00:04:39 They came in with PEP 750.

00:04:41 But they're very new.

00:04:44 So to play with them, I think it's just 3.14.0 Beta 1 has them.

00:04:52 I don't know if anything before.

00:04:54 So I was just playing with them this morning a little bit.

00:04:57 But I'm really happy with this article from Brett Cannon, Unraveling t-strings.

00:05:02 And what I really like about it is because I really kind of wanted to play with t-strings

00:05:07 or just understand them more, but I didn't want to actually require, you know, it'd be

00:05:12 great if you didn't have to have the latest 3.14 beta 1 to do this.

00:05:18 And so that's really with this article.

00:05:20 So even though t-strings come in with the 3.14, this article talks about going through all the details

00:05:29 of kind of how t-strings work without actually using t-strings.

00:05:32 So Brett starts out with this idea of like, let's say you've got this little converter thing of converting,

00:05:40 take this function called fyeah that takes a T-string, but here it says T-string, but it's just a variable name.

00:05:49 takes something and returns something.

00:05:52 And right off the bat, it's just an identity.

00:05:54 And what we want, and what he's showing is like with fstrings, fstrings do a lot of things.

00:06:01 Like they can replace variables.

00:06:02 They can do one of those formatting stuff.

00:06:06 They can do format specs, specifiers, and then there's conversions.

00:06:10 Like this is a raw string conversion thing.

00:06:13 And so he walks with that with an example of just, you know, once you pass the SF string into the function, what do you get out?

00:06:23 But then he talks about, like, basically it starts out simple, but then he goes into, well, what if we wanted to pass in the parts, all the different parts passing into our function?

00:06:34 And then he passes in, uses like the representation or conversions and format specifiers to walk through those.

00:06:44 So basically we've walked through so far evaluating Python expressions, applying specified conversions, and then format specifiers.

00:06:52 And then goes into like just dives into it further of like, let's keep track of all this stuff.

00:06:58 And then let's, you know, let's make, we've got a lot of stuff we're keeping track of.

00:07:04 So let's put some of the things that were like all of the conversion stuff.

00:07:08 We'll put that into an interpolation class.

00:07:13 And I was a bit lost here.

00:07:14 So I actually walked through all of this.

00:07:16 And it was really helpful to actually run the code, like copy it into there and walk through it.

00:07:22 And then a template class and basically walking through all the different parts.

00:07:26 And then at the end, he shows you, says, basically, we've just built up something that would be like t-strings,

00:07:33 even though we don't have t-strings yet.

00:07:36 And then gave an example of what it would look like, what it looks like through 3.14.

00:07:40 The example in the PEP 750 is right there.

00:07:43 You can run that too.

00:07:45 All really good.

00:07:45 So if you really want to get a handle, get your brain around what t-strings are,

00:07:49 this is a great article.

00:07:51 But I was a little frustrated that it was all in, like just files.

00:07:58 So I went ahead and rewrote all of his examples as Python or pytest tests.

00:08:06 So you can just have one file and run them all.

00:08:09 Also get to show off near the end because the last example, you actually have to have a Python version,

00:08:15 Python beta one, 3.4 beta one.

00:08:18 So I'll show you, show people how to use a skip if to skip that if you don't have that Python version installed.

00:08:25 So yeah, that's cool.

00:08:26 I really had fun walking through all of this article from Brett.

00:08:30 So thanks Brett for putting it together.

00:08:32 Yeah, very cool.

00:08:34 real-time follow-up.

00:08:35 This was not what I was expecting to talk about, but I just had Paul Everett, Jim Baker, and Dave Peck

00:08:41 all on Talk Python just a little bit ago talk about t-strings.

00:08:45 So if you want to dive into the internals with some of the folks that worked on that as well.

00:08:48 Keep them listening.

00:08:49 Yeah, that's not my next topic.

00:08:51 My next topic is like a hacker version, cyberspace version of HTOP, Neo-HTOP,

00:08:59 HTOP, Matrix version?

00:09:00 No, Neo-HTOP.

00:09:02 a blazing fast system for monitoring your desktop, which I think is super cool.

00:09:07 And I'm pretty sure it's cross-platform, yeah, cross-platform, a modern cross-platform system monitor

00:09:12 built on top of whatever doesn't matter.

00:09:15 But Rust is in there somewhere.

00:09:17 So we look at the features.

00:09:18 It has real-time process monitoring, CPU and memory usage tracking.

00:09:23 This is a GUI, by the way.

00:09:24 Modern UI with dark and light themes.

00:09:26 Cool filtering.

00:09:27 You can pin processes.

00:09:29 You can kill processes.

00:09:31 Very nice.

00:09:32 So I actually have it running.

00:09:34 Let me pull it up here.

00:09:35 You can see whatever's happening on my computer right now.

00:09:38 Apparently, guess what?

00:09:39 The Vivaldi helper for StreamYard is grinding away using 50% CPU.

00:09:45 But there's all sorts of cool stuff.

00:09:46 You can hit these little informational things here.

00:09:49 No, that's the pin.

00:09:49 Hit the informational things, and it actually shows you stuff like how much CPU and memory is that process using exactly.

00:09:57 What is its ID?

00:09:58 but also what is its parent ID, has like graphs for the memory, and also what command was used to launch it.

00:10:06 I think this is super cool.

00:10:07 Oh, that's neat.

00:10:08 So if you see, oh, here's a, there's this, why is this process running?

00:10:13 You know, it's a sub-process, but what is it doing?

00:10:14 It actually shows you.

00:10:15 And then if you go to the parent, this is, I think, even cooler maybe.

00:10:18 You go to like, say, Vivaldi in this case, and it shows all of the different sub-processes

00:10:24 that Vivaldi has created, and how much CPU they're each using, how much memory they're using, what their IDs are.

00:10:29 Isn't that cool?

00:10:30 Yeah, actually, I think a lot of these are useful for servers, but I think I'd use this to store it on the desktop.

00:10:37 Yeah, exactly.

00:10:38 I'm thinking this is really nice for the desktop because Windows has sysinternals stuff.

00:10:43 What is it?

00:10:45 Sysmon, I think it is, which is incredibly good.

00:10:47 It's way better than this, but it's Windows only, right?

00:10:51 And we've got on the Mac, we've got system and iStats menus around there,

00:10:56 which are really nice, but it doesn't give you the look inside the processes quite like this.

00:11:00 You also get stuff about network, about storage, about memory, all these things.

00:11:06 So I think that's pretty cool.

00:11:08 Yeah, of course.

00:11:09 It looks like you can kill things from here.

00:11:11 Yes, you can definitely kill them.

00:11:12 You can be malicious.

00:11:14 Anyway, that's my item here.

00:11:16 If you want some nice GUI desktop monitoring tools that are cross-platform,

00:11:21 check out this Neo H-Top thing.

00:11:22 It's pretty cool.

00:11:23 H-Top.

00:11:24 All right.

00:11:25 Where are we at?

00:11:26 remove okay next um we i think we just did we just talk about ty or thank you or ty or whatever

00:11:34 that was last week or something recently so yeah so that's the uh ty was the astral um type checker

00:11:42 and uh so this week why not do another so pyrefly is a new type checker from it's from facebook meta

00:11:51 So there's an article, a new type checker, yeah, introducing Pyrefly.

00:11:57 And one of the things I think is interesting about this, so it talks, I played with it just a little bit.

00:12:03 This is also based on Rust, so it's super fast.

00:12:07 And one of the reasons why they built it, apparently, the principles behind it are performance, of course, but also IDE first.

00:12:14 So I guess that totally makes sense, but I think a lot of things are built, you know, not thinking about the IDE right away, maybe.

00:12:24 But this is thinking about making sure that it integrates with the IDE really well and have a command line interface experience as well is good.

00:12:34 So IDE first, performance, inference, having this work well with Python programs that are not typed yet.

00:12:43 They're not annotated at least, but they might still have consistent with types.

00:12:49 So it infers types.

00:12:50 And open source, of course.

00:12:52 So even though it's from the Facebook engineering group, it's not closed source, open source stuff.

00:13:00 So that's good.

00:13:01 There's some talk about what they're going to do in the future, but really slick looking website, of course, with a VS Code extension.

00:13:09 And I made a mistake, though.

00:13:11 So I downloaded this and I thought, yeah, I just want to run it on one of my projects to see how well.

00:13:19 And the project I chose was the pytestCheck plugin and it blew up.

00:13:26 It didn't blow up.

00:13:27 It worked fine.

00:13:28 It just told me a whole bunch of stuff that was wrong that's not really wrong.

00:13:33 So I probably shouldn't have chosen the one project that I work on that completely abuses the dynamic nature of Python.

00:13:41 there's a check object so I do often from pytest check import check this check object is both the

00:13:50 interface into the system plus it's a context manager and it overloads a whole bunch of stuff

00:13:56 so yeah maybe but having all those warnings might be a hint that maybe I should redesign this

00:14:04 we'll see anyway Pyrefly another faster type checker and yeah neat Interesting. Yeah, two things

00:14:10 that I'd like to add. It's a good find. I was considering covering this as well. Pyrefly is a replacement for the existing Pyre, P-Y-R-E, from Facebook.

00:14:22 Okay.

00:14:22 So they had had that previously, and I guess this is like a rewrite or something like that.

00:14:29 And the other thing is comparing it to ty, aka Red Knot from Astral, this looks more mypy-like, which is somewhat the goal of ty as well.

00:14:43 But ty, I believe, is meant to be more forgiving.

00:14:46 So maybe it would scream at you less, right?

00:14:49 it's meant to work on less typed code, I guess.

00:14:53 But the main difference that I haven't looked in this deeply, so maybe it's in there somewhere,

00:14:57 but one of the big deals of ty is in addition to making a type checker that comes with an LSP, a language server,

00:15:06 and one of the challenges with PyLance, the one built into VS Code, is when you get to extremely large code bases,

00:15:15 basically it falls apart and sometimes can't even keep up or work with it.

00:15:19 So things like your autocomplete or go-to-definition just start to shut off because the language server

00:15:24 can't deal with ginormous amounts of files.

00:15:27 And so they're trying to build a Rust-based language server that flies on even millions of lines of code.

00:15:33 So when you compare ty to Pyrefly, they're not exact just like, well, one is from Facebook

00:15:42 and one is from Astral, right?

00:15:43 They're slightly different as well.

00:15:45 Do you know if Pyrefly is doing a replacement language server also, or are they using, you know?

00:15:52 I don't know that either.

00:15:53 They do have LSP as one of their tags, but I don't see any more words than that.

00:15:58 Let's see.

00:16:00 Okay.

00:16:02 On their website, they don't.

00:16:04 Do you plan to build an LSP?

00:16:06 Yes, see our roadmap.

00:16:07 Oh, okay.

00:16:08 And what does the roadmap say about LSPs?

00:16:11 It doesn't appear on it.

00:16:12 So, you know, it's closed maybe.

00:16:15 LSP?

00:16:15 Yeah, I can't tell.

00:16:18 It's an infinite scroll thing, so it's like sort of hard to get there.

00:16:22 I mean, you kind of need an LSP to understand it.

00:16:25 You need something that parses into something like an abstract syntax tree,

00:16:28 then you start asking type-based questions about it, right?

00:16:31 That's how a lot of these work.

00:16:32 And one of the frustrating things, though, with the limited, I'm looking forward to having some of these Rust-based language servers come online

00:16:40 because it's the large projects that I really need all the help with.

00:16:45 The smaller projects, I don't really need, I mean, I kind of can get my head around it already.

00:16:50 But so anyway.

00:16:53 I'm just going to be using chat to write on my codes.

00:16:54 I don't care.

00:16:57 Just kidding, people.

00:16:58 Just stick with the vibe.

00:17:00 Yes.

00:17:00 Speaking about stuff running on platforms I worked on, talk by then training.

00:17:04 Let me tell you about a new course that we have over here.

00:17:06 Polars for Power Users, Transforming Your Data Analysis Game.

00:17:10 So this is a super fun course put together by Christopher Trudeau.

00:17:14 And it's super fun.

00:17:16 If you want to learn pollers and you know a little bit of pandas or you know tools like Excel and others,

00:17:23 it kind of walks you through like, hey, you know how to do this in other tools.

00:17:26 But here's the advantages.

00:17:28 Here's the different API.

00:17:29 Yeah, really fun if you want to get started with pollers or see it compared to various tools like I mentioned.

00:17:37 Definitely worth checking out.

00:17:39 $29, you can get going there.

00:17:41 And it's three hours, I think.

00:17:43 Not a lot of your time, not a lot of your money, but you'll have a nice new skill set at the end.

00:17:47 Nice.

00:17:49 And let's see, what else have we got here?

00:17:51 A couple of announcements.

00:17:53 Airflow, the workflow framework, has its biggest release, the most significant release in the project history.

00:18:01 They describe it as Airflow 3.0, builds on to adding a new service-oriented architecture,

00:18:07 modern React-based UI, enhanced security, host of long-quested features such as DAG versioning,

00:18:14 directed acyclic graph versioning, improved backfills, event scheduling,

00:18:18 and remote execution.

00:18:20 In this case, I guess that's a good version, a good thing.

00:18:22 A lot of times remote execution is bad, but when you ask for it, it's good.

00:18:26 Anyway, if people do Airflow, check it out.

00:18:28 It's pretty cool.

00:18:29 There's a new one there.

00:18:30 And my last one, this came in just yesterday, I think is when I first saw it.

00:18:36 Paste.

00:18:36 Brian, do you use some kind of clipboard manager?

00:18:39 Yeah.

00:18:40 Other than just the clipboard itself, obviously.

00:18:43 Oh, clipboard manager.

00:18:44 No, I don't.

00:18:45 Okay.

00:18:45 So once you start using one of these things, you will never, ever want to go back to working

00:18:51 without it.

00:18:52 Here's the thing.

00:18:52 Have you ever done this?

00:18:53 Have you ever gone and said, oh, I need to copy this.

00:18:56 And then you go over and accidentally copy something else.

00:19:00 Or I don't know about you, but I use Bitwarden for my 2FA stuff.

00:19:04 And by default, it has a copy.

00:19:06 In addition to pasting the 2FA code, it'll just copy it because sometimes the paste fails.

00:19:12 But if I didn't have this clipboard thing and I like copy something important and went over and I tried to want to paste it somewhere,

00:19:17 oh, I got to log in.

00:19:17 I hit my Bitwarden thing and I'm like, no, it's gone.

00:19:20 Where did that go?

00:19:21 You go back and find it.

00:19:23 This thing called Paste for Mac.

00:19:26 I know there's similar things for other platforms, but my recommendation in this little extra is Paste.

00:19:33 So super, super nice thing.

00:19:35 They just released Fivo, which is like a big improvement.

00:19:37 So what it does is it'll keep track of three months, a year, one month, whatever, of clipboard

00:19:43 history.

00:19:43 So you can copy three, four things, go back, hit a button, go back, find them, you get

00:19:47 little thumbnails of them.

00:19:49 Or you can even search.

00:19:50 You're like, just, I want to see what did I copy?

00:19:52 You can just type Firefox and I'll show you everything you've copied from Firefox in the

00:19:56 last month.

00:19:56 And you can copy from that or reuse it or whatever.

00:20:00 And it'll like synchronize across Mac and your iPhone and so on.

00:20:06 So super cool thing.

00:20:06 Anyway, they just had a big release.

00:20:08 It works much nicer.

00:20:09 If you don't use something like this.

00:20:10 I think I would do it by just like five minutes.

00:20:12 But, you know.

00:20:13 Yeah, you can do five minutes.

00:20:14 I mean, you can change however you want.

00:20:16 But I think you'd be surprised.

00:20:18 You're like, oh, yeah, I know I copied that yesterday.

00:20:20 Or I have the same.

00:20:21 Whenever I'm creating a new Python Bytes stream, I have the same description.

00:20:26 but the software won't remember the same description from, so I got to copy it or retype a paragraph, right?

00:20:32 Like, no.

00:20:33 So I just hit the hot key to pull this up and I type join us and then boom,

00:20:38 that's the join us to be part of the show and come to the live stream, da-da-da-da-da,

00:20:41 and I just paste it.

00:20:42 And so from last week, I just get that back in like three keystrokes.

00:20:45 Oh, nice.

00:20:45 Brilliant.

00:20:46 So if you're on macOS, check out this paste.

00:20:49 They had a new release, super nice.

00:20:52 If you're on something else, maybe send us recommendations.

00:20:54 We'll give them a shout out or something.

00:20:56 All right, those are all my extras.

00:20:57 How about you?

00:20:58 I got a couple.

00:20:59 Let's see.

00:20:59 Where are we at?

00:21:01 So Python, the documentary.

00:21:03 I've kind of looking forward to this.

00:21:05 There's a trailer out, official trailer for the Python, the documentary.

00:21:09 It's just a couple minutes.

00:21:12 But it looks like it might be fun.

00:21:14 This looks great, Brian.

00:21:15 This looks really good.

00:21:16 And I know they did this, like, joke thing about Guido coming back and the empire strikes back sort of thing and all that.

00:21:23 But if you click on CultRepo, the username of this right there, and go to their videos and look through it,

00:21:30 like if you look at all the things they've done, you can see, by the way, that video I talked about.

00:21:34 But they have from Node.js to Dino, and they've got the Angular, the official documentary, and so on.

00:21:42 They've got a bunch of cool, in-depth, highly produced Ruby on Rails, the documentary, and so on.

00:21:48 A lot of programming-based, framework-based documentaries, like really nice storytelling there.

00:21:55 So I think that is what's coming with the Python documentary.

00:21:59 I'm going to have to check out Life Advice from Bjorn Strewstrup.

00:22:03 Pointers.

00:22:04 Always use pointers in your life.

00:22:06 Never duplicate.

00:22:08 Yeah.

00:22:08 Interesting.

00:22:09 Yeah.

00:22:09 No, some good stuff there.

00:22:11 Okay.

00:22:11 So that was one was the documentary.

00:22:14 Documentary?

00:22:17 Also, quick errata.

00:22:20 I mentioned that when I was talking about t-strings, I mentioned like the raw conversion.

00:22:25 It wasn't the raw.

00:22:27 Henry corrected me.

00:22:28 It's the repper conversion.

00:22:30 Thank you, Henry.

00:22:31 So the next step.

00:22:33 So, okay.

00:22:34 So the new Python.

00:22:36 Oh, Tim Hopper.

00:22:40 We covered this already.

00:22:41 The Python developer tooling handbook.

00:22:43 And one of my comments was, where's the testing?

00:22:46 So anyway, he added a testing intro also, setting up testing with pytest and uv.

00:22:54 And actually combining the two is kind of fun to show how you do add pytest to your dev environment with uv.

00:23:02 Pretty fun.

00:23:03 Very simple example, a little calculator sort of thing, add, subtract, multiply, testing.

00:23:09 So shameless plug, if this isn't enough intro to pytest you'd like, I suggest going over to courses.pythontest.com where you can pick up any course you want on pytest.

00:23:23 And a couple others, I guess.

00:23:26 Last thing is I've been using Pocket for a while to keep track of things I want to read.

00:23:32 Pocket's going away.

00:23:34 It's shutting down, I think, as of July, July 1st.

00:23:38 Anyway, I don't know when it's shutting down.

00:23:40 But it's shutting down, so you've got to move off onto it.

00:23:44 If you're using Pocket, don't use Pocket anymore.

00:23:47 What do you should use instead?

00:23:49 Obviously, you can check whatever, try your own things out.

00:23:52 I tried a few things, and I landed on Raindrop.

00:23:55 So I haven't been liking Raindrop so far.

00:23:59 And somebody, I posted this on social media.

00:24:02 Somebody said, well, what does the code look like?

00:24:04 Because sometimes these bookmark sort of apps aren't that great at code highlighting.

00:24:10 And I'll show you an example.

00:24:12 This is of Brett's T-string article.

00:24:17 It's not bad.

00:24:17 It doesn't.

00:24:18 So the web view had, this is the normal view had, oh, it doesn't show highlighting.

00:24:25 The other version I had had syntax highlighting on Brett's site, but it doesn't show syntax highlighting.

00:24:32 It's just code blocks.

00:24:34 So it's not bad.

00:24:35 Anyway, I've been enjoying Raindrop so far.

00:24:37 And that is all of my extras.

00:24:40 Awesome. Yeah, I started using Raindrop and I love it. I moved all my, I went on a journey, Brian.

00:24:47 Not only did I start using Raindrop, I said, I'm going to go to all my various browsers I've used

00:24:52 throughout the years, Firefox, Vivaldi, and others. I'm going to clean up all of their bookmarks

00:24:58 because they'll be like just cruft. You know what I mean? From like 10 years of, I'm like, nope,

00:25:04 nope, nope, nope, nope, nope, nope, nope. Keep these 100 or whatever. Then I imported all of

00:25:09 those into raindrop and now i have the extension in all my browsers so on any computer any browser

00:25:15 i have all the same history it's really nice so i definitely second that

00:25:19 also beast i just started off clean i got like three things in there so far i

00:25:24 not only migrated i cleaned it up one other option if you're a self-hosting person this appeals to me but i did not do it because i just don't want

00:25:33 more things to babysit at the moment but this thing that used to be called hoarder now named

00:25:38 Kara Keep. Looks super cool. It's like a self-hosted read it later bookmark service,

00:25:44 which is cool. Automatically tag your bookmarks with AI and et cetera, et cetera. Looks pretty

00:25:50 cool. So yeah, but I'm not using it. Are you ready for a different kind of joke?

00:25:55 Yeah.

00:25:56 All right. Have you seen this yet? No. Okay. Well, here we go. So I was sitting around thinking,

00:26:03 I don't know why I came across this, but I'm like, what if we had like historical quotes

00:26:08 that are well-known, but they were reframed for programmers, right?

00:26:12 So I set out to make this just the joke for the show.

00:26:16 And then I ended up kind of like, you know what?

00:26:18 Why don't I just publish this?

00:26:19 And then we'll still make it the joke for the show.

00:26:21 So you know the Roosevelt's man in the arena speech?

00:26:25 I love this speech.

00:26:26 I'll read it.

00:26:27 It's a little bit long, but not very long.

00:26:28 I'll read it for people.

00:26:29 It says, it's not the critic who counts, not the man who points out how the strong man or woman stumbles

00:26:35 or where the doer of deeds could have done them better.

00:26:37 The critic counts.

00:26:38 The credit belongs to those who are actually in the arena, whose face is marred by dust and sweat and blood, who strives valiantly, who errs, who comes up short and again and again, because there is no effort without error and shortcoming, but who does actually strive to do the deeds, who knows great enthusiasms, great devotions, and who spins oneself in a worthy cause, who at best knows in the end the triumph of high achievement, and who at the worst, if they fail, at least they fail while doing greatly, so that their place shall never be with those cold and timid.

00:27:08 its souls who never, you know, neither know victory nor defeat.

00:27:12 All right.

00:27:12 So that's the famous quote.

00:27:14 What if, what if Theodore was speaking about programmers?

00:27:17 So I came up with a couple of versions.

00:27:20 I think these are more fun.

00:27:21 All right.

00:27:22 It is not the, I kind of gave him title.

00:27:25 This is a legacy code warriors.

00:27:26 This first one, it says it is not the keyboard warrior of comment threads who elevates the

00:27:31 craft, but the engineer whose IDE still glows at midnight, whose mind is seared by stack

00:27:37 trace here graphics and whose resolve endures failed build after failed build.

00:27:43 The honor rests with those who wade into legacy code knee-deep in technical debt,

00:27:47 emerging grimy but triumphant with a cleaner architecture, or if defeated, bear the proud scars of having fought for elegance.

00:27:57 Then, I'll do the last, I'll read the last one.

00:28:00 This is good.

00:28:01 This is to the open source maintainers.

00:28:03 No glory clings to the spectator who counts another's failed build.

00:28:07 It crowns the open source contributor whose pull request is battle scarred by review,

00:28:11 whose changelog tells the failures endured, and whose merged code becomes the unseen engine of tomorrow's discoveries.

00:28:19 There you go.

00:28:19 I like it.

00:28:20 Yeah, something inspiring for people there.

00:28:23 You having trouble sleeping, Michael?

00:28:24 Actually, yes, but this is not evidence of it.

00:28:29 Okay.

00:28:29 No, I like it.

00:28:30 Yeah, thanks.

00:28:32 All right.

00:28:32 Well, that's all I got for you, Brian.

00:28:34 That's what I got.

00:28:35 All right.

00:28:35 That's good to wrap it up then.

00:28:37 Indeed.

00:28:38 All right.

00:28:38 See you later.

