00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 312, recorded November 29 2022. I'm Michael Kennedy. And I'm Brian I can This episode is brought to you by the compiler podcast from Red Hat, check them out, really appreciate them supporting the show. And we got a lot to cover today, you want to just jump right into it.

00:00:21 What I want to talk about is Simon Willison, this, this is incredible. So Simon did a talk at Django con 2022. And then he wrote up the word up with the slides and everything, and we're gonna link to his blog, his blog title is coping strategies for the serial project hoarder. And then the the talk title was massively increase your productivity on personal projects with comprehensive documentation and automated tests. Yes, that's a mouthful. But really, I don't know what a good name for this is, other than everybody that worked with development needs to watch this talk, because it's incredible. So he, he goes through a lot of stuff I'm gonna go through, I'm gonna, luckily, he's got screenshots on here. But he starts out. So this is this is important, not just for open source projects are personal projects. This is also for if you're working in a company, I think this is equally true. So he talks about how he got this, these techniques from working at now I'm going to forget where he worked. But that's gone, a large company with multiple continents. And it was helpful to do this model. So what is he talking about? So one of the things he talks about is the perfect commit. So we don't, we don't really, as a professional software developer, you're not really doing new code all the time, what you're doing is maintaining existing software. So so the commit is your unit of work. And a perfect commit is, is includes the implementation of whatever you've done. But it also has tests and documentation and a link to the issue thread. And this is it seems like a lot to me, but walking through his talk, it totally makes sense. So he gives an example of, of one of his with with some some cool highlights that highlights that he's got documentation changes, also, the document change, documentation might just be a single line change or something. But the the tests, he does pause here and say tests are hard for some people, for some developers. So it's important to get get a working test framework in place quickly, so that the test developers and starting from scratch, they're just or a software developer, when they're writing tests, it's just, it's not like comprehensive testing has to be there. But it is a test that passes when you're when your change is there and fails, when it's not there or fails, when it's not working. That's enough, you can do more thorough tests, thorough testing, but that's enough to get us started. And I think that's a good way to think about it. Then he goes, talks about how he throws in this little cool thing of like, just keep common types of projects that you're you have around as cookie cutters in your own in your own GitHub area. He's got a Python library and a click app and dataset plugin for him, I might have different things like a PI test plug in or something. And that way, you can just keep up with your best practices, what you think of as best practices in one place. This is a cool idea. totally gonna steal this.

00:03:33 And then for myself, as well, I've built like a predated cookie cutter. But I built this thing, like I always want to have logging, and I want it like this, I always want to, you know, connect to this other service and like ping it to make sure that the thing is a lie, or whatever, whatever thing we decided for monitoring inside of our company I worked at and like all the new projects would just start that way. And it was so nice, because you didn't like as it really worth doing the thing that makes sure that we can monitor this a time. Like you just run the one command line thing. And it's, it's there, right, we could give it to an intern and they could run it to start their projects. That was great. And

00:04:06 then he's got like this thing that supposedly with a GitHub hook. And I'm gonna have to dig into this more, because I didn't quite understand how this works. But he's got a way within the GitHub interface to say I want a new project. And it automatically like gives you the choices or what kind of project and then fills out all the defaults from the start, instead of just getting the readme like normally. So this is kind of neat. And I guess I want to try figuring this out the documentation bit. At least one of the things about including this, even if it's difficult, you can have this be part of the code review requirements. So don't don't accept a code review until the documentation is there also. So this is a cool idea. And then the bonus track of testing documentation, which is a cool idea. And then the links to the issue and I thought this was just sort of a yes, you should do this, but this is real. The the meat of the talk is him doing his entire thought process in the issue thread and even gives examples where there's sometimes like up to 5060 comments, and it's just him talking to himself. But this is brilliant. And I'm not going to convince you as much as, as he is, but include screenshots and, and dead ends, like I tried this thing and it didn't work. And we're gonna go back into this other thing. This is an he calls it temporal documentation. And I just love this idea. And I'm going to try to follow this myself. Because I have like a memory issue, I write stuff down. And I then I forget where I wrote it down. And this were this way, he says, You don't have to remember anything, you just dump it there. And that way, let's say you, you get pulled off of a project and, and you don't get back to it for like six months, because you've been fighting fires and do other other stuff. And then you get back to it, you won't remember where you're at. And with this, this, this line of thinking of keeping all of your thinking in the issue thread, you can just jump in and go, Oh, that's where I was, and get started pretty quickly. I love this school. So then the rest of the talk is pretty interesting to talking about how, like, you know, scientists been doing this and other engineers have been doing this for a long time. They called them lab notebooks before, and we kind of got out of the habit of doing that with software. But anyway, lots of great techniques. And I think this is just how to be a professional software developer. Now.

00:06:27 I love that it's like a casual conversation and not like your my four recommendations, but like the playing around and the dead ends are really, really valuable. Yeah, came out. The audience says the cookie cutter approach also works beautifully from a DevOps perspective for setting up developers to use your firm's specific infrastructure. Yeah, I totally agree. And that's a little bit of what I was hinting at, of like, here's how we integrated with this like uptime manager and stuff. But obviously DevOps that was talk, we were deploying to a server in a closet there, which, I mean, that tells you all you need to know. Yeah. Speaking of stuff, you might need to know, Brian, Google copilot, and these code writing AI is I've more to say that, but at the very end of the show book in this little bit, they train themselves on lots of code, and Google copilot for those of you who are doing now, you basically can give it a comment. And like, I want to connect to a Postgres database with SQL alchemy, and then boom, it'll like literally write all the code, import the usings, you know, come up with a connection, string, all that kind of stuff. It's pretty fantastic. We had some privacy issues. I don't know what it's doing. Now. It used to send your source code that you wrote up to GitHub, which made me not want to use it already. But the big news, here is the website GitHub co pilot litigation.com. And that's as ominous as it says, We filed. This is what the website sort of analysis was we fought a lawsuit challenging GitHub co pilot and AI product that relies on unprecedent. Open source software piracy. Why piracy, because it's trained on things that are like GPL, and Creative Commons share, like or attribution. And then it outputs code based on that original input that has no GPL. And it has no, you know, whatever license, right, the license is stripped, and no attribution. What do you think

00:08:21 suddenly talked about from the very beginning of like, how was this okay? Yeah, not sure.

00:08:27 Absolutely. If it did things like we are only going to look at MIT licenses and other commercial open, no attribution licenses. I don't think there'll be anything, anything to say about it. But apparently, that's not the case. So there's a couple of updates as well, I suppose. We should also like they do on this page, say we are not a lawyer. Please don't take legal advice from us. We write code, not legal documents. But nonetheless, it says, This is Matthew Broderick. And they've set up to the to investigate google co pilot and they filed a class action lawsuit in the US Federal Court in San Francisco on behalf of a couple folks. So they're challenging the legality of GitHub co pilot and a related problem product open AI Codex, which powers copilot the suit has been filed against a set of defendants that includes GitHub, Microsoft, and open AI. Wow. There's an update down here somewhere. Let's see. It says by training, here's the motivation for their lawsuit by training their AI systems on public GitHub repositories, though based on their public statements, possibly much more. We contend that the defendants have violated the legal rights of a vast number of creators who posted code or other work under certain open source licenses on GitHub, which licenses a set of 11 popular open source licenses that all require attribution, the author's name and copyright, including, I guess, the MIT license, well, the GPL and the Apache license, and it's listed out there there's a whole bunch more details and it says Update November 10, that original was November 3, there's an update here. This is we follow the second class action lawsuit on behalf of two additional plaintiffs, the defendants and claimants are otherwise similar to the initial one. So there you go. It's gonna be interesting. It's not going to be just interesting for Google of accurate GitHub copilot, but basically AI in general, right? It says, it's, it's going to challenge that AI strips, the ownership and other requirements of inputs and outputs. Right? And maybe it does, maybe it doesn't. I mean, we've heard that API's are not copyrightable in the Google, Oracle Java lawsuit. So we're gonna find out here.

00:10:42 Oh, interesting. Yeah, I mean, like it. When I, when we looked into this a little bit earlier, if it if it's helping you fill in parameters to a function, or what what likely things you're gonna fill in for a function call? That's one thing. But when it plops down, like 20 lines of code for you, where did it get those 20 lines of code? And, and then I mean, open source doesn't necessarily mean you can copy it, you it's just open to read. I mean, the you can have a, you can put your own license in there. You can make up your own licenses as anybody can read this, but you can't copy it, use it or do anything else with it at all, can't even fork it. And there's nothing stopping you from doing that sort of a license in grant or

00:11:25 the default. If you put it on GitHub, I believe if you put no license means you have no light, you're conferring no license whatsoever, right? Yeah, it

00:11:33 just means it's just like, it's like like writing a book. You can't you when you write a book or you have the full copyright, unless you give it to somebody else. So yeah,

00:11:42 absolutely. All right. Well, let's stick with my screen for a second, I want to tell you all about our sponsor for this week compiler. So this episode of Python bright bytes. This episode of Python bytes is sponsored by the compiler podcast from Red Hat. Like you, Brian and I are fans of podcasts. I listen to more and more these days, actually. And I'm happy to share this one compiler and original podcast from Red Hat. So if you want to stay on top of tech without dedicating tons of time to it, check out compiler they present perspectives and topics and insights from the tech industry free of jargon and judgment. They want to discover where technology is headed beyond headlines and create a place for new IT professionals to learn grow and thrive compiler helps people break through barriers and challenges turning code into community at all levels of the enterprise. One recent interesting episode is their great stack debate. I love love, love talking to people about their architecture, their code, all the trade offs and conventions. As you will see later in the show. I'm going to talk a bit about that at the end as well for us. And the costs that come with this. The challenge is things that are awesome the things that are not. So this episode is like that, check it out to see if software it's like an onion or like lasagna or it's more complicated. It's the first episode in a compiler series on the software stack. So listen to more about compiler at Python bytes that this you can just go type compiler into your podcast player. And that's what I would do, General, but please use our links so that the folks at Red Hat know that you came from us. Yes, yes. And thanks to compiler for keeping our podcast going strong. All right, everybody, Brian, what's the next one?

00:13:16 So it's, this is a silly thing. But sometimes I've got code that I want to Python code that I want to have a pop up, you know, window pop up. And I've always been using, what is it? Pi simple GUI? Well, not always. But that's what I've been using lately. For for like really easy, just a simple pop up thing, especially if I needed to use run on Macs and really anywhere. Because it's like totally fast to get it done. And I don't have to think about it anymore. However, pi simple GUI doesn't. I don't I haven't mastered the art of getting it to look just like at Native dialog box. It's and maybe there's some tricks that you can do that I just don't know. But if I'm on when if I know it's on Windows, maybe we could just go ahead and use the Windows DLLs. And they do that a native Windows

00:14:07 just go straight into the Windows 132 API for

00:14:11 Yeah, sure. Whatever. That shouldn't be too hard, right? It sounds scary to me. But we ran across Matt Caroline's blog. Matt Callahan has an article called display a message box box in Python without using a non standard library or other dependency actually you just do this. You don't have to install anything. And I got this I want to where did I get this from? Give credit where credit is due. I got this from the PI quarters weekly newsletter. So thanks for thanks to them. Anyway, this is not hard. So he has a little pop up example. And I should read the article but I just skimmed for the code. Here's some code. It's it. This pop makes a dialog box pops pop up and it's calling the calls it's just like a couple flags like 10 lines of code. It calls C types when DLL user 32, message box, e x, w, whatever that means. And with some with some stuff in it, like a title and a message and everything. So it's easy to see types, which I don't use much, but you know, you can get into DLLs. So C types is built into Python. And so this message box, I wanted to play with it a little bit more. So as I was playing with this, looked into the Microsoft documentation, the message box dialog, there's a one of the flags is this you type and it's like this hex value thing or a bit field. And you can orient a whole bunch of stuff. So you can use this to to get like an okay box or an okay, cancel box, you get different types of dialog boxes using this, this flag. And then once you've got this popped up, how do you need to know like what users clicked on and stuff. So there's, there's return values from this, and you can just like check the return value, and it's defined to be like, you know, a three for a board and a two for cancel and one for okay, and you can just check this value. So with just a little bit of code, you can have a native dialog box pop up if you need to include your code. So

00:16:17 yeah, that's awesome. And it does things like natively that you would expect, like for example, you hit escape, and you have an okay, cancel, it'll return cancel. I hate some of these these like UI things, they show up and you're like, well, it's got one text input and a submit button, you hit Enter, it does nothing like Yeah, great. Okay. Apparently, this is not real, I'm gonna have to just, you know, go click it or whatever, right? So hooking into the native OS is sweet like that. This looks like a thing that would be ripe for a short, simple little package that wraps up say all the Okay. So what kind of icon you want? Do you want like a warning? Do you want an informational icon? The button? Yeah, it seems really great. But this is fantastic.

00:16:59 So neat. And in built in. So anyway, just a quickie.

00:17:03 Yeah, comes included. And yeah, I really like it. And it's also a bit of a roadmap to show what you could do. Beyond that, right? There's more than just really simple dialog boxes, for example, like the Open File dialog box on Windows could probably be real similar, right?

00:17:16 Oh, yeah. Probably. Someone was looking it up. There's a whole bunch of dialog boxes you got access to. So

00:17:23 yeah, exactly. It's like a roadmap to like, well, I can like create a file or you know, any of these things, which I think is pretty cool. All right, let's flip away from OS specific to OS general, but stick with PI coders for a minute. So this one also comes from pi coders. I don't know if it's same issue or not. But very cool. It says, right, Chrome extensions, which also mean like brave and Vivaldi and others edge maybe write Chrome extensions in Python? Oh, oh, how does it work? Hi, script, of course. So yeah, we we just take PI script. And this is an article by Pete fist in and sort of walks through how he was able to use PI script, which is Python on WebAssembly running in the browser to use that to power a Chrome extension. And it doesn't really matter if it's a bit of a nine Meg download, because you install it once and it's local on your computer, right? So it just if you want to do this, it walks you through all the things you got to do in order to use PI script to write Chrome extensions, or Python to write Chrome extensions. What do you think cool, even shows you I put an icon. That's pretty cool. Yeah. But I have more for you. This show just in case people don't know this is an extra extra extra here all about, it's actually because I'm going to hit a whole bunch of things. So as of recently, just published this episode, I mean, look 3031 minutes ago, and it says py script, powered by micro Python. So one of the challenges that py script has had traditionally is it's based on the full nearly the full CPython runtime compiled into WebAssembly, which after you strip a bunch out, that doesn't work in the browser, it comes down to like nine megabytes, okay, it's for like this browser extension thing that's reasonable. But for you would never use them place of like Vue js on a popular page, because you want that page to load quickly. You want it to be good for SEO, all that stuff. But you know what? small and fast micro Python? Oh, neat. So I just had Brett cannon, Nicholas televi. And Fabio Flieger. On talk Python to talk about the work that they're doing to make high script not run on full CPython, but to run on micro Python. Oh, wow, cool. Python, you can get that to load up in 100 milliseconds on your page. It was only a couple 100k. All of a sudden, that starts to sound a lot like a pretty rich front end framework level of stuff. You got to download and get started and you cache it and you're good to go. That's exciting.

00:19:50 That's super exciting. Yeah, yeah.

00:19:52 So this chrome extension thing is cool. When you look at the shipping version, I don't know if you can call it shipping because price grip is still like super Alpha. But what you can get today. So Nicola said, probably spring that they'll have something to share. But in terms of being able to use micro Python, but I think that's pretty excellent that could really, really unlock some some super cool features. If now we could build like a Vue js type thing, but with Python, and one of the goals that they stated is that they're looking to build this as a framework, or excuse me, a platform that you can build frameworks on top of. So it's not just here's how you write some Python code in the browser. But here's a foundation that people could create, like a pie view or a pie Angular or, you know, whatever they wanted to create. Right.

00:20:39 So, good question just for my own personal use. Is, is with Chrome extensions work on Vivaldi?

00:20:47 Yeah, they do. Okay, one of the thing that's interesting about Vivaldi and I think it probably affects its reporting a little bit, when you look at the user agent of ivaldi. It's exactly the user agent of Chrome. So it lies to the world and tells the world it's chrome. There's no user agent for football day. It's just whatever version of Chrome it's like, using you know, okay, so when you go to the Chrome Web Store, it's like put this in Chrome, you click it and yeah, it goes. So it worked perfectly. Sure. Cool. Yes. And John Sheehan says, yes, they do. Alright, next Extra, extra extra. Brian, I've been excited a little bit about Mastodon. I don't know if you notice. Yeah, me too. I know. It's fantastic. It's really tons of great interactions. And I started putting in our show notes, which you will see when I publish this, your Mastodon account in mind so people can connect with us and, and have even more conversations over there. But there was a really interesting article by Eugene that the guy who created Mastodon called some been looking and looking it's about scaling Mastodon and the challenges they were having. And boy, it's, I would love to link to it. But I just can't find it. But it's so it's written in Ruby, right. And so it talks so much about these are the challenges of scaling out threads. And oh, we have this thing called a Gil. And it really doesn't allow you to use threads very easily. And and here's there's just it was so interesting to look at, at how a technology that doesn't have async, io and async and await getting all tangled up trying to do IO based things. So it's like, well, can we have maybe we should have 10 to 20 threads to do the network communication. But if we have more than 20, then we get like a context switching and contention and the operating system. You know, that just comes with having OS threads? Well guess what you can do really well, with no threads or one thread, you can talk to web, you can call other websites, you can receive web requests. And the mechanism for doing that in Python is async and await and asyncio requires no additional threads. Very, very little overhead, no context switching. So this project by Andrew sorry, if I am not getting at Andrew Godwin, sorry for his last name for a moment of Django channel said, what if I rewrote this, but in Python within async and await okay. So there's a bunch of challenges of running Mastodon, people want to have their own server because they're like, oh, I want my own server. So I'm not stuck in one of these communities and beholden to them. The problem is, every one of those is like a standalone DevOps adventure. There's tons of like, things working together. And it's, it's a lot of work, right? It'd be better if you put like host more of them on one machine and sort of scale, scale that up in a nice way. So this one lets you host multiple domains for small to medium instances. And it's written with async and await, which is pretty awesome. So yeah, anyway, check this out.

00:23:46 I didn't know if you if I caught you trying to pronounce it to Kai

00:23:50 Kai. I'm gonna go with that. But,

00:23:54 and of course, Andrew Godwin's just said, you know, I could probably write this in Python. And like, get it out in a couple of weeks.

00:24:01 I think it was like five days or something. So key features multiple domains support multiple identities per user, which is kind of interesting. desktop, mobile PWA. compatible. Again, how many days and easy deployment, a web worker, a background worker and one database not all this crazy, crazy stuff. So anyway, people can check it out. Let's check out the requirements. See what we got going on here. UV corn for an HCP X. I mean, that pretty much pretty much says it right there. Oh, interesting. It's based on each Django H T. MX is pretty interesting. Some of the building blocks but yeah, super cool. So there's another one. All right. i We just had our Black Friday sale of our talk Python. Cool. That was really excellent. It's all a bunch of courses. We sold some pi test courses by the way.

00:24:51 Yeah. Go I'm just excited because sometimes we have these sorts of conversations about you'd be like cool sales and stuff and I'm glad that I get to be a part do that now.

00:25:00 We've done other fun things where like, we couldn't sell your book through them because it's through the publisher. And I Yes, I guess tricky, right. So I'm really excited as well. So we did our Black Friday sale. And I guess what, I noticed something a little bit unusual. So I, after a little bit, I opened up classes on the main web server and said CPU usage is 85%. Oh my god, it's not so good. 8891 92 Oh, but what was super interesting was Nginx. Not Python. Was the thing getting hammered. So both nginx workers were like, almost 100%. And Python was just chillin, like, okay, that is a really interesting story for Python performance, that something amazing like nginx that people will say is fast all the time is the bottleneck. And it turned out it survived. But just barely, right? If it were like twice as bad, it would have it would have killed her, which had been bad. So I talked to a bunch of people about this. And I realize that there's one HTTP response, goons got to spell that better. And 12 CSS files, 43 images in one JavaScript file in the page I was sending them. So I'm like, Alright, maybe I should try to use some interesting CDN, which I had got a recommendation from one of our listeners, but otherwise hadn't heard about what a cool service. So now we have 112 different locations, serving up those static files. Nice and just processing. So I, I went back today, when we did our Cyber Monday and said, when I was yesterday, when I pushed out the announcement for Cyber Monday closing, and I pulled up the real time data, look at that traffic, that CSS and JavaScript images, 1.4 gigabytes a second, oh, my gosh, insane, dude. And check this out on the server. This is the most important part 3% CPU usage on Nginx. And across the whole computer across all of all of the micro risky processes, just a couple of more percent CDN to the rescue. Exactly. But the thing that's also interesting is that Python is just like, yeah, it was nothing like we can take that. But it's all those static files. So anyway, I put that right up together for people in order to serve out that that data, pay $2. Right. 4.35 terabytes. And by the way, it's going right now, oh, it's gotta refresh here. They have these cool real time maps, and whatnot. But that little spike right there is when I released the talk Python episode. And that's about four and a half terabytes per second, which is just insane. So anyway, I totally recommend people check this out. It's super fun.

00:27:32 You're reaching people all over the world. That's pretty cool. Yeah. And then amazing.

00:27:35 You get all these different locations. I think it lost its its web WebSocket connection because it stopped updating. It's like, there's a little warning this live monitoring is like a little bit of a suggestion of how things might be, but yeah, anyway,

00:27:51 yeah. What's up with Alaska? People not listening. Hey, Alaska.

00:27:54 Come on. They're gonna have to CDN over to it to Canada anyway. So not that this final one here? No, not final, a second final one that read all about it, or hear all about it. Reader five, I've actually been really getting back into RSS. And I do. Yeah. What's your RSS story these days? Like,

00:28:16 no, I use a Feedly on my phone just to keep up on on stuff. I

00:28:21 switch to things like Zeit, which is sadly gone and Flipboard. And these sort of like Apple news, like things where they kind of curate a bunch of different sources. I'm like, You know what, there's a bunch of great places I would really like to just directly get them from and curate a little more than just I suggest more Python. Because you know, how many times my Python channel in like Flipboard has woman scared of Python that comes out of toilet like, you know, no, not that Python, really. And so I've just been super loving. I've been using reader five with two E's. And what a nice piece of software this thing is for for 10 bucks. Okay, really cool. Yeah. So we'll check it out. Yeah. And another thing I would like if people have awesome recommendations for blogs, especially Python blogs that I should be following or people listening should be fine. Put that on the YouTube channel comments or send it to us on Mastodon or Twitter. And maybe I'll give a shout out to the ones that are extra good, but very, very cool. Let's see. Check this out. There's a podcast called sing for science. And on season three, episode eight, which just came out six days ago. Rivers Cuomo of Weezer, and Guido van Rossum sit down for a conversation. How cool is that?

00:29:39 That's pretty cool.

00:29:40 That's that's really cool.

00:29:41 So it'd be listened to Yeah, I

00:29:43 listened to it. I grab some grab my phone, my dog and went for a walk and listen to it because the sun came out and that was rare right now. So yeah, it's really interesting. Neat. i It's a lot of the host talking to rivers and talking to Quito and a little bit of interaction. I would love to let them more facilitation of talking to them to talking directly but both great people, rivers rivers is awesome. He does really cool stuff with Python. I had him on top python three, when he seven little automation tools, which was fun. So yeah, he's a he's a legit developer these days, which is it's pretty neat. Alright, final thing, Brian, final Extra Extra Extra. We started with I started at least my segment with AI coding, and I'm going to end it with AI coding kite. You remember kite? It was like the original GitHub co pilot? Yeah, yeah. Unfortunately, they are shutting down. So they've been around for 10 years or so not quite seven years, something like that really quite a while, but they're shutting down. So thanks for all the code, I suppose. And that's it. That's all I got for all my extras.

00:30:47 I want to add one. So we talked to Simon Wilson talked about one, one thing I didn't mention about in his talk is he encouraged people to write blogs, because there's not that the blogs were huge for a while. And then everybody was doing it. And now not so much. And so you do get noticed more if you're writing a blog, I think that that's a good thing. Plus, you can link we can link to it easier if you're if you got your article on the blog. But also, and RSS wise, planet, Python is something I still check out. So planet python.org, if you haven't heard of it, it has, you can either have the full content. So you can read in it pulls all of this through RSS from from different blogs. And so if you have in titles only, if you have a Python blog, or you're starting one, check out Python, Planet python.org. And try to get your name on the list. Maybe put out like three or four articles first, and then and then try to get your name on the list or your blog on the list. And that way it gets seen by people like us, even if you don't notify us. So yeah,

00:31:53 that's, that's excellent. I didn't subscribe to that. Because I feel like it's a little bit too much of everything. But I went through all the recent posts and said, This writer looks interesting, or this source looks interesting. And like, subscribe directly. So I kind of used it to start my exploration of those things I want to subscribe to

00:32:09 Yeah, not a bad idea. And you know, they have RSS feeds because they're in here. So

00:32:13 exactly. Since you brought it up, I just want to also point out like, what am I Roblox of writing a lot was, well, I don't have time to write like an article, something well thought out and you know, 1000 words and that, you know what my, my new philosophy has been? Let's just write like, really short posts. Like, here's one about a fun thing I did with spammers. And it's like three paragraphs, or here's one about installing something that's a PWA. It's two pictures and four paragraphs. And you don't you don't have to write essay, like long essays to contribute interesting things and ideas. I think so. That's following up on that.

00:32:48 Yeah, my my thoughts are if it's going to be a thread, make it a post instead. Yeah, exactly.

00:32:54 Exactly. All right. Well, my jokes have vanished. I had a cool joke on social media and it got taken down. It was it was it was really funny. It was totally benign. I don't know why it's gone, but whatever. And then, by the way, the following up on this Jimmy Page says you could also RSS Mastodon users. Okay, that's

00:33:15 it. And Mastodon hashtags as well.

00:33:20 Okay, yeah, I follow the Python hashtag over there. I could RSS it, I suppose. Excellent. All right, Brian. So do you have a joke for us?

00:33:28 Yeah. So speaking of Mastodon on Mastodon, I said, I'm getting I'm getting a lot of great Python content on Mastodon, but I need some joke people to like, I need some nerd jokes. Some asking for people in this. Somebody didn't ask Tell me a person to follow. But I'm still looking for people to follow with good jokes. So if you send them my way, or send me their way if if you know if people but here's one that I got from somebody on Mastodon, so I got it from who they get this from, I should probably give credit. So this came from Steven box. Nice. Thanks, Steven. So exit condition from monkey user.com. So it took me a while to get this. So there's a couple people sitting at a desk pair programming are guessing, and then somebody else is frustrated. They hear Wait, and he says the frustrated guy says that's it. And and, and he starts going towards a door that's labeled recursion. And somebody says, Wait, there's no, I'm going in. He goes in and he gets into the other side and says, Wait, he's the person trying to say wait. There's no exit condition. So it's a dumb joke, but

00:34:45 it's really good. And it's got some clever, clever where like the word the speech of the other one is off screen. So it kind of looks like it comes from the original group, but in fact is coming from the recursion of the first one and yeah, it's

00:34:58 Yeah, okay. It's pretty well one more Somebody said that I should follow all of her wage. Anyways, I just thought this was dumb and funny. bobby pin. No, I go by my full name Robert Pindell. And it reminded me that Bobby Tables thing, so yes,

00:35:17 exactly. I love it. All right. Well, thank you everyone for listening and Brian, thanks for being here.

00:35:23 Thank you. Yeah.

00:35:24 Bye everyone. Bye

