00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 322. Recorded February 7 2023. I'm Michael Kennedy.

00:00:11 And I'm Brian rockin.

00:00:12 I'm Calvin Hendricks Parker. Welcome, Calvin.

00:00:14 awesome to have you here.

00:00:15 I'm excited to be back. I love it's kind of my annual retreat.

00:00:19 That's right. That's right. Your annual drop in to share all your ideas with us. You got some good ones to talk about. I know, I also want to say thank you to Microsoft, for startups, founders hub for sponsoring this episode. If you don't want to connect with any of us, me, Brian, Calvin, or even just the show you find is over and busted on or all over, they're actually on Macedon. So you can find links and show notes. And if you're listening, but not watching, just go to Python by sight of him slash stream slash live where we will be streaming live every tuesday, usually, but you can definitely subscribe to get notified there. Calvin, I know you've been here before, multiple times, you always come to put us to shame with your fancy camera that you got going love it to tell people who maybe haven't heard about you or met you before. Who you are.

00:01:06 Sure. So I'm Calvin Parker. I'm co founder and CTO of six feet up. We are a software development company that helps digital leaders transform their impact. We do a lot of interesting work now around impactful projects. So it's like climate change, making the world a better place. In addition, I've started a couple communities. So the indie pi community here local Indianapolis, and then we've kind of branched out from that into some little local conferences into now Python, what conference? So that's the big thing you'll hear from me. Least this month or next month.

00:01:38 Yeah, we'll talk about that at the end of the show. But that's an amazing conference, you have, I would say potentially more talks or on par as many talks as US PyCon. It's really a lot going on.

00:01:49 Last year, there were almost too many, like it was so good. I could just kept saying yes to everybody. This year, we pulled back a little bit. We had more submissions. We'll talk about this later, but it was really hard to choose.

00:02:01 Yeah, it's tough to say no to deserving people. But

00:02:03 it's so much. So many great people.

00:02:06 Indeed. All right, Brian, kick us off.

00:02:09 I just wanted to talk about packaging today a little bit I've got I'm splitting it up into two segments. But I really want to focus on right now on the pipe EA has a packaging Python projects tutorial page. It's linked in the in the shownotes, of course, but I think this is a good, it's really pretty good. well written. And so I want to point people in this direction, if if you want to share your Python code with somebody else packaging, it is the right way to go. I think. And this, this tutorial walks through, it's not necessarily trivial to do it. So it I wish it was easier, but it's not bad. So walk us through what you you know walks through setting up your directory structure. It's then you have to have some package files with it, you've got to have a license file and a pipe Project dot Tom will now and a readme and then talks about your source directory and your test directory. So you've got the directory setup, right?

00:03:06 What I know you're a fan of the source directory for packages, it looks like. Exactly your philosophy is winning out here is the official recommendation.

00:03:17 Yeah. And I mostly I used to have good reasons behind it. Now I just like having the top level stuff just be packaging and having the actual source code be somewhere else in the source directory. It just it's a while you're developing it's it's nicer. If you have a single that there is like caveats, though, if you have a single file that you're just sharing, that might seem like overkill, and I I'm fine with, of course, I have packages as well that are single file that I don't do this with. So you don't have to, but most things, most projects are going to have more than one file if you're sharing it. So there's this though, and then what do you put in it. So it talks about what you put in the different things in the pipe project tamo and a little bit into the readme and some of the metadata. The things we're going to jump in to a little bit later in the show is that there are lots of options for what builds back end you use this this project itself or this document talks about hatchling setup tools flit and PDM. And they neither of them look that different and they kind of do this same thing but you can have different metadata that goes with it. So that's I think both a good thing that we have options and a bad thing that some people don't know how to choose. So

00:04:36 is it a really tough to like know, why should you do it? Maybe set up tools probably shouldn't be the choice I feel like that. You're moving a little bit away from that but it's true here

00:04:46 so deep like there's like a whole day a whole college course you could give on why these things are the way they are now.

00:04:53 Yeah. Yeah. So the in the project, the tutorial goes down into Even distributing so all the way down to recommending that you use twine to upload to the test repository, test pi pi. And you have to get a token. And it's not trivial and all this sort of stuff. So it's a little, it's still a little daunting. But this will walk through walk you through the all the steps. I have a personal opinion, of course, and my opinion is read this, and then check out flit. Because for simple projects flit is, I think, still the easiest. It replaces the Build step with flip build, and it replaces the creation of some of these files with flit in it. And it replaces the twine upload with just flip Publish. And I use it on a few projects. And I haven't had reason to switch yet. There's that it's not perfect, but it's pretty easy for small projects. So I would say read both of these if you want to share some Python code.

00:05:58 Excellent. Yeah, very good recommendation. And I think people need guidance here. Because there are so many choices. There's going to be a lot of conversation in the Python space around this actually, for sure. Yep.

00:06:09 All right. Let's move on, though. For right now.

00:06:13 Real Time follow up here as of about 30 minutes ago, oh, Feck, the creator of hatch. and I are gonna have a conversation March 1 on talk Python. So people want to hear more about hatch that's coming up in about three weeks or so. But what do I want to talk about? Something fun. Last time we had the Hon. This time we have the untangle. So untangle by St. Chris on GitHub, converts XML to dynamic Python objects. So thankfully, we've largely moved past XML. And really, thankfully, we've largely moved past XML namespaces. Because that just as a complication that never needed to exist. But there's still plenty of XML stuff out there that people have to work with. So here's a cool little library that people can use. So we already have XML support in Python through the element tree API, which is it's pretty nice. So it works. Well, you give it a XML document, but then you do sort of navigate it through like child parent or dot attribute, there's, there's like some, there's not a totally the cleanest, most straightforward API. So with this untangle thing, you can treat it like a Python object that just dynamically adopts the the nodes as fields of that those objects as a hierarchy, right. So super simple, you just get it to parse either a URL file or from a string, just an XML string. There's an example that it's just real simple. It has a root and it has a child node. And on the child node, it has an attribute where it says Name equals child one. Okay? So if you were to load that up with this untangle thing, you just whatever you get back, you say dot root, because that's the first element. If you wanted to say, for example, that name attribute, say, dot route, because that's the name of the route is whatever the first element, then the next element is dot child. And then to get the attribute, just treat it like a dictionary and say bracket name, and outcomes, outcomes value. So that seems really, really clean and nice.

00:08:17 But does other than the fact you're still dealing with XML? Yeah. Well,

00:08:22 I was just dealing with XML this morning. Yeah.

00:08:24 Yeah, absolutely. So I suppose there's an API for a numerating things where you have multiple ends, right? You can have Child Child Child Child with name, one child will change name to right as a list of things in this XML. So it's, there's probably, you know, maybe there's multiple ones I don't know maybe it's a list or something. I have to look actually realize I didn't totally look into that. But it's, it's pretty cool library. If people are doing things like that, they can definitely check it out. Here we go. Maybe

00:08:55 I think I will try this, because I have used the element tree, and it does the job. But I always thought maybe it could be easier. So what is the

00:09:05 speed like you knowing if it's fast, slow?

00:09:09 Honestly, I would imagine what it's doing is it's probably using an element tree. Yeah. It's just like a thin wrapper overtop of it. But I don't, I don't know. Let's see. It's using the fused XML. Sax. Okay. I have no I don't know anything about sax, XML, but yeah, okay. Pretty interesting. No, I don't have anything it doesn't unfortunately, the readme doesn't have a lot of information about you know, like its performance and other things. But yeah, they also have a blog post you can check out about why they built it, which is kind of neat. So also sweet, short and sweet. But check it out. If that sounds like something that would benefit you. Very cool. Indeed. Already, you

00:09:51 know, someone else that can benefit you is going to be my PI is official wonder Oh released. think this was as of about a week. Got a half ago. So it's pretty, pretty new news ton of stuff here. So for those you don't know, my PI is the static type checker for Python, basically, a Python linter on steroids. So if you are using pipettes, this is going to be a great way for you to make sure your code is basically ready to go before he even runs. Something a lot of developers coming to Python from other static statically, or strongly typed languages really appreciate. And I think it's something that a lot of Python developers are moving to, especially it's like this, the surge and popularity of languages like TypeScript, because the IDE s are really supporting this like so well, so you get a significant improvement in your quality of life, if you move to a tool like my PI and start using my Python and Python hits. So tight ends in Python, there's some things to watch out for. So as this new release rolls out, they're changing their numbering scheme used to be like 0.999, you know, they kept kind of extending this like, point nine beta release window. But it's actually now wonder, Oh, it is not Simba. So do not count on minor releases not having backward incompatibilities, although they should be very minimal, is what they claim. But some of you may want to be aware of you are upgrading this. And when you go in and pin your My version, you want to be really explicit about it, because they're gonna make sure they announce those significant backward incompatibilities in any kind of blog posts in the release before that feature releases. So the idea is it has

00:11:29 like a gut feel over? Yeah. For like, what's the official term? Yeah, it feels like a big release, let's go ahead and change this part of the version. But

00:11:38 on that same note, they do have a feature flags for this. So if there's a new big feature coming, there's going to be a backward incompatible feature, the previous release notes will note it, the release, we'll have it there'll be a flag to turn it on. So you can try it out easily in your workflow, see what breaks without having to downgrade we upgrade downgrade we upgrade, so you can actually turn it on and off and make sure it works inside your workflow on your process. Lots of performance improvements. So 1.0 is 40% Faster than 0.91. There's about 20 optimizations in this list. And this is you can see by my scroll bar, there's a ton of stuff that happened when they went to release 1.0. But some more things in here that are nice features, for example, warning about variables before definition, and kind of goes along with this possibly undefined variables. So for example, B is never true, X never happens, you'll never be able to print x, my pie will tell you about that before you ever run your code. So it's kind of like just a lot of those belts and suspenders nice safety checks, keep your code nice and clean, combine this with you know, tools like black and things like that, to just have super tight code that is easy to read for everybody. Some new features that are supported as of Python 311, the new self type is supported. So if you are having a method that returns an instance of the class, you can use the self type so that if you have a subclass, you get the correct subclass for return, instead of having to explicitly redefine that. For every subclass, you are doing some more convenience methods for those who are diving deep into the typing system. hear yourself type is so good. Yeah, it's really cleans up a lot of problems was really janky

00:13:15 to you know, if you're inside the class, you put in quotes, the name of the class, well, How's it supposed to find that one? Or if it's going to create a circular dependency, you've got to do weird things. So yeah, that's really, really nice. I do wish that Python had like a two stage parser aspect where it would say go through, here's all the stuff that's defined in the class. Oh, here's some type things and other reference. So we might not know what that is. Let's go all through and then go back again and see if we can figure out what that is, you know, but the way it works now is when you're in the middle of a class, it that class doesn't exist yet, because it's not done to find it until you the end. But if you've got to say, I'm going to compare this against another one to me, Well, how do you say that in types itself? Right, it's nice all we got. Yeah, and

00:14:00 I can see this like being rolled in to proper Python, it seems like at some point, because I just feel like types went on from being this pie in the sky idea to bolted on type feature two, it's really getting ironed out and really supported well supported by the community and really well supported by all the editors. This new parameter pack stuff in here that I don't know too much about prams TBEX. I'm not, we're not heavy into types yet. We're doing a lot with Django and doing some type ins there to start making some API's. But that's where we're still diving in bunch of new like miscellaneous features. So if you are looking for features galore, that has happened in my PI one dot O, there's a bunch of fixes to crashes. So this seems like it's a really robust release. Another important one here is going to be the Python 310 Match statement support, so it can compile those as well. So they're staying on top of all the recent language features, which is obviously what's needed to get momentum behind a project like this. I think anybody who's using If it's better of using the my PI stuff, for those who don't know, is also supported by Dropbox. So when I said 40%, or No the other 40% faster that was actually running against the Dropbox, main codebase. So they're actually that's the benchmark against Dropbox itself. Interesting. Yeah. Yeah,

00:15:19 my Pisces pretty interesting thing that opens up once you started to adopt types. For me, the main reason I use types in my world, and I realized that I'm, I live in a different world than a lot of folks. But for me, it's really about making the editor tell me what it should know already and not joining to go look in that method does this actually take when it says User ID? Is that a string? Or is that a be sawn from MongoDB? I can't remember what kind of thing this store is for this. It says, you know, and okay, that's obvious, right? Just so you don't have to keep bouncing around. You just stay staying in the where you're trying to focus on

00:15:54 extra smart. I mean, you thought if you if you're using a PI charm or VS code, and you thought it was smart before, when she was introduced these types in there, it gets even smarter.

00:16:04 Absolutely. All right. Awesome. Awesome. One. Now, two pieces of real time feedback. One, I found out with the untangle that if you have multiple want multiple nodes of the same thing, like you would in an RSS feed, you have multiple posts or a blog post, same thing for the posts, that you just still say route dot, you know, main thing dot child, or whatever the name of that node is that becomes a list instead of a single thing, if there's more than one. Okay, so that's pretty interesting. And then the other one, here is over to you, Brian, is asking an old project be converted to work with flit.

00:16:41 And yes, probably, maybe. It really depends on the project.

00:16:47 Some of it can be re you there's not that much to it. Right? There's Project automall. And a few other things. And it's probably not that much work to migrate it, I guess.

00:16:57 Yeah. But I mean, an all I miss assuming by all project, it's a setup to an old setup is that of tools project, and you could do anything in that. So if you were going crazy. You can't go crazy anymore. But but if it was a fairly simple, straightforward, then yeah, probably,

00:17:16 if you were going crazy, you get what you deserve. How about that. So all right, before we before we move on to our next topic, let me tell you about our sponsor for this week, Microsoft for startups, founders hub, really great program. If you have a startup, and you want to get tons of support, not just technical support, but also networking with people who have founded their own startups, then you should check out Microsoft for startup founders hub. As Brian mentioned, last time, we heard back from one of our listeners who signed up and had done several startups and said, I was a little skeptical. But this is a really great program. It's fantastic for us, and I just wanted to let you know how well it's working out. So definitely good program, people check it out. So what it is, as Microsoft created this program to help people become successful starting a business, by some estimates, 90% of startups go out of business within the first year. That's not what you want for your startup, you want it to succeed. So with Microsoft, for startup founders hub, you get access to free resources. So this includes platform technologies like Azure, GitHub, they partner with open AI, I've heard chat GTP is catching on. So that's kind of cool. So you get access to some of the resources from them, which is fantastic. But you also get access to a mentorship network, which I think maybe is even the most important part, get access to a pool a hundreds of mentors across ranges of disciplines, across areas like idea, validate, validation, fundraising, management, and coaching, sales and marketing, and others. So you can go and book one on one meetings with these folks. And many of them are former founders themselves. So you can make your idea around real. Make your idea reality today, the critical support you get from Microsoft for startups founders hub, just visit Python bytes, dot F m slash founders hub 2022, to get to go apply the links in your show notes. You don't have to be VC backed. You don't have to be third party validated. You just apply. If they they like what you want. It's free. And they'll take you under the program and get started. So thank you to Microsoft for supporting our show. And without Brian, over to you.

00:19:24 Yeah. So go back to the same article for a second. scroll a

00:19:29 little further down the same page. Okay, got it.

00:19:31 So, in within the same packaging pie Python projects thing, there was ever a reason to bring this up. But anyway, it lists a whole bunch of tools you can use to for your back and build a back end. It's got PDM Flitz up tools and hatch link. There's another page on the same in pipe API or pipe EA, that is the packaging flow. And this one talks about it as a more of a high level. It's not a tutorial talks about the high level thing Hang in there, it lists all of those flit hatch PDM, poetry sub tools, and then also trample in in way, which I've not heard of. So this, this can cause confusion. And that's really what we're talking about is I have an I'm bringing this up because just independent of my involvement with Python bytes, I've, I've been involved with people having trouble figuring out how to package there's Python code. Independently, I got a web developer doing it a tools back end person. And there's somebody that's just trying, he's a C sharp person that just was trying to package a front end to his tool, a Python front end. And he was like, I don't know how to do all this. And it is confusing. And it even is confusing for seasoned Python developers. And here, we've got, oh, I didn't, I didn't link it right now. But there's, there was a Doug Hellman from module the week, we'll posted that he was a he's published lots of packages. And he went to do it again, and was a little lost and wanted some advice. So new people or people that are outside of the scope, are confused. And I think it's fair to recognize that. And so there's a lot of discussion around it. And prod Yan put together a blog post was talking about it on, on discuss, and he put together an article called thoughts on the Python packaging ecosystem. And I think it's a kind of a fair discussion around it. And one of the points is that a lot of Python users are not software engineers, and but we also have to recognize that a lot are. So there's, it's a diverse ecosystem, and I think it's, it's gonna be a mess, it's gonna be a mess for a while. And I think it's going to be, I think it's good that it's a mess. In some cases, it's good that we have, we don't just have setup tools, now, we have a lot of ways that are working on different pieces of the problem of, of, you know how to make it easier, around pipe project that Tom on, you're gonna have a different build back end. But we've the he breaks down the points. It's a big article, but one of the things is it kind of unintentionally, the packaging ecosystem unintentionally became a competitive space that it is today. And maybe we need to make an app, the community needs to make an explicit decision, if we should continue operating under that model, that led to what we have now. We could pick from in different tools to do in different things. That's a good model, according to this, or in proximately, the same choices to get a really bad user experience, bad for some people, good for others. And then you also maybe we should pick a default, because picking a default doesn't make the other approaches illegal, they just aren't the default. And I'm kind of leaning towards that. I think it would be good to have something but I'm not sure what, down longer down the line. Pardon me of the scroll is Pip, one of the top ideas is maybe we should have well, okay, I'll back up a little bit. Some of these tools like poetry and PDM, or workflow tools. And other tools like, like flit are more build Flitz more like I want to build, just build a wheel. It also does publish, but mostly the workload is around building the wheel. Whereas PDM and poetry are like this whole workflow thing, control your virtual environment, do a whole bunch of stuff. And I know a lot of people from other languages like JavaScript, and other maybe go I don't know, are used to these, like, leave these high end workflow, things that do everything for you. But we're already used to a multi tool model now. So I'm not sure how to get from here to there. Interesting. It would be interesting that have PIP to it. I mean, we already all use PIP. So could PIP expand to do both the focus thing it's doing now installing a package. And, and then also do some workflow stuff. And I guess I'd be kind of open to explore that idea. But I was curious what you guys thought

00:24:16 I'd be open to explore it. i Not to disparage anything, but I personally dislike the things that try to put their workflow onto you. But I'd much rather have something simpler and so wanted to teach us Python. This is a huge problem for people getting into language. They feel like it's a big challenge. Why is it so hard? Why do I have to learn all these things? I pick the wrong thing. And now am I screwed? No, you're not out of luck. You just you just delete your virtual environment and start over but yes, things are. I think, I think having many of them one is a problem. Yeah. And I think something that have forces workflows on you. I'm not a huge fan of. I feel like we've already got lots of tools that solve it pretty well. I'm kind of not against PIP doing a little bit more I use PIP tools for managing my dependencies and it is so good. It is. So good. You state just your top level dependencies. And when it's time to, let's see what new, let's make sure we upgrade to the new things. You just run PIP tools upgrade and it'll regenerate. You can evaluate what the changes are. It's I really, really liked iptables. I think it's, it's a much simpler scenario than a lot of, and I know other people wouldn't. But anyway, this is what I like,

00:25:25 we could possibly leave PIP alone and expand PIP tools to do the rest of the workflow stuff. Yes.

00:25:30 Yeah, it's good, we could, but I kind of agree with that, like UNIX small tools to do one thing really well, which is why I've kind of gone with the PIP tools approach as well, because I really feel like PIP tools does such an incredible job at that dependency resolution and getting exactly what you need. That way, they're way better and way faster than PIP itself does. I think that approach that like flit takes, it seems like and I've never used foot, but the fact that can just wrap around pre existing tools to provide a common interface for for users to be able to build package push, the whole whole deal seems like really nice because it guides them through step by step that process until maybe at some point, they don't need it, or they just enjoy it. And it's using the some of the standard tools behind the scenes. Yeah, five, also with Michael, I don't like the predefined workflows that like, I'm not a huge fan of poetry, necessarily, because it just doesn't fit the way my brain wants to work on a project.

00:26:23 And I'm not surprised. So I was I was thinking that analogy of like, if you're going to have a pocket knife, which tools should be in the pocket knife? And if you go into like, the medium pocket knives on the Victorian axe site, oh, no, it won't load, you get like 10, even the small ones. So the medium ones, you get like tons of different tools, which tools should be there? Nobody's going to agree. And I thought, well, at least in the small ones, maybe people can agree because Oh, no, not even the small ones people can agree, which should go together. So yeah, I want

00:26:55 my my swiss army knife to also have drywall tools and something from my car.

00:27:02 But I see that seems like a combination, though of really small tools to do one thing really well with some tools a layer on top of it, whether it's your IDE, whether it's flit and they can have the opinionated workflows layered on top of these, they rest on top of a solid set of identical tools that produce the identical thing. Yeah.

00:27:22 I'm in that camp as well. That's why but I totally get that that's confusing for people. But

00:27:29 the first time I go to explain to someone how they're going to manage like their dependencies on a Django project, I'm like, Oh, my gosh, I had to step back and think about the 20 steps that kind of go into how I learned to do this, that I'm now explaining some new person. Like, I'm sorry, this doesn't sound easy at all. This is gonna be a better way. But I don't know if there is.

00:27:47 Yeah. Anyway. Okay. Rabbit Hole, but

00:27:51 Oh, poling. I mean, Python packaging is the ultimate rabbit hole in the Python community. Yeah. Picking your packages.

00:27:57 Michaels, you don't want to jump into that yours.

00:28:01 I do want to talk about more packages. And this is a simplified version, but also a bit of real time follow up as well. Again, I'm having many of the folks that were on that discuss thread that you mentioned, Brian Ryan, about this topic on talk Python, probably in a couple of weeks, as a booker handle discussion about so. So if y'all want to hear more of this, but for a long time, with the folks who were participating and dive on in, okay, I'll also apparently, I said, chat GTP. Ron, I meant chat GPT as Musharraf pointed out, so thanks for that. So when I met, you know, the one Alright, so there's this cool GitHub page, I guess, called Top pi pi packages. And so this is a pretty neat place, it shows you the top 5000 most downloaded pi pi packages updated monthly. So you can scroll down here and you can say show me the top 100 Show me the top 1000 or whatever, pull up to 1000 for a brain. There you go. So these are updated over the last 30 days. And it actually says when it was last updated, and that was February 1, which is a week ago as of this recording, so it's pretty fresh, really. And so you can find things like pi test check isn't in here somewhere, Brian?

00:29:18 It's in. It's in the top 5000 But not the top 1000.

00:29:21 Okay, did I hit the wrong one? Sorry, I tried to pull you up there. But you see things like Boto three and URL lib are the most popular. So Boto three is downloaded 522 million times, every month every 30 days is that which is just insane. You gotta be careful because some of these are really popular dependencies rather than directly, really important libraries. Like I use Boto three all the time as a dependency less often directly. Definitely I'm pretty old through I don't think I've ever used it directly, but obviously it gets installed but I use many things. So this is pretty cool if people want to check it out carbon or anything.

00:29:59 Oh, I'd about this too, because it just thinking about the number of times the Amazon cloud must go download Boto three from, like I mind blowing like this all the server lists, that's on servers someplace downloading packages in the background. Now you get a feel for it with a big number.

00:30:18 Yeah, that's really nuts, which is also a little bit ironic, because it comes from AWS, and they sent it over. Yeah. And then it comes back to AWS.

00:30:29 That they use fastly for their CDN, I think these fascinating pie. Yeah, I believe so. Yeah. It's like to go to a competitor that you'd like.

00:30:39 Yes, exactly. Yeah, how interesting. So this is interesting, in and of itself, and it tells you which ones are there. There's an API which you can hit, let's not hit the medified. One, let's hit the non minified. One. And it'll tell you actually returns when it was updated, what the query was, et cetera, et cetera. And so you actually can get this as a JSON endpoint, which is pretty cool. It's just a static file that gets updated every couple of days on this GitHub page set up. So that's also an interesting way to think of an API. My API is a static file that periodically gets refreshed. But there it is. So don't think you'll have too much there.

00:31:13 I kind of love it, though. That's just kind of due to just

00:31:16 Yeah, yeah. Think how scalable that bad boy is okay. Especially if you put a CD in mine it. And then related to that by the same person, there is Hugo, Vic top PI packages on GitHub, which is a regular dump of the most downloaded packages from pi pi. So that sounds like Yeah, Michael, you told us about that. Thanks. A bunch. No, it's not the names. It's all of it. It's all of the data. That is here. Where do they have it? This one, I don't know if I want to open this up. But it's really big. So it's all the XML. I'm not sure where it is in here. But it's all the XML files of RJ read XML. The JSON files at untangle got me thinking XML. So it's all the JSON files of, of what comes out of the pipe API API. But all of them, it's when I checked it out and unzipped it, and it was like 22 gigs on disk. So this is a big beast right here. If you if you download it, actually, you know, this is not the right link, I have to find it. I'll put it in the show notes. But there's this guy, this is the wrong one. But there's also linked off of this. There's one where you get all of the packages, which is which all the JSON for every package, I have to figure out where I got that from, unfortunately, it's the wrong link I pulled up. But anyway, these are both really cool resources. And you have to check the links for that other one. Cool, definitely. Yeah. All right.

00:32:43 Coming in at 57, on that list for the last 30 days is SQL alchemy. So for those who aren't familiar, and do like Swiss Army knives, this is the Swiss Army knife of database tools, is not only an ORM, but it has a whole SQL toolkit built into it. So if you've never touched SQL alchemy, but dual deal with databases, you may want to check this out. And more importantly, and this kind of ties in with my previous announcement on the my PI one dot o release, there's a lot more support in this release for the types and typing. So there's kind of native out of the box, my experience has been improved. Now the author of SQL alchemy, Mike bear is actually going to be joining us in a few weeks here at Python web conference and giving a tutorial length session on SQL alchemy. He did this last time two years ago when he released one, four. So the if, for those of you kind of been following along in the background, the one four release was kind of the first half of this major revamp of SQL alchemy into this new world. And so to ours, the the second half of that revamp, so it's really been like four years coming for this major release of SQL alchemy. So if you want to know what's new, and hear it from the horse's mouth, Mike bear is going to be joining us and he'll be happy to answer all of your questions. Let's see, there's a ton of new things released in here think might scroll down. Yeah, so plug in free PEP, 44 compatible, or M syntaxes. So again, kind of ripping out the old stuff. All the typing support in here is all fresh. If you are using the my PI plugins from before, you're gonna want to take all those out. They're considered deprecated at this point, so those that's something that's very important for you to consider. But now, SQL asked me to I was using all the new Python, three wonderfulness of like data classes, enums inline annotations, it's just really a nice modernization of a really powerful package. See what else was in here? There was a super important Oh, yeah, some performance stuff. So this all new, fully integrated. ORM approach to bulk inserts is quite interesting. You will get a major speed increase, except if you're using MySQL. The MySQL folks have not implemented the insert returning syntax, but if you're on Maria dB, you're good to go. So that something to pay attention to the in addition to that performance, there's also the bulk optimized schema reflection. So if you were, were using SQL alchemy, it was basically doing a table by table reflection, if you were asking it for metadata about the tables. Now in all the back ends, there is basically a oh, sorry, I think it's only for Postgres and Oracle right now. So Postgres and Oracle Support the bulk schema upgrading see right here for Postgres, a 250%. improvement in for Oracle a 900%. Improvement, I'm not sure what it was doing before. But it's a heck of a lot faster now at 90% improvement, always a benefit there. And in addition, I'll kind of point out some of the things that were in the migration guide, and the What's New in two Oh guide, you're gonna want to make sure you check those out here. There's like the migration process link from this article or blog post, you're gonna want to make sure we do those because there's major incompatibilities from one four into two Oh, but the migration guide is really similar to like the two to three guide Python had tells you how to mechanically go through and make sure that you're going to be compatible for the latest version of SQL alchemy. Another speed improvement here is that all the native C extensions have been ported to Cython. Some of them are, they're off as fast, some of them are slightly faster than their previous C extensions. But this also removes the risks of memory corruption and stomp on each other and things that C does really well that you don't want. So that's also a nice benefit. And then the kind of tying into that same benefit is the SQL alchemy is now PEP 517 Come enabled. So that means the Pi project Tamil file that we just saw in the last couple of announcements is supported, which means when you're on your local machine and doing a source build of SQL alchemy, it can automatically go grab some of the dependencies such as Cython, which can be tricky to get installed for some people. So that is simplifying a lot of people's lives to go to SQL alchemy. todo

00:36:57 se welcoming to Dotto is a huge release. Yeah, it's a big deal. Yours has been years in the coming and it was in this intermediate 1.4 mode where you could choose either API and they finally removed some things. But to me, the biggest deal is the async. Yeah, right. It's in the prior versions, there was just no way to do any async things which meant on all the scalable areas, you were kind of stuck trying to find somewhere else to go. Now if you really liked sequel alchemy, you can just use the async API.

00:37:25 Yeah, I think a lot of people are gonna benefit from those types, all the type support in my PI native support. Yeah, absolutely.

00:37:31 Again, the editor, the bulk inserts have always been a hassle in RMS, I've always So sounds like that's really gotten a lot of love to you.

00:37:39 Yeah, definitely. I look forward to it.

00:37:41 I do as well. All right. Well, that's all of our, our topics. Brian, what do you got for us as an extra?

00:37:49 I guess just one quick extra is like one of the things I've been working on on the side is I'm going to build a I'm gonna create a new build back end for Python and a new workflow tool.

00:38:05 But what will you name it?

00:38:08 Well, I think flick because I always thought flit should have been flick. So like a little football. So how about let's go to Calvin's extras? Yeah, sure. So

00:38:20 I kind of mentioned this in the intro, but we are putting on the Python mob conference. This will be our fifth annual so big five years. I'm wearing one of the jerseys from last year. You can't see it, but it was really awesome. Last year, we had 90 speakers, we had over 400 attendees, something like 23 or 22 timezones like it was really a global event. That's one of the things I'm really proud of this, this event was meant to fill a hole I felt like in the Python community, for folks who couldn't travel couldn't afford to go to an in person conference or wasn't a regional conference near them. I know the PSF doing a lot of work right now and getting some regional conferences into other areas. But this is still and will always be virtual, and always be accessible to folks. So if you go and register and you can't afford to pay for this, we do have a grant program, we want to make sure that if you have a need to be in this room, you should be in this room, and everyone is included, this year is gonna be no exception. There's a lot of amazing speakers who have joined us, it'll be five half days from the 13th to the 17th. There'll be a keynote speaker kick off your day, a keynote speaker at the end of every day. And there's some awesome speakers coming up. We've got some people from GitLab, we've been focusing on finding some folks from climate initiatives to actually come and give some of our talks where they're using technology for good in these areas. There'll be a set of tutorials as well. So I mentioned Mike bears tutorial already, but there'll be three or four other tutorials as well. I know Matt Harrison is gonna be giving one of the tutorial, not tutorial, he'll be giving a keynote this year. So he's back again from last year he gave a keynote and a tutorial. man's heart is working in Python, but we really appreciate him Joining us as well, if you got questions, make sure you just go to Python web conf.com. You can also find me on Kelvin hp on Twitter. There's also a Twitter account for Python WorldCom. So you can follow Python will come on all the socials and join us. It'll be socials actually during the event as well. So it should be tons of fun. We'll have a just everything's like community. So I have

00:40:21 a question right off the bat. It says webcom. If I'm not a web developer, am I still going to be interested in this? Or is it primarily web development?

00:40:28 That's an excellent question, Brian. We originally, the web comp name meant a conference for web people. But we switched around, you know, because we felt like this was an opportunity for the conference for Python to be on the web. And now we have app dev track, which is not more than just web, we'll have a cloud track, we will have a PI data track. It's actually a officially sanctioned PI data event. And we have a culture track, in addition to that tutorial, so there, there is actually something for everybody in the Python world here. And we're really trying to, again, I mentioned filling the gap for people who can't make it to specific conferences. We're also trying to fill the gap for talks that I feel are a little more on the intermediate to advanced level. If you're looking for very entry level tutorials. This may not be the conference for you. I mean, there'll be great community lots of questions you can ask and there'll be tutorials, but I really wanted to make sure that the talks kind of scaled up that next notch when I go to a lot of regional conferences, or even PyCon. There's some entry level stuff there. That's great for people who are new to Python. This is that next step.

00:41:33 Cool. Um, I don't need to cut you off. But can we see with Michael's got any extras? Yeah,

00:41:40 I do. One, while Calvin Singh is up, I'm going to be speaking at that their conference about making your Python web apps fly with CD ends. Speaking of CD ends earlier, so I'm really excited about that one. That's a fun topic. But I want to tell you a couple of tips and tricks. I'll keep these short here, but they're kind of fun. So I recently discovered that with many of the browsers, like Vivaldi or chrome, sadly, not Firefox. Honestly, there's one of the reasons I quit using Firefox. They support progressive web apps, which many people may know. But even if you have a thing that is not a progressive web app, you can install it as a standalone from your perspective application that lives in the dark. So the thing I got on my screen, and I'll link to in the show notes is here's my Vivaldi. But then I have my different mail clients, I got proton mail and Gmail, I got the Google Calendar. All of those are just regular web apps. I don't think any of them are progressive web apps. But if you right click on the tab, you say create shortcut and say open in a window, they become their own little app that you have put in your dock, your taskbar, whatever. So for example, like here's proton mail running, you can see again, link in the show notes to the picture. And it just looks like an app like you would know as an app. It does you think it was an electron JSF, basically, but so if you want to have those as separate things, you can have running an alt tab or Ctrl, tab over do you go, sorry, oh, no, I closed my browser and my mail is gone. Again, I gotta open it back up. Right. If that ever frustrates you, here's a cool fix. Right? All right. I'm also speaking of proton I started using simple login Have either of you all use this? No. So I have a pro account at proton which is like, I don't know, couple of dollars a month for a bunch of years. If you pay awake way in advance, I think it's not very much. But along with that comes a single simple log on which every time you go to a website, I don't think I have the extension in this profile on my browser. But if you go to a website, it suggests, hey, we'll create an automatic fake one off email address that gets sent to wherever you decide to get sent to. And you can reply to it, and it goes back through there and things like that is really cool. So like, if I went to ARS technica.com And I created it would be like, some random thing at Ars Technica dash simple log on ish.io, or whatever. So you kind of know where it comes from. But it's, it's, if you want to just delete that and make it Mailstop. Or you can figure out if it's sold or whatever. So anyway, recommendation on checking that as well. It's also open source, you can host it yourself if if you like host hosting email. I don't really feel like doing that. If if you've heard about a new topic, if you've heard about all the crazy stuff with chips, the chips act in the US similar stuff in Europe, if you've heard about Biden banning chips, or the US government banning chips to be used in certain things, primarily in China. But, you know, there's a bunch of angles in which this kind of stuff is heating up, not just with the US, but primarily around the US. There's an incredibly good documentary on on YouTube called us versus China the war you can't see that talks about the history of this and it just reminds me of how much good stuff there is on YouTube. I mean, I know there's a lot of stupid cats falling off of chairs and like idiots, but hidden in there, there are some like this is a better documentary than you would find on professional On top tier television networks, it's really good. Anyway, if that's interesting to you,

00:45:06 I will second that documentary note. I have a 15 year old here who's obsessed with long form YouTube. And some of the things he has shown me. It just blew my mind like, why the superconducting supercollider didn't succeed. Eight hours of like documentary on that other now

00:45:23 what? Yeah, there's there is no more discovery channel. There's no more History Channel. Yeah, I know they exist in name, but not in what they were they actually have real science and real information. They're just reality TV and other silly stuff. So alright, I know we'll get short on time, Brian. So I'll go quick. Talk pythons hiring. So I'm looking to hire somebody that does flutter and Dart, not Python, because if it's Python, I'd be doing it myself. But if you're out there, and you have experience with publishing apps, and flutter apps, in particular to the various app stores, if you are used to working on like Android and iOS and others with flutter, and you can show me an app, an app, so I would love to work with you. I'm going to post this somewhere pretty soon. But I want to put it out to the community first, cuz I'd rather hire somebody from our community than just some random person off the internet. And it's primarily to do a complete rework of our mobile apps for talk Python training. So that'd be a lot of fun. If people are interested. Just just email me. Michael at talk python.fm That's it. That's all my extras. Yeah. Nice. Calvin, thanks for being here.

00:46:28 Thanks for having me. I really enjoy it. It's lots of fun. I get to go learn new things each time I go.

00:46:33 Yeah, we do every time we show up with a while started. Alright, and Brian, thanks as always. Thank you. Bye, everyone. Bye.

