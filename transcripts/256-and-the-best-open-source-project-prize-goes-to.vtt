
00:00:00.000 --> 00:00:02.040
- Hello and welcome to Python Bytes,


00:00:02.040 --> 00:00:03.640
where we deliver Python news and headlines


00:00:03.640 --> 00:00:04.840
directly to your earbuds.


00:00:04.840 --> 00:00:09.280
This is episode 256, or as Anthony Shaw likes to put it,


00:00:09.280 --> 00:00:12.640
two to the eighth, recorded October 27th, 2021.


00:00:12.640 --> 00:00:13.560
Again, unless you're Anthony,


00:00:13.560 --> 00:00:15.760
which is probably like a totally different day in the future


00:00:15.760 --> 00:00:16.820
'cause he's in Australia.


00:00:16.820 --> 00:00:17.880
I'm Michael Kennedy.


00:00:17.880 --> 00:00:19.200
- And I'm Brian Akin.


00:00:19.200 --> 00:00:20.920
- And I'm Anthony Shaw, hello.


00:00:20.920 --> 00:00:22.280
- Hey, hey, Anthony.


00:00:22.280 --> 00:00:24.280
How is the 28th?


00:00:24.280 --> 00:00:26.800
Is the next day gonna be good or things are okay?


00:00:26.800 --> 00:00:28.600
- Yeah, it's pretty sunny today, it's nice.


00:00:28.600 --> 00:00:29.720
- Yeah, right on.


00:00:29.720 --> 00:00:32.440
- Okay, so the world hangs together for one more day.


00:00:32.440 --> 00:00:33.420
Fantastic.


00:00:33.420 --> 00:00:34.260
You've been here before.


00:00:34.260 --> 00:00:36.280
You've been on Talk Python a bunch of times,


00:00:36.280 --> 00:00:38.240
friend of the show, all sorts of stuff.


00:00:38.240 --> 00:00:39.720
So I'm sure many people know you,


00:00:39.720 --> 00:00:41.900
but just tell people a bit about yourself.


00:00:41.900 --> 00:00:44.640
You're doing more techie things these days.


00:00:44.640 --> 00:00:47.140
You're a little closer to the code, maybe?


00:00:47.140 --> 00:00:48.280
- Yeah, so earlier this year,


00:00:48.280 --> 00:00:50.560
I started working at Microsoft


00:00:50.560 --> 00:00:55.320
and worked with Nina Zakharenko on Python inside Microsoft.


00:00:55.320 --> 00:00:57.400
And yeah, a lot of what I'm doing at the moment


00:00:57.400 --> 00:01:02.280
It's just running around, breaking things, sometimes on purpose.


00:01:02.280 --> 00:01:07.680
Yeah, just saying how we can improve our experience and working with VS Code and Azure and a whole


00:01:07.680 --> 00:01:08.680
bunch of other stuff.


00:01:08.680 --> 00:01:13.600
So yeah, it's been a while since the last episode was episode 100, I think.


00:01:13.600 --> 00:01:15.440
Wow, you're hitting the big numbers.


00:01:15.440 --> 00:01:20.320
So yeah, this two to the eighth is a significant milestone, I think.


00:01:20.320 --> 00:01:21.320
It is.


00:01:21.320 --> 00:01:22.320
It's pretty cool.


00:01:22.320 --> 00:01:23.320
Yeah, awesome.


00:01:23.320 --> 00:01:24.320
Well, we're happy to have you here.


00:01:24.320 --> 00:01:25.320
Thanks for being here.


00:01:25.320 --> 00:01:26.800
Also, something to do with a puppy I've seen on Twitter.


00:01:26.800 --> 00:01:29.800
Oh yeah, I got a puppy as well.


00:01:29.800 --> 00:01:31.920
He's not a golden something.


00:01:31.920 --> 00:01:39.080
He's a border collie, but he's kind of golden colored and he's not in the room at the moment.


00:01:39.080 --> 00:01:40.920
He's not allowed in here while I'm recording.


00:01:40.920 --> 00:01:44.360
I thought it would be a bit chaotic.


00:01:44.360 --> 00:01:49.920
My puppy sometimes is here, but it's very bizarre the way that puppies socialize around


00:01:49.920 --> 00:01:52.680
COVID instead of us being gone and then we come home.


00:01:52.680 --> 00:01:57.080
She now knows and understands the expressions I make to end a Zoom call.


00:01:57.080 --> 00:01:59.720
So she'll sit quietly for an hour and as soon as I say goodbye on Zoom, she's like, "We're


00:01:59.720 --> 00:02:00.720
ready to go.


00:02:00.720 --> 00:02:01.720
Let's go."


00:02:01.720 --> 00:02:04.120
It's super bizarre, but yeah, that's the world we live.


00:02:04.120 --> 00:02:05.640
So enjoy the new puppy.


00:02:05.640 --> 00:02:09.480
Brian, you want to kick us off with our first topic here?


00:02:09.480 --> 00:02:11.520
- Lucas Lange, he's, what is he again?


00:02:11.520 --> 00:02:12.520
The developer in residence?


00:02:12.520 --> 00:02:13.520
- Yes.


00:02:13.520 --> 00:02:14.520
- For Python.


00:02:14.520 --> 00:02:18.840
Anyway, he wrote an article called, "Where Does All the Effort Go?


00:02:18.840 --> 00:02:21.640
Looking at Python Core Developer Activity."


00:02:21.640 --> 00:02:25.040
And I kind of really like this article.


00:02:25.040 --> 00:02:31.160
Not only talks about really what's going on with developers and who's doing what.


00:02:31.160 --> 00:02:34.480
To start off with, he talked about how he got this data.


00:02:34.480 --> 00:02:42.680
So this is also sort of a data processing, sort of information scraping sort of article.


00:02:42.680 --> 00:02:50.440
He's looking at the GitHub repository data for CPython, of course, and specifically pull


00:02:50.440 --> 00:02:56.360
request data. So there's a discussion about he's even using Dataset, which is nice. We've covered


00:02:56.360 --> 00:03:03.240
that on the show. And even lists the SQL queries that he has to try to get some of this data.


00:03:03.240 --> 00:03:11.240
So some of the neat data that he's got. Oh, also since Git, the data is from the time when CPython


00:03:11.240 --> 00:03:19.080
moved to GitHub. So that's February 10, 2017. And he mentions that it's up through October 9th is


00:03:19.080 --> 00:03:20.720
is when he pulled the data.


00:03:20.720 --> 00:03:23.500
So, but all the information is there


00:03:23.500 --> 00:03:25.280
so you could grab it yourself if you want.


00:03:25.280 --> 00:03:26.840
Even the little scripts he's got


00:03:26.840 --> 00:03:29.380
for modifying some of the data.


00:03:29.380 --> 00:03:31.920
But so some of the interesting things,


00:03:31.920 --> 00:03:36.240
the top parts of CPython that are modified,


00:03:36.240 --> 00:03:37.680
it's probably not that surprising


00:03:37.680 --> 00:03:42.680
that ciaval.c is involved in 259 merge requests.


00:03:42.680 --> 00:03:45.580
It's the top merged file.


00:03:45.580 --> 00:03:47.760
- ciaval.c, yeah.


00:03:47.760 --> 00:03:50.840
That's where the bytecode processor is.


00:03:50.840 --> 00:03:53.720
So yeah, that's where all, that's the center point


00:03:53.720 --> 00:03:55.080
or the tunnel everything flows through.


00:03:55.080 --> 00:03:56.000
Does that make sense?


00:03:56.000 --> 00:03:58.520
- Yeah, and then goes on and looks at


00:03:58.520 --> 00:04:02.200
which contributors merged, have merged.


00:04:02.200 --> 00:04:04.520
And this is an interesting thing


00:04:04.520 --> 00:04:07.440
or had been involved in PRs.


00:04:07.440 --> 00:04:10.600
It lists the top, he lists the top 50 people


00:04:10.600 --> 00:04:14.600
but it includes some bots, which is interesting.


00:04:14.600 --> 00:04:15.440
- I was gonna ask that.


00:04:15.440 --> 00:04:17.480
I was thought BetaViz is probably gonna be up there


00:04:17.480 --> 00:04:18.980
or Mrs. LinkedIn.


00:04:18.980 --> 00:04:21.160
- Yeah. - Both bots, by the way.


00:04:21.160 --> 00:04:24.120
- So this is a, I'd actually love to talk to,


00:04:24.120 --> 00:04:26.760
or either me or Michael or somebody,


00:04:26.760 --> 00:04:28.760
talk to one of the, or Python people,


00:04:28.760 --> 00:04:30.720
to talk about the different bots that are used


00:04:30.720 --> 00:04:32.120
and why they're used.


00:04:32.120 --> 00:04:33.240
'Cause that's an interesting thing,


00:04:33.240 --> 00:04:36.120
of large projects using bots to help out with


00:04:36.120 --> 00:04:38.280
some of the work. - Yeah, that is interesting.


00:04:38.280 --> 00:04:42.320
- And anyway, the non-bots,


00:04:42.320 --> 00:04:44.000
there's a couple of people that stand out,


00:04:44.000 --> 00:04:49.000
Victor Stinner and Serhii Sorkaka,


00:04:49.000 --> 00:04:52.240
so I apologize for messing up your name,


00:04:52.240 --> 00:04:54.220
but that's, they're really up there.


00:04:54.220 --> 00:04:57.700
So that's pretty interesting that they're involved a lot.


00:04:57.700 --> 00:04:59.980
And then there's a description here,


00:04:59.980 --> 00:05:02.900
a nice note that Lucas writes,


00:05:02.900 --> 00:05:05.300
"Clearly it pays to be a bot or a release manager


00:05:05.300 --> 00:05:08.680
since that's naturally causes you to make a lot of commits.


00:05:08.680 --> 00:05:11.540
Victor and Serhii are neither of these things


00:05:11.540 --> 00:05:13.540
and still generate an amazing activity.


00:05:13.540 --> 00:05:14.380
Kudos.


00:05:14.380 --> 00:05:16.540
And also it's not a competition,


00:05:16.540 --> 00:05:18.500
but it's still interesting to see who makes


00:05:18.500 --> 00:05:20.280
all these recent changes.


00:05:20.280 --> 00:05:23.960
By the way, this, that top PR thing was only since


00:05:23.960 --> 00:05:25.440
the beginning of January, 2020.


00:05:25.440 --> 00:05:27.700
So taking a look at the more recent stuff.


00:05:27.700 --> 00:05:30.700
And then one of the things that's interesting


00:05:30.700 --> 00:05:34.820
in looking at who contributed where, I didn't know this.


00:05:34.820 --> 00:05:36.300
There's an experts index.


00:05:36.300 --> 00:05:39.820
So that was linked.


00:05:39.820 --> 00:05:41.580
Ooh, it's asleep.


00:05:41.580 --> 00:05:45.260
An experts index that is part of the Python developers guide.


00:05:45.260 --> 00:05:46.520
I didn't know this was here.


00:05:46.520 --> 00:05:49.840
It's a kind of lists parts, some parts of the system,


00:05:49.840 --> 00:05:51.660
but there's blanks.


00:05:51.660 --> 00:05:56.160
And so there's, so Lucas also,


00:05:56.160 --> 00:06:00.960
or listed to the script and pulled out the top five


00:06:00.960 --> 00:06:02.880
contributors to each file,


00:06:02.880 --> 00:06:07.680
which is kind of an amazing list of all of the different,


00:06:07.680 --> 00:06:10.580
of, you know, the top five people for every file


00:06:10.580 --> 00:06:11.880
within CPython.


00:06:11.880 --> 00:06:13.580
So if this is kind of neat,


00:06:13.580 --> 00:06:15.260
because if you're going to do a PR


00:06:15.260 --> 00:06:17.460
or you're working on a fix or something


00:06:17.460 --> 00:06:19.220
and you're a little confused by some of the code,


00:06:19.220 --> 00:06:21.160
one of these people might be able to help you out.


00:06:21.160 --> 00:06:23.180
So this is kind of a neat list.


00:06:23.180 --> 00:06:26.820
So there's a, at the bottom of the article also,


00:06:26.820 --> 00:06:30.760
it talks about some of the, some of the takeaways from this.


00:06:30.760 --> 00:06:34.720
Don't have this right off the top of my head.


00:06:34.720 --> 00:06:37.580
Merging, how long it takes to merge a PR.


00:06:37.580 --> 00:06:41.860
So it's hard to draw information from this data


00:06:41.860 --> 00:06:43.300
because it's all over the map.


00:06:43.300 --> 00:06:45.540
The standard deviations are pretty large.


00:06:45.540 --> 00:06:48.940
But if a core developer merges their own PR,


00:06:48.940 --> 00:06:50.320
it takes on average about seven days


00:06:50.320 --> 00:06:53.220
to get through the process, give or take 42 days.


00:06:53.220 --> 00:06:57.460
And then core developer authoring a PR,


00:06:57.460 --> 00:06:58.740
which is merged by somebody else,


00:06:58.740 --> 00:07:02.300
it takes longer, about 20 days, give or take 78.


00:07:02.300 --> 00:07:05.140
And then community author, it's up to 20 days,


00:07:05.140 --> 00:07:06.400
give or take 80.


00:07:06.400 --> 00:07:08.360
But I mean, I work on commercial projects


00:07:08.360 --> 00:07:11.080
that are not really that much faster than this.


00:07:11.080 --> 00:07:14.360
So it's not too bad.


00:07:14.360 --> 00:07:15.600
What do you think of this article?


00:07:15.600 --> 00:07:17.080
- Yeah, Anthony, what do you think of this?


00:07:17.080 --> 00:07:19.120
You spent a lot of time inside the CPython code.


00:07:19.120 --> 00:07:21.800
I mean, you did write a book, "CPython Internals,"


00:07:21.800 --> 00:07:23.280
which people can check out, right?


00:07:23.280 --> 00:07:26.600
- Yeah, I did write a book about CPython source code.


00:07:26.600 --> 00:07:28.640
So it's interesting.


00:07:28.640 --> 00:07:30.440
First of all, I'm super excited about Lukasz


00:07:30.440 --> 00:07:32.520
being the new developer in residence.


00:07:32.520 --> 00:07:35.020
I think he's got the right approach


00:07:35.020 --> 00:07:38.980
and he's already made really promising progress,


00:07:38.980 --> 00:07:42.680
I think, in terms of trying to make


00:07:42.680 --> 00:07:46.500
the community contribution process a bit slicker.


00:07:46.500 --> 00:07:48.180
Yeah, that's that at the bottom.


00:07:48.180 --> 00:07:51.220
Like, just watching the GitHub repository,


00:07:51.220 --> 00:07:54.140
core developers working on the repository


00:07:54.140 --> 00:07:55.540
and making changes and stuff,


00:07:55.540 --> 00:07:58.940
from the outside, looks fairly seamless.


00:07:58.940 --> 00:08:02.600
My own personal experience has been,


00:08:02.600 --> 00:08:03.860
sometimes it's quite, like,


00:08:03.860 --> 00:08:07.460
If your PR gets responded to within the first week,


00:08:07.460 --> 00:08:09.540
then it'd probably get merged pretty quickly.


00:08:09.540 --> 00:08:10.700
And then if it doesn't,


00:08:10.700 --> 00:08:13.180
then it just kind of ends up in the pile.


00:08:13.180 --> 00:08:17.140
And I've had ones in there for like three years.


00:08:17.140 --> 00:08:19.580
- Right, the average was seven,


00:08:19.580 --> 00:08:21.560
but it could go out at like another 40 days.


00:08:21.560 --> 00:08:24.060
And it's probably like really quick or really far.


00:08:24.060 --> 00:08:28.340
- Well, that metric is how long they take to get merged,


00:08:28.340 --> 00:08:30.640
which I guess requires that they are merged.


00:08:30.640 --> 00:08:32.940
- Oh yeah.


00:08:32.940 --> 00:08:37.700
I mean, there's basically just like loads of people contributing stuff.


00:08:37.700 --> 00:08:42.260
And there aren't enough people with enough time to sift through it all.


00:08:42.260 --> 00:08:43.900
And it just makes it really tricky.


00:08:43.900 --> 00:08:46.660
And the project needs to continue marching forward.


00:08:46.660 --> 00:08:50.220
And there's people who are dedicated to working on the core developers.


00:08:50.220 --> 00:08:54.020
But you know, some of the community contributions are really valuable.


00:08:54.020 --> 00:09:00.340
I think that's what's promising to me is that Lukasz is kind of looking at that and not


00:09:00.340 --> 00:09:06.260
just taking this role on as I'm going to be 100% core developer.


00:09:06.260 --> 00:09:11.260
Because yeah, there's already lots of other people on the team who are making some amazing


00:09:11.260 --> 00:09:12.260
contributions.


00:09:12.260 --> 00:09:19.020
You know, Pablo has been working on the new Pasa and now he's working on this like stacklist


00:09:19.020 --> 00:09:20.020
changes in 3.11.


00:09:20.020 --> 00:09:24.380
Yeah, there's so many things going on at the moment in CPython.


00:09:24.380 --> 00:09:26.100
So it's really encouraging to see.


00:09:26.100 --> 00:09:27.220
Yeah, it's super encouraging.


00:09:27.220 --> 00:09:29.620
I think Lukasz is doing a good job


00:09:29.620 --> 00:09:31.220
sort of smoothing out the edges


00:09:31.220 --> 00:09:33.140
to just make it easier for everyone to go faster,


00:09:33.140 --> 00:09:35.800
which I think a lot of times in teams,


00:09:35.800 --> 00:09:37.760
you know, not specifically here, but in general,


00:09:37.760 --> 00:09:39.720
there's these people who are kind of,


00:09:39.720 --> 00:09:40.940
oh, that's the person you can ask


00:09:40.940 --> 00:09:43.360
to make the CI work again when you break it.


00:09:43.360 --> 00:09:44.460
This is the person you asked,


00:09:44.460 --> 00:09:45.660
like, you just set up a new machine


00:09:45.660 --> 00:09:46.660
and remembers how to do that.


00:09:46.660 --> 00:09:48.900
And like, you don't necessarily get direct credit


00:09:48.900 --> 00:09:51.220
for doing that work, but without them,


00:09:51.220 --> 00:09:52.100
it's just way harder.


00:09:52.100 --> 00:09:55.060
And I feel like he's doing that for CPython behind the scenes.


00:09:55.060 --> 00:09:56.900
- Yeah, the experts index is really helpful


00:09:56.900 --> 00:09:59.980
if you want to get involved in bug triaging.


00:09:59.980 --> 00:10:03.160
So that's something that people are open to help with.


00:10:03.160 --> 00:10:04.740
If you go on bugs.python.org


00:10:04.740 --> 00:10:07.480
and you want to help to triage bugs,


00:10:07.480 --> 00:10:10.000
often what you have to do is kind of look at it,


00:10:10.000 --> 00:10:11.860
make sure that the person who's reported it


00:10:11.860 --> 00:10:14.340
is filled in all enough information,


00:10:14.340 --> 00:10:18.080
and then basically add people on the experts index


00:10:18.080 --> 00:10:19.380
to something called the nosy list,


00:10:19.380 --> 00:10:22.820
which is like a CC list basically on the bug.


00:10:22.820 --> 00:10:24.860
And then, yeah, it's just kind of directing it


00:10:24.860 --> 00:10:25.820
to the right people.


00:10:25.820 --> 00:10:26.880
Once you've done that for a while,


00:10:26.880 --> 00:10:31.260
then you kind of get given like a triage flag in your user.


00:10:31.260 --> 00:10:33.400
And then if you've been doing that for even longer,


00:10:33.400 --> 00:10:35.840
then you could be promoted up to a core developer.


00:10:35.840 --> 00:10:37.520
And there's a few people who've gone through that,


00:10:37.520 --> 00:10:39.960
that route over the last couple of years.


00:10:39.960 --> 00:10:40.880
- All right, Anthony, while you're talking,


00:10:40.880 --> 00:10:43.280
I got two things to share out of the audience.


00:10:43.280 --> 00:10:45.920
Dimitri Figal, hey Dimitri, great to see you here.


00:10:45.920 --> 00:10:48.000
Dimitri says, thanks for inviting Anthony.


00:10:48.000 --> 00:10:49.920
He's someone I look up to, very nice.


00:10:49.920 --> 00:10:51.340
- Thanks Dimitri, good to see you.


00:10:51.340 --> 00:10:53.560
- Yeah, and Waylon, who was recently on Talk Python.


00:10:53.560 --> 00:10:55.600
Hey Waylon, says what a great lineup here.


00:10:55.600 --> 00:10:58.600
also kind of for you and also Henry Schreiner.


00:10:58.600 --> 00:11:00.880
Hey, Henry, also recently on DocPython.


00:11:00.880 --> 00:11:04.160
Says both PRs I've been involved with to CPython


00:11:04.160 --> 00:11:06.080
got in in about a day, I believe,


00:11:06.080 --> 00:11:07.800
which that's pretty amazing.


00:11:07.800 --> 00:11:08.840
- That's pretty good, yeah.


00:11:08.840 --> 00:11:09.680
- That's great.


00:11:09.680 --> 00:11:12.240
- Yeah, so before we move off from this one, Brian,


00:11:12.240 --> 00:11:13.080
this is a good pick.


00:11:13.080 --> 00:11:14.360
One thing I just wanna point out as well


00:11:14.360 --> 00:11:16.560
is all of these cool stats and these graphs


00:11:16.560 --> 00:11:18.880
and everything we're seeing here apply to CPython


00:11:18.880 --> 00:11:20.480
because it's on GitHub, right?


00:11:20.480 --> 00:11:21.320
- Yes.


00:11:21.320 --> 00:11:23.040
- But you can run the same code


00:11:23.040 --> 00:11:25.480
and run dataset from Simon Willison against it.


00:11:25.480 --> 00:11:28.000
but against a different repo, I would imagine, right?


00:11:28.000 --> 00:11:28.840
- Oh, yeah.


00:11:28.840 --> 00:11:30.000
- Yeah, so if you run a project,


00:11:30.000 --> 00:11:33.400
you could probably do a similar analysis for your project.


00:11:33.400 --> 00:11:34.320
- That's a good idea.


00:11:34.320 --> 00:11:35.440
- Yeah, all right.


00:11:35.440 --> 00:11:37.000
Speaking of good ideas,


00:11:37.000 --> 00:11:38.880
and it's interesting that Henry's out in the audience,


00:11:38.880 --> 00:11:41.860
'cause I feel like we might have been responsible


00:11:41.860 --> 00:11:43.280
for this article.


00:11:43.280 --> 00:11:44.420
Clearly we did not write it.


00:11:44.420 --> 00:11:46.340
We may have triggered, is what I'm saying.


00:11:46.340 --> 00:11:49.300
Mostly me, in not the positive way, right?


00:11:49.300 --> 00:11:53.200
So this is a cool article by Paul Gansel,


00:11:53.200 --> 00:11:54.800
who is also over on Talk Python,


00:11:54.800 --> 00:11:57.320
talking about the mysteries of date time and stuff.


00:11:57.320 --> 00:11:58.720
There's all sorts of cool things.


00:11:58.720 --> 00:12:00.660
He maintains the dateutil package


00:12:00.660 --> 00:12:05.660
and setup tools projects and so on over on episode 271.


00:12:05.660 --> 00:12:07.240
So he wrote an article,


00:12:07.240 --> 00:12:10.480
said why you shouldn't invoke setup.py directly.


00:12:10.480 --> 00:12:12.640
And the reason I think I might have somehow


00:12:12.640 --> 00:12:15.080
had something to do this is Henry was on talking


00:12:15.080 --> 00:12:17.280
about CI build wheel and all the proper ways


00:12:17.280 --> 00:12:18.120
to build packages.


00:12:18.120 --> 00:12:21.400
I said, oh, you can run setup Python, setup py space,


00:12:21.400 --> 00:12:23.640
you know, wheel or bdest or something.


00:12:23.640 --> 00:12:24.920
and they're like, no, no, no, you could,


00:12:24.920 --> 00:12:26.000
but please don't do that.


00:12:26.000 --> 00:12:27.680
And then here we have this article like two days later.


00:12:27.680 --> 00:12:29.880
So I don't know if that was part of that conversation,


00:12:29.880 --> 00:12:32.600
but it's a really good article talking about


00:12:32.600 --> 00:12:36.120
the state of building Python packages.


00:12:36.120 --> 00:12:38.120
And it says, you know, look for a long time,


00:12:38.120 --> 00:12:42.040
set up tools and distutils were the only game in town


00:12:42.040 --> 00:12:44.200
when it came to creating Python packages, right?


00:12:44.200 --> 00:12:47.120
So you could do something like invoke Python setup,


00:12:47.120 --> 00:12:49.680
bdist, sdist, wheel, and so on.


00:12:49.680 --> 00:12:50.800
Wait, I see.


00:12:50.800 --> 00:12:53.600
So Paul is actually in the audience, real time, fantastic.


00:12:53.600 --> 00:12:57.120
Hey, Paul, says, I think I did it because Matthew Fiker asked for it on Twitter


00:12:57.120 --> 00:12:58.400
and I got sniped.


00:12:58.400 --> 00:12:58.920
Yeah, perfect.


00:12:58.920 --> 00:12:59.440
OK, good.


00:12:59.440 --> 00:13:00.800
So I'm-- just a coincidence.


00:13:00.800 --> 00:13:01.920
Fantastic.


00:13:01.920 --> 00:13:04.920
But yeah, so the reason this is extra interesting to me-- and thank you, Paul,


00:13:04.920 --> 00:13:11.280
for writing it-- is I was still doing this Python setup UI various commands.


00:13:11.280 --> 00:13:12.600
And I was talking to Henry.


00:13:12.600 --> 00:13:14.160
He's like, no, you shouldn't do that.


00:13:14.160 --> 00:13:15.040
You should do it this other way.


00:13:15.040 --> 00:13:15.680
I'm like, what?


00:13:15.680 --> 00:13:17.640
He said, well, OK, well, how should I do this?


00:13:17.640 --> 00:13:20.040
Oh, you should use build, the build package.


00:13:20.040 --> 00:13:22.420
What is this build package you speak of?


00:13:22.420 --> 00:13:26.120
You know, so we've talked about pyproject.toml


00:13:26.120 --> 00:13:26.960
a bunch of times.


00:13:26.960 --> 00:13:29.280
We've talked about things like flit and stuff


00:13:29.280 --> 00:13:30.920
that will use it, right?


00:13:30.920 --> 00:13:33.140
This all comes from PEP 517.


00:13:33.140 --> 00:13:35.820
And there is a package called build.


00:13:35.820 --> 00:13:37.040
You can pip install build.


00:13:37.040 --> 00:13:41.080
And then you do things like Python-M for module, run build.


00:13:41.080 --> 00:13:42.720
And you can say, I want an estus,


00:13:42.720 --> 00:13:45.420
I want a wheel and things like that.


00:13:45.420 --> 00:13:48.480
And this acts as a front end to things like


00:13:48.480 --> 00:13:54.160
set up tools to the various backends that do building or pilot.


00:13:54.160 --> 00:13:55.000
- Split.


00:13:55.000 --> 00:13:55.840
- Split, yeah.


00:13:55.840 --> 00:13:57.880
All these different things that understand it, right?


00:13:57.880 --> 00:14:01.640
So it says, "All direct invocations,"


00:14:01.640 --> 00:14:03.840
Paul says, "All direct invocations of setup.py


00:14:03.840 --> 00:14:07.280
are effectively deprecated in favor of purpose-built


00:14:07.280 --> 00:14:10.720
standard-based CLI tools like pip, build, and tox."


00:14:10.720 --> 00:14:12.640
So this is quite a long article.


00:14:12.640 --> 00:14:14.120
There's a lot to go through.


00:14:14.120 --> 00:14:16.000
It has some interesting history.


00:14:16.000 --> 00:14:18.920
So in the early days, there wasn't even distutils.


00:14:18.920 --> 00:14:21.760
And then in Python 2, distutils got added


00:14:21.760 --> 00:14:23.680
and then set of tools came along.


00:14:23.680 --> 00:14:25.560
And then there were, there's, you know, while they work,


00:14:25.560 --> 00:14:26.400
there's still problems.


00:14:26.400 --> 00:14:30.120
Like for example, you might have dependencies


00:14:30.120 --> 00:14:33.580
that you have to install to run the setup,


00:14:33.580 --> 00:14:35.380
but the way you install stuff and figure out


00:14:35.380 --> 00:14:38.000
what you depend upon is by running the setup.


00:14:38.000 --> 00:14:39.080
So what do you do?


00:14:39.080 --> 00:14:40.960
So an example of that would be Cython, right?


00:14:40.960 --> 00:14:43.840
So for, and you might have to import Cython


00:14:43.840 --> 00:14:46.260
and then the invocation of calling setup,


00:14:46.260 --> 00:14:49.880
you tell it how to Scythonize the PYX files, right?


00:14:49.880 --> 00:14:52.020
But that's obviously not gonna work


00:14:52.020 --> 00:14:54.780
because you're gonna have to have Scython installed,


00:14:54.780 --> 00:14:56.100
but how do you express that?


00:14:56.100 --> 00:14:58.260
You know, it's like this chicken and egg problem, right?


00:14:58.260 --> 00:15:01.020
So let me pull up my notes here.


00:15:01.020 --> 00:15:03.740
Yeah, so basically one of the big questions was


00:15:03.740 --> 00:15:06.500
why am I not seeing deprecation warnings?


00:15:06.500 --> 00:15:07.660
Let me go down a little further.


00:15:07.660 --> 00:15:10.140
Yeah, so if I'm not supposed to do this,


00:15:10.140 --> 00:15:13.340
why isn't screaming from the top of its terminal,


00:15:13.340 --> 00:15:16.100
Stop, stop, stop, why are you doing this, right?


00:15:16.100 --> 00:15:19.340
So there's a lot of commands that still have indirect uses


00:15:19.340 --> 00:15:22.000
of the distutils and stuff.


00:15:22.000 --> 00:15:24.340
So it's a little tricky to deprecate it,


00:15:24.340 --> 00:15:27.340
but basically you should consider it deprecated.


00:15:27.340 --> 00:15:28.160
You know, at the end of the day,


00:15:28.160 --> 00:15:29.540
it's better to replace your set of commands


00:15:29.540 --> 00:15:33.980
with tools like build instead of set up pysdist


00:15:33.980 --> 00:15:38.380
or bdistwheel or tox and nox instead of set up pytest


00:15:38.380 --> 00:15:40.620
and other commands backed by projects


00:15:40.620 --> 00:15:42.060
intended to support that.


00:15:42.060 --> 00:15:44.340
- Yeah, that sound good to you guys?


00:15:44.340 --> 00:15:45.820
Where were you on this?


00:15:45.820 --> 00:15:47.720
- Brian, you go.


00:15:47.720 --> 00:15:49.260
- Well, I don't use--


00:15:49.260 --> 00:15:50.100
- Have opinions.


00:15:50.100 --> 00:15:52.020
- I mean, I kind of indirectly use build,


00:15:52.020 --> 00:15:53.940
but I basically just use flit.


00:15:53.940 --> 00:15:57.120
So I'm not writing things with C extensions,


00:15:57.120 --> 00:16:00.180
so pure Python stuff, I just do a flit build


00:16:00.180 --> 00:16:02.420
or whatever, it works fine.


00:16:02.420 --> 00:16:04.140
- Yeah, so that's kind of, I mean,


00:16:04.140 --> 00:16:06.440
that's using the pyproject.toml stuff, right?


00:16:06.440 --> 00:16:08.100
- Yeah. - Yeah, Anthony?


00:16:08.100 --> 00:16:10.060
- I kind of, if I'm starting a project now,


00:16:10.060 --> 00:16:11.820
then I use pyproject.toml


00:16:11.820 --> 00:16:14.220
and the project doesn't have a setup.py.


00:16:14.220 --> 00:16:18.300
There were some reasons why I had to add one in the past,


00:16:18.300 --> 00:16:19.460
but that's mostly fixed now.


00:16:19.460 --> 00:16:23.520
So I'm either using flit or something similar like poetry.


00:16:23.520 --> 00:16:26.880
Yeah, and I've worked on projects years and years ago


00:16:26.880 --> 00:16:29.620
where the setup.py was like,


00:16:29.620 --> 00:16:32.860
just ended up just being a script to run ad hoc commands.


00:16:32.860 --> 00:16:35.340
Like there was a test, setup.py test,


00:16:35.340 --> 00:16:37.780
and then there's like, and lint, and...


00:16:37.780 --> 00:16:38.620
(laughs)


00:16:38.620 --> 00:16:39.940
- Yeah, what does that have to do


00:16:39.940 --> 00:16:41.520
with installing software, right?


00:16:41.520 --> 00:16:42.520
Why is that?


00:16:42.520 --> 00:16:43.520
Yeah, nothing.


00:16:43.520 --> 00:16:48.320
It was just like, yeah, it just ended up being an entry point to do things.


00:16:48.320 --> 00:16:51.240
And one happens to be installed, but there's a bunch of other stuff you might randomly


00:16:51.240 --> 00:16:52.240
do.


00:16:52.240 --> 00:16:55.960
Yeah, and it's fine that it's being deprecated, but it just, you know, CPython still does


00:16:55.960 --> 00:16:56.960
that.


00:16:56.960 --> 00:17:03.600
Like the setup.py and CPython is still used in that way and called and invoked directly


00:17:03.600 --> 00:17:04.600
in the source code.


00:17:04.600 --> 00:17:09.080
This is so, yeah, it's good that it'll be deprecated, but I don't think the tooling


00:17:09.080 --> 00:17:10.440
is quite ready yet.


00:17:10.440 --> 00:17:13.240
He's not really saying to get rid of setup.py,


00:17:13.240 --> 00:17:15.440
just don't use it, don't run it directly.


00:17:15.440 --> 00:17:17.520
- Yeah, find something better.


00:17:17.520 --> 00:17:18.840
- pip should do that.


00:17:18.840 --> 00:17:21.960
Pip should do the discovery for you, the pip 517,


00:17:21.960 --> 00:17:27.360
and run the correct steps for you.


00:17:27.360 --> 00:17:28.200
- Yeah, absolutely.


00:17:28.200 --> 00:17:30.040
So a couple of comments out in the live stream


00:17:30.040 --> 00:17:32.080
is that while recommending build,


00:17:32.080 --> 00:17:35.260
it's nearly impossible to Google to find it.


00:17:35.260 --> 00:17:38.200
And Ray says, "I love and hate the name.


00:17:38.200 --> 00:17:40.560
So authoritative, so un-Googleable,


00:17:40.560 --> 00:17:42.120
and a bit hard to use in conversation,


00:17:42.120 --> 00:17:44.080
but yeah, yeah, for sure.


00:17:44.080 --> 00:17:46.680
So I think if you want to take away from this conversation,


00:17:46.680 --> 00:17:49.640
right at the top, there's a TLDR section that Paul put in.


00:17:49.640 --> 00:17:51.540
Click on the summary, takes you down to a summary,


00:17:51.540 --> 00:17:53.480
and you can go to a table, and it says,


00:17:53.480 --> 00:17:55.340
"I was about to type this.


00:17:55.340 --> 00:17:56.980
"What should I do instead?


00:17:56.980 --> 00:18:00.220
"I was about to type setup.py sdist.


00:18:00.220 --> 00:18:01.240
"What should you type?


00:18:01.240 --> 00:18:04.600
"Python -m build," having build installed.


00:18:04.600 --> 00:18:07.360
Or if I was gonna type setup.py bdist wheel,


00:18:07.360 --> 00:18:11.020
I should type Python-M build --wheel or something like that.


00:18:11.020 --> 00:18:14.360
Setup.py test, oh, maybe pytest or Tox or Knox.


00:18:14.360 --> 00:18:16.640
We covered Knox recently with Preston,


00:18:16.640 --> 00:18:18.720
which was really fun, I believe, episode.


00:18:18.720 --> 00:18:21.440
Setup.py install, no, that's pip install.


00:18:21.440 --> 00:18:25.960
Python setup py develop, no, that's pip install -e.


00:18:25.960 --> 00:18:28.440
And then as well as upload, it goes back to Twine.


00:18:28.440 --> 00:18:32.240
So yeah, anyway, I think this is the most actionable bit here.


00:18:32.240 --> 00:18:33.300
- Yeah, it's good.


00:18:33.300 --> 00:18:34.320
- Yeah, indeed.


00:18:34.320 --> 00:18:37.520
All right, well, Anthony, let's talk about


00:18:37.520 --> 00:18:38.800
keeping an eye on things.


00:18:38.800 --> 00:18:41.480
- Yeah, so I wanted to highlight a project


00:18:41.480 --> 00:18:44.080
which has been in the works for a while,


00:18:44.080 --> 00:18:47.360
but they've just recently finalized the specification.


00:18:47.360 --> 00:18:49.120
So this is called OpenTelemetry.


00:18:49.120 --> 00:18:53.320
It's a part of the Cloud Native Computing Foundation,


00:18:53.320 --> 00:18:58.320
the CNCF, and it's a cross-language event tracing,


00:18:58.320 --> 00:19:03.760
performance tracing, logging, sampling framework


00:19:03.760 --> 00:19:07.640
for applications, in particular for distributed applications.


00:19:07.640 --> 00:19:10.160
So if you've got an application which is spread across


00:19:10.160 --> 00:19:13.560
multiple microservices and you wanna trace things


00:19:13.560 --> 00:19:18.040
or monitor performance or whatever across all of the stack.


00:19:18.040 --> 00:19:19.720
- It's a super hard problem, right?


00:19:19.720 --> 00:19:21.960
Maybe you've got a Docker container running this thing,


00:19:21.960 --> 00:19:24.120
that Docker container calls some other service


00:19:24.120 --> 00:19:25.360
on a different Docker container


00:19:25.360 --> 00:19:27.280
and maybe the logs are even transient.


00:19:27.280 --> 00:19:30.080
What are you gonna do to know if something went wrong?


00:19:30.080 --> 00:19:31.280
- Yeah, exactly.


00:19:31.280 --> 00:19:34.160
And if you've got an application that's spread across,


00:19:34.160 --> 00:19:36.680
well, if it's built into multiple microservices,


00:19:36.680 --> 00:19:39.200
then, and one of those services has a fault,


00:19:39.200 --> 00:19:41.660
it's really hard to know where that fault came from.


00:19:41.660 --> 00:19:44.600
So like, if it just says error, blah, blah, blah, blah,


00:19:44.600 --> 00:19:47.000
you're like, okay, so what triggered that error?


00:19:47.000 --> 00:19:50.800
And which requests from a user at the front end,


00:19:50.800 --> 00:19:53.160
or like, how did the error happen in the first place?


00:19:53.160 --> 00:19:54.280
And how can I fix it?


00:19:54.280 --> 00:19:57.480
And also like identifying, I guess,


00:19:57.480 --> 00:19:59.360
tracking performance across your application


00:19:59.360 --> 00:20:00.320
and looking at that.


00:20:00.320 --> 00:20:04.440
So there's been attempts at doing this in the past,


00:20:04.440 --> 00:20:06.040
open tracing and open census


00:20:06.040 --> 00:20:08.720
were the two kind of projects beforehand.


00:20:08.720 --> 00:20:11.240
So this new project, OpenTelemetry,


00:20:11.240 --> 00:20:14.580
is a merger of open tracing and open census.


00:20:14.580 --> 00:20:18.400
There's engineers from some big companies working on this,


00:20:18.400 --> 00:20:22.360
including Microsoft, Amazon, Splunk, Google, Elastic,


00:20:22.360 --> 00:20:25.120
New Relic, and a whole bunch of others as well,


00:20:25.120 --> 00:20:27.120
including actually full-time engineers


00:20:27.120 --> 00:20:30.120
from some of those companies working on this.


00:20:30.120 --> 00:20:34.080
So yeah, I've been working with an engineer at Microsoft


00:20:34.080 --> 00:20:36.120
who works full-time on this project.


00:20:36.120 --> 00:20:37.880
He works on, actually there's a few people


00:20:37.880 --> 00:20:38.900
who work full-time on this,


00:20:38.900 --> 00:20:40.680
but the person who works full-time


00:20:40.680 --> 00:20:43.060
just on the Python components to this.


00:20:43.060 --> 00:20:46.640
So the Python SDK basically allows you


00:20:46.640 --> 00:20:48.520
to instrument lots of different frameworks.


00:20:48.520 --> 00:20:53.520
So you can basically drop it into Flask or Django or Starlet


00:20:53.520 --> 00:20:56.740
so if you're using FastAPI,


00:20:56.740 --> 00:21:00.140
and you can sort of instantly get capture


00:21:00.140 --> 00:21:02.960
of what requests are going into the application,


00:21:02.960 --> 00:21:04.160
when there's been a crash,


00:21:04.160 --> 00:21:05.960
like where that exception's gone,


00:21:05.960 --> 00:21:08.040
all the logging information.


00:21:08.040 --> 00:21:09.920
You can look at performance records and stuff.


00:21:09.920 --> 00:21:11.360
I've been sharing some examples


00:21:11.360 --> 00:21:14.720
of where I've wrapped it around a FastAPI app,


00:21:14.720 --> 00:21:16.720
and then I can see like performance


00:21:16.720 --> 00:21:18.680
of what's the average request time


00:21:18.680 --> 00:21:21.440
for each of these parts of the application,


00:21:21.440 --> 00:21:24.280
and where is that time spent, even down to like--


00:21:24.280 --> 00:21:26.560
- Can you say like this is the data layer section,


00:21:26.560 --> 00:21:28.680
and this is the business logic


00:21:28.680 --> 00:21:30.560
and here's the simulation or whatever.


00:21:30.560 --> 00:21:32.400
- Exactly, so I can kind of see like,


00:21:32.400 --> 00:21:34.000
almost like a cool stack,


00:21:34.000 --> 00:21:36.320
but across the actual components of the app.


00:21:36.320 --> 00:21:38.840
So here's where it came into FastAPI.


00:21:38.840 --> 00:21:41.160
Here's where it went into database.


00:21:41.160 --> 00:21:42.760
Like here's how long the query took.


00:21:42.760 --> 00:21:45.880
Here's how long the ORM took to remodel it.


00:21:45.880 --> 00:21:48.600
Here's how long Jinja2k to build the template.


00:21:48.600 --> 00:21:51.200
Like, so you can kind of see a breakdown


00:21:51.200 --> 00:21:52.760
of all the different components


00:21:52.760 --> 00:21:54.880
and how things are being pulled together.


00:21:54.880 --> 00:21:57.040
So there's two parts of OpenTelemetry,


00:21:57.040 --> 00:21:59.800
well, there's actually more than two parts.


00:21:59.800 --> 00:22:01.720
I am actually really appreciative of,


00:22:01.720 --> 00:22:04.540
even though there are lots of engineers from big companies,


00:22:04.540 --> 00:22:09.500
this hasn't been over-engineered yet.


00:22:09.500 --> 00:22:10.680
And I'm really hoping it doesn't.


00:22:10.680 --> 00:22:12.800
- Is there a factory-factory method in here?


00:22:12.800 --> 00:22:13.800
- Yeah, exactly.


00:22:13.800 --> 00:22:16.480
Especially 'cause it's like so generic.


00:22:16.480 --> 00:22:19.200
There's a real danger of it being just over-engineered.


00:22:19.200 --> 00:22:21.900
So if you go on the website and go to registry


00:22:21.900 --> 00:22:24.240
and then pick Python on the right-hand side,


00:22:24.240 --> 00:22:26.820
you'll see the kind of different extensions you can get.


00:22:26.820 --> 00:22:29.080
So instrumentation is basically like,


00:22:29.080 --> 00:22:30.760
this is the thing I want to monitor.


00:22:30.760 --> 00:22:35.760
And it could be like ASCII or async Postgres, for example,


00:22:35.760 --> 00:22:41.420
database, Celery, Django, Elasticsearch, Flask,


00:22:41.420 --> 00:22:43.920
like there's a stack of app stacks


00:22:43.920 --> 00:22:45.280
that you can just drop it into


00:22:45.280 --> 00:22:47.480
and it will give you all the tracing information.


00:22:47.480 --> 00:22:49.800
And then there's these things called exporters,


00:22:49.800 --> 00:22:52.080
which is basically like once it's got the information,


00:22:52.080 --> 00:23:01.240
can send it to somewhere like Datadog or New Relic or Azure and AWS, obviously, and Google


00:23:01.240 --> 00:23:02.920
monitoring as well.


00:23:02.920 --> 00:23:08.400
And yeah, actually, I just worked on recently, if you just want to hack around with it, there's


00:23:08.400 --> 00:23:13.780
an exporter for Rich that just basically prints it on the console so you can see everything


00:23:13.780 --> 00:23:14.780
that's happening.


00:23:14.780 --> 00:23:15.780
In color probably, yeah.


00:23:15.780 --> 00:23:16.780
Yeah, yeah, yeah.


00:23:16.780 --> 00:23:18.680
So it's all kind of color coded.


00:23:18.680 --> 00:23:20.040
It's really nice, actually.


00:23:20.040 --> 00:23:21.480
So yeah, I'm really excited about this.


00:23:21.480 --> 00:23:28.320
I've been mostly trying it with FastAPI, as there aren't really many frameworks for


00:23:28.320 --> 00:23:33.640
setting up like decent monitoring and tracing and FastAPI applications.


00:23:33.640 --> 00:23:34.880
And yeah, I think it's really promising.


00:23:34.880 --> 00:23:37.200
So I suggest you check it out.


00:23:37.200 --> 00:23:43.120
And if you see a framework that needs support or something, then, you know, this is all


00:23:43.120 --> 00:23:46.080
open source, and they're all accepting contributions as well.


00:23:46.080 --> 00:23:48.400
And it's fairly straightforward to add support.


00:23:48.400 --> 00:23:53.400
- Yeah, it's got Postgres, MySQL, MongoDB, Pyramid, Redis,


00:23:53.400 --> 00:23:54.960
all sorts of good stuff in here.


00:23:54.960 --> 00:23:57.720
Another thing maybe worth pointing out here


00:23:57.720 --> 00:24:00.160
is because this crosses languages, right?


00:24:00.160 --> 00:24:02.800
There's a Python one, but there's also a .NET one,


00:24:02.800 --> 00:24:04.800
there's a Swift one, and so on,


00:24:04.800 --> 00:24:07.160
which means there might be scenarios


00:24:07.160 --> 00:24:10.440
where I've got like, say, a mobile app written in Swift,


00:24:10.440 --> 00:24:13.120
and then I've got the backend written in Python


00:24:13.120 --> 00:24:14.480
and FastAPI or something,


00:24:14.480 --> 00:24:15.720
and you wanna put those together.


00:24:15.720 --> 00:24:17.480
Like, because it goes across those languages,


00:24:17.480 --> 00:24:19.800
Theoretically, that's a thing that could happen.


00:24:19.800 --> 00:24:22.180
- Absolutely, yeah, and you can pull that all together


00:24:22.180 --> 00:24:25.760
and it would give a request a trace ID.


00:24:25.760 --> 00:24:28.680
So when a request comes into the front end,


00:24:28.680 --> 00:24:32.200
a trace ID could carry across the different stacks as well,


00:24:32.200 --> 00:24:33.200
which is pretty cool.


00:24:33.200 --> 00:24:34.220
- Yeah, yeah, very cool.


00:24:34.220 --> 00:24:35.060
This is neat.


00:24:35.060 --> 00:24:37.400
Awesome, thanks for covering it.


00:24:37.400 --> 00:24:38.800
Now, before we move on, Brian,


00:24:38.800 --> 00:24:40.320
we have a sponsor for this episode.


00:24:40.320 --> 00:24:41.440
That's cool, huh? - Yay, yeah.


00:24:41.440 --> 00:24:44.000
- Yay, thanks to Shortcut.


00:24:44.000 --> 00:24:46.280
Shortcut, formerly known as Clubhouse.


00:24:46.280 --> 00:24:49.040
So they're a really cool project management tool.


00:24:49.040 --> 00:24:50.160
And they asked the question,


00:24:50.160 --> 00:24:52.920
have you ever really been happy with project management?


00:24:52.920 --> 00:24:57.360
You know, how's your JIRA or whatever, right?


00:24:57.360 --> 00:24:58.920
How much are you loving it?


00:24:58.920 --> 00:25:03.000
So they basically say most are either way too simple


00:25:03.000 --> 00:25:05.340
for growing engineering teams to manage everything


00:25:05.340 --> 00:25:07.820
or too complex and just throw in the kitchen sink


00:25:07.820 --> 00:25:09.480
and you don't wanna work with it.


00:25:09.480 --> 00:25:11.600
You gotta constantly tweak it to make it work for you.


00:25:11.600 --> 00:25:13.720
So Shortcut, who used to be known as GoBounce,


00:25:13.720 --> 00:25:14.540
is different.


00:25:14.540 --> 00:25:15.380
They try to be simple.


00:25:15.380 --> 00:25:18.680
project management built specifically for software teams.


00:25:18.680 --> 00:25:19.980
It's fast, intuitive, flexible,


00:25:19.980 --> 00:25:21.980
many other nice positive adjectives.


00:25:21.980 --> 00:25:24.940
So some of the highlights are team-based workflows,


00:25:24.940 --> 00:25:28.240
individual teams can use shortcuts, default workflows,


00:25:28.240 --> 00:25:30.820
or customize them to match the way they work.


00:25:30.820 --> 00:25:33.820
Also organizational-wide goals and roadmaps.


00:25:33.820 --> 00:25:36.900
So these workflows automatically get tied into larger goals


00:25:36.900 --> 00:25:39.860
and feed into like a bigger system outside the team.


00:25:39.860 --> 00:25:43.160
Good source control integration, GitHub, GitLab, Bitbucket,


00:25:43.160 --> 00:25:44.320
all those types of things.


00:25:44.320 --> 00:25:48.860
One thing that I really love is the web app has hotkeys.


00:25:48.860 --> 00:25:51.660
So it's keyboard friendly, just like HR and VS Code,


00:25:51.660 --> 00:25:53.080
whatever, right?


00:25:53.080 --> 00:25:55.080
I don't know why more web apps don't have hotkeys.


00:25:55.080 --> 00:25:57.800
It's not particularly hard, but they do, which is great.


00:25:57.800 --> 00:25:59.680
Iteration planning, so you can set your priorities


00:25:59.680 --> 00:26:01.260
and let Shortcut run the schedule.


00:26:01.260 --> 00:26:02.880
You get nice little burndown charts and so on.


00:26:02.880 --> 00:26:06.480
So check them out at shortcut.com/pythonbytes,


00:26:06.480 --> 00:26:08.180
shortcut.com/pythonbytes,


00:26:08.180 --> 00:26:09.900
because you shouldn't have to project manage


00:26:09.900 --> 00:26:11.060
your project management.


00:26:11.060 --> 00:26:12.060
That does not sound fun.


00:26:12.060 --> 00:26:13.600
So let them do it, it's their job.


00:26:13.600 --> 00:26:18.400
Now, before we move off to the next topic, Robert Robinson on the audience,


00:26:18.400 --> 00:26:20.840
Hey, Robert, this open telemetry sounds interesting.


00:26:20.840 --> 00:26:21.800
Wants to try it out.


00:26:21.800 --> 00:26:23.060
I, I do as well.


00:26:23.060 --> 00:26:26.060
I feel like this is the kind of stuff that you just keep putting


00:26:26.060 --> 00:26:27.780
off integrating into your system.


00:26:27.780 --> 00:26:30.520
And then once you finally, finally do, you're like, Oh, look how awesome this is.


00:26:30.520 --> 00:26:31.500
We can see what's going on.


00:26:31.500 --> 00:26:33.880
And it's actually, did you know this part was crashing?


00:26:33.880 --> 00:26:34.660
No, I didn't know that.


00:26:34.660 --> 00:26:36.860
Nobody looked at the log and it was just eaten.


00:26:36.860 --> 00:26:38.000
Even the exception, right?


00:26:38.000 --> 00:26:38.480
Yeah.


00:26:38.480 --> 00:26:39.040
Tricky, tricky.


00:26:39.040 --> 00:26:40.800
All right, Brian, you got the next one.


00:26:41.620 --> 00:26:45.020
So Python's got a few built-ins.


00:26:45.020 --> 00:26:48.340
Not a ton, but quite a few.


00:26:48.340 --> 00:26:53.780
So there's an article from Tushar Sadwani


00:26:53.780 --> 00:26:57.780
called "Understanding All of Python Through Its Built-ins."


00:26:57.780 --> 00:27:03.420
And he's got a pretty ambitious goal here to understand everything.


00:27:03.420 --> 00:27:07.580
But I actually really enjoyed even the first part of it.


00:27:07.580 --> 00:27:09.020
So I started reading it.


00:27:09.020 --> 00:27:12.340
I've been, especially giving it a shot.


00:27:12.340 --> 00:27:13.940
I got a shout out to him.


00:27:13.940 --> 00:27:16.740
He's been fairly involved on Twitter,


00:27:16.740 --> 00:27:19.580
answering questions and being involved in conversations.


00:27:19.580 --> 00:27:22.020
So that's a good way to get noticed.


00:27:22.020 --> 00:27:26.100
But there's a, starts off talking about scope.


00:27:26.100 --> 00:27:28.660
So what is built-ins are not just things


00:27:28.660 --> 00:27:30.180
that Python has built in,


00:27:30.180 --> 00:27:34.980
but there's also, it has a relevance to the scoping rules.


00:27:34.980 --> 00:27:37.580
And he called it the LEGB scoping rules.


00:27:37.580 --> 00:27:41.380
So it's when Python, if Python sees a symbol,


00:27:41.380 --> 00:27:43.460
first it looks in the local scope,


00:27:43.460 --> 00:27:47.600
then the enclosing scope and the global scope,


00:27:47.600 --> 00:27:49.180
and then the built-in.


00:27:49.180 --> 00:27:50.820
And built-ins really are just anything


00:27:50.820 --> 00:27:52.320
that's in the built-in package.


00:27:52.320 --> 00:27:54.980
So, and that, actually that discussion,


00:27:54.980 --> 00:27:58.100
it's a really pretty good discussion and it helped,


00:27:58.100 --> 00:28:01.340
it's good for especially newbies to understand,


00:28:01.340 --> 00:28:04.020
but even advanced beginners sometimes don't quite understand


00:28:04.020 --> 00:28:05.180
what's going on here.


00:28:05.180 --> 00:28:06.260
- Yeah, Brian and Anthony,


00:28:06.260 --> 00:28:10.780
you both come from C style languages historically, right?


00:28:10.780 --> 00:28:12.240
Or at least you've spent a lot of time there, right?


00:28:12.240 --> 00:28:13.560
Brian, do a lot of C++,


00:28:13.560 --> 00:28:15.480
Anthony, I know you've done some C# and stuff.


00:28:15.480 --> 00:28:19.140
Did the scoping story of Python confuse you


00:28:19.140 --> 00:28:21.060
and kind of leave you a little uncertain in the beginning?


00:28:21.060 --> 00:28:22.340
- Yes, definitely.


00:28:22.340 --> 00:28:27.060
Especially coming from C++ where it's very well-defined


00:28:27.060 --> 00:28:28.300
and different. - If it's in the curly braces,


00:28:28.300 --> 00:28:29.860
it's alive, afterwards it's gone, right?


00:28:29.860 --> 00:28:32.300
Like, wait a minute, that's not the story at all.


00:28:32.300 --> 00:28:35.300
- Right, and also you've got so many nested curly braces


00:28:35.300 --> 00:28:37.900
it could be anywhere and it's not really,


00:28:37.900 --> 00:28:40.980
it seems like, actually we just don't do that too much


00:28:40.980 --> 00:28:43.900
in Python, but Anthony probably know better than me.


00:28:43.900 --> 00:28:48.700
If I've gotten like multiple nested curly braces,


00:28:48.700 --> 00:28:49.860
we don't have curly braces,


00:28:49.860 --> 00:28:52.700
but multiple nested indentations,


00:28:52.700 --> 00:28:56.260
does the scope sort of look in outer and outer and outer


00:28:56.260 --> 00:28:58.100
ones, is that what non-local means?


00:28:59.580 --> 00:29:03.500
as a non-local keyword, which is like a whole other thing.


00:29:03.500 --> 00:29:04.660
(laughing)


00:29:04.660 --> 00:29:05.860
- That's a completely different thing.


00:29:05.860 --> 00:29:06.700
Okay.


00:29:06.700 --> 00:29:07.540
- I think I've ever used it.


00:29:07.540 --> 00:29:10.500
- Closure, variable capture, basically, yeah.


00:29:10.500 --> 00:29:11.340
- Yeah.


00:29:11.340 --> 00:29:12.160
- Yeah.


00:29:12.160 --> 00:29:14.180
- But the difference in global really freaked me out


00:29:14.180 --> 00:29:17.140
because really we were pounded into our heads everywhere


00:29:17.140 --> 00:29:19.300
is to never use global variables.


00:29:19.300 --> 00:29:20.140
- Yeah.


00:29:20.140 --> 00:29:21.020
- But global's different.


00:29:21.020 --> 00:29:23.900
The global namespace is not a global variable.


00:29:23.900 --> 00:29:27.460
It's more like a module level.


00:29:27.460 --> 00:29:30.620
- Yeah, yeah, or like a static variable in a class


00:29:30.620 --> 00:29:33.260
maybe would be what other people might call it.


00:29:33.260 --> 00:29:36.260
- Yeah, it's not a dangerous thing in Python.


00:29:36.260 --> 00:29:37.980
- Yeah, so I didn't mean to derail you that much,


00:29:37.980 --> 00:29:39.340
but I think it's interesting to think about


00:29:39.340 --> 00:29:41.020
the built-in scope, the global scope,


00:29:41.020 --> 00:29:43.220
these different scopes, because it's such a different world


00:29:43.220 --> 00:29:46.140
from the intuition you get coming from all the C languages.


00:29:46.140 --> 00:29:48.660
- Yeah, also just sort of just really enjoyed


00:29:48.660 --> 00:29:50.900
looking at the language through the scope of built-ins.


00:29:50.900 --> 00:29:52.460
It's an interesting take on it.


00:29:52.460 --> 00:29:56.940
I will pull out a few things that he mentions,


00:29:56.940 --> 00:29:59.280
and one is all the constants.


00:29:59.280 --> 00:30:01.480
I guess I'd never counted them before, but there's five.


00:30:01.480 --> 00:30:03.760
There's five constants in Python.


00:30:03.760 --> 00:30:08.000
True, false, none, ellipsis, and not implemented.


00:30:08.000 --> 00:30:09.400
I do like ellipsis.


00:30:09.400 --> 00:30:10.880
We talked about that the other day,


00:30:10.880 --> 00:30:13.440
or I guess one or two weeks ago,


00:30:13.440 --> 00:30:15.880
using dot, dot, dot instead of pass.


00:30:15.880 --> 00:30:17.160
- Are you gonna start doing that?


00:30:17.160 --> 00:30:18.280
- I've already started doing that.


00:30:18.280 --> 00:30:19.240
- Have you? I'm all about it.


00:30:19.240 --> 00:30:20.800
I think I'm up for it as well.


00:30:20.800 --> 00:30:24.440
- I don't, I guess I don't think I've ever used


00:30:24.440 --> 00:30:26.460
not implemented or even looked for it,


00:30:26.460 --> 00:30:28.700
but interesting discussion.


00:30:28.700 --> 00:30:30.700
Also just liked, I liked looking around.


00:30:30.700 --> 00:30:33.820
So here's a section on compile exec and eval.


00:30:33.820 --> 00:30:35.980
It's not an alphabetical listing of everything.


00:30:35.980 --> 00:30:38.380
It's a more grouping them together.


00:30:38.380 --> 00:30:41.460
It's quite a big article,


00:30:41.460 --> 00:30:44.520
but I would suggest people just like skim through the list


00:30:44.520 --> 00:30:46.780
'cause it's got a good table of contents at the top


00:30:46.780 --> 00:30:48.700
and you can just sort of skim through


00:30:48.700 --> 00:30:51.140
what he's talking about and pick a couple


00:30:51.140 --> 00:30:52.080
and go read about it.


00:30:52.080 --> 00:30:53.060
You'll probably learn something.


00:30:53.060 --> 00:30:57.400
So anyway, a good shout out to Tushar for writing this.


00:30:57.400 --> 00:30:58.720
- Yeah, this looks super handy.


00:30:58.720 --> 00:31:01.280
- Yeah, some of the built-ins are super handy.


00:31:01.280 --> 00:31:05.060
I often have a Python REPL open just to do things


00:31:05.060 --> 00:31:08.000
that would otherwise be annoying to do on a calculator,


00:31:08.000 --> 00:31:11.800
like converting hex integers and vice versa.


00:31:11.800 --> 00:31:14.680
There's a hex built-in, which is really helpful actually


00:31:14.680 --> 00:31:15.760
for doing this stuff. - Yeah.


00:31:15.760 --> 00:31:20.760
I use hex a lot because I'm often looking at data elements


00:31:21.380 --> 00:31:24.500
in a packet or something like that


00:31:24.500 --> 00:31:26.420
and trying to convert those.


00:31:26.420 --> 00:31:28.060
- Yeah, very nice, nice one.


00:31:28.060 --> 00:31:29.460
Before we move on, Anthony,


00:31:29.460 --> 00:31:31.740
how do you feel about dot, dot, dot?


00:31:31.740 --> 00:31:33.740
- They should have called it yada, yada, yada.


00:31:33.740 --> 00:31:35.460
(laughing)


00:31:35.460 --> 00:31:36.700
- Yeah. - I think that would be--


00:31:36.700 --> 00:31:38.700
- It's way better than ellipses, come on.


00:31:38.700 --> 00:31:41.460
- Yeah, I use it for type stubs and that's it.


00:31:41.460 --> 00:31:43.020
So-- - Yeah.


00:31:43.020 --> 00:31:44.980
There's times when you use pass, right?


00:31:44.980 --> 00:31:47.500
And I feel like, you know what, dot, dot, dot kind of says,


00:31:47.500 --> 00:31:49.580
I kind of know, I'm not ready for that stuff here yet.


00:31:49.580 --> 00:31:52.020
- I think we should start calling, instead of ellipses,


00:31:52.020 --> 00:31:54.020
we should call it dun dun dun.


00:31:54.020 --> 00:31:56.500
(both laughing)


00:31:56.500 --> 00:31:57.420
- Exactly.


00:31:57.420 --> 00:32:00.020
All right, how about we hand out some awards?


00:32:00.020 --> 00:32:00.860
- Okay.


00:32:00.860 --> 00:32:03.320
- Best open source software of 2021.


00:32:03.320 --> 00:32:05.080
Now, who gets to vote on this?


00:32:05.080 --> 00:32:07.100
Who gets to say, well, InvoWorld in this example.


00:32:07.100 --> 00:32:08.580
So this is according to InvoWorld,


00:32:08.580 --> 00:32:09.620
but there may be other rules,


00:32:09.620 --> 00:32:12.540
but I found this to be pretty interesting, actually.


00:32:12.540 --> 00:32:14.060
I heard about it, learned about it,


00:32:14.060 --> 00:32:16.740
because Sebastian Ramirez from FastAPI said,


00:32:16.740 --> 00:32:19.620
"Yay, we've been voted one of the best open source projects."


00:32:19.620 --> 00:32:23.700
So this is called the InfoWorld Bossy 2021 Awards.


00:32:23.700 --> 00:32:25.940
But what I thought was interesting is going through here,


00:32:25.940 --> 00:32:28.460
there was 30 different projects that won awards.


00:32:28.460 --> 00:32:29.380
I'm like, "Oh, that's interesting.


00:32:29.380 --> 00:32:30.300
"Oh, I didn't know about that.


00:32:30.300 --> 00:32:31.720
"Oh, check this out, yeah."


00:32:31.720 --> 00:32:33.580
So I wanted to touch on a couple.


00:32:33.580 --> 00:32:36.780
So there's some things that may or may not be interesting


00:32:36.780 --> 00:32:40.420
to you like Svelte, which is a JavaScript front end,


00:32:40.420 --> 00:32:42.740
like Vue or React, that's not interesting to me.


00:32:42.740 --> 00:32:45.700
But Minikube, Minikube is pretty interesting.


00:32:45.700 --> 00:32:49.260
Minikube is a way to run like a baby Kubernetes cluster


00:32:49.260 --> 00:32:50.460
right on your computer.


00:32:50.460 --> 00:32:53.100
Just say Minikube start and guess what?


00:32:53.100 --> 00:32:54.860
You've got a cool little cluster running.


00:32:54.860 --> 00:32:57.420
So that might be really helpful for Python people.


00:32:57.420 --> 00:33:00.480
Let's see, Pixie, gonna zoom back a little here.


00:33:00.480 --> 00:33:02.620
Number five is FastAPI.


00:33:02.620 --> 00:33:05.140
Now we're all fans of FastAPI.


00:33:05.140 --> 00:33:07.060
I think it's really awesome that it won


00:33:07.060 --> 00:33:09.380
and worth maybe just giving a quick shout out


00:33:09.380 --> 00:33:11.380
to how they described it as Django and Flask


00:33:11.380 --> 00:33:13.300
have been leading the Python web frameworks for years.


00:33:13.300 --> 00:33:16.560
FastAPI now deserves to be mentioned in the same breath.


00:33:16.560 --> 00:33:17.980
I agree.


00:33:17.980 --> 00:33:19.240
Calls out the main features,


00:33:19.240 --> 00:33:22.600
which are it's truly modern Python web framework


00:33:22.600 --> 00:33:24.480
written from the ground up using type hinting,


00:33:24.480 --> 00:33:26.760
async and high-speed components by default.


00:33:26.760 --> 00:33:27.600
That's true.


00:33:27.600 --> 00:33:29.320
And I also really liked that they pointed out


00:33:29.320 --> 00:33:33.360
that while its name indicates it's primarily for APIs,


00:33:33.360 --> 00:33:36.840
it's also really good at writing more conventional websites


00:33:36.840 --> 00:33:39.020
with like Jinja templates or even Chameleon templates.


00:33:39.020 --> 00:33:40.180
So way to go.


00:33:40.180 --> 00:33:42.360
Anthony, you wanna add it or Brian wanna add anything?


00:33:42.360 --> 00:33:45.120
- Well, I just think that I think you're partly to thank


00:33:45.120 --> 00:33:49.040
for people considering FastAPI for not just APIs


00:33:49.040 --> 00:33:51.800
because you've been beating that drum a little bit as well.


00:33:51.800 --> 00:33:52.640
- Yeah, thanks a bunch.


00:33:52.640 --> 00:33:54.880
I even created some decorators that make it real easy


00:33:54.880 --> 00:33:57.360
to render templates as response values and stuff.


00:33:57.360 --> 00:33:58.200
Yeah, it's fun.


00:33:58.200 --> 00:33:59.040
Anthony?


00:33:59.040 --> 00:34:00.760
- Yeah, I tried out the chameleon thing.


00:34:00.760 --> 00:34:01.760
(laughing)


00:34:01.760 --> 00:34:03.120
The one you wrote, actually.


00:34:03.120 --> 00:34:05.600
Yeah, 'cause I'm working on this FastAPI course


00:34:05.600 --> 00:34:06.720
with you at the moment.


00:34:06.720 --> 00:34:08.040
- Yeah, that's gonna be fun.


00:34:08.040 --> 00:34:10.840
- So yeah, I'm a big fan of FastAPI.


00:34:10.840 --> 00:34:14.480
I think it's brilliant and testament to Sebastian really,


00:34:14.480 --> 00:34:16.920
'cause he really kind of builds on something


00:34:16.920 --> 00:34:18.200
which is quite complicated,


00:34:18.200 --> 00:34:20.200
but he makes it seem so effortless.


00:34:20.200 --> 00:34:23.120
And just working with FastAPI,


00:34:23.120 --> 00:34:25.560
like the documentation is excellent.


00:34:25.560 --> 00:34:28.240
The framework itself is just, is really logical.


00:34:28.240 --> 00:34:30.960
And, you know, it's really easy to use.


00:34:30.960 --> 00:34:33.160
There, in terms of like the,


00:34:33.160 --> 00:34:35.680
I've been keeping an eye on the popularity


00:34:35.680 --> 00:34:36.880
of the different frameworks and stuff


00:34:36.880 --> 00:34:38.180
over the last few years.


00:34:39.280 --> 00:34:43.660
And Django and Flask are kind of neck and neck and have been for a while.


00:34:43.660 --> 00:34:48.220
And FastAPI now is the third most popular according to the metrics that I've seen.


00:34:48.220 --> 00:34:50.780
Yeah, out of nowhere to third most popular.


00:34:50.780 --> 00:34:51.780
Yeah.


00:34:51.780 --> 00:34:52.780
Yeah.


00:34:52.780 --> 00:34:57.820
And I know JetBrains are doing the new, the latest PSF developer survey.


00:34:57.820 --> 00:35:01.260
So yeah, we'll see kind of what happens in this year's number.


00:35:01.260 --> 00:35:05.380
But I'd imagine FastAPI would still be the third most popular.


00:35:05.380 --> 00:35:07.940
So yeah, it's pretty brilliant.


00:35:07.940 --> 00:35:10.540
So yeah, I think it's a good solid pick.


00:35:10.540 --> 00:35:14.920
In terms of writing like full apps with it at the moment,


00:35:14.920 --> 00:35:16.900
like there's still a lot you have to do for templating.


00:35:16.900 --> 00:35:20.180
Like you pretty much have to like build in a whole bunch


00:35:20.180 --> 00:35:23.860
of other templating stuff and picking an ORM at the moment


00:35:23.860 --> 00:35:26.620
isn't easy, but there are some brilliant ones


00:35:26.620 --> 00:35:27.860
to have a play with.


00:35:27.860 --> 00:35:28.700
- Yeah, there's a couple interesting ones.


00:35:28.700 --> 00:35:30.400
- I wanna give a shout out to.


00:35:30.400 --> 00:35:32.900
- Yeah, that give like similar even integrating


00:35:32.900 --> 00:35:35.500
with Pydantic, which is sort of the natural exchange


00:35:35.500 --> 00:35:36.340
of FastAPI.


00:35:36.340 --> 00:35:38.540
So you want to give a shout out to Tortoise you say?


00:35:38.540 --> 00:35:40.060
- Yeah, that's my favorite so far.


00:35:40.060 --> 00:35:42.740
I've used, tried out six different ones so far.


00:35:42.740 --> 00:35:43.580
(laughing)


00:35:43.580 --> 00:35:44.500
- Yeah.


00:35:44.500 --> 00:35:47.380
- And Tortoise I think is my favorite at the moment, so.


00:35:47.380 --> 00:35:48.220
- Right on.


00:35:48.220 --> 00:35:49.780
Well, maybe next year we'll be talking about


00:35:49.780 --> 00:35:52.020
the award for SQL Model,


00:35:52.020 --> 00:35:53.900
which is built on top of Identity


00:35:53.900 --> 00:35:56.140
plus SQLAlchemy by Sebastian as well.


00:35:56.140 --> 00:35:56.980
So who knows?


00:35:56.980 --> 00:35:58.460
A lot of good ones out there.


00:35:58.460 --> 00:36:00.220
It's good to see a lot of the excitement


00:36:00.220 --> 00:36:01.740
and new ideas coming along there.


00:36:01.740 --> 00:36:02.660
All right, what else we got?


00:36:02.660 --> 00:36:04.120
Crystal, don't care.


00:36:04.120 --> 00:36:06.140
Windows Terminal I think is actually pretty interesting.


00:36:06.140 --> 00:36:09.500
Windows has traditionally been not on par


00:36:09.500 --> 00:36:10.940
with its terminal experience.


00:36:10.940 --> 00:36:13.620
And I think, you know, the Windows Terminal,


00:36:13.620 --> 00:36:15.460
PowerShell 7, Oh My Posh,


00:36:15.460 --> 00:36:16.780
all these things come together,


00:36:16.780 --> 00:36:19.940
NerdFonts, to make it quite an amazing place to be actually.


00:36:19.940 --> 00:36:22.020
- Windows Terminal is an open source project?


00:36:22.020 --> 00:36:24.180
- It didn't start out that way, but now it is.


00:36:24.180 --> 00:36:25.020
- Oh, okay.


00:36:25.020 --> 00:36:25.860
- Yeah, yeah.


00:36:25.860 --> 00:36:26.980
So that's a good one.


00:36:26.980 --> 00:36:30.440
OBS Studio, if you're doing video stuff, that's amazing.


00:36:30.440 --> 00:36:32.780
There's a bunch of stuff in here that may apply to people


00:36:32.780 --> 00:36:34.860
that you can all check out that are interesting,


00:36:34.860 --> 00:36:36.540
but I don't want to cover them.


00:36:36.540 --> 00:36:40.340
Dask though, Dask is a big data science one,


00:36:40.340 --> 00:36:44.500
scale computation like pandas operations


00:36:44.500 --> 00:36:47.200
and what not across cores, across clusters,


00:36:47.200 --> 00:36:49.460
across compute that's larger than the RAM you have


00:36:49.460 --> 00:36:50.900
by streaming it off disk


00:36:50.900 --> 00:36:52.340
and all sorts of interesting stuff.


00:36:52.340 --> 00:36:55.100
I have no idea why my browser is jumping up and down.


00:36:55.100 --> 00:36:56.140
We'll have to ignore that.


00:36:56.140 --> 00:36:57.860
I'm not in control of it, I'm sorry.


00:36:57.860 --> 00:36:58.700
- It seems like-


00:36:58.700 --> 00:36:59.540
(laughs)


00:36:59.540 --> 00:37:01.740
- You know what, I'll tell you why this is happening.


00:37:01.740 --> 00:37:04.500
I'm looking up and I see I'm not running my VPN


00:37:04.500 --> 00:37:05.740
which would block ads.


00:37:05.740 --> 00:37:08.540
And so there's some kind of ad off the screen


00:37:08.540 --> 00:37:10.500
that's just running, and if I turn on my VPN,


00:37:10.500 --> 00:37:11.340
we'd be good.


00:37:11.340 --> 00:37:13.740
All right, Blazing SQL is another great one.


00:37:13.740 --> 00:37:15.260
Rapids from NVIDIA.


00:37:15.260 --> 00:37:17.220
And I feel like there's one more I wanna give a shout out to.


00:37:17.220 --> 00:37:18.580
Hugging Face, I don't know anything about that.


00:37:18.580 --> 00:37:19.420
Now that was it.


00:37:19.420 --> 00:37:20.740
So just going through that list,


00:37:20.740 --> 00:37:22.500
I thought it called out a lot of neat projects


00:37:22.500 --> 00:37:24.380
in addition to just FastAPI.


00:37:24.380 --> 00:37:25.340
- Yeah, cool.


00:37:25.340 --> 00:37:27.740
- Yeah, any of those jump out at you guys either


00:37:27.740 --> 00:37:29.660
that I've just screened by?


00:37:29.660 --> 00:37:32.020
- Lots of stacks that I don't use.


00:37:32.020 --> 00:37:33.500
- Yeah, same.


00:37:33.500 --> 00:37:34.980
- Yeah.


00:37:34.980 --> 00:37:36.380
- There was a bunch of ML stuff though,


00:37:36.380 --> 00:37:38.580
which I don't use, but I think would be relevant


00:37:38.580 --> 00:37:40.060
to people who are listening maybe.


00:37:40.060 --> 00:37:41.660
- Well, we're not to extras yet, Michael.


00:37:41.660 --> 00:37:42.940
- No, no, I know, I just closed it


00:37:42.940 --> 00:37:44.660
'cause the jumping was driving me insane.


00:37:44.660 --> 00:37:45.980
- Ah, okay.


00:37:45.980 --> 00:37:49.780
- All right, Anthony, you got the last main one, right?


00:37:49.780 --> 00:37:51.340
- All right, yeah, so I think Lukasz


00:37:51.340 --> 00:37:53.540
is taking up like half of this episode.


00:37:53.540 --> 00:37:55.220
(both laughing)


00:37:55.220 --> 00:37:57.940
So we're gonna get back to Lukasz's blog


00:37:57.940 --> 00:38:01.740
and evolve the discussion that was started last week


00:38:01.740 --> 00:38:03.100
on this-- - Very interesting discussion,


00:38:03.100 --> 00:38:06.620
Yeah, I'm, to put it mildly, I'm excited about this.


00:38:06.620 --> 00:38:11.380
I think if this happens, it's probably going to be the biggest thing to happen in CPython


00:38:11.380 --> 00:38:14.260
in the last five years, in my opinion.


00:38:14.260 --> 00:38:16.060
And this being the Gil removal.


00:38:16.060 --> 00:38:17.940
This be the Gil removal.


00:38:17.940 --> 00:38:18.940
But not the Gilectomy.


00:38:18.940 --> 00:38:19.940
Not the Gilectomy.


00:38:19.940 --> 00:38:20.940
Not exactly.


00:38:20.940 --> 00:38:27.220
Yeah, so, no Gil or let's just go with no Gil.


00:38:27.220 --> 00:38:28.220
Yeah, no Gil.


00:38:28.220 --> 00:38:36.980
So almost seemingly out of nowhere, Sam Gross, who works at Facebook, basically submitted


00:38:36.980 --> 00:38:46.060
to the core developers this research paper and a working branch of a GIL-less Python.


00:38:46.060 --> 00:38:49.780
And just quickly recap, I guess, on what that means.


00:38:49.780 --> 00:38:55.780
This article is pretty heavy in technical detail and the stuff that's being discussed


00:38:55.780 --> 00:38:59.220
and the article, again, is pretty complicated. And I actually didn't understand a lot of it.


00:38:59.220 --> 00:39:05.460
And I've written a book on the Python compiler. So if you read this and it's confusing, don't worry.


00:39:05.460 --> 00:39:13.140
So the gil is basically the global interpreter lock. And it exists as a way of making Python


00:39:13.140 --> 00:39:21.220
thread safe when it comes to keeping reference counts of specific objects. So if you create a


00:39:21.220 --> 00:39:28.260
Python object, for example, there's a counter of how many things are referencing it, because you


00:39:28.260 --> 00:39:33.460
don't want to just destroy an object. And then, like, you're working through a list of objects,


00:39:33.460 --> 00:39:39.380
for example, but then one of the items in the list just disappears, has been deallocated.


00:39:39.380 --> 00:39:46.020
Because everything is a pointer in Python. Like, that pointer just goes nowhere. Or actually,


00:39:46.020 --> 00:39:52.100
There's a magic pointer that Python uses when it deallocates objects, which I know from a very


00:39:52.100 --> 00:39:55.940
painful experience. So you don't want that to happen. And if you've got multiple threads kind


00:39:55.940 --> 00:40:00.180
of working with the same objects all at once, you don't want them to... It's incredibly hard


00:40:00.180 --> 00:40:07.060
to keep track of what's happening. Threading is great because you can have multiple threads working


00:40:07.060 --> 00:40:14.420
on a computer and the operating system can do the scheduling of which threads run on which cores and


00:40:14.420 --> 00:40:16.240
than which CPUs, et cetera.


00:40:16.240 --> 00:40:18.220
So in theory, like it's a way of making


00:40:18.220 --> 00:40:20.720
your Python applications a lot faster


00:40:20.720 --> 00:40:22.900
if you write them to be multi-threaded,


00:40:22.900 --> 00:40:26.180
but Python's basically built in this lock,


00:40:26.180 --> 00:40:30.640
which says, okay, in the evaluation loop in CEVAL,


00:40:30.640 --> 00:40:33.500
don't let anyone else run a instruction


00:40:33.500 --> 00:40:36.220
whilst this thread is running the instruction.


00:40:36.220 --> 00:40:37.060
- Yeah.


00:40:37.060 --> 00:40:38.820
- With the exception of IOVAL tasks.


00:40:38.820 --> 00:40:41.240
- Yeah, and it seems like this is a thing


00:40:41.240 --> 00:40:43.340
to control threading, and really it's just a thing


00:40:43.340 --> 00:40:44.980
to protect memory management,


00:40:44.980 --> 00:40:48.140
but it has this huge blocking effect for threading, right?


00:40:48.140 --> 00:40:49.420
- Yeah, so it's the thing to basically


00:40:49.420 --> 00:40:52.380
make the reference counter thread safe.


00:40:52.380 --> 00:40:55.340
- Without locking, so it's fast.


00:40:55.340 --> 00:40:56.460
- Without locking, yeah.


00:40:56.460 --> 00:40:59.220
So you don't have to wait to add an income.


00:40:59.220 --> 00:41:03.620
So to give you an idea, like if you run the GC by hand,


00:41:03.620 --> 00:41:06.020
you'll just see how many tens of thousands of objects


00:41:06.020 --> 00:41:09.680
are just created like all the time in Python applications.


00:41:10.980 --> 00:41:15.480
So what Sam had put together, I say seemingly out of nowhere,


00:41:15.480 --> 00:41:18.020
but if you go through the article and what he proposed,


00:41:18.020 --> 00:41:20.500
he's actually been working on this almost full time


00:41:20.500 --> 00:41:23.940
for two years, which is astonishing.


00:41:23.940 --> 00:41:27.160
And it's a real feat of engineering, to be honest.


00:41:27.160 --> 00:41:31.680
So kind of what he's proposed is a way of removing the gill


00:41:31.680 --> 00:41:37.540
so that there's essentially like almost two ways


00:41:37.540 --> 00:41:39.720
of keeping references into objects.


00:41:39.720 --> 00:41:44.000
And one of them is specific to the local thread.


00:41:44.000 --> 00:41:47.040
And then there's also another reference count,


00:41:47.040 --> 00:41:48.520
which is for other threads.


00:41:48.520 --> 00:41:50.280
So why is that important?


00:41:50.280 --> 00:41:51.440
Well, let's say for example,


00:41:51.440 --> 00:41:54.800
you've got a Python dictionary with values in it,


00:41:54.800 --> 00:41:57.120
and then you have multiple threads


00:41:57.120 --> 00:41:59.000
all working on the same dictionary.


00:41:59.000 --> 00:42:01.680
Like that's a complicated problem to solve.


00:42:01.680 --> 00:42:05.000
Like how do you make sure that the keys,


00:42:05.000 --> 00:42:06.400
like the references to the keys


00:42:06.400 --> 00:42:08.140
or the values don't disappear?


00:42:09.280 --> 00:42:10.560
And he does actually go into detail


00:42:10.560 --> 00:42:12.600
about how that's been handled.


00:42:12.600 --> 00:42:15.120
And also objects like Python dictionaries


00:42:15.120 --> 00:42:17.520
are not thread safe at the moment either.


00:42:17.520 --> 00:42:21.280
So, you know, if you have two threads


00:42:21.280 --> 00:42:23.200
working on a dictionary, adding values,


00:42:23.200 --> 00:42:24.680
for example, to a dictionary,


00:42:24.680 --> 00:42:26.720
do you have to lock the hash table?


00:42:26.720 --> 00:42:30.120
Anyone who's worked with multi-threading


00:42:30.120 --> 00:42:32.320
in low level languages knows that like


00:42:32.320 --> 00:42:35.000
the complexities of doing it.


00:42:35.000 --> 00:42:37.760
So what he's proposing is that,


00:42:37.760 --> 00:42:43.120
Well, in his prototype, he basically replaced the Python memory allocator with another one


00:42:43.120 --> 00:42:51.400
called Mimalloc, which is a sort of thread-safe memory allocator.


00:42:51.400 --> 00:42:57.440
It's actually a Microsoft project, but I think it could have been any other thread-safe memory


00:42:57.440 --> 00:42:58.440
allocator.


00:42:58.440 --> 00:43:06.960
Writing memory allocators is very involved for them to be performant and efficient.


00:43:06.960 --> 00:43:10.800
And then basically objects get tied to the thread that created them.


00:43:10.800 --> 00:43:15.280
And then there's a non-atomic local reference count with the owner thread.


00:43:15.280 --> 00:43:19.760
And then there's basically a separate mechanism for what would be slower, basically reference


00:43:19.760 --> 00:43:21.700
counting from other threads.


00:43:21.700 --> 00:43:27.240
So single threaded performance is equivalent with this proposal.


00:43:27.240 --> 00:43:32.360
But when you're, there's still a performance impact of multiple threads working on the


00:43:32.360 --> 00:43:34.000
same object, which is to be expected.


00:43:34.000 --> 00:43:36.520
Yeah, there's always a little overhead for that.


00:43:36.520 --> 00:43:39.860
Yeah, but to give you an idea, in his note,


00:43:39.860 --> 00:43:42.380
he implemented a few common problems


00:43:42.380 --> 00:43:45.440
as a multi-threaded implementation.


00:43:45.440 --> 00:43:48.240
And he said, if you give it 20 threads,


00:43:48.240 --> 00:43:51.920
it runs 19.84 times faster


00:43:51.920 --> 00:43:54.240
than it would in just regular CPython.


00:43:54.240 --> 00:43:56.680
So for certain types of problems,


00:43:56.680 --> 00:44:00.800
this can have enormous impact in performance,


00:44:00.800 --> 00:44:03.320
but it is really complicated.


00:44:03.320 --> 00:44:06.140
And that's why I think it's an interesting discussion


00:44:06.140 --> 00:44:10.580
to see, okay, how do we get from this is a cool idea


00:44:10.580 --> 00:44:14.620
to this actually being released and being used by,


00:44:14.620 --> 00:44:17.340
you know, millions of people and I don't know,


00:44:17.340 --> 00:44:20.780
Python's like running on like a satellites in space


00:44:20.780 --> 00:44:23.860
and stuff like, how do we go from a fork


00:44:23.860 --> 00:44:25.740
that someone's been hacking around with


00:44:25.740 --> 00:44:27.880
to something that's like production ready?


00:44:27.880 --> 00:44:30.140
And this is kind of what the article goes into.


00:44:30.140 --> 00:44:33.620
So like, you know, how would this work?


00:44:33.620 --> 00:44:35.220
Would it be a feature flag?


00:44:36.100 --> 00:44:37.820
which version would we target?


00:44:37.820 --> 00:44:42.060
And so at the moment it's targeting 3.9 alpha three,


00:44:42.060 --> 00:44:45.380
actually, so it wasn't even the release of 3.9.


00:44:45.380 --> 00:44:47.540
So he needs to do some work to update that


00:44:47.540 --> 00:44:50.940
to the latest version of 3.9, which is 3.9.7.


00:44:50.940 --> 00:44:52.820
And then I think the target release,


00:44:52.820 --> 00:44:57.820
if the core developers agreed to kind of like explore this,


00:44:57.820 --> 00:45:00.460
if that was 3.11,


00:45:00.460 --> 00:45:04.900
or I don't think anyone wants to touch the Python 4 topic.


00:45:04.900 --> 00:45:08.780
But 11 is like a year away.


00:45:08.780 --> 00:45:12.060
Is that even possible or would it most likely be a couple of years out?


00:45:12.060 --> 00:45:13.620
Yeah, it seems pretty soon to me.


00:45:13.620 --> 00:45:18.320
And I like sub-interpreters, for example, is like an experimental feature.


00:45:18.320 --> 00:45:24.820
I think the issue with this is that it's the volume of changes is so broad that it's quite


00:45:24.820 --> 00:45:27.780
hard to kind of like have it in as a feature toggle.


00:45:27.780 --> 00:45:34.060
So like sub-interpreters was in as like a hidden package that you can use and it's experimental.


00:45:34.060 --> 00:45:36.340
Because this is like changing everything.


00:45:36.340 --> 00:45:42.240
Yeah, well, everything, but like, it's a pretty wide sweeping change.


00:45:42.240 --> 00:45:45.980
And changing the memory allocator is a massive change.


00:45:45.980 --> 00:45:52.180
So question is more, how can we introduce this softly, I think, and have it either as


00:45:52.180 --> 00:45:54.160
a feature flag?


00:45:54.160 --> 00:45:55.160
And what would this break?


00:45:55.160 --> 00:46:00.940
And the main thing is that C extensions haven't really had to worry about thread safety, because


00:46:00.940 --> 00:46:03.060
the GIL kind of handles that for them.


00:46:03.060 --> 00:46:08.180
So C extensions essentially would need to, if they use the mechanisms that are here,


00:46:08.180 --> 00:46:09.180
that's fine.


00:46:09.180 --> 00:46:14.740
But C extensions often have other objects which they haven't used the reference count


00:46:14.740 --> 00:46:16.820
for.


00:46:16.820 --> 00:46:21.620
So they've basically kind of like allocated their own objects and variables and stuff


00:46:21.620 --> 00:46:23.700
like that, that would not be thread safe.


00:46:23.700 --> 00:46:27.700
And they just not have had these kind of collision issues in the past.


00:46:27.700 --> 00:46:31.480
So introducing this would then potentially break some C extensions.


00:46:31.480 --> 00:46:34.800
So how could that be introduced gently?


00:46:34.800 --> 00:46:41.040
I think what was interesting in the article is there's a mention of NumPy and NumPy has


00:46:41.040 --> 00:46:46.480
actually done a lot of its own work already on basically kind of making it thread safe


00:46:46.480 --> 00:46:49.280
and more scalable.


00:46:49.280 --> 00:46:55.680
But one of the tricky ones is PyBind11 is called out in here as being anyone who's using


00:46:55.680 --> 00:47:03.780
PyBind 11 potentially might have to do some refactoring to support this if it was supported.


00:47:03.780 --> 00:47:10.740
And then in closing, Lukasz, who wrote this review of posts, said, you know, the team


00:47:10.740 --> 00:47:14.720
had been really impressed with Sam's work and invited him to join CPython project as


00:47:14.720 --> 00:47:18.880
a core developer, and he's interested in Lukasz is going to mentor him.


00:47:18.880 --> 00:47:20.360
So I think that's brilliant.


00:47:20.360 --> 00:47:21.780
Oh, yeah, that's brilliant.


00:47:21.780 --> 00:47:26.860
to come up with this over like even two years is like a really short amount of time for


00:47:26.860 --> 00:47:32.220
a problem that people have been trying to solve for well over a decade.


00:47:32.220 --> 00:47:33.460
So yeah, very exciting.


00:47:33.460 --> 00:47:34.820
Yeah, this is great.


00:47:34.820 --> 00:47:39.420
I think we have a record number of core developers in the audience right now.


00:47:39.420 --> 00:47:40.420
Yeah.


00:47:40.420 --> 00:47:42.980
So some great comments from Steve Dower.


00:47:42.980 --> 00:47:43.980
Hey, Steve.


00:47:43.980 --> 00:47:46.520
The big thing needed here is a path forward for native extensions.


00:47:46.520 --> 00:47:49.440
they could all need rewriting or else importing them


00:47:49.440 --> 00:47:51.040
could re-enable the GIL.


00:47:51.040 --> 00:47:53.440
That discussion is happening now, it's very early.


00:47:53.440 --> 00:47:56.640
And Henry Schreiner also has similar comments


00:47:56.640 --> 00:47:58.840
that they're considering that, but yeah.


00:47:58.840 --> 00:48:00.680
And Henry also says,


00:48:00.680 --> 00:48:03.920
"We would be up for refactoring PyBind 11 if needed,"


00:48:03.920 --> 00:48:05.680
I believe is also in this.


00:48:05.680 --> 00:48:06.760
But this is exciting.


00:48:06.760 --> 00:48:09.000
There's a lot of stuff coming here.


00:48:09.000 --> 00:48:11.400
I think another thing in addition to the no-GIL


00:48:11.400 --> 00:48:14.120
is I got the sense that Sam had added


00:48:14.120 --> 00:48:18.680
several other optimizations that were independently worth adding to Python?


00:48:18.680 --> 00:48:26.120
- Yeah. One of the things I know that there's a lot of tension around whether or not to do 4.0,


00:48:26.120 --> 00:48:33.000
but if it ends up being that all of the extensions need possibly tweaked, then that might be,


00:48:33.000 --> 00:48:38.840
then it's an API change, and I think a shift to 4.0 might not be terrible.


00:48:38.840 --> 00:48:41.000
- It might be the right number, yeah. Well, we should just go to Python 5.0,


00:48:41.000 --> 00:48:43.920
So no one's worried about four and we'll skip the whole conversation. It'll be fine


00:48:43.920 --> 00:48:45.960
We're doing angular.js


00:48:45.960 --> 00:48:52.060
We'll just like and make a big fuss about going from one to two and then just just over something on like version 10


00:48:52.060 --> 00:48:55.600
Oh, yeah, we'll just just go crazy. Yeah. Yeah, and that's fantastic


00:48:55.600 --> 00:49:00.180
I'm actually having you know been Rossum and Mark Shannon, I believe


00:49:00.180 --> 00:49:05.240
On on Monday on talk Python to talk about like performance in the future and stuff


00:49:05.240 --> 00:49:08.120
And I'm sure we'll talk about this stuff a little bit. Yeah, so it should be a lot of fun


00:49:08.120 --> 00:49:10.920
- This was Guido's suggestion when I asked internally


00:49:10.920 --> 00:49:12.600
if anyone wanted to share anything,


00:49:12.600 --> 00:49:14.440
this is what he sent over, so.


00:49:14.440 --> 00:49:16.360
- Okay, fantastic, yeah, so I'll try to take that up


00:49:16.360 --> 00:49:17.900
with him again, all right.


00:49:17.900 --> 00:49:20.320
Well, Brian, does that bring us to our extras?


00:49:20.320 --> 00:49:22.520
- We are at extras, do you have any extras?


00:49:22.520 --> 00:49:24.760
- Yeah, no, you go first, tell us about PyCon.


00:49:24.760 --> 00:49:28.720
- Well, the call for proposals is open for US PyCon,


00:49:28.720 --> 00:49:30.200
I'm pretty excited about that.


00:49:30.200 --> 00:49:32.160
I already wrote down like six ideas


00:49:32.160 --> 00:49:34.440
of things I might wanna talk about.


00:49:34.440 --> 00:49:37.320
So, and of course, there's no guarantee,


00:49:37.320 --> 00:49:38.800
No matter who you are, there's no guarantee


00:49:38.800 --> 00:49:40.640
that you're gonna get in, but it's fun.


00:49:40.640 --> 00:49:42.840
It's fun to come up with proposals anyway,


00:49:42.840 --> 00:49:45.100
and it's fun, I'm definitely going,


00:49:45.100 --> 00:49:47.360
so I'm pretty excited about that.


00:49:47.360 --> 00:49:49.800
And anybody else gonna propose?


00:49:49.800 --> 00:49:51.440
Anthony, you gonna try to talk there?


00:49:51.440 --> 00:49:53.080
- Yeah, I've been thinking about that


00:49:53.080 --> 00:49:54.960
while I'm gonna put forward.


00:49:54.960 --> 00:49:58.420
I wanna put together a talk on performance anti-patterns.


00:49:58.420 --> 00:50:00.240
- Oh, that'd be fun.


00:50:00.240 --> 00:50:02.760
- And then propose that for next year, yeah.


00:50:02.760 --> 00:50:03.580
- Because of your name?


00:50:03.580 --> 00:50:05.080
Like, anti-patterns?


00:50:05.080 --> 00:50:07.500
(laughing)


00:50:07.500 --> 00:50:08.340
- Also--


00:50:08.340 --> 00:50:09.740
- We're not off to X section yet, Brian.


00:50:09.740 --> 00:50:11.440
(laughing)


00:50:11.440 --> 00:50:14.420
- If anybody doesn't know, I wrote a book


00:50:14.420 --> 00:50:19.420
and then I rewrote it and I'm finished with it actually.


00:50:19.420 --> 00:50:22.180
So it's not out yet, but I'm pretty excited


00:50:22.180 --> 00:50:23.320
that I'm finished.


00:50:23.320 --> 00:50:25.700
All the betas, there's beta seven out,


00:50:25.700 --> 00:50:26.940
has all chapters in it.


00:50:26.940 --> 00:50:30.180
So if you're waiting for it to be done, it's done.


00:50:30.180 --> 00:50:31.340
It's not in print form yet.


00:50:31.340 --> 00:50:33.020
That's gonna happen in January or February.


00:50:33.020 --> 00:50:35.380
So I'm pretty excited to get that done.


00:50:35.380 --> 00:50:37.480
- I'm hoping for my copy at PyCon, Brian.


00:50:37.480 --> 00:50:38.380
(laughing)


00:50:38.380 --> 00:50:40.220
I'm pretty sure I paid for the last one as well.


00:50:40.220 --> 00:50:42.100
I actually, I paid you in cash.


00:50:42.100 --> 00:50:44.300
So I'm gonna give you a copy of my book.


00:50:44.300 --> 00:50:45.900
- I'll bring, I'll bring at least--


00:50:45.900 --> 00:50:48.020
- Maybe we can do a swap. - Swap, yeah.


00:50:48.020 --> 00:50:48.860
That'd be great.


00:50:48.860 --> 00:50:50.300
- Yeah, Anthony, I got your book over there.


00:50:50.300 --> 00:50:52.220
I'm not sure what I can trade it for though.


00:50:52.220 --> 00:50:53.980
(laughing)


00:50:53.980 --> 00:50:54.820
No, that's awesome.


00:50:54.820 --> 00:50:55.660
Congratulations, Brian.


00:50:55.660 --> 00:50:56.500
- Thanks.


00:50:56.500 --> 00:50:58.540
- Anthony, you got any extras you wanna share?


00:50:58.540 --> 00:51:02.100
- Yeah, I'll be shipping fairly soon.


00:51:02.100 --> 00:51:04.980
the JIT compiler that I've been working called Pigeon.


00:51:04.980 --> 00:51:09.380
And I'll be going version one in two weeks.


00:51:09.380 --> 00:51:14.020
So it's a Python 3.10 JIT compiler.


00:51:14.020 --> 00:51:16.620
It's a, you basically just drop it into CPython


00:51:16.620 --> 00:51:19.140
and turn it on and then run your code


00:51:19.140 --> 00:51:22.100
and it just JIT compiles it in the background.


00:51:22.100 --> 00:51:24.020
And in some cases makes it a lot faster


00:51:24.020 --> 00:51:26.820
and in other cases makes no difference.


00:51:26.820 --> 00:51:28.700
(laughs)


00:51:28.700 --> 00:51:31.260
But yeah, some of the benchmarks I've been doing


00:51:31.260 --> 00:51:36.260
like floating point math and integer math


00:51:36.260 --> 00:51:37.500
makes a massive difference.


00:51:37.500 --> 00:51:39.340
So yeah, like 60%.


00:51:39.340 --> 00:51:41.020
- Like the scientific side of thing, right?


00:51:41.020 --> 00:51:43.780
- Yeah, so stuff that you would otherwise think,


00:51:43.780 --> 00:51:46.300
oh, I'm gonna redo this in Cython or something,


00:51:46.300 --> 00:51:50.080
like you don't have to add all the extra stuff.


00:51:50.080 --> 00:51:52.620
You just kind of turn it on and yeah,


00:51:52.620 --> 00:51:55.940
the nBody benchmarks now 60% faster


00:51:55.940 --> 00:51:57.780
than standard CPython.


00:51:57.780 --> 00:51:58.620
- That's great.


00:51:58.620 --> 00:51:59.580
- And yeah, some of the other benchmarks


00:51:59.580 --> 00:52:01.900
like, well, 60% upwards.


00:52:01.900 --> 00:52:02.860
- That's super cool.


00:52:02.860 --> 00:52:06.180
So this work with Sam and the Nogill,


00:52:06.180 --> 00:52:10.020
does that throw a spinner in the works or is it a--


00:52:10.020 --> 00:52:13.100
- It would make my life quite hard for a few weeks


00:52:13.100 --> 00:52:14.340
if it gets merged.


00:52:14.340 --> 00:52:18.980
Yeah, so yeah, that could be interesting.


00:52:18.980 --> 00:52:20.660
And I'm also working on a secret project,


00:52:20.660 --> 00:52:23.420
but I'll share that in a few weeks.


00:52:23.420 --> 00:52:25.460
Yeah, Pigeon does, there's a comment in the chat,


00:52:25.460 --> 00:52:27.100
Pigeon does use Scikit-build,


00:52:28.460 --> 00:52:30.180
which I did want to call that out


00:52:30.180 --> 00:52:32.460
when we were talking about setup.py earlier,


00:52:32.460 --> 00:52:36.740
'cause yeah, so Pidgin is all C++,


00:52:36.740 --> 00:52:41.740
and it uses CMake, which generates Makefiles.


00:52:41.740 --> 00:52:44.300
So yeah, and it uses scikit-build,


00:52:44.300 --> 00:52:48.300
which is a CMake extension, I guess,


00:52:48.300 --> 00:52:51.220
around Python extension modules.


00:52:51.220 --> 00:52:52.420
So that's how it kind of compiles.


00:52:52.420 --> 00:52:53.260
It's really cool.


00:52:53.260 --> 00:52:54.700
Big fan of scikit-build.


00:52:54.700 --> 00:52:57.140
- Yeah, and I recommended using build earlier.


00:52:57.140 --> 00:52:59.440
Henry on our episode together mentioned that


00:52:59.440 --> 00:53:02.240
if you have external non-Python code,


00:53:02.240 --> 00:53:04.160
like C code or Fortran or whatever,


00:53:04.160 --> 00:53:05.720
then instead of build scikit-build


00:53:05.720 --> 00:53:08.760
would be a good option to build the binary bits for that.


00:53:08.760 --> 00:53:11.600
This is the other question I wanted to ask


00:53:11.600 --> 00:53:13.840
and Steve Dower beat me to it.


00:53:13.840 --> 00:53:15.560
He states it as an assertion.


00:53:15.560 --> 00:53:16.380
I was gonna ask you the question.


00:53:16.380 --> 00:53:17.920
I bet once Pigeon ships,


00:53:17.920 --> 00:53:20.360
you'll get people interested in helping add optimization.


00:53:20.360 --> 00:53:22.440
Yeah, so it's one thing to JIT compile.


00:53:22.440 --> 00:53:24.520
It's another to just then straight up run it


00:53:24.520 --> 00:53:26.200
versus go, oh, we can inline this method.


00:53:26.200 --> 00:53:30.080
and I see we can do this and then like, we could actually reuse this field because it's


00:53:30.080 --> 00:53:33.640
not used below and early free all that kind of stuff.


00:53:33.640 --> 00:53:35.040
Where's the optimization of that one?


00:53:35.040 --> 00:53:39.440
Yeah, I've got it like on the documentation page as a optimization section and I've kind


00:53:39.440 --> 00:53:44.880
of written up a lot of the optimizations and how they work, assertions that they make and


00:53:44.880 --> 00:53:47.320
compromises and stuff like that.


00:53:47.320 --> 00:53:50.000
So yeah, if you're interested, there's this info on there.


00:53:50.000 --> 00:53:53.160
But yeah, I'd love love more help on this.


00:53:53.160 --> 00:53:57.360
The learning curve on the project is quite steep, but I'm trying to make it easier.


00:53:57.360 --> 00:54:02.160
I mean, it is a compiler, so like, yeah.


00:54:02.160 --> 00:54:03.680
And I just added ARM support as well.


00:54:03.680 --> 00:54:12.720
So M1, Apple M1, and I tested Linux ARM 64 and in theory, Windows ARM, but I don't have


00:54:12.720 --> 00:54:16.880
access to any machines to test the Windows one.


00:54:16.880 --> 00:54:18.200
And I could only test the Apple one remotely.


00:54:18.200 --> 00:54:20.760
- If you need a periodic test, you can reach out.


00:54:20.760 --> 00:54:23.160
I got a Windows 11 running on ARM.


00:54:23.160 --> 00:54:24.000
- Oh, really?


00:54:24.000 --> 00:54:24.820
Okay. - Yeah.


00:54:24.820 --> 00:54:25.660
- Yeah, maybe I'll take you up on that.


00:54:25.660 --> 00:54:26.680
- I know, very cool.


00:54:26.680 --> 00:54:29.320
All right, I have a couple throughout there as well.


00:54:29.320 --> 00:54:33.040
Python Software Foundation on Twitter, the PSF announces,


00:54:33.040 --> 00:54:33.880
"We're happy to announce


00:54:33.880 --> 00:54:36.400
"the Python Developer Survey 2021.


00:54:36.400 --> 00:54:37.480
"Take part in it."


00:54:37.480 --> 00:54:39.360
This is the one that is then hosted


00:54:39.360 --> 00:54:42.240
and then the data analysis is done by JetBrains,


00:54:42.240 --> 00:54:43.560
but not influenced by JetBrains.


00:54:43.560 --> 00:54:45.360
So I'll link to that in the show notes.


00:54:45.360 --> 00:54:47.060
Be sure to get out there and take that.


00:54:47.060 --> 00:54:49.760
Henry, out in the audience, I have something as well.


00:54:49.760 --> 00:54:52.820
The feature for what you said the other day on Twitter.


00:54:52.820 --> 00:54:56.780
I said, "After Python's bytes mentioned on yesterday's show,


00:54:56.780 --> 00:55:00.900
"I asked for a new feature and it's already in PipX.


00:55:00.900 --> 00:55:04.580
"PipX run pypi command line wheels."


00:55:04.580 --> 00:55:08.300
And it basically, this is added to pypi command line.


00:55:08.300 --> 00:55:10.140
And it'll tell you all sorts of cool stuff


00:55:10.140 --> 00:55:11.860
like the details of the wheel.


00:55:11.860 --> 00:55:13.540
So you could run PipX,


00:55:13.540 --> 00:55:16.980
basically run pypi dash command dash line wheels,


00:55:16.980 --> 00:55:18.820
NumPy, however you run that,


00:55:18.820 --> 00:55:23.820
and it'll tell you like for NumPy on macOS 10 Universal,


00:55:23.820 --> 00:55:25.740
does it have a signature, is there a binary distribution,


00:55:25.740 --> 00:55:27.820
what versions are updated, supported,


00:55:27.820 --> 00:55:29.400
how old is it, how big is it?


00:55:29.400 --> 00:55:32.020
Same thing for Linux architecture,


00:55:32.020 --> 00:55:34.180
ARM on Windows and so on, so on.


00:55:34.180 --> 00:55:37.500
So you get like just this cool graph using Ridge


00:55:37.500 --> 00:55:40.620
of like tables of tables telling you about the status


00:55:40.620 --> 00:55:43.300
of wheels on different platforms straight out of PyPI,


00:55:43.300 --> 00:55:44.380
which I thought was cool.


00:55:44.380 --> 00:55:45.220
- Nice.


00:55:45.220 --> 00:55:46.160
- Yeah, so that's pretty good.


00:55:46.160 --> 00:55:48.240
So Henry, thanks for making that happen.


00:55:48.240 --> 00:55:51.040
Also on the last episode out on the YouTube,


00:55:51.040 --> 00:55:54.080
not live comments, we got a message from,


00:55:54.080 --> 00:55:55.840
I wanna make sure I get the attribution,


00:55:55.840 --> 00:56:00.640
from Bahram and said, we talked about, what is it?


00:56:00.640 --> 00:56:01.480
- T-Bump.


00:56:01.480 --> 00:56:03.640
- T-Bump, that was it, T-Bump for bumping the versions.


00:56:03.640 --> 00:56:05.740
He said, "Oh, that's cool, I use bump to version,"


00:56:05.740 --> 00:56:09.480
which is another option to do some similar types of things.


00:56:09.480 --> 00:56:12.760
Could work with or without source control,


00:56:12.760 --> 00:56:14.960
all kinds of stuff, so fun one to check out.


00:56:14.960 --> 00:56:18.640
And Brian, you sound really good this time.


00:56:18.640 --> 00:56:20.000
Like last time I thought maybe a bee


00:56:20.000 --> 00:56:21.480
had gotten into your microphone.


00:56:21.480 --> 00:56:23.400
What was the story of that?


00:56:23.400 --> 00:56:24.480
- It's a long story.


00:56:24.480 --> 00:56:27.300
Basically I had to throw a mic.


00:56:27.300 --> 00:56:29.960
So I had a bad mic and a bad cable,


00:56:29.960 --> 00:56:30.800
but I have a new XLR cable.


00:56:30.800 --> 00:56:32.920
- It's tough when the two things that are connected together


00:56:32.920 --> 00:56:35.060
are both broken at the same time.


00:56:35.060 --> 00:56:37.040
- The buzzing I think was definitely my cable.


00:56:37.040 --> 00:56:39.040
I think there was a feedback thing going on.


00:56:39.040 --> 00:56:40.320
- You getting an SMS?


00:56:42.000 --> 00:56:47.000
But then I was examining everything in my audio chain


00:56:47.000 --> 00:56:50.820
and I just got rid of the stuff that wasn't working.


00:56:50.820 --> 00:56:51.840
- Yeah, you sound great.


00:56:51.840 --> 00:56:53.300
New mics, even better than before.


00:56:53.300 --> 00:56:55.200
So like a Phoenix, you're back.


00:56:55.200 --> 00:56:57.740
- Nice image too.


00:56:57.740 --> 00:57:00.800
- Yeah, and then have you got your Mac Pro yet?


00:57:00.800 --> 00:57:02.920
- No, I just bought a Mac a couple years ago.


00:57:02.920 --> 00:57:04.400
I'm not gonna buy another one right now.


00:57:04.400 --> 00:57:05.920
- Anthony, are you using one of these


00:57:05.920 --> 00:57:07.520
to test your own version? - I don't know.


00:57:07.520 --> 00:57:09.960
I don't have a spare $4,000.


00:57:09.960 --> 00:57:10.800
- Yeah, it's not as bad as that.


00:57:10.800 --> 00:57:12.320
- For another laptop.


00:57:12.320 --> 00:57:14.840
And also, I was like, I don't really need a laptop


00:57:14.840 --> 00:57:17.520
'cause I never leave the house, so like.


00:57:17.520 --> 00:57:19.000
- Yeah, that is a big problem.


00:57:19.000 --> 00:57:22.620
I mean, I am so loving my Mac mini and my 4K monitor


00:57:22.620 --> 00:57:24.520
that I'm just like, I don't wanna leave, I don't wanna leave.


00:57:24.520 --> 00:57:26.560
All right, well, that's it for the extras.


00:57:26.560 --> 00:57:28.120
I think it's time for a joke.


00:57:28.120 --> 00:57:30.640
Maybe Robert's got the first one out there.


00:57:30.640 --> 00:57:32.600
Can't complain about Brian, it's all about the hair.


00:57:32.600 --> 00:57:34.000
You gotta see the livestream for that one.


00:57:34.000 --> 00:57:35.600
But yeah, I agree with that.


00:57:35.600 --> 00:57:38.080
- Next Halloween, I wanna go as Cousin It,


00:57:38.080 --> 00:57:39.440
so I got a ways to go.


00:57:39.440 --> 00:57:41.680
Anthony, are you up for doing this joke?


00:57:41.680 --> 00:57:45.200
Yeah, yeah, I got it on the, it's got on my screen.


00:57:45.200 --> 00:57:46.200
Oh, you got it on yours?


00:57:46.200 --> 00:57:47.200
Yeah, yeah, I'll do yours.


00:57:47.200 --> 00:57:48.200
All right.


00:57:48.200 --> 00:57:49.200
Okay, okay.


00:57:49.200 --> 00:57:50.200
So I got it.


00:57:50.200 --> 00:57:51.200
It's a picture.


00:57:51.200 --> 00:57:52.520
So I'll have to describe it.


00:57:52.520 --> 00:57:54.620
I couldn't stop laughing at this when I saw it.


00:57:54.620 --> 00:57:58.000
So this is Frodo explaining to Gollum.


00:57:58.000 --> 00:58:02.760
And there's Gollum sitting at a computer looking quite confused, looking at a picture of the


00:58:02.760 --> 00:58:03.760
ring.


00:58:03.760 --> 00:58:06.400
And it says, "Buy now, one ETH."


00:58:06.400 --> 00:58:08.000
And as in Ethereum, right?


00:58:08.000 --> 00:58:09.000
Yeah, yeah.


00:58:09.000 --> 00:58:14.520
And Friar is basically trying to convince Gollum to buy an NFT of the ring instead of


00:58:14.520 --> 00:58:16.160
actually having the ring.


00:58:16.160 --> 00:58:17.160
And underneath...


00:58:17.160 --> 00:58:19.840
My precious, my digital precious.


00:58:19.840 --> 00:58:25.320
So underneath it says, so you can't own the precious physically, but you can pay to have


00:58:25.320 --> 00:58:29.800
your name listed as its owner in an online distributed database.


00:58:29.800 --> 00:58:36.600
It's only what is that like 400 US dollars, 500 Australian, something like that.


00:58:36.600 --> 00:58:38.880
I know that's a lot for a listing.


00:58:38.880 --> 00:58:42.680
I don't own any NFTs yet, nor have I sold any.


00:58:42.680 --> 00:58:44.160
- I don't plan to either.


00:58:44.160 --> 00:58:46.200
- Man, I feel like we're totally missing it.


00:58:46.200 --> 00:58:49.520
We're missing an opportunity to brand


00:58:49.520 --> 00:58:51.540
some of our former episodes.


00:58:51.540 --> 00:58:54.000
Maybe like, I could just take screenshots


00:58:54.000 --> 00:58:56.680
of Brian laughing at different times out of the live stream


00:58:56.680 --> 00:58:59.480
and then like turn it into a stream of NFTs


00:58:59.480 --> 00:59:00.760
that we'll retire upon.


00:59:00.760 --> 00:59:02.560
- Oh yeah, let's do that.


00:59:02.560 --> 00:59:04.680
Yeah.


00:59:04.680 --> 00:59:06.440
- Oh, fantastic.


00:59:06.440 --> 00:59:07.800
All right, oh, that was a good one.


00:59:07.800 --> 00:59:08.660
Thanks, Anthony.


00:59:08.660 --> 00:59:13.460
And thanks for being here on this big episode 256.


00:59:13.460 --> 00:59:15.540
- Yeah, I feel like we've maybe gone slightly over this.


00:59:15.540 --> 00:59:17.540
This is not really a Python bite this week.


00:59:17.540 --> 00:59:19.620
It's more of a Python lunch, I think.


00:59:19.620 --> 00:59:22.140
- Sandwich, eating some chips.


00:59:22.140 --> 00:59:23.980
- Yeah, it's a proper meal, a Python dinner.


00:59:23.980 --> 00:59:24.820
But it was a good one.


00:59:24.820 --> 00:59:25.780
We talked about a lot of stuff.


00:59:25.780 --> 00:59:27.380
And a bunch of great people in the audience


00:59:27.380 --> 00:59:29.820
gave us really good inside information


00:59:29.820 --> 00:59:30.660
on where things are going.


00:59:30.660 --> 00:59:31.500
So thank you for being here.


00:59:31.500 --> 00:59:32.340
- Yeah, so thanks everyone.


00:59:32.340 --> 00:59:33.160
- Hello to everyone in the audience.


00:59:33.160 --> 00:59:34.000
- Yeah, thanks, Brian.


00:59:34.000 --> 00:59:34.820
Yeah, all right.


00:59:34.820 --> 00:59:35.660
Bye, y'all.

