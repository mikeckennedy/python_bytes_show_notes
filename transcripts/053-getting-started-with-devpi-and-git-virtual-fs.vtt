WEBVTT

00:00:00.001 --> 00:00:05.200
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.200 --> 00:00:10.060
This is episode 53, recorded November 21st, 2017.

00:00:10.060 --> 00:00:11.040
I'm Michael Kennedy.

00:00:11.040 --> 00:00:11.980
And I'm Brian Okken.

00:00:11.980 --> 00:00:14.620
And we've got a ton of cool things we picked for you today.

00:00:14.620 --> 00:00:18.720
Well, six plus a few more, but it feels like a lot of good stuff to share with you guys.

00:00:18.720 --> 00:00:20.080
So I'm looking forward to it.

00:00:20.080 --> 00:00:20.560
How about you, Brian?

00:00:20.560 --> 00:00:22.000
I'm really looking forward to it, yeah.

00:00:22.000 --> 00:00:22.520
Yeah, definitely.

00:00:22.520 --> 00:00:25.260
So before we get into that, let's say thank you, Rollbar.

00:00:25.560 --> 00:00:33.120
If you think there are errors lurking in your app and you want to get notified right away, go to pythonbytes.fm/rollbar and check it out.

00:00:33.120 --> 00:00:34.520
Tell you more about that right now.

00:00:34.520 --> 00:00:37.580
I want to know your philosophy on line length.

00:00:37.580 --> 00:00:40.480
Are you a strictly 79 or less sort of person, Brian?

00:00:40.480 --> 00:00:43.560
I'm trying to do the 79 thing, but it's really short.

00:00:43.560 --> 00:00:47.440
So we do like 120 in my work group at work.

00:00:47.440 --> 00:00:51.540
You guys, what, use like 44-inch HD TVs for your monitors or what?

00:00:52.300 --> 00:01:00.020
It's still pretty good to have like, I like a little bit shorter so that you can put a whole bunch of, you can do side-by-side diffs easier and stuff.

00:01:00.020 --> 00:01:00.880
Yeah, for sure.

00:01:00.880 --> 00:01:02.540
But 79 is really tight.

00:01:02.540 --> 00:01:03.320
It is tight.

00:01:03.320 --> 00:01:03.840
How about you?

00:01:03.840 --> 00:01:04.520
What do you use?

00:01:04.520 --> 00:01:07.580
I guess I do stick to 79 pretty much.

00:01:07.580 --> 00:01:11.320
You know, if the editor says, hey, this one's too long, you should reformat it according to Pip-Aid.

00:01:11.320 --> 00:01:12.000
I guess I do.

00:01:12.080 --> 00:01:17.260
But I feel like it has a tendency to put pressure on you to make bad decisions.

00:01:17.260 --> 00:01:24.060
For example, if you have like an expression involving like, say, five variables and like a string, like you're, say, formatting a string.

00:01:24.060 --> 00:01:30.540
And it would encourage you to have those variables super short and nondescriptive so they fit within 79.

00:01:30.540 --> 00:01:33.060
But if they're long and descriptive, that might be 100, right?

00:01:33.060 --> 00:01:35.940
And so I feel like there's this pressure, but I guess I succumb to it anyway.

00:01:35.940 --> 00:01:43.000
Things that I share on GitHub or something, I try to keep it to 79, but I don't know if it's a good idea or not.

00:01:43.000 --> 00:01:49.980
Mostly because I do testing and stuff, people will run a flake 8 over my code and say, hey, dude, how come your code doesn't clean?

00:01:49.980 --> 00:01:50.320
Exactly.

00:01:50.320 --> 00:01:51.000
You failed the build.

00:01:51.000 --> 00:01:51.460
Isn't clean.

00:01:51.460 --> 00:01:51.780
Yeah.

00:01:51.780 --> 00:01:56.140
So there's an article from Jake Vanderplass.

00:01:56.140 --> 00:02:01.080
He's the astronomer guy that did PyCon talk, did the keynote.

00:02:01.080 --> 00:02:03.440
Yeah, he did a keynote there, and I think he also did another talk.

00:02:03.440 --> 00:02:04.600
But yeah, it was great.

00:02:04.700 --> 00:02:08.060
He's up at University of Washington doing all sorts of cool astronomy stuff.

00:02:08.060 --> 00:02:09.560
So what do you have to say about line lengths?

00:02:09.560 --> 00:02:22.680
Because of the switch of Twitter between 140 and 280 that they've done, he was intrigued by looking at the statistics and did an exploration of line lengths in Python packages.

00:02:23.340 --> 00:02:35.740
And he did it like a Jupyter Notebook article so that you can kind of follow through all of his stuff and mostly looking at NumPy, SciPy, Pandas, CyCentLearn, Matplotlib, and AstroPy.

00:02:35.740 --> 00:02:40.740
So I didn't know about AstroPy, but that makes sense because I'm not an astronomer.

00:02:40.740 --> 00:02:41.240
Yeah.

00:02:41.640 --> 00:02:46.240
How often do you analyze telescopic images with machine learning?

00:02:46.240 --> 00:02:47.620
So far, zero times.

00:02:47.620 --> 00:02:49.420
It sounds fun, though, doesn't it?

00:02:49.420 --> 00:02:49.700
Yeah.

00:02:49.700 --> 00:02:53.660
But it's kind of a neat look at basically, I wouldn't know how to do this right off the bat.

00:02:53.780 --> 00:03:04.940
But it's pretty simple to write a little bit of code to import a bunch of modules and check out the line lengths and examine that and graph it and plot it and clean it up.

00:03:04.940 --> 00:03:06.200
It's a pretty cool article.

00:03:06.200 --> 00:03:13.080
And then also just sort of looking at it, it looks like most of them, they follow a distribution, a...

00:03:13.080 --> 00:03:13.740
Normal distribution?

00:03:14.020 --> 00:03:16.280
It's not exactly normal, but it's...

00:03:16.280 --> 00:03:17.320
An abnormal distribution?

00:03:17.320 --> 00:03:18.100
An abnormal.

00:03:18.100 --> 00:03:20.100
A log normal distribution.

00:03:20.100 --> 00:03:20.900
That's it.

00:03:20.900 --> 00:03:21.360
Oh, wow.

00:03:21.360 --> 00:03:21.520
Okay.

00:03:21.520 --> 00:03:26.780
That's a little bit more statistics than I understand, but it's sort of normal, I guess.

00:03:26.780 --> 00:03:41.140
But it follows a log normal distribution, and except for there's an artificial bump near the right side, the 80 character side, because many of these packages are trying to hit 80 or less.

00:03:41.320 --> 00:03:48.200
But there's an argument there for you don't really need it, because code naturally fits anyway.

00:03:48.200 --> 00:03:50.100
It's a cool look at it.

00:03:50.100 --> 00:03:58.720
I was thinking about using the code within this to take a look at our code at work to see where our line lengths are at work.

00:03:58.720 --> 00:03:59.080
Yeah.

00:03:59.080 --> 00:04:05.340
That'd be an interesting analysis to run some PEP 8-style metrics across your organization.

00:04:05.340 --> 00:04:05.840
Yeah.

00:04:05.840 --> 00:04:06.780
You know what I think people should do?

00:04:06.860 --> 00:04:12.080
Someone, some enterprising listener out there should build, like, a little package we can all drop in and do cool stuff like that with.

00:04:12.080 --> 00:04:12.260
Yeah.

00:04:12.260 --> 00:04:21.000
And at the end of the article, he does ask, he's curious about what different popular packages, where they fit into the line length distribution match.

00:04:21.000 --> 00:04:22.040
So that'd be neat.

00:04:22.040 --> 00:04:22.340
Right.

00:04:22.340 --> 00:04:27.760
In other languages, like, how does this compare to, say, JavaScript versus C++ versus Python?

00:04:28.000 --> 00:04:28.500
Things like that.

00:04:28.500 --> 00:04:32.620
Also interesting to know, but I don't have those answers, so they're open questions for now.

00:04:32.620 --> 00:04:34.460
So it's a good day.

00:04:34.460 --> 00:04:37.060
Yet another good day for modern Python.

00:04:37.060 --> 00:04:40.860
And, you know, sort of the sun continues to set on legacy Python.

00:04:40.860 --> 00:04:45.320
This time around, very, you know, you mentioned this package just previously, NumPy.

00:04:45.440 --> 00:04:47.440
Yeah, there's some interesting news with NumPy.

00:04:47.440 --> 00:04:47.780
Yeah.

00:04:47.780 --> 00:04:50.600
So NumPy is dropping support for legacy Python.

00:04:50.600 --> 00:04:58.600
And they say, you know, we know that the Python core developers are dropping support for Python 2 in 2020.

00:04:58.600 --> 00:05:01.120
It's still an open question on the day.

00:05:01.300 --> 00:05:07.840
I like that guy who voted for the keynote of PyCon 2020 as the official end date.

00:05:07.840 --> 00:05:09.360
But who knows what day it is?

00:05:09.360 --> 00:05:10.920
It hasn't been officially announced.

00:05:10.920 --> 00:05:18.620
But they say, basically, this requirement to continue supporting Python 2 makes it harder and harder to advance NumPy.

00:05:18.620 --> 00:05:20.100
And so they're going to drop it.

00:05:20.100 --> 00:05:20.880
I think that's great.

00:05:20.880 --> 00:05:21.940
I can see that.

00:05:21.940 --> 00:05:23.060
It's such an important library.

00:05:23.060 --> 00:05:26.280
And, you know, data science is definitely moving towards Python 3.

00:05:26.280 --> 00:05:30.660
And so their plans are December 31st, 2018.

00:05:30.660 --> 00:05:35.340
Up until then, they're going to support Python 2 and Python 3 100%.

00:05:35.340 --> 00:05:36.780
And that's not very far away.

00:05:36.780 --> 00:05:38.220
What is that, like 41 days?

00:05:38.220 --> 00:05:39.920
No, that's 41 days in a year.

00:05:39.920 --> 00:05:42.600
So a little bit of time on that one.

00:05:42.600 --> 00:05:49.380
And then January 2019, all new features will be Python 3 only.

00:05:49.380 --> 00:05:54.220
And then the year after that, I guess, when Python 2 support goes out, it probably goes out of here as well.

00:05:54.220 --> 00:05:56.180
It isn't just a spiteful thing.

00:05:56.180 --> 00:06:04.280
You've got real reasons to do it because the increased burden of trying to be Python 2 compatible is unreasonable.

00:06:04.280 --> 00:06:09.160
Yeah, it definitely means it's like there's features that are not in NumPy because it works on Python 2.

00:06:09.160 --> 00:06:10.240
Right?

00:06:10.240 --> 00:06:15.640
So it's time to say thank you, but goodbye to Python 2, they say, which is, I think, great.

00:06:15.640 --> 00:06:21.100
Speaking of data science, one thing I've tried to learn a lot but haven't done a great job of is pandas.

00:06:21.280 --> 00:06:28.280
Actually, pandas and kind of the whole data science tool chain, it's something I'm curious about, but I'm not sure how to go about it.

00:06:28.280 --> 00:06:35.540
So I really liked this article from Ted Petrou about how to learn pandas and how to go about it.

00:06:35.540 --> 00:06:39.760
His opinion, of course, but it seems like a really pretty reasonable thing.

00:06:39.760 --> 00:06:48.540
He was recommending some of the learning, reading the documentation and reading about pandas and how it works.

00:06:48.540 --> 00:06:52.960
But then also kind of jumping back and forth and using it for small projects.

00:06:52.960 --> 00:06:56.700
And I guess with any tool, that makes sense.

00:06:57.320 --> 00:07:06.160
But there is some, he gives a little bit more, I guess, more details of how to do that so that you can jump back and forth and know what to learn first.

00:07:06.160 --> 00:07:14.360
Yeah, I think one of the challenges that I have learning pandas, like I can sort of do a few things with it, but not a lot, is I don't really have a project to use it on.

00:07:14.360 --> 00:07:17.280
Like I just kind of poke at it and go, oh, okay, it does this cool stuff.

00:07:17.280 --> 00:07:22.900
But, you know, like I just haven't done like data science-y things or financial analysis things.

00:07:22.900 --> 00:07:31.200
So he talks about things like here's some Jupyter Notebooks, here's some Kaggle kernels and data sets in the form of, these are data sets in the form of Jupyter Notebooks.

00:07:31.200 --> 00:07:36.200
So some concrete ways to play with it, not just, you know, fire it up and poke at the API.

00:07:36.200 --> 00:07:42.140
Yeah, or maybe go back to that Jake article and examine your line lengths.

00:07:42.140 --> 00:07:42.800
Exactly.

00:07:42.800 --> 00:07:43.880
There's an example.

00:07:44.040 --> 00:07:59.400
And then one of the things I thought was a nice ending is when you think you have it fairly well, go a little bit further and then start answering some questions on Stack Overflow and kind of measure yourself against the other things that people are running into problems with.

00:07:59.400 --> 00:08:00.400
I think that's a cool idea.

00:08:00.400 --> 00:08:01.160
That is a cool idea.

00:08:01.160 --> 00:08:03.580
And the people on Stack Overflow will let you know if you're wrong.

00:08:03.580 --> 00:08:05.740
Yeah, definitely.

00:08:05.740 --> 00:08:12.760
It's one of the nice and not nice things about the internet is the best way to find out whether you're right about something is to post the wrong answer.

00:08:13.800 --> 00:08:16.260
Yeah, people don't really hold back on you too often, do they?

00:08:16.260 --> 00:08:18.040
Yeah, no, no, you get that right away.

00:08:18.040 --> 00:08:23.240
Yeah, if you have a thick skin or if you're willing to grow a thick skin, then that's actually a great way to do it.

00:08:23.240 --> 00:08:23.420
Yeah.

00:08:23.420 --> 00:08:25.120
Reddit would probably also work too.

00:08:25.120 --> 00:08:33.780
Also, I'm sure the data science people are similar, but the Python community as a whole is fairly gentle with people.

00:08:33.780 --> 00:08:42.540
They'll tell you you're wrong, but they'll be nice about it and probably use more words than you've written to explain something to explain why you're wrong about it.

00:08:42.540 --> 00:08:47.480
Yeah, maybe they'll have a good explanation of your misunderstanding and you can connect some more dots, right?

00:08:47.480 --> 00:08:48.880
I depend on that a lot.

00:08:48.880 --> 00:08:50.020
Nice.

00:08:50.700 --> 00:08:56.520
All right, before we get to the next one, which is some more social coding stuff, I just want to say thank you to Rollbar.

00:08:56.520 --> 00:09:02.680
If you have a web application and it's running on the internet, it's probably crashing at some point.

00:09:02.680 --> 00:09:04.760
And it would be great to know about that.

00:09:04.760 --> 00:09:06.680
Like, how often do you go back and read logs?

00:09:06.680 --> 00:09:09.200
Like, do you go and read logs at your work very often, Brian?

00:09:09.340 --> 00:09:10.660
Actually, more than I want to.

00:09:10.660 --> 00:09:11.240
Yes.

00:09:11.240 --> 00:09:14.520
I'm in a manager role, so I get to tell other people to do it.

00:09:14.520 --> 00:09:15.520
Here's a problem in the log.

00:09:15.520 --> 00:09:16.100
Go fix that.

00:09:16.100 --> 00:09:16.340
Yeah.

00:09:16.340 --> 00:09:19.140
But you don't want to have to depend on reading that, right?

00:09:19.140 --> 00:09:21.760
If you could avoid it and just get the notifications right away, that'd be awesome.

00:09:21.760 --> 00:09:29.060
So Rollbar actually, I normally talk about it in the context of Python, and that's totally true, but it actually supports 26 languages and frameworks.

00:09:29.060 --> 00:09:32.660
So Python, obviously, Flash, Django, Pyramid, et cetera.

00:09:32.660 --> 00:09:37.860
But Node.net, it even has a Flash plugin in client-side JavaScript.

00:09:37.860 --> 00:09:39.040
So totally cool.

00:09:39.040 --> 00:09:40.320
Like, whatever you're using, you can use Rollbar.

00:09:40.320 --> 00:09:40.780
It's awesome.

00:09:40.780 --> 00:09:42.540
And they have this thing called people tracking.

00:09:42.540 --> 00:09:46.460
So, for example, on, like, my training site, people are logged in.

00:09:46.460 --> 00:09:53.020
And if there's a crash, I can emit a little thing that will tell Rollbar, this is the user that had this error.

00:09:53.020 --> 00:09:59.260
So not only do I know what the error was, I can actually go back and send that person a message, say, I saw you run into a crash, and here's how I fixed it.

00:09:59.260 --> 00:10:01.000
Like, whoa, I didn't even tell you what happened.

00:10:01.000 --> 00:10:02.320
That's kind of creepy but awesome.

00:10:02.320 --> 00:10:10.380
So anyway, if you want to be creepy and awesome, check out Pyramid.fm slash Rollbar and solve the problem before your users even tell you about them.

00:10:10.380 --> 00:10:10.840
All right.

00:10:10.840 --> 00:10:17.800
So one of the things that came out recently was an announcement from Microsoft and GitHub.

00:10:17.800 --> 00:10:21.560
I'm not sure what the order of, but this sort of came out.

00:10:21.560 --> 00:10:24.400
But it started, I think it started at Microsoft.

00:10:24.400 --> 00:10:26.460
And they want to use Git.

00:10:26.460 --> 00:10:27.420
Okay.

00:10:27.420 --> 00:10:29.820
So everybody wants to use Git because Git is awesome.

00:10:29.820 --> 00:10:34.480
But the problem is they actually have some pretty large projects.

00:10:34.660 --> 00:10:40.380
And it turns out they tried to use Git, and it was basically unusable for some of their projects at Microsoft.

00:10:40.380 --> 00:10:45.680
So, Brian, you're probably thinking Git was built for Linux, and Linux is a huge project, right?

00:10:45.680 --> 00:10:46.040
Yeah.

00:10:46.040 --> 00:10:46.260
Yeah.

00:10:46.260 --> 00:10:48.180
So what's up with these Microsoft people?

00:10:48.180 --> 00:10:49.120
They must be doing it wrong.

00:10:49.120 --> 00:10:51.560
And I kind of actually thought that when I read this first as well.

00:10:51.560 --> 00:11:00.780
But it turns out if you look at the Linux kernel, it's like 640 megs of data in the source code repository in Git.

00:11:00.780 --> 00:11:02.200
That's big, right?

00:11:02.200 --> 00:11:02.800
That's quite big.

00:11:03.000 --> 00:11:10.880
But it turns out that if you look at the Visual Studio tools, those are 3 gigabytes, which is five times bigger than Linux.

00:11:10.880 --> 00:11:12.700
And they're trying to use it for that.

00:11:12.700 --> 00:11:14.240
And that was kind of a little sketchy.

00:11:14.240 --> 00:11:16.160
But then they wanted to use it for Windows.

00:11:16.160 --> 00:11:24.200
And apparently the repository for Windows is 270 gigabytes or 421 times larger than Linux.

00:11:24.200 --> 00:11:24.540
Wow.

00:11:24.540 --> 00:11:25.480
No wonder it's slower.

00:11:25.480 --> 00:11:26.240
That's a little bit bigger.

00:11:26.240 --> 00:11:30.700
And there's 4,000 people committing to it all day as their job, right?

00:11:30.700 --> 00:11:32.760
So it's got a lot of contention as well.

00:11:32.760 --> 00:11:40.780
And so what they've done in the announcement is Microsoft and GitHub team up to create a Git virtual file system.

00:11:41.180 --> 00:11:47.840
And the GitHub part is mostly to make this work on other platforms, macOS and Linux and things like that.

00:11:47.840 --> 00:11:57.920
So what they did is they said, look, the problem is we literally have like, I don't know how many million, thousands, maybe millions of files when we do a checkout.

00:11:58.660 --> 00:12:12.140
So when did it like a regular Git checkout, it would take 12 hours to clone the repository, three hours to do just a straight checkout of a branch, eight minutes to ask Git status, and 30 minutes to commit like one file.

00:12:12.240 --> 00:12:13.420
So it was pretty broken.

00:12:13.420 --> 00:12:17.800
And they said the reason it's broken primarily is there's like all these files.

00:12:17.800 --> 00:12:21.000
And generally, you're only working with like a little sub part of them.

00:12:21.000 --> 00:12:25.900
So what they did is they created a virtual file system that understands Git repositories.

00:12:25.900 --> 00:12:29.300
And it only checks out like a metadata list, like a directory listing.

00:12:29.300 --> 00:12:29.960
Wow, cool.

00:12:29.960 --> 00:12:35.760
And then if you interact with it, it basically will create those files by getting them from the server on demand.

00:12:35.760 --> 00:12:37.920
And it doesn't have to be like some plugin.

00:12:37.920 --> 00:12:39.580
It's like at the file system level.

00:12:39.580 --> 00:12:49.800
So if I open up like command prompt or I open up some editor, I just type like GCC and it has to touch like 10 files, like that will automatically get them from Git if they weren't there.

00:12:49.800 --> 00:12:50.700
Isn't that crazy?

00:12:50.820 --> 00:12:54.420
It sounds a lot like ClearCase before ClearCase started to suck.

00:12:54.420 --> 00:12:55.440
Yeah, exactly.

00:12:55.440 --> 00:12:59.080
So they built this for Windows and they got really good success.

00:12:59.080 --> 00:13:01.720
They said instead of 12 hours to clone it, it takes 90 seconds.

00:13:01.720 --> 00:13:05.040
Instead of eight minutes to do a Git status, it takes three seconds.

00:13:05.040 --> 00:13:07.880
Instead of 30 minutes to do Git commit, it takes eight seconds.

00:13:07.880 --> 00:13:14.420
And so they've actually been pushing about half of these changes back upstream into Git.

00:13:14.420 --> 00:13:19.140
And they've been working with the Git developers to make this a general thing, not a Microsoft thing,

00:13:19.460 --> 00:13:20.840
which I think that's pretty noble.

00:13:20.840 --> 00:13:24.480
That's definitely like a new Microsoft, not the old Steve Ballmer Microsoft.

00:13:24.480 --> 00:13:27.960
Is it just for GitHub or can we use it with other Git?

00:13:27.960 --> 00:13:29.840
This is just purely for Git.

00:13:29.840 --> 00:13:33.560
So they're pushing this back to the Git developers, not for GitHub.

00:13:34.100 --> 00:13:43.480
But where GitHub comes into this is GitHub, maybe they have this problem for projects hosted on GitHub, but people are already using those projects on GitHub.

00:13:43.480 --> 00:13:44.600
So it's probably okay.

00:13:44.600 --> 00:13:51.200
But they're trying to sell enterprise GitHub, which is like a box you put in your company to run those things.

00:13:51.200 --> 00:13:54.660
And these enterprise projects can be like huge, like this Windows problem.

00:13:55.020 --> 00:14:02.780
And so GitHub is trying to basically expand this to Linux and macOS so that they can make that part of their enterprise story.

00:14:02.780 --> 00:14:03.260
That'd be cool.

00:14:03.260 --> 00:14:07.280
I'd like to have it be part of the GitLab experience as well.

00:14:07.280 --> 00:14:07.760
That'd be good.

00:14:07.760 --> 00:14:08.340
Yeah, absolutely.

00:14:08.340 --> 00:14:09.260
Yeah.

00:14:09.260 --> 00:14:11.160
So hopefully this makes it back into Git proper.

00:14:11.540 --> 00:14:15.320
And then the OS support can come from Microsoft and GitHub.

00:14:15.320 --> 00:14:15.820
That'd be awesome.

00:14:15.820 --> 00:14:17.240
Yeah, this is pretty cool, actually.

00:14:17.240 --> 00:14:18.180
I'll keep an eye on this.

00:14:18.180 --> 00:14:18.620
Yeah, yeah.

00:14:18.620 --> 00:14:19.260
We'll see where it goes.

00:14:19.260 --> 00:14:22.680
But they've already got demos and stuff working for Microsoft Windows.

00:14:22.680 --> 00:14:26.720
And there's actually a 10-minute little video, like as they work through this stuff, you can check it out.

00:14:26.720 --> 00:14:27.320
It's really short.

00:14:27.320 --> 00:14:28.020
I'd link that as well.

00:14:28.020 --> 00:14:32.520
Speaking of downloading stuff from servers and getting your libraries all put together.

00:14:32.520 --> 00:14:34.220
I don't know if I'm just dense or what.

00:14:34.220 --> 00:14:57.900
But the multiple times I've tried to set up a DevPy server for caching PyPI stuff locally, and mostly I need to do this partly because of setting up, you know, if you want to do a laptop setup for while you're on the plane or something, but also behind a firewall so I can have my build server not have to go outside the firewall and stuff like that.

00:14:57.900 --> 00:14:59.360
I'd like to have a local one.

00:14:59.360 --> 00:15:01.100
And I ran across this article.

00:15:01.100 --> 00:15:02.600
I haven't actually gone through it.

00:15:02.600 --> 00:15:03.720
I was going to do that this morning.

00:15:03.860 --> 00:15:09.500
But it looks pretty good from Stefan Scherfke that's getting started with DevPy.

00:15:09.500 --> 00:15:10.920
And it walks through.

00:15:10.920 --> 00:15:13.380
Basically, he had the same thing.

00:15:13.380 --> 00:15:16.380
He needed to set it up a local server again.

00:15:16.380 --> 00:15:18.180
Couldn't remember how to do it.

00:15:18.180 --> 00:15:22.160
The documentation is okay, but still has some issues.

00:15:22.160 --> 00:15:33.500
And so he just sort of walks through the whole thing and shows you how to do it in at least one use case, which is pretty close to what I think most people need, which is mostly mirroring.

00:15:33.500 --> 00:15:37.140
Entering the packages from PyPI that your company actually uses.

00:15:37.140 --> 00:15:39.220
Not everything, just the stuff you're using.

00:15:39.220 --> 00:15:43.460
And then also being able to store your own local things there.

00:15:43.460 --> 00:15:44.100
Yeah, that's a great combination.

00:15:44.100 --> 00:15:44.660
Yeah, that's a great combination.

00:15:44.660 --> 00:15:47.360
I think the caching bit is really nice.

00:15:47.360 --> 00:15:53.080
Like you can just point at this thing and it'll just pass through and get the ones from the full PyPI, right?

00:15:53.180 --> 00:15:55.940
And then you can tell it to refresh occasionally and stuff.

00:15:55.940 --> 00:16:02.580
And then you can also just push up your own local ones so that you can share your own stuff around.

00:16:02.580 --> 00:16:06.760
I think that's a really great thing that probably not too many organizations are doing.

00:16:06.900 --> 00:16:14.100
If you have different teams working on different packages, like you can actually publish it to like your company through these things, which is pretty awesome.

00:16:14.100 --> 00:16:16.660
We also have a PyPI whitelist.

00:16:17.220 --> 00:16:24.120
So that might be really positive given some of the recent security scares we've had there, right?

00:16:24.120 --> 00:16:25.940
Depending on how paranoid you are.

00:16:25.940 --> 00:16:28.140
Part of the article is talking about user management.

00:16:28.140 --> 00:16:34.960
For me, I'd probably set up things for all my local dev team plus the build to be able to get things.

00:16:35.080 --> 00:16:42.560
But he was having it locked down to just the build server being able to do it, which is an interesting idea as well.

00:16:42.560 --> 00:16:42.840
Nice.

00:16:42.840 --> 00:17:00.840
So the last thing I want to cover this week is what I think a lot of people who are developers or work for a company building a product that are kind of new to it, sort of a technical company, maybe miss, which is the whole marketing side of software.

00:17:01.320 --> 00:17:01.760
Right?

00:17:01.760 --> 00:17:10.660
Like the hardest thing about making something successful, if it's a web app or it's a regular app or it's a SaaS thing or whatever, is not building it.

00:17:10.660 --> 00:17:12.880
Building it may be challenging, but that is not the hardest thing.

00:17:12.880 --> 00:17:17.700
The hardest thing is getting people to notice it in a busy world and getting the word out.

00:17:17.700 --> 00:17:21.140
The whole marketing side of stuff that most of us developers are not super good at.

00:17:21.140 --> 00:17:25.580
So there's this GitHub repository called Marketing for Engineers.

00:17:25.580 --> 00:17:30.320
And it's a curated collection of marketing articles and tools to grow your product.

00:17:30.320 --> 00:17:30.900
That's nice.

00:17:31.040 --> 00:17:31.160
Yeah.

00:17:31.160 --> 00:17:31.520
Isn't that cool?

00:17:31.520 --> 00:17:38.000
So these guys, they created some kind of iOS app and they're like, it took us almost two years to learn how to market our project.

00:17:38.000 --> 00:17:38.720
It was painful.

00:17:38.720 --> 00:17:40.660
So we're trying to help that.

00:17:40.660 --> 00:17:54.500
So they said, look, we're going to come up with a bunch of resources that help you solve practical marketing tasks, such as finding beta users, growing your first user base, advertising your product without a budget, all those different things.

00:17:54.540 --> 00:18:00.460
So they have a whole bunch of different areas that if you're new to this, you can really learn a lot from.

00:18:00.460 --> 00:18:08.320
Like how to market on social media, where are the right places, how to leverage Quora, how to leverage product hunt and business models, all kinds of stuff.

00:18:08.420 --> 00:18:10.200
So I thought that might be useful.

00:18:10.200 --> 00:18:13.480
There's about 4,000 people who have started on GitHub.

00:18:13.480 --> 00:18:14.920
They probably also thought it was useful.

00:18:14.920 --> 00:18:16.100
It's a huge list.

00:18:16.100 --> 00:18:16.400
Yeah.

00:18:16.400 --> 00:18:16.860
It's massive.

00:18:17.140 --> 00:18:24.960
One of the things on there that I saw near the top is doing things that don't scale, which I love that advice.

00:18:24.960 --> 00:18:25.560
Yeah, I do.

00:18:25.560 --> 00:18:26.360
I like that as well.

00:18:26.360 --> 00:18:27.060
Yeah, definitely.

00:18:27.060 --> 00:18:28.040
Do things that don't scale.

00:18:28.040 --> 00:18:34.860
As I was writing the pytest book, I tried to help out as many people as possible on the Slack channel.

00:18:34.860 --> 00:18:40.220
And even if it meant a couple of times, I just asked people, hey, are you available?

00:18:40.220 --> 00:18:41.480
Can I just call you on the phone?

00:18:41.480 --> 00:18:45.100
I just talked to people about their issues with pytest and with testing.

00:18:45.740 --> 00:18:47.900
Now, clearly, you can't do that on a huge scale.

00:18:47.900 --> 00:18:51.240
But when you don't have any users at all yet, it's pretty easy.

00:18:51.240 --> 00:18:51.880
Yeah, for sure.

00:18:51.880 --> 00:18:54.560
And the behavior creates super advocates for you.

00:18:54.560 --> 00:18:57.340
And it also lets you realize some of the challenges.

00:18:57.340 --> 00:19:03.040
So maybe in the final version of your book, it reflects some of those challenges that that one person had.

00:19:03.040 --> 00:19:06.080
But maybe there's 1,000 or more people who actually have it.

00:19:06.080 --> 00:19:09.020
They didn't call you because they just read your book because you already got it, right?

00:19:09.020 --> 00:19:14.880
I love this because a lot of us nerds didn't become nerds because we really like talking with people.

00:19:15.000 --> 00:19:16.540
I used to laugh at the people in business school.

00:19:16.540 --> 00:19:18.800
Now I'm kind of like, huh, they probably know something, don't they?

00:19:18.800 --> 00:19:19.180
Yeah.

00:19:19.180 --> 00:19:23.100
Well, those guys don't know calculus like nothing.

00:19:23.100 --> 00:19:25.180
Oh, I see how it's going for them.

00:19:25.180 --> 00:19:25.420
All right.

00:19:25.420 --> 00:19:25.640
Anyway.

00:19:25.640 --> 00:19:26.520
Awesome.

00:19:26.520 --> 00:19:27.620
So that's it for this week.

00:19:27.620 --> 00:19:29.920
Those are tons of fun things.

00:19:29.920 --> 00:19:30.700
Thanks for sharing them, Brian.

00:19:31.200 --> 00:19:38.660
You have one more bit of crazy sort of American flavored shopping madness around Python for us, right?

00:19:38.660 --> 00:19:39.960
Yeah, I guess I forget that.

00:19:39.960 --> 00:19:42.540
Yeah, there's plenty of listeners outside of America.

00:19:42.540 --> 00:19:49.900
But one of the traditions we have is a Black Friday sale, which has spilled over into online things as well.

00:19:50.060 --> 00:19:52.980
So starting the day after Thanksgiving usually.

00:19:52.980 --> 00:19:55.940
But we're doing it, I think, a little early here.

00:19:55.940 --> 00:19:56.540
Maybe not.

00:19:56.540 --> 00:19:59.160
If anybody doesn't know, I wrote a book.

00:19:59.160 --> 00:20:01.740
I've been talking about it for a year, so you probably do.

00:20:01.740 --> 00:20:05.460
But the Python testing with pytest is through Pragmatic.

00:20:05.460 --> 00:20:10.980
And Pragmatic has a book sale going on the 22nd through December 1st.

00:20:11.480 --> 00:20:13.340
And you get 40% off all e-books.

00:20:13.340 --> 00:20:14.300
That is awesome.

00:20:14.300 --> 00:20:14.520
Yeah.

00:20:14.520 --> 00:20:15.460
So get in there and get it.

00:20:15.460 --> 00:20:16.700
The reviews are awesome for that book.

00:20:16.700 --> 00:20:18.440
Is this a global thing?

00:20:18.440 --> 00:20:25.660
Even though it's the sort of terminology and date is U.S. inspired, can people all over the world come and get it for 40% off, whatever it is?

00:20:25.660 --> 00:20:25.940
Yeah.

00:20:25.940 --> 00:20:31.160
To get the discount, just use coupon code TURKEYSALE2017.

00:20:31.160 --> 00:20:32.020
Awesome.

00:20:32.020 --> 00:20:32.740
All right.

00:20:32.740 --> 00:20:34.160
Well, go get that book.

00:20:34.160 --> 00:20:35.400
You've been on the shelf.

00:20:35.400 --> 00:20:37.200
On the fence, if you've been on the shelf.

00:20:37.200 --> 00:20:39.520
One more thing that just came up.

00:20:39.640 --> 00:20:47.180
I had somebody actually from the Testing Slack channel again ask me if I could mention PyCon Colombia.

00:20:47.180 --> 00:20:49.060
So tickets are available.

00:20:49.060 --> 00:20:56.540
They're going to have their first Colombia PyCon in Medellin in February 9, 10, and 11 of 2018.

00:20:56.540 --> 00:20:59.880
So we'll put a link in, but it's pretty easy to find.

00:20:59.880 --> 00:21:01.220
So that'll be fun.

00:21:01.220 --> 00:21:01.480
Yeah.

00:21:01.480 --> 00:21:01.940
Awesome.

00:21:01.940 --> 00:21:02.640
Check it out.

00:21:02.640 --> 00:21:05.000
If you're down in South America, it could be a good time.

00:21:05.000 --> 00:21:06.220
Or if you want to go visit there, right?

00:21:06.220 --> 00:21:06.820
How about you?

00:21:06.820 --> 00:21:08.300
Do you have any news to share with us?

00:21:08.300 --> 00:21:09.240
I have no news.

00:21:09.560 --> 00:21:10.400
There's no news for me.

00:21:10.400 --> 00:21:13.840
I'm actually working on some stuff.

00:21:13.840 --> 00:21:17.840
I don't want to announce it yet, but absolutely got some cool things I'm working on.

00:21:17.840 --> 00:21:22.120
Always trying to juggle too much, which is kind of the curse of my personality, but it's fun.

00:21:22.120 --> 00:21:23.260
You're doing a lot of cool stuff, though.

00:21:23.260 --> 00:21:23.960
I can't wait to see.

00:21:23.960 --> 00:21:24.500
Oh.

00:21:24.500 --> 00:21:24.820
Yeah.

00:21:24.820 --> 00:21:25.120
Thanks.

00:21:25.120 --> 00:21:29.480
Back on the PyCon Colombia thing, they have a really cool logo.

00:21:29.480 --> 00:21:33.320
So if anybody's going to that, if you could snag me a t-shirt, that would be cool.

00:21:33.320 --> 00:21:33.720
Yeah.

00:21:33.720 --> 00:21:34.540
Order the t-shirt.

00:21:34.540 --> 00:21:35.420
They come with a logo.

00:21:35.420 --> 00:21:38.340
Well, thanks for talking to me this year.

00:21:38.340 --> 00:21:38.900
You bet.

00:21:38.900 --> 00:21:39.880
Great to chat with you, Brian.

00:21:39.880 --> 00:21:42.200
And everyone as well.

00:21:42.200 --> 00:21:42.860
Thank you for listening.

00:21:42.860 --> 00:21:43.440
See you later.

00:21:45.620 --> 00:21:47.180
Thank you for listening to Python Bytes.

00:21:47.180 --> 00:21:49.760
Follow the show on Twitter via at Python Bytes.

00:21:49.760 --> 00:21:52.640
That's Python Bytes as in B-Y-T-E-S.

00:21:52.640 --> 00:21:56.080
And get the full show notes at pythonbytes.fm.

00:21:56.080 --> 00:22:00.400
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:22:00.400 --> 00:22:03.100
We're always on the lookout for sharing something cool.

00:22:03.100 --> 00:22:06.500
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:22:06.500 --> 00:22:10.120
Thank you for listening and sharing this podcast with your friends and colleagues.

