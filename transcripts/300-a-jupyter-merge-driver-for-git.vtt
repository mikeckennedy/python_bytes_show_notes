
00:00:00.000 --> 00:00:03.740
Hello and welcome to Python Bytes where we deliver Python news and headlines


00:00:03.740 --> 00:00:05.480
directly to your earbuds.


00:00:05.480 --> 00:00:11.300
This is the big episode 300 recorded September 6th, 2022.


00:00:11.300 --> 00:00:12.240
I'm Michael Kennedy.


00:00:12.240 --> 00:00:13.520
And I'm Brian Okken.


00:00:13.520 --> 00:00:14.540
And I'm Seth Larson.


00:00:14.540 --> 00:00:18.720
And this episode is brought to you by Microsoft for startups, Founders Hub.


00:00:18.720 --> 00:00:19.760
More about them later.


00:00:19.760 --> 00:00:21.200
Seth, welcome to the show.


00:00:21.200 --> 00:00:22.040
Thanks for having me.


00:00:22.040 --> 00:00:23.040
This is so exciting.


00:00:23.040 --> 00:00:25.120
I didn't realize it was going to be a 300.


00:00:25.120 --> 00:00:25.600
Yeah.


00:00:25.600 --> 00:00:27.280
Well, you hit the jackpot.


00:00:27.280 --> 00:00:28.120
This is the big one.


00:00:28.280 --> 00:00:31.800
- A big one for at least two more years, I would say.


00:00:31.800 --> 00:00:33.240
And Brian, how about that?


00:00:33.240 --> 00:00:34.440
300 episodes.


00:00:34.440 --> 00:00:35.280
- That's amazing.


00:00:35.280 --> 00:00:36.560
When did we start this?


00:00:36.560 --> 00:00:37.400
We should look this up.


00:00:37.400 --> 00:00:39.520
- It must have been a while ago, I don't know.


00:00:39.520 --> 00:00:44.520
I mean, that's 5.7692307 years.


00:00:44.520 --> 00:00:46.120
That's almost six years.


00:00:46.120 --> 00:00:47.200
- That's amazing.


00:00:47.200 --> 00:00:49.240
- Actually, a reason that I'm so focused


00:00:49.240 --> 00:00:51.720
on floating point numbers and large numbers,


00:00:51.720 --> 00:00:53.560
we're gonna get to that at the end of the show.


00:00:53.560 --> 00:00:56.040
- 2016, we started November 2016.


00:00:56.040 --> 00:00:57.160
That's pretty cool. - Yeah, absolutely.


00:00:57.160 --> 00:00:58.160
- Anyway.


00:00:58.160 --> 00:00:59.700
- Very cool indeed.


00:00:59.700 --> 00:01:02.060
David says, "Congrats on 300."


00:01:02.060 --> 00:01:02.900
Thank you, David.


00:01:02.900 --> 00:01:04.520
Thank you for being here, indeed.


00:01:04.520 --> 00:01:05.360
- Awesome.


00:01:05.360 --> 00:01:06.200
- All right.


00:01:06.200 --> 00:01:09.760
- Well, I've been thinking about wheels and packages lately.


00:01:09.760 --> 00:01:12.400
- Yeah, you were thinking about the phrase,


00:01:12.400 --> 00:01:16.040
rolling wheel gathers no moss or something like that.


00:01:16.040 --> 00:01:17.900
Is that how it goes in programming?


00:01:17.900 --> 00:01:19.760
- No, I wasn't thinking about that at all.


00:01:19.760 --> 00:01:20.880
- All right, what were you thinking about?


00:01:20.880 --> 00:01:21.840
Tell us about it.


00:01:21.840 --> 00:01:24.360
- Okay, so I was thinking about actually


00:01:24.360 --> 00:01:25.760
using different packaging tools


00:01:25.760 --> 00:01:29.720
because pyproject.toml is supported by tons of stuff now.


00:01:29.720 --> 00:01:32.740
Well, by tons of stuff, I mean like three that I know of.


00:01:32.740 --> 00:01:37.300
So we've got Flit, well Poetry also,


00:01:37.300 --> 00:01:38.300
but I don't use Poetry.


00:01:38.300 --> 00:01:41.940
Anyway, I've been using Flit and Hatch and Setup tools,


00:01:41.940 --> 00:01:44.060
which are all really easy to use


00:01:44.060 --> 00:01:46.460
with pyproject.toml lately.


00:01:46.460 --> 00:01:50.420
And I've been using the Flit method of building wheels


00:01:50.420 --> 00:01:54.340
and Hatch and Python, the build package also,


00:01:54.340 --> 00:01:57.160
Python or the, if you just pip install build,


00:01:57.160 --> 00:02:02.020
you can do Python dash M build to build stuff, which is fun.


00:02:02.020 --> 00:02:03.860
But since I've been building all these,


00:02:03.860 --> 00:02:06.780
I've been using a lot of tools to try to like check these


00:02:06.780 --> 00:02:09.420
wheels to make sure that they're the packages and wheels


00:02:09.420 --> 00:02:12.060
are what I expect is inside.


00:02:12.060 --> 00:02:15.140
So there's this, there's a few tools I'm using.


00:02:15.140 --> 00:02:17.740
One is wheel inspect.


00:02:17.740 --> 00:02:20.580
And this one actually, it's kind of cool.


00:02:20.580 --> 00:02:23.040
You can use it programmatically if you want.


00:02:23.040 --> 00:02:28.040
I'm using, it comes with this thing called wheel to JSON.


00:02:28.040 --> 00:02:33.240
And if you run that on a wheel and you give it a wheel name,


00:02:33.240 --> 00:02:37.180
it just pops out all like dumps the JSON information


00:02:37.180 --> 00:02:38.760
about the wheel.


00:02:38.760 --> 00:02:42.600
And I've been using this to just,


00:02:42.600 --> 00:02:44.780
I'll like use different ways to build things


00:02:44.780 --> 00:02:47.300
and then dump this into a file and do a diff


00:02:47.300 --> 00:02:49.780
to just sort of see what's going on to make sure that,


00:02:49.780 --> 00:02:52.900
like make sure I got like the description correct


00:02:52.900 --> 00:02:54.860
or everything's right.


00:02:54.860 --> 00:02:57.180
Just because I'm curious if all of


00:02:57.180 --> 00:02:59.240
these tools are building this same thing,


00:02:59.240 --> 00:03:01.680
and they are, there's slight differences,


00:03:01.680 --> 00:03:04.300
but it's neat that there's so many options now.


00:03:04.300 --> 00:03:07.980
Wheel inspect is really cool for wheels.


00:03:07.980 --> 00:03:12.540
I'm also using a thing called check wheel contents,


00:03:12.540 --> 00:03:15.500
and this is like a linter for wheels.


00:03:15.500 --> 00:03:17.180
If you throw this at,


00:03:17.180 --> 00:03:19.840
because it's possible to make valid wheels


00:03:19.840 --> 00:03:22.320
that don't have really anything in them,


00:03:22.320 --> 00:03:24.920
or they don't have the thing that you thought was in there.


00:03:24.920 --> 00:03:29.040
So this is a linter that goes through and it gives


00:03:29.040 --> 00:03:31.580
you a whole bunch of warnings and stuff.


00:03:31.580 --> 00:03:33.700
If you can look through,


00:03:33.700 --> 00:03:41.520
like W001 wheel contains PYC and PYO files.


00:03:41.520 --> 00:03:44.540
Somehow you've configured it wrong to grab that.


00:03:44.540 --> 00:03:47.100
I don't know how you would do that for a lot of stuff,


00:03:47.100 --> 00:03:49.800
but with FLIT, impossibly,


00:03:49.800 --> 00:03:52.280
if you accidentally threw those in your Git,


00:03:52.280 --> 00:03:54.880
because Flit just grabs anything that's checked in,


00:03:54.880 --> 00:03:57.060
I think, or committed.


00:03:57.060 --> 00:03:59.840
Duplicate files, it checks for that.


00:03:59.840 --> 00:04:01.160
It checks for a whole bunch of stuff.


00:04:01.160 --> 00:04:03.320
This is handy just to check as well.


00:04:03.320 --> 00:04:05.760
But the powerhouse that I'm using,


00:04:05.760 --> 00:04:07.320
of course, is just Talks.


00:04:07.320 --> 00:04:09.600
I wanted to cover the other ones because they're fun,


00:04:09.600 --> 00:04:12.200
but I wanted to remind people that one of the great things about


00:04:12.200 --> 00:04:16.560
Talks is it builds things on its own.


00:04:16.560 --> 00:04:18.840
When you run Talks on a package,


00:04:18.840 --> 00:04:20.400
it will build the package,


00:04:20.400 --> 00:04:22.260
then install it into an environment,


00:04:22.260 --> 00:04:24.200
and then you run your tests.


00:04:24.200 --> 00:04:26.140
We think of it as more of a test runner,


00:04:26.140 --> 00:04:29.080
but it does that whole packaging loop also.


00:04:29.080 --> 00:04:32.320
Then the fourth way, I don't have a slide for this,


00:04:32.320 --> 00:04:34.920
but the fourth way that I've been doing


00:04:34.920 --> 00:04:37.640
is you can just push them into a Git repo,


00:04:37.640 --> 00:04:40.400
and then you can do the pip install,


00:04:40.400 --> 00:04:43.600
git plus, and then the repo name thing.


00:04:43.600 --> 00:04:47.380
Pip will use your packaging tools to


00:04:47.380 --> 00:04:49.640
create the wheel before it installs it.


00:04:49.640 --> 00:04:52.720
That's another way to check your packaging.


00:04:52.720 --> 00:04:53.220
>> Yeah, very cool.


00:04:53.220 --> 00:04:55.200
>> You're doing a lot of packaging. Anyway.


00:04:55.200 --> 00:04:56.820
>> I'm always super paranoid whenever


00:04:56.820 --> 00:04:59.460
I configure something to do with packages.


00:04:59.460 --> 00:05:02.100
My method tends to be just unzip


00:05:02.100 --> 00:05:05.820
the wheel as a zip file and see what's in there, see what landed.


00:05:05.820 --> 00:05:08.300
>> I didn't try that. What does that do?


00:05:08.300 --> 00:05:10.120
>> Yeah, we have one way number five, Brian.


00:05:10.120 --> 00:05:14.620
>> Yeah. Does it just unpacks it in place then?


00:05:14.620 --> 00:05:16.580
>> Yeah. Wheels are technically zip files,


00:05:16.580 --> 00:05:19.800
So you can unzip them and just inspect what made it in there.


00:05:19.800 --> 00:05:20.400
Okay.


00:05:20.400 --> 00:05:20.840
Yeah.


00:05:20.840 --> 00:05:24.520
Put a dot zip extension on it and then you can just put zip tools on it.


00:05:24.520 --> 00:05:25.060
And off it goes.


00:05:25.060 --> 00:05:28.340
So it must store the metadata somewhere then also though.


00:05:28.340 --> 00:05:33.440
But yeah, there's a top level like metadata file that says all the things that it's about.


00:05:33.440 --> 00:05:36.260
Ah, I love the pun in the chat.


00:05:36.260 --> 00:05:38.020
Um, we got from piling.


00:05:38.020 --> 00:05:39.600
We'll get stuff, Brian.


00:05:39.600 --> 00:05:44.000
Brian, that was real good stuff.


00:05:44.440 --> 00:05:45.440
Uh, thanks.


00:05:45.440 --> 00:05:46.760
Thanks for bringing it.


00:05:46.760 --> 00:05:48.400
Um, yeah.


00:05:48.400 --> 00:05:50.000
So on, onto the next one for mine, huh?


00:05:50.000 --> 00:05:50.680
Yeah.


00:05:50.680 --> 00:05:51.240
Let's go.


00:05:51.240 --> 00:05:55.680
We, before we jump onto it, you see, I have my, my race jersey on because the


00:05:55.680 --> 00:05:58.400
Portland grand prix IndyCar race was here this weekend.


00:05:58.400 --> 00:06:02.520
So people listening and we're close by, they missed it, but next September go,


00:06:02.520 --> 00:06:03.200
be sure to go.


00:06:03.200 --> 00:06:03.920
It was really, really fun.


00:06:03.920 --> 00:06:05.000
Three days of racing.


00:06:05.000 --> 00:06:05.640
Very nice.


00:06:05.640 --> 00:06:07.400
Were they, were they fast cars?


00:06:07.400 --> 00:06:08.480
They were very, it was IndyCars.


00:06:08.480 --> 00:06:13.280
They were like, they were very fast, but they, they had no AI.


00:06:13.280 --> 00:06:14.000
Okay.


00:06:14.160 --> 00:06:17.040
no artificial intelligence yet from what I understand.


00:06:17.040 --> 00:06:19.640
But if you look over on fast.ai,


00:06:19.640 --> 00:06:22.160
there's something that anybody who does


00:06:22.160 --> 00:06:25.800
proper data science is going to be pretty jazzed about.


00:06:25.800 --> 00:06:30.560
So Jupyter Notebooks are notoriously bad citizens


00:06:30.560 --> 00:06:34.440
of source control and get and tools like that.


00:06:34.440 --> 00:06:38.440
The reasons are basically whenever you have a notebook file,


00:06:38.440 --> 00:06:39.680
if you've ever run it,


00:06:39.680 --> 00:06:43.280
the output and the order in which the cells were run,


00:06:43.280 --> 00:06:47.480
and the number of times the cells was run is stored in there.


00:06:47.480 --> 00:06:51.240
That's not great if someone gets the file and runs it,


00:06:51.240 --> 00:06:52.800
someone else gets it and runs it,


00:06:52.800 --> 00:06:54.880
and then you try to put it into source control.


00:06:54.880 --> 00:06:57.080
That's a problem. I mean,


00:06:57.080 --> 00:06:58.920
when you and I work on our code,


00:06:58.920 --> 00:07:00.160
we have Python files,


00:07:00.160 --> 00:07:01.280
the output goes somewhere,


00:07:01.280 --> 00:07:03.320
we check it in, the source code goes in.


00:07:03.320 --> 00:07:06.080
But with Jupyter, the outputs go in.


00:07:06.080 --> 00:07:09.160
Not just the outputs, but the memory address


00:07:09.160 --> 00:07:11.760
of some of the object used in the address.


00:07:11.760 --> 00:07:17.520
So even if it's you running it twice, you get merge conflicts, which is not the coolest thing ever.


00:07:17.520 --> 00:07:22.400
I suspect that this goes by the name the Jupyter Plus Git Problem.


00:07:22.400 --> 00:07:26.320
Really, it should be the Jupyter Plus Version Control System, VCS,


00:07:26.320 --> 00:07:28.400
because it doesn't matter what you're using.


00:07:28.400 --> 00:07:31.920
Anything that just diffs files is going to hate this, right?


00:07:31.920 --> 00:07:36.160
Anyway, the article and the feature really that I want to talk about is the Jupyter


00:07:36.160 --> 00:07:40.720
Git Problem is now solved from Jeremy Howard over at fast.ai.


00:07:40.720 --> 00:07:42.560
the solution may surprise you.


00:07:42.560 --> 00:07:46.060
So it talks a little bit about the challenges here,


00:07:46.060 --> 00:07:48.400
and it says, it's interesting,


00:07:48.400 --> 00:07:53.320
it speaks in terms that are not really developer-oriented,


00:07:53.320 --> 00:07:55.660
it speaks more in terms of end-users.


00:07:55.660 --> 00:07:58.900
So the way that maybe a first-year science student


00:07:58.900 --> 00:08:00.920
might experience what the problem is,


00:08:00.920 --> 00:08:04.500
not the way a seasoned data scientist would.


00:08:04.500 --> 00:08:07.000
Like for example, here's the problem.


00:08:07.000 --> 00:08:10.500
The problem is when you're collaborating with others over Git,


00:08:10.500 --> 00:08:13.300
you literally can't load your notebook


00:08:13.300 --> 00:08:15.860
if you both try to check it in because it's broken.


00:08:15.860 --> 00:08:16.940
Well, what does broken mean?


00:08:16.940 --> 00:08:19.700
Broken means it has merge conflicts written into it.


00:08:19.700 --> 00:08:22.000
That's really the problem is,


00:08:22.000 --> 00:08:24.020
you can easily solve this problem if you


00:08:24.020 --> 00:08:26.360
accept their changes or accept your changes,


00:08:26.360 --> 00:08:27.740
but then you're losing data.


00:08:27.740 --> 00:08:29.020
Anyway, this is okay.


00:08:29.020 --> 00:08:30.520
Let's look inside.


00:08:30.520 --> 00:08:32.860
Well, there's JSON and then there's like the head


00:08:32.860 --> 00:08:36.460
and then the SHA diff error.


00:08:36.460 --> 00:08:38.060
I already described this,


00:08:38.060 --> 00:08:39.340
but they do go into examples of


00:08:39.340 --> 00:08:43.420
like when you're talking about matplotlib or something like that,


00:08:43.420 --> 00:08:48.340
you'll have things like matplotlib.axis.subplot.axis.subplot


00:08:48.340 --> 00:08:50.140
at some memory address, right?


00:08:50.140 --> 00:08:52.660
Which is suboptimal, let's say.


00:08:52.660 --> 00:08:55.340
Yeah, there's a lot of axes.


00:08:55.340 --> 00:08:56.300
That's right.


00:08:56.300 --> 00:08:58.820
Then non-determining outputs and so on.


00:08:58.820 --> 00:09:02.780
It says, OK, we identified two categories of problems here.


00:09:02.780 --> 00:09:05.300
And I would like to say this is only accurate


00:09:05.300 --> 00:09:10.300
if you have zero based index when you start counting.


00:09:10.300 --> 00:09:15.700
So we've identified in Michael's term, three problems here.


00:09:15.700 --> 00:09:20.340
One, Jupyter notebook formats are fundamentally incompatible


00:09:20.340 --> 00:09:22.700
with version control, problem zero.


00:09:22.700 --> 00:09:25.660
Problem one, get conflicts lead to broken notebooks.


00:09:25.660 --> 00:09:26.660
There we go.


00:09:26.660 --> 00:09:30.140
And many of these, almost all of these conflicts


00:09:30.140 --> 00:09:34.300
are unnecessary because metadata, like the environment,


00:09:34.300 --> 00:09:36.540
the machine name and stuff that it was run on,


00:09:36.540 --> 00:09:39.000
as well as the memory address of the objects


00:09:39.000 --> 00:09:42.000
is stored inside the file.


00:09:42.000 --> 00:09:42.880
What do you do?


00:09:42.880 --> 00:09:45.560
Well, there was this thing called nbdev


00:09:45.560 --> 00:09:48.440
that would allow you to clean the file.


00:09:48.440 --> 00:09:49.920
I think it was nbdev that will let you clean it.


00:09:49.920 --> 00:09:51.600
There's other ways to clean it within Jupyter as well.


00:09:51.600 --> 00:09:54.640
You can say, I'm only gonna commit to version control


00:09:54.640 --> 00:09:56.840
the empty version, right?


00:09:56.840 --> 00:09:58.680
You can say clear all cells and then commit that.


00:09:58.680 --> 00:10:00.000
Then that would be fine


00:10:00.000 --> 00:10:02.240
'cause you're wiping all that data out.


00:10:02.240 --> 00:10:06.080
However, sometimes that data is incredibly hard to compute.


00:10:06.080 --> 00:10:07.160
Right, I have a picture.


00:10:07.160 --> 00:10:10.080
The picture comes from an hour of doing,


00:10:10.080 --> 00:10:13.700
training machine models and then processing a gig of data


00:10:13.700 --> 00:10:15.200
and then looking at this picture.


00:10:15.200 --> 00:10:17.960
If I don't clear it and I check it in,


00:10:17.960 --> 00:10:19.120
the picture's right there.


00:10:19.120 --> 00:10:20.240
You know what I mean?


00:10:20.240 --> 00:10:22.200
Or some of the outputs are right there.


00:10:22.200 --> 00:10:24.640
So there's a huge reason to not clear it


00:10:24.640 --> 00:10:27.140
because it might be incredibly hard to regenerate it.


00:10:27.140 --> 00:10:28.600
Maybe on the system you're on,


00:10:28.600 --> 00:10:30.920
you can't even run the code necessary, right?


00:10:30.920 --> 00:10:32.680
you don't have access to the database or whatever.


00:10:32.680 --> 00:10:33.800
So here's what they did.


00:10:33.800 --> 00:10:38.560
There's a new NBDev named NBDev2 as part of the name,


00:10:38.560 --> 00:10:39.960
not a version, but the name.


00:10:39.960 --> 00:10:43.720
And this comes from the folks at Fast.ai.


00:10:43.720 --> 00:10:44.640
And here's how it works.


00:10:44.640 --> 00:10:47.920
It has a new merge driver for Git, okay?


00:10:47.920 --> 00:10:50.040
Instead of like processing the files,


00:10:50.040 --> 00:10:52.760
it says, what we're gonna do is we're gonna set up hooks


00:10:52.760 --> 00:10:54.600
in Git so when there is a merge,


00:10:54.600 --> 00:10:57.760
our special Python code that understands notebooks


00:10:57.760 --> 00:11:00.560
will present a different view for you.


00:11:00.560 --> 00:11:01.360
>> Wow.


00:11:01.360 --> 00:11:05.240
>> I know. There's a new save hook for


00:11:05.240 --> 00:11:07.000
Jupyter that automatically removes


00:11:07.000 --> 00:11:10.720
the unnecessary metadata and non-deterministic cell output.


00:11:10.720 --> 00:11:12.240
What you'll get is when you open up


00:11:12.240 --> 00:11:16.480
this conflicting notebook in Jupyter,


00:11:16.480 --> 00:11:18.040
you'll actually have the diff shown


00:11:18.040 --> 00:11:19.860
instead of having a corrupted notebook.


00:11:19.860 --> 00:11:22.560
Additionally, it drops out the metadata,


00:11:22.560 --> 00:11:25.040
so you get these unnecessary ones are just gone.


00:11:25.040 --> 00:11:28.120
It talks about some interesting things that you can do there.


00:11:28.120 --> 00:11:34.360
You've got to run nbdev install hooks to get it set up and some other various things.


00:11:34.360 --> 00:11:36.760
There's also a lot of history on what has been done before,


00:11:36.760 --> 00:11:38.640
what are some of the other alternatives.


00:11:38.640 --> 00:11:44.000
But the big takeaway is the folks over at Fast.AI have been using this internally for


00:11:44.000 --> 00:11:47.200
several months and they say it has transformed their workflow.


00:11:47.200 --> 00:11:52.040
It's totally solved this problem and the reason they care so much is almost all of their work,


00:11:52.040 --> 00:11:53.680
their unit tests, their documentation,


00:11:53.680 --> 00:11:55.560
their actual code, everything is in notebooks.


00:11:55.560 --> 00:11:57.160
They're like all in a notebooks.


00:11:57.160 --> 00:12:01.160
So having Git be a first class citizen is obviously important.


00:12:01.160 --> 00:12:02.760
So I recommend people check this out.


00:12:02.760 --> 00:12:08.520
Postscript side bonus here is there's another thing called review in B.


00:12:08.520 --> 00:12:12.920
Review in B is about like reviewing, say, a GitHub pull request.


00:12:12.920 --> 00:12:16.600
So somebody fixes a bug in a notebook and they do a PR and say,


00:12:16.600 --> 00:12:19.080
"Oh, you were generating this graph wrong.


00:12:19.080 --> 00:12:22.600
You should have passed this parameter, which means a totally different thing.


00:12:22.600 --> 00:12:26.040
Wouldn't it be nice to have a picture of the before graph and the after graph


00:12:26.040 --> 00:12:28.840
With this review in B, that's exactly what you get.


00:12:28.840 --> 00:12:31.140
So you get your code diff,


00:12:31.140 --> 00:12:33.220
but then you also get the output diff,


00:12:33.220 --> 00:12:35.500
which might be a Matplotlib picture. Isn't that cool?


00:12:35.500 --> 00:12:37.360
>> That's really cool. I'd be surprised if


00:12:37.360 --> 00:12:39.560
GitHub doesn't have this eventually.


00:12:39.560 --> 00:12:40.700
>> Yeah. Well.


00:12:40.700 --> 00:12:42.480
>> This seems like a logical next step.


00:12:42.480 --> 00:12:45.280
>> Yeah, it sure does. Notebooks are so important.


00:12:45.280 --> 00:12:47.280
>> But it's not just GitHub though.


00:12:47.280 --> 00:12:49.880
So some people are using Git just straight.


00:12:49.880 --> 00:12:50.480
>> Exactly.


00:12:50.480 --> 00:12:53.240
>> Right. Or GitLab or whatever.


00:12:53.240 --> 00:12:55.400
>> Yeah. This is pretty neat.


00:12:55.400 --> 00:13:00.600
And this, I'm, yeah, I'm, one of the things I really like about this is the, all the part,


00:13:00.600 --> 00:13:05.000
like the, all the other solutions that we've tried and everything. I mean, data science people are


00:13:05.000 --> 00:13:09.880
really good about like covering that sort of stuff where a lot of other people are like, hey, I came


00:13:09.880 --> 00:13:14.760
up with a problem, I solved it. Maybe some other people have solved it also, but yeah, whatever.


00:13:14.760 --> 00:13:17.480
>>Exactly.


00:13:17.480 --> 00:13:23.320
>>I will say this, this set of tools like exactly solves a problem I had not that long ago. So.


00:13:23.320 --> 00:13:26.060
- Okay, so this really resonates with you, huh?


00:13:26.060 --> 00:13:27.160
- This resonates with me, yeah.


00:13:27.160 --> 00:13:29.620
Using notebooks for documentation


00:13:29.620 --> 00:13:32.120
and as part of like an integration test suite,


00:13:32.120 --> 00:13:33.300
like this is great.


00:13:33.300 --> 00:13:34.600
- Yeah, very cool.


00:13:34.600 --> 00:13:35.800
Piling on the audience says,


00:13:35.800 --> 00:13:38.960
ah, so it looks like you can actually resolve merge conflicts


00:13:38.960 --> 00:13:39.880
inside the notebooks


00:13:39.880 --> 00:13:41.780
rather than traditionally ignore conflicts.


00:13:41.780 --> 00:13:42.840
I believe so as well.


00:13:42.840 --> 00:13:46.440
I think there's like a merge inside a Jupyter type of thing


00:13:46.440 --> 00:13:47.280
you can do.


00:13:47.280 --> 00:13:48.280
- Mm, neat.


00:13:48.280 --> 00:13:50.480
- Yeah, that's it, I haven't totally used it.


00:13:50.480 --> 00:13:52.520
Anyway, if you're into data science


00:13:52.520 --> 00:13:56.360
That aside, if you do Jupyter and you care about source control,


00:13:56.360 --> 00:13:57.680
this looks really helpful.


00:13:57.680 --> 00:14:00.200
>> Which you should care about source control.


00:14:00.200 --> 00:14:01.680
>> Yes, exactly.


00:14:01.680 --> 00:14:02.200
>> Yeah.


00:14:02.200 --> 00:14:04.440
>> So if you use Jupyter, full stop.


00:14:04.440 --> 00:14:04.640
>> Cool.


00:14:04.640 --> 00:14:06.480
>> There you go. Awesome. All right.


00:14:06.480 --> 00:14:08.560
Seth, over to you. Before we jump into


00:14:08.560 --> 00:14:12.080
the first topic you want to talk about though, just real quick.


00:14:12.080 --> 00:14:14.640
We were so excited about Episode 300.


00:14:14.640 --> 00:14:17.020
I didn't give you a chance to introduce yourself properly.


00:14:17.020 --> 00:14:20.160
So give us a quick background on you and then tell us about your item.


00:14:20.160 --> 00:14:26.560
Yeah, so I'm currently an engineer at Elastic, working on the language clients team.


00:14:26.560 --> 00:14:31.120
Previously, I was the maintainer of the well-known within the Python community,


00:14:31.120 --> 00:14:36.000
the Elasticsearch client. Now I'm doing tech leadership for that same team.


00:14:36.000 --> 00:14:42.240
And then in terms of open source work, I am a maintainer of many different Python packages,


00:14:42.240 --> 00:14:48.720
most notably urllib3, which is the most downloaded Python package. And it's one of the dependencies


00:14:48.720 --> 00:14:53.280
of requests and Bodo and a whole bunch of other really foundational packages.


00:14:53.280 --> 00:14:54.280
That's incredible.


00:14:54.280 --> 00:14:56.880
Does it make you nervous to make changes to it?


00:14:56.880 --> 00:14:57.880
Oh yeah.


00:14:57.880 --> 00:15:02.320
I, so the very first time that I became lead maintainer and had to make a release, it was,


00:15:02.320 --> 00:15:07.160
uh, I actually spent multiple hours just kind of looking through the wheels and the source


00:15:07.160 --> 00:15:09.600
distributions and making sure that everything was right.


00:15:09.600 --> 00:15:11.400
It was, it was a tough day, honestly.


00:15:11.400 --> 00:15:12.400
Yeah.


00:15:12.400 --> 00:15:15.760
So that chat with that, that Brian opened with you, you've been there as well, huh?


00:15:15.760 --> 00:15:16.760
All right.


00:15:16.760 --> 00:15:17.760
All right.


00:15:17.760 --> 00:15:21.260
So my first item is about trust stores.


00:15:21.260 --> 00:15:26.880
So this is about like certificates that you use to verify HTTPS connections.


00:15:26.880 --> 00:15:32.540
And so this is a library that me and David Glick have worked together to, to


00:15:32.540 --> 00:15:38.060
implement, and it's essentially trying to solve the problem of certify


00:15:38.060 --> 00:15:43.100
with Python and how it kind of interacts with certificates that aren't necessarily


00:15:43.100 --> 00:15:44.580
trusted by the greater world.


00:15:44.620 --> 00:15:46.500
the greater world.


00:15:46.500 --> 00:15:51.600
So if, for example, if you have like a corporate proxy, if your company is installing a certificate


00:15:51.600 --> 00:15:57.140
on your behalf, enable it to do proxying of some sort, Certify just doesn't work with


00:15:57.140 --> 00:15:58.140
that.


00:15:58.140 --> 00:16:00.600
And you get these errors that are kind of insurmountable.


00:16:00.600 --> 00:16:04.860
You get errors that require really low level debugging knowledge to figure out.


00:16:04.860 --> 00:16:05.860
And so we went and implemented this.


00:16:05.860 --> 00:16:08.060
>> Anything that has to do with certificates.


00:16:08.060 --> 00:16:10.620
If it goes wrong, it's just like, well, that's never going to work.


00:16:10.620 --> 00:16:11.620
I guess we're done here.


00:16:11.620 --> 00:16:12.620
You know, it's just so hard to understand, right?


00:16:12.620 --> 00:16:16.820
So I'm on a campaign to make it.


00:16:16.820 --> 00:16:20.720
So no one on the world needs to type verify equals false ever again.


00:16:20.720 --> 00:16:21.900
That's my mission.


00:16:21.900 --> 00:16:22.360
So


00:16:22.360 --> 00:16:26.540
also you spoke about certify, like tell us what, give us the background.


00:16:26.540 --> 00:16:27.940
I'm not sure we all know what certified.


00:16:27.940 --> 00:16:28.740
Sure.


00:16:28.740 --> 00:16:28.960
Yeah.


00:16:28.960 --> 00:16:34.740
Certify is essentially, every web browser like Chrome and Firefox and all


00:16:34.740 --> 00:16:39.960
that, they have a bundle, a group of certificates that they are marking as


00:16:39.980 --> 00:16:45.120
These are trusted and they kind of bundle those along with every single web browser.


00:16:45.120 --> 00:16:45.400
Right.


00:16:45.400 --> 00:16:49.660
And so Mozilla, because it's open source, it open sources, it's trust store.


00:16:49.660 --> 00:16:54.160
And so what certify is, is it's a small, really thin wrapper,


00:16:54.160 --> 00:16:56.660
Python package around that bundle.


00:16:56.660 --> 00:17:03.800
And it allows Python to make HTTPS connections to websites essentially


00:17:03.800 --> 00:17:08.600
without having to like rely on a certificate trust are being configured


00:17:08.600 --> 00:17:09.560
manually by the user.


00:17:09.780 --> 00:17:14.500
And so a lot of times, because Python is installed on windows or Mac


00:17:14.500 --> 00:17:21.240
OS, but is relying on open SSL for a lot of its TLS, it really requires a


00:17:21.240 --> 00:17:25.440
file to be there, like open SSL doesn't know anything about the system


00:17:25.440 --> 00:17:27.140
certificate trust, or any of that.


00:17:27.140 --> 00:17:29.800
It's very, it requires a file to be there.


00:17:29.800 --> 00:17:31.840
And so certify is solving that problem.


00:17:31.840 --> 00:17:32.180
I see.


00:17:32.180 --> 00:17:35.680
So if I went and installed it, if I was on like windows and installed it into the


00:17:35.680 --> 00:17:39.280
trusted root store or something like that, it wouldn't, that wouldn't count.


00:17:39.400 --> 00:17:40.040
It wouldn't be enough.


00:17:40.040 --> 00:17:41.000
It wouldn't be enough.


00:17:41.000 --> 00:17:41.440
Yeah.


00:17:41.440 --> 00:17:42.680
Oh, you would.


00:17:42.680 --> 00:17:46.440
There is a whole bunch of other things that you get also by using these native


00:17:46.440 --> 00:17:50.240
operating system APIs for certificates like auto updates.


00:17:50.240 --> 00:17:52.460
Um, it can be centrally managed.


00:17:52.460 --> 00:17:56.080
So, you know, your it department can click a button and update


00:17:56.080 --> 00:17:58.020
everyone's system trust story.


00:17:58.020 --> 00:18:02.140
So yeah, there's a lot of really good benefits to using the system trust


00:18:02.140 --> 00:18:04.800
store instead of this Python managed file.


00:18:04.800 --> 00:18:08.400
And this, this article kind of goes into the nitty gritty of that, but the big


00:18:08.400 --> 00:18:16.780
announcement for this project was that pip actually, with the version 22.2 release, added


00:18:16.780 --> 00:18:23.400
support, experimental support, for using this library instead of Certify to verify HTTPS.


00:18:23.400 --> 00:18:29.040
And so what this will allow people to do is try out TrustStore optionally, right, instead


00:18:29.040 --> 00:18:34.640
of switching it to a default. And if they're experiencing this class of errors with, you


00:18:34.640 --> 00:18:40.400
installing Python packages or upgrading Python packages, they can use one flag. I believe it's


00:18:40.400 --> 00:18:47.760
listed... either way it would be listed here. So you do --use-feature=truststore.


00:18:47.760 --> 00:18:54.080
And you'll recognize that use feature flag for the 2020 resolver. That's another feature flag


00:18:54.080 --> 00:19:00.320
that they use. So this truststore feature flag is the same thing. If truststore is installed on


00:19:00.320 --> 00:19:03.480
on your system, it will use that instead of certify.


00:19:03.480 --> 00:19:05.480
And it allows you to get around the errors


00:19:05.480 --> 00:19:08.200
that you can see when you have a corporate network involved.


00:19:08.200 --> 00:19:11.840
So yeah, this is kind of the big thing


00:19:11.840 --> 00:19:13.120
that I'm really excited about.


00:19:13.120 --> 00:19:15.200
And we're really hoping that in the future


00:19:15.200 --> 00:19:17.560
we can add this to Python,


00:19:17.560 --> 00:19:19.720
maybe make this a default for requests.


00:19:19.720 --> 00:19:21.720
Like there's a whole bunch of different


00:19:21.720 --> 00:19:24.480
really interesting things that we can go forward with


00:19:24.480 --> 00:19:28.880
if we can prove that, hey, this is useful to these users.


00:19:28.880 --> 00:19:31.280
- Yeah, yeah, fantastic.


00:19:31.280 --> 00:19:34.080
So if I say --use feature=trustor,


00:19:34.080 --> 00:19:36.920
do I have to previously have pip installed trustor


00:19:36.920 --> 00:19:38.160
or something like that?


00:19:38.160 --> 00:19:40.480
- You do have to have previously installed trustor.


00:19:40.480 --> 00:19:43.120
So the package is relatively new,


00:19:43.120 --> 00:19:44.920
it's less than a year old.


00:19:44.920 --> 00:19:49.640
And so to ensure that we're able to keep things moving,


00:19:49.640 --> 00:19:51.620
'cause it's experimental,


00:19:51.620 --> 00:19:53.160
we didn't want to bundle with pip,


00:19:53.160 --> 00:19:55.440
their release cycle is a lot longer.


00:19:55.440 --> 00:20:00.040
I collaborated with Sue Ping for a good long while on this


00:20:00.040 --> 00:20:03.280
and making sure that everything was all good to go for Pip


00:20:03.280 --> 00:20:05.280
since shipping with pip is a big deal.


00:20:05.280 --> 00:20:09.600
So yeah, it's been a long road.


00:20:09.600 --> 00:20:11.480
- Yeah, this looks super useful.


00:20:11.480 --> 00:20:12.880
Kim out in the audience says,


00:20:12.880 --> 00:20:15.160
I'd love to never need Verify False again


00:20:15.160 --> 00:20:16.440
on my internal network.


00:20:16.440 --> 00:20:18.360
Seth's mission is fantastic.


00:20:18.360 --> 00:20:21.320
- Yeah, yeah, I'm very grateful that this work is going on


00:20:21.320 --> 00:20:24.360
and I hope that that's true 'cause it drives me nuts.


00:20:24.360 --> 00:20:26.760
Is this something you have to deal with internally as well, Brian?


00:20:26.760 --> 00:20:34.440
Yeah, because we've got, you know, internal network, corporate firewall, we've got the


00:20:34.440 --> 00:20:39.560
trust stores on Windows systems, and it is an issue.


00:20:39.560 --> 00:20:44.880
And we don't, so a lot of, I mean, one of the ways we get around it is to have an internal


00:20:44.880 --> 00:20:45.880
PyPI.


00:20:45.880 --> 00:20:49.240
We'll get a mirror inside.


00:20:49.240 --> 00:20:51.600
But sometimes I want to try out stuff that's not there.


00:20:51.600 --> 00:20:55.920
So having something like this work would be good.


00:20:55.920 --> 00:20:58.220
But it's not just PyPI, it's other places too.


00:20:58.220 --> 00:21:02.800
- Yeah, the entire outside internet is usually impacted


00:21:02.800 --> 00:21:06.600
when you have that sort of situation of a corporate proxy.


00:21:06.600 --> 00:21:08.560
- Yeah, and I'd like to be able to,


00:21:08.560 --> 00:21:10.560
so I'm guessing that this Trust Store,


00:21:10.560 --> 00:21:12.440
I mean, using it within pip would be great


00:21:12.440 --> 00:21:13.520
for a lot of people to try it,


00:21:13.520 --> 00:21:16.480
but trying out this Trust Store for applications


00:21:16.480 --> 00:21:19.880
that depend on trusted sites,


00:21:19.880 --> 00:21:21.920
that would be helpful as well, right?


00:21:21.920 --> 00:21:24.280
- Yeah, so actually the documentation,


00:21:24.280 --> 00:21:27.720
if you're trying to use it manually with other things,


00:21:27.720 --> 00:21:31.560
we support your lib three AIO HTTP requests,


00:21:31.560 --> 00:21:34.600
and I'm sure it'll work with other libraries as well.


00:21:34.600 --> 00:21:36.780
- Nice, like HTTPX.


00:21:36.780 --> 00:21:39.480
- Yeah, it should work with anything


00:21:39.480 --> 00:21:43.440
that uses the standard SSL context, like API.


00:21:43.440 --> 00:21:46.000
As long as it can use that API, it should work with it.


00:21:46.000 --> 00:21:47.560
- This is great, awesome.


00:21:47.560 --> 00:21:48.720
- Very cool.


00:21:48.720 --> 00:21:51.160
- Nice work, thanks for coming on and sharing it.


00:21:51.160 --> 00:21:53.920
Really it makes corporate Python a little better.


00:21:53.920 --> 00:21:56.480
You know, there's, this was long ago


00:21:56.480 --> 00:21:59.040
when I first started the podcast,


00:21:59.040 --> 00:22:00.480
this one and Talk Python,


00:22:00.480 --> 00:22:04.420
there was a lot of debate or discussion, I guess,


00:22:04.420 --> 00:22:06.280
whether Python was an appropriate


00:22:06.280 --> 00:22:08.400
enterprise software type of language.


00:22:08.400 --> 00:22:12.120
You know, I think that debate is largely over


00:22:12.120 --> 00:22:14.080
and I think the reason it's over


00:22:14.080 --> 00:22:16.040
is because the data scientist said,


00:22:16.040 --> 00:22:17.000
this is not a debate.


00:22:17.000 --> 00:22:18.760
Do you want us to do the job or not do the job?


00:22:18.760 --> 00:22:19.760
Uh, do the, that's right.


00:22:19.760 --> 00:22:19.960
Okay.


00:22:19.960 --> 00:22:20.980
Well, so let's use Python.


00:22:20.980 --> 00:22:24.480
And then it kind of spread from there internally as through acceptance.


00:22:24.480 --> 00:22:28.700
That said, like, now that it does live in these environments that Brian


00:22:28.700 --> 00:22:32.160
described much more frequently, it's really important to have this support.


00:22:32.160 --> 00:22:32.600
Yeah.


00:22:32.600 --> 00:22:37.060
It's actually really funny because so to put this in perspective for Java folks,


00:22:37.060 --> 00:22:42.640
uh, this is like Java trust stores, is like certify where you have this


00:22:42.640 --> 00:22:46.280
manual thing that's shipped with Java as opposed to just using the system.


00:22:46.320 --> 00:22:50.380
And I got that comment on a lobsters or something that I was


00:22:50.380 --> 00:22:52.640
talking about this article and they were just like, wow, this is like


00:22:52.640 --> 00:22:54.040
getting rid of Java trust stores.


00:22:54.040 --> 00:22:54.780
This is great.


00:22:54.780 --> 00:22:55.620
I'm like, okay.


00:22:55.620 --> 00:22:56.600
I didn't even know that existed.


00:22:56.600 --> 00:22:57.240
That's right.


00:22:57.240 --> 00:22:58.600
We really hate it over there.


00:22:58.600 --> 00:22:59.980
And we hate this.


00:22:59.980 --> 00:23:00.900
So this is great.


00:23:00.900 --> 00:23:04.460
I was like, okay, cool.


00:23:04.460 --> 00:23:04.840
All right.


00:23:04.840 --> 00:23:10.880
Well, before we get to the next topic, Brian, let's talk about our sponsor


00:23:10.880 --> 00:23:15.760
for this week in many weeks, this year, Microsoft for startups founders hub.


00:23:16.140 --> 00:23:19.340
If you are starting a business, doing a startup,


00:23:19.340 --> 00:23:20.440
you are a little ways going


00:23:20.440 --> 00:23:21.520
or you're just thinking about it,


00:23:21.520 --> 00:23:22.620
you should really check this out


00:23:22.620 --> 00:23:25.380
because Microsoft for startups set out


00:23:25.380 --> 00:23:27.180
to understand the challenges


00:23:27.180 --> 00:23:29.340
that we all have creating startups


00:23:29.340 --> 00:23:31.100
in this digital cloud age.


00:23:31.100 --> 00:23:33.880
And they created Microsoft for startups founders hub,


00:23:33.880 --> 00:23:35.660
help solve many of them.


00:23:35.660 --> 00:23:40.180
So that includes getting cloud resources,


00:23:40.180 --> 00:23:45.180
GitHub credits, other credits like AI credits


00:23:45.900 --> 00:23:49.300
for example, from open AI that you can run your code on.


00:23:49.300 --> 00:23:51.560
But maybe even more important than that,


00:23:51.560 --> 00:23:55.820
it has support for connecting you with mentors and experts


00:23:55.820 --> 00:23:58.060
to make sure that you go in the right direction


00:23:58.060 --> 00:24:00.180
when you're young and getting started.


00:24:00.180 --> 00:24:04.180
So, so often you see the successful startups


00:24:04.180 --> 00:24:06.700
being in places where there are a lot of mentors,


00:24:06.700 --> 00:24:10.020
where there's these networks and people have connections


00:24:10.020 --> 00:24:14.260
to get funding, the marketing side of things,


00:24:14.260 --> 00:24:17.220
the product market fit, all of those things are super hard.


00:24:17.220 --> 00:24:20.500
So if you are part of Microsoft for Startups Founders Hub,


00:24:20.500 --> 00:24:22.580
you'll have access to their mentorship network,


00:24:22.580 --> 00:24:24.860
which gives you access to hundreds of mentors


00:24:24.860 --> 00:24:26.340
across a range of disciplines,


00:24:26.340 --> 00:24:28.740
like the ones I just named and more,


00:24:28.740 --> 00:24:33.740
as well as up to a little bit over $100,000 worth of credits


00:24:33.740 --> 00:24:38.020
in Azure and GitHub and OpenAI and other places


00:24:38.020 --> 00:24:40.180
as you go through certain checkpoints


00:24:40.180 --> 00:24:41.940
as you sort of grow with this program.


00:24:41.940 --> 00:24:45.620
So really tons of super support that you can get for your startup.


00:24:45.620 --> 00:24:47.580
It doesn't have to be investor backed.


00:24:47.580 --> 00:24:50.640
It doesn't have to be third party verified to participate.


00:24:50.640 --> 00:24:55.320
All you have to do is go to Python by set of M slash founders hub 2022.


00:24:55.320 --> 00:24:56.180
Apply.


00:24:56.180 --> 00:24:58.820
And if you accept it, you'll get all of this support from them.


00:24:58.820 --> 00:25:02.420
So make your idea a reality with Microsoft for startups founders hub.


00:25:02.420 --> 00:25:03.800
Fly today for free.


00:25:03.800 --> 00:25:05.620
Get in, you'll get tons of support.


00:25:05.620 --> 00:25:06.620
So very nice.


00:25:06.620 --> 00:25:08.180
Also nice Brian.


00:25:08.180 --> 00:25:08.980
Lots.


00:25:08.980 --> 00:25:10.420
Tell us about the spots.


00:25:10.780 --> 00:25:12.220
Plots and command lines.


00:25:12.220 --> 00:25:15.540
So I like command line stuff.


00:25:15.540 --> 00:25:18.700
And actually with the thanks of Will McGugan,


00:25:18.700 --> 00:25:21.900
we've got a lot of people excited about CLIs.


00:25:21.900 --> 00:25:24.740
But apparently Bob is also, Bob Bilderbos


00:25:24.740 --> 00:25:28.520
from the PyBytes duo.


00:25:28.520 --> 00:25:30.940
So I like this article.


00:25:30.940 --> 00:25:34.180
So actually I kind of skimmed the article, sorry, Bob.


00:25:34.180 --> 00:25:37.300
But making plots with your terminal with plot,


00:25:37.300 --> 00:25:40.380
- Plot text, it's if you install it.


00:25:40.380 --> 00:25:41.220
- Plot text.


00:25:41.220 --> 00:25:43.540
- I think it's plot text.


00:25:43.540 --> 00:25:46.180
- I can see the typo squatting happening right now.


00:25:46.180 --> 00:25:48.460
- Yeah, so if you pip install it,


00:25:48.460 --> 00:25:52.140
there's one T in the middle, so it's P-L-O-T-E-X-T.


00:25:52.140 --> 00:25:56.940
So he was doing, so he had some code


00:25:56.940 --> 00:25:59.980
where he was looking at plotting the frequency


00:25:59.980 --> 00:26:02.640
of their blog articles on the terminal,


00:26:02.640 --> 00:26:06.360
just so he was using some of their own data to plot stuff.


00:26:06.360 --> 00:26:09.400
And he came up with like, it's kind of cool walking through


00:26:09.400 --> 00:26:11.760
how he grabbed the data and everything.


00:26:11.760 --> 00:26:14.600
But I was looking at this plot going,


00:26:14.600 --> 00:26:16.020
oh, this is a pretty nice looking plot.


00:26:16.020 --> 00:26:17.920
I mean, it's totally blocky, of course,


00:26:17.920 --> 00:26:21.720
but it's a bar chart, so it's supposed to be blocky.


00:26:21.720 --> 00:26:23.080
So that's okay.


00:26:23.080 --> 00:26:26.480
And so then I went over and looked at this package,


00:26:26.480 --> 00:26:30.200
this plotext, and it's cool.


00:26:30.200 --> 00:26:32.480
Look at all these awesome plots.


00:26:33.640 --> 00:26:36.240
I was looking at some of the various things you can do.


00:26:36.240 --> 00:26:41.680
It's got basic plots for just like sine waves and things like that.


00:26:41.680 --> 00:26:46.760
But you can also do fill-in plots and then multicolor.


00:26:46.760 --> 00:26:50.280
This is a lot. You can cool stuff you can do on the command line.


00:26:50.280 --> 00:26:53.140
Then even data streams,


00:26:53.140 --> 00:26:54.880
which I was, look at that.


00:26:54.880 --> 00:26:58.120
It's a data stream going on in a plot in your terminal.


00:26:58.120 --> 00:27:00.400
It's pretty great. Images even.


00:27:00.400 --> 00:27:02.360
There's a cat image.


00:27:02.360 --> 00:27:04.460
>> You can do low cats all day long.


00:27:04.460 --> 00:27:05.420
>> Yeah.


00:27:05.420 --> 00:27:07.540
>> People that put together those examples


00:27:07.540 --> 00:27:09.180
knew what the Internet wants.


00:27:09.180 --> 00:27:10.940
Can it do cat pictures?


00:27:10.940 --> 00:27:14.300
>> Yeah. Then even subplots.


00:27:14.300 --> 00:27:16.860
The first example we saw,


00:27:16.860 --> 00:27:22.460
it's not actually that bad of the interface.


00:27:22.460 --> 00:27:26.060
It's tedious to put together plots anyway,


00:27:26.060 --> 00:27:27.500
but this isn't too bad.


00:27:27.500 --> 00:27:29.980
But that cover image that we saw is


00:27:29.980 --> 00:27:32.800
a is not a combination of images.


00:27:32.800 --> 00:27:35.680
That's one plot that with subplots in it.


00:27:35.680 --> 00:27:38.860
>> I see. That's cool. Within one terminal window,


00:27:38.860 --> 00:27:40.760
you can do almost like a dashboard view with


00:27:40.760 --> 00:27:44.060
different plots and they probably can be updating live.


00:27:44.060 --> 00:27:46.640
>> Yeah. This is pretty exciting.


00:27:46.640 --> 00:27:48.200
>> That is pretty exciting.


00:27:48.200 --> 00:27:52.400
>> I like it. Anyway, I just wanted to say,


00:27:52.400 --> 00:27:54.840
hey, if you want to plot on the command line, you can use this.


00:27:54.840 --> 00:27:56.520
>> I'm loving this terminal.


00:27:56.520 --> 00:27:59.120
Renaissance is so fun.


00:27:59.120 --> 00:28:03.240
>> Yeah. Make us feel like hackers again.


00:28:03.240 --> 00:28:05.880
>> It does absolutely make you feel like a hacker.


00:28:05.880 --> 00:28:08.600
I love it. It's so good.


00:28:08.600 --> 00:28:11.120
On the next item?


00:28:11.120 --> 00:28:12.080
>> Yeah.


00:28:12.080 --> 00:28:15.280
>> Just hadn't really planned to talk about this,


00:28:15.280 --> 00:28:18.760
but I just yesterday did an episode with Will McGugan,


00:28:18.760 --> 00:28:21.720
seven lessons from building a modern TUI framework.


00:28:21.720 --> 00:28:23.880
Brian, you covered that article last week on this show.


00:28:23.880 --> 00:28:25.180
I reached out to Will and said,


00:28:25.180 --> 00:28:28.540
hey, we should absolutely cover this stuff


00:28:28.540 --> 00:28:29.980
in like a deep dive, so.


00:28:29.980 --> 00:28:31.860
- Oh, I can't wait to listen, this is great.


00:28:31.860 --> 00:28:33.220
- People can go check that out as well.


00:28:33.220 --> 00:28:35.100
All right, but let's talk about


00:28:35.100 --> 00:28:38.900
one of my very favorite things, HTMX.


00:28:38.900 --> 00:28:40.980
If people are not familiar with HTMX,


00:28:40.980 --> 00:28:43.500
you really owe it to yourself to check this out.


00:28:43.500 --> 00:28:45.540
It's what the web should have been forever,


00:28:45.540 --> 00:28:47.020
but it wasn't for some reason.


00:28:47.020 --> 00:28:50.540
It's like it stalled in the late, mid 90s, I don't know.


00:28:50.540 --> 00:28:52.900
And you know, hyperlinks and forums


00:28:52.900 --> 00:28:54.420
are the only things that can make requests.


00:28:54.420 --> 00:28:58.300
You can only click on them to make it happen and so on.


00:28:58.300 --> 00:29:00.780
Why should the entire screen have to be replaced


00:29:00.780 --> 00:29:02.700
every interaction and all those things?


00:29:02.700 --> 00:29:05.220
So HTMX is awesome.


00:29:05.220 --> 00:29:07.940
You can just put in little fragments of declarative code


00:29:07.940 --> 00:29:10.380
and it does all the cool work.


00:29:10.380 --> 00:29:12.160
Even have a class on it if people wanna check that out,


00:29:12.160 --> 00:29:13.940
but that's not the topic of today.


00:29:13.940 --> 00:29:16.180
The topic is template fragments.


00:29:16.180 --> 00:29:18.980
So Carson Gross over there wrote this article,


00:29:18.980 --> 00:29:20.900
this essay called "Template Fragments."


00:29:20.900 --> 00:29:23.700
It said one way you might consider doing this is


00:29:23.700 --> 00:29:26.980
In HTMX you very frequently have to first show the page


00:29:26.980 --> 00:29:29.260
and then as little sections of an update,


00:29:29.260 --> 00:29:30.660
he goes back to the server and says,


00:29:30.660 --> 00:29:32.580
"I just need to code the HTML block


00:29:32.580 --> 00:29:34.220
"that goes into this fragment here."


00:29:34.220 --> 00:29:36.000
'Cause somebody moused over something else,


00:29:36.000 --> 00:29:38.700
so refresh it's related item or whatever.


00:29:38.700 --> 00:29:40.300
He's a big fan of this thing called


00:29:40.300 --> 00:29:42.980
the locality of behavior design principle,


00:29:42.980 --> 00:29:45.180
where instead of having a bunch of pieces


00:29:45.180 --> 00:29:48.100
that cling together and reassemble themselves,


00:29:48.100 --> 00:29:49.420
like if it could just all be right there,


00:29:49.420 --> 00:29:50.540
wouldn't that be great?


00:29:50.540 --> 00:29:54.660
So he says, normally the way that you would have to do this


00:29:54.660 --> 00:29:57.220
is you would have to have your full HTML


00:29:57.220 --> 00:29:59.220
and then a little subsection.


00:29:59.220 --> 00:30:02.500
And then that subsection has the optional element.


00:30:02.500 --> 00:30:06.020
But some frameworks, some template libraries


00:30:06.020 --> 00:30:07.980
allow you to define a fragment.


00:30:07.980 --> 00:30:11.340
And then when the code is requested on the server,


00:30:11.340 --> 00:30:12.980
it can either show the whole thing


00:30:12.980 --> 00:30:15.320
or just peel that fragment out of the HTML,


00:30:15.320 --> 00:30:18.100
but you don't have to parse it into a bunch of small files.


00:30:18.100 --> 00:30:18.940
Cool, huh?


00:30:18.940 --> 00:30:21.140
It's really useful if there's no reuse.


00:30:21.140 --> 00:30:23.700
Like if the only reason you would make that little fragment


00:30:23.700 --> 00:30:25.980
is so that you could return it separately,


00:30:25.980 --> 00:30:28.620
this is great because basically it means


00:30:28.620 --> 00:30:29.860
you can just write the page once


00:30:29.860 --> 00:30:32.940
and it can interact with different data, different elements.


00:30:32.940 --> 00:30:34.340
If for some reason that fragment


00:30:34.340 --> 00:30:36.180
was being used in multiple places,


00:30:36.180 --> 00:30:37.820
all of a sudden it's like code duplication


00:30:37.820 --> 00:30:39.100
and that's not ideal.


00:30:39.100 --> 00:30:40.940
But so we talked about this and hey,


00:30:40.940 --> 00:30:45.340
there's some known implementations of this.


00:30:45.340 --> 00:30:48.300
Apparently Django has the render block extension.


00:30:48.300 --> 00:30:50.760
I created the Jinja partials and chameleon partials,


00:30:50.760 --> 00:30:51.640
which I'm not really sure.


00:30:51.640 --> 00:30:53.760
I'm thinking I might actually take them out now


00:30:53.760 --> 00:30:55.880
that there's something for Jinja better,


00:30:55.880 --> 00:30:57.120
which I'm about to talk about.


00:30:57.120 --> 00:31:00.260
But nonetheless, those are kind of sort of allow this,


00:31:00.260 --> 00:31:02.720
but more in the second descriptive way


00:31:02.720 --> 00:31:05.160
where you have like a fragment that's separate but included.


00:31:05.160 --> 00:31:08.200
But I was talking with Sergei Frixes,


00:31:08.200 --> 00:31:09.760
it says between, he said,


00:31:09.760 --> 00:31:12.400
"Between Jinja 2 Fragments and Michael's,


00:31:12.400 --> 00:31:17.400
my Jinja partials, htmx plus flask is so awesome."


00:31:17.520 --> 00:31:21.600
So he created this library called Jinja2Fragments,


00:31:21.600 --> 00:31:23.680
which does exactly what I described.


00:31:23.680 --> 00:31:25.320
So in Jinja, you have blocks,


00:31:25.320 --> 00:31:26.560
like you might have your main HTML,


00:31:26.560 --> 00:31:28.660
and you say, here's a block of main content.


00:31:28.660 --> 00:31:31.800
With his library, what you can do is you can say,


00:31:31.800 --> 00:31:34.040
either just render the template,


00:31:34.040 --> 00:31:35.960
or you can now render block


00:31:35.960 --> 00:31:38.120
and name just part of your Jinja template,


00:31:38.120 --> 00:31:40.840
and that part comes back with the data you supply to it.


00:31:40.840 --> 00:31:41.660
That's pretty awesome, right?


00:31:41.660 --> 00:31:44.720
Like this one paragraph is the whole response


00:31:44.720 --> 00:31:45.600
from the server.


00:31:45.600 --> 00:31:48.320
if you call render block instead of render template.


00:31:48.320 --> 00:31:50.240
>> This is super great.


00:31:50.240 --> 00:31:53.240
Honestly, on Twitter, every time I see HTMX,


00:31:53.240 --> 00:31:57.280
I'm just like I am so prepared to write a website.


00:31:57.280 --> 00:31:59.920
Because I have not had the use case for a while,


00:31:59.920 --> 00:32:02.120
but I'm very excited for the next time I will have.


00:32:02.120 --> 00:32:03.680
>> I exactly the same.


00:32:03.680 --> 00:32:06.320
I'm working on projects that have been around for six or seven years.


00:32:06.320 --> 00:32:08.060
I'm like, if I rewrite this thing,


00:32:08.060 --> 00:32:09.560
it's getting HTMX all over it.


00:32:09.560 --> 00:32:12.320
But I just can't bring myself quite to do it.


00:32:12.320 --> 00:32:14.400
But yeah, it's so good.


00:32:14.400 --> 00:32:15.320
>> One day.


00:32:15.320 --> 00:32:18.680
>> A couple of comments from the chat,


00:32:18.680 --> 00:32:20.560
Vincent from CompCode says,


00:32:20.560 --> 00:32:25.200
"HTML is the bee's knees and that CompCode uses it a whole bunch."


00:32:25.200 --> 00:32:26.760
I am not surprised, Vince.


00:32:26.760 --> 00:32:27.240
>> Fantastic.


00:32:27.240 --> 00:32:27.880
>> That's awesome.


00:32:27.880 --> 00:32:30.920
>> Yeah. Any website I create after


00:32:30.920 --> 00:32:34.520
knowing about HTML is likely going to be using HTML.


00:32:34.520 --> 00:32:38.400
If you thought the answer was Vue.js or React or something like that,


00:32:38.400 --> 00:32:41.480
you may really want to check this out first.


00:32:41.480 --> 00:32:44.240
>> Well, especially if you're somebody like me that I'm like,


00:32:44.240 --> 00:32:47.880
>> Yeah, I want to put this interactive stuff in here.


00:32:47.880 --> 00:32:52.160
I'm not an expert in JavaScript though,


00:32:52.160 --> 00:32:54.200
so I'm not sure.


00:32:54.200 --> 00:32:58.080
But I do know somebody that knows a lot about HTMX.


00:32:58.080 --> 00:33:01.240
>> You might know someone. You're venturing very close to getting me


00:33:01.240 --> 00:33:04.080
off onto a very long rant about HTMX.


00:33:04.080 --> 00:33:07.520
But it's so good because even if you know JavaScript,


00:33:07.520 --> 00:33:09.760
it wouldn't it be better to not have to think about,


00:33:09.760 --> 00:33:10.840
now I'm running client code,


00:33:10.840 --> 00:33:11.840
now I'm running server code,


00:33:11.840 --> 00:33:13.240
now I'm running the APIs to connect


00:33:13.240 --> 00:33:14.600
the client code to the server code.


00:33:14.600 --> 00:33:16.680
This one's in this language, it knows this.


00:33:16.680 --> 00:33:18.360
That one's in that language in this location,


00:33:18.360 --> 00:33:19.200
it knows that.


00:33:19.200 --> 00:33:21.360
Like in HTMX, you just write it all in one place


00:33:21.360 --> 00:33:24.040
in one language with the same context


00:33:24.040 --> 00:33:25.740
and a security model and everything,


00:33:25.740 --> 00:33:27.760
access to the database, for example,


00:33:27.760 --> 00:33:29.160
and then you just do what you need to do.


00:33:29.160 --> 00:33:30.600
It's perfect.


00:33:30.600 --> 00:33:33.000
- Well, and it's not really just about


00:33:33.000 --> 00:33:34.440
thinking about two languages either.


00:33:34.440 --> 00:33:37.600
It's somebody, there's a lot of people like me


00:33:37.600 --> 00:33:39.780
that already have to think in two languages.


00:33:39.780 --> 00:33:42.140
I'm thinking in C++ and Python.


00:33:42.140 --> 00:33:46.180
So thinking about it in a third language or a fourth language,


00:33:46.180 --> 00:33:48.260
that's-- it's like, you know, come on.


00:33:48.260 --> 00:33:49.620
Having a place to stop.


00:33:49.620 --> 00:33:50.660
Plus, yeah.


00:33:50.660 --> 00:33:51.580
>>Yeah, yeah.


00:33:51.580 --> 00:33:54.380
A final comment I'll make on this is even people


00:33:54.380 --> 00:33:57.820
who are using Node.js like HTMX, where it's the same language.


00:33:57.820 --> 00:34:00.580
It's like it's also just about the context and location


00:34:00.580 --> 00:34:01.080
switch.


00:34:01.080 --> 00:34:01.980
>>Oh, yeah.


00:34:01.980 --> 00:34:03.540
That's-- I hadn't heard that.


00:34:03.540 --> 00:34:04.380
That's pretty cool.


00:34:04.380 --> 00:34:04.880
>>Yeah.


00:34:04.880 --> 00:34:06.780
Seth, it sounds like you were going to say something.


00:34:06.780 --> 00:34:08.260
Maybe I'll let you have the last word here.


00:34:08.260 --> 00:34:08.760
>>Oh, no.


00:34:08.760 --> 00:34:11.420
I was obviously just going to say that the more we can stay


00:34:11.420 --> 00:34:16.060
HTML the better because you have to know HTML so you might as well stay in it right?


00:34:16.060 --> 00:34:22.700
Yeah absolutely absolutely so well done Sergei check out his Jinja2 fragments framework it's


00:34:22.700 --> 00:34:28.820
it is super new like I don't know when it got released but a couple days these are like


00:34:28.820 --> 00:34:33.700
two and three days on all the commits here it is a very very new.


00:34:33.700 --> 00:34:34.700
Two to three days.


00:34:34.700 --> 00:34:39.820
Yeah well done well done all right Seth over to you for the final one.


00:34:39.820 --> 00:34:40.820
thing.


00:34:40.820 --> 00:34:41.820
Yeah.


00:34:41.820 --> 00:34:46.560
This, this article was announcing something that's been getting worked on for a while,


00:34:46.560 --> 00:34:50.220
which is a generic generators for Salsa 3.


00:34:50.220 --> 00:34:57.100
So what you're seeing there, SL, SLSA that stands for, if I can remember, it is supply


00:34:57.100 --> 00:35:02.140
chain levels for artifacts, levels for software artifacts.


00:35:02.140 --> 00:35:06.380
So SLSA and you pronounce it Salsa.


00:35:06.380 --> 00:35:09.780
And it's essentially a great, great way to say that acronym.


00:35:09.780 --> 00:35:09.920
Yeah.


00:35:09.920 --> 00:35:10.180
Right.


00:35:10.180 --> 00:35:12.920
Makes you hungry every time, which is the best part.


00:35:12.920 --> 00:35:18.160
Uh, but yeah, it's, it's basically a set of tools, and standards to a test


00:35:18.160 --> 00:35:21.160
and verified the provenance of artifacts.


00:35:21.160 --> 00:35:26.760
So essentially where did this thing come from this file, this wheel, this jar,


00:35:26.760 --> 00:35:30.580
depending on what like ecosystem independent, whatever thing, whatever


00:35:30.580 --> 00:35:33.380
artifact you're building, where did it come from, how was it built?


00:35:33.380 --> 00:35:36.780
Um, and it, so it uses a whole bunch of different like cryptographical


00:35:36.780 --> 00:35:44.700
primitives and open IDC, which is basically magic, but it basically allows you to prove


00:35:44.700 --> 00:35:50.580
in effect, okay, this was built from this specific GitHub repository, this commit, this


00:35:50.580 --> 00:35:57.780
tag, and someone can then later take this file, this artifact that got built and then


00:35:57.780 --> 00:36:00.000
verify that that was the case.


00:36:00.000 --> 00:36:05.540
And so this is kind of like in the future, hopefully be used as like a defense against


00:36:05.540 --> 00:36:09.920
Maybe like stolen credentials on the Python package index or accounts.


00:36:09.920 --> 00:36:11.540
That, that would, that would never happen.


00:36:11.540 --> 00:36:11.740
Right.


00:36:11.740 --> 00:36:12.900
Like that's never happened.


00:36:12.900 --> 00:36:15.560
And that would, that has never happened other than at the time of the


00:36:15.560 --> 00:36:17.520
recording never has happened, I would say.


00:36:17.520 --> 00:36:21.580
Um, so yeah, it, it gives a good defense against this.


00:36:21.580 --> 00:36:21.840
Right.


00:36:21.840 --> 00:36:25.660
Cause if you, let's say you have a package and the Python package index


00:36:25.660 --> 00:36:31.360
knows that this package came from, you know, github.com/sethmlarsen/whatever.


00:36:31.360 --> 00:36:31.640
Right.


00:36:31.840 --> 00:36:37.200
And then in the future, it received something that doesn't come from that GitHub repository.


00:36:37.200 --> 00:36:40.000
It can flag that and say, "Hey, this isn't right.


00:36:40.000 --> 00:36:45.600
Like, this didn't come from the place that it came from before or wherever it's, you know, supposed to come from."


00:36:45.600 --> 00:36:48.800
And the fact that this is generic is the big deal.


00:36:48.800 --> 00:36:54.760
The part that ties us back to Python is that you can use it for wheel files and source distributions.


00:36:54.760 --> 00:36:56.520
You can sign, like, anything.


00:36:56.520 --> 00:37:01.440
And so, for example, one of the Python projects that is featured in here is Yerlibs3.


00:37:01.440 --> 00:37:05.520
Um, I've been trying to get into this and it's been really successful.


00:37:05.520 --> 00:37:09.780
And so your lib three now does this, and you can actually verify that it came


00:37:09.780 --> 00:37:13.920
from a specific repo and that the wheel was came from a specific tag and yeah,


00:37:13.920 --> 00:37:14.980
it's, it's really interesting.


00:37:14.980 --> 00:37:17.340
And this ecosystem is like just getting started.


00:37:17.340 --> 00:37:21.460
Uh, and so if you're like interested in anything about like supply chain


00:37:21.460 --> 00:37:25.220
security and all of that, this is like a great place to start doing some learning


00:37:25.220 --> 00:37:26.540
about what the future might look like.


00:37:26.540 --> 00:37:26.820
Yeah.


00:37:26.820 --> 00:37:27.600
This is great.


00:37:27.600 --> 00:37:31.180
I, when I first saw this, I thought, okay, this is cool, but how does that


00:37:31.180 --> 00:37:35.640
really help act against somebody sabotaging a package.


00:37:35.640 --> 00:37:37.060
But then again, if you think,


00:37:37.060 --> 00:37:38.640
and I realize if you think back to what


00:37:38.640 --> 00:37:40.620
happened with some of those other packages,


00:37:40.620 --> 00:37:43.060
somebody got a hold of the IPI account,


00:37:43.060 --> 00:37:44.340
not the GitHub account.


00:37:44.340 --> 00:37:44.700
>> Yes.


00:37:44.700 --> 00:37:46.900
>> They just published a new version


00:37:46.900 --> 00:37:49.540
directly not through the CI, right?


00:37:49.540 --> 00:37:51.620
>> Right. Yeah. So this is making,


00:37:51.620 --> 00:37:53.540
it just makes the amount of things that


00:37:53.540 --> 00:37:55.660
need to get compromised even larger.


00:37:55.660 --> 00:37:56.580
>> Right.


00:37:56.580 --> 00:37:59.740
>> No longer do you need to only compromise


00:37:59.740 --> 00:38:05.420
the email account on PyPI. You have to also compromise GitHub. And then if you have, you


00:38:05.420 --> 00:38:09.980
know, GitHub environments configured, you need to compromise a second account to like review the


00:38:09.980 --> 00:38:16.940
deployment. And so it just makes it even harder to actually get that attack off, essentially.


00:38:16.940 --> 00:38:23.820
>> Yeah. And if you had to publish the actual vulnerability to a popular GitHub repository


00:38:23.820 --> 00:38:27.340
to trigger it, it would be discovered sooner, right? Because people are like,


00:38:27.340 --> 00:38:29.020
Oh, what's J, oh, that's it.


00:38:29.020 --> 00:38:30.180
That's unusual.


00:38:30.180 --> 00:38:32.980
Who has made this, that they've made this commit.


00:38:32.980 --> 00:38:36.540
And now it's doing this URL thing over to hacksore.com.


00:38:36.540 --> 00:38:37.580
And right.


00:38:37.580 --> 00:38:41.060
Like that's, that's just another out in public thing.


00:38:41.060 --> 00:38:44.940
Whereas if the direct account gets attacked, somebody can just use twine


00:38:44.940 --> 00:38:47.620
or something directly to push it a bad wheel up.


00:38:47.620 --> 00:38:48.340
Yeah, exactly.


00:38:48.340 --> 00:38:48.540
Yeah.


00:38:48.540 --> 00:38:50.140
No more pushing bad wheels.


00:38:50.140 --> 00:38:52.980
You have to go through so many different hoops just to do something.


00:38:52.980 --> 00:38:54.900
You need to flatten those bad wheels.


00:38:54.900 --> 00:38:57.100
Got to inspect them too.


00:38:57.100 --> 00:39:00.640
>> Exactly. All right. Awesome.


00:39:00.640 --> 00:39:04.480
This is good stuff. Well, Brian, that's no.


00:39:04.480 --> 00:39:05.980
Do you have any more? No, that's all of them.


00:39:05.980 --> 00:39:07.660
Do you have any extras for us?


00:39:07.660 --> 00:39:09.700
>> I do, although I'm going to try to make it


00:39:09.700 --> 00:39:12.580
quick because now I'm hungry for some salsa.


00:39:12.580 --> 00:39:17.420
I'm super excited for this upcoming weekend.


00:39:17.420 --> 00:39:22.700
I can't believe it. On Saturday, September 10th,


00:39:22.700 --> 00:39:26.660
I will be in San Francisco.


00:39:26.660 --> 00:39:30.060
and I've got two events going on at PyBay.


00:39:30.060 --> 00:39:32.300
So PyBay, awesome conference.


00:39:32.300 --> 00:39:33.300
I haven't been there before,


00:39:33.300 --> 00:39:35.540
but you've been there last year or something like that?


00:39:35.540 --> 00:39:37.460
- Yeah, last year and I absolutely loved it.


00:39:37.460 --> 00:39:40.580
I would go this year if I wasn't on single parent duty


00:39:40.580 --> 00:39:42.540
and had kids that had to go to school.


00:39:42.540 --> 00:39:45.060
- So I'm giving two events.


00:39:45.060 --> 00:39:47.140
So one of them is sharing is caring,


00:39:47.140 --> 00:39:48.420
pytest fixture edition.


00:39:48.420 --> 00:39:51.120
I'm gonna talk about building,


00:39:51.120 --> 00:39:53.380
actually I'm just gonna talk about packaging,


00:39:53.380 --> 00:39:55.220
but it's not really about packaging.


00:39:55.220 --> 00:39:57.680
It's about sharing fixtures with other people.


00:39:57.680 --> 00:40:01.300
And because I think that that's a bigger need


00:40:01.300 --> 00:40:03.140
than people realize.


00:40:03.140 --> 00:40:06.440
So anyway, love fixtures, we're gonna talk about that.


00:40:06.440 --> 00:40:09.780
And then I got asked to be on this experts panel.


00:40:09.780 --> 00:40:16.300
We got Zach Hatfield Dodds, me, Andy Knight,


00:40:16.300 --> 00:40:18.980
which is, he's got a--


00:40:18.980 --> 00:40:19.820
- Automation Panda.


00:40:19.820 --> 00:40:21.940
- Automation Panda, that's right.


00:40:21.940 --> 00:40:24.800
Joshua Grant and Nishat Khan.


00:40:24.800 --> 00:40:26.580
So it should be a fun panel.


00:40:26.580 --> 00:40:28.880
And it's at seven o'clock at night.


00:40:28.880 --> 00:40:32.520
I'm like, wow, I think I really need to change my flight


00:40:32.520 --> 00:40:36.000
because I was planning on flying out at 8 a.m. the next day


00:40:36.000 --> 00:40:37.160
and it's gonna be tough.


00:40:37.160 --> 00:40:39.840
So that's going on next weekend.


00:40:39.840 --> 00:40:40.680
I'm pretty excited.


00:40:40.680 --> 00:40:43.680
- Yeah, Bai Leng says good luck on the talk, Brian.


00:40:43.680 --> 00:40:45.220
- Thanks.


00:40:45.220 --> 00:40:46.060
So how about you?


00:40:46.060 --> 00:40:47.160
Do you have any extras?


00:40:47.160 --> 00:40:48.840
- I do, I do.


00:40:48.840 --> 00:40:51.100
A bunch, I'll make them pretty quick.


00:40:51.100 --> 00:40:54.340
So Heroku, the platform is a service place.


00:40:54.340 --> 00:40:57.860
They for 13 years or something have had a free plan


00:40:57.860 --> 00:40:59.580
where people can go and create,


00:40:59.580 --> 00:41:01.320
what are they called, dinos or something?


00:41:01.320 --> 00:41:03.660
I don't use, yeah, dinos.


00:41:03.660 --> 00:41:08.180
I don't use Heroku, so I don't know all the terminology


00:41:08.180 --> 00:41:09.960
and how all the plans break down,


00:41:09.960 --> 00:41:12.640
but for a long time they've had free plans,


00:41:12.640 --> 00:41:14.560
but now they are canceling them,


00:41:14.560 --> 00:41:19.560
and you will either have to pay or delete your projects.


00:41:19.560 --> 00:41:22.780
So that's gonna affect a lot of people.


00:41:22.780 --> 00:41:25.060
of something like 13 million.


00:41:25.060 --> 00:41:26.540
What's the right number here?


00:41:26.540 --> 00:41:27.260
Claims.


00:41:27.260 --> 00:41:27.580
Yeah.


00:41:27.580 --> 00:41:31.540
That it's been used by 13 to develop 13 million apps.


00:41:31.540 --> 00:41:35.740
So I bet many of those are free and are going to be suffering this.


00:41:35.740 --> 00:41:38.620
There's a interesting discussion on Y Combinator.


00:41:38.620 --> 00:41:39.780
So you can check that out.


00:41:39.780 --> 00:41:44.260
I'm sure it's very civil over there in the comments as it always would be.


00:41:44.260 --> 00:41:44.940
Yes.


00:41:44.940 --> 00:41:45.440
Yeah.


00:41:45.440 --> 00:41:50.980
But basically, you know, Heroku was purchased by Salesforce for they claim.


00:41:50.980 --> 00:41:52.100
And it may be true.


00:41:52.100 --> 00:41:53.540
I'm sure that it is somewhat true.


00:41:53.540 --> 00:41:56.160
They want to cancel this because of fraud and abuse.


00:41:56.160 --> 00:41:59.840
It may be more that they have to spend so much money to fight the fraud and abuse


00:41:59.840 --> 00:42:01.640
that it's just not worth it to them.


00:42:01.640 --> 00:42:05.320
I didn't know what it is, but for however you land on the, it's a good idea, a bad


00:42:05.320 --> 00:42:09.620
idea, it's going to cost money if you want to use this and it's, it's pretty


00:42:09.620 --> 00:42:13.360
pricey by the way, like, this change will roughly double the cost of a basic


00:42:13.360 --> 00:42:18.920
plan that uses Redis and, from like up to $50 a month, if you start bringing


00:42:18.920 --> 00:42:21.560
and your Redis cache and your Postgres hosting


00:42:21.560 --> 00:42:23.760
and your dynos and they all add up


00:42:23.760 --> 00:42:26.220
and then you got to scale this one or that one, right?


00:42:26.220 --> 00:42:27.840
One of the reasons I'm not using it,


00:42:27.840 --> 00:42:29.060
but not the only reason,


00:42:29.060 --> 00:42:30.340
I just want a little more control as well.


00:42:30.340 --> 00:42:33.920
But anyway, so if you have a free thing running on Heroku


00:42:33.920 --> 00:42:35.260
or you were thinking about it,


00:42:35.260 --> 00:42:36.960
you're gonna have to think again, find something else.


00:42:36.960 --> 00:42:38.080
There's actually at the bottom,


00:42:38.080 --> 00:42:40.960
there's a bunch of platforms of service things


00:42:40.960 --> 00:42:41.800
that I've never heard of.


00:42:41.800 --> 00:42:45.040
There's Porter, Railway, Render, Fly.io and Clever Cloud,


00:42:45.040 --> 00:42:47.180
all of these things vying for this business.


00:42:47.180 --> 00:42:48.600
They all look kind of interesting.


00:42:48.600 --> 00:42:50.160
I know nothing about them.


00:42:50.160 --> 00:42:50.660
You can check it out.


00:42:50.660 --> 00:42:54.660
Seen fly IO all over the place and Python Twitter at least.


00:42:54.660 --> 00:42:59.300
Yeah, OK, so that's if I were personally picking one, I would check that one out


00:42:59.300 --> 00:43:02.460
first, but I don't know anything about any of them to be honest with you.


00:43:02.460 --> 00:43:07.500
I last time I used Heroku was a long time ago, so I'd like to see some


00:43:07.500 --> 00:43:11.700
some some real comparisons among some of these.


00:43:11.700 --> 00:43:16.760
If somebody just saying like there is, there's still a place for hobby projects.


00:43:16.760 --> 00:43:22.960
I want to try something out or you do something live,


00:43:22.960 --> 00:43:26.120
even as a high school app or something like that.


00:43:26.120 --> 00:43:29.080
I know, oh good, you're going to show Python anyway.


00:43:29.080 --> 00:43:31.880
>> I was going to, I got to find the right link. Here we go.


00:43:31.880 --> 00:43:35.160
>> I think they still have a free tier.


00:43:35.160 --> 00:43:35.960
>> I think so.


00:43:35.960 --> 00:43:36.800
>> I don't know if they advertise it much.


00:43:36.800 --> 00:43:38.640
>> I think it's free, yeah.


00:43:38.640 --> 00:43:42.360
>> The part that bothers me really isn't that it's,


00:43:42.360 --> 00:43:47.360
There's a comment about, a comment in the chat about,


00:43:47.360 --> 00:43:52.200
it's hard to complain about people,


00:43:52.200 --> 00:43:54.320
it's a free service, so they can do whatever they want,


00:43:54.320 --> 00:43:55.340
right, essentially.


00:43:55.340 --> 00:43:59.960
Yeah, oh, there's that, that's the right one, yeah.


00:43:59.960 --> 00:44:04.140
However, the jump between free and $50 a month


00:44:04.140 --> 00:44:08.880
is a big jump, and that's my gripe about it, so.


00:44:08.880 --> 00:44:10.280
- Yep, and not to-- - I agree.


00:44:10.280 --> 00:44:14.520
bring this into a recommendation, but yeah, that I feel like a lot of the cloud


00:44:14.520 --> 00:44:18.120
services have really pushed how easy it is to deploy.


00:44:18.120 --> 00:44:22.280
Cause I remember what initially starting with Heroku, the ease of deployment


00:44:22.280 --> 00:44:24.220
was the big win for a lot of people.


00:44:24.220 --> 00:44:28.320
And so, yeah, a lot of cloud services where, you know, you're you pay for


00:44:28.320 --> 00:44:31.680
everything you use, but what you use ends up being a few cents a month.


00:44:31.680 --> 00:44:34.840
Um, which is a lot more surmountable than $50 a month.


00:44:34.840 --> 00:44:38.500
So yeah, there's definitely a gap there, but there's not as much


00:44:38.500 --> 00:44:39.900
of a gap there as there was before.


00:44:40.080 --> 00:44:41.760
- Oh yeah, for sure.


00:44:41.760 --> 00:44:42.960
Brian out in the audience says,


00:44:42.960 --> 00:44:45.200
at my last company we had to disable our free tier


00:44:45.200 --> 00:44:46.680
due to crypto miners.


00:44:46.680 --> 00:44:48.240
Yeah, of course, I'm sure.


00:44:48.240 --> 00:44:50.960
And Kim also has something,


00:44:50.960 --> 00:44:53.240
yeah, stealing the computation there.


00:44:53.240 --> 00:44:54.360
But all right, anyway,


00:44:54.360 --> 00:44:57.240
again, I didn't wanna go too far down that one,


00:44:57.240 --> 00:45:00.560
but for sure, check out some of the options below.


00:45:00.560 --> 00:45:03.680
DigitalOcean and Linode are also really, really good options.


00:45:03.680 --> 00:45:08.000
This one, I'm full of rants today, potential rants.


00:45:08.000 --> 00:45:09.640
This one comes to us from Extreme Tech.


00:45:09.640 --> 00:45:15.040
White House, as in the US, bans paywalls on taxpayer funded research.


00:45:15.040 --> 00:45:22.720
It is always felt super creepy and wrong that we have the NSF, which pays billions


00:45:22.720 --> 00:45:28.460
of dollars a year, millions for individual research projects to come up with scientific


00:45:28.460 --> 00:45:32.940
research that all three of us and many people listening actually pay for.


00:45:32.940 --> 00:45:34.460
I'm glad to pay it.


00:45:34.460 --> 00:45:36.100
I think this is really important.


00:45:36.100 --> 00:45:37.440
It's important for the country.


00:45:37.440 --> 00:45:38.360
It's important for the world.


00:45:38.700 --> 00:45:42.220
And yet those results get locked up behind


00:45:42.220 --> 00:45:46.300
really expensive for pay scientific journals, right?


00:45:46.300 --> 00:45:48.680
Like you've got to pay $5,000 a year


00:45:48.680 --> 00:45:49.840
to subscribe to this journal


00:45:49.840 --> 00:45:51.580
so that you can read the article that,


00:45:51.580 --> 00:45:52.940
wait, we paid to create that


00:45:52.940 --> 00:45:54.560
and we can't even get access to it?


00:45:54.560 --> 00:45:58.140
So this article here is the White House


00:45:58.140 --> 00:46:00.340
has updated federal rules to close a loophole


00:46:00.340 --> 00:46:03.080
that enabled journals to keep taxpayer funded research


00:46:03.080 --> 00:46:05.540
behind a paywall, which I think is great.


00:46:05.540 --> 00:46:07.440
So if you're so interested in the data science side,


00:46:07.440 --> 00:46:10.120
I think this might be relevant to you.


00:46:10.120 --> 00:46:13.080
- Yeah, I'm curious how that's gonna get implemented.


00:46:13.080 --> 00:46:14.240
- Yeah.


00:46:14.240 --> 00:46:15.080
Me too.


00:46:15.080 --> 00:46:16.240
All right, anyway, there's that.


00:46:16.240 --> 00:46:19.040
And then, Seth, back to some of the stuff


00:46:19.040 --> 00:46:20.560
you were talking about.


00:46:20.560 --> 00:46:21.680
I mean, it would never happen


00:46:21.680 --> 00:46:23.040
that someone would try to phish.


00:46:23.040 --> 00:46:26.360
Wait, last week somebody tried to phish PyPI.


00:46:26.360 --> 00:46:28.000
Maybe it was the week before when it started,


00:46:28.000 --> 00:46:29.960
but not too long ago.


00:46:29.960 --> 00:46:32.960
So over on darkreading.com, there's an article that says,


00:46:32.960 --> 00:46:36.440
"Threat actor phishing PyPI users has been identified.


00:46:36.440 --> 00:46:40.940
Juice Ledger has escalated a campaign to distribute its information stealer


00:46:40.940 --> 00:46:45.700
by now going after developers who publish code widely used on the Python code repository.


00:46:45.700 --> 00:46:48.740
Don't want to go too much into it, but there's this group


00:46:48.740 --> 00:46:52.200
who had originally tried to do typo squatting, if I'm correct.


00:46:52.200 --> 00:46:57.200
They wrote some thing to steal some malware written in .NET, by the way, which


00:46:57.200 --> 00:47:02.100
Will was joking about it only running on Windows.


00:47:02.100 --> 00:47:06.000
Hey, if they use .NET Core, they could expand out the open source version. Anyway,


00:47:06.000 --> 00:47:11.080
I don't want to give them ideas, but they were distributing this malware through these


00:47:11.080 --> 00:47:12.600
malicious packages.


00:47:12.600 --> 00:47:16.280
And then they said, well, what if we could get really popular ones, hack their accounts


00:47:16.280 --> 00:47:17.600
and then upload bad wheels.


00:47:17.600 --> 00:47:21.720
So anyway, there's a bunch of background on the actual people behind this.


00:47:21.720 --> 00:47:23.500
So it's pretty interesting.


00:47:23.500 --> 00:47:24.840
You can check out that article if you want.


00:47:24.840 --> 00:47:29.200
There's also an R technical article, but it doesn't have as much depth as the dark reading


00:47:29.200 --> 00:47:30.200
one.


00:47:30.200 --> 00:47:31.200
Nice.


00:47:31.200 --> 00:47:32.200
All right.


00:47:32.200 --> 00:47:33.200
Last one.


00:47:33.200 --> 00:47:34.200
I think this is the last one.


00:47:34.200 --> 00:47:37.080
Former co-host on the show,


00:47:37.080 --> 00:47:39.000
who always contributes many interesting things,


00:47:39.000 --> 00:47:41.560
says Python Bytes will definitely want to check this out.


00:47:41.560 --> 00:47:44.440
This is a tweet by Steve Dower that says,


00:47:44.440 --> 00:47:47.080
"We have published the details


00:47:47.080 --> 00:47:50.380
"of a critical security problem for Python.


00:47:50.380 --> 00:47:52.620
"It is very rare that we have


00:47:52.620 --> 00:47:55.240
"direct vulnerabilities in Python."


00:47:55.240 --> 00:47:57.240
Like, it was all fun to have the lulls


00:47:57.240 --> 00:48:01.840
about Jindy and Log4j,


00:48:01.840 --> 00:48:04.080
but this is not exactly that,


00:48:04.080 --> 00:48:07.520
but it's a denial of service at that kind of scale.


00:48:07.520 --> 00:48:09.080
So if you've ever thought,


00:48:09.080 --> 00:48:11.460
I have a string and it needs to be an integer,


00:48:11.460 --> 00:48:13.520
and that string came from user input,


00:48:13.520 --> 00:48:15.340
that's really bad it turns out,


00:48:15.340 --> 00:48:18.480
because there's a denial of service thing


00:48:18.480 --> 00:48:21.840
that you can do by passing very, very long strings


00:48:21.840 --> 00:48:23.120
to that integer parsing.


00:48:23.120 --> 00:48:25.240
Seth, you're shaking your head like, oh boy.


00:48:25.240 --> 00:48:26.080
Yes.


00:48:26.080 --> 00:48:28.520
- Yeah, if you've been waiting to upgrade to Python 2,


00:48:28.520 --> 00:48:32.320
now's the time to upgrade Python 3, I would say.


00:48:32.320 --> 00:48:33.140
- Exactly.


00:48:33.140 --> 00:48:37.460
And you shouldn't say, I'll just go to one of the older ones.


00:48:37.460 --> 00:48:41.400
Like you need to get the three 10, seven ASP.


00:48:41.400 --> 00:48:44.520
I suspect they'll roll this back to some of the supported ones as well.


00:48:44.520 --> 00:48:47.740
So they'll probably back port it to three nine and three eight.


00:48:47.740 --> 00:48:50.480
But if you're on say three, six, that's a problem.


00:48:50.480 --> 00:48:52.140
That's a big, big problem.


00:48:52.140 --> 00:48:52.800
Yeah.


00:48:52.800 --> 00:48:56.060
So expect releases for 3.7 plus in the next week.


00:48:56.060 --> 00:48:57.880
This came out a few days ago.


00:48:57.880 --> 00:49:02.360
This has now been done, but this Twitter thread is super interesting.


00:49:02.360 --> 00:49:03.460
And that's what I'm linking to.


00:49:03.460 --> 00:49:04.680
So you all can check that out.


00:49:04.680 --> 00:49:08.400
There was also some feedback, like, what are you doing?


00:49:08.400 --> 00:49:10.320
What, how dare you fix this?


00:49:10.320 --> 00:49:13.820
The way they fixed this is they said, if you're doing base 10 parsing,


00:49:13.820 --> 00:49:20.620
you can only use 4,300 digits, not the number to 4,000, but places in the number.


00:49:20.620 --> 00:49:21.780
4,000 places.


00:49:21.780 --> 00:49:23.220
That's a really large number.


00:49:23.220 --> 00:49:26.360
If it's bigger than that, basically Python won't be able to parse it before.


00:49:26.360 --> 00:49:28.680
Brian, you, you do C++ all the time.


00:49:28.680 --> 00:49:31.280
You have to think about, is this over 32,000?


00:49:31.520 --> 00:49:33.020
Is it signed or unsigned?


00:49:33.020 --> 00:49:33.580
Okay.


00:49:33.580 --> 00:49:34.260
It's unsigned.


00:49:34.260 --> 00:49:34.400
All right.


00:49:34.400 --> 00:49:35.840
We can get to 64,000.


00:49:35.840 --> 00:49:39.500
This is a, not that level of thinking, but you kind of do have to think


00:49:39.500 --> 00:49:41.060
about what the heck's going on here.


00:49:41.060 --> 00:49:44.240
I think it's a fair fix.


00:49:44.240 --> 00:49:45.220
I do too.


00:49:45.220 --> 00:49:46.660
People freaking out for no reason.


00:49:46.660 --> 00:49:47.420
Yeah.


00:49:47.420 --> 00:49:51.380
This one was really, this one's wild too, because it, you just pass a long number.


00:49:51.380 --> 00:49:53.540
Like it's not something sophisticated or anything.


00:49:53.540 --> 00:49:58.620
This is it also, it feels almost not log for J, but kind of log for J a little


00:49:58.620 --> 00:50:02.620
where you can just do denial of service by doing something very trivial.


00:50:02.620 --> 00:50:10.220
Exactly. Yeah, you just try to set your username to jndi://haxor.com.


00:50:10.220 --> 00:50:13.820
This is like, well, the number is a1722117,


00:50:13.820 --> 00:50:15.620
and then boom, down goes the website.


00:50:15.620 --> 00:50:18.820
This is just denial of service versus remote code execution,


00:50:18.820 --> 00:50:21.420
which is clearly better, but it's not great.


00:50:21.420 --> 00:50:23.620
Just hold down the zero key for a little longer.


00:50:23.620 --> 00:50:25.020
Exactly.


00:50:25.020 --> 00:50:26.220
Or if you're writing Python code,


00:50:26.220 --> 00:50:28.900
but you can just do times 10,000,


00:50:28.900 --> 00:50:31.460
caret 10,000, you know, power to 10,000 or something


00:50:31.460 --> 00:50:32.300
and send that.


00:50:32.300 --> 00:50:34.500
- Yeah, string extension really coming in handy here.


00:50:34.500 --> 00:50:37.100
- R pad, exactly.


00:50:37.100 --> 00:50:38.700
Or Z fill on the right.


00:50:38.700 --> 00:50:40.340
- Z pad, Z fill.


00:50:40.340 --> 00:50:41.660
- Exactly.


00:50:41.660 --> 00:50:43.540
Yeah, piling wants to send pi across,


00:50:43.540 --> 00:50:44.940
you know, that's gonna upset it.


00:50:44.940 --> 00:50:48.320
Anyway, I upgraded my servers to 310.7.


00:50:48.320 --> 00:50:50.820
They were not available from Ubuntu directly.


00:50:50.820 --> 00:50:54.300
It was still the old 310.6, which is unnerving.


00:50:54.300 --> 00:50:56.180
But because I build mine from source,


00:50:56.180 --> 00:50:59.660
just change the number 3, 10, 7, rebuild and redeploy Python.


00:50:59.660 --> 00:51:00.160
I'm good to go.


00:51:00.160 --> 00:51:05.900
I imagine everybody listening to this podcast is on 3, 7 or above.


00:51:05.900 --> 00:51:11.480
If they at any chance can be, I mean that if they're, if they're below,


00:51:11.480 --> 00:51:13.100
it's not because they haven't tried.


00:51:13.100 --> 00:51:14.180
Yeah.


00:51:14.180 --> 00:51:15.520
Well, let me point this out.


00:51:15.520 --> 00:51:17.640
I would say, actually, I want to follow up with a couple of things.


00:51:17.640 --> 00:51:20.340
Cause this is, maybe this should have been the main, a main item, but whatever.


00:51:20.340 --> 00:51:24.900
Um, one we've talked about the reason you should upgrade to Python three.


00:51:25.160 --> 00:51:29.220
for a long time and Brian, you and I had lots of fun calling it Legacy Python.


00:51:29.220 --> 00:51:34.500
Although we've had people go into iTunes and like post negative reviews of the


00:51:34.500 --> 00:51:38.860
podcast because I had said disparaging things of Python too, but it's okay.


00:51:38.860 --> 00:51:41.280
I'm willing to stick by them.


00:51:41.280 --> 00:51:42.440
Oh my goodness.


00:51:42.440 --> 00:51:43.700
That is, that's wild.


00:51:43.700 --> 00:51:45.560
More reviews.


00:51:45.560 --> 00:51:46.140
Awesome.


00:51:46.140 --> 00:51:49.300
If you have good things to say, also consider posting a review.


00:51:49.300 --> 00:51:53.860
Not just if you're angry that I called it Legacy Python, but if you're on old


00:51:53.860 --> 00:51:58.860
legacy code, which is even 3.5, but is very seriously Python 2,


00:51:58.860 --> 00:52:00.980
because the gap to upgrade is really hard.


00:52:00.980 --> 00:52:04.940
These are the types of things that we warned about that could be a problem.


00:52:04.940 --> 00:52:07.300
>> Yeah. >> And there will be no fix, right?


00:52:07.300 --> 00:52:11.340
You better just say, well, we're going to make sure the strings that are really


00:52:11.340 --> 00:52:13.660
destined to be integers are really, really checked.


00:52:13.660 --> 00:52:16.620
And I mean, it's not good, it's not good.


00:52:16.620 --> 00:52:21.180
So just one more reason to be on a shipping version of Python,


00:52:21.180 --> 00:52:22.540
even if it's just 3.7.


00:52:22.540 --> 00:52:23.700
- Yeah. - All right.


00:52:23.700 --> 00:52:26.300
Yeah, that's it.


00:52:26.300 --> 00:52:27.240
Let's see.


00:52:27.240 --> 00:52:28.700
Yeah, the change log.


00:52:28.700 --> 00:52:29.900
One other really quick,


00:52:29.900 --> 00:52:31.860
yeah, so you can see it's like actually described


00:52:31.860 --> 00:52:33.100
quite well here.


00:52:33.100 --> 00:52:36.220
Hatched by Gregory P. Smith and Christian Himes,


00:52:36.220 --> 00:52:38.700
feedback by a bunch of great folks.


00:52:38.700 --> 00:52:42.020
Sebastian Ramirez sent a tweet out when this got fixed


00:52:42.020 --> 00:52:46.060
saying, "Please be kind to your open source contributors.


00:52:46.060 --> 00:52:49.340
"They just wrote 800 lines of code in a PR


00:52:49.340 --> 00:52:51.660
"so that you can parse strings to integers."


00:52:51.660 --> 00:52:54.860
So apparently it wasn't easy to fix, but yeah, I agree.


00:52:54.860 --> 00:52:55.360
Cool.


00:52:55.360 --> 00:52:59.960
Ready for a joke or actually Seth, you got anything extra you want to throw out first?


00:52:59.960 --> 00:53:02.260
Yeah, I had a real hopefully quick one.


00:53:02.260 --> 00:53:08.660
So I follow a whole bunch of game art accounts on Twitter because I just love it.


00:53:08.660 --> 00:53:15.460
Seeing what people create and one came by it was using #pixel, P-Y-X-L.


00:53:15.460 --> 00:53:16.260
Did a little ding.


00:53:16.260 --> 00:53:17.860
I'm like, wait a second, that's Python.


00:53:17.860 --> 00:53:27.580
And then I just went back in this developers Twitter, a few, a few tweets back and they just released wasm support for this Python like game framework.


00:53:27.580 --> 00:53:29.420
I'm like, this is incredible.


00:53:29.420 --> 00:53:34.300
So yeah, it was quite the, it was a very fast journey of wow.


00:53:34.300 --> 00:53:35.940
Wasm is everywhere at this point.


00:53:35.940 --> 00:53:38.860
That's kind of, kind of wild that it's popping up so fast.


00:53:38.860 --> 00:53:41.740
So yeah, version 1 8 0 of this.


00:53:41.740 --> 00:53:47.220
Retro game engine for Python, which they had a whole bunch of really beautiful like examples.


00:53:47.220 --> 00:53:50.700
I think y'all have covered this framework before, but I'm not sure we have.


00:53:50.700 --> 00:53:52.260
Yeah, this is really cool.


00:53:52.260 --> 00:53:53.260
Yeah.


00:53:53.260 --> 00:53:56.860
So apparently they have a whole bunch of demos that you can just play in the browser.


00:53:56.860 --> 00:53:59.820
And I was really blown away that I didn't even know this existed.


00:53:59.820 --> 00:54:02.300
And suddenly there's wasm support for it.


00:54:02.300 --> 00:54:03.300
So awesome.


00:54:03.300 --> 00:54:04.300
I love it.


00:54:04.300 --> 00:54:05.300
Okay.


00:54:05.300 --> 00:54:06.300
That's a great one.


00:54:06.300 --> 00:54:07.300
Yeah.


00:54:07.300 --> 00:54:08.300
All right.


00:54:08.300 --> 00:54:09.300
How about we close it out with a bit of a joke.


00:54:09.300 --> 00:54:11.540
Have you ever felt like you've had a hard day at work?


00:54:11.540 --> 00:54:13.180
There's one of these problems like parsing integers.


00:54:13.180 --> 00:54:15.380
You're like, how could possibly this go wrong?


00:54:15.380 --> 00:54:17.660
I just don't understand what is happening.


00:54:17.660 --> 00:54:20.780
Well, here we have a joke of a guy at a nighttime soccer game.


00:54:20.780 --> 00:54:22.500
[LAUGHTER]


00:54:22.500 --> 00:54:23.980
Apparently, it's a little cool out,


00:54:23.980 --> 00:54:25.860
but he's been running really hard.


00:54:25.860 --> 00:54:28.900
It's a picture of a guy whose head is literally steaming,


00:54:28.900 --> 00:54:30.580
like not a little bit, a lot.


00:54:30.580 --> 00:54:32.300
[LAUGHTER]


00:54:32.300 --> 00:54:34.860
>> I think that's a visualization of


00:54:34.860 --> 00:54:37.100
integer being parsed into a string right there.


00:54:37.100 --> 00:54:37.780
>> Exactly.


00:54:37.780 --> 00:54:38.540
>> That's the before.


00:54:38.540 --> 00:54:40.820
>> I'll read what the tweet really says,


00:54:40.820 --> 00:54:42.420
and then maybe we can play with it a little.


00:54:42.420 --> 00:54:45.420
The tweet says just a JavaScript developer after work.


00:54:45.420 --> 00:54:47.620
You know, like, what do you mean I have to do a new framework?


00:54:47.620 --> 00:54:49.620
I just did a new framework last month.


00:54:49.620 --> 00:54:51.820
[laughter]


00:54:51.820 --> 00:54:54.520
I feel like this could be Christian Himes after going,


00:54:54.520 --> 00:54:57.920
"What do you mean parsing an integer is a denial of service?


00:54:57.920 --> 00:55:00.820
I just can't."


00:55:00.820 --> 00:55:03.620
>> The ints are wrong. The ints are cursed.


00:55:03.620 --> 00:55:04.920
>> Exactly.


00:55:04.920 --> 00:55:07.620
Anyway, I'll just leave this here for people to appreciate.


00:55:07.620 --> 00:55:09.420
We can call it a show 300.


00:55:09.420 --> 00:55:10.920
>> Yeah, nice.


00:55:10.920 --> 00:55:12.380
- Thank you.


00:55:12.380 --> 00:55:13.540
- Yeah, thank you, Brian.


00:55:13.540 --> 00:55:15.340
Seth, thanks so much for being here


00:55:15.340 --> 00:55:17.060
and sharing the work you've been doing.


00:55:17.060 --> 00:55:18.740
- Yeah, thanks so much for having me.


00:55:18.740 --> 00:55:20.180
- Yeah, it's been great.

