WEBVTT

00:00:00.001 --> 00:00:05.160
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.160 --> 00:00:11.040
This is the big episode 300, recorded September 6, 2022.

00:00:11.040 --> 00:00:12.160
I'm Michael Kennedy.

00:00:12.160 --> 00:00:13.480
And I'm Brian Ockin.

00:00:13.480 --> 00:00:14.460
And I'm Seth Larson.

00:00:14.460 --> 00:00:18.620
And this episode is brought to you by Microsoft for Startups Founders Hub.

00:00:18.620 --> 00:00:19.660
More about them later.

00:00:19.660 --> 00:00:21.140
Seth, welcome to the show.

00:00:21.140 --> 00:00:22.040
Thanks for having me.

00:00:22.040 --> 00:00:22.980
This is so exciting.

00:00:22.980 --> 00:00:24.960
I didn't realize it was going to be a 300.

00:00:24.960 --> 00:00:27.240
Yeah, well, you hit the jackpot.

00:00:27.240 --> 00:00:30.880
This is the big one, a big one for at least two more years, I would say.

00:00:30.880 --> 00:00:32.960
And Brian, how about that?

00:00:32.960 --> 00:00:33.980
300 episodes.

00:00:33.980 --> 00:00:35.060
That's amazing.

00:00:35.060 --> 00:00:36.260
When did we start this?

00:00:36.260 --> 00:00:37.280
We should look this up.

00:00:37.280 --> 00:00:38.280
It must have been a while ago.

00:00:38.280 --> 00:00:38.900
I don't know.

00:00:38.900 --> 00:00:44.400
I mean, that's 5.7692307 years.

00:00:44.400 --> 00:00:45.820
Like, that's almost six years.

00:00:45.820 --> 00:00:46.700
It's amazing.

00:00:46.700 --> 00:00:51.540
Actually, a reason that I'm so focused on floating point numbers and large numbers.

00:00:51.540 --> 00:00:53.200
We're going to get to that at the end of the show.

00:00:53.200 --> 00:00:54.140
2016.

00:00:54.140 --> 00:00:55.720
We started November 2016.

00:00:55.720 --> 00:00:56.480
That's pretty cool.

00:00:56.480 --> 00:00:56.840
Absolutely.

00:00:57.180 --> 00:00:57.340
Anyway.

00:00:57.340 --> 00:00:57.860
Yeah.

00:00:57.860 --> 00:00:59.000
Very cool indeed.

00:00:59.000 --> 00:01:01.940
David says, congrats on 300.

00:01:01.940 --> 00:01:02.540
Thank you, David.

00:01:02.540 --> 00:01:03.440
Thank you for being here.

00:01:03.440 --> 00:01:03.940
Indeed.

00:01:03.940 --> 00:01:04.840
Awesome.

00:01:04.840 --> 00:01:05.520
All right.

00:01:05.520 --> 00:01:09.200
Well, I've been thinking about wheels and packages lately.

00:01:09.200 --> 00:01:10.020
Yeah.

00:01:10.020 --> 00:01:16.100
You were thinking about the phrase, rolling wheel gathers no moss or something like that?

00:01:16.100 --> 00:01:17.480
Is that how it goes in programming?

00:01:17.480 --> 00:01:19.700
No, I wasn't thinking about that at all.

00:01:19.700 --> 00:01:19.880
All right.

00:01:19.880 --> 00:01:20.800
What were you thinking about?

00:01:20.800 --> 00:01:21.460
Tell us about it.

00:01:21.460 --> 00:01:22.020
Okay.

00:01:22.260 --> 00:01:27.640
So I was thinking about actually using different packaging tools because pyproject.toml is supported

00:01:27.640 --> 00:01:29.660
like by tons of stuff now.

00:01:29.660 --> 00:01:32.680
Well, by tons of stuff, I mean like three that I know of.

00:01:32.840 --> 00:01:36.160
So we've got flit.

00:01:36.160 --> 00:01:38.120
Well, poetry also, but I don't use poetry.

00:01:38.120 --> 00:01:44.420
Anyway, I've been using flit and hatch and setup tools, which are all really easy to use with

00:01:44.420 --> 00:01:45.780
pyproject.toml lately.

00:01:46.160 --> 00:02:01.020
And I've been using like the flit method of building wheels and hatch and set and Python, the build package also Python or the, if you just pip install build, you can do Python dash and build the build stuff, which is fun.

00:02:01.020 --> 00:02:11.480
But since I've been building all these, I've been using a lot of tools to try to like check these wheels to make sure that they're the packages and wheels are what I expect is inside.

00:02:11.780 --> 00:02:14.640
So there's this, there's a few tools I'm using.

00:02:14.640 --> 00:02:16.560
One is wheel inspect.

00:02:16.560 --> 00:02:20.460
And this one actually, it's kind of cool.

00:02:20.460 --> 00:02:22.340
You can use it programmatically if you want.

00:02:22.340 --> 00:02:27.960
I'm not, I'm using the, it comes with this thing called a wheel to Jason.

00:02:28.620 --> 00:02:38.220
And it, if you run that on a wheel and you give it a wheel name, it just pops out all like dumps the Jason information about the wheel.

00:02:38.220 --> 00:02:54.600
And, and I've been using this to just, I'll like use different ways to build things and then dump this into a file and do a diff to just sort of see what's going on to make sure that, like make sure I got like the, the description correct or everything's right.

00:02:54.720 --> 00:03:04.060
And just cause I'm, I'm curious if all of these tools are building this kind of the same thing and they kind of are, there's a slight differences, but it's neat that there's so many options now.

00:03:04.060 --> 00:03:07.640
So wheel inspect is really cool for, for wheels.

00:03:07.640 --> 00:03:12.000
I'm also using a thing called check wheel contents.

00:03:12.000 --> 00:03:15.360
And this is kind of like a linter for wheels.

00:03:15.360 --> 00:03:24.900
So if you throw this at, because it's possible to make valid wheels that don't have really anything in them or they don't have the thing that you thought was in there.

00:03:24.900 --> 00:03:31.540
So there's, there's, there's, this is a linter that goes through and it gives you a whole bunch of warnings and stuff.

00:03:31.540 --> 00:03:41.340
If you, you can kind of look through like a, a, we hit W zero zero one wheel contains a PYC and PYO files.

00:03:41.340 --> 00:03:44.000
Like somehow you've configured it wrong to grab that.

00:03:44.000 --> 00:03:52.140
And I don't know how you would do that for the lot of stuff, but with flit, if you have possibly, if you accidentally threw those in your get,

00:03:52.140 --> 00:03:59.540
because flit just grabs anything that's checked in, I think, or committed, duplicate files, it checks for that.

00:03:59.540 --> 00:04:01.080
So it checks for a whole bunch of stuff.

00:04:01.080 --> 00:04:03.040
So this is handy just to check as well.

00:04:03.040 --> 00:04:07.120
But the powerhouse that I'm using, of course, is just talks.

00:04:07.120 --> 00:04:15.980
I kind of wanted to cover the other ones cause they're fun, but I wanted to remind people that one of the great things about talks is it builds things on your own, on its own.

00:04:15.980 --> 00:04:21.900
And so when you, when you run talks on a package, it will build the package, then install it into an environment.

00:04:21.900 --> 00:04:24.140
And then, then you run your tests.

00:04:24.140 --> 00:04:28.120
We think of it as more of a test runner, but it does that whole packaging loop also.

00:04:28.120 --> 00:04:37.280
Um, the, and then the fourth way, I don't have a, like a slide for this, but the, the fourth way that I've been doing is you can just push them into a Git repo.

00:04:37.520 --> 00:04:43.080
And then you can do the, pip install get plus, and then the repo name thing.

00:04:43.080 --> 00:04:49.540
And pip will use your packaging tools to create the wheel before it installs it.

00:04:49.540 --> 00:04:52.120
So that's another way to check your packaging.

00:04:52.120 --> 00:04:54.000
So I'm doing a lot of packaging.

00:04:54.000 --> 00:04:58.900
So anyway, I'm always super paranoid whenever I configure something to do with packages.

00:04:58.900 --> 00:05:04.860
So my, my method tends to be just unzip the wheel as a, as a zip file and see what's in there.

00:05:04.860 --> 00:05:05.560
See what landed.

00:05:05.960 --> 00:05:07.120
I didn't try that.

00:05:07.120 --> 00:05:08.240
So what does that do?

00:05:08.240 --> 00:05:08.920
You just unzip it.

00:05:08.920 --> 00:05:09.860
Way number five, Brian.

00:05:09.860 --> 00:05:10.540
Yeah.

00:05:10.540 --> 00:05:14.420
So does it just zip, unpacks it in place then?

00:05:14.420 --> 00:05:14.880
Yeah.

00:05:14.880 --> 00:05:16.400
Wheels are technically zip files.

00:05:16.400 --> 00:05:19.780
So you can unzip them and just inspect what made it in there.

00:05:19.780 --> 00:05:20.340
Okay.

00:05:20.340 --> 00:05:20.840
Yeah.

00:05:20.840 --> 00:05:25.020
Put a dot zip extension on it and then you can just put zip tools on it and off it goes.

00:05:25.020 --> 00:05:28.400
So it must, it must store the metadata somewhere then also though.

00:05:28.400 --> 00:05:33.400
But yeah, there's a top level like metadata file that says all the things that it's about.

00:05:33.400 --> 00:05:35.520
Ah, I love the pun.

00:05:35.600 --> 00:05:39.540
In the chat, we got from Pai Lang, wheel good stuff, Brian.

00:05:39.540 --> 00:05:43.860
Brian, that was wheel good stuff.

00:05:43.860 --> 00:05:45.260
Uh, thanks.

00:05:45.260 --> 00:05:46.740
Thanks for bringing it.

00:05:46.740 --> 00:05:48.420
Um, yeah.

00:05:48.420 --> 00:05:49.960
So on, onto the next one for mine, huh?

00:05:49.960 --> 00:05:50.600
Yeah.

00:05:50.900 --> 00:05:56.020
Before we, before we jump onto it, you see, I have my, my race jersey on because the Portland

00:05:56.020 --> 00:05:58.340
Grand Prix IndyCar race was here this weekend.

00:05:58.340 --> 00:06:03.080
So people listening and we're close by, they missed it, but next September go, be sure to

00:06:03.080 --> 00:06:03.180
go.

00:06:03.180 --> 00:06:03.900
It was really, really fun.

00:06:03.900 --> 00:06:04.900
Three days of racing.

00:06:04.900 --> 00:06:05.620
Very nice.

00:06:05.620 --> 00:06:07.320
Were they, were they fast cars?

00:06:07.320 --> 00:06:08.440
They were, we have Zindi cars.

00:06:08.440 --> 00:06:13.140
They were like, they were very fast, but they, they had no AI.

00:06:13.140 --> 00:06:13.940
Okay.

00:06:14.160 --> 00:06:16.800
No artificial intelligence yet from what I understand.

00:06:16.800 --> 00:06:24.020
But if you look over on fast.ai, there's something that anybody who does proper data science is

00:06:24.020 --> 00:06:25.600
going to be pretty jazzed about.

00:06:26.120 --> 00:06:34.040
So Jupyter notebooks are notoriously bad citizens of source control and, and get and tools like

00:06:34.040 --> 00:06:34.320
that.

00:06:34.320 --> 00:06:40.560
The reasons are basically whenever you have a notebook file, if you've ever run it, the output

00:06:40.560 --> 00:06:46.500
and the order in which the cells were run and the number of times the cells were run is stored

00:06:46.500 --> 00:06:47.200
in there.

00:06:47.200 --> 00:06:48.940
That's not great.

00:06:48.940 --> 00:06:52.680
If someone gets the file and runs it, someone else gets it and runs it.

00:06:52.680 --> 00:06:54.460
And then you try to put it into source control.

00:06:54.460 --> 00:06:55.820
That's a problem.

00:06:55.820 --> 00:06:56.300
Right.

00:06:56.300 --> 00:07:01.080
I mean, when you and I work on our code, we have Python files, the output goes somewhere.

00:07:01.080 --> 00:07:01.960
We check it in.

00:07:01.960 --> 00:07:07.600
The source code goes in, but with Jupyter, the outputs go in, not just the outputs, but

00:07:07.600 --> 00:07:11.380
the memory address of some of the object used in the address.

00:07:11.380 --> 00:07:16.840
So even if it's you running it twice, you get merge conflicts, which is not the coolest

00:07:16.840 --> 00:07:17.360
thing ever.

00:07:17.360 --> 00:07:23.680
I suspect that this goes by the name, the Jupyter plus get problem where really it should be the

00:07:23.680 --> 00:07:28.460
Jupyter plus version control system VCS, because it doesn't matter what you're using.

00:07:28.460 --> 00:07:31.600
Anything that just diffs files is going to hate this.

00:07:31.600 --> 00:07:32.040
Right.

00:07:32.040 --> 00:07:36.960
Anyway, the article and the feature really that I want to talk about is the Jupyter get problem

00:07:36.960 --> 00:07:40.400
is now solved from Jeremy Howard over at fast.ai.

00:07:40.400 --> 00:07:42.460
The solution may surprise you.

00:07:42.460 --> 00:07:45.800
So it talks a little bit about the challenges here.

00:07:45.800 --> 00:07:48.340
And it says it's interesting.

00:07:48.340 --> 00:07:53.020
It speaks in terms like that are not really developer oriented.

00:07:53.020 --> 00:07:55.620
It speaks more in terms of like end users.

00:07:55.620 --> 00:08:00.920
So like the way that maybe a first year science student might experience what the problem is,

00:08:00.920 --> 00:08:04.300
not the way a seasoned data scientist would.

00:08:04.300 --> 00:08:06.680
Like, for example, here's the problem.

00:08:06.680 --> 00:08:12.840
The problem is when you're collaborating with others over Git, you literally can't load your

00:08:12.840 --> 00:08:15.580
notebook if you both try to check it in because it's broken.

00:08:15.580 --> 00:08:16.880
Well, what does broken mean?

00:08:16.880 --> 00:08:19.300
Broken means it has merge conflicts written into it.

00:08:19.540 --> 00:08:24.800
And that's really the problem is you can easily solve this problem if you accept their changes

00:08:24.800 --> 00:08:26.000
or accept your changes.

00:08:26.000 --> 00:08:27.600
But then you're losing data.

00:08:27.600 --> 00:08:27.820
Right.

00:08:27.820 --> 00:08:30.420
So anyway, I says, OK, let's let's look inside.

00:08:30.420 --> 00:08:35.900
Well, there's JSON and then there's like the head and then the the shaw like diff error.

00:08:35.900 --> 00:08:40.820
So I kind of already described this, but they do go into examples of like when you're talking

00:08:40.820 --> 00:08:43.100
about matplotlib or something like that.

00:08:43.220 --> 00:08:49.840
You'll have things like a matplotlib.axes.subplot.axes.subplot at some memory address.

00:08:49.840 --> 00:08:50.100
Right.

00:08:50.100 --> 00:08:52.200
Which is suboptimal, let's say.

00:08:52.200 --> 00:08:54.000
Yeah, that's to that.

00:08:54.000 --> 00:08:55.280
There's a lot of axes.

00:08:55.280 --> 00:08:55.760
That's right.

00:08:55.760 --> 00:08:58.840
Then non-determining outputs and so on.

00:08:58.840 --> 00:09:02.320
It says, OK, we identified two categories of problems here.

00:09:02.320 --> 00:09:09.460
And I would I would like to say this is only accurate if you have zero based indexes when

00:09:09.460 --> 00:09:10.180
you start counting.

00:09:10.500 --> 00:09:15.600
So we've identified in Michael's term three problems here.

00:09:15.600 --> 00:09:21.140
One, Jupyter notebook formats are fundamentally incompatible with version control.

00:09:21.140 --> 00:09:22.080
Problem zero.

00:09:22.080 --> 00:09:25.040
Problem one, Git conflicts lead to broken notebooks.

00:09:25.040 --> 00:09:26.120
There we go.

00:09:26.120 --> 00:09:34.060
And many of these, almost all of these conflicts are unnecessary because metadata, like the environment,

00:09:34.060 --> 00:09:38.920
the machine name and stuff that it was run on, as well as the memory address of the objects

00:09:38.920 --> 00:09:41.560
is stored inside the file.

00:09:41.560 --> 00:09:42.660
What do you do?

00:09:42.660 --> 00:09:48.400
Well, there was this thing called NB dev that would allow you to clean the file.

00:09:48.400 --> 00:09:49.900
I think it was NB dev that will let you clean it.

00:09:49.900 --> 00:09:51.580
There's other ways to clean it within Jupyter as well.

00:09:51.580 --> 00:09:55.560
You can say, I'm only going to commit to version control, the empty version.

00:09:55.560 --> 00:09:56.820
Right.

00:09:56.820 --> 00:09:58.620
You can say clear all cells and then commit that.

00:09:58.620 --> 00:10:02.020
Then that would be fine because you're wiping all that data out.

00:10:02.020 --> 00:10:05.680
However, sometimes that data is incredibly hard to compute.

00:10:05.680 --> 00:10:06.280
Right.

00:10:06.280 --> 00:10:06.940
I have a picture.

00:10:06.940 --> 00:10:12.960
The picture comes from an hour of doing training machine models and then processing a gig of

00:10:12.960 --> 00:10:14.880
data and then looking at this picture.

00:10:14.880 --> 00:10:18.840
If I don't clear it and I check it in, the picture's right there.

00:10:18.840 --> 00:10:19.620
You know what I mean?

00:10:19.620 --> 00:10:21.780
Or some of the outputs are right there.

00:10:21.780 --> 00:10:26.940
So there's a huge reason to not clear it because it might be incredibly hard to regenerate it.

00:10:26.940 --> 00:10:30.540
Maybe on the system you're on, you can't even run the code necessary.

00:10:30.540 --> 00:10:30.940
Right.

00:10:30.940 --> 00:10:32.380
You don't have access to the database or whatever.

00:10:32.380 --> 00:10:33.640
So here's what they did.

00:10:33.640 --> 00:10:39.640
There's a new NB dev named NB dev two as part of the name, not a version, but the name.

00:10:39.640 --> 00:10:43.080
And this comes from the folks at fast AI.

00:10:43.080 --> 00:10:44.600
And here's how it works.

00:10:44.600 --> 00:10:46.840
It has a new merge driver for Git.

00:10:46.840 --> 00:10:47.480
Okay.

00:10:47.480 --> 00:10:52.060
Instead of like a processing the files, it says, what we're going to do is we're going to set

00:10:52.060 --> 00:10:53.320
up hooks in Git.

00:10:53.320 --> 00:10:58.280
So when there is a merge, our special Python code that understands notebooks will present

00:10:58.280 --> 00:10:59.840
a different view for you.

00:10:59.840 --> 00:11:00.900
Wow.

00:11:00.900 --> 00:11:02.160
I know.

00:11:02.160 --> 00:11:08.320
And there's a new save hook for Jupyter that automatically removes the unnecessary metadata

00:11:08.320 --> 00:11:10.420
and non-deterministic cell output.

00:11:10.660 --> 00:11:16.640
So what you'll get is when you open up this conflicting notebook in, in Jupyter, you'll

00:11:16.640 --> 00:11:19.660
actually have the diff shown instead of having a corrupted notebook.

00:11:19.660 --> 00:11:22.460
Additionally, it drops out the metadata.

00:11:22.460 --> 00:11:24.760
So you get these unnecessary ones are just kind of gone.

00:11:25.000 --> 00:11:27.920
So it talks about some interesting things that you can do there.

00:11:27.920 --> 00:11:34.160
You've got to run NB dev install hooks to get it set up and some other various things.

00:11:34.160 --> 00:11:36.620
There's also a lot of history on what has been done before.

00:11:36.620 --> 00:11:38.160
What are some of the other alternatives?

00:11:38.160 --> 00:11:44.300
But the big takeaway is the folks over at fast AI have been using this internally for several

00:11:44.300 --> 00:11:46.900
months and they say it has transformed their workflow.

00:11:46.900 --> 00:11:48.500
It's totally solved this problem.

00:11:48.500 --> 00:11:53.460
And the reason they care so much is almost all of their work, their unit tests, their documentation,

00:11:53.680 --> 00:11:55.400
their actual code, everything is in notebooks.

00:11:55.400 --> 00:11:56.820
They're like all in on notebooks.

00:11:56.820 --> 00:12:01.060
So having Git be a first class citizen is obviously important.

00:12:01.060 --> 00:12:02.960
So I recommend people check this out.

00:12:02.960 --> 00:12:08.740
Postscript side bonus here is there's another thing called review in B.

00:12:08.740 --> 00:12:12.980
Review in B is about like reviewing, say, a GitHub pull request.

00:12:12.980 --> 00:12:17.940
So somebody fixes a bug in a notebook and they do a PR and say, oh, you were generating this

00:12:17.940 --> 00:12:19.120
graph wrong.

00:12:19.120 --> 00:12:22.420
You should have passed this parameter, which means a totally different thing.

00:12:22.800 --> 00:12:26.560
Wouldn't it be nice to have a picture of the before graph and the after graph with this

00:12:26.560 --> 00:12:27.400
review in B?

00:12:27.400 --> 00:12:28.720
That's exactly what you get.

00:12:28.720 --> 00:12:34.320
So you get your code diff, but then you also get the output diff, which might be a map plot

00:12:34.320 --> 00:12:34.760
of picture.

00:12:34.760 --> 00:12:35.300
Isn't that cool?

00:12:35.300 --> 00:12:36.300
That's really cool.

00:12:36.300 --> 00:12:39.260
I'd be surprised if GitHub doesn't have this eventually.

00:12:39.260 --> 00:12:40.100
I mean, yeah.

00:12:40.100 --> 00:12:42.300
Well, this seems like a logical next step.

00:12:42.300 --> 00:12:43.380
Yeah, it sure does.

00:12:43.380 --> 00:12:43.640
Right.

00:12:43.640 --> 00:12:44.680
Notebooks are so important.

00:12:44.680 --> 00:12:45.240
Yeah.

00:12:45.240 --> 00:12:45.780
Right.

00:12:45.780 --> 00:12:47.120
But it's not just GitHub, though.

00:12:47.440 --> 00:12:49.660
So some people are using Git just straight.

00:12:49.660 --> 00:12:50.320
Exactly.

00:12:50.320 --> 00:12:50.660
Right.

00:12:50.660 --> 00:12:50.940
Right.

00:12:50.940 --> 00:12:53.100
Or GitLab or whatever.

00:12:53.100 --> 00:12:53.400
Yeah.

00:12:53.400 --> 00:12:53.600
Yeah.

00:12:53.600 --> 00:12:55.140
This is pretty neat.

00:12:55.140 --> 00:13:02.540
And this is, yeah, one of the things I really like about this is all the other solutions

00:13:02.540 --> 00:13:03.620
that we've tried and everything.

00:13:03.620 --> 00:13:08.580
I mean, data science people are really good about covering that sort of stuff where a lot

00:13:08.580 --> 00:13:10.620
of other people are like, hey, I came up with a problem.

00:13:10.620 --> 00:13:11.280
I solved it.

00:13:11.280 --> 00:13:14.720
Maybe some other people have solved it also, but yeah, whatever.

00:13:14.720 --> 00:13:17.440
Exactly.

00:13:17.440 --> 00:13:22.960
I will say this, this set of tools like exactly solves a problem I had not that long ago.

00:13:22.960 --> 00:13:23.400
So.

00:13:23.400 --> 00:13:24.000
Okay.

00:13:24.000 --> 00:13:25.740
So this really resonates with you, huh?

00:13:25.740 --> 00:13:26.900
This resonates with me.

00:13:26.900 --> 00:13:27.100
Yeah.

00:13:27.100 --> 00:13:31.860
Using notebooks for documentation and as part of like an integration test suite.

00:13:31.860 --> 00:13:32.900
Like this is great.

00:13:32.900 --> 00:13:33.460
Yeah.

00:13:33.460 --> 00:13:34.060
Very cool.

00:13:34.060 --> 00:13:35.660
Piling on the audiences.

00:13:35.860 --> 00:13:40.080
Ah, so it looks like you can actually resolve merge conflicts inside the notebooks rather

00:13:40.080 --> 00:13:41.700
than traditionally ignore conflicts.

00:13:41.700 --> 00:13:42.760
I believe so as well.

00:13:42.760 --> 00:13:46.920
I think there's like a merge, merge inside of Jupyter type of thing you can do.

00:13:46.920 --> 00:13:47.380
Hmm.

00:13:47.380 --> 00:13:47.960
Neat.

00:13:47.960 --> 00:13:48.440
Yeah.

00:13:48.440 --> 00:13:49.980
That said, I haven't, I haven't totally used it.

00:13:49.980 --> 00:13:50.420
All right.

00:13:50.420 --> 00:13:55.460
Anyway, if you're into data science or data science, if you do Jupyter and you care about

00:13:55.460 --> 00:13:57.220
source control, this looks really helpful.

00:13:57.220 --> 00:13:59.760
Which you should care about source control.

00:13:59.760 --> 00:14:01.360
Yes, exactly.

00:14:01.360 --> 00:14:02.000
Yeah.

00:14:02.000 --> 00:14:03.100
So if you use Jupyter.

00:14:03.100 --> 00:14:04.380
Full stop.

00:14:04.380 --> 00:14:04.620
Go.

00:14:04.620 --> 00:14:04.900
There you go.

00:14:04.900 --> 00:14:05.840
Awesome.

00:14:05.840 --> 00:14:06.300
All right.

00:14:06.300 --> 00:14:10.780
Seth, over to you before we jump into the first type topic you want to talk about though.

00:14:10.780 --> 00:14:11.760
Just real quick.

00:14:11.760 --> 00:14:14.480
We were so excited about episode 300.

00:14:14.480 --> 00:14:16.940
I didn't give you a chance to introduce yourself properly.

00:14:16.940 --> 00:14:20.040
So give us a quick background on you and then tell us about your item.

00:14:20.040 --> 00:14:20.540
Yeah.

00:14:20.540 --> 00:14:26.260
So I currently an engineer at Elastic working on the language clients team.

00:14:26.260 --> 00:14:31.800
Previously, I was the maintainer of the well-known within the Python community, the Elastic

00:14:31.800 --> 00:14:32.620
search client.

00:14:33.000 --> 00:14:36.160
Now I'm doing tech leadership for that same team.

00:14:36.160 --> 00:14:42.180
And then in terms of open source work, I am a maintainer of many different Python packages,

00:14:42.180 --> 00:14:46.340
most notably your lib3, which is most downloaded Python package.

00:14:46.600 --> 00:14:52.600
And it's one of the dependencies of requests and Bodo and a whole bunch of other really foundational

00:14:52.600 --> 00:14:53.140
packages.

00:14:53.140 --> 00:14:54.240
That's incredible.

00:14:54.240 --> 00:14:56.600
Well, does it make you nervous to make changes to it?

00:14:56.600 --> 00:14:57.520
Oh, yeah.

00:14:57.520 --> 00:15:03.020
So the very first time that I became lead maintainer and had to make a release, it was, I actually

00:15:03.020 --> 00:15:08.520
spent multiple hours just kind of looking through the wheels and the source distributions and making

00:15:08.520 --> 00:15:09.460
sure that everything was right.

00:15:09.560 --> 00:15:11.040
It was a tough day, honestly.

00:15:11.040 --> 00:15:11.840
Yeah.

00:15:11.840 --> 00:15:15.120
So that chat with that Brian open with you, you've been there as well.

00:15:15.120 --> 00:15:16.900
All right.

00:15:16.900 --> 00:15:17.160
All right.

00:15:17.160 --> 00:15:18.400
Well, what's your first item for us?

00:15:18.400 --> 00:15:18.860
Yeah.

00:15:18.860 --> 00:15:21.940
So my first item is about trust stores.

00:15:21.940 --> 00:15:27.640
So this is about like certificates that you use to verify HTTPS connections.

00:15:27.640 --> 00:15:33.820
And so this is a library that me and David Glick have worked together to implement.

00:15:33.820 --> 00:15:41.640
And it's essentially trying to solve the problem of certify with Python and how it kind of interacts

00:15:41.640 --> 00:15:45.500
with certificates that aren't necessarily trusted by the greater world.

00:15:45.920 --> 00:15:51.500
So, for example, if you have like a corporate proxy, if your company is installing a certificate

00:15:51.500 --> 00:15:57.200
on your behalf, enable to do proxying of some sort, certify just doesn't work with that.

00:15:57.200 --> 00:16:00.400
And you get these errors that are kind of insurmountable.

00:16:00.400 --> 00:16:04.360
You get errors that require really low level debugging knowledge to figure out.

00:16:04.360 --> 00:16:06.420
And so we went and implemented this.

00:16:06.420 --> 00:16:07.640
Anything that has to do with certificates.

00:16:07.640 --> 00:16:10.580
If it goes wrong, it's just like, well, that's never going to work.

00:16:10.580 --> 00:16:11.540
I guess we're done here.

00:16:11.540 --> 00:16:13.720
You know, it's just so hard to understand, right?

00:16:14.540 --> 00:16:20.640
I'm on a campaign to make it so no one on the world needs to type verify equals false ever again.

00:16:20.640 --> 00:16:21.800
That's my mission.

00:16:21.800 --> 00:16:22.540
Awesome.

00:16:22.540 --> 00:16:24.360
Also, you spoke about certify.

00:16:24.360 --> 00:16:26.400
Like, tell us what, give us the background.

00:16:26.400 --> 00:16:28.180
I'm not sure we all know what certify does.

00:16:28.180 --> 00:16:28.720
Sure.

00:16:28.720 --> 00:16:28.960
Yeah.

00:16:28.960 --> 00:16:34.920
Certify is essentially every web browser like Chrome and Firefox and all that.

00:16:34.920 --> 00:16:40.880
They have a bundle, a group of certificates that they are marking as these are trusted.

00:16:41.580 --> 00:16:45.020
And they kind of bundle those along with every single web browser.

00:16:45.020 --> 00:16:45.380
Right.

00:16:45.380 --> 00:16:49.600
And so Mozilla, because it's open source, it open sources its trust store.

00:16:49.600 --> 00:16:56.580
And so what certify is, is it's a small, really thin wrapper Python package around that bundle.

00:16:56.580 --> 00:17:09.500
And it allows Python to make HTTPS connections to websites, essentially, without having to, like, rely on a certificate trust or being configured manually by the user.

00:17:09.500 --> 00:17:22.360
And so a lot of times, because Python is installed on Windows or macOS, but is relying on open SSL for a lot of its TLS, it really requires a file to be there.

00:17:22.360 --> 00:17:27.120
Like, open SSL doesn't know anything about the system certificate trust or any of that.

00:17:27.120 --> 00:17:29.780
It's very, it requires a file to be there.

00:17:29.860 --> 00:17:31.820
And so certify is solving that problem.

00:17:31.820 --> 00:17:32.160
I see.

00:17:32.160 --> 00:17:39.200
So if I went and installed it, if I was on, like, Windows and installed it into the trusted root store or something like that, it wouldn't, that wouldn't count?

00:17:39.200 --> 00:17:40.020
That wouldn't be enough?

00:17:40.020 --> 00:17:41.000
It wouldn't be enough.

00:17:41.000 --> 00:17:41.420
Yeah.

00:17:41.420 --> 00:17:41.940
Oh, okay.

00:17:41.940 --> 00:17:50.040
You would, there is a whole bunch of other things that you get also by using these native operating system APIs for certificates, like auto updates.

00:17:50.040 --> 00:17:57.940
It can be centrally managed, so, you know, your IT department can click a button and update everyone's system trust store.

00:17:57.940 --> 00:18:04.740
So, yeah, there's a lot of really good benefits to using the system trust store instead of this Python managed file.

00:18:04.740 --> 00:18:07.620
And this, this article kind of goes into the nitty gritty of that.

00:18:07.620 --> 00:18:22.920
But the big announcement for this project was that pip actually, with the version 22.2 release, added support, experimental support for using this library instead of certify to verify HTTPS.

00:18:22.920 --> 00:18:30.040
And so what this will allow people to do is try out trust store optionally, right, instead of switching it to a default.

00:18:30.400 --> 00:18:39.000
And if they're experiencing this class of errors with, you know, installing Python packages or upgrading Python packages, they can use one flag.

00:18:39.000 --> 00:18:40.920
It's, I believe it's listed.

00:18:40.920 --> 00:18:44.220
Either way, it would be listed here.

00:18:44.220 --> 00:18:47.840
So you do --use dash feature equals trust store.

00:18:47.840 --> 00:18:52.940
And that will, you'll recognize that use feature flag for the 2020 resolver.

00:18:52.940 --> 00:18:54.720
That's another feature flag that they use.

00:18:54.720 --> 00:18:57.260
So this trust store feature flag is the same thing.

00:18:57.580 --> 00:19:03.120
It will, if trust store is installed on your system, it will use that instead of certify.

00:19:03.120 --> 00:19:07.880
And it allows you to get around the errors that you can see when you have a corporate network involved.

00:19:07.880 --> 00:19:12.920
So yeah, this is kind of the big thing that I'm really excited about.

00:19:12.920 --> 00:19:19.500
And we're really hoping that in the future we can add this to Python, maybe make this a default for requests.

00:19:19.500 --> 00:19:28.660
Like there's a whole bunch of different really interesting things that we can go forward with if we can prove that, hey, this is useful to these users, right?

00:19:28.660 --> 00:19:29.100
Yeah.

00:19:29.100 --> 00:19:29.560
Yeah.

00:19:29.560 --> 00:19:30.020
Fantastic.

00:19:30.020 --> 00:19:37.880
So if I say --use feature equals trust store, do I have to previously have pip installed trust store or something like that?

00:19:38.160 --> 00:19:40.280
You do have to have previously installed trust store.

00:19:40.280 --> 00:19:43.040
So the package is relatively new.

00:19:43.040 --> 00:19:44.160
It's less than a year old.

00:19:44.500 --> 00:19:53.000
And so to ensure that we're able to keep things moving because it's experimental, we didn't want to bundle with pip.

00:19:53.000 --> 00:19:54.540
Their release cycle is a lot longer.

00:19:55.040 --> 00:20:04.940
I collaborated with Su Ping for a good long while on this and making sure that everything was all good to go for pip since shipping with pip is a big deal.

00:20:04.940 --> 00:20:08.480
So yeah, it's been a long, a long road.

00:20:08.480 --> 00:20:10.940
So yeah, this looks super useful.

00:20:10.940 --> 00:20:16.080
Kim out in the audience says, I'd love to never need verify false again on my internal network.

00:20:16.080 --> 00:20:17.940
Seth's mission is fantastic.

00:20:17.940 --> 00:20:18.540
Yeah.

00:20:18.540 --> 00:20:19.100
Yeah.

00:20:19.100 --> 00:20:21.240
I'm very grateful that this work is going on.

00:20:21.240 --> 00:20:23.680
And I hope that that's true because it drives me nuts.

00:20:24.000 --> 00:20:26.420
Is this something you have to deal with internally as well, Brian?

00:20:26.420 --> 00:20:27.060
Yeah.

00:20:27.060 --> 00:20:36.440
Cause we've got, we, you know, internal network, corporate firewall, we've got, the trust stores and on windows systems.

00:20:36.440 --> 00:20:45.500
And, it's, it is an issue and we don't, so a lot of, I mean, one of the ways we get around it is to have internal pipe AI.

00:20:45.500 --> 00:20:47.740
We've got, we've got a mirror inside.

00:20:47.740 --> 00:20:48.300
Yeah.

00:20:48.300 --> 00:20:51.420
Um, but, sometimes I want to try out stuff that's not there.

00:20:51.420 --> 00:20:55.400
So, having, having something like this work, would be good.

00:20:55.400 --> 00:20:57.840
Um, but it's not just pipe AI, it's other places too.

00:20:57.840 --> 00:21:05.960
It's, so yeah, the entire, entire outside internet is usually impacted when you, when you have that sort of situation of a corporate proxy.

00:21:06.100 --> 00:21:06.780
So, yeah.

00:21:06.780 --> 00:21:13.460
And I, I'd like to be able to, and that, so I'm, I'm guessing that this trust store, I mean, using it within pip, it'd be great for a lot of people to try it.

00:21:13.460 --> 00:21:21.020
But, trying out this trust store for applications that depend on, trusted, sites that would be helpful as well.

00:21:21.020 --> 00:21:21.280
Right?

00:21:21.280 --> 00:21:22.140
Yeah.

00:21:22.140 --> 00:21:34.360
So actually the documentation, if you're trying to use it manually with other things, we support your lib3 AIo HTTP requests and I'm sure it'll work with other libraries as well.

00:21:34.360 --> 00:21:34.840
Awesome.

00:21:34.840 --> 00:21:36.320
Like HTTP X.

00:21:36.320 --> 00:21:36.960
Yeah.

00:21:36.960 --> 00:21:45.820
It, it should work with any, anything that uses the standard SSL context, like API, as long as it can use that API, it should work with it.

00:21:45.820 --> 00:21:46.620
This is great.

00:21:46.620 --> 00:21:47.220
Awesome.

00:21:47.220 --> 00:21:47.840
Very cool.

00:21:48.540 --> 00:21:49.200
Nice work.

00:21:49.200 --> 00:21:50.980
Thanks for coming on and sharing it.

00:21:50.980 --> 00:21:53.880
Hopefully it makes corporate Python a little better.

00:21:53.880 --> 00:22:00.160
You know, there's, this was long ago when I first started the podcast, this one and talk Python.

00:22:00.160 --> 00:22:08.040
There was a lot of debate or discussion, I guess, whether Python was an appropriate enterprise software type of language.

00:22:08.040 --> 00:22:11.600
You know, I think that debate is largely over.

00:22:11.800 --> 00:22:16.900
And I think the reason it's over is because the data scientists said it's, this is not a debate.

00:22:16.900 --> 00:22:18.760
Do you want us to do the job or not do the job?

00:22:18.760 --> 00:22:19.420
Uh, do the job.

00:22:19.420 --> 00:22:19.740
That's right.

00:22:19.740 --> 00:22:19.920
Okay.

00:22:19.920 --> 00:22:20.920
Well, so let's use Python.

00:22:20.920 --> 00:22:32.140
And then it kind of spread from there internally as a through acceptance that said, like now that it does live in these environments that Brian described much more frequently, it's really important to have the support.

00:22:32.140 --> 00:22:32.520
Yeah.

00:22:32.520 --> 00:22:41.060
It's actually really funny because, so to put this in perspective for Java folks, this is like Java trust stores, is like certify.

00:22:41.180 --> 00:22:46.220
Where you have this manual thing that shipped with Java as opposed to just using the system.

00:22:46.220 --> 00:22:54.020
And I, I got that comment on, lobsters or something that was talking about this article and they're just like, wow, this is like getting rid of Java trust stores.

00:22:54.020 --> 00:22:54.740
This is great.

00:22:54.740 --> 00:22:55.620
I'm like, okay.

00:22:55.620 --> 00:22:56.540
I didn't even know that existed.

00:22:56.540 --> 00:22:57.220
That's right.

00:22:57.220 --> 00:22:58.580
We really hate it over there.

00:22:58.580 --> 00:23:00.000
And we hate this.

00:23:00.000 --> 00:23:00.900
So this is great.

00:23:00.900 --> 00:23:03.280
I was like, okay, thank you.

00:23:03.280 --> 00:23:04.420
Cool.

00:23:04.420 --> 00:23:04.800
All right.

00:23:05.300 --> 00:23:15.700
Well, before we get to the next topic, Brian, let's talk about our sponsor for this week and many weeks this year, Microsoft for startups founders hub.

00:23:15.940 --> 00:23:21.520
If you are starting a business, doing a startup, you are a little ways going, or you're just thinking about it.

00:23:21.520 --> 00:23:30.980
You should really check this out because Microsoft for startups set out to understand the challenges that we all have creating startups in this digital cloud age.

00:23:30.980 --> 00:23:35.420
And they created Microsoft for startups, founders hub, help solve many of them.

00:23:35.420 --> 00:23:51.480
So that includes getting cloud resources, GitHub credits, other credits like, AI credits, for example, from open AI that you can run your code on, but maybe even more important than that.

00:23:51.480 --> 00:23:59.880
It has support for connecting you with mentors and experts to make sure that you go in the right direction when you're young and getting started.

00:23:59.880 --> 00:24:17.180
So, so often you see the successful startups being in places where there are a lot of mentors, where there's these networks and people have connections to get funding, the marketing side of things, the product market fit, all of those things are super hard.

00:24:17.180 --> 00:24:29.620
So if you are part of Microsoft for startups founders hub, you'll have access to their mentorship network, which gives you access to hundreds of mentors across a range of disciplines, like the ones I just named and more, as well as.

00:24:29.620 --> 00:24:37.760
So that's up to a little bit over a hundred thousand dollars worth of credits and Azure and GitHub and open AI and other places.

00:24:37.760 --> 00:24:41.880
As you go through certain checkpoints, as you sort of grow with this program.

00:24:41.880 --> 00:24:45.520
So really tons of super support that you can get for your startup.

00:24:45.520 --> 00:24:47.520
It doesn't have to be investor backed.

00:24:47.520 --> 00:24:50.560
It doesn't have to be third party verified to participate.

00:24:50.720 --> 00:24:56.040
All you have to do is go to pythonbytes.fm/founders hub 2022 apply.

00:24:56.040 --> 00:24:58.820
And if you accept it, you'll get all of this support from them.

00:24:58.820 --> 00:25:02.400
So make your idea a reality with Microsoft for startups founders hub.

00:25:02.400 --> 00:25:03.760
Fly today for free.

00:25:03.760 --> 00:25:04.540
Get in.

00:25:04.540 --> 00:25:05.600
You'll get tons of support.

00:25:05.600 --> 00:25:06.600
So very nice.

00:25:06.600 --> 00:25:08.120
Also nice, Brian.

00:25:08.120 --> 00:25:08.900
Lots.

00:25:08.900 --> 00:25:10.320
Tell us about these lots.

00:25:10.320 --> 00:25:12.020
Lots and command lines.

00:25:12.380 --> 00:25:15.480
So I, I like command line stuff.

00:25:15.480 --> 00:25:27.900
And actually with the thanks of Will McCoogan, we've got a lot of people excited about CLIs, but apparently Bob is also Bob Bilderbos from the PyBytes duo.

00:25:27.900 --> 00:25:30.600
So I like this article.

00:25:30.600 --> 00:25:33.060
So actually kind of skimmed the article.

00:25:33.060 --> 00:25:33.600
Sorry, Bob.

00:25:34.140 --> 00:25:42.540
But making plots with your terminal with plot, plot text, plot, it's if you install it, plot text.

00:25:42.540 --> 00:25:46.140
I can see the typo squatting happening right now.

00:25:46.140 --> 00:25:46.280
Yeah.

00:25:46.280 --> 00:25:49.480
So if you pip install it, there's one T in the middle.

00:25:49.480 --> 00:25:51.900
So it's P-L-O-T-E-X-T.

00:25:51.900 --> 00:26:02.200
So, so he was doing a, so he did, had some code where he was looking at plotting the frequency of their blog articles on the terminal.

00:26:02.680 --> 00:26:05.820
Just, so he's using some of their own data to plot stuff.

00:26:05.820 --> 00:26:11.460
And he came up with like, it's kind of cool walking through how he grabbed the data and everything.

00:26:11.460 --> 00:26:15.820
But I was looking at this plot going, oh, this is a pretty nice looking plot.

00:26:15.820 --> 00:26:19.980
I mean, it's totally blocky, of course, but, but it's a bar chart.

00:26:19.980 --> 00:26:21.240
So it's supposed to be blocky.

00:26:21.240 --> 00:26:22.560
So that's okay.

00:26:22.560 --> 00:26:27.540
And so then I went over and looked at this, this package that was plot text.

00:26:27.540 --> 00:26:30.040
And it's cool.

00:26:30.040 --> 00:26:32.160
Look at all these awesome plots.

00:26:32.440 --> 00:26:36.020
Um, I was looking at some of the various things you can do.

00:26:36.020 --> 00:26:41.520
It's got basic plots for, you know, just like sine waves and things like that.

00:26:41.520 --> 00:26:46.280
But you can also do fill in plots and then, multicolor.

00:26:46.280 --> 00:26:47.780
This is kind of a lot.

00:26:47.780 --> 00:26:50.000
You can kind of cool stuff you can do on the command line.

00:26:50.100 --> 00:26:54.820
And then even data streams, which I was, look at that.

00:26:54.820 --> 00:26:57.700
It's a data stream going on in a plot in your terminal.

00:26:57.700 --> 00:26:58.960
It's pretty great.

00:26:58.960 --> 00:27:00.240
Uh, images even.

00:27:00.240 --> 00:27:02.140
So there's a cat image.

00:27:02.140 --> 00:27:04.260
You can do low cats all day long.

00:27:04.560 --> 00:27:05.020
Yeah.

00:27:05.020 --> 00:27:08.940
Um, people that put together those examples knew what the internet wants.

00:27:08.940 --> 00:27:10.640
And to do cat pictures.

00:27:10.640 --> 00:27:11.400
Yeah.

00:27:11.400 --> 00:27:14.100
So, and then even, subplots.

00:27:14.260 --> 00:27:19.640
So the, the first example we saw, it, it, it has a, it has kind of all this, this, it's

00:27:19.640 --> 00:27:22.380
not actually that bad of, the interface.

00:27:22.380 --> 00:27:26.880
It looks pretty, you know, it's tedious to put together plots anyway, but this isn't

00:27:26.880 --> 00:27:27.280
too bad.

00:27:27.400 --> 00:27:32.420
But that, that cover image that we saw is a, is not a combination of images.

00:27:32.420 --> 00:27:35.360
That's one plot that with subplots in it.

00:27:35.360 --> 00:27:36.440
So I see.

00:27:36.440 --> 00:27:37.160
That's cool.

00:27:37.160 --> 00:27:41.680
So within one terminal window, you can do almost like a dashboard view with different plots and

00:27:41.680 --> 00:27:43.240
they could probably can be updating live.

00:27:43.240 --> 00:27:44.200
And yeah.

00:27:44.200 --> 00:27:44.820
Yeah.

00:27:44.820 --> 00:27:46.600
So this is pretty exciting.

00:27:46.600 --> 00:27:48.740
I like it.

00:27:48.740 --> 00:27:53.640
Uh, so anyway, that was just, I just wanted to say, Hey, if you want to plot on the command

00:27:53.640 --> 00:27:54.600
line, you can use this.

00:27:54.860 --> 00:27:58.920
I'm loving this terminal renaissance is so fun.

00:27:58.920 --> 00:28:03.040
So yeah, we make me, make us feel like a hackers again, you know?

00:28:03.040 --> 00:28:05.480
So it does absolutely make you feel like a hacker.

00:28:05.480 --> 00:28:06.440
I love it.

00:28:06.440 --> 00:28:07.560
It's so good.

00:28:07.560 --> 00:28:10.140
So, all right.

00:28:10.140 --> 00:28:10.920
On to the next item.

00:28:10.920 --> 00:28:11.500
Yeah.

00:28:11.500 --> 00:28:17.960
Just, hadn't really planned to talk about this, but I just yesterday did an episode with

00:28:17.960 --> 00:28:21.660
Will McGugan, seven lessons from building a modern 2E framework.

00:28:21.660 --> 00:28:23.680
Brian, you covered that article last week on this show.

00:28:23.680 --> 00:28:27.840
So I reached out to Will and said, Hey, we should absolutely cover this stuff.

00:28:27.840 --> 00:28:29.400
Uh, and like a deep dive.

00:28:29.400 --> 00:28:30.980
So, Oh, I can't wait to listen.

00:28:30.980 --> 00:28:31.620
This is great.

00:28:31.620 --> 00:28:32.960
People can go check that out as well.

00:28:32.960 --> 00:28:33.500
All right.

00:28:33.500 --> 00:28:37.120
But let's talk about one of my very favorite things.

00:28:37.120 --> 00:28:38.380
HTMX.

00:28:38.380 --> 00:28:43.480
If people are not familiar with HTMX, you really owe it to yourself to check this out.

00:28:43.480 --> 00:28:46.940
It's what the web should have been forever, but it wasn't for some reason.

00:28:47.020 --> 00:28:49.960
It's like it stalled in the late mid nineties.

00:28:49.960 --> 00:28:50.480
I don't know.

00:28:50.480 --> 00:28:54.360
And, you know, hyperlinks and forms are the only things that can make requests.

00:28:54.360 --> 00:28:57.120
You can only, click on them to make it happen.

00:28:57.120 --> 00:28:58.060
And so on.

00:28:58.140 --> 00:29:02.660
Why should the entire screen have to be replaced every interaction and all those things.

00:29:02.660 --> 00:29:04.880
So HTMX is awesome.

00:29:04.880 --> 00:29:10.220
You can just put in little fragments of declarative code and it, it does all the cool work.

00:29:10.220 --> 00:29:11.360
You can have a class on it.

00:29:11.360 --> 00:29:13.920
People want to check that out, but that's not the topic of today.

00:29:13.920 --> 00:29:15.840
The topic is template fragments.

00:29:15.840 --> 00:29:20.880
So Carson Gross over there wrote this article, this essay called template fragments.

00:29:20.880 --> 00:29:26.080
It said, one way you might consider doing this is in HTMX, you very frequently have to first

00:29:26.080 --> 00:29:26.940
show the page.

00:29:26.940 --> 00:29:31.200
And then as little sections of an update, he goes back to the server and says, I just need

00:29:31.200 --> 00:29:34.180
the code, the HTML block that goes into this fragment here.

00:29:34.180 --> 00:29:36.000
Cause somebody moused over something else.

00:29:36.000 --> 00:29:38.420
So refresh it's related item or whatever.

00:29:38.420 --> 00:29:43.900
He's a big fan of this thing called locality of behavior design principle, where instead of

00:29:43.900 --> 00:29:48.700
having a bunch of pieces that cling together and reassemble themselves, like if it could just

00:29:48.700 --> 00:29:50.220
all be right there, wouldn't that be great?

00:29:50.220 --> 00:29:55.900
So he says, normally the way that you would have to do this is you would have to have your

00:29:55.900 --> 00:29:58.700
full HTML and then a little subsection.

00:29:58.700 --> 00:30:06.220
And then that subsection has the optional element, but some frameworks, some template libraries allow

00:30:06.220 --> 00:30:07.900
you to define a fragment.

00:30:07.900 --> 00:30:13.880
And then when the code is requested on the server, it can either show the whole thing or just peel

00:30:13.880 --> 00:30:17.880
that fragment out of the HTML, but you don't have to parse it into a bunch of small files.

00:30:17.880 --> 00:30:18.280
Cool.

00:30:18.280 --> 00:30:18.520
Huh?

00:30:18.520 --> 00:30:21.000
It's really useful if there's no reuse.

00:30:21.000 --> 00:30:25.000
Like if the only reason you would make that little fragment is so that you could return it

00:30:25.000 --> 00:30:25.400
separately.

00:30:25.400 --> 00:30:30.680
This is great because basically it means you can just write the page once and it's, it can

00:30:30.680 --> 00:30:32.500
interact with different data, different elements.

00:30:32.680 --> 00:30:37.140
If for some reason that fragment worth being used in multiple places, all of a sudden it's like code

00:30:37.140 --> 00:30:38.840
duplication and that's not ideal.

00:30:38.840 --> 00:30:44.840
But so we talked about this and Hey, there's some known, implementations of this.

00:30:44.840 --> 00:30:47.880
Apparently Django has the render block extension.

00:30:47.880 --> 00:30:51.600
I created the Jinja partials and chameleon partials, which I'm not really sure.

00:30:51.680 --> 00:30:55.760
I'm thinking I might actually take them out now that there's something for Jinja better,

00:30:55.760 --> 00:30:56.880
which I'm about to talk about.

00:30:56.880 --> 00:31:02.280
But nonetheless, those are kind of sort of allow this, but more, more in the second descriptive

00:31:02.280 --> 00:31:04.860
way where you have like a fragment that's separate, but included.

00:31:04.860 --> 00:31:10.980
But I was talking with Sergey of Rixies, it says between, he said between Jinja2 fragments

00:31:10.980 --> 00:31:17.160
and Michael's my, Jinja partials, htmx plus flask is so awesome.

00:31:17.160 --> 00:31:23.560
So he created this library called Jinja2 fragments, which does exactly what I described.

00:31:23.560 --> 00:31:28.380
So in Jinja, you have blocks, like you might have your main HTML and you say, here's a block of main content

00:31:28.380 --> 00:31:29.560
with his library.

00:31:29.560 --> 00:31:36.440
What you can do is you can say either just render the template or you can now render block and name

00:31:36.440 --> 00:31:38.000
just part of your Jinja template.

00:31:38.000 --> 00:31:40.640
And that part comes back with the data you supply to it.

00:31:40.800 --> 00:31:41.420
That's pretty awesome.

00:31:41.420 --> 00:31:41.600
Right?

00:31:41.600 --> 00:31:45.300
Like this, this one paragraph is the whole response from the server.

00:31:45.300 --> 00:31:47.860
If you call render block instead of render template.

00:31:47.860 --> 00:31:50.160
This is, yeah, this is super great.

00:31:50.160 --> 00:31:56.940
Honestly, I, on Twitter, I, every time I see htmx, I'm just like, I am so like prepared to write a website

00:31:56.940 --> 00:32:01.520
because I've not had the use case for a while, but I'm very excited for the next time.

00:32:01.520 --> 00:32:02.000
I will have.

00:32:02.000 --> 00:32:03.620
I exactly the same.

00:32:03.620 --> 00:32:06.280
I've worked on projects that have been around for six or seven years.

00:32:06.280 --> 00:32:10.620
I'm like, if I rewrite this thing, it's getting htmx all over it, but I just can't bring

00:32:10.620 --> 00:32:12.280
myself quite, quite to do it.

00:32:12.280 --> 00:32:13.980
But yeah, it's, it's so good.

00:32:13.980 --> 00:32:15.160
One day.

00:32:15.160 --> 00:32:18.580
One comment, a couple of comments from the, the chat.

00:32:18.580 --> 00:32:24.740
Vincent from, com code says htmx is the bees knees and that com code uses it a whole

00:32:24.740 --> 00:32:25.040
bunch.

00:32:25.040 --> 00:32:26.440
I am not surprised.

00:32:26.440 --> 00:32:26.900
Fantastic.

00:32:26.900 --> 00:32:27.700
It's awesome.

00:32:28.040 --> 00:32:28.180
Yeah.

00:32:28.180 --> 00:32:28.680
Yeah.

00:32:28.680 --> 00:32:28.680
Yeah.

00:32:28.680 --> 00:32:33.980
If I, any website I create after knowing about htmx is likely going to be using htmx.

00:32:33.980 --> 00:32:39.600
If you thought the answer was view.js or react or something like that, you may really, really,

00:32:39.600 --> 00:32:41.140
really want to check this out first.

00:32:41.500 --> 00:32:45.440
Well, especially if you're somebody like me that I'm like, yeah, I want to, I want to put

00:32:45.440 --> 00:32:46.880
this interactive stuff in here.

00:32:47.040 --> 00:32:52.120
I don't, I don't really feel I'm not an expert in JavaScript though.

00:32:52.120 --> 00:32:53.620
So I'm not sure.

00:32:53.620 --> 00:32:57.640
And so, but I, but I do know somebody that knows a lot about htmx.

00:32:57.640 --> 00:33:01.880
So you might, you might know someone you're venturing very close to getting me off onto like

00:33:01.880 --> 00:33:04.040
a very long rant about htmx.

00:33:04.040 --> 00:33:08.960
But it's so good because even if you know JavaScript, it wouldn't it be better to not

00:33:08.960 --> 00:33:10.800
have to think about now I'm running client code.

00:33:10.800 --> 00:33:11.800
Now I'm running server code.

00:33:11.800 --> 00:33:14.500
Now I'm running the APIs to connect the client code to the server code.

00:33:14.500 --> 00:33:15.480
And this one's in this language.

00:33:15.480 --> 00:33:18.200
It knows this, that one's in that language in this location.

00:33:18.200 --> 00:33:22.500
It knows that like in htmx, you just write it all in one place in one language with the

00:33:22.500 --> 00:33:27.220
same context and security model and everything access to the database, for example.

00:33:27.220 --> 00:33:29.080
And then you just do what you need to do.

00:33:29.080 --> 00:33:30.220
It's, it's perfect.

00:33:30.220 --> 00:33:33.920
Well, and it's not really just about thinking about two languages.

00:33:33.920 --> 00:33:34.280
either.

00:33:34.280 --> 00:33:39.240
It's, it's somebody, there's a lot of people like me that already have to think in two

00:33:39.240 --> 00:33:39.580
languages.

00:33:39.580 --> 00:33:41.480
I'm thinking in C++ and Python.

00:33:41.480 --> 00:33:46.060
So I was thinking about it in a third language or a fourth language.

00:33:46.060 --> 00:33:49.840
That's, it's like, you know, come on having a place to stop plus.

00:33:49.840 --> 00:33:50.340
Yeah.

00:33:50.340 --> 00:33:50.800
Yeah.

00:33:50.800 --> 00:33:51.120
Yeah.

00:33:51.120 --> 00:33:56.920
A final, final comment I'll make on this is even people are using node JS like htmx, where

00:33:56.920 --> 00:33:57.680
it's the same language.

00:33:57.680 --> 00:34:00.900
It's like, it's also just about the context and location switch.

00:34:00.900 --> 00:34:01.500
Oh yeah.

00:34:01.500 --> 00:34:03.480
That's, I didn't hear, hadn't heard that.

00:34:03.540 --> 00:34:04.040
That's pretty cool.

00:34:04.040 --> 00:34:04.520
Yeah.

00:34:04.520 --> 00:34:06.720
Seth, it sounds like you were going to say something.

00:34:06.720 --> 00:34:07.920
Maybe I'll let you have the last word here.

00:34:07.920 --> 00:34:08.480
Oh no.

00:34:08.480 --> 00:34:12.760
I was honestly just going to say that like the more we can stay in HTML, the better because

00:34:12.760 --> 00:34:14.260
you have to know HTML.

00:34:14.260 --> 00:34:15.700
So you might as well stay in it.

00:34:15.700 --> 00:34:15.880
Right?

00:34:15.880 --> 00:34:16.680
Yeah, absolutely.

00:34:16.680 --> 00:34:17.160
Absolutely.

00:34:17.160 --> 00:34:19.540
So well done, Sergei.

00:34:19.540 --> 00:34:22.380
Check out his Jinja 2 fragments framework.

00:34:22.380 --> 00:34:24.040
It's, it is super new.

00:34:24.040 --> 00:34:29.460
Like, I don't know when it got released, but a couple of days, these are like two and three

00:34:29.460 --> 00:34:30.840
days on all the commits here.

00:34:30.840 --> 00:34:32.400
I was going to say that long stream.

00:34:32.400 --> 00:34:32.940
Very, very new.

00:34:32.940 --> 00:34:34.400
Two, three days.

00:34:34.400 --> 00:34:34.920
Yeah.

00:34:34.920 --> 00:34:35.780
Well done.

00:34:35.780 --> 00:34:36.160
Well done.

00:34:36.160 --> 00:34:36.700
All right.

00:34:36.700 --> 00:34:39.560
Seth, over to you for the final one.

00:34:39.560 --> 00:34:40.400
Sure thing.

00:34:40.400 --> 00:34:40.880
Yeah.

00:34:40.960 --> 00:34:46.460
This, this article was announcing something that's been getting worked on for a while,

00:34:46.460 --> 00:34:50.080
which is a generic generators for salsa three.

00:34:50.080 --> 00:34:57.800
So what you're seeing there, SL, SLSA, that stands for, if I can remember, it is supply chain

00:34:57.800 --> 00:35:01.800
levels for artifacts, levels for software artifacts.

00:35:01.800 --> 00:35:05.400
So SLSA, and you pronounce it salsa.

00:35:05.400 --> 00:35:09.320
And of course, it's essentially a great, great way to say that acronym.

00:35:09.320 --> 00:35:09.940
Yeah.

00:35:09.940 --> 00:35:10.180
Right.

00:35:10.400 --> 00:35:12.920
Makes you hungry every time, which is the best part.

00:35:12.920 --> 00:35:19.020
Uh, but yeah, it's, it's basically a set of tools, and standards to attest and verify

00:35:19.020 --> 00:35:21.020
the provenance of artifacts.

00:35:21.020 --> 00:35:24.180
So essentially, where did this thing come from?

00:35:24.180 --> 00:35:29.860
This file, this wheel, this jar, depending on what, like ecosystem independent, whatever

00:35:29.860 --> 00:35:32.360
thing, whatever artifact you're building, where did it come from?

00:35:32.360 --> 00:35:33.340
How was it built?

00:35:33.340 --> 00:35:39.380
Um, and it, so it uses a whole bunch of different like cryptographical primitives and, open IDC,

00:35:39.380 --> 00:35:41.000
which is basically magic.

00:35:41.000 --> 00:35:48.000
Um, and it basically allows you to prove, in effect, okay, this was built from this specific

00:35:48.000 --> 00:35:51.000
GitHub repository, this commit, this tag.

00:35:51.000 --> 00:35:59.000
Um, and someone can then later take this file, this artifact that got built and then verify that that was the case.

00:35:59.000 --> 00:36:08.620
And so this is kind of like in the future, hopefully be used as like a defense against maybe like stolen credentials on the Python package index.

00:36:08.620 --> 00:36:09.620
That would never happen.

00:36:09.620 --> 00:36:10.240
That would never happen.

00:36:10.240 --> 00:36:11.560
That, that would, that would never happen.

00:36:11.560 --> 00:36:11.720
Right.

00:36:11.720 --> 00:36:12.840
That's never happened.

00:36:12.840 --> 00:36:14.460
And that would, that has never happened.

00:36:14.460 --> 00:36:17.500
Other than at the time of the recording never has happened, I would say.

00:36:17.500 --> 00:36:21.600
Um, so yeah, it, it gives a good defense against this.

00:36:21.600 --> 00:36:21.800
Right.

00:36:21.800 --> 00:36:31.420
Cause if you, let's say you have a package and the Python package index knows that this package came from, you know, github.com/sethmlarson/whatever.

00:36:31.420 --> 00:36:31.680
Right.

00:36:31.680 --> 00:36:37.140
And then in the future, it received something that doesn't come from that GitHub repository.

00:36:37.140 --> 00:36:39.960
It can flag that and say, Hey, this isn't right.

00:36:39.960 --> 00:36:45.420
Like this didn't come from the place that it came from before or wherever it's, you know, supposed to come from.

00:36:45.420 --> 00:36:48.720
Uh, and the fact that this is generic is the big deal.

00:36:48.720 --> 00:36:54.680
The part that ties us back to Python is that you can use it for wheel files and source distributions.

00:36:54.680 --> 00:36:56.300
You can sign like anything.

00:36:56.300 --> 00:37:01.220
Um, and so for example, one of the Python projects that is featured in here is your lives three.

00:37:01.220 --> 00:37:05.480
Um, I've been trying to get into this and it's been really successful.

00:37:05.480 --> 00:37:13.360
And, but your lip three now does this, and you can actually verify that it came from a specific repo and that the wheel was came from a specific tag.

00:37:13.360 --> 00:37:15.000
And yeah, it's, it's really interesting.

00:37:15.000 --> 00:37:17.360
And this ecosystem is like just getting started.

00:37:17.360 --> 00:37:24.420
Uh, and so if you're like interested in anything about like supply chain security and all of that, this is like a great place to start.

00:37:24.420 --> 00:37:26.660
Doing some learning about what the future might look like.

00:37:26.660 --> 00:37:27.620
Yeah, this is great.

00:37:27.620 --> 00:37:35.560
I, when I first saw this, I thought, okay, this is cool, but how does that really help act against somebody sabotaging a package?

00:37:35.560 --> 00:37:44.180
But then again, if you think, and I realize if you think back to what happened with some of those other packages, somebody got ahold of the, the PI PI account, not the GitHub account.

00:37:44.180 --> 00:37:49.300
And they just published a new version directly, not through the CI, right?

00:37:49.300 --> 00:37:49.960
Right.

00:37:49.960 --> 00:37:50.400
Yeah.

00:37:50.420 --> 00:37:55.380
So this is making, it just makes the amount of things that need to get compromised even larger.

00:37:55.380 --> 00:37:55.860
Right.

00:37:55.860 --> 00:37:56.580
Like, right.

00:37:56.580 --> 00:37:56.940
It closed.

00:37:56.940 --> 00:37:57.480
No longer.

00:37:57.480 --> 00:38:01.880
Do you need to only compromise the email account on PI PI?

00:38:01.880 --> 00:38:03.900
You have to also compromise GitHub.

00:38:03.900 --> 00:38:10.560
And then if you have, you know, GitHub environments configured, you need to compromise a second account to like review the deployment.

00:38:10.560 --> 00:38:16.920
And so it just makes it even harder to actually get that attack off essentially.

00:38:16.920 --> 00:38:18.240
Yeah.

00:38:18.400 --> 00:38:25.780
And if you had to publish the actual vulnerability to a popular GitHub repository to trigger it, it would be discovered sooner.

00:38:25.780 --> 00:38:26.320
Right.

00:38:26.320 --> 00:38:30.000
Because people are like, oh, what's, oh, that's, that's unusual.

00:38:30.000 --> 00:38:33.020
Who has made this, that they've made this commit.

00:38:33.020 --> 00:38:36.600
And now it's doing this URL thing over to hacks or.com.

00:38:36.740 --> 00:38:37.580
Right.

00:38:37.580 --> 00:38:41.120
Like that's, that's just another out in public thing.

00:38:41.120 --> 00:38:47.720
Whereas if the direct account gets attacked, somebody can just use twine or something directly to push it a bad wheel up.

00:38:47.720 --> 00:38:48.360
Yeah, exactly.

00:38:48.360 --> 00:38:48.640
Yeah.

00:38:48.640 --> 00:38:50.160
No more pushing bad wheels.

00:38:50.160 --> 00:38:53.060
You have to go through so many different hoops just to do something.

00:38:53.060 --> 00:38:54.940
You need to flatten those bad wheels.

00:38:54.940 --> 00:38:55.980
Yes.

00:38:55.980 --> 00:38:57.480
Got to inspect them too.

00:38:57.480 --> 00:38:59.360
Exactly.

00:38:59.360 --> 00:39:00.040
All right.

00:39:00.040 --> 00:39:00.360
Awesome.

00:39:00.360 --> 00:39:01.880
This is, this is good stuff.

00:39:01.880 --> 00:39:04.360
Well, Brian, that's no.

00:39:04.360 --> 00:39:05.020
Do you have any more?

00:39:05.020 --> 00:39:05.820
No, that's all of them.

00:39:05.820 --> 00:39:07.440
Do you have any extras for us?

00:39:07.440 --> 00:39:08.480
I do.

00:39:08.480 --> 00:39:11.500
Although I'm going to try to make it quick because now I'm hungry for some salsa.

00:39:11.500 --> 00:39:17.280
So I wanted to, I'm like super excited for this upcoming weekend.

00:39:17.280 --> 00:39:18.480
I can't believe it.

00:39:18.480 --> 00:39:24.600
So on Saturday, on Saturday, September 10th, I'll be in September 10th.

00:39:24.600 --> 00:39:26.020
I will be in San Francisco.

00:39:26.020 --> 00:39:29.960
And I've got two events going on at Pi Bay.

00:39:29.960 --> 00:39:32.180
So Pi Bay, awesome conference.

00:39:32.180 --> 00:39:35.500
I haven't been there before, but you've been there last year or something like that.

00:39:35.500 --> 00:39:36.120
Last year.

00:39:36.120 --> 00:39:37.240
And I absolutely loved it.

00:39:37.240 --> 00:39:42.160
I would go this year if I wasn't on single parent duty and had kids that had to go to school.

00:39:42.160 --> 00:39:45.020
So I'm giving two, two events.

00:39:45.020 --> 00:39:48.280
So one of them is a sharing is carrying Pi test fixture edition.

00:39:48.280 --> 00:39:50.280
I'm going to talk about building.

00:39:50.280 --> 00:39:55.160
Actually, I'm just going to talk about packaging, but it's not really about packaging.

00:39:55.160 --> 00:39:57.420
It's about sharing fixtures with other people.

00:39:58.460 --> 00:40:02.940
And because I think that that's a bigger need than, than people realize.

00:40:02.940 --> 00:40:04.920
So anyway, love fixtures.

00:40:04.920 --> 00:40:05.860
We're going to talk about that.

00:40:05.860 --> 00:40:09.560
And then, and then I got asked to be on this experts panel.

00:40:09.560 --> 00:40:19.280
There's no with, we got Zach Hatfield Dodds, me, Andy Knight, which is, he's got a good automation

00:40:19.280 --> 00:40:19.580
pin.

00:40:19.840 --> 00:40:20.520
Automation Panda.

00:40:20.520 --> 00:40:21.000
That's right.

00:40:21.000 --> 00:40:24.240
Joshua Grant and Nishat Khan.

00:40:24.240 --> 00:40:26.080
So it should be a fun panel.

00:40:26.080 --> 00:40:28.760
And it's at seven o'clock at night.

00:40:28.760 --> 00:40:29.620
I'm like, wow.

00:40:29.620 --> 00:40:35.160
I think I really need to change my flight because I was planning on flying out at 8 a.m.

00:40:35.160 --> 00:40:35.880
the next day.

00:40:36.000 --> 00:40:37.080
And it's going to be tough.

00:40:37.080 --> 00:40:39.700
So, so that's going on next weekend.

00:40:39.700 --> 00:40:40.360
I'm pretty excited.

00:40:40.360 --> 00:40:40.880
Yeah.

00:40:40.880 --> 00:40:42.920
By length says, good luck on the talk, Brian.

00:40:42.920 --> 00:40:43.980
Oh, thanks.

00:40:43.980 --> 00:40:45.780
So how about you?

00:40:45.780 --> 00:40:46.500
Do you have any extras?

00:40:46.500 --> 00:40:48.080
I do.

00:40:48.080 --> 00:40:49.200
I do a bunch.

00:40:49.200 --> 00:40:50.560
I'll make them pretty quick.

00:40:50.560 --> 00:40:54.060
So Heroku, you know, the platform is a service place.

00:40:54.060 --> 00:40:59.720
They for 13 years or something have had a free plan where people can go and create what,

00:40:59.720 --> 00:41:00.400
what are they called?

00:41:00.400 --> 00:41:01.200
Dinos or something.

00:41:01.200 --> 00:41:01.860
I don't use.

00:41:01.860 --> 00:41:02.440
Yeah.

00:41:02.440 --> 00:41:03.520
Dinos.

00:41:03.640 --> 00:41:09.520
I don't use Heroku, so I don't know the terminology and how all the plans break down.

00:41:09.520 --> 00:41:15.180
But for a long time, they've had free plans, but now they are canceling them and you will

00:41:15.180 --> 00:41:20.100
either have to pay or delete your projects.

00:41:20.100 --> 00:41:22.660
So that's going to affect a lot of people.

00:41:22.660 --> 00:41:24.820
They have something like 13 million.

00:41:24.820 --> 00:41:26.560
What's the right number here?

00:41:26.560 --> 00:41:31.440
Claims, yeah, that it's been used by 13 to develop 13 million apps.

00:41:31.440 --> 00:41:35.620
So I bet many of those are free and are going to be suffering this.

00:41:35.620 --> 00:41:39.800
There's an interesting discussion on Y Combinator, so you can check that out.

00:41:39.800 --> 00:41:44.240
I'm sure it's very civil over there in the comments, as it always would be.

00:41:44.240 --> 00:41:44.900
Yes.

00:41:44.900 --> 00:41:45.440
Yeah.

00:41:45.440 --> 00:41:51.900
But basically, you know, Heroku was purchased by Salesforce for they claim, and it may be

00:41:51.900 --> 00:41:52.100
true.

00:41:52.180 --> 00:41:53.480
I'm sure that it is somewhat true.

00:41:53.480 --> 00:41:56.060
They want to cancel this because of fraud and abuse.

00:41:56.060 --> 00:42:00.440
It may be more that they have to spend so much money to fight the fraud and abuse that it's

00:42:00.440 --> 00:42:01.660
just not worth it to them.

00:42:01.660 --> 00:42:02.380
I don't know what it is.

00:42:02.380 --> 00:42:07.480
But however you land on the it's a good idea, a bad idea, it's going to cost money if you

00:42:07.480 --> 00:42:08.800
want to use this.

00:42:08.800 --> 00:42:10.620
And it's pretty pricey, by the way.

00:42:10.620 --> 00:42:14.360
Like, this change will roughly double the cost of a basic plan that uses Redis.

00:42:14.360 --> 00:42:20.980
And from like up to $50 a month, you start bringing in your Redis cache and your Postgres

00:42:20.980 --> 00:42:23.780
hosting and your dinos, and they all add up.

00:42:23.780 --> 00:42:25.640
And then you got to scale this one or that one, right?

00:42:25.980 --> 00:42:29.060
One of the reasons I'm not using it, but not the only reason.

00:42:29.060 --> 00:42:30.340
I just want a little more control as well.

00:42:30.340 --> 00:42:35.400
But anyway, so if you have a free thing running on Heroku, or you were thinking about it, you

00:42:35.400 --> 00:42:36.900
have to think again, find something else.

00:42:36.900 --> 00:42:41.400
There's actually at the bottom, there's a bunch of platforms of service things that I've never

00:42:41.400 --> 00:42:41.760
heard of.

00:42:41.760 --> 00:42:44.840
There's Porter, Railway, Render, Fly.io, and CleverCloud.

00:42:44.840 --> 00:42:47.040
All of these things vying for this business.

00:42:47.040 --> 00:42:48.160
They all look kind of interesting.

00:42:48.160 --> 00:42:50.100
I know nothing about them.

00:42:50.100 --> 00:42:50.680
You can check it out.

00:42:50.680 --> 00:42:54.600
I've seen Fly.io all over the place on Python, Twitter, at least.

00:42:54.600 --> 00:42:54.940
Yeah.

00:42:54.940 --> 00:42:55.560
Okay.

00:42:55.560 --> 00:42:59.640
So if I were personally picking one, I would check that one out first.

00:42:59.640 --> 00:43:02.600
But I don't know anything about any of them, to be honest with you.

00:43:02.600 --> 00:43:05.600
The last time I used Heroku was a long time ago.

00:43:05.600 --> 00:43:11.660
I'd like to see some real comparisons among some of these.

00:43:11.660 --> 00:43:16.680
If somebody's just saying, there's still a place for hobby projects.

00:43:16.680 --> 00:43:25.100
I want to try something out, or do something live, even as a high school app,

00:43:25.140 --> 00:43:25.940
or something like that.

00:43:25.940 --> 00:43:26.560
I know.

00:43:26.560 --> 00:43:27.560
Oh, good.

00:43:27.560 --> 00:43:29.040
You're going to show Python anywhere.

00:43:29.040 --> 00:43:29.680
I was going to.

00:43:29.680 --> 00:43:30.640
I got to find the right link.

00:43:30.640 --> 00:43:31.260
Here we go.

00:43:32.260 --> 00:43:34.700
So I think they still have a free tier.

00:43:34.700 --> 00:43:35.860
I think so.

00:43:35.860 --> 00:43:36.740
I don't know if they advertise it much.

00:43:36.740 --> 00:43:38.280
I think it's free.

00:43:38.280 --> 00:43:38.460
Yeah.

00:43:38.460 --> 00:43:41.900
The part that bothers me really isn't that it's...

00:43:41.900 --> 00:43:42.680
I don't...

00:43:42.680 --> 00:43:46.740
There's a comment in the chat about...

00:43:46.740 --> 00:43:51.420
It's hard to complain about people.

00:43:51.420 --> 00:43:54.520
It's a free service, so they can do whatever they want, right?

00:43:54.520 --> 00:43:54.960
Essentially.

00:43:54.960 --> 00:43:55.980
Yeah.

00:43:56.520 --> 00:43:57.520
Oh, there's that right.

00:43:57.520 --> 00:43:58.280
That's the right one.

00:43:58.280 --> 00:43:58.580
Yeah.

00:43:58.580 --> 00:44:04.940
However, the jump between free and $50 a month is a big jump.

00:44:04.940 --> 00:44:07.720
And that's my gripe about it.

00:44:07.720 --> 00:44:08.580
So anyway.

00:44:08.580 --> 00:44:09.080
Yep.

00:44:09.320 --> 00:44:14.940
Yeah, not to turn this into a recommendation, but yeah, I feel like a lot of the cloud services

00:44:14.940 --> 00:44:18.080
have really pushed how easy it is to deploy.

00:44:18.080 --> 00:44:23.340
Because I remember initially starting with Heroku, the ease of deployment was the big win

00:44:23.340 --> 00:44:24.140
for a lot of people.

00:44:24.140 --> 00:44:29.320
And so, yeah, a lot of cloud services where, you know, you pay for everything you use, but

00:44:29.320 --> 00:44:34.800
what you use ends up being a few cents a month, which is a lot more sumountable than $50 a month.

00:44:35.160 --> 00:44:39.260
So yeah, there's definitely a gap there, but there's not as much of a gap there as there

00:44:39.260 --> 00:44:39.820
was before.

00:44:39.820 --> 00:44:41.240
Yeah, for sure.

00:44:41.240 --> 00:44:45.440
Brian out in the audience says, at my last company, we had to disable our free tier due

00:44:45.440 --> 00:44:46.520
to crypto miners.

00:44:46.520 --> 00:44:48.160
Yeah, of course, I'm sure.

00:44:48.160 --> 00:44:53.200
And Kim also has something, yeah, stealing the computation there.

00:44:53.200 --> 00:44:53.840
But all right.

00:44:53.840 --> 00:44:58.940
Anyway, again, I didn't want to go too far down that one, but for sure, check out some of the

00:44:58.940 --> 00:44:59.540
options below.

00:44:59.540 --> 00:45:03.200
DigitalOcean and Linode are also really, really good options.

00:45:03.680 --> 00:45:07.380
This one, I'm full of rants today, potential rants.

00:45:07.380 --> 00:45:09.600
This one comes to us from Extreme Tech.

00:45:09.600 --> 00:45:14.920
White House, as in the US, bans paywalls on taxpayer-funded research.

00:45:14.920 --> 00:45:23.140
It has always felt super creepy and wrong that we have the NSF, which pays billions of dollars

00:45:23.140 --> 00:45:29.880
a year, millions for individual research projects, to come up with scientific research that all three

00:45:29.880 --> 00:45:32.800
of us and many people listening actually pay for.

00:45:32.800 --> 00:45:34.460
I'm glad to pay it.

00:45:34.460 --> 00:45:35.980
I think this is really important.

00:45:35.980 --> 00:45:37.420
It's important for the country.

00:45:37.420 --> 00:45:38.280
It's important for the world.

00:45:38.280 --> 00:45:45.560
And yet, those results get locked up behind really expensive for-pay scientific journals.

00:45:45.560 --> 00:45:46.200
Right?

00:45:46.260 --> 00:45:50.900
Like, you've got to pay $5,000 a year to subscribe to this journal so that you can read the article

00:45:50.900 --> 00:45:54.260
that, wait, we paid to create that and we can't even get access to it?

00:45:54.260 --> 00:46:00.520
So this article here is, the White House has updated federal rules to close a loophole that

00:46:00.520 --> 00:46:05.160
enabled journals to keep taxpayer-funded research behind a paywall, which I think is great.

00:46:05.160 --> 00:46:09.400
So if you're necessarily in the data science side, I think this might be relevant to you.

00:46:09.400 --> 00:46:09.800
Huh.

00:46:09.800 --> 00:46:10.320
Yeah.

00:46:10.320 --> 00:46:12.680
I'm curious how that's going to get implemented.

00:46:12.680 --> 00:46:13.260
Yeah.

00:46:13.260 --> 00:46:14.040
So, yeah.

00:46:14.040 --> 00:46:14.520
Me too.

00:46:14.520 --> 00:46:14.880
All right.

00:46:14.880 --> 00:46:15.580
Anyway, there's that.

00:46:15.580 --> 00:46:19.860
And then, Seth, back to some of the stuff you were talking about.

00:46:19.860 --> 00:46:22.940
I mean, it would never happen that someone would try to phish.

00:46:22.940 --> 00:46:23.180
Wait.

00:46:23.180 --> 00:46:23.760
No.

00:46:23.760 --> 00:46:26.240
Last week, somebody tried to phish PyPI.

00:46:26.240 --> 00:46:29.420
Maybe it was the week before when it started, but not too long ago.

00:46:29.540 --> 00:46:35.020
So over on darkreading.com, there's an article that says, threat actor phishing PyPI users

00:46:35.020 --> 00:46:36.160
has been identified.

00:46:36.160 --> 00:46:42.360
Juice Ledger has escalated a campaign to distribute its information stealer by now going after developers

00:46:42.360 --> 00:46:45.440
who publish code widely used on the Python code repository.

00:46:45.440 --> 00:46:50.840
Don't want to go too much into it, but there's this group who had originally tried to do typo

00:46:50.840 --> 00:46:52.100
squatting, if I'm correct.

00:46:52.100 --> 00:46:59.160
They wrote some thing to steal some malware written in .NET, by the way, which Will was

00:46:59.160 --> 00:47:01.800
joking about it, only running on Windows.

00:47:01.800 --> 00:47:05.400
Hey, if they use .NET Core, they could expand out the open source version.

00:47:05.400 --> 00:47:10.340
Anyway, I don't want to give them ideas, but they were distributing this malware through

00:47:10.340 --> 00:47:12.000
these malicious packages.

00:47:12.000 --> 00:47:16.280
And then they said, well, what if we could get really popular ones, hack their accounts,

00:47:16.280 --> 00:47:17.400
and then upload bad wheels?

00:47:17.400 --> 00:47:21.360
So anyway, there's a bunch of background on the actual people behind this.

00:47:21.360 --> 00:47:23.060
So it's pretty interesting.

00:47:23.060 --> 00:47:24.720
You can check out that article if you want.

00:47:24.720 --> 00:47:29.220
There's also an Ars Technica article, but it doesn't have as much depth as the dark reading

00:47:29.220 --> 00:47:29.460
one.

00:47:29.460 --> 00:47:30.340
Nice.

00:47:30.340 --> 00:47:30.680
All right.

00:47:30.680 --> 00:47:31.640
Last one.

00:47:31.640 --> 00:47:33.460
I think this is the last one.

00:47:33.460 --> 00:47:38.920
Brian Skin, former co-host on the show, who always contributes many interesting things,

00:47:38.920 --> 00:47:41.240
says, Python Bytes will definitely want to check this out.

00:47:41.240 --> 00:47:48.780
This is a tweet by Steve Dower that says, we have published the details of a critical security

00:47:48.780 --> 00:47:49.880
problem for Python.

00:47:49.880 --> 00:47:54.700
It is very rare that we have direct vulnerabilities in Python.

00:47:54.700 --> 00:48:01.160
Like, it was all fun to have the lulls about Jindy and Log4J.

00:48:01.160 --> 00:48:07.040
But this is not exactly that, but it's a denial of service at that kind of scale.

00:48:07.040 --> 00:48:12.340
So if you've ever thought, I have a string and it needs to be an integer, and that string came

00:48:12.340 --> 00:48:18.360
from user input, that's really bad, it turns out, because there's a denial of service thing

00:48:18.360 --> 00:48:22.820
that you can do by passing very, very long strings to that integer parsing.

00:48:22.820 --> 00:48:24.800
Seth, you're shaking your head like, oh boy.

00:48:24.800 --> 00:48:25.420
Yes.

00:48:25.880 --> 00:48:26.100
Yeah.

00:48:26.100 --> 00:48:31.280
If you've been waiting to upgrade to Python 2, now's the time to upgrade Python 3, I would

00:48:31.280 --> 00:48:31.580
say.

00:48:31.580 --> 00:48:32.620
Exactly.

00:48:32.620 --> 00:48:33.680
The security support.

00:48:33.680 --> 00:48:37.460
And you shouldn't say, eh, just go to one of the older ones.

00:48:37.700 --> 00:48:41.320
You need to get the 310.7 ASP.

00:48:41.320 --> 00:48:44.520
I suspect they'll roll this back to some of the supported ones as well.

00:48:44.520 --> 00:48:47.700
So they'll probably back port it to 3.9 and 3.8.

00:48:47.700 --> 00:48:50.420
But if you're on, say, 3.6, that's a problem.

00:48:50.420 --> 00:48:52.060
That's a big, big problem.

00:48:52.060 --> 00:48:52.760
Yeah.

00:48:52.900 --> 00:48:55.920
So expect releases for 3.7 plus in the next week.

00:48:55.920 --> 00:48:57.780
This came out a few days ago.

00:48:57.780 --> 00:48:59.480
This has now been done.

00:48:59.480 --> 00:49:03.420
But this Twitter thread is super interesting, and that's what I'm linking to.

00:49:03.420 --> 00:49:04.700
So y'all can check that out.

00:49:04.700 --> 00:49:08.260
There was also some feedback like, what are you doing?

00:49:08.260 --> 00:49:10.320
How dare you fix this?

00:49:10.320 --> 00:49:16.060
The way they fixed this is they said, if you're doing base 10 parsing, you can only use 4,300

00:49:16.060 --> 00:49:16.700
digits.

00:49:16.700 --> 00:49:21.620
Not the number to 4,000, but places in the number, 4,000 places.

00:49:21.840 --> 00:49:23.100
That's a really large number.

00:49:23.100 --> 00:49:26.320
If it's bigger than that, basically Python won't be able to parse it before.

00:49:26.320 --> 00:49:28.620
Brian, you do C++ all the time.

00:49:28.620 --> 00:49:31.160
You have to think about, is this over 32,000?

00:49:31.160 --> 00:49:32.880
Is it signed or unsigned?

00:49:32.880 --> 00:49:34.220
Okay, it's unsigned.

00:49:34.220 --> 00:49:35.740
All right, we can get to 64,000.

00:49:35.740 --> 00:49:40.540
This is not that level of thinking, but you kind of do have to think about what the heck's

00:49:40.540 --> 00:49:41.020
going on here.

00:49:41.020 --> 00:49:44.160
I think it's a fair fix.

00:49:44.160 --> 00:49:45.180
I do too.

00:49:45.180 --> 00:49:46.580
People are freaking out for no reason.

00:49:46.580 --> 00:49:51.300
Yeah, this one was really, this one's wild too, because you just pass a long number.

00:49:51.560 --> 00:49:53.420
It's not something sophisticated or anything.

00:49:53.420 --> 00:49:59.580
It also feels almost, not log4j, but kind of log4j a little bit, where you can just do

00:49:59.580 --> 00:50:02.440
denial of service by doing something very trivial.

00:50:02.440 --> 00:50:03.620
Exactly.

00:50:03.620 --> 00:50:10.040
Yeah, you just try to set your username to jndi, colon, slash, slash, hackster.com.

00:50:10.420 --> 00:50:13.780
This is like, well, the number is A1722117.

00:50:13.780 --> 00:50:15.840
Yeah, and then boom, now it goes to the website, right?

00:50:15.840 --> 00:50:20.800
This is denial of service versus remote code execution, which is clearly better, but it's

00:50:20.800 --> 00:50:21.000
not good.

00:50:21.000 --> 00:50:21.100
Yeah.

00:50:21.100 --> 00:50:23.480
Just hold down the zero key for a little longer.

00:50:23.480 --> 00:50:24.340
Exactly.

00:50:24.340 --> 00:50:30.340
Or if you're writing Python code, you can just do times 10,000 carat 10,000, you know, power

00:50:30.340 --> 00:50:31.860
to 10,000 or something and send that.

00:50:31.920 --> 00:50:34.060
Yeah, string extension really coming in handy here.

00:50:34.060 --> 00:50:34.980
RPAD.

00:50:34.980 --> 00:50:36.460
Exactly.

00:50:36.460 --> 00:50:38.620
Or ZFIL in the right.

00:50:38.620 --> 00:50:39.080
ZPAD.

00:50:39.080 --> 00:50:39.780
ZFIL.

00:50:39.780 --> 00:50:40.580
Exactly.

00:50:40.580 --> 00:50:43.360
Yeah, piling wants to send pi across.

00:50:43.360 --> 00:50:44.500
Yeah, that's going to upset it.

00:50:44.500 --> 00:50:47.680
Anyway, I upgraded my servers to 310.7.

00:50:47.940 --> 00:50:50.300
They were not available from Ubuntu directly.

00:50:50.300 --> 00:50:53.860
It was still the old 310.6, which is unnerving.

00:50:53.860 --> 00:50:59.200
But because I build mine from source, I just changed the number 310.7, rebuild and redeploy

00:50:59.200 --> 00:50:59.600
Python.

00:50:59.600 --> 00:51:00.140
I'm good to go.

00:51:00.140 --> 00:51:08.440
I imagine everybody listening to this podcast is on 3.7 or above if they at any chance can

00:51:08.440 --> 00:51:08.680
be.

00:51:08.680 --> 00:51:13.020
I mean, that if they're below, it's not because they haven't tried.

00:51:13.020 --> 00:51:14.080
Yeah.

00:51:14.080 --> 00:51:15.480
Well, let me point this out.

00:51:15.480 --> 00:51:18.440
I would say, actually, I want to follow up with a couple of things because this is, maybe

00:51:18.440 --> 00:51:20.260
this should have been the main item, but whatever.

00:51:20.260 --> 00:51:26.400
One, we've talked about the reason you should upgrade to Python 3 for a long time.

00:51:26.400 --> 00:51:29.040
And Brian, you and I had lots of fun calling it Legacy Python.

00:51:29.040 --> 00:51:35.440
Although we've had people go into iTunes and like post negative reviews of the podcast because

00:51:35.440 --> 00:51:38.840
I had said disparaging things of Python 2, but it's okay.

00:51:38.840 --> 00:51:41.260
I'm willing to stick by them.

00:51:41.260 --> 00:51:42.360
Oh my goodness.

00:51:42.360 --> 00:51:43.580
That is wild.

00:51:43.580 --> 00:51:45.400
More reviews.

00:51:45.400 --> 00:51:45.960
Awesome.

00:51:45.960 --> 00:51:50.260
If you have good things to say, also consider posting a review, not just if you're angry

00:51:50.260 --> 00:51:51.500
that I called it Legacy Python.

00:51:51.500 --> 00:51:59.040
But if you're on old Legacy code, which is even 3.5, but is very seriously Python 2 because

00:51:59.040 --> 00:52:00.560
the gap to upgrade is really hard.

00:52:00.560 --> 00:52:04.440
These are the types of things that we warned about that could be a problem.

00:52:04.440 --> 00:52:05.080
Yeah.

00:52:05.260 --> 00:52:06.960
And there will be no fix, right?

00:52:06.960 --> 00:52:11.600
You better just say, well, we're going to make sure the strings that are really destined

00:52:11.600 --> 00:52:12.960
to be integers are really, really checked.

00:52:12.960 --> 00:52:15.840
And, you know, I mean, it's not good.

00:52:15.840 --> 00:52:16.520
It's not good.

00:52:16.520 --> 00:52:22.120
So just one more reason to be on a shipping version of Python, even if it's just 3.7.

00:52:22.120 --> 00:52:22.660
Yeah.

00:52:22.900 --> 00:52:23.200
All right.

00:52:23.200 --> 00:52:25.000
Yeah.

00:52:25.000 --> 00:52:25.760
That's it.

00:52:25.760 --> 00:52:26.760
Let's see.

00:52:26.760 --> 00:52:27.380
Yeah.

00:52:27.380 --> 00:52:28.000
The changelog.

00:52:28.000 --> 00:52:29.680
One other really quick.

00:52:29.680 --> 00:52:30.100
Yeah.

00:52:30.100 --> 00:52:32.860
So you can see it's like actually described quite well here.

00:52:32.860 --> 00:52:34.180
Hatched by Gregory P.

00:52:34.180 --> 00:52:35.740
Smith and Christian Himes.

00:52:36.300 --> 00:52:38.240
Feedback by a bunch of great folks.

00:52:38.240 --> 00:52:43.340
Sebastian Ramirez said, I sent a tweet out when this got fixed saying, please be kind

00:52:43.340 --> 00:52:45.460
to your open source contributors.

00:52:45.460 --> 00:52:51.400
They just wrote 800 lines of code in a PR so that you can parse strings to integers.

00:52:51.400 --> 00:52:53.980
So apparently it wasn't easy to fix.

00:52:53.980 --> 00:52:54.720
But yeah, I agree.

00:52:54.720 --> 00:52:55.180
Cool.

00:52:55.180 --> 00:52:59.740
Ready for a joke or actually, Seth, you got anything extras you want to throw out first?

00:52:59.740 --> 00:53:00.300
Yeah.

00:53:00.300 --> 00:53:02.160
I had a real hopefully quick one.

00:53:02.160 --> 00:53:02.680
Yeah.

00:53:03.040 --> 00:53:08.440
I so I follow a whole bunch of game art accounts on Twitter because I just I just love

00:53:08.440 --> 00:53:08.740
it.

00:53:08.740 --> 00:53:09.160
Mm hmm.

00:53:09.160 --> 00:53:10.480
Seeing what people create.

00:53:10.480 --> 00:53:11.820
And one came by.

00:53:11.820 --> 00:53:15.280
It was using hashtag pixel P Y XL.

00:53:15.280 --> 00:53:16.240
Did a little ding.

00:53:16.240 --> 00:53:17.040
I'm like, wait a second.

00:53:17.040 --> 00:53:17.620
That's Python.

00:53:17.620 --> 00:53:23.980
And then I just went back in this developers Twitter a few a few tweets back and they just

00:53:23.980 --> 00:53:27.580
released wasm support for this Python like game framework.

00:53:27.580 --> 00:53:29.300
I'm like, this is incredible.

00:53:29.300 --> 00:53:33.020
So, yeah, it was quite the it was a very fast.

00:53:33.020 --> 00:53:34.300
journey of wow.

00:53:34.300 --> 00:53:36.000
Wasm is everywhere at this point.

00:53:36.000 --> 00:53:38.900
That's kind of kind of wild that it's popping up so fast.

00:53:38.900 --> 00:53:45.280
So, yeah, version one eight zero of this retro game engine for Python, which they had a whole

00:53:45.280 --> 00:53:47.200
bunch of really beautiful like examples.

00:53:47.200 --> 00:53:49.960
I think you all have covered this framework before, but I'm not.

00:53:49.960 --> 00:53:50.640
We have.

00:53:50.640 --> 00:53:52.040
Yeah, this is really cool.

00:53:52.500 --> 00:53:52.640
Yeah.

00:53:52.640 --> 00:53:56.560
So apparently they have a whole bunch of demos that you can just play in the browser.

00:53:56.560 --> 00:53:59.580
And I was really blown away that I didn't even know this existed.

00:53:59.580 --> 00:54:01.880
And suddenly there's wasm support for it.

00:54:01.880 --> 00:54:03.180
So awesome.

00:54:03.180 --> 00:54:04.240
I love it.

00:54:04.240 --> 00:54:05.260
OK, that's a great one.

00:54:05.260 --> 00:54:05.980
Yeah.

00:54:06.980 --> 00:54:07.180
All right.

00:54:07.180 --> 00:54:08.740
How about we close it out with a bit of a joke?

00:54:08.740 --> 00:54:11.360
Have you ever felt like you've had a hard day at work?

00:54:11.360 --> 00:54:13.200
There's one of these problems like parsing integers.

00:54:13.200 --> 00:54:15.320
You're like, how could possibly this go wrong?

00:54:15.320 --> 00:54:17.560
I just don't understand what is happening.

00:54:17.560 --> 00:54:20.700
Well, here we have a joke of a guy at a nighttime soccer game.

00:54:20.700 --> 00:54:25.380
Apparently it's a little cool, but he's been running really hard.

00:54:25.920 --> 00:54:32.900
So it's a picture of a guy whose head is literally steaming, like not a little bit, a lot, a lot.

00:54:32.900 --> 00:54:37.080
I think that's a visualization of like integer being parsed into a string right there.

00:54:37.080 --> 00:54:37.580
Exactly.

00:54:37.580 --> 00:54:38.220
The before.

00:54:38.220 --> 00:54:40.780
I'll read what the tweet really says.

00:54:40.780 --> 00:54:42.140
And then maybe we can play with it a little.

00:54:42.140 --> 00:54:45.240
It says, the tweet says, just a JavaScript developer after work.

00:54:45.240 --> 00:54:47.520
You know, like, what do you mean I have to do a new framework?

00:54:47.520 --> 00:54:49.240
I just did a new framework last month.

00:54:49.240 --> 00:54:55.520
I feel like this could be Christian Himes after going, what do you mean parsing?

00:54:55.520 --> 00:54:57.840
Parsing an integer is a denial of service.

00:54:57.840 --> 00:54:59.100
I just can't.

00:54:59.100 --> 00:55:01.820
The ints are wrong.

00:55:01.820 --> 00:55:02.920
The ints are cursed.

00:55:02.920 --> 00:55:04.020
Exactly.

00:55:04.020 --> 00:55:07.620
Anyway, I'll just leave this here for people to appreciate.

00:55:07.620 --> 00:55:09.080
We can call it a show 300.

00:55:09.080 --> 00:55:09.680
Yeah.

00:55:09.680 --> 00:55:10.280
Nice.

00:55:10.280 --> 00:55:11.280
Thanks.

00:55:11.280 --> 00:55:12.460
Yeah.

00:55:12.460 --> 00:55:13.080
Thank you, Brian.

00:55:13.080 --> 00:55:16.660
Seth, thanks so much for being here and sharing the work you've been doing.

00:55:16.660 --> 00:55:17.160
Yeah.

00:55:17.160 --> 00:55:18.320
Thanks so much for having me.

00:55:18.320 --> 00:55:18.860
Yeah.

00:55:18.860 --> 00:55:19.640
It's been great.

