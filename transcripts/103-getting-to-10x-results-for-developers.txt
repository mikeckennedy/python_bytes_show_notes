00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 103, recorded November 6, 2018. I'm Michael Kennedy.

00:00:10 And I'm Brian Okken.

00:00:11 Hey, Brian. How you doing?

00:00:12 I am great today.

00:00:13 Yeah, it's another wonderful day. A lot of cool news in the Python space.

00:00:18 I have something that I think you all will really like. I'm looking forward to sharing that.

00:00:22 Cool.

00:00:22 Yeah, and I know you got some good ones, so I'm looking forward to talking about those as well.

00:00:26 Before we do, let's say thank you to DigitalOcean. Check them out at pythonbytes.fm/DigitalOcean.

00:00:31 Get $100 free credit for new users. I'll tell you more about them later.

00:00:36 Right now, you've got kind of this magical C++ Python combination thing queued up for us, right?

00:00:42 I do. And I just, we found out about this because a listener, I think it's Sebastian Srebart.

00:00:51 Wait, Sebastian Srizard. Srizard. Sorry about your last name.

00:00:56 Thank you, Sebastian, for sending that in.

00:00:58 Yeah.

00:00:59 Brian, if anyone else wants to send in some news, you can also butcher their name in honor of them sending that in, right?

00:01:05 Yeah, it's a tradition.

00:01:06 As I would as well. I do a lot too. It's becoming a tradition. Thank you, Sebastian. All right, tell us about this thing.

00:01:11 Well, I think because of the flames in the logo, they actually intended to be pronounced Phoenix.

00:01:16 It's F-E-N-I-C-S. It's a project. I'm glad that Sebastian sort of translated this for us.

00:01:24 It's an open source computing platform for solving partial differential equations.

00:01:30 This is actually really cool. And I'm going to quote right from their site.

00:01:35 Phoenix enables users to quickly translate scientific models into efficient finite element code

00:01:41 with the high-level Python and C++ interfaces to help you get started.

00:01:47 It's got powerful capabilities for experienced programmers, but it's easy to get started.

00:01:52 And it runs on multiple platforms from laptops to high-performance clusters.

00:01:57 And it actually looks really pretty cool for anybody dealing with partial differential equations.

00:02:03 It's a num-focused-backed project.

00:02:06 So there's money behind it, which is cool.

00:02:09 Num-focused seems like it's everywhere these days.

00:02:10 Yeah, well, especially in...

00:02:12 And it's good to highlight that, to say that this is a backed project, because it's a...

00:02:19 These sorts of things you wouldn't want to depend on and then have them go away.

00:02:23 Right. Some open source projects, depending upon them, are kind of like getting a puppy, right?

00:02:28 They're cute and fun, but then you've got to walk them and stuff like that if they get dropped

00:02:33 or don't work the way you want.

00:02:34 Yeah. And Sebastian said right off the bat, it looks cool, but there's some features

00:02:40 features inside that you might not know about right off the bat.

00:02:43 So I'm going to quote an email that he sent us.

00:02:46 He said, Phoenix is, in fact, a C++ project with a full-featured Python interface.

00:02:51 The library itself generates C++ code on the fly and be called on the fly from Python.

00:02:57 It's almost magical.

00:02:59 Under the hood, it uses SWIG and recently moved to PyBind 11.

00:03:06 I guess the architecture that was set up to achieve this level of automation might be useful

00:03:11 for other situations.

00:03:12 Yeah. So that's crazy.

00:03:14 You write Python code, this thing writes C++ code, and then calls it all dynamically at runtime.

00:03:19 Yeah. That's amazing.

00:03:22 And from the project website, being able to develop the algorithm locally on whatever computer you're on, even a laptop or desktop, and then deploying the same code to run in parallel on thousands of processes, that's just awesome.

00:03:41 Yeah. I think there's a lot of cool stuff happening here.

00:03:43 I mean, not everyone is solving using finite element methods to solve PDs, right?

00:03:48 I understand that's a limited group, but there's a lot of projects that may find what this project is doing interesting from a performance perspective and a dynamic meets compiled language perspective.

00:03:59 Yeah. And it's also one more example of problems being solved in Python that you wouldn't have thought you could solve with Python because they're just to take too much high performance computing.

00:04:12 That's a super interesting point.

00:04:13 So often I hear people who are not that familiar with Python say, well, Python's slow.

00:04:18 I'm like, hold on.

00:04:19 What do you mean that Python is slow?

00:04:21 Like you have to say doing this operation in Python is slow because there's so many variations.

00:04:27 I mean, it can be, well, Python is slow and CPython, so you can use PyPy, but it could be way more interesting.

00:04:32 Like, well, yes, but you would actually use a, say some kind of library that has C level compilation elements like SQLAlchemy or NumPy or something.

00:04:44 And so when you actually talk about that, like you're doing C, you're not doing Python at the hotspots.

00:04:49 And then you get, you know, way out there with things like Dask and like this and so on.

00:04:53 And it's pretty awesome.

00:04:55 Yeah, definitely.

00:04:56 It's neat to see.

00:04:57 You're kind of a fan of regular expressions, aren't you?

00:04:58 Yes.

00:04:59 I like regular expressions.

00:05:01 Are you a fan of cursive language, like the fancy calligraphy type stuff?

00:05:05 Like, do you write that way often?

00:05:06 Well, I like it.

00:05:08 I don't write that way, but.

00:05:09 I don't write it that way either.

00:05:12 This next project I want to talk about is its goal, I think, primarily is to make regular expressions more easy to indicate their intent and easier to maintain.

00:05:24 I like to joke that regular expressions are kind of a write-only language.

00:05:29 You know, you write them, but then you can't read them anymore.

00:05:31 But they're magic and they do their thing, right?

00:05:33 So we got this project called cursive underscore RE.

00:05:37 And RE is, of course, the regular expression module in Python, right?

00:05:40 Yeah.

00:05:41 This comes from Chris Patty of Podcasting at Fame.

00:05:44 And it's actually created by Bogdan Popa.

00:05:47 My turn to hopefully take a shot at getting the name not too wrong.

00:05:51 But this is a library for doing regular expressions in modern Python.

00:05:57 So 3, 6 and above.

00:05:58 And the idea is instead of writing in Python, the string symbols like you normally would, you know, bracket 9, 0-9 dot, you know, close bracket dot, that sort of thing,

00:06:13 you write in this higher-level language of combinators, they call them.

00:06:18 And then that overrides the operators in Python to generate a regular expression.

00:06:24 So this is like all sounds kind of wonky and crazy, but if you've seen an example, it's super clear.

00:06:30 So you can go and define, say, like a hex color.

00:06:33 And the way you define it is you say, I would like to create a, you say, beginning of line plus this hash symbol plus group repeated hex digit

00:06:44 or repeated other hex digit exactly three times plus end of line.

00:06:49 And you write it in these things that are symbolic of what regular expressions do.

00:06:55 And they can be, you know, sort of orred and and together and added together and so on.

00:07:00 And then if you call the string representation of them, you get the actual regular expression.

00:07:05 Okay.

00:07:05 So it's a library to build regular expressions.

00:07:09 Yeah.

00:07:09 It's a library to build regular expressions.

00:07:11 The way Bogdan describes it is he says, it's a tiny Python library made up of these combinators to help you write regular expressions that you can read and modify six months down the line.

00:07:21 Yeah.

00:07:23 Yeah.

00:07:24 Definitely one of the problems with regular expressions is they're they're terse and that's good and bad.

00:07:30 You they're too terse sometimes.

00:07:32 So, yeah, sometimes.

00:07:34 And then the other problem is there's a lot of special symbol.

00:07:37 Like regular expressions are basically nothing but symbols.

00:07:40 Right.

00:07:40 They're like a symbol like exploded and its guts came out all over this text.

00:07:45 Right.

00:07:45 Yeah.

00:07:45 But the problem is like some of those symbols are have to be escaped if you actually want to search for them.

00:07:52 But it's always kind of hard to know.

00:07:53 Well, which ones do I have to escape?

00:07:54 So it also does things like if you tell it I'm looking for the text of like square bracket, square bracket, it'll escape properly in regular expression format.

00:08:02 The the text representation of that.

00:08:05 Right.

00:08:05 Because bracket normally means something else.

00:08:07 Like it's a set of characters or something like that.

00:08:09 Yeah.

00:08:10 So I really like that it is sort of a safe way as well.

00:08:14 Like it's a more you talk about what you want and if it has to be escaped or whatever it does.

00:08:19 So, yeah, it's I like this.

00:08:20 This is great.

00:08:21 Yeah.

00:08:22 Yeah.

00:08:22 I do, too.

00:08:23 I can certainly see myself using this if I'm writing regular expressions.

00:08:26 It's great.

00:08:27 Speaking of seeing yourself.

00:08:29 Seeing yourself.

00:08:31 Yes.

00:08:31 Actually, for a long time, I've been following and paying attention to what Adrian Rosebrock.

00:08:37 This is even an easy one.

00:08:38 And I even mass record this.

00:08:40 Adrian Rosebrock.

00:08:42 He has a site called Py Image Search.

00:08:44 And essentially, Adrian is teaching people about OpenCV and Python and actually a lot of AI stuff and doing some really cool things with Python and like cameras and webcams and stuff.

00:08:59 And even on Raspberry Pis and stuff and doing lots of neat things.

00:09:03 And I don't have a particular article to point to.

00:09:06 We just haven't covered it before, I don't think.

00:09:08 And people should know about it.

00:09:10 So Adrian has both paid and free resources to teach people all about computer vision.

00:09:16 And I think he's doing a cool job.

00:09:18 Yeah, he's doing a real cool job.

00:09:19 And there's so many great examples over there.

00:09:22 I think OpenCV is great.

00:09:23 And this is probably the best resource for OpenCV and Python intersected, right?

00:09:27 I get emails from him every now and then with boxes detecting things running around on videos or something like that.

00:09:35 It's great.

00:09:35 So if you've got to do anything with computer vision and you want to use Python to do it and why wouldn't you want that, then this is a cool place, right?

00:09:42 Yeah.

00:09:42 And he has some like tons of cool projects that he's done over the years of, you know, hooking up a Raspberry Pi with a camera to detect people coming to your door and stuff like that.

00:09:53 And it's some cool stuff.

00:09:55 And then you brought up that he had one of the most successful Kickstarters ever.

00:09:59 Yeah, he did a Kickstarter called Deep Learning for Computer Vision with Python.

00:10:03 And yeah, it's definitely one of the most successful Kickstarters ever.

00:10:07 So if you want to check out that book, that's really good.

00:10:10 I think he has some videos that are coming along with it, but I linked to the Kickstarter as well.

00:10:14 Yeah, it did okay.

00:10:16 Okay.

00:10:18 Speaking of doing very, very well, I want to tell everyone about DigitalOcean before we move on.

00:10:24 And I decided it's time to think about this a little bit differently.

00:10:27 You think about DigitalOcean and you're hosting and stuff a little bit differently.

00:10:29 So, you know, most of us, I think you brought this up.

00:10:33 You're not Netflix.

00:10:34 You're not Google.

00:10:35 You're not Facebook, right?

00:10:36 Remember that?

00:10:36 You're not LinkedIn.

00:10:37 Yeah.

00:10:37 You don't need these crazy architectures.

00:10:39 And yet some of the most popular hosting platforms out there, you know, like AWS or Azure,

00:10:45 they are built with thousands and thousands of knobs so that you could be Netflix with 50,000 servers running continuous chaos experiments and all that crazy stuff, right?

00:10:57 But if you are actually just building what 99.9% of us are, more standard applications, then all that stuff is just overhead and complexity and cost.

00:11:09 So you can join companies like Slack, WeWork, Docker, GitLab, and of course, us over at DigitalOcean and pay like five times less than what you would for AWS or Azure, right?

00:11:20 So, for example, bandwidth is one cent instead of nine per gigabyte.

00:11:24 Servers are five bucks instead of, you know, 50 or whatever a reserved instance is over at AWS.

00:11:28 It's not just about price.

00:11:30 Keep it simple.

00:11:31 Use what you need.

00:11:33 Don't have all these crazy, crazy features that you probably don't actually need because you're not building Netflix or Facebook or LinkedIn.

00:11:40 Anyway, try them out at pythonbytes.fm/digital ocean.

00:11:43 Get $100 credit for new users and see why we all love it for their infrastructure.

00:11:48 Awesome.

00:11:48 Thanks.

00:11:49 Indeed.

00:11:50 So, Brian, this next one, have you watched this video here that I'm about to talk about?

00:11:56 I don't think I have.

00:11:58 Maybe I have.

00:11:59 All right.

00:12:00 So, while we're talking, click this and open it up.

00:12:02 Okay.

00:12:03 And I'll tell people about it.

00:12:04 Maybe mute your YouTube that it's going.

00:12:06 Okay.

00:12:07 Okay.

00:12:07 So, this thing that I want to talk about is a visualization of Python development from original origin way back in the day up until 2012.

00:12:15 And it's using this underlying system called GORCE, G-O-U-R-C-E, GORCE, I'm guessing.

00:12:23 And the idea is GORCE is a visualization library that visualizes trees and stuff like this, like graph trees, not real trees.

00:12:29 And what you can do is you can point it at a source repository.

00:12:35 It could be SVN.

00:12:36 It even supports CVS, but Git and Mercurial.

00:12:39 And you can point it there, and it will do an animated over time visualization of that source library.

00:12:46 So, not just Python.

00:12:47 Any of these repositories you can point it at.

00:12:50 And it will have the files as they grow, the size of the repository, and these little animated characters come in and start editing files and interacting with it.

00:12:59 So, if you play this video that we're linking to, this is a GORCE animation of Python development up until 2012.

00:13:06 And you see it starts out, and Gito is cruising around, adding little bits.

00:13:10 Then a few more people come.

00:13:11 And then if you start skipping further and further ahead, it gives just madness at the end.

00:13:16 People are swirling all over the place.

00:13:18 And it's just a really great way to, like, see the growth of Python visually through animation, at least in terms of who is participating in building it.

00:13:27 What do you think?

00:13:28 Yeah, it is cool.

00:13:29 And one of the fun things to see is that there's sometimes some people that just sort of sit around one area, which makes sense.

00:13:37 And then other people that fly around and edit all sorts of stuff.

00:13:41 Yeah, it's really interesting, right?

00:13:43 And you can see people appear, and then they'll fade away.

00:13:45 They'll come and make some contributions, and then they'll, like, leave the scene.

00:13:48 So, anyway, I think this is really cool.

00:13:51 Yeah.

00:13:51 And it's, you know, there's not a lot to take away from it other than it's just nice to appreciate it.

00:13:55 I would say watch the first minute and then just, like, skip minute by minute and watch a little bit.

00:13:59 Because it's 14 minutes.

00:14:00 You don't really want to watch the whole thing.

00:14:01 I think I do.

00:14:02 But you could just leave it running for the rest of the show.

00:14:06 Yeah.

00:14:06 So, here's what I think.

00:14:08 The call out to the audience.

00:14:09 One, who wants to build this for 2012 to present on Python, you know, again?

00:14:16 And I think this would make an amazing lightning talk if you built that video, and then you, like, went up there and just did a four-minute animation.

00:14:22 Wouldn't that be cool?

00:14:23 It'd be cool to just have that going on in the background while you did some other talk.

00:14:28 Right, yeah.

00:14:29 Or run this at, like, between sessions at a conference.

00:14:33 I think it'd be great.

00:14:34 Anyway, I think people will appreciate checking it out.

00:14:37 Cool.

00:14:37 So, one of the things, Brian, that you hear a lot in software development is that there's often a wide range of skills and productivity between developers.

00:14:46 And I've done a lot of training and interacted with, you know, literally thousands of people in person.

00:14:51 And I think it's something of a myth, but I think largely there's a lot to this.

00:14:56 Yeah.

00:14:58 Some people that just fly and they're just focused and others that just kind of bounce around the keyboard randomly.

00:15:02 What do you think?

00:15:04 So, I know that it's a bit controversial.

00:15:06 There is this notion of a 10x developer.

00:15:09 And often there's a backlash against it also.

00:15:12 But I think people think of it as, like, somebody that's really 10 times better than the average good developer.

00:15:19 And I don't think that's it at all.

00:15:21 I think that it's just a notion that there is sometimes orders of magnitude between the most effective person in an organization and the least effective.

00:15:31 And I don't know how you argue against that.

00:15:33 And if you've ever been at large organizations, it just is.

00:15:38 At least maybe it's not 10 times, but there's definitely – there's a lot to it.

00:15:42 It's a multiplicative factor in there, I would say, for sure.

00:15:45 Yeah.

00:15:45 And so, this is – regardless of what you want to take away, there's some good advice in this article.

00:15:50 There's an article I'm linking to that's what any developer can learn from the best.

00:15:55 And I think these are good things.

00:15:57 So, one of the things – the idea around it is just this isn't magical and it isn't something that is – it isn't just about skills and hard skills.

00:16:08 It's other stuff too.

00:16:10 And there's a clear path to excellence.

00:16:12 People are not born great developers.

00:16:14 They get there through focused, deliberate practice.

00:16:17 And here's a few traits.

00:16:19 They just listed some traits of things that they see in good developers versus not so great.

00:16:26 So, great developers are – a few of the traits are problem solving.

00:16:30 They're skilled at what they're doing.

00:16:32 They're mentors and teachers.

00:16:34 They're excellent learners and passionate about stuff.

00:16:37 So, the problem solver bit I think is really interesting because often the 10x or the multiplier doesn't come in from that they do the same work faster.

00:16:48 It's sometimes they can just look at things differently because of experience, because of playing around with lots of different things and say, oh, let's just solve this problem differently.

00:16:57 And it just gets done faster because they take that – take a different approach.

00:17:04 One of the – I was talking with somebody about databases recently.

00:17:08 And there's some – for instance, there's some problems that can be solved with graph databases easily that are almost impossible with a relational database.

00:17:17 It's just using the right tool for the right job sometimes.

00:17:21 Yeah.

00:17:21 And I think a lot of that is the – it's not that knowing that means you're 10x smarter or 10x better.

00:17:28 That means you are curious enough to keep looking and to continuously be on the lookout for, well, okay, I now totally know all about relational databases.

00:17:37 What else can I learn?

00:17:38 How do I compare it?

00:17:39 And I think that's one of the biggest traits that I've noticed among people that have some number of multiplier of efficiency or skills is not that they are necessarily more skilled or have more natural talent, but they're just continuously learning and really passionate about it.

00:17:59 And they're just – they're just always picking up these little things that help you at each step, right?

00:18:04 Yeah.

00:18:04 Yeah.

00:18:04 And there's an honesty of just like – this isn't just about developers.

00:18:08 I think it's in every field.

00:18:10 For instance, somebody that's working with tools and stuff, somebody that needs to hammer in a lot of nails might be smart enough to go, hey, I should go get a nail gun.

00:18:22 I could do this a lot faster with a nail gun.

00:18:24 You know what that makes me think of?

00:18:25 Like you could say I need to have the rings on my engine or my transmission fixed on my car and you take it to a regular place.

00:18:34 You're like, great.

00:18:35 We'll have it back in three weeks.

00:18:36 You go watch something like IndyCar or Formula One.

00:18:39 They'll pull in and they'll like change the transmission in two laps.

00:18:42 Yeah.

00:18:42 Right?

00:18:42 Those are both mechanics.

00:18:44 Yeah.

00:18:45 Those are not the same.

00:18:46 Right.

00:18:47 Exactly.

00:18:47 The deliberate practice is important.

00:18:50 And I think some people forget that the difference between being an average or a below average developer and being an above average developer is mostly just deciding that you're going to do that.

00:19:02 And setting aside some of your time in your life to pick something you want to improve and then go and do it.

00:19:10 Figure out what you want to learn and go do it.

00:19:12 So.

00:19:12 Yeah.

00:19:12 Anyway.

00:19:13 I guess what I would say is to take away from this article is it's really interesting.

00:19:18 It's numerically based.

00:19:20 Right?

00:19:20 There's a lot of it's based on a survey the guy did with like a thousand folks or something.

00:19:24 And most importantly, it's about a growth mindset.

00:19:27 Right?

00:19:27 It's not to say, well, there's these people and they're just smarter than you or they're smarter than other people or whatever.

00:19:32 It's here's how those people got that way and you can do it too.

00:19:37 And I think that's the right message.

00:19:39 Right.

00:19:39 And the person that wrote the article said this is from a lot of he's taught a lot of people and there's a lot of people that want to be better, but they don't know how to.

00:19:47 So this is just sort of some direction on what things to work on.

00:19:51 So.

00:19:51 Yeah.

00:19:52 It's a good article.

00:19:52 Yep.

00:19:54 And a nice find.

00:19:54 Let's close this out with a bit of chaos.

00:19:57 Sure.

00:19:57 Why change tradition?

00:19:59 Right?

00:19:59 That's right.

00:20:01 So you've heard of, I'm sure you've heard, I'm pretty sure you've been out on your show.

00:20:05 If I remember correctly, you've talked about the chaos monkey and things like that, right?

00:20:10 Yeah.

00:20:10 Tell people what the, yeah, he's from Netflix, right?

00:20:14 He used to be.

00:20:15 Yes.

00:20:15 Okay.

00:20:16 So I think the idea of the chaos monkey originated there.

00:20:19 Tell us what the chaos monkey is.

00:20:20 Well, I'm probably going to get this wrong, but there's this notion of taking parts of your system and intentionally breaking parts or shutting down, especially in a distributed system, taking some nodes and just killing them every once in a while and seeing how your system recovers from it.

00:20:36 Yeah, exactly.

00:21:06 And then in production, it does it.

00:21:10 And then, you know, you just have to build.

00:21:12 So, cause you know, the chaos monkey is coming and it means like, well, a standard failure is like nothing.

00:21:17 Cause the chaos monkey is a madman, right?

00:21:19 He's running around all the time.

00:21:20 So this is not a bad philosophy for large organizations or large bits of software.

00:21:26 However, you're not Netflix, probably people listening.

00:21:29 So how are you going to build that up?

00:21:31 Right.

00:21:31 How are you going to create these things?

00:21:32 So there's this cool thing I found called chaos toolkit.

00:21:36 So chaos toolkit is a library built in Python that will help create these chaos monkey like things.

00:21:45 Cool.

00:21:46 So chaos engineering is what they call is the discipline of experimenting on distributed systems in order to build confidence in the system's capability to withstand turbulent conditions in production.

00:21:56 All right.

00:21:57 So we talked about the chaos monkey and the friends, right?

00:22:00 There's other types of chaos things that Netflix, but here's a way that you can easily build those types of experiments and systems.

00:22:09 And it integrates with Kubernetes, AWS, Google cloud, Microsoft Azure, some other, other things like that.

00:22:15 Right.

00:22:16 So just to give you a sense of what it can do, like if you look at the AWS API, it'll say, you can do things like go to AWS Lambda and call a delete function concurrency that removes the concurrency limit on any specific Lambda.

00:22:29 Or you can go just call stop instance on an EC2 instance or, you know, whatever you want.

00:22:34 Right.

00:22:34 And presumably it's going to put that back.

00:22:37 I'm not entirely sure.

00:22:38 But I guess you probably got to call start instance again on it or set, you know, add function concurrency or set, something like that.

00:22:46 All right.

00:22:46 But there's this infrastructure to help you change these types of settings and these types of things around your cloud providers and, you know, make sure your system can take it.

00:22:54 Nice.

00:22:55 Yeah.

00:22:55 You cannot plan for the best.

00:22:57 So you plan for what you can for.

00:22:59 That's right.

00:23:00 Yeah.

00:23:01 So you build it so that it doesn't have to be perfect.

00:23:03 And then you're in pretty good shape.

00:23:05 The stuff that the folks at Netflix are doing is insane, though.

00:23:08 Like they take it to another level.

00:23:09 Well, yeah.

00:23:10 One of the things I remember talking with them about is the reason why they test and do all this in production is because their system is so large.

00:23:19 You can't.

00:23:20 It's essentially the world.

00:23:21 You cannot.

00:23:22 You can't have a test bed that's similar enough to the real world environment.

00:23:29 So they don't have that luxury.

00:23:31 Right.

00:23:32 So they just test it in production.

00:23:34 And I've not seen Netflix really go down.

00:23:36 So I'm saying they're doing it.

00:23:37 Yeah.

00:23:38 All right.

00:23:38 That's it for our main news.

00:23:39 I have a couple of quick ones.

00:23:40 You got anything you want to share, Brian?

00:23:41 Yeah.

00:23:42 Just on the Python bytes episode 100.

00:23:45 We one of the things we talked about was pyproject.toml.

00:23:49 And I wanted to take a deep dive.

00:23:51 So the last episode of testing code is me talking to Brett Cannon and talking about that for almost an hour or so.

00:23:58 Oh, nice.

00:23:59 I definitely want to check that out.

00:24:00 That's a good one.

00:24:01 So how about you?

00:24:02 I have two other things that I don't think justify a whole segment, but I just want to throw them out there.

00:24:07 Remember a while back we talked about that there was potentially some experiments or something where some college researcher had put some malicious, potentially malicious libraries on PyPI?

00:24:18 Yeah.

00:24:19 Well, it turns out recently someone actually put malicious libraries on PyPI.

00:24:23 So this is October 27, 2018.

00:24:26 And apparently 12 packages were discovered with various levels of vulnerabilities and stuff.

00:24:32 So I'm linking to that.

00:24:32 People should check that out.

00:24:33 If you don't know how to spell Django, you're going to have a bad time, by the way.

00:24:38 Yeah.

00:24:40 So it's a lot of this typo squatting like, oh, I forgot the J, so now I have a virus.

00:24:45 Something like that.

00:24:46 Yeah.

00:24:46 That's sort of lame.

00:24:48 Yeah.

00:24:48 It's upsetting.

00:24:49 At least they've done some work over at PyPI to block properly spelled things that are not actually packages, like RE, for example, right?

00:24:57 The built-in stuff.

00:24:58 Well, yeah.

00:24:59 That's one of the things that's, yeah, was an issue is people can try to pip install things that are in their standard library.

00:25:05 You don't have to do that.

00:25:07 Yes, exactly.

00:25:07 Exactly.

00:25:09 Don't do that.

00:25:10 Then the other one was just a quick little Twitter message that someone sent my way.

00:25:15 And it's pretty cool.

00:25:17 This guy, not the one who sent it to me.

00:25:20 I'm sorry.

00:25:21 I don't remember who sent it.

00:25:21 I should have written it down.

00:25:22 But this person called Xtrek, something to that effect, on Twitter, decided to go scanning the standard library source code for interesting things like, what is the longest class name?

00:25:35 What is the longest function name?

00:25:36 And so on.

00:25:36 So they found out that actually in CPython, the longest class name is 200 characters, just the letter A 200 times, which is some kind of test case.

00:25:48 But for the real ones, there's one called test, mutually exclusive optionals and positions, mixed parent, as the longest class name is there.

00:25:59 In the longest function name, they believe it's test underscore parser underscore regression underscore special underscore character underscore in parameter column of doctrine first line, which is 84 characters long.

00:26:11 And then there's other examples.

00:26:14 Someone says there's actually a test C types that has 33 million characters in it.

00:26:21 Anyway, it's an interesting thread if you're just wondering what the really long names are.

00:26:26 Yeah.

00:26:26 It's almost competitive.

00:26:28 It almost could compete with Java names.

00:26:30 Yeah, exactly.

00:26:31 Standard types right there.

00:26:33 Awesome.

00:26:34 All right.

00:26:34 Well, definitely fun to share all this news with you, Brian.

00:26:37 As always, thanks for doing it.

00:26:39 All right.

00:26:39 Thank you.

00:26:40 Bye.

00:26:40 You bet.

00:26:40 Bye.

00:26:41 Bye.

00:26:41 Thank you for listening to Python Bytes.

00:26:43 Follow the show on Twitter via at Python Bytes.

00:26:45 That's Python Bytes as in B-Y-T-E-S.

00:26:48 And get the full show notes at Python Bytes.fm.

00:26:52 If you have a news item you want featured, just visit Python Bytes.fm and send it our way.

00:26:56 We're always on the lookout for sharing something cool.

00:26:59 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:27:02 Thank you for listening and sharing this podcast with your friends and colleagues.

