00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 92, recorded August 23rd, 2018. I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 Hey, Brian. How are you doing?

00:00:13 I'm doing great.

00:00:13 Yeah, same here. I'm excited to be back together. And I can't wait to talk about some of these things.

00:00:18 We have some like amazing drop the mic sort of stuff coming up. So pretty excited to get into that.

00:00:23 And also pretty excited that DigitalOcean is sponsoring this episode. So thank you, DigitalOcean.

00:00:28 Check them out at pythonbytes.fm/digitalocean. Get $100 credit for new users.

00:00:34 Right now, have we covered the fact that Python is popular?

00:00:37 Yeah, but I wanted to cover it again.

00:00:40 Why not?

00:00:40 So Python is pretty popular. And for the second year in a row, it came out as the number one popular programming language in the IEEE survey.

00:00:52 So there's a every year IEEE puts out a popular programming survey and that it's at the top isn't really news.

00:01:01 What's really kind of cool about it, though, and we'll have a link to the results. It's an interactive results thing. I think we covered it last year.

00:01:09 But this time, Python is number one, even in embedded. And that's the thing that stands out this year.

00:01:16 Yeah. And it's worth pointing out that this survey is for electrical engineers. It's not like the same as, say, the Stack Overflow survey, which is maybe more developer focused.

00:01:25 So it's like you saw another area where Python is sort of taking over, which is awesome. Embedded, like you say.

00:01:31 The article that we're going to link to actually talks about whether or not this is real.

00:01:37 And some people are doubting that Python really is that popular in embedded because, I mean, there's a lot of day-to-day job are embedded.

00:01:46 The embedded work I do is in C++.

00:01:48 There's a big range of what it means to be embedded. So they don't really define that. You have to kind of define that yourself.

00:01:54 I define it mostly as you're developing software on a platform that's not the target platform.

00:02:01 And the target platform doesn't really look like a computer.

00:02:04 Like a Raspberry Pi or maybe like something embedded in your car or something like that?

00:02:09 Yeah, definitely. But even it's a broad definition.

00:02:12 So the embedded software I do actually runs on a Windows machine, but it doesn't look like a Windows machine.

00:02:18 It looks like a, it's a testing equipment.

00:02:21 It looks like a stereo component with dials and stuff.

00:02:23 We don't run Python. We run C++.

00:02:25 However, like you said, like Raspberry Pi, I think there's been a big push lately.

00:02:31 I think that's where this is coming from.

00:02:33 There's been a big push lately of trying to get people involved in more circuits and more real interactive programming with electronics through the use of MicroPython and CircuitPython on like Raspberry Pis and Arduinos.

00:02:48 MicroBits and all that sort of stuff.

00:02:50 And including the Mew editor that really tries to teach people right out of the get-go.

00:02:55 So there is some doubt of whether or not really Python's the top for embedded, but I don't doubt it at all.

00:03:00 I think it's going to stay.

00:03:02 Yeah, I think it's cool.

00:03:02 I mean, you could have the debate of, well, it's on professional shipping embedded devices that are for sale versus embedded in general, which like you say, could include $5 Adafruit type things that people play with or they're using in school, but it's not for sale per se.

00:03:18 Right.

00:03:18 There's a lot of people taking those Adafruit things and turning them into kits for people or products for people to like wear.

00:03:25 And then the people that are learning on that are going to go into, it might go into other embedded jobs.

00:03:33 And I think since Python is faster to develop in, there's a big incentive, I think, for people to use a higher level language and embedded if they can, even in a production level.

00:03:43 Yeah, and if they are, it's got to be Python, right?

00:03:45 Like what else would it be?

00:03:46 Right.

00:03:46 Yeah.

00:03:47 Yeah.

00:03:47 Maybe JavaScript, but that's a little shaky.

00:03:49 Very interesting.

00:03:50 All right.

00:03:51 So are you ready for something incredible?

00:03:53 Yeah.

00:03:54 Is this drop the mic thing you're talking about?

00:03:56 Yeah.

00:03:56 Unfortunately, it's the second one, so I'll have to pick it back up.

00:03:58 But let me work my way into this the way that it develops.

00:04:03 So we have the mailing list, Python dev, okay?

00:04:06 And that's where a lot of the core developers talk.

00:04:08 Okay.

00:04:09 On this list, someone was talking about finding a better way to test the C APIs instead of writing some C tests, some Python tests, and those kinds of things, right?

00:04:19 You can be sympathetic with this, I'm sure.

00:04:21 And they were saying, look, we need to test the C code inside CPython.

00:04:25 And one way to do this would maybe we could use something like Cython.

00:04:29 And we talked previously about how Cython lets you pretty easily integrate with C and Python at the same time.

00:04:38 So there was some debate saying, you know, it might be a good idea.

00:04:40 It might not be a good idea.

00:04:41 Like on one hand, Ccython is changing a lot.

00:04:44 It's a pretty big dependency to take as part of the core development component of Python itself.

00:04:51 Things like that.

00:04:52 But then something pretty incredible came along here.

00:04:57 And I don't know how far along this is or whatever.

00:04:59 But this guy named Yuri steps in and drops a bit of a bombshell.

00:05:03 And he says, hey, you guys, this Cython thing is kind of cool.

00:05:06 And I don't know if you want to do it.

00:05:07 But over at Dropbox, we're working on a new compiler for Python called mypyC.

00:05:12 And it just says, well, this mypyC will compile type annotated Python to an optimized C code, which ultimately compiles to machine instructions.

00:05:23 That's pretty cool.

00:05:24 How about that?

00:05:25 So it's like Cython, right?

00:05:27 And we've seen that where Cython can make things like 20 or 50 times faster in certain circumstances because it's compiled.

00:05:33 Really interesting stuff there.

00:05:35 But the problem with Cython is it's a superset of Python.

00:05:39 You have like the C def.

00:05:40 Like you basically write in a separate language that if you squint, you're like, wait a minute, is that Python?

00:05:46 No, no, no.

00:05:46 There's a lot of weird other stuff going on around here.

00:05:49 This is not Python, but it's Python-like.

00:05:51 And it doesn't even use the same type annotations because it sort of predated that.

00:05:55 So Cython is good, but it has like this, you got to write in Cython, not Python.

00:05:59 This mypyC thing they're talking about, this is straight Python 3.6 code.

00:06:05 It runs on CPython, but you can compile it to machine instructions like Cython.

00:06:10 It's not all of Python.

00:06:11 It's a subset, right?

00:06:13 It's a subset, exactly.

00:06:15 And so I think, you know, the main thing is you have to type annotate everything so it can actually compile it.

00:06:21 Like that's more or less the difference with Cython is you type annotate everything.

00:06:24 But it's a different type.

00:06:26 It's using Cython types.

00:06:27 Right.

00:06:28 But this is using just normal type annotations.

00:06:31 It's pretty incredible.

00:06:33 It says, look, this is standard Python.

00:06:35 It's a subset of Python.

00:06:36 And you can easily integrate with C libraries because of CFFI.

00:06:40 You can even run it on PyPy because it's a subset of Python.

00:06:44 So it's pretty cool.

00:06:47 And if Dropbox releases a full-on compiler for Python, that would shock the world, I think.

00:06:52 Yeah, definitely.

00:06:55 Like even with this, with a subset, to be able to develop it in Python and then do some little extra work to go to the, to make sure you're able to compile it within this, this would be great.

00:07:06 And the extra work is not much.

00:07:07 It's like put type annotations on it.

00:07:09 So maybe you have like three or four functions that you call that are like really called frequently or really a major portion of your time is spent there.

00:07:17 And if you wrote it in like C, it would be way faster.

00:07:19 Well, if you just put type annotations on it, you know, you could probably hit it with this thing.

00:07:23 So pretty interesting little thread that got picked up there.

00:07:28 We'll probably have to watch this and make, update people if we see any more progress.

00:07:33 Yeah, what I did not see is here's a link to the Git repo or here's the announcement or anything like that.

00:07:38 So we'll have to see if anything comes from it.

00:07:40 But I think it's really interesting, you know, that, that we've sort of gotten to this place.

00:07:46 Because from my understanding is Gito is not a huge fan of compiling Python code.

00:07:52 It didn't see a need for this, but he must be involved in this because it's from Dropbox.

00:07:57 And the main work he's doing at Dropbox is on my Pi.

00:08:00 And it's all about this.

00:08:01 So I suspect he's involved somehow, but I have no confirmation of that.

00:08:05 Yeah.

00:08:05 Okay, cool.

00:08:06 Boom.

00:08:06 Mic drop.

00:08:07 Okay, I'll piggyback on that.

00:08:08 Let's, let's talk about Netflix.

00:08:11 They are doing such cool stuff with Python.

00:08:13 Yeah.

00:08:13 So it's Python and more.

00:08:14 There's a kind of a really cool article called Beyond Interactive Notebook Innovation at Netflix.

00:08:21 And as we've all known, Jupyter Notebooks have, and using the Jupyter system has kind of revolutionized a lot of data analysis and machine learning and, and quite a bit of that interactive, interacting with data environment.

00:08:39 And that's true at Netflix as well.

00:08:41 And that's what kind of this article is talking about is a lot of the cool things that they've done.

00:08:46 And it's, it's over the last few years, they've seen a larger and larger growth.

00:08:51 And they've also said, basically, this is our supplied data chain.

00:08:55 So there's, I never really thought about all the different types of people that interact with data, but they, they listed, they have a little like diagram.

00:09:02 They listed like eight, nine or 10 different job roles that interact with data a little bit differently, but they're all interacting with it.

00:09:12 Like, you know, data experts or data analysts or algorithm engineers or data scientists.

00:09:18 There's all these different things that I'm not quite sure what they all do different, but they're all interacting with these huge data sets.

00:09:24 And in their effort to use notebooks and Jupyter to kind of streamline and make things easier for people in the process, they've came up with some really cool extra projects that they've open sourced or developing in the open.

00:09:39 And one of them is, I'm going to run through a few of them.

00:09:42 One of them is called Interact.

00:09:43 And it's an alternative user interface that has some cool things like inline cell toolbars and drag and drop cells.

00:09:51 I didn't know that you couldn't do that in Jupyter, but that's neat.

00:09:55 And a built-in data explorer.

00:09:58 And then if you've got a Jupyter notebook all set up with some data, well, it wouldn't be cool if you could have some of your states parameterized so you can run the whole notebook with different parameters.

00:10:11 This is almost like making a notebook like a function you can call and pass it inputs and get outputs.

00:10:16 Exactly.

00:10:17 And that's what Papermill is partly.

00:10:19 So there's a project called Papermill that parameterizes notebooks.

00:10:22 And then it also does things like if you've parameterized a bunch, you can analyze the different set of parameterized runs and do some analysis on the set.

00:10:32 And then there's, yeah, it's kind of making a notebook kind of, like you said, like a function that you can call.

00:10:37 And then if you want to, if you're using that and you want to share it with other people with the data and with the results, they've put together a thing called commuter that lets people share them together, share them with each other.

00:10:48 And then also scheduling.

00:10:50 So there's a separate article that's attached at the end about how if you've got this function with different parameters and stuff, maybe you want to, it's, you want to test different live data.

00:11:00 So you want to schedule it regularly or different times.

00:11:03 They've got a notebook scheduling system in place.

00:11:07 So all of this is, it's not like a super easy thing to jump into, but they're trying to make it easier for people.

00:11:14 And this is actually some pretty neat things that they've shared with everybody.

00:11:17 This is incredible.

00:11:18 And if you look at this big infrastructure diagram they have, it's like, it's just this entire architecture and cloud platform for running their style of executable notebooks.

00:11:30 Using this new UI on containers you can configure and schedule.

00:11:35 It's really crazy.

00:11:37 And you can even come down and say, I'd like to run on some container with four CPUs and 30 gigs of RAM.

00:11:43 Go.

00:11:44 Right?

00:11:45 That's crazy.

00:11:46 It's kind of amazing.

00:11:48 And I'm trying to start exploring a little bit more of what people are doing with Jupyter notebooks and other parts of the Jupyter system because it's, it is sort of opening up a lot of different data analysis into the open, which is neat.

00:12:01 Yeah.

00:12:01 That is really cool.

00:12:02 Something else I just see in here, and I don't know quite where this shows up, but in that same organization that released all of these projects on GitHub, you know, they're grouped into a bunch of projects under an org and the GitHub org style.

00:12:18 There's a thing called VDOM for Python.

00:12:21 What does it say?

00:12:22 It says a virtual HTML DOM for Python, which is pretty interesting for creating basically HTML and whatnot, like divs and paragraphs and stuff.

00:12:31 So that's also in here somewhere for whatever people want to do with that.

00:12:35 Interesting.

00:12:35 Yeah.

00:12:36 So I feel like this one is massive too.

00:12:38 Like this is a really major thing.

00:12:40 And, you know, organizations that depend on this notebook style, like this could really be a big deal.

00:12:45 And I like that they split it out into different projects.

00:12:48 Like the parameterization idea is, is powerful.

00:12:52 And maybe you can use that by itself.

00:12:54 And if you don't quite like the user interface, and so they've got the interact there that you can use that instead.

00:13:01 These are cool that they've split them out a bit.

00:13:03 I don't know how much they're tied together.

00:13:05 I expect things like Titus and commuter might depend on other pieces more than others.

00:13:12 But it's neat.

00:13:13 It's really neat.

00:13:14 So another thing that is pretty cool that I want to talk about is DigitalOcean.

00:13:19 And I've told you a bunch of things about it last time we talked about projects.

00:13:22 And that's pretty awesome.

00:13:22 Brian, you've heard of Heroku, right?

00:13:25 Yeah.

00:13:25 Do you know what Doku is?

00:13:26 Doku?

00:13:27 I think it's Doku, actually.

00:13:28 No, I don't.

00:13:29 So Doku is apparently a miniature Heroku powered by Docker.

00:13:34 So if you want to have your own Heroku, you can spin up a Linux machine or machines and install this thing called Doku.

00:13:41 And then treat it like Heroku for deploying and managing your code.

00:13:45 Oh, that's neat.

00:13:45 That's neat.

00:13:46 So over at DigitalOcean, they have a one-click deploy for creating Doku servers.

00:13:51 So you should go over there, create a new droplet, and you just choose, I want a Doku thing all set up.

00:13:56 Click.

00:13:56 Boom.

00:13:57 You're ready to make your own little version of Heroku.

00:13:59 Wow.

00:14:00 That's really cool.

00:14:01 Yeah, it's really cool.

00:14:01 So they have all these cool one-click things to create different types of environments.

00:14:05 And I just thought I'd highlight this Doku one because I know people use Heroku a lot.

00:14:09 And if you want some flexibility, this is a really awesome way to do it.

00:14:13 So anyway, check them out at pythonbytes.fm/DigitalOcean.

00:14:18 Get $100 credit if you're a new user to play with Doku or whatever else you want to play with.

00:14:22 All right.

00:14:23 So remember a while ago, we talked about running a Python script as a systemd service.

00:14:30 Yes.

00:14:30 That was a while ago.

00:14:31 It was.

00:14:32 It was quite a while ago.

00:14:32 I'll link to that when we talked about that as well, that episode.

00:14:35 But the idea was I would like to take some Python code and make it, you know, turn on when I boot my Linux system.

00:14:42 The idea was to take a Python script and make it just boot win Linux boots and run in the background.

00:14:49 It's kind of like if you did a cron job, but you have more control, right?

00:14:52 Like your app, your Python code is constantly running.

00:14:55 If it crashes, it'll restart if you configure it that way and stuff.

00:14:58 Well, that's great for Linux.

00:15:00 But what about for Windows, right?

00:15:02 So the equivalent infrastructure in Windows is called a Windows service.

00:15:06 It starts when Windows starts.

00:15:08 If you want it that way, it can run when you're logged out or it can run as a different user.

00:15:13 It can run as a restricted account, all these things.

00:15:16 So if you want your app to run basically as Windows runs, right, then you have to create this Windows service.

00:15:24 Well, it turns out it's quite easy to do this in Python if you use the right libraries.

00:15:29 So there's a cool article that just says how to create a Windows service in Python.

00:15:32 And it's based on this project called PyWin32, which seems to have no documentation.

00:15:38 Maybe I just missed it, but it doesn't seem at all obvious out of use.

00:15:41 But it is on GitHub and pretty popular.

00:15:44 But this article talks about how to create a Windows service.

00:15:47 And the idea is you just derive from a certain class and you override a stop, a start, and a main method.

00:15:53 And boom, you have Python code that runs as if it were part of Windows.

00:15:57 Actually, this is awesome.

00:15:58 I'll use this right away.

00:15:59 Yeah, yeah, it's really cool.

00:16:01 I don't have a good – I've written a couple of Windows services back in the day.

00:16:04 I haven't had a chance or reason to do so recently.

00:16:07 I did take that SystemD idea and do some really cool stuff around my courses for automation there.

00:16:12 But if people are on Windows or they have to deploy to Windows, I think this is a great little example.

00:16:17 So if that appeals to you, if that sounds like something you want to try to do, this is a really accessible way to do it.

00:16:23 That's cool.

00:16:23 Yeah, indeed.

00:16:24 I'm glad that this came out because I thought about doing this before.

00:16:27 I'm like, oh, man, I'm a smart guy.

00:16:28 I can figure this out.

00:16:29 I don't even know where to start looking.

00:16:31 There's like weird registration stuff you have to do.

00:16:34 But it's cool.

00:16:34 You just say like the name of the service is this, the description of the service is this, the way it starts is like on system start or delayed or whatever.

00:16:41 And then you just like run a command to install it.

00:16:43 It's great.

00:16:44 Nice.

00:16:44 Yeah.

00:16:44 You probably want to package it up though when you send it out.

00:16:47 Yeah, you should package it.

00:16:49 Have we talked about packaging before?

00:16:51 I think so.

00:16:52 Not enough.

00:16:52 It's one of the things that should be more accessible.

00:16:55 Okay.

00:16:56 Well, let's talk about it again.

00:16:58 So the Mamu Deshemi, I don't remember how long ago this was.

00:17:03 I don't know if we covered it or not.

00:17:04 But anyway, he wrote an article about different ways to package different levels of Python projects.

00:17:11 And then he did a talk on it.

00:17:13 And then now it's been all this information has been shared with others and edited.

00:17:17 And it's part of the PyPA, the Python Package Authority documentation.

00:17:23 And it's called an overview of packaging for Python.

00:17:26 And it's kind of like how it's broken out.

00:17:29 Because when you want to share Python code, there's different levels.

00:17:32 So if you just want to share a module with somebody, there's that.

00:17:35 And then so, I mean, it starts there and talks about how to just share a simple module with somebody else.

00:17:42 But then you quickly get into packages with source distributions and wheels and possibly binary distributions and how to do that.

00:17:50 And then, but that's complete packages are different than if you want to share an application.

00:17:55 So I do, that's the part where I get fuzzy.

00:17:58 But actually, this is a good starting point that hopefully they'll keep current.

00:18:02 That talks about some of the different ways that you can share applications.

00:18:07 Because, you know, sharing a web application is going to be different.

00:18:10 And if you share it on Heroku, it's going to be different than sharing a desktop application or a command line application or something.

00:18:17 And then also whether or not you want to assume people have Python or whether you want to package Python with it.

00:18:24 And what do you do with the dependencies and all that.

00:18:27 So we've talked about all this before and there's a lot of different solutions.

00:18:32 And so this is a good starting point to take a look at if you want to share some code with somebody else.

00:18:38 Start here and then get lost.

00:18:40 There you go.

00:18:41 I like it.

00:18:42 It brings a lot of the stuff we talked about together.

00:18:43 Like, for example, in the bring your own Python executable section.

00:18:48 It's like, here's a whole bunch of ways to do this.

00:18:51 You could use PyInstaller, CXFreeze, Constructor, which apparently I'd never heard of.

00:18:55 OS Snap.

00:18:56 OSnap.

00:18:57 Another one.

00:18:58 Like, there's a bunch of things in here.

00:18:59 And I actually have only heard about half of them.

00:19:01 So it's pretty cool.

00:19:02 And since applications kind of range, everything else is fairly consistent.

00:19:05 There's like one obvious right way to do it up through packages.

00:19:09 And then it's with applications where it starts going off and feathering out into different solutions.

00:19:15 I think it's because there's a lot of different requirements for applications.

00:19:19 Different than just sharing source code.

00:19:21 So I don't think it's a bad thing that we have a lot of different solutions right now.

00:19:26 We've talked about how it'd be really nice if there was one obvious way.

00:19:30 We're just not there yet.

00:19:31 So here's a good list of some of them.

00:19:33 Yep.

00:19:33 That's really cool.

00:19:34 Well done, Mahmood.

00:19:35 So there was a little bit of drama a few weeks ago around PEP 572 about changing the Python language for an assignment in place assignment operator.

00:19:44 Yeah.

00:19:45 Remember that?

00:19:45 And that was actually, that was part of the, one of the sort of straws that caused Guido to say, all right, I've had it with this.

00:19:52 Tired of fighting over these things.

00:19:53 I'm out.

00:19:53 Well, here's a new PEP that I think proposes a bigger change to the Python language.

00:19:59 This one is not accepted.

00:20:00 It's in draft mode.

00:20:02 So people can respond to it.

00:20:03 However, I actually think the value this one brings is massive.

00:20:08 It's a big deal though.

00:20:09 It's a really big deal.

00:20:10 So the idea is there's PEP 505 now, which is for none aware operators.

00:20:15 And the idea is there are several languages that are proven.

00:20:18 There's some nice design patterns or language patterns that short circuit working with none or null or whatever it is in the Swift.

00:20:28 I forgot about what they call it there, but nothing, right?

00:20:31 So there's basically two ways in which you work with this.

00:20:34 One of these are called null coalescing operators, which lets you substitute a value if you have a none object.

00:20:40 And null aware operators, which lets you chain operations regardless of whether with their null.

00:20:47 So the two languages that are most popular that come to mind have to be C# and Swift.

00:20:52 And both of these have deep support for this concept.

00:20:55 Swift takes it to a whole other level to say you can't even assign the equivalent of none to a variable unless you mark it as nullable explicitly, which is way far out there.

00:21:06 So the idea is like Python could benefit from this.

00:21:10 So there's these two cases, the null coalescing and the null aware.

00:21:13 So I'll give you the null coalescing, right?

00:21:15 It's if you're going to do some kind of weird test, like you'd say something like value, if value is not none else missing, right?

00:21:23 Like this big complicated thing could just be value, question mark, question mark, missing.

00:21:27 It's either going to be the value, but if value is none, then it's the other value missing.

00:21:31 What do you think of that, Brian?

00:21:32 I'm still on the fence.

00:21:34 Okay.

00:21:34 This one to me actually doesn't offer a huge amount of value.

00:21:38 It's okay.

00:21:39 The next one to me is like pretty killer and more with the fluent style of calling functions chained together.

00:21:45 So the null aware member access operator, it's the same basic PEP and the same basic structure, but it's used in a different case.

00:21:53 It lets you chain these fluent interfaces together without testing for none.

00:21:56 So suppose I have a user.

00:21:58 The user has orders.

00:21:59 The orders you can call a first operation, but if it's there's no orders, then it returns none.

00:22:04 But if it does return one, the order has a name, right?

00:22:06 So you would say like if user is none, return none.

00:22:09 User.orders.first.

00:22:11 If the first order is none, then we kind of bail out.

00:22:14 But if you make it through all those tests, you can get first order.name.

00:22:18 So that's a lot of code to be spoken over the air.

00:22:22 But you would now with this new proposal say user?orders.first?name.name.

00:22:28 And it would mean exactly the same thing.

00:22:30 Okay.

00:22:30 If you look at those two lines of code on digital paper, the amount of space on one and the other is ridiculous, right?

00:22:37 Yeah.

00:22:37 Sorry, I didn't mean to cut you off.

00:22:38 First reading of the null aware operators, I was thinking it's just going to make the language more complicated to teach because when you're reading it, it isn't obvious what these things are doing.

00:22:48 However, it does make the language smaller in that you can be more expressive in less code.

00:22:56 And that's a good thing.

00:22:57 I think it would make people more willing to effectively test for none when it could be none without cluttering the code, right?

00:23:05 Like these two examples I gave you, it's like eight lines versus one line.

00:23:09 You're willing to just go, oh, I just think it's there.

00:23:11 I'll just go through it.

00:23:12 And then you'll get none type does not have attributes such and such, right?

00:23:16 Whatever the attribute is, right?

00:23:17 You get that error all the time.

00:23:18 It's one of the most common errors in Python.

00:23:20 But if you just put the question marks in there, that totally goes away.

00:23:23 That's the thing where if you don't think you need that problem, just think about how many times you see that.

00:23:28 Like, you know, none does not have the index operator.

00:23:31 Yes, exactly.

00:23:32 Exactly.

00:23:32 And this basically provides a much nicer way to deal with it.

00:23:37 So my vote is for this feature, especially the null aware member access.

00:23:43 Yeah.

00:23:43 But I would be okay if Python never had it.

00:23:45 But I do think the languages that do have it really make pretty good use of it.

00:23:49 So it's in draft mode.

00:23:50 People can give feedback before some sort of battle erupts over it.

00:23:53 Yeah.

00:23:53 I think it's good.

00:23:54 Yeah.

00:23:55 I do too.

00:23:55 Cool.

00:23:56 It'll let you have a second edition or third edition of your testing book, right?

00:23:59 Because there's probably somewhere you got to put a question mark in there.

00:24:05 You're just adding work for me.

00:24:06 Thanks.

00:24:07 Anyway, it's something for people to check out.

00:24:08 Quite, quite good.

00:24:09 I don't have anything extra to share with the folks.

00:24:11 You, Brian?

00:24:12 I've got a couple of things.

00:24:13 I just noticed the other day that the PyCascades, it's going to be in February, February 23rd and 24th of 2019.

00:24:22 And it's going to be in Seattle this time.

00:24:24 It's the call for proposals is now open.

00:24:27 Oh, that's sweet.

00:24:28 You got a long time too.

00:24:29 You got it now through October 21st to get in your proposal.

00:24:32 Oh, I'm super excited about that.

00:24:34 The opening, the inaugural PyCascades in Vancouver, BC last year was excellent.

00:24:39 And I'm really glad I went.

00:24:40 It was much smaller and it was a really intimate event.

00:24:43 You got to meet a lot of the people who were there.

00:24:44 And I'm looking forward to have it in Seattle.

00:24:47 And it's coming to Portland next year.

00:24:48 So that'll be even better.

00:24:50 I'll try to go and I'll also try to submit something.

00:24:52 That'll be good.

00:24:54 The other thing I wanted to highlight is I just wanted to brag because I got a Test and Code episode out a week or so ago that was with David Heinemeyer Hansen.

00:25:05 And it really went well.

00:25:06 And he's not a Python person, but it's interesting information.

00:25:10 So that was fun.

00:25:12 All right.

00:25:12 So for people who don't know who David Heinemeyer Hansen is, what's his claim to fame?

00:25:17 Well, he's got lots.

00:25:18 But he's the guy that made up Ruby on Rails.

00:25:21 And he's one of the co-founders of Basecamp.

00:25:23 Yeah.

00:25:24 Just that.

00:25:24 So that's pretty awesome.

00:25:26 Yeah.

00:25:27 It's really cool that he was on your show.

00:25:28 And I'm looking forward to checking that out myself.

00:25:31 It's definitely applicable to Python people as well because we talk about language agnostic things like just testing and stuff like that.

00:25:39 Very cool.

00:25:40 Well, thanks for the call out on PyCascades.

00:25:42 Sure.

00:25:42 PyCascades.

00:25:44 But I also was catching up on your podcast, Talk Python.

00:25:49 And they had a couple episodes that were people that learned Python after they didn't get CS degrees and learned Python later, programming later.

00:26:00 And just the whole concept of that and listening to everybody's stories was very interesting.

00:26:05 I like those.

00:26:06 Yeah.

00:26:06 Thank you.

00:26:06 I did a two-part series on that.

00:26:08 And I think it really connected to a lot of people because so many people find their way into our world of programming in Python without going through the traditional CS degree path.

00:26:19 And I think it's just an example of a lot of people doing really great in alternate ways in.

00:26:24 So, yeah, very cool.

00:26:25 Well, good talking to you.

00:26:26 And we'll talk next week.

00:26:27 Yep.

00:26:28 You as well.

00:26:29 Catch you later.

00:26:29 Bye, everyone.

00:26:32 Thank you for listening to Python Bytes.

00:26:34 Follow the show on Twitter via at Python Bytes.

00:26:37 That's Python Bytes as in B-Y-T-E-S.

00:26:40 And get the full show notes at pythonbytes.fm.

00:26:43 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:47 We're always on the lookout for sharing something cool.

00:26:50 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:53 Thank you for listening and sharing this podcast with your friends and colleagues.

