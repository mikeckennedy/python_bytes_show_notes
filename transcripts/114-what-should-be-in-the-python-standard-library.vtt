
00:00:00.000 --> 00:00:06.000
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:06.000 --> 00:00:11.000
This is episode 114 recorded January 23rd, 2019. I'm Michael Kennedy.


00:00:11.000 --> 00:00:12.000
And I'm Brian Aiken.


00:00:12.000 --> 00:00:17.000
And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean.


00:00:17.000 --> 00:00:18.000
Brian, how are you doing?


00:00:18.000 --> 00:00:19.000
I am doing good.


00:00:19.000 --> 00:00:21.000
That's great to hear. I am as well.


00:00:21.000 --> 00:00:27.480
and I hear often people praise Python because it is a batteries included


00:00:27.480 --> 00:00:32.800
language or technology and I think that's really important but it's not a


00:00:32.800 --> 00:00:37.000
subtle debate is it? No, this was an interesting we actually there's a


00:00:37.000 --> 00:00:40.920
article we're going to link to called what should be in the Python standard


00:00:40.920 --> 00:00:45.400
library so with the batteries included we often think of that as well I don't


00:00:45.400 --> 00:00:49.280
know I used to think of it as the standard library now I kind of think of


00:00:49.280 --> 00:00:54.120
it as the standard library plus some of the recommended PyPI packages and stuff.


00:00:54.120 --> 00:00:57.920
Exactly, like there's it's almost like an onion. You have the language, you have


00:00:57.920 --> 00:01:01.840
the standard library, and you have pip install, anti-gravity, like wrapping


00:01:01.840 --> 00:01:05.280
around it. And I agree when I think of batteries included, I think of it as like


00:01:05.280 --> 00:01:08.440
that whole spectrum. Then there's even stuff that you couldn't, can't easily


00:01:08.440 --> 00:01:12.960
install even through PyPI. Things like that are in distributions like the


00:01:12.960 --> 00:01:16.560
scientific packages and stuff. Yep, indeed. We were gonna talk about it last week,


00:01:16.560 --> 00:01:19.320
but I couldn't find an article that didn't say stuff like,


00:01:19.320 --> 00:01:20.520
this is internal.


00:01:20.520 --> 00:01:24.440
But now I found an article on lwn.net,


00:01:24.440 --> 00:01:27.080
and I'm probably not the first one


00:01:27.080 --> 00:01:30.120
to say that this is a really ugly website.


00:01:30.120 --> 00:01:31.400
This is technically true.


00:01:31.400 --> 00:01:33.840
It could certainly use a little bootstrap action


00:01:33.840 --> 00:01:35.200
theme or something.


00:01:35.200 --> 00:01:37.280
But it's by Jake Edge, and Jake Edge


00:01:37.280 --> 00:01:41.320
does a lot of good coverage of the core developer meeting.


00:01:41.320 --> 00:01:42.840
So well done, Jake.


00:01:42.840 --> 00:01:45.200
No, yeah, definitely great information.


00:01:45.200 --> 00:01:46.540
This will be hard to summarize, but it


00:01:46.540 --> 00:01:54.900
But anyway, we've got somebody, I think Jonathan Underwood proposed adding LZ4 compression


00:01:54.900 --> 00:01:57.980
to the standard library because there's already some other compression.


00:01:57.980 --> 00:01:58.980
Right.


00:01:58.980 --> 00:02:00.900
You can do zip files and tar files.


00:02:00.900 --> 00:02:05.580
Why not LZ4 or RAR or some random other type of compression?


00:02:05.580 --> 00:02:06.580
Right.


00:02:06.580 --> 00:02:11.420
And then Brett Cannon proposed making something similar to HashLib if there's a whole bunch


00:02:11.420 --> 00:02:13.260
of other kinds of compression algorithms.


00:02:13.260 --> 00:02:18.540
maybe we could have like a compressed lib or something that had a bunch of different algorithms


00:02:18.540 --> 00:02:25.500
in it, then can of worms opens. So there's an argument against it. Basically, we don't actually,


00:02:25.500 --> 00:02:33.500
standard lib doesn't need LZ4, maybe people do, but standard lib doesn't. It already has BZ2 there,


00:02:33.500 --> 00:02:39.260
which I'm not sure what BZ2 is, I think it's a zip thing. But it's kind of late to remove it,


00:02:39.260 --> 00:02:41.100
since people rely on it.


00:02:41.100 --> 00:02:43.560
And then kind of a discussion ensued,


00:02:43.560 --> 00:02:47.600
like if standard lib is the batteries included,


00:02:47.600 --> 00:02:50.100
shouldn't we have some way to add new batteries?


00:02:50.100 --> 00:02:52.860
Even things that aren't needed by standard library,


00:02:52.860 --> 00:02:54.940
but other people might need?


00:02:54.940 --> 00:02:57.180
And then there's a discussion as well of,


00:02:57.180 --> 00:02:58.940
you can't just rely on PyPI


00:02:58.940 --> 00:03:01.280
because some people don't have easy access to it


00:03:01.280 --> 00:03:02.600
or can't install things.


00:03:02.600 --> 00:03:04.900
- Right, maybe it's like REPL,


00:03:04.900 --> 00:03:06.160
some kind of online REPL,


00:03:06.160 --> 00:03:07.780
and you can type whatever they've installed,


00:03:07.780 --> 00:03:08.620
but that's it.


00:03:08.620 --> 00:03:23.020
That's true. There's online REPL stuff. Then there's also things like people working behind a firewall that have to have proxies to get out and use PyPI, and you have to apply for a proxy password and stuff like that.


00:03:23.020 --> 00:03:33.520
So there's issues. And then it gets bigger as to like, well, if we're not going to add a whole bunch of other stuff, maybe we should look at the stuff we already have and maybe kick some of it out.


00:03:33.520 --> 00:03:35.760
who would decide what gets kicked out?


00:03:35.760 --> 00:03:39.600
And it falls along with the discussion of,


00:03:39.600 --> 00:03:41.160
well, maybe we don't really think of it


00:03:41.160 --> 00:03:42.720
as just the standard libraries,


00:03:42.720 --> 00:03:44.420
or is there batteries included,


00:03:44.420 --> 00:03:47.780
but maybe we could have a standard distribution


00:03:47.780 --> 00:03:51.660
that had some set of recommended PyPI packages.


00:03:51.660 --> 00:03:53.680
- Right, because the initial discussion was,


00:03:53.680 --> 00:03:55.680
can we make standard lib bigger?


00:03:55.680 --> 00:03:57.920
And some of the responses were,


00:03:57.920 --> 00:04:00.200
actually, can we make it smaller?


00:04:00.200 --> 00:04:02.180
Can we have less stuff, not more?


00:04:02.180 --> 00:04:04.100
which I thought was pretty interesting.


00:04:04.100 --> 00:04:07.740
One of the, which has led to, let's make it a lot smaller,


00:04:07.740 --> 00:04:10.260
but let's make much of what is standard lib,


00:04:10.260 --> 00:04:11.740
like a standard distribution,


00:04:11.740 --> 00:04:15.100
like Anaconda versus Miniconda type of thing.


00:04:15.100 --> 00:04:16.420
- Right. - With more or less,


00:04:16.420 --> 00:04:18.260
but you can choose that sort of thing, right?


00:04:18.260 --> 00:04:20.100
- Yep, there really isn't a solution here,


00:04:20.100 --> 00:04:22.380
it's just an interesting discussion going on,


00:04:22.380 --> 00:04:23.860
so I thought I'd bring it up.


00:04:23.860 --> 00:04:26.800
Anything that would happen would end up happening


00:04:26.800 --> 00:04:29.820
through PEPs, and the PEP process


00:04:29.820 --> 00:04:31.740
is sort of stalled right now, so.


00:04:31.740 --> 00:04:33.520
We gotta figure out that first.


00:04:33.520 --> 00:04:34.780
- Yeah, it's interesting.


00:04:34.780 --> 00:04:37.860
I certainly see some of the drawbacks, right?


00:04:37.860 --> 00:04:41.480
Like one of the complaints or one of the cautionary flags


00:04:41.480 --> 00:04:43.460
that was raised when they said, "Oh, could we add this?"


00:04:43.460 --> 00:04:45.820
It was like, "You're trying to give us more puppies.


00:04:45.820 --> 00:04:47.100
"We have a kennel full of puppies


00:04:47.100 --> 00:04:48.460
"and we're really busy taking care of them.


00:04:48.460 --> 00:04:51.780
"Like, you're trying to give us more of these modules


00:04:51.780 --> 00:04:54.020
"that we have to care for indefinitely, right?


00:04:54.020 --> 00:04:55.520
"It's almost impossible to take something


00:04:55.520 --> 00:04:56.880
"out of the standard lid,


00:04:56.880 --> 00:05:00.100
"so maybe we shouldn't do that so much."


00:05:00.100 --> 00:05:02.640
because releasing the next version of Python


00:05:02.640 --> 00:05:06.500
means all the standard lib modules are up to date,


00:05:06.500 --> 00:05:09.120
got all their patches and any additional features.


00:05:09.120 --> 00:05:12.460
You know, it's just a bigger software project to corral.


00:05:12.460 --> 00:05:15.220
And so Steve Dower suggested maybe like a smaller


00:05:15.220 --> 00:05:17.180
standard library that has a standard distribution


00:05:17.180 --> 00:05:19.340
that comes with the stuff that kind of got pushed out


00:05:19.340 --> 00:05:20.700
or something to that effect.


00:05:20.700 --> 00:05:23.860
And maybe those comes with even more batteries,


00:05:23.860 --> 00:05:27.260
like a bunch of PyPI modules curated by core developers.


00:05:27.260 --> 00:05:28.860
And I thought that's a pretty cool idea.


00:05:28.860 --> 00:05:31.740
Like you have a mini Python and then you've got,


00:05:31.740 --> 00:05:34.140
oh, and it comes with requests and it comes with,


00:05:34.140 --> 00:05:36.780
I don't know, pandas or like whatever, you name it, right?


00:05:36.780 --> 00:05:40.880
It comes with some web framework included, I don't know.


00:05:40.880 --> 00:05:42.380
Right, but it's a cool idea.


00:05:42.380 --> 00:05:44.020
And then you could update it independently.


00:05:44.020 --> 00:05:49.020
- One of the interesting arguments for taking things out


00:05:49.020 --> 00:05:52.240
is that there are things that are in the standard library


00:05:52.240 --> 00:05:54.420
that once you get into Python a little bit,


00:05:54.420 --> 00:05:57.020
you realize that's not the right way to do it.


00:05:57.020 --> 00:06:03.020
The standard way to do certain things is to use requests, and requests isn't in there.


00:06:03.020 --> 00:06:08.060
Yeah, almost nobody uses the built-in ACP library unless they are explicitly trying


00:06:08.060 --> 00:06:09.660
to go without dependencies.


00:06:09.660 --> 00:06:15.020
Yeah, and there are people that try to do things just without dependencies.


00:06:15.020 --> 00:06:16.020
It's an interesting thing.


00:06:16.020 --> 00:06:22.020
For instance, unit test, one of the reasons why a lot of people recommend or say they'd


00:06:22.020 --> 00:06:27.000
rather use unit test over pytest is because unit test is in the standard library and pytest


00:06:27.000 --> 00:06:31.960
is not. And why is the unit test in the standard library? Because the standard


00:06:31.960 --> 00:06:35.560
library needs something to test itself with. Right, and that predates everything.


00:06:35.560 --> 00:06:41.360
I mean it's very like JUnit-esque, right? It's got some old old-school style to it,


00:06:41.360 --> 00:06:45.640
but you know, that's the way it was. It can't come out. Like for instance, if we


00:06:45.640 --> 00:06:50.440
had the standard distribution, we could possibly put like unit test out and into


00:06:50.440 --> 00:06:54.080
the standard distribution. Right, and then pytest could be one of those curated


00:06:54.080 --> 00:06:56.400
modules that comes with the distribution, right?


00:06:56.400 --> 00:06:57.840
- And those are just a couple examples.


00:06:57.840 --> 00:07:00.360
I kind of like this idea of a standard distribution thing.


00:07:00.360 --> 00:07:02.960
- I do too, I mean, because if there's an improvement


00:07:02.960 --> 00:07:05.840
to one of the modules there, you can pip install,


00:07:05.840 --> 00:07:08.420
upgrade it, whereas you gotta wait 18 months


00:07:08.420 --> 00:07:10.280
for it to come out with part of CPython.


00:07:10.280 --> 00:07:12.640
- Yeah, and making, another thing is if we make


00:07:12.640 --> 00:07:16.880
the standard distribution smaller, it makes the process


00:07:16.880 --> 00:07:20.020
for releasing new versions of Python a little easier


00:07:20.020 --> 00:07:21.520
because there's less stuff to test.


00:07:21.520 --> 00:07:23.160
- Yeah, I'm not sure if this is a good idea or not.


00:07:23.160 --> 00:07:26.240
My first impression is I see a lot of benefits to it.


00:07:26.240 --> 00:07:28.080
I can certainly see some drawbacks, right?


00:07:28.080 --> 00:07:30.080
Like, oh, you got the wrong distribution.


00:07:30.080 --> 00:07:32.680
Not only did you have to have Python 3.6 and not 3.5,


00:07:32.680 --> 00:07:36.400
but you also need to have the super duper core.


00:07:36.400 --> 00:07:38.940
But at the same time, there's a lot of benefits to it, right?


00:07:38.940 --> 00:07:42.000
Like the standard Python experience could get better


00:07:42.000 --> 00:07:45.680
if it came with a bunch of awesome curated PyPI packages.


00:07:45.680 --> 00:07:47.480
- Yeah, so I'll just leave this as I,


00:07:47.480 --> 00:07:49.120
anybody, everybody involved with this,


00:07:49.120 --> 00:07:51.360
I'd like to have people just remember to listen


00:07:51.360 --> 00:07:53.780
to each other and not talk past each other,


00:07:53.780 --> 00:07:55.600
talk at each other and listen.


00:07:55.600 --> 00:07:56.440
- Yeah, yeah, yeah.


00:07:56.440 --> 00:07:58.400
And finally, I guess maybe just a data point.


00:07:58.400 --> 00:08:01.620
If people look at what Microsoft did with .NET,


00:08:01.620 --> 00:08:05.640
they had a huge, huge distribution and base class library


00:08:05.640 --> 00:08:07.540
and they decided that this is not,


00:08:07.540 --> 00:08:09.040
doesn't make sense to maintain all this stuff


00:08:09.040 --> 00:08:10.920
if we're gonna have a cross platform .NET,


00:08:10.920 --> 00:08:11.780
which they created.


00:08:11.780 --> 00:08:15.120
So they made a lot of the .NET standard library,


00:08:15.120 --> 00:08:18.340
base class library, basically pip installable, right?


00:08:18.340 --> 00:08:19.340
Like you get this core thing


00:08:19.340 --> 00:08:21.200
and then you install the little other bits.


00:08:21.200 --> 00:08:23.960
So it's not that different than what Steve is proposing.


00:08:23.960 --> 00:08:26.480
- How is that received by the .NET community?


00:08:26.480 --> 00:08:28.000
- I think it's mixed, honestly.


00:08:28.000 --> 00:08:30.360
Like it makes life a little bit more hard, right?


00:08:30.360 --> 00:08:31.440
'Cause you can't just use the stuff.


00:08:31.440 --> 00:08:32.280
You're like, oh, you gotta have


00:08:32.280 --> 00:08:34.320
these dependencies and install it.


00:08:34.320 --> 00:08:36.220
But it did make it possible for them


00:08:36.220 --> 00:08:38.520
to have a Linux and macOS version


00:08:38.520 --> 00:08:41.040
that they can now use when before it was stuck in Windows.


00:08:41.040 --> 00:08:43.200
So they're like, this part only belongs in Windows,


00:08:43.200 --> 00:08:44.080
it can't go somewhere else.


00:08:44.080 --> 00:08:46.080
So now it's gonna be part of this external thing


00:08:46.080 --> 00:08:47.800
that you can only get by installing


00:08:47.800 --> 00:08:49.280
that dependency on Windows.


00:08:49.280 --> 00:08:50.940
So I don't know, there's some benefits,


00:08:50.940 --> 00:08:54.380
but also, you know, packaging is already challenging in Python,


00:08:54.380 --> 00:08:55.780
so I'm not sure I want to poke the bear.


00:08:55.780 --> 00:08:56.460
Yeah, OK.


00:08:56.460 --> 00:08:56.960
Cool.


00:08:56.960 --> 00:08:58.140
It's pretty cool.


00:08:58.140 --> 00:09:00.300
Speaking of pretty cool, something


00:09:00.300 --> 00:09:03.180
I've wanted to install but I don't have enough devices


00:09:03.180 --> 00:09:05.460
to justify is this thing called Home Assistant.


00:09:05.460 --> 00:09:06.220
Do you know this?


00:09:06.220 --> 00:09:08.040
Well, we've talked about it a couple times,


00:09:08.040 --> 00:09:09.540
but I haven't tried it yet.


00:09:09.540 --> 00:09:11.500
Neither have I, because I think I


00:09:11.500 --> 00:09:15.980
might have one smart light bulb I bought on accident.


00:09:15.980 --> 00:09:18.180
Technically, I have a Nest.


00:09:18.180 --> 00:09:20.700
My car is electric, so it has a charger,


00:09:20.700 --> 00:09:22.580
but the charger doesn't integrate with Home Assistant,


00:09:22.580 --> 00:09:23.740
so that doesn't help me.


00:09:23.740 --> 00:09:25.460
So I would really love to have it,


00:09:25.460 --> 00:09:26.780
but I just don't have enough.


00:09:26.780 --> 00:09:29.420
My home is too old school and too analog for it.


00:09:29.420 --> 00:09:32.300
Anyway, Home Assistant is this cool web server


00:09:32.300 --> 00:09:35.860
that integrates all your smart home appliances and things


00:09:35.860 --> 00:09:37.340
and collects data about them.


00:09:37.340 --> 00:09:39.700
Can run as a web server on a Raspberry Pi,


00:09:39.700 --> 00:09:40.820
and you just leave that in your house,


00:09:40.820 --> 00:09:42.580
and it does magic, which is cool.


00:09:42.580 --> 00:09:43.420
- Very cool.


00:09:43.420 --> 00:09:44.940
- So Paul Cutler, one of our listeners,


00:09:44.940 --> 00:09:46.620
let us know that they have now launched


00:09:46.620 --> 00:09:49.820
a data science portal to process


00:09:49.820 --> 00:09:52.380
and work with your data that comes from your home


00:09:52.380 --> 00:09:53.340
backed by Home Assistant.


00:09:53.340 --> 00:09:54.180
That's pretty cool, right?


00:09:54.180 --> 00:09:55.220
- Oh yeah, nice.


00:09:55.220 --> 00:09:56.860
You can have like temperature sensors and stuff.


00:09:56.860 --> 00:09:57.700
- Yeah, exactly.


00:09:57.700 --> 00:09:59.420
And it's already collecting all that data


00:09:59.420 --> 00:10:02.060
on just because what Home Assistant is,


00:10:02.060 --> 00:10:05.260
but now they've set up a special way to work with it.


00:10:05.260 --> 00:10:08.200
So they said, look, one of the core ideas of Home Assistant


00:10:08.200 --> 00:10:10.740
is all of your data lives on your Raspberry Pi


00:10:10.740 --> 00:10:12.860
on an SD card, not somewhere else.


00:10:12.860 --> 00:10:15.500
So they set up this Home Assistant data science website


00:10:15.500 --> 00:10:18.380
to help you work with that data and analyze it.


00:10:18.380 --> 00:10:20.480
And then they went so far to create a new add-on


00:10:20.480 --> 00:10:24.480
for their iOS that runs Home Assistant


00:10:24.480 --> 00:10:27.120
called JupyterLab Lite.


00:10:27.120 --> 00:10:30.200
This runs JupyterLab right on your Raspberry Pi


00:10:30.200 --> 00:10:31.200
hosting Home Assistant.


00:10:31.200 --> 00:10:33.240
So on the same thing that is your Home Assistant,


00:10:33.240 --> 00:10:35.720
now you have a JupyterLab running there


00:10:35.720 --> 00:10:37.480
to analyze your data in place.


00:10:37.480 --> 00:10:38.320
- All right, cool.


00:10:38.320 --> 00:10:40.400
- Yeah, and they also created a Python library


00:10:40.400 --> 00:10:42.520
called the Haas, that's their operating system,


00:10:42.520 --> 00:10:45.800
data detective that's based on things like pandas


00:10:45.800 --> 00:10:48.400
that lets you start get going quick.


00:10:48.400 --> 00:10:49.360
So anyway, it's pretty cool.


00:10:49.360 --> 00:10:50.200
- Yeah, very nice.


00:10:50.200 --> 00:10:51.400
- So if people have a smart home


00:10:51.400 --> 00:10:53.600
and they wanna do some data science-y stuff about it,


00:10:53.600 --> 00:10:56.480
or maybe even build a product for other people


00:10:56.480 --> 00:10:59.840
so that they have more data control over their home.


00:10:59.840 --> 00:11:00.680
- Yeah.


00:11:00.680 --> 00:11:01.600
- Yeah, so that's pretty cool.


00:11:01.600 --> 00:11:04.760
And then finally, I think I finally decided


00:11:04.760 --> 00:11:06.280
my first IoT project.


00:11:06.280 --> 00:11:07.640
We'll see if I can actually make it happen,


00:11:07.640 --> 00:11:09.800
but I've always wanted to build an IoT thing


00:11:09.800 --> 00:11:11.800
and I'm always like, "But I don't really have any use for one."


00:11:11.800 --> 00:11:13.280
But I think I have a use for one now.


00:11:13.280 --> 00:11:14.120
- Oh, tell me about it.


00:11:14.120 --> 00:11:15.720
- Yeah, so you might sympathize with this.


00:11:15.720 --> 00:11:19.080
I know a lot of people who do things like we do would.


00:11:19.080 --> 00:11:22.600
So I have a separate office of my garage


00:11:22.600 --> 00:11:26.100
where I can record quietly away from the kids,


00:11:26.100 --> 00:11:28.040
but especially in the summer, kids are home,


00:11:28.040 --> 00:11:29.480
they come over, they wanna talk to me,


00:11:29.480 --> 00:11:31.400
or my wife's like, "Hey, I gotta ask you something."


00:11:31.400 --> 00:11:33.400
And I might be in the middle of recording a course


00:11:33.400 --> 00:11:35.760
or talking to you, recording a podcast.


00:11:35.760 --> 00:11:38.160
So I'm gonna get a big fat button


00:11:38.160 --> 00:11:41.480
and I can press the button, recording, not recording,


00:11:41.480 --> 00:11:43.960
and then down by the door before people even get to here,


00:11:43.960 --> 00:11:45.680
it's gonna say recording, not recording.


00:11:45.680 --> 00:11:46.520
- Oh, that'd be cool.


00:11:46.520 --> 00:11:47.340
- Wouldn't that be fun?


00:11:47.340 --> 00:11:48.180
That's super easy.


00:11:48.180 --> 00:11:49.020
- Yeah, what if you could hook it up


00:11:49.020 --> 00:11:51.040
to the Skype connection status?


00:11:51.040 --> 00:11:52.880
- Oh, yeah, maybe so.


00:11:52.880 --> 00:11:54.600
Do you have Camtasia running?


00:11:54.600 --> 00:11:55.780
Are you on a Skype call?


00:11:55.780 --> 00:11:58.120
Yeah, oh, if it could be automatic, that'd be sweet.


00:11:58.120 --> 00:11:58.960
Yeah, why not, right?


00:11:58.960 --> 00:12:00.360
Zoom, couple of those things?


00:12:00.360 --> 00:12:01.400
- Yeah. - Yeah, all right, though.


00:12:01.400 --> 00:12:02.960
There we go, it just went up a notch.


00:12:02.960 --> 00:12:04.300
(laughing)


00:12:04.300 --> 00:12:05.260
Pretty cool.


00:12:05.260 --> 00:12:07.120
- It started easy, now it's hard.


00:12:07.120 --> 00:12:09.400
- Now all of a sudden I have a machine learning problem.


00:12:09.400 --> 00:12:10.640
No, just kidding.


00:12:10.640 --> 00:12:12.320
Bunch of APIs I gotta learn.


00:12:12.320 --> 00:12:13.200
That's cool.


00:12:13.200 --> 00:12:15.860
All right, speaking of machine learning in the future,


00:12:15.860 --> 00:12:16.700
what do you got next?


00:12:16.700 --> 00:12:19.740
- Kevin Markham over at Dataschool.io,


00:12:19.740 --> 00:12:21.800
I don't know if we've talked about him before,


00:12:21.800 --> 00:12:23.920
but Dataschool.io is pretty cool.


00:12:23.920 --> 00:12:24.760
- Yeah, Kevin's doing cool stuff.


00:12:24.760 --> 00:12:25.640
- This isn't a lab for him.


00:12:25.640 --> 00:12:26.480
- Yeah.


00:12:26.480 --> 00:12:28.120
- It's just he's got a lot of cool resources.


00:12:28.120 --> 00:12:29.320
But he wrote an article called,


00:12:29.320 --> 00:12:31.840
"What is the future of the Pandas library?"


00:12:31.840 --> 00:12:32.920
And I didn't realize,


00:12:32.920 --> 00:12:36.360
Pandas is one of those zero-virt projects,


00:12:36.360 --> 00:12:39.440
which is odd considering everybody uses it.


00:12:39.440 --> 00:12:40.280
- Yeah.


00:12:40.280 --> 00:12:42.680
- But they're considering going to a 1.0 release


00:12:42.680 --> 00:12:44.120
early this year.


00:12:44.120 --> 00:12:46.960
And there's an article describing some of the stuff


00:12:46.960 --> 00:12:50.440
that is coming new and coming with some of the new versions


00:12:50.440 --> 00:12:51.520
of Pandas.


00:12:51.520 --> 00:12:54.440
One of the things is, we already know method chaining


00:12:54.440 --> 00:12:56.760
is becoming more popular with functional programming


00:12:56.760 --> 00:12:58.120
and people used to that.


00:12:58.120 --> 00:13:00.860
You can already do that with a lot of stuff in Pandas.


00:13:00.860 --> 00:13:02.760
What's new really is just that they're


00:13:02.760 --> 00:13:04.040
going to try to take that further


00:13:04.040 --> 00:13:07.640
and make more methods that support chaining.


00:13:07.640 --> 00:13:09.120
All you have to do to support chaining


00:13:09.120 --> 00:13:12.560
is to return the object that you're operating on


00:13:12.560 --> 00:13:14.280
as a return for a function call


00:13:14.280 --> 00:13:15.920
so that you can chain a bunch of function calls.


00:13:15.920 --> 00:13:18.000
- And a lot of times they probably return nothing,


00:13:18.000 --> 00:13:19.840
so they might as well just return the thing again


00:13:19.840 --> 00:13:22.120
so you can have this fluent API, which would be nice, right?


00:13:22.120 --> 00:13:24.800
- Yeah, there's also people in the know


00:13:24.800 --> 00:13:26.760
might know what Apache Arrow is.


00:13:26.760 --> 00:13:29.280
I really don't know what Apache Arrow is,


00:13:29.280 --> 00:13:31.400
but apparently it's something that can help


00:13:31.400 --> 00:13:34.200
the back end of Pandas become a little bit more efficient,


00:13:34.200 --> 00:13:36.200
and so they're gonna try to push that out.


00:13:36.200 --> 00:13:37.720
It'll probably be after 1.0


00:13:37.720 --> 00:13:39.680
'cause it doesn't change the interface at all.


00:13:39.680 --> 00:13:40.520
- Yeah, it's cool.


00:13:40.520 --> 00:13:42.240
I don't know much about Apache Arrow, but it sounds cool.


00:13:42.240 --> 00:13:44.680
They talk about things like working with data


00:13:44.680 --> 00:13:47.520
that's larger than what you can fit into memory


00:13:47.520 --> 00:13:48.360
and things like that.


00:13:48.360 --> 00:13:50.960
So instead of loading everything just into


00:13:50.960 --> 00:13:52.320
kind of data frame or something,


00:13:52.320 --> 00:13:54.700
it's like it'll stream the data off disk


00:13:54.700 --> 00:13:55.540
and all sorts of stuff.


00:13:55.540 --> 00:13:56.360
It's pretty cool.


00:13:56.360 --> 00:13:58.440
- Yep, and I know a lot of people listening to this


00:13:58.440 --> 00:13:59.920
use pandas every day.


00:13:59.920 --> 00:14:01.720
I'm starting to use it more.


00:14:01.720 --> 00:14:04.560
So the rest of my spiel will be stuff


00:14:04.560 --> 00:14:06.680
that I don't really know about, but you might.


00:14:06.680 --> 00:14:09.300
One of the things is apparently it's hard to do


00:14:09.300 --> 00:14:12.520
custom data types because of some of the limitations.


00:14:12.520 --> 00:14:14.320
So you can kind of have to jump through hoops,


00:14:14.320 --> 00:14:16.780
but there is going to be extension arrays


00:14:16.780 --> 00:14:19.820
that make it easier to create custom data types


00:14:19.820 --> 00:14:22.860
for using with pandas, which that sounds neat.


00:14:22.860 --> 00:14:24.580
And then some things that are going away.


00:14:24.580 --> 00:14:26.740
So some deprecations that have been proposed


00:14:26.740 --> 00:14:29.180
in place parameter, it doesn't really work


00:14:29.180 --> 00:14:31.340
as it's supposed to, and it mucks up chaining.


00:14:31.340 --> 00:14:33.700
So they're going to try to deprecate that.


00:14:33.700 --> 00:14:38.700
The IX accessor, which is going away or it's deprecating,


00:14:38.900 --> 00:14:41.200
use LOC or ILOC instead.


00:14:41.200 --> 00:14:42.500
The panel data structure,


00:14:42.500 --> 00:14:45.540
apparently you should use multi-indexing instead.


00:14:45.540 --> 00:14:47.620
And the sparse data frame never really worked


00:14:47.620 --> 00:14:48.580
as it was supposed to,


00:14:48.580 --> 00:14:50.900
so they're gonna just support data frame.


00:14:50.900 --> 00:14:54.520
And last but not least, in the 1.0 release,


00:14:54.520 --> 00:14:57.420
they will stop support for 2.7.


00:14:57.420 --> 00:14:58.820
- Woohoo!


00:14:58.820 --> 00:15:00.480
Viva modern Python, right?


00:15:00.480 --> 00:15:01.320
- Yeah.


00:15:01.320 --> 00:15:02.380
- That's right.


00:15:02.380 --> 00:15:04.780
Living on, so no more legacy Python, super.


00:15:04.780 --> 00:15:06.940
Okay, I think these things are all great.


00:15:06.940 --> 00:15:09.180
I don't use pandas enough to really say a whole lot,


00:15:09.180 --> 00:15:11.500
but I do think--


00:15:11.500 --> 00:15:15.380
Kevin talks a little bit about the zero-ver impression


00:15:15.380 --> 00:15:16.780
of it not being ready and so on.


00:15:16.780 --> 00:15:19.220
And it feels like these deprecations are kind of like,


00:15:19.220 --> 00:15:22.300
all right, these are a few of the rough edges of the API


00:15:22.300 --> 00:15:23.980
that we wish we could get rid of,


00:15:23.980 --> 00:15:25.860
and we're going to call it 1.0, and we're


00:15:25.860 --> 00:15:27.820
going to drop the few things that we don't really


00:15:27.820 --> 00:15:29.140
like, including Python 2.


00:15:29.140 --> 00:15:29.640
Yeah.


00:15:29.640 --> 00:15:30.420
Pretty sweet.


00:15:30.420 --> 00:15:33.060
All right, also sweet is DigitalOcean.


00:15:33.060 --> 00:15:35.780
So if you want to do anything with containers,


00:15:35.780 --> 00:15:36.780
you got to orchestrate them,


00:15:36.780 --> 00:15:37.980
you got to get them to talk together.


00:15:37.980 --> 00:15:40.660
So check out Kubernetes and DigitalOcean


00:15:40.660 --> 00:15:45.060
just launched their public Kubernetes service, DOK8.


00:15:45.060 --> 00:15:48.020
Super simple, managed Kubernetes service.


00:15:48.020 --> 00:15:49.340
So you can deploy faster,


00:15:49.340 --> 00:15:52.180
configure your Kubernetes cluster in seconds


00:15:52.180 --> 00:15:55.140
and provision access your cluster in a few minutes.


00:15:55.140 --> 00:15:57.860
You can scale reliably based on incoming traffic


00:15:57.860 --> 00:15:59.780
and everything stored in block storage


00:15:59.780 --> 00:16:01.880
and behind load balancers, stuff like that.


00:16:01.880 --> 00:16:06.400
and people are seeing a 2.4 times better price


00:16:06.400 --> 00:16:08.800
to performance ratio compared to other providers.


00:16:08.800 --> 00:16:10.920
So if you wanna do all that cool stuff or more


00:16:10.920 --> 00:16:13.260
with a free $100 credit for new users,


00:16:13.260 --> 00:16:16.360
check them out at pythonbytes.fm/digitalocean.


00:16:16.360 --> 00:16:19.360
Now, I'd love to talk about something that we haven't,


00:16:19.360 --> 00:16:20.880
I don't think we've touched on it very much,


00:16:20.880 --> 00:16:23.000
but maybe packaging up Python apps,


00:16:23.000 --> 00:16:24.520
have we talked about that?


00:16:24.520 --> 00:16:25.400
- Yes, we have.


00:16:25.400 --> 00:16:27.280
- I do remember that now, that three week stint.


00:16:27.280 --> 00:16:28.600
- And we will more.


00:16:28.600 --> 00:16:30.080
- We will more.


00:16:30.080 --> 00:16:33.520
This one is, at least it promises to be pretty excellent.


00:16:33.520 --> 00:16:36.440
So let us count the ways there's more than this.


00:16:36.440 --> 00:16:40.040
We have pex, which is a way to make a zip file


00:16:40.040 --> 00:16:43.120
of Python code executable with its dependencies.


00:16:43.120 --> 00:16:47.800
We have pyinstaller, which will take a Python environment


00:16:47.800 --> 00:16:50.320
plus its dependencies and turn it into


00:16:50.320 --> 00:16:54.840
kind of an embedded Python interpreter plus


00:16:54.840 --> 00:16:57.080
like a zip file or something to that effect


00:16:57.080 --> 00:16:59.660
of its dependencies and its source files.


00:16:59.660 --> 00:17:03.620
and then run that as like an exe or a .app.


00:17:03.620 --> 00:17:05.740
There's py2app, there's cxfreeze,


00:17:05.740 --> 00:17:06.740
there's many of these, right?


00:17:06.740 --> 00:17:07.580
- Yes.


00:17:07.580 --> 00:17:10.580
- The new kid on the block is PyOxidizer.


00:17:10.580 --> 00:17:11.420
- Okay.


00:17:11.420 --> 00:17:13.140
- So when you take the py element


00:17:13.140 --> 00:17:16.900
and you combine it with iron and oxygen


00:17:16.900 --> 00:17:18.140
through the Rust compiler,


00:17:18.140 --> 00:17:20.220
you get the PyOxidizer outcome.


00:17:20.220 --> 00:17:24.100
Now, so PyOxidizer is a set of Rust crates,


00:17:24.100 --> 00:17:25.580
libraries I'm guessing,


00:17:25.580 --> 00:17:26.580
maybe is the way to put it,


00:17:26.580 --> 00:17:29.300
that facilitate building libraries and binaries


00:17:29.300 --> 00:17:31.180
containing Python interpreters.


00:17:31.180 --> 00:17:32.020
- Interesting.


00:17:32.020 --> 00:17:35.180
- So CXFreeze, PyInstaller, you're like,


00:17:35.180 --> 00:17:36.780
okay, great, well, somebody loves Rust,


00:17:36.780 --> 00:17:38.420
and they're just like doing it again,


00:17:38.420 --> 00:17:40.100
but this time with Rust, because amazing.


00:17:40.100 --> 00:17:42.340
But this one has some special capabilities


00:17:42.340 --> 00:17:43.160
that maybe are better.


00:17:43.160 --> 00:17:45.200
So it makes a single executable file,


00:17:45.200 --> 00:17:47.660
an exe, or .app, or something,


00:17:47.660 --> 00:17:50.660
and all the dependencies and all the resources,


00:17:50.660 --> 00:17:54.340
like pyc files, are embedded inside the executable.


00:17:54.340 --> 00:17:57.260
So like with PyInstaller, you get an exe,


00:17:57.260 --> 00:17:59.660
and then a bunch of loose files and like zip files


00:17:59.660 --> 00:18:01.380
and directories and somehow all that stuff


00:18:01.380 --> 00:18:03.420
gets like put back together to run.


00:18:03.420 --> 00:18:06.600
Here you get a single AXE or executable


00:18:06.600 --> 00:18:09.220
that takes those and puts them inside the binary


00:18:09.220 --> 00:18:10.740
as a resource and then runs it.


00:18:10.740 --> 00:18:11.580
- That's cool.


00:18:11.580 --> 00:18:12.400
- That's cool, right?


00:18:12.400 --> 00:18:15.700
So this is of course the oxidizer part comes from a Rust


00:18:15.700 --> 00:18:18.580
and these are compiled from Rust


00:18:18.580 --> 00:18:20.180
and basically the Rust,


00:18:20.180 --> 00:18:22.580
it becomes like a Rust executable, right?


00:18:22.580 --> 00:18:25.980
And the Rust executable code is responsible


00:18:25.980 --> 00:18:29.140
for managing and running the embedded Python interpreter


00:18:29.140 --> 00:18:30.380
in all of its operations.


00:18:30.380 --> 00:18:32.420
So it's like totally self-contained.


00:18:32.420 --> 00:18:33.620
- Okay, this is kind of cool.


00:18:33.620 --> 00:18:34.460
- It's pretty cool, right?


00:18:34.460 --> 00:18:36.400
So it says it's like all these others that I mentioned,


00:18:36.400 --> 00:18:39.380
except for the produced executables contain embedded,


00:18:39.380 --> 00:18:43.380
statically linked Python interpreters, so no dependencies.


00:18:43.380 --> 00:18:45.500
They have very little runtime dependencies


00:18:45.500 --> 00:18:47.460
unlike the OS it runs on.


00:18:47.460 --> 00:18:49.220
And everything is run from memory


00:18:49.220 --> 00:18:51.540
rather than extracting temporary Python files


00:18:51.540 --> 00:18:53.280
to a directory and trying to run them from there


00:18:53.280 --> 00:18:54.760
with weird paths and stuff.


00:18:54.760 --> 00:18:55.940
So I'm pretty excited about this.


00:18:55.940 --> 00:18:58.140
I haven't got a chance to try it, but I want to.


00:18:58.140 --> 00:18:58.980
- Yeah, me too.


00:18:58.980 --> 00:18:59.980
- Yeah, it looks really promising.


00:18:59.980 --> 00:19:02.660
It looks like this is the way it probably should be.


00:19:02.660 --> 00:19:05.600
So I'm pretty excited if it works the way they're promising.


00:19:05.600 --> 00:19:08.020
And you have to work with no files on the operating system.


00:19:08.020 --> 00:19:09.460
You get one file, so it's simple.


00:19:09.460 --> 00:19:12.420
But not all file systems are simple, right?


00:19:12.420 --> 00:19:15.720
- Right, and actually, I love it when I can program,


00:19:15.720 --> 00:19:17.460
work on a project where I don't have to deal


00:19:17.460 --> 00:19:18.660
with the file system at all,


00:19:18.660 --> 00:19:21.220
because sometimes it's just kind of a pain.


00:19:21.220 --> 00:19:24.340
But anybody that's using tools can go,


00:19:24.340 --> 00:19:27.420
hey, I can automate, I want to automate some part of my job.


00:19:27.420 --> 00:19:31.100
And often that involves dealing with the file system.


00:19:31.100 --> 00:19:34.740
And RealPython just recently put out an article


00:19:34.740 --> 00:19:37.340
called Working with Files in Python.


00:19:37.340 --> 00:19:41.940
And at first I'm like, oh cool, another file system thing.


00:19:41.940 --> 00:19:44.220
But it's a pretty nice article.


00:19:44.220 --> 00:19:45.900
It's a very comprehensive write-up.


00:19:45.900 --> 00:19:49.420
And my first, they cover both legacy ways,


00:19:49.420 --> 00:19:53.220
like the OS and sys versions to do some of these things


00:19:53.220 --> 00:19:54.860
that I'll cover in just a second,


00:19:54.860 --> 00:19:56.300
but they also use Pathlib.


00:19:56.300 --> 00:19:58.380
I'm trying to use Pathlib more and more,


00:19:58.380 --> 00:20:01.660
but Pathlib is for more recent versions of Python,


00:20:01.660 --> 00:20:03.540
and you might not be there.


00:20:03.540 --> 00:20:05.940
However, it might be that you're used to doing,


00:20:05.940 --> 00:20:08.260
you've done file system stuff in the past,


00:20:08.260 --> 00:20:09.980
and you wanna try Pathlib also.


00:20:09.980 --> 00:20:11.940
So having the examples right next to each other


00:20:11.940 --> 00:20:13.580
is kinda nice to be able to say,


00:20:13.580 --> 00:20:16.140
"Hey, I used to do this in OS,


00:20:16.140 --> 00:20:18.460
"and now I'm gonna use the Pathlib version here."


00:20:18.460 --> 00:20:19.300
So that's cool.


00:20:19.300 --> 00:20:20.460
- Yeah, yeah, quite cool.


00:20:20.460 --> 00:20:22.020
- I'm not gonna read the article,


00:20:22.020 --> 00:20:24.920
but a lot of the stuff they might have to do


00:20:24.920 --> 00:20:28.460
is get a directory listing, what all's in a directory,


00:20:28.460 --> 00:20:31.700
looking at file attributes, creating directories,


00:20:31.700 --> 00:20:33.780
doing pattern matching on file names,


00:20:33.780 --> 00:20:35.500
traversing directories and doing stuff


00:20:35.500 --> 00:20:37.140
with the files that are there,


00:20:37.140 --> 00:20:39.060
creating temporary directories and files,


00:20:39.060 --> 00:20:41.440
deleting, copying, moving, renaming.


00:20:41.440 --> 00:20:43.420
They include in this article how to deal with


00:20:43.420 --> 00:20:47.040
zip and tar files, including reading the contents of those.


00:20:47.040 --> 00:20:48.940
So there's quite a bit of stuff here.


00:20:48.940 --> 00:20:50.420
- Yeah, it's really, really nice


00:20:50.420 --> 00:20:55.680
standard comprehensive real Python article. So well done on that. One of the


00:20:55.680 --> 00:20:59.880
things that I like about this is it doesn't go here's a way to read zip files.


00:20:59.880 --> 00:21:04.720
Here's a way to create directories. It goes here are the ways, all the ways in


00:21:04.720 --> 00:21:08.540
the standard library to do this and when you would choose this over that and why


00:21:08.540 --> 00:21:13.640
that's better and so on. So for example like with path from pathlib you can say


00:21:13.640 --> 00:21:17.520
I want to create the directories but normally there'd be an exception if it


00:21:17.520 --> 00:21:19.880
already exists, you can say, it's okay if it exists.


00:21:19.880 --> 00:21:20.860
I just need it to be there.


00:21:20.860 --> 00:21:23.440
Like this is a idempotent type of thing


00:21:23.440 --> 00:21:24.680
I'm trying to do.


00:21:24.680 --> 00:21:25.600
Stuff like that, right?


00:21:25.600 --> 00:21:29.400
Or if I want to create multiple directories in a chain,


00:21:29.400 --> 00:21:31.020
like how do I create the intermediate ones


00:21:31.020 --> 00:21:33.440
without loops and other annoying checks?


00:21:33.440 --> 00:21:34.400
So yeah, pretty nice.


00:21:34.400 --> 00:21:37.240
- Yeah, it's good to have all that stuff in one place too.


00:21:37.240 --> 00:21:38.960
- Yeah, it's definitely a good reference thing, right?


00:21:38.960 --> 00:21:40.120
Like you probably don't need,


00:21:40.120 --> 00:21:43.640
if you've got to do all the things listed here at once,


00:21:43.640 --> 00:21:44.480
I don't know what you're doing.


00:21:44.480 --> 00:21:46.920
You've got something going on that's a little crazy.


00:21:46.920 --> 00:21:49.400
Like I got to zip and tar stuff and create directories


00:21:49.400 --> 00:21:51.960
and get the file attributes, right?


00:21:51.960 --> 00:21:55.600
But it's certainly good to have as a reference for when


00:21:55.600 --> 00:21:56.800
you've got to do one of them.


00:21:56.800 --> 00:21:59.440
Yeah, but you usually have to do one or two of these things.


00:21:59.440 --> 00:22:01.880
You might have to create multiple directories


00:22:01.880 --> 00:22:04.440
and then read the file in there or something.


00:22:04.440 --> 00:22:05.480
Yeah, for sure.


00:22:05.480 --> 00:22:07.680
All right, so this last one that I picked for us,


00:22:07.680 --> 00:22:10.960
Brian, this is a little bit motivated by a conversation


00:22:10.960 --> 00:22:11.960
we had before.


00:22:11.960 --> 00:22:15.560
We had talked about having Python, the command you type


00:22:15.560 --> 00:22:17.780
on a terminal or a command prompt,


00:22:17.780 --> 00:22:20.060
being converted from meaning Python 2


00:22:20.060 --> 00:22:23.020
to meaning Python 3 as part of this whole transition, right?


00:22:23.020 --> 00:22:23.860
- Yes.


00:22:23.860 --> 00:22:24.700
- I think what Red Hat was doing


00:22:24.700 --> 00:22:26.740
was basically saying there shall be no Python,


00:22:26.740 --> 00:22:29.580
you have to type Python 2 or type Python 3


00:22:29.580 --> 00:22:31.780
on the new Red Hat Enterprise Linux.


00:22:31.780 --> 00:22:33.500
And there was some debate about that.


00:22:33.500 --> 00:22:37.980
So David Furfice sent a really cool thread


00:22:37.980 --> 00:22:41.580
from pep394, and it says,


00:22:41.580 --> 00:22:45.460
"Look, this thing that you sensibly suggested,"


00:22:45.460 --> 00:22:47.900
or at least debated on the show recently.


00:22:47.900 --> 00:22:49.740
It's been tried and it didn't go super well.


00:22:49.740 --> 00:22:50.780
So Homebrew tried it.


00:22:50.780 --> 00:22:54.100
Homebrew said, you know what, Python equals Python 3, yes.


00:22:54.100 --> 00:22:55.800
And there was a bunch of knock-on effects


00:22:55.800 --> 00:22:57.380
and they said, we're really sorry,


00:22:57.380 --> 00:22:59.780
we kind of broke some stuff, we'll put it back.


00:22:59.780 --> 00:23:02.980
So Homebrew tried it and they had to actually roll it back


00:23:02.980 --> 00:23:04.780
and there's a link to that conversation.


00:23:04.780 --> 00:23:09.780
Also on the PEP 394, there's some interesting conversation


00:23:09.780 --> 00:23:11.460
over on GitHub around it.


00:23:11.460 --> 00:23:16.700
so this PEP three nine four is allow the python command not to be installed


00:23:16.700 --> 00:23:18.140
basically


00:23:18.140 --> 00:23:22.220
uh... other minor changes so basically requiring you to type python two or to


00:23:22.220 --> 00:23:23.820
type python three


00:23:23.820 --> 00:23:25.620
so there's no way to decide python


00:23:25.620 --> 00:23:28.500
which to me doesn't feel like a great fix like


00:23:28.500 --> 00:23:31.140
we want to move to the next version of python so we're


00:23:31.140 --> 00:23:35.140
when python four comes out it's gonna be like well everyone's using python three


00:23:35.140 --> 00:23:37.860
in their tutorials and they keep breaking and it would


00:23:37.860 --> 00:23:40.320
it doesn't seem very scalable but uh...


00:23:40.320 --> 00:23:42.420
Nonetheless, that's what the thing says.


00:23:42.420 --> 00:23:44.140
So I want to read you a couple of thoughts


00:23:44.140 --> 00:23:46.680
that Gideon Van Rossum had about this.


00:23:46.680 --> 00:23:49.980
So somebody said, Python doesn't exist


00:23:49.980 --> 00:23:52.660
as a command on macOS, so it's solved.


00:23:52.660 --> 00:23:54.680
Right, so he's like, no, no, no.


00:23:54.680 --> 00:23:56.820
Python 2 doesn't exist as a built-in command,


00:23:56.820 --> 00:23:59.660
but Python definitely does.


00:23:59.660 --> 00:24:02.620
So however, I'm still unhappy with,


00:24:02.620 --> 00:24:03.700
basically people are saying, like,


00:24:03.700 --> 00:24:06.680
if you type Python and that means Python 2,


00:24:06.680 --> 00:24:09.720
what that is saying is the core developers


00:24:09.720 --> 00:24:14.520
prefer Python 2 over Python 3, because if you typed a simplest statement to run Python,


00:24:14.520 --> 00:24:17.120
it does old Python, not new Python.


00:24:17.120 --> 00:24:22.600
So there's an endorsement to say, let's not encourage Python 2, legacy Python, let's have


00:24:22.600 --> 00:24:25.240
Python point to Python 3, it's what we've been saying.


00:24:25.240 --> 00:24:29.120
So Guido said, I'm still unhappy with any kind of endorsement of Python pointing to


00:24:29.120 --> 00:24:30.600
Python 3.


00:24:30.600 --> 00:24:33.760
When the user gets bitten by this, they're going to be really unhappy.


00:24:33.760 --> 00:24:38.880
Regardless of what macOS does, I think I would be happier in the future if Python as a command


00:24:38.880 --> 00:24:39.880
does not exist.


00:24:39.880 --> 00:24:42.480
And you have to say Python 2 or Python 3.


00:24:42.480 --> 00:24:49.120
Right, so anyway, that's just a bit of a follow-up to this Python equals Python 3 discussion


00:24:49.120 --> 00:24:50.120
we had.


00:24:50.120 --> 00:24:51.120
Yeah.


00:24:51.120 --> 00:24:54.920
Yeah, I'm not super happy with it because I feel like, well, what happens when the next


00:24:54.920 --> 00:24:55.920
version of Python comes out?


00:24:55.920 --> 00:24:59.280
Then it just gets complicated in the same way, but still, it's okay.


00:24:59.280 --> 00:25:01.640
I think that's our children's problem.


00:25:01.640 --> 00:25:02.640
That's right.


00:25:02.640 --> 00:25:03.640
It's like global warming.


00:25:03.640 --> 00:25:04.640
That's someone else's problem.


00:25:04.640 --> 00:25:05.640
We're just going to kick that down the road.


00:25:05.640 --> 00:25:10.640
Let them deal with what happens when you type Python and it goes to Python 3, not 4.


00:25:10.640 --> 00:25:14.640
And how many other tools have like, which grep do you want?


00:25:14.640 --> 00:25:16.640
Do you want grep 2 or grep 4?


00:25:16.640 --> 00:25:19.640
Exactly. You want to run homebrew? There are seven choices.


00:25:19.640 --> 00:25:22.640
Which version of homebrew you have installed do you want to run?


00:25:22.640 --> 00:25:25.640
Like, no, I just want to run homebrew. Preferably the latest.


00:25:25.640 --> 00:25:29.640
Anyway, yeah. I guess that summarizes our thoughts, doesn't it?


00:25:29.640 --> 00:25:31.640
Yeah.


00:25:31.640 --> 00:25:34.640
Cool. Well, I do have one quick extra thing. Do you have any?


00:25:34.640 --> 00:25:35.920
- No, not right now.


00:25:35.920 --> 00:25:37.520
- So I'll just throw this thing out here


00:25:37.520 --> 00:25:38.960
because it wouldn't be a show


00:25:38.960 --> 00:25:40.800
if we didn't mention Anthony Shaw somehow, right?


00:25:40.800 --> 00:25:43.200
- Yeah, he's a good friend of the show.


00:25:43.200 --> 00:25:44.040
- That's right.


00:25:44.040 --> 00:25:47.120
So he wrote a letter to the Python community in Africa,


00:25:47.120 --> 00:25:50.160
which is a pretty interesting summation


00:25:50.160 --> 00:25:52.680
of the state of the Python community


00:25:52.680 --> 00:25:54.720
throughout the different regions of Africa


00:25:54.720 --> 00:25:56.320
and really highlighting a lot of cool stuff


00:25:56.320 --> 00:25:57.360
that's happening over there.


00:25:57.360 --> 00:25:58.200
- Oh, that's cool.


00:25:58.200 --> 00:26:01.200
- Yeah, so he says, look, if you look at what they're doing,


00:26:01.200 --> 00:26:02.640
there's actually a lot of stuff


00:26:02.640 --> 00:26:04.800
that the broader Python community can learn


00:26:04.800 --> 00:26:06.320
for what people are doing there.


00:26:06.320 --> 00:26:08.880
And I'll let you all read the article, it's really long,


00:26:08.880 --> 00:26:10.800
and it's just, this is an extra, right?


00:26:10.800 --> 00:26:12.360
Not a deep analysis or whatever,


00:26:12.360 --> 00:26:13.760
but just to give you a sense,


00:26:13.760 --> 00:26:18.680
like the attendance in terms of gender of PyCon NA


00:26:18.680 --> 00:26:21.440
was 50% male and 50% female.


00:26:21.440 --> 00:26:23.640
Like think of other tech conferences where that's the case.


00:26:23.640 --> 00:26:25.000
- Yeah, I've never been to one.


00:26:25.000 --> 00:26:26.480
- Neither have I.


00:26:26.480 --> 00:26:27.320
Neither have I.


00:26:27.320 --> 00:26:28.360
It wouldn't be terrible, would it?


00:26:28.360 --> 00:26:29.840
Like that looks like the population.


00:26:29.840 --> 00:26:31.920
Hey, wouldn't it be cool if your tech community


00:26:31.920 --> 00:26:34.280
look like the population in general.


00:26:34.280 --> 00:26:36.040
Anyway, he covers a bunch of stuff like that


00:26:36.040 --> 00:26:37.400
and there's a lot of interesting things going on.


00:26:37.400 --> 00:26:40.600
So I thought I'd give him a shout out there.


00:26:40.600 --> 00:26:42.200
I know we've laughed a lot on the show, Brian,


00:26:42.200 --> 00:26:43.360
but I don't think we're done.


00:26:43.360 --> 00:26:44.240
- No, we're not.


00:26:44.240 --> 00:26:45.800
This is what I was waiting for, actually.


00:26:45.800 --> 00:26:48.440
No, it was all good content, but it was good.


00:26:48.440 --> 00:26:49.800
So we have our joke.


00:26:49.800 --> 00:26:51.120
- Are you telling it or am I telling it?


00:26:51.120 --> 00:26:51.940
- You can tell it.


00:26:51.940 --> 00:26:54.160
- Okay, so this comes to us from Luke Russell,


00:26:54.160 --> 00:26:56.280
who sent in a joke, which is great


00:26:56.280 --> 00:26:58.360
because it helps us to have jokes


00:26:58.360 --> 00:26:59.520
if people send them to us.


00:26:59.520 --> 00:27:00.360
- Yeah.


00:27:00.360 --> 00:27:02.360
So this is a knock-knock joke.


00:27:02.360 --> 00:27:03.360
You ready?


00:27:03.360 --> 00:27:04.360
Yeah.


00:27:04.360 --> 00:27:05.360
Knock-knock.


00:27:05.360 --> 00:27:06.360
Who's there?


00:27:06.360 --> 00:27:07.360
Java.


00:27:07.360 --> 00:27:08.360
Takes a while to get started.


00:27:08.360 --> 00:27:09.360
Hold on.


00:27:09.360 --> 00:27:10.360
We're good now.


00:27:10.360 --> 00:27:11.360
We're running.


00:27:11.360 --> 00:27:12.360
I love that.


00:27:12.360 --> 00:27:16.360
I told this a couple times at work and instead of like the pause, I counted on my fingers.


00:27:16.360 --> 00:27:21.360
Well, as long as they can't see you, it's fine.


00:27:21.360 --> 00:27:26.360
So, actually, this has brought back memories of a really funny, doesn't directly involve


00:27:26.360 --> 00:27:29.860
Python, but it involves open source and if it were made in a later date, it probably


00:27:29.860 --> 00:27:33.220
would be involving Python, but instead it involves Java.


00:27:33.220 --> 00:27:35.060
Video, which is really funny.


00:27:35.060 --> 00:27:35.900
- Yeah.


00:27:35.900 --> 00:27:37.260
- Called Java Forever.


00:27:37.260 --> 00:27:38.780
- This is an amazing video.


00:27:38.780 --> 00:27:40.060
So people watch this.


00:27:40.060 --> 00:27:41.820
It's like high production value.


00:27:41.820 --> 00:27:43.580
I hadn't seen this before.


00:27:43.580 --> 00:27:45.460
And it's really, really hilarious.


00:27:45.460 --> 00:27:47.180
- Yeah, so there's this family.


00:27:47.180 --> 00:27:49.320
They love .NET, Microsoft,


00:27:49.320 --> 00:27:51.140
and they will never stray from them.


00:27:51.140 --> 00:27:52.780
Like a very authoritative father.


00:27:52.780 --> 00:27:55.480
But there's a rebellious 18-year-old


00:27:55.480 --> 00:27:57.180
who loves open source and Java.


00:27:57.180 --> 00:27:59.560
And all sorts of crazy mayhem ensues.


00:27:59.560 --> 00:28:01.360
and we can't do it justice here,


00:28:01.360 --> 00:28:02.640
so I'll just link to the YouTube.


00:28:02.640 --> 00:28:04.160
It's pretty funny, check it out.


00:28:04.160 --> 00:28:05.000
- Yeah.


00:28:05.000 --> 00:28:06.280
- All right. - All right.


00:28:06.280 --> 00:28:07.480
- Thanks for the joke, Brian.


00:28:07.480 --> 00:28:08.640
- Thank you. - Yeah, catch you later.


00:28:08.640 --> 00:28:09.480
- Bye.


00:28:09.480 --> 00:28:10.680
- Thank you for listening to Python Bytes.


00:28:10.680 --> 00:28:13.160
Follow the show on Twitter via @PythonBytes.


00:28:13.160 --> 00:28:16.320
That's Python Bytes as in B-Y-T-E-S.


00:28:16.320 --> 00:28:19.720
And get the full show notes at pythonbytes.fm.


00:28:19.720 --> 00:28:21.320
If you have a news item you want featured,


00:28:21.320 --> 00:28:23.780
just visit pythonbytes.fm and send it our way.


00:28:23.780 --> 00:28:26.920
We're always on the lookout for sharing something cool.


00:28:26.920 --> 00:28:28.800
On behalf of myself and Brian Aukin,


00:28:28.800 --> 00:28:33.360
This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

