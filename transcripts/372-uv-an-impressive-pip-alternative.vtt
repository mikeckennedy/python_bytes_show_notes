WEBVTT

00:00:00.000 --> 00:00:02.240
- Hello, and welcome to Python Bytes,

00:00:02.240 --> 00:00:03.880
where we deliver Python news and headlines

00:00:03.880 --> 00:00:05.520
directly to your earbuds.

00:00:05.520 --> 00:00:10.520
This is episode 372, recorded February 20th, 2024.

00:00:10.520 --> 00:00:12.600
And I'm Michael Kennedy.

00:00:12.600 --> 00:00:13.800
- And I'm Brian Okken.

00:00:13.800 --> 00:00:17.600
- This episode is brought to you by Scout APM.

00:00:17.600 --> 00:00:19.880
Super psyched to have them supporting the show.

00:00:19.880 --> 00:00:21.460
So we'll tell you more about them later,

00:00:21.460 --> 00:00:22.560
but please check them out.

00:00:22.560 --> 00:00:24.520
The link is in the podcast player show notes

00:00:24.520 --> 00:00:25.640
or on the website.

00:00:25.640 --> 00:00:27.880
If you are one of the lucky ones, Brian,

00:00:27.880 --> 00:00:29.520
who is attending this live,

00:00:29.520 --> 00:00:32.440
they got here by going to pythonbytes.fm/live,

00:00:32.440 --> 00:00:35.020
crushing the bell, saying get notified.

00:00:35.020 --> 00:00:37.880
They got notified when this comes on, when it's scheduled.

00:00:37.880 --> 00:00:39.280
And here they are.

00:00:39.280 --> 00:00:40.320
For those of you who are just listening,

00:00:40.320 --> 00:00:42.000
we super appreciate that anyway.

00:00:42.000 --> 00:00:44.640
So, however you're listening, thank you, thank you.

00:00:44.640 --> 00:00:47.000
Connect with us over on Mastodon,

00:00:47.000 --> 00:00:49.680
we're on Fossodon, @brianocken, @mkennedy,

00:00:49.680 --> 00:00:51.760
and @pythonbytes.

00:00:51.760 --> 00:00:54.240
Brian, before we jump into the news,

00:00:54.240 --> 00:00:56.980
and before I forget, I just wanna make a quick announcement.

00:00:56.980 --> 00:01:00.300
I will be at PyCon Philippines starting,

00:01:00.300 --> 00:01:04.860
I leave tomorrow at, I fly from Portland to San Francisco

00:01:04.860 --> 00:01:07.460
at 8 p.m., and then I leave San Francisco at midnight.

00:01:07.460 --> 00:01:09.700
So who knows what state I'm gonna be in,

00:01:09.700 --> 00:01:12.060
but I'm pretty sure with the time zone change

00:01:12.060 --> 00:01:13.420
and the travels and all this,

00:01:13.420 --> 00:01:15.380
there's not gonna be a Python Bytes next week.

00:01:15.380 --> 00:01:18.100
So we're gonna be probably skipping next week,

00:01:18.100 --> 00:01:19.660
which is a good chance for people to catch up

00:01:19.660 --> 00:01:21.100
if they fell behind.

00:01:21.100 --> 00:01:23.140
- Yeah, and also I'm jealous,

00:01:23.140 --> 00:01:24.640
and I hope you have a great time.

00:01:24.640 --> 00:01:25.480
- Thank you very much.

00:01:25.480 --> 00:01:26.540
I'm gonna have a great time.

00:01:26.540 --> 00:01:30.860
I worked, was writing the keynote speech yesterday,

00:01:30.860 --> 00:01:31.780
and it's gonna be good.

00:01:31.780 --> 00:01:32.820
It's coming together nicely.

00:01:32.820 --> 00:01:34.340
So it's always nerve-wracking.

00:01:34.340 --> 00:01:37.260
I don't know how, what is your way of working

00:01:37.260 --> 00:01:39.020
on talks and stuff?

00:01:39.020 --> 00:01:41.260
Like I wanna be prepared,

00:01:41.260 --> 00:01:42.980
and I'm the kind of person that would get prepared

00:01:42.980 --> 00:01:44.180
a month or two months early,

00:01:44.180 --> 00:01:46.860
but then if I write the stuff and then put it away

00:01:46.860 --> 00:01:47.700
and then come back to it,

00:01:47.700 --> 00:01:49.220
I've kind of lost the inspiration

00:01:49.220 --> 00:01:50.660
and the nuances and the details.

00:01:50.660 --> 00:01:52.180
So I don't wanna write it too soon,

00:01:52.180 --> 00:01:53.900
but I also don't wanna wait 'til the last minute.

00:01:53.900 --> 00:01:56.460
So there's this weird trade-off, I feel.

00:01:56.460 --> 00:01:59.780
I, mostly I try, I usually try to cover too much stuff

00:01:59.780 --> 00:02:02.180
in talks, so I try to narrow it down.

00:02:02.180 --> 00:02:04.580
And then, yeah, I practice the heck out of it.

00:02:04.580 --> 00:02:06.580
The ones where some talks,

00:02:06.580 --> 00:02:08.780
I like am fiddling with the slides too much

00:02:08.780 --> 00:02:10.540
until like five minutes beforehand,

00:02:10.540 --> 00:02:11.820
and that goes terribly.

00:02:11.820 --> 00:02:15.660
So I, yeah, I like to do it early in practice.

00:02:15.660 --> 00:02:17.540
- All right, well, over to you.

00:02:17.540 --> 00:02:19.940
I know you have a big announcement.

00:02:19.940 --> 00:02:20.780
- Yeah. - I heard you're coming

00:02:20.780 --> 00:02:21.600
in first.

00:02:21.600 --> 00:02:22.440
Yeah, you are, okay.

00:02:22.440 --> 00:02:23.260
- Am I first?

00:02:23.260 --> 00:02:24.100
Yeah.

00:02:24.260 --> 00:02:25.460
I'm pretty excited.

00:02:25.460 --> 00:02:30.460
The folks at Astral, including Charlie Marsh and others,

00:02:30.460 --> 00:02:34.100
have released UV, a Python packaging,

00:02:34.100 --> 00:02:35.780
it's Python packaging in Rust,

00:02:35.780 --> 00:02:40.020
and it's not another packaging tool.

00:02:40.020 --> 00:02:42.140
It is the Python end.

00:02:42.140 --> 00:02:46.220
So like replacing, this is actually incredible.

00:02:46.220 --> 00:02:50.260
It's replacing Pip, pip tools and Virtualamp

00:02:50.260 --> 00:02:53.720
all in one new Rust-driven tool.

00:02:53.720 --> 00:02:58.900
Their announcement said maybe UV represents a milestone

00:02:58.900 --> 00:03:01.540
in our pursuit of cargo for Python,

00:03:01.540 --> 00:03:04.500
comprehensive Python project and package manager

00:03:04.500 --> 00:03:07.660
that's fast, reliable, and easy to use.

00:03:07.660 --> 00:03:10.020
They're also kind of, it's interesting,

00:03:10.020 --> 00:03:13.060
combined in this announcement is that they're taking,

00:03:13.060 --> 00:03:17.580
Astral is taking stewardship of Armin Roenicker's Rai tool.

00:03:17.580 --> 00:03:18.660
That's an experimental tool.

00:03:18.660 --> 00:03:20.900
So I'm not sure what that has to do with this,

00:03:20.900 --> 00:03:22.700
but I don't know, it's interesting.

00:03:22.700 --> 00:03:26.020
But have you given this a try yet?

00:03:26.020 --> 00:03:27.500
- Oh, yes.

00:03:27.500 --> 00:03:29.220
I am so psyched about this.

00:03:29.220 --> 00:03:30.940
Charlie and team, congratulations,

00:03:30.940 --> 00:03:33.660
'cause this is setting the world on fire

00:03:33.660 --> 00:03:35.820
in a lot of interesting ways.

00:03:35.820 --> 00:03:40.820
So I, you know, Charlie aimed this right at like my style

00:03:40.820 --> 00:03:44.140
of programming and working with Python dependencies

00:03:44.140 --> 00:03:45.020
and projects.

00:03:45.020 --> 00:03:48.940
So on one hand we have just the pip, pip-free side, right?

00:03:48.940 --> 00:03:51.580
And then on the other, you've got the poetry

00:03:51.580 --> 00:03:56.460
and other pip-inf where you've got like some other API

00:03:56.460 --> 00:03:58.020
that kind of manages everything.

00:03:58.020 --> 00:03:59.940
And I want some of the benefits of that,

00:03:59.940 --> 00:04:03.460
but I want it to be just a simple requirement.txt

00:04:03.460 --> 00:04:05.140
or something like that in the end, right?

00:04:05.140 --> 00:04:05.980
- Yeah.

00:04:05.980 --> 00:04:08.540
- And so I use pip tools and pip tools will go and say,

00:04:08.540 --> 00:04:10.580
okay, what do you say you actually need?

00:04:10.580 --> 00:04:12.560
And then let's build out what would be

00:04:12.560 --> 00:04:14.620
into the virtual environment after that.

00:04:14.620 --> 00:04:17.500
And it's great, but you know, the command pip compile,

00:04:17.500 --> 00:04:19.460
like for mine, I don't know how long it takes,

00:04:19.460 --> 00:04:24.100
probably 15 seconds to pip compile, update the list

00:04:24.100 --> 00:04:25.860
of things for Talk Python Training.

00:04:25.860 --> 00:04:29.540
I think there's 250 dependencies in the dev version.

00:04:29.540 --> 00:04:30.900
It's out of control.

00:04:30.900 --> 00:04:34.260
And it just takes a real, real long time with this instant.

00:04:34.260 --> 00:04:36.740
And it's just so good.

00:04:36.740 --> 00:04:38.820
They have some benchmarks up there

00:04:38.820 --> 00:04:41.580
and it's like pip sync versus UV.

00:04:41.580 --> 00:04:44.620
Pip sync is like 60 milliseconds

00:04:44.620 --> 00:04:46.500
versus almost five seconds, right?

00:04:46.500 --> 00:04:47.860
Those are different types.

00:04:47.860 --> 00:04:49.580
It's, it just happens versus you,

00:04:49.580 --> 00:04:51.860
like, okay, hold on, it's working.

00:04:51.860 --> 00:04:52.700
You know what I mean?

00:04:52.700 --> 00:04:53.540
- Yeah.

00:04:53.540 --> 00:04:55.580
- And what's really pretty interesting is

00:04:55.580 --> 00:04:58.380
that it looks like it's gotten a lot of,

00:04:58.380 --> 00:05:01.620
it's not necessarily that it's just

00:05:01.620 --> 00:05:04.900
because it's written in rough, rough, rust,

00:05:04.900 --> 00:05:06.380
reading rough as I'm saying that,

00:05:06.380 --> 00:05:07.940
not just that it's written in rust,

00:05:07.940 --> 00:05:08.860
which it happens to be,

00:05:08.860 --> 00:05:11.860
'cause that's the vibe of Astral, right?

00:05:11.860 --> 00:05:12.980
Starting with the rough stuff,

00:05:12.980 --> 00:05:17.060
but that they've maybe unlocked some different algorithms

00:05:17.060 --> 00:05:19.540
or techniques or something like that,

00:05:19.540 --> 00:05:21.540
where even if it were in Python, it would be faster,

00:05:21.540 --> 00:05:22.620
which is pretty interesting.

00:05:22.620 --> 00:05:24.860
- Yeah, there's some caching that they've done

00:05:24.860 --> 00:05:28.220
and of like site-wide caching and keeping,

00:05:28.220 --> 00:05:30.780
also keeping pip actually makes sense

00:05:30.780 --> 00:05:31.820
to have some of this stuff,

00:05:31.820 --> 00:05:36.540
virtualenv and pip outside of the Python tool chain system

00:05:36.540 --> 00:05:38.820
so that because you're gonna want it

00:05:38.820 --> 00:05:39.980
in each virtual environment,

00:05:39.980 --> 00:05:43.500
so having it installed outside is kind of interesting.

00:05:43.500 --> 00:05:47.780
So yeah, I'm pretty, it's super fast.

00:05:47.780 --> 00:05:52.060
The hope is to be API compatible

00:05:52.060 --> 00:05:54.180
or at least interface compatible.

00:05:54.180 --> 00:05:58.020
It's in the, they just don't have all of the features yet.

00:05:58.020 --> 00:06:01.260
So, but like, I don't mean to say

00:06:01.260 --> 00:06:03.540
that it's not worth trying already.

00:06:03.540 --> 00:06:04.980
It is production ready right now.

00:06:04.980 --> 00:06:07.460
And that's what they're, they've tested the heck out of it.

00:06:07.460 --> 00:06:10.580
It's just that you have to like work with your workflow

00:06:10.580 --> 00:06:12.340
to make sure that you work with it.

00:06:12.340 --> 00:06:16.260
So I was amusingly trying it out yesterday

00:06:16.260 --> 00:06:19.700
and ran into like three things right away that,

00:06:19.700 --> 00:06:21.020
or two things that didn't work.

00:06:21.020 --> 00:06:24.100
So I did, tried to use the dash dash prompt

00:06:24.100 --> 00:06:28.180
to have virtualenv just create my virtual environment

00:06:28.180 --> 00:06:31.220
with the same name and prompt isn't supported yet,

00:06:31.220 --> 00:06:34.100
but it is, I went to file a defect and it was already fixed.

00:06:34.100 --> 00:06:35.260
It just hasn't been released yet.

00:06:35.260 --> 00:06:38.140
So, you know, probably by the time you listen to this,

00:06:38.140 --> 00:06:40.060
it's probably been released and it'll work.

00:06:40.060 --> 00:06:41.540
- They're doing a lot of releases, aren't they?

00:06:41.540 --> 00:06:44.060
- Yeah, there's been seven releases in four days.

00:06:44.060 --> 00:06:46.660
It's incredible and a really responsive team.

00:06:46.660 --> 00:06:48.260
A lot of people are trying it out though.

00:06:48.260 --> 00:06:51.300
So yeah, I'm glad they're responsive

00:06:51.300 --> 00:06:54.300
'cause there's a bunch of issues people are working on.

00:06:54.300 --> 00:06:55.580
It's really fun to watch.

00:06:55.580 --> 00:06:58.100
The other thing was, oh,

00:06:58.100 --> 00:07:01.460
oh, so virtual environments work really fast.

00:07:01.460 --> 00:07:03.300
It's like so fast.

00:07:03.300 --> 00:07:05.580
And the resolver actually is something

00:07:05.580 --> 00:07:07.700
we don't really talk about too much,

00:07:07.700 --> 00:07:09.580
but the resolver, like you said,

00:07:09.580 --> 00:07:10.860
when you're pip installing something,

00:07:10.860 --> 00:07:12.660
if you have like a requirements file,

00:07:12.660 --> 00:07:14.300
you got a bunch of projects in it

00:07:14.300 --> 00:07:16.980
or a bunch of things you're pulling in, dependencies,

00:07:16.980 --> 00:07:19.060
they might have conflicting dependencies

00:07:19.060 --> 00:07:22.260
or not really conflicting, but the rules are such

00:07:22.260 --> 00:07:24.060
that you have to pick the right dependency

00:07:24.060 --> 00:07:26.120
so that it matches both tools.

00:07:26.120 --> 00:07:28.260
That's all done and it's super fast.

00:07:28.260 --> 00:07:31.300
I'm really impressed with how this thing is.

00:07:31.300 --> 00:07:34.780
And apparently everybody else is too

00:07:34.780 --> 00:07:39.020
because almost immediately after the announcement.

00:07:39.020 --> 00:07:40.220
So look at all these contributors.

00:07:40.220 --> 00:07:42.380
We've got 32 contributors already.

00:07:42.380 --> 00:07:45.660
These are not just people at Astral.

00:07:45.660 --> 00:07:48.100
Like I know that Brett is not there.

00:07:48.100 --> 00:07:51.380
So TOX has already announced

00:07:51.380 --> 00:07:55.040
that there is a TOX-UV plugin

00:07:55.040 --> 00:07:58.380
so that you can have TOX act faster too

00:07:58.380 --> 00:08:02.420
and use UV for virtual and for pip also.

00:08:02.420 --> 00:08:04.180
That makes it faster.

00:08:04.180 --> 00:08:07.000
I think that's, and I'm sure there's more tools to come

00:08:07.000 --> 00:08:10.300
that support, will support UV out of the box.

00:08:10.300 --> 00:08:11.500
- Yeah, awesome.

00:08:11.500 --> 00:08:14.720
I'm super excited, but I have a bunch of aliases

00:08:14.720 --> 00:08:17.500
for my shell that I almost never type pip,

00:08:17.500 --> 00:08:19.860
you know, Python dash MV.

00:08:19.860 --> 00:08:22.780
Like I, unless I'm doing like some presentation

00:08:22.780 --> 00:08:24.460
where I'm not sure that people would know

00:08:24.460 --> 00:08:25.620
what the heck's going on.

00:08:25.620 --> 00:08:28.260
So I'll just type VNV and that will do the magic

00:08:28.260 --> 00:08:30.380
or when activated environments AE

00:08:30.380 --> 00:08:32.460
or, you know, I want to install the requirements,

00:08:32.460 --> 00:08:33.780
I'll say PR, right.

00:08:33.780 --> 00:08:37.540
I rewrote all of those to move from using pip to using UV.

00:08:37.540 --> 00:08:39.620
And it's basically like the same workflow for me,

00:08:39.620 --> 00:08:40.980
just better.

00:08:40.980 --> 00:08:43.340
- Well, one of the things that I do a lot

00:08:43.340 --> 00:08:45.980
is to just see what's in my virtual environment

00:08:45.980 --> 00:08:48.060
is do a pip list.

00:08:48.060 --> 00:08:49.900
And that's not supported yet either.

00:08:49.900 --> 00:08:53.540
But freeze is, and list is coming.

00:08:53.540 --> 00:08:56.820
You know, but so just use free.

00:08:56.820 --> 00:08:59.300
- I didn't actually, just for some reason,

00:08:59.300 --> 00:09:01.540
I think there's like a 50/50 split of people

00:09:01.540 --> 00:09:04.060
that use generally pip freeze over lists.

00:09:04.060 --> 00:09:06.060
What are you a freeze person or a list person?

00:09:06.060 --> 00:09:08.180
- I'm a list person these days,

00:09:08.180 --> 00:09:10.420
but that's because, yeah,

00:09:10.420 --> 00:09:12.060
because I don't use pip freeze to generate

00:09:12.060 --> 00:09:15.540
like the requirements.txt, I use pip compile.

00:09:15.540 --> 00:09:18.420
- Right, but pip freeze will just like list out

00:09:18.420 --> 00:09:21.100
which, what things you have installed and what versions.

00:09:21.100 --> 00:09:21.940
- Yeah, yeah.

00:09:21.940 --> 00:09:23.220
- And that's what I want list for.

00:09:23.220 --> 00:09:26.140
So I don't know why I use list, but anyway.

00:09:26.140 --> 00:09:27.060
- Yeah, that's true.

00:09:27.060 --> 00:09:27.900
- Pretty fun.

00:09:27.900 --> 00:09:31.340
- Yeah, okay, a couple of pieces of real-time follow-up.

00:09:31.340 --> 00:09:34.380
First of all, Ofek Lev from Hatch says,

00:09:34.380 --> 00:09:36.860
"The next minor release of Hatch will have an option

00:09:36.860 --> 00:09:40.140
"to use UV under the hood instead of pip and virtual ENV."

00:09:40.140 --> 00:09:40.980
Hooray!

00:09:40.980 --> 00:09:41.820
- Yeah.

00:09:41.820 --> 00:09:42.940
- I love Hatch, I've been doing like,

00:09:42.940 --> 00:09:44.180
doing a lot of stuff with Hatch lately

00:09:44.180 --> 00:09:45.220
and it's really, really nice.

00:09:45.220 --> 00:09:48.180
So Ofek, you're killing it, keep it up, very nice.

00:09:48.180 --> 00:09:52.300
And you mentioned talks, Henry Schreiner,

00:09:52.300 --> 00:09:54.860
who I see some comments from him out there as well,

00:09:54.860 --> 00:09:59.620
says, "With the Knox back-in, using UV in the Knox back-in,

00:09:59.620 --> 00:10:02.060
"it drops the time taken to build the docs

00:10:02.060 --> 00:10:04.220
"from 22 seconds to four seconds."

00:10:04.220 --> 00:10:06.220
So, you know, that's, you know,

00:10:06.220 --> 00:10:10.420
it's not like 22 seconds is gonna change the world at all

00:10:10.420 --> 00:10:13.060
if they just didn't take 22 seconds to build the docs.

00:10:13.060 --> 00:10:14.860
But the faster these things get,

00:10:14.860 --> 00:10:16.020
the more willing you're just like,

00:10:16.020 --> 00:10:18.540
to do them more iteratively and, you know,

00:10:18.540 --> 00:10:20.820
get tight in that feedback loop and stuff like that.

00:10:20.820 --> 00:10:24.100
So, like for example, with Ruff, you know, and PyCharm,

00:10:24.100 --> 00:10:26.180
now you can just check the box, like,

00:10:26.180 --> 00:10:30.180
run Ruff onto this project when I hit save.

00:10:30.180 --> 00:10:32.060
You know, if it took five seconds to do that,

00:10:32.060 --> 00:10:33.020
you would never check that.

00:10:33.020 --> 00:10:35.140
That would not even be a box you could check, right?

00:10:35.140 --> 00:10:35.980
- Yeah.

00:10:35.980 --> 00:10:37.380
- But, because it's so fast.

00:10:37.380 --> 00:10:39.660
So, hopefully I'm not missing anything else

00:10:39.660 --> 00:10:41.620
from folks out there, but this stuff is,

00:10:41.620 --> 00:10:43.940
this stuff's really neat and I am super excited.

00:10:43.940 --> 00:10:47.380
I would love if some of the things they learned from this

00:10:47.380 --> 00:10:49.260
could be brought back into standard PIP,

00:10:49.260 --> 00:10:50.620
just to make standard pip faster too,

00:10:50.620 --> 00:10:51.620
that would still be cool.

00:10:51.620 --> 00:10:54.780
- Yeah, and this, I guess that brings up a side question,

00:10:54.780 --> 00:10:59.100
is really how much energy there's gonna be around

00:10:59.100 --> 00:11:02.420
supporting the other tools that are getting replaced

00:11:02.420 --> 00:11:04.660
by things that Astral's building.

00:11:04.660 --> 00:11:06.820
But there's, yeah, anyway,

00:11:06.820 --> 00:11:08.900
we'll have that conversation later maybe.

00:11:08.900 --> 00:11:10.100
(laughs)

00:11:10.100 --> 00:11:12.580
- Yeah, Opec agrees with you that much of the speed up

00:11:12.580 --> 00:11:14.700
comes from the way they're doing caching.

00:11:14.700 --> 00:11:15.620
Very, very nice.

00:11:15.620 --> 00:11:17.660
So, you know, people check this out.

00:11:17.660 --> 00:11:19.220
It's been a few days and it's,

00:11:19.220 --> 00:11:21.260
things are going fast in this space, so.

00:11:21.260 --> 00:11:22.980
- Yeah. - Very, very exciting.

00:11:22.980 --> 00:11:25.180
Let's go on to the next topic.

00:11:25.180 --> 00:11:27.540
All right, Brian, Jupyter Notebooks

00:11:27.540 --> 00:11:31.060
have definitely taken over as a really interesting way

00:11:31.060 --> 00:11:34.500
for creating, writing Python code, visualizing Python code,

00:11:34.500 --> 00:11:36.580
sharing it, communicating with it.

00:11:36.580 --> 00:11:40.260
And obviously, Will McGugan's work with Rich

00:11:40.260 --> 00:11:42.460
and then on from there, Textual

00:11:42.460 --> 00:11:44.940
is doing amazing stuff too, right?

00:11:44.940 --> 00:11:45.780
- Yeah.

00:11:45.780 --> 00:11:46.940
- What if those came together,

00:11:46.940 --> 00:11:49.340
like peanut butter and jelly or whatever it is

00:11:49.340 --> 00:11:51.140
that you put together that goes together well?

00:11:51.140 --> 00:11:52.900
- So David-- - Peanut butter and chocolate, man.

00:11:52.900 --> 00:11:54.980
- Yes, okay, sorry, Reese's Pieces, I got it.

00:11:54.980 --> 00:11:55.900
- Okay.

00:11:55.900 --> 00:11:57.540
- David Brochart says,

00:11:57.540 --> 00:12:01.900
"I just published my first blog post, which is,"

00:12:01.900 --> 00:12:04.500
we go over here, "JP Term,

00:12:04.500 --> 00:12:08.420
"Jupyter in the Terminal built on Textual and Rich."

00:12:08.420 --> 00:12:09.420
- Yeah, baby. - How cool is that?

00:12:09.420 --> 00:12:11.700
- That's great. - Yeah, that's.

00:12:11.700 --> 00:12:13.420
There's a bunch of terminal fun stuff

00:12:13.420 --> 00:12:15.900
that's based on this, on Textual

00:12:15.900 --> 00:12:17.580
and other things that we could cover,

00:12:17.580 --> 00:12:18.940
but this is what I'm covering today.

00:12:18.940 --> 00:12:20.260
I'll save the other for next time.

00:12:20.260 --> 00:12:22.460
So Jupyter in the Terminal, and it says,

00:12:22.460 --> 00:12:25.180
well, basically David says,

00:12:25.180 --> 00:12:26.940
"Look, the terminal is the new browser

00:12:26.940 --> 00:12:29.900
"in the sense that we all have a terminal,

00:12:29.900 --> 00:12:32.500
"and if we write to this, it's kind of a simple,

00:12:32.500 --> 00:12:34.380
"cool UI that everybody already has,

00:12:34.380 --> 00:12:36.060
"so you can just plug stuff into it,

00:12:36.060 --> 00:12:38.500
"largely because of all the work

00:12:38.500 --> 00:12:40.380
"that they've done over at Textualize

00:12:40.380 --> 00:12:42.540
"with Textual and Rich and so on."

00:12:42.540 --> 00:12:43.380
All right, so he said,

00:12:43.380 --> 00:12:45.860
"Look at all these widgets we already have."

00:12:45.860 --> 00:12:47.860
So there's a select widget,

00:12:47.860 --> 00:12:49.860
and there's a whole bunch of others.

00:12:49.860 --> 00:12:52.340
But if we view this, I'll open a new tab.

00:12:52.340 --> 00:12:56.340
Maybe open image in a new tab.

00:12:56.340 --> 00:12:57.700
Oh, it's downloading, hold on,

00:12:57.700 --> 00:12:58.900
because of course it is.

00:12:58.900 --> 00:13:01.820
Open this up.

00:13:01.820 --> 00:13:05.780
It's JupyterLab side-by-side with jpterm.

00:13:05.780 --> 00:13:06.660
And check it out.

00:13:06.660 --> 00:13:08.140
It's like you've got your cells,

00:13:08.140 --> 00:13:09.620
you've got your in-unit bracket,

00:13:09.620 --> 00:13:10.900
and quite similar, huh?

00:13:10.900 --> 00:13:11.940
What do you think about this?

00:13:11.940 --> 00:13:13.020
- That's incredible.

00:13:13.020 --> 00:13:13.940
That's pretty cool.

00:13:13.940 --> 00:13:15.860
- Yeah, so it's got,

00:13:15.860 --> 00:13:18.500
let me go back to the article here.

00:13:18.500 --> 00:13:20.060
If you go down, it's got graphing.

00:13:20.060 --> 00:13:22.620
It's got charts for it.

00:13:22.620 --> 00:13:25.980
And he says basically one of the real similar things

00:13:25.980 --> 00:13:27.900
to compare it to might be JupyterLite,

00:13:27.900 --> 00:13:30.580
because JupyterLite is a WebAssembly-based

00:13:30.580 --> 00:13:32.140
all front-end Jupyter,

00:13:32.140 --> 00:13:33.660
and this is client,

00:13:33.660 --> 00:13:34.860
doesn't even need a server, right,

00:13:34.860 --> 00:13:35.980
because it just runs.

00:13:35.980 --> 00:13:38.500
Although he does point out with Textual Web,

00:13:38.500 --> 00:13:42.140
realized, is a way to put this on the internet

00:13:42.140 --> 00:13:42.980
and share it as well.

00:13:42.980 --> 00:13:44.900
But here, look, here's a bunch of cool graphs

00:13:44.900 --> 00:13:47.460
over time in the terminal.

00:13:47.460 --> 00:13:48.860
So this is a super early,

00:13:48.860 --> 00:13:50.220
almost a proof of concept,

00:13:50.220 --> 00:13:52.540
even has images, which is interesting.

00:13:52.540 --> 00:13:53.380
(David laughs)

00:13:53.380 --> 00:13:55.060
- That's terrible, though, don't do that.

00:13:55.060 --> 00:13:56.020
- They're bad, yeah.

00:13:56.020 --> 00:14:00.020
Like, if you long for like Commodore 64 days,

00:14:00.020 --> 00:14:03.220
you got something in store for you.

00:14:03.220 --> 00:14:06.260
But you can see it's quite new.

00:14:06.260 --> 00:14:08.660
It's just been created like four months ago

00:14:08.660 --> 00:14:11.140
and just announced, I think, pretty recently.

00:14:11.140 --> 00:14:14.140
So people go check this out.

00:14:14.140 --> 00:14:17.700
David is, I think, a Jupyter core dev,

00:14:17.700 --> 00:14:19.740
or at least a contributor over there.

00:14:19.740 --> 00:14:22.700
So yeah, interesting to see where this goes.

00:14:22.700 --> 00:14:24.180
- Yeah, let's see, cool.

00:14:24.180 --> 00:14:25.260
You know what else is cool?

00:14:25.260 --> 00:14:26.300
- Our sponsor.

00:14:26.300 --> 00:14:27.220
- Yes.

00:14:27.220 --> 00:14:29.180
- Indeed, indeed they are.

00:14:29.180 --> 00:14:33.140
So let me tell you real quick about Doubt APM.

00:14:33.140 --> 00:14:34.860
They're big supporters of Python Bytes,

00:14:34.860 --> 00:14:36.620
so we appreciate that very much.

00:14:36.620 --> 00:14:39.500
So if you are tired of spending hours

00:14:39.500 --> 00:14:41.460
trying to find the root cause of issues

00:14:41.460 --> 00:14:42.740
impacting your performance,

00:14:42.740 --> 00:14:45.780
then you owe it to yourself to check out Scout APM.

00:14:45.780 --> 00:14:47.700
They're a leading Python application

00:14:47.700 --> 00:14:50.420
performance monitoring tool, APM,

00:14:50.420 --> 00:14:52.020
that helps you identify and solve

00:14:52.020 --> 00:14:54.860
performance abnormalities faster and easier.

00:14:54.860 --> 00:14:57.820
Scout APM ties bottlenecks such as memory leaks,

00:14:57.820 --> 00:14:59.860
slow database queries, background jobs,

00:14:59.860 --> 00:15:02.780
and the dreaded N+1 queries that you can end up

00:15:02.780 --> 00:15:05.460
if you do lazy loading in your ORM,

00:15:05.460 --> 00:15:07.740
and then you say, "Oh no, why is it so slow?

00:15:07.740 --> 00:15:09.060
"Why are you doing 200 database queries

00:15:09.060 --> 00:15:10.220
"for what should be one?"

00:15:10.220 --> 00:15:11.620
So you can find out things like that.

00:15:11.620 --> 00:15:13.340
And it links it back directly to source code,

00:15:13.340 --> 00:15:15.540
so you can spend less time in the debugger

00:15:15.540 --> 00:15:18.340
and healing logs and just finding the problems

00:15:18.340 --> 00:15:19.180
and moving on.

00:15:19.180 --> 00:15:20.460
And you'll love it because it's built

00:15:20.460 --> 00:15:22.020
for developers by developers.

00:15:22.020 --> 00:15:23.820
It makes it easy to get set up.

00:15:23.820 --> 00:15:26.100
Seriously, you can do it in less than four minutes,

00:15:26.100 --> 00:15:27.020
so that's awesome.

00:15:27.020 --> 00:15:30.580
And the best part is the pricing is straightforward.

00:15:30.580 --> 00:15:32.020
You only pay for the data that you use

00:15:32.020 --> 00:15:35.900
with no hidden overage fees or per seat pricing.

00:15:35.900 --> 00:15:37.780
And I just learned this, Brian,

00:15:37.780 --> 00:15:41.380
they also have, they provide the pro version for free

00:15:41.380 --> 00:15:42.980
to all open source projects.

00:15:42.980 --> 00:15:44.820
So if you're an open source maintainer

00:15:44.820 --> 00:15:47.700
and you want to have Scout APM for that project,

00:15:47.700 --> 00:15:49.140
just shoot them a message or something

00:15:49.140 --> 00:15:50.820
on their pricing page about that.

00:15:50.820 --> 00:15:52.340
So you can start your free trial

00:15:52.340 --> 00:15:54.540
and get instant insights today.

00:15:54.540 --> 00:15:57.060
Visit pythonbytes.fm/scout.

00:15:57.060 --> 00:15:59.500
The link is in your podcast player show notes as well.

00:15:59.500 --> 00:16:00.460
And please use that link.

00:16:00.460 --> 00:16:03.260
Don't just search for them because otherwise,

00:16:03.260 --> 00:16:04.580
they don't think you came from us.

00:16:04.580 --> 00:16:06.020
And then they'd stop supporting the show.

00:16:06.020 --> 00:16:08.740
So please use our link, pythonbytes.fm/scout.

00:16:08.740 --> 00:16:09.580
Check them out.

00:16:09.580 --> 00:16:11.660
It really supports the show.

00:16:11.660 --> 00:16:12.500
- Awesome.

00:16:12.500 --> 00:16:13.340
- Yeah.

00:16:13.340 --> 00:16:14.180
All right, over to you.

00:16:14.180 --> 00:16:15.020
What's next?

00:16:15.020 --> 00:16:16.860
- I've got a little topic.

00:16:16.860 --> 00:16:19.860
Martin Hines wrote a blog post called

00:16:19.860 --> 00:16:24.340
Everything You Can Do with the Python's Text Wrap Module.

00:16:24.340 --> 00:16:26.380
And I love the Text Wrap Module.

00:16:26.380 --> 00:16:27.860
And I think that more people,

00:16:27.860 --> 00:16:29.780
I think a lot of people just forget about it.

00:16:29.780 --> 00:16:30.620
But it's very useful.

00:16:30.620 --> 00:16:31.460
- Yeah, Brian, do you have that feeling

00:16:31.460 --> 00:16:33.580
where like you've spent half a day

00:16:33.580 --> 00:16:34.660
implementing some algorithm,

00:16:34.660 --> 00:16:35.860
then you're like, oh, that was a function

00:16:35.860 --> 00:16:36.860
I could have just called?

00:16:36.860 --> 00:16:38.220
- Yeah, exactly.

00:16:38.220 --> 00:16:39.100
Text Wrap is that.

00:16:39.100 --> 00:16:39.940
Yeah.

00:16:39.940 --> 00:16:43.500
And every time I come back to it, I'm like,

00:16:43.500 --> 00:16:45.500
oh, I'm still using stuff that I shouldn't.

00:16:45.500 --> 00:16:49.020
So it's a pretty short article.

00:16:49.020 --> 00:16:51.460
Go through a few of the features of Text Wrap.

00:16:51.460 --> 00:16:52.740
First off, it's shortened.

00:16:52.740 --> 00:16:57.740
So if you wanna make a piece of text shorter,

00:16:57.740 --> 00:16:59.140
you can use shorten.

00:16:59.140 --> 00:17:01.660
And it's cool because it also does a placeholder thing.

00:17:01.660 --> 00:17:04.860
So it'll put like dot, dot, dots,

00:17:04.860 --> 00:17:06.540
and brackets or something,

00:17:06.540 --> 00:17:08.860
or whatever placeholder you want to say,

00:17:08.860 --> 00:17:10.100
there's more text there.

00:17:10.100 --> 00:17:11.860
It's just, we've cut it off.

00:17:11.860 --> 00:17:14.020
And it looks really nice.

00:17:14.020 --> 00:17:15.260
Easy to use.

00:17:15.260 --> 00:17:16.900
You just call it.

00:17:16.900 --> 00:17:17.940
It's just a function.

00:17:17.940 --> 00:17:21.340
But then there's Wrap, which seems obvious,

00:17:21.340 --> 00:17:23.660
but can do word wrapping.

00:17:23.660 --> 00:17:28.020
So you can split a long chunk of text into multiple lines,

00:17:28.020 --> 00:17:29.700
but you can also do it.

00:17:29.700 --> 00:17:32.580
One of the things I like here is this is,

00:17:32.580 --> 00:17:35.100
said, well, yes, of course you can use it

00:17:35.100 --> 00:17:38.740
for splitting long lines into different multiple lines,

00:17:38.740 --> 00:17:41.980
but also even if you're not gonna print it like that,

00:17:41.980 --> 00:17:46.060
it's very useful if you're gonna batch work on text,

00:17:46.060 --> 00:17:50.380
you can split a big chunk of text into small

00:17:50.380 --> 00:17:53.700
or even size batches to work on those.

00:17:53.700 --> 00:17:55.460
That's a pretty cool use case for that.

00:17:55.460 --> 00:17:56.660
I like it.

00:17:56.660 --> 00:17:58.620
There is, there's even,

00:17:58.620 --> 00:18:01.500
you can specify drop whitespace keyword for that.

00:18:01.500 --> 00:18:02.340
That's pretty cool.

00:18:02.340 --> 00:18:03.260
I didn't know about that.

00:18:03.260 --> 00:18:04.100
Neat.

00:18:04.100 --> 00:18:06.740
There's a class also.

00:18:06.740 --> 00:18:09.580
So a lot of the stuff you can do with TextWrap,

00:18:09.580 --> 00:18:12.100
you can do within an object.

00:18:12.100 --> 00:18:14.020
So there's a TextWrapper class

00:18:14.020 --> 00:18:15.860
that you can create a TextWrapper object

00:18:15.860 --> 00:18:19.140
and do a whole bunch of work with that multiple times

00:18:19.140 --> 00:18:21.780
and only specify it once in the constructor.

00:18:21.780 --> 00:18:22.620
Very cool.

00:18:22.620 --> 00:18:24.940
And then at the bottom, last but not least,

00:18:24.940 --> 00:18:28.220
is my favorite use of TextWrap is ddent.

00:18:28.220 --> 00:18:31.500
So ddent will take, like,

00:18:31.500 --> 00:18:35.780
if you've got a multi-line string and it's in your code,

00:18:35.780 --> 00:18:37.700
so it's all like off,

00:18:37.700 --> 00:18:40.060
you know, it's indented with the rest of your code,

00:18:40.060 --> 00:18:42.100
that multi-line will have a whole bunch of extra,

00:18:42.100 --> 00:18:44.220
like, extra whitespace on the left,

00:18:44.220 --> 00:18:45.940
and you don't really want that

00:18:45.940 --> 00:18:47.420
when you're actually using it.

00:18:47.420 --> 00:18:52.180
And ddent will take out those extra left whitespace.

00:18:52.180 --> 00:18:53.380
And that, I love that.

00:18:53.380 --> 00:18:57.620
And this seems like a weird thing to have built in,

00:18:57.620 --> 00:19:00.340
but I use it a whole bunch of times,

00:19:00.340 --> 00:19:01.700
often in writing tests,

00:19:01.700 --> 00:19:03.900
because I've got a multi-line string

00:19:03.900 --> 00:19:06.220
that I wanna compare to some output,

00:19:06.220 --> 00:19:07.940
and I don't want it at the global level,

00:19:07.940 --> 00:19:11.380
I want it, you know, in my test function.

00:19:11.380 --> 00:19:15.020
So I can just do that and use ddent to get it back to.

00:19:15.020 --> 00:19:16.580
- Right, 'cause it would look weird,

00:19:16.580 --> 00:19:19.460
left-aligned inside of an indented function, right?

00:19:19.460 --> 00:19:20.700
- Yeah.

00:19:20.700 --> 00:19:23.740
So, I mean, you can, it just looks ugly, so.

00:19:23.740 --> 00:19:26.940
- Yeah, you just, you lose the flow of where it belongs.

00:19:26.940 --> 00:19:27.900
Yeah. - Yeah.

00:19:27.900 --> 00:19:31.460
So TextWrap, it's there, it's fun, use it.

00:19:31.460 --> 00:19:32.420
- You already have it.

00:19:32.420 --> 00:19:33.260
It's in Python.

00:19:33.260 --> 00:19:34.700
- Yeah. - Yeah, very nice.

00:19:34.700 --> 00:19:38.460
All right, let's talk about some design principles

00:19:38.460 --> 00:19:39.620
for the web here.

00:19:39.620 --> 00:19:42.020
This is not exactly Python,

00:19:42.020 --> 00:19:45.140
but it certainly links back to some cool things in Python.

00:19:45.140 --> 00:19:46.460
And it's this place I ran across

00:19:46.460 --> 00:19:50.140
called html-burst.com, right?

00:19:50.140 --> 00:19:53.660
And the idea is, there seems to be some fatigue,

00:19:53.660 --> 00:19:55.980
like, you know how in JavaScript, it used to be so easy,

00:19:55.980 --> 00:19:57.380
you would include a script,

00:19:57.380 --> 00:19:59.540
or if you were doing something super small,

00:19:59.540 --> 00:20:01.060
you maybe would just say script tag,

00:20:01.060 --> 00:20:02.620
and you would write a bit of JavaScript

00:20:02.620 --> 00:20:04.380
right in the page, and then you'd carry on,

00:20:04.380 --> 00:20:05.980
you're like, oh, that was easy, look, that just worked.

00:20:05.980 --> 00:20:08.740
And then it said, oh, well, now we're gonna put it over

00:20:08.740 --> 00:20:11.740
on this other place, no, we wanna like minify it,

00:20:11.740 --> 00:20:13.180
and also we're gonna shake it down

00:20:13.180 --> 00:20:14.940
to only include the parts that we use,

00:20:14.940 --> 00:20:16.740
and we'll do the same for the CSS.

00:20:16.740 --> 00:20:18.060
And then you need this build step,

00:20:18.060 --> 00:20:20.780
and then we're gonna compile it from TypeScript

00:20:20.780 --> 00:20:22.620
to JavaScript, and then shake it down

00:20:22.620 --> 00:20:24.420
to not include this, like, what?

00:20:24.420 --> 00:20:27.820
And then you're gonna, you know, include it with import,

00:20:27.820 --> 00:20:29.700
export it with node, you're just like, what is,

00:20:29.700 --> 00:20:30.940
why is this so hard?

00:20:31.020 --> 00:20:33.820
Why are there so many steps to this thing

00:20:33.820 --> 00:20:34.980
that used to be so easy, right?

00:20:34.980 --> 00:20:37.500
And so this is kind of like, can we just not have that

00:20:37.500 --> 00:20:40.860
as like the default way of working already?

00:20:40.860 --> 00:20:45.540
So HTML, we'll get to HTML, HTML first is a set

00:20:45.540 --> 00:20:47.740
of guidelines for making it easier, faster,

00:20:47.740 --> 00:20:50.460
and more maintainable to build web software

00:20:50.460 --> 00:20:53.300
by leveraging the default capabilities of modern browsers.

00:20:53.300 --> 00:20:54.820
I learned something I didn't know from here

00:20:54.820 --> 00:20:55.940
that I used to do with JavaScript

00:20:55.940 --> 00:20:59.300
that I will never do again if I don't have to, so awesome.

00:20:59.300 --> 00:21:03.260
And then the extreme simplicity of HTML's attribute syntax

00:21:03.260 --> 00:21:05.660
and, you know, keeping the view source alive, right?

00:21:05.660 --> 00:21:06.860
Used to be able to go to the website,

00:21:06.860 --> 00:21:07.700
like, how did they do that?

00:21:07.700 --> 00:21:08.540
That's cool, view source.

00:21:08.540 --> 00:21:11.420
Now it's just like one tiny line of like a bunch of stuff

00:21:11.420 --> 00:21:13.740
that triggers JavaScript stuff, you know, like, oh, well.

00:21:13.740 --> 00:21:15.220
- Or how did they do that?

00:21:15.220 --> 00:21:17.300
Oh, it's a bunch of divs.

00:21:17.300 --> 00:21:18.660
- Yes, exactly.

00:21:18.660 --> 00:21:22.580
And so the goal is, you know, try to widen the pool

00:21:22.580 --> 00:21:24.940
of people who enjoy web development.

00:21:24.940 --> 00:21:27.900
Also, you can make it less expensive for your company

00:21:27.900 --> 00:21:30.020
because it's just less complex.

00:21:30.020 --> 00:21:33.540
So it's not just, you know, dev yells at the cloud

00:21:33.540 --> 00:21:36.340
because people are making it hard, right?

00:21:36.340 --> 00:21:39.660
Screams it into the sky, but some practices, right?

00:21:39.660 --> 00:21:43.060
So there's some examples, prefer vanilla approaches.

00:21:43.060 --> 00:21:45.100
And so, for example, did you know,

00:21:45.100 --> 00:21:48.260
you could say details, summary, and then stuff below it.

00:21:48.260 --> 00:21:49.580
And if you click the summary,

00:21:49.580 --> 00:21:51.940
it'll expand the thing below it.

00:21:51.940 --> 00:21:53.140
No JavaScript.

00:21:53.140 --> 00:21:53.980
I didn't either.

00:21:53.980 --> 00:21:54.820
- No JavaScript?

00:21:54.820 --> 00:21:55.660
Wow.

00:21:55.660 --> 00:21:56.580
- Yeah, how about that?

00:21:56.580 --> 00:22:00.700
And then, so they have a encouraged versus discouraged.

00:22:00.700 --> 00:22:03.740
And here's like import React, user state from React,

00:22:03.740 --> 00:22:06.460
create a details component, which is an arrow function,

00:22:06.460 --> 00:22:10.300
which returns a constant of things

00:22:10.300 --> 00:22:11.580
and toggling the content.

00:22:11.580 --> 00:22:14.180
And then you on click, you like,

00:22:14.180 --> 00:22:15.340
then you export the detail.

00:22:15.340 --> 00:22:18.340
This is the import export I was railing against, right?

00:22:18.340 --> 00:22:19.180
So that's one.

00:22:19.180 --> 00:22:21.580
Prefer just, if you can do it as basic HTML

00:22:21.580 --> 00:22:24.580
or even basic JavaScript, like don't go over the top.

00:22:24.580 --> 00:22:26.260
And where possible, practice two.

00:22:26.260 --> 00:22:27.740
Where possible, define,

00:22:27.740 --> 00:22:29.860
default to defining styles and behaviors

00:22:29.860 --> 00:22:31.460
with inline attributes,

00:22:31.460 --> 00:22:34.300
with things like Tailwind or Tacheons.

00:22:34.300 --> 00:22:36.780
And you can use libraries like Hyperscript and Alpine.

00:22:36.780 --> 00:22:39.500
And it says you're, yes, it does mean your HTML

00:22:39.500 --> 00:22:40.500
gets a little bit busier,

00:22:40.500 --> 00:22:42.140
but you don't have to go to three places

00:22:42.140 --> 00:22:44.180
to figure out what's happening.

00:22:44.180 --> 00:22:47.220
So for example, it says encouraged, button on click,

00:22:47.220 --> 00:22:50.460
this.classlist.add background green.

00:22:50.460 --> 00:22:53.420
Discouraged, you have a results pane that says click me.

00:22:53.420 --> 00:22:55.460
And then you have a CSS section

00:22:55.460 --> 00:22:57.140
that actually what happens when you do that,

00:22:57.140 --> 00:22:58.140
changes the color to green.

00:22:58.140 --> 00:22:59.740
Then you have some JavaScript that gets it.

00:22:59.740 --> 00:23:02.820
And then when it's done, you set the class,

00:23:02.820 --> 00:23:04.380
which then goes back to CSS.

00:23:04.380 --> 00:23:06.540
And these are usually mushed all over the place.

00:23:06.540 --> 00:23:08.660
And you're like, what is happening, right?

00:23:08.660 --> 00:23:11.140
And it says, you'll notice the separation of concerns

00:23:11.140 --> 00:23:14.300
is kind of not so much awesome here.

00:23:14.300 --> 00:23:18.580
However, you should maybe consider the locality of behavior

00:23:18.580 --> 00:23:20.700
more than you should worry about separation concerns.

00:23:20.700 --> 00:23:24.060
And HTMX, Carson Gores has a nice essay on this.

00:23:24.060 --> 00:23:26.060
Like, yes, you might repeat yourself sometimes,

00:23:26.060 --> 00:23:28.660
but right there, you see everything that's happening

00:23:28.660 --> 00:23:30.660
instead of having it so spread out, right?

00:23:30.660 --> 00:23:31.500
- Yeah.

00:23:31.500 --> 00:23:33.500
- All right, next, go ahead, Brian.

00:23:33.500 --> 00:23:34.500
- I just wanted to comment.

00:23:34.500 --> 00:23:37.220
One of the things that I like about this sort of model

00:23:37.220 --> 00:23:41.940
is that I'm frequently learning like new web frameworks.

00:23:41.940 --> 00:23:44.580
Like I'm working on learning Django

00:23:44.580 --> 00:23:48.260
and, you know, FastAPI and others.

00:23:48.260 --> 00:23:51.140
And a lot of times it's templating that I'm working on

00:23:51.140 --> 00:23:54.780
and to understand how it's gonna get output,

00:23:54.780 --> 00:23:58.460
keeping the templates simple in like mostly HTML

00:23:58.460 --> 00:24:02.540
helps with discoverability and learning something new.

00:24:02.540 --> 00:24:06.180
So even if it isn't like a production thing later,

00:24:06.180 --> 00:24:09.220
but it might be, starting out simple

00:24:09.220 --> 00:24:11.420
really helps the learning process.

00:24:11.420 --> 00:24:12.580
- Yeah, oh, absolutely.

00:24:12.580 --> 00:24:14.540
And you also have to learn fewer things, right?

00:24:14.540 --> 00:24:15.380
- Yeah.

00:24:15.380 --> 00:24:16.300
- You have to learn three other frameworks

00:24:16.300 --> 00:24:17.740
and build tools and so on.

00:24:17.740 --> 00:24:21.460
- All right, another one is about try to use libraries.

00:24:21.460 --> 00:24:22.300
If you gotta use libraries,

00:24:22.300 --> 00:24:24.860
try to use ones that leverage HTML attributes

00:24:24.860 --> 00:24:26.860
over JavaScript and custom attributes.

00:24:26.860 --> 00:24:30.100
Like HTMX is a real nice example of that.

00:24:30.100 --> 00:24:32.180
To say disfavor build steps.

00:24:32.180 --> 00:24:37.180
So encourage the ability to say stylesheet/styles.css.

00:24:37.180 --> 00:24:42.860
Discourage, distribute, output, NPX, CSS,

00:24:42.860 --> 00:24:45.140
compile with a watch and then don't forget to run that.

00:24:45.140 --> 00:24:46.340
And then why is this not updating?

00:24:46.340 --> 00:24:47.700
You know, all these different things.

00:24:47.700 --> 00:24:49.740
And then finally, this one,

00:24:49.740 --> 00:24:53.460
I think the HTMX is really relevant to Python folks,

00:24:53.460 --> 00:24:56.020
but also this one, their example is Ruby,

00:24:56.020 --> 00:24:58.580
but it just as well could be any,

00:24:58.580 --> 00:25:00.940
the WTF forms, is that what it is?

00:25:00.940 --> 00:25:01.780
I think it is.

00:25:01.780 --> 00:25:03.540
The form builder type stuff.

00:25:03.540 --> 00:25:05.140
You see a lot of that actually in Django.

00:25:05.140 --> 00:25:07.900
It says prefer naked HTML to obfuscation layers

00:25:07.900 --> 00:25:09.540
that compile down to HTML.

00:25:09.540 --> 00:25:11.540
So you know, just, you got a form,

00:25:11.540 --> 00:25:13.980
just write the form, put the values in it.

00:25:13.980 --> 00:25:15.860
Instead of, you know, form with,

00:25:15.860 --> 00:25:18.020
and then form like label for this,

00:25:18.020 --> 00:25:20.980
form text field for that part of the model and so on.

00:25:20.980 --> 00:25:21.820
Right?

00:25:21.820 --> 00:25:23.740
So anyway, and finally preserve some,

00:25:23.740 --> 00:25:25.380
some view source for us all,

00:25:25.380 --> 00:25:26.780
because it'll help everyone.

00:25:26.780 --> 00:25:30.060
But anyway, I like this and I, you know,

00:25:30.060 --> 00:25:32.060
it's interesting to think of as a philosophy.

00:25:32.060 --> 00:25:32.900
- Yeah.

00:25:32.900 --> 00:25:35.140
- The build steps, they also reference like,

00:25:35.140 --> 00:25:38.140
a whole bunch of people, how it used to be completely like,

00:25:38.140 --> 00:25:40.340
oh, you're such a noob if you want to skip having

00:25:40.340 --> 00:25:42.100
like a bunch of build tools along the way,

00:25:42.100 --> 00:25:44.300
but references for different articles

00:25:44.300 --> 00:25:46.900
and places where people are writing about like,

00:25:46.900 --> 00:25:48.380
you know what, we're done with this build stuff.

00:25:48.380 --> 00:25:49.580
We're just writing CSS.

00:25:49.580 --> 00:25:50.900
We're just writing JavaScript.

00:25:50.900 --> 00:25:51.820
We're going to go with that.

00:25:51.820 --> 00:25:54.020
So anyway, pretty, pretty well backed up

00:25:54.020 --> 00:25:55.020
some of these ideas.

00:25:55.020 --> 00:25:55.980
- Nice.

00:25:55.980 --> 00:25:57.580
- And that's all of our main items.

00:25:57.580 --> 00:25:59.660
You can see there are tabs left for me.

00:25:59.660 --> 00:26:01.780
So that means I must have extras, but what about you?

00:26:01.780 --> 00:26:02.780
- I do have extras.

00:26:02.780 --> 00:26:04.460
Do you want to go through yours since they're up?

00:26:04.460 --> 00:26:05.300
Or do you want to?

00:26:05.300 --> 00:26:06.140
- Sure, let's do it.

00:26:06.140 --> 00:26:06.980
All right.

00:26:06.980 --> 00:26:09.860
So first of all, Vincent Warmerdum says,

00:26:09.860 --> 00:26:13.220
hey, a new PI data location, Pittsburgh.

00:26:13.220 --> 00:26:17.740
So there's a call for proposals at PI data, Pittsburgh.

00:26:17.740 --> 00:26:18.740
Let's see, when is it?

00:26:18.740 --> 00:26:20.060
Hopefully it's not over.

00:26:20.060 --> 00:26:23.020
So yeah, so if you want to speak,

00:26:23.020 --> 00:26:24.580
if you're in the general Pittsburgh area,

00:26:24.580 --> 00:26:27.540
or you want to be, then check out PI data, Pittsburgh

00:26:27.540 --> 00:26:29.420
and go submit some talks there.

00:26:29.420 --> 00:26:32.580
It, let's see when this is going to be, shortly, April.

00:26:32.580 --> 00:26:33.420
- Okay.

00:26:33.420 --> 00:26:34.260
- April 11th, I guess.

00:26:34.260 --> 00:26:37.300
Anyway, check it out and you can submit a talk there.

00:26:37.300 --> 00:26:38.540
That's pretty cool.

00:26:38.540 --> 00:26:40.500
Just want to bring out one more example.

00:26:40.500 --> 00:26:45.500
You know, Ryan, I riff on, or I rip on the ad space

00:26:45.500 --> 00:26:49.940
and I say, look, we should run ad blockers.

00:26:49.940 --> 00:26:52.220
We should not support these people.

00:26:52.220 --> 00:26:53.500
And I know some folks are out there like,

00:26:53.500 --> 00:26:55.460
well, but then you're not supporting creators.

00:26:55.460 --> 00:26:58.060
You're not supporting the small folks

00:26:58.060 --> 00:27:00.740
who have Google ads on their site or whatever.

00:27:00.740 --> 00:27:01.940
And I don't know, I just,

00:27:01.940 --> 00:27:04.140
I think the trade-off is not really worth it.

00:27:04.140 --> 00:27:05.940
So I just want to point out one more example

00:27:05.940 --> 00:27:07.660
of like terrible stuff that's happening.

00:27:07.660 --> 00:27:11.740
So our own Oregon Senator Ron Wyden

00:27:11.740 --> 00:27:14.780
is starting an investigation because a data broker

00:27:14.780 --> 00:27:18.580
who gets data from, you know, all these different sources

00:27:18.580 --> 00:27:20.580
like ad retargeting stuff,

00:27:20.580 --> 00:27:24.020
used abortion clinic visitor location data

00:27:24.020 --> 00:27:26.540
because their endpoints were not blocked

00:27:26.540 --> 00:27:29.620
by some sort of DNS block or something.

00:27:29.620 --> 00:27:30.460
- Wow.

00:27:30.460 --> 00:27:33.660
- To help send targeted misinformation to vulnerable women.

00:27:33.660 --> 00:27:34.500
How terrible, right?

00:27:34.500 --> 00:27:36.260
- Yeah, awful.

00:27:36.260 --> 00:27:39.260
- So I think we all should just stand up to,

00:27:39.260 --> 00:27:42.220
stand up to the, like the retargeting, remarketing,

00:27:42.220 --> 00:27:44.020
like we don't have to.

00:27:44.020 --> 00:27:46.420
- That has nothing to do with trying to make money

00:27:46.420 --> 00:27:48.380
for content creators.

00:27:48.380 --> 00:27:49.300
- Yeah, I know.

00:27:49.300 --> 00:27:52.420
Except for that the data flows into these shady places,

00:27:52.420 --> 00:27:53.260
right?

00:27:53.260 --> 00:27:55.460
And then they, you know, they already have it.

00:27:55.460 --> 00:27:57.540
So instead of trying to sell them shoes,

00:27:57.540 --> 00:27:59.780
like let's do something terrible like that.

00:27:59.780 --> 00:28:00.660
So, yeah.

00:28:00.660 --> 00:28:03.500
All right, anyway, next DNS.io folks.

00:28:03.500 --> 00:28:04.340
Okay.

00:28:04.340 --> 00:28:09.340
So for proposals is also open for a very close nearby

00:28:09.340 --> 00:28:12.780
SciPy 2024, which is awesome.

00:28:12.780 --> 00:28:14.620
This will be in Tacoma, Brian,

00:28:14.620 --> 00:28:19.020
just a short hop and a skip up I-5 North from us.

00:28:19.020 --> 00:28:19.860
- That'd be fun.

00:28:19.860 --> 00:28:22.740
- Yeah, so July 8th to 14th.

00:28:22.740 --> 00:28:23.820
I wish I could make it,

00:28:23.820 --> 00:28:27.860
but I am already tied up hanging around the house.

00:28:27.860 --> 00:28:30.500
My wife is traveling for work at that time

00:28:30.500 --> 00:28:33.100
and somebody has to stay with the dog and the kid.

00:28:33.100 --> 00:28:34.980
So I'm not going to this.

00:28:34.980 --> 00:28:37.060
- I have a feeling that's the same timeframe

00:28:37.060 --> 00:28:37.940
as Oregon Country Fair.

00:28:37.940 --> 00:28:39.380
So I probably can't either.

00:28:39.380 --> 00:28:41.500
- Yeah, but anyway, there's a lot of people out there

00:28:41.500 --> 00:28:44.980
who can and a call for proposals are out,

00:28:44.980 --> 00:28:46.260
but you must act.

00:28:46.260 --> 00:28:47.100
You must act.

00:28:47.100 --> 00:28:50.340
Soon you have exactly seven days to get this ish,

00:28:50.340 --> 00:28:51.220
depending on when you listen.

00:28:51.220 --> 00:28:53.380
But as I speak, you have about seven days

00:28:53.380 --> 00:28:54.940
to get your talk proposal in.

00:28:54.940 --> 00:28:56.340
So please go do that.

00:28:56.340 --> 00:28:59.380
- All right, February 27th is that end time.

00:28:59.380 --> 00:29:00.220
Okay.

00:29:00.220 --> 00:29:02.900
A handful of topics.

00:29:02.900 --> 00:29:07.900
pytest 8.01, 8.0.1 is out.

00:29:07.900 --> 00:29:09.460
And why is this important?

00:29:09.460 --> 00:29:13.100
One, it's the first bug fix since 8.0 came out

00:29:13.100 --> 00:29:15.540
and it has the bug that bugged me.

00:29:15.540 --> 00:29:20.540
So there was a regression where if you parameterization

00:29:20.540 --> 00:29:23.700
would go backwards for some reason.

00:29:23.700 --> 00:29:25.060
- Yeah, we talked about that before.

00:29:25.060 --> 00:29:25.900
That's cool.

00:29:25.900 --> 00:29:27.100
- So that's fixed.

00:29:27.100 --> 00:29:32.060
So I've got it updated to 8.01 everywhere I'm using pytest.

00:29:32.060 --> 00:29:37.060
Okay, next, if you'd like to understand

00:29:37.060 --> 00:29:41.020
dependency injection, Hinnick has a new video out,

00:29:41.020 --> 00:29:44.660
loose coupling and dependency injection, the easy way.

00:29:44.660 --> 00:29:47.100
And I really like the dude

00:29:47.100 --> 00:29:48.820
and I like what he's doing up on YouTube.

00:29:48.820 --> 00:29:50.540
So that's fun.

00:29:50.540 --> 00:29:53.540
Plus, dependency injection is not as complicated

00:29:53.540 --> 00:29:56.060
as it sounds and he'll show you.

00:29:56.060 --> 00:29:59.660
But I freaked out the first time that people were like,

00:29:59.660 --> 00:30:02.300
"Oh, fixtures, they're kind of like dependency injection."

00:30:02.300 --> 00:30:03.980
I'm like, "I don't know what you're talking about."

00:30:03.980 --> 00:30:06.620
- They are kind of like dependency injection, indeed.

00:30:06.620 --> 00:30:11.620
- Yeah, I had a guest, Nicole, on Python Test recently.

00:30:11.620 --> 00:30:14.140
This hasn't been aired yet,

00:30:14.140 --> 00:30:15.980
but when we were talking about something

00:30:15.980 --> 00:30:19.540
completely different and I mentioned all of the Rust

00:30:19.540 --> 00:30:21.500
that's coming into Python community.

00:30:21.500 --> 00:30:25.500
And I said, "But I mean, I wanna try to learn Rust,

00:30:25.500 --> 00:30:27.900
but I don't have a lot of time."

00:30:27.900 --> 00:30:30.620
And she said, "Oh, we had the same problem at work."

00:30:30.620 --> 00:30:31.900
So I wrote a tutorial.

00:30:31.900 --> 00:30:36.900
So there's a yar.fyi, yar is yet another Rust resource,

00:30:36.900 --> 00:30:39.660
but the idea-- - Pirate friendly.

00:30:39.660 --> 00:30:41.260
- Yeah, pirate friendly. - Yar.

00:30:41.260 --> 00:30:46.660
- It's a Rust tutorial, but intended for people

00:30:46.660 --> 00:30:49.580
that already know how to program, they just don't know Rust.

00:30:49.580 --> 00:30:53.300
And so I'm kind of excited to jump into that.

00:30:53.300 --> 00:30:54.420
Okay, what else?

00:30:54.420 --> 00:30:58.260
Oh, yeah, I'm looking for trying to ramp up interviews

00:30:58.260 --> 00:30:59.100
for Python people.

00:30:59.100 --> 00:31:02.340
So if there's just some interesting stuff

00:31:02.340 --> 00:31:05.060
around the Python community that you'd like me to talk to,

00:31:05.060 --> 00:31:08.060
or if you'd like me to talk to you, reach out.

00:31:08.060 --> 00:31:10.580
And the first episode was Michael Kennedy.

00:31:10.580 --> 00:31:11.620
It was a good episode,

00:31:11.620 --> 00:31:14.460
but there's only been 12 episodes so far,

00:31:14.460 --> 00:31:15.820
but I wanna get more out.

00:31:15.820 --> 00:31:19.300
And then the last thing I wanted to know,

00:31:19.300 --> 00:31:23.700
there's an interesting thing, phenomenon out there.

00:31:23.700 --> 00:31:26.340
Did you know that there's people still using X?

00:31:26.340 --> 00:31:29.620
- Yes, I've seen them.

00:31:29.620 --> 00:31:31.820
There are many of them over there, actually.

00:31:31.820 --> 00:31:35.020
- I am officially following zero people

00:31:35.020 --> 00:31:38.300
just to like as a protest.

00:31:38.300 --> 00:31:41.780
I don't really, I show up there about once a month

00:31:41.780 --> 00:31:43.340
to check my direct messages.

00:31:43.340 --> 00:31:46.300
So if you wanna contact me,

00:31:46.300 --> 00:31:48.780
I will probably reply to you eventually,

00:31:48.780 --> 00:31:50.980
but just warning, I'm not there very often.

00:31:50.980 --> 00:31:52.300
- Indeed, indeed.

00:31:52.300 --> 00:31:54.420
Awesome, well, a bunch of great items.

00:31:54.420 --> 00:31:58.780
How about we talk about some unfortunate architectural

00:31:58.780 --> 00:32:01.740
or vendor-based decisions as part of our joke here.

00:32:01.740 --> 00:32:02.580
You ready?

00:32:02.580 --> 00:32:03.420
Have you seen this joke?

00:32:03.420 --> 00:32:04.260
Did you look ahead?

00:32:04.260 --> 00:32:05.100
- I have not looked ahead.

00:32:05.100 --> 00:32:05.940
I don't know what you're talking about.

00:32:05.940 --> 00:32:06.980
- Beautiful, all right.

00:32:06.980 --> 00:32:07.820
You ready?

00:32:07.820 --> 00:32:08.660
- Yeah. - Do the joke.

00:32:08.660 --> 00:32:09.860
So here we are.

00:32:09.860 --> 00:32:12.900
I got this over on Reddit,

00:32:12.900 --> 00:32:14.940
and of course I zoomed it in.

00:32:14.940 --> 00:32:17.820
So why are we using SAP again

00:32:17.820 --> 00:32:19.260
when there's this open source thing

00:32:19.260 --> 00:32:20.620
that is so much simpler?

00:32:20.620 --> 00:32:22.780
Or why are we using Oracle again for this?

00:32:22.780 --> 00:32:24.340
Because whatever.

00:32:24.340 --> 00:32:26.900
So there's an angry team lead or something.

00:32:26.900 --> 00:32:28.260
Why did we end up with a solution?

00:32:28.260 --> 00:32:30.460
A couple of people are like, "Cool savings,

00:32:30.460 --> 00:32:31.740
time savings maybe."

00:32:31.740 --> 00:32:34.020
And then someone like a hipster looking dude in the back

00:32:34.020 --> 00:32:36.460
is like, "The vendor sent me a Yeti Tumbler."

00:32:36.460 --> 00:32:37.300
(both laughing)

00:32:37.300 --> 00:32:39.500
So they grab him and throw him out the window.

00:32:39.500 --> 00:32:43.020
Why are we stuck with this crappy system?

00:32:43.020 --> 00:32:44.700
It's like whatever.

00:32:44.700 --> 00:32:47.620
Well, it's conference swag basically.

00:32:47.620 --> 00:32:48.460
- Yeah.

00:32:49.380 --> 00:32:51.740
I think the real answer is usually

00:32:51.740 --> 00:32:54.100
the best options were all free

00:32:54.100 --> 00:32:57.300
and we needed to have to pay somebody.

00:32:57.300 --> 00:32:58.980
- Yeah, that's true.

00:32:58.980 --> 00:33:00.020
That's true.

00:33:00.020 --> 00:33:02.900
None of them had an SLA, but it's like, but--

00:33:02.900 --> 00:33:04.900
- Do you have a Yeti Tumbler?

00:33:04.900 --> 00:33:08.980
- I have one of these like soft Yeti coolers

00:33:08.980 --> 00:33:10.500
that we'll take when we go out camping

00:33:10.500 --> 00:33:11.340
or boating or something,

00:33:11.340 --> 00:33:13.460
but I don't have a Tumbler now, I don't believe so.

00:33:13.460 --> 00:33:14.300
You?

00:33:14.300 --> 00:33:15.140
- I had to look it up.

00:33:15.140 --> 00:33:16.940
I didn't even know what this was, but--

00:33:16.940 --> 00:33:17.860
- Oh yeah.

00:33:17.860 --> 00:33:19.220
This is like the Roll,

00:33:19.220 --> 00:33:24.220
Yeti is like the Rolls Royce of like hillbilly land, I guess.

00:33:24.220 --> 00:33:29.860
They're like super, super nice coolers.

00:33:29.860 --> 00:33:31.780
- If you want a thermos for your coffee,

00:33:31.780 --> 00:33:33.900
but you don't wanna spend $10,

00:33:33.900 --> 00:33:36.180
you wanna spend $40, get a Yeti.

00:33:36.180 --> 00:33:37.780
- Yeah, yeah.

00:33:37.780 --> 00:33:39.060
We have a lot of Yeti stuff actually.

00:33:39.060 --> 00:33:39.900
It's really nice.

00:33:39.900 --> 00:33:40.900
I'm just joking.

00:33:40.900 --> 00:33:41.740
- Bougie.

00:33:41.740 --> 00:33:44.780
- What if stuff got warm, Brian?

00:33:44.780 --> 00:33:45.740
What if it got warm?

00:33:45.740 --> 00:33:47.980
What if your beer got a little bit warm

00:33:47.980 --> 00:33:49.940
and your mountains and your cores,

00:33:49.940 --> 00:33:50.900
they weren't blue anymore.

00:33:50.900 --> 00:33:53.180
They turned whatever color they're not when they're not blue,

00:33:53.180 --> 00:33:55.500
whatever color they are when they're not blue.

00:33:55.500 --> 00:33:56.340
You know what I'm talking about?

00:33:56.340 --> 00:33:58.460
Like the world of Coors beer cans has a can

00:33:58.460 --> 00:33:59.980
that when it's like a certain temperature,

00:33:59.980 --> 00:34:02.900
the mountains on the can turn blue.

00:34:02.900 --> 00:34:03.820
And if it's like too warm,

00:34:03.820 --> 00:34:05.060
they like turn white or something.

00:34:05.060 --> 00:34:06.060
I don't know what other color.

00:34:06.060 --> 00:34:06.900
- Okay, so--

00:34:06.900 --> 00:34:07.740
- This is a very serious problem.

00:34:07.740 --> 00:34:08.580
- We had a couple options.

00:34:08.580 --> 00:34:11.020
We could have made better beer or a better can.

00:34:11.020 --> 00:34:12.780
We chose a better can.

00:34:12.780 --> 00:34:13.940
- What do you see when you're shopping?

00:34:13.940 --> 00:34:14.780
Come on now.

00:34:14.780 --> 00:34:16.260
(laughing)

00:34:16.260 --> 00:34:17.100
- Awesome.

00:34:17.100 --> 00:34:17.940
- Yeah.

00:34:17.940 --> 00:34:18.780
- Okay.

00:34:18.780 --> 00:34:19.620
- Yeah.

00:34:19.620 --> 00:34:20.460
- Fun as always.

00:34:20.460 --> 00:34:22.140
Thank you for being here and thank you everyone

00:34:22.140 --> 00:34:22.980
for listening.

