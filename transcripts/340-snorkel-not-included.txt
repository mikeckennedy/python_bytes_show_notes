00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 340, recorded June 13th, 2023.

00:00:10 I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 And this episode is brought to you by InfluxDB from Influx Data.

00:00:16 Awesome real-time DB, so time series database.

00:00:20 So we're excited to tell you about that later.

00:00:22 If you want to connect with us, you can find us all on Fostadon.org, at MKennedy, at Brian Okken, and at Python Bytes.

00:00:29 Join us for the live show at pythonbytes.fm/live.

00:00:32 If you want to be part of the live stream and be in the audience, all the older video versions are there as well.

00:00:38 And Brian, before we jump into your first topic, I've got some ideas, a request from the audience.

00:00:45 Okay.

00:00:46 Okay.

00:00:46 So we are going to do an Ask Me Anything episode.

00:00:51 And really, that should be Ask Us Anything.

00:00:54 But the EWA is not typically how people announce it.

00:00:57 It's the AMA.

00:00:58 Not EWA.

00:00:59 So following convention standard acronyms there, Ask Us Anything.

00:01:07 I put together a Google form.

00:01:09 It is super short.

00:01:10 It says, what is your name?

00:01:11 What is your question?

00:01:11 And if you want, there's a few other fields for like second question, you know, and things like that.

00:01:16 But they're optional.

00:01:17 So if you're listening and you've ever wondered like, I wonder if Brian has a thought on an opinion on this.

00:01:24 Does he have an opinion on pytest plugins?

00:01:26 I don't know.

00:01:26 Does Michael have a thought on podcasting?

00:01:30 Whatever.

00:01:30 You know, please take the time and put that in there.

00:01:33 And, you know, we'll give you credit on the show as well.

00:01:35 If you don't want to have your name in there, just put anonymous or something.

00:01:39 So everyone check that out.

00:01:41 It is at, I created a short URL for it.

00:01:45 Let's see.

00:01:46 Pythonbys.fm slash AMA 2023.

00:01:49 So people can just go over there and check it out.

00:01:52 So that's going to be a lot of fun, Brian.

00:01:54 I don't know when we're scheduling it.

00:01:56 Probably pretty much when we get enough questions.

00:01:58 And that link will be in the show notes, right?

00:02:00 Absolutely.

00:02:01 Let's talk GUIs.

00:02:02 We haven't been on a GUI rant for a while.

00:02:04 Yeah.

00:02:04 I don't know if we've ever talked about GUIs.

00:02:07 I think maybe we have.

00:02:08 Perhaps.

00:02:09 It's been a while.

00:02:10 It has.

00:02:12 So I ran across this website called Python GUIs.

00:02:16 And it's like a whole website dedicated to Python GUIs.

00:02:19 And it's from a fellow named Martin Fitzpatrick.

00:02:24 He does consulting and some other stuff.

00:02:27 And this is pretty kind of cool.

00:02:29 This is fairly comprehensive.

00:02:31 There's, he has tutorials and references to books and everything like that.

00:02:37 But it's kind of a neat walkthrough, just the website itself.

00:02:40 Like, for instance, where do I begin?

00:02:42 His recommendation is doing PyQT 6 to start with if you don't have a preference.

00:02:49 However, there's, so let's like walk through a couple.

00:02:53 So if you just kind of walk through and he talks about what you should look about,

00:02:58 look, learn what tutorials are available.

00:03:01 And then it says continue.

00:03:04 So if you continue on with the PyQT 6, you just sort of walk through a tutorial around how to get QT Designer up and everything.

00:03:13 But there's a lot more than just QT here.

00:03:16 He's got tutorials on PyQT 6, QT 5, PySide, TK Ender.

00:03:23 There's even a tutorial, most recent tutorial I saw was getting started with Kivy for GUI development.

00:03:31 And it's a pretty lengthy getting started with Kivy thing.

00:03:34 So, and it covers Mac, Windows, Linux.

00:03:38 So it's pretty comprehensive.

00:03:40 It's kind of nice.

00:03:41 Yeah, this looks really nice.

00:03:43 I think choosing, I always feel like there's this paradox of choice.

00:03:46 And when I'm thinking about Python GUIs and it's like, well, there's no real clear answer.

00:03:51 And they're all kind of got their own oddities into them or their own restrictions.

00:03:55 But this is really cool to see them put all side by side and different tutorials helping you get started.

00:04:00 Yeah.

00:04:01 And yeah, I kind of like it.

00:04:04 I think a lot of people start with like TK Enter.

00:04:06 It's not TK in there.

00:04:08 It's a, you know, whatever, Tinker?

00:04:11 I forget what they call it with Python.

00:04:13 But it's not, I don't think that's a great place to start.

00:04:18 If you want something to look really nice, if you're going to support it, I think I kind of agree with them.

00:04:24 Maybe starting with Qt or Qt, sorry.

00:04:27 I grew up using Qt without knowing how to pronounce it.

00:04:34 People do pronounce it Qt, but yeah.

00:04:37 Anyway.

00:04:38 So if you want to learn about Python GUIs, maybe check out pythonguies.com.

00:04:42 So what do you got for us?

00:04:45 Oh, you're muted.

00:04:46 Before we move on, Brian, I do want to also just sort of second that, that I think Qt, those look like native applications that belong on your platform, right?

00:04:57 When you're not going to go like, oh, what, clearly some funky cross-platform API is what we're working with here right now.

00:05:03 This stuff looks pretty solid, right?

00:05:05 Yeah.

00:05:05 But it is TK Enter.

00:05:07 Why do we call it TK Enter?

00:05:09 Or TK Enter?

00:05:10 I don't know.

00:05:10 Because it's not TK.

00:05:12 Oh, because it's from the TK toolkit.

00:05:13 Got it.

00:05:14 Makes sense.

00:05:15 Got it.

00:05:16 That makes sense.

00:05:17 All right.

00:05:17 I have something for all the data scientists out there.

00:05:20 How about that?

00:05:21 Okay.

00:05:22 JupyterLab, which is the more capable, the more IDE-like experience for Jupyter Notebooks, 4.0 is here.

00:05:31 And it looks like a pretty mega release.

00:05:33 So they say, they being Jason Weil, say the next major release of the full feature development environment for Jupyter is here.

00:05:43 It is available for install right off PyPI in Conda Forge.

00:05:48 So if you have it, all you got to do is pip install --upgrade JupyterLab or Conda install dash C Conda Forge JupyterLab.

00:05:55 And it'll just upgrade in place for you.

00:05:58 So that's pretty excellent.

00:05:59 That's low maintenance, low effort upgrade.

00:06:01 I suspect there's a lot of stuff happening when you run those commands.

00:06:05 One of the big deals is JupyterLab is now faster.

00:06:08 There's a bunch of different ways in which they made that happening.

00:06:11 They made that happen where that's happening.

00:06:13 Notebook windowing is one of them where for a long notebook, instead of trying to process and load the whole thing, it'll just show the web browser viewport in terms of rendering, which will make some of the rendering faster.

00:06:27 Got CSS rule optimizations.

00:06:29 CodeMirror.

00:06:31 CodeMirror is the editor, text editor of the cell.

00:06:34 So CodeMirror 6 is out and MathJax 2 as well.

00:06:38 So if you're working with large notebooks, it should be much more efficient than JupyterLab 3, they say.

00:06:45 Awesome.

00:06:46 That's encouraging, right?

00:06:46 Yeah.

00:06:47 Yeah.

00:06:47 Yeah.

00:06:48 So cool.

00:06:49 Cool.

00:06:49 Let's see what else.

00:06:50 There's additional performance improvements, but you have to turn these on.

00:06:54 So you can get faster tab switching on Chromium-based browsers, which is unfortunately almost all of them, but that's the world we live in.

00:07:04 So you can do it.

00:07:05 So you can do it.

00:07:05 But you've got to go settings, JupyterLab shell, switch hidden mode to content visibility.

00:07:11 And for even more better performance with long notebooks, you've got to go settings, notebooks, switch on a windowing mode to full.

00:07:20 So those are all options.

00:07:22 I told you there's a new CodeMirror.

00:07:24 That's the text editor for cells and file editors.

00:07:27 And it's upgraded to CodeMirror 6, which has a bunch of accessibility and performance improvements.

00:07:32 So people can check that out.

00:07:34 Let's change there.

00:07:35 Also, JupyterLab, I'm not sure I knew this, comes with a real-time collaboration, a.k.a. Google Docs style of collaboration.

00:07:42 Okay.

00:07:43 I didn't know that they'd do that.

00:07:44 I did not either.

00:07:45 I knew there were some notebook platforms that did, but I didn't realize JupyterLab did.

00:07:49 So they moved this RTC, real-time collaboration, to a separate package, Jupyter collaboration.

00:07:55 And that's available.

00:07:56 It's its own sort of thing.

00:07:58 Includes support for multiple cursors and selections.

00:08:01 New shared types.

00:08:03 And, yeah.

00:08:04 There's also a new extension manager for JupyterLab extensions.

00:08:08 Improved document search.

00:08:10 UI enhancements.

00:08:11 Like, more hotkeys and other styles.

00:08:14 Accessibility improvements.

00:08:16 Dev tool updates.

00:08:17 You know, like, how they build JupyterLab.

00:08:20 So TypeScript v5 and React v18.

00:08:22 Most people won't care about that.

00:08:24 But if you work on or try to customize the JupyterLab itself, then, like, you create an extension or something.

00:08:30 You probably care.

00:08:31 And finally, finally, finally, more than 100 bugs have been addressed and resolved, making it more stable and faster.

00:08:38 So that sounds like a pretty big deal, doesn't it?

00:08:39 Yeah.

00:08:40 Yes.

00:08:41 I think addressed means fixed and not just said hello to.

00:08:46 Exactly.

00:08:48 Hello, bug.

00:08:49 How shall I address you?

00:08:50 You shall call me a CVE, remote code executioner.

00:08:54 Oh, hey.

00:08:54 Nice to meet you.

00:08:55 No, probably not like that, right?

00:08:57 Yeah.

00:08:57 So that's cool.

00:08:58 Yeah.

00:08:59 Yeah, that is cool.

00:09:00 Getting some thumbs up from the audience as well.

00:09:03 Now, before we move on, I want to just talk about our sponsor real quick, InfluxDB.

00:09:09 So thanks to Influx for supporting the show.

00:09:13 So this episode of Python Bytes is brought to you by Influx Data, the makers of InfluxDB.

00:09:18 InfluxDB is the database purpose built for handling time series data at a massive scale for real-time analytics.

00:09:25 And developers can ingest, store, and analyze all types of time series data, metrics, events, traces in a single platform.

00:09:32 So how would boundless cardinality and lightning-fast SQL queries impact the way you develop real-time applications?

00:09:38 Check out Influx.

00:09:40 InfluxDB processes large time series data sets and provides low-latency SQL queries, making it the go-to choice for developers building real-time apps and seeking crucial insights.

00:09:52 For developer efficiency, InfluxDB helps you create IoT, analytics, and cloud applications using timestamped data rapidly and at scale.

00:10:00 It's designed to ingest billions of data points in real-time with unlimited cardinality.

00:10:06 InfluxDB streamlines building ones and deploying across the various platforms and environments from the edge, on-premises, and to the cloud.

00:10:14 So try them for free at pythonbytes.fm/InfluxDB.

00:10:18 The link is in your podcast player show notes.

00:10:20 Thank you to Influx Data for supporting the show.

00:10:24 Yeah, thank you.

00:10:25 I would like to talk about data, but not databases, but data types.

00:10:33 So this is kind of early to talk about, but hey, Brett Cannon can write about it on his blog.

00:10:40 I think it's fair game to talk about.

00:10:43 Brett Cannon had a proposal for a new kind of data type in Python called a struct.

00:10:51 Structs are new things.

00:10:53 We've lived with them in C for a long time, and other languages have other types.

00:10:59 I want to take a slight detour before I talk about the struct proposal from Brett.

00:11:06 And by proposal, I don't mean it's a PEP.

00:11:09 I don't think it's a PEP yet.

00:11:10 I think it's just an idea that he had.

00:11:12 But I think it's a cool idea.

00:11:14 But one of the things he talked about was algebraic data types.

00:11:18 And I got to admit, I haven't run across that term, algebraic data types, before like a week ago or so.

00:11:25 And then I've read two articles referring to it.

00:11:27 I'm used to ADTs being abstract data types, which are user-defined data types.

00:11:36 I don't know what the abstract means.

00:11:39 But anyway, algebraic ones are things that you can compose.

00:11:44 They're like abstract data types, but they're the things that you can compose like a list is a nil plus I don't know what that means.

00:11:53 But anyway, or tree is either is composed of empty or leaf or a node or something.

00:11:59 I'm still not quite sure how this makes anything to do with it.

00:12:04 Side diversion.

00:12:05 Side diversion.

00:12:06 Anyway, so what does this look like?

00:12:10 And it's kind of a neat idea.

00:12:11 So jumping down to an example, with a struct, you could just say a point is a struct that takes X and Y and they're both integers, say.

00:12:22 And they have to be named or either positional or named, but they cannot be unnamed only.

00:12:28 I don't know why.

00:12:29 And then it'd be kind of like named classes or named tuples.

00:12:34 So you just access the stuff.

00:12:38 So you just declare this point.

00:12:42 And then you can get at it with like, say, P dot X or P dot Y.

00:12:45 And that's it, really.

00:12:46 And that's it.

00:12:46 And that's it.

00:12:46 And that's it, really.

00:12:46 And that's it.

00:12:46 And that's it, really.

00:12:46 And that's it.

00:12:46 And that's it, really.

00:12:46 And that's it.

00:12:46 And that's it.

00:12:46 And that's it, really.

00:12:46 And that's it, really.

00:12:46 So what is, what is this?

00:12:49 Why would we need this?

00:12:50 And I think it'd be really pretty cool to have something that simple.

00:12:54 And these structs would be, they'd not allow inheritance.

00:12:59 They would have no methods currently.

00:13:01 No methods, no inheritance.

00:13:03 And they're not mutable.

00:13:05 So you can't change the thing in it.

00:13:07 Why is that important?

00:13:08 Well, you then you can, you can use these things for keys and dictionaries and things like that.

00:13:13 And I just think this would be kind of cool because I use, I still with data types, even with data types and all the other goodies and adders and other goodies we have within Python, I still use name tuple a lot.

00:13:27 And I would totally use this for a lot of stuff and make it, especially if it was super fast.

00:13:32 So that's the idea.

00:13:33 Got any ideas?

00:13:34 It looks interesting.

00:13:35 And the, the defining syntax is kind of a one liner, a little bit, as you pointed out, like a named tuple, but it actually redefines class like thing with these optimizations, for example, dunder slots and kind of an data classes type thing with dunder equal and dunder hash.

00:13:54 So for people listening, you just say all in one line struct point a capital P for the type parentheses X comma Y.

00:14:01 That's the whole thing, right?

00:14:02 Yeah.

00:14:04 Tony out in the audience does wonder if it actually requires type annotations or if those are optional.

00:14:09 I would guess they're optional, but I like them.

00:14:12 So I don't know.

00:14:13 No, Brett says in his article, he would propose that they'd be, that they would be optional if you, if you just had two elements in something.

00:14:21 I mean, it's.

00:14:22 Yeah.

00:14:22 It seems consistent with Python that it would be optional, right?

00:14:25 Yeah.

00:14:25 And Tony also says, oh boy, I just started writing some Rust code at work.

00:14:30 So I'm interested in this for Python.

00:14:32 Yeah.

00:14:33 Yeah.

00:14:33 And that like the example that Brett gave of this, this point, he then showed the example of what, what would, what under the hood that would give you that you don't have to write.

00:14:45 And this example of like being able to, to convert it to a dictionary and replace parameters and using slots.

00:14:53 And I mean, there's a lot of code here that you don't need to write.

00:14:56 And yes, we do kind of have a data type data classes that sort of do this, but data classes are not, they're not optimized for data for having lots and lots of them.

00:15:08 So this would be like an optimization to have just like huge, huge data structure full of these things and have it still be fast.

00:15:16 So I think it'd be cool.

00:15:19 Having it be part of the language and maybe they could do optimizations around it for, for Python 3, 14 or whatever, you know, the faster CPython story.

00:15:30 Like for example, if you know, it's immutable, could you, could you make it allocate on just the stack and not actually go to the heap or things like this?

00:15:38 Right.

00:15:38 It'd be interesting.

00:15:39 Maybe that's a bridge too far, but I'm also interesting in how this, how this maps to like hardware because dealing with registers and, and hardware interfaces, there's in using C, we often have structs that we overlay over, over the top of like shared memory systems.

00:15:56 And, and this might be great use for something like that.

00:16:01 So, yeah.

00:16:02 A few more thoughts out there.

00:16:04 Grant says this is in line with what Mojo expresses.

00:16:07 We recently spoke about them.

00:16:09 I would love, love to have a struct in Python and blaze points out waiting for Hennick's opinion.

00:16:13 Maybe something like this.

00:16:14 We'll get into adders.

00:16:15 Yeah.

00:16:15 We'll see.

00:16:16 Yeah.

00:16:17 Yeah.

00:16:18 So, you know, sometimes Brian, it's about putting new stuff, new things into Python.

00:16:23 Sometimes, however, it's about ripping it out.

00:16:27 Yes.

00:16:27 So my next item is the realization of PEP 594.

00:16:33 So PEP 594, for those of you who don't know, I interviewed, in Himes and Brett Cannon.

00:16:42 Speaking of Brett Cannon, it gets a back to back mention here about removing Python's dead batteries and this PEP 594.

00:16:51 And the idea is there is stuff in Python that makes no sense to be in Python.

00:16:55 It made sense when we had a world without the internet, when there was no concept of pip install and you really needed to kind of have Python come with a lot of its capabilities.

00:17:05 But now, if you go over to pypi.org, what is the current number?

00:17:10 We have 460,000 packages that are evolving like a larger definition of what Python is really, really fast.

00:17:18 Right.

00:17:18 Yeah.

00:17:19 So, for example, do you think it would make sense potentially to have an implementation of an async chat client built into the standard library of Python?

00:17:28 Maybe not.

00:17:29 I didn't know we had that.

00:17:31 Well, apparently we did.

00:17:32 We did until 3.12.

00:17:35 So that's not actually out yet, but it's gone.

00:17:38 Or like an SMTP daemon built into Python.

00:17:43 Right.

00:17:43 Do we, who is going to, who should be running their own mail client as part of Python itself?

00:17:49 You know, not even a separate package.

00:17:50 But more importantly, as was discussed over on the podcast, like this is overhead for all the core devs.

00:17:57 Do we want them working on things like the struct or do we want them still managing AIFC?

00:18:02 Yeah.

00:18:03 Yeah.

00:18:04 Like audio parsing for expired.

00:18:07 Nobody uses any more audio formats or CGI or telnet libraries or, you know, like chat clients.

00:18:15 So this basically is the announcement by Victor Stinner, I believe, saying we just removed 19 modules from Python 3.13 standard library.

00:18:29 These are the ones that have already been deprecated in 3.11 by PEP 5.9.4.

00:18:34 So, yeah, it's a big long list of them.

00:18:37 Like I said, like you pointed out some CGI image header, you know, mail stuff.

00:18:42 Also talks a little bit about the 3.12 and 3.11 ones, which are gone.

00:18:46 And then finally, it does say like, if this affects you, here's what you can do.

00:18:50 Do nothing.

00:18:51 Just stay on 3.11.

00:18:53 It says, in my opinion, it is a dangerous long-term choice.

00:18:57 However, you can do nothing.

00:19:00 You could create a group of volunteers to give life to this module, right?

00:19:03 The module is open source in the sense that Python's standard library is open source.

00:19:10 So, you go in there, you copy the files out, you make a PyPI package for it, and you find people who want to keep it going.

00:19:17 Yeah.

00:19:18 Or you vendor it.

00:19:20 You could copy the removed module just into your code itself, right?

00:19:24 Often it's just a .py file.

00:19:26 So you just vendor it in if you have to.

00:19:28 Honestly, that kind of seems like a pretty decent idea if you're like going low-key and you don't want to take on an open source project to remain, to maintain CGI.

00:19:36 You're just like, I just need this to run.

00:19:37 So you can copy that over.

00:19:39 And then there's a whole discussion on stuff around this, right, if you want.

00:19:43 So, anyway, 20 standard lib modules, they're out.

00:19:47 Yeah.

00:19:47 I think it's a good thing.

00:19:48 Just like, yeah.

00:19:50 Changing your batteries, kind of like your smoke detectors.

00:19:53 Yeah, exactly.

00:19:55 One more audience comment on this before we move on.

00:19:58 Grant says, happy for the Python core devs to kill all these modules.

00:20:01 Nothing makes senior engineers happier than calling bodies of code that aren't worth their weight.

00:20:06 I totally agree.

00:20:06 Right.

00:20:07 I would be happy, honestly, to see even a thinner, smaller Python standard library and then have more of these as pip installed.

00:20:15 But then when you install Python, it could kind of come pre-installed with 20 or 30 packages that if you want to upgrade them separately or I don't know.

00:20:23 So for things like if I want to run this on MicroPython, I wouldn't run it on WebAssembly under PyScript.

00:20:28 Like those situations are like you don't, the whole huge standard library is a problem.

00:20:32 So I don't know.

00:20:34 I feel like there's interesting stuff happening here.

00:20:36 But this is a good start.

00:20:37 Yeah, definitely.

00:20:38 I think it is.

00:20:40 So.

00:20:41 It is.

00:20:42 And is that all of our items?

00:20:44 I believe it is, isn't it?

00:20:45 It is.

00:20:45 And so some of these decisions are made by some of the core Python people on the, maybe on the Python board have something to do with some of this, perhaps.

00:20:56 So if the elections for, so one of our extras, I'd like to mention that the PSF announced that you need, if you are, if you care about elections, you kind of need to affirm your PSF membership voting status before the 15th.

00:21:14 So the cutoff is only a couple of days from now.

00:21:16 So, and I'm glad somebody, somebody mentioned this.

00:21:21 I can't remember where I saw it because it sort of went in my email box, email inbox and forgot, I forgot to look.

00:21:27 So I just affirmed my voting status this morning.

00:21:31 Excellent.

00:21:32 Well, I definitely affirmed mine a couple of days ago.

00:21:36 So nice.

00:21:37 It's all good.

00:21:38 But yeah, thanks for pointing out here.

00:21:39 This is great.

00:21:39 Okay.

00:21:40 Do you have any extras?

00:21:41 I do.

00:21:42 I just released a video collab with Julian Siqueira and Bob Belderbos from the PyBytes guys.

00:21:49 About five tips for budding Python developers, five career tips for budding Python developers as a 25 minute YouTube video.

00:21:58 So people can check that out.

00:22:00 That link is in your show notes.

00:22:02 If that sounds interesting to you.

00:22:03 It looks like Julian and Iron Man are looking at the same thing.

00:22:06 They are.

00:22:08 Julian has an Iron Man painting in the background behind him and they've got the same basic expression.

00:22:14 Pretty awesome.

00:22:15 So people can check that out.

00:22:16 Also, PyCon US 2023.

00:22:21 Remember that, Brian?

00:22:22 It was a while ago.

00:22:22 Yeah.

00:22:23 All the videos are out.

00:22:24 The videos are out.

00:22:25 Yay.

00:22:26 Yay.

00:22:27 So there are some that are unavailable that are hidden.

00:22:30 I'm wondering if that's intentional or if that's like they were uploaded and hidden and they just forgot to be set to public.

00:22:36 So whoever is in charge of this might want to look why there's hidden videos published to this playlist.

00:22:40 But I don't know how many there are.

00:22:42 There's 142 videos, possibly some others as well that are hidden on this playlist.

00:22:48 So people can check it out.

00:22:49 This is basically all of PyCon, including the tutorials, if you want to go and kind of be part of that side of PyCon, which is excellent.

00:22:58 Nice.

00:22:58 So some are white and some are kind of this gray color.

00:23:01 Do you know what the difference is?

00:23:03 No.

00:23:04 No idea.

00:23:04 I think it's just the font, just the opening slide they use for their presentation.

00:23:10 I don't know if there's more to read into it than that.

00:23:13 I would like to maybe, I don't know if the people who are organizing next year's PyCon are listening.

00:23:21 I would like to propose just some kind of suggestion that might make this a little easier for them because this seems to be like a huge challenge from what I can tell.

00:23:31 Right.

00:23:31 PyCon was in April.

00:23:33 It's the middle of June.

00:23:35 And now the videos have come out.

00:23:36 So somebody has spent, you know, like a month and a half working on these videos.

00:23:41 And the community has been waiting a month and a half to get them, right?

00:23:45 Brian, how quickly is our video for Python Bytes out when we're done with it?

00:23:48 Like right when we're done.

00:23:50 I mean, like literally you could seek around in it as you like part of the stream.

00:23:54 Right.

00:23:55 We're just live streaming this using something like StreamYard.

00:23:58 And I know that there's a pay to attend virtually.

00:24:01 So maybe you don't want to have a public stream that people can use.

00:24:05 Maybe there's, but there's kind of just live streaming it to YouTube, even if that's an unlisted URL that you then, when the conference is over, flip to public.

00:24:13 Because I know that kind of you want to them, you don't necessarily don't want that to be going, have that whole live experience if you're not part of the, like I signed up for the virtual pass, which is great.

00:24:23 It's fine. But I think we could get these videos in a lot quicker and help people a lot if you did something like, you know, just like kind of live streamed it.

00:24:30 I know people might worry about the connectivity and it cutting out and the quality.

00:24:35 But with like, for example, StreamYard, it records local video.

00:24:38 It's like maximum quality.

00:24:40 Right. So there's if you if they had a stream deck where they could switch to the views and they had this going and recording locally, like these videos would be out as quick as you could click from unlisted to public on YouTube.

00:24:51 I do want to, I guess, disagree with you on that.

00:24:54 OK.

00:24:55 So so so PyCascades, for one, did the I don't know if it was available right away, but it was available soon after the entire day recordings.

00:25:05 She had the day recordings.

00:25:06 So if you if you wanted to find yours or something or find somebody's, you could kind of scroll through and find it.

00:25:12 It was a little it was a little it was just sort of going.

00:25:16 There was there wasn't any editing.

00:25:17 So those it was kind of hard to deal with.

00:25:19 I don't know how many people really watch those.

00:25:21 But the PyCon U.S.

00:25:25 videos, I didn't realize this at first.

00:25:27 Somebody corrected me.

00:25:29 They were available to people that either attended live or attended virtually and but didn't get to go to all this.

00:25:37 All the videos you're the online experience included being able to go in and watch videos, the other videos that you missed.

00:25:45 So those were available right away.

00:25:47 I didn't know about it.

00:25:50 So maybe advertising it more.

00:25:51 And also, it was a little hard to get to.

00:25:54 I got to say, it wasn't it wasn't easy.

00:25:56 I kind of would like to have like the schedule that you go into if you're logged in and you can see the schedule.

00:26:03 Why not have that be able to just link to the video that you missed or something like that?

00:26:10 I don't know.

00:26:10 There's there's better ways to make it a little bit easier.

00:26:13 It was a little hard to deal with, but it was available.

00:26:16 And I also think like, for instance, I'm going back to Pike Cascades.

00:26:20 I did a talk that the recording, the full day one had like glitches and had me up there at the beginning trying to get the audio ready.

00:26:29 And, you know, there's this getting started stuff, whereas having somebody be able to clean that up a bit would be good.

00:26:35 It's just I do also.

00:26:37 But I don't think that this is a long time from from when PyCon really was to now.

00:26:42 That's that's what?

00:26:44 Month.

00:26:44 I think it's too long.

00:26:45 That's too long.

00:26:46 I think it's too long.

00:26:46 So last year, 2022 was three three months, I believe.

00:26:50 I mean, it's a long time.

00:26:51 And I know it's a lot of work, but maybe maybe we could do something either either having rough cut ones out there initially or maybe have some of us volunteer.

00:27:01 I mean, I think we could have some volunteers to help clean them, clean them up for like good enough for now or sort of things.

00:27:08 I don't know.

00:27:09 Something.

00:27:09 Yeah, yeah, I agree.

00:27:10 We should have made this a whole item, I suppose, if we're talking this much.

00:27:13 The final thought is like with StreamYard, I don't know about the other ones.

00:27:15 You can literally go in before you hit publish.

00:27:17 You can just say trim this and go to click, click.

00:27:19 Okay.

00:27:20 Put it on YouTube now.

00:27:21 And then like that would be.

00:27:23 Yeah.

00:27:23 You know, not very much.

00:27:24 I agree that you don't want all the setup in that junk.

00:27:26 You want to like, welcome.

00:27:27 I'm Brian.

00:27:28 I'm talking about extensions, et cetera.

00:27:30 Right.

00:27:30 Like straight away.

00:27:31 And I can't get the slides to work.

00:27:33 And you know.

00:27:33 Yeah, exactly.

00:27:34 I know.

00:27:34 You want to skip all that crap.

00:27:35 Okay.

00:27:36 But good news.

00:27:38 The videos are out and people can check them out.

00:27:40 Okay.

00:27:41 Next.

00:27:41 Next, next, next.

00:27:44 A couple of version updates for Python.

00:27:47 Python 3.11.4, 3.10.12, 3.9.17, 3.8.17, 3.7.17.

00:27:53 And importantly, 3.12.beta2 are all out.

00:27:58 And you might be interested to know that both the 3.11 and 3.10, I suppose the others, include security fixes.

00:28:06 So nice to meet you, Mr. CVE.

00:28:08 For example, some problems that were solved in OpenSSL are now included.

00:28:15 There's 1, 2, 3, 4, 5, 6, 7, 8, maybe.

00:28:19 7 or 8 CVEs that were addressed on OpenSSL and some URL parsing and UUDecode and things that might look like you want to get fixed.

00:28:29 So check that out and upgrade if you can.

00:28:31 Python Bytes is already running 3.11.4.

00:28:34 So hooray for that.

00:28:35 Python Bytes.

00:28:36 I had a friend say they were working on upgrading to 3.10.

00:28:39 And I'm like, I don't even remember 3.10.

00:28:41 I've been like on a 3.11 for so long.

00:28:43 Yeah, absolutely.

00:28:45 Absolutely.

00:28:46 All right.

00:28:46 And then final call.

00:28:48 Just remember the Python Bytes AMA form.

00:28:51 Please get out there and submit that one more time.

00:28:54 Link's in the show notes.

00:28:55 Yes.

00:28:56 Yes.

00:28:56 Right at the top.

00:28:57 Yes.

00:28:57 Ready for a joke?

00:28:58 I am.

00:29:00 This one comes to us from Ken Van Wick.

00:29:03 And it's a follow on from the apple.com.

00:29:07 Where's their?

00:29:08 There it is.

00:29:09 Their Vision Pro.

00:29:10 Right?

00:29:13 Yeah.

00:29:13 This thing is super expensive.

00:29:14 It looks really amazing.

00:29:17 I just, I don't, I've not got faith that it's going to take off.

00:29:20 But the ability to say like, I want to sit, I want to stand on the sideline right at the goal line at the Super Bowl and be able to look around and watch that as if I was there.

00:29:30 Like that would be epic.

00:29:31 Is that worth a $3,500 device?

00:29:34 Now, Brian, it's expensive.

00:29:36 But did you know, just like the Mac Pro, which was also recently announced, the Mac Pro, super expensive, $7,000 minimum.

00:29:44 But it doesn't come with the wheels.

00:29:45 If you buy it with the wheels, the wheels are $400 separate, right?

00:29:48 To get the wheel for your case.

00:29:50 So this is kind of like that.

00:29:52 Here's your, this comes to us from Kim Benwick and he says, actually this is Paul Mason's thing.

00:29:58 So you've got your $3,499 Vision Pro and it comes with the Apple branded $899 snorkel.

00:30:08 What do you think of that?

00:30:10 I think that's cool.

00:30:12 And actually, no, yeah.

00:30:15 If you could, if this would actually work, would work underwater so that you could go back out in your swimming pool and it would, you could look like you're actually on a coral reef.

00:30:24 That'd be cool.

00:30:25 That would be awesome.

00:30:26 Imagine you were in here playing something like Subnautica, one of those types of games, which is just amazing.

00:30:34 Like a game where you're underwater and exploring.

00:30:36 Yeah.

00:30:37 But in VR with your, with your Apple snorkel on, think how real that would be.

00:30:41 Yeah.

00:30:42 But actually underwater.

00:30:43 Like, but they're probably not.

00:30:45 Yes, exactly.

00:30:45 Yeah.

00:30:46 That'd be cool.

00:30:49 Oh boy.

00:30:49 Well, that's what I got for y'all.

00:30:51 $899 Apple snorkel not included.

00:30:55 Yeah.

00:30:56 Cool.

00:30:56 All right.

00:30:57 Nice.

00:30:57 Well, yeah, very fun.

00:30:59 Thank you everyone for the active chat in the live stream.

00:31:02 Thank you for everyone who listened, no matter how you listen.

00:31:04 And Brian, thanks as always.

00:31:06 Thank you.

00:31:07 Bye.

