00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:06 This is Python Bytes, episode 43, recorded on September 13, 2017.

00:00:12 And I'm Michael Kennedy.

00:00:15 And I'm Brian Okken.

00:00:16 Hey, it's great to be with you guys. Great to be with you, Brian.

00:00:18 We have a bunch of really cool stuff lined up.

00:00:21 There's a few things that really surprised me and maybe even inspired me to go create this project

00:00:26 that we were just chatting about before we hit record.

00:00:27 So very, very cool stuff.

00:00:30 But before we get to it, let's just say thank you to Rollbar.

00:00:32 Those guys are sponsoring the show.

00:00:34 You check out their offers at pythonbytes.fm/Rollbar, and we'll get to them later.

00:00:38 I want to talk about taking the future and sending it into the past, like Marty McFly style.

00:00:44 What do you think?

00:00:45 Yeah.

00:00:45 Yeah, this popped up recently, just this last week.

00:00:51 And I'm not sure what the impetus was, but it is Future F-Strings.

00:00:56 It's a project.

00:00:57 You could just do pip install future dash F-Strings.

00:01:01 And then you've got a little bit of a little...

00:01:04 It isn't a library that you include.

00:01:06 It changes the encoding.

00:01:09 So I'll just jump to the chase.

00:01:11 It's a back port of F-Strings, even down to Python 2.7.

00:01:15 And I've tried it in 2.7.

00:01:18 I haven't tried it in anything else.

00:01:20 But it is kind of fun to be able to play with F-Strings everywhere.

00:01:23 So I had very mixed thoughts about this when you told me about this project.

00:01:28 On one hand, I look at it like, you know, you're taking one of the really amazing and smooth features of Python 3.6 and making it available in legacy Python.

00:01:39 Which is kind of like, do we really want to like encourage that sort of thing?

00:01:43 But at the same time, I feel like this also lets you, as you're migrating your code, move to the latest, greatest syntax in Python 2.

00:01:53 But then when you actually make the switch, you're not going to have to go like, well, we used format because that was the best option in Python 2.

00:01:59 But now we've got F-Strings.

00:02:01 And so I feel like that's really cool.

00:02:04 The other area where I think it's great is Python 3.

00:02:06 There's plenty of people running Python 3.5.

00:02:09 That's the default on Ubuntu right now and things like that that don't have F-Strings.

00:02:13 I've decided after further contemplation that this is a really cool project and I want to check it out.

00:02:19 So tell people what F-Strings are.

00:02:22 I mean, most people maybe know, but what's this thing, this F-String thing?

00:02:26 Well, it's, so if you're familiar with the format part that you could be, I don't know how long ago you start using that.

00:02:36 I think that's available in 2.7 as well.

00:02:37 Yeah, I think so too.

00:02:38 In the string that you're printing, you can like leave little brackets to show where you're going to insert something.

00:02:44 And then you say like .format and then all the things that you're going to put into the string.

00:02:49 In F-Strings, you just put an F before the string and then within your brackets, you just put the variable name for whatever you're going to put in there.

00:02:56 Or any expression can go in there.

00:02:59 Right.

00:02:59 So you could say like F, quote, hello curly thing dot upper and like uppercase the thing just in that expression or something like that, right?

00:03:07 Yeah.

00:03:07 Yeah.

00:03:07 That's really cool.

00:03:08 Yeah.

00:03:09 At first I was like, I don't know if I like it, but once you start using F-Strings, you can't go back.

00:03:14 That's really one of the reasons why I like this project is because I do, I usually use Python 3.6, but there are times where I have to write some stuff in 3.5 or 2.7 or something.

00:03:26 And I don't want to go back.

00:03:27 Yeah, I know.

00:03:28 I hear you.

00:03:28 That's great.

00:03:29 I'm going to put a lot of tests around it, so I'm not going to rely on this yet because I don't know if it's really ready for primetime for everywhere.

00:03:36 So I would say use caution, dip into this slowly if you're going to use it.

00:03:41 But it's a fun thing.

00:03:43 I'm not sure I like how it's doing it though.

00:03:46 It's doing it in an interesting and odd way.

00:03:49 Yeah.

00:03:50 I don't know how else it would do it, but it's interrupting the encoding.

00:03:54 Yeah, it installs a separate encoder.

00:03:56 So it extends the UTF-8, I think, the UTF-8 encoding to also do this.

00:04:02 So if you're not using UTF-8, I don't know, maybe you could hack it to do something like you're using.

00:04:08 Yeah, yeah, it's pretty cool.

00:04:09 So you put like a little encoding flag at the top and you install a special encoder and off it goes.

00:04:14 Yeah, pretty interesting.

00:04:16 All right, so I want to stick with this Python 3.6 feature angle, even though that's bringing that stuff to other versions of Python.

00:04:23 I want to talk about the fun of reinvention.

00:04:26 So this was a really amazing presentation done by David Beasley.

00:04:31 And it's done in the style of some of his other presentations.

00:04:35 And in my mind, like the way technical presentations should be done.

00:04:38 You should be up there writing code, showing how things work, not just slides and pictures and stuff,

00:04:44 but like showing things, right?

00:04:46 And so what he shows, though, is kind of insane and incredible.

00:04:50 And your mind will probably explode if you see this.

00:04:52 You'll definitely come away with a greater appreciation for Python 3.6.

00:04:55 So what he does is he goes and builds upon some of the new 3.6 features that are below the surface

00:05:04 that a lot of people wouldn't even know about, like hooking into when a class gets defined.

00:05:09 So you can basically redefine what that means and things like that.

00:05:13 So, for example, he says, well, let's talk about type-ins.

00:05:15 These type-ins are cool, but they don't do anything.

00:05:17 We can add these constraints and assertions inside of our code, and that does something,

00:05:22 but we can't really check that in the tooling.

00:05:26 So what if we could rewrite, create this little framework using inheritance and all sorts of other stuff

00:05:32 that lets us add these constraints as type-ins, and then they're enforced at runtime automatically.

00:05:38 It's pretty amazing.

00:05:39 That's incredible, yeah.

00:05:40 Yeah.

00:05:40 So whether you think it's a good idea or a bad idea to do that, the fact that you can do that is really, really cool.

00:05:46 So you can basically set up a function, and as like a type hint constraint,

00:05:50 you can say, and this is a positive integer between 0 and 200.

00:05:54 And it will actually check that.

00:05:58 It's really something.

00:05:59 But mostly it's an amazing look inside.

00:06:01 Yeah, it's an amazing look inside of Python 3.6, down at the low-level stuff.

00:06:07 So, Brian, knock, knock, who's there?

00:06:10 Yeah, I am.

00:06:13 Sound recognition is there.

00:06:14 Yeah, sound recognition.

00:06:16 So there's an interesting article called Sound Pattern Recognition with Python,

00:06:21 and I really liked just the – I didn't know you could do this with SciPy.

00:06:26 So there's apparently part of SciPy.io.wave file, and I'm not sure if there's other types you can do – use.

00:06:36 But this article uses SciPy to read a WAV file and then just has it as data, like an array of numbers,

00:06:45 and then does some math on it.

00:06:47 And it does – this particular one is assuming that you've got some WAV files

00:06:51 that have NOCs in them and trying to detect where the NOCs are and how far away they are.

00:06:56 And just some basic little logic to try to figure out, yeah, like I said, where the peaks are.

00:07:02 I think the author noticed that you need to have some minimum values for how you tell where the peaks are and then some distance between them

00:07:10 so you don't have, like, ringing within one peak.

00:07:12 I like it because it's kind of a – I think it would extend easily to do –

00:07:17 I'd like to take it and run with it and try to do some basic oscilloscope measurements

00:07:21 with this kind of a thing.

00:07:23 It'd be fun.

00:07:24 Yeah, it'd be super fun.

00:07:25 It's really accessible.

00:07:26 Like, the actual code to figure out the NOCs and to process the WAV file,

00:07:30 it's really small and approachable.

00:07:32 And to me, what I thought of when I heard this was, oh, you could build something that is actually kind of smart.

00:07:38 So it shows you how to identify NOCs, right?

00:07:42 And you should be able to identify, like, a door jiggling, a key noise.

00:07:46 You should be able to identify, like, a few of these really distinct patterns.

00:07:50 And if you could say, like, identify, like, what does a door jiggle sound like?

00:07:54 What does a knock?

00:07:56 What does a doorbell?

00:07:57 What does a key sound like?

00:07:59 You could put a little Raspberry Pi just by your front door that says, someone's home, someone unlock the door, someone's knocking.

00:08:04 You know, just cool stuff.

00:08:06 Wouldn't that be – I mean, it seems like that's a weekend project with this.

00:08:10 It doesn't seem major.

00:08:11 Yeah, that would be fun.

00:08:12 You could hook it up with Twilio and get texts when somebody's knocking at your door.

00:08:16 Right, and hook it up with a camera to take a picture of whoever's out there,

00:08:19 see what they're doing, right?

00:08:20 Yeah.

00:08:21 Yeah.

00:08:21 Send yourself a note, hey, kids came home, right?

00:08:23 They unlock the door at 3 o'clock when school's out or whatever.

00:08:26 That would be fun.

00:08:26 It sure would.

00:08:27 All right.

00:08:28 So I think people should take this idea and run with it.

00:08:31 And if they do, they should send us a message.

00:08:33 Or even better, go to pythonbytes.fm/43 and leave a comment at the bottom about what they created.

00:08:39 Yeah, definitely.

00:08:40 Definitely.

00:08:41 Or even better, they could write a blog post and then email that to us, and we'll highlight it on the show.

00:08:45 Yeah, maybe we'll even cover it.

00:08:46 That'd be awesome.

00:08:47 Yeah, yeah.

00:08:47 Cool.

00:08:49 So before we get to the next item, which is sort of mind-blowing, I want to talk about Rollbar.

00:08:53 You guys hear me talk about Rollbar a lot probably, but that's because they're great.

00:08:57 Basically, if you run any sort of web app, you should have real-time error monitoring and reporting.

00:09:02 So if something goes wrong with the website, for example, pythonbytes.fm, we'll get a notification.

00:09:08 It could be in Slack.

00:09:09 It could be on our phone.

00:09:10 They don't have all the details.

00:09:11 You know, this person went to this URL in this situation.

00:09:14 Here's the variables they passed to the function that caused a crash, things like that.

00:09:19 So if you want to get this for your site or application, just go to pythonbytes.fm/rollbar and check it out.

00:09:25 So we've talked a lot about async stuff, right?

00:09:29 Like async both on the server and on the client.

00:09:32 It's pretty mind-blowing stuff.

00:09:35 But it turns out that, you know, like all changes to software, there's like cascading consequences of adopting a new model or trying something new, right?

00:09:44 And one of the cascading changes is in many of the high-performance async processing loops.

00:09:52 I'm thinking async.io, but also UV loop, which is a really super fast, powerful one.

00:09:57 Things like Sanic are, I think Sanic is based upon it, the web framework and so on.

00:10:01 Those things are ultra fast because they rely on async.io, but async.io doesn't use threads.

00:10:08 And so that means thread local storage doesn't have any meaning anymore when all of these like concurrent operations are running on the same thread.

00:10:16 Okay.

00:10:17 Right?

00:10:17 So like if I was running a website, I might store into thread local storage like the cookies or the authentication.

00:10:23 And then later I might ask for it back.

00:10:26 But that could be changed because you have a blocking.io that released the thread that somebody else then wrote their cookie to.

00:10:32 Right?

00:10:32 So it's kind of like crazy.

00:10:33 And there's also in other really interesting places like decimals.

00:10:36 Working with decimals does this.

00:10:38 NumPy error state.

00:10:39 Warnings.catch warnings.

00:10:40 Profiling.

00:10:42 Tracing.

00:10:43 All these things use this kind of stuff.

00:10:45 Right?

00:10:45 But it doesn't work in this async await world.

00:10:48 So we have a new PEP.

00:10:50 PEP 550 that defines a new execution context.

00:10:54 And this is from the guys at magic.io who created UV loop.

00:10:58 So like their motivation is really obvious.

00:11:00 Like they want UV loop to work.

00:11:02 And this is kind of something in the way.

00:11:05 So the PEP adds a new generic mechanism for ensuring consistent access to non-local state in the context of out-of-order execution such as generators and coroutines.

00:11:16 Wow.

00:11:17 It's pretty fascinating, right?

00:11:18 Yeah.

00:11:18 It's very fascinating.

00:11:19 I hadn't even realized that.

00:11:21 I mean, you think it through, obviously, it's a problem.

00:11:23 But I hadn't even realized, like, oh, my gosh.

00:11:24 Like, some of these, like, low-level things are just going to be broken.

00:11:27 Like how, for example, state is processed in a web request.

00:11:30 I'll be very interested to watch this and see where it goes.

00:11:33 Yeah.

00:11:34 So maybe it makes it into Python 3.7.

00:11:36 Maybe not.

00:11:37 But it's kind of cool that this is not just like, oh, we made UV work properly.

00:11:40 But we're going to make all the Python work properly.

00:11:43 So they've got some really nice examples on the article we're linking to.

00:11:47 That's really cool that they did it instead of just trying to hack their own way.

00:11:51 Yeah.

00:11:51 For sure.

00:11:52 Speaking of threads and processing and all that.

00:11:55 I often work in single-threaded or single-process sort of tasks.

00:11:59 I really like this article called Intro to Threads and Processes in Python.

00:12:04 It's a very accessible beginner's guide to parallel programming.

00:12:08 And really kind of what's the difference?

00:12:11 Where would you use threads?

00:12:12 Where would you use processes?

00:12:13 And it's even got pictures with some algorithms to see to show how, like, if you're a certain

00:12:20 kind of a job.

00:12:21 I can't remember what the job is that he's doing.

00:12:23 He's doing some data science project based on Amazon and trying to analyze a bunch of different

00:12:29 stuff from space.

00:12:30 And so he's got to run tons of algorithms and tweak them with different parameters and stuff

00:12:35 like that.

00:12:35 It shows, like, basically, if you use one thread, two threads, or four threads, and then the same

00:12:41 with processes, how it's affected with running times.

00:12:45 And you can watch to see that things are running in parallel.

00:12:49 Good use of little simple diagrams, too.

00:12:51 That's cool.

00:12:51 Yeah, the pictures were great.

00:12:52 The rundown is, conclusion at the end is, if you're waiting on I.O. for something, threads

00:12:58 are just fine.

00:12:59 And if you are CPU heavy, then you want to go with multiprocessing.

00:13:04 Yep.

00:13:04 Until the galectomy happens, which who knows if that will, but until then, this is definitely

00:13:08 a good introduction to it.

00:13:09 Yeah.

00:13:09 And I'm actually, I'm one of the, I don't know, I think there's probably a lot of people,

00:13:13 but having the GIL doesn't really bother me.

00:13:16 It does simplify how you program.

00:13:19 I don't think it's that terrible.

00:13:20 So.

00:13:21 Yeah.

00:13:21 Yeah.

00:13:21 It's, you know, it's in the extreme cases.

00:13:23 I think the main group of people who suffer under the GIL are those doing computational,

00:13:28 CPU computational work.

00:13:30 Outside of that, you're mostly okay.

00:13:32 Okay.

00:13:33 Yeah.

00:13:34 So in that, like async and await and stuff like that, I'm going to expose my, unknowledge

00:13:39 of this stuff is, so async and await, is that dealt with, with, multiple threads

00:13:44 then?

00:13:44 No, it's all one thread, but it has a mechanism to say, anytime you hit blocking I.O., go put

00:13:53 this part of the code to sleep and allow it to run another, another task, another thing until

00:13:59 it hits blocking I.O.

00:14:01 And the idea is like most of the time you're waiting on databases or networks or something

00:14:06 like that.

00:14:06 And then you wake up for a second, you do a little processing and then you go back to wait

00:14:09 on another network or database or web service.

00:14:12 And as long as that's the kind of stuff you're waiting on, the GIL is not a problem because

00:14:16 it gets released.

00:14:17 But if you're like trying to compute pi with a, you know, power series or something, something

00:14:22 like that, then it would just, it would stop.

00:14:24 And the async wouldn't help you with that.

00:14:25 Yeah.

00:14:26 I just wanted to, so the async and await is going to use, it's going to be in the

00:14:31 same sort of a family as when threads would be good for you.

00:14:34 Yes.

00:14:34 Yeah.

00:14:35 It's in exactly this similar spot.

00:14:37 Yeah.

00:14:37 But just more efficiently.

00:14:38 So let's talk about another low level thing.

00:14:41 And I found this, I think it maybe even was recommended by a listener, some low level

00:14:46 part of it.

00:14:47 And then I found the whole, whole thing.

00:14:49 One of the problems that we can have when we're doing unit testing is working with files,

00:14:53 right?

00:14:53 That can be a serious pain.

00:14:55 Yeah.

00:14:55 Yeah.

00:14:55 And if you want to save your files to like say user storage, or you want to process different

00:15:02 types of files, like zip files, regular, regular files, these are all sorts of pains that you

00:15:07 have to deal with.

00:15:08 But there's this really cool project called alternative file systems for Python that makes

00:15:13 this all seamless.

00:15:14 So the idea is you can work with files and directories in like zip archives, in memory,

00:15:21 on the cloud, or just as easy as if they're on your hard drive.

00:15:24 So they give some examples in this project saying you could write your code now just with open,

00:15:30 you know, such and such as fin and start working with it.

00:15:34 And then you decide what that open means.

00:15:36 Does that open mean normal files?

00:15:38 Does that open mean something on S3?

00:15:40 Things like that.

00:15:41 You can unit test your code.

00:15:43 You can just have in-memory files, but open reads and writes to those in-memory files.

00:15:48 You can upload your files to like S3 or OneDrive or something like that by just writing to that

00:15:55 folder, you know, in that file system and all sorts of stuff like that.

00:15:59 Yeah.

00:15:59 So the, like the memory file system or the temporary file system that they have would be great for

00:16:04 like parallelizing tests and things like that.

00:16:06 Right.

00:16:07 It keeps it all separate and isolated.

00:16:08 So some of the back ends they have is they have application data.

00:16:12 This is like the special user data locations in various operating systems.

00:16:16 They have Amazon S3 file systems.

00:16:19 They have FTP memory.

00:16:21 Let's see what else.

00:16:22 That's pretty cool.

00:16:23 They've got zip for reading and writing zip files.

00:16:26 And they also have like SSH file systems for writing to remote servers, all kinds of stuff.

00:16:32 And even tar files.

00:16:34 Good old tar files.

00:16:35 Good old tar files.

00:16:36 Yeah.

00:16:36 You can just whiff open on those babies.

00:16:38 Yeah.

00:16:38 So this is really pretty interesting and I haven't tried it yet, but it looks, it looks quite promising

00:16:43 and it's extensible.

00:16:44 So you can add more of these back ends if that makes sense for you.

00:16:47 That's awesome.

00:16:47 I actually think this is pretty fun.

00:16:49 I got to play with this.

00:16:50 Yeah.

00:16:50 Yeah.

00:16:51 Yeah.

00:16:51 Me too.

00:16:51 So definitely check that out.

00:16:53 And Brian, that's it for our six items for the week.

00:16:56 That's incredible that we've already done.

00:16:58 So.

00:16:59 I know these are, they're all fun and all interesting.

00:17:02 I really enjoyed researching them this week.

00:17:05 So what else are you up to?

00:17:06 I got an interesting email this morning saying that they've taken off the beta off of the

00:17:12 Python testing with pytest on the Pragmatic website.

00:17:16 And you can order the book now and it's supposed to ship next Monday.

00:17:21 That is awesome.

00:17:22 Congratulations.

00:17:23 Yeah.

00:17:23 Thanks.

00:17:24 So that is what I've been thinking about.

00:17:26 I bet.

00:17:27 Nice.

00:17:28 I've been thinking about switch.

00:17:29 Well, I have been too as of this afternoon.

00:17:32 So.

00:17:32 I'm working on a project that would add the switch statement to the Python language without

00:17:38 extending it.

00:17:39 Just like a class that you can basically use.

00:17:41 But it's a pretty clever use of like defining blocks and stuff.

00:17:45 And I think it might be interesting.

00:17:46 I'll put a link to a gist or a GitHub repo or something for you at the end of the show notes.

00:17:51 And you guys let us know.

00:17:52 I really do want feedback on that because I want to try to nail this.

00:17:55 And I think if we could get it into something, we could stick on PyPI or have you do the

00:18:00 work actually.

00:18:01 pip install switch.

00:18:02 There you go.

00:18:03 That might be a thing.

00:18:04 Don't do that.

00:18:04 Yeah.

00:18:05 Don't do that.

00:18:05 Switch laying.

00:18:07 Who knows?

00:18:07 But yeah, I think it would be a really cool feature if we could make it work for the language

00:18:11 without actually changing the language because it's already flexible enough.

00:18:15 Yeah.

00:18:15 Cool.

00:18:16 Cool.

00:18:16 All right.

00:18:17 Well, thanks for everything, Brian.

00:18:19 And good to talk with everyone.

00:18:21 Thank you for listening to Python Bytes.

00:18:24 Follow the show on Twitter via at Python Bytes.

00:18:27 That's Python Bytes as in B-Y-T-E-S.

00:18:29 And get the full show notes at pythonbytes.fm.

00:18:33 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:18:37 We're always on the lookout for sharing something cool.

00:18:40 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:18:43 Thank you for listening and sharing this podcast with your friends and colleagues.

