00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 301, recorded September 13 2022. And I am Brian Aachen.

00:00:11 And I'm Michael Kennedy.

00:00:13 And we're listening. Anyway, right. Before we get started, let's we do have a sponsor Microsoft for sports startups this week. So that's cool. Thank you. We'll talk about them later. And what do you have for us first, Michael,

00:00:28 I want to take you on a journey. Let's start@python.org. I've mentioned this before. And it's been a while and not very many times. And I never noticed this. But if you see that code sample, there's like a set of different code samples that are on the page. It's like the repple. And there's a little yellow, I guess, as a prompt, like, I don't know, it doesn't look like my prompt. But you know, you click it, though, and you wait for a moment, what actually happens? Is it really inside the website opens up a Python repple that is yours, you can run it right. And this online console is hosted from Python anywhere. Pretty cool. That is cool, right? And it has, I think stuff like various popular packages. So I can type import requests and whatnot without doing any, there's no pip install itself, right? You have access to not just the standard library, but you have access to many aspects of the Python ecosystem. That's super cool. And you can also run not just these terminals, but you can also run probably more relevantly, most people is Python web apps. So API endpoints, or, you know, some kind of like, sign up application for your kids and your kids baseball team, who knows what, right. So it's, they make it pretty easy, because they've installed a lot of the things like Django and flask and your method. So you don't even have to do a lot of setup, they configure the servers, you get this console in your browser to access it, get your own domain name, and you can get much of this for free with some limitations. Okay, so yeah, so the reason I bring this up is Matthew Kramer sent over a message and said in light of Heroku, canceling their free tiers, which we talked about last week, I think, as an extra. Yeah. And so the Python anywhere folks said, we are reaffirming our commitment to providing free accounts and free resources for the Python community. How cool is that? That's,

00:02:28 that's pretty cool. Yeah,

00:02:29 yeah, I think this is great. They they start out by saying, Look, managing fraud and abuse for free products is definitely a challenge. I mean, the thing I still really, really miss is Firefox sin. Do you remember that used to be able to go and create a temporary encrypted and unencrypted type of way to exchange files. And it was amazing, until people started using it for malicious purposes, and writing on the back of the domain for Firefox that would give it more credit than it otherwise deserve. So it's hard to have free things on the internet, because people are mean, some people are mean, this is why we can't have nice things is absolutely why we can have nice things. But the Python anywhere folks are saying, Look, we think we can have nice things within limits. And we think those limits are not too significant. So you know, both both of these companies have went through an acquisition and possibly some kind of cultural shift. So it's interesting to think about, so Heroku was acquired by Salesforce. Salesforce is a pretty interesting company. They've got some wild history, and then Python anywhere was acquired by Anaconda Inc. So you know, if you think of who's deeper in the Python space, certainly Anaconda is more so than Salesforce.

00:03:40 Also, I want to point out that the freestyle I mean, free is awesome. But there if it's not quite enough for you, they're one step up is only five a month. That's seems like a reasonable. Yeah,

00:03:50 it seems totally, totally reasonable. So they said, Look, we think we found a way to have free things in our world, what that looks like, is a few very minor restrictions. So for example, in this terminal that I showed you here, the repple, you for free accounts, you cannot have outbound internet access, you can pull things in, but you can't serve stuff. What is it? You can't serve stuff out? Or something along those lines? Right? It's like one of the directions is restricted. Okay? Because they said students, we had it completely open, bidirectional hackers were all over it, doing all kinds of things. So let's see, they say explicitly here in the article, yeah, that the limit outbound internet access, that's what it is for free accounts. And that dramatically limited the abuse that they have to deal with the other problem, you know, running these, especially for web apps, or consoles. Like who cares, it doesn't really matter. But if you have a web app that's constantly running, probably its biggest resource is memory. Right? You know, it's using a certain amount of memory to keep that flask or Django app running. You don't really shut down the web app because the person stops interacting with it. Right? So it said, accounts like that where people might want to create an account to say, hey, look, I tried out flask, and here's my app, I got it on the internet. And then they left it alone, they just quit. They have no intention of doing anything with it. But they didn't bother to shut it down or delete it. Right? That's pretty tricky. So they basically set up proof of life scenario here. So for a free web app to keep running, what you have to do is you have to go and click a button. Yes, I want it to still run once every three months.

00:05:30 That seems completely reasonable. That seems pretty reasonable, right?

00:05:33 Four times a year, you got to click a button, you can automate it if you really want it, I suppose. And then similarly, for accounts, if you have a free account, and you want to keep your resources, you've got to do something similar once a year. So you've got to go in and say, yeah, please keep my account active. And that's pretty much it. So with with those don't seem like terrible restrictions, and they get to keep offering free Python as a service. Yeah, yeah. I

00:05:59 think that's completely reasonable. Yeah,

00:06:01 yeah. Pretty cool. Anyway, I think Thanks, Matt. Matthew, for sending that in. Yeah, it

00:06:06 is neat that people can like especially like the example you put you mentioned, if so, I learned flask, and I made this last web app. And I want to at least, you know, show my teacher and my friends and everything. And like parents maybe? Yeah, that's

00:06:21 cool. Exactly. I want to put up a school project or app. But I don't know Linux, I don't want to go to like big cloud providers. I just want to get it up and running. Yes, great. I need something for my Raspberry Pi that shows automation for my school project or whatever. Yeah. Alright, what's next,

00:06:37 I would like to talk about Python tooling. So right across this, not sure how, but there's an article called Python tooling could be much better, much faster, much, much faster. And this is by Charlie Marsh. And he, so he, apparently this is a thing that's going on, I don't have any year to the JavaScript world, but apparently, the JavaScript ecosystem as well as thinking, we need to make sure that our tools are really fast. And, and Charlie said, maybe the Python tools should be really fast, too. So what he did was he's putting together he put together a thing called Rough, which is he says it's a proof of concept. It's a Python linter, kind of like flake eight. It's written in rust, and it's, like, 150 times faster, or something like that. Wow. And, and I was like, well, it doesn't cover everything. But it's covering like most of the most of the stuff that flake eight covers without any plugins. So I guess well, without the three main plugins that it ships with, so there's, it's pretty neat. I downloaded it tried it out. So we'll take a look at the the GitHub repos here. And it's, it's pretty awesome. I downloaded and tried it on I granted, I had a small project. So I have a small project where flake eight takes like a third of a second. But it's even at a third of a second, I was interested to know that I can kind of detect that it's doing something and then coming back, but that's fast enough for me. But I ran, I ran rough. And I like just returned. I'm like, oh, something's broken. Because it's not doing it. It didn't do anything. It didn't do anything. So I ran it again. And then looked at the output and it said found zero things. And like, well, maybe I'm not pointing it at my code or something. Right. So I intentionally added a added some errors, and it found those errors, and it was in like point 01 seconds or something it was it was it came back so fast. So I'm pretty. I'm pretty blown away by it. The and I think other people are too it took a look at the stars. I'm like, How long has this been around? And it only came in at the end of in end of August. So couple of weeks. And we're at what 1.8? Or, you know, yeah, that's fantastic. 1000 stars. So it's pretty cool. So it's very cool. Um, they do, there's a hat tip to flake eight and stuff. And so there's they that there's, there's a desire to make it. It doesn't do everything yet, but they're working on it. It's compatible with black and yeah, so a whole bunch of rules already built into it already. And I think this is also kind of a cool project if people wanted to help out with the or take a look at a project that's rust, Python hybrid sort of thing. That's kind of a neat project. We'll take a look at

00:09:33 that looks very neat. Can you pull up the stark count thing? Yeah, that star dash history.com. Yeah, hat tip to the XKCD type graph there.

00:09:44 Yeah, I actually love Star history. It's kind of fun to to look at. You know, any have used this before.

00:09:51 I've never used it. What do you do? You just

00:09:53 You just pop in, like a GitHub GitHub account. So for this one, what I went to the GitHub thing It just just took the GitHub address and popped it in.

00:10:05 Nice. This is fantastic. I really like it. So, okay, well now now I definitely and you can compare them to I see. So you can put other you could put, say like flake eight on there, and it would show you.

00:10:16 Yeah, I'd have to go look up what the GitHub repo is for flake eight. I don't know, off the top my head. But

00:10:22 yeah, of course, but this is neat. I like it. I'm gonna have to play with star history, but also rough. Yeah, very good. Very good.

00:10:29 Well, cool. Before we get going any further, we need to thank Microsoft for startups, founders hub, and thank you for sponsoring the episode. They've been sponsoring a lot this this year, and we really appreciate it. So starting a business is hard. By some estimates, over 90% of startups will go out of business in their first year. With this in mind Microsoft for startups set out to understand what startups need to be successful and create a digital platform to help overcome those challenges. That's Microsoft first startup founders hub, the founders hub provides all founders at any stage with free resources to help solve startup challenges. The platform provides technology benefits, access to expert guidance and skilling resources, mentorship and networking connections is so much more unlike others in the industry. Microsoft for startups founders hub doesn't require startups to be investor backed or third party validated to participate founders hub is truly open to all so what do you get you speed up development with free access to GitHub and the Microsoft Cloud with the ability to unlock credits over time and to help startups innovate founders hub is partnering with innovative companies like open AI, a global leader in AI research and development to provide exclusive benefits and discounts through the founders hub becoming a founder is no longer who you know, you'll have access to their mentorship network, giving you access to a pool of hundreds of mentors across a range of disciplines, across areas like idea validation, fundraising, management, and coaching, sales and marketing, as well as specific technical stress points, you'll be able to look you believe you'll be able to book a one to one meeting with, with the mentors, many of whom are foreigners, former founders themselves, make your idea reality today with the critical support you'll get from Microsoft for startups founders hub to join the program, visit Python bytes.fm/founders. Hub 2022. And of course that link is in your our show notes.

00:12:28 Awesome. Thanks, Microsoft really appreciate it. And that's such a cool program. I were doing a startup, I would consider reaching out and apply. But my startup has started and it's cruising along keeping me extremely busy. So it's all good. more of that later, actually. Right. Yeah. Right. Now let's talk about a startup that's started a while ago, called meta, have you heard of it?

00:12:48 Yeah, I've heard a few things. So many of

00:12:51 the machine learning frameworks are actually brought out of internal projects at places like Google, Facebook, other large Silicon Valley type companies, and pytorch comes from metta. Okay. And, you know, Angular is Google and things like that. And I think that that can cause also flutter. Things like that can cause a little bit of concern like, well, if you depend on this project, you're kind of buying into the Facebook world, or the Google world or whichever world that that framework came from is. So the news here is that Mehta is spinning off pytorch into the pytorch Foundation, and making it vendor neutral by making it basically part of the Linux Foundation. Okay, interesting. Cool, right? Yeah. So if you're interested in pytorch, while it's, it's a little more open than it used to be, and this is the article I'm linking to, for the announcement, check out their direct blog post if you want, but I'm like it to the Ars Technica article, I love the comment section and just the the type of discussion around some of the things in Ars Technica, although maybe this is not the best example of that, because there's some silly questions in the comments. But anyway, says pytorch, which powers Tesla Autopilot, and 150,000 other projects will join the Linux Foundation. So that's pretty cool. Let me see here. So they say the pytorch Foundation will strive to adhere to four principles remaining open, maintaining neutral branding, steam fair, and forging a strong technical identity. And according to meta that transition, the pytorch Foundation will not affect any pytorch code. I'm guessing no namespace has changed or anything like that. Yeah, the relevant part, I guess is that the governing board will include representatives from Nvidia Mehta, Google, Microsoft, Amazon and AMD. Okay. Yeah.

00:14:48 Yes. Why do you know Well, I

00:14:49 think just to make it feel a little more truly open source and a little more independent, not less than that's going to

00:14:56 less completely controlled by one company.

00:14:58 Yeah, exactly. You know, maybe there's I think, especially with AI machine learning frameworks, there's a little more concern that some implicit bias is not quite the right word, but some implicit influences that are being driven by the company behind it will influence the way that maybe it makes decisions like so if the algorithm is slightly tweaked in ways to help Facebook do more Facebook like things while maybe it becomes less of a good framework to help you drive a car? I don't know. Right? So something like that, right. Whereas if it's a web framework, it's kind of like, these are pipes. They just do pipe stuff, they carry the HTTP over, they return it, there's no like, concern that it's going to do stuff a little more interested in raising engagement and social, because it just doesn't feel relevant to it, right. Whereas maybe with machine learning, that's more of a concern. Like I did highlight the comments, and so much like us, I respect this move. But I wonder why anybody would want to give up such value of control of such a valuable software package. And why didn't Microsoft and Google give things away? I mean, obviously, like, it's just the benefits of open source, right? It's the it's not the framework that gives them the magic, it's the data that they can, you know, train the framework upon and then apply the framework to, and they're not giving away the Facebook data. So I don't see a big problem. But what was an interesting conversation is that, for example, Google, their version of this is TensorFlow. But Google is also a part of the representative group. That's interesting, right? Yeah, that is interesting. The people in the comments basically said, Well, look, much of the research field has moved to centralize on pytorch. And Google has a bunch of research people, and it's still relevant to them as well. And it's a big company. Yeah, yeah. It's a big company. There's like 1000 things. Let's see Paul Cutler. Hey, Paul, fellow podcaster. Out there says it helps to be more neutral or perceived neutral. The Linux Foundation is a good steward for projects like that. Yeah. And Penfield says, also in the quote, war, you know, in the battle for mindshare, I guess against TensorFlow is a killer move to say well, which we're going to choose. Well, why not the more open one? Yeah, yep. Yeah, for sure. Okay, good. That's a good move. Yeah, it is. Alright. Well, well done. Mehta.

00:17:11 Yeah. Well done. Well, I just want to, I want to take it back to simple things like strings. So I'm actually kind of really enjoy this every once in a while, just especially people coming from, you know, I came from C++, and other languages, Perl and whatnot, into Python. And so it's good to sometimes I forget exactly how powerful a string is even just simple things in Python. So this is an article from Trey Hunter called Python string methods to know and there's, there's a, this is something that's I mean, we see articles like this every once in a while, but I like having one a newer one, because some cool stuffs came in in three, nine. So okay, I like how he broke it out to he broke out the most useful string things to know like join and split and replace. And then strip, of course, and then also had has it laid out with like related methods, like for instance, strip has our strip and l strip for the left and right. And then the a couple of things that came out? Recently, I think the Remove prefix and remove suffix are things that came out in three, nine, I believe,

00:18:22 yeah. Because everyone thought that would not many people thought strip, if you gave it a substring would take that substring off. Yeah.

00:18:30 Yeah, and it doesn't. So the the, yeah, remove prefix was added in three, nine. So these are like really kind of cool things to just, you know, be able to do streaming epilation quickly. And it's a good reminder to as you jump in, just because of people manipulate strings all the time, to just like, there's some power here and you should, should be aware of and then if all of these seem easy, at the bottom, he's got learned these methods later, like ENCODE and, and title and capitalized type I, you know, I forget about this all the time that we have, like the title function to

00:19:06 title interesting, I did forget about that too, actually, to title

00:19:10 case of string. And that's pretty cool. And justification, even neat. I didn't know is identifier was a thing. I learned that new looking at this. So check if a string is a valid Python identifier. So okay, so this is kind of a quick one. So I wanted to throw in another one string related, I use F strings a lot. And I use numbers a lot and I and so I ran across this Python F string number formatting cheat sheet. It's actually pretty darn useful. I, I always have like a cheat sheet like this around for I used to have one for C++. Then I had one for Perl. And now I've got one for for Python. And it's kind of a nice layout, you got float representations and how to how to print those how to print, replace a field within within an expression. It's kind of neat feel really isn't, but what the main thing I like, around it is all the number of number format things to remember, like if you want to have a certain number of digits on the right of the decimal point, how do you do that? If you want it scientific case with like, you know, e to the plus three or something, how to do that. So these are cool things, especially if you're dealing with science in numbers and engineering and whatnot.

00:20:23 So the percent one is great, because I've always just said, alright, well, 5.5, and I want to put it as a, multiply it by 100, and then treat it as a float, you know, but you can just do a percent and it will multiply by 103. Is a flip for you. Great.

00:20:38 actually didn't know that. So yeah, neat.

00:20:41 Yes. Save a line of code there. Nice. Little bit of memory. Yeah. Cool. Awesome. Yeah, this is great as of the cheat sheets, and there's a lot you can do. And either F strings or just, you know, dot format style. It's the same format string that goes on the end there. But this is cool. Like I said, I learned something with a percent already.

00:21:03 All right. Are those items?

00:21:05 Those are items? How about some extras? Yeah,

00:21:08 I've got a couple. And then we have a really big one that I'm excited about. So one of the in back in episode 271. We talked to that talked about, and that was back in February, we talked about seaborn was trying out a new object interface, and so seaborne, just announced that seaborne the release of seaboard and 0.12 does have that object interface. So nice. If you're waiting for an official release to use the object interface. It's here. So go out and use it. The other thing we talked about, we've talked about lazy imports, a couple of times on the show PEP 696 90. Yep. Yeah. That was an interesting discussion on LW in net, or I don't know how to say that. So anyway, there's a there's a cool discussion there about talking about some of the pros and cons. But anyway, the the PEP says it's on it's, it's still in draft mode. So it's not they haven't made a decision yet. But it's targeting 312 I kind of hope it goes in. Yeah, gonna do

00:22:11 two. Yeah. Seems like a good one, right, you get the performance of not importing things, unless you actually use them. There's always those edge cases, right? With enough people living at the edges, then it can become an issue, I guess.

00:22:25 Yeah. And the discussion around whether or not how to turn it on, whether you turn it on by default, or whether you do a flag or have have to turn it on in your code with the comment that like, if you're doing if you're doing a library, you know, you don't know how somebody's going to use it. So maybe not turn it on. But if you're doing or package or something, but if you if you're doing an application, then you're testing everything, and you know, whether or not it's going to work so you can turn it on there.

00:22:52 Give it a try. See if it works. Yeah, see if it's worth it. For we'll move on to my item I just want to say whilst out there says first time watching the show, usually just check into the audio. I just want to take this chance to say if you're listening to the show, and you want to maybe get your comments featured, or you want to see what we look like on video, I suppose. Check us out. We usually stream on Tuesdays at noon Pacific Time, and we're gonna try to stick to that for a while. Also they say like the browser choice for Vivaldi. It's very cool. Like you and I are both using Vivaldi for this and many other things. Of course, also check out cute browser that we actually covered back in episode 291, about three months ago, so people can check that out if they're interested. All right, onto my item. Yeah. Hey, Brian, tell me about pi test.

00:23:38 Yes. So we've been working on this for a while. And it's live now. So there's a PI test course. Now at how do I how do people get their

00:23:48 talk Python? Hey, just go to talk python.fm. Click on courses, and it will be right at the top. So yeah, yeah, super easy to get there. And we just hit the courses. It's like the very first one because it is the newest one release, just yay. Over the weekend, basically. And people can check this out. It's a four hour course that goes through all things pi test. And it's really good for getting I think it's good for getting a sense of what is the spectrum of features of pi test, right? Like it's, we've all seen courses that are like, well, red green refactor, let's go you know, it's, that's fine. And it's those are useful ways to learn testing. But if you really want to take advantage of modern Python testing, you know, what are what are the ways to structure your code? What are the different things that pike test can do and some of the plugins that make it better, like x fail and whatnot. I think he did a really good job putting all those together. So especially the fixtures and printer amortization and so asked

00:24:51 if anybody has the book, for instance, I think and you've read the book and it's, thank you if you've read the book, but the the A lot of the material is related to the content in the book. But the material of this course being that it's intended to be like, yeah, what is it 4.7 hours or three points, I don't know, it's around four hours or something four ish, four ish, that we it was edited. So we took took out a lot of the material from the book to focus really on ramping people up and showing them the complete power of by test. And I think people can run with it as is with it with the content of the book for quite a while before they hit roadblocks and need to learn a little bit more. So this, I think this would be great for teams to take together to Sir,

00:25:38 yeah, absolutely. I'd be great. You know, get together and spend a week one hour each, like a lunchtime, get lunch together, sit in a conference room and watch it together. Maybe

00:25:47 there that'd be cool. So yeah, very excited. Yeah.

00:25:51 Yeah. Awesome. I'm excited for you as well. And like I said, I learned a bunch from it. I thought it was a great course. So really excited to be offering it and yeah, people will go check it out. Talk python.fm click on courses. It'll be right there. Awesome. All right. That's not very funny. Very cool, but not that funny. I got something that's pretty funny though. Okay. Okay. Before we do the joke, though, let me just really quick handful other eyes follow up set on scientific Python, we already are providing lazy import sai pi and psychic image, for instance, have a version of that are acknowledged in the PEP very cool. And Alvaro says congrats on the new course brain. Thank you. Alright, now for some funny, what if you're trying to build a horse with programming? What would that look like? So this is a cartoon by goon squad by toggle. And so it goes through the different languages. You do C++, right? Yeah. So if it starts with C++, and it says, So you built a horse and the people looking quite disgusted at it. And it's, it has like no skin or anything, the organs are all hanging out. There's weird bits that are not seeing us as as it's ugly as can be and as a lot of dangling parts, but it gets the job done. And of course, for Java, of course, you really want to build a horse. So you open up your blueprints, and you're studying it says But first you need to build a horse factory. Oh, no. Yeah, the indirection, it runs deep JavaScript is pretty darn good. Your horse has arrived in different packages. You built the horse, but the backbone came out of Angular. So the horse is paralyzed like a droopy horse actually lifted by its poor front legs. So sad. The person is gasping and covering their mouth like oh, no, what have I done? That's great. All right. Next we have a no SQL horse. I guess speaking to like, maybe it's unreliable. I don't know. No SQL, you had a fast, beautiful horse. Now there's a person in the pasture with no horse, but you have no idea where it is. All right, next one up. COBOL. This one is real good. As black and white, like old fashioned overalls, like where it's being built. You built a horse in 1962. Like so try and fit. It can only be tamed by the original creator. For all of the purposes it's a dragon. It's like breathing fire. And it's been battled by like modern military people. Yeah, that's funny. That was pretty good. Now, before I show you the list, one, I don't know if people are familiar with lisp. i This is like the first CS class I had to take in college when I did a CS, a couple classes for my like a minor part of my math degree. And I really wanted to take C++ and I said please gonna take that. No, you have to take plus my art. Great. So Lisp, I don't know if you ever seen it. But boy, is it fun to have parentheses. It's like, everything is just parentheses, the parentheses you end up with, like, give me like a really simple example with like a line with five consecutive closing parentheses, right? So it's just all about the parentheses.

00:28:40 Lisp stands for lots of insipid silly parentheses.

00:28:44 Exactly. So the list one is it just says you built a parentheses, parentheses, parentheses, parentheses, like about 50, parentheses, a horse emoji, close parentheses about 50 times to match those up. That one's awesome, isn't it? Yeah, that's good. All right, C sharp. C Sharp has camel casing for it's it's like naming so it says the horse works best when dressed in a camel costume. They try to take it off and make it do something. When you try anything else than a camel. It gets a bit fuzzy. What do you eat an apple because it's not it's got its camo costume off. Assembly this one may be actually this might be my favorite. It's like eight bit graphics. It's super old school. And it's a so it's like pletely it looks like it's out of late 80s graphics. It says the horse turn turns out a little basic. But boy can't run fast. And there was a girl wanted to write it like lightning. Yeah, I these last one. PHP. You built a Trojan horse. Oh great. It releases hundreds of tiny horse horses to punish you every day forever.

00:29:59 And no Unfortunately, Python was absent, or I don't know, I'm not sure what it would have said. But Alvaro added it. I guess for the Python one, it's just import horse emoji,

00:30:09 import or some merging. That's pretty good. Actually. Can you put emojis in package name? So I'm piping I,

00:30:15 I don't know about package names. You can put them in Python code. Like they can be comments. I don't know if you can be a pop up tip install words, but that'd be awesome. Five Romane says Python is beautiful but slow. It's like a show horse. That's case by C++. And

00:30:33 yeah, the fast horses are actually just written in rust and then imported in Python.

00:30:39 Exactly. Very true. I thought this is a pretty good one, a bit of a language lesson for everyone. So what did we learn about PSP? It releases hundreds of tiny horses to punish you every day forever.

00:30:52 Yeah, you just hired new people just to maintain it.

00:30:55 Exactly. Alright, well, good times.

00:30:58 Good times. Yeah. Thanks for Thanks for all the work on the PI test scores, too. I appreciate it. Yeah, absolutely.

00:31:03 Yeah, people do. Check it out. It really is good. And Brian, thanks for doing it. And thanks for being here. Thank you. Bye.

