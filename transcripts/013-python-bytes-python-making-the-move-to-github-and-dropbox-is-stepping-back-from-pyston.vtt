
00:00:00.000 --> 00:00:05.000
This is Python Bytes, Python headlines and news delivered directly to your earbud.


00:00:05.000 --> 00:00:08.000
It's episode 13 on Monday the 13th.


00:00:08.000 --> 00:00:11.000
Oh my God, recorded February 13th, 2017.


00:00:11.000 --> 00:00:14.000
Hey Brian, I want to start by saying thanks and hello.


00:00:14.000 --> 00:00:18.000
I want to say thanks to a new sponsor of the show.


00:00:18.000 --> 00:00:19.000
We have a new sponsor. That's wonderful.


00:00:19.000 --> 00:00:21.000
We do. And I want to say thank you to Metis.


00:00:21.000 --> 00:00:23.000
They're a data science training company.


00:00:23.000 --> 00:00:26.000
They have some boot camp type stuff that's really excellent.


00:00:26.000 --> 00:00:28.000
And I'll tell everyone about that later.


00:00:28.000 --> 00:00:34.700
I kind of like to learn about alternate Python implementations and where they are these days.


00:00:34.700 --> 00:00:41.580
We had heard about Piston, which is spelled P-Y-S-T-O-N, developed by Dropbox, and an


00:00:41.580 --> 00:00:47.240
announcement came out at the end of last month saying that Piston is no longer to be supported


00:00:47.240 --> 00:00:48.560
by Dropbox.


00:00:48.560 --> 00:00:52.320
Yeah, so this is a really interesting development.


00:00:52.320 --> 00:00:54.320
It's a little unfortunate.


00:00:54.320 --> 00:00:58.280
I don't really know how to interpret as a positive or negative.


00:00:58.280 --> 00:00:59.760
I mean, it could be just...


00:00:59.760 --> 00:01:00.760
There was an experiment.


00:01:00.760 --> 00:01:01.880
We're moving on to the next experiment.


00:01:01.880 --> 00:01:06.000
But what it was is an alternate version implementation.


00:01:06.000 --> 00:01:10.160
I have a hard time calling it an interpreter when it's actually JIT compiled, but alternate


00:01:10.160 --> 00:01:12.640
interpreter for Python.


00:01:12.640 --> 00:01:20.160
And the idea was it supported Python 2.7, and it did JIT compilation instead of interpreting.


00:01:20.160 --> 00:01:27.600
So its main goal was to be a very fast but highly compatible alternate implementation


00:01:27.600 --> 00:01:29.000
of Python 2.7.


00:01:29.000 --> 00:01:36.700
Yeah, and so there's a couple blog posts, one on the Piston blog and one by Kevin Modzelewski


00:01:36.700 --> 00:01:39.960
and one on his own site kevmod.com.


00:01:39.960 --> 00:01:47.040
And it looks like there's lots of reasons around it, but the general flow of it is that


00:01:47.040 --> 00:01:51.880
the cost and benefit. It cost more than they were hoping and it benefited them


00:01:51.880 --> 00:01:55.800
not as much as they were hoping. Yeah, so we look at the different


00:01:55.800 --> 00:02:00.160
implementations of Python. We've got obviously CPython and its versions but


00:02:00.160 --> 00:02:08.140
we've got Piston, we've got Unladen Swallow, we've got Cython, we've got PyPy,


00:02:08.140 --> 00:02:13.080
PyPy, IronPython, Jython. There's a bunch of different ones and they all have


00:02:13.080 --> 00:02:18.680
these trade offs. And so they were actually able to make piston pretty quick in the the benchmark


00:02:18.680 --> 00:02:25.240
story. So they got it up to 95% faster than CPython two seven. But they also ran into other


00:02:25.240 --> 00:02:31.880
other drawbacks. And they found like actually when it ran the Dropbox code itself, it was only 10%


00:02:31.880 --> 00:02:38.040
faster, but it put a lot more memory pressure on it because it does GC instead of reference counting.


00:02:38.040 --> 00:02:44.760
I've got mixed feelings about it. I like that the project was out in the open, open source,


00:02:44.760 --> 00:02:49.880
and people could watch this experiment. I wasn't really thrilled that they were targeting 2.7 to


00:02:49.880 --> 00:02:55.560
start with. The outcome of them just, I guess, not working on it anymore. It totally makes sense,


00:02:55.560 --> 00:02:59.320
but it is, I guess, it's just a thing. It's interesting.


00:02:59.320 --> 00:03:04.520
Yeah, I think it's a case of a couple of things. I mean, nobody said it, but I feel like, you know,


00:03:04.520 --> 00:03:09.160
Moving to Python 3 is also causing a rethinking of this as well.


00:03:09.160 --> 00:03:12.760
If they're going to be moving to Python 3, then they'd have to redo this work and so on.


00:03:12.760 --> 00:03:18.840
One of the problems or criticisms, mild criticisms, let's say, was that this was a from scratch


00:03:18.840 --> 00:03:24.520
thing. It didn't build on existing stuff. It didn't build on PyPy because PyPy wants to be


00:03:24.520 --> 00:03:30.120
fast at the cost of compatibility and to run a multi-million line Python application that is


00:03:30.120 --> 00:03:33.720
this Dropbox compatibility is like super, super critical.


00:03:33.720 --> 00:03:36.720
So they're like, well, we can't have any incompatibility,


00:03:36.720 --> 00:03:38.920
but it wasn't directly based on CPython,


00:03:38.920 --> 00:03:41.120
even though it took a bunch of pieces in.


00:03:41.120 --> 00:03:44.000
And so, I don't know, it was like this sort of


00:03:44.000 --> 00:03:46.640
other experiment where the thing that gives me


00:03:46.640 --> 00:03:49.200
the most hope right now is what Brett Cannon


00:03:49.200 --> 00:03:51.480
and Dino Veland are working on with Pigeon,


00:03:51.480 --> 00:03:54.440
P-Y-G-I-O-N at Microsoft, where they're trying to add


00:03:54.440 --> 00:03:58.280
like JIT plugin capabilities to the existing CPython.


00:03:58.280 --> 00:04:01.160
Yeah, there is some more CPython news.


00:04:01.160 --> 00:04:03.160
There's big CPython news.


00:04:03.160 --> 00:04:09.880
CPython has just as of three days ago moved.


00:04:09.880 --> 00:04:13.240
It used to be long, long ago in 2006,


00:04:13.240 --> 00:04:16.040
it moved to Subversion, SVN.


00:04:16.040 --> 00:04:19.320
And from 2006 to 2011, it was on Subversion.


00:04:19.320 --> 00:04:21.560
Then it moved to Mercurial.


00:04:21.560 --> 00:04:24.760
What's kind of interesting because that's when Git came out in Mercurial.


00:04:24.760 --> 00:04:28.120
They both, all this whole distributed version control system story


00:04:28.120 --> 00:04:33.160
kind of happened around then. And Mercurial is interesting because it's written in Python,


00:04:33.160 --> 00:04:37.960
like, for example, Facebook does some really interesting things with Mercurial. And so it,


00:04:37.960 --> 00:04:44.280
it seemed like a natural home for Python to live on Mercurial. But, you know, GitHub has really been


00:04:44.280 --> 00:04:50.520
the place where people go to do open source, not just a container for open source stuff,


00:04:50.520 --> 00:04:54.680
like source for juice to be or something. But there's like a whole social ecosystem,


00:04:54.680 --> 00:04:58.520
where everybody comes and collaborates in GitHub.


00:04:58.520 --> 00:05:00.920
And so the big news is, as of Friday,


00:05:00.920 --> 00:05:06.020
Python, CPython, and a few of its pieces have moved to GitHub.


00:05:06.020 --> 00:05:07.020
I think that's great.


00:05:07.020 --> 00:05:11.320
And I think that one of the great things about it is the culture around GitHub.


00:05:11.320 --> 00:05:13.160
Whether you're a pro GitHub person or not,


00:05:13.160 --> 00:05:17.760
that's where a lot of people look for opportunities to help out in open source projects.


00:05:17.760 --> 00:05:22.240
It's a higher incentive for people to get involved with helping to maintain CPython.


00:05:22.240 --> 00:05:25.980
But yeah, I think that that's actually the main motivation, which is really interesting.


00:05:25.980 --> 00:05:29.220
So there's a link to the mailing list where they talk about it.


00:05:29.220 --> 00:05:30.360
We'll put that in the show notes.


00:05:30.360 --> 00:05:32.960
There's obviously the link to the repository in GitHub.


00:05:32.960 --> 00:05:36.040
There's a Reddit thread where people are talking about this.


00:05:36.040 --> 00:05:41.280
And a lot of people are bemoaning the fact that it's it's not on something totally open


00:05:41.280 --> 00:05:42.280
source.


00:05:42.280 --> 00:05:48.540
It's not on something that is based on Python, like it used to be on a source control system


00:05:48.540 --> 00:05:50.960
built on top of Python.


00:05:50.960 --> 00:05:55.920
And while that's cool, like you shouldn't, my opinion is you shouldn't do that at the


00:05:55.920 --> 00:05:58.440
cost of people loving to work on the project.


00:05:58.440 --> 00:06:04.440
So the real thing that you want to read to get the deep insight on this is at snarky.ca.


00:06:04.440 --> 00:06:08.240
So this is Brett Cannon's blog, and it's the history behind the decision to move Python


00:06:08.240 --> 00:06:09.240
to GitHub.


00:06:09.240 --> 00:06:14.160
And he talks about how he worked with a bunch of people to come to this decision.


00:06:14.160 --> 00:06:20.040
And he says, you know, back in 2007, it became really obvious that working on the source


00:06:20.040 --> 00:06:24.180
code and doing code reviews and collaboration was actually a burden.


00:06:24.180 --> 00:06:30.560
There were people submitting, you know, patches and stuff, and they would sit there for maybe


00:06:30.560 --> 00:06:33.120
years before somebody actually reviewed it.


00:06:33.120 --> 00:06:37.080
Like how excited would you be to work on a project to contribute to open source if you


00:06:37.080 --> 00:06:40.400
submit a patch and it doesn't get looked at for a year, right?


00:06:40.400 --> 00:06:47.320
And so the workflow on GitHub is just so much easier for pull requests and reviewing it.


00:06:47.320 --> 00:06:51.360
And so basically Brett said, like, I want it to be so easy that I could take my tablet


00:06:51.360 --> 00:06:56.240
and sit on the beach where I have some kind of internet connectivity and review pull requests


00:06:56.240 --> 00:06:57.240
and chill out.


00:06:57.240 --> 00:06:58.400
Like that's just not how it works now.


00:06:58.400 --> 00:07:00.960
Like you got to have a machine with SSH keys and all sorts of stuff.


00:07:00.960 --> 00:07:06.440
So the main driver behind this is trying to make it easier for core developers to be more


00:07:06.440 --> 00:07:10.000
responsive to people who contribute to the project, which I think is super positive.


00:07:10.000 --> 00:07:12.660
Yeah, I think it's, I'm really excited about it.


00:07:12.660 --> 00:07:17.320
And actually, I had never really considered contributing myself, but I definitely consider


00:07:17.320 --> 00:07:18.320
it more now.


00:07:18.320 --> 00:07:21.580
Yeah, I definitely consider it more accessible now.


00:07:21.580 --> 00:07:26.520
And I think this is absolutely the right move, even if it's breaking some conventions, like


00:07:26.520 --> 00:07:28.900
it's moving off of Python as the thing that supports it.


00:07:28.900 --> 00:07:34.620
It's moving off a fully, fully open source thing to like this somewhat closed thing,


00:07:34.620 --> 00:07:35.620
which is GitHub.


00:07:35.620 --> 00:07:37.380
But still, I think it's great.


00:07:37.380 --> 00:07:44.060
So remember last time when we talked about the top 10 Python articles of 2016?


00:07:44.060 --> 00:07:45.060
Yes.


00:07:45.060 --> 00:07:46.060
Yeah.


00:07:46.060 --> 00:07:49.860
So I said, let's just take a survey of the kind of category of these things.


00:07:49.860 --> 00:07:55.220
And I would say like a full two thirds or more of those were data science.


00:07:55.220 --> 00:07:57.020
Data science is definitely important in Python.


00:07:57.020 --> 00:07:59.300
So I want to tell you about our sponsor, Metis.


00:07:59.300 --> 00:08:03.340
So Metis is a data science training company based in New York, San Francisco, Chicago


00:08:03.340 --> 00:08:04.740
and Seattle.


00:08:04.740 --> 00:08:09.940
And they provide full-time immersive boot camps and evening courses that you can come


00:08:09.940 --> 00:08:10.940
to.


00:08:10.940 --> 00:08:15.000
If you have a full-time job, you can go like two nights a week for six weeks and take classes


00:08:15.000 --> 00:08:19.780
on all sorts of data science things, machine learning and things like that.


00:08:19.780 --> 00:08:25.060
If you are wanting to learn more about data science, especially in a hands-on way, you


00:08:25.060 --> 00:08:29.060
live in New York or San Francisco, are you willing to spend some time there?


00:08:29.060 --> 00:08:35.300
out thisismetis.com/talkpython and maybe we'll feature your article next year.


00:08:35.300 --> 00:08:37.380
Yeah, that's actually sounds pretty interesting.


00:08:37.380 --> 00:08:40.260
Yeah, I would love to go do more data science.


00:08:40.260 --> 00:08:43.460
So TensorFlow, they've got classes on that all sorts of cool stuff.


00:08:43.460 --> 00:08:46.780
So check it out thisismetis.com/talkpython.


00:08:46.780 --> 00:08:51.100
All right, you know what they do a lot of in data science, a lot of functional programming,


00:08:51.100 --> 00:08:53.940
a lot of expressions, things like that, right?


00:08:53.940 --> 00:08:55.620
Yeah, actually, I don't know.


00:08:55.620 --> 00:08:58.020
I'm not a data science person.


00:08:58.020 --> 00:08:59.520
The ones I've hung around seem to.


00:08:59.520 --> 00:09:00.780
- There's an article called


00:09:00.780 --> 00:09:03.460
Using Functional Programming in Python Like a Boss,


00:09:03.460 --> 00:09:05.540
Generators, Iterators, and Decorators.


00:09:05.540 --> 00:09:07.740
And these are generators and, okay,


00:09:07.740 --> 00:09:10.180
all three of those, generators, iterators, and decorators


00:09:10.180 --> 00:09:13.660
are things that trip up intermediate Python people.


00:09:13.660 --> 00:09:16.420
Beginner people, just ignore 'em for now.


00:09:16.420 --> 00:09:20.620
But this article is a Jupyter notebook,


00:09:20.620 --> 00:09:23.300
which I like this trend of people


00:09:23.300 --> 00:09:26.420
just publishing Jupyter notebooks as articles.


00:09:26.420 --> 00:09:28.040
It actually is good.


00:09:28.040 --> 00:09:29.980
And there's some good diagrams in here,


00:09:29.980 --> 00:09:34.300
although the use of really large images,


00:09:34.300 --> 00:09:37.620
it's kind of annoying to me, but it's okay.


00:09:37.620 --> 00:09:42.620
Anyway, this article talks about,


00:09:42.620 --> 00:09:45.400
it also talks about just basically what a function is


00:09:45.400 --> 00:09:47.740
and what things can act like functions.


00:09:47.740 --> 00:09:51.220
And then talks about generators, iterators, and containers


00:09:51.220 --> 00:09:52.320
and how they all work together


00:09:52.320 --> 00:09:54.160
to make your code more expressive.


00:09:54.160 --> 00:09:59.120
And it seems like kind of an esoteric sort of thing to think about, but I think it's good.


00:09:59.120 --> 00:10:02.700
And this is a good, I like this article about thinking about this stuff.


00:10:02.700 --> 00:10:06.720
>> Yeah, I really think this is one of those things that when you come to Python


00:10:06.720 --> 00:10:10.520
from other languages, it takes you a while to get into these, right?


00:10:10.520 --> 00:10:17.900
Like the concept of a generator is quite different to somebody coming from C or I think Java.


00:10:17.900 --> 00:10:20.060
I don't think Java has this, things like that.


00:10:20.060 --> 00:10:23.860
But once you get the zen of them, they're amazing.


00:10:23.860 --> 00:10:25.580
and they make such a big difference,


00:10:25.580 --> 00:10:29.620
but it's really a nice mental shift.


00:10:29.620 --> 00:10:32.060
Yeah, so I really think it's great that he's covering it.


00:10:32.060 --> 00:10:35.260
- Also one of those topics that I don't think I remember


00:10:35.260 --> 00:10:38.340
when I finally grokked what people were talking about,


00:10:38.340 --> 00:10:41.300
but it took like three or four different articles


00:10:41.300 --> 00:10:43.220
talking about it for it to sink in for me.


00:10:43.220 --> 00:10:44.300
So here's another one.


00:10:44.300 --> 00:10:45.940
- Yeah, excellent, yeah, so we'll link to that one.


00:10:45.940 --> 00:10:49.820
And by some strange coincidence, just so everybody knows,


00:10:49.820 --> 00:10:52.740
the way that we pick things for the show


00:10:52.740 --> 00:10:54.640
is I go find a couple of interesting things,


00:10:54.640 --> 00:10:56.960
Brian goes and finds a couple of interesting things,


00:10:56.960 --> 00:10:59.560
we throw them together, and then we just talk about them.


00:10:59.560 --> 00:11:01.480
And it happens to be the very next one


00:11:01.480 --> 00:11:05.000
is the same person in a Jupyter notebook,


00:11:05.000 --> 00:11:07.400
but it's actually a totally different topic,


00:11:07.400 --> 00:11:08.680
but it's presented in a similar way.


00:11:08.680 --> 00:11:10.240
So this one is called,


00:11:10.240 --> 00:11:12.720
It's Meta Classes All the Way Down.


00:11:12.720 --> 00:11:16.080
This is a quick but fairly deep dive


00:11:16.080 --> 00:11:18.280
into what metaprogramming is.


00:11:18.280 --> 00:11:19.280
And it starts out by saying,


00:11:19.280 --> 00:11:20.820
look, metaprogramming is a technique


00:11:20.820 --> 00:11:22.360
for writing computer programs


00:11:22.360 --> 00:11:24.500
that can treat themselves as data.


00:11:24.500 --> 00:11:26.200
So you can enter spanked, generate,


00:11:26.200 --> 00:11:28.600
and or modify them while they're running.


00:11:28.600 --> 00:11:29.720
And that's definitely Python.


00:11:29.720 --> 00:11:33.240
You can at runtime create types.


00:11:33.240 --> 00:11:36.680
You can add functions or even remove features


00:11:36.680 --> 00:11:39.260
from classes and objects, right?


00:11:39.260 --> 00:11:44.160
But mostly metaprogramming comes down to metaclasses


00:11:44.160 --> 00:11:48.600
where you can actually control what the class does.


00:11:48.600 --> 00:11:50.720
So there's all sorts of interesting examples


00:11:50.720 --> 00:11:51.920
of how you might use them.


00:11:51.920 --> 00:11:53.480
Starts out with an interesting quote saying,


00:11:53.480 --> 00:11:55.700
"Look, metaclasses are deeper magic


00:11:55.700 --> 00:12:00.320
"than 99% of the users should ever worry about.


00:12:00.320 --> 00:12:02.940
"If you wonder whether you need them, you don't."


00:12:02.940 --> 00:12:04.480
(both laughing)


00:12:04.480 --> 00:12:06.280
So if you don't, like that was a quote by Ted Peters.


00:12:06.280 --> 00:12:07.800
If you don't deeply understand like,


00:12:07.800 --> 00:12:09.360
"Yeah, this is totally, I'm gonna solve this


00:12:09.360 --> 00:12:11.460
"with a metaclass, like you probably shouldn't mess with it."


00:12:11.460 --> 00:12:15.740
But they are the power that makes a lot of the magic


00:12:15.740 --> 00:12:17.000
inside Python happen.


00:12:17.000 --> 00:12:19.080
So a couple of examples.


00:12:19.080 --> 00:12:20.800
One is Django ORM.


00:12:20.800 --> 00:12:24.880
we could substitute SQLAlchemy ORM or PWE ORM models, right?


00:12:24.880 --> 00:12:27.360
So when you define like a model in Django or SQLAlchemy,


00:12:27.360 --> 00:12:29.240
you put what looks like column types


00:12:29.240 --> 00:12:32.260
with database constraints as the fields of the class.


00:12:32.260 --> 00:12:34.120
But then when you interact with them at runtime,


00:12:34.120 --> 00:12:36.640
they look like strings and integers and dates, right?


00:12:36.640 --> 00:12:39.980
And that transition, that sort of two-faced behavior


00:12:39.980 --> 00:12:41.700
of these things that they can be used


00:12:41.700 --> 00:12:42.900
in a database query in one way,


00:12:42.900 --> 00:12:45.040
but then act as normal objects as others,


00:12:45.040 --> 00:12:46.120
that's metaclasses.


00:12:46.120 --> 00:12:47.440
Another example, there's a cool example


00:12:47.440 --> 00:12:51.380
about using them to make abstract classes


00:12:51.380 --> 00:12:53.500
and abstract functions that have to be implemented


00:12:53.500 --> 00:12:55.500
by things that inherit it and so on.


00:12:55.500 --> 00:12:59.060
Again, this is a nice Jupyter notebook,


00:12:59.060 --> 00:13:00.020
it has some cool pictures,


00:13:00.020 --> 00:13:01.920
but it really does help you understand this stuff


00:13:01.920 --> 00:13:03.580
pretty well with nice examples.


00:13:03.580 --> 00:13:05.300
- Yeah, yeah, I like this too.


00:13:05.300 --> 00:13:07.740
It's funny that we both picked the same person's article.


00:13:07.740 --> 00:13:08.940
- It's a small world.


00:13:08.940 --> 00:13:12.740
- Yeah, I think we're kind of going on the stuff


00:13:12.740 --> 00:13:16.220
that most people don't need train right now,


00:13:16.220 --> 00:13:18.960
but next up is lambdas.


00:13:18.960 --> 00:13:23.560
And speaking of another thing that I think newbies


00:13:23.560 --> 00:13:27.520
get a little confused by, but there are lambda functions.


00:13:27.520 --> 00:13:32.800
And really, lambda functions are just unnamed functions


00:13:32.800 --> 00:13:36.080
that you can put the entire expression on one line,


00:13:36.080 --> 00:13:39.560
and so they're convenient in a lot of places.


00:13:39.560 --> 00:13:41.920
So here's an article from Dan Bader


00:13:41.920 --> 00:13:43.760
titled Lambda Functions in Python,


00:13:43.760 --> 00:13:45.220
What Are They Good For?


00:13:45.220 --> 00:13:50.580
And what I like about this article is it's just a fairly quick jump into it.


00:13:50.580 --> 00:13:57.660
I think everybody that thinks of themselves as a little bit more than just a beginner in Python should at least understand Lambda functions.


00:13:57.660 --> 00:14:03.740
And the thing I really like about this article is it talks about places to not use them.


00:14:03.740 --> 00:14:10.660
Because when you finally get your head around Lambdas, all of a sudden it's your hammer and everything looks like a nail.


00:14:11.020 --> 00:14:17.500
He talks about a couple places like creating class methods and other places where that


00:14:17.500 --> 00:14:21.180
maybe that you shouldn't use a lambda for that you can but don't.


00:14:21.180 --> 00:14:26.020
And then also there's some places where list comprehensions and dictionary comprehensions


00:14:26.020 --> 00:14:32.980
are are wonderful and they're way more expressive but you could use lambdas in those cases.


00:14:32.980 --> 00:14:33.980
Yeah, absolutely.


00:14:33.980 --> 00:14:38.140
I think the trick with lambdas that make them so wonderful is like there's little places


00:14:38.140 --> 00:14:41.920
in your code, you're like, if I could just pass a behavior here, I don't want to go out


00:14:41.920 --> 00:14:45.820
of where I am and write a function and then like give it a name and then say the name


00:14:45.820 --> 00:14:47.100
here I just want to go.


00:14:47.100 --> 00:14:54.580
Yeah, sort by this reversed or her, you know, grab this value out and transform it or something.


00:14:54.580 --> 00:14:57.260
And lambda functions are beautiful for that.


00:14:57.260 --> 00:14:59.820
They're not so beautiful for writing your whole program.


00:14:59.820 --> 00:15:02.620
Yeah, actually, sort is one of those.


00:15:02.620 --> 00:15:07.420
One of those places where one of the parameters is you can pass in a key, or how to find the


00:15:07.420 --> 00:15:12.480
key. And it's, I've used lambdas a lot there because I don't really need a


00:15:12.480 --> 00:15:16.080
named function. I just need a function to pass in and do the work. Yeah, I've got a


00:15:16.080 --> 00:15:20.120
list of customers I want to sort by last name. So lambda C goes to C dot last


00:15:20.120 --> 00:15:24.760
name. Done. Beautiful. Yeah, it's great. So you wanted to do a quick follow-up on


00:15:24.760 --> 00:15:29.740
Gepronto. That's our super super fast web framework, right? Theoretically. Yep. Yeah,


00:15:29.740 --> 00:15:34.880
that's what we were talking about that last week. But I ran across a Reddit


00:15:34.880 --> 00:15:42.720
thread that we'll post in the show notes just in it is titled "Sticking with Flask


00:15:42.720 --> 00:15:49.880
versus Switching to one of the new faster frameworks" and the Gepronto


00:15:49.880 --> 00:15:55.760
author actually posted on this and said yeah if you're looking at Gepronto


00:15:55.760 --> 00:16:00.840
please read the readme there because I've noted that it's not ready for


00:16:00.840 --> 00:16:08.220
production basically. So there's he's not even he's something about I'll just


00:16:08.220 --> 00:16:12.300
read it he's a state in the readme you should not build anything serious with


00:16:12.300 --> 00:16:15.860
Gibranta now because it's gonna probably eat your laundry. Remember it's


00:16:15.860 --> 00:16:19.940
hand-coded in C and this needs a lot of testing. On top of that I plan to do


00:16:19.940 --> 00:16:25.180
several iterations of API changes in a largely incompatible way. I hope though


00:16:25.180 --> 00:16:29.860
it's gonna make a serious player in the field one day. I applaud the author for


00:16:29.860 --> 00:16:34.980
putting that out there. He's basically developing in the open, but he's not


00:16:34.980 --> 00:16:38.460
promising to stick with the same model or the same API and I think that's


00:16:38.460 --> 00:16:41.980
completely fair and he's pretty open about it. Yeah, that's really great of him


00:16:41.980 --> 00:16:48.620
and it's, you know, he seriously is optimizing this stuff in some really


00:16:48.620 --> 00:16:53.500
interesting but out there ways and so and all that part is done in C, right? And


00:16:53.500 --> 00:16:58.740
so it probably needs a little bit of careful validation before it becomes a


00:16:58.740 --> 00:17:02.540
thing that you really depend on for your e-commerce site or whatever.


00:17:02.540 --> 00:17:05.100
But it's definitely, it's got so much promise, that project.


00:17:05.100 --> 00:17:06.460
So I hope he gets there.


00:17:06.460 --> 00:17:07.940
Oh, we're already done.


00:17:07.940 --> 00:17:09.220
So there we go.


00:17:09.220 --> 00:17:10.220
That's it.


00:17:10.220 --> 00:17:12.060
That's the news we got for this week.


00:17:12.060 --> 00:17:15.220
Anything you want to share with everyone while we're wrapping things up, Brian?


00:17:15.220 --> 00:17:16.860
No, nothing right now.


00:17:16.860 --> 00:17:17.860
All right.


00:17:17.860 --> 00:17:18.860
Awesome.


00:17:18.860 --> 00:17:20.700
Well, I'm cranking out some classes.


00:17:20.700 --> 00:17:25.540
I just am pretty much finished up my Consuming Restful Services course.


00:17:25.540 --> 00:17:27.740
So stay tight, hang tight for that.


00:17:27.740 --> 00:17:30.300
going to be out in maybe a week or so.


00:17:30.300 --> 00:17:31.300
>> All right.


00:17:31.300 --> 00:17:32.300
Cool.


00:17:32.300 --> 00:17:33.300
>> Yeah.


00:17:33.300 --> 00:17:34.300
Fun to be building new things for everyone.


00:17:34.300 --> 00:17:35.300
All right.


00:17:35.300 --> 00:17:36.740
Well, thank you everyone for listening.


00:17:36.740 --> 00:17:39.340
Brian, thanks for chatting with me today.


00:17:39.340 --> 00:17:40.340
>> Thank you.


00:17:40.340 --> 00:17:41.340
>> Yep.


00:17:41.340 --> 00:17:42.340
See you all later.


00:17:42.340 --> 00:17:44.020
Thank you for listening to Python Bytes.


00:17:44.020 --> 00:17:46.540
Follow the show on Twitter via @PythonBytes.


00:17:46.540 --> 00:17:49.660
That's Python Bytes as in B-Y-T-E-S.


00:17:49.660 --> 00:17:52.940
And get the full show notes at PythonBytes.fm.


00:17:52.940 --> 00:17:56.660
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:17:56.660 --> 00:17:57.660
way.


00:17:57.660 --> 00:18:00.160
a lookout for sharing something cool.


00:18:00.160 --> 00:18:03.640
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:18:03.640 --> 00:18:06.680
Thank you for listening and sharing this podcast with your friends and colleagues.

