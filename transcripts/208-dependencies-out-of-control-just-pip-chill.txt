00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04 your earbuds. This is episode 208, recorded November 11th, 2020. I am Brian Okken.

00:00:11 And I'm Michael Kennedy.

00:00:12 And it's getting cold outside.

00:00:13 It is getting cold outside. I feel like winter is coming. I went out on the deck and I'm like,

00:00:18 well, there's something wrong with my deck. It's really slippery. Oh, that's ice.

00:00:21 What a weird time of year it is.

00:00:23 Who do I call to get this fixed?

00:00:25 Exactly.

00:00:25 There's got to be some sort of contractor I can get to.

00:00:27 I'm sure there's something wrong with the sun. We're going to need some help here.

00:00:30 Yeah. This episode is brought to you by us. We'll tell you more about what we're

00:00:34 doing other than how you can support us a little later. But first, I want to,

00:00:38 speaking of cold, I want to talk about something called pip Chill.

00:00:42 Ooh, icy.

00:00:44 Have you heard of this before?

00:00:45 I have heard of this. I've just heard of it, but it looks fantastic.

00:00:49 Yeah.

00:00:49 This drives me crazy. This whole new change with Pip, where pip is super,

00:00:54 super picky about the dependencies and then having things like Dependabot or other automatic

00:01:00 tooling upgrade stuff as things come out. If they ever get out of sync, then pip will break in some

00:01:04 ways. Like for example, Boto 3 and Boto Core have been driving me crazy. And it sounds like this would

00:01:09 fix it.

00:01:09 Normally you build up, you've got like a requirements.txt file, or you've got your, the versions that

00:01:15 you're working with, you want to put those in a setup or some sort of way to capture it.

00:01:20 One of the ways you can do that is pip Freeze. And if you already have an environment, like a virtual

00:01:25 environment set up, with everything you need, you say pip Freeze, it spits out all of the things that

00:01:30 you have installed and all the versions that you've got. Now there's different variants that you can do with

00:01:36 pip Freeze also.

00:01:37 You know, people often talk about that as having stability. Like you don't accidentally get a

00:01:42 change that's pushed in the future that's a breaking change. And to me, I never appreciated that.

00:01:46 Like that never seemed to be something I cared about. But once things like GitHub started saying,

00:01:51 there's a new version of this, or the thing you have installed, there's a security vulnerability

00:01:56 that if you don't upgrade, you're subject to on the web, which is a bad place to be. Then putting

00:02:03 that version information in there explicitly allowed me to know, oh, I need to go and update the server

00:02:08 because there's this critical vulnerability that GitHub told me about. That's what won me over to

00:02:13 putting the pip Freeze style with versions in there.

00:02:15 Oh yeah.

00:02:16 Yeah.

00:02:16 And I think that's good. But you might want to just have the version, the thing that you're

00:02:21 really using. Like, let's say you're using black. Do you want to list black or do you want to list

00:02:28 black and all of its dependencies?

00:02:30 Yeah, exactly.

00:02:31 And Freeze just gives you everything. And so what pip Chill does is it just shows you the stuff that you

00:02:39 installed. So like, let's say if you installed just black and you ran pip Freeze, you'd see a whole

00:02:46 bunch of stuff. But if you run, if you now install pip Chill, Pip-Chill and run pip Chill, you'll get

00:02:53 pip Chill also. It'll tell you that it's there. But it also just shows you black and what version of

00:02:58 black you have. So if you've, you're hopefully black itself is specifying enough dependencies that make

00:03:06 sense. There's definitely times where you want to have everything, all the versions nailed down,

00:03:11 like you said, for security updates and stuff like that. But there's a whole bunch of times where,

00:03:15 like for instance, I've got internal projects where we actually have, we actually vet all of the

00:03:22 versions and put them in a different repository, but different combinations. We want, you don't need

00:03:28 to be that specific. So pip Chill is a way to just list the ones that you've installed. And I think

00:03:34 it's really cool.

00:03:35 I think it's really cool too. One of the things that's neat is it toggles between this, here's what

00:03:40 you installed and here's everything, which is what you're talking about with pip Freeze. But there's

00:03:44 another mode where you do dash V and it'll show you the stuff you installed. And then it'll show you

00:03:49 commented out, but present. These are all the things, the libraries and their dependent,

00:03:54 their versions that were installed, but are not top level. So they're commented out.

00:03:59 And then there's a little comment like installed as a dependency of Jinja2 time or installed as a

00:04:04 dependency of cookie cutter. So you can do that to get a look and say, Hey, well, what is my virtual

00:04:08 directory look like? Why is this thing here? Oh, I see. It came from this other place.

00:04:12 Yeah. And then also if you, you can have that with or without versions. And so you can,

00:04:16 if you know, there's a dependency vulnerability for particular thing, you can say, well, which,

00:04:22 what version am I getting? So yeah, it's good. Yeah. Yeah. This is really nice. I'm liking it.

00:04:27 You've got like a version checker thing that tells you if there's like vulnerabilities, right?

00:04:31 Yes. What are you using? Well, if for vulnerabilities, I think just having a pinned

00:04:36 version in a requirements.txt file is sufficient for GitHub to say there's a problem. So like any

00:04:41 requirement file is pinned. But if you sign up with dependabot, which is, there's some things that are

00:04:47 super, super annoying about dependabot. But what is nice is that it will show you anytime there's a

00:04:55 thing. So you say like a weekly notify me of updates to my requirements file. And so every Monday

00:05:01 morning I get a list of like, here are the updates that I could upgrade for like my web framework or

00:05:06 database access or whatever. And like put in the automatic PR for it. It'll show you like the change

00:05:12 log and then you can accept that and it'll update your, your requirements. Yeah. Okay. And then

00:05:17 there's also a workflow that some people use that have a, like a smaller, like a requirements in or

00:05:23 something. It's just a list of list of packages that are using, and then they'll just get the latest

00:05:29 of whatever those few things and then test it and then freeze it. So you've got like a, like a two stage

00:05:35 thing. So you, the, what you deploy is a frozen set of package lists, but, and all the versions, but

00:05:43 you've got some other way to do just how to generate that, which ones you should install.

00:05:48 So, right. Yeah. Yeah. That's an interesting way to do it. Cause then you basically have just pypi and pip

00:05:52 just giving you the latest. Yeah. Yeah. Just to round out the thing that is super duper annoying about

00:05:58 dependabot is like on Talk Python Training, that site has 30, 40 packages. It's using. If you count up the

00:06:05 dependencies, pip freeze, not pip jail freeze. And every change is its own PR. And I swear almost

00:06:14 weekly, I am merging, I'm manually merging merge conflicts between dependabot and dependabot. It's

00:06:21 like, well, this requirement line and that requirement line changed. And like, they won't give it to you as

00:06:26 one, just here's the changes for the week. It's like, no, no, no. Here's a bunch of changes and

00:06:30 you'll probably be in here merging this manually. So enjoy that. Anyway, it's still really cool to have

00:06:35 it automatically. I do like this idea of it just kind of like some part of the CI going,

00:06:40 this is what I depend upon, install what I need, generate the pinned versions. Cause then when you

00:06:45 go to production, you say install pip dash R, it will actually, you know, upgrade the stuff that

00:06:51 needs upgrading rather than fulfilled. One of the requests I have for the people working on pip chill

00:06:56 is I think an option to not list itself would be good because I'm just installing it so I can run it.

00:07:04 That actually makes a lot of sense to just omit self.

00:07:07 You can like pipe it through a dash V or something, but maybe it's like some kind of worm and its goal is to just get into all projects. And by listing itself, it's just going to slowly make its way out.

00:07:20 Speaking of problems you might want to avoid, not that that is one, but one that you might is if you work on windows, which from the stack of workflow survey and the PSF survey, we found a very significant number of people in the Python space do that.

00:07:34 And I've heard people in Python talk about this thing called numpy. You heard of numpy?

00:07:40 No, numpy is something that definitely is the foundation of the many, many, many data science libraries, right?

00:07:48 Well, big news sent in by Daniel Mulkey. Recent windows update broke open BLAS, which is a dependency of numpy.

00:07:59 Speaking of dependencies. So effectively, if that doesn't work, numpy doesn't work. That sounds less good.

00:08:04 Yeah.

00:08:05 Yeah. So there's a whole long developer community thread. I mean, long, we'll talking about it, suggesting fixes that may or may not be fixes, et cetera, et cetera.

00:08:14 It starts like this. I'll just read the quick overview. So people know what to be on the lookout for.

00:08:18 I'm a numpy developer. We've been trying to track down some strange issues where after updating to windows 10 to zero zero four, suddenly code that worked no longer works.

00:08:30 Here's the numpy issue and the corresponding issue in open BLAS. The problem can be summarized as when calling F mod, something is changed so that much later calling open BLAS assembly routine fails.

00:08:43 And we're way down here, Brian. The only difference I can see is that in the register that Visual Studio exposes after the call to F mod, ST zero is NAN.

00:08:54 Don't bug that people.

00:08:57 Yeah.

00:08:58 Jeez.

00:08:58 But the fact that it doesn't work is not ideal. So Steve Dower and some of the other Microsoft people commented there, there's a fix later to take until January, 2021 to be released.

00:09:10 But Matt P posted a workaround says for all of those at home following along and looking for a quick fix. NumPy has released a bug fix.

00:09:18 One 19 three to work around this issue. The bug fix broke something else on Linux. So we had to revert the fix in release.

00:09:25 One 19 four. So the fix on Windows that work around on Windows broke the Linux version. But as a Windows person, you may not care.

00:09:37 So on Windows, you could pin it numpy equal equal equal one dot 19 dot three for now and just don't put that into production on Linux. Sounds easy enough, I guess.

00:09:47 Yeah. I mean, if you're a package maintainer, this seems ugly. But if you're like an end user, I'm either installing it on Windows or I'm installing on Linux. It's not a problem.

00:09:57 Yeah. I don't know if pip actually has a platform flag like pip in the that are, you know, the requirements. Can you specify this platform gets this requirement that platform gets I'm guessing no?

00:10:08 Well, no. I mean, it's part of the wheel. So the wheels can say this wheel is appropriate for only certain platforms.

00:10:14 Yeah. But if you're building an application, not something that's on pip. Yeah, I don't know. I don't know how to do it. But you can. This is like a fix. But just be aware that that will make it not work on Linux. So yeah.

00:10:26 Anyway, I just want to put this on people's radar. So they're not down looking at registers going, why is ST0? Man, that's odd.

00:10:31 I'm glad I don't have to do things like that.

00:10:33 We can all be thankful we don't have to do things like that. I mean, that's why we work in Python, right?

00:10:37 Well, let's reverse it. I'm really grateful that other people are looking at that. So I don't have to.

00:10:42 Yes. Thank you, people. Speaking of thank you, Brian and I are both doing a bunch of stuff online and people often ask how they can support us, support the podcast and just get better at Python.

00:10:53 And we're trying to help people do that, right, Brian?

00:10:55 We are. Yeah, lots of ways. One of the things we're doing is this podcast. I mean, if people want to just support us directly, there's a Patreon link in all of the show notes. You can donate. We have like 60. I just checked. We have 65 people doing this now. That's awesome. Thank you, everyone.

00:11:11 And you're teaching some classes.

00:11:12 I am. The most recent one that I worked on should maybe, maybe be on. It's completely done. I just put my head down and did the whole thing. It was like a four and a half hour FastAPI course for building APIs with FastAPI.

00:11:24 So I'm really excited about that one. And hopefully it may even be out. But people can just talk out, check out training.talkpython.fm. And it'll be over there soon if it's not by the time you hear this.

00:11:35 Yeah. Nice. Indeed. I'll just keep plugging away at it, man.

00:11:38 Just keep plugging away.

00:11:40 This is going to be the 30th course that we've created over there. And we're not done. We're going to keep plugging away.

00:11:45 Keep plugging. Maybe you need a plug-in architecture.

00:11:48 Maybe I do. Tell me about it.

00:11:50 Well, so one of the things I love about pytest is the plug-in system. So you can, I mean, plug-ins can provide extra fixtures, extra flags. They can modify the output. They can do all sorts of fun things.

00:12:04 Anyway, the plug-in architecture that pytest uses is not built into pytest. It's something called Pluggy.

00:12:11 And there weren't, I mean, there are a couple little how-to guides, but they were kind of sparse and I was having trouble.

00:12:19 I wanted to do a plug-in in a little application before and struggled.

00:12:24 But now here's apparently two Python talks.

00:12:27 One of them held at PyGotham and one at PyCon India and an article around it.

00:12:33 So the article is build plug-ins with Pluggy.

00:12:36 It's kind of a nice article. It starts with a small command line application that you, it like looks for books or something.

00:12:43 And it has one output format.

00:12:46 And the argument is like, wouldn't it be cool if you could have more different kinds of output?

00:12:50 And one of the ways to do that in an application is to have allow plugins so that anybody can extend the application to look for a different format.

00:13:00 Yeah, one thing that's really nice about that is you don't have to understand the whole program and all the code to like contribute to it.

00:13:05 You just have to understand that little tiny plug-in interface.

00:13:07 And if you can handle that, then you basically can extend the app.

00:13:10 Yeah, and one of the beauties of those sorts of things.

00:13:12 So I've written plugins for pytest and I don't understand the internal architecture of pytest.

00:13:16 And I don't really understand how to do the plug-in system that well.

00:13:19 I mean, pretty good.

00:13:21 But you can take something that's already done and copy it.

00:13:25 So you can say, oh, here's another one that also changes the output.

00:13:28 I want to, I can copy that and change it myself.

00:13:31 Yeah, nice.

00:13:31 Yeah.

00:13:31 This is kind of how that works.

00:13:33 It took part of the system of the application.

00:13:35 And he walks through how you would change the architecture to instead of doing the formatting internal, you could do it as a plugin.

00:13:43 And then it talks about the different architecture of Pluggy because you've got a host and a plugin and hooks and hooks specs and all sorts of stuff like that.

00:13:52 And it's actually easy to get lost through this if you're just reading it.

00:13:55 But I suggest walking through the code as he's doing it and actually running the stuff and looking at it.

00:14:01 And there's not really any super easy ways to do plugin systems in Python.

00:14:07 I don't know if any language has a better system.

00:14:09 But plugin is pretty good.

00:14:10 If you follow along, you can kind of get with it.

00:14:13 Yeah, very cool.

00:14:14 I haven't looked to see if the talks are online yet, but I'm looking forward to watching this if they do go up.

00:14:21 I suspect they probably will in the modern age of everything being online.

00:14:26 Yes.

00:14:26 Yeah, probably.

00:14:27 Awesome.

00:14:27 So let me talk about a little query syntax that I've been wanting in the Python space for a long time.

00:14:36 And you almost have it.

00:14:39 It's so close in some ways, but so far in others.

00:14:43 For example, with list comprehensions, generator expressions, all those types of things, we can do a lot of in-memory data-like things, right?

00:14:53 We could go and say, if I got a list of numbers, I could get the square of the number for all the numbers.

00:15:00 If the number is like, you know, every number that's odd or, you know, some weird thing like that, right?

00:15:04 That's sort of a query type of thing.

00:15:06 There's like a where clause.

00:15:07 There's a from clause.

00:15:08 There's a select transformation bit.

00:15:11 You could even do like paging with slices on the end of it.

00:15:16 So like skip three pages of five.

00:15:18 So, you know, slice 10 comma 15 or something like that.

00:15:22 Except there's a few things that are just not there.

00:15:26 The one that drives me the craziest the most is like a sorting, by the way.

00:15:29 Like if you could just do like an order by in a list comprehension.

00:15:34 Oh, that would be nice, but you can't.

00:15:36 And you also can't put a dot sort on the end because that returns none.

00:15:38 So if there was some way to put like a little bit more together, that would be great.

00:15:44 And one of the probably the best implementations of this, I would say across all the languages,

00:15:49 is this thing called link, language integrated query in C#.

00:15:53 Yeah.

00:15:53 And I know it's not about C#, but studying that there's a really interesting way of basically

00:16:00 taking lambda expressions, applying them to collections and doing those database like things,

00:16:05 but much more where you can do like joins and you can do other sorts of operations that are

00:16:11 like paging or like filtering by type and all kinds of neat stuff there.

00:16:15 So Adam sent over this project that he ran across called link it, which adds link type of

00:16:23 in memory query syntax, like almost database syntax to Python lists.

00:16:28 Okay.

00:16:29 So like, for example, if you had a list of programmers, you could say programmers where

00:16:33 E, you know, lambda V goes to eat out experience grade in 15, except for Elon Musk, where it's

00:16:39 the type of this type of a person for, you know, category of developer take three to get only

00:16:45 three of them skip.

00:16:47 You know, you could skip like two times three to skip two pages and three to get the third

00:16:51 page of them.

00:16:52 You could select just out there variables and then apply more queries to that and do this

00:16:56 really cool fluent interface on top of these collections, which I think is just super neat.

00:17:03 And I really like this interface.

00:17:05 So if people like this fluent style programming and they kind of think in data database type

00:17:12 of thinking, here's a really cool way to apply that to Python.

00:17:16 This is kind of cool.

00:17:17 Yeah.

00:17:18 I like it a lot too.

00:17:19 I like it a whole lot.

00:17:20 So previously, and by previously, I mean, really previously, I don't remember exactly.

00:17:27 Let me see.

00:17:27 Use our little search over at Python bytes back in episode one Oh six.

00:17:32 So what is that like three, four years ago or something like that?

00:17:38 We talked about this thing called ASQ from 60 North, which is a cool project by, well,

00:17:44 the guys at 60 North who do a lot in Python.

00:17:46 And it basically is a similar type of thing.

00:17:50 It adds link queries to it.

00:17:51 But one I didn't like what didn't spark joy in me, I guess on that one is you had to like

00:17:57 convert everything to this query object.

00:18:00 And then you could do queries on it that you could convert it back to a list, which is like

00:18:04 so close, you know, but what's neat about this other project, this link it project is it is

00:18:11 the things that you do the queries against are a super class of list or derived from list.

00:18:17 So anytime a list is expected anywhere, you could just pass the result of this around.

00:18:22 You could do like conversions like now it's a queryable thing.

00:18:26 Oh, now it's not anymore.

00:18:26 Now it is again.

00:18:27 Right.

00:18:28 It's kind of always this thing that can stand in as a list, but actually has this query

00:18:31 capability, which sounds minor, but it seems like a big usability benefit actually.

00:18:36 Yeah, definitely.

00:18:37 Because yeah, you want to be able to write functions that can return this and send it to

00:18:42 maybe you want one of these objects again, so you can do further queries.

00:18:45 Exactly.

00:18:45 Or you can pass it to something that expects a list.

00:18:47 That's good.

00:18:48 Yeah, it's pretty good.

00:18:48 And if you want to upgrade a regular list to a list, you just, you know, pass it to the

00:18:53 constructor of this like derived list thing.

00:18:55 And then now it's like this queryable list.

00:18:57 So it's not quite as nice as some of the like true language built in functionality.

00:19:02 But still, this is quite neat, actually.

00:19:05 Yeah, I think I'll play with it because I think that there's some use cases that aren't obvious

00:19:08 until you start playing with it.

00:19:10 And it's really legible, right?

00:19:11 Like I would like to from this group where these are true, select this thing where that

00:19:17 is true about the sub thing you got, right?

00:19:19 Like it's it's a pretty natural way of reading codes.

00:19:21 I kind of like it.

00:19:22 Yeah, I'm just chuckling about your example, though.

00:19:24 I'm sure you didn't make it up.

00:19:26 But no, this comes from the documentation.

00:19:28 What is it?

00:19:29 So I've got programmers.

00:19:30 I'm looking for somebody with greater than 15 years of experience.

00:19:33 I don't want to Elon Musk.

00:19:35 Something AV type.

00:19:37 I don't know what that is.

00:19:38 Yeah, I don't know what that is either.

00:19:39 Take three random people, I guess.

00:19:41 That's the first three.

00:19:42 It's like limit three.

00:19:44 Yeah, the first three.

00:19:44 If there could be thousands, just give me the first three.

00:19:46 First three.

00:19:47 Find out what they had for lunch.

00:19:49 And if it was a hot lunch and it was not from Pizza Hut, get the last one and get the

00:19:56 last slice of the pizza by the.

00:19:58 Yeah.

00:19:59 So what do you end up with?

00:20:01 I believe it's a list of pizza slices which correspond to the last slice of pizza each

00:20:06 programmer ate.

00:20:06 Oh, OK.

00:20:07 I think I haven't read it yet.

00:20:08 I got to write some code to make that happen.

00:20:10 But yeah, I think that's what you end up with.

00:20:12 Yeah.

00:20:12 OK.

00:20:13 Cool.

00:20:13 Anyway, yeah, pretty neat.

00:20:15 But this idea of having this sort of natural query language that mimics databases but is

00:20:21 in memory.

00:20:21 Could have some legs.

00:20:22 I like it.

00:20:23 Yeah.

00:20:23 What you got for the last one here?

00:20:24 The last one of yours?

00:20:25 Well, this one is, I just thought we should announce this because it sounded pretty neat.

00:20:30 Although the details of it are a little over my head.

00:20:34 But so there's a Spotify deals with music, right?

00:20:37 Yes.

00:20:38 Probably a lot of music.

00:20:39 So one of the things they talked about, and I'm going to cut to the chase, it's an application

00:20:43 or a framework called Clio.

00:20:46 I think I'm pronouncing that right.

00:20:47 K-L-I-O.

00:20:48 For processing audio files or they say any large or any binary files, especially large ones at

00:20:56 scale.

00:20:56 Things like, you know, maybe like pictures or any other binary data.

00:21:02 Anyway, so it's an application.

00:21:03 It's used for pipelines.

00:21:05 It's intended for large-scale input and output of all these files, scalability, reproducibility,

00:21:11 working with pipelines and streaming and batching.

00:21:14 And to try to get it to be easy to use and easy to read so that you can have a close collaboration

00:21:19 between researchers and engineers.

00:21:21 It's Python-based.

00:21:23 It looks pretty cool.

00:21:24 And for a lot of people doing research and data pipelines for these either audio files or

00:21:30 vision or pictures or something like that, this might be cool.

00:21:35 Yeah, it could be all sorts of stuff, right?

00:21:36 I can imagine anytime there's a bunch of computation and a bunch of steps, people collecting the

00:21:41 data, someone's going to analyze the output on the other end.

00:21:44 It might be a pretty neat use case.

00:21:45 Apparently, it's built on top of Apache Beam.

00:21:47 And so it's also cloud agnostic.

00:21:50 It's intended to work with cloud services, but you can use lots of different ones.

00:21:56 I'm linking to a couple announcements and an article about it.

00:22:01 It looks like a large effort and probably a large effort for Spotify to make it open source.

00:22:05 I think that's pretty cool that they're trying to have this be around.

00:22:09 One of the articles says this might be useful for people doing, like even comparing, you know,

00:22:15 dolphin songs or something.

00:22:16 There's a lot more use cases other than just music to deal with audio files.

00:22:20 And it's kind of neat.

00:22:21 Yeah, quite cool.

00:22:22 Is this the project that Lynn Root was working on?

00:22:24 I saw her posting about, I think it was her.

00:22:26 She was posting about something.

00:22:27 I don't know.

00:22:28 Anyway, it looks like a really cool project from Spotify.

00:22:31 Does she work on Spotify?

00:22:32 She used to.

00:22:33 I think she still does.

00:22:34 I just tried to pull up her GitHub repo, but I couldn't find it.

00:22:36 Her Twitter account, but I couldn't find it for some reason.

00:22:39 Anyway, yeah, this is neat.

00:22:41 I'm a little bit surprised they open source this, but at the same time, it seems useful.

00:22:45 Why are you surprised?

00:22:46 This seems fairly proprietary?

00:22:48 No, no, it seems, I guess, like a little mix of a somewhat specialized for their world a little bit.

00:22:55 And then, you know, not at all related to like what Spotify does.

00:22:59 You know, like it's not, I don't know.

00:23:02 It doesn't seem like it feeds back anything to Spotify necessarily.

00:23:05 But I mean, it definitely looks useful.

00:23:06 So quite cool.

00:23:07 Okay.

00:23:07 Yeah.

00:23:08 Yeah.

00:23:08 Nice.

00:23:09 And nice to see Spotify doing that.

00:23:10 Also nice is getting feedback from listeners, right?

00:23:14 Yes.

00:23:15 Say like a good quarter of our entire history of our show has been like, and did you know about this?

00:23:20 I'm sure you do.

00:23:20 You just didn't cover it.

00:23:21 No, we didn't know about that.

00:23:22 But thank you.

00:23:23 Now we do.

00:23:24 And so Marco Gorelli sent in something and says, hey, recently you mentioned that it would be really cool if you could have a Jupyter notebook that just was more of a report thing.

00:23:34 You could reveal the code, but by default, the code cells are collapsed and hidden.

00:23:38 So you can just go through it.

00:23:39 And if you say like, oh, I actually want to see the code for this particular part, show me.

00:23:42 Yeah.

00:23:43 Yeah.

00:23:43 Yeah.

00:23:43 So he sent in article, I guess, walking through how you would do that with a notebook.

00:23:49 So he's like, hey, I actually wrote something about that.

00:23:51 So here you go.

00:23:52 In case people care about that.

00:23:54 So the idea is basically set up a Jupyter notebook.

00:23:56 I'm reading this right.

00:23:58 Set up a Jupyter notebook.

00:23:59 You can tell it to build an HTML file that is like a static HTML file with all the data that's in there.

00:24:06 Or to save like you would see on GitHub or something where it's not actually live and computed, but you see the output and you see the cells.

00:24:12 Right.

00:24:13 And then go tweak that HTML file.

00:24:15 I think you tweak the HTML file to just add a little bit of code that will use some JavaScript to collapse those.

00:24:21 So then you can just share that HTML file and people can toggle stuff open and closed and they get more of an article style output.

00:24:29 Oh, nice.

00:24:29 Yeah.

00:24:30 So nothing super deep or whatever, but it sounds like you're in that space.

00:24:34 You're like, I really wish I could share this notebook.

00:24:36 But that 30 lines of Python, it needs to be there.

00:24:40 But it's not exactly what I want people to see.

00:24:42 I just want them to see the steps.

00:24:43 I think this is pretty neat.

00:24:45 Oh, that's cool.

00:24:46 Yeah.

00:24:46 Yeah.

00:24:47 Definitely useful.

00:24:48 Short and sweet, indeed.

00:24:49 I love it when that happens.

00:24:49 When people, we come up with, we're like, I wish this could do this.

00:24:53 I wish this existed.

00:24:54 Did you know it does?

00:24:55 It does.

00:24:55 Yeah.

00:24:56 Exactly.

00:24:58 Exactly.

00:24:58 Well, that's our six items.

00:24:59 Do you have anything extra to talk about?

00:25:02 I do have a couple of things that are all small little things.

00:25:06 One, there was this tweet I was mentioned in.

00:25:08 Let me just read the tweet to you.

00:25:10 And you just tell me how you feel about this.

00:25:11 Okay.

00:25:12 Okay.

00:25:12 Okay.

00:25:12 So Michelle A. Renard tweeted, The difference between Western and Chinese societies can be compared to M. Kennedy's difference

00:25:20 between Software 1.0 and Software 2.0.

00:25:23 And it links to the Sanders Media Showdown article.

00:25:27 What?

00:25:28 So I saw this.

00:25:29 I was like, okay, this is weird.

00:25:30 Like we get copied and all sorts of things.

00:25:32 Like, hey, we're going to copy 20 people that talk about stuff on Twitter because we publish

00:25:36 this article and we want you to cover it.

00:25:38 And I'm always like, yeah, not so much.

00:25:39 But if you hover over this, it says, this is actually an AI bot pundit trained to sound

00:25:46 informed and profound.

00:25:47 The content mine, the links is popular and no tweet is the opinion of the author of the bot.

00:25:53 I just thought it was really weird that there's like this AI bot going around on the internet,

00:25:57 using like machine learning and stuff to just randomly be a pundit.

00:26:03 Weird, right?

00:26:04 Yeah.

00:26:04 Anyway, Michelle A. Renard is out there.

00:26:06 People do all sorts of weird stuff on Twitter.

00:26:08 Yeah.

00:26:08 But randomly like mentioning just other random people on the internet, like, hey, that person

00:26:13 over here, we're going to compare.

00:26:14 Anyway, I just thought it was funny and amusing.

00:26:16 So I put it up there.

00:26:17 Yeah.

00:26:17 It would have been even, I guess, more to the point if they would have said the difference

00:26:22 between like Python 2 and Python 3.

00:26:25 I know.

00:26:25 Well, I'd be one of the bot.

00:26:28 Even if it was software 2 and software 3, it would have been closer.

00:26:30 Yeah.

00:26:30 Pound software.

00:26:31 Yeah.

00:26:32 Hashtag software.

00:26:32 And also, Apple just had their big event a little bit ago.

00:26:35 Have you got your new Silicon Mac?

00:26:37 Have you ordered it?

00:26:38 Silicon Mac?

00:26:39 No.

00:26:39 Apple Silicon?

00:26:40 No, I have not.

00:26:41 No.

00:26:41 Have you?

00:26:42 I ordered a new Mac.

00:26:42 I actually was thinking about getting one of those, which was really interesting because

00:26:46 it's just, I think it's going to have a lot of knock-on implications.

00:26:49 Like, for example, if you're shipping C code as part of, say, like a wheel, will it also,

00:26:54 do you now have to deal with like different platforms on the Mac?

00:26:58 Will your package actually work on a Silicon Mac?

00:27:01 I don't know.

00:27:03 I don't know.

00:27:04 I don't either.

00:27:04 But it's going to be interesting.

00:27:07 I mean, the stuff needs recompiled.

00:27:08 So I'm mostly wondering what these Apple Silicon Macs will mean for Python and its packaging

00:27:15 ecosystem.

00:27:16 Are we going to run into a place where like, well, you can't use NumPy on the new Macs

00:27:20 for like three months?

00:27:21 I have an idea.

00:27:22 Okay.

00:27:23 I think if we get a whole bunch of Patreon followers, they can help us buy each of us

00:27:28 one of these things.

00:27:29 And then we can test stuff for people.

00:27:32 Yeah, there you go.

00:27:32 Perfect.

00:27:33 Actually, I did buy a new-ish 16-inch MacBook Pro that's still Intel because I was hoping

00:27:39 to get one of these new shiny ones.

00:27:41 But, well, if you're not going to make a new one, my current Mac is sort of dying.

00:27:44 So I'm going to have to buy something.

00:27:46 So actually, the whole talk about that actually encouraged me to buy not the Apple Silicon

00:27:50 one.

00:27:50 But I'm pretty excited to see where that goes.

00:27:52 They've got some like huge ML performance speed ups and a lot of interesting things.

00:27:57 Like the new MacBook Pro, I think, has 17 hours of battery life, 20 for video playback or

00:28:02 something insane like that.

00:28:04 That's incredible.

00:28:05 I've got like six.

00:28:06 I know.

00:28:07 The MacBook Air doesn't even have a fan.

00:28:08 Like it literally, it can't make a sound because it has no mechanical pieces besides typing,

00:28:13 I guess.

00:28:13 Anyway, just wanted to shout that out, put that out there and see what people thought

00:28:17 about the new Apple Silicon being like a different app compilation type and what that's going

00:28:23 to mean for Python and think about it.

00:28:25 I mean, I guess it really comes down to what happens to CPython, right?

00:28:28 Because it'll run under emulation mode if it's not.

00:28:30 But if they upgrade CPython to run natively on Apple Silicon, then what does that mean for

00:28:35 packaging?

00:28:35 Could be like a whole deal.

00:28:37 I don't know.

00:28:38 Yeah.

00:28:38 A whole big thing.

00:28:39 Yeah.

00:28:39 Hopefully not.

00:28:40 You shouldn't joke about it though.

00:28:42 It's not funny.

00:28:43 Everything's funny.

00:28:45 All right.

00:28:46 Then tell us a joke.

00:28:46 This was sent to us.

00:28:47 Not sent to us.

00:28:48 It was just sent out by Data.

00:28:50 D-E-T-A-H-Q.

00:28:52 It's a new database.

00:28:53 They're doing some interesting things.

00:28:55 They just posted out 10 E engineers are the future.

00:29:00 So engineers with 10 E's.

00:29:03 Beautiful.

00:29:03 Beautiful.

00:29:04 I've got one for you as well.

00:29:05 This one comes to us by Richard Carnes.

00:29:09 I don't know.

00:29:11 This one's a little bit political, but we could probably pull it off, don't you think?

00:29:14 A little sensitive.

00:29:15 Anyway, why did the data scientist get in trouble with animal welfare?

00:29:18 Because she was caught trying to import pandas.

00:29:21 Oh, dear.

00:29:24 Pretty good, right?

00:29:25 Yeah.

00:29:25 Thanks, Richard, for writing that one for us.

00:29:28 That was a good one.

00:29:28 Caught trying to import pandas.

00:29:32 You know it's SPD.

00:29:33 Come on.

00:29:33 Oh, that's funny.

00:29:36 Indeed.

00:29:36 Well, thanks again, Michael.

00:29:38 Yeah.

00:29:38 It's fun as always.

00:29:39 Same time next week.

00:29:40 Yeah.

00:29:41 I'll do it again.

00:29:41 Bye.

00:29:41 See y'all.

00:29:42 Thank you for listening to Python Bytes.

00:29:44 Follow the show on Twitter at Python Bytes.

00:29:46 That's Python Bytes as in B-Y-T-E-S.

00:29:49 And get the full show notes at Pythonbytes.fm.

00:29:52 If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:29:57 We're always on the lookout for sharing something cool.

00:29:59 This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening

00:30:03 and sharing this podcast with your friends and colleagues.

