00:00:00 - Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 292, recorded July 7th, 2022.

00:00:10 I'm Michael Kennedy.

00:00:11 - And I am Brian Okken.

00:00:12 - Yeah, great to have you here, Brian.

00:00:14 This episode is brought to you by us.

00:00:15 Check out Brian's book, and if you want a course, check out Talk Python Training.

00:00:19 Actually, a few more topics on that at the very end.

00:00:22 Some cool stuff going on there I want to tell people about.

00:00:24 Right now, I would like to hear about your first item, something rich, if you will.

00:00:30 - Yeah, so it wouldn't be our Python Bytes podcast if we didn't talk about Will, Will McGugan and his rich project, but anyway.

00:00:43 - Something built from rich almost always, yes.

00:00:46 - Yeah, so Will tweeted out, "Fantastic today, "fantastic project from Phil Ewells, maybe?

00:00:54 it generates screenshots of commands on the fly from Markdown files to keep them up to date.

00:01:01 >> Okay.

00:01:02 >> This is great. Let's say you want to do an output from a terminal output or from your command or something in your readme.

00:01:10 It looks great if it's like here's a kitty cat.

00:01:15 I mean, you're probably not going to put that in here.

00:01:17 But for instance, you might have your help text and this looks beautiful.

00:01:24 and that can just show up.

00:01:26 - And so that's a Markdown file?

00:01:28 - Well, yeah, so that's just this, you just stick this little line in your Markdown file and it runs what Rich Codecs does.

00:01:38 Oh yeah, I forgot to say what it is.

00:01:40 The project's called Rich Codecs.

00:01:42 What it does is it looks for these image tags within your Markdown file, and if there's backticks, it figures that you wanna run that code.

00:01:53 and it runs the code and then puts the output in this image file, and that's it, and that's enough.

00:01:58 >> I see. Then includes that in your markdown as an image, right?

00:02:02 >> Well, it's already there. It already shows up like this.

00:02:05 It doesn't change your readme at all.

00:02:06 It doesn't change your markdown file.

00:02:08 It just generates the image from the code for you.

00:02:11 Then you have this.

00:02:13 This right here, so this is an image I'm sure generated from here.

00:02:17 Then you can resize it and it's an image.

00:02:21 It's a vector image, so it just resizes.

00:02:24 How cool is that?

00:02:26 >> That is really cool.

00:02:27 >> You can run a command like this, just throw an image in there, in your markdown file or wherever.

00:02:34 You can also do code snippets.

00:02:37 You can give it this code snippet, I'm showing a snippet of some JSON, and it'll detect this comment out of your code, and then embed it as this image and show up like this.

00:02:56 Colorize your code.

00:02:59 One of the ideas around this is images are nice and they really make a readme really easy to, I mean, it's colorful, it's cool, and we like them, but it's hard to keep up to date.

00:03:13 This way you can have it kept up to date all the time.

00:03:17 What I really, really love about this is, You have all these things, you can do code snippets, you can even do config files.

00:03:25 You can have, if you want just to generate the image and you're not referencing it from your readme, maybe you're referencing somewhere else or something, you can have it generated from a config file.

00:03:37 But the cool thing about all of this is that he's got it set up for GitHub Actions.

00:03:45 You just stick this bit of code within your GitHub Actions, and it'll regenerate your images for you.

00:03:52 It even does, if there's any changes, it even does a commit, makes your changes back.

00:03:57 >> That's pretty cool.

00:03:58 >> Yeah.

00:03:59 >> Yeah, that's fantastic.

00:04:01 >> Really sweet.

00:04:01 >> You check in your readme, the action runs and then it rebuilds the graphics.

00:04:05 >> Yes, exactly.

00:04:07 >> Cool.

00:04:07 >> Then you got a nice looking readme with just like this little tiny line of code in your readme.

00:04:12 >> Nice.

00:04:13 >> Pretty neat.

00:04:14 >> Yeah, that's a cool project. Very nice.

00:04:17 All right. Well, let's jump over to this one, which is sent in to us by Roman Wright.

00:04:26 And it's actually a project by Rami Awar. And the project is called, scroll down, get this right, Pydastic. So the idea is, it says, Rami says, inspired by Sebastian Ramirez's SQL model and Roman the writes Beanie.

00:04:44 So SQL model, we've talked about that.

00:04:46 That is, identic models that are also SQLAlchemy models.

00:04:50 So basically a database layer on top of Async that, on SQLAlchemy that you can do like Async stuff and so on.

00:04:56 That is built on Pydantic.

00:04:58 And then Beanie is the same thing built on top of Motor, but the models are Pydantic models.

00:05:04 So here is another one, like an Elasticsearch ORM do CRUD results and bulk operations and so on, built on Pydantic but now talking to Elasticsearch. How cool is that?

00:05:15 >> Oh, that is very cool. Yeah.

00:05:18 >> Yeah. So if you're going to do an Elasticsearch, and I feel like this is one of those tools that I don't use, but I'm like, "Oh, I should probably learn this because it seems really useful." So let's take a step back real quick.

00:05:28 So Elasticsearch is part of the Elastic stack.

00:05:32 There's the whole elastic.co company and so on.

00:05:35 But the core of this is the open source Elasticsearch, which is a distributed RESTful search and analytics engine capable of a bunch of different things, stores your data for lightning fast search, fine-tune relevancy, ranking of your search and so on, and basically search and analytics.

00:05:54 If you want to do that, but you want to have your models be cool Python Pydantic models, well, this Pydastic thing is the way to go.

00:06:03 >> Nice. Fun name too.

00:06:05 So to get, it does, these all have fun names.

00:06:08 So the way you do it is, you know, if you know Pydantic, you basically know how to do this.

00:06:13 You create a class and it derives from now an ES model, but you can bet that that's also like a derived class from a Pydantic base model, model base, I think it's model base.

00:06:23 Anyway, the base class of Pydantic.

00:06:25 And then you just say like name str, phone optional str, and even you can do the Pydantic field stuff.

00:06:32 So you could say it's a date time, but it's a field with a default factory of DateTime.now.

00:06:37 - Oh. - Right, all the cool stuff that you would do for a gigantic model.

00:06:41 And then you can add a meta class to add information over to Elastic.

00:06:47 So for example, the meta here says index is user.

00:06:51 Then you just set up a connection, you create one of these objects and you save it.

00:06:55 You can change its name and save again.

00:06:58 Standard ORM stuff, you can get one of these objects by ID And yeah, you can even create new ones, delete ones.

00:07:04 Pretty straightforward.

00:07:05 The other thing to realize is it uses the unit of work design pattern.

00:07:10 So it says, this is based on SQLAlchemy sessions, which is the unit of work applied to SQLAlchemy.

00:07:16 So, you know, by the transitive property.

00:07:18 Anyway, you create a context manager and then you do a bunch of work and then you commit it.

00:07:22 So you can transactionally make changes to your data in Elasticsearch.

00:07:26 - Oh, that's cool.

00:07:27 Yeah, I like that.

00:07:27 - Yeah, and that's pretty much it, right?

00:07:28 You can query.

00:07:29 You know what, there is one, I feel like this is a little bit ironic.

00:07:33 the one part missing still haven't got an idea how to wrap the underlying API productively.

00:07:38 So, how do you search elastic search?

00:07:42 I'm not really sure yet, but you could put something to it.

00:07:44 I love that.

00:07:45 It just says that it just says in the docs still haven't got an idea of how to wrap the underlying API.

00:07:50 I'm anyone who got an idea.

00:07:52 So if, shoot me a thought, if you've got some ideas, out there, maybe, maybe y'all could figure it out.

00:07:58 So I guess when you do a regular query, you get these results back.

00:08:02 Maybe it's a dictionary.

00:08:03 I haven't actually tried the raw API for Elasticsearch either.

00:08:06 But if you get a dictionary back or list of dictionaries, then you can just jam those into your Pydantic models anyway.

00:08:11 Right, you can transform them back, but yeah.

00:08:14 Anyway, if you're doing Elasticsearch stuff, you know, check this out.

00:08:16 It looks pretty cool.

00:08:18 And if you have ideas on how to address that, the final bit to do the search in a good way, then you know, maybe take up that conversation.

00:08:25 - Yeah, nice.

00:08:26 - Yeah. - Cool.

00:08:27 - Well, I'm gonna stick with kind of some web stuff for a minute and talk about PyScript again.

00:08:34 So we've covered PyScript several times, I think.

00:08:37 And so, but I ran across this article called Three Things to Know Before Building PyScript.

00:08:43 And I gotta say one of the, I haven't played, you've made a little application with PyScript already, right?

00:08:48 - Yes, I have, and I loved it.

00:08:50 - Yeah. - It's very cool.

00:08:51 - So I hadn't played with it yet.

00:08:53 And one of the things I love about this is it's got a little crash course and it's really short.

00:08:59 The crash course is you gotta stick this in the head and that's it.

00:09:03 And then in the body, you wrap some of your Python code in PyScript and when you print things, it comes out.

00:09:11 That's pretty much it, crash course.

00:09:13 That's pretty easy.

00:09:15 - One thing I would like to throw in there about the script bit, it's not exactly obvious in a lot of the documentation, but you can host your own runtime of the PyOA diet and PyScript web assemblies and stuff.

00:09:28 - Okay.

00:09:29 - So this just downloads it off of there, which I don't think the caching works super well from there, but you can put it in your own place and cache it and so on.

00:09:38 - Okay, so--

00:09:39 - So I think that's the PyEMV or something.

00:09:41 So if people are checking that out and you maybe wanna pin it so it's stable or something like that, then you can do that.

00:09:46 - Or just make sure it's on your server so that you're not pulling it off of their server all the time or something.

00:09:51 - Right, 'cause maybe they'll change it or who knows, right?

00:09:54 - Right. - Exactly.

00:09:55 >> I was curious about that.

00:09:57 When you're just learning and playing around with it, you can obviously use it.

00:10:02 >> Yeah, just drop the script link in there.

00:10:04 >> Yeah. Just a few snippets, and I forgot to mention who wrote this, Brandon Riggs wrote this.

00:10:13 The first thing that he brings up is package indentation matters.

00:10:18 I probably would have messed this up.

00:10:20 This is interesting. You can do a high ENV, and in one of those tags, HTML tags.

00:10:28 But the packages have to be, have dashes and they have to be all the way to the left.

00:10:34 So you can't have those indented with your IAM.

00:10:38 >> Yeah, it's nuts because it's basically embedded YAML.

00:10:42 >> Okay.

00:10:43 >> YAML is sensitive to indentation, but white space is not supposed to matter in HTML.

00:10:49 So if you do auto reformat of the doc, it'll keep breaking it. So you got to be super careful with that section.

00:10:53 >> Interesting.

00:10:54 >> Yeah, it's a pain.

00:10:56 >> For something to watch out for, the next one is local file access, which I'm like, I don't believe this, and I had to try it out and play with it.

00:11:04 Because normally you don't access local files through JavaScript, but you can apparently through this Python thing, sort of.

00:11:13 You have to set up paths in your environment, and then I guess, Was the slash mean just the current directory or something like that, or I don't know, slash.

00:11:23 - Yeah, I think what it means, those have to be static files on your web server.

00:11:28 So this says, for people listening, forward slash views.csv, you need to be able to take that URL and jam it into just a web browser and see the file.

00:11:37 So if it was like yourserver.com/views.csv, that's the little fragment without the domain that goes there.

00:11:43 - Yeah, and in this part, when I was trying it just on my own, but the first part actually, You can run a little PyScript thing just as a file, an HTML file on your computer.

00:11:52 But if you're doing this, the local file thing, it needs a server, so you need to run a little.

00:11:58 But there's ways to do it, just a little Python server.

00:12:02 So that's interesting.

00:12:04 And his example is using a CSV file here to just import pandas and use pandas to read a CSV file, which is pretty sweet.

00:12:16 >> Yeah.

00:12:16 >> The last bit is DOM manipulation, which of course you'd want to do within if you're going to stick some Python code in your PyScript.

00:12:26 But there's just some gotchas that he ran across or just some things that weren't obvious to him.

00:12:33 I guess for buttons, there's a pys-onclick, and then there's how you get the element.

00:12:45 you can get an element through the document and then you can put it back.

00:12:49 You can do PyScript write and write to an element.

00:12:53 It's nice to have this little example to be able to see.

00:12:57 It's good to try this out.

00:12:59 On this PyScript write, it's going to this outp.

00:13:05 Well, that shows up as an ID in a div somewhere.

00:13:08 You can try to specify where you want to write to.

00:13:12 Yeah, and then how to get this kind of example is kind of nice because it has like the grabbing from an input field and how to deal with the click and stuff like that.

00:13:22 Yeah, that's really nice.

00:13:24 Can you go back really quick to where you have the PIE and V section and the static file, the CSV?

00:13:30 Yeah.

00:13:31 A little bit further, a little further back.

00:13:32 A little further.

00:13:32 So one of the things that's really cool is you can actually, in addition to these CSV files, you can put Python files in there.

00:13:39 Yeah, I was curious about that.

00:13:40 one to the other, you can say like, if you had like a helper.py, you could say somewhere else, import helper, and then call helper.suchandsuch or whatever.

00:13:49 And that's all you gotta do to kind of like register where the modules live.

00:13:53 - Okay.

00:13:54 - So you can break your code up and you don't have, the example here shows it all written in the HTML file, which is kind of insane.

00:14:00 And you should put those into separate files.

00:14:02 You wouldn't do that with JavaScript generally.

00:14:04 - Right.

00:14:05 - So you shouldn't do it with Python either, right?

00:14:06 So that's, it's really easy to use that path thing to break it up across Python files, you get full auto-complete and everything with.

00:14:13 - And then same thing then, would your Python file have to be served so you could just stick it on a--

00:14:19 - Yes. - Yeah, just server.

00:14:20 - Yeah, so that part, the client side, so weird to say, the client side Python files have to live in a static, servable section.

00:14:29 - Okay. - Normally that's not possible.

00:14:31 Normally that's blocked, as it should be.

00:14:32 - Yeah, nice.

00:14:33 Anyway, interesting.

00:14:35 This was enough to get me to try it, to try PyScript because it was pretty fun.

00:14:41 It was pretty cool.

00:14:42 - Yeah, it's very fun and it's quite neat, all the things you can build.

00:14:46 And I think we're just at the beginning, right?

00:14:48 A lot of the examples are data science oriented, but some of the things you showed, like the events and the DOM manipulation and whatnot, you can build full-fledged JavaScript run-in style apps.

00:14:59 They don't have to be only showing graphs and data frames.

00:15:02 - Right, and I think we're gonna see some interesting stuff because like I said, if you serve up your extra helper file, or it basically might be most of your code actually is in these extra files, then we really can, I mean, do most of your code and do demos and it's all live and everything, and that'll be pretty cool.

00:15:26 - Yeah, it's gonna be fantastic.

00:15:27 - Now when I tried this, the delay actually surprised me.

00:15:30 It shouldn't surprise me, 'cause it's pulling in the whole whatever, the PyScript library and everything, but it does like this little spinny wheel thing and you gotta wait a few seconds.

00:15:39 Now for a lot of applicants, and I think that's one of the reasons why I think data scientists could really take off quickly is because they're not gonna, it's an internal thing, you're not bothered by it.

00:15:49 It's not something I would, I don't think I, I'd like it to be the point where you could really use Python instead of JavaScript in a customer application or something, but I don't think it's gonna be a while.

00:16:01 - Yeah, it's gonna be a while before you see it in like a landing page scenario, but you may well see it in the equivalent of Gmail, but internal, you know, like that kind of app where you open it and you stay on there for a while.

00:16:12 - Yeah, that's true.

00:16:12 - Especially if it's an internal app, yeah.

00:16:14 - Some backend stuff, yeah, sure.

00:16:16 - Yeah, if you know it, well, I gotta log into this thing and I sit and then like, so the video that I did last month or so was about how do you host that and then do a progressive web app so that it stores that offline, in which case the web app startup time is like one second.

00:16:31 Always, like it's really, really quick.

00:16:33 If you get it off of the server, like they list here, that it takes a lot longer.

00:16:35 So anyway.

00:16:36 >> Cool. Let's try that next.

00:16:37 >> But yeah, I'm super excited about this. This is great.

00:16:41 All right. What do I have next? Let's see.

00:16:44 We covered these.

00:16:45 Next up, more fun names.

00:16:47 This one comes to us from Sean Koenig, and it says, "Hey, this might be a good one.

00:16:52 You like punny names." So this is Dissnake.

00:16:56 D-I-S-snake.

00:16:57 >> Dissnake.

00:16:59 >> Dissnake. So Dissnake is a modern.

00:17:03 I agree with that, but you'll see in a second, easy to use feature, rich, async API wrapper in Python for that or discord.

00:17:11 Okay.

00:17:12 So discord being the, yeah, like the community place, there's a lot of stuff happening there, you know, it's a little, it feels a slightly different role than Slack and teams, but you know, kind of more community oriented rather than company oriented.

00:17:24 I suppose.

00:17:25 Although you can sort of do that with Slack.

00:17:26 It's not really like it's focused.

00:17:29 It's more, some of the people jammed it into, like, for example, if you want to save the history of your community and you're doing Slack, you've got to pay per user. But it's like, if it's a public community, like everyone who randomly shows up, you're like $8 a month for them too. Oh no. Right. So for lots of reasons, for gaming and others, Discord is very popular. But what you can do is you can create bots for your community that do fun things. And this is a way to do that fun and easily in Python. So features include a modern async and await API. One of the problems apparently you run into is you can overrun your rate limit by being too chatty.

00:18:05 So it has built in like rate limiting so it doesn't destroy, it doesn't get 409 too many requests errors.

00:18:12 It has a really cool command extension you'll see in a moment, object oriented and both optimized for speed and memory.

00:18:19 Okay, so that's pretty cool.

00:18:21 Probably the best way to understand is to just check out the quick start.

00:18:25 So here's a minimal bot.

00:18:26 Here's what you do Brian, you import Disnake and you create a client with a Disnake.client and then you call, you create some functions, you decorate them, and then you say client.run, and you give your API token.

00:18:38 So then you just write regular async functions.

00:18:41 It handles the execution of the async functions, but they need to be async.

00:18:45 And you just say, here's an event for onReady.

00:18:48 - Okay.

00:18:49 - Here's an event onMessage.

00:18:50 So if somebody sends a message to that community, then it's gonna call back into here straight away.

00:18:55 - Oh, interesting.

00:18:56 - All right, so just this function, this onMessage function gets called every time a message happens, including if the thing itself sends a message or the account itself.

00:19:05 So it sort of checks to make sure it doesn't go into like some sort of infinite loop where it sends out messages if you send a message, but it just checks, hey, if you send the string dollar hello, it'll send back hello.

00:19:17 The dollar means send this to the bot.

00:19:19 You know what I mean?

00:19:20 - Okay.

00:19:20 - In this world.

00:19:21 So yeah, that's pretty much how it works.

00:19:23 It's kind of interesting, but if you look at the commands then it gets way more powerful.

00:19:28 So the commands are what people would probably think of like what I want to do with a bot.

00:19:31 So with this minimal bot, what you do is you sync the events like on message and ready and such.

00:19:37 But with the commands, you can go over here to the import the bot thing and say @decorate another async function, @bot decorate command, and this one's called foo.

00:19:46 So when that's the case, you know, it takes arguments and so on.

00:19:50 In Discord, you can write $foo, and then other stuff, and that other stuff goes to the argument.

00:19:55 So all you gotta do is have a single function with that name, and you put the decorator on it, And now all of a sudden that's a command in Discord that talks to the bot.

00:20:03 - That's cool, yeah.

00:20:05 - Isn't that easy? - Yeah.

00:20:06 - Yeah, so there's some other examples.

00:20:08 You can register your bot with a prefix.

00:20:11 So you could use, I don't know, exclamation versus dollar versus, whatever it is you want to do.

00:20:17 And by default, the command name is the same as the function name, but you can also pass in a name.

00:20:24 Like for example, if the name is list, can't have a function called list 'cause it'll freak out what list means.

00:20:28 So you can give it a name and then use a different function name and so on.

00:20:32 And then again, passing arguments and such.

00:20:35 So there's some cool little examples of they're saying $test hello and the documentation bot says hello and they say $test hello world, hello world, so on.

00:20:43 - Yeah, okay, so I was thinking stuff like you could give people access to some of these commands.

00:20:50 Like if you want to subscribe to my newsletter, you could give it a subscribe command with your email address and subscribe yourself or something.

00:20:57 - Yeah, you could totally do that.

00:20:58 - Yeah, you could just on the bot side of things, you have the command.

00:21:02 It takes an argument, which is the email, and then you just use the MailChimp or whatever API to just stick them in there.

00:21:09 Yeah, and that's running on your server, so it can do all sorts of things.

00:21:12 - Interesting, yeah.

00:21:14 - Cool, so if you wanna do something with Discord, check this out.

00:21:17 I haven't used it 'cause I haven't tried to build a bot for Discord, but this looks pretty fun.

00:21:21 So go and check that out.

00:21:22 - Definitely.

00:21:23 - Yeah.

00:21:23 - So that's our items for today.

00:21:27 Do you have any extras for us?

00:21:29 - I have extras.

00:21:30 I do, I do have extras.

00:21:31 And I actually came up with another extra while I was thinking about the extras.

00:21:35 So yeah, yeah, yeah.

00:21:36 Okay, so some exciting stuff.

00:21:38 Let me pull my screen back up here.

00:21:40 What's the order I want?

00:21:41 Let's talk about this one first.

00:21:42 So last time I spoke about the modern APIs with FastAPI, MongoDB, Beanie, Python as a in-person live course that runs for two weeks that I'm teaching and people can check that out.

00:21:54 Starts on August 8th.

00:21:56 So I'll link to that, but that's not my item 'cause that's what I talked about last time.

00:21:59 What I decided to do is I'm opening up a scholarship program for people who are underrepresented in the Python space and programming in general and who maybe also just need a hand up, two different groups there.

00:22:12 So if you're a woman in tech or a person of color or maybe you lost your job and you're like, I'm trying to get into programming, maybe this course will help me do that.

00:22:20 I could try and get in programming as a job.

00:22:22 Check out the scholarship link that I put in here and I'm saving some spots in that live course for people who could benefit from that.

00:22:28 - Oh, that's pretty cool.

00:22:29 Kudos, nice.

00:22:30 - Yeah, thanks.

00:22:31 Yeah, thanks.

00:22:32 Okay, now, just this is fresh, hot off the presses, as in is one hour and 30 minutes old.

00:22:39 We have Operation Python 2022 software bundle from Humble Bundle.

00:22:43 So we're doing another Humble Bundle this year and I've got my Git course and a Coder course and a Pythonic code course that I put in there for people to take, but there's also 24 other topics, like some stuff from RealPython, some stuff from Roof and Learner, from PyCharm, and so on.

00:23:02 So people can look through there and check that out.

00:23:05 It's certainly a good way to get a deal on Python educational stuff.

00:23:10 - Nice, cool, that's pretty cool.

00:23:11 - All right, and here's the one that, yeah, thanks, I'm pretty excited about that.

00:23:15 The last one is, I told you about these crazy headphones that I have, and I just wanna tell people maybe quick about this.

00:23:20 So I got this thing called Ultimate Ear Fits, UE fits and they're these fitted earplugs, earbuds, which I'm wearing now, obviously on the YouTube channel.

00:23:29 And what they do is they come really soft and smushy and they're light sensitive and heat sensitive.

00:23:34 You put them in your ear and you press a, you pair them to your phone, you press a button.

00:23:38 They start blazing out light and heat and they form to the shapes of your ears.

00:23:42 So Brian, what do you think of that?

00:23:44 - That's, I don't know.

00:23:47 - It's unusual, right?

00:23:48 - Yeah, it sounds pretty cool.

00:23:49 I just don't want it to go too far and to take over my brain.

00:23:52 What if it's too mushy and it, yes, if it gets in there, you don't know, you can't get it out.

00:23:57 - No, it's probably safe.

00:23:57 - Anyway, you and I were talking about that right before we started, so I thought I'd just give a quick shout out to that.

00:24:01 That's kind of fun.

00:24:02 - So how's it sound so far?

00:24:03 - It sounds great.

00:24:04 It's kind of like you're wearing earplugs, so the sound is a little bit blocked out, but then there's a speaker on the inside.

00:24:10 - Okay, nice.

00:24:11 - Yeah.

00:24:13 Any extras from you?

00:24:14 - I don't have any extras.

00:24:15 - All right, well, let's tell the joke then.

00:24:17 - Okay.

00:24:18 - So this one is a proposed, more of a comment on a proposed idea, which gosh, it probably will never happen, but I wish it would.

00:24:25 So if we're gonna unionize, forget wage, increased wages and that kind of stuff.

00:24:31 I want this instead as a software developer.

00:24:33 And what it is, is it's a proposed new standard year, which breaks up the year into 13 different months.

00:24:41 They're all 28 days, which almost exactly rounds out the year.

00:24:45 So every single month, the first is Sunday, the fifth is Thursday, the 26th is a Thursday.

00:24:53 It's always the same year after year after year.

00:24:56 So you know about the days, you know how many months it is, you know how long, if you have 28 days or you know, 45 days from now, you know, doesn't matter what month you're in on how far that pushes you into the next month.

00:25:07 But there's one day left over.

00:25:08 It says the day, the one day left over is New Year's Day.

00:25:12 It isn't a weekend or a weekday, it's magic.

00:25:15 And on leap years, it's a double vacation day.

00:25:17 The rest is easy.

00:25:18 Someone says, "I'll see you on the 19th." You know it's on a Thursday.

00:25:21 Doesn't matter what month or anything.

00:25:23 What do you think of this?

00:25:25 - I've always been a proponent to the fixed calendar.

00:25:29 I think it's a great idea.

00:25:30 And I don't remember the history, but I'm pretty sure that we probably started out this way because it's the lunar calendar, essentially.

00:25:40 - Yeah, yeah, pretty much, yeah.

00:25:41 - And I thought I read somewhere once that people were freaked out by the number 13, so they dropped it to 12 or something.

00:25:47 I'm sure somebody in the chat or somebody will.

00:25:49 I think we could fix it if you just started with zero based.

00:25:52 It goes zero to 12.

00:25:54 That's better.

00:25:55 Yeah, January zero.

00:25:57 Perfect.

00:25:58 Exactly.

00:25:59 Yeah.

00:26:01 Yeah.

00:26:01 Anyway, it's sort of a joke, but the comment about it, that's the joke.

00:26:06 Yeah.

00:26:07 You got any other jokes you want to share?

00:26:09 Is that a--

00:26:10 No, I don't.

00:26:12 All right.

00:26:12 Fantastic.

00:26:13 Good talking to you again.

00:26:14 Well, yeah, it's great to talk to you as always.

00:26:16 Thanks for being here and thanks everyone for being out in the audience.

00:26:19 >> Yeah. Thank you. Bye.

00:26:20 >> Cheers. Bye.

