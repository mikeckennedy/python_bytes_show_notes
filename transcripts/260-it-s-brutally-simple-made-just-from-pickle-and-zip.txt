00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 260, recorded November 19th, 2021.

00:00:10 I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 I'm Chris Petty.

00:00:13 Chris, welcome to the podcast.

00:00:15 You're a podcast veteran, but the first time here on Python Bytes.

00:00:20 Happy to have you here.

00:00:21 Thank you very much.

00:00:22 It's a pleasure to be here.

00:00:23 It's good to be back.

00:00:24 We're going to jump into a bunch of the news, but before we do, you know, tell people a bit about yourself.

00:00:29 Absolutely.

00:00:30 I've been in the tech business for about 35 years now, something like that.

00:00:35 And I've been a self-identifying Pythonista for about the last five or six years.

00:00:42 I work for these days.

00:00:44 I work for just recently changed jobs within Amazon.

00:00:49 I used to work for the Web Services Elastic File System team.

00:00:52 And I now work.

00:00:54 I switched gears from, you know, living in the clouds to living in the Amazon Fulfillment

00:00:59 centers.

00:00:59 We're now a network.

00:01:01 So does that mean you're doing what?

00:01:02 Like programming in COBOL or are we using now?

00:01:04 Yeah.

00:01:05 Nothing but COBOL and Fortran.

00:01:07 Just all the worst, all the most possible.

00:01:09 You know, not at all.

00:01:10 We do, my team, OpsTech IT, we do network automation for infrastructure.

00:01:17 So it's a lot of fun, actually.

00:01:19 It's really kind of neat going from building microservices and things like that, being infrastructure

00:01:24 oriented at that level to like working with being responsible for automating things like,

00:01:30 you know, network protocols, DNS, DHCP, fun stuff like that at scale in the fulfillment centers.

00:01:37 It's a really cool gig.

00:01:38 Yeah.

00:01:39 That sounds really interesting.

00:01:40 And you get an interface with physical things that go physical places, which is interesting.

00:01:44 It really is.

00:01:46 Thank you.

00:01:46 I only ship beds.

00:01:48 I don't know.

00:01:48 Brian, you also, you also work on physical things.

00:01:51 Yeah.

00:01:52 I like working with actual, we make things.

00:01:54 It's nice.

00:01:55 Yeah, absolutely.

00:01:56 It's a nice change of pace.

00:01:57 Yeah.

00:01:58 It's all I've known.

00:01:59 Out in the audience, Ned Batchelder.

00:02:03 Hey, Ned.

00:02:03 Thanks for being here.

00:02:04 Does Chris Boston represent?

00:02:06 Hey, Ned.

00:02:06 Yeah.

00:02:06 Ned is amazing.

00:02:08 He does so much work with Boston Python and I can't wait till we can get back to actually

00:02:14 like being in a room together with other people again.

00:02:17 I know.

00:02:19 Absolutely.

00:02:20 So, Brian, I used to feel like a cog in the machine, but now I work at a pretty small

00:02:26 company where I make a lot of the choices, so I don't have to feel like that.

00:02:29 But, you know, I think we're going to talk about something that I think is awesome because

00:02:34 Ned is here.

00:02:35 Yeah, it's kind of nice that Ned's here.

00:02:36 We picked this just for you, Ned.

00:02:38 But the, so Ned, one of the, Ned does a lot of stuff for Python.

00:02:43 And one of the things that he's done is this cool tool called Cog, which I've been watching

00:02:49 for a while, but I haven't had a really good reason to use.

00:02:54 But what cog does is you point it, you can have these cog, like these, it's like three

00:03:01 brackets and the cog word and then some code.

00:03:05 And then, then another magic incantation at the end.

00:03:08 It's pretty simple, but it's hard to explain.

00:03:11 But you have some code.

00:03:12 And when you point cog at it, it will run the code and then put the output of the code

00:03:16 somewhere else where you put it to.

00:03:18 So, seems neat.

00:03:20 I wanted to use it.

00:03:21 And, but I didn't know what a use case I would use it for.

00:03:25 Well, Simon Willison wrote this article called Using Cog to Update Help, the help output for

00:03:32 a markdown readme file.

00:03:33 And I think this is brilliant.

00:03:35 So, this is super awesome use case.

00:03:37 So, Simon, he even has it going up on his CSVS to SQLite project.

00:03:47 And the idea is you've got at the end, the end of the project, he actually lists on the

00:03:54 readme, he lists the help output.

00:03:56 Now, I actually have a project that the help output is out of date because the way I deal

00:04:01 with it is I run the help and then copy and paste.

00:04:03 But this is, Simon's right, this is a great use for cog to just point cog at it.

00:04:09 So, so he wrote a little snippet of code that goes in his readme.

00:04:14 And since cog ignores comments, you can put it in an HTML comment block.

00:04:21 And it, so cog will run that file and took the output and stick it out.

00:04:25 And then Simon didn't stop there.

00:04:27 He said, I want to make sure that this gets run when it needs to get run.

00:04:32 So, he wrote a test in pytest, of course, to check to see if cog needs to be written.

00:04:39 So, this is just, this is really pretty cool.

00:04:41 I like it.

00:04:41 This is the kind of thing that's, it's so cool.

00:04:44 Pardon me, Mike.

00:04:45 This is the kind of thing that's so cool because anytime you can eliminate a DIY, right?

00:04:51 Anytime you can make one thing, the one true source of whatever piece of the puzzle you're

00:04:57 looking to, to, to, to build you with.

00:05:00 And this is a great example of that.

00:05:01 Yeah.

00:05:02 Out in the audience, a little light, a real-time feedback.

00:05:05 Ned says, I also just updated the coverage and cog docs to do the same thing and to get help output into the docs.

00:05:13 Nice.

00:05:13 Yeah.

00:05:14 Very cool.

00:05:14 I love the inception of it.

00:05:17 Yeah.

00:05:17 This is definitely a cool project.

00:05:20 I want to take you all on a journey.

00:05:22 Come with me into the world of bank Python.

00:05:26 My drink.

00:05:27 This, this is an interesting article here.

00:05:30 It's one of these things that says, I can't exactly tell you precisely where I worked or what we did.

00:05:37 And I have to make up names for the projects that are not the actual names.

00:05:41 It's by Cal Patterson.

00:05:43 And it says the strange world of Python as used by big investment banks.

00:05:48 So this is quite the read.

00:05:51 If you go through it, if you click the little reader bit here, it says, you know, 30 minutes of reading time to read it.

00:05:57 So it's, it is a non-trivial bit of history, but let me see if I can give you some of, some of the highlights that I took from this.

00:06:06 And you can go read it if you really feel like you want to dive into it.

00:06:08 So one of the things they talk about is the database and all these things have interesting names.

00:06:14 I'm sure that they have actual interesting names as well that are not these names.

00:06:18 So for example, like the database like system is called Barbara.

00:06:21 And I guess the place to start here with this oral history that Cal talks about is that bank Python implementations are basically forks of the entire Python ecosystem.

00:06:34 Not just a fork of CPython, but like the libraries that it uses and everything, which are used at many, but not all of the biggest investment banks.

00:06:42 So it says, let's talk about this system called Minerva.

00:06:46 Minerva.

00:06:47 And it's a global database of Python objects.

00:06:51 And Barbara is this way to talk to it.

00:06:54 Okay.

00:06:54 So a lot of interesting keywords to keep it hidden.

00:06:57 Right.

00:06:57 But one of the things that's wild, this Barbara thing is it's like a hierarchical database that stores basically zipped pickle objects.

00:07:07 Wait, wait, what?

00:07:09 So it's in, when I say hierarchical, I mean, it's in what they call rings.

00:07:14 So you would talk to a database and there might be like a nearby replica that you talk to that might have a record or it might not.

00:07:22 And so then there's like a bigger replica, a sort of fallback to go look in this place.

00:07:27 And if it's not there, go back and look at another one.

00:07:29 They call these rings.

00:07:30 And then you would ask for something by its key and then you get it back.

00:07:35 So first of all, what do you guys think of just pickling all of your data objects?

00:07:39 It's really, I, that, that bit made me chuckle because it is exactly this, the kind of like at the time, pragmatic engineering trade-off that somebody made right years ago before we all saw pickles as the great villain of the Python ecosystem.

00:08:00 Before we knew that there could be downsides to pickling all the things and they're like, well, it's perfect.

00:08:07 Pickle idea.

00:08:07 What more could you want?

00:08:08 And now we're all just kind of looking at it.

00:08:10 It's so simple.

00:08:10 It's small.

00:08:11 It's fast.

00:08:12 Yeah.

00:08:12 Yeah.

00:08:13 How do you index something?

00:08:14 Actual database.

00:08:16 Just curious.

00:08:17 Yeah.

00:08:17 This is a fine question.

00:08:19 They do.

00:08:20 If you read it, they do also use databases sometimes.

00:08:23 Okay.

00:08:24 So, but the primary way seems to be this, this system called Barbara.

00:08:28 So one of the things that comes to mind for me here is, oh my gosh, what if you upgrade something?

00:08:35 What if you change the file, the structure in code of something that you put in the database five years ago?

00:08:43 Whoops.

00:08:44 Yeah.

00:08:46 Yeah.

00:08:46 That used to be, you know, signed up for the mailing list.

00:08:51 Yes or no.

00:08:51 And now when you change the order that yes or no became yes or no is admin.

00:08:55 Oh, oops.

00:08:56 Or it just doesn't match anymore and it crashes and you can't read your data because it's incompatible.

00:09:01 So this would happen with Python, the runtime, but also the libraries you're using, it seems to me.

00:09:06 And it's just incredibly unstable.

00:09:09 How much you want to make a bet they also have like some kind of really highly evolved over many years validation system that ensures that the, that's good.

00:09:19 That the pickles that you think are being used in the way that you think they're being used are actually still used that way.

00:09:24 Yeah.

00:09:25 Yeah, exactly.

00:09:26 There's got to be layers.

00:09:28 Sam out in the live, in the audience live stream says, good luck upgrading a new Python.

00:09:32 Yeah, exactly.

00:09:33 Yeah.

00:09:34 Like as in never.

00:09:35 And that's probably why part of it is like, yeah, we just forked it and froze it because that's crazy.

00:09:40 Let me show you something else.

00:09:41 I will, try to jump around the article by a search.

00:09:44 Cause I took notes.

00:09:45 Applications also commonly store their internal state in Barbara, writing data classes straight into and out of Barbara with very simple locking and transactions.

00:09:55 If not, and one of the things they decided is there's no file system available to these, to this platform and the little bits of data that the script picks gets picked up and outputs.

00:10:06 It all just goes back into this key value store pickled database thing called Barbara.

00:10:11 That's pretty wild, right?

00:10:12 Yeah.

00:10:13 Okay.

00:10:14 they also talk about having these overlay features, which, is pretty wild.

00:10:21 This has to do with the different rings that I talked about.

00:10:24 So when you connect, you can say, I want to connect to the middle office ring and then the FICC ring and then the default ring.

00:10:30 So then when you do a database query, which by the way, it looks like a dictionary index, just bracket key.

00:10:37 It first is going to look for it in the middle office database.

00:10:40 And then it's going to look in the FICC database and then the default database.

00:10:44 So there's like these layers of settings and these layers of specificity.

00:10:49 And they, they even do things that are to some effect of like monkey patching.

00:10:54 Like if you, if you need to change it, you can have like your dev ring and then the middle office ring and then the outer ring.

00:11:00 And you could change the value and kind of like for mocking or something.

00:11:04 so yeah, to your point, Brian, they say there are some good reasons.

00:11:08 There are some good reasons not to use Barbara.

00:11:10 If your data, let me count the ways.

00:11:14 If your data set is a large, it may be a good idea to look elsewhere, perhaps in a traditional SQL database or a KDB plus, which I have no idea what that is.

00:11:24 there's a limit on the size of Barbara objects, which is compressed at when it's zipped 16 megs or, smaller, which is pretty interesting.

00:11:33 And then paired with this is this direct, this thing called dagger, which is a directed acyclic graph that allows you to set up relationships between instruments.

00:11:42 Like, okay, I've got a bond and then I've got a credit default swap on that bond.

00:11:46 And then I've got like a fund of default swaps or, you know, like this whole layer of stuff.

00:11:51 And all of these things are like linked objects through these pickled things that you can ask questions about and like, get sort of like graph database type things.

00:12:03 That's pretty interesting.

00:12:05 they talk a lot about how you model these things, like class, like instruments and swaps and stuff and Python.

00:12:12 And that's not super interesting, but, I wanted to highlight this section and see what y'all thought.

00:12:16 It says, if you understand, if you understand, Excel, you'll be starting to recognize how a lot of the stuff here works in Excel spreadsheets their cells and they have dependencies, which is like an acyclic graph, like this dagger hierarchy, graph database thing has.

00:12:33 and it has a lot.

00:12:35 So they basically modeled so much of the code around how Excel works.

00:12:38 So you model the data first and then the behavior rather.

00:12:41 Usually we write code and then we have data that comes out of it.

00:12:45 So it's, it's pretty interesting.

00:12:48 There's also this thing called a wall pole, which is a database runner.

00:12:52 So when you get to this section, it says it's time to drop a bit of a bombshell.

00:12:56 Let's talk about deployment, versioning, et cetera.

00:13:00 The source code of the source code of this entire system itself, even including a Barbara is stored in Barbara, not on disk.

00:13:06 And it remains composed.

00:13:07 And it's kept in a special Barbara ring called source code.

00:13:11 All right.

00:13:15 What do you all think of that?

00:13:18 My hidden release engineer has left the building.

00:13:20 Oh man.

00:13:23 That's frightening.

00:13:23 Yeah.

00:13:24 So, not keeping the source code in the file system breaks some assumptions.

00:13:27 Like how does the program run?

00:13:29 Yeah.

00:13:30 So this wall pole thing runs, it's built to basically run source code that originates from a database.

00:13:35 And you, it's all one huge database.

00:13:37 So like, if you think mono repo, it's like that because you import from database and it's just like, whatever you need is there.

00:13:46 So versioning, it's like the anti microservice, basically the entire whole thing is literally there.

00:13:55 And then the way that you deploy it, let's see there, they talked about vouch.

00:13:59 So the way that you deploy to it is really interesting in that you, it reminds me of the, it works on my machine certification program.

00:14:07 So the way you deploy to the system is you just commit it to the database and boom, it's deployed.

00:14:14 It's running, right?

00:14:15 Because there's only one place the code lives.

00:14:17 It's in the database.

00:14:18 So once you do a commit, that's a full on deployment.

00:14:21 Now, how does it get into there?

00:14:23 There's a vouch system where you can get somebody who can code review what you've done and say, yeah, I vouch for this.

00:14:30 You can commit it unless you have a high reputation for not breaking the system.

00:14:35 In which case you can directly commit to it without question.

00:14:41 So I guess the culture of code review is not like a thing there.

00:14:45 I guess.

00:14:47 so another interesting knock on that comes from storing your code in a database is how do you edit it?

00:14:54 Right?

00:14:55 Like what editor to use?

00:14:56 VI won't work on it.

00:14:57 PyCharm won't work on it.

00:14:59 VS Code won't work on it because those work on files.

00:15:02 So, this Minerva system has its own IDE because most IDEs think you have files, not databases that contain the data.

00:15:11 Does that make sense?

00:15:14 It is.

00:15:15 That makes sense.

00:15:16 It really is.

00:15:16 The guy, Cal says, what I can't understand is why does it contain its own web framework?

00:15:20 Investment banks have a, a one way approach to open source software.

00:15:26 Some of it can come in, but none of it can go out.

00:15:29 Well, I, I've seen, I've seen projects that like, like, people building IDEs within a company.

00:15:38 And I always shake my head.

00:15:40 It's like, why you, this isn't your business.

00:15:43 Why are you making an IDE within your company?

00:15:46 There are a couple of things.

00:15:47 There are a couple of things that strike me from this article.

00:15:49 The first is as I read it, cause I really enjoyed it.

00:15:52 Did you read the whole thing?

00:15:54 I, most, it's long, right?

00:15:56 It's the way through.

00:15:57 It is.

00:15:57 It's crazy, right?

00:15:58 It really is.

00:15:59 It really is.

00:15:59 The thing that struck me is this is a perfect example of large organization, complex, code base and engineering system.

00:16:10 And tie.

00:16:11 Cause this really just smells like something that just got like built up, like, you know, the layers of rings around a tree over time engineer after engineer year after year making decisions.

00:16:21 And I'm sure like in the modern day, everyone who walks to the door, they probably have to plan for the period of time where the new engineer just freaks out when they tell them all this dumb as they adjust to the new reality that they're being exposed to.

00:16:35 Yeah.

00:16:36 And that is in some sense, this is a particular wacky case, but it's that way in kind of every large corporate environment in a, in a way.

00:16:44 That's true.

00:16:44 Yeah, that's totally true.

00:16:46 He actually, Cal actually discusses this a little bit here and says, this fact that you can't do very much of open source, you're stuck on some version of Python.

00:16:55 That's never going to see, never going to go back to sync with the real Python.

00:16:58 Cause how do you even do a database migration to that thing?

00:17:02 Says it could be the biggest disadvantage for you as your profession.

00:17:07 Every year you spend in the Minerva monoculture, the skills you need to interact with normal software atrophy.

00:17:15 By the time I left, I had pretty much forgotten how to wrestle pip in virtual EMV into shape essential skills for normal Python.

00:17:21 When everything is in the same repo and all the code is just an import away, software packaging just does not come up.

00:17:27 So yeah, there's a lot of, that's one way to deal with retention is to have a system where people, need to be skilled to use it.

00:17:36 And, it removes all of their other skills so they can't get another job.

00:17:40 Oh, I was just about to say, this seems like a retention at it pattern to me, but, you know,

00:17:47 It depends on which side of, of that, leave stay story you're on.

00:17:54 Because if your job is like, I want job security and I don't want to have to learn new things.

00:17:59 Like welcome to Minerva, whatever this is, right?

00:18:02 You're, you're home.

00:18:03 You can stay here forever.

00:18:05 They won't replace you.

00:18:06 On the other hand, if you want to use like FastAPI, you're like, I got to get out of here.

00:18:10 We can't be on, you know, Python two, three this long.

00:18:14 I'm out.

00:18:14 Off.

00:18:16 So I did want to mention that both Minerva and Barbara are things that you can pip install, but those aren't things we're talking about.

00:18:23 No, these are like secret code names.

00:18:26 I suspect the Minerva you installed doesn't have its own ID.

00:18:29 I'm just guessing.

00:18:30 Right.

00:18:31 Yeah.

00:18:31 there's a lot of, a lot of interesting conversation here about this.

00:18:36 just a quick little note.

00:18:38 I actually ended up, I'm like, it was late last night.

00:18:40 I'm like, I don't want to read this like 30 minute thing, but I do want to talk about it tomorrow.

00:18:43 So I actually use this thing called natural reader.

00:18:45 You can just throw this in here and it'll just like read it back.

00:18:48 Super nice.

00:18:48 That's so cool.

00:18:49 So I was, it was like 1130 last night when I started on this.

00:18:53 I'm like, Oh, I'm a little too tired to focus on this much stuff.

00:18:56 But, yeah, it's pretty nice.

00:18:58 You may have just made my day because I actually, you know, being part.

00:19:02 Yeah.

00:19:02 Because being partially blind, I feel like, you know, like, you know how some people who have like lupus and other kinds, they talk about spoons.

00:19:08 Like they only have so much energy.

00:19:10 My eyes only have so much like ice cream spoons.

00:19:14 Yeah.

00:19:14 In the course of any one day that I can, I can do it.

00:19:17 There are times when I'm like, I cannot stare at a screen for even a moment longer.

00:19:21 And I really love things like audio books or the rare services like pocket that will actually

00:19:27 read you articles.

00:19:28 And so this sounds like an awesome tool for those things that don't have that feature

00:19:32 already.

00:19:33 Nice.

00:19:33 It's, it's really neat.

00:19:34 It has different, different modes.

00:19:36 I don't know how to make this thing come up without creating an account because I don't

00:19:40 want to know what my login is here, but it has like, if, if you're dyslexic, it has like

00:19:44 a dyslexic font you can turn on and it'll highlight as you write.

00:19:47 It's, it's, it's pretty neat.

00:19:49 That's so, yeah, cool.

00:19:50 Not directly related, but I've found it to be useful in doing this research.

00:19:54 I was too tired.

00:19:55 A little bit of audience interaction here.

00:19:58 Brandon says run, run the source code from a database.

00:20:02 That's a one heck of an injection attack.

00:20:04 Yeah.

00:20:04 I mean, little Bobby tables would be just all over this thing, right?

00:20:07 It's one big injection risk.

00:20:10 Although on the other hand, I feel there might be some big safety here as well because everything

00:20:15 is pickled.

00:20:16 you've got to know what version of Python they forked it from and any variations.

00:20:21 They may be changed to the object model to even get it, to parse it back.

00:20:25 So it might be naturally safe as it's just like an opaque, it's almost like encryption.

00:20:29 Really, really, really weak encryption.

00:20:34 Yeah.

00:20:35 And then let's see.

00:20:37 Yeah.

00:20:37 David says absolutely.

00:20:39 Everyone in the live audience has a furrowed brow right now.

00:20:42 yes, David, or, or some like.

00:20:46 Nervous laughter.

00:20:47 Yeah.

00:20:48 There is one serious, serious aspect of this though.

00:20:50 We're talking about like retention and, and the article talks about like, as he worked

00:20:56 up in this, in this private ecosystem, he felt his external skills atrophying.

00:21:01 That is a common problem that I have heard.

00:21:04 So many people who work in these large kind of like pocket universes, whether it's an Amazon

00:21:10 or a Google or a Microsoft or an IBM or whatever people, people, people can kind of feel very

00:21:16 disconnected from where the field is currently going at the hot leading edge in the outside

00:21:22 world.

00:21:23 And, and I think it's a real issue because you can't always justify pulling in the latest,

00:21:27 greatest.

00:21:28 Sometimes there are engineering or earing implications to that, that would be really problematic to your

00:21:33 businesses bottom line.

00:21:35 And so I say, and I realized time is, is finite and it's, this is hard, but this is where I

00:21:42 say even dabbling in having side projects, even if it's just the kind of thing you do on weekend,

00:21:48 every once in a while, when you have time, it's a great way to sort of like feel unconstrained

00:21:53 by the requirements of your business and to go sort of play on your own terms.

00:21:59 I mean, write helper scripts for yourself, even for your job in, in modern Python.

00:22:04 Bingo.

00:22:04 Yeah, absolutely.

00:22:05 Good, good advice.

00:22:07 Indeed.

00:22:07 All right.

00:22:08 Over to you, Chris.

00:22:08 Okay.

00:22:09 Thank you.

00:22:10 So I decided I was thinking about this and thinking about the fact that, you know,

00:22:16 most of the people who come in and our guests here on this podcast are really sort of accomplished

00:22:22 hardcore Python programmers and they're familiar with the latest and greatest tools.

00:22:26 There is no way that I'm going to scoop you all.

00:22:29 So I decided to go a completely different direction and go in the direction.

00:22:34 That's right.

00:22:35 Exactly.

00:22:36 Of, of the whimsical side of computing, because I think we all need to stay in touch with that.

00:22:41 I know I had a, an issue a number of months ago, before I changed jobs where I was feeling

00:22:46 very burned out and I felt like I just, I need to sort of get back in touch with like, why am I

00:22:51 passionate about, about computing and programming in this space?

00:22:55 And one of the things that really was ball into my, you know, soothed by my burnt out soul was

00:23:02 these retro consoles up.

00:23:05 I used one called take 80, which was not Python based.

00:23:08 It's it's Lua based.

00:23:09 But the idea here is you can build like basically retro style video games very, very, very easily

00:23:17 with very few lines of code because these things, they do have some constraints, but the constraints

00:23:24 are completely artificial, right?

00:23:26 Like in this case, this one is fixed 16 color palette, 256 by 256.

00:23:31 you know, like the constraints, the world that you're building in is uncomplicated and small.

00:23:39 And so as a result, you can sort of like step in and wrap your head around this thing so quickly and come up to speed.

00:23:48 And suddenly you're like, you know, Oh, I made a flying saucer fly across the screen.

00:23:53 I built a spray on making music.

00:23:55 I'm coding, you know, the mean loop of my game and you can do it in a very comparatively speaking,

00:24:02 short period of time with just a few lines of code.

00:24:05 I'm just skipping down a little bit here.

00:24:07 like let's take an example.

00:24:09 They have the sort of like, you know, sneak eating dots kind of game.

00:24:14 And it's comparatively speaking, like when you compare it with like one of the modern,

00:24:20 you know, game, framework code bases.

00:24:24 Like unreal engine or something.

00:24:26 Unreal engine or do you think we were talking about like, here's my 60 pages of,

00:24:30 of coordinate transforms.

00:24:31 And you just look at it and you're like, I can't, I can't.

00:24:35 And my a hundred gigs of, textures that we're going to export.

00:24:38 Yeah.

00:24:39 Exactly.

00:24:39 Yeah.

00:24:40 So this project is called pixel.

00:24:41 I'm guessing that's how you P Y X E L.

00:24:44 And it allows you to create extremely simple 2d animated games in Python, right?

00:24:50 Yes.

00:24:51 I apologize.

00:24:51 I shouldn't have said that.

00:24:52 yes, exactly.

00:24:53 and so, back when I was using the other one, I kept thinking the entire time,

00:24:58 like, wow.

00:24:59 Wow.

00:24:59 You know, I'm really having fun with this.

00:25:02 And I'm really, I actually really enjoyed learning Lua and it's a really fun language.

00:25:06 And it has a lot of, a lot of, you know, characteristics that are wonderful.

00:25:12 But I kept thinking like, wow.

00:25:13 I kind of wish I didn't have to get my brain to switch gears, which is not very good at

00:25:18 doing always.

00:25:18 I wish I could be coding this in Python.

00:25:20 And so this framework gives you the opportunity to do just that.

00:25:25 and so you can use these.

00:25:27 It almost feels like for those of us who are old enough to remember, it almost feels like

00:25:32 coding in basic on the microcomputers that some of us grew up with in the eighties.

00:25:36 Right.

00:25:36 Like it's that sort of kind of like back, back when you could type it in, you're like,

00:25:41 I saw it printed and I typed it in and I ran it.

00:25:43 Exactly.

00:25:44 Exactly.

00:25:45 Exactly.

00:25:46 You know, it's like, yeah, it really, really is.

00:25:49 And so I really, this one, what's, what's kind of interesting about this one is like,

00:25:53 this is a great example that the sort of like sounding music section of this snake game here

00:25:59 is, this one is actually a little bit more Pythonic, which I think is actually really

00:26:05 kind of cool for Python folks like us, because the other ones that I've seen kind of like

00:26:10 drifted more back towards the 1980s, like, you know, a little bit lower level of abstraction

00:26:16 kind of thing.

00:26:16 Whereas this one really takes advantage of some of the beautiful data structures like

00:26:21 stats and dictionaries and the like that Python has to offer.

00:26:25 So you can use this really kind of nice express and tax to, to write you games.

00:26:31 And I am just super excited.

00:26:33 I played with it a bit.

00:26:35 I wrote a few lines of it and I, I, you know, kick the tires just to see how it worked, but

00:26:39 I really have not had the opportunity yet to, to dive deep and kind of rewrite my side

00:26:45 project in it.

00:26:46 But I totally intend to, and I'm super psyched about it and I'm really, really glad that it

00:26:51 exists.

00:26:51 Yeah.

00:26:52 I'd love to do this.

00:26:53 I mean, I got my start typing in games from the back on a TRS 80 from the back of magazines

00:26:59 and, and have an example.

00:27:01 So one of the things, something like some engine like this, one of the things I love to do with

00:27:05 somebody is, is take an existing game and say, let's look at the code and see what,

00:27:09 what happens if we modify this, this field.

00:27:12 There's, there's any way we can get the character to run faster.

00:27:15 does that make it more fun to play the game or less fun?

00:27:17 Things like that.

00:27:18 Absolutely.

00:27:19 And that's, and that kind of thing, that kind of like, well, let's take a look at this and

00:27:23 tweak it a little bit is so simple with this kind of thing, because it's like, everything

00:27:27 is so like, uncomplicated and straightforward.

00:27:32 Like chances are like the, here is the number of frames that we skip as we transition our

00:27:38 sprite character across the screen.

00:27:39 Oh, let's just tweak that.

00:27:40 Now you've done your sort of like, let's make him run a little faster kind of thing.

00:27:45 It's all so satisfyingly in a world where I don't know about you guys, but my day job,

00:27:50 especially the old one that I did was like, you know, make a code change or make a configuration

00:27:54 change.

00:27:55 And then wait, you know, eight hours for it to deploy through the pipeline.

00:27:58 Like having something that's immediate instant feedback like this was just a delight.

00:28:04 Sorry.

00:28:05 I'm just shocked at the eight hour turnaround time.

00:28:08 I'm so sorry.

00:28:08 That was it.

00:28:09 That was it.

00:28:10 That was just a really bad example there that, you know, a couple of cases.

00:28:13 It's not, that's not my day-to-day life.

00:28:15 I actually love my day-to-day life.

00:28:16 I'm very happy, but that was just, you know what I mean?

00:28:19 We all have these like long build times.

00:28:20 Yep.

00:28:21 Yep.

00:28:21 Will McGugan.

00:28:22 Hey, Will.

00:28:23 Says, this makes me nostalgic for my ZX Spectrum in the 80s.

00:28:28 Exactly.

00:28:30 There's an Atari 800 XL behind my head that I enjoy as well.

00:28:35 So I feel that.

00:28:36 Who's not surprised that Will's been coding since the 80s?

00:28:40 So anyway.

00:28:41 Now, now.

00:28:44 And then also a few more follow-up items for your comment on side projects.

00:28:48 Sam in the audience says, 100% agree, Chris.

00:28:50 Side projects are a great way to keep yourself sharp.

00:28:53 And Jose says, plus one for the side projects to try out the latest.

00:28:57 Indeed.

00:28:57 So before we move on though, Brian, I want to tell everyone about our sponsor.

00:29:02 This episode is sponsored by Shortcut.

00:29:04 Again, thank you Shortcut for sponsoring and supporting Python Bytes.

00:29:09 So there's a lot of project management tools out there, but they often suffer from either

00:29:14 being too simple for the engineering teams or too complex.

00:29:18 And they end up looking like Bugzilla or something insane.

00:29:21 And you're like, I really don't want to go here.

00:29:23 So you want something nice and simple, but that actually scales with you.

00:29:27 Something that's good both for managers and for engineers.

00:29:30 So that's what Shortcut is.

00:29:32 It's built to cater to both of these groups.

00:29:35 So it's built for software teams based on making workflows easy.

00:29:39 Big scale objectives, goals, roadmaps can be easily tied into a team or individual work

00:29:44 sprints.

00:29:45 Progress on those are easily flow back to higher level reports.

00:29:49 And of course, as all things should be, it's keyboard friendly.

00:29:52 You don't have to take your hand off and do a bunch of mousing around.

00:29:56 You can use the UI if you like, but there's a bunch of hotkeys, which is fantastic, as I

00:30:00 think they all should be.

00:30:01 So it makes you work faster and just keep going.

00:30:03 Good version control integration.

00:30:05 Works with Git, GitHub, GitLab, and so on.

00:30:08 A lot of the places that you probably already know.

00:30:10 So you can update your task project just by doing a commit or a PR, which is fantastic.

00:30:16 The last thing you want to do is update Git and GitHub and then go update your system, right?

00:30:20 As iteration planning, you can see your team activity when you want to, or just focus on

00:30:26 what you're doing.

00:30:26 And you can even let it schedule your project for you.

00:30:29 So nice burn down charge, cycle time, all that kind of stuff.

00:30:32 So finally, you can have a project management tool that's both for engineers and managers.

00:30:37 Give it a try at pythonbytes.fm/shortcut.

00:30:40 It's a cool project and it helps support the show.

00:30:42 So thank you for supporting us.

00:30:44 Brian, what do you got next?

00:30:46 What are we ditching now?

00:30:47 We're ditching CodeCov.

00:30:49 Harsh crowd.

00:30:52 So, okay.

00:30:54 So CodeCov has been great for a lot of people who have used it.

00:30:58 It's a third-party service that you can attach to your repo or something.

00:31:05 And it makes sure that you, and this has been helpful for merge requests and stuff.

00:31:10 So if somebody does a PR, it makes sure that the coverage is 100.

00:31:15 If you've had 100% coverage, it makes sure that they don't degrade it.

00:31:18 The code they add makes the coverage stay at a high level.

00:31:22 But so it's not without problems, however.

00:31:27 And Hinnick mentions that on some of his projects, it's been sometimes a CI pipeline is blocked just because it timed out with CodeCov.

00:31:38 And that's not a good reason to fail a build.

00:31:44 So anyway, Hinnick has this project where he said, wait a second.

00:31:50 I'm just trying to make sure everything goes to 100%.

00:31:53 Coverage.py.

00:31:55 Hey, Ned.

00:31:56 Second thing here for you.

00:31:58 But coverage.py from Ned Batchelder, maintaining it, of course, has a thing that it says fail if under 100%, under a percent.

00:32:07 So you can do 100%, but you can do 80% or whatever your current percentage is.

00:32:11 But anyway, if you want that, something like CodeCov, you can get that with coverage.py.

00:32:17 But there's some tricks around it.

00:32:19 So if you've got, one of the things coverage does is let's say you've got a project that has some code that is run,

00:32:28 like you're trying to take advantage of some of the newer things, but you also, newer Python things,

00:32:32 but you want to run on older Python too.

00:32:34 So there's some if statements for Python version, for example.

00:32:37 But it might be different hardware as well, like Windows versus Mac.

00:32:41 But there might be code that's run in one test suite and not in the other.

00:32:45 So in order to do that, you kind of have to run in parallel mode and then combine the coverage reports at the end.

00:32:52 And it sounds complicated, but mostly we just copy somebody else's work.

00:32:57 So, and Hinnick has the examples here.

00:33:00 So Hinnick goes through using GitHub and coverage to do everything that you used to be able, you were doing with CodeCov.

00:33:10 So this is a nice article with examples.

00:33:13 So we've got, for each project, we're downloading the coverage report and then combining it at the end with a report with a fail under 100.

00:33:24 Really cool.

00:33:25 It's, if this is something you want to do, it's basically, it's a short article with examples.

00:33:29 He even shows, he's got in his struct log, he shows his main workflow for GitHub pipelines that does all of this.

00:33:38 So just kind of read his code and make it work.

00:33:41 And I'm, I was actually thinking of doing this on a couple of projects I've got.

00:33:46 I wanted to make sure that they were up at 100% and do something like this.

00:33:50 But I actually, for some reason, I was dragging my feet and I didn't know why, but now I don't need to.

00:33:55 I'll go ahead and use Hinnick's suggestion.

00:33:58 Now you don't have to invent it.

00:33:59 Just do it.

00:34:00 Just set up that job on GitHub.

00:34:02 This is actually something I've been, I've been kind of struggling with.

00:34:06 I shouldn't say struggling with.

00:34:07 I should say this is a journey that I have been on in that testing and code coverage and that whole class of, of proof of correctness is my weakest suit.

00:34:18 And one of the things that I've really been sort of try to wrap my head around is I see a lot of like unit test code that seems like it was just, it's just there to keep the coverage percentage up.

00:34:33 And as far as I can tell, it doesn't actually test anything like we're creating these mocks and like in everything and, but they don't actually like enforce any contracts or prove anything out.

00:34:47 And I, I, I, I've trying to figure out how we can use these tools in ways that actually sort of raise the bar on code quality without encouraging this kind of like, I don't know, T crossing and I dotting behavior.

00:35:02 Well, we're kind of getting on a tangent, but I would say that code reviews on tests are important because that's, that's just, I mean, one of the easiest ways to get a hundred percent coverage with no tip failing tests is don't put any asserts in your tests.

00:35:15 Just saying.

00:35:20 Good.

00:35:20 That's it.

00:35:21 And that makes an excellent point unto itself.

00:35:23 Yes.

00:35:24 Thank you.

00:35:24 Yes.

00:35:24 Nice.

00:35:25 All right.

00:35:26 Well, let's talk about the tippy top, the tip top.

00:35:30 So I'm sure you all are familiar with top.

00:35:32 It's like this somewhat dreadful way to tell what's happening on a Unix system, on Linux to see like what's happening.

00:35:39 Is it, why is it busy?

00:35:40 Is it not busy?

00:35:41 I say dreadful because it's so simple and there's better tools.

00:35:43 One of them being this tip top thing for, so for a long time, I use glances.

00:35:48 I didn't know.

00:35:49 I still do use glances.

00:35:50 I'm not sure if you're all are familiar with the glances, but the UI that it creates is fantastic.

00:35:56 So you just type glances and you get this sort of progress bars that show in the CPU, the memory, all the processes.

00:36:03 It has like hotkeys.

00:36:04 You can sort by CPU or memory, filter by process name or ID, all kinds of stuff going on here.

00:36:10 And this, this is what I use now.

00:36:12 But Zach Villers sent in tip top as a competing thing.

00:36:16 And by the way, glances is Python and tip top is Python.

00:36:19 So very good candidates for pip X because no project needs them.

00:36:23 You just want to run them as commands, but they're Python, right?

00:36:25 So if you look at the same picture over on the tip top page, you can see that you get similar information, but you get a little bit better historical understanding of how your CPU is doing, how your memory is doing.

00:36:40 It even breaks it down per thread or per core.

00:36:43 It shows you your memory broken down by what's being used, what's being cached, what's free.

00:36:49 There's a graph of that over time.

00:36:50 Something that made me sad is it shows the network over time as well, the in and out flow.

00:36:56 But what happened to me is one of my servers, I ran this and it only would show the output from like a, some kind of, there were multiple network adapters and would only show the one that's not being used, not the one that's being used.

00:37:08 So I'm like, well, that's, that part is useless, unfortunately here.

00:37:11 But, and then it shows all the programs, like the CPU usage, the user it's running as the arguments that were passed to it, how much memory it has and stuff.

00:37:20 So I don't think I'm going to give up using glances because I really love that, but this feels like a, another tool to get a view of that sort into it.

00:37:28 What do y'all think?

00:37:28 I like the visual design on the face of it.

00:37:31 It, it like, especially comparing it to the glances screenshot that you showed, it feels like it might, it's a little prettier and it might, to me at least it looks a little bit less like dense and maybe a little bit easier to sort of like, maybe it's just the bounding boxes.

00:37:46 But I also feel like it's the way the screen is laid out a way to visually, an easier way to visually parse the information that's presenting.

00:37:54 That's always something I look for in the tool that I use.

00:37:57 Absolutely.

00:37:59 Brian?

00:37:59 Why do you need some, I don't use anything like this.

00:38:03 So.

00:38:03 All right.

00:38:05 So for example, if you log into, let's say you logged into a web server that was running a search job and it said, you're running a little bit low on memory as a, over the last few minutes.

00:38:17 And you've got five different web apps set up running there, web processes with like a bunch of their sub processes running.

00:38:23 And you wouldn't answer the question.

00:38:25 Okay.

00:38:26 Which one is it?

00:38:26 Which one do I have to restart?

00:38:27 Okay.

00:38:28 Yeah.

00:38:29 Things like that.

00:38:30 It's easy to see where you might not encounter this or have a need for this when you're working in the world of things, right?

00:38:38 Like the world of not servers, but embedded devices that might run Python or C or whatever.

00:38:44 And, you know, this is like managing infrastructure.

00:38:47 So you don't use this on your desktop?

00:38:50 No, I don't use this on my Mac, but I use this on all of my, not necessarily tip top, but glances on all of my Linux servers, including the Python bytes one.

00:38:57 So it's, it's nice to go in there and see what's going on in the servers with all I have is SSH.

00:39:02 I'm more of a high level person.

00:39:03 I'd rather pay somebody else to do this for me.

00:39:05 Well, let's like, but it looks pretty.

00:39:11 Let's see if I can pull up a picture of top.

00:39:15 On behalf of my employer, Brian, thank you.

00:39:18 Thank you.

00:39:18 Yes, we're happy to take me to do that for you.

00:39:20 No problem.

00:39:21 Like this, this is the thing it's replacing, by the way, is it's just a list of processes and it moves around all the time and the stuff shoots off the screen.

00:39:30 It's like, why is it doing this?

00:39:32 You know, it's.

00:39:33 I mean, to be fair, it was also written probably in like 1968 or something.

00:39:37 Yeah, yeah, absolutely.

00:39:38 Yeah.

00:39:39 I'm not knocking on it.

00:39:42 I'm just saying I would rather use, you know, something like this that gives me way more real time.

00:39:48 Like graphs, not just snapshot.

00:39:50 Now it is.

00:39:51 Now it is.

00:39:51 Now it is.

00:39:52 But like, here's, here's what's happening as the things are running and doing their work.

00:39:56 Right.

00:39:57 So that, that's super helpful to me to see.

00:39:58 To be fair.

00:40:00 I also just, just installed Tiptop just for the heck of it on my Mac and a really quick install.

00:40:05 And it does look pretty.

00:40:06 I just don't know what to do with it.

00:40:07 But yeah.

00:40:08 And by the way, let's just tie it back to the audience again.

00:40:11 So Tiptop uses textual for layout, which is based on, which is Wilma Googan's thing also based on rich.

00:40:18 So it's quite modern.

00:40:20 I think if we had Ned and Wil in the audience, we would always touch on something they were doing.

00:40:26 Every year.

00:40:26 I'll tell you what, Brian, here's a way you could use this totally in your day-to-day life.

00:40:30 Your Mac is running slow, right?

00:40:33 And you say, why is my Mac running slow?

00:40:35 You could totally use this and at a glance say, what's hoovering all my RAM?

00:40:39 What is throttling my disk?

00:40:41 What is using up all my CP, et cetera, et cetera.

00:40:45 Okay.

00:40:45 Yeah.

00:40:46 Like, for example, you can run activity monitor, which will show you the process thing.

00:40:51 And you go to the memory thing, which will show you just a single graph.

00:40:54 But like, why is it using all that memory?

00:40:55 Is that actually being used or is that cache?

00:40:58 Because you loaded a bunch of files and now it's kind of could be free, but it's not.

00:41:01 What's happening on the network?

00:41:02 You can't see very well on macOS.

00:41:05 I don't know why activity monitor is adverse to showing you network traffic, but you could

00:41:09 see like, am I downloading something or not right now?

00:41:12 I can be taught new things.

00:41:14 Okay.

00:41:14 Thanks.

00:41:15 Yeah.

00:41:15 Yeah.

00:41:16 Yeah.

00:41:16 Anyway, I'm not excited for that use case.

00:41:19 I'm excited for using it on the servers to understand them better.

00:41:21 Yeah.

00:41:22 Yeah.

00:41:22 All right.

00:41:23 Let's bring it home with some more retro, Chris.

00:41:27 Back in the world of Wibzy.

00:41:31 I've always been into, well, you know, always, ever since they weren't retro and they were,

00:41:37 they were just 8-bit machines.

00:41:38 I have, I grew up, started with, with 8-bit computer.

00:41:42 I was an Atari kid.

00:41:44 Never owned a C64, but someone has actually written a Commodore 64 emulator called PyC64

00:41:51 in pure Python.

00:41:53 And the reason that I picked this is-

00:41:55 That's wild.

00:41:56 It really is, isn't it?

00:41:58 I think it is so cool because not only do you get this Commodore 64 emulator, it's not

00:42:05 100% coverage, like he has openly emulated the display to the point where you can display

00:42:13 Petsiki characters.

00:42:14 But the bottom line is, it is other than that, a largely full machine emulator.

00:42:19 It runs on the Pi65 library, which is a 6502 CPU chip emulator also written in pure Python.

00:42:27 Oh my gosh.

00:42:28 That's hard work.

00:42:29 It really is.

00:42:30 And, and it's so neat.

00:42:31 I was able to pull this thing down and run it.

00:42:34 And I was actually writing like Commodore 64 basic that poked bits into screen memory and,

00:42:40 you know, drew pictures off the screen.

00:42:42 And, and one of the really cool things is this thing even concludes, you can sort of like pop

00:42:49 out of your emulator 64 with the gopy command to get a Python repl.

00:42:55 Skype is actually doing that, like, quality quality, the emulated Commodore 64's memory

00:43:01 by tweaking the Python data structures inside the repl.

00:43:05 It is just, it is.

00:43:07 That's pretty deep.

00:43:08 Thank you.

00:43:09 It is, it is really cool.

00:43:10 And, and it is also from my perspective, one of the reasons I picked it, it's a testament

00:43:15 to this programming language that we all use and love for our work.

00:43:20 And, you know, whether it's webby stuff or testing devices or in my case, automating network

00:43:25 infrastructure, it can do so much.

00:43:27 You can reach out into all these other really kind of, you know, cool niche areas, whatever

00:43:33 you're interested in and, and do neat things with Python on your computer.

00:43:39 So I just thought this was incredibly cool.

00:43:41 I had enjoyed playing with it and I definitely intend to enjoy playing with it some more.

00:43:46 It might be some interesting ways to go back and study operating systems back when they were

00:43:51 simple.

00:43:51 If you were like a computer science student as well.

00:43:54 Yeah, for sure.

00:43:55 I think there's a lot to learn there.

00:43:57 you know, even if you're not necessarily someone who is keenly interested in writing your

00:44:03 own operating system, I think there's a lot to learn just in terms of the programming paradigm,

00:44:08 right?

00:44:09 Like when, when you wanted to solve a problem and you want it to display something on the

00:44:13 screen and a perfectly reasonable answer was I'm going to poke the right bits into screen

00:44:21 memory because that's a more efficient way to display this thing as opposed to using whatever

00:44:26 my high level language provides.

00:44:28 It is, it's such a different way of thinking the reality that most of us have it day to day.

00:44:34 It's just a fun, refresh, refreshing place to visit, at least from my perspective.

00:44:38 Yeah.

00:44:39 Very cool.

00:44:39 It's a good one.

00:44:40 Thank you.

00:44:41 Brian, it's time for extra, extra, extra here all about it.

00:44:43 How many extras do you have?

00:44:45 I have zero today.

00:44:47 You have no extras.

00:44:49 You're not adding to the number of extras.

00:44:50 Chris, anything else you want to throw out there that people know about?

00:44:53 Sure.

00:44:54 Absolutely.

00:44:54 My, my team at Amazon is hiring.

00:44:57 Hopefully we can put a link in the show notes.

00:44:59 I work for OpsTech IT.

00:45:01 We work with the fulfillment centers and I, the, I cannot say enough how much I love working

00:45:08 with this team.

00:45:08 People are incredible and they're sort of like, at least the folks I'm working directly with

00:45:14 are people who started out in the fulfillment centers and were interested in technology, right?

00:45:21 And they were able to prove that they could actually walk the walk.

00:45:25 And now they're being promoted into full on engineering positions.

00:45:28 And I just find that so incredibly refreshing.

00:45:31 Yeah.

00:45:32 That's fantastic.

00:45:33 Yeah.

00:45:33 These people just have a very different perspective.

00:45:35 You know, they're not the jaded.

00:45:37 Like I've been in the tech industry for 20 years types like me.

00:45:40 It's, it's really inspiring to work with them.

00:45:42 Yeah.

00:45:43 Not, not too many debates of like, why don't we just switch to a functional language?

00:45:46 Come on.

00:45:49 More practical.

00:45:49 More practical.

00:45:49 We'll just get stuff done.

00:45:51 I love it.

00:45:51 Exactly.

00:45:52 Thank you.

00:45:52 Before we move.

00:45:53 Yeah.

00:45:53 Yeah.

00:45:54 So we'll put that link in the show notes.

00:45:55 Before we move on to my extras, which are not many.

00:45:58 Sam says, it's so helpful to understand how a computer works when you're writing code.

00:46:02 These kinds of things are a good way to learn that.

00:46:04 Talking about the Commodore 64 emulator.

00:46:06 Awesome.

00:46:07 All right.

00:46:07 So I just have one and that's, I'm going to be speaking at FlaskCon 2021.

00:46:15 And so FlaskCon is the first week of December, which has a remote attendance.

00:46:19 I'm going to be talking about HTMX and Flask once again, because I'm super psyched about

00:46:24 all that stuff.

00:46:24 And so if you want to see some really cool apps get built using HTMX and Flask, drop in over

00:46:30 there.

00:46:31 There's a whole bunch of other talks going on as well.

00:46:33 So I'll put the link to that in the show notes.

00:46:35 All right.

00:46:36 Shall we finish it off with a joke?

00:46:38 Yeah.

00:46:39 Levity is the soul of wit.

00:46:40 Absolutely.

00:46:41 It is.

00:46:43 So we just recently went through the whole daylight savings unraveling and went back

00:46:48 to normal time.

00:46:50 And I don't know what it's like for you all, but when I look at the weather and stuff here,

00:46:56 I suspect Chris, it's similar in Boston.

00:46:58 I mean, I know it's similar for you, Brian.

00:47:01 Yes.

00:47:01 It's like sunset is at 438 PM and we're headed towards the winter solstice.

00:47:06 So it's only getting earlier in the day.

00:47:08 It's like, ah, that, that, that doesn't make me, it doesn't spark joy in my, in my heart

00:47:13 that it's already dark at 430.

00:47:15 I like it.

00:47:16 Yeah.

00:47:16 I like the dark.

00:47:18 I don't mind that it gets dark.

00:47:20 I just wish it wouldn't.

00:47:21 I wish we could just move it.

00:47:22 So there's a little time at the end of the day where there's still sun.

00:47:25 I remember.

00:47:25 I'm with you, Michael.

00:47:26 I'm solo powered.

00:47:27 So I enjoy the sunlight.

00:47:28 I don't like it getting dark earlier either.

00:47:31 Yeah, absolutely.

00:47:32 I don't hate the winter.

00:47:33 I just don't wish it shifted around a little bit.

00:47:36 So this is a technical take on that.

00:47:39 Our joke as this comes from the New Yorker.

00:47:41 I mean, we're pretty highfalutin, right?

00:47:42 We're not doing like dev jokes.io or whatever it was anymore.

00:47:48 So this is by Matt Reuter and it's, it's a little cartoon of two people clearly in kind

00:47:53 of a darker space, a woman sitting in her chair with a laptop and you could just like

00:47:58 the beaming laptop screen is like a lightener up.

00:48:00 Right.

00:48:01 And the guy here on his tablet, same thing glowing on his face.

00:48:05 And underneath it, it says, I hate how the screens get bright so early this time of year.

00:48:09 Nice.

00:48:11 This is so much about our modern world.

00:48:14 It's both, it's both hilarious and kind of sad.

00:48:17 All it wouldn't go.

00:48:18 Absolutely.

00:48:20 Yeah.

00:48:21 So welcome to daylight savings or standard time.

00:48:25 I guess everyone, the screens do get bright this time of year.

00:48:29 That's funny.

00:48:30 Nice.

00:48:31 And Chris, thanks for being on the show.

00:48:33 Brian, thanks as always.

00:48:35 Yeah.

00:48:35 Thanks a lot.

00:48:36 Thank you so much.

00:48:37 You know, I really appreciate everything that you guys do for the community.

00:48:40 It's, it's really, you guys are great examples of why Python is such an amazing place to

00:48:45 live.

00:48:46 Thank you.

00:48:46 Thanks, Chris.

