
00:00:00.000 --> 00:00:05.840
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.840 --> 00:00:11.040
This is episode 173 recorded March 12, 2020. I'm Michael Kennedy.


00:00:11.040 --> 00:00:12.160
And I am Brian Okken.


00:00:12.160 --> 00:00:16.400
And we have one of our favorite sponsors Datadog sponsoring the show. Check them out


00:00:16.400 --> 00:00:21.920
at pythonbytes.fm/datadog. Get a cool t-shirt, get some cool software. Tell you more about that later.


00:00:21.920 --> 00:00:26.000
You know, I think people who when they're getting started, Brian, they write basic code,


00:00:26.000 --> 00:00:31.680
but they realized that Python is so easy to use because you can just do something like request.get


00:00:31.680 --> 00:00:36.160
and hey you have a website already like you've already downloaded like an something from an API


00:00:36.160 --> 00:00:42.240
or you downloaded something some html or a file and then it's easy to forget that maybe there's


00:00:42.240 --> 00:00:47.680
more to it. Yeah I actually totally forgot there was more to it and we know of requests as being


00:00:47.680 --> 00:00:52.960
both powerful and really easy to use and there's a just about a million tutorials on how to put


00:00:52.960 --> 00:00:56.720
something together quickly with requests. So I was really thrilled to


00:00:56.720 --> 00:01:03.240
come across this article by, I think it's Danny Hadovic, titled "Advanced Usage of


00:01:03.240 --> 00:01:09.120
Python Requests." He covers timeouts, retries, hooks, and more, and kind of that


00:01:09.120 --> 00:01:13.400
comment is it's easy to be immediately productive with requests, but there's


00:01:13.400 --> 00:01:16.880
some really cool things that you can do that I had no idea you could do this


00:01:16.880 --> 00:01:21.360
stuff. So some of those cool tricks that he runs down, actually all the tricks he


00:01:21.360 --> 00:01:24.280
he runs down, there's a hooks thing,


00:01:24.280 --> 00:01:26.680
you can attach a hooks to a session.


00:01:26.680 --> 00:01:29.640
And so you can use hooks to call


00:01:29.640 --> 00:01:32.120
raise for status on every call.


00:01:32.120 --> 00:01:34.520
So raise for status is a way you can say,


00:01:34.520 --> 00:01:37.400
well, if when I request something,


00:01:37.400 --> 00:01:39.000
if a certain status comes back,


00:01:39.000 --> 00:01:41.100
then call this other function.


00:01:41.100 --> 00:01:44.720
But like a 404, or there's certain wildcard ones


00:01:44.720 --> 00:01:46.460
that you might wanna like all the error ones,


00:01:46.460 --> 00:01:49.020
you might wanna always call something.


00:01:49.020 --> 00:01:50.240
So there's a way to hook that up.


00:01:50.240 --> 00:01:51.080
That's pretty cool.


00:01:51.080 --> 00:01:52.260
- Oh yeah, nice.


00:01:52.260 --> 00:01:54.500
- Base URLs, I had no idea you could do this.


00:01:54.500 --> 00:01:55.520
This is so neat.


00:01:55.520 --> 00:01:59.420
Instead of doing like the full path to a URL,


00:01:59.420 --> 00:02:01.960
for every, if you're doing a whole bunch of them,


00:02:01.960 --> 00:02:04.860
you can use a, set up a base URL


00:02:04.860 --> 00:02:08.220
that essentially gets prepended to everything else later.


00:02:08.220 --> 00:02:10.220
- Yeah, and this comes from request tool belt,


00:02:10.220 --> 00:02:11.700
which we covered before.


00:02:11.700 --> 00:02:14.460
So it like wraps and adds onto requests,


00:02:14.460 --> 00:02:15.300
which is pretty awesome.


00:02:15.300 --> 00:02:16.120
- Oh, does it?


00:02:16.120 --> 00:02:17.160
Okay, that's cool. - Yeah, yeah, yeah.


00:02:17.160 --> 00:02:19.660
Yeah, and this is something I do all the time


00:02:19.660 --> 00:02:22.860
when I'm writing code that talks to consumes APIs


00:02:22.860 --> 00:02:25.380
or talks to APIs or whatever is it's like,


00:02:25.380 --> 00:02:26.940
here's the base URL we set.


00:02:26.940 --> 00:02:28.180
And there's usually an if statement,


00:02:28.180 --> 00:02:29.620
like, are you in development mode?


00:02:29.620 --> 00:02:31.200
Do this, are you in production?


00:02:31.200 --> 00:02:33.620
Use this other URL as the base.


00:02:33.620 --> 00:02:36.420
And then, you know, just do a slash, whatever, get.


00:02:36.420 --> 00:02:37.740
But for me, it's always been a--


00:02:37.740 --> 00:02:39.100
- Well, that's a great use of base.


00:02:39.100 --> 00:02:41.180
- Yeah, for me, it's, I've always been like,


00:02:41.180 --> 00:02:44.220
well, okay, get base URL plus whatever,


00:02:44.220 --> 00:02:47.260
then I'm like, oh yeah, does it have the slash on the end


00:02:47.260 --> 00:02:48.860
or does it not have the slash on the end?


00:02:48.860 --> 00:02:51.220
Do I need to put the slash on the, you know what I mean?


00:02:51.220 --> 00:02:53.180
And it's super clear here how that works.


00:02:53.180 --> 00:02:54.300
So I really like this.


00:02:54.300 --> 00:02:56.320
Like I could totally have made use of this


00:02:56.320 --> 00:02:57.340
and I haven't been, so I should.


00:02:57.340 --> 00:03:00.860
- And then he covers things like retries on failure,


00:03:00.860 --> 00:03:04.200
timeouts, timeouts with retries,


00:03:04.200 --> 00:03:06.400
a little bit of testing and mocking of requests,


00:03:06.400 --> 00:03:07.940
but there's, you know, there's a lot about that.


00:03:07.940 --> 00:03:11.420
- Yeah, I'm looking at the section here on timeouts.


00:03:11.420 --> 00:03:14.100
I feel like, do you think people could get frustrated


00:03:14.100 --> 00:03:15.260
about this or something?


00:03:15.260 --> 00:03:17.300
What's up with this guy in this card game, man?


00:03:17.300 --> 00:03:18.120
- I'm not sure.


00:03:18.120 --> 00:03:22.560
like this, like under setting default timeouts, there's like a giphy of a guy just beating


00:03:22.560 --> 00:03:25.560
a card table to death, right, because he lost.


00:03:25.560 --> 00:03:29.160
It's playing Settlers of Catan and I'm guessing he lost.


00:03:29.160 --> 00:03:31.920
Anyway, it's a great, great giphy to go along with it.


00:03:31.920 --> 00:03:36.320
- I'm not sure why that is relevant to here, but it's funny.


00:03:36.320 --> 00:03:38.240
It's a funny little video.


00:03:38.240 --> 00:03:39.960
Why is it relevant?


00:03:39.960 --> 00:03:43.560
This is irrelevant to the podcast, but how is this relevant?


00:03:43.560 --> 00:03:47.860
- Well, it says it's great that stuff will just wait, but it can really frustrate you


00:03:47.860 --> 00:03:49.500
when someone's forgot to set a timeout


00:03:49.500 --> 00:03:51.180
and it halts a program in production.


00:03:51.180 --> 00:03:53.740
So I'm guessing this is an expression of being frustrated


00:03:53.740 --> 00:03:55.700
'cause production's lagged. - It's just frustrating.


00:03:55.700 --> 00:03:56.540
- Yeah, yeah.


00:03:56.540 --> 00:03:58.420
(laughing)


00:03:58.420 --> 00:04:00.460
Anyway, the one that I also thought was interesting,


00:04:00.460 --> 00:04:01.540
the base URL is cool,


00:04:01.540 --> 00:04:04.140
is the retry on failure is pretty neat, actually.


00:04:04.140 --> 00:04:06.660
- Yeah, and then you can even customize it to say,


00:04:06.660 --> 00:04:08.340
well, don't retry everything,


00:04:08.340 --> 00:04:10.860
but certain things you wanna make sure you retry.


00:04:10.860 --> 00:04:12.320
- Yeah, for sure.


00:04:12.320 --> 00:04:13.300
And how many times and whatnot.


00:04:13.300 --> 00:04:14.180
That's a great feature.


00:04:14.180 --> 00:04:16.500
- Yeah, and then this is kind of clever.


00:04:16.500 --> 00:04:19.220
The last one I thought was clever was the,


00:04:19.220 --> 00:04:21.880
if you wanna mimic being different browsers


00:04:21.880 --> 00:04:26.460
by adjusting the user agent header request information,


00:04:26.460 --> 00:04:29.300
because sometimes you wanna make sure that you're,


00:04:29.300 --> 00:04:30.640
whether or not you're testing your stuff,


00:04:30.640 --> 00:04:32.800
you wanna make sure that you can deal


00:04:32.800 --> 00:04:34.120
with different user agents,


00:04:34.120 --> 00:04:35.960
or if you wanna try to,


00:04:35.960 --> 00:04:38.820
if some people have security stuff on


00:04:38.820 --> 00:04:41.640
where they only allow certain user agents


00:04:41.640 --> 00:04:43.020
'cause they don't want bots coming in,


00:04:43.020 --> 00:04:44.580
well, you can write your bot


00:04:44.580 --> 00:04:46.620
to be a different user agent then.


00:04:46.620 --> 00:04:47.500
- Yeah, absolutely.


00:04:47.500 --> 00:04:48.340
You could lie to them.


00:04:48.340 --> 00:04:50.220
Tell them you're Internet Explorer 6.


00:04:50.220 --> 00:04:51.260
See what they think about that.


00:04:51.260 --> 00:04:52.660
(laughing)


00:04:52.660 --> 00:04:53.480
- Yeah.


00:04:53.480 --> 00:04:54.980
- So this next item that I want to cover,


00:04:54.980 --> 00:04:57.700
I ran across last week and I thought it was really cool.


00:04:57.700 --> 00:05:00.180
And I'm like, I've been looking for something like this


00:05:00.180 --> 00:05:01.020
for a while.


00:05:01.020 --> 00:05:03.980
So have you heard of this library for testing?


00:05:03.980 --> 00:05:05.180
It's called pytest.


00:05:05.180 --> 00:05:06.100
Have you worked with it?


00:05:06.100 --> 00:05:07.220
- Yeah, a little bit, yeah.


00:05:07.220 --> 00:05:08.060
- Awesome.


00:05:08.060 --> 00:05:10.380
So pytest is super clean and great.


00:05:10.380 --> 00:05:13.140
And the way you express the assertions and whatnot


00:05:13.140 --> 00:05:17.380
you would you want to assert something's not none you would assert the thing is


00:05:17.380 --> 00:05:22.420
not none and like literally you write that code and that's really cool for


00:05:22.420 --> 00:05:28.260
simple stuff like is not none but if you have to test multiple aspects of a thing


00:05:28.260 --> 00:05:32.540
like it's not known none it is a number and it's greater than zero or it's


00:05:32.540 --> 00:05:35.820
between some range that can be a little bit tricky and you've kind of got to


00:05:35.820 --> 00:05:40.820
write some code it's not not as descriptive or as expressive right that


00:05:40.820 --> 00:05:46.740
That is one of the things that I was looking for, a library that has more complex tests


00:05:46.740 --> 00:05:47.740
built in.


00:05:47.740 --> 00:05:49.700
Is this thing a subtype of that?


00:05:49.700 --> 00:05:53.180
Or is this string parsable as an integer?


00:05:53.180 --> 00:05:55.860
I'd like to know that beforehand.


00:05:55.860 --> 00:05:56.860
Something like that.


00:05:56.860 --> 00:06:01.420
I don't want to have to do the complicated, small but still somewhat complicated and non-obvious


00:06:01.420 --> 00:06:02.420
code in these assertions.


00:06:02.420 --> 00:06:04.660
I'm also a big fan of fluent APIs.


00:06:04.660 --> 00:06:07.260
What do you mean by fluent?


00:06:07.260 --> 00:06:11.020
I would love to see more fluent APIs in Python, the standard library.


00:06:11.020 --> 00:06:16.820
So what I mean is a function or property that you can call that returns the same object.


00:06:16.820 --> 00:06:17.820
Oh, okay.


00:06:17.820 --> 00:06:18.820
Sort of functional.


00:06:18.820 --> 00:06:19.820
Yeah, a little bit.


00:06:19.820 --> 00:06:27.380
So if I had, say, a list, I could say list.sort.someotherlistoperation.


00:06:27.380 --> 00:06:31.740
If sort would return a list, the list that it was called on, right?


00:06:31.740 --> 00:06:34.220
And maybe it had an order by, or I guess that's sort.


00:06:34.220 --> 00:06:37.740
if it had a filter, and then you could say dot, right?


00:06:37.740 --> 00:06:39.100
Transform or something like, right?


00:06:39.100 --> 00:06:42.380
You could sort of chain these together without doing multiple lines.


00:06:42.380 --> 00:06:42.700
Yeah.


00:06:42.700 --> 00:06:43.340
Right?


00:06:43.340 --> 00:06:44.860
So that's the fluent API.


00:06:44.860 --> 00:06:48.540
And so this thing I want to talk about is something called fluent assertions.


00:06:48.540 --> 00:06:52.700
And I ran across this from Dean Egan, and he was talking about it on Twitter.


00:06:52.700 --> 00:06:58.220
And basically, the idea is it has all these checks, like tons and tons of checks built into it.


00:06:58.220 --> 00:07:00.860
I'm not sure how many I would guess.


00:07:00.860 --> 00:07:03.260
50 different checks.


00:07:03.260 --> 00:07:33.220
Is that number complex? Is it not complex? Is a value between these two things? Is this set? Is it a set? Is it a non empty? Does it contain spaces? Does this string contain spaces? Is it shorter than that? Right? So you could say things like, given an object, is it a string that contains no spaces? That is all lowercase, you could do that as like one line, just like really clearly in this fluent API. And it returns throws assertion errors, which are the same thing that you would get if you failed in a


00:07:33.220 --> 00:07:36.980
assert directly. So it integrates really well into things like pytest.


00:07:36.980 --> 00:07:37.980
That's pretty cool, right?


00:07:37.980 --> 00:07:39.180
- Okay, cool. Yeah.


00:07:39.180 --> 00:07:43.180
- Yeah. So there's an example in the show notes here.


00:07:43.180 --> 00:07:46.340
And I took this from their docs. It basically says, if you wanted to test


00:07:46.340 --> 00:07:49.820
something like given two parameters, I want to check that the value is not


00:07:49.820 --> 00:07:54.340
none, that it's a float, that it's between zero and one, and you're given an object,


00:07:54.340 --> 00:07:57.300
and it's not none, and it's a type of something. All right. That's kind of


00:07:57.300 --> 00:08:03.180
complicated. Or you can go to their API and say, check n.isnotnone.isfloat.


00:08:03.180 --> 00:08:08.060
dot isBetween, and I thought, "This idea is really cool, but I don't like it so much."


00:08:08.060 --> 00:08:10.300
There's like too many words, right?


00:08:10.300 --> 00:08:13.900
So I've been working on a PR, and it's basically accepted.


00:08:13.900 --> 00:08:16.820
The guys running the project said, "Sure, this looks great."


00:08:16.820 --> 00:08:21.740
They've reviewed it, and it's a simpler one, and it uses properties a lot of the time.


00:08:21.740 --> 00:08:25.540
So it's a little more English, less function-y called.


00:08:25.540 --> 00:08:33.180
So you can say is n dot not none dot float dot between parenthesis zero and one close


00:08:33.180 --> 00:08:34.480
parenthesis.


00:08:34.480 --> 00:08:38.700
So the things that assert like I guess properties about it like whether it's a float or not


00:08:38.700 --> 00:08:43.040
none are just properties and the stuff that takes arguments would be still function calls.


00:08:43.040 --> 00:08:49.060
So I think it's a really clean way to write these test assertions in nice simple ways,


00:08:49.060 --> 00:08:52.460
especially if you're testing like a couple aspects like it's not none and it's a float.


00:08:52.460 --> 00:08:53.780
Yeah, I'm on the fence.


00:08:53.780 --> 00:08:56.220
I know that a lot of people like this sort of a style.


00:08:56.220 --> 00:08:57.860
I like your updates to it.


00:08:57.860 --> 00:09:00.180
I hope that goes in, 'cause that's a lot cleaner.


00:09:00.180 --> 00:09:01.580
It's a lot easier to read.


00:09:01.580 --> 00:09:03.500
So good luck with that.


00:09:03.500 --> 00:09:05.140
I'm personally a fan.


00:09:05.140 --> 00:09:06.480
That sounded harsh.


00:09:06.480 --> 00:09:07.320
- No, no, it's all right.


00:09:07.320 --> 00:09:11.020
- No, I'm a fan of just the straight asserts myself.


00:09:11.020 --> 00:09:12.580
I think they're easy to read.


00:09:12.580 --> 00:09:15.620
But I think having a couple ways to do it, it sounds neat.


00:09:15.620 --> 00:09:17.620
- What I like about it is it packages up


00:09:17.620 --> 00:09:19.740
some of the more complicated types of tests,


00:09:19.740 --> 00:09:21.260
like the character only has,


00:09:21.260 --> 00:09:24.420
Like the character, the string has some characters


00:09:24.420 --> 00:09:26.740
which are spaces or things like,


00:09:26.740 --> 00:09:29.780
like it's not as obvious if you've write the actual code


00:09:29.780 --> 00:09:32.100
that does the test some of the times, right?


00:09:32.100 --> 00:09:32.940
I don't know. - Yeah.


00:09:32.940 --> 00:09:35.060
- Anyway, that's what I like about these kinds of APIs


00:09:35.060 --> 00:09:37.720
is the sort of English telling me what you're looking for


00:09:37.720 --> 00:09:39.780
more than the code of checking for it.


00:09:39.780 --> 00:09:41.660
- Yeah, and also you're fitting a whole bunch of stuff


00:09:41.660 --> 00:09:43.180
on one line, it's kind of nice too.


00:09:43.180 --> 00:09:44.740
- Yeah, yeah, this is a way that you can have


00:09:44.740 --> 00:09:48.100
multiple assertions in one test without people like,


00:09:48.100 --> 00:09:49.420
say, "Hey, you're doing more than one test."


00:09:49.420 --> 00:09:50.460
Well, sort of.


00:09:50.460 --> 00:09:52.620
Anyway, people can check that out.


00:09:52.620 --> 00:09:53.520
It's a pretty cool library.


00:09:53.520 --> 00:09:54.820
If that sounds useful to you,


00:09:54.820 --> 00:09:56.540
it's already working for the Check API


00:09:56.540 --> 00:09:58.620
and probably will for the Is later.


00:09:58.620 --> 00:09:59.460
Cool, cool.


00:09:59.460 --> 00:10:00.460
Now, before we move on to the next,


00:10:00.460 --> 00:10:02.380
I want to tell you about Datadog


00:10:02.380 --> 00:10:04.180
because they're sponsoring this episode


00:10:04.180 --> 00:10:06.540
as they have been great supporters of the show.


00:10:06.540 --> 00:10:08.940
Let me ask you a question, dear listener.


00:10:08.940 --> 00:10:10.520
Do you have an app in production


00:10:10.520 --> 00:10:12.300
that is slower than you like


00:10:12.300 --> 00:10:14.180
or its performance is all over the place?


00:10:14.180 --> 00:10:16.400
Sometimes it's fast, but sometimes it's slow


00:10:16.400 --> 00:10:17.920
and you don't really know why.


00:10:17.920 --> 00:10:19.160
That's the most important thing is


00:10:19.160 --> 00:10:21.020
Why is your app behaving this way?


00:10:21.020 --> 00:10:23.520
Do you know what's causing it to be slow


00:10:23.520 --> 00:10:26.000
or to be kind of all over the place?


00:10:26.000 --> 00:10:28.560
And if you have Datadog, you'll know.


00:10:28.560 --> 00:10:30.400
You can troubleshoot your app's performance


00:10:30.400 --> 00:10:32.560
with Datadog's end-to-end tracing,


00:10:32.560 --> 00:10:35.120
use their detailed flame graphs to identify bottlenecks


00:10:35.120 --> 00:10:37.200
and latency in that finicky app of yours.


00:10:37.200 --> 00:10:40.120
So be the hero that got your app back on track


00:10:40.120 --> 00:10:42.160
at the company and get started with a free trial


00:10:42.160 --> 00:10:45.120
at pythonbytes.fm/datadog.


00:10:45.120 --> 00:10:45.960
- Very nice.


00:10:45.960 --> 00:10:46.800
- Yeah, thank you Datadog.


00:10:46.800 --> 00:10:47.640
Good stuff.


00:10:47.640 --> 00:10:48.600
Also good stuff.


00:10:48.600 --> 00:10:53.880
GitHub. Yeah, GitHub and GitHub Actions. I don't know how long they've been out of beta,


00:10:53.880 --> 00:10:56.560
but GitHub Actions I think are available to everyone now.


00:10:56.560 --> 00:10:59.960
And these are different than their webhooks, right? These are more automation workflow


00:10:59.960 --> 00:11:04.960
inside GitHub. Yeah, and GitHub's sort of by part of the


00:11:04.960 --> 00:11:11.440
Azure Pipelines sort of stuff. I mean, GitHub's associated with Microsoft now. So Azure Pipelines


00:11:11.440 --> 00:11:17.480
are one way to do actions on a, when you commit something or actions at an event time within


00:11:17.480 --> 00:11:23.800
GitHub, but GitHub Actions are a way also. They're more of a lightweight pipeline thing,


00:11:23.800 --> 00:11:29.480
but for a lot of Python projects, I think they're a very good, clean way to go because


00:11:29.480 --> 00:11:34.440
a lot of our Python projects are not. If you're building a package, they're kind of perfect.


00:11:34.440 --> 00:11:42.600
So there's an article called Python and GitHub Actions, and it's by Henik, and it's sort of


00:11:42.600 --> 00:11:49.880
really cool. He says he's currently recommending that people use GitHub Actions for Python stuff.


00:11:49.880 --> 00:11:54.840
It's simple, easy integration. So how do you do that? And that's what this article is about. And


00:11:54.840 --> 00:12:00.600
he goes through running your tests through Tox, using coverage, testing his multiple Python


00:12:00.600 --> 00:12:06.920
versions, and shows you the YAML that you have to set up to configure GitHub Actions to do that


00:12:06.920 --> 00:12:11.640
right. And you also have to put a little bit of a, make a change to your Tox.ini file to make sure


00:12:11.640 --> 00:12:17.800
this all works. And then I think it's good he was reminding people that if you've got an open source


00:12:17.800 --> 00:12:22.680
project it's kind of nice to clean up your old stuff. So if you if you are switching from some


00:12:22.680 --> 00:12:28.360
other CI system to GitHub Actions make sure to clean up the old stuff. And then he even goes


00:12:28.360 --> 00:12:33.480
through and tells some other things like changes you want to make to make sure that you're hooked


00:12:33.480 --> 00:12:40.120
up to the CodeCov system and some other stuff. And then making sure it builds on multiple operating


00:12:40.120 --> 00:12:44.880
systems, the sort of stuff you'd want to do with continuous integration, most of it is


00:12:44.880 --> 00:12:49.120
available through Azure, or not Azure, through GitHub Actions.


00:12:49.120 --> 00:12:50.120
So that's kind of cool.


00:12:50.120 --> 00:12:52.640
I love that it's all part of GitHub now.


00:12:52.640 --> 00:12:53.640
That's great.


00:12:53.640 --> 00:12:57.780
You know, if you're already there, it can be a pain to integrate these other systems.


00:12:57.780 --> 00:13:01.120
You can just push a few buttons or a few files and just make it run there.


00:13:01.120 --> 00:13:02.120
Yeah.


00:13:02.120 --> 00:13:05.160
Kind of the secret sauce is that they're really the same thing.


00:13:05.160 --> 00:13:09.960
I think the Azure pipelines and the GitHub Actions are all running on the same system,


00:13:09.960 --> 00:13:12.240
that GitHub Actions is a little simpler interface


00:13:12.240 --> 00:13:13.400
for people that aren't.


00:13:13.400 --> 00:13:18.240
I mean, Azure Pipelines and the Azure workflows is powerful,


00:13:18.240 --> 00:13:21.700
but it is quite overwhelming when you get into it.


00:13:21.700 --> 00:13:23.740
- Yeah, that whole system is,


00:13:23.740 --> 00:13:25.660
pretty much all of Azure is overwhelming to me.


00:13:25.660 --> 00:13:27.720
I go there, I'm like, why are there 400 things here?


00:13:27.720 --> 00:13:28.940
There's so many things,


00:13:28.940 --> 00:13:31.320
like I don't care about most of these, what is this place?


00:13:31.320 --> 00:13:32.300
- Yeah. - Yeah, yeah.


00:13:32.300 --> 00:13:33.360
Going back to digitalization. - Definitely.


00:13:33.360 --> 00:13:34.200
- Okay, cool.


00:13:34.200 --> 00:13:35.440
This next one I wanna talk about


00:13:35.440 --> 00:13:37.600
touches on sort of a similar topic


00:13:37.600 --> 00:13:40.240
as the requests one that you covered.


00:13:40.240 --> 00:13:42.740
As also the assertion one that I did.


00:13:42.740 --> 00:13:46.780
So one of the challenges of testing your code


00:13:46.780 --> 00:13:50.100
can be when you're talking to external systems, right?


00:13:50.100 --> 00:13:51.680
I wanna call the Stripe API


00:13:51.680 --> 00:13:54.300
and I gotta provide it all this information.


00:13:54.300 --> 00:13:56.980
And if you call it more than once with the same token,


00:13:56.980 --> 00:13:59.380
it'll say, sorry, you can't do that, that token's used.


00:13:59.380 --> 00:14:00.740
So you gotta go get a new token.


00:14:00.740 --> 00:14:01.800
And there's just a lot of stuff.


00:14:01.800 --> 00:14:05.360
And you necessarily wanna be calling real live APIs


00:14:05.360 --> 00:14:06.220
inside your tests.


00:14:06.220 --> 00:14:08.540
that's gonna make it quite slow potentially,


00:14:08.540 --> 00:14:09.940
and so on, right?


00:14:09.940 --> 00:14:10.980
- Yeah. - You can get charged.


00:14:10.980 --> 00:14:14.260
Like we use a geolocation service,


00:14:14.260 --> 00:14:15.700
the training site to figure out


00:14:15.700 --> 00:14:17.760
which server to serve the video from.


00:14:17.760 --> 00:14:19.540
And that one, it's not super expensive,


00:14:19.540 --> 00:14:20.460
but we have to pay per use.


00:14:20.460 --> 00:14:22.540
So I don't wanna hammer it


00:14:22.540 --> 00:14:24.780
in continuous integration and pay more.


00:14:24.780 --> 00:14:27.420
So there's this cool project called vcr.py.


00:14:27.420 --> 00:14:28.460
Have you heard of this? - Yeah.


00:14:28.460 --> 00:14:29.900
- Yeah, vcr.py is really cool.


00:14:29.900 --> 00:14:31.780
I heard about this from Tim Head,


00:14:31.780 --> 00:14:34.740
who was on TalkByThon recently for the Binder project,


00:14:34.740 --> 00:14:36.140
and that's gonna be out shortly.


00:14:36.140 --> 00:14:41.500
But the idea is that this simplifies testing things that make HTTP requests,


00:14:41.500 --> 00:14:42.580
as well as speeds it up.


00:14:42.580 --> 00:14:48.080
So all you got to do is the first time you run it, it's you decorate the function.


00:14:48.080 --> 00:14:51.900
And what it's going to do is going to basically instrument and record all the


00:14:51.900 --> 00:14:56.680
HTTP interaction, what gets sent out and then what comes back and it'll save that


00:14:56.680 --> 00:15:00.660
into a YAML file hanging around, which is called a cassette.


00:15:00.660 --> 00:15:01.340
You like that?


00:15:01.940 --> 00:15:03.860
plug the cassette to the VCR, right?


00:15:03.860 --> 00:15:07.380
And the next, the second and third and fourth time


00:15:07.380 --> 00:15:09.740
that you run the test, if it finds that cassette file


00:15:09.740 --> 00:15:12.020
in the same inputs, it's like, well, you asked for this


00:15:12.020 --> 00:15:14.860
and here's your answer, and it just replays it back to you.


00:15:14.860 --> 00:15:15.740
- Yeah, it's pretty clever.


00:15:15.740 --> 00:15:16.640
- Yeah, it's super clever.


00:15:16.640 --> 00:15:20.740
You don't have to worry about if the system is maybe slow


00:15:20.740 --> 00:15:23.900
or you've got to set things up just right to call it


00:15:23.900 --> 00:15:25.380
'cause once it has that little cassette file,


00:15:25.380 --> 00:15:26.700
it's good to go.


00:15:26.700 --> 00:15:29.760
So it lets you test these external service,


00:15:29.760 --> 00:15:34.440
test your integration with these external services in a semi-realistic way because you're


00:15:34.440 --> 00:15:39.560
really playing back at least snapshot in time real data that you got from it without any


00:15:39.560 --> 00:15:41.040
effort on your part.


00:15:41.040 --> 00:15:45.120
Let's you work offline, your tests are completely deterministic, if it passes once it's always


00:15:45.120 --> 00:15:47.480
going to pass because you always get the same data back.


00:15:47.480 --> 00:15:52.120
It'll definitely speed up the execution speed because it's just throwing back JSON that


00:15:52.120 --> 00:15:55.840
it has in a file rather than hitting an external service and all that.


00:15:55.840 --> 00:15:59.640
And if you decide, you know what, this request is stale and out of date.


00:15:59.640 --> 00:16:02.920
All you got to do is delete that cassette file, run your test once, it'll hit the real


00:16:02.920 --> 00:16:05.600
system and then it'll go back to playing the new cassette.


00:16:05.600 --> 00:16:06.600
Yeah, nice.


00:16:06.600 --> 00:16:07.680
Yeah, yeah, pretty cool.


00:16:07.680 --> 00:16:14.280
And then for people who do like pytest, there's a cool little plugin called pytest-VCR.


00:16:14.280 --> 00:16:20.200
And then all you got to do is for your tests that might use something like URL open or


00:16:20.200 --> 00:16:27.200
request or something, you say pytest.mark.vcr for the test and then that's it.


00:16:27.200 --> 00:16:28.200
Magically it works.


00:16:28.200 --> 00:16:29.200
Yeah.


00:16:29.200 --> 00:16:30.700
- Nice. - Yeah.


00:16:30.700 --> 00:16:32.600
- Yeah, I don't know if it's really magical.


00:16:32.600 --> 00:16:34.920
I think it's very useful when it can be useful.


00:16:34.920 --> 00:16:35.760
- Yeah.


00:16:35.760 --> 00:16:37.460
- I personally don't have the experience,


00:16:37.460 --> 00:16:39.760
but I'm gonna lean on somebody that does.


00:16:39.760 --> 00:16:42.860
On episode 102 of Testing Code,


00:16:42.860 --> 00:16:44.600
I talked with Harry Percival,


00:16:44.600 --> 00:16:47.480
and part of that, we're talking about how to set up


00:16:47.480 --> 00:16:49.780
testing an application that has external dependencies


00:16:49.780 --> 00:16:52.300
through APIs and stuff.


00:16:52.300 --> 00:16:55.340
He does talk about both good experience


00:16:55.340 --> 00:16:58.560
with things like vcr.py and some difficulties,


00:16:58.560 --> 00:17:02.240
Like if there needs to be timestamps or different,


00:17:02.240 --> 00:17:05.120
if you call an API twice and expect to get something


00:17:05.120 --> 00:17:07.640
different back, well, this isn't going to help you.


00:17:07.640 --> 00:17:10.760
But so I recommend if you're running down this route,


00:17:10.760 --> 00:17:15.760
then also listen to the half hour of episode 102


00:17:15.760 --> 00:17:18.080
with Harry Percival, it'll help a lot.


00:17:18.080 --> 00:17:18.920
- Yeah, super.


00:17:18.920 --> 00:17:20.480
We should put a link in the show notes for that.


00:17:20.480 --> 00:17:22.800
To me, one of the things that I really like about this


00:17:22.800 --> 00:17:27.640
is I could go pip install Stripe or pip install MailChimp


00:17:27.640 --> 00:17:29.940
or some other thing that I'm integrating with,


00:17:29.940 --> 00:17:32.140
that who knows what kind of complicated badness


00:17:32.140 --> 00:17:35.600
it's doing on the inside to make all of its stuff work.


00:17:35.600 --> 00:17:37.460
You know, and I don't have to think about


00:17:37.460 --> 00:17:39.900
how am I going to mock out their internals,


00:17:39.900 --> 00:17:41.280
and if their internals change,


00:17:41.280 --> 00:17:43.060
how's that going to affect my tests?


00:17:43.060 --> 00:17:47.040
And I can just say, I'm going to grab this higher level API


00:17:47.040 --> 00:17:50.960
that somewhere deep in its guts does network traffic,


00:17:50.960 --> 00:17:53.500
throw this at it, and then it'll be reproducible.


00:17:53.500 --> 00:17:55.580
And to me, that's the big appeal.


00:17:55.580 --> 00:17:56.960
- Yeah, and also speed.


00:17:56.960 --> 00:17:59.800
So even if you're using a test server


00:17:59.800 --> 00:18:03.040
and not incurring all the overhead costs


00:18:03.040 --> 00:18:06.640
of the actual server, even with the test server,


00:18:06.640 --> 00:18:10.040
it's time, it's latency, and you can speed things up


00:18:10.040 --> 00:18:13.120
by caching the return values.


00:18:13.120 --> 00:18:14.400
So it's a cool idea.


00:18:14.400 --> 00:18:15.520
- Cool, I'm glad you like it.


00:18:15.520 --> 00:18:17.760
I know it's probably not something you do as much


00:18:17.760 --> 00:18:20.400
in the hardware world, but yeah.


00:18:20.400 --> 00:18:21.720
It's a cool one, what else is cool?


00:18:21.720 --> 00:18:22.560
What else you got?


00:18:22.560 --> 00:18:24.080
- I got eight cool things.


00:18:24.080 --> 00:18:25.800
I'm a sucker for listicles.


00:18:25.800 --> 00:18:28.120
if there is actually good information.


00:18:28.120 --> 00:18:30.360
And so Jeremy Grifsky wrote


00:18:30.360 --> 00:18:34.280
the eight coolest Python programming languages features.


00:18:34.280 --> 00:18:37.680
And I was just smiling the whole time I was reading this.


00:18:37.680 --> 00:18:39.000
It's a quick article,


00:18:39.000 --> 00:18:41.200
but it talks about a whole bunch of features.


00:18:41.200 --> 00:18:43.720
I was reading it thinking, man, this is why I love Python.


00:18:43.720 --> 00:18:45.440
And I really miss all this stuff


00:18:45.440 --> 00:18:47.560
when I'm writing C++ code.


00:18:47.560 --> 00:18:51.720
So there's code examples, of course, in this article,


00:18:51.720 --> 00:18:54.320
but we got list comprehensions.


00:18:54.320 --> 00:18:56.560
And that's something that when you first learn about


00:18:56.560 --> 00:18:59.240
comprehensions, it's like, oh my gosh, this is so cool.


00:18:59.240 --> 00:19:02.280
We also have dictionary comprehensions


00:19:02.280 --> 00:19:04.120
and other comprehensions.


00:19:04.120 --> 00:19:06.360
Now you can have, there's all sorts of stuff.


00:19:06.360 --> 00:19:11.240
Generator expressions are nice and really helpful.


00:19:11.240 --> 00:19:14.240
Slice assignment, I sometimes forget that we can do this.


00:19:14.240 --> 00:19:17.360
So you can take like part of a list and assign,


00:19:17.360 --> 00:19:19.280
like if you have three values or something,


00:19:19.280 --> 00:19:21.080
you want to stick in the middle of a list,


00:19:21.080 --> 00:19:23.540
you can assign those with slice assignment.


00:19:23.540 --> 00:19:25.700
It's pretty powerful.


00:19:25.700 --> 00:19:28.100
Iterable unpacking, so if you've got a tuple


00:19:28.100 --> 00:19:31.660
and you want to unpack that and pass that to a function


00:19:31.660 --> 00:19:34.260
but it has separate values, you can do that.


00:19:34.260 --> 00:19:35.860
Negative indexing, I mean,


00:19:35.860 --> 00:19:37.780
you want to grab the last thing off of an array,


00:19:37.780 --> 00:19:39.780
you can say minus one or minus two.


00:19:39.780 --> 00:19:41.940
- I love negative indexing so much.


00:19:41.940 --> 00:19:43.460
That's a really clever feat.


00:19:43.460 --> 00:19:47.860
It's so simple and yet it's really nice to just go,


00:19:47.860 --> 00:19:50.980
I want the thing minus one, bracket minus one.


00:19:50.980 --> 00:19:52.600
Give me that, that's the one I want.


00:19:52.600 --> 00:19:54.280
- I sorted it, I want minus one.


00:19:54.280 --> 00:19:57.520
- I've tried to do this in C++, it's a bad idea.


00:19:57.520 --> 00:19:59.480
So negative indexing's cool.


00:19:59.480 --> 00:20:04.160
Chaining comparisons, so one is less than X is less than five


00:20:04.160 --> 00:20:06.520
to make sure X is between one and five.


00:20:06.520 --> 00:20:09.220
That's not something you can do in most languages


00:20:09.220 --> 00:20:12.480
and it's just, it's how we talk, it's how we do math


00:20:12.480 --> 00:20:14.560
and Python has it, it's nice.


00:20:14.560 --> 00:20:15.720
- Yeah, it's very nice.


00:20:15.720 --> 00:20:17.720
- It finalizes it out with f-strings,


00:20:17.720 --> 00:20:19.440
which we love f-strings.


00:20:19.440 --> 00:20:23.000
And then a whole bunch of a big list of honorable mentions.


00:20:23.000 --> 00:20:24.920
And I was thinking as I was reading this,


00:20:24.920 --> 00:20:27.760
like this entire thing, plus his honorable mentions


00:20:27.760 --> 00:20:30.040
at the other stuff of like things


00:20:30.040 --> 00:20:31.640
I could have also talked about.


00:20:31.640 --> 00:20:34.840
That would be a really great just like an introduction


00:20:34.840 --> 00:20:38.400
to Python course of just like here's a half an hour


00:20:38.400 --> 00:20:40.400
of why I think Python's awesome.


00:20:40.400 --> 00:20:41.220
So it's good.


00:20:41.220 --> 00:20:42.060
- I agree.


00:20:42.060 --> 00:20:43.080
I think that'd be awesome.


00:20:43.080 --> 00:20:44.280
Let's see, as I look through this,


00:20:44.280 --> 00:20:47.280
f-strings definitely stand out as something that's awesome.


00:20:47.280 --> 00:20:49.400
Negative indexing already riffed on that.


00:20:49.400 --> 00:20:50.760
That's cool.


00:20:50.760 --> 00:20:52.640
Screening comparisons.


00:20:52.640 --> 00:20:55.640
List comprehensions, and I'll throw all the expressions


00:20:55.640 --> 00:20:57.520
and other comprehensions in there.


00:20:57.520 --> 00:21:00.920
I love them, but I wish they did a little bit more.


00:21:00.920 --> 00:21:04.640
Like, why can't I sort a list expression,


00:21:04.640 --> 00:21:07.640
list comprehension, or something like that?


00:21:07.640 --> 00:21:09.080
There's just a few things where it's like,


00:21:09.080 --> 00:21:12.280
oh man, if I could just, I find myself a lot of times,


00:21:12.280 --> 00:21:13.840
here's the comprehension,


00:21:13.840 --> 00:21:15.200
and then here's the little bit of things


00:21:15.200 --> 00:21:16.820
that I wish it could still support.


00:21:16.820 --> 00:21:17.820
I gotta do afterwards.


00:21:17.820 --> 00:21:19.140
Anyway, it would be nice.


00:21:19.140 --> 00:21:19.980
- Interesting.


00:21:19.980 --> 00:21:22.520
- Like for example, paging, right?


00:21:22.520 --> 00:21:24.280
I would like to be able to skip.


00:21:24.280 --> 00:21:26.040
So if I'm on page five of group to 20,


00:21:26.040 --> 00:21:29.680
I would like to be able to skip four times 20,


00:21:29.680 --> 00:21:33.520
take 20 with this clause sorted by that


00:21:33.520 --> 00:21:36.520
and have the sorting happen before the paging.


00:21:36.520 --> 00:21:38.340
Like that would be so nice.


00:21:38.340 --> 00:21:40.120
And it's just, you know, it's on the custom.


00:21:40.120 --> 00:21:41.940
So half the time I'm like, God, I love these,


00:21:41.940 --> 00:21:43.960
but why can't I, you know, whatever,


00:21:43.960 --> 00:21:45.920
the little thing that I wish I could extend it,


00:21:45.920 --> 00:21:48.440
a little more database and memory type of behavior,


00:21:48.440 --> 00:21:49.920
but still great, great stuff.


00:21:49.920 --> 00:21:51.500
I would totally miss them if they weren't there,


00:21:51.500 --> 00:21:52.340
that is for sure.


00:21:52.340 --> 00:21:53.160
- Yeah. - Yeah, cool.


00:21:53.160 --> 00:21:55.960
- Actually, so slice assignments,


00:21:55.960 --> 00:21:57.280
I didn't, never even occurred to me


00:21:57.280 --> 00:21:58.980
that you could do that with a language.


00:21:58.980 --> 00:22:00.760
So it's neat that you can do that,


00:22:00.760 --> 00:22:02.620
but I probably wouldn't miss them if they weren't there


00:22:02.620 --> 00:22:05.400
because I wouldn't have expected them to be there.


00:22:05.400 --> 00:22:06.360
- You shouldn't be able to do that.


00:22:06.360 --> 00:22:07.960
Yes, exactly, exactly.


00:22:07.960 --> 00:22:09.160
I wouldn't miss slice assignment at all,


00:22:09.160 --> 00:22:10.540
although it is neat.


00:22:10.540 --> 00:22:12.260
You know what I definitely would not miss


00:22:12.260 --> 00:22:13.760
is bugs in my web app.


00:22:13.760 --> 00:22:14.600
- Yeah, me either.


00:22:14.600 --> 00:22:16.320
- Do you have bugs in your web apps?


00:22:16.320 --> 00:22:19.520
- Well, I always think no, and then I learn yes,


00:22:19.520 --> 00:22:21.840
but not as often, not that often.


00:22:21.840 --> 00:22:24.480
So there's this cool project called Bento


00:22:24.480 --> 00:22:26.000
that I just learned about.


00:22:26.000 --> 00:22:27.200
Have you heard of Bento before?


00:22:27.200 --> 00:22:28.880
- Just the lunch style?


00:22:28.880 --> 00:22:29.720
- Yeah, exactly.


00:22:29.720 --> 00:22:30.720
I do love a good Bento box,


00:22:30.720 --> 00:22:32.440
but this has nothing to do with that.


00:22:32.440 --> 00:22:34.660
Maybe the name is inspired, but other than that, no.


00:22:34.660 --> 00:22:39.660
So bento@bento.dev, this is basically an analysis system


00:22:39.660 --> 00:22:43.720
that will look at your Flask and coming soon,


00:22:43.720 --> 00:22:47.840
other languages, Django, SQLAlchemy, whatnot.


00:22:47.840 --> 00:22:51.160
Look at your Flask app or your request calls


00:22:51.160 --> 00:22:56.160
and look for known bugs, especially in the security realm.


00:22:56.160 --> 00:22:58.760
So you don't end up with little Bobby tables.


00:22:58.760 --> 00:23:00.120
This is your school calling.


00:23:00.120 --> 00:23:01.880
Did you really name your table,


00:23:01.880 --> 00:23:05.800
your son --semi-colon drop whatever?


00:23:05.800 --> 00:23:08.640
Yeah, so what the idea is you can basically


00:23:08.640 --> 00:23:10.240
pip install this thing.


00:23:10.240 --> 00:23:12.840
You call bento init, it's going to create


00:23:12.840 --> 00:23:15.760
a Docker container with the analysis tools,


00:23:15.760 --> 00:23:19.160
and then it's gonna run those against your Flask app


00:23:19.160 --> 00:23:21.920
at the moment, like I said, Django,


00:23:21.920 --> 00:23:24.720
SQLAlchemy and stuff is coming along.


00:23:24.720 --> 00:23:29.140
And it'll find things like if you have a missing JWT token,


00:23:29.140 --> 00:23:33.020
or you're missing a no opener, or the content set,


00:23:33.020 --> 00:23:35.760
or if you're using requests,


00:23:35.760 --> 00:23:39.080
if you're sending username and passwords over an HTTP,


00:23:39.080 --> 00:23:40.720
not an HTTPS request,


00:23:40.720 --> 00:23:42.400
it'll automatically detect that and tell you.


00:23:42.400 --> 00:23:43.240
- Oh, very cool.


00:23:43.240 --> 00:23:44.140
- Yeah, it's pretty nice, right?


00:23:44.140 --> 00:23:45.260
- Yeah, it's very nice.


00:23:45.260 --> 00:23:47.620
It even does like Jinja template checking and stuff.


00:23:47.620 --> 00:23:48.460
- Right, exactly.


00:23:48.460 --> 00:23:50.420
So this is open source on GitHub.


00:23:50.420 --> 00:23:51.820
And yeah, you could check it out.


00:23:51.820 --> 00:23:53.620
It looks pretty nice.


00:23:53.620 --> 00:23:55.300
There's a little Giphy.


00:23:55.300 --> 00:23:56.140
Thank you guys.


00:23:56.140 --> 00:23:57.420
Well done on your project.


00:23:57.420 --> 00:24:00.940
There's a Giphy showing how it works right on the page.


00:24:00.940 --> 00:24:03.220
You can just go to the GitHub repo,


00:24:03.220 --> 00:24:06.500
scroll down a tad and just watch them find a bug,


00:24:06.500 --> 00:24:07.820
fix a bug and so on.


00:24:07.820 --> 00:24:08.820
- Yeah, very good.


00:24:08.820 --> 00:24:09.660
Cool. - Cool, cool.


00:24:09.660 --> 00:24:11.040
Anyway, so yeah, if people have,


00:24:11.040 --> 00:24:12.880
For the moment, Flask apps in the future,


00:24:12.880 --> 00:24:15.120
it looks like they're coming with other things.


00:24:15.120 --> 00:24:17.680
But yeah, you can just run this and it'll check it out.


00:24:17.680 --> 00:24:19.600
There's also a list of all the checks that they have,


00:24:19.600 --> 00:24:21.480
which I put into the show notes.


00:24:21.480 --> 00:24:23.160
So a bunch of stuff like, you know,


00:24:23.160 --> 00:24:24.300
some of the obvious ones are like,


00:24:24.300 --> 00:24:26.700
did you ship Flask into bug mode and stuff,


00:24:26.700 --> 00:24:28.920
but other things that are not so obvious.


00:24:28.920 --> 00:24:30.480
That's it for our main topics, Brian.


00:24:30.480 --> 00:24:32.820
Do you have anything you want to share with folks


00:24:32.820 --> 00:24:35.760
where we get to the laughter, the hilarity?


00:24:35.760 --> 00:24:37.520
- No, we could use a good laugh.


00:24:37.520 --> 00:24:39.040
But do you have anything extra?


00:24:39.040 --> 00:24:40.000
- We haven't talked about it yet,


00:24:40.000 --> 00:24:43.560
But I feel like it's, all the tech conferences


00:24:43.560 --> 00:24:47.280
are either canceled or they're on coronavirus watch


00:24:47.280 --> 00:24:48.280
for being cut, right?


00:24:48.280 --> 00:24:51.180
Like we've had E3, the big game one, canceled.


00:24:51.180 --> 00:24:52.880
We have the Game Developer Conference.


00:24:52.880 --> 00:24:54.960
We had South by Southwest canceled.


00:24:54.960 --> 00:24:58.240
Some other ones, I think some Facebook's F8,


00:24:58.240 --> 00:24:59.760
I think was canceled.


00:24:59.760 --> 00:25:02.440
Possibly Google I/O, I'm not sure about the one.


00:25:02.440 --> 00:25:04.040
I don't remember exactly what they said.


00:25:04.040 --> 00:25:05.880
But PyCon's still on for the moment.


00:25:05.880 --> 00:25:07.400
At the time of this recording,


00:25:07.400 --> 00:25:08.840
there's gonna be an announcement tomorrow,


00:25:08.840 --> 00:25:09.960
which may change things.


00:25:09.960 --> 00:25:13.940
but I just want to remark, what a crazy time,


00:25:13.940 --> 00:25:16.120
both for the world, but also for tech.


00:25:16.120 --> 00:25:17.980
- Yeah, definitely crazy.


00:25:17.980 --> 00:25:20.240
I'm curious what it's gonna do for,


00:25:20.240 --> 00:25:22.100
now this is totally self-centered,


00:25:22.100 --> 00:25:24.060
I do want everybody to be healthy,


00:25:24.060 --> 00:25:26.660
but I also wonder with less people commuting,


00:25:26.660 --> 00:25:29.180
if less people are listening to podcasts,


00:25:29.180 --> 00:25:30.020
that would be terrible.


00:25:30.020 --> 00:25:31.860
- Oh no, they've got a lot of housework.


00:25:31.860 --> 00:25:33.360
You all folks out there,


00:25:33.360 --> 00:25:34.940
you definitely gotta keep listening.


00:25:34.940 --> 00:25:37.940
No, that's actually a legitimate question,


00:25:37.940 --> 00:25:39.460
whether or not that makes sense.


00:25:39.460 --> 00:25:40.740
Maybe it does.


00:25:40.740 --> 00:25:42.500
Here's some of the effects I think are gonna happen.


00:25:42.500 --> 00:25:44.500
I think a lot of companies,


00:25:44.500 --> 00:25:45.720
especially larger companies,


00:25:45.720 --> 00:25:49.660
that believe you must have a meeting every Wednesday


00:25:49.660 --> 00:25:52.260
and it has to be like two hours with this group


00:25:52.260 --> 00:25:53.600
and an hour with that group,


00:25:53.600 --> 00:25:55.720
and you must commute every day into the office,


00:25:55.720 --> 00:25:58.220
even though you just work through GitHub


00:25:58.220 --> 00:26:00.540
and Slack and email anyway,


00:26:00.540 --> 00:26:02.620
they're gonna realize, you know what?


00:26:02.620 --> 00:26:04.740
We don't actually have to have these big offices


00:26:04.740 --> 00:26:07.520
and we don't have to have our people always come in.


00:26:07.520 --> 00:26:10.800
we were at least as well off.


00:26:10.800 --> 00:26:13.360
And what's gonna be like the work-life change


00:26:13.360 --> 00:26:15.720
that comes from that realization?


00:26:15.720 --> 00:26:18.800
- Yeah, we made sure, I mean, a year ago today,


00:26:18.800 --> 00:26:23.120
it was rare for anybody to be working from home


00:26:23.120 --> 00:26:25.680
in our company, even though the work is software


00:26:25.680 --> 00:26:26.920
for the most part.


00:26:26.920 --> 00:26:29.680
But now we've made sure that everybody,


00:26:29.680 --> 00:26:33.140
I think we have out of like 80 people,


00:26:33.140 --> 00:26:35.820
something like that, we've got like only a handful of people


00:26:35.820 --> 00:26:39.380
that are not set up yet to be able to work remotely.


00:26:39.380 --> 00:26:40.980
I think that's a good change, actually.


00:26:40.980 --> 00:26:41.820
- I do too.


00:26:41.820 --> 00:26:43.780
It's gonna be really interesting to see the knock-on effects.


00:26:43.780 --> 00:26:45.300
I think there's gonna be stuff like that,


00:26:45.300 --> 00:26:47.680
like, oh wait, we actually could work in this way,


00:26:47.680 --> 00:26:50.020
or we could hire people from other places, or whatever.


00:26:50.020 --> 00:26:52.140
It's gonna be interesting outside the just,


00:26:52.140 --> 00:26:53.920
you know, the potential chaos


00:26:53.920 --> 00:26:55.460
of people getting sick and whatnot.


00:26:55.460 --> 00:26:57.560
- This has been like talking about the elephant in the room,


00:26:57.560 --> 00:26:59.420
but it's talking about the virus in the room.


00:26:59.420 --> 00:27:01.500
- Yeah, well, I hope it's not in either of our rooms.


00:27:01.500 --> 00:27:03.100
Let's just put it like that, like right now.


00:27:03.100 --> 00:27:04.100
- Yeah, definitely not.


00:27:04.100 --> 00:27:05.700
There's nobody else in my room.


00:27:05.700 --> 00:27:06.620
I think I'm clean.


00:27:06.620 --> 00:27:09.860
- So speaking of mysteries, how about I tell you a joke?


00:27:09.860 --> 00:27:10.700
- Oh, please.


00:27:10.700 --> 00:27:13.700
- Okay, so let me give you a definition,


00:27:13.700 --> 00:27:14.900
straight out of the dictionary.


00:27:14.900 --> 00:27:17.620
Debugging, pronounced debugging.


00:27:17.620 --> 00:27:19.940
It's a verb, primary definition.


00:27:19.940 --> 00:27:22.260
Being the detective in a crime movie


00:27:22.260 --> 00:27:23.660
where you are also the murderer.


00:27:23.660 --> 00:27:26.020
(laughing)


00:27:26.020 --> 00:27:26.980
- Yeah.


00:27:26.980 --> 00:27:28.320
- That's a good one, right?


00:27:28.320 --> 00:27:30.580
- Yes, you probably get that less


00:27:30.580 --> 00:27:33.180
since you're often coding solo,


00:27:33.180 --> 00:27:36.920
But there's times where I'm like just hot under the collar,


00:27:36.920 --> 00:27:39.920
mad about some bug in the system


00:27:39.920 --> 00:27:42.080
and trying to figure out who did this.


00:27:42.080 --> 00:27:44.560
- Dude, it's time for some version control blame,


00:27:44.560 --> 00:27:47.720
some git blame, some subversion blame.


00:27:47.720 --> 00:27:48.640
- Yeah.


00:27:48.640 --> 00:27:52.080
- No, it's my user, it was me.


00:27:52.080 --> 00:27:53.240
Yeah, I've been there.


00:27:53.240 --> 00:27:57.340
I've been there like, oh my gosh, now what do I do?


00:27:57.340 --> 00:28:00.600
- Definitely, love that.


00:28:00.600 --> 00:28:02.960
- It's good for your humility level though, right?


00:28:02.960 --> 00:28:05.260
- Yeah, and then you just remember that


00:28:05.260 --> 00:28:07.260
next time you're mad at somebody else.


00:28:07.260 --> 00:28:08.100
- Exactly.


00:28:08.100 --> 00:28:10.200
- For doing something boneheaded.


00:28:10.200 --> 00:28:11.640
- Awesome, well, thanks for being here.


00:28:11.640 --> 00:28:12.760
Great to chat with you as always.


00:28:12.760 --> 00:28:14.280
- Thank you, bye. - Yep, bye.


00:28:14.280 --> 00:28:16.000
Thank you for listening to Python Bytes.


00:28:16.000 --> 00:28:18.480
Follow the show on Twitter via @pythonbytes.


00:28:18.480 --> 00:28:21.520
That's Python Bytes as in B-Y-T-E-S.


00:28:21.520 --> 00:28:24.720
And get the full show notes at pythonbytes.fm.


00:28:24.720 --> 00:28:26.320
If you have a news item you want featured,


00:28:26.320 --> 00:28:28.780
just visit pythonbytes.fm and send it our way.


00:28:28.780 --> 00:28:31.660
We're always on the lookout for sharing something cool.


00:28:31.660 --> 00:28:34.940
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:28:34.940 --> 00:28:37.980
Thank you for listening and sharing this podcast with your friends and colleagues.

