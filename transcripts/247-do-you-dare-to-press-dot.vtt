
00:00:00.000 --> 00:00:02.000
Hey there, thanks for listening.


00:00:02.000 --> 00:00:05.260
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.260 --> 00:00:10.460
to you by us over at TalkBython Training and Brian through his PyTest book.


00:00:10.460 --> 00:00:15.560
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.560 --> 00:00:17.460
over at TalkBython Training.


00:00:17.460 --> 00:00:21.240
Visit them via pythonbytes.fm/courses.


00:00:21.240 --> 00:00:25.620
And if you're looking to do testing and get better with PyTest, check out Brian's book


00:00:25.620 --> 00:00:28.700
at pythonbytes.fm/pytest.


00:00:28.700 --> 00:00:29.620
by the episode.


00:00:29.620 --> 00:00:31.100
- Hello and welcome to Python Bytes,


00:00:31.100 --> 00:00:33.140
where we deliver Python news and headlines


00:00:33.140 --> 00:00:34.540
directly to your earbuds.


00:00:34.540 --> 00:00:38.860
This is episode 247, recorded August 25th.


00:00:38.860 --> 00:00:39.700
Really?


00:00:39.700 --> 00:00:40.780
Oh, we're almost done.


00:00:40.780 --> 00:00:42.240
And 2021.


00:00:42.240 --> 00:00:43.380
I'm Brian Okken.


00:00:43.380 --> 00:00:44.380
- I'm Michael Kennedy.


00:00:44.380 --> 00:00:45.720
- And I'm Dan Taylor.


00:00:45.720 --> 00:00:48.100
- So Dan, before we jump into things,


00:00:48.100 --> 00:00:49.420
welcome to the show.


00:00:49.420 --> 00:00:52.700
But can you let people know kind of who you are?


00:00:52.700 --> 00:00:53.520
- Yeah, thank you.


00:00:53.520 --> 00:00:54.360
It's great to be here.


00:00:54.360 --> 00:00:55.560
A big fan of the show.


00:00:55.560 --> 00:00:57.160
So I'm Dan Taylor.


00:00:57.160 --> 00:01:01.040
I'm a program manager manager on our Python team.


00:01:01.040 --> 00:01:03.880
So I manage a team of program managers


00:01:03.880 --> 00:01:06.880
that work on our Python developer tools.


00:01:06.880 --> 00:01:09.160
For example, our Python support and Visual Studio Code


00:01:09.160 --> 00:01:10.400
and Visual Studio IDE.


00:01:10.400 --> 00:01:12.800
And we also manage some of our engagements


00:01:12.800 --> 00:01:14.440
with the Python community.


00:01:14.440 --> 00:01:16.320
For example, our sponsorships of PyCon


00:01:16.320 --> 00:01:18.200
and the Python Software Foundation.


00:01:18.200 --> 00:01:19.020
- That's awesome.


00:01:19.020 --> 00:01:21.080
You know something Dan, I thought was pretty interesting.


00:01:21.080 --> 00:01:23.400
I was just watching a talk from Brett Cannon,


00:01:23.400 --> 00:01:26.360
getting ready for an interview I did on Talk Python


00:01:26.360 --> 00:01:28.440
with Xlinga, a lot of stuff going on there.


00:01:28.440 --> 00:01:32.700
But the talk was only from 2018 and Brett went into detail


00:01:32.700 --> 00:01:34.480
describing what VS Code was,


00:01:34.480 --> 00:01:37.120
I was like, Atom or Sublime and all these things.


00:01:37.120 --> 00:01:38.840
It needs no introduction these days, does it?


00:01:38.840 --> 00:01:41.800
- No, no, it's just been amazing watching


00:01:41.800 --> 00:01:44.520
just how much it's grown over the past year


00:01:44.520 --> 00:01:46.360
and it become a household name for people,


00:01:46.360 --> 00:01:48.280
especially in the Python community.


00:01:48.280 --> 00:01:49.120
- Definitely.


00:01:49.120 --> 00:01:52.120
- Well, Michael, how do I keep my computer awake?


00:01:52.120 --> 00:01:54.760
- Well, first you make sure it gets eight hours


00:01:54.760 --> 00:01:55.680
of sleep a day.


00:01:55.680 --> 00:01:57.140
You don't overwork it.


00:01:57.140 --> 00:01:58.380
I know it's work from home,


00:01:58.380 --> 00:01:59.620
so you might be working on it,


00:01:59.620 --> 00:02:01.100
playing on it and watching TV.


00:02:01.100 --> 00:02:01.940
Oh wait, this is not,


00:02:01.940 --> 00:02:03.380
this is a totally different thing.


00:02:03.380 --> 00:02:06.220
So I recently was working on this project


00:02:06.220 --> 00:02:09.020
around some of the courses over at Talk Python Training,


00:02:09.020 --> 00:02:12.140
and I needed to do a bunch of video processing


00:02:12.140 --> 00:02:14.020
and re-encoding for like,


00:02:14.020 --> 00:02:16.580
take the same videos, but make them smaller.


00:02:16.580 --> 00:02:19.020
So I wrote some really cool Python code to go through


00:02:19.020 --> 00:02:22.280
and pick the source videos and do all this analysis


00:02:22.280 --> 00:02:24.620
and re-encode it into a bunch of formats.


00:02:24.620 --> 00:02:27.300
You know, that takes like five hours for one of our courses.


00:02:27.300 --> 00:02:31.660
And if my computer goes to sleep, it's going to take more than five hours.


00:02:31.660 --> 00:02:33.980
I got to go and like, keep waking the thing up again.


00:02:33.980 --> 00:02:34.280
Right.


00:02:34.280 --> 00:02:35.960
Well, what can I do?


00:02:35.960 --> 00:02:38.060
I could go into the settings and say, you know what?


00:02:38.060 --> 00:02:39.000
Don't do that.


00:02:39.000 --> 00:02:42.440
Just don't go to sleep right now, but then maybe I'll forget.


00:02:42.440 --> 00:02:43.100
Who knows?


00:02:43.100 --> 00:02:47.620
It would be cool if just while my Python code was running, it would stay awake.


00:02:47.620 --> 00:02:50.860
And then it would potentially not stay awake when it was done.


00:02:50.860 --> 00:02:51.660
Wouldn't that be nice?


00:02:51.660 --> 00:02:52.360
Yeah.


00:02:52.360 --> 00:02:52.980
Yeah.


00:02:53.000 --> 00:02:56.200
So I found this cool library called WakePi,


00:02:56.200 --> 00:03:00.520
and the implementation of using this is ridiculously easy.


00:03:00.520 --> 00:03:03.480
You just say from WakePi import keep awake,


00:03:03.480 --> 00:03:05.000
and then you create a context manager.


00:03:05.000 --> 00:03:07.840
With keep awake, do the stuff you want it to do


00:03:07.840 --> 00:03:10.520
while the computer doesn't go to sleep, done.


00:03:10.520 --> 00:03:11.360
That's cool, huh?


00:03:11.360 --> 00:03:12.180
- Seems easy.


00:03:12.180 --> 00:03:13.020
- Yeah, it's super easy.


00:03:13.020 --> 00:03:14.080
It works cross-platform.


00:03:14.080 --> 00:03:15.480
It works on Windows.


00:03:15.480 --> 00:03:16.760
It works on Linux.


00:03:16.760 --> 00:03:18.880
It doesn't really work on Mac OS 'cause there's a bug,


00:03:18.880 --> 00:03:20.880
but it's supposed to work on Mac OS,


00:03:20.880 --> 00:03:22.600
which is where I'm running this right now.


00:03:22.600 --> 00:03:25.000
So that's kind of unfortunate, wouldn't you say?


00:03:25.000 --> 00:03:27.400
(laughing)


00:03:27.400 --> 00:03:30.400
It turns out it's one of these strings


00:03:30.400 --> 00:03:33.080
versus bytes weirdness.


00:03:33.080 --> 00:03:36.080
So I actually decided this is kind of cool.


00:03:36.080 --> 00:03:38.440
So what I'm gonna do is I'm gonna create a PR.


00:03:38.440 --> 00:03:41.840
There's a PR that says it doesn't work on Python 3,


00:03:41.840 --> 00:03:42.680
but you know what?


00:03:42.680 --> 00:03:44.840
And here's like the error if anyone cares,


00:03:44.840 --> 00:03:47.760
you get this bytes like object is required, not string.


00:03:47.760 --> 00:03:48.920
So I submitted a PR.


00:03:48.920 --> 00:03:52.400
The PR is not yet addressed or responded to


00:03:52.400 --> 00:03:53.240
or anything.


00:03:53.240 --> 00:03:55.600
So if you wanna use this for the time being,


00:03:55.600 --> 00:03:58.480
I can really only on macOS, to be clear,


00:03:58.480 --> 00:04:00.460
I can only recommend it off of my branch


00:04:00.460 --> 00:04:01.600
until you see that PR merge,


00:04:01.600 --> 00:04:03.120
'cause it won't work at all.


00:04:03.120 --> 00:04:05.200
But if you're using Windows or Linux,


00:04:05.200 --> 00:04:06.520
I think it'll just work straight away.


00:04:06.520 --> 00:04:08.940
And it's interesting if you actually dig into it,


00:04:08.940 --> 00:04:11.460
I kind of imagined it would just be doing the same thing.


00:04:11.460 --> 00:04:14.160
But if you dig into it, like in the Mac version,


00:04:14.160 --> 00:04:16.640
there's literally a command you can type on,


00:04:16.640 --> 00:04:18.640
this is awesome, you can type on the terminal,


00:04:18.640 --> 00:04:20.120
you can type caffeinate.


00:04:20.120 --> 00:04:23.380
that'll keep your OS from going to sleep


00:04:23.380 --> 00:04:25.280
if you just run that on the terminal.


00:04:25.280 --> 00:04:29.360
If you type a dash D, it'll keep the display on,


00:04:29.360 --> 00:04:32.520
things like that, it won't let the screen go to sleep.


00:04:32.520 --> 00:04:34.480
But over on say Windows,


00:04:34.480 --> 00:04:36.320
it does a bunch of tweaking with threads.


00:04:36.320 --> 00:04:40.080
So what it'll do is like go and set its current thread


00:04:40.080 --> 00:04:42.760
to be like continuous system required,


00:04:42.760 --> 00:04:45.880
display required as a bunch of bitwise flags.


00:04:45.880 --> 00:04:48.880
And then over on Linux, it uses what else?


00:04:48.880 --> 00:04:50.140
that uses something completely different.


00:04:50.140 --> 00:04:52.380
It runs mask and unmask,


00:04:52.380 --> 00:04:54.180
which I don't actually know what that does.


00:04:54.180 --> 00:04:55.700
I suspect it keeps it awake.


00:04:55.700 --> 00:04:58.500
So anyway, it's a pretty cool little project.


00:04:58.500 --> 00:05:01.600
It's very simple, but it also solves the problem


00:05:01.600 --> 00:05:04.100
that I can imagine a ton of people doing data science-y


00:05:04.100 --> 00:05:06.060
like things would run into


00:05:06.060 --> 00:05:08.100
because they wanna do a bunch of processing


00:05:08.100 --> 00:05:09.860
and not have their system go to sleep.


00:05:09.860 --> 00:05:10.820
What do you all think?


00:05:10.820 --> 00:05:13.820
- I think I'm just glad that I know about Caffeinate now


00:05:13.820 --> 00:05:15.220
'cause that's cool.


00:05:15.220 --> 00:05:17.180
- Yeah, if you want to keep your Mac awake,


00:05:17.180 --> 00:05:19.540
you literally just have to go over and type caffeinate


00:05:19.540 --> 00:05:20.380
on the terminal.


00:05:20.380 --> 00:05:22.620
You don't have to have Python or any of those kinds of things


00:05:22.620 --> 00:05:24.980
but if you want your Python code to control it,


00:05:24.980 --> 00:05:28.540
this thing is basically subprost juggling that command.


00:05:28.540 --> 00:05:30.340
- Yeah, I can imagine if you're writing code


00:05:30.340 --> 00:05:32.820
that's scraping websites, looking for updates


00:05:32.820 --> 00:05:34.420
and things like that, you really wouldn't want


00:05:34.420 --> 00:05:36.980
your computer to go to sleep and I always find myself


00:05:36.980 --> 00:05:38.420
messing around in all the power settings


00:05:38.420 --> 00:05:39.460
and maxing things out.


00:05:39.460 --> 00:05:40.440
- Exactly.


00:05:40.440 --> 00:05:41.460
- So this is nice.


00:05:41.460 --> 00:05:43.140
- Yeah, yeah, very cool, very cool.


00:05:43.140 --> 00:05:45.020
Awesome, well, that's it for that one, Brian.


00:05:45.020 --> 00:05:45.860
- Cool.


00:05:45.860 --> 00:05:46.680
- Off to you.


00:05:46.680 --> 00:05:51.320
What do we got next? We have, oh, how to create a great Stack Overflow question.


00:05:51.320 --> 00:05:52.920
Actually, this is great.


00:05:52.920 --> 00:05:58.680
>> Yeah, Stack Overflow just sold for like $1.4 billion. It's quite the site.


00:05:58.680 --> 00:06:00.760
>> Really? Who did it sell to? Do you know?


00:06:00.760 --> 00:06:02.920
>> No, I don't remember. It's a company I hadn't heard of.


00:06:02.920 --> 00:06:03.560
>> I didn't miss that.


00:06:03.560 --> 00:06:10.440
>> Anyway, so I don't really actually, of course, when I Google stuff,


00:06:10.440 --> 00:06:13.400
I get a bunch of Stack Overflow answers and I've utilized it.


00:06:14.360 --> 00:06:19.400
I like tried to play the whole game for a little while of like trying to get stack overflow points and stuff


00:06:19.400 --> 00:06:25.720
And then I realized yeah, this just isn't my thing, but it's a thing for a lot of people of like answering this


00:06:25.720 --> 00:06:30.440
But um the reason why I brought this up isn't just to get great answers on stack overflow


00:06:30.440 --> 00:06:32.520
But there is a good trick to that and it's good


00:06:32.520 --> 00:06:40.280
but it's also if you're asking questions really from anybody if you if you send a any sort of expert that you know, like


00:06:40.280 --> 00:06:43.880
maybe if you want to ask a pyramid question to michael or


00:06:43.880 --> 00:06:46.220
or a PyTest question from me.


00:06:46.220 --> 00:06:48.140
These sorts of things,


00:06:48.140 --> 00:06:52.380
this is the same topics apply.


00:06:52.380 --> 00:06:57.680
Let's just jump in. This is from Kevin Markham at Data School.


00:06:57.680 --> 00:07:00.560
Kevin's a great guy. We hang out with him


00:07:00.560 --> 00:07:02.980
sometimes at PyCons and stuff when we had those.


00:07:02.980 --> 00:07:05.640
But the punchline of his article,


00:07:05.640 --> 00:07:10.480
which we'll link to, is you need to write a brief introduction,


00:07:10.480 --> 00:07:14.640
and you want to have self-contained code examples,


00:07:14.640 --> 00:07:19.220
and then detail the expected results and why you want those results.


00:07:19.220 --> 00:07:23.160
Then add any other important notes linked to relevant questions,


00:07:23.160 --> 00:07:26.240
and then also write a title that summarizes the question.


00:07:26.240 --> 00:07:28.060
These all seem obvious,


00:07:28.060 --> 00:07:32.760
so I'm really glad that Kevin went through an example.


00:07:32.760 --> 00:07:34.560
He started with an example that


00:07:34.560 --> 00:07:37.280
one of his students asked him about pandas.


00:07:37.280 --> 00:07:39.440
The question really was about


00:07:39.440 --> 00:07:41.720
data frames and filling in missing values,


00:07:41.720 --> 00:07:46.240
and it had a domain-specific thing that somebody was asking him.


00:07:46.240 --> 00:07:49.320
Then Kevin goes through and


00:07:49.320 --> 00:07:53.400
rewrites the question as a good Stack Overflow question,


00:07:53.400 --> 00:07:54.960
and it's night and day.


00:07:54.960 --> 00:07:57.280
It's amazing to see this.


00:07:57.280 --> 00:07:59.880
I really encourage people to read the article.


00:07:59.880 --> 00:08:05.360
But a couple of things that I really love is converting,


00:08:05.360 --> 00:08:06.720
that he didn't really talk about,


00:08:06.720 --> 00:08:09.160
but convert the example from


00:08:09.160 --> 00:08:13.200
any domain-specific stuff to a toy example.


00:08:13.200 --> 00:08:16.640
That's a good skill to have anyway,


00:08:16.640 --> 00:08:20.140
is to say this problem that I'm having in my code,


00:08:20.140 --> 00:08:22.040
it's really a generic problem.


00:08:22.040 --> 00:08:26.640
How do I make that using a toy example to describe the problem?


00:08:26.640 --> 00:08:28.600
Oftentimes, actually, you can answer


00:08:28.600 --> 00:08:30.980
your own question once you get it into a toy example,


00:08:30.980 --> 00:08:34.760
and you realize, "Oh, I'm overthinking it."


00:08:34.760 --> 00:08:37.360
This is a good first step.


00:08:37.360 --> 00:08:40.240
This is a great thing to see.


00:08:40.240 --> 00:08:44.660
But this is a great example because it's like some architecture problem,


00:08:44.660 --> 00:08:47.580
but then he turns it into colors of toys.


00:08:47.580 --> 00:08:50.480
It's an easier problem to see.


00:08:50.480 --> 00:08:52.700
The other thing is making sure that the example is


00:08:52.700 --> 00:08:54.880
runnable with all the import statements and everything.


00:08:54.880 --> 00:08:58.920
Somebody can just plop it into their own editor and run it to


00:08:58.920 --> 00:09:04.160
see if they can see the same problem and see if they can figure out.


00:09:04.160 --> 00:09:08.240
>> That's good advice. If it's too specific or you don't have the data or it's not


00:09:08.240 --> 00:09:13.680
complete, you have to speculate rather than actually verify you can fix the problem or not.


00:09:13.680 --> 00:09:19.600
>> Yeah. One of the things that I wouldn't have thought of is linking to other questions


00:09:19.600 --> 00:09:24.160
because there's a fear, I think, of moderators and also other people reading it is,


00:09:24.160 --> 00:09:29.440
if it's simple, it's probably already been answered. Did you already look or whatever?


00:09:30.240 --> 00:09:33.920
the act of linking to other answers to say,


00:09:33.920 --> 00:09:36.580
this question over here doesn't really,


00:09:36.580 --> 00:09:41.680
it helps me but it's missing because of this or something.


00:09:41.680 --> 00:09:44.440
Some reason why the other answers.


00:09:44.440 --> 00:09:48.120
That's an interesting take on it just


00:09:48.120 --> 00:09:50.240
to so that people don't dismiss you right away


00:09:50.240 --> 00:09:53.120
as somebody that didn't do any research to begin with.


00:09:53.120 --> 00:09:54.560
>> Yeah, for sure.


00:09:54.560 --> 00:09:56.400
>> Yeah, it's cool. Usually by the time I get to


00:09:56.400 --> 00:09:59.440
Stack Overflow I'm pretty desperate for help.


00:09:59.440 --> 00:10:01.300
And so forming really good questions


00:10:01.300 --> 00:10:04.140
so you get the best answers is really important.


00:10:04.140 --> 00:10:05.300
I really like that.


00:10:05.300 --> 00:10:08.020
Narrowing it down to a reproducible example.


00:10:08.020 --> 00:10:10.540
- Yeah, and people can be mean on Stack Overflow


00:10:10.540 --> 00:10:12.580
and on Reddit and on YouTube


00:10:12.580 --> 00:10:14.020
and other places on the internet.


00:10:14.020 --> 00:10:16.700
But if you show that you've tried,


00:10:16.700 --> 00:10:19.180
I think that will disarm them somewhat.


00:10:19.180 --> 00:10:20.020
- Totally.


00:10:20.020 --> 00:10:21.180
- Right, I mean, I've seen questions like,


00:10:21.180 --> 00:10:23.440
I have this homework question and I can't do my homework.


00:10:23.440 --> 00:10:24.420
Could anyone help?


00:10:24.420 --> 00:10:25.420
And I get that email too.


00:10:25.420 --> 00:10:28.680
And they're like, no, no one can help.


00:10:28.680 --> 00:10:30.320
- No one wants to do your homework for you.


00:10:30.320 --> 00:10:31.560
Yeah, so no one should.


00:10:31.560 --> 00:10:33.840
But if you have a legitimate problem


00:10:33.840 --> 00:10:36.080
or you think you found a legitimate bug


00:10:36.080 --> 00:10:37.880
or there's just no documentation


00:10:37.880 --> 00:10:39.800
and it's clear you've tried,


00:10:39.800 --> 00:10:41.880
I suspect that'll disarm people.


00:10:41.880 --> 00:10:43.080
They may still not be able to help you,


00:10:43.080 --> 00:10:44.860
but at least they won't be mean.


00:10:44.860 --> 00:10:46.300
Hey, Brian, before we move on to the next one,


00:10:46.300 --> 00:10:48.440
I wanna do two quick real-time follow-ups.


00:10:48.440 --> 00:10:53.440
So one, Stack Overflow sold to tech giant ProSUS,


00:10:53.440 --> 00:10:54.800
ProSUS, we've all heard of them,


00:10:54.800 --> 00:10:56.720
for $1.8 billion.


00:10:56.720 --> 00:11:00.320
So that is not messing around.


00:11:00.320 --> 00:11:02.820
That forum site did all right.


00:11:02.820 --> 00:11:05.780
Jill Spolsky and Jeff Atwood did okay.


00:11:05.780 --> 00:11:07.320
And then the other one is,


00:11:07.320 --> 00:11:10.000
unfortunately Dan Heifert out there in the live stream


00:11:10.000 --> 00:11:12.080
said he just ran Caffeinate three times on his Mac


00:11:12.080 --> 00:11:13.400
and he can't get it to sleep


00:11:13.400 --> 00:11:15.320
and it's acting jittery and anxious.


00:11:15.320 --> 00:11:17.840
So I don't really know what we can do about that,


00:11:17.840 --> 00:11:19.680
but maybe we should just go to TikTok.


00:11:19.680 --> 00:11:20.920
What do you think?


00:11:20.920 --> 00:11:21.760
- Yeah, totally.


00:11:21.760 --> 00:11:24.640
So have you ever really wanted to make a quick edit


00:11:24.640 --> 00:11:26.760
to something you've got in a GitHub repo,


00:11:26.760 --> 00:11:28.720
but you're kind of stuck with that rudimentary,


00:11:28.720 --> 00:11:30.840
feels like you're working with Notepad, maybe a little.


00:11:30.840 --> 00:11:33.160
- Yeah, so you click the edit, there's a little edit thing.


00:11:33.160 --> 00:11:35.280
You find the file, you edit it, and then you go in there


00:11:35.280 --> 00:11:38.040
and there's like no help and you just type away.


00:11:38.040 --> 00:11:39.140
Yeah, I do that.


00:11:39.140 --> 00:11:40.320
I don't love it, but I do that.


00:11:40.320 --> 00:11:41.280
- Feels like you're in Notepad.


00:11:41.280 --> 00:11:45.700
Well, GitHub announced GitHub Codespaces recently,


00:11:45.700 --> 00:11:48.260
which is a cloud hosted development environments


00:11:48.260 --> 00:11:50.440
with powerful machines and you have to pay for them.


00:11:50.440 --> 00:11:52.360
But one of the fun bonus features


00:11:52.360 --> 00:11:53.760
that they launched at the same time


00:11:53.760 --> 00:11:56.240
that we only really announced on TikTok


00:11:56.240 --> 00:11:59.980
and other social media is called github.dev.


00:11:59.980 --> 00:12:04.020
So you can actually go to any GitHub repo


00:12:04.020 --> 00:12:07.860
and say, I just wanna edit this GitHub repo that I have here.


00:12:07.860 --> 00:12:09.720
I can just press the dot key


00:12:09.720 --> 00:12:13.200
and that will reopen this GitHub repository


00:12:13.200 --> 00:12:14.760
in something called github.dev.


00:12:14.760 --> 00:12:18.880
So this is an entirely web browser-based version of VS Code


00:12:18.880 --> 00:12:20.040
that's built right into GitHub.


00:12:20.040 --> 00:12:21.440
It works on any GitHub repo.


00:12:22.300 --> 00:12:24.580
And there's no server behind it, it's serverless.


00:12:24.580 --> 00:12:27.020
So there's nothing that you need to pay for here.


00:12:27.020 --> 00:12:29.340
And so it also has some limited functionality


00:12:29.340 --> 00:12:30.260
'cause there's no backend.


00:12:30.260 --> 00:12:33.060
This is all just a front end running in your web browser.


00:12:33.060 --> 00:12:38.700
But what's really cool is that you can come in here


00:12:38.700 --> 00:12:41.080
and you can edit, you can add new files.


00:12:41.080 --> 00:12:44.860
Like I can go in here and add a new Python file


00:12:44.860 --> 00:12:46.160
in the file explorer on the left.


00:12:46.160 --> 00:12:47.700
I can just click and add a new file


00:12:47.700 --> 00:12:50.140
and I can work with this more like I'm used to working


00:12:50.140 --> 00:12:51.780
with a text editor.


00:12:51.780 --> 00:12:56.640
and as I can just say, imports flask, for example.


00:12:56.640 --> 00:13:01.640
And because we've, there's support for different extensions


00:13:01.640 --> 00:13:04.580
that are web enabled that know how to work in this new mode.


00:13:04.580 --> 00:13:07.460
So we've actually added the Python extension recently


00:13:07.460 --> 00:13:11.540
in here, so I can actually get some autocomplete


00:13:11.540 --> 00:13:14.180
from some of the modules.


00:13:14.180 --> 00:13:17.180
So if I say from flask import flask,


00:13:17.180 --> 00:13:20.140
I get the autocomplete for that flask object


00:13:20.140 --> 00:13:23.280
and I can do the typical thing where I can say,


00:13:23.280 --> 00:13:27.280
flask equals name, and I can type app.


00:13:27.280 --> 00:13:29.260
And I get all of this, you know,


00:13:29.260 --> 00:13:32.300
add template filter route, all those in the autocomplete.


00:13:32.300 --> 00:13:36.140
So I can actually get a more real editing experience


00:13:36.140 --> 00:13:37.300
with the productivity,


00:13:37.300 --> 00:13:39.660
the things like that that I'm used to


00:13:39.660 --> 00:13:41.540
when I'm working with text editor.


00:13:41.540 --> 00:13:44.660
But this is all using the storage file system


00:13:44.660 --> 00:13:47.140
from the web browser's local storage,


00:13:47.140 --> 00:13:49.820
as well as the files from the GitHub repo.


00:13:49.820 --> 00:13:53.620
So if, for example, if I go in here and just change


00:13:53.620 --> 00:13:58.620
hello world, hello Python bytes in this code here


00:13:58.620 --> 00:14:01.020
and I hit save on a piece of code


00:14:01.020 --> 00:14:04.100
and then I see I've got source control changes here


00:14:04.100 --> 00:14:06.180
and it's telling me that I can click on that file


00:14:06.180 --> 00:14:10.140
and I can actually see a diff of that file side by side


00:14:10.140 --> 00:14:13.260
and I can just commit that using the source control panel.


00:14:13.260 --> 00:14:14.780
And if I add this commit,


00:14:14.780 --> 00:14:18.140
it'll go directly into my GitHub repo.


00:14:18.140 --> 00:14:19.760
So that's pretty cool.


00:14:19.760 --> 00:14:21.880
- So a lot of the-- - That's amazing.


00:14:21.880 --> 00:14:24.440
I do see right below the source control thing,


00:14:24.440 --> 00:14:27.160
a play debug thing.


00:14:27.160 --> 00:14:30.520
- So that doesn't-- - That doesn't work yet, does it?


00:14:30.520 --> 00:14:31.880
- Yeah, so that's what there's like,


00:14:31.880 --> 00:14:33.920
continue working on code spaces at that point.


00:14:33.920 --> 00:14:35.400
You gotta get a real machine for,


00:14:35.400 --> 00:14:36.240
if you wanna do things like running--


00:14:36.240 --> 00:14:37.580
- I see, it takes you over to the hosted,


00:14:37.580 --> 00:14:39.120
the real hosted version.


00:14:39.120 --> 00:14:40.640
- Yeah, yeah, but there is some,


00:14:40.640 --> 00:14:41.720
we're actually pushing the boundaries


00:14:41.720 --> 00:14:43.600
of what you can do in these web versions


00:14:43.600 --> 00:14:44.600
in some interesting ways.


00:14:44.600 --> 00:14:46.640
So you can get basic syntax highlighting,


00:14:46.640 --> 00:14:49.160
as you saw, auto-complete,


00:14:49.160 --> 00:14:50.800
but there's no Python interpreter.


00:14:50.800 --> 00:14:53.080
So when I go to definition, say,


00:14:53.080 --> 00:14:55.560
I wanna go to definition on this Flask module,


00:14:55.560 --> 00:14:57.080
it just brings up type hints,


00:14:57.080 --> 00:14:59.160
the type hints that we have for Flask.


00:14:59.160 --> 00:15:00.760
- I see, the TypeShed type hints, okay.


00:15:00.760 --> 00:15:01.600
- Yeah, TypeShed type hints.


00:15:01.600 --> 00:15:02.600
- It's still okay though, it's still better


00:15:02.600 --> 00:15:05.820
than like what you get with a normal editor.


00:15:05.820 --> 00:15:06.660
- Yeah, it's pretty cool.


00:15:06.660 --> 00:15:09.360
One kind of bonus thing I wanna throw in here is that,


00:15:09.360 --> 00:15:12.560
so if you go to the extensions tab,


00:15:12.560 --> 00:15:14.000
you'll be able to search


00:15:14.000 --> 00:15:16.820
and you'll see which extensions are web enabled.


00:15:16.820 --> 00:15:19.700
And one of the fun ones that somebody on our team put out


00:15:19.700 --> 00:15:22.300
is this VS Code PyIoDyed one.


00:15:22.300 --> 00:15:23.980
So if you actually open a Jupyter notebook,


00:15:23.980 --> 00:15:26.700
you can run a little bit of Python code


00:15:26.700 --> 00:15:29.820
from these cells here using PyIoDyed.


00:15:29.820 --> 00:15:30.860
So that's pretty neat.


00:15:30.860 --> 00:15:31.700
- Oh, wow.


00:15:31.700 --> 00:15:32.520
- So this is--


00:15:32.520 --> 00:15:33.360
- WebAssembly for the win.


00:15:33.360 --> 00:15:35.420
- Yeah, so that's github.dev.


00:15:35.420 --> 00:15:39.220
I think it's really cool how much more you can do


00:15:39.220 --> 00:15:41.460
right from the browser within GitHub.


00:15:41.460 --> 00:15:42.300
I'm excited to see where this goes.


00:15:42.300 --> 00:15:43.500
- Brian, did you know about this?


00:15:43.500 --> 00:15:45.420
- I didn't, and I was just playing with it


00:15:45.420 --> 00:15:47.940
the background on my own repo.


00:15:47.940 --> 00:15:50.500
I was looking through the extensions,


00:15:50.500 --> 00:15:53.140
and maybe you know off the top of your head, Dan,


00:15:53.140 --> 00:15:56.620
can I get the Vim mode in this extension?


00:15:56.620 --> 00:16:00.700
>> Well, you'll see which ones are.


00:16:00.700 --> 00:16:03.460
If they're highlighted here and not grayed out,


00:16:03.460 --> 00:16:05.860
so this Vim extension works.


00:16:05.860 --> 00:16:08.660
You can see which ones are available.


00:16:08.660 --> 00:16:10.380
It says available in VS Code Web.


00:16:10.380 --> 00:16:11.460
>> You just made Brian's day.


00:16:11.460 --> 00:16:13.140
There's a couple of Vim options.


00:16:13.140 --> 00:16:13.660
>> Yeah.


00:16:13.660 --> 00:16:17.500
>> Yeah. I just can't use any editor without Venmo anymore.


00:16:17.500 --> 00:16:17.820
>> Yeah.


00:16:17.820 --> 00:16:19.380
>> My brain just doesn't work without.


00:16:19.380 --> 00:16:23.500
>> How do you use Google Docs or other editors or anything like that?


00:16:23.500 --> 00:16:24.380
>> What's that?


00:16:24.380 --> 00:16:27.120
>> How do you use Google Docs or some other editor?


00:16:27.120 --> 00:16:32.180
>> I paste into that after I've written the stuff in somewhere else.


00:16:32.180 --> 00:16:34.980
>> Nice. Dan, when I first saw this,


00:16:34.980 --> 00:16:37.300
I was on my GitHub repo and I'm like,


00:16:37.300 --> 00:16:40.100
"Oh, let me just hit dot because it seems like that's too simple,


00:16:40.100 --> 00:16:42.280
but I'll try it." Then boom, it became an editor.


00:16:42.280 --> 00:16:43.800
I'm like, oh my God, this is awesome.


00:16:43.800 --> 00:16:45.440
And then I went into the settings


00:16:45.440 --> 00:16:46.760
and I put it into dark mode


00:16:46.760 --> 00:16:48.920
and I changed the font size and all the font family.


00:16:48.920 --> 00:16:51.380
And I'm like, oh, this is nice.


00:16:51.380 --> 00:16:52.800
Like this is a really cool.


00:16:52.800 --> 00:16:54.200
- Yeah, I'm excited about it.


00:16:54.200 --> 00:16:56.120
Let me throw one more bonus in here.


00:16:56.120 --> 00:16:59.800
So if I change this to say,


00:16:59.800 --> 00:17:02.140
edit this a Jupyter notebook cell here.


00:17:02.140 --> 00:17:06.240
And if I go into the diff of,


00:17:06.240 --> 00:17:07.560
if I go into the source control panel


00:17:07.560 --> 00:17:09.640
after editing this Jupyter notebook cell,


00:17:09.640 --> 00:17:12.360
I can actually see a real diff side by side


00:17:12.360 --> 00:17:13.840
with those cells.


00:17:13.840 --> 00:17:16.600
So that's something cool you can do


00:17:16.600 --> 00:17:21.320
without having to install a full editor and things locally.


00:17:21.320 --> 00:17:22.160
- Very cool.


00:17:22.160 --> 00:17:24.240
Yeah, and it's a nice diff of the cell contents,


00:17:24.240 --> 00:17:27.120
not like the JSON crazy diff.


00:17:27.120 --> 00:17:32.120
- Yeah, you get the left, right with red, green, add, remove.


00:17:32.120 --> 00:17:34.640
Yeah, and the outputs are squashed.


00:17:34.640 --> 00:17:35.800
So you're not seeing a bunch of,


00:17:35.800 --> 00:17:36.800
if you diff a notebook,


00:17:36.800 --> 00:17:40.640
you'll see a bunch of XML and JSON being removed and added.


00:17:40.640 --> 00:17:42.360
This is more of that rich.


00:17:42.360 --> 00:17:47.860
- Take all of the various encoding language storage formats


00:17:47.860 --> 00:17:49.720
and then jam them all together and then diff that.


00:17:49.720 --> 00:17:50.540
That's fun.


00:17:50.540 --> 00:17:51.380
Yeah, no, this is awesome.


00:17:51.380 --> 00:17:52.400
This is a great view.


00:17:52.400 --> 00:17:54.000
- Click it, I'm gonna use it.


00:17:54.000 --> 00:17:55.120
- Indeed.


00:17:55.120 --> 00:17:56.840
- So one of the things that I don't really edit


00:17:56.840 --> 00:17:58.880
on in GitHub very much,


00:17:58.880 --> 00:18:01.220
what happens like once you're done?


00:18:01.220 --> 00:18:04.440
Does it create a merge request or just edit it in place?


00:18:04.440 --> 00:18:07.280
- It makes a commit directly to the repository.


00:18:07.280 --> 00:18:10.600
So I can just throw that right in there.


00:18:10.600 --> 00:18:11.440
And--


00:18:11.440 --> 00:18:12.280
- So you have to have,


00:18:12.280 --> 00:18:14.160
obviously you have to have permissions.


00:18:14.160 --> 00:18:15.120
You have to be one of the people


00:18:15.120 --> 00:18:18.600
that can commit directly to that branch, right?


00:18:18.600 --> 00:18:19.540
- Yeah, this is great.


00:18:19.540 --> 00:18:21.040
I was so delighted when I saw it.


00:18:21.040 --> 00:18:22.840
So I'm gonna definitely use this.


00:18:22.840 --> 00:18:23.680
- Yeah.


00:18:23.680 --> 00:18:24.500
- Nice.


00:18:24.500 --> 00:18:25.780
All right, Brian, am I up on the next one?


00:18:25.780 --> 00:18:26.960
- You are.


00:18:26.960 --> 00:18:28.920
- All right on, let's move on to it.


00:18:28.920 --> 00:18:31.560
Okay, I'm resisting the temptation to hit dot


00:18:31.560 --> 00:18:33.640
and play around with the wake pie.


00:18:33.640 --> 00:18:35.980
Instead, let me take you over here.


00:18:35.980 --> 00:18:37.420
So we go to Python.


00:18:37.420 --> 00:18:38.720
That's not Python bytes.


00:18:38.720 --> 00:18:40.320
Close, but not exactly.


00:18:40.320 --> 00:18:42.840
Gosh, man, don't even, why did I type com?


00:18:42.840 --> 00:18:44.300
I've never, hold on.


00:18:44.300 --> 00:18:47.320
Python bytes.fm, that's our domain.


00:18:47.320 --> 00:18:48.880
So we're live streaming right now, by the way,


00:18:48.880 --> 00:18:50.720
if you didn't notice.


00:18:50.720 --> 00:18:51.560
If you go over here,


00:18:51.560 --> 00:18:54.040
notice I've got Firefox that I'm using,


00:18:54.040 --> 00:18:55.560
and it has this little shield.


00:18:55.560 --> 00:18:57.760
And almost anything you go to,


00:18:57.760 --> 00:18:59.040
man, I wanna go to a news site,


00:18:59.040 --> 00:19:00.240
but let's go to CNN.


00:19:00.240 --> 00:19:01.400
And you'll come over here,


00:19:01.400 --> 00:19:05.640
and you'll see a bunch of stuff up here getting blocked,


00:19:05.640 --> 00:19:08.560
like social media trackers, tracking content,


00:19:08.560 --> 00:19:09.440
like look at that.


00:19:09.440 --> 00:19:13.360
That's a ridiculous amount of gross Google Analytics,


00:19:13.360 --> 00:19:17.060
Google Tag Services, Rubicon Project,


00:19:17.060 --> 00:19:19.640
US East apparently, like that's bad, right?


00:19:19.640 --> 00:19:20.840
So I've done a lot of work,


00:19:20.840 --> 00:19:23.980
get us away from retargeting and tracking,


00:19:23.980 --> 00:19:26.160
and we have no known trackers.


00:19:26.160 --> 00:19:27.000
Now I'm running a VPN,


00:19:27.000 --> 00:19:29.760
which probably blocked a bunch of the ones off of CNN.


00:19:29.760 --> 00:19:33.120
So that was the ones that got through the blocking and stuff.


00:19:33.120 --> 00:19:37.560
So it's really nice to not have all that stuff


00:19:37.560 --> 00:19:39.040
and let people come visit the site


00:19:39.040 --> 00:19:40.640
and know that we're not retargeting them,


00:19:40.640 --> 00:19:42.700
we're not tracking them, we're not doing stuff.


00:19:42.700 --> 00:19:44.600
We're just giving them a podcast


00:19:44.600 --> 00:19:46.580
or same thing over on Talk Python Training


00:19:46.580 --> 00:19:48.200
or Talk Python or whatever.


00:19:48.200 --> 00:19:50.320
You go there, you get the content.


00:19:50.320 --> 00:19:53.400
We offer things like a podcast with ads


00:19:53.400 --> 00:19:54.800
that people can take and that's enough.


00:19:54.800 --> 00:19:57.080
We don't need to like follow you around


00:19:57.080 --> 00:19:59.240
for all sorts of creepy reasons, right?


00:19:59.240 --> 00:20:02.840
The drawback is we don't have a lot of analytics, right?


00:20:02.840 --> 00:20:05.640
We can get a sense about like download numbers


00:20:05.640 --> 00:20:08.120
and things like that, but we can't report like,


00:20:08.120 --> 00:20:10.920
well, in the last hour, since we talked about this thing,


00:20:10.920 --> 00:20:12.800
here's the traffic, can we?


00:20:12.800 --> 00:20:14.520
Or would we?


00:20:14.520 --> 00:20:17.640
So Junction Apps over on Twitter said,


00:20:17.640 --> 00:20:18.760
"Hey, you know what?


00:20:18.760 --> 00:20:22.160
I heard you going on and on about the retargeting


00:20:22.160 --> 00:20:24.280
of all these places and how you dropped it.


00:20:24.280 --> 00:20:26.680
Have you heard about GoAccess.io?


00:20:26.680 --> 00:20:28.680
Have either of you heard about this thing?"


00:20:28.680 --> 00:20:32.280
- No, I hadn't either, but check it out is super cool.


00:20:32.280 --> 00:20:37.120
So what it is, is it is a Google Analytics like service


00:20:37.120 --> 00:20:39.080
that you install on your server.


00:20:39.080 --> 00:20:42.000
And what it does, if I can put this image in a tab


00:20:42.000 --> 00:20:43.080
so it doesn't go away.


00:20:43.080 --> 00:20:46.920
What it does is it looks and tails your logs


00:20:46.920 --> 00:20:49.560
and gives you real time analytics on your logs


00:20:49.560 --> 00:20:53.680
rather than by looking at going through JavaScript


00:20:53.680 --> 00:20:54.920
and hooking into people's browsers.


00:20:54.920 --> 00:20:56.880
So no tracking, none of that stuff,


00:20:56.880 --> 00:21:00.120
but you can come over here and in your terminal,


00:21:00.120 --> 00:21:03.960
run it and get a real time view of your traffic,


00:21:03.960 --> 00:21:06.040
your visitors, all the kind of stuff you would expect


00:21:06.040 --> 00:21:08.960
from Google Analytics, visually as a graph like thing


00:21:08.960 --> 00:21:10.680
in your terminal.


00:21:10.680 --> 00:21:11.720
Interesting, huh?


00:21:11.720 --> 00:21:12.560
- It's really cool.


00:21:12.560 --> 00:21:14.760
- Yes, what kind of information are you getting?


00:21:14.760 --> 00:21:16.380
- Well, probably the easiest way to find out


00:21:16.380 --> 00:21:18.480
is they have a web view and have the terminal view.


00:21:18.480 --> 00:21:21.920
And the web view is really generate a HTML file


00:21:21.920 --> 00:21:23.000
and then just request it.


00:21:23.000 --> 00:21:25.280
So there's not like a web server type thing.


00:21:25.280 --> 00:21:26.760
But you go over here and click.


00:21:26.760 --> 00:21:28.540
It says here, I'll give you the features real quick,


00:21:28.540 --> 00:21:29.620
then open up the demo.


00:21:29.620 --> 00:21:33.060
It says fast real-time millisecond based,


00:21:33.060 --> 00:21:35.260
you know, latency updates written in C,


00:21:35.260 --> 00:21:37.500
only uses in cursors as dependencies,


00:21:37.500 --> 00:21:39.180
works on almost all the formats,


00:21:39.180 --> 00:21:41.780
Nginx amongst the others.


00:21:41.780 --> 00:21:43.780
Just set the log format and run it on your log,


00:21:43.780 --> 00:21:46.920
got the terminal and the UI, the web UI bit.


00:21:46.920 --> 00:21:48.840
So if you go over here, you can see,


00:21:48.840 --> 00:21:50.780
like look at this off of just the log files.


00:21:50.780 --> 00:21:53.540
So you can see things like here, I'll pull them up.


00:21:53.540 --> 00:21:54.700
So you can go over and say,


00:21:54.700 --> 00:21:57.080
well, what are the referring URLs?


00:21:57.080 --> 00:22:01.320
Let me make that small so you can kind of see in here.


00:22:01.320 --> 00:22:03.640
Unfortunately, here's the referring URLs.


00:22:03.640 --> 00:22:04.800
So you can see in this example,


00:22:04.800 --> 00:22:07.840
they were, you know, shop, internet, whatever, right?


00:22:07.840 --> 00:22:09.080
These little, it's a fake site,


00:22:09.080 --> 00:22:11.720
but you can come over here and like actually see graphs


00:22:11.720 --> 00:22:14.680
as well as like grids and pages.


00:22:14.680 --> 00:22:16.320
So like think Google Analytics,


00:22:16.320 --> 00:22:18.960
but if you run a site and you can point this


00:22:18.960 --> 00:22:21.940
against your logs and get real time information


00:22:21.940 --> 00:22:24.480
in the terminal or as in this web view.


00:22:24.480 --> 00:22:26.160
And yeah, it's pretty neat.


00:22:26.160 --> 00:22:28.480
- And so do you have to install anything


00:22:28.480 --> 00:22:31.120
or do you just run this and it finds the logs on your system


00:22:31.120 --> 00:22:32.800
and pulls it all together?


00:22:32.800 --> 00:22:35.960
- Yeah, you do have to install, let's see here.


00:22:35.960 --> 00:22:38.920
So there's a getting started


00:22:38.920 --> 00:22:40.240
and it says the way to get started


00:22:40.240 --> 00:22:43.440
probably to use a package manager for your Linux machine


00:22:43.440 --> 00:22:44.920
if you're running on Linux,


00:22:44.920 --> 00:22:47.400
or you can get a Docker image and you run it.


00:22:47.400 --> 00:22:50.200
And then what you do is you just simply run the command


00:22:50.200 --> 00:22:53.640
against your log file and tell it what format


00:22:53.640 --> 00:22:55.820
and boom, off it goes.


00:22:55.820 --> 00:22:58.540
So you could set it up as a like a cron job or something


00:22:58.540 --> 00:23:01.060
that will then generate the HTML file


00:23:01.060 --> 00:23:02.860
and you could just refresh that, you know,


00:23:02.860 --> 00:23:05.860
however often you want to, or run the terminal one.


00:23:05.860 --> 00:23:10.500
- You could run it once a day too and save the report.


00:23:10.500 --> 00:23:13.680
- Exactly, yeah, you don't need real time, real time.


00:23:13.680 --> 00:23:16.100
You need just, yeah, sort of how's the day going


00:23:16.100 --> 00:23:16.940
or something like that.


00:23:16.940 --> 00:23:18.060
How was yesterday?


00:23:18.060 --> 00:23:20.540
- Right, so like one of the things that I use


00:23:20.540 --> 00:23:21.980
information like this about is


00:23:21.980 --> 00:23:23.380
I don't really wanna track users.


00:23:23.380 --> 00:23:25.340
I don't care about individual users,


00:23:25.340 --> 00:23:26.660
but I do wanna know,


00:23:26.660 --> 00:23:29.700
like I've got putting out different content on my blog


00:23:29.700 --> 00:23:31.060
or on a podcast,


00:23:31.060 --> 00:23:35.060
which ones are resonating with people?


00:23:35.060 --> 00:23:38.060
- Yes, exactly. - And maybe do more of that.


00:23:38.060 --> 00:23:39.180
- Yep.


00:23:39.180 --> 00:23:43.060
So you can see, like there's a little bunch of options here.


00:23:43.060 --> 00:23:46.560
Burn signs, host, requested files, they call it,


00:23:46.560 --> 00:23:48.420
but it's really just URLs.


00:23:48.420 --> 00:23:49.860
So you go over here,


00:23:49.860 --> 00:23:52.620
and this would tell you sort of the traffic


00:23:52.620 --> 00:23:55.960
across your various pages, right?


00:23:55.960 --> 00:23:57.140
So this would be like your list,


00:23:57.140 --> 00:24:00.440
this requested files URL, so the one you'd want.


00:24:00.440 --> 00:24:02.520
Yeah, so anyway, I haven't set this up yet,


00:24:02.520 --> 00:24:03.720
but it looks pretty neat,


00:24:03.720 --> 00:24:05.760
and it could be worth checking out.


00:24:05.760 --> 00:24:06.580
- Neat.


00:24:06.580 --> 00:24:08.980
- And I guess even you could download your logs


00:24:08.980 --> 00:24:10.560
and not install it on your server


00:24:10.560 --> 00:24:11.400
if you really wanted, right?


00:24:11.400 --> 00:24:12.520
You want this view,


00:24:12.520 --> 00:24:14.440
but you don't actually wanna put it on your server


00:24:14.440 --> 00:24:18.040
because putting stuff on the server, well, you know.


00:24:18.040 --> 00:24:19.160
So you could download it


00:24:19.160 --> 00:24:20.880
and then just run it against your logs locally.


00:24:20.880 --> 00:24:22.080
- And you might be uploading your logs


00:24:22.080 --> 00:24:25.560
to a storage account somewhere to on a cron job.


00:24:25.560 --> 00:24:26.400
- Yeah, exactly.


00:24:26.400 --> 00:24:29.060
You could push the logs out instead of running it there.


00:24:29.060 --> 00:24:30.720
So a bunch of cool ways to use this,


00:24:30.720 --> 00:24:32.200
but if people are running web apps


00:24:32.200 --> 00:24:34.240
and they want more visibility into it,


00:24:34.240 --> 00:24:35.380
this looks like a cool thing.


00:24:35.380 --> 00:24:37.920
So thanks, Junction, for sending that over.


00:24:37.920 --> 00:24:39.200
All right, off to you, Brian.


00:24:39.200 --> 00:24:41.320
- I want to talk about keyboards a little bit.


00:24:41.320 --> 00:24:46.320
So this was a topic recommended by somebody named Blaze,


00:24:46.320 --> 00:24:48.400
Blaze, I think.


00:24:49.280 --> 00:24:53.380
There's a package called kmk.


00:24:53.380 --> 00:24:57.280
It's actually a collection of pieces of software,


00:24:57.280 --> 00:25:01.420
but we're linking to the kmk firmware.


00:25:01.420 --> 00:25:04.320
This is firmware for computer keyboards


00:25:04.320 --> 00:25:07.560
written and configured in CircuitPython.


00:25:07.560 --> 00:25:09.360
Got super excited about this.


00:25:09.360 --> 00:25:11.160
I'm still excited about it.


00:25:11.160 --> 00:25:13.320
The gist of it is,


00:25:14.760 --> 00:25:21.160
if you've got a keyboard that runs a run circuit Python,


00:25:21.160 --> 00:25:26.800
and it's powerful enough to handle your keyboard and stuff.


00:25:26.800 --> 00:25:29.120
So there's a couple of tips in here.


00:25:29.120 --> 00:25:31.680
There's a couple available through Adafruit


00:25:31.680 --> 00:25:35.200
of different boards that would work.


00:25:35.200 --> 00:25:37.320
We'll get into the details a little bit more.


00:25:37.320 --> 00:25:44.000
But basically, you can configure a keyboard with a single Python file.


00:25:44.000 --> 00:25:47.400
It controls both split keyboards,


00:25:47.400 --> 00:25:49.460
two-piece keyboards, and single keyboards.


00:25:49.460 --> 00:25:51.780
You can hook up macros,


00:25:51.780 --> 00:25:54.160
things like chainable macros,


00:25:54.160 --> 00:25:58.760
you can have key sequences built into one key,


00:25:58.760 --> 00:26:02.360
or you can hook it up so that a key hitting multiple time,


00:26:02.360 --> 00:26:05.220
you can hit a particular key three times in a row,


00:26:05.220 --> 00:26:08.720
and you'll have one action versus something else.


00:26:08.720 --> 00:26:11.780
Even controlling under glow and LEDs,


00:26:11.780 --> 00:26:13.480
and backlights, and all that stuff,


00:26:13.480 --> 00:26:16.000
Totally would be fun. I want to use this.


00:26:16.000 --> 00:26:20.320
I don't know how. It seems like a lot of work though.


00:26:20.320 --> 00:26:26.480
We're linking to the project and there's some information here.


00:26:26.480 --> 00:26:28.520
There's some guides on how to get started.


00:26:28.520 --> 00:26:29.980
Then we're also going to run,


00:26:29.980 --> 00:26:38.960
I found somebody that ran this and he's got a video that walks through doing it.


00:26:38.960 --> 00:26:40.280
But the gist of it is,


00:26:40.280 --> 00:26:42.720
is there any keywords that do this right away?


00:26:42.720 --> 00:26:44.720
You've got to take an existing keyboard,


00:26:44.720 --> 00:26:47.400
rip out the existing circuit board and


00:26:47.400 --> 00:26:50.640
replace it with one of the Adafruit boards,


00:26:50.640 --> 00:26:53.440
and then reprogram it.


00:26:53.440 --> 00:26:56.040
If you're the kind of person that's okay with ripping


00:26:56.040 --> 00:26:58.560
the circuit board out of


00:26:58.560 --> 00:27:01.440
your keyboard and replacing it with something else, that'd be great.


00:27:01.440 --> 00:27:03.000
I actually wouldn't mind doing this.


00:27:03.000 --> 00:27:04.040
I think that'd be fun,


00:27:04.040 --> 00:27:08.300
but I'd like to know which keyboards I can do this with and which ones I can't.


00:27:08.300 --> 00:27:10.180
I know there's a huge list of keyboards out there,


00:27:10.180 --> 00:27:14.140
but even just a couple starter kits would be great to hear.


00:27:14.140 --> 00:27:16.360
>> It really works well with this one and here's where


00:27:16.360 --> 00:27:20.280
the CircuitPython board fits in there easily,


00:27:20.280 --> 00:27:23.040
rather than it doesn't really go back in.


00:27:23.040 --> 00:27:25.920
>> Yeah. One of the reasons why I'm bringing this up is I'd love


00:27:25.920 --> 00:27:29.880
somebody from Adafruit or from anybody working on CircuitPython,


00:27:29.880 --> 00:27:33.840
or the KMK team or somebody to maybe put


00:27:33.840 --> 00:27:36.880
a couple more tutorials out to just say,


00:27:36.880 --> 00:27:38.400
"Hey, this is how you do it."


00:27:38.400 --> 00:27:42.520
I'd love it to have an off-the-shelf full keyboard,


00:27:42.520 --> 00:27:44.160
even if it's small or whatever,


00:27:44.160 --> 00:27:47.400
that it said, "Okay, here's how you do it.


00:27:47.400 --> 00:27:49.160
Pull this circuit board out,


00:27:49.160 --> 00:27:50.400
put this other one in,


00:27:50.400 --> 00:27:52.480
it's like $40 on Adafruit,


00:27:52.480 --> 00:27:54.600
and there you go.


00:27:54.600 --> 00:27:59.520
You can try it and here's a sample of file that you would run it,


00:27:59.520 --> 00:28:03.080
run just a normal keyboard usage.


00:28:03.080 --> 00:28:05.480
Now, you can customize it.


00:28:05.480 --> 00:28:08.600
because just getting back to a workable keyboard


00:28:08.600 --> 00:28:10.400
seems already like a lot of work,


00:28:10.400 --> 00:28:11.760
but it still looks fun.


00:28:11.760 --> 00:28:14.040
I'd love to be able to hack a keyboard with Python.


00:28:14.040 --> 00:28:17.040
>> Very cool. Dan, what kind of keyboard do you use?


00:28:17.040 --> 00:28:22.720
>> Well, I'm a big fan of the thin keys,


00:28:22.720 --> 00:28:24.560
the very light travel keys,


00:28:24.560 --> 00:28:26.600
but I got the ergonomic keyboard.


00:28:26.600 --> 00:28:31.280
Thin ergonomic Logitech, not into the mechanical ones.


00:28:31.280 --> 00:28:33.880
>> I've got the Microsoft Sculpt ergonomic,


00:28:33.880 --> 00:28:35.140
which I absolutely love.


00:28:35.140 --> 00:28:39.640
Um, I know Brian's got even more exotic stuff that he's running over there.


00:28:39.640 --> 00:28:40.860
I don't know if I can get mine up here.


00:28:40.860 --> 00:28:42.160
I'll, I'll, I'll do the camera.


00:28:42.160 --> 00:28:44.260
It's like it's mounted to the, no,


00:28:44.260 --> 00:28:46.060
Oh, my junk too.


00:28:46.060 --> 00:28:47.180
I've got a kinesis.


00:28:47.180 --> 00:28:47.700
Yeah.


00:28:47.700 --> 00:28:49.140
The kinesis inverted ones.


00:28:49.140 --> 00:28:50.720
Those are super interesting.


00:28:50.720 --> 00:28:55.100
What I would like to see would be some keyboard manufacturer saying


00:28:55.100 --> 00:28:57.100
we're shipping a keyboard to you.


00:28:57.100 --> 00:29:01.800
Oh, and you can program it with Python and basically do this for you as a package


00:29:01.800 --> 00:29:04.280
thing and just, you know, build it out of these components.


00:29:04.280 --> 00:29:05.040
That'd be fantastic.


00:29:05.040 --> 00:29:06.000
Yeah, that'd be great.


00:29:06.000 --> 00:29:10.800
Well, I think it'd be fun with, with everyone decking out their home offices


00:29:10.800 --> 00:29:15.100
these days, if you could do a little bit of magic light show while you're presenting


00:29:15.100 --> 00:29:17.000
or talking on a call, that would be really cool.


00:29:17.000 --> 00:29:18.240
That'd be fantastic.


00:29:18.240 --> 00:29:18.780
Yeah.


00:29:18.780 --> 00:29:20.760
Hey, Brett Cannon's out there in the live stream.


00:29:20.760 --> 00:29:22.820
Um, Dan, you may have heard of this guy.


00:29:22.820 --> 00:29:30.080
Uh, Pablo, Pablo, Delgado has programmed his keyboard RGB lights to


00:29:30.120 --> 00:29:33.160
color code, the build bot status for CPython.


00:29:33.160 --> 00:29:34.560
I don't know which library uses.


00:29:34.560 --> 00:29:35.400
That's awesome.


00:29:35.400 --> 00:29:37.040
So like it's green if everything's good,


00:29:37.040 --> 00:29:39.520
but it turns red if CI fails or something like that.


00:29:39.520 --> 00:29:40.360
Oh, that's awesome, Brett.


00:29:40.360 --> 00:29:41.320
Thanks for sharing.


00:29:41.320 --> 00:29:42.160
- That'd be cool.


00:29:42.160 --> 00:29:43.680
You know, I never really, I mean,


00:29:43.680 --> 00:29:46.480
when I first saw the LEDs under the keyboards,


00:29:46.480 --> 00:29:48.400
I thought, you know, yeah, gamers like it,


00:29:48.400 --> 00:29:51.600
but I don't think I would probably have a use for it.


00:29:51.600 --> 00:29:52.560
But now I'm jealous.


00:29:52.560 --> 00:29:55.400
I want to light up things on my keyboard.


00:29:55.400 --> 00:29:56.280
It'd be fun.


00:29:56.280 --> 00:29:58.120
- Yeah, especially if you could program them, right?


00:29:58.120 --> 00:29:59.680
Like this example here.


00:29:59.680 --> 00:30:05.000
My mouse sits here and pulsates and changes color, but because it's on a Mac,


00:30:05.000 --> 00:30:07.060
the software doesn't work and I can't do anything with it.


00:30:07.060 --> 00:30:08.800
So it's just annoys me there.


00:30:08.800 --> 00:30:10.880
It's a good mouse otherwise, but anyway.


00:30:10.880 --> 00:30:13.400
So is it a windows only thing or what?


00:30:13.400 --> 00:30:18.600
No, the mouse is perfect on Mac, but the software that lets you customize


00:30:18.600 --> 00:30:21.640
and do interesting things to the colors doesn't work on the Mac.


00:30:21.640 --> 00:30:22.620
Lame.


00:30:22.620 --> 00:30:23.780
Super lame.


00:30:23.780 --> 00:30:24.540
Super lame.


00:30:24.540 --> 00:30:25.360
All right.


00:30:25.360 --> 00:30:29.080
What is not lame is this last thing that Dan has got here.


00:30:29.080 --> 00:30:31.240
because this thing has been blowing up on Twitter


00:30:31.240 --> 00:30:34.320
is all of a day old with like 2000 GitHub stars.


00:30:34.320 --> 00:30:36.000
And I was like, oh, this has got to be covered.


00:30:36.000 --> 00:30:37.360
And then Dan, you were on it.


00:30:37.360 --> 00:30:38.680
- Yeah, I just saw it yesterday.


00:30:38.680 --> 00:30:41.120
And I was like, I have to talk about this.


00:30:41.120 --> 00:30:44.220
So I know that when I've built web apps in the past,


00:30:44.220 --> 00:30:46.840
one of the big frustrations I have is


00:30:46.840 --> 00:30:50.040
that when you want to add something new to your database,


00:30:50.040 --> 00:30:51.920
you need to add it to the SQL queries.


00:30:51.920 --> 00:30:54.220
You need to add something to the backend code.


00:30:54.220 --> 00:30:56.520
You need to add a piece to the API


00:30:56.520 --> 00:31:00.680
that then returns that new object to users.


00:31:00.680 --> 00:31:02.520
And then in your client code, you need to consume it.


00:31:02.520 --> 00:31:04.280
And so there's all this repetition


00:31:04.280 --> 00:31:06.000
that you're doing across your web app


00:31:06.000 --> 00:31:09.240
every time you need to make a change to your data


00:31:09.240 --> 00:31:10.780
or add a new object.


00:31:10.780 --> 00:31:13.200
And that's very error prone as well.


00:31:13.200 --> 00:31:17.680
And so things like SQLAlchemy,


00:31:17.680 --> 00:31:21.800
you can use to write code that interacts with your database.


00:31:21.800 --> 00:31:23.320
And then things like FastAPI,


00:31:23.320 --> 00:31:28.320
you can use Pydantic to return models to your users,


00:31:28.320 --> 00:31:33.160
to your APIs, but then now we had this thing


00:31:33.160 --> 00:31:37.800
where you have SQLAlchemy models and Pydantic models,


00:31:37.800 --> 00:31:40.200
and then you're translating back and forth between them.


00:31:40.200 --> 00:31:45.200
And so Sebastian Ramirez, who just released yesterday


00:31:45.200 --> 00:31:49.640
this new SQL model library, which looks just awesome


00:31:49.640 --> 00:31:51.520
because it actually combines the schema


00:31:51.520 --> 00:31:55.560
for talking to the database and speaking to your API


00:31:55.560 --> 00:31:58.880
into one schema object that you write.


00:31:58.880 --> 00:32:03.040
So what's really cool about this is that,


00:32:03.040 --> 00:32:05.620
so the way you work with this is that you define


00:32:05.620 --> 00:32:09.260
your objects, for example, he's got in the GitHub repo,


00:32:09.260 --> 00:32:13.900
this hero class with an ID name, secret name, age,


00:32:13.900 --> 00:32:16.860
and it's got some of the SQL alchemy type things


00:32:16.860 --> 00:32:20.800
like it's your primary key, the ID is optional,


00:32:20.800 --> 00:32:23.280
but it's defaults to non, it's primary key.


00:32:23.280 --> 00:32:24.240
So what's really cool about it,


00:32:24.240 --> 00:32:28.960
this class is both a SQL alchemy model and a Bidantic model.


00:32:28.960 --> 00:32:31.000
I don't know how he did that.


00:32:31.000 --> 00:32:33.940
He said there's some magic that's going on behind the scenes


00:32:33.940 --> 00:32:36.280
and so what's really cool is that you can use this


00:32:36.280 --> 00:32:38.560
to instantiate your database.


00:32:38.560 --> 00:32:41.880
So you've got this hero class,


00:32:41.880 --> 00:32:43.880
you can create objects in the database


00:32:43.880 --> 00:32:46.320
by going hero one, hero two, hero three,


00:32:46.320 --> 00:32:49.680
equals hero bracket and pass the name,


00:32:49.680 --> 00:32:52.120
secret name, all the fields to the object.


00:32:52.120 --> 00:32:57.120
And you can also return those same objects.


00:32:57.120 --> 00:32:59.000
You can use that same hero class


00:32:59.000 --> 00:33:00.440
and use it in your fast API.


00:33:00.440 --> 00:33:03.760
So you can accept hero objects,


00:33:03.760 --> 00:33:06.520
you can return hero objects.


00:33:06.520 --> 00:33:08.920
And so that's one, you write that one schema


00:33:08.920 --> 00:33:10.880
and you use it in multiple places.


00:33:10.880 --> 00:33:13.320
- Yeah, what you have on the screen here for fast API


00:33:13.320 --> 00:33:17.220
is response model equals the database entity,


00:33:17.220 --> 00:33:21.060
which that then drives the OpenAPI documentation


00:33:21.060 --> 00:33:23.300
in addition to just driving, yeah, exactly.


00:33:23.300 --> 00:33:24.140
You got it right there.


00:33:24.140 --> 00:33:27.260
So you can go there and it's sort of end to end


00:33:27.260 --> 00:33:29.580
the same model, which I think is really great.


00:33:29.580 --> 00:33:31.980
- Yeah, and so you can look at your,


00:33:31.980 --> 00:33:34.500
with FastAPI, if you go to slash docs,


00:33:34.500 --> 00:33:37.220
you get the Swagger UI.


00:33:37.220 --> 00:33:39.300
And so you can see that same schema


00:33:39.300 --> 00:33:41.660
with the ID name, secret name, age.


00:33:41.660 --> 00:33:44.460
And what's really cool about that is that it also has,


00:33:44.460 --> 00:33:47.340
This generates the openAPI.json.


00:33:47.340 --> 00:33:50.220
And so you can use tools like OpenAPI Generator


00:33:50.220 --> 00:33:53.340
to even generate client code in any different language


00:33:53.340 --> 00:33:56.660
that you're using, like Python, JavaScript, Lua.


00:33:56.660 --> 00:34:01.740
And so if you just went back to that original hero class


00:34:01.740 --> 00:34:04.200
and added a new field, you could potentially


00:34:04.200 --> 00:34:07.180
have it show up in all different layers of your application


00:34:07.180 --> 00:34:07.700
with one--


00:34:07.700 --> 00:34:09.660
- Right, including the consuming clients,


00:34:09.660 --> 00:34:12.500
because they could regen off of the JSON schema, right?


00:34:12.500 --> 00:34:13.000
- Yeah.


00:34:13.000 --> 00:34:13.500
Yeah.


00:34:13.500 --> 00:34:19.340
I think that's really cool. And one other really nice thing that Sebastian did here is that he


00:34:19.340 --> 00:34:24.700
really emphasized making sure that in the editors that you have a good experience with autocomplete


00:34:24.700 --> 00:34:32.540
because in the past, stuff like the Django ORM and the SQLAlchemy ORM, the editors have had to


00:34:32.540 --> 00:34:36.860
write custom code to be able to have a good autocomplete experience for that. And so,


00:34:37.580 --> 00:34:44.980
Sebastian used type hints really well throughout the design of this so that as you're returning


00:34:44.980 --> 00:34:49.740
objects from the database, you actually get, you can, once you return that object from


00:34:49.740 --> 00:34:54.700
the database, you actually get autocomplete on it. I can show that here.


00:34:54.700 --> 00:34:59.860
Yeah, that's really cool. Because a lot of times you just get star star KWR, you know,


00:34:59.860 --> 00:35:00.860
like, oh, thanks.


00:35:00.860 --> 00:35:07.020
Yeah. So I got this statement select hero, where hero name equals hero name, and then


00:35:07.020 --> 00:35:11.020
the object that returns, I can go hero. -- sorry.


00:35:11.020 --> 00:35:15.020
>> Put it at the end of the line, maybe. Or the next line.


00:35:15.020 --> 00:35:23.020
>> Yeah. So, I can access all the properties on the hero object. One cool thing about


00:35:23.020 --> 00:35:30.500
how he did this, he used a proposal from Eric Trout, the author of PyRite, called the data


00:35:30.500 --> 00:35:33.860
the class transform that it's this proposal


00:35:33.860 --> 00:35:37.860
that basically you can annotate various objects


00:35:37.860 --> 00:35:40.340
to say that they behave like data classes.


00:35:40.340 --> 00:35:42.580
And so that's kind of the magic that allows


00:35:42.580 --> 00:35:46.260
some of this dynamic behavior to show up in type checkers.


00:35:46.260 --> 00:35:48.780
- I love it because so often you'll do a SQL alchemy query


00:35:48.780 --> 00:35:51.460
or something and what you get back, it's so many layers,


00:35:51.460 --> 00:35:53.540
it's lost what that type is.


00:35:53.540 --> 00:35:54.380
- Yeah.


00:35:54.380 --> 00:35:56.100
- It's like, ah, now I gotta like re-annotate it again.


00:35:56.100 --> 00:35:57.340
- Like a search for everything,


00:35:57.340 --> 00:35:58.660
look at all the different source code


00:35:58.660 --> 00:36:00.740
in my code base and stuff like that.


00:36:00.740 --> 00:36:01.740
This is really cool.


00:36:01.740 --> 00:36:04.500
>> We've got some great comments in the chat.


00:36:04.500 --> 00:36:09.060
Here's one. I swear Sebastian spends


00:36:09.060 --> 00:36:11.260
as much time on his docs as he does his code.


00:36:11.260 --> 00:36:13.180
Amazing talent.


00:36:13.180 --> 00:36:15.260
We were talking about type hints in


00:36:15.260 --> 00:36:17.340
the Azure experience as well.


00:36:17.340 --> 00:36:19.740
Sebastian does a great job with


00:36:19.740 --> 00:36:21.940
the onboarding experience as well as


00:36:21.940 --> 00:36:25.180
the developer experience and a lot of


00:36:25.180 --> 00:36:26.980
large companies could pay attention to what


00:36:26.980 --> 00:36:28.560
this one person is doing,


00:36:28.560 --> 00:36:31.660
making it easy for people to pick up a new tool. It's amazing.


00:36:31.660 --> 00:36:33.720
>> I mean, look at the docs here.


00:36:33.720 --> 00:36:36.620
This looks like a professional team wrote all this stuff.


00:36:36.620 --> 00:36:38.680
This is incredible.


00:36:38.680 --> 00:36:42.080
>> Instead, one very productive guy.


00:36:42.080 --> 00:36:44.680
>> Then Brett, good question.


00:36:44.680 --> 00:36:46.640
I want to know how Sebastian manages to release


00:36:46.640 --> 00:36:49.500
a new very cool project every single year.


00:36:49.500 --> 00:36:52.380
No kidding, man. He has a powerhouse.


00:36:52.380 --> 00:36:55.120
He's changing how we do web development,


00:36:55.120 --> 00:36:58.040
and it's just one person.


00:36:58.040 --> 00:37:00.520
- Yeah, you know, I think I can speak to that


00:37:00.520 --> 00:37:01.560
just a little bit, by the way.


00:37:01.560 --> 00:37:04.640
If you look at the magic of FastAPI,


00:37:04.640 --> 00:37:07.080
you look at what's happening here,


00:37:07.080 --> 00:37:09.720
these are really nice things to work with,


00:37:09.720 --> 00:37:14.400
but they're not from the ground recreations of what they are.


00:37:14.400 --> 00:37:17.960
This takes Pydantic plus SQLAlchemy and makes it better.


00:37:17.960 --> 00:37:21.280
FastAPI takes Starlet and Pydantic and makes them better.


00:37:21.280 --> 00:37:23.680
Right, it's like the recombining of things


00:37:23.680 --> 00:37:25.840
that are already really good into something better.


00:37:25.840 --> 00:37:28.200
- Yeah, and some cool things that come


00:37:28.200 --> 00:37:30.560
as a result of that repackaging.


00:37:30.560 --> 00:37:32.520
So according to Sebastian,


00:37:32.520 --> 00:37:35.220
this should support async database sessions out of the box


00:37:35.220 --> 00:37:37.640
because that's something that SQLAlchemy supports,


00:37:37.640 --> 00:37:40.240
Alembic migrations as well.


00:37:40.240 --> 00:37:42.200
And in theory, it should be possible to integrate


00:37:42.200 --> 00:37:47.100
with PostGIS and TS vectors for doing geo stuff


00:37:47.100 --> 00:37:50.300
and full-text search with Postgres,


00:37:50.300 --> 00:37:52.140
but he says he hasn't tested it yet.


00:37:52.140 --> 00:37:54.380
- Yeah, I have no idea, but potentially,


00:37:54.380 --> 00:37:55.500
async and await as well,


00:37:55.500 --> 00:37:57.300
now that SQLAlchemy supports that.


00:37:57.300 --> 00:37:58.140
- Yep.


00:37:58.140 --> 00:37:58.960
- But again, this is a day old,


00:37:58.960 --> 00:38:01.220
so we haven't really had a chance to dig in it too much.


00:38:01.220 --> 00:38:03.100
I wanna highlight just a couple more comments.


00:38:03.100 --> 00:38:04.380
Savannah on the livestream says,


00:38:04.380 --> 00:38:06.420
"Sebastian's attention to developer experience


00:38:06.420 --> 00:38:07.260
"is so awesome."


00:38:07.260 --> 00:38:08.260
Yeah, I agree.


00:38:08.260 --> 00:38:09.420
Keep it up, Sebastian.


00:38:09.420 --> 00:38:12.800
And Rehan says, "It looks great for a toy case,


00:38:12.800 --> 00:38:15.340
"but people make professional interior systems.


00:38:15.340 --> 00:38:17.280
"Do they really wanna share the same types


00:38:17.280 --> 00:38:20.460
"between their database and their REST API?"


00:38:20.460 --> 00:38:22.020
That's a good question.


00:38:22.020 --> 00:38:23.140
I was thinking about that as well.


00:38:23.140 --> 00:38:24.740
One of the challenges that you can run into


00:38:24.740 --> 00:38:26.020
when you just sort of say,


00:38:26.020 --> 00:38:29.340
well, here's my data model out onto the internet as JSON,


00:38:29.340 --> 00:38:30.780
and then especially taking it back,


00:38:30.780 --> 00:38:32.880
is you can run into like situations


00:38:32.880 --> 00:38:34.860
where you overexpose information


00:38:34.860 --> 00:38:38.980
or you run into a mass assignment type of bugs


00:38:38.980 --> 00:38:42.660
where values get set or you didn't expect them to be set.


00:38:42.660 --> 00:38:45.620
So with Pydantic, you can do things like,


00:38:45.620 --> 00:38:48.220
you have to call to JSON, but you can also,


00:38:48.220 --> 00:38:49.940
or to dict, I can't remember, I think to dict,


00:38:49.940 --> 00:38:53.900
but you explicitly opt in or opt out certain fields.


00:38:53.900 --> 00:38:56.800
So you could do things like that about bringing those in.


00:38:56.800 --> 00:39:00.020
So pretty neat, but yeah,


00:39:00.020 --> 00:39:02.100
you gotta be a little bit careful about that.


00:39:02.100 --> 00:39:03.940
But yeah, very cool stuff.


00:39:03.940 --> 00:39:06.540
- You don't want your password hashes on your user object.


00:39:06.540 --> 00:39:08.420
- Exactly, if you're gonna return your user,


00:39:08.420 --> 00:39:09.920
you don't necessarily wanna exactly return,


00:39:09.920 --> 00:39:12.300
say, the password hash, or God forbid,


00:39:12.300 --> 00:39:13.980
not just the straight password.


00:39:13.980 --> 00:39:17.140
You're not hashing it.


00:39:17.140 --> 00:39:18.980
But that's a bigger problem, but still.


00:39:18.980 --> 00:39:24.900
I wanted to bring up one more thing is his choice of heroes in his example.


00:39:24.900 --> 00:39:25.900
Love these.


00:39:25.900 --> 00:39:29.980
We've got Dead Pond, Spider Boy, and Rusty Man.


00:39:29.980 --> 00:39:30.980
Hilarious.


00:39:30.980 --> 00:39:31.980
Love it.


00:39:31.980 --> 00:39:33.980
Yeah, those are great.


00:39:33.980 --> 00:39:37.060
Well, so those are our six items.


00:39:37.060 --> 00:39:39.100
Do we have any extras?


00:39:39.100 --> 00:39:40.860
Got anything to share?


00:39:40.860 --> 00:39:43.820
Ryan, sometimes I have extra, extra nine times here all about it.


00:39:43.820 --> 00:39:44.820
I got none this time.


00:39:44.820 --> 00:39:45.820
How about you?


00:39:45.820 --> 00:39:46.820
Really?


00:39:46.820 --> 00:39:47.820
I've got like two.


00:39:47.820 --> 00:39:50.600
>> Bring on.


00:39:50.600 --> 00:39:55.520
>> First one I wanted to bring up was a really fun episode.


00:39:55.520 --> 00:39:58.540
People know I also do a podcast called Testing Code.


00:39:58.540 --> 00:40:03.520
Episode 163, it's a talk with


00:40:03.520 --> 00:40:08.100
Stefan Badul about pip install of local directory.


00:40:08.100 --> 00:40:12.880
If you're doing anything where you do the pip install of


00:40:12.880 --> 00:40:15.540
the local directory, definitely check that out,


00:40:15.540 --> 00:40:19.180
or especially if you never knew that you could do that.


00:40:19.180 --> 00:40:24.440
It's a good episode. The other thing I wanted to bring up is,


00:40:24.440 --> 00:40:27.620
it's been like five episodes since I plug my book,


00:40:27.620 --> 00:40:33.340
but Chapter 12 is up.


00:40:33.340 --> 00:40:38.220
One of the things I got questions about for the first edition was,


00:40:38.220 --> 00:40:41.020
the whole book is talking about testing packages,


00:40:41.020 --> 00:40:43.780
and there's a lot more in the Python world than just packages.


00:40:43.780 --> 00:40:45.820
So chapter 12 is a reaction to that.


00:40:45.820 --> 00:40:48.120
It's testing scripts and applications.


00:40:48.120 --> 00:40:49.680
So it's not a pivot.


00:40:49.680 --> 00:40:52.360
If you don't have a pivot, installable package, you can still use


00:40:52.360 --> 00:40:55.920
bytest to test it in chapter 12 directly addresses that.


00:40:55.920 --> 00:40:57.280
So when you bring that up.


00:40:57.280 --> 00:40:57.980
Awesome.


00:40:57.980 --> 00:41:01.620
Alvaro out in the live stream says, how is the second edition testing about going?


00:41:01.620 --> 00:41:01.760
Yeah.


00:41:01.760 --> 00:41:03.280
It looks like chapter 12 is coming along.


00:41:03.280 --> 00:41:03.660
Well done.


00:41:03.660 --> 00:41:05.320
You're basically done, right?


00:41:05.320 --> 00:41:06.920
You're on vacation.


00:41:06.920 --> 00:41:10.720
Well, there were less than 10 chapters in the first book, but now I'm, I'm working


00:41:10.720 --> 00:41:13.780
on chapter 13, planning on 17 altogether.


00:41:13.780 --> 00:41:18.140
Um, it's going to come out in hard copy early next year.


00:41:18.140 --> 00:41:19.360
So super.


00:41:19.360 --> 00:41:21.100
I have one extra you, Dan.


00:41:21.100 --> 00:41:21.740
Yep.


00:41:21.740 --> 00:41:26.180
So one, one cool library that I wanted to share is a type for PI.


00:41:26.180 --> 00:41:29.380
So we've been talking about types a lot lately.


00:41:29.380 --> 00:41:34.140
Seems like it's a, it's a regular topic of conversation and, they, they can


00:41:34.140 --> 00:41:39.020
provide a lot of benefits to your code base and to text editors, like VS code


00:41:39.020 --> 00:41:41.340
or PyCharm.


00:41:41.340 --> 00:41:44.380
But what happens if you want to retrofit or add


00:41:44.380 --> 00:41:46.860
a bunch of types to a code base that's not typed already?


00:41:46.860 --> 00:41:48.620
That's a big, daunting task.


00:41:48.620 --> 00:41:51.180
And so I came across this library


00:41:51.180 --> 00:41:52.940
shared amongst our team.


00:41:52.940 --> 00:41:55.620
And what I thought was really cool about it


00:41:55.620 --> 00:42:00.420
is that it's a state-of-the-art machine learning


00:42:00.420 --> 00:42:01.900
model for inferring types.


00:42:01.900 --> 00:42:03.820
So we've talked about before, hey,


00:42:03.820 --> 00:42:05.780
wouldn't it be cool if we could just go generate


00:42:05.780 --> 00:42:07.620
all the types for all the packages out there


00:42:07.620 --> 00:42:09.500
that we could have great autocomplete on everything.


00:42:09.500 --> 00:42:11.700
But it turns out you can't, because you can't do that


00:42:11.700 --> 00:42:13.360
until you actually run the code and have


00:42:13.360 --> 00:42:14.660
the objects to bind it to.


00:42:14.660 --> 00:42:17.900
And so this machine learning model


00:42:17.900 --> 00:42:21.140
is sort of the latest in a line of attempts


00:42:21.140 --> 00:42:23.660
from different researchers to create a good machine learning


00:42:23.660 --> 00:42:25.900
model for inferring types.


00:42:25.900 --> 00:42:30.500
What I like about it is not only is it sort of best in class


00:42:30.500 --> 00:42:35.180
in terms of its accuracy, is that the author of this machine


00:42:35.180 --> 00:42:38.860
learning model, open sourced the training data set


00:42:38.860 --> 00:42:42.860
with 4.3 million type annotations in it,


00:42:42.860 --> 00:42:43.740
the training code.


00:42:43.740 --> 00:42:46.700
So you can go in and actually use--


00:42:46.700 --> 00:42:48.440
train this on your own code following


00:42:48.440 --> 00:42:50.820
some of these very simple commands to train the model


00:42:50.820 --> 00:42:54.180
and pre-process the data with your own code base.


00:42:54.180 --> 00:42:55.940
Open sourced a VS Code extension,


00:42:55.940 --> 00:42:57.820
so you can actually have developers using it.


00:42:57.820 --> 00:43:00.980
It's not just some, hey, this is our results, QAD,


00:43:00.980 --> 00:43:01.740
go read the paper.


00:43:01.740 --> 00:43:04.820
It's actually something that you can use.


00:43:04.820 --> 00:43:08.600
And so if you're looking at trying to retrofit


00:43:08.600 --> 00:43:10.380
a bunch of types in your code base,


00:43:10.380 --> 00:43:12.080
this is something you might wanna try out.


00:43:12.080 --> 00:43:14.640
Just one sort of quick caveat


00:43:14.640 --> 00:43:16.880
that the sample VS Code extension


00:43:16.880 --> 00:43:18.560
uses the machine learning model


00:43:18.560 --> 00:43:20.680
that's hosted on type4py.com.


00:43:20.680 --> 00:43:23.160
And so if you're not working on an open source project,


00:43:23.160 --> 00:43:26.600
you probably want to fork the extension


00:43:26.600 --> 00:43:29.800
and stand up the machine learning model


00:43:29.800 --> 00:43:32.060
using the web server that he links to.


00:43:32.060 --> 00:43:33.440
- Yeah, that's a good bit of warning,


00:43:33.440 --> 00:43:35.520
- Oh, this looks super cool.


00:43:35.520 --> 00:43:36.560
It seems like one of those things


00:43:36.560 --> 00:43:38.800
you could do a first pass, retrofit it,


00:43:38.800 --> 00:43:40.360
and then go back and check it out,


00:43:40.360 --> 00:43:42.440
run mypy against it.


00:43:42.440 --> 00:43:43.720
You could even go to Pydantic


00:43:43.720 --> 00:43:45.720
and use the validate decorator


00:43:45.720 --> 00:43:46.900
and put that on all the things


00:43:46.900 --> 00:43:49.040
and then run your tests.


00:43:49.040 --> 00:43:51.320
The validate actually verifies the type annotations


00:43:51.320 --> 00:43:53.040
really match the runtime behavior.


00:43:53.040 --> 00:43:55.680
So yeah, a lot of neat things.


00:43:55.680 --> 00:43:56.520
Excellent. - Cool.


00:43:56.520 --> 00:43:59.000
- Brian, did you think that was funny?


00:43:59.000 --> 00:44:01.360
- No, no, not funny at all.


00:44:01.360 --> 00:44:02.360
- This might be funny.


00:44:02.360 --> 00:44:03.520
Wait, we need something funny.


00:44:03.520 --> 00:44:04.000
Yeah.


00:44:04.000 --> 00:44:07.240
So we've been doing a lot of geek and poke lately and yeah,


00:44:07.240 --> 00:44:08.440
this is a really good one.


00:44:08.440 --> 00:44:13.440
So, you know, we talk about testing and we talk about continuous integration.


00:44:13.440 --> 00:44:17.520
If you want to take that, like you go from testing to CI to the next level,


00:44:17.520 --> 00:44:19.960
we're talking continuous delivery, right?


00:44:19.960 --> 00:44:21.680
I'm going to get pushed to the production branch.


00:44:21.680 --> 00:44:24.520
That's going to kick off the CI, which is going to kick off a deployment.


00:44:24.520 --> 00:44:25.680
Glorious, right?


00:44:25.680 --> 00:44:26.240
Yeah.


00:44:26.240 --> 00:44:28.180
Well, we've got a cartoon around it.


00:44:28.180 --> 00:44:31.600
So there's this man and woman developer pair


00:44:31.600 --> 00:44:34.300
and they're just looking like perplexed at each other.


00:44:34.300 --> 00:44:38.400
For five days, I've been doing nothing else


00:44:38.400 --> 00:44:41.140
than trying to deploy this blinking application


00:44:41.140 --> 00:44:42.760
on our production environment.


00:44:42.760 --> 00:44:44.620
Title, continuous deployment.


00:44:44.620 --> 00:44:49.340
That's one way to interpret that.


00:44:49.340 --> 00:44:51.020
- Take it a bit literal.


00:44:51.020 --> 00:44:51.900
- Very literal.


00:44:51.900 --> 00:44:55.580
All right, well, hopefully that was more funny.


00:44:55.580 --> 00:44:58.600
>> I've got a not very good joke,


00:44:58.600 --> 00:45:01.020
but I thought it was funny anyway.


00:45:01.020 --> 00:45:03.160
It was shared to us.


00:45:03.160 --> 00:45:05.640
It was first from Carla,


00:45:05.640 --> 00:45:07.680
not a robot, it's a great handle,


00:45:07.680 --> 00:45:12.520
and told to us by Blue Fiddle Guy also.


00:45:12.520 --> 00:45:15.800
Joke is, if a programmer gets an interview


00:45:15.800 --> 00:45:18.040
because of a recommendation from a friend,


00:45:18.040 --> 00:45:21.360
are they being passed by reference instead of value?


00:45:21.360 --> 00:45:25.200
>> I love it. Definitely passed by reference.


00:45:25.200 --> 00:45:31.760
Definitely. Well, this has been fun. So thanks everybody. Thanks Dan for showing up. Thank you for having me. Yeah. Thanks, Brian. Thanks guys


00:45:31.760 --> 00:45:33.760
Thanks everyone out there. Bye. Bye


00:45:33.760 --> 00:45:38.560
Thanks for listening to Python bites follow the show on Twitter via at Python bites


00:45:38.560 --> 00:45:44.720
That's Python bites as in BYTES get the full show notes over at Python bytes FM


00:45:44.720 --> 00:45:50.080
If you have a news item, we should cover just visit Python bytes FM and click submit in the nav bar


00:45:50.080 --> 00:45:52.200
We're always on the lookout for sharing something cool


00:45:52.200 --> 00:45:57.000
If you want to join us for the live recording, just visit the website and click "Live Stream"


00:45:57.000 --> 00:46:00.360
to get notified of when our next episode goes live.


00:46:00.360 --> 00:46:04.680
That's usually happening at noon Pacific on Wednesdays over at YouTube.


00:46:04.680 --> 00:46:08.160
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:46:08.160 --> 00:46:11.480
Thank you for listening and sharing this podcast with your friends and colleagues.

