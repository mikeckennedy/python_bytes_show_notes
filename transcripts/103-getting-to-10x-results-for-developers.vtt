
00:00:00.000 --> 00:00:05.500
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.500 --> 00:00:10.000
This is episode 103, recorded November 6, 2018.


00:00:10.000 --> 00:00:11.000
I'm Michael Kennedy.


00:00:11.000 --> 00:00:12.000
And I'm Brian Okken.


00:00:12.000 --> 00:00:13.000
Hey Brian, how you doing?


00:00:13.000 --> 00:00:14.000
I am great today.


00:00:14.000 --> 00:00:18.500
Yeah, it's another wonderful day. A lot of cool news in the Python space.


00:00:18.500 --> 00:00:22.000
I have something that I think you all will really like. I'm looking forward to sharing that.


00:00:22.000 --> 00:00:23.000
Cool.


00:00:23.000 --> 00:00:26.000
Yeah, and I know you got some good ones, so I'm looking forward to talking about those as well.


00:00:26.000 --> 00:00:29.040
Well, before we do, let's say thank you to DigitalOcean.


00:00:29.040 --> 00:00:31.640
Check them out at pythonbytes.fm/digitalocean.


00:00:31.640 --> 00:00:35.160
Get $100 free credit for new users.


00:00:35.160 --> 00:00:36.820
I'll tell you more about them later.


00:00:36.820 --> 00:00:39.520
Right now, you've got kind of this magical


00:00:39.520 --> 00:00:42.880
C++ Python combination thing queued up for us, right?


00:00:42.880 --> 00:00:45.920
- I do, and I just, we found out about this


00:00:45.920 --> 00:00:50.920
because a listener, I think it's Sebastian Schrebert,


00:00:50.920 --> 00:00:55.480
wait, Sebastian Schrizard, is it Brizard?


00:00:55.480 --> 00:00:57.120
Sorry about your last name.


00:00:57.120 --> 00:00:59.880
- Thank you, Sebastian, for sending that in.


00:00:59.880 --> 00:01:01.760
Brian, if anyone else wants to send in some news,


00:01:01.760 --> 00:01:04.080
you can also butcher their name


00:01:04.080 --> 00:01:05.680
in honor of them sending that in, right?


00:01:05.680 --> 00:01:07.560
- Yeah, it's a tradition. - As I would as well.


00:01:07.560 --> 00:01:09.120
I do a lot too.


00:01:09.120 --> 00:01:10.240
It's becoming a tradition.


00:01:10.240 --> 00:01:11.080
Thank you, Sebastian.


00:01:11.080 --> 00:01:11.920
All right, tell us about this thing.


00:01:11.920 --> 00:01:14.340
- Well, I think because of the flames in the logo,


00:01:14.340 --> 00:01:17.260
they actually intended to be pronounced Phoenix.


00:01:17.260 --> 00:01:20.080
It's F-E-N-I-C-S.


00:01:20.080 --> 00:01:22.480
It's a project, I'm glad that Sebastian


00:01:22.480 --> 00:01:24.520
sort of translated this for us.


00:01:24.520 --> 00:01:27.680
It's a open source computing platform


00:01:27.680 --> 00:01:31.080
for solving partial differential equations.


00:01:31.080 --> 00:01:32.840
This is actually really cool.


00:01:32.840 --> 00:01:35.160
And I'm gonna quote right from their site.


00:01:35.160 --> 00:01:37.400
"Phoenix enables users to quickly translate


00:01:37.400 --> 00:01:42.040
scientific models into efficient finite element code


00:01:42.040 --> 00:01:46.560
with the high level Python and C++ interfaces


00:01:46.560 --> 00:01:47.920
to help you get started.


00:01:47.920 --> 00:01:50.840
It's got powerful capabilities for experienced programmers,


00:01:50.840 --> 00:01:52.720
but it's easy to get started.


00:01:52.720 --> 00:01:56.040
and it runs on multiple platforms from laptops


00:01:56.040 --> 00:01:58.280
to high-performance clusters.


00:01:58.280 --> 00:02:00.620
And it actually looks really pretty cool


00:02:00.620 --> 00:02:04.020
for anybody dealing with partial differential equations.


00:02:04.020 --> 00:02:06.680
It's a NumFocused-backed project,


00:02:06.680 --> 00:02:09.240
so there's money behind it, which is cool.


00:02:09.240 --> 00:02:11.080
- NumFocus seems like it's everywhere these days.


00:02:11.080 --> 00:02:15.280
- Yeah, well, especially, and it's good to highlight that,


00:02:15.280 --> 00:02:18.040
to say that this is a backed project


00:02:18.040 --> 00:02:20.560
because it's a, these sorts of things,


00:02:20.560 --> 00:02:23.960
you wouldn't want to depend on and then have them go away.


00:02:23.960 --> 00:02:25.840
- Right, some open source projects,


00:02:25.840 --> 00:02:29.000
depending upon them, are kind of like getting a puppy, right?


00:02:29.000 --> 00:02:31.680
They're cute and fun, but then you gotta walk 'em


00:02:31.680 --> 00:02:33.640
and stuff like that if they get dropped


00:02:33.640 --> 00:02:35.000
or don't work the way you want.


00:02:35.000 --> 00:02:38.480
- Yeah, and Sebastian said, "Right off the bat,


00:02:38.480 --> 00:02:41.480
"it looks cool, but there's some features inside


00:02:41.480 --> 00:02:43.880
"that you might not know about right off the bat."


00:02:43.880 --> 00:02:46.800
So I'm gonna quote an email that he sent us.


00:02:46.800 --> 00:02:50.020
He said, "Phoenix is in fact a C++ project


00:02:50.020 --> 00:02:51.860
with a full-featured Python interface,


00:02:51.860 --> 00:02:55.780
the library itself generates C++ code on the fly


00:02:55.780 --> 00:02:58.420
and be called on the fly from Python.


00:02:58.420 --> 00:02:59.700
It's almost magical.


00:02:59.700 --> 00:03:02.300
Under the hood, it uses SWIG


00:03:02.300 --> 00:03:06.180
and recently moved to PyBind11.


00:03:06.180 --> 00:03:09.140
I guess the architecture that was set up


00:03:09.140 --> 00:03:11.060
to achieve this level of automation


00:03:11.060 --> 00:03:13.180
might be useful for other situations.


00:03:13.180 --> 00:03:14.020
- Yeah, so that's crazy.


00:03:14.020 --> 00:03:17.060
You write Python code, this thing writes C++ code,


00:03:17.060 --> 00:03:19.580
and then calls it all dynamically at runtime.


00:03:19.580 --> 00:03:22.300
- Yeah, that's amazing.


00:03:22.300 --> 00:03:25.340
And from the project website,


00:03:25.340 --> 00:03:29.160
being able to develop the algorithm locally


00:03:29.160 --> 00:03:31.300
on whatever computer you're on,


00:03:31.300 --> 00:03:33.260
even a laptop or desktop,


00:03:33.260 --> 00:03:35.640
and then deploying the same code


00:03:35.640 --> 00:03:39.180
to run in parallel on thousands of processes,


00:03:39.180 --> 00:03:41.060
that's just awesome.


00:03:41.060 --> 00:03:43.620
- Yeah, I think there's a lot of cool stuff happening here.


00:03:43.620 --> 00:03:45.260
I mean, not everyone is solving,


00:03:45.260 --> 00:03:48.300
using finite element methods to solve PDEs, right?


00:03:48.300 --> 00:03:49.780
I understand that's a limited group,


00:03:49.780 --> 00:03:52.340
but there's a lot of projects that may find


00:03:52.340 --> 00:03:54.940
what this project is doing interesting


00:03:54.940 --> 00:03:56.460
from a performance perspective


00:03:56.460 --> 00:03:59.700
and a dynamic meets compiled language perspective.


00:03:59.700 --> 00:04:02.580
- Yeah, and it's also one more example


00:04:02.580 --> 00:04:04.900
of problems being solved in Python


00:04:04.900 --> 00:04:08.160
that you wouldn't have thought you could solve with Python


00:04:08.160 --> 00:04:10.860
because they're just take too much


00:04:10.860 --> 00:04:12.700
high-performance computing.


00:04:12.700 --> 00:04:13.860
- That's a super interesting point.


00:04:13.860 --> 00:04:16.820
So often I hear people who are not that familiar with Python


00:04:16.820 --> 00:04:18.100
say, "Well, Python's slow."


00:04:18.100 --> 00:04:19.700
I'm like, hold on.


00:04:19.700 --> 00:04:21.860
What do you mean that Python is slow?


00:04:21.860 --> 00:04:25.500
Like, you have to say doing this operation in Python is slow


00:04:25.500 --> 00:04:27.340
because there's so many variations.


00:04:27.340 --> 00:04:30.220
I mean, it can be, well, Python is slow in CPython,


00:04:30.220 --> 00:04:32.820
so you can use PyPy, but it could be way more interesting.


00:04:32.820 --> 00:04:36.500
Like, well, yes, but you would actually use, say,


00:04:36.500 --> 00:04:40.380
some kind of library that has C-level compilation elements,


00:04:40.380 --> 00:04:44.420
like SQLAlchemy or NumPy or something.


00:04:44.420 --> 00:04:45.980
And so when you actually talk about that,


00:04:45.980 --> 00:04:49.780
like you're doing C, you're not doing Python at the hot spots.


00:04:49.780 --> 00:04:53.740
And then you get way out there with things like Dask and like this and so on.


00:04:53.740 --> 00:04:55.220
And it's pretty awesome.


00:04:55.220 --> 00:04:56.420
>> Yeah, definitely.


00:04:56.420 --> 00:04:57.260
It's neat to see.


00:04:57.260 --> 00:04:59.460
>> You're kind of a fan of regular expressions, aren't you?


00:04:59.460 --> 00:05:01.780
>> Yes, I like regular expressions.


00:05:01.780 --> 00:05:05.580
>> Are you a fan of cursive language, like the fancy calligraphy type stuff?


00:05:05.580 --> 00:05:06.860
Like do you write that way often?


00:05:06.860 --> 00:05:08.100
>> Well, I like it.


00:05:08.100 --> 00:05:10.100
I don't write that way, but.


00:05:10.100 --> 00:05:11.900
>> I don't write it that way either.


00:05:11.900 --> 00:05:16.220
But this next project I want to talk about is,


00:05:16.220 --> 00:05:20.140
its goal I think primarily is to make regular expressions


00:05:20.140 --> 00:05:25.140
more easy to indicate their intent and easier to maintain.


00:05:25.140 --> 00:05:27.820
I like to joke that regular expressions


00:05:27.820 --> 00:05:29.940
are kind of a write-only language.


00:05:29.940 --> 00:05:32.040
You know, you write them but then you can't read them anymore


00:05:32.040 --> 00:05:34.140
but they're magic and they do their thing, right?


00:05:34.140 --> 00:05:37.500
So we got this project called cursive_re.


00:05:37.500 --> 00:05:39.980
And re is of course the regular expression module


00:05:39.980 --> 00:05:41.020
in Python, right?


00:05:41.020 --> 00:05:41.860
- Yeah.


00:05:41.860 --> 00:05:48.500
Chris Patty of podcasting at fame and it's actually created by Bogdan Popa.


00:05:48.500 --> 00:05:52.260
My term to hopefully take a shot at getting the name not too wrong.


00:05:52.260 --> 00:05:57.340
But this is a library for doing regular expressions in modern Python.


00:05:57.340 --> 00:05:59.700
So 3, 6 and above.


00:05:59.700 --> 00:06:07.060
And the idea is instead of writing in the string symbols like you normally would, you


00:06:07.060 --> 00:06:12.900
know, bracket nine, zero dash nine dot, you know, close bracket dot that sort of


00:06:12.900 --> 00:06:18.460
thing. You write in this higher level language of combinators, they call them.


00:06:18.460 --> 00:06:24.820
And then that overrides the operators in Python to generate a regular expression.


00:06:24.820 --> 00:06:29.220
So this is like all sounds kind of wonky and crazy. But if you see in an example,


00:06:29.220 --> 00:06:34.300
it's super clear. So you can go and define say, like a hex color. And the way


00:06:34.300 --> 00:06:40.180
define it as you say I would like to create a you say beginning of line plus


00:06:40.180 --> 00:06:47.180
this hash symbol plus group repeated hex digit or repeated other hex digit


00:06:47.180 --> 00:06:52.580
exactly three times plus end of line and you write it in these things that are


00:06:52.580 --> 00:06:57.980
symbolic of what regular expressions do and they can be you know sort of ordered


00:06:57.980 --> 00:07:02.500
and and together and added together and so on and then if you call the string


00:07:02.500 --> 00:07:05.220
representation of them, you get the actual regular expression.


00:07:05.220 --> 00:07:09.300
Okay, so it's a library to build regular expressions.


00:07:09.300 --> 00:07:11.620
Yeah, it's a library to build regular expressions.


00:07:11.620 --> 00:07:17.520
The way Bogdan describes it is he says, "It's a tiny Python library made up of these combinators


00:07:17.520 --> 00:07:21.620
to help you write regular expressions that you can read and modify six months down the


00:07:21.620 --> 00:07:22.620
line."


00:07:22.620 --> 00:07:29.060
Yeah, yeah, definitely one of the problems with regular expressions is they're terse,


00:07:29.060 --> 00:07:31.500
and that's good and bad.


00:07:31.500 --> 00:07:33.740
They're tutors sometimes.


00:07:33.740 --> 00:07:34.580
- Yeah, sometimes.


00:07:34.580 --> 00:07:35.820
And then the other problem is


00:07:35.820 --> 00:07:38.340
there's a lot of special symbol.


00:07:38.340 --> 00:07:40.900
Regular expressions are basically nothing but symbols.


00:07:40.900 --> 00:07:43.220
They're like a symbol exploded


00:07:43.220 --> 00:07:45.260
and its guts came out all over this text.


00:07:45.260 --> 00:07:46.460
(laughing)


00:07:46.460 --> 00:07:49.500
But the problem is some of those symbols


00:07:49.500 --> 00:07:52.260
have to be escaped if you actually wanna search for them,


00:07:52.260 --> 00:07:53.540
but it's always kinda hard to know,


00:07:53.540 --> 00:07:55.060
well, which ones do I have to escape?


00:07:55.060 --> 00:07:57.260
So it also does things like if you tell it,


00:07:57.260 --> 00:07:59.640
I'm looking for the text of square bracket, square bracket,


00:07:59.640 --> 00:08:03.600
it'll escape properly in regular expression format,


00:08:03.600 --> 00:08:05.920
the text representation of that, right?


00:08:05.920 --> 00:08:07.640
'Cause bracket normally means something else,


00:08:07.640 --> 00:08:10.280
like it's a set of characters or something like that.


00:08:10.280 --> 00:08:11.120
- Yeah.


00:08:11.120 --> 00:08:14.020
- So I really like that it's sort of a safe way as well,


00:08:14.020 --> 00:08:16.560
like it's a more, you talk about what you want


00:08:16.560 --> 00:08:19.240
and if it has to be escaped or whatever, it does.


00:08:19.240 --> 00:08:21.280
So yeah, it's a cool example. - I like this.


00:08:21.280 --> 00:08:22.100
This is great.


00:08:22.100 --> 00:08:22.940
- Yeah? - Yeah.


00:08:22.940 --> 00:08:25.520
- I do too, I can certainly see myself using this


00:08:25.520 --> 00:08:27.040
if I'm writing regular expressions.


00:08:27.040 --> 00:08:28.240
It's great.


00:08:28.240 --> 00:08:30.460
- Speaking of seeing yourself.


00:08:30.460 --> 00:08:32.120
- Seeing yourself, yes.


00:08:32.120 --> 00:08:34.640
Actually, for a long time I've been following


00:08:34.640 --> 00:08:37.560
and paying attention to what Adrian Rosebrock,


00:08:37.560 --> 00:08:40.640
this is even an easy one and I even massacred this.


00:08:40.640 --> 00:08:44.920
Adrian Rosebrock, he has a site called PyImageSearch.


00:08:44.920 --> 00:08:47.840
And essentially Adrian is teaching people


00:08:47.840 --> 00:08:52.120
about OpenCV and Python and actually a lot of AI stuff


00:08:52.120 --> 00:08:55.320
and doing some really cool things with Python


00:08:55.320 --> 00:08:59.660
and like cameras and webcams and stuff,


00:08:59.660 --> 00:09:02.300
and even on Raspberry Pis and stuff,


00:09:02.300 --> 00:09:04.340
and doing lots of neat things.


00:09:04.340 --> 00:09:06.980
And I don't have a particular article to point to,


00:09:06.980 --> 00:09:09.320
we just haven't covered it before, I don't think,


00:09:09.320 --> 00:09:10.800
and people should know about it.


00:09:10.800 --> 00:09:14.740
So Adrian has both paid and free resources


00:09:14.740 --> 00:09:16.700
to teach people all about computer vision,


00:09:16.700 --> 00:09:18.180
and I think he's doing a cool job.


00:09:18.180 --> 00:09:19.520
- Yeah, he's doing a real cool job,


00:09:19.520 --> 00:09:22.140
and there's so many great examples over there.


00:09:22.140 --> 00:09:23.540
I think OpenCV is great,


00:09:23.540 --> 00:09:28.100
And this is probably the best resource for OpenCV and Python Intersected, right?


00:09:28.100 --> 00:09:33.980
I get emails from him every now and then with boxes detecting things running around on videos


00:09:33.980 --> 00:09:35.420
or something like that.


00:09:35.420 --> 00:09:36.420
It's great.


00:09:36.420 --> 00:09:39.700
So if you've got to do anything with computer vision, and you want to use Python to do it,


00:09:39.700 --> 00:09:41.420
and why wouldn't you want that?


00:09:41.420 --> 00:09:42.420
Then this is a cool place, right?


00:09:42.420 --> 00:09:43.420
Yeah.


00:09:43.420 --> 00:09:47.620
And he has some, like, tons of cool projects that he's done over the years of, you know,


00:09:47.620 --> 00:09:53.100
hooking up a Raspberry Pi with a camera to detect people coming to your door and stuff


00:09:53.100 --> 00:09:56.180
like that and it's some cool stuff.


00:09:56.180 --> 00:09:59.700
And then you brought up that he had one of the most successful Kickstarters ever?


00:09:59.700 --> 00:10:04.260
Yeah, he did a Kickstarter called Deep Learning for Computer Vision with Python.


00:10:04.260 --> 00:10:07.740
And yeah, it's definitely one of the most successful Kickstarters ever.


00:10:07.740 --> 00:10:10.420
So if you want to check out that book, that's really good.


00:10:10.420 --> 00:10:13.700
I think he has some videos that are coming along with it, but I linked to the Kickstarter


00:10:13.700 --> 00:10:14.700
as well.


00:10:14.700 --> 00:10:15.700
Yeah, it did okay.


00:10:15.700 --> 00:10:16.700
Okay.


00:10:16.700 --> 00:10:19.040
(laughing)


00:10:19.040 --> 00:10:21.800
- Speaking of doing very, very well,


00:10:21.800 --> 00:10:23.400
I want to tell everyone about DigitalOcean


00:10:23.400 --> 00:10:24.440
before we move on.


00:10:24.440 --> 00:10:26.380
And I decided it's time to think about this


00:10:26.380 --> 00:10:27.400
a little bit differently.


00:10:27.400 --> 00:10:29.320
Think about DigitalOcean and your hosting and stuff


00:10:29.320 --> 00:10:30.160
a little bit differently.


00:10:30.160 --> 00:10:33.180
So, you know, most of us, I think you brought this up,


00:10:33.180 --> 00:10:35.240
you're not Netflix, you're not Google,


00:10:35.240 --> 00:10:36.360
you're not Facebook, right?


00:10:36.360 --> 00:10:37.200
Remember that?


00:10:37.200 --> 00:10:38.020
You're not LinkedIn.


00:10:38.020 --> 00:10:39.840
You don't need these crazy architectures.


00:10:39.840 --> 00:10:43.200
And yet, some of the most popular hosting platforms


00:10:43.200 --> 00:10:46.280
out there, you know, like AWS or Azure,


00:10:46.280 --> 00:10:49.800
They are built with thousands and thousands of knobs


00:10:49.800 --> 00:10:53.400
so that you could be Netflix with 50,000 servers


00:10:53.400 --> 00:10:55.520
running continuous chaos experiments


00:10:55.520 --> 00:10:57.200
and all that crazy stuff, right?


00:10:57.200 --> 00:11:00.720
But if you are actually just building


00:11:00.720 --> 00:11:05.720
what 99.9% of us are, more standard applications,


00:11:05.720 --> 00:11:08.600
then all that stuff is just overhead


00:11:08.600 --> 00:11:09.600
and complexity and cost.


00:11:09.600 --> 00:11:12.160
So you can join companies like Slack, WeWork,


00:11:12.160 --> 00:11:15.760
Docker, GitLab, and of course us over at DigitalOcean


00:11:15.760 --> 00:11:19.720
and pay like five times less than what you would for AWS


00:11:19.720 --> 00:11:21.000
or Azure, right?


00:11:21.000 --> 00:11:21.840
So for example,


00:11:21.840 --> 00:11:24.280
bandwidth is one cent instead of nine per gigabyte.


00:11:24.280 --> 00:11:26.260
Servers are five bucks instead of 50


00:11:26.260 --> 00:11:29.040
or whatever a reserved instance is over at AWS.


00:11:29.040 --> 00:11:31.240
It's not just about price.


00:11:31.240 --> 00:11:32.600
Keep it simple.


00:11:32.600 --> 00:11:33.440
Use what you need.


00:11:33.440 --> 00:11:35.200
Don't have all these crazy,


00:11:35.200 --> 00:11:37.720
crazy features that you probably don't actually need


00:11:37.720 --> 00:11:40.600
'cause you're not building Netflix or Facebook or LinkedIn.


00:11:40.600 --> 00:11:43.960
Anyway, try them out at pythonbytes.fm/digilution.


00:11:43.960 --> 00:11:45.600
Get $100 credit for new users


00:11:45.600 --> 00:11:48.640
and see why we all love it for their infrastructure.


00:11:48.640 --> 00:11:49.720
- Awesome, thanks.


00:11:49.720 --> 00:11:51.000
- Indeed.


00:11:51.000 --> 00:11:55.960
So, Brian, this next one, have you watched this video here


00:11:55.960 --> 00:11:57.200
that I'm about to talk about?


00:11:57.200 --> 00:11:59.600
- I don't think I have, maybe I have.


00:11:59.600 --> 00:12:01.680
- All right, so while we're talking,


00:12:01.680 --> 00:12:03.080
click this and open it up.


00:12:03.080 --> 00:12:03.920
- Okay.


00:12:03.920 --> 00:12:04.740
- And I'll tell people about it,


00:12:04.740 --> 00:12:06.840
and maybe mute your YouTube that's going.


00:12:06.840 --> 00:12:07.680
- Okay.


00:12:07.680 --> 00:12:09.280
- Okay, so this thing that I wanna talk about


00:12:09.280 --> 00:12:11.920
is a visualization of Python development


00:12:11.920 --> 00:12:16.280
from original origin, way back in the day, up till 2012.


00:12:16.280 --> 00:12:19.800
And it's using this underlying system called Gorse,


00:12:19.800 --> 00:12:23.360
G-O-R-S-E, Gorse, I'm guessing.


00:12:23.360 --> 00:12:25.680
And the idea is Gorse is a visualization library


00:12:25.680 --> 00:12:27.480
that visualizes trees and stuff like this,


00:12:27.480 --> 00:12:30.440
like graph trees, not real trees.


00:12:30.440 --> 00:12:32.800
And what you can do is you can point it


00:12:32.800 --> 00:12:35.160
at a source repository.


00:12:35.160 --> 00:12:38.160
That could be SVN, it even supports CVS,


00:12:38.160 --> 00:12:39.640
but Git and Mercurial.


00:12:39.640 --> 00:12:40.640
And you can point it there,


00:12:40.640 --> 00:12:44.480
and it will do a animated over time visualization


00:12:44.480 --> 00:12:46.720
of that source library.


00:12:46.720 --> 00:12:49.400
So not just Python, any of these repositories


00:12:49.400 --> 00:12:50.680
you can point at.


00:12:50.680 --> 00:12:53.280
And it'll have the files as they grow,


00:12:53.280 --> 00:12:54.480
the size of the repository,


00:12:54.480 --> 00:12:56.840
and these little animated characters come in


00:12:56.840 --> 00:12:59.960
and start editing files and interacting with it.


00:12:59.960 --> 00:13:03.120
So if you play this video that we're linking to,


00:13:03.120 --> 00:13:05.760
this is a gorse animation of Python development


00:13:05.760 --> 00:13:07.080
up till 2012.


00:13:07.080 --> 00:13:09.920
And you see it starts out and Guido's cruising around,


00:13:09.920 --> 00:13:11.800
adding little bits, then a few more people come,


00:13:11.800 --> 00:13:14.440
and then if you start skipping farther and farther ahead,


00:13:14.440 --> 00:13:16.280
it gets just like madness at the end,


00:13:16.280 --> 00:13:18.120
like people are swirling all over the place,


00:13:18.120 --> 00:13:20.400
and it's just a really great way to like,


00:13:20.400 --> 00:13:24.220
see the growth of Python visually through animation,


00:13:24.220 --> 00:13:27.720
at least in terms of who's participating in building it.


00:13:27.720 --> 00:13:28.560
What do you think?


00:13:28.560 --> 00:13:30.840
- Yeah, it is cool, and one of the fun things to see


00:13:30.840 --> 00:13:34.020
is that there's sometimes some people


00:13:34.020 --> 00:13:37.400
that just sort of sit around one area, which makes sense,


00:13:37.400 --> 00:13:39.440
and then other people that fly around


00:13:39.440 --> 00:13:42.220
and edit all sorts of stuff.


00:13:42.220 --> 00:13:43.400
- Yeah, it's really interesting, right?


00:13:43.400 --> 00:13:45.760
And you can see people appear and then they'll fade away,


00:13:45.760 --> 00:13:47.200
they'll come and make some contributions


00:13:47.200 --> 00:13:49.280
and then they'll leave the scene.


00:13:49.280 --> 00:13:51.600
So anyway, I think this is really cool


00:13:51.600 --> 00:13:54.120
and there's not a lot to take away from it


00:13:54.120 --> 00:13:55.840
other than it's just nice to appreciate it.


00:13:55.840 --> 00:13:57.200
I would say watch the first minute


00:13:57.200 --> 00:13:59.520
and then just skip minute by minute and watch a little bit


00:13:59.520 --> 00:14:00.660
'cause it's 14 minutes,


00:14:00.660 --> 00:14:02.240
you don't really wanna watch the whole thing.


00:14:02.240 --> 00:14:03.080
- I think I do.


00:14:03.080 --> 00:14:04.360
(laughing)


00:14:04.360 --> 00:14:06.160
- You could just leave it running for the rest of the show.


00:14:06.160 --> 00:14:07.000
- Yeah.


00:14:07.000 --> 00:14:08.560
So here's what I think.


00:14:08.560 --> 00:14:10.080
I call out to the audience.


00:14:10.080 --> 00:14:15.800
One, who wants to build this for 2012 to present on Python?


00:14:15.800 --> 00:14:16.840
Again.


00:14:16.840 --> 00:14:18.960
And I think this would make an amazing lightning talk


00:14:18.960 --> 00:14:21.240
if you built that video, and then you went up there


00:14:21.240 --> 00:14:23.200
and just did a four minute animation.


00:14:23.200 --> 00:14:24.160
Wouldn't that be cool?


00:14:24.160 --> 00:14:27.080
It'd be cool to just have that going on in the background


00:14:27.080 --> 00:14:28.840
while you did some other talk.


00:14:28.840 --> 00:14:29.400
Right, yeah.


00:14:29.400 --> 00:14:33.560
Or run this between sessions at a conference.


00:14:33.560 --> 00:14:34.520
I think it'd be great.


00:14:34.520 --> 00:14:37.640
Anyway, I think people will appreciate checking it out.


00:14:37.640 --> 00:14:39.680
So one of the things, Brian, that you hear a lot


00:14:39.680 --> 00:14:42.180
in software development is that there's often


00:14:42.180 --> 00:14:46.280
a wide range of skills and productivity between developers.


00:14:46.280 --> 00:14:49.680
And I've done a lot of training and interacted with


00:14:49.680 --> 00:14:51.680
literally thousands of people in person.


00:14:51.680 --> 00:14:54.240
And I think it's something of a myth,


00:14:54.240 --> 00:14:57.920
but I think largely there's a lot to this.


00:14:57.920 --> 00:15:00.080
There's some people that just fly and they're just focused,


00:15:00.080 --> 00:15:02.080
and others that just kind of bounce around


00:15:02.080 --> 00:15:04.000
the keyboard randomly.


00:15:04.000 --> 00:15:04.840
What do you think?


00:15:04.840 --> 00:15:06.800
- So I know that it's a bit controversial.


00:15:06.800 --> 00:15:09.720
There is this notion of a 10x developer.


00:15:09.720 --> 00:15:13.400
And often there's a backlash against it also.


00:15:13.400 --> 00:15:15.980
But I think people think of it as like somebody


00:15:15.980 --> 00:15:17.780
that's really 10 times better


00:15:17.780 --> 00:15:20.080
than the average good developer.


00:15:20.080 --> 00:15:21.840
And I don't think that's it at all.


00:15:21.840 --> 00:15:23.580
I think that it's just a notion


00:15:23.580 --> 00:15:25.780
that there is sometimes orders of magnitude


00:15:25.780 --> 00:15:29.880
between the most effective person in a organization


00:15:29.880 --> 00:15:31.600
and the least effective.


00:15:31.600 --> 00:15:34.480
And I don't know how you argue against that.


00:15:34.480 --> 00:15:36.500
If you've ever been at large organizations,


00:15:36.500 --> 00:15:39.920
it just is, at least, maybe it's not 10 times,


00:15:39.920 --> 00:15:42.720
but there's definitely, there's a lot to it.


00:15:42.720 --> 00:15:45.280
- It's a multiplicative factor, I would say for sure.


00:15:45.280 --> 00:15:48.240
- Yeah, and so this is, regardless of what you wanna


00:15:48.240 --> 00:15:50.200
take away, there's some good advice in this article.


00:15:50.200 --> 00:15:52.760
There's a article I'm linking to that's


00:15:52.760 --> 00:15:56.040
what any developer can learn from the best.


00:15:56.040 --> 00:15:57.720
And I think these are good things.


00:15:57.720 --> 00:16:01.500
So one of the things, the idea around it is just


00:16:01.500 --> 00:16:05.140
This isn't magical and it isn't something that is only you.


00:16:05.140 --> 00:16:08.860
It isn't just about skills and hard skills.


00:16:08.860 --> 00:16:10.340
It's other stuff, too.


00:16:10.340 --> 00:16:12.620
And there's a clear path to excellence.


00:16:12.620 --> 00:16:15.100
People are not born great developers.


00:16:15.100 --> 00:16:17.500
They get there through focused, deliberate practice.


00:16:17.500 --> 00:16:19.820
And here's a few traits.


00:16:19.820 --> 00:16:24.740
They just listed some traits of things that they they see in good developers


00:16:24.740 --> 00:16:26.380
versus not so great.


00:16:26.380 --> 00:16:30.740
So great developers are a few of the traits are problem solving.


00:16:31.060 --> 00:16:32.700
They're skilled at what they're doing.


00:16:32.700 --> 00:16:34.620
They're mentors and teachers.


00:16:34.620 --> 00:16:38.300
They're excellent learners and passionate about stuff.


00:16:38.300 --> 00:16:40.920
So the problem solver bit, I think, is really interesting


00:16:40.920 --> 00:16:44.620
because often the 10x or the multiplier


00:16:44.620 --> 00:16:48.560
doesn't come in from that they do the same work faster.


00:16:48.560 --> 00:16:51.960
It sometimes is they can just look at things differently


00:16:51.960 --> 00:16:54.020
because of experience, because of playing around


00:16:54.020 --> 00:16:55.660
with lots of different things and say,


00:16:55.660 --> 00:16:58.320
"Oh, let's just solve this problem differently."


00:16:58.320 --> 00:17:05.360
And it just gets done faster because they take a different approach.


00:17:05.360 --> 00:17:09.800
I was talking with somebody about databases recently, and there's some, for instance,


00:17:09.800 --> 00:17:15.840
there's some problems that can be solved with graph databases easily that are almost impossible


00:17:15.840 --> 00:17:18.080
with a relational database.


00:17:18.080 --> 00:17:20.920
It's just using the right tool for the right job sometimes.


00:17:20.920 --> 00:17:26.720
>> Yeah, and I think a lot of that is the, it's not that knowing that means you're 10


00:17:26.720 --> 00:17:32.120
times smarter or 10 times better, that means you are curious enough to keep looking and


00:17:32.120 --> 00:17:37.240
to continuously be on the lookout for, well, okay, I now totally know all about relational


00:17:37.240 --> 00:17:38.240
databases.


00:17:38.240 --> 00:17:39.240
What else can I learn?


00:17:39.240 --> 00:17:40.240
How do I compare it?


00:17:40.240 --> 00:17:46.840
And I think that's one of the biggest traits that I've noticed among people that have some


00:17:46.840 --> 00:17:54.320
number of multiplier of efficiency or skills is not that they are necessarily more skilled


00:17:54.320 --> 00:17:59.240
or have more natural talent, but they're just continuously learning and really passionate


00:17:59.240 --> 00:18:00.240
about it.


00:18:00.240 --> 00:18:04.760
And they're just always picking up these little things that help you at each step, right?


00:18:04.760 --> 00:18:08.960
Yeah, and there's an honesty of just like, this isn't just about developers.


00:18:08.960 --> 00:18:11.200
I think it's in every field.


00:18:11.200 --> 00:18:17.520
For instance, somebody that's working with tools and stuff, somebody that needs to hammer


00:18:17.520 --> 00:18:22.520
in a lot of nails might be smart enough to go, "Hey, I should go get a nail gun.


00:18:22.520 --> 00:18:24.360
I could do this a lot faster with a nail gun.


00:18:24.360 --> 00:18:25.800
- You know what that makes me think of?


00:18:25.800 --> 00:18:30.520
Like, you could say, I need to have the rings on my engine


00:18:30.520 --> 00:18:33.560
or my transmission fixed on my car,


00:18:33.560 --> 00:18:34.680
and you take it to a regular place,


00:18:34.680 --> 00:18:36.960
you're like, great, we'll have it back in three weeks.


00:18:36.960 --> 00:18:39.620
You go watch something like IndyCar or Formula One,


00:18:39.620 --> 00:18:40.960
they'll pull in and they'll change


00:18:40.960 --> 00:18:42.960
the transmission in two laps.


00:18:42.960 --> 00:18:45.240
Those are both mechanics.


00:18:45.240 --> 00:18:46.080
- Yeah.


00:18:46.080 --> 00:18:46.920
- Those are not the same.


00:18:46.920 --> 00:18:48.180
- Right, exactly.


00:18:48.180 --> 00:18:50.160
The deliberate practice is important,


00:18:50.160 --> 00:18:53.080
And I think some people forget that the difference


00:18:53.080 --> 00:18:56.480
between being an average or a below average developer


00:18:56.480 --> 00:18:58.960
and being an above average developer


00:18:58.960 --> 00:19:02.520
is mostly just deciding that you're going to do that


00:19:02.520 --> 00:19:06.440
and setting aside some of your time in your life


00:19:06.440 --> 00:19:08.960
to pick something you wanna improve


00:19:08.960 --> 00:19:10.560
and then go and do it.


00:19:10.560 --> 00:19:12.400
Figure out what you wanna learn and go do it.


00:19:12.400 --> 00:19:14.320
So, anyway.


00:19:14.320 --> 00:19:17.040
- I guess what I would say as a takeaway from this article


00:19:17.040 --> 00:19:18.440
is it's really interesting.


00:19:18.440 --> 00:19:20.320
It's numerically based, right?


00:19:20.320 --> 00:19:22.380
There's a lot of, it's based on a survey


00:19:22.380 --> 00:19:24.760
the guy did with like a thousand folks or something.


00:19:24.760 --> 00:19:27.520
And most importantly, it's about a growth mindset, right?


00:19:27.520 --> 00:19:28.960
It's not to say, well, there's these people


00:19:28.960 --> 00:19:30.000
and they're just smarter than you,


00:19:30.000 --> 00:19:32.920
or they're smarter than other people or whatever.


00:19:32.920 --> 00:19:36.280
It's here's how those people got that way


00:19:36.280 --> 00:19:37.320
and you can do it too.


00:19:37.320 --> 00:19:39.720
And I think that's the right message.


00:19:39.720 --> 00:19:41.400
- Right, and the person that wrote the article


00:19:41.400 --> 00:19:44.060
said this is from a lot of, he's taught a lot of people


00:19:44.060 --> 00:19:46.200
and there's a lot of people that want to be better


00:19:46.200 --> 00:19:47.460
but they don't know how to.


00:19:47.460 --> 00:19:49.780
So this is just sort of some direction


00:19:49.780 --> 00:19:51.540
on what things to work on.


00:19:51.540 --> 00:19:53.900
So, anyway. - Yeah, it's a good article.


00:19:53.900 --> 00:19:55.580
Yep, and a nice find.


00:19:55.580 --> 00:19:57.620
Let's close this out with a bit of chaos, huh?


00:19:57.620 --> 00:20:00.360
- Sure, way to change tradition, right?


00:20:00.360 --> 00:20:01.780
- That's right.


00:20:01.780 --> 00:20:03.620
So you've heard of, I'm sure you've heard,


00:20:03.620 --> 00:20:05.580
I'm pretty sure you've been out on your show,


00:20:05.580 --> 00:20:06.500
if I remember correctly.


00:20:06.500 --> 00:20:09.000
You've talked about the Chaos Monkey


00:20:09.000 --> 00:20:10.500
and things like that, right?


00:20:10.500 --> 00:20:13.220
- Yeah, Casey Rosenthal on the show.


00:20:13.220 --> 00:20:14.980
- Yeah, he's from Netflix, right?


00:20:14.980 --> 00:20:16.060
- He used to be, yes.


00:20:16.060 --> 00:20:18.500
- Okay, so I think the idea of the chaos monkey


00:20:18.500 --> 00:20:19.340
originated there.


00:20:19.340 --> 00:20:20.860
Tell us what the chaos monkey is.


00:20:20.860 --> 00:20:23.060
- Well, I'm probably gonna get this wrong,


00:20:23.060 --> 00:20:26.660
but there's this notion of taking parts of your system


00:20:26.660 --> 00:20:29.980
and intentionally breaking parts or shutting down,


00:20:29.980 --> 00:20:32.620
especially in a distributed system,


00:20:32.620 --> 00:20:34.400
taking some nodes and just killing them


00:20:34.400 --> 00:20:35.240
every once in a while


00:20:35.240 --> 00:20:36.940
and seeing how your system recovers from it.


00:20:36.940 --> 00:20:37.780
- Yeah, exactly.


00:20:37.780 --> 00:20:41.280
So the idea is if you build an architecture,


00:20:41.280 --> 00:20:42.940
both in infrastructure and software,


00:20:42.940 --> 00:20:45.780
that is supposed to take durability.


00:20:45.780 --> 00:20:48.720
It's supposed to work if this part of your cloud goes down,


00:20:48.720 --> 00:20:51.020
or it's supposed to work if one of your database nodes


00:20:51.020 --> 00:20:52.280
goes down.


00:20:52.280 --> 00:20:53.320
That's the theory.


00:20:53.320 --> 00:20:55.680
But then there's the reality of how does it actually


00:20:55.680 --> 00:20:57.720
behave if one of your nodes goes down,


00:20:57.720 --> 00:21:00.480
one of your machines reboots, random stuff like that, right?


00:21:00.480 --> 00:21:03.640
So the Chaos Monkey runs around in production,


00:21:03.640 --> 00:21:07.360
killing off processes, servers, et cetera.


00:21:07.360 --> 00:21:11.040
And then in production, it does it.


00:21:11.040 --> 00:21:13.520
And then you just have to build, because you


00:21:13.520 --> 00:21:14.820
know the Chaos Monkey's coming.


00:21:14.820 --> 00:21:17.460
And it means like, well, a standard failure is like nothing


00:21:17.460 --> 00:21:19.140
'cause the chaos monkey is a madman, right?


00:21:19.140 --> 00:21:20.780
He's running around all the time.


00:21:20.780 --> 00:21:24.660
So this is not a bad philosophy for large organizations


00:21:24.660 --> 00:21:26.380
or large bits of software.


00:21:26.380 --> 00:21:29.480
However, you're not Netflix probably, people listening.


00:21:29.480 --> 00:21:31.460
So how are you gonna build that up, right?


00:21:31.460 --> 00:21:32.780
How are you gonna create these things?


00:21:32.780 --> 00:21:37.220
So there's this cool thing I found called Chaos Toolkit.


00:21:37.220 --> 00:21:41.620
So Chaos Toolkit is a library built in Python


00:21:41.620 --> 00:21:46.340
that will help create these Chaos Monkey-like things.


00:21:46.340 --> 00:21:47.520
- Cool. - So,


00:21:47.520 --> 00:21:48.980
Chaos Engineering is what they call it,


00:21:48.980 --> 00:21:51.700
is the discipline of experimenting on distributed systems


00:21:51.700 --> 00:21:54.260
in order to build confidence in the system's capability


00:21:54.260 --> 00:21:57.100
to withstand turbulent conditions in production.


00:21:57.100 --> 00:21:58.980
All right, so we talked about the Chaos Monkey


00:21:58.980 --> 00:22:00.980
and the friends, right?


00:22:00.980 --> 00:22:04.380
There's other types of chaos things at Netflix.


00:22:04.380 --> 00:22:07.300
But here's a way that you can easily build


00:22:07.300 --> 00:22:10.240
those types of experiments and systems,


00:22:10.240 --> 00:22:13.240
And it integrates with Kubernetes, AWS, Google Cloud,


00:22:13.240 --> 00:22:16.220
Microsoft Azure, some other things like that.


00:22:16.220 --> 00:22:19.240
So just to give you a sense of what it can do,


00:22:19.240 --> 00:22:21.640
like if you look at the AWS API,


00:22:21.640 --> 00:22:23.940
it'll say you can do things like go to AWS Lambda


00:22:23.940 --> 00:22:26.900
and call a delete function concurrency


00:22:26.900 --> 00:22:30.220
that removes the concurrency limit on any specific Lambda.


00:22:30.220 --> 00:22:33.040
Or you can just call stop instance on an EC2 instance


00:22:33.040 --> 00:22:35.080
or whatever you want.


00:22:35.080 --> 00:22:37.180
And presumably it's gonna put that back,


00:22:37.180 --> 00:22:38.780
I'm not entirely sure.


00:22:38.780 --> 00:22:41.840
but I guess you probably got to call start instance again


00:22:41.840 --> 00:22:45.180
on it or set, you know, add function concurrency


00:22:45.180 --> 00:22:46.420
or set something like that.


00:22:46.420 --> 00:22:47.880
All right, but there's this infrastructure


00:22:47.880 --> 00:22:49.960
to help you change these types of settings


00:22:49.960 --> 00:22:52.940
and these types of things around your cloud providers


00:22:52.940 --> 00:22:54.740
and, you know, make sure your system can take it.


00:22:54.740 --> 00:22:56.180
- Nice, yeah.


00:22:56.180 --> 00:22:57.620
You cannot plan for the best,


00:22:57.620 --> 00:23:00.260
so you plan for what you can for.


00:23:00.260 --> 00:23:01.420
- That's right.


00:23:01.420 --> 00:23:04.080
Yeah, so you build it so that it doesn't have to be perfect


00:23:04.080 --> 00:23:05.500
and then you're in pretty good shape.


00:23:05.500 --> 00:23:07.840
The stuff that the folks at Netflix are doing is insane,


00:23:07.840 --> 00:23:09.640
So like they take it to another level.


00:23:09.640 --> 00:23:11.840
- Well, yeah, one of the things I remember talking


00:23:11.840 --> 00:23:15.680
with them about is the reason why they test


00:23:15.680 --> 00:23:19.120
and do all this in production is because their system


00:23:19.120 --> 00:23:21.960
is so large, you can't, it's essentially the world.


00:23:21.960 --> 00:23:26.960
You cannot have a test bed that's similar enough


00:23:26.960 --> 00:23:29.820
to their real world environment.


00:23:29.820 --> 00:23:32.320
So they don't have that luxury.


00:23:32.320 --> 00:23:34.640
- Right, so they just test it in production.


00:23:34.640 --> 00:23:36.740
And I've not seen Netflix really go down,


00:23:36.740 --> 00:23:38.240
So I'm going to say they're doing it.


00:23:38.240 --> 00:23:39.820
All right, that's it for our main news.


00:23:39.820 --> 00:23:40.820
I have a couple of quick ones.


00:23:40.820 --> 00:23:41.900
You got anything you want to share, Brian?


00:23:41.900 --> 00:23:46.260
- Yeah, just on the Python Bytes episode 100,


00:23:46.260 --> 00:23:49.740
one of the things we talked about was pyproject.toml,


00:23:49.740 --> 00:23:51.580
and I wanted to take a deep dive.


00:23:51.580 --> 00:23:54.140
So the last episode of Test & Code


00:23:54.140 --> 00:23:56.260
is me talking to Brett Cannon,


00:23:56.260 --> 00:23:58.980
talking about that for almost an hour or so.


00:23:58.980 --> 00:24:00.500
- Oh, nice, I definitely want to check that out.


00:24:00.500 --> 00:24:01.540
That's a good one.


00:24:01.540 --> 00:24:02.380
- So how about you?


00:24:02.380 --> 00:24:03.980
- I have two other things


00:24:03.980 --> 00:24:06.340
that I don't think justify a whole segment,


00:24:06.340 --> 00:24:08.080
but I just want to throw them out there.


00:24:08.080 --> 00:24:09.540
Remember a while back we talked about


00:24:09.540 --> 00:24:12.380
that there was potentially some experiments or something


00:24:12.380 --> 00:24:16.900
where some college researcher had put some malicious,


00:24:16.900 --> 00:24:19.020
potentially malicious libraries on PyPI?


00:24:19.020 --> 00:24:19.860
- Yeah.


00:24:19.860 --> 00:24:20.680
- Well, it turns out recently


00:24:20.680 --> 00:24:24.420
someone actually put malicious libraries on PyPI.


00:24:24.420 --> 00:24:26.900
So this is October 27, 2018,


00:24:26.900 --> 00:24:29.400
and apparently 12 packages were discovered


00:24:29.400 --> 00:24:31.980
with various levels of vulnerabilities and stuff.


00:24:31.980 --> 00:24:34.740
So I'm linking to that and people should check that out.


00:24:34.740 --> 00:24:36.900
If you don't know how to spell Django,


00:24:36.900 --> 00:24:39.780
you're going to have a bad time, by the way.


00:24:39.780 --> 00:24:40.860
Yeah.


00:24:40.860 --> 00:24:43.260
So it's a lot of this typo squatting, like, oh,


00:24:43.260 --> 00:24:46.340
I forgot the J, so now I have a virus, something like that.


00:24:46.340 --> 00:24:48.300
Yeah, that's sort of lame.


00:24:48.300 --> 00:24:49.500
Yeah, it's upsetting.


00:24:49.500 --> 00:24:52.300
At least they've done some work over at PyPI


00:24:52.300 --> 00:24:55.780
to block properly spelled things that are not actually packages,


00:24:55.780 --> 00:24:57.820
like re, for example, right?


00:24:57.820 --> 00:24:58.700
The built-in stuff.


00:24:58.700 --> 00:25:02.020
Well, yeah, that's one of the things that was an issue,


00:25:02.020 --> 00:25:04.380
is people trying to pip install things


00:25:04.380 --> 00:25:06.100
that are in the standard library.


00:25:06.100 --> 00:25:07.180
You don't have to do that.


00:25:07.180 --> 00:25:08.140
- Yes, exactly.


00:25:08.140 --> 00:25:10.500
Exactly, don't do that.


00:25:10.500 --> 00:25:13.900
Then the other one was just a quick little Twitter message


00:25:13.900 --> 00:25:17.740
that someone sent my way, and it's pretty cool.


00:25:17.740 --> 00:25:20.500
This guy, not the one who sent it to me,


00:25:20.500 --> 00:25:22.060
I'm sorry, I don't remember who sent it,


00:25:22.060 --> 00:25:23.300
I should have written it down,


00:25:23.300 --> 00:25:25.300
but this person called Xtrek,


00:25:25.300 --> 00:25:27.860
something to that effect, on Twitter,


00:25:27.860 --> 00:25:31.620
decided to go scanning the standard library source code


00:25:31.620 --> 00:25:35.220
for interesting things like, what is the longest class name?


00:25:35.220 --> 00:25:36.300
What is the longest function name?


00:25:36.300 --> 00:25:37.340
And so on.


00:25:37.340 --> 00:25:41.660
So they found out that actually in CPython,


00:25:41.660 --> 00:25:44.580
the longest class name is 200 characters,


00:25:44.580 --> 00:25:47.300
just the letter A 200 times,


00:25:47.300 --> 00:25:49.140
which is some kind of test case.


00:25:49.140 --> 00:25:51.820
But for the real ones, there's one called


00:25:51.820 --> 00:25:55.060
test mutually exclusive optionals and positions


00:25:55.060 --> 00:25:59.620
mixed parent as the longest class name is there.


00:25:59.620 --> 00:26:06.620
In the longest function name, they believe it's test_parser_regression_special_character_in


00:26:06.620 --> 00:26:12.060
parameter column of docstrain first line, which is 84 characters long.


00:26:12.060 --> 00:26:15.600
And then there's other examples.


00:26:15.600 --> 00:26:21.380
Someone says there's actually a test ctypes that has 33 million characters in it.


00:26:21.380 --> 00:26:26.100
Anyway, it's an interesting thread if you're just wondering what the really long names


00:26:26.100 --> 00:26:27.100
are.


00:26:27.100 --> 00:26:28.100
Yeah.


00:26:28.100 --> 00:26:30.640
it almost could compete with Java names.


00:26:30.640 --> 00:26:32.180
- Yeah, exactly.


00:26:32.180 --> 00:26:34.300
Standard types right there.


00:26:34.300 --> 00:26:35.740
Awesome, all right, well,


00:26:35.740 --> 00:26:38.040
definitely fun to share all this news with you, Brian.


00:26:38.040 --> 00:26:39.660
As always, thanks for doing it.


00:26:39.660 --> 00:26:40.740
- All right, thank you, bye.


00:26:40.740 --> 00:26:41.820
- You bet, bye.


00:26:41.820 --> 00:26:43.540
Thank you for listening to Python Bytes.


00:26:43.540 --> 00:26:46.020
Follow the show on Twitter via @PythonBytes.


00:26:46.020 --> 00:26:49.220
That's Python Bytes as in B-Y-T-E-S.


00:26:49.220 --> 00:26:52.580
And get the full show notes at PythonBytes.fm.


00:26:52.580 --> 00:26:54.200
If you have a news item you want featured,


00:26:54.200 --> 00:26:56.660
just visit PythonBytes.fm and send it our way.


00:26:56.660 --> 00:26:59.800
we're always on the lookout for sharing something cool.


00:26:59.800 --> 00:27:01.660
On behalf of myself and Brian Okken,


00:27:01.660 --> 00:27:03.060
this is Michael Kennedy.


00:27:03.060 --> 00:27:05.080
Thank you for listening and sharing this podcast


00:27:05.080 --> 00:27:06.740
with your friends and colleagues.

