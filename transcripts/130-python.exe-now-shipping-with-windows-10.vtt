WEBVTT

00:00:00.001 --> 00:00:05.280
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to earbuds.

00:00:05.280 --> 00:00:12.460
This is episode 130, recorded on, was it May 4th, 2019, live from PyCon.

00:00:12.460 --> 00:00:15.400
I'm Michael Kennedy.

00:00:15.400 --> 00:00:16.420
And I'm Brian Okken.

00:00:16.420 --> 00:00:17.600
I'm Emily Morehouse.

00:00:17.600 --> 00:00:18.940
And I'm Steve Della.

00:00:18.940 --> 00:00:22.440
And it's great to have you all here. Thank you, both of you, for joining us. It's going to be a lot of fun.

00:00:22.440 --> 00:00:27.140
I know you both have some pretty cool news to share, so I'm looking forward to hearing about that.

00:00:27.140 --> 00:00:31.340
And I think we'll go ahead and get started with Brian's item in just a second.

00:00:31.340 --> 00:00:32.820
But I also want to say thank you to Datadog.

00:00:32.820 --> 00:00:34.420
They're around here. They may even hear that.

00:00:34.420 --> 00:00:36.200
But they're sponsoring this episode, though.

00:00:36.200 --> 00:00:37.300
So thanks, Datadog.

00:00:37.300 --> 00:00:39.900
Check them out at pythonbytes.fm/datadog.

00:00:39.900 --> 00:00:49.300
And they track all your requests across your servers, microservices, and put it all together in one holistic view of your performance and errors and all sorts of stuff like that.

00:00:49.300 --> 00:00:49.980
So that's super cool.

00:00:49.980 --> 00:00:51.020
Brian, let's start with your item.

00:00:51.020 --> 00:00:58.160
Well, here at PyCon, one of the booths here that I kind of had fun with is talking with the people at PGCLI.

00:00:58.160 --> 00:00:59.360
Hold that thought for a second.

00:00:59.360 --> 00:01:02.120
Brian just locked his laptop with his notes on it.

00:01:02.120 --> 00:01:03.620
That's staying in the show.

00:01:03.620 --> 00:01:05.500
Okay.

00:01:05.640 --> 00:01:11.020
So my team, actually, we've got a database of test data, error data that we're collecting.

00:01:11.020 --> 00:01:13.360
We're moving away from just using Jenkins.

00:01:13.360 --> 00:01:16.040
But we're pushing that all into a Postgres database.

00:01:16.040 --> 00:01:24.440
And no matter how many times somebody tells me how to interact with the database through the GUI tools, kind of a command line person.

00:01:24.620 --> 00:01:29.200
So I was happy to talk with one of the people at the booth about PGCLI.

00:01:29.200 --> 00:01:31.080
It's a command line interface to Postgres.

00:01:31.080 --> 00:01:34.420
They also have a similar one for MySQL.

00:01:34.420 --> 00:01:35.780
But we're using Postgres.

00:01:35.780 --> 00:01:37.000
So I like PGCLI.

00:01:37.000 --> 00:01:39.020
And I can't wait to get started using it.

00:01:39.020 --> 00:01:39.560
It's really fun.

00:01:39.560 --> 00:01:45.620
It's got some syntax highlighting and, like, what do you call it, IntelliSense sort of thing.

00:01:45.620 --> 00:01:46.440
Autocomplete.

00:01:46.440 --> 00:01:46.740
Yeah.

00:01:46.960 --> 00:01:50.320
And then one of the things, it looks like a Curses interface.

00:01:50.320 --> 00:01:53.520
And I'm like, well, can I run that on Windows?

00:01:53.520 --> 00:01:55.740
Because most Curses stuff I can't run on Windows.

00:01:55.740 --> 00:01:59.840
And they're using the prompt toolkit, the Python prompt toolkit.

00:01:59.840 --> 00:02:01.060
And that does run on Windows.

00:02:01.060 --> 00:02:01.860
So cool.

00:02:01.860 --> 00:02:03.100
We'll be able to run it there.

00:02:03.100 --> 00:02:04.000
That's my item.

00:02:04.000 --> 00:02:04.780
Pretty awesome.

00:02:04.780 --> 00:02:07.040
I don't do a whole lot of CLI stuff with the database.

00:02:07.040 --> 00:02:08.120
But I know a lot of people do.

00:02:08.120 --> 00:02:08.700
That's pretty cool.

00:02:08.700 --> 00:02:09.480
How about either of you?

00:02:09.480 --> 00:02:10.340
What's your style?

00:02:10.340 --> 00:02:11.740
GUI or CLI?

00:02:11.740 --> 00:02:13.400
I switch between the two for sure.

00:02:13.400 --> 00:02:15.180
I'm a huge fan of DataGrip.

00:02:15.360 --> 00:02:21.460
But, like, anytime I'm just doing, like, quick creates and deletes and drops and all that stuff, I usually go CLI.

00:02:21.460 --> 00:02:26.580
My data work tends to start from CSV and end in Excel and occasionally via Jupyter.

00:02:26.580 --> 00:02:30.000
So use the most popular database deployed on the Earth.

00:02:30.000 --> 00:02:30.660
Excel.

00:02:30.660 --> 00:02:31.120
Yeah.

00:02:31.120 --> 00:02:31.660
Yeah.

00:02:31.660 --> 00:02:32.560
Excel is my database.

00:02:32.560 --> 00:02:33.500
Yeah.

00:02:33.500 --> 00:02:35.480
That one tends towards the GUI side, but that's pretty awesome.

00:02:35.480 --> 00:02:36.120
All right.

00:02:36.120 --> 00:02:36.460
Let's see.

00:02:36.460 --> 00:02:37.800
I guess I'll go with my next.

00:02:37.800 --> 00:02:42.380
The one that I thought was cool is a recommendation from one of the folks here at the conference.

00:02:42.380 --> 00:02:43.760
It's called Paper Mill.

00:02:44.280 --> 00:02:45.960
And I know, Steve, you've heard of Paper Mill, right?

00:02:45.960 --> 00:02:46.240
Yeah.

00:02:46.240 --> 00:02:50.480
I've had a little play with it, but I think you've probably done more justice talking about it than I would.

00:02:50.480 --> 00:02:50.520
Yeah.

00:02:50.520 --> 00:02:53.360
I definitely â€“ I've learned a little bit thanks to John Lamb and some other folks.

00:02:53.360 --> 00:02:56.380
So Paper Mill is a way to take Jupyter Notebooks.

00:02:56.380 --> 00:02:58.240
And I'm sure you all are familiar with Jupyter Notebooks.

00:02:58.240 --> 00:03:01.060
And it's just such a different way of programming, right?

00:03:01.060 --> 00:03:01.580
You go in there.

00:03:01.580 --> 00:03:02.380
You load up your data.

00:03:02.380 --> 00:03:03.280
You kind of explore it.

00:03:03.280 --> 00:03:04.120
You're iterated on it.

00:03:04.320 --> 00:03:10.420
But what it typically doesn't do is it doesn't typically get called and then return a value, right?

00:03:10.420 --> 00:03:13.240
It's like this thing you load up, you look at, and you go, okay, well, that's cool.

00:03:13.240 --> 00:03:16.120
That must be the answer or that's the picture it makes or whatever.

00:03:16.800 --> 00:03:23.540
Well, with Paper Mill, you can turn Jupyter Notebooks into basically functions and command line arguments that you can run.

00:03:23.540 --> 00:03:29.280
And you can actually chain them together like this notebook then calls on that notebook and then saves it.

00:03:29.280 --> 00:03:30.840
And it does really cool stuff.

00:03:31.000 --> 00:03:38.940
So apparently folks at Netflix are doing really interesting things to run a bunch of ETL, egress, transform, load, that type of stuff.

00:03:38.940 --> 00:03:44.680
They run 18,000 of those a day through Paper Mill and other stuff.

00:03:44.680 --> 00:03:53.660
And apparently what's really cool about Paper Mill is if it crashes or doesn't work, you get like a whole graph of Jupyter Notebooks that you can go open up.

00:03:53.660 --> 00:04:05.780
And like instead of just having a log entry or some kind of error in like an exception trace or something, what you get is actually the notebook with all the stuff that notebooks have explaining what it was doing before it died.

00:04:05.780 --> 00:04:08.400
If you do anything with notebooks, that sounds like super cool.

00:04:08.400 --> 00:04:09.820
People should check that out for sure.

00:04:09.820 --> 00:04:11.500
The workflow is actually a really useful thing.

00:04:11.500 --> 00:04:18.420
Like I'm aware of a couple of teams within Microsoft to write work that have, I don't think they're all using Paper Mill.

00:04:18.420 --> 00:04:20.700
Some of them maybe we don't actually have that much.

00:04:20.860 --> 00:04:23.920
We don't tightly control everyone's workflow, so they get to use what works for them.

00:04:23.920 --> 00:04:30.540
But there's certainly some teams that have services set up where people using them are going to send in a query or they're going to do something.

00:04:30.540 --> 00:04:34.980
And occasionally there's cases that are not really failures, but they seem weird.

00:04:34.980 --> 00:04:39.020
It's kind of like if you go to a search engine and you type in something that gets no results.

00:04:39.020 --> 00:04:40.000
What do you do then?

00:04:40.000 --> 00:04:44.740
You know, you haven't necessarily failed, but you probably want someone to look into that and figure out what it does.

00:04:44.740 --> 00:04:47.920
And so I know that we have some teams with a similar kind of thing to what Paper Mill can do.

00:04:47.920 --> 00:04:50.640
It'll generate a notebook to do this out of that analysis.

00:04:50.640 --> 00:04:58.680
Or there's some cases, some of the security teams that we have, the security research teams, have templates for analyzing malware that's come in.

00:04:58.680 --> 00:05:07.260
And that's the kind of thing that you can use Paper Mill to auto-generate, you know, maybe a half-complete notebook with the inputs that you already know.

00:05:07.500 --> 00:05:13.500
And then pass it off to an analyst to work through and put them in a comfortable environment that they want to work in, which is Jupyter.

00:05:13.500 --> 00:05:21.940
And give them the tools, but have all of the information already there so they're not spending a lot of time loading it up and collecting URLs and copy-pasting log files and all that sort of stuff.

00:05:21.940 --> 00:05:22.860
Yeah, that sounds awesome.

00:05:22.860 --> 00:05:26.580
The way it works is basically you define a cell with default input arguments.

00:05:26.580 --> 00:05:29.960
And then there's a cell below it that are all the parameters passed.

00:05:29.960 --> 00:05:31.740
Emily, do you guys do anything with notebooks?

00:05:32.120 --> 00:05:33.180
Not a whole lot, really.

00:05:33.180 --> 00:05:35.040
I have a couple of, like, internal tools.

00:05:35.040 --> 00:05:36.820
We operate at a very different scale.

00:05:36.820 --> 00:05:39.520
So we are a company of, like, six people right now.

00:05:39.520 --> 00:05:44.500
But I use notebooks for a lot of internal tools and, like, budgeting and forecasting and whatnot.

00:05:44.500 --> 00:05:45.180
All right.

00:05:45.180 --> 00:05:45.500
Awesome.

00:05:45.500 --> 00:05:45.740
Yeah.

00:05:45.740 --> 00:05:48.020
Well, Paper Mill, check it out if that resonates with you guys.

00:05:48.020 --> 00:05:48.280
All right.

00:05:48.280 --> 00:05:49.820
Which one do you want to do your item next?

00:05:49.820 --> 00:05:50.240
All right.

00:05:50.240 --> 00:05:50.760
I'll go next.

00:05:51.020 --> 00:05:58.640
So I wanted to talk a little bit about one of my favorite events that I get to participate in at PyCon, and that is the Python Language Summit.

00:05:58.640 --> 00:06:01.040
This is my third year attending.

00:06:01.040 --> 00:06:07.920
And it's really, really interesting to get to see kind of a lot of the inner workings and discussions that go on.

00:06:07.920 --> 00:06:14.500
So one of my favorite things, this year the Language Summit was run by a few new people to organize it.

00:06:14.500 --> 00:06:20.400
And Marietta and Lukash Lenga took a little bit of a different direction on it.

00:06:20.400 --> 00:06:22.840
And we got a lot more community involvement.

00:06:22.840 --> 00:06:32.380
So we got to hear from projects like CircuitPython and Beware and really just got a lot of new voices into the core development community.

00:06:32.780 --> 00:06:49.900
And I think that that is something that is really going to help us moving forward, finding out not only what we need internally to continue the development of CPython, but also what needs to happen to do things like supporting Beware, which hopefully if you attended his keynote or you can go back and listen to the video.

00:06:49.900 --> 00:06:52.340
Russell Keith McGee's keynote talks a bit about this.

00:06:52.340 --> 00:06:56.360
And so really just this true cohesion of different groups coming together.

00:06:56.360 --> 00:06:57.860
And I'm very excited about that.

00:06:57.980 --> 00:07:03.920
Yeah, and this is the first year that you've had the Language Summit after Guido stepped down, right?

00:07:03.920 --> 00:07:06.300
So this is the first sort of independent one.

00:07:06.300 --> 00:07:06.540
Yeah.

00:07:06.540 --> 00:07:09.500
I know that he was there, but it probably was a little different.

00:07:09.500 --> 00:07:10.040
I don't know.

00:07:10.040 --> 00:07:10.980
I didn't feel any differently.

00:07:10.980 --> 00:07:11.340
Did you?

00:07:11.340 --> 00:07:18.680
No, I feel like it was definitely having more community involvement means we were getting a lot more opinions from outside the core development team.

00:07:18.680 --> 00:07:26.780
And I think that's going to be really beneficial as we look towards Python 3.8 is approaching its feature freeze, but 3.9 planning is already starting.

00:07:26.780 --> 00:07:29.680
We've got a few peps that people have been working on towards that.

00:07:29.680 --> 00:07:36.720
But having had those extra voices come in and call out some of the pain point and putting a face to it as well is such a big deal.

00:07:36.960 --> 00:07:50.260
So much of the feedback that we get to hear that you always get to hear about software is a GitHub issue and it's just text and it's a made up name and an image that's generated from an IP address and there's no person there.

00:07:50.260 --> 00:07:52.000
And how much pain is this?

00:07:52.000 --> 00:07:53.260
We don't know how much pain this is.

00:07:53.260 --> 00:08:03.300
And when someone takes the trouble to get to a conference two days before it starts and prepare a talk and come and spend half an hour talking face to face with people, it has a very different impact.

00:08:03.300 --> 00:08:06.160
And you get a lot more information and you get the follow up.

00:08:06.240 --> 00:08:14.280
And so there were a lot of chats after some of the talks where some of us heard the things and were like, I thought that was a problem.

00:08:14.280 --> 00:08:16.600
And now you're telling me it is.

00:08:16.600 --> 00:08:17.540
Let's dig into that.

00:08:17.540 --> 00:08:20.320
Like, tell me more about what we can do to help this.

00:08:20.320 --> 00:08:24.500
So I think for 3.9 planning, we're going to get a lot of benefit out of the way this one was wrong.

00:08:24.500 --> 00:08:25.440
Yeah, that's super cool.

00:08:25.440 --> 00:08:33.960
And of course, the high bandwidth in-person conversations has got to be better than, oh, I put up a GitHub issue or I put up a PEP and go read it, whatever, right?

00:08:33.960 --> 00:08:35.560
Like being there in person has got to help.

00:08:35.560 --> 00:08:36.060
Yeah, absolutely.

00:08:36.060 --> 00:08:37.600
And that's one of the best things about PyCon.

00:08:37.600 --> 00:08:39.120
Those conversations haven't stopped.

00:08:39.120 --> 00:08:42.500
I walked away from some of those conversations to come to the podcast right now.

00:08:43.140 --> 00:08:48.080
And probably looking at the people around here, I might make it three or four meters before we start another one.

00:08:48.080 --> 00:08:48.960
That's right.

00:08:48.960 --> 00:08:49.500
That's right.

00:08:49.500 --> 00:08:54.540
Speaking of three or four meters, I just want to say thank you to Logan for the paper mill recommendation.

00:08:54.540 --> 00:08:56.000
He was the one who got that one on the show.

00:08:56.000 --> 00:08:56.440
Thank you.

00:08:58.300 --> 00:08:59.420
All right.

00:08:59.420 --> 00:09:02.320
Steve, sometimes you say you save the best for last.

00:09:02.320 --> 00:09:06.100
I know that a lot of people are going to be excited about what you're offering here.

00:09:06.100 --> 00:09:09.420
And you sort of wear two hats in the Python world, right?

00:09:09.500 --> 00:09:12.320
Like you wear the Core Dev hat and you wear the Microsoft hat.

00:09:12.320 --> 00:09:15.080
And you kind of get to talk about them both right now, right?

00:09:15.080 --> 00:09:15.360
Yeah.

00:09:15.780 --> 00:09:21.880
And chatting with a few other people, we need to get physical hats for some of this because sometimes it's a little unclear which hat I'm wearing in any particular.

00:09:21.880 --> 00:09:24.400
Yeah, the Sherlock hat with Python on the front, Microsoft on the back.

00:09:24.400 --> 00:09:25.060
Could be fun.

00:09:25.060 --> 00:09:30.800
Those who saw my brief little chat this morning from the stage will know that was very much the Microsoft hat.

00:09:30.800 --> 00:09:35.740
But one of the projects I've been doing for a while for CPython itself has kind of been both hats at the same time.

00:09:35.740 --> 00:09:42.240
So when Windows 8 came out, we added an App Store or Microsoft added an App Store as part of Windows and that's continued on.

00:09:42.380 --> 00:09:45.720
So there's an App Store for getting apps for Windows 10.

00:09:45.720 --> 00:09:50.080
And that's always kind of been slightly different from downloading an installer and double clicking it.

00:09:50.080 --> 00:09:52.200
Next, next, next, next, next, agree, next.

00:09:52.200 --> 00:09:59.020
It's been meant to be a lot faster, a lot simpler to get installations a lot more reliable, a lot more isolated.

00:09:59.020 --> 00:10:01.900
And generally you start doing that by making it highly restricted.

00:10:01.900 --> 00:10:06.520
And so when that first came out, one of my first projects at Microsoft was how do we get Python into this thing?

00:10:06.520 --> 00:10:08.580
And it turns out the answer was no, can't do it.

00:10:08.580 --> 00:10:08.940
Impossible.

00:10:09.220 --> 00:10:12.380
Fast forward a few years and those things kind of get relaxed over time.

00:10:12.380 --> 00:10:17.900
And we've reached the point recently where it totally became feasible to put Python in the Windows App Store.

00:10:17.900 --> 00:10:18.880
And so we did.

00:10:18.880 --> 00:10:22.200
And so as of Python 372, that was kind of a preview.

00:10:22.200 --> 00:10:25.040
373 is considerably more reliable.

00:10:25.040 --> 00:10:27.780
And Python 3.8 is going to be better again when that comes out.

00:10:27.780 --> 00:10:34.400
You've been able to go to a Windows 10 machine, open up the store, type in Python and install Python that way.

00:10:34.400 --> 00:10:35.420
And those apps auto-update.

00:10:35.420 --> 00:10:36.120
Will this auto-update?

00:10:36.120 --> 00:10:37.260
And it auto-updates, yeah.

00:10:37.260 --> 00:10:39.340
So it'll stick within the major version.

00:10:39.340 --> 00:10:47.080
So if you get the 3.7 app, sometime when we push out the next version of it, when you're not using it, it's just going to quietly update in the background.

00:10:47.080 --> 00:10:50.780
And so next time you go back to it, you'll automatically have 373 or 374.

00:10:50.780 --> 00:10:52.420
I actually get some really nice controls.

00:10:52.560 --> 00:10:59.220
I can do a gradual rollout on that so I can set the slider and say automatically update this many percentage of people, which is fun.

00:10:59.220 --> 00:11:01.840
But it's not going to take you straight to 3.8 without warning.

00:11:01.840 --> 00:11:05.300
That's going to cause you to take another step, go back through the store, pick the new one.

00:11:05.300 --> 00:11:10.700
But the other half of that project while I was working on that was kind of still like secret within Microsoft.

00:11:11.040 --> 00:11:13.180
And we knew that we were doing it.

00:11:13.180 --> 00:11:14.140
We knew that it was going to happen.

00:11:14.140 --> 00:11:17.520
But until it was actually out there, we haven't been able to talk about it.

00:11:17.520 --> 00:11:19.180
Now at this point, it's out there.

00:11:19.180 --> 00:11:24.160
So some people are already seeing that if they're running Windows Insider builds, because they've got the latest update already.

00:11:24.160 --> 00:11:26.560
That update's coming out in the next month or two.

00:11:26.560 --> 00:11:30.680
When that hits, every single Windows machine is going to have Python on it.

00:11:31.040 --> 00:11:39.540
So if you go to a clean Windows machine and type Python, previously you get a big fat error message.

00:11:39.540 --> 00:11:45.720
What you're going to get now is a pop-up straight to the page in the Windows store with the latest released version of Python,

00:11:45.720 --> 00:11:48.100
which means you're now one click away from installing it.

00:11:48.100 --> 00:11:54.700
I actually demoed this at the Language Summit, so Emily can confirm that within like a three-minute lightning talk,

00:11:54.700 --> 00:11:57.080
I went and installed Python and had it running.

00:11:57.080 --> 00:12:00.860
The feedback I've been hearing so far is people forget they even clicked install.

00:12:01.360 --> 00:12:04.000
And they're like, I typed Python and it was just there by magic.

00:12:04.000 --> 00:12:10.640
And I'm really excited to just take out so many of those steps on where do I go to get Python?

00:12:10.640 --> 00:12:11.580
How do I get started?

00:12:11.580 --> 00:12:16.580
I've talked with some of the teachers and the trainers who instruct people on Python.

00:12:16.580 --> 00:12:21.420
They're really excited because now you can go to any machine that people bring in and type Python,

00:12:21.420 --> 00:12:25.020
and it's either going to work or it's going to put them one click away from it working.

00:12:25.020 --> 00:12:25.800
I really love this.

00:12:25.800 --> 00:12:30.840
I actually, well, part of my job is to monitoring the test environment within our company.

00:12:30.840 --> 00:12:32.180
in our area.

00:12:32.180 --> 00:12:37.360
But trying to get people to just install Python for that, even that, for some reason,

00:12:37.360 --> 00:12:39.520
some people get it messed up.

00:12:39.520 --> 00:12:42.740
Somehow they install it in the wrong place and it's just a mess.

00:12:42.740 --> 00:12:44.080
So I'm really happy about this.

00:12:44.080 --> 00:12:44.580
This is great.

00:12:44.580 --> 00:12:51.480
I know Windows has a lot of enterprise controls and group policies and stuff that I haven't thought about for a real long time.

00:12:51.540 --> 00:12:53.660
But it seems like they could be used for good.

00:12:53.660 --> 00:12:58.560
Can Windows Store's apps be set up company-wide?

00:12:58.560 --> 00:13:02.740
So could this just be automatic on the machines at large companies?

00:13:02.740 --> 00:13:05.220
I am not personally familiar.

00:13:05.220 --> 00:13:08.480
I probably need to get familiar because this question is going to come up again and again.

00:13:08.480 --> 00:13:10.340
Now that we just publish it to the world.

00:13:10.560 --> 00:13:10.880
Yeah.

00:13:10.880 --> 00:13:16.880
With how to roll out this app to a whole lot of people, one thing I can say, you don't have to be an administrator to install it.

00:13:16.880 --> 00:13:19.740
But when you do, it still installs it as if you're an administrator.

00:13:19.740 --> 00:13:22.140
So it's going to have a lockdown secured install.

00:13:22.140 --> 00:13:23.820
No one's going to modify it on you.

00:13:24.080 --> 00:13:30.660
So you have like a secured Python install like that, even though you want an administrator to do it, which is a really neat thing about the store apps.

00:13:30.660 --> 00:13:33.240
I almost certainly can roll it out.

00:13:33.240 --> 00:13:40.080
But again, it's very few places that I'm aware of are restricting apps from the store because those have gone through a Microsoft review process.

00:13:40.080 --> 00:13:42.920
We've checked them out and they're basically safe.

00:13:42.920 --> 00:13:43.160
Right.

00:13:43.160 --> 00:13:44.000
They're super isolated.

00:13:44.000 --> 00:13:45.000
So that helps a lot.

00:13:45.000 --> 00:13:45.460
There's two.

00:13:45.460 --> 00:13:46.940
They're super isolated.

00:13:46.940 --> 00:13:47.460
Right.

00:13:47.460 --> 00:13:48.400
Super isolated.

00:13:48.400 --> 00:13:48.660
Yeah.

00:13:48.660 --> 00:13:49.800
Which does lead to some bugs.

00:13:49.800 --> 00:13:51.200
And some people have noticed this.

00:13:51.340 --> 00:13:54.580
Like if you write to the temp directory from this, it actually goes to a private one.

00:13:54.580 --> 00:13:57.700
On the bright side, if you uninstall it, it gets rid of everything that it did.

00:13:57.700 --> 00:13:58.060
That's cool.

00:13:58.060 --> 00:14:08.880
And somebody, as somebody who writes courses and, you know, if you write a book, it's always, here's what you type to activate a virtual environment or run the script on macOS and Linux.

00:14:08.880 --> 00:14:10.660
But you don't do that in Windows.

00:14:10.660 --> 00:14:12.160
You say Python without the three.

00:14:12.160 --> 00:14:14.600
And then you got to make sure the path is right and you check it.

00:14:14.600 --> 00:14:16.140
So that's the other good thing, right?

00:14:16.140 --> 00:14:17.960
Is I can now do Python three on Windows.

00:14:17.960 --> 00:14:18.360
Yeah.

00:14:18.360 --> 00:14:21.920
So this is the first time we've actually done this in Python on Windows.

00:14:21.920 --> 00:14:24.900
But when it comes, it'll automatically go onto path by default.

00:14:24.900 --> 00:14:30.500
And it comes with a Python shortcut, a Python three shortcut and a Python three dot seven shortcut.

00:14:30.500 --> 00:14:32.960
It also includes the same for pip and idle.

00:14:32.960 --> 00:14:35.320
So you can when you install this.

00:14:35.320 --> 00:14:42.600
And in fact, right now, until we fix it in probably in 3.8, you're better to just type pip install after using the Windows store package.

00:14:42.600 --> 00:14:44.620
Then you are doing the Python dash M pip install.

00:14:44.620 --> 00:14:45.140
That's awesome.

00:14:45.140 --> 00:14:46.060
Such good news.

00:14:46.120 --> 00:14:48.120
I'm really glad I've wanted this for a long time.

00:14:48.120 --> 00:14:55.960
I remember on user voice, I had posted something like that requesting Python three in Windows and it got like thousands of upvotes and comments.

00:14:55.960 --> 00:14:57.260
And it was just like kind of crickets.

00:14:57.260 --> 00:14:57.920
Yeah.

00:14:57.920 --> 00:15:00.020
You know, but take some time.

00:15:00.020 --> 00:15:01.140
But we do read those user voice.

00:15:01.140 --> 00:15:01.800
That's awesome.

00:15:01.800 --> 00:15:03.560
And I'm really happy that you got this.

00:15:03.640 --> 00:15:11.860
I mean, the impact this is going to have is going to be huge just because the number of Python developers on Windows outnumbers any other platform, right?

00:15:11.860 --> 00:15:12.100
Yeah.

00:15:12.100 --> 00:15:15.220
And it's going to be too late for the people that are listening to this on the recording.

00:15:15.280 --> 00:15:20.400
But for everyone here live, I'm actually I've got my talk tomorrow afternoon, which is on this topic.

00:15:20.400 --> 00:15:21.920
Python on Windows is OK, actually.

00:15:21.920 --> 00:15:24.200
For those who are listening, you'll be able to find this online.

00:15:24.200 --> 00:15:30.080
That's one of my first points is everyone's always surprised by just how much Python is being used on Windows.

00:15:30.880 --> 00:15:40.340
Because particularly for those of us at PyCon, we look around and we get a very different idea of where people are using Python because virtually everyone has a laptop with some shiny fruit on the back.

00:15:40.340 --> 00:15:44.960
And that's just not actually the case for everyone who's using Python out there.

00:15:44.960 --> 00:15:47.420
So that's conference reality, not reality reality.

00:15:47.420 --> 00:15:48.700
That's absolutely conference reality.

00:15:48.700 --> 00:15:54.460
I joke that I'm the only person in the room with a Windows PC and far too often it's not enough of a joke.

00:15:54.460 --> 00:15:55.140
Yeah, that's for sure.

00:15:55.140 --> 00:15:55.360
All right.

00:15:55.360 --> 00:15:58.060
Well, thank you for sharing that and announcing that to everyone here.

00:15:58.060 --> 00:15:58.880
That's super cool.

00:15:59.160 --> 00:16:04.720
So I guess let's close out the show with just maybe your main takeaway from the conference.

00:16:04.720 --> 00:16:05.700
I want to start with you, Emily.

00:16:05.700 --> 00:16:09.160
Oh, gosh.

00:16:09.160 --> 00:16:12.900
Your conference experience this year compared to last, something like that.

00:16:12.900 --> 00:16:13.440
Oh, yeah.

00:16:13.440 --> 00:16:20.260
So I think that this is a very unfair question to ask of me because my conference experience this year is very different because I'm co-chairing this year.

00:16:20.260 --> 00:16:21.180
Congratulations.

00:16:21.180 --> 00:16:22.360
That is so awesome.

00:16:22.360 --> 00:16:22.680
Woo!

00:16:22.680 --> 00:16:23.140
Thank you.

00:16:23.140 --> 00:16:28.660
This year is very much like running around, like checking with my head cut off.

00:16:28.820 --> 00:16:29.620
It feels like work.

00:16:29.620 --> 00:16:31.240
I'm surprised that I'm sitting for this long.

00:16:31.240 --> 00:16:33.220
But it's really, really incredible.

00:16:33.220 --> 00:16:40.760
I'm very, very grateful to be able to give back to the community in a different way and continue to be the voice of the community as Python grows throughout the years.

00:16:40.760 --> 00:16:41.120
Awesome.

00:16:41.120 --> 00:16:41.920
Well, congratulations.

00:16:41.920 --> 00:16:45.680
And I'm looking forward to next year when you're even more involved in the conference.

00:16:45.680 --> 00:16:47.100
Yeah, Pittsburgh 2020.

00:16:47.100 --> 00:16:47.680
Right on.

00:16:47.680 --> 00:16:50.500
And congratulations having your business on Python and doing so well.

00:16:50.560 --> 00:16:52.140
So it's great to see everything going so great.

00:16:52.140 --> 00:16:53.140
You bet, Steve.

00:16:53.140 --> 00:16:53.500
Yeah.

00:16:53.500 --> 00:16:57.160
So, well, and again, this is very much a running around, like, crazy conference.

00:16:57.160 --> 00:16:58.760
Microsoft is Keystone's sponsor.

00:16:58.760 --> 00:16:59.640
We have a big booth.

00:16:59.640 --> 00:17:00.560
We have a lot going on.

00:17:00.560 --> 00:17:02.080
And I've been helping run some of that.

00:17:02.080 --> 00:17:08.160
So my experience has been a lot of people actually coming up saying, oh, I've heard about some of your stuff.

00:17:08.240 --> 00:17:10.160
I've been trying to use it and I've been struggling.

00:17:10.160 --> 00:17:11.440
Like, I've been hitting problems.

00:17:11.440 --> 00:17:12.780
I'm getting stuck in some places.

00:17:12.780 --> 00:17:13.680
Are you able to help?

00:17:13.680 --> 00:17:19.680
And one of the things we came prepared to do, which I was keen to do and help drive through a lot of the planning,

00:17:19.680 --> 00:17:24.780
was actually bringing some of our engineers solely for the purpose of helping people get their stuff working.

00:17:24.780 --> 00:17:26.540
And so we've had a table set up.

00:17:26.540 --> 00:17:32.080
We've had people coming up with their own laptops and helping them get whatever it is they're trying to do working.

00:17:32.080 --> 00:17:37.440
We've had migrating people to Azure Pipelines, getting people to deploy stuff on Azure, setting up VS Code.

00:17:37.980 --> 00:17:38.700
A whole lot of things.

00:17:38.700 --> 00:17:46.120
And so it's been a lot of experiences of people being frustrated at the start and walking away very satisfied

00:17:46.120 --> 00:17:51.900
and very happy to have come and actually met a human from Microsoft who can help them with their computer.

00:17:51.900 --> 00:17:57.400
Well, so a couple of years ago was the first time the second Portland one.

00:17:57.400 --> 00:18:00.500
I couldn't get tickets to the first Portland one, even though I live there.

00:18:00.500 --> 00:18:03.300
But that was my first PyCon.

00:18:03.300 --> 00:18:07.620
And since then, the last two years, Michael and I have been spending a lot of our time in,

00:18:07.720 --> 00:18:09.380
a community contributors booth.

00:18:09.380 --> 00:18:15.000
And this year, I'm very grateful for PyCharm for including us in their larger booth.

00:18:15.000 --> 00:18:17.260
And then also, we've split up the time.

00:18:17.260 --> 00:18:18.900
We have more community contributors.

00:18:18.900 --> 00:18:21.760
So we're not standing in the booth the entire time.

00:18:21.760 --> 00:18:24.020
We really got to enjoy the conference.

00:18:24.020 --> 00:18:25.680
And I'm really grateful for that.

00:18:25.680 --> 00:18:27.020
And it's been an incredible experience.

00:18:27.020 --> 00:18:27.520
So thanks.

00:18:27.900 --> 00:18:30.180
Thanks for this theater and this opportunity again.

00:18:30.180 --> 00:18:31.140
That was awesome.

00:18:31.560 --> 00:18:35.360
And my takeaway is really, you know, kind of like before I said, just the people, right?

00:18:35.360 --> 00:18:36.800
Like I get to meet so many people.

00:18:36.800 --> 00:18:40.320
And you hear these stories like, you changed my life in this way.

00:18:40.320 --> 00:18:43.040
And like what I was doing didn't feel like anything like that.

00:18:43.040 --> 00:18:45.160
I was just kind of like chatting, you know, playing around.

00:18:45.220 --> 00:18:47.160
But actually, the community is great.

00:18:47.160 --> 00:18:48.500
And we do a lot of things for each other.

00:18:48.500 --> 00:18:49.180
And it's just wonderful.

00:18:49.180 --> 00:18:53.220
So it's great to see you all and, you know, be part of it and share the stage with you guys.

00:18:53.220 --> 00:18:54.700
So thanks all for coming.

00:18:54.700 --> 00:18:55.880
And are we going to take questions?

00:18:55.880 --> 00:18:56.920
Let's go and take questions.

00:18:56.920 --> 00:18:57.860
We'll take two questions.

00:18:57.860 --> 00:18:58.760
If you guys have any questions.

00:18:58.760 --> 00:18:59.580
Yeah, Paul's got one.

00:18:59.580 --> 00:19:01.300
Of course, Paul has one.

00:19:01.300 --> 00:19:02.540
Question and a half for Emily.

00:19:02.540 --> 00:19:03.940
Half question.

00:19:03.940 --> 00:19:06.820
I heard there's some event in Colorado you might want to talk about.

00:19:06.820 --> 00:19:07.380
Sure.

00:19:07.380 --> 00:19:08.080
Yes.

00:19:08.080 --> 00:19:10.040
Py Colorado 2019.

00:19:10.040 --> 00:19:14.920
It's going to be the weekend of September 7th and 8th, I believe.

00:19:14.920 --> 00:19:16.560
It's that Saturday and Sunday.

00:19:16.560 --> 00:19:19.360
Inaugural Python Conference in Colorado.

00:19:19.360 --> 00:19:20.960
Come for the Python.

00:19:20.960 --> 00:19:22.020
Stay for the mountains.

00:19:22.020 --> 00:19:23.380
Yes.

00:19:23.380 --> 00:19:24.140
Mountains, please.

00:19:24.140 --> 00:19:25.600
Okay.

00:19:25.600 --> 00:19:26.520
So the actual question.

00:19:26.520 --> 00:19:31.000
Your reward for becoming a contributor was to take on the most

00:19:31.000 --> 00:19:34.160
controversial task in the last 14 decades of Python.

00:19:34.160 --> 00:19:34.600
Yes.

00:19:34.600 --> 00:19:42.480
Now that it's merged, looking back on it, was the process easier or harder than expected?

00:19:42.480 --> 00:19:43.500
To actually implement it?

00:19:43.500 --> 00:19:48.640
So I don't think that this is a very fair question because I had spent approximately a

00:19:48.640 --> 00:19:53.200
year and a half plus really just diving into the code that I was going to need to work on.

00:19:53.200 --> 00:19:56.960
So I had been figuring out how the parser worked, how the grammar was defined,

00:19:56.960 --> 00:20:00.460
how all of like the symbol table lookups and everything were working.

00:20:00.700 --> 00:20:03.920
So I think that it was a lot easier to implement than I expected,

00:20:03.920 --> 00:20:06.060
only because I had all of this knowledge.

00:20:06.060 --> 00:20:10.960
And so it was very rewarding for me to be able to take that year and a half plus of time

00:20:10.960 --> 00:20:14.360
that I had spent learning and just be able to apply it to something real.

00:20:14.360 --> 00:20:18.520
And then there are definitely a couple of like tricky bits about how scoping works with

00:20:18.520 --> 00:20:19.300
assignment expressions.

00:20:19.640 --> 00:20:24.080
So that part was really fun to figure out and was more challenging, but definitely a good

00:20:24.080 --> 00:20:28.460
balance of getting it 90% of the way there and then really having to figure out the tricky

00:20:28.460 --> 00:20:28.780
bits.

00:20:28.780 --> 00:20:31.240
What are you planning to work on at the sprints, Emily?

00:20:31.240 --> 00:20:35.560
Well, I'm actually going to write a bunch of documentation, which is everyone's favorite

00:20:35.560 --> 00:20:35.980
part.

00:20:37.540 --> 00:20:41.620
I want to highlight some of the tricky bits about scoping that I think might trip some

00:20:41.620 --> 00:20:42.120
people up.

00:20:42.120 --> 00:20:46.760
But then I'm also really interested in kind of diving into some of the discussions around

00:20:46.760 --> 00:20:51.560
improving Python's parser and swapping that out for something a bit more modern.

00:20:51.560 --> 00:20:52.240
Follow up.

00:20:52.240 --> 00:20:54.020
Is the new feature tested?

00:20:54.020 --> 00:20:55.480
Tested?

00:20:55.480 --> 00:20:56.140
Yes.

00:20:58.580 --> 00:21:04.300
I actually used like legitimate test driven development for the launch operator.

00:21:04.300 --> 00:21:04.700
Yeah.

00:21:04.700 --> 00:21:08.020
Yeah.

00:21:08.020 --> 00:21:09.500
Yeah.

00:21:09.500 --> 00:21:10.720
We've got one more question out there.

00:21:10.720 --> 00:21:11.420
Someone wants to ask.

00:21:11.420 --> 00:21:15.620
If not, you're going to make me tell a Python joke or a programming joke.

00:21:15.620 --> 00:21:16.360
Now, normally.

00:21:16.360 --> 00:21:16.780
Oh, yeah.

00:21:16.780 --> 00:21:17.320
Go ahead, Ricky.

00:21:17.320 --> 00:21:17.760
Right.

00:21:17.760 --> 00:21:23.500
So the question and I'm going to skip some of the context, unfortunately, but with Python

00:21:23.500 --> 00:21:27.420
coming in through the Windows Store and auto updating from version to version, what about

00:21:27.420 --> 00:21:29.060
all the people that need to run multiple versions?

00:21:29.060 --> 00:21:32.500
And there's a lot of really good reasons to have multiple versions of Python around.

00:21:32.500 --> 00:21:34.700
It's actually a scenario that works really well on Windows.

00:21:34.700 --> 00:21:39.140
And that's something that I'm really careful to not break, or at least I'm trying to be

00:21:39.140 --> 00:21:40.220
really careful to not break it.

00:21:40.220 --> 00:21:42.260
Obviously, one of the main scenarios is testing.

00:21:42.260 --> 00:21:46.440
If you're going to write library code to share with people, then you need to make sure it works

00:21:46.440 --> 00:21:52.500
on at least the two latest versions, probably three and also 2.7, depending on who your users

00:21:52.500 --> 00:21:52.760
are.

00:21:52.760 --> 00:21:57.300
And so that's something that is my hope is to not let that go away.

00:21:57.740 --> 00:21:59.860
This is still kind of experimental phase.

00:21:59.860 --> 00:22:04.000
So I'm not going to definitively say that nothing will break completely.

00:22:04.000 --> 00:22:07.060
But one thing I will say is that the original installers are not going away.

00:22:07.060 --> 00:22:10.940
And so just because you can get Python through the store, there's going to be a number of

00:22:10.940 --> 00:22:14.720
situations where it may make more sense to get it through the regular installer.

00:22:14.720 --> 00:22:20.080
And one of those is I don't want it to ever auto update or I want to know that this is

00:22:20.080 --> 00:22:24.420
exactly 3.7.1 for some reason, even though that's a few versions behind.

00:22:24.420 --> 00:22:27.200
Occasionally, there's a legitimate need for that.

00:22:27.200 --> 00:22:30.260
The other thing is the store version is actually only 64-bit.

00:22:30.260 --> 00:22:33.760
And so there's some cases where you'll want a 32-bit version still.

00:22:33.760 --> 00:22:37.000
I've actually had people coming up to me saying, I'm still running 32-bit Windows.

00:22:37.000 --> 00:22:40.720
And I'm like, I didn't realize you could still get that, but apparently you can.

00:22:40.720 --> 00:22:43.420
You won't be able to get it from the store, unfortunately.

00:22:43.420 --> 00:22:45.360
You'll have to get the regular installer still.

00:22:45.480 --> 00:22:46.080
That's pretty cool.

00:22:46.080 --> 00:22:46.440
All right.

00:22:46.440 --> 00:22:50.220
Well, I guess I'll try to remember the joke that I heard earlier.

00:22:50.220 --> 00:22:52.160
Since I can't type.

00:22:52.160 --> 00:22:54.060
Normally, what we do, it's pretty amazing.

00:22:54.060 --> 00:22:58.960
Brian and I, we type pi joke in the terminal and then we take our favorite one out of there.

00:22:58.960 --> 00:23:00.460
But it's back there.

00:23:00.460 --> 00:23:08.740
So if a functional programmer were to get a pet or a lambda, a pet or a...

00:23:08.740 --> 00:23:10.360
I already blew it.

00:23:10.360 --> 00:23:14.340
So if a functional programmer were to get an animal, a pet, what would they get?

00:23:14.780 --> 00:23:15.580
They get a lambda.

00:23:15.580 --> 00:23:16.380
Duh.

00:23:16.380 --> 00:23:16.780
Sorry.

00:23:16.780 --> 00:23:19.140
See?

00:23:19.140 --> 00:23:20.340
I need this terminal.

00:23:20.340 --> 00:23:22.080
Dude, Brian, save me, man.

00:23:22.080 --> 00:23:22.660
Type it.

00:23:22.660 --> 00:23:23.280
Pi joke, baby.

00:23:23.280 --> 00:23:26.440
Oh, friends don't let friends use Python 2.7.

00:23:26.440 --> 00:23:27.160
Yeah.

00:23:27.160 --> 00:23:27.320
All right.

00:23:27.320 --> 00:23:32.500
Well, thank you all for coming out.

00:23:32.500 --> 00:23:33.060
It's really fun.

00:23:33.060 --> 00:23:34.440
And thanks for listening.

00:23:34.440 --> 00:23:36.260
And thank you guys for being here.

00:23:36.260 --> 00:23:36.680
It's been great.

00:23:36.680 --> 00:23:37.160
You're welcome.

00:23:41.500 --> 00:23:44.300
Thank you for listening to Python Bytes.

00:23:44.300 --> 00:23:46.820
Follow the show on Twitter via at Python Bytes.

00:23:46.820 --> 00:23:49.680
That's Python Bytes as in B-Y-T-E-S.

00:23:49.680 --> 00:23:52.920
And get the full show notes at pythonbytes.fm.

00:23:52.920 --> 00:23:57.120
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:23:57.120 --> 00:23:59.820
We're always on the lookout for sharing something cool.

00:23:59.820 --> 00:24:02.940
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:24:02.940 --> 00:24:06.360
Thank you for listening and sharing this podcast with your friends and colleagues.

