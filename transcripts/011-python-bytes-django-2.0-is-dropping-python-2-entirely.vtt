
00:00:00.000 --> 00:00:05.000
This is Python Bytes, Python headlines and news delivered directly to your earbuds.


00:00:05.000 --> 00:00:10.000
It's episode 11, recorded January 30th. This is Michael Kennedy. I'm here with Brian Okken.


00:00:10.000 --> 00:00:15.000
Hey Brian. Hey. Hey, you ready to talk about Python news and some cool things that we found this week?


00:00:15.000 --> 00:00:18.000
I am. I've got a little bit of a cold, but I think we can get through it.


00:00:18.000 --> 00:00:21.000
Yeah, I think you're going to be just fine. You sound totally good to me.


00:00:21.000 --> 00:00:25.000
So hang in there for a short bit while we talk about these things.


00:00:25.000 --> 00:00:31.320
So one of the things that makes Python fabulous is this so-called batteries included story, right?


00:00:31.320 --> 00:00:37.000
And sometimes that means standard libraries. Sometimes that means PyPI and the 97,000 packages


00:00:37.000 --> 00:00:41.560
there. And we're not done improving how we work with those, are we?


00:00:41.560 --> 00:00:46.760
Yeah, no, we're not. And one of the things that came up this recently, I think it was last week,


00:00:47.400 --> 00:00:57.800
is Kenneth Reitz announced a new tool that he wrote, I guess, over the weekend called PIPENV,


00:00:57.800 --> 00:01:03.960
P-I-P-E-N-V, and we'll link to both his announcement and a Reddit thread where


00:01:03.960 --> 00:01:08.680
people are talking about it. Because there are other projects out there that do the same thing,


00:01:08.680 --> 00:01:17.240
but this is, or similar things, this is a way to bring pip and virtual environments


00:01:17.240 --> 00:01:24.120
together in the same toolchain and also pip file, which since we talked about pip file,


00:01:24.120 --> 00:01:26.360
I think it was last week or... Yeah, I think it was last time, yeah.


00:01:26.360 --> 00:01:33.080
But I wanted to, this is something I've just started using. I just started using this pipenv


00:01:33.640 --> 00:01:39.640
and so far the normal, even just the simple environment of


00:01:39.640 --> 00:01:45.560
you know setting up a new environment, a new directory for a project and setting up a virtual


00:01:45.560 --> 00:01:53.320
environment, this has helped me just make that faster with just pipenv install something and


00:01:53.320 --> 00:02:02.680
it creates a virtual environment and I like the pipenv script which or pipenv shell which brings


00:02:02.680 --> 00:02:06.680
you into a shell terminal within that environment.


00:02:06.680 --> 00:02:10.200
And that works with my workflow pretty good.


00:02:10.200 --> 00:02:14.600
So supposedly, it automatically finds your project home recursively by looking for a


00:02:14.600 --> 00:02:15.600
pip file.


00:02:15.600 --> 00:02:20.440
Yeah, so one of the things that's really cool about that is it will create a virtual directory


00:02:20.440 --> 00:02:22.360
and one of these pip files.


00:02:22.360 --> 00:02:26.160
And if I'm reading this right, that means you don't have to activate your virtual environment


00:02:26.160 --> 00:02:27.320
to manage it.


00:02:27.320 --> 00:02:28.880
Right in the particular shell, right?


00:02:28.880 --> 00:02:30.920
you just have to be in the sub directory somewhere


00:02:30.920 --> 00:02:35.200
and then your package management commands with pipinf


00:02:35.200 --> 00:02:37.400
will apply to that virtual environment


00:02:37.400 --> 00:02:39.200
dedicated to that project.


00:02:39.200 --> 00:02:40.160
- Yes.


00:02:40.160 --> 00:02:41.120
- Which is really nice.


00:02:41.120 --> 00:02:42.880
- Yeah, and in order to,


00:02:42.880 --> 00:02:45.120
well, the magic of virtual environments


00:02:45.120 --> 00:02:47.640
where it like switches out the different,


00:02:47.640 --> 00:02:52.280
a different Python for you and different paths,


00:02:52.280 --> 00:02:56.540
that's, you still have to be activated with that,


00:02:56.540 --> 00:03:01.540
but that's where the PIPFM shell command comes in handy.


00:03:01.540 --> 00:03:04.100
But you also don't actually have to be in that environment,


00:03:04.100 --> 00:03:06.760
like you said, to update the pip file.


00:03:06.760 --> 00:03:08.800
And there's a run command where you can


00:03:08.800 --> 00:03:12.980
not go into the environment with your shell,


00:03:12.980 --> 00:03:15.480
but just run a command within the environment.


00:03:15.480 --> 00:03:16.360
- Yeah, that's pretty sweet.


00:03:16.360 --> 00:03:18.840
And it automatically adds basically


00:03:18.840 --> 00:03:20.680
to what would be the equivalence of your requirements


00:03:20.680 --> 00:03:23.160
at TXT when you install a package


00:03:23.160 --> 00:03:25.920
and automatically removes that requirement


00:03:25.920 --> 00:03:30.560
from the pip file, the new replacement for requirements.txt.


00:03:30.560 --> 00:03:33.120
When you uninstall it and keep your pip up to date,


00:03:33.120 --> 00:03:33.960
yeah, it's very cool.


00:03:33.960 --> 00:03:35.760
And leave it to Kenneth to say,


00:03:35.760 --> 00:03:38.200
instead of watching television this weekend,


00:03:38.200 --> 00:03:41.800
I completely rewrote how you manage packages in Python.


00:03:41.800 --> 00:03:44.280
- Yeah, well, we still depend on,


00:03:44.280 --> 00:03:46.920
we're not, the entire tool chain for Python


00:03:46.920 --> 00:03:49.360
isn't gone over to pip file yet.


00:03:49.360 --> 00:03:52.960
So, I mean, I don't know,


00:03:52.960 --> 00:03:55.400
we still have to deal with requirements.txt,


00:03:55.400 --> 00:03:57.760
So I'm not sure how, I'm still not sure


00:03:57.760 --> 00:03:59.840
how this fits together, but we'll,


00:03:59.840 --> 00:04:03.600
I'll give it some more playing and we'll work on it.


00:04:03.600 --> 00:04:04.520
So. - Yeah.


00:04:04.520 --> 00:04:05.360
Sounds good.


00:04:05.360 --> 00:04:06.180
It definitely looks promising


00:04:06.180 --> 00:04:09.520
and I'm excited to start using it myself.


00:04:09.520 --> 00:04:12.060
You know, one of the continuous messages


00:04:12.060 --> 00:04:14.960
that I think we are getting known for probably


00:04:14.960 --> 00:04:19.960
is our advocacy of everybody moving forward to Python 3.


00:04:19.960 --> 00:04:21.360
- Yes.


00:04:21.360 --> 00:04:23.540
- You know, that's where all the core developers


00:04:23.540 --> 00:04:25.280
are focusing their effort.


00:04:25.280 --> 00:04:28.400
That's where Guido van Rossum is focusing his effort.


00:04:28.400 --> 00:04:31.080
And to say we're all gonna stay on Python 2


00:04:31.080 --> 00:04:33.740
is really just kind of silly, I think.


00:04:33.740 --> 00:04:35.920
We just gotta kind of suck it up and go.


00:04:35.920 --> 00:04:38.760
There have been some interesting watershed moments


00:04:38.760 --> 00:04:40.900
that have made big step changes


00:04:40.900 --> 00:04:42.840
in the percentage of adoption of Python 3.


00:04:42.840 --> 00:04:44.880
Obviously, the wall of superpowers


00:04:44.880 --> 00:04:47.640
and a lot of the packages that are becoming Python 3


00:04:47.640 --> 00:04:50.960
supported or even having Python 3 only as an option


00:04:50.960 --> 00:04:52.760
for some of those is a big one.


00:04:52.760 --> 00:04:56.400
Another one that comes to mind is something that Django did, I can't remember when it


00:04:56.400 --> 00:05:01.040
was, it was like a couple years ago, where they switched the default instructions in


00:05:01.040 --> 00:05:04.800
their getting started docs and tutorials to Python 3.


00:05:04.800 --> 00:05:08.240
So they just, you know, said, Okay, well, what you do is you start Python three, do


00:05:08.240 --> 00:05:10.000
the step step step step, right?


00:05:10.000 --> 00:05:13.980
That actually made I was looking for the article, I couldn't find it, I think Donald stuff for


00:05:13.980 --> 00:05:18.680
an article, but it made something like, like a 7% difference or some some significant difference


00:05:18.680 --> 00:05:25.560
and the amount of Python 3 deployments just by switching the tutorial and the getting


00:05:25.560 --> 00:05:29.280
started docs to Python 3 as default, which I thought was really, really cool.


00:05:29.280 --> 00:05:33.380
And so my next item is something from the Django team as well.


00:05:33.380 --> 00:05:37.040
And this is like that turned to 11.


00:05:37.040 --> 00:05:40.720
It's one thing to say the default documentation is to be in Python 3.


00:05:40.720 --> 00:05:41.720
And yeah, you can do that.


00:05:41.720 --> 00:05:44.060
You can do Python 2 as well if you want.


00:05:44.060 --> 00:05:51.040
But the next major release of Django, Django 2.0 is dropping support for legacy Python.


00:05:51.040 --> 00:05:54.380
There will not be support for Python 2 at all.


00:05:54.380 --> 00:05:56.860
And they're actually cutting out the code to support it.


00:05:56.860 --> 00:06:00.840
And they've said that that actually makes the code more maintainable, easier to evolve


00:06:00.840 --> 00:06:03.580
because there's not like these two worlds they're living in.


00:06:03.580 --> 00:06:05.620
They're just doing Python 3 and it's going to be great.


00:06:05.620 --> 00:06:09.740
Yeah, I think that's a good actually I think that's a good call.


00:06:09.740 --> 00:06:12.860
I'm not sure how long they will support the 1x branch.


00:06:12.860 --> 00:06:18.820
They send the the next release is Django 1.11.


00:06:18.820 --> 00:06:21.620
And that's an LTS long term support release.


00:06:21.620 --> 00:06:24.340
And that's the last one to support Python 2.7.


00:06:24.340 --> 00:06:30.680
And they have a support policy for the various versions of LTS versions.


00:06:30.680 --> 00:06:35.640
And I believe that it's, it's on the page that we're linking to from the show notes.


00:06:35.640 --> 00:06:41.060
But I think the statement is like, we're willing to support one month longer than Python, the


00:06:41.060 --> 00:06:43.420
Python version that we're aiming for.


00:06:43.420 --> 00:06:48.260
So there's one LTS that was targeted at Python 3.3


00:06:48.260 --> 00:06:52.500
and that drops security fix support in February,


00:06:52.500 --> 00:06:53.860
it's sometime in 2017.


00:06:53.860 --> 00:06:55.300
So that's when they're dropping support


00:06:55.300 --> 00:06:58.940
for that version of LTS Django.


00:06:58.940 --> 00:06:59.780
- Okay.


00:06:59.780 --> 00:07:00.820
- And so there is a policy,


00:07:00.820 --> 00:07:02.080
I don't remember exactly what it is.


00:07:02.080 --> 00:07:04.500
And it's like, so this would be something


00:07:04.500 --> 00:07:06.060
to the effect of 2020,


00:07:06.060 --> 00:07:10.880
'cause that's when Python 2 is stopping its support


00:07:10.880 --> 00:07:12.560
and security fixes and so on.


00:07:12.560 --> 00:07:14.040
- Well, that totally makes sense.


00:07:14.040 --> 00:07:14.880
- This is good news though, right?


00:07:14.880 --> 00:07:17.840
I mean, this is a major, major step in the right direction.


00:07:17.840 --> 00:07:19.040
- Yeah, I think it is.


00:07:19.040 --> 00:07:20.980
The sum of the code I've seen that try to support


00:07:20.980 --> 00:07:23.120
both two and three sometimes just don't make sense.


00:07:23.120 --> 00:07:26.600
So I think it'll actually help the readability


00:07:26.600 --> 00:07:28.520
of the Django code, so.


00:07:28.520 --> 00:07:29.340
- Yeah, absolutely.


00:07:29.340 --> 00:07:31.100
And if you wanna add a feature, there's less to do.


00:07:31.100 --> 00:07:32.960
You wanna evolve it, there's less to do.


00:07:32.960 --> 00:07:34.800
It's gonna be good news all around.


00:07:34.800 --> 00:07:37.040
- Yeah, speaking of readability,


00:07:37.040 --> 00:07:39.800
one of the things I came across was,


00:07:39.800 --> 00:07:44.880
I was reading an article, actually it was a blog article about requests, and since we've


00:07:44.880 --> 00:07:49.440
talked about that a lot, I'm just going to skip that article.


00:07:49.440 --> 00:07:52.880
But we all love Kenneth, so we know that.


00:07:52.880 --> 00:07:57.320
But there was a, the article referenced, and it had some code that referenced a package


00:07:57.320 --> 00:07:58.320
called ATTRS.


00:07:58.320 --> 00:08:03.200
It's from, do you want to try to attempt this name?


00:08:03.200 --> 00:08:05.420
- Heineck Shalawak.


00:08:05.420 --> 00:08:10.620
good person in the Python community, he's helped out, done quite a bit of good things. But this,


00:08:10.620 --> 00:08:16.460
I hadn't run across this before and since I come from a, what it is, is it's a library that helps


00:08:16.460 --> 00:08:23.580
you write objects and classes, I guess, a more natural way. You can have small, tight classes


00:08:23.580 --> 00:08:30.220
and it doesn't take up a ton of code and they act normal. Things like adding a whole bunch of


00:08:30.220 --> 00:08:36.220
attributes to a class that have default values. So if if they're if the class is constructed without


00:08:36.220 --> 00:08:43.500
any, any parameters, the some of the values just show up already with some default values without,


00:08:43.500 --> 00:08:48.140
and you don't have to write all the dunder methods. Since I come from C++ background,


00:08:48.140 --> 00:08:55.740
this seems very natural. And I'm like, similar to pip and I'm just starting to use this, but it's a


00:08:55.740 --> 00:08:59.420
it's pretty clean. I wanted to highlight it. Yeah, it's really nice. I've definitely heard


00:08:59.420 --> 00:09:03.900
people rave about how effective it's been for their projects.


00:09:03.900 --> 00:09:09.300
A couple of things that it does, you know, you can easily say class person, colon, you


00:09:09.300 --> 00:09:13.420
know, dunder in it, self dot name, self dot age, whatever, right, and you pass those in,


00:09:13.420 --> 00:09:14.620
you can store them.


00:09:14.620 --> 00:09:15.900
That's fine.


00:09:15.900 --> 00:09:18.800
But then there's a bunch of other stuff that you might need to do.


00:09:18.800 --> 00:09:21.860
So what if you want a human readable representation?


00:09:21.860 --> 00:09:27.020
Well, you've got to implement repper, and maybe stir as well.


00:09:27.020 --> 00:09:32.100
If you want to take two of those things and compare them to see if they're equal or not,


00:09:32.100 --> 00:09:34.820
by comparing the values, that's another thing you've got to write.


00:09:34.820 --> 00:09:39.260
Well, once you write the comparers, you also probably need to have a not equals.


00:09:39.260 --> 00:09:41.780
And then you've got to do the hashing, and you've got to do all sorts of...


00:09:41.780 --> 00:09:43.300
There's just so many different things.


00:09:43.300 --> 00:09:45.140
You have to have an initializer to set all of them.


00:09:45.140 --> 00:09:48.180
And all of that stuff is handled by adders, which is pretty slick.


00:09:48.180 --> 00:09:55.660
Yeah, and it also does all those methods, and the time cost is at construction time.


00:09:55.660 --> 00:10:02.460
And so there's runtime, there's not really any, your objects are just as fast as not


00:10:02.460 --> 00:10:03.460
using this.


00:10:03.460 --> 00:10:04.460
That's pretty good.


00:10:04.460 --> 00:10:05.460
Yeah, that's really, that's really, really cool.


00:10:05.460 --> 00:10:06.460
Excellent.


00:10:06.460 --> 00:10:12.860
So speaking of going fast, there's an article that I ran across that is called Go Faster


00:10:12.860 --> 00:10:14.140
Python.


00:10:14.140 --> 00:10:16.660
And we all want our Python to go faster.


00:10:16.660 --> 00:10:21.220
In fact, I think it's really interesting that some of the core developers coming back to


00:10:21.220 --> 00:10:25.580
Python three, we're talking about what is the thing that we could primarily do to like


00:10:25.580 --> 00:10:30.220
absolutely make people say, okay, fine, I'll, I'll do the extra work to switch my project


00:10:30.220 --> 00:10:34.540
over to Python three and making you code faster was one of the things that they were focused


00:10:34.540 --> 00:10:38.940
on Python three, six goes a lot faster, use less memory than than previously, you know,


00:10:38.940 --> 00:10:41.300
three, five, and before that, and so on.


00:10:41.300 --> 00:10:45.120
So people are really interested in making their Python code go faster.


00:10:45.120 --> 00:10:50.020
And so this article is kind of an introduction article, it's not super deep, but it shows


00:10:50.020 --> 00:10:56.740
you how to do profiling for your Python code and benchmarking and timing and stuff, both


00:10:56.740 --> 00:11:01.700
for regular Python code and then code that's executing inside Jupyter notebooks.


00:11:01.700 --> 00:11:02.700
Oh, wow.


00:11:02.700 --> 00:11:07.100
So there's like special commands like %timeit that you can run to time a little block of


00:11:07.100 --> 00:11:11.620
code in a Jupyter notebook, or you can run timeit, you know, directly and things like


00:11:11.620 --> 00:11:12.620
that.


00:11:12.620 --> 00:11:15.460
So they also talk about, you know, how do you figure out how long an overall set of


00:11:15.460 --> 00:11:20.180
of code is taken with benchmarking, how do you, you know, do function profiling to say


00:11:20.180 --> 00:11:24.420
which ones you're spending your time in actually, and then you can actually get down to line


00:11:24.420 --> 00:11:27.900
profiling with an external package called line profiler.


00:11:27.900 --> 00:11:28.900
And all that is cool.


00:11:28.900 --> 00:11:33.260
And I think, you know, the, the reason I put this in here is I feel like it's, it's good


00:11:33.260 --> 00:11:36.940
to remind ourselves that we should use these tools.


00:11:36.940 --> 00:11:40.740
And we should look at how fast our code runs.


00:11:40.740 --> 00:11:43.140
It's not it's not intuitive sometimes.


00:11:43.140 --> 00:11:49.020
And we always tell, a regular thing to tell people now is to not do premature optimization.


00:11:49.020 --> 00:11:52.680
Write code that looks clean and is easy to maintain.


00:11:52.680 --> 00:11:57.140
And then after you've got things working, then look at, profile it and see where you


00:11:57.140 --> 00:12:00.740
can speed things up and where things are surprising to you.


00:12:00.740 --> 00:12:03.600
That's great advice, yeah.


00:12:03.600 --> 00:12:05.400
But it's not obvious how to do that.


00:12:05.400 --> 00:12:09.580
So I welcome all tutorials like this to help people with this.


00:12:09.580 --> 00:12:13.220
And I think the takeaway is it's like a few commands and it's not major, right?


00:12:13.220 --> 00:12:17.780
You can totally do this and things like PyCharm have like graphical profilers built into them.


00:12:17.780 --> 00:12:21.420
So you can it kind of does the same thing, but like, you know, gives you a slightly different


00:12:21.420 --> 00:12:22.420
representation.


00:12:22.420 --> 00:12:27.400
Yeah, I mean, I've certainly worked on projects where I thought, okay, this thing right here,


00:12:27.400 --> 00:12:30.540
this is the part of my code that is too slow.


00:12:30.540 --> 00:12:34.540
And thankfully, before I tried to optimize it, I've run a profiler against it.


00:12:34.540 --> 00:12:36.800
And like, wow, that part's actually really fast.


00:12:36.800 --> 00:12:38.220
Good thing I didn't make it unreadable.


00:12:38.220 --> 00:12:43.860
You know, it's definitely worth measuring before you make changes.


00:12:43.860 --> 00:12:45.260
Yeah, definitely.


00:12:45.260 --> 00:12:51.260
So you know, one of the things that I think is a challenge for us around Python 3 and


00:12:51.260 --> 00:12:55.420
getting things moved forward in that space, we're going to keep beating that drum for


00:12:55.420 --> 00:12:57.460
a few years, I suspect.


00:12:57.460 --> 00:13:01.580
But you know, Django, the newest, most awesome version of Django that's coming out is only


00:13:01.580 --> 00:13:03.840
going to support Python 3.


00:13:03.840 --> 00:13:09.440
But what if we want to run that on like Red Hat Enterprise Linux or something like this?


00:13:09.440 --> 00:13:15.480
Yeah, and actually, so that's somebody contacted us and said he's really grateful for what


00:13:15.480 --> 00:13:19.800
we're doing here and wants to be part of the community, but he feels like we're creating


00:13:19.800 --> 00:13:22.800
a community that's just Python 3.


00:13:22.800 --> 00:13:26.800
And because he can't in his environment use Python 3 yet.


00:13:26.800 --> 00:13:31.240
And yeah, so that's really what we want to highlight right now is just to say that we


00:13:31.240 --> 00:13:35.940
We know that some people, it's not their choice to run Python 3.


00:13:35.940 --> 00:13:39.060
They have to run 2.7 right now because of their environment.


00:13:39.060 --> 00:13:44.580
I guess I kind of feel like since I'm somebody that writes tutorials also about Python, I


00:13:44.580 --> 00:13:47.680
try to focus on, I'm trying to focus on 3 now.


00:13:47.680 --> 00:13:50.740
But I think it's similar to the Django model.


00:13:50.740 --> 00:13:54.920
It's not, I will try to make sure, like the book I'm writing, I'm going to try to make


00:13:54.920 --> 00:13:56.920
sure it runs on 2.7 also.


00:13:56.920 --> 00:14:02.180
The wanting tutorials by default to show three is to try to encourage people to use three.


00:14:02.180 --> 00:14:04.020
It's not up to people sometimes.


00:14:04.020 --> 00:14:08.900
So I'm hoping that everybody like the people at Red Hat and everywhere else that does a


00:14:08.900 --> 00:14:13.460
distribution will try to give those choices to users and ship with both of them at the


00:14:13.460 --> 00:14:14.460
very least.


00:14:14.460 --> 00:14:15.460
Yeah, absolutely.


00:14:15.460 --> 00:14:22.420
At least have, you know, Python three as not the main option, but as an option, right?


00:14:22.420 --> 00:14:23.420
Yeah.


00:14:23.420 --> 00:14:30.860
There's tutorials out there to try on how you can get 3 running on some of these environments.


00:14:30.860 --> 00:14:36.980
And I just hope that people, the right people, the sysadmins or whoever's in charge of what


00:14:36.980 --> 00:14:41.900
the development environments are, to try to get that figured out so that some of the projects


00:14:41.900 --> 00:14:43.500
can be on 3 also.


00:14:43.500 --> 00:14:46.140
Yeah, I think that's a great message.


00:14:46.140 --> 00:14:49.700
And the more that we can at least move those things forward.


00:14:49.700 --> 00:14:50.800
I hear a lot of from people like,


00:14:50.800 --> 00:14:54.580
hey, we just finished upgrading from 2.6 to 2.7, right?


00:14:54.580 --> 00:14:57.380
What is this Python 3 business you're talking about?


00:14:57.380 --> 00:14:58.220
- Yeah.


00:14:58.220 --> 00:15:01.180
- So yeah, like more options, definitely, definitely better.


00:15:01.180 --> 00:15:03.480
- And I don't think that we've really covered


00:15:03.480 --> 00:15:06.780
that much stuff in this podcast so far


00:15:06.780 --> 00:15:10.880
in all of our episodes that really is three only.


00:15:10.880 --> 00:15:13.500
We have covered it a lot, but a lot of the things


00:15:13.500 --> 00:15:18.220
like the, for instance, the ATTRS, the adders, that's two seven.


00:15:18.220 --> 00:15:19.500
- Yep, absolutely.


00:15:19.500 --> 00:15:24.060
So the next thing I'm going to talk about I think actually is Python 3 only.


00:15:24.060 --> 00:15:25.160
Yeah, it is.


00:15:25.160 --> 00:15:25.600
>> Okay.


00:15:25.600 --> 00:15:27.300
>> So it's pretty cool.


00:15:27.300 --> 00:15:34.660
Now, this is a project that you can take and you can make part of your smart home


00:15:34.660 --> 00:15:37.220
or you can actually make it the hub of your smart home.


00:15:37.220 --> 00:15:41.980
So we're all getting more devices that are living in our house.


00:15:41.980 --> 00:15:46.060
We can, you know, we maybe have a Nest or maybe we have some Arduino


00:15:46.060 --> 00:15:49.440
or we have a Chromecast or, you know, things like that, right?


00:15:49.440 --> 00:15:58.560
Well, there's this place at home-assistant.io and what this is is this is a web application


00:15:58.560 --> 00:16:04.280
that you can run and it will written in Python 3 and it will let you track and control all


00:16:04.280 --> 00:16:06.280
of your devices and home automation.


00:16:06.280 --> 00:16:07.280
That's neat.


00:16:07.280 --> 00:16:08.280
Isn't that cool?


00:16:08.280 --> 00:16:10.800
So instead of saying like, well, the way I work with my home automation is I open up


00:16:10.800 --> 00:16:16.160
like my iPhone and in there I've got my home kit or whatever that thing is called.


00:16:16.160 --> 00:16:18.800
I don't have a smart home so I don't really mess with that.


00:16:18.800 --> 00:16:20.720
But you know, it's got a few things that it can do.


00:16:20.720 --> 00:16:26.160
Like here's a full on open source Python web app that does all sorts of cool things.


00:16:26.160 --> 00:16:28.440
So it says you can install it in less than a minute.


00:16:28.440 --> 00:16:33.960
You can track the state of all of your devices in your house like so things like smart, smart


00:16:33.960 --> 00:16:39.340
lights, garage doors, television, cameras, you name it.


00:16:39.340 --> 00:16:42.980
You control them all from like a mobile friendly little web app you can do.


00:16:42.980 --> 00:16:44.440
So you set up automation.


00:16:44.440 --> 00:16:50.040
So you can do things like have your lights turn on when the sun sets and you're home.


00:16:50.040 --> 00:16:54.080
Or have them turn on when somebody comes up and it's dark, comes to your house.


00:16:54.080 --> 00:16:59.620
Or you can have them automatically dim when you start watching a movie on your Chromecast.


00:16:59.620 --> 00:17:00.620
And all sorts of stuff like that.


00:17:00.620 --> 00:17:01.620
Isn't that sweet?


00:17:01.620 --> 00:17:04.560
Yeah, it's like if this, if this, then that, but for your house.


00:17:04.560 --> 00:17:05.560
Yes, exactly.


00:17:05.560 --> 00:17:06.640
For all your smart things.


00:17:06.640 --> 00:17:08.540
And it's written in Python and that's cool.


00:17:08.540 --> 00:17:13.240
You can, you know, to get a sense of what it's like, there's a demo, home-assistant.io/demo


00:17:13.240 --> 00:17:15.080
And you can just go straight there and check it out.


00:17:15.080 --> 00:17:18.000
And there's some pretty cool stuff you can play with there and get a sense.


00:17:18.000 --> 00:17:21.820
The other notable thing, well, many notable things here, but one of the things that is


00:17:21.820 --> 00:17:27.940
notable to me is this is based on AIO HTTP.


00:17:27.940 --> 00:17:32.800
So that's an asynchronous HTTP client server framework in Python.


00:17:32.800 --> 00:17:39.060
All the cool async IO, the async and await stuff, you can apply that to things like Flask


00:17:39.060 --> 00:17:45.300
and Pyramid and so on because basically the WSGI protocol doesn't really, you know,


00:17:45.300 --> 00:17:50.420
it was built before this concept of asynchrony. This framework is built on top of that.


00:17:50.420 --> 00:17:56.580
So it's a, it's an interesting implementation of this modern Python web server framework as well.


00:17:56.580 --> 00:18:00.340
So, you know, even if you're not interested in like home automation, it's still kind of cool


00:18:00.340 --> 00:18:03.140
to look through the source code on GitHub for that reason alone.


00:18:03.140 --> 00:18:07.300
Yeah, definitely. I want to look through this because I do see the Arduino's part of it,


00:18:07.300 --> 00:18:11.300
but I haven't seen so far if you can hook up Raspberry Pi stuff or...


00:18:11.300 --> 00:18:14.800
I don't know either, but definitely something I'd like to start playing with.


00:18:14.800 --> 00:18:15.800
It looks cool.


00:18:15.800 --> 00:18:19.800
Yeah, very neat. So it's open source. You guys can all check it out.


00:18:19.800 --> 00:18:21.800
All right. Well, that's it for the news this week, Brian.


00:18:21.800 --> 00:18:25.300
Anything else you got going on you want to chat about?


00:18:25.300 --> 00:18:28.300
No, just trying to get over this cold. How about you?


00:18:28.300 --> 00:18:30.300
I was on a mission this weekend.


00:18:30.300 --> 00:18:32.300
I'm on a mission to get my next course done.


00:18:32.300 --> 00:18:35.300
So my Python for Entrepreneurs course, I kind of...


00:18:35.300 --> 00:18:37.800
I've done as much work as I can do and I've handed off.


00:18:37.800 --> 00:18:39.900
It's now in the pipeline to be finished.


00:18:39.900 --> 00:18:42.340
And so now I'm writing a new course called


00:18:42.340 --> 00:18:46.620
Consuming Services in Python for like REST services and SOAP


00:18:46.620 --> 00:18:49.960
services and working with all sorts of data on the wire


00:18:49.960 --> 00:18:51.220
basically from Python.


00:18:51.220 --> 00:18:52.540
- Wow, that'll be interesting.


00:18:52.540 --> 00:18:53.380
- Yeah, it's fun.


00:18:53.380 --> 00:18:55.820
So I worked on that all weekend and I'm making good progress.


00:18:55.820 --> 00:18:58.580
- Now, didn't you announce like some extra thing


00:18:58.580 --> 00:19:01.660
that you guys were giving away with the last course?


00:19:01.660 --> 00:19:03.500
- Oh yeah, with the Python for Entrepreneurs course?


00:19:03.500 --> 00:19:07.260
- Yeah, we're partnering with DigitalOcean and PyCharm.


00:19:07.260 --> 00:19:08.780
And so everybody who takes


00:19:08.780 --> 00:19:11.260
the Python for Entrepreneurs course


00:19:11.260 --> 00:19:15.760
gets $50 of credit for DigitalOcean for new customers


00:19:15.760 --> 00:19:18.620
and about something to the effect of $25 worth


00:19:18.620 --> 00:19:20.060
of PyCharm licenses.


00:19:20.060 --> 00:19:21.180
So it's pretty cool.


00:19:21.180 --> 00:19:22.820
Like the course costs $59,


00:19:22.820 --> 00:19:27.820
but you get like $75 worth of stuff for free


00:19:27.820 --> 00:19:28.700
just by signing up.


00:19:28.700 --> 00:19:29.860
So it's really cool.


00:19:29.860 --> 00:19:32.540
I'm super happy to be able to partner with those guys.


00:19:32.540 --> 00:19:35.900
- And I like that you've started to do a highlight page


00:19:35.900 --> 00:19:38.220
to highlight projects that people have finished


00:19:38.220 --> 00:19:39.060
that have gone through the course.


00:19:39.060 --> 00:19:41.820
- Yeah, yeah, I added a, yeah, so what I wanna do


00:19:41.820 --> 00:19:44.120
is all the students that are taking classes with me,


00:19:44.120 --> 00:19:45.820
I wanna make sure that if they build something


00:19:45.820 --> 00:19:48.200
they're proud of, they can share it with other people


00:19:48.200 --> 00:19:49.540
and let everyone know.


00:19:49.540 --> 00:19:53.020
So I think it's training.talkpython.fm/showcase


00:19:53.020 --> 00:19:55.540
and people are starting, I got a few more submissions now,


00:19:55.540 --> 00:19:58.380
starting to submit things and I gotta get them entered there


00:19:58.380 --> 00:20:00.940
so people are creating their websites or their businesses


00:20:00.940 --> 00:20:02.340
or just open source projects,


00:20:02.340 --> 00:20:03.520
and those will be featured there.


00:20:03.520 --> 00:20:06.220
- And if anybody's curious, this wasn't a canned plug.


00:20:06.220 --> 00:20:08.820
I'm actually just interested in what Michael's up to.


00:20:08.820 --> 00:20:10.580
- Thanks, Brian.


00:20:10.580 --> 00:20:11.400
Yeah, I appreciate it.


00:20:11.400 --> 00:20:12.240
It's cool stuff.


00:20:12.240 --> 00:20:13.300
It's really fun to be working on this.


00:20:13.300 --> 00:20:15.240
You know, it's like, you know, my life is a dream.


00:20:15.240 --> 00:20:17.240
I get to work on all these things all day long.


00:20:17.240 --> 00:20:18.460
It's fabulous. - Awesome.


00:20:18.460 --> 00:20:20.920
Well, I enjoyed talking with you again this week.


00:20:20.920 --> 00:20:23.940
- Yeah, as always, and we will be back next week


00:20:23.940 --> 00:20:26.580
with another round of Python goodness for everyone.


00:20:26.580 --> 00:20:27.420
- Thanks a lot.


00:20:27.420 --> 00:20:28.240
- Yeah, bye, Brian.


00:20:28.240 --> 00:20:29.080
Bye, everyone.


00:20:30.020 --> 00:20:31.720
Thank you for listening to Python Bytes.


00:20:31.720 --> 00:20:34.260
Follow the show on Twitter via @PythonBytes.


00:20:34.260 --> 00:20:37.440
That's Python Bytes as in B-Y-T-E-S.


00:20:37.440 --> 00:20:40.820
And get the full show notes at pythonbytes.fm.


00:20:40.820 --> 00:20:42.440
If you have a news item you want featured,


00:20:42.440 --> 00:20:44.880
just visit pythonbytes.fm and send it our way.


00:20:44.880 --> 00:20:48.040
We're always on the lookout for sharing something cool.


00:20:48.040 --> 00:20:49.900
On behalf of myself and Brian Auchin,


00:20:49.900 --> 00:20:51.400
this is Michael Kennedy.


00:20:51.400 --> 00:20:53.420
Thank you for listening and sharing this podcast


00:20:53.420 --> 00:20:55.060
with your friends and colleagues.

