00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 82, recorded June 13th, 2018.

00:00:09 I'm Michael Kennedy.

00:00:10 And I'm Brian Okken.

00:00:11 And we have, I think, quite a big episode.

00:00:14 I'm sure people have heard about this thing with GitHub.

00:00:18 What do you think?

00:00:19 Yeah, I think so, probably.

00:00:20 It's definitely when the news about Microsoft buying GitHub came out, it definitely made some waves.

00:00:25 So we're going to talk about that.

00:00:26 Before we do, though, let's say thanks to DigitalOcean.

00:00:29 DigitalOcean is sponsoring this episode and many of the Python Bytes ones.

00:00:32 So check them out at pythonbytes.fm/DigitalOcean and get $100 credit, which is pretty awesome.

00:00:38 So we'll do the GitHub conversation at the end.

00:00:41 We'll focus on that.

00:00:42 But Brian, you got something about documenting REST APIs first?

00:00:47 Yeah, so there's Doug Farrell.

00:00:49 I think we've highlighted one of someone's writing before.

00:00:52 I'm not sure.

00:00:53 But I definitely remember the name.

00:00:55 But he wrote on the RealPython site an article called Building and Documenting Python REST APIs with Flask and Connection.

00:01:06 So one of the things, as you know, I've been playing with a little command line application on testing code.

00:01:15 But I wanted to add a REST API.

00:01:17 And so this caught my eye.

00:01:19 And I had also heard of Swagger.

00:01:22 So this is one of the things that I like about this article.

00:01:25 It talks about, first of all, it doesn't assume that you already know what you're doing, which is nice.

00:01:30 It does talk about what REST is and what REST isn't.

00:01:34 It has a nice explanation of REST and how that works with web APIs.

00:01:40 And then I know a lot of people are, I think a lot of people use Swagger as a definition.

00:01:46 It's a YAML definition language to define what your API connections are.

00:01:53 And so this article uses that.

00:01:55 And then also it's to implement a little CRUD application.

00:01:59 And then I had never heard of this connection module or package.

00:02:05 And there's a...

00:02:06 Yeah, connection with an X.

00:02:07 Yeah.

00:02:08 Yeah.

00:02:09 So connection that takes a Swagger file and helps you to implement the API with Flask.

00:02:17 And it's just a fairly brief read, but I haven't done the demo yet, but I'd like to.

00:02:23 And one of the things that Swagger gives you, if you're familiar with Swagger, is that if you use it, you automatically get these cool user interfaces for your API that humans can read.

00:02:36 And they can...

00:02:37 So it's kind of a self-documenting API system.

00:02:40 So taking advantage of that is nice.

00:02:42 Yeah, that's really cool.

00:02:43 I definitely have heard of Swagger.

00:02:45 And I think Swagger is pretty cool.

00:02:47 I've checked it out some for some of the APIs I've done.

00:02:49 I've never heard of connection.

00:02:51 It's like...

00:02:52 So basically, you give it your Swagger file and just say, yeah, do that.

00:02:56 And it more or less does, huh?

00:02:59 That's pretty cool.

00:02:59 Yeah.

00:03:00 And then...

00:03:01 And there...

00:03:01 I mean, there's some pieces left over that you have to, like, tie everything together.

00:03:05 So this article goes through that.

00:03:07 And one of the nice things also that I...

00:03:09 I've seen a lot of REST API tutorials that kind of leave the ending.

00:03:12 Then you just have, like, a REST API with nothing using it.

00:03:17 This article finishes it up with a web application that uses the API to...

00:03:23 With some JavaScript plugging into it.

00:03:26 So it talks about that.

00:03:27 Which is good.

00:03:27 Because I wanted to play with this.

00:03:29 But I'm really not a...

00:03:30 I'm not a JavaScript person.

00:03:32 So having somebody write that for me so I can play with it.

00:03:35 That's cool.

00:03:35 Yeah.

00:03:36 Thanks, Doug, for saving Brian all the work.

00:03:38 Yeah.

00:03:39 And it turns out that a connection comes from Zalando, which is the largest online fashion platform in Europe.

00:03:48 I actually had them on Talk Python a while back, which is interesting.

00:03:51 I didn't put those two together.

00:03:52 Although I'm pretty sure we talked about that, like, two years ago and I just forgot.

00:03:55 Zalando.

00:03:56 I like that name.

00:03:57 Cool.

00:03:57 Yeah.

00:03:58 It's pretty cool.

00:03:58 I'm probably mispronouncing it, actually.

00:04:00 But that's all right.

00:04:01 That's pretty standard fare for our podcast, right?

00:04:03 Yeah.

00:04:03 Yeah.

00:04:04 Nice.

00:04:05 Yeah, that's a good pick.

00:04:05 I really like it.

00:04:07 I think Doug's article is well done.

00:04:08 And it's super thorough.

00:04:10 So, yeah, if you're looking to get into writing APIs with Flask, then this is worth checking out.

00:04:15 And certainly the swagger connection aspect is kind of unique, I think.

00:04:19 Yeah.

00:04:19 So mypy, that's Guido Von Rossum's main project, as far as I can tell right now.

00:04:26 Him and some folks from Dropbox are working on mypy, which is a static type checker for Python, right?

00:04:33 Yeah.

00:04:33 That's pretty cool.

00:04:34 Yeah.

00:04:34 They haven't heard much about it yet or recently.

00:04:36 Yeah.

00:04:37 They're still doing stuff on it, as far as I can tell.

00:04:39 And it's coming along.

00:04:40 The big news that I got for this next item is there's now a plugin for PyCharm for mypy, which is pretty cool.

00:04:49 So you're like in your PyCharm project, you hit a hotkey, and then you just get full mypy type checking.

00:04:55 Okay.

00:04:55 That's cool.

00:04:56 Yeah.

00:04:57 I like that.

00:04:57 Yeah.

00:04:58 That's pretty awesome.

00:04:58 So, yeah, this is by Ivan Levkinvitsky.

00:05:03 See?

00:05:04 What did I say about this?

00:05:04 So, yeah.

00:05:06 Thanks, Ivan.

00:05:06 This is really awesome, and it's great.

00:05:09 So, Ricky Tici asked, you know, what on Twitter, I linked to the conversation, says, you know,

00:05:15 like, PyCharm already has type checking, right?

00:05:18 So if you pull it up, it'll say, hey, you're calling this function, and it's using it wrong,

00:05:24 or you're trying to pass an int, and it takes a string, or vice versa.

00:05:26 It says, well, why would I care about this plugin into PyCharm, which already does that kind of stuff?

00:05:32 So, Ivan had a few bits of feedback.

00:05:34 He said, well, mypy is a little bit more strict and precise than PyCharm.

00:05:38 It's a lot more configurable with rules, and it type checks the entire program, like, all at once, not just, you know, what's loaded in your project.

00:05:47 So that's pretty cool.

00:05:49 And then sometimes people use mypy as part of a continuous integration path, and you might want to run mypy quickly before you do a push, just to know what the outcome will actually be.

00:06:00 So, you know, hotkey, and then you commit.

00:06:02 Pretty sweet.

00:06:03 Yeah, I'll have to check that out.

00:06:04 It's nice.

00:06:05 Yeah, I've been pretty much just leaning on the PyCharm type validation whenever I use it.

00:06:10 But I can certainly see projects where mypy has lots of value, and it's still my working theory that the reason they're so heavily working on it at Dropbox is they're trying to use mypy to convert to Python 3 safely, maybe even automatically.

00:06:23 Okay.

00:06:24 Well, speaking of automatic.

00:06:25 That's my working theory based on no data other than outside observation.

00:06:29 Was that, like, a really cool segue that I just missed?

00:06:31 Yeah.

00:06:32 Okay.

00:06:32 So I've got, like, what if you had, like, a tool that could just automatically upgrade for you?

00:06:39 That would be fantastic.

00:06:41 I know that there's, so there's a 2 to 3 already, but it's fairly non-invasive, the 2 to 3.

00:06:47 I think Python still ships with that, doesn't it?

00:06:50 I think so.

00:06:51 Yeah, I think so.

00:06:52 And I've used it a couple times, but it's pretty conservative.

00:06:55 It's basically to get you over the hump from 2 to 3.

00:06:58 But what if you want to go, like, farther?

00:07:00 And you want to, like, one of the things that I want to do is I want to take some of the code I was using prior to Python 3.6

00:07:09 and be able to convert some of the strings to f-strings because they're nicer to read.

00:07:14 And this will do it for me.

00:07:17 I found a tool called PyUpgrade.

00:07:19 And it's a tool, and it also can be a pre-commit hook that automatically upgrades your syntax to new versions of the language.

00:07:27 And it does all sorts of stuff, not just f-strings.

00:07:30 And the f-strings also is optional, so it doesn't do it by default.

00:07:33 Like, if you're converting to Python 3.5, don't do that.

00:07:36 Yeah, it'll crash.

00:07:37 But, for instance, the set literals have changed.

00:07:40 You can have an easier-to-read set literal syntax.

00:07:44 Also, dictionary comprehensions and some things like that.

00:07:48 The Unicode's changed a little bit.

00:07:50 And, yeah, anyway, being able to automatically do that is pretty fun.

00:07:53 Yeah, that's pretty awesome.

00:07:54 And 2 to 3 is make it run on Python 3, whereas this looks like make it embrace Python 3.

00:08:02 Yeah, definitely.

00:08:03 And, yeah, dictionary comprehensions are just awesome, so you may as well use the better syntax.

00:08:08 Yeah, that's pretty awesome.

00:08:10 And then you have another one for documentation, right?

00:08:12 Yeah, since this was a pretty short little thing, I thought I'd go along with this.

00:08:16 And we've all heard of black, and we've talked about it a few times on the show.

00:08:20 But an extension to this is blacken docs.

00:08:24 So it runs black on your REST and RST and Markdown files.

00:08:32 For any of the code examples inside of there, it makes sure that those are blackened also.

00:08:37 So that's fun.

00:08:38 That's pretty awesome.

00:08:39 You've got maybe like a little bit of demo code for your project that shows how to use it,

00:08:44 and that's in your documentation.

00:08:45 You could blacken it, and boom, it's formatted like the rest of your code, right?

00:08:49 I think blackened docs also, I was thinking it runs as a pre-commit hook,

00:08:54 but I'm not sure if it does or not.

00:08:55 And that's, actually, I don't think we've talked about pre-commit, so maybe that's for another time.

00:09:00 Yeah, yeah, let's talk about that.

00:09:01 But definitely, so, you know, sort of as part of your GitHub check-in, just magic happens.

00:09:06 Yeah.

00:09:06 Or your git check-in.

00:09:07 Yeah, awesome.

00:09:08 All right, speaking of awesome, DigitalOcean, they're pretty awesome, both as an infrastructure provider and for supporting the show.

00:09:15 So you can go from zero to a running server in about 60 seconds.

00:09:20 They have a bunch of cool different types of servers.

00:09:23 They even have one-click apps.

00:09:24 You want a ghost blog server on Linux, press a button, you know, 30, 40 seconds later,

00:09:29 you have it all set up and running.

00:09:30 Super nice.

00:09:32 So we've talked about Python.

00:09:34 So we've talked about legacy Python.

00:09:34 So we've talked about legacy Python.

00:09:34 And I believe that that original terminology of legacy Python was from a digital platform.

00:09:37 And then check them out.

00:09:38 All of our stuff is running on it.

00:09:40 At least all the Python bytes and my things are running on it, which has been super flawless,

00:09:45 like super happy customer and going to continue to be.

00:09:49 And if you want to be as well and get a credit, check them out, pythonbytes.fm/digitalocean.

00:09:52 So we've talked about Python and we've talked about legacy Python.

00:09:57 And I believe that that original terminology of legacy Python was from Matthias Poussigny,

00:10:03 who is from the Jupyter Project.

00:10:06 Actually, I had him back on episode 44 of Talk Python.

00:10:09 And he's part of this project called python3statement.org.

00:10:15 So this was sent over by Bruno Alla.

00:10:16 Thank you for that, Bruno.

00:10:17 And the idea is to have these projects make a public statement of dropping support for legacy Python sooner.

00:10:27 Yeah.

00:10:27 And we've seen that for some projects already, right?

00:10:30 Yeah, that's right.

00:10:31 And you'll see, you can go there and you can see the ones that are listed.

00:10:34 So they say they now have 44 projects that are pledged to drop legacy Python in less than 30 months.

00:10:40 And some already have, which is awesome, like Django, for example.

00:10:43 I don't know if Django is even listed there, but they should be.

00:10:46 Maybe they didn't make a pledge, but they did it.

00:10:48 Anyway, it basically shows you various projects that are committing to it.

00:10:53 And the main motivation is like we have tools and we have techniques to support legacy Python.

00:10:59 But at the same time, it's like a small but constant friction on newcomers, on adding new features.

00:11:05 And you just have to keep making sure your code works, right?

00:11:08 Like when, I think it was Django, when they switched to Python 3 only, they were able to drop a bunch of code and actually get smaller and have less to maintain.

00:11:16 So that's pretty awesome.

00:11:17 They say over there on their site, they say they're keen to see Python 3 reach its full potential.

00:11:23 And they think that they don't want to, you know, they're happy to have these projects support Python 2 to help smooth that transition, but not forever.

00:11:32 Right?

00:11:32 And actually, one of the things I like about the site is they have a really nice why switch to Python 3 with like articles from say Brett Cannon and other folks.

00:11:39 It's pretty cool.

00:11:40 It also has a timeline, a visual timeline that you can see the different projects that are signed up for this.

00:11:45 Oh, that's nice.

00:11:46 And when they're...

00:11:46 So this seems pretty heavily dominated by the data science crowd.

00:11:50 And I think that's because the folks that put the Python 3 statement.org together are data science people.

00:11:57 And they just have, you know, greater interactions and leverage on those projects.

00:12:01 So I'd like to see other projects like, you know, Django could come and be part of this and it would take them zero effort.

00:12:06 Right?

00:12:07 Because they're already doing that in Django 2 and things like this.

00:12:11 So, yeah, I just want to encourage people if they have a project to go over there and make a statement.

00:12:15 I'd like to see more projects do that, too, because there's a lot that I utilize that aren't on here.

00:12:20 But there's...

00:12:21 And they make it real easy.

00:12:22 You can either...

00:12:23 They said that they've got a GitHub issue tracker.

00:12:25 You can just submit an issue with your project information and have somebody else do it.

00:12:29 Or you can submit a pull request on this tool to pull in the information.

00:12:34 So both those are cool ideas.

00:12:35 So no reason to not do it.

00:12:37 That's right.

00:12:38 I definitely love it.

00:12:39 Soon we will speak of Legacy Python in the past.

00:12:42 Well, there's an elephant in the room.

00:12:44 It is.

00:12:45 Don't you mean a really giant octopus cat thing?

00:12:48 Octopus cat thing?

00:12:50 Yeah, the Octocat.

00:12:51 That's the logo of GitHub.

00:12:52 Okay.

00:12:53 Okay.

00:12:53 Got it.

00:12:54 Forgot about the cat part of it.

00:12:56 So...

00:12:56 Yeah.

00:12:56 The head is a cat and the bottom is an octopus.

00:12:58 I don't know.

00:12:58 You know, it's a pretty non-standard sort of creature.

00:13:01 But it's like a platypus, but it's the cat octopus version.

00:13:04 Okay.

00:13:05 It is definitely big news.

00:13:06 And I think the Twitter was blowing up with people both somewhat cautiously optimistic,

00:13:13 I'd say, and two totally freaked out.

00:13:16 And that is that Microsoft has paid or agreed to pay $7.5 billion for GitHub.

00:13:23 Yeah, that's a lot of money.

00:13:24 It is a lot of money.

00:13:25 When I first heard about that, I was a little bit on the slightly negative side of things.

00:13:31 Like, oh man, really?

00:13:32 The more I've looked into it, the more I feel like this is probably a positive thing.

00:13:38 So you and I haven't really had a chance to talk about this.

00:13:41 You've been like hanging out of the Eiffel Tower and stuff like that.

00:13:44 Yeah.

00:13:44 So this is our first chance we get to chat.

00:13:47 Yeah.

00:13:47 So tell me, what's your thought on this?

00:13:49 Well, like you, I was a little bit on the negative side at first.

00:13:54 And then actually you shared with me an article called Everyone Complaining About Microsoft Buying GitHub Needs to Offer a Better Solution.

00:14:02 And it's not just a glib article.

00:14:04 It's actually a nice article that talks about some of the history.

00:14:07 One of the reasons why I like it, it talks about it from the GitHub side

00:14:10 of saying really GitHub needed to go somewhere.

00:14:15 So it was still, I didn't know that GitHub was taking VC funding and didn't have a good roadmap ahead of it to,

00:14:23 or at least there's a speculation is there wasn't a sound model to continue.

00:14:29 Because the way GitHub makes, I mean, GitHub spends money in it clearly,

00:14:33 but it makes money on the enterprise side.

00:14:35 And it kind of makes sense to have, so this article talks about the three potential,

00:14:40 it makes sense to have it be bought or to, and to be bought by somebody that already has

00:14:45 ties into enterprise, have an enterprise sales staff and stuff like that.

00:14:49 So the, it said potentials were really Microsoft, Amazon, or Google.

00:14:54 I think that's what it listed.

00:14:55 Yeah, pretty much.

00:14:57 Yeah.

00:14:57 And that makes sense.

00:14:58 And I, from that standpoint, so on the, on the side of like being able to sell enterprise,

00:15:02 GitHub enterprise, those three totally would make sense.

00:15:06 And so I actually, after reading that, I'm like, actually, I would have been okay with

00:15:11 like any of those people buying it.

00:15:13 But Microsoft is not, is not the evil empire that it used to be.

00:15:17 So I guess, I guess I'm kind of okay with it.

00:15:20 So how about you?

00:15:21 That's sort of where I came around to as well.

00:15:23 I did a lot of looking into this, a lot of research when the first few days when this

00:15:27 was out to sort of figure out, okay, I have a gut reaction, but how should I feel about

00:15:32 it?

00:15:32 Like, I didn't realize how much trouble GitHub was actually in.

00:15:37 Like they have been, like they went like six months or something without a CEO at all.

00:15:43 Cause they just couldn't find one, which is not super encouraging.

00:15:47 They took tons of VC money.

00:15:49 There's a really interesting retweet, a self retweet.

00:15:52 It's not like a, a selfie tweet.

00:15:55 I don't know.

00:15:55 Whatever.

00:15:55 David Hanna-Meyer Hansen retweeted himself when this news came out and he tweeted something

00:16:02 that he wrote when GitHub first took VC money back in 2012, said, I love the GitHub product

00:16:08 to bits.

00:16:09 We're proud paying customers.

00:16:11 And I hope they figure out how to disarm this VC time bomb before it blows up.

00:16:15 That's what he said in 2012.

00:16:16 So of course, 2018, GitHub's time bomb has exploded right on time with the sale of the

00:16:22 Microsoft, the sales of Microsoft.

00:16:23 And I think, you know, when you take VC money, it's not okay to just be doing all right, right?

00:16:30 You got a 10 exit.

00:16:31 And if you're not 10 X in it, something's going to happen like a sale or, you know, if

00:16:37 it's going really great, it's an IPO.

00:16:38 If it's not going super great, it's some kind of sale and acquisition.

00:16:41 And, you know, they sort of went down that path.

00:16:43 You know, maybe GitHub wouldn't be what it is today if it weren't for that VC money.

00:16:47 But it does sound like something had to happen.

00:16:49 They had, so they had this sort of VC pressure.

00:16:51 They had, you know, financial pressure.

00:16:53 They had the sort of organizational stuff with like not be able to find a CEO.

00:16:57 There's a guy who was a CEO, Chris, I forgot his last name.

00:17:00 Sorry.

00:17:00 Who was the CEO in turn.

00:17:03 Then he stepped down and they became the CEO again.

00:17:06 And they stepped back down.

00:17:07 And so now Nate Friedman is going to be the CEO.

00:17:09 He's the co-founder of Xamarin, which is pretty awesome.

00:17:12 Yeah.

00:17:14 And I think if you look at Microsoft's history of acquiring companies and either making them

00:17:21 awesome or making them not awesome, it's a mixed bag a little bit.

00:17:25 All right.

00:17:25 So for example, under the not awesome category, people have put Skype.

00:17:30 I think, I don't know, Skype was actually having some issues as well, but it's Skype seems to

00:17:36 always be changing and never amazing.

00:17:37 Like it doesn't ever stabilize on a UI.

00:17:39 It's just always like, why is this hard?

00:17:41 Wait, it's differently hard now.

00:17:42 Now it's hard in a different way, but anyway, so like that's one example of not so great.

00:17:47 But I think an example of really them shepherding something pretty well is Xamarin, right?

00:17:51 Xamarin was a big open source way to build mobile apps on C#.

00:17:55 And Xamarin did a lot with bringing .NET to Linux.

00:18:00 So they bought them and I think they're still doing pretty well as independent organizations.

00:18:04 So it's a bit of a mixed bag.

00:18:06 I feel like taking care of a developer space is better than other tools.

00:18:10 And like regarding the Skype thing, although the interface might be all weird and occasionally

00:18:16 I still rely on it and it's still there.

00:18:18 I would rather have it be there than disappear without an owner if that was the other option.

00:18:23 Yeah, absolutely.

00:18:24 I know one of the fears is what's going to change with GitHub.

00:18:27 And I think it's big enough and in everybody's face enough that I don't think they're going to make major changes right away because they're under a microscope.

00:18:37 And they always will be.

00:18:39 I think the other thing is you got to look at where Microsoft is the last three or four years in terms of what their priorities are, right?

00:18:46 We got Sachin Nadella who's doing pretty good stuff.

00:18:48 But mostly what I mean is it used to be how can we make this jammed into some sort of lock in for Windows?

00:18:56 How can we make it like some kind of thing for Office you have to do?

00:18:59 You know, things like that.

00:19:01 Whereas lately it's always it's all about Azure, Azure, Azure.

00:19:05 How can we get people to use Azure?

00:19:06 And Azure is their cloud stuff, right?

00:19:09 It doesn't matter if you use Python or .NET or Linux or Node.js or whatever, right?

00:19:14 So I feel like there's not going to be pressure to, say, push people to one of their languages or something like that.

00:19:22 But there probably will be like up sales to Azure.

00:19:25 And, hey, if you get GitHub Enterprise, you get a certain amount of Azure credits.

00:19:28 So you get like brought into that world.

00:19:31 I think that that's the angle.

00:19:33 And I don't think there's going to be a lot of negative pressure because of it, right?

00:19:37 Like I can resist an Azure ad just as much.

00:19:40 I can resist all the other ones.

00:19:41 I don't really care.

00:19:42 But if they, you know, said, well, it only really like GitHub really only works well if you use Visual Studio.

00:19:46 Like that would be super bad.

00:19:47 I don't think that that is even in their interest as they see it these days.

00:19:51 So I feel like it's probably going to be okay unless they screw something up on accident.

00:19:57 I don't see that they'll screw it up on purpose.

00:19:59 As the community noted, you can always switch to GitLab if you want.

00:20:02 You can.

00:20:03 Yeah.

00:20:03 Yeah.

00:20:04 I was amused by that and also pleased.

00:20:07 I didn't, I don't.

00:20:08 At first there were people going, there's like a mass, mass exodus out of GitHub into GitLab.

00:20:13 And although the imports from GitHub to GitLab are going up dramatically, it's really kind of a drop in the bucket for how many projects are on GitHub.

00:20:24 Yeah, exactly.

00:20:25 But I do like that there's some discussion to say, hey, everybody, GitLab is not that bad.

00:20:30 I've used GitLab and I actually kind of like that this has highlighted the fact that it's not bad for something to be in GitLab, even if you're trying to get people to contribute.

00:20:39 It's pretty much the same process.

00:20:41 So it doesn't really matter too much.

00:20:43 Yeah, that's cool.

00:20:43 So in summary, you're sort of like summarizing my feelings.

00:20:46 Like I'm kind of like genuinely cautiously optimistic.

00:20:50 I think Microsoft brings tons of resources to GitHub and maybe GitHub will be more awesome.

00:20:55 They're going to keep running as an independent organization.

00:20:58 They've got somebody who's pretty awesome leading it.

00:21:00 So these are all good things.

00:21:03 Yeah.

00:21:03 We've got the Linux Foundation actually said something pretty surprising.

00:21:07 So they wrote up an official thing on it after a few days and said, Microsoft's GitHub buy is a win for open source.

00:21:14 And one of the guys there who's been, I forgot his name, has been super anti-Microsoft sort of said, look, these are all the reasons why this is good and I'm happy for it, which is surprising, I suppose.

00:21:25 That's cool.

00:21:25 And then also Nat Friedman did an Ask Me Anything session on Reddit where there was quite a few questions and answers on like what's going to happen and things like that.

00:21:37 Yeah, that's cool.

00:21:38 There's Atom also.

00:21:39 Like how does Atom and code, they're kind of overlapping.

00:21:44 So they'll keep both of those, things like that.

00:21:47 Yeah, that's encouraging.

00:21:48 And it's also interesting that VS Code is based on Electron.js, which was extracted out of Atom, right?

00:21:55 So Electron.js used to be called Atom Shell.

00:21:58 Okay, interesting.

00:21:59 Yeah, in its early days.

00:22:00 Yeah.

00:22:00 So one thing I do want to throw out there for people who want to dig into this a little bit more is this podcast called Exponent.

00:22:08 It's one of my absolute favorite podcasts actually.

00:22:10 And the guys there, they basically do tech business analysis and they did a really nice job of looking at the sort of motivation and the pluses and negatives of Microsoft buying GitHub.

00:22:23 So I would link to that in the show notes, episode 154.

00:22:25 Yeah, I listened to that.

00:22:27 It was good.

00:22:27 The one thing I thought was interesting is nobody's really mentioned the, to me, the obvious truth that Microsoft would just rather be the owner of GitHub than have any of its competitors be the owner of GitHub.

00:22:39 I think that's real and legitimate.

00:22:41 I agree.

00:22:42 And one other, like I had said my positive, the negative that I somehow forgot to tie together there was the thing that made me just go, I'd rather not see this.

00:22:52 Even at the beginning was this is such a consolidation of a really major tech player, right?

00:23:00 We already have so many things being sucked into Google, Facebook, Amazon, Microsoft.

00:23:06 And there was like this nice independent place that wasn't any particular technology stack at all.

00:23:12 It was just GitHub.

00:23:13 You could go there and you could build your software and they didn't try to encourage you to use Ruby or whatever it was, right?

00:23:20 There's just like that was a place where the code goes.

00:23:22 And now there's a less of that in the world.

00:23:24 And I think that's a negative.

00:23:26 Yeah.

00:23:26 There's still GitLab.

00:23:27 There's still GitLab.

00:23:28 That's true.

00:23:28 Yeah.

00:23:29 There's definitely, I mean, there's also Atlassian Bitbucket, right?

00:23:31 So that's another possibility as well.

00:23:33 But I think GitHub still is a special place for social coding and open source collaboration.

00:23:38 And I don't think it's going to change.

00:23:40 It'll change if they muck it up.

00:23:42 And yeah, so we're a pretty fickle group.

00:23:45 But I think they know that.

00:23:46 But we've seen, yeah, like we've already hashed.

00:23:49 Microsoft is a different company towards open source than it used to be.

00:23:53 All right.

00:23:53 Well, that's our thoughts.

00:23:55 If you have your own thoughts, feel free to put them in the show notes at pythonbytes.fm

00:24:00 slash 82.

00:24:01 And just go to the discuss section down at the bottom.

00:24:04 All right.

00:24:04 That's it for our news.

00:24:05 Brian, you got any extra stuff you want to chat about?

00:24:08 No, not really.

00:24:09 Other than I did figure out how to bring home a over 100-year-old Venetian glass chandelier

00:24:16 on an airplane.

00:24:17 That was fun.

00:24:18 That's insane.

00:24:20 Can I get a bulkhead seat?

00:24:22 My chandelier needs to have a little room to breathe.

00:24:25 Yeah, I had to take the thing apart and put it in bubble wrap and put it in two suitcases.

00:24:28 Oh, how interesting.

00:24:29 That's awesome.

00:24:30 We made it.

00:24:30 How about you?

00:24:31 Anything going on?

00:24:32 Nothing too major.

00:24:33 I'm working on a couple of projects like always and have news on them eventually.

00:24:37 But I do want to give a shout out to Pi Ladies.

00:24:39 So we were just in Cleveland, Ohio, right?

00:24:42 Had a nice time at Pi Con there not long ago.

00:24:44 Yeah.

00:24:44 Yeah.

00:24:45 So Cleveland now has an official Pi Ladies meetup or group.

00:24:49 So they just launched and they're going to have their first meeting on June 22nd.

00:24:53 And I linked to their meetup and their Twitter and everything in the show notes.

00:24:56 So if you're interested in Pi Ladies and you're somewhat near Cleveland or you can even stream

00:25:01 it live.

00:25:01 I think they're streaming their stuff live on YouTube.

00:25:03 So you could check that all out just in the links to the show notes.

00:25:06 Awesome.

00:25:06 That's great.

00:25:07 Cool.

00:25:07 Yeah.

00:25:07 One more good step down that path.

00:25:09 That's awesome.

00:25:10 All right.

00:25:11 So thanks.

00:25:12 And it was great to share the GitHub conversation with you.

00:25:16 Yeah, it was.

00:25:17 I thought we'd be more argumentative, but we're pretty much in agreement.

00:25:20 Yeah.

00:25:20 That's too bad.

00:25:22 Would have been fun, but we don't argue too much, I don't think.

00:25:25 All right.

00:25:25 We'll talk to you next week.

00:25:27 Yeah.

00:25:27 Catch you next week.

00:25:28 Bye.

00:25:28 Thank you for listening to Python Bytes.

00:25:31 Follow the show on Twitter via at Python Bytes.

00:25:34 That's Python Bytes as in B-Y-T-E-S.

00:25:37 And get the full show notes at pythonbytes.fm.

00:25:40 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:25:45 We're always on the lookout for sharing something cool.

00:25:47 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:25:51 Thank you for listening and sharing this podcast with your friends and colleagues.

