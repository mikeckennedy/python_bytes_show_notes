
00:00:00.000 --> 00:00:01.920
- Hello and welcome to Python Bytes,


00:00:01.920 --> 00:00:03.700
where we deliver Python news and headlines


00:00:03.700 --> 00:00:05.080
directly to your earbuds.


00:00:05.080 --> 00:00:10.080
This is episode 277, recorded March 28th, 2022.


00:00:10.080 --> 00:00:12.360
And I am Brian Okken.


00:00:12.360 --> 00:00:14.000
- I am Michael Kennedy.


00:00:14.000 --> 00:00:15.440
- And I'm Thomas Geiger.


00:00:15.440 --> 00:00:17.400
- Welcome Thomas, welcome to the show.


00:00:17.400 --> 00:00:19.400
Thanks for coming on and being a guest.


00:00:19.400 --> 00:00:22.320
Can you tell us a little bit about you?


00:00:22.320 --> 00:00:23.880
- Thanks Brian and thanks Michael.


00:00:23.880 --> 00:00:26.360
Big fan, so it's an honor being here.


00:00:26.360 --> 00:00:29.660
I'm the creator and maintainer of the PyProtask runner,


00:00:29.660 --> 00:00:31.660
which it so happens you discussed last week.


00:00:31.660 --> 00:00:34.900
So I come in riding on that wave.


00:00:34.900 --> 00:00:37.140
- Yeah.


00:00:37.140 --> 00:00:38.500
- Yeah, very cool projects.


00:00:38.500 --> 00:00:39.340
Congrats on it.


00:00:39.340 --> 00:00:40.860
- Thank you very much.


00:00:40.860 --> 00:00:43.180
- Well, so Michael, it's March.


00:00:43.180 --> 00:00:44.820
- It is March.


00:00:44.820 --> 00:00:46.380
It's like March madness, right?


00:00:46.380 --> 00:00:47.200
- Yeah.


00:00:47.200 --> 00:00:49.700
- So Chris May sent in this thing that says,


00:00:49.700 --> 00:00:51.580
"Hey, Python Bytes people,


00:00:51.580 --> 00:00:53.580
here's a fun thing to cover, March madness."


00:00:53.580 --> 00:00:56.300
But for Python, and for those of you


00:00:56.300 --> 00:01:01.300
who are not college basketball fans and follow it carefully.


00:01:01.300 --> 00:01:03.880
March Madness is basically the playoffs


00:01:03.880 --> 00:01:07.300
for the college basketball and it's single elimination.


00:01:07.300 --> 00:01:09.880
You start with 16, I think,


00:01:09.880 --> 00:01:11.720
then every team plays another one,


00:01:11.720 --> 00:01:13.260
then it's down to eight, then down to four and so on.


00:01:13.260 --> 00:01:15.900
So that's the idea, but for Python.


00:01:15.900 --> 00:01:16.740
- Oh.


00:01:16.740 --> 00:01:18.460
- And check it here, we have round one.


00:01:18.460 --> 00:01:21.420
I guess it starts with 32 and then 16 and so on.


00:01:21.420 --> 00:01:23.340
So we've got these different rounds


00:01:23.340 --> 00:01:25.420
and some of the rounds have already occurred,


00:01:25.420 --> 00:01:28.960
but the winner, the champion is still yet to be crowned.


00:01:28.960 --> 00:01:31.400
So you all need to get out there and vote.


00:01:31.400 --> 00:01:32.600
I'll tell you how in a second.


00:01:32.600 --> 00:01:35.920
- I'm a bit amazed NumPy is outdoing pytest there.


00:01:35.920 --> 00:01:39.080
- It's outdoing it pretty handily.


00:01:39.080 --> 00:01:40.520
I mean, it did outdo it, right?


00:01:40.520 --> 00:01:42.440
So if you go here, what you see is this,


00:01:42.440 --> 00:01:43.760
this tournament bracket.


00:01:43.760 --> 00:01:46.320
And the first ones were like NumPy versus Redis


00:01:46.320 --> 00:01:49.280
and NumPy won.


00:01:49.280 --> 00:01:52.680
And then pytest versus LXML, Parser,


00:01:52.680 --> 00:01:54.820
and pytest won that one handily.


00:01:54.820 --> 00:01:58.380
And then NumPy and pytest had to face off.


00:01:58.380 --> 00:02:00.940
And as Thomas says, surprisingly,


00:02:00.940 --> 00:02:04.900
NumPy pretty badly beat up on pytest.


00:02:04.900 --> 00:02:06.100
Brian, are you okay with this?


00:02:06.100 --> 00:02:07.180
How are you feeling?


00:02:07.180 --> 00:02:10.720
- I didn't get to vote, so I'm not sure how this was done.


00:02:10.720 --> 00:02:11.560
- Yeah.


00:02:11.560 --> 00:02:13.580
- This is gonna be the start of a long blood feud


00:02:13.580 --> 00:02:15.620
between the NumPy community and pytest.


00:02:15.620 --> 00:02:19.740
- Well, and the other part of this story I'm telling,


00:02:19.740 --> 00:02:21.460
the other side of the bracket


00:02:21.460 --> 00:02:23.340
was Scikit-learn versus Beautiful Soup.


00:02:23.340 --> 00:02:25.020
And Beautiful Soup, oh my gosh,


00:02:25.020 --> 00:02:26.380
I think it was a buzzer beater.


00:02:26.380 --> 00:02:30.460
Came in at the last second and it's like 52% to 48%,


00:02:30.460 --> 00:02:32.340
Beautiful Soup won.


00:02:32.340 --> 00:02:36.040
And so now this week we're in the elite eight.


00:02:36.040 --> 00:02:37.860
And so you can come and vote.


00:02:37.860 --> 00:02:38.700
I'm gonna vote.


00:02:38.700 --> 00:02:42.100
My metric here is sort of how useful


00:02:42.100 --> 00:02:43.540
and how impactful is this thing.


00:02:43.540 --> 00:02:45.540
Not necessarily do I like it better.


00:02:45.540 --> 00:02:46.380
So I'm gonna vote over here.


00:02:46.380 --> 00:02:49.300
I'm gonna say for NumPy versus Beautiful Soup, NumPy.


00:02:49.300 --> 00:02:51.020
I actually would use Beautiful Soup probably more,


00:02:51.020 --> 00:02:53.820
but I think NumPy is more impactful.


00:02:53.820 --> 00:02:56.820
Pip versus Matplotlib, I'll pip all day long,


00:02:56.820 --> 00:02:57.820
same reason.


00:02:57.820 --> 00:02:59.220
Pandas versus Docker.


00:02:59.220 --> 00:03:01.860
Ooh, I do like me some Docker.


00:03:01.860 --> 00:03:03.220
I'm gonna go with pandas.


00:03:03.220 --> 00:03:04.660
And then wheel versus requests,


00:03:04.660 --> 00:03:05.580
I'm gonna go with requests.


00:03:05.580 --> 00:03:07.380
I know wheel is important under the covers,


00:03:07.380 --> 00:03:09.780
but I don't see it, so I don't wanna think about it.


00:03:09.780 --> 00:03:11.740
So requests, top of mind, I use that all the time.


00:03:11.740 --> 00:03:13.260
So here you can see I voted,


00:03:13.260 --> 00:03:14.860
and everyone else who would like to,


00:03:14.860 --> 00:03:16.300
you can just click the link in the show notes,


00:03:16.300 --> 00:03:17.740
and you can vote too.


00:03:17.740 --> 00:03:19.740
And these are basically open for a week,


00:03:19.740 --> 00:03:22.440
and then the elimination happens and it moves on.


00:03:22.440 --> 00:03:24.700
We're going to see what happens in the final four,


00:03:24.700 --> 00:03:26.540
coming real soon actually.


00:03:26.540 --> 00:03:29.540
>> We're going to have to highlight this earlier in


00:03:29.540 --> 00:03:34.460
the month next year so that people can vote.


00:03:34.460 --> 00:03:38.400
>> You want to create some voting blocks like in the reality TV shows.


00:03:38.400 --> 00:03:40.760
The one on the island, Survivor.


00:03:40.760 --> 00:03:43.300
>> Yes, Survivor, exactly.


00:03:43.300 --> 00:03:48.300
I'm sad to say Scikit-learn's torch has been extinguished.


00:03:48.300 --> 00:03:51.260
>> You're going to have to leave the island. Yes, that's right.


00:03:51.260 --> 00:03:53.740
Anyway, thank you, Chris, for sending this in.


00:03:53.740 --> 00:03:57.180
This is fun and it's very low stakes.


00:03:57.180 --> 00:03:58.660
It's just sort of, you know,


00:03:58.660 --> 00:04:00.220
people just enjoy this for what it is.


00:04:00.220 --> 00:04:02.140
Yeah, bragging rights and whatnot.


00:04:02.140 --> 00:04:06.020
So we'll send out a tweet or something about it.


00:04:06.020 --> 00:04:07.780
You can get in there and check this out.


00:04:07.780 --> 00:04:09.380
>> Definitely.


00:04:09.380 --> 00:04:11.460
>> Yeah. How about you, Brian? What's your next one?


00:04:11.460 --> 00:04:13.980
>> I'd like to talk about NB preview,


00:04:13.980 --> 00:04:15.400
which actually I thought we covered,


00:04:15.400 --> 00:04:16.800
but I couldn't find it anywhere.


00:04:16.800 --> 00:04:20.680
So NB preview is a notebook previewer.


00:04:20.680 --> 00:04:23.720
So IPython or Jupyter Notebook.


00:04:23.720 --> 00:04:27.920
It's neat, it's a command line thing and I


00:04:27.920 --> 00:04:31.080
like to spend a lot of time on the command line.


00:04:31.080 --> 00:04:37.120
Once you pip install it or since it's not really part of your project,


00:04:37.120 --> 00:04:39.840
I used pipx installs of this.


00:04:39.840 --> 00:04:40.600
>> Yeah.


00:04:40.600 --> 00:04:46.120
>> But you say NB preview and then you can give it some options,


00:04:46.120 --> 00:04:49.140
but then a notebook file name and it will,


00:04:49.140 --> 00:04:55.200
it just previews your notebook in ASCII, which is awesome.


00:04:55.200 --> 00:05:00.320
But it's not just ASCII, it's rich.


00:05:00.320 --> 00:05:04.640
So we've got colors and nice colors and tables and stuff.


00:05:04.640 --> 00:05:06.080
There's actually quite a few features


00:05:06.080 --> 00:05:07.440
that I wanna run down.


00:05:07.440 --> 00:05:10.760
One of the things I loved right away was,


00:05:10.760 --> 00:05:13.200
it's not just a file.


00:05:13.200 --> 00:05:16.080
I said, I tried it out on some local files,


00:05:16.080 --> 00:05:19.960
but you can give it like a URL or something.


00:05:19.960 --> 00:05:21.520
There's a great way to,


00:05:21.520 --> 00:05:22.800
you can get a whole bunch of stuff.


00:05:22.800 --> 00:05:25.440
You don't have to have local notebook files to put it in.


00:05:25.440 --> 00:05:26.360
- Oh, that's cool.


00:05:26.360 --> 00:05:31.480
- Yeah, here it's showing even you can curl something


00:05:31.480 --> 00:05:32.500
and pipe it to it.


00:05:32.500 --> 00:05:34.600
So it'll take inputs as pipes.


00:05:34.600 --> 00:05:37.180
And the fact that it's a command line tool


00:05:37.180 --> 00:05:39.240
and it deals with pipes correctly


00:05:39.240 --> 00:05:40.560
is what I really like about it.


00:05:40.560 --> 00:05:42.320
So you can pipe a notebook to it.


00:05:42.320 --> 00:05:43.940
I don't know if you do that or not,


00:05:43.940 --> 00:05:45.680
but you might want to pipe output.


00:05:45.680 --> 00:05:48.400
So by default, you get these nice colors,


00:05:48.400 --> 00:05:50.940
but if you pipe it to an output,


00:05:50.940 --> 00:05:52.960
you can pipe it to grep or something,


00:05:52.960 --> 00:05:54.920
and you can grep for things.


00:05:54.920 --> 00:05:56.800
So this is great.


00:05:56.800 --> 00:05:58.400
I don't know if you've ever tried to


00:05:58.400 --> 00:06:00.620
grep for something in a notebook,


00:06:00.620 --> 00:06:02.360
but there's a lot of junk around it.


00:06:02.360 --> 00:06:04.160
There's a lot of formatting stuff.


00:06:04.160 --> 00:06:06.040
If that's not really what you're looking for,


00:06:06.040 --> 00:06:07.620
it's not helpful. So having


00:06:07.620 --> 00:06:09.780
this tool to strip that out, it's pretty nice.


00:06:09.780 --> 00:06:11.200
>> Oh, yeah. That's really nice.


00:06:11.200 --> 00:06:13.720
I love the ability to just pull this up and view them.


00:06:13.720 --> 00:06:15.440
Given that it's based on Rich,


00:06:15.440 --> 00:06:18.320
like it has formatting for all the cells.


00:06:18.320 --> 00:06:21.880
I mean, Jupyter is like Markdown plus code


00:06:21.880 --> 00:06:24.920
and rich highlighting for both of those.


00:06:24.920 --> 00:06:25.760
So that's cool.


00:06:25.760 --> 00:06:27.160
- Yeah, it looks like it's got some pigments


00:06:27.160 --> 00:06:28.760
under the hood also,


00:06:28.760 --> 00:06:31.680
which just so happens Ian wrote up last week, I think.


00:06:31.680 --> 00:06:32.840
- Yeah, exactly.


00:06:32.840 --> 00:06:35.000
So a lot of continuations said this week.


00:06:35.000 --> 00:06:36.680
- So a lot of cool stuff that you would expect


00:06:36.680 --> 00:06:37.980
like code highlighting and stuff.


00:06:37.980 --> 00:06:40.080
But the thing that like really stood out to me


00:06:40.080 --> 00:06:44.720
is what does it do with images, like graphs and stuff?


00:06:44.720 --> 00:06:46.920
and the images are kind of amazing.


00:06:46.920 --> 00:06:51.340
They're like these, by default, these block things,


00:06:51.340 --> 00:06:56.160
which not that clear to use for utilities,


00:06:56.160 --> 00:06:58.600
but it kind of shows you what it's gonna do.


00:06:58.600 --> 00:07:00.080
And there's a few options.


00:07:00.080 --> 00:07:05.080
You can do this block level thing.


00:07:05.080 --> 00:07:07.920
And I like the characters, so it does like--


00:07:07.920 --> 00:07:08.760
- The ASCII art.


00:07:08.760 --> 00:07:11.340
- ASCII art stuff of your images.


00:07:11.340 --> 00:07:14.440
or it uses the braille stuff.


00:07:14.440 --> 00:07:16.140
I don't know if there's an example here,


00:07:16.140 --> 00:07:20.280
but you can do braille for all the dots to show up,


00:07:20.280 --> 00:07:21.860
which is kind of neat.


00:07:21.860 --> 00:07:23.860
It even does like cool data frame rendering.


00:07:23.860 --> 00:07:27.980
So if you've got a data frame printed out there


00:07:27.980 --> 00:07:31.500
in your notebook, it'll format it nicely.


00:07:31.500 --> 00:07:35.320
So even late latech is a formatted,


00:07:35.320 --> 00:07:36.700
which is kind of a surprise.


00:07:36.700 --> 00:07:37.700
I didn't expect that.


00:07:37.700 --> 00:07:39.640
So that's kind of neat.


00:07:39.640 --> 00:07:44.160
Anyway, I specifically, oh, cool, hyperlinks too.


00:07:44.160 --> 00:07:46.480
So you can click on HTML that's in there.


00:07:46.480 --> 00:07:47.680
That's kind of neat.


00:07:47.680 --> 00:07:51.120
The thing that I really liked that is the simple part though


00:07:51.120 --> 00:07:53.920
is to be able to strip stuff and pipe it to grep


00:07:53.920 --> 00:07:54.760
and things like that.


00:07:54.760 --> 00:07:55.940
So this is handy.


00:07:55.940 --> 00:07:57.800
- Nice.


00:07:57.800 --> 00:07:59.160
Thomas, what do you think?


00:07:59.160 --> 00:08:00.840
- Oh, this is great.


00:08:00.840 --> 00:08:02.960
I don't really use notebooks all that much


00:08:02.960 --> 00:08:03.800
to be honest with you.


00:08:03.800 --> 00:08:05.080
So it's a little bit lost on me,


00:08:05.080 --> 00:08:08.000
but more command line is absolutely good.


00:08:08.000 --> 00:08:11.320
and it looks delicious.


00:08:11.320 --> 00:08:12.400
- Yeah, it does.


00:08:12.400 --> 00:08:14.880
It's the terminal, the TUIs,


00:08:14.880 --> 00:08:16.200
the terminal user interfaces


00:08:16.200 --> 00:08:18.520
are definitely coming on strong these days.


00:08:18.520 --> 00:08:21.120
We forgot to ask you, what kind of Python do you do?


00:08:21.120 --> 00:08:23.200
What's your flavor of Python?


00:08:23.200 --> 00:08:24.240
Are you building APIs?


00:08:24.240 --> 00:08:25.880
Are you doing data science?


00:08:25.880 --> 00:08:27.080
Like what kind?


00:08:27.080 --> 00:08:30.560
- Well, the Piper project is what consumes most of my hours.


00:08:30.560 --> 00:08:32.920
So I guess that's normal-ish Python


00:08:32.920 --> 00:08:35.060
as opposed to notebook-ish Python.


00:08:37.520 --> 00:08:40.200
Data science, I don't really do too much either.


00:08:40.200 --> 00:08:44.540
So it's mostly traditional style Python programming.


00:08:44.540 --> 00:08:45.720
- Yeah, got it.


00:08:45.720 --> 00:08:47.200
All right, well, your topic is up next.


00:08:47.200 --> 00:08:48.040
Tell us about it.


00:08:48.040 --> 00:08:48.860
- Well, funnily enough,


00:08:48.860 --> 00:08:50.880
this is very traditional programming.


00:08:50.880 --> 00:08:55.880
What I bring for you for your delectation is PyFakeFS,


00:08:55.880 --> 00:09:01.240
which I think is a sadly, relatively unknown


00:09:01.240 --> 00:09:02.280
open source library.


00:09:02.280 --> 00:09:04.440
And I'd like to give them some props and recognition


00:09:04.440 --> 00:09:06.360
because I think it's amazing.


00:09:06.360 --> 00:09:08.280
and it's made a huge difference to me


00:09:08.280 --> 00:09:10.360
and my own code and the Piper project.


00:09:10.360 --> 00:09:13.080
So hopefully this helps out some other people.


00:09:13.080 --> 00:09:16.800
Now, what it is, is a fake file system.


00:09:16.800 --> 00:09:21.520
So in a nutshell, it intercepts all calls from Python


00:09:21.520 --> 00:09:23.280
to the actual file system.


00:09:23.280 --> 00:09:25.600
So if you think of the open function,


00:09:25.600 --> 00:09:29.720
the built-in open that is, or shutil or pathlib,


00:09:29.720 --> 00:09:32.160
all of those that might have real-world side effects


00:09:32.160 --> 00:09:34.240
in terms of the disk,


00:09:34.240 --> 00:09:36.380
the fake file system will intercept these.


00:09:36.380 --> 00:09:38.700
And this is completely transparent.


00:09:38.700 --> 00:09:41.120
And which is to say that your functional code


00:09:41.120 --> 00:09:42.720
doesn't need to know about this.


00:09:42.720 --> 00:09:44.640
So the patching happens without you


00:09:44.640 --> 00:09:46.280
needing to inject something,


00:09:46.280 --> 00:09:49.840
or without you needing to go and alter your actual code


00:09:49.840 --> 00:09:53.160
to take countenance of the system.


00:09:53.160 --> 00:09:55.720
Now, what's great about this is


00:09:55.720 --> 00:09:57.400
the moment you start talking about


00:09:57.400 --> 00:09:58.240
testing a file system,


00:09:58.240 --> 00:10:00.640
you're almost by definition in integration testing


00:10:00.640 --> 00:10:02.320
or functional testing terrain.


00:10:02.320 --> 00:10:04.480
like it's not a unit test anymore,


00:10:04.480 --> 00:10:06.980
which comes with its own disadvantages.


00:10:06.980 --> 00:10:09.360
So if you do want a unit test,


00:10:09.360 --> 00:10:12.480
then let's consider a simplistic example, right?


00:10:12.480 --> 00:10:15.480
If you want to, if you're the code under test


00:10:15.480 --> 00:10:16.920
writes an output file.


00:10:16.920 --> 00:10:19.020
So first of all, you need to patch out that


00:10:19.020 --> 00:10:20.700
if you're in your unit testing framework


00:10:20.700 --> 00:10:22.400
with something like mock open.


00:10:22.400 --> 00:10:24.280
But secondly, you probably have a path


00:10:24.280 --> 00:10:25.720
that have been there somewhere


00:10:25.720 --> 00:10:28.420
where you're either creating the parent directories


00:10:28.420 --> 00:10:31.000
for the path to check that they exist


00:10:31.000 --> 00:10:32.800
before you try and write to that location.


00:10:32.800 --> 00:10:35.300
So now we already have two things we have to patch out.


00:10:35.300 --> 00:10:36.960
And then on top of that,


00:10:36.960 --> 00:10:39.080
you might be doing it in a loop,


00:10:39.080 --> 00:10:41.360
you might be writing more than one file,


00:10:41.360 --> 00:10:44.080
and the testing becomes very clumsy very quickly.


00:10:44.080 --> 00:10:48.780
Whereas once you use the PyFakeFS library,


00:10:48.780 --> 00:10:50.520
you can just write as normal,


00:10:50.520 --> 00:10:52.100
validate against that file system


00:10:52.100 --> 00:10:54.180
using the standard Python inputs.


00:10:54.180 --> 00:10:56.520
And what you end up with is,


00:10:56.520 --> 00:10:57.920
and once the test finishes,


00:10:57.920 --> 00:10:59.180
it all just goes out of scope


00:10:59.180 --> 00:11:01.220
and you don't even need to bother cleaning it up.


00:11:01.220 --> 00:11:02.060
What's--


00:11:02.060 --> 00:11:02.880
- Yeah, that's cool.


00:11:02.880 --> 00:11:03.920
And you can specify the string


00:11:03.920 --> 00:11:05.240
that is the content to the file.


00:11:05.240 --> 00:11:06.520
So when the thing reads it,


00:11:06.520 --> 00:11:08.840
you can control the what it sees, right?


00:11:08.840 --> 00:11:10.280
- So it comes with a,


00:11:10.280 --> 00:11:11.520
and Brian, you're gonna love this.


00:11:11.520 --> 00:11:15.000
It comes with a super handy pytest fixture.


00:11:15.000 --> 00:11:17.980
So if you are using pytest, which you should,


00:11:17.980 --> 00:11:21.920
you can just add the FS fixture to your unit test.


00:11:21.920 --> 00:11:24.440
And now everything in your unit test


00:11:24.440 --> 00:11:26.940
will be going to the fake file system


00:11:26.940 --> 00:11:30.540
rather than the real underlying file system.


00:11:30.540 --> 00:11:31.700
- That's pretty cool.


00:11:31.700 --> 00:11:34.620
- Yeah, and the helper functions allows you,


00:11:34.620 --> 00:11:36.020
like you were hinting at, Mike,


00:11:36.020 --> 00:11:39.180
you can specify encodings, you can write in binary,


00:11:39.180 --> 00:11:40.920
it's super useful.


00:11:40.920 --> 00:11:42.580
Something else that I use quite a lot


00:11:42.580 --> 00:11:45.140
is the ability to switch between Linux, Mac,


00:11:45.140 --> 00:11:46.900
and Windows file systems,


00:11:46.900 --> 00:11:49.400
which again, for Piper, is such a boon


00:11:49.400 --> 00:11:52.180
to be able to test the cross-platform compatibility.


00:11:52.180 --> 00:11:53.020
- Oh, interesting.


00:11:53.020 --> 00:11:56.180
So if it asks for the representation


00:11:56.180 --> 00:11:58.340
from a pathlib thing, it'll do C colon backslash


00:11:58.340 --> 00:11:59.500
instead of forward slash.


00:11:59.500 --> 00:12:01.360
- Yeah, exactly right.


00:12:01.360 --> 00:12:04.340
So all of these things are, you know,


00:12:04.340 --> 00:12:06.960
I'm relatively conservative when it comes to pulling in


00:12:06.960 --> 00:12:09.540
new libraries because I'm,


00:12:09.540 --> 00:12:11.160
especially if the library feels heavy


00:12:11.160 --> 00:12:15.200
and I feel I can do it just using standard lib functionality


00:12:15.200 --> 00:12:17.480
and also with some libraries, I'm a little bit worried


00:12:17.480 --> 00:12:19.480
that they might stop being maintained


00:12:19.480 --> 00:12:20.880
or something like that.


00:12:20.880 --> 00:12:24.880
But PyFakeFS has been around since 2006,


00:12:24.880 --> 00:12:26.720
developed by Google.


00:12:26.720 --> 00:12:29.320
It was open sourced in 2011.


00:12:29.320 --> 00:12:30.960
The maintainers are really on it.


00:12:30.960 --> 00:12:34.200
I submitted and had a PR merged earlier this year


00:12:34.200 --> 00:12:37.660
within an afternoon on a Saturday,


00:12:37.660 --> 00:12:41.120
which for open source is very quick.


00:12:41.120 --> 00:12:43.120
So they're on top of it.


00:12:43.120 --> 00:12:45.160
Great project, check it out on GitHub.


00:12:45.160 --> 00:12:46.520
Check out the documentation too.


00:12:46.520 --> 00:12:49.960
It's well-documented and it's super useful.


00:12:49.960 --> 00:12:51.400
- And I was looking at the toxini.


00:12:51.400 --> 00:12:54.880
It looks like it's tested to be compatible with PyPI also,


00:12:54.880 --> 00:12:56.020
which is kind of nice.


00:12:56.020 --> 00:12:58.640
- Yeah, yeah, absolutely.


00:12:58.640 --> 00:13:01.180
Especially for what I'm doing in Piper,


00:13:01.180 --> 00:13:03.120
where wrangling configuration files


00:13:03.120 --> 00:13:05.920
is a lot of the functionality as a task runner.


00:13:05.920 --> 00:13:08.720
You're forever reading JSON, writing out YAML,


00:13:08.720 --> 00:13:11.880
converting between formats, converting between encodings,


00:13:11.880 --> 00:13:14.720
swapping out values inside configuration files,


00:13:14.720 --> 00:13:16.960
merging configuration files.


00:13:16.960 --> 00:13:20.440
And I'm now able to test all of this stuff


00:13:20.440 --> 00:13:22.340
without having to write integration tests


00:13:22.340 --> 00:13:26.480
for each and every permutation, which has been such a boon.


00:13:26.480 --> 00:13:28.600
- This actually does way more than I thought it did.


00:13:28.600 --> 00:13:30.280
This is, I'm gonna check this out.


00:13:30.280 --> 00:13:31.120
This is neat.


00:13:31.120 --> 00:13:34.080
- Yeah, there's a lot of cool stuff there, absolutely.


00:13:34.080 --> 00:13:35.840
- Yeah, and also if you've--


00:13:35.840 --> 00:13:39.920
- Chris and Alvaro both think pretty, pretty neat out there.


00:13:39.920 --> 00:13:40.760
They're digging it.


00:13:40.760 --> 00:13:42.840
- Yeah, and I see the comment there.


00:13:42.840 --> 00:13:45.480
It is like Tempath with the difference


00:13:45.480 --> 00:13:49.480
that it's not actually writing to the disk itself, of course.


00:13:49.480 --> 00:13:51.660
And what's also a little bit difficult


00:13:51.660 --> 00:13:53.080
when you're using the temp directory


00:13:53.080 --> 00:13:55.480
and the temp file modules is,


00:13:55.480 --> 00:13:56.960
depending on how you're testing,


00:13:56.960 --> 00:13:58.660
it doesn't always help you very much.


00:13:58.660 --> 00:14:00.960
Because the thing that might be generating the file


00:14:00.960 --> 00:14:02.960
might be the code under test.


00:14:02.960 --> 00:14:05.320
So you're effectively gonna have to intercept that


00:14:05.320 --> 00:14:07.720
and create a temp file to attach to it,


00:14:07.720 --> 00:14:10.040
and then the temp file will clean itself up.


00:14:10.040 --> 00:14:13.720
But that starts interrupting the flow


00:14:13.720 --> 00:14:15.900
of the functional code so much that I start questioning


00:14:15.900 --> 00:14:18.920
whether it's even a useful unit test anymore.


00:14:18.920 --> 00:14:20.100
- Yeah, absolutely.


00:14:20.100 --> 00:14:21.500
- Well, very, very cool.


00:14:21.500 --> 00:14:23.620
So, Brian, before we move on,


00:14:23.620 --> 00:14:24.980
let me tell you about our sponsor, all right?


00:14:24.980 --> 00:14:25.980
- All right.


00:14:25.980 --> 00:14:28.100
- This episode of Python Bytes is brought to you


00:14:28.100 --> 00:14:31.260
by Microsoft for Startups Founders Hub.


00:14:31.260 --> 00:14:32.960
Starting a business is hard.


00:14:32.960 --> 00:14:35.500
By some estimates, over 90% of startups


00:14:35.500 --> 00:14:38.240
will go out of business in just their first year.


00:14:38.240 --> 00:14:40.180
With that in mind, Microsoft for Startups


00:14:40.180 --> 00:14:43.620
set out to understand what startups need to be successful


00:14:43.620 --> 00:14:45.380
and to create a digital platform


00:14:45.380 --> 00:14:47.380
to help them overcome those challenges.


00:14:47.380 --> 00:14:50.000
Microsoft for Startups Founders Hub was born.


00:14:50.000 --> 00:14:52.940
Founders Hub provides all founders at any stage


00:14:52.940 --> 00:14:56.920
with free resources to solve their startup challenges.


00:14:56.920 --> 00:14:59.340
The platform provides technology benefits,


00:14:59.340 --> 00:15:02.220
access to expert guidance and skilled resources,


00:15:02.220 --> 00:15:05.380
mentorship and networking connections, and much more.


00:15:05.380 --> 00:15:06.860
Unlike others in the industry,


00:15:06.860 --> 00:15:09.060
Microsoft for Startups Founders Hub


00:15:09.060 --> 00:15:12.060
doesn't require startups to be investor-backed


00:15:12.060 --> 00:15:14.900
or third-party validated to participate.


00:15:14.900 --> 00:15:17.380
Founders Hub is truly open to all.


00:15:17.380 --> 00:15:18.960
So what do you get if you join them?


00:15:18.960 --> 00:15:21.060
You speed up your development with free access


00:15:21.060 --> 00:15:23.940
to GitHub and Microsoft Cloud computing resources


00:15:23.940 --> 00:15:27.180
and the ability to unlock more credits over time.


00:15:27.180 --> 00:15:28.420
To help your startup innovate,


00:15:28.420 --> 00:15:30.820
Founders Hub is partnering with innovative companies


00:15:30.820 --> 00:15:34.300
like OpenAI, a global leader in AI research and development


00:15:34.300 --> 00:15:37.000
to provide exclusive benefits and discounts.


00:15:37.000 --> 00:15:39.300
Through Microsoft for Startups Founders Hub,


00:15:39.300 --> 00:15:42.060
becoming a founder is no longer about who you know.


00:15:42.060 --> 00:15:43.860
You'll have access to their mentorship network,


00:15:43.860 --> 00:15:45.920
giving you a pool of hundreds of mentors


00:15:45.920 --> 00:15:48.580
across a range of disciplines and areas


00:15:48.580 --> 00:15:51.000
like idea validation, fundraising,


00:15:51.000 --> 00:15:53.120
management and coaching, sales and marketing,


00:15:53.120 --> 00:15:55.740
as well as specific technical stress points.


00:15:55.740 --> 00:15:57.380
You'll be able to book a one-on-one meeting


00:15:57.380 --> 00:15:58.220
with the mentors,


00:15:58.220 --> 00:16:01.000
many of whom are former founders themselves.


00:16:01.000 --> 00:16:02.600
Make your idea a reality today


00:16:02.600 --> 00:16:06.140
with the critical support you'll get from Founders Hub.


00:16:06.140 --> 00:16:07.080
To join the program,


00:16:07.080 --> 00:16:10.240
just visit pythonbytes.fm/foundershub,


00:16:10.240 --> 00:16:12.620
all one word, the link's in your show notes.


00:16:12.620 --> 00:16:14.740
Thank you to Microsoft for supporting the show.


00:16:14.740 --> 00:16:16.320
- Awesome, thank you Microsoft.


00:16:16.320 --> 00:16:18.780
Now, let me tell you about something


00:16:18.780 --> 00:16:21.060
that sounds incredibly simple,


00:16:21.060 --> 00:16:23.140
but as you kind of unwind it,


00:16:23.140 --> 00:16:24.580
you're like, wait, it does that too?


00:16:24.580 --> 00:16:25.420
Oh, it does that too?


00:16:25.420 --> 00:16:27.100
Oh, that's kind of cool.


00:16:27.100 --> 00:16:29.020
Pretty similar to the fake file system


00:16:29.020 --> 00:16:30.580
that Thomas was just telling us about.


00:16:30.580 --> 00:16:32.780
This thing called Sternum.


00:16:32.780 --> 00:16:36.020
Sternum is a fantastic name.


00:16:36.020 --> 00:16:38.660
It's short for string enum, right?


00:16:38.660 --> 00:16:40.380
Enums, when were enums added?


00:16:40.380 --> 00:16:41.820
Was that three, four?


00:16:41.820 --> 00:16:44.060
something like that a little while ago.


00:16:44.060 --> 00:16:47.340
So enums have been in Python for a while,


00:16:47.340 --> 00:16:50.140
pretty much pre-history now that those are


00:16:50.140 --> 00:16:52.060
no longer supported.


00:16:52.060 --> 00:16:54.140
And with enums, you can write cool code


00:16:54.140 --> 00:16:57.460
that says this class, its fields are enumerations,


00:16:57.460 --> 00:17:01.580
and then you can say, you know, enum type dot enum value,


00:17:01.580 --> 00:17:03.820
and you can use that instead of magic words.


00:17:03.820 --> 00:17:07.560
So for example, you might have HTTP method


00:17:07.560 --> 00:17:10.260
or something like that, or let's say HTTP status,


00:17:10.260 --> 00:17:13.440
Let's start with that one because that's like a built-in type thing you could do easily.


00:17:13.440 --> 00:17:20.240
You could have a 200, a 201, a 400, a 500, a 404, those kinds of things.


00:17:20.240 --> 00:17:25.480
You could have like HTTP statuses dot and then those types with those numbers, right?


00:17:25.480 --> 00:17:28.520
But there's a couple of challenges to working with those.


00:17:28.520 --> 00:17:33.200
Their natural representation is a number, not a string.


00:17:33.200 --> 00:17:37.280
And I know you can derive from enum and then also derive from string.


00:17:37.280 --> 00:17:40.200
But like I said, more stuff happening than just that.


00:17:40.200 --> 00:17:47.720
So this sternum allows you to create enums like that and use the enum auto, enum.auto


00:17:47.720 --> 00:17:48.720
field.


00:17:48.720 --> 00:17:52.240
So I can say, here's an HTTP method, but like verbs is really probably what it should be.


00:17:52.240 --> 00:17:56.360
So you can have a get, you can have a head and a post and a put, and you just say auto,


00:17:56.360 --> 00:17:57.640
auto, auto, auto.


00:17:57.640 --> 00:18:03.440
But the actual representation is that the get is a string get.


00:18:03.440 --> 00:18:09.640
And the like, put, want, or post is, you know, put or post.


00:18:09.640 --> 00:18:12.880
Yeah, and Alvaro is out there pointing out, thank you, that sternum was


00:18:12.880 --> 00:18:15.360
temporarily part of 3.10, but that it was dropped.


00:18:15.360 --> 00:18:19.360
I saw a note that it might be included in 3.11 again.


00:18:19.360 --> 00:18:21.360
Okay, that'd be fantastic.


00:18:21.360 --> 00:18:23.760
Yeah, so there's some really neat stuff in here.


00:18:23.760 --> 00:18:29.000
For example, one of the things that's nice is because this thing basically has the value string,


00:18:29.000 --> 00:18:30.840
where you're using it,


00:18:30.840 --> 00:18:33.560
you can actually use it where a string would be accepted.


00:18:33.560 --> 00:18:37.360
So here if you're doing a request to a URL and you've got to say method equals,


00:18:37.360 --> 00:18:42.080
Here you can say method equals HTTP method dot head or whatever from the enum,


00:18:42.080 --> 00:18:45.840
and it directly passes just the string head to the method.


00:18:45.840 --> 00:18:48.320
It's a really nice way to gather up


00:18:48.320 --> 00:18:53.880
string values that are part of a group like HTTP verbs or something like that.


00:18:53.880 --> 00:18:54.680
>> Wow.


00:18:54.680 --> 00:18:55.760
>> That's pretty neat.


00:18:55.760 --> 00:18:58.240
>> Okay. The side question is,


00:18:58.240 --> 00:18:59.920
I don't really use auto much.


00:18:59.920 --> 00:19:03.160
Is auto used anywhere else or is auto just an enum?


00:19:03.160 --> 00:19:04.920
>> It comes out of the enum module.


00:19:04.920 --> 00:19:06.680
>> Okay. It's part of this.


00:19:06.680 --> 00:19:08.680
So it's part of the enum thing.


00:19:08.680 --> 00:19:09.500
- Right.


00:19:09.500 --> 00:19:11.640
- And one of the things I really like about this


00:19:11.640 --> 00:19:14.840
that is super tricky with enums is databases.


00:19:14.840 --> 00:19:17.220
So for example, imagine we had,


00:19:17.220 --> 00:19:20.480
we had like get, head and post.


00:19:20.480 --> 00:19:22.620
So we just had auto, but it was an integer based one.


00:19:22.620 --> 00:19:24.280
So it was like one, two, three.


00:19:24.280 --> 00:19:26.400
And we store it in the database, right?


00:19:26.400 --> 00:19:29.120
As a one or two or three, and then you parse it back fine.


00:19:29.120 --> 00:19:32.980
But then somebody adds another auto thing in there


00:19:32.980 --> 00:19:34.160
and they don't put it at the end.


00:19:34.160 --> 00:19:35.840
They're like, oh, this one starts with a D.


00:19:35.840 --> 00:19:37.220
so it goes after delete.


00:19:37.220 --> 00:19:37.640
>> Yeah.


00:19:37.640 --> 00:19:40.020
>> Well, all the stuff after that one


00:19:40.020 --> 00:19:43.020
is now off by one in the database.


00:19:43.020 --> 00:19:44.940
This if it goes into the database,


00:19:44.940 --> 00:19:47.920
it goes in as a string and it'll parse back as the string.


00:19:47.920 --> 00:19:51.520
It also has cool stuff like lowercase sternum,


00:19:51.520 --> 00:19:53.660
and uppercase stringenum.


00:19:53.660 --> 00:19:57.500
You can derive from that instead and then no matter how you define


00:19:57.500 --> 00:20:00.060
your fields you get a lowercase string version


00:20:00.060 --> 00:20:01.940
or an uppercase string version.


00:20:01.940 --> 00:20:02.780
>> Okay.


00:20:02.780 --> 00:20:04.980
>> There's other cases as well.


00:20:04.980 --> 00:20:07.100
There's Pascal case, snake case,


00:20:07.100 --> 00:20:10.660
kebab case, macro case, and camel case.


00:20:10.660 --> 00:20:12.820
Go crazy on them people.


00:20:12.820 --> 00:20:14.460
You can have the same code,


00:20:14.460 --> 00:20:17.780
but then the string representation varies.


00:20:17.780 --> 00:20:19.740
That's pretty awesome.


00:20:19.740 --> 00:20:20.820
>> I think I'm going to go with


00:20:20.820 --> 00:20:22.820
kebab case just because that's fun to say.


00:20:22.820 --> 00:20:24.940
>> It's so fun, I know.


00:20:24.940 --> 00:20:29.900
You can also directly assign the value.


00:20:29.900 --> 00:20:34.340
Enum value equals some string and then you don't have to worry


00:20:34.340 --> 00:20:36.300
about a casing that's exactly the string that you put.


00:20:36.300 --> 00:20:36.780
>> Yeah.


00:20:36.780 --> 00:20:39.300
>> Right? So there it is.


00:20:39.300 --> 00:20:41.860
It's like regular enum but strings.


00:20:41.860 --> 00:20:44.700
As people pointed out that it's not


00:20:44.700 --> 00:20:46.420
that different from what people have


00:20:46.420 --> 00:20:47.940
been considering for CPython.


00:20:47.940 --> 00:20:50.780
I'm pretty sure I'd heard about it as well in being in there,


00:20:50.780 --> 00:20:52.500
but the fact that it's not there,


00:20:52.500 --> 00:20:53.700
maybe it'll be there, maybe not.


00:20:53.700 --> 00:20:54.780
We'll see. It's interesting.


00:20:54.780 --> 00:20:56.740
But this has a lot of cool features and if you're


00:20:56.740 --> 00:20:59.540
not using 3.11 or want to depend upon it,


00:20:59.540 --> 00:21:01.620
this is a small little project.


00:21:01.620 --> 00:21:03.540
>> Yeah. It's nice. Cool.


00:21:03.540 --> 00:21:05.660
- Yeah, Thomas, what do you think?


00:21:05.660 --> 00:21:06.940
- This is great.


00:21:06.940 --> 00:21:11.340
I especially like how it's smart enough to auto-cast


00:21:11.340 --> 00:21:13.180
so that we use the enum,


00:21:13.180 --> 00:21:16.300
it will end up translating to a string


00:21:16.300 --> 00:21:17.860
when you're actually hitting the database


00:21:17.860 --> 00:21:19.700
or your underlying API.


00:21:19.700 --> 00:21:21.900
- Yeah, it makes it actually usable in those situations,


00:21:21.900 --> 00:21:24.420
just directly, yeah, which I think is great.


00:21:24.420 --> 00:21:26.780
- And funnily enough, the example they chose is so great


00:21:26.780 --> 00:21:28.340
by way of great documentation


00:21:28.340 --> 00:21:32.860
because HTTP verbs are just almost the example


00:21:32.860 --> 00:21:34.620
of magic strings, right?


00:21:34.620 --> 00:21:37.100
- Yeah, exactly, exactly.


00:21:37.100 --> 00:21:38.380
Quite cool.


00:21:38.380 --> 00:21:40.220
All right, Brian, over to you.


00:21:40.220 --> 00:21:42.020
- I'd like to review your code a little bit.


00:21:42.020 --> 00:21:44.580
No, I don't know.


00:21:44.580 --> 00:21:46.540
I was trying to do a transition thing going.


00:21:46.540 --> 00:21:49.300
But so Tim Hopper wrote this article,


00:21:49.300 --> 00:21:50.580
which I absolutely love,


00:21:50.580 --> 00:21:53.460
and it's called "Code Review Guidelines


00:21:53.460 --> 00:21:55.000
for Data Science Teams."


00:21:55.000 --> 00:21:57.980
And I just recommend everybody go read it.


00:21:57.980 --> 00:21:59.980
It's short, it's good.


00:21:59.980 --> 00:22:01.940
But one of the things I really like


00:22:01.940 --> 00:22:06.940
that he highlighted is before he got into the code review


00:22:06.940 --> 00:22:09.580
or the code review guidelines,


00:22:09.580 --> 00:22:13.920
he started with why are we doing a code review?


00:22:13.920 --> 00:22:15.940
What is a code review for?


00:22:15.940 --> 00:22:18.620
And this is something I think that is important


00:22:18.620 --> 00:22:21.440
just to talk with whoever, whatever team is going on


00:22:21.440 --> 00:22:23.320
and talking, maybe even sticking it


00:22:23.320 --> 00:22:27.760
in a participation guideline in a project,


00:22:27.760 --> 00:22:31.340
open source project even, is that it's not just,


00:22:31.340 --> 00:22:33.260
it's not just so that we can look at the code


00:22:33.260 --> 00:22:35.180
or check it, merge it.


00:22:35.180 --> 00:22:39.640
So his reasons for a code review are first code correctness,


00:22:39.640 --> 00:22:41.160
and that's what we think about


00:22:41.160 --> 00:22:43.060
is making sure the code's correct,


00:22:43.060 --> 00:22:47.400
but also code familiarity.


00:22:47.400 --> 00:22:50.320
So you might be the expert on a project


00:22:50.320 --> 00:22:52.860
and everybody else is only kind of new on it.


00:22:52.860 --> 00:22:55.940
You still should have code reviews for your code changes


00:22:55.940 --> 00:22:58.740
so that everybody else can watch also


00:22:58.740 --> 00:23:02.160
and get familiar with the changes going on.


00:23:02.160 --> 00:23:03.680
So that's nice.


00:23:03.680 --> 00:23:05.100
Design feedback, of course,


00:23:05.100 --> 00:23:08.280
and mutual learning and regression protection


00:23:08.280 --> 00:23:11.060
are all the reasons why he did a code review.


00:23:11.060 --> 00:23:15.300
And the other thing I also love


00:23:15.300 --> 00:23:17.220
is what to leave out of code review.


00:23:17.220 --> 00:23:20.180
So code reviews are not about trying to impose


00:23:20.180 --> 00:23:22.420
your guidelines on somebody else.


00:23:22.420 --> 00:23:28.580
And they're also not a reason to push off responsibility


00:23:28.580 --> 00:23:32.540
So as long as your code is getting reviewed, it does not be correct, right?


00:23:32.540 --> 00:23:34.540
Because somebody will catch any problems.


00:23:34.540 --> 00:23:37.160
It's a bad thing to do in a code review.


00:23:37.160 --> 00:23:41.780
So make sure your code is correct, that as far as it's all cleaned up as soon as you


00:23:41.780 --> 00:23:45.700
– what you think is ready, and then submit it.


00:23:45.700 --> 00:23:47.260
But then also be nice.


00:23:47.260 --> 00:23:49.660
So being nice is important.


00:23:49.660 --> 00:23:51.100
>> Yeah, very cool.


00:23:51.100 --> 00:23:54.500
>> So then he goes through – I'm not going to go through all these here, but he goes


00:23:54.500 --> 00:24:01.780
through different things about what to think about before you do a create a pull request


00:24:01.780 --> 00:24:06.820
and then what to do if you're reviewing a pull request. And a lot of these are just


00:24:06.820 --> 00:24:13.020
they're just around being a kind human to the person on the other end. So that's really


00:24:13.020 --> 00:24:14.020
kind of what it's about.


00:24:14.020 --> 00:24:19.420
So I saw a mention in there somewhere that I really liked, which is, I mean, by nature,


00:24:19.420 --> 00:24:23.680
a code review is sort of nitpicky, right? You're paying attention to flaws, but it's


00:24:23.680 --> 00:24:25.340
- It's nice to compliment also.


00:24:25.340 --> 00:24:28.040
Like if there's something nifty or cool or cute,


00:24:28.040 --> 00:24:30.920
acknowledge, compliment, call attention to it.


00:24:30.920 --> 00:24:32.360
- Oh, that's a good point.


00:24:32.360 --> 00:24:33.360
And I really like that.


00:24:33.360 --> 00:24:35.280
I also think, so one of the things


00:24:35.280 --> 00:24:38.440
that you don't wanna do in a code review


00:24:38.440 --> 00:24:41.240
is like one of the guidelines is


00:24:41.240 --> 00:24:42.940
we're not looking for perfection.


00:24:42.940 --> 00:24:48.240
That isn't one of the things we're looking for.


00:24:48.240 --> 00:24:51.280
But so what happens if you notice something


00:24:51.280 --> 00:24:53.120
and you're like, it's a little weird.


00:24:53.120 --> 00:24:55.080
I'd like to say something about it,


00:24:55.080 --> 00:24:57.100
but I don't know how to say that.


00:24:57.100 --> 00:24:58.980
His comment is to have,


00:24:58.980 --> 00:25:01.760
if you've got a minor thing that you want to comment on,


00:25:01.760 --> 00:25:03.220
go ahead and sort of tag it.


00:25:03.220 --> 00:25:06.760
He recommends tagging it with knit in IT,


00:25:06.760 --> 00:25:08.940
or a nitpick or something.


00:25:08.940 --> 00:25:11.760
Just to be clear that I'm,


00:25:11.760 --> 00:25:13.120
I don't know if I like the word knit,


00:25:13.120 --> 00:25:15.880
but to be clear, hey, I noticed this,


00:25:15.880 --> 00:25:17.980
maybe we want to change this in the future.


00:25:17.980 --> 00:25:19.460
Somehow indicate to the person


00:25:19.460 --> 00:25:21.080
that they don't need to fix this


00:25:21.080 --> 00:25:22.960
before the PR gets merged.


00:25:22.960 --> 00:25:24.120
you're just noticed it.


00:25:24.120 --> 00:25:27.240
So, and it might be something that the person


00:25:27.240 --> 00:25:30.360
that's submitting the PR didn't realize in the first place


00:25:30.360 --> 00:25:31.880
and went, oh yeah, I don't like that either,


00:25:31.880 --> 00:25:32.700
I'm gonna fix it.


00:25:32.700 --> 00:25:36.400
Or yes, I do know about that and I do plan on fixing it later


00:25:36.400 --> 00:25:37.400
or whatever.


00:25:37.400 --> 00:25:40.520
So just an interesting guideline.


00:25:40.520 --> 00:25:44.120
And I think it can just, I'm kind of,


00:25:44.120 --> 00:25:47.280
I've been on a kick lately of reading things about community


00:25:47.280 --> 00:25:50.460
and creating cohesive teams.


00:25:50.460 --> 00:25:52.980
And the review process is definitely somewhere


00:25:52.980 --> 00:25:57.060
that you need to have attention to for most teams.


00:25:57.060 --> 00:25:58.820
So anyway, that's it.


00:25:58.820 --> 00:25:59.660
- Yeah, I like it.


00:25:59.660 --> 00:26:01.180
This is really handy.


00:26:01.180 --> 00:26:05.360
I love the idea of having as much as possible


00:26:05.360 --> 00:26:07.340
have the automation make the complaints.


00:26:07.340 --> 00:26:08.180
- Definitely.


00:26:08.180 --> 00:26:09.980
- And like Thomas said, have the people give the compliments


00:26:09.980 --> 00:26:11.940
and the sort of interesting discussion, right?


00:26:11.940 --> 00:26:13.860
But like if black can just take care of the formatting,


00:26:13.860 --> 00:26:15.940
like you shouldn't have to debate the formatting.


00:26:15.940 --> 00:26:16.780
- Yeah.


00:26:16.780 --> 00:26:18.340
- And if a linter can tell you, you know what,


00:26:18.340 --> 00:26:19.540
there's something wrong with this,


00:26:19.540 --> 00:26:21.820
just let the linter be the bad guy.


00:26:21.820 --> 00:26:23.540
- Yeah, it was one of the guidelines that he brought up,


00:26:23.540 --> 00:26:26.140
which is interesting, is especially with CI,


00:26:26.140 --> 00:26:29.900
and we're pushing a lot of things on Black or linters,


00:26:29.900 --> 00:26:33.940
that to wait, so wait a little bit.


00:26:33.940 --> 00:26:37.660
So don't review a code review right away,


00:26:37.660 --> 00:26:40.580
especially not if the CI hasn't finished.


00:26:40.580 --> 00:26:44.220
Let the CI finish and let the person creating it


00:26:44.220 --> 00:26:46.800
fix anything before you jump in.


00:26:46.800 --> 00:26:50.720
I also, pet peeve of mine, don't comment on it right away.


00:26:50.720 --> 00:26:53.160
I might, one of the things I do frequently


00:26:53.160 --> 00:26:58.160
is I'll create a PR, especially in a work setting.


00:26:58.160 --> 00:27:01.800
I'll create a PR, and then there's some complicated things.


00:27:01.800 --> 00:27:04.720
So I plan on going through and writing some comments


00:27:04.720 --> 00:27:07.120
around some of the complicated bits,


00:27:07.120 --> 00:27:09.480
like why did I do certain things?


00:27:09.480 --> 00:27:14.480
And so if you see a PR right away, especially from me,


00:27:15.000 --> 00:27:17.660
wait 10 minutes or so before commenting on it,


00:27:17.660 --> 00:27:19.760
'cause I might have answered your question


00:27:19.760 --> 00:27:21.400
before you get a chance to ask it.


00:27:21.400 --> 00:27:24.180
- An exclamation might be coming, yeah, indeed.


00:27:24.180 --> 00:27:25.680
- Anyway.


00:27:25.680 --> 00:27:28.040
- Awesome, all right, Thomas, over to you.


00:27:28.040 --> 00:27:30.880
- We're about to head into controversy,


00:27:30.880 --> 00:27:33.360
because there's been some discord.


00:27:33.360 --> 00:27:34.720
- Are you gonna bash on something?


00:27:34.720 --> 00:27:35.560
Come on, come on.


00:27:35.560 --> 00:27:38.560
- I'm gonna bash it over the head with a,


00:27:38.560 --> 00:27:39.600
like a caveman.


00:27:39.600 --> 00:27:40.700
- Bash it with Python.


00:27:40.700 --> 00:27:44.440
- So partly inspired on the continuation


00:27:44.440 --> 00:27:51.080
last week's discussion you had about running subprocesses from Python. And Itamar Turner


00:27:51.080 --> 00:27:57.440
Trauring wrote an article this week called "Please, please, emphasis mine, stop writing


00:27:57.440 --> 00:28:04.700
shell scripts." Now, this, as you might imagine, raised a bit of questions on the usual places


00:28:04.700 --> 00:28:11.660
like Reddit and Twitter. But if nothing else, controversy aside, the article is a very good


00:28:11.660 --> 00:28:18.600
and succinct summary of the most common gotchas and problems with Bash, which we can almost


00:28:18.600 --> 00:28:26.060
all summarize as that error handling is strange if you're used to other programming languages,


00:28:26.060 --> 00:28:31.300
like Bash is a kingdom unto its own when it comes to programming languages. So he also


00:28:31.300 --> 00:28:37.060
gives a great recommendation for if you really, really have to write in Bash, what you might


00:28:37.060 --> 00:28:44.740
want to do, and that would be to use the unofficial Bash strict mode, which basically involves


00:28:44.740 --> 00:28:49.420
setting that boilerplate on top of your Bash. I'm not going to cover all the details, but


00:28:49.420 --> 00:28:54.980
basically the E and the U option will fail immediately on error. It will fail on unset


00:28:54.980 --> 00:29:01.300
variables, and if you add the pipe fail option, errors won't pass between pipes. A pipe will


00:29:01.300 --> 00:29:05.060
actually fail immediately if there's an error process.


00:29:05.060 --> 00:29:11.940
- Like it should. - Like it should, indeed. But the point is,


00:29:11.940 --> 00:29:16.420
Bash is an old technology and there's a lot of problems here. And let me add, although


00:29:16.420 --> 00:29:23.260
this article mostly aims at Bash, I am very happy, including Bourne and SSH and Fish and


00:29:23.260 --> 00:29:30.140
TakeYourPick underneath the same dictum. Now, he goes on to talk about the typical reasons


00:29:30.140 --> 00:29:36.700
we hear of why we should be using Bash, of which the top one is, well, it's the most


00:29:36.700 --> 00:29:42.540
common -- you're guaranteed to have an SH runtime, at least, on any given machine that


00:29:42.540 --> 00:29:49.140
you're going to be using. But the point is, not really. Because when we're doing code


00:29:49.140 --> 00:29:54.580
automation, almost by definition, the programming language you're coding in, its runtime is


00:29:54.580 --> 00:30:00.100
on the server. So this argument that somehow it's good to go to the lowest common denominator,


00:30:00.100 --> 00:30:06.660
aka sh or bash, when you already have Python on the machine is sort of, well, why? And especially


00:30:06.660 --> 00:30:12.740
when we're talking about Python, which is so great at automation, it just baffles the mind.


00:30:12.740 --> 00:30:16.420
That's a good point. You don't have to set up a compiler or any of that kind of business.


00:30:16.420 --> 00:30:20.580
I'd say the same thing about Golang. I mean, by definition, when you're compiling Go,


00:30:20.580 --> 00:30:25.180
the Go compiler is right there. You might as well be writing a Go script, or whichever


00:30:25.180 --> 00:30:33.020
your programming language is. Maybe if you're starting to talk about C, or C++, there's


00:30:33.020 --> 00:30:38.500
maybe a different argument that we can have there. The second point it brings up is what


00:30:38.500 --> 00:30:44.420
I'm going to paraphrase as "get good", which is this Bash guru response which we saw a


00:30:44.420 --> 00:30:49.940
bit of in the last week, that you're just bad at Bash. If you were better at Bash, you


00:30:49.940 --> 00:30:52.020
wouldn't be complaining about these things.


00:30:52.020 --> 00:30:54.700
Which, you know, is not a great reason.


00:30:54.700 --> 00:30:57.260
It's, you know, just because,


00:30:57.260 --> 00:30:59.600
it's not better because it's hard, right?


00:30:59.600 --> 00:31:02.020
We have better tools available.


00:31:02.020 --> 00:31:04.740
We have tools that behave more responsibly.


00:31:04.740 --> 00:31:07.460
And something that I think is very important,


00:31:07.460 --> 00:31:09.100
in line with what you've been talking about, Brian,


00:31:09.100 --> 00:31:11.220
about building teams, is very often


00:31:11.220 --> 00:31:13.660
that your automation activities start becoming


00:31:13.660 --> 00:31:17.220
this specialized zone that only two or three people


00:31:17.220 --> 00:31:18.820
on the team can even look at


00:31:18.820 --> 00:31:20.500
because they're the Bash gurus


00:31:20.500 --> 00:31:22.700
and everyone else is too afraid to touch it.


00:31:22.700 --> 00:31:24.540
Whereas if you keep your automation activities


00:31:24.540 --> 00:31:26.080
within the language you're coding in,


00:31:26.080 --> 00:31:27.860
suddenly everyone on the team


00:31:27.860 --> 00:31:30.340
can start carrying their weight, right?


00:31:30.340 --> 00:31:33.860
- Yeah, I kind of relate to this a lot.


00:31:33.860 --> 00:31:35.660
I've been on projects where we've had


00:31:35.660 --> 00:31:37.740
a lot of our automation in Bash


00:31:37.740 --> 00:31:40.860
and others that have been other languages.


00:31:40.860 --> 00:31:45.220
Right now, it was one of those things of,


00:31:45.220 --> 00:31:46.500
especially if you're not,


00:31:46.500 --> 00:31:48.700
If you're not looking on a Windows environment,


00:31:48.700 --> 00:31:51.980
Bash isn't there automatically.


00:31:51.980 --> 00:31:56.460
A lot of the team members might not be familiar with it.


00:31:56.460 --> 00:31:59.100
The thing that I don't know if he addresses this,


00:31:59.100 --> 00:32:01.560
the thing that I was thinking about was,


00:32:01.560 --> 00:32:04.800
we all know Python if we're programming Python,


00:32:04.800 --> 00:32:10.900
but we might not all know the automation parts of it,


00:32:10.900 --> 00:32:13.820
the way to do file manipulation or.


00:32:13.820 --> 00:32:17.340
>> Right. SHUtil and that kind of stuff.


00:32:17.340 --> 00:32:22.260
>> Stuff that we might be familiar with with Bash because if we're using it all the time


00:32:22.260 --> 00:32:27.460
on the command line, I already know how to do it. But I might not know how to do that


00:32:27.460 --> 00:32:31.900
sort of stuff in Python because I'm not using Python like that. But anyway.


00:32:31.900 --> 00:32:37.740
>> Well, my response to that would be that whatever the thing is that you don't know


00:32:37.740 --> 00:32:43.380
how to do in Python, your chances of running into trouble with Bash are, to my mind, a


00:32:43.380 --> 00:32:47.900
lot higher than they are with Python. Or at least when things misbehave in Python, your


00:32:47.900 --> 00:32:53.900
control of flow is better so that you probably will have a -- especially as the scripts start


00:32:53.900 --> 00:32:59.940
getting bigger, you will have better control over where the issues might be. Or you would


00:32:59.940 --> 00:33:04.580
be better able to isolate those areas that you're not exactly sure of. I saw someone


00:33:04.580 --> 00:33:10.660
in chat last week raise the specter of make files that call shell scripts that call make


00:33:10.660 --> 00:33:13.900
and I mean, this is not uncommon.


00:33:13.900 --> 00:33:16.100
I'm sure we've all seen these things.


00:33:16.100 --> 00:33:18.580
And I'm actually very interested in the psychology


00:33:18.580 --> 00:33:21.780
around this because we're all coders, right?


00:33:21.780 --> 00:33:24.780
I assume we're here because we enjoy automating things.


00:33:24.780 --> 00:33:26.700
We enjoy solving problems.


00:33:26.700 --> 00:33:30.460
We probably, you know, have a certain problem solving


00:33:30.460 --> 00:33:33.620
sort of mindset that got us into this to begin with.


00:33:33.620 --> 00:33:36.580
Yet, it seems like we spend so much time automating


00:33:36.580 --> 00:33:38.580
our customers' business processes


00:33:38.580 --> 00:33:41.500
that we forget to automate our own coding processes.


00:33:41.500 --> 00:33:44.260
Or when we do, we deallocate the priority,


00:33:44.260 --> 00:33:47.100
we debudget it, we end up focusing


00:33:47.100 --> 00:33:48.180
on all sorts of other things


00:33:48.180 --> 00:33:50.540
other than this essential housekeeping.


00:33:50.540 --> 00:33:52.880
- Yeah, or treat it like throwaway code


00:33:52.880 --> 00:33:55.300
instead of code that needs to be carefully factored


00:33:55.300 --> 00:33:56.620
and put together. - Exactly right.


00:33:56.620 --> 00:33:58.940
And I would argue it's a bit like housekeeping.


00:33:58.940 --> 00:34:00.060
You know, no one likes doing it,


00:34:00.060 --> 00:34:01.620
but if you don't want to live in a pigsty,


00:34:01.620 --> 00:34:03.980
you gotta do it, you know, instead of--


00:34:03.980 --> 00:34:06.900
- Yeah, well, also, to be honest,


00:34:06.900 --> 00:34:08.200
I was there once of like,


00:34:08.200 --> 00:34:11.500
I don't know how to do this automation stuff in Python,


00:34:11.500 --> 00:34:13.960
but it bugged me that I didn't know how.


00:34:13.960 --> 00:34:17.060
So I'm like, okay, well, what do I need to learn?


00:34:17.060 --> 00:34:20.040
Like the few things like searching for stuff,


00:34:20.040 --> 00:34:22.600
like I normally would have used Perl for Regex


00:34:22.600 --> 00:34:24.640
or something like that, or said.


00:34:24.640 --> 00:34:26.080
All that stuff you can do with Python,


00:34:26.080 --> 00:34:27.840
and actually there's tons of articles on it.


00:34:27.840 --> 00:34:29.620
It's really not that hard to go,


00:34:29.620 --> 00:34:32.880
okay, the pieces I'm missing, how do I do that?


00:34:32.880 --> 00:34:34.040
And just go learn it.


00:34:34.040 --> 00:34:36.940
And then it's not that hard to switch


00:34:36.940 --> 00:34:38.700
a lot of automation to Python.


00:34:38.700 --> 00:34:39.860
- Yeah, definitely not.


00:34:39.860 --> 00:34:41.980
And I mean, so much other automation


00:34:41.980 --> 00:34:43.580
happens in Python anyway.


00:34:43.580 --> 00:34:46.860
I mean, in fact, kind of compiled programming languages


00:34:46.860 --> 00:34:49.420
will often use Python as an automation language.


00:34:49.420 --> 00:34:51.880
It's so handy for the automation process.


00:34:51.880 --> 00:34:55.200
There is another psychological thing, which I find,


00:34:55.200 --> 00:34:56.900
or I think psychological thing,


00:34:56.900 --> 00:34:58.180
that I find quite curious here,


00:34:58.180 --> 00:35:01.300
which is this dealing with complex shell scripts


00:35:01.300 --> 00:35:04.780
almost becomes this technocratic rite of passage,


00:35:04.780 --> 00:35:07.980
where when you couple that with imposter syndrome,


00:35:07.980 --> 00:35:10.840
it's very easy to be intimidated by the bash bros


00:35:10.840 --> 00:35:13.380
when they do these really clever one-liner bashisms


00:35:13.380 --> 00:35:16.060
that you can't make head or tail of.


00:35:16.060 --> 00:35:18.140
And it's like, yeah, look how clever this is.


00:35:18.140 --> 00:35:20.420
But it's very hard to maintain,


00:35:20.420 --> 00:35:22.500
and it's almost hard to call that to account


00:35:22.500 --> 00:35:24.820
unless you're very sure of yourself,


00:35:24.820 --> 00:35:26.740
because you almost have to justify yourself


00:35:26.740 --> 00:35:28.320
as to why you dislike it.


00:35:28.320 --> 00:35:31.020
Like you first have to prove your bona fides.


00:35:31.020 --> 00:35:43.020
I think it's sort of the tech equivalent of, you know, back in my day, like, we didn't have X, you know, like, whatever X is, shoes or toilet paper, or, like, whatever.


00:35:43.020 --> 00:35:49.020
Just because something used to be difficult doesn't mean it needs to be difficult forevermore, right?


00:35:49.020 --> 00:35:54.020
Like, the extra difficulty doesn't make it better. It's not a video game like Elden Ring, you know?


00:35:54.020 --> 00:35:56.340
The easier this is,


00:35:56.340 --> 00:35:59.780
the more quickly and effectively you can do the housekeeping,


00:35:59.780 --> 00:36:00.980
the more you can get up with


00:36:00.980 --> 00:36:02.720
the features that actually pay the bills,


00:36:02.720 --> 00:36:04.880
which is to say the shiny functional stuff


00:36:04.880 --> 00:36:07.560
that you can demo and put in front of customers.


00:36:07.560 --> 00:36:09.220
>> Yeah, absolutely.


00:36:09.220 --> 00:36:12.380
I have some real-time feedback and also a comment for you.


00:36:12.380 --> 00:36:16.600
Alvaro says, "There's a VS Code plugin called Shellshock."


00:36:16.600 --> 00:36:18.220
If he's remembering it correctly,


00:36:18.220 --> 00:36:20.320
tells me when I'm doing something wrong or might blow up.


00:36:20.320 --> 00:36:21.980
There's also a plugin for PyCharm.


00:36:21.980 --> 00:36:23.980
If you're going to do it, have those things


00:36:23.980 --> 00:36:28.980
for sure. Yeah, funnily enough, we've got immediate feedback to that, which is the author


00:36:28.980 --> 00:36:33.940
of the original article mentions shell check, which is effectively like, like the comments


00:36:33.940 --> 00:36:38.980
are mentioned a lender for bash, but the reviewer, but the article also mentions that it doesn't


00:36:38.980 --> 00:36:43.860
actually catch all things either. So like all lenders, it can very easily lull you into


00:36:43.860 --> 00:36:49.660
a false sense of security while it's not really necessarily addressing the underlying problems.


00:36:49.660 --> 00:36:55.160
And I almost feel like I don't even need to say this because anyone who's ever tried to


00:36:55.160 --> 00:36:58.240
debug a long bash script should know this.


00:36:58.240 --> 00:36:59.960
They're tricky.


00:36:59.960 --> 00:37:04.120
They fail in mysterious places and it's very hard to figure out why and how.


00:37:04.120 --> 00:37:05.320
And -- >> Yeah.


00:37:05.320 --> 00:37:10.860
But I do like the -- this article pointing out how if you have to, to set up those flags


00:37:10.860 --> 00:37:12.880
to make it, you know, fail quicker.


00:37:12.880 --> 00:37:14.600
Because that helps a lot.


00:37:14.600 --> 00:37:15.600
So that's nice.


00:37:15.600 --> 00:37:16.600
Yeah.


00:37:16.600 --> 00:37:17.600
>> Yeah, for sure.


00:37:17.600 --> 00:37:20.360
- Also just to give the author massive amounts of credit,


00:37:20.360 --> 00:37:21.800
this isn't clickbait.


00:37:21.800 --> 00:37:25.600
He didn't position this as never ever use bash.


00:37:25.600 --> 00:37:26.920
In fact, he explicitly says that,


00:37:26.920 --> 00:37:29.220
and okay, if you're doing something super simplistic,


00:37:29.220 --> 00:37:32.520
like the typical sort of things that goes into a get hook,


00:37:32.520 --> 00:37:33.760
a pre-commit hook,


00:37:33.760 --> 00:37:35.080
where you're just running a command or two,


00:37:35.080 --> 00:37:37.760
then yeah, sure, of course, shell script's fine.


00:37:37.760 --> 00:37:41.200
But I would say as soon as you're running loops,


00:37:41.200 --> 00:37:43.480
as soon as you're doing conditional branching,


00:37:43.480 --> 00:37:45.160
as soon as you're worried about retries,


00:37:45.160 --> 00:37:46.400
as soon as you're doing--


00:37:46.400 --> 00:37:47.720
- Oh yeah, definitely.


00:37:47.720 --> 00:37:48.600
Switch to Python.


00:37:48.600 --> 00:37:49.440
- Absolutely.


00:37:49.440 --> 00:37:50.280
- Yeah.


00:37:50.280 --> 00:37:51.100
- Yeah.


00:37:51.100 --> 00:37:53.340
And then another quick question, just a quick follow up.


00:37:53.340 --> 00:37:56.060
Have you considered Conch?


00:37:56.060 --> 00:37:57.480
- I have not even heard of Conch.


00:37:57.480 --> 00:37:59.280
Nevermind considered it.


00:37:59.280 --> 00:38:01.840
- So it's, I haven't done much with,


00:38:01.840 --> 00:38:03.000
I've sort of looked at it.


00:38:03.000 --> 00:38:05.640
It is a shell, like a competitor to Bash


00:38:05.640 --> 00:38:08.640
or Zshell or something like that,


00:38:08.640 --> 00:38:12.720
where it's a proper Python environment


00:38:12.720 --> 00:38:14.040
directly in the shell.


00:38:14.040 --> 00:38:16.560
That's almost PowerShell-esque.


00:38:16.560 --> 00:38:18.240
>> Yeah, it's a little bit like PowerShell,


00:38:18.240 --> 00:38:20.680
where PowerShell is like .NET C#,


00:38:20.680 --> 00:38:22.440
like, but not really.


00:38:22.440 --> 00:38:24.280
I suspect it's similar here.


00:38:24.280 --> 00:38:26.680
>> I know it's supposed to be pronounced conch,


00:38:26.680 --> 00:38:28.640
but my brain says zonch,


00:38:28.640 --> 00:38:30.600
because it's funner to say.


00:38:30.600 --> 00:38:31.080
>> Zonch.


00:38:31.080 --> 00:38:32.560
>> I know, but it has the shell,


00:38:32.560 --> 00:38:33.480
it has the conch shell,


00:38:33.480 --> 00:38:35.040
so you know that's how you got to say it.


00:38:35.040 --> 00:38:38.480
>> Even have the ASCII art going on for the logo.


00:38:38.480 --> 00:38:41.120
>> They do indeed.


00:38:41.120 --> 00:38:44.020
- Alright, well, cool Thomas, that was a good conversation. - It was good.


00:38:44.020 --> 00:38:46.920
So, do we have any extras?


00:38:46.920 --> 00:38:48.920
Michael, do you have any extras?


00:38:48.920 --> 00:38:50.920
You know I got extras, right?


00:38:50.920 --> 00:38:53.220
I also, first, real quick follow up,


00:38:53.220 --> 00:38:55.220
real time follow up from Henry Scheiner in the audience,


00:38:55.220 --> 00:38:59.620
that PEP 663 was the PEP around string enum.


00:38:59.620 --> 00:39:00.320
Oh, okay.


00:39:00.320 --> 00:39:02.820
And he's not sure if removing the support for that pep


00:39:02.820 --> 00:39:05.520
means removing string enum from the standard lib or not though.


00:39:05.520 --> 00:39:08.120
Doesn't do all the other stuff like the casing


00:39:08.120 --> 00:39:10.720
and the various other things that that cool package I talked about does.


00:39:10.720 --> 00:39:16.720
So maybe that package is no matter what relevant still or inspiration for the next one or whatever.


00:39:16.720 --> 00:39:22.640
In terms of extras, I do have some extras. Let me see what order I wanted to cover them in.


00:39:22.640 --> 00:39:28.080
I had two, but then one got rescheduled. This is supposed to be the transformation


00:39:28.080 --> 00:39:33.040
from bugs.python.org over to GitHub, but that got pushed back a week. So I'm not going to talk about


00:39:33.040 --> 00:39:34.560
that. >> You just did.


00:39:34.560 --> 00:39:39.520
>> Well, I was going to say it's happening. It should have happened by the time you hear this.


00:39:39.520 --> 00:39:41.640
Let's go check it out. No, it's not true anymore.


00:39:41.640 --> 00:39:44.000
>> No. Okay. Just if you're curious,


00:39:44.000 --> 00:39:45.760
supposedly it's moved to April 1st,


00:39:45.760 --> 00:39:47.560
but it's April Fool's Day,


00:39:47.560 --> 00:39:49.920
so I'm not sure if it's really going to happen or not.


00:39:49.920 --> 00:39:54.840
>> Maybe it's a long con where the joke is being set up far in advance.


00:39:54.840 --> 00:39:57.360
>> Exactly. We're actually never doing this.


00:39:57.360 --> 00:39:59.440
I'm looking forward to that happening. That's great.


00:39:59.440 --> 00:40:03.920
All right. I just have a general theme of stuff that's like,


00:40:03.920 --> 00:40:07.480
they're all together, a changing of the guard, if you will.


00:40:07.480 --> 00:40:08.880
Let's see here.


00:40:08.880 --> 00:40:12.400
So I have been switching so much of my software stuff around.


00:40:12.400 --> 00:40:13.720
I've started using Vivaldi.


00:40:13.720 --> 00:40:15.320
Now I've been using Firefox for a long time.


00:40:15.320 --> 00:40:16.520
But I started using Vivaldi,


00:40:16.520 --> 00:40:19.200
which I think is a really neat take on a browser.


00:40:19.200 --> 00:40:23.080
So switched over to Vivaldi and started using that.


00:40:23.080 --> 00:40:28.840
There's a bunch of different things like Mozilla laid off 250 people recently.


00:40:28.840 --> 00:40:31.520
>> They're axing the developer tools team too, which is just tragic.


00:40:31.520 --> 00:40:33.880
>> Exactly. Cut the developer tools team.


00:40:33.880 --> 00:40:36.560
They cut the threat team,


00:40:36.560 --> 00:40:38.920
a team that looks for like a tactic.


00:40:38.920 --> 00:40:41.600
It's like, I don't know,


00:40:41.600 --> 00:40:43.000
it's starting to make me a little nervous.


00:40:43.000 --> 00:40:44.160
I'm trying out Vivaldi.


00:40:44.160 --> 00:40:45.880
I've been doing that for like a month or so,


00:40:45.880 --> 00:40:47.920
and I'm enjoying that.


00:40:47.920 --> 00:40:50.800
>> Mike, you said it's a different take on a browser.


00:40:50.800 --> 00:40:52.520
It sounds like there's something


00:40:52.520 --> 00:40:54.640
conceptually different about it.


00:40:54.640 --> 00:40:56.440
>> It's just super customizable.


00:40:56.440 --> 00:40:59.680
I think that's the thing. It's like there's just all sorts of stuff.


00:40:59.680 --> 00:41:02.040
It comes with a built-in ad blockers and tracker blockers.


00:41:02.040 --> 00:41:03.560
I know some of them do tracker blockers,


00:41:03.560 --> 00:41:04.960
but built-in ad blockers, nice.


00:41:04.960 --> 00:41:06.760
I mean, Brave is the other one that kind of does that,


00:41:06.760 --> 00:41:08.880
but Brave's like, well, let's just trade those ads


00:41:08.880 --> 00:41:11.600
for our cryptocurrency ads that we'll put in there for you.


00:41:11.600 --> 00:41:13.080
And you get a little bit of cryptocurrency,


00:41:13.080 --> 00:41:15.280
this is like, no, we'll just block the ads.


00:41:15.280 --> 00:41:18.400
So anyway, I switched over to that,


00:41:18.400 --> 00:41:21.200
partly motivated by just concern around this,


00:41:21.200 --> 00:41:23.160
but also just wanted to try some stuff out


00:41:23.160 --> 00:41:25.440
from Google Docs over to Zoho for other stuff


00:41:25.440 --> 00:41:27.440
and for like business email.


00:41:27.440 --> 00:41:29.000
There's so interesting stuff going on there.


00:41:29.000 --> 00:41:30.880
And then like also DuckDuckGo,


00:41:30.880 --> 00:41:32.000
I've been using that for a while.


00:41:32.000 --> 00:41:34.000
And I tried that a while ago.


00:41:34.000 --> 00:41:36.000
I didn't feel like you switched.


00:41:36.000 --> 00:41:38.480
To me now, there's just almost no difference in


00:41:38.480 --> 00:41:42.060
the quality compared to Google these days.


00:41:42.060 --> 00:41:43.740
Where it used to be, I'd try and like,


00:41:43.740 --> 00:41:45.360
I might have to go to Google for that.


00:41:45.360 --> 00:41:47.580
Several times a day, now I don't really.


00:41:47.580 --> 00:41:49.120
If I get stuck here,


00:41:49.120 --> 00:41:51.620
usually I try to go to Google and get it and I get still stuck.


00:41:51.620 --> 00:41:53.600
So just got to deal with it.


00:41:53.600 --> 00:41:55.680
So that's it for all my items.


00:41:55.680 --> 00:41:57.120
I'm just down to telling a joke.


00:41:57.120 --> 00:41:58.700
Thomas, you got anything extra you


00:41:58.700 --> 00:42:00.300
want to share throughout the rest of the world?


00:42:00.300 --> 00:42:02.400
>> Not particularly. I'm looking forward to your joke.


00:42:02.400 --> 00:42:03.760
>> Give a quick shout out to Piper real quick.


00:42:03.760 --> 00:42:06.400
- Oh yeah, check out last week's episode.


00:42:06.400 --> 00:42:07.840
- I know we covered it last week, but yeah.


00:42:07.840 --> 00:42:10.200
- Michael actually did as good an introduction


00:42:10.200 --> 00:42:11.140
to Piper as I could give,


00:42:11.140 --> 00:42:14.000
so congratulations and well done.


00:42:14.000 --> 00:42:14.840
- Thank you.


00:42:14.840 --> 00:42:15.660
- If you do want to check it out,


00:42:15.660 --> 00:42:18.320
support open source software, do the usual,


00:42:18.320 --> 00:42:20.600
share, like, subscribe, all the rest of it.


00:42:20.600 --> 00:42:21.920
You can check it out on GitHub.


00:42:21.920 --> 00:42:26.060
It is the Piper Task Runner, P-Y-P-Y-R.


00:42:26.060 --> 00:42:29.720
And incidentally, if you don't want to run bash scripts,


00:42:29.720 --> 00:42:31.880
then a task runner might be a,


00:42:33.480 --> 00:42:36.080
Might be a good way of not doing so.


00:42:36.080 --> 00:42:38.360
- Yeah, I was thinking about your project


00:42:38.360 --> 00:42:40.120
while you were talking about this.


00:42:40.120 --> 00:42:41.660
- I don't want to shill too horribly,


00:42:41.660 --> 00:42:45.480
so I try to keep that to the end.


00:42:45.480 --> 00:42:46.320
- That's our job.


00:42:46.320 --> 00:42:49.360
We only shill, we basically just shill cool stuff all week.


00:42:49.360 --> 00:42:50.640
That's our podcast.


00:42:50.640 --> 00:42:51.480
Ryan, how about you?


00:42:51.480 --> 00:42:53.520
Got anything extra you wanna shout out there?


00:42:53.520 --> 00:42:54.520
- I've got some stuff,


00:42:54.520 --> 00:42:57.080
but there's nothing I can share right now, so yeah.


00:42:57.080 --> 00:42:58.760
- All right, well, we'll be waiting.


00:42:58.760 --> 00:43:00.440
How about we share a joke then and wrap it up there?


00:43:00.440 --> 00:43:01.280
- Sounds good.


00:43:01.280 --> 00:43:03.080
- So I feel like this is a missed opportunity,


00:43:03.080 --> 00:43:05.560
'Cause we had Ian on last week


00:43:05.560 --> 00:43:08.000
and he was all about cybersecurity


00:43:08.000 --> 00:43:11.000
and using notebooks to track threats and stuff.


00:43:11.000 --> 00:43:13.300
Well, has he considered this?


00:43:13.300 --> 00:43:15.540
(laughing)


00:43:15.540 --> 00:43:19.420
- That was in a James Bond movie, right?


00:43:19.420 --> 00:43:21.400
It's been in several, I think.


00:43:21.400 --> 00:43:23.120
- It could have been.


00:43:23.120 --> 00:43:24.820
So here is like a big server rack


00:43:24.820 --> 00:43:27.520
with just like a hundred ethernet cables


00:43:27.520 --> 00:43:29.640
and in a big printed sign on it says,


00:43:29.640 --> 00:43:32.880
in case of cyber attack, break glass, pull cables.


00:43:32.880 --> 00:43:40.160
I'll also say what surprises me the the internet is going soft in its old age because back in my day


00:43:40.160 --> 00:43:44.680
Haha, the first comments would have been complaining that the cables aren't tidy enough


00:43:44.680 --> 00:43:48.840
Wow, you got to get a good grip on exactly


00:43:48.840 --> 00:43:52.320
One zippy move with your arm and you give it a yank


00:43:52.320 --> 00:43:59.680
There's a lot of cables they should put like orange tags on the ones that are important to pull or something. Yeah


00:44:00.440 --> 00:44:03.220
>> Exactly. This is the sort of criticism that I would have expected.


00:44:03.220 --> 00:44:07.440
>> Actually, the entire thing has a power switch,


00:44:07.440 --> 00:44:09.540
just so power off the whole thing.


00:44:09.540 --> 00:44:12.260
>> You don't want to lose data. I mean, come on. No, just kidding.


00:44:12.260 --> 00:44:14.180
>> Also, where's the axe?


00:44:14.180 --> 00:44:15.780
How do you break the glass?


00:44:15.780 --> 00:44:16.860
>> Exactly.


00:44:16.860 --> 00:44:17.220
>> Exactly.


00:44:17.220 --> 00:44:19.980
>> Oh, or just open the door handle.


00:44:19.980 --> 00:44:21.900
>> Very not very thought through.


00:44:21.900 --> 00:44:24.380
It reminds me a little bit of that in case fire,


00:44:24.380 --> 00:44:26.740
get commit, get push, run.


00:44:26.740 --> 00:44:29.980
>> Also, we're talking about IT people who


00:44:29.980 --> 00:44:33.540
generally probably aren't that much into the pushing regime.


00:44:33.540 --> 00:44:35.180
So--


00:44:35.180 --> 00:44:36.620
>> Or lifting axes.


00:44:36.620 --> 00:44:40.140
That might be a strain.


00:44:40.140 --> 00:44:42.020
Sorry, I'm going to get hate mail for that.


00:44:42.020 --> 00:44:43.820
>> We are.


00:44:43.820 --> 00:44:45.300
>> Yes, indeed.


00:44:45.300 --> 00:44:46.420
Wow.


00:44:46.420 --> 00:44:48.820
I thought it was fun, Brian.


00:44:48.820 --> 00:44:52.900
>> Well, thanks everybody for having a fun episode again.


00:44:52.900 --> 00:44:54.420
Thank you, Thomas, for showing up.


00:44:54.420 --> 00:44:55.100
Thanks, Michael.


00:44:55.100 --> 00:44:57.580
And thank you, everybody in the chat, for showing up.


00:44:57.580 --> 00:44:59.300
So we'll see you all next week.


00:44:59.300 --> 00:45:00.140
Bye everyone.

