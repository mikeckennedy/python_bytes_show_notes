
00:00:00.000 --> 00:00:04.400
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.400 --> 00:00:11.040
This is episode 148 recorded September 11th, 2019. I'm Michael Kennedy.


00:00:11.040 --> 00:00:12.080
And I am Brian Okken.


00:00:12.080 --> 00:00:17.680
And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean.


00:00:17.680 --> 00:00:18.960
More on what they have to offer later.


00:00:18.960 --> 00:00:27.600
Brian, I feel like Python doesn't ship often enough. It's like an 18-month release cycle.


00:00:27.600 --> 00:00:33.480
that's a really long time to wait for these features to come out, you know, especially in the world of agile and scrum and


00:00:33.480 --> 00:00:39.040
Yeah, two weeks prints like a year and a half is a long time to see an idea and have it happen


00:00:39.040 --> 00:00:44.640
What do you think that's like eons in internet time, right? So right for sure. I'm actually excited about this


00:00:44.640 --> 00:00:52.520
There's an announcement. It's it's not been announced or decided yet, but there's a PEP PEP 602, which is under discussion


00:00:52.520 --> 00:00:59.100
We've got links to both the discussion and the and the pep, but it's to bring a annual release cadence


00:00:59.100 --> 00:01:01.920
so every year every 12 months instead of every


00:01:01.920 --> 00:01:04.520
every 18 months and


00:01:04.520 --> 00:01:11.440
There's some specifics around it which are kind of neat. It does not mean that people will develop each feature each release in


00:01:11.440 --> 00:01:17.320
12 months. It's actually a 17th month cycle, which is weird. It's interesting


00:01:17.320 --> 00:01:19.320
It totally makes sense when you read it.


00:01:19.320 --> 00:01:22.820
My first thought was, "How do they fit 17 months into 12 months?"


00:01:22.820 --> 00:01:25.820
You go really, really fast, and then you change a little bit of space time.


00:01:25.820 --> 00:01:28.820
There's five months of unversioned overlap time


00:01:28.820 --> 00:01:31.820
where some of the new features can get worked on and they're not doing releases.


00:01:31.820 --> 00:01:35.320
Yeah, that's really interesting because they have a cool graph in here


00:01:35.320 --> 00:01:39.320
that shows them overlaid and actually all the releases laid out.


00:01:39.320 --> 00:01:43.820
I don't know, it's about a third, a little more than that down the page that we're linking to.


00:01:43.820 --> 00:01:46.820
And it shows, okay, we're going to work on the alpha features,


00:01:46.820 --> 00:01:50.640
which is creating the feature, and then beta is kind of where it stabilizes and gets cleaned


00:01:50.640 --> 00:01:51.640
up.


00:01:51.640 --> 00:01:56.840
But as it switches to beta for one, it kicks off for development, maybe a little bit later.


00:01:56.840 --> 00:02:01.320
But there's this overlap where you stop working on one and you also concurrently start adding


00:02:01.320 --> 00:02:02.320
new features.


00:02:02.320 --> 00:02:05.120
That's what happens in software projects anyway.


00:02:05.120 --> 00:02:10.460
Like in a commercial world, you're wrapping up one release while people are starting to


00:02:10.460 --> 00:02:13.120
work on features for the next release anyway.


00:02:13.120 --> 00:02:15.440
It's just this reality anyway.


00:02:15.440 --> 00:02:16.440
I think it's good.


00:02:16.440 --> 00:02:22.080
some rationale and goals, smaller releases, less stuff within each release.


00:02:22.080 --> 00:02:26.720
One of the big ones is there's a often a rush to get stuff into the first beta


00:02:26.720 --> 00:02:31.200
because if it didn't get in it's not going in this one and it has to wait 18


00:02:31.200 --> 00:02:36.760
months and waiting a year it's only six months difference but it that's a big


00:02:36.760 --> 00:02:41.840
difference. So there are also some weirdness with how I mean there's annual


00:02:41.840 --> 00:02:47.480
sprints and PyCon, which is about the same time every year, but having the


00:02:47.480 --> 00:02:53.480
release cycle be sometimes offset by six months every time just was weird.


00:02:53.480 --> 00:02:57.080
Yeah, it means like the sprints can more carefully align with say the alpha stage


00:02:57.080 --> 00:03:01.880
or something of the next version, right? They time it right. There's also


00:03:01.880 --> 00:03:07.040
mentioned in the non-goals section about switching to an annual release calendar


00:03:07.040 --> 00:03:10.240
is the last for more natural calendar version.


00:03:10.240 --> 00:03:15.240
So for example, Python 320, 3.20


00:03:15.240 --> 00:03:19.280
might be the one released in October 2020.


00:03:19.280 --> 00:03:24.280
The one Python 3.23 would be the one in October 2023


00:03:24.280 --> 00:03:26.240
and things like that, that might be nice.


00:03:26.240 --> 00:03:28.660
- Yeah, but we're only up to like three eight now.


00:03:28.660 --> 00:03:31.020
How do we get from three eight to three 20?


00:03:31.020 --> 00:03:31.860
Yeah, switching.


00:03:31.860 --> 00:03:33.560
- It goes three nine and then three 20.


00:03:33.560 --> 00:03:34.920
That's like, that's how you count.


00:03:34.920 --> 00:03:36.460
- Yeah. - No, it's pretty good.


00:03:36.460 --> 00:03:38.580
- Yeah, so this is proposed by Lucas Lenga,


00:03:38.580 --> 00:03:41.620
and he's currently the release manager for Python,


00:03:41.620 --> 00:03:43.920
so he's the one with all the skin in the game,


00:03:43.920 --> 00:03:46.300
and yeah, I think this is nice.


00:03:46.300 --> 00:03:47.540
I've always thought it was weird


00:03:47.540 --> 00:03:49.620
to have such a long release cycle,


00:03:49.620 --> 00:03:50.980
so I'm happy to see this.


00:03:50.980 --> 00:03:53.020
- I mean, there's risks and downsides, of course,


00:03:53.020 --> 00:03:55.100
that would be on the other side.


00:03:55.100 --> 00:03:56.420
Also, with that same graph,


00:03:56.420 --> 00:03:59.620
you notice that there's five versions


00:03:59.620 --> 00:04:02.580
supported at a time instead of four,


00:04:02.580 --> 00:04:06.440
so there's the test matrix of people doing distributions


00:04:06.440 --> 00:04:08.800
They gotta test five versions instead of four


00:04:08.800 --> 00:04:10.640
if they're testing everything.


00:04:10.640 --> 00:04:12.520
It is what it is.


00:04:12.520 --> 00:04:13.720
- Yeah, it's interesting.


00:04:13.720 --> 00:04:15.680
There's some rejected ideas as well.


00:04:15.680 --> 00:04:18.280
Keep the current 18 month release cadence.


00:04:18.280 --> 00:04:19.600
This is rejected.


00:04:19.600 --> 00:04:20.680
We don't like it.


00:04:20.680 --> 00:04:23.160
Double the release cadence to achieve nine months


00:04:23.160 --> 00:04:24.720
between major versions.


00:04:24.720 --> 00:04:26.400
But it's too irregular and too short.


00:04:26.400 --> 00:04:30.000
And just slow down releases and don't freeze them at beta one.


00:04:30.000 --> 00:04:30.840
Yeah, I like it.


00:04:30.840 --> 00:04:31.920
This is pretty good.


00:04:31.920 --> 00:04:32.760
Glad to see it happen.


00:04:32.760 --> 00:04:35.740
- It wasn't even considered to have weekly release cycles.


00:04:35.740 --> 00:04:36.580
I'm not sure why.


00:04:36.580 --> 00:04:38.820
- Yeah, we just ship whatever's on master,


00:04:38.820 --> 00:04:40.100
on the master branch.


00:04:40.100 --> 00:04:42.020
Yeah, daily, nightly builds.


00:04:42.020 --> 00:04:42.860
- Nightly builds.


00:04:42.860 --> 00:04:44.460
- Might hold off on that.


00:04:44.460 --> 00:04:46.540
So this next thing I wanna talk about,


00:04:46.540 --> 00:04:47.520
it's pretty awesome, Brian.


00:04:47.520 --> 00:04:48.360
- Is it?


00:04:48.360 --> 00:04:52.500
- Yeah, it's called Awesome ASGI, or ASGI.


00:04:52.500 --> 00:04:56.620
I don't know, I'm not sure what the phonetics of ASGI,


00:04:56.620 --> 00:05:00.340
but we have WSGI, which are the WSGI servers.


00:05:00.340 --> 00:05:03.300
This is like the traditional web service


00:05:03.300 --> 00:05:10.300
in a gateway interface where basically all the different web frameworks like Django, Flask, Pyramid, and so on,


00:05:10.300 --> 00:05:16.300
implement that, and then all the servers like MicroWZ and gUnicorn and whatnot support that.


00:05:16.300 --> 00:05:21.300
That's how they click together. That's their docking mechanism.


00:05:21.300 --> 00:05:29.300
WZ is broken, fundamentally irreparable broken, for building asynchronous web apps.


00:05:29.300 --> 00:05:32.500
That's unfortunate because async and await and asyncio


00:05:32.500 --> 00:05:35.140
is most important on the web server.


00:05:35.140 --> 00:05:36.060
What do web servers do?


00:05:36.060 --> 00:05:38.540
They wait on databases, they wait on the network,


00:05:38.540 --> 00:05:41.860
they wait on third party APIs like Stripe.


00:05:41.860 --> 00:05:42.940
They just wait.


00:05:42.940 --> 00:05:44.180
That's mostly what they do.


00:05:44.180 --> 00:05:46.960
And so if you could let your server do other stuff


00:05:46.960 --> 00:05:49.700
while that's waiting, you could massively amplify


00:05:49.700 --> 00:05:51.500
the concurrent number of users for the same amount


00:05:51.500 --> 00:05:53.020
of hardware and things like this.


00:05:53.020 --> 00:05:56.740
So enter ASGI, I'm gonna go with ASGI for now


00:05:56.740 --> 00:05:59.260
until somebody shows me the right way to say it.


00:05:59.260 --> 00:06:04.260
So ASGI is a new interface for this successor to WSGI.


00:06:04.260 --> 00:06:08.220
And it came out of Django channels,


00:06:08.220 --> 00:06:13.140
which is a way to add some asynchronous behavior to Django.


00:06:13.140 --> 00:06:15.940
And it's also got boosted by things like


00:06:15.940 --> 00:06:18.460
Starlette and Uvicorn and so on.


00:06:18.460 --> 00:06:20.580
So what this is, is it's an awesome list


00:06:20.580 --> 00:06:23.700
for all sorts of things around asynchronous


00:06:23.700 --> 00:06:26.300
web Python things.


00:06:26.300 --> 00:06:31.200
So we have async web apps, async web frameworks,


00:06:31.200 --> 00:06:34.660
async web servers like uveicorn and so on.


00:06:34.660 --> 00:06:39.660
So if you are wanting to build some sort of high load,


00:06:39.660 --> 00:06:41.980
highly scalable website and you want to figure out


00:06:41.980 --> 00:06:45.700
what should I be using, it's super confusing right now


00:06:45.700 --> 00:06:48.020
because things come and go so fast.


00:06:48.020 --> 00:06:50.540
Like, Gepronto was really this big thing


00:06:50.540 --> 00:06:51.980
until it wasn't.


00:06:51.980 --> 00:06:53.140
Stopped getting worked on, right?


00:06:53.140 --> 00:06:56.220
Like, the shelf life is no longer 10 years.


00:06:56.220 --> 00:06:58.540
it's maybe a couple months.


00:06:58.540 --> 00:07:01.680
So knowing what's happening in this space is pretty hard.


00:07:01.680 --> 00:07:04.060
There's some good frameworks talked about here.


00:07:04.060 --> 00:07:07.240
Bocadillo, channels, FastAPI here is really good.


00:07:07.240 --> 00:07:10.440
Core is a solid one for converting Flask to Async,


00:07:10.440 --> 00:07:12.160
Responder, Starlet.


00:07:12.160 --> 00:07:13.480
Starlette seems to be the foundation


00:07:13.480 --> 00:07:15.280
of almost everything these days.


00:07:15.280 --> 00:07:18.380
So it's really probably the most important here.


00:07:18.380 --> 00:07:21.280
But a nice grouping of all these various things


00:07:21.280 --> 00:07:22.180
that you might want to work with.


00:07:22.180 --> 00:07:23.760
- Yeah, and they also want to try to do


00:07:23.760 --> 00:07:26.600
more than just applications, but also libraries


00:07:26.600 --> 00:07:29.360
and middleware items as well.


00:07:29.360 --> 00:07:31.400
- Yeah, so this is not as popular as say,


00:07:31.400 --> 00:07:33.480
like just a straight awesome Python list


00:07:33.480 --> 00:07:36.480
or Mahmoud Hashemi's awesome apps list


00:07:36.480 --> 00:07:37.440
or something like that.


00:07:37.440 --> 00:07:39.640
But I do think it's important and you know,


00:07:39.640 --> 00:07:41.440
hopefully people go out there, if they have some ideas,


00:07:41.440 --> 00:07:44.120
they can contribute some projects to the list.


00:07:44.120 --> 00:07:44.960
It's not too hard.


00:07:44.960 --> 00:07:45.780
- Yeah, definitely.


00:07:45.780 --> 00:07:46.620
- All right, what's next?


00:07:46.620 --> 00:07:48.160
- Well, there's another awesome,


00:07:48.160 --> 00:07:50.060
a couple other awesome projects,


00:07:50.060 --> 00:07:51.880
but they're not awesome lists.


00:07:51.880 --> 00:07:57.320
Two awesome projects I want to talk about, sort of, are Jupyter and Pangeo.


00:07:57.320 --> 00:08:04.640
This comes up because there was an announcement titled "Jupyter meets the Earth," which is


00:08:04.640 --> 00:08:05.640
kind of fun.


00:08:05.640 --> 00:08:07.400
Plus, they're both circular logos.


00:08:07.400 --> 00:08:09.480
The Earth has a logo.


00:08:09.480 --> 00:08:10.920
Looks like the Earth, yeah.


00:08:10.920 --> 00:08:19.400
This is a write-up about a really cool announcement that the National Science Foundation is giving


00:08:19.400 --> 00:08:25.880
two million dollars of funding over three years as part of an EarthCube grant program to go towards


00:08:25.880 --> 00:08:32.680
Jupyter infrastructure and Jupyter impangio and it's hopefully will be pretty cool. It's a


00:08:32.680 --> 00:08:38.360
actually a really neat write-up talking about how the adoption of open languages like Python


00:08:38.360 --> 00:08:44.120
and on top of that Jupyter and others have really been taken up by a lot of different


00:08:44.120 --> 00:08:50.320
science backgrounds and we really need some more earth-based science to utilize


00:08:50.320 --> 00:08:52.960
this and so this will help it out quite a bit. It's kind of neat.


00:08:52.960 --> 00:08:56.360
This is super cool and it's really great to see them getting so much funding.


00:08:56.360 --> 00:09:00.500
Jupyter is definitely doing well in the funding space and I didn't know where


00:09:00.500 --> 00:09:04.320
Pangea was before but it sounds like this puts them really solidly in the


00:09:04.320 --> 00:09:08.440
stable and growing, getting lots of support space. One of the things I love


00:09:08.440 --> 00:09:16.120
about Jupyter and Python being the center of around and some of the data science is the openness. So


00:09:16.120 --> 00:09:22.120
people are really pushing for open data as well so that anything that gets published can be seen


00:09:22.120 --> 00:09:27.880
by other people. I think that pushes science forward really far because just even people in


00:09:27.880 --> 00:09:33.320
their bedroom might have a cool idea with the data and find some things that other people can't and


00:09:33.320 --> 00:09:38.280
help contribute. It's really kind of incredible to be part of this. So. - Yeah, absolutely.


00:09:38.280 --> 00:09:41.540
And one of the use cases is for climate data,


00:09:41.540 --> 00:09:43.360
climate change studies, and things like that.


00:09:43.360 --> 00:09:48.360
So definitely need some attention on that.


00:09:48.360 --> 00:09:52.240
I'm sure there's plenty already, but more is good here.


00:09:52.240 --> 00:09:55.680
So this write-up is by Lindsay Hagee and Fernanda Perez.


00:09:55.680 --> 00:09:59.480
And just want to mention, Lindsay was on Talk Python


00:09:59.480 --> 00:10:03.560
quite a while ago talking about Pangeo and her earth science


00:10:03.560 --> 00:10:06.440
research she's doing, so geoscience, things like that.


00:10:06.440 --> 00:10:07.940
So if you want to dive deeper, check that out.


00:10:07.940 --> 00:10:08.940
Yeah, very cool.


00:10:08.940 --> 00:10:09.940
Yeah, for sure.


00:10:09.940 --> 00:10:14.500
Now, before I spring some pretty big news on people, let me tell you real quick about


00:10:14.500 --> 00:10:15.500
DigitalOcean.


00:10:15.500 --> 00:10:18.380
So, all of our infrastructure runs on DigitalOcean.


00:10:18.380 --> 00:10:20.820
They've been big supporters of the show.


00:10:20.820 --> 00:10:24.820
Their newest thing is that they just launched two new things as a service.


00:10:24.820 --> 00:10:30.020
So, you can instead of have servers to manage, you just check a box and now you have services


00:10:30.020 --> 00:10:31.380
at your disposal.


00:10:31.380 --> 00:10:33.140
Those are MySQL and Redis.


00:10:33.140 --> 00:10:39.140
So if you want to use MySQL or Redis, you can now start doing that over at DigitalOcean.


00:10:39.140 --> 00:10:44.140
Previously, they had Postgres as a service, and Postgres is very popular in the Python space,


00:10:44.140 --> 00:10:49.140
but MySQL and Redis also are as well, and Redis kind of plays an alternate role anyway.


00:10:49.140 --> 00:10:54.140
It's a traditional relational database, caching, things like that.


00:10:54.140 --> 00:10:59.140
So check that out, along with a bunch of other good things, pythonbytes.fm/digitalocean.


00:10:59.140 --> 00:11:02.940
Now, I told you about the cool awesome list, right Brian?


00:11:02.940 --> 00:11:03.940
The awesome ASGI.


00:11:03.940 --> 00:11:07.440
Yes, asynchronous is here to stay.


00:11:07.440 --> 00:11:08.440
It is here to stay.


00:11:08.440 --> 00:11:13.940
Now, there is a very notable absent framework in there.


00:11:13.940 --> 00:11:15.260
Talks about court.


00:11:15.260 --> 00:11:18.420
That's kind of the async version of Flask, if you will.


00:11:18.420 --> 00:11:22.580
There's some talk that maybe those two projects will work together, just make Flask itself


00:11:22.580 --> 00:11:23.580
asynchronous.


00:11:23.580 --> 00:11:24.580
But that's a different story.


00:11:24.580 --> 00:11:26.420
But there was nothing in there really for Django.


00:11:26.420 --> 00:11:29.020
I mean, there's channels, but that's a separate project, right?


00:11:29.020 --> 00:11:29.860
- Yeah.


00:11:29.860 --> 00:11:30.680
- Until now.


00:11:30.680 --> 00:11:33.380
- Yeah, so tell me, I'm excited, what's going on?


00:11:33.380 --> 00:11:37.260
- Yeah, so I don't know exactly how recently


00:11:37.260 --> 00:11:39.900
this was announced because there's no dates


00:11:39.900 --> 00:11:42.800
on the announcement, which makes it tough to know.


00:11:42.800 --> 00:11:47.140
But Django 3.0, all the details for its roadmap


00:11:47.140 --> 00:11:50.740
are now out, so the release notes for Django 3.0 are here.


00:11:50.740 --> 00:11:54.260
It's expected that Django 3.0 is going to be released


00:11:54.260 --> 00:11:58.320
December 2019, so that's like a Django Christmas present


00:11:58.320 --> 00:12:00.760
or whatever, something for the holidays, right?


00:12:00.760 --> 00:12:03.960
Coming soon, and there's tons of changes, right,


00:12:03.960 --> 00:12:08.280
about, for example, Django 3 only supports Python 3.6


00:12:08.280 --> 00:12:12.020
and above, they are dropping support even for 3.5.


00:12:12.020 --> 00:12:15.000
And if you want 3.5 support, you have to go back to 2.2,


00:12:15.000 --> 00:12:17.800
and of course, 2.2 or 2.0 already dropped support


00:12:17.800 --> 00:12:20.600
for legacy Python, so you gotta even go farther back


00:12:20.600 --> 00:12:21.800
to get way back there.


00:12:21.800 --> 00:12:22.640
You don't wanna go back there.


00:12:22.640 --> 00:12:24.000
>>No. >>But that's all good.


00:12:24.000 --> 00:12:25.480
There's a bunch of other changes,


00:12:25.480 --> 00:12:28.560
area and DB support and various things.


00:12:28.560 --> 00:12:29.720
You can check that out.


00:12:29.720 --> 00:12:35.520
But the big news I think here is ASGI support for Django 3.


00:12:35.520 --> 00:12:44.560
They say, "Django 3.0 begins our journey to making Django fully async capable by providing


00:12:44.560 --> 00:12:48.440
support for running it as an ASGI app."


00:12:48.440 --> 00:12:50.920
And that doesn't mean they're dropping WSGI support.


00:12:50.920 --> 00:12:54.520
They expect for these to sort of pair together, as you might expect.


00:12:54.520 --> 00:12:59.040
A lot of these can be run in either way, but you have to run it on an ASGI server to get


00:12:59.040 --> 00:13:02.120
the async features, as we kind of hinted at before.


00:13:02.120 --> 00:13:03.120
Pretty cool, huh?


00:13:03.120 --> 00:13:04.120
Yeah, that's very cool.


00:13:04.120 --> 00:13:07.240
Yeah, so you don't need to change anything about your code, but you'll be able to start


00:13:07.240 --> 00:13:08.880
writing asynchronous methods.


00:13:08.880 --> 00:13:12.680
So when you're waiting on that database or that web service, you can now wait on a thousand


00:13:12.680 --> 00:13:16.280
of them instead of one in the same process with about the same amount of work, which


00:13:16.280 --> 00:13:18.800
sounds like a pretty awesome change for almost no effort.


00:13:18.800 --> 00:13:20.760
Well, you said you don't have to change anything.


00:13:20.760 --> 00:13:24.560
Does Django have an upgrade migration path for people to upgrade?


00:13:24.560 --> 00:13:27.960
Well, I think you just have to start rewriting your view methods.


00:13:27.960 --> 00:13:31.880
You got to add the async keyword, async_def instead of def, and you got to start using


00:13:31.880 --> 00:13:33.540
async libraries.


00:13:33.540 --> 00:13:35.680
It's going to be interesting, the database story.


00:13:35.680 --> 00:13:39.960
Django has a built-in ORM, and it says things like there are some side effects to be aware


00:13:39.960 --> 00:13:40.960
of.


00:13:40.960 --> 00:13:45.720
Django is now aware of the asynchronous event loops, and will block you calling code marked


00:13:45.720 --> 00:13:50.280
as async_unsafe, such as ORM operations.


00:13:50.280 --> 00:13:55.000
So maybe I don't know what the story is around the ORM and async.


00:13:55.000 --> 00:13:58.280
Maybe it's not totally clear, but it seems like a really good place to actually have


00:13:58.280 --> 00:14:01.800
async because the thing you wait on most is databases, so you should probably be able


00:14:01.800 --> 00:14:02.800
to wait on them.


00:14:02.800 --> 00:14:06.040
Yeah, and I actually am also interested in MariaDB.


00:14:06.040 --> 00:14:10.360
I hadn't really got into that before, so that's kind of an interesting side story as well.


00:14:10.360 --> 00:14:12.120
Yeah, absolutely.


00:14:12.120 --> 00:14:16.880
So there's all sorts of stuff we're linking to in Django 3.0, but I think the big news


00:14:16.880 --> 00:14:21.560
is front and center async support right in the main project.


00:14:21.560 --> 00:14:23.640
- And I wonder if the drop of 3.5


00:14:23.640 --> 00:14:25.720
is because people like f-strings.


00:14:25.720 --> 00:14:27.600
- Yeah, yeah, I think so.


00:14:27.600 --> 00:14:31.160
Yeah, it's like, we can't not use f-strings.


00:14:31.160 --> 00:14:32.780
I want to run Flint on this project,


00:14:32.780 --> 00:14:34.900
but I can't because it might run in 3.5.


00:14:34.900 --> 00:14:35.960
Let's make that a possible.


00:14:35.960 --> 00:14:37.000
- Yeah, yeah, okay.


00:14:37.000 --> 00:14:39.160
- I've heard about this possibility


00:14:39.160 --> 00:14:41.520
of different software engineers


00:14:41.520 --> 00:14:43.920
having different levels of effectiveness.


00:14:43.920 --> 00:14:46.520
And oftentimes, this is referred to as the 10x engineer,


00:14:46.520 --> 00:14:48.440
This special person that makes all this money


00:14:48.440 --> 00:14:52.080
and actually makes the startup do its thing or whatever.


00:14:52.080 --> 00:14:55.000
John Carmack and Doom.


00:14:55.000 --> 00:14:57.360
So you found another kind of engineer.


00:14:57.360 --> 00:14:59.200
Yeah, I really like this list.


00:14:59.200 --> 00:15:01.200
I found the 1x engineer.


00:15:01.200 --> 00:15:02.640
The 1x engineer, awesome.


00:15:02.640 --> 00:15:04.840
What constitutes a 1x engineer?


00:15:04.840 --> 00:15:06.440
Well, there's a whole list.


00:15:06.440 --> 00:15:08.400
And you can contribute it because it's


00:15:08.400 --> 00:15:10.480
based on a GitHub repo.


00:15:10.480 --> 00:15:13.640
I think it's definitely a fun take on the 10x thing.


00:15:13.640 --> 00:15:15.680
But if you look at these lists, I


00:15:15.680 --> 00:15:22.680
I think some of these are really good and I think actually should have been like something like maybe 3x or 4x or 8x or something.


00:15:22.680 --> 00:15:27.680
I'm not sure how high this scale goes anyway, but here's a few of them.


00:15:27.680 --> 00:15:35.680
1x engineer has a life outside of engineering, writes code that others can read, doesn't act surprised when someone doesn't know something,


00:15:35.680 --> 00:15:42.680
asks for help when they need it, is able to say things like "I don't know", constructively participates in code reviews,


00:15:42.680 --> 00:15:47.400
shares knowledge, never stops learning. So I like that because obviously they


00:15:47.400 --> 00:15:51.800
listen to Python Bytes, talk Python and testing code. Absolutely. Yeah. Has


00:15:51.800 --> 00:15:56.140
unproductive and productive days. Fails from time to time. Doesn't hate on


00:15:56.140 --> 00:16:00.880
framework Y when working with framework X. Anyway, we pulled out a handful of


00:16:00.880 --> 00:16:05.160
these to put in the show notes but the list is pretty long and I like it. It's


00:16:05.160 --> 00:16:09.400
kind of a neat fun take on just basically this is what we expect from


00:16:09.400 --> 00:16:13.600
everybody. Very nice. It says, I've never heard of that in lieu of nodding and


00:16:13.600 --> 00:16:18.120
pretending and also is willing to have a brightly colored desktop background.


00:16:18.120 --> 00:16:23.200
Very nice. Yeah I think the new 10x engineer has pink not black. That's right.


00:16:23.200 --> 00:16:26.480
Now this is actually this is really great I like it it's fun and it's


00:16:26.480 --> 00:16:31.120
written in very fun fonts and style right? There's a button there that says


00:16:31.120 --> 00:16:37.920
you can go away from the fancy style. What is that font? It's like I think it's


00:16:37.920 --> 00:16:41.200
Atari 2600 font or something.


00:16:41.200 --> 00:16:43.240
Maybe Commodore 64 font is beautiful.


00:16:43.240 --> 00:16:45.600
- Yeah, at least it's not Comic Sans.


00:16:45.600 --> 00:16:48.680
- Nice, yeah for sure, thank goodness, or Blinky.


00:16:48.680 --> 00:16:51.840
Okay, now there's a topic I think is important, Brian,


00:16:51.840 --> 00:16:53.480
that we should touch on.


00:16:53.480 --> 00:16:56.400
Will you just tell me if we've spoken about this before?


00:16:56.400 --> 00:17:00.520
It has to do with Python 2 going out of the world here,


00:17:00.520 --> 00:17:01.800
sunsetting Python 2.


00:17:01.800 --> 00:17:04.200
Have we spoken about Python and Legacy Python?


00:17:04.200 --> 00:17:06.000
- Maybe we haven't, so if we haven't,


00:17:06.000 --> 00:17:08.120
People should get on to the Python 3 thing.


00:17:08.120 --> 00:17:09.520
- That's right.


00:17:09.520 --> 00:17:12.480
Now, what we're linking to is an official document


00:17:12.480 --> 00:17:16.200
that formalizes the sunsetting of Python 2.


00:17:16.200 --> 00:17:18.800
So this is over on python.org/docs,


00:17:18.800 --> 00:17:21.240
just sunset Python 2 with dashes.


00:17:21.240 --> 00:17:22.280
I'll link to it.


00:17:22.280 --> 00:17:25.040
And it's sort of a Q&A, like,


00:17:25.040 --> 00:17:27.280
what if I didn't know Python 2 was going away?


00:17:27.280 --> 00:17:28.120
What should I do?


00:17:28.120 --> 00:17:28.940
And so on.


00:17:28.940 --> 00:17:31.160
So let me just talk to you real quick about this.


00:17:31.160 --> 00:17:32.880
This is something good you can share with people


00:17:32.880 --> 00:17:35.240
who are like, wait, why is our Python old?


00:17:35.240 --> 00:17:36.880
What are you telling me?


00:17:36.880 --> 00:17:39.920
So it says officially January 1st, 2020


00:17:39.920 --> 00:17:44.360
will be the last day or the day that Python 2 is sunsetted.


00:17:44.360 --> 00:17:45.920
I thought it would be really great.


00:17:45.920 --> 00:17:48.380
New Year's resolution, write no more Python 2 code,


00:17:48.380 --> 00:17:50.920
I guess is the way to interpret this.


00:17:50.920 --> 00:17:54.400
And it says, Q&A, like why are we doing this?


00:17:54.400 --> 00:17:56.000
We need to sunset Python 2


00:17:56.000 --> 00:17:57.800
so that we can help Python users.


00:17:57.800 --> 00:18:01.520
We want to add new features to Python 3


00:18:01.520 --> 00:18:03.560
and stop supporting Python 2,


00:18:03.560 --> 00:18:05.700
even though we're not adding features to it.


00:18:05.700 --> 00:18:10.460
And it says, you know what, back in 2006, long ago,


00:18:10.460 --> 00:18:12.620
we started working on Python 3.


00:18:12.620 --> 00:18:16.540
And in 2008, we said 2015 was the end of Python 2.


00:18:16.540 --> 00:18:18.500
That didn't work out so well, so now we're


00:18:18.500 --> 00:18:20.740
really meaning it 2020.


00:18:20.740 --> 00:18:24.260
And then it says, how long is it until the sunset date?


00:18:24.260 --> 00:18:25.980
The Python clock will tell you, it says.


00:18:25.980 --> 00:18:27.980
Which is three months, 20 days, 10 hours,


00:18:27.980 --> 00:18:30.900
31 minutes, and 37 seconds.


00:18:30.900 --> 00:18:31.980
That's less than four months.


00:18:31.980 --> 00:18:32.820
That's coming up.


00:18:32.820 --> 00:18:37.540
for real. Yeah, it's even faster if we hold off releasing this episode. That's


00:18:37.540 --> 00:18:42.060
right, it's already gonna be out of date. It says, "What will happen if I do not


00:18:42.060 --> 00:18:47.940
upgrade by January 1st?" Oh, I'm gonna come to your house and ridicule you. No, that's


00:18:47.940 --> 00:18:51.420
right, yeah, you'll be mocked by all your peers. No, it says, "Look, if people find


00:18:51.420 --> 00:18:55.860
catastrophic security fixes in Python 2 or in software written in Python 2, most


00:18:55.860 --> 00:18:59.700
volunteers will not help you. You know, over time you'll find it harder to hire


00:18:59.700 --> 00:19:04.820
people, you'll find it harder to use modern libraries and so on. So probably not the world


00:19:04.820 --> 00:19:09.700
is going to end straight away, obviously, but you know, you're going to be in quicksand


00:19:09.700 --> 00:19:15.620
at some point, right, to some degree. It says, okay, fine, I wrote some code in Python 2,


00:19:15.620 --> 00:19:20.780
how should I port it to Python 3? It says, please read the official porting guide here.


00:19:20.780 --> 00:19:26.100
And finally, I didn't hear anything about this till just now. Where was it announced?


00:19:26.100 --> 00:19:28.900
We talked about it at software conferences,


00:19:28.900 --> 00:19:30.700
the Python announcement mailing list,


00:19:30.700 --> 00:19:33.700
Python blogs, textbooks, technical articles,


00:19:33.700 --> 00:19:35.900
social medias, and companies that sell Python support.


00:19:35.900 --> 00:19:37.900
Oh, and podcasts.


00:19:37.900 --> 00:19:38.900
Does it say podcasts?


00:19:38.900 --> 00:19:40.100
No, I've amended it.


00:19:40.100 --> 00:19:40.700
Yeah.


00:19:40.700 --> 00:19:42.300
Yeah, I believe we have talked about it.


00:19:42.300 --> 00:19:45.500
Now that I've gone through, I do remember speaking about Legacy Python before.


00:19:45.500 --> 00:19:46.300
Yeah, we have.


00:19:46.300 --> 00:19:50.500
And then the last question of how can I make sure that I don't miss stuff like this again?


00:19:50.500 --> 00:19:52.300
Listen to Python Bytes.


00:19:52.300 --> 00:19:52.900
That's how.


00:19:52.900 --> 00:19:53.300
That's right.


00:19:53.300 --> 00:19:56.460
- That's the official recommendation from the PSF, I'm sure.


00:19:56.460 --> 00:19:57.660
- No, it's--


00:19:57.660 --> 00:19:58.940
- Or mailing lists, I guess.


00:19:58.940 --> 00:20:01.020
But I do think, I mean, we cover,


00:20:01.020 --> 00:20:02.620
we try to cover this kind of stuff, for sure.


00:20:02.620 --> 00:20:03.980
- Yeah.


00:20:03.980 --> 00:20:04.820
Duh.


00:20:04.820 --> 00:20:07.580
- Yeah, so there is the official sunsetting details


00:20:07.580 --> 00:20:10.180
from the PSF and the core developers.


00:20:10.180 --> 00:20:11.020
It looks good to me.


00:20:11.020 --> 00:20:11.840
- Yeah. - Cool.


00:20:11.840 --> 00:20:13.060
All right, well, that's it for our maid items.


00:20:13.060 --> 00:20:14.580
What else you got you wanna throw out there?


00:20:14.580 --> 00:20:15.820
- Well, there's two big news,


00:20:15.820 --> 00:20:17.580
and yours is definitely gonna happen,


00:20:17.580 --> 00:20:19.340
and mine is hopefully gonna happen.


00:20:19.340 --> 00:20:23.340
>> Mine is in the past, so it is more likely to have happened.


00:20:23.340 --> 00:20:24.660
>> Okay, so tell me about yours.


00:20:24.660 --> 00:20:27.340
>> All right. We have been working, we, me,


00:20:27.340 --> 00:20:29.620
and a bunch of other folks have been working with


00:20:29.620 --> 00:20:34.160
the Humble Bundle folks to release another Python Humble Bundle.


00:20:34.160 --> 00:20:36.740
Not just a bunch of books like an O'Reilly bundle thing,


00:20:36.740 --> 00:20:41.660
but a bunch of cool tools and library courses, everything.


00:20:41.660 --> 00:20:46.700
So we just launched the Humble Level Up Your Python Bundle.


00:20:47.100 --> 00:20:49.600
And yeah, there's tons of good stuff, right?


00:20:49.600 --> 00:20:52.500
There's three courses from Talk Python Training.


00:20:52.500 --> 00:20:54.420
There's the Code Challenges from Python Bytes.


00:20:54.420 --> 00:20:55.540
There's some PyCharm stuff.


00:20:55.540 --> 00:20:59.680
There's books from Dan Bader, from Matt Harrison.


00:20:59.680 --> 00:21:02.060
There's stuff from Trey Hunter.


00:21:02.060 --> 00:21:03.700
All sorts of good things in there.


00:21:03.700 --> 00:21:05.420
So be sure to check that out.


00:21:05.420 --> 00:21:10.420
You can get it much, much cheaper for a very short time.


00:21:10.420 --> 00:21:13.500
So probably, I guess a week, a week to two left


00:21:13.500 --> 00:21:15.660
if you listen to this the moment that we release it.


00:21:15.660 --> 00:21:18.440
So, there'll be some time but not a lot.


00:21:18.440 --> 00:21:20.480
And it's like $1,000 worth of stuff


00:21:20.480 --> 00:21:22.440
for 15 bucks or something like that.


00:21:22.440 --> 00:21:23.280
Seems like a good deal.


00:21:23.280 --> 00:21:25.080
- Yeah, yeah, it seems great.


00:21:25.080 --> 00:21:26.640
- I see this next thing that you're talking about.


00:21:26.640 --> 00:21:28.280
You're trying to work on my social life, aren't you?


00:21:28.280 --> 00:21:29.320
Get me out of the house.


00:21:29.320 --> 00:21:32.980
- Yes, but I want to make it really easy on me.


00:21:32.980 --> 00:21:34.880
This next one is all about me.


00:21:34.880 --> 00:21:37.580
Well, it's about you too and everybody else in Portland,


00:21:37.580 --> 00:21:39.160
but mostly about me.


00:21:39.160 --> 00:21:41.680
I thought it'd be cool, there's a Python meetup


00:21:41.680 --> 00:21:43.900
every month downtown Portland.


00:21:43.900 --> 00:21:45.940
and I don't live downtown Portland,


00:21:45.940 --> 00:21:48.820
I don't work in downtown Portland, so whammy.


00:21:48.820 --> 00:21:53.660
But I'm gonna put my, I guess, effort where my mouth is


00:21:53.660 --> 00:21:57.300
and start a Westside Portland Python meetup.


00:21:57.300 --> 00:21:58.900
- Yay, that's awesome.


00:21:58.900 --> 00:22:01.480
Yeah, 'cause to get down to the east side of Portland,


00:22:01.480 --> 00:22:04.020
if you're out somewhere by Intel or Nike


00:22:04.020 --> 00:22:07.420
or one of these, a lot of the tech companies here in town,


00:22:07.420 --> 00:22:09.420
it's like an hour, just one way.


00:22:09.420 --> 00:22:11.620
It's a tremendous amount of traffic you gotta go through.


00:22:11.620 --> 00:22:14.580
So this will definitely open up a whole 'nother angle


00:22:14.580 --> 00:22:15.420
for meetups.


00:22:15.420 --> 00:22:17.000
- Yeah, and I'm not trying to like, you know,


00:22:17.000 --> 00:22:18.540
steal their thunder or something.


00:22:18.540 --> 00:22:23.340
I've talked with the Python meetup dude from Portland


00:22:23.340 --> 00:22:25.080
and we're working together to make sure


00:22:25.080 --> 00:22:25.980
we don't overlap it.


00:22:25.980 --> 00:22:28.740
So I think we're shooting for like the second week


00:22:28.740 --> 00:22:31.100
in the month because they have things


00:22:31.100 --> 00:22:32.540
on the third and fourth.


00:22:32.540 --> 00:22:35.080
There's nothing there yet, but if by the time


00:22:35.080 --> 00:22:36.420
this comes out, there will be.


00:22:36.420 --> 00:22:39.180
I registered pythonpdx.com.


00:22:39.180 --> 00:22:41.380
That's where we're gonna announce stuff.


00:22:41.380 --> 00:22:44.840
Hopefully for October, October, but if not,


00:22:44.840 --> 00:22:46.660
then we'll get it done for November,


00:22:46.660 --> 00:22:48.520
but I'm really shooting for October.


00:22:48.520 --> 00:22:50.680
This is made possible because Roden Schwartz,


00:22:50.680 --> 00:22:53.820
the company I work for, has this awesome room


00:22:53.820 --> 00:22:55.460
that would work great for the meetup


00:22:55.460 --> 00:22:57.720
and they've agreed to let us use it.


00:22:57.720 --> 00:22:59.020
So that's great.


00:22:59.020 --> 00:22:59.860
- Yeah, sounds great.


00:22:59.860 --> 00:23:03.300
- Yeah, that's all I got, but I don't have any jokes.


00:23:03.300 --> 00:23:05.140
- We don't have any jokes, hold on.


00:23:05.140 --> 00:23:06.480
- I mean, we could just stare at each other


00:23:06.480 --> 00:23:08.940
for a few minutes, but it's not fun.


00:23:08.940 --> 00:23:10.700
Ooh, neat.


00:23:10.700 --> 00:23:12.700
How did the angry function exceed its call stack size?


00:23:12.700 --> 00:23:13.700
I don't know, why?


00:23:13.700 --> 00:23:15.700
It got into an argument with itself.


00:23:15.700 --> 00:23:16.700
[laughter]


00:23:16.700 --> 00:23:19.700
What's the object-oriented way of becoming wealthy?


00:23:19.700 --> 00:23:21.700
I'm not sure.


00:23:21.700 --> 00:23:22.700
Inheritance.


00:23:22.700 --> 00:23:23.700
Oh yeah, definitely.


00:23:23.700 --> 00:23:24.700
Of course.


00:23:24.700 --> 00:23:29.700
All right, well, not terribly funny, but these are some good programming dad jokes.


00:23:29.700 --> 00:23:30.700
Yeah, yeah.


00:23:30.700 --> 00:23:31.700
Nice.


00:23:31.700 --> 00:23:35.700
All right, well, thanks for being here as always, Brian.


00:23:35.700 --> 00:23:36.700
All right, thank you.


00:23:36.700 --> 00:23:37.700
Bye.


00:23:37.700 --> 00:23:38.700
Yeah, good to chat with you.


00:23:38.700 --> 00:23:39.700
Bye.


00:23:39.700 --> 00:23:46.020
to Python Bytes. Follow the show on Twitter via @PythonBytes. That's Python Bytes as in B-Y-T-E-S.


00:23:46.020 --> 00:23:50.900
And get the full show notes at PythonBytes.fm. If you have a news item you want featured,


00:23:50.900 --> 00:23:55.700
just visit PythonBytes.fm and send it our way. We're always on the lookout for sharing something


00:23:55.700 --> 00:24:00.500
cool. On behalf of myself and Brian Auchin, this is Michael Kennedy. Thank you for listening and


00:24:00.500 --> 00:24:02.740
sharing this podcast with your friends and colleagues.

