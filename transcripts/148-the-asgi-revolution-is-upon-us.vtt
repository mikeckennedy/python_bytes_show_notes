WEBVTT

00:00:00.001 --> 00:00:04.380
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.380 --> 00:00:10.040
This is episode 148, recorded September 11th, 2019.

00:00:10.040 --> 00:00:11.020
I'm Michael Kennedy.

00:00:11.020 --> 00:00:12.000
And I'm Brian Okken.

00:00:12.000 --> 00:00:14.420
And this episode is brought to you by DigitalOcean.

00:00:14.420 --> 00:00:17.460
Check them out at pythonbytes.fm/digitalocean.

00:00:17.460 --> 00:00:19.000
More on what they have to offer later.

00:00:19.000 --> 00:00:24.460
Brian, I feel like Python doesn't ship often enough.

00:00:24.460 --> 00:00:27.700
You know, it's like an 18-month release cycle.

00:00:27.700 --> 00:00:34.860
That's a really long time to wait for these features to come out, you know, especially in the world of Agile and Scrum and two-week sprints.

00:00:34.860 --> 00:00:39.200
Like, a year and a half is a long time to see an idea and have it happen.

00:00:39.200 --> 00:00:39.720
What do you think?

00:00:39.720 --> 00:00:41.880
It's like eons in Internet time, right?

00:00:41.880 --> 00:00:43.080
Right, for sure.

00:00:43.080 --> 00:00:44.820
I'm actually excited about this.

00:00:44.820 --> 00:00:46.020
There's an announcement.

00:00:46.020 --> 00:00:52.460
It's not been announced or decided yet, but there's a PEP, PEP 602, which is under discussion.

00:00:52.460 --> 00:00:55.840
We've got links to both the discussion and the PEP.

00:00:55.980 --> 00:00:59.120
But it's to bring an annual release cadence.

00:00:59.120 --> 00:01:03.700
So, every year, every 12 months instead of every 18 months.

00:01:03.700 --> 00:01:07.320
And there's some specifics around it, which are kind of neat.

00:01:07.320 --> 00:01:12.860
It does not mean that people will develop each feature, each release in 12 months.

00:01:12.860 --> 00:01:16.420
It's actually a 17th month cycle, which is weird.

00:01:16.420 --> 00:01:17.220
It's interesting.

00:01:17.220 --> 00:01:19.080
It totally makes sense when you read it.

00:01:19.080 --> 00:01:22.780
My first thought was, how do they fit 17 months into 12 months?

00:01:22.780 --> 00:01:25.840
You go really, really fast, and then you change a little bit of space time.

00:01:25.840 --> 00:01:31.960
There's five months of unversioned overlap time where some of the new features can get worked on, and they're not doing releases.

00:01:31.960 --> 00:01:37.060
Yeah, that's really interesting because they have a cool graph in here that shows them overlaid.

00:01:37.400 --> 00:01:39.580
And actually, all the releases laid out.

00:01:39.580 --> 00:01:39.920
I don't know.

00:01:39.920 --> 00:01:44.000
It's about a third, a little more than that down the page that we're linking to.

00:01:44.000 --> 00:01:48.020
And it shows, okay, we're going to work on the alpha features, which is creating the feature.

00:01:48.020 --> 00:01:50.800
And then beta is kind of where it stabilizes and gets cleaned up.

00:01:50.860 --> 00:01:56.660
But as it switches to beta for one, it kicks off for development, maybe more a little bit later.

00:01:56.660 --> 00:02:01.800
But there's like this overlap, right, where you stop working on one, and you also concurrently start adding new features.

00:02:01.800 --> 00:02:04.380
That's what happens in software projects anyway.

00:02:04.380 --> 00:02:12.480
Like in a commercial world, you're wrapping up one release while people are starting to work on features for the next release anyway.

00:02:12.480 --> 00:02:14.900
It's just this reality anyway.

00:02:15.380 --> 00:02:16.160
I think it's good.

00:02:16.160 --> 00:02:22.240
There's some rationale and goals, smaller releases, less stuff within each release.

00:02:22.240 --> 00:02:31.480
One of the big ones is there's often a rush to get stuff into the first beta because if it didn't get in, it's not going in this one, and it has to wait 18 months.

00:02:31.480 --> 00:02:37.200
And waiting a year, it's only six months difference, but that's a big difference.

00:02:37.560 --> 00:02:45.500
There was also some weirdness with how, I mean, there's annual sprints and PyCon, which is about the same time every year.

00:02:45.500 --> 00:02:53.060
But having the release cycle be sometimes offset by six months every time just was weird.

00:02:53.060 --> 00:03:00.440
Yeah, it means like the sprints can more carefully align with, say, the alpha stage or something of the next version, right?

00:03:00.440 --> 00:03:01.300
They time it right.

00:03:01.300 --> 00:03:09.720
There's also a mention in the non-goals section about switching to an annual release calendar allows for a more natural calendar version.

00:03:09.720 --> 00:03:18.340
So, for example, Python 3.20 might be the one released in October 2020.

00:03:18.340 --> 00:03:25.320
The one, Python 3.23 would be the one in October 2023 and things like that.

00:03:25.320 --> 00:03:26.000
That might be nice.

00:03:26.000 --> 00:03:28.540
Yeah, but we're only up to like 3.8 now.

00:03:28.540 --> 00:03:30.420
How did we get from 3.8 to 3.20?

00:03:30.680 --> 00:03:31.520
Yeah, switching.

00:03:31.520 --> 00:03:33.420
Well, it goes 3.9 and then 3.20.

00:03:33.420 --> 00:03:34.800
That's how you count.

00:03:34.800 --> 00:03:35.040
Yeah.

00:03:35.040 --> 00:03:36.160
It's pretty good.

00:03:36.160 --> 00:03:41.400
Yeah, so this is proposed by Lucas Lenga, and he's currently the release manager for Python.

00:03:41.400 --> 00:03:43.800
So, he's the one with all the skin in the game.

00:03:43.800 --> 00:03:46.160
And yeah, I think this is nice.

00:03:46.160 --> 00:03:49.460
I've always thought it was weird to have such a long release cycle.

00:03:49.460 --> 00:03:50.880
So, I'm happy to see this.

00:03:50.880 --> 00:03:54.340
I mean, there's risks and downsides, of course, that would be on the other side.

00:03:54.900 --> 00:04:02.020
Also, with that same graph, you notice that there's five versions supported at a time instead of four.

00:04:02.240 --> 00:04:05.600
So, there's the test matrix of people doing distributions.

00:04:05.600 --> 00:04:09.880
They got to test five versions instead of four if they're testing everything.

00:04:09.880 --> 00:04:11.540
It is what it is.

00:04:11.540 --> 00:04:12.560
Yeah.

00:04:12.560 --> 00:04:13.620
It's interesting.

00:04:13.620 --> 00:04:15.560
There's some rejected ideas as well.

00:04:15.560 --> 00:04:17.980
Keep the current 18-month release cadence.

00:04:17.980 --> 00:04:19.080
This is rejected.

00:04:19.080 --> 00:04:20.180
We don't like it.

00:04:20.180 --> 00:04:24.080
And double the release cadence to achieve nine months between major versions.

00:04:24.080 --> 00:04:26.180
But it's too irregular and too short.

00:04:26.180 --> 00:04:29.620
And just slow down releases and don't freeze them at beta one.

00:04:30.020 --> 00:04:30.140
Yeah.

00:04:30.140 --> 00:04:30.920
I like it.

00:04:30.920 --> 00:04:31.740
It's pretty good.

00:04:31.740 --> 00:04:35.600
I mean, it wasn't even considered to have weekly release cycles.

00:04:35.600 --> 00:04:36.400
I'm not sure why.

00:04:36.400 --> 00:04:36.700
Yeah.

00:04:36.700 --> 00:04:39.700
We just ship whatever is on the master branch.

00:04:39.700 --> 00:04:40.240
Yeah.

00:04:40.240 --> 00:04:40.960
Daily.

00:04:40.960 --> 00:04:41.920
Nightly builds.

00:04:41.920 --> 00:04:42.620
Nightly builds.

00:04:42.620 --> 00:04:43.720
Might hold off on that.

00:04:43.720 --> 00:04:47.360
So, this next thing I want to talk about, it's pretty awesome, Brian.

00:04:47.360 --> 00:04:47.820
Is it?

00:04:47.820 --> 00:04:48.520
Yeah.

00:04:48.520 --> 00:04:52.200
It's called Awesome ASGI or ASGI.

00:04:52.200 --> 00:04:52.760
I don't know.

00:04:52.760 --> 00:04:56.340
I'm not sure what the phonetics of ASGI.

00:04:56.660 --> 00:05:00.200
But we have WSGI, which are the WSGI servers.

00:05:00.200 --> 00:05:10.700
This is like the traditional web service gateway interface where basically all the different web frameworks like Django, Flask, Pyramid, and so on implement that.

00:05:10.840 --> 00:05:15.600
And then all the servers like MicroWSGI and G Unicorn and whatnot support that.

00:05:15.600 --> 00:05:17.480
And that's like how they click together.

00:05:17.480 --> 00:05:17.900
Right?

00:05:17.900 --> 00:05:20.200
That's their docking mechanism.

00:05:20.200 --> 00:05:22.880
And WSGI is broken.

00:05:22.880 --> 00:05:25.360
Fundamentally irreparable.

00:05:25.360 --> 00:05:29.240
Broken for building asynchronous web apps.

00:05:29.520 --> 00:05:34.700
That's unfortunate because async and await and async.io is most important on the web server.

00:05:34.700 --> 00:05:35.060
Right?

00:05:35.060 --> 00:05:36.000
Like what do web servers do?

00:05:36.000 --> 00:05:37.260
They wait on databases.

00:05:37.260 --> 00:05:38.400
They wait on the network.

00:05:38.400 --> 00:05:41.760
They wait on third-party APIs like Stripe.

00:05:41.760 --> 00:05:42.420
They just wait.

00:05:42.420 --> 00:05:43.740
It's mostly what they do.

00:05:43.740 --> 00:05:44.060
Yeah.

00:05:44.060 --> 00:05:52.600
And so, if you could let your server do other stuff while that's waiting, you could massively amplify the concurrent number of users for the same amount of hardware and things like this.

00:05:53.020 --> 00:05:55.020
So, enter ASGI.

00:05:55.020 --> 00:05:58.860
I'm going to go with ASGI for now until somebody shows me the right way to say it.

00:05:58.860 --> 00:06:04.820
So, ASGI is a new interface for this successor to WSGI.

00:06:04.820 --> 00:06:12.500
And it came out of Django Channels, which is a way to add some asynchronous behavior to Django.

00:06:12.500 --> 00:06:18.100
And it's also got boosted by things like Starlit and UVicorn and so on.

00:06:18.100 --> 00:06:25.240
So, what this is it's an awesome list for all sorts of things around asynchronous web Python things.

00:06:25.240 --> 00:06:34.080
So, we have async web apps, async web frameworks, async web servers like UVicorn and so on.

00:06:34.580 --> 00:06:47.800
So, if you are wanting to build some sort of high-load, highly scalable website and you want to figure out what should I be using, it's super confusing right now because things come and go so fast.

00:06:47.800 --> 00:06:51.600
Like, Jepronto was really this big thing until it wasn't.

00:06:51.600 --> 00:06:53.080
Stopped getting worked on it, right?

00:06:53.080 --> 00:06:56.080
Like, the shelf life is no longer 10 years.

00:06:56.080 --> 00:06:57.920
It's maybe, you know, a couple months.

00:06:57.920 --> 00:07:01.360
So, knowing what's happening in this space is pretty hard.

00:07:01.360 --> 00:07:03.740
There's some good frameworks talked about here.

00:07:03.740 --> 00:07:07.140
Bocadillo, Channels, FastAPI here is really good.

00:07:07.140 --> 00:07:10.340
Core is a solid one for converting Flask to async.

00:07:10.340 --> 00:07:12.040
Responder, Starlit.

00:07:12.040 --> 00:07:15.160
Starlit seems to be the foundation of almost everything these days.

00:07:15.160 --> 00:07:18.300
So, it's really probably the most important here.

00:07:18.300 --> 00:07:22.040
But a nice grouping of all these various things that you might want to work with.

00:07:22.040 --> 00:07:28.260
Yeah, and they also want to try to do more than just applications but also libraries and middleware items as well.

00:07:28.960 --> 00:07:37.100
Yeah, so this is not as popular as, say, like, just a straight awesome Python list or Mamu Tashemi's awesome apps list or something like that.

00:07:37.100 --> 00:07:40.660
But I do think it's important and, you know, hopefully people go out there.

00:07:40.660 --> 00:07:43.960
If they have some ideas, they can contribute some projects to the list.

00:07:43.960 --> 00:07:44.540
It's not too hard.

00:07:44.540 --> 00:07:45.300
Yeah, definitely.

00:07:45.300 --> 00:07:46.020
All right, what's next?

00:07:46.020 --> 00:07:51.260
Well, there's another awesome – a couple other awesome projects, but they're not awesome lists.

00:07:51.760 --> 00:07:56.480
Two awesome projects I want to talk about, sort of, are Jupyter and Pangio.

00:07:56.480 --> 00:08:05.260
This comes up because there was an announcement titled that Jupyter meets the Earth, which is kind of fun.

00:08:05.260 --> 00:08:07.700
Plus, they're both circular logos.

00:08:07.700 --> 00:08:09.160
The Earth has a logo.

00:08:09.160 --> 00:08:09.960
It looks like the Earth.

00:08:09.960 --> 00:08:10.180
Yeah.

00:08:10.340 --> 00:08:21.780
This is a write-up about a really cool announcement that the National Science Foundation is giving $2 million of funding over three years

00:08:21.780 --> 00:08:28.560
as part of an EarthCube grant program to go towards Jupyter infrastructure and Jupyter and Pangio.

00:08:29.440 --> 00:08:31.860
And it's – hopefully it will be pretty cool.

00:08:31.860 --> 00:08:40.340
It's actually a really neat write-up talking about how the adoption of open languages like Python and, on top of that, Jupyter and others,

00:08:40.340 --> 00:08:44.960
have really been taken up by a lot of different science backgrounds.

00:08:44.960 --> 00:08:50.640
And we really need some more Earth-based science to utilize this.

00:08:50.640 --> 00:08:52.220
And so this will help it out quite a bit.

00:08:52.220 --> 00:08:52.860
It's kind of neat.

00:08:52.860 --> 00:08:53.820
This is super cool.

00:08:53.820 --> 00:08:55.880
And it's really great to see them getting so much funding.

00:08:55.880 --> 00:08:59.240
You know, Jupyter is definitely doing well in the funding space.

00:08:59.400 --> 00:09:07.720
And I didn't know where Pangio was before, but it sounds like this puts them really solidly in the stable and growing, getting lots of support space.

00:09:07.720 --> 00:09:15.520
One of the things I love about Jupyter and Python being the center of around and some of the data science is the openness.

00:09:15.520 --> 00:09:22.920
So people are really pushing for open data as well so that anything that gets published can be seen by other people.

00:09:22.920 --> 00:09:29.360
I think that pushes science forward really far because just even people in their bedroom might have a –

00:09:29.360 --> 00:09:34.080
a cool idea with the data and find some things that other people can't and help contribute.

00:09:34.080 --> 00:09:36.920
It's really kind of incredible to be part of this.

00:09:36.920 --> 00:09:37.980
Yeah, absolutely.

00:09:37.980 --> 00:09:43.360
And one of the use cases is for climate data, climate change studies, and things like that.

00:09:43.360 --> 00:09:47.100
So, you know, definitely need some attention on that.

00:09:47.100 --> 00:09:51.580
I'm sure there's plenty already, but more is good here.

00:09:51.680 --> 00:09:55.580
So this write-up is by Lindsay Hagee and Fernando Perez.

00:09:55.580 --> 00:10:04.420
And just want to mention, Lindsay was on Talk Python quite a while ago talking about Pangio and her earth science research she's doing.

00:10:04.420 --> 00:10:06.240
So geoscience, things like that.

00:10:06.240 --> 00:10:07.960
So if you want to dive deeper, check that out.

00:10:07.960 --> 00:10:08.840
Yeah, very cool.

00:10:08.840 --> 00:10:09.500
Yeah, for sure.

00:10:10.020 --> 00:10:15.120
Now, before I spring some pretty big news on people, let me tell you real quick about DigitalOcean.

00:10:15.120 --> 00:10:18.200
So all of our infrastructure runs on DigitalOcean.

00:10:18.200 --> 00:10:19.780
They've been big supporters of the show.

00:10:19.780 --> 00:10:24.660
Their newest thing is that they just launched two new things as a service.

00:10:24.660 --> 00:10:30.720
So you can, instead of have servers to manage, you just check a box and now you have services at your disposal.

00:10:30.720 --> 00:10:33.060
Those are MySQL and Redis.

00:10:33.060 --> 00:10:38.280
So if you want to use MySQL or Redis, you can now start doing that over at DigitalOcean.

00:10:38.280 --> 00:10:44.600
Previously, they had Postgres as a service, and Postgres is very popular in the Python space.

00:10:44.600 --> 00:10:46.980
But, you know, MySQL and Redis also are as well.

00:10:46.980 --> 00:10:49.240
And Redis kind of plays an alternate role anyway.

00:10:49.240 --> 00:10:53.700
It's, you know, a traditional relational database caching and things like that.

00:10:53.700 --> 00:10:57.300
So check that out, along with a bunch of other good things.

00:10:57.300 --> 00:10:59.280
Pythonbytes.fm slash DigitalOcean.

00:10:59.280 --> 00:11:02.620
Now, I told you about the cool, awesome list, right, Brian?

00:11:02.620 --> 00:11:05.420
The awesome ASGI, I'm saying?

00:11:05.420 --> 00:11:07.280
Yes, asynchronous is here to stay.

00:11:07.280 --> 00:11:08.220
It is here to stay.

00:11:08.220 --> 00:11:13.000
Now, there is a very notable absent framework in there.

00:11:13.000 --> 00:11:14.580
Talked about Quart.

00:11:14.580 --> 00:11:17.660
That's kind of the async version of Flask, if you will.

00:11:17.660 --> 00:11:22.920
There is some talk that maybe those two projects will work together, just make Flask itself asynchronous.

00:11:22.920 --> 00:11:24.280
But that's a different story.

00:11:24.280 --> 00:11:26.440
But there was nothing in there really for Django.

00:11:26.440 --> 00:11:28.820
I mean, there's channels, but that's a separate project, right?

00:11:28.820 --> 00:11:29.100
Yeah.

00:11:29.100 --> 00:11:30.240
Until now.

00:11:30.240 --> 00:11:30.660
Yeah.

00:11:30.660 --> 00:11:31.440
So tell me.

00:11:31.440 --> 00:11:32.400
I'm excited.

00:11:32.400 --> 00:11:33.240
What's going on?

00:11:33.240 --> 00:11:33.560
Yeah.

00:11:34.100 --> 00:11:42.280
So I don't know exactly how recently this was announced because there's no dates on the announcement, which makes it tough to know.

00:11:42.280 --> 00:11:47.780
But Django 3.0, all the details for its roadmap are now out.

00:11:47.880 --> 00:11:50.620
So the release notes for Django 3.0 are here.

00:11:50.620 --> 00:11:55.200
It's expected that Django 3.0 is going to be released December 2019.

00:11:55.200 --> 00:12:00.100
So that's like a Django Christmas present or whatever, something for the holidays, right?

00:12:00.100 --> 00:12:01.340
Coming soon.

00:12:01.720 --> 00:12:03.840
And there's tons of changes, right?

00:12:03.840 --> 00:12:08.740
About, for example, Django 3.0 only supports Python 3.6 and above.

00:12:08.740 --> 00:12:11.180
They are dropping support even for 3.5.

00:12:11.180 --> 00:12:14.420
And if you want 3.5 support, you have to go back to 2.2.

00:12:14.420 --> 00:12:18.800
And of course, 2.2 or 2.0 already dropped support for legacy Python.

00:12:18.800 --> 00:12:21.400
So you've got to even go farther back to get way back there.

00:12:21.400 --> 00:12:22.520
You don't want to go back there.

00:12:22.520 --> 00:12:22.740
No.

00:12:22.840 --> 00:12:23.800
But that's all good.

00:12:23.800 --> 00:12:28.600
There's a bunch of other changes, Marriott and DB support and various things.

00:12:28.600 --> 00:12:29.200
You can check that out.

00:12:29.200 --> 00:12:35.440
But the big news, I think, here is ASGI support for Django 3.0.

00:12:35.440 --> 00:12:47.440
They say Django 3.0 begins our journey to making Django a fully async capable, to making it fully async capable by providing support for running it as an ASGI app.

00:12:47.440 --> 00:12:50.520
And that doesn't mean they're dropping WSGI support.

00:12:50.880 --> 00:12:54.720
They're expecting for these to sort of pair together, as you might expect, right?

00:12:54.720 --> 00:12:56.200
A lot of these can be run in either way.

00:12:56.200 --> 00:13:01.680
But you have to run it on an ASGI server to get the async features, as we kind of hinted at before.

00:13:01.680 --> 00:13:02.480
Pretty cool, huh?

00:13:02.480 --> 00:13:03.580
Yeah, that's very cool.

00:13:03.580 --> 00:13:08.720
Yeah, so you don't need to change anything about your code, but you'll be able to start writing asynchronous methods.

00:13:08.720 --> 00:13:15.600
So when you're waiting on that database or that web service, you can now wait on 1,000 of them instead of one in the same process with about the same amount of work,

00:13:15.600 --> 00:13:18.580
which sounds like a pretty awesome change for almost no effort.

00:13:18.580 --> 00:13:20.600
Well, you said you don't have to change anything.

00:13:20.680 --> 00:13:24.420
Does Django have an upgrade migration path for people to upgrade?

00:13:24.420 --> 00:13:27.340
Well, I think you just have to start rewriting your view methods.

00:13:27.340 --> 00:13:32.720
You've got to add the async keyword, async def instead of def, and you've got to start using async libraries.

00:13:32.720 --> 00:13:33.280
Okay.

00:13:33.400 --> 00:13:35.260
It's going to be interesting, the database story.

00:13:35.260 --> 00:13:40.040
Like, Django has a built-in ORM, and it says things like there are some side effects to be aware of.

00:13:40.040 --> 00:13:49.480
Like, Django is now aware of the asynchronous event loops and will block you calling code marked as async unsafe, such as ORM operations.

00:13:50.180 --> 00:13:54.520
So maybe, I don't know what the story is around the ORM and async.

00:13:54.520 --> 00:14:02.220
Maybe it's not totally clear, but it seems like a really good place to actually have async, because the thing you wait on most is databases, so you should probably be able to wait on them.

00:14:02.280 --> 00:14:05.500
Yeah, and I actually am also interested in the MariaDB.

00:14:05.500 --> 00:14:09.840
I hadn't really got into that before, so that's kind of an interesting side story as well.

00:14:09.840 --> 00:14:11.160
Yeah, absolutely.

00:14:11.160 --> 00:14:11.980
Anyway.

00:14:12.080 --> 00:14:21.420
So there's all sorts of stuff we're linking to in Django 3.0, but I think the big news is front and center async support right in the main project.

00:14:21.420 --> 00:14:25.520
And I wonder if the drop of 3.5 is because people like f-strings.

00:14:25.520 --> 00:14:25.960
Yeah.

00:14:25.960 --> 00:14:27.440
Yeah, I think so.

00:14:27.440 --> 00:14:30.420
Yeah, it's like, we can't not use f-strings.

00:14:30.420 --> 00:14:34.420
I want to run Flint on this project, but I can't because it might run in 3.5.

00:14:34.420 --> 00:14:35.740
Let's make that a possible.

00:14:35.740 --> 00:14:36.900
Yeah, yeah, okay.

00:14:36.900 --> 00:14:43.720
I've heard about this possibility of different software engineers having different levels of effectiveness.

00:14:43.720 --> 00:14:46.680
And oftentimes, this is referred to as the 10x engineer, right?

00:14:46.680 --> 00:14:51.620
This special person that makes all this money and actually makes the startup do its thing or whatever.

00:14:51.620 --> 00:14:53.440
John Carmack and Doom.

00:14:53.440 --> 00:14:57.140
So you found another kind of engineer?

00:14:57.140 --> 00:14:59.140
Yeah, I really like this list.

00:14:59.140 --> 00:15:01.020
I found the 1x engineer.

00:15:01.020 --> 00:15:02.180
The 1x engineer, awesome.

00:15:02.180 --> 00:15:04.600
What constitutes a 1x engineer?

00:15:04.740 --> 00:15:09.820
Well, there's a whole list and you can contribute it because it's based on a GitHub repo.

00:15:09.820 --> 00:15:13.180
I think it's definitely a fun take on the 10x thing.

00:15:13.180 --> 00:15:17.080
But if you look at these lists, I think some of these are really good.

00:15:17.080 --> 00:15:22.240
And I think actually should have been like something like maybe 3x or 4x or 8x or something.

00:15:22.240 --> 00:15:24.660
I'm not sure how high this scale goes anyway.

00:15:24.660 --> 00:15:26.800
But here's a few of them.

00:15:26.800 --> 00:15:29.880
1x engineer has a life outside of engineering.

00:15:29.880 --> 00:15:32.260
Writes code that others can read.

00:15:32.620 --> 00:15:35.560
Doesn't act surprised when someone doesn't know something.

00:15:35.560 --> 00:15:37.580
Asks for help when they need it.

00:15:37.580 --> 00:15:39.800
Is able to say things like, I don't know.

00:15:39.800 --> 00:15:42.780
Constructively participates in code reviews.

00:15:42.780 --> 00:15:44.240
Shares knowledge.

00:15:44.240 --> 00:15:45.480
Never stops learning.

00:15:45.480 --> 00:15:50.180
So I like that because obviously they listen to Python Bytes, talk Python, and test in code.

00:15:50.180 --> 00:15:50.560
Absolutely.

00:15:50.560 --> 00:15:51.060
Yeah.

00:15:51.060 --> 00:15:53.900
Has unproductive and productive days.

00:15:53.900 --> 00:15:55.480
Fails from time to time.

00:15:55.480 --> 00:15:58.680
Doesn't hate on framework Y when working with framework X.

00:15:59.280 --> 00:16:01.860
Anyway, we pulled out a handful of these to put in the show notes.

00:16:01.860 --> 00:16:03.320
But the list is pretty long.

00:16:03.320 --> 00:16:04.960
And I like it.

00:16:04.960 --> 00:16:09.960
It's kind of a neat, fun take on just basically, this is what we expect from everybody.

00:16:09.960 --> 00:16:10.480
Very nice.

00:16:10.480 --> 00:16:13.920
It says, I've never heard of that in lieu of nodding and pretending.

00:16:13.920 --> 00:16:18.060
And also, is willing to have a brightly colored desktop background.

00:16:18.060 --> 00:16:19.360
Very nice.

00:16:19.460 --> 00:16:22.700
Yeah, I think the new 10X engineer has pink, not black.

00:16:22.700 --> 00:16:23.220
That's right.

00:16:23.220 --> 00:16:25.160
Now, this is actually, this is really great.

00:16:25.160 --> 00:16:25.600
I like it.

00:16:25.600 --> 00:16:25.980
It's fun.

00:16:25.980 --> 00:16:29.880
And it's written in very fun fonts and style, right?

00:16:29.880 --> 00:16:33.180
There's a button there that says you can go away from the fancy style.

00:16:33.180 --> 00:16:35.000
Nice.

00:16:35.000 --> 00:16:35.900
What is that font?

00:16:35.900 --> 00:16:37.500
It's like, I don't know.

00:16:37.500 --> 00:16:40.800
I think it's Atari 2600 font or something like that.

00:16:40.800 --> 00:16:42.660
Maybe Commodore 64 font.

00:16:42.660 --> 00:16:43.040
It's beautiful.

00:16:43.040 --> 00:16:43.480
Yeah.

00:16:43.480 --> 00:16:45.040
At least it's not Comic Sans.

00:16:45.040 --> 00:16:45.840
Nice.

00:16:45.840 --> 00:16:46.660
Yeah, for sure.

00:16:46.660 --> 00:16:47.240
Thank goodness.

00:16:47.240 --> 00:16:47.800
Or Blinky.

00:16:48.600 --> 00:16:53.320
Okay, now, there's a topic that I think is important, Brian, that we should touch on.

00:16:53.320 --> 00:16:55.840
Will you just tell me if we've spoken about this before?

00:16:55.840 --> 00:17:00.360
It has to do with Python 2 going out of the world here.

00:17:00.360 --> 00:17:01.500
Sunsetting Python 2.

00:17:01.500 --> 00:17:02.100
Oh, yeah.

00:17:02.100 --> 00:17:04.000
Have we spoken about Python and legacy Python?

00:17:04.000 --> 00:17:05.100
Maybe we haven't.

00:17:05.100 --> 00:17:08.040
So if we haven't, people should get onto the Python 3 thing.

00:17:08.040 --> 00:17:08.700
That's right.

00:17:08.700 --> 00:17:15.740
Now, what we're linking to is an official document that formalizes the sunsetting of Python 2.

00:17:16.160 --> 00:17:18.700
So this is over on python.org slash doc.

00:17:18.700 --> 00:17:20.940
Just sunset Python 2 with dashes.

00:17:20.940 --> 00:17:21.820
I'll link to it.

00:17:22.440 --> 00:17:24.120
And it's sort of a Q&A.

00:17:24.120 --> 00:17:27.160
Like, what if I didn't know Python 2 was going away?

00:17:27.160 --> 00:17:28.060
What should I do?

00:17:28.060 --> 00:17:28.860
And so on.

00:17:28.860 --> 00:17:31.100
So let me just talk to you real quick about this.

00:17:31.100 --> 00:17:35.200
This is something good you can share with people who are like, wait, why is our Python old?

00:17:35.200 --> 00:17:35.820
What are you telling me?

00:17:36.820 --> 00:17:43.760
So it says, officially, January 1st, 2020 will be the last day or the day that Python 2 is sunsetted.

00:17:43.760 --> 00:17:45.600
I thought it would be really great.

00:17:45.600 --> 00:17:50.060
New Year's resolution, write no more Python 2 code, I guess, is the way to interpret this.

00:17:50.060 --> 00:17:54.220
And it says, you know, Q&A, like, why are we doing this?

00:17:54.220 --> 00:17:57.500
We need to sunset Python 2 so that we can help Python users.

00:17:59.280 --> 00:18:05.200
We want to add new features to Python 3 and stop supporting Python 2, even though we're not adding features to it.

00:18:05.200 --> 00:18:06.780
And it says, you know what?

00:18:06.780 --> 00:18:12.180
Back in 2006, like, long ago, we started working on Python 3.

00:18:12.180 --> 00:18:16.020
And in 2008, we said 2015 was the end of Python 2.

00:18:16.020 --> 00:18:17.740
That didn't work out so well.

00:18:17.920 --> 00:18:20.040
So now we're really meaning it 2020.

00:18:20.040 --> 00:18:20.620
Yeah.

00:18:20.620 --> 00:18:23.640
And then it says, how long is it until the sunset date?

00:18:23.640 --> 00:18:29.960
The Python clock will tell you, it says, which is three months, 20 days, 10 hours, 31 minutes, and 37 seconds.

00:18:29.960 --> 00:18:31.940
That's less than four months.

00:18:31.940 --> 00:18:32.540
That's coming up.

00:18:32.540 --> 00:18:33.220
This is for real.

00:18:33.220 --> 00:18:33.760
Yeah.

00:18:33.760 --> 00:18:37.100
It's even faster if we hold off releasing this episode.

00:18:37.100 --> 00:18:37.760
That's right.

00:18:37.760 --> 00:18:38.880
It's already going to be out of date.

00:18:38.880 --> 00:18:44.040
It says, what will happen if I do not upgrade by January 1st?

00:18:44.040 --> 00:18:47.020
Oh, I'm going to come to your house and ridicule you.

00:18:47.020 --> 00:18:47.720
No.

00:18:47.840 --> 00:18:48.220
That's right.

00:18:48.220 --> 00:18:48.500
Yeah.

00:18:48.500 --> 00:18:49.720
You'll be mocked by all your peers.

00:18:49.720 --> 00:18:49.900
No.

00:18:49.900 --> 00:18:57.500
It says, look, if people find catastrophic security fixes in Python 2 or software written in Python 2, most volunteers will not help you.

00:18:57.500 --> 00:19:00.100
You know, over time, you'll find it harder to hire people.

00:19:00.100 --> 00:19:02.700
You'll find it harder to use modern libraries and so on.

00:19:02.700 --> 00:19:06.200
So probably not the world is going to end straight away, obviously.

00:19:06.200 --> 00:19:11.140
But, you know, you're going to be in quicksand at some point, right, to some degree.

00:19:11.140 --> 00:19:13.000
It says, okay, fine.

00:19:13.000 --> 00:19:15.080
I wrote some code in Python 2.

00:19:15.080 --> 00:19:16.860
How should I port it to Python 3?

00:19:16.860 --> 00:19:17.200
It says, please.

00:19:17.760 --> 00:19:19.740
Please read the official porting guide here.

00:19:20.340 --> 00:19:24.060
And finally, I didn't hear anything about this until just now.

00:19:24.060 --> 00:19:25.420
Where was it announced?

00:19:25.420 --> 00:19:35.740
Well, we talked about our software conferences, the Python announcement mailing list, Python blogs, textbooks, technical articles, social medias, and companies that sell Python support.

00:19:35.740 --> 00:19:37.780
Oh, and podcasts.

00:19:37.920 --> 00:19:38.700
Does it say podcast?

00:19:38.700 --> 00:19:40.080
No, I've amended it.

00:19:40.080 --> 00:19:40.620
Yeah.

00:19:40.620 --> 00:19:41.000
Yeah.

00:19:41.000 --> 00:19:42.320
I believe we have talked about it.

00:19:42.320 --> 00:19:45.380
Now that I've gone through it, I do remember speaking about legacy Python before.

00:19:45.380 --> 00:19:46.180
Yeah, we have.

00:19:46.180 --> 00:19:50.380
And then the last question of how can I make sure that I don't miss stuff like this again?

00:19:50.380 --> 00:19:52.160
Listen to Python Bytes.

00:19:52.160 --> 00:19:52.720
That's how.

00:19:52.720 --> 00:19:53.180
That's right.

00:19:53.180 --> 00:19:56.200
That's the official recommendation from the PSF, I'm sure.

00:19:56.200 --> 00:19:57.640
No, it's a...

00:19:57.640 --> 00:19:58.900
Or mailing list, I guess.

00:19:58.980 --> 00:20:02.540
But no, I do think, I mean, we cover, we try to cover this kind of stuff for sure.

00:20:02.540 --> 00:20:02.820
Yeah.

00:20:02.820 --> 00:20:04.320
Duh.

00:20:04.320 --> 00:20:04.720
Yeah.

00:20:04.720 --> 00:20:09.820
So there is the official sunsetting details from the PSF and the core developers.

00:20:09.820 --> 00:20:10.720
It looks good to me.

00:20:10.720 --> 00:20:11.000
Yeah.

00:20:11.000 --> 00:20:11.240
Cool.

00:20:11.460 --> 00:20:11.640
All right.

00:20:11.640 --> 00:20:12.800
Well, that's it for our main items.

00:20:12.800 --> 00:20:14.400
What else you got you want to throw out there?

00:20:14.400 --> 00:20:19.220
Well, there's two big newses and yours is definitely going to happen and mine is hopefully going to happen.

00:20:19.220 --> 00:20:23.220
Mine is in the past, so it is more likely to have happened.

00:20:23.220 --> 00:20:23.580
Okay.

00:20:23.580 --> 00:20:24.540
So tell me about yours.

00:20:24.540 --> 00:20:24.920
All right.

00:20:24.920 --> 00:20:31.020
We have been working, we, me, and a bunch of other folks have been working with the Humble Bundle folks

00:20:31.020 --> 00:20:33.860
to release another Python Humble Bundle.

00:20:33.860 --> 00:20:39.780
Not just a bunch of books like an O'Reilly bundle thing, but a bunch of cool tools and library courses,

00:20:39.780 --> 00:20:41.320
everything.

00:20:41.320 --> 00:20:41.720
Right.

00:20:41.720 --> 00:20:45.540
So we just launched the Humble Level Up Your Python Bundle.

00:20:45.540 --> 00:20:46.500
Bundle.

00:20:46.500 --> 00:20:49.540
And yeah, there's tons of good stuff, right?

00:20:49.540 --> 00:20:51.860
There's three courses from Talk Python Training.

00:20:51.860 --> 00:20:54.360
There's the Code Challenges from Python Bytes.

00:20:54.360 --> 00:20:55.360
There's some PyCharm stuff.

00:20:55.360 --> 00:20:59.120
There's books from Dan Bader, from Matt Harrison.

00:20:59.120 --> 00:21:01.860
There's stuff from Trey Hunter.

00:21:01.860 --> 00:21:03.280
All sorts of good things in there.

00:21:03.280 --> 00:21:04.900
So be sure to check that out.

00:21:04.900 --> 00:21:10.160
You can get it much, much cheaper for a very short time.

00:21:10.160 --> 00:21:15.620
So probably, I guess a week, a week to two left from, if you listen to this, the moment that we released it.

00:21:15.620 --> 00:21:18.240
So there'll be some time, but not a lot.

00:21:18.240 --> 00:21:22.360
And there's like $1,000 worth of stuff for $15 or something like that.

00:21:22.360 --> 00:21:23.140
Seems like a good deal.

00:21:23.280 --> 00:21:23.520
Yeah.

00:21:23.520 --> 00:21:24.300
Yeah.

00:21:24.300 --> 00:21:24.920
It seems great.

00:21:24.920 --> 00:21:26.540
I see this next thing that you're talking about.

00:21:26.540 --> 00:21:28.160
You're trying to work on my social life, aren't you?

00:21:28.160 --> 00:21:28.940
Get me out of the house.

00:21:28.940 --> 00:21:29.900
Yes.

00:21:29.900 --> 00:21:32.600
But I want to make it really easy on me.

00:21:32.600 --> 00:21:34.400
This next one is all about me.

00:21:34.400 --> 00:21:38.640
Well, it's about you too and everybody else in Portland, but mostly about me.

00:21:39.060 --> 00:21:40.200
I thought it'd be cool.

00:21:40.200 --> 00:21:43.080
There's a Python meetup every month downtown Portland.

00:21:43.080 --> 00:21:45.740
And I don't live downtown Portland.

00:21:45.740 --> 00:21:47.100
I don't work in downtown Portland.

00:21:47.100 --> 00:21:48.200
So wah me.

00:21:48.640 --> 00:21:57.080
But I'm going to put my, I guess, effort where my mouth is and start a west side Portland Python meetup.

00:21:57.080 --> 00:21:57.600
Yay.

00:21:57.600 --> 00:21:58.500
That's awesome.

00:21:58.500 --> 00:21:58.980
Yeah.

00:21:58.980 --> 00:22:08.100
Because to get down to the east side of Portland, if you're out somewhere by Intel or Nike or one of these, a lot of the tech companies here in town, it's like an hour.

00:22:08.100 --> 00:22:09.340
Just one way.

00:22:09.340 --> 00:22:11.520
It's a tremendous amount of traffic you've got to go through.

00:22:11.520 --> 00:22:15.080
So this will definitely open up a whole other angle for meetups.

00:22:15.080 --> 00:22:15.440
Yeah.

00:22:15.440 --> 00:22:18.060
And I'm not trying to like, you know, steal their thunder or something.

00:22:18.060 --> 00:22:25.900
I've talked with the Python meetup dude from Portland and working together to make sure we don't overlap it.

00:22:25.900 --> 00:22:32.020
So I think we're shooting for like the second week in the month because they have things on the third and fourth.

00:22:32.020 --> 00:22:33.540
There's nothing there yet.

00:22:33.540 --> 00:22:36.240
But if by the time this comes out, there will be.

00:22:36.240 --> 00:22:38.760
I registered pythonpdx.com.

00:22:38.760 --> 00:22:40.980
That's where we're going to announce stuff.

00:22:40.980 --> 00:22:42.540
Hopefully for October.

00:22:42.540 --> 00:22:46.520
But if not, then we'll get it done for November.

00:22:46.520 --> 00:22:48.120
But I'm really shooting for October.

00:22:48.120 --> 00:22:55.380
This is made possible because Roden Schwartz, the company I work for, has this awesome room that would work great for the meetup.

00:22:55.380 --> 00:22:57.640
And they've agreed to let us use it.

00:22:57.640 --> 00:22:58.460
So that's all.

00:22:58.460 --> 00:22:58.900
That's great.

00:22:58.900 --> 00:22:59.160
Yeah.

00:22:59.160 --> 00:22:59.780
Sounds great.

00:22:59.780 --> 00:23:00.000
Yeah.

00:23:00.000 --> 00:23:00.440
Sounds great.

00:23:00.440 --> 00:23:01.400
That's all I got.

00:23:01.400 --> 00:23:02.900
But I don't have any jokes.

00:23:02.900 --> 00:23:04.000
We don't have any jokes.

00:23:04.000 --> 00:23:04.680
Hold on.

00:23:04.680 --> 00:23:07.060
I mean, we could just stare at each other for a few minutes.

00:23:07.180 --> 00:23:08.700
But it's not fun.

00:23:08.700 --> 00:23:10.200
Ooh, neat.

00:23:10.200 --> 00:23:12.800
Why did the angry function exceed its call stack size?

00:23:12.800 --> 00:23:13.340
I don't know.

00:23:13.340 --> 00:23:13.540
Why?

00:23:13.540 --> 00:23:15.080
It got into an argument with itself.

00:23:15.080 --> 00:23:20.060
What's the object-oriented way of becoming wealthy?

00:23:20.060 --> 00:23:21.840
I'm not sure.

00:23:21.840 --> 00:23:22.500
Inheritance.

00:23:22.500 --> 00:23:22.920
Oh, yeah.

00:23:22.920 --> 00:23:23.340
Definitely.

00:23:23.340 --> 00:23:24.400
Of course.

00:23:24.400 --> 00:23:25.120
All right.

00:23:25.120 --> 00:23:29.520
Well, not terribly funny, but these are some good programming dad jokes.

00:23:29.520 --> 00:23:29.980
Yeah.

00:23:30.240 --> 00:23:30.500
Yeah.

00:23:30.500 --> 00:23:30.900
Yeah.

00:23:30.900 --> 00:23:31.580
So.

00:23:31.580 --> 00:23:32.880
Nice.

00:23:32.880 --> 00:23:34.020
All right.

00:23:34.020 --> 00:23:36.320
Well, thanks for being here as always, Brian.

00:23:36.320 --> 00:23:36.740
All right.

00:23:36.740 --> 00:23:37.160
Thank you.

00:23:37.160 --> 00:23:37.520
Bye.

00:23:37.520 --> 00:23:37.740
Yeah.

00:23:37.740 --> 00:23:38.300
Good to chat with you.

00:23:38.300 --> 00:23:38.440
Bye.

00:23:38.440 --> 00:23:40.540
Thank you for listening to Python Bytes.

00:23:40.540 --> 00:23:43.080
Follow the show on Twitter via at Python Bytes.

00:23:43.080 --> 00:23:45.940
That's Python Bytes as in B-Y-T-E-S.

00:23:45.940 --> 00:23:49.180
And get the full show notes at Pythonbytes.fm.

00:23:49.180 --> 00:23:53.380
If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:23:53.380 --> 00:23:56.100
We're always on the lookout for sharing something cool.

00:23:56.100 --> 00:23:59.180
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:23:59.540 --> 00:24:02.620
Thank you for listening and sharing this podcast with your friends and colleagues.

