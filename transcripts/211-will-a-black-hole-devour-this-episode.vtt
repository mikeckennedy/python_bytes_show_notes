
00:00:00.000 --> 00:00:04.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.880 --> 00:00:09.280
This is episode 211, recorded December 2nd, 2020.


00:00:09.280 --> 00:00:10.400
I'm Michael Kennedy.


00:00:10.400 --> 00:00:11.520
And I'm Brian Okken.


00:00:11.520 --> 00:00:14.240
And we have a special guest, Matthew Feigert. Welcome.


00:00:14.240 --> 00:00:15.920
Yeah, thanks so much for having me on.


00:00:15.920 --> 00:00:20.240
Yeah, it's great to have you here. You've been over on Talk Python before, right?


00:00:20.240 --> 00:00:20.560
Yeah.


00:00:20.560 --> 00:00:25.280
Talking about some cool high-energy physics and all that kind of stuff.


00:00:25.280 --> 00:00:30.480
Yeah, I looked that up last night just to try and remind myself that was Episode 144.


00:00:30.480 --> 00:00:36.000
I was on with my colleagues, Michaela Paganini and Michael Kagan to talk with you about machine


00:00:36.000 --> 00:00:38.000
learning applications at the LHC.


00:00:38.000 --> 00:00:42.320
Yeah, and you do stuff over with CERN at the Large Hadron Collider and things like that?


00:00:42.320 --> 00:00:47.360
Yeah, yeah. So I'm a postdoctoral researcher at the University of Illinois at Urbana-Champaign.


00:00:47.360 --> 00:00:52.960
And so there I split my time between working on the Atlas experiment and working as a software


00:00:52.960 --> 00:00:57.360
researcher at the Institute for Research and Innovation and Software for High Energy Physics,


00:00:57.360 --> 00:01:04.400
Iris Hepp. And so on Atlas, Atlas is this huge five-story tall particle detector that lives


00:01:04.400 --> 00:01:09.760
100 meters underground at CERN's Large Hadron Collider that's just outside beautiful Geneva,


00:01:09.760 --> 00:01:15.120
Switzerland. And so there I work with a few thousand of my closest colleagues and friends


00:01:15.120 --> 00:01:21.280
to try and look for evidence of new physics and make precision measurements of physics we do know


00:01:21.280 --> 00:01:27.280
about. And then my IRISEP work is kind of focused on working in an interdisciplinary and


00:01:27.280 --> 00:01:32.880
inter-experimental team to try and improve the necessary cyber infrastructure and software


00:01:32.880 --> 00:01:38.960
for us to be able to use in upcoming runs of the large Hadron Collider and in what we call


00:01:38.960 --> 00:01:43.360
like a high luminosity run, which is going to be way more collisions than normal. Have you guys ever turned it out to full power?


00:01:43.360 --> 00:01:49.520
Have you turned it to full power yet? No, so yeah, the design luminosity or the design energy of the LHC


00:01:49.520 --> 00:01:55.840
is at something called 14 tera electron volts, 14 TeV. And we've been running intentionally at a


00:01:55.840 --> 00:02:00.720
lower operating energy for the last couple of years, just a little bit below that. But in the


00:02:00.720 --> 00:02:03.600
late 2020s, we're going to- >> So you don't create a black hole and suck the entire earth into it


00:02:03.600 --> 00:02:09.840
and that kind of stuff? >> No experimental evidence of black hole creation yet. But the cool thing is


00:02:09.840 --> 00:02:14.960
that if we even did make a black hole at the LHC due to something called Hawking radiation, it would


00:02:14.960 --> 00:02:19.440
evaporate well before it could actually ever do anything interesting gravitationally. But yeah.


00:02:19.440 --> 00:02:20.880
- Yeah, that's a good deal. - It's a really exciting,


00:02:20.880 --> 00:02:22.280
really exciting time. - No, I'm joking,


00:02:22.280 --> 00:02:25.120
but it's such a cool place, such cool technology.


00:02:25.120 --> 00:02:28.140
I mean, that's right out of the edge of physics these days.


00:02:28.140 --> 00:02:29.960
And the technology side is neat, too.


00:02:29.960 --> 00:02:31.360
- Yeah, no, it's super fun.


00:02:31.360 --> 00:02:34.360
- Cool, well, welcome over to Python Bytes.


00:02:34.360 --> 00:02:35.920
- Yeah, it's great to be here.


00:02:35.920 --> 00:02:37.020
- Yeah, it's great to have you.


00:02:37.020 --> 00:02:37.860
Thanks for coming.


00:02:37.860 --> 00:02:40.720
And Brian, I think, let's start with another one


00:02:40.720 --> 00:02:41.960
of my favorite topics.


00:02:41.960 --> 00:02:43.000
- Farms?


00:02:43.000 --> 00:02:43.960
- I love farming.


00:02:43.960 --> 00:02:46.960
You know, you see the bumper sticker, no farms, no food.


00:02:46.960 --> 00:02:49.860
I like food a lot, so I love farms.


00:02:49.860 --> 00:02:51.940
No, no, but the farm stack.


00:02:51.940 --> 00:02:54.820
We've heard of the lamp stack, other stacks.


00:02:54.820 --> 00:02:57.180
Like lamp is not as useful as farm, right?


00:02:57.180 --> 00:02:58.300
Farm sounds more useful.


00:02:58.300 --> 00:02:59.480
So tell us about farm.


00:02:59.480 --> 00:03:02.740
- So Aaron Bassett, he's, I'm not sure,


00:03:02.740 --> 00:03:06.940
I think he's one of the spokespeople for Mongo


00:03:06.940 --> 00:03:09.180
or something, like advocate or something like that.


00:03:09.180 --> 00:03:14.080
Anyway, he's doing, he wrote this article,


00:03:14.080 --> 00:03:16.580
but they've also done, I think there's been


00:03:16.580 --> 00:03:20.100
some talks given, but this is a nice article.


00:03:20.100 --> 00:03:22.180
It's called Introducing Farmstack,


00:03:22.180 --> 00:03:25.540
which is FastAPI, React, and MongoDB.


00:03:25.540 --> 00:03:30.260
So I really actually appreciated the article


00:03:30.260 --> 00:03:34.660
and the code with it, because there's a GitHub,


00:03:34.660 --> 00:03:38.740
a little GitHub to-do CRUD app that they've put together.


00:03:38.740 --> 00:03:42.700
And the article describes basically all of the pieces


00:03:42.700 --> 00:03:46.820
the application using a little to-do app.


00:03:46.820 --> 00:03:53.060
But with FastAPI, you've got this interactive documentation mode


00:03:53.060 --> 00:03:54.860
where you can interact with


00:03:54.860 --> 00:03:57.300
the application just almost immediately.


00:03:57.300 --> 00:04:00.700
You don't have to really do much to put it all together.


00:04:00.700 --> 00:04:03.140
Then for all your endpoints,


00:04:03.140 --> 00:04:04.540
you can actually interact with them,


00:04:04.540 --> 00:04:06.900
send data, do queries.


00:04:06.900 --> 00:04:10.260
There's a little animated GIF to show how that's done.


00:04:10.260 --> 00:04:17.260
But the article then goes through and says basically how the endpoints and routes get hooked up,


00:04:17.260 --> 00:04:24.500
and then uses uVehicorn to set up an async event loop and get that going,


00:04:24.500 --> 00:04:27.940
shows how easy it is to connect to a database,


00:04:27.940 --> 00:04:32.580
and then defining models and how easy it is to set up a schema.


00:04:32.580 --> 00:04:38.700
It goes through and then talks through the code discussion.


00:04:38.700 --> 00:04:41.140
you do have to write code for the endpoints


00:04:41.140 --> 00:04:45.640
and really how easy those are with all of these pieces.


00:04:45.640 --> 00:04:49.900
The React application is kind of a minimal React application.


00:04:49.900 --> 00:04:52.080
I'm not sure why they kind of included that,


00:04:52.080 --> 00:04:53.940
but it's kind of a neat addition.


00:04:53.940 --> 00:04:56.060
There's a React application that's running


00:04:56.060 --> 00:04:58.700
that just sort of shows some of the interaction


00:04:58.700 --> 00:05:02.340
with the CRUD app, and it gets updated


00:05:02.340 --> 00:05:07.340
while you're changing things through the interactive API.


00:05:07.740 --> 00:05:12.020
And I just, I liked the demonstration of working through,


00:05:12.020 --> 00:05:16.020
working with an API and working through changing things


00:05:16.020 --> 00:05:18.900
and seeing it show up having a,


00:05:18.900 --> 00:05:21.060
like a React app at the other end.


00:05:21.060 --> 00:05:24.420
It's kind of a fun way to kind of experiment with an API.


00:05:24.420 --> 00:05:26.180
- This is a really neat thing.


00:05:26.180 --> 00:05:28.300
And one of the other major stacks that's been used


00:05:28.300 --> 00:05:29.820
around Mongo is the mean stack.


00:05:29.820 --> 00:05:32.260
And the farm stack is way nicer than the mean stack,


00:05:32.260 --> 00:05:34.540
not just because it uses Python and not JavaScript,


00:05:34.540 --> 00:05:36.220
but there's some interesting things here.


00:05:36.220 --> 00:05:40.220
One of the examples is actually kind of blowing my mind


00:05:40.220 --> 00:05:44.560
in that it's an if statement using the walrus operator


00:05:44.560 --> 00:05:48.400
awaiting an asynchronous call in an API method.


00:05:48.400 --> 00:05:52.060
Like the walrus operator, the await keyword,


00:05:52.060 --> 00:05:53.060
I've never seen those together


00:05:53.060 --> 00:05:55.620
and it's kind of like, it's inspiring.


00:05:55.620 --> 00:05:56.860
- It's nice, it's good.


00:05:56.860 --> 00:05:57.700
- Yeah, yeah.


00:05:57.700 --> 00:05:59.860
- It's such succinct code as well.


00:05:59.860 --> 00:06:00.700
- It's super nice.


00:06:00.700 --> 00:06:02.920
I mean, it uses fast API, which is fantastic.


00:06:02.920 --> 00:06:07.340
It's using Motor, which is MongoDB's officially supported


00:06:07.340 --> 00:06:10.940
Python async library, 'cause you need an async-capable


00:06:10.940 --> 00:06:14.620
library in order to do things against MongoDB.


00:06:14.620 --> 00:06:16.820
You know, this actually comes from the developer blog


00:06:16.820 --> 00:06:18.060
at MongoDB.


00:06:18.060 --> 00:06:21.620
There also are some ORM-like things, some ODMs,


00:06:21.620 --> 00:06:24.660
object document mapper stuff, that also supports


00:06:24.660 --> 00:06:26.540
async and await from MongoDB, so if you're more


00:06:26.540 --> 00:06:28.540
in the ORM style, you might check that out.


00:06:28.540 --> 00:06:30.820
But other than that, this looks pretty neat to me, yeah.


00:06:30.820 --> 00:06:33.580
- Yeah, and I do know that a lot of people use the ORMs,


00:06:33.580 --> 00:06:38.460
but I appreciated the example without an ORM for people,


00:06:38.460 --> 00:06:40.820
because you throw an ORM example in there


00:06:40.820 --> 00:06:43.100
and then people that don't use that particular one


00:06:43.100 --> 00:06:44.460
get lost, so.


00:06:44.460 --> 00:06:47.140
- Yeah, Matthew, do you guys do anything with MongoDB?


00:06:47.140 --> 00:06:49.140
Any of these kind of things, FastAPI?


00:06:49.140 --> 00:06:50.500
- Yeah, I have some friends that do.


00:06:50.500 --> 00:06:54.420
I personally myself am not too versed in Mongo,


00:06:54.420 --> 00:06:58.500
but I've heard it on the show and many times elsewhere.


00:06:58.500 --> 00:07:01.700
So this is, I think also just kind of paging through


00:07:01.700 --> 00:07:03.740
the article as Ryan was talking about,


00:07:03.740 --> 00:07:05.180
it is pretty impressive.


00:07:05.180 --> 00:07:06.020
So.


00:07:06.020 --> 00:07:06.860
- It's really concise.


00:07:06.860 --> 00:07:07.980
It's like, here's your four lines


00:07:07.980 --> 00:07:10.340
to completely implement the API.


00:07:10.340 --> 00:07:11.180
- Yeah.


00:07:11.180 --> 00:07:12.000
- Type of things, right?


00:07:12.000 --> 00:07:13.780
Asynchronous, fast, like all the cool stuff.


00:07:13.780 --> 00:07:14.660
Yeah.


00:07:14.660 --> 00:07:18.900
Yeah, there was an example, a case study of MongoDB


00:07:18.900 --> 00:07:20.460
being used at the large Hadron Collider,


00:07:20.460 --> 00:07:21.740
but that was many years ago


00:07:21.740 --> 00:07:22.780
and I don't know if it still is.


00:07:22.780 --> 00:07:25.180
So it's, I've completely forgotten where that is.


00:07:25.180 --> 00:07:26.020
- Yeah.


00:07:26.020 --> 00:07:27.380
- But yeah, yeah.


00:07:27.380 --> 00:07:28.220
Cool, cool.


00:07:28.220 --> 00:07:31.860
So next thing I want to talk about another programming language.


00:07:31.860 --> 00:07:35.460
Last time, Brian, I went on and on, maybe the time before, two times ago,


00:07:35.460 --> 00:07:40.780
about .NET and C# because Anthony Shaw had done that work on Pigeon to get


00:07:40.780 --> 00:07:44.900
Python to run on .NET and we're like, well, why are we talking about C# on


00:07:44.900 --> 00:07:45.900
this project, right?


00:07:45.900 --> 00:07:46.860
On this podcast?


00:07:46.860 --> 00:07:49.780
Well, I want to talk about something even more advanced, AppleScript.


00:07:49.780 --> 00:07:52.100
Wow.


00:07:52.100 --> 00:07:52.740
Cutting edge.


00:07:52.740 --> 00:07:53.300
Yes.


00:07:53.300 --> 00:07:57.420
It's like the CMD, shell script of Apple.


00:07:57.620 --> 00:07:59.640
It's, I don't, have you ever programmed an Apple script?


00:07:59.640 --> 00:08:00.340
It's painful.


00:08:00.340 --> 00:08:01.300
No, I've not.


00:08:01.300 --> 00:08:06.560
It's like, you say like, tell this application that to like make a command.


00:08:06.560 --> 00:08:08.240
Oh, it's, it's bad news bears.


00:08:08.240 --> 00:08:08.680
Let me tell you.


00:08:08.680 --> 00:08:16.000
So, so what I've come across is this thing called pie Apple script.


00:08:16.000 --> 00:08:18.880
Now this is not brand new, but it's brand new to me.


00:08:18.880 --> 00:08:23.120
And there's a lot of talk about max and people, people may be getting new max.


00:08:23.120 --> 00:08:26.960
So I thought I would say, Hey, look, here's a cool way to automate your Mac


00:08:27.080 --> 00:08:29.840
or Macs within your company or whatever,


00:08:29.840 --> 00:08:33.240
with Python instead of this dreaded NS AppleScript.


00:08:33.240 --> 00:08:34.080
- Okay.


00:08:34.080 --> 00:08:37.080
- So basically it's a Python wrapper around NS AppleScript,


00:08:37.080 --> 00:08:39.840
allowing Python scripts or applications


00:08:39.840 --> 00:08:41.920
to communicate with AppleScript


00:08:41.920 --> 00:08:45.120
and Apple scriptable applications.


00:08:45.120 --> 00:08:48.320
So apps for which they basically implement AppleScript


00:08:48.320 --> 00:08:49.160
and let you do that.


00:08:49.160 --> 00:08:51.540
So scripts get compiled either from source


00:08:51.540 --> 00:08:53.720
or they can be loaded from disk.


00:08:53.720 --> 00:08:56.120
They have these, some of these ideas are from AppleScript.


00:08:56.120 --> 00:08:58.880
the standard run handler and user defined handlers


00:08:58.880 --> 00:09:01.200
can be invoked with or without arguments.


00:09:01.200 --> 00:09:02.760
They're automatically converted.


00:09:02.760 --> 00:09:04.720
The responses to and from AppleScript


00:09:04.720 --> 00:09:06.160
are automatically converted


00:09:06.160 --> 00:09:08.600
either from AppleScript to Python types


00:09:08.600 --> 00:09:11.640
like Python string versus AppleScript one


00:09:11.640 --> 00:09:12.720
or vice versa, right?


00:09:12.720 --> 00:09:15.240
So you don't have to do the type coercion, which is cool.


00:09:15.240 --> 00:09:16.480
And they're persistent.


00:09:16.480 --> 00:09:19.160
So you can call your handle multiple times


00:09:19.160 --> 00:09:21.040
and it retains its state like AppleScript would.


00:09:21.040 --> 00:09:23.560
And it also has no dependency


00:09:23.560 --> 00:09:26.000
on the legacy AppleScript library


00:09:26.000 --> 00:09:30.000
or the so-called flawed scripting bridge framework,


00:09:30.000 --> 00:09:33.000
which is limited to OSA script executables.


00:09:33.000 --> 00:09:33.980
So that's pretty cool.


00:09:33.980 --> 00:09:37.440
If you wanna automate things on your Mac,


00:09:37.440 --> 00:09:39.160
you obviously could use Bash,


00:09:39.160 --> 00:09:42.200
but if you're talking to some kind of application


00:09:42.200 --> 00:09:43.440
that implements one of these scripts,


00:09:43.440 --> 00:09:46.840
like for example, you wanna tell this other application


00:09:46.840 --> 00:09:48.520
to grab something out of the clipboard


00:09:48.520 --> 00:09:50.840
and then tell it to do something or something like that,


00:09:50.840 --> 00:09:53.040
right, like you couldn't reasonably do that with Bash,


00:09:53.040 --> 00:09:54.260
right, once it starts up,


00:09:54.260 --> 00:09:56.580
you kind of want to go back and forth with it.


00:09:56.580 --> 00:09:58.980
So it sounds like AppleScript might be the thing to do.


00:09:58.980 --> 00:09:59.820
Pretty cool, huh?


00:09:59.820 --> 00:10:00.820
- Yeah.


00:10:00.820 --> 00:10:02.420
- Yeah, I mean, not a whole lot to it.


00:10:02.420 --> 00:10:03.820
Like if you've got a script,


00:10:03.820 --> 00:10:08.180
your Apple Mac OS stuff, do it with Python.


00:10:08.180 --> 00:10:10.500
You don't have to do it with that AppleScript stuff.


00:10:10.500 --> 00:10:11.740
- No, it's neat.


00:10:11.740 --> 00:10:14.180
- Yeah, so Matthew, you probably brought some,


00:10:14.180 --> 00:10:16.620
something to do with physics, data science, I'm guessing.


00:10:16.620 --> 00:10:17.620
What's your question here?


00:10:17.620 --> 00:10:18.460
- Yeah, a bit.


00:10:18.460 --> 00:10:21.180
So we currently live in this like really nice age


00:10:21.180 --> 00:10:23.940
of having awesome CI services


00:10:23.940 --> 00:10:25.700
and all these really nice metrics


00:10:25.700 --> 00:10:27.420
for all your GitHub projects and everything.


00:10:27.420 --> 00:10:31.020
So, you know, if you're, I'm thinking of like coverage.


00:10:31.020 --> 00:10:34.420
So if you're, you know, using PyTest and, you know


00:10:34.420 --> 00:10:36.060
making sure that you're reporting your coverage


00:10:36.060 --> 00:10:37.940
you have all these really great services


00:10:37.940 --> 00:10:39.340
to also track your coverage


00:10:39.340 --> 00:10:41.320
and report that in iShiny badge.


00:10:41.320 --> 00:10:44.180
But let's say you're developing some tool or some library


00:10:44.180 --> 00:10:47.620
and you have some sort of performance metric


00:10:47.620 --> 00:10:48.460
that you care about.


00:10:48.460 --> 00:10:52.180
Let's say like how fast some, the speed of evaluation


00:10:52.180 --> 00:10:54.020
for certain expensive functions.


00:10:54.020 --> 00:10:55.540
And you actually want to try and track that


00:10:55.540 --> 00:10:57.380
through the entire history of your code base.


00:10:57.380 --> 00:10:59.380
And that's not something that's traditionally


00:10:59.380 --> 00:11:01.220
very super easy to do.


00:11:01.220 --> 00:11:03.140
So recently I was really happy to find something called--


00:11:03.140 --> 00:11:04.900
- So if you're making changes,


00:11:04.900 --> 00:11:07.860
so if you're going to be adding some feature or whatever,


00:11:07.860 --> 00:11:10.180
you are refactoring it so it's easier to write,


00:11:10.180 --> 00:11:12.340
but you're not sure if that makes it faster or slower,


00:11:12.340 --> 00:11:14.300
this would sort of give you that information


00:11:14.300 --> 00:11:16.260
from week to week or something like that?


00:11:16.260 --> 00:11:17.100
- Exactly, yeah.


00:11:17.100 --> 00:11:19.820
So you might go ahead and say,


00:11:19.820 --> 00:11:28.620
"Okay, well, I have some tests that make sure that this function evaluates in under some period of time if it's an expensive function for your test."


00:11:28.620 --> 00:11:39.940
But let's say you actually wanted to track across different parameterizations how that function actually is being performing and evaluating it in your whole code base.


00:11:39.940 --> 00:11:46.100
So I've recently found this super cool tool written in Python called AirSpeed Velocity.


00:11:46.100 --> 00:11:54.100
And so from the docs, ASV, Air Speed Velocity, is a tool for benchmarking Python packages over their lifetime.


00:11:54.100 --> 00:11:59.300
So it deals with runtime, memory consumption, and even custom compute values.


00:11:59.300 --> 00:12:07.860
And the results are then displayed in a super nice web frontend that's interactive and basically just requires like static web page hosting.


00:12:07.860 --> 00:12:15.220
So it's pretty impressive. And just if you click on the docs, you can see that's developed by a community of people.


00:12:15.220 --> 00:12:19.000
but led by Michael Doritboom.


00:12:19.000 --> 00:12:21.800
I'm probably getting your name wrong, very sorry.


00:12:21.800 --> 00:12:24.760
And Polly Burrton.


00:12:24.760 --> 00:12:25.760
But if you look at some--


00:12:25.760 --> 00:12:29.720
- He's the guy who was behind PyOxidizer at Mozilla.


00:12:29.720 --> 00:12:30.560
- Oh, really?


00:12:30.560 --> 00:12:31.380
Oh, okay.


00:12:31.380 --> 00:12:32.220
- Yeah, I think so.


00:12:32.220 --> 00:12:33.480
- That's a super cool project.


00:12:33.480 --> 00:12:34.320
- Yeah, for sure.


00:12:34.320 --> 00:12:37.400
- Yeah, and so I mean, if you look at the other people


00:12:37.400 --> 00:12:39.000
that are on the contributor list,


00:12:39.000 --> 00:12:42.800
you can spot a lot of names that are common


00:12:42.800 --> 00:12:44.680
in the SciPy and Jupyter ecosystem.


00:12:44.680 --> 00:12:49.120
So you already know that this is a nice community built tool.


00:12:49.120 --> 00:12:52.200
And then also, as some example cases,


00:12:52.200 --> 00:12:54.860
they give current projects that are using it,


00:12:54.860 --> 00:12:56.920
like NumPy and SciPy and Astropy.


00:12:56.920 --> 00:12:59.580
So pretty well established projects.


00:12:59.580 --> 00:13:03.640
And just as an example, if you click on the SciPy project


00:13:03.640 --> 00:13:05.720
and go to the interpolate function there,


00:13:05.720 --> 00:13:09.360
you can just look at a very nice visualization


00:13:09.360 --> 00:13:13.700
of the actual evaluation in time on the vertical axis


00:13:13.700 --> 00:13:15.740
across a whole bunch of parameterizations,


00:13:15.740 --> 00:13:20.100
such as CPython version and number of samples that are being run.


00:13:20.100 --> 00:13:22.900
You can see this for the entire lifetime of the code base,


00:13:22.900 --> 00:13:26.020
and you can zoom in on any section just with the mouse.


00:13:26.020 --> 00:13:29.340
Something I think that is super cool is if you're looking at


00:13:29.340 --> 00:13:31.780
the visualization of the plot and you see that,


00:13:31.780 --> 00:13:34.420
there's one commit where all of a sudden things go


00:13:34.420 --> 00:13:36.860
funky and the evaluation time just jumps up,


00:13:36.860 --> 00:13:38.780
you can just click on that node and it


00:13:38.780 --> 00:13:41.580
immediately opens up to that commit in GitHub,


00:13:41.580 --> 00:13:44.580
which is I think super awesome that you don't have to go and


00:13:44.580 --> 00:13:48.300
search through your commit history to figure out where that corresponds to.


00:13:48.300 --> 00:13:49.420
It's just boom right there.


00:13:49.420 --> 00:13:52.380
>> I'm looking, it shows the SHA from GitHub.


00:13:52.380 --> 00:13:53.020
>> Yeah.


00:13:53.020 --> 00:13:56.420
>> The unique identifier of the commit.


00:13:56.420 --> 00:13:57.660
That's crazy.


00:13:57.660 --> 00:13:58.140
>> Yeah.


00:13:58.140 --> 00:13:59.060
>> Wow.


00:13:59.060 --> 00:14:02.460
>> Yeah. A project that I'm working on,


00:14:02.460 --> 00:14:04.060
we've been interested in trying to have


00:14:04.060 --> 00:14:07.300
the metric tracking for some of our work.


00:14:07.300 --> 00:14:09.660
This is something that I'm actively


00:14:09.660 --> 00:14:14.460
looking at how we might be able to deploy this for one of my projects with my co-authors.


00:14:14.460 --> 00:14:20.540
But it's openly developed on GitHub. It's up on PyPI as well, so just pip install asv.


00:14:20.540 --> 00:14:25.260
And then I think something that's kind of very cute and very kind of Pythonic is that


00:14:25.260 --> 00:14:29.580
when you go to the reporting dashboard for the different libraries that you're actually


00:14:29.580 --> 00:14:36.700
benchmarking, it will up at the top say the airspeed velocity of an unladen x. So the airspeed


00:14:36.700 --> 00:14:42.860
velocity of an unladen NumPy or an unladen SciPy. So, you know, keeping very true to the,


00:14:42.860 --> 00:14:48.220
you know, Python's roots there. >> There's some Monty Python, the show


00:14:48.220 --> 00:14:50.940
Zen in there for sure. >> Exactly, yeah.


00:14:50.940 --> 00:14:54.860
>> This is impressive. I mean, Brian, how do you see this fitting into like testing and stuff?


00:14:54.860 --> 00:15:00.780
>> I actually love this. I could use this right away. There's lots of, well, a lot of times it's


00:15:00.780 --> 00:15:04.700
It's not, yeah, performance is always something


00:15:04.700 --> 00:15:09.480
we care about and benchmarking systems and testing.


00:15:09.480 --> 00:15:12.820
It's something you forget about sometimes,


00:15:12.820 --> 00:15:16.620
like running stuff and it still works,


00:15:16.620 --> 00:15:19.040
but like over time things slow down


00:15:19.040 --> 00:15:21.300
and it's good to know that.


00:15:21.300 --> 00:15:23.980
- Yeah, and if this could just be automatic


00:15:23.980 --> 00:15:25.620
and just part of your CI, you just go back


00:15:25.620 --> 00:15:27.980
and see the updates, that'd be very cool.


00:15:27.980 --> 00:15:28.800
- Definitely.


00:15:28.800 --> 00:15:31.240
>> I don't think that this is something that at


00:15:31.240 --> 00:15:33.640
the moment and I'm happy to be corrected about this.


00:15:33.640 --> 00:15:36.080
I don't think at the moment there is some way that this is


00:15:36.080 --> 00:15:39.440
currently being given as a CI service,


00:15:39.440 --> 00:15:41.200
but I think that this is something that you could


00:15:41.200 --> 00:15:43.440
set up and run for yourself pretty easily.


00:15:43.440 --> 00:15:45.400
>> Yeah, you could probably plug it in.


00:15:45.400 --> 00:15:45.760
>> Yeah.


00:15:45.760 --> 00:15:48.080
>> Yeah, exactly. But you could probably do


00:15:48.080 --> 00:15:52.460
some web hook when there's a check-in,


00:15:52.460 --> 00:15:54.760
automatically kick it off and then save a result.


00:15:54.760 --> 00:15:56.000
You could just hook into


00:15:56.000 --> 00:15:58.640
the GitHub actions and then have it just call you back.


00:15:58.640 --> 00:16:02.760
and start your-- let's take a record of this or whatever.


00:16:02.760 --> 00:16:03.920
Yeah, very cool.


00:16:03.920 --> 00:16:04.960
This is a great idea.


00:16:04.960 --> 00:16:07.960
Yeah, something else that I haven't really investigated yet


00:16:07.960 --> 00:16:10.200
but that I'm looking into is if this can also be


00:16:10.200 --> 00:16:12.440
used to do GPU benchmarking.


00:16:12.440 --> 00:16:16.760
So let's say you have a library that also is going to be--


00:16:16.760 --> 00:16:20.360
you can transparently use the APIs to transparently move


00:16:20.360 --> 00:16:21.640
from CPU to GPU.


00:16:21.640 --> 00:16:24.720
Like you have something like Jax or TensorFlow or PyTorch,


00:16:24.720 --> 00:16:28.320
then this might be a nice way if it's


00:16:28.320 --> 00:16:30.220
based on those to be able to like benchmark


00:16:30.220 --> 00:16:31.960
your GPU performance as well.


00:16:31.960 --> 00:16:33.460
- Yeah, well, and that's one of the things


00:16:33.460 --> 00:16:34.520
you might not test, right?


00:16:34.520 --> 00:16:36.020
If it could run either way,


00:16:36.020 --> 00:16:37.700
you might just run it on your machine,


00:16:37.700 --> 00:16:39.060
whichever one of those it is


00:16:39.060 --> 00:16:41.080
and forget to try the other style, right?


00:16:41.080 --> 00:16:42.340
- Exactly, yeah.


00:16:42.340 --> 00:16:44.260
And I don't think there's too many CI services


00:16:44.260 --> 00:16:46.600
that are gonna generously give you some like


00:16:46.600 --> 00:16:49.460
really nice GPUs to be doing benchmarking on.


00:16:49.460 --> 00:16:51.220
- Yeah, that's for sure, for sure.


00:16:51.220 --> 00:16:53.780
All right, now for the next item,


00:16:53.780 --> 00:16:54.980
let me tell you about our sponsor.


00:16:54.980 --> 00:16:57.980
This episode is brought to you by TechMeme,


00:16:57.980 --> 00:17:00.140
the Tech Meme Ride Home podcast.


00:17:00.140 --> 00:17:04.360
They've been for two years recording episodes


00:17:04.360 --> 00:17:05.660
every single day.


00:17:05.660 --> 00:17:09.600
So they're Silicon Valley's favorite tech news podcast


00:17:09.600 --> 00:17:12.320
and you can get them daily, 15 to 20 minutes,


00:17:12.320 --> 00:17:15.880
exactly by 5 p.m. Eastern, all the tech news you want.


00:17:15.880 --> 00:17:18.000
But it's not just headlines, much like By The Mbites,


00:17:18.000 --> 00:17:19.140
actually, it's a very similar show,


00:17:19.140 --> 00:17:20.640
but for the broader tech industry.


00:17:20.640 --> 00:17:22.520
You could have a robot read the headlines


00:17:22.520 --> 00:17:23.720
or just flip through them,


00:17:23.720 --> 00:17:26.560
but it has the context and the analysis all around it.


00:17:26.560 --> 00:17:29.600
So it's like tech news as a service, if you will.


00:17:29.600 --> 00:17:31.240
So the folks over at TechMeme,


00:17:31.240 --> 00:17:34.040
they're online all day reading to catch you up


00:17:34.040 --> 00:17:37.400
and just search your podcast app for the ride home


00:17:37.400 --> 00:17:40.380
and ride home and subscribe to the TechMeme


00:17:40.380 --> 00:17:42.280
ride home podcast, or just visit


00:17:42.280 --> 00:17:45.520
pythonbytes.fm/ride to subscribe.


00:17:45.520 --> 00:17:48.240
I have a theory, a hypothesis about this.


00:17:48.240 --> 00:17:50.580
I think that probably actually be a ton of work


00:17:50.580 --> 00:17:54.040
to put together a show daily on a time like that,


00:17:54.040 --> 00:17:55.360
but it's great that they're doing it.


00:17:55.360 --> 00:17:57.360
Do you have any other hypotheses, Brian?


00:17:57.360 --> 00:18:00.360
Yes. My hypothesis is that


00:18:00.360 --> 00:18:03.360
there's not enough examples out in the world of how


00:18:03.360 --> 00:18:05.360
people are using hypothesis in the field


00:18:05.360 --> 00:18:07.360
in real world applications.


00:18:07.360 --> 00:18:09.360
So,


00:18:09.360 --> 00:18:11.360
I'm excited that


00:18:11.360 --> 00:18:13.360
Parsec put it together. So, Parsec...


00:18:13.360 --> 00:18:15.360
Let's take a real quick step back just for people who don't know.


00:18:15.360 --> 00:18:17.360
What is hypothesis?


00:18:17.360 --> 00:18:19.360
Oh, okay, right. Hypothesis is


00:18:19.360 --> 00:18:21.360
a testing framework. Well, it's not really...


00:18:21.360 --> 00:18:23.360
It attaches to other testing frameworks.


00:18:23.360 --> 00:18:26.280
you can use it with unit test or pytest.


00:18:26.280 --> 00:18:28.240
You probably should use it with pytest.


00:18:28.240 --> 00:18:32.800
But it's a way instead of writing a declarative single test


00:18:32.800 --> 00:18:37.440
or test case, you can, it's a property-based testing.


00:18:37.440 --> 00:18:41.440
So you describe kind of, it's not like,


00:18:41.440 --> 00:18:43.720
I expect one plus two equals three.


00:18:43.720 --> 00:18:47.220
I expect if I add two integers,


00:18:47.220 --> 00:18:49.720
and they're both positive,


00:18:49.720 --> 00:18:52.360
that the result is going to be greater than both of them.


00:18:52.360 --> 00:18:56.760
You know, you have like these properties that you describe what the answer is.


00:18:56.760 --> 00:19:05.460
And there's a, there's a, the examples that Hypothesis and other, you know, tutorials on how to use Hypothesis have given


00:19:05.460 --> 00:19:09.460
are more of these like A plus B sort of things. They're simplistic things.


00:19:09.460 --> 00:19:14.760
And I, and I do see a lot of value in Hypothesis and I know a lot of people are using it,


00:19:14.760 --> 00:19:19.860
but there haven't been a lot of good descriptions for really how it's being used.


00:19:19.860 --> 00:19:26.340
like a real world example of how it's being used because I'm probably not going to,


00:19:26.340 --> 00:19:30.340
I don't have those little tiny algorithm things, I've got big chunks of stuff.


00:19:30.340 --> 00:19:34.340
And Hypothesis does have to run the test many times.


00:19:34.340 --> 00:19:37.340
So how do you do this effectively on a large project?


00:19:37.340 --> 00:19:39.340
So I love seeing this article.


00:19:39.340 --> 00:19:45.340
So Parsec is a client-side encrypted file sharing service.


00:19:45.340 --> 00:19:49.340
I'd never heard of them before this blog, but it sounds cool.


00:19:49.340 --> 00:19:51.980
- Cool, they described themselves as the zero trust


00:19:51.980 --> 00:19:53.640
file sharing service like Dropbox,


00:19:53.640 --> 00:19:56.840
where it's end to end encryption for Dropbox.


00:19:56.840 --> 00:19:57.680
- Yeah.


00:19:57.680 --> 00:19:58.500
- You could share the files,


00:19:58.500 --> 00:20:00.320
but it only matters if you actually have the key, right?


00:20:00.320 --> 00:20:01.340
- Right.


00:20:01.340 --> 00:20:02.440
Actually, I have no idea.


00:20:02.440 --> 00:20:03.680
(laughing)


00:20:03.680 --> 00:20:04.520
Sure.


00:20:04.520 --> 00:20:05.640
- I suspect so, yeah.


00:20:05.640 --> 00:20:07.480
It sounds like a cool service, actually.


00:20:07.480 --> 00:20:08.440
- It sounds pretty neat.


00:20:08.440 --> 00:20:10.360
But they, so they describe what,


00:20:10.360 --> 00:20:11.680
kind of what they're doing there,


00:20:11.680 --> 00:20:13.560
this and some of the problems.


00:20:13.560 --> 00:20:18.120
It's a large four year old asynchronous Python project.


00:20:18.120 --> 00:20:23.120
And then they describe this raid redundancy algorithm


00:20:23.120 --> 00:20:26.600
that they need, it's fairly complex


00:20:26.600 --> 00:20:28.960
with a bunch of servers and stuff,


00:20:28.960 --> 00:20:31.960
a bunch of data stores going on.


00:20:31.960 --> 00:20:34.360
And what they need to test is they need to check things


00:20:34.360 --> 00:20:37.340
like if the blocks can be split into chunks


00:20:37.340 --> 00:20:39.760
and if the blocks can be rebuilt from the chunks


00:20:39.760 --> 00:20:41.340
that were split up before.


00:20:41.340 --> 00:20:43.040
And then if you can rebuild them


00:20:43.040 --> 00:20:44.880
if you've got missing chunks.


00:20:44.880 --> 00:20:48.400
And so this all sounds fairly,


00:20:48.400 --> 00:20:49.640
you know, yeah, I can understand


00:20:49.640 --> 00:20:50.820
how you could try to test that,


00:20:50.820 --> 00:20:52.640
but there's a lot of variables in there.


00:20:52.640 --> 00:20:54.200
How big is the chunk size?


00:20:54.200 --> 00:20:55.360
How many chunks?


00:20:55.360 --> 00:20:57.480
How much stuff should be missing?


00:20:57.480 --> 00:20:58.580
And all that sort of stuff.


00:20:58.580 --> 00:21:02.360
And that, then they're thinking,


00:21:02.360 --> 00:21:05.000
yeah, hypothesis would be good for that.


00:21:05.000 --> 00:21:07.800
They do, the normal tutorials talk about


00:21:07.800 --> 00:21:12.600
a stateless way to test with hypothesis,


00:21:12.600 --> 00:21:14.920
but they're saying that for them,


00:21:14.920 --> 00:21:19.920
the stateful method that is supported is very useful


00:21:19.920 --> 00:21:21.840
because they're asynchronous system


00:21:21.840 --> 00:21:23.400
and they describe how to do that.


00:21:23.400 --> 00:21:26.020
It's actually a fairly complex description


00:21:26.020 --> 00:21:28.920
and it's kind of a lot to get through,


00:21:28.920 --> 00:21:30.960
but it's neat that the power's there.


00:21:30.960 --> 00:21:35.440
So it does, you know, walks through how they,


00:21:35.440 --> 00:21:37.960
exactly how they set up a test like this.


00:21:37.960 --> 00:21:41.440
And this is something I think the testing community


00:21:41.440 --> 00:21:43.880
of considering hypothesis has been missing.


00:21:43.880 --> 00:21:45.560
So this is great.


00:21:45.560 --> 00:21:51.700
They end with some recommendations, which it's great.


00:21:51.700 --> 00:21:54.880
So the recommendation is for parts of your system,


00:21:54.880 --> 00:21:57.980
which parts should you throw hypothesis at?


00:21:57.980 --> 00:21:59.360
>> That's a really good question because


00:21:59.360 --> 00:22:00.720
you don't want to throw it at everything.


00:22:00.720 --> 00:22:02.720
>> Right. Because there is some expense


00:22:02.720 --> 00:22:04.660
to set it up and also to run everything.


00:22:04.660 --> 00:22:06.920
So they describe it as if


00:22:06.920 --> 00:22:11.280
the piece you're testing is an encoder-decoder thing,


00:22:11.280 --> 00:22:15.820
like there's is you're splitting things into chunks and then rebuilding things.


00:22:15.820 --> 00:22:26.520
It's a hypothesis is a no brainer for that because you can compare is my input the same as the encoded then decoded output.


00:22:26.520 --> 00:22:30.240
The other cases if you have a simple oracle,


00:22:30.240 --> 00:22:35.440
simple oracle like it's simple to test the answer but it's complex to come up with the answer.


00:22:35.440 --> 00:22:39.440
I'm not sure what that is, but in the case,


00:22:39.440 --> 00:22:41.440
some of the cases are,


00:22:41.440 --> 00:22:43.440
I've got a complex system and


00:22:43.440 --> 00:22:47.440
there's properties about the output that are easy to describe.


00:22:47.440 --> 00:22:50.940
The other one is, I guess similar, is


00:22:50.940 --> 00:22:53.440
if it's hard to compute but easy to check.


00:22:53.440 --> 00:22:56.440
- Well, one example that just jumps out at me right away is


00:22:56.440 --> 00:22:58.440
anytime you have a file format,


00:22:58.440 --> 00:23:01.440
I'm going to save this thing, be able to save and load these files.


00:23:01.440 --> 00:23:04.440
Because all you've got to do is load up a whole bunch of random data,


00:23:04.440 --> 00:23:07.160
of data say save load, is it the same?


00:23:07.160 --> 00:23:09.240
If it's not, that's a problem.


00:23:09.240 --> 00:23:10.400
- Yeah. - Yeah.


00:23:10.400 --> 00:23:12.600
Yeah, and actually I have talked with some people


00:23:12.600 --> 00:23:17.600
that have thrown this at some of the standard library


00:23:17.600 --> 00:23:22.520
modules just on the side to test


00:23:22.520 --> 00:23:24.440
because there's a lot of standard library stuff


00:23:24.440 --> 00:23:27.840
that's like kind of encoding, decoding sort of thing


00:23:27.840 --> 00:23:29.880
or two-way conversions.


00:23:29.880 --> 00:23:30.960
- Yeah, cool. - Yeah.


00:23:30.960 --> 00:23:32.160
This is super nice.


00:23:32.160 --> 00:23:33.920
I'm gonna have to really dig into this article


00:23:33.920 --> 00:23:39.200
in more detail. I remember the first time I learned about Hypothesis was when one of


00:23:39.200 --> 00:23:45.960
the core devs gave a talk at SciPy 2019, and it just blew my mind then. And so this is


00:23:45.960 --> 00:23:49.600
so cool to see this very, very interesting application here.


00:23:49.600 --> 00:23:53.600
Yeah. Yeah. It seems like there's a lot of uses in data science. Data science seems tough


00:23:53.600 --> 00:23:58.760
to test, like that scientific computation side, because slight variations, you might


00:23:58.760 --> 00:24:00.600
not get perfect equality.


00:24:00.600 --> 00:24:01.360
>> Exactly.


00:24:01.360 --> 00:24:03.720
>> Close enough. It's like, well, it's off,


00:24:03.720 --> 00:24:08.360
but it's like 10 to the negative 10th or something off.


00:24:08.360 --> 00:24:10.920
That doesn't actually matter, but the equality fails.


00:24:10.920 --> 00:24:17.240
>> Yeah. You end up using NumPy's approximation


00:24:17.240 --> 00:24:20.800
comparison schemes quite a bit in your PyTest.


00:24:20.800 --> 00:24:24.000
>> I can imagine. Very cool.


00:24:24.000 --> 00:24:25.720
Next one, Brian,


00:24:25.720 --> 00:24:29.480
I told you about last time I talked about,


00:24:29.480 --> 00:24:31.600
I'm still waiting on my Mac mini, right?


00:24:31.600 --> 00:24:36.040
I ordered the Apple, the M1 Mac mini maxed out,


00:24:36.040 --> 00:24:37.400
and I'm a little bit jealous.


00:24:37.400 --> 00:24:40.040
My daughter is getting a new Mac mini,


00:24:40.040 --> 00:24:43.800
she doesn't, or Mac Air, she doesn't know about,


00:24:43.800 --> 00:24:45.000
but it's supposed to show up tomorrow,


00:24:45.000 --> 00:24:45.920
and mine's still weeks away,


00:24:45.920 --> 00:24:47.600
and I don't think that that's very fair.


00:24:47.600 --> 00:24:50.500
But if you are an organization


00:24:50.500 --> 00:24:52.400
that depends on cloud computing,


00:24:52.400 --> 00:24:55.120
and you know what organizations don't these days, right?


00:24:55.120 --> 00:24:56.440
that they almost all do.


00:24:56.440 --> 00:24:59.240
It was just announced at reInvent that AWS


00:24:59.240 --> 00:25:03.200
is gonna be offering Mac instances as a type of VM.


00:25:03.200 --> 00:25:06.640
So until now, you've been able to get Windows, Linux.


00:25:06.640 --> 00:25:07.480
That's it.


00:25:07.480 --> 00:25:08.620
So for all those people out there


00:25:08.620 --> 00:25:11.120
who are offering some kind of iOS app,


00:25:11.120 --> 00:25:12.720
even if they're not like a Mac shop,


00:25:12.720 --> 00:25:13.880
they still have to have Macs around


00:25:13.880 --> 00:25:16.640
'cause you can't compile and sign your IPA,


00:25:16.640 --> 00:25:20.000
your Mac, whatever iPhone app format is.


00:25:20.000 --> 00:25:21.960
You can't create those without a Mac.


00:25:21.960 --> 00:25:23.440
So there's all these Macs that are around


00:25:23.440 --> 00:25:27.840
like continuous CI/CD or checking those things and whatnot.


00:25:27.840 --> 00:25:30.760
So now you can go to AWS and say,


00:25:30.760 --> 00:25:32.260
I'll take a Mac Mini, please.


00:25:32.260 --> 00:25:33.640
>> That's pretty cool. That's cool.


00:25:33.640 --> 00:25:36.600
>> Yeah. You can do your test up there and they don't have M1 yet.


00:25:36.600 --> 00:25:37.680
Those are the Intel ones,


00:25:37.680 --> 00:25:40.020
but the M1 chips are coming later.


00:25:40.020 --> 00:25:41.140
So you'll be able to do it.


00:25:41.140 --> 00:25:43.560
What's interesting about this offering from


00:25:43.560 --> 00:25:46.080
AWS is basically any Cloud service,


00:25:46.080 --> 00:25:47.820
you would imagine it's a VM, right?


00:25:47.820 --> 00:25:50.160
But when you say I want one of these,


00:25:50.160 --> 00:25:52.680
you actually get a dedicated Mac Mini.


00:25:52.680 --> 00:25:54.520
you get pure hardware.


00:25:54.520 --> 00:25:56.280
- Well, that's why you can't get yours,


00:25:56.280 --> 00:25:58.000
'cause Amazon bought them all.


00:25:58.000 --> 00:25:59.040
- They did.


00:25:59.040 --> 00:26:00.600
They had a huge truck full of them.


00:26:00.600 --> 00:26:01.840
Well, they bought the Intel ones,


00:26:01.840 --> 00:26:03.640
so those were on sale, I bet, anyway.


00:26:03.640 --> 00:26:08.520
But no, they have some interesting,


00:26:08.520 --> 00:26:09.640
what do they call it, Nitro?


00:26:09.640 --> 00:26:11.220
I think they call it their Nitro service


00:26:11.220 --> 00:26:12.060
or something like that,


00:26:12.060 --> 00:26:15.800
which allows them to virtualize actual real hardware.


00:26:15.800 --> 00:26:17.080
So this is pretty neat.


00:26:17.080 --> 00:26:18.020
You can sign up.


00:26:18.020 --> 00:26:19.120
The billing is interesting.


00:26:19.120 --> 00:26:21.400
You have to pay for at least one day's worth


00:26:21.400 --> 00:26:24.720
if you get it, which I think is like $24.


00:26:24.720 --> 00:26:27.980
If you're gonna run it continuously all the time,


00:26:27.980 --> 00:26:29.180
this is one pricey sucker.


00:26:29.180 --> 00:26:33.960
Like the Mac Mini you can get now is $700.


00:26:33.960 --> 00:26:37.000
This is $770 a month.


00:26:37.000 --> 00:26:38.460
- Oh, okay.


00:26:38.460 --> 00:26:41.440
- So if what you need is like a couple Mac Minis,


00:26:41.440 --> 00:26:43.620
you're probably, and you need them on all the time,


00:26:43.620 --> 00:26:45.220
you're probably better off just buying a few


00:26:45.220 --> 00:26:48.040
and sticking them in a closet, especially the M1s.


00:26:48.040 --> 00:26:50.280
But if you just need one on demand every now and then,


00:26:50.280 --> 00:26:52.280
or you need to burst into them or something like that


00:26:52.280 --> 00:26:53.120
that could be interesting.


00:26:53.120 --> 00:26:54.960
- Yeah, yeah, if you're back old school


00:26:54.960 --> 00:26:57.920
and you only release like once every three months.


00:26:57.920 --> 00:27:00.920
- Well, there was some conversations like,


00:27:00.920 --> 00:27:03.560
well, if your data is already stored in S3


00:27:03.560 --> 00:27:05.560
and you have like huge quantity of data


00:27:05.560 --> 00:27:07.520
and what you need to run is actually running


00:27:07.520 --> 00:27:09.640
like some video processing on the Mac,


00:27:09.640 --> 00:27:10.880
you could do it by the data


00:27:10.880 --> 00:27:12.080
instead of transferring that kind of stuff.


00:27:12.080 --> 00:27:15.360
Things like that might be interesting, I don't know.


00:27:15.360 --> 00:27:17.840
I would go ahead and throw out there also


00:27:17.840 --> 00:27:18.880
that this is all interesting.


00:27:18.880 --> 00:27:21.600
I have links to this kind of stuff and whatnot.


00:27:21.600 --> 00:27:23.800
Like the blog post announcing it and so on.


00:27:23.800 --> 00:27:26.980
But there's also this thing called Mac Stadium.


00:27:26.980 --> 00:27:28.880
And if you look at Mac Stadium, it's pretty interesting.


00:27:28.880 --> 00:27:31.480
You go over there and say, give me a dedicated bare mini,


00:27:31.480 --> 00:27:36.040
a bare metal Mac mini in their data center, $60 a month.


00:27:36.040 --> 00:27:40.400
So you can actually get like a decent one


00:27:40.400 --> 00:27:41.600
for a decent price over there.


00:27:41.600 --> 00:27:43.480
So if you just want one running all the time,


00:27:43.480 --> 00:27:44.320
it might be good.


00:27:44.320 --> 00:27:46.400
But the thing is, if you're already like deeply integrated


00:27:46.400 --> 00:27:48.560
to AWS, maybe this is a good thing.


00:27:48.560 --> 00:27:51.040
Yeah, yeah, is there anything you?


00:27:51.040 --> 00:27:51.600
Yeah, good.


00:27:51.600 --> 00:27:53.400
I was just going to say this seems pretty interesting.


00:27:53.400 --> 00:27:56.600
I mean, I know one of the reasons that I love using GitHub


00:27:56.600 --> 00:28:00.040
actions and Azure pipelines is the ability to be able to get


00:28:00.040 --> 00:28:04.320
access to Mac VM's for builds.


00:28:04.320 --> 00:28:07.360
But if you I could also see this being really interesting and


00:28:07.360 --> 00:28:11.200
useful if you have like some very huge application or some


00:28:11.200 --> 00:28:13.760
like very large stack that you want to be able to be able to


00:28:13.760 --> 00:28:16.320
do CI or tests on that.


00:28:16.320 --> 00:28:21.320
this could be really, really nice, especially if you don't just want to be like, you know,


00:28:21.320 --> 00:28:26.840
pounding and destroying like one one Mac over and over and over again. This is nice, especially


00:28:26.840 --> 00:28:32.640
if you have a distributed team. Yeah, which every team is basically a distributed. Yeah,


00:28:32.640 --> 00:28:37.200
welcome to 2020. One thing that's interesting about this is you can literally press a button


00:28:37.200 --> 00:28:43.360
or even just through the AWS, probably the Bodo API, you can just make a new Mac instantly.


00:28:43.360 --> 00:28:46.720
Like within seconds, you can have a clean, pre-configured Mac.


00:28:46.720 --> 00:28:52.520
You can create AMIs, the Amazon machine image, which are like, install a bunch of stuff and


00:28:52.520 --> 00:28:57.360
get it set up and then save it so I can respawn new machines from it.


00:28:57.360 --> 00:29:00.600
Those are pretty interesting options that just having a Mac mini in the closet.


00:29:00.600 --> 00:29:04.120
Push a button, make a brand new one, try this, throw it away, make it a different way, throw


00:29:04.120 --> 00:29:05.120
it away.


00:29:05.120 --> 00:29:07.320
There are some use cases here that could be interesting.


00:29:07.320 --> 00:29:08.320
That said, I won't be using it.


00:29:08.320 --> 00:29:12.160
I'm just going to buy a Mac mini if I can ever get it.


00:29:12.160 --> 00:29:14.160
All right, Matthew, what's this last one you got for us?


00:29:14.160 --> 00:29:19.600
Yeah, I don't have any clever transition, but all right. So maybe, I don't know about you,


00:29:19.600 --> 00:29:26.080
but I end up having to deal with a lot of JSON serializations of different statistical models


00:29:26.080 --> 00:29:32.400
and different, and sometimes also getting CSPs of different data sets that I want to be doing


00:29:32.400 --> 00:29:38.400
analysis on. And your first instinct might just be to say, "Okay, I'm just going to open this up


00:29:38.960 --> 00:29:41.260
and pandas and start to get to work on it.


00:29:41.260 --> 00:29:44.020
But if you kind of are used and comfortable to working


00:29:44.020 --> 00:29:49.020
in the Linux command line kind of ecosystem of data tools,


00:29:49.020 --> 00:29:51.400
you might be itching a little bit and want to kind of just,


00:29:51.400 --> 00:29:53.740
you know, peek inside at the command line level


00:29:53.740 --> 00:29:55.060
and kind of get to work there.


00:29:55.060 --> 00:29:57.940
And so in that case, you might be really interested


00:29:57.940 --> 00:30:00.500
in this tool called Visadata.


00:30:00.500 --> 00:30:02.120
So Visadata is written on--


00:30:02.120 --> 00:30:03.700
- This is blowing my mind actually.


00:30:03.700 --> 00:30:05.700
- Yeah, it's like when I saw this,


00:30:05.700 --> 00:30:08.080
my jaw was kind of on the floor.


00:30:08.080 --> 00:30:11.040
So we'll make sure that this is linked in the show notes


00:30:11.040 --> 00:30:12.860
'cause it has some really cool videos.


00:30:12.860 --> 00:30:15.080
But so from the docs,


00:30:15.080 --> 00:30:17.700
so it's Visadata is described as data science


00:30:17.700 --> 00:30:18.800
without the drudgery.


00:30:18.800 --> 00:30:22.800
So it's an interactive multi-tool for tabular data,


00:30:22.800 --> 00:30:24.540
combines clarity of spreadsheets


00:30:24.540 --> 00:30:26.720
with efficiencies of being at the terminal


00:30:26.720 --> 00:30:28.720
and also the power of Python 3


00:30:28.720 --> 00:30:30.920
on a really lightweight utility


00:30:30.920 --> 00:30:33.840
that can handle millions of rows with ease.


00:30:33.840 --> 00:30:35.340
I can attest to that personally.


00:30:35.340 --> 00:30:39.020
I've opened up like four gigabyte CSV files before,


00:30:39.020 --> 00:30:42.460
and it just drops right in and starts asynchronously loading


00:30:42.460 --> 00:30:43.780
like a champ.


00:30:43.780 --> 00:30:45.380
In addition to that, it supports kind


00:30:45.380 --> 00:30:47.620
of a really astounding number of file formats


00:30:47.620 --> 00:30:48.700
that it supports.


00:30:48.700 --> 00:30:50.420
Currently on the website, it says


00:30:50.420 --> 00:30:52.620
it supports 42 different file formats.


00:30:52.620 --> 00:30:57.380
So it supports things that you would expect, like CSV and JSON,


00:30:57.380 --> 00:31:00.540
but then it also supports things like Jira,


00:31:00.540 --> 00:31:04.780
I guess like whatever Jira uses for their sort of tabular


00:31:04.780 --> 00:31:05.260
stuff.


00:31:05.260 --> 00:31:11.660
also can like read my my sequel and I guess it can also even deal with PNG the image file


00:31:11.660 --> 00:31:16.280
format which I was you know impressed by. So this is all openly developed. The output


00:31:16.280 --> 00:31:23.900
is a terminal right? Yeah like text. Yeah. Yeah. So this is all openly developed on GitHub


00:31:23.900 --> 00:31:32.340
by a guy named Sol Pawson I think. And if you go to the if you go to the visit data


00:31:32.340 --> 00:31:39.060
website. It also has plenty of links to live demos of him doing kind of interactive examples


00:31:39.060 --> 00:31:45.300
of visualizations. There's one lightning talk that he's given at I think PyCascades 2018 or


00:31:45.300 --> 00:31:52.260
something like that where he's able to just call up a CSV file of like 311 complaints in New York


00:31:52.260 --> 00:31:58.820
City and then through using visit data just kind of hone down onto certain boroughs and then be


00:31:58.820 --> 00:32:03.820
be able to do filter on different complaint types


00:32:03.820 --> 00:32:06.500
to be able to basically find complaints about rodents


00:32:06.500 --> 00:32:08.240
and then filter on rat complaints


00:32:08.240 --> 00:32:11.260
and then plot that inside a visit data still


00:32:11.260 --> 00:32:14.540
on the terminal to basically make a visualization


00:32:14.540 --> 00:32:17.580
of like rodent distribution in the New York City boroughs.


00:32:17.580 --> 00:32:21.520
So I thought that was quite amusing and really cool.


00:32:21.520 --> 00:32:24.860
It's also, this is a Python application.


00:32:24.860 --> 00:32:28.540
So you might not wanna continuously install this


00:32:28.540 --> 00:32:31.120
in every single virtual environment you make.


00:32:31.120 --> 00:32:32.920
So, I mean, it is up on PyPI,


00:32:32.920 --> 00:32:35.360
so you can just do pip install visidata.


00:32:35.360 --> 00:32:36.800
But since it's an application,


00:32:36.800 --> 00:32:38.500
you probably might also want it just kind of


00:32:38.500 --> 00:32:40.780
as a generic tool on your machine.


00:32:40.780 --> 00:32:43.580
So it's distributed through a lot of, you know,


00:32:43.580 --> 00:32:45.860
nice common package managers.


00:32:45.860 --> 00:32:49.240
So if you're on Linux, they've got it on apt,


00:32:49.240 --> 00:32:52.680
as well as things like NX and GUX.


00:32:52.680 --> 00:32:54.300
But I didn't see it on yum.


00:32:54.300 --> 00:32:56.360
So if you're on Fedora or CentOS,


00:32:56.360 --> 00:32:57.680
you might be a little bit out of luck,


00:32:57.680 --> 00:32:59.120
you may have to do it manually.


00:32:59.120 --> 00:33:02.280
It's of course on Homebrew and even Conda Forge.


00:33:02.280 --> 00:33:06.680
And it's not listed there, but a very, very cool tool


00:33:06.680 --> 00:33:08.320
that's been featured on the show before,


00:33:08.320 --> 00:33:10.440
which is PipX by Chad Smith.


00:33:10.440 --> 00:33:11.280
- Yeah, PipX is awesome.


00:33:11.280 --> 00:33:12.800
- It's so good, I love it.


00:33:12.800 --> 00:33:14.240
I tested this last night.


00:33:14.240 --> 00:33:18.560
I just fired up a Python 3.8 Docker container


00:33:18.560 --> 00:33:21.200
and went ahead and installed PipX


00:33:21.200 --> 00:33:23.160
and then used PipX to install Visadata


00:33:23.160 --> 00:33:25.680
and was able to drop right into Visadata as expected.


00:33:25.680 --> 00:33:28.240
So it's very, very cool.


00:33:28.240 --> 00:33:31.260
And just the power that you can have with it,


00:33:31.260 --> 00:33:33.440
I think is worth checking out for anybody


00:33:33.440 --> 00:33:36.400
who is doing data analysis with Tableau data.


00:33:36.400 --> 00:33:37.400
- This is super cool.


00:33:37.400 --> 00:33:40.160
I love when people build these tools that are kind of,


00:33:40.160 --> 00:33:41.840
you don't really expect them to be so powerful.


00:33:41.840 --> 00:33:43.200
And you talked about how you just dropped in


00:33:43.200 --> 00:33:44.360
and grabbed some random data


00:33:44.360 --> 00:33:45.680
and started answering questions.


00:33:45.680 --> 00:33:46.960
And that's super neat.


00:33:46.960 --> 00:33:47.800
- Yeah.


00:33:47.800 --> 00:33:48.840
- Yeah, the number of inputs,


00:33:48.840 --> 00:33:50.360
and because it's an open source


00:33:50.360 --> 00:33:54.440
and because of all the other examples of data types,


00:33:54.440 --> 00:33:56.240
I think even if you have a different data type,


00:33:56.240 --> 00:33:59.680
it shouldn't be too hard to modify this


00:33:59.680 --> 00:34:01.440
to handle something different.


00:34:01.440 --> 00:34:03.120
I do notice, I'm excited about it,


00:34:03.120 --> 00:34:05.880
it does have PCAP files for packet capture,


00:34:05.880 --> 00:34:09.480
these are for communication packets.


00:34:09.480 --> 00:34:11.800
- Talking to all your devices and all your hardware


00:34:11.800 --> 00:34:12.840
at your company, right?


00:34:12.840 --> 00:34:16.680
- Well, like even the Wi-Fi packets and cellular packets,


00:34:16.680 --> 00:34:18.320
that's how we debug those.


00:34:18.320 --> 00:34:20.640
So it's very cool.


00:34:20.640 --> 00:34:21.460
- Yeah, very cool.


00:34:21.460 --> 00:34:22.600
And PipX is great.


00:34:22.600 --> 00:34:24.620
I install a bunch of apps like Glances,


00:34:24.620 --> 00:34:27.960
which is a fantastic, like visualize the state,


00:34:27.960 --> 00:34:29.840
you know, like top, but way, way better.


00:34:29.840 --> 00:34:33.080
The HCPy, which is great for, it's a better,


00:34:33.080 --> 00:34:34.500
but much, much better curl.


00:34:34.500 --> 00:34:37.360
But the most important thing I install that way


00:34:37.360 --> 00:34:38.960
is a PyJoke.


00:34:38.960 --> 00:34:41.680
So now I can type PyJoke on my command line


00:34:41.680 --> 00:34:43.120
and we're always right there.


00:34:43.120 --> 00:34:47.480
So speaking of which, move on to our extras.


00:34:47.480 --> 00:34:49.240
That's all of our main topics.


00:34:49.240 --> 00:34:50.560
Brian, you got anything this week?


00:34:50.560 --> 00:34:53.000
>> No, I did. I haven't dropped them in.


00:34:53.000 --> 00:34:54.800
Where'd my extras go?


00:34:54.800 --> 00:34:56.160
>> Well, you got it.


00:34:56.160 --> 00:34:57.520
>> I just wanted to bring up that


00:34:57.520 --> 00:35:01.380
the PyCon 2021 is going to be virtual,


00:35:01.380 --> 00:35:04.120
and there's a website up,


00:35:04.120 --> 00:35:08.360
it's us.pycon.org/2021.


00:35:08.360 --> 00:35:10.520
There's not a lot there yet,


00:35:10.520 --> 00:35:13.040
but you can check out what's going to happen.


00:35:13.040 --> 00:35:17.300
It's not surprising that they have to start planning it,


00:35:17.300 --> 00:35:20.580
and there may as well plan it as a virtual event.


00:35:20.580 --> 00:35:24.280
Just hoping that we would have live, but I understand.


00:35:24.280 --> 00:35:27.480
>> Yeah. Hikon is my geek holiday.


00:35:27.480 --> 00:35:29.100
I love, it's both work,


00:35:29.100 --> 00:35:33.180
but it's also just such a nice getaway to connect with everybody.


00:35:33.180 --> 00:35:37.040
You, everyone else we know from the community, listeners.


00:35:37.040 --> 00:35:38.400
I'm going to miss not having it.


00:35:38.400 --> 00:35:38.940
>> Yeah.


00:35:38.940 --> 00:35:41.000
>> Matt, do you attend? Sorry, Brian.


00:35:41.000 --> 00:35:42.620
>> No, it's good that they're,


00:35:42.620 --> 00:35:45.020
I always check whenever they announce the date to make


00:35:45.020 --> 00:35:49.740
it doesn't overlap Mother's Day. >> Oh, yeah. That's not good.


00:35:49.740 --> 00:35:59.500
>> Yeah. So I have unfortunately not attended PyCon yet in person or, I mean, well, it was


00:35:59.500 --> 00:36:05.500
canceled this year. So maybe I'll attend this year remote. But I'm a regular attendee of the


00:36:05.500 --> 00:36:12.620
SciPy conference, which this -- so this past year, SciPy 2020 was moved online. And I thought that


00:36:12.620 --> 00:36:14.500
that the organizers did a fantastic job


00:36:14.500 --> 00:36:16.260
of actually writing it online


00:36:16.260 --> 00:36:19.160
while still keeping kind of that SciPy community feel.


00:36:19.160 --> 00:36:23.140
So that was helped a lot also by plenty of bad puns.


00:36:23.140 --> 00:36:25.700
So I think that might be something


00:36:25.700 --> 00:36:29.260
that still comes through for PyCon 2021 maybe.


00:36:29.260 --> 00:36:30.420
- Yeah, absolutely.


00:36:30.420 --> 00:36:34.500
One of the live listeners, Mohammed, said,


00:36:34.500 --> 00:36:36.360
asked if it's gonna cost money


00:36:36.360 --> 00:36:38.820
or if it's gonna be free this year to attend.


00:36:38.820 --> 00:36:40.540
Did you notice anything, Brian?


00:36:40.540 --> 00:36:42.100
- I haven't looked.


00:36:42.100 --> 00:36:45.980
I'm looking around and I don't know that it costs anything.


00:36:45.980 --> 00:36:48.100
It's from what I can tell, I don't see any pricing.


00:36:48.100 --> 00:36:51.100
What I saw was sponsor information to get sponsors


00:36:51.100 --> 00:36:54.200
to sign up to be part of whatever they're doing there.


00:36:54.200 --> 00:36:55.860
But I can't tell.


00:36:55.860 --> 00:36:56.700
- Yeah, not sure.


00:36:56.700 --> 00:36:57.540
- Somebody knows, throw it in the chat


00:36:57.540 --> 00:37:01.420
or put it into the, you know, visit pythonbystadafm/211


00:37:01.420 --> 00:37:02.860
and put it in the comments down there.


00:37:02.860 --> 00:37:04.620
All right, I got a couple here.


00:37:04.620 --> 00:37:07.500
First of all, we're trying out live streaming here


00:37:07.500 --> 00:37:08.640
and I think it's going pretty well.


00:37:08.640 --> 00:37:10.580
Seems like it's working out.


00:37:10.580 --> 00:37:11.880
There's a bunch of people watching.


00:37:11.880 --> 00:37:15.640
So if you want to get notified and we happen to keep doing this,


00:37:15.640 --> 00:37:19.000
just visit pythonbytes.fm/youtube.


00:37:19.000 --> 00:37:21.280
And it should have like the scheduled upcoming live stream.


00:37:21.280 --> 00:37:22.520
You can like get notified there.


00:37:22.520 --> 00:37:24.000
So maybe we'll keep doing this.


00:37:24.000 --> 00:37:25.080
It's been fun.


00:37:25.080 --> 00:37:27.160
Thanks for everyone out there who's watching right now.


00:37:27.160 --> 00:37:31.120
And in addition to PyCon, which you just announced


00:37:31.120 --> 00:37:32.960
or mentioned the announcement of,


00:37:32.960 --> 00:37:35.200
that is the main way that the PSF is funded,


00:37:35.200 --> 00:37:38.240
but they're also doing a dedicated offering


00:37:38.240 --> 00:37:42.760
sort of fundraiser thing with six companies


00:37:42.760 --> 00:37:45.280
to help raise some money for the PSF


00:37:45.280 --> 00:37:47.360
and Talk Python Training is being part of that


00:37:47.360 --> 00:37:51.880
and 50% of the revenue of a certain set of our courses


00:37:51.880 --> 00:37:54.240
that are sold during the month of December


00:37:54.240 --> 00:37:56.260
goes directly to the PSF.


00:37:56.260 --> 00:37:59.120
And people who buy those courses through the PSF fundraiser


00:37:59.120 --> 00:38:01.240
also get like 20% of a discount.


00:38:01.240 --> 00:38:03.000
So there's a link in the show notes


00:38:03.000 --> 00:38:05.600
for people to take some of our courses


00:38:05.600 --> 00:38:06.800
and donate to the PSF.


00:38:06.800 --> 00:38:08.840
If you'd rather just directly donate, that's fine.


00:38:08.840 --> 00:38:10.920
But if you're looking to get some of our courses anyway,


00:38:10.920 --> 00:38:13.000
you can do it this way and support the PSF.


00:38:13.000 --> 00:38:14.840
They're hoping to raise $60,000.


00:38:14.840 --> 00:38:17.520
You know, hopefully we can do that for them and we'll see.


00:38:17.520 --> 00:38:21.080
And Brian, you announced Big PyCon.


00:38:21.080 --> 00:38:23.840
Another thing that got announced is Small PyCon,


00:38:23.840 --> 00:38:26.380
PyCascades, Cascades being the mountain range


00:38:26.380 --> 00:38:29.200
that connects Portland, Seattle, and Vancouver.


00:38:29.200 --> 00:38:30.980
And traditionally this conference is cycled


00:38:30.980 --> 00:38:32.360
between those three cities.


00:38:32.360 --> 00:38:33.500
I don't even remember anymore


00:38:33.500 --> 00:38:35.240
where it's supposed to be this year.


00:38:35.240 --> 00:38:36.720
I think it's supposed to go back to Vancouver,


00:38:36.720 --> 00:38:38.220
but it's not going to Vancouver


00:38:38.220 --> 00:38:39.740
'cause nobody's going anywhere.


00:38:39.740 --> 00:38:42.980
So, Pi Cascades is online, and those do cost money.


00:38:42.980 --> 00:38:45.220
It's $10 for students, $20 for individuals,


00:38:45.220 --> 00:38:48.100
and $50 for professionals to support that conference.


00:38:48.100 --> 00:38:49.500
But I'll link to that one


00:38:49.500 --> 00:38:52.420
since that's one of our local conferences, if you will.


00:38:52.420 --> 00:38:53.260
- Yeah, they're trying to push,


00:38:53.260 --> 00:38:55.300
they often push what's going on,


00:38:55.300 --> 00:38:57.260
what kind of try new things.


00:38:57.260 --> 00:38:59.060
So, it's a neat conference.


00:38:59.060 --> 00:39:01.020
- Yeah, yeah, I enjoy my time there as well.


00:39:01.020 --> 00:39:02.420
All right, Matthew, what have you got for us?


00:39:02.420 --> 00:39:04.100
Anything else you wanna give a shout out to?


00:39:04.100 --> 00:39:06.180
- Yeah, just a few items.


00:39:06.180 --> 00:39:09.580
So Advent of Code 2020 has started now.


00:39:09.580 --> 00:39:11.940
It's day two, but there's still plenty of time


00:39:11.940 --> 00:39:13.460
to get involved with that if you want to.


00:39:13.460 --> 00:39:15.500
And for those of you who might not know,


00:39:15.500 --> 00:39:19.560
Advent of Code is just an annual kind of coding challenge


00:39:19.560 --> 00:39:21.700
that takes place every December.


00:39:21.700 --> 00:39:24.520
And it's just basically 25 days of like fun


00:39:24.520 --> 00:39:26.640
and interesting programming challenges.


00:39:26.640 --> 00:39:29.820
So it's always a great opportunity to try and brush up


00:39:29.820 --> 00:39:33.220
on your Python and maybe learn about some interesting,


00:39:34.060 --> 00:39:37.580
you know, collections that you might not have known about in the standard library.


00:39:37.580 --> 00:39:41.140
So that's going on right now, worth checking out, I think.


00:39:41.140 --> 00:39:46.300
And then as I'm going to sneak in some very small physics related


00:39:46.300 --> 00:39:49.660
followup to Python bytes, episode 205,


00:39:49.660 --> 00:39:52.780
in which awkward arrays were talked about.


00:39:52.780 --> 00:39:57.460
So the lead developer of awkward arrays is my friend and colleague,


00:39:57.460 --> 00:40:02.620
Jim Povarsky, who is one of my scikit-hep co-collaborators,


00:40:02.620 --> 00:40:04.900
as well as also a member of Iris up.


00:40:04.900 --> 00:40:09.620
And as of today, which is recording December 2nd,


00:40:09.620 --> 00:40:13.980
Awkward V 1.0 is a release candidate is up on PyPI.


00:40:13.980 --> 00:40:15.900
So by the time that this goes live,


00:40:15.900 --> 00:40:17.940
if you just do pip install awkward,


00:40:17.940 --> 00:40:20.260
you should get awkward 1.0 releases


00:40:20.260 --> 00:40:21.580
instead of having to do the--


00:40:21.580 --> 00:40:22.620
- No more awkward one.


00:40:22.620 --> 00:40:25.260
- Exactly, no more awkward one, no more awkward zero.


00:40:25.260 --> 00:40:26.100
All that jazz.


00:40:26.100 --> 00:40:28.100
- So good to have the actual install statement


00:40:28.100 --> 00:40:29.180
be awkward itself.


00:40:29.180 --> 00:40:30.020
- Exactly.


00:40:30.020 --> 00:40:32.660
So that's a nice little tidbit.


00:40:32.660 --> 00:40:36.540
And I think there's some nice links in episode 205


00:40:36.540 --> 00:40:38.660
if people want to learn more about Awkward.


00:40:38.660 --> 00:40:42.740
But that's kind of a backbone of the Pythonic ecosystem


00:40:42.740 --> 00:40:44.260
for physics right now.


00:40:44.260 --> 00:40:47.860
And then finally, I just want to give some kudos to Python


00:40:47.860 --> 00:40:50.060
Bytes as well, specifically for making


00:40:50.060 --> 00:40:53.020
full transcripts of the shows available to view


00:40:53.020 --> 00:40:54.980
on pythonbytes.fm.


00:40:54.980 --> 00:40:57.140
Not only is this, I think, a cool idea in general,


00:40:57.140 --> 00:40:59.220
but I think this also makes the show more


00:40:59.220 --> 00:41:01.540
inclusive to the deaf Python community,


00:41:01.540 --> 00:41:03.220
which is definitely out there.


00:41:03.220 --> 00:41:07.500
And one of my good friends and coauthors is deaf.


00:41:07.500 --> 00:41:10.220
And I know that he definitely appreciates this.


00:41:10.220 --> 00:41:12.500
So good job Ben, you guys,


00:41:12.500 --> 00:41:14.860
for being more inclusive of the wider community.


00:41:14.860 --> 00:41:15.700
- Oh, that's so cool.


00:41:15.700 --> 00:41:17.780
I didn't know anybody was utilizing it.


00:41:17.780 --> 00:41:18.900
- Yeah, that's awesome.


00:41:18.900 --> 00:41:19.740
Thank you.


00:41:19.740 --> 00:41:22.660
I think it's absolutely critical for that


00:41:22.660 --> 00:41:24.500
'cause the format is only audio,


00:41:24.500 --> 00:41:25.940
but a lot of folks have reached out


00:41:25.940 --> 00:41:27.060
and said they also appreciate it


00:41:27.060 --> 00:41:29.780
if they're English as a second language


00:41:29.780 --> 00:41:31.980
and they're not as good with English as well.


00:41:31.980 --> 00:41:34.180
So that also helps I think, right?


00:41:34.180 --> 00:41:35.920
They're like, what was I saying again?


00:41:35.920 --> 00:41:37.280
What a weird word.


00:41:37.280 --> 00:41:39.460
Awkward array, why would they talk about that?


00:41:39.460 --> 00:41:40.580
It doesn't make sense.


00:41:40.580 --> 00:41:43.220
- Yeah, transcripts and closed captioning


00:41:43.220 --> 00:41:44.700
is just more inclusive for everyone.


00:41:44.700 --> 00:41:46.140
So that's awesome.


00:41:46.140 --> 00:41:47.240
- Yeah, thanks.


00:41:47.240 --> 00:41:51.580
All right, well, let's wrap it up with a joke, right?


00:41:51.580 --> 00:41:52.420
- Yeah.


00:41:52.420 --> 00:41:54.980
- All right, so you guys, I'm gonna need your help here.


00:41:54.980 --> 00:41:57.380
I'm gonna let Matthew, I'm gonna let you pick.


00:41:57.380 --> 00:41:59.700
Do you wanna be Windows or Apple?


00:41:59.700 --> 00:42:00.700
- I'll be Windows.


00:42:00.700 --> 00:42:02.120
- All right, Brian, you'd be Apple.


00:42:02.120 --> 00:42:05.160
So the idea is like, the title here is


00:42:05.160 --> 00:42:08.300
how to fix a computer, any computer.


00:42:08.300 --> 00:42:11.140
So instructions for Windows, go ahead, Matthew.


00:42:11.140 --> 00:42:12.860
- So step one, reboot.


00:42:12.860 --> 00:42:15.460
And then the flowchart goes to, did that fix it?


00:42:15.460 --> 00:42:17.440
If no, proceed to step two.


00:42:17.440 --> 00:42:19.540
Step two, format your hard drive


00:42:19.540 --> 00:42:21.320
and then reinstall Windows.


00:42:21.320 --> 00:42:23.620
Lose all of your files and quietly leap.


00:42:24.700 --> 00:42:26.460
- Brian, Apple doesn't have that problem.


00:42:26.460 --> 00:42:28.580
There's some totally different solution there.


00:42:28.580 --> 00:42:31.820
- Okay, for Apple, it's step one, take it to an Apple store.


00:42:31.820 --> 00:42:32.780
Did that fix it?


00:42:32.780 --> 00:42:34.780
If no, proceed to step two.


00:42:34.780 --> 00:42:36.860
Step two is buy a new Mac,


00:42:36.860 --> 00:42:39.280
overdraw your account, and quietly weep.


00:42:39.280 --> 00:42:40.780
(laughing)


00:42:40.780 --> 00:42:41.620
- That's me right now.


00:42:41.620 --> 00:42:43.640
All right, I got the Linux fix, it's so easy.


00:42:43.640 --> 00:42:45.740
It's totally, like, you don't need those things.


00:42:45.740 --> 00:42:49.940
So you learn to code in C++, you recompile the kernel,


00:42:49.940 --> 00:42:52.620
you build your own microprocessor out of spare silicon


00:42:52.620 --> 00:42:53.760
you have laying around.


00:42:53.760 --> 00:42:55.300
You recompile the kernel again.


00:42:55.300 --> 00:42:56.360
You switch distros.


00:42:56.360 --> 00:42:57.680
You recompile the kernel again,


00:42:57.680 --> 00:42:59.360
but this time using a CPU powered


00:42:59.360 --> 00:43:03.360
by the refactored light from Saturn.


00:43:03.360 --> 00:43:04.720
You grow a giant beard.


00:43:04.720 --> 00:43:06.520
You blame Sun Microsystems.


00:43:06.520 --> 00:43:08.320
You turn your bedroom into a server closet


00:43:08.320 --> 00:43:09.740
and spend 10 years falling asleep


00:43:09.740 --> 00:43:10.960
to the sound of worrying fans.


00:43:10.960 --> 00:43:12.320
You switch distros again.


00:43:12.320 --> 00:43:13.640
You abandon all hygiene.


00:43:13.640 --> 00:43:14.640
You write a regular expression


00:43:14.640 --> 00:43:18.240
that would make any other programmers cry blood.


00:43:18.240 --> 00:43:19.240
You learn to code in Java.


00:43:19.240 --> 00:43:20.140
You recompile again,


00:43:20.140 --> 00:43:22.300
but this time while wearing your lucky socks.


00:43:22.300 --> 00:43:23.360
Did that fix it?


00:43:23.360 --> 00:43:25.080
No, proceed to step two,


00:43:25.080 --> 00:43:27.200
revert back to using Windows and Mac,


00:43:27.200 --> 00:43:28.720
or Mac, quietly weep.


00:43:28.720 --> 00:43:30.360
(laughing)


00:43:30.360 --> 00:43:32.000
There's really no good outcome here.


00:43:32.000 --> 00:43:33.480
They all end in quietly weep.


00:43:33.480 --> 00:43:35.960
- As a Linux user for the better part of a decade,


00:43:35.960 --> 00:43:38.280
I can neither confirm nor deny


00:43:38.280 --> 00:43:39.840
how accurate that last part is.


00:43:39.840 --> 00:43:42.040
(laughing)


00:43:42.040 --> 00:43:44.800
- Yeah, they all have their own special angle.


00:43:44.800 --> 00:43:47.320
It just takes longer to get there with Linux


00:43:47.320 --> 00:43:49.680
to get to your destination, I guess.


00:43:49.680 --> 00:43:50.520
- Yeah.


00:43:50.520 --> 00:43:52.040
- All right, well, that's fun as always,


00:43:52.040 --> 00:43:53.500
And everyone watching on YouTube,


00:43:53.500 --> 00:43:55.100
thanks for being here live and everyone listening,


00:43:55.100 --> 00:43:56.300
just thank you for listening.


00:43:56.300 --> 00:43:57.700
Matthew, thanks for joining us.


00:43:57.700 --> 00:43:58.960
- Hey, thanks so much for having me.


00:43:58.960 --> 00:44:00.140
This was really fun.


00:44:00.140 --> 00:44:00.980
- Yeah, yeah.


00:44:00.980 --> 00:44:02.300
Great for the items you brought.


00:44:02.300 --> 00:44:03.140
Enjoy them.


00:44:03.140 --> 00:44:04.780
And Brian, thanks as always, man.


00:44:04.780 --> 00:44:05.620
- Thank you.


00:44:05.620 --> 00:44:06.540
It's been fun. - Yep, yep.


00:44:06.540 --> 00:44:07.660
See ya. - Bye.


00:44:07.660 --> 00:44:09.460
- Thank you for listening to Python Bytes.


00:44:09.460 --> 00:44:11.900
Follow the show on Twitter via @PythonBytes.


00:44:11.900 --> 00:44:15.020
That's Python Bytes as in B-Y-T-E-S.


00:44:15.020 --> 00:44:18.300
And get the full show notes at pythonbytes.fm.


00:44:18.300 --> 00:44:19.900
If you have a news item you want featured,


00:44:19.900 --> 00:44:22.300
just visit pythonbytes.fm and send it our way.


00:44:22.300 --> 00:44:25.260
We're always on the lookout for sharing something cool.


00:44:25.260 --> 00:44:27.100
On behalf of myself and Brian Auchin,


00:44:27.100 --> 00:44:28.460
this is Michael Kennedy.


00:44:28.460 --> 00:44:30.460
Thank you for listening and sharing this podcast


00:44:30.460 --> 00:44:32.100
with your friends and colleagues.

