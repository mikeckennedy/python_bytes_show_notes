00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 277, recorded, recorded March 28 2022. And I am Brian Aachen.

00:00:12 I'm Michael Kennedy. And I'm someone's Geico. Welcome, Thomas.

00:00:15 Welcome to the show. Thanks for coming on being a guest. Can you tell us a little bit

00:00:21 about you? Thanks, Brian. And Thanks, Michael. Big fan. So it's an honor being here. I'm the creator and maintainer of the Piper task runner, which itself happens you discussed last week. So cool. I come in writing on that wave. Yeah.

00:00:36 Yeah. Very cool. Projects. Congrats on it.

00:00:38 Thank you very much.

00:00:40 Well, so, Michael, it's March.

00:00:42 It is March. Like March Madness, right? Yeah. So Chris May sent in this thing. This is Hey, Python bytes, people. Here's a fun thing to cover March Madness, but for Python, and for those of you who are not college basketball fans and follow it carefully, March Madness is basically the playoffs for the college basketball. And it's single elimination. You start with 16, I think. And then every team plays another one that's down to eight, then down to four, and so on. So that's the idea. But for Python, oh, and check it here. We have round one. I guess it starts with 32, and then 16, and so on. So we've got these different rounds, and some of the rounds have already occurred. But the winner the champion is still yet to be crowned. So y'all need to get out there and vote. I'll tell you how to second

00:01:33 amaze out doing pie tester.

00:01:37 It's out doing it pretty handily. I mean, it did out do it, right. So if you go here, what you see is this, this tournament bracket, and the first ones were like NumPy, versus Reddit and Redis and NumPy. One, and then pi test vs. L, XML parser, and pi test one that won handily, and didn't NumPy and pi test had to face off and as Thomas says, surprisingly brewing by pretty pretty badly beat up on PI test. I don't Brian, are you okay with this? How you feeling?

00:02:06 I don't, I didn't get to vote. So I'm not sure how this was done.

00:02:10 Yeah, this is gonna be the start of a long blood feud between It is not like

00:02:17 well, on the other part of this story, I'm telling the other side of the bracket was sai kit learn versus BeautifulSoup. And beautiful soup. Oh my gosh, I think it was a buzzer beater came in at the last second. And it's like 52% to 48% BeautifulSoup. One. And so now this week, we're in the Elite Eight. And so you come and vote I'm gonna vote like, and my metric here sort of how useful and how impactful is this thing? Not necessarily do I like it better. So I'm gonna vote of MSA for NumPy versus BeautifulSoup NumPy. I actually would use BeautifulSoup probably more, but I think NumPy is more impactful, Pip versus matplotlib. I'll PIP all day long. And reason. Pandas versus Docker, who I do like me some Docker, Mongo, and pandas, and then we'll vs requests, I'm gonna go with requests. I know wheels important under under the covers, but I don't see it. So I don't want to think about it. So request top of mind, he's on all the time. So here you can see I voted and everyone else who would like to, you can just click the link in the show notes. And you can vote to and these are basically opened for a week and the elimination happens and it moves on. So we're gonna see what happens in the Final Four. coming real soon, actually. So

00:03:26 okay, we're gonna have to like highlight this earlier in the month, next year, so that people can vote so

00:03:34 you want to read some voting blocks, like in the reality TV shows. The one on the island survivor?

00:03:40 Yes, survivor, exactly. Like, oh, I you know, I'm sad to say sai kit learns towards has been extinguished. You're gonna have to leave the island. Yes, that's right. Anyway, thank you, Chris, for sending this in. This is fun. And it's very low stakes. It's just sort of, you know, bragging rights for what it is. Yeah, bragging rights and whatnot. So we'll, we'll send out a tweet or some about it, you can get in there and check this out. So definitely, yeah, how about you? What's your next one

00:04:11 I like to talk about in B preview, which actually, I thought we covered. I couldn't find it anywhere. So in B preview is a notebook previewer. So IPython or Jupyter Notebook. And it's, it's kind of neat. It's a command line thing and I like to spend a lot of time on the command line. So this so you just went once you pip install it, or since it's not really part of your project, I used PIP X PIP X installed this. Yeah, but it's so you, you you'd say in B preview and then you can give it some options, but then a notebook file name and it will. It just previews your, your notebook in in ASCII, which is awesome. But it's not just ASCII. It's written So it's a we've got colors and nice colors and tables and stuff, it actually quite a few features that I want to run down. One of the things I loved right away it was it's not just a file, I said, I tried it out on some local files, but you can give it like, like a URL or something, there's, there's a great way to you can get a whole bunch of stuff, you don't have to have local Notebook Files to put into it. Oh, that's cool. The yeah, here it's showing even you can curl something and pipe it to it. So it'll take inputs as pipes in the the fact that it's a command line tool, and it deals with pipes correctly, is what I really like about it. So you can pipe a notebook to it. I don't know if you do that or not. But you might want to pipe output. So by default, you get these nice colors. But if you pipe it to an output, you can pipe it to grep or something, and you can grep for things. So this is kind of great. I don't know if you've ever tried to grep for something in a notebook. But there's a lot of junk around it. It's there's a lot of formatting stuff, that if that's not really what you're looking for, it's not helpful. So be having this tool to strip that out. It's pretty nice.

00:06:09 Oh, yeah, that's really nice. I love the ability to just pull this up and view them and given that it's based on rich like it has, yeah, formatting for all the cells. I mean, Jupiter is like markdown plus code and rich, as Rich highlighting for both of those. So that's cool. Yeah.

00:06:25 Like it's got some pigments under the hood also, which Yeah, happens Ian brought up last week, I think.

00:06:31 Yeah, exactly. So a lot a lot of continuations said this

00:06:34 week, a lot of cool stuff that you would expect, like code highlighting and stuff. But the thing that like really stood out to me is what does it do with images like, like, graphs and stuff, and the images are kind of amazing. They're like these, by default, these block things, which are not that clear to us for you, you know, utilities, but it's kind of shows you what it's going to do. And there's a there's a few options you can do. You can do this block level thing. And I like the characters. So it does like the ASCII art ASCII art stuff for viewer images, or he uses the Braille stuff. I don't know if there's an example here, but you can do Braille for, for all the dots to show up, which is kind of neat. It even does like cool data frame rendering. So if you've got a data frame, printed out there, in your notebook, it'll format it nicely. So even law, even law tech is formatted, which is kind of a surprise. I didn't expect that. So that's kind of neat. Anyway, I specifically oh, cool hyperlinks to so you can click on HTML that's in there. That's kind of neat. The the thing that I really liked the that is the simple part, though, is to be able to strip stuff and pipe it to grep and things like that. So this is handy.

00:07:56 Nice. Thomas, what do you think? Oh, this

00:07:59 is great. I don't really use notebooks all that much to be honest with you. So it's a little bit lost on me. But more command line is absolutely good. It looks It looks delicious.

00:08:11 Yeah, it does. It's the terminal, the two E's, the terminal user interfaces are definitely come on strong these days. We forgot to ask you what kind of Python do you do? But what's your flavor of Python? Like? Are you building API's? Are you Oh, yes. Science, like what kind of?

00:08:26 Well, the Piper project is what consumes most of my hours? So I guess that's normal ish Python, as opposed to notification function. Or data science? I don't really do too much either. So it's mostly traditional style program programming.

00:08:44 Yeah, got it. All right. Well, your topic is up next. Tell us about it.

00:08:47 Well, funnily enough, this is very traditional programming. What what I bring for you for your delectation is by fake Fs, which I think is a sadly, relatively unknown, open source library. And I'd like to give them some props and recognition, because I think it's amazing. And it's made a huge difference to me on my own code and the Piper project. So hopefully, this helps out some other people. Now, what it is, is a fake file system. So in a nutshell, it intercepts all calls from Python to the actual file system. So if you think of the open function, the built in open that is, or sh util or path lib, all of those that might have real world side effects. In terms of the the desk. The fake file system will intercept these, and this is completely transparent. And which is to say that your functional code doesn't need to know about this. So the patching happens without you needing to inject something or without you needing to go and alter your actual code to take countenance of the system. Now, what's great about this is the moment you start talking about testing a file system, you're almost by definition in integration Some testing or functional testing to write, like it's not a unit test anymore, which comes with its own disadvantages. So if you do want a unit test, then let's consider a simplistic example, right? If you want to, if your code under test writes an output file. So first of all, you need to patch all that, if you're in your unit testing framework, we have something like mock open. But secondly, you probably have a path lib in there somewhere where you're either creating the parent directories for the path to check that they exist before you try and write to that location. So now we already have two things, we have to patch out. And then on top of that, you might be doing it in a loop, you might be writing more than one file, and the testing becomes very clumsy very quickly. Whereas once you use the PI fake Fs library, you can just write as normal validate against that file system using the standard Python inputs. And what you end up with is, and once the test finishes, it all just goes out of scope. And you don't even need to bother cleaning it up. What

00:11:01 Yeah, that's cool. And you could specify the string that is the contents of the file. So when the thing reads it, you can control the website.

00:11:08 So it comes with a and Brian, you're going to love this, it comes with a super handy play test fixture. So if you're using fighters, which you should, you can just add the FS fixture to your unit test. And now everything in your in your unit test will be going to the fake file system rather than the real underlying flex file system. That's pretty cool. Yeah, and the helper functions allows you like you were hinting at, like, you can specify encodings you can write in binary, it's super useful. Something else that I use quite a lot is the ability to switch between Linux, Mac and Windows file systems, which again, for Piper is such a boon to be able to test the cross platform compatible. Oh,

00:11:51 interesting. So if it asks for, like the representation from a path lib thing, it'll do C colon backslash instead of forward slash, Yep,

00:11:59 exactly. Right. So all of these things are, you know, I got I'm relatively conservative when it comes to pulling in new libraries, because I'm, especially if the library feels heavy, and I feel I can do it just using standard lib functionality. And also, with some libraries, I'm a little bit worried that they might stop being maintained or something like that. But pi fg Fs has been around since 2006, developed by Google, it was open sourced in 2011. The maintainer was already on it. I submitted and adiPure merged earlier this year, within an afternoon on a Saturday, which for open source is, yeah, very quickly. So they're on top of it. Great project, check it out on GitHub, check it check out the documentation to it's well documented. And it's super useful.

00:12:49 And I was looking at the tax any it looks like it's test. It's tested to be compatible with pi pi also, which is kind of nice. Yep.

00:12:56 Yeah, absolutely. Especially for what I'm doing in Piper, were wrangling configuration files is a lot of the functionality as a task runner, you're forever reading Jason writing out Yamo. converting between formats, converting between encodings, swapping out values and side configuration files, merging configuration files. And I'm now able to test all this stuff without having to write integration tests for each and every permutation which has been such a boon. This actually

00:13:26 does way more than I thought it did. This is I'm going to check this out. This is neat.

00:13:30 Yeah, there's a lot of cool stuff there. Absolutely. And yeah, and it also if you've Chris, and our both think, pretty, pretty neat out there. They're digging.

00:13:40 Yeah, I know, see the comments there. It is, like 10 paths with the difference that it's not actually writing to the desk itself, of course. And what's also a little bit difficult when you're using the temp directory and the temp file modules is, depending on how you're testing, it doesn't always help you very much, because the thing that might be generating the file might be the code under test. So you're effectively going to have to intercept that and create a temp file to attach to it. And then the temple will clean itself out. But that starts interrupting, interrupting the flow to functional code so much that I stopped questioning whether it's even a useful unit test anymore.

00:14:18 Yeah, absolutely. Well, very cool. So, Brian, before we move on, let me tell you about our sponsor. All right. All right. This episode of Python bytes is brought to you by Microsoft for startups founders hub, starting a business is hard. By some estimates, over 90% of startups will go out of business in just their first year. With that in mind, Microsoft for startups set out to understand what startups need to be successful and to create a digital platform to help them overcome those challenges. Microsoft for startups founders hub was born founders hub provides all founders at any stage with free resources to solve their startup challenges. The platform provides technology benefits, access to access For guidance in skilled resources, mentorship and networking connections, and much more, unlike others in the industry, Microsoft for startups founders hub doesn't require startups to be investor backed, or third party validated to participate. Founders hub is truly open to all, too. What do you get if you join them, you speed up your development with free access to GitHub and Microsoft Cloud computing resources, and the ability to unlock more credits over time to help your startup innovate founders hub is partnering with innovative companies like open AI, a global leader in AI research and development to provide exclusive benefits and discounts through Microsoft for startups founders hub, becoming a founder is no longer about who you know, you'll have access to their mentorship network, giving you a pool of hundreds of vendors across a range of disciplines and areas like idea validation, fundraising, management, and coaching, sales and marketing, as well as specific technical stress points, you'll be able to book a one on one meeting with the mentors, many of whom are former founders themselves. Make your idea a reality today with the critical support you'll get from founders hub, to join the program, just visit Python bytes.fm/founders hub, all one word, the links in the show notes. Thank you to Microsoft for supporting the show. Awesome. Thank you, Microsoft. Now, let me tell you about something that sounds incredibly simple. But as you kind of unwind it, you're like, wait, it does that too. Oh, it does that too. Oh, that's kind of cool. So pretty similar to the fake file system that Thomas was just telling us about this thing called sternum sternum is a fantastic name. It's short for string Ium, right. iums, when we're enums added was at three, four, something like that a little while ago. So enums have been in Python for a while. Pretty much pre history now that those are no longer supported. And with enums, you can write cool code that says this class, its fields are enumerations. And then you can say, you know, enough type dot enum value, and you can use that instead of magic words. So, for example, you might have HTTP method, or something like that, let's say HTTP status, start with that one, because that's like a built in type thing you could do easily, you could have a 200, a two, a one, a 400, a 504. For those kinds of things, you could have a like HTTP statuses, dot, and then those types with those numbers, right. But there's a couple of challenges to working with those. Their natural representation is a number, not a string. And I know you can derive from innum. And then also derived from string, but like I said, more stuff happening than just that to this sternum allows you to create enums, like that and use the enum auto name dot auto field. So I can say, here's an HTTP method with like verbs is really probably what it should be. So you have a get you have a head and a post and a put, and you just say, auto, auto, auto auto, but the actual representation is that the get is the string get. And the like, put monitor post is, you know, put or post. Yeah, and Alvaro is out there pointing out. Thank you, that sternum was temporarily part of 310, but that it was dropped. So there was

00:18:16 I saw a note that it might be included in 311. Again,

00:18:19 okay, that'd be fantastic. It would be Yeah, so there's some really neat stuff in here. For example, one of the things that's nice is because this thing basically has the value string, where you're using it, you can actually use it where a string would be accepted. So here, if you're doing a request to a URL, and you got to say method equals here, you can say method equals HTTP method, dot head, or whatever, from the name and it directly passes just the string head to the method. So it's a really nice way to like gather up string values that are like part of a group, right, like HTTP verbs or something like that. Wow. So that's pretty neat. Okay,

00:18:56 the side question is, I don't really use auto much is auto used anywhere else? Or is auto, just a need comes out of

00:19:03 the new module. Okay. So it's, so it's part of the new thing, right? And one of the things I really like about this, that is a super tricky with a numerous databases. So for example, imagine we had, we had like, get head and posts and we just had auto, but it was an integer based one. So it's like 123. And we store it in the database, right as a one or two or three, and then you parse it back fine. But then somebody adds another auto thing in there, and they don't put it at the end. They're like, Oh, this one starts with a D. So it goes after Delete. Yeah, well, all the stuff after that one is now off by one in the database, right? Like this. If it goes into the database, it goes in as a string. It'll parse back as the string also has cool stuff like lowercase, sternum, and uppercase string, you know, so you can derive from that instead. And then no matter how you define your field, you get a lowercase string version or one uppercase string version. Okay. And there's there's other cases as well, there's Pascal case, snake case, kebab case, macro case, and camel case will go crazy on Fievel. And you can have the same code, but then like the string representation varies. So that's, that's pretty awesome.

00:20:19 I think I'm gonna go with kabob case just because that's what this is. So fun I

00:20:23 know. And then yet, you can also directly assign the value could so you know innum value equals some string and then it like, right, you don't have to worry about a casing. That's exactly the string that you put. Yeah. All right. So there it is. It's like regular noon, but strings. And as people pointed out that it's it's not that different from what people have been considering for C Python. I'm pretty sure I'd heard about it as well and being in there, but the fact that it's not there, and maybe it'll be there. And maybe not, we'll see. It's interesting. But this has a lot of cool features. And if you're not using 311, or one to depend upon it. Yeah, this is a small little project. Yeah. It's nice. Thomas, what do you think?

00:21:05 This is great. I especially like how you can how it auto it's smart enough to autocast. So that we use the Inami. Just it's it will end up translating to a string when you're actually hitting the database or your underlying API.

00:21:19 Yeah, it makes it actually usable in those situations just directly, yeah. Which I think is, is great.

00:21:24 And funnily enough, the example they chose was so great by way of great documentation, because HTTP verbs are just almost the, the example of magic strings, right?

00:21:34 Yeah, exactly. Exactly. Yeah. Right. Cool. All right. Right over Do you

00:21:39 would like to review your code a little bit? No. I don't know. I was trying to do a transition thing on. But so Tim Hopper wrote this, this article, which I absolutely love, and it's called code review guidelines for data science teams. And I just recommend everybody go read it. It's, it's short, it's good. But one of the things I really like that he highlighted is before he got into code, the code review or the code review guidelines. He he started with, why are we doing a code review? What is the code review for? And this is something I think that is important just to talk with whoever whatever team is going on. And talking, maybe even sticking it in a participation guideline, in a project open source project even is that it's not just, it's not just so that we can look at the code or you know, check it, merge it. So his reasons for a code review are first code correctness. And that's, that's what we think about is making sure the code is correct. But also code familiar, like familiarity. So you might be the expert on a project, and everybody else is only kind of new on it, you still should have code reviews for your code changes so that everybody else can, you know, watch also, and, and, and get familiar with the changes going on. So that's nice. Design feedback, of course, and mutual learning, and regression protection are all three reasons why he did a code review, and in what he has, the other thing I also love, is what to leave out of code review. So code reviews are not about trying to impose your guidelines on somebody else. And they're, and they're also not a reason to push off responsibility. So as long as your code is getting reviewed, it doesn't have to be correct, right? Because every time somebody will catch any problems, it's a bad thing to do in a code review. So make sure your codes correct that as far as it's all cleaned up. As soon as you what you think is it's ready. And then submit it, but then also be nice. So being nice is important. Yeah, okay, cool. So then it goes, he goes through, I'm not going to go through all these here. But he goes through different things about what to think about before you do a create a pull request, and then what to do if you're reviewing a pull request. And a lot of these are just, they're just around being a kind human to the person on the other end. So it's really kind of what it's about.

00:24:14 I saw I mentioned in there somewhere that I really liked, which is I mean by nature code review is sort of nitpicky, right? You're paying attention to flaws. But it's nice to compliment also, like if there's something nifty or cool or cute. Acknowledge compliment, call attention to it.

00:24:30 Oh, that's a that's a good point. And I really like that. I also think so one of the things that you don't want to do in a code review is like one of the guidelines is is you we're not looking for perfection. We're just it's got to, you know, that isn't one of the things we're looking for. But so what happens if you notice something and you're like, so weird, it does it? I'd like to say something about it, but I don't know how to say that. His comment is to have if you've got a minor thing You want to comment on, go ahead and sort of tag it, he recommends tagging it with nit in it for a nitpick or something. Just to be clear that I'm, I don't know if I like the word nit. But to be clear, hey, I noticed this, maybe we want to change this in the future, somehow indicate to the person that they don't need to fix this before the PR gets merged. You're just noticed it. So and it might be something that the person that submitting the PR, didn't realize in the first place and went, Oh, yeah, I don't like that. Either. I'm going to fix it or Yes, I do know about that. And I do plan on fixing it later, or what, you know, whatever. So just an interesting guideline, and I think it can just, I'm kind of a been on a kick lately of reading things about community and, and creating cohesive teams, and the review processes, definitely some somewhere to you need to have attention to, for most teams. So anyway, that's it.

00:25:58 Yeah, like it. This is really handy. I love the idea of having, as much as possible, have the automation, make the complaints, definitely, like Thomas said, Have the people give the compliments and the sort of interesting discussion, right, but like, black can just take care of the formatting, like you shouldn't have to debate the formatting. Yeah. And if a lender can tell you, you know what, there's something wrong with this, just like let the lender be the bad guy.

00:26:21 Yeah, it was one of the guidelines that he brought up, which is interesting is, especially with CI, and we're pushing a lot of things on black or linters. That to wait. So wait a little bit. So don't don't like review code review right away. Especially not if the CI hasn't finished, let the CI finish and let the person creating it fix anything before you jump in. I also pet peeve of mine, don't comment on it right away, I might. One of the things I do frequently is all created a PR especially for in a work setting, create a PR and then I there's some complicated things. So I plan on going through and writing some comments around some of the complicated bits, like why did I do certain things. And so if you see a PR right away, especially for me, wait 10 minutes or so before commenting on it? Because I might I might have answered your question before you get a chance to ask

00:27:21 an explanation might become an Yeah, indeed. Anyway. Awesome. All right, Thomas. over you.

00:27:27 We're about to head into controversy. Because there's been there's been some discussion, are you

00:27:33 gonna bash on something Come on, I'm gonna brush it over the head with a

00:27:38 like a caveman, bash it with Python. So partly uninspired and the continuation of last week's discussion, you heard about running sub processes from Python. And it Mr. Turner towering wrote an article this week called please, please, emphasis mine stop writing shell scripts. Now this, as you might imagine, raise the bit of questions on the usual places like Reddit and Twitter. But if nothing else, controversy aside, the article is a very good and succinct summary of the most common gotchas and problems with bash, which we can almost all summarize as that error handling is strange, if you're used to other programming languages, like Bash is a kingdom onto its own when it comes to programming languages. So he also gives a great recommendation for if you really, really have to write in bash, what you might want to do. And that would be to use the unofficial bash, strict mode, which basically involves setting up a lot of boilerplate on top of your bash, I'm not going to cover all the details, but basically, the under you option will fail immediately on error, or it will fail on unsaid variables. And if you add the pipe file option, errors won't pass between pipes, a pipe will actually fail immediately if there's an error process.

00:29:05 Awesome. Mike, it should like

00:29:06 age should indeed. But the point is, is that is an old technology. And there's a lot of problems there. And let me add, although this article mostly aims at bash, I am very happy, including born and SSH, and fish, take a peek underneath the same data. Now he goes on to talk about the typical reasons we hear of why we should be using bash, of which the top one is, well, it's the most common, you're guaranteed to have an sh runtime at least on any given machine that you're going to be using. But the point is not really. Because when we're doing code automation, almost by definition, the programming language or coding in its runtime is on the server. So this argument that somehow it's good to go to the lowest common denominator aka sh or bash, when you already have bifen on the machine is sort of well, why. And especially when we're talking about Python, which is so great at automation, it just baffles the mind.

00:30:12 It's a good point there. You don't have to set up a compiler or any of that kind of business, I say

00:30:16 to something about go that I mean, by definition, if when you're compiling, go, the Go compiler is right there, you might as well be writing a go script, or whichever your programming languages. I mean, maybe if you're starting to talk about like C, or C++, there's, um, there's maybe a different argument that we can have there. The second point is he brings up is what I'm going to paraphrase as get good, which is this bash guru response, which we saw a bit often the last week, that you're just bad at bash. Like, if you were better at bash, you wouldn't be complaining about these things, which, you know, is not a great reason. It's, you know, just because it's not better because it's hard, right? We have better tools available, we have tools that behave more responsibly, and something that I think is very important, in line with what you've been talking about, Brian, about building teams, is very often that your automation activities start becoming this specialized zone that only two or three people on the team can even look at, because they're the batch gurus, and everyone else was too afraid to touch it. Whereas if you keep the automation activities within the language, you're coding, and suddenly everyone on the team team can start carrying their weight, right? Yeah,

00:31:31 I kind of relate to this a lot. I have been on projects where we've had a lot of our automation in bash, and others that have been other other languages. Right now. It was one of those things of if especially if you're not, if you're not looking on a Windows environment, bash isn't there all automatically, so and a lot of the team members might not be familiar with it. So the thing that I don't know if he addresses this, the thing that was I was thinking about was, we all know Python, if we're programming Python, but we might not all know the autumn, the like the automation parts of it, though, the way to do like file manipulation, or

00:32:13 write the SH Yeah, detail. And that that's, that's stuff that

00:32:17 we might be familiar with, with bash, because we, if we're using it all the time on the command line, I already know how to do it. But But I might not know how to do that sort of stuff in Python, because I'm not using Python like that. But anyway, well,

00:32:32 my response to that would be that whatever the thing is, that you don't know how to do in blijven, your chances of running into trouble with bash, or to my mind a lot higher than they are with Python. Or at least when things misbehave in Python, your control of flow is better, so that you probably will have a, especially as the scripts start getting bigger, you will have better control over where the issues might be. Or you would be better able to isolate those areas that you're not exactly sure of. I saw someone in chat last week raise the specter of make files that call shell scripts that call make files. And I mean, this is not uncommon. I'm sure we've all seen these things. And I'm actually very interested in the psychology around us. Because we're all coders, right? I assume we're here because we enjoy automating things, we enjoy solving problems, we probably, you know, have a certain problem solving sort of mindset that God has entered us to begin with. Yet, it seems like we spend so much time automating our customers business processes that we forget to automate or encoding processes. Or when we do we d allocate the priority we d budgeted, we end up focusing on all sorts of other things other than this essential housekeeping.

00:33:50 Yeah, or treat it like throwaway code instead, that needs to be carefully factored in.

00:33:55 Exactly right. I would argue it's a bit like housekeeping. You know, no one likes doing it. But if you don't want to live in a big style, you got to do it, you know, instead. Yeah. Well,

00:34:05 also, to be honest, I was there once of like, I don't know how to do this automation stuff in Python. But it bugged me that I didn't know how. So I was like, Okay, well, what do I need to learn? Like the the few things like searching for stuff, like I normally would have used Perl for regex, or something like that, or said, all that stuff you can do with Python? And actually, there's tons of articles on it, it's really not that hard to go. Okay, the the pieces I missing? How do I do that? And just go learn it. And, and then it's not that hard to switch a lot of automation to Python.

00:34:38 Yeah, definitely not. And, I mean, so much other automation happens in Python anyway. I mean, in fact, kind of compiled programming languages will often use Python as an automation language. It's so handy for the automation process. There's a number of psychological thing which I find, or I think it's a psychological thing, but I find quite curious here which is this dealing with complex shell scripts always becomes this like technocratic rite of passage where when you couple that with imposter syndrome, you know, it's very easy to be intimidated by the bash bros when they do these really clever one liner bash isms that you can't make head or tail head or tail off. And it's like, yeah, look how clever This is. But it's very hard to maintain you don't you know, and it's, it's almost hard to call that to account unless you're very sure of yourself. Because you almost have to justify yourself as a as to why you dislike it like you first have to prove your bottom feeders. I think it's sort of the tech equivalent of, you know, back in my day, like, we didn't have x, you know, like, whatever x is shoe shoes or toilet paper or, like, whatever. Just because something used to be difficult doesn't mean it needs to be difficult forevermore, right? Yeah. Like, the extra difficulty doesn't make it better. It's not a video game like Elden ring. You know, like, the easier this is, the more quickly and effectively you can do the housekeeping, the more you can get up with the features that actually pay the bills, which is to say the shiny functional stuff that you can demo and put in front of customers.

00:36:07 Yeah, absolutely. I have some real time feedback and also a comment for you. Aveiro says, there's a VS code plug in called Shellshock, if he's remembering correctly, tells me when I'm doing something wrong or might blow up. There's also a plugin for PI charm. So if you're going to do it, you don't have those things for sure.

00:36:24 Yeah, funnily enough, we've got immediate feedback for that, which is the author of the original article mentions shell check, which is effectively like, like the comments are mentioned a linter for bash by the reviewer. But the article also mentions that it doesn't actually catch all things either. So like all linters, it can very easily lull you into a false sense of security. While it's not really necessarily addressing the underlying problems, and I almost feel like I don't even need to say this. Because anyone who's ever tried to debug a long bash script should know this. They're tricky. They fail in mysterious places. And it's very hard to figure out why and how, and yeah,

00:37:04 but I do like the the this article pointing out how if you have to set up those flags to make it, you know, fail quicker. Yeah. Because that helps a lot. So it's nice.

00:37:15 Yeah, yeah, for sure. And also, just to be to give the author massive amounts of credit, this isn't clickbait. He didn't position this as never ever use bash. In fact, he explicitly says that and okay, if you're doing something super simplistic, like the typical sorts of things that goes into a get hook, pre commit hook, where you're just running a command or two, then yeah, sure, of course, shell scripts. Fine. But I would say as soon as you're running loops, as soon as you're doing conditional branching out, as soon as you're worried about retries, as soon as you're doing,

00:37:46 definitely switch to Python. Absolutely. Yeah. Yeah.

00:37:50 And then another quick question. Just a quick follow up, have you considered conch?

00:37:55 I've not even heard of one considered it. So

00:37:59 it's, I haven't done much with I've sort of looked at it. It is a shell, like a competitor to bash or Z shell or something like that. Where it's a proper Python environment directly in the shell.

00:38:13 That's almost PowerShell esque. Yeah,

00:38:17 it's a little bit like PowerShell, or PowerShell is like, kind of dotnet C sharp, like kind of, but not really. I suspect it's similar here.

00:38:23 But and I know it's supposed to be pronounced conch, but my brain says Zamp, because it's funner to say

00:38:30 watching I know, but it has the shell it has the shell. So you know, that's how you got to say

00:38:35 that even for the logo?

00:38:38 They do. Indeed they do. Indeed. Why? Well, cool. Thomas, that was a good conversation.

00:38:44 So driven extras. So Michael, do you have any extras?

00:38:48 You know, you know, I got extra right. I also first real quick follow up real time follow up from Henry shiner and audience that PEP 663 was the PEP around string Ainun. Okay, and he's not sure if we're moving the support for that PEP means removing the string and him from the standard lib or not, though, doesn't do all the other stuff like the casein and the various other things that that cool package, I talked about this. So maybe that package is no matter what relevance still or inspiration for the next one or whatever. In terms of extras. I do have some extras. Let me see what or I wanted to cover the man. I had to but then one got rescheduled. This is supposed to be the the transformation from bugs.python.org over to GitHub, but that got pushed back a week. So I'm not gonna talk about that. You just did. So well. So I was gonna say it's happening. It should have happened by the time you hear this, go check it out. Okay. Not true anymore.

00:39:41 Oh, okay. Just if you're curious, supposedly, it's moved to April 1, but it's it's April Fool's Day, so I'm not sure if it's really gonna happen. Or

00:39:50 maybe it's a long con, where the joke is being set up or on at once.

00:39:55 Oh, we're actually never doing this now. I'm looking forward to that happening. That's great. All right. I just have like a general theme of sort of stuff that it's like they're all together kind of a changing of the guard if you will. Let's see here. So I have been switching so much my software stuff around. I've started using Vivaldi. Now I've been using Firefox for a long time I've started using Vivaldi, which I think is a really neat take on a browser, so switched over to Vivaldi and start using that. You know, there's a bunch of different things like Mozilla laid off 250 people recently or oxen

00:40:28 get their tools team to, which was

00:40:30 just exactly cut the Developer Tools team. They cut the threat team, a team that looks for like, a tactic. It's like, huh, I don't know, it's starting to make me a little nervous. So I'm trying to have a volley. I've been doing that for like a month or so. And I'm, I'm enjoying that. Right.

00:40:47 Like you said, it's a it's a different take on a browser like so it sounds like there's something conceptually different about it. It's just

00:40:55 super customizable. I think that's nothing. It's like there's just all sorts of stuff. It comes with a built in ad blockers and tracker blockers. I know some do tracker blockers, but built in ad blockers. Nice. I mean, Brave is the other one that kind of does that but Braves like well, let's just trade those ads for our cryptocurrency ads that we'll put in there for you and you get a little bit of cryptocurrency this is like that will just block the ads. So anyway, I switched over to that partly motivated by just concern around this, but also just wanting to try some stuff out from Google Docs over to Zoho for other stuff. And for like, business email, there's so interesting stuff going on there. And then like also Duck Duck go. I've been using that for a while now. I tried that a while ago. It just didn't feel like you switch to me now. There's just like, almost no difference in the quality compared to Google. These days, where it used to be I tried like I'm I have to go to Google for that. Like, no, it's several times a day. Now. I don't really if I get stuck here. Usually I tried to go to Google and get it and like it's still stuck. So just got to deal with it. So that's it for all my items. I'm just going to tell him a joke. Thomas, you got anything extra you want to share? They're out there to the world?

00:42:00 Not particularly. I'm looking forward to a quick shout out to Piper real cool. Yeah, um, check out last week's episode.

00:42:06 I know we covered it last week. But yeah,

00:42:07 I actually did as good an introduction to Piper as I could give. So congratulations, and well done. Thank you do want to check it out. Support open source software, do the usual Share, Like Subscribe, all the rest of it. You can check it out on GitHub. It is the Piper autoscan RP ypy R. And incidentally, if you don't want to run bash scripts, then a task runner might be a might be a good way of not doing so.

00:42:35 Yeah, I was thinking about your project while you were talking about this.

00:42:39 I don't want to show too horribly. So I try to keep that to the end.

00:42:45 That's our job. We only show that we basically just show cool stuff all week. That's our podcast. Right? How about you got anything actually want to shout out there? Hey,

00:42:53 I've got some stuff but there's nothing I can share right now. So yeah, all

00:42:57 right. Well, well, we will be waiting How about we share a joke then and wrap it up? Sounds good. So I feel like this is a missed opportunity because we had Ian on last week and he was all about cybersecurity and using notebooks to track threats and stuff. Well has he considered this

00:43:16 that was a it's a James Bond movie right?

00:43:21 Could have been like so here's like a big server rack with just like 100 ethernet cables in in a big printed sign on says in case of cyber attack break class pull cables

00:43:34 I'll also say What surprises me the internet was going soft in its old age because back in my day haha. The first comments would have been complaining that the cables untidy enough you got to get a good grip on exactly

00:43:49 just one zippy, move the arm and you give it a Yank. And this is exactly

00:43:54 there's a lot of cables, they should put like orange tags on the ones that are important to pull or something.

00:43:59 Yeah, exactly. This is the sort of criticism that I would have expected it like

00:44:03 actually the entire the entire thing has a power switch just so power off the whole thing.

00:44:09 You want to lose data. I mean, come on. That's kidding.

00:44:12 Also, Where's where's the Ox? Well, how do you break the glass? Well,

00:44:15 exactly. Oh, yeah, they're just open the door handle

00:44:20 very not very thought. It reminds me a little bit of that in case fire. Get commit get push read.

00:44:27 You know also we're talking about it people who generally probably aren't you know that much into the pushing regime. So, you know,

00:44:34 or lifting axes then, you know, that might be strange. Sorry, I'm gonna get hate mail for that. We are.

00:44:43 Yes, indeed. Wow. I thought it was fun. Right.

00:44:47 So well. Thanks, everybody for having a fun episode again. And thank you, Thomas, for showing up. And Thanks, Michael. And thank you everybody in the chat for showing up. So we'll see you all next week. Bye, everyone. Bye, everyone.

