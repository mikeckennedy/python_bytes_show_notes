
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.360
to you by us over at TalkBython Training, and Brian through his pytest book.


00:00:10.360 --> 00:00:15.460
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.460 --> 00:00:17.320
over at TalkBython Training.


00:00:17.320 --> 00:00:21.040
Visit them via pythonbytes.fm/courses.


00:00:21.040 --> 00:00:25.420
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.420 --> 00:00:28.440
at pythonbytes.fm/pytest.


00:00:28.440 --> 00:00:29.440
Enjoy the episode.


00:00:29.440 --> 00:00:31.240
- Hello and welcome to Python Bytes,


00:00:31.240 --> 00:00:32.920
where we deliver Python news and headlines


00:00:32.920 --> 00:00:34.240
directly to your earbuds.


00:00:34.240 --> 00:00:39.240
This is episode 268, recorded January 26th, 2022.


00:00:39.240 --> 00:00:40.920
I'm Michael Kennedy.


00:00:40.920 --> 00:00:42.320
- And I'm Brian Aiken.


00:00:42.320 --> 00:00:44.280
- And I'm Madison Swain-Bowden.


00:00:44.280 --> 00:00:46.320
- Hey Madison, great to have you here.


00:00:46.320 --> 00:00:48.200
- So fantastic to be here.


00:00:48.200 --> 00:00:51.120
- Yeah, yeah, we talked to you before PyCascades,


00:00:51.120 --> 00:00:53.480
where you were on the hosting side.


00:00:53.480 --> 00:00:55.840
- That's right, tables are turned a little bit, yeah.


00:00:55.840 --> 00:00:57.320
- They absolutely have.


00:00:57.320 --> 00:00:58.520
So why don't you tell folks about yourself


00:00:58.520 --> 00:00:59.940
before we jump into the news.


00:00:59.940 --> 00:01:02.840
- Thanks, yeah, I am a senior data engineer


00:01:02.840 --> 00:01:04.900
at a company called Automatic.


00:01:04.900 --> 00:01:09.440
We do WordPress, which is surprisingly,


00:01:09.440 --> 00:01:14.280
I recently heard that it backs 40% of the internet.


00:01:14.280 --> 00:01:15.120
And so that was really surprising.


00:01:15.120 --> 00:01:16.760
- So much of the world is on WordPress.


00:01:16.760 --> 00:01:19.140
It's unbelievable. - I know, I know.


00:01:19.140 --> 00:01:21.560
Yeah, and I work with the Openverse team there,


00:01:21.560 --> 00:01:23.620
which I'll talk about a little bit later in the show.


00:01:23.620 --> 00:01:24.760
- Yeah, fantastic.


00:01:24.760 --> 00:01:25.740
- Cool. - Yeah.


00:01:25.740 --> 00:01:29.260
So Brian, shall you kick us off on the first thing?


00:01:29.260 --> 00:01:30.100
- Yeah, sure.


00:01:30.100 --> 00:01:31.500
- Something about parentheses.


00:01:31.500 --> 00:01:33.140
I like Python 'cause it generally doesn't have


00:01:33.140 --> 00:01:33.980
that many parentheses,


00:01:33.980 --> 00:01:36.620
but you were gonna tell us that it should have more.


00:01:36.620 --> 00:01:39.820
- Yes, well, we have more function calls, right?


00:01:39.820 --> 00:01:40.900
And tuples.


00:01:40.900 --> 00:01:43.740
So actually, because there's function calls and tuples,


00:01:43.740 --> 00:01:46.540
both use parentheses, there's a confusion that happens.


00:01:46.540 --> 00:01:49.940
And so I just saw this the other day,


00:01:49.940 --> 00:01:54.940
a PEP 679 was added, submitted by Pablo Salgado.


00:01:54.940 --> 00:01:59.460
Salgado to allow parentheses in the assert statements.


00:01:59.460 --> 00:02:02.640
So what happens like currently,


00:02:02.640 --> 00:02:03.880
I don't know if there's examples in here,


00:02:03.880 --> 00:02:08.300
but what happens currently is if you call assert,


00:02:08.300 --> 00:02:10.700
you're not supposed to use parentheses.


00:02:10.700 --> 00:02:12.240
Actually you can't right now.


00:02:12.240 --> 00:02:14.140
You can, but it's wrong.


00:02:14.140 --> 00:02:14.980
So if you--


00:02:14.980 --> 00:02:16.720
- It's one of those princess bride things,


00:02:16.720 --> 00:02:18.900
like that doesn't mean what you think it means.


00:02:18.900 --> 00:02:20.500
- It doesn't mean what you think it means.


00:02:20.500 --> 00:02:23.380
So what happens is you give assert,


00:02:23.380 --> 00:02:26.360
asserts a statement within Python,


00:02:26.360 --> 00:02:29.980
you give it an expression to evaluate,


00:02:29.980 --> 00:02:32.300
and you can also give it a comment,


00:02:32.300 --> 00:02:36.260
like a string to add a message if the failure happens.


00:02:36.260 --> 00:02:38.880
But what happens is sometimes people think


00:02:38.880 --> 00:02:42.260
it's like a function and put those within parentheses,


00:02:42.260 --> 00:02:43.540
and it looks like a function call,


00:02:43.540 --> 00:02:45.340
and it looks visually fine,


00:02:45.340 --> 00:02:49.060
but what happens is it doesn't matter


00:02:49.060 --> 00:02:51.740
what the expression evaluates to,


00:02:51.740 --> 00:02:56.180
because it's a two value tuple,


00:02:56.180 --> 00:02:57.740
and especially if you got a string in there,


00:02:57.740 --> 00:03:00.180
the string's not non-zero.


00:03:00.180 --> 00:03:01.020
- Yeah.


00:03:01.020 --> 00:03:03.260
- So the tuple evaluates to a true value,


00:03:03.260 --> 00:03:05.620
and your assert never fails.


00:03:05.620 --> 00:03:07.580
And--


00:03:07.580 --> 00:03:10.540
- The tuple is never none, and so you're good to go.


00:03:10.540 --> 00:03:11.380
- Yeah.


00:03:11.380 --> 00:03:12.940
- Well, it's a good way to have some passing tests.


00:03:12.940 --> 00:03:16.460
- Yeah, I feel like this is one of those Python gotchas.


00:03:16.460 --> 00:03:19.100
Like if you have one, and if you assign a variable


00:03:19.100 --> 00:03:22.780
to one comma, then you get a tuple instead of just the one,


00:03:22.780 --> 00:03:24.020
right? - Yes.


00:03:24.020 --> 00:03:26.700
- And particularly with print being changed


00:03:26.700 --> 00:03:28.960
from a statement to a function,


00:03:28.960 --> 00:03:32.140
I think it like makes a lot of sense for people to assume


00:03:32.140 --> 00:03:34.580
that assert is also a function.


00:03:34.580 --> 00:03:38.060
And it's kind of an odd duckling in the language


00:03:38.060 --> 00:03:39.580
because it is just a keyword.


00:03:39.580 --> 00:03:42.820
- So this PEP is just to say, let's allow both.


00:03:42.820 --> 00:03:46.140
Let's go ahead, because right now there's no real reason


00:03:46.140 --> 00:03:51.140
to pass in a tuple as a full expression.


00:03:51.140 --> 00:03:53.660
It just doesn't, it's always gonna be true.


00:03:53.660 --> 00:03:54.600
It's a no op.


00:03:54.600 --> 00:03:57.260
So let's go ahead and add that to the language


00:03:57.260 --> 00:03:59.960
and allow people to call it as a function if they want to.


00:03:59.960 --> 00:04:01.940
And there's ASTs around it


00:04:01.940 --> 00:04:06.000
to make it basically be the same thing.


00:04:06.000 --> 00:04:07.740
I think this is a no brainer.


00:04:07.740 --> 00:04:10.560
I think we should just get it done as soon as possible.


00:04:10.560 --> 00:04:13.360
Hopefully we can get it in to then 3.11 or 3.12


00:04:13.360 --> 00:04:14.760
or something like that.


00:04:14.760 --> 00:04:21.760
I wonder too if having it as a function might help with autocomplete and some IDEs.


00:04:21.760 --> 00:04:24.000
Because I think right now when you do the assert,


00:04:24.000 --> 00:04:27.420
you don't get that suggested arguments or


00:04:27.420 --> 00:04:30.480
suggested parameters that you do with a function.


00:04:30.480 --> 00:04:31.920
So it might help there.


00:04:31.920 --> 00:04:33.000
>> Yeah.


00:04:33.000 --> 00:04:35.320
>> If you're trying to put too many things in there,


00:04:35.320 --> 00:04:36.000
it won't tell you.


00:04:36.000 --> 00:04:36.520
>> Exactly.


00:04:36.520 --> 00:04:37.720
>> That it's wrong, all those things.


00:04:37.720 --> 00:04:40.240
>> Yeah. Hopefully, this will go through.


00:04:40.240 --> 00:04:42.080
>> I hope so as well.


00:04:42.080 --> 00:04:44.600
So let's talk about LocalGhost.


00:04:44.600 --> 00:04:49.280
So LocalGhost is a blog by,


00:04:49.280 --> 00:04:50.720
let me get the name right here,


00:04:50.720 --> 00:04:52.000
by Sophie Kunin.


00:04:52.000 --> 00:04:55.640
And she blogged or wrote about everything I


00:04:55.640 --> 00:04:59.160
Googled in a week as a professional software engineer.


00:04:59.160 --> 00:04:59.760
>> Oh, cool.


00:04:59.760 --> 00:05:02.680
>> So I wanted to highlight this because there's a lot of


00:05:02.680 --> 00:05:05.000
folks out there who listen to the show and just are in


00:05:05.000 --> 00:05:08.880
the industry who feel like they don't quite add up,


00:05:08.880 --> 00:05:10.280
or they don't belong, or whatever,


00:05:10.280 --> 00:05:12.140
because they feel like they get stuck and lost


00:05:12.140 --> 00:05:13.920
and banging off things, you know?


00:05:13.920 --> 00:05:16.020
And I can tell you, we were just talking about it


00:05:16.020 --> 00:05:17.460
last time with a joke, right, Brian?


00:05:17.460 --> 00:05:19.260
Like, I hate programming, I hate programming,


00:05:19.260 --> 00:05:20.780
I hate programming, it works, I love programming.


00:05:20.780 --> 00:05:22.740
But the hate part, there's a lot of searching,


00:05:22.740 --> 00:05:25.420
a lot of Googling and bouncing around from that.


00:05:25.420 --> 00:05:29.540
And so here's just another pro software developer,


00:05:29.540 --> 00:05:31.540
pro in the sense it's her job,


00:05:31.540 --> 00:05:32.940
and she's been doing it for a while.


00:05:32.940 --> 00:05:35.100
And it just talks about like, okay, what did I do?


00:05:35.100 --> 00:05:38.100
So what she searches is slightly different


00:05:38.100 --> 00:05:39.460
than what we would search


00:05:39.460 --> 00:05:42.940
because she mostly is a front end and node,


00:05:42.940 --> 00:05:45.140
mostly JavaScript type of developer,


00:05:45.140 --> 00:05:45.980
but it doesn't really matter.


00:05:45.980 --> 00:05:48.460
You can sort of see there's some basic stuff.


00:05:48.460 --> 00:05:50.520
NPM React testing library.


00:05:50.520 --> 00:05:52.860
And what's nice is she puts a little comment


00:05:52.860 --> 00:05:53.820
behind a lot of these like,


00:05:53.820 --> 00:05:55.260
why did she search for this?


00:05:55.260 --> 00:05:56.100
Not just the word.


00:05:56.100 --> 00:05:57.220
Like during a React upgrade,


00:05:57.220 --> 00:05:59.300
looking at dependencies to see the latest versions


00:05:59.300 --> 00:06:01.740
and checking for breaking changes.


00:06:01.740 --> 00:06:04.580
And then React Apollo release notes, totally normal.


00:06:04.580 --> 00:06:07.080
And then undo a rebase, oops.


00:06:09.340 --> 00:06:11.060
I think we've all been there.


00:06:11.060 --> 00:06:12.020
- Yeah, exactly.


00:06:12.020 --> 00:06:13.620
Or just silence warning.


00:06:13.620 --> 00:06:15.340
Or maybe it's undo commit.


00:06:15.340 --> 00:06:16.380
No, what did I do?


00:06:16.380 --> 00:06:19.020
I can't push this.


00:06:19.020 --> 00:06:20.660
Just silence warning.


00:06:20.660 --> 00:06:22.020
Don't judge me, okay?


00:06:22.020 --> 00:06:23.820
So there's a bunch of interesting things


00:06:23.820 --> 00:06:26.220
and it kind of goes along there.


00:06:26.220 --> 00:06:27.220
So you all can look through it.


00:06:27.220 --> 00:06:28.900
I don't want to go through all the details


00:06:28.900 --> 00:06:30.300
because there's just a lot of stuff.


00:06:30.300 --> 00:06:32.100
What were you going to point out there, Madison?


00:06:32.100 --> 00:06:35.420
- No, it's just a lot of fun and interesting searches.


00:06:35.420 --> 00:06:37.940
And I think like if we were all to do this sort of analysis


00:06:37.940 --> 00:06:40.860
for ourselves, it would be kind of an interesting retrospective.


00:06:40.860 --> 00:06:42.620
>> It would be super interesting, yeah.


00:06:42.620 --> 00:06:44.860
Like what surprised you most about your search history?


00:06:44.860 --> 00:06:49.980
Let's see, there's a few, I think one on Friday down here at the end of the week.


00:06:49.980 --> 00:06:53.180
That was, yeah, I put my notes, I'll pull it up down here.


00:06:53.180 --> 00:06:58.060
So one that I thought was interesting was she searched for


00:06:58.060 --> 00:07:01.340
expecting a parsed GraphQL document.


00:07:01.340 --> 00:07:06.540
Perhaps you need to wrap the query in a string, quote, GQL tag.


00:07:06.540 --> 00:07:09.060
And the content of that's not super interesting,


00:07:09.060 --> 00:07:13.140
but what that is exactly an exception message, right?


00:07:13.140 --> 00:07:14.700
In some sort of code.


00:07:14.700 --> 00:07:16.420
And for people who don't do this,


00:07:16.420 --> 00:07:18.180
you should take the error messages


00:07:18.180 --> 00:07:19.580
and put them straight into Google


00:07:19.580 --> 00:07:20.980
or straight into DuckDuckGo


00:07:20.980 --> 00:07:22.580
or wherever you put search things.


00:07:22.580 --> 00:07:23.980
And it is so good.


00:07:23.980 --> 00:07:25.340
- With quotes. - With finding the problems.


00:07:25.340 --> 00:07:26.580
With, yeah, exactly.


00:07:26.580 --> 00:07:28.740
And maybe quotes on the really important bits, right?


00:07:28.740 --> 00:07:30.340
Like I really wanna make sure it's GraphQL


00:07:30.340 --> 00:07:31.880
and not some other document or something.


00:07:31.880 --> 00:07:33.980
- I would say half the time when I do that,


00:07:33.980 --> 00:07:36.340
it takes me exactly to the GitHub issue


00:07:36.340 --> 00:07:38.880
that describes the problem that I'm experiencing.


00:07:38.880 --> 00:07:42.200
- It's surprisingly effective, isn't it?


00:07:42.200 --> 00:07:43.040
- Absolutely.


00:07:43.040 --> 00:07:44.240
- It's like, why is this work so well?


00:07:44.240 --> 00:07:47.320
The thing that blew my mind most once is I had a friend,


00:07:47.320 --> 00:07:50.720
this is way back, I mean, we're talking like early 2000s.


00:07:50.720 --> 00:07:53.860
He was using Outlook, don't judge him, it was a long time ago


00:07:53.860 --> 00:07:56.180
and he was using Outlook and it was just stopped working.


00:07:56.180 --> 00:07:57.460
It gave him some weird error


00:07:57.460 --> 00:07:59.560
that had almost no message, just a number.


00:07:59.560 --> 00:08:01.920
So I just searched Outlook, that number and boom,


00:08:01.920 --> 00:08:03.280
here's the exact fix.


00:08:03.280 --> 00:08:04.720
It's just like, are you kidding me?


00:08:04.720 --> 00:08:05.560
- Absolutely.


00:08:05.560 --> 00:08:07.240
- Yeah, I love it so much.


00:08:07.240 --> 00:08:10.960
A couple others, semantic HTML contact details.


00:08:10.960 --> 00:08:13.440
Wanted to check if address tag was relevant here.


00:08:13.440 --> 00:08:15.120
I highlight that because here's somebody


00:08:15.120 --> 00:08:17.040
who's a professional HTML developer,


00:08:17.040 --> 00:08:19.240
basically doing front end stuff.


00:08:19.240 --> 00:08:20.820
And still they're Googling to see,


00:08:20.820 --> 00:08:22.360
does this address tag match here?


00:08:22.360 --> 00:08:23.920
Like, should I use this block,


00:08:23.920 --> 00:08:27.680
this HTML tag in this situation, right?


00:08:27.680 --> 00:08:30.280
So it's, even if you work in stuff day to day,


00:08:30.280 --> 00:08:31.720
there's stuff that you just go,


00:08:31.720 --> 00:08:34.340
like, I'm just gonna leave that to the search engine


00:08:34.340 --> 00:08:37.080
and distributed cognition and not have to, you know,


00:08:37.080 --> 00:08:39.600
memorize every detail of what I'm working in.


00:08:39.600 --> 00:08:41.100
And then finally, I just thought this was fun.


00:08:41.100 --> 00:08:42.440
Editing host file.


00:08:42.440 --> 00:08:44.040
This was the search, not the action.


00:08:44.040 --> 00:08:46.080
Desperate times and it didn't even work.


00:08:46.080 --> 00:08:46.900
(laughing)


00:08:46.900 --> 00:08:47.740
Was the comment.


00:08:47.740 --> 00:08:48.580
- No.


00:08:48.580 --> 00:08:51.440
- Anyway, I think this is fun and I thought I'd just share it


00:08:51.440 --> 00:08:54.420
because I think it's interesting for people


00:08:54.420 --> 00:08:55.320
to compare notes.


00:08:55.320 --> 00:08:57.720
- One of the things I've noticed recently was I,


00:08:57.720 --> 00:09:02.600
I don't remember the exact way you're supposed to get


00:09:02.600 --> 00:09:04.200
to GitHub repos.


00:09:04.200 --> 00:09:08.020
So I usually just Google GitHub and then my repo name


00:09:08.020 --> 00:09:09.300
just to get to the repo.


00:09:09.300 --> 00:09:10.600
- Exactly that, yeah.


00:09:10.600 --> 00:09:12.540
(laughing)


00:09:12.540 --> 00:09:14.020
- Nice.


00:09:14.020 --> 00:09:16.260
- Well, and a lot of times I search for like a project


00:09:16.260 --> 00:09:19.820
and then it brings up like PyPI or some other,


00:09:19.820 --> 00:09:20.820
like the read the docs.


00:09:20.820 --> 00:09:24.340
I was like, no, I want GitHub, take me to GitHub.


00:09:24.340 --> 00:09:25.300
- Yeah, I'm always like, all right, fine,


00:09:25.300 --> 00:09:27.580
I'll click the PyPI so I can click on the source code.


00:09:27.580 --> 00:09:28.820
- Exactly, exactly.


00:09:28.820 --> 00:09:29.980
How many links do I have to go through


00:09:29.980 --> 00:09:30.820
just to get to the repo?


00:09:30.820 --> 00:09:31.660
- Exactly.


00:09:31.660 --> 00:09:32.860
I know I'm two clicks away.


00:09:32.860 --> 00:09:34.580
That's good enough. Let's do this.


00:09:34.580 --> 00:09:36.940
>> Yeah. I have a couple of thoughts on this.


00:09:36.940 --> 00:09:37.740
>> Yeah. Tell us.


00:09:37.740 --> 00:09:41.540
>> First of all, localghost.dev is an amazing domain name.


00:09:41.540 --> 00:09:42.980
I absolutely adore that.


00:09:42.980 --> 00:09:48.260
The second is, it's really great seeing articles and posts like this.


00:09:48.260 --> 00:09:50.900
I see a lot of seniors,


00:09:50.900 --> 00:09:52.580
particularly senior women and


00:09:52.580 --> 00:09:56.900
others underrepresented minorities talking about this sort of thing.


00:09:56.900 --> 00:10:00.340
I think it really helps to dispel the myth that you have to be


00:10:00.340 --> 00:10:05.860
an expert who has every command for every utility memorized in order to be a senior dev.


00:10:05.860 --> 00:10:13.140
A lot of us are doing these sorts of Googles, right? We're looking up the function signature


00:10:13.140 --> 00:10:18.420
for something that's in the standard library. We're all doing this. And so I think it's really


00:10:18.420 --> 00:10:23.220
valuable to share something like this, particularly for people who are new.


00:10:23.220 --> 00:10:28.660
Yeah. Some of the best skill acquisition isn't memorizing things, it's remembering that the


00:10:28.660 --> 00:10:29.920
the feature was there.


00:10:29.920 --> 00:10:30.760
- Exactly.


00:10:30.760 --> 00:10:31.580
- So you could look for it.


00:10:31.580 --> 00:10:32.420
- Yes, yes.


00:10:32.420 --> 00:10:33.260
- Right, exactly.


00:10:33.260 --> 00:10:35.920
I need to know just enough that I can Google it


00:10:35.920 --> 00:10:38.000
to get to where I wanna be, absolutely.


00:10:38.000 --> 00:10:40.860
And Johnny out in the audience also thinks this is


00:10:40.860 --> 00:10:43.380
interesting, yeah, we all think this is great, fantastic.


00:10:43.380 --> 00:10:45.740
All right, I did give a quick shout out to PyCascades


00:10:45.740 --> 00:10:47.860
previously, Madison, you wanna tell us about your first?


00:10:47.860 --> 00:10:49.380
- Yeah, I wanted to share about it.


00:10:49.380 --> 00:10:52.180
So PyCascades is coming up in less than two weeks,


00:10:52.180 --> 00:10:53.700
which is really exciting.


00:10:53.700 --> 00:10:57.300
We have another year of just excellent and diverse talks


00:10:57.300 --> 00:11:01.540
from an array of different subjects and expertise levels.


00:11:01.540 --> 00:11:03.220
Last year we were online


00:11:03.220 --> 00:11:06.060
and we're going to be online again this year


00:11:06.060 --> 00:11:07.900
using the same platform that we did last year


00:11:07.900 --> 00:11:10.380
and a lot of people really enjoyed that platform.


00:11:10.380 --> 00:11:11.980
So we're excited to use it again.


00:11:11.980 --> 00:11:14.020
We're hoping to do some watch parties


00:11:14.020 --> 00:11:16.300
in Seattle, Portland and Vancouver,


00:11:16.300 --> 00:11:21.300
but unfortunately reality wanted us not to do that.


00:11:21.300 --> 00:11:22.300
We opted against that.


00:11:22.300 --> 00:11:24.020
- Reality intruded, yeah.


00:11:24.020 --> 00:11:27.980
But we're so excited to be doing this again this year.


00:11:27.980 --> 00:11:30.380
And one of the things that I'm really excited about


00:11:30.380 --> 00:11:34.380
is that we have the PSF's Diversity, Equity, and Inclusion


00:11:34.380 --> 00:11:36.900
Working Group doing a meet and greet


00:11:36.900 --> 00:11:40.740
as sort of our first event on Saturday.


00:11:40.740 --> 00:11:44.820
And so they have a form that they are sharing


00:11:44.820 --> 00:11:47.260
for just trying to understand the landscape


00:11:47.260 --> 00:11:50.020
around diversity in the Python community.


00:11:50.020 --> 00:11:52.980
And so we have that linked in the show notes


00:11:52.980 --> 00:11:54.700
if you would like to fill that out.


00:11:54.700 --> 00:11:58.180
And we're gonna have socials on Friday and Saturday night.


00:11:58.180 --> 00:12:00.440
And we had a DJ last year.


00:12:00.440 --> 00:12:03.300
We're hoping to have a DJ again this year on Friday night.


00:12:03.300 --> 00:12:05.740
And then we'll be doing sprints on Sunday.


00:12:05.740 --> 00:12:08.580
And tickets are still available.


00:12:08.580 --> 00:12:11.060
We'll be selling them throughout the event too.


00:12:11.060 --> 00:12:12.660
So, 'cause it's a virtual event,


00:12:12.660 --> 00:12:14.940
it's not like NFTs.


00:12:14.940 --> 00:12:17.260
There's no digital scarcity with these.


00:12:17.260 --> 00:12:19.020
So please feel free to buy a ticket


00:12:19.020 --> 00:12:20.820
whenever you have a chance.


00:12:20.820 --> 00:12:22.020
And we hope to see you there.


00:12:22.020 --> 00:12:26.340
on yeah that's a fun commerce I've enjoyed going to it when it was in person so it's cool it's all


00:12:26.340 --> 00:12:32.420
going I can't wait for it to get back to being actually in person I know I know we were hoping


00:12:32.420 --> 00:12:36.820
we're hoping to dip our toes into it this year but just wasn't going to happen and I should also


00:12:36.820 --> 00:12:42.580
mention too we're having talks from some well-known folks in the in the Python community


00:12:42.580 --> 00:12:48.260
like Thursday Prom and Jay Miller who I know you had on talk Python to me recently yeah just


00:12:48.260 --> 00:12:49.100
- Yeah, very recently.


00:12:49.100 --> 00:12:51.980
- Yeah, yeah, and we have some first-time speakers as well,


00:12:51.980 --> 00:12:53.980
like Joseph Riddle and Isaac Na.


00:12:53.980 --> 00:12:57.380
So there's a lot of really great talks


00:12:57.380 --> 00:12:59.140
that we're looking forward to.


00:12:59.140 --> 00:13:00.100
- Yeah, super.


00:13:00.100 --> 00:13:00.940
- Cool, cool.


00:13:00.940 --> 00:13:04.820
- All right, Brian, back to parentheses and stuff?


00:13:04.820 --> 00:13:06.860
- Yeah, well, maybe not parentheses.


00:13:06.860 --> 00:13:07.700
- Sort of.


00:13:07.700 --> 00:13:08.520
- But yeah, kind of.


00:13:08.520 --> 00:13:10.180
- Stuff that happens between parentheses.


00:13:10.180 --> 00:13:13.180
- So this interesting article by Seth Larson


00:13:13.180 --> 00:13:16.420
that I ran across that says strict Python function


00:13:16.420 --> 00:13:21.420
And I thought strict, what do we mean by strict Python function parameters?


00:13:21.420 --> 00:13:25.420
And the idea is, let's put everything together.


00:13:25.420 --> 00:13:29.420
So we have, we've got keyword only parameters,


00:13:29.420 --> 00:13:32.420
and that's a little small on screen,


00:13:32.420 --> 00:13:37.420
but keyword only parameters is where you can put an asterisk


00:13:37.420 --> 00:13:40.420
in the middle of your parameter list,


00:13:40.420 --> 00:13:44.420
and it says that everything after that has to be a keyword.


00:13:44.420 --> 00:13:49.420
It can't be, you can't pass that in as positional.


00:13:49.420 --> 00:13:52.820
And I'm not sure exactly how that works really,


00:13:52.820 --> 00:13:54.880
but it's kind of, it's useful.


00:13:54.880 --> 00:13:58.180
And then you can also put defaults in there,


00:13:58.180 --> 00:13:59.860
of course, for things.


00:13:59.860 --> 00:14:02.340
And it's just that separating of where your keyword


00:14:02.340 --> 00:14:04.540
positional and keyword arguments go.


00:14:04.540 --> 00:14:06.700
And it's a cool thing.


00:14:06.700 --> 00:14:10.320
That's helped allow people to add parameters before.


00:14:10.320 --> 00:14:11.780
So this was a nice addition.


00:14:11.780 --> 00:14:14.900
And then also we've got, those are keyword only parameters.


00:14:14.900 --> 00:14:16.780
We also have positional only.


00:14:16.780 --> 00:14:20.680
So with the slash, you can say everything


00:14:20.680 --> 00:14:23.980
before the slash is a positional only.


00:14:23.980 --> 00:14:28.980
You can't pass it in as a keyword parameter.


00:14:28.980 --> 00:14:34.020
And it's, the natural progression is,


00:14:34.020 --> 00:14:36.540
hey, let's just do both of them at the same time.


00:14:36.540 --> 00:14:38.300
And I didn't actually, for some reason,


00:14:38.300 --> 00:14:39.820
I didn't realize you could do this.


00:14:39.820 --> 00:14:41.460
- I didn't either, yeah.


00:14:41.460 --> 00:14:45.220
And so what, so then you're going to have your


00:14:45.220 --> 00:14:47.060
positional parameters first,


00:14:47.060 --> 00:14:49.780
and then a slash and then a star,


00:14:49.780 --> 00:14:52.600
and then you'll have,


00:14:52.600 --> 00:14:54.900
and then all your keyword parameters after that.


00:14:54.900 --> 00:14:59.300
What happens then is you're, both of them are true.


00:14:59.300 --> 00:15:02.600
So you have to, you have to have the positionals first,


00:15:02.600 --> 00:15:04.260
and then the keywords after.


00:15:04.260 --> 00:15:06.700
And, and so what's the benefit?


00:15:06.700 --> 00:15:08.820
This, this just, it looks like added syntax


00:15:08.820 --> 00:15:10.660
to confuse people.


00:15:10.660 --> 00:15:12.120
but there are a lot of benefits.


00:15:12.120 --> 00:15:14.240
One of the benefits is really that your documents


00:15:14.240 --> 00:15:18.560
and your code and your example code


00:15:18.560 --> 00:15:20.180
and all examples people look,


00:15:20.180 --> 00:15:22.360
if they look up some other GitHub repo


00:15:22.360 --> 00:15:24.280
or something using your API,


00:15:24.280 --> 00:15:26.720
all the examples are gonna look kind of the same.


00:15:26.720 --> 00:15:28.760
And this is sort of something we're used to


00:15:28.760 --> 00:15:30.600
in other languages.


00:15:30.600 --> 00:15:32.320
I was actually surprised in Python


00:15:32.320 --> 00:15:35.960
that you could rearrange your input arguments,


00:15:35.960 --> 00:15:37.520
especially the keyword ones,


00:15:37.520 --> 00:15:39.560
you can rearrange them and they work fine,


00:15:39.560 --> 00:15:41.040
but it's confusing sometimes.


00:15:41.040 --> 00:15:46.040
And I just actually think this is kind of a neat idea.


00:15:46.040 --> 00:15:49.080
I think that especially for API or, you know,


00:15:49.080 --> 00:15:50.980
library API entry points,


00:15:50.980 --> 00:15:53.360
doing something like this might make complete sense.


00:15:53.360 --> 00:15:55.680
And it's something I'm gonna look into considering


00:15:55.680 --> 00:15:59.940
just to make sure people use something consistently.


00:15:59.940 --> 00:16:02.800
The article also goes through a thing


00:16:02.800 --> 00:16:04.840
about empowering library authors


00:16:04.840 --> 00:16:07.400
to have flexibility to change things.


00:16:07.400 --> 00:16:09.780
and it's a good thing to read up on.


00:16:09.780 --> 00:16:12.060
But I was curious what you guys thought about


00:16:12.060 --> 00:16:16.060
if I were having, had an API or you were looking at API


00:16:16.060 --> 00:16:18.300
and it had this slash star in the middle of everything,


00:16:18.300 --> 00:16:19.220
what would you think?


00:16:19.220 --> 00:16:22.020
- I mean, I really like this concept


00:16:22.020 --> 00:16:24.220
and I'm glad that it's a feature of Python


00:16:24.220 --> 00:16:27.420
because of that uniformity that it can create.


00:16:27.420 --> 00:16:31.060
I've never had an opportunity where I felt like


00:16:31.060 --> 00:16:32.900
this was something that I really should use,


00:16:32.900 --> 00:16:34.340
but I think that's a large part


00:16:34.340 --> 00:16:36.580
because all of the stuff that I work on


00:16:36.580 --> 00:16:38.820
is usually internal tools.


00:16:38.820 --> 00:16:41.480
And so even if it is open source,


00:16:41.480 --> 00:16:44.260
there's not like a public API that I'm building.


00:16:44.260 --> 00:16:46.220
And so that uniformity-- - Right, if you're consuming it


00:16:46.220 --> 00:16:48.420
versus creating it for others, it's very different, right?


00:16:48.420 --> 00:16:49.780
- Exactly, exactly, yeah.


00:16:49.780 --> 00:16:51.820
And so I think it's always a good thing


00:16:51.820 --> 00:16:53.140
to keep in the back pocket


00:16:53.140 --> 00:16:55.640
when you have a particular contract


00:16:55.640 --> 00:16:57.180
that you really wanna enforce


00:16:57.180 --> 00:17:00.800
with how functions are used and keywords and whatnot.


00:17:00.800 --> 00:17:03.580
- Yeah, I also am glad that it's here.


00:17:03.580 --> 00:17:04.940
And for the same reason as Madison,


00:17:04.940 --> 00:17:05.940
I don't use it very often


00:17:05.940 --> 00:17:08.880
because to the extent that I do make open source libraries


00:17:08.880 --> 00:17:13.460
that are pretty basic and don't have tons of tutorials


00:17:13.460 --> 00:17:14.380
or anything about them,


00:17:14.380 --> 00:17:16.700
maybe I should think more about this, honestly.


00:17:16.700 --> 00:17:18.620
But I do like the idea that you can say,


00:17:18.620 --> 00:17:20.540
no, this is going to be like this


00:17:20.540 --> 00:17:23.260
specifically for certain things.


00:17:23.260 --> 00:17:25.700
And say, this stuff you cannot use as a keyword argument,


00:17:25.700 --> 00:17:26.820
you have to just pass positional.


00:17:26.820 --> 00:17:29.540
This stuff you must, it has to go in this order


00:17:29.540 --> 00:17:30.940
and so on, yeah, I like it.


00:17:30.940 --> 00:17:32.140
- Yeah, one of the things I see


00:17:32.140 --> 00:17:35.420
is people looking at other examples


00:17:35.420 --> 00:17:42.420
and saying like, so if you just have normal arguments,


00:17:42.420 --> 00:17:47.660
they can be, you can pass them in as keywords


00:17:47.660 --> 00:17:50.000
even if most people use positional.


00:17:50.000 --> 00:17:51.700
And then you can reorder the keywords


00:17:51.700 --> 00:17:53.620
and put them in a different order.


00:17:53.620 --> 00:17:56.020
And then somebody else might look at your code,


00:17:56.020 --> 00:17:59.020
copy it and then take off the keywords


00:17:59.020 --> 00:18:01.380
and now they're in the wrong order.


00:18:01.380 --> 00:18:03.440
and that'll mess things up.


00:18:03.440 --> 00:18:07.060
This is a Dean added comment of,


00:18:07.060 --> 00:18:10.500
so def underscore, yeah, star,


00:18:10.500 --> 00:18:13.220
this is a legit syntax.


00:18:13.220 --> 00:18:14.180
That's funny.


00:18:14.180 --> 00:18:15.500
I can't even read that out loud.


00:18:15.500 --> 00:18:16.620
It's so confusing.


00:18:16.620 --> 00:18:19.480
- Looks like code golf is what it looks like.


00:18:19.480 --> 00:18:20.320
Goodness.


00:18:20.320 --> 00:18:21.580
- So anyway.


00:18:21.580 --> 00:18:24.540
- I think it's like typing in the sense that


00:18:24.540 --> 00:18:27.440
it's a good feature that's there


00:18:27.440 --> 00:18:28.820
and it can be helpful


00:18:28.820 --> 00:18:31.500
for making things more explicit in Python.


00:18:31.500 --> 00:18:33.100
But part of the power of Python


00:18:33.100 --> 00:18:36.220
is that it's very versatile and approachable.


00:18:36.220 --> 00:18:39.700
And so I think it's nice too that it's not like


00:18:39.700 --> 00:18:41.940
this is something that you are required to do


00:18:41.940 --> 00:18:43.900
for every function that you write.


00:18:43.900 --> 00:18:46.740
- Yeah, yeah, I do like the flexibility there.


00:18:46.740 --> 00:18:50.300
All right, let me tell you about something


00:18:50.300 --> 00:18:53.660
that seems a little bit contrary to the Python way,


00:18:53.660 --> 00:18:55.660
but I think people will find useful.


00:18:55.660 --> 00:19:00.660
So over on pypi.org, we have 350,000 plus packages,


00:19:00.660 --> 00:19:02.860
which is utterly mind blowing.


00:19:02.860 --> 00:19:05.140
I remember when it was 75,000,


00:19:05.140 --> 00:19:08.140
and I'm like, wow, look how many there are, it's insane.


00:19:08.140 --> 00:19:11.700
So a lot of the superpowers of Python


00:19:11.700 --> 00:19:13.980
is the ability to use these packages,


00:19:13.980 --> 00:19:16.420
and people will say, I'm using Python


00:19:16.420 --> 00:19:18.780
because it's really great at working with Excel files.


00:19:18.780 --> 00:19:20.260
Well, like, Python's not actually good


00:19:20.260 --> 00:19:21.220
at working with Excel files,


00:19:21.220 --> 00:19:23.760
but there are many libraries for Python,


00:19:23.760 --> 00:19:25.020
which that's true, right?


00:19:25.020 --> 00:19:26.980
And so you have this sort of spectrum of like,


00:19:26.980 --> 00:19:29.820
what do people mean when they say like Python is great?


00:19:29.820 --> 00:19:32.840
But I do think these packages clearly are super important.


00:19:32.840 --> 00:19:35.300
So why do I bring this up to start the section off?


00:19:35.300 --> 00:19:38.340
I wanna talk about a way to not use PyPI,


00:19:38.340 --> 00:19:40.180
but still do some cool stuff.


00:19:40.180 --> 00:19:41.420
There's this thing called Murek,


00:19:41.420 --> 00:19:44.380
as in small requests over here,


00:19:44.380 --> 00:19:47.980
created by, I got a name.


00:19:47.980 --> 00:19:51.700
Yes, if it pulls up, Shriram.


00:19:51.700 --> 00:19:53.660
So very cool project here.


00:19:53.660 --> 00:19:56.500
And the idea is it's request-like,


00:19:56.500 --> 00:19:58.100
not a drop-in replacement for requests,


00:19:58.100 --> 00:20:00.460
but like requests with limited features.


00:20:00.460 --> 00:20:02.380
But if you're using a limited subset


00:20:02.380 --> 00:20:03.580
of what requests could do,


00:20:03.580 --> 00:20:05.140
you could use this library


00:20:05.140 --> 00:20:07.660
and have zero external dependencies,


00:20:07.660 --> 00:20:09.900
no virtual environments required,


00:20:09.900 --> 00:20:13.340
no pip install -r or friends required,


00:20:13.340 --> 00:20:14.740
and just have like a real simple thing


00:20:14.740 --> 00:20:17.140
and not have to fall back to just urllib,


00:20:17.140 --> 00:20:18.620
which is pretty cool.


00:20:18.620 --> 00:20:21.860
So it does standard stuff.


00:20:21.860 --> 00:20:25.080
I would recommend maybe even from, you know,


00:20:25.080 --> 00:20:29.180
import Murek as requests and then request.get.


00:20:29.180 --> 00:20:30.880
- See what breaks, yeah.


00:20:30.880 --> 00:20:31.720
- Yeah, exactly.


00:20:31.720 --> 00:20:33.180
I mean, and then see if it works or not.


00:20:33.180 --> 00:20:37.500
So it does have some limitations, quite a few actually.


00:20:37.500 --> 00:20:39.920
Like it doesn't support connection pooling, for example.


00:20:39.920 --> 00:20:41.940
But if you do request.get, neither does that.


00:20:41.940 --> 00:20:43.200
You have to create a client session


00:20:43.200 --> 00:20:45.180
and then use the session to do get and so on


00:20:45.180 --> 00:20:46.860
if you want, you know, connection pooling.


00:20:46.860 --> 00:20:48.580
Apparently uses a lot less memory.


00:20:48.580 --> 00:20:51.060
But the main reason besides just convenience of like,


00:20:51.060 --> 00:20:53.660
I want to give you a Python file you can run


00:20:53.660 --> 00:20:56.660
or a set of Python files you can run the top level one


00:20:56.660 --> 00:20:59.500
without any external dependencies.


00:20:59.500 --> 00:21:00.780
So that's pretty nice.


00:21:00.780 --> 00:21:02.940
The other one is to avoid supply chain


00:21:02.940 --> 00:21:04.580
attack vulnerabilities, right?


00:21:04.580 --> 00:21:08.380
We've talked before about people putting malicious stuff


00:21:08.380 --> 00:21:09.220
into PyPI.


00:21:09.220 --> 00:21:12.380
We talked about the guy, Marek, I believe it was,


00:21:12.380 --> 00:21:15.380
who had like sabotaged his NPM packages


00:21:15.380 --> 00:21:16.460
and those kinds of things.


00:21:16.460 --> 00:21:18.680
And you know, the cascading change


00:21:18.680 --> 00:21:21.120
of like the super dependencies in the JavaScript world


00:21:21.120 --> 00:21:22.880
meant that was really, really bad, right?


00:21:22.880 --> 00:21:24.080
So here's a way you could put something


00:21:24.080 --> 00:21:26.040
that does requests like things into your code


00:21:26.040 --> 00:21:27.840
and it doesn't have any dependencies,


00:21:27.840 --> 00:21:29.640
it doesn't have, there's no way someone's going


00:21:29.640 --> 00:21:33.120
to take over that account and put something malicious there


00:21:33.120 --> 00:21:35.320
or even maybe worse is like the dependency


00:21:35.320 --> 00:21:36.800
of the dependency of the dependency


00:21:36.800 --> 00:21:38.520
is where the problem is, yeah?


00:21:38.520 --> 00:21:39.840
So-- - Yeah, I think security--


00:21:39.840 --> 00:21:40.960
- I think it's pretty interesting.


00:21:40.960 --> 00:21:44.620
- Yeah, security's in a lot of people's minds recently


00:21:44.620 --> 00:21:47.320
with the Log4J stuff and then, yeah,


00:21:47.320 --> 00:21:50.280
all of these supply chain attacks that are happening,


00:21:50.280 --> 00:21:52.820
particularly in the JavaScript space.


00:21:52.820 --> 00:21:58.560
It seems like a lot more happens in that area more so than Python,


00:21:58.560 --> 00:22:02.100
but I feel like the packaging story is really similar in both.


00:22:02.100 --> 00:22:05.340
So it's useful to take the lessons learned from


00:22:05.340 --> 00:22:08.600
the JavaScript ecosystem, pull them back into Python.


00:22:08.600 --> 00:22:10.560
I think something like this is really valuable,


00:22:10.560 --> 00:22:12.880
particularly I know some companies have


00:22:12.880 --> 00:22:16.540
just very difficult bureaucratic processes


00:22:16.540 --> 00:22:18.920
to get requirements in.


00:22:18.920 --> 00:22:21.760
And so if you say, this is just this one file,


00:22:21.760 --> 00:22:23.960
it has this license, we just need this,


00:22:23.960 --> 00:22:25.160
makes it a lot easier.


00:22:25.160 --> 00:22:27.240
- We can review the one file, it won't auto-update.


00:22:27.240 --> 00:22:28.080
- Exactly.


00:22:28.080 --> 00:22:28.900
- It's gonna, yeah.


00:22:28.900 --> 00:22:30.520
So that's the good news.


00:22:30.520 --> 00:22:32.440
There's a couple of things worth pointing out.


00:22:32.440 --> 00:22:36.080
One over in the PR section is a lot of the stuff inside


00:22:36.080 --> 00:22:38.280
is not PEP 8 compliant or other stuff.


00:22:38.280 --> 00:22:39.840
So if you drop it into your project,


00:22:39.840 --> 00:22:41.160
it'll give you a bunch of warnings.


00:22:41.160 --> 00:22:43.680
so you might wanna run like black on it


00:22:43.680 --> 00:22:44.760
before you put it in your project.


00:22:44.760 --> 00:22:46.560
I did a PR that's suggesting


00:22:46.560 --> 00:22:47.880
that that should just be part of it.


00:22:47.880 --> 00:22:49.560
There's an ongoing conversation about that.


00:22:49.560 --> 00:22:52.000
Also, it doesn't support a couple of the main methods


00:22:52.000 --> 00:22:57.000
like .json for consuming APIs and raise for status,


00:22:57.000 --> 00:22:59.360
which if you don't get a successful status,


00:22:59.360 --> 00:23:00.240
it'll raise an exception


00:23:00.240 --> 00:23:02.000
so you don't carry on with bad data.


00:23:02.000 --> 00:23:03.560
So those two are really good.


00:23:03.560 --> 00:23:06.960
The raise for status is supposed to be put in soon.


00:23:06.960 --> 00:23:09.080
The JSON one is up for debate.


00:23:09.080 --> 00:23:11.760
With all that said, I have a branch


00:23:11.760 --> 00:23:14.200
that has all those fixes as a PEP8 compliant,


00:23:14.200 --> 00:23:17.960
f-strings, has those two functions that you might use.


00:23:17.960 --> 00:23:21.360
So you can, people can use that as well if they want.


00:23:21.360 --> 00:23:23.720
- Did you put a PR to get those back in?


00:23:23.720 --> 00:23:25.200
- Oh yeah, yeah, that's what I was pointing out before.


00:23:25.200 --> 00:23:26.200
I absolutely, yeah.


00:23:26.200 --> 00:23:29.200
They're not, I'm debating with the author


00:23:29.200 --> 00:23:31.760
whether or not he thinks that those are appropriate


00:23:31.760 --> 00:23:33.200
to add to it.


00:23:33.200 --> 00:23:35.320
- Maybe you could rename it medium rec if.


00:23:35.320 --> 00:23:38.600
- Medium sized rec.


00:23:38.600 --> 00:23:40.100
So anyway, it's not super important.


00:23:40.100 --> 00:23:42.440
It's not that big of a deal, but I mean,


00:23:42.440 --> 00:23:45.500
you know, the effect of actually adding those,


00:23:45.500 --> 00:23:47.520
they're not huge amounts of code


00:23:47.520 --> 00:23:49.220
that you've gotta add to make this happen.


00:23:49.220 --> 00:23:52.880
Like the JSON one is literally one line of code.


00:23:52.880 --> 00:23:53.880
You know, you could take it,


00:23:53.880 --> 00:23:55.560
I mean, do you count the function definition


00:23:55.560 --> 00:23:56.400
as a separate line?


00:23:56.400 --> 00:23:57.840
It's two if you gotta count the def,


00:23:57.840 --> 00:23:59.100
but it's like super, super small.


00:23:59.100 --> 00:24:01.280
So people can grab mine and they can add it


00:24:01.280 --> 00:24:04.280
or they can grab theirs and then add it, whatever.


00:24:04.280 --> 00:24:05.800
So, that's the good news.


00:24:05.800 --> 00:24:08.280
fork the project and make Mewtwo wreck.


00:24:08.280 --> 00:24:09.800
(laughing)


00:24:09.800 --> 00:24:11.780
- Right? - So much more Mew.


00:24:11.780 --> 00:24:12.620
Yeah, exactly.


00:24:12.620 --> 00:24:15.120
Now, here's the reality of what I found.


00:24:15.120 --> 00:24:18.160
I have a lot of projects that have 10, 20 dependencies


00:24:18.160 --> 00:24:21.020
because they're tens of thousands of lines of code


00:24:21.020 --> 00:24:22.160
and they do a lot of stuff.


00:24:22.160 --> 00:24:23.740
Every single one of those where I thought,


00:24:23.740 --> 00:24:25.520
oh, this would be kind of fun just to cut down


00:24:25.520 --> 00:24:28.120
on the dependencies and the dependencies of the dependencies


00:24:28.120 --> 00:24:29.760
'cause what I do with the requests is real simple.


00:24:29.760 --> 00:24:32.160
Usually call an API, get some JSON,


00:24:32.160 --> 00:24:33.280
get some values out of it.


00:24:33.280 --> 00:24:35.040
It'd be nice to do something like this.


00:24:35.040 --> 00:24:39.040
The reality is so many things depend upon requests.


00:24:39.040 --> 00:24:43.760
Sentry, for example, depends on requests.


00:24:43.760 --> 00:24:46.880
MailChimp's API depends on requests,


00:24:46.880 --> 00:24:48.640
and et cetera, et cetera, et cetera.


00:24:48.640 --> 00:24:51.520
So by the time you get a project built up with other stuff,


00:24:51.520 --> 00:24:55.120
it's already got requests required and installed and so on.


00:24:55.120 --> 00:24:57.600
So it's like, this is for like a smallish app


00:24:57.600 --> 00:25:00.000
that doesn't have really many other dependencies


00:25:00.000 --> 00:25:01.480
that I think this makes a lot of sense for


00:25:01.480 --> 00:25:03.580
'cause if you depend on a lot of things,


00:25:03.580 --> 00:25:06.220
you're gonna end up with requests as a dependency real quick.


00:25:06.220 --> 00:25:07.700
- Yeah, that's a really solid point.


00:25:07.700 --> 00:25:08.540
- Yeah, thanks.


00:25:08.540 --> 00:25:10.860
Lastly, for people out there listening,


00:25:10.860 --> 00:25:13.420
wouldn't it be fantastic if a request itself


00:25:13.420 --> 00:25:16.900
offered an official mini request


00:25:16.900 --> 00:25:19.740
and HTTPX offered a single file version


00:25:19.740 --> 00:25:23.020
and AIO HTTP client offered a single file version?


00:25:23.020 --> 00:25:26.180
Like, yeah, it only has 80% of the functions,


00:25:26.180 --> 00:25:29.660
but if those functions don't have dependencies,


00:25:29.660 --> 00:25:31.580
maybe just drop those in.


00:25:31.580 --> 00:25:32.860
I don't know, it would be great.


00:25:32.860 --> 00:25:35.340
One of the things that I like about actually alternatives,


00:25:35.340 --> 00:25:39.100
either within a project itself as an alternative


00:25:39.100 --> 00:25:42.200
or these forked projects that have the same API


00:25:42.200 --> 00:25:43.440
is they might have benefits.


00:25:43.440 --> 00:25:47.560
And so, but you have to weigh those.


00:25:47.560 --> 00:25:51.540
So it does encourage actually a nice software design


00:25:51.540 --> 00:25:52.460
of a couple of things.


00:25:52.460 --> 00:25:54.660
One of them is isolate your dependencies


00:25:54.660 --> 00:25:57.720
to as few files as possible.


00:25:57.720 --> 00:26:02.100
So if you only have one of your modules accessing requests,


00:26:02.100 --> 00:26:03.900
then you only have one place you need to change it


00:26:03.900 --> 00:26:05.860
to this new module import.


00:26:05.860 --> 00:26:06.700
- Yeah, absolutely.


00:26:06.700 --> 00:26:10.020
- The other thing is testing, testing your behavior.


00:26:10.020 --> 00:26:11.940
So instead of implementation,


00:26:11.940 --> 00:26:15.020
so if you test your behavior and you've got it isolated,


00:26:15.020 --> 00:26:20.020
you can drop in a thing, run your CI, see if it all works,


00:26:20.020 --> 00:26:24.020
throw it to a few beta people and run with it if it works.


00:26:24.020 --> 00:26:25.180
- Yeah, quite cool.


00:26:25.180 --> 00:26:26.640
- Now, one thing that can be useful


00:26:26.640 --> 00:26:29.020
and also potentially extremely dangerous


00:26:29.020 --> 00:26:34.020
is some Python level capacity for shimming a module.


00:26:34.020 --> 00:26:39.300
So like in the situation that you describe, Michael,


00:26:39.300 --> 00:26:40.880
where you have a ton of dependencies


00:26:40.880 --> 00:26:42.680
that all require requests,


00:26:42.680 --> 00:26:45.160
you could pull in something like murec


00:26:45.160 --> 00:26:48.140
and then just say, this is a request.


00:26:48.140 --> 00:26:51.340
Python, I want you to think of this as requests.


00:26:51.340 --> 00:26:53.900
But obviously that has, I mean, it's just an idea.


00:26:53.900 --> 00:26:56.020
It has some pretty bad security implications


00:26:56.020 --> 00:26:58.460
with people being able to usurp that.


00:26:58.460 --> 00:27:02.140
>> Yeah, it may cause some unexpected behavior,


00:27:02.140 --> 00:27:03.760
but yeah, it's also could be good.


00:27:03.760 --> 00:27:08.720
All right. Just put your entire application inside of a patch statement.


00:27:08.720 --> 00:27:12.180
Now, I'm just kidding. What I'm hearing is that we need to make


00:27:12.180 --> 00:27:16.460
our entire application one file in every case and that will just solve all the problems.


00:27:16.460 --> 00:27:19.180
>> Just one function actually, just one main.


00:27:19.180 --> 00:27:23.260
>> It's perfect. You don't even need a function in Python, right?


00:27:23.260 --> 00:27:25.260
>> Yeah. Okay. Yeah, no functions.


00:27:25.260 --> 00:27:26.460
- Oh my gosh.


00:27:26.460 --> 00:27:29.100
- Yeah, it just runs once, top to bottom.


00:27:29.100 --> 00:27:31.040
Now I was dreaming of a world where like,


00:27:31.040 --> 00:27:33.620
there's a simple use case that you don't have to have


00:27:33.620 --> 00:27:37.260
a bunch of dependencies, but it's probably a little extreme


00:27:37.260 --> 00:27:39.380
and you don't want to take it very far at all.


00:27:39.380 --> 00:27:41.260
All right, Brian, what you got for the next one here?


00:27:41.260 --> 00:27:42.100
- Oh, this, I'm not--


00:27:42.100 --> 00:27:42.980
- Oh, that's your extra?


00:27:42.980 --> 00:27:46.020
No, Madison, you're taking us out for our main items.


00:27:46.020 --> 00:27:49.260
- Yeah, welcome to Openverse.


00:27:49.260 --> 00:27:52.740
This is not the metaverse, but everything is,


00:27:52.740 --> 00:27:55.500
You know, I say call the tech industry a song


00:27:55.500 --> 00:27:57.540
because everything's a verse these days.


00:27:57.540 --> 00:28:03.300
But this is a search engine for openly licensed media.


00:28:03.300 --> 00:28:06.260
This is something that the WordPress community


00:28:06.260 --> 00:28:07.380
is supporting.


00:28:07.380 --> 00:28:10.100
And so what I mean by openly licensed media


00:28:10.100 --> 00:28:13.460
is images and audio.


00:28:13.460 --> 00:28:15.500
That's what we have currently,


00:28:15.500 --> 00:28:18.900
but we're hoping down the line to have things like video,


00:28:18.900 --> 00:28:23.900
3D models, text, all assets and media that you can use


00:28:23.900 --> 00:28:27.280
without having to pay for them.


00:28:27.280 --> 00:28:31.740
And just some licenses require attribution, others don't.


00:28:31.740 --> 00:28:34.840
A lot of them are free for remix and reuse.


00:28:34.840 --> 00:28:38.220
And so this used to be called CC Search


00:28:38.220 --> 00:28:41.060
under the Creative Commons sort of purview,


00:28:41.060 --> 00:28:42.520
but they've handed it off to us


00:28:42.520 --> 00:28:44.700
to help shepherd into the future.


00:28:44.700 --> 00:28:49.340
So if you are looking for content to use on your blog,


00:28:49.340 --> 00:28:53.000
or your podcast, or anything that you're creating,


00:28:53.000 --> 00:28:54.860
any content that you're creating.


00:28:54.860 --> 00:28:56.500
>> Your conference presentation.


00:28:56.500 --> 00:28:57.900
>> Your conference presentation.


00:28:57.900 --> 00:28:59.060
>> Your courses, whatever.


00:28:59.060 --> 00:29:00.940
There's a lot of times I'm like,


00:29:00.940 --> 00:29:03.700
I need an image, I need to be able to use it.


00:29:03.700 --> 00:29:06.740
>> Or a snippet of audio to throw someplace. This is awesome.


00:29:06.740 --> 00:29:09.300
>> Yeah. So I'll show an example here in the live stream.


00:29:09.300 --> 00:29:11.580
I'm going to type Jupyter,


00:29:11.580 --> 00:29:12.620
and I have to spell it right.


00:29:12.620 --> 00:29:14.900
I typed Jupyter last time.


00:29:14.900 --> 00:29:18.980
Yeah, you just get a bunch of pictures of Jupyter and


00:29:18.980 --> 00:29:22.140
then also different sound clips that we have mixed in.


00:29:22.140 --> 00:29:23.640
If you want all of the results,


00:29:23.640 --> 00:29:26.620
you can also filter by just certain media types like


00:29:26.620 --> 00:29:29.620
seeing just images or seeing just the audio results.


00:29:29.620 --> 00:29:31.140
Then when you click on an image,


00:29:31.140 --> 00:29:34.420
you'll see the attribution for that image right there alongside it.


00:29:34.420 --> 00:29:38.380
So you can just copy that and put it in your website after you link the image.


00:29:38.380 --> 00:29:44.700
And we have over 600 million images in Openverse and more audio and more images and more just


00:29:44.700 --> 00:29:46.220
media in general to come.


00:29:46.220 --> 00:29:47.220
Fantastic.


00:29:47.220 --> 00:29:52.900
Oh, and if we search, sorry, if we search Jupyter, there's some fun like conferencey,


00:29:52.900 --> 00:29:53.900
you know, screenshots.


00:29:53.900 --> 00:29:56.380
So there's lots to use here.


00:29:56.380 --> 00:29:57.380
Cool.


00:29:57.380 --> 00:29:59.380
Alvaro asks, can you search by license type?


00:29:59.380 --> 00:30:00.380
Yeah.


00:30:00.380 --> 00:30:03.780
So I'm sharing this in the live screen, but I heard live stream, but on the right, the


00:30:03.780 --> 00:30:07.220
first filter that we have is by different license types.


00:30:07.220 --> 00:30:11.660
And a lot of these are, I believe they're Creative Commons license, but not all of them


00:30:11.660 --> 00:30:12.660
are.


00:30:12.660 --> 00:30:16.420
We have public domain markered licenses as well.


00:30:16.420 --> 00:30:19.940
And then you can search by use too, depending on how you're using that.


00:30:19.940 --> 00:30:23.920
So if you're using it commercially, that's going to have different licenses and implications


00:30:23.920 --> 00:30:27.380
for you versus modifying and adapting.


00:30:27.380 --> 00:30:33.700
And then we have, I mean, Openverse serves as like an aggregate for different entities


00:30:33.700 --> 00:30:37.100
that host some of this openly licensed media.


00:30:37.100 --> 00:30:41.420
So things like museums, NASA's photos, that sort of thing.


00:30:41.420 --> 00:30:43.700
And so you can also search by provider too.


00:30:43.700 --> 00:30:45.340
So if you're looking for space photos and you say,


00:30:45.340 --> 00:30:48.100
I just want NASA's authority on this,


00:30:48.100 --> 00:30:52.340
then you can sort of filter by that aggregate.


00:30:52.340 --> 00:30:53.180
- Very cool.


00:30:53.180 --> 00:30:56.260
Yeah, this is a constant challenge and it's great.


00:30:56.260 --> 00:30:57.660
Like it's a challenge for blogs,


00:30:57.660 --> 00:30:59.740
it's a challenge for like all these things, right?


00:30:59.740 --> 00:31:00.700
But it makes perfect sense


00:31:00.700 --> 00:31:02.660
why WordPress would be interested in this.


00:31:02.660 --> 00:31:03.500
- Totally, yeah.


00:31:03.500 --> 00:31:05.460
And we're hoping to have it integrated


00:31:05.460 --> 00:31:07.220
into WordPress down the line.


00:31:07.220 --> 00:31:09.700
So if you're working on a WordPress site


00:31:09.700 --> 00:31:12.020
and you want to add an image, one of the blocks


00:31:12.020 --> 00:31:15.100
that you can pull up is just search on Openverse.


00:31:15.100 --> 00:31:17.220
And then you pull it in, and it will pull the attribution


00:31:17.220 --> 00:31:17.720
in with it.


00:31:17.720 --> 00:31:20.420
And you don't have to do a whole lot of extra work.


00:31:20.420 --> 00:31:22.940
So we're hoping that that's going


00:31:22.940 --> 00:31:24.620
to be coming down the line, too.


00:31:24.620 --> 00:31:27.560
And yeah, it's so easy to just go to Google Images


00:31:27.560 --> 00:31:28.500
and find an image.


00:31:28.500 --> 00:31:31.940
But it's harder to find the appropriate attribution


00:31:31.940 --> 00:31:33.260
for that.


00:31:33.260 --> 00:31:35.620
And particularly you can get into some very interesting


00:31:35.620 --> 00:31:37.940
legal spaces if you're making money off of that photo too.


00:31:37.940 --> 00:31:39.580
- Right, I mean it makes perfect sense


00:31:39.580 --> 00:31:40.860
if you're like a high school student


00:31:40.860 --> 00:31:42.140
doing like a research project.


00:31:42.140 --> 00:31:43.060
Who cares, right?


00:31:43.060 --> 00:31:46.500
But it starts to push the limit if you're selling something


00:31:46.500 --> 00:31:48.500
or you're making a book or whatever.


00:31:48.500 --> 00:31:50.140
- Yeah, one of the things I think is interesting


00:31:50.140 --> 00:31:51.780
is that the difference between


00:31:51.780 --> 00:31:54.860
non-commercial and commercial.


00:31:54.860 --> 00:31:59.860
And we think of it like big companies or blogs or something.


00:31:59.860 --> 00:32:02.940
And it's not that cut and dry


00:32:02.940 --> 00:32:05.900
because like you start, say you're starting a podcast,


00:32:05.900 --> 00:32:07.620
you start getting sponsors


00:32:07.620 --> 00:32:09.580
and you're making like five bucks a week.


00:32:09.580 --> 00:32:12.820
That's commercial, but it's not like


00:32:12.820 --> 00:32:15.280
I can afford a huge license, so yeah.


00:32:15.280 --> 00:32:16.180
- Right, exactly.


00:32:16.180 --> 00:32:17.020
And I mean some of the--


00:32:17.020 --> 00:32:18.900
- And maybe you started non-commercially


00:32:18.900 --> 00:32:20.820
and then it became commercial, right?


00:32:20.820 --> 00:32:23.860
But you had already used it and stuff like that as well.


00:32:23.860 --> 00:32:27.640
How about a real-time feature request, Dean Langsam asks,


00:32:27.640 --> 00:32:30.060
says, "I wish it had a,


00:32:30.060 --> 00:32:32.660
"this is a ping with a transparent background."


00:32:32.660 --> 00:32:33.660
- I hear it, I hear it.


00:32:33.660 --> 00:32:36.300
I use that feature all the time in Google Images.


00:32:36.300 --> 00:32:39.700
Yeah, we actually just finished a redesign of the site.


00:32:39.700 --> 00:32:42.380
We launched yesterday for this redesign,


00:32:42.380 --> 00:32:44.100
which is really exciting. - Good timing.


00:32:44.100 --> 00:32:46.700
- But we have, I mean, we have lots of stuff


00:32:46.700 --> 00:32:50.300
that we want to start adding to this.


00:32:50.300 --> 00:32:54.580
Turns out that making a search engine is not easy,


00:32:54.580 --> 00:32:57.740
surprise, so there's a lot of work to be done.


00:32:57.740 --> 00:32:59.500
But that's, yeah, that's a great feature request.


00:32:59.500 --> 00:33:01.940
All of this too is a great plug,


00:33:01.940 --> 00:33:03.340
So thank you for that comment.


00:33:03.340 --> 00:33:04.900
All of this is open source.


00:33:04.900 --> 00:33:07.140
And so if you just search Openverse GitHub,


00:33:07.140 --> 00:33:08.340
like we had mentioned earlier,


00:33:08.340 --> 00:33:09.500
'cause if you just search Openverse,


00:33:09.500 --> 00:33:11.700
you'll actually get the site.


00:33:11.700 --> 00:33:14.540
You can go and make an issue on any one of the number


00:33:14.540 --> 00:33:17.020
of repos that we have for describing this project.


00:33:17.020 --> 00:33:19.160
And on top of that too,


00:33:19.160 --> 00:33:23.860
if you know of a content provider,


00:33:23.860 --> 00:33:26.300
like a museum or whatnot that has an API


00:33:26.300 --> 00:33:28.820
that could have its images added to Openverse,


00:33:28.820 --> 00:33:31.220
we're trying to make it really easy to write those.


00:33:31.220 --> 00:33:33.620
we call them provider ingestion scripts.


00:33:33.620 --> 00:33:35.740
So even if you just know of one,


00:33:35.740 --> 00:33:36.820
you can make an issue for us


00:33:36.820 --> 00:33:38.020
and we'll write the provider script.


00:33:38.020 --> 00:33:41.620
But we also love public contributions.


00:33:41.620 --> 00:33:43.300
If you have a source that you wanna add


00:33:43.300 --> 00:33:45.220
and you wanna get it into OpenFirst.


00:33:45.220 --> 00:33:46.300
- Oh yeah, that's great.


00:33:46.300 --> 00:33:47.860
- Brian, now are you ready for your extras?


00:33:47.860 --> 00:33:49.380
- I am, yeah.


00:33:49.380 --> 00:33:50.900
So we were talking about security


00:33:50.900 --> 00:33:54.380
and supply chain for packages.


00:33:54.380 --> 00:33:58.460
And so I noticed this actually, gosh, it just came out.


00:33:58.460 --> 00:34:00.180
Like, was it yesterday?


00:34:00.180 --> 00:34:04.620
yesterday, Brett Cannon announced that he's got a,


00:34:04.620 --> 00:34:09.620
he has a GitHub action that called a pip secure install


00:34:09.620 --> 00:34:13.500
that he published and apparently VS Code


00:34:13.500 --> 00:34:15.760
or VS Code Python uses it.


00:34:15.760 --> 00:34:18.500
But the thing is, is, is it just sort of,


00:34:18.500 --> 00:34:21.100
if you pip install something with requirements file,


00:34:21.100 --> 00:34:23.820
it could have, who knows what it all is in there


00:34:23.820 --> 00:34:25.680
and it, and your requirements,


00:34:25.680 --> 00:34:27.980
and then they have dependencies and they have dependencies.


00:34:27.980 --> 00:34:31.260
Well, this secure install allows you to do


00:34:31.260 --> 00:34:33.980
through GitHub actions, use a requirements file,


00:34:33.980 --> 00:34:38.220
but you have to have stuff in it.


00:34:38.220 --> 00:34:42.820
So you have to have no, it doesn't pick up any dependencies


00:34:42.820 --> 00:34:44.720
and it requires hashes.


00:34:44.720 --> 00:34:48.440
So you have to have a full requirements file


00:34:48.440 --> 00:34:52.980
with all of the dependency tree in there with the hashes


00:34:52.980 --> 00:34:57.740
to eliminate these like supply chain problems.


00:34:57.740 --> 00:35:00.460
It doesn't eliminate them, but once you've tested


00:35:00.460 --> 00:35:03.000
a good package, you can just put this in there.


00:35:03.000 --> 00:35:05.200
So I just wanted to give a shout out


00:35:05.200 --> 00:35:06.940
for this project by Brett.


00:35:06.940 --> 00:35:08.640
So that was cool.


00:35:08.640 --> 00:35:09.480
- Cool.


00:35:09.480 --> 00:35:10.620
- The second thing I wanted to shout out,


00:35:10.620 --> 00:35:12.040
which I'm like totally excited,


00:35:12.040 --> 00:35:14.640
basically this is a shout out to everybody out there


00:35:14.640 --> 00:35:17.220
listening to this that has supported


00:35:17.220 --> 00:35:19.260
the Python Testing with pytest book.


00:35:19.260 --> 00:35:21.760
I was talking right before we started recording


00:35:21.760 --> 00:35:24.820
that today is the last day I get to touch it.


00:35:24.820 --> 00:35:27.540
I get to, my final edits are going in,


00:35:27.540 --> 00:35:31.680
But because of all the beta purchasers,


00:35:31.680 --> 00:35:33.060
it's supported the rewrite


00:35:33.060 --> 00:35:35.420
and just been awesome support.


00:35:35.420 --> 00:35:37.060
And right now it's at number two


00:35:37.060 --> 00:35:39.000
as the best seller on Pragmatic.


00:35:39.000 --> 00:35:40.080
So that's pretty exciting.


00:35:40.080 --> 00:35:41.220
- Congratulations, that's awesome.


00:35:41.220 --> 00:35:42.540
- That's fantastic, yeah.


00:35:42.540 --> 00:35:45.500
- Madison, back to you.


00:35:45.500 --> 00:35:46.980
Anything you wanna give a quick shout out to?


00:35:46.980 --> 00:35:49.420
- Yeah, a couple quick things.


00:35:49.420 --> 00:35:51.140
One thing I forgot to mention about OpenFirst


00:35:51.140 --> 00:35:53.860
is also written mostly in Python too.


00:35:53.860 --> 00:35:55.220
So if you're familiar with Python,


00:35:55.220 --> 00:35:56.340
you can help contribute.


00:35:56.340 --> 00:35:57.180
But on top of that--


00:35:57.180 --> 00:35:58.000
- Not PHP?


00:35:58.000 --> 00:36:00.460
- No, no, that's, yeah, it's kind of interesting


00:36:00.460 --> 00:36:03.000
'cause most of WordPress is PHP and JavaScript,


00:36:03.000 --> 00:36:07.720
but Openverse is a fun little extra blob on the side


00:36:07.720 --> 00:36:09.820
that runs in Python, so.


00:36:09.820 --> 00:36:10.660
- Yeah, beautiful.


00:36:10.660 --> 00:36:13.960
- Speaking of small Python web apps and whatnot,


00:36:13.960 --> 00:36:16.380
some folks in Seattle recently launched


00:36:16.380 --> 00:36:19.500
a new police accountability and information tool.


00:36:19.500 --> 00:36:24.500
And so this is just a tool, it's spd.watch for the URL,


00:36:24.720 --> 00:36:27.480
And it's a tool that just allows you to search


00:36:27.480 --> 00:36:30.320
for police officers in the Seattle area


00:36:30.320 --> 00:36:32.080
and get information on them.


00:36:32.080 --> 00:36:35.320
So, you know, if you're interacting with an officer,


00:36:35.320 --> 00:36:37.600
sort of what their history is,


00:36:37.600 --> 00:36:39.360
how long they've been with the force, that sort of thing.


00:36:39.360 --> 00:36:41.760
It can be really useful for community safety


00:36:41.760 --> 00:36:43.560
and also just accountability.


00:36:43.560 --> 00:36:48.560
And you all had mentioned Just in episode 242.


00:36:48.560 --> 00:36:51.980
I just wanted to give a shout out to it.


00:36:51.980 --> 00:36:54.120
I have been using this for every single project


00:36:54.120 --> 00:37:01.000
I have touched. When I go to a project that doesn't have just I get very angry. It's so


00:37:01.000 --> 00:37:06.100
fantastic. I mean, the fact that you can add comments for different recipes, your recipes


00:37:06.100 --> 00:37:11.800
can build on other recipes. There's a lot of like complexity that you can have in the


00:37:11.800 --> 00:37:17.320
just file, which makes it easy for new people to come on and start contributing. And so


00:37:17.320 --> 00:37:21.720
if you have like, lots of Docker containers that require, you know, certain specialization


00:37:21.720 --> 00:37:26.280
in some sense, you don't have to write this big long read me that describes all the steps you say,


00:37:26.280 --> 00:37:29.640
download just and then just run. And that's it. It's so nice.


00:37:29.640 --> 00:37:33.080
I totally forgot about just so I'm glad you brought it up again.


00:37:33.080 --> 00:37:36.440
It's so I just I can't sing his praises enough, honestly,


00:37:36.440 --> 00:37:41.080
although I do have to say its name does make it very difficult to do Google searches.


00:37:41.080 --> 00:37:51.080
And then lastly, I just want to give a shout out to the GitHub package registry. That's ghcr.io


00:37:51.080 --> 00:37:54.080
for githubcontainerregistry.io.


00:37:54.080 --> 00:37:58.720
They do free Docker image hosting for open source projects.


00:37:58.720 --> 00:38:00.460
And I'm not sure what the pricing is for,


00:38:00.460 --> 00:38:02.580
or we could see the pricing.


00:38:02.580 --> 00:38:05.720
But yeah, they do free for open source projects,


00:38:05.720 --> 00:38:08.760
which Openverse is taking advantage of.


00:38:08.760 --> 00:38:11.020
And I've used on a number of personal projects,


00:38:11.020 --> 00:38:12.800
and it's been incredibly helpful


00:38:12.800 --> 00:38:15.060
to just be able to build and push an image


00:38:15.060 --> 00:38:16.440
for free with GitHub Actions,


00:38:16.440 --> 00:38:17.860
and then have that hosted for free


00:38:17.860 --> 00:38:19.900
on GitHub Container Registry.


00:38:19.900 --> 00:38:20.740
- Oh, that's cool.


00:38:20.740 --> 00:38:21.660
Yeah, it looks handy.


00:38:21.660 --> 00:38:22.500
- Cool.


00:38:22.500 --> 00:38:23.320
- Nice.


00:38:23.320 --> 00:38:24.160
- How about you, Michael?


00:38:24.160 --> 00:38:25.000
- I got a couple as well.


00:38:25.000 --> 00:38:25.980
Yeah, I got a couple.


00:38:25.980 --> 00:38:27.380
Let me go back here.


00:38:27.380 --> 00:38:30.620
So very kind message came out on Twitter saying,


00:38:30.620 --> 00:38:33.340
here's a really cool way you can go to the transcripts


00:38:33.340 --> 00:38:35.500
for the podcast, which is on GitHub.


00:38:35.500 --> 00:38:37.900
And then you can do like a search across them


00:38:37.900 --> 00:38:39.940
using some nice GitHub search features.


00:38:39.940 --> 00:38:41.180
Absolutely true.


00:38:41.180 --> 00:38:42.020
Very nice.


00:38:42.020 --> 00:38:44.060
I also wanted to point out a couple of things


00:38:44.060 --> 00:38:45.820
that we actually have some neat features


00:38:45.820 --> 00:38:47.060
that people can play with.


00:38:47.060 --> 00:38:48.820
First of all, we have a search engine.


00:38:48.820 --> 00:38:50.100
and you can click on the upper right.


00:38:50.100 --> 00:38:51.660
This is, look, we're live streaming.


00:38:51.660 --> 00:38:52.700
So the thing you can search for,


00:38:52.700 --> 00:38:54.600
so I could search for like pytest


00:38:54.600 --> 00:38:56.660
and it would come up with the episodes and whatnot.


00:38:56.660 --> 00:38:57.500
I could search for Hawaii.


00:38:57.500 --> 00:38:58.860
- Like every single episode.


00:38:58.860 --> 00:38:59.940
- Yeah, exactly.


00:38:59.940 --> 00:39:01.520
So we get like our Python on the beach


00:39:01.520 --> 00:39:03.020
that we did recently and whatnot.


00:39:03.020 --> 00:39:05.180
- My search for Just was very difficult,


00:39:05.180 --> 00:39:06.020
but through no fault of your own.


00:39:06.020 --> 00:39:07.500
- Yeah, when you search for Just,


00:39:07.500 --> 00:39:08.340
we get a whole bunch of stuff back.


00:39:08.340 --> 00:39:09.420
- It's a lot, yeah.


00:39:09.420 --> 00:39:10.320
- Yeah, yeah.


00:39:10.320 --> 00:39:11.500
But it's pretty neat.


00:39:11.500 --> 00:39:13.420
It also has a JSON API.


00:39:13.420 --> 00:39:14.900
If people wanna consume that,


00:39:14.900 --> 00:39:16.220
they can go and search for stuff


00:39:16.220 --> 00:39:20.420
and then it'll come up with a JSON variant of results


00:39:20.420 --> 00:39:21.260
and whatnot.


00:39:21.260 --> 00:39:22.100
- Nice.


00:39:22.100 --> 00:39:23.220
- Yeah, so that has been there for a while,


00:39:23.220 --> 00:39:24.860
so people can check that out and that's cool.


00:39:24.860 --> 00:39:27.380
But I also wanted to point out something brand new, Brian.


00:39:27.380 --> 00:39:29.260
I don't know if you even got a chance to play with this


00:39:29.260 --> 00:39:30.100
'cause I just did this.


00:39:30.100 --> 00:39:31.540
- I did, it's so cool.


00:39:31.540 --> 00:39:34.460
- So good, so if you go to the transcripts,


00:39:34.460 --> 00:39:37.860
so if you're on any episode, usually on the right,


00:39:37.860 --> 00:39:40.420
it'll say, unless the screen is really small,


00:39:40.420 --> 00:39:41.260
then it might be the bottom,


00:39:41.260 --> 00:39:43.900
it'll say full transcript, and then you can go in here


00:39:43.900 --> 00:39:45.780
and there's transcripts which are searchable


00:39:45.780 --> 00:39:48.020
and there's a play thing, but there's also now


00:39:48.020 --> 00:39:51.640
a ability to click on any paragraph or sentence,


00:39:51.640 --> 00:39:52.700
the little play button next to it.


00:39:52.700 --> 00:39:53.540
- That's awesome.


00:39:53.540 --> 00:39:55.900
- And it'll just start playing the episode at that time.


00:39:55.900 --> 00:39:56.740
- Very cool.


00:39:56.740 --> 00:39:57.760
- So if people wanna go back and use


00:39:57.760 --> 00:39:59.780
what we've been doing for four or five years,


00:39:59.780 --> 00:40:02.820
whatever it's been, as resources,


00:40:02.820 --> 00:40:04.540
yeah, that should make it a little bit easier.


00:40:04.540 --> 00:40:07.900
- Did you back part this to like old episodes also?


00:40:07.900 --> 00:40:10.740
- Yeah, because this is, so let me tell you how I did it,


00:40:10.740 --> 00:40:12.380
because the transcripts, if you look at them,


00:40:12.380 --> 00:40:13.220
they just have a number,


00:40:13.220 --> 00:40:14.780
they just have like a timestamp there.


00:40:14.780 --> 00:40:16.100
>> Yeah.


00:40:16.100 --> 00:40:19.860
>> So I use this really cool regular expressions 101 or


00:40:19.860 --> 00:40:27.620
regx101.com tool website to build up the regx using named groups.


00:40:27.620 --> 00:40:30.180
And let me just check this out, which is on the screen, you guys.


00:40:30.180 --> 00:40:32.140
You'll check out the link if you're listening.


00:40:32.140 --> 00:40:35.700
You can put the thing you want to search for, and then the groups and


00:40:35.700 --> 00:40:37.460
the regx, it'll show if it's a match.


00:40:37.460 --> 00:40:41.020
It'll actually highlight and name the different elements and


00:40:41.020 --> 00:40:44.660
color code the syntax of your regular expression elements


00:40:44.660 --> 00:40:48.740
into like name sections and all sorts of cool stuff.


00:40:48.740 --> 00:40:49.660
What do you think of that?


00:40:49.660 --> 00:40:50.500
- It's awesome.


00:40:50.500 --> 00:40:53.900
If I'm using, if I'm writing a regular expression


00:40:53.900 --> 00:40:56.340
that's longer than like three or four characters,


00:40:56.340 --> 00:40:58.100
then I'm using Regex 101.


00:40:58.100 --> 00:41:00.080
Like this site is so fantastic.


00:41:00.080 --> 00:41:01.780
- It is, I totally agree.


00:41:01.780 --> 00:41:04.460
- It has the references in the bottom right too


00:41:04.460 --> 00:41:06.300
for like the different, whatever the token is.


00:41:06.300 --> 00:41:07.780
- Yeah, I feel like it says love as well.


00:41:07.780 --> 00:41:08.940
And so it also gives you help.


00:41:08.940 --> 00:41:12.300
If I put it on the D plus,


00:41:12.300 --> 00:41:14.260
which means find one or more numbers,


00:41:14.260 --> 00:41:18.900
it'll say exactly what that stuff means and so on.


00:41:18.900 --> 00:41:22.200
You can say D down here and it'll tell you,


00:41:22.200 --> 00:41:23.980
what is that doing and so on.


00:41:23.980 --> 00:41:25.900
I know it's a quick way. Somewhere there's a search.


00:41:25.900 --> 00:41:28.100
But it was nice that it will actually show you


00:41:28.100 --> 00:41:29.620
which sections and give you


00:41:29.620 --> 00:41:32.580
extra information about it and all neat stuff.


00:41:32.580 --> 00:41:35.020
>> Like full descriptions too of


00:41:35.020 --> 00:41:38.020
what each particular thing is doing is so great.


00:41:38.020 --> 00:41:42.660
There you go. So if you like hover over the backslash and D plus or whatever I got here,


00:41:42.660 --> 00:41:47.140
it says meta escape matches a digit equivalent to bracket zero to nine.


00:41:47.140 --> 00:41:48.260
Here's a name group.


00:41:48.260 --> 00:41:51.300
Here's just that matches the character and you just as you hover,


00:41:51.300 --> 00:41:53.900
you don't start the start of the text, right?


00:41:53.900 --> 00:41:56.220
If a caret and as you hover over these things,


00:41:56.220 --> 00:42:01.180
you get real-time like autocomplete for like a meaning of that section.


00:42:01.180 --> 00:42:03.740
>> And like a full explanation in the top right too,


00:42:03.740 --> 00:42:05.060
which can be really helpful.


00:42:05.060 --> 00:42:08.740
>> Absolutely, because so often when I look at this kind of stuff,


00:42:08.740 --> 00:42:13.020
it's right only, like I got it working and I can't decipher it again.


00:42:13.020 --> 00:42:16.060
So you can put it back in here and come to an understanding which is cool.


00:42:16.060 --> 00:42:18.300
All right, one more thing real quick,


00:42:18.300 --> 00:42:21.060
a new video on my Python short series that I'm doing.


00:42:21.060 --> 00:42:22.500
Do you even need loops in Python?


00:42:22.500 --> 00:42:24.140
People can check that out.


00:42:24.140 --> 00:42:25.980
So it's really about list comprehensions and


00:42:25.980 --> 00:42:28.020
fun stuff you can do with list comprehensions in Python.


00:42:28.020 --> 00:42:29.540
So I've been having a lot of fun with that.


00:42:29.540 --> 00:42:31.860
And the open verse sounds very interesting for


00:42:31.860 --> 00:42:34.500
grabbing content to throw in some of those videos as well.


00:42:34.500 --> 00:42:39.660
**BEN HONG:** Absolutely. All right. Well, that brings us to our joke, I do believe.


00:42:39.660 --> 00:42:41.140
Are you all ready for it?


00:42:41.140 --> 00:42:47.460
**JASON LENGSTORF:** I have one. I found a video. Sorry. This got shared in -- speaking


00:42:47.460 --> 00:42:53.580
of Python loops, I don't know if I'm going to be able to show it. Fingers crossed here.


00:42:53.580 --> 00:43:00.220
This video was shared in a work channel recently. And I'm not going to be able to show it. But


00:43:00.220 --> 00:43:05.220
is a snake that is moving around a box.


00:43:05.220 --> 00:43:06.140
Oh, here we go.


00:43:06.140 --> 00:43:06.980
Perfect.


00:43:06.980 --> 00:43:07.800
(laughing)


00:43:07.800 --> 00:43:08.900
- Oh, I love it.


00:43:08.900 --> 00:43:10.440
- Speaking of Python loops.


00:43:10.440 --> 00:43:11.660
(laughing)


00:43:11.660 --> 00:43:13.980
So you really don't need these Python loops.


00:43:13.980 --> 00:43:15.100
- Yes, exactly.


00:43:15.100 --> 00:43:15.940
Oh my God.


00:43:15.940 --> 00:43:18.220
It's a Python slithering around a box,


00:43:18.220 --> 00:43:20.140
which is rotating in a circle.


00:43:20.140 --> 00:43:21.260
Here's a simple loop with Python.


00:43:21.260 --> 00:43:23.620
- And it also, the snake isn't moving anywhere


00:43:23.620 --> 00:43:25.660
because of the way that it's slithering.


00:43:25.660 --> 00:43:26.740
(laughing)


00:43:26.740 --> 00:43:29.500
So anyway, you really don't need loops.


00:43:29.500 --> 00:43:31.320
I love it, that's awesome.


00:43:31.320 --> 00:43:32.360
Roller out there says,


00:43:32.360 --> 00:43:34.220
the new Python short channel is great, thanks Michael.


00:43:34.220 --> 00:43:37.120
And Alvaro says, I usually test my regex


00:43:37.120 --> 00:43:39.000
with sed and grep on the command line.


00:43:39.000 --> 00:43:39.840
This seems easier.


00:43:39.840 --> 00:43:40.680
(laughing)


00:43:40.680 --> 00:43:42.360
Regex, that thing is awesome.


00:43:42.360 --> 00:43:44.760
All right, so I've got a joke that is not my joke,


00:43:44.760 --> 00:43:47.440
but is from instead Josh Thurston,


00:43:47.440 --> 00:43:48.880
he sent them in a little while ago.


00:43:48.880 --> 00:43:52.080
So there's kind of three together in sequence.


00:43:52.080 --> 00:43:53.040
So here we go.


00:43:53.040 --> 00:43:55.160
How did the hacker get away from the police?


00:43:55.160 --> 00:43:57.480
He just ran somewhere.


00:43:57.480 --> 00:43:58.320
- Boo.


00:43:58.320 --> 00:44:01.480
>> Oh, that joke makes me want to cry.


00:44:01.480 --> 00:44:03.000
>> Oh my goodness.


00:44:03.000 --> 00:44:05.260
>> Where do you find a hacker?


00:44:05.260 --> 00:44:08.560
IndieCrypt. Oh, they're so bad.


00:44:08.560 --> 00:44:10.500
These are full-on, hold on,


00:44:10.500 --> 00:44:11.520
I'll add them to the stream as well.


00:44:11.520 --> 00:44:13.440
Those are full-on dad jokes right there.


00:44:13.440 --> 00:44:16.200
>> That's two thumbs down in a good way.


00:44:16.200 --> 00:44:17.680
>> Absolutely.


00:44:17.680 --> 00:44:20.800
Like overflows the bad buffer and becomes good again.


00:44:20.800 --> 00:44:22.560
>> Yeah, wow.


00:44:22.560 --> 00:44:24.520
>> Fantastic. All right.


00:44:24.520 --> 00:44:26.360
Well, speaking of fantastic, great to have you here, Madison.


00:44:26.360 --> 00:44:27.360
>> Thanks so much for having me.


00:44:27.360 --> 00:44:28.200
- Thanks, always.


00:44:28.200 --> 00:44:29.020
- It's good.


00:44:29.020 --> 00:44:29.860
- You're welcome.


00:44:29.860 --> 00:44:31.000
- So, talk to you later.


00:44:31.000 --> 00:44:31.840
- Yeah, thanks everyone.


00:44:31.840 --> 00:44:32.660
- Have a good one.


00:44:32.660 --> 00:44:34.280
- Thanks for listening to Python Bytes.


00:44:34.280 --> 00:44:37.160
Follow the show on Twitter via @pythonbytes.


00:44:37.160 --> 00:44:40.280
That's Python Bytes as in B-Y-T-E-S.


00:44:40.280 --> 00:44:43.120
Get the full show notes over at pythonbytes.fm.


00:44:43.120 --> 00:44:45.040
If you have a news item we should cover,


00:44:45.040 --> 00:44:48.280
just visit pythonbytes.fm and click submit in the nav bar.


00:44:48.280 --> 00:44:50.600
We're always on the lookout for sharing something cool.


00:44:50.600 --> 00:44:52.560
If you wanna join us for the live recording,


00:44:52.560 --> 00:44:54.840
just visit the website and click live stream


00:44:54.840 --> 00:44:58.020
to get notified of when our next episode goes live.


00:44:58.020 --> 00:45:01.400
That's usually happening at noon Pacific on Wednesdays


00:45:01.400 --> 00:45:02.400
over at YouTube.


00:45:02.400 --> 00:45:04.480
On behalf of myself and Brian Okken,


00:45:04.480 --> 00:45:05.800
this is Michael Kennedy.


00:45:05.800 --> 00:45:08.000
Thank you for listening and sharing this podcast


00:45:08.000 --> 00:45:09.640
with your friends and colleagues.

