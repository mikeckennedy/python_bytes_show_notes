
00:00:00.000 --> 00:00:06.100
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode


00:00:06.100 --> 00:00:10.880
125 recorded April 10th. I'm Michael Kennedy. I'm Brian Hocken.


00:00:10.880 --> 00:00:15.320
And this episode is brought to you by Datadog. Check them out at pythonbytes.fm/datadog


00:00:15.320 --> 00:00:19.700
We'll click the link in your show notes. Tell you more about them later. Brian first, I want to know how you're doing


00:00:19.700 --> 00:00:24.360
I'm doing really good. We just keep reading these numbers and 125. They just keep getting bigger


00:00:24.360 --> 00:00:27.320
I know it's it's pretty incredible the growth of the podcast and you know


00:00:27.320 --> 00:00:30.480
I just want to say thank you to everyone listening, because we keep doing it


00:00:30.480 --> 00:00:32.680
because people care, they appreciate it.


00:00:32.680 --> 00:00:37.120
Sponsors are sponsoring the show because listeners are listening, and it's just great.


00:00:37.120 --> 00:00:40.280
I love doing it with you, so it's cool that we're still going.


00:00:40.280 --> 00:00:40.640
Me too.


00:00:40.640 --> 00:00:41.360
For sure, for sure.


00:00:41.360 --> 00:00:43.360
OK, now I feel like--


00:00:43.360 --> 00:00:47.800
didn't we just have an XKCD about the whole packaging and dependency


00:00:47.800 --> 00:00:48.520
management thing?


00:00:48.520 --> 00:00:49.800
Yeah, actually.


00:00:49.800 --> 00:00:55.920
And I feel like we've got requirements.txt, we have piplock, we have


00:00:55.920 --> 00:00:59.400
Pyproject.toml, probably stuff I don't even know about yet,


00:00:59.400 --> 00:01:03.680
but listeners are going to tell me now because that's the magic of talking about this in the podcast is,


00:01:03.680 --> 00:01:07.280
you mentioned these seven things, but did you know about these three others, which is amazing.


00:01:07.280 --> 00:01:09.680
But here we are again with some more packaging, right?


00:01:09.680 --> 00:01:10.160
Yeah.


00:01:10.160 --> 00:01:10.720
What's the story?


00:01:10.720 --> 00:01:17.120
We've covered Pyproject.toml, and a lot of times we think about that going with either going with


00:01:17.120 --> 00:01:22.320
Flit or Poetry for packaging, but it does work with Setup Tools too.


00:01:22.320 --> 00:01:28.400
So Brian Skin is a friend of the show, and he wrote an article called "My How and Why


00:01:28.400 --> 00:01:31.740
Pi Project TOML and the Source Project Structure."


00:01:31.740 --> 00:01:38.900
So if you're using pi-project.toml with Flit, Flit doesn't allow you to use right now unless


00:01:38.900 --> 00:01:40.540
you fork it or something.


00:01:40.540 --> 00:01:44.260
Flit doesn't allow you to use a source directory to keep all of your sources.


00:01:44.260 --> 00:01:49.020
But you can do setup tools, of course, and how do you get all of those pieces together?


00:01:49.020 --> 00:01:54.060
And so I wanted to highlight this article mostly because Brian put together this article


00:01:54.060 --> 00:02:00.100
with setup tools and pyproject.toml, how to get that working with a source directory.


00:02:00.100 --> 00:02:06.300
And then also included how to put his black settings for black within and talks within


00:02:06.300 --> 00:02:08.700
a toml file as well.


00:02:08.700 --> 00:02:12.940
And just all of the pieces, how to make sure dot all the I's and cross the T's to make


00:02:12.940 --> 00:02:13.940
sure it works.


00:02:13.940 --> 00:02:14.940
- That's really cool.


00:02:14.940 --> 00:02:15.940
Nice work, Brian.


00:02:15.940 --> 00:02:17.900
And Brian Skin, that is.


00:02:17.900 --> 00:02:19.820
And yeah, it brings together a lot of the cool stuff


00:02:19.820 --> 00:02:21.200
we've spoken about already on the show,


00:02:21.200 --> 00:02:22.580
so happy to see that.


00:02:22.580 --> 00:02:25.540
And so do you know, is pyproject.toml,


00:02:25.540 --> 00:02:27.580
that's like the current new hotness


00:02:27.580 --> 00:02:29.900
that is like, where's that?


00:02:29.900 --> 00:02:31.100
It's working with setup tools,


00:02:31.100 --> 00:02:32.180
that's kind of a big deal, right?


00:02:32.180 --> 00:02:34.880
- The pyproject.toml makes it so that you can,


00:02:34.880 --> 00:02:36.840
wheels can be specified,


00:02:36.840 --> 00:02:39.740
and when you're pip installing stuff,


00:02:39.740 --> 00:02:40.740
so pip works with it,


00:02:40.740 --> 00:02:43.220
so that when you're installing things,


00:02:43.220 --> 00:02:46.140
you can tell pip where everything is


00:02:46.140 --> 00:02:47.540
and how things work.


00:02:47.540 --> 00:02:50.300
So the toml file is the standard,


00:02:50.300 --> 00:02:53.740
whether you use setup tools or flit or poetry


00:02:53.740 --> 00:02:56.340
to build the wheel, that's up to you.


00:02:56.340 --> 00:02:57.640
Or you could make up your own,


00:02:57.640 --> 00:03:02.260
but it's the standard interfaces at the toml interface.


00:03:02.260 --> 00:03:03.980
- All right, cool, thanks for that.


00:03:03.980 --> 00:03:05.880
Are you ready to go on an adventure?


00:03:05.880 --> 00:03:08.860
A multi-threaded dungeon, if you will?


00:03:08.860 --> 00:03:10.480
A parallel dungeon.


00:03:10.480 --> 00:03:12.980
So as you and all the listeners probably know,


00:03:12.980 --> 00:03:16.020
I'm a big fan of async, await, parallelism,


00:03:16.020 --> 00:03:17.460
all that kind of stuff.


00:03:17.460 --> 00:03:21.540
But there is the problem, not so much with async and await,


00:03:21.540 --> 00:03:25.460
but certainly with the threading and other forms of parallelism


00:03:25.460 --> 00:03:27.660
of getting your application to a deadlock,


00:03:27.660 --> 00:03:30.980
having race conditions for things that look like they


00:03:30.980 --> 00:03:33.660
should be atomic, but they turn out to be multiple steps.


00:03:33.660 --> 00:03:36.160
And so you could have them interrupted by other threads,


00:03:36.160 --> 00:03:40.780
like x plus equals 1, something to that effect, right?


00:03:40.780 --> 00:03:44.100
So I ran across this cool little website


00:03:44.100 --> 00:03:45.900
called the Deadlock Empire.


00:03:45.900 --> 00:03:49.660
And it's subtitled "Slay Dragons, Master of Concurrency."


00:03:49.660 --> 00:03:50.540
- Oh, that's great.


00:03:50.540 --> 00:03:54.500
- So basically, this is like a coding game in your browser


00:03:54.500 --> 00:03:58.060
that you go along and you go through


00:03:58.060 --> 00:03:59.140
these different challenges.


00:03:59.140 --> 00:04:01.620
And so one of the challenges is to just like


00:04:01.620 --> 00:04:05.640
have two threads hit a lock at the same time.


00:04:05.640 --> 00:04:07.200
So one is blocked waiting for the other


00:04:07.200 --> 00:04:08.500
to go through, for example.


00:04:08.500 --> 00:04:10.900
Another one is to like understand how things


00:04:10.900 --> 00:04:12.820
that look atomic, like X plus equals one,


00:04:12.820 --> 00:04:14.940
actually break into like multiple steps


00:04:14.940 --> 00:04:18.540
and have the threads get in there and like,


00:04:18.540 --> 00:04:20.160
basically call x plus equals one,


00:04:20.160 --> 00:04:21.580
but in the end there's only one more,


00:04:21.580 --> 00:04:24.460
not two more in the value there, things like that.


00:04:24.460 --> 00:04:28.180
So deadlocks are really bad news in programs.


00:04:28.180 --> 00:04:29.660
They're super hard to debug.


00:04:29.660 --> 00:04:31.780
They're not fun, but I think this looks like


00:04:31.780 --> 00:04:32.740
it could be a little bit of fun.


00:04:32.740 --> 00:04:34.980
- Yeah, I'm looking forward to trying this.


00:04:34.980 --> 00:04:37.220
And at the end, there's a boss battle at the end.


00:04:37.220 --> 00:04:38.580
- Boss battle, that's so awesome.


00:04:38.580 --> 00:04:39.580
I haven't made it to the end,


00:04:39.580 --> 00:04:41.620
so I haven't seen the boss yet.


00:04:41.620 --> 00:04:43.740
But yeah, I mean, in the show notes,


00:04:43.740 --> 00:04:45.780
I laid out a simple little example of how


00:04:45.780 --> 00:04:49.580
you might end up doing totally normal stuff that ends up


00:04:49.580 --> 00:04:51.940
with a deadlock in your application.


00:04:51.940 --> 00:04:53.420
Sometimes when your app goes crazy,


00:04:53.420 --> 00:04:56.620
it's obvious the CPU level pinned 100%, at least


00:04:56.620 --> 00:04:57.620
on one core.


00:04:57.620 --> 00:05:00.340
But in deadlocks, it looks like your app is not doing anything.


00:05:00.340 --> 00:05:01.420
You're like, well, what is it doing?


00:05:01.420 --> 00:05:01.820
I don't know.


00:05:01.820 --> 00:05:02.980
It's just waiting.


00:05:02.980 --> 00:05:04.820
It's super frustrating and challenging.


00:05:04.820 --> 00:05:08.460
So I like this little game to help people explore this idea.


00:05:08.460 --> 00:05:10.180
If you're teaching concurrency, it


00:05:10.180 --> 00:05:12.660
seems like a really cool thing to show your students.


00:05:12.660 --> 00:05:13.660
And it just seems fun.


00:05:13.660 --> 00:05:16.380
- Are you able to deadlock with async and await?


00:05:16.380 --> 00:05:17.220
- Well--


00:05:17.220 --> 00:05:18.060
- I guess you could, if two things


00:05:18.060 --> 00:05:19.100
are waiting for each other.


00:05:19.100 --> 00:05:21.300
- The challenge with async and await, it's tricky, right?


00:05:21.300 --> 00:05:23.060
Like, normally you're doing threads,


00:05:23.060 --> 00:05:24.620
you're actually doing parallelism.


00:05:24.620 --> 00:05:26.140
I mean, you have the gill, but of course,


00:05:26.140 --> 00:05:27.620
if you do anything with a network,


00:05:27.620 --> 00:05:29.300
you can kind of split that up


00:05:29.300 --> 00:05:31.020
and still run into this problem.


00:05:31.020 --> 00:05:34.780
But with async, by default, in Python,


00:05:34.780 --> 00:05:36.460
it all runs on a single thread.


00:05:36.460 --> 00:05:37.300
- Okay.


00:05:37.300 --> 00:05:38.360
- Right, you have an async event loop,


00:05:38.360 --> 00:05:40.780
you go to where they say create get event loop,


00:05:40.780 --> 00:05:42.900
and then you queue up work to run on there,


00:05:42.900 --> 00:05:45.680
and then it interlaces in like coroutine style


00:05:45.680 --> 00:05:48.660
with the await keyword, but it doesn't actually run


00:05:48.660 --> 00:05:51.060
at the same time in multiple threads.


00:05:51.060 --> 00:05:53.460
So you wouldn't really run into it with like a re-entrant lock,


00:05:53.460 --> 00:05:55.540
but if you use the regular non-re-entrant version,


00:05:55.540 --> 00:05:56.380
you could.


00:05:56.380 --> 00:05:58.700
So not really, but the problem that you can run into


00:05:58.700 --> 00:06:00.420
is you can still get into the challenge


00:06:00.420 --> 00:06:01.940
of where you have corrupted data,


00:06:01.940 --> 00:06:03.820
and you need effectively some kind of lock.


00:06:03.820 --> 00:06:05.540
So it gets to be pretty tricky, actually.


00:06:05.540 --> 00:06:08.100
And I don't think it's really well-addressed or well laid out


00:06:08.100 --> 00:06:09.580
in the async and await world.


00:06:09.580 --> 00:06:11.220
Not in Python where it's on one thread.


00:06:11.220 --> 00:06:11.720
But yeah, this is cool.


00:06:11.720 --> 00:06:12.720
It's fun.


00:06:12.720 --> 00:06:15.640
All right, I don't even know how to transition this next one.


00:06:15.640 --> 00:06:16.480
You just take it.


00:06:16.480 --> 00:06:17.960
What are we doing with Cog here?


00:06:17.960 --> 00:06:21.320
- Well, Ned Batchelder of coverage fame


00:06:21.320 --> 00:06:23.000
and others, great guy,


00:06:23.000 --> 00:06:26.080
he just released an update to a little tool


00:06:26.080 --> 00:06:27.840
he's got called Cog.


00:06:27.840 --> 00:06:29.880
And so there's a Cog 3.0.


00:06:29.880 --> 00:06:31.600
And I'll just read what he says.


00:06:31.600 --> 00:06:35.840
"Cog, it's a small tool that finds snippets of Python


00:06:35.840 --> 00:06:38.360
"within text files," or within any,


00:06:38.360 --> 00:06:40.360
could be a Python file or another program file,


00:06:40.360 --> 00:06:43.360
but within files, executes the Python snippets


00:06:43.360 --> 00:06:46.660
and then inserts the result back into the file.


00:06:46.660 --> 00:06:48.420
It's kind of a bizarre little thing.


00:06:48.420 --> 00:06:50.380
He says it's good for adding a little bit


00:06:50.380 --> 00:06:53.820
of computational support to an otherwise static file,


00:06:53.820 --> 00:06:57.020
but it hadn't been supported for a few years.


00:06:57.020 --> 00:06:59.980
I mean, it worked, but it hadn't had any updates,


00:06:59.980 --> 00:07:01.600
but he just recently updated it,


00:07:01.600 --> 00:07:04.100
moved it from Bitbucket to GitHub,


00:07:04.100 --> 00:07:08.340
added Travis and AppVeyor, continuous integration,


00:07:08.340 --> 00:07:09.260
bunch of other changes.


00:07:09.260 --> 00:07:14.460
One of the things that's kind of fun is you added mutmut mutation testing.


00:07:14.460 --> 00:07:16.760
I've never heard of mutmut. I've heard of hypothesis.


00:07:16.760 --> 00:07:19.560
Well, yeah, it's completely different. So mutation...


00:07:19.560 --> 00:07:24.860
Well, we should cover it another time, but briefly, mutation testing is running your test suite


00:07:24.860 --> 00:07:29.060
and then randomly changing something about your source code


00:07:29.060 --> 00:07:34.360
and then running your test suite again and making sure that it fails.


00:07:34.360 --> 00:07:40.960
So if you can randomly change your code and your test suite still passes, well then there's problems with your test suite.


00:07:40.960 --> 00:07:41.800
It doesn't cover enough.


00:07:41.800 --> 00:07:45.240
>> Right, right, because changing your code should have some sort of outcome.


00:07:45.240 --> 00:07:51.480
>> Yeah, especially things like switching the less than operator to a greater than operator or something.


00:07:51.480 --> 00:07:52.240
>> Right, right, right.


00:07:52.240 --> 00:08:00.960
>> So one of the things that he commented on, which I've still been thinking about a place to use this, because it's a neat little tool.


00:08:00.960 --> 00:08:05.320
But he said, as a part of the sentence was,


00:08:05.320 --> 00:08:08.720
"Now I use it for making all my presentations."


00:08:08.720 --> 00:08:11.640
So if you had your presentations in Markdown


00:08:11.640 --> 00:08:13.480
and you had a little Python snippet,


00:08:13.480 --> 00:08:16.360
you can have the output of the snippet


00:08:16.360 --> 00:08:19.440
put somewhere else in the same presentation.


00:08:19.440 --> 00:08:20.440
That's very cool.


00:08:20.440 --> 00:08:21.360
- Yeah, that's quite cool.


00:08:21.360 --> 00:08:22.200
- Yeah, anyway.


00:08:22.200 --> 00:08:23.040
- Yeah, you know what it is?


00:08:23.040 --> 00:08:25.120
It reminds me of the sort of like


00:08:25.120 --> 00:08:27.680
Jupyter Notebooks for static files


00:08:27.680 --> 00:08:29.960
before Jupyter Notebooks or something like that.


00:08:29.960 --> 00:08:32.380
without all the dependency of a proper notebook, right?


00:08:32.380 --> 00:08:34.940
It can just be like a markdown file or a text file,


00:08:34.940 --> 00:08:37.520
but the output can kind of appear


00:08:37.520 --> 00:08:39.540
under the code listings live.


00:08:39.540 --> 00:08:41.160
- And there's people doing wacky things


00:08:41.160 --> 00:08:43.640
like generating test functions with it


00:08:43.640 --> 00:08:47.620
or sticking it in C code to generate headers for things


00:08:47.620 --> 00:08:51.260
and all sorts of stuff that is going on with this tool.


00:08:51.260 --> 00:08:52.260
- Oh yeah, how interesting.


00:08:52.260 --> 00:08:53.660
It's like almost a code gen, right?


00:08:53.660 --> 00:08:55.300
'Cause if it can change static files,


00:08:55.300 --> 00:08:56.780
it can change source files.


00:08:56.780 --> 00:08:57.820
- Yeah. - Cool.


00:08:57.820 --> 00:08:59.300
All right, well, that's very cool.


00:08:59.300 --> 00:09:00.140
Thanks for sharing that.


00:09:00.140 --> 00:09:01.940
Let me share a little bit about Datadog


00:09:01.940 --> 00:09:04.700
before we get to the next one, which is a doozy.


00:09:04.700 --> 00:09:06.740
So this episode, as many of them are,


00:09:06.740 --> 00:09:08.180
brought to you by Datadog.


00:09:08.180 --> 00:09:11.380
And so thank you to Datadog for keeping us going strong.


00:09:11.380 --> 00:09:13.740
Datadog's a monitoring and analytics service


00:09:13.740 --> 00:09:15.620
that takes all of your metrics and logs


00:09:15.620 --> 00:09:18.220
and distributed traces and puts them in one place.


00:09:18.220 --> 00:09:21.100
So it auto-instruments things like async libraries,


00:09:21.100 --> 00:09:24.300
like async I/O and frameworks like Django and Tornado,


00:09:24.300 --> 00:09:26.860
and helps you visualize your app performance


00:09:26.860 --> 00:09:28.460
even across boundaries.


00:09:28.460 --> 00:09:31.180
So if you have like microservices and database stuff


00:09:31.180 --> 00:09:33.660
and all that going on, which a lot of us do,


00:09:33.660 --> 00:09:35.860
you can like get a view of a single request


00:09:35.860 --> 00:09:37.680
across all that, which is pretty awesome.


00:09:37.680 --> 00:09:41.320
So get started for free with a 14 day trial


00:09:41.320 --> 00:09:44.900
at pythonbytes.fm/datadog and get a cool t-shirt as well.


00:09:44.900 --> 00:09:46.940
So definitely recommend them


00:09:46.940 --> 00:09:48.100
and they're a big supporter of the show.


00:09:48.100 --> 00:09:48.940
So thanks to that.


00:09:48.940 --> 00:09:49.780
- Yeah, thank you very much.


00:09:49.780 --> 00:09:50.940
- Brian. - Are you a developer?


00:09:50.940 --> 00:09:52.220
- I am a developer.


00:09:52.220 --> 00:09:53.340
I've been surveyed.


00:09:53.340 --> 00:09:54.180
Have you been surveyed?


00:09:54.180 --> 00:09:57.180
- Yes, I always take the stack overflow.


00:09:57.180 --> 00:09:58.300
Wait, I don't know if I do this.


00:09:58.300 --> 00:10:00.060
- Yeah, Stack Overflow Survey.


00:10:00.060 --> 00:10:01.380
Usually do the Python.


00:10:01.380 --> 00:10:02.220
Is that the same one?


00:10:02.220 --> 00:10:03.180
- This is a different one.


00:10:03.180 --> 00:10:04.000
- Okay.


00:10:04.000 --> 00:10:05.900
- But they're both good and they both have good things


00:10:05.900 --> 00:10:06.940
to say about Python.


00:10:06.940 --> 00:10:08.640
They just have a different focus a little bit.


00:10:08.640 --> 00:10:12.140
So I am a huge fan of the Stack Overflow Developer Survey.


00:10:12.140 --> 00:10:14.540
I do kind of like voting.


00:10:14.540 --> 00:10:17.960
I see it as like my civic duty in the community


00:10:17.960 --> 00:10:20.300
to go and fill this thing out when it comes out.


00:10:20.300 --> 00:10:22.660
'Cause it really is the best view, I think,


00:10:22.660 --> 00:10:26.620
of the developer, the state of developers and technology


00:10:26.620 --> 00:10:29.840
for, that's out there, right, that I've seen anyway.


00:10:29.840 --> 00:10:32.740
So the big news is the survey was a while ago,


00:10:32.740 --> 00:10:35.460
but the results and the analysis are out.


00:10:35.460 --> 00:10:37.300
And would you be surprised, Brian,


00:10:37.300 --> 00:10:38.980
to hear there's good news for Python in here?


00:10:38.980 --> 00:10:40.020
- Well, I'm hoping.


00:10:40.020 --> 00:10:40.860
Is there?


00:10:40.860 --> 00:10:41.820
- Yeah, there definitely is.


00:10:41.820 --> 00:10:42.940
So there's a lot of good news.


00:10:42.940 --> 00:10:45.580
Last year we spoke about the incredible growth of Python,


00:10:45.580 --> 00:10:48.380
which is a data science report done by Stack Overflow


00:10:48.380 --> 00:10:50.700
talking about how it's shooting towards the top


00:10:50.700 --> 00:10:53.220
and gonna just blow past all the other languages.


00:10:53.220 --> 00:10:55.780
Well, that is now moving forward.


00:10:55.780 --> 00:10:57.540
You know, we're one year into that trend


00:10:57.540 --> 00:10:59.480
and it's definitely looking like it.


00:10:59.480 --> 00:11:01.780
So we've already seen a language fall,


00:11:01.780 --> 00:11:03.980
a popular language fall victim to Python


00:11:03.980 --> 00:11:06.360
in a sense of it's not as popular.


00:11:06.360 --> 00:11:08.260
So I guess a couple things to call out about this


00:11:08.260 --> 00:11:09.100
that are interesting.


00:11:09.100 --> 00:11:13.620
One is there's a lot of gender inequity focus


00:11:13.620 --> 00:11:14.880
in this report, like much more


00:11:14.880 --> 00:11:16.800
than there has been in the past.


00:11:16.800 --> 00:11:18.180
I would say, especially at the beginning,


00:11:18.180 --> 00:11:19.240
they talk a lot about that.


00:11:19.240 --> 00:11:21.420
And there's a lot of analysis you can read into it.


00:11:21.420 --> 00:11:24.460
I'll have a few comments on it, but not too much.


00:11:24.460 --> 00:11:27.220
Let's start with, I have about six or seven little topics


00:11:27.220 --> 00:11:29.700
I pulled out that I think are worth covering in this format.


00:11:29.700 --> 00:11:31.580
So one is, they ask people,


00:11:31.580 --> 00:11:33.140
do you contribute to open source?


00:11:33.140 --> 00:11:36.800
And they learned that about 65% of professional developers


00:11:36.800 --> 00:11:39.400
on Stack Overflow contribute to open source projects


00:11:39.400 --> 00:11:40.720
at least once a year.


00:11:40.720 --> 00:11:41.740
That's pretty good, right?


00:11:41.740 --> 00:11:43.700
- Yeah, yeah, higher than I was expecting.


00:11:43.700 --> 00:11:45.220
- Yeah, I mean, you would say, of course,


00:11:45.220 --> 00:11:47.300
well, everyone should, but everyone's busy,


00:11:47.300 --> 00:11:49.020
maybe they don't have a project they're skilled in,


00:11:49.020 --> 00:11:51.300
right, they work at a place where they're not allowed to.


00:11:51.300 --> 00:11:53.420
So 65%, that's over half.


00:11:53.420 --> 00:11:54.640
That's pretty good.


00:11:54.640 --> 00:11:55.940
They also broke it out by language.


00:11:55.940 --> 00:11:58.220
It said, "Developers who work with Rust, WebAssembly,


00:11:58.220 --> 00:12:01.580
"and Elixir contribute to open source at the highest rate,


00:12:01.580 --> 00:12:04.580
"while those who work with VBA, C#, and SQL


00:12:04.580 --> 00:12:06.620
"do so at the lowest rate."


00:12:06.620 --> 00:12:08.340
(laughing)


00:12:08.340 --> 00:12:09.180
- Sorry.


00:12:09.180 --> 00:12:10.780
- So take that to mean what you want.


00:12:10.780 --> 00:12:12.700
- Yeah, I haven't seen a lot of VBA


00:12:12.700 --> 00:12:14.060
open source projects lately.


00:12:14.060 --> 00:12:16.860
- Oh yeah, that killer macro, it's out there.


00:12:16.860 --> 00:12:17.880
That macro framework.


00:12:17.880 --> 00:12:19.540
All right, yeah, I mean, some of it,


00:12:19.540 --> 00:12:21.480
It just doesn't really lend itself so much.


00:12:21.480 --> 00:12:23.920
So this one has to do kind of with that equity thing,


00:12:23.920 --> 00:12:25.900
which you spoke about this before


00:12:25.900 --> 00:12:27.860
when you talked about getting a job


00:12:27.860 --> 00:12:29.200
or growing in your career,


00:12:29.200 --> 00:12:30.460
which was a really interesting thing


00:12:30.460 --> 00:12:31.500
you covered on the show.


00:12:31.500 --> 00:12:33.700
And this one was under the title


00:12:33.700 --> 00:12:35.280
of competence and experience.


00:12:35.280 --> 00:12:37.180
And they have a graph that basically graphs


00:12:37.180 --> 00:12:40.580
imposter syndrome year over year,


00:12:40.580 --> 00:12:42.340
broken out by gender.


00:12:42.340 --> 00:12:43.180
- Oh, wow.


00:12:43.180 --> 00:12:44.020
- Which is pretty interesting, okay?


00:12:44.020 --> 00:12:44.840
- Yeah.


00:12:44.840 --> 00:12:46.120
- So we talked about resumes before


00:12:46.120 --> 00:12:48.280
and how men are more likely to apply


00:12:48.280 --> 00:12:49.760
when they're half qualified, they're like,


00:12:49.760 --> 00:12:50.840
I don't really have all these things,


00:12:50.840 --> 00:12:52.800
but hey, I know this part of it really well


00:12:52.800 --> 00:12:54.360
and I'll learn the rest, so forget it,


00:12:54.360 --> 00:12:55.400
I'm applying to this job.


00:12:55.400 --> 00:12:58.520
And women more, statistically speaking,


00:12:58.520 --> 00:13:00.200
are more likely to wait until they have


00:13:00.200 --> 00:13:02.520
all of the requirements met before they'll jump in


00:13:02.520 --> 00:13:04.600
and throw their name in the hat, right?


00:13:04.600 --> 00:13:07.180
Kind of the same thing here in this graph.


00:13:07.180 --> 00:13:11.120
So the idea is, how experienced do you judge yourself to be?


00:13:11.120 --> 00:13:14.240
So do you feel like you're a very qualified developer,


00:13:14.240 --> 00:13:17.540
you're still kind of a newbie, whatever, things like that.


00:13:17.540 --> 00:13:21.900
So they found that the curve for qualified self-assessment


00:13:21.900 --> 00:13:25.600
of men is much higher, especially white guys, I think,


00:13:25.600 --> 00:13:27.460
much higher than for women.


00:13:27.460 --> 00:13:29.180
So regardless of the years,


00:13:29.180 --> 00:13:31.620
like if they have the same amount of experience and stuff,


00:13:31.620 --> 00:13:33.680
which I think is also just kind of like touching


00:13:33.680 --> 00:13:37.100
on this same difference, right, for better or worse.


00:13:37.100 --> 00:13:39.140
So I think that's pretty interesting.


00:13:39.140 --> 00:13:41.440
But on the tech side, we've got the programming


00:13:41.440 --> 00:13:43.100
and scripting and markup languages.


00:13:43.100 --> 00:13:45.740
And I told you that another language falls victim to Python.


00:13:45.740 --> 00:13:50.360
Well, Python is ranked fourth as the most popular programming language.


00:13:50.360 --> 00:13:56.300
But it doesn't really count, because two of those are HTML and SQL,


00:13:56.300 --> 00:14:00.780
which nobody can go write a whole app in HTML or a whole app in SQL.


00:14:00.780 --> 00:14:04.340
It's a complementary thing you use alongside real languages.


00:14:04.340 --> 00:14:08.740
So if you factor those out, there's JavaScript, Python, and Java.


00:14:08.740 --> 00:14:11.980
And it used to be JavaScript, Java, Python.


00:14:11.980 --> 00:14:14.340
So that switch where Python now edges out Java


00:14:14.340 --> 00:14:16.980
as the second most popular actual programming language.


00:14:16.980 --> 00:14:17.700
So that's pretty cool, right?


00:14:17.700 --> 00:14:18.420
Yeah.


00:14:18.420 --> 00:14:20.060
It'll be great when Java's just gone


00:14:20.060 --> 00:14:23.380
so we don't have this confusion of Java JavaScript.


00:14:23.380 --> 00:14:25.860
You know what's so ironic is you're talking about this


00:14:25.860 --> 00:14:28.220
language that was developed in like 10 days


00:14:28.220 --> 00:14:32.540
to throw a little scripting onto a web browser Netscape,


00:14:32.540 --> 00:14:35.620
I think, and then only grabbed the JavaScript name


00:14:35.620 --> 00:14:38.740
because Java was hot at the time, displacing Java.


00:14:38.740 --> 00:14:40.620
That's kind of rough.


00:14:40.620 --> 00:14:41.420
But no, it's true.


00:14:41.420 --> 00:14:43.140
It's totally true, but funny.


00:14:43.140 --> 00:14:46.200
So databases, if you talk about popular ones,


00:14:46.200 --> 00:14:49.240
it was MySQL, Postgres, Microsoft SQL Server,


00:14:49.240 --> 00:14:52.000
SQLite, and MongoDB were in the top five.


00:14:52.000 --> 00:14:56.400
And then I love the dreaded and loved and wanted things.


00:14:56.400 --> 00:14:57.600
What language is dreaded?


00:14:57.600 --> 00:14:59.840
What databases loved and so on?


00:14:59.840 --> 00:15:03.840
So for languages, we have the most loved is Rust and Python.


00:15:03.840 --> 00:15:06.280
The most wanted is Python and JavaScript.


00:15:06.280 --> 00:15:09.160
And the most dreaded ties into our opening statement,


00:15:09.160 --> 00:15:11.240
VPA and Objective-C.


00:15:11.240 --> 00:15:12.280
So what do you think?


00:15:12.280 --> 00:15:13.120
Does that sound right to you?


00:15:13.120 --> 00:15:14.300
- Yeah, definitely.


00:15:14.300 --> 00:15:18.480
People programming Objective-C because they have to.


00:15:18.480 --> 00:15:21.000
- Yeah, I mean, even if you're doing iOS stuff,


00:15:21.000 --> 00:15:22.800
Swift at least, at least.


00:15:22.800 --> 00:15:23.840
There's other options as well,


00:15:23.840 --> 00:15:26.440
but Objective-C's a funky one.


00:15:26.440 --> 00:15:29.640
All right, in terms of loved databases and wanted,


00:15:29.640 --> 00:15:31.200
so most loved is Postgres,


00:15:31.200 --> 00:15:33.840
most wanted is MongoDB.


00:15:33.840 --> 00:15:35.920
Development environments, they have a graph


00:15:35.920 --> 00:15:37.000
of like who's using what.


00:15:37.000 --> 00:15:39.200
Oh my gosh, Visual Studio Code is crushing it.


00:15:39.200 --> 00:15:41.520
It's like 50% and then everything else.


00:15:41.520 --> 00:15:42.360
- Wow.


00:15:42.360 --> 00:15:44.020
- Which Visual Studio Code is only a couple years old,


00:15:44.020 --> 00:15:45.680
so that's a pretty big deal.


00:15:45.680 --> 00:15:46.520
- Yeah.


00:15:46.520 --> 00:15:48.240
- And then finally, one thing I want to point you at,


00:15:48.240 --> 00:15:50.780
point people at, is this thing that says


00:15:50.780 --> 00:15:52.980
how technologies are connected.


00:15:52.980 --> 00:15:54.740
So there's a really cool graph there,


00:15:54.740 --> 00:15:56.900
and if you go there and you find Python


00:15:56.900 --> 00:15:58.160
and you follow the graph out,


00:15:58.160 --> 00:15:59.880
like, it seems like it makes a lot of sense to me.


00:15:59.880 --> 00:16:02.620
It seems like, yeah, these other technologies


00:16:02.620 --> 00:16:05.320
are often used together with Python, and it's pretty cool.


00:16:05.320 --> 00:16:06.900
All right, well, that's the survey.


00:16:06.900 --> 00:16:08.500
I'm linking to the whole survey,


00:16:08.500 --> 00:16:09.480
and people can go check it out,


00:16:09.480 --> 00:16:11.040
because there's a lot to it,


00:16:11.040 --> 00:16:13.040
And these are just some of the interesting bits


00:16:13.040 --> 00:16:14.280
I decided to pull out for us.


00:16:14.280 --> 00:16:15.840
- Yeah, I'm definitely gonna check this out.


00:16:15.840 --> 00:16:17.480
Looks neat. - Yeah, it's a cool one.


00:16:17.480 --> 00:16:20.120
All right, earlier you mentioned mutmut


00:16:20.120 --> 00:16:22.960
and mutation testing and changing your code


00:16:22.960 --> 00:16:25.040
and the fact that if you can change your code,


00:16:25.040 --> 00:16:27.480
especially things like less than to greater than


00:16:27.480 --> 00:16:29.640
on some kind of test, that should make a difference.


00:16:29.640 --> 00:16:31.320
And the problem was you didn't have


00:16:31.320 --> 00:16:33.160
potentially code coverage.


00:16:33.160 --> 00:16:34.640
Well, this next one that you found


00:16:34.640 --> 00:16:36.200
is gonna help us with that, right?


00:16:36.200 --> 00:16:39.880
- Right, so actually I've been using the coverage.py


00:16:39.880 --> 00:16:43.520
And usually with pytest, a lot lately actually,


00:16:43.520 --> 00:16:46.260
to make sure, I kind of mostly do it to find out


00:16:46.260 --> 00:16:48.120
where there's absolutely no coverage,


00:16:48.120 --> 00:16:50.480
which files have no, like nothing on them.


00:16:50.480 --> 00:16:52.840
So I can make sure I go test those.


00:16:52.840 --> 00:16:54.720
If I think I'm covering an API


00:16:54.720 --> 00:16:57.200
to definitely make sure that I really am.


00:16:57.200 --> 00:16:58.700
But a lot of the visualization,


00:16:58.700 --> 00:17:01.580
so the visualization coverage itself will output,


00:17:01.580 --> 00:17:03.520
you can tell it to output an HTML file.


00:17:03.520 --> 00:17:06.320
And that's what I often use to go look at things.


00:17:06.320 --> 00:17:08.680
But some people, sometimes it's me,


00:17:08.680 --> 00:17:10.760
like the command line a lot.


00:17:10.760 --> 00:17:13.840
So this is, we're gonna cover a tool called,


00:17:13.840 --> 00:17:17.400
it's C-U-V apostrophe N-E-R.


00:17:17.400 --> 00:17:18.720
Is it like governor?


00:17:18.720 --> 00:17:20.400
- I think it's, I would say governor, yeah.


00:17:20.400 --> 00:17:24.320
- Governor, kinda like governor with a accent or something?


00:17:24.320 --> 00:17:25.440
- Sounds like a southern governor.


00:17:25.440 --> 00:17:26.800
- Yeah. (laughs)


00:17:26.800 --> 00:17:28.080
So it's pretty cool.


00:17:28.080 --> 00:17:31.560
It does these big graphic visualizations of your coverage,


00:17:31.560 --> 00:17:33.200
but in a terminal window.


00:17:33.200 --> 00:17:35.800
And for better or worse,


00:17:35.800 --> 00:17:38.700
I'm still trying to learn how to interpret them,


00:17:38.700 --> 00:17:40.740
but at the very least, it's pretty cool.


00:17:40.740 --> 00:17:41.720
It's worth trying out,


00:17:41.720 --> 00:17:44.360
but it also does more than just the coverage graphs.


00:17:44.360 --> 00:17:48.460
It'll also highlight, you can do diffs, coverage diffs,


00:17:48.460 --> 00:17:51.260
to figure out where you have problems with your,


00:17:51.260 --> 00:17:52.800
which lines of code need changed,


00:17:52.800 --> 00:17:54.560
or need more coverage.


00:17:54.560 --> 00:17:57.060
So it'll be fun to try to play with it


00:17:57.060 --> 00:17:58.460
and work it into a workflow


00:17:58.460 --> 00:18:00.940
to be able to avoid popping up in the web browser


00:18:00.940 --> 00:18:02.060
for the coverage report.


00:18:02.060 --> 00:18:03.140
- Yeah, it's cool.


00:18:03.140 --> 00:18:06.400
It has a nice, it's like basically a nice visualization


00:18:06.400 --> 00:18:09.260
in ANSI terminal graphics, right?


00:18:09.260 --> 00:18:12.300
And with little histograms of what's covered


00:18:12.300 --> 00:18:14.860
and what's not covered and so on for your code.


00:18:14.860 --> 00:18:15.700
I like it.


00:18:15.700 --> 00:18:17.300
You know, I definitely, as people know,


00:18:17.300 --> 00:18:19.820
a fan of PyCharm and the tools for visualizing stuff


00:18:19.820 --> 00:18:20.660
in there is really great.


00:18:20.660 --> 00:18:23.780
But if you were for some reason logging into some kind


00:18:23.780 --> 00:18:26.740
of continuous integration or some reason you run it


00:18:26.740 --> 00:18:28.500
where you don't have it, this seems like a cool tool


00:18:28.500 --> 00:18:29.340
to bring into play.


00:18:29.340 --> 00:18:32.780
- Yeah, or if also some people like me


00:18:32.780 --> 00:18:36.380
go through days where I try to avoid using the mouse at all.


00:18:36.380 --> 00:18:37.220
- That's a good goal.


00:18:37.220 --> 00:18:38.380
(laughing)


00:18:38.380 --> 00:18:41.140
This next one is something that a couple people have asked


00:18:41.140 --> 00:18:44.640
for and I did have this as just an extra item I was gonna


00:18:44.640 --> 00:18:47.420
throw out there, but I thought it might be fun to dig into


00:18:47.420 --> 00:18:49.620
it because some listeners have asked for it.


00:18:49.620 --> 00:18:54.540
So, big news is I had just launched a set of mobile apps


00:18:54.540 --> 00:18:55.500
for my training site.


00:18:55.500 --> 00:18:56.340
- That's so cool.


00:18:56.340 --> 00:18:57.160
- Yeah, thanks.


00:18:57.160 --> 00:19:00.660
So you can go into your Android tablet or your phone


00:19:00.660 --> 00:19:03.240
or whatever and go to the Play Store and find the app,


00:19:03.240 --> 00:19:04.080
download it, run it.


00:19:04.080 --> 00:19:05.180
It's a truly native app.


00:19:05.180 --> 00:19:06.220
It works really well.


00:19:06.220 --> 00:19:08.860
But they've asked, hey, could you tell us a little bit


00:19:08.860 --> 00:19:10.180
about this app?


00:19:10.180 --> 00:19:11.300
Like, how did you build it?


00:19:11.300 --> 00:19:12.720
Show me how you did that in Python.


00:19:12.720 --> 00:19:15.820
Well, sadly, it's not in Python.


00:19:15.820 --> 00:19:16.940
I wish it were in Python.


00:19:16.940 --> 00:19:18.540
We talk all the time about, wouldn't it


00:19:18.540 --> 00:19:20.420
be better if we had better GUIs in Python?


00:19:20.420 --> 00:19:21.180
But it's not.


00:19:21.180 --> 00:19:24.340
So the story is, basically, I built this app along


00:19:24.340 --> 00:19:25.940
with another developer named Georgie.


00:19:25.940 --> 00:19:26.740
Did a great job.


00:19:26.740 --> 00:19:28.900
Did most of the work on the mobile side of things


00:19:28.900 --> 00:19:32.180
in C# and Xamarin, which I guess takes me back


00:19:32.180 --> 00:19:33.420
to some stuff I did long ago.


00:19:33.420 --> 00:19:36.020
But I looked around, I tried so many different things,


00:19:36.020 --> 00:19:38.220
the Ionic framework so I could do it in JavaScript.


00:19:38.220 --> 00:19:39.900
I looked at some of the Python options


00:19:39.900 --> 00:19:41.840
and they just didn't seem like they were gonna cut it


00:19:41.840 --> 00:19:44.780
for truly mobile native stuff.


00:19:44.780 --> 00:19:47.900
So I built all the mobile apps in C# and Xamarin


00:19:47.900 --> 00:19:49.620
and all the backend stuff is Pyramid,


00:19:49.620 --> 00:19:51.460
MongoDB, Python, of course.


00:19:51.460 --> 00:19:52.900
So that's pretty cool.


00:19:52.900 --> 00:19:55.880
What's also cool is we have about 90% code share


00:19:55.880 --> 00:19:58.180
between the iOS and the Android version.


00:19:58.180 --> 00:20:01.020
So make a change in one almost always applies


00:20:01.020 --> 00:20:02.700
to the other platform, which is pretty cool


00:20:02.700 --> 00:20:05.540
'cause they both compile down to native apps,


00:20:05.540 --> 00:20:07.080
which is pretty fun.


00:20:07.080 --> 00:20:09.900
So yeah, I thought it was a pretty good experience


00:20:09.900 --> 00:20:12.740
in the end and yeah, I wish I could have built it


00:20:12.740 --> 00:20:15.580
all in Python, but that's just the way it goes sometimes.


00:20:15.580 --> 00:20:17.500
Can't do it all in Python, I guess, not yet.


00:20:17.500 --> 00:20:20.180
- I'm actually okay with having a multi-language environment.


00:20:20.180 --> 00:20:23.980
- I'm too, I just would rather be able to stick to one.


00:20:23.980 --> 00:20:25.980
I mean, I guess I can understand the appeal


00:20:25.980 --> 00:20:28.980
the Node.js folks wanting to just have JavaScript everywhere,


00:20:28.980 --> 00:20:32.060
except for that it's JavaScript.


00:20:32.060 --> 00:20:32.860
But it's all right.


00:20:32.860 --> 00:20:34.440
So yeah, it came out pretty good.


00:20:34.440 --> 00:20:36.820
And I definitely-- people are thinking about mobile apps,


00:20:36.820 --> 00:20:37.460
recommend it.


00:20:37.460 --> 00:20:38.280
It seems pretty well.


00:20:38.280 --> 00:20:41.340
I built everything on my Mac, except for the prototype.


00:20:41.340 --> 00:20:43.700
So I guess the way it worked is I built out a prototype


00:20:43.700 --> 00:20:46.780
on Windows as a Windows app, then


00:20:46.780 --> 00:20:50.300
used that to develop all the back end APIs that


00:20:50.300 --> 00:20:53.660
are in Python and Pyramid, and get that all just working fine.


00:20:53.660 --> 00:20:55.580
And then I went to a place called TopTal,


00:20:55.580 --> 00:20:58.460
and they help you find developers, which is pretty cool.


00:20:58.460 --> 00:20:59.900
So I found Georgie there,


00:20:59.900 --> 00:21:01.060
I'll tell you more about that in a sec,


00:21:01.060 --> 00:21:04.860
but found Georgie and gave him my C# code


00:21:04.860 --> 00:21:06.740
and a bunch of specs and he turned that


00:21:06.740 --> 00:21:07.900
into a couple of mobile apps


00:21:07.900 --> 00:21:09.700
with a little tiny bit of help from me.


00:21:09.700 --> 00:21:12.260
So almost all the work went to him on that,


00:21:12.260 --> 00:21:13.580
but it was a pretty good workflow


00:21:13.580 --> 00:21:15.700
to build out with some technology I know,


00:21:15.700 --> 00:21:16.860
give it to someone else, right?


00:21:16.860 --> 00:21:17.940
It really helped that to drive


00:21:17.940 --> 00:21:20.180
the backend services and stuff.


00:21:20.180 --> 00:21:23.680
So it was like maybe five weeks from start to finish,


00:21:23.680 --> 00:21:25.660
which is pretty short for a real app, I think.


00:21:25.660 --> 00:21:27.840
- Yeah, cool that you had the demo


00:21:27.840 --> 00:21:30.820
or a Windows prototype already done.


00:21:30.820 --> 00:21:32.380
- Yeah, exactly, 'cause it was C#,


00:21:32.380 --> 00:21:35.300
like it factored it, just copied over to the Xamarin project


00:21:35.300 --> 00:21:36.700
and it just kept going.


00:21:36.700 --> 00:21:38.780
So anyway, I had a pretty good experience with TopTile.


00:21:38.780 --> 00:21:39.980
If people want to check it out,


00:21:39.980 --> 00:21:41.820
I have put a referral link in there


00:21:41.820 --> 00:21:43.660
and that will give me a little bit of credit


00:21:43.660 --> 00:21:45.140
if you actually sign up.


00:21:45.140 --> 00:21:47.220
So you could sign up as somebody who wants some work


00:21:47.220 --> 00:21:49.140
or somebody who wants to hire somebody.


00:21:49.140 --> 00:21:50.780
If you use that link, it'll help support


00:21:50.780 --> 00:21:52.140
a new feature for my app,


00:21:52.140 --> 00:21:55.740
redirect that money, that credit back into more development


00:21:55.740 --> 00:21:56.700
should be cool.


00:21:56.700 --> 00:21:59.820
So try the apps out at training.talkbython.fm/apps


00:21:59.820 --> 00:22:01.380
and you get two free courses that,


00:22:01.380 --> 00:22:02.280
they're free on the site,


00:22:02.280 --> 00:22:05.000
but they like surface specifically in the app.


00:22:05.000 --> 00:22:06.500
We don't have the iOS version out,


00:22:06.500 --> 00:22:08.140
but we'll have it out soon.


00:22:08.140 --> 00:22:09.620
And I guess one more comment is,


00:22:09.620 --> 00:22:13.460
man, people who work on devices and app developers,


00:22:13.460 --> 00:22:15.220
you have my sympathy, right?


00:22:15.220 --> 00:22:17.740
There are so many wires and so many devices


00:22:17.740 --> 00:22:21.840
on my desktop here, or my desk, like my actual desk.


00:22:21.840 --> 00:22:22.840
It is upsetting.


00:22:22.840 --> 00:22:25.160
- Did you try all the app on a whole bunch of devices?


00:22:25.160 --> 00:22:27.800
- Yeah, I had to go, I was only doing iOS stuff, right?


00:22:27.800 --> 00:22:29.440
I had my iPad and whatnot,


00:22:29.440 --> 00:22:31.200
but we did a lot of work on Android,


00:22:31.200 --> 00:22:33.080
so I had to go buy all these Android devices,


00:22:33.080 --> 00:22:34.680
and now they're everywhere.


00:22:34.680 --> 00:22:37.480
And then the whole interaction with the App Store,


00:22:37.480 --> 00:22:39.340
oh my gosh, if anyone works at Google


00:22:39.340 --> 00:22:44.340
and has say over the App Store approval process,


00:22:44.340 --> 00:22:47.480
it was downright, I don't know what's the right word here,


00:22:47.480 --> 00:22:52.480
It was very disrespectful and very, very bad.


00:22:52.480 --> 00:22:56.280
For example, like the app description says something


00:22:56.280 --> 00:23:00.200
to like, take the great courses at Talk Python Training.


00:23:00.200 --> 00:23:02.880
It's one of the best ways to learn Python online.


00:23:02.880 --> 00:23:04.360
Some to that effect, right?


00:23:04.360 --> 00:23:07.000
The app was immediately rejected because they said,


00:23:07.000 --> 00:23:10.680
you're trying to impersonate an app called Learn Python.


00:23:10.680 --> 00:23:12.780
Okay, so maybe an automated system did this.


00:23:12.780 --> 00:23:13.920
Fine, I'll talk to the people.


00:23:13.920 --> 00:23:16.840
No, it was days of conversation to convince them.


00:23:16.840 --> 00:23:19.400
No, I'm not impersonating an app called Learn Python.


00:23:19.400 --> 00:23:21.560
Python is knowledge that can be learned.


00:23:21.560 --> 00:23:24.120
It is not a thing.


00:23:24.120 --> 00:23:27.840
It is a activity that you can also do here.


00:23:27.840 --> 00:23:29.800
And it was like eight days of stuff like this.


00:23:29.800 --> 00:23:31.600
It was really, really-- it was bad.


00:23:31.600 --> 00:23:34.680
So anyway, finally got through that, got able to launch it.


00:23:34.680 --> 00:23:35.180
Super fun.


00:23:35.180 --> 00:23:37.040
So some people ask for, like, give them


00:23:37.040 --> 00:23:39.400
the background on how the apps were created and whatnot.


00:23:39.400 --> 00:23:40.400
So that's the story.


00:23:40.400 --> 00:23:41.240
OK, cool.


00:23:41.240 --> 00:23:41.800
Cool.


00:23:41.800 --> 00:23:43.980
Yeah, well, that's it for all our main items,


00:23:43.980 --> 00:23:46.640
even the one that got promoted out from the extras.


00:23:46.640 --> 00:23:47.860
But what else do you got to talk about?


00:23:47.860 --> 00:23:50.280
You got a cool little project you finished up for us, right?


00:23:50.280 --> 00:23:53.300
- Yeah, I mean, this is actually a while ago.


00:23:53.300 --> 00:23:56.000
Both of us have Patreon pages set up


00:23:56.000 --> 00:23:58.500
so people can help sponsor the show


00:23:58.500 --> 00:24:02.500
and promote it for both Talk Python and Testing Code.


00:24:02.500 --> 00:24:05.860
And we've had people ask us for that for Python Bytes.


00:24:05.860 --> 00:24:07.180
So it is now up.


00:24:07.180 --> 00:24:09.020
We were just being lazy and not putting it up,


00:24:09.020 --> 00:24:09.980
and now it's up.


00:24:09.980 --> 00:24:11.060
There's a link in the show notes,


00:24:11.060 --> 00:24:14.860
but essentially it's patreon.com/pythonbytes


00:24:14.860 --> 00:24:16.420
with just all one word.


00:24:16.420 --> 00:24:18.260
- Yeah, that's cool, thanks for putting that together.


00:24:18.260 --> 00:24:20.740
Yeah, you know, we have had these Patreons


00:24:20.740 --> 00:24:23.460
both for our individual, personal, private podcasts


00:24:23.460 --> 00:24:26.140
or single person podcasts, but I think it's cool


00:24:26.140 --> 00:24:27.460
to have one for Python Bytes.


00:24:27.460 --> 00:24:29.860
If people wanna support it, they can go there.


00:24:29.860 --> 00:24:31.360
You know, even a dollar a week,


00:24:31.360 --> 00:24:32.780
it doesn't seem like very much,


00:24:32.780 --> 00:24:35.220
but in the end, you know, it totally adds up.


00:24:35.220 --> 00:24:38.500
- On our personal, our solo efforts,


00:24:38.500 --> 00:24:40.900
we have 'em both set up on a per episode.


00:24:40.900 --> 00:24:43.500
This one, I think I've set it up as a per month,


00:24:43.500 --> 00:24:45.740
so you can do as little as a buck a month,


00:24:45.740 --> 00:24:47.440
- Yeah, yeah, that's super cool.


00:24:47.440 --> 00:24:49.460
Also, there's a link in the episode pages now


00:24:49.460 --> 00:24:51.020
to that as well, I updated the site today.


00:24:51.020 --> 00:24:52.860
Sweet, cool, so speaking of sweet,


00:24:52.860 --> 00:24:56.060
every year I'm always super excited to go to PyCon,


00:24:56.060 --> 00:24:58.180
so much fun, going back to Cleveland.


00:24:58.180 --> 00:24:59.020
- Yes. - You're gonna be there,


00:24:59.020 --> 00:25:00.560
of course, yeah? - Yep, Ohio!


00:25:00.560 --> 00:25:04.540
- Ohio, yeah, so this year we're doing a special booth.


00:25:04.540 --> 00:25:06.640
We've had, we had a booth last year,


00:25:06.640 --> 00:25:08.420
and we had our own little booth,


00:25:08.420 --> 00:25:09.900
but we're trying something different this year,


00:25:09.900 --> 00:25:11.020
we'll see how it goes.


00:25:11.020 --> 00:25:12.380
I think it's gonna go well.


00:25:12.380 --> 00:25:14.900
We're doing a partnership with JetBrains,


00:25:14.900 --> 00:25:18.080
and you and me and a bunch of other folks


00:25:18.080 --> 00:25:19.580
who are doing really cool stuff.


00:25:19.580 --> 00:25:22.700
Dan Bader from Real Python, the PyBytes guys,


00:25:22.700 --> 00:25:24.700
some other creators, and trying to do


00:25:24.700 --> 00:25:29.220
like a sort of Python community creator thing


00:25:29.220 --> 00:25:30.060
in this big booth.


00:25:30.060 --> 00:25:32.880
So we have, we'll be at the booth every now and then.


00:25:32.880 --> 00:25:34.640
We're gonna have a theater at the booth.


00:25:34.640 --> 00:25:36.380
So we'll have little mini presentations


00:25:36.380 --> 00:25:38.260
during the expo times.


00:25:38.260 --> 00:25:40.340
We'll have like some desks where we can do


00:25:40.340 --> 00:25:41.700
like little private office hours


00:25:41.700 --> 00:25:43.120
and get togethers, a little table.


00:25:43.120 --> 00:25:47.920
So be sure to check us out somewhere around the JetBrains booth.


00:25:47.920 --> 00:25:49.840
We won't be there all the time, but much of the time.


00:25:49.840 --> 00:25:50.800
>> Yep, it'll be fun.


00:25:50.800 --> 00:25:52.840
>> Yeah, I've already got some cool presentations in mind for


00:25:52.840 --> 00:25:53.640
that little theater thing.


00:25:53.640 --> 00:25:55.160
So hopefully that works well.


00:25:55.160 --> 00:25:57.840
>> Yeah. >> So we opened this whole show with


00:25:57.840 --> 00:25:59.120
XKCD, right?


00:25:59.120 --> 00:26:00.960
Let's round it out with it as well.


00:26:00.960 --> 00:26:02.320
>> Okay. >> So there's a cool thing.


00:26:02.320 --> 00:26:06.520
This is a blog post by Jake VanderPlas and then some examples from somewhere else,


00:26:06.520 --> 00:26:08.800
which came to us on recommendation from Tim Harrison.


00:26:08.800 --> 00:26:09.920
So thanks, Tim.


00:26:09.920 --> 00:26:12.720
And it's XKCD plots in Matlab.


00:26:12.720 --> 00:26:13.840
Have you seen this?


00:26:13.840 --> 00:26:14.760
In Matplotlib, rather.


00:26:14.760 --> 00:26:16.520
- Yeah, I think it's totally fun.


00:26:16.520 --> 00:26:17.500
- It's so fun.


00:26:17.500 --> 00:26:19.720
It's like, yeah, it's really, really cool.


00:26:19.720 --> 00:26:22.360
So if you were gonna create graphs and plots


00:26:22.360 --> 00:26:25.520
like in the style of XKCD,


00:26:25.520 --> 00:26:28.640
well now you just go into Matplotlib


00:26:28.640 --> 00:26:30.840
and you can just tell it to do that.


00:26:30.840 --> 00:26:31.760
Where's the setting?


00:26:31.760 --> 00:26:32.600
- Yeah.


00:26:32.600 --> 00:26:33.420
- Yeah, I don't know.


00:26:33.420 --> 00:26:34.400
I don't see exactly where to set it real quick.


00:26:34.400 --> 00:26:36.240
But anyway, you just go in there and you say,


00:26:36.240 --> 00:26:37.080
you know, plot this,


00:26:37.080 --> 00:26:39.540
and it literally looks like this cartoony style,


00:26:39.540 --> 00:26:40.720
which seems like fun and silly.


00:26:40.720 --> 00:26:43.120
But also I think sometimes when you're trying


00:26:43.120 --> 00:26:45.360
to not be overly scientific,


00:26:45.360 --> 00:26:47.480
you're trying to just make a rough point,


00:26:47.480 --> 00:26:49.880
sometimes that style can be really helpful.


00:26:49.880 --> 00:26:52.120
- Yeah, and it has that look of like you just wrote it


00:26:52.120 --> 00:26:53.520
with a pen or something like that.


00:26:53.520 --> 00:26:54.360
- Yeah, I love it.


00:26:54.360 --> 00:26:56.080
- I'm gonna use it for serious stuff


00:26:56.080 --> 00:26:57.560
because I'm that kind of a person.


00:26:57.560 --> 00:26:59.200
- That's awesome, you totally should.


00:26:59.200 --> 00:27:01.560
Do all your weekly reports and XKCD plots.


00:27:01.560 --> 00:27:04.360
- We have like graphs for our like defect reports


00:27:04.360 --> 00:27:08.000
and pass/fail test results and stuff like that.


00:27:08.000 --> 00:27:10.680
I totally wanna get that in XKCD form.


00:27:10.680 --> 00:27:11.520
- Yeah, awesome.


00:27:11.520 --> 00:27:16.040
So another quick one, the Euro SciPy 2019 conference.


00:27:16.040 --> 00:27:18.360
It was announced it would be September 2nd to 6th


00:27:18.360 --> 00:27:20.440
in Bilbao, Spain.


00:27:20.440 --> 00:27:21.280
That's pretty awesome.


00:27:21.280 --> 00:27:23.440
I would definitely go if I were nearby.


00:27:23.440 --> 00:27:24.360
I don't know, maybe I'll still go,


00:27:24.360 --> 00:27:25.580
but no plans at the moment.


00:27:25.580 --> 00:27:27.360
But anyway, if you're anywhere near there


00:27:27.360 --> 00:27:28.200
and you wanna go,


00:27:28.200 --> 00:27:29.760
that I'm sure is gonna be a great conference.


00:27:29.760 --> 00:27:31.080
And then the last thing,


00:27:31.080 --> 00:27:32.520
a friend of mine, Llewellyn Falco,


00:27:32.520 --> 00:27:35.320
actually turned me on to this this summer.


00:27:35.320 --> 00:27:37.440
It was this winter, actually.


00:27:37.440 --> 00:27:39.980
This thing called Font Ligatures for Coding.


00:27:39.980 --> 00:27:41.060
Have you heard or seen these things?


00:27:41.060 --> 00:27:44.020
- Yeah, I don't like 'em, but tell me more.


00:27:44.020 --> 00:27:44.860
- All right, I'll tell you,


00:27:44.860 --> 00:27:46.100
and you can tell me why you don't like 'em.


00:27:46.100 --> 00:27:48.040
So basically, there are certain fonts,


00:27:48.040 --> 00:27:48.880
and the one that I'm linking to,


00:27:48.880 --> 00:27:49.940
and the one that I've been using


00:27:49.940 --> 00:27:52.340
the last couple of months called Fira Code,


00:27:52.340 --> 00:27:55.300
F-I-R-A Code, is the font,


00:27:55.300 --> 00:27:57.660
and it supports what are called font ligatures,


00:27:57.660 --> 00:27:59.580
and these are off by default in your editor.


00:27:59.580 --> 00:28:01.100
Probably, even if you select the font,


00:28:01.100 --> 00:28:03.780
it probably won't show these, but you can turn it on.


00:28:03.780 --> 00:28:05.420
You can turn on PyCharm, you can turn it on


00:28:05.420 --> 00:28:07.660
in Visual Studio Code, things like that,


00:28:07.660 --> 00:28:11.340
And it will take the actual characters you type


00:28:11.340 --> 00:28:15.620
and reinterpret them as what you would think of them as.


00:28:15.620 --> 00:28:19.220
So for example, if you say exclamation mark equals,


00:28:19.220 --> 00:28:21.860
it replaces that with an equal sign with a slash through it,


00:28:21.860 --> 00:28:23.900
like not equals from math.


00:28:23.900 --> 00:28:26.220
And if you say double equals,


00:28:26.220 --> 00:28:29.820
it has like just a regular equal sign, a little bit longer.


00:28:29.820 --> 00:28:31.980
But if you say triple equals, like from JavaScript,


00:28:31.980 --> 00:28:33.940
where you do an equality test,


00:28:33.940 --> 00:28:35.860
it'll actually put three vertical lines,


00:28:35.860 --> 00:28:38.540
like exactly the same for math.


00:28:38.540 --> 00:28:40.940
And arrows connect, and greater than


00:28:40.940 --> 00:28:43.540
is like the greater than sign you learned in elementary school


00:28:43.540 --> 00:28:44.220
where it's like a greater than and then


00:28:44.220 --> 00:28:46.580
like a little slanty equal thing at the bottom.


00:28:46.580 --> 00:28:48.060
Oh, yeah, for greater than equal?


00:28:48.060 --> 00:28:48.740
Yeah.


00:28:48.740 --> 00:28:50.420
So it takes a little bit to get used to.


00:28:50.420 --> 00:28:53.240
It doesn't actually change the code at all.


00:28:53.240 --> 00:28:55.380
There's a cool little comparison at the bottom where


00:28:55.380 --> 00:28:58.340
it says fear code and fear mono, right, side by side.


00:28:58.340 --> 00:29:00.000
And it shows you all the different things


00:29:00.000 --> 00:29:01.780
that it does and whatnot.


00:29:01.780 --> 00:29:04.820
So it doesn't actually change your code file


00:29:04.820 --> 00:29:08.780
to double equal slash, it just shows you a different view of it.


00:29:08.780 --> 00:29:12.700
So if you hit backslash on a double, like a double equal or not equals,


00:29:12.700 --> 00:29:14.900
it'll just turn into the not sign, like the exclamation mark.


00:29:14.900 --> 00:29:16.700
So anyway, it's pretty fun.


00:29:16.700 --> 00:29:17.740
People can try that out.


00:29:17.740 --> 00:29:19.980
And I actually have grown to really like it.


00:29:19.980 --> 00:29:20.380
OK.


00:29:20.380 --> 00:29:20.980
But you don't like it?


00:29:20.980 --> 00:29:22.260
No, it's not my code.


00:29:22.260 --> 00:29:24.220
That's not what I type.


00:29:24.220 --> 00:29:25.420
It's what you meant, though.


00:29:25.420 --> 00:29:26.300
It's what you meant.


00:29:26.300 --> 00:29:28.820
Only if I spent that much time in math.


00:29:28.820 --> 00:29:30.300
Yeah, that's probably true.


00:29:30.300 --> 00:29:31.380
Yeah.


00:29:31.380 --> 00:29:32.020
OK.


00:29:32.020 --> 00:29:32.980
Yeah, it's pretty funny.


00:29:32.980 --> 00:29:35.940
But the thing that I think is cool is it doesn't actually change the source file,


00:29:35.940 --> 00:29:38.300
so you don't have to impose it on your team.


00:29:38.300 --> 00:29:39.620
You can just impose it on yourself.


00:29:39.620 --> 00:29:40.620
>> Yeah, right.


00:29:40.620 --> 00:29:45.100
>> Or as a good joke on somebody who left their computer foolishly unlocked.


00:29:45.100 --> 00:29:46.420
>> But I will try it.


00:29:46.420 --> 00:29:46.980
>> I like it.


00:29:46.980 --> 00:29:48.580
It takes a little getting used to, but I like it now.


00:29:48.580 --> 00:29:49.620
>> Yeah, cool.


00:29:49.620 --> 00:29:53.260
>> I feel like we should, as usual, round this out with a good joke.


00:29:53.260 --> 00:29:54.860
>> Or at least a joke.


00:29:54.860 --> 00:29:56.860
>> Okay, we can't promise it's good.


00:29:56.860 --> 00:29:58.460
No, not that subjective, but


00:29:58.460 --> 00:30:00.780
we can promise something that we perceive to be a joke.


00:30:00.780 --> 00:30:01.700
>> Okay. >> All right, hit me.


00:30:01.700 --> 00:30:07.180
first one, when your hammer is C++ everything begins to look like a thumb.


00:30:07.180 --> 00:30:13.040
Your thumb mostly. Yeah. And this is one of my favorites, I don't know if we've


00:30:13.040 --> 00:30:18.260
covered it already, why don't jokes work in octal? I don't know. Because 7, 10, 11.


00:30:18.260 --> 00:30:23.240
Okay, if that one just totally passed by you I'm gonna make it even less funny by


00:30:23.240 --> 00:30:28.300
explaining it. So it's from the joke of why is 6 afraid of 7 because 7, 8, 9,


00:30:28.300 --> 00:30:31.800
but eight and nine in octal is 10 and 11.


00:30:31.800 --> 00:30:32.640
Okay.


00:30:32.640 --> 00:30:33.460
- Yeah, that's good.


00:30:33.460 --> 00:30:35.760
- But whenever we tell this, the seven, eight, nine joke,


00:30:35.760 --> 00:30:37.960
my youngest daughter always follows that up with,


00:30:37.960 --> 00:30:39.840
well, why did seven, eight, nine?


00:30:39.840 --> 00:30:42.880
Because he was trying to eat three square meals a day.


00:30:42.880 --> 00:30:43.720
- Perfect.


00:30:43.720 --> 00:30:45.640
- How about you?


00:30:45.640 --> 00:30:46.460
- I love it.


00:30:46.460 --> 00:30:49.240
All right, I got one real quick one here,


00:30:49.240 --> 00:30:51.580
which I feel like actually,


00:30:51.580 --> 00:30:53.440
see, you're already laughing, right?


00:30:53.440 --> 00:30:54.280
It's good.


00:30:54.280 --> 00:30:55.120
- Yeah, yeah, it's good.


00:30:55.120 --> 00:30:56.240
- So, 'cause you're a Vim user,


00:30:56.240 --> 00:30:58.020
a lot of people are Vim users,


00:30:58.020 --> 00:31:02.760
But Vim is like voodoo black magic keyboard stuff that happens.


00:31:02.760 --> 00:31:05.100
And it's really cool when you know it, but every now and then you're like,


00:31:05.100 --> 00:31:07.820
why can't I select that word or whatever?


00:31:07.820 --> 00:31:11.260
So the joke is, I've been using Vim for a long time now,


00:31:11.260 --> 00:31:13.100
mainly because I can't figure out how to exit.


00:31:13.100 --> 00:31:15.980
[LAUGHTER]


00:31:15.980 --> 00:31:17.740
It's perfect.


00:31:17.740 --> 00:31:19.360
All right, well, let's leave it there.


00:31:19.360 --> 00:31:21.540
Thanks, everyone, for listening, as always.


00:31:21.540 --> 00:31:22.380
Yeah, thank you.


00:31:22.380 --> 00:31:24.100
Thank you for listening to Python Bytes.


00:31:24.100 --> 00:31:26.580
Follow the show on Twitter via @PythonBytes.


00:31:26.580 --> 00:31:29.620
That's Python Bytes as in B-Y-T-E-S.


00:31:29.620 --> 00:31:32.820
And get the full show notes at pythonbytes.fm.


00:31:32.820 --> 00:31:34.440
If you have a news item you want featured,


00:31:34.440 --> 00:31:36.900
just visit pythonbytes.fm and send it our way.


00:31:36.900 --> 00:31:39.780
We're always on the lookout for sharing something cool.


00:31:39.780 --> 00:31:41.620
On behalf of myself and Brian Auken,


00:31:41.620 --> 00:31:42.940
this is Michael Kennedy.


00:31:42.940 --> 00:31:44.940
Thank you for listening and sharing this podcast


00:31:44.940 --> 00:31:46.580
with your friends and colleagues.

