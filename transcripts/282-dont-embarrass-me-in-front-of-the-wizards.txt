00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 282. Recorded may 3 2022. I'm Michael Kennedy. And

00:00:12 I am Brian Aachen.

00:00:13 It's great to have you here. Brian is just us just the two of us. Just like hold title. I know. But we have our friends out in the audience. So we're not entirely alone. So, let's kick it off. I'm, I know you have a particularly exciting announcement. topic to cover here. So definitely, let's, let's get into it.

00:00:33 Okay. So, um, pi script. So this was a an announcement at Pycon us by anacondas CEO Peter Wang. During a keynote. I wasn't there, but like everybody was tweeting about it. So it almost felt like I was I was there. So but but I, I haven't seen the presentation. So I can't wait. Can't wait till that goes on.

00:00:56 And if I know are the videos, I haven't not seen the videos for the presentations at Pycon out yet. Are they out yet? I just missed it. I haven't looked at my YouTube broken. up

00:01:07 full of this stuff was like what's up with? Is it supposed to be next day or something? I don't know.

00:01:11 I know, I know. Anyway, somebody love to livestream it, but I didn't see an option. So anyway, I'm looking forward to watching this one in particular when it comes out because this is big news.

00:01:20 So py script is Python in the browser. So what does that mean? It is built on top of pi iodide, which is a part of C Python based on Windows web assembly. I'm pretty sure we've covered Paya died before, but so this is a pretty neat thing. And one of the things that this, so the postscript dotnet you go to it, it's got a little it's kind of actually, it's it's like hype, and it sounds neat. And you can do Python in the browser neat with the PI script tags. But what does that mean? So there's a if you go down to the bottom, there's a GitHub repo that you can go look at, this is what I suggest. And this will talk about, there's a getting started guide. But what I did is just follow this clone of the repo. And then I went in and did the into the JavaScript area, and then did npm install, and then did this dev Run Run dev thing. So this only took me like five minutes to get this far. And, and what you have is you've got one of the things that it has is it has an examples folder. And you can just open this up now in your local, your local browser localhost. And there's all these cool demos like there's a repple, where you can just do it's kind of like Jupiter where you can say like x equals three, let's do this, and then x and then if I do shift, enter, it evaluates it. And he does that. That's pretty neat.

00:02:41 That's awesome. Yeah,

00:02:43 To Do app here, so make sure you listen to our podcasts, go by Python testing the PI test, we'll check that because we know you already bought that. So and then, here's an example with d3. Graphics. This is neat. I don't think I've ever done this the there's an Altair example. And this is pretty fun, because you click around and it changes the above. It's like an interactive thing. This is fun. We use Altera with a project at work. So this is the the Mandelbrot set. So there's some code. So all of this code is in the repo. So you can look at the examples and look exactly how the code is done. There's a HTML file and a python file for all of these. So you can check it out. Actually, I don't know about the Python thing. It's it's HTML and Python within the HTML code embedded. So there isn't a separate file. But you have, you can do imports and all this sort of stuff, too. I went too far. But I wanted to bring up there's also an article that we're going to link to in the show notes that is called postscript unleash the power of Python in your browser. This is by Eric Lewis lewinsohn. And it runs through it's it's a pretty interesting little quick read of what it is, if you're not familiar with web assembly and pi died. So it's nice. It's thanks. What do you think Michael? So

00:04:00 excited? I'm very excited. You know, there's been progress on the web assembly plus Python side on several occurrences that were they give you a sense of what's possible, but they didn't give you a thing to build with? Yeah, what I mean? Yeah. So for example, power died is awesome. But it's kind of like, well, if I want to sort of host a Jupiter kernel in my browser, like I can, I can kind of do that, right? The web assembly, Python itself is great, but it doesn't specify a way to have a UI of your webpage interact with Python. It's just, oh, you could execute Python over here. Well, like and then what, you know what I mean, which is, which is still good. But there's not something where like, I can have a button on there that like wires up to this thing in Python, and I have this list that binds in that way and so on. Yeah. And this looks like we might be there. Like one of the things they talk about on the page is not just running Python in the browser, and the Python ECOSYS Some, as you pointed out, but really importantly, two more things Python with JavaScript bi directional communication between Python and JavaScript objects. Yeah. So you can wire into like events on the page and other DOM type of things. Yeah. So then a visual application development, but it ties in with that with us readily available curated UI components, such as buttons, containers, text boxes, and more. Oh, yeah.

00:05:24 Yeah, I mean, like, these are just a little quick examples. But I'd love to see some some bigger examples of things like that, like being able to connect it, you know, yeah, JavaScript interaction with stuff on on the Python side. That'll be neat. Yeah, it's

00:05:39 weird to see Python written just straight in the browser, you know, yeah, back here, you have like, angle bracket, pi dash script, and just import anti gravity anti gravity dot fly. Like, wait, alright,

00:05:51 well, so this, this is a good exam, I picked this example for one is because it does do an import. So this is there's like a path thing you can set up. So you can put coat you can put code, all your code doesn't have to be in HTML, it can be in in a python file. So you can debug it there, which that's where you want to debug it. And then you can implement and call it within Python. This, this is probably more where I would use it is putting most of my code somewhere else. And then

00:06:18 yeah, that's what I want to see. I would want to see just Python files and just effectively a script tag for me, you probably maybe you can't do it directly as a script tag. But you could do Yeah, bracket high script, and then just import and run. Right. Yeah. So literally point basically, I haven't looked

00:06:34 at this before. So the antigravity.py that is bringing in is bringing in some PP iodide stuff, and to be able to work it. So

00:06:44 I'm seeing some from Doc, this is Python code from document, or sorry, from Jas important document. Yeah. And set interval. And so those are the things you do there. Let's see. Are there any any callbacks? I don't see any callbacks there? Oh, yeah, yeah, this set interval as a callback self dot move when the interval the JavaScript interval fires. So under under fly that is hooking into time, really? Yeah, my callback,

00:07:10 so we should check that out. So it was was that so the Integra I should have done this ahead of time? The antigravity is not linked to but I'll just like bring it up. And forever, based on

00:07:24 Wow, oh, my gosh, this is so amazing. People have to do this. Oh, cool. We all know import antigravity and we've got to know the XKCD that comes up. But yes, having an animated, it's great way to live. It's not just is the person who, who says how are you flying? The person who says I'm playing with Python? Like that thing is alive and cruising around. I love it. Yeah. And that's based on the callback, right? That's, that's calling Python based on the set interval timer callback in JavaScript. Yep. Yeah. And it to me that has been the missing piece. Like, how do I wire up is like, great if I can just execute Python and have you know, like a number have come out. But what I want is view in Python or reactive, I want to build the UI in Python and just not deal with JavaScript and be able to do so many more things on the front end. I mean, this opens up stuff like progressive web apps. Yeah. Which could be really amazing for the Python space, right? Like I'm hearing Vivaldi. If I go to my email client, just in the browser, I can right click and install it gets its own app that works offline, it like pulls its data down into the local DB or whatever. Theoretically, you could do this right, you could pull down the C Python wasum. You put it on the 5k, high script file, and then just somehow use JavaScript to Python to talk to local DBS. I mean, what if we get like, oh, RMS in Python going? Oh, yeah, we have one of our back ends is the web browser. Local dB. Yeah. Or something like that? I mean, this is great. I would love I'm very excited for where this might go. Sky's the limit. Right. That's what that little flying character. Yeah. Okay. Well, good job. Anaconda, folks. This was Fabio and crew. So really, really nice. That was super psyched. How am I gonna follow that one? Come on.

00:09:13 Just, I'll give it a try. No, I've got some good items. They're just not flying around. Amazing. Python in the browser. Amazing. So Bloomberg has a lot of Python going on. And Bloomberg actually has a pretty cool like tech engineering blog where they talk about some of the stuff going on at Bloomberg. Right? Yeah, one of the really good articles I read from this from them was about how to really set up and run micro whiskey in production and like this huge, long, deep list of like, here's a bunch of flags you probably never thought about and here's why you should care about them in Python. Really good stuff. So they're back with another thing that they use that is cool, called memory, like memory, but memory. It is a memory profile. For Python, so if you want to understand the performance of your application, especially around memory, here's a pretty neat tool. Now, let me just get right out of the way before I forget Linux only. So if you're not using Linux, just close your ears now, just kidding, like, you could all if you're on Windows, you could just run your Python App under WsL, and then profile it and then go back to run it on Windows. Or, if you're on Mac, just do a VM or something, right? Anyway, it only runs on Linux. But because Python is so similar across the platforms, I'm sure you could just test your code there, even if that's not the main use case. Alright, so you get all these different visualizations of memory usage. You can track allocations for Python code in native extension modules, like NumPy, or something like that. And even within C, Python itself, so you get sort of a holistic view of the memory, which is pretty awesome. Yeah, yeah. And it'll give you have different memory reports, we'll talk about them a little bit. And you can use it as a CLI tool, just like kind of like timeout or whatever. You can just say, memory, run my app. And then when your app exits, it's like, here's what happened. One of the things that's super challenging about complicated applications and web apps and stuff, is you want to focus on a particular scenario. And there's so much overhead of like startup and other things. So for example, if I just want to profile a bass API API call, if I just say, run it up, and I go hit that API, all of the infrastructure starting up UV corn and fast API and Python, just like it just dwarfs whatever that little thing is usually. So there's also a programmable API that says, you know, you could create like a context manager, like, I don't know if it actually is that way. But you could certainly build it if it doesn't exist, like with, with memory profile here and just do a little block of code and then get an answer, which I think is pretty neat. Alvaro asked if it accepts an entry point, I suspect you could call an entry point. Because you just do the run on the command prompt, so you could get over whatever you run. Yeah, yeah, exactly. But the problem is, there's still like the start up of just see Python itself, right, like, always fine. Just the imports and all that. It's just way more overhead than clog clutters it up. Anyway, let's hit some notable features of memory. It traces every function call as opposed to samplings. It. So instead of just going every millisecond, what do you do now? What do you do? Now? Let's just record that right? It actually exactly traces so you don't miss any functions being called even if they're brief. It handles native calls in C Plus Plus library. So the entire stack is represented in the results, which is pretty cool. That's pretty neat. And it's pretty, pretty dope. Apparently, it's blazing fast. There's some kind of character I think it's a race car, they're like causes minimal slowdown in the app. If you're doing Python raising, if you do the native code stuff, it's a little bit slower, it says, but that's optional. You get a bunch of reports. We'll see those in minutes that works on Python threads. So you can see for I know all these young people watching, but you check out the webpage. There's a little thread like a sewing thread emoji Twitter thread. Deep, does it also works on native threads, like C++ threads and native extensions, which it represents as an alien. Plus the thread. I love it.

00:13:18 Iliyan threads. Yeah,

00:13:19 yeah. So let's look over here real quick. We'll look at just I guess, the reporting, right? I mean, the running is super simple. As I said, memory run Python file with arguments or memory run dash m module with arguments. These are the places you could put your entry point and so on. And Dean in the audience's we've had a rich spotting. Okay, I haven't haven't pulled that up yet. But very nice. So there's different ways in which you can view it. And the first one that I ran across, which is pretty interesting. If you're familiar with classes, or you want to go old school like tarp, or one of these things, you can run in just the terminal and get like, not only with rich or not rich with top, but rich output like glances, is you can run it in a live mode where while it's running, it'll show you what's happening with the memory. That is so awesome. That's pretty cool. Yeah, yeah. So instead of just showing you a memory graph, it's I guess what we're running here right now with this many allocations and so on. Yeah, like, that looks super nifty with the dash dash live.

00:14:20 And if you've got something interactive, you can interact with it and watch the memory change then. So

00:14:25 yeah, yeah, you can cycle through threads. You can sort by total memory or its own memory of the common thing you do in profiling like this. And all this stuff. It's called or just this method itself, sort of my allocations versus memory usage is all kinds of stuff. So that's really neat. It will track the allocations across forks, as in process sub process, okay, why would you care because multi processing, do you want to track some kind of multi processing memory workflow, it will actually do that just lets dash dash follow fork and it'll like aggregate the stats at cross the different processes, kind of insane. Let's see if we can get down here, you can do that the summary reporter, which is kind of a nice, just, you know, this is probably what you would expect flame graphs. If I can get down here somewhere it also like sort of the color and the width of these bars. I'll show you how significant it is. There's a nice tree version, that'll show you the biggest 10 allocations, and then a call stack sort of in and out with trees, and like how much memory is being allocated in each one of those, and so on. So, yeah, this is a nice app. Right? Nice. Utility. Definitely. Cool. Yeah, Indeed, indeed. So if you want to track down memory leaks, or you're just wondering, like, why is my program using so much memory fired up? Let it run for a while, see what happens. All right, back to you, right?

00:15:49 Well, I want to bring up a PI test tool. So it was a, I have recently, I've often used PI test X dist for parallel. So x dist is a way you can just say that it's it's the one that I heard about first, for running PI tests in parallel. So you've got, you know, like, tons of unit tests, maybe and you want to just speed them up, you can throw them throw a dash n for something like that at it. And it'll just throw them launched different processes and, and run pi tests in parallel on a bunch of them. So cuts time down, but there's overhead. And I was recommending this to somebody on Twitter. And and there was a I think it was Bruno Olivia suggested a couple of alternatives. And one of them was PYtest parallel, which I know I've run across, but I haven't played with it for a while. So I tried it out. And it's actually like, really cool. So one of the one of the PI test X does does a lot, one of the things it does is it not just it's not just multiprocessor, but it can be on different actual different computers. So you can launch them on

00:16:59 Oh, nice. Grid computing, almost Yeah, you can SSH into

00:17:03 different systems and have it run in parallel. But you know, you don't, I don't know usually need that kind of power. The one thing it doesn't do is threads. So it's processed based and piteous parallel does both. So you can say, you can give it you can give it to where we have, I'm gonna go down to the examples. So you can give it a number of workers. And it'll tell it to, that's how many processes it'll spin up, or how many CPUs now, you can also give it a test per worker, and then it'll run in multi threading mode. And you can give it auto on both of these. And it's a, this is extremely useful for if to by default, this is turned off by default, the features if you just say workers equals five or something, it won't do multiple threat multi threading. And the reason is it because you need to make sure your tests are thread safe, and many are not. So I tried it on a couple of my

00:18:02 even if they're isolated, they might not be thread safe, right? Yeah. It's it's another level of consideration.

00:18:09 However, if there are, there's a lot of small, especially small, not really unit, like system tests, but a lot of unit tests are just testing little Python code, if you've got part of that is a lot of projects, that's a big chunk of the test load. So being able to do multi threading is really nice. But you know, even with just multiprocessing, I tried this on a few different projects, and there were like I traded on flask. And the the parallel version that using Bitez parallel was like three times faster than the X dist version. So. So based on I, there's there was another one that Bruno mentioned, but I think these two are really solid X test in parallel. So if you want to speed up your test runtimes, I would try both on your project and just see play with them and see, see which one's faster on. Many of the projects I tried parallel was at least as fast or faster than exsist. So it's kind of nice. Yeah,

00:19:09 that's cool. This looks great. I like it, and having your test run fasters always good. Do you do anything crazy? Like do you set up your editor to auto run tests on file change or anything like that?

00:19:21 Sometimes, one of the things that I've always

00:19:24 I've done it a few times, but it always makes me nervous. And like I just like it's unnerving to me that it just keeps running.

00:19:29 One of the things that I really like around that was added to pi test not too long ago, was is stepwise. So that's not really all the running it all the time. But stepwise will. And this would be a handy one to run all the time. So what stepwise does is it takes you can run all your tests in stepwise. And when you run it again, it'll start at the first failing test because it assumes you're trying to fix something, they'll start at that and then run until it finds a failure. So if you If you haven't fixed this first failure, just keep running that one until you fixed it, and it'll go to the next one. And so I do that a lot while I'm trying to debug something. That's cool. And, and hooking that up with like an auto, like a watch feature. There's a bunch of ways you can watch your code to do that. Yeah, it's fun. Nice.

00:20:19 Very cool. So let's do some real time follow up here. Uh, first, Alvaro has been on mischievious. Asking, I wonder what happened if I install both plugins, both X dist and parallel?

00:20:32 You can, I don't know if you can run them at the same time, I should try. I have it installed on like the flask one I ran it, I installed both of them and then try to move, but not at the same time

00:20:42 to try to look the Forex it's gonna go so fast. And then just going back to pi script, there's like tons of excitement about pi scripts. Yeah, JL is excited. Brandon's excited. And David says, I hope someday I can say back in my day, you couldn't just learn Python, you had to learn JavaScript, too. Yeah, Indeed, indeed. Let's see. So I got one more to cover, that is going to be fun as well. And this one comes to us from former guest co host, Michael Fikret. Sorry, Matthew Fikret. And Matthew is a great supporter of the show, since all sorts of interesting things in to help us out and good ideas. And this is yet another one coming from the data science side of things, saying you know, one of the things you have to do often isn't, say a Jupyter Notebook is Go download a file off of an API, or just some link or s3 bucket or whatever, and you want to process it. And if you use requests, while great, you end up making the request, verifying that it worked, reading the stream into bytes, writing the bytes to a file, picking the file name, and then using that file name to open it and then say, now you can process it, right? So there's this thing called hooch, a friend to fetch your data father, I Puj, go get go with my files, like a little boy, a little friendly dog that also seems to hold a snake in its mouth. So that's pretty cool. Anyway, who wouldn't want a dog that can wrangle snakes to go help you with your notebooks? Anyway, the idea is, you can do all of what I described with requests, you can do that in one line of code. Oh, wow. Yeah. And you get other cool features as well. So it says, Look, you can just make this one function call and it'll save it in, it'll also cache your files locally. So some of these files that data scientists especially work with are massive, right? You know, it's like a gig. And every time you run the notebook, you don't want it to download the gig again, you just want it to run more quickly. So you can set up a location for it to cache it, you can pass in a hash of the file to say, I want to get this file and I expect it to be this MD file or whatever the heck the hash is that they're using, so that you can be sure it doesn't change, right? So if you're doing like reproducible data science, you say, what you do is you download this file and you apply this algorithm, then you get this picture. Well, if the data changes, I bet the picture changes, right. And so you can put out like a layer of verification that it's unchanged from last time you decided what it should be. That's pretty cool. You can do multiple protocols. So not just HTTP, HTTPS, but FTP. Oh, my gosh, s FTP. Oh, yeah. So I have the basic auth. It'll also automatically resolve, D, D. O eyes, digital object identifiers, which are used in places like fig share and Zen Zenodo. And this is about the reproducible science like, here's, here's the file and like we've been assigned an immutable ID that we can always refer back to it. So you can just say, here's the ID and you'll actually get the file and you know, even unzip and decompress files upon download. Neat. Bernina. Yeah, yeah, straightforward. Let's let me see if I can find an example of I love I like the

00:23:47 the section of learning about it. It's called training your pitch. That's cute.

00:23:53 Oh, nice. I love it. Apparently, it has progress bars was downloaded actions, logging, and you get multiple files. But the main use case is just file equals Bucha dot retrieve URL. Done? That seems pretty nice. Yeah,

00:24:08 that's great. It's my data. Here it is.

00:24:11 Oh, cool. So painful. Roy out in the audience says, Hey, folks, funny. We're adding this to sci fi optional to have a sci fi data set. submodule psychic image is using this as well. Yeah. Very cool. Thanks for the extra background there. Yeah, but I think this is great. In fact, I know it's sells itself. It builds itself as being for data science. I also like to download files sometimes and not go through five or six lines of code. I could use this.

00:24:37 Yeah, there's there's a lot of stuff that data science people are doing that we can use in lots of other fields. So

00:24:44 indeed, I do think that's actually one of the really interesting aspects of Python is we have so many people from these different areas that it's not just all CS grads, doing the same thing. Yeah. Yeah, for sure. All right. Well, those are my items. Today, Brian,

00:25:01 nice, um, I don't have any extras today. Do you have any extra information in stuff?

00:25:07 I do. I do have extras. So this one I'm very, very excited about, I have a new course that I just released, called up and running with get a pragmatic UI based introduction. So I'm really excited I just released I haven't really even announced it yet. But I finished getting it all public and online and turned all the GitHub repos public and all that stuff, right before we jumped on the call today. And the idea is, there are tons of Git courses. So why create a Git course? Well, I feel like so many of them are just like, Okay, we're just going to work in the terminal or the command prompt. And you're just going to assume that like, that's the world of Git that you live in, then like kind of at least common denominator approach. And while that, that is useful, like, I don't think that's how most people are working, right, if you're in Visual Studio code, or HR and like, there's great hotkeys, just to do the Git stuff and see the history and whatnot. And there's other tools like source tree and power and other so it kind of takes this approach of like, well, let's take all the modern tools that give you the best visibility and teach you get with that. So So we

00:26:09 define which GUI tools are using or which ones are your

00:26:13 Visual Studio Code, okay, by charm SourceTree. Okay, thing. And so I've done a lot of work. I've tried to take some of my experience from doing some work on YouTube, where I was experimenting with like, setup and presentations and stuff. And I think I have a really neat, polished experience for this course with like, lots of cool visuals and graphics and video and stuff. So hopefully people really enjoy it. Anyway, this is my extra. I just sent this out

00:26:40 to the world. This nice, congrats. Yeah.

00:26:43 Thanks. Thanks so much. You have no extras Does that mean you're ready for some humor?

00:26:47 Yes. Always.

00:26:48 All right. All right. This one. I chose this. Honestly, I just chose it just because of the title. So there's Robert is this Robert Downey Jr. Looking at somebody in like some kind of wizard situation, right. Like,

00:27:02 oh, yeah, this is like endgame or something.

00:27:05 Okay. Yeah. I don't know the movie. Like I apparently I watch stopped watching movies at some point. Now I know, I'm out of touch. So anyway, the title is when your code stopped working during an interview, or it could be a demo presentation or whatever, like you want to you want to tell us what this is about what's going on here. So he's,

00:27:21 he's a, he's looking back at banner. So the Hulk says, Dude, you're embarrassing me in front of the wizards? Yeah. Because, yeah, because banner wasn't able to become the Hulk. So they

00:27:34 try to Don't Don't embarrass me in front of the wizards. I just I love to think of programmers. It's kind of like the modern day wizard site, we can think of things and then poof, they kind of come into existence. Yeah, it's good. And also, while working on that Git course, I had this pretty fun experience. Like, right, well, was it recording? Nice. And I'm just sitting there, and then it was down. How often does GitHub itself go down? But no, oh, no, there's like an arc. The Octocat as falling like are the 500 sign in his hand? Which of course, lead me to love the three do that section of the course. Yeah.

00:28:09 I like the expression on your face for that. Like,

00:28:13 exactly. People seem to really like that tweet all. I'll put it in the show notes so people can check it out. Anyway, dude, don't embarrass me for the wizards. It's what I got for you. Yeah.

00:28:22 Good. Good. Good. Well, thanks. Thanks for the live again. It's great show.

00:28:28 Yeah, sure was. Thanks. Thanks, Brian. Thanks for everyone who came by

