00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to the earbuds. This is episode 285 recorded may 24. And I'm Brian Aachen.

00:00:10 I am Michael Kennedy.

00:00:11 And I'm Mark Littell. I'm Ben Cosby.

00:00:14 Nice to welcome Ben. Welcome, Mark. So Michael, you, you have the story of why you brought mark and Ben on.

00:00:20 Yeah, I didn't bring Mark and Ben on, Mark. And I have been really good friends for a long time. But that's not why he's here. He's here, because he's been sharing this Python journey that he and Ben have both been on. They come from law, like being lawyers and bankers and stuff. And they've found their way over to writing software in Python, it's been so fun to watch you guys come along. And you recently showed me the release of one of your Sass products built with Python, and pyramid and other things. And I thought it was just super cool. So I thought you could maybe share just a little bit of that before we kick off the main topics to kind of inspire people who are not, you know, traditional CSS folks, and they can still build amazing things. Tell us a bit about yourself. And then tell us a bit about your your thing.

00:01:01 I'll say first, that I'm strictly the hobbyist. So we it's definitely been a collaboration and quite a journey. And but I'll talk a little bit about how we got started, because you played an instrumental role in that, Michael, but so we released this product called Lex chart that builds corporate organizational structures automatically. And these charts are kind of weird. They're sort of like, you know, human resources, organizational charts, except that for legal entities, they're much more complicated. And so we've built some automation in Python, principally in the server side that generates these hierarchies automatically. And they can be quite elaborate. So for example, some of them we release, publicly. And we've been building these things with our own app and releasing them. So here's one for Elon Musk, for example, this is before the early stages of his Twitter acquisition. But our app does a lot of this layering automatically. And those things can be quite stunningly complicated. So here's one, for example, with, you know, 1000s of legal entities in the corporate structure of Blackstone. And so we've actually got some Python that sort of automates the presentation and structure of all that. And then, as you say, it's using pyramid and chameleon and SQL alchemy. And then a lot of, you know, legal and business finance expertise, as well. But it's been quite an exciting journey. And so we were excited to share this with you and, and look forward to sort of talking about some of the piece parts that are in the product that might be useful to the broader community as well.

00:02:38 Yeah, exactly. Some of the stuff you guys are going to cover today, as our main topics sort of were extracted out of the building of the Osprey, yeah. All right, Ben, Ben, anything you want to add to that, and maybe just tell people about yourself real quick,

00:02:48 as you pointed out, and Mark to, you know, whenever I'm trying to explain to somebody what I do now, I always say, Well, I'm a reformed barbarian at the gate, I traded buyouts and IPOs in the suit on Wall Street, or you no code and in my office at home, and in my pajamas, kind of thing. And, but we've, as Mark talked about, we've kind of merged those couple of things together. So these days, I've spent a lot of my time with Python on the front end, and JavaScript, sorry, JavaScript on the front end, and Python on the back end to DevOps, and all sorts of things you sort of have to do at all. But I also wanted to say, kind of as part of our journey for for your listeners, I'd be remiss if I, I didn't even know I didn't warn you beforehand, I was gonna do this. But, you know, along this way of kind of, you know, going from, you know, suits and, and deals and IPOs and things like that. Michael's talk Python training for I'm sure lots of people on this podcast are familiar, but if you're not, you know, those courses were pretty instrumental, or for us, and for those work with in, you know, evolving, and, and, and making Python, Python now is completely central to, to our business and what we do. So it's been fun to get him. Thanks.

00:03:55 Thanks. For the shout out, Ben. Appreciate,

00:03:57 I would just say to we've been able to leverage that. And like, we've got some pretty complex math and graph theory, like in the core of our app. So we've been able to like, take, you know, Michael's classes and really sort of leverage them in a much bigger way that I think a lot of people expect or imagine they can when they start some of these online classes. So your training in particular has been exceptional.

00:04:22 Thanks, Mark. I just think what you guys have built is looks so much more polished than somebody, a couple guys who taught himself programming a few years ago, and I just I love it. So super good work. Brian. Should we should we kick it off?

00:04:33 Now? This is just great. I'm, I'm blown away. Looks awesome. So yeah, let's kick it off.

00:04:39 Yeah, I was too. And I think some of the stuff that we're going to talk about is going to certainly be part of that. So let's talk. Oh, yeah, no, wrong one. Up next. Right, right. Yeah, sorry. All right. I have a whole bunch of extras, folks. So let me just I'm gonna start with like a quick one for one of our main topics here that maybe we may have to cut you off, nine, you might have to cut me off. So check this out, right if I go over to pi pi.org. And I go look for something like let me look at Bini I don't know if I get the right. Actually, I don't think that's gonna have Alright, let me look for switch languages. My switch implementation I added a Python, I don't know, couple years ago. So if you look over here on the left, I think it's been blocked. But over here, there it says, Here's your avatar from Gravatar. For M Kennedy, but my little, my browser settings are blocking that or whatever. But this is a thing you see a lot of the times and like, where do you get? Where do you get these little Gravatar. So if you have users, and you have users who have emails, do you want to show something about them, there's a chance that over in Gravatar, there's going to be some profile for them, different images, things like that. So if you're in Python, and you want to add Gravatar features to your site, it is ridiculous using the thing called a lib Gravatar Oh, so all you got to do with lib Gravatar is you go and you create an instance of one of these objects Gravatars, you pass in an email, and you can say Get Image, you give it a size and potentially have file extension, if you want to control that or anything, whether or not you want to use SSL, and then it gives you back this nonreversible URL, that is the image of that person based on the size that you asked for who they are, and so on. And if they don't exist, you get the standard Gravatar logo is just like a little circle type thing. And so this is some kind of hash algorithm that you have to follow based on their email address to pull them back, and so on. But if you want to add the kind of Gravatar look and feel, then like literally Gravatar object, give it the email address, dot get image. And that's pretty neat. It goes from one to 248 pixels on the image size. So I'm not sure one super useful like, you get one dot, but you know, maybe he wanted to be kind of like, particular, like a shade of the person is all you're gonna get, I guess.

00:06:59 But like a five by five would be fun, you know, just just a few ones,

00:07:03 it would. So you can do get profile, which will then give you access to the user and see all of their email addresses all of their information about them, and so on. So there's a little bit right. Oh, yeah, there's this whole shadow profile that's built up by like, you know, the surveillance ad tech industry, it's only five bucks that use now just kidding. But you can get like more details about them through their profile if you really want But basically, the main use case is given an email, can I get a picture without hassling this person to upload a picture? Maybe?

00:07:29 And just so if anybody's not familiar with Gravatar? It's, it's owned by automatic? Who does WordPress. So all the WordPress people use it? And that's why it's like well supported, and it's not too evil or anything like that. So

00:07:42 yeah. And like I said, popeye.org uses it. So that's, that's star Mark, then what do you guys think? Do you have user pictures in your your app? Are you worried about this kind of stuff? We

00:07:51 don't, we don't elect sharp. But it's funny, because we are at the very beginning of our journey, we implemented a little question answer app as like a demo to make sure that, you know, we could like just by going down to Python and I use Gravatar. In there, this actually is a pretty cool library. Because I remember that app, I really was just focused on Python, but I had to fall back on some JavaScript in order to put the gravatar icons in there. But it is a great Gravatar is is really useful. I encourage your, your your listeners, if you're looking for something because the nice thing, as you said is it'll just generate like this automatic little drawing, even if they don't have an image. So you can kind of create a nice look and feel for your cipher user profiles where everybody gets some sort of a graphic, even if they haven't uploaded anything. It's kind of a nice little nice little tool.

00:08:35 Yeah, absolutely. Campaign workout in the audience says when pixel Gravatars might be useful for building images, like displaying contributor contributors and stuff, maybe not one, but you could do like 10 by 10. And you could build up, you know, a montage of all the people or something that people and you also, Ben, you also have a some cheering folks in the audience, which is lovely.

00:08:58 All right. Ryan, over to you. This I'm very excited about when I first saw this, I'm like, Oh, you don't really need that. Pydantic does this? Oh, wait, no, this is amazing. Tell them to tell. So this is

00:09:09 this is so cool. It's a little thing that says suggested by tune li to Jason Pydantic converter. And Jake are tuned said this awesome. Jason to Pydantic is so useful. It literally saves me days of work with complex nested JSON schema. So the idea is you've got basically it's just this website with like, you know, a JSON side and a Pydantic side. And I've got one prepared, I went and copied one from somewhere. And so if we'd go over and just replace the simple one with like a more complex one, paste it in there. And then it just generates the Pydantic model, and it's pretty awesome. There's a couple of options

00:09:53 for people who are listening. It's not that it converts JSON to Pydantic. It converts JSON to Pydantic code. Yeah. writes the code that you would have to write for the Pydantic. To understand what you've put is amazing. I love it, right.

00:10:06 And then some of the options are cool, you might not use it for everything, but just knowing the syntax for it. So if you, if you drop a give them optional, it'll, it'll tell you where to put optional in your model to make it all work, right. And it's like, this one's only just shown up at the bottom. So anyway. And then the last one is aliasing. CamelCase, I didn't know you could do this aliasing camel case for snake case. So if you're, if you're using, I guess, both camel case and snake case, you can have a more I don't

00:10:36 know, a lot of times, if you're consuming a JSON API that's written in another language, the variable names are idiomatic to that language. So like C sharp would be a wrapper, or JavaScript would represent this one where you've got like the camel casing, but that would not be how you would want to call it in Python. So you can say, well give me the Python version, but allow Pydantic to find the other size.

00:10:56 Okay, cool. Yeah. Then one of the neat things about this, that I really love is it's an open source project. So at the bottom, there's a link, it takes you to the to the just the Open Source page. And this is built with fast API, and create react app, which is pretty cool. And then a data model code generator. So it's like that's doing the most of the work. So if you want to do this yourself, somewhere else, like, you know, embedded within your tool chain, or something like that, you can do this. So I don't know why you'd regenerate it all the time, though. But it's just super kind of fun to this drop, drop some JSON, the JSON example of a good one in there and drop it in.

00:11:39 But it's fantastic. If you're going to consume an API and you say, here's a specification of what I'm going to get back, boom, you're halfway there, or your consultant, you pick up somebody else's code, and you're like, I want to use Pydantic is great. Anthony, on the honest is, oh, come on, I could use this last week.

00:11:59 That's really cool. We have a project where we're looking at migrating from a different tech stack to Python, and you know, one of our output sources there as JSON. So I'm looking at this and, you know, wondering, you know, Ben, this might be an opportunity for us to, you know, get there a little quicker for some of that data.

00:12:15 That is cool, especially for prototyping or something where you just want to see it to spend three days seeing what it's gonna look like. This is pretty cool.

00:12:25 Yeah, yeah. It's very cool. Nice.

00:12:29 I'm also another, I mean, we get this all the time. But I just want to remind people, this was a suggestion from a listener. And that's one of the neat things about the podcast is people can find cool things and send them in and then we can share it with everybody. It's nice.

00:12:42 Absolutely. That's like half of our our topics are that right? All right, Mark, you're up with the next one.

00:12:47 Awesome. So this is not a Python library, and it's probably well known to most of your listeners, but I wanted to just talk about a few tailwind CSS things that people if you're only sort of casually aware of tailwind, might help you jumpstart. We are an aggressive user of tailwind and some of the components. The other piece I want to talk about is tailwind UI, which is not open source, so tailwind. CSS is completely free from tailwind labs. But tailwind UI is it's behind a paywall, but these are pre built components by the creators of tailwind. So there are lots of people building components for tailwind. But tailwind UI is specifically built by the people who created tailwind in the first instance. And it's interesting to me, I know that both of you have have a lot of interest in user interface design around Python and web apps and tailwind, certainly as a part of that theme. And it's also interesting for the business model piece about how to turn sort of open source into sort of a revenue generating model. So you can use tailwind and never need tailwind UI. But if you need examples or references, tailwind UI, is a fantastic resource. And so I thought I would just show they've got widgets, basically pre built components around marketing, or app UIs. And then a new sort of E commerce section. And give me an example. There's really low level granular stuff, like if you want a little stats component, you can come in here, they'll show you what it looks like they've designed several options. You can see what they are like responsively. And then you can actually see the code, and they'll give you the code in raw HTML, react or view. And some of them need C JavaScript as well. They'll give you hints around what to do with the JavaScript if that's necessary. But this is an example of that little Stats widget with all of the sort of tailwind classes built in there that you can grab and reuse. And we have found it really useful for creating this sort of really professional sort of user interface experience and our app. So for example, if I just go I quickly create one like our toolbar here is a couple of chameleon templates with tailwind running around each of these buttons to keep them consistent, which also means that at different resolutions, the buttons will look different. So if I'm on a larger screen, there will actually be help text underneath each of these buttons. That gets smaller all that's done really nicely in tailwind. And then we can, because it's a chameleon template running in our Python stack, we can use those toolbars in a variety of circumstances, and have really granular, nice, intuitive control of them. So, you know, green tailwind CSS, until then UI, these are sort of great resources to get familiar and up and running with it. There have been a few people. This is

00:15:40 Mario, this is so nice, just to give people a sense of like some of the size of the building blocks is we've all gone to the websites where you click pricing, for example, and it's got like the three columns, and one's a little bigger, and it says this is the most common or whatever. That is just a drop in element. Here. Is this. Beautiful, right?

00:15:59 Yeah. And what this is the best thing about tailwind from my perspective is it's built principally by atomwaffen. And Steve strowger. And, Adam, I'm probably grossly oversimplifying, this would be the technical component of this. And Steve is the design element. And they have some great resources. If you just Steve Trevor has some wonderful videos where he sort of week composes user interfaces, and he's got a book out on refactoring UI that I think you can add to the show notes. But you're basically standing on the shoulders of these giants, right? They These are fantastic design principles. Yes, I'm sure there are people that are better than me at doing this. But I know that Steve and Adam have done a fantastic job. And using these components, even if I need to tweak them. I learned a lot there a lot of comments that people will learn a lot about CSS, just watching them work and seeing how these components are built. tailwind, automatically handles lots of cool edge cases. And you see that when you look at these components, and they're, you know, everything is built to be responsive from the beginning. And they're just lovely to work with. Yeah, it's also super fast. So they're a bunch of components, they their latest release has made their just in time compiler native, so it's built in. It does generate a lot of CSS, but it will only do that if you're actually using, you know, certain classes or components. And so it's just been fantastic to work with. I will also say we use this in a recent project. You can actually drop tailwind into an existing project and avoid conflicts with existing CSS. There's a way to have a custom prefix on all the tailwind classes. And both pi charm and VS code will their tailwind plugins will adapt to that prefixing. So for example, instead of it, you know, if you need padding you you just append or prepend TW hyphen to the classes to the tailwind classes. And VS code in Python will pick up that prefix you they'll still give you all the helps and prompts for tailwind, and you'll avoid all the conflicts with your existing CSS. Yeah. And then finally, I'd say it's just it's great with, you know, template languages. So whether it's chameleon or Jinja, or Mako, it's really nice, because you're just looking at that little bit of HTML and those templates and you can just put the classes right there in the HTML and have a high confidence what that's gonna look like,

00:18:23 Brian, have you played with this any?

00:18:25 No, but one of the things I was having a little consult with a, somebody trying to get a startup off the ground, and I was looking at their site, and I was like, man, your site looks awesome. Did you hire somebody? And they said, No, I'd use tailwind UI. And, actually, so that's that's the thing. The the sweet spot, I think is somebody that like maybe took the Michaels intrapreneurial course or something, it just like one or two people to train to get a business off the ground. You don't have any money, you can't hire somebody? Or maybe you do, but often you don't. So

00:19:01 I might just be too early to worry about that. Right. Yeah.

00:19:05 So starting off the ground with a professional looking site is I think that's a great way to start. So and yes, it's also not out of the realm of start a small startup.

00:19:16 Yeah, I would add, we've used a lot of frameworks. We've used Bootstrap, of course, Symantec. We've used a lot of these things. And what tailwind is nice, particularly tell when you I tell them in general, but tell them UI as well, is they will give you full page references. So if I scroll down here, you'll see for example, there's this page example. So if you need a landing page, they will show you what an entire landing page looks like. But you don't have to take the entire page. If you want to assemble these components individually into your own page structure, you can certainly do that. So you know, here's a feature section. It doesn't include any of the other stuff, but these are if you liked this feature presentation, you can go grab just this bit and mix and match it So, unlike a lot of the theme kind of frameworks where you have this entire three theme that just sort of stomps all over your design, you can actually get a custom looking output with tailwind that's still consistent. So it's a nice balance between, you know, pretty modular granular control, but still a consistent look at the entire app or website.

00:20:20 And I have no doubt that like, the stuff behind it, like how much CSS is there the size, it's probably going to be a heavier site than having somebody custom write all this stuff. But it's also going to be cheaper. So

00:20:32 yeah, that is true what they have done, they have a just in time compiler that really minimizes the amount of CSS they produce. And then of course you can do they recommend using post CSS and a number of other things like CSS nano to sort of reduce the size of those files, we still get very high performance. So keep in mind, sort of our app is built entirely with tailwind. Plus, we're doing a lot of math on the server side. And we get, you know, very small sub second returns on our pages, as results, even with all that stuff. Yeah, that's cool.

00:21:04 You've definitely inspired me Mark to think about rewriting some of a lot of what I've been doing in tailwind and it'll get there. I'm just not there yet. got other stuff to work on first. All right. Before we move on, Brian, I take a moment tell you all about our sponsor. Yes. Yeah. So this week, the show is brought to you by compiler, the compiler podcast from Red Hat. Just like everyone on the show and everyone listening, Ryan and I are fans of podcasts. And I'm super happy to share compiler with you comes to you from Red Hat, well respected open source company we all know of, I'm sure to with more of more and more of us working from home, it's important to keep our human connection with technology and compiler unravels industry topics and trends, things you've always wanted to know about in tech, all the way up to interviews with people who know best so on compiler, you hear a course of perspectives from diverse communities behind the code. Conversations include questions like What is technical debt? Or what are tech managers actually looking for? And do you have to know how to code to get an open source? I was actually a guest on Red Hat's previous podcasts, command line heroes and compiler is following along in that same tradition of being an excellent produced and polished show. So actually the show that they just released, when should data die, I think is one of those cool sort of philosophical questions of should should data have a lifetime? Should your data be held outlive you? All those kinds of things are pretty interesting. So I recommend people check it out. Just visit Python bytes dot F m slash compiler. The link is in your podcast show notes. I know, we're all smart developers are listening, and you just search for compiler in your podcast player. But please sign up by clicking that link and then clicking your podcast player. It'll help them know get from us. So thank you to Red Hat and compiler for supporting the show. All right, I guess I'm still up hunt. Right. So let's talk peps. This PEP is this PEP is pretty interesting. This comes to us from a Damar it's by Jermaine Bravo and Karl Meier, sponsored by Barry Warsaw. And it's something honestly I haven't I'm surprised it hasn't been covered or addressed yet. I think I think this comes out of metas Cinder project where they're trying to do a whole bunch of performance improvements, but I'm not 100% Sure. So take that with a grain of salt. Basically, the idea is right now what happens when I write some Python code outright at the top import requests import Bini import fast API. What happens when I import Bini well inside Bini it says Import motor import Pydantic. What happens is Hein motors import these just this transitive closure of at the top of all of these projects, each one of them is importing something and like parsing and compiling the Python code as in, you know, into abstract syntax trees into memory and stuff like that. All of that happens when I write one import line, right? That's, that's a lot. But what if there's different paths in my code? And only some of the time maybe I'm using Pydantic? Or only later in the app? Am I actually using fast API but not right away? And sometimes you might not use them at all right? I could do a bunch of data science imports, but only if a certain function runs do I care. So this PEP this PEP 966 90 says, Well, let's not do that. Let's not like preload every possible path that you might run when you're gonna use a library. Let's wait until you use it. So that import fast API kind of just hangs there until I say fast API dot. And soon as the first line of code runs, then the import happens. So you don't have this transitive closure of all these, these imports, if you're not actually going to use them. So it helps with startup time. And it also maybe helps with overall performance, if not every bit of code runs.

00:24:50 I want this.

00:24:53 It looks it looks cool, right? One of the things a lot of time and startup just because of all the import statements.

00:24:59 Yeah, what Other things that that I face a lot as with helping people is with pi pi tests. So pi test imports your code. So it does it when it's well it imports your tests. And then the tests will import your code to run your code. But if you're running, if you're going to like, for instance, Ray, stop on the first failure, you're not going to hit a whole bunch of that code. And so avoiding avoiding those and getting to start earlier, it would help help that. And yeah, that's just one example of startup time being helped. Now, I curious about how it how it will affect runtime early on. Otherwise, you know, at post started,

00:25:41 there's some conversations about compatibility. So what could happen is there could be side effects that happen because of the import, right? You're not supposed to make changes to the system. But but that's arbitrary code running during your import statement, right? So it could have an effect. So theoretically, this could change things. And they refer to the not the lazy ones as eager imports. But they do talk about how some of these, you'll have to pass a runtime flag to the Python interpreter, or set an environment variable for this to happen by default, it won't happen by default, it's off by default. So for better or worse, maybe someday that'll change. But right now,

00:26:22 that's pretty cool.

00:26:23 I like it. Yeah. Yep. Indeed. Ben, Mark, you guys have thoughts on this?

00:26:28 Yeah, I agree. I think this is really interesting, from the, from the front end world where I spend a lot of time to I mean, there's a billion analogs, this, we do all kinds of jumping through hoops, you know, from the old a code splitting in the old days, and all kinds of, you know, we're back and a million other roll up, and all sorts of ways of, you know, trying to take advantage of this on the client side, you know, because the browser, but I can actually imagine a lot of situations using Python, where, you know, what, in one app, you know, maybe it is just limited to, you know, that that moment of startup, but I can imagine a lot of situations where the way that your app or your service is being used as causing that, you know, initial run event, too, to be an experience that the user is having on a more frequent basis based on what you're doing what you've constructed. So that's actually really cool. And I haven't thought much about this, but I kind of agree with you sort of surprised now that they see it. It's always a conversation before.

00:27:25 Yeah, absolutely. And I also wonder if it allows you to have code that can be less, have more optional dependencies installed. So like, for example, I think it was a fast API, there's some support for form stuff, you have to install as a separate PIP dependency. And here, you could just write that code and unless you actually run it, it doesn't matter if you have import that thing that's missing. Because not until does it try to use it? Is it going to be a problem? So it might allow you to write simpler code? Let's see how the audience Eddie Bergman says, I feel like with it opt in, and many people won't know how to use it. But making an opt out. Could Break so many systems, depending on the behavior. So yeah, it's I don't know what the right choice is. So I guess the safe one is to just opt out, or to opt make people opt in. Yeah. And beanie, the author of sorry, Roman, right, the author of beanie gives it definitely a thumbs up for this idea as well. So support for some framework authors there as well. All right, Brian, what do you got for your last one here, hope it works for us?

00:28:26 Well, I've got a couple of things that a couple of these are small. So it's sort of a multi gram bag, by test rich. So this is, this is a plugin for PI test that uses rich now much more to say other than it's kind of cool to use. Use rich to have some nice output. This was done by Bruno Oliveira, who is he's one of the core people on PI test. And also the only other person on the planet that I know of that has written a book focused on PYtest. But cool guy, the he's he said, This is a proof of concept, and he'd love for somebody else to take it over. But it doesn't look like it's like dead or anything is because it's an activity. So anyway, I think this is fun. So cool. opportunity for people to jump in if they want to. Thanks. The

00:29:14 question from the audience. Ryan, how's it compared to pi test sugar? I haven't.

00:29:18 I haven't used sugar for a really long time. But you can look at the image so it looks like a similar to sugar but with sugar doesn't have these cool rich tracebacks in it. So yeah, there's that Andy. So the next thing I wanted to talk about before we move on to somebody else is is a short little thing. This was recommended by actually the eye test which was recommended by Brian skin. Thanks Brian. And then this is recommended by Henrik Finn's berg is a video by Anthony. So Tilly on how to get images in READMEs. And I guess I didn't know how to do this. We encourage and I wanted to bring this up because we encourage everybody to put pick chairs and animated gifts and all that sort of stuff in the readme, so that when we review stuff, we can see what it does. It helps. But it's not hard. It's so Anthony goes through this whole thing of like, you don't have to put the image in your repo, you just have to drop it into a comment field or in a repo edit field. And, and then get hub, we'll just put it on a CDN somewhere. And the image is just there. So some magic there,

00:30:28 kind of trick GitHub into uploading it, and then not actually,

00:30:32 well, I mean, it sits in the readme supports. It's interesting, Anthony toxin talks about going using the using eye, a edit a comment field of your issues, to drop it picture in, and then you get the URL from that. But if you just go into your readme in within GitHub on the web interface, and edit there, you can also drop it there and it just works fine. I guess maybe he's thinking that you're probably not going to edit your readme directly. You'll probably edit it locally and push it in, you can still do that. But yeah, just neat.

00:31:09 Yeah, people should definitely have pictures and explanations and charts and all sorts of stuff in there. Their readme sounds good. Yeah,

00:31:16 I would just add more generally, you know, docs and tutorials can be a strategic X asset. When done well, you know, tailwind does this amazingly well, Edge dB, does it really well, Digital Ocean is off the chart in the comprehensiveness and thoroughness are there. And those things become an asset for the business instead of an annoyance, you know that you have to do that the docks actually become valuable for the project.

00:31:38 Do you want to be there? Or do you regret that you have to

00:31:41 go there? Right. Right, exactly.

00:31:45 All right. Ben, you want to take us out of here with your final main topic?

00:31:48 Yeah. So you know, as you mentioned, you're part of our latest project, like shirt that Marx talked a little bit about, you know, one of the things that we had to do, despite the fact that, you know, as we were getting close to it, I realized, you can use Lexmark for a lot of things that maybe, you know, we didn't think about when my 12 year old daughter sent me, and I spun her up an account, so she could tinker with it. So I kind of get an interesting test case out of somebody that has like no connection to what we're doing. And she sent me a little organization chart of Encanto characters, and their family tree from the review. wasn't expected, but she's not really our typical typical user. And, and with our target audience who looks a lot, like, you know, I did in my former life, you know, security is a big, big deal with our clients. And so one of the things we obviously have to look at is, you know, implement some multi factor authentication. And, you know, initially, my knee jerk reaction to that was okay, yeah, we'll just do what everybody does. And you know, we'll, we'll set it up, and you'll get an SMS message on your phone, and all that kind of stuff. But as I looked at that more thought about some of the conversations we've had with clients of some of our other software, you know, I wonder how long is that really going to last? Because there's a number of kind of real security issues with with SMS, not least of which is, you know, just the way voice networks are built everything sent in clear text, it's actually really not that hard to

00:33:26 words that people do look down upon it a little bit. They're like, this is not quite real security. This is better than nothing. But right.

00:33:33 Yeah, exactly. Right. And it's and it's not to say and, you know, you make the appointment. It's, it's, it's everywhere, everyone's using it. And, you know, by the way, yeah, absolutely. You know, password bless MFA, even with MSN SMS is great. It's so much better than the password only from a security standpoint. So it's not a knock on it, you know, I just thought, well, maybe we need to step one more step forward here and see if there's some other other things. And so, you know, I was looking for a library that could help us with one time, password stuff, and specifically one that could help us with time based, one time password implementations, which is something that I think Google really ultimately started this way back. And that's why a lot of people associate this with the Google Authenticator app. But there's actually a lot of authenticators, it's an open standard. And it really is closely connected to what's happening when you do it with SMS or with email, both of those are similar in that both of these approaches, they just, they just lean on a moving factor. So in the case of your SMS, that moving factors, just usually like a counter in the database, right, this kind of clicking forward and whatever, and that's, you know, along with all the other secret sauce is generating, you know, these, these temporary codes, if you will, in time base, the moving factor is time. And so what that allows you to do is, you know, have an authenticator app where you don't actually have to communicate it with that with that at all. But you know, based on the sheer Third Secret, again, same as ad with SMS, you're able to sync up these passwords. And then they have like, a sort of explode, if you will, right. So the last for like, 30 seconds, and all that kind of thing. And so

00:35:13 yeah, the highlight here is pi OTP, which I guess lets you do this really easy in Python. It does,

00:35:19 yeah, it makes it really, really straightforward. So, you know, I've, in the notes, you'll people will be able to see it, but a couple of representative functions that you could use to do this. But it's, it's a very small amount of code, basically generate a secret, you store it with your user credentials, then, you know, when you're actually verifying somebody, they come in, you have this shared secret in there, they, you know, look, pull up their little authenticator app on their, on their phone. You know, you know, I think most people know what this looks like, but we'll do this, their Google Authenticator app. And, and so it gives you a little code, and you can see it ticking down and all that kind of stuff. And so instead of getting your SMS, you just pull up your code, you hit your hand, you type it in, and then your users putting that, and then you're just reading that through the verifier. And based on this shared secret, it says, Yeah, you're the real guy, great. Every 30 seconds, those go away. So even if somebody, you know, just looked at mine for, like Google Authenticator, you know, you got, you know, 30 seconds to figure out my password. Exactly, you can get into that, that test account that I'm showing you that for. But yeah, it's, it's super, super simple to implement. The only thing you know, for the Python crowd here is that it is helpful from a setup standpoint, to do a little bit of front end work. Because the easiest way for us to set this up as to scan a QR code. And so we have that implement on the front end, where you can see that QR code and scan it from a setup, but those little functions by the show notes, you just spin up a little URI, that'll you can put that into any kind of QR code generator, including Python based generators, if you actually want to do that store the image on the server and then serve it up in our kitty site to do that, on the JavaScript side and put a little lead to QR code is kind of one of the most widely used NPM packages for that purpose. display that either they scan it, they set it up, they pair that first time, and then, you know, takes a little getting used to for the user, I think you know, at the end of the day has some is a little more user friendly. Just because people are a little bit more familiar with it. This isn't a big leap. So we went here instead of something like web often, which is even probably better from a security standpoint, but I think a bigger leap for users. So just think it's a cool little library. It's easy. It's purpose bill, of literally those few lines of code that buttons show up. But it's almost everything that you would need to implement this on the back end, there really isn't anything else.

00:37:57 It's amazing. I've always avoided doing this because I'm like, Ah, it's probably kind of complicated. I don't want to screwed up and then lock people up. But it looks really simple and fantastic and straightforward. So yeah, this is a great suggestion for people. Yeah. Cool. Brian, if you had to do any of this?

00:38:12 No. But I do have like, in the works that like, I don't think I'll get that complicated. Because I think I think for somebody like like, with GitHub, we have to use it. Like something like that for GitHub now, or you can and I have set it up. But the but some people for some some kind of apps, you It depends on your audience, some audiences aren't really gonna want that share. So

00:38:36 it also depends on most of our clients or, yeah, exactly. Most of our clients, you know, our b2b, large corporations sort of all over the world, and many of them already have these authenticator apps. And the nice thing about this solution is it works with any of them. So you don't have to as a business, you don't have to direct your clients to use a particular authenticator app. So if you're using Microsoft or Google or Twilio, offI, or any others, you know, you can just plug this in and just use it. You know, we test and validate on those three, but it'll likely work on any of them. And so it's really nice in that corporate environment, just to slide in.

00:39:11 And it should have emphasized for this audience, one of the great things about this is, SMS is not expensive. But this is free. It's free for you from a developer standpoint, and it's free for your users. These authenticator apps are free downloads, this is, you know, you're not imposing any friction on your users. From that standpoint, just a tiny bit of a learning curve for them. But I think what you find like you said, GitHub, you can link a authenticator app to GitHub, if you want to add MFA to your GitHub login, which, you know, I would say most of your listeners probably are, are familiar with. And so you know, if you're wondering about it, I'd encourage you just try that download google authenticator, Microsoft authenticator, implement their MFA, you'll see what the experience is like, and you'll probably find that not really probably a big hard sell with your with your clients. If in fact, MFA is something you need as you say, you don't need it. You don't need it, but if you do, you know, you do and, you know, this is a solution. Should I think people should consider, because I think SMS, you know, is fine and great. But obviously, the more widespread it becomes, you know, the more likely you know, people are to attack it. And the hacks on this are not hard. My favorite one is that using a cell signal booster, which, you know, some of you heard, especially you some of your listeners that don't live in urban areas, and whatever, and, and, you know, I'm not encouraging this, but if you poke around just a little bit, it's not gonna be very hard for you to figure out how to hack a cell signal booster, and people don't even know they're attached to it. And you can listen to everything and record all their texts and all that. So

00:40:35 that's another ideas.

00:40:39 I gotta go, guys. I love having this. I use Authy. And I just checked my Authy as 45 different accounts doing two FA MFA, which is fantastic. Yeah,

00:40:50 I like coffee as well.

00:40:53 Brian, what else we got? Well,

00:40:55 I've got a few extras. Do you have any extras?

00:40:59 You know, I do. Alright, y'all, I'll I'll do my first. So let's start with some real quick ones. First of all, MacRumors points out that machine, the machine learning framework pytorch. Traditionally, these have been, like mainstream GPU, these machine learning training frameworks, and especially focused on Nvidia, which if you're on a Mac is a problem because you don't have Nvidia not even before the in one stuff, you had Radeon chips and stuff. So doing hardware based machine acceleration was really tricky. They are now supporting metal on Apple, which means you get GPU accelerated training on the new Apple stock on Macs, including in one Ultra, and all that stuff. So if people are on in one, they may check that out. That sounds good. Let's see, I got a message from Harry. This is a 15 year old kid who said, Hey, I built this learning platform and a bunch of tutorials with my cousin Anna, who's 14. And they built this app, which I'll link into called Mission and codable. And you come in and you can do little tutorials. And you've got like little lessons and achievements to do after and stuff. So anyway, I just thought I'd give them a shout out because it's really cool that a 15 and a 40 year old put this together for people. Yeah, very cool. Yeah. All right. Two real quick things as well. I use Calendly Calendly. Li not stating that it's how it supposed to be calendly.com, which is great for like sharing your available free time, people can sign up and book slots with you. I recently learned about qowl.com, which is an open source parallel or equivalent to calendly.com. So if you can self hosted or you have a free version, you can even have them host it for more pro things if you want. But our site is kind of cool. There's an open source cal.com, which is Calendly. And on the same vein, if you've heard about Firebase, which is kind of like the back end platform for so many mobile apps and stuff, so you don't have to have a website and an API and a database. And users like this would handle all of those things. For Firebase. There's also heard about Super Bass like super, but without the are super bass, which is the open source equivalent of that. So you can have her like the back end cloud for free for your an open source for your mobile things, if you care about that. And yeah, so those are my my, I have one more extra I want to share with you. So we've all heard about py script, right? py script is awesome. And this comes from Anaconda. It's takes the C Python runtime and turns it into WebAssembly and then runs it in your browser. And I've been looking at the PI script dotnet website. And they've got all sorts of cool stuff in there. And if you go to his pie scripts slash examples, there's actually a bunch of examples you showed the one you covered this last time, I think it was last time or time before you covered the antigravity one and those kinds of things, right. What's lacking from here is anything that looks like a regular application, right? Yeah. So I said, well, the to do the To Do app is not a regular you got to hang on now. No, no, it's you're right, though, that is the absolute closest, by far, but everything here says data science, data science, I want Jupiter in the browser, but not with a server, run it in the browser, and that's fine. But that comes I think far short of the potential. Okay. So, I this weekend, I'm like, I'm gonna fix this. And the way I'm fixing it is with this project and a video that I was working on right before we jumped on. I'll publish it later today called the PI script PWA weather app. So check this out. See this thing here on the screen. This is an application that installs in your dock offline. It installs in your dock. It's written in Python and pi script and with Python on the front end and has no back end stuff locally. So like electron or something like that. It's a progressive web app. It downloads all the files, including the 15 megabytes of data The Pio died runtime and postscript puts it offline. And when you run it, it just starts instantly. So from cold launch until you have this thing up and running, it's about two seconds, and it goes out and it talks to an API and gets this cool weather here. And like you didn't have a little button, you press this refresh button, it'll pop up up in a refresh. It's as you click it, it's instantaneous, the way it sort of interacts with it. And all of it is written on the front end, using stuff that you would recognize stuff that looks like requests, and JSON and Python classes and try accept and everything. That's pretty cool. It is here, let me actually pull up a little bit of code really quick just to show you. So check it out, we've

00:45:40 got our regular coders are flashing it. But if I go to static, there's now a Python folder in static. And you can go to the weather API. And we make that bigger for the screen. See this code right here? This download report, type here and go to report has this thing that comes back from calling this URL turns into JSON does the code that that is running in the browser in the C Python runtime, all of it locally with no download and no slow startup? Sounds pretty cool. Anyway, I'm gonna do a video on that now. Yeah. What do you guys think? Nida

00:46:14 postscript is? It's, it's cool. What you've done to postscript is interesting to me. I'm interested to see how that evolves. And I'm sure, like I said, I think most people are using it, maybe from a data science standpoint, or waiting for it to you know, mature or whatever. But there's some kind of odd analogs between, you know, how to react and some of those things get started here, obviously angled at a different audience. But I think there's some really cool things that could be done with this. You know, as as you evolve. And interesting that you mentioned this on the show today, because if you look in the repo for postscript, tailwind is one of their core dependencies

00:46:52 are nice, how address it Yeah, it's all coming together. So I'll talk more about when I released the video later, but I think that this in the source code is out. It's linking to GitHub, people can check it out and install it. It's, it's really neat. And I think it opens the door, I can see people writing like a Vue js wrapper. So you create a Python class that sort of parallels view or react or something like that. And you could create really neat stuff in this offline sort of progressive web app mode. So we'll see. Alright, that's it for my extras. Okay,

00:47:21 I've got a few. The the videos for PyCon. Us 2022 are up. So yeah, you can watch them now. I'll have a link in the show notes. But you can also just look on YouTube and search for bike on us. Yeah, so I'm looking forward to I've got a whole stack of ones I want to watch. I unfortunately didn't get a chance to make it this year. So I'm looking forward to participating in this way. Second thing I wanted to bring up is, is another podcast. So there's another Python podcast out there called the sad Python Girls Club. It's so far they have two episodes. The second episode, they interview Brett cannon. It's good. The they're not actually sad. The sad comes from that they used to be emo people in when they were young. So I thought that was interesting. Listen to a lot of the same music.

00:48:11 Nice. All right. Congrats to them for starting. That's cool. Yeah.

00:48:15 Third thing was is I'm going to do this publicly to try to get me motivated to finish it the PI test course. So yes, I've started working on the PI test course. And it will be through through the talk Python Mike Kennedy thing, unless, you know, unless it's really terrible, and then he probably won't want it.

00:48:36 Now, it'll be great. Brian, I'm looking forward to it.

00:48:39 Yeah, so I made a couple days ago, I recorded like 20 minutes for the video with the mic off.

00:48:50 I've done that or two mics on where there's a weird echo. It's offset by 20 milliseconds and

00:48:57 but I'm looking forward to getting that out because a lot of people have asked for it. So that's in the works. Fantastic.

00:49:03 I think that's cool. Brian, you need to you need to finish it. We're all the none of us. None of us right enough test. We need many more. We can use the course. That's all for me.

00:49:14 I don't mark either you guys. Yeah, you got anything else you want to give a shout out to before we wrap it up? Like

00:49:21 I said, I better shout out since you highlighted the cheerleaders earlier. I'm pretty sure that was that. My daughter Isabel and a friend Olivia and Jess are listening. So they've hung with us this long into a Python podcast that I better shout out to. That's cool.

00:49:36 And I would just say if interested in any sort of public company, complicated organizational structures like Tesla, or Apple or anything, we have some of them on our website on next chart. And if you want others just drop us a line and we'll build them.

00:49:50 Nice. Yeah, that's pretty cool. Yep. All right. So we close out with a joke, Brian? Yes. I wanted to come up with something that I felt was a little bit associated with learning to code and Being somewhat beginner, even though what these guys built is not at all beginner, but I know that they've been on that path recently. So here we go. So this one is an animated GIF. Very frustrated where they carry their computer out, throwing in the dumpster the back. It says programmers when they finally fix all their syntax errors in their code, just if you're confronted with a bug, I don't know. I remember when I was learning C plus, plus, I was so happy when I got my complicated code to compile. Then I realized, no, that's just the beginning of the hair pulling.

00:50:31 Yeah, it's Ron Swanson.

00:50:38 Yeah, yeah, absolutely. All right. Thanks a lot. That's all I got. Brian.

00:50:43 Excellent. That was fun. Thanks, Ben for and mark for showing up. And Thanks, Michael. As always, it's been fun.

00:50:49 Did you guys? You bet, everyone. Bye. Cheers night.

