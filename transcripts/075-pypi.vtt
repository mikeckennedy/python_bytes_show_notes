
00:00:00.000 --> 00:00:04.800
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your buds.


00:00:04.800 --> 00:00:09.500
This is episode 75 recorded April 25th, 2018.


00:00:09.500 --> 00:00:10.300
I'm Michael Kennedy.


00:00:10.300 --> 00:00:11.200
And I'm Brian Oken.


00:00:11.200 --> 00:00:14.400
And we've got a bunch of awesome stuff lined up for you like always.


00:00:14.400 --> 00:00:17.300
But before we get to it, I want to say thank you to Datadog.


00:00:17.300 --> 00:00:19.700
They're sponsoring this episode like they have many


00:00:19.700 --> 00:00:22.600
and they're a big part of why the show keeps going.


00:00:22.600 --> 00:00:23.600
So thank you Datadog.


00:00:23.600 --> 00:00:29.900
So Brian, people often refer to the thing that runs your Python code.


00:00:29.900 --> 00:00:33.500
when you type Python as the interpreter.


00:00:33.500 --> 00:00:35.500
But only sometimes


00:00:35.500 --> 00:00:40.180
does it actually interpret. Sometimes it compiles, sometimes it jet compiles, depending on


00:00:40.180 --> 00:00:43.700
what underlying thing you're using to run it, right? PyPy


00:00:43.700 --> 00:00:46.500
versus CPython versus, say, Python.net.


00:00:46.500 --> 00:00:49.620
You found it interesting for one like that for this week, right?


00:00:49.620 --> 00:00:52.500
I had to go look it up. I was surprised we hadn't covered it yet.


00:00:52.500 --> 00:00:54.500
There's a package called Numba


00:00:54.500 --> 00:00:57.700
and it's built on top of NumPy


00:00:57.700 --> 00:01:06.100
But it's a fairly easy way to speed up a bunch of your code by adding a just-in-time compiler to it.


00:01:06.100 --> 00:01:11.140
And I've also linked, so I've got a link to the library itself and also to


00:01:11.140 --> 00:01:14.580
an introduction article that I found that's pretty nice.


00:01:14.580 --> 00:01:20.340
It's pretty easy to use and the article we're linking to has some speed up tests


00:01:20.340 --> 00:01:22.980
where you just put it like a little JIT


00:01:22.980 --> 00:01:25.900
decorator on a function that you want to speed up.


00:01:25.900 --> 00:01:27.180
And there's a bunch of flags to it.


00:01:27.180 --> 00:01:32.800
You can try to do it ahead of time or not, but it'll compile down your, some of your


00:01:32.800 --> 00:01:34.980
code to C code as good as it can.


00:01:34.980 --> 00:01:42.180
And you can specify data types too, if you want to even allow it to be even faster.


00:01:42.180 --> 00:01:47.720
And I'm pretty blown away with how trivial it is to add some of this stuff to your


00:01:47.720 --> 00:01:49.960
code and speed it up.


00:01:49.960 --> 00:01:53.980
Some of the speed ups are like 78 times faster and stuff, depending on your algorithm.


00:01:53.980 --> 00:01:54.920
That is really awesome.


00:01:54.920 --> 00:01:58.120
And this thing lives in such an interesting place,


00:01:58.120 --> 00:01:59.920
like when I set the stage.


00:01:59.920 --> 00:02:02.120
It's not CPython,


00:02:02.120 --> 00:02:04.620
but it's also not a full compiler.


00:02:04.620 --> 00:02:06.720
It's not a JIT compiler either.


00:02:06.720 --> 00:02:09.820
It doesn't attempt to do what, like be a general solution,


00:02:09.820 --> 00:02:12.220
anything like PyPy, P-Y-P-Y,


00:02:12.220 --> 00:02:15.020
is a general purpose JIT compiler


00:02:15.020 --> 00:02:17.020
trying to make all your Python fast.


00:02:17.020 --> 00:02:19.020
So they say that


00:02:19.020 --> 00:02:22.320
this is a compiler for Python arrays


00:02:22.320 --> 00:02:24.320
and numerical functions, period.


00:02:24.320 --> 00:02:25.680
That's pretty awesome, right?


00:02:25.680 --> 00:02:28.180
There's a lot of people working with that sort of stuff that


00:02:28.180 --> 00:02:31.220
a lot of the code doesn't have to be really fast, but then they've got a


00:02:31.220 --> 00:02:34.720
big blob of data that they've got to deal with and


00:02:34.720 --> 00:02:38.520
run some algorithm over it. And in those cases with a big array,


00:02:38.520 --> 00:02:40.520
that's a great place to apply this.


00:02:40.520 --> 00:02:43.620
Yeah, it's really cool. And so if you have tight loops


00:02:43.620 --> 00:02:49.220
that are slow because of some kind of numpy thing or arrays or other numerical operations,


00:02:49.220 --> 00:02:51.620
slap a decorator on it, make it go fast.


00:02:51.620 --> 00:02:57.020
Pretty sweet. Yeah, we had a comment from somebody that you didn't know if whether or not we talked about libraries.


00:02:57.020 --> 00:03:01.760
They thought we were just talking about articles and stuff and I do want to include libraries.


00:03:01.760 --> 00:03:07.580
And so I've been trying to make sure going back and some of the ones that people really ought to know about if they don't know already.


00:03:07.580 --> 00:03:11.460
We'll try to get those in here and there. So it's good. Yeah, sure. Absolutely.


00:03:11.460 --> 00:03:14.740
If we haven't talked about it, it's definitely a game for being a cover on the show.


00:03:14.740 --> 00:03:19.860
So speaking of libraries that people care about, what's the most common way to get them?


00:03:19.860 --> 00:03:21.460
- PIP install. - PIP install.


00:03:21.460 --> 00:03:24.160
Well, as of recently, a couple days ago,


00:03:24.160 --> 00:03:26.660
now you PIP install with PIP 10.


00:03:26.660 --> 00:03:28.160
So if you haven't yet,


00:03:28.160 --> 00:03:32.220
you should PIP install dash dash upgrade PIP.


00:03:32.220 --> 00:03:33.960
Maybe put a PIP three on the front,


00:03:33.960 --> 00:03:35.680
depending on what OS you're on.


00:03:35.680 --> 00:03:37.260
But yeah, so there's a brand new version of PIP


00:03:37.260 --> 00:03:38.480
and a major version as well.


00:03:38.480 --> 00:03:39.320
That's pretty cool, right?


00:03:39.320 --> 00:03:41.160
- Yeah, so what do we get new?


00:03:41.160 --> 00:03:42.000
Do you know?


00:03:42.000 --> 00:03:44.920
- Yeah, so we no longer have Python 2.6 support.


00:03:44.920 --> 00:03:46.400
It is out.


00:03:46.400 --> 00:03:48.420
If you're living, I don't know,


00:03:48.420 --> 00:03:53.060
way, way in the past, like 2006, it was good enough for me,


00:03:53.060 --> 00:03:55.700
it's good enough for my code, then you should stick on PIP 9


00:03:55.700 --> 00:03:59.780
because it's no longer going to support it. It supports this new


00:03:59.780 --> 00:04:04.540
feature that's described by PEP 518, which allows you to


00:04:04.540 --> 00:04:07.620
specify what packages are required to build from source.


00:04:07.620 --> 00:04:10.180
So that's kind of cool. You have like a, you can say these are


00:04:10.180 --> 00:04:12.340
requirements to start from source. And these are other


00:04:12.340 --> 00:04:16.620
requirements. It improves Unicode on Windows, it has a


00:04:16.620 --> 00:04:20.740
pip config command. I've never used pip config of you. I don't


00:04:20.740 --> 00:04:23.940
think so. It's I think it's new. So apparently, you can set up


00:04:23.940 --> 00:04:26.940
like default behaviors and stuff like that. And it can be based


00:04:26.940 --> 00:04:29.460
on virtual environments, or it can be based on users, or it can


00:04:29.460 --> 00:04:31.860
be based on machines. So this is probably going to be a nice


00:04:31.860 --> 00:04:34.080
handy thing to dig into, maybe we should do a whole section on


00:04:34.080 --> 00:04:38.380
just leveraging pip config. Also, if you pip install dash


00:04:38.380 --> 00:04:42.120
dash upgrade a thing that used to try to upgrade all the


00:04:42.120 --> 00:04:45.500
dependencies, if I remember correctly, now the default


00:04:45.540 --> 00:04:49.240
upgrade strategy will be only to upgrade dependencies if needed.


00:04:49.240 --> 00:04:52.880
Right? So if the thing says I require doc op six and you have doc op


00:04:52.880 --> 00:04:56.940
four, it'll upgrade it. But if it doesn't say it requires that version, then it'll just leave it alone.


00:04:56.940 --> 00:04:59.320
So that could be for better or worse. I'm not sure.


00:04:59.320 --> 00:05:00.480
And then a bunch of bug fixes.


00:05:00.480 --> 00:05:01.240
Okay, neat.


00:05:01.240 --> 00:05:05.120
Yeah. So if you're out there and you're not living super far in the past,


00:05:05.120 --> 00:05:08.480
be sure to upgrade your pip. It's nice. And there's even been a point released since then.


00:05:08.480 --> 00:05:11.840
One of the things I really like pip10, this is a minor thing,


00:05:11.840 --> 00:05:14.720
is that when you type pip list,


00:05:14.720 --> 00:05:18.400
it lists your packages and it used to in pip like nine,


00:05:18.400 --> 00:05:22.800
it would give you a warning that there's a table configuration,


00:05:22.800 --> 00:05:25.180
and you can do the old style or the new style,


00:05:25.180 --> 00:05:27.080
and that's gone, and in pip 10,


00:05:27.080 --> 00:05:29.360
it just gives you the table and I like that.


00:05:29.360 --> 00:05:32.120
>> Yeah, that's really awesome. I didn't like that warning there


00:05:32.120 --> 00:05:35.000
because if you're doing screencasts or videos or anything,


00:05:35.000 --> 00:05:36.140
it looked like something was wrong,


00:05:36.140 --> 00:05:37.720
but it wasn't actually wrong.


00:05:37.720 --> 00:05:39.600
It was just like, "Hey, we're changing how this works."


00:05:39.600 --> 00:05:41.220
So I'm glad that that's over.


00:05:41.220 --> 00:05:47.780
So when I have functions that just have a bunch of positional arguments, right?


00:05:47.780 --> 00:05:50.340
And it's like true, true, false, true.


00:05:50.340 --> 00:05:52.620
Like, what the heck does that mean? Who knows, right?


00:05:52.620 --> 00:05:55.620
So you've got a nice way to fix that.


00:05:55.620 --> 00:05:58.340
That's a modern Python only thing, right?


00:05:58.340 --> 00:06:03.580
I'm chuckling because I'm just leaving Michael hanging on the transitions between articles today.


00:06:03.580 --> 00:06:05.420
But I'll try to work on that.


00:06:05.420 --> 00:06:06.020
Sorry, I got it.


00:06:06.020 --> 00:06:08.580
Anyway, this is actually pretty awesome.


00:06:08.580 --> 00:06:10.780
There's a, I don't know how I missed this.


00:06:10.780 --> 00:06:15.780
There's an article from Trey Hunter called keyword named arguments in Python and how to use them.


00:06:15.780 --> 00:06:23.980
And basically, I think he's right. I was talking to him earlier and a lot of people looked at this article and went, yeah, I know how to use keyword arguments.


00:06:23.980 --> 00:06:30.680
So keyword arguments are very useful and they're things you always have to name your variables that are argument names for a function.


00:06:30.680 --> 00:06:33.980
And the caller of the function can use those. You can specify them.


00:06:33.980 --> 00:06:36.980
And if you don't specify them, you have to send them in order.


00:06:36.980 --> 00:06:40.620
but if you do specify them, you can rearrange the order if you want.


00:06:40.620 --> 00:06:43.180
You can also, one of the things that's often used,


00:06:43.180 --> 00:06:48.620
how they're often used is, you've got like a whole bunch of default values for arguments,


00:06:48.620 --> 00:06:51.920
and a caller just needs to override like one or two,


00:06:51.920 --> 00:06:53.620
you can just name it that way.


00:06:53.620 --> 00:07:00.020
But one of the things in Python 3 is the different use of the asterisks in all of this.


00:07:00.020 --> 00:07:07.080
and there's a way to kind of separate your positional arguments from your named only arguments.


00:07:07.080 --> 00:07:09.980
And if you stick a star in as one of the variables,


00:07:09.980 --> 00:07:15.080
it forces everything to the right to be only named.


00:07:15.080 --> 00:07:18.980
So a caller has to provide those with names.


00:07:18.980 --> 00:07:23.920
And I didn't, that's something that I completely missed and that's pretty cool. I like it.


00:07:23.920 --> 00:07:25.920
I really like this feature.


00:07:25.920 --> 00:07:32.160
And I implore people who are using **kwargs


00:07:32.160 --> 00:07:38.460
just, and that's what you pass to the function, maybe a *args thrown in there for additional pain and suffering,


00:07:38.460 --> 00:07:43.860
to look at this and think about how you might be able to restructure your code like this.


00:07:43.860 --> 00:07:48.760
So a lot of things, you'll have a function and you want to take a variable amount of things.


00:07:48.760 --> 00:07:52.060
And so the way they do it is they say **kwargs.


00:07:52.060 --> 00:07:54.060
You look at that signature and you're like,


00:07:54.060 --> 00:07:58.060
"What do I do here? I have no idea. I sure hope the documentation tells me."


00:07:58.060 --> 00:08:02.460
Because the function says, "I take anything, you make up a name, I'll take it."


00:08:02.460 --> 00:08:05.860
But there's usually like a handful of things it actually takes.


00:08:05.860 --> 00:08:08.860
There's a bounded set of like, "These are the five things you can pass."


00:08:08.860 --> 00:08:11.660
They're not all required. Put them in as keyword arguments.


00:08:11.660 --> 00:08:15.460
But if it's **kwargs, you're just saying to everybody,


00:08:15.460 --> 00:08:18.860
"Good luck. Go hunting. Hopefully I documented this."


00:08:18.860 --> 00:08:21.060
Or you find something on Stack Overflow.


00:08:21.060 --> 00:08:25.060
So you could say star, comma, and then keyword,


00:08:25.060 --> 00:08:27.020
the argument name equals the default value,


00:08:27.020 --> 00:08:28.420
argument name equals default value,


00:08:28.420 --> 00:08:30.460
and then it has exactly the same behavior,


00:08:30.460 --> 00:08:34.520
except you can see both in your tooling editor


00:08:34.520 --> 00:08:36.420
as well as in looking at the function,


00:08:36.420 --> 00:08:38.920
what it takes, and you call it exactly the same way.


00:08:38.920 --> 00:08:40.080
So I really love this feature.


00:08:40.080 --> 00:08:44.320
I love it too, and I like your explanation of other reasons to use it.


00:08:44.320 --> 00:08:49.320
The, I'm with you, the star star, the KWARGs,


00:08:49.380 --> 00:08:53.380
It just makes it so the user of that function has no idea what they're supposed to pass in.


00:08:53.380 --> 00:08:57.220
The worst offender of this is the AWS API.


00:08:57.220 --> 00:08:58.720
It's super frustrating.


00:08:58.720 --> 00:09:02.260
Like sometimes it's dictionaries of dictionaries, sometimes they're not.


00:09:02.260 --> 00:09:04.020
It's just, don't get me started.


00:09:04.020 --> 00:09:06.020
And the documentation doesn't cover it, right?


00:09:06.020 --> 00:09:10.720
The documentation will say, well, this sub part is this name, but it's this type, which is really a dictionary.


00:09:10.720 --> 00:09:14.020
But there's no mention or description of what goes in that sub dictionary.


00:09:14.020 --> 00:09:17.180
It's just, they can be totally avoided by doing cool stuff like this,


00:09:17.180 --> 00:09:19.980
which has the same effect.


00:09:19.980 --> 00:09:22.980
Other stuff that's cool, by the way, is Datadog.


00:09:22.980 --> 00:09:27.180
So if you have an app that spans multiple processes,


00:09:27.180 --> 00:09:29.780
maybe is using different services,


00:09:29.780 --> 00:09:31.280
and it's a pieced together larger app,


00:09:31.280 --> 00:09:32.780
you should definitely check out Datadog.


00:09:32.780 --> 00:09:36.480
It's a monitoring solution for providing deep visibility,


00:09:36.480 --> 00:09:40.880
and it tracks down issues across distributed Python apps.


00:09:40.880 --> 00:09:42.580
So it's pretty awesome. Within just a few minutes,


00:09:42.580 --> 00:09:44.780
you'll be able to investigate bottlenecks in your code


00:09:44.780 --> 00:09:47.120
by exploring graphs and rich dashboards.


00:09:47.120 --> 00:09:49.320
So if you want to check that out,


00:09:49.320 --> 00:09:52.780
if you think having better insight into how your overall app is working,


00:09:52.780 --> 00:09:54.780
visualize your Python performance today.


00:09:54.780 --> 00:09:57.980
Get started with Datadog, do a free trial,


00:09:57.980 --> 00:10:00.220
and they'll give you a free Datadog t-shirt.


00:10:00.220 --> 00:10:02.680
It's very cute and gray and white, and I like it.


00:10:02.680 --> 00:10:06.320
So check it out over at pythonbytes.fm/datadog.


00:10:06.320 --> 00:10:09.320
One of the things that we haven't talked about for a while is


00:10:09.320 --> 00:10:11.320
how to install packages.


00:10:11.320 --> 00:10:17.160
There's a really great new way with pip10 to pip install them.


00:10:17.160 --> 00:10:19.800
But there's more to it than that, right?


00:10:19.800 --> 00:10:24.360
It's not just pip install the thing and the client side behavior is different.


00:10:24.360 --> 00:10:28.120
For the first time in a very long time,


00:10:28.120 --> 00:10:32.120
ever maybe, I don't know, it goes farther back than I know the history of it.


00:10:32.120 --> 00:10:34.040
That means something different on the server side.


00:10:34.040 --> 00:10:38.840
So finally, finally, finally, pypi.org officially launches.


00:10:38.840 --> 00:10:39.640
Yay!


00:10:39.640 --> 00:10:47.640
More importantly, legacy PyPI, the one at pypi.python.org/pypi,


00:10:47.640 --> 00:10:52.840
that one, is now over at legacy.pypi.org.


00:10:52.840 --> 00:10:55.840
And that's like an old stick-around version,


00:10:55.840 --> 00:10:57.640
and they're actually shutting it down.


00:10:57.640 --> 00:11:02.120
So the pypi.python.org will redirect over to what's called warehouse.


00:11:02.120 --> 00:11:06.080
That's the code name for the new implementation running at pypi.org.


00:11:06.080 --> 00:11:07.280
That's nice. I like it.


00:11:07.280 --> 00:11:08.320
Yeah, it's super awesome.


00:11:08.380 --> 00:11:11.700
This is no longer based on a sort of prototype code


00:11:11.700 --> 00:11:14.340
that grew before the web frameworks even existed.


00:11:14.340 --> 00:11:16.060
This is based on Pyramid.


00:11:16.060 --> 00:11:20.600
It's based on a lot of the common programming APIs


00:11:20.600 --> 00:11:22.420
and styles that we know today.


00:11:22.420 --> 00:11:25.380
It even uses Kubernetes and Docker


00:11:25.380 --> 00:11:26.780
and all sorts of amazing stuff.


00:11:26.780 --> 00:11:29.460
It uses Elasticsearch, maybe Postgres,


00:11:29.460 --> 00:11:31.400
I'm not entirely sure about that.


00:11:31.400 --> 00:11:34.720
So yeah, if people are thinking about adding features


00:11:34.720 --> 00:11:36.300
to PyPI and then they've thought,


00:11:36.300 --> 00:11:38.300
oh, but this is some pretty gnarly code,


00:11:38.300 --> 00:11:39.140
I'm not going in there.


00:11:39.140 --> 00:11:40.940
Well, the new version is the official version


00:11:40.940 --> 00:11:42.480
and it's much easier to add features to.


00:11:42.480 --> 00:11:44.560
- You talked with some of the people


00:11:44.560 --> 00:11:45.460
involved with this, right?


00:11:45.460 --> 00:11:46.300
- I did.


00:11:46.300 --> 00:11:49.700
So I talked with three of the folks that worked on it


00:11:49.700 --> 00:11:52.620
and we talked about a lot of the stories


00:11:52.620 --> 00:11:53.740
and when it launched and stuff


00:11:53.740 --> 00:11:56.140
and that's coming out on TalkPython this week.


00:11:56.140 --> 00:11:57.500
So it's a race.


00:11:57.500 --> 00:12:00.780
Does Python Bytes beat TalkPython episode 159?


00:12:00.780 --> 00:12:03.260
I'm not sure, but one of them,


00:12:03.260 --> 00:12:04.780
it's gonna be just about the same time.


00:12:04.780 --> 00:12:06.700
So if you're interested in this, go listen to it.


00:12:06.700 --> 00:12:08.100
You'll hear a lot of interesting stories.


00:12:08.100 --> 00:12:10.100
Like, Brian, do you remember when it used to be


00:12:10.100 --> 00:12:11.900
there was pypi.io?


00:12:11.900 --> 00:12:12.740
- Yeah.


00:12:12.740 --> 00:12:13.620
- Do you remember that in the early days?


00:12:13.620 --> 00:12:16.680
And then later it became pypi.org.


00:12:16.680 --> 00:12:19.200
I figured out what the story was around that.


00:12:19.200 --> 00:12:21.120
I thought it was indecision, right?


00:12:21.120 --> 00:12:22.180
Oh, we'll do IO.


00:12:22.180 --> 00:12:25.100
No, no, actually we should make it more organizational.


00:12:25.100 --> 00:12:25.940
We'll do .org, right?


00:12:25.940 --> 00:12:29.720
It turned out that what had happened was pypi.org


00:12:29.720 --> 00:12:31.180
was owned by someone else.


00:12:31.180 --> 00:12:33.100
The PSF didn't own it.


00:12:33.100 --> 00:12:35.000
And they had to try to get ahold of it.


00:12:35.000 --> 00:12:37.380
So in the meantime, they used pypi.io,


00:12:37.380 --> 00:12:40.340
but their ultimate goal was always to have pypi.org.


00:12:40.340 --> 00:12:43.300
It just took them a while to actually acquire the domain.


00:12:43.300 --> 00:12:44.940
So if stories like that are interesting,


00:12:44.940 --> 00:12:47.060
we got like a whole hour of it on DocPython.


00:12:47.060 --> 00:12:48.380
So people can check that out.


00:12:48.380 --> 00:12:51.060
So packages in Python.


00:12:51.060 --> 00:12:53.980
- We got a theme going on here.


00:12:53.980 --> 00:12:55.420
- I think we do have a theme.


00:12:55.420 --> 00:12:57.140
I got one more package after this, by the way.


00:12:57.140 --> 00:12:58.540
- So one of the things I forgot about


00:12:58.540 --> 00:13:00.860
is when you're kind of coming into,


00:13:00.860 --> 00:13:02.220
there's a lot of people that, as we know,


00:13:02.220 --> 00:13:05.300
come into Python from other languages,


00:13:05.300 --> 00:13:09.500
and they'll rush in and figure out how to do something quickly.


00:13:09.500 --> 00:13:13.400
And then they think, "Yeah, I'm a Python expert because I wrote a script."


00:13:13.400 --> 00:13:15.600
It isn't people are trying to become experts or anything.


00:13:15.600 --> 00:13:18.900
But one of the things that tripped me up right at first


00:13:18.900 --> 00:13:24.400
is getting my head around what is a module, what is a package,


00:13:24.400 --> 00:13:26.800
really how do users make those,


00:13:26.800 --> 00:13:30.900
and dealing with Dunder and NITs and Dunder and NIT files


00:13:30.900 --> 00:13:34.400
and on where do they go and all that stuff.


00:13:34.400 --> 00:13:37.480
And so there's a nice tutorial now.


00:13:37.480 --> 00:13:42.440
I think it's at real Python, Python modules and packages and introduction.


00:13:42.440 --> 00:13:44.760
And I just really liked this.


00:13:44.760 --> 00:13:46.760
It's a good rundown. It's pretty simple.


00:13:46.760 --> 00:13:49.320
And this is something I'm bookmarking.


00:13:49.320 --> 00:13:53.760
So a lot of the people I work with that are new to Python and trying to figure this stuff out,


00:13:53.760 --> 00:13:55.240
I can point them to this.


00:13:55.240 --> 00:13:56.640
It's a good introduction.


00:13:56.640 --> 00:13:57.800
Yeah, it's a great introduction.


00:13:57.800 --> 00:14:00.600
Yeah, it's definitely that kind of stuff that when you're new,


00:14:00.600 --> 00:14:03.400
it's a little bit weird to figure out the difference, right?


00:14:03.400 --> 00:14:06.320
like use packages and modules kind of the same,


00:14:06.320 --> 00:14:08.080
but they're not the same, what's the story?


00:14:08.080 --> 00:14:11.720
And especially learning how to package up your project


00:14:11.720 --> 00:14:14.240
to make it accessible to other programs is tricky.


00:14:14.240 --> 00:14:17.440
- This isn't going into packaging itself,


00:14:17.440 --> 00:14:19.880
which is, it's a bummer that we have those


00:14:19.880 --> 00:14:22.480
as two different aims.


00:14:22.480 --> 00:14:24.560
Really, this is talking about a directory


00:14:24.560 --> 00:14:28.200
with a dunder init in it and subdirectories and stuff.


00:14:28.200 --> 00:14:30.640
We're talking packages and sub packages.


00:14:30.640 --> 00:14:32.640
But it is the initial part.


00:14:32.640 --> 00:14:38.440
Once you have this down, then you can jump into packaging and distributing code to share.


00:14:38.440 --> 00:14:41.540
But this is a good starter. So it's a good learning place.


00:14:41.540 --> 00:14:43.540
Yeah, it's definitely a good learning place.


00:14:43.540 --> 00:14:49.540
So remember last week we spoke about the joint project that the PyCharm team


00:14:49.540 --> 00:14:55.140
and the Python Software Foundation did with their 2017 Python survey?


00:14:55.140 --> 00:14:55.540
Yeah.


00:14:55.540 --> 00:15:01.040
Right. One of the interesting pieces of data there was the people who are data scientists


00:15:01.040 --> 00:15:04.540
do more Python 3, modern Python that is,


00:15:04.540 --> 00:15:07.800
than as a percentage of their projects


00:15:07.800 --> 00:15:11.940
than say web developers or other types of Python developers.


00:15:11.940 --> 00:15:14.280
It's partly because they're starting from scratch,


00:15:14.280 --> 00:15:17.040
more of them, it's like a more new type of thing.


00:15:17.040 --> 00:15:18.480
So why start with the old?


00:15:18.480 --> 00:15:21.880
Well, the big news today is that Pandas,


00:15:21.880 --> 00:15:26.540
one of the major most important foundational data science libraries,


00:15:26.540 --> 00:15:30.080
is going modern Python only at the end of the year.


00:15:30.080 --> 00:15:32.400
That's a big thing. Yeah, definitely.


00:15:32.400 --> 00:15:35.760
Yeah, I would say this is as big of news as


00:15:35.760 --> 00:15:38.320
Django 2 going Python 3 only


00:15:38.320 --> 00:15:40.680
on similar timescales.


00:15:40.680 --> 00:15:42.680
Well, they're already out with their new stuff.


00:15:42.680 --> 00:15:44.680
So I guess just in terms of their old support ones.


00:15:44.680 --> 00:15:46.680
So that's pretty cool, right?


00:15:46.680 --> 00:15:48.960
One more major, major building block


00:15:48.960 --> 00:15:50.480
that it used to be,


00:15:50.480 --> 00:15:53.040
well, if I move to Python 3, I won't be able to get my libraries.


00:15:53.040 --> 00:15:55.760
It's now the story is if you don't move to Python 3,


00:15:55.760 --> 00:15:57.760
you don't get the best newest libraries.


00:15:57.760 --> 00:15:58.680
So pretty awesome.


00:15:58.680 --> 00:16:02.360
And it isn't just getting the newest, it's also security updates and things like that.


00:16:02.360 --> 00:16:04.360
Yeah, like part of their announcement said,


00:16:04.360 --> 00:16:08.760
on December 31st, 2018, pandas will drop support for Python 2.7,


00:16:08.760 --> 00:16:11.120
presumably stuff before that's not even supported.


00:16:11.120 --> 00:16:14.560
This includes no backports for security or bug fixes.


00:16:14.560 --> 00:16:15.320
Period.


00:16:15.320 --> 00:16:18.680
They are open to letting somebody take that to become their job,


00:16:18.680 --> 00:16:22.480
but they're like, "We're not doing that, so we're moving on."


00:16:22.480 --> 00:16:24.880
Is pandas like a volunteer thing?


00:16:24.880 --> 00:16:27.480
Is it open source, just run by open source people, do you know?


00:16:27.480 --> 00:16:31.280
I think so. I think it might be part of the high side stuff.


00:16:31.280 --> 00:16:32.400
I probably sorry,


00:16:32.400 --> 00:16:36.880
part of the support thing is, um, I mean, you can kind of expect some companies to


00:16:36.880 --> 00:16:42.600
have back like, you know, security and bug fixes on old releases, uh, for a


00:16:42.600 --> 00:16:46.240
while, but you know, open source projects, these are just people volunteering their


00:16:46.240 --> 00:16:50.160
time. I think it's completely reasonable for people to say, Hey, we're done trying


00:16:50.160 --> 00:16:51.640
to support two seven. Let's move on.


00:16:51.640 --> 00:16:55.680
Yeah, it makes sense. So I looked while you're talking and pandas is a numb focus


00:16:55.680 --> 00:17:01.720
sponsored a project. So I think it's sort of donation supported, but through a more


00:17:01.720 --> 00:17:07.800
formal science organization. But still, those people are contributing features. They can


00:17:07.800 --> 00:17:13.880
either focus on bug fixes and making Python two stuff work or just moving forward and


00:17:13.880 --> 00:17:17.840
getting the latest greatest stuff going. So that's pretty cool. Yeah, it's a good focus.


00:17:17.840 --> 00:17:22.240
So Brian, that's it for this week for items. Got anything in particular you want to talk


00:17:22.240 --> 00:17:26.320
about with everyone? I've got a couple episodes coming out on


00:17:26.320 --> 00:17:31.360
TalkPython and I'm getting ready for PyCon. I'm looking forward to that.


00:17:31.360 --> 00:17:34.080
Yeah, you have a talk going there, right? That's gonna be pretty awesome.


00:17:34.080 --> 00:17:37.520
Yeah, I'm getting a little nervous for that, but it'll go.


00:17:37.520 --> 00:17:41.600
Don't worry, it's not like it's recorded and then also there's a bunch of people there.


00:17:41.600 --> 00:17:44.720
Oh yeah, it's gonna be forever. No stress. Just kidding.


00:17:44.720 --> 00:17:46.880
No stress. Thanks for that.


00:17:46.880 --> 00:17:51.360
No, I'm just teasing you because I know you'll do great. We also have a booth there. You and I and


00:17:51.360 --> 00:17:54.720
and a few others so people can come visit us at the booth like the last year.


00:17:54.720 --> 00:17:57.960
>> I'd like people to try to reach out if they want to just come on


00:17:57.960 --> 00:18:00.560
and if there's something they want to record,


00:18:00.560 --> 00:18:04.760
I think I'm going to take some recording equipment so we can do some short recordings.


00:18:04.760 --> 00:18:06.600
>> That'd be awesome. Yeah, I'm definitely bringing


00:18:06.600 --> 00:18:08.840
my mic and going to do some stuff like that as well.


00:18:08.840 --> 00:18:09.520
>> What's up with you?


00:18:09.520 --> 00:18:12.520
>> Well, remember last time Matt Harrison was on the show and we were


00:18:12.520 --> 00:18:15.120
joking about trying to get some course or something other done?


00:18:15.120 --> 00:18:15.480
>> Yeah.


00:18:15.480 --> 00:18:18.440
>> Well, it's taken me a ton of work this past seven days,


00:18:18.440 --> 00:18:22.040
But nonetheless, we now have a brand new course to announce.


00:18:22.040 --> 00:18:24.640
Python 3, an illustrated tour.


00:18:24.640 --> 00:18:25.480
Nice.


00:18:25.480 --> 00:18:29.840
So the idea is, it basically only covers the features that were


00:18:29.840 --> 00:18:32.640
new to Python as of Python 3.


00:18:32.640 --> 00:18:35.840
So it says, here are a couple of peps that talk about, say, type annotations,


00:18:35.840 --> 00:18:40.140
and here's some graphics and other sort of walkthrough of what that means for you.


00:18:40.140 --> 00:18:43.640
So if you feel like you are not using


00:18:43.640 --> 00:18:47.240
all of the features of Python 3, or you're coming especially from Python 2,


00:18:47.240 --> 00:18:49.860
and you're like, I need a quick show me the new stuff


00:18:49.860 --> 00:18:52.140
sort of in a practical way,


00:18:52.140 --> 00:18:54.740
then check out the Python 3 and Illustrator tour.


00:18:54.740 --> 00:18:57.220
That's done by Matt Harrison and it came out really well.


00:18:57.220 --> 00:19:00.420
So check it out at talkpython.fm/illustrated.


00:19:00.420 --> 00:19:01.600
- Okay, I'll check that out.


00:19:01.600 --> 00:19:03.080
- Yeah, yeah, I learned a lot.


00:19:03.080 --> 00:19:04.320
It's really, really fun.


00:19:04.320 --> 00:19:05.140
We keep learning things.


00:19:05.140 --> 00:19:07.580
Like for example, you talked about the star


00:19:07.580 --> 00:19:09.220
at the beginning of the function arguments, right?


00:19:09.220 --> 00:19:10.260
That kind of stuff is in there.


00:19:10.260 --> 00:19:12.140
And I didn't know about that until too recently either.


00:19:12.140 --> 00:19:12.980
- Okay, cool.


00:19:12.980 --> 00:19:13.800
- All right.


00:19:13.800 --> 00:19:15.040
- It's been a good talk today, thanks.


00:19:15.040 --> 00:19:16.340
- Yeah, you bet, very nice one.


00:19:16.340 --> 00:19:18.580
We really dug into the packages this time, didn't we?


00:19:18.580 --> 00:19:20.140
And we don't plan this.


00:19:20.140 --> 00:19:21.140
It just happens.


00:19:21.140 --> 00:19:22.140
It just happens.


00:19:22.140 --> 00:19:23.140
That's right.


00:19:23.140 --> 00:19:24.140
All right.


00:19:24.140 --> 00:19:25.140
Well, thanks, Brian, and talk to you all later.


00:19:25.140 --> 00:19:26.140
Bye.


00:19:26.140 --> 00:19:28.540
Thank you for listening to Python Bytes.


00:19:28.540 --> 00:19:31.060
Follow the show on Twitter via @PythonBytes.


00:19:31.060 --> 00:19:34.180
That's Python Bytes as in B-Y-T-E-S.


00:19:34.180 --> 00:19:37.480
And get the full show notes at PythonBytes.fm.


00:19:37.480 --> 00:19:41.220
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:19:41.220 --> 00:19:42.220
way.


00:19:42.220 --> 00:19:44.680
We're always on the lookout for sharing something cool.


00:19:44.680 --> 00:19:48.140
On behalf of myself and Brian Ocken, this is Michael Kennedy.


00:19:48.140 --> 00:19:51.180
Thank you for listening and sharing this podcast with your friends and colleagues.

