
00:00:00.000 --> 00:00:05.200
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.200 --> 00:00:14.000
This is episode 298, just too short of 300 coming in fast, recorded August 23rd, 2022. I'm Michael


00:00:14.000 --> 00:00:19.200
Kennedy. And I'm Brian Okken. Wow, close to 300. That's amazing. Yeah. Yeah, that's,


00:00:19.200 --> 00:00:24.800
that's what is that coming up on six years here pretty soon? That's insane. That's amazing. Well,


00:00:24.800 --> 00:00:26.800
52 times.


00:00:26.800 --> 00:00:28.800
Yeah, I don't know.


00:00:28.800 --> 00:00:30.800
Pretty awesome.


00:00:30.800 --> 00:00:32.800
Got some fun folks we see in the audience who are out here


00:00:32.800 --> 00:00:34.800
frequently.


00:00:34.800 --> 00:00:36.800
Will McGugan is here. Will is going to be a guest on the next


00:00:36.800 --> 00:00:38.800
episode. So if you want to hear from Will,


00:00:38.800 --> 00:00:40.800
be sure to


00:00:40.800 --> 00:00:42.800
at least listen to the next episode if you don't come to the live one.


00:00:42.800 --> 00:00:44.800
Yeah, that would be fantastic.


00:00:44.800 --> 00:00:46.800
Also, before we get


00:00:46.800 --> 00:00:48.800
going on the topics, I just want to say


00:00:48.800 --> 00:00:50.800
thank you to Microsoft for Startups Founders Hub


00:00:50.800 --> 00:00:52.800
for sponsoring this and so


00:00:52.800 --> 00:00:54.340
so many of the episodes this year.


00:00:54.340 --> 00:00:56.700
Super great to have their support.


00:00:56.700 --> 00:00:57.540
- Very cool.


00:00:57.540 --> 00:01:00.420
- It's uncommon, Brian, to have such great supporters,


00:01:00.420 --> 00:01:01.260
wouldn't you say?


00:01:01.260 --> 00:01:02.580
- It is uncommon.


00:01:02.580 --> 00:01:05.400
Nice segue, I like it.


00:01:05.400 --> 00:01:08.700
So I'd like to talk about uncommon uses of Python


00:01:08.700 --> 00:01:10.820
in commonly used libraries.


00:01:10.820 --> 00:01:12.840
Actually, this is just a pretty cool article.


00:01:12.840 --> 00:01:17.160
It's by Eugene Yan, and he goes through a handful of things.


00:01:17.160 --> 00:01:18.300
I'm just gonna pull out one,


00:01:18.300 --> 00:01:20.220
but it goes through using super classes


00:01:20.220 --> 00:01:21.540
and a whole bunch of things.


00:01:21.540 --> 00:01:26.660
The idea was to learn how to build more maintainable and usable Python libraries.


00:01:26.660 --> 00:01:31.340
He's been reading some of the most widely used Python packages and learning some things


00:01:31.340 --> 00:01:35.700
along the way, which is an awesome way to learn is to read other code.


00:01:35.700 --> 00:01:36.700
>> I agree.


00:01:36.700 --> 00:01:37.700
I think it's fantastic.


00:01:37.700 --> 00:01:38.700
>> Yeah.


00:01:38.700 --> 00:01:42.100
So he goes through super and a handful of other things.


00:01:42.100 --> 00:01:43.100
When to use a mixin.


00:01:43.100 --> 00:01:45.180
I don't know if I'd use that.


00:01:45.180 --> 00:01:50.820
Anyway, the thing I want to pull out is using relative imports all the time.


00:01:50.820 --> 00:01:54.300
This is something I picked up not too long ago,


00:01:54.300 --> 00:01:56.820
but it really isn't talked about much.


00:01:56.820 --> 00:02:01.500
The idea is that if you do an import,


00:02:01.500 --> 00:02:05.460
like import something or from some library import,


00:02:05.460 --> 00:02:08.800
if you put a dot in front of it at the beginning,


00:02:08.800 --> 00:02:10.100
is the first dot,


00:02:10.100 --> 00:02:13.020
then it looks in your path,


00:02:13.020 --> 00:02:17.980
your current search, the directory of the file that it's in.


00:02:17.980 --> 00:02:23.340
In the example, he has a base.py from scikit-learn,


00:02:23.340 --> 00:02:29.940
and it says from.utils.validation import something.


00:02:29.940 --> 00:02:33.580
These are, because it says.utils,


00:02:33.580 --> 00:02:37.240
it'll look for utils in the current directory and not somewhere else,


00:02:37.240 --> 00:02:40.000
because there's probably a utils somewhere else


00:02:40.000 --> 00:02:42.380
also looking for the search path.


00:02:42.380 --> 00:02:46.600
This is neat. You can do multiple dots also.


00:02:46.600 --> 00:02:48.760
I don't ever, I don't think I ever do that.


00:02:48.760 --> 00:02:50.560
I do the current directory and down


00:02:50.560 --> 00:02:51.920
or the current project and down.


00:02:51.920 --> 00:02:53.320
So this is--


00:02:53.320 --> 00:02:55.420
- But dot dot will get you up one


00:02:55.420 --> 00:02:57.400
and then down a different path or something like that, right?


00:02:57.400 --> 00:02:58.240
- It will.


00:02:58.240 --> 00:03:00.920
So if you do dot dot something and you don't do slashes,


00:03:00.920 --> 00:03:03.040
you don't, it's not a direct, a path.


00:03:03.040 --> 00:03:05.760
It's kind of like a path, but it's not.


00:03:05.760 --> 00:03:07.280
Like dot is the current directory,


00:03:07.280 --> 00:03:11.700
dot dot is like one up and you can do three, but wow.


00:03:11.700 --> 00:03:13.520
I think there's something wrong with your project


00:03:13.520 --> 00:03:14.840
if you're doing that.


00:03:14.840 --> 00:03:17.260
But maybe not, maybe not.


00:03:17.260 --> 00:03:19.920
There's a couple of links in there for further reading.


00:03:19.920 --> 00:03:22.480
There's a Guido's decision on relative imports,


00:03:22.480 --> 00:03:27.060
which is part of the PEP 328 write-up.


00:03:27.060 --> 00:03:29.820
And actually this PEP 328 write-up


00:03:29.820 --> 00:03:32.620
is this little bit about Guido's decision


00:03:32.620 --> 00:03:35.280
where he's talked about the leading dot


00:03:35.280 --> 00:03:36.600
or leading two dots.


00:03:36.600 --> 00:03:38.680
There's a really good, easy way to get a handle


00:03:38.680 --> 00:03:39.920
on how to use this.


00:03:39.920 --> 00:03:44.820
And I use this a lot now and try to put it in projects


00:03:44.820 --> 00:03:47.860
projects at work and personal projects as well.


00:03:47.860 --> 00:03:49.680
The dot thing is cool and yeah,


00:03:49.680 --> 00:03:51.800
it doesn't talk about much, so I like it.


00:03:51.800 --> 00:03:54.800
>> Yeah, it's fantastic. It only works in packages and


00:03:54.800 --> 00:03:58.180
not just a pile of module files, right?


00:03:58.180 --> 00:04:00.540
>> Oh, yeah. You have to have


00:04:00.540 --> 00:04:03.020
Dunder and Net files within the directory.


00:04:03.020 --> 00:04:05.380
That's, I guess, one of the things that I wish we had


00:04:05.380 --> 00:04:08.020
another name for because in Python,


00:04:08.020 --> 00:04:10.540
we talk about a package or a sub-package.


00:04:10.540 --> 00:04:14.800
This could be just a directory with Python files in it,


00:04:14.800 --> 00:04:19.800
that has dunder init and that makes it a package in Python.


00:04:19.800 --> 00:04:22.120
- Some definition, yeah.


00:04:22.120 --> 00:04:26.260
- Yeah, we also talk about the package repository in PyPI.


00:04:26.260 --> 00:04:28.160
It's the Python package index.


00:04:28.160 --> 00:04:31.140
Those are not just directories with dunder inits.


00:04:31.140 --> 00:04:33.360
They're packaged up with a whole bunch of other metadata


00:04:33.360 --> 00:04:34.180
and stuff like that.


00:04:34.180 --> 00:04:36.080
So there's two things that we call packages,


00:04:36.080 --> 00:04:38.520
but yeah, they have to have dunder inits in them


00:04:38.520 --> 00:04:39.500
for this to work.


00:04:39.500 --> 00:04:40.340
So anyway.


00:04:40.340 --> 00:04:42.480
- Yeah, Brandon in the audience asked,


00:04:42.480 --> 00:04:47.160
So are we arguing for relative imports?


00:04:47.160 --> 00:04:48.520
For the current directory, I am.


00:04:48.520 --> 00:04:53.480
I think that within a project, if you're-- like internal stuff.


00:04:53.480 --> 00:04:59.680
I mean, if it's part of the external API of the project, I will always go through the


00:04:59.680 --> 00:05:02.280
external API to get at something.


00:05:02.280 --> 00:05:06.600
But there's a whole-- there's a lot of times where you're just developing a bunch of Python


00:05:06.600 --> 00:05:10.120
the modules together and they're internally,


00:05:10.120 --> 00:05:13.280
they're going to talk to other sub-components and that


00:05:13.280 --> 00:05:15.640
isn't necessarily part of the external API


00:05:15.640 --> 00:05:17.480
and this is the best way to get at it.


00:05:17.480 --> 00:05:19.920
>> Yeah. All right. Sounds good.


00:05:19.920 --> 00:05:22.800
Next up, let's go to the Skyplane.


00:05:22.800 --> 00:05:25.880
This one comes to us from,


00:05:25.880 --> 00:05:28.880
let me make sure I give the proper credit.


00:05:28.880 --> 00:05:33.120
This one comes to us from RMRF, the SUDUR.


00:05:33.120 --> 00:05:35.560
Thank you for sending this in. Really appreciate it.


00:05:35.560 --> 00:05:40.560
The project is called Skyplane, 114 times faster cloud transfers.


00:05:40.560 --> 00:05:43.960
At first I was like, what does that mean exactly?


00:05:43.960 --> 00:05:45.960
Like, what's the baseline for this?


00:05:45.960 --> 00:05:49.160
I'll say so probably what they're basing that on in a minute.


00:05:49.160 --> 00:05:51.960
This is interesting for two reasons.


00:05:51.960 --> 00:05:57.160
It's interesting because it's a tool that I think many Python developers


00:05:57.160 --> 00:06:00.960
would find useful, especially those folks doing a lot of work in the cloud.


00:06:00.960 --> 00:06:06.760
It is also useful or interesting because it is itself a Python project.


00:06:06.760 --> 00:06:07.260
Okay.


00:06:07.260 --> 00:06:13.460
So if you want to contribute to it or understand it or extend it or work it and do other things,


00:06:13.460 --> 00:06:14.660
that's totally possible.


00:06:14.660 --> 00:06:16.660
It's worked on by a pretty big group of folks.


00:06:16.660 --> 00:06:23.660
The idea is it gives you blazing fast bulk transfers, file transfers between any cloud.


00:06:23.660 --> 00:06:29.860
Any, it needs a little like star or an asterisk by it that says any means any of the big three.


00:06:29.860 --> 00:06:31.860
Cloud providers, okay.


00:06:31.860 --> 00:06:35.360
Whereas, you know, this is like AWS,


00:06:35.360 --> 00:06:38.860
it's Azure, and it's Google GCP.


00:06:38.860 --> 00:06:40.860
So those three.


00:06:40.860 --> 00:06:42.860
However, what I'm not clear on


00:06:42.860 --> 00:06:47.360
is whether you can point it at the S3 compatible places.


00:06:47.360 --> 00:06:51.360
Like Linode and DigitalOcean also have cloud storage


00:06:51.360 --> 00:06:55.160
that are S3-like, but I'm pretty sure it won't work


00:06:55.160 --> 00:06:57.860
based on the way I'm about to tell you what's going to happen next, okay?


00:06:57.860 --> 00:07:13.960
So if you go over there's an architecture section and if you look in there they've got this sky retreat 2022 where Paris Jane introduces skyplane and the folks there is about a 15 minute video but you really gotta watch just two minutes of it to get the Zen.


00:07:13.960 --> 00:07:25.660
So they laid out a scenario this is I believe in their world they're doing data science and so what they need is they need the data very near to them and there's a woman in the middle east.


00:07:25.660 --> 00:07:29.260
using some AWS S3 and point there.


00:07:29.260 --> 00:07:31.560
And she has 80 gigs of data.


00:07:31.560 --> 00:07:35.060
And Paras is on the East Coast of the US


00:07:35.060 --> 00:07:37.360
and wants closer access to that data


00:07:37.360 --> 00:07:38.960
for their other work that they're doing.


00:07:38.960 --> 00:07:42.160
So there's a way with the AWS CLI


00:07:42.160 --> 00:07:46.460
to just copy from Bahrain or wherever it is over to Virginia.


00:07:46.460 --> 00:07:48.260
And they run that and it says,


00:07:48.260 --> 00:07:50.060
after running for a while, it says,


00:07:50.060 --> 00:07:52.660
estimated time to completion, one hour.


00:07:52.660 --> 00:07:54.360
Is that good or bad?


00:07:54.360 --> 00:07:55.640
It's a lot of data, right?


00:07:55.640 --> 00:07:56.920
Eight gigs.


00:07:56.920 --> 00:07:59.760
Halfway around the world, it's miraculous that this is possible.


00:07:59.760 --> 00:08:01.280
But is that good or not?


00:08:01.280 --> 00:08:03.440
So then they say, well, let's try it with Skyplane.


00:08:03.440 --> 00:08:05.560
They were getting like 20 megabit, I think.


00:08:05.560 --> 00:08:06.600
They run it with Skyplane.


00:08:06.600 --> 00:08:11.160
They're getting 30 gigabit transfers from the Middle East.


00:08:11.160 --> 00:08:13.360
And it took 30 seconds instead of an hour.


00:08:13.360 --> 00:08:15.720
That's quite a bit faster.


00:08:15.720 --> 00:08:16.560
No arguing with that.


00:08:16.560 --> 00:08:17.680
That is pretty awesome.


00:08:17.680 --> 00:08:18.520
Exactly.


00:08:18.520 --> 00:08:22.080
And so instead of going across the open internet,


00:08:22.080 --> 00:08:25.160
It was transferring basically over like dedicated fiber


00:08:25.160 --> 00:08:27.560
for just AWS data center connects


00:08:27.560 --> 00:08:28.640
or something like that, right?


00:08:28.640 --> 00:08:32.040
But what it does is it will spin up a virtual machine


00:08:32.040 --> 00:08:36.080
or many virtual machines in the different data centers.


00:08:36.080 --> 00:08:39.400
So I think what happened here, not 100% sure,


00:08:39.400 --> 00:08:42.760
but I think it fired up some VMs in Virginia,


00:08:42.760 --> 00:08:47.040
copied it from S3 in Bahrain directly


00:08:47.040 --> 00:08:50.680
through the internal data center transfer


00:08:50.680 --> 00:08:54.480
and then pushed it into nearly local S3 storage.


00:08:54.480 --> 00:08:58.160
And you can do the same thing from AWS East Coast


00:08:58.160 --> 00:08:59.840
to Azure West Coast, right?


00:08:59.840 --> 00:09:02.440
You would fire up a VM, I think, in that scenario,


00:09:02.440 --> 00:09:03.680
in both of the data centers,


00:09:03.680 --> 00:09:05.160
and those VMs would talk directly


00:09:05.160 --> 00:09:07.160
over the high-speed data center network.


00:09:07.160 --> 00:09:09.840
Instead of the S3 one, we'll copy it down to your machine,


00:09:09.840 --> 00:09:11.800
and then you push it back out of your machine


00:09:11.800 --> 00:09:13.000
to the new destination.


00:09:13.000 --> 00:09:13.840
- Yeah.


00:09:13.840 --> 00:09:15.760
- So it basically manages data center


00:09:15.760 --> 00:09:17.120
to data center traffic.


00:09:17.120 --> 00:09:18.160
- That's pretty cool.


00:09:18.160 --> 00:09:19.000
Makes sense. - It's pretty cool.


00:09:19.000 --> 00:09:22.040
- Yeah, yeah, yeah, and it's like all the CLI,


00:09:22.040 --> 00:09:23.520
it's like one CLI command,


00:09:23.520 --> 00:09:26.280
and that's creating the various virtual machines,


00:09:26.280 --> 00:09:28.720
provisioning them, setting up the encryption,


00:09:28.720 --> 00:09:31.440
doing all the stuff, and then it shuts back down.


00:09:31.440 --> 00:09:33.320
So, and as far as security goes,


00:09:33.320 --> 00:09:36.840
what you do is you basically install the AWS CLI


00:09:36.840 --> 00:09:41.440
or the Azure CLI, and you just log in to those local CLIs,


00:09:41.440 --> 00:09:45.520
and it uses those behind the scenes to do the setup


00:09:45.520 --> 00:09:48.480
of like create the VM, and then SSH over to it,


00:09:48.480 --> 00:09:53.400
the work or something like that. So it has a lot of integrity checking. So it does like


00:09:53.400 --> 00:09:59.360
checksums and verifies the files are there. The file sizes are the same and all that kind


00:09:59.360 --> 00:10:05.420
of stuff. It does end to end encryption sort of. So the VM as it gets it out of cloud storage


00:10:05.420 --> 00:10:09.360
encrypts it and then sends it over the network. And then when it has to decrypt it to drop


00:10:09.360 --> 00:10:14.000
it back into the other place, but it also on top of that goes over TLS. However, some


00:10:14.000 --> 00:10:18.240
Some people might be storing encrypted data in the cloud because they don't trust that


00:10:18.240 --> 00:10:20.840
it is not going to get looked at.


00:10:20.840 --> 00:10:25.660
So even the stuff in S3 or wherever Azure Blob Storage could be encrypted, in which


00:10:25.660 --> 00:10:29.540
case you can turn all this off and it'll go a lot faster because it's already encrypted


00:10:29.540 --> 00:10:30.540
end to end.


00:10:30.540 --> 00:10:34.900
It'll set up like virtual private networks if it's within a data center.


00:10:34.900 --> 00:10:37.940
And there's a bunch of cool things that are kind of nice that you don't have to worry


00:10:37.940 --> 00:10:38.940
about.


00:10:38.940 --> 00:10:40.240
Anyway, this is the sky plane.


00:10:40.240 --> 00:10:45.420
So if you're transferring data between different clouds or even different data centers within


00:10:45.420 --> 00:10:48.360
a single cloud, it looks like it'll do a lot of nice work for you.


00:10:48.360 --> 00:10:51.040
Now it's believable it is faster.


00:10:51.040 --> 00:10:53.600
I'm curious if it's cheaper also.


00:10:53.600 --> 00:10:54.600
Any comment?


00:10:54.600 --> 00:10:56.440
Oh, that's a really good point.


00:10:56.440 --> 00:11:02.100
Actually, if you go and say AWS to Azure or vice versa, I think it's the same price.


00:11:02.100 --> 00:11:07.120
But if you're going Azure to Azure, it probably is cheaper because I don't know if they really


00:11:07.120 --> 00:11:11.920
charge you for the S3 CLI if you say do a transfer, you're still like flowing through.


00:11:11.920 --> 00:11:17.800
But you know, the within data center transfer is cheaper than outside it out of the yeah,


00:11:17.800 --> 00:11:18.800
exactly.


00:11:18.800 --> 00:11:19.800
Cool.


00:11:19.800 --> 00:11:20.800
So maybe I don't know.


00:11:20.800 --> 00:11:22.400
They didn't talk about it, but possibly.


00:11:22.400 --> 00:11:23.400
Yeah.


00:11:23.400 --> 00:11:24.400
Well, that's awesome.


00:11:24.400 --> 00:11:25.400
That's what I got for you.


00:11:25.400 --> 00:11:26.400
Yeah.


00:11:26.400 --> 00:11:27.400
Skyplane.


00:11:27.400 --> 00:11:28.400
You know what else is awesome?


00:11:28.400 --> 00:11:29.400
Speaking of Azure.


00:11:29.400 --> 00:11:30.400
Microsoft for startups.


00:11:30.400 --> 00:11:31.400
Yeah.


00:11:31.400 --> 00:11:32.400
Yeah, absolutely.


00:11:32.400 --> 00:11:35.120
They are, like I said, big supporters of the show,


00:11:35.120 --> 00:11:36.240
big fans of the show.


00:11:36.240 --> 00:11:37.780
And this episode, like many of them,


00:11:37.780 --> 00:11:40.660
is brought to you by Microsoft for Startups Founders Hub.


00:11:40.660 --> 00:11:44.540
If you have a startup and you intend to have


00:11:44.540 --> 00:11:46.740
some kind of cloud computing resources


00:11:46.740 --> 00:11:49.040
or you've dreamed of going to something like


00:11:49.040 --> 00:11:51.500
a Y Combinator type of accelerator,


00:11:51.500 --> 00:11:53.580
this is a really great way


00:11:53.580 --> 00:11:55.460
to get some of the benefits of that.


00:11:55.460 --> 00:11:58.300
So with Microsoft for Startups Founders Hub,


00:11:58.300 --> 00:12:01.020
they give you a bunch of resources


00:12:01.020 --> 00:12:04.740
for running your startup in the cloud, in Azure,


00:12:04.740 --> 00:12:07.580
but also many other cloud resources,


00:12:07.580 --> 00:12:11.660
like a bunch of GitHub credits for automation and actions,


00:12:11.660 --> 00:12:14.820
as well as access to places like OpenAI.


00:12:14.820 --> 00:12:17.020
But another thing I think is really important


00:12:17.020 --> 00:12:20.780
is having access to mentors and people who have been there


00:12:20.780 --> 00:12:22.780
and have the right connections, right?


00:12:22.780 --> 00:12:25.100
Like, I think honestly, that might be the hardest thing


00:12:25.100 --> 00:12:27.540
about doing a startup, because as developers,


00:12:27.540 --> 00:12:29.860
we can build it, often we can build it,


00:12:29.860 --> 00:12:32.620
But then it's, well, how do you build the right thing?


00:12:32.620 --> 00:12:34.820
How do you, in terms of customer fit,


00:12:34.820 --> 00:12:38.100
how do you get access to the right networks


00:12:38.100 --> 00:12:40.420
so that you can find people for investing


00:12:40.420 --> 00:12:45.420
or get better maybe coaching for like sales and marketing?


00:12:45.420 --> 00:12:46.820
All those things are incredibly hard,


00:12:46.820 --> 00:12:49.460
especially if your expertise is in software.


00:12:49.460 --> 00:12:51.500
So through Microsoft for Startup Founders Hub,


00:12:51.500 --> 00:12:54.740
you get access to their entire mentorship network,


00:12:54.740 --> 00:12:56.300
access a pool of hundreds of mentors


00:12:56.300 --> 00:12:59.060
across a bunch of disciplines like idea validation,


00:12:59.060 --> 00:13:01.740
fundraising, management, coaching, sales, and marketing,


00:13:01.740 --> 00:13:04.780
and a bunch of technical areas as well.


00:13:04.780 --> 00:13:06.880
So you'll be able to book a one-on-one meetings


00:13:06.880 --> 00:13:10.060
with these mentors, many of whom are founders themselves.


00:13:10.060 --> 00:13:11.840
You'll make your idea a reality today


00:13:11.840 --> 00:13:13.520
with the critical support you'll get


00:13:13.520 --> 00:13:15.260
from Microsoft for Startups Founders Hub.


00:13:15.260 --> 00:13:18.300
To join the program, there are very few restrictions.


00:13:18.300 --> 00:13:20.980
You don't have to be third-party validated.


00:13:20.980 --> 00:13:22.600
You don't have to necessarily have funding.


00:13:22.600 --> 00:13:26.380
You just visit pythonbytes.fm/foundershub2022,


00:13:26.380 --> 00:13:27.380
link's in your show notes.


00:13:27.380 --> 00:13:29.260
You apply for free, you get accepted,


00:13:29.260 --> 00:13:32.620
you get all these benefits, and it seems like a great program.


00:13:32.620 --> 00:13:34.980
>> Yeah, I'm excited to see what comes out of this.


00:13:34.980 --> 00:13:36.300
>> Yeah, absolutely.


00:13:36.300 --> 00:13:39.540
All right, what do you got for us here, Brian?


00:13:39.540 --> 00:13:44.540
>> Well, it wouldn't be complete if we didn't talk about


00:13:44.540 --> 00:13:47.140
Will McGugan a little bit.


00:13:47.140 --> 00:13:48.460
[LAUGH]


00:13:48.460 --> 00:13:50.980
>> Yeah, absolutely, hey Will.


00:13:50.980 --> 00:13:56.420
>> So there's an article that is from the textualize.io blog.


00:13:56.420 --> 00:14:01.420
And it's seven things I learned about building a modern TUI framework.


00:14:01.420 --> 00:14:04.360
And this is pretty interesting because I think that, I mean,


00:14:04.360 --> 00:14:08.900
Will, more than anybody else, has really thought about,


00:14:08.900 --> 00:14:13.440
like, okay, I want to have something to be really responsive and really good to work with


00:14:13.440 --> 00:14:16.580
on the command line, which is, it's been there for a long time,


00:14:16.580 --> 00:14:18.080
we just haven't developed it much.


00:14:18.080 --> 00:14:21.340
So there's a whole bunch of cool learnings that he talks about,


00:14:21.340 --> 00:14:24.720
like terminals are fast, and they're faster than we realize.


00:14:24.720 --> 00:14:34.240
But there's a whole bunch of like things that you can that are different about terminals and other places like Flickr and tearing and stuff and how to deal with that.


00:14:34.240 --> 00:14:36.000
There's a whole bunch of learnings in here.


00:14:36.000 --> 00:14:46.480
The thing that like popped out is something that everybody can use that I wanted to talk about was a little blip that he talked about that is dict views are amazing.


00:14:46.500 --> 00:14:50.860
So the thing he talks about here is that,


00:14:50.860 --> 00:14:56.220
so maybe I don't know if everybody knows the term dict views or views into a dictionary,


00:14:56.220 --> 00:15:00.620
but things like if you have a dictionary and you ask for the keys,


00:15:00.620 --> 00:15:02.160
or you ask for items,


00:15:02.160 --> 00:15:03.220
that is a view,


00:15:03.220 --> 00:15:05.400
it's called a view into a dictionary,


00:15:05.400 --> 00:15:08.060
and they are super fast.


00:15:08.060 --> 00:15:14.460
One of the things he points out is that they act like sets also,


00:15:14.460 --> 00:15:17.420
and you can use set operators.


00:15:17.420 --> 00:15:19.580
Like here's the little carrot symbol,


00:15:19.580 --> 00:15:21.540
and I can't remember, I'll have to look it up.


00:15:21.540 --> 00:15:24.520
The carrot symbol is a symmetric difference.


00:15:24.520 --> 00:15:27.900
Basically, what's just, give me a set of the stuff


00:15:27.900 --> 00:15:29.740
that's different about the two different sets,


00:15:29.740 --> 00:15:31.060
or two dictionaries.


00:15:31.060 --> 00:15:33.880
And you can do this in code,


00:15:33.880 --> 00:15:36.660
but he's doing it using views


00:15:36.660 --> 00:15:41.660
because those operators are happening with C code.


00:15:41.660 --> 00:15:43.580
Python has optimized those,


00:15:43.580 --> 00:15:49.380
So they work super fast and they're way faster than anything you could write in Python.


00:15:49.380 --> 00:15:52.300
So this just taking the items of


00:15:52.300 --> 00:15:55.920
two dictionaries and using set operations on them,


00:15:55.920 --> 00:15:58.140
and then you can go back to dictionaries if you want.


00:15:58.140 --> 00:16:00.500
You don't have to use that, but super cool.


00:16:00.500 --> 00:16:04.180
I didn't know that about dictionaries and views.


00:16:04.180 --> 00:16:05.580
So nice.


00:16:05.580 --> 00:16:09.940
>> Obviously, use.items and.keys all the time.


00:16:09.940 --> 00:16:12.180
Didn't know they had this name,


00:16:12.180 --> 00:16:14.500
and I didn't know you could do set operations on them.


00:16:14.500 --> 00:16:15.120
Quite cool.


00:16:15.120 --> 00:16:17.120
>> Right. Yeah, super neat.


00:16:17.120 --> 00:16:19.900
Then he covers a whole bunch of other stuff


00:16:19.900 --> 00:16:23.460
like LRU caching and how fast that is.


00:16:23.460 --> 00:16:25.500
One of the things that I thought was great,


00:16:25.500 --> 00:16:28.660
where he talks about Unicode in art.


00:16:28.660 --> 00:16:33.100
Unicode art in docstrings of just like a picture,


00:16:33.100 --> 00:16:36.280
it says a picture gives you a thousand words or whatever.


00:16:36.280 --> 00:16:40.620
But he gives an example here for talking about


00:16:40.620 --> 00:16:43.880
splitting the screen into sub regions.


00:16:43.880 --> 00:16:45.940
And yeah, there's no way to,


00:16:45.940 --> 00:16:48.100
I mean, describing it in text is good,


00:16:48.100 --> 00:16:49.620
but this little picture goes,


00:16:49.620 --> 00:16:51.660
you can just mentally go, "Oh yeah, I get it."


00:16:51.660 --> 00:16:53.960
If you give it a cut X and a cut Y,


00:16:53.960 --> 00:16:55.920
you end up with four regions, obviously.


00:16:55.920 --> 00:16:59.020
But it isn't obvious just looking at the API,


00:16:59.020 --> 00:17:01.040
but with a little picture, you're like,


00:17:01.040 --> 00:17:02.220
"Oh yeah, that's cool."


00:17:02.220 --> 00:17:04.420
So he's got a little, for people listening,


00:17:04.420 --> 00:17:07.660
he's got a picture showing just spatially


00:17:07.660 --> 00:17:10.880
what it would look like using ASCII characters.


00:17:10.880 --> 00:17:11.600
>> Neat.


00:17:11.600 --> 00:17:15.380
>> Yeah, I love it. I love when people put art like that in there.


00:17:15.380 --> 00:17:17.180
I'm looking for where it is.


00:17:17.180 --> 00:17:19.140
I guess I'm going to have to look this up.


00:17:19.140 --> 00:17:21.560
But in CPython,


00:17:21.560 --> 00:17:25.840
there's actually this huge diagram in the malloc,


00:17:25.840 --> 00:17:28.500
in the memory management section.


00:17:28.500 --> 00:17:29.700
>> Oh, really?


00:17:29.700 --> 00:17:33.780
>> It's like this. It shows you all the different data structures and


00:17:33.780 --> 00:17:37.460
concepts that are used to manage memory like the pools,


00:17:37.460 --> 00:17:40.660
the blocks and the arenas and all that stuff


00:17:40.660 --> 00:17:43.180
in a huge diagram in Code Comets.


00:17:43.180 --> 00:17:43.820
It's perfect.


00:17:43.820 --> 00:17:49.140
>> Nice. He gives a shout out to just one tool that's around.


00:17:49.140 --> 00:17:51.080
He must use it, called Monodraw.


00:17:51.080 --> 00:17:52.360
It's a Mac tool.


00:17:52.360 --> 00:17:54.860
There are drawing tools that you can use to generate


00:17:54.860 --> 00:17:58.600
ASCII art or Unicode art as it were.


00:17:58.600 --> 00:17:59.180
>> Yeah.


00:17:59.180 --> 00:17:59.900
>> Yeah.


00:17:59.900 --> 00:18:00.660
>> Nice.


00:18:00.660 --> 00:18:02.660
>> Maybe I'll be able to find it here.


00:18:02.660 --> 00:18:06.060
Let's see. I'd love to share it with everyone if I can find it.


00:18:06.060 --> 00:18:07.660
>> Oh, yes. Here we go.


00:18:07.660 --> 00:18:09.140
I'll put the link in here.


00:18:09.140 --> 00:18:10.260
You're ready for this, Brian?


00:18:10.260 --> 00:18:11.500
>> Yeah. You can show it.


00:18:11.500 --> 00:18:13.100
>> Yeah. I had to find it.


00:18:13.100 --> 00:18:14.800
Hold on. There we go. Look at this.


00:18:14.800 --> 00:18:15.780
>> Oh, yeah.


00:18:15.780 --> 00:18:18.940
>> Here's the object allocator in Python.


00:18:18.940 --> 00:18:21.020
It shows here's the object specific ones,


00:18:21.020 --> 00:18:23.140
the int dick, and then there's object specific,


00:18:23.140 --> 00:18:24.140
and then you can see these tiers.


00:18:24.140 --> 00:18:26.140
Then there's the Python object allocator,


00:18:26.140 --> 00:18:28.260
the raw memory, and even goes down to,


00:18:28.260 --> 00:18:30.340
here's the OS and the physical memory.


00:18:30.340 --> 00:18:32.260
Then I think maybe further down,


00:18:32.260 --> 00:18:34.020
we might be able to find some of the stuff


00:18:34.020 --> 00:18:36.020
about arenas or whatever. But isn't that nuts?


00:18:36.020 --> 00:18:39.860
>> Yeah, but also it's awesome because you can visually,


00:18:39.860 --> 00:18:42.620
now you can read the text and it makes more sense instead of just having-


00:18:42.620 --> 00:18:46.580
>> Yeah, it has a short description and then a proper picture of,


00:18:46.580 --> 00:18:48.740
here's what's happening. Yeah, absolutely.


00:18:48.740 --> 00:18:49.260
>> Very good.


00:18:49.260 --> 00:18:52.860
>> Cool. Yeah, that's a great example and great recommendation.


00:18:52.860 --> 00:18:57.180
Sometimes a little bit of ASCII art like this, it really does help.


00:18:57.180 --> 00:18:58.620
>> It goes a long ways. Yeah.


00:18:58.620 --> 00:18:59.740
>> Yeah, it sure does.


00:18:59.740 --> 00:19:02.140
>> Whole bunch of other great tips in Will's article,


00:19:02.140 --> 00:19:04.480
so I encourage people to check it out.


00:19:04.480 --> 00:19:07.760
Right on. Another thing that goes a long way is Python.


00:19:07.760 --> 00:19:13.260
There's an InfoWorld article that refers to Python as unstoppable.


00:19:13.260 --> 00:19:15.460
The title is Python popularity is still soaring,


00:19:15.460 --> 00:19:18.400
but the subtitle is Unstoppable Python,


00:19:18.400 --> 00:19:24.660
once again, ranked number one in the August updates for both the TOB and PYPL indexes.


00:19:24.660 --> 00:19:27.580
I don't know if that's PIPL or I don't know how to say this,


00:19:27.580 --> 00:19:31.600
but another secondary programming language index.


00:19:31.600 --> 00:19:33.200
Yeah. How cool is that?


00:19:33.200 --> 00:19:35.520
Very cool. Also a really nice rocket image.


00:19:35.520 --> 00:19:37.520
I was going to say this is,


00:19:37.520 --> 00:19:40.760
it characterizes the other programming languages,


00:19:40.760 --> 00:19:42.920
hot air balloons, and Python as a rocket.


00:19:42.920 --> 00:19:43.920
Yeah.


00:19:43.920 --> 00:19:48.160
So yeah, some interesting things to take away from here.


00:19:48.160 --> 00:19:54.360
Let's see, that Python first took the top spot just last October.


00:19:54.360 --> 00:19:56.080
So that was actually big news, right?


00:19:56.080 --> 00:19:56.520
Yeah.


00:19:56.520 --> 00:20:00.520
Now, that makes it the only language besides C and Java


00:20:00.520 --> 00:20:04.000
to ever hold the number one position from the TOV index.


00:20:04.000 --> 00:20:05.320
And not only is it still number one,


00:20:05.320 --> 00:20:07.920
but it's actually gained a couple of percentage points


00:20:07.920 --> 00:20:10.640
on the current rankings year over year.


00:20:10.640 --> 00:20:13.680
So for example, come down here,


00:20:13.680 --> 00:20:16.880
you can see it's actually up 3.56%.


00:20:16.880 --> 00:20:19.040
I think that's year over, yeah, that's year over year.


00:20:19.040 --> 00:20:20.000
- Nice.


00:20:20.000 --> 00:20:21.660
- Which is pretty awesome.


00:20:21.660 --> 00:20:23.440
Also, even though C-- - But C and Java


00:20:23.440 --> 00:20:24.800
have gained also.


00:20:24.800 --> 00:20:27.280
So other, I guess we're whittling down,


00:20:27.280 --> 00:20:28.400
taking away from some languages.


00:20:28.400 --> 00:20:31.200
I think it's taking from the lower languages down here, right?


00:20:31.200 --> 00:20:33.140
Like objective C or here we go.


00:20:33.140 --> 00:20:36.260
What a surprise you that Pearl and Fortran have lost.


00:20:36.260 --> 00:20:40.180
Um, by the way, also that it has the ratings.


00:20:40.180 --> 00:20:44.420
I don't know if that's quite what you would consider market share, but Python is at 15%.


00:20:44.420 --> 00:20:46.080
You know, C is at 14%.


00:20:46.080 --> 00:20:50.360
Um, things that, sometimes get compared like R is less than 1%.


00:20:50.360 --> 00:20:52.360
Ruby is less than 1%.


00:20:52.360 --> 00:20:55.360
Those are a pretty interesting, persons.


00:20:55.360 --> 00:20:55.800
Yeah.


00:20:55.800 --> 00:20:58.560
They're also not really general purpose languages.


00:20:58.560 --> 00:21:00.760
I mean, R isn't at least.


00:21:00.760 --> 00:21:02.160
Yeah, that's for sure.


00:21:02.160 --> 00:21:06.120
Let's see. Yeah, the TOB commentary accompanying the index was,


00:21:06.120 --> 00:21:08.240
Python seems to be unstoppable.


00:21:08.240 --> 00:21:11.480
It's hard to find a field of programming in which Python is not used


00:21:11.480 --> 00:21:16.080
extensively nowadays except for safety critical embedded systems.


00:21:16.080 --> 00:21:18.040
That's pretty cool.


00:21:18.040 --> 00:21:20.400
Let's see, Rust is now number 22,


00:21:20.400 --> 00:21:21.760
closing in on the top 20,


00:21:21.760 --> 00:21:24.080
and Carbon, have you been tracking Carbon?


00:21:24.080 --> 00:21:24.680
No.


00:21:24.680 --> 00:21:28.280
This is, I believe it's Google who is behind Carbon.


00:21:28.280 --> 00:21:28.760
Yeah.


00:21:28.760 --> 00:21:34.360
It's a language that's intended to be, to supplant C++, but be very C++-like.


00:21:34.360 --> 00:21:39.000
An experimental successor to C++ strives for the C++ performance and compatibility


00:21:39.000 --> 00:21:43.160
while avoiding its technical debt and extreme difficulty to improve.


00:21:43.160 --> 00:21:46.920
(laughter)


00:21:46.920 --> 00:21:47.240
Ouch.


00:21:47.240 --> 00:21:48.760
Yeah.


00:21:48.760 --> 00:21:49.000
Yeah.


00:21:49.000 --> 00:21:53.240
Not saying extreme difficulty to use, but like, it's just, it's where it is.


00:21:53.240 --> 00:21:54.040
You know what I mean?


00:21:54.040 --> 00:21:54.600
>> Yeah.


00:21:54.600 --> 00:21:59.240
>> Yeah. It's like a language on top of a language on top of 50 years.


00:21:59.240 --> 00:22:04.640
Anyway, so Carbon has entered the index at a number,


00:22:04.640 --> 00:22:06.080
a position 192.


00:22:06.080 --> 00:22:07.120
They've got some work to do.


00:22:07.120 --> 00:22:07.480
>> Yeah.


00:22:07.480 --> 00:22:08.440
>> But it's still interesting.


00:22:08.440 --> 00:22:09.320
>> Something to watch.


00:22:09.320 --> 00:22:12.480
>> Yeah. You look at the other programming index,


00:22:12.480 --> 00:22:14.200
again, no idea how to say it,


00:22:14.200 --> 00:22:19.280
BYPL, the popularity of programming language is what the acronym stands for.


00:22:19.280 --> 00:22:23.520
It's an index created by analyzing how often


00:22:23.520 --> 00:22:26.880
tutorials are language tutorials are searched on Google.


00:22:26.880 --> 00:22:28.480
So that's one metric.


00:22:28.480 --> 00:22:32.880
Python is like massively ahead of second place Java,


00:22:32.880 --> 00:22:35.440
third place JavaScript, and then it drops quick,


00:22:35.440 --> 00:22:36.880
quick, quick down from there.


00:22:36.880 --> 00:22:38.080
Like for example, Ruby,


00:22:38.080 --> 00:22:40.360
1% people are interested in tutorials,


00:22:40.360 --> 00:22:43.080
how to do it versus almost 30% for Python.


00:22:43.080 --> 00:22:45.880
Yeah. Anyway, that's just another,


00:22:45.880 --> 00:22:49.200
another factor that was part of this InfoWorld article.


00:22:49.200 --> 00:22:52.240
So I'm one of the live streams not too long ago,


00:22:52.240 --> 00:22:56.320
somebody said, "Oh, I heard that there's not a whole lot of jobs or interest in Python.


00:22:56.320 --> 00:22:57.520
Maybe what else should I learn?"


00:22:57.520 --> 00:23:03.480
But you know what? I'm not so sure you're getting great advice if that's where you're thinking.


00:23:03.480 --> 00:23:04.040
>> Okay.


00:23:04.040 --> 00:23:06.080
>> Popular is not everything,


00:23:06.080 --> 00:23:07.600
but it's an important part of like,


00:23:07.600 --> 00:23:08.520
can I have a job?


00:23:08.520 --> 00:23:09.880
Can I find developers doing this?


00:23:09.880 --> 00:23:13.520
Will there be a library for my thing X I want to talk to with it and so on?


00:23:13.520 --> 00:23:16.180
>> I love Python obviously.


00:23:16.180 --> 00:23:19.080
But it's hard to answer those.


00:23:19.080 --> 00:23:21.400
For a job, which languages should I,


00:23:21.400 --> 00:23:23.600
whether languages should I learn?


00:23:23.600 --> 00:23:25.720
I don't want to answer that.


00:23:25.720 --> 00:23:27.600
It depends on what you're trying to get into.


00:23:27.600 --> 00:23:31.240
But just as a roundabout developer,


00:23:31.240 --> 00:23:33.720
I think it is important to learn more than one language.


00:23:33.720 --> 00:23:37.960
I wouldn't want somebody to just stop with Python and say, "Oh, I'm good."


00:23:37.960 --> 00:23:40.160
>> No. Yeah. Well, and you also,


00:23:40.160 --> 00:23:41.440
if you want to build mobile apps,


00:23:41.440 --> 00:23:42.680
you might want to look elsewhere.


00:23:42.680 --> 00:23:47.400
Well, except I might have something in an extra section for you on that.


00:23:47.400 --> 00:23:48.360
>> Okay. Cool.


00:23:48.360 --> 00:23:49.960
>> But did I switch the order?


00:23:49.960 --> 00:23:51.160
Did I jump in front of you?


00:23:51.160 --> 00:23:52.160
I think I may have.


00:23:52.160 --> 00:23:53.160
I don't think so.


00:23:53.160 --> 00:23:54.160
You got one more thing to go.


00:23:54.160 --> 00:23:55.160
No.


00:23:55.160 --> 00:23:56.160
Tell us about some magic.


00:23:56.160 --> 00:23:58.160
Oh, no, this is part one of my extras.


00:23:58.160 --> 00:23:59.160
So, oh, this is when your extras.


00:23:59.160 --> 00:24:00.160
Okay, well, let's that's it then.


00:24:00.160 --> 00:24:01.160
Jump into your extras.


00:24:01.160 --> 00:24:02.160
All right.


00:24:02.160 --> 00:24:03.160
I didn't want to cover this.


00:24:03.160 --> 00:24:08.160
Really quick, really quick comment just from I think this is kind of amusing from S.E.


00:24:08.160 --> 00:24:09.160
Steve in the audience.


00:24:09.160 --> 00:24:12.160
Extreme difficulty to use is just a side benefit of C++.


00:24:12.160 --> 00:24:14.160
Yeah, I mean, yeah.


00:24:14.160 --> 00:24:15.160
Yeah.


00:24:15.160 --> 00:24:19.160
Think about all the jobs people get to keep without much effort over time.


00:24:19.160 --> 00:24:22.120
- Over time, like you still use C++.


00:24:22.120 --> 00:24:23.720
- If there was a lot of competition


00:24:23.720 --> 00:24:28.720
for C++ developers, I don't know what I would do.


00:24:28.720 --> 00:24:31.360
I'm enjoying the lack of competition.


00:24:31.360 --> 00:24:32.200
Yeah.


00:24:32.200 --> 00:24:33.040
(laughing)


00:24:33.040 --> 00:24:33.960
- Exactly.


00:24:33.960 --> 00:24:34.960
- I just ran across this,


00:24:34.960 --> 00:24:38.240
the magic of my Matplotlib style sheets article,


00:24:38.240 --> 00:24:40.080
and I just wanted to bring it up for people


00:24:40.080 --> 00:24:43.000
that might wanna to try it out.


00:24:43.000 --> 00:24:48.000
So I've used Matplotlib style sheets before,


00:24:48.200 --> 00:24:49.160
and they're just great.


00:24:49.160 --> 00:24:50.680
So you could just say like,


00:24:50.680 --> 00:24:53.000
so let's say you've got a current plot


00:24:53.000 --> 00:24:56.000
and by default, it's just, it's not bad.


00:24:56.000 --> 00:24:58.060
It's just, it is what it is.


00:24:58.060 --> 00:25:01.400
And then if you just drop in one line of code,


00:25:01.400 --> 00:25:03.880
use styles, plot style use,


00:25:03.880 --> 00:25:05.560
and then you drop a style sheet name,


00:25:05.560 --> 00:25:07.520
there's a whole bunch of built-in ones you can use.


00:25:07.520 --> 00:25:08.840
It just looks nicer.


00:25:08.840 --> 00:25:09.680
It's got like--


00:25:09.680 --> 00:25:10.500
- I love it.


00:25:10.500 --> 00:25:12.400
It's so unsettled, but it looks so much better.


00:25:12.400 --> 00:25:13.440
- Yeah.


00:25:13.440 --> 00:25:16.840
But I didn't know that it's pretty easy to write your own.


00:25:16.840 --> 00:25:19.400
I didn't, I mean, I figured maybe style sheets


00:25:19.400 --> 00:25:20.240
were complicated.


00:25:20.240 --> 00:25:22.240
So the rest of this article just talks about


00:25:22.240 --> 00:25:25.820
really how to write your own style sheet.


00:25:25.820 --> 00:25:30.080
So if anybody's interested in customizing the style sheet


00:25:30.080 --> 00:25:32.560
for their group or something,


00:25:32.560 --> 00:25:34.480
might be a good thing to just have,


00:25:34.480 --> 00:25:37.060
you know, be able to roll your own style sheet.


00:25:37.060 --> 00:25:38.720
So here you go. - Yeah, fantastic.


00:25:38.720 --> 00:25:42.800
- One of the things that the 10 year old in me enjoyed


00:25:42.800 --> 00:25:46.640
that the, if you want the lines to end in a square


00:25:46.640 --> 00:25:48.660
instead of a rounded line,


00:25:48.660 --> 00:25:52.980
you give it a solid cap style of butt.


00:25:52.980 --> 00:25:57.420
It makes it chop off the end, so that's funny.


00:25:57.420 --> 00:25:59.900
>> That is funny.


00:25:59.900 --> 00:26:03.380
This is not one of my extras,


00:26:03.380 --> 00:26:06.300
but I might as well add it as a follow on here is,


00:26:06.300 --> 00:26:10.980
XKCD plots have landed in Matplotlib.


00:26:10.980 --> 00:26:13.840
I'm sure this is probably accomplished the same way,


00:26:13.840 --> 00:26:15.580
but look at that.


00:26:15.580 --> 00:26:17.260
Aren't these fantastic?


00:26:17.260 --> 00:26:19.900
>> I use these at work because they're just,


00:26:19.900 --> 00:26:27.780
especially I like it if I've just made up the data or my sample size is small.


00:26:27.780 --> 00:26:31.700
I don't want anybody to take it as a research project.


00:26:31.700 --> 00:26:35.820
It's just I'm showing something informally.


00:26:35.820 --> 00:26:41.380
>> Right. Sometimes there's a whole ton of value to present it not quite polished.


00:26:41.380 --> 00:26:41.820
>> Yeah.


00:26:41.820 --> 00:26:43.700
>> There's an app I use called,


00:26:43.700 --> 00:26:45.700
Let's see, why does it not want to make a new,


00:26:45.700 --> 00:26:48.420
Balsamiq, it doesn't let me type in,


00:26:48.420 --> 00:26:53.260
oh well, it's called Balsamiq and it'll generate wireframes of


00:26:53.260 --> 00:26:57.500
like web browsers and buttons or to do mobile apps or whatever,


00:26:57.500 --> 00:26:59.500
and it intentionally has this shape,


00:26:59.500 --> 00:27:01.700
like it looks very XKCD like.


00:27:01.700 --> 00:27:03.540
Like, okay, this is not the answer,


00:27:03.540 --> 00:27:05.140
this is not the final thing, it's just to give you


00:27:05.140 --> 00:27:07.340
an idea of like here's the layout and so on.


00:27:07.340 --> 00:27:11.060
>> Yeah. I think it's Balsamiq with a Q, if people are looking for it.


00:27:11.060 --> 00:27:12.300
>> Yes, it's funky, small,


00:27:12.300 --> 00:27:13.800
That's spelled funky.


00:27:13.800 --> 00:27:17.060
I think what happened is my keyboard's battery died.


00:27:17.060 --> 00:27:18.820
So anyway, that's why I can't type anymore.


00:27:18.820 --> 00:27:21.460
I'm not on a laptop, so when the battery dies, that's it.


00:27:21.460 --> 00:27:25.340
But that's fine, because I already got all the stuff I want to talk about anyway.


00:27:25.340 --> 00:27:28.620
We talked about I wouldn't try to learn Python to write mobile apps.


00:27:28.620 --> 00:27:30.060
And I still stand by that.


00:27:30.060 --> 00:27:33.860
But we discussed way back on episode--


00:27:33.860 --> 00:27:34.580
which one was it?


00:27:34.580 --> 00:27:37.980
On 295 a couple weeks ago, we talked about Flit.


00:27:37.980 --> 00:27:41.020
And Flit lets you write Flutter apps in Python.


00:27:41.020 --> 00:27:42.860
It is super neat.


00:27:42.860 --> 00:27:43.700
- Yeah.


00:27:43.700 --> 00:27:46.820
- Where, just look at an example or whatever,


00:27:46.820 --> 00:27:49.500
pull up the tutorial, but like the code that you write,


00:27:49.500 --> 00:27:51.920
I mean, if you've ever done Flutter,


00:27:51.920 --> 00:27:53.420
it feels very much like that.


00:27:53.420 --> 00:27:56.380
What you write is Python and it's glorious.


00:27:56.380 --> 00:27:59.160
Anyway, the extra that I wanna talk about is,


00:27:59.160 --> 00:28:04.460
I had Theodore Fitzner, who is the creator of Flet


00:28:04.460 --> 00:28:06.260
on Talk Python last week,


00:28:06.260 --> 00:28:08.580
and if people wanna hear what he had to say about it


00:28:08.580 --> 00:28:10.500
in our conversation, they should check that out.


00:28:10.500 --> 00:28:11.540
- Nice. - Yeah.


00:28:11.540 --> 00:28:14.660
All right, that's it for my extras, I believe.


00:28:14.660 --> 00:28:15.900
You ready for a joke?


00:28:15.900 --> 00:28:18.980
- I am, but I just, I wanna like pause and just say,


00:28:18.980 --> 00:28:20.260
I think that's one of the cool things


00:28:20.260 --> 00:28:24.060
about how we've done Python Bytes


00:28:24.060 --> 00:28:26.540
and Talk Python and Test and Code


00:28:26.540 --> 00:28:29.860
of if we do these small segments within Python Bytes,


00:28:29.860 --> 00:28:33.980
but if we wanna just also do like a deep dive,


00:28:33.980 --> 00:28:35.820
we've got the other podcasts to do a deep dive


00:28:35.820 --> 00:28:37.860
into something, it's good.


00:28:37.860 --> 00:28:38.820
- Absolutely.


00:28:38.820 --> 00:28:40.920
It's super nice and kind of on purpose, right?


00:28:40.920 --> 00:28:43.040
We kind of decided this one so we could just quick talk


00:28:43.040 --> 00:28:44.860
a bunch of fun stuff and then the other one,


00:28:44.860 --> 00:28:46.720
if you really want to spend an hour on something,


00:28:46.720 --> 00:28:48.180
that's what it's for.


00:28:48.180 --> 00:28:50.680
So hopefully people listen to both, or all three rather.


00:28:50.680 --> 00:28:51.520
- All three?


00:28:51.520 --> 00:28:52.340
(laughs)


00:28:52.340 --> 00:28:53.180
Yeah, exactly.


00:28:53.180 --> 00:28:54.020
- Yeah, yeah, yeah.


00:28:54.020 --> 00:28:54.840
- Yeah, all right.


00:28:54.840 --> 00:28:55.680
Now something funny.


00:28:55.680 --> 00:28:57.940
- Now, you know we talked about the cloud stuff


00:28:57.940 --> 00:29:00.400
and you specifically ask about price.


00:29:00.400 --> 00:29:01.560
So here's the joke.


00:29:01.560 --> 00:29:04.100
This one has two pictures.


00:29:04.100 --> 00:29:06.600
One, somebody who is new to AWS


00:29:06.600 --> 00:29:10.040
and somebody who is experienced at AWS.


00:29:10.040 --> 00:29:13.360
The new person, it shows this cartoon character walking,


00:29:13.360 --> 00:29:16.420
one step, steps on a rake, the rake whacks up


00:29:16.420 --> 00:29:17.640
and smashes him in the face.


00:29:17.640 --> 00:29:22.640
It's new to AWS, accidental $50,252 monthly bill.


00:29:22.640 --> 00:29:24.820
The experienced one with the rake is like,


00:29:24.820 --> 00:29:26.800
you know how sometimes skateboarders will jump up


00:29:26.800 --> 00:29:29.800
and they'll grind down a stair railing


00:29:29.800 --> 00:29:31.240
and they'll do something amazing?


00:29:31.240 --> 00:29:33.060
- Oh, it's a kickflip they're showing, yeah.


00:29:33.060 --> 00:29:35.740
- Yeah, sorry, off the stairs, a kickflip off the stairs.


00:29:35.740 --> 00:29:37.840
And like that often goes good, but not always.


00:29:37.840 --> 00:29:39.880
So here they're doing like an amazing kick flip


00:29:39.880 --> 00:29:40.720
with the rake.


00:29:40.720 --> 00:29:41.540
- Off a rake.


00:29:41.540 --> 00:29:44.140
- And they land at the bottom,


00:29:44.140 --> 00:29:45.180
smacks him in the face,


00:29:45.180 --> 00:29:49.840
says accidental $50,252 bill.


00:29:49.840 --> 00:29:50.680
- Yeah.


00:29:50.680 --> 00:29:53.100
- And then down here,


00:29:53.100 --> 00:29:55.180
there's a funny comment from somebody


00:29:55.180 --> 00:29:57.340
who how they forgot to turn off something.


00:29:57.340 --> 00:29:59.340
So they just, but luckily their card expired.


00:29:59.340 --> 00:30:02.860
So they just let their EC2 account expire.


00:30:02.860 --> 00:30:04.900
And you know, Amazon was talking about doing like


00:30:04.900 --> 00:30:05.980
healthcare stuff and whatnot.


00:30:05.980 --> 00:30:09.660
So this person here, Jess, Jess the Unstill,


00:30:09.660 --> 00:30:11.900
she says, "Just wait, soon enough,


00:30:11.900 --> 00:30:14.100
"if you don't pay your EC2 AWS bill,


00:30:14.100 --> 00:30:16.100
"they won't even let you visit your doctor."


00:30:16.100 --> 00:30:18.580
(laughing)


00:30:18.580 --> 00:30:19.940
Sometimes things are funny.


00:30:19.940 --> 00:30:23.740
- Interesting idea though to attach your AWS account


00:30:23.740 --> 00:30:25.620
to a credit card with a low balance.


00:30:25.620 --> 00:30:27.620
So that's one way to--


00:30:27.620 --> 00:30:30.660
- Interesting, yes, exactly, it might be a benefit.


00:30:30.660 --> 00:30:32.000
- Yeah.


00:30:32.000 --> 00:30:33.900
- It just might be a benefit actually.


00:30:33.900 --> 00:30:37.100
>> Yeah, quite cool. Anyway, I thought this was funny.


00:30:37.100 --> 00:30:41.320
But you also have heard of real stories of startups shutting down


00:30:41.320 --> 00:30:43.940
because they accidentally did get a $60,000 bill,


00:30:43.940 --> 00:30:45.000
they're like, "We can't pay this."


00:30:45.000 --> 00:30:46.800
>> Well, also just, yeah,


00:30:46.800 --> 00:30:51.760
or somebody just misconfigured it and suddenly they're making


00:30:51.760 --> 00:30:54.360
the transfers are three times


00:30:54.360 --> 00:30:56.300
larger than they're supposed to be or something like that.


00:30:56.300 --> 00:30:57.720
>> Yeah, absolutely.


00:30:57.720 --> 00:30:59.500
Every time I run this command,


00:30:59.500 --> 00:31:02.540
it spins up a cool VM to do the test in the Cloud.


00:31:02.540 --> 00:31:03.680
I forgot to shut it down.


00:31:03.680 --> 00:31:04.520
Oops.


00:31:04.520 --> 00:31:06.020
Now I have a hundred VMs, right?


00:31:06.020 --> 00:31:07.640
(laughing)


00:31:07.640 --> 00:31:08.480
- Yeah.


00:31:08.480 --> 00:31:10.200
- Yeah, so concrete advice.


00:31:10.200 --> 00:31:13.240
You can set up billing alerts at different tiers.


00:31:13.240 --> 00:31:16.000
Like once it crosses a hundred dollars, send me a message.


00:31:16.000 --> 00:31:18.440
Once it crosses $200, send me a message.


00:31:18.440 --> 00:31:20.480
Those numbers will differ for people,


00:31:20.480 --> 00:31:22.600
but I would strongly recommend that you set that up


00:31:22.600 --> 00:31:23.440
at your cloud provider.


00:31:23.440 --> 00:31:26.040
Like if it goes beyond a reasonable amount


00:31:26.040 --> 00:31:29.480
of what I normally would like to pay or expect to pay,


00:31:29.480 --> 00:31:31.400
let me know soon.


00:31:31.400 --> 00:31:33.200
- Yeah, not like tomorrow.


00:31:33.200 --> 00:31:35.320
- Let me know right away. (laughs)


00:31:35.320 --> 00:31:36.600
- Exactly.


00:31:36.600 --> 00:31:38.580
In fact, can you make my smoke alarm go off


00:31:38.580 --> 00:31:40.880
because I really need to get up and get going.


00:31:40.880 --> 00:31:41.720
(laughs)


00:31:41.720 --> 00:31:42.560
- Yeah.


00:31:42.560 --> 00:31:44.480
So, anyway.


00:31:44.480 --> 00:31:46.840
- All right, well, fantastic to be here with you, Brian.


00:31:46.840 --> 00:31:47.960
- Good to be with you too.


00:31:47.960 --> 00:31:48.800
Talk to you next week.


00:31:48.800 --> 00:31:49.840
- Yep, yep, see you later.


00:31:49.840 --> 00:31:51.080
Thanks everyone for listening.


00:31:51.080 --> 00:31:53.360
Oh, really quick, one piece of follow up out here


00:31:53.360 --> 00:31:54.760
from Kim in the audience.


00:31:54.760 --> 00:31:57.000
If a huge AWS bill accidentally happens,


00:31:57.000 --> 00:32:00.560
I'd rather I can speak to the AWS directly


00:32:00.560 --> 00:32:02.820
before giving in in despair, yeah, indeed.


00:32:02.820 --> 00:32:08.180
>> Yeah, I've heard of success stories where people just talk and they work with them.


00:32:08.180 --> 00:32:09.900
>> It's worth a try.


00:32:09.900 --> 00:32:11.060
>> On the drawing topic,


00:32:11.060 --> 00:32:14.680
Will recommends that, where did it go?


00:32:14.680 --> 00:32:17.060
Excelidraw has a similar look,


00:32:17.060 --> 00:32:18.340
so I'll have to check that out too.


00:32:18.340 --> 00:32:20.340
>> Yeah, I haven't heard of that one. That's cool. All right.


00:32:20.340 --> 00:32:21.300
>> All right. Talk to you later.


00:32:21.300 --> 00:32:23.300
>> See you all later. Bye.

