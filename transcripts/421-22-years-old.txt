00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 421, recorded February 24th.

00:00:10 And I'm Brian Okken.

00:00:11 I'm Michael Kennedy.

00:00:12 And this fabulous episode is sponsored by all of you folks that support us at,

00:00:18 like maybe taking a course over at Talk Python Training or heading to pythontest.com,

00:00:24 learn about pytest, maybe taking a course.

00:00:26 We also love our Patreon supporters, so thank you.

00:00:28 If you'd like to connect with us, of course, you can check.

00:00:31 There's six links in the show notes for the show and me and Michael over at Blue Sky or Fostadon or Mastodon.

00:00:40 So keep in track of both of those.

00:00:42 And if you'd ever like to jump into the show live, you can head to pythonbytes.fm/live

00:00:48 and check out when the next recording will be and you can be with us and ask questions and stuff.

00:00:56 And it's fun.

00:00:57 And finally, the newsletter is still going out.

00:01:00 And Michael's made some improvements to it.

00:01:02 So we're making some neat things.

00:01:06 And I think it's a really cool resource now.

00:01:09 If you're, especially if sometimes you listen to the show and you're like,

00:01:13 that seems like a cool topic, but I don't quite know much about that thing that they're talking about.

00:01:19 We're including some background information.

00:01:21 So if you'd like to learn more about the topic, we're including a lot of links and that's really cool.

00:01:26 Yeah.

00:01:26 Super fun.

00:01:26 Yeah.

00:01:27 Speaking of super fun, what's your first topic for us, Michael?

00:01:31 You know what is super fun?

00:01:32 Debugging is super fun.

00:01:34 Because testing is sometimes fun, but debugging, that's where the mysteries really live.

00:01:38 You never know.

00:01:39 And if you don't do much testing, you might do more debugging.

00:01:42 You never know.

00:01:42 Anyway, I want to talk about debugging HTTP calls.

00:01:45 Now, one way in which you might do this is you might say, I have this well-factored piece of code over here.

00:01:52 And I can call this function and we can, in isolation, test how it talks to some part, something else in the world.

00:01:59 Right.

00:02:00 And maybe we'll mock the HTTP later out.

00:02:03 We talked about REST, RSPX, which was a cool way to mock out HTTPX.

00:02:09 And, you know, there's VCR and other things like that, which you might do.

00:02:12 But this kind of allows you to intercept what's actually happening.

00:02:18 You could use it during tests or you could use it just when your app is running.

00:02:21 All the HTTP calls coming out of your Python app and then gives you a UI for understanding them.

00:02:27 Pretty darn cool, I think.

00:02:28 Yeah.

00:02:28 Okay.

00:02:29 So what you do is the thing is called HTTP DBG for debug because those two vowels are hard work, folks.

00:02:37 And so HTTP debug tool is for Python developers to easily debug HTTP or HTTPS client requests in a Python program.

00:02:46 All you got to do to use it is instead of saying Python, my app, you say, hi, HTTP debug, my app.

00:02:54 And it will sort of wrap and mock out all of the stuff.

00:02:58 Mock is maybe not quite the right word because it still does the action.

00:03:01 sort of put an adapter or an intercepting layer on top of all your behaviors, right?

00:03:07 Okay.

00:03:07 So you get, yeah, it's pretty cool.

00:03:09 So you get this UI and it shows you all the requests that your app has made.

00:03:14 And then you can click on them.

00:03:15 You can put them side by side and compare them.

00:03:17 All those kinds of stuff.

00:03:19 Which for the grand total effort of pip install and then run your code slightly differently.

00:03:25 But it's, you know, that's a lot of benefit and a lot of visibility into your app.

00:03:30 So if you're doing things like maybe using Postman or something like that to kind of test out the calls and you try to replicate it over there and you're like, why is it not

00:03:30 quite the same?

00:03:38 Well, you put this thing on it and see what happens.

00:03:40 Yeah, I can also see this like as a learning tool while you're just learning how all of this stuff gets put together.

00:03:46 Like, how does the request get, what does the data look like and what's going on here?

00:03:52 Yeah.

00:03:52 It's pretty neat.

00:03:53 Absolutely.

00:03:53 Yeah, yeah, absolutely.

00:03:55 And the other thing you can do is it's not just your direct HTTP calls, like say HTTPX or requests or something.

00:04:03 If something else, a library you're using is then calling the API and it's not your library, you still get visibility into what that thing's doing.

00:04:12 Because it's anything the application does, not anything that your code does, which is pretty cool.

00:04:16 So if you're using, say, the Sentry API and you're like, why is it failing to talk to this thing?

00:04:21 Like, what is it even doing?

00:04:22 You know, you just say capture exception.

00:04:24 But, you know, somewhere along the way, HTTP request is being done.

00:04:27 So you could intercept that as well, like all the traffic.

00:04:30 And I guess if you're like, is my thing spying on me?

00:04:33 Is this library that I'm using reaching out to something that I'm not aware of that's happening?

00:04:37 You could also catch that theoretically.

00:04:39 But it supports requests, URL, HTTPX, my fave these days, AIO HTTP, PIP, pytest, UnitTest, and your package.

00:04:50 Yes, if you include it.

00:04:51 Anyway, there's, then when you run it, you get a web interface that gives you some behaviors in the UI.

00:04:56 You can change the strategy to group requests.

00:04:59 You can hide the scheme, the network URL.

00:05:01 You can group rows, tags, all these different things.

00:05:03 So there you have it, folks.

00:05:04 HTTP.

00:05:05 I think you're supposed to just say the initials like HTTP.

00:05:12 This is hard.

00:05:14 HTTP.

00:05:15 DBG.

00:05:16 Yeah, that's.

00:05:17 Yeah, possibly.

00:05:18 Anyway.

00:05:18 Okay.

00:05:21 Something a little easier to pronounce.

00:05:23 PyPI now supports iOS and Android wheels for mobile Python development.

00:05:28 This is cool, I think.

00:05:30 This is very cool.

00:05:31 Yeah.

00:05:31 This is very cool.

00:05:32 So this is brought to us by Sarah Gooding.

00:05:35 And so the announcement really is there's been some work.

00:05:39 Russell Keith McGee has been a longtime advocate to try to push this ball forward and get Python directly on devices better.

00:05:50 So there's a couple of PEPs, 730 and 738, to talk about adding iOS and Android as a supported platform.

00:05:58 So now they are their wheels supported there.

00:06:02 So how do we take advantage of this?

00:06:05 Well, there are some information in the article that we're linking to.

00:06:11 But also, let's see.

00:06:13 There is, there's some tools that I've heard of Beware and we've covered Beware and Kivi before.

00:06:19 And then Chakopi, Chakopi, maybe?

00:06:22 I don't think, I don't know if we've covered that.

00:06:25 But that's another one for Android.

00:06:27 Yeah, that sounds new to me as well.

00:06:28 I haven't, I don't remember that one.

00:06:29 So, however, so you're going to either use these.

00:06:33 But I was curious about like, so for pure Python stuff, if I want to be able, like, if I'm not doing anything too fancy,

00:06:39 and I want to be able to have it be installable on one of these, what would I could possibly do?

00:06:45 And CI Build Wheel is one of the tools that people have used before for other operating systems.

00:06:53 And apparently that's not ready yet, but that is in the works.

00:06:57 So CI Build Wheel updates are in progress to simplify iOS and Android wheel creation.

00:07:03 So soon, more and more third-party little libraries might be in, possibly big libraries might be available for.

00:07:13 Yeah, that's awesome.

00:07:14 I'm very excited for this.

00:07:15 I think this is, you know, there's two areas of Python that are very troublesome, right?

00:07:22 If someone comes to you and says, hey, I want to do some programming.

00:07:25 What language should I use?

00:07:26 Python, that's a great one.

00:07:27 Yeah.

00:07:27 So I'm looking to build a mobile app like this.

00:07:29 Hold on, hold on, hold on.

00:07:30 I totally retract my statement.

00:07:31 You can't even, don't do that.

00:07:33 It's the one.

00:07:33 And then the other is like Vue, React, other front-end JavaScript-y things, right?

00:07:38 And what's cool is that the folks at Anaconda are actually really working hard to address both of those.

00:07:45 And part of what we're seeing here is some of the work from them.

00:07:48 I actually had, bumping over this way, I had Russell Keith McGee on, the guy behind Beware,

00:07:55 to talk about the state of Python on mobile just, YouTube helped me out, five days ago.

00:08:02 Wow.

00:08:02 To talk about this.

00:08:03 And he's been working, employed by Anaconda, as part of their open source team for a couple

00:08:08 years, solving these problems.

00:08:10 Getting him and a guy named Malcolm are getting peps to have Python officially be, to have iOS

00:08:18 and Android an official build target of CPython, which is pretty interesting, right?

00:08:22 Yeah.

00:08:23 We expect, as part of the core developer process, we should be able to build it so that it runs

00:08:28 on those platforms.

00:08:30 And those peps, I believe, are accepted, but not necessarily in yet.

00:08:33 So that's upstream in a lot of the work that Russell has done.

00:08:37 And they're using CI Build Will to make this happen.

00:08:40 So a lot of interesting stuff happening there.

00:08:42 Yeah.

00:08:43 Yeah.

00:08:43 Cool.

00:08:44 Yeah.

00:08:44 I wasn't planning to talk about that episode, but since you brought it up, it sounds like

00:08:48 if you guys are like, wait, what, what is all this about?

00:08:50 You know, listen, I don't know that much, but Russell gives us the whole rundown last week.

00:08:55 So you can check that out.

00:08:55 Can't wait to listen.

00:08:57 Yeah, definitely.

00:08:58 Should be out soon.

00:08:58 Okay.

00:08:59 No joke.

00:09:00 How about a game, though?

00:09:01 Yeah.

00:09:02 I like games.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:03 I'm ready for the joke.

00:09:04 But the game.

00:09:04 So we got a notification from, I can't remember.

00:09:10 Oh, yes.

00:09:10 Mayak Simering, who's working on Arcade, the game platform, and it hasn't had any major updates

00:09:19 for a while until now.

00:09:21 They just released 3.0 of Arcade.

00:09:23 So if you are a huge fan of Mario Brothers type of 2D scrolling games, or you want to build

00:09:30 something like Asteroid, you know, the game from the 70s, that kind of UI, well, this

00:09:35 is a really great platform for it.

00:09:37 So what are the changes?

00:09:38 Breaking changes.

00:09:40 But, you know, I guess that's expected after a while.

00:09:42 Drop Python 3.8.

00:09:43 Seems fine after, you know, the world has moved on from there.

00:09:47 But texture management completely changed.

00:09:50 And they used to cache everything.

00:09:52 Apparently it was too much.

00:09:53 But now you can reload and probably things are fast enough that you don't need caching.

00:09:57 It works better.

00:09:58 Like, keep working memory.

00:10:00 In the graphics card or something better.

00:10:01 Remove some stuff.

00:10:03 Fixed Arcade context and so on.

00:10:05 But, you know, mostly, I want to put this out there as if you've been thinking of building,

00:10:09 like a 2D game type of thing.

00:10:11 And you're like, well, Arcade's interesting, but it hasn't gotten a lot of love.

00:10:14 Well, now it has, right?

00:10:15 Last update yesterday.

00:10:17 Pretty cool.

00:10:17 You know, actually.

00:10:18 If you want an example, there's some examples.

00:10:20 Sorry, Brian.

00:10:20 There's some examples you can link to off of the Arcade Academy website.

00:10:24 Go ahead.

00:10:25 No, I just, you said it hasn't had a lot of love in a long time, but it's still been,

00:10:29 I mean, I don't know if they needed to fix some things to get it to work on modern Python.

00:10:33 Okay.

00:10:34 Yeah, I'm not sure if they, I don't know that they necessarily did, but it just hasn't had

00:10:37 any major releases, you know?

00:10:39 Well, I'm noticing, so I've been doing that top pytest plugin thing and investigating a

00:10:44 lot of the plugins.

00:10:45 And there's a lot of stuff, I'm noticing there's a lot of stuff that used to be updated a lot.

00:10:50 And for, just to say, like in the trove classifiers to say, I support, you know, 3.8, 3.9, 3.10.

00:10:57 And then they just sort of stop.

00:10:59 But a lot of, I guess, try stuff out because Python has been pretty stable for a lot of

00:11:07 things.

00:11:07 And it's been, even though we've gotten some really cool things, it's still very backwards

00:11:11 compatible.

00:11:12 So there's a lot of old packages that don't say that they work on modern Python, like 3.13

00:11:19 or something, but still do.

00:11:21 So don't dismiss a package just because it hasn't been updated for a while.

00:11:25 Try it out.

00:11:26 It might be fine.

00:11:27 So that's good advice.

00:11:28 There's one thing where I can't remember if it, was it Rust or some other platform, their

00:11:34 equivalent of PyPI was they were automatically putting security warnings or something like

00:11:40 that onto packages that had not had a Git commit in two years.

00:11:44 But, you know, it might be done.

00:11:46 There's a thing that could just completely do what it's supposed to do and not need to

00:11:50 change anyway.

00:11:51 Yeah.

00:11:51 Yeah.

00:11:52 So you can check out the different kinds of games.

00:11:53 I got some, a bunch of example games that you can play.

00:11:56 And try on.

00:11:58 They look, they look pretty cool.

00:11:59 Like if you're looking for a, I don't want to use Unreal Engine and go completely down the

00:12:03 higher team of a hundred people to build a game.

00:12:05 Yeah.

00:12:05 That's the fun.

00:12:06 That looks pretty cool.

00:12:07 It does look pretty cool.

00:12:08 Yeah.

00:12:08 Yeah.

00:12:08 And I think it's, I think it's OpenGL based.

00:12:11 Pretty sure.

00:12:11 Is that right?

00:12:12 Yeah.

00:12:13 Yeah.

00:12:13 It's built on top of Piglet and OpenGL.

00:12:15 Yeah.

00:12:16 So use your graphics card for all sorts of fun stuff.

00:12:18 Yeah.

00:12:19 Yeah.

00:12:20 I guess I'm, I'm on tangent mode right now.

00:12:23 I guess I was thinking about games and a lot of people think, I think a lot of kids get

00:12:27 into like want to get into programming because they think game programming would be fun and

00:12:32 game programming is hard.

00:12:34 And I mean, there's a lot of programming that's hard, but, but big game programming, there's

00:12:38 a lot of stuff going on.

00:12:40 And, and it doesn't necessarily, I just don't get frustrated if you start game programming

00:12:45 and it, it, it's a little difficult and that's, there's a lot of programming that's pretty, pretty

00:12:49 straightforward.

00:12:50 Yeah.

00:12:51 So yeah, I totally agree.

00:12:52 I, I did some of my first programming was 3d simulators in OpenGL and it was not the easiest

00:12:58 thing ever in C++.

00:12:59 Yeah.

00:13:00 Nice.

00:13:01 Okay.

00:13:04 Well, other things to not do, is don't, okay.

00:13:10 I'm, I think I'm going to have too many negatives here.

00:13:12 I just, I guess one to announce that PEP 765 has been accepted and PEP 765 is to disallow

00:13:21 return, break, and continue, that exit a finally block.

00:13:25 That's a lot of terms.

00:13:27 So what am I saying?

00:13:28 it's that there's the keywords return, break, and continue shouldn't show up.

00:13:34 In a finally block.

00:13:35 And, when I first saw this, I'm like, why would I do that anyway?

00:13:39 I, I just don't, I usually put pretty simple stuff in finalies and I wouldn't ever think

00:13:44 to do a, I might think to do a return or anyway, that the, the, the, it's just bad.

00:13:50 And the behavior apparently is surprising.

00:13:52 So, so they really would hope to not have that in there.

00:13:56 So apparently this was rejected once before, but now it's accepted slightly different.

00:14:01 There's a, the, I guess there's some, cost benefit analysis of the change that was

00:14:06 done and it will be better for everybody if we do this.

00:14:10 However, because of some backwards compatibility stuff, it will not be a syntax error.

00:14:17 It will be a syntax warning.

00:14:18 So I guess, we'll, we'll rely on, people running with dash W a or having rougher

00:14:27 like eight or pilot or something.

00:14:29 Check this stuff for us, but basically don't, don't do it.

00:14:32 Just don't.

00:14:33 So it's not good.

00:14:34 Not good.

00:14:35 Yeah.

00:14:35 I can sure.

00:14:36 I can sure.

00:14:36 I can sure see return in it.

00:14:37 Finally.

00:14:37 That makes a lot of sense to me.

00:14:39 I, it's a little, I'm not sure why return is pulled out, but like break and continue

00:14:44 and other looping.

00:14:45 And I can see why that's all right, but yeah.

00:14:47 Yeah.

00:14:47 Whatever.

00:14:48 I mean, it's not hard to work around.

00:14:49 Just that.

00:14:52 Yeah.

00:14:52 So this isn't a big topic.

00:14:53 Just, just to be aware if you're doing something fancy within your finally blocks,

00:14:58 pay attention to this.

00:14:59 Stop.

00:15:00 Stop.

00:15:00 Stop.

00:15:01 Stop.

00:15:01 Apparently.

00:15:01 Yeah.

00:15:01 All right.

00:15:02 Well, we're going to stop with our items, aren't we?

00:15:04 Yeah, we are.

00:15:04 We got some extras.

00:15:05 We sure do.

00:15:06 So exciting.

00:15:07 Let me fire some up.

00:15:09 So remember our teapot episode for 18.

00:15:12 I'm a teapot.

00:15:13 Well, we had our joke about the teapot and, I think the person who created the joke that

00:15:19 we covered felt that he didn't get enough love or something like that.

00:15:23 Cause we pulled up a post somebody had on Mastodon, Mastodon, Blue Sky, Blue Sky, I think that

00:15:29 said, Hey, funny joke.

00:15:30 Person shared it.

00:15:31 Well, Nikita says important correction.

00:15:34 we, I think it's, I, I created this joke.

00:15:36 So anyway, thank you, Nikita for, creating this joke.

00:15:40 It was very funny.

00:15:41 So I'll, I'll link to that to give him a little bit of credit.

00:15:44 Next up, Brian.

00:15:45 Oh, it's just like a slightly different name.

00:15:47 So Nikita reported it.

00:15:48 It was a joke by Nikki Tonsky, a different person.

00:15:52 Oh, different.

00:15:53 Okay.

00:15:54 All right.

00:15:54 Perfect.

00:15:55 Well, thanks for the correction.

00:15:56 So I have something really surprising.

00:15:58 So check this out.

00:15:59 I had a Mac mini M1, the very, very first.

00:16:03 Apple Silicon Mac that came out, the Mac mini.

00:16:06 I got it in 2020.

00:16:07 And I remember, I think we talked about this at the time in 2020.

00:16:11 I'd already ordered the new MacBook pro, which was still the Intel.

00:16:15 Then I saw the Apple Silicon stuff come out and I actually canceled it and like reordered

00:16:19 the mini.

00:16:19 And it was best decision ever.

00:16:21 Well, good decision and worked out great, but it's just been chilling around here.

00:16:26 I've had my Mac mini M2 pro that's all maxed out and it's been laying around at that.

00:16:31 You know, I'm not doing a lot with the other one, but I wanted to set it up so I could do

00:16:34 easier recording.

00:16:34 And I'm like, starting to get a little slow, but you know what?

00:16:37 I'll just, I'll just live with it.

00:16:39 I don't really need to buy a new mini.

00:16:40 Like I don't need to waste the money just for that.

00:16:42 And then for some reason I start, I saw the, that Apple started having refurbished ones that

00:16:47 you could buy.

00:16:47 And it turns out to not be a very good deal.

00:16:49 It's like, Hey, the refurbished one's like 579.

00:16:51 The new one's 599.

00:16:53 And I go, wait, I'll just take the new one.

00:16:55 I looked at what would my old 2020 Mac mini trade in for?

00:17:00 Well, first of all, how much is a new Mac mini with the M4 10 core, 10, pretty much the same

00:17:06 specs except for the hard drive.

00:17:07 Oh, and it's the brand new way, way faster computer.

00:17:10 599, 600 bucks us.

00:17:12 Wow.

00:17:12 My old mini from five years ago traded in for 425.

00:17:16 What?

00:17:17 So I got a brand new Mac mini M4 for $175.

00:17:23 I want to point out anyone else before any of this stuff changes, you might also want to get a new

00:17:28 mini for $175.

00:17:29 If you have a five-year-old one, how awesome is that?

00:17:32 Yeah.

00:17:32 I think mine's only a couple of years.

00:17:34 I should check it out, but it might be worth checking out.

00:17:37 And I ran it through geek bench here.

00:17:39 And even against my M2 pro, which is way faster than my old mini, it is this new one that was $175,

00:17:47 a lot faster than even the M2 pro single core is like 40% faster.

00:17:53 Even multi-core is something like 20% faster for that little bit of money.

00:17:59 So, hey, that's just putting it on the radar.

00:18:01 Y'all might want to check that out.

00:18:03 That's a pretty good trade, in my opinion.

00:18:05 Nice.

00:18:06 All right.

00:18:07 That's all for my extras.

00:18:08 But yeah, I just thought that that was a really surprising thing.

00:18:11 I'm like, you know, all right.

00:18:13 Okay.

00:18:14 I'll do the trade.

00:18:15 I'll trade the mini.

00:18:16 A couple extras.

00:18:17 Also, I just really love using the mini to record with because it's always silent.

00:18:22 It's always silent.

00:18:24 And it's...

00:18:24 Yeah.

00:18:25 And they're pretty cheap, even go big.

00:18:28 So I just went for a bottom-end one.

00:18:30 I think I spent $400 on this or something.

00:18:32 Ridiculous.

00:18:33 Well, you probably can trade it and get one for like another $20.

00:18:35 Yeah, maybe.

00:18:36 So I have mentioned before that I'm not a fan of Scheme and Lisp.

00:18:42 And I guess I just want to hit a nerve for at least one person.

00:18:50 Philip.

00:18:50 And I'm sorry, Philip.

00:18:52 I'm not going to try to pronounce your last name.

00:18:54 But it looks cool.

00:18:55 Lisiak?

00:18:55 Something like that?

00:18:56 Okay.

00:18:57 Lisiak?

00:18:58 Nice.

00:18:59 I'll probably mess it up, but we'll see.

00:19:00 Okay.

00:19:00 But he decided to...

00:19:04 And we interacted on the...

00:19:07 I think Fosstodon or Blue Sky or something.

00:19:09 And just kind of...

00:19:13 He said, you know, basically, what do you got against it?

00:19:15 I'm like, I don't have anything against Scheme, really.

00:19:18 I just...

00:19:18 Personally, me, I didn't find a lot of use for it.

00:19:21 And we talked about it.

00:19:21 And I actually wrote up this big conversation with him that I need to make into a blog post.

00:19:26 Because I do appreciate that I learned Scheme.

00:19:29 I just haven't used it a lot.

00:19:30 So...

00:19:31 And he said, there's a lot of uses.

00:19:33 And I said, I'd love to hear some.

00:19:35 And he's like, oh, okay.

00:19:36 Well, then I'm going to have to write a blog post.

00:19:38 So he wrote My Land of Scheme in 2025.

00:19:42 So we're going to link to a blog post of all the cool stuff that Scheme does lately.

00:19:49 At least from his perspective.

00:19:50 So that's cool.

00:19:51 And then...

00:19:52 Actually, I really enjoy his writing style.

00:19:56 So I really like good long-form blog posts.

00:20:00 But anyway, good writing style.

00:20:01 Thanks, Philip.

00:20:02 And he also just recently released another article, Exposing Flaky Tests with pytest Rerun Failures.

00:20:09 And it's a plugin that I've used a lot too.

00:20:12 So cool writing.

00:20:14 So keep up the blogs, people.

00:20:16 Like it.

00:20:16 And I'm really sorry if I have offended anybody that likes Scheme or...

00:20:22 Or what else?

00:20:23 Who else can I offend?

00:20:24 Pearl writers?

00:20:27 C-sharp.

00:20:27 C-sharp.

00:20:28 I just don't enjoy writing C-sharp in Scheme.

00:20:31 It isn't anything against the language.

00:20:32 It's just not for me.

00:20:33 So anyway.

00:20:35 All right.

00:20:35 Well, I can see why it's tough, Brian.

00:20:37 I can see why it's tough.

00:20:38 I actually pulled this joke up when I thought of...

00:20:41 I can see why it's tough.

00:20:42 And I thought of you when I said...

00:20:44 So, question.

00:20:45 This is like you being too logical or you may be a tester.

00:20:49 When I was four, my sister was two.

00:20:51 I'm now 44.

00:20:52 How old is my sister?

00:20:54 Programmer.

00:20:54 Easy.

00:20:55 44 minus four, but minus two from that.

00:20:58 And all that.

00:20:58 That's two years difference in the gap.

00:21:00 So, 42.

00:21:00 Tester.

00:21:01 Well, you see.

00:21:03 This is a tough one.

00:21:04 She might be 42, but she could be 41 or 43 also.

00:21:08 Since you didn't say when your birthday is and her birthday is.

00:21:11 Also, she could be dead.

00:21:12 Finally, I thought she was your sister.

00:21:15 You might have thought she was your sister, but actually your mom had an affair with another

00:21:19 man and a woman who was one.

00:21:21 And it turns out it's not your sister.

00:21:23 So, with that...

00:21:24 You know, and on and on it goes.

00:21:26 Give it away your real sister.

00:21:27 You don't know how old she is.

00:21:28 Finally, what if you think your sister is dead, but she actually has become an astronaut on

00:21:32 a secret government project and she's been traveling at near light speed.

00:21:36 Now, her time is going much more slowly.

00:21:38 She could actually be younger than 41.

00:21:41 You see, it's hard to be a tester, right?

00:21:42 Yeah, I like it.

00:21:47 I like Anthony's answer.

00:21:49 Two is half of four.

00:21:50 So, if...

00:21:52 Oh, my God.

00:21:53 Hey, Anthony.

00:21:53 Shout out in the audience there.

00:21:54 You are absolutely right.

00:21:55 And if you go to the YouTube comments, it's...

00:22:00 Duh.

00:22:01 She's 22.

00:22:02 Then it says...

00:22:04 Someone else says, a fellow McDonald's graduate, I see.

00:22:07 Yeah, that was an easy one.

00:22:08 Oh, follow up.

00:22:10 That's a chat GTP answer.

00:22:12 Chat GPT answer.

00:22:13 Last time she was half your age.

00:22:15 Oh, my gosh.

00:22:16 Okay.

00:22:16 Oh, and nice inside joke there.

00:22:20 Anthony making fun of AI since he's pretty much an AI pimp these days, as far as I remember.

00:22:27 But anyway.

00:22:31 Anyway, the comments are pretty funny as well.

00:22:34 And then someone just responds green.

00:22:36 Green.

00:22:36 Awesome.

00:22:37 Awesome.

00:22:40 Well, it's great to have people in the audience to chat with and be part of the show.

00:22:45 And, Brian, great to be here with you, right?

00:22:47 It's good to be with you.

