WEBVTT

00:00:00.001 --> 00:00:05.060
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.060 --> 00:00:09.620
This is episode 289, recorded June 21st, 2022.

00:00:09.620 --> 00:00:10.940
I'm Brian Aachen.

00:00:10.940 --> 00:00:12.020
Hey, I'm Michael Kennedy.

00:00:12.020 --> 00:00:13.260
And I'm Gina Heuske.

00:00:13.260 --> 00:00:16.480
Welcome, Gina. I'm so glad that you could join us for the show.

00:00:16.480 --> 00:00:22.200
Well, I'm still very, very honored that I'm allowed to be on here because I've been a long-time listener.

00:00:22.200 --> 00:00:25.920
And yeah, so being on here is absolutely amazing for me.

00:00:25.920 --> 00:00:29.620
That's very cool. So tell us a little bit about yourself before we jump in.

00:00:29.620 --> 00:00:35.900
Yeah, well, so I think my claim to fame most likely is that I'm the creator and maintainer of Octoprint,

00:00:35.900 --> 00:00:45.360
which is basically a web front end slash print server for 3D printers that I've been now maintaining for almost a decade, actually.

00:00:45.360 --> 00:00:47.120
So this December, it will be a decade.

00:00:47.120 --> 00:00:55.740
And it's written in Python, which is why I have gotten more and more interested into the language over the course of the past decade.

00:00:55.740 --> 00:01:00.180
And also now hang out on conferences when I get the chance.

00:01:00.180 --> 00:01:02.280
And there is no pandemic going on right now.

00:01:02.280 --> 00:01:06.340
And in general, just kind of fell in love with the language, I got to admit.

00:01:06.340 --> 00:01:08.440
I used to be a Java developer.

00:01:08.440 --> 00:01:12.220
I'm very glad that I no longer am.

00:01:13.340 --> 00:01:27.360
And now I'm a full-time open source maintainer, actually, because I'm in the very lucky position that people apparently love Octoprint enough that donations and such and sponsorships and such generate enough revenue that it can work for me.

00:01:27.360 --> 00:01:28.400
Oh, that's awesome.

00:01:28.400 --> 00:01:28.980
Very cool.

00:01:28.980 --> 00:01:29.400
Pretty awesome.

00:01:29.400 --> 00:01:30.600
That is so fantastic.

00:01:30.600 --> 00:01:31.360
Yeah.

00:01:31.360 --> 00:01:35.560
I still don't know why it works, but hey, I'm taking it.

00:01:36.400 --> 00:01:39.020
Well, Michael, you got our first topic today.

00:01:39.020 --> 00:01:40.420
I do.

00:01:40.420 --> 00:01:46.440
I want to combine some things that we've covered before as a way to introduce something new.

00:01:46.440 --> 00:01:51.380
So way back when we talked about something called Mangita.

00:01:51.380 --> 00:01:53.760
Have I mentioned that I like MongoDB?

00:01:53.760 --> 00:01:55.520
I think this might be something I've been talking about.

00:01:55.520 --> 00:01:56.600
Like, I love MongoDB.

00:01:56.600 --> 00:01:57.240
I think it's great.

00:01:57.240 --> 00:01:58.500
Love working with it from Python.

00:01:58.500 --> 00:02:00.460
It works super duper well for me.

00:02:00.460 --> 00:02:08.540
Now, one of the things I'm envious of on the relational side is SQLite, which ships with Python, and you don't have to start up a server or anything.

00:02:08.540 --> 00:02:09.500
Just say, here's a file.

00:02:09.500 --> 00:02:10.520
That's my database.

00:02:10.520 --> 00:02:14.440
Let me point database tools like SQLAlchemy and stuff at it, right?

00:02:14.440 --> 00:02:17.020
With MongoDB, we haven't really had anything like that.

00:02:17.020 --> 00:02:23.760
But then we did talk about this thing called Mangita, which is Mangita is to MongoDB as SQLite is to SQL.

00:02:23.760 --> 00:02:25.400
So that's pretty awesome.

00:02:25.400 --> 00:02:31.300
You pip install MongoDB, which has a beautiful little character for its icon.

00:02:31.300 --> 00:02:38.800
And you pip install this thing, and then you can just create a disk connection or a memory connection or stuff like that.

00:02:38.800 --> 00:02:41.600
It's not incredibly fast, but you know what?

00:02:41.600 --> 00:02:42.960
Fast enough, right?

00:02:42.960 --> 00:02:46.680
Fast enough for simple apps, for demo apps, or if you're teaching a class or something like that.

00:02:46.680 --> 00:02:53.100
It's sort of my primary, basically demos, YouTube video demos and class examples and stuff.

00:02:53.100 --> 00:02:56.760
I don't want to have people set up a whole database server they maybe have never set up.

00:02:56.760 --> 00:02:58.120
Just to play with an example, right?

00:02:58.120 --> 00:03:02.060
So here's a cool way, except for it only does like the low-level MongoDB API.

00:03:02.060 --> 00:03:04.520
So I'm a big fan of Beanie.

00:03:04.520 --> 00:03:12.000
I reached out to Roman Wright and said, hey, do you know of anything that will allow Beanie to work with something like Mangita?

00:03:12.000 --> 00:03:14.420
And he said, not really.

00:03:14.420 --> 00:03:15.400
So I'll make one.

00:03:15.400 --> 00:03:17.180
Where did I put it?

00:03:17.180 --> 00:03:17.560
Oh, no.

00:03:17.560 --> 00:03:18.140
If I copied.

00:03:18.140 --> 00:03:18.820
No, I.

00:03:18.820 --> 00:03:19.220
Yeah.

00:03:19.360 --> 00:03:20.680
So I had the wrong one selected.

00:03:20.680 --> 00:03:22.300
He did Beanie, the ORM.

00:03:22.300 --> 00:03:28.040
And I said, I want to use this ORM against the disk database, much like you would SQLAlchemy against SQLite.

00:03:28.040 --> 00:03:29.500
He said, no, I don't know of one of those.

00:03:29.500 --> 00:03:32.660
But what if I made Beanieta for Mangita?

00:03:32.660 --> 00:03:35.580
And so I love the naming here.

00:03:35.580 --> 00:03:37.340
That's why I wanted to put them all together.

00:03:37.860 --> 00:03:44.860
So Beanieta is a local DB-like database ready to work with Beanie, right?

00:03:44.860 --> 00:04:02.320
So basically, all you have to do to work with this is import client from there, create a client, paste that, give it a directory just like you would SQLite, pull a database off of it, and then just call initialize Beanie like you normally would, but pass it this Beanieta database.

00:04:02.540 --> 00:04:03.820
So it just works off the file system.

00:04:03.820 --> 00:04:13.260
So now you've got a local, mostly compatible MongoDB disk-based in-process thing that you can use for simple MongoDB examples.

00:04:13.260 --> 00:04:26.440
It has some things it doesn't support, links, which are like following references across documents, aggregations, which is a whole crazy data analytics aspect of MongoDB, and unions, and other things that Mangita doesn't support.

00:04:26.440 --> 00:04:28.140
So I'm pretty sure.

00:04:28.140 --> 00:04:29.360
Let's just double check here.

00:04:29.960 --> 00:04:33.220
Yeah, so it basically just builds that wrapper on top of Mangita.

00:04:33.220 --> 00:04:38.880
And the real challenge that was tricky here was Beanie is only async, and Mangita is only sync.

00:04:38.880 --> 00:04:41.080
So you've got to somehow put those together.

00:04:41.080 --> 00:04:43.220
Anyway, thank you, Roman Wright, for doing this.

00:04:43.220 --> 00:04:43.860
It looks really cool.

00:04:43.860 --> 00:04:49.380
And we could come up with a joke for this, but I think that's Benita's.

00:04:49.380 --> 00:04:50.080
Oh.

00:04:50.080 --> 00:04:53.500
Oh, Brian, that was solid.

00:04:53.500 --> 00:04:56.520
That hurts.

00:04:56.520 --> 00:04:57.300
Yeah.

00:04:58.200 --> 00:04:58.640
Yeah.

00:04:58.640 --> 00:05:00.080
Sorry.

00:05:00.080 --> 00:05:01.320
Not sorry.

00:05:01.320 --> 00:05:02.360
Okay.

00:05:02.360 --> 00:05:11.020
So I think that I'd like to talk to people about using good coding practices, especially in research and science.

00:05:11.020 --> 00:05:15.060
So I ran across Patrick Minolt.

00:05:16.420 --> 00:05:18.540
It's an online book, really.

00:05:18.540 --> 00:05:21.360
It's called The Good Research Code Handbook.

00:05:21.360 --> 00:05:30.980
And he says it's for grad students, postdocs, and PIs, which I had to look up, was principal investigator, who didn't do a lot of programming as part of their research.

00:05:30.980 --> 00:05:39.600
And I think it's also just kind of a good thing for really anybody that's coming into coding from a different field and wants to jumpstart some good practices.

00:05:39.600 --> 00:05:42.580
It's actually really kind of great.

00:05:42.580 --> 00:05:44.600
He's got a little roadmap, which is neat.

00:05:44.860 --> 00:05:45.780
I'll click on that roadmap.

00:05:45.780 --> 00:05:46.840
A little small here.

00:05:46.840 --> 00:05:48.380
But it goes through.

00:05:48.380 --> 00:05:50.580
It's got a journey mapped out there.

00:05:50.580 --> 00:05:51.000
I love it.

00:05:51.000 --> 00:05:51.780
Yeah, it's nice.

00:05:51.780 --> 00:05:55.440
But kind of a visual of where you're going to go with this.

00:05:55.540 --> 00:06:05.440
But he talks about setting yourself up for success using Git and virtual environments and projects and even packaging and cookie cutter, which is cool.

00:06:05.440 --> 00:06:11.040
Talks about style guides and keeping things clean and removing dead code.

00:06:11.040 --> 00:06:24.460
Some coding practices like separating concerns and separating your pure functions from side effect functions, which I thought that some people don't really touch on right off the bat, but it's a good practice.

00:06:25.040 --> 00:06:31.800
Even talks about testing, although the focus is really around unit testing and sort of some hand waves around in-to-end testing.

00:06:31.800 --> 00:06:33.900
But still, it's nice.

00:06:33.900 --> 00:06:43.820
And then even gets into documentation and social aspects like doing pairing and peer reviews and getting involved in open source and community.

00:06:43.820 --> 00:06:48.380
It's actually just really kind of a pretty solid look for people.

00:06:48.380 --> 00:06:49.520
Sounds great.

00:06:49.520 --> 00:06:50.220
Yeah, that's really great.

00:06:50.220 --> 00:06:51.460
I think it's, yeah.

00:06:51.460 --> 00:06:52.120
Go ahead, Gina.

00:06:52.120 --> 00:06:54.160
No, I just wanted to say it sounds great.

00:06:54.540 --> 00:07:04.680
Because I sometimes have people joining Octoprint who are pretty much newcomers to the whole coding aspect, but are interested in writing a plugin or something like that.

00:07:04.680 --> 00:07:08.300
So that might be a good resource for them to just direct them to.

00:07:08.300 --> 00:07:10.940
I had, you know, I'm, go ahead, Brian.

00:07:11.240 --> 00:07:22.840
I had somebody contacted me once and try to, I wish I knew about this before because somebody contacted me and said, we don't really need coding training, but we kind of aren't used to working together well.

00:07:22.840 --> 00:07:24.300
We're all individual people.

00:07:24.300 --> 00:07:27.220
And now we're working as a group and we don't know how to do that.

00:07:27.820 --> 00:07:34.180
And I don't know if that's here, but a lot of this around this is sort of good practices for working well with others.

00:07:34.180 --> 00:07:35.520
Michael?

00:07:35.520 --> 00:07:36.000
Yeah.

00:07:36.000 --> 00:07:47.840
What I was going to say is a lot of people, especially in this research field, learn to code in a jit fashion, like just enough learning of coding to get the problem solved.

00:07:47.960 --> 00:07:59.420
And then they just, they have to keep moving on and it's easy to find yourself just stumbling into wrong patterns of, well, everything's into one huge file and it doesn't take like command line argument inputs.

00:07:59.420 --> 00:08:01.600
It just hardcodes the values in.

00:08:01.600 --> 00:08:02.640
So you can't reuse it.

00:08:02.640 --> 00:08:05.760
It's not a module you can import or a function you can call.

00:08:05.760 --> 00:08:07.340
And it does no error checking.

00:08:07.340 --> 00:08:09.280
These are, yes, exactly.

00:08:09.280 --> 00:08:10.120
No, no testing.

00:08:10.120 --> 00:08:14.280
All of that kind of stuff would be really valuable for people who are coming from that angle.

00:08:14.280 --> 00:08:15.940
So definitely a good thing to check out.

00:08:15.940 --> 00:08:16.720
And I love it.

00:08:16.720 --> 00:08:17.760
Goodresearch.dev.

00:08:17.840 --> 00:08:19.120
What a sweet domain name.

00:08:19.120 --> 00:08:30.680
There's also one of the neat things about the writing style is he's talking about trying to just free yourself from time.

00:08:30.680 --> 00:08:35.180
So not free yourself from time, but as a researcher, you're in a hurry.

00:08:35.180 --> 00:08:36.620
There's a lot of stuff to do.

00:08:36.620 --> 00:08:44.440
And a lot of the stuff he's trying to get people to do is about offloading information so you don't have to keep it in mind.

00:08:44.760 --> 00:08:56.260
So he talks about short-term memory and long-term memory and how, you know, like unit tests and inline code comments are good to, you know, short-term reminders in the moment.

00:08:56.260 --> 00:09:02.380
And then project documentation and test suites are about keeping that knowledge long-term.

00:09:03.540 --> 00:09:08.160
And that's kind of a, I never really thought about that before of short-term versus long-term information.

00:09:08.160 --> 00:09:10.520
But it's kind of a neat angle as well.

00:09:10.520 --> 00:09:11.600
So anyway.

00:09:11.600 --> 00:09:13.160
Yeah, that is clever.

00:09:14.000 --> 00:09:15.100
So where are we going next?

00:09:15.100 --> 00:09:17.640
We have something that I brought along.

00:09:17.640 --> 00:09:25.140
And given that I come from a 3D printing background now, I thought I would start with something that can be applied to 3D printing.

00:09:25.840 --> 00:09:30.680
And that is a Python library for building parametric 3D CAD models.

00:09:30.680 --> 00:09:37.740
It is based on, for those of you who have heard of the open source CAD solution called FreeCAD.

00:09:37.880 --> 00:09:48.860
It's based on the same CAD kernel, on the same modeling kernel, and allows you to, yeah, programmatically design stuff.

00:09:48.860 --> 00:09:51.460
And that is pretty amazing if you want to do it parametric.

00:09:51.460 --> 00:09:56.160
So, for example, imagine that you have some kind of case for an electronics project or something.

00:09:56.160 --> 00:10:06.940
And you need screws from, screws, screw holes at certain distances, but maybe you want to be able to scale that up or down or whatnot or things like this.

00:10:06.940 --> 00:10:10.220
And for stuff like this, something like this is absolutely amazing.

00:10:10.220 --> 00:10:22.300
From the ground up, CAD query is only a library, but it also comes with, as it says here, it also comes with a QT-based GUI called CQ Editor.

00:10:22.300 --> 00:10:22.860
Nice.

00:10:22.860 --> 00:10:27.040
Which I tried out and worked great.

00:10:27.040 --> 00:10:32.640
The only problem was it came with an older version of CAD query that did not yet support some stuff that I wanted to play around with.

00:10:32.640 --> 00:10:39.560
So what I did instead was I tried the Jupyter extension and just threw that up on my NAS in a Docker container.

00:10:39.560 --> 00:10:41.340
And that works absolutely wonderfully.

00:10:41.340 --> 00:10:47.780
In the browser, it gives you a 3D model view of the stuff that you're currently modeling, automatically refresh whenever you change something.

00:10:48.420 --> 00:10:59.040
And the way things look is, this is the GUI, by the way, you simply create, you define a work plane, then you create a box on this, for example.

00:11:00.300 --> 00:11:09.040
Then you say to the top face in Z direction, define that as a work plane, put a hole through that with a diameter.

00:11:09.040 --> 00:11:11.920
So the whole API is pretty intuitive as well.

00:11:11.920 --> 00:11:13.860
Also well documented on here.

00:11:14.920 --> 00:11:23.280
And if you scroll a bit through the examples, you can see that there is way more possible than just planes with holes.

00:11:23.280 --> 00:11:27.560
But things like, where was it?

00:11:27.560 --> 00:11:29.200
Somewhere there was a...

00:11:29.200 --> 00:11:30.260
Right.

00:11:31.400 --> 00:11:36.080
A flask or the aforementioned parametric enclosure, a Lego brick.

00:11:36.080 --> 00:11:41.380
So for all of that, there is examples, example code there.

00:11:41.380 --> 00:11:50.760
And yeah, it really surprised me how quick I got this up and running because I had a very specific use case that I wanted to try to run through that.

00:11:50.760 --> 00:11:58.600
And that was inserts for one of these part case thingies where you can put inserts into sort screws and stuff.

00:11:58.600 --> 00:12:01.740
And that worked flawlessly with that.

00:12:01.740 --> 00:12:04.780
I had this finished in maybe half an hour or something like that.

00:12:04.780 --> 00:12:13.500
So really great package, works nice, has everything that you expect from a basic cut solution and also works in a browser.

00:12:13.500 --> 00:12:19.380
So if you want to go fully parametric and already know Python, then give this a look as well as free cut.

00:12:19.380 --> 00:12:20.760
Very cool.

00:12:20.760 --> 00:12:21.580
Yeah, this looks super.

00:12:21.580 --> 00:12:28.160
Yeah, I have a friend who is doing a lot of Python and CNC machines.

00:12:28.160 --> 00:12:36.360
He has a guitar company and it gets these wood blocks and shaves out guitars and necks and things that I'm not familiar with.

00:12:36.360 --> 00:12:38.680
Would this be applicable to something like that as well?

00:12:39.280 --> 00:12:44.300
Not just 3D printing, but if you've got to define the polygons of it, basically?

00:12:44.300 --> 00:12:48.340
The objects that it can output are STL files, object files.

00:12:48.340 --> 00:12:50.460
I think step export is also available.

00:12:50.460 --> 00:12:55.280
So all the stuff that you find commonly in the CNC and 3D printing world.

00:12:55.280 --> 00:13:00.880
So I could just design something with this, export the STL, throw it in a slicer for my 3D printer,

00:13:00.880 --> 00:13:11.100
or alternatively throw a resulting step file or something into whatever workflow preparation I do for my CNC router, I guess.

00:13:11.100 --> 00:13:13.320
So I'm not that familiar with CNC.

00:13:13.320 --> 00:13:14.640
Yeah, yeah.

00:13:14.640 --> 00:13:17.800
I think this huge CNC machine, I think it takes STL files.

00:13:17.800 --> 00:13:18.460
I'm pretty sure.

00:13:18.460 --> 00:13:19.340
Well, then.

00:13:19.340 --> 00:13:20.380
I'll have to check.

00:13:20.380 --> 00:13:21.980
But that sounds like it could be really relevant.

00:13:21.980 --> 00:13:23.980
A couple of pieces of feedback.

00:13:23.980 --> 00:13:30.360
Daniel Kras says it's nice because he hates the GUI workflow of FreeCAD.

00:13:30.360 --> 00:13:31.180
Yeah.

00:13:31.180 --> 00:13:36.480
The funny thing is CAD query originally started out as a FreeCAD plug-in, actually, as far as I see.

00:13:36.480 --> 00:13:40.240
So the CAD query 1 was FreeCAD, still built into FreeCAD.

00:13:40.240 --> 00:13:43.560
CAD query 2 is now standalone and just uses the kernel and all that.

00:13:43.560 --> 00:13:45.020
So really nice.

00:13:45.020 --> 00:13:49.880
For people who used to use OpenSCAD, that one is the next level and really nice.

00:13:50.380 --> 00:13:56.000
And then Brandon Branner, hey, Brandon, says, can you import this into a slicer for 3D printing?

00:13:56.000 --> 00:14:00.260
Yeah, that was what I meant with you can export the STL and then throw that into the slicer.

00:14:00.260 --> 00:14:01.260
Yeah, that's what I thought.

00:14:01.260 --> 00:14:01.580
Perfect.

00:14:01.580 --> 00:14:02.240
Awesome.

00:14:02.240 --> 00:14:03.040
This is a great find.

00:14:03.040 --> 00:14:03.540
I love it.

00:14:03.540 --> 00:14:09.760
And I also, I love that you come with your experience and your view of Python and what's super interesting,

00:14:09.760 --> 00:14:13.020
because I would have never picked this, but it's very cool.

00:14:13.020 --> 00:14:14.240
And a lot of people are into it, right?

00:14:14.240 --> 00:14:16.000
It's just like, I'm like, oh, FastAPI.

00:14:16.000 --> 00:14:16.840
Yeah, it's stuff like that.

00:14:16.840 --> 00:14:17.260
Yeah.

00:14:17.260 --> 00:14:19.120
Different point of view, I guess.

00:14:19.740 --> 00:14:21.180
I want to do some 3D printing.

00:14:21.180 --> 00:14:22.420
It'll be fun.

00:14:22.420 --> 00:14:26.580
It is, but be careful that you don't start a hobby project that then takes over your life

00:14:26.580 --> 00:14:27.840
that sometimes happens, I've heard.

00:14:27.840 --> 00:14:33.040
Well, so that's why I put that off, because I know that I don't need another one.

00:14:33.040 --> 00:14:40.900
Brian, I heard you have some awesome 3D Star Wars stuff.

00:14:40.900 --> 00:14:44.400
And maybe you could like build in, like you could print some additional stuff to go with it.

00:14:44.400 --> 00:14:45.240
I could.

00:14:45.240 --> 00:14:46.100
Yeah.

00:14:46.100 --> 00:14:47.620
Or just buy it.

00:14:47.620 --> 00:14:48.140
Yeah, there you go.

00:14:48.380 --> 00:14:49.100
Or you could just buy it.

00:14:49.100 --> 00:14:52.160
I just actually bought a part.

00:14:52.160 --> 00:14:53.480
So I needed a camera mount.

00:14:53.480 --> 00:14:59.440
So I had a camera that the one I'm using now, there's other applications where I want to use

00:14:59.440 --> 00:15:02.700
that I don't, I didn't have a mount for a tripod mount.

00:15:02.700 --> 00:15:08.820
And there was somebody on Etsy that it's obviously a 3D printed thing that you can buy.

00:15:08.820 --> 00:15:12.640
So Etsy is full of people making useful things with 3D printers.

00:15:12.640 --> 00:15:14.420
I think that's neat.

00:15:14.420 --> 00:15:17.460
And $10 to somebody else to do it for me?

00:15:17.460 --> 00:15:18.100
What a deal.

00:15:18.860 --> 00:15:25.120
I'm happy to report that I'm currently looking into a camera that is sitting on a mount that I designed and printed myself.

00:15:25.120 --> 00:15:26.960
That's neat.

00:15:26.960 --> 00:15:27.320
Wow.

00:15:27.320 --> 00:15:27.940
That's awesome.

00:15:27.940 --> 00:15:28.240
Yeah.

00:15:28.240 --> 00:15:36.340
So that mounts to a VESA monitor arm and then has a little slide that I can actually slide up and down to adjust the height.

00:15:36.460 --> 00:15:45.300
And I also have some of these angle brackets that are with tripod mounts on the up and down side that I can use to adjust the tilt and stuff.

00:15:45.300 --> 00:15:46.700
And yeah.

00:15:46.700 --> 00:15:50.940
So after I did this, that thing finally set where it is supposed to sit.

00:15:50.940 --> 00:15:52.180
So win-win.

00:15:52.180 --> 00:15:53.160
Awesome.

00:15:54.060 --> 00:15:54.720
That's awesome.

00:15:54.720 --> 00:15:59.400
And just for people listening who are not watching, Gina has the best video setup of all three of us.

00:15:59.400 --> 00:15:59.920
She looks great.

00:15:59.920 --> 00:16:00.680
Yeah.

00:16:00.680 --> 00:16:01.980
It's a really good studio setup.

00:16:01.980 --> 00:16:02.640
All right.

00:16:02.640 --> 00:16:04.340
And then parting thought on this one.

00:16:04.340 --> 00:16:05.020
Henry Schreiner.

00:16:05.020 --> 00:16:05.500
Hey, Henry.

00:16:05.500 --> 00:16:07.940
Says, 3D work from Python has always been tricky.

00:16:07.940 --> 00:16:09.540
So this looks great.

00:16:09.540 --> 00:16:10.300
Right?

00:16:10.300 --> 00:16:12.240
You ready for a fun one?

00:16:12.240 --> 00:16:12.760
Yeah.

00:16:12.760 --> 00:16:13.800
Let's switch to you.

00:16:13.800 --> 00:16:14.340
All right.

00:16:14.340 --> 00:16:15.340
I got something cool.

00:16:15.340 --> 00:16:18.880
So previously I spoke about TextSniper.

00:16:18.880 --> 00:16:23.020
This is a Mac app and it lives in the menu bar, like up by the clock.

00:16:23.320 --> 00:16:28.920
And you just run it and you can, on Mac, you can hit Command Shift 4 and select a region and screenshot it.

00:16:28.920 --> 00:16:30.860
This one adds Command Shift 2.

00:16:30.860 --> 00:16:34.980
And if you select a region, it will capture the text out of whatever is behind it.

00:16:34.980 --> 00:16:40.240
So for example, I was on a meeting on Zoom and somebody put something up and like, oh, I want to have notes on that.

00:16:40.240 --> 00:16:41.260
And I thought, oh, I could type it.

00:16:41.260 --> 00:16:41.740
Wait a minute.

00:16:41.740 --> 00:16:43.500
Command Shift 2, swipe on Zoom.

00:16:43.500 --> 00:16:43.840
Boom.

00:16:43.840 --> 00:16:45.560
I have notes to the whole page instantly.

00:16:45.560 --> 00:16:46.120
Right?

00:16:46.120 --> 00:16:46.900
This is a cool app.

00:16:46.900 --> 00:16:48.080
It's like 11 bucks for the Mac.

00:16:48.080 --> 00:16:51.040
This I sort of randomly mentioned that I thought it was cool.

00:16:51.040 --> 00:16:52.580
This is not what I'm talking about.

00:16:52.580 --> 00:17:00.820
What I want to talk about is Brett, Brett Turnbull said, hey, I heard Michael talk about this TextSniper thing I just described on Python Bytes.

00:17:00.820 --> 00:17:01.500
That's neat.

00:17:01.500 --> 00:17:02.680
I bet I could build this in Python.

00:17:02.680 --> 00:17:03.520
So he did.

00:17:03.520 --> 00:17:04.180
Nice.

00:17:04.180 --> 00:17:06.280
Isn't that dope?

00:17:06.580 --> 00:17:10.360
So if we jump over here to the, I love the name.

00:17:10.360 --> 00:17:12.320
I got so many good names today.

00:17:12.320 --> 00:17:13.260
I mean, I didn't get them.

00:17:13.260 --> 00:17:14.080
I just gathered them up.

00:17:14.080 --> 00:17:17.160
So we have TextSniper for that thing that grabs the text.

00:17:17.160 --> 00:17:18.500
He created the Textinator.

00:17:20.120 --> 00:17:26.160
And it's a simple macOS status bar menu bar app that automatically detects text within screenshots.

00:17:26.160 --> 00:17:45.720
So instead of adding a new hotkey that does its own thing, you just do Command Shift 4, copy it, and then it hooks into macOS through PyOBJC, figures out a screenshot was taken, grabs it, real quickly uses the neural engines in macOS and the Apple Silicon and stuff to do the text processing.

00:17:45.720 --> 00:17:47.000
And then drops out the answer.

00:17:47.000 --> 00:17:51.600
And if you look at the whole app, the entire app end to end is 450 lines of code.

00:17:51.600 --> 00:17:53.000
That's brilliant.

00:17:53.000 --> 00:17:53.580
Yeah.

00:17:53.580 --> 00:17:54.360
Very cool.

00:17:54.360 --> 00:17:57.140
And if you look at this, like, let's see, oh, boy, there's a lot in it.

00:17:57.140 --> 00:18:14.800
So you can see it's, you know, from Foundation, from Coco, you know, Import, NS Notification Center, and all these different things is what it's basically using to listen for events of screenshots being taken and then feed those off into the various places that it needs to go.

00:18:14.800 --> 00:18:16.200
So what do you think?

00:18:16.200 --> 00:18:17.380
I think it's awesome.

00:18:17.380 --> 00:18:19.140
And Rhett's in the audience.

00:18:19.140 --> 00:18:21.360
And he says, oh, yeah.

00:18:21.360 --> 00:18:21.800
Hey, Rhett.

00:18:21.800 --> 00:18:23.020
Thanks for the shout out.

00:18:23.020 --> 00:18:27.060
And then, of course, somebody says, just for Mac, power.

00:18:27.060 --> 00:18:28.220
I'm both weasel on that.

00:18:28.220 --> 00:18:29.060
I'm afraid.

00:18:29.060 --> 00:18:32.720
Gina, what do you run for your OS?

00:18:32.720 --> 00:18:34.200
Actually, Windows.

00:18:34.200 --> 00:18:36.220
Yeah, to the big surprise of many.

00:18:36.380 --> 00:18:37.740
But I'm also a gamer.

00:18:37.740 --> 00:18:42.840
So I got tired of constantly dual booting.

00:18:42.840 --> 00:18:43.820
So, yeah.

00:18:43.820 --> 00:18:45.860
That's definitely a challenge.

00:18:45.860 --> 00:18:48.740
So there's actually a video showing you how it works.

00:18:48.900 --> 00:18:57.240
And it uses something I've built apps with as well called Rumps, ridiculously uncomplicated macOS menu bar apps or something like that.

00:18:57.740 --> 00:19:14.920
And so it's really an interesting way where it's just kind of like clicking together a couple of cool things like the NS query for Spotlight with PyOBGC, the vision VN recognized text request, and like just building on top of macOS and Rumps, which is pretty cool.

00:19:15.200 --> 00:19:20.020
You do have to give it special permissions because it has to be able to monitor your system globally.

00:19:20.020 --> 00:19:21.280
So there's a few steps you got to follow.

00:19:21.280 --> 00:19:22.280
But well done, Rhett.

00:19:22.280 --> 00:19:25.080
I love the ambition here, and it looks good.

00:19:25.080 --> 00:19:26.280
But this is incredible.

00:19:26.280 --> 00:19:30.920
What I love about this is it's just one thing, but it's a small application.

00:19:30.920 --> 00:19:34.980
So, I mean, potentially just you could come up with all of these pieces.

00:19:34.980 --> 00:19:39.580
You could do other stuff, too, and have just a small example to try to learn off of.

00:19:39.580 --> 00:19:40.360
That's pretty neat.

00:19:40.360 --> 00:19:41.020
Indeed.

00:19:41.020 --> 00:19:45.200
Let me just make a real quick suggestion out there.

00:19:45.200 --> 00:19:46.220
Maybe.

00:19:46.220 --> 00:19:47.220
I'm not sure.

00:19:47.220 --> 00:19:59.260
I don't see it over here, but over on the releases side, on my Rumps app, I did this, and I put over in the releases, you can come over here, and you can just download a .app zipped, but it just unzips as a .app file.

00:19:59.260 --> 00:20:01.980
So get that with some Py install.

00:20:01.980 --> 00:20:02.920
No, Py2.

00:20:02.920 --> 00:20:08.620
Use Py2 app on it and make it one cool further step there.

00:20:08.620 --> 00:20:10.760
And maybe automate that with GitHub Actions.

00:20:11.180 --> 00:20:12.180
Yes, that's a very good point.

00:20:12.180 --> 00:20:12.660
Absolutely.

00:20:12.660 --> 00:20:15.360
So you don't have to constantly keep doing it.

00:20:15.360 --> 00:20:17.600
Yes, very good point.

00:20:17.600 --> 00:20:19.740
Push to a branch, have it do some magic.

00:20:19.740 --> 00:20:20.480
Magic.

00:20:20.480 --> 00:20:23.080
Or click on release and have it do some magic.

00:20:23.080 --> 00:20:27.760
That's always wonderful to watch in the log.

00:20:28.600 --> 00:20:28.860
Yeah.

00:20:28.860 --> 00:20:33.580
You know what I find is that people that set that stuff up, they release apps like this more frequently.

00:20:33.580 --> 00:20:37.420
They're like, oh, it's just one feature, but I don't mind pushing the button, or I can just push to that branch.

00:20:37.420 --> 00:20:43.900
And the more that you have to do it manually, make sure you don't mess up stuff, and don't forget to bump the version, and you just do it a lot less frequently.

00:20:44.160 --> 00:20:46.840
So there's some really cool knock-on effects of that recommendation.

00:20:46.840 --> 00:20:56.420
I went through a lot of pain to automate testing and release tasks in Octoprint, which also involved, by the way, flashing physical hardware.

00:20:58.040 --> 00:21:07.440
And so I built a lot of stuff so that all of that is more or less at least semi-automated, because that takes so much work out of every single release.

00:21:07.440 --> 00:21:08.600
That's absolutely insane.

00:21:08.600 --> 00:21:10.120
So, yeah, automation.

00:21:10.120 --> 00:21:10.940
It's great.

00:21:10.940 --> 00:21:11.740
Yeah.

00:21:11.740 --> 00:21:13.420
I do have to add.

00:21:13.420 --> 00:21:14.840
So, yeah, there's a couple.

00:21:14.840 --> 00:21:27.320
I don't maintain that much stuff, but I have to admit that I am reluctant to bump versions, because then I'm like, I got to push it out to PyPI then, and I haven't automated that through GitHub Actions yet.

00:21:27.320 --> 00:21:29.880
So, yeah, I got to get on that stick.

00:21:29.880 --> 00:21:30.960
So, okay.

00:21:30.960 --> 00:21:36.200
I'd like to talk about locks, actually not using locks.

00:21:36.200 --> 00:21:43.560
So, this is an article called Handling Concurrency Without Locks from Haki Benita.

00:21:43.560 --> 00:21:54.960
And it's just sort of a nice, actually, this is intimidated at first by flipping and getting ready to read this article, but it was really well written.

00:21:55.360 --> 00:22:03.000
So, the idea is it starts with a Django application, and it's a URL shortener, actually, you were just talking about.

00:22:03.000 --> 00:22:07.540
But there's, so there's like an idea that you've just sort of walks through it.

00:22:08.240 --> 00:22:17.000
The idea is you have something that creates a unique URL, but that uniqueness is checked because you keep a database of it.

00:22:17.340 --> 00:22:23.660
And so, you check to make sure it's unique, and then you create it, make sure it's unique, and then store it in the database.

00:22:23.660 --> 00:22:28.940
But that check has to hit the database, and you've got a read-write thing, and there's a concurrency problem.

00:22:30.060 --> 00:22:35.380
I know there's lots of ways to get around it, but it's a reasonable use case to just think about.

00:22:35.380 --> 00:22:46.040
But there's a lot of places within Django or within web, actually, and within actually all applications where if you're using a database, there's this concurrency thing might be a problem.

00:22:46.400 --> 00:22:58.080
And you can get around it with locks or other things, but the discussion kind of goes through basically broadening it up a bit and just talks about collision problems and locking problems in general.

00:22:58.080 --> 00:23:02.460
And with some nice diagrams, I can't remember where they are on the page, but nice horse.

00:23:02.460 --> 00:23:08.180
But it's kind of a good, slow walk.

00:23:08.180 --> 00:23:09.160
Here are some diagrams.

00:23:09.160 --> 00:23:24.960
And then, okay, going on, continuing on with the article, the idea is like once you know it's unique, you're storing in the database, the database is already going to, if you set it up right, it's already going to make sure that he is unique.

00:23:24.960 --> 00:23:36.840
So instead of making sure you can do it ahead of time and then doing it and making it, then checking for database errors, just assume that it's right and throw it into the database and then watch for any problems.

00:23:36.840 --> 00:23:41.100
So basically using the database as the uniqueness indicator.

00:23:41.100 --> 00:23:54.360
And then he talks about how to do that and then how to structure code a little bit to deal with those issues and then recover from it gracefully if that happens.

00:23:54.360 --> 00:24:04.740
And then the side effect is you're faster because you're not putting the concurrency locks within your application.

00:24:04.740 --> 00:24:17.720
You're depending on that uniqueness and that control of the database, which is already fine-tuned to allow multiple access and keep track of that.

00:24:17.960 --> 00:24:18.800
Just utilize that.

00:24:18.800 --> 00:24:24.460
So it's a neat reminder to everybody to utilize the tools under you, I guess.

00:24:24.460 --> 00:24:25.380
Yeah.

00:24:25.380 --> 00:24:26.300
Good reminder.

00:24:26.300 --> 00:24:31.620
Do you do much database or Django stuff?

00:24:31.620 --> 00:24:32.260
Me?

00:24:32.260 --> 00:24:32.740
No.

00:24:32.740 --> 00:24:39.600
I think I've never so far even touched Django and I try to avoid databases like the plague.

00:24:41.060 --> 00:24:41.280
Yeah.

00:24:41.280 --> 00:24:44.080
I'm a huge enthusiast for flat files.

00:24:44.080 --> 00:24:46.700
And yeah, I don't know.

00:24:46.700 --> 00:24:48.080
I can do that stuff.

00:24:48.080 --> 00:24:48.940
They are quite valuable, right?

00:24:48.940 --> 00:24:49.400
Yeah.

00:24:49.400 --> 00:24:53.020
It's just, it takes so much complexity out of the system.

00:24:53.020 --> 00:25:00.060
If you can somehow avoid having to run a database server or an SQLite file somewhere or a Benita file.

00:25:01.200 --> 00:25:01.600
Yeah.

00:25:01.600 --> 00:25:01.920
Yeah.

00:25:01.920 --> 00:25:09.560
I've been working on a project, which I'm not really talking about yet, but it's, I've been thinking, well, could this just be a bunch of local JSON files?

00:25:09.560 --> 00:25:12.300
You know, I'll talk about that later, but yeah, it's, yeah.

00:25:12.300 --> 00:25:12.980
Could it just be?

00:25:12.980 --> 00:25:13.280
Maybe.

00:25:13.280 --> 00:25:17.420
If it's not, if it's 20 records or something, maybe just a JSON file is all I need.

00:25:17.420 --> 00:25:19.660
I mean, sometimes there's no way around it, but.

00:25:19.840 --> 00:25:19.940
Yeah.

00:25:19.940 --> 00:25:29.400
I've got a project with a very small database and it's in, it fits, it's a very tiny text file as we, as we started out.

00:25:29.400 --> 00:25:35.820
But, but the problem always is as long as soon as you get more than one user, you have concurrency problems.

00:25:35.820 --> 00:25:43.260
Even if the application isn't multi-threaded or multi-processed and, and we're running into that.

00:25:43.260 --> 00:25:48.680
So switching to, it does feel weird to have to switch to a database just for that.

00:25:48.760 --> 00:25:50.460
And you, I mean, you can get around it also.

00:25:50.460 --> 00:26:00.080
You can put the, you can just say, Hey, if I don't already have a database, I can put the concurrency in, in the server so that, so that that is handled there.

00:26:00.080 --> 00:26:01.220
You can do that, but.

00:26:01.220 --> 00:26:01.940
Could be sure.

00:26:01.940 --> 00:26:03.020
Yeah, for sure.

00:26:03.020 --> 00:26:07.020
My example is a client side, like desktop type story.

00:26:07.020 --> 00:26:08.960
So there's only going to be one user.

00:26:08.960 --> 00:26:12.500
There might be two people hitting the keyboard, but it'll be one in one app.

00:26:12.500 --> 00:26:12.980
Cool.

00:26:12.980 --> 00:26:17.900
But I also just really like thinking about, well, if you have a database and you have an ORM,

00:26:17.900 --> 00:26:20.640
in what ways could you just leverage that?

00:26:20.640 --> 00:26:26.500
And then instead of, like you said, well, let's, you know, from threading, import re-entered locks, the R lock, and then take those.

00:26:26.500 --> 00:26:29.500
And then you do pay the price for every successful time.

00:26:29.500 --> 00:26:33.520
And if it's one in a thousand or more that you're going to hit that problem, you know,

00:26:33.520 --> 00:26:40.160
pay that price and that little bit of complexity of catching like the integrity error and then reporting the error instead of reverse.

00:26:40.160 --> 00:26:40.860
That's great.

00:26:40.860 --> 00:26:41.360
Yeah.

00:26:41.760 --> 00:26:42.340
All right.

00:26:42.340 --> 00:26:44.520
What do we have next?

00:26:44.520 --> 00:26:46.220
Yeah.

00:26:46.220 --> 00:26:54.240
Next, we have something that I have not yet had a chance to test out myself, sadly, but which I could have used roughly five or six years ago.

00:26:54.240 --> 00:26:55.140
Really hard.

00:26:55.140 --> 00:27:00.140
So I thought maybe I should make a mental note now and share it here.

00:27:00.140 --> 00:27:04.100
So I will remember the next time that something like Tatsu exists.

00:27:04.100 --> 00:27:15.020
And Tatsu is a library with which, sometimes English is hard, you can generate parsers for Python.

00:27:15.140 --> 00:27:18.060
So Python-based parsers based on eBNFs.

00:27:18.060 --> 00:27:23.380
So I think the E was for extended and BNF is Bakus-Naur form.

00:27:23.380 --> 00:27:30.840
So a very structured way to define a grammar of a language of a file format of whatnot.

00:27:30.840 --> 00:27:37.560
And textual, I should add, though maybe also binary, but that sounds like a lot of pain.

00:27:38.940 --> 00:27:44.380
And that looks like something like, I'm looking for a good example.

00:27:44.380 --> 00:27:46.900
Let me quickly...

00:27:46.900 --> 00:27:48.980
Yeah.

00:27:48.980 --> 00:27:51.900
So, for example, this is a grammar.

00:27:51.900 --> 00:27:57.200
And then you turn that into a slightly annotated grammar.

00:27:58.280 --> 00:28:02.200
And in the end, you run this through Tatsu.

00:28:02.200 --> 00:28:11.320
And then Tatsu spits out something which builds an AST out of your thing that you put into it that is supposed to be parsed.

00:28:11.320 --> 00:28:13.640
And apparently, Tatsu cannot only do that.

00:28:13.640 --> 00:28:22.160
So it can do, on the one hand, in this kind of way that we know from the RE module, from the regular expression module in Python,

00:28:22.160 --> 00:28:26.280
where you can compile a pattern and then reuse it during the duration of your code.

00:28:26.280 --> 00:28:32.400
But you can also generate Python code itself out of it so that you can then import it as a module and reuse it and reuse it.

00:28:32.400 --> 00:28:34.940
Maybe also adjust it, but I don't know how well that works.

00:28:34.940 --> 00:28:40.140
And apparently, it is also compatible to Antler grammars, which is a name I haven't heard since university.

00:28:40.140 --> 00:28:48.260
So that is nice, I guess, for people who have grammars lying around that are written in Antler, I think, version 4 or something like that.

00:28:48.480 --> 00:28:57.520
And yeah, so this is really one of these things that I wish I had found sooner when I had a desperate need to generate a parser from an EBNF,

00:28:57.520 --> 00:29:01.600
because writing an EBNF is sometimes way easier than writing a parser.

00:29:01.600 --> 00:29:04.940
And yeah, now I have it.

00:29:04.940 --> 00:29:05.920
But now it's too late.

00:29:07.920 --> 00:29:17.240
For people who are listening, the EBNF, the grammar file, it looks a little bit like a YAML definition, a tiny bit, a little bit like a little bit of regex.

00:29:17.240 --> 00:29:22.040
But you basically specify the rules of the language and then you can take that and run with it, right?

00:29:22.040 --> 00:29:22.600
Yeah.

00:29:22.600 --> 00:29:29.040
In a way, you basically say you have an expression and that expression consists of this other components.

00:29:29.040 --> 00:29:31.540
And then these components are defined further down.

00:29:31.540 --> 00:29:36.660
And so you dig deeper and deeper into the syntax and build up the definition from that, basically.

00:29:36.660 --> 00:29:45.300
Like if you've ever seen one of these JSON grammar railroad diagrams, it also goes a bit like this, just in textual form.

00:29:45.300 --> 00:29:46.560
Yeah.

00:29:46.560 --> 00:29:48.400
Once I was teaching a class and it's...

00:29:48.400 --> 00:29:48.900
Go ahead, Brian.

00:29:48.900 --> 00:29:50.040
No, I just...

00:29:50.040 --> 00:29:53.880
I was getting PTSD from my language classes in college.

00:29:53.880 --> 00:29:54.560
Yeah.

00:29:54.560 --> 00:29:57.540
That's admittedly also where I learned about this stuff.

00:29:57.540 --> 00:29:59.320
But for some reason, I...

00:29:59.320 --> 00:29:59.460
Yeah.

00:29:59.460 --> 00:30:00.560
Back then it was horrible.

00:30:00.560 --> 00:30:01.840
Now I kind of like it.

00:30:01.840 --> 00:30:02.340
It's weird.

00:30:02.340 --> 00:30:03.960
Yeah.

00:30:03.960 --> 00:30:07.080
It just makes it so easy to well define something.

00:30:07.080 --> 00:30:07.420
Yeah.

00:30:07.420 --> 00:30:08.180
And no pressure.

00:30:08.180 --> 00:30:17.120
And now I see the advantages because it makes it so much easier to define structured text and stuff that you need to use in machine communication.

00:30:17.380 --> 00:30:26.860
So if I had had an EBNF or if I had had that like 10 years ago when I started an Octoprint, I would have written an EBNF for the...

00:30:26.860 --> 00:30:27.280
Yeah.

00:30:27.280 --> 00:30:33.960
Basically for the G-code stuff that runs between a printer and Octoprint to communicate over the serial interface.

00:30:33.960 --> 00:30:36.820
And then it would have been way easier to pass that the way it is now.

00:30:36.820 --> 00:30:38.640
I had to do all of this by hand.

00:30:38.640 --> 00:30:39.460
And yeah.

00:30:39.460 --> 00:30:43.340
But maybe I can rewrite it with this.

00:30:43.340 --> 00:30:43.940
We'll see.

00:30:43.940 --> 00:30:44.980
Yeah.

00:30:45.160 --> 00:30:52.260
It seems useful if you wanted to create a simple, higher level scripting language that controls your app.

00:30:52.260 --> 00:30:52.780
Right?

00:30:52.780 --> 00:31:06.820
If, say, you were writing code for scientists in a lab and those scientists were not developers, but you could say like, okay, you can enter a couple of simple expressions and it'll like move the robot around or it'll like upload the results or, you know, something like that.

00:31:06.820 --> 00:31:07.020
Right?

00:31:07.360 --> 00:31:08.760
You could probably build that with this.

00:31:08.760 --> 00:31:09.440
And that seems neat.

00:31:09.440 --> 00:31:13.360
And then the other thing that's noteworthy here is this is 3.10 or above.

00:31:13.360 --> 00:31:20.860
And I'm sure that's because it's the peg parsers match effectively the switch statement that's in Python 3.10.

00:31:20.860 --> 00:31:21.160
True, true.

00:31:21.160 --> 00:31:21.600
Right?

00:31:22.480 --> 00:31:39.800
Also, with regards to data science, I could also imagine this helps maybe with parsing weird data formats that you have in Textual that fall out of some legacy software that is running on some ancient sun cluster or something that is connected to your measuring devices.

00:31:40.060 --> 00:31:42.680
So I could imagine that could also help there.

00:31:42.680 --> 00:31:43.340
Good idea.

00:31:43.340 --> 00:31:43.780
Right.

00:31:43.780 --> 00:31:44.580
Is that it for our items?

00:31:44.580 --> 00:31:45.760
I think it is.

00:31:45.760 --> 00:31:47.480
Do you have anything extra?

00:31:47.480 --> 00:31:48.100
All right.

00:31:48.100 --> 00:31:49.080
Of course.

00:31:49.080 --> 00:31:51.220
Of course, I've got some extras.

00:31:51.220 --> 00:31:51.800
Let's see.

00:31:51.800 --> 00:31:52.080
Me too.

00:31:52.080 --> 00:31:52.880
Let me pull up something real quick.

00:31:52.880 --> 00:31:53.380
All right.

00:31:53.380 --> 00:31:54.660
I know.

00:31:54.660 --> 00:31:55.080
Fantastic.

00:31:55.080 --> 00:31:55.540
All right.

00:31:55.540 --> 00:31:57.260
I'll throw mine out.

00:31:57.260 --> 00:31:58.260
So not here.

00:31:58.260 --> 00:32:02.040
In a recent episode, we covered, where was it?

00:32:02.040 --> 00:32:04.020
It was the PEP 690.

00:32:04.020 --> 00:32:05.080
Oh, okay.

00:32:05.080 --> 00:32:06.120
285.

00:32:06.120 --> 00:32:06.740
Thank you.

00:32:06.740 --> 00:32:07.440
Yes, that's it.

00:32:07.780 --> 00:32:12.800
So we talked about PEP 690 and Lazy Imports, and this was recommended by Itamar.

00:32:12.800 --> 00:32:16.620
This comes out of the Cinder project and other things.

00:32:16.620 --> 00:32:23.620
Since then, I've had Barry Warsaw, Armand Bravo, and Carl Meyer on Talk Python to discuss this, which was fun.

00:32:23.620 --> 00:32:26.800
And they've also written this up as a formal blog post.

00:32:26.800 --> 00:32:29.280
So people were interested in that, and they wanted to just go dive in.

00:32:29.280 --> 00:32:33.120
I just want to point out that that's a pretty intense dependency graph right there.

00:32:33.120 --> 00:32:36.820
It's this black cloud of dots all connected and stuff.

00:32:36.880 --> 00:32:41.160
So there's some really interesting things from Instagram's use of this and whatnot.

00:32:41.160 --> 00:32:41.800
Very neat.

00:32:41.800 --> 00:32:42.640
People can check that out.

00:32:42.640 --> 00:32:49.440
There was an expedited release of Python 3.11 Beta 3 because of an incompatibility with pytest.

00:32:49.440 --> 00:32:50.480
Brian, can you imagine?

00:32:50.480 --> 00:32:51.460
Yeah.

00:32:51.460 --> 00:32:53.920
It was fun.

00:32:53.920 --> 00:32:55.040
I do know about this.

00:32:55.040 --> 00:32:55.540
Yeah.

00:32:55.540 --> 00:32:56.020
So I do.

00:32:56.020 --> 00:32:57.440
I found it amusing.

00:32:57.440 --> 00:33:02.560
In one of the announcements, it said, apparently, pytest is well used.

00:33:02.560 --> 00:33:05.800
No, can't be.

00:33:05.800 --> 00:33:08.000
No way.

00:33:08.000 --> 00:33:11.280
I think it was a joke, but it made me laugh.

00:33:11.280 --> 00:33:11.720
Yeah.

00:33:11.720 --> 00:33:12.220
Yeah.

00:33:12.220 --> 00:33:13.700
But the fix was no joke.

00:33:13.700 --> 00:33:16.060
So there's a quick fix that rolled out for people if they want to check that out.

00:33:16.060 --> 00:33:23.980
And then last thing, I kind of threw out a teaser for this episode saying, I just did something completely silly and weird.

00:33:23.980 --> 00:33:25.500
And I think I might like it.

00:33:25.500 --> 00:33:25.900
I'm not sure.

00:33:25.900 --> 00:33:28.720
So for a long, long time, I've used DuckDuckGo.

00:33:28.720 --> 00:33:29.360
Right.

00:33:29.660 --> 00:33:32.080
And I really think that DuckDuckGo is fantastic.

00:33:32.080 --> 00:33:33.900
And I may just keep using that.

00:33:33.900 --> 00:33:36.640
But let me give a little credit here.

00:33:36.640 --> 00:33:49.440
Daniel Herthom sent us a message and said, you know, this isn't really Python related, but if I know Michael, I bet he will love this ad-free privacy-respecting search engine called Kagi.com.

00:33:49.440 --> 00:33:50.680
Have either of you heard of Kagi?

00:33:50.680 --> 00:33:51.560
I had not.

00:33:51.560 --> 00:33:52.000
Never.

00:33:52.000 --> 00:33:53.760
No.

00:33:53.760 --> 00:33:55.520
And so it's pretty interesting.

00:33:56.140 --> 00:33:59.080
I went and I listened to or read.

00:33:59.080 --> 00:34:00.120
I listened with my eyes.

00:34:00.120 --> 00:34:01.800
I listened to this interview.

00:34:01.800 --> 00:34:02.920
Watched this interview.

00:34:02.920 --> 00:34:05.020
There's an audio version, so I keep stumbling on that.

00:34:05.020 --> 00:34:10.640
But Vladimir Perlovak is the founder of Kagi.

00:34:10.640 --> 00:34:12.900
It was founded in just March.

00:34:12.900 --> 00:34:13.960
So it's really brand new.

00:34:13.960 --> 00:34:16.840
Talks a lot about the motivation for creating the search engine.

00:34:16.840 --> 00:34:25.020
And basically, he says, I think the ad tech, which I think maybe should be called more like surveillance capitalism or something like a little more serious.

00:34:25.120 --> 00:34:27.700
But ad tech, putting all these ads and tracking in front of my kids.

00:34:27.700 --> 00:34:33.180
I don't want my kids to grow up thinking that just like being completely tracked and having zero privacy is like the way of the world.

00:34:33.180 --> 00:34:36.240
So there's a pretty interesting conversation here on what they built.

00:34:36.240 --> 00:34:40.360
But the idea is it's a search engine that is a premium search engine.

00:34:40.360 --> 00:34:42.460
So instead of having ads, users have to pay for it.

00:34:42.460 --> 00:34:44.400
So I'm going to do an experiment for us, Brian.

00:34:44.400 --> 00:34:47.540
I'm going to live with this for a month, and then I'll give you a report on what I think.

00:34:47.540 --> 00:34:48.680
I think that'd be great.

00:34:48.680 --> 00:34:49.180
Yeah.

00:34:49.380 --> 00:34:49.780
Yeah.

00:34:49.780 --> 00:34:51.440
So check this out, for example.

00:34:51.440 --> 00:34:54.680
Pep690 lazy imports.

00:34:54.680 --> 00:34:56.360
What happens if we put that up there?

00:34:56.360 --> 00:34:59.920
So comes up with the peps page.

00:34:59.920 --> 00:35:00.900
And check that out.

00:35:00.900 --> 00:35:01.320
Number three.

00:35:01.320 --> 00:35:06.120
And then probably somewhere a little farther down, since it's not in the title, is Python bytes, I would suspect.

00:35:06.120 --> 00:35:08.700
But like these results are pretty interesting.

00:35:08.700 --> 00:35:09.440
But check this out.

00:35:09.440 --> 00:35:12.400
So I can come over here and I can hover over next to one of these.

00:35:12.440 --> 00:35:14.620
And it says, oh, this is on this page.

00:35:14.620 --> 00:35:17.400
This one doesn't have that much information about it.

00:35:17.400 --> 00:35:18.100
Some of them.

00:35:18.100 --> 00:35:19.040
Let's see.

00:35:19.040 --> 00:35:20.220
Maybe this one should have it.

00:35:20.220 --> 00:35:23.220
So before you even visit it, it'll say there's four trackers.

00:35:23.220 --> 00:35:24.560
It's this ranked by traffic.

00:35:24.560 --> 00:35:25.540
It'll use HTTPS.

00:35:25.540 --> 00:35:26.500
It's fast or not.

00:35:26.500 --> 00:35:28.080
It lands in this category.

00:35:28.080 --> 00:35:30.100
And you can upvote and downvote things.

00:35:30.100 --> 00:35:32.240
You can push things up and down.

00:35:32.240 --> 00:35:33.620
That is a power feature.

00:35:33.620 --> 00:35:35.180
For example, isn't that cool?

00:35:35.180 --> 00:35:36.280
You can say W3 schools.

00:35:36.280 --> 00:35:37.520
I never, ever want you to show up ever, ever again.

00:35:37.520 --> 00:35:37.800
Exactly.

00:35:37.800 --> 00:35:38.780
That was my thought.

00:35:38.780 --> 00:35:40.040
Yes.

00:35:40.040 --> 00:35:41.000
It's so horrible.

00:35:41.860 --> 00:35:45.920
They're so good at SEO and they're so bad at writing meaningful, helpful stuff.

00:35:45.920 --> 00:35:50.620
So you could just, when I got my first W3C result, schools result, I just did block that.

00:35:50.620 --> 00:35:56.120
And so you can, for example, go to like the docs on python.org and say, you know what?

00:35:56.120 --> 00:35:59.620
That one's higher for me because if I search for Python stuff, I'd kind of want to get the

00:35:59.620 --> 00:36:00.720
official discussion.

00:36:00.720 --> 00:36:01.200
Yeah.

00:36:01.200 --> 00:36:03.880
The other thing you can do is cool is you can have these lenses.

00:36:03.880 --> 00:36:06.660
So you're saying, I'm only interested in programming stuff right now.

00:36:06.660 --> 00:36:10.420
So it takes you to like GitHub and stuff like that.

00:36:10.420 --> 00:36:11.220
And then you say, you know what?

00:36:11.220 --> 00:36:14.340
I'm just actually, what I want is just more results.

00:36:14.340 --> 00:36:16.260
Just basically search GitHub for all of this.

00:36:16.260 --> 00:36:21.240
And the final thought here that's cool is it deranks.

00:36:21.240 --> 00:36:23.500
So, you know, I showed you like different sites.

00:36:23.500 --> 00:36:27.120
So here, let's put, let's put something embarrassing for a company that needs to be embarrassed.

00:36:27.120 --> 00:36:27.460
CNN.

00:36:27.460 --> 00:36:29.260
So if you hover over this, how many block?

00:36:29.260 --> 00:36:31.660
There's 43 ad detectors on this thing.

00:36:31.660 --> 00:36:32.520
43.

00:36:32.520 --> 00:36:33.340
43.

00:36:33.340 --> 00:36:33.780
43.

00:36:33.780 --> 00:36:35.060
Here's what they do.

00:36:35.060 --> 00:36:42.300
They are down ranking and down voting, like lowering the SEO rank of things that have tons

00:36:42.300 --> 00:36:45.040
of ad trackers and things like that.

00:36:45.120 --> 00:36:49.260
So if you, if you're overwhelmed like this, where it's orange or red, like that's a, that lowers your rank.

00:36:49.260 --> 00:36:53.660
So it's like an anti ad tracker result surfacer.

00:36:53.660 --> 00:36:55.900
Anyway, what do you all think?

00:36:56.460 --> 00:36:59.300
I'm tempted, but I'll let you test it first.

00:36:59.300 --> 00:37:00.820
Yeah.

00:37:00.820 --> 00:37:03.180
Give me a month.

00:37:03.180 --> 00:37:04.700
I didn't think I was going to like it that much.

00:37:04.700 --> 00:37:06.460
It's, it's pretty nice.

00:37:06.460 --> 00:37:09.340
So I paid 10, it's $10 a month, which seems a little high.

00:37:09.340 --> 00:37:15.800
I think they are getting their results by buying API access to Google and Bing and then resurfacing

00:37:15.800 --> 00:37:16.940
those results to you.

00:37:17.580 --> 00:37:20.660
in, in this privacy respecting way.

00:37:20.660 --> 00:37:21.080
Yeah.

00:37:21.080 --> 00:37:23.560
Actually, I kind of think it's brilliant.

00:37:23.560 --> 00:37:28.200
And I want to try it too, because at first I was like, I don't want to pay for a search,

00:37:28.200 --> 00:37:35.600
but I, you know, I know I try to tell my kids, if you're not, if you're not the cuss, if you're

00:37:35.600 --> 00:37:37.820
not paying for it, then you're not the customer or the product.

00:37:37.820 --> 00:37:40.180
so yes, absolutely.

00:37:40.180 --> 00:37:40.840
Absolutely.

00:37:40.840 --> 00:37:46.460
And, and even if it wasn't for that, that the customization options are just like amazing.

00:37:46.460 --> 00:37:47.980
Like, I don't know.

00:37:47.980 --> 00:37:48.180
Yeah.

00:37:48.180 --> 00:37:51.500
The fact that you can say, I prefer more of this site, less of that site.

00:37:51.500 --> 00:37:51.780
Yeah.

00:37:51.780 --> 00:37:53.180
It's, it is pretty neat.

00:37:53.180 --> 00:37:58.080
So, I really, I really appreciate that Daniel sent this in and I'm going to live with

00:37:58.080 --> 00:38:01.260
it for a month and I will let you know, but the maps doesn't work very well.

00:38:01.260 --> 00:38:04.260
They don't work very well, but you know, you can always just go to somewhere else.

00:38:04.260 --> 00:38:05.080
A final thought.

00:38:05.080 --> 00:38:10.420
The whole reason I switched to Vivaldi over Firefox is I didn't want to bring other things

00:38:10.420 --> 00:38:14.180
like ad block and you have ad blocking tracker blocking and stuff there, but then you have

00:38:14.180 --> 00:38:14.860
to get extensions.

00:38:14.860 --> 00:38:18.140
And then those extensions send their data back.

00:38:18.140 --> 00:38:22.640
And then sometimes they'll like, well, these ads paid to be let through our ad blocker.

00:38:22.640 --> 00:38:24.540
And there's just like still kind of a tracking level.

00:38:24.540 --> 00:38:31.580
So with, with Vivaldi, you know, you get like total blocking without third party things.

00:38:31.580 --> 00:38:35.340
So with this, you kind of get a search engine that is like a good, good match to that.

00:38:35.340 --> 00:38:37.480
So anyway, I think it's, I think it's cool.

00:38:37.480 --> 00:38:39.960
And, anyway, I just wanted to give it a quick shout out here.

00:38:39.960 --> 00:38:40.760
Cause it seems fun.

00:38:40.760 --> 00:38:42.920
funny thing.

00:38:42.920 --> 00:38:43.860
I think that's it for everything.

00:38:43.860 --> 00:38:44.440
Okay.

00:38:44.440 --> 00:38:45.000
Funny thing.

00:38:45.000 --> 00:38:53.340
I, in this, the chat, eco V or Eki, Eki Voo, says I use a, I use a custom Firefox

00:38:53.340 --> 00:38:56.400
extension to block W3 schools.

00:38:56.400 --> 00:38:57.380
That's interesting.

00:38:57.380 --> 00:38:59.080
I didn't know that existed, but.

00:38:59.560 --> 00:38:59.740
Yes.

00:38:59.740 --> 00:39:00.840
I installed that as well.

00:39:00.840 --> 00:39:05.120
And I, Eki Voo, that is an absolutely worthwhile thing to do.

00:39:05.120 --> 00:39:06.040
I totally agree.

00:39:06.040 --> 00:39:07.000
So I'm with you.

00:39:07.000 --> 00:39:07.860
I used to use that as well.

00:39:07.860 --> 00:39:12.020
I also use something that like, I'm, it was, it was called, I'm okay with cookies and it

00:39:12.020 --> 00:39:16.240
would automatically accept all cookie disclaimers, you know, the cookie warnings.

00:39:16.240 --> 00:39:17.420
It would just say, okay.

00:39:17.420 --> 00:39:18.840
And there's, I saw almost none of them.

00:39:18.840 --> 00:39:20.400
And then I just blocked them on my network.

00:39:20.400 --> 00:39:21.980
So it doesn't matter if I accept them or not.

00:39:21.980 --> 00:39:25.640
well let's jump to Gina's extra stuff.

00:39:25.640 --> 00:39:27.360
It's only some small stuff.

00:39:27.660 --> 00:39:32.420
So one thing, can you share my, thank you.

00:39:32.420 --> 00:39:37.580
so one thing is something that, I mentioned before that I went through a lot of pain to automate

00:39:37.580 --> 00:39:42.160
a bunch of stuff about the testing and Octoprint, which involves some raspberry pi cluster here

00:39:42.160 --> 00:39:46.840
that I can flash via, a Python tool and stuff like this.

00:39:46.840 --> 00:39:52.780
And I also needed voltage monitoring for this raspberry pi cluster, because I don't know how

00:39:52.780 --> 00:39:57.640
familiar you are, you are with raspberry pies, but they can be a bit, let's say,

00:39:57.640 --> 00:40:01.120
uh, selective about what power supplies they like.

00:40:01.120 --> 00:40:05.060
And, they start browning out, easily and stuff.

00:40:05.060 --> 00:40:06.760
So power monitoring is very helpful.

00:40:06.760 --> 00:40:15.380
And there are these cheapish 30, 40 bucks, USB, power and voltage monitoring dongles

00:40:15.380 --> 00:40:20.600
that you can just plug, between two USB cables, and then it will measure everything.

00:40:20.600 --> 00:40:22.160
And they also come with Bluetooth.

00:40:22.160 --> 00:40:28.300
And I found a tool that can, lock the data from this Bluetooth interface, via

00:40:28.300 --> 00:40:28.900
PI BlueZ.

00:40:28.900 --> 00:40:36.240
It's, it's written in Python from these UM24C, UM25C or UM34C dongles in order to, to allow

00:40:36.240 --> 00:40:41.400
you to track the voltage and power over a course of, yeah, whatever.

00:40:41.520 --> 00:40:46.840
So I have to set up, lock this out, throw that into an influx DB, throw it up on a Grapana

00:40:46.840 --> 00:40:48.940
dashboard and get warnings when something underpowers.

00:40:48.940 --> 00:40:54.940
And that is great for sleeping, about the test cluster situation.

00:40:54.940 --> 00:40:59.400
And the other thing is something that reached me actually just last night in the shape of

00:40:59.400 --> 00:40:59.920
a tweet.

00:40:59.920 --> 00:41:06.040
And that is that there is now another node JS PI PI distribution that you can just depend

00:41:06.040 --> 00:41:12.160
your, Python apps on that will then pull in for you a complete node JS distribution

00:41:12.160 --> 00:41:14.840
with NPM with node and with NPX.

00:41:14.840 --> 00:41:20.900
So if you have like me, for example, if you happen to build a web server that also ships with

00:41:20.900 --> 00:41:27.040
a web UI built in, then now you have a way to ensure that, everything that you need

00:41:27.040 --> 00:41:32.480
in order to build that web UI is also there and can also maybe make this part of a build

00:41:32.480 --> 00:41:36.720
process that you build into your, set up PI or something like this as well.

00:41:36.720 --> 00:41:40.040
So that was a really nice thing to discover.

00:41:40.040 --> 00:41:45.560
I still considered alpha, but I tried it briefly this morning and, really great.

00:41:45.560 --> 00:41:46.620
That's cool.

00:41:46.620 --> 00:41:47.680
That's really cool.

00:41:47.680 --> 00:41:48.620
That is fantastic.

00:41:48.620 --> 00:41:49.080
Yeah.

00:41:49.080 --> 00:41:50.040
That's super interesting.

00:41:50.040 --> 00:41:56.760
you could pair that with PI script and have it do a little electron thing and then

00:41:56.760 --> 00:42:00.740
just run that run Python, write Python for your little web app that runs on the front

00:42:00.740 --> 00:42:00.980
end.

00:42:01.260 --> 00:42:01.500
Yeah.

00:42:01.500 --> 00:42:07.280
Or if you do something like, so for example, I still use Cypress JS for end to end testing

00:42:07.280 --> 00:42:12.140
in Octoprint, which means that, I now need a node JS environment and a Python environment

00:42:12.140 --> 00:42:14.740
in order to have all developer dependencies together.

00:42:14.740 --> 00:42:19.740
This would solve this problem because then I could just make this part.

00:42:19.740 --> 00:42:22.460
Maybe I could even fire it up as part of the PI test suite.

00:42:22.460 --> 00:42:24.980
I don't know, but, would be interesting.

00:42:24.980 --> 00:42:26.360
Certainly to test that out.

00:42:26.360 --> 00:42:26.960
Definitely.

00:42:26.960 --> 00:42:27.720
Very cool.

00:42:27.720 --> 00:42:30.340
Brian, it sounds like a PI test fixture needs to be put in place.

00:42:30.500 --> 00:42:34.520
If you want to do the, if you want to do that, that would be great.

00:42:34.520 --> 00:42:39.500
I'll put it on my to-do list right after 3d printing.

00:42:39.500 --> 00:42:40.600
yeah.

00:42:40.600 --> 00:42:41.980
I, I know the problem.

00:42:42.900 --> 00:42:47.480
we're kind of, since I'm running, we're running a little long, I'm going to skip

00:42:47.480 --> 00:42:49.480
my extras till next week.

00:42:49.480 --> 00:42:52.120
so let's, maybe jump to something funny.

00:42:52.120 --> 00:42:53.460
Nathan Ashberger.

00:42:54.100 --> 00:42:54.940
It's a tweet.

00:42:54.940 --> 00:43:00.100
and it's like, you pretend you're getting a call and, and the, and the phone says, Hey,

00:43:00.100 --> 00:43:01.280
I'm from somewhere.

00:43:01.280 --> 00:43:04.160
we built the first AI driven sales platform.

00:43:04.160 --> 00:43:06.580
And I wanted to talk to you about your sales needs.

00:43:06.580 --> 00:43:09.540
he says, wait, are you an AI?

00:43:09.940 --> 00:43:13.680
no, well, we can both appreciate the irony here, right?

00:43:13.680 --> 00:43:19.700
So I don't know if this was real or not, but it just made me laugh.

00:43:19.700 --> 00:43:20.520
That was funny.

00:43:20.520 --> 00:43:21.800
So I love it.

00:43:21.800 --> 00:43:22.100
Yeah.

00:43:22.100 --> 00:43:25.060
Shouldn't they be having their AI call you with their AI platform?

00:43:25.060 --> 00:43:25.720
It's subtle.

00:43:26.840 --> 00:43:27.240
Yeah.

00:43:27.240 --> 00:43:27.580
Okay.

00:43:27.580 --> 00:43:28.380
So let's go.

00:43:28.380 --> 00:43:29.300
Maybe yours is funnier.

00:43:29.300 --> 00:43:30.260
Let's go to yours, Michael.

00:43:30.260 --> 00:43:34.740
my, well, mine is as a, it's a collection of jokes.

00:43:34.740 --> 00:43:39.640
So maybe one of them will be this, this comes to us from Brian's skin, who, as I said, has

00:43:39.640 --> 00:43:40.480
been on the show before.

00:43:40.480 --> 00:43:41.140
Thank you, Brian.

00:43:41.140 --> 00:43:46.320
And these are, you know how, like you've got the Mars Rover badge and you've got the Arctic

00:43:46.320 --> 00:43:48.160
vault badges on GitHub.

00:43:48.160 --> 00:43:50.620
These are ones that were considered and potentially rejected.

00:43:50.620 --> 00:43:50.980
Okay.

00:43:50.980 --> 00:43:51.580
Okay.

00:43:51.580 --> 00:43:52.940
So let's see what's over here.

00:43:52.940 --> 00:43:55.080
These are, they were considered.

00:43:55.080 --> 00:43:56.460
I feel like David Letterman.

00:43:56.760 --> 00:43:59.640
With his, his like, ad stuff.

00:43:59.640 --> 00:43:59.860
Okay.

00:43:59.860 --> 00:44:05.040
So one of them is the vital contributor over 100 issue comments consisting of just plus

00:44:05.040 --> 00:44:06.680
ones or thumbs up emoji.

00:44:06.680 --> 00:44:12.220
There's the Sith Lord who wiped out someone else's commit by force pushing to the main branch.

00:44:12.220 --> 00:44:13.560
You could have that badge.

00:44:13.560 --> 00:44:14.420
I have that.

00:44:14.420 --> 00:44:15.360
The procrastinator.

00:44:15.360 --> 00:44:16.900
Do you heard?

00:44:16.900 --> 00:44:19.700
You could be the procrastinator.

00:44:19.700 --> 00:44:23.900
Create a repository with a single init commit with just the readme.md and never touch it for

00:44:23.900 --> 00:44:24.500
five years.

00:44:26.680 --> 00:44:32.520
My personal favorite is the secret Santa accidentally commit a secret API key to a public repository.

00:44:32.520 --> 00:44:34.280
That's good.

00:44:34.280 --> 00:44:35.660
We have the monkey rich.

00:44:35.660 --> 00:44:36.200
Yeah.

00:44:36.200 --> 00:44:40.420
The monkey rich is, makes a commit directly to the main branch that breaks the build.

00:44:40.420 --> 00:44:42.300
this is fine.

00:44:42.300 --> 00:44:44.360
It has a dog in a room that's full of fire.

00:44:44.360 --> 00:44:47.260
We've all seen this, main meme in some form or other.

00:44:47.260 --> 00:44:48.720
I'm sure this is fine.

00:44:48.720 --> 00:44:52.560
Over 1000 open issues on a public repository that you own.

00:44:52.560 --> 00:44:53.160
Ouch.

00:44:53.160 --> 00:44:57.700
Fine.

00:44:57.700 --> 00:44:58.820
Let's wrap it up with the last one.

00:44:58.820 --> 00:44:59.700
Works on my machine.

00:44:59.700 --> 00:45:04.280
The works on my machine certification suggests user error in at least 10 issue threads without

00:45:04.280 --> 00:45:06.700
attempting to reproduce in user runtime environments.

00:45:06.700 --> 00:45:08.020
All right.

00:45:08.020 --> 00:45:08.640
These are pretty good.

00:45:08.640 --> 00:45:11.940
That would be hard to automatically detect though, right?

00:45:11.940 --> 00:45:13.040
It would.

00:45:13.040 --> 00:45:13.580
Yeah.

00:45:13.680 --> 00:45:15.660
Some of these you got to self-assign, I think.

00:45:15.660 --> 00:45:15.920
Yeah.

00:45:15.920 --> 00:45:16.380
Yeah.

00:45:16.380 --> 00:45:16.640
Yeah.

00:45:16.640 --> 00:45:17.480
Yeah.

00:45:17.480 --> 00:45:22.360
But yeah, I don't know if you saw that the GitHub recently actually rolled out more achievements

00:45:22.360 --> 00:45:23.700
that you can now try to hunt.

00:45:23.700 --> 00:45:30.480
So it's not anymore just the Arctic stuff, but there's now stuff like Merch Shark and PR Shark,

00:45:30.480 --> 00:45:31.740
I think they called it.

00:45:31.840 --> 00:45:34.140
And so there are several, they are hidden.

00:45:34.140 --> 00:45:35.260
You have to figure out.

00:45:35.260 --> 00:45:35.640
Yeah.

00:45:35.640 --> 00:45:35.820
Yeah.

00:45:35.820 --> 00:45:35.900
Yeah.

00:45:35.900 --> 00:45:41.680
They, I think last Thursday or so they rolled it out, which was also when, this, this,

00:45:41.680 --> 00:45:44.740
uh, repo, I think popped up or at least popped up.

00:45:44.740 --> 00:45:49.960
I also, it also went past me on my Twitter feed and, I immediately shared it around with

00:45:49.960 --> 00:45:52.300
people because yeah, it's, it's, it's good.

00:45:52.300 --> 00:45:52.840
It's cute.

00:45:52.840 --> 00:45:55.200
It's kind of sad that some of them didn't make the cut.

00:45:55.200 --> 00:45:56.560
Didn't make the cut.

00:45:56.560 --> 00:45:57.540
I think so for sure.

00:45:57.540 --> 00:45:57.960
Yeah.

00:45:57.960 --> 00:45:58.840
This is fine.

00:45:58.840 --> 00:46:00.280
People definitely, definitely need that.

00:46:00.280 --> 00:46:00.880
This is fine.

00:46:00.880 --> 00:46:01.300
Absolutely.

00:46:01.780 --> 00:46:02.700
Yeah.

00:46:02.700 --> 00:46:03.520
All right, Brian.

00:46:03.520 --> 00:46:04.740
So is that it for us?

00:46:04.740 --> 00:46:05.800
I think it is.

00:46:05.800 --> 00:46:06.880
It was a fun episode.

00:46:06.880 --> 00:46:07.820
Thank you, Michael.

00:46:07.820 --> 00:46:08.360
Thank you, Gina.

00:46:08.360 --> 00:46:08.700
Absolutely.

00:46:08.700 --> 00:46:09.440
Thank you.

00:46:09.440 --> 00:46:09.880
Yep.

00:46:09.880 --> 00:46:10.600
Bye everyone.

00:46:10.600 --> 00:46:11.700
Thanks for being here, Gina.

00:46:11.700 --> 00:46:12.860
Thank you for having me.

