00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 391, recorded July 9, 2024.

00:00:10 And I am Brian Ock.

00:00:11 And I am Michael Kennedy.

00:00:13 This episode is sponsored by Code Comments, an original podcast from Red Hat.

00:00:18 Listen to their segment later in the show.

00:00:20 You can connect with us on Mastodon, of course.

00:00:24 The links are in the show notes.

00:00:25 We're all on Fosstodon, but you can get to us from any Mastodon.

00:00:29 You can also join us if you're listening to it later.

00:00:33 You can join us live by going to pythonbytes.fm/live, be a part of the audience.

00:00:40 Or if you just want to see the show later, it's all there.

00:00:44 It's usually 10 a.m. Pacific time on Tuesdays, but sometimes it changes.

00:00:50 But if you go to that live thing, it'll tell you when the next one is.

00:00:53 And finally, I'd really like to thank a lot of the people that have subscribed to the mailing list, the newsletter.

00:01:00 If you go to our pythonbytes.fm, there's a newsletter link.

00:01:04 And we'll send you all of the links of the stuff we cover every week.

00:01:08 And we'll just send it to your inbox.

00:01:10 So even if you miss an episode, you won't miss any of the goodness.

00:01:13 So speaking of goodness, what do you got for us, Michael?

00:01:16 Well, you know how we all love PyPI and the ability to go and just pip install a thing and make it, make our apps be so much more.

00:01:27 Right.

00:01:27 Programming in Python becomes like Lego block clicking together, not algorithm class.

00:01:31 Yeah.

00:01:32 You know what I mean?

00:01:33 Which is amazing.

00:01:34 It's amazing.

00:01:34 However, there are issues that you run into if you use third party packages.

00:01:39 Not the least of which is you now probably should have a virtual environment.

00:01:43 You definitely require some pip install commands.

00:01:46 Just stuff all along those lines, right?

00:01:49 Just the management of setup before you can even run your app.

00:01:52 Plus then any potential changes.

00:01:55 If people don't pin their versions, then you're at the whims of what potentially can happen there.

00:02:00 So what some people do is something called vendoring or vendorizing dependencies.

00:02:06 So for example, if I depend on some functionality from requests, I don't know if that's a super good example, but let's say it is.

00:02:13 I could just download the source code of requests, stick it into my code and use it.

00:02:18 It's not probably not a great example because it itself has a bunch of dependencies, but stuff that's kind of like pure Python, no other dependencies.

00:02:24 You could have it as a third party package, or you could just stick the code of that somewhere to your app and refer to it as a relative import within your app.

00:02:32 Right.

00:02:33 Yeah.

00:02:33 Then people just pip install your package, pip x install your package, or even just get a script and run it or a set of scripts.

00:02:39 So there's this project from M Williamson called Python vendorize that I want to talk about.

00:02:47 So it'll vendorize packages from PyPI, as I just described, right?

00:02:52 So it allows you pure Python dependencies to be vendorized.

00:02:55 That is, it'll copy that into your project best use for small pure Python dependencies to avoid version conflicts with other packages, require different versions and so on.

00:03:05 So what you do is you set up a vendorize.toml file and in there, you basically set up, what is your module where, what sub section of your module do you want it to go into what sub module and then what.

00:03:20 PyPI packages you want.

00:03:21 So example here is like a hello package.

00:03:23 So they create a dunder, just not an underscore vendor folder.

00:03:28 And then they say the packages are six.

00:03:30 And once you run it, it'll create that underscore vendor folder and it'll put the six dist info, the dunder and nit pie, the six up high, all the stuff it needs to basically have that there.

00:03:42 So then in your app, you can say from dot underscore vendor import six rather than having an external dependency.

00:03:49 What do you think?

00:03:49 kind of neat.

00:03:51 How do you keep up?

00:03:52 Yeah, I've got questions.

00:03:54 Like how do you keep up with, updates and things like that?

00:03:57 Well, I believe that you just run a command line.

00:04:01 right.

00:04:02 Just run Python vendor eyes in the directory and I don't know if it'll read download it, but it will create it.

00:04:08 So, you know, worst case, delete the folder, run it again.

00:04:10 Yeah.

00:04:11 Yeah.

00:04:11 And then that'll update it.

00:04:12 So the whole point of this is like, you want less change than normal.

00:04:15 Yeah.

00:04:16 You want to like kind of freeze it in a place and things like six that don't really change.

00:04:20 I mean, or have gotten kicked out of the.

00:04:22 standard library.

00:04:23 Yeah, exactly.

00:04:24 Yeah, exactly.

00:04:25 A lot of stuff that's really super stable.

00:04:27 and pretty small, right?

00:04:29 You don't want to, because if, if you do something that's got a bunch of dependencies, you've then got to start doing their dependencies and then it gets really wonky.

00:04:36 Right?

00:04:36 Yeah.

00:04:37 Yeah.

00:04:37 For small things.

00:04:38 Yeah, actually.

00:04:39 it's pretty cool.

00:04:40 yeah.

00:04:41 Neat.

00:04:41 Neat.

00:04:41 Well, that's what I got for you.

00:04:43 The first one, I got a bunch of other stuff, as you can see.

00:04:45 No, I, I like it.

00:04:47 there's, there's projects that I've, open source that it really wasn't intended for somebody to actually use as a dependency.

00:04:54 It's like an exam, some example code that happens to be pip installable, but, but somebody would probably take it and just copy it and run from there and using something like vendorize would work.

00:05:06 Yeah, for sure.

00:05:07 Cool.

00:05:07 I would like to talk about something not as strong as this, but weaker.

00:05:13 some weak, so weak, so some weak references.

00:05:17 so this is a, article from Martin Heinz, a guide to Python's weak references using weak ref modules.

00:05:26 So weak ref is a, built in standard library module.

00:05:29 And, I actually have never played with it.

00:05:33 And I kind of knew that Python must have weak references, but I just didn't really explore it before now.

00:05:39 And this is a great introduction to just talk about what they are.

00:05:42 So if, I mean, we, the, the term weak reference might be new to somebody that's, that's like, I don't know, maybe new to you.

00:05:50 it's a, it's a term that we talk about in, in like C++ and other things a lot, because of the, using, and I use it a lot in C++, but, using strong references and weak references.

00:06:02 Python also has strong references and weak references.

00:06:05 A strong reference is just sort of a copy of something.

00:06:08 but a weak references is a way to point to something else, but not, not muck up the garbage collection.

00:06:14 So this is a great article.

00:06:16 It talks about, starts out with, talking about, sorry, starts out talking about garbage, dark garbage collection and how, how weak references are used with garbage, how garbage collection and weak references and strong references affect that.

00:06:32 So why do we care?

00:06:33 Well, it is used in things like log, the logging module for instance.

00:06:39 so you have named, this is a cool example cause you have, you have named, logging modules.

00:06:44 oh, where was it?

00:06:45 This is an example.

00:06:46 Anyway, some named modules that, you, you, you named a logging module or a named logger.

00:06:55 Sorry.

00:06:55 it's been a rough weekend.

00:06:57 And, and then like, if you want another one of the same name, it might be there.

00:07:02 It might not.

00:07:03 So it's a caching sort of thing that how logging uses it, but there's also ways to use it as a, like for trees.

00:07:09 If you're building a data structure, where you might want, bi-directional, links between objects.

00:07:16 one of the objects, it shouldn't be really hard links in both directions.

00:07:20 So one of those links should be, a weak reference, like the, the, the link between a parent and a child and a tree, structure would be good like that.

00:07:30 Or other things like he talks about, he talked about using an observer, building an observer pattern from the design pattern book, using weak references, just some really cool stuff.

00:07:42 I don't know.

00:07:42 I don't build a lot of data structures.

00:07:44 Like there's enough data structures in Python already.

00:07:46 But if, especially if you're in a, in a CS class or you have, some special needs for data structure, weak references are built in and they might help you a lot.

00:07:57 So.

00:07:58 Yeah.

00:07:58 And they're pretty interesting.

00:07:59 The only chance, only time I've really played with them is for the Python memory course that I created at talk Python to like understand.

00:08:05 Cause you want to look at stuff and see, we did this, it's alive.

00:08:08 We did this.

00:08:09 Now it's garbage collected or now it's reference count deleted.

00:08:12 but if you have a, a pointer to it, then obviously it's never going away.

00:08:17 So weak references allow you to ask questions like that.

00:08:20 Like, I think you can do interesting stuff with caching too.

00:08:22 For example, like if you've got a cache and you've handed out an instance of the object and it's still alive and people are still using it, the parts of the app are still using it.

00:08:31 You can have a weak reference to it.

00:08:33 And if someone else asks for you, like you can upgrade the weak reference to a strong reference, right.

00:08:37 And hand that out again without recreating it.

00:08:39 But if no one's using it, it'll get cleaned up because a weak reference won't keep it around.

00:08:43 So it's like sort of a self-managing cache type of structure could be fun to make too.

00:08:48 Yeah.

00:08:48 But that said, I was thinking just like you, I don't usually make data structures these days.

00:08:53 Python's pretty much got something for you.

00:08:55 Right.

00:08:55 But, you know, people are building, well, there's some third-party library data structures I use too.

00:09:01 And they probably use weak references.

00:09:02 And I just haven't poked into there to find out.

00:09:05 Yeah, exactly.

00:09:05 Let someone else do cool stuff with it for us.

00:09:08 But I love the idea of the, like the logging module that uses named items, doing something like a cache named item thing.

00:09:17 Yeah.

00:09:18 Very cool.

00:09:19 Do you know what else is cool?

00:09:20 Code comments from Red Hat.

00:09:22 Yeah.

00:09:23 This episode is brought to you by Code Comments, an original podcast from Red Hat.

00:09:27 You know, when you're working on a project and you leave behind a small comment in the code, maybe you're hoping to help others learn what isn't clear at first.

00:09:35 Sometimes that code comment tells a story of a challenging journey to the current state of the project.

00:09:41 Code Comments, the podcast, features technologists who've been through tough tech transitions and they share how their teams survived that journey.

00:09:49 The host, Jamie Parker, is a Red Hatter and an experienced engineer.

00:09:53 In each episode, Jamie recounts the stories of technologists from across the industry who've been on a journey implementing new technologies.

00:10:01 I recently listened to an episode about DevOps from the folks at Worldwide Technology.

00:10:06 The hardest challenge turned out to be getting buy-in on the new tech stack rather than using that tech stack directly.

00:10:12 It's a message that we can all relate to.

00:10:14 And I'm sure you can take some hard-won lessons back to your own team.

00:10:18 Give Code Comments a lesson.

00:10:20 Search for Code Comments in your podcast player or just use our link, pythonbytes.fm/code dash comments.

00:10:26 The link is in your podcast player's show notes.

00:10:28 Thank you to Code Comments for supporting the show.

00:10:30 This one is Make Time Speak from Preycin.

00:10:34 Preycin's been on the show before, a friend of the show and also a former co-guest, co-host.

00:10:40 And the idea is it's a little bit of a human-friendly way to refer to time.

00:10:46 You might know about things like, I think it's Arrow, that has a humanized thing that says, you know, five minutes from now or in ten minutes or just now.

00:10:56 Those kinds of things.

00:10:57 But the way this one works is it talks in sort of colloquial way of saying the time.

00:11:03 So you create a clock object and you give it a language to use, like English, German, Swahili, I think, all those things, Dutch.

00:11:14 And then you can ask it, you know, what is 11 colon 15?

00:11:19 It'll say quarter past 11 or a bunch of different times.

00:11:21 What is 729?

00:11:23 And well, it says that in Swahili, which I can't get that.

00:11:27 I'm not going to get that right.

00:11:28 But it'll convert time into spoken expressions in multiple languages.

00:11:31 Super easy to use.

00:11:33 Pure Python.

00:11:33 So you could vendorize it, I guess.

00:11:35 And so on.

00:11:37 Even as plugins.

00:11:37 So super easy to use if people want to check that out and play with it.

00:11:42 This is pretty fun.

00:11:43 Yeah.

00:11:43 I like it.

00:11:43 Very simple.

00:11:44 But if you've got a use case like that, you have a date time and you wanted to say it in a more human version, well, here you go.

00:11:51 All right.

00:11:52 Nice.

00:11:52 Yeah.

00:11:53 I am going to cover a topic that I get asked all the time.

00:11:57 So I talk about testing a lot and machine learning and AI is kind of a big thing now.

00:12:03 So I get questions like, how do I test machine learning projects?

00:12:07 And I got an answer.

00:12:09 I have no idea.

00:12:09 So I'm excited that somebody made an attempt at this.

00:12:12 Here is a article called How Should You Test Your Machine Learning Project?

00:12:17 The Beginner's Guide by Francois Porcher.

00:12:20 So and it's published in the Towards Data Science blog.

00:12:24 Anyway, kind of a cool intro.

00:12:27 talked about some of the simple stuff.

00:12:30 I mean, there is like, how do you test machine learning?

00:12:34 It's complex.

00:12:35 But there are there's a lot of pieces that are pretty straightforward to test.

00:12:39 So cool introduction.

00:12:41 Had a project.

00:12:42 This article also includes a repository that you can play with directly, which is nice.

00:12:48 You just follow along with the code.

00:12:50 So this is doing what is it doing?

00:12:53 It's essentials of testing with a machine learning pipeline focusing on fine tuning BERT for text classification on an IMDB data set.

00:13:04 So that's just what he's using.

00:13:06 He's using pytest and pytest Cove, which are awesome things to start with.

00:13:11 And so it kind of goes through some of the easy stuff right away is starting with some of the simple things like has a clean text function.

00:13:22 So a function within within the source that takes a string and makes it all lowercase and strips it.

00:13:29 But it might do other things, too.

00:13:30 But these are these are great examples.

00:13:32 You've in a lot of machine learning stuff, you've got a lot of little helper functions along the way.

00:13:37 May as well go test those and it'll get in the habit of writing tests, too.

00:13:41 And this in this case is just giving giving some examples of of some some random text input and what the clean output should look like.

00:13:49 And these are your expectations of like if I pop pop this data into this function, what should the output look like?

00:13:54 So it's a great way to get started.

00:13:56 I personally would have put this in a parameterized, but I guess we're trying to teach people slowly.

00:14:00 These are really three test cases.

00:14:03 They could be three test functions, but it works.

00:14:07 And so I'm referring to a test function that does a test for capital letter stripping and removing extra spaces.

00:14:16 And what how how it should handle the empty string.

00:14:20 And this is actually a good point.

00:14:22 One of the things they test with interviews a lot is the edge cases for testing.

00:14:27 So like with what test examples are like derivative small cases that you wouldn't possibly think about.

00:14:36 And it's important to test those, too.

00:14:37 Like what is it?

00:14:38 What is an empty string get cleaned as or good?

00:14:41 A good thing.

00:14:41 Like if I already had the word spaces in lowercase, how would that end up showing up in the output?

00:14:48 Things like that.

00:14:48 So good start.

00:14:50 And then jumps up to higher level things.

00:14:53 He talks about a larger chunk of the script.

00:14:57 So he's got a tokenized text, tokenized text function that uses a lot of sub pieces, uses the tokenizer with certain input.

00:15:06 And how you test that?

00:15:08 Well, this is a great example of just figuring out really some examples, some example input and what how you would expect it to be tokenized on the output.

00:15:18 Looking at the length and the shape of the result.

00:15:22 And then, you know, making sure that that not all values or I don't know what this would be.

00:15:28 Oh, he's making sure that all values are torched by torched tensors.

00:15:33 I don't even really know what that means.

00:15:34 But, you know, thinking about what the output should be.

00:15:38 If even if you don't know the specifics, you can have some way to describe how it should sort of look.

00:15:43 And these are good enough tests or they possibly are good tests to have anyway.

00:15:49 So I think this is a good, good starting point to to start a discussion on your team for how to how to add testing to a machine learning project.

00:15:59 Yeah, it's interesting.

00:16:00 I really would have no idea how to test machine learning.

00:16:02 It seems like black box type stuff.

00:16:04 So, yeah, this is a lot more to work with than I would have come up with, I think.

00:16:08 Yeah, just getting started, taking a chunk out of it and then where to go from there.

00:16:12 So after you kind of have a sense of some of the easy stuff, some of the middle level stuff of testing examples and shapes and whatnot.

00:16:19 What's left?

00:16:21 Well, that's where a quick introduction to how code coverage works and looking at what other what what the rest of your code is doing and that maybe you want to add tests to.

00:16:32 Or maybe those are the things that you manually test or something.

00:16:36 So anyway.

00:16:37 Yeah.

00:16:38 Excellent.

00:16:38 Sounds good.

00:16:39 Well, those are our items.

00:16:41 Do you have any extras for us this week?

00:16:43 I am out of extras.

00:16:45 Clean out.

00:16:46 Well, I'll tell where I'll make up for it for you.

00:16:47 Okay.

00:16:48 So wonderful news from Authy.

00:16:51 You know, Authy, the 2FA password thing that you can get for multi-factor authentication.

00:16:58 Super nice because, you know, so many of the devices are locked to or some of the apps are locked to one platform like Google, a Google authenticator.

00:17:07 You lose your phone or you have to reformat it or something.

00:17:10 Sorry.

00:17:10 Sorry.

00:17:10 Good luck.

00:17:11 Now.

00:17:11 You know, there's no sinking things like that.

00:17:14 But with Authy, you have an account.

00:17:16 It syncs it across your different devices.

00:17:19 One device can authenticate another.

00:17:21 If you want to add a new one.

00:17:22 It's really nice except now Authy is urging users to stay alert after 33 million phone numbers were leaked.

00:17:32 How?

00:17:33 Well, there's an authenticated API endpoint, but apparently it would return an error that would indicate whether the phone number that you passed in to try to authenticate with was valid or invalid.

00:17:47 Like, sorry, that phone number doesn't exist or sorry, wrong password.

00:17:50 Something like that.

00:17:51 I think is the deal.

00:17:52 Okay.

00:17:52 And so somebody just hammered it with, you know, every phone number combination they could think of and recorded the results when it said that phone number exists.

00:18:01 And we know that Authy has it.

00:18:03 And then we know that you have 2FA and all of these things.

00:18:06 And so from what I could tell, no real information about people was stolen.

00:18:10 But given that they know you have 2FA and they know that you have, that this is your phone number, they can start sending you all sorts of spoof things, social engineering type things.

00:18:21 Right.

00:18:22 Yeah.

00:18:22 Yeah.

00:18:22 Yeah.

00:18:22 Well, and Authy recently canceled their desktop apps.

00:18:26 You know, Authy being a Twilio, the parent company, canceled their desktop apps.

00:18:31 It just seems like it's really in a kind of a state of disrepair and lack of love and a lack of confidence in Michael at this point.

00:18:38 So I went through the super fun experience of resetting about 30 different 2FA logins.

00:18:44 And boy, oh boy.

00:18:46 I learned some things, Brian.

00:18:48 I've learned that some companies make it super easy to reset.

00:18:52 Because my thought was, look, if this is, you know, what else potentially has happened?

00:18:56 I'm going to revoke all of my 2FA logins and set new secret keys that will generate new passwords.

00:19:03 So even if they were able to get a hold of everything in my account, that stuff doesn't work anymore effectively.

00:19:08 Right.

00:19:09 That was my plan.

00:19:10 And it took like six hours or something, five hours.

00:19:13 You go to different places and you'll see some of them will let you, some have an awesome button.

00:19:19 Reset 2FA here's a QR code you scan.

00:19:21 Boom.

00:19:21 You're good to go.

00:19:22 Others say, your Google authenticators is enabled.

00:19:27 Like what?

00:19:28 I don't have a Google authenticator.

00:19:30 There's like 50 apps that are 2FA apps, T-Mobile and like 10 of the other ones say, use your Google authenticator here.

00:19:38 Like, no, it is not.

00:19:39 It's like, use your internet explorer six here.

00:19:43 Like, no, there are other browsers.

00:19:44 Please don't just say use your Google authenticator.

00:19:48 Right.

00:19:48 But you could just go, yep, this is my Google authenticator.

00:19:51 It's called something else and it doesn't come from Google, but sure enough, I'm going to set this up.

00:19:55 Right.

00:19:55 And like Christopher out in the, in the audience here, that is my next recommendation is well, if not Authy, what?

00:20:04 Because Google authenticators garbage.

00:20:06 Like I said, you, if you, your phone gets messed up, you've lost all logins forever.

00:20:11 There's not a sink.

00:20:11 At least last time I use it, there's no way to sink it or export it or any of that stuff.

00:20:15 Right.

00:20:15 That's bad news.

00:20:16 So Bitwarden.

00:20:18 Bitwarden is awesome.

00:20:19 This is a premium feature.

00:20:20 So you have to have the premium version of Bitwarden, which is $10 a year or 80 cents a month or something.

00:20:26 I'm like, yeah, fine.

00:20:27 That's, that seems fair.

00:20:28 But Bitwarden is cool.

00:20:29 It's open source, multi-platform.

00:20:30 you just scan, scan stuff or enter the code and that they give you for the 2FA and off it goes.

00:20:37 And because it has a browser plugin, you can just click on your name when it says type in your 2FA code.

00:20:43 You don't have to go pull it up.

00:20:43 You just click the button and boom, it auto fills it, which is great.

00:20:46 I don't put it in my one password because I'm just not ready to say my 2FA logins and my passwords are all stored behind one single platform.

00:20:54 Because then your 2FA is kind of toast if somebody breaks into that.

00:20:58 So Bitwarden for 2FA, one password for logins for me at the moment.

00:21:02 What do you think?

00:21:03 Well, I'm using, maybe I shouldn't tell people, but yeah, I'm using Authy.

00:21:07 So are they, they're still supporting it on like, aren't they?

00:21:11 they're not supporting it on, they used to have a desktop app.

00:21:16 They don't have that anymore.

00:21:17 They have a iPad and an iOS and Android app.

00:21:20 Since you have an Apple Silicon one, you can run the iPad version on your Mac, just like a desktop app.

00:21:29 So it's kind of feels the same, except for it doesn't have like, like the keyboards behave weirdly and stuff.

00:21:33 Right.

00:21:34 Cause it doesn't expect you to have a keyboard.

00:21:35 Maybe you're using it a lot more than I am, but it doesn't bother me to run, run it on my phone.

00:21:40 But yeah.

00:21:42 Well, I mean, it doesn't bother me either, but I've got, there's like a bunch of different apps that I have.

00:21:47 For example, the credit card front end system for talk Python courses.

00:21:52 It has a remember me button.

00:21:53 It never remembers me.

00:21:55 Never.

00:21:56 It has a 2FA.

00:21:58 It never remembers the 2FA.

00:21:59 So even if I say, remember me 20 minutes later, I'm putting in the password and the 2FA.

00:22:04 And then 20 minutes later, I'm putting the password in the job.

00:22:06 I'm like, ah, so there's like a few places like that.

00:22:09 They're just constantly asked for the 2FA.

00:22:12 digital issues a little bit like that.

00:22:13 Like if, you, every single time you're putting in the 2FA, there's not like a trust this device sort of thing.

00:22:19 And so I ended up, I'm probably in used to be in offing now in bit warden.

00:22:23 I'm probably not like five times a day, at least every day.

00:22:26 So anyway, so one final thing before I move off of this, after all of this, they said, I don't know how this helps.

00:22:32 It doesn't seem like it should help, but somehow they said, as part of our recommendation to users, it's very important that you upgrade to the latest version of Authy.

00:22:41 Why that because the endpoint hands, I don't understand, but, anyway, it says you must.

00:22:47 And then if you go and look at the upgrade, all that says for the, it says you must get version 26.1.0.

00:22:52 What does it say here?

00:22:53 Bug fixes, not, this is an important security update and you need to update because we're trying to protect your privacy.

00:23:00 They're hiding behind bug fixes and it's disgraceful, right?

00:23:03 This is bad.

00:23:03 So all these things taken together, I'm like, you know what?

00:23:06 It may be safe.

00:23:07 It may be not, but I'm out.

00:23:09 Like this is not where my, my important things live.

00:23:12 So.

00:23:12 Okay.

00:23:12 Yeah.

00:23:13 And OFAC also out there says, Hey, if you're okay with recommending paid services, which I am one password is what I migrated away to from Authy.

00:23:20 Yeah.

00:23:20 One password is awesome.

00:23:21 But like I said, I have my logins at one password.

00:23:24 So I put my two FA and bit word.

00:23:25 All right.

00:23:26 Woo.

00:23:26 That was a long extra.

00:23:27 That should just been a thing, right?

00:23:28 Extra.

00:23:29 Remember a while ago, I did this article unsolicited advice for Mozilla and Firefox, like your AI, your, your good citizen AI project.

00:23:38 Probably won't save Mozilla.

00:23:40 It probably needs more than that.

00:23:41 And it won't really probably help Firefox either.

00:23:43 So let's do some things that help them because I'm in principle, a fan of them.

00:23:47 Well, I said, one of the things that my main recommendation was like a privacy focused Google docs.

00:23:52 Well, they didn't do it, but, proton, the Proton Mail people just came up with a, like a Google docs equivalent, but with end to end encryption.

00:24:00 And no AI training and no AI training and, you know, all the kinds of things you would like about your data without the negatives.

00:24:07 So if you have proton, there's, there's now collaborative docs with it, which is kind of cool.

00:24:12 And it looks pretty, I think it looks pretty nice.

00:24:14 So just want to give that a shout out.

00:24:15 Does it, do you know if, I probably don't want to ask, does our Google docs open to scanning for AI?

00:24:23 Do you know, I believe that the, the freeware versions are the free versions, but the business ones, maybe not, you know, I think your business workspace stuff is not open to that, but like your, your personal Gmail is open to like scanning for ads and stuff.

00:24:39 Whereas the business one is that's, so that's the price you pay.

00:24:43 Last thing, is the code in a castle thing I'm doing in October 5th.

00:24:47 The early bird discount closes tomorrow.

00:24:50 If you listen to this, right.

00:24:52 When it comes out, so if you're interested, please check it out.

00:24:54 it'd be super awesome to spend a week hanging out in Tuscany, doing all sorts of things together.

00:24:59 And yeah, that's, that's, it's for my extras, Brian.

00:25:01 That's a lot of extras, Tony.

00:25:03 I mean, Michael.

00:25:04 Yeah.

00:25:05 All right.

00:25:07 All right.

00:25:07 Shall we have a joke?

00:25:08 Yeah.

00:25:09 This joke I called, I lied.

00:25:11 And it's a, it's like a cartoon.

00:25:14 It's a woman behind a esoteric programming sort of thing.

00:25:18 She's got a gun.

00:25:19 It says, I lied.

00:25:20 I don't have Netflix, take off your shoes.

00:25:22 We're going to learn rust.

00:25:23 And I just thought about like this, all this like rust energy.

00:25:27 Like we're converting that to the rest.

00:25:29 We're rewriting that in rust.

00:25:30 It's just like, you're doing rust.

00:25:32 That's what the world's doing.

00:25:33 Sit down.

00:25:34 So she invited someone over to like watch Netflix.

00:25:37 Like I lied.

00:25:38 I don't know Netflix.

00:25:38 Take off your shoes.

00:25:39 We're going to learn rust.

00:25:41 I thought it would catch the zeitgeist.

00:25:43 Well, right.

00:25:44 It's bizarre, man.

00:25:45 It's amazing.

00:25:47 Okay.

00:25:49 And I'll, I'll, I'll maybe I'll put that is the, the chapter art for this one.

00:25:53 Cause the picture, the eyes are amazing.

00:25:55 The desperation.

00:25:56 That's pretty good.

00:25:57 Yeah.

00:25:58 Yeah.

00:25:58 Yeah.

00:25:58 Yeah.

00:25:58 Yeah.

00:25:59 Yeah.

00:25:59 Yeah.

00:25:59 I've resisted.

00:26:01 I've resisted rust so far.

00:26:02 I mean, I'm, I'm, I'm happy that things are getting faster and whatnot, but I haven't

00:26:07 learned it yet.

00:26:08 We'll see.

00:26:08 Same.

00:26:09 All right.

00:26:10 Well, cool.

00:26:11 Nice episode.

00:26:11 Thanks for joining today.

00:26:13 You bet.

00:26:14 Fun as always.

