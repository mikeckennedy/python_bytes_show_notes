WEBVTT

00:00:00.001 --> 00:00:05.660
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.660 --> 00:00:12.600
This time it's Python Bytes episode 31, recorded on Tuesday, June 20th, 2017.

00:00:12.600 --> 00:00:13.580
I'm Michael Kennedy.

00:00:13.580 --> 00:00:14.460
And I'm Brian Ockin.

00:00:14.460 --> 00:00:17.140
And we have a bunch of cool things to talk about.

00:00:17.140 --> 00:00:19.740
Some of them are huge, and some of them are kind of tiny.

00:00:19.740 --> 00:00:20.700
Let's start small, huh?

00:00:20.700 --> 00:00:21.940
Yeah, let's start small.

00:00:21.940 --> 00:00:27.500
I really appreciate, it's one of the reasons why I like following Twitter for Python news,

00:00:27.500 --> 00:00:30.040
is that's where I found Tiny Mongo.

00:00:30.040 --> 00:00:34.540
So I saw somebody talking about it last week.

00:00:34.540 --> 00:00:35.060
That's awesome.

00:00:35.060 --> 00:00:37.680
I'm a fan of MongoDB and TinyDB.

00:00:37.680 --> 00:00:40.100
And if they could come together, that'd be even better.

00:00:40.100 --> 00:00:40.460
Right.

00:00:40.460 --> 00:00:47.440
So this is essentially an attempt to put, it's not an exact same interface,

00:00:47.440 --> 00:00:53.760
but it's fairly close to the same interaction you do with Mongo with a single file system.

00:00:53.760 --> 00:00:55.940
So it's a single file database.

00:00:56.540 --> 00:01:02.340
And the, Stephen, the person working on this, did not, and I talked with him and he,

00:01:02.340 --> 00:01:06.360
it wasn't his intent to always be right on top of TinyDB.

00:01:06.360 --> 00:01:11.420
But so far, he's been really happy with TinyDB as the backend for Tiny Mongo.

00:01:11.420 --> 00:01:16.580
And so, yeah, it just sits, it's using TinyDB as the database part,

00:01:16.580 --> 00:01:20.540
but exposes an interface that's very close to Mongo.

00:01:20.540 --> 00:01:21.620
Yeah, that's super cool.

00:01:21.620 --> 00:01:27.980
So basically, if you have code that talks to MongoDB through the PyMongo API,

00:01:27.980 --> 00:01:32.180
you could more or less adapt that really quickly to Tiny Mongo.

00:01:32.180 --> 00:01:35.680
And TinyDB, the backing store for this thing,

00:01:35.680 --> 00:01:41.520
more or less is like, let's create a simple document database

00:01:41.520 --> 00:01:44.320
that's really just some JSON files living on your disk.

00:01:44.700 --> 00:01:47.740
It's not a full-on production database, but if you're doing simple stuff,

00:01:47.740 --> 00:01:50.060
like really simple things, like this is actually pretty sweet.

00:01:50.060 --> 00:01:51.020
There's no server, right?

00:01:51.020 --> 00:01:51.480
Right.

00:01:51.480 --> 00:01:53.240
And yeah, there's no server.

00:01:53.240 --> 00:01:56.720
I would say probably the other direction probably works the best.

00:01:56.840 --> 00:02:00.640
So if you were going to, your end goal was to use Mongo,

00:02:00.640 --> 00:02:03.620
that Tiny Mongo might be a good way to start,

00:02:03.620 --> 00:02:07.340
because it isn't the full set of functionality.

00:02:07.340 --> 00:02:10.720
I don't have a complete list of what's missing.

00:02:10.720 --> 00:02:13.080
I just have the personal experience of,

00:02:13.080 --> 00:02:16.880
I tried to take a Mongo application and just swap this in,

00:02:17.340 --> 00:02:21.960
and I ran across a few errors and I haven't finished debugging those yet.

00:02:21.960 --> 00:02:28.100
I'm just really excited about it because there's more than one document database

00:02:28.100 --> 00:02:29.920
that I can use in small applications.

00:02:29.920 --> 00:02:30.940
Yeah, that's cool.

00:02:30.940 --> 00:02:33.580
And then also one of the applications for this,

00:02:33.580 --> 00:02:36.320
when I was talking with the maintainer of it,

00:02:36.320 --> 00:02:40.160
is that he's using it on Raspberry Pis even.

00:02:40.160 --> 00:02:42.480
So having a Mongo-like.

00:02:42.480 --> 00:02:43.880
That is really cool,

00:02:44.000 --> 00:02:47.820
because you don't want to start up a whole separate server on like a Raspberry Pi,

00:02:47.820 --> 00:02:50.980
but certainly having a little couple of JSON files laying around

00:02:50.980 --> 00:02:53.160
that you have like a database interface over top of.

00:02:53.160 --> 00:02:53.560
That's cool.

00:02:53.560 --> 00:02:54.300
Yeah, definitely.

00:02:54.300 --> 00:02:58.400
So I was excited about this and I'm going to start using it right away.

00:02:58.400 --> 00:02:58.900
That's sweet.

00:02:58.900 --> 00:03:01.480
Yeah, if people are interested in TinyDB,

00:03:01.480 --> 00:03:05.540
I back on episode 80 of Talk Python many moons ago,

00:03:05.540 --> 00:03:10.340
I interviewed the guy who created TinyDB and talked about some of the use cases.

00:03:10.340 --> 00:03:13.420
And I think there's some extensions you can get like indexing add-ons

00:03:13.420 --> 00:03:14.060
and stuff like that.

00:03:14.060 --> 00:03:15.860
So there's a lot of stuff to do with this.

00:03:15.860 --> 00:03:16.180
Pretty cool.

00:03:16.180 --> 00:03:18.560
So that sounds pretty dead simple, right?

00:03:18.560 --> 00:03:20.960
Just fire up TinyDB and off you go?

00:03:20.960 --> 00:03:22.200
Yeah, dead simple.

00:03:22.200 --> 00:03:22.760
You know what else?

00:03:22.760 --> 00:03:24.580
I want some dead simple validation.

00:03:24.580 --> 00:03:28.280
And so the next project I chose is called Validus.

00:03:28.280 --> 00:03:33.820
And Validus is on GitHub and it's described itself as a dead simple Python data validation library.

00:03:33.820 --> 00:03:41.420
And have you ever tried to write a regular expression to match an email or a URL or something like that?

00:03:41.420 --> 00:03:41.840
Oh, yes.

00:03:41.840 --> 00:03:42.160
Yeah.

00:03:42.260 --> 00:03:43.360
That's super fun, right?

00:03:43.360 --> 00:03:43.840
No.

00:03:43.840 --> 00:03:47.800
You think you get it working to someone who mails you like,

00:03:47.800 --> 00:03:50.660
I have a proper email address, but I can't sign up your system.

00:03:50.660 --> 00:03:52.120
It says my email is invalid.

00:03:52.120 --> 00:03:53.060
You're like, oh, gosh.

00:03:53.060 --> 00:03:58.180
So this Validus thing kind of like solves that for a class of types of data, basically simple input.

00:03:58.180 --> 00:04:01.060
So you can just import this and say Validus.

00:04:01.060 --> 00:04:03.640
Is email and give it a string and it will say yes or no.

00:04:03.640 --> 00:04:06.240
And you can ask it questions like, is it an RGB color?

00:04:06.240 --> 00:04:07.620
Is it a phone number?

00:04:07.620 --> 00:04:08.480
Is it an ISBN?

00:04:08.480 --> 00:04:11.260
Is it an IPv4 or IPv6 address?

00:04:11.260 --> 00:04:11.880
Is it a number?

00:04:12.520 --> 00:04:13.480
Is it a slug?

00:04:13.480 --> 00:04:17.280
Like would it fit at the end of a URL without needing encoding?

00:04:17.280 --> 00:04:18.420
All that kind of stuff.

00:04:18.420 --> 00:04:19.220
That's pretty awesome.

00:04:19.220 --> 00:04:20.000
That's cool.

00:04:20.000 --> 00:04:21.040
I'd say it's dead simple.

00:04:21.040 --> 00:04:22.760
It's even got ismongoID.

00:04:22.760 --> 00:04:23.960
Nice.

00:04:23.960 --> 00:04:24.580
Yeah.

00:04:24.580 --> 00:04:24.780
Yeah.

00:04:24.780 --> 00:04:25.220
That's awesome.

00:04:25.880 --> 00:04:28.220
So you know what else I like about this?

00:04:28.220 --> 00:04:30.020
It's Python only.

00:04:30.020 --> 00:04:30.900
No legacy Python.

00:04:30.900 --> 00:04:32.040
Three, six.

00:04:32.040 --> 00:04:32.880
Three, three.

00:04:32.880 --> 00:04:33.140
Yeah.

00:04:33.140 --> 00:04:33.420
Yeah.

00:04:33.420 --> 00:04:33.920
Yeah.

00:04:33.920 --> 00:04:34.520
Three, three and above.

00:04:34.520 --> 00:04:36.060
So it's only a Python three thing.

00:04:36.060 --> 00:04:38.940
So yet another sweet example of that.

00:04:38.940 --> 00:04:41.480
I have a lot of interesting stuff to say about that at the end of the show.

00:04:41.480 --> 00:04:43.740
Not Validus, but Python versus legacy Python.

00:04:43.740 --> 00:04:47.680
While this works pretty well, we may still need to jump in the debugger, right?

00:04:47.680 --> 00:04:48.680
Yeah, definitely.

00:04:48.680 --> 00:04:51.820
And I'm a command line debugger kind of person.

00:04:51.820 --> 00:04:54.860
Actually, I don't really jump into the debugger too much.

00:04:55.080 --> 00:04:57.680
So you're a last resort, a debugger of last resort type person?

00:04:57.680 --> 00:04:58.220
Yes.

00:04:58.220 --> 00:04:59.060
Yeah, definitely.

00:04:59.060 --> 00:05:00.100
Last resort.

00:05:00.100 --> 00:05:08.120
And so in episode 29, we talked about launching the ability to launch PDB, the Python debugger,

00:05:08.120 --> 00:05:09.540
from a failed pytest.

00:05:09.540 --> 00:05:14.420
Somebody on Twitter, another Twitter person, KidPixo, I think.

00:05:14.420 --> 00:05:20.100
Yeah, KidPixo, he runs the Geek Cookies Italian podcast, which I was a guest on like two and a half years ago.

00:05:20.100 --> 00:05:20.720
He's a great guy.

00:05:20.720 --> 00:05:21.880
He sees lots of good stuff.

00:05:21.880 --> 00:05:22.120
Yeah.

00:05:22.380 --> 00:05:27.360
Well, he passed this along because he said he really loves the PUDB debugger.

00:05:27.360 --> 00:05:30.720
And my first reaction is, oh my God, this thing is ugly.

00:05:30.720 --> 00:05:36.060
Because it does look like you're back in the 80s running on a 386 or something.

00:05:36.060 --> 00:05:37.820
I feel like I've dialed into a VBS.

00:05:38.040 --> 00:05:40.140
But it does have themes.

00:05:40.140 --> 00:05:47.780
So after I played with it for a while, I switched it to a midnight theme and it looks just like I'm in my editor.

00:05:47.780 --> 00:05:49.800
And then it's actually pretty slick.

00:05:49.800 --> 00:05:53.600
And one of the things that you can do with it, it's a lot better than PDB.

00:05:54.100 --> 00:05:56.920
And it's still small and fast.

00:05:56.920 --> 00:06:02.560
And there's some documentation in it for how you can do the same thing that we did with pytest.

00:06:02.560 --> 00:06:06.780
You can launch it just with whenever you hit a pytest failure.

00:06:06.780 --> 00:06:09.140
So that's pretty cool.

00:06:09.140 --> 00:06:10.240
Yeah, it's really nice.

00:06:10.240 --> 00:06:12.800
I mean, you can use it over like SSH and stuff.

00:06:12.860 --> 00:06:15.640
So if you're SSHed into a server, you can debug with this.

00:06:15.640 --> 00:06:17.660
But it actually has like little windows.

00:06:17.660 --> 00:06:19.720
I mean, it really does feel like I'm back on a BBS.

00:06:19.720 --> 00:06:20.180
It's awesome.

00:06:20.180 --> 00:06:20.560
Yeah.

00:06:20.560 --> 00:06:22.280
Like you see your code and you can step through it.

00:06:22.280 --> 00:06:25.020
You've got like a variables window and a stack and breakpoints.

00:06:25.020 --> 00:06:26.600
And like, it's really nice.

00:06:26.600 --> 00:06:28.880
It's like a ASCII curses type thing.

00:06:28.880 --> 00:06:35.260
But the local window of already having your listing up and also all your local variables.

00:06:35.260 --> 00:06:41.160
And that changing when you go up and down the stack, it's usually enough.

00:06:41.160 --> 00:06:42.240
So I like it.

00:06:42.240 --> 00:06:42.480
Yeah.

00:06:42.960 --> 00:06:44.560
Yeah, it definitely hits the sweet spot.

00:06:44.560 --> 00:06:47.640
Like the 80% case for debuggers.

00:06:47.640 --> 00:06:48.020
It's cool.

00:06:48.020 --> 00:06:49.140
All right.

00:06:49.140 --> 00:06:54.040
So I'm definitely going to start using that if I need to debug anything without a windowing

00:06:54.040 --> 00:06:56.440
environment like macOS or Linux or Windows.

00:06:56.440 --> 00:06:56.840
Okay.

00:06:56.840 --> 00:07:02.860
So the next thing that I want to talk about is a really interesting sort of wide ranging study

00:07:02.860 --> 00:07:06.780
that the guys at PyUp.io did.

00:07:06.780 --> 00:07:09.140
So PyUp.io is a cool service.

00:07:09.380 --> 00:07:13.220
I'm actually paying customer of theirs because I really think what they're doing is awesome

00:07:13.220 --> 00:07:14.200
and I use it for my web apps.

00:07:14.540 --> 00:07:22.540
So the idea is you basically point, you give PyUp.io access to your requirements file in your

00:07:22.540 --> 00:07:24.280
public or private GitHub repo.

00:07:24.280 --> 00:07:29.200
And if there's a new version of indie requirement or transitive requirement that you depend upon,

00:07:29.200 --> 00:07:34.200
it will tell you like, hey, there's a new release of the Pyramid Web Framework and here's the

00:07:34.200 --> 00:07:34.700
change log.

00:07:34.700 --> 00:07:36.340
And actually this one's a security update.

00:07:36.340 --> 00:07:37.560
So get in there and fix it quick.

00:07:37.560 --> 00:07:41.760
So it will like basically watch your requirements and tell you if there are any upgrades and things

00:07:41.760 --> 00:07:42.140
like that.

00:07:42.140 --> 00:07:43.740
And it'll issue them as a pull request.

00:07:43.740 --> 00:07:44.260
So really cool.

00:07:44.260 --> 00:07:47.560
So these guys have access to all these requirements files and many other things.

00:07:47.560 --> 00:07:47.820
Right.

00:07:47.820 --> 00:07:52.280
And they studied some Django requirements files on GitHub.

00:07:52.280 --> 00:07:53.820
Now this isn't through their business.

00:07:53.820 --> 00:07:58.320
They were able to use BigQuery to just get a hold of all of the Django requirement files

00:07:58.320 --> 00:07:59.120
that are on GitHub.

00:07:59.120 --> 00:08:01.520
And they found some interesting things.

00:08:01.520 --> 00:08:04.940
And I guess this is not private, not the private repos, probably just the public ones.

00:08:04.940 --> 00:08:11.520
But anyway, they said that Django is the most popular web framework and it's pretty old.

00:08:11.520 --> 00:08:14.220
It's been around for 12 years used on all sorts of different projects.

00:08:14.220 --> 00:08:19.460
So let's look at these requirements files, which specify like all the dependencies you have

00:08:19.460 --> 00:08:22.140
to install and see what we can get from them.

00:08:22.140 --> 00:08:26.660
So the first thing they ask is, do developers pin or freeze their requirements?

00:08:26.660 --> 00:08:27.080
Right.

00:08:27.080 --> 00:08:31.520
That's where in your requirements TXT, you could say, I depend on Django and I depend on SQL

00:08:31.520 --> 00:08:32.980
Alchemy and I depend on requests.

00:08:32.980 --> 00:08:37.480
Or you could say, I depend on Django equal, equal this version, request equal, equal that

00:08:37.480 --> 00:08:37.740
version.

00:08:37.740 --> 00:08:37.940
Right.

00:08:37.940 --> 00:08:39.320
That's pinning or freezing.

00:08:39.320 --> 00:08:44.560
And they said that 64% of Django developers pin their requirements.

00:08:44.560 --> 00:08:45.920
That's interesting.

00:08:45.920 --> 00:08:49.440
And another 20% or so do ranges.

00:08:49.440 --> 00:08:56.020
So like I'm willing to take this range of versions, but not leave it unpinned.

00:08:56.020 --> 00:08:59.100
And then some of them are just like, give me whatever I get when I ask for it.

00:08:59.100 --> 00:09:00.420
So that's interesting.

00:09:00.420 --> 00:09:06.100
Another thing that they said was pretty interesting is that Django 1.8, even though I think 1.10,

00:09:06.100 --> 00:09:07.700
1.11 is the latest.

00:09:07.700 --> 00:09:11.040
Django 1.8 is the most popular of them.

00:09:11.420 --> 00:09:12.980
And that was pretty cool.

00:09:12.980 --> 00:09:19.260
But one of the things I really wanted to point out here is they said that what is more worrisome

00:09:19.260 --> 00:09:27.040
is 1.9, 1.7, and 1.6 are second, third, and fourth most popular on the list.

00:09:27.040 --> 00:09:28.560
Why is that a problem?

00:09:28.560 --> 00:09:32.440
None of them are receiving any security updates at all.

00:09:32.440 --> 00:09:33.380
Oh, weird.

00:09:33.580 --> 00:09:34.940
So what isn't that bad?

00:09:34.940 --> 00:09:37.720
So 1.7 and 1.6 went end of life over two years ago.

00:09:37.720 --> 00:09:43.620
So if you are on the web and your application listens on a socket, you want it to have all

00:09:43.620 --> 00:09:45.400
the security patches, let me tell you.

00:09:45.400 --> 00:09:46.620
That's bad news.

00:09:46.620 --> 00:09:52.680
And here's like, if I add those up really quick, that's something like 40% of Django files they

00:09:52.680 --> 00:09:55.160
found are using these older versions.

00:09:55.160 --> 00:10:00.120
And in fact, he said only 2% of all Django projects they could find are actually on a

00:10:00.120 --> 00:10:01.220
secure release.

00:10:01.220 --> 00:10:07.280
Among all the projects, more than 60% use Django releases with one or more known security vulnerabilities.

00:10:07.280 --> 00:10:14.420
And that's pretty intense, man, that only 2% of them are on a 100% known secure release.

00:10:14.420 --> 00:10:19.520
Well, I mean, clearly it's recommended to go make sure that you're using a secure release.

00:10:19.520 --> 00:10:22.900
But I was curious about the pinning or freezing.

00:10:23.260 --> 00:10:25.560
Is that considered best practice?

00:10:25.560 --> 00:10:27.520
So I think it depends on what you're doing.

00:10:27.520 --> 00:10:32.000
For large, complicated applications, it's definitely considered a best practice.

00:10:32.000 --> 00:10:38.560
The idea is you want to make the upgrade in your dependencies at the time of your choosing.

00:10:38.560 --> 00:10:39.140
Right?

00:10:39.140 --> 00:10:40.460
Like you want to have...

00:10:40.460 --> 00:10:44.480
So if you're going to upgrade from, especially major frameworks like Django, if you're going

00:10:44.480 --> 00:10:49.240
to go from Django 1.8 to 1.9, you don't want that to just happen one day when it gets

00:10:49.240 --> 00:10:52.700
released and you happen to refresh your server because that might have breaking changes.

00:10:53.240 --> 00:10:55.440
So you want to explicitly say, I depend on this one.

00:10:55.440 --> 00:10:56.720
Oh, there's a new one out.

00:10:56.720 --> 00:10:57.820
Let me test the new one.

00:10:57.820 --> 00:11:02.840
And then explicitly change that number and have it like flip it for you.

00:11:02.840 --> 00:11:03.200
Okay.

00:11:03.200 --> 00:11:06.680
And basically that's what the PyUp service does that I use.

00:11:06.680 --> 00:11:12.300
It will automatically upgrade my pyramid web framework from like 1.7 to 1.8 to 1.9.

00:11:12.300 --> 00:11:14.240
But it doesn't flip it immediately.

00:11:14.240 --> 00:11:15.280
It's like I have to...

00:11:15.280 --> 00:11:19.380
It'll tell me and change my requirements files as a PR and I have to accept it basically.

00:11:19.580 --> 00:11:19.820
Okay.

00:11:19.820 --> 00:11:20.660
Yeah.

00:11:20.660 --> 00:11:20.760
Yeah.

00:11:20.760 --> 00:11:25.000
But pretty interesting stats there, especially if you're into Django, check that out.

00:11:25.000 --> 00:11:25.560
Yeah, definitely.

00:11:25.560 --> 00:11:27.560
It's kind of concerning that there's so many.

00:11:27.560 --> 00:11:28.560
And then there's...

00:11:28.560 --> 00:11:29.680
Those are...

00:11:29.680 --> 00:11:33.340
I'm sorry to like hang out on this so much, but this is...

00:11:33.340 --> 00:11:35.920
Was this projects or applications and is there a difference?

00:11:36.100 --> 00:11:38.360
So as far as I can tell from the...

00:11:38.360 --> 00:11:39.400
I don't really know.

00:11:39.400 --> 00:11:43.920
Yanis, I think this guy who wrote it probably could maybe chime in in the comments if he's

00:11:43.920 --> 00:11:44.200
listening.

00:11:44.200 --> 00:11:50.960
But my understanding is basically they went and they studied the public repos that use

00:11:50.960 --> 00:11:51.240
Django.

00:11:51.240 --> 00:11:51.700
Okay.

00:11:51.700 --> 00:11:57.440
So this also may not be quite representative because like companies like Pinterest that

00:11:57.440 --> 00:12:00.520
depend on Django, they're obviously not going to make their code public.

00:12:00.520 --> 00:12:00.940
Right.

00:12:01.020 --> 00:12:05.880
So they may be doing slightly different things, but still it's interesting for you into at

00:12:05.880 --> 00:12:07.780
least the open source side of Django.

00:12:07.780 --> 00:12:08.300
Definitely.

00:12:08.300 --> 00:12:08.860
It's cool.

00:12:08.860 --> 00:12:11.320
Speaking of open source projects, do you think they should have a changelog?

00:12:11.320 --> 00:12:14.840
Well, that's what I was curious about.

00:12:14.840 --> 00:12:15.220
Yeah.

00:12:15.380 --> 00:12:18.920
So I kind of am warming to the idea of changelogs.

00:12:18.920 --> 00:12:21.160
I appreciate other projects with changelogs.

00:12:21.160 --> 00:12:25.700
I actually asked some people back on Twitter again what they thought of them.

00:12:25.700 --> 00:12:31.640
And there's a couple of things I came across, which was a website called Keep a Change Log.

00:12:31.640 --> 00:12:32.840
I really like that site.

00:12:32.840 --> 00:12:34.660
It's so clear and compelling.

00:12:34.660 --> 00:12:35.280
It's great.

00:12:35.280 --> 00:12:35.720
Yeah.

00:12:35.720 --> 00:12:36.660
Well, it's also...

00:12:36.660 --> 00:12:39.380
It talks about that there really isn't a standard...

00:12:39.380 --> 00:12:44.460
If there is a standard format for them, this is probably as close as you can get.

00:12:45.160 --> 00:12:50.560
And it talks about different standards in either REST or in Markdown.

00:12:50.560 --> 00:12:52.100
There's different ways to do it.

00:12:52.100 --> 00:12:58.480
And then when I was talking on Twitter about changelogs, some of the people from the pytest

00:12:58.480 --> 00:13:05.860
project piped up and said that they're using a tool called TownCrier to maintain their changelog.

00:13:05.860 --> 00:13:07.920
That looks really cool, but I've never done anything with it.

00:13:07.920 --> 00:13:08.740
What's TownCrier do?

00:13:08.740 --> 00:13:15.200
So what it does is you keep a separate directory within your project so that you can have it on different...

00:13:15.200 --> 00:13:17.060
If you're using different branches.

00:13:17.060 --> 00:13:25.200
And then different changes go in and you keep the changes in little snippet files so that they're...

00:13:25.200 --> 00:13:30.220
Since they're separate files, they merge easy because they're going to be a new file for each change.

00:13:30.620 --> 00:13:34.760
And then you go through and say, okay, I've pulled all these things in.

00:13:34.760 --> 00:13:36.020
I want to go ahead and use...

00:13:36.020 --> 00:13:39.040
Take everything in the directory and add it to the changelog.

00:13:39.040 --> 00:13:39.640
Oh, I see.

00:13:39.640 --> 00:13:46.100
You can keep a separate file that says, these are the breaking changes, these are the new features or whatever, then it'll build a changelog out of them?

00:13:46.100 --> 00:13:46.480
Yeah.

00:13:46.480 --> 00:13:47.260
Oh, sweet.

00:13:47.260 --> 00:13:47.480
Okay.

00:13:47.580 --> 00:13:48.940
Well, it adds to your existing...

00:13:48.940 --> 00:13:50.540
And it can add to your existing one.

00:13:50.540 --> 00:14:02.380
And one of the things I liked, if you're not doing something like TownCrier, one of the recommendations from Keep a Change Log was to keep at the top unreleased changes so that you...

00:14:02.380 --> 00:14:07.140
Things that you haven't put a label on or done an official supported release yet.

00:14:07.140 --> 00:14:11.340
Because those are things that may, I don't know, maybe you may end up kicking out.

00:14:11.540 --> 00:14:18.220
Yeah, they also have some things that you shouldn't do, like don't just take your get changelog and make that your proper changelog.

00:14:18.220 --> 00:14:19.020
Things like that.

00:14:19.020 --> 00:14:19.480
Yeah.

00:14:19.480 --> 00:14:26.220
And one of the things I saw when I was doing some research for this, I did see some various automated ways to do it.

00:14:26.220 --> 00:14:30.300
But that's the sort of thing is you're going to pull things out of file changes.

00:14:30.300 --> 00:14:31.700
And that's not really what you want.

00:14:31.700 --> 00:14:36.580
You really want a human moderated list of things that went in.

00:14:37.160 --> 00:14:42.400
And that's one of the reasons why I liked TownCrier because it was sort of halfway in between.

00:14:42.400 --> 00:14:43.180
Yep.

00:14:43.180 --> 00:14:43.700
Yeah.

00:14:43.700 --> 00:14:46.160
It's definitely really, really...

00:14:46.160 --> 00:14:48.380
It's like a nice way to sort of manage that human.

00:14:48.380 --> 00:14:50.040
But because you don't want...

00:14:50.040 --> 00:14:51.000
Burged conflict.

00:14:51.000 --> 00:14:52.040
Took PR.

00:14:52.040 --> 00:14:53.300
Accepted this.

00:14:53.300 --> 00:14:54.620
I changed the spelling.

00:14:54.620 --> 00:14:56.580
Like, you know, you don't need all that noise.

00:14:56.580 --> 00:14:58.160
You just want the four things that change.

00:14:58.160 --> 00:14:59.500
Do I want to upgrade to this or not?

00:14:59.500 --> 00:14:59.840
Whatever.

00:14:59.840 --> 00:15:00.820
Let's just move on, right?

00:15:00.820 --> 00:15:01.300
Yeah.

00:15:01.480 --> 00:15:06.980
And then I guess I would lump this in last time we talked about different decisions based on scaling.

00:15:06.980 --> 00:15:09.300
And for projects that I'm just...

00:15:09.300 --> 00:15:12.980
I'm the main maintainer of, I would definitely just keep a file.

00:15:12.980 --> 00:15:18.800
But if we start getting a lot of contributors, then something like TownCrier totally makes sense.

00:15:18.800 --> 00:15:19.940
Yeah.

00:15:19.940 --> 00:15:21.300
I think it's really nice.

00:15:21.300 --> 00:15:22.580
I'm going to definitely look into it.

00:15:22.580 --> 00:15:23.460
All right.

00:15:23.460 --> 00:15:30.120
Last thing I want to talk about is asynchronous programming, which is something that I talk about often because I'm a big fan.

00:15:30.120 --> 00:15:36.440
This is an article called Understanding Asynchronous Programming in Python by Doug Farrell from Dan Bader's site.

00:15:36.440 --> 00:15:39.200
And we've had some of Doug's stuff on before.

00:15:39.200 --> 00:15:40.060
He does good writing.

00:15:40.060 --> 00:15:42.380
He works at Shutterfly doing Python there.

00:15:42.380 --> 00:15:45.060
So he takes some of his experience and puts in this article.

00:15:45.320 --> 00:15:46.180
And it's pretty cool.

00:15:46.180 --> 00:15:52.780
What I would call or sort of describe this as, this is like a very friendly introduction to asynchronous programming.

00:15:52.780 --> 00:15:57.700
So it starts out and says, let's imagine like a web server.

00:15:57.700 --> 00:16:00.120
And could it be synchronous?

00:16:00.120 --> 00:16:00.840
Sure.

00:16:00.840 --> 00:16:02.500
It would be fine if we had a synchronous web server.

00:16:02.500 --> 00:16:04.580
And we could optimize the heck out of it.

00:16:04.580 --> 00:16:11.260
But no matter how much we optimize it, like at some point you're waiting on a thing and you want to go do other stuff.

00:16:11.260 --> 00:16:16.180
For example, just like shipping the HTML back to the browser on a slow network, right?

00:16:16.180 --> 00:16:18.980
Like you want to be processing other requests and do that in the background.

00:16:18.980 --> 00:16:23.960
So he's got something to the effect of like eight or nine examples.

00:16:23.960 --> 00:16:29.440
And to sort of start them off, he says, look, the real world is asynchronous.

00:16:29.440 --> 00:16:36.340
For example, if you're a parent, kids are a long running task with high priority superseding any other task you might be doing,

00:16:36.340 --> 00:16:39.500
like a checkbook balancing or laundry or something like this.

00:16:39.500 --> 00:16:43.080
So he has a lot of like analogies back to real life that are pretty cool.

00:16:43.080 --> 00:16:46.580
Then he says, okay, we're going to go through some examples, like eight examples and build them up.

00:16:46.580 --> 00:16:51.600
Start with like a synchronous sort of job doing program that has a queue.

00:16:51.600 --> 00:16:52.520
You put some work in the queue.

00:16:52.520 --> 00:16:53.140
It does the work.

00:16:53.620 --> 00:17:02.120
And then it says, all right, let's see how we can use generator methods with the yield keyword to instantiate like cooperative multi-threading

00:17:02.120 --> 00:17:09.040
or cooperative concurrency, I guess, between those two methods, which is actually a really cool way to do it where there's no concurrent IO.

00:17:09.040 --> 00:17:10.720
There's no threads.

00:17:10.720 --> 00:17:11.920
There's no multi-processing.

00:17:11.920 --> 00:17:16.520
It's just like let's interweave the work of these two methods or multiple methods using generators,

00:17:16.520 --> 00:17:18.960
which I thought was really a cool way to look at it.

00:17:19.600 --> 00:17:22.120
And it says, okay, well, what if some of that work is slow?

00:17:22.120 --> 00:17:23.200
That's a problem.

00:17:23.200 --> 00:17:27.500
And then he kind of takes you on a tour of different APIs and libraries to make this work.

00:17:27.500 --> 00:17:30.560
So G event, twisted, twisted callbacks.

00:17:30.560 --> 00:17:33.340
And so you can compare all these different ways of doing things.

00:17:33.340 --> 00:17:37.720
And I should throw in there some AIO HTTP type things as well.

00:17:37.720 --> 00:17:42.080
But yeah, very, very cool article if you want a super gentle introduction to asynchronous programming.

00:17:42.080 --> 00:17:44.920
So this doesn't cover the AOA.

00:17:44.920 --> 00:17:45.380
AI.

00:17:45.380 --> 00:17:46.740
AI.

00:17:46.740 --> 00:17:47.720
Yes, exactly.

00:17:47.720 --> 00:17:50.280
Yeah, it doesn't cover basically the 3.5 stuff.

00:17:50.280 --> 00:17:50.640
Okay.

00:17:50.640 --> 00:17:51.140
Yeah.

00:17:51.140 --> 00:17:52.840
So this would work on any version.

00:17:52.840 --> 00:17:57.100
I really like this article because we've been talking about asynchronous for a while.

00:17:57.100 --> 00:18:02.800
And I have to admit, I have my hard time getting my head around how to think about it.

00:18:02.800 --> 00:18:08.180
I've been doing it for so long in C++, but I have a hard time getting my hand around it in Python.

00:18:08.180 --> 00:18:10.740
And this article is really a good starter.

00:18:10.740 --> 00:18:13.160
Yeah, I feel like it's definitely a good starter.

00:18:13.160 --> 00:18:15.640
I was happy to have one of our picks this week.

00:18:15.640 --> 00:18:18.900
All right, so that's all the news that we have that we've kind of found.

00:18:18.900 --> 00:18:20.280
But you have extra credit, don't you?

00:18:20.280 --> 00:18:20.660
Yeah.

00:18:20.660 --> 00:18:21.900
Well, yeah.

00:18:21.900 --> 00:18:29.340
In episode 29, I gave the wrong credit to the wrong person for cluing me into PipCash.

00:18:29.340 --> 00:18:31.480
And I'm sure they appreciated it, though.

00:18:31.700 --> 00:18:35.460
Yeah, but it really was KidPixo, and he reminded me that it was him.

00:18:35.460 --> 00:18:37.020
And so sorry about that.

00:18:37.020 --> 00:18:40.180
And thanks a lot for keeping us informed.

00:18:40.180 --> 00:18:41.560
Yeah, definitely keep...

00:18:41.560 --> 00:18:45.740
We really appreciate these ideas and these notes and these little topics people send us.

00:18:45.740 --> 00:18:46.760
They're very nice.

00:18:46.760 --> 00:18:47.920
And then I just had...

00:18:47.920 --> 00:18:48.660
I couldn't resist.

00:18:48.660 --> 00:18:56.640
This is going to be hard to do over a podcast, but we have a link to a funny comic about Python private methods.

00:18:57.080 --> 00:18:59.420
And if you haven't seen this, check it out.

00:18:59.420 --> 00:19:00.240
It's just...

00:19:00.240 --> 00:19:03.180
It's basically a key under the mat in front of a door.

00:19:03.180 --> 00:19:07.480
I love it.

00:19:07.480 --> 00:19:08.100
I love it.

00:19:08.100 --> 00:19:08.780
That's really awesome.

00:19:08.780 --> 00:19:10.580
Yeah, that's kind of the thing.

00:19:10.580 --> 00:19:13.120
It's like, it's private unless you want to look for it than it's right there.

00:19:13.120 --> 00:19:13.980
Yeah.

00:19:13.980 --> 00:19:15.820
Nice.

00:19:15.820 --> 00:19:16.280
All right.

00:19:16.280 --> 00:19:18.420
So update us on the book.

00:19:18.580 --> 00:19:21.640
The book is coming along and taking almost all of my time.

00:19:21.640 --> 00:19:24.780
The multitasking is a hard thing.

00:19:24.780 --> 00:19:31.460
But yeah, the third beta is coming out, should be out this week with the last chapter, chapter seven.

00:19:31.460 --> 00:19:41.480
And this one is using pytest with other tools like PDB and coverage and mock and talks and Jenkins and things that I get a lot of questions about.

00:19:41.680 --> 00:19:44.400
So I'm really happy to get this chapter out.

00:19:44.400 --> 00:19:45.360
Yeah, that's awesome.

00:19:45.360 --> 00:19:45.960
How about you?

00:19:45.960 --> 00:19:50.100
Yeah, last time we talked, I was recording and recording and recording Talk Python episodes.

00:19:50.100 --> 00:19:52.740
So now I'm kind of finishing up recording courses.

00:19:52.740 --> 00:19:59.000
So I've actually got two eight and nine hour courses that I've finished recording over the last couple of weeks.

00:19:59.440 --> 00:20:02.960
So I've finished recording the RESTful and HTTP services and Pyramid.

00:20:02.960 --> 00:20:07.760
And I've also finished recording and writing and recording the MongoDB for Python developers courses.

00:20:07.760 --> 00:20:11.300
So I'm working on editing the final videos for those and getting those up.

00:20:11.300 --> 00:20:12.960
So I'm really excited to get that out.

00:20:12.960 --> 00:20:13.640
Really fun.

00:20:13.640 --> 00:20:16.280
I'm really excited to take a look at that MongoDB course.

00:20:16.280 --> 00:20:18.460
That sounds very interesting.

00:20:18.460 --> 00:20:19.780
It's a cool hands-on one.

00:20:19.780 --> 00:20:24.520
We build like this database that represents a dealership and it's got like millions of records in it.

00:20:24.520 --> 00:20:28.520
We get it to where it will like do queries in like one millisecond, even with millions of records.

00:20:28.520 --> 00:20:28.920
It's fun.

00:20:29.200 --> 00:20:29.480
Nice.

00:20:29.480 --> 00:20:30.520
Yeah.

00:20:30.520 --> 00:20:31.080
Cool.

00:20:31.080 --> 00:20:31.380
All right.

00:20:31.380 --> 00:20:33.500
Well, that's our news for the week.

00:20:33.500 --> 00:20:37.080
Brian, thank you so much for, as always, sharing it with everyone.

00:20:37.080 --> 00:20:37.520
All right.

00:20:37.520 --> 00:20:37.960
Thank you.

00:20:37.960 --> 00:20:38.660
Yep.

00:20:38.660 --> 00:20:39.320
See you all later.

00:20:39.320 --> 00:20:42.320
Thank you for listening to Python Bytes.

00:20:42.320 --> 00:20:44.900
Follow the show on Twitter via at Python Bytes.

00:20:44.900 --> 00:20:47.780
That's Python Bytes as in B-Y-T-E-S.

00:20:47.780 --> 00:20:51.220
And get the full show notes at pythonbytes.fm.

00:20:51.220 --> 00:20:55.540
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:20:55.540 --> 00:20:58.260
We're always on the lookout for sharing something cool.

00:20:58.960 --> 00:21:01.640
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:21:01.640 --> 00:21:05.260
Thank you for listening and sharing this podcast with your friends and colleagues.

