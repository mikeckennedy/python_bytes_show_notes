
00:00:00.000 --> 00:00:06.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:06.000 --> 00:00:12.800
This time it's Python Bytes episode 31 recorded on Tuesday, June 20th, 2017.


00:00:12.800 --> 00:00:13.600
I'm Michael Kennedy.


00:00:13.600 --> 00:00:14.560
And I'm Brian Okken.


00:00:14.560 --> 00:00:17.120
And we have a bunch of cool things to talk about.


00:00:17.120 --> 00:00:19.760
Some of them are huge and some of them are kind of tiny.


00:00:19.760 --> 00:00:20.800
Let's start small, huh?


00:00:20.800 --> 00:00:21.840
Yeah, let's start small.


00:00:21.840 --> 00:00:27.680
I'm really appreciate, it's one of the reasons why I like following Twitter for Python news is


00:00:27.680 --> 00:00:34.400
that's where I found Tiny Mongo. So I saw somebody talking about it last week.


00:00:34.400 --> 00:00:39.280
That's awesome. I'm a fan of MongoDB and TinyDB and if they could come together,


00:00:39.280 --> 00:00:45.800
that'd be even better. Right. So this is essentially an attempt to put, it's not an


00:00:45.800 --> 00:00:52.600
exact same interface, but it's fairly close to the same interaction you do with Mongo with a


00:00:52.600 --> 00:00:53.940
the single file system.


00:00:53.940 --> 00:00:56.800
So it's a single file database.


00:00:56.800 --> 00:01:01.320
And Steven, the person working on this, did not--


00:01:01.320 --> 00:01:03.560
I talked with him, and it wasn't his intent


00:01:03.560 --> 00:01:07.120
to always be right on top of TinyDB.


00:01:07.120 --> 00:01:09.880
But so far, he's been really happy with TinyDB


00:01:09.880 --> 00:01:12.160
as the back end for TinyMongo.


00:01:12.160 --> 00:01:14.040
And so, yeah, it just sits-- it's


00:01:14.040 --> 00:01:16.680
using TinyDB as the database part,


00:01:16.680 --> 00:01:20.440
but exposes an interface that's very close to Mongo.


00:01:20.440 --> 00:01:21.760
Yeah, that's super cool.


00:01:21.760 --> 00:01:26.480
So basically, if you have code that talks to MongoDB


00:01:26.480 --> 00:01:30.800
through the PyMongo API, you could more or less adapt


00:01:30.800 --> 00:01:32.360
that really quickly to TinyMongo.


00:01:32.360 --> 00:01:36.520
And TinyDB, the backing store for this thing,


00:01:36.520 --> 00:01:41.240
more or less is like, let's create a simple document


00:01:41.240 --> 00:01:43.400
database that's really just some JSON files


00:01:43.400 --> 00:01:44.880
living on your disk.


00:01:44.880 --> 00:01:46.600
It's not a full-on production database,


00:01:46.600 --> 00:01:47.880
but if you're doing simple stuff,


00:01:47.880 --> 00:01:48.760
like really simple things,


00:01:48.760 --> 00:01:50.280
like this is actually pretty sweet.


00:01:50.280 --> 00:01:51.280
There's no server, right?


00:01:51.280 --> 00:01:53.840
Right, and yeah, there's no server.


00:01:53.840 --> 00:01:55.920
I would say probably the other direction


00:01:55.920 --> 00:01:56.840
probably works the best.


00:01:56.840 --> 00:02:01.140
So if you were gonna, your end goal was to use Mongo,


00:02:01.140 --> 00:02:04.200
that tiny Mongo might be a good way to start


00:02:04.200 --> 00:02:07.640
because it isn't the full set of functionality.


00:02:07.640 --> 00:02:11.040
I don't have a complete list of what's missing.


00:02:11.040 --> 00:02:13.160
I just have the personal experience of,


00:02:13.160 --> 00:02:17.440
I tried to take a Mongo application and just swap this in,


00:02:17.440 --> 00:02:20.040
and I ran across a few errors


00:02:20.040 --> 00:02:22.720
and I haven't finished debugging those yet.


00:02:22.720 --> 00:02:24.120
I'm just really excited about it


00:02:24.120 --> 00:02:28.300
because there's more than one document database


00:02:28.300 --> 00:02:30.220
that I can use in small applications.


00:02:30.220 --> 00:02:31.060
- Yeah, that's cool.


00:02:31.060 --> 00:02:34.320
- And then also, one of the applications for this,


00:02:34.320 --> 00:02:36.680
when I was talking with the maintainer of it,


00:02:36.680 --> 00:02:40.440
is that he's using it on Raspberry Pis even.


00:02:40.440 --> 00:02:42.720
So having a Mongo-like--


00:02:42.720 --> 00:02:44.000
- That is really cool,


00:02:44.000 --> 00:02:46.200
'cause you don't wanna start up a whole separate server


00:02:46.200 --> 00:02:47.880
on like a Raspberry Pi,


00:02:47.880 --> 00:02:50.560
but certainly having a little couple of JSON files


00:02:50.560 --> 00:02:52.620
laying around that you have like a database interface


00:02:52.620 --> 00:02:53.680
over top of, that's cool.


00:02:53.680 --> 00:02:54.860
- Yeah, definitely.


00:02:54.860 --> 00:02:56.520
So I was excited about this


00:02:56.520 --> 00:02:58.520
and I'm gonna start using it right away.


00:02:58.520 --> 00:02:59.360
- That's sweet.


00:02:59.360 --> 00:03:01.640
Yeah, if people are interested in TinyDB,


00:03:01.640 --> 00:03:06.200
I back on episode 80 of Talk Python many moons ago,


00:03:06.200 --> 00:03:09.000
I interviewed the guy who created TinyDB


00:03:09.000 --> 00:03:10.520
and talked about some of the use cases.


00:03:10.520 --> 00:03:12.040
And I think there's some extensions you can get


00:03:12.040 --> 00:03:14.080
like indexing add-ons and stuff like that.


00:03:14.080 --> 00:03:17.120
So there's a lot of stuff to do with this, pretty cool.


00:03:17.120 --> 00:03:18.660
So that sounds pretty dead simple, right?


00:03:18.660 --> 00:03:21.180
Just fire up TinyDB and off you go?


00:03:21.180 --> 00:03:22.340
- Yeah, dead simple.


00:03:22.340 --> 00:03:23.180
- You know what else?


00:03:23.180 --> 00:03:25.560
I want some dead simple validation.


00:03:25.560 --> 00:03:28.700
And so the next project I chose is called Validus.


00:03:28.700 --> 00:03:31.460
And Validus is on GitHub and it's described itself


00:03:31.460 --> 00:03:34.620
as a dead simple Python data validation library.


00:03:34.620 --> 00:03:38.380
And have you ever tried to write a regular expression


00:03:38.380 --> 00:03:41.460
to match an email or a URL or something like that?


00:03:41.460 --> 00:03:42.300
- Oh yes, yeah.


00:03:42.300 --> 00:03:43.540
- That's super fun, right?


00:03:43.540 --> 00:03:44.380
- No.


00:03:44.380 --> 00:03:45.840
(laughing)


00:03:45.840 --> 00:03:49.440
You think you get it working to someone who mails you like I have a proper email address,


00:03:49.440 --> 00:03:50.720
but I can't sign up your system.


00:03:50.720 --> 00:03:52.200
It says my email is invalid.


00:03:52.200 --> 00:03:53.600
You're like, oh, gosh.


00:03:53.600 --> 00:03:57.560
So this validist thing kind of like solves that for a class of types of data, basically


00:03:57.560 --> 00:03:58.560
simple input.


00:03:58.560 --> 00:04:03.360
So you can just import this and say validist.isEmail and give it a string and it will say yes or


00:04:03.360 --> 00:04:04.360
no.


00:04:04.360 --> 00:04:06.840
And you can ask it questions like, is it an RGB color?


00:04:06.840 --> 00:04:07.840
Is it a phone number?


00:04:07.840 --> 00:04:08.840
Is it an ISBN?


00:04:08.840 --> 00:04:11.360
Is it an IPv4 or IPv6 address?


00:04:11.360 --> 00:04:12.680
Is it a number?


00:04:12.680 --> 00:04:13.880
Is it a slug?


00:04:13.880 --> 00:04:18.600
would it fit at the end of a URL without needing encoding, all that kind of stuff.


00:04:18.600 --> 00:04:19.600
It's pretty awesome.


00:04:19.600 --> 00:04:20.600
That's cool.


00:04:20.600 --> 00:04:21.600
I'd say it's dead simple.


00:04:21.600 --> 00:04:23.080
It's even got is Mongo ID.


00:04:23.080 --> 00:04:24.080
Nice.


00:04:24.080 --> 00:04:25.920
Yeah, yeah, that's awesome.


00:04:25.920 --> 00:04:28.800
So you know what else I like about this?


00:04:28.800 --> 00:04:31.240
It's Python only, no legacy Python.


00:04:31.240 --> 00:04:32.240
3.6, 3.3.


00:04:32.240 --> 00:04:34.680
Yeah, yeah, yeah, 3.3 and above.


00:04:34.680 --> 00:04:36.200
So it's only a Python 3 thing.


00:04:36.200 --> 00:04:38.920
So yet another sweet example of that.


00:04:38.920 --> 00:04:41.680
I have a lot of interesting stuff to say about that at the end of the show.


00:04:41.680 --> 00:04:44.640
Validus but Python versus legacy Python.


00:04:44.640 --> 00:04:48.040
While this works pretty well, we may still need to jump in the debugger, right?


00:04:48.040 --> 00:04:49.040
Yeah, definitely.


00:04:49.040 --> 00:04:52.240
And I'm a command line debugger kind of person.


00:04:52.240 --> 00:04:55.120
Actually I don't really jump into the debugger too much.


00:04:55.120 --> 00:04:58.080
You're a last resort, debugger of last resort type person?


00:04:58.080 --> 00:04:59.080
Yes.


00:04:59.080 --> 00:05:00.080
Yeah, definitely.


00:05:00.080 --> 00:05:01.080
Last resort.


00:05:01.080 --> 00:05:08.040
And so in episode 29, we talked about launching the ability to launch PDB, the Python debugger


00:05:08.040 --> 00:05:10.600
from a failed Py test.


00:05:10.600 --> 00:05:14.420
on Twitter, another Twitter person, KidPixo, I think.


00:05:14.420 --> 00:05:19.580
Yeah, KidPixo, he runs the Geek Cookies Italian podcast, which I was a guest on like two and


00:05:19.580 --> 00:05:20.580
a half years ago.


00:05:20.580 --> 00:05:21.580
He's a great guy.


00:05:21.580 --> 00:05:22.580
He sends us lots of good stuff, yeah.


00:05:22.580 --> 00:05:28.180
Well, he passed this along because he said he really loves the PUDB debugger.


00:05:28.180 --> 00:05:32.420
And my first reaction is, "Oh my God, this thing is ugly," because it does look like


00:05:32.420 --> 00:05:36.220
you're back in the '80s running on a 386 or something.


00:05:36.220 --> 00:05:38.500
I feel like I've dialed into a VBS.


00:05:38.500 --> 00:05:45.940
It does have themes, so after I played with it for a while, I switched it to a midnight theme,


00:05:45.940 --> 00:05:50.580
and it looks just like I'm in my editor. It's actually pretty slick, and one of the things


00:05:50.580 --> 00:05:58.020
that you can do with it, it's a lot better than PDB, and it's still small and fast, and there's


00:05:58.020 --> 00:06:03.220
some documentation in it for how you can do the same thing that we did with PyTest. You can


00:06:03.220 --> 00:06:06.820
launch it just with whenever you hit a PyTest failure.


00:06:07.780 --> 00:06:08.620
That's sweet.


00:06:08.620 --> 00:06:09.460
- Pretty cool.


00:06:09.460 --> 00:06:10.280
- Yeah, it's really nice.


00:06:10.280 --> 00:06:12.820
I mean, you can use it over like SSH and stuff.


00:06:12.820 --> 00:06:15.700
So if you're SSH into a server, you can debug with this,


00:06:15.700 --> 00:06:17.980
but it actually has like little windows.


00:06:17.980 --> 00:06:19.820
I mean, it really does feel like I'm back on a BBS.


00:06:19.820 --> 00:06:20.660
It's awesome.


00:06:20.660 --> 00:06:22.280
Like you see your code and you can step through it.


00:06:22.280 --> 00:06:23.660
You've got like a variables window


00:06:23.660 --> 00:06:25.100
and a stack and break points.


00:06:25.100 --> 00:06:26.660
And like, it's really nice.


00:06:26.660 --> 00:06:28.940
It's like a ASCII curses type thing.


00:06:28.940 --> 00:06:31.940
- But the local, yeah, the local window


00:06:31.940 --> 00:06:33.460
already having your listing up


00:06:33.460 --> 00:06:35.940
and also all your local variables


00:06:35.940 --> 00:06:39.280
And that changing when you go up and down the stack is,


00:06:39.280 --> 00:06:41.340
it's just, it's usually enough.


00:06:41.340 --> 00:06:42.260
So I like it.


00:06:42.260 --> 00:06:44.660
- Yeah, yeah, yeah, it definitely hits the sweet spot,


00:06:44.660 --> 00:06:47.780
like the 80% case for debuggers.


00:06:47.780 --> 00:06:48.880
It's cool.


00:06:48.880 --> 00:06:50.360
All right, so I'm definitely gonna start using that


00:06:50.360 --> 00:06:53.500
if I need to debug anything without a Windows environment,


00:06:53.500 --> 00:06:56.660
a windowing environment like Mac OS or Linux or Windows.


00:06:56.660 --> 00:06:59.600
Okay, so the next thing that I wanna talk about


00:06:59.600 --> 00:07:03.460
is a really interesting and sort of wide ranging study


00:07:03.460 --> 00:07:07.260
that the guys at pyup.io did.


00:07:07.260 --> 00:07:09.260
So pyup.io is a cool service.


00:07:09.260 --> 00:07:13.240
I'm actually a paying customer of theirs because I really think what they're doing is awesome


00:07:13.240 --> 00:07:14.720
and I use it for my web apps.


00:07:14.720 --> 00:07:22.280
So the idea is you basically point, you give pyup.io access to your requirements file in


00:07:22.280 --> 00:07:24.680
your public or private GitHub repo.


00:07:24.680 --> 00:07:28.880
And if there's a new version of Indy requirement or transitive requirement that you depend


00:07:28.880 --> 00:07:33.760
upon, it will tell you like, hey, there's a new release of the pyramid web framework.


00:07:33.760 --> 00:07:34.840
And here's the change log.


00:07:34.840 --> 00:07:36.460
And actually, this one's a security update.


00:07:36.460 --> 00:07:38.000
So get in there and fix it quick.


00:07:38.000 --> 00:07:41.560
So it will like basically watch your requirements and tell you if there are any upgrades and


00:07:41.560 --> 00:07:42.560
things like that.


00:07:42.560 --> 00:07:43.820
And it'll issue them as a pull request.


00:07:43.820 --> 00:07:44.820
So really cool.


00:07:44.820 --> 00:07:48.760
So these guys have access to all these requirements, files and many other things, right.


00:07:48.760 --> 00:07:52.480
And they studied some Django requirements files on GitHub.


00:07:52.480 --> 00:07:55.880
Now this isn't through their business, they were able to use BigQuery to just get ahold


00:07:55.880 --> 00:08:00.080
of all of the Django requirement files that are on GitHub.


00:08:00.080 --> 00:08:01.280
And they found some interesting things.


00:08:01.280 --> 00:08:05.920
And I guess this is not private, not the private repos, probably just the public ones.


00:08:05.920 --> 00:08:10.820
But anyway, they said that Django is the most popular web framework.


00:08:10.820 --> 00:08:11.820
And it's pretty old.


00:08:11.820 --> 00:08:14.720
It's been around for 12 years using all sorts of different projects.


00:08:14.720 --> 00:08:19.320
So let's look at these requirements files, which specify like all the dependencies you


00:08:19.320 --> 00:08:22.440
have to install, and see what we can get from them.


00:08:22.440 --> 00:08:27.280
So the first thing they ask is do developers pin or freeze their requirements, right?


00:08:27.280 --> 00:08:30.840
That's where in your requirements, txt, you could say I depend on Django, and I depend


00:08:30.840 --> 00:08:34.920
on SQL alchemy, and I depend on requests, or you could say it depend on Django equal


00:08:34.920 --> 00:08:38.720
equal this version request equal equal that version, right?


00:08:38.720 --> 00:08:40.160
That's pending and freezing.


00:08:40.160 --> 00:08:45.520
And they said that 64% of Django developers pin their requirements.


00:08:45.520 --> 00:08:46.720
That's interesting.


00:08:46.720 --> 00:08:49.680
And another 20% or so do ranges.


00:08:49.680 --> 00:08:56.140
So like I'm willing to take this range of versions but not leave it unpin.


00:08:56.140 --> 00:08:59.860
And then some of them are just like, give me whatever I get when I ask for it.


00:08:59.860 --> 00:09:00.860
So that's interesting.


00:09:00.860 --> 00:09:06.140
Another thing that they said was pretty interesting is that Django 1.8, even though I think 1.10,


00:09:06.140 --> 00:09:11.780
1.11 is the latest, Django 1.8 is the most popular of them.


00:09:11.780 --> 00:09:13.780
And that was pretty cool.


00:09:13.780 --> 00:09:19.360
But one of the things I really wanted to point out here is they said that what is more worrisome


00:09:19.360 --> 00:09:27.920
is 1.9, 1.7, and 1.6 are second, third, and fourth most popular on the list.


00:09:27.920 --> 00:09:28.920
Why is that a problem?


00:09:28.920 --> 00:09:32.680
None of them are receiving any security updates at all.


00:09:32.680 --> 00:09:33.680
Oh, weird.


00:09:33.680 --> 00:09:35.000
So what, okay, isn't that bad?


00:09:35.000 --> 00:09:38.160
So 1.7 and 1.6 went end of life over two years ago.


00:09:38.160 --> 00:09:43.560
So if you are on the web and your application listens on a socket, you want it to have all


00:09:43.560 --> 00:09:46.040
the security patches, let me tell you.


00:09:46.040 --> 00:09:47.040
That's bad news.


00:09:47.040 --> 00:09:52.120
And here's like, if I add those up really quick, that's something like 40% of Django


00:09:52.120 --> 00:09:55.320
files they found are using these older versions.


00:09:55.320 --> 00:10:00.000
And in fact, he said only 2% of all Django projects they could find are actually on a


00:10:00.000 --> 00:10:02.120
secure release.


00:10:02.120 --> 00:10:08.960
Among all the projects more than 60% use Django releases with one or more known security vulnerabilities.


00:10:08.960 --> 00:10:14.440
And that's pretty intense, man, that only 2% of them are on a 100% known secure release.


00:10:14.440 --> 00:10:19.720
Well, I mean, clearly, it's recommended to go make sure that you're using a secure release.


00:10:19.720 --> 00:10:23.160
But I was curious about the pinning or freezing.


00:10:23.160 --> 00:10:26.000
Is that considered best practice?


00:10:26.000 --> 00:10:28.280
So I think it depends on what you're doing.


00:10:28.280 --> 00:10:32.600
For large, complicated applications, it's definitely considered a best practice.


00:10:32.600 --> 00:10:38.720
The idea is, you want to make the upgrade in your dependencies at the time of your choosing,


00:10:38.720 --> 00:10:39.720
right?


00:10:39.720 --> 00:10:40.720
Like you want to have...


00:10:40.720 --> 00:10:44.440
If you're going to upgrade from, especially major frameworks like Django, if you're going


00:10:44.440 --> 00:10:49.760
to go from Django 1.8 to 1.9, you don't want that to just happen one day when it gets released


00:10:49.760 --> 00:10:53.360
and you happen to refresh your server because that might have breaking changes.


00:10:53.360 --> 00:10:55.640
So you want to explicitly say, "I depend on this one.


00:10:55.640 --> 00:10:56.920
Oh, there's a new one out.


00:10:56.920 --> 00:11:02.720
Let me test the new one," and then explicitly change that number and have it flip it for


00:11:02.720 --> 00:11:03.720
you.


00:11:03.720 --> 00:11:07.040
And basically, that's what the PyUp service does that I use.


00:11:07.040 --> 00:11:10.400
it will automatically upgrade my Pyramid web framework


00:11:10.400 --> 00:11:14.380
from 1.7 to 1.8 to 1.9, but it doesn't flip it immediately.


00:11:14.380 --> 00:11:15.980
It's like I have to, it'll tell me


00:11:15.980 --> 00:11:17.980
and change my requirements files as a PR


00:11:17.980 --> 00:11:19.620
and I'll have to accept it basically.


00:11:19.620 --> 00:11:20.580
- Okay.


00:11:20.580 --> 00:11:23.480
- Yeah, but pretty interesting stats there,


00:11:23.480 --> 00:11:25.100
especially if you're into Django, check that out.


00:11:25.100 --> 00:11:25.940
- Yeah, definitely.


00:11:25.940 --> 00:11:27.900
It's kind of concerning that there's so many,


00:11:27.900 --> 00:11:32.240
and then those are, sorry to hang out on this so much,


00:11:32.240 --> 00:11:35.060
but was this projects or applications


00:11:35.060 --> 00:11:36.140
and is there a difference?


00:11:36.140 --> 00:11:40.900
So as far as I can tell from the, I don't really know, Yanis, I think this guy who wrote


00:11:40.900 --> 00:11:45.940
it probably could maybe chime in in the comments if he's listening, but my understanding is


00:11:45.940 --> 00:11:51.980
basically they went and they studied the public repos that use Django.


00:11:51.980 --> 00:11:57.700
So this also may not be quite representative because companies like Pinterest that depend


00:11:57.700 --> 00:12:01.100
on Django, they're obviously not going to make their code public, right?


00:12:01.100 --> 00:12:03.660
So they may be doing slightly different things.


00:12:03.660 --> 00:12:05.620
But still, it's interesting for you


00:12:05.620 --> 00:12:08.020
and to at least the open source side of Django.


00:12:08.020 --> 00:12:09.060
- Definitely, it's cool.


00:12:09.060 --> 00:12:10.300
- Speaking of open source projects,


00:12:10.300 --> 00:12:12.740
do you think they should have a changelog?


00:12:12.740 --> 00:12:15.020
- Well, that's what I was curious about.


00:12:15.020 --> 00:12:19.020
Yeah, so I kind of am warming to the idea of changelogs.


00:12:19.020 --> 00:12:21.420
I appreciate other projects with changelogs.


00:12:21.420 --> 00:12:24.860
I actually asked some people back on Twitter again


00:12:24.860 --> 00:12:26.340
what they thought of them.


00:12:26.340 --> 00:12:28.700
And there's a couple things I came across,


00:12:28.700 --> 00:12:31.860
which was a website called Keepachangelog.


00:12:31.860 --> 00:12:32.940
- I really like that site.


00:12:32.940 --> 00:12:34.980
It's so clear and compelling.


00:12:34.980 --> 00:12:35.980
It's great.


00:12:35.980 --> 00:12:36.980
Yeah.


00:12:36.980 --> 00:12:41.100
Well, it's also, it talks about that there really isn't a standard, if there is a standard


00:12:41.100 --> 00:12:45.460
format for them, this is probably as close as you can get.


00:12:45.460 --> 00:12:50.580
And there's, it talks about different standards in either REST or in Markdown.


00:12:50.580 --> 00:12:52.620
There's different ways to do it.


00:12:52.620 --> 00:12:57.460
And then when I was talking to, talking on Twitter about changelogs, some of the people


00:12:57.460 --> 00:13:03.180
from the PyTest project piped up and said that they're using a tool called TownCrier


00:13:03.180 --> 00:13:06.180
to maintain their change log.


00:13:06.180 --> 00:13:08.020
That looks really cool, but I've never done anything with it.


00:13:08.020 --> 00:13:09.020
What's TownCrier do?


00:13:09.020 --> 00:13:14.620
So what it does is you keep a separate directory within your project so that you can have it


00:13:14.620 --> 00:13:21.300
on different, if you're using different branches, and then different changes go in and you keep


00:13:21.300 --> 00:13:26.360
the changes in little snippet files so that since they're separate files,


00:13:26.360 --> 00:13:30.640
they merge easy because they're going to be a new file for each change.


00:13:30.640 --> 00:13:32.580
Then you go through and say,


00:13:32.580 --> 00:13:34.820
"Okay, I've pulled all these things in.


00:13:34.820 --> 00:13:39.140
I want to go ahead and take everything in the directory and add it to the changelog."


00:13:39.140 --> 00:13:41.260
>> Oh, I see. You can keep a separate file that says,


00:13:41.260 --> 00:13:42.800
"These are the breaking changes.


00:13:42.800 --> 00:13:44.700
These are the new features," or whatever,


00:13:44.700 --> 00:13:46.180
then it'll build a changelog out of them?


00:13:46.180 --> 00:13:46.620
>> Yeah.


00:13:46.620 --> 00:13:47.540
>> Oh, sweet. Okay.


00:13:47.540 --> 00:13:50.940
>> Well, it can add to your existing one.


00:13:50.940 --> 00:13:54.940
And one of the things I liked, if you're not doing something like Town Crier,


00:13:54.940 --> 00:13:58.940
one of the recommendations from Keep a Change Log was to keep at the top


00:13:58.940 --> 00:14:02.940
unreleased changes so that you, things that you haven't


00:14:02.940 --> 00:14:06.940
put a label on or done an official supported release yet.


00:14:06.940 --> 00:14:10.940
Because those are things that may, I don't know, maybe you may end up kicking out.


00:14:10.940 --> 00:14:14.940
Yeah, they also have some things that you shouldn't do, like don't just take your


00:14:14.940 --> 00:14:18.940
Get Change Log and make that your proper change log, things like that.


00:14:18.940 --> 00:14:23.040
Yeah, and the one of the things there I saw when I was doing some research for this


00:14:23.040 --> 00:14:26.180
I did see some some various automated ways to do it


00:14:26.180 --> 00:14:28.720
but that's the sort of thing is you're gonna pull things out of


00:14:28.720 --> 00:14:32.280
file changes and that's not really what you want. You really want a


00:14:32.280 --> 00:14:36.680
human moderated list of things that went in and


00:14:36.680 --> 00:14:44.720
That's one of the reasons why I like Town Crier because it was sort of halfway in between. Yep. Yeah, it's it's definitely


00:14:45.340 --> 00:14:51.940
Really really it's like a nice way to sort of manage that human but because you don't want merged conflict took PR


00:14:51.940 --> 00:14:56.460
Accepted this I I changed the spelling like, you know, you don't need all that noise


00:14:56.460 --> 00:15:00.740
You just want the four things that change do I want to upgrade to this or not? Whatever. Let's just move on, right?


00:15:00.740 --> 00:15:01.240
Yeah


00:15:01.240 --> 00:15:04.360
and then I guess I would lump this in last time we talked about


00:15:04.360 --> 00:15:11.120
different decisions based on scaling and for projects that I'm just I'm the main maintainer of I


00:15:11.220 --> 00:15:13.660
I would definitely just keep a file.


00:15:13.660 --> 00:15:18.620
But if we start getting a lot of contributors, then something like Town Crier totally makes


00:15:18.620 --> 00:15:19.620
sense.


00:15:19.620 --> 00:15:21.340
Yeah, I think it's I think it's really nice.


00:15:21.340 --> 00:15:22.860
I'm gonna definitely look into it.


00:15:22.860 --> 00:15:28.380
All right, last thing I want to talk about is asynchronous programming, which is something


00:15:28.380 --> 00:15:30.300
that I talk about often because I'm a big fan.


00:15:30.300 --> 00:15:35.580
This is an article called understanding asynchronous programming in Python by Doug Farrell from


00:15:35.580 --> 00:15:37.140
Dan Bader site.


00:15:37.140 --> 00:15:40.260
And we've had some of Doug stuff on before he does good writing.


00:15:40.260 --> 00:15:42.860
He works at Shutterfly doing Python there.


00:15:42.860 --> 00:15:45.780
He takes some of his experience and puts it in this article.


00:15:45.780 --> 00:15:46.780
It's pretty cool.


00:15:46.780 --> 00:15:52.220
What I would call or describe this as is a very friendly introduction to asynchronous


00:15:52.220 --> 00:15:53.220
programming.


00:15:53.220 --> 00:15:59.420
It starts out and says, "Let's imagine a web server."


00:15:59.420 --> 00:16:00.420
Could it be synchronous?


00:16:00.420 --> 00:16:03.020
Sure, it would be fine if we had a synchronous web server.


00:16:03.020 --> 00:16:07.940
We could optimize the heck out of it, but no matter how much we optimize it, at some


00:16:07.940 --> 00:16:11.380
point you're waiting on a thing, and you want to go do other stuff.


00:16:11.380 --> 00:16:16.300
For example, just like shipping the HTML back to the browser on a slow network, right?


00:16:16.300 --> 00:16:20.420
Like you want to be processing other requests and do that in the background.


00:16:20.420 --> 00:16:25.820
So he's got something to the effect of like eight or nine examples.


00:16:25.820 --> 00:16:29.780
And to sort of start them off, he says, look, the real world is asynchronous.


00:16:29.780 --> 00:16:34.900
For example, if you're a parent, kids are long running task with high priority, superseding


00:16:34.900 --> 00:16:39.020
any other tasks you might be doing, like a checkbook balancing or laundry or something


00:16:39.020 --> 00:16:40.020
like this.


00:16:40.020 --> 00:16:43.060
So he's a lot of like analogies back to real life that are pretty cool.


00:16:43.060 --> 00:16:46.260
Then he says, Okay, we're gonna go through some examples, like eight examples and build


00:16:46.260 --> 00:16:47.300
them up.


00:16:47.300 --> 00:16:51.980
Start with like a synchronous sort of job doing program that has a queue, you put some


00:16:51.980 --> 00:16:53.980
work in the queue, it does the work.


00:16:53.980 --> 00:16:58.940
And then it says, Alright, let's see how we can use generator methods with the yield keyword


00:16:58.940 --> 00:17:04.940
to instantiate like cooperative multi threading or cooperative concurrency, I guess, between


00:17:04.940 --> 00:17:08.180
those two methods, which is actually a really cool way to do it where there's, there's no


00:17:08.180 --> 00:17:12.660
concurrent IO, there's no, there's no threads, there's no multi processing, it's just like,


00:17:12.660 --> 00:17:16.620
let's interweave the work of these two methods or multiple multiple methods using generators,


00:17:16.620 --> 00:17:19.220
which I thought was really a cool way to look at it.


00:17:19.220 --> 00:17:23.620
This is okay, well, but what if some of that work is slow, that's a problem.


00:17:23.620 --> 00:17:27.460
And then he kind of takes you on a tour of different API's and libraries to make this


00:17:27.460 --> 00:17:30.580
So G event, twisted, twisted callbacks.


00:17:30.580 --> 00:17:33.780
And so you can compare all these different ways of doing things.


00:17:33.780 --> 00:17:37.740
And I should throw in there some AIO HTTP type things as well.


00:17:37.740 --> 00:17:39.340
But yeah, very, very cool article if you


00:17:39.340 --> 00:17:42.180
want a super gentle introduction to asynchronous programming.


00:17:42.180 --> 00:17:44.940
So this doesn't cover the AO--


00:17:44.940 --> 00:17:46.380
AI.


00:17:46.380 --> 00:17:47.020
AI.


00:17:47.020 --> 00:17:47.780
Yes, exactly.


00:17:47.780 --> 00:17:50.380
Yeah, it doesn't cover basically the 3.5 stuff.


00:17:50.380 --> 00:17:50.900
OK.


00:17:50.900 --> 00:17:51.700
Yeah.


00:17:51.700 --> 00:17:53.140
So this would work on any version.


00:17:53.140 --> 00:17:55.200
I really like this article because we've


00:17:55.200 --> 00:17:59.680
We've been talking about asynchronous for a while and I have to admit I have my hard


00:17:59.680 --> 00:18:02.840
time getting my head around how to think about it.


00:18:02.840 --> 00:18:07.400
I've been doing it for so long in C++ but I have a hard time getting my hand around


00:18:07.400 --> 00:18:10.840
it in Python and this article is really a good starter.


00:18:10.840 --> 00:18:13.240
Yeah, I feel like it's definitely a good starter.


00:18:13.240 --> 00:18:15.880
I was happy to pick one of our picks this week.


00:18:15.880 --> 00:18:19.360
All right, so that's all the news that we have that we've kind of found but you have


00:18:19.360 --> 00:18:21.600
extra credit, don't you?


00:18:21.600 --> 00:18:25.480
- Well yeah, in episode 29, I gave the wrong,


00:18:25.480 --> 00:18:29.920
credit to the wrong person for cluing me into Pipcache.


00:18:29.920 --> 00:18:31.720
- I'm sure they appreciated it though.


00:18:31.720 --> 00:18:34.000
- Yeah, but it really was KidPixo,


00:18:34.000 --> 00:18:35.560
and he reminded me that it was him,


00:18:35.560 --> 00:18:37.120
and so sorry about that,


00:18:37.120 --> 00:18:40.520
and thanks a lot for keeping us informed.


00:18:40.520 --> 00:18:43.360
- Yeah, definitely keep, we really appreciate these ideas


00:18:43.360 --> 00:18:46.120
and these notes and these little topics people send us.


00:18:46.120 --> 00:18:46.960
They're very nice.


00:18:46.960 --> 00:18:49.480
- And then I just had, I couldn't resist,


00:18:49.480 --> 00:18:51.360
this is gonna be hard to do over a podcast,


00:18:51.360 --> 00:18:54.840
but we have a link to a funny comic


00:18:54.840 --> 00:18:57.280
about Python private methods.


00:18:57.280 --> 00:18:59.500
And if you haven't seen this, check it out.


00:18:59.500 --> 00:19:02.520
It's just, it's basically a key under the mat


00:19:02.520 --> 00:19:03.500
in front of a door.


00:19:03.500 --> 00:19:07.000
(both laughing)


00:19:07.000 --> 00:19:09.640
- I love it, I love it, that's really awesome.


00:19:09.640 --> 00:19:10.920
Yeah, that's kind of the thing, it's like,


00:19:10.920 --> 00:19:12.560
it's private unless you wanna look for it,


00:19:12.560 --> 00:19:13.860
then it's right there.


00:19:13.860 --> 00:19:14.700
- Yeah.


00:19:14.700 --> 00:19:18.680
- Nice, all right, so update us on the book.


00:19:18.680 --> 00:19:20.000
- The book is coming along


00:19:20.000 --> 00:19:22.340
and taking almost all of my time.


00:19:22.340 --> 00:19:25.340
The multitasking is a hard thing.


00:19:25.340 --> 00:19:28.060
But yeah, the third beta is coming out,


00:19:28.060 --> 00:19:31.920
should be out this week with the last chapter, chapter seven.


00:19:31.920 --> 00:19:34.520
And this one is using PyTest with other tools


00:19:34.520 --> 00:19:39.140
like PDB and coverage and mock and talks and Jenkins


00:19:39.140 --> 00:19:41.600
and things that I get a lot of questions about.


00:19:41.600 --> 00:19:44.560
So I'm really happy to get this chapter out.


00:19:44.560 --> 00:19:45.540
- Yeah, that's awesome.


00:19:45.540 --> 00:19:46.380
- How about you?


00:19:46.380 --> 00:19:47.940
- Yeah, last time we talked, I was recording


00:19:47.940 --> 00:19:50.200
and recording and recording talk Python episodes.


00:19:50.200 --> 00:19:52.860
So now I'm kind of finishing up recording courses.


00:19:52.860 --> 00:19:56.780
So I've actually got two eight and nine hour courses


00:19:56.780 --> 00:19:59.540
that I've finished recording over the last couple of weeks.


00:19:59.540 --> 00:20:01.500
So I've finished recording the RESTful


00:20:01.500 --> 00:20:03.300
and ACP services in Pyramid.


00:20:03.300 --> 00:20:05.780
And I've also finished recording and writing recording


00:20:05.780 --> 00:20:08.240
the MongoDB for Python developers courses.


00:20:08.240 --> 00:20:10.700
So I'm working on editing the final videos for those


00:20:10.700 --> 00:20:11.540
and getting those up.


00:20:11.540 --> 00:20:13.180
So I'm really excited to get that out.


00:20:13.180 --> 00:20:14.020
Really fun.


00:20:14.020 --> 00:20:16.820
- I'm really excited to take a look at that MongoDB course.


00:20:16.820 --> 00:20:17.660
That sounds--


00:20:17.660 --> 00:20:18.620
- Very interesting.


00:20:18.620 --> 00:20:19.860
- It's a cool hands-on one.


00:20:19.860 --> 00:20:22.860
We build like this database that represents a dealership


00:20:22.860 --> 00:20:24.580
and it's got like millions of records in it.


00:20:24.580 --> 00:20:26.300
We get it to where we'll like do queries


00:20:26.300 --> 00:20:28.580
in like one millisecond, even with millions of records.


00:20:28.580 --> 00:20:29.420
It's fun.


00:20:29.420 --> 00:20:30.340
- Nice.


00:20:30.340 --> 00:20:31.180
- Yeah.


00:20:31.180 --> 00:20:32.000
- Cool.


00:20:32.000 --> 00:20:33.540
- All right, well, that's our news for the week.


00:20:33.540 --> 00:20:36.420
Brian, thank you so much for, as always,


00:20:36.420 --> 00:20:37.260
sharing with everyone.


00:20:37.260 --> 00:20:38.480
- All right, thank you.


00:20:38.480 --> 00:20:39.740
- Yep, see you all later.


00:20:39.740 --> 00:20:42.500
Thank you for listening to Python Bytes.


00:20:42.500 --> 00:20:45.000
Follow the show on Twitter via @PythonBytes.


00:20:45.000 --> 00:20:48.160
That's Python Bytes as in B-Y-T-E-S.


00:20:48.160 --> 00:20:51.560
And get the full show notes at pythonbytes.fm.


00:20:51.560 --> 00:20:53.160
If you have a news item you want featured,


00:20:53.160 --> 00:20:55.640
just visit pythonbytes.fm and send it our way.


00:20:55.640 --> 00:20:58.800
We're always on the lookout for sharing something cool.


00:20:58.800 --> 00:21:00.640
On behalf of myself and Brian Auchin,


00:21:00.640 --> 00:21:02.160
this is Michael Kennedy.


00:21:02.160 --> 00:21:04.160
Thank you for listening and sharing this podcast


00:21:04.160 --> 00:21:05.800
with your friends and colleagues.

