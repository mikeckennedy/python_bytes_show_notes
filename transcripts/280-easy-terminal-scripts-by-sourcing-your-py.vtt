WEBVTT

00:00:00.001 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.000 --> 00:00:10.080
This is episode 280, recorded April 19th, 2022.

00:00:10.080 --> 00:00:11.540
I'm Michael Kennedy.

00:00:11.540 --> 00:00:12.580
And I'm Brian Okken.

00:00:12.580 --> 00:00:13.880
And I'm Pat Decker.

00:00:13.880 --> 00:00:15.680
Welcome, Pat. Good to have you here.

00:00:15.680 --> 00:00:17.100
Well, thanks for having me on.

00:00:17.100 --> 00:00:18.740
Yeah, it's really exciting.

00:00:18.740 --> 00:00:24.480
You and I were chatting a bit about less new programming languages a bit over email.

00:00:24.480 --> 00:00:30.800
And yeah, it'd be fun to just have you come on and share some of the things that you're passionate about and whatnot.

00:00:30.800 --> 00:00:31.900
Tell people a bit about yourself.

00:00:31.900 --> 00:00:35.260
I got started with computers way back in the day.

00:00:35.260 --> 00:00:38.000
High school, I had an Apple II computer at school.

00:00:38.000 --> 00:00:40.980
Eventually got a Commodore 64 at home.

00:00:40.980 --> 00:00:44.800
I did Pascal on cards at Iowa State University.

00:00:44.800 --> 00:00:51.440
And I did a data processing program at Kirkwood in Cedar Rapids.

00:00:51.720 --> 00:00:55.680
And got my first job out of there about 30 years ago or so.

00:00:55.680 --> 00:01:04.520
So I've worked mainframe and PC, Cobalt, C, and a little bit of Python here and there.

00:01:04.520 --> 00:01:05.260
Fantastic.

00:01:05.260 --> 00:01:08.040
And it sounds like you're doing DevOps type things today.

00:01:08.040 --> 00:01:17.600
Yeah, the company has, like many, gone from on-site in their own data center to 80% or so running on AWS.

00:01:18.200 --> 00:01:23.700
And so I get to share your same frustration with the AWS interface in Python.

00:01:23.700 --> 00:01:26.480
It's not always obvious how that works.

00:01:26.480 --> 00:01:28.860
It's updated every week.

00:01:28.860 --> 00:01:35.500
And I know the way it is updated every week has got to be some code gen is running somewhere that regenerates it.

00:01:35.500 --> 00:01:38.260
And it's just never quite discoverable.

00:01:38.720 --> 00:01:38.880
Right.

00:01:38.880 --> 00:01:43.120
It's fine once you get it working, as long as you don't touch it or have to understand it.

00:01:43.120 --> 00:01:46.400
This is not the sign of a fantastic API, but it's cool.

00:01:46.400 --> 00:01:48.340
You get it working in AWS.

00:01:48.340 --> 00:01:48.980
Cool.

00:01:48.980 --> 00:01:49.920
Well, great to have you here.

00:01:49.920 --> 00:01:55.760
Now, Brian, before we jump over to your first topic, I just want to say this episode is brought to you by Mergify.

00:01:56.140 --> 00:01:58.900
I am psyched about what these guys are offering.

00:01:58.900 --> 00:02:00.440
Mergify is super cool.

00:02:00.440 --> 00:02:03.360
It's all about automating Git collaboration.

00:02:03.360 --> 00:02:08.920
And I have a lot to say about Git, but I want to start with Pi because I love Pi.

00:02:08.920 --> 00:02:10.840
Banana cream pie is my favorite.

00:02:10.840 --> 00:02:11.620
I'll take a cheesecake.

00:02:11.620 --> 00:02:12.520
Does that count as a Pi?

00:02:12.520 --> 00:02:13.700
Is that what we're talking about?

00:02:13.700 --> 00:02:17.080
No, we're talking about HTT Pi.

00:02:19.680 --> 00:02:20.560
Still a good Pi.

00:02:20.560 --> 00:02:20.820
Yeah.

00:02:20.820 --> 00:02:26.660
The website actually lists in their readme, tells you exactly how they wish you to pronounce it right off the bat.

00:02:26.660 --> 00:02:28.880
H-A-T-T-Pi.

00:02:28.880 --> 00:02:31.700
Anyway, it's a really cool tool.

00:02:31.700 --> 00:02:37.860
It's a command line tool, and I think we've covered it before, for interacting with...

00:02:37.860 --> 00:02:39.400
It's especially useful for APIs.

00:02:39.400 --> 00:02:40.760
So, you know...

00:02:40.760 --> 00:02:44.260
It's one of the first things I install on any server on my Mac if I get a new one.

00:02:44.260 --> 00:02:45.520
Straight up, this thing is fantastic.

00:02:45.520 --> 00:02:46.180
Yeah, yeah.

00:02:46.180 --> 00:02:48.980
And it's so fantastic that it had 60...

00:02:48.980 --> 00:02:49.980
This is what I want to cover.

00:02:49.980 --> 00:02:51.200
I'm sorry to laugh.

00:02:51.200 --> 00:02:57.060
It had 54,000 stars on GitHub, and then it lost them.

00:02:57.060 --> 00:02:57.580
Then it didn't?

00:02:57.580 --> 00:02:58.700
Then it didn't.

00:02:58.700 --> 00:03:01.400
So, oof, what a cliff.

00:03:01.400 --> 00:03:04.440
So, how many does it have now?

00:03:04.440 --> 00:03:06.780
Right now, if we look, it's got 16.1 thousand.

00:03:06.780 --> 00:03:08.340
Oh my gosh, it's way back.

00:03:08.340 --> 00:03:08.720
Yeah.

00:03:08.720 --> 00:03:12.400
Actually, this morning when I looked, it was just 16.0 thousand.

00:03:12.400 --> 00:03:16.780
So, it's gotten 100 stars just as I was researching this.

00:03:17.080 --> 00:03:19.300
So, anyway, the...

00:03:19.300 --> 00:03:21.040
That's one of the...

00:03:21.040 --> 00:03:23.740
I guess what I want to shout out to these guys of...

00:03:23.740 --> 00:03:25.160
It's a cool tool.

00:03:25.160 --> 00:03:27.280
If you're doing APIs, check it out.

00:03:27.280 --> 00:03:31.700
And also, if you've started before, restart it because they deserve it.

00:03:32.020 --> 00:03:36.980
And what happened was they accidentally put their repo private for...

00:03:36.980 --> 00:03:42.800
Somebody was trying to do make it private, make something, some other test repo private.

00:03:42.800 --> 00:03:46.140
And they accidentally put the main one private.

00:03:46.140 --> 00:03:49.640
And if you're even private for a second, you lose all your stars.

00:03:49.640 --> 00:03:51.360
So, warning.

00:03:51.360 --> 00:03:53.600
Don't make your public stuff private.

00:03:53.600 --> 00:03:54.140
Don't do that.

00:03:54.800 --> 00:03:55.360
Oops.

00:03:55.360 --> 00:03:56.640
Wow.

00:03:56.640 --> 00:03:57.940
That is...

00:03:57.940 --> 00:03:58.360
Yeah.

00:03:58.360 --> 00:03:59.300
It's a good warning.

00:03:59.300 --> 00:04:01.360
It's a great tool, but a good warning.

00:04:01.360 --> 00:04:03.160
It does have a danger zone.

00:04:03.160 --> 00:04:03.760
Danger zone.

00:04:03.760 --> 00:04:04.520
This is going to happen.

00:04:04.520 --> 00:04:12.140
But unfortunately, the warning is equivalent if there's zero followers and zero people interested

00:04:12.140 --> 00:04:12.440
in it.

00:04:12.440 --> 00:04:14.500
Or you have one of the most popular things on GitHub.

00:04:14.500 --> 00:04:17.420
Like, it should be like, this is super duper important.

00:04:17.420 --> 00:04:19.460
You're going to lose 54,000 GitHub stars.

00:04:19.460 --> 00:04:20.120
Are you doing it?

00:04:20.640 --> 00:04:21.020
Yeah.

00:04:21.020 --> 00:04:28.060
Well, and also, I mean, if you work with a lot of GitHub repos and you're like, maybe

00:04:28.060 --> 00:04:32.040
you made something public for a talk and then you're making it private because, I don't

00:04:32.040 --> 00:04:33.560
know, the talk's over or whatever.

00:04:33.560 --> 00:04:36.400
Or you just don't want to maintain something like, I'm just done with this thing.

00:04:36.400 --> 00:04:40.260
If you're working with it a lot, maybe you've seen that warning so many times that you're

00:04:40.260 --> 00:04:42.780
not really reading it anymore and double checking.

00:04:42.780 --> 00:04:45.440
So, I guess this is just a warning.

00:04:45.440 --> 00:04:46.640
Double check it.

00:04:46.640 --> 00:04:49.580
If you can see that warning box, make sure you're on the right repo.

00:04:50.380 --> 00:04:50.820
Indeed.

00:04:50.820 --> 00:04:52.780
And Pat, what do you think about this?

00:04:52.780 --> 00:04:54.160
Yeah, it's pretty tragic.

00:04:54.160 --> 00:04:58.580
It's kind of like those end user license agreements where we all see them so often, they just

00:04:58.580 --> 00:05:00.320
automatically click, I think.

00:05:00.320 --> 00:05:01.500
Yeah, exactly.

00:05:01.500 --> 00:05:03.720
The confirmation dialogues and stuff.

00:05:03.720 --> 00:05:05.800
You're like, well, I have to copy this and paste that there.

00:05:05.800 --> 00:05:06.640
I just can't continue.

00:05:06.640 --> 00:05:07.720
So, I'm going to just, you know.

00:05:07.720 --> 00:05:11.920
Instead of warning danger, I think people see, I want to get my work done.

00:05:11.920 --> 00:05:14.260
So, click here to get my work done.

00:05:14.260 --> 00:05:15.340
And then, oh, no, what happened?

00:05:15.340 --> 00:05:16.020
Yeah.

00:05:16.020 --> 00:05:16.620
Yeah.

00:05:16.880 --> 00:05:17.140
Yeah.

00:05:17.140 --> 00:05:21.940
Well, Brian, I believe you have at least helped a little bit.

00:05:21.940 --> 00:05:24.260
David, out in the audience, starting it right now.

00:05:24.260 --> 00:05:25.500
Oh, I forgot to start also.

00:05:25.500 --> 00:05:26.180
I'm going to go start.

00:05:26.180 --> 00:05:27.060
You better get in there and start.

00:05:27.060 --> 00:05:27.280
Boom.

00:05:27.280 --> 00:05:27.540
All right.

00:05:27.540 --> 00:05:27.980
Plus two.

00:05:27.980 --> 00:05:28.420
Couldn't you?

00:05:28.700 --> 00:05:32.220
I was going to start myself, but I'm not logged in any of my browsers for some reason on

00:05:32.220 --> 00:05:32.680
this account.

00:05:32.680 --> 00:05:33.800
So, no, starting.

00:05:33.800 --> 00:05:34.680
I have to start it later.

00:05:34.680 --> 00:05:35.040
Okay.

00:05:35.040 --> 00:05:39.780
Also, a little bit out of order, but I want to also just cover this other thing.

00:05:39.780 --> 00:05:46.560
We are generally, not 100% of the time, because there's still a little bit of long tail stuff

00:05:46.560 --> 00:05:46.880
happening.

00:05:46.880 --> 00:05:51.880
But generally, we are moving our live stream of the recording, the one where David said,

00:05:51.880 --> 00:05:52.700
I'm starting right now.

00:05:52.700 --> 00:05:53.720
Thanks for being here, David.

00:05:54.040 --> 00:05:57.480
That recording is now moving to Tuesdays at noon Pacific time.

00:05:57.480 --> 00:06:03.280
So, if people want to come be part of the live show, see the video version, as well as,

00:06:03.280 --> 00:06:07.040
you know, just make comments or whatever, not Wednesday, Tuesdays in general.

00:06:07.040 --> 00:06:10.840
But check for the next week, couple of weeks, because it is still like some pre-scheduled

00:06:10.840 --> 00:06:11.160
stuff.

00:06:11.160 --> 00:06:11.620
Yeah.

00:06:11.620 --> 00:06:13.800
So, how do people find out when it's coming up next?

00:06:13.800 --> 00:06:17.680
I would say the best way is just to subscribe to the YouTube channel.

00:06:17.680 --> 00:06:18.860
And then, you know.

00:06:18.860 --> 00:06:19.420
Okay.

00:06:19.420 --> 00:06:22.040
I hate to say it, but push the little bell for notifications.

00:06:22.040 --> 00:06:23.900
So, it'll tell you like, hey, this thing's coming up.

00:06:24.240 --> 00:06:26.020
And it'll let you know that we're gone live.

00:06:26.020 --> 00:06:26.320
Yep.

00:06:26.320 --> 00:06:27.000
Yep.

00:06:27.000 --> 00:06:28.740
I don't have a great, better way.

00:06:28.740 --> 00:06:31.780
Maybe we could do a mailing list, but it's a little tricky.

00:06:31.780 --> 00:06:34.560
But usually, stick around on Tuesday Pacific.

00:06:34.560 --> 00:06:36.980
Tuesday noon Pacific, we'll be recording.

00:06:36.980 --> 00:06:37.420
Yeah.

00:06:37.420 --> 00:06:40.480
If you check YouTube once a week, you'll see it's scheduled pretty far out.

00:06:40.480 --> 00:06:42.460
And then you can get a reminder for just that one thing.

00:06:42.460 --> 00:06:43.900
You don't have to always get messages.

00:06:43.900 --> 00:06:44.240
Okay.

00:06:44.240 --> 00:06:47.060
So, this is a fun one.

00:06:47.060 --> 00:06:49.420
You mentioned some of the older programming languages.

00:06:49.680 --> 00:06:56.280
When I was in college, I was studying chemical chemistry, chemical engineering, math, all these

00:06:56.280 --> 00:06:56.860
different things.

00:06:56.860 --> 00:07:00.020
And as part of that, they said, you're going to have to take a programming class.

00:07:00.020 --> 00:07:00.560
I'm like, super.

00:07:00.560 --> 00:07:01.200
What's it going to be?

00:07:01.200 --> 00:07:02.380
Like C++ or something?

00:07:02.380 --> 00:07:04.260
Remember, this is like early 90s.

00:07:04.480 --> 00:07:05.960
So, that was a good choice then.

00:07:05.960 --> 00:07:10.480
And they said, no, you're going to take the most important programming class you're ever

00:07:10.480 --> 00:07:11.460
going to take in your career.

00:07:11.460 --> 00:07:12.400
You're going to learn Fortran.

00:07:12.400 --> 00:07:13.260
I'm like, wait a minute.

00:07:13.260 --> 00:07:13.800
No.

00:07:13.800 --> 00:07:15.220
No, no.

00:07:15.220 --> 00:07:16.360
I don't want to do that.

00:07:16.360 --> 00:07:18.360
That doesn't sound like the most important thing ever.

00:07:18.360 --> 00:07:23.440
But nonetheless, that was one of my first courses I had to take.

00:07:23.440 --> 00:07:24.140
I only took a couple.

00:07:24.140 --> 00:07:26.560
Eventually got to take some C++.

00:07:26.560 --> 00:07:28.100
But Fortran was where it started.

00:07:28.100 --> 00:07:32.600
So, here is an article that was recommended to us by, let me make sure I get the name

00:07:32.600 --> 00:07:34.060
right, Galene Swint.

00:07:34.060 --> 00:07:39.700
And Galene is a PhD researcher and said, hey, here's a really interesting article.

00:07:39.700 --> 00:07:46.020
The article I don't believe is by them, but it's about the sort of, I think it was something

00:07:46.020 --> 00:07:47.680
in their lab they were talking about.

00:07:47.680 --> 00:07:52.520
It says, the title is, The Counterintuitive Rise of Python in Scientific Computing.

00:07:52.520 --> 00:07:53.700
Why is it counterintuitive?

00:07:53.700 --> 00:07:55.260
Because Fortran is fast.

00:07:55.260 --> 00:07:58.360
And what you want to do is process lots of data and you want to do it fast.

00:07:58.360 --> 00:08:04.440
So, here's a really interesting story of people who were doing older stuff like Fortran and

00:08:04.440 --> 00:08:10.840
C sort of were forced in, coerced into doing a little bit of Python and accidentally made

00:08:10.840 --> 00:08:16.700
their supercomputer stuff go like a hundred times faster or something in Python rather than

00:08:16.700 --> 00:08:20.920
in C or rather than Fortran, which is a counterintuitive result, right?

00:08:20.920 --> 00:08:21.360
Yes, it is.

00:08:21.720 --> 00:08:22.000
Yeah.

00:08:22.000 --> 00:08:26.900
So, I think that I'll cover a few details of this article, just put some highlights.

00:08:26.900 --> 00:08:30.680
But the reason I'm bringing an article instead of like a tool or something is I think this

00:08:30.680 --> 00:08:34.280
would be interesting for people to share if they're in a situation where they're like,

00:08:34.280 --> 00:08:35.240
oh, Python is no good.

00:08:35.240 --> 00:08:36.340
This is such a slow language.

00:08:36.340 --> 00:08:39.200
It's like doing math is like a thousand times slower than C.

00:08:39.200 --> 00:08:41.960
I don't actually know what it is, but it's a lot, lot slower, right?

00:08:41.960 --> 00:08:43.500
So, it goes through here.

00:08:43.500 --> 00:08:44.200
And here's a couple of things.

00:08:44.200 --> 00:08:49.120
It says, in our laboratory, a polarizing debate rages since, has been raging since 2010.

00:08:49.320 --> 00:08:53.580
Summarized by the question, why are more and more time-critical scientific computations

00:08:53.580 --> 00:08:58.420
formerly performed in Fortran now written in Python, a slower language?

00:08:58.420 --> 00:09:00.160
Ah, Python, a slower language.

00:09:00.160 --> 00:09:04.880
So, Python does have the reputation of being slow and especially around math.

00:09:04.880 --> 00:09:07.200
I think it's, honestly, it's earned it.

00:09:07.200 --> 00:09:12.880
Unfortunately, I would really love, sidebar, I would really love to see Python adopt something

00:09:12.880 --> 00:09:18.660
along the lines of value types that can be boxed back to PyLongs, right?

00:09:18.660 --> 00:09:22.360
So, like, on the stack locally, it's a number, but it gets complicated.

00:09:22.360 --> 00:09:24.840
But I think that would actually solve a ton of stuff.

00:09:24.840 --> 00:09:28.620
Anyway, so, yeah, plain Python is slower than Fortran.

00:09:28.620 --> 00:09:32.700
But when you do computational stuff, you don't do plain Python.

00:09:32.700 --> 00:09:36.780
What you do is you do NumPy, SciPy, Dask.

00:09:36.980 --> 00:09:41.960
All of these things are written in C with a thin coordination layer in Python as part of

00:09:41.960 --> 00:09:43.160
its API, right?

00:09:43.160 --> 00:09:46.920
So, here's, like, some graph you can see on the article.

00:09:46.920 --> 00:09:51.720
And it says, here's, like, you know, 10 to the 1 versus 10 to the minus 2.

00:09:51.720 --> 00:09:57.460
So, is that 100 times faster if you use Cython or NumPy and so on?

00:09:57.460 --> 00:09:58.480
So, pretty interesting.

00:09:58.700 --> 00:10:00.020
And it also shows, guess what?

00:10:00.020 --> 00:10:00.960
Shocker.

00:10:00.960 --> 00:10:01.860
Be-de-de-de-de-de-de-de-de.

00:10:01.860 --> 00:10:02.320
News alert.

00:10:02.320 --> 00:10:05.600
Fortran is somewhat less popular than it used to be.

00:10:05.600 --> 00:10:08.020
Oh, no.

00:10:08.020 --> 00:10:09.320
Oh, no.

00:10:09.320 --> 00:10:19.400
So, there's an interesting story of this project nicknamed Projector, written in, written around

00:10:19.400 --> 00:10:19.860
2010.

00:10:19.860 --> 00:10:24.080
So, modern, in quotes, Fortran, by somebody named Bob.

00:10:24.080 --> 00:10:28.260
So, Bob worked on this project, and there's apparently, let me find the numbers here.

00:10:28.260 --> 00:10:32.560
It's, like, 1.5 thousand lines of Fortran code.

00:10:32.560 --> 00:10:33.880
So, a lot of Fortran code.

00:10:33.880 --> 00:10:35.900
Like, a lot of complicated math bits.

00:10:35.900 --> 00:10:38.240
The kind you kind of don't want to touch after it works.

00:10:38.240 --> 00:10:42.000
And it's going to do, it's trying to project something.

00:10:42.000 --> 00:10:50.240
Thousands of multiple, multi-perforations of combustion liner onto a 3D complex shape made

00:10:50.240 --> 00:10:51.500
of millions of polygons.

00:10:51.840 --> 00:10:54.860
So, that might get complicated when you multiply those numbers together.

00:10:54.860 --> 00:10:55.860
You know?

00:10:55.860 --> 00:11:03.600
And it turns out, Bob soon discovered that he was going to use NumPy and this thing called

00:11:03.600 --> 00:11:04.460
a KD tree.

00:11:04.460 --> 00:11:07.280
Because there's a bunch of people working in the lab that only knew Python.

00:11:07.280 --> 00:11:09.040
So, like, here's a Python version you can use.

00:11:09.040 --> 00:11:11.740
And he thought, this is going to be rough.

00:11:11.740 --> 00:11:12.960
It's going to be super slow.

00:11:13.380 --> 00:11:16.220
So, he went and ran it after he got it done.

00:11:16.220 --> 00:11:19.860
And the Fortran version ran in 6 hours and 30 minutes.

00:11:19.860 --> 00:11:21.940
The Python version, 4 minutes.

00:11:21.940 --> 00:11:23.800
Wow.

00:11:25.000 --> 00:11:26.080
So, what happened?

00:11:26.080 --> 00:11:28.440
Is Python 100 times faster?

00:11:28.440 --> 00:11:29.280
No.

00:11:29.280 --> 00:11:34.220
Python is easier to work with and has many more built-in algorithms and data structures.

00:11:34.220 --> 00:11:40.800
This KD tree thing was using a different data structure, is a different data structure that

00:11:40.800 --> 00:11:42.560
has O log N complexity.

00:11:42.820 --> 00:11:47.640
Whereas the Fortran version, because it's so hard to write code in, they just wrote it

00:11:47.640 --> 00:11:49.180
in the simplest way they can make it work.

00:11:49.180 --> 00:11:50.180
So, O N.

00:11:50.180 --> 00:11:55.220
And when you have billions times millions times thousands, O log N wins, even if it's in a

00:11:55.220 --> 00:11:55.980
slower language.

00:11:56.780 --> 00:12:01.940
So, the conclusion was, Fortran would have been faster if they had implemented this KD tree

00:12:01.940 --> 00:12:02.760
algorithm in it.

00:12:02.760 --> 00:12:10.320
But the people working on it, they're like computational scientists, not PhD data structure type people,

00:12:10.320 --> 00:12:10.580
right?

00:12:10.580 --> 00:12:15.580
Like, they're already super busy just trying to do the programming and not working on, like,

00:12:15.580 --> 00:12:19.400
cutting edge data structures and optimizations and stuff.

00:12:19.400 --> 00:12:23.580
So, it was very easy to try one new thing in Python, which would have been very hard in

00:12:23.580 --> 00:12:25.300
Fortran, and it was a big win.

00:12:25.300 --> 00:12:31.420
So, anyway, I think the debate about performance, developer speed versus execution speed, but

00:12:31.420 --> 00:12:34.840
also straight up execution speed, I think it's really interesting in Python.

00:12:34.840 --> 00:12:37.200
And it's hard to be nuanced enough.

00:12:37.200 --> 00:12:40.200
It's always there's some little interesting wrinkle like this.

00:12:40.200 --> 00:12:40.780
Yeah.

00:12:40.780 --> 00:12:46.460
And if you're really, you're going to hand code everything anyway, it's also faster in assembly.

00:12:46.460 --> 00:12:47.760
So, just write assembly.

00:12:47.760 --> 00:12:51.240
There's a downside to that.

00:12:51.240 --> 00:12:51.240
Why not?

00:12:51.240 --> 00:12:51.660
Yeah.

00:12:52.820 --> 00:12:56.480
I've always wanted to stick to this one processor I really loved forever.

00:12:56.480 --> 00:12:59.420
But this is interesting.

00:12:59.420 --> 00:13:00.200
I like it.

00:13:00.200 --> 00:13:02.560
But it sort of reads like a commercial.

00:13:02.560 --> 00:13:08.360
So, Bob was programming scientific computing and he was not happy in Fortran.

00:13:08.360 --> 00:13:11.160
Bob tried Python and now he's happy.

00:13:12.400 --> 00:13:16.300
Well, I think Bob unwillingly tried Python and eventually he was happy.

00:13:16.300 --> 00:13:17.800
Like, it sounded like he didn't want it.

00:13:17.800 --> 00:13:18.860
He was dragged through it.

00:13:18.860 --> 00:13:19.460
I like it.

00:13:19.460 --> 00:13:19.940
Yeah, yeah.

00:13:19.940 --> 00:13:22.660
I know it does read a bit like that, but I think it's an interesting story.

00:13:22.660 --> 00:13:23.660
Pat, what do you think?

00:13:23.660 --> 00:13:26.660
You've had, you have a bit of a historical perspective on all this.

00:13:26.660 --> 00:13:27.320
Yeah.

00:13:27.460 --> 00:13:32.260
I didn't go to school for chemistry, but I bet Fortran's not popular among chemistry students, is it?

00:13:32.260 --> 00:13:33.420
No, not anymore.

00:13:33.420 --> 00:13:33.940
I'm sure.

00:13:33.940 --> 00:13:37.180
I did a little benchmark the other day.

00:13:37.180 --> 00:13:44.180
I was trying to just see how fast some EFS storage was on AWS versus EBS.

00:13:44.720 --> 00:13:48.820
And so I wrote a Python script to do that and wrote 10 million records out.

00:13:48.820 --> 00:13:50.940
And I thought, well, maybe Python is going to be slow.

00:13:50.940 --> 00:13:54.420
So I thought I'll just whip up a quick thing in Rust here.

00:13:54.420 --> 00:13:58.480
And as it turned out, Python was 10 times faster at that too.

00:13:58.480 --> 00:14:00.380
On the same exact hardware.

00:14:00.380 --> 00:14:02.060
And I'm not sure why that was.

00:14:02.060 --> 00:14:06.680
I may not have done something that was optimal for Rust, but there it is.

00:14:06.680 --> 00:14:07.460
10 times faster.

00:14:07.460 --> 00:14:07.620
Yeah, sure.

00:14:07.620 --> 00:14:08.800
No, that's super interesting.

00:14:08.800 --> 00:14:12.680
I've seen Python just rip across like OS type stuff like that.

00:14:12.680 --> 00:14:13.120
It's pretty good.

00:14:13.120 --> 00:14:13.760
All right.

00:14:13.760 --> 00:14:15.460
Well, what's your first item, Pat?

00:14:15.460 --> 00:14:16.880
Are we off to the metaverse?

00:14:16.880 --> 00:14:18.500
Or is the metaverse off to us?

00:14:18.500 --> 00:14:20.740
I stumbled across this the other day.

00:14:20.740 --> 00:14:26.740
We've had Lucas Longa on the show, the programmer in residence.

00:14:26.740 --> 00:14:36.620
And it looks like they're going to get another year due to a donation from a meta of $300,000 to the Python Software Foundation.

00:14:36.620 --> 00:14:38.860
And it was specifically for that purpose.

00:14:38.860 --> 00:14:40.800
That's a really big deal.

00:14:40.800 --> 00:14:43.680
And like you said in the past too.

00:14:43.680 --> 00:14:47.420
Python is very important to meta.

00:14:47.420 --> 00:14:49.280
Facebook's parent company now.

00:14:49.280 --> 00:14:52.580
Because much of their infrastructure is built on it.

00:14:52.580 --> 00:14:54.160
PyTorch in particular.

00:14:54.160 --> 00:14:56.360
They use it a lot.

00:14:56.360 --> 00:15:01.140
So their internal implementation of Python is called Cinder apparently.

00:15:01.140 --> 00:15:03.600
Which I think I've seen mentioned a few times.

00:15:04.300 --> 00:15:06.580
But they would like to see continued development.

00:15:06.580 --> 00:15:08.780
And they're going to fund it, which is awesome.

00:15:08.780 --> 00:15:10.200
Yeah, that's really neat.

00:15:10.200 --> 00:15:14.080
I think Cinder is a fantastic thing they've created.

00:15:14.080 --> 00:15:15.500
And it's interesting.

00:15:15.500 --> 00:15:19.940
It's open source in the sense of maybe the better term would be source open.

00:15:20.580 --> 00:15:22.040
Like, here, we're going to put this out here.

00:15:22.040 --> 00:15:23.520
We don't expect any contributions.

00:15:23.520 --> 00:15:27.440
And we don't want to put it out there as like a project to grow on its own.

00:15:27.440 --> 00:15:28.900
But we think it might inspire people.

00:15:28.900 --> 00:15:29.880
So here's the source.

00:15:29.880 --> 00:15:33.220
But what they have contained in there is amazing.

00:15:33.220 --> 00:15:37.440
There's just so many optimizations and different things.

00:15:37.540 --> 00:15:40.780
I think they might even have that value type thing I discussed.

00:15:40.780 --> 00:15:42.260
And I can't remember.

00:15:42.260 --> 00:15:46.240
But yeah, that's a really cool project that they're working on.

00:15:46.240 --> 00:15:47.440
So this is great.

00:15:47.440 --> 00:15:50.640
You know, I think Lucas Schelenga has gone sort of full circle, right?

00:15:50.640 --> 00:15:52.280
He was independent.

00:15:52.280 --> 00:15:55.380
He was at Instagram for a while, which is, you know, part of Meta.

00:15:55.380 --> 00:16:00.840
And then left to sort of do his own thing and found his way to this developer in residence.

00:16:00.840 --> 00:16:03.320
And now Meta is sending money so that he stays there.

00:16:03.320 --> 00:16:05.400
That's like an interesting circle, I think.

00:16:05.400 --> 00:16:07.180
Yeah, that's good.

00:16:07.180 --> 00:16:11.340
It seems tenuous, though, that we have it at like one year at a time.

00:16:11.340 --> 00:16:15.840
That we don't know if we're going to have a developer in residence longer than another year.

00:16:15.840 --> 00:16:16.840
It's like a postdoc.

00:16:16.840 --> 00:16:20.860
Hopefully it's a game of tag with Microsoft coming next or something.

00:16:20.860 --> 00:16:21.880
Yeah, exactly.

00:16:21.880 --> 00:16:23.480
That'd be great.

00:16:23.480 --> 00:16:25.920
And I think there are a couple of organizations doing this.

00:16:25.920 --> 00:16:31.500
So I know that there was a talk about having multiple folks sort of participating in that group,

00:16:31.500 --> 00:16:35.200
which would be great because I know there's way more work than Lucas can do on himself.

00:16:35.200 --> 00:16:36.060
He's quite busy.

00:16:36.820 --> 00:16:40.700
Alvaro in the audience has a fine name proposal here.

00:16:40.700 --> 00:16:45.320
The PSF developer in residence should be called the PSF Dunderder.

00:16:45.320 --> 00:16:48.340
Underscore, underscore, D-I-R, underscore, underscore.

00:16:48.340 --> 00:16:51.420
I hereby am opening a pep.

00:16:51.420 --> 00:16:52.260
Well done, Alvaro.

00:16:52.260 --> 00:16:52.880
No, just kidding.

00:16:52.880 --> 00:16:56.100
I want to give him more work for something silly like that.

00:16:56.120 --> 00:16:56.820
But that's pretty awesome.

00:16:56.820 --> 00:16:58.140
The PSF Dunderder.

00:16:58.140 --> 00:17:00.020
Cool.

00:17:00.020 --> 00:17:01.500
Well, thank you, Pat.

00:17:01.500 --> 00:17:07.120
Now, before we move on to the next item, let me tell you all about our sponsor today.

00:17:07.120 --> 00:17:08.540
And like I said, I'm really excited about this.

00:17:08.620 --> 00:17:11.500
I'm actually doing a bunch of work on some Git presentations.

00:17:11.500 --> 00:17:18.060
And so I'm just trying to think about what's the workflow with Git and how can we work better,

00:17:18.060 --> 00:17:20.340
especially doing team type stuff.

00:17:20.340 --> 00:17:27.400
So Mergeify is a service that will help you and especially your team be way better with Git.

00:17:27.400 --> 00:17:32.800
So it's an amazing tool to make you and your team be more productive with GitHub in particular.

00:17:32.800 --> 00:17:35.560
It's all about leveling up for requests.

00:17:36.060 --> 00:17:42.160
So some of the features of their platform that you hook into your repositories are automatic merges.

00:17:42.160 --> 00:17:45.100
So you can set up conditions for an automatic merge.

00:17:45.100 --> 00:17:49.740
And Mergeify will take care of merging the PR as soon as it's ready and passes all the details.

00:17:49.740 --> 00:17:51.580
There's automatic updates.

00:17:51.580 --> 00:17:57.240
So if you have multiple pull requests, it'll merge the pull requests serially on top of each other.

00:17:57.240 --> 00:17:59.000
So there's no way to introduce a regression.

00:17:59.000 --> 00:18:01.020
There's also merge queues.

00:18:01.020 --> 00:18:05.740
So if you've got like a long CI process and things are slow or you've got lots of code,

00:18:05.740 --> 00:18:11.940
you can set up priorities and have the most important ones merge fix like bug requests or bug fixes,

00:18:11.940 --> 00:18:13.920
especially if they're security fixes.

00:18:13.920 --> 00:18:15.220
They go right here, right at the front.

00:18:15.220 --> 00:18:15.940
Do those now.

00:18:15.940 --> 00:18:16.920
So that's awesome.

00:18:16.920 --> 00:18:19.720
They also have something called backports.

00:18:19.720 --> 00:18:25.700
So Mergeify will copy the pull requests to other branches once it's merged, if you set that up,

00:18:25.700 --> 00:18:30.620
so that you can ship bug fixes to multiple branches, feature branches and whatnot.

00:18:30.620 --> 00:18:32.880
Automatically or even older versions, right?

00:18:32.880 --> 00:18:36.820
Version 1.0 of your app versus, you know, 2.0, 2.2, whatever.

00:18:36.820 --> 00:18:41.280
Have those automatically merge those bug requests, bug fixes in.

00:18:41.280 --> 00:18:42.140
Super cool.

00:18:42.140 --> 00:18:46.120
So Mergeify does all these things automatically that you would otherwise have to do manually.

00:18:46.120 --> 00:18:47.280
So you save time.

00:18:47.280 --> 00:18:50.560
You and your team will focus on projects that matter the most.

00:18:50.560 --> 00:18:55.320
Mergeify is coordinated with any CI and is fully integrated into GitHub.

00:18:55.320 --> 00:19:00.640
They also have a startup program that can give your company up to $21,000 of credits.

00:19:00.640 --> 00:19:05.560
So if you're doing a startup and you want to use them to help grow, you can reach out to them for sure.

00:19:05.560 --> 00:19:08.840
Do that by going to pythonbytes.fm/Mergeify.

00:19:08.840 --> 00:19:10.760
Sign up for a demo and get started.

00:19:10.760 --> 00:19:13.340
The link is at the top of your podcast player show notes.

00:19:13.340 --> 00:19:14.420
So just click it.

00:19:14.420 --> 00:19:17.060
Thanks to Mergeify for supporting our show.

00:19:17.060 --> 00:19:18.020
Very cool project.

00:19:18.020 --> 00:19:18.460
Yeah.

00:19:18.460 --> 00:19:19.220
All right, Brian.

00:19:19.220 --> 00:19:20.400
What's the next one here?

00:19:20.400 --> 00:19:25.180
Well, we were talking about data science a little bit and people using Python for data science.

00:19:25.180 --> 00:19:32.340
But one of the things that people use when they're doing data science, plus other stuff and DevOps and whatever, is dashboards.

00:19:32.340 --> 00:19:33.540
Dashboards in Python.

00:19:33.540 --> 00:19:36.140
And that's one of the powerful reasons to use it.

00:19:36.140 --> 00:19:40.460
And so there's a couple things I want to discuss around dashboards.

00:19:40.920 --> 00:19:45.440
Both of them come via suggestions from Mark Skov-Madsen.

00:19:45.440 --> 00:19:46.240
So thanks, Mark.

00:19:46.240 --> 00:19:50.560
First is the easiest way to create interactive dashboard in Python.

00:19:50.560 --> 00:19:53.660
Obviously, it's their opinion, but it does look pretty easy.

00:19:53.660 --> 00:19:57.500
Is to use hvplot.interactive.

00:19:57.500 --> 00:20:01.840
So this is an article that talks about how to do this.

00:20:01.840 --> 00:20:04.580
And it really looks nice.

00:20:04.580 --> 00:20:06.780
This panel looks pretty good.

00:20:06.780 --> 00:20:07.320
Oh, yeah.

00:20:07.320 --> 00:20:07.900
That's great.

00:20:08.040 --> 00:20:13.120
Pulling data out, you got dark and light, and you've got the controls on the one side.

00:20:13.120 --> 00:20:13.420
Interactive sliders?

00:20:13.420 --> 00:20:13.760
Yeah.

00:20:13.760 --> 00:20:14.040
Okay.

00:20:14.040 --> 00:20:21.240
So this is just using some pre-canned data, but you can use, obviously, your own data.

00:20:21.240 --> 00:20:23.780
But the article's pretty short.

00:20:23.780 --> 00:20:29.400
And one of the things I love about it, of course, is it's got an animated GIF to show you exactly what you're getting into.

00:20:30.460 --> 00:20:33.900
And then also a video.

00:20:33.900 --> 00:20:42.780
So one of the authors, Sophia, just reads the, like, pretty much goes through the article and talks about it and shows the demo of everything.

00:20:42.780 --> 00:20:43.880
So that's nice.

00:20:43.880 --> 00:20:45.160
And it's only, like, six minutes.

00:20:45.160 --> 00:20:46.140
I was watching it this morning.

00:20:46.140 --> 00:20:49.000
So really cool if you want to try.

00:20:49.380 --> 00:20:53.340
So HVPLOT is part of the HoloViz family of tools.

00:20:53.340 --> 00:20:55.820
So a lot of people are already using that.

00:20:55.820 --> 00:20:57.500
Or if you're not, check that out.

00:20:57.500 --> 00:20:58.200
Cool stuff.

00:20:58.200 --> 00:20:58.620
Yeah.

00:20:58.620 --> 00:20:59.340
This looks great.

00:20:59.340 --> 00:21:03.160
I always want to have good use cases for this.

00:21:03.160 --> 00:21:06.040
And I just, I don't find myself doing lots of dashboards and stuff.

00:21:06.040 --> 00:21:08.600
But every time I see them, I'm like, well, what can I build a dashboard for?

00:21:08.600 --> 00:21:09.680
That would be great to have this.

00:21:09.820 --> 00:21:14.060
Well, so I have some use cases for dashboards, but I really don't want to spend a lot of time on it.

00:21:14.060 --> 00:21:24.980
And I think even though this is, like, six-minute video of how to get through it, I think that probably I'd have to set aside maybe a half day to figure out something to get it usable.

00:21:25.360 --> 00:21:33.000
But it does show that once you understand what you're doing, you can throw together dashboards pretty quickly and be able to.

00:21:33.000 --> 00:21:47.780
Well, we didn't, in the demo, one of the dashboard items was, and the controls is, like, let's say you've got a whole bunch of columns or some different elements in a row or in a column that you want to filter out.

00:21:47.780 --> 00:21:51.580
So there's ways to filter your data so that you're looking at different stuff.

00:21:51.700 --> 00:21:55.840
And I was like, I have an exact use case for this, so I'm pretty excited.

00:21:55.840 --> 00:22:03.940
The other thing around plots is maybe HV plot or dashboards is maybe HV plot isn't the right thing for you.

00:22:03.940 --> 00:22:09.120
Well, we've got another thing is the PyData Global 2021.

00:22:09.120 --> 00:22:15.680
There's a video stream up on YouTube called Python Dashboarding Shootout in Showdown.

00:22:16.200 --> 00:22:28.620
And so this is a whole bunch of different presenters talking about building dashboards in Python using either dash or panel or voila or streamlet.

00:22:28.620 --> 00:22:31.100
So watch different people do it.

00:22:31.100 --> 00:22:36.440
So if you want to watch some, use something other than HV plot, watch this video.

00:22:36.680 --> 00:22:47.280
One of the things I love about this is if you're only looking forward to one of them, one of the commenters on this video put up hyperlinks to each of the different sections.

00:22:47.280 --> 00:22:50.160
So you can just hop right to the video part that you want to watch.

00:22:50.160 --> 00:22:51.200
Oh, yeah, that's great.

00:22:51.200 --> 00:22:52.700
Yeah, looks good.

00:22:52.700 --> 00:22:53.740
I love these dashboards.

00:22:53.740 --> 00:22:54.720
It's definitely one of their powers.

00:22:54.720 --> 00:22:56.660
Pat, do you do anything with them?

00:22:56.660 --> 00:22:57.320
Sorry, Brian.

00:22:57.320 --> 00:22:57.860
I cut you out.

00:22:58.360 --> 00:23:06.840
We do have some pre-built dashboards to model the EKS cluster in Grafana and Elastic.

00:23:06.840 --> 00:23:08.660
But this is another option.

00:23:08.660 --> 00:23:10.340
It'd be good to do something ad hoc.

00:23:10.340 --> 00:23:13.500
If it's a quick and dirty, maybe I could put one out.

00:23:13.500 --> 00:23:16.800
So, Brian, do you just like grab a Pandas data frame and then make it interactive?

00:23:16.800 --> 00:23:18.200
No.

00:23:18.200 --> 00:23:21.540
Well, not quite, but it's almost.

00:23:21.860 --> 00:23:26.900
I mean, this is built to go really closely with Pandas data frames.

00:23:26.900 --> 00:23:36.780
So the code is, you know, you're doing some filtering, some pipeline processing, like group buys and selecting in to see what index you're going to use.

00:23:36.780 --> 00:23:40.900
And then, yeah, it's pretty much interactive at that point.

00:23:40.900 --> 00:23:46.340
But the code around this is building the widgets for the controls.

00:23:46.340 --> 00:23:49.140
You got to define the UI and how people interact with it.

00:23:49.140 --> 00:23:49.360
Got it.

00:23:49.360 --> 00:23:49.980
Yeah, it's not.

00:23:50.260 --> 00:23:51.360
But it's pretty easy.

00:23:51.360 --> 00:23:53.220
I can't imagine.

00:23:53.220 --> 00:23:54.420
I mean, it's not obvious.

00:23:54.420 --> 00:23:57.480
So you have to kind of, it's good to watch a tutorial or something.

00:23:57.480 --> 00:23:59.600
But it's also not difficult.

00:23:59.600 --> 00:24:02.000
And then putting it together.

00:24:02.000 --> 00:24:02.560
Yeah.

00:24:02.560 --> 00:24:07.640
So most of the code in here is not the interactive plot because that's kind of already happens.

00:24:07.640 --> 00:24:09.240
But it's the widgets.

00:24:09.240 --> 00:24:10.740
Got it.

00:24:10.740 --> 00:24:10.940
Cool.

00:24:10.940 --> 00:24:11.480
Thanks.

00:24:11.480 --> 00:24:12.120
All right.

00:24:12.120 --> 00:24:14.360
I think you all will be excited about this.

00:24:14.360 --> 00:24:16.760
I think this is quite a neat project.

00:24:16.760 --> 00:24:17.820
Now, let's see.

00:24:17.820 --> 00:24:20.160
This was sent over by Dave Chevelle.

00:24:20.160 --> 00:24:23.660
Well, actually, it is posted over and is by Dave Chevelle.

00:24:23.660 --> 00:24:24.900
So, I don't know.

00:24:24.900 --> 00:24:27.840
Brian, do you ever use entry points in Python packages?

00:24:27.840 --> 00:24:31.260
You know, so you can set up and pip install a package.

00:24:31.260 --> 00:24:35.960
And then if you have that Python active, then you can just type a CLI command that is one

00:24:35.960 --> 00:24:36.920
of the entry points there.

00:24:36.920 --> 00:24:37.660
You know what I'm talking about?

00:24:37.720 --> 00:24:37.860
Yeah.

00:24:37.860 --> 00:24:38.680
I do that all the time.

00:24:38.680 --> 00:24:39.440
That's great.

00:24:39.440 --> 00:24:42.040
But there is some overhead to set it up, right?

00:24:42.040 --> 00:24:45.060
I've got to install it as a package and whatnot.

00:24:45.540 --> 00:24:52.580
This project called sourcepy allows you to basically turn any function into a CLI command, straight

00:24:52.580 --> 00:24:54.300
CLI command in one line.

00:24:54.300 --> 00:24:56.040
So, let me show you what I'm talking about.

00:24:56.040 --> 00:24:58.920
And it doesn't involve packages and installing or anything like that.

00:24:58.920 --> 00:25:03.580
So, imagine you've got some file here and it's got a function, just a def function.

00:25:03.580 --> 00:25:05.780
Pygrep is the example here.

00:25:05.840 --> 00:25:09.440
And it has a pattern, which is actually a regular expression pattern.

00:25:09.440 --> 00:25:10.140
Note the typing.

00:25:10.140 --> 00:25:13.860
It has grep data, which is a list of text inputs.

00:25:13.860 --> 00:25:19.080
So, it could be a string or something, but it could also be like something piped or standard

00:25:19.080 --> 00:25:20.540
in or something along those lines, right?

00:25:20.540 --> 00:25:27.020
So, if I have this script that just does that work with that type assigned data and I have

00:25:27.020 --> 00:25:31.580
sourcepy installed, I can say source this file here.

00:25:32.140 --> 00:25:38.980
And what it will do is it'll actually add up the, it'll expose those functions like pygrep

00:25:38.980 --> 00:25:39.520
and so on.

00:25:39.520 --> 00:25:42.300
So, then I can just type pygrep and it'll tell me how it works.

00:25:42.300 --> 00:25:45.040
And somewhere in here, where's the example running it?

00:25:45.040 --> 00:25:46.280
Oh, right here, I think it is.

00:25:46.280 --> 00:25:51.880
So, what you can do is you can just run pygrep against, now, as a function, right?

00:25:51.880 --> 00:25:53.020
As a CLI function.

00:25:53.020 --> 00:25:55.700
So, it has all sorts of cool features.

00:25:55.700 --> 00:25:58.360
For example, it has this type handling.

00:25:58.360 --> 00:26:03.960
So, type hints that we talked about can be used to coerce inputs off the command line

00:26:03.960 --> 00:26:07.360
into like integers and patterns and I.O.

00:26:07.360 --> 00:26:09.980
streams for like files and standard in and such.

00:26:09.980 --> 00:26:11.120
Let's see.

00:26:11.120 --> 00:26:15.840
It just takes basically any function like this and turns it into something you run on the

00:26:15.840 --> 00:26:16.020
shell.

00:26:16.020 --> 00:26:21.980
And then you can also go down and you can do like, I believe there's some sort of class

00:26:21.980 --> 00:26:23.980
based way to work with it and so on.

00:26:23.980 --> 00:26:25.460
But yeah, this is pretty neat.

00:26:25.460 --> 00:26:25.900
What do you think?

00:26:25.900 --> 00:26:30.320
I guess I'm confused at how it works with the normal source command.

00:26:30.320 --> 00:26:31.820
That is a good question.

00:26:31.820 --> 00:26:33.740
Like, how does it not break normal source?

00:26:33.740 --> 00:26:34.020
Yeah.

00:26:34.020 --> 00:26:35.300
That's a good question.

00:26:35.300 --> 00:26:35.660
Yeah.

00:26:35.660 --> 00:26:38.660
It is a good question.

00:26:38.660 --> 00:26:43.940
Like, does it replace it for while you've got it installed or does it extend it somehow?

00:26:43.940 --> 00:26:45.000
Yeah, I don't know.

00:26:45.000 --> 00:26:51.520
I haven't looked at it enough to understand how it either coordinates or overrides source.

00:26:51.520 --> 00:26:53.300
Sorry to put you on the spot there.

00:26:53.300 --> 00:26:53.840
No, no, no.

00:26:53.840 --> 00:26:54.440
It's a great question.

00:26:54.440 --> 00:26:55.640
Yeah.

00:26:55.640 --> 00:26:58.380
I haven't played with it, but it's really important.

00:26:58.380 --> 00:27:00.940
You would want to know because you want to break your regular source stuff.

00:27:00.940 --> 00:27:04.020
I'm sure you could alice it if for some reason it conflicted, but I don't know.

00:27:04.020 --> 00:27:04.760
I think.

00:27:04.760 --> 00:27:09.940
So I think this would be really helpful for, aside from that, if that's all working great,

00:27:09.940 --> 00:27:15.040
then aside from that, I think it's a very useful way to have like a handful of little tools

00:27:15.040 --> 00:27:18.700
for a project to be able to use that.

00:27:18.700 --> 00:27:24.280
If you're trying to share it with other people, I kind of think packaging it the right way

00:27:24.280 --> 00:27:26.400
to have entry points is probably the right way to go.

00:27:26.400 --> 00:27:26.760
Yeah.

00:27:26.760 --> 00:27:32.340
If you want to do a more formal, like a PIPX style, but this feels way more ad hoc, right?

00:27:32.340 --> 00:27:35.160
Like Pat was talking about his little script that he built to test some stuff.

00:27:35.160 --> 00:27:39.440
You could run this and then just call those functions as if they were built into Bash or

00:27:39.440 --> 00:27:40.140
ZShell or whatever.

00:27:40.300 --> 00:27:40.580
Definitely.

00:27:40.580 --> 00:27:44.200
Also, also worth pointing out, it has built in native async support.

00:27:44.200 --> 00:27:49.500
So if you have async functions and you source it, then you can just call, call it as if it

00:27:49.500 --> 00:27:53.700
was a regular command line command and it's, it still just takes it and runs.

00:27:53.700 --> 00:27:59.600
And Kim Benwick, who's been a co-host here before has a clever thought.

00:27:59.600 --> 00:28:04.360
I suspect it wraps the normal source command and hands it over to the normal source.

00:28:04.360 --> 00:28:06.540
If it isn't Python, it's a good idea.

00:28:06.540 --> 00:28:07.080
Probably.

00:28:07.080 --> 00:28:07.920
Yeah, probably.

00:28:08.140 --> 00:28:12.380
Although, like I said, I haven't really looked at the mechanism there, but this looks like

00:28:12.380 --> 00:28:13.020
a cool project.

00:28:13.020 --> 00:28:19.340
It's got all sorts of supported types like JSON and unions and date time objects and all kinds

00:28:19.340 --> 00:28:19.600
of stuff.

00:28:19.600 --> 00:28:20.660
So check it out.

00:28:20.660 --> 00:28:25.800
If you do a bunch of kind of ad hoc stuff with Python on the command prompt terminal, Pat,

00:28:25.800 --> 00:28:26.560
how's this strike you?

00:28:26.560 --> 00:28:30.300
I know that this might touch some of the things you're doing in your world.

00:28:30.300 --> 00:28:30.920
Right.

00:28:30.920 --> 00:28:31.180
Yeah.

00:28:31.180 --> 00:28:35.620
just yesterday, one of the guys was contacting me because he needed to go and cycle through

00:28:35.620 --> 00:28:40.020
a list of addresses to, to hit an API.

00:28:40.020 --> 00:28:43.260
And this, this could be something you'd use like that.

00:28:43.260 --> 00:28:47.260
Consume this file and hit the API with each example and away we go.

00:28:47.260 --> 00:28:48.300
Yeah, absolutely.

00:28:48.300 --> 00:28:48.780
Yeah.

00:28:48.820 --> 00:28:52.920
This looks great for putting a little, making those little scripts you build with Python,

00:28:52.920 --> 00:28:54.140
like literally scripts.

00:28:54.140 --> 00:28:58.460
I know a lot of people call everything Python scripts, but this is really for those types

00:28:58.460 --> 00:28:58.660
of apps.

00:28:58.660 --> 00:28:59.540
A single file script.

00:28:59.540 --> 00:29:00.120
Yeah.

00:29:00.120 --> 00:29:00.400
Yeah.

00:29:00.400 --> 00:29:04.320
A single file thing, not like a 20,000 line Flask app, right?

00:29:04.320 --> 00:29:09.140
That thing starts to stretch the terms of what script might mean, but this is exactly for

00:29:09.140 --> 00:29:09.640
those things.

00:29:09.640 --> 00:29:10.160
Yeah.

00:29:10.440 --> 00:29:10.640
All right.

00:29:10.640 --> 00:29:11.620
What's your final one, Pat?

00:29:11.620 --> 00:29:14.920
This, this is, is similar to what you just covered.

00:29:14.920 --> 00:29:17.760
Actually, you've, you've talked, I think a little bit about it before.

00:29:17.760 --> 00:29:22.880
Conch shell combines the best of bash shell and Python in the Linux terminal terminal.

00:29:22.880 --> 00:29:24.220
I ran across this.

00:29:24.220 --> 00:29:25.460
This is way more than what I covered.

00:29:25.460 --> 00:29:27.280
This, this is like another level here.

00:29:27.280 --> 00:29:28.880
It takes it to another level.

00:29:28.880 --> 00:29:29.140
Yeah.

00:29:29.140 --> 00:29:35.680
I ran across it on its boss, which is, is a nice site for open source type things.

00:29:36.620 --> 00:29:42.280
In a nutshell, what, what it does is provide you with a new shell where as they demonstrate

00:29:42.280 --> 00:29:44.680
here, you can use straight Python.

00:29:44.680 --> 00:29:53.680
You can import JSON, for example, and, and define a, a, a variable or a table, print,

00:29:53.680 --> 00:30:00.740
print that out and, format it, the length function here, but you can also then mix

00:30:00.740 --> 00:30:06.280
in regular bash functions where we, for example, here it curls from a website.

00:30:06.280 --> 00:30:10.780
The result comes back and the length function tells you the length of that curl.

00:30:10.780 --> 00:30:12.080
Oh, how interesting.

00:30:12.080 --> 00:30:13.720
And one of their famous.

00:30:13.720 --> 00:30:19.080
That's a little bit like, almost like a Jinja Django template, but in your terminal,

00:30:19.080 --> 00:30:19.340
right?

00:30:19.340 --> 00:30:24.180
You put a little dollar to say, here's a, a bit of code to run on the shell.

00:30:24.180 --> 00:30:24.780
Yep.

00:30:24.780 --> 00:30:25.300
Um.

00:30:25.300 --> 00:30:26.080
Shell to run here.

00:30:26.080 --> 00:30:29.820
The one famous statement they have is, you know, I always forget how to do a for loop in,

00:30:29.820 --> 00:30:32.340
in bash, but in Python, it's pretty easy.

00:30:32.340 --> 00:30:35.880
and, and they have kind of a rule that it evaluates.

00:30:35.940 --> 00:30:37.420
To Python first.

00:30:37.420 --> 00:30:40.300
If it evaluates to Python, it executes as Python.

00:30:40.300 --> 00:30:43.900
If it doesn't, then it more or less executes as bash.

00:30:43.900 --> 00:30:50.480
and I do have a link we could, we could put in the show notes too, to a, a video

00:30:50.480 --> 00:30:52.640
demonstration from, from their homepage.

00:30:53.320 --> 00:31:01.580
and the guy does a spectacular, demonstration with auto completes and, and they have, what

00:31:01.580 --> 00:31:02.980
they call contributions.

00:31:02.980 --> 00:31:05.000
And, and that also begins with an X.

00:31:05.000 --> 00:31:08.800
so it's, it's like a plugin or an add on, but it's a contribution.

00:31:10.800 --> 00:31:16.680
it, it, it, it is get aware and it is, virtual environment aware.

00:31:16.680 --> 00:31:21.600
it sounds like a killer environment, but it would take some getting used to.

00:31:21.600 --> 00:31:26.280
I have a lot of muscle memory to overcome, to take full advantage.

00:31:26.280 --> 00:31:26.620
I think.

00:31:27.160 --> 00:31:27.860
This is cool.

00:31:27.860 --> 00:31:29.200
Brian, have you played with us?

00:31:29.200 --> 00:31:34.220
You know, I tried to play with it a couple of years ago, but I, but now I, and then

00:31:34.220 --> 00:31:35.900
I haven't, but I do want to.

00:31:35.900 --> 00:31:38.740
And I think one of the things I didn't give it a fair shake.

00:31:38.740 --> 00:31:43.200
And I think it would be good to just say for a week, maybe I'm going to try to just use

00:31:43.200 --> 00:31:47.600
this instead of pulling up my normal terminal just to see if I can get used to it.

00:31:47.600 --> 00:31:48.120
That's the thing.

00:31:48.120 --> 00:31:49.860
I think you have to immerse yourself probably.

00:31:49.860 --> 00:31:51.640
And, and it is about five years old.

00:31:51.640 --> 00:31:52.720
I think it's fairly mature.

00:31:52.720 --> 00:31:53.400
Yeah.

00:31:53.400 --> 00:32:00.840
And yet also the less I write bash scripts, the more I wish that I bash scripts were more

00:32:00.840 --> 00:32:01.820
like Python scripts.

00:32:01.820 --> 00:32:03.380
So now they are.

00:32:03.380 --> 00:32:05.900
Yeah, this is great.

00:32:05.900 --> 00:32:10.460
a good find and it's something I've also wanted to play with, but haven't.

00:32:10.460 --> 00:32:11.200
Nice.

00:32:11.200 --> 00:32:13.280
Brian, you got any extras you want to share with people?

00:32:13.280 --> 00:32:14.740
I don't this week.

00:32:14.740 --> 00:32:15.760
How about you?

00:32:15.760 --> 00:32:17.300
I thought I didn't, but then I did.

00:32:17.300 --> 00:32:19.100
I just want to do a quick follow-up.

00:32:19.100 --> 00:32:19.360
Okay.

00:32:19.360 --> 00:32:25.960
I was just thinking about a couple episodes ago where we talked about the March Madness

00:32:25.960 --> 00:32:28.740
package tournament that Chris May had sent in.

00:32:28.740 --> 00:32:31.440
And I was thinking, you know, it's probably done now, isn't it?

00:32:31.440 --> 00:32:32.520
Let's see who won.

00:32:32.660 --> 00:32:36.840
Cause I think we were at the point where we were at the elite eight, weren't we?

00:32:36.840 --> 00:32:39.640
Or yeah, I believe we were at the elite eight.

00:32:39.640 --> 00:32:42.660
So we had a showdown to put between NumPy and Pip.

00:32:42.660 --> 00:32:43.740
NumPy crushed it.

00:32:43.740 --> 00:32:46.180
We had a showdown between pandas and requests.

00:32:46.180 --> 00:32:47.500
Pandas crushed it.

00:32:47.500 --> 00:32:50.780
And it was an all data science finale.

00:32:51.120 --> 00:32:54.040
And NumPy and pandas went to head, went head to head.

00:32:54.040 --> 00:32:56.520
And it was pandas, 55% taking the winter.

00:32:56.520 --> 00:32:58.240
So I just want to do a quick follow-up on that.

00:32:58.240 --> 00:32:59.280
Very important news.

00:32:59.280 --> 00:33:00.200
We have a champion.

00:33:00.200 --> 00:33:01.220
It's good.

00:33:01.220 --> 00:33:02.880
But try using pandas without NumPy.

00:33:02.880 --> 00:33:03.560
That'd be tough.

00:33:03.560 --> 00:33:04.460
There you go.

00:33:04.460 --> 00:33:06.660
Yeah, indeed.

00:33:06.660 --> 00:33:07.720
I was.

00:33:07.720 --> 00:33:10.360
Pat, do you have anything else you want to get a, give a shout out to?

00:33:10.360 --> 00:33:11.980
I do have one extra.

00:33:12.200 --> 00:33:17.600
quick, like, it's easy to bash Microsoft, but they've been involved in.

00:33:17.600 --> 00:33:18.460
They bought GitHub.

00:33:18.460 --> 00:33:25.080
They, have lots of our Python code developers working for them and they have this rewards program

00:33:25.080 --> 00:33:27.860
and they want you to use Bing search, obviously.

00:33:27.860 --> 00:33:33.220
But what you can do is choose a, a charity to give points to.

00:33:33.220 --> 00:33:40.160
you can also get like a $5 gift certificate to AWS or, or Amazon or something, for yourself

00:33:40.160 --> 00:33:40.760
if you'd rather.

00:33:40.900 --> 00:33:45.700
And, and every day you just kind of click on these little links and, and I just got

00:33:45.700 --> 00:33:49.040
five points or 10 points and, oh, now we got to do a quiz.

00:33:49.040 --> 00:33:50.040
I'll come back to that later.

00:33:50.040 --> 00:33:55.640
and, and as you do this, you accumulate more points each day and those points then

00:33:55.640 --> 00:33:56.600
can go to your charity.

00:33:56.600 --> 00:34:02.820
And I did, the red cross for a while and I did the CDC during our, our lockdown

00:34:02.820 --> 00:34:03.560
year there.

00:34:03.560 --> 00:34:07.260
And you can also donate to the Python software foundation.

00:34:07.260 --> 00:34:09.880
So that's some, that's a way we can all contribute.

00:34:10.300 --> 00:34:14.100
So if you're Googling stuff with Bing, go ahead and set up the rewards.

00:34:14.100 --> 00:34:15.980
You're Googling stuff with Bing.

00:34:18.440 --> 00:34:20.840
If you're Googling stuff with Bing, set up the rewards to go to the PSF.

00:34:20.840 --> 00:34:21.680
You might as well, right?

00:34:21.680 --> 00:34:22.080
That's right.

00:34:22.080 --> 00:34:22.860
It's fantastic.

00:34:22.860 --> 00:34:24.480
Awesome.

00:34:24.480 --> 00:34:25.160
All right.

00:34:25.160 --> 00:34:25.800
Well, thanks.

00:34:25.800 --> 00:34:26.420
That's a good one.

00:34:26.420 --> 00:34:32.600
I got a joke for you all here and I know Brian, you do as well, but I feel like this

00:34:32.600 --> 00:34:37.920
one, I better take this one because I don't feel you're in a position to, to make an unbiased

00:34:37.920 --> 00:34:38.560
decision here.

00:34:38.560 --> 00:34:39.700
Cause it's so close to your heart.

00:34:39.700 --> 00:34:39.900
Okay.

00:34:39.900 --> 00:34:40.480
All right.

00:34:40.480 --> 00:34:40.940
Okay.

00:34:40.940 --> 00:34:45.820
So this one is over on the Reddit programming humor one and it poses a question.

00:34:45.820 --> 00:34:49.140
What seems like a straightforward question for a piece of software?

00:34:49.140 --> 00:34:51.140
How do you exit them?

00:34:51.140 --> 00:34:56.480
And it types, it, there's some, you know, a couple of interesting options here.

00:34:56.480 --> 00:34:58.060
You get colon exit.

00:34:58.060 --> 00:35:01.060
7% of the people think you type colon exit.

00:35:01.060 --> 00:35:01.500
They're wrong.

00:35:01.500 --> 00:35:06.260
You type colon WQ, which I guess if you want to make changes, cool.

00:35:06.260 --> 00:35:07.440
Save your changes and exit.

00:35:07.440 --> 00:35:09.400
You could do most people got that one.

00:35:09.400 --> 00:35:12.300
And then you could do colon quit 7% again.

00:35:12.300 --> 00:35:19.780
You could click the close button hard for a non UI app, but or almost 20% of the people

00:35:19.780 --> 00:35:20.600
said, you know what?

00:35:20.600 --> 00:35:22.660
The way you restart Vim, this horrible thing.

00:35:22.660 --> 00:35:23.480
I can't get out of it.

00:35:23.480 --> 00:35:24.640
I'm going to restart the computer.

00:35:24.640 --> 00:35:27.840
I'm trapped in here.

00:35:27.840 --> 00:35:29.060
I just, I got to get out.

00:35:29.260 --> 00:35:32.900
I tried command Z or control Z and it just background it.

00:35:32.900 --> 00:35:33.660
And now what's it doing?

00:35:33.660 --> 00:35:34.640
It keeps coming back.

00:35:34.640 --> 00:35:38.260
And I think people clicked restart the computer to be funny.

00:35:38.260 --> 00:35:38.840
I don't.

00:35:38.840 --> 00:35:39.680
I know they did.

00:35:39.680 --> 00:35:43.740
I thought, and I pulled it up as a joke to be funny as well, but there you go.

00:35:43.740 --> 00:35:48.500
So have you, I don't know the, the close button works for me.

00:35:48.500 --> 00:35:49.540
I don't know.

00:35:49.540 --> 00:35:51.560
Well, it closes the terminal, right?

00:35:51.560 --> 00:35:51.960
Yeah.

00:35:51.960 --> 00:35:52.660
Yeah.

00:35:52.660 --> 00:35:58.220
so I mean, who doesn't, you got to say, do you want to terminate the running program?

00:35:58.220 --> 00:35:58.780
Right.

00:35:58.820 --> 00:36:00.880
You get like a warning that you're doing it wrong.

00:36:00.880 --> 00:36:03.360
I'm with you, Brian.

00:36:03.360 --> 00:36:03.980
I'm a boom guy.

00:36:03.980 --> 00:36:07.420
It's not hard.

00:36:07.420 --> 00:36:11.380
And actually I haven't, I don't use straight Vim except for on the command line.

00:36:11.380 --> 00:36:12.040
You're right.

00:36:12.040 --> 00:36:16.580
I guess I do that on the command line, but I do, I essentially use Vim within PyCharm

00:36:16.580 --> 00:36:17.600
or VS Code as well.

00:36:17.600 --> 00:36:18.360
But yeah.

00:36:18.360 --> 00:36:19.160
Vim emulation.

00:36:19.160 --> 00:36:19.780
Yeah.

00:36:19.780 --> 00:36:20.200
Okay.

00:36:20.200 --> 00:36:20.560
It's fun.

00:36:20.620 --> 00:36:25.220
So I wanted to share a joke also because I just thought this was so funny.

00:36:25.220 --> 00:36:26.500
I could stop laughing this morning.

00:36:26.500 --> 00:36:31.120
so ran across this, tweet by, mediocre superheroes.

00:36:31.820 --> 00:36:33.940
it's a little cartoon thing.

00:36:33.940 --> 00:36:39.700
So, so the guy, you know, finds a genie, genie says three wishes.

00:36:39.700 --> 00:36:41.320
Hey, can I wish for more wishes?

00:36:41.320 --> 00:36:42.380
Not with me?

00:36:42.380 --> 00:36:42.660
No.

00:36:42.660 --> 00:36:43.720
Well, fine.

00:36:43.880 --> 00:36:45.440
I wish you couldn't count.

00:36:45.440 --> 00:36:49.500
And the genie, done.

00:36:49.500 --> 00:36:50.940
How many wishes do you have left?

00:36:50.940 --> 00:36:51.820
A billion.

00:36:51.820 --> 00:36:52.900
Hmm.

00:36:52.900 --> 00:36:53.820
That sounds right.

00:36:53.820 --> 00:36:55.960
I love it.

00:36:55.960 --> 00:36:58.740
anyway, that was funny.

00:36:58.740 --> 00:37:00.640
It's an inventive way around an old joke.

00:37:00.640 --> 00:37:03.940
So that's great.

00:37:03.940 --> 00:37:04.660
Anyway.

00:37:04.660 --> 00:37:05.580
oh, quick.

00:37:05.580 --> 00:37:07.520
Oh, a bit of audience feedback as well.

00:37:07.520 --> 00:37:10.320
Henry Schreiner says, restart the computer.

00:37:10.320 --> 00:37:11.600
Isn't that how you get out of email?

00:37:11.600 --> 00:37:13.680
Also true.

00:37:14.200 --> 00:37:14.600
Yeah.

00:37:14.600 --> 00:37:16.540
Yeah.

00:37:16.540 --> 00:37:19.360
What, what key chord do I hit to get out of that one?

00:37:19.360 --> 00:37:20.680
Fantastic.

00:37:20.680 --> 00:37:22.280
It's probably control something.

00:37:22.280 --> 00:37:22.840
Yeah.

00:37:22.840 --> 00:37:25.380
I bet it involves a control K something somehow.

00:37:25.380 --> 00:37:28.360
Anyway, thanks for, everything.

00:37:28.360 --> 00:37:29.200
Brian, thanks for being here.

00:37:29.200 --> 00:37:30.580
Thanks for the jokes and pan.

00:37:30.580 --> 00:37:30.940
It was great.

00:37:30.940 --> 00:37:31.540
You could join us.

00:37:31.540 --> 00:37:31.860
Yeah.

00:37:31.860 --> 00:37:32.380
Thanks, Brett.

00:37:32.380 --> 00:37:33.520
Thanks for having me on guys.

00:37:33.520 --> 00:37:34.240
Bye everybody.

00:37:34.240 --> 00:37:35.240
Bye everyone.

