
00:00:00.000 --> 00:00:05.160
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.160 --> 00:00:10.600
This is episode 280, recorded April 19th, 2022.


00:00:10.600 --> 00:00:11.600
I'm Michael Kennedy.


00:00:11.600 --> 00:00:12.800
And I'm Brian Okken.


00:00:12.800 --> 00:00:14.100
And I'm Pat Decker.


00:00:14.100 --> 00:00:15.900
Welcome, Pat. Great to have you here.


00:00:15.900 --> 00:00:17.300
Well, thanks for having me on.


00:00:17.300 --> 00:00:20.900
Yeah, it's really exciting. You and I were chatting a bit about


00:00:20.900 --> 00:00:24.900
less new programming languages a bit over email.


00:00:24.900 --> 00:00:29.900
Yeah, it'd be fun to just have you come on and share some of the things that you're passionate


00:00:29.900 --> 00:00:30.900
about and whatnot.


00:00:30.900 --> 00:00:32.900
Tell people a bit about yourself.


00:00:32.900 --> 00:00:36.220
I got started with computers way back in the day, high school.


00:00:36.220 --> 00:00:39.380
I had an Apple II computer at school.


00:00:39.380 --> 00:00:41.420
Eventually got a Commodore 64 at home.


00:00:41.420 --> 00:00:50.460
I did Pascal on cards at Iowa State University and did a data processing program at Kirkwood


00:00:50.460 --> 00:00:56.180
in Cedar Rapids and got my first job out of there about 30 years ago or so.


00:00:56.180 --> 00:01:05.300
So I've worked mainframe and PC, COBOL C and a little bit of Python here and there.


00:01:05.300 --> 00:01:06.300
Fantastic.


00:01:06.300 --> 00:01:08.380
And it sounds like you're doing DevOps type things today.


00:01:08.380 --> 00:01:15.780
Yeah, the company is like many gone from on site in their own data center to 80% or so


00:01:15.780 --> 00:01:23.220
So I'm running on AWS and so I get to share your same frustration with AWS interface in


00:01:23.220 --> 00:01:24.220
Python.


00:01:24.220 --> 00:01:27.340
It's not always obvious how that works.


00:01:27.340 --> 00:01:32.880
It's updated every week and I know the way it is updated every week has got to be some


00:01:32.880 --> 00:01:37.940
code gen is running somewhere that regenerates it and it's just never quite discoverable,


00:01:37.940 --> 00:01:39.140
right?


00:01:39.140 --> 00:01:42.820
It's fine once you get it working as long as you don't touch it or have to understand


00:01:42.820 --> 00:01:43.820
it.


00:01:43.820 --> 00:01:46.860
- This is not the sign of a fantastic API, but it's cool.


00:01:46.860 --> 00:01:48.900
You get to work in AWS.


00:01:48.900 --> 00:01:50.020
Cool, well, great to have you here.


00:01:50.020 --> 00:01:53.180
Now, Brian, before we jump over to your first topic,


00:01:53.180 --> 00:01:56.260
I just want to say this episode is brought to you by Mergify.


00:01:56.260 --> 00:01:59.340
I am psyched about what these guys are offering.


00:01:59.340 --> 00:02:00.540
Mergify is super cool.


00:02:00.540 --> 00:02:03.960
It's all about automating Git collaboration.


00:02:03.960 --> 00:02:05.540
And I have a lot to say about Git,


00:02:05.540 --> 00:02:09.620
but I want to start with pie because I love pie.


00:02:09.620 --> 00:02:10.980
Banana cream pie is my favorite.


00:02:10.980 --> 00:02:11.860
I'll take a cheesecake.


00:02:11.860 --> 00:02:13.060
Does that count as a pie?


00:02:13.060 --> 00:02:13.980
Is that what we're talking about?


00:02:13.980 --> 00:02:17.480
- No, we're talking about HTT, HTTpie.


00:02:17.480 --> 00:02:19.980
And the--


00:02:19.980 --> 00:02:20.820
- Still a good pie.


00:02:20.820 --> 00:02:23.620
- Yeah, the website actually lists in their readme,


00:02:23.620 --> 00:02:25.980
tells you exactly how they wish you to pronounce it


00:02:25.980 --> 00:02:29.460
right off the bat, H-A-T-T-Pie.


00:02:29.460 --> 00:02:31.820
Anyway, it's a command, it's a really cool tool.


00:02:31.820 --> 00:02:33.220
It's a command line tool,


00:02:33.220 --> 00:02:35.300
and I think we've covered it before


00:02:35.300 --> 00:02:39.740
for interacting with, it's especially useful for APIs.


00:02:39.740 --> 00:02:40.580
So you don't--


00:02:40.580 --> 00:02:42.140
- It's one of the first things I install


00:02:42.140 --> 00:02:44.380
on any server on my Mac if I get a new one,


00:02:44.380 --> 00:02:45.620
like straight up, this thing is fantastic.


00:02:45.620 --> 00:02:49.020
- Yeah, yeah, and it's so fantastic that it had 60,


00:02:49.020 --> 00:02:50.420
this is what I want to cover.


00:02:50.420 --> 00:02:51.920
I'm sorry to laugh.


00:02:51.920 --> 00:02:56.920
It had 54,000 stars on GitHub, and then it lost them.


00:02:56.920 --> 00:02:57.940
- But it didn't?


00:02:57.940 --> 00:02:59.100
- Then it didn't.


00:02:59.100 --> 00:03:02.460
So, oof, what a cliff.


00:03:02.460 --> 00:03:04.520
So how many does it have now?


00:03:04.520 --> 00:03:06.820
Right now, if we look, it's got 16.1 thousand.


00:03:06.820 --> 00:03:08.540
- Oh my gosh, it's way back.


00:03:08.540 --> 00:03:10.340
- Yeah, actually this morning when I looked,


00:03:10.340 --> 00:03:12.600
it was just 16.0, a thousand.


00:03:12.600 --> 00:03:16.820
So it's gotten a hundred stars just as I was researching this.


00:03:16.820 --> 00:03:21.060
So anyway, the, that's one of the,


00:03:21.060 --> 00:03:24.340
I just, I guess what I want to shout out to these guys of,


00:03:24.340 --> 00:03:25.720
it's a cool tool.


00:03:25.720 --> 00:03:27.380
If you're doing APIs, check it out.


00:03:27.380 --> 00:03:29.500
And also if you've started before,


00:03:29.500 --> 00:03:32.020
restart it because they, they deserve it.


00:03:32.020 --> 00:03:35.820
And what happened was they accidentally put their repo


00:03:35.820 --> 00:03:37.980
private for, there were,


00:03:37.980 --> 00:03:40.360
somebody was trying to do make it private,


00:03:40.360 --> 00:03:43.080
make some other test repo private,


00:03:43.080 --> 00:03:46.320
and they accidentally put the main one private,


00:03:46.320 --> 00:03:48.420
and if you're even private for a second,


00:03:48.420 --> 00:03:50.340
you lose all your stars.


00:03:50.340 --> 00:03:53.700
Warning, don't make your public stuff private.


00:03:53.700 --> 00:03:54.460
>> Don't do that.


00:03:54.460 --> 00:03:55.820
>> Oops.


00:03:55.820 --> 00:03:59.520
>> Wow. That is a good warning.


00:03:59.520 --> 00:04:01.660
It's a great tool, but a good warning.


00:04:01.660 --> 00:04:03.200
It does have a danger zone.


00:04:03.200 --> 00:04:04.600
Danger zone, this is going to happen,


00:04:04.600 --> 00:04:10.880
But unfortunately, the warning is equivalent if there's zero followers and


00:04:10.880 --> 00:04:14.600
zero people interested in or you have one of the most popular things on GitHub.


00:04:14.600 --> 00:04:17.480
Like it should be like, this is super duper important.


00:04:17.480 --> 00:04:19.500
You're going to lose 54,000 GitHub stars.


00:04:19.500 --> 00:04:20.100
Are you doing it?


00:04:20.100 --> 00:04:21.240
Yeah.


00:04:21.240 --> 00:04:26.480
Well, and also, I mean, if, if you work with a lot of, GitHub repos and


00:04:26.480 --> 00:04:30.240
you're like, like maybe you made something public for a talk and then


00:04:30.240 --> 00:04:33.620
you're making it private because I don't know the talks over or whatever.


00:04:33.880 --> 00:04:36.400
Or you just don't want to maintain something like I'm just done with this thing.


00:04:36.400 --> 00:04:36.840
I don't really want to do that.


00:04:36.840 --> 00:04:37.800
>> If you're working with it a lot,


00:04:37.800 --> 00:04:40.400
maybe you've seen that warning so many times that you're not


00:04:40.400 --> 00:04:43.240
really reading it anymore and double-checking.


00:04:43.240 --> 00:04:45.740
I guess this is just a warning,


00:04:45.740 --> 00:04:48.220
double-check it if you see that warning box,


00:04:48.220 --> 00:04:50.040
make sure you're on the right repo.


00:04:50.040 --> 00:04:53.000
>> Indeed. Pat, what do you think about this?


00:04:53.000 --> 00:04:54.320
>> It's pretty tragic.


00:04:54.320 --> 00:04:58.160
It's like those end-user license agreements where we all see them so often,


00:04:58.160 --> 00:05:00.520
they just automatically click, I think.


00:05:00.520 --> 00:05:01.800
>> Yeah, exactly.


00:05:01.800 --> 00:05:03.760
the confirmation dialogues and stuff.


00:05:03.760 --> 00:05:05.860
You're like, "Well, I have to copy this and paste that there.


00:05:05.860 --> 00:05:07.780
I just can't continue. So I'm going to just."


00:05:07.780 --> 00:05:09.620
Instead of warning danger,


00:05:09.620 --> 00:05:11.980
I think people see, "I want to get my work done,


00:05:11.980 --> 00:05:14.300
so click here to get my work done."


00:05:14.300 --> 00:05:15.620
Then, "Oh, no. What happened?"


00:05:15.620 --> 00:05:16.740
>> Yeah.


00:05:16.740 --> 00:05:22.180
>> Yeah. Well, Brian, I believe you have at least helped a little bit.


00:05:22.180 --> 00:05:24.300
David, out in the audience, is starting it right now.


00:05:24.300 --> 00:05:26.180
>> Oh, I forgot to start also. I'm going to go start.


00:05:26.180 --> 00:05:28.100
>> You better get in there and start. Boom. All right, plus two.


00:05:28.100 --> 00:05:28.660
>> Couldn't we?


00:05:28.660 --> 00:05:29.860
>> I was going to start myself,


00:05:29.860 --> 00:05:31.500
but I'm not logged in any of my browsers


00:05:31.500 --> 00:05:32.780
for some reason on this account.


00:05:32.780 --> 00:05:35.460
So no starting off to start it later.


00:05:35.460 --> 00:05:37.900
Also a little bit out of order,


00:05:37.900 --> 00:05:40.140
but I want to also just cover this other thing.


00:05:40.140 --> 00:05:44.340
We are generally not a hundred percent of the time


00:05:44.340 --> 00:05:45.380
'cause there's still a little bit


00:05:45.380 --> 00:05:47.300
of long tail stuff happening,


00:05:47.300 --> 00:05:50.740
but generally we're moving our live stream of the recording,


00:05:50.740 --> 00:05:53.020
the one where David's at, I'm starting right now.


00:05:53.020 --> 00:05:54.100
Thanks for being here, David.


00:05:54.100 --> 00:05:56.500
That recording is now moving to Tuesdays


00:05:56.500 --> 00:05:57.860
at noon Pacific time.


00:05:57.860 --> 00:06:01.120
So if people want to come be part of the live show,


00:06:01.120 --> 00:06:04.340
see the video version, as well as just make comments


00:06:04.340 --> 00:06:07.160
or whatever, not Wednesday, Tuesdays in general,


00:06:07.160 --> 00:06:08.880
but check for the next couple weeks


00:06:08.880 --> 00:06:11.540
'cause it is still some pre-scheduled stuff.


00:06:11.540 --> 00:06:14.260
- Yeah, so how do people find out when it's coming up next?


00:06:14.260 --> 00:06:16.940
- I would say the best way is just to subscribe


00:06:16.940 --> 00:06:19.840
to the YouTube channel and then, you know,


00:06:19.840 --> 00:06:21.520
I hate to say it, but push the little bell


00:06:21.520 --> 00:06:22.840
for notifications so it'll tell you,


00:06:22.840 --> 00:06:24.520
like, hey, this thing's coming up


00:06:24.520 --> 00:06:26.200
and it'll let you know that we're gone live.


00:06:26.200 --> 00:06:27.040
- Yep.


00:06:27.040 --> 00:06:29.040
I don't have a great better way.


00:06:29.040 --> 00:06:32.040
Maybe we could do a mailing list, but it's a little tricky.


00:06:32.040 --> 00:06:34.960
>> But usually stick around on Tuesday Pacific.


00:06:34.960 --> 00:06:37.160
Tuesday noon Pacific, we'll be recording.


00:06:37.160 --> 00:06:39.160
>> Yeah. If you check YouTube once a week,


00:06:39.160 --> 00:06:40.840
you'll see it's scheduled pretty far out and then you can


00:06:40.840 --> 00:06:42.480
get a reminder for just that one thing.


00:06:42.480 --> 00:06:44.000
You don't have to always get messages.


00:06:44.000 --> 00:06:47.440
Okay. This is a fun one.


00:06:47.440 --> 00:06:49.880
You mentioned some of the older programming languages.


00:06:49.880 --> 00:06:51.840
When I was in college,


00:06:51.840 --> 00:06:54.800
I was studying chemistry,


00:06:54.800 --> 00:06:56.920
chemical engineering, math, all these different things,


00:06:56.920 --> 00:06:58.640
And as part of that, they said,


00:06:58.640 --> 00:07:00.080
"You're gonna have to take a programming class."


00:07:00.080 --> 00:07:01.200
I'm like, "Super, what's it gonna be?


00:07:01.200 --> 00:07:02.520
"Like C++ or something?"


00:07:02.520 --> 00:07:04.320
Remember, this is like early '90s.


00:07:04.320 --> 00:07:06.360
So that was a good choice then.


00:07:06.360 --> 00:07:08.160
And they said, "No, you're gonna take


00:07:08.160 --> 00:07:10.100
"the most important programming class


00:07:10.100 --> 00:07:11.520
"you're ever gonna take in your career.


00:07:11.520 --> 00:07:12.520
"You're gonna learn Fortran."


00:07:12.520 --> 00:07:15.640
I'm like, "Wait a minute, no, no, no.


00:07:15.640 --> 00:07:16.480
"I don't wanna do that.


00:07:16.480 --> 00:07:19.360
"That doesn't sound like the most important thing ever."


00:07:19.360 --> 00:07:22.880
But nonetheless, that was one of my first courses


00:07:22.880 --> 00:07:23.720
I had to take.


00:07:23.720 --> 00:07:25.160
I only took a couple.


00:07:25.160 --> 00:07:26.840
Eventually got to take some C++,


00:07:26.840 --> 00:07:28.200
But Fortran was where it started.


00:07:28.200 --> 00:07:31.880
So here's an article that was recommended to us by,


00:07:31.880 --> 00:07:34.480
let me make sure I get the name right, Galin Swint.


00:07:34.480 --> 00:07:37.840
And Galin is a PhD researcher and said,


00:07:37.840 --> 00:07:39.800
"Hey, here's a really interesting article."


00:07:39.800 --> 00:07:42.680
The article, I don't believe is by them,


00:07:42.680 --> 00:07:45.560
but it's about the sort of,


00:07:45.560 --> 00:07:47.120
I think it was something in their lab


00:07:47.120 --> 00:07:47.940
they were talking about.


00:07:47.940 --> 00:07:49.040
It says, the title is,


00:07:49.040 --> 00:07:51.240
"The Counterintuitive Rise of Python


00:07:51.240 --> 00:07:52.840
"in Scientific Computing."


00:07:52.840 --> 00:07:53.920
Why is it counterintuitive?


00:07:53.920 --> 00:07:55.360
Because Fortran is fast,


00:07:55.360 --> 00:07:57.360
and what you want to do is process lots of data


00:07:57.360 --> 00:07:58.840
and you want to do it fast.


00:07:58.840 --> 00:08:01.360
So here's a really interesting story


00:08:01.360 --> 00:08:05.200
of people who were doing older stuff like Fortran and C,


00:08:05.200 --> 00:08:08.320
sort of were forced in, coerced into doing


00:08:08.320 --> 00:08:11.000
a little bit of Python and accidentally made


00:08:11.000 --> 00:08:14.920
their supercomputer stuff go like 100 times faster


00:08:14.920 --> 00:08:17.160
or something in Python rather than in C


00:08:17.160 --> 00:08:18.680
or rather than Fortran,


00:08:18.680 --> 00:08:20.920
which is a counterintuitive result, right?


00:08:20.920 --> 00:08:21.760
- Yes, it is.


00:08:21.760 --> 00:08:25.100
- Yeah, so I think that I'll cover a few details


00:08:25.100 --> 00:08:27.400
of this article, just pull out some highlights.


00:08:27.400 --> 00:08:28.880
But the reason I'm bringing an article


00:08:28.880 --> 00:08:30.100
instead of like a tool or something is


00:08:30.100 --> 00:08:32.940
I think this would be interesting for people to share


00:08:32.940 --> 00:08:34.320
if they're in a situation where they're like,


00:08:34.320 --> 00:08:36.440
oh, Python is no good, this is such a slow language.


00:08:36.440 --> 00:08:38.820
It's like doing math is like a thousand times slower


00:08:38.820 --> 00:08:40.600
than C, I don't actually know what it is.


00:08:40.600 --> 00:08:42.340
But it's a lot, lot slower, right?


00:08:42.340 --> 00:08:44.280
So it goes through here and here's a couple of things.


00:08:44.280 --> 00:08:46.640
It says, in our laboratory, a polarizing debate


00:08:46.640 --> 00:08:49.360
has been raging since 2010.


00:08:49.360 --> 00:08:50.640
Summarized by the question,


00:08:50.640 --> 00:08:53.840
Why are more and more time critical scientific computations


00:08:53.840 --> 00:08:58.640
formerly performed in Fortran now written in Python, a slower language?


00:08:58.640 --> 00:09:00.240
Oh, Python, a slower language.


00:09:00.240 --> 00:09:04.960
So Python does have the reputation of being slow and especially around math.


00:09:04.960 --> 00:09:07.360
I think it's honestly, it's earned it.


00:09:07.360 --> 00:09:10.160
Unfortunately, I would really love, sidebar,


00:09:10.160 --> 00:09:14.400
I would really love to see Python adopt something along the lines of


00:09:14.400 --> 00:09:18.320
value types that can be boxed back to Py longs.


00:09:18.320 --> 00:09:22.400
So like, on the stack locally it's a number but it gets complicated.


00:09:22.400 --> 00:09:24.800
But I think that would actually solve a ton of stuff.


00:09:24.800 --> 00:09:28.720
Anyway, so yeah, plain Python is slower than Fortran.


00:09:28.720 --> 00:09:31.120
But when you do computational stuff,


00:09:31.120 --> 00:09:32.920
you don't do plain Python.


00:09:32.920 --> 00:09:36.920
What you do is you do numpy, scipy, dask.


00:09:36.920 --> 00:09:39.560
All of these things are written in C with a thin


00:09:39.560 --> 00:09:42.800
coordination layer in Python as part of its API.


00:09:42.800 --> 00:09:46.920
So here's like some graph you can see on the article.


00:09:46.920 --> 00:09:51.800
And it says, here's like, you know, 10 to the one versus 10 to the minus two.


00:09:51.800 --> 00:09:57.420
What is that a hundred times faster if you use Cython or Numba or NumPy and so on.


00:09:57.420 --> 00:09:58.600
So pretty interesting.


00:09:58.600 --> 00:10:00.020
And it also shows, guess what?


00:10:00.020 --> 00:10:01.000
Shocker.


00:10:01.000 --> 00:10:02.360
Beep, did you do the news alert?


00:10:02.360 --> 00:10:05.540
Fortran is somewhat less popular than it used to be.


00:10:05.540 --> 00:10:08.160
Oh no.


00:10:10.580 --> 00:10:17.860
So there's an interesting story of this project nicknamed Projector


00:10:17.860 --> 00:10:24.180
written in, written around 2010. So modern in quotes, Fortran, by somebody named Bob.


00:10:24.180 --> 00:10:28.180
So Bob worked on this project and there's apparently, let me find the numbers here.


00:10:28.180 --> 00:10:35.220
It's like 1.5 thousand lines of Fortran code. So a lot of Fortran code, like a lot of complicated


00:10:35.220 --> 00:10:39.380
math bits, the kind you kind of don't want to touch after it works. And it's going to do


00:10:39.380 --> 00:10:44.260
is trying to project something, thousands of multiple,


00:10:44.260 --> 00:10:46.860
multi perforations of combustion liner


00:10:46.860 --> 00:10:51.860
onto a 3D complex shape made of millions of polygons.


00:10:51.860 --> 00:10:53.500
So that might get complicated


00:10:53.500 --> 00:10:55.540
when you multiply those numbers together.


00:10:55.540 --> 00:10:59.840
And it turns out, Bob soon discovered


00:10:59.840 --> 00:11:02.740
that he was gonna use NumPy


00:11:02.740 --> 00:11:04.980
and this thing called a KD tree,


00:11:04.980 --> 00:11:06.620
'cause there's a bunch of people working in the lab


00:11:06.620 --> 00:11:07.460
that only knew Python.


00:11:07.460 --> 00:11:09.060
So like, here's a Python version you can use.


00:11:09.060 --> 00:11:11.900
And he thought this is gonna be rough.


00:11:11.900 --> 00:11:13.460
It's gonna be super slow.


00:11:13.460 --> 00:11:16.700
So he went and ran it after he got it done.


00:11:16.700 --> 00:11:20.140
And the Fortran version ran in six hours and 30 minutes.


00:11:20.140 --> 00:11:22.280
The Python version, four minutes.


00:11:22.280 --> 00:11:24.300
- Wow.


00:11:24.300 --> 00:11:26.500
- So what happened?


00:11:26.500 --> 00:11:28.980
Is Python a hundred times faster?


00:11:28.980 --> 00:11:30.900
No, Python is easier to work with


00:11:30.900 --> 00:11:34.380
and has many more built-in algorithms and data structures.


00:11:34.380 --> 00:11:39.380
this KD tree thing was using a different data structure,


00:11:39.380 --> 00:11:42.900
is a different data structure that has O log N complexity.


00:11:42.900 --> 00:11:44.760
Whereas the Fortran version,


00:11:44.760 --> 00:11:47.060
because it's so hard to write code in,


00:11:47.060 --> 00:11:48.380
they just wrote it in the simplest way


00:11:48.380 --> 00:11:49.260
they could make it work.


00:11:49.260 --> 00:11:52.020
So O N, and when you have billions times,


00:11:52.020 --> 00:11:54.500
millions times thousands, O log N wins,


00:11:54.500 --> 00:11:57.060
even if it's in a slower language.


00:11:57.060 --> 00:12:00.260
So if the conclusion was Fortran would have been faster


00:12:00.260 --> 00:12:02.940
if they had implemented this KD tree algorithm in it.


00:12:02.940 --> 00:12:07.100
but the people working on it, they're like computational scientists,


00:12:07.100 --> 00:12:10.940
not PhD data structure type people, right?


00:12:10.940 --> 00:12:14.300
They're already super busy just trying to do the programming


00:12:14.300 --> 00:12:19.540
and not working on cutting edge data structures and optimizations and stuff.


00:12:19.540 --> 00:12:22.100
So it was very easy to try one new thing in Python,


00:12:22.100 --> 00:12:25.380
which would have been very hard in Fortran, and we got this big win.


00:12:25.380 --> 00:12:28.860
So anyway, I think the debate about performance,


00:12:28.860 --> 00:12:31.300
developer speed versus execution speed,


00:12:31.300 --> 00:12:33.080
but also straight up execution speed.


00:12:33.080 --> 00:12:35.040
I think it's really interesting in Python


00:12:35.040 --> 00:12:37.260
and it's hard to be nuanced enough.


00:12:37.260 --> 00:12:40.380
It's always there's some little interesting wrinkle like this.


00:12:40.380 --> 00:12:44.080
>> Yeah. If you're going to hand code everything anyway,


00:12:44.080 --> 00:12:46.620
it's also faster in assembly.


00:12:46.620 --> 00:12:48.860
Just write assembly.


00:12:48.860 --> 00:12:51.380
>> There's a downside to that.


00:12:51.380 --> 00:12:51.380
>> Why not?


00:12:51.380 --> 00:12:52.380
>> Yeah.


00:12:52.380 --> 00:12:54.220
>> I've always wanted to stick to


00:12:54.220 --> 00:12:57.500
this one processor I really loved forever.


00:12:57.500 --> 00:13:00.260
>> This is interesting. I like it.


00:13:00.260 --> 00:13:03.260
But it sort of reads like a commercial.


00:13:03.260 --> 00:13:08.580
So Bob was programming scientific computing and he was not happy in Fortran.


00:13:08.580 --> 00:13:11.980
Bob tried Python and now he's happy.


00:13:11.980 --> 00:13:16.380
>> Well, I think Bob unwillingly tried Python and eventually he was happy.


00:13:16.380 --> 00:13:18.900
It sounded like he was dragged through it.


00:13:18.900 --> 00:13:19.500
>> I like it.


00:13:19.500 --> 00:13:21.340
>> Yeah. I know it does read a bit like that,


00:13:21.340 --> 00:13:22.900
but I think it's an interesting story.


00:13:22.900 --> 00:13:26.860
Pat, what do you think? You have a bit of a historical perspective on all this.


00:13:26.860 --> 00:13:29.420
>> Yeah. I didn't go to school for chemistry,


00:13:29.420 --> 00:13:32.380
but I bet Fortran's not popular among chemistry students, is it?


00:13:32.380 --> 00:13:34.900
>> No, not anymore. Sure.


00:13:34.900 --> 00:13:37.220
>> I did a little benchmark the other day.


00:13:37.220 --> 00:13:44.820
I was trying to just see how fast some EFS storage was on AWS versus EBS.


00:13:44.820 --> 00:13:48.980
I wrote a Python script to do that and wrote 10 million records out.


00:13:48.980 --> 00:13:51.420
I thought, well, maybe Python is going to be slow.


00:13:51.420 --> 00:13:54.860
I thought I'll just whip up a quick thing in Rust here.


00:13:54.860 --> 00:13:58.860
As it turned out, Python was 10 times faster at that too.


00:13:58.860 --> 00:14:00.460
on the same exact hardware.


00:14:00.460 --> 00:14:02.620
And I'm not sure why that was.


00:14:02.620 --> 00:14:05.660
I may not have done something that was optimal for Rust,


00:14:05.660 --> 00:14:07.620
but there it is 10 times faster.


00:14:07.620 --> 00:14:08.900
- Yeah, sure, no, that's super interesting.


00:14:08.900 --> 00:14:12.700
I've seen Python just rip across like OS type stuff like that.


00:14:12.700 --> 00:14:13.520
It's pretty good.


00:14:13.520 --> 00:14:15.940
All right, well, what's your first item, Pat?


00:14:15.940 --> 00:14:17.340
Are we off to the metaverse?


00:14:17.340 --> 00:14:18.900
Or is the metaverse off to us?


00:14:18.900 --> 00:14:20.860
- I stumbled across this the other day.


00:14:20.860 --> 00:14:23.980
We've had Lucas Longa on the show,


00:14:23.980 --> 00:14:27.020
the programmer in residence,


00:14:27.020 --> 00:14:31.760
And it looks like they're going to get another year due to a donation from


00:14:31.760 --> 00:14:36.760
a meta of $300,000 to the Python software foundation.


00:14:36.760 --> 00:14:39.080
And it was specifically for that purpose.


00:14:39.080 --> 00:14:40.880
That's a really big deal.


00:14:40.880 --> 00:14:47.480
Um, and, and like you said in the past, Python is very important to Meta,


00:14:47.480 --> 00:14:51.900
Facebook's parent company now, because of much of their infrastructure


00:14:51.900 --> 00:14:54.320
is built on it, PyTorch in particular.


00:14:54.320 --> 00:14:56.360
Um, they use it a lot.


00:14:56.360 --> 00:15:01.360
So their internal implementation of Python is called Cinder, apparently,


00:15:01.360 --> 00:15:03.760
which I think I've seen mentioned a few times.


00:15:03.760 --> 00:15:06.760
But they would like to see continued development,


00:15:06.760 --> 00:15:08.960
and they're going to fund it, which is awesome.


00:15:08.960 --> 00:15:10.360
Yeah, that's really neat.


00:15:10.360 --> 00:15:14.160
I think Cinder is a fantastic thing they've created.


00:15:14.160 --> 00:15:17.660
And it's interesting, it's open source in the sense of,


00:15:17.660 --> 00:15:20.160
like, maybe the better term would be source open.


00:15:20.160 --> 00:15:22.160
Like, here, we're going to put this out here.


00:15:22.160 --> 00:15:26.160
We don't expect any contributions, and we don't want to put it out there


00:15:26.160 --> 00:15:27.480
is like a project to grow on its own,


00:15:27.480 --> 00:15:28.960
but we think it might inspire people.


00:15:28.960 --> 00:15:30.260
So here's the source.


00:15:30.260 --> 00:15:33.660
But what they have contained in there is amazing.


00:15:33.660 --> 00:15:37.520
There's just so many optimizations and different things.


00:15:37.520 --> 00:15:40.120
I think they might even have that value type thing


00:15:40.120 --> 00:15:42.360
I discussed in there, I can't remember,


00:15:42.360 --> 00:15:45.380
but yeah, that's a really cool project


00:15:45.380 --> 00:15:46.320
that they're working on.


00:15:46.320 --> 00:15:47.640
So this is great.


00:15:47.640 --> 00:15:49.240
You know, I think Lukas Schlenge


00:15:49.240 --> 00:15:50.920
has gone sort of full circle, right?


00:15:50.920 --> 00:15:54.120
He was independent, he was at Instagram for a while,


00:15:54.120 --> 00:15:55.800
which is, you know, part of meta.


00:15:55.800 --> 00:15:58.740
and then left to sort of do his own thing


00:15:58.740 --> 00:16:01.000
and found his way to this developer in residence


00:16:01.000 --> 00:16:03.400
and now Meta is sending money so that he stays there.


00:16:03.400 --> 00:16:06.240
That's like an interesting circle, I think.


00:16:06.240 --> 00:16:07.420
- Yeah, that's good.


00:16:07.420 --> 00:16:10.360
It seems tenuous though that we have it


00:16:10.360 --> 00:16:13.040
like one year at a time, that we don't know


00:16:13.040 --> 00:16:14.720
if we're gonna have a developer in residence


00:16:14.720 --> 00:16:16.160
longer than another year.


00:16:16.160 --> 00:16:17.760
- It's like a postdoc.


00:16:17.760 --> 00:16:18.880
- Hopefully it's a game of tag


00:16:18.880 --> 00:16:21.280
with Microsoft coming next or something.


00:16:21.280 --> 00:16:23.040
- Yeah, exactly.


00:16:23.040 --> 00:16:24.320
That'd be great and I think there are


00:16:24.320 --> 00:16:25.920
a couple of organizations doing that.


00:16:25.920 --> 00:16:28.040
So I know that there was a talk about having


00:16:28.040 --> 00:16:31.660
multiple folks participating in that group,


00:16:31.660 --> 00:16:33.680
which would be great because I know there's way more


00:16:33.680 --> 00:16:36.240
work than Lucas can do on himself. He's quite busy.


00:16:36.240 --> 00:16:36.640
>> Yeah.


00:16:36.640 --> 00:16:40.920
>> Alvaro in the audience has a fine name proposal here.


00:16:40.920 --> 00:16:44.440
The PSF developer in residence should be called the PSF


00:16:44.440 --> 00:16:48.760
dunderder__dir__.


00:16:48.760 --> 00:16:51.440
I hereby am opening a pep.


00:16:51.440 --> 00:16:53.880
Well done Alvaro. No, just kidding.


00:16:53.880 --> 00:16:56.080
I would have given more work for something silly like that.


00:16:56.080 --> 00:16:59.280
But that's pretty awesome. The PSF Dunder, DunderDir.


00:16:59.280 --> 00:17:01.680
Cool. Well, thank you, Pat.


00:17:01.680 --> 00:17:04.380
Now, before we move on to the next item,


00:17:04.380 --> 00:17:07.180
let me tell you all about our sponsor today.


00:17:07.180 --> 00:17:08.480
And like I said, I'm really excited about this.


00:17:08.480 --> 00:17:11.780
I'm actually doing a bunch of work on some Git presentations.


00:17:11.780 --> 00:17:13.780
And so I'm just trying to think about


00:17:13.780 --> 00:17:18.180
what's the workflow with Git and how can we work better,


00:17:18.180 --> 00:17:20.480
especially doing team type stuff.


00:17:20.480 --> 00:17:27.560
So Mergify is a service that will help you and especially your team be way better with Git.


00:17:27.560 --> 00:17:33.160
So it's an amazing tool to make you and your team be more productive with GitHub in particular.


00:17:33.160 --> 00:17:35.760
It's all about leveling up pull requests.


00:17:35.760 --> 00:17:38.760
So some of the features of their platform


00:17:38.760 --> 00:17:40.560
that you hook into your repositories


00:17:40.560 --> 00:17:42.260
are automatic merges.


00:17:42.260 --> 00:17:45.120
So you can set up conditions for an automatic merge


00:17:45.120 --> 00:17:49.960
and Mergify will take care of merging the PR as soon as it's ready and passes all the details.


00:17:49.960 --> 00:17:51.960
There's automatic updates.


00:17:51.960 --> 00:17:53.960
So if you have multiple pull requests,


00:17:53.960 --> 00:17:57.220
it'll merge the pull requests serially on top of each other.


00:17:57.220 --> 00:17:59.220
So there's no way to introduce a regression.


00:17:59.220 --> 00:18:01.220
There's also merge queues.


00:18:01.220 --> 00:18:03.720
So if you've got like a long CI process


00:18:03.720 --> 00:18:05.720
and things are slow or you've got lots of code,


00:18:05.720 --> 00:18:07.720
you can set up priorities


00:18:07.720 --> 00:18:10.220
and have the most important ones merge fix,


00:18:10.220 --> 00:18:12.220
like bug requests or bug fixes.


00:18:12.220 --> 00:18:14.220
Especially if they're security fixes,


00:18:14.220 --> 00:18:15.220
they go right here, right at the front.


00:18:15.220 --> 00:18:16.220
Do those now.


00:18:16.220 --> 00:18:17.220
So that's awesome.


00:18:17.220 --> 00:18:19.980
They also have something called backport.


00:18:19.980 --> 00:18:23.580
So, Mergify will copy the pull request to other branches


00:18:23.580 --> 00:18:25.580
once it's merged, if you set that up.


00:18:25.580 --> 00:18:29.300
So that you can ship bug fixes to multiple branches,


00:18:29.300 --> 00:18:30.900
feature branches and whatnot,


00:18:30.900 --> 00:18:32.900
automatically or even older versions, right?


00:18:32.900 --> 00:18:37.060
Version 1.0 of your app versus 2.0, 2.2, whatever.


00:18:37.060 --> 00:18:40.140
Have those automatically merge those bug requests,


00:18:40.140 --> 00:18:41.540
bug fixes in.


00:18:41.540 --> 00:18:44.620
Super cool. So, Mergify does all these things automatically


00:18:44.620 --> 00:18:46.380
that you would otherwise have to do manually.


00:18:46.380 --> 00:18:50.940
So you save time, you and your team will focus on projects that matter the most.


00:18:50.940 --> 00:18:55.620
Mergify is coordinated with any CI and is fully integrated into GitHub.


00:18:55.620 --> 00:19:00.820
They also have a startup program that can give your company up to $21,000 of credits.


00:19:00.820 --> 00:19:04.340
So if you're doing a startup and you want to use them to help grow,


00:19:04.340 --> 00:19:05.820
you'll reach out to them for sure.


00:19:05.820 --> 00:19:10.980
Do that by going to pythonbytes.fm/mergify, sign up for a demo and get started.


00:19:10.980 --> 00:19:13.540
The link is at the top of your podcast player show notes.


00:19:13.540 --> 00:19:14.580
So just click it.


00:19:14.580 --> 00:19:17.280
Thanks to Mergify for supporting our show.


00:19:17.280 --> 00:19:18.180
Very cool project.


00:19:18.180 --> 00:19:18.680
Yeah.


00:19:18.680 --> 00:19:20.380
All right, Brian, what's the next one here?


00:19:20.380 --> 00:19:22.080
>> Well, we were talking about data science a little bit,


00:19:22.080 --> 00:19:25.200
and people using Python for data science.


00:19:25.200 --> 00:19:26.580
But one of the things that people


00:19:26.580 --> 00:19:28.560
use when they're doing data science,


00:19:28.560 --> 00:19:30.840
plus other stuff in DevOps and whatever,


00:19:30.840 --> 00:19:33.920
is dashboards, dashboards in Python.


00:19:33.920 --> 00:19:36.520
It's one of the powerful reasons to use it.


00:19:36.520 --> 00:19:40.860
There's a couple of things I want to discuss around dashboards.


00:19:40.860 --> 00:19:45.620
Both of them come via suggestions from Mark Skov-Madsen.


00:19:45.620 --> 00:19:46.900
So thanks, Mark.


00:19:46.900 --> 00:19:49.100
First is the easiest way to create


00:19:49.100 --> 00:19:50.940
interactive dashboard in Python.


00:19:50.940 --> 00:19:52.380
Obviously it's their opinion,


00:19:52.380 --> 00:19:54.020
but it does look pretty easy,


00:19:54.020 --> 00:19:57.980
is to use HVplot.interactive.


00:19:57.980 --> 00:20:01.940
So this is an article that talks about how to do this.


00:20:01.940 --> 00:20:04.660
And it really looks nice.


00:20:04.660 --> 00:20:06.980
This panel looks pretty good.


00:20:06.980 --> 00:20:08.100
- Oh yeah, that's great.


00:20:08.100 --> 00:20:09.820
- Pulling data out, you got dark and light,


00:20:09.820 --> 00:20:13.540
and you've got the controls on one side.


00:20:13.540 --> 00:20:14.780
>> Okay.


00:20:14.780 --> 00:20:19.500
>> This is just using some pre-canned data,


00:20:19.500 --> 00:20:21.440
but you can use obviously your own data.


00:20:21.440 --> 00:20:23.820
But the article is pretty short,


00:20:23.820 --> 00:20:25.600
and one of the things I love about it, of course,


00:20:25.600 --> 00:20:30.180
is it's got a animated GIF to show you exactly what you're getting into.


00:20:30.180 --> 00:20:34.700
Then also a video.


00:20:34.700 --> 00:20:37.900
One of the authors, Sophia,


00:20:37.900 --> 00:20:40.460
just reads the, like pretty much goes through the article


00:20:40.460 --> 00:20:43.260
and talks about it and shows the demo of everything.


00:20:43.260 --> 00:20:44.100
So that's nice.


00:20:44.100 --> 00:20:45.240
And it's only like six minutes.


00:20:45.240 --> 00:20:46.460
I was watching it this morning.


00:20:46.460 --> 00:20:49.100
So really cool if you want to try.


00:20:49.100 --> 00:20:54.100
And so HVPlot is part of the HoloViz family of tools.


00:20:54.100 --> 00:20:55.860
So a lot of people are already using that


00:20:55.860 --> 00:20:57.780
or if you're not, check that out.


00:20:57.780 --> 00:20:58.620
Cool stuff.


00:20:58.620 --> 00:20:59.780
- Yeah, this looks great.


00:20:59.780 --> 00:21:00.820
- The other-


00:21:00.820 --> 00:21:03.220
- I always want to have good use cases for this.


00:21:03.220 --> 00:21:05.740
And I just, I don't find myself doing lots of dashboards


00:21:05.740 --> 00:21:07.060
and stuff, but every time I see them, I'm like,


00:21:07.060 --> 00:21:08.700
"Wow, what can I build a dashboard for?


00:21:08.700 --> 00:21:09.780
That would be great to have this."


00:21:09.780 --> 00:21:12.200
>> Well, so I have some use cases for dashboards,


00:21:12.200 --> 00:21:14.140
but I really don't want to spend a lot of time on it.


00:21:14.140 --> 00:21:15.660
I think even though this is like


00:21:15.660 --> 00:21:18.100
six-minute video of how to get through it,


00:21:18.100 --> 00:21:20.380
I think that probably I'd have to set aside


00:21:20.380 --> 00:21:25.300
maybe a half day to figure out something to get it usable.


00:21:25.300 --> 00:21:28.700
But it does show that once you understand what you're doing,


00:21:28.700 --> 00:21:33.180
you can throw together dashboards pretty quickly and be able to.


00:21:33.180 --> 00:21:35.620
Well, in the demo,


00:21:35.620 --> 00:21:39.040
one of the dashboard items was in the controls is like,


00:21:39.040 --> 00:21:40.500
let's say you've got a whole bunch of columns


00:21:40.500 --> 00:21:45.500
or some different elements in a row that you,


00:21:45.500 --> 00:21:48.100
or in a column that you want to filter out.


00:21:48.100 --> 00:21:50.260
So there's ways to filter your data


00:21:50.260 --> 00:21:51.960
so that you're looking at different stuff.


00:21:51.960 --> 00:21:54.980
And I was like, I have exact use case for this.


00:21:54.980 --> 00:21:56.500
So I'm pretty excited.


00:21:56.500 --> 00:22:00.740
The other thing around plots is maybe a HV plot


00:22:00.740 --> 00:22:02.800
or dashboards is maybe HV plot


00:22:02.800 --> 00:22:04.300
isn't the right thing for you.


00:22:04.300 --> 00:22:09.300
Well, we've got another thing is the PyData Global 2021.


00:22:09.300 --> 00:22:12.660
There's a video stream up on YouTube


00:22:12.660 --> 00:22:16.100
called Python Dashboarding Shootout and Showdown.


00:22:16.100 --> 00:22:19.500
And so this is a whole bunch of different presenters


00:22:19.500 --> 00:22:23.420
talking about building dashboards in Python


00:22:23.420 --> 00:22:28.420
using either dash or panel or voila or streamlet.


00:22:28.420 --> 00:22:31.220
So watch different people do it.


00:22:31.220 --> 00:22:33.380
So you wanna watch some,


00:22:33.380 --> 00:22:36.820
use something other than HP plot, watch this video.


00:22:36.820 --> 00:22:39.580
One of the things I love about this is if you're only


00:22:39.580 --> 00:22:41.900
looking forward to one of them,


00:22:41.900 --> 00:22:45.580
one of the commenters on this video put up hyperlinks


00:22:45.580 --> 00:22:47.420
to each of the different sections.


00:22:47.420 --> 00:22:49.500
So you can just hop right to the video part


00:22:49.500 --> 00:22:50.540
that you want to watch.


00:22:50.540 --> 00:22:52.060
- Oh yeah, that's great.


00:22:52.060 --> 00:22:52.900
So yeah, it looks good.


00:22:52.900 --> 00:22:53.840
I love these dashboards.


00:22:53.840 --> 00:22:54.860
It's definitely one of their powers.


00:22:54.860 --> 00:22:56.820
- Pat. - Pat, do you do anything?


00:22:56.820 --> 00:22:58.660
Sorry, Brian, I took out your, or.


00:22:58.660 --> 00:23:01.660
- Well, we do have some prebuilt dashboards


00:23:01.660 --> 00:23:07.100
a model or the EKS cluster in Grafana and Elastic.


00:23:07.100 --> 00:23:08.680
But this is another option.


00:23:08.680 --> 00:23:10.560
It'd be good to do something ad hoc.


00:23:10.560 --> 00:23:12.400
If it's a quick and dirty,


00:23:12.400 --> 00:23:13.720
maybe I can clip on out.


00:23:13.720 --> 00:23:15.760
>> Brian, did you just grab a Pandas data frame


00:23:15.760 --> 00:23:17.960
and then make it interactive?


00:23:17.960 --> 00:23:21.800
>> Not quite, but it's almost.


00:23:21.800 --> 00:23:24.560
I mean, this is built to go


00:23:24.560 --> 00:23:27.000
really closely with Pandas data frames.


00:23:27.000 --> 00:23:29.120
So the code is,


00:23:29.120 --> 00:23:31.360
you're doing some filtering,


00:23:31.360 --> 00:23:34.680
some pipeline processing like group buys and and selecting


00:23:34.680 --> 00:23:39.440
indices, what index you're going to use. And then, yeah, it's


00:23:39.440 --> 00:23:43.200
pretty much interactive at that point. But the some of the code


00:23:43.200 --> 00:23:46.560
around this is building the widgets for the controls.


00:23:46.560 --> 00:23:49.320
You got to define the UI and how people interact with it. Got it.


00:23:49.320 --> 00:23:53.320
Yeah, it's not it's but it's pretty easy. I can't imagine. I


00:23:53.320 --> 00:23:56.000
mean, it's not obvious because so you have to kind of it's good


00:23:56.000 --> 00:23:59.140
to watch a tutorial or something. But it's also not


00:23:59.140 --> 00:24:02.220
difficult and then putting it together.


00:24:02.220 --> 00:24:04.180
Yeah, so most of the code in here is not


00:24:04.180 --> 00:24:07.700
the interactive plot because that's already happens,


00:24:07.700 --> 00:24:10.100
but it's the widgets.


00:24:10.100 --> 00:24:11.700
>> Got it. Cool. Thanks.


00:24:11.700 --> 00:24:14.500
All right. I think you all will be excited about this.


00:24:14.500 --> 00:24:17.060
I think this is quite a neat project.


00:24:17.060 --> 00:24:20.420
Now, let's see. This was sent over by Dave Chavelle,


00:24:20.420 --> 00:24:24.260
or actually is both sent over and is by Dave Chavelle.


00:24:24.260 --> 00:24:28.460
Brian, do you ever use entry points in Python packages?


00:24:28.460 --> 00:24:31.580
So you can set up, you can pip install a package,


00:24:31.580 --> 00:24:33.700
and then if you have that Python active,


00:24:33.700 --> 00:24:35.340
then you can just type a CLI command


00:24:35.340 --> 00:24:37.100
that is one of the entry points there,


00:24:37.100 --> 00:24:37.940
you know what I'm talking about?


00:24:37.940 --> 00:24:38.980
- Yeah, I do that all the time.


00:24:38.980 --> 00:24:41.860
- That's great, but there is some overhead to set it up,


00:24:41.860 --> 00:24:45.580
right, I've got to install it as a package and whatnot.


00:24:45.580 --> 00:24:48.220
This project called SourcePy allows you


00:24:48.220 --> 00:24:52.280
to basically turn any function into a CLI command,


00:24:52.280 --> 00:24:54.660
straight CLI command, in one line.


00:24:54.660 --> 00:24:56.100
So let me show you, talk about it.


00:24:56.100 --> 00:24:58.100
And it doesn't involve packages and installing


00:24:58.100 --> 00:24:59.220
or anything like that.


00:24:59.220 --> 00:25:01.360
So imagine you've got some file here


00:25:01.360 --> 00:25:03.700
and it's got a function, just a def function,


00:25:03.700 --> 00:25:05.820
pygrep is the example here,


00:25:05.820 --> 00:25:06.860
and it has a pattern,


00:25:06.860 --> 00:25:09.520
which is actually a regular expression pattern.


00:25:09.520 --> 00:25:10.600
Note the typing.


00:25:10.600 --> 00:25:14.300
Has grep data, which is a list of text inputs.


00:25:14.300 --> 00:25:16.400
So it would be a string or something,


00:25:16.400 --> 00:25:18.580
but it could also be like something piped


00:25:18.580 --> 00:25:20.920
or standard in or something along those lines, right?


00:25:20.920 --> 00:25:24.160
So if I have this script that just does that work


00:25:24.160 --> 00:25:26.340
with those type assigned data,


00:25:26.340 --> 00:25:28.860
and I have source py installed,


00:25:28.860 --> 00:25:32.020
I can say source this file here,


00:25:32.020 --> 00:25:36.780
and what it will do is it'll actually add up the,


00:25:36.780 --> 00:25:39.820
it'll expose those functions like pygrep and so on.


00:25:39.820 --> 00:25:41.300
So then I can just type pygrep,


00:25:41.300 --> 00:25:42.460
and it'll tell me how it works.


00:25:42.460 --> 00:25:45.340
And somewhere in here, where's the example of running it?


00:25:45.340 --> 00:25:46.620
Oh, right here, I think it is.


00:25:46.620 --> 00:25:50.520
So what you can do is you can just run pygrep against,


00:25:50.520 --> 00:25:52.260
now as a function, right?


00:25:52.260 --> 00:25:53.420
As a CLI function.


00:25:53.420 --> 00:25:55.820
So it has all sorts of cool features.


00:25:55.820 --> 00:25:58.460
For example, it has this type handling.


00:25:58.460 --> 00:26:03.220
So type hints that we talked about can be used to coerce inputs off


00:26:03.220 --> 00:26:06.980
the command line into integers and patterns and


00:26:06.980 --> 00:26:10.360
I/O streams for files and standard and such.


00:26:10.360 --> 00:26:13.440
Let's see, it just takes basically any function


00:26:13.440 --> 00:26:16.100
like this and turns it into something you run on the shell.


00:26:16.100 --> 00:26:20.300
Then you can also go down and you can do,


00:26:20.300 --> 00:26:24.060
I believe there's some class-based way to work with it and so on.


00:26:24.060 --> 00:26:25.460
But yeah, this is pretty neat.


00:26:25.460 --> 00:26:25.900
What do you think?


00:26:25.900 --> 00:26:29.980
Uh, I guess I'm confused at how it works with the normal source.


00:26:29.980 --> 00:26:31.820
Can we, that is a good question.


00:26:31.820 --> 00:26:33.820
Like, how does it not break normal source?


00:26:33.820 --> 00:26:34.100
Yeah.


00:26:34.100 --> 00:26:35.300
But that's a good question.


00:26:35.300 --> 00:26:38.700
It is a good question.


00:26:38.700 --> 00:26:40.820
Like it, does it replace it for a while?


00:26:40.820 --> 00:26:44.180
You've got it, installed or does it extend it somehow?


00:26:44.180 --> 00:26:44.540
Yeah.


00:26:44.540 --> 00:26:45.100
I don't know.


00:26:45.100 --> 00:26:49.220
I haven't looked at it enough to understand how it either


00:26:49.220 --> 00:26:50.940
coordinates or override.


00:26:50.940 --> 00:26:53.060
That's already put you on the spot.


00:26:53.060 --> 00:26:55.500
- No, no, no, it's a great question.


00:26:55.500 --> 00:26:58.460
Yeah, I haven't played with it, but it's really important.


00:26:58.460 --> 00:26:59.740
You would want to know 'cause you wanna break


00:26:59.740 --> 00:27:00.980
your regular source stuff.


00:27:00.980 --> 00:27:02.780
I'm sure you could alias it if for some reason


00:27:02.780 --> 00:27:04.420
it conflicted, but I don't know.


00:27:04.420 --> 00:27:07.860
- I think, so I think this would be really helpful for,


00:27:07.860 --> 00:27:10.020
aside from that, if that's all working great,


00:27:10.020 --> 00:27:12.460
then aside from that, I think it's a very useful way


00:27:12.460 --> 00:27:17.460
to have a handful of little tools for a project


00:27:17.460 --> 00:27:18.900
to be able to use that.


00:27:18.900 --> 00:27:21.960
If you're trying to share it with other people,


00:27:21.960 --> 00:27:26.440
I think packaging it the right way to have entry points is probably the right way to go.


00:27:26.440 --> 00:27:30.200
>> Yeah. If you want to do a more formal like a PIPX style,


00:27:30.200 --> 00:27:32.240
but this feels way more ad hoc.


00:27:32.240 --> 00:27:35.360
Like Pat was talking about his little script that he built to test some stuff.


00:27:35.360 --> 00:27:37.240
You could run this and then just call


00:27:37.240 --> 00:27:40.240
those functions as if they were built into the Bash or ZShell or whatever.


00:27:40.240 --> 00:27:41.040
>> Definitely.


00:27:41.040 --> 00:27:44.320
>> Also worth pointing out, it has built-in native async support.


00:27:44.320 --> 00:27:47.440
If you have async functions and you source it,


00:27:47.440 --> 00:27:49.640
then you can just call it as if it was


00:27:49.640 --> 00:27:54.280
a regular command line command and it still just takes it and runs.


00:27:54.280 --> 00:27:58.420
Kim Van Wick, who's been a co-host here before,


00:27:58.420 --> 00:27:59.640
has a clever thought.


00:27:59.640 --> 00:28:02.500
I suspect it wraps the normal source command


00:28:02.500 --> 00:28:05.480
and hands it over to the normal source if it isn't Python.


00:28:05.480 --> 00:28:06.680
It's a good idea.


00:28:06.680 --> 00:28:07.300
>> Probably.


00:28:07.300 --> 00:28:08.940
>> Yeah, probably. Although, like I said,


00:28:08.940 --> 00:28:11.680
I haven't really looked at the mechanism there.


00:28:11.680 --> 00:28:13.160
But this looks like a cool project.


00:28:13.160 --> 00:28:15.880
It's got all supported types like JSON,


00:28:15.880 --> 00:28:19.640
and unions and date time objects and all kinds of stuff.


00:28:19.640 --> 00:28:24.960
So check it out if you do a bunch of ad hoc stuff with Python on the command prompt.


00:28:24.960 --> 00:28:26.600
I don't know. How's this strike you?


00:28:26.600 --> 00:28:30.640
I know that this might touch some of the things you're doing in your world.


00:28:30.640 --> 00:28:35.440
>> Just yesterday, one of the guys was contacting me because he needed to go and cycle


00:28:35.440 --> 00:28:40.600
through a list of addresses to hit an API.


00:28:40.600 --> 00:28:43.280
This could be something you'd use like that,


00:28:43.280 --> 00:28:47.480
consume this file and hit the API with each example and away we go.


00:28:47.480 --> 00:28:51.280
>> Yeah, absolutely. This looks great for making


00:28:51.280 --> 00:28:54.220
those little scripts you build with Python, like literally scripts.


00:28:54.220 --> 00:28:56.600
I know a lot of people call everything Python scripts,


00:28:56.600 --> 00:28:58.440
but this is really for those types of apps.


00:28:58.440 --> 00:28:59.740
>> A single file script.


00:28:59.740 --> 00:29:01.460
>> Yeah. A single file thing,


00:29:01.460 --> 00:29:04.180
not like a 20,000 line Flask app.


00:29:04.180 --> 00:29:08.020
That thing starts to stretch the terms of what script might mean,


00:29:08.020 --> 00:29:09.960
but this is exactly for those things.


00:29:09.960 --> 00:29:10.320
>> Yeah.


00:29:10.320 --> 00:29:12.120
>> All right. What's your final one, Pat?


00:29:12.120 --> 00:29:15.680
>> This is similar to what you just covered actually.


00:29:15.680 --> 00:29:17.880
You've talked I think a little bit about it before.


00:29:17.880 --> 00:29:20.280
Conch shell combines the best of


00:29:20.280 --> 00:29:23.280
Baz shell and Python in the Linux terminal.


00:29:23.280 --> 00:29:25.640
>> This is way more than what I covered.


00:29:25.640 --> 00:29:27.320
This is like another level here.


00:29:27.320 --> 00:29:29.480
>> It takes it to another level, yeah.


00:29:29.480 --> 00:29:31.960
I ran across it on its boss,


00:29:31.960 --> 00:29:36.320
which is a nice site for open source type things.


00:29:36.320 --> 00:29:41.040
In a nutshell, what it does is provide you with a new shell,


00:29:41.040 --> 00:29:45.040
where as they demonstrate here you can use straight Python.


00:29:45.040 --> 00:29:47.740
You can import JSON, for example,


00:29:47.740 --> 00:29:52.940
and define a variable or a table,


00:29:52.940 --> 00:29:57.140
print that out and format it,


00:29:57.140 --> 00:29:58.900
the length function here.


00:29:58.900 --> 00:30:02.840
But you can also then mix in regular bash functions,


00:30:02.840 --> 00:30:04.380
where we, for example,


00:30:04.380 --> 00:30:06.520
here it curls from a website,


00:30:06.520 --> 00:30:08.280
the result comes back and


00:30:08.280 --> 00:30:11.080
the length function tells you the length of that curl.


00:30:11.080 --> 00:30:12.720
>> How interesting.


00:30:12.720 --> 00:30:13.680
>> One of their famous-


00:30:13.680 --> 00:30:15.000
>> That's a little bit like,


00:30:15.000 --> 00:30:17.880
almost like a Jinja Django template,


00:30:17.880 --> 00:30:19.240
but in your terminal,


00:30:19.240 --> 00:30:21.400
you put a little dollar to say,


00:30:21.400 --> 00:30:24.360
here's a bit of code to run on the shell.


00:30:24.360 --> 00:30:25.040
>> Yeah.


00:30:25.040 --> 00:30:26.240
>> Shell to run here.


00:30:26.240 --> 00:30:27.840
>> The one famous statement they have is,


00:30:27.840 --> 00:30:30.560
I always forget how to do a for loop in Bash,


00:30:30.560 --> 00:30:33.080
but in Python, it's pretty easy.


00:30:33.080 --> 00:30:37.620
They have a rule, it evaluates to Python first.


00:30:37.620 --> 00:30:40.580
If it evaluates to Python, it executes as Python.


00:30:40.580 --> 00:30:43.780
If it doesn't, then it more or less executes as Bash.


00:30:43.780 --> 00:30:48.260
And I do have a link we could put in the show notes too,


00:30:48.260 --> 00:30:52.820
to a video demonstration from their homepage.


00:30:52.820 --> 00:30:59.780
And the guy does a spectacular demonstration with autocompletes


00:30:59.780 --> 00:31:02.980
and they have what they call contributions.


00:31:02.980 --> 00:31:04.820
And that also begins with an X.


00:31:05.780 --> 00:31:09.380
So it's like a plug-in or an add-on, but it's a contribution.


00:31:09.380 --> 00:31:16.980
And it is get aware and it is virtual environment aware.


00:31:16.980 --> 00:31:21.580
It sounds like a killer environment, but it would take some getting used to.


00:31:21.580 --> 00:31:26.780
I have a lot of muscle memory to overcome to take full advantage of it.


00:31:26.780 --> 00:31:27.980
It's cool.


00:31:27.980 --> 00:31:29.280
Brian, have you played with this?


00:31:29.280 --> 00:31:34.980
You know, I tried to play with it a couple of years ago, but now I haven't.


00:31:34.980 --> 00:31:37.500
but I do want to and I think one of the things,


00:31:37.500 --> 00:31:38.820
I didn't give it a fair shake.


00:31:38.820 --> 00:31:41.560
I think it would be good to just say for a week,


00:31:41.560 --> 00:31:44.380
maybe I'm going to try to just use this instead of pulling up


00:31:44.380 --> 00:31:47.600
my normal terminal just to see if I can get used to it.


00:31:47.600 --> 00:31:50.260
>> That's the thing. I think you have to immerse yourself probably.


00:31:50.260 --> 00:31:51.660
It is about five years old.


00:31:51.660 --> 00:31:53.000
I think it's fairly mature.


00:31:53.000 --> 00:31:57.500
>> Yeah. Also, the less I write Bash scripts,


00:31:57.500 --> 00:31:59.560
the more I wish that


00:31:59.560 --> 00:32:02.380
Bash scripts were more like Python scripts.


00:32:02.380 --> 00:32:03.500
>> Now they are.


00:32:03.500 --> 00:32:04.340
- Now there.


00:32:04.340 --> 00:32:05.240
(laughing)


00:32:05.240 --> 00:32:06.660
- Yeah, this is great.


00:32:06.660 --> 00:32:09.520
A good find and something I've also wanted to play with,


00:32:09.520 --> 00:32:10.980
but haven't.


00:32:10.980 --> 00:32:11.820
- Nice.


00:32:11.820 --> 00:32:13.780
- Brian, you got any extras you wanna share with people?


00:32:13.780 --> 00:32:15.540
- I don't this week.


00:32:15.540 --> 00:32:16.380
How about you?


00:32:16.380 --> 00:32:17.940
- I thought I didn't, but then I did.


00:32:17.940 --> 00:32:19.180
I just wanna do a quick follow up.


00:32:19.180 --> 00:32:20.380
- Okay.


00:32:20.380 --> 00:32:23.540
- I was just thinking about a couple episodes ago


00:32:23.540 --> 00:32:27.540
where we talked about the March Madness Package Tournament


00:32:27.540 --> 00:32:29.060
that Chris May had sent in.


00:32:29.060 --> 00:32:29.880
And I was thinking, you know,


00:32:29.880 --> 00:32:31.720
it's probably done now, isn't it?


00:32:31.720 --> 00:32:32.940
Let's see who won.


00:32:32.940 --> 00:32:36.900
Cause I think we were at the point where we were at the elite eight, aren't we?


00:32:36.900 --> 00:32:39.700
Or yeah, I believe we were at the elite eight.


00:32:39.700 --> 00:32:43.740
So we had a showdown between NumPy and pip NumPy crushed it.


00:32:43.740 --> 00:32:47.500
We had a showdown between pandas and requests and has crushed it.


00:32:47.500 --> 00:32:53.220
And it was an all data science finale and NumPy and pandas went to head to head.


00:32:53.220 --> 00:32:56.620
Went head to head and it was pandas 55% taking the winter.


00:32:56.620 --> 00:32:59.340
So I just want to do a quick followup on that very important news.


00:32:59.340 --> 00:33:00.380
We have a champion.


00:33:00.700 --> 00:33:02.900
It's good, but try using pandas without NumPy.


00:33:02.900 --> 00:33:03.580
That'd be tough.


00:33:03.580 --> 00:33:04.340
There you go.


00:33:04.340 --> 00:33:06.700
Yeah, indeed.


00:33:06.700 --> 00:33:07.780
I was,


00:33:07.780 --> 00:33:10.420
Pat, do you have anything else you want to give a shout out to?


00:33:10.420 --> 00:33:12.020
I do have one extra.


00:33:12.020 --> 00:33:13.220
Um, okay.


00:33:13.220 --> 00:33:13.940
Quick click.


00:33:13.940 --> 00:33:18.660
Uh, it's easy to bash Microsoft, but they've been involved in, they bought GitHub.


00:33:18.660 --> 00:33:23.680
They, have lots of our Python core developers working for them and they


00:33:23.680 --> 00:33:27.980
have this rewards program and they want you to use Bing search, obviously.


00:33:28.280 --> 00:33:33.280
But what you can do is choose a charity to give points to.


00:33:33.280 --> 00:33:38.580
You can also get like a $5 gift certificate to AWS or Amazon


00:33:38.580 --> 00:33:41.160
or something for yourself if you'd rather.


00:33:41.160 --> 00:33:44.440
And every day you just kind of click on these little links


00:33:44.440 --> 00:33:47.400
and I just got five points or 10 points.


00:33:47.400 --> 00:33:49.120
And oh, now we got to do a quiz.


00:33:49.120 --> 00:33:51.320
I'll come back to that later.


00:33:51.320 --> 00:33:54.800
And as you do this, you accumulate more points each day


00:33:54.800 --> 00:33:56.740
and those points then can go to your charity.


00:33:56.740 --> 00:33:59.140
And I did the Red Cross for a while.


00:33:59.140 --> 00:34:03.600
And I did the, the CDC during our, our lockdown year there.


00:34:03.600 --> 00:34:07.340
And you can also donate to the Python software foundation.


00:34:07.340 --> 00:34:08.680
So that's, that's cool.


00:34:08.680 --> 00:34:09.920
That's a way we can all contribute.


00:34:09.920 --> 00:34:14.280
So if you're Googling stuff with Bing, go ahead and set up their awards.


00:34:14.280 --> 00:34:20.860
You're Googling stuff with Bing, set up your rewards to go to the PSF.


00:34:20.860 --> 00:34:21.500
You might as well.


00:34:21.500 --> 00:34:21.680
Right.


00:34:21.680 --> 00:34:22.240
That's right.


00:34:22.240 --> 00:34:23.040
That's fantastic.


00:34:23.040 --> 00:34:24.580
Awesome.


00:34:24.580 --> 00:34:25.140
All right.


00:34:25.140 --> 00:34:25.480
Hold on.


00:34:25.480 --> 00:34:25.840
Well, thanks.


00:34:25.840 --> 00:34:26.520
That's a good one.


00:34:26.520 --> 00:34:31.320
I got a joke for you all here, and I know Brian, you do as well,


00:34:31.320 --> 00:34:32.960
but I feel like this one,


00:34:32.960 --> 00:34:36.280
I better take this one because I don't feel you're in a position


00:34:36.280 --> 00:34:39.760
to make an unbiased decision here because it's so close to your heart.


00:34:39.760 --> 00:34:40.080
>> Okay.


00:34:40.080 --> 00:34:44.280
>> All right. Okay. So this one is over on the Reddit Programming Humor one,


00:34:44.280 --> 00:34:46.060
and it poses the question,


00:34:46.060 --> 00:34:49.400
what seems like a straightforward question for a piece of software?


00:34:49.400 --> 00:34:52.200
How do you exit them?


00:34:52.840 --> 00:34:54.840
And it types, there's some, you know,


00:34:54.840 --> 00:34:56.540
a couple of interesting options here.


00:34:56.540 --> 00:34:58.340
You get colon exit.


00:34:58.340 --> 00:35:01.140
7% of the people think you type colon exit.


00:35:01.140 --> 00:35:01.840
They're wrong.


00:35:01.840 --> 00:35:04.340
You type colon wq,


00:35:04.340 --> 00:35:06.040
which I guess if you want to make changes,


00:35:06.040 --> 00:35:07.540
cool, save your changes and exit.


00:35:07.540 --> 00:35:09.540
You can do, most people got that one.


00:35:09.540 --> 00:35:12.440
And then you can do colon quit, 7% again.


00:35:12.440 --> 00:35:14.040
You can click the close button.


00:35:14.040 --> 00:35:16.340
Hard for a non UI app, but...


00:35:16.340 --> 00:35:17.340
[laughs]


00:35:17.340 --> 00:35:20.140
Or, almost 20% of the people said,


00:35:20.140 --> 00:35:21.840
you know what, the way you restart VIM,


00:35:21.840 --> 00:35:23.520
this horrible thing, I can't get out of it.


00:35:23.520 --> 00:35:24.720
I'm gonna restart the computer.


00:35:24.720 --> 00:35:27.120
(laughing)


00:35:27.120 --> 00:35:29.480
I'm trapped in here, I just, I gotta get out.


00:35:29.480 --> 00:35:32.920
I tried Command Z or Control Z and it just background it


00:35:32.920 --> 00:35:35.000
and now what's it doing, it keeps coming back and--


00:35:35.000 --> 00:35:38.920
- I think people clicked restart the computer to be funny.


00:35:38.920 --> 00:35:39.760
- I know they did.


00:35:39.760 --> 00:35:42.560
I thought, and I pulled it up as a joke to be funny as well.


00:35:42.560 --> 00:35:44.040
But there you go.


00:35:44.040 --> 00:35:48.680
- So have you, I don't know, the close button works for me.


00:35:48.680 --> 00:35:51.720
- Well, it closes the terminal, right?


00:35:51.720 --> 00:35:52.880
- Yeah, yeah.


00:35:52.880 --> 00:35:55.960
So, I mean, who doesn't?


00:35:55.960 --> 00:35:57.360
- You gotta say, do you wanna terminate


00:35:57.360 --> 00:35:58.800
the running program, right?


00:35:58.800 --> 00:36:01.560
It gives you like a warning that you're doing it wrong.


00:36:01.560 --> 00:36:02.680
(laughing)


00:36:02.680 --> 00:36:04.680
- I'm with you, Brian, I'm a boomer.


00:36:04.680 --> 00:36:06.600
(laughing)


00:36:06.600 --> 00:36:07.600
- It's not hard.


00:36:07.600 --> 00:36:10.360
And actually, I don't use straight Vim


00:36:10.360 --> 00:36:11.720
except for on the command line.


00:36:11.720 --> 00:36:13.420
You're right, I guess I do that on the command line,


00:36:13.420 --> 00:36:15.760
but I do, I essentially use Vim


00:36:15.760 --> 00:36:17.720
within PyCharm or VS Code as well.


00:36:17.720 --> 00:36:19.560
But yeah, Vim emulation.


00:36:19.560 --> 00:36:20.600
- Yeah, it's fun.


00:36:20.600 --> 00:36:23.280
- So I wanted to share a joke also


00:36:23.280 --> 00:36:25.280
because I just thought this was so funny.


00:36:25.280 --> 00:36:27.400
I could stop laughing this morning.


00:36:27.400 --> 00:36:31.660
So ran across this tweet by mediocre superheroes.


00:36:31.660 --> 00:36:34.360
It's a little cartoon thing.


00:36:34.360 --> 00:36:37.360
So the guy, you know, finds a genie.


00:36:37.360 --> 00:36:40.080
Genie says three wishes.


00:36:40.080 --> 00:36:41.920
Hey, can I wish for more wishes?


00:36:41.920 --> 00:36:43.260
Not with me, no.


00:36:43.260 --> 00:36:44.200
Well, fine.


00:36:44.200 --> 00:36:45.680
I wish you couldn't count.


00:36:45.680 --> 00:36:48.320
(laughing)


00:36:48.320 --> 00:36:51.340
- Jeannie, done, how many wishes do you have left?


00:36:51.340 --> 00:36:54.060
A billion, hmm, that sounds right.


00:36:54.060 --> 00:36:56.220
- I love it.


00:36:56.220 --> 00:36:58.820
- Anyway, that was funny.


00:36:58.820 --> 00:37:00.960
- It's an inventive way around an old joke.


00:37:00.960 --> 00:37:04.440
- So. - That's great.


00:37:04.440 --> 00:37:05.280
- Anyway.


00:37:05.280 --> 00:37:07.700
- Oh quick, a bit of audience feedback as well.


00:37:07.700 --> 00:37:10.380
Henry Schreiner says, "Restart the computer?


00:37:10.380 --> 00:37:13.040
"Isn't that how you get out of emacs?"


00:37:13.040 --> 00:37:14.460
Also true.


00:37:14.460 --> 00:37:15.300
- Yeah.


00:37:16.340 --> 00:37:19.820
>> Yeah. What key chord do I hit to get out of that one?


00:37:19.820 --> 00:37:20.840
Fantastic.


00:37:20.840 --> 00:37:22.520
>> It's probably control something.


00:37:22.520 --> 00:37:26.060
>> Yeah. I bet it involves a control K something somehow.


00:37:26.060 --> 00:37:28.740
Anyway, thanks for everything, Brian.


00:37:28.740 --> 00:37:30.220
Thanks for being here. Thanks for the jokes.


00:37:30.220 --> 00:37:31.600
Pat, it was great you could join us.


00:37:31.600 --> 00:37:32.500
>> Yeah. Thanks, Brett.


00:37:32.500 --> 00:37:33.700
>> Thanks for having me on, guys.


00:37:33.700 --> 00:37:34.300
>> Bye, everybody.


00:37:34.300 --> 00:37:36.420
>> You bet. Bye, everyone.

