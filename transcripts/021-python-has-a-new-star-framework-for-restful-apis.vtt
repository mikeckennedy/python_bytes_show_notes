
00:00:00.000 --> 00:00:06.500
Hello and welcome to Python Bytes, Python news and headlines delivered directly to your earbuds.


00:00:06.500 --> 00:00:11.700
It's Wednesday, April 12, 2017 and this is episode 21.


00:00:11.700 --> 00:00:13.200
Here, I'm Michael Kennedy.


00:00:13.200 --> 00:00:14.200
And I'm Brian Okken.


00:00:14.200 --> 00:00:18.500
And we're going to tell you about all the cool things we found this week in the Python ecospace.


00:00:18.500 --> 00:00:20.800
But before we get to that, Brian, let's say thanks.


00:00:20.800 --> 00:00:21.800
Well, thank you, Michael.


00:00:21.800 --> 00:00:23.800
Yes, you're welcome. Thanks to Rollbar, actually.


00:00:23.800 --> 00:00:25.800
Oh, yeah, yeah, definitely. Thank you, Rollbar.


00:00:25.800 --> 00:00:27.800
Yeah, thanks. Thank you, Rollbar.


00:00:27.800 --> 00:00:30.040
They're sponsoring this episode again.


00:00:30.040 --> 00:00:32.280
And if you want to check out rollbar, get some special deals.


00:00:32.280 --> 00:00:33.280
It's rollbar.com/pythonbytes.


00:00:33.280 --> 00:00:35.680
We'll talk more about them later.


00:00:35.680 --> 00:00:38.680
Brian, let's talk about some profiling.


00:00:38.680 --> 00:00:43.640
Doug Hellman has he's the guy that did the Python module of the week.


00:00:43.640 --> 00:00:47.580
I don't even know when that started for Python two.


00:00:47.580 --> 00:00:50.240
But he has and I can't remember when he started the third one.


00:00:50.240 --> 00:00:52.520
But I don't know if we've mentioned it on the show yet.


00:00:52.520 --> 00:00:54.540
But it is.


00:00:54.540 --> 00:00:55.680
It's a really good resource.


00:00:55.680 --> 00:01:00.800
It's pymotw.com, Python module of the week.


00:01:00.800 --> 00:01:06.240
And he goes through a lot of the standard library and just does a little page on how


00:01:06.240 --> 00:01:09.200
to use different bits of the standard library.


00:01:09.200 --> 00:01:17.320
And this recently put up a profile in Pstats, and it talks about profile and cprofile for


00:01:17.320 --> 00:01:21.920
basically just for if you have a piece of your code that you think might be slow and


00:01:21.920 --> 00:01:24.120
how to profile that and figure it out.


00:01:24.120 --> 00:01:25.520
So I wanted to highlight that.


00:01:25.520 --> 00:01:28.800
Yeah, I definitely I think this is awesome. You know, Doug way to go very,


00:01:28.800 --> 00:01:32.760
very cool. And keep going with Adam, we're going to be checking out of course


00:01:32.760 --> 00:01:36.440
throughout as you roll out new ones. I definitely want to encourage people to


00:01:36.440 --> 00:01:41.240
think about profiling. I've been doing a lot of work recently on certain parts of


00:01:41.240 --> 00:01:46.900
my web app where performance is somewhat important. And things have changed,


00:01:46.900 --> 00:01:51.920
right. So for example, I switched out the database back end. And depending on how


00:01:51.920 --> 00:01:54.480
that was working, like it used to be really fast became slow in some


00:01:54.480 --> 00:01:57.680
situations, maybe I needed to restructure the way my my data


00:01:57.680 --> 00:02:01.360
was stored, maybe I needed new indexes, or whatever. And even


00:02:01.360 --> 00:02:04.240
just profiling the web application itself actually can


00:02:04.240 --> 00:02:08.640
tell you a lot about not just where your Python is slow, but


00:02:08.640 --> 00:02:11.160
where the web services you're connecting to are slow, or the


00:02:11.160 --> 00:02:14.120
databases you're talking to are slow. Or you can see something


00:02:14.120 --> 00:02:18.240
like you made 600 requests to the database during this page


00:02:18.240 --> 00:02:21.200
load, like you can really bet there's probably some sort of


00:02:21.200 --> 00:02:23.080
lazy loading problem going on, right?


00:02:23.080 --> 00:02:27.840
And so sometimes just a cursory glance at profiling stats


00:02:27.840 --> 00:02:29.060
will like tell you like,


00:02:29.060 --> 00:02:31.000
oh, I didn't realize I was doing that wrong.


00:02:31.000 --> 00:02:32.040
And you quickly fix it.


00:02:32.040 --> 00:02:33.280
So I definitely check that out.


00:02:33.280 --> 00:02:38.160
- So the built in profile stuff and C profile


00:02:38.160 --> 00:02:41.240
works great for a lot of the stuff I work on,


00:02:41.240 --> 00:02:43.360
but I'm not often working on web stuff.


00:02:43.360 --> 00:02:45.240
Is those, are those the right tools


00:02:45.240 --> 00:02:47.780
for something like web applications


00:02:47.780 --> 00:02:49.520
or are there other things that you search for?


00:02:49.520 --> 00:02:51.180
- One of the things that can be challenging about


00:02:51.180 --> 00:02:56.400
profiling web apps is there's a lot of startup code that runs and that can be


00:02:56.400 --> 00:03:00.040
like computational so you can like if you try to profile your app as it starts


00:03:00.040 --> 00:03:08.160
up it could be swamped with actual just getting the thing going traffic and then


00:03:08.160 --> 00:03:11.320
you hit a request for a page and it's small enough it doesn't show up so maybe


00:03:11.320 --> 00:03:15.280
you gotta hit it a hundred times or something to get it to happen so what I


00:03:15.280 --> 00:03:18.920
do I don't know about the other frameworks pretty sure they must have


00:03:18.920 --> 00:03:24.600
something like this, but in Pyramid, by default, there's a little red box on the


00:03:24.600 --> 00:03:28.520
right side in development mode, and you can click on it, it'll take you to, it's


00:03:28.520 --> 00:03:31.520
like called a Pyramid debug toolbar, it takes you, you go to the back there, and


00:03:31.520 --> 00:03:35.360
one of the options is to turn on profiling per page request. So you just


00:03:35.360 --> 00:03:38.880
check a box, and then request a page, and you can, it'll tell you how many


00:03:38.880 --> 00:03:42.120
milliseconds it took, and if you click on it, it'll give you the output from this


00:03:42.120 --> 00:03:46.560
just for that page. Automatically. So you don't have to do anything, yeah, it's super cool.


00:03:46.560 --> 00:03:47.560
>> All right. Well, thanks.


00:03:47.560 --> 00:03:49.880
>> Yeah, sure. Speaking of the web,


00:03:49.880 --> 00:03:52.480
so we have a new project coming


00:03:52.480 --> 00:03:54.880
out that I wanted to bring everyone's attention to.


00:03:54.880 --> 00:03:56.160
I don't know how old it is.


00:03:56.160 --> 00:03:58.640
It's like weeks, maybe months.


00:03:58.640 --> 00:04:01.000
I'm not sure. It's not very old, by Tom Christie.


00:04:01.000 --> 00:04:05.160
So you may know Tom Christie from the Django REST framework.


00:04:05.160 --> 00:04:08.160
He came up with something called API star,


00:04:08.160 --> 00:04:11.960
and this is an alternate REST framework.


00:04:11.960 --> 00:04:12.400
>> Okay.


00:04:12.400 --> 00:04:14.920
>> So Django REST framework has been around for like five years,


00:04:14.920 --> 00:04:22.640
It's very popular, it's well-known, it's highly used, but it's also very much wedded with


00:04:22.640 --> 00:04:27.480
the Python 2 prior web world.


00:04:27.480 --> 00:04:33.640
It's from five years ago, and it's based on stuff that was put in a motion before then.


00:04:33.640 --> 00:04:36.440
If you want to explore some new and interesting ideas, you can't really do it.


00:04:36.440 --> 00:04:38.480
That's what Tom was saying.


00:04:38.480 --> 00:04:44.160
He actually came up with this thing called API star and it is, it has got some slick


00:04:44.160 --> 00:04:46.800
features that are really worth looking at.


00:04:46.800 --> 00:04:49.440
It's really new, so I don't know if it's quite ready for primetime.


00:04:49.440 --> 00:04:50.440
I just honestly don't know.


00:04:50.440 --> 00:04:51.880
I'm not saying it's not.


00:04:51.880 --> 00:04:56.040
But the idea is he calls it a smart web API framework designed specifically for Python


00:04:56.040 --> 00:04:57.860
three.


00:04:57.860 --> 00:04:59.200
And it's super easy to get started.


00:04:59.200 --> 00:05:01.640
Just start, just pip install API star.


00:05:01.640 --> 00:05:05.120
You can say API star dash new and template dash minimal or dash dash template minimal,


00:05:05.120 --> 00:05:06.120
right?


00:05:06.120 --> 00:05:07.120
That'll get one.


00:05:07.120 --> 00:05:08.120
You can either run it or you can run the test straight away.


00:05:08.120 --> 00:05:11.080
I thought you would like that little API star space test.


00:05:11.080 --> 00:05:11.920
That's pretty cool.


00:05:11.920 --> 00:05:13.920
- Yeah, and nice interface too.


00:05:13.920 --> 00:05:15.440
It looks really clean.


00:05:15.440 --> 00:05:18.000
- Yeah, so here's where the magic comes in.


00:05:18.000 --> 00:05:20.560
It's all about the type annotations.


00:05:20.560 --> 00:05:22.980
So in Python 3, you can say,


00:05:22.980 --> 00:05:24.300
like I could define a function


00:05:24.300 --> 00:05:25.680
called like show query parameters,


00:05:25.680 --> 00:05:27.480
and I could have a thing called query parameters.


00:05:27.480 --> 00:05:31.960
I wanted it to be of type HTTP.queryparams.


00:05:31.960 --> 00:05:34.880
I would say colon HTTP type query params.


00:05:34.880 --> 00:05:41.280
that tells Python, not at runtime, but at design time or development time, "Hey, this


00:05:41.280 --> 00:05:43.720
thing's supposed to be a query params instance, right?"


00:05:43.720 --> 00:05:44.720
Yeah.


00:05:44.720 --> 00:05:45.720
Okay, that's cool.


00:05:45.720 --> 00:05:46.720
Okay, so now here, check this out.


00:05:46.720 --> 00:05:52.160
If you put a parameter on that API method and you say it is one of those, and it's available


00:05:52.160 --> 00:05:56.800
as part of the request, it will automatically come into your system, regardless of what


00:05:56.800 --> 00:05:58.200
you call it and where you put it.


00:05:58.200 --> 00:05:59.200
Oh, nice.


00:05:59.200 --> 00:06:01.160
It looks at the type, hence the type parameters.


00:06:01.160 --> 00:06:03.920
So the thing you're saying, this thing called query params,


00:06:03.920 --> 00:06:05.000
you want the query params?


00:06:05.000 --> 00:06:06.800
I have one of those in the request.


00:06:06.800 --> 00:06:10.800
And similarly, if you return something from there,


00:06:10.800 --> 00:06:12.080
by default you return dictionaries


00:06:12.080 --> 00:06:14.280
like all these web frameworks in Python do.


00:06:14.280 --> 00:06:16.120
But you can also use type annotations to say,


00:06:16.120 --> 00:06:18.240
no, this returns a response,


00:06:18.240 --> 00:06:19.280
and then return something else.


00:06:19.280 --> 00:06:21.480
Like actually using the type annotation


00:06:21.480 --> 00:06:26.480
to control how the processing of the request is done.


00:06:26.480 --> 00:06:30.000
Similarly, you can put things in like your URL.


00:06:30.000 --> 00:06:35.000
So write like /users/7.


00:06:35.000 --> 00:06:37.240
Normally that would all just come in as a string,


00:06:37.240 --> 00:06:40.480
but in this API, you can say,


00:06:40.480 --> 00:06:42.520
as a function on your rest method,


00:06:42.520 --> 00:06:44.680
you can say like user ID colon int,


00:06:44.680 --> 00:06:47.300
and it will take that thing and convert it to an int


00:06:47.300 --> 00:06:48.680
out of the URL and pass it in.


00:06:48.680 --> 00:06:50.920
So there's all this really cool stuff around type hinting


00:06:50.920 --> 00:06:53.080
that I just, type annotations I really love.


00:06:53.080 --> 00:06:56.120
And not only that, it's faster than Sanic.


00:06:56.120 --> 00:06:56.960
- Okay.


00:06:56.960 --> 00:06:58.360
- So, very, very cool.


00:06:58.360 --> 00:06:59.200
Good job, Tom.


00:06:59.200 --> 00:07:02.160
And now that I know you said that already,


00:07:02.160 --> 00:07:05.680
and I kind of went past me without me recognizing it,


00:07:05.680 --> 00:07:07.520
but the built-in testing with pytest.


00:07:07.520 --> 00:07:08.280
Yay.


00:07:08.280 --> 00:07:08.640
Yay.


00:07:08.640 --> 00:07:09.440
It's awesome, right?


00:07:09.440 --> 00:07:09.840
Yeah.


00:07:09.840 --> 00:07:10.480
Definitely.


00:07:10.480 --> 00:07:10.880
Cool.


00:07:10.880 --> 00:07:11.380
Yeah.


00:07:11.380 --> 00:07:12.680
So it's a really new framework.


00:07:12.680 --> 00:07:13.240
Check it out.


00:07:13.240 --> 00:07:15.360
It's already got quite a few stars on GitHub.


00:07:15.360 --> 00:07:16.480
But yeah, API star.


00:07:16.480 --> 00:07:17.600
There's a link in the notes.


00:07:17.600 --> 00:07:19.320
And there's a little example code as well.


00:07:19.320 --> 00:07:19.820
All right.


00:07:19.820 --> 00:07:21.880
But that's about fast web frameworks.


00:07:21.880 --> 00:07:24.120
But sometimes we don't care if things are fast, right?


00:07:24.120 --> 00:07:24.440
Yeah.


00:07:24.440 --> 00:07:26.320
So actually, we're kicking around the idea


00:07:26.320 --> 00:07:28.680
of talking about this last week and decided not to.


00:07:28.680 --> 00:07:30.440
but we're putting it in now.


00:07:30.440 --> 00:07:33.360
It's an article called, "Yes, Python is Slow


00:07:33.360 --> 00:07:35.040
and I Don't Care."


00:07:35.040 --> 00:07:37.640
And actually, I've never really noticed


00:07:37.640 --> 00:07:39.760
that being slow for what I have it for,


00:07:39.760 --> 00:07:43.080
but basically that's kind of the point of the article,


00:07:43.080 --> 00:07:47.320
is that fast is great.


00:07:47.320 --> 00:07:50.440
Having Sanic and API star be super fast, of course,


00:07:50.440 --> 00:07:51.560
that's wonderful.


00:07:51.560 --> 00:07:54.720
But there's a lot of Python uses for Python


00:07:54.720 --> 00:07:58.660
and for other programming that the most expensive resources


00:07:58.660 --> 00:08:04.980
not your CPU. Actually, it's very seldom your CPU anymore. So therefore, you usually don't


00:08:04.980 --> 00:08:11.300
really have to care about the speed of Python. And I'd have to agree. And a big chunk of this


00:08:11.300 --> 00:08:16.420
article is you should be optimizing for your most expensive resource. And that's your people.


00:08:16.420 --> 00:08:19.460
Your people are way more expensive than your computer time.


00:08:19.460 --> 00:08:20.420
So are bugs.


00:08:20.420 --> 00:08:26.900
Yes, and definitely. And so are bugs. I know that myself, we have, at work,


00:08:26.900 --> 00:08:32.100
We use Python for testing and it's because we can write smaller test code.


00:08:32.100 --> 00:08:36.100
And the time our tests run is all in I/O time.


00:08:36.100 --> 00:08:38.100
It's communicating with instruments.


00:08:38.100 --> 00:08:40.300
It's not sitting in our computer.


00:08:40.300 --> 00:08:45.500
And so I can have small, elegant tests that I can read well


00:08:45.500 --> 00:08:48.500
is way more important than how fast Python is.


00:08:48.500 --> 00:08:52.100
Yeah, you're talking about testing devices and hardware.


00:08:52.100 --> 00:08:53.300
Same thing applies to the web, right?


00:08:53.300 --> 00:08:56.660
usually waiting on either a database, a web service, or a socket somewhere.


00:08:56.660 --> 00:09:00.420
And the timing usually doesn't matter, right?


00:09:00.420 --> 00:09:04.900
Yeah, well, I mean, of course, you want it to be fast, but that's not the slow part isn't the


00:09:04.900 --> 00:09:11.700
Python. So actually, I guess that ties in with, with the other articles we've had so far,


00:09:11.700 --> 00:09:18.500
developing an API quickly, and elegantly is going to eliminate mistakes better if you can do that


00:09:18.500 --> 00:09:19.700
with less code. Great.


00:09:19.700 --> 00:09:23.220
Yeah, absolutely. Well, and if things are slow, right, there's always options, right? You can


00:09:23.220 --> 00:09:26.640
could write it in C, you could write in Rust, you could write in Cython, like you


00:09:26.640 --> 00:09:30.180
could take that little bit and do something or just change, just like


00:09:30.180 --> 00:09:33.020
you started at the beginning, profile it and change your algorithm. It very well


00:09:33.020 --> 00:09:38.180
may be that that makes a huge difference. Yeah, and it might be that you think it's


00:09:38.180 --> 00:09:42.020
Python but like you said it might be your database or you're accessing some


00:09:42.020 --> 00:09:46.500
resource or something, figure that out. And then if it really is Python,


00:09:46.500 --> 00:09:50.580
which I think there's rare cases where it really is, but if it is there's


00:09:50.580 --> 00:09:57.860
options with the Scython and such or taking a look at Intel's offering or PyPy or something.


00:09:57.860 --> 00:09:58.860
Yeah, exactly.


00:09:58.860 --> 00:10:02.980
I just heard, saw some stuff that PyPy is supposed to be getting quite a bit faster


00:10:02.980 --> 00:10:03.980
still.


00:10:03.980 --> 00:10:06.740
And of course, they got that big grant from Mozilla to make Python 3 work much better.


00:10:06.740 --> 00:10:08.540
So all sorts of goodness there.


00:10:08.540 --> 00:10:09.540
Yeah, definitely.


00:10:09.540 --> 00:10:12.900
Now, before we get to the next item, let me tell you about Rollbar.


00:10:12.900 --> 00:10:17.140
You guys probably heard me talk about it before, but I've been using Rollbar for a long time.


00:10:17.140 --> 00:10:22.780
And the idea is you basically put a few lines of code into your web application.


00:10:22.780 --> 00:10:26.980
And if ever there's an error, it will automatically capture all the information that you need


00:10:26.980 --> 00:10:31.800
about it and ship that over to roll bar and then send you a notification, all sorts of


00:10:31.800 --> 00:10:33.540
different ways you can get notifications.


00:10:33.540 --> 00:10:37.940
And it comes with all almost all the context you need to actually solve the problem.


00:10:37.940 --> 00:10:42.420
So for example, it might have the stack trace and the local variables and the URL and all


00:10:42.420 --> 00:10:46.540
those sorts of things that you might not even have to debug your code, you can just look


00:10:46.540 --> 00:10:50.860
and go, "Oh dear, I need to check for this," or, you know, make sure that's not done or whatever,


00:10:50.860 --> 00:10:57.340
right? So if you want more reliable web apps, just be sure to check out rollbar.com/pythonbytes.


00:10:57.340 --> 00:11:03.820
Wonderful. Thank you, Rollbar. And we have Rollbar to thank for why Python Bytes website is always up.


00:11:03.820 --> 00:11:09.180
Yeah, that's right. Absolutely. It's integrated in all the sites. It's beautiful. So one of the


00:11:09.180 --> 00:11:12.620
things that I want, I kind of want to take us back to the basics for a minute, okay?


00:11:13.500 --> 00:11:18.780
So, one of the things that I think people, many people know about, but a lot of people


00:11:18.780 --> 00:11:20.700
don't is hashing.


00:11:20.700 --> 00:11:23.860
When to use hashing, how to use hashing, and things like that.


00:11:23.860 --> 00:11:30.320
So there's a nice article called A Quick Introduction to Hashing by Gerald Nash, and this is specifically


00:11:30.320 --> 00:11:32.460
for Python developers.


00:11:32.460 --> 00:11:38.860
And has some nice examples of like, if I want to hash a string, you know, using say SHA-256,


00:11:38.860 --> 00:11:40.940
or something like that for the hash, how do I do that?


00:11:40.940 --> 00:11:41.940
What does that look like?


00:11:41.940 --> 00:11:44.700
back up a second and what is a hash?


00:11:44.700 --> 00:11:48.100
>> Sure. So a hash is a little bit like encryption,


00:11:48.100 --> 00:11:51.840
in that you can look at the hash and you basically,


00:11:51.840 --> 00:11:54.440
it's obfuscated, you don't really know what it is.


00:11:54.440 --> 00:11:57.060
But unlike encryption, it can't be reversed,


00:11:57.060 --> 00:11:58.480
it can't be unhashed.


00:11:58.480 --> 00:12:02.120
You might take a 10 megabyte set of data and


00:12:02.120 --> 00:12:06.180
hash that into 256 characters or something like that.


00:12:06.180 --> 00:12:08.260
The idea is, if you have


00:12:08.260 --> 00:12:11.780
the same input and you run the hash over and over again,


00:12:11.780 --> 00:12:13.860
you should get the same output.


00:12:13.860 --> 00:12:14.300
>> Okay.


00:12:14.300 --> 00:12:16.360
>> But even if it varies slightly,


00:12:16.360 --> 00:12:18.220
you'll get a totally different output,


00:12:18.220 --> 00:12:20.060
not a little bit different, but dramatically,


00:12:20.060 --> 00:12:22.740
like unrelated type of thing.


00:12:22.740 --> 00:12:25.240
So it's used for verifying messages,


00:12:25.240 --> 00:12:28.180
verifying download files are not tampered with.


00:12:28.180 --> 00:12:30.260
But most importantly, it's used for passwords.


00:12:30.260 --> 00:12:33.260
Storing raw passwords in a database, not the best.


00:12:33.260 --> 00:12:35.620
So we typically hash them.


00:12:35.620 --> 00:12:37.780
But there's all sorts of other interesting uses


00:12:37.780 --> 00:12:38.860
you can use for hashing.


00:12:38.860 --> 00:12:40.160
So like in my websites,


00:12:40.160 --> 00:12:45.660
I have the static files, JavaScript, CSS, images, etc.


00:12:45.660 --> 00:12:48.020
Basically cached, like super hard.


00:12:48.020 --> 00:12:52.940
So they're cached for a year, at least, I think maybe possibly longer.


00:12:52.940 --> 00:12:57.140
So if you go to the site, and you like, come back later, it's not going to go back and


00:12:57.140 --> 00:12:58.140
look again.


00:12:58.140 --> 00:13:01.500
And so what I do that the technique to make sure that nothing ever shows up stale on the


00:13:01.500 --> 00:13:05.140
site, right, you don't have to wait a year for it to like come back together, is I put


00:13:05.140 --> 00:13:10.580
a little hash of the raw files at the end of the URL of every bit of static content


00:13:10.580 --> 00:13:11.740
that I have.


00:13:11.740 --> 00:13:16.680
And so it caches it, but it caches it with the fingerprint of it embedded.


00:13:16.680 --> 00:13:21.580
So if the file ever changes, it instantly generates a new file and it pulls it out.


00:13:21.580 --> 00:13:23.740
So hashing is used for all sorts of good stuff.


00:13:23.740 --> 00:13:24.740
Okay.


00:13:24.740 --> 00:13:25.740
Yeah.


00:13:25.740 --> 00:13:26.740
So anyway, it's a great little article to show you guys how to do that.


00:13:26.740 --> 00:13:30.620
So if you're not taking advantage of hashes, they're super easy.


00:13:30.620 --> 00:13:32.100
Here's a nice way to see how to do it.


00:13:32.100 --> 00:13:33.100
Wonderful.


00:13:33.100 --> 00:13:36.460
A very fun article, I forgot to write this person's name,


00:13:36.460 --> 00:13:38.940
but there's an article called Wedding at Scale,


00:13:38.940 --> 00:13:41.580
How I Used Twilio, Python, and Google


00:13:41.580 --> 00:13:43.660
to Automate My Wedding.


00:13:43.660 --> 00:13:45.940
- I feel like I missed this opportunity when I got married.


00:13:45.940 --> 00:13:47.520
- Yeah, and this is just fun.


00:13:47.520 --> 00:13:51.020
And actually, a modern person's problem


00:13:51.020 --> 00:13:53.500
with how to invite people.


00:13:53.500 --> 00:13:58.340
And I love this article, just the nerd in me likes it.


00:13:58.340 --> 00:14:01.040
There's no way I would have had time to figure this out


00:14:01.040 --> 00:14:02.540
when I was trying to plan my wedding.


00:14:02.540 --> 00:14:04.860
but if you got the time, that's great.


00:14:04.860 --> 00:14:07.840
So through all of the potential guests


00:14:07.840 --> 00:14:12.140
and their phone numbers into a Google spreadsheet


00:14:12.140 --> 00:14:16.420
and then used Python and a Python package called gspread


00:14:16.420 --> 00:14:20.280
to access Google spreadsheets and pull that out


00:14:20.280 --> 00:14:24.100
and with Python use Twilio and SMS people


00:14:24.100 --> 00:14:25.980
and invitation to the wedding.


00:14:25.980 --> 00:14:29.060
And then not only that, left URLs for people


00:14:29.060 --> 00:14:31.380
to get back to him.


00:14:31.380 --> 00:14:35.040
I guess there's URLs and there's also like replies


00:14:35.040 --> 00:14:39.440
to have a set up a Flask app to collect everything


00:14:39.440 --> 00:14:41.380
of all the replies to that.


00:14:41.380 --> 00:14:45.220
And then even goes on to sending out reminder texts


00:14:45.220 --> 00:14:49.040
and having people select which food option they wanted.


00:14:49.040 --> 00:14:51.580
And it's pretty incredible, this story.


00:14:51.580 --> 00:14:53.980
- Yeah, a real mashup of a bunch of cool technologies.


00:14:53.980 --> 00:14:54.860
That's awesome.


00:14:54.860 --> 00:14:56.100
- Yeah, it's cool.


00:14:56.100 --> 00:14:58.260
- Nice, I have another fun one for us


00:14:58.260 --> 00:14:59.860
for our last item here today.


00:14:59.860 --> 00:15:04.180
And I've got to be careful about how I speak about this device


00:15:04.180 --> 00:15:06.620
because my understanding is speaking of it


00:15:06.620 --> 00:15:08.380
causes it to do things.


00:15:08.380 --> 00:15:12.140
So let's call it the Amazon Virtual Assistant thing


00:15:12.140 --> 00:15:13.580
that sits on your desk, all right?


00:15:13.580 --> 00:15:14.420
- Okay.


00:15:14.420 --> 00:15:17.920
- Okay, so there's a guy who created a framework


00:15:17.920 --> 00:15:21.860
for creating what are called skills on this assistant.


00:15:21.860 --> 00:15:23.980
Right, so you can teach it to do new things.


00:15:23.980 --> 00:15:27.300
And the guy who wrote this article is Neil Stewart.


00:15:27.300 --> 00:15:29.520
And what I thought was really interesting was


00:15:29.520 --> 00:15:31.940
He was visiting a friend or something like that,


00:15:31.940 --> 00:15:34.980
and they had one of these assistants.


00:15:34.980 --> 00:15:36.840
And he thought it was really cool.


00:15:36.840 --> 00:15:37.760
He's like, "I'm ordering one."


00:15:37.760 --> 00:15:40.220
But he decided, "I'm gonna challenge myself


00:15:40.220 --> 00:15:43.740
"to build a new skill for it before it even arrives."


00:15:43.740 --> 00:15:45.400
So as developing for hardware,


00:15:45.400 --> 00:15:46.760
that's a pretty interesting idea,


00:15:46.760 --> 00:15:49.860
to develop for it before it exists in your hands, right?


00:15:49.860 --> 00:15:50.940
- Yeah, we do it all the time.


00:15:50.940 --> 00:15:51.780
- Yeah, right.


00:15:51.780 --> 00:15:52.920
So the thing that he came up with


00:15:52.920 --> 00:15:54.060
is something called VoiceOps.


00:15:54.060 --> 00:15:56.700
So he has a bunch of AWS accounts and whatnot,


00:15:56.700 --> 00:16:01.580
and he can ask it things like how's the status of his AWS servers and whatnot.


00:16:01.580 --> 00:16:04.540
It'll tell him how many running and stopped instances there are,


00:16:04.540 --> 00:16:08.820
what RDS databases are on his account, and things like that.


00:16:08.820 --> 00:16:12.060
So that's a pretty fun skill to add to this assistant.


00:16:12.060 --> 00:16:14.580
Yeah, I didn't know you could do that, add skills to it.


00:16:14.580 --> 00:16:14.980
That's pretty cool.


00:16:14.980 --> 00:16:17.860
Yeah, and apparently you can do it in Python, which is even cooler.


00:16:17.860 --> 00:16:20.300
So he looked around and saw that there's a few things,


00:16:20.300 --> 00:16:21.380
but he wasn't really happy with it,


00:16:21.380 --> 00:16:25.220
so he decided to create a new framework called Python,


00:16:25.220 --> 00:16:26.500
the name of the thing.


00:16:26.500 --> 00:16:28.180
And it's open source on GitHub.


00:16:28.180 --> 00:16:30.300
The article here that we have linked,


00:16:30.300 --> 00:16:32.620
this one actually has a bunch of cool examples


00:16:32.620 --> 00:16:34.540
on how to affectionate.


00:16:34.540 --> 00:16:36.660
He has a hello world type of thing.


00:16:36.660 --> 00:16:40.060
And he also linked to something called Echo Shim.


00:16:40.060 --> 00:16:43.980
And Echo Shim allows you to create one of these skills,


00:16:43.980 --> 00:16:48.980
put it into AWS and run it on their Lambda system on Python,


00:16:48.980 --> 00:16:51.020
and then test it in the browser


00:16:51.020 --> 00:16:52.820
without even having hardware.


00:16:52.820 --> 00:16:53.660
- Oh, cool.


00:16:53.660 --> 00:16:55.220
- Yeah, so pretty fun project.


00:16:55.220 --> 00:16:58.340
So if people are into that system thing,


00:16:58.340 --> 00:16:59.620
and Python, check it out.


00:16:59.620 --> 00:17:01.020
- I will check it out, that's neat.


00:17:01.020 --> 00:17:03.220
- Yeah, I haven't gotten, do you have one of those things?


00:17:03.220 --> 00:17:04.620
Any of those, like a Google Home,


00:17:04.620 --> 00:17:06.020
or one of those types of things?


00:17:06.020 --> 00:17:09.300
- No, actually that whole concept of letting


00:17:09.300 --> 00:17:11.620
some other company just listen to my house,


00:17:11.620 --> 00:17:14.680
I don't like the idea, so, anyway.


00:17:14.680 --> 00:17:17.100
- Yeah, I'm not there yet either.


00:17:17.100 --> 00:17:19.940
I'm not super crazy about privacy and whatnot,


00:17:19.940 --> 00:17:22.500
like, my locations on my smartphone and stuff,


00:17:22.500 --> 00:17:25.500
but that somehow like crosses a little bit of a line to me.


00:17:25.500 --> 00:17:26.500
I don't know.


00:17:26.500 --> 00:17:27.780
I'm sure I'll be over it someday.


00:17:27.780 --> 00:17:30.540
- Plus I don't really, yeah, I don't trust my kids


00:17:30.540 --> 00:17:32.700
to not just order a bunch of stuff all the time


00:17:32.700 --> 00:17:33.940
just by talking to it.


00:17:33.940 --> 00:17:36.660
- Yeah, like after what happened the first time


00:17:36.660 --> 00:17:39.020
I got an iPhone that had Siri on it,


00:17:39.020 --> 00:17:41.940
I know what the kids did to that thing.


00:17:41.940 --> 00:17:43.500
This is even more accessible to them.


00:17:43.500 --> 00:17:45.940
So I'm not sure I want that anywhere near my kids.


00:17:45.940 --> 00:17:47.760
Awesome.


00:17:47.760 --> 00:17:49.060
So that's it for the week.


00:17:49.060 --> 00:17:51.180
Brian, what do you got going on with you personally?


00:17:51.180 --> 00:17:55.140
I had an interview with Casey Rosenthal from Netflix


00:17:55.140 --> 00:17:58.020
on chaos engineering that I finally


00:17:58.020 --> 00:18:01.820
got edited and out last week on Test & Code.


00:18:01.820 --> 00:18:03.340
So that's out there.


00:18:03.340 --> 00:18:05.980
Oh, like Chaos Monkey, Chaos Gorilla, all that kind of stuff


00:18:05.980 --> 00:18:06.740
they do at Netflix?


00:18:06.740 --> 00:18:07.240
Yeah.


00:18:07.240 --> 00:18:10.820
And basically, we tried to talk about not just what they're


00:18:10.820 --> 00:18:15.420
doing there, but the concept of taking steady state


00:18:15.420 --> 00:18:17.620
measurements and doing experiments


00:18:17.620 --> 00:18:20.300
that might change the steady state on a system,


00:18:20.300 --> 00:18:22.500
as opposed to traditional testing methods.


00:18:22.500 --> 00:18:23.820
It's pretty interesting.


00:18:23.820 --> 00:18:24.940
- Yeah, nice.


00:18:24.940 --> 00:18:25.780
Oh, very cool.


00:18:25.780 --> 00:18:26.600
I'm definitely gonna listen to that.


00:18:26.600 --> 00:18:27.440
That's great.


00:18:27.440 --> 00:18:28.280
- How about you?


00:18:28.280 --> 00:18:31.540
- So I spent the weekend reworking a bunch of my web stuff


00:18:31.540 --> 00:18:33.780
around the training course, training courses,


00:18:33.780 --> 00:18:35.020
training site, and so on.


00:18:35.020 --> 00:18:39.340
So I rebuilt a new player 'cause I wanted to surface


00:18:39.340 --> 00:18:41.380
the closed captioning a little bit better for people,


00:18:41.380 --> 00:18:42.220
things like that.


00:18:42.220 --> 00:18:44.340
So I did a bunch of JavaScript and whatnot.


00:18:44.340 --> 00:18:47.820
And the other thing I did is I added full text search


00:18:47.820 --> 00:18:48.640
to the whole site.


00:18:48.640 --> 00:18:53.560
So you go there and you can search into the videos even,


00:18:53.560 --> 00:18:55.040
into the text of the videos.


00:18:55.040 --> 00:18:56.720
So it's beautiful.


00:18:56.720 --> 00:18:58.040
And this is what I was actually-- yeah,


00:18:58.040 --> 00:19:00.520
this is actually what I was thinking about when we were


00:19:00.520 --> 00:19:01.560
talking about profiling.


00:19:01.560 --> 00:19:03.120
So when I first wrote this, I wrote it


00:19:03.120 --> 00:19:05.560
like what you might think of as naively.


00:19:05.560 --> 00:19:09.560
Wrote it, and it's all backed by a bunch of text data in MongoDB.


00:19:09.560 --> 00:19:11.000
It's not using full text in Mongo.


00:19:11.000 --> 00:19:13.600
It's using something else that I've done.


00:19:13.600 --> 00:19:15.500
But basically, the back end is Mongo,


00:19:15.500 --> 00:19:18.360
and there's a bunch of data in there, like 10 megs, 20 megs.


00:19:18.360 --> 00:19:21.600
not sure exactly how much of text that I wanted to search.


00:19:21.600 --> 00:19:23.600
And I ran this, oh, this will be nice and fast.


00:19:23.600 --> 00:19:26.360
And it was like 600 milliseconds a page,


00:19:26.360 --> 00:19:29.200
which is acceptable maybe for other people.


00:19:29.200 --> 00:19:30.680
But for me, this is not acceptable.


00:19:30.680 --> 00:19:33.280
I'm like, oh, no way, this is not gonna stand.


00:19:33.280 --> 00:19:34.440
What is wrong with this?


00:19:34.440 --> 00:19:36.760
So I spent a lot of time in the profiler,


00:19:36.760 --> 00:19:39.600
and I've gotten it down to 47 milliseconds.


00:19:39.600 --> 00:19:40.840
- Oh, okay, cool.


00:19:40.840 --> 00:19:43.240
- So it's more than 10 times faster, right?


00:19:43.240 --> 00:19:46.400
That's like 10.5 times faster by using the profiler.


00:19:46.400 --> 00:19:47.920
And it was just, this part's slow,


00:19:47.920 --> 00:19:48.880
how can I do this differently?


00:19:48.880 --> 00:19:50.540
This part's slow, how can I do this differently?


00:19:50.540 --> 00:19:52.040
So just, you know, very neat.


00:19:52.040 --> 00:19:55.240
If you wanna see the fruits of that profiling,


00:19:55.240 --> 00:19:56.480
you can click the link at the bottom.


00:19:56.480 --> 00:20:00.080
- Cool, can we get text search on Python Bytes?


00:20:00.080 --> 00:20:02.360
- Yes, we're getting, yes, absolutely.


00:20:02.360 --> 00:20:04.400
We're getting full text search on Python Bytes soon.


00:20:04.400 --> 00:20:05.240
- Okay. - Yes.


00:20:05.240 --> 00:20:06.060
I think we need it though.


00:20:06.060 --> 00:20:07.400
I mean, we have a bunch of transcripts


00:20:07.400 --> 00:20:08.880
that we have interesting stuff in.


00:20:08.880 --> 00:20:11.980
We've got pretty solid show notes for this podcast.


00:20:11.980 --> 00:20:13.440
I think we need a full text search.


00:20:13.440 --> 00:20:15.520
So yeah, we'll be sure to announce it shortly.


00:20:15.520 --> 00:20:16.920
- Okay, great, cool.


00:20:16.920 --> 00:20:18.440
I need one more weekend, I guess.


00:20:18.440 --> 00:20:20.840
- Like adding work to you on air.


00:20:20.840 --> 00:20:22.080
Sorry about that.


00:20:22.080 --> 00:20:22.920
- That's all right, it's good.


00:20:22.920 --> 00:20:23.960
No, no, it's on the roadmap.


00:20:23.960 --> 00:20:25.080
It's on the roadmap.


00:20:25.080 --> 00:20:26.160
All right, well, Brian, thanks so much


00:20:26.160 --> 00:20:28.520
for finding these things and sharing them with everyone.


00:20:28.520 --> 00:20:29.360
- Thank you.


00:20:29.360 --> 00:20:30.560
- You bet, catch you next time.


00:20:30.560 --> 00:20:34.040
Thank you for listening to Python Bytes.


00:20:34.040 --> 00:20:36.520
Follow the show on Twitter via @PythonBytes.


00:20:36.520 --> 00:20:39.720
That's Python Bytes as in B-Y-T-E-S.


00:20:39.720 --> 00:20:43.080
And get the full show notes at PythonBytes.fm.


00:20:43.080 --> 00:20:44.700
If you have a news item you want featured,


00:20:44.700 --> 00:20:47.180
just visit PythonBytes.fm and send it our way.


00:20:47.180 --> 00:20:50.300
We're always on the lookout for sharing something cool.


00:20:50.300 --> 00:20:52.180
On behalf of myself and Brian Auchin,


00:20:52.180 --> 00:20:53.680
this is Michael Kennedy.


00:20:53.680 --> 00:20:55.700
Thank you for listening and sharing this podcast


00:20:55.700 --> 00:20:57.340
with your friends and colleagues.

