
00:00:00.000 --> 00:00:01.760
- Hello and welcome to Python Bytes


00:00:01.760 --> 00:00:03.520
where we deliver Python news and headlines


00:00:03.520 --> 00:00:05.040
directly to your earbuds.


00:00:05.040 --> 00:00:09.840
This is episode 228, recorded April 7th, 2021.


00:00:09.840 --> 00:00:10.960
I'm Michael Kennedy.


00:00:10.960 --> 00:00:12.200
- And I'm Brian Aitken.


00:00:12.200 --> 00:00:13.520
- And I'm Guy Royce.


00:00:13.520 --> 00:00:14.480
- Hey Guy, welcome.


00:00:14.480 --> 00:00:16.360
Special guest Guy Royce here


00:00:16.360 --> 00:00:18.200
to be part of the show this week.


00:00:18.200 --> 00:00:19.120
- Thanks for having me.


00:00:19.120 --> 00:00:19.960
- It's exciting.


00:00:19.960 --> 00:00:21.080
- I know that's what they all say, right?


00:00:21.080 --> 00:00:22.720
(laughing)


00:00:22.720 --> 00:00:24.120
- It's great to have you here though.


00:00:24.120 --> 00:00:27.760
You know, we met on a panel at the Python web conference


00:00:27.760 --> 00:00:31.960
And we recently had Calvin Hendricks Parker here from,


00:00:31.960 --> 00:00:33.280
who was organizing that as well.


00:00:33.280 --> 00:00:35.000
So, you know, a little bit,


00:00:35.000 --> 00:00:36.960
a little more Python web conference going on.


00:00:36.960 --> 00:00:38.360
- Yeah, it was a good event.


00:00:38.360 --> 00:00:39.180
- Absolutely.


00:00:39.180 --> 00:00:40.360
You want to tell folks a bit about yourself


00:00:40.360 --> 00:00:42.000
before we jump into the topics?


00:00:42.000 --> 00:00:42.840
- Yeah, sure.


00:00:42.840 --> 00:00:45.340
You can see my name right here on the screen,


00:00:45.340 --> 00:00:47.720
but for those listening to the podcast, my name's Guy.


00:00:47.720 --> 00:00:48.800
Yes, it's my real name.


00:00:48.800 --> 00:00:51.720
I sometimes get asked if it's short for something.


00:00:51.720 --> 00:00:54.200
It's not in fact short for Guy Thalamu.


00:00:54.200 --> 00:00:56.480
It's actually just my name, Guy.


00:00:56.480 --> 00:00:59.920
I work for Redis Labs, I'm a developer advocate there.


00:00:59.920 --> 00:01:03.400
And I've been doing developer relations type of work for,


00:01:03.400 --> 00:01:05.240
you know, I've been paid to do it for about five years,


00:01:05.240 --> 00:01:08.680
been doing it unpaid, as an unpaid just fan


00:01:08.680 --> 00:01:12.040
of doing community things for about 10 years on top of that.


00:01:12.040 --> 00:01:14.440
So a lot of different tech stacks.


00:01:14.440 --> 00:01:17.080
I'm not really a Python person by trade.


00:01:17.080 --> 00:01:21.480
I tend to spend more time in the vile, vile JavaScript space


00:01:21.480 --> 00:01:23.320
but I know a little--


00:01:23.320 --> 00:01:25.600
- The other very popular language these days.


00:01:25.600 --> 00:01:29.080
- It is, but I know a lot of different things.


00:01:29.080 --> 00:01:31.920
I'm a bit of a generalist, so I do Python as well.


00:01:31.920 --> 00:01:34.160
- How do you enjoy being a developer evangelist?


00:01:34.160 --> 00:01:35.640
It seems like a really fun job.


00:01:35.640 --> 00:01:38.400
- It's, well, I like to joke that the best thing


00:01:38.400 --> 00:01:40.360
about being a developer advocate is that it lets me


00:01:40.360 --> 00:01:41.760
monetize my narcissism.


00:01:41.760 --> 00:01:47.440
But the reality of it is, I mean,


00:01:47.440 --> 00:01:48.960
it's actually a lot more work than you would think.


00:01:48.960 --> 00:01:52.160
It is fun, but there's a lot of challenge there.


00:01:52.160 --> 00:01:54.760
You know, I spend a lot of my time making content,


00:01:54.760 --> 00:01:57.460
advocating with the product group for, you know,


00:01:57.460 --> 00:01:59.520
the ways that we should change Redis and our clients


00:01:59.520 --> 00:02:00.920
and that kind of stuff.


00:02:00.920 --> 00:02:03.980
And also going out and speaking at events.


00:02:03.980 --> 00:02:06.360
This obviously has been a very weird year for that.


00:02:06.360 --> 00:02:07.900
- Yeah, it has.


00:02:07.900 --> 00:02:10.860
- But you know, that's a lot to balance.


00:02:10.860 --> 00:02:12.900
It's actually kind of a lot of hats to wear.


00:02:12.900 --> 00:02:14.940
And there's a degree where we're being a generalist


00:02:14.940 --> 00:02:15.980
is very useful.


00:02:15.980 --> 00:02:17.460
Like today I'm spending a lot of time


00:02:17.460 --> 00:02:19.540
working on a .NET course,


00:02:19.540 --> 00:02:20.720
helping someone out with that


00:02:20.720 --> 00:02:22.700
because I've got some .NET experience.


00:02:22.700 --> 00:02:25.380
but then I'm doing stuff in JavaScript


00:02:25.380 --> 00:02:27.580
and then, oh, let's look at graph databases.


00:02:27.580 --> 00:02:28.420
I'm just looking at different things all the time.


00:02:28.420 --> 00:02:31.140
- And you got dragged to this Python podcast as well.


00:02:31.140 --> 00:02:33.100
- Yeah, and then someone thinks I know Python


00:02:33.100 --> 00:02:34.300
and put me on this podcast.


00:02:34.300 --> 00:02:35.820
- Hey, you got a couple of good items to talk about.


00:02:35.820 --> 00:02:36.660
I think that'd be good.


00:02:36.660 --> 00:02:37.980
(Brian laughs)


00:02:37.980 --> 00:02:39.020
All right, well, cool.


00:02:39.020 --> 00:02:40.300
Welcome, Brian.


00:02:40.300 --> 00:02:41.620
You wanna kick us off here?


00:02:41.620 --> 00:02:43.540
- I can't believe it's already March, April.


00:02:43.540 --> 00:02:44.380
I was gonna say it's already March, it's April.


00:02:44.380 --> 00:02:45.340
- You were saying it's almost March


00:02:45.340 --> 00:02:46.740
and it's actually blown out, so.


00:02:46.740 --> 00:02:47.580
- Yeah, yeah, yeah.


00:02:47.580 --> 00:02:48.740
(Brian laughs)


00:02:48.740 --> 00:02:50.980
So here's an article called


00:02:50.980 --> 00:02:52.820
how to make awesome Python package,


00:02:52.820 --> 00:02:56.400
how to make an awesome Python package in 2021.


00:02:56.400 --> 00:02:59.240
And this is, I really love this article


00:02:59.240 --> 00:03:01.640
because it's kind of my workflow.


00:03:01.640 --> 00:03:03.300
I've just never written it down.


00:03:03.300 --> 00:03:07.020
And so I'm really grateful for Anton for writing it down.


00:03:07.020 --> 00:03:09.960
I'm also grateful to John Mitchell on Twitter


00:03:09.960 --> 00:03:12.820
to post that so that I could see it.


00:03:12.820 --> 00:03:14.580
So it's great, I really love it.


00:03:14.580 --> 00:03:16.180
Anyway, well, so what is this?


00:03:16.180 --> 00:03:19.180
It isn't about how to make an awesome package.


00:03:19.180 --> 00:03:20.620
It's all of the extra stuff.


00:03:20.620 --> 00:03:26.860
the workflow. So he starts and he starts just like at the basics, just stubbing a package.


00:03:26.860 --> 00:03:32.220
And I really actually really like that this is this is where you start. So the start was


00:03:32.220 --> 00:03:40.300
in using just grabbing a directory and stubbing it out and then having an a dunder init file and a


00:03:40.300 --> 00:03:45.900
an initial file that just does like has one function you can call just so that it's something


00:03:45.900 --> 00:03:51.660
there. And it actually throws a not implemented yet exception, which is, that's a great thing


00:03:51.660 --> 00:03:59.180
to throw, right? And then, pardon the birds. Anyway. >> Brian's recording from Hawaii. He


00:03:59.180 --> 00:04:02.380
didn't like the forest. So it's fine. >> Yeah, he's got a virtual background to


00:04:02.380 --> 00:04:10.220
make it look more mundane. >> More tropical birds. Yeah, yeah. So then using flit to package it up,


00:04:10.220 --> 00:04:14.180
and then go ahead and publish, not publish for real,


00:04:14.180 --> 00:04:17.580
publish to the test PyPI repository,


00:04:17.580 --> 00:04:21.820
which I love this workflow of if you're going to plan on sharing something,


00:04:21.820 --> 00:04:23.780
just go ahead and do this right away.


00:04:23.780 --> 00:04:26.280
The one thing missing there is


00:04:26.280 --> 00:04:29.920
go ahead and check the real PyPI to make sure your project name


00:04:29.920 --> 00:04:31.380
isn't taken already,


00:04:31.380 --> 00:04:34.020
or else the test might work, but your real one won't.


00:04:34.020 --> 00:04:36.580
So adding that in is a good step.


00:04:36.580 --> 00:04:50.860
But then I'm blown away at some of the Python packages that are still available, like secure, right? I mean, that's not available now. But there was a thing that got got to just call it call itself secure. Like a couple years ago. How is that still a thing? Right? Oh, my God. Yeah.


00:04:50.860 --> 00:05:05.260
So one of the one of the tricks with doing the test pipe, you know, though, is getting your is getting the pipe IRC. Correct. So it talks about how to do that. And then publishing using split publish.


00:05:05.860 --> 00:05:12.740
And then adding more detail, like now you actually have to implement it. So an implementation of


00:05:12.740 --> 00:05:19.620
something and then push to the real repository. And then everything else is like extras. Then


00:05:19.620 --> 00:05:27.380
he lists them as appendices almost, like adding a readme and a changelog. And then linters and


00:05:27.380 --> 00:05:34.020
testing. You should maybe test earlier than this. But setting up talks and make files and cloud


00:05:34.020 --> 00:05:40.180
building and the whole gamut. So this is a really great comprehensive article. And you can, what I


00:05:40.180 --> 00:05:44.180
like is you can start at the beginning and if you're not even publishing publicly, if you're


00:05:44.180 --> 00:05:49.700
just publishing in-house, this still makes sense up to a certain point. So this is great.


00:05:49.700 --> 00:05:54.100
Yeah, it looks like really good advice. I love having a well-structured projects where, you know,


00:05:54.100 --> 00:05:57.220
if I have a problem or there's something I want to do, I know right where to go. I don't need to


00:05:57.220 --> 00:06:01.380
go through all the coders. Like here's the 50 lines of code that could possibly be about this.


00:06:01.380 --> 00:06:03.180
Let me go find it and get started.


00:06:03.180 --> 00:06:04.180
Guy, what do you think?


00:06:04.180 --> 00:06:05.020
- Yeah.


00:06:05.020 --> 00:06:07.820
I like that it's an awesome Python package


00:06:07.820 --> 00:06:09.340
and it's not about the contents,


00:06:09.340 --> 00:06:11.460
it's about the stuff around it.


00:06:11.460 --> 00:06:13.340
Right, this is the kind of stuff that is just,


00:06:13.340 --> 00:06:15.140
noobs need this, right?


00:06:15.140 --> 00:06:15.980
- Yeah.


00:06:15.980 --> 00:06:18.220
- It's just, these are exactly the sorts of resources


00:06:18.220 --> 00:06:19.060
I like to find.


00:06:19.060 --> 00:06:21.740
It's the, here's the canonical way to do this thing well.


00:06:21.740 --> 00:06:23.900
- Right, and a lot of times the tutorials are like,


00:06:23.900 --> 00:06:26.140
well, create the one file and that's what you do.


00:06:26.140 --> 00:06:26.980
And then off you go.


00:06:26.980 --> 00:06:28.620
And I feel like that kind of leads people


00:06:28.620 --> 00:06:29.900
down the wrong path a lot of times.


00:06:29.900 --> 00:06:31.540
So yeah, love it.


00:06:31.540 --> 00:06:34.300
All right, well, I think I got the next one here, Brian.


00:06:34.300 --> 00:06:35.140
- Okay.


00:06:35.140 --> 00:06:38.060
- KubeStriker, as in Kubernetes.


00:06:38.060 --> 00:06:42.660
So this is a security tool for anyone who is running


00:06:42.660 --> 00:06:45.900
or being a tenant on a Kubernetes cluster.


00:06:45.900 --> 00:06:47.940
So it's really fast way to audit


00:06:47.940 --> 00:06:51.540
an existing Kubernetes clusters for best practices.


00:06:51.540 --> 00:06:53.980
And like all beautiful repositories,


00:06:53.980 --> 00:06:55.180
it has an animated GIF,


00:06:55.180 --> 00:06:56.180
so you don't have to read anything.


00:06:56.180 --> 00:06:57.180
You just watch it for a little like,


00:06:57.180 --> 00:06:58.020
oh, this is what it does.


00:06:58.020 --> 00:06:59.060
That's kind of cool.


00:06:59.060 --> 00:07:00.980
Maybe I'll use this.


00:07:00.980 --> 00:07:01.820
- Yes, we love that.


00:07:01.820 --> 00:07:02.700
- For those who are listening,


00:07:02.700 --> 00:07:04.620
there's an animated GIF on the screen right now.


00:07:04.620 --> 00:07:06.620
- That's right, absolutely.


00:07:06.620 --> 00:07:08.580
- You should totally see it, it's amazing.


00:07:08.580 --> 00:07:09.960
- Yeah, guy, I mean, sometimes we cover,


00:07:09.960 --> 00:07:11.100
there'll be like UI frameworks,


00:07:11.100 --> 00:07:12.620
like, oh, we built this whole UI framework


00:07:12.620 --> 00:07:14.620
where you do this thing, and there's like no screenshot


00:07:14.620 --> 00:07:16.500
or no way to see what it looks like.


00:07:16.500 --> 00:07:18.420
You're like, well, if it's about the UI,


00:07:18.420 --> 00:07:19.660
we should probably see some pictures.


00:07:19.660 --> 00:07:22.580
So Brian and I are always on a bit of a kick about this.


00:07:22.580 --> 00:07:23.420
- Yeah.


00:07:23.420 --> 00:07:25.940
- Yeah, so it performs a bunch of in-depth analysis


00:07:25.940 --> 00:07:30.420
self-hosted Kubernetes on Amazon EKS, Azure EKS,


00:07:30.420 --> 00:07:32.940
I suspect pretty much you name it, the EKS.


00:07:32.940 --> 00:07:33.840
It'll do it.


00:07:33.840 --> 00:07:35.900
Let's see if I can find where it talks about


00:07:35.900 --> 00:07:37.200
the things that it does.


00:07:37.200 --> 00:07:41.780
Yeah, so it scans your infrastructure, like I said.


00:07:41.780 --> 00:07:45.220
It checks for various services and open ports,


00:07:45.220 --> 00:07:48.100
tells you if they should or shouldn't be open.


00:07:48.100 --> 00:07:51.140
It looks for insecure things or read-write,


00:07:51.140 --> 00:07:52.780
or you can even set it up to be read-only


00:07:52.780 --> 00:07:55.540
and it can check, you know, give it like lower permissions


00:07:55.540 --> 00:07:56.980
and it'll still do that.


00:07:56.980 --> 00:08:00.500
It'll look for misconfigured IAM settings,


00:08:00.500 --> 00:08:03.620
identity from Azure, sorry, AWS,


00:08:03.620 --> 00:08:05.860
misconfigured containers, pod security policies,


00:08:05.860 --> 00:08:07.980
network policies, and extra privileges,


00:08:07.980 --> 00:08:08.860
all that kind of stuff.


00:08:08.860 --> 00:08:11.660
So running containers is pretty easy.


00:08:11.660 --> 00:08:14.220
Running containers in Kubernetes is pretty easy.


00:08:14.220 --> 00:08:17.100
Running a Kubernetes cluster, not easy.


00:08:17.100 --> 00:08:18.820
There's a lot going on if you're the one


00:08:18.820 --> 00:08:20.420
running the Kubernetes cluster.


00:08:20.420 --> 00:08:21.580
And so here's a really nice tool


00:08:21.580 --> 00:08:24.260
that you just point at your cluster and say,


00:08:24.260 --> 00:08:25.220
"How am I doing?"


00:08:25.220 --> 00:08:27.380
I give it a quick check to see if anything's wrong.


00:08:27.380 --> 00:08:28.220
- Yeah.


00:08:28.220 --> 00:08:29.060
- Yeah.


00:08:29.060 --> 00:08:29.900
- This is exciting.


00:08:29.900 --> 00:08:30.740
- Yeah, thanks.


00:08:30.740 --> 00:08:33.020
You guys, a guy, you do anything with Kubernetes


00:08:33.020 --> 00:08:34.420
or Docker, things like that?


00:08:34.420 --> 00:08:36.020
- I do basic developer things


00:08:36.020 --> 00:08:38.780
that developers tend to do with Docker.


00:08:38.780 --> 00:08:40.800
Containerization isn't necessarily my jam.


00:08:40.800 --> 00:08:44.020
I mean, you know, I certainly will spin up a Redis instance,


00:08:44.020 --> 00:08:46.140
for example, using Docker or something like that,


00:08:46.140 --> 00:08:47.500
because that's super convenient.


00:08:47.500 --> 00:08:50.500
But beyond using some basic Docker compose,


00:08:50.500 --> 00:08:51.620
I don't do much of anything.


00:08:51.620 --> 00:08:52.820
- Yeah, same here.


00:08:52.820 --> 00:08:54.580
I feel like every time I start to work with it,


00:08:54.580 --> 00:08:59.260
I go, this is really neat, but it feels like I'm just moving code complexity to DevOps


00:08:59.260 --> 00:09:01.340
complexity and I'm better at code than I'm at DevOps.


00:09:01.340 --> 00:09:02.340
So let me not do that.


00:09:02.340 --> 00:09:04.060
>> You got to write it down somewhere, right?


00:09:04.060 --> 00:09:05.060
>> Yeah.


00:09:05.060 --> 00:09:07.060
>> At the end of the day.


00:09:07.060 --> 00:09:08.060
>> Exactly, exactly.


00:09:08.060 --> 00:09:09.060
All right.


00:09:09.060 --> 00:09:10.500
So, Guy, you got this next one here.


00:09:10.500 --> 00:09:12.260
This is something I'm pretty excited about.


00:09:12.260 --> 00:09:15.940
I'm a big fan of the possibility of WebAssembly.


00:09:15.940 --> 00:09:18.020
Sounds like you are as well.


00:09:18.020 --> 00:09:19.820
>> Yeah, I'm an enormous fan of WebAssembly.


00:09:19.820 --> 00:09:22.420
And I mean, there's a couple reasons for that.


00:09:22.420 --> 00:09:26.760
Some of it is that it kind of reminds me of the early days, like in the '80s when I was


00:09:26.760 --> 00:09:30.520
learning programming, I got into 6502 assembly language.


00:09:30.520 --> 00:09:37.580
So that low-level, machine-level coding has got a nostalgic joy to it.


00:09:37.580 --> 00:09:40.100
And so WebAssembly has drawn me in.


00:09:40.100 --> 00:09:43.740
If you don't know much about WebAssembly, just to put context around it, WebAssembly


00:09:43.740 --> 00:09:45.580
is bytecode for the browser.


00:09:45.580 --> 00:09:46.580
That's where it started.


00:09:46.580 --> 00:09:50.820
The idea is you can take some code, write it in C or Rust or some higher-level compiled


00:09:50.820 --> 00:09:53.980
and then you get a bunch of byte code,


00:09:53.980 --> 00:09:55.420
a binary file that can be downloaded


00:09:55.420 --> 00:09:56.420
and run from the browser.


00:09:56.420 --> 00:09:58.980
So that's WebAssembly in 30 seconds.


00:09:58.980 --> 00:10:01.340
- Yeah, people have done really crazy stuff


00:10:01.340 --> 00:10:03.140
with things like asm.js,


00:10:03.140 --> 00:10:05.440
where they're like, oh, let's take some code


00:10:05.440 --> 00:10:07.340
and send it over to some fancy JavaScript


00:10:07.340 --> 00:10:08.980
that then we'll compile it in Java.


00:10:08.980 --> 00:10:10.980
And there's just all this wild stuff that you can do.


00:10:10.980 --> 00:10:12.880
And it's really, really impressive.


00:10:12.880 --> 00:10:15.020
But this is like, you know, if you're gonna do that,


00:10:15.020 --> 00:10:16.740
let's make this an actual thing


00:10:16.740 --> 00:10:19.880
that's actually expected to be this runtime,


00:10:19.880 --> 00:10:21.000
with this low level runtime.


00:10:21.000 --> 00:10:22.120
Yeah, it's cool.


00:10:22.120 --> 00:10:23.480
- Well, and it turns out it's actually


00:10:23.480 --> 00:10:24.800
a lot more performant too.


00:10:24.800 --> 00:10:28.240
I mean, I've seen benchmarks say as much as 20% faster


00:10:28.240 --> 00:10:29.680
all the way up to 20 times faster,


00:10:29.680 --> 00:10:31.640
but regardless, they always say faster,


00:10:31.640 --> 00:10:33.640
which is good.


00:10:33.640 --> 00:10:36.000
- And smaller probably, coming down as binary bits


00:10:36.000 --> 00:10:37.000
and probably loads faster,


00:10:37.000 --> 00:10:38.640
doesn't have to jet it when it gets there.


00:10:38.640 --> 00:10:40.280
- Well, and it's just another file


00:10:40.280 --> 00:10:41.680
that could be served from the file server,


00:10:41.680 --> 00:10:43.120
so, or from the web server.


00:10:43.120 --> 00:10:44.680
So it can be cached and all the other things


00:10:44.680 --> 00:10:46.120
that you would do with any web content.


00:10:46.120 --> 00:10:49.720
So lots of advantages and optimizations to be had.


00:10:49.720 --> 00:10:51.800
- Right, so what's this thing that you're telling us?


00:10:51.800 --> 00:10:54.480
- So WasmTime, it says,


00:10:54.480 --> 00:10:56.560
"Hey, we built this bytecode for the browser."


00:10:56.560 --> 00:10:59.760
WasmTime said, "You know, what if we put the bytecode


00:10:59.760 --> 00:11:00.960
"wherever we want it?"


00:11:00.960 --> 00:11:05.200
And so in much the way that Node brought JavaScript


00:11:05.200 --> 00:11:09.560
to the server side, WasmTime brings WebAssembly


00:11:09.560 --> 00:11:12.720
to the server side by adding I/O capabilities


00:11:12.720 --> 00:11:16.080
and by adding a command line tool that can run it,


00:11:16.080 --> 00:11:19.960
by adding run times that you can load up in other languages.


00:11:19.960 --> 00:11:23.160
So Wasm time, it's simplest just as you've got


00:11:23.160 --> 00:11:25.320
a WebAssembly module and you say Wasm time space


00:11:25.320 --> 00:11:26.560
in that module on the command line,


00:11:26.560 --> 00:11:29.240
and it just runs it and does whatever it does.


00:11:29.240 --> 00:11:31.540
- Fantastic, and there's different languages supported,


00:11:31.540 --> 00:11:32.380
right?


00:11:32.380 --> 00:11:34.400
- Right, so, and this isn't language support


00:11:34.400 --> 00:11:37.160
from a take that language and compile it to WebAssembly.


00:11:37.160 --> 00:11:38.940
This is take WebAssembly modules


00:11:38.940 --> 00:11:40.880
and run it in those environments.


00:11:40.880 --> 00:11:43.760
So in Rust, Python, Go, .NET, and in C,


00:11:43.760 --> 00:11:45.800
although it's not listed here on the screen,


00:11:45.800 --> 00:11:47.900
there are run times that you can load up,


00:11:47.900 --> 00:11:51.800
load a WebAssembly module from whatever,


00:11:51.800 --> 00:11:52.900
read it from the file system,


00:11:52.900 --> 00:11:55.240
read it out of whatever, right?


00:11:55.240 --> 00:11:57.640
And instantiate that WebAssembly module and run it.


00:11:57.640 --> 00:11:58.800
And so--


00:11:58.800 --> 00:12:00.620
- Yeah, so if I found like a cool library,


00:12:00.620 --> 00:12:02.540
it happened to be written in Rust,


00:12:02.540 --> 00:12:04.300
and it has a WebAssembly version,


00:12:04.300 --> 00:12:06.160
I could then use that in Python.


00:12:06.160 --> 00:12:07.080
- Absolutely.


00:12:07.080 --> 00:12:08.320
- Without much effort.


00:12:08.320 --> 00:12:11.800
- I've actually done WebAssembly text format,


00:12:11.800 --> 00:12:14.320
which is the assembly language to go with WebAssembly.


00:12:14.320 --> 00:12:16.640
I've used that to compile simple modules


00:12:16.640 --> 00:12:18.680
and just like add numbers and stuff like that.


00:12:18.680 --> 00:12:21.120
And then loaded that up from Python code


00:12:21.120 --> 00:12:23.740
and I actually even run it inside of Redis.


00:12:23.740 --> 00:12:26.680
But yeah, so now all of a sudden it brings


00:12:26.680 --> 00:12:29.360
that those compiled chunks of code


00:12:29.360 --> 00:12:30.680
that are really just data.


00:12:30.680 --> 00:12:32.120
You can hand them around any way you want


00:12:32.120 --> 00:12:35.440
and bring them into all these different platforms.


00:12:35.440 --> 00:12:36.800
That's pretty cool.


00:12:36.800 --> 00:12:37.800
- Yeah, this is really neat.


00:12:37.800 --> 00:12:39.020
Brian, what do you think?


00:12:39.020 --> 00:12:42.680
- Just the intermediate part to where you can have


00:12:43.540 --> 00:12:46.700
a group of people, like, even if it's not some third party


00:12:46.700 --> 00:12:49.420
package, it's just within one company that can write


00:12:49.420 --> 00:12:51.480
in whatever language they want to write in,


00:12:51.480 --> 00:12:54.620
and then have an intermediate language that you can,


00:12:54.620 --> 00:12:58.020
you can glue it all together down the pipeline.


00:12:58.020 --> 00:13:00.060
I think that just makes people more efficient.


00:13:00.060 --> 00:13:01.980
I'd like to see that, that sort of take off.


00:13:01.980 --> 00:13:03.900
I think it's a neat, neat place to go.


00:13:03.900 --> 00:13:05.200
- Yeah, Guy, could I use this to say,


00:13:05.200 --> 00:13:08.020
if I had like a .NET library, a Go library,


00:13:08.020 --> 00:13:10.480
and a Rust library, and I was writing in Python,


00:13:10.480 --> 00:13:11.640
could I bring those all together


00:13:11.640 --> 00:13:13.300
to interoperate with this thing?


00:13:13.300 --> 00:13:17.300
In theory, I mean, there's a lot of work involved to do that.


00:13:17.300 --> 00:13:19.540
And there are limitations.


00:13:19.540 --> 00:13:23.440
Out of the box WebAssembly, just like out of the box JavaScript,


00:13:23.440 --> 00:13:25.240
didn't have any kind of I/O,


00:13:25.240 --> 00:13:27.140
because you don't need I/O in a browser.


00:13:27.140 --> 00:13:29.140
You have fetch, right?


00:13:29.140 --> 00:13:30.840
That's all the I/O you get.


00:13:30.840 --> 00:13:33.240
WebAssembly is the same way,


00:13:33.240 --> 00:13:37.840
but WasmTime supports the WASI standard.


00:13:37.840 --> 00:13:40.640
All these things start with W, they're actually kind of hard to say.


00:13:40.640 --> 00:13:45.080
And what I see is the WebAssembly systems interface,


00:13:45.080 --> 00:13:50.480
which gives you a file IO and will eventually give us network IO.


00:13:50.480 --> 00:13:54.240
Right now it will support reading and writing sockets, but it won't support opening a socket,


00:13:54.240 --> 00:13:57.840
which is tantalizingly frustrating.


00:13:57.840 --> 00:14:01.840
That extra ability, though, that actually kind of scares me a little bit.


00:14:01.840 --> 00:14:06.040
I'm concerned about the security part, since you're grabbing some binary blob,


00:14:06.040 --> 00:14:10.240
or it's a WebAssembly blob, it's still not human readable.


00:14:10.240 --> 00:14:14.400
So how do I know it's not going to be a virus or something like that?


00:14:14.400 --> 00:14:17.640
Yeah, that's actually a totally legitimate concern.


00:14:17.640 --> 00:14:22.480
It honestly echoes the same concerns that we had with Node.js


00:14:22.480 --> 00:14:24.080
when it first came out. It's like,


00:14:24.080 --> 00:14:27.440
because in the browser, it's all nice and neat and sandboxed, right?


00:14:27.440 --> 00:14:30.000
And as soon as JavaScript escaped the browser


00:14:30.000 --> 00:14:31.840
and got under your server side, everyone's like,


00:14:31.840 --> 00:14:34.640
"Well, but we can pull JavaScript code and call you Val on it from anywhere."


00:14:34.640 --> 00:14:36.640
Like, well, yeah, you could.


00:14:36.640 --> 00:14:39.520
And so it's the same. I think we end up in the same situation


00:14:39.520 --> 00:14:42.400
where it's got the same caveats once we go there.


00:14:42.400 --> 00:14:47.120
I guess the advice is don't run strange code.


00:14:47.120 --> 00:14:50.320
Right. Yeah.


00:14:50.320 --> 00:14:54.400
But these are particularly like a JavaScript, you can look at it and say,


00:14:54.400 --> 00:14:58.880
"Oh, I see what's going here." And I suppose if it's minified, that's not that easy. But


00:14:58.880 --> 00:15:03.200
with WebAssembly, it's actually just bytes. And it's even harder. It's even more opaque.


00:15:03.200 --> 00:15:03.700
Yeah.


00:15:03.700 --> 00:15:08.240
Yeah. There's so much stuff going on in the supply chain space now, right?


00:15:08.240 --> 00:15:14.120
IPI, there was the PHP itself got a backdoor put into it,


00:15:14.120 --> 00:15:16.840
but luckily never got into any of their releases.


00:15:16.840 --> 00:15:20.080
But yeah, I mean, it's a good concern, Brian, or a valid, certainly.


00:15:20.080 --> 00:15:20.920
>> It is.


00:15:20.920 --> 00:15:21.920
>> It's still cool.


00:15:21.920 --> 00:15:23.440
>> Yeah, absolutely.


00:15:23.440 --> 00:15:24.760
You know what else is cool, Brian?


00:15:24.760 --> 00:15:25.160
>> What?


00:15:25.160 --> 00:15:27.520
>> This episode is brought to you by you and me this time.


00:15:27.520 --> 00:15:28.960
So all of the cool things we're doing,


00:15:28.960 --> 00:15:31.400
I want to tell people if they want to take some Python courses,


00:15:31.400 --> 00:15:34.800
they can check out talkpython.fm and just click on "Courses".


00:15:34.800 --> 00:15:36.680
We've got a bunch of new ones and


00:15:36.680 --> 00:15:41.120
About to release a brand new free course that people will be able to check out as well.


00:15:41.120 --> 00:15:42.800
Probably I'll be able to talk about that next time,


00:15:42.800 --> 00:15:45.360
but it's on the data science side and that'll be a lot of fun.


00:15:45.360 --> 00:15:47.560
Then people want to test things,


00:15:47.560 --> 00:15:51.120
they should probably test it with PyTest so they can check out your book as well.


00:15:51.120 --> 00:15:52.620
>> Yeah, that'd be great.


00:15:52.620 --> 00:15:54.960
>> You guys are the best sponsors.


00:15:54.960 --> 00:15:56.120
>> Thanks.


00:15:56.120 --> 00:15:58.600
>> Yeah. I can't wait to get back to conferences


00:15:58.600 --> 00:16:00.920
so I can get back to handing out stickers and stuff.


00:16:00.920 --> 00:16:01.480
That was so fun.


00:16:01.480 --> 00:16:02.080
>> That'd be great.


00:16:02.080 --> 00:16:05.400
>> Yeah, I know. Imagine that with other people. So crazy.


00:16:05.400 --> 00:16:08.080
Yeah, I hand them to myself, but you know.


00:16:08.080 --> 00:16:14.080
I'm a risk of becoming agoraphobic at this point. Yeah, yeah, absolutely.


00:16:14.080 --> 00:16:25.160
So I wanted to talk about something cool that Anthony shot put together so he I just saw about this. I think don't you use dependabot?


00:16:25.160 --> 00:16:34.480
I oh yeah, my my Monday morning means go ahead and like close 20 PRS and about four of them are conflicting with dependabot.


00:16:34.480 --> 00:16:38.280
where Dependabot was the other PR that also did the PR that I conflict with.


00:16:38.280 --> 00:16:40.680
So, yeah, I've got this special relationship,


00:16:40.680 --> 00:16:43.840
but I'm still very glad to have it there because it's fantastic to know


00:16:43.840 --> 00:16:46.280
there's a security problem for this thing. Fix it now.


00:16:46.280 --> 00:16:47.640
That's really good to know.


00:16:47.640 --> 00:16:52.280
Yeah, so, okay, so I probably am a bad one to introduce the Dependabot side.


00:16:52.280 --> 00:16:56.080
So this is, we're actually talking about Dependalotbot,


00:16:56.080 --> 00:17:00.640
but Dependabot, if people haven't heard it like the 90 times we've talked about it,


00:17:00.640 --> 00:17:01.480
- Yes.


00:17:01.480 --> 00:17:05.460
- Tell me what it does, it goes out and checks to--


00:17:05.460 --> 00:17:07.820
- So it looks at, it supports different languages.


00:17:07.820 --> 00:17:09.540
The Python world, that means,


00:17:09.540 --> 00:17:13.080
if it sees a requirements.txt,


00:17:13.080 --> 00:17:16.140
or it sees like a pyproject.toml or whatever,


00:17:16.140 --> 00:17:17.980
it will look in there for pinned versions.


00:17:17.980 --> 00:17:20.340
If they're not pinned, it will pin it to the current version


00:17:20.340 --> 00:17:24.020
and then submit that change to the requirements.txt as a PR.


00:17:24.020 --> 00:17:24.860
- Yeah.


00:17:24.860 --> 00:17:26.700
- If they are there and it sees there's a new version


00:17:26.700 --> 00:17:28.820
of that library, it will do a PR,


00:17:28.820 --> 00:17:30.820
and in the PR it'll say things like,


00:17:30.820 --> 00:17:32.620
here's the change log and all the commits


00:17:32.620 --> 00:17:35.300
since the last time you used this library.


00:17:35.300 --> 00:17:37.260
Here's the release notes around this library.


00:17:37.260 --> 00:17:40.260
Click this button to apply the new,


00:17:40.260 --> 00:17:41.980
you know, upgrade your pinning.


00:17:41.980 --> 00:17:45.300
So, you know, requests equal equal something higher


00:17:45.300 --> 00:17:47.940
than it is currently automatically to your system.


00:17:47.940 --> 00:17:49.580
So that's the job of Dependabot.


00:17:49.580 --> 00:17:53.160
The thing, the complaint is that if I've got a


00:17:53.160 --> 00:17:56.900
requirements.txt file with 30 packages in it,


00:17:56.900 --> 00:17:59.720
and 10 of them change, I get 10 PRs


00:17:59.720 --> 00:18:02.420
instead of one PR with 10 changes.


00:18:02.420 --> 00:18:03.860
Yeah, it's anyway. - Oh, okay.


00:18:03.860 --> 00:18:05.420
- Yeah, and they conflict with each other


00:18:05.420 --> 00:18:06.920
'cause they're all right by each other.


00:18:06.920 --> 00:18:10.080
And as you accept them, they start to get merge requests,


00:18:10.080 --> 00:18:12.780
you gotta, or merge conflicts, you gotta resolve.


00:18:12.780 --> 00:18:15.580
And anyway, that's this deal, but that's what it does.


00:18:15.580 --> 00:18:19.500
- So this depend a lot bot is a bot


00:18:19.500 --> 00:18:22.500
that looks at all of this and decides,


00:18:22.500 --> 00:18:24.740
and you create a list to say,


00:18:24.740 --> 00:18:28.000
some of my dependencies can be automatically figured out.


00:18:28.000 --> 00:18:32.100
And then like say talks, so you're not, you're using talks,


00:18:32.100 --> 00:18:34.860
but you're not really using it.


00:18:34.860 --> 00:18:36.340
You're using it to test and stuff.


00:18:36.340 --> 00:18:37.640
You're not using it for everything.


00:18:37.640 --> 00:18:42.640
So like, that's an example and the depend a lot bot


00:18:42.640 --> 00:18:46.620
makes sure that the PR request from dependent bot,


00:18:46.620 --> 00:18:51.260
if it passes the tests, it goes ahead and merges it.


00:18:51.260 --> 00:18:53.180
So that's really all it does.


00:18:53.180 --> 00:18:55.220
And I think that's cool to just,


00:18:55.220 --> 00:18:56.240
because that's what I would do.


00:18:56.240 --> 00:18:58.020
If I got one of those PR requests,


00:18:58.020 --> 00:18:59.980
I would make sure it all works fine.


00:18:59.980 --> 00:19:01.780
And then probably in some of them,


00:19:01.780 --> 00:19:02.900
I would probably just push through


00:19:02.900 --> 00:19:05.460
if I trust the where it comes from and stuff.


00:19:05.460 --> 00:19:06.460
- Yeah, exactly.


00:19:06.460 --> 00:19:07.500
It's a well-known package.


00:19:07.500 --> 00:19:09.780
The chances are it's gonna be fine, right?


00:19:09.780 --> 00:19:13.180
Like Bodo from AWS, there's fine to take it.


00:19:13.180 --> 00:19:15.620
- Yeah, and especially the tools around your project


00:19:15.620 --> 00:19:18.780
or you're only using a little part of something.


00:19:18.780 --> 00:19:21.340
As long as your tests pass, it's probably gonna be fine.


00:19:21.340 --> 00:19:23.560
Things like updating Django,


00:19:23.560 --> 00:19:27.000
you may wanna have some more manual procedures for that,


00:19:27.000 --> 00:19:29.440
but something, some minor thing,


00:19:29.440 --> 00:19:32.920
like I'm only using a fraction of a package,


00:19:32.920 --> 00:19:35.400
go ahead and update it and see if the test pass.


00:19:35.400 --> 00:19:36.520
- Yeah, exactly.


00:19:36.520 --> 00:19:37.520
I totally agree.


00:19:37.520 --> 00:19:40.680
Guy, if OneSpace has more dependencies than Python,


00:19:40.680 --> 00:19:41.760
it's gotta be JavaScript.


00:19:41.760 --> 00:19:43.440
- (laughs) Ain't that the truth?


00:19:43.440 --> 00:19:45.280
Yeah.


00:19:45.280 --> 00:19:47.680
You know, my interaction would depend about,


00:19:47.680 --> 00:19:49.840
the vast majority of my repos online


00:19:49.840 --> 00:19:55.360
sample codes to go with talks and videos and that kind of stuff. And I always get Dependabot


00:19:55.360 --> 00:19:58.800
notifications for, "Hey, this project that you did a year and a half ago that you forgot about."


00:19:58.800 --> 00:20:04.320
That tends to be my interaction with Dependabot. I could see how something like this would be very


00:20:04.320 --> 00:20:08.240
useful. I don't know that, I don't know, it might be something I could use to just,


00:20:08.240 --> 00:20:11.360
I have to think about those old packages anymore. It seems like this could be really helpful.


00:20:11.360 --> 00:20:11.760
Yeah, exactly.


00:20:11.760 --> 00:20:15.360
I do like that the guy's, the developer's name is Tony Bologna. That's a fantastic username,


00:20:15.360 --> 00:20:15.680
by the way.


00:20:18.640 --> 00:20:21.040
Yeah, he's he's been on the show. He's a great friend of the show.


00:20:21.040 --> 00:20:21.840
Yeah, it's a good.


00:20:21.840 --> 00:20:25.280
I don't I've I've never met him. I just think that's really funny. Kudos.


00:20:25.280 --> 00:20:30.400
Yeah, this is really cool. I want to check this. I definitely think I'm putting this


00:20:30.400 --> 00:20:34.720
but this I'll probably do it like, for example, things like talks and pytest


00:20:34.720 --> 00:20:37.840
and my testing tools and the linters and stuff like that.


00:20:37.840 --> 00:20:44.720
I definitely want to just update those like and try. And if it doesn't, if I'm always going to


00:20:44.720 --> 00:20:48.360
to update those if there's a new one and everything passes.


00:20:48.360 --> 00:20:50.400
>> Yeah. Just roll it back, it doesn't work.


00:20:50.400 --> 00:20:51.920
Yeah, and tangentially related,


00:20:51.920 --> 00:20:53.920
Dean out there says he can't seem to be able to


00:20:53.920 --> 00:20:57.480
pip install -e.bracket extra,


00:20:57.480 --> 00:20:59.720
but then he quickly posted his own little fix that,


00:20:59.720 --> 00:21:00.880
"Oh, in Z shell,


00:21:00.880 --> 00:21:02.800
you got to escape the brackets."


00:21:02.800 --> 00:21:04.440
Anyone else that is trying to do that?


00:21:04.440 --> 00:21:08.720
That's great. But yeah, well done on this, Tony, Anthony.


00:21:08.720 --> 00:21:11.400
This could be a dream.


00:21:11.400 --> 00:21:13.520
If this works the way I see it working,


00:21:13.520 --> 00:21:15.220
I will be so happy.


00:21:15.220 --> 00:21:18.380
My Mondays won't be like, well, here's the next hour emerging PRS and


00:21:18.380 --> 00:21:20.000
resolving its own self-complex.


00:21:20.000 --> 00:21:21.960
So I'm excited.


00:21:21.960 --> 00:21:22.600
Very cool.


00:21:22.600 --> 00:21:22.860
All right.


00:21:22.860 --> 00:21:24.540
Well, what is the next one?


00:21:24.540 --> 00:21:28.220
I want to take us a little bit, like take a step back just a little bit.


00:21:28.220 --> 00:21:33.020
From low level tech and talk about the Supreme court of the United States.


00:21:33.020 --> 00:21:33.300
Brian.


00:21:33.300 --> 00:21:35.620
I'm I want to talk about this too.


00:21:35.620 --> 00:21:38.620
I also want to take you back to the early two thousands.


00:21:38.620 --> 00:21:42.400
I mean, this is like early days in my programming career, honestly, but here


00:21:42.400 --> 00:21:46.280
Here we are with a ruling about something that happened in the early 2000s.


00:21:46.280 --> 00:21:52.720
And what it is, is that way, way back, Sun created Java, Google, where they created,


00:21:52.720 --> 00:21:56.920
I actually, whoever created Android, I think before Google bought them, created Android


00:21:56.920 --> 00:22:01.120
and said, you know what would be cool is if we could program this with Java and use the


00:22:01.120 --> 00:22:03.040
API of Java.


00:22:03.040 --> 00:22:07.920
So the common way, so like write files and open sockets, all that kind of stuff.


00:22:07.920 --> 00:22:12.920
which may get exactly what the Java runtime libraries do,


00:22:12.920 --> 00:22:15.200
but they did not actually take Java.


00:22:15.200 --> 00:22:17.360
They actually re-implemented it from scratch.


00:22:17.360 --> 00:22:19.640
So none of the runtime details


00:22:19.640 --> 00:22:20.720
had anything to do with Java,


00:22:20.720 --> 00:22:22.880
but the API, the way you talk to it,


00:22:22.880 --> 00:22:25.600
looked just like the Java base class library,


00:22:25.600 --> 00:22:26.480
data library.


00:22:26.480 --> 00:22:28.720
So Oracle buys Java.


00:22:28.720 --> 00:22:30.800
Oracle thinks, "That's not super cool.


00:22:30.800 --> 00:22:32.200
"We want part of that action."


00:22:32.200 --> 00:22:35.240
Sues Google for copyright infringement


00:22:35.240 --> 00:22:37.080
by using the Java APIs.


00:22:37.080 --> 00:22:43.120
So then this throws a huge uncertainty into the space of basically all these libraries,


00:22:43.120 --> 00:22:44.120
right?


00:22:44.120 --> 00:22:47.760
What if I want to create a new web framework and the way it works is a little bit like


00:22:47.760 --> 00:22:53.000
Flask but it turns out that Flask copyrighted, you know, the way it uses decorators, you


00:22:53.000 --> 00:22:56.040
know, app.route or whatever, and then I get sued.


00:22:56.040 --> 00:22:58.360
That seems, I don't know, that seems weird, right?


00:22:58.360 --> 00:22:59.360
Yeah.


00:22:59.360 --> 00:23:00.360
So does this mean that...


00:23:00.360 --> 00:23:01.560
Yeah, go ahead, Guy.


00:23:01.560 --> 00:23:06.320
So does this mean that this ruling mean that you can't copyright an interface in essence?


00:23:06.320 --> 00:23:08.880
- Yes, well, the ruling's interesting


00:23:08.880 --> 00:23:10.720
because it didn't actually address


00:23:10.720 --> 00:23:13.360
the copyright ability of APIs.


00:23:13.360 --> 00:23:16.020
They said potentially they still could be copyrighted,


00:23:16.020 --> 00:23:19.840
but the use of the API as I described it


00:23:19.840 --> 00:23:22.440
in the beginning of like, this is the way you talk to it,


00:23:22.440 --> 00:23:26.040
not the implementation, but the way you speak to the thing,


00:23:26.040 --> 00:23:28.480
they said that that is fair use.


00:23:28.480 --> 00:23:29.840
So when things are copyrighted,


00:23:29.840 --> 00:23:32.560
you're allowed to speak about them in limited ways.


00:23:32.560 --> 00:23:35.080
You're not allowed to take a movie and publish it,


00:23:35.080 --> 00:23:37.880
but you're allowed to take a scene of it and analyze it


00:23:37.880 --> 00:23:39.640
and maybe have that soundtrack,


00:23:39.640 --> 00:23:42.000
that 30 second soundtrack or something like that.


00:23:42.000 --> 00:23:43.000
Right, so that'd be fair use.


00:23:43.000 --> 00:23:46.500
And so they said the way in which they're using APIs


00:23:46.500 --> 00:23:47.540
is like fair use.


00:23:47.540 --> 00:23:49.840
And they talked about the knowledge,


00:23:49.840 --> 00:23:52.420
having a thing, you might copyright the thing,


00:23:52.420 --> 00:23:54.980
but having knowledge how to operate the thing


00:23:54.980 --> 00:23:56.200
that you can't copyright.


00:23:56.200 --> 00:23:57.860
So like knowing how to drive a car,


00:23:57.860 --> 00:23:59.360
you can't copyright that.


00:23:59.360 --> 00:24:02.200
And so having the API without the implementation


00:24:02.200 --> 00:24:05.200
is kind of like the knowledge of how to operate the thing


00:24:05.200 --> 00:24:09.100
that the API goes to, but the API itself is fair use,


00:24:09.100 --> 00:24:10.360
which is pretty interesting.


00:24:10.360 --> 00:24:13.160
So I guess just to sort of put the bow on it is


00:24:13.160 --> 00:24:17.600
the Supreme Court ruled that Oracle suit is dismissed.


00:24:17.600 --> 00:24:21.320
They cannot sue Google and it stopped actually


00:24:21.320 --> 00:24:24.280
a huge wave of lawsuits that would have followed


00:24:24.280 --> 00:24:25.760
around all sorts of different things


00:24:25.760 --> 00:24:27.160
for all different sorts of people.


00:24:27.160 --> 00:24:29.160
So I think I'm happy with this.


00:24:29.160 --> 00:24:31.080
- I think I am too, actually.


00:24:31.080 --> 00:24:33.480
I mean, if I were to sum up everything I just heard,


00:24:33.480 --> 00:24:36.320
what I heard is reverse engineering is fair use.


00:24:36.320 --> 00:24:38.120
- Yes, that sounds about right.


00:24:38.120 --> 00:24:38.960
- So for example,


00:24:38.960 --> 00:24:41.780
- It feels like the Twitter version of this ruling.


00:24:41.780 --> 00:24:42.840
- Yeah.


00:24:42.840 --> 00:24:45.000
You know, the example that came to mind for me,


00:24:45.000 --> 00:24:46.880
and this is the thing,


00:24:46.880 --> 00:24:49.800
this exact example that was in the lawsuit,


00:24:49.800 --> 00:24:52.640
it seems really clear to me that it shouldn't really,


00:24:52.640 --> 00:24:53.560
I don't think that should be a thing.


00:24:53.560 --> 00:24:54.720
But on the other hand,


00:24:54.720 --> 00:24:57.560
you know, AWS was hosting,


00:24:57.560 --> 00:25:02.360
like reselling the open source free version of MongoDB as a service


00:25:02.360 --> 00:25:06.240
without paying any money to the MongoDB folks who actually created and maintained it,


00:25:06.240 --> 00:25:09.560
they changed their license. And so what AWS did was


00:25:09.560 --> 00:25:12.960
kept the API for MongoDB identical,


00:25:12.960 --> 00:25:17.560
but re-implemented the database server in their own version.


00:25:17.560 --> 00:25:20.640
I feel like that's a real interesting example. That's a little more close to the edge.


00:25:20.640 --> 00:25:23.760
It's like, well, here's an open source project that built something neat.


00:25:23.760 --> 00:25:25.960
Here's somebody who was literally running it


00:25:25.960 --> 00:25:28.760
and taking profits off of it exactly.


00:25:28.760 --> 00:25:31.880
And then they sort of changed it to this mode.


00:25:31.880 --> 00:25:32.920
And now it's okay.


00:25:32.920 --> 00:25:34.040
And I think it probably is okay.


00:25:34.040 --> 00:25:36.200
Although I feel like Redis could get itself


00:25:36.200 --> 00:25:38.280
into the same situation, probably,


00:25:38.280 --> 00:25:42.360
unless the license already explicitly says


00:25:42.360 --> 00:25:43.160
that you can't do that.


00:25:43.160 --> 00:25:48.280
- The only licenses we have that specifically explicit


00:25:48.280 --> 00:25:50.280
that are the ones for the modules, which extend it,


00:25:50.280 --> 00:25:52.040
extend Redis.


00:25:52.040 --> 00:25:53.800
Redis itself is open source.


00:25:53.800 --> 00:25:58.600
And so, and Amazon does have an implementation of Redis that they sell.


00:25:58.600 --> 00:25:59.800
Okay, yeah.


00:25:59.800 --> 00:26:02.100
Tal out there in the live stream says, you know,


00:26:02.100 --> 00:26:12.000
another example would be AWS could sue all the other places like Linode and DigitalOcean and stuff that offer S3 compatible storage.


00:26:12.000 --> 00:26:13.200
That's such a good point.


00:26:13.200 --> 00:26:15.500
Yeah, right? Like they both,


00:26:15.500 --> 00:26:18.600
both Linode and DigitalOcean have something that's like,


00:26:18.600 --> 00:26:20.000
like S3.


00:26:20.000 --> 00:26:22.300
And you literally can talk to it with a Boto3


00:26:22.300 --> 00:26:25.300
API because it on the surface it is S3.


00:26:25.300 --> 00:26:29.500
And so there's another example of something that is spared being destroyed.


00:26:29.500 --> 00:26:31.700
Yeah, in the courts.


00:26:31.700 --> 00:26:35.400
I hope this holds up. I really want APIs to be something that


00:26:35.400 --> 00:26:37.500
you can't copyright.


00:26:37.500 --> 00:26:39.600
I think this is it. I think this is it.


00:26:39.600 --> 00:26:42.300
I mean, this it actually Google won


00:26:42.300 --> 00:26:44.700
and then it was overturned by


00:26:44.700 --> 00:26:46.500
a higher court and then Google won again.


00:26:46.500 --> 00:26:50.800
Then it was overturned by a higher court and it like literally worked its way all the way to the Supreme Court.


00:26:50.800 --> 00:26:57.520
and then this is it. And the Supreme Court operates so much on prior rulings and precedent


00:26:57.520 --> 00:27:01.040
and stuff that it's very unlikely that it could be changed at this point.


00:27:01.040 --> 00:27:10.000
And the entire story of Java is just riddled with these gross lawsuits. And I just have to


00:27:10.000 --> 00:27:15.360
shake my head about it. It really would be nice if it had a nicer history. I think people would be


00:27:15.360 --> 00:27:17.840
trashing Java a lot less at this point.


00:27:19.680 --> 00:27:46.520
Yeah we come up with other reasons it wouldn't be a problem. Ben Thompson from Strategory had a really interesting analysis taking apart what the Supreme Court said one of the things they focused on was the the meaning and the essence of copyrights like the reason to have copyrights is so that somebody might invest 10 years in something that could easily be copied copied but doesn't yet exist and sort of drive innovation and they talked a lot about the Supreme Court talked about.


00:27:46.580 --> 00:27:51.580
does this application of copyright actually benefit or restrict innovation?


00:27:51.580 --> 00:27:53.780
And it was interesting that they were actually thinking of those terms,


00:27:53.780 --> 00:27:56.020
not just like, well, what is the legal definition of copyright?


00:27:56.020 --> 00:28:00.420
But they're like, this would be very harmful to so many people if it went the other way.


00:28:00.420 --> 00:28:02.260
And so we got to consider that as well.


00:28:02.260 --> 00:28:04.860
And let's see, Dean says,


00:28:04.860 --> 00:28:09.940
so Java lost this close case, I guess the case is now public static void.


00:28:09.940 --> 00:28:11.060
It's final.


00:28:11.060 --> 00:28:14.060
Yeah.


00:28:14.060 --> 00:28:17.060
Exactly, exactly.


00:28:17.060 --> 00:28:17.560
Cool. All right.


00:28:17.560 --> 00:28:19.560
>> Apparently we don't have a Supreme Court factory.


00:28:19.560 --> 00:28:20.560
So, you know.


00:28:20.560 --> 00:28:23.060
>> Yeah. We got an iSupremeCourt


00:28:23.060 --> 00:28:27.360
and the Supreme Court factory generates iSupremeCourt implementations.


00:28:27.360 --> 00:28:29.160
>> We got a Supreme Court factory manager.


00:28:29.160 --> 00:28:29.660
>> Yeah.


00:28:29.660 --> 00:28:30.860
>> Oh, gosh.


00:28:30.860 --> 00:28:33.260
Yeah. That's, no, I don't know.


00:28:33.260 --> 00:28:36.560
That's going a bit down, too far, too far down.


00:28:36.560 --> 00:28:38.060
>> It's a bridge too far, isn't it?


00:28:38.060 --> 00:28:39.660
>> It definitely is.


00:28:39.660 --> 00:28:41.460
It definitely is. All right.


00:28:41.460 --> 00:28:43.160
Guy, you got the last one here.


00:28:43.160 --> 00:28:44.200
I'm not sure I pulled it up.


00:28:44.200 --> 00:28:47.040
Let me make sure I got it pulled up here.


00:28:47.040 --> 00:28:47.880
Here we go.


00:28:47.880 --> 00:28:51.040
Yeah, so you already talked about how you work for Redis.


00:28:51.040 --> 00:28:54.720
And machine learning is absolutely front and center


00:28:54.720 --> 00:28:56.000
in the Python world.


00:28:56.000 --> 00:28:57.680
And you guys are doing some interesting stuff there.


00:28:57.680 --> 00:28:58.640
You want to tell us about it?


00:28:58.640 --> 00:29:01.220
- Yeah, so I sort of mentioned this earlier,


00:29:01.220 --> 00:29:05.260
but it's kind of a good segue is Redis has modules,


00:29:05.260 --> 00:29:07.060
which are, you know, things you can use.


00:29:07.060 --> 00:29:08.720
They're like plugins to extend what Redis can do.


00:29:08.720 --> 00:29:10.900
So you can, there's like a module that's a graph database.


00:29:10.900 --> 00:29:12.900
And so now, boom, we got some new types


00:29:12.900 --> 00:29:14.240
and some new functionality.


00:29:14.240 --> 00:29:17.200
We can do graph databases or time series or whatever.


00:29:17.200 --> 00:29:20.300
And one of the modules that's Redis Lab,


00:29:20.300 --> 00:29:22.440
and this is part of Redis, it's standard.


00:29:22.440 --> 00:29:24.240
Anyone can create a module.


00:29:24.240 --> 00:29:26.580
There are lots of open source ones out there.


00:29:26.580 --> 00:29:28.500
Redis Labs has a few that we've created.


00:29:28.500 --> 00:29:30.240
One of those is Redis AI.


00:29:30.240 --> 00:29:34.200
And Redis AI turns Redis into a model server.


00:29:34.200 --> 00:29:38.740
So the idea is that I can take the binary output of a model


00:29:38.740 --> 00:29:42.780
in whether it's TensorFlow or whether it's PyTorch


00:29:42.780 --> 00:29:44.480
or whether it's an ONNX model.


00:29:44.480 --> 00:29:46.080
And for those who don't know what ONNX is,


00:29:46.080 --> 00:29:48.080
that's the Open Neural Network Exchange,


00:29:48.080 --> 00:29:51.620
which is a standard Microsoft put together for models.


00:29:51.620 --> 00:29:54.280
So it's sort of like a universal model standard.


00:29:54.280 --> 00:29:58.520
And just like in XKCD, it's like,


00:29:58.520 --> 00:29:59.360
there's too many standards,


00:29:59.360 --> 00:30:01.160
we need a new one to bring these all together.


00:30:01.160 --> 00:30:03.360
ONNX has created yet another standard.


00:30:03.360 --> 00:30:05.760
- Yeah, exactly.


00:30:05.760 --> 00:30:07.620
- This is what always happens, right?


00:30:07.620 --> 00:30:09.680
But Redis supports those three model types.


00:30:09.680 --> 00:30:11.360
So you can take an ONNX model, for example,


00:30:11.360 --> 00:30:15.760
and load it into Redis, and then you can use Redis commands to execute that model.


00:30:15.760 --> 00:30:20.560
And so it provides a nice little abstraction. And the thing that's cool here, I think,


00:30:20.560 --> 00:30:25.200
is that normally if you want to bring AI into your application as a developer,


00:30:25.200 --> 00:30:29.520
you got the data science team, they build, they do their thing, they build their models,


00:30:29.520 --> 00:30:33.760
and you get these binary files out, and then you need to bring them into your application some way.


00:30:33.760 --> 00:30:38.400
And there's a few ways to do that, right? You can just wrap it up in a, you could containerize it


00:30:38.400 --> 00:30:40.400
and make a little flask app around it,


00:30:40.400 --> 00:30:42.400
which is a really common solution.


00:30:42.400 --> 00:30:44.400
There are other model servers.


00:30:44.400 --> 00:30:46.400
You can just put it right in your application,


00:30:46.400 --> 00:30:48.400
but then you have to use Python,


00:30:48.400 --> 00:30:50.400
which is not a terrible problem.


00:30:50.400 --> 00:30:52.400
It can sometimes be a problem.


00:30:52.400 --> 00:30:54.400
>> If you're not using Python, you might see it as a,


00:30:54.400 --> 00:30:56.400
"Wait a minute, this is going to be a big change."


00:30:56.400 --> 00:30:58.400
>> And so the thing that gets me excited about Redis AI,


00:30:58.400 --> 00:31:01.400
which is kind of not the thing that gets my bosses excited,


00:31:01.400 --> 00:31:03.400
but it's the thing that gets me excited,


00:31:03.400 --> 00:31:05.400
is that because we support ONNX,


00:31:05.400 --> 00:31:07.400
the data science team can build their model


00:31:07.400 --> 00:31:09.640
convert it to ONNX and they sort of have a universal standard.


00:31:09.640 --> 00:31:11.800
So they can pick whatever tech stack they want,


00:31:11.800 --> 00:31:13.880
as long as they can spit out an ONNX model.


00:31:13.880 --> 00:31:16.360
And then Redis, being Redis,


00:31:16.360 --> 00:31:18.520
it's got a client for every language under the sun.


00:31:18.520 --> 00:31:21.720
So if you're using Haskell, for example,


00:31:21.720 --> 00:31:23.360
you know, there's a Redis client for,


00:31:23.360 --> 00:31:25.120
I don't know that there's a Redis client for Haskell,


00:31:25.120 --> 00:31:26.360
but I would assume there is.


00:31:26.360 --> 00:31:28.720
It's odds are there is.


00:31:28.720 --> 00:31:33.360
Then you can get to that model from whatever language you're at,


00:31:33.360 --> 00:31:35.560
regardless of what that data science,


00:31:35.560 --> 00:31:40.520
you know, how amenable to data science tooling that platform is. And so it creates a nice


00:31:40.520 --> 00:31:44.440
architectural layer of abstraction. And so that's actually what I think is kind of cool about Redis


00:31:44.440 --> 00:31:50.680
AI. It just provides that, that abstraction that makes the developers and the data science folks


00:31:50.680 --> 00:31:53.560
both not have to, well, speak the same language in a lot of ways.


00:31:53.560 --> 00:31:59.800
Yeah, that's really neat. And it sounds to me a lot like what HTTP APIs did previously, right?


00:31:59.800 --> 00:31:59.800
Yeah.


00:31:59.800 --> 00:32:04.600
And if you wanted to talk to something instead of directly, you know, plugging in that library


00:32:04.600 --> 00:32:09.640
or exchanging some binary data, you like, alright, everybody's going to just agree on JSON.


00:32:09.640 --> 00:32:13.400
Why didn't they agree on dates? But come on, other than that, it's working out just fine.


00:32:13.400 --> 00:32:17.800
We're just going to exchange this and, and that'll be the way we can talk to it. And nobody worries


00:32:17.800 --> 00:32:22.360
about what language you're using to consume the API. It's like, that's your problem. Hopefully,


00:32:22.360 --> 00:32:27.640
your language has a nice way to do that. Yeah, it's, it's a similar thing. The other thing it


00:32:27.640 --> 00:32:32.520
does, which I think is kind of interesting, is that it introduces a new data type. So the models


00:32:32.520 --> 00:32:34.520
as inputs and outputs take tensors.


00:32:34.520 --> 00:32:37.720
You can put a couple of tensors as input to your model or one or however many you need.


00:32:37.720 --> 00:32:40.440
And then your output will be whatever tensors make sense.


00:32:40.440 --> 00:32:45.720
And a tensor is just a, you know, I don't know, I think the word tensor is,


00:32:45.720 --> 00:32:46.840
I'm going to say pretentious.


00:32:46.840 --> 00:32:50.520
I'm probably going to anger a lot of people by saying that.


00:32:50.520 --> 00:32:56.200
Because really what a tensor is in practical terms is just a multi-dimensional array.


00:32:56.200 --> 00:32:59.480
You got a tensor that's got a particular shape.


00:32:59.480 --> 00:33:02.120
It's just like, well, this is an array that's 10 by 5 by 3.


00:33:02.120 --> 00:33:04.320
- and it's made up of ints. - That's it?


00:33:04.320 --> 00:33:06.320
And that's all a tensor is.


00:33:06.320 --> 00:33:08.320
And so it sounds all mystical,


00:33:08.320 --> 00:33:10.920
but it's really just a multidimensional array that's being handed in.


00:33:10.920 --> 00:33:16.720
But because tensors tend to be the things that are put into and taken out of machine learning models,


00:33:16.720 --> 00:33:18.920
Redis AI has a tensor data type.


00:33:18.920 --> 00:33:21.420
And so you could use that capability in Redis as well.


00:33:21.420 --> 00:33:23.820
If you needed to store multidimensional arrays in Redis,


00:33:23.820 --> 00:33:25.420
you've got a type that does that now.


00:33:25.420 --> 00:33:27.920
And so even if you didn't care about the data science,


00:33:27.920 --> 00:33:31.800
the predictive capabilities, the model hosting,


00:33:31.800 --> 00:33:33.720
that's the word I'm looking for in Redis AI.


00:33:33.720 --> 00:33:37.080
You can still use the tensors for various data storage uses.


00:33:37.080 --> 00:33:38.920
>> Yeah. Okay. Interesting.


00:33:38.920 --> 00:33:41.000
Yeah. So you hijack the data type as well.


00:33:41.000 --> 00:33:41.640
>> Yeah.


00:33:41.640 --> 00:33:43.000
>> This looks really interesting.


00:33:43.000 --> 00:33:45.680
I think people should check it out if they're doing


00:33:45.680 --> 00:33:47.400
machine learning and sharing their models


00:33:47.400 --> 00:33:49.960
across different technologies or processes.


00:33:49.960 --> 00:33:52.920
>> I'm obviously excited about it.


00:33:52.920 --> 00:33:55.160
>> I'm excited because I use


00:33:55.160 --> 00:33:57.420
multidimensional arrays and now I can call myself


00:33:57.420 --> 00:33:59.820
a data scientist. That's right. Yeah, there you go.


00:33:59.820 --> 00:34:06.020
Awesome. All right, quick follow up before we get to the extras


00:34:06.020 --> 00:34:06.780
and the joke.


00:34:06.780 --> 00:34:09.420
I'm more of a mad data scientist. Yeah.


00:34:09.420 --> 00:34:09.660
Yeah.


00:34:09.660 --> 00:34:14.380
Student Army captain says, Sorry, I'm late. Doesn't depend


00:34:14.380 --> 00:34:17.660
upon optionally auto merge if CI passes. Yes, but you got to


00:34:17.660 --> 00:34:21.860
have CI running on that project. And so like if you've got a guy


00:34:21.860 --> 00:34:26.700
I have 30, 40 repositories that have courses.


00:34:26.700 --> 00:34:28.180
I don't set up CI for the courses.


00:34:28.180 --> 00:34:30.500
Like what does it even mean to have CI for the courses?


00:34:30.500 --> 00:34:33.220
But I get Dependabot stuff all the time on that


00:34:33.220 --> 00:34:35.300
because it's checking the repository


00:34:35.300 --> 00:34:36.700
for the requirements file.


00:34:36.700 --> 00:34:40.100
So sometimes you can get it to auto merge,


00:34:40.100 --> 00:34:42.880
but there's certainly circumstances where it doesn't.


00:34:42.880 --> 00:34:44.680
If it would just put it in one PR,


00:34:44.680 --> 00:34:46.100
here's the 10 changes.


00:34:46.100 --> 00:34:49.860
I put that actually as a issue on the Dependabot itself


00:34:49.860 --> 00:34:50.820
and people upvoted it.


00:34:50.820 --> 00:34:52.740
comment like, yes, this please.


00:34:52.740 --> 00:34:54.020
But apparently not yet.


00:34:54.020 --> 00:34:57.100
Anyway, what Anthony's done is pretty excellent.


00:34:57.100 --> 00:34:57.940
Hi, Brian.


00:34:57.940 --> 00:34:59.020
That's it for all of our main items, right?


00:34:59.020 --> 00:35:00.220
Unless I lost track.


00:35:00.220 --> 00:35:01.060
- Yeah.


00:35:01.060 --> 00:35:02.940
- Got any extras you wanna throw out there?


00:35:02.940 --> 00:35:05.180
- I don't, I've just been working a lot.


00:35:05.180 --> 00:35:06.020
How about you?


00:35:06.020 --> 00:35:06.840
- I got extras.


00:35:06.840 --> 00:35:07.680
I got plenty.


00:35:07.680 --> 00:35:10.860
So recently did a cool episode over on Talk Python


00:35:10.860 --> 00:35:14.100
about diving into the Git, the .git folder,


00:35:14.100 --> 00:35:16.020
and like all the internals of what Git does there


00:35:16.020 --> 00:35:16.980
and what all those pieces mean.


00:35:16.980 --> 00:35:18.660
If you wanna go in there and look and see how,


00:35:18.660 --> 00:35:20.420
basically understand how Git itself works


00:35:20.420 --> 00:35:21.780
and then all the storage stuff,


00:35:21.780 --> 00:35:23.100
like how they all come together.


00:35:23.100 --> 00:35:25.140
And one of the things that got a nice shout out there


00:35:25.140 --> 00:35:28.020
is git for Windows at gitforwindows.org.


00:35:28.020 --> 00:35:31.300
There's like a special version to install for Git.


00:35:31.300 --> 00:35:34.740
I think this actually might've come from Chris Moffett even,


00:35:34.740 --> 00:35:36.420
some sort of follow-on conversation or something.


00:35:36.420 --> 00:35:38.580
But wherever it came from, if you're doing Windows


00:35:38.580 --> 00:35:39.420
and you wanna install Git,


00:35:39.420 --> 00:35:41.320
this is kind of a cool way to do it as well


00:35:41.320 --> 00:35:43.060
if you're not doing something like Chocolatey.


00:35:43.060 --> 00:35:44.540
- I use it every day and it's--


00:35:44.540 --> 00:35:45.380
- Git for Windows?


00:35:45.380 --> 00:35:47.340
- Yeah, it's a requirement, yeah.


00:35:47.340 --> 00:35:49.200
- Nice, yeah, very cool.


00:35:49.200 --> 00:35:51.680
JupyterLab 3 is released.


00:35:51.680 --> 00:35:54.680
So this one comes to us from Alan Hansen


00:35:54.680 --> 00:35:56.160
and thanks for pointing this out.


00:35:56.160 --> 00:35:59.220
It's a little bit old, couple months,


00:35:59.220 --> 00:36:01.520
but still very cool that JupyterLab 3 is out.


00:36:01.520 --> 00:36:03.640
You can check it out and see all the new changes


00:36:03.640 --> 00:36:06.360
that come along, including a debugger.


00:36:06.360 --> 00:36:07.800
A debugger, how about that?


00:36:07.800 --> 00:36:10.440
Table of contents, multiple languages,


00:36:10.440 --> 00:36:11.280
all sorts of cool stuff.


00:36:11.280 --> 00:36:12.980
So this looks like a major release.


00:36:12.980 --> 00:36:16.160
And if people who love JupyterLab should check it out.


00:36:16.160 --> 00:36:18.000
- Won't be too long until it's PyCharm.


00:36:18.000 --> 00:36:19.160
(laughing)


00:36:19.160 --> 00:36:20.000
- Yeah, that's right.


00:36:20.000 --> 00:36:21.240
It's on its way.


00:36:21.240 --> 00:36:23.960
And speaking of PyCharm, I've got some on that.


00:36:23.960 --> 00:36:27.120
Brian Skin also did a follow up to,


00:36:27.120 --> 00:36:29.640
not the previous episode, maybe the one before that,


00:36:29.640 --> 00:36:31.520
where we were talking about like,


00:36:31.520 --> 00:36:34.040
you know, really, it's great that,


00:36:34.040 --> 00:36:35.880
I think this is when we had Sebastian Ramirez on


00:36:35.880 --> 00:36:37.540
and we were talking about Google becoming


00:36:37.540 --> 00:36:41.360
a visionary sponsor of Python, which is great.


00:36:41.360 --> 00:36:43.040
And it's really cool that a couple of companies


00:36:43.040 --> 00:36:43.860
have done that.


00:36:43.860 --> 00:36:46.080
But then we also pointed out that, you know,


00:36:46.080 --> 00:36:49.320
Bank of America has like insane amounts of stuff


00:36:49.320 --> 00:36:50.560
that they depend upon.


00:36:50.560 --> 00:36:53.280
JP Morgan Chase, their core trading engine,


00:36:53.280 --> 00:36:54.920
some of it is all by like,


00:36:54.920 --> 00:36:57.520
some of these companies that make huge amounts of money


00:36:57.520 --> 00:37:01.200
and fundamentally depend upon Python itself,


00:37:01.200 --> 00:37:02.400
generally don't support Python.


00:37:02.400 --> 00:37:04.880
I don't know the degree to which those two companies do,


00:37:04.880 --> 00:37:06.000
but you don't see them


00:37:06.000 --> 00:37:08.240
like at the top of those sponsorship lists.


00:37:08.240 --> 00:37:09.640
And you know, like Google's


00:37:09.640 --> 00:37:11.800
with something like $300,000 a year.


00:37:11.800 --> 00:37:14.780
Like that's the biggest corporate sponsor in the world.


00:37:14.780 --> 00:37:15.960
Right, couldn't we do more?


00:37:15.960 --> 00:37:18.600
So Brian Skin said, "Hey, I wrote a letter for people."


00:37:18.600 --> 00:37:20.960
And he shared it where it just said,


00:37:20.960 --> 00:37:25.640
"As a mere recipient, given the appreciable business value


00:37:25.640 --> 00:37:28.280
"that we derive from Python and its related scientific tool


00:37:28.280 --> 00:37:29.440
"in over the last few years,


00:37:29.440 --> 00:37:31.960
"at no direct cost to the company,


00:37:31.960 --> 00:37:34.120
"would there be room for Bracket Company


00:37:34.120 --> 00:37:38.920
"to contribute financially to the 501(c)(3) organizations


00:37:38.920 --> 00:37:40.120
"that support these tools?


00:37:40.120 --> 00:37:41.600
"Here's a list, here's how."


00:37:41.600 --> 00:37:44.040
And basically it wrote like a template letter


00:37:44.040 --> 00:37:47.040
that you can send to your company decision makers


00:37:47.040 --> 00:37:49.140
to help encourage them to support Python


00:37:49.140 --> 00:37:51.100
and other open source projects.


00:37:51.100 --> 00:37:52.120
- Yeah, this is great.


00:37:52.120 --> 00:37:54.260
- So, well done, Brian, that was pretty cool.


00:37:54.260 --> 00:37:57.820
All right, Django 3.2 long-term support releases out.


00:37:57.820 --> 00:38:01.280
So if you're on a slow roll with Django,


00:38:01.280 --> 00:38:03.660
you're ready to roll on the new version.


00:38:03.660 --> 00:38:05.540
So this is something you can safely adopt


00:38:05.540 --> 00:38:08.660
for the next three years and stay happy,


00:38:08.660 --> 00:38:11.140
but on a brand new version of Django, so check that out.


00:38:11.140 --> 00:38:13.900
PyCharm, there you go, guy, I told you it would come out.


00:38:13.900 --> 00:38:19.660
PyCharm 2021.1 is out and they've got some really cool stuff in here.


00:38:19.660 --> 00:38:23.500
Really neat things, including the code with me stuff is now out.


00:38:23.500 --> 00:38:29.020
So code with me is I fire up PyCharm or any of the IntelliJ based things.


00:38:29.020 --> 00:38:31.240
And I say, Hey, I would like to say program with Brian.


00:38:31.240 --> 00:38:33.420
Brian, can you help me work on the Python bytes website?


00:38:33.420 --> 00:38:37.740
So I could send you a link and then we would both have like, like Google docs,


00:38:37.740 --> 00:38:40.700
but in PyCharm, like where we see each other typing, we can follow each other


00:38:40.700 --> 00:38:47.700
You can debug the code, but it's running on my machine, for example, even as voice call video call built into PyCharm alongside that.


00:38:47.700 --> 00:38:49.700
Really? It's like a Skype client?


00:38:49.700 --> 00:38:57.700
It actually looks like Skype. I couldn't be sure because I haven't tried it yet, but I looked at the UI that you get. It's like a little in a panel. It looks like an embedded Skype.


00:38:57.700 --> 00:38:58.700
Interesting.


00:38:58.700 --> 00:39:02.700
Yeah. Yeah. All right. Well, those are all the extra things for me as well.


00:39:02.700 --> 00:39:08.760
as well. Well, I wanted to bring up so you reminded me of that the Google fund thing


00:39:08.760 --> 00:39:15.180
that when adding, you know, Google give a PSF a bunch of money. Well, what the PSF is


00:39:15.180 --> 00:39:20.740
doing with it is they're hiring a developer. So nice. I'll drop the link. So PSF is hiring


00:39:20.740 --> 00:39:25.980
a developer in residence to support to support CPython. So this is a good thing. Yeah, awesome.


00:39:25.980 --> 00:39:27.180
It's really cool.


00:39:27.180 --> 00:39:32.180
Ding Langsam also says PyCon IL is in a month.


00:39:32.180 --> 00:39:34.420
So yeah, awesome.


00:39:34.420 --> 00:39:35.300
Check that out.


00:39:35.300 --> 00:39:36.740
And then he also asked about,


00:39:36.740 --> 00:39:39.580
what about the in-browser PyCharm, which we did cover,


00:39:39.580 --> 00:39:41.760
but that was in some kind of experimental phase.


00:39:41.760 --> 00:39:43.420
I would definitely, if possible,


00:39:43.420 --> 00:39:45.220
recommend this code with me thing over that.


00:39:45.220 --> 00:39:46.820
'Cause then you get the real PyCharm.


00:39:46.820 --> 00:39:49.100
It just happens to be like this live exchange.


00:39:49.100 --> 00:39:50.060
Where's the other one?


00:39:50.060 --> 00:39:51.540
There's a lot of setup and whatnot.


00:39:51.540 --> 00:39:54.420
And it had the, this is a private,


00:39:54.420 --> 00:39:56.340
Not necessarily private, but this isn't a beta.


00:39:56.340 --> 00:39:57.780
Don't depend on it sort of way.


00:39:57.780 --> 00:39:59.880
But this is officially this other thing is released.


00:39:59.880 --> 00:40:02.020
Got anything else you want to throw out there for the world,


00:40:02.020 --> 00:40:03.180
for the listeners while you're here?


00:40:03.180 --> 00:40:06.280
And nothing really comes to mind.


00:40:06.280 --> 00:40:07.740
But thank you. Thanks for having me.


00:40:07.740 --> 00:40:10.380
I see on our schedule we have a joke coming next.


00:40:10.380 --> 00:40:11.080
Is that true?


00:40:11.080 --> 00:40:12.940
We we do have a joke coming next.


00:40:12.940 --> 00:40:14.880
And we actually have two, I believe.


00:40:14.880 --> 00:40:16.180
I'm going to fire up mine first.


00:40:16.180 --> 00:40:17.480
This one I have a joke as well.


00:40:17.480 --> 00:40:19.780
If you don't mind, don't worry, it's safe.


00:40:19.780 --> 00:40:21.320
Yeah, that was perfect.


00:40:21.320 --> 00:40:23.720
All right. So Brian, you're a fan of him, right?


00:40:24.080 --> 00:40:37.040
Yes, OK, so Anthony Shaw, same Anthony Shaw as the depend a lot, but we're just talking about wrote a little one liner that fits nicely in Twitter. Vim colon the original escape room.


00:40:37.040 --> 00:40:39.760
That's an old joke.


00:40:39.760 --> 00:40:54.040
I love it though. I love it. And of course you put it on April 1st 'cause you gotta do something funny then right? Yeah, and how about you got one here? Oh yeah, we just added it. So this this. This is awesome. So the the ancient software


00:40:54.040 --> 00:40:56.040
development stands for happiness.


00:40:56.040 --> 00:40:58.280
(laughing)


00:40:58.280 --> 00:41:02.640
- Nice.


00:41:02.640 --> 00:41:06.480
Yeah, Dean also just wants to point out that IL is Israel,


00:41:06.480 --> 00:41:08.760
which I did think that was, but I wasn't 100% sure.


00:41:08.760 --> 00:41:11.720
- I wasn't sure if that was Israel or Illinois.


00:41:11.720 --> 00:41:13.720
- Yeah, yeah, Israel, perfect.


00:41:13.720 --> 00:41:15.680
I would love to go there, but probably not traveling


00:41:15.680 --> 00:41:16.520
right now.


00:41:16.520 --> 00:41:17.840
- I will get to go there eventually.


00:41:17.840 --> 00:41:20.160
That's actually where Redis Labs is headquartered.


00:41:20.160 --> 00:41:21.000
- Oh, is it?


00:41:21.000 --> 00:41:21.820
Interesting, yeah.


00:41:21.820 --> 00:41:23.640
I've had some really great vacations in Tel Aviv


00:41:23.640 --> 00:41:25.640
hanging on the beach that I can't wait to get back.


00:41:25.640 --> 00:41:26.920
All right, Guy, how about you?


00:41:26.920 --> 00:41:29.920
- I thought you were excited to go to Illinois.


00:41:29.920 --> 00:41:32.760
- Yes, you know, Chicago would be nice maybe.


00:41:32.760 --> 00:41:34.200
Yeah, nice place.


00:41:34.200 --> 00:41:35.680
- I just can't wait to get to Peoria.


00:41:35.680 --> 00:41:36.600
Yeah.


00:41:36.600 --> 00:41:38.240
- Well, I've spent,


00:41:38.240 --> 00:41:40.560
actually I've spent a lot of time in Peoria,


00:41:40.560 --> 00:41:43.680
but I've probably hit my lifetime limit.


00:41:43.680 --> 00:41:44.520
I don't need to go.


00:41:44.520 --> 00:41:45.760
I wouldn't take a vacation there.


00:41:45.760 --> 00:41:48.280
It's a nice place, but I wouldn't go travel to it.


00:41:48.280 --> 00:41:49.480
- Yeah, yeah.


00:41:49.480 --> 00:41:53.480
So my joke is, well, it's for you.


00:41:53.480 --> 00:41:57.480
you all what's a what be a pirates favorite programming language.


00:41:57.480 --> 00:41:59.680
I was favorite programming language.


00:41:59.680 --> 00:42:01.780
See, you ruined it.


00:42:01.780 --> 00:42:09.780
So the way it's supposed to go is I say, what would be a pirates favorite


00:42:09.780 --> 00:42:13.380
programming language? And you both in simultaneously go are right.


00:42:13.380 --> 00:42:16.880
Are right. Because, oh, yeah.


00:42:16.880 --> 00:42:20.480
And then the response for me is, is I you might think it'd be our


00:42:20.480 --> 00:42:22.760
I'm 80, but his first love be the C and


00:42:22.760 --> 00:42:26.680
man, the audience is calling out R


00:42:26.680 --> 00:42:29.000
should have looked down.


00:42:29.000 --> 00:42:32.200
It's it works great live because, you know, you get an audience, they'll,


00:42:32.200 --> 00:42:33.680
they'll shout back the answer.


00:42:33.680 --> 00:42:34.440
Yeah.


00:42:34.440 --> 00:42:36.800
And because they just can't help themselves.


00:42:36.800 --> 00:42:39.320
And then you, you surprise them with the, the twist.


00:42:39.320 --> 00:42:42.680
Well, it was a trick question because ours is not a programming language.


00:42:42.680 --> 00:42:49.440
Well, it's been nice talking to you, Brian.


00:42:49.440 --> 00:42:53.720
[LAUGHTER]


00:42:53.720 --> 00:42:56.160
It's not one I would want to work in, honestly.


00:42:56.160 --> 00:42:57.840
I mean, I know it's popular,


00:42:57.840 --> 00:42:59.440
was popular in data science stack,


00:42:59.440 --> 00:43:02.960
but it's got one-based arrays.


00:43:02.960 --> 00:43:05.680
I mean, that's right up there with VB6.


00:43:05.680 --> 00:43:07.720
>> I've never even tried it.


00:43:07.720 --> 00:43:09.960
I haven't made anybody mad today,


00:43:09.960 --> 00:43:12.000
so I needed to fill my quota.


00:43:12.000 --> 00:43:14.600
>> It does have web clients and stuff like that.


00:43:14.600 --> 00:43:15.680
You can build web servers.


00:43:15.680 --> 00:43:16.760
It's a full-fledged language,


00:43:16.760 --> 00:43:21.140
But I've never done anything more than attend a one hour talk on the language.


00:43:21.140 --> 00:43:21.740
Yeah.


00:43:21.740 --> 00:43:22.260
Yeah.


00:43:22.260 --> 00:43:22.760
I haven't either.


00:43:22.760 --> 00:43:23.360
All right.


00:43:23.360 --> 00:43:28.100
Well, guy, thanks so much for being here with us and Brian, as always, great to


00:43:28.100 --> 00:43:29.140
get on with you.


00:43:29.140 --> 00:43:29.660
Good to talk.


00:43:29.660 --> 00:43:30.140
Yeah.


00:43:30.140 --> 00:43:30.740
Thanks for having me.


00:43:30.740 --> 00:43:31.220
Yep.


00:43:31.220 --> 00:43:31.940
Thanks.


00:43:31.940 --> 00:43:32.380
Thanks everyone.


00:43:32.380 --> 00:43:33.060
The live stream as well.


00:43:33.060 --> 00:43:33.500
Bye all.

