00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 240, recorded July 1st, 2021, How Time Does Fly.

00:00:10 I'm Michael Kennedy.

00:00:11 And I'm Brian Arkin.

00:00:12 And I'm Chris Moffitt.

00:00:14 Hey, Chris. Welcome to the show.

00:00:16 Thank you. Great to be here.

00:00:18 Yeah, it's great to have you here.

00:00:19 We've had you talking about the missteps of Excel and how the Python data tools chain can make that better over on Talk Python a few times.

00:00:28 This is your first time on Python Bytes, right?

00:00:30 It is. Yes.

00:00:31 Yeah. Exciting to have you here.

00:00:32 Definitely. Definitely.

00:00:33 But maybe you want to go ahead and kick us off.

00:00:35 I want to talk about subclassing today.

00:00:38 But Hinnick wrote an article called Subclassing in Python.

00:00:41 And, you know, dealing with classes is just everywhere in Python.

00:00:46 Even if you're not using classes, Python itself has all sorts of classes and objects that you're using all the time, whether you know it or not.

00:00:55 But when you start getting into larger design, there is a question around, you know, composition versus inheritance and stuff.

00:01:05 So I really like this article that Hinnick put together because I think people should think about the ramifications more.

00:01:14 So the general gist is he prefers composition over inheritance and I do, too.

00:01:19 And but then goes through if you have to do inheritance when sometimes you do in Python, for instance, the greatest the greatest example I know of is when you're having exception hierarchies.

00:01:34 And it's really it's really easy to build up exception hierarchies in Python.

00:01:39 And it's there's like nothing there is except for like the class definitions and their inheritance.

00:01:45 And that's the easiest class you've ever created.

00:01:47 Class exception name path.

00:01:48 Yeah.

00:01:49 And but it's useful to do that.

00:01:52 But then if you want to go further, there's other there's other design patterns and stuff, especially from the C world, C++ world where people might be thinking, well, I want to do something similar in Python and stuff.

00:02:05 And so this is this is actually kind of a really great article to discussion about it.

00:02:09 It's pretty long.

00:02:10 I don't want to summarize it too much, but I'll jump into the three types.

00:02:13 So he talks about three types of subclassing that's often happens subclassing for code sharing.

00:02:19 And the short answer is it's just people are trying to do the drive principle and try to share code.

00:02:26 And it's just it ends up being a bad idea, essentially.

00:02:29 And there's a bunch of references for it.

00:02:32 And if you don't, I think if you don't believe me or him, read, read this article and read a bunch.

00:02:37 He's got a whole bunch of linked articles to that discuss it.

00:02:41 But but I kind of agree.

00:02:43 The the second type is inherited in is abstract data types or interfaces in a lot of languages are called the interfaces.

00:02:51 And this is kind of a neat use of it.

00:02:54 And there's a bunch of things.

00:02:56 But it's it's and I thought, OK, yeah, you definitely will use.

00:03:01 It's a little bit of inheritance and composition for for data type stuff.

00:03:05 But there's in his discussion, he talks about some of the cool things that Python has that allow you to to have these sort of hierarchies without actually doing subclassing.

00:03:19 So there's there's some cool features of Python, like like the the protocol syntax that came in recently in in typing dot protocol.

00:03:28 Yeah, protocols like formal duck typing, which is an odd thing to combine.

00:03:33 But yes.

00:03:33 Yeah.

00:03:34 But it's it's kind of really cool how it's put together in Python.

00:03:37 So I like that.

00:03:38 And then lastly is a specialization.

00:03:41 And that's where kind of the exception hierarchies come in.

00:03:44 But also he's got a great discussion about structuring data classes that have common elements.

00:03:49 And and I think that's an interesting discussion, too.

00:03:53 And I I think I already said this.

00:03:56 The summary really it's really hard to summarize this article other than it's good to think about your design, especially if you're going to try to bring subclassing into it.

00:04:05 So let's do that.

00:04:06 Yeah.

00:04:07 Awesome.

00:04:07 I haven't had a chance to dive into this article, but I do want to read it and explore it.

00:04:11 You know, it touches on a couple of things like it touches on namespaces and modules, which I think is pretty interesting.

00:04:17 So many people coming from C++, C#, Java, et cetera, like all these really strongly OOP, especially C# and Java, where everything has to be a class.

00:04:25 They you'll see people creating classes just for things like static variables and so on.

00:04:31 Right.

00:04:31 Or static functions.

00:04:32 If you just have a bunch of static functions, you know what works really well for that?

00:04:35 A module that has functions in it.

00:04:36 Right.

00:04:37 That's the same thing.

00:04:38 You import module.

00:04:39 Then you say module dot function name is the same as from module import class, class dot static function name.

00:04:45 Right.

00:04:45 Like it's just a layer that doesn't really need to be there.

00:04:48 So the article touches on that, which I think is neat.

00:04:51 Like sometimes you just don't need those.

00:04:52 And then also the composition over inheritance.

00:04:56 I think composition over inheritance is a really important thing to think about, because so often people say, well, you can't use OOP because it's horrible in all these ways.

00:05:04 And you end up with like a robotic duck that can't quack.

00:05:07 Right.

00:05:07 Like you end up with these weird situations.

00:05:09 If you like derive too many things and you put a weird specialty on the end, you're like a duck is an animal.

00:05:14 And then like, but it has wings.

00:05:16 But wait, now it's a robot.

00:05:18 Now, why does it eat water?

00:05:19 You know, it's like what happened to it?

00:05:20 Right.

00:05:20 But the composition allows for you to keep things much more tight and small in the inheritance stack, but still put them together in meaningful ways.

00:05:27 So anyway, yeah, I want to see more about this.

00:05:29 This looks great.

00:05:30 And I'm coming from a standpoint of I'm a C++ person as well.

00:05:35 And I've done both extremes.

00:05:37 I've like gone way down the inheritance hierarchy thing and had like seven deep in hierarchy, maybe not seven, but like five deep.

00:05:45 And it gets to be a nightmare.

00:05:47 So then I got went to the other direction and didn't do any inheritance at all in a design.

00:05:52 But there's there's problems there, too.

00:05:54 So thinking about it and doing it smartly is you just need to.

00:05:59 Yeah.

00:05:59 So it's often like salt.

00:06:01 I could see it's really good when you have some.

00:06:03 You try to go like salt.

00:06:05 It's great.

00:06:05 I'm going to have that for dinner.

00:06:06 Like, no, you shouldn't do that.

00:06:08 I think the other thing that's really important about this is depending on how long you've been working in Python, sometimes you kind of get stuck in a rut.

00:06:17 And you're always doing the same thing.

00:06:19 And the language has evolved and grown over time.

00:06:21 And so I think articles like this kind of force you to take a step back and see if you're using all the new features in a way that maybe aren't idiomatic.

00:06:31 Also, quick comment out there from the live stream.

00:06:33 Paul says, first time watching the live stream.

00:06:35 Hey, Paul.

00:06:36 Weird seeing everyone when they say the intro.

00:06:38 Indeed, it is kind of weird.

00:06:40 But I want to highlight this one to say hi to Paul.

00:06:42 Thanks for being here.

00:06:43 But also, if you're listening, you're like, hey, I'd kind of like to see what's on the screen while you're all talking about this.

00:06:47 You'll follow us on YouTube.

00:06:48 There's like a live stream menu right on Pythonbytes.fm.

00:06:51 So it's easy to sign up for that.

00:06:53 And also, Sam out there in the live stream following up on that says, currently maintaining a library with a deep templated class and hierarchies.

00:07:00 It's very hard to keep track of it all.

00:07:03 Yeah, I hear you that.

00:07:04 That's for sure.

00:07:05 All right.

00:07:06 Let's switch over to the next one.

00:07:08 Now, I tried.

00:07:09 I tried to resist this, Brian.

00:07:11 I promise I did.

00:07:12 But I've ended up with an extra extra with seven more extras.

00:07:16 Hear all about it.

00:07:18 And it just had to become a main item because otherwise we'd be here for hours.

00:07:21 It's not the idea of the show.

00:07:23 So we've got an extra extra.

00:07:24 Hear all about it.

00:07:25 Nine extras.

00:07:26 Let's pull them up.

00:07:28 Action number one.

00:07:29 We've talked about Pyodide.

00:07:31 I had a whole talk Python episode on Pyodide, which is an interesting thing.

00:07:34 It is this project by Mozilla where you take Python and you run it in the browser.

00:07:39 And then you take many of the data science packages like NumPy and Matplotlib and stuff and compile them into the browser.

00:07:46 And then you basically have client side Python data science, which is really interesting.

00:07:51 This project is being spun out as its own topic, as its own project.

00:07:56 It's no longer under Mozilla.

00:07:57 Usually that doesn't sound good to me.

00:07:59 It kind of sounds like it's been orphaned.

00:08:01 I have no idea what the status of Pyodide is.

00:08:04 People can check that out.

00:08:05 But it's no longer under Mozilla.

00:08:06 It's its own separate thing, as they say.

00:08:09 So it's cruising out there.

00:08:11 And also, it didn't get compiled to JavaScript.

00:08:13 It got compiled to WebAssembly, which is interesting because that's faster.

00:08:17 All right.

00:08:17 That's number one.

00:08:18 Number two, I just, as in a couple hours ago, released a brand new course, Python powered chat

00:08:23 apps with Wilio and SendGrid.

00:08:25 So the idea is if you want to have some kind of chat bot, but a lot of that conversation

00:08:29 has to involve your database and your data and verifying things.

00:08:34 Like the app that we built here is a tech savvy bakery where you can order cakes by sending

00:08:40 it a WhatsApp message.

00:08:41 And then it'll say, hey, you want a cake?

00:08:43 Well, here's the menu.

00:08:44 And it actually gets the menu from our Flask app.

00:08:46 And then they pick something off the menu.

00:08:48 And once they pick all the details, they said like this.

00:08:51 Okay, great.

00:08:52 We send it back to our website and figure out how much that's going to cost.

00:08:55 They order it.

00:08:56 It goes back.

00:08:57 We send them a, if once they accept it, they get like a customized pretty email.

00:09:02 It goes back to the backend.

00:09:03 The bakers bake it.

00:09:04 It sends them another message to let them know.

00:09:06 So if you want to build kind of like that workflow, if Wilio and SendGrid, check it out.

00:09:11 This course is super fun.

00:09:12 It's six hours and it's 100% free.

00:09:14 So people can check that out.

00:09:16 I think if you're trying to build that kind of thing, that'll be a lot of fun.

00:09:19 So links in the show notes there.

00:09:20 I had something.

00:09:21 Yes.

00:09:22 If I can't afford free, can I get a discount code?

00:09:24 I will give anyone listening 50% off that.

00:09:28 So I have this really cool tweet and Twitter is broken from what I can tell for everything

00:09:33 that's not the homepage.

00:09:34 So something went wrong, but let me describe it.

00:09:37 So when you look at it in the show notes, you'll be able to see there's a really cool tweet

00:09:42 from Nick Maul, who was on the guest on the show last week.

00:09:45 Oh, you got it.

00:09:46 How can you get this to work?

00:09:48 You've got some sort of magic.

00:09:49 All right.

00:09:49 Well, so thanks for putting on your screen.

00:09:51 So here we have Will McGuigan showing an animation of basically this really cool, like collapsible

00:10:00 sidebar and like scrolling within sub windows inside of textual.

00:10:06 Right.

00:10:06 We talked about textual as well.

00:10:08 And it's just such a cool graphic that says like, wow, you can build some pretty amazing

00:10:12 applications there.

00:10:13 What do you think?

00:10:14 Will's just knocking it out of the park with this.

00:10:16 It's fun to watch him go so fast.

00:10:18 Absolutely.

00:10:19 Well done there, Will.

00:10:20 I'll switch back to mine for a moment.

00:10:22 Okay.

00:10:22 Ars Technica works on my computer.

00:10:25 So remember we did an episode and I titled it something like Flock No or something like

00:10:29 that.

00:10:30 So Flock, Federated Learning of Cohorts, is something that Google was trying to do so that they can

00:10:38 replace third-party cookies.

00:10:40 Why?

00:10:40 Because people are running ad blockers or like I am right now, a VPN that at the network

00:10:46 level blocks all the ad tracking and third-party cookies.

00:10:50 So they're just basically not working very well anymore.

00:10:53 So they need to, they're going to cancel third-party cookies from, which means they're

00:10:57 canceling for the net, the internet.

00:10:59 And, but because they're Google and they're based on ad revenue primarily, they can't just

00:11:04 go and we canceled tracking.

00:11:05 Hooray.

00:11:06 We're all winning on privacy, right?

00:11:09 It has to be replaced with some other form of tracking, which they call this Federated Learning

00:11:14 of Cohorts.

00:11:15 But the Federated Learning of Cohorts has all these almost more negative consequences.

00:11:20 And I don't want to go too much into that because we went into quite a lot of detail.

00:11:24 But for example, you can say, I would like to target, you know, lesbians who just got divorced.

00:11:29 You run an ad on that.

00:11:30 People show up on your site.

00:11:32 They sign up.

00:11:33 You have an email.

00:11:33 And now guess what?

00:11:35 Not only do you know what their email is, you know that they're in this group.

00:11:38 And maybe this is the very first time you've ever met them, right?

00:11:40 So really weird, creepy stuff that you could like pull out with this.

00:11:45 Anyway, the big news is Google delays the rollout till 2023 because you know what?

00:11:49 People don't like it.

00:11:50 They're not super keen about it.

00:11:52 So there's a whole bunch of people who are against that.

00:11:56 But you're saying they're just delaying it, not stopping it?

00:12:00 Yes, for now.

00:12:02 Like, let me, this is a great article that people should check out.

00:12:06 Like, let me read the first sentence or two.

00:12:08 Google's plan to up in web advertising and user tracking by dropping third party cookie

00:12:12 support in Chrome has been delayed.

00:12:13 Most browsers block third party tracking cookies now as the VPN, like I mentioned.

00:12:18 But Google, the world's largest advertising company, it wasn't going to follow suit without

00:12:22 protecting its business model first.

00:12:24 But there's a lot of challenges with this.

00:12:27 A lot of people have come out against it.

00:12:28 And yeah, it's not going to work out super well.

00:12:32 So they decided to delay it.

00:12:35 That's what they said.

00:12:36 Stage two starts mid 2023.

00:12:38 Google says it's received substantial feedback.

00:12:42 Including from us.

00:12:44 And other companies out there are like, we kind of want to keep tracking too, but we're not

00:12:51 really excited about this.

00:12:52 So we're just going to not say anything.

00:12:53 Like Apple, Opera, Mozilla, Microsoft.

00:12:56 Yeah, they're like, ah, what is I sure about this?

00:12:58 Anyway, yeah, they've received substantial feedback.

00:13:01 So hooray, I think for now.

00:13:02 One thing that we don't talk very often about in Python is what if you want to ship your code

00:13:08 to somebody and it has sensitive algorithms in it, right?

00:13:12 It's not that common, but you could get Py2.exe or Py2.app bundle up your code and give it to somebody.

00:13:16 For example, Dropbox does something to this effect, right?

00:13:19 Got your Python code running up in your little menu bar.

00:13:22 There's other ones as well.

00:13:23 But you might want to encrypt how that works or protect how that works.

00:13:26 So people can't just open the PY files and look around.

00:13:30 So there's this thing called Source Defender.

00:13:32 I'll be clear, this is a paid commercial product.

00:13:34 I have no affiliation, but they pointed out, they sent me a message.

00:13:37 Hey, we're doing this thing.

00:13:38 What do you think?

00:13:39 It looks kind of interesting.

00:13:40 I think it's going to be a pretty limited set of people who actually care about this.

00:13:44 Like if you're running on Docker, you're running on the server, you probably don't care.

00:13:47 Maybe you do, but probably not.

00:13:49 But if you'd like to be able to encrypt your source code so it's much harder to see and then

00:13:53 ship that to somebody, you can use this thing as part of their paid service.

00:13:56 So that's kind of cool.

00:13:57 People can check that out.

00:13:59 Let's see, oh, there's a play noise.

00:14:00 I don't want that.

00:14:01 So I was recently interviewed on a day in the life and a work from home Pythonista, which

00:14:05 is a cool series being done by the folks in the Philippines.

00:14:09 If you want a tour of the behind the scenes studio and all the work from home stuff, people

00:14:12 can check that out.

00:14:13 Python 396 was just released.

00:14:16 We can check out the change log and see what's happening there.

00:14:19 There's a security HTTP client about what I think is like a denial of service.

00:14:25 It sounds like it avoids an infinite loop sort of thing.

00:14:28 So that might matter to people.

00:14:30 Probably not, but maybe it does.

00:14:33 Then a bunch of changes that are happening here, including platform specific ones.

00:14:38 So if you're running Python 39, and why wouldn't you be?

00:14:41 Update that.

00:14:42 Because you're running 310.

00:14:43 Yes, that's right.

00:14:44 You're already ahead of the world.

00:14:45 You're in the future.

00:14:46 So also, we had Calvin on from six feet up a while ago, and we talked about the conference

00:14:54 that he was putting together.

00:14:55 Well, the videos from that conference are out as a YouTube playlist, so people can check

00:14:59 that out.

00:14:59 I don't remember how many videos there are.

00:15:01 Let's click on it and see.

00:15:02 There are 61 videos, including one on the Python memory deep dive talk that I gave.

00:15:08 So if you want to check that out, they can.

00:15:10 Let's see.

00:15:11 Oh, this one.

00:15:12 Check this out, Brian.

00:15:13 Have you seen this?

00:15:14 Did you know you can pip install Python bytes?

00:15:15 Yeah.

00:15:16 You can literally pip install Python bytes because of Scott Stoltzman created this for us as a

00:15:25 joke.

00:15:25 He was listening to one of our episodes.

00:15:26 I can't remember what we talked about.

00:15:28 This was episode 239, but we must have talked about packaging and pip and things like that.

00:15:33 So he created a package called Python bytes.

00:15:35 And what it does is basically you give it a number, like 240, and it would download this

00:15:41 version as an MP3 file and put it right next to whatever the working directory is.

00:15:45 So if you want to pip install Python bytes and then python bytes.downloadepisode instead

00:15:50 of using a podcast player, we're all for that.

00:15:52 You can check that out.

00:15:53 Yeah.

00:15:54 Yeah.

00:15:54 And that's it.

00:15:54 That's extra, extra, extra, extra.

00:15:56 Well, many, many extras.

00:15:57 Yeah.

00:15:58 So the Python bytes package is just sort of, it was for fun, but it also, it's really

00:16:03 small.

00:16:03 And one of the things I like about it is it's just a really cool example of like with Python,

00:16:09 you got something that downloads MP3 files off of a feed somewhere.

00:16:14 It's that easy.

00:16:15 It's just, that's pretty cool.

00:16:17 Yeah.

00:16:18 That's fantastic.

00:16:18 Absolutely.

00:16:19 All right.

00:16:20 Let's see.

00:16:21 A couple of things from the live stream.

00:16:22 Sam says, things have happened with Mozilla the last two years that really shook my confidence

00:16:26 with them.

00:16:27 I am still a big fan of Firefox and I support their mission, but yeah, it's, I want to see

00:16:32 them succeed.

00:16:33 Let's see.

00:16:34 Another one from the live stream.

00:16:36 Antonio said, Hey guys, have you mentioned Kivy before?

00:16:38 Hey, GUIs and Kivy.

00:16:39 There you go.

00:16:40 I watched a video about this week.

00:16:42 It's a GUI that's compatible with many things, including the mobile devices.

00:16:45 I do.

00:16:46 My feeling is that Kivy is, is a lot about, it's more about building almost game-like interactions.

00:16:52 Whereas a lot of GUIs people want, they want like, here's a text box.

00:16:56 I type in the text box.

00:16:57 Here's a button I drop in, you know?

00:16:58 So, but yeah, pretty cool.

00:17:00 Well, let's see.

00:17:01 Kim Venwick says, as an aside, shipping a Docker image won't obfuscate the Python.

00:17:06 The image can be taken apart in files like that.

00:17:08 That's true.

00:17:09 They absolutely can.

00:17:10 I was just thinking like, you're probably just running on like a container service.

00:17:13 But yeah, if you're shipping it to someone, it's the same.

00:17:15 Nick Harvey out in the live stream says, could just send the PYC files with no PY.

00:17:21 It's not foolproof, but it does require more work.

00:17:24 You're right.

00:17:24 You'd basically be down to like this dot this and like reading the byte code.

00:17:28 Yeah, for sure.

00:17:29 Let's see.

00:17:31 Final one.

00:17:31 Rahan says, if it ends up running code on your machine, you can read it.

00:17:35 It's about putting enough barriers that people won't bother.

00:17:37 Yeah, that's definitely true.

00:17:39 I mean, you think of C++ and things like that being completely opaque and yet people take

00:17:44 that apart all the time.

00:17:44 But there is also a difference from I'm literally shipping you the source files here to, you know,

00:17:50 because then you could go in like, oh, here's where the license check is.

00:17:53 Let's just, you know, command slash comment that out.

00:17:55 All right.

00:17:56 Now we're ready to run.

00:17:57 Yeah.

00:17:57 Right.

00:17:57 You want to make it a little bit of a challenge, at least I suspect.

00:18:00 Anyway, thanks for all the feedback out there, everyone.

00:18:02 That's the everything extra, extra nine times.

00:18:06 All right, Chris, what's your first one here?

00:18:08 All right.

00:18:09 So the first one is from Andreas Kanz, I think is how you pronounce it.

00:18:14 And it's a library called Clib, I believe.

00:18:18 I wasn't sure if it's K-Lib or Clib, but I think it's Clib.

00:18:21 And it's for automated cleaning of Pandas data frames.

00:18:26 I guess I should even say it's a little bit more than just cleaning.

00:18:28 It's automated analysis.

00:18:30 And, you know, I'll be the first to say I'm a little skeptical about some things that try

00:18:36 and automate the process.

00:18:37 But I was playing around with it.

00:18:39 And there's some pretty cool things that it does.

00:18:42 The documentation, probably the best way to learn about it is the Towards Data Science article

00:18:49 that he wrote, which gives a pretty nice overview of what it does.

00:18:53 It has some, as I mentioned, some pretty nice cleaning features as well as analysis features.

00:19:01 So I was going to kind of go through a couple of the, describe a couple of things.

00:19:07 The first one that I thought was really interesting is the, there's this function called data cleaning.

00:19:15 And it essentially does, you can control what it does.

00:19:18 So it can clean the column names.

00:19:20 It can convert data types.

00:19:21 It can drop missing.

00:19:23 So one of the things that pandas does is it's not really aggressive about the size or the data types that it uses.

00:19:32 So when you read in data, it will just kind of assign it maybe to a float or, you know, an object.

00:19:40 But if you want, you can get in there.

00:19:42 And if it's a value, if it's a column, let's say that has only values from, you know, less than 100.

00:19:48 If you convert it to an integer, it saves memory.

00:19:51 If you save enough memory, then you can actually speed up your code.

00:19:55 And so this goes behind the scenes and takes your data frame and converts it essentially to the smallest value, NumPy value that it can store.

00:20:05 And then, you know, I took a random data set and sure enough, it did reduce the memory footprint quite a bit, which I thought was pretty interesting because it's one of those things that is very tedious to do on your own by hand.

00:20:18 Does it do like if you have the same string?

00:20:20 Does it just create a pointer to one copy instead of having that many times, stuff like that?

00:20:24 It can do that by converting it to a category type.

00:20:28 That's essentially what pandas is doing when you create a category.

00:20:31 It does that to kind of string to like a list conversion.

00:20:36 And it's, you know, it's pretty effective.

00:20:38 And yeah, I've used the category piece before, but I haven't actually gone in and tried to, you know, shorten up the numeric columns, which is really useful.

00:20:49 The other thing...

00:20:50 You just convert them to all the integers and then it'll just be shorter.

00:20:52 So you don't have to worry about the size.

00:20:54 I'm just teasing.

00:20:55 Yeah.

00:20:55 But I mean, it does even do, it's like, it can do even like int 16s or int 32s or int 8.

00:21:04 Oh yeah, interesting.

00:21:04 Like it'll shrink to the size that'll like, oh, these are all under 256.

00:21:08 So we'll go to like one byte.

00:21:10 Exactly.

00:21:10 Exactly.

00:21:11 You know, and I haven't looked at the code to see, you know, how it actually figures it out, but I had a fairly large data frame and it was pretty quick.

00:21:19 The other one that was interesting is the clean column names.

00:21:22 So I think there are some other libraries out there that will like strip spaces or special characters from column names.

00:21:29 But what this one will actually do is actually, if you have a column name that has, let's say camel case, it'll convert it to all underscore.

00:21:37 Or it will just essentially normalize all of your column names, which, you know, you could have a debate about whether you want to do that.

00:21:47 But when you have a data frame that has a lot of columns and you're just looking at it the first time, that can really be helpful.

00:21:53 And then the other function that it does that works pretty well is for cleaning duplicate data or empty data.

00:22:04 So if you have a lot of columns that have no values in it or just, you know, maybe 90% of the values are empty, you can set thresholds and just clean that all out.

00:22:15 So I was playing around with it and I was pretty impressed.

00:22:18 And I kind of wanted to call it out because the documentation right now is mostly around the Jupyter notebooks that he has.

00:22:30 So I think, you know, it would be nice if we could get some more docs in there and some more examples.

00:22:36 But overall, I was really impressed with the library.

00:22:40 And I think people should kind of take a look at it and see if it's something they want to use for some of their own processes.

00:22:47 Yeah.

00:22:48 Some of them sound interesting, even if you don't have to trust it, right?

00:22:52 Like the shrink to the smallest data set, data type, for example, or normalized column names.

00:22:57 Those don't seem as risky as, you know, clean it up.

00:23:01 Exactly.

00:23:02 Find the wrong data.

00:23:03 Exactly.

00:23:03 And then I forgot to mention, it also has some nice correlation plots.

00:23:08 And some of these things you can already do with Seaborn or Matplotlib, but I found that it gives you a little more control and it's just a little bit easier to do it.

00:23:18 There are certainly other tools out there that do this as well.

00:23:22 So, oh, and then the categorical data plots I thought was a nice summary of the data and gives you some nice graphs and it helps you understand where you've got some missing values.

00:23:35 But yeah.

00:23:36 Yeah.

00:23:36 The visualizing the missing data is a really interesting feature.

00:23:39 Yeah.

00:23:39 And there is another Pandas data frame called MissingNo that does this and does it well.

00:23:44 But I think this is a unique combination, especially some of the data, the memory saving features that it has are pretty neat.

00:23:53 Yeah.

00:23:53 So the cleaning features, though, have a lot of, there's a lot of parameters to it.

00:23:58 So it looks like you have a lot of control.

00:24:00 And one of the, I mean, again, this is open source, so it isn't that magical.

00:24:05 You can just look at the source and see what it's doing.

00:24:07 So it looks.

00:24:08 Exactly.

00:24:09 Yeah.

00:24:10 And that was one of the things I was looking at is like data cleaning, I think is kind of the top level.

00:24:14 And you can just run that wide open and it'll do everything.

00:24:17 And it actually prints out a pretty nice summary of what it does.

00:24:20 But you can also go in there and specify parameters, like you said, to control it so that maybe it doesn't rename the columns.

00:24:28 Or drop some of the missing data.

00:24:30 The other thing that I tried to play with that seemed really interesting is this pool duplicate subsets.

00:24:37 And essentially what it tries to do, and I had a little bit of trouble with this because I think I put too much data at it.

00:24:45 But it tries to, maybe if you have 10 columns of data, it says, well, you know what, four or five of them are very heavily correlated.

00:24:53 So we're going to drop them and just give you the four or five that are actually most useful.

00:24:58 And so I think that's some interesting tools to use when you get some data that maybe you haven't worked with before.

00:25:05 Yeah.

00:25:06 Yeah.

00:25:06 Very nice.

00:25:07 What a good find.

00:25:08 Brian, you got the next one?

00:25:09 Sure.

00:25:10 Yeah.

00:25:10 Just a second.

00:25:12 So I wanted to remind people to every once in a while, look at functools.

00:25:18 Because I've experienced functools as kind of an interesting library that's built in.

00:25:27 That is, it kind of grows with you.

00:25:30 So if you're new to Python and you look at it, it's going to be confusing.

00:25:34 It's like all intermediate stuff in there.

00:25:38 But as you learn and experience more Python programming, come back to it every once in a while because there's stuff in there that you'll use that you didn't think about before.

00:25:48 So I'm going to go through a few things.

00:25:51 And actually, I wanted to call out, there was an article by Martin Hines that I read that kind of reminded me to go through and look this.

00:25:59 So I want to shout out to him.

00:26:01 Thanks.

00:26:02 We've talked about some of this stuff before.

00:26:04 We talked about function overloading and using single dispatch as one of the ways you can do function overloading in Python, which is cool.

00:26:14 And that's part of functools.

00:26:15 And hopefully people are familiar with wraps.

00:26:18 Wraps is a way to create decorators that act like the thing that you decorated.

00:26:24 And so if you're writing decorators, make sure you check out wraps.

00:26:29 And then caching as well.

00:26:30 I think, I'm sure we've talked about LRU cache.

00:26:33 I'm sure we have, yeah.

00:26:35 Yeah.

00:26:35 So that's in functools, the caching.

00:26:39 And new in 3.9, there's just a simple cache.

00:26:44 You don't have to say LRU cache.

00:26:45 And it's just a convenience wrapper around LRU cache.

00:26:49 But it also, there's no max size.

00:26:52 So you don't want to do that for things that you actually want to throw items away.

00:26:57 But caching is super cool.

00:26:59 So check that out.

00:27:01 And then I didn't.

00:27:01 When I first saw the LRU cache, I'm like, whoa, I got to go figure out what this LRU is.

00:27:05 And it's not like, rather than just like cache the response.

00:27:08 Yeah.

00:27:09 I guess the other question, though, you might be is like, well, what if you pass two variable or two arguments or sets of arguments?

00:27:14 How do those?

00:27:15 Yeah.

00:27:15 So either way, it's kind of not 100% totally obvious what's going to happen.

00:27:19 Yeah, it's very cool.

00:27:20 Yeah.

00:27:20 So there's a bunch of caching stuff in there, like the LRU cache.

00:27:24 But then you can also cache a property.

00:27:26 And actually, the property one I hadn't used before.

00:27:29 But I was playing with it this morning.

00:27:31 And it's really cool.

00:27:33 So like, for instance, if you've got a data class or any class that has a bunch of stuff, and some of the things, you have an expensive read on one of those because you have to calculate the value.

00:27:46 You can throw a cache property on it, and it looks pretty cool.

00:27:54 One of the neat things about it is, so it only reads it once, and then it caches the value of the property.

00:28:00 And if you need it to refresh, you call delete on it, which is kind of a weird but kind of cool also.

00:28:08 But it's odd to call delete on something that you want to still be there, and it'll just reread it next time.

00:28:14 So that's how that works.

00:28:15 That is weird.

00:28:16 That's definitely weird.

00:28:17 Total ordering, I didn't realize, was there.

00:28:21 So if you have some data type that you want to be able to compare, you can use total ordering to define equal and one other operator.

00:28:31 And then you get all of the comparison operators to show up.

00:28:35 You can use that.

00:28:36 And then the last one I wanted to highlight is partial method, which partial and partial method, which these are kind of neat in that, like, let's say you've got a function that takes a whole bunch of arguments.

00:28:50 But you want to pre-fill some of those in and create a new function that has some of the arguments pre-filled in.

00:28:56 You can do that with this, and it's pretty neat.

00:29:00 Yeah.

00:29:01 Okay, interesting.

00:29:02 I see you partially supply some of the arguments, but not all of them.

00:29:05 Yeah.

00:29:06 So, yeah, just a shout out to this, that, yeah, these are intermediate or advanced topics.

00:29:12 But, but there, as, so as you learn more Python, come back to this every once in a while and you, you might use, find it useful.

00:29:21 Yep.

00:29:22 Indeed.

00:29:22 I was like, how did I miss this hashed property thing?

00:29:26 Like, surely I would have paid attention to that because what, so often these properties that are like computed things, but they, you know, often don't change.

00:29:33 Right.

00:29:34 You get something back from the database.

00:29:35 You want to, it has time sorted in seconds.

00:29:37 You want to know how many days it is.

00:29:38 So if something happens, you might have a day's property.

00:29:40 Right.

00:29:41 But that's probably not good.

00:29:41 So having that hashed is cool.

00:29:43 If you're sure it's not going to change.

00:29:45 But I'm like, how did I miss it?

00:29:46 It's new in 3.8.

00:29:47 Yeah.

00:29:47 So it's not, it's not super old.

00:29:49 And like Chris said, one of the reasons to revisit a lot of these things and pay attention to the news on Python is because the language changes like this.

00:29:59 So, yeah.

00:29:59 Yeah, for sure.

00:30:00 Kim out there in live streams says, also worth looking at intertools from time to time.

00:30:04 Definitely.

00:30:05 Great.

00:30:06 Indeed.

00:30:06 It's in the same level of complexity, but for collection.

00:30:09 It's kind of like, you wouldn't first go there, but eventually like, oh yeah, this is what I wanted.

00:30:13 I just didn't know it.

00:30:14 Speaking of things you didn't know it, let me scare you all a little, make you all delighted.

00:30:19 I don't know.

00:30:19 You tell me how you take to this.

00:30:20 So let me set the stage.

00:30:22 GitHub has a little bit of source code.

00:30:24 Much of it actually public, right?

00:30:26 Like it's public repos and whatnot.

00:30:29 So it can be analyzed and talked about and shared or used to train an artificial intelligence, which is pretty crazy.

00:30:36 And if you look at the artificial intelligence around text, there's the GPT-3 stuff, which is like scary, good text-based AI.

00:30:43 Well, they decided, what if, you know, our parent company also makes this editor?

00:30:48 What if we hit an AI based on understanding the source code from GitHub, like all the source code from GitHub and put it into VS Code and then it did stuff?

00:30:58 Have you all seen this?

00:30:59 It's called GitHub Copilot.

00:31:00 Yeah.

00:31:01 Yeah.

00:31:02 Yeah.

00:31:02 I haven't done it yet.

00:31:03 I was going to put the link in there and you beat me to it.

00:31:06 Oh yeah.

00:31:07 I was on top of it.

00:31:08 So if you go over here, there actually works for TypeScript, Go, Ruby, Python, a couple other languages.

00:31:14 It says it works for many languages, but it's best on those, of course.

00:31:18 But if you just look like at their homepage, the copilot.github.com, they've got this little animation and it says, I'm going to write a function that says parse expenses.

00:31:27 And it takes some kind of text.

00:31:29 And you put a doc string, literally a doc string in Python.

00:31:32 It says, parse the list of expenses and return the list of tuples, date, value, currency.

00:31:37 Ignore a line starting with hash.

00:31:39 Parse using date time.

00:31:40 Here's some examples.

00:31:41 Tab.

00:31:42 And then it writes the code that does that.

00:31:46 And let's see, what is it going to do?

00:31:48 It says, it's in the middle of animation.

00:31:50 It creates a list of expenses.

00:31:52 It goes through each line on split.

00:31:53 It says, if the line starts with hash, this is all Python code.

00:31:56 Continue on your loop.

00:31:58 Otherwise, date, value, currency equals split it.

00:32:01 And then it knows how to parse the date one.

00:32:03 Convert the value to a float and then store the currency as a string.

00:32:07 And it's not just that sometimes it'll do this.

00:32:10 You can actually get alternate implementations by tabbing through its recommended solution, which is,

00:32:16 pretty crazy.

00:32:17 So this is powered by OpenAIs.

00:32:20 It's called Codec or something like that.

00:32:24 I don't see it right here right now.

00:32:25 Anyway, I'll probably run across it in a second.

00:32:27 That's what it's powered by.

00:32:28 And it says things like, you're the pilot.

00:32:31 So with GitHub Copilot, you're always in charge.

00:32:33 You can cycle through alternative suggestions and choose which to accept or reject and then manually edit the suggested code.

00:32:40 Oh, yeah.

00:32:41 And it learns from you.

00:32:42 So I don't know.

00:32:44 This is wild, y'all.

00:32:46 This is pretty wild stuff here.

00:32:47 What do you think?

00:32:48 I think it's really impressive.

00:32:51 I mean, it will be interesting to see what it's like when you use it in real life.

00:32:55 And I think that there could certainly be limitations.

00:32:59 But I don't know about you.

00:33:02 But whenever I'm programming, there's always these things I just need to go and look at the documentation or look at Stack Overflow to refresh my memory.

00:33:10 You've got to connect to SQLAlchemy.

00:33:11 And I totally forgot how to do those three steps for that connection string sequence.

00:33:15 Right?

00:33:15 Exactly.

00:33:16 Yeah.

00:33:17 And I've seen, I saw on Twitter where someone was throwing a little shade at that example that you're walking through because they said, well, why are you storing the currency as a float?

00:33:27 It should be a decimal because if you store a currency as a float, you're going to have all the rounding issues.

00:33:31 So...

00:33:33 That's how Superman makes all his money or the evil villain in Superman.

00:33:36 What was it?

00:33:36 One of those shows.

00:33:37 Yeah.

00:33:37 Richard Pryor in one of the original Superman.

00:33:41 Yeah.

00:33:41 Yeah.

00:33:44 And it's not just based on the doc string.

00:33:45 Like the example I first spoke about was you wrote complex doc string and then say, do that thing.

00:33:51 But you can do it based just on function name.

00:33:55 You can just type a meaningful function name.

00:33:57 What was the example they used?

00:34:00 I can't remember.

00:34:00 But yeah, so you basically just write a doc string, a comment, a function name, or even some code to give more context to it.

00:34:09 And then off it goes.

00:34:10 So yeah, pretty neat.

00:34:11 Codex, that's the name of the AI system behind it.

00:34:14 So basically, this is a plugin for VS Code, but a really nice one.

00:34:19 So here's some examples we'll all be familiar with.

00:34:21 So fetch tweets.

00:34:22 And the example here is you literally write def fetch underscore tweets underscore from underscore user have.

00:34:29 And then what it auto completes with is, oh, you're going to need to pass the username in.

00:34:33 And then here's how you authorize with Tweepy, set up the API credentials.

00:34:37 And then here's the code you write.

00:34:39 Oh, yeah.

00:34:39 And here's your return.

00:34:40 Or I want to do a scatter plot.

00:34:42 And you write import, import matplotlib dot pyplot as plot, draw scatter plot, have.

00:34:48 And then boom, there it is.

00:34:49 Or memoization.

00:34:50 I wanted to point this one out because of what you're covering, Brian.

00:34:53 It says, oh, here's how you memoize a function, which is to, if it's past a set of arguments, it's always going to return the same answer.

00:35:00 So just give that answer.

00:35:01 Like, remember, these arguments equal this return value once it's run.

00:35:04 And it shows how to create a complex decorator that is going to have a function that remembers the values using caching.

00:35:11 It could just go at funktools dot cache.

00:35:14 You know what I mean?

00:35:15 Like, so there's things like that that is missing, right?

00:35:18 Because you could achieve the exact same outcome with funktools cache decorators, right?

00:35:23 Instead of trying to write a bunch of code that reimplements that.

00:35:26 But anyway, pretty, pretty wild thing.

00:35:28 I don't know really how to feel about that.

00:35:29 I've been thinking about this today.

00:35:30 It's kind of freaking me out, but it's also kind of cool.

00:35:32 Yeah.

00:35:33 I wanted to point out a comic that people have been pointing out with relation to this is, is the, you know, I wish we could have just specify what we wanted to do, the computer to do.

00:35:45 And, and it just does it.

00:35:47 And we already have that.

00:35:49 It's called code.

00:35:50 So anyway.

00:35:50 Yeah.

00:35:52 I, I don't think this, you know, people often say things like.

00:35:56 I remember hearing this 20 years ago.

00:35:58 Oh, this low code thing where you create these little boxes that do stuff and you drag and drop between them.

00:36:02 We're not going to need programmers anymore.

00:36:04 We're all just going to become drag or droppies.

00:36:06 And then like you programmers won't be needed.

00:36:08 The business people will just drag you drop either way the future.

00:36:11 And that never, ever happened.

00:36:13 Right.

00:36:14 Because people got to put them in production.

00:36:15 They've got to debug them.

00:36:17 They've got to scale them.

00:36:18 And so on.

00:36:19 Yeah.

00:36:20 Yeah.

00:36:20 I think the same thing here.

00:36:21 Like sure.

00:36:22 It wrote it once, but you can't have a write only experience.

00:36:25 For your code.

00:36:26 You have to understand your code and be able to evolve your code and work with.

00:36:30 So this might power you into a solution faster.

00:36:33 But I don't think it escapes the need of people doing meaningful software work.

00:36:37 The person that pointed out.

00:36:39 And several people pointed out the example of using money.

00:36:43 Floats and money.

00:36:45 That does highlight one of the problems with something like this, though, that everybody

00:36:49 needs to be careful of is the code that's generated.

00:36:51 Now you have to like, you were already creating, carefully thinking about it when you were creating

00:36:57 it.

00:36:58 But if something else creates it, you've got to scrutinize that to make sure that's really

00:37:02 doing the right thing.

00:37:03 And so you're code reviewing some AI code while you're coding your own stuff.

00:37:09 That's just a different part of your brain.

00:37:11 You've got to make sure that you're really paying attention.

00:37:13 Yeah.

00:37:13 Yeah.

00:37:13 And even I was looking at that matplotlib example.

00:37:17 And I would even argue that's not really the way you should do a scatterplot in matplotlib.

00:37:21 Because you should use the object-oriented interface in matplotlib.

00:37:26 I mean, the code will work.

00:37:27 But I wouldn't advocate that you use that code.

00:37:31 And so to your point, I think it will be interesting to see if it does learn on your own coding style.

00:37:37 So does it start to recognize those things that you're always, you know, like you said, connecting

00:37:42 to a database or fetching a file or doing a certain pandas function?

00:37:47 Will it start to learn that?

00:37:49 And then that would be really interesting.

00:37:51 I think there's something about it adapting to you and it learning from what you're doing.

00:37:55 But I have no idea what that actually means.

00:37:57 Yeah.

00:37:57 Hopefully it's paying attention.

00:37:58 So if it generates something and you change it to the different method and everybody else

00:38:03 is doing that also, maybe they'll stop suggesting the old one and start suggesting the new one.

00:38:09 Yeah.

00:38:09 I'll, you know, Chris, your point about having to, maybe it was you, Brian, sorry.

00:38:13 Whoever said about, you've got to like criticize this and you didn't write it.

00:38:17 So you basically have to study it and then, then understand or understand it and study it

00:38:20 to make sure it's doing the right thing.

00:38:22 You know, I, a couple of years ago, I don't know, a while ago, I was river floating and

00:38:27 broke my hand on some rocks, broke my finger in a bunch of places.

00:38:31 And like my fingers were completely wrapped up all the way to the very tips.

00:38:35 There was no like, oh, little pecking typing while my hand healed.

00:38:38 It was like, nope, no one handed, really slow.

00:38:41 So to keep things going, I used voice to text to try to like, at least keep email flowing

00:38:47 for a month or something, you know?

00:38:49 And what I found was I could write pretty decent emails.

00:38:52 It's hard to like stop and think in whole sentences the way the little tools like it to

00:38:56 work, but you can get it to work pretty well.

00:38:57 But the mistakes it makes that are phonetically correct, but actually what you mean wrong, like

00:39:03 they and they, or, or something that sounds like what you said, but is actually not

00:39:08 what you mean to say is incredibly hard.

00:39:10 It's much harder to understand and edit than you would think.

00:39:14 And so things like this, like, well, I wanted it to do that and I hit tab and I, okay, it's

00:39:18 doing, I feel like there's going to be a lot of blind spots.

00:39:20 Yeah.

00:39:21 Well, it did what it says.

00:39:22 It didn't.

00:39:22 I typed the thing and it seems right.

00:39:24 And like, how do you really, really know?

00:39:26 I, it just seems like in the same type of situation, it's going to be harder than normal code to

00:39:31 check.

00:39:31 Cause you didn't have to think through it to create it.

00:39:34 You know?

00:39:34 Yeah.

00:39:35 A couple of comments from the live stream.

00:39:36 Ray Han, don't, don't give him ideas.

00:39:39 It says, greeting Dr. Falcon.

00:39:42 Gosh, where have you been?

00:39:45 Let's play thermonuclear war as a dock string.

00:39:49 And Nick says, I can't help but think of Microsoft pay, which Microsoft pay was this really cool

00:39:54 bot that was like super good at adapting this stuff and they put it on Twitter, but people

00:39:58 decided to like be mean to, to, to it instead of teach it.

00:40:01 I think in like Japanese Twitter, it became a very kind and intelligent bot, but on like English

00:40:07 Twitter, it got turned into like a racist, horrible creature like right away.

00:40:12 And they actually had to cancel the project.

00:40:14 So yeah.

00:40:16 And then Arthur says, next April fool, April, April fool's day prank.

00:40:21 Everyone start writing terrible code that influences the AI.

00:40:24 And this, this is why English day went down the tubes.

00:40:27 Let's see.

00:40:30 And then Sam, for goodness sakes, don't trade it on GitHub code.

00:40:34 It'll arbitrarily turn on debug mode.

00:40:37 Yeah, perhaps.

00:40:37 Yeah.

00:40:39 Kim thinks this is both very impressive and vaguely unsettling.

00:40:42 And that captures what I was thinking.

00:40:44 Rahen, will it go and talk to the marketing people for me?

00:40:47 No.

00:40:48 I'm good with people.

00:40:50 That's what I do.

00:40:51 Yeah.

00:40:52 Okay.

00:40:52 Another thing that's not mentioned here explicitly, but I think is interesting is this code is coming

00:41:00 from GitHub.

00:41:00 Yeah.

00:41:01 When I go and I'm saying like, I'm working on super secret commercial project for large organization

00:41:08 that has lots of people trying to scrutinize it.

00:41:10 And I hit memoize tab.

00:41:13 It's going to write some amazing code.

00:41:14 Oh, by the way, was that GPL?

00:41:16 Where did that code come from?

00:41:17 Right?

00:41:18 Like what's the license of the code that was on GitHub?

00:41:20 Did I just now all of a sudden grab something that turned, you know, like if I was doing this

00:41:25 on Windows and I hit tab is Windows now open source.

00:41:28 I don't know.

00:41:29 That's a really interesting point.

00:41:30 And you would think if it was a small startup, someone will probably sue them.

00:41:34 But, you know, this is Microsoft now.

00:41:37 Yeah.

00:41:37 Exactly.

00:41:38 Yeah.

00:41:38 Yeah.

00:41:39 Anyway, so I agree with Kim.

00:41:42 This is both very impressive.

00:41:43 If this is the start, like where will it go?

00:41:45 It would be very amazing.

00:41:46 But it's also vaguely unsettling at the same time.

00:41:49 And I don't know how I feel about it.

00:41:51 Other than I wish it was in PyToram so I could play with it more often.

00:41:53 All right.

00:41:56 Chris, you got the last one?

00:41:57 I do.

00:41:58 So this is another library called Cats.

00:42:02 And it's a time series analysis library.

00:42:06 And it's made by the same.

00:42:08 Well, it's from Facebook.

00:42:10 And a lot of people may have heard of Profit, which is a library for time series forecasting.

00:42:16 And one of the things that's interesting to me about Profit and Cats is I think time series

00:42:24 forecasting is something that's really common in the business world.

00:42:27 I mean, you think about trying to forecast sales or maybe inventory movements or stock prices,

00:42:34 a whole bunch of different use cases for it.

00:42:37 And I think in general, most organizations don't have a group of PhDs that are really sophisticated

00:42:45 in their analysis.

00:42:46 So people use Excel and kind of come up with their own approaches.

00:42:50 And that's why I thought Profit was interesting.

00:42:53 And I think this is interesting because it does come from Facebook.

00:42:57 And you have to assume that they've got a lot of smart people that are doing a lot of forecasting.

00:43:02 And they've taken some of the things that Profit was good at and added some additional tools.

00:43:09 So before I go too much into Cats, one thing I wanted to mention is I did write an article

00:43:16 about Profit.

00:43:17 But I think other people, this gentleman, Peter Cotton, wrote an article about Profit and essentially

00:43:27 questioning how good it was.

00:43:29 And this is a really long, really well thought out article.

00:43:34 And some of the math and some of the concepts are way over my head.

00:43:37 But I do encourage people, if you're looking at time series forecasting, take a look at this.

00:43:41 But what Cats does is instead of just doing forecasting with Profit, it has a couple of different models

00:43:49 that you can use.

00:43:50 You can also do some more just basic time series analysis with it to detect seasonality patterns

00:43:58 and change points and other trends.

00:44:00 There's also, if you want to incorporate this in some of your other machine learning algorithms

00:44:06 to pull out features from your time series data, you can do that with this library as well.

00:44:11 And there's a whole bunch of other libraries or utilities to build like ensemble models and

00:44:18 other approaches for time series forecasting.

00:44:20 This is another one where it is relatively new.

00:44:24 So there's not a whole lot of documentation, but it's a whole bunch of different Python notebooks,

00:44:31 Jupyter notebooks, I mean.

00:44:33 And like one of the things I think is interesting is from a forecasting perspective, you can use Profit,

00:44:38 but use the same API and use Cerema, I think, Cerema and Holt Winners, as well as some other

00:44:46 ensemble models.

00:44:47 You can backtest, you can tune your hyperparameters.

00:44:50 And then you can also, it's got several of these other algorithms for change point detection.

00:44:58 And, you know, a lot of this, like I said, is I'm not an expert on the math, but I am interested in how you

00:45:05 figure out how to take these tools and apply them to those real world business problems.

00:45:10 And so I think it's really great when we have some of these libraries out there that are developed by

00:45:15 really smart people that do understand the state of the art, that can maybe make it a little simpler

00:45:20 for others to apply to their own unique challenges.

00:45:23 Yeah, this looks really nice to bundle these all together.

00:45:25 What's a type of problem you might answer with this?

00:45:29 I think so.

00:45:30 One example could be help me figure out what my blog or my website traffic is going to look like in six months

00:45:39 from now.

00:45:39 So I need to figure out, do I need to, you know, resize my servers or upgrade my disk space or...

00:45:48 What's my AWS bandwidth bill going to be?

00:45:50 Exactly.

00:45:51 You know, the other one that I think it's probably used a lot in inventory.

00:45:57 So trying to figure out, okay, what do I think sales is going to look like?

00:46:00 What do I need to reorder so that I actually have enough product so that we don't stock out?

00:46:07 I think those are some pretty common use cases.

00:46:11 A lot of the examples here are the airline flight data.

00:46:15 So anything that you have that's over a period of time, typically kind of on a daily basis over multiple years,

00:46:22 you can then start to forecast out what the future, what those future numbers would look like.

00:46:27 Then you have this magic prediction power for the executives.

00:46:31 Exactly.

00:46:32 And I think what's interesting about it is most of these, I think most times when people do prediction in Excel,

00:46:38 it's kind of you put the numbers in there and kind of do your linear line.

00:46:43 But these tend to give you more error bars so you can give a range.

00:46:48 So I think a prediction like this is much more valuable when you say it could be between, you know, 100 and 110 versus it's going to be 101.5.

00:46:58 And when you do that, it conveys a lot more precision than is really there.

00:47:02 Yeah, that makes a lot of sense.

00:47:04 Comment from the live stream, Sam Morley says, when I was experimenting with time series data, I managed to get better results with a fairly simple, naive Dharma model than I did using profit.

00:47:14 And I think that's exactly what this article, I don't know if he's read this article, but this, the article from Dr. Cotton,

00:47:23 that's essentially what he says is some of the more simple models did outperform profit.

00:47:29 Yeah. Interesting.

00:47:30 Well, cool.

00:47:30 All right.

00:47:31 Brian, is that it for all of our items?

00:47:32 It is.

00:47:33 Got any extra stuff you want to throw out there?

00:47:35 Oh, I just had a, just a quick one.

00:47:38 Somebody on Twitter last week asked, why did I write a second edition of the book?

00:47:43 And so I thought, well, that's a reasonable question.

00:47:46 So at pytestBook.com, you can go and I've added a, why a second edition section.

00:47:51 So I think I'll read that.

00:47:53 New built-in fixtures, new flags, package scope features, F-strings, types, all sorts of good things are available that weren't available then, right?

00:48:02 Yep.

00:48:02 Yeah.

00:48:03 There's all sorts of reasons.

00:48:05 Always good to see Pathlib there.

00:48:07 I love Pathlib.

00:48:08 It makes my life so much easier when dealing with files.

00:48:10 Yeah.

00:48:11 I finally made the move.

00:48:13 I've put down OS.path and I'm now all about the Pathlib.

00:48:16 Loving it.

00:48:17 That's good.

00:48:18 Yeah.

00:48:18 Chris, anything else you want to throw out there?

00:48:20 I was going to throw out one other.

00:48:22 I was doing some research for working with units of measure.

00:48:32 UNYT.

00:48:32 UNYT.

00:48:32 UNYT.

00:48:33 UNYT.

00:48:34 UNYT.

00:48:35 UNYT.

00:48:35 That allows you to do things like convert kilometers to miles.

00:48:41 it works with numpy it works with all the scientific stack and that was um i i hadn't

00:48:48 heard of that one i thought it was kind of interesting and want to put that out there

00:48:51 next time you need to actually do something with units and convert uh back and forth might want to

00:48:57 consider that and then it looks like there's a lot of like physics and chemistry type things like

00:49:02 the mass of the earth the radius of the earth as constants probably pi and e and all those things

00:49:07 yes exactly and i think it's when you start getting into it there's probably temptation just

00:49:12 to code it all yourself just put those constants in there but uh when it starts to get more

00:49:17 complicated i think something like this could be really uh useful and then there's another approach

00:49:22 called pint which also works there we go uh which also works with units and it has a little bit

00:49:29 different uh approach and so i i think it's good to take a look at both of them and if you have a need

00:49:34 then you can decide which api is going to work best for your unique situation yeah these are cool i

00:49:39 haven't looked at unit but i love pint and i think the name is so good yes uh because my wife asked me

00:49:46 like how many else's are in a pound or how many pints are in a liter i'll be like or even in i don't know

00:49:53 a court or vice versa i'm like i have no idea i just these are such messed up volume measures and so

00:49:59 it's like here's the thing that takes the thing you don't really know about and allows you to convert it

00:50:03 to the others in a safe way it's good exactly i got one more quick extra to throw out as well for

00:50:07 you chris there i forgot to mention that you were the author of the move to from excel to python

00:50:12 with pandas course over at talk python trainings which is a really popular course basically it's

00:50:17 a intro to pandas course disguised as solving problems you might with excel right exactly yeah

00:50:22 yeah no thanks and uh i've had a lot of good feedback from folks so hopefully it's uh

00:50:27 interesting to the listeners that haven't had a chance to check it out i might have to buy that for

00:50:32 my boss maybe you can get that discount code yeah yeah the discount code all right you ready for

00:50:39 some jokes my twitter came back so i can show the twitter joke now yeah all right so dean who is

00:50:45 often but i don't see him this day today on the live stream sent a joke over and said do you know how

00:50:51 they say async in italian async yo or async io which i thought was a pretty good one async io i think you

00:50:59 love italian all right um you guys got another one out there i saw one in the notes another joke but i

00:51:05 didn't see who put it there i i've got one um so does anyone know why cryptocurrency engineers

00:51:12 allowed to vote no i don't know because they're minors oh that's a good dad joke yeah it is

00:51:19 absolutely well on that high note let's uh let's call a show what do you what do you say

00:51:27 yep right thanks as always chris thanks for joining us this time thank you very much really appreciate

00:51:31 it yeah bye everyone thank you for listening to python bytes follow the show on twitter via at

00:51:36 python bytes that's python bytes as in b-y-t-e-s and get the full show notes at pythonbytes.fm if you

00:51:44 have a news item you want featured just visit pythonbytes.fm and send it our way we're always on the lookout for

00:51:49 sharing something cool on behalf of myself and brian aukin this is michael kennedy thank you for

00:51:54 listening and sharing this podcast with your friends and colleagues

