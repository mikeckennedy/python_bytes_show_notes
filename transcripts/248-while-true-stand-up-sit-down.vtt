WEBVTT

00:00:00.001 --> 00:00:03.880
Hey there, thanks for listening. Before we jump into this episode, I just want to remind you

00:00:03.880 --> 00:00:09.680
that this episode is brought to you by us over at Talk Python Training and Brian through his pytest

00:00:09.680 --> 00:00:14.940
book. So if you want to get hands-on and learn something with Python, be sure to consider our

00:00:14.940 --> 00:00:21.720
courses over at Talk Python Training. Visit them via pythonbytes.fm/courses. And if you're

00:00:21.720 --> 00:00:27.320
looking to do testing and get better with pytest, check out Brian's book at pythonbytes.fm slash

00:00:27.320 --> 00:00:32.380
pytest. Enjoy the episode. Hello and welcome to Python Bytes, where we deliver Python news and

00:00:32.380 --> 00:00:40.240
headlines directly to your earbuds. This is episode 248, recorded September 1st, 2021. Gasp,

00:00:40.240 --> 00:00:46.320
it's summer over. I'm Michael Kennedy. I'm Brian Okken. I'm Paul Everett. Yay, Paul Everett here.

00:00:46.320 --> 00:00:51.960
Yay. Welcome, Paul. Joy to be here. Long time listener, first time caller. Yeah, I think you

00:00:51.960 --> 00:00:56.420
made an appearance in the previous show in the live chat, but now you're... Oh yes, the live, yeah,

00:00:56.420 --> 00:01:00.560
true. Or possibly I talk Python. I can't remember. It all blurs together. It wasn't as prepared as

00:01:00.560 --> 00:01:06.860
this one. No, now you're on the big stage. So thank you for being here. You know, tell people about the

00:01:06.860 --> 00:01:11.860
things that you've been up to or what you're doing or who you are before we jump into our first topic.

00:01:11.860 --> 00:01:17.200
I'm developer advocate at JetBrains for Python and Web, which means PyTarm and WebStorm.

00:01:17.660 --> 00:01:24.000
What a great gig. Love my job. I always joke that they should be... I should be paying them,

00:01:24.000 --> 00:01:30.620
but don't tell them I said that. And I'm just embarrassed that here I am on Python Bytes,

00:01:30.620 --> 00:01:35.060
and I didn't get a haircut in time. I know this is a podcast, but there's a video version.

00:01:35.060 --> 00:01:36.060
That's right.

00:01:36.060 --> 00:01:39.820
Looking at Brian rocking the do, I feel like I should have been better prepared.

00:01:40.220 --> 00:01:45.980
Yeah. Brian and I have alternate philosophies, I guess. I've got like the knight's neat hair,

00:01:45.980 --> 00:01:50.460
and Brian's just embracing it. And yeah, I would do that too, except for mine just looks like a giant

00:01:50.460 --> 00:01:54.020
poofy thing on top of my head. It doesn't look cool. So yeah, not so much.

00:01:54.020 --> 00:01:55.280
Oh, I want to see that.

00:01:55.280 --> 00:02:01.000
Yeah. It's amazingly bad. Yeah. I've tried it. It's not amazing. All right. But you probably have

00:02:01.000 --> 00:02:02.340
something amazing to tell us about, huh, Brian?

00:02:02.340 --> 00:02:09.200
Well, I do. I actually... So this is an interesting article. I want to talk about both

00:02:09.200 --> 00:02:15.120
Adders and Pydantic because we've talked about both of them on the show, and they're both great

00:02:15.120 --> 00:02:21.480
libraries, I think. And so there's this article that I came across called Why I Use Adders Instead

00:02:21.480 --> 00:02:28.300
of Pydantic. And there's actually a lot more in here than just that. So it was an interesting read.

00:02:29.080 --> 00:02:34.080
Starts out right off the bat talking about basically one of the things that a lot of people

00:02:34.080 --> 00:02:39.820
think about with Adders is, don't we have data classes? Do we need Adders anymore?

00:02:39.820 --> 00:02:47.380
And it starts out talking about, not talking about Pydantic, but talking about data classes.

00:02:47.380 --> 00:02:55.020
And that data classes really came about as a subset of the Adders functionality. So it's really pretty

00:02:55.020 --> 00:03:00.020
easy to go back to using Adders. If you're familiar with data classes, it should be easy.

00:03:00.020 --> 00:03:06.760
And actually, there's a lot of reasons to use Adders instead. For one, they're just faster,

00:03:06.760 --> 00:03:13.020
which I didn't know that they were faster. But there's some examples about a lot of the boilerplate

00:03:13.020 --> 00:03:18.020
stuff that goes into data classes that we don't really think about. But the Adders is pretty tight.

00:03:18.020 --> 00:03:28.020
Adders has more features and has some validation code that isn't around for data classes. So that's

00:03:28.020 --> 00:03:37.020
interesting. So then getting into talking about Pydantic. So I think of Adders as kind of like data

00:03:37.020 --> 00:03:45.020
classes, but it does more. So Adders, this author summarized Adders is a library for generating the

00:03:45.020 --> 00:03:47.020
boring parts of writing classes.

00:03:47.020 --> 00:03:52.020
And like the hash, the equals, the not equals, that kind of stuff, right?

00:03:52.020 --> 00:03:59.020
Yeah. And also like throwing in some validation if you want. So you can opt in. So putting in some validation,

00:03:59.020 --> 00:04:04.020
you can set that up. There's, and there's a lot of stuff that Adders does. I mean, it's a lot more

00:04:04.020 --> 00:04:11.020
than that. It's a, it's a pretty full library also. But what you get with Pydantic is you get that with

00:04:11.020 --> 00:04:18.020
the classes that Pydantic provides, but you also have the validation library and structuring and unstructuring

00:04:18.020 --> 00:04:30.020
and conversion to and from like from, from a different type, like say, Jason into, into a Pydantic class.

00:04:30.020 --> 00:04:37.020
And all these components really are with Adders, you can do all of that. You just, you, you opt in instead of,

00:04:37.020 --> 00:04:47.020
instead of having to opt out of it. And it's kind of a really interesting take on that. And I, I thought of it as kind of like, you know, I've got a lot of,

00:04:47.020 --> 00:04:56.020
I've got a lot of, I've got a great screwdriver. I've got great knives, but I don't think of my Swiss Army knife as a great, anything. It's just that it has everything.

00:04:56.020 --> 00:05:05.020
I don't think it was that harsh of a comparison, but we also think about that with like a Django and Flask where Flask is kind of build up your own framework.

00:05:05.020 --> 00:05:16.020
And Django has a lot of built-ins already. There was, and it isn't even that simple. There's also some, there was an example of some of the validation that's just that,

00:05:16.020 --> 00:05:25.020
that, that is built into Pydantic that just seems wrong. Like the example was, if you've got a list of a thousand integers,

00:05:25.020 --> 00:05:38.020
do you really want Pydantic to go and you pass in a list of integers? You, you want to make sure it's passing in a list, but do you want to want it to go through and make sure absolutely all a thousand elements is an integer?

00:05:38.020 --> 00:05:47.020
You might, in which case you're in luck. Cause that's what it does. But if you don't want it to do that, because it's, that's just too much time. you're out of luck.

00:05:47.020 --> 00:05:56.020
Uh, the other, well, you also got to remember the, the origins of Pydantic were about accepting input from arbitrary things on the internet.

00:05:56.020 --> 00:05:57.020
Oh yeah.

00:05:57.020 --> 00:06:05.020
And when you're, your goal is like, I'm accepting unstructured data from random endpoint on a random endpoint. Like you need a different level of integrity.

00:06:05.020 --> 00:06:17.020
integrity. Then I loaded this off of a JSON file and I know the app created it. It's not going to be broken, right? It's going to be self consistent, at least in the fact that like the data types are probably still consistent.

00:06:17.020 --> 00:06:21.020
So, so it's probably a, a when to use a witch sort of thing as well.

00:06:21.020 --> 00:06:40.020
Yeah. So that's the, that's the generated, yeah. Adders class and the generated Pydantic class. so it's, it's around validation. yeah, it is interesting. the other, the other aspect is, making sure that, that, data is validated when it's set, not just when it's created.

00:06:40.020 --> 00:06:56.020
And I think I got lost here, but I correct me if I'm wrong, Paul, but I think it's that, Pydantic only validates on creation. Whereas you can set adders to be validating on setting values as well. but I could be wrong.

00:06:56.020 --> 00:07:09.020
I believe you're right. I went and looked up a ticket in Pydantic. I didn't read the whole thing about it, but these are hard conversations. There's no free lunch. and this article I thought was a free lunch.

00:07:09.020 --> 00:07:38.020
I thought was a fair treatment about the topic. Yeah. The conversion bit was a little interesting. Like for instance, date conversion. So if you pass in, date time to a Pydantic model, Pydantic already has date time conversions built in. So it'll automatically convert it. But if you are using like pendulum, which is a sub, the, the class is a subclass of date time. You're going to get a wrong conversion. It's just going to do it wrong. because it's not going to be wrong.

00:07:38.020 --> 00:08:07.020
Uh, cause it'll, it'll assume it's a date time and not a pendulum object. So that's interesting. yeah, anyway, definitely, something to think about of the build your own versus, having it all in one. But, but I definitely think there's places for both. Like Michael said, especially with, input validation on the, on the web. If you know what you're doing, definitely. I think maybe you could roll your own or, or use all these adders and other tools. But

00:08:07.020 --> 00:08:14.120
if you're just sort of playing at it and there's getting started, then, why not try Pydantic? It's, it's a great place for that.

00:08:14.120 --> 00:08:25.660
Yeah. The other thing is about the, open API specification stuff with Pydantic, where if you just use them and you just say, I'm using this, it'll like automatically generate the documentation, which is a big bonus.

00:08:25.660 --> 00:08:45.620
Yeah. It's interesting with the release of SQL model. It's like, you can kind of feel like Pydantic is its own little mini framework dispatcher thingy with hook points that you can plug into and almost treat, almost treat as its own little API surface for gluing things together.

00:08:45.620 --> 00:08:56.680
Yeah. Yeah. Yeah. It's the, the data exchange bit. Pretty interesting. Brandon Brainer out in the live stream says, I think it comes down to the, using the right tool for the right job, which is yeah. And how you opened it. Right. Brian? Yeah.

00:08:56.680 --> 00:09:01.440
All right. So we all work with the terminal every now and then, right?

00:09:01.440 --> 00:09:02.580
Every day.

00:09:02.580 --> 00:09:16.880
You might be working with the command prompt if you're on windows, but I strongly encourage you not to do that. You should, you should be switching over to the new Microsoft terminal with like, Oh my posh shell. And then you'll be, you'll be in the terminal world as well.

00:09:16.880 --> 00:09:46.620
So Dunderdan on Twitter, send us a recommendation, which I want to cover called McFly, which I love the name. So what is it? It is a bit of rust code that extension for your terminal, super easy to install. Like you can brew, install it and other types of install it. And basically what it does is it lets you fly through your shell history. Okay. So depending on the shell you use, you may use this a lot, or you may use this a little, you can hit control R.

00:09:46.620 --> 00:10:16.360
In your terminal. And it brings up a reverse history search. So like, if you knew that you type something to do with get, and it had to do with this repo, you could hit control R and like type parts of the repo name. And that would start to auto complete those commands. There's a couple of things that are kind of a bummer about that though. One is maybe the biggest one is you only see one of those at a time. Right. So if I go and say, show me my history, I get a line. And then that is the closest, most recent match to what I type.

00:10:16.360 --> 00:10:46.100
Well, what I often might want is like, it's kind of like a get clone, but which one was it? And I want to see which ones of those are that like, that UI is not fantastic. So imagine if you could type, say, get clone, and then hit control R. And it gave you like a UI in the terminal that you could scroll through and pick. And then you could see what else to type a little bit more. That's McFly. So it's pretty awesome in that regard. But it also uses a little

00:10:46.100 --> 00:11:12.000
little bit of AI, if you will, a little neural network, and some context awareness to help filter and order that I guess price sort is probably the biggest thing is it'll say, well, what, you know, we're searching for this. But usually when you're in this folder, you're often using this, this version of that command. But if you're in a different folder, you're doing a different version of get. And so it'll try to filter your history based on the context of where you are. What do you all think?

00:11:12.000 --> 00:11:23.860
I think I think it looks pretty cool. I was luckily, so I, I don't know why anybody would use the built in Windows command prompt. So I'm even on Windows, I'm using bash. But

00:11:23.860 --> 00:11:31.480
Oh, my posh shell plus pi. Power shell is pretty sweet in the new terminal. Carry on. Carry on. Sorry. Don't mean to derail it.

00:11:31.480 --> 00:11:43.260
Anyway, searching history with the VI mode is pretty easy in bash. But I was glad to see that this, this isn't just for, for your command prompt or posh or anything you can use.

00:11:43.260 --> 00:11:46.880
You can use this with a Z shell and fish and bash too.

00:11:47.420 --> 00:12:15.860
Yeah, it works in a lot of them. And so I found it to be quite neat. So let's see, I'll run through some of the features. So you just rebinds control R, which is kind of nice. But one of the things it'll store your history in a little local SQLite database. So it can do more queries and more interesting stuff have richer information on it. But it also, like, injects the commands that it sees into your regular shell history. So if you stop using it, your shell history for say, Z shell is still totally good. That's pretty nice.

00:12:16.420 --> 00:12:28.240
I will say that. I know you had Brett on recently. And so the rustification of Python bytes appears to be complete at this point. You can't go anywhere without bumping into rust.

00:12:28.240 --> 00:12:31.180
I know you keep bumping into it. It is quite interesting here.

00:12:31.180 --> 00:12:44.620
And my other comment is that I hate to say it, but I think the three of us were, we've been around so long, we were pair programming with Moses. And the idea that I really needed a small neural network for my shell.

00:12:46.200 --> 00:12:47.100
That's a tough one.

00:12:47.100 --> 00:12:48.820
Yeah, it's interesting, right?

00:12:48.820 --> 00:12:49.820
Yeah, it is.

00:12:49.820 --> 00:13:07.320
But I do think, I mean, I do think it adds quite a bit of interesting extensions for this stuff. Like, it's a really cool way to do, you know, I use, oh, my Z shell. So if I wanted like SSH somewhere, I could type SSH and just start hitting up arrow. And it's like a beautiful history map. Like I never use control R because there's a better one.

00:13:07.320 --> 00:13:08.520
I got to make that jump.

00:13:08.520 --> 00:13:37.300
Yeah, it's so good. But sometimes I don't remember exactly what it is, or there's like a lot of them. And so with this one, it'll give you that drop down list that fills the whole screen. So you can jump through them. You can also delete, you're like this one I did once, but I never want to actually don't even want it in my history. You can delete it from your history, which is kind of nice. And then also, let's go through some of the other things. So yeah, so in terms of prioritization, you know, that little neural network,

00:13:37.300 --> 00:13:49.020
says it takes into consideration the directory where you ran the command, what you typed before the command. So if you did a get branch and then a checkout, I don't know, maybe that means something or I don't know, whatever.

00:13:49.020 --> 00:14:03.040
But like the series of commands that preceded it influence what it suggests and how it orders it, how often you run it when you last ran it, what you've selected in it as it's dropped down. And also, it's exit status.

00:14:03.040 --> 00:14:11.160
So if you ran a command, but the command failed, like it won't auto suggest that command again, because that one's the broken one. You know what I mean? Things like that. There's a lot of cool stuff.

00:14:11.160 --> 00:14:12.000
Oh, that's cool.

00:14:12.000 --> 00:14:25.060
And then I got one for you, Brian, down here. So it's easy to install this, you'd like, you know, brew install or where's the, I'll be an advocate install or something. Anyway, if I go down here, there's all sorts of ways to install it.

00:14:25.820 --> 00:14:29.860
But here we are. Vim keybindings, Brian.

00:14:29.860 --> 00:14:31.040
Yes. Okay.

00:14:31.040 --> 00:14:41.140
So, okay. So you have Vim keybindings, which is by default, it uses Emacs. It definitely reminded me of like just firing up Emacs, but for the shell, which is kind of nice.

00:14:41.420 --> 00:14:58.800
The other thing that I like about it, I haven't turned this on yet, is fuzzy searching. So sometimes I'll be like, ah, there's this command. I think it was this. But if you get it wrong, then it's like you get zero help, right? If you get one character wrong. But this one is, if you get close, can you get close and we'll give you some autocomplete on that. That's pretty cool.

00:14:59.180 --> 00:15:03.040
Yeah, that's great. Because you might like be searching for a file name or something like that.

00:15:03.040 --> 00:15:05.140
Yeah, yeah, exactly. Exactly.

00:15:05.140 --> 00:15:16.540
Do you see that? There was an XKCD, I think, or some other comic of somebody. Now it's a different one, but somebody scrolling through their history for like an hour to get LS.

00:15:16.540 --> 00:15:17.700
Yes.

00:15:17.700 --> 00:15:22.300
No, I'm definitely going to try this out. This is pretty good.

00:15:22.300 --> 00:15:23.760
Can you scroll? Yeah.

00:15:23.760 --> 00:15:25.520
Oh, you're going on the XKCD.

00:15:25.520 --> 00:15:26.040
No, sorry.

00:15:26.200 --> 00:15:29.640
Can you scroll up to the commits? Number of commits?

00:15:29.640 --> 00:15:30.660
Yeah, 350.

00:15:30.660 --> 00:15:34.260
Yeah, this has the look of a project that's been refined, doesn't it?

00:15:34.260 --> 00:15:43.460
Yeah. Yeah, it does. I don't know quite how long it's been around, but yeah, it looks like the oldest super obvious one is 14 months.

00:15:43.460 --> 00:15:44.060
Yeah.

00:15:44.060 --> 00:15:44.340
Yeah.

00:15:44.340 --> 00:15:48.600
It's continuous integration. It was last configured 14 months ago, let's say.

00:15:48.600 --> 00:15:51.600
No, it's the docs. The docs were two years ago.

00:15:51.600 --> 00:15:54.580
Okay. The docs, there you go. I think this is nice.

00:15:54.720 --> 00:16:01.320
I wasn't sure I would have wanted to use it. I'm like, oh, this is interesting. And people might, then I installed it. I'm like, oh, this is, this is pretty cool. I like it.

00:16:01.320 --> 00:16:16.020
You know, all the cool stuff I like in Python, like PyM and PipX and things like that. They all have a section about using this with fish, you know? And so I'm always taunted with my lack of foo when it comes to terminals.

00:16:16.120 --> 00:16:23.040
Yeah. Yeah. I made the switch to Z shell. Oh my Z shell. I'm not looking back. Love it. All right. Patrick.

00:16:23.040 --> 00:16:32.260
We'll be out in the live stream says McFly seems really interesting. I'm using Z shell for a month now and always thought the control R search lacks features compared to other plugins for sure. Absolutely.

00:16:32.840 --> 00:16:41.180
And then David, pooch on out there says you covered that LS joke in the show. Yeah. That's beautiful. I love that one. It's been a couple of years, I think, but it was a good one.

00:16:41.180 --> 00:16:47.120
Well, we don't have a joke history command. So yeah. Oh, McLaugh. He's writing McLaugh.

00:16:50.620 --> 00:16:54.540
Something we never cover on the show is textual. So why don't you tell us about that, Paul?

00:16:54.540 --> 00:17:14.300
Sure. switching over to me. Yep. We got me. I think it was episode two 41 when you had Brett on and Brian led with Will McGooghan talking about rich and I'll, I'll quote Brian because it was funny then. And it's funny now. how can I not have heard of it?

00:17:14.340 --> 00:17:36.820
I'm a fan of the podcast and Brian loves this tool. So I'm going to go back to the well with the thing that was spun out of rich at that time textual, which has been covered. But I want to talk about a particular aspect of it. It was kind of interesting to me as a pattern. And then have a little debate where the two of you tell me that I'm wrong. and really ancient about this.

00:17:36.820 --> 00:17:58.060
So, I've traditionally been against the convention over configuration camp in the world of Python. I come out of kind of the Zope tradition, the pyramid tradition pyramid is like, oh yeah, well, here's a configurator object. And it does 15 trillion things that you really ought to care about, but don't.

00:17:58.060 --> 00:18:24.840
Because Chris McDonough has really great design sense, kind of Goldilocks knows exactly what to put in and leave out. And I just, that whole worldview fits into my head. And so I have this dislike about magic names, magic file names, magic variable names, can't auto complete them, can't refactor, can't navigate. If you can't memorize it and keep it all in your head, you know, and Python is explicit over implicit, blah, blah, blah.

00:18:25.060 --> 00:18:43.800
Um, I prefer like actual symbols that smart editors can operate on and not have like is a little bit that's going on with data classes right now. Each individual tool having to wire up special support for that template language or that this, that, or the other thing to look for these magic hand waves.

00:18:43.800 --> 00:19:02.460
So, we'll have this thread and actually I should bring the thread up. we'll have this thread on Twitter, which made me feel a, like I was a little bit wrong and be like he had solved some of the issues that I had with it.

00:19:02.460 --> 00:19:14.140
So what he wanted to do was remove some boilerplate. And in this, he gave some examples about before and after, here's the screenshot of it.

00:19:14.140 --> 00:19:22.620
So that's before. And you see like in here, watch how much this changes when you go to this.

00:19:22.620 --> 00:19:28.000
So kind of the noise, the ceremony, a lot of the stuff was reduced.

00:19:28.200 --> 00:19:28.680
Okay.

00:19:28.680 --> 00:19:50.400
Now anybody can look at this and say, wow, that's great. If you're optimizing for writing code, if you're optimizing for reading code and you want to walk back up to this later and know that there are some special semantics that, you know, then if the name starts with these three things, then the next thing is kind of a thing that is a, et cetera.

00:19:50.480 --> 00:19:58.560
And so I worry about, I worry about those kinds of things, but he had done it in a way where my pie would still help you some.

00:19:58.560 --> 00:20:09.720
And one of the innovations he had that I felt like, let's see, do you see, do you see me on Twitter? Nope, you don't. Cause I'm in the wrong window. Sorry about that.

00:20:09.720 --> 00:20:15.340
Okay. My apologies. So into the screenshot, you see a before and after Brian, you see that?

00:20:15.360 --> 00:20:15.760
Yeah.

00:20:15.760 --> 00:20:38.400
All right. Good. Before and after. And so he's talking about boilerplate removal in this thread and some of the decisions such as like this, for any of you that do type annotations, type hints, you'll look at this and you will say, oh goodness, the type hint went away.

00:20:38.400 --> 00:20:49.400
This is actually a perfect example. And you look at this and you think I just lost the typing information and I believe in type hinting. Well, not really because it can be inferred for, it can be deduced.

00:20:49.400 --> 00:20:54.440
Right. So for people listening, the example is you've got like a variable colon type equals.

00:20:54.440 --> 00:20:55.980
Oh yeah. Sorry. Yes. This is a podcast.

00:20:56.700 --> 00:21:09.100
You can instantiate the type versus just drop the type annotation on the variable. But when you're, when you're allocating up the object right there, like all the editors in my pyre, like, you know what thing equals new object.

00:21:09.100 --> 00:21:09.800
That's right.

00:21:09.800 --> 00:21:11.060
It could be that object.

00:21:11.060 --> 00:21:23.600
Yeah. And in these like titantic battles about type hinting, we forget that, well, you don't have to do all that typing all the time. Python and type checker static analysis can figure this kind of stuff out.

00:21:23.600 --> 00:21:36.420
So I looked at that and I was pretty, you know, I was probably kind of seduced by that. But let me ask the two of you, maybe the audience as well. Do you think that three months from now, if you walked up to your textual application,

00:21:36.600 --> 00:21:48.180
would you be able to remember that he had done these things and that the right hand side was telling you about the left hand side in order to save a little bit of typing?

00:21:48.180 --> 00:21:54.820
Did I lose a little bit down the road and have to load up my future self? What do you think about that?

00:21:54.820 --> 00:21:55.300
Right.

00:21:56.640 --> 00:22:10.740
Well, I'll tell you what I'll tell you what I think. Is there a separation of where this happens? Like on the example that you're showing here, like object or variable equals new object. I never need help with that. I get super clear what that type is all the time.

00:22:11.400 --> 00:22:22.680
Where it becomes not so obvious to me is where I've got like a class or something and it's got a field and then I'm creating that object and passing it in.

00:22:22.680 --> 00:22:29.200
If my pie could still tell me, oh, this thing is one of these because the only time you ever use it is always passing this type.

00:22:29.400 --> 00:22:38.220
But that's a separate file and I'm not looking at it side by side. Then to me that like starts to add additional work for me to keep track of in my mind.

00:22:38.220 --> 00:22:49.380
The other one I would say is the autocomplete test. If I'm working with thing, I say variable dot and it goes, zoom, there's the list of things. There's a good chance I don't care about anything else.

00:22:49.380 --> 00:22:57.960
Right. Like did it autocomplete the thing? And did it tell me if I put the wrong property field, whatever on it, because it knows what that list is. Right.

00:22:58.160 --> 00:23:00.860
And if the magic name changes later, will I get a red squiggle?

00:23:00.860 --> 00:23:07.100
Yes, exactly. Will the editor know that it was broken and will it help me write it so I don't have to look at the docs?

00:23:07.100 --> 00:23:13.100
I don't have to go to the source. I just use variable dot and I just keep rocking until I really need to understand something.

00:23:13.100 --> 00:23:13.600
Yeah.

00:23:13.600 --> 00:23:17.060
I would say that that's where I come down on it.

00:23:17.060 --> 00:23:27.360
The third thing is, if this is not relevant here necessarily, but if you're doing something like SQLAlchemy or Mongo Engine or Django ORM, so often what they do is they

00:23:27.360 --> 00:23:29.980
have like two flavors of the thing.

00:23:29.980 --> 00:23:31.260
I'm creating a class.

00:23:31.260 --> 00:23:32.680
The class has a field.

00:23:32.680 --> 00:23:33.720
It's called email.

00:23:33.720 --> 00:23:34.420
Oh, wait, no.

00:23:34.420 --> 00:23:34.860
What is it?

00:23:34.860 --> 00:23:42.100
It's being set to a new Mongo Engine field of type string that has a regular expression on it.

00:23:42.100 --> 00:23:44.500
Wait, that's not what I get at runtime.

00:23:44.500 --> 00:23:45.880
At runtime, I get a string.

00:23:45.880 --> 00:23:48.000
At code time, I get this.

00:23:48.000 --> 00:24:08.420
So for those, I will say field colon type is string equals Mongo field is a Mongo string or whatever or SQLAlchemy column of type string because I want it to be explicit that it's not really what it says there because often the editors will give you column information, which doesn't make any sense.

00:24:08.420 --> 00:24:12.700
Anyway, that's a long answer, but I gave Brian some time to think about his position here.

00:24:13.780 --> 00:24:18.960
I'm actually just I'm very impressed with Will's design decisions on a lot of things.

00:24:18.960 --> 00:24:28.380
And I am like there may be some magic hidden in there, but I would rather have less code to look at.

00:24:28.380 --> 00:24:32.600
So less code to look at means less things to get wrong.

00:24:32.600 --> 00:24:33.680
As far as I'm concerned.

00:24:33.680 --> 00:24:38.300
I am coming down with you on this one.

00:24:38.300 --> 00:24:47.840
I've been working for a long time on kind of a long project about static analysis and Python templating that is driven by type hints.

00:24:47.840 --> 00:25:01.960
And looking at what he's done has made me step back and think, wow, there is some there's something some things you can do without throwing out type hinting that improves the readability and removes the boilerplate while keeping people on the rails.

00:25:02.520 --> 00:25:05.200
Back to what you said about Will's design decisions.

00:25:05.200 --> 00:25:10.480
Looking inside the code of textual is really fascinating to me.

00:25:10.480 --> 00:25:25.680
Fascinating enough that first today Will announced that he is changing his job status so that he can work for the next three months on open source completely rather than at night and is looking to meet a target for GitHub sponsorship.

00:25:26.180 --> 00:25:32.820
So let's all go out there and sponsor him so we can get these delicious looking treats that he keeps giving to us.

00:25:32.820 --> 00:25:37.820
But second, I'm interested enough that I want to join the freaking project and learn from him.

00:25:37.820 --> 00:25:39.960
I need a reactive system.

00:25:39.960 --> 00:25:41.120
He's got one.

00:25:41.120 --> 00:25:41.560
Yeah.

00:25:41.860 --> 00:25:44.520
I wouldn't even know how to write a test for it.

00:25:44.520 --> 00:25:45.740
And he's got that, too.

00:25:45.740 --> 00:25:47.860
So I'm with you on that.

00:25:47.860 --> 00:25:58.460
I love the way he writes his code, the way he talks about his thinking in public while being a gentle and encouraging public figure.

00:25:58.460 --> 00:25:58.960
Yeah.

00:25:58.960 --> 00:25:59.780
Well said.

00:25:59.780 --> 00:26:00.700
Absolutely.

00:26:00.700 --> 00:26:02.700
Well, very, very cool stuff.

00:26:02.780 --> 00:26:04.220
There's a lot of neat things coming out of there.

00:26:04.220 --> 00:26:07.200
And I think a lot of people's reactions are like astonishment.

00:26:07.200 --> 00:26:08.300
Like, wait, that's a terminal?

00:26:08.300 --> 00:26:09.920
That's insane that it does that.

00:26:09.920 --> 00:26:11.520
Yeah.

00:26:11.520 --> 00:26:12.700
Ah.

00:26:12.700 --> 00:26:14.400
On to the next.

00:26:14.400 --> 00:26:19.360
Speaking of testing, have either of you ever used DocTest?

00:26:19.360 --> 00:26:20.520
Paul?

00:26:20.520 --> 00:26:21.400
Yes, I have.

00:26:22.180 --> 00:26:33.820
So I, way back when, when I started blogging about testing, I thought it'd be fun to compare the test frameworks because I wrote my own.

00:26:33.820 --> 00:26:34.560
It wasn't fun.

00:26:34.560 --> 00:26:36.760
So I looked at unit test.

00:26:36.760 --> 00:26:37.860
I looked at DocTest.

00:26:37.860 --> 00:26:40.640
I looked at pytest and Nose also.

00:26:42.020 --> 00:26:53.700
And I, I actually thought, you know, maybe just, I didn't think it would go very far, but I tried to use DocTest as a, as a, end to end test tool.

00:26:53.700 --> 00:26:55.700
Um, it was difficult.

00:26:55.700 --> 00:26:59.980
Uh, and there's still some cool things about DocTest.

00:26:59.980 --> 00:27:07.540
So if, if people are unclear what DocTest is, DocTest is a, a package that's built into Python that you can write.

00:27:07.540 --> 00:27:13.320
You can use it by saying Python-M docTest and point it at a file, one of your source files.

00:27:13.320 --> 00:27:21.380
And within your doc strings, if you've got things that are like the, the three, I'll see if I've got it here.

00:27:21.380 --> 00:27:26.080
So the, the three arrows or something like the prompt, the Python repl.

00:27:26.080 --> 00:27:33.640
And you can type some examples in there and DocTest makes sure that the output really matches what you said.

00:27:33.640 --> 00:27:37.960
So DocTest will go through and make sure your code examples within your code actually work.

00:27:37.960 --> 00:27:40.740
This is a cool idea in principle.

00:27:40.740 --> 00:27:43.000
In practice, it's very painful.

00:27:43.000 --> 00:27:46.300
And, a lot of the pain points come around.

00:27:46.300 --> 00:27:48.000
Well, I forgot to import anything.

00:27:48.000 --> 00:27:54.300
So you have to, you have to include the imports in there, or I forgot to, there's a lot of stuff that can go wrong.

00:27:55.040 --> 00:27:59.420
Um, now pytest adds some things you can run docTest from pytest.

00:27:59.420 --> 00:28:00.020
It's pretty cool.

00:28:00.020 --> 00:28:06.440
What we're talking about now is a new project or a project new to me called xDocTest.

00:28:06.440 --> 00:28:10.980
And xDocTest, it's got a whole bunch of cool features.

00:28:10.980 --> 00:28:14.800
One of the things is docTest is a regex plate based thing.

00:28:14.860 --> 00:28:20.080
It, like, pulls out the string, finds the code, runs it, looks at the output, makes sure they match.

00:28:20.080 --> 00:28:25.920
xDocTest uses a, whatever the, the source tree thing.

00:28:25.920 --> 00:28:28.300
Um, abstract syntax tree.

00:28:28.300 --> 00:28:29.320
That's, that's it.

00:28:29.320 --> 00:28:30.880
Abstract syntax tree.

00:28:30.880 --> 00:28:32.340
Uh, yeah.

00:28:32.340 --> 00:28:34.480
Um, so it's actually parsing it better.

00:28:34.480 --> 00:28:37.680
And, there's a whole bunch of cool stuff you get with that.

00:28:38.040 --> 00:28:41.180
The thing that I re there's, there's some highlights in there.

00:28:41.180 --> 00:28:46.300
Like one of the things is, continue string continuation was pain, painful because you had

00:28:46.300 --> 00:28:49.180
to include the little angle bracket things.

00:28:49.180 --> 00:28:50.880
You don't have to do that with xDocTest.

00:28:50.880 --> 00:28:58.400
The thing that I love the most though, is, one of the defaults, in docTest is it

00:28:58.400 --> 00:29:01.160
does not do string normalize it white space normalization.

00:29:01.160 --> 00:29:03.860
You can turn it on, but it doesn't do it by default.

00:29:04.220 --> 00:29:08.040
xDocTest by default does white space normalization.

00:29:08.040 --> 00:29:15.640
What that means is if in my code, I cut and pasted stuff and added like a tab or a space

00:29:15.640 --> 00:29:21.320
at the end of my string, docTest will fail that because it's like, oh, that's, that string's

00:29:21.320 --> 00:29:23.020
not the same as white space at the end.

00:29:23.020 --> 00:29:25.940
I don't care about the white space at the end.

00:29:25.940 --> 00:29:30.640
So, one of the things that xDocTest is just fixes that right off the bat.

00:29:30.640 --> 00:29:32.800
So it's going to be way more pleasant just to work with.

00:29:33.060 --> 00:29:37.060
But there's a whole bunch of other cool features of this that it, that it brought in.

00:29:37.060 --> 00:29:42.220
It has a more sane skip, syntax, although they kind of had to read it for a while.

00:29:42.220 --> 00:29:47.440
You have to say plus skip to, to start the skipping and then minus skip to turn it off.

00:29:47.440 --> 00:29:49.000
Um, yeah, anyway.

00:29:49.000 --> 00:29:52.380
Um, but it's pretty, pretty neat and flexible.

00:29:52.380 --> 00:29:57.860
And I think if you're going to start out trying to do docTest stuff, I would totally use xDocTest.

00:29:58.020 --> 00:30:00.660
Plus it has a built-in pytest support.

00:30:00.660 --> 00:30:06.120
So if you have it installed, you can say pytest --xDocTest and run it on your code.

00:30:06.120 --> 00:30:07.080
It'll run fine.

00:30:07.180 --> 00:30:08.120
Yeah.

00:30:08.120 --> 00:30:08.760
Very nice.

00:30:08.760 --> 00:30:09.560
Paul, you've done.

00:30:09.560 --> 00:30:13.780
You are two for two on predicting what I was going to talk about.

00:30:13.780 --> 00:30:19.680
So, but I, what I really want to hear you do is say abstract syntax tree in a Daffy Duck voice.

00:30:19.680 --> 00:30:21.540
No.

00:30:21.540 --> 00:30:23.220
You.

00:30:23.220 --> 00:30:23.840
No way.

00:30:23.840 --> 00:30:25.260
That'll be in the bonus track.

00:30:25.260 --> 00:30:31.320
Brett Cannon made us sing a song, from like Ren and Stimpy or something like that.

00:30:31.320 --> 00:30:31.880
Oh my goodness.

00:30:31.880 --> 00:30:32.340
Ren and Stimpy.

00:30:32.540 --> 00:30:33.060
Yeah.

00:30:33.060 --> 00:30:33.860
Was it that it was?

00:30:33.860 --> 00:30:35.540
No, it was, pinky in the brain.

00:30:35.540 --> 00:30:36.020
That's what it was.

00:30:36.020 --> 00:30:36.400
Pinky in the brain.

00:30:36.400 --> 00:30:36.620
Yeah.

00:30:36.620 --> 00:30:37.260
Yeah.

00:30:37.260 --> 00:30:37.500
Yeah.

00:30:37.500 --> 00:30:40.060
It's all from the same general genre and era.

00:30:40.060 --> 00:30:42.620
We should do a Ren and Stimpy skit sometime.

00:30:42.620 --> 00:30:43.340
That would be fun.

00:30:43.340 --> 00:30:45.040
God, Ren and Stimpy was awesome.

00:30:45.040 --> 00:30:46.360
That was awesome.

00:30:46.360 --> 00:30:48.780
The peak of civilization.

00:30:48.780 --> 00:30:49.560
Yeah.

00:30:49.560 --> 00:30:50.640
The red button.

00:30:50.640 --> 00:30:51.260
Okay.

00:30:51.260 --> 00:30:52.300
Don't press it.

00:30:52.300 --> 00:30:53.680
All right.

00:30:53.680 --> 00:30:55.640
Uh, what's next?

00:30:55.640 --> 00:30:56.520
I'm next with this one.

00:30:56.520 --> 00:30:56.700
Okay.

00:30:57.060 --> 00:30:59.800
So I want to start with some code and then tell you more about it.

00:30:59.800 --> 00:31:03.440
I want to tell you the code and then you can think about how complicated is it and then

00:31:03.440 --> 00:31:04.140
what does this accomplish?

00:31:04.140 --> 00:31:05.780
So here's some Python code.

00:31:05.780 --> 00:31:07.180
It creates a little LED.

00:31:07.180 --> 00:31:08.600
It's for like some embedded thing.

00:31:08.600 --> 00:31:11.760
It imports the LED, imports time and imports random.

00:31:11.760 --> 00:31:15.800
It says LED equals LED number 17 while true.

00:31:15.800 --> 00:31:17.280
LED on sleep.

00:31:17.280 --> 00:31:17.680
One second.

00:31:17.680 --> 00:31:21.600
LED off sleep for between 45 and 60 minutes.

00:31:21.600 --> 00:31:22.960
That's the entire bit of code.

00:31:22.960 --> 00:31:23.760
What does it do?

00:31:24.220 --> 00:31:28.440
This is how I automated my standing desk with a Raspberry Pi.

00:31:28.440 --> 00:31:31.240
Pretty awesome, right?

00:31:31.240 --> 00:31:31.800
Yes.

00:31:31.800 --> 00:31:37.260
So this one comes to us from Joe Ridley.

00:31:37.260 --> 00:31:37.760
Ridley.

00:31:37.760 --> 00:31:38.560
Thank you, Joe.

00:31:38.560 --> 00:31:40.320
And this is by David Kong.

00:31:40.320 --> 00:31:44.560
It's apparently he's into sort of hacking his productivity in all sorts of ways.

00:31:44.560 --> 00:31:48.160
So we got a standup desk and he said, I have this cool automated standup desk.

00:31:48.160 --> 00:31:49.980
You can push a button for up, push a button for down.

00:31:49.980 --> 00:31:53.060
You have presets of like where you like the up, where you like the down.

00:31:53.700 --> 00:31:55.260
But he didn't press it very often.

00:31:55.260 --> 00:31:57.000
So he's like, well, why am I not pressing it?

00:31:57.000 --> 00:31:59.160
Because I am lazy and I want to stand up.

00:31:59.160 --> 00:32:01.840
And then so he put reminders on his phone.

00:32:01.840 --> 00:32:02.780
Says, you want to stand up?

00:32:02.780 --> 00:32:04.320
He goes, no, I don't want to stand up right now.

00:32:04.320 --> 00:32:06.480
And then he said, well, what if it just did it?

00:32:06.480 --> 00:32:08.420
And I had to like adjust to it, right?

00:32:08.420 --> 00:32:13.300
So he went along and there's like a couple of buttons, little programmable bits.

00:32:13.300 --> 00:32:19.760
And he just pried the faceplate off of the control surface of his automatic desk.

00:32:19.760 --> 00:32:21.140
You know, it was a works desk.

00:32:21.140 --> 00:32:22.480
So whatever if it breaks, I guess.

00:32:22.480 --> 00:32:24.060
Pry that off.

00:32:24.060 --> 00:32:27.020
And he just has a few little like pins in the back.

00:32:27.020 --> 00:32:29.360
And if you push the button down, it completes the circuit.

00:32:29.360 --> 00:32:32.000
And he's like, well, really, all I needed to do is stand up.

00:32:32.000 --> 00:32:34.860
I can push the sit down button when I'm tired of standing up again.

00:32:35.140 --> 00:32:37.720
And so I went through about like, how do I do this?

00:32:37.720 --> 00:32:43.480
I just need to connect something that will trigger electrical current on one of these bits here.

00:32:43.480 --> 00:32:49.020
So I said, well, maybe I could use some little like super micro thing, some small things.

00:32:49.020 --> 00:32:49.440
I said, you know what?

00:32:49.440 --> 00:32:52.180
Actually, for five bucks, I can get a Raspberry Pi Zero.

00:32:52.180 --> 00:32:57.480
And you'll go crazy, get a case and an SD card and all that from Adafruit for five bucks.

00:32:57.480 --> 00:32:59.480
And just write some Python code.

00:32:59.480 --> 00:33:04.740
And then you connect these little pin areas, like number 17, for example.

00:33:04.740 --> 00:33:06.200
to a circuit.

00:33:06.200 --> 00:33:11.880
And instead of turning on the LED, it just sends a current over to that little thing on the desk.

00:33:11.880 --> 00:33:12.740
And it'll make it go.

00:33:12.740 --> 00:33:13.320
Isn't that awesome?

00:33:13.320 --> 00:33:15.020
That's great.

00:33:15.020 --> 00:33:15.960
I want to do that.

00:33:15.960 --> 00:33:17.780
I need a standing desk first, though.

00:33:17.780 --> 00:33:18.500
I know.

00:33:18.500 --> 00:33:25.080
Here I am saying, Will, who is in the audience, has magic method names.

00:33:25.080 --> 00:33:26.220
How do I know?

00:33:26.220 --> 00:33:27.960
How can I tab complete?

00:33:27.960 --> 00:33:30.880
And this thing's like, hook it up to terminal 17.

00:33:30.880 --> 00:33:32.500
I mean, oh, okay, not 18.

00:33:32.500 --> 00:33:33.140
All right, great.

00:33:33.140 --> 00:33:33.900
Exactly.

00:33:34.180 --> 00:33:35.380
It's pretty janky.

00:33:35.380 --> 00:33:37.180
No, but that's great.

00:33:37.180 --> 00:33:38.600
That is, I've got a...

00:33:38.600 --> 00:33:39.620
You have a standing desk?

00:33:39.620 --> 00:33:40.600
Stand-up desk.

00:33:40.600 --> 00:33:44.560
It has a different brand, but it looks like the exact same panel.

00:33:44.560 --> 00:33:46.740
Well, stay tuned.

00:33:46.740 --> 00:33:50.620
So one of the things is, I don't really need a UI, but maybe just a terminal.

00:33:50.620 --> 00:33:52.060
And how do I talk to the Raspberry Pi?

00:33:52.060 --> 00:34:03.360
So David goes on to talk about how he set up an SSH shell over to his Raspberry Pi from his MacBook using a USB cable because it's on the desk anyway.

00:34:03.680 --> 00:34:07.300
And then just writes this little bit of code that I talked about, move desk.

00:34:07.300 --> 00:34:08.300
And off it goes.

00:34:08.300 --> 00:34:09.480
And off it goes.

00:34:09.480 --> 00:34:11.180
Soldered a few things together.

00:34:11.180 --> 00:34:14.380
And then just taped it to the bottom of the desk.

00:34:14.380 --> 00:34:16.100
And now you have it going.

00:34:16.100 --> 00:34:19.800
I would contend there's a few minor upgrades that should be added here.

00:34:19.800 --> 00:34:21.600
Maybe a time check.

00:34:21.820 --> 00:34:29.480
Like, you may freak a custodial person out if they come in the middle of the night and they go to get the...

00:34:29.480 --> 00:34:32.240
The clone army has been activated.

00:34:32.240 --> 00:34:32.880
Exactly.

00:34:32.880 --> 00:34:36.360
We're going to empty the trash bin under your desk and it goes...

00:34:36.360 --> 00:34:38.380
I mean, I would run for it.

00:34:38.380 --> 00:34:39.940
But if that were me.

00:34:39.940 --> 00:34:47.220
But, you know, so maybe like a web service call to check the time or just check the time and go, really just do this during work hours.

00:34:47.220 --> 00:34:49.220
And like, honestly, this was a pre-COVID thing.

00:34:49.740 --> 00:34:53.200
So it randomly raises and lowers it or...

00:34:53.200 --> 00:34:53.440
Yes.

00:34:53.440 --> 00:34:56.320
Between 45 and 60 minutes on the hour.

00:34:56.320 --> 00:34:57.040
Okay.

00:34:57.040 --> 00:34:58.400
That is fabulous.

00:34:58.400 --> 00:34:59.220
Yeah.

00:34:59.220 --> 00:35:02.880
If you look at the comments here, this is where you got to hang tight, Paul.

00:35:02.880 --> 00:35:04.600
So people are digging it.

00:35:04.600 --> 00:35:10.700
Someone down here a little bit further says, I have something called a VeriDesk.

00:35:10.700 --> 00:35:16.340
But it turns out when I peeled the front off of my VeriDesk, it had exactly the same control board on the inside.

00:35:16.340 --> 00:35:17.500
How about that?

00:35:17.840 --> 00:35:18.040
Yeah.

00:35:18.040 --> 00:35:22.840
So, Paul, if it looks the same, it may well be the same because someone else was saying that they did.

00:35:22.840 --> 00:35:24.780
Now my desk is going to be smarter than me.

00:35:24.780 --> 00:35:28.200
I mean, I've gotten used to my watch being smarter than me.

00:35:28.200 --> 00:35:32.340
It will just have more willpower than you because you're like, I don't really want to stand up.

00:35:32.340 --> 00:35:33.860
Well, I can't reach it anymore.

00:35:33.860 --> 00:35:34.660
So I got to stand up.

00:35:34.660 --> 00:35:35.720
The Fox and the Hedgehog.

00:35:35.720 --> 00:35:37.100
Yeah, exactly.

00:35:37.580 --> 00:35:37.720
All right.

00:35:37.720 --> 00:35:38.240
Well, that's all.

00:35:38.240 --> 00:35:44.120
But I thought it was a, I'm always thinking of like, we have these super cool devices that cost like five bucks and it's, they're so easy to program.

00:35:44.120 --> 00:35:46.200
But I just, I don't usually have anything cool to do with them.

00:35:46.200 --> 00:35:48.120
And this seems entirely attainable.

00:35:48.120 --> 00:35:48.660
Yeah.

00:35:49.000 --> 00:35:56.920
I think maybe hooking up a height adjustment with random adjustment to my webcam would be cool.

00:35:56.920 --> 00:35:59.500
So I could just have different angles throughout the day.

00:35:59.500 --> 00:36:05.880
What if there's like a pulley system that if you, that after a moment yanks the chair and if you don't get up, it's just going to dump you.

00:36:05.880 --> 00:36:08.400
Like a little bit more urgency to the network.

00:36:08.400 --> 00:36:09.400
Exactly.

00:36:09.400 --> 00:36:12.960
Or score a gun if it finds you're still sitting or something.

00:36:12.960 --> 00:36:15.180
Puts my coffee slightly farther away.

00:36:15.180 --> 00:36:15.960
Exactly.

00:36:15.960 --> 00:36:17.600
All right.

00:36:17.600 --> 00:36:18.640
Paul, what's your last one?

00:36:18.640 --> 00:36:21.460
This was a really interesting one for me.

00:36:21.460 --> 00:36:26.220
I was on vacation in heaven in August.

00:36:26.220 --> 00:36:32.840
And two things I did was when I was at the beach, I had the beta of Brian's book.

00:36:33.280 --> 00:36:46.840
And when I was back at my mother-in-law's house, I was taking my six related Python projects and teleporting them into the future using the hypermodern Python cookie cutter.

00:36:46.840 --> 00:36:48.920
And what do I mean by that?

00:36:48.920 --> 00:36:59.920
Well, if you're doing a Python package, a library or something that you're going to distribute on PyPI, you know, Python development's gotten, the bar has been raised.

00:37:00.020 --> 00:37:04.000
Let's put it that way, on quality control and tooling and things like that.

00:37:04.000 --> 00:37:15.660
And my good friend, Brian Okken, long ago, 10 minutes, mentioned about xDocTest, which is also on here, I believe.

00:37:15.660 --> 00:37:16.760
Yeah, xDocTest.

00:37:16.760 --> 00:37:27.880
Along with 57 other things you might want to do, like Dependabot and Flake 8 and PreCommit and mypy and Black and GitHub Actions and all these other things.

00:37:27.880 --> 00:37:31.240
And individually, they're achievable.

00:37:31.240 --> 00:37:38.060
Collectively, they are a go on vacation in heaven, delete your repository and start over.

00:37:38.060 --> 00:37:39.100
That's what I did.

00:37:39.100 --> 00:37:44.580
I deleted all my repositories and started over with poetry and things like that.

00:37:44.580 --> 00:37:52.640
This cookie cutter isn't just great because it's a cookie cutter that gets you in the ballpark out of the box.

00:37:52.640 --> 00:37:59.620
It is a user guide that explains all the decisions made, including the why.

00:37:59.620 --> 00:38:07.320
It's like teaching you how to become a modern Python packager programmer, someone who's going to distribute stuff.

00:38:07.320 --> 00:38:13.140
And in fact, there was a blog, a series of blog articles before he did this.

00:38:13.800 --> 00:38:15.320
Let's see if I can find that.

00:38:15.320 --> 00:38:15.760
Yeah.

00:38:15.760 --> 00:38:19.980
So often you'll see these articles of what you should do and then you just have to go do it.

00:38:19.980 --> 00:38:21.500
And this is like, here's what you should do.

00:38:21.500 --> 00:38:21.940
Indeed.

00:38:21.940 --> 00:38:24.120
And then you run this command and then it's done.

00:38:24.120 --> 00:38:25.300
But now you know why.

00:38:25.300 --> 00:38:26.080
Indeed.

00:38:26.080 --> 00:38:30.680
And in fact, I found the part you just described to be more valuable than the cookie cutter.

00:38:30.680 --> 00:38:31.320
Yeah.

00:38:31.860 --> 00:38:38.000
Because the last thing I wanted was to be teleported into 57 things I didn't understand.

00:38:38.000 --> 00:38:39.080
Yeah.

00:38:39.080 --> 00:38:47.460
And so just for the two of you, if you could look through that list, maybe anybody in the audience look through that list.

00:38:47.460 --> 00:38:49.840
How many of these are things?

00:38:49.840 --> 00:38:52.640
Brian, you've been distributing packages recently.

00:38:52.860 --> 00:38:58.980
How many of these things are in your list of guilt that you're not doing?

00:38:58.980 --> 00:38:59.440
Yeah.

00:38:59.440 --> 00:39:01.980
No, a lot of these are great.

00:39:01.980 --> 00:39:03.720
Some of these I'd like to add.

00:39:03.720 --> 00:39:06.240
I'm not doing much type checking.

00:39:06.240 --> 00:39:07.700
I'd like to do more type checking.

00:39:07.700 --> 00:39:08.040
Sure.

00:39:08.040 --> 00:39:09.420
I don't.

00:39:09.420 --> 00:39:11.980
Some of the choices, I just don't agree with the choices.

00:39:11.980 --> 00:39:16.600
So I was actually considering doing a fork of this with the choices that I would have made.

00:39:16.600 --> 00:39:20.740
Knox is a cool project, but I've got no problem with Knox.

00:39:20.740 --> 00:39:23.160
Yes, I knew you would say that and I agree with you.

00:39:23.160 --> 00:39:24.660
I would change that too.

00:39:24.660 --> 00:39:26.600
And I know you said you like poetry.

00:39:26.600 --> 00:39:28.740
I know a lot of people love poetry.

00:39:28.740 --> 00:39:31.660
It just doesn't fit my brain, so I don't use poetry.

00:39:31.660 --> 00:39:32.720
But that's all right.

00:39:32.720 --> 00:39:33.640
I'm only 50-50 on it.

00:39:33.640 --> 00:39:34.620
I'm fighting it.

00:39:34.620 --> 00:39:41.180
But a whole bunch of other stuff, like you said, things that maybe you didn't consider, like black and prettier.

00:39:41.180 --> 00:39:42.640
I don't think I use both.

00:39:42.640 --> 00:39:45.420
So I don't know what prettier gives me that black doesn't.

00:39:45.420 --> 00:39:49.860
JavaScript and markdown-y things like that, JSON files, non-Python.

00:39:49.860 --> 00:39:50.680
Oh, okay.

00:39:51.180 --> 00:39:53.060
Don't know what release drafter is.

00:39:53.060 --> 00:39:53.700
That looks neat.

00:39:53.700 --> 00:40:00.440
The whole release drafter thing, I don't know if either of you have ever looked at release note automation in Python.

00:40:00.440 --> 00:40:03.520
But there's a number of packages, semi-dead.

00:40:04.000 --> 00:40:12.640
And most of them result in this dance of if you push before this thing runs, you can't get your notes on the tag.

00:40:12.640 --> 00:40:13.220
Yeah.

00:40:13.220 --> 00:40:13.860
Okay.

00:40:13.860 --> 00:40:25.580
And so this is hooked up with a GitHub action, which makes a draft of your release notes for you as part of the merging a pull request to bump the version number process.

00:40:25.580 --> 00:40:26.700
It's just fascinating.

00:40:27.040 --> 00:40:29.040
I would have never figured this out, man.

00:40:29.040 --> 00:40:29.580
Never.

00:40:29.580 --> 00:40:30.280
Okay.

00:40:30.280 --> 00:40:31.680
We got some cool comments.

00:40:31.680 --> 00:40:33.200
One here.

00:40:33.200 --> 00:40:35.800
It's not as from Exxon.

00:40:35.800 --> 00:40:37.700
Yeah, that's a good point.

00:40:37.700 --> 00:40:40.260
It's not as hyper modern as the title suggests.

00:40:40.260 --> 00:40:41.860
It's often pretty solid advice.

00:40:42.420 --> 00:40:47.160
I'm not sure if what he means by solid is a compliment or an insult.

00:40:47.160 --> 00:40:47.880
I'm not sure.

00:40:47.880 --> 00:40:49.420
I think what he means is hyper modern.

00:40:49.420 --> 00:40:56.380
At least when I read it, I was like, the last thing on earth I want is bleeding edge on this stuff.

00:40:56.380 --> 00:41:00.820
And then also, list of guilt would be a good title for this.

00:41:00.820 --> 00:41:01.660
Yes.

00:41:03.080 --> 00:41:06.020
One of the things I want to point out the article series.

00:41:06.020 --> 00:41:10.980
So at the top of this, what we're going to link to, it links to hyper modern Python.

00:41:10.980 --> 00:41:12.160
It's a list of articles.

00:41:12.160 --> 00:41:15.260
The artwork in this is amazing.

00:41:15.260 --> 00:41:18.580
So he's using some freely available artwork.

00:41:18.580 --> 00:41:19.440
It's really cool.

00:41:19.440 --> 00:41:19.860
It's a clunky thing.

00:41:19.860 --> 00:41:21.040
Yeah.

00:41:21.040 --> 00:41:21.740
Well said.

00:41:21.740 --> 00:41:23.520
Did you read any of the articles, Brian?

00:41:23.520 --> 00:41:30.020
Well, I read all of them when they first appeared, but it looks like there's some newer articles that I haven't read yet.

00:41:30.020 --> 00:41:30.840
Yep.

00:41:30.840 --> 00:41:31.220
Yep.

00:41:31.620 --> 00:41:35.020
So Claudio, mega kudos.

00:41:35.020 --> 00:41:37.800
That's another project I should join because there's a couple.

00:41:37.800 --> 00:41:44.100
I would like to teleport him from Sphinx restructured text to Sphinx markdown.

00:41:44.100 --> 00:41:45.640
Oh, yeah, definitely.

00:41:45.640 --> 00:41:52.520
Which is what I've done in my, each time I did this, I did a commit immediately to replace it.

00:41:52.520 --> 00:41:53.860
And it's a little bit of work.

00:41:53.860 --> 00:41:56.640
And so it's a contribution I could actually make.

00:41:56.640 --> 00:41:57.200
Yeah.

00:41:57.200 --> 00:42:00.000
Sphinx markdown is the reason why I use Sphinx now.

00:42:00.000 --> 00:42:00.860
Very good.

00:42:01.180 --> 00:42:01.640
Very good.

00:42:01.640 --> 00:42:04.720
So one last thing I'll close with on the X-Doc test, Brian.

00:42:05.400 --> 00:42:08.620
I was using it from Hypermodern cookie cutter.

00:42:08.620 --> 00:42:13.020
And I switched to this from Chris Withers, Sybil.

00:42:13.020 --> 00:42:13.980
Sybil.

00:42:13.980 --> 00:42:14.820
Nice name.

00:42:14.820 --> 00:42:17.940
Which is, Chris is an old time Zopista.

00:42:17.940 --> 00:42:23.520
And so what he does is he lets you, this is not about dot strings in your code.

00:42:23.620 --> 00:42:29.100
This is about blocks in your Sphinx, blocks of code in your Sphinx and testing them.

00:42:29.100 --> 00:42:34.940
But you wind up with this doing something pie testy.

00:42:34.940 --> 00:42:41.160
And this lets you have fixtures and all these other things available in your doc test blocks.

00:42:41.380 --> 00:42:41.860
Cool.

00:42:41.860 --> 00:42:41.880
Cool.

00:42:41.880 --> 00:42:42.660
We'll check it out.

00:42:42.660 --> 00:42:43.120
Yeah.

00:42:43.120 --> 00:42:43.660
Yeah.

00:42:43.660 --> 00:42:44.800
Super, super cool.

00:42:44.800 --> 00:42:49.700
And actually on said solid was intended as a compliment there.

00:42:49.700 --> 00:42:49.920
Yeah.

00:42:49.920 --> 00:42:50.340
Very nice.

00:42:50.340 --> 00:42:51.440
All right.

00:42:51.440 --> 00:42:53.480
Brian, you got any extras to wrap it up?

00:42:53.880 --> 00:42:55.520
I don't other than just an apology.

00:42:55.520 --> 00:42:58.560
Sorry about the solid comment.

00:42:58.560 --> 00:42:59.400
Oh, well.

00:42:59.400 --> 00:42:59.940
I know.

00:42:59.940 --> 00:43:00.400
That was good.

00:43:00.400 --> 00:43:01.140
Paul?

00:43:01.140 --> 00:43:01.440
That was good.

00:43:01.440 --> 00:43:02.280
Anything else?

00:43:02.280 --> 00:43:02.960
Yeah.

00:43:02.960 --> 00:43:13.460
I had a chance, I guess at the end of last week, if you've been to PyCon before, you'll know

00:43:13.460 --> 00:43:15.960
some of the folks in the PSF.

00:43:15.960 --> 00:43:22.180
Bessie Walshowski, who has been with the PSF forever and ever, was with O'Reilly before that.

00:43:22.180 --> 00:43:26.200
She is now with OSI, the Open Society.

00:43:26.200 --> 00:43:28.860
God, I know I would say that.

00:43:28.860 --> 00:43:30.320
Open Source Institute.

00:43:30.320 --> 00:43:35.360
I spent 10 years on a project with the Open Society Institute, the other OSI.

00:43:35.360 --> 00:43:43.400
And she is working with OSI on their messaging and fundraising and things like that.

00:43:43.400 --> 00:43:49.700
And it's a very interesting problem for us in the Python community that's similar to the

00:43:49.700 --> 00:43:58.120
problem we had with the PSF, getting people to pay for the comments, if that makes sense.

00:43:58.120 --> 00:44:04.120
Now, the comments for the world of open source is a lot squishier.

00:44:04.240 --> 00:44:09.080
And the value proposition is a lot more indirect relative to the world of Python.

00:44:09.080 --> 00:44:17.840
But I feel like there is a big there there that the world of open source is still relevant

00:44:17.840 --> 00:44:21.140
and still has important next problems.

00:44:21.140 --> 00:44:22.900
There is a commons.

00:44:22.900 --> 00:44:25.920
There are things that will need to be done.

00:44:25.920 --> 00:44:34.680
And we need a neutral agency that is an advocate for the commons to to work on things like that.

00:44:34.680 --> 00:44:40.380
So she and I discussed what's next for the commons, things going on at OSI.

00:44:40.380 --> 00:44:47.420
If any of you were around in the beginning of the words open source, you know, the problems

00:44:47.420 --> 00:44:48.840
that were being solved then.

00:44:48.840 --> 00:44:51.380
They feel like solved problems now.

00:44:51.380 --> 00:44:52.860
But that's an open question.

00:44:52.860 --> 00:44:55.780
And sometimes problems don't have a way of staying solved.

00:44:55.780 --> 00:44:58.980
So keep an eye on OSI.

00:44:58.980 --> 00:45:02.540
Keep an eye on what Betsy and Stefano and others are doing.

00:45:02.540 --> 00:45:09.720
Keep an eye on open source itself and maybe share some thoughts in the show notes or anything

00:45:09.720 --> 00:45:10.220
like that.

00:45:10.220 --> 00:45:13.980
What do you think is the big mission for open source?

00:45:13.980 --> 00:45:14.500
Yeah.

00:45:14.500 --> 00:45:18.780
Maybe you reply to the Twitter thread announcing this episode, which will be out shortly.

00:45:18.780 --> 00:45:23.220
That probably the best place or the YouTube, the YouTube live stream chat would be good.

00:45:23.220 --> 00:45:24.400
Good places for that.

00:45:24.400 --> 00:45:25.840
How about you, Michael?

00:45:25.840 --> 00:45:27.340
Do you have any extra bits?

00:45:27.340 --> 00:45:28.360
You know, I do.

00:45:30.100 --> 00:45:33.400
First of all, I want to just really quickly on the hypermodern thing throughout.

00:45:33.400 --> 00:45:35.420
Remember, we talked about readme.so?

00:45:35.420 --> 00:45:36.840
Oh, yeah.

00:45:36.840 --> 00:45:37.220
Gosh.

00:45:37.220 --> 00:45:38.940
And this is readme as a service.

00:45:38.940 --> 00:45:40.800
This is good to generate your readme.

00:45:40.800 --> 00:45:43.400
And then you can use the release note thing to keep it going.

00:45:43.400 --> 00:45:46.840
So, yeah, I just want to give another shout out to that because the idea of readme as a

00:45:46.840 --> 00:45:47.980
service blew my mind.

00:45:47.980 --> 00:45:48.840
Does it do badges?

00:45:48.840 --> 00:45:50.580
God, badges are so hard.

00:45:50.580 --> 00:45:51.120
I know.

00:45:51.120 --> 00:45:52.580
If it doesn't do badges, it better.

00:45:52.580 --> 00:45:54.020
That would be an awesome upgrade.

00:45:54.020 --> 00:45:54.480
Okay.

00:45:54.480 --> 00:45:56.960
A couple of quick things I want to throw a shout out to.

00:45:56.960 --> 00:45:58.500
These are at the bottom of the show notes.

00:45:58.500 --> 00:46:05.340
Active States, you know, they're one of the packages, distributors of more full featured,

00:46:05.340 --> 00:46:08.380
holistic sort of prepackaged Python distributions.

00:46:08.380 --> 00:46:15.660
They are running a survey called the Software Supply Chain Security Survey to, you know, supply

00:46:15.660 --> 00:46:17.660
chain security of like pip vulnerabilities.

00:46:17.660 --> 00:46:23.940
IPI package pollution vulnerabilities and stuff like that are big deals.

00:46:23.940 --> 00:46:25.620
So they're interested in running a survey.

00:46:25.620 --> 00:46:27.900
So I thought I'd give a shout out about that.

00:46:27.900 --> 00:46:28.900
People can fill that out.

00:46:28.900 --> 00:46:37.500
Python 397 and 3812 are out with, I think 397 might have some very minor new things.

00:46:37.500 --> 00:46:39.620
And 38 is just a security update.

00:46:39.620 --> 00:46:40.960
So bug fixes.

00:46:40.960 --> 00:46:45.700
But the 391 didn't speak to me as anything super major, but you might check it out.

00:46:45.700 --> 00:46:51.680
There's a few security things in there about like, if you pass this to like the IP class

00:46:51.680 --> 00:46:56.140
or something like that, it could be an issue, but I don't really think there's anything super

00:46:56.140 --> 00:46:56.600
important there.

00:46:56.600 --> 00:46:57.740
But no.

00:46:57.740 --> 00:47:00.680
Brian, this one, let me read the little description for you.

00:47:00.680 --> 00:47:04.340
This one here comes from Shlomi Lanton.

00:47:04.340 --> 00:47:10.720
Does Brian, you talked about having a history of all the files and a GitHub repo and finding

00:47:10.720 --> 00:47:14.020
out how long the oldest one, like we were just looking around, like how old is this project?

00:47:14.160 --> 00:47:15.880
Maybe two years looks like lasting change.

00:47:15.880 --> 00:47:18.880
So he wrote a thing called grandpa.

00:47:18.880 --> 00:47:25.560
And the idea is simply find the oldest modified files in the repo that you can run it standalone.

00:47:25.560 --> 00:47:27.960
You can make it a GitHub action and so on.

00:47:27.960 --> 00:47:30.120
So it just goes through and finds the oldest files.

00:47:30.120 --> 00:47:35.500
Last week, I talked about wake pi, which will let you keep a process awake.

00:47:35.500 --> 00:47:38.720
No, keep your computer awake while your process, your Python process is running.

00:47:39.040 --> 00:47:43.640
You do like a context manager, you know, with keep awake, do the stuff you don't want the

00:47:43.640 --> 00:47:44.800
computer to go to sleep during.

00:47:44.800 --> 00:47:47.060
And then when you leave the computer can go back to sleep.

00:47:47.060 --> 00:47:49.520
And I said that there was a problem on macOS.

00:47:49.520 --> 00:47:51.740
PR is accepted that things back to good.

00:47:51.740 --> 00:47:52.640
So thank you for that.

00:47:52.640 --> 00:47:56.040
Really quick shout out to some, oh my Z shell.

00:47:56.040 --> 00:47:56.840
Not my Z shell.

00:47:56.840 --> 00:47:58.020
Oh my posh shell.

00:47:58.020 --> 00:47:59.180
Look at all that good stuff, Brian.

00:47:59.540 --> 00:48:03.880
That's, that could be your, that could be your, power shell on windows.

00:48:03.880 --> 00:48:06.060
Does it have VI key bindings?

00:48:06.060 --> 00:48:07.480
If not, I can't use it.

00:48:07.480 --> 00:48:09.240
Just, I honestly don't know.

00:48:09.240 --> 00:48:15.400
Anyway, I think it's pretty cool, but people, and it's not just for power shell.

00:48:15.400 --> 00:48:19.080
It just happens to be one of these really nice extensions that also works for power shell.

00:48:19.080 --> 00:48:19.740
Oh really?

00:48:19.740 --> 00:48:20.280
Yeah.

00:48:20.280 --> 00:48:21.020
All right.

00:48:21.020 --> 00:48:22.900
It took me forever to know what posh meant.

00:48:22.900 --> 00:48:23.760
I'm like posh.

00:48:23.760 --> 00:48:25.040
What, what shell is that?

00:48:25.040 --> 00:48:27.180
Posh is power shell, right?

00:48:27.180 --> 00:48:29.200
I, it probably is actually.

00:48:29.260 --> 00:48:30.080
Yeah, it probably is.

00:48:30.080 --> 00:48:32.120
It sounds cooler than power shell though.

00:48:32.120 --> 00:48:32.720
Okay.

00:48:32.720 --> 00:48:33.880
Cool.

00:48:33.880 --> 00:48:34.040
Cool.

00:48:34.040 --> 00:48:34.500
All right.

00:48:34.500 --> 00:48:36.340
Uh, I think that's it for, for those.

00:48:36.340 --> 00:48:37.500
Are y'all ready for a joke?

00:48:37.500 --> 00:48:38.320
Yes.

00:48:38.320 --> 00:48:39.120
All right.

00:48:39.120 --> 00:48:39.540
Here we go.

00:48:39.540 --> 00:48:43.500
So here's a tweet from monkey user at is monkey user.

00:48:43.500 --> 00:48:44.520
And they have a mess.

00:48:44.520 --> 00:48:48.080
They have like a, this sort of planning diagram here, like a flow chart.

00:48:48.080 --> 00:48:50.640
If you will remember a flow chart, but there's like real high level.

00:48:50.640 --> 00:48:55.040
And it's about trying to find, a meaning and as a software developer.

00:48:55.040 --> 00:48:58.740
So if the person enters to the workflow, quit.

00:48:58.980 --> 00:48:59.620
Question mark.

00:48:59.620 --> 00:49:00.640
Yes or no.

00:49:00.640 --> 00:49:01.580
Yes.

00:49:01.580 --> 00:49:02.800
Do you have paid time off?

00:49:02.800 --> 00:49:09.700
Then, then what you can do, is you can go in and you change your JavaScript.

00:49:09.700 --> 00:49:10.500
I think it's JavaScript.

00:49:10.500 --> 00:49:11.760
Change your JavaScript framework.

00:49:11.760 --> 00:49:13.100
Do you acquire new skills?

00:49:13.100 --> 00:49:13.880
Are you burnt out?

00:49:13.880 --> 00:49:15.000
No.

00:49:15.000 --> 00:49:15.880
You go back.

00:49:15.880 --> 00:49:18.200
You change your JavaScript framework again.

00:49:18.200 --> 00:49:19.120
It's a little starving.

00:49:19.120 --> 00:49:21.960
Have you changed your JavaScript framework in the last two, two months?

00:49:22.080 --> 00:49:25.040
If, if, no, then you need to change it again.

00:49:25.040 --> 00:49:26.060
It burns.

00:49:26.060 --> 00:49:26.860
It burns.

00:49:26.860 --> 00:49:27.380
Yeah.

00:49:27.380 --> 00:49:29.160
You've got some, some backlog here.

00:49:29.160 --> 00:49:30.940
It goes to in progress and that gets shipped.

00:49:30.940 --> 00:49:31.480
It gets done.

00:49:31.480 --> 00:49:32.040
You get paid.

00:49:32.040 --> 00:49:32.580
Do you have burnout?

00:49:32.580 --> 00:49:33.040
Yes.

00:49:33.040 --> 00:49:34.060
Are you dead?

00:49:34.060 --> 00:49:34.680
Whoops.

00:49:34.800 --> 00:49:35.300
Not yet.

00:49:35.300 --> 00:49:36.300
Do you have paid time off?

00:49:36.300 --> 00:49:38.040
Then you can change your JavaScript framework again.

00:49:38.040 --> 00:49:38.720
No.

00:49:38.720 --> 00:49:41.460
Then you ask, have it, has it changed in two months?

00:49:41.460 --> 00:49:43.600
If, no, then you change it again.

00:49:43.600 --> 00:49:44.820
Otherwise you go to the backlog.

00:49:45.100 --> 00:49:49.380
And I thought this part right here, Ryan, you might particularly like, is it ready for QA?

00:49:49.380 --> 00:49:50.620
Nothing goes to that.

00:49:50.620 --> 00:49:57.480
It's just like an orphaned input box right there.

00:49:57.480 --> 00:50:01.100
This should be, this should be the logo for HTMX.

00:50:01.100 --> 00:50:02.680
Yes, it actually should.

00:50:02.680 --> 00:50:02.880
Yeah.

00:50:02.880 --> 00:50:03.640
This would be awesome.

00:50:03.640 --> 00:50:06.380
Cause it really, it just tells you the churn.

00:50:06.380 --> 00:50:10.560
And another person walks up and says, Hey, are you, are you trying to find a new workflow

00:50:10.560 --> 00:50:11.480
for how we're working this?

00:50:11.480 --> 00:50:13.720
No, I'm trying to figure out why I'm still doing this.

00:50:14.140 --> 00:50:17.240
Well, there's, there's no way to go back to quit.

00:50:17.240 --> 00:50:22.440
And there's, yeah.

00:50:22.440 --> 00:50:22.720
Yeah.

00:50:22.720 --> 00:50:24.300
And you found the Easter egg.

00:50:24.300 --> 00:50:24.920
Yeah.

00:50:24.920 --> 00:50:28.540
Well, also why is there still a separate QA department?

00:50:28.540 --> 00:50:31.780
I love the leveraging of paid time off.

00:50:31.780 --> 00:50:35.080
Yeah.

00:50:35.080 --> 00:50:36.740
Backlog.

00:50:36.740 --> 00:50:38.400
Backlog is like an afterthought.

00:50:38.400 --> 00:50:41.760
If there's nothing else you can do, maybe you can work on the backlog.

00:50:41.760 --> 00:50:43.240
Yeah, exactly.

00:50:43.240 --> 00:50:45.220
Nice.

00:50:45.220 --> 00:50:45.620
Awesome.

00:50:45.620 --> 00:50:46.600
Well, thanks.

00:50:46.600 --> 00:50:47.020
That's it.

00:50:47.020 --> 00:50:47.280
Yeah.

00:50:47.280 --> 00:50:48.320
That's it for our show, Brian.

00:50:48.320 --> 00:50:48.760
Thank you.

00:50:48.760 --> 00:50:49.260
As always.

00:50:49.260 --> 00:50:50.000
Great to have you here.

00:50:50.000 --> 00:50:51.380
And Paul, thanks for joining us.

00:50:51.380 --> 00:50:52.500
Thanks for having me.

00:50:52.500 --> 00:50:53.200
Love the show.

00:50:53.200 --> 00:50:58.480
Love everything the two of you have been doing for the last few years and hope to tell you

00:50:58.480 --> 00:51:01.880
this in person soon, but probably not.

00:51:01.880 --> 00:51:02.100
Yeah.

00:51:02.100 --> 00:51:03.180
That's wrong.

00:51:03.540 --> 00:51:06.780
You said for me to interrupt you and tell you when you were wrong.

00:51:06.780 --> 00:51:07.960
I forgot to.

00:51:07.960 --> 00:51:09.200
Okay, great.

00:51:09.200 --> 00:51:11.180
Keep happy thoughts.

00:51:11.180 --> 00:51:14.640
Do you promise not to cut your hair until we see each other again?

00:51:14.640 --> 00:51:14.920
Yes.

00:51:14.920 --> 00:51:15.940
Yes.

00:51:16.420 --> 00:51:19.800
I want to be cousin it by next year at this time.

00:51:19.800 --> 00:51:23.400
Love it.

00:51:23.400 --> 00:51:23.960
All right.

00:51:23.960 --> 00:51:24.380
Bye.

00:51:24.380 --> 00:51:25.020
Bye, guys.

00:51:25.020 --> 00:51:26.920
Thanks for listening to Python Bytes.

00:51:26.920 --> 00:51:29.720
Follow the show on Twitter via at Python Bytes.

00:51:29.720 --> 00:51:32.860
That's Python Bytes as in B-Y-T-E-S.

00:51:32.860 --> 00:51:35.720
Get the full show notes over at pythonbytes.fm.

00:51:35.720 --> 00:51:40.640
If you have a news item we should cover, just visit pythonbytes.fm and click Submit in the

00:51:40.640 --> 00:51:41.080
nav bar.

00:51:41.080 --> 00:51:43.200
We're always on the lookout for sharing something cool.

00:51:43.200 --> 00:51:47.880
If you want to join us for the live recording, just visit the website and click Livestream to

00:51:47.880 --> 00:51:50.620
get notified of when our next episode goes live.

00:51:50.620 --> 00:51:55.020
That's usually happening at noon Pacific on Wednesdays over at YouTube.

00:51:55.020 --> 00:51:58.400
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:51:58.400 --> 00:52:02.120
Thank you for listening and sharing this podcast with your friends and colleagues.

