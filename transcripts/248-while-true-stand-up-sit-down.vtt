
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.360
to you by us over at TalkBython Training, and Brian through his PyTest book.


00:00:10.360 --> 00:00:15.460
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.460 --> 00:00:17.320
over at TalkBython Training.


00:00:17.320 --> 00:00:21.040
Visit them via pythonbytes.fm/courses.


00:00:21.040 --> 00:00:25.420
And if you're looking to do testing and get better with PyTest, check out Brian's book


00:00:25.420 --> 00:00:28.440
at pythonbytes.fm/pytest.


00:00:28.440 --> 00:00:29.440
Enjoy the episode.


00:00:29.440 --> 00:00:33.440
Hello and welcome to Python Bytes where we deliver Python news and headlines directly


00:00:33.440 --> 00:00:42.120
to your earbuds. This is episode 248 recorded September 1st, 2021. Gasp, it's summer over.


00:00:42.120 --> 00:00:43.120
I'm Michael Kennedy.


00:00:43.120 --> 00:00:44.120
>> I'm Brian Okken.


00:00:44.120 --> 00:00:45.120
>> I'm Paul Everett.


00:00:45.120 --> 00:00:46.120
>> Yay, Paul Everett's here.


00:00:46.120 --> 00:00:47.120
>> Yay.


00:00:47.120 --> 00:00:48.120
>> Welcome, Paul.


00:00:48.120 --> 00:00:51.040
>> Joy to be here. Long time listener, first time caller.


00:00:51.040 --> 00:00:55.160
>> Yeah. I think you made an appearance in the previous show in the live chat, but now


00:00:55.160 --> 00:00:56.160
you're --


00:00:56.160 --> 00:00:57.160
>> Oh, yes, the live -- yeah, true. The live chat.


00:00:57.160 --> 00:00:58.840
or possibly a talk Python, I can't remember.


00:00:58.840 --> 00:00:59.680
It all blurs together.


00:00:59.680 --> 00:01:01.280
- I wasn't as prepared as this one.


00:01:01.280 --> 00:01:03.760
- No, now you're on the big stage.


00:01:03.760 --> 00:01:05.320
So thank you for being here.


00:01:05.320 --> 00:01:07.540
You know, tell people about the things


00:01:07.540 --> 00:01:08.880
that you've been up to or what you're doing


00:01:08.880 --> 00:01:12.240
or who you are before we jump into our first topic.


00:01:12.240 --> 00:01:15.840
- I'm developer advocate at JetBrains for Python and web,


00:01:15.840 --> 00:01:17.720
which means PyCharm and WebStorm.


00:01:17.720 --> 00:01:21.080
What a great gig, love my job.


00:01:21.080 --> 00:01:23.000
I always joke that they should be,


00:01:23.000 --> 00:01:25.680
I should be paying them, but don't tell them I said that.


00:01:25.680 --> 00:01:30.680
And I'm just embarrassed that here I am on Python Bytes


00:01:30.680 --> 00:01:32.840
and I didn't get a haircut in time.


00:01:32.840 --> 00:01:35.720
I know this is a podcast, but there's a video version.


00:01:35.720 --> 00:01:36.560
- That's right.


00:01:36.560 --> 00:01:38.080
- Looking at Brian rocking the do,


00:01:38.080 --> 00:01:40.220
I feel like I should have been better prepared.


00:01:40.220 --> 00:01:43.920
- Yeah, Brian and I have alternate philosophies, I guess.


00:01:43.920 --> 00:01:46.040
I've got like the knight's neat hair


00:01:46.040 --> 00:01:47.480
and Brian's just embracing it.


00:01:47.480 --> 00:01:48.920
And yeah, I would do that too,


00:01:48.920 --> 00:01:51.360
except for mine just looks like a giant poofy thing


00:01:51.360 --> 00:01:52.720
on top of my head, it doesn't look cool.


00:01:52.720 --> 00:01:54.440
So yeah, not so much.


00:01:54.440 --> 00:01:55.680
- Oh, I wanna see that.


00:01:55.680 --> 00:01:57.960
- Yeah, it's amazingly bad, yeah.


00:01:57.960 --> 00:02:00.160
I've tried it, not amazing.


00:02:00.160 --> 00:02:01.560
All right, but you probably have something amazing


00:02:01.560 --> 00:02:03.360
to tell us about, right?


00:02:03.360 --> 00:02:04.880
- Well, I do.


00:02:04.880 --> 00:02:08.280
Actually, so this is an interesting article.


00:02:08.280 --> 00:02:10.640
I wanna talk about both Adders and Pydantic


00:02:10.640 --> 00:02:13.720
because we've talked about both of them on the show


00:02:13.720 --> 00:02:17.380
and they're both great libraries, I think.


00:02:17.380 --> 00:02:19.400
And so there's this article that I came across


00:02:19.400 --> 00:02:22.840
called "Why I Use Adders Instead of Pydantic."


00:02:22.840 --> 00:02:26.680
There's actually a lot more in here than just that.


00:02:26.680 --> 00:02:28.720
It was an interesting read.


00:02:28.720 --> 00:02:30.600
Starts out right off the bat,


00:02:30.600 --> 00:02:33.840
talking about basically one of the things that a lot of


00:02:33.840 --> 00:02:37.560
people think about with adders is,


00:02:37.560 --> 00:02:38.800
don't we have data classes?


00:02:38.800 --> 00:02:40.880
Do we need adders anymore?


00:02:40.880 --> 00:02:45.760
Starts out not talking about Pydantic,


00:02:45.760 --> 00:02:47.840
but talking about data classes.


00:02:47.840 --> 00:02:50.920
That data classes really came about as


00:02:50.920 --> 00:02:53.800
a subset of the Adders functionality.


00:02:53.800 --> 00:02:57.720
It's really pretty easy to go back to using Adders.


00:02:57.720 --> 00:03:00.760
If you're familiar with data classes, it should be easy.


00:03:00.760 --> 00:03:04.980
Actually, there's a lot of reasons to use Adders instead.


00:03:04.980 --> 00:03:07.880
For one, they're just faster,


00:03:07.880 --> 00:03:09.920
which I didn't know that they were faster.


00:03:09.920 --> 00:03:13.080
But there's some examples about a lot of


00:03:13.080 --> 00:03:15.060
the boilerplate stuff that goes into


00:03:15.060 --> 00:03:17.880
data classes that we don't really think about.


00:03:17.880 --> 00:03:20.200
But Adders is pretty tight.


00:03:20.200 --> 00:03:25.120
Also, Adders has more features and has some validation code


00:03:25.120 --> 00:03:28.240
that isn't around for data classes.


00:03:28.240 --> 00:03:34.360
That's interesting. Then getting into talking about Pydantic.


00:03:34.360 --> 00:03:40.280
I think of Adders as like data classes, but it does more.


00:03:40.280 --> 00:03:44.240
This author summarized Adders as


00:03:44.240 --> 00:03:48.080
a library for generating the boring parts of writing classes.


00:03:48.080 --> 00:03:50.420
>> Like the hash, the equals,


00:03:50.420 --> 00:03:52.260
the not equals, that kind of stuff, right?


00:03:52.260 --> 00:03:53.020
>> Yeah.


00:03:53.020 --> 00:03:53.700
>> Property.


00:03:53.700 --> 00:03:56.260
>> Also, like throwing in some validation if you want.


00:03:56.260 --> 00:03:57.860
So you can opt in.


00:03:57.860 --> 00:03:59.620
So putting in some validation,


00:03:59.620 --> 00:04:01.580
you can set that up.


00:04:01.580 --> 00:04:04.020
There's a lot of stuff that Adders does.


00:04:04.020 --> 00:04:05.420
I mean, it's a lot more than that.


00:04:05.420 --> 00:04:07.660
It's a pretty full library also.


00:04:07.660 --> 00:04:10.700
But what you get with Bidantic is you get


00:04:10.700 --> 00:04:14.020
that with the classes that Bidantic provides,


00:04:14.020 --> 00:04:16.600
but you also have the validation library


00:04:16.600 --> 00:04:19.200
and structuring and unstructuring,


00:04:19.200 --> 00:04:23.700
and conversion to and from a different type,


00:04:23.700 --> 00:04:29.660
like say JSON, into a pedantic class.


00:04:29.660 --> 00:04:33.940
All these components really are with adders.


00:04:33.940 --> 00:04:35.300
You can do all of that.


00:04:35.300 --> 00:04:40.460
You opt in instead of having to opt out of it.


00:04:40.460 --> 00:04:43.060
It's a really interesting take on that.


00:04:43.060 --> 00:04:49.160
I thought of it as I've got a great screwdriver,


00:04:49.160 --> 00:04:50.480
I've got great knives,


00:04:50.480 --> 00:04:54.620
but I don't think of my Swiss Army knife as anything,


00:04:54.620 --> 00:04:56.440
it's just that it has everything.


00:04:56.440 --> 00:04:58.900
I don't think it was that harsh of a comparison,


00:04:58.900 --> 00:05:02.820
but we also think about that with Django and Flask,


00:05:02.820 --> 00:05:05.300
where Flask is build up your own framework,


00:05:05.300 --> 00:05:08.260
and Django has a lot of built-ins already.


00:05:08.260 --> 00:05:10.360
It isn't even that simple.


00:05:10.360 --> 00:05:15.140
There was an example of some of the validation


00:05:15.140 --> 00:05:20.100
that is built into Pydantic that just seems wrong.


00:05:20.100 --> 00:05:24.660
The example was, if you've got a list of 1,000 integers,


00:05:24.660 --> 00:05:29.260
do you really want Pydantic to go and you pass in a list of integers?


00:05:29.260 --> 00:05:31.800
You want to make sure it's passing in a list,


00:05:31.800 --> 00:05:33.940
but do you want it to go through and make sure


00:05:33.940 --> 00:05:37.460
absolutely all 1,000 elements is an integer?


00:05:37.460 --> 00:05:41.460
You might, in which case you're in luck because that's what it does.


00:05:41.460 --> 00:05:46.020
But if you don't want to do that because that's just too much time,


00:05:46.020 --> 00:05:47.220
you're out of luck.


00:05:47.220 --> 00:05:52.100
Well, you also got to remember the origins of Pydantic


00:05:52.100 --> 00:05:56.300
were about accepting input from arbitrary things on the internet.


00:05:56.300 --> 00:05:57.100
Oh, yeah.


00:05:57.100 --> 00:06:02.020
And when your goal is like, I'm accepting unstructured data from random endpoint,


00:06:02.020 --> 00:06:05.140
on a random endpoint, like you need a different level of


00:06:05.140 --> 00:06:09.280
integrity than I loaded this off of a JSON file and I know


00:06:09.280 --> 00:06:11.940
the app created it, it's not going to be broken.


00:06:11.940 --> 00:06:13.860
It's going to be self-consistent,


00:06:13.860 --> 00:06:17.900
at least in the fact that the data types are probably still consistent.


00:06:17.900 --> 00:06:21.580
It's probably a when to use which sort of thing as well.


00:06:21.580 --> 00:06:27.780
>> Yeah. That's the generated adders class and the generated pedantic class.


00:06:27.780 --> 00:06:30.540
It's around validation.


00:06:30.540 --> 00:06:32.900
Yeah, it is interesting.


00:06:32.900 --> 00:06:39.420
The other aspect is making sure that data is validated when it's set,


00:06:39.420 --> 00:06:41.300
not just when it's created.


00:06:41.300 --> 00:06:42.900
I think I got lost here,


00:06:42.900 --> 00:06:45.140
but correct me if I'm wrong, Paul.


00:06:45.140 --> 00:06:49.960
But I think it's that Pydantic only validates on creation,


00:06:49.960 --> 00:06:54.780
whereas you can set adders to be validating on setting values as well.


00:06:54.780 --> 00:06:56.800
But I could be wrong.


00:06:56.800 --> 00:07:00.700
>> I believe you're right. I went and looked up a ticket in Pydantic.


00:07:00.700 --> 00:07:02.880
I didn't read the whole thing about it,


00:07:02.880 --> 00:07:05.660
but these are hard conversations.


00:07:05.660 --> 00:07:07.880
There's no free lunch.


00:07:07.880 --> 00:07:12.680
This article I thought was a fair treatment about the topic.


00:07:12.680 --> 00:07:15.600
>> Yeah. The conversion bit was a little interesting.


00:07:15.600 --> 00:07:17.640
For instance, date conversion.


00:07:17.640 --> 00:07:22.120
If you pass in datetime to a pedantic model,


00:07:22.120 --> 00:07:25.120
pedantic already has datetime conversions built in,


00:07:25.120 --> 00:07:26.740
so it'll automatically convert it.


00:07:26.740 --> 00:07:29.780
But if you are using like Pendulum,


00:07:29.780 --> 00:07:35.280
which is a subclass of date/time,


00:07:35.280 --> 00:07:37.060
you're going to get a wrong conversion.


00:07:37.060 --> 00:07:39.500
It's just going to do it wrong because it'll


00:07:39.500 --> 00:07:43.260
assume it's a date/time and not a pendulum object.


00:07:43.260 --> 00:07:46.400
That's interesting. Yeah, anyway,


00:07:46.400 --> 00:07:48.820
definitely something to think about of


00:07:48.820 --> 00:07:52.420
the build your own versus having it all in one.


00:07:52.420 --> 00:07:55.340
But I definitely think there's places for both.


00:07:55.340 --> 00:07:57.260
Like Michael said, especially with


00:07:57.260 --> 00:08:01.260
input validation on the web. If you know what you're doing,


00:08:01.260 --> 00:08:06.700
definitely I think maybe you could roll your own or use all these adders and other tools.


00:08:06.700 --> 00:08:10.540
But if you're just sort of playing at it and you're just getting started,


00:08:10.540 --> 00:08:14.300
then why not try PyTandic? It's a great place for that.


00:08:14.300 --> 00:08:19.340
Yeah, the other thing is about the open API specification stuff with PyTandic,


00:08:19.340 --> 00:08:23.020
where if you just use them and you just say, I'm using this, it'll like automatically generate


00:08:23.020 --> 00:08:25.980
the documentation, which is a big bonus.


00:08:25.980 --> 00:08:30.580
It's interesting with the release of SQL model, it's like you can kind of feel


00:08:30.580 --> 00:08:33.980
like Pydantic is its own little mini


00:08:33.980 --> 00:08:38.900
framework dispatcher thingy with hook points that you can plug into


00:08:38.900 --> 00:08:44.300
and almost treat as its own little API surface


00:08:44.300 --> 00:08:46.300
for gluing things together.


00:08:46.300 --> 00:08:49.300
Yeah, it's the data exchange bit, pretty interesting.


00:08:49.300 --> 00:08:54.180
Brandon, Brandon out in the live stream says, I think it comes down to using the right tool for the right job, which is


00:08:54.180 --> 00:08:56.260
Yeah. And how you opened it, right, Brian?


00:08:56.260 --> 00:08:57.260
Yeah.


00:08:57.260 --> 00:09:01.660
All right. So we all work with the terminal every now and then, right?


00:09:01.660 --> 00:09:02.660
Every day.


00:09:02.660 --> 00:09:05.660
You might be working with the command prompt if you're on Windows,


00:09:05.660 --> 00:09:08.860
but I strongly encourage you not to do that.


00:09:08.860 --> 00:09:12.780
You should be switching over to the new Microsoft terminal with like,


00:09:12.780 --> 00:09:17.060
oh, my Posh shell and then you'll be in the terminal world as well.


00:09:17.060 --> 00:09:19.620
So DunderDan on Twitter,


00:09:19.620 --> 00:09:23.860
send us a recommendation, which I want to cover called McFly,


00:09:23.860 --> 00:09:25.540
which I love the name.


00:09:25.540 --> 00:09:26.460
So what is it?


00:09:26.460 --> 00:09:29.040
It is a bit of Rust code


00:09:29.040 --> 00:09:32.160
that extension for your terminal.


00:09:32.160 --> 00:09:33.580
Super easy to install,


00:09:33.580 --> 00:09:36.240
like you can brew install it and other types of install it.


00:09:36.240 --> 00:09:38.100
And basically what it does is it


00:09:38.100 --> 00:09:40.620
lets you fly through your shell history.


00:09:40.620 --> 00:09:42.980
Okay. So depending on the shell you use,


00:09:42.980 --> 00:09:44.940
you may use this a lot or you may use this a little.


00:09:44.940 --> 00:09:48.080
You can hit control R in your terminal,


00:09:48.080 --> 00:09:51.460
and it brings up a reverse history search.


00:09:51.460 --> 00:09:53.620
So like if you knew you type something to do with


00:09:53.620 --> 00:09:57.260
git and it had to do with this repo, you could hit control R and like type


00:09:57.260 --> 00:10:02.060
parts of the repo name and that would start to auto-complete those commands.


00:10:02.060 --> 00:10:05.080
There's a couple of things that are kind of a bummer about that though.


00:10:05.080 --> 00:10:10.100
One is maybe the biggest one is you only see one of those at a time, right?


00:10:10.100 --> 00:10:14.980
So if I go and say, show me my history, I get a line and then that is the closest,


00:10:14.980 --> 00:10:16.500
most recent match to what I type.


00:10:16.500 --> 00:10:22.420
Well, what I often might want is like, it's kind of like a git clone, but which


00:10:22.420 --> 00:10:27.580
one was it and I want to see which ones of those are that like that UI is not fantastic.


00:10:27.580 --> 00:10:34.500
So imagine if you could type, say, git clone and then hit control R and it gave you like


00:10:34.500 --> 00:10:39.400
a UI in the terminal that you could scroll through and pick and then you could see what


00:10:39.400 --> 00:10:44.100
else to type a little bit more. That's McFly. So it's pretty awesome in that regard, but


00:10:44.100 --> 00:10:51.400
it also uses a little bit of AI, if you will, a little neural network and some context awareness


00:10:51.400 --> 00:10:55.560
to help filter and order that, I guess, probably sort is probably the biggest thing.


00:10:55.560 --> 00:11:01.000
It'll say, well, what, you know, we're searching for this, but usually when you're in this folder,


00:11:01.000 --> 00:11:04.920
you're often using this, this version of that command. But if you're in a different folder,


00:11:04.920 --> 00:11:09.720
you're doing a different version of get. And so it'll try to filter your history based on


00:11:09.720 --> 00:11:14.120
the context of where you are. What do you all think? I think, I think it looks pretty cool.


00:11:14.120 --> 00:11:20.360
I was luckily, I don't know why anybody would use the built in Windows command prompt. So


00:11:20.360 --> 00:11:22.900
I'm even on Windows, I'm using bash.


00:11:22.900 --> 00:11:24.540
But--


00:11:24.540 --> 00:11:28.340
Oh, my PowerShell is pretty sweet in the new terminal.


00:11:28.340 --> 00:11:31.500
Carry on. Sorry, don't mean to derail it.


00:11:31.500 --> 00:11:35.840
Anyway, searching history with the VI mode is pretty easy in bash.


00:11:35.840 --> 00:11:39.800
But I was glad to see that this isn't just for


00:11:39.800 --> 00:11:42.760
your command prompt or posh or anything.


00:11:42.760 --> 00:11:47.100
You can use this with Z shell and fish and bash too.


00:11:47.100 --> 00:11:48.500
Yeah, it works in a lot of them.


00:11:48.500 --> 00:11:51.240
And so I found it to be quite neat.


00:11:51.240 --> 00:11:53.240
So let's see, I'll run through some of the features.


00:11:53.240 --> 00:11:55.920
So you just, it rebinds control R, which is kind of nice,


00:11:55.920 --> 00:11:58.800
but one of the things, it'll store your history


00:11:58.800 --> 00:12:01.600
in a little local SQLite database,


00:12:01.600 --> 00:12:04.020
so it can do more queries and more interesting stuff,


00:12:04.020 --> 00:12:05.320
have richer information on it,


00:12:05.320 --> 00:12:09.280
but it also like injects the commands that it sees


00:12:09.280 --> 00:12:10.800
into your regular shell history.


00:12:10.800 --> 00:12:12.720
So if you stop using it, your shell history


00:12:12.720 --> 00:12:15.140
for say Z shell is still totally good.


00:12:15.140 --> 00:12:16.120
That's pretty nice.


00:12:16.960 --> 00:12:20.920
I will say that I know you had Brett on recently.


00:12:20.920 --> 00:12:24.480
And so the rustification of Python bytes


00:12:24.480 --> 00:12:26.280
appears to be complete at this point.


00:12:26.280 --> 00:12:28.360
You can't go anywhere without bumping into rust.


00:12:28.360 --> 00:12:29.800
- I know you keep bumping into it.


00:12:29.800 --> 00:12:31.520
It is quite interesting here.


00:12:31.520 --> 00:12:35.120
- And my other comment is that, I hate to say it,


00:12:35.120 --> 00:12:37.080
but I think the three of us were,


00:12:37.080 --> 00:12:38.200
we've been around so long,


00:12:38.200 --> 00:12:40.400
we were pair programming with Moses.


00:12:40.400 --> 00:12:42.440
And the idea that I really needed


00:12:42.440 --> 00:12:44.840
a small neural network for my shell.


00:12:46.320 --> 00:12:47.160
That's a tough one.


00:12:47.160 --> 00:12:47.680
Yeah.


00:12:47.680 --> 00:12:48.600
It's interesting.


00:12:48.600 --> 00:12:48.920
Right.


00:12:48.920 --> 00:12:52.760
But I do think, I mean, I do think it adds quite a bit of interesting,


00:12:52.760 --> 00:12:54.720
extensions for this stuff.


00:12:54.720 --> 00:12:59.320
Like it's a really cool way to do, you know, I use, oh my Z shell.


00:12:59.320 --> 00:13:02.760
So if I wanted like SSH somewhere, I could type SSH and just start hitting


00:13:02.760 --> 00:13:05.000
up arrow and it's like a beautiful history map.


00:13:05.000 --> 00:13:07.320
Like I never use control R because there's a better one.


00:13:07.320 --> 00:13:08.560
I got to make that jump.


00:13:08.560 --> 00:13:09.160
One of these.


00:13:09.160 --> 00:13:09.320
Yeah.


00:13:09.320 --> 00:13:10.520
It's so, it's so good.


00:13:10.520 --> 00:13:16.120
Uh, but sometimes I don't remember exactly what it is, or there's like a lot of them.


00:13:16.120 --> 00:13:20.000
And so with this one, it'll give you that drop down list


00:13:20.000 --> 00:13:22.200
that fills the whole screen so you can jump through them.


00:13:22.200 --> 00:13:24.320
You can also delete, you're like this one I did once


00:13:24.320 --> 00:13:26.240
but I never want to actually don't even want it in my history.


00:13:26.240 --> 00:13:29.240
You can delete it from your history, which is kind of nice.


00:13:29.240 --> 00:13:32.560
And then also let's go through some of the other things.


00:13:32.560 --> 00:13:35.720
So yeah, so in terms of prioritization,


00:13:35.720 --> 00:13:39.080
you know, that little neural says it takes into consideration


00:13:39.080 --> 00:13:41.080
the directory where you ran the command,


00:13:41.080 --> 00:13:43.480
what you typed before the command.


00:13:43.480 --> 00:13:46.960
So if you did a get branch and then a checkout,


00:13:46.960 --> 00:13:48.320
I don't know, maybe that means something


00:13:48.320 --> 00:13:49.740
or I don't know, whatever.


00:13:49.740 --> 00:13:51.780
But like the series of commands that preceded it


00:13:51.780 --> 00:13:54.780
influence what it suggests and how it orders it,


00:13:54.780 --> 00:13:56.940
how often you run it, when you last ran it,


00:13:56.940 --> 00:14:00.740
what you've selected in it as it's dropped down.


00:14:00.740 --> 00:14:03.200
And also it's exit status.


00:14:03.200 --> 00:14:05.820
So if you ran a command, but the command failed,


00:14:05.820 --> 00:14:07.960
like it won't auto suggest that command again,


00:14:07.960 --> 00:14:09.340
'cause that one's the broken one.


00:14:09.340 --> 00:14:10.180
You know what I mean?


00:14:10.180 --> 00:14:11.000
Things like that.


00:14:11.000 --> 00:14:11.840
There's a lot of cool stuff.


00:14:11.840 --> 00:14:12.680
- Oh, that's cool.


00:14:12.680 --> 00:14:14.180
And then I got one for you, Brian, down here.


00:14:14.180 --> 00:14:16.740
So it's easy to install this, like, you know,


00:14:16.740 --> 00:14:19.740
brew install or where's the,


00:14:19.740 --> 00:14:21.380
probably an app you get installed or something.


00:14:21.380 --> 00:14:22.620
Anyway, if I go down here,


00:14:22.620 --> 00:14:25.740
there's all sorts of ways to install it.


00:14:25.740 --> 00:14:27.580
But here we are.


00:14:27.580 --> 00:14:30.060
Vim key bindings, Brian.


00:14:30.060 --> 00:14:31.460
- Yes, okay.


00:14:31.460 --> 00:14:33.620
- So, okay, so you have Vim key bindings,


00:14:33.620 --> 00:14:35.860
which is by default, it uses Emacs.


00:14:35.860 --> 00:14:38.340
It definitely reminded me of like just firing up Emacs,


00:14:38.340 --> 00:14:41.720
but for the shell, which was kind of nice.


00:14:41.720 --> 00:14:45.920
The other thing that I like about it, I haven't turned this on yet, is fuzzy searching.


00:14:45.920 --> 00:14:49.720
So sometimes I'll be like, "Ah, there's this command. I think it was this."


00:14:49.720 --> 00:14:52.520
But if you get it wrong, then it's like you get zero help, right?


00:14:52.520 --> 00:14:55.720
If you get one character wrong. But this one is, if you get close,


00:14:55.720 --> 00:14:59.020
can you get close and we'll give you some autocomplete on that? That's pretty cool.


00:14:59.020 --> 00:15:03.320
Yeah, that's great. Because you might be searching for a file name or something like that.


00:15:03.320 --> 00:15:05.320
Yeah, yeah, exactly.


00:15:05.320 --> 00:15:11.120
Did you see that? There was an XKCD, I think, or some other comic of somebody.


00:15:11.120 --> 00:15:16.920
Now it's a different one, but somebody scrolling through their history for like an hour to get LS.


00:15:16.920 --> 00:15:17.920
Yes.


00:15:17.920 --> 00:15:19.720
[laughter]


00:15:19.720 --> 00:15:22.420
Now I'm definitely going to try this out. This is pretty good.


00:15:22.420 --> 00:15:23.520
Can you scroll?


00:15:23.520 --> 00:15:24.120
Yeah.


00:15:24.120 --> 00:15:25.620
Oh, you're going on the XKCD.


00:15:25.620 --> 00:15:26.820
No, sorry.


00:15:26.820 --> 00:15:28.820
Can you scroll up to the commits?


00:15:28.820 --> 00:15:29.920
Number of commits?


00:15:29.920 --> 00:15:30.720
Yeah, 350.


00:15:30.720 --> 00:15:34.420
Yeah, this has the look of a project that's been refined, doesn't it?


00:15:34.420 --> 00:15:35.720
Yeah. Yeah, it does.


00:15:35.720 --> 00:15:40.220
I don't know quite how long it's been around, but yeah, it looks like


00:15:40.220 --> 00:15:43.720
The oldest super obvious one is 14 months.


00:15:43.720 --> 00:15:46.420
Yeah, it's continuous integration.


00:15:46.420 --> 00:15:48.660
It was last configured 14 months ago, let's say.


00:15:48.660 --> 00:15:49.520
But yeah, this is--


00:15:49.520 --> 00:15:51.760
>> No, it's the docs. The docs were two years ago.


00:15:51.760 --> 00:15:53.780
>> Okay. The docs, there you go.


00:15:53.780 --> 00:15:56.460
I think this is nice. I wasn't sure I would want to use it.


00:15:56.460 --> 00:15:57.460
I'm like, "Oh, this is interesting."


00:15:57.460 --> 00:15:58.980
People might-- then I installed it.


00:15:58.980 --> 00:16:01.460
I'm like, "Oh my God, this is pretty cool. I like it."


00:16:01.460 --> 00:16:03.720
>> All the cool stuff I like in Python,


00:16:03.720 --> 00:16:07.020
like pyenv and pipx and things like that,


00:16:07.020 --> 00:16:10.020
they all have a section about using this with Fish.


00:16:10.020 --> 00:16:14.120
And so I'm always taunted with my lack of


00:16:14.120 --> 00:16:16.260
foo when it comes to terminals.


00:16:16.260 --> 00:16:19.020
Yeah, I made the switch to Zshell.


00:16:19.020 --> 00:16:22.220
Oh, my Zshell, I'm not looking back. Love it.


00:16:22.220 --> 00:16:24.820
Alright, Patrick Povil out in the live stream says,


00:16:24.820 --> 00:16:27.720
McFly seems really interesting. I'm using Zshell for a month now


00:16:27.720 --> 00:16:31.020
and always thought the Ctrl+R search lacks features compared to other plugins.


00:16:31.020 --> 00:16:32.720
For sure. Absolutely.


00:16:32.720 --> 00:16:35.720
And then David Pochan out there says,


00:16:35.720 --> 00:16:37.420
you covered that LS joke in the show.


00:16:37.420 --> 00:16:39.120
Yeah, it's beautiful. I love that one.


00:16:39.120 --> 00:16:41.520
It's been a couple of years, I think, but it was a good one.


00:16:41.520 --> 00:16:44.000
>> Well, we don't have a joke history command.


00:16:44.000 --> 00:16:46.220
>> Yeah. Oh, McLaugh.


00:16:46.220 --> 00:16:48.280
He's writing McLaugh.


00:16:48.280 --> 00:16:53.200
Something we never cover on the show is textual.


00:16:53.200 --> 00:16:54.760
Why don't you tell us about that, Paul?


00:16:54.760 --> 00:16:57.600
>> Sure. Switching over to me.


00:16:57.600 --> 00:17:01.880
Yep, we got me. I think it was episode 241 when you had


00:17:01.880 --> 00:17:08.120
Brett on and Brian led with Will McGugan talking about Rich.


00:17:08.120 --> 00:17:11.920
And I'll quote Brian because it was funny then and it's funny now.


00:17:11.920 --> 00:17:14.320
"How can I not have heard of it?


00:17:14.320 --> 00:17:17.520
I'm a fan of the podcast and Brian loves this tool."


00:17:17.520 --> 00:17:23.260
So I'm going to go back to the well with the thing that was spun out of Rich at that time, Textual,


00:17:23.260 --> 00:17:26.660
which has been covered, but I want to talk about a particular aspect of it


00:17:26.660 --> 00:17:29.160
that was kind of interesting to me as a pattern.


00:17:29.160 --> 00:17:33.760
And then have a little debate where the two of you tell me that I'm wrong


00:17:33.760 --> 00:17:36.820
and really ancient about this.


00:17:37.160 --> 00:17:46.000
So I've traditionally been against the convention over configuration camp in the world of Python.


00:17:46.000 --> 00:17:49.260
I come out of kind of the ZOPE tradition, the Pyramid tradition.


00:17:49.260 --> 00:17:53.020
Pyramid is like, "Oh, yeah, well, here's a configurator object,


00:17:53.020 --> 00:17:57.960
and it does 15 trillion things that you really ought to care about but don't."


00:17:57.960 --> 00:18:02.100
Because Chris McDonough has really great design sense,


00:18:02.100 --> 00:18:05.560
kind of Goldilocks, knows exactly what to put in and leave out.


00:18:05.620 --> 00:18:08.760
I just, that whole worldview fits into my head.


00:18:08.760 --> 00:18:12.060
And so I have this dislike about magic names,


00:18:12.060 --> 00:18:15.160
magic file names, magic variable names,


00:18:15.160 --> 00:18:18.420
can't auto-complete them, can't refactor, can't navigate.


00:18:18.420 --> 00:18:21.720
If you can't memorize it and keep it all in your head,


00:18:21.720 --> 00:18:25.260
you know, and Python is explicit over implicit, blah, blah, blah.


00:18:25.260 --> 00:18:29.760
I prefer like actual symbols that smart editors can operate on


00:18:29.760 --> 00:18:32.720
and not have like


00:18:32.720 --> 00:18:35.520
is a little bit that's going on with data classes right now.


00:18:35.520 --> 00:18:38.880
Each individual tool having to wire up special support


00:18:38.880 --> 00:18:41.780
for that template language or that this, that, or the other thing


00:18:41.780 --> 00:18:44.080
to look for these magic hand waves.


00:18:44.080 --> 00:18:47.380
But Will had this thread,


00:18:47.380 --> 00:18:49.780
and actually I should bring the thread up.


00:18:49.780 --> 00:18:52.420
Will had this thread on Twitter,


00:18:52.420 --> 00:18:57.780
which made me feel, A, like I was a little bit wrong,


00:18:57.780 --> 00:19:02.680
and B, like he had solved some of the issues that I had with it.


00:19:02.680 --> 00:19:06.620
So what he wanted to do was remove some boilerplate.


00:19:06.620 --> 00:19:12.220
And in this, he gave some examples about before and after.


00:19:12.220 --> 00:19:14.380
Here's a screenshot of it.


00:19:14.380 --> 00:19:18.920
So that's before, and you see, like in here,


00:19:18.920 --> 00:19:22.960
watch how much this changes when you go to this.


00:19:22.960 --> 00:19:28.360
So kind of the noise, the ceremony, a lot of the stuff was reduced.


00:19:28.360 --> 00:19:29.000
Okay.


00:19:29.000 --> 00:19:32.400
Now, anybody can look at this and say, "Wow, that's great."


00:19:32.400 --> 00:19:36.060
If you're optimizing for writing code,


00:19:36.060 --> 00:19:37.900
if you're optimizing for reading code,


00:19:37.900 --> 00:19:40.300
and you want to walk back up to this later


00:19:40.300 --> 00:19:43.600
and know that there are some special semantics that,


00:19:43.600 --> 00:19:47.160
you know, if the name starts with these three things,


00:19:47.160 --> 00:19:50.700
then the next thing is kind of a thing that is, etc.


00:19:50.700 --> 00:19:54.700
And so I worry about those kinds of things,


00:19:54.700 --> 00:19:58.600
but he had done it in a way where my pie would still help you some.


00:19:58.600 --> 00:20:03.200
And one of the innovations he had that I felt like,


00:20:03.200 --> 00:20:06.660
let's see, do you see me on Twitter?


00:20:06.660 --> 00:20:09.000
No, you don't, because I'm in the wrong window.


00:20:09.000 --> 00:20:09.960
Sorry about that.


00:20:09.960 --> 00:20:11.300
OK, my apologies.


00:20:11.300 --> 00:20:14.160
So in the screenshot, you see a before and after.


00:20:14.160 --> 00:20:16.040
Brian, you see that? Yeah.


00:20:16.040 --> 00:20:18.900
All right. Good. Before and after.


00:20:19.140 --> 00:20:23.540
And so he's talking about boilerplate removal in this thread


00:20:23.540 --> 00:20:27.640
and some of the decisions such as like this.


00:20:27.640 --> 00:20:31.540
For any of you that do type annotations, type hints,


00:20:31.540 --> 00:20:34.940
you'll look at this and you will say,


00:20:34.940 --> 00:20:38.740
"Oh, goodness, the type hint went away."


00:20:38.740 --> 00:20:40.440
This is actually a perfect example.


00:20:40.440 --> 00:20:41.940
And you look at this and you think,


00:20:41.940 --> 00:20:45.640
"I just lost the typing information and I believe in type hinting."


00:20:45.640 --> 00:20:49.640
Well, not really because it can be inferred, it can be deduced.


00:20:49.640 --> 00:20:54.760
Right, so for people listening, the example is you've got like a variable colon type equals


00:20:54.760 --> 00:20:55.800
Sorry, yes, this is a podcast.


00:20:55.800 --> 00:20:57.800
Instantiate the type


00:20:57.800 --> 00:21:00.920
versus just drop the type annotation on the variable.


00:21:00.920 --> 00:21:04.520
But when you're allocating up the object right there,


00:21:04.520 --> 00:21:07.480
like all the editors in my pyre are like, you know what?


00:21:07.480 --> 00:21:09.160
Thing equals new object.


00:21:09.160 --> 00:21:09.960
That's right.


00:21:09.960 --> 00:21:11.320
It could be that object.


00:21:11.320 --> 00:21:15.920
Yeah, and in these like titantic battles about type pinning,


00:21:15.920 --> 00:21:19.220
we forget that, well, you don't have to do all that typing all the time.


00:21:19.220 --> 00:21:23.820
Python and type checkers, static analysis can figure this kind of stuff out.


00:21:23.820 --> 00:21:27.820
So I looked at that, I was pretty, I was probably kind of seduced by that.


00:21:27.820 --> 00:21:31.220
But let me ask the two of you, maybe the audience as well.


00:21:31.220 --> 00:21:36.720
Do you think that three months from now, if you walked up to your textual application,


00:21:36.720 --> 00:21:41.120
would you be able to remember that he had done these things


00:21:41.120 --> 00:21:45.520
and that the right hand side was telling you about the left hand side.


00:21:45.520 --> 00:21:48.720
In order to save a little bit of typing,


00:21:48.720 --> 00:21:51.520
did I lose a little bit down the road


00:21:51.520 --> 00:21:53.920
and have to load up my future self?


00:21:53.920 --> 00:21:54.960
What do you think about that?


00:21:54.960 --> 00:21:55.460
Brian?


00:21:55.460 --> 00:21:58.720
Well, I'll tell you what I think.


00:21:58.720 --> 00:22:01.440
Is there a separation of where this happens?


00:22:01.440 --> 00:22:03.200
Like on the example that you're showing here,


00:22:03.200 --> 00:22:06.240
like object or variable equals new object.


00:22:06.240 --> 00:22:08.080
I never need help with that.


00:22:08.080 --> 00:22:10.560
I get super clear what that type is all the time.


00:22:10.560 --> 00:22:22.560
Where it becomes not so obvious to me is where I've got like a class or something and it's got a field and then I'm, I'm creating that object and passing it in.


00:22:22.560 --> 00:22:29.560
If my PI could still tell me, oh, this, this thing is one of these because the only time you ever use it, it's always passing this type.


00:22:29.560 --> 00:22:32.560
But that's a separate file and I'm not looking at it side by side.


00:22:32.560 --> 00:22:38.560
Then to me that like starts to add additional work for me to keep track of in my mind.


00:22:38.560 --> 00:22:42.640
The other one I would say is the auto-complete test.


00:22:42.640 --> 00:22:46.080
If I'm working with thing, I say variable dot and it goes zoom,


00:22:46.080 --> 00:22:47.280
there's the list of things.


00:22:47.280 --> 00:22:49.520
There's a good chance I don't care about anything else.


00:22:49.520 --> 00:22:51.600
Right, like did it auto-complete the thing


00:22:51.600 --> 00:22:55.280
and did it tell me if I put the wrong property field, whatever on it


00:22:55.280 --> 00:22:57.680
because it knows what that list is.


00:22:57.680 --> 00:23:01.040
And if the magic name changes later, will I get a red squiggle?


00:23:01.040 --> 00:23:01.840
Yes, exactly.


00:23:01.840 --> 00:23:05.360
Will the editor know that it was broken and will it help me write it


00:23:05.360 --> 00:23:07.040
so I don't have to look at the docs,


00:23:07.040 --> 00:23:08.540
I don't have to go to the source.


00:23:08.540 --> 00:23:13.240
I just use variable dot and I just keep rocking until I really need to understand something.


00:23:13.240 --> 00:23:13.740
Yeah.


00:23:13.740 --> 00:23:17.140
I would say that that's where I come down on it.


00:23:17.140 --> 00:23:20.940
The third thing is, if this is not relevant here necessarily,


00:23:20.940 --> 00:23:25.740
but if you're doing something like SQLAlchemy or Mongo Engine or Django ORM,


00:23:25.740 --> 00:23:30.140
so often what they do is they have like two flavors of the thing.


00:23:30.140 --> 00:23:31.240
I'm creating a class.


00:23:31.240 --> 00:23:32.740
The class has a field.


00:23:32.740 --> 00:23:33.840
It's called email.


00:23:33.840 --> 00:23:34.440
Oh wait, no.


00:23:34.440 --> 00:23:34.840
What is it?


00:23:34.840 --> 00:23:40.040
It's being set to a new Mongo engine field of type string that


00:23:40.040 --> 00:23:42.100
has a regular expression on it.


00:23:42.100 --> 00:23:44.620
Wait, that's not what, that's not what I get at runtime.


00:23:44.620 --> 00:23:47.580
At runtime, I get a string at code time.


00:23:47.580 --> 00:23:48.020
I get this.


00:23:48.020 --> 00:23:55.340
So for those, I will say field colon type is string equals Mongo field is a


00:23:55.340 --> 00:23:59.280
Mongo string or whatever, or SQL, can you call them of type string?


00:23:59.280 --> 00:24:03.820
Because I want it, I want it to be explicit that it's not really what it


00:24:03.820 --> 00:24:06.620
says there, because often the editors will like give you like column


00:24:06.620 --> 00:24:08.620
information, which doesn't make any sense.


00:24:08.620 --> 00:24:12.820
Anyway, that's a long answer, but I gave Brian some time to think about his position here.


00:24:12.820 --> 00:24:17.620
I'm actually just, I'm very impressed with Will's design decisions


00:24:17.620 --> 00:24:20.620
on a lot of things. And I am,


00:24:20.620 --> 00:24:23.820
like, there may be some magic hidden in there,


00:24:23.820 --> 00:24:27.420
but I would rather have less code


00:24:27.420 --> 00:24:29.420
to look at. So,


00:24:29.420 --> 00:24:32.620
less code to look at means less things to get wrong,


00:24:32.620 --> 00:24:34.020
as far as I'm concerned.


00:24:34.020 --> 00:24:38.460
I am coming down with you on this one.


00:24:38.460 --> 00:24:43.160
I've been working for a long time on kind of a long project


00:24:43.160 --> 00:24:46.300
about static analysis and Python templating


00:24:46.300 --> 00:24:48.100
that is driven by type hints.


00:24:48.100 --> 00:24:51.420
And looking at what he's done has made me step back


00:24:51.420 --> 00:24:55.500
and think, wow, there's some things you can do


00:24:55.500 --> 00:24:56.960
without throwing out type hinting


00:24:56.960 --> 00:25:00.400
that improves the readability and removes the boilerplate


00:25:00.400 --> 00:25:02.160
while keeping people on the rails.


00:25:02.160 --> 00:25:05.460
Back to what you said about Will's design decisions,


00:25:05.460 --> 00:25:10.660
looking inside the code of Textual is really fascinating to me.


00:25:10.660 --> 00:25:14.600
Fascinating enough that first, today Will announced


00:25:14.600 --> 00:25:21.800
that he is changing his job status so that he can work for the next three months on open source completely rather than at night


00:25:21.800 --> 00:25:26.060
and is looking to meet a target for GitHub sponsorship.


00:25:26.060 --> 00:25:32.660
So let's all go out there and sponsor him so we can get these delicious looking treats that he keeps giving to us


00:25:32.660 --> 00:25:39.940
But second I'm interested enough that I want to join the freaking project and learn from him. I need a reactive system


00:25:39.940 --> 00:25:45.580
He's got one. Yeah, I wouldn't even know how to write a test for it and he's got that too


00:25:45.580 --> 00:25:47.660
So I'm with you on that


00:25:47.660 --> 00:25:54.880
I love the way he writes his code the way he talks about his thinking in public


00:25:55.020 --> 00:25:58.820
while being a gentle and encouraging public figure.


00:25:58.820 --> 00:26:00.380
- Yeah, well said.


00:26:00.380 --> 00:26:01.220
- Absolutely.


00:26:01.220 --> 00:26:02.780
Well, very, very cool stuff.


00:26:02.780 --> 00:26:04.500
There's a lot of neat things coming out of there.


00:26:04.500 --> 00:26:07.340
I think a lot of people's reactions are like astonishment.


00:26:07.340 --> 00:26:08.620
Like, wait, that's a terminal?


00:26:08.620 --> 00:26:10.220
That's insane that it does that.


00:26:10.220 --> 00:26:12.260
- Yeah.


00:26:12.260 --> 00:26:14.680
Onto the next.


00:26:14.680 --> 00:26:15.680
Speaking of testing,


00:26:15.680 --> 00:26:20.260
have either of you ever used DocTest?


00:26:20.260 --> 00:26:21.100
Paul?


00:26:21.100 --> 00:26:22.540
- Yes, I have.


00:26:22.540 --> 00:26:27.540
So I, way back when, when I started blogging about testing,


00:26:27.540 --> 00:26:32.540
I thought it'd be fun to compare the test frameworks


00:26:32.540 --> 00:26:34.700
because I wrote my own, it wasn't fun.


00:26:34.700 --> 00:26:37.980
So I looked at unit test, I looked at doc test,


00:26:37.980 --> 00:26:40.980
I looked at pytest and nose also.


00:26:40.980 --> 00:26:46.620
And I actually thought, you know, maybe just,


00:26:46.620 --> 00:26:48.100
I didn't think it would go very far,


00:26:48.100 --> 00:26:54.420
but I tried to use Doctest as a end-to-end test tool.


00:26:54.420 --> 00:27:00.220
It was difficult. There's still some cool things about Doctest.


00:27:00.220 --> 00:27:02.460
If people are unclear what Doctest is,


00:27:02.460 --> 00:27:07.620
Doctest is a package that's built into Python that you can write.


00:27:07.620 --> 00:27:11.900
You can use it by saying Python-M Doctest and point it at a file,


00:27:11.900 --> 00:27:14.020
one of your source files.


00:27:14.020 --> 00:27:16.020
Within your doc strings,


00:27:16.020 --> 00:27:20.100
If you've got things that are like the three,


00:27:20.100 --> 00:27:21.460
I'll see if I've got it here.


00:27:21.460 --> 00:27:24.740
The three arrows or something like the prompt,


00:27:24.740 --> 00:27:29.860
the Python REPL, and you can type some examples in there,


00:27:29.860 --> 00:27:33.900
and Doctest makes sure that the output really matches what you said.


00:27:33.900 --> 00:27:36.180
Doctest will go through and make sure your code examples


00:27:36.180 --> 00:27:38.160
within your code actually work.


00:27:38.160 --> 00:27:41.020
This is a cool idea in principle.


00:27:41.020 --> 00:27:43.780
In practice, it's very painful.


00:27:43.780 --> 00:27:46.380
A lot of the pain points come around,


00:27:46.380 --> 00:27:48.140
"Well, I forgot to import anything."


00:27:48.140 --> 00:27:50.340
So you have to include the imports in there.


00:27:50.340 --> 00:27:54.960
Or, "I forgot to," there's a lot of stuff that can go wrong.


00:27:54.960 --> 00:27:57.700
Now, PyTest adds some things,


00:27:57.700 --> 00:28:00.460
you can run DocTest from PyTest, it's pretty cool.


00:28:00.460 --> 00:28:03.300
What we're talking about now is a new project


00:28:03.300 --> 00:28:06.940
or a project new to me called XDocTest.


00:28:06.940 --> 00:28:11.100
XDocTest, it's got a whole bunch of cool features.


00:28:11.100 --> 00:28:14.840
One of the things is, doc test is a regexplate-based thing.


00:28:14.840 --> 00:28:17.820
It pulls out the string, finds the code, runs it,


00:28:17.820 --> 00:28:20.300
looks at the output, make sure they match.


00:28:20.300 --> 00:28:26.540
XDocTest uses the source tree thing.


00:28:26.540 --> 00:28:28.340
>> Abstract syntax tree?


00:28:28.340 --> 00:28:31.940
>> That's it, abstract syntax tree.


00:28:31.940 --> 00:28:34.580
It's actually parsing it better,


00:28:34.580 --> 00:28:37.900
and there's a whole bunch of cool stuff you get with that.


00:28:37.900 --> 00:28:41.220
There's some highlights in there.


00:28:41.220 --> 00:28:45.860
Like one of the things is string continuation was painful


00:28:45.860 --> 00:28:49.220
because you had to include the angle bracket things.


00:28:49.220 --> 00:28:51.160
You don't have to do that with XDocTest.


00:28:51.160 --> 00:28:54.780
The thing that I love the most though is one of


00:28:54.780 --> 00:29:01.460
the defaults in DocTest is it does not do white-space normalization.


00:29:01.460 --> 00:29:02.700
You can turn it on,


00:29:02.700 --> 00:29:04.020
but it doesn't do it by default.


00:29:04.020 --> 00:29:08.280
XDocTest by default does whitespace normalization.


00:29:08.280 --> 00:29:09.980
What that means is,


00:29:09.980 --> 00:29:13.300
if in my code I cut and pasted stuff and added


00:29:13.300 --> 00:29:17.500
like a tab or a space at the end of my string,


00:29:17.500 --> 00:29:20.400
DocTest will fail that because it's like,


00:29:20.400 --> 00:29:23.540
"Oh, that string is not the same as whitespace at the end."


00:29:23.540 --> 00:29:26.420
I don't care about the whitespace at the end.


00:29:26.420 --> 00:29:30.700
One of the things that XDocTest just fixes that right off the bat.


00:29:30.700 --> 00:29:32.960
It's going to be way more pleasant just to work with.


00:29:32.960 --> 00:29:37.100
But there's a whole bunch of other cool features of this that it brought in.


00:29:37.100 --> 00:29:40.000
It has a more sane skip syntax,


00:29:40.000 --> 00:29:42.240
although they had to read it for a while.


00:29:42.240 --> 00:29:45.240
You have to say plus skip to start the skipping,


00:29:45.240 --> 00:29:48.000
and then minus skip to turn it off.


00:29:48.000 --> 00:29:52.520
Yeah, anyway, but it's pretty neat and flexible.


00:29:52.520 --> 00:29:56.280
I think if you're going to start out trying to do doc test stuff,


00:29:56.280 --> 00:29:58.060
I would totally use xdoctest.


00:29:58.060 --> 00:30:00.800
Plus it has a built-in PyTest support.


00:30:00.800 --> 00:30:07.040
If you have it installed, you can say PyTest --xdoctest and run it on your code, it'll run fine.


00:30:07.040 --> 00:30:09.440
>> Yeah, very nice. Paul, you've done-


00:30:09.440 --> 00:30:13.600
>> You are two for two on predicting what I was going to talk about.


00:30:13.600 --> 00:30:19.520
What I really want to hear you do is say abstract syntax tree in a daffy duck voice.


00:30:19.520 --> 00:30:23.040
>> No. You.


00:30:23.040 --> 00:30:25.120
>> No way. That'll be in the bonus track.


00:30:25.920 --> 00:30:31.360
>> Brett Cannon made us sing a song from like Ren and Stimpy or something like that.


00:30:31.360 --> 00:30:32.640
>> Ren and Stimpy.


00:30:32.640 --> 00:30:35.560
>> Was it that? No, it was Pinky and the Brain.


00:30:35.560 --> 00:30:36.960
>> Pinky and the Brain.


00:30:36.960 --> 00:30:40.360
>> It's all from the same general genre and era.


00:30:40.360 --> 00:30:43.600
>> We should do a Ren and Stimpy skit sometime. That would be fun.


00:30:43.600 --> 00:30:46.120
>> God, Ren and Stimpy was awesome.


00:30:46.120 --> 00:30:49.120
>> The peak of civilization.


00:30:49.120 --> 00:30:49.760
>> Yeah.


00:30:49.760 --> 00:30:53.280
>> The red button. Okay, don't press it.


00:30:53.960 --> 00:30:56.960
What's next? I'm next with this one. Okay.


00:30:56.960 --> 00:30:58.560
I want to start with some code


00:30:58.560 --> 00:30:59.960
and then tell you more about it.


00:30:59.960 --> 00:31:03.160
I want to tell you the code and then you can think about how complicated is it


00:31:03.160 --> 00:31:04.460
and then what is this accomplished.


00:31:04.460 --> 00:31:05.860
So here's some Python code.


00:31:05.860 --> 00:31:08.760
It creates a little LED. It's for like some embedded thing.


00:31:08.760 --> 00:31:11.760
It imports the LED, imports time, imports random.


00:31:11.760 --> 00:31:16.060
It says LED equals LED number 17 while true.


00:31:16.060 --> 00:31:18.560
LED on, sleep one second. LED off,


00:31:18.560 --> 00:31:21.660
sleep for between 45 and 60 minutes.


00:31:21.660 --> 00:31:23.160
That's the entire bit of code.


00:31:23.160 --> 00:31:24.000
What does it do?


00:31:24.000 --> 00:31:28.560
This is how I automated my standing desk with a raspberry pie.


00:31:28.560 --> 00:31:30.400
[laughs]


00:31:30.400 --> 00:31:31.400
Pretty awesome, right?


00:31:31.400 --> 00:31:32.040
Yes.


00:31:32.040 --> 00:31:37.360
So this one comes to us from Joe Ridley.


00:31:37.360 --> 00:31:37.960
Ridley.


00:31:37.960 --> 00:31:38.640
Thank you, Joe.


00:31:38.640 --> 00:31:40.360
And this is by David Kong.


00:31:40.360 --> 00:31:44.560
It's apparently he's into sort of hacking his productivity in all sorts of ways.


00:31:44.560 --> 00:31:48.200
So he got a standup desk and he said, I have this cool automated standup desk.


00:31:48.200 --> 00:31:50.000
You can push a button for up, push a button for down.


00:31:50.000 --> 00:31:52.000
He had presets of like where you like the up,


00:31:52.000 --> 00:31:53.340
where you like the down,


00:31:53.340 --> 00:31:55.440
but he didn't press it very often.


00:31:55.440 --> 00:31:57.020
So he's like, "Why am I not pressing it?


00:31:57.020 --> 00:31:59.440
Because I am lazy and I want to stand up."


00:31:59.440 --> 00:32:01.920
So he put reminders on his phone,


00:32:01.920 --> 00:32:03.120
says, "You want to stand up?" He goes, "No,


00:32:03.120 --> 00:32:04.480
I don't want to stand up right now."


00:32:04.480 --> 00:32:06.480
Then he said, "Well, what if it just did it?"


00:32:06.480 --> 00:32:08.800
I had to adjust to it.


00:32:08.800 --> 00:32:12.240
He went along and there's a couple of buttons,


00:32:12.240 --> 00:32:13.360
little programmable bits,


00:32:13.360 --> 00:32:16.800
and he just pried the faceplate off of


00:32:16.800 --> 00:32:19.880
the control surface of his automatic desk,


00:32:19.880 --> 00:32:21.200
you know, it was a works desk.


00:32:21.200 --> 00:32:22.800
So whatever, if it breaks, I guess,


00:32:22.800 --> 00:32:24.380
pry that off.


00:32:24.380 --> 00:32:27.040
And it just has a few little like pins in the back.


00:32:27.040 --> 00:32:28.220
And if you push the button down,


00:32:28.220 --> 00:32:29.740
it completes the circuit.


00:32:29.740 --> 00:32:32.040
And he's like, well, really all I needed to do is stand up.


00:32:32.040 --> 00:32:33.520
I can push the sit down button


00:32:33.520 --> 00:32:35.320
when I'm tired of standing up again.


00:32:35.320 --> 00:32:37.760
And so went through about like, how do I do this?


00:32:37.760 --> 00:32:40.160
I just need to connect something


00:32:40.160 --> 00:32:41.840
that will trigger electrical current


00:32:41.840 --> 00:32:43.880
on one of these bits here.


00:32:43.880 --> 00:32:46.160
So I said, well, maybe I could use some little


00:32:46.160 --> 00:32:49.080
like super micro thing, some small things.


00:32:49.080 --> 00:32:50.720
"You know what, actually for five bucks,


00:32:50.720 --> 00:32:52.680
"I can get a Raspberry Pi Zero,


00:32:52.680 --> 00:32:55.700
"and you'll go crazy, get a case and an SD card


00:32:55.700 --> 00:32:57.920
"and all that from Adafruit for five bucks,


00:32:57.920 --> 00:32:59.880
"and just write some Python code,


00:32:59.880 --> 00:33:03.480
"and then you connect these little pin areas,


00:33:03.480 --> 00:33:06.580
"number 17, for example, to a circuit,


00:33:06.580 --> 00:33:08.120
"and instead of turning on the LED,


00:33:08.120 --> 00:33:11.120
"it just sends a current over to that little thing


00:33:11.120 --> 00:33:12.740
"on the desk, and it'll make it go.


00:33:12.740 --> 00:33:14.080
"Isn't that awesome?"


00:33:14.080 --> 00:33:15.320
- That's great.


00:33:15.320 --> 00:33:16.320
I wanna do that.


00:33:16.320 --> 00:33:18.120
I need a standing desk first, though.


00:33:18.120 --> 00:33:25.200
I know. Here I am saying, Will, who is in the audience, has magic method names.


00:33:25.200 --> 00:33:26.560
How do I know?


00:33:26.560 --> 00:33:28.080
How can I tab complete?


00:33:28.080 --> 00:33:31.080
And this thing's like, hook it up to terminal 17.


00:33:31.080 --> 00:33:32.640
I mean, oh, OK, not 18.


00:33:32.640 --> 00:33:33.200
All right, great.


00:33:33.200 --> 00:33:34.080
Exactly.


00:33:34.080 --> 00:33:35.400
It's pretty janky.


00:33:35.400 --> 00:33:37.240
No, but that's great.


00:33:37.240 --> 00:33:37.680
That is.


00:33:37.680 --> 00:33:38.520
I've got to.


00:33:38.520 --> 00:33:39.680
You have a standing desk?


00:33:39.680 --> 00:33:40.640
Stand up desk.


00:33:40.640 --> 00:33:44.680
It had a different brand, but it looks like the exact same panel.


00:33:44.680 --> 00:33:46.840
And well, stay tuned.


00:33:47.080 --> 00:33:50.680
So one of the things is like, I don't really need a UI, but maybe just a terminal.


00:33:50.680 --> 00:33:52.120
And how do I talk to the Raspberry Pi?


00:33:52.120 --> 00:33:57.600
So, David goes on to talk about, well, how he set up, an SSH shell over to his


00:33:57.600 --> 00:34:03.520
Raspberry Pi from his Mac book using a USB cable because he's it's on the desk anyway.


00:34:03.520 --> 00:34:06.520
And then just writes this little bit of code that I talked about.


00:34:06.520 --> 00:34:09.520
Move desktop pie and off it goes.


00:34:09.520 --> 00:34:13.960
So I soldered a few things together and then just taped it to the bottom of the


00:34:13.960 --> 00:34:16.240
desk and now you have it going.


00:34:16.560 --> 00:34:19.960
I would contend there's a few minor upgrades that should be added here.


00:34:19.960 --> 00:34:21.720
Maybe a time check.


00:34:21.720 --> 00:34:25.080
Like you may freak a custodial person out.


00:34:25.080 --> 00:34:27.880
If they come in the middle of the night


00:34:27.880 --> 00:34:29.480
and they go to get the...


00:34:29.480 --> 00:34:30.680
If they go to get like...


00:34:30.680 --> 00:34:32.360
>> The clone army has been activated.


00:34:32.360 --> 00:34:32.960
>> Exactly.


00:34:32.960 --> 00:34:35.640
We're going to empty like the trash bin under your desk


00:34:35.640 --> 00:34:36.680
and you go, "No, Jacob."


00:34:36.680 --> 00:34:38.440
You would, I would run for it.


00:34:38.440 --> 00:34:40.080
But if that were me.


00:34:40.080 --> 00:34:43.400
But, you know, so maybe like a web service call


00:34:43.400 --> 00:34:45.240
to check the time or just check the time


00:34:45.240 --> 00:34:47.280
and go, do you really just do this during work hours?


00:34:47.280 --> 00:34:49.240
And like, honestly, this was a pre COVID thing.


00:34:49.240 --> 00:34:53.440
But so it randomly raises and lowers it or yes.


00:34:53.440 --> 00:34:56.380
Between forty five and sixty minutes on the hour.


00:34:56.380 --> 00:34:58.840
OK, that is fabulous.


00:34:58.840 --> 00:35:02.940
Yeah. If you look at the comments here, this is where you got to hang tight, Paul.


00:35:02.940 --> 00:35:05.680
So people are digging it.


00:35:05.680 --> 00:35:10.680
Someone down here a little bit further says I have something called a very desk.


00:35:10.680 --> 00:35:13.720
But it turns out when I peeled the front off of my very desk,


00:35:13.720 --> 00:35:16.440
It had exactly the same control board on the inside.


00:35:16.440 --> 00:35:18.040
So yeah.


00:35:18.040 --> 00:35:20.900
So Paul, you, if it looks the same, it may well be the same.


00:35:20.900 --> 00:35:22.840
Cause someone else was saying that they did.


00:35:22.840 --> 00:35:24.760
Now my desk is going to be smarter than me.


00:35:24.760 --> 00:35:29.280
I mean, I've gotten used to my watch being smarter than me, but it will just


00:35:29.280 --> 00:35:30.760
have more willpower than you.


00:35:30.760 --> 00:35:32.280
Cause you're like, I don't really want to stand out.


00:35:32.280 --> 00:35:33.840
I can't reach it anymore.


00:35:33.840 --> 00:35:34.600
So I got to stand up.


00:35:34.600 --> 00:35:35.760
Boxing the hedgehog.


00:35:35.760 --> 00:35:37.240
Yeah, exactly.


00:35:37.240 --> 00:35:37.680
All right.


00:35:37.680 --> 00:35:38.200
Well, that's all.


00:35:38.200 --> 00:35:40.800
But I thought it was a, I'm always thinking of like, we have these super


00:35:40.800 --> 00:35:44.180
cool devices that cost like five bucks and it's, they're so easy to program,


00:35:44.180 --> 00:35:46.180
but I just, I don't usually have anything cool to do with them.


00:35:46.180 --> 00:35:48.140
And this seems entirely attainable.


00:35:48.140 --> 00:35:48.680
Yeah.


00:35:48.680 --> 00:35:49.180
Yeah.


00:35:49.180 --> 00:35:54.920
I think maybe, hooking up a height adjustment with, audit with random


00:35:54.920 --> 00:35:56.920
adjustment to my webcam would be cool.


00:35:56.920 --> 00:35:59.460
So I could just have different angles throughout the day.


00:35:59.460 --> 00:36:03.380
What if there's like a pulley system that if you, that after a moment yanks the


00:36:03.380 --> 00:36:07.420
chair and if you don't get up, it's just going to dump you like a little bit more


00:36:07.420 --> 00:36:08.780
urgency to the medic work.


00:36:08.780 --> 00:36:10.060
Exactly.


00:36:10.260 --> 00:36:13.060
or score a gun if he finds you're still sitting or something.


00:36:13.060 --> 00:36:15.380
>> Puts my coffee slightly farther away.


00:36:15.380 --> 00:36:18.860
>> Exactly. Paul, what's your last one?


00:36:18.860 --> 00:36:22.040
>> This was a really interesting one for me.


00:36:22.040 --> 00:36:26.520
I was on vacation in heaven in August,


00:36:26.520 --> 00:36:30.120
and two things I did was when I was at the beach,


00:36:30.120 --> 00:36:33.020
I had the beta of Brian's book,


00:36:33.020 --> 00:36:36.520
and when I was back at my mother-in-law's house,


00:36:36.520 --> 00:36:41.420
I was taking my six related Python projects


00:36:41.420 --> 00:36:43.680
and teleporting them into the future


00:36:43.680 --> 00:36:47.080
using the hyper-modern Python cookie cutter.


00:36:47.080 --> 00:36:48.840
And what do I mean by that?


00:36:48.840 --> 00:36:51.640
Well, if you're doing a Python package,


00:36:51.640 --> 00:36:54.940
a library or something that you're going to distribute on PyPI,


00:36:54.940 --> 00:36:57.580
you know, Python development's gotten...


00:36:57.580 --> 00:37:00.940
The bar has been raised, let's put it that way,


00:37:00.940 --> 00:37:04.220
on quality control and tooling and things like that.


00:37:04.280 --> 00:37:09.380
And my good friend Brian Okken long ago, 10 minutes,


00:37:09.380 --> 00:37:15.680
mentioned about XDoctest, which is also on here, I believe.


00:37:15.680 --> 00:37:19.680
Yeah, XDoctest, along with 57 other things you might want to do,


00:37:19.680 --> 00:37:24.940
like Dependabot and Flake 8 and Precommit and mypy and Black


00:37:24.940 --> 00:37:28.180
and GitHub Actions and all these other things.


00:37:28.180 --> 00:37:31.720
And individually, they're achievable.


00:37:31.720 --> 00:37:35.880
Collectively, they are a go on vacation in heaven,


00:37:35.880 --> 00:37:38.180
delete your repository and start over.


00:37:38.180 --> 00:37:39.120
That's what I did.


00:37:39.120 --> 00:37:41.480
I deleted all my repositories and started over


00:37:41.480 --> 00:37:44.820
with poetry and things like that.


00:37:44.820 --> 00:37:47.940
This cookie cutter isn't just great


00:37:47.940 --> 00:37:50.740
because it's a cookie cutter that gets you


00:37:50.740 --> 00:37:52.940
in the ballpark out of the box.


00:37:52.940 --> 00:37:57.940
It is a user guide that explains all the decisions made,


00:37:57.940 --> 00:37:59.780
including the why.


00:37:59.780 --> 00:38:03.940
It's like teaching you how to become a modern Python


00:38:03.940 --> 00:38:07.480
packager programmer, someone who's going to distribute stuff.


00:38:07.480 --> 00:38:13.440
And in fact, there was a blog, a series of blog articles before he did this.


00:38:13.440 --> 00:38:15.440
Let's see if I can find that.


00:38:15.440 --> 00:38:18.740
Yeah, so often you'll see these articles of what you should do,


00:38:18.740 --> 00:38:19.980
and then you just have to go do it.


00:38:19.980 --> 00:38:21.740
And this is like, here's what you should do,


00:38:21.740 --> 00:38:24.380
and then you run this command, and then it's done.


00:38:24.380 --> 00:38:25.540
But now you know why.


00:38:25.540 --> 00:38:28.780
Indeed. And in fact, I found the part you just described


00:38:28.780 --> 00:38:30.780
to be more valuable than the cookie cutter.


00:38:30.780 --> 00:38:31.520
Yeah.


00:38:31.520 --> 00:38:38.060
Because the last thing I wanted was to be teleported into 57 things I didn't understand.


00:38:38.060 --> 00:38:39.320
Yeah.


00:38:39.320 --> 00:38:44.260
And so just for the two of you, if you could look through that list,


00:38:44.260 --> 00:38:47.460
maybe anybody in the audience look through that list.


00:38:47.460 --> 00:38:52.760
How many of these are things, Brian, you've been distributing packages recently.


00:38:52.760 --> 00:38:54.080
How many are these?


00:38:54.080 --> 00:38:59.180
How many of these things are in your list of guilt that you're not doing?


00:38:59.180 --> 00:38:59.880
Yeah.


00:38:59.880 --> 00:39:02.020
No, a lot of these are great.


00:39:02.020 --> 00:39:06.320
Some of these I'd like to add, like, I'm not doing much type checking.


00:39:06.320 --> 00:39:07.780
I'd like to do more type checking.


00:39:07.780 --> 00:39:08.220
Sure.


00:39:08.220 --> 00:39:12.020
I don't, some of the choices, I just don't agree with the choices.


00:39:12.020 --> 00:39:16.580
So I was actually considering doing a fork of this with the choices that I would have made.


00:39:16.580 --> 00:39:20.720
Like, Knox is a cool project, but I've got no problem with Knox.


00:39:20.720 --> 00:39:23.160
Yes, I knew you would say that and I agree with you.


00:39:23.160 --> 00:39:24.620
I would I would change that.


00:39:24.620 --> 00:39:26.760
And I know you said you like poetry.


00:39:26.760 --> 00:39:28.860
I know a lot of people love poetry.


00:39:28.860 --> 00:39:30.720
It just doesn't fit my brain.


00:39:30.720 --> 00:39:33.620
So I don't use poetry, but that's I'm only 50 50 on it.


00:39:33.620 --> 00:39:34.820
I'm fighting it.


00:39:34.820 --> 00:39:37.860
But a whole bunch of other stuff, like you said, things that maybe you didn't


00:39:37.860 --> 00:39:41.360
consider like black and prettier.


00:39:41.360 --> 00:39:42.620
I don't think I use both.


00:39:42.620 --> 00:39:45.160
So I don't know what prettier gives me the black doesn't.


00:39:45.160 --> 00:39:48.080
JavaScript and markdown the things like that.


00:39:48.080 --> 00:39:50.080
JSON files, non Python.


00:39:50.080 --> 00:39:50.980
Oh, okay.


00:39:50.980 --> 00:39:52.980
Don't know what release drafter is.


00:39:52.980 --> 00:39:53.680
That looks neat.


00:39:53.680 --> 00:39:55.980
The whole release drafter thing,


00:39:55.980 --> 00:39:58.220
I don't know if either of you have ever looked


00:39:58.220 --> 00:40:00.820
at release note automation in Python,


00:40:00.820 --> 00:40:03.780
but there's a number of packages, semi-dead,


00:40:03.780 --> 00:40:06.820
and most of them result in


00:40:06.820 --> 00:40:10.420
this dance of if you push before this thing runs,


00:40:10.420 --> 00:40:12.820
you can't get your notes on the tag.


00:40:12.820 --> 00:40:13.420
Yeah.


00:40:13.420 --> 00:40:16.620
And so this is hooked up with a GitHub action,


00:40:16.620 --> 00:40:22.340
which makes a draft of your release notes for you as part of the


00:40:22.340 --> 00:40:25.620
merging a pull request to bump the version number process.


00:40:25.620 --> 00:40:27.020
It's just fascinating.


00:40:27.020 --> 00:40:29.900
I would have never figured this out, man. Never.


00:40:29.900 --> 00:40:32.260
Okay, we got some cool comments.


00:40:32.260 --> 00:40:36.720
One here, it's not as from Exxon.


00:40:36.720 --> 00:40:38.020
>> Yeah, that's a good point.


00:40:38.020 --> 00:40:40.320
>> It's not as hyper modern as the title suggests.


00:40:40.320 --> 00:40:42.160
It's often pretty solid advice.


00:40:42.160 --> 00:40:47.420
I'm not sure if what he means by solid is a compliment or an insult.


00:40:47.420 --> 00:40:49.580
>> I think what he means is hyper modern.


00:40:49.580 --> 00:40:51.020
At least when I read,


00:40:51.020 --> 00:40:56.860
I was like, the last thing on earth I want is bleeding edge on this stuff.


00:40:56.860 --> 00:41:01.060
>> Then also, List of Guilt would be a good title for this.


00:41:01.060 --> 00:41:02.520
>> Yes.


00:41:02.520 --> 00:41:06.220
>> One of the things I want to point out the article series.


00:41:06.220 --> 00:41:07.460
At the top of this,


00:41:07.460 --> 00:41:08.820
what we're going to link to,


00:41:08.820 --> 00:41:11.080
it links to HyperModern Python.


00:41:11.080 --> 00:41:12.640
It's a list of articles.


00:41:12.640 --> 00:41:15.680
The artwork in this is amazing.


00:41:15.680 --> 00:41:18.700
He's using some freely available artwork.


00:41:18.700 --> 00:41:20.420
>> Japanese, really clunky thing.


00:41:20.420 --> 00:41:23.780
>> Yeah, well said. Did you read any of the articles, Brian?


00:41:23.780 --> 00:41:27.260
>> Well, I read all of them when they first appeared,


00:41:27.260 --> 00:41:29.060
but it looks like there's some newer articles


00:41:29.060 --> 00:41:30.340
that I haven't read yet.


00:41:30.340 --> 00:41:35.280
Yep, yep. So Claudio, mega kudos.


00:41:35.280 --> 00:41:44.200
That's another project I should join because there's a couple I would like to teleport him from Sphinx restructured text to Sphinx Markdown.


00:41:44.200 --> 00:41:45.800
Oh yeah, definitely.


00:41:45.800 --> 00:41:52.600
Which is what I've done in my, my, each time I did this, I did a commit immediately to replace it.


00:41:52.600 --> 00:41:53.980
And it's a little bit of work.


00:41:53.980 --> 00:41:56.700
And so it's a contribution I could actually make.


00:41:56.700 --> 00:42:00.200
Yeah, Sphinx Markdown is the reason why I use Sphinx now.


00:42:00.200 --> 00:42:01.640
Very good. Very good.


00:42:01.640 --> 00:42:04.840
So one last thing I'll close with on the XDoc test, Brian,


00:42:04.840 --> 00:42:08.740
I was using it from HyperModern Cookie Cutter,


00:42:08.740 --> 00:42:13.080
and I switched to this from Chris Withers, Sybil.


00:42:13.080 --> 00:42:14.840
Sybil, nice name.


00:42:14.840 --> 00:42:18.140
Which is, Chris is an old time Zopista.


00:42:18.140 --> 00:42:23.540
And so what he does is he lets you, this is not about doc strings in your code.


00:42:23.540 --> 00:42:26.380
This is about blocks in your Sphinx,


00:42:26.380 --> 00:42:29.080
blocks of code in your Sphinx and testing them.


00:42:29.380 --> 00:42:35.120
But you wind up with this doing something PyTest-y.


00:42:35.120 --> 00:42:41.420
And this lets you have fixtures and all these other things available in your doc test blocks.


00:42:41.420 --> 00:42:43.420
Cool, we'll check it out.


00:42:43.420 --> 00:42:45.420
Yeah, super, super cool.


00:42:45.420 --> 00:42:49.720
And Eschleon said, "Solid was intended as a compliment there."


00:42:49.720 --> 00:42:51.120
Yeah, very nice.


00:42:51.120 --> 00:42:53.720
Alright, Brian, you got any extras to wrap it up?


00:42:53.720 --> 00:42:55.720
I don't, other than just an apology.


00:42:55.720 --> 00:42:58.720
Sorry about the solid comment.


00:42:58.720 --> 00:43:00.720
I don't know. That was good.


00:43:00.720 --> 00:43:02.720
Anything else?


00:43:02.720 --> 00:43:04.720
Yeah, I had a chance


00:43:04.720 --> 00:43:07.720
I guess at the end of last week


00:43:07.720 --> 00:43:11.720
If you've been to PyCon before


00:43:11.720 --> 00:43:15.720
you'll know some of the folks in the PSF


00:43:15.720 --> 00:43:19.720
Bessie Walshewski, who has been with the PSF forever and ever


00:43:19.720 --> 00:43:21.720
was with O'Reilly before that


00:43:21.720 --> 00:43:25.720
She is now with OSI, the Open Society


00:43:25.720 --> 00:43:29.020
God, I knew I would say that.


00:43:29.020 --> 00:43:32.920
Open Source Institute, I spent 10 years on a project


00:43:32.920 --> 00:43:35.520
with the Open Society Institute, the other OSI.


00:43:35.520 --> 00:43:41.620
And she is working with OSI on their messaging


00:43:41.620 --> 00:43:43.420
and fundraising and things like that.


00:43:43.420 --> 00:43:47.020
And it's a very interesting problem for us


00:43:47.020 --> 00:43:51.520
in the Python community that's similar to the problem we had


00:43:51.520 --> 00:43:57.120
with the PSF, getting people to pay for the comments,


00:43:57.120 --> 00:43:58.320
if that makes sense.


00:43:58.320 --> 00:44:02.620
Now, the comments for the world of open source


00:44:02.620 --> 00:44:05.920
is a lot squishier and the value proposition


00:44:05.920 --> 00:44:09.320
is a lot more indirect relative to the world of Python.


00:44:09.320 --> 00:44:13.420
But I feel like there is a big there there


00:44:13.420 --> 00:44:18.020
that the world of open source is still relevant


00:44:18.020 --> 00:44:21.480
and still has important next problems.


00:44:21.480 --> 00:44:23.180
There is a commons,


00:44:23.180 --> 00:44:25.920
there are things that will need to be done


00:44:25.920 --> 00:44:29.480
and we need a neutral agency


00:44:29.480 --> 00:44:32.380
that is an advocate for the commons


00:44:32.380 --> 00:44:34.780
to work on things like that.


00:44:34.780 --> 00:44:38.080
So she and I discussed what's next for the commons,


00:44:38.080 --> 00:44:40.620
things going on at OSI.


00:44:40.620 --> 00:44:43.620
If any of you were around in the beginning


00:44:43.620 --> 00:44:46.020
of the words open source,


00:44:46.020 --> 00:44:49.120
You know the problems that were being solved then,


00:44:49.120 --> 00:44:51.620
they feel like solved problems now.


00:44:51.620 --> 00:44:55.820
But that's an open question and sometimes problems don't have a way of staying solved.


00:44:55.820 --> 00:44:59.220
So keep an eye on OSI,


00:44:59.220 --> 00:45:02.820
keep an eye on what Betsy and Stefano and others are doing,


00:45:02.820 --> 00:45:06.020
keep an eye on open source itself,


00:45:06.020 --> 00:45:10.220
and maybe share some thoughts in the show notes or anything like that.


00:45:10.220 --> 00:45:14.120
What do you think is the big mission for open source?


00:45:14.120 --> 00:45:16.600
>> Yeah. Maybe you reply to the Twitter thread


00:45:16.600 --> 00:45:18.940
announcing this episode which will be out shortly.


00:45:18.940 --> 00:45:22.420
That probably be the best place or the YouTube live stream chat


00:45:22.420 --> 00:45:24.800
would be good places for that.


00:45:24.800 --> 00:45:27.620
>> How about you, Michael? Do you have any extra bits?


00:45:27.620 --> 00:45:30.760
>> You know I do. First of all,


00:45:30.760 --> 00:45:33.480
I want to just really quickly on the hyper-modern thing throughout.


00:45:33.480 --> 00:45:36.080
Remember we talked about readme.so?


00:45:36.080 --> 00:45:36.920
>> Yeah.


00:45:36.920 --> 00:45:39.040
>> Gosh, and this is readme as a service.


00:45:39.040 --> 00:45:41.280
This is good to generate your readme and then you


00:45:41.280 --> 00:45:43.600
can use the release note thing to keep it going.


00:45:43.600 --> 00:45:45.340
So yeah, I just want to give another shout out to that


00:45:45.340 --> 00:45:48.060
because idea of readme as a service blew my mind.


00:45:48.060 --> 00:45:49.360
- Does it do badges?


00:45:49.360 --> 00:45:50.780
God, badges are so hard.


00:45:50.780 --> 00:45:52.980
- I know, if it doesn't do badges, it better.


00:45:52.980 --> 00:45:54.220
That'd be an awesome upgrade.


00:45:54.220 --> 00:45:57.100
Okay, couple of quick things I want to throw a shout out to.


00:45:57.100 --> 00:45:58.700
These are at the bottom of the show notes.


00:45:58.700 --> 00:46:02.260
ActiveState, you know, they're one of the packagers,


00:46:02.260 --> 00:46:06.060
distributors of more full featured, holistic,


00:46:06.060 --> 00:46:09.020
sort of pre-packaged Python distributions.


00:46:09.020 --> 00:46:11.260
They are running a survey called


00:46:11.260 --> 00:46:14.140
the software supply chain security survey


00:46:14.140 --> 00:46:18.100
to supply chain security of like pip vulnerabilities,


00:46:18.100 --> 00:46:20.900
or not pip, IPI package,


00:46:20.900 --> 00:46:23.220
pollution vulnerabilities and stuff like that


00:46:23.220 --> 00:46:24.060
are our big deals.


00:46:24.060 --> 00:46:25.700
So they're interested in running a survey.


00:46:25.700 --> 00:46:27.940
So I thought I'd give a shout out about that.


00:46:27.940 --> 00:46:29.180
People can fill that out.


00:46:29.180 --> 00:46:33.620
Python 3.9.7 and 3.8.12 are out


00:46:33.620 --> 00:46:37.680
with I think 3.9.7 might have some very minor new things


00:46:37.680 --> 00:46:39.700
and 3.8 is just a security update.


00:46:39.700 --> 00:46:43.740
So bug fixes, but the three nine one didn't speak to me


00:46:43.740 --> 00:46:45.780
as anything super major, but you might check it out.


00:46:45.780 --> 00:46:48.140
There's a few security things in there about like,


00:46:48.140 --> 00:46:51.760
if you pass this to like the IP class


00:46:51.760 --> 00:46:53.580
or something like that, it could be an issue,


00:46:53.580 --> 00:46:55.900
but I don't really think there's anything


00:46:55.900 --> 00:46:58.160
super important there, but no.


00:46:58.160 --> 00:47:00.760
Brian, this one, let me read the little description for you.


00:47:00.760 --> 00:47:05.020
This one here comes from Shlomi Lantan.


00:47:05.020 --> 00:47:07.580
Says, "Brian, you talked about having a history


00:47:07.580 --> 00:47:10.140
of all the files in a GitHub repo


00:47:10.140 --> 00:47:12.100
and finding out how long the oldest one,


00:47:12.100 --> 00:47:12.980
like we were just looking around,


00:47:12.980 --> 00:47:14.340
like how old is this project?


00:47:14.340 --> 00:47:16.220
Maybe two years, looks like lasting change.


00:47:16.220 --> 00:47:19.860
So he wrote a thing called Grandpa.


00:47:19.860 --> 00:47:23.560
And the idea is simply find the oldest modified files


00:47:23.560 --> 00:47:25.860
in the repo, so you can run it standalone,


00:47:25.860 --> 00:47:28.020
you can make it a GitHub action and so on.


00:47:28.020 --> 00:47:30.500
So it just goes through and finds the oldest files.


00:47:30.500 --> 00:47:33.060
Last week I talked about WakePy,


00:47:33.060 --> 00:47:35.900
which will let you keep a process awake,


00:47:35.900 --> 00:47:38.860
keep your computer awake while your process, your Python processes running.


00:47:38.860 --> 00:47:43.340
Do you do like a context manager, you know, with keep awake, do the stuff you don't want


00:47:43.340 --> 00:47:47.180
the computer to go asleep during. And then when you leave the computer can go back to sleep.


00:47:47.180 --> 00:47:49.740
And I said that there was a problem on Mac OS,


00:47:49.740 --> 00:47:52.780
but PR has accepted that things back to good. So thank you for that.


00:47:52.780 --> 00:47:57.980
Really quick shout out to some, oh my Z shell, not my Z shell, oh my posh shell.


00:47:57.980 --> 00:48:01.100
Look at all that good stuff, Brian. That's, that could be your,


00:48:01.100 --> 00:48:04.220
that could be your, PowerShell on Windows.


00:48:04.220 --> 00:48:06.180
>> Does it have VI key bindings?


00:48:06.180 --> 00:48:07.860
If not, I can't use it.


00:48:07.860 --> 00:48:09.940
>> I honestly don't know.


00:48:09.940 --> 00:48:11.860
Anyway, I think it's pretty cool,


00:48:11.860 --> 00:48:15.420
but it's not just for PowerShell.


00:48:15.420 --> 00:48:17.620
It just happens to be one of these really nice extensions


00:48:17.620 --> 00:48:19.260
that also works for PowerShell.


00:48:19.260 --> 00:48:19.980
>> Oh, really?


00:48:19.980 --> 00:48:20.500
>> Yeah.


00:48:20.500 --> 00:48:21.020
>> All right.


00:48:21.020 --> 00:48:22.980
>> It took me forever to know what Posh meant.


00:48:22.980 --> 00:48:25.540
I'm like, "Posh, what shell is that?"


00:48:25.540 --> 00:48:27.780
Posh is PowerShell, right?


00:48:27.780 --> 00:48:30.100
>> It probably is, actually. Yeah, it probably is.


00:48:30.100 --> 00:48:32.340
It sounds cooler than PowerShell though.


00:48:32.340 --> 00:48:33.260
>> Okay.


00:48:33.260 --> 00:48:34.220
- Cool, cool.


00:48:34.220 --> 00:48:36.400
All right, I think that's it for those.


00:48:36.400 --> 00:48:37.960
Are you all ready for a joke?


00:48:37.960 --> 00:48:38.820
- Yes.


00:48:38.820 --> 00:48:39.900
- All right, here we go.


00:48:39.900 --> 00:48:43.920
So here's a tweet from monkeyuser, @ismonkeyuser,


00:48:43.920 --> 00:48:44.760
and they have a mess,


00:48:44.760 --> 00:48:47.260
they have like this sort of planning diagram here,


00:48:47.260 --> 00:48:48.500
like a flowchart, if you will.


00:48:48.500 --> 00:48:49.600
Remember a flowchart?


00:48:49.600 --> 00:48:51.000
But this is like real high level.


00:48:51.000 --> 00:48:54.020
And it's about trying to find a meaning


00:48:54.020 --> 00:48:55.500
as a software developer.


00:48:55.500 --> 00:48:58.340
So if the person enters to the workflow,


00:48:58.340 --> 00:49:01.220
quit, question mark, yes or no?


00:49:01.220 --> 00:49:02.980
Yes, do you have paid time off?


00:49:02.980 --> 00:49:05.220
(laughing)


00:49:05.220 --> 00:49:08.420
Then what you can do is you can go in


00:49:08.420 --> 00:49:09.940
and you change your JavaScript,


00:49:09.940 --> 00:49:12.180
I think it's JavaScript, change your JavaScript framework.


00:49:12.180 --> 00:49:13.220
Did you acquire new skills?


00:49:13.220 --> 00:49:14.820
Are you burnt out?


00:49:14.820 --> 00:49:15.660
No?


00:49:15.660 --> 00:49:18.580
You go back, you change your JavaScript framework again.


00:49:18.580 --> 00:49:19.420
It's a little starving.


00:49:19.420 --> 00:49:20.820
Have you changed your JavaScript framework


00:49:20.820 --> 00:49:22.040
in the last two months?


00:49:22.040 --> 00:49:25.460
If no, then you need to change it again.


00:49:25.460 --> 00:49:27.180
- It burns, it burns.


00:49:27.180 --> 00:49:29.220
- Yeah, you've got some backlog here.


00:49:29.220 --> 00:49:31.060
It goes to in progress and that gets shipped.


00:49:31.060 --> 00:49:32.140
It gets done, you get paid.


00:49:32.140 --> 00:49:32.980
Do you have burnout?


00:49:32.980 --> 00:49:33.800
Yes.


00:49:33.800 --> 00:49:34.640
Are you dead?


00:49:34.640 --> 00:49:35.480
Whoops, not yet.


00:49:35.480 --> 00:49:36.420
Do you have paid time off?


00:49:36.420 --> 00:49:38.540
Then you can change your JavaScript framework again.


00:49:38.540 --> 00:49:41.780
No, then you ask, has it been changed in two months?


00:49:41.780 --> 00:49:44.100
If no, then you change it again.


00:49:44.100 --> 00:49:45.500
Otherwise you go to the backlog.


00:49:45.500 --> 00:49:47.260
And I thought this part right here, Ryan,


00:49:47.260 --> 00:49:49.580
you might particularly like, is it ready for QA?


00:49:49.580 --> 00:49:50.900
Nothing goes to that.


00:49:50.900 --> 00:49:53.140
(laughing)


00:49:53.140 --> 00:49:58.100
It's just like an orphaned input box right there.


00:49:58.100 --> 00:50:01.660
- This should be the logo for HTMX.


00:50:01.660 --> 00:50:02.780
- Yes, it actually should.


00:50:02.780 --> 00:50:03.740
Yeah, this would be awesome,


00:50:03.740 --> 00:50:06.940
'cause it really, it just tells you the churn.


00:50:06.940 --> 00:50:08.980
And another person walks up and says,


00:50:08.980 --> 00:50:10.680
"Hey, are you trying to find a new workflow


00:50:10.680 --> 00:50:11.520
"for how we're working?"


00:50:11.520 --> 00:50:12.620
He says, "No, I'm trying to figure out


00:50:12.620 --> 00:50:14.460
"why I'm still doing this."


00:50:14.460 --> 00:50:17.780
- Well, there's no way to go back to quit.


00:50:17.780 --> 00:50:20.040
(laughing)


00:50:20.040 --> 00:50:23.300
And there's, yeah, and--


00:50:23.300 --> 00:50:24.740
- You found the Easter egg.


00:50:24.740 --> 00:50:27.220
- Yeah, well, also, why is there still


00:50:27.220 --> 00:50:29.340
a separate QA department?


00:50:29.340 --> 00:50:32.020
- I love the leveraging of paid time off.


00:50:32.020 --> 00:50:38.580
- Yeah, backlog, backlog's like an afterthought.


00:50:38.580 --> 00:50:40.260
If there's nothing else you can do,


00:50:40.260 --> 00:50:42.460
maybe you can work on the backlog.


00:50:42.460 --> 00:50:43.620
- Yeah, exactly.


00:50:43.620 --> 00:50:46.300
- Nice. - Awesome.


00:50:46.300 --> 00:50:47.140
- Well, that's it.


00:50:47.140 --> 00:50:48.100
Yeah, that's it for our show.


00:50:48.100 --> 00:50:49.380
Brian, thank you as always.


00:50:49.380 --> 00:50:50.220
Great to have you here.


00:50:50.220 --> 00:50:51.780
And Paul, thanks for joining us.


00:50:51.780 --> 00:50:52.620
- Thanks for having me.


00:50:52.620 --> 00:50:53.440
Love the show.


00:50:53.440 --> 00:50:55.260
Love everything the two of you have been doing


00:50:55.260 --> 00:50:56.820
for the last few years.


00:50:56.820 --> 00:51:01.820
and hope to tell you this in person soon, but probably not.


00:51:01.820 --> 00:51:02.780
>> Yeah.


00:51:02.780 --> 00:51:03.620
>> That's wrong.


00:51:03.620 --> 00:51:04.440
>> No, okay.


00:51:04.440 --> 00:51:05.740
>> You said for me to interrupt you


00:51:05.740 --> 00:51:08.680
and tell you when you were wrong, but I forgot to, so.


00:51:08.680 --> 00:51:09.520
>> Okay, great.


00:51:09.520 --> 00:51:10.540
[laughing]


00:51:10.540 --> 00:51:11.420
Keep happy thoughts.


00:51:11.420 --> 00:51:13.300
Do you promise not to cut your hair


00:51:13.300 --> 00:51:14.700
until we see each other again?


00:51:14.700 --> 00:51:15.540
>> Yes.


00:51:15.540 --> 00:51:18.540
>> No, I'm wanting to be cousin it


00:51:18.540 --> 00:51:19.900
by next year at this time.


00:51:19.900 --> 00:51:22.320
[laughing]


00:51:22.320 --> 00:51:23.160
So, all right.


00:51:23.160 --> 00:51:24.000
>> Love it.


00:51:24.000 --> 00:51:24.820
All right.


00:51:24.820 --> 00:51:25.660
>> Bye.


00:51:25.660 --> 00:51:26.500
>> Bye, guys.


00:51:26.500 --> 00:51:33.060
Bytes. Follow the show on Twitter via @PythonBytes. That's Python Bytes as in B-Y-T-E-S.


00:51:33.060 --> 00:51:38.420
Get the full show notes over at PythonBytes.fm. If you have a news item we should cover, just visit


00:51:38.420 --> 00:51:42.900
PythonBytes.fm and click submit in the nav bar. We're always on the lookout for sharing something


00:51:42.900 --> 00:51:47.060
cool. If you want to join us for the live recording, just visit the website and click


00:51:47.060 --> 00:51:52.260
live stream to get notified of when our next episode goes live. That's usually happening at


00:51:52.260 --> 00:51:55.380
noon Pacific on Wednesdays over at YouTube.


00:51:55.380 --> 00:51:57.480
On behalf of myself and Brian Aukin,


00:51:57.480 --> 00:51:58.780
this is Michael Kennedy.


00:51:58.780 --> 00:52:01.020
Thank you for listening and sharing this podcast


00:52:01.020 --> 00:52:02.660
with your friends and colleagues.

