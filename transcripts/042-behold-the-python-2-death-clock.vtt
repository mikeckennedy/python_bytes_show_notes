
00:00:00.000 --> 00:00:05.600
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.600 --> 00:00:10.000
This is episode 42 recorded September 6, 2017.


00:00:10.000 --> 00:00:11.200
I'm Michael Kennedy.


00:00:11.200 --> 00:00:12.100
And I'm Brian Ockett.


00:00:12.100 --> 00:00:14.300
And we have the band back together again.


00:00:14.300 --> 00:00:15.000
How about that, Brian?


00:00:15.000 --> 00:00:19.900
Thank you so much for carrying the Python Bytes news banner while I was gone.


00:00:19.900 --> 00:00:22.100
And then like I get to pay you back straight away a little bit.


00:00:22.100 --> 00:00:28.300
Yeah, it was fun listening to 2.1 with you and I'm blanking right now.


00:00:28.300 --> 00:00:28.900
Yeah, Miguel.


00:00:28.900 --> 00:00:31.020
Yeah, Miguel, it was great.


00:00:31.020 --> 00:00:33.720
And then it was kind of fun to talk with some new people.


00:00:33.720 --> 00:00:35.340
But I'm not ready to replace you yet.


00:00:35.340 --> 00:00:39.180
Yeah, no, no, I think this idea of maybe every now and then having someone else drop in and


00:00:39.180 --> 00:00:41.740
give it a fresh set of topics might be cool.


00:00:41.740 --> 00:00:43.660
But yeah, no, it's great to be back together.


00:00:43.660 --> 00:00:47.500
So before we get started, I just want to say thanks to Datadog for sponsoring this show.


00:00:47.500 --> 00:00:51.540
You can check out what they their special offer at Python bytes.fm slash Datadog, which


00:00:51.540 --> 00:00:53.100
is actually really cool.


00:00:53.100 --> 00:00:54.100
You get something out of it.


00:00:54.100 --> 00:00:55.540
So that's, that's sweet.


00:00:55.540 --> 00:01:02.020
Let's talk about what a couple of the one of the prolific Python developers out there.


00:01:02.020 --> 00:01:03.900
Just in one week, what he's been up to.


00:01:03.900 --> 00:01:06.100
Yeah, I think it was the last week.


00:01:06.100 --> 00:01:09.420
Kenneth Reitz has been very prolific.


00:01:09.420 --> 00:01:15.100
And it's I don't know if he's, he's got insomnia, and he's not sleeping lately.


00:01:15.100 --> 00:01:17.660
But he's put out a bunch of stuff recently.


00:01:17.660 --> 00:01:22.540
And instead of spreading it out entirely, for our entire episode, we're just gonna lump


00:01:22.540 --> 00:01:23.540
it all together.


00:01:23.540 --> 00:01:25.440
- So this basically could be an entire episode.


00:01:25.440 --> 00:01:27.480
- Yeah, it could, but you know.


00:01:27.480 --> 00:01:28.320
- That would be wrong.


00:01:28.320 --> 00:01:29.240
- That would be wrong.


00:01:29.240 --> 00:01:30.880
So first off, I think this is cool.


00:01:30.880 --> 00:01:32.680
So if you're a Mac user,


00:01:32.680 --> 00:01:36.360
maybe you use Homebrew to install stuff.


00:01:36.360 --> 00:01:38.600
And one of the things he's put together


00:01:38.600 --> 00:01:41.680
is Homebrew Pythons, which is a tap.


00:01:41.680 --> 00:01:44.600
I didn't know there was a thing called Homebrew taps,


00:01:44.600 --> 00:01:48.480
but it's a way that you can get all Python 2.5


00:01:48.480 --> 00:01:51.220
through 3.6 installed easily


00:01:51.220 --> 00:01:52.680
with just a couple of command lines.


00:01:52.680 --> 00:01:53.680
Yeah, it's beautiful.


00:01:53.680 --> 00:01:59.080
You just basically register Kenneth's tap and then you just say brew install Python


00:01:59.080 --> 00:02:03.200
dash 3.6 or 2.7 or whatever.


00:02:03.200 --> 00:02:07.880
I really like brew and I've been starting to use it more and more for my Mac.


00:02:07.880 --> 00:02:12.080
The next time I set up a fresh operating system, which seems to be about like yearly, I get


00:02:12.080 --> 00:02:14.080
frustrated and format the thing.


00:02:14.080 --> 00:02:21.160
So next time I'm going to just brew install as much as I can like MongoDB, Python, Node.js,


00:02:21.160 --> 00:02:27.340
the things that you need. It's beautiful. Yeah. Okay. Well, moving on. Next up, we've


00:02:27.340 --> 00:02:33.220
got a request thread requests threads, which is a I think it's something built on top of


00:02:33.220 --> 00:02:41.140
requests that uses twisted deferred objects as a return object for requests. And so you


00:02:41.140 --> 00:02:46.920
can use it with either async and await or with twisted to have asynchronous reading


00:02:46.920 --> 00:02:48.480
through requests easily.


00:02:48.480 --> 00:02:49.960
- Yeah, it's really, really cool.


00:02:49.960 --> 00:02:52.300
So basically you create this async session


00:02:52.300 --> 00:02:55.400
and you just say await session.get.


00:02:55.400 --> 00:02:56.600
So you have actually two ways.


00:02:56.600 --> 00:02:59.640
You can do async await Python 3.6 style,


00:02:59.640 --> 00:03:00.640
which is really cool.


00:03:00.640 --> 00:03:02.980
Or you can use twisted deferreds,


00:03:02.980 --> 00:03:06.600
which work in basically every version of Python.


00:03:06.600 --> 00:03:09.940
So you actually can pick and it's really, really cool.


00:03:09.940 --> 00:03:12.180
So I'm looking forward to seeing that rock


00:03:12.180 --> 00:03:14.520
and it basically looks like the last activity


00:03:14.520 --> 00:03:16.240
on everything was a couple of days ago.


00:03:16.240 --> 00:03:17.760
So yeah, this is kind of new.


00:03:17.760 --> 00:03:18.600
It's kind of cool.


00:03:18.600 --> 00:03:21.360
- And also, before we move on, I really enjoyed your,


00:03:21.360 --> 00:03:23.800
you interviewed somebody about Twisted recently.


00:03:23.800 --> 00:03:24.840
- Oh yeah, yeah, that was Glyph.


00:03:24.840 --> 00:03:26.840
That was the most recent episode that's out,


00:03:26.840 --> 00:03:28.080
but probably not by the time.


00:03:28.080 --> 00:03:29.560
That was 127 on Talk Python.


00:03:29.560 --> 00:03:31.260
Thanks, yeah, he's doing amazing stuff.


00:03:31.260 --> 00:03:33.520
And so that kind of riffs on this as well, for sure.


00:03:33.520 --> 00:03:36.560
- Okay, now thinking about, instead of threads,


00:03:36.560 --> 00:03:38.600
you might want to just have a background task,


00:03:38.600 --> 00:03:40.440
and Kenneth has that too.


00:03:40.440 --> 00:03:43.080
He's got a repo called Background,


00:03:43.080 --> 00:03:45.440
which just runs stuff in the background.


00:03:45.440 --> 00:03:46.440
Yeah, it's beautiful.


00:03:46.440 --> 00:03:50.600
You basically put like a decorator on a function and then it becomes this async background


00:03:50.600 --> 00:03:53.640
thing that you just kick off like fire and forget style.


00:03:53.640 --> 00:03:54.640
It's really, really cool.


00:03:54.640 --> 00:03:57.200
Like, you can do it for CLIs, you can do it for web apps.


00:03:57.200 --> 00:04:00.800
I use this and the Talk Python Training site, this type of stuff.


00:04:00.800 --> 00:04:03.160
I don't use this because it's new.


00:04:03.160 --> 00:04:07.920
But like when I first built it and you know, may give you the capability to like email


00:04:07.920 --> 00:04:10.280
thousands of people and update.


00:04:10.280 --> 00:04:14.440
It turns out that that's really bad to do in a serial way on the main thread.


00:04:14.440 --> 00:04:18.080
So you got to kick that kind of stuff off the background threads or things like Celery.


00:04:18.080 --> 00:04:19.600
And this is a really cool way to do it.


00:04:19.600 --> 00:04:23.960
I know that there's Celery and other things, but having some simple way to just ease into


00:04:23.960 --> 00:04:28.160
multi-process programming, and it's really hardly any code at all.


00:04:28.160 --> 00:04:29.160
Right.


00:04:29.160 --> 00:04:30.160
There's no extra service.


00:04:30.160 --> 00:04:31.320
It just runs in process.


00:04:31.320 --> 00:04:32.560
It's simple and easy.


00:04:32.560 --> 00:04:33.560
Yeah.


00:04:33.560 --> 00:04:37.360
Last up from Kenneth, although I'm sure I'm missing something that he's been doing recently,


00:04:37.360 --> 00:04:40.820
is setup.py for humans.


00:04:40.820 --> 00:04:42.480
And this isn't something you run.


00:04:42.480 --> 00:04:49.540
It's just he's got a repo that's an example setup file, which he directly offered.


00:04:49.540 --> 00:04:55.080
This repo exists to provide an example setup.py file that can be used to bootstrap your next


00:04:55.080 --> 00:04:56.080
Python project.


00:04:56.080 --> 00:05:00.840
It includes some advanced patterns and best practices, as well as some commented out nice


00:05:00.840 --> 00:05:02.160
to haves.


00:05:02.160 --> 00:05:06.000
And it had a quick look through it, and it looks actually, I like it.


00:05:06.000 --> 00:05:07.000
Yeah.


00:05:07.000 --> 00:05:08.600
So get out there and make that module package, right?


00:05:08.600 --> 00:05:09.600
Very, very cool.


00:05:09.600 --> 00:05:10.600
Okay.


00:05:10.600 --> 00:05:15.640
down or we're going to have to have another podcast just to talk about your stuff.


00:05:15.640 --> 00:05:18.760
And he has his own podcast, which is pretty long form.


00:05:18.760 --> 00:05:20.440
So maybe he covers this stuff there as well.


00:05:20.440 --> 00:05:21.440
Yeah, maybe.


00:05:21.440 --> 00:05:22.440
I'm not sure.


00:05:22.440 --> 00:05:23.440
But yeah, definitely.


00:05:23.440 --> 00:05:24.440
All right.


00:05:24.440 --> 00:05:28.360
So up next is a really positive thing, but it sounds kind of negative.


00:05:28.360 --> 00:05:32.960
I want to talk about the Python death clock.


00:05:32.960 --> 00:05:37.360
So I'm over here on Python clock.org.


00:05:37.360 --> 00:05:41.920
And it says Python two seven will retire in two years, seven months, five days, seven


00:05:41.920 --> 00:05:45.840
hours, 33 minutes and 35 seconds.


00:05:45.840 --> 00:05:47.520
So that's that's pretty neat, right?


00:05:47.520 --> 00:05:54.320
So here's this clock, there's just a running animated countdown to the 2020 timeframe,


00:05:54.320 --> 00:05:59.680
when Python two seven is going to be no longer maintained when it goes out of support and


00:05:59.680 --> 00:06:00.680
things like that.


00:06:00.680 --> 00:06:01.680
Yeah.


00:06:01.680 --> 00:06:06.240
So this is the get it's counting to what a best guess for when PyCon in 2020 is.


00:06:06.240 --> 00:06:07.240
Yeah.


00:06:07.240 --> 00:06:11.820
And there's no when they said they're going to retire Python to seven, they didn't say,


00:06:11.820 --> 00:06:14.820
we're going to retire it on June 1 2020.


00:06:14.820 --> 00:06:18.020
Or we're going to retire on December 31 2020.


00:06:18.020 --> 00:06:21.000
It's just, you know, within that year, kind of.


00:06:21.000 --> 00:06:22.520
So there's a couple interesting things here.


00:06:22.520 --> 00:06:26.260
This guy's like, alright, so when would be the ideal date to retire this?


00:06:26.260 --> 00:06:27.900
It would be PyCon 2020.


00:06:27.900 --> 00:06:29.100
Of course.


00:06:29.100 --> 00:06:34.340
So he says, I hereby suggest we make PyCon 2020, the official end of life date, and we


00:06:34.340 --> 00:06:38.620
throw a massive party to celebrate all the Python two is done for us.


00:06:38.620 --> 00:06:43.540
Python two, thank you for your years of faithful service Python three, your time is now.


00:06:43.540 --> 00:06:44.860
Sorry.


00:06:44.860 --> 00:06:53.060
So, yeah, I think this is a really cool idea to sort of encourage people to move from legacy


00:06:53.060 --> 00:06:55.380
Python over to modern Python.


00:06:55.380 --> 00:07:01.700
And it's fun to just, you know, have up if you're when you're leaving your desktop open


00:07:01.700 --> 00:07:06.280
going to have some coffee, you can just remind everybody around you that Python 2 is dying.


00:07:06.280 --> 00:07:07.280
That's right.


00:07:07.280 --> 00:07:12.100
Or if your non-technical manager says, "We can't really afford to upgrade that old Python


00:07:12.100 --> 00:07:15.300
2 code," you can say, "Well, here's the Python 2 death clock.


00:07:15.300 --> 00:07:17.700
So this is our time frame.


00:07:17.700 --> 00:07:20.260
This is an upper bound from when we should get to this."


00:07:20.260 --> 00:07:23.140
So this other one that you want to talk about is pretty interesting.


00:07:23.140 --> 00:07:28.460
It's kind of a design pattern, almost a pushback on some of the more intense design patterns,


00:07:28.460 --> 00:07:29.460
I would say.


00:07:29.460 --> 00:07:36.220
So one of the things that I always push, I don't always, but my red flag goes up whenever


00:07:36.220 --> 00:07:40.020
anybody follows something dogmatically.


00:07:40.020 --> 00:07:42.980
Like just, this is a best practice, follow it or else.


00:07:42.980 --> 00:07:44.500
I don't like that.


00:07:44.500 --> 00:07:51.580
This is an article called "Small Functions Considered Harmful" and it just takes a look


00:07:51.580 --> 00:07:57.500
at, there's a quote from here, "General programming advice doled out invariably seems to extol


00:07:57.500 --> 00:08:04.620
the elegance and efficacy of small functions. And I have seen that like this the author has


00:08:04.620 --> 00:08:08.380
to an extreme where sometimes people will go to the point where they're writing


00:08:08.380 --> 00:08:16.460
very small functions like one line functions and that and I think that's okay for some cases


00:08:16.460 --> 00:08:21.660
like complicated math maybe it makes sense but small functions that are only used in one place


00:08:21.660 --> 00:08:27.180
it actually doesn't help and so there's she goes through and talks about quite a few problems


00:08:27.180 --> 00:08:30.900
with small functions, including just making your--


00:08:30.900 --> 00:08:32.820
there's a lot of things that she talks about.


00:08:32.820 --> 00:08:36.300
But I think it just makes it code harder to read, to me,


00:08:36.300 --> 00:08:37.980
and especially to newcomers.


00:08:37.980 --> 00:08:39.660
One thing I didn't think about was


00:08:39.660 --> 00:08:43.500
if you're using classes a lot, adding more class functions


00:08:43.500 --> 00:08:46.420
just kind of litters up your class


00:08:46.420 --> 00:08:48.340
namespace, your interface.


00:08:48.340 --> 00:08:51.460
So it's harder to tell what the class is supposed to be doing.


00:08:51.460 --> 00:08:52.900
Yeah, I mean, you almost got to go


00:08:52.900 --> 00:08:55.620
to the level of using double underscores to make


00:08:55.620 --> 00:08:58.100
that stuff not show up, right?


00:08:58.100 --> 00:08:58.940
- Yeah.


00:08:58.940 --> 00:08:59.760
- Right, so it sort of hide it.


00:08:59.760 --> 00:09:00.720
So, okay, these are the internal things.


00:09:00.720 --> 00:09:02.260
These are little stuff I broke it into.


00:09:02.260 --> 00:09:04.480
I have mixed feelings about this.


00:09:04.480 --> 00:09:07.140
I am sympathetic to what Cindy says.


00:09:07.140 --> 00:09:09.760
I feel like she has a really good point.


00:09:09.760 --> 00:09:13.380
And certainly some of these like dry principles,


00:09:13.380 --> 00:09:18.020
some of the design patterns taken too much to an extreme


00:09:18.020 --> 00:09:19.100
are really painful.


00:09:19.100 --> 00:09:23.620
Like I would say one of the hardest applications


00:09:23.620 --> 00:09:32.040
I've ever worked on is this like 50 to 100,000 lines of code that was just fully abstract


00:09:32.040 --> 00:09:37.420
everything design pattern this dependency injection that and just every time I wanted


00:09:37.420 --> 00:09:39.700
to do something like where does this live?


00:09:39.700 --> 00:09:41.060
How can I tell what it does?


00:09:41.060 --> 00:09:43.680
I know like somehow it's assembled at runtime.


00:09:43.680 --> 00:09:47.740
So this thing happens, but like there's so many pieces and patterns contributing to it,


00:09:47.740 --> 00:09:49.300
it was really, really not good.


00:09:49.300 --> 00:09:52.180
And I think that's what she's kind of riffing on.


00:09:52.180 --> 00:09:58.300
But I also think there's, it doesn't hurt to necessarily encourage people to write small


00:09:58.300 --> 00:09:59.300
functions.


00:09:59.300 --> 00:10:00.660
But if they get too small, it is certainly a problem.


00:10:00.660 --> 00:10:07.820
My rule of thumb that I use is, does the function need documentation to tell what it does?


00:10:07.820 --> 00:10:09.660
If it does, it's probably wrong.


00:10:09.660 --> 00:10:14.380
Now that that doesn't necessarily apply to like, it's an API in a public package, and


00:10:14.380 --> 00:10:15.380
you've never seen it.


00:10:15.380 --> 00:10:16.380
Right.


00:10:16.380 --> 00:10:19.360
But in your own code, like do you need comments to tell you what that function does?


00:10:19.360 --> 00:10:23.380
Or does a short simple name tell you what it does?


00:10:23.380 --> 00:10:27.560
I feel like anytime I'm about to write a comment, and Martin Fowler, I think it's Martin Fowler,


00:10:27.560 --> 00:10:29.280
has a really interesting way of talking about comments.


00:10:29.280 --> 00:10:34.400
He says, "Comments are deodorant for bad code."


00:10:34.400 --> 00:10:37.080
I feel like if I'm about to write a comment about a function, I'm like, "Oh, this probably


00:10:37.080 --> 00:10:38.360
just should be rewritten."


00:10:38.360 --> 00:10:40.480
It's really clear what it does.


00:10:40.480 --> 00:10:44.640
It's certainly attention, but I guess maybe the warning is don't take it too much to the


00:10:44.640 --> 00:10:45.640
extreme.


00:10:45.640 --> 00:10:48.440
It makes it at least as bad or as bad.


00:10:48.440 --> 00:10:54.400
I want to touch on one more thing because I've been thinking about agile and agility a lot lately, especially with


00:10:54.400 --> 00:11:01.560
refactoring code and one of the comments she brings up is that breaking up your code into small pieces


00:11:01.560 --> 00:11:04.780
Can create premature abstractions


00:11:04.780 --> 00:11:11.980
So you're breaking it up into multiple pieces and that makes it harder to it might make it harder to refactor


00:11:11.980 --> 00:11:14.760
Once you completely understand the problem space


00:11:14.980 --> 00:11:19.220
So I think the time to break up things is


00:11:19.220 --> 00:11:22.380
after you've completely, mostly solved the problem


00:11:22.380 --> 00:11:25.580
and you're just making it maintainable for the future.


00:11:25.580 --> 00:11:26.580
- Yeah, that's an interesting point.


00:11:26.580 --> 00:11:28.780
Like once you fully understand and have solved the problem,


00:11:28.780 --> 00:11:32.180
like apply some refactoring tooling or concepts against it.


00:11:32.180 --> 00:11:34.380
And then it's much more likely to be stable


00:11:34.380 --> 00:11:36.740
and you've got the big picture and then you break it up.


00:11:36.740 --> 00:11:37.700
Sure, I agree.


00:11:37.700 --> 00:11:39.420
Nice.


00:11:39.420 --> 00:11:40.540
You know what I've been thinking about lately?


00:11:40.540 --> 00:11:41.360
- What?


00:11:41.360 --> 00:11:42.200
- Datadog.


00:11:42.200 --> 00:11:43.040
- Oh yeah.


00:11:43.040 --> 00:11:44.740
- Yeah, so Datadog, they're sponsoring this episode.


00:11:44.740 --> 00:11:45.740
Thank you guys.


00:11:45.740 --> 00:11:52.140
What they do is basically they let you have an entire view of your entire system, not


00:11:52.140 --> 00:11:53.140
just your application.


00:11:53.140 --> 00:11:57.580
You've got your Python code, but maybe your Python code is running on a web server, it's


00:11:57.580 --> 00:12:02.740
built on Flask, it's talking to MongoDB, it's hosted on a set of scaled out Ubuntu servers


00:12:02.740 --> 00:12:04.940
or on the Nginx and microWSGI.


00:12:04.940 --> 00:12:08.780
You can actually integrate Datadog into all those things that I've mentioned and get an


00:12:08.780 --> 00:12:11.840
an entire view of how your overall system,


00:12:11.840 --> 00:12:14.680
those things all taken as a whole work,


00:12:14.680 --> 00:12:18.920
not just logs or performance monitoring for your Python app,


00:12:18.920 --> 00:12:21.200
which is pretty awesome if you have a big distributed system.


00:12:21.200 --> 00:12:21.620
>> Yeah.


00:12:21.620 --> 00:12:23.680
>> Yeah. So they actually have


00:12:23.680 --> 00:12:27.720
a cool little tutorial you can take at pythonbytes.fm/datadog,


00:12:27.720 --> 00:12:29.960
and it takes just a few minutes and they'll even send


00:12:29.960 --> 00:12:32.720
you a cool Datadog T-shirt if you do the tutorial.


00:12:32.720 --> 00:12:35.840
So check it out at pythonbytes.fm/datadog.


00:12:35.840 --> 00:12:37.160
It helps support the show. Yeah.


00:12:37.160 --> 00:12:40.240
Yeah, if I do the tutorial, can I get a t-shirt even?


00:12:40.240 --> 00:12:41.240
You can get a t-shirt.


00:12:41.240 --> 00:12:42.240
I don't think you've been excluded.


00:12:42.240 --> 00:12:43.240
Okay, great.


00:12:43.240 --> 00:12:44.240
Awesome.


00:12:44.240 --> 00:12:45.240
Yeah, we could both go get a t-shirt.


00:12:45.240 --> 00:12:46.240
Awesome.


00:12:46.240 --> 00:12:48.840
So, we talked about the death clock a little bit.


00:12:48.840 --> 00:12:54.180
Let's talk about more sugar, less of a stick type of a thing to encourage people to use


00:12:54.180 --> 00:12:55.180
modern Python.


00:12:55.180 --> 00:12:56.180
I ran across this site.


00:12:56.180 --> 00:12:58.900
I can't remember where I found it, but it's really cool.


00:12:58.900 --> 00:13:01.440
It's called yPython3.


00:13:01.440 --> 00:13:06.200
And what it is, is if you pull it up, there's a simple little code sample of some Python


00:13:06.200 --> 00:13:08.840
three feature that's awesome that you can't use.


00:13:08.840 --> 00:13:12.400
There's a button like, "Show me another cool feature," and it'll randomly generate another


00:13:12.400 --> 00:13:15.720
code sample of something that you could do.


00:13:15.720 --> 00:13:16.720
I hit it a few...


00:13:16.720 --> 00:13:17.720
Isn't that cool?


00:13:17.720 --> 00:13:18.720
It's really simple and quick.


00:13:18.720 --> 00:13:23.820
I hit it a few times, I got annotations, so type annotations like functions say it takes


00:13:23.820 --> 00:13:26.980
two integers and returns a string or something like that.


00:13:26.980 --> 00:13:30.600
Keyword only arguments, which is pretty cool.


00:13:30.600 --> 00:13:32.560
a way to say like you're only allow,


00:13:32.560 --> 00:13:35.360
you can basically say like you must pass


00:13:35.360 --> 00:13:37.060
these certain arguments as keywords,


00:13:37.060 --> 00:13:38.760
which was not a thing in Python 2.


00:13:38.760 --> 00:13:42.160
Yield from for basically consuming generators


00:13:42.160 --> 00:13:43.680
and turning them into generators.


00:13:43.680 --> 00:13:45.280
Enums and a bunch more.


00:13:45.280 --> 00:13:46.600
You can sit there and keep clicking,


00:13:46.600 --> 00:13:48.400
give me another random sample.


00:13:48.400 --> 00:13:49.240
It's fun, right?


00:13:49.240 --> 00:13:50.060
- That is nice.


00:13:50.060 --> 00:13:50.900
- Yeah, cool.


00:13:50.900 --> 00:13:51.920
So just go play around with that.


00:13:51.920 --> 00:13:54.200
Actually, there was a few things that I learned about


00:13:54.200 --> 00:13:55.860
that I didn't know like the secrets.


00:13:55.860 --> 00:13:57.040
I just have no reason to really play


00:13:57.040 --> 00:13:58.520
with the cryptographic secret stuff,


00:13:58.520 --> 00:14:00.660
but that's apparently new in Python 3 and pretty nice.


00:14:00.660 --> 00:14:01.500
- Yeah.


00:14:01.500 --> 00:14:04.040
- So let's talk about something a little above the code,


00:14:04.040 --> 00:14:07.180
but something happens a lot in technical spaces.


00:14:07.180 --> 00:14:08.020
- Yeah. - Drinking.


00:14:08.020 --> 00:14:09.320
- Drinking, definitely.


00:14:09.320 --> 00:14:11.560
And speaking of secrets as well,


00:14:11.560 --> 00:14:14.160
there's a secret that is not so much a secret


00:14:14.160 --> 00:14:17.040
that not everybody drinks alcohol.


00:14:17.040 --> 00:14:19.480
So I actually got, I thought about this a lot


00:14:19.480 --> 00:14:22.920
because Trey Hunter brought it up recently on Twitter.


00:14:22.920 --> 00:14:25.840
And he said that a lot of the conferences


00:14:25.840 --> 00:14:27.360
and tech events that he goes to,


00:14:27.360 --> 00:14:34.000
He and I quote him. I feel I sometimes feel excluded when events include nice alcohol, but cheap soda


00:14:34.000 --> 00:14:39.080
And I've never really thought about that before and I want everybody else to think about it. And so there's this


00:14:39.080 --> 00:14:46.280
Acronym called ENAB e a n a b which is equally attractive non-alcoholic beverage


00:14:46.280 --> 00:14:48.400
And I think it's a cool idea


00:14:48.400 --> 00:14:55.360
so there's a tray also linked to us to got us on to a Stanford site because


00:14:55.720 --> 00:14:58.880
There is like an alcohol dot Stanford site, which is cool


00:14:58.880 --> 00:15:03.720
ENABs are required for all Stanford parties and it's a it's a cool idea


00:15:03.720 --> 00:15:09.360
So if you're gonna have like like let's say we have a get-together and you got like some specialty beers


00:15:09.360 --> 00:15:13.200
we'll go out and try to find some specialty local sodas also or


00:15:13.200 --> 00:15:18.200
make sure that you have a nice if you got a spiked punch make a non-alcoholic version and


00:15:18.200 --> 00:15:24.300
Then the Stanford site also has quite a few mocktail recipes that look easy and delicious


00:15:24.300 --> 00:15:27.920
Yeah, that's cool. And it those are pretty easy to do right like here in Portland


00:15:27.920 --> 00:15:34.440
I know we have a bunch of like locally brewed root beers, for example and things like that. Yeah. So yeah, hot lip sodas


00:15:34.440 --> 00:15:39.300
Yeah, yeah hot lip sodas. Those are really nice and not alcoholic unless you spike them


00:15:39.300 --> 00:15:45.880
and I think most events now think about having non-alcoholic stuff too, but it's the equally attractive part of


00:15:45.880 --> 00:15:52.960
Make sure that you're not getting cheap stuff. If you're going all out on the alcohols you could have either that really cool


00:15:53.600 --> 00:15:56.120
minty cocktail or RC Cola.


00:15:56.120 --> 00:15:58.000
- Yeah, and if you're in the Portland area


00:15:58.000 --> 00:16:01.200
and you are serving cocktails, let me know and I'll show up.


00:16:01.200 --> 00:16:02.360
- Yeah, yeah, exactly.


00:16:02.360 --> 00:16:03.680
I'll be there with you guys.


00:16:03.680 --> 00:16:04.640
- Yeah. - Awesome.


00:16:04.640 --> 00:16:06.760
So there's probably a theme, I don't know,


00:16:06.760 --> 00:16:09.080
maybe I was just in a particular mood today or something


00:16:09.080 --> 00:16:12.600
'cause I've kind of chosen related type of topics.


00:16:12.600 --> 00:16:16.340
But we've touched a few times on the popularity of Python.


00:16:16.340 --> 00:16:18.280
And I keep coming back to this,


00:16:18.280 --> 00:16:20.920
not just to like be a cheerleader and rah, rah, rah,


00:16:20.920 --> 00:16:21.940
things are great.


00:16:21.940 --> 00:16:23.620
But you know, people bet their careers,


00:16:23.620 --> 00:16:26.500
at least short term, on studying certain technologies


00:16:26.500 --> 00:16:28.500
and pursuing one thing over the other,


00:16:28.500 --> 00:16:31.940
show Node.js over Python and web apps,


00:16:31.940 --> 00:16:33.980
or something like this, right?


00:16:33.980 --> 00:16:36.860
So there's a really interesting article from Stack Overflow,


00:16:36.860 --> 00:16:38.740
and Stack Overflow, I think, is killing it


00:16:38.740 --> 00:16:42.140
in terms of deep insight into the developer community.


00:16:42.140 --> 00:16:44.380
And the title is not so bad here,


00:16:44.380 --> 00:16:46.840
it's "The Incredible Growth of Python."


00:16:46.840 --> 00:16:47.680
How about that?


00:16:47.680 --> 00:16:49.460
- Yeah, this is actually a fascinating article,


00:16:49.460 --> 00:16:50.660
so I'm glad that you brought it up.


00:16:50.660 --> 00:16:54.620
Yeah, so I just, it came out today, like just a few hours ago, I'm like, we have to cover


00:16:54.620 --> 00:16:55.620
this today.


00:16:55.620 --> 00:16:59.860
So the idea is they recently wrote it, this is not this article, previously, they wrote


00:16:59.860 --> 00:17:05.540
an article exploring how wealthy countries, those that are defined by high as high income


00:17:05.540 --> 00:17:10.620
countries by the World Bank, tend to visit a slightly different set of technologies than


00:17:10.620 --> 00:17:14.620
the counterpart of developers in the world.


00:17:14.620 --> 00:17:19.380
And they said, well, if we actually look at that set, the largest difference we saw was


00:17:19.380 --> 00:17:23.540
among Python programmers and the Python programming language.


00:17:23.540 --> 00:17:29.780
And in high countries, Python is even more popular, more extreme in its popularity than


00:17:29.780 --> 00:17:35.380
things like Stack Overflow trends, Google trends, and other language rankings would


00:17:35.380 --> 00:17:36.380
make it out to be.


00:17:36.380 --> 00:17:41.500
So they basically said, in this article, we're going to make a case that Python has a solid


00:17:41.500 --> 00:17:45.700
claim to being the fastest growing major programming language, period.


00:17:45.700 --> 00:17:48.300
Yeah, so did you look through some of the graphs in there?


00:17:48.300 --> 00:17:50.300
Yeah, well, the one that I didn't understand,


00:17:50.300 --> 00:17:51.940
hoping you can explain to me,


00:17:51.940 --> 00:17:54.460
is the predicting future growth


00:17:54.460 --> 00:17:56.100
looks like an even larger gap


00:17:56.100 --> 00:17:57.540
between Python and everything else.


00:17:57.540 --> 00:17:59.660
- Yeah, yeah, so they started out by saying


00:17:59.660 --> 00:18:04.060
in June 2017 was the first month that Python


00:18:04.060 --> 00:18:07.920
was the most visited tag on Stack Overflow, period.


00:18:07.920 --> 00:18:11.180
That's, of course, all those conversations


00:18:11.180 --> 00:18:12.980
restricted to these high-income nations, right?


00:18:12.980 --> 00:18:17.520
US, Europe, Canada, Australia, those types of places.


00:18:17.520 --> 00:18:20.100
But if you restrict your attention to those areas,


00:18:20.100 --> 00:18:23.640
Python is by far the most visited.


00:18:23.640 --> 00:18:25.960
It's actually grown two and a half times


00:18:25.960 --> 00:18:28.200
in popularity since 2012.


00:18:28.200 --> 00:18:30.940
And there's one that compares it to,


00:18:30.940 --> 00:18:31.920
there's a graph called


00:18:31.920 --> 00:18:36.120
Python compared to smaller growing technologies.


00:18:36.120 --> 00:18:37.080
But what was the first one?


00:18:37.080 --> 00:18:38.400
You asked me about which one?


00:18:38.400 --> 00:18:39.760
- Looking at future growth.


00:18:39.760 --> 00:18:40.580
- Oh, right, right.


00:18:40.580 --> 00:18:41.440
The prediction of the future growth.


00:18:41.440 --> 00:18:45.320
So they said, look, if we're gonna look at these graphs


00:18:45.320 --> 00:18:47.980
over from 2012 until now.


00:18:47.980 --> 00:18:49.740
And then the guy who wrote this article


00:18:49.740 --> 00:18:51.060
is actually a data scientist.


00:18:51.060 --> 00:18:52.380
And he said he used to do a little Python,


00:18:52.380 --> 00:18:53.380
but he only does R,


00:18:53.380 --> 00:18:56.520
so he doesn't really have much of a horse in this race.


00:18:56.520 --> 00:19:00.680
But he said, "Let's apply statistical modeling


00:19:00.680 --> 00:19:02.960
"to the growth curve out to 2020."


00:19:02.960 --> 00:19:05.200
And if you look at that, it's just like crazy.


00:19:05.200 --> 00:19:07.300
So they say, "Well, maybe there's gonna be a back and forth


00:19:07.300 --> 00:19:11.100
"with Java as students go back to school this month,


00:19:11.100 --> 00:19:14.100
"and they're gonna look up issues for their homework,


00:19:14.100 --> 00:19:15.700
because Java's taught a lot of the first year


00:19:15.700 --> 00:19:18.060
of computer science, said, but if you follow this trend,


00:19:18.060 --> 00:19:19.880
it's like, it's domination.


00:19:19.880 --> 00:19:21.880
It's basically what he said.


00:19:21.880 --> 00:19:23.340
There's another one that's really interesting


00:19:23.340 --> 00:19:25.220
'cause I feel like people compare this a lot.


00:19:25.220 --> 00:19:27.760
It says Python compared to smaller growing technologies.


00:19:27.760 --> 00:19:31.620
So Python often gets compared to things like Go and Rust


00:19:31.620 --> 00:19:32.460
in the data science world,


00:19:32.460 --> 00:19:34.980
it gets compared to R and so on.


00:19:34.980 --> 00:19:39.940
And there's a graph showing it just like 10, 20 times


00:19:39.940 --> 00:19:42.500
more popular and steeper growth curves


00:19:42.500 --> 00:19:43.540
than all of those languages,


00:19:43.540 --> 00:19:45.780
which I think is really interesting because people,


00:19:45.780 --> 00:19:47.940
people kind of see these shiny new languages and go,


00:19:47.940 --> 00:19:50.980
oh my gosh, this is, I should just abandon Python


00:19:50.980 --> 00:19:52.620
and go write Go or whatever.


00:19:52.620 --> 00:19:55.220
And that may be true for some particular case,


00:19:55.220 --> 00:19:56.500
but not in general.


00:19:56.500 --> 00:19:59.340
- Yeah, and some of the strong languages


00:19:59.340 --> 00:20:01.300
that we have been around for a while,


00:20:01.300 --> 00:20:04.940
like PHP, C++, Java,


00:20:04.940 --> 00:20:08.580
it's interesting to see that those charts are,


00:20:08.580 --> 00:20:09.980
they've been relatively,


00:20:09.980 --> 00:20:12.740
either relatively flat or slightly declining


00:20:12.740 --> 00:20:14.080
for the last few years.


00:20:14.080 --> 00:20:16.680
- Yeah, a lot of the standard well-known ones,


00:20:16.680 --> 00:20:18.000
the ones you named, right?


00:20:18.000 --> 00:20:20.880
They are definitely slowly, slowly trending down,


00:20:20.880 --> 00:20:22.600
which is not amazing for them.


00:20:22.600 --> 00:20:24.760
Yeah, so also related, there's another article.


00:20:24.760 --> 00:20:26.320
I almost covered this one,


00:20:26.320 --> 00:20:28.920
but in fact, this one was just so neat


00:20:28.920 --> 00:20:30.800
and had so much data behind it


00:20:30.800 --> 00:20:32.580
that I thought I'd rather cover this.


00:20:32.580 --> 00:20:33.440
But there's another one that says,


00:20:33.440 --> 00:20:35.440
"Python overtakes R to become the leader


00:20:35.440 --> 00:20:37.620
"in data science and machine learning platforms."


00:20:37.620 --> 00:20:39.040
So these are, of course, related.


00:20:39.040 --> 00:20:41.360
So I linked to that one in there as well.


00:20:41.360 --> 00:20:43.760
- Yeah, finally, one wrap up is this was applied


00:20:43.760 --> 00:20:44.820
to high-income countries.


00:20:44.820 --> 00:20:47.700
If you apply it to countries that are not in that group,


00:20:47.700 --> 00:20:50.840
they said Python has the exact same growth curve,


00:20:50.840 --> 00:20:53.520
it's just it's starting at a lower point.


00:20:53.520 --> 00:20:55.620
So they expect in the future, in a few years,


00:20:55.620 --> 00:20:57.740
that to also be able to make these kind of statements there,


00:20:57.740 --> 00:20:59.020
but there's like a lag,


00:20:59.020 --> 00:21:00.120
and they talk a little bit about that.


00:21:00.120 --> 00:21:00.960
It's kind of interesting.


00:21:00.960 --> 00:21:02.900
- Yeah, I'll have to go back and read those other article


00:21:02.900 --> 00:21:05.460
because I don't understand why the difference


00:21:05.460 --> 00:21:06.660
between different countries.


00:21:06.660 --> 00:21:09.700
- I didn't get a good, solid answer there either.


00:21:09.700 --> 00:21:10.540
- Okay, cool.


00:21:10.540 --> 00:21:12.060
but definitely worth checking out.


00:21:12.060 --> 00:21:13.620
- Hey, that's our six, man.


00:21:13.620 --> 00:21:15.100
So-- - That is our six.


00:21:15.100 --> 00:21:16.140
- That was fun.


00:21:16.140 --> 00:21:16.980
Well, what's up with you?


00:21:16.980 --> 00:21:18.220
What's, any news?


00:21:18.220 --> 00:21:20.260
- Well, I've been doing a couple things.


00:21:20.260 --> 00:21:23.060
I've been learning the joyful bit of


00:21:23.060 --> 00:21:25.780
the decay of online courses


00:21:25.780 --> 00:21:28.780
and been rerecording some of my online courses,


00:21:28.780 --> 00:21:32.340
sections of them as the web properties they depended upon,


00:21:32.340 --> 00:21:33.780
like web services or something,


00:21:33.780 --> 00:21:35.620
changed their model or went away.


00:21:35.620 --> 00:21:36.660
So that was fun.


00:21:36.660 --> 00:21:39.340
(both laughing)


00:21:39.340 --> 00:21:41.480
But it's all good to be able to keep that stuff fresh.


00:21:41.480 --> 00:21:44.240
Also, I'm going to Pi Cascades.


00:21:44.240 --> 00:21:48.280
So this is a new PiCon in Vancouver, British Columbia,


00:21:48.280 --> 00:21:51.000
beautiful place in the world, in January 2018.


00:21:51.000 --> 00:21:52.320
So I already booked my flight,


00:21:52.320 --> 00:21:53.720
and I'm trying to get you to go,


00:21:53.720 --> 00:21:55.180
and you're on the fence, man.


00:21:55.180 --> 00:21:57.040
- Yeah, I really wanna go.


00:21:57.040 --> 00:21:59.720
I don't know what my January's gonna look like yet,


00:21:59.720 --> 00:22:01.960
but I should decide soon so I can get a flight.


00:22:01.960 --> 00:22:03.320
- Yeah, you definitely should.


00:22:03.320 --> 00:22:04.400
Awesome, how about you?


00:22:04.400 --> 00:22:05.240
What else is new?


00:22:05.240 --> 00:22:08.120
- Well, I just got back from Germany,


00:22:08.120 --> 00:22:12.600
And one of the things I did there was I met up with the--


00:22:12.600 --> 00:22:16.760
I want to shout out to everybody at the Munich Python user


00:22:16.760 --> 00:22:18.840
group that, like, less than a week's notice


00:22:18.840 --> 00:22:20.400
decided to come together and hang out


00:22:20.400 --> 00:22:23.120
with me for an evening, which is totally awesome.


00:22:23.120 --> 00:22:24.400
And it was a lot of fun.


00:22:24.400 --> 00:22:25.920
We talked about PyTest, of course,


00:22:25.920 --> 00:22:28.000
but we talked about quite a few other things as well.


00:22:28.000 --> 00:22:28.520
Yeah.


00:22:28.520 --> 00:22:30.080
That's awesome they were able to put that together


00:22:30.080 --> 00:22:31.080
on short notice for you.


00:22:31.080 --> 00:22:31.480
Yeah.


00:22:31.480 --> 00:22:33.160
And then something happened just today,


00:22:33.160 --> 00:22:35.080
and I didn't even know it was going to happen.


00:22:35.080 --> 00:22:38.040
So the PyTest book I'm now no longer working on.


00:22:38.040 --> 00:22:43.640
The last beta was beta 5, but beta 6 just came out today, which is the...


00:22:43.640 --> 00:22:47.160
I wasn't involved at all, but it's all the copy editing changes.


00:22:47.160 --> 00:22:48.360
They fixed all my typos.


00:22:48.360 --> 00:22:49.360
Oh, nice.


00:22:49.360 --> 00:22:53.280
So this stuff has been pushed off to the editors and they're rolling it back out to the readers,


00:22:53.280 --> 00:22:54.280
huh?


00:22:54.280 --> 00:22:55.280
Yeah.


00:22:55.280 --> 00:22:56.280
And so it's just a...


00:22:56.280 --> 00:23:00.440
There's some magic machine now that turns it into a book, a physical book.


00:23:00.440 --> 00:23:01.440
So that's...


00:23:01.440 --> 00:23:02.440
Does your book have a version number?


00:23:02.440 --> 00:23:05.440
Like 1.3, 0.7, 0.6?


00:23:05.440 --> 00:23:06.440
No.


00:23:06.440 --> 00:23:07.440
It should.


00:23:07.440 --> 00:23:11.680
Well, I mean, it's all of it's stored in revision control.


00:23:11.680 --> 00:23:13.000
So it has versions that way.


00:23:13.000 --> 00:23:16.440
But yeah, just as a shot really long, hard to make any sense of.


00:23:16.440 --> 00:23:17.440
Awesome.


00:23:17.440 --> 00:23:18.440
All right.


00:23:18.440 --> 00:23:19.600
Well, it's great to be back together with you, Brian.


00:23:19.600 --> 00:23:23.720
I think we're both gonna be relatively stable for next few episodes, probably.


00:23:23.720 --> 00:23:24.720
So that'll be good.


00:23:24.720 --> 00:23:25.720
Yeah, definitely.


00:23:25.720 --> 00:23:27.480
So thanks a lot.


00:23:27.480 --> 00:23:29.320
Thank you for listening to Python bites.


00:23:29.320 --> 00:23:31.840
Follow the show on Twitter via at Python bites.


00:23:31.840 --> 00:23:34.960
That's Python bites as in b y t e s.


00:23:34.960 --> 00:23:38.240
get the full show notes at PythonBytes.fm.


00:23:38.240 --> 00:23:41.920
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:23:41.920 --> 00:23:42.920
way.


00:23:42.920 --> 00:23:45.440
We're always on the lookout for sharing something cool.


00:23:45.440 --> 00:23:48.880
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:23:48.880 --> 00:23:51.920
Thank you for listening and sharing this podcast with your friends and colleagues.

