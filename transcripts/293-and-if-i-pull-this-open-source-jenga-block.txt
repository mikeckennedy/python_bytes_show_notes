00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 293, recorded July 11 2022. And I am Brian knockin. Hey, I'm

00:00:12 Michael Kennedy.

00:00:13 And I'm Ashley Anderson.

00:00:15 Well, welcome Ashley, before we jump in, tell us a little bit about who you

00:00:19 are. Yeah, I'm a software developer, I work for a relatively small, but sometimes growing startup out here, we make a portable MRI machine. So I'm one of these software developers that came from a academic background. I studied biomedical engineering and medical physics. And then this is kind of my first full time software gig. But I think in research, like everyone's doing software these days, so a lot of people are making that jump. And this was a perfect opportunity for

00:00:45 a portable MRI that that's gonna be fascinating. Cool, very cool.

00:00:49 How do you find the transition from this more researchy? side over to this, maybe more formal dev roll?

00:00:55 Yeah, it's like just such a better fit for me. Like in my research labs and stuff, I was often like, way more interested in helping build tools and stuff to help accelerate other people's work. Rather than, you know, diving into the research myself, I often found that to be very frustrating, and maybe I wasn't the best at it or something like that. So this has just been a much better fit for me. All right,

00:01:16 cool. Well, let's jump into your first topic. What do you got for us?

00:01:20 Sure. Yeah, the first thing I wanted to talk about was, I think this is kind of the big news since Friday, the PSF. And peipsi announced that they're giving away 4000 of these two factor hardware keys. That's maybe kind of gotten washed out in this, but it's kind of a cool effort. I saw this from Dustin Ingram's Twitter. And I know he's been involved in a lot of the urban been interested in kind of outlining a lot of the security concerns about supply chain vulnerabilities and stuff in the past, I thought this was really interesting idea for helping with supply chain vulnerabilities, or at least kind of taking a step in that direction. And I think it's just the peipsi, you know, sort of first step in this direction, they announced some other stuff in the past about maybe having private packages or organizations on there and namespace packages and stuff. But this was a pretty cool thing to do. It looks like they're gonna roll out two factor as a requirement probably eventually, for everybody. The way they're starting it now is kind of for some of the most popular packages. And for people who have those popular packages, I'm not one of them. They're offering codes to get some of these hardware keys to help that interesting.

00:02:31 Yeah, there's been a bit of a backlash to this actually, which, on two levels, some people just expressing a little bit of frustration, and others more. So see item two coming up. One thing I think is interesting about this, this whole side of things is like the original thing that you brought up, Ashley, as people I think are focusing on their hardware keys. And I wow, that's a cool idea. I think the bigger story is just to FA, forget hardware keys, like harbor keys are one way to do to have a right but if you look at the actual giveaway, I think it's limited to certain locations, right? Like, I can't remember what all the locations were, I feel like it's kind of North America, Europe and Australia or something in that general realm. And you can entirely have a popular, what is now known as a critical Python package, and not leaving those locations, right. Yeah, for

00:03:24 sure. I suspect a lot of them. A lot of the maintainers of those packages are not in some of those locations. I think those are probably dictated by like export rules on certain cryptography, but I hadn't

00:03:34 thought about that shipping thing, but you're probably right about that, actually. Yeah. Oh, yeah. So the, there's a little bit of a push back and like, Hey, I'm doing this for free. Why are you making me do this extra work setting up these keys? And that's kind of why I've, I said, I feel like it's, it's kind of the headline has missed the point here. Because to say, Oh, I've got to get this hardware key and set it up is not technically true. You just have to use two FA of some form, right? It could be with like the standard two FA you have with your phone or maybe it even SMS would work. Although SMS is a sketchy or better than nothing form have to have a like, suggest if I'm going to

00:04:13 some people, sorry, some people say that SMS really is like a pretty insecure version of of two FA. So I think they do

00:04:21 sometimes they say like, yeah, yeah, it would be better. But like, at the same time, if you don't have any to have a, there's still another step, they've got to hack your SMS, somehow, to get through that the SMS stuff, which is better than just like, they just get your password or they get it from a password breach. So it's even for all the criticisms of SMS as a to FA, it's still not a negative. It's just not nearly as good as the other options.

00:04:46 I'm just chuckling because I just got an email last week about from was it on the eighth of July, saying, Hey, you're a critical you're your maintainer of a critical project. And and they want me to set up to FA and I just haven't read it yet. So I like I, this is news to me. And it's it's a pipe test plug in I've got that supposedly as a critical project. Go figure.

00:05:12 Oh, that's awesome. The definition people are wondering, I saw Wilma Coogan asking on Twitter like, does anybody know what this means where you got this to the definition from what I understand is you are in the top 1% of downloads for a moving six month window. So in the last six months, your project is in the top 1% of most used most downloaded. Wow. So congratulations. That's all.

00:05:39 Cool, I guess I'll read the email more closely. Yeah, you have that up?

00:05:43 Ashley, did you do you know what happens if you just are like Brian, like I don't spam doesn't matter to me. Just ignore it?

00:05:50 That's a good question. I guess eventually, they'll probably not let you upload. If you don't enable it like next time you go to login or upload it package. It'll just say, Hey, you have to turn on two FA? Because like you said, you don't have to have the key. You just have to have two FA on. So I

00:06:04 clicked. I clicked on the the Manage and it says I've got a little big banner up there. I'll just pop to it right now. Or is it done here? We go ahead and show this. I get this project is included in the two factor mandate for critical projects in the future, you will be unable to perform this action without enabling two factor auth. So I think I think you're right, I think it's just going to kick me out of being able to to do anything with the project. If I don't enable this. Yeah. Interesting.

00:06:36 Interesting. This is cool. Brian one. I think Teddy is right out there like congrats, Brian's on fire. I just checked by the way people listening is the login. But it's cool to see it live to see what's happening. So this apparently is what maintainers get. And I'm with you actually, I think what's going to happen is you just you won't be able to upload with twine anymore, you won't be able to log in, you won't be able to make changes, it'll just force you down to a fake path.

00:07:01 Yeah, I read that you still can upload because like people want to do I know there was some people initially concerned about like, how do I do automatic uploads from my CI system or whatever. And you can do it if you get a token. But you have to like generate one of those tokens with your TSA enabled account

00:07:15 to do that, right? That happens with all the two FA accounts, right? You can no longer use your GitHub password for like all the CLI, like, once you set up give GitHub to a Fae, then all of a sudden, you've got to go create an app, give it a name and get like an API token for it and stuff like that. Right? I think that's okay. Yeah. So Brian, let's let's ask you like, how do you feel about that? Does it seem like a big burden to you? Are you okay with this, or,

00:07:37 you know, I was I'm okay with it, because I think it's, it's securing the supply chain. I mean, I've already enabled the two factor authentication on GitHub. And I've got, you know, a bunch of banking stuff that I have on, you know, multi factor authentication and stuff. So I'm waiting for 12 factor authentication. But that might be a bit extreme.

00:08:02 Right now, you put your small pinky toe onto the key reader over there, and then you hold down this key with your other finger.

00:08:10 Yeah, an optic scan a blood scan, you got to have, you know, deposit, a urine scan, and all sorts of stuff you got to do.

00:08:18 I know. I've drawn the line. They're not doing it.

00:08:24 So no, but I'm fine with it. I don't know the details yet, though. If I gotta get a hardware key, though. I'm going to be a little upset, I think.

00:08:34 For free, but yeah, even even even getting one for free. I feel like if I'm not a hardware key guy, I don't know.

00:08:40 Yeah. Well, what if I lose it? Ah, so yes.

00:08:43 First of all, let me preface this statement with please don't email me. If we disagree on this, it's fine. Just don't email me. We can just agree to disagree. But I am personally not a fan of two FA hardware keys. Because what if you lose it? It's really bad. If you I now all of a sudden, if I'm What if I'm traveling and like the website is down? And I've got to log into the the ISP to the cloud system to make a change? Did I what if I forgot to bring the key? Or what if I do bring it then I lose? Like just the fact of having a physical key that has to always be with you. Like, do you take it with you when you go swimming? I mean, that's a little extreme. But like, if you're gonna go to the beach, and you might need it, what are you going to do? And then if I only have my phone, I can't plug the key into the phone? I don't know. It just it seems like I certainly know why you would have it at like if I worked at a bank, and I needed to get on the VPN. And I needed to have that permanently stuck in my computer. Fine. But as a broad based solution, I feel like things like Authy, Google, Google Authenticator, the Microsoft, whatever it's called all those things. I think they still provide a pretty strong level of security while being able to travel with you and be able to synchronize across devices that you might not always have them with you. So yeah, when people say it's always such a hassle to get these keys like you could do sethupathi you know what I mean? Yeah,

00:10:02 yeah, I use. I'm also a little freaked out by the hardware kids. I did find it interesting in the giveaway. Actually, I think they give you a coupon to get to. So that, like you could get to in case you lose one. But that, to me just is exactly why I don't want one.

00:10:19 Exactly. Well, okay, so I've got one plugged into my computer, and I put one into the closet, if the house burns down, what am I going to do? I mean, I'll probably I'll grab my phone and run maybe if I can get to it. But I'm not gonna go rooting around for hardware key. I'm just gonna get out. You know what I mean? There's is there's just all these, like, sort of weird edge cases that to me, I'm just like, I don't really want to hand on one of these hardware keys. Yeah, Brian

00:10:41 is gonna have to go to the bank and his safe deposit box just to upload a new PI test check. Yeah, exactly. Right. I

00:10:48 turned both keys to the right on three to one cheek. Okay. V one, two 1.2 is out. Yeah. Okay.

00:10:55 I would just read the article here from Armen. Yeah. Which was super interesting, I think. And it was, this kind of gets into, it'll probably lead us into the next topic here of why there was a little bit of controversy around this. And I think it wasn't so much that people are resistant to two factor. It's more this designation of packages that is critical. And I don't know if that's just because like critical is a bit of a loaded term, or it ended up feeling a little bit like a popularity contest. But yeah, it's pretty clear to me that pi pi wants to know, which is an open source project itself, right? Wants to eventually probably roll this out to everybody. And maybe he doesn't have the capacity for that right now or something.

00:11:33 Yeah, I totally agree. And Armin Paik is quite interesting. And he comes down a little bit, you know, on the middle, like I see the value, but also, I see why people are a little bit frustrated with this. He does talk about this thing that the rust community has, you know, hat tip towards topic bores? Well, the called cargo vet, which is the idea of vetted packages and unvetted packages. So if you when you pip install something, you could say something like to do, I only want to allow like the higher bedded packages. IPI doesn't have this at the moment, but other package indexes due to me again, coming back to the hardware thing, I feel like people saw this, I gotta go to the hardware key like, this seems like I can't believe you're forcing this on me. If if you're a software developer in 2022, and you don't have any form of to have a setup, I that's, I feel like those are the people who got really frustrated, but at the same time, like what, you know, what are you doing on the internet in 2022, without at least a few things on to FA, my Authy account has something like 46 Different do a phase in there. One Password has like 1000 accounts, I don't know, it doesn't seem like a huge burden to hold up your your phone, scan a QR code and carry on. But if you're not in the to have a space, and especially if you perceive that to me, and I gotta get into the hardware to a face base, I can see why people would see this as frustrating. And with that, maybe it's time to just move to the next topic number two, which is IPI move to require to FA for critical projects, which is this here. But what's really interesting is there's there's sort of talking about the challenges. And one of the things that happened is there's this project called atomic rights, which was designated as critical atomics rights, that what it actually does is pretty straightforward, is it let's use the context manager to write two files atomically. So you can write to the file, write the file, if there's some kind of rash or mistake or bug or something, it won't actually change the file. So normally, you would just do like wild true start writing. And if something crashes, like you'll have a half written file, so this is kind of cool. It says what we're going to do is use a context manager open file, we're going to write to a temp file. And then when you exit the context manager successfully, we're going to apply all those changes by doing an overwrite move type of operation at the OS level. I don't know how truly atomic it is, but it sure is better than writing line by line. Right? And certainly, it has the data safety aspect, which is pretty cool. Anyway, apparently people use this as in 127,839 packages. Maybe that number was higher, not long ago. Packages projects on GitHub use this, I guess not packages, but projects, many of which were packages themselves. So this this guy, Marcus wouldn't have voted sir went to validator Marcus validator said, You know what, this is really frustrating to me. I don't want to set up to have a, so I'm just going to unpublish this take it down. And so I don't know exactly what the chain of events was. I think something happened to the GitHub repository getting deleted, which then triggered maybe also somehow triggered a delete of all of the historical IPI packages, whatever the steps were, it erased all the historical peipsi packages. So imagine your project has a dependency on atomic rights and and your requirements dot txt or project automall. Or whatever says equal equal, what version? Are we on, we get some releases here. There's no releases anymore. So I can't tell you. But if you had like some concrete number there, it would say it would say can't find that. Sorry. And so all sorts of started breaking, continuous deployment, continuous integration, a bunch of pi, pi, pi, pi tests, packages, tests, and automation and stuff. Brian, maybe you saw some people going, what's going on with this thing?

00:15:29 I didn't really notice it. But

00:15:33 you'd only notice if you depended upon this ad set up automation, right? Like basically check out your code, install the dependencies run pi test, but people were like these tests used to pass why are they no longer passing? It's because PIP couldn't install this project that Marcus got a little frustrated with and deleted out of IPI. That's interesting, right? Like, if you've done that, I don't know. Here's his sort of comment saying, here's what you got. And it says pipe. Yeah, I just told me to enable to FA to keep uploading this package, because I thought it was annoying, and entitled to guarantee the software compliance for a handful of companies. Basically, his take was, you're making me secure the supply chain so that large banks and other companies that care about it will feel better, and you're making me do extra work, again, that I think the confusion about hardware, moving to hardware to a fe versus just scanning the QR code with your phone anyway, and making me do extra work. And so I deleted the packages apparently deleted all the old versions, sorry. Those have been restored by directly working with a belief Dustin Ingram from peipsi. So if you go down here somewhere, it says, no, sorry, Donald stuff, just the one here. But yeah, it shows you, I guess, unintended consequences, hey, we're going to make atomic rights a little safer. maintainer of atomic rights doesn't like that delete that makes everything break. Actually, what's your take on this? You've been tracking it?

00:16:55 Um, yeah, I mean, I find it really interesting. Like, it gets to the whole, you know, what is the sustainability of this giant, open source ecosystem that we have? I know, I think in the in the shownotes, you refer to this as pythons left pad incident or something like that, which is sort of a throwback to a very similar thing that happened in npm. That recently, I think there was another one recently, like, the start of the Ukraine war, basically, where someone I think, pulled their package and, and put in something that was like protest wear or something like that.

00:17:28 It tried to delete all the data off the hard drives, if it detected you're in certain countries or something, which is pretty, pretty rough,

00:17:36 and pretty extreme measure.

00:17:39 What What if you were working to collect data about trying to help Ukraine, but you happen to be in this other country? I mean, this is yeah, it's just overstepping, I think a little bit unintended consequences. Yeah,

00:17:52 but this is like, I mean, we're working in industry and having to pit our packages and stuff. This is something that, you know, we kind of already protect for by mirroring, you know, I think most people with, I'm gonna use critical not in the way that's being used here. But like, when you have a project, and you're using all these dependencies, it's kind of also on you to know that like, well, the supply chain, I mean, IPI doesn't have a permanent retention policy, maybe it should, but that is going to lead to, you know, potentially much even even bigger hosting costs, and everything for what's already a really expensive project, we run into the same thing with like, packages from Ubuntu and stuff like that, as well, not that they get pulled in this way. But they'll bump versions on us that, you know, and especially in a regulated industry, we can't just update dependencies whenever they come out. So

00:18:36 it wouldn't surprise me to see peipsi become immutable. When I wake up, they're like, You can't do it anymore.

00:18:42 So but yeah, I would expect it to be more of a request that he put in a request and say, hey, I want to this is mine, I want to take it down. And some review happens or something. Because people depend on it. And I get I get I kind of get both sides of it, I get that it's my thing, I should have complete control over it. But I also don't, I don't have complete control over GitHub, I don't have complete control over pi pi or the PSF. And I use those services. They can like the PSF for instance, I got to they like purge all of your accounts, like once a year or something like that, you have to re you have to re log in or recreate your account. And, and you know, projects and services change their policies every once in a while and and this is a change in policy that for some projects, we're going to require to FA it, they can do that. And if I want to continue to use it, I have to now if I don't want to continue to use it that that's a get. I guess that's where we're getting the question in is what ramifications are there? Can somebody take their take their stuff off of pie or not? Dunno, yeah. So,

00:19:52 yep. I think that if you read a lot of the conversations here, and maybe we'll just close up this whole section on that. It comes down to two different release one, I should, it's my code, I wrote it, I can do whatever I want. I own it, if I don't like it, I can just delete it. If I want to stop, I can stop. The other one says, once you put it out there on GitHub, and you've put it out to the world, as here's a library that you can use independent on, and you publish it to the index with a clear intention of sharing it, you have a miniscule responsibility not to keep working on it, but to not destroy it for other people who are building on what you previously did.

00:20:28 Yeah, I think there's a difference there too, between like writing and publishing the code and publishing a package or distributing a package that's intended to be, you know, conveniently downloaded in CI and stuff like that, where you're kind of making a little bit more of a promise there. But also, I mean, going back to Marcus's post here, it sounds like he is intention wasn't to break, you know, people's existing workflows and stuff like that. It was really, he just didn't want to be the maintainer of a critical package. And

00:20:53 exactly, he's like, I knew that that fixed it.

00:20:55 Yeah. And then became like this, you know, the sort of poster of this controversy. So yeah,

00:21:01 yeah. Yeah. If you read Marcus's Twitter, you can go back into Are you kind of get a sense that he's the kind of person that would not want to take that kind of stuff being put upon him or whatever. Let's wrap it up with Teddy's coming out in the audience. Feels feels like a small step to able to have a I wonder why it creates so much debate feels bit political, especially today. We're to a face record almost everywhere. Yeah, I'm, I agree. I think, again, I think people saw the here's your hardware key, like, I don't want to hardcore key. There's so much work. Let's let's move on. Brian, that was a good one. But let's fast. Let's get out of there.

00:21:34 Yeah, fast. A harsh transition. Yeah, let's just talk about fat fast API, you know, anyway, don't transition from that. So that's good, fast API filter came up, it was suggested by Arthur, Arthur Rio, who is also the creator of it. And it looks pretty cool. So it's, um, he, he said in a tweet, I love using I loved using Django filter with Django rest framework. And they wanted an equivalent for fast API. So what this is, is a package Add to Project that uses fast API. And with it, you get like when you're going through the the cool debug user interface stuff. You can filter stuff, so you can, you know, it'll look at your, your schema, and then you can, you know, filter different items, and only only see part of it. And it's just pretty neat. He also, it also has things like the filters, support operators, like greater than, greater than equal, less than nadion, and things like that. So it's kind of a fun way to just filter when you're looking at your data to filter it. In, in his readme, he mentions that he's got a video, and you kind of need a big screen for this, but but he does have a video to show it in action, which is kind of cool. He shows filtering some of the data, and then seeing the different data output. Anyway, just just kind of a neat, nice debugging tool. If you're using fast API.

00:23:05 That's really awesome. Actually, do you do anything with fast API?

00:23:09 Unfortunately, no, this just makes me more jealous. I think of the people who get to use fast API because it's got all these cool. I mean, as a developer, I've played around with it. But like, it's got all these cool, sort of debug admin interfaces. And then you see even more stuff like this kind of built on top of that. It's really awesome.

00:23:26 Yeah, absolutely. Yeah. And it's a fun one. I'm, I'm planning on learning more about fast API on Michael's upcoming course. So

00:23:34 yeah. Are you gonna be able to make a brain?

00:23:38 I'm gonna make sure I can make it. Yeah. Awesome. Yeah, look forward to that. Yeah, that's

00:23:42 the live in person fast API course I'm doing out a month from now, so should be fine. Before we move on, I do want to talk about our sponsor for this week, Microsoft for startups, founders hub, they're doing super cool stuff. As someone who has started his own small business, it is a lot of work. And there's a lot of uncertainty and knowing how to get help, and having supportive people who have experience is really, really valuable. Starting a business is hard. They say that by some estimates. 90% of all the startups will go out of business in the first year, which is tough, but that's how it is. With that in mind Microsoft's for startup set out to understand what startups need to be successful and create a digital platform to help overcome those challenges. And that's where they got their founders hub. So Microsoft for startups, founders hubs provides all founders at any stage with free resources to help them solve startup challenges. You get technology benefits, access to expert guidance and skilled resources, mentorship, networking connections, and so much more. So, in unlike a lot of other similar programs in industry, it doesn't require startups to be investor backed or third party validated participate. Founders hub is just open to everyone. So when you get you get, you can speed up Your development with free access to GitHub and Microsoft Cloud resources that have a bunch of credits that unlock over time so you can grow without worrying about paying for stuff. They also help startups innovate. They're partnering with companies like open ai, ai research and deployment company to get extra benefits through their partners as well. It's so with the founder tab, it's not really about who you know, you have this access to this mentorship network. So you get access to a pool of hundreds of mentors across a range of disciplines in areas like idea validation, fundraising, management, and coaching, sales and marketing, and specific technical stress points, I think that might be the most valuable honestly, is, hey, I need to talk to this person or somebody is this a good idea is this How should be doing and so on. So you can book a one on one meeting with mentors, many of whom are founders themselves. Make your idea a reality today with critical support that you'll get from Microsoft. For startups founders hub, during the program, visit Python bytes FM slash founder's hub, the click the link in your show notes. And yeah, thanks, Microsoft for supporting the show.

00:26:01 Nice. Indeed. So what do you got for us next, Michael?

00:26:05 Ashley's next. And let him go next? Oh, yeah,

00:26:08 yeah, we'll scroll down to mind. And yeah, so I guess I think kind of the reason I'm here, I emailed you guys after there was some discussion on the podcast a few weeks ago about, you know, hey, we're seeing a lot more stuff built in rust. And you you had some good points about, like, why we're seeing that. But I thought super relevant to this podcast is this project. And in fact, this whole organization, Pio three on GitHub, has a number of projects in here that are, you know, super relevant to Python developers, obviously. So the main one, I think, is Pio three, which is is rust bindings. And basically, what I emailed you guys was the my hypothesis, the tooling around building extensions for Python, in Rust, or calling Python from rust is getting so good and so easy that like, for me, I find this preferable to writing C extensions, for example, now, not even necessarily because of rusts. Although Rust is a really great language I've been getting into over the last year. But just like that, that tooling aspect of it is really great. So that the experience is is pretty awesome based on, you know, these separate projects. So there's Pio three, which is the bindings. And this allows you to basically use these types of things. It's almost like a function decorator, these are called procedural macros. They're kind of tricky to write, but they're really easy to use. So you just put this on there, and then use this one to create a module, add your function to the module. And then if you build this file, you can import it in Python and run this function. So the combination of you know the ease of writing this and then there's another project in here called maturing before you

00:27:43 move on with you real quick, maybe, for people listening, if you go back real quick to that that section you had there? Yeah. So the idea is, what you do is you you write some rust code, and then you put you call it a decorator or an attribute, or what do you call that hash?

00:27:59 It's called a macro. Yeah, a procedural macro. But you can just call it a macro. Yeah,

00:28:04 yeah. So you put the macro on to function. There's one function that defines the module. And then in there, you just say, you are basically all the things I'm exporting from rust over to Python. And those are just the ones you've wrapped with the macro, right? Yeah, assuming that writing rust for you is straightforward. This is a really simple addition.

00:28:23 Yeah, and I think, you know, once you once you have this kind of, you know, there's a little bit of boilerplate in here. But these macros reduce the boilerplate so much, that once you're in the function, in fact, I think this is like a really cool way to get started with rust, because some of the really steep learning curve and rust is when you're building larger projects, and you have to deal with, you know, strict typing and lifetimes and all these scary things that you know, rust can do, but like, you're limited to just a function scope, because that's what you're calling from, from Python. I think it's a kind of a cool way to get started and just get familiar with the syntax. Interesting. Yeah, yeah. And yeah, I think part of the reason these tools are so great is like, the whole Russ community puts a lot of value on tooling. It's like a relatively young language. So from the start, I think it had this sort of, you know, attitude of, of building good ergonomics for developers having good, you know, a single command line tool kind of can do all these different things. And so this group that that maintains Pio three has also created this tool called Maturin, which feels to me a lot like flit with, you know, like the super lightweight wheel builder. And so you see here, you just run mature and develop with this, this project structure in here, it also has like a mature in it, I think, which will create a new project for you. And then you see here, this developer will actually, you know, give you some output, whatever, because it builds a wheel, and then installs it in your virtual environment. And so you can see here you guys call into that code, and then this is, you know, calling rust code for you already.

00:29:47 Oh, cool. That's really nice. So have you built things that you've released? Or are backed by rust, you know, not released,

00:29:54 but like I've done you know, some hobbyist things and then also some Uh, stuff for, for work as well, some small pieces of mostly like, you know, I work in, I came from a scientific background and I now work for this, you know, like I said, a portable MRI startups, our whole thing is like Python from from top to bottom, which is really cool. But for those performance critical numerical computing things, we use a ton of NumPy and TensorFlow, but then also some C extensions, and I've been just kind of playing around with converting those to rust. And this Ross NumPy is another one of their projects here, that makes it really easy to you know, write a function that will take a numpy array, basically, and do some calculations on it.

00:30:36 Oh, fantastic. Rust NumPy is it like a interoperability layer between rust and NumPy?

00:30:43 Yeah, it pretty much just lets you like, take NumPy arrays from Python into your rust functions that you're creating with PI oh three, and then also, you know, create NumPy arrays and return them from those functions. And it it depends heavily on nd array, which is a pure rust project here for for n dimensional arrays and computations. So it's probably more analogous to what actually NumPy itself is but in the Rust ecosystem,

00:31:08 okay, very, pretty cool. So why rust over? See,

00:31:14 I mean, I think it's, I was mentioned to you before, like, you know, the rust community is, is really excited about rust. Like everyone who tries it likes it, I think it's, you know, topping the charts and all these, you know, most loved programming language surveys and stuff like that from Stack Overflow and everything. It guarantees, it provides some more stronger guarantees around memory safety, and while still maintaining high performance. So that comes at a cost of a little bit of like complexity and learning curve. It also happens to with those memory safety things like come with what they call fearless concurrency, where the typing system can prevent you from creating race conditions and actually warn you about them or, you know, fail to compile at compile time. And so I find like, the trade offs between memory safety and performance and ease of use to be really interesting between rust and Python, they make completely different choices. But like both sort of, with similar things in mind, like Python sacrifices, some performance for ease of development, but still wants to be memory safe, right? Like, if you're getting a segfault. In Python, you're calling into something and doing something wrong. Or it's hard to do that with pure Python code, right. And same is true of rust, it's like, if you're not writing what they call unsafe code, where you have to kind of wrap it in a block that's actually called unsafe, you shouldn't end up with those type of problems. So it's, it's kind of cool to see those two things. And then when you really do need performance, you can drop into this sort of lower level language, maybe it's a little bit steeper learning curve, but you'll get the performance and you don't have to sacrifice that memory safety to get it.

00:32:45 Yeah. Fantastic. Brian, you do more stuff than I do these days. What do you think?

00:32:51 There's, there's some bottleneck stuff that things that I use Python for that we do have, like, large amounts of data passing back and forth. And, and I don't mean, normally, Python isn't the bottleneck, but sometimes it is. And there are cases where I'm, I was just Googling some stuff right now trying to figure out if I can apply rust to some of these things, because I actually, I think that's what Ashley pointed out is fascinating is, this might be a really great way to learn rust is to try to solve one of your bottleneck problems in Python with with with rust. And I mean, I'm comfortable with C as well. But there's that, even though I've been doing using it for decades, that I'd rather if I can use something else, I would like to try

00:33:39 something a little more moderate. I totally agree. And yeah, you're right that, oh, I need to implement these three functions in rust and then plug them into Python that's different than I need to completely learn rust. So I can just do this whole project in rust. Yeah, yeah,

00:33:53 it's a narrow scope. Kind of a cool way to try to learn something.

00:33:58 Yeah. And these, these projects have like a ton of great examples. A few of them have user guides and stuff like that. So plenty of material there to get you started.

00:34:06 Nice. Cool. Cool. Yeah. Very, very good one. Thanks, Ashley. All right. Have you ever heard that regular expressions are easy? Yeah. Right now. But here, Brian, let me let me type something. I'm going to type this. I'm gonna say okay, I want a dot plus, and then I want, I'm gonna write the word fun. I'm gonna write as a backslash D plus, I don't even know if that's a proper regular expression. But what is it? What does it do? So I want to introduce you to this site called Auto reg x. And this comes to us from Jason Jason Washburn. Thank you, Jason for sending this over. And the idea is, I can put a regex in here and hit go. Wait, hold on. I just do this one. Do a simple one for a second. What am I missing here?

00:34:51 I think you have that. It's backwards.

00:34:54 Yeah, yeah, it was two why was it doing that? That was Yeah, so first of all, yeah. Okay. So let's start with That's actually that's the default direction it pulls up. So what I can do is say, I want a regex that starts with fun than any number. Right? That. Okay, and then it says, uh, you know what? What you want is carrot fun dot star regex. Oh,

00:35:19 is that right? Quite right.

00:35:21 Well, this is start starts with,

00:35:24 but Dogstar, I think is any character. Yeah.

00:35:27 Oh, then how about Yeah, it's not perfect, then the same numbers. There you go. Yeah, you got to it's not perfect yet understanding English, but I wrote an English sentence to it. And I came up with a regular expression. It says disclaimer, all outputs are generated by open AI is GDP three. Sometimes it makes sense. Sometimes it doesn't. But you can also do the reverse. Yeah, let's do the reverse. I'm going to make I'll try to go back to my other asset, or say carrot, then dot loss, and then fun and backslash. Let's try and do it in reverse. So run it again. And you wait for a second, since the regular expression means the string must start with any character, then there must be one or more characters before the substring fun. And then there may be any number of digits after the substring fun. What do you think about that? It's not quite right. I think it only matches.

00:36:17 One. Yeah, maybe only matches one. Yeah. But still, the trick for me too, is that regular expressions are like different depending on your platform. That's what always trips me up. I'm like, Ah, yeah. So

00:36:27 this is a really cool tool to almost understand regular expressions.

00:36:32 Yeah, so here's how I would perceive this. I would say, I wouldn't use this and just go writing all my regular expressions. But if I'm like, I really don't know how to get a regular expression to do that. Yeah, you could go write the English sentence. And it might come up with either the right answer or something close enough that it's like, you know, okay, I see where it's going. Now, it's not quite matching. But let me I would call this more of a guide, or, like a signpost along the way, not the tool to build it,

00:37:01 I could see it being super useful with like, I think there's a site regex or something like that, where you can basically write a bunch of test cases, and your and then your regex and have it run against them all in your browser and see you're right there. And that's like, when I'm running when I have to write regular expressions. That's, that's how I do it, like write a bunch of tests in here and get it to work. Maybe shouldn't be writing the tests in my own code, and actually putting on this is test, but I do it in this. But yeah, if you kind of integrate those two tools together, I could see this being useful.

00:37:30 Okay. Yeah, for sure. We take the example one over here, and I could put it into this. There, see what it says. So the regex is create a group that is a word and then you got a piece, at least some whitespace. There. What do we get? We run the regular expression matches any word that begins with an uppercase letter. That's pretty cool. It does. Yeah. Anyway, fun. People can check it out. More regex one. Thanks, Jason, for sending that in. And then Ashley, you also pointed out that Simon Wilson, wrote an article on this. I don't know anything about this. I just saw this in the news.

00:38:00 Yeah, he was actually. So it's sort of related because it's GPT, three and code. And I mean, even the first one has some regular expression stuff in it. But I guess there's a mode with GPT. Three, I haven't really played with this, but you can like paste in code, and then start asking questions about it, like in a sort of conversational manner. And his blog post I thought was really cool. The one thing I did see pointed out was similar to what we were just talking about is, apparently the AI model, like the Chatbot can be very scarily confident in its answers. And sometimes it's very confidently wrong. Like, so. You have to not be lulled into the false sense of security

00:38:35 there. Yeah, for sure. Cool. You definitely do have to take it with a grain of salt. I Brian, gonna close this out here. Okay.

00:38:42 So, Philippe sent us a, this, this next topic, and he's working for Python anywhere. So anyway, he's one of the insiders. Anaconda acquires Python anywhere to expand the Python team collaboration in the cloud. So not expand the team expand Python team collaboration. So this is an interesting, we're linking to an article from Anaconda, a press release, just saying, Yeah, we we, we bought Python anywhere. Our, you know, acquired them. So nice. Interesting. I think I'm going to jump to another thing before I guess, give my feedback. One of the things here it says from the announcement, The acquisition comes on the heels of anacondas release of py script, an open source framework for running Python applications with HTML. We've covered that. But the Python anywhere acquisition and the development of py script are central to Anaconda is focused focus on democratizing Python and data science. So I, I'm going to be optimistic and not pessimistic on this. I think hopefully, it's a good thing. And then on the Python anywhere site blog, there's a FAQ about the acquisition and kind of It goes through, like, from the customer standpoint, you know, Will Will this affect my account with billing change? Basically, they're gonna keep everything the same, at least for now. And but hopefully it will expand its services and stuff and make things better. My personal take on it. So is that I'm hoping Python anywhere is a cool idea. But I haven't seen much from them lately. So I'm hoping this will breathe some life into Python anywhere. Yeah, not saying it's dead. But I just, it'd be cool to see it grow. So

00:40:31 fun fact, talk Python itself started out on Python anywhere for a month or so because I'm like, I want to get this up. And it's kind of complicated to figure out all the Linux nginx stuff. And it seems real easy to just fire it up over here. And while but eventually moved off, it's like, you know, started doing 15 terabytes of traffic a month. Yeah, so I do. I'd love to see that coming along. That seems great. Let me share. Also one more other thing. So on the screen, I have python.org. And it shows you a code sample has? Has anyone clicked this little thing up here in the right, this little shell looking thing? Yeah,

00:41:08 I have. Remember what it does? Watch. Oh, nice.

00:41:13 So it opens up a Python repple that Python repple is running on Python anywhere? Yeah. And one of the cool things about

00:41:19 Python anywhere is this ability, this ability to just like run it from any device. So you can run this from a tablet or Chromebook or something without installing anything. And and that's, that's neat. I'd like to see that expand. Cool idea.

00:41:34 Yeah, sure is. And I can see how this pairs with py script. This is in my browser, I can just run Python and get a view into a repple. But with PI script, I maybe just move the execution to the front end as well. So they're kind of kind of related in that regard. Yeah, there's good right.

00:41:49 Now there's a few things I'd really love to see Python anywhere change with this is the currently Python anywhere doesn't support Python 310. Hopefully, we can get that yeah, updated. And it doesn't it, you can run whiskey apps, but you cannot run ASCII right now. So no fast API on there. So that's hopefully that will be fixed. But and then also, the free plan doesn't allow you to do Jupyter notebooks and with I'm guessing with Anaconda in there, that might be

00:42:21 lovely. Well, I would suspect that what Alright, how about extras? got just a couple of minutes left for for those.

00:42:27 I've gotten nothing, actually nothing.

00:42:30 I had a couple in here. Not a whole lot to say about them. But that's I guess why they're extras. PEP 691. There's a new JSON based simple API for pi pi. So more pi pi news there. This is like for tools like Pip, I guess that are sort of, you know, indexing packages and stuff like that are going to search for packages will now be able to parse JSON instead of I guess up until now they've been parsing HTML, which surprised me go to

00:42:57 you go somewhere on pipe, pipe er.org/dump. That's something simple. And you just get a wall of length and you get like 350,000 links, which is not an ideal way to like, it doesn't seem like the best.

00:43:08 Yeah. And it's cool, because I guess it can be like it can serve those static files, right. So that's why I like instead of having, you know, dynamic web that you have to worry about load and all this stuff. It's just like an nginx server pointed at a huge directory. But this allows the same servers I guess, to serve JSON instead of HTML. Neat. Great. And then rich Codex is a tool for like automatically creating these terminals, screenshots from stuff in your documentation. Mostly, I thought we can't have a sound bites episode without something related to rich, right. So that's right. That's right. Check this out. If you've got if you're using rich or and want to, you know, make some screenshots and stay up to date with your code,

00:43:49 some color coded. Put blocks in your new markdown. Yeah, for sure. Very nice. Yeah. All right. I just have a quick one for an extra here. There's an article on job dev jobs scanner, the top eight most in demand programming languages. So we've got JavaScript. TypeScript is number one, but Python number two, I bring this up because I was doing a live stream on talk Python, and somebody came along said, Hey, should I still be learning Python? I heard that it's really hard to get a job. And there's not a lot of interest in that. So yeah, well, anyway, I'm not sure what else you choose. And again, this JavaScript stuff. It's like, it's like being a CSS full stack CSS developer, you might have to have JavaScript JavaScript skills to do Python stuff, or to do a spin on that or to do whatever else, right? Like there's JavaScript is unique in the sense that a lot of times it's paired with other things. Whereas those other things often more standalone, you know what I mean? So maybe the fact that JavaScript is up there because like every other language below it also needs JavaScript plus, I don't I'm not sure exactly sure what the metric is here. If this is like, how you how you pull that out, but anyway, take it with a bit of grain of salt but I think this is pretty good. Alright, are you all ready for a joke? Because Brian, you have started something I have. Okay. You have. So remember, we had the, I don't remember what the exact topic was, but we talked about we talked about this this was this was what is the junior devs see themselves doing in five years? Yeah, senior Dev. So this woman Netta. De has just an amazing set of jokes and so on, you're gonna be hearing more than one. But let's, let's look at this one. They're so good. They're so good, obviously, leak into the show notes. So here's an example of people. I think what the story is, here is these two women, they live in this apartment complex. And they they're in an elevator with some of their neighbors. And there's this older woman says, So what do you girls do for a living? One of the women says, I'm an architect, oh, and NEDA she's a programmer, and you just see the crap emoji, like, Oh, no. Later on. Netta receives a knock at the door. And this old woman is like, there's a problem with my phone. And then there's like another, another guy with a beard that shows up with just showing the laptop to her. And then there's like, a whole line of people with like, printers and all kinds of stuff. Just basically. Oh, your tech support now.

00:46:16 I saw of live this. Yeah, yeah, I

00:46:19 have to actually. Oh, I'm sorry.

00:46:21 Yeah, no, actually, do you get this?

00:46:24 Yeah, not so much anymore, I guess. But I this was definitely like my experience in the dorms. I remember.

00:46:31 Well, I mean, like, now you could say I work on MRI machines, and nobody will ask you to they don't need to fix them. They don't have one. So

00:46:38 now they'll start telling you their medical problems and stuff like that, or it's yes.

00:46:42 So my first job out of college was with hp. I was working with satellite test systems. But everybody just heard HP and wanted me to figure out how to configure their computer or their printer. Can you get my restaurant?

00:46:56 Brian, and it's really gotten slow lately. I get a lot of pop ups.

00:47:02 Like I don't I don't know how to fix that.

00:47:06 On purpose. I don't know how to fix that. Awesome. Well, that's all I got Brian.

00:47:12 Okay. Well, thanks. Thanks for the joke. I love that one. We'll give you more of these. Yeah. And yeah, thanks, Ashley for joining us, and I really appreciate you talking about the rust rust Python stuff. That's, we've been curious about that. It's cool.

00:47:28 Yeah, really happy to be here. Thanks for having me on.

00:47:30 All right, well, bye everybody. Bye.

