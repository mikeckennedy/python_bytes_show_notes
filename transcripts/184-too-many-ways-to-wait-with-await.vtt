
00:00:00.000 --> 00:00:05.300
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.300 --> 00:00:10.700
This is episode 184 recorded May 27th, 2020.


00:00:10.700 --> 00:00:11.600
I'm Brian Okken.


00:00:11.600 --> 00:00:12.600
And I'm Michael Kennedy.


00:00:12.600 --> 00:00:16.100
And this episode is sponsored by DigitalOcean.


00:00:16.100 --> 00:00:17.100
Thank you, DigitalOcean.


00:00:17.100 --> 00:00:18.700
Yeah, thanks, DigitalOcean. Really appreciate it.


00:00:18.700 --> 00:00:20.700
Well, I'm waiting, Michael.


00:00:20.700 --> 00:00:22.400
You're waiting? What are you waiting for?


00:00:22.400 --> 00:00:25.000
I'm waiting for the next AsyncIO story.


00:00:25.000 --> 00:00:27.700
I guess it's my turn, isn't it?


00:00:27.700 --> 00:00:30.100
Okay, sorry, let me see if I can get this right.


00:00:30.100 --> 00:00:34.000
So the topic I want to talk about is waiting in async IO.


00:00:34.000 --> 00:00:37.500
Yeah, so the magic of async IO,


00:00:37.500 --> 00:00:39.800
which was introduced in Python 3.4,


00:00:39.800 --> 00:00:42.500
never really appeared until Python 3.5


00:00:42.500 --> 00:00:46.600
when the async and await keywords came into being,


00:00:46.600 --> 00:00:51.200
which let you write code that looks like standard single-threaded serial code,


00:00:51.200 --> 00:00:53.700
but actually is multi-threaded,


00:00:53.700 --> 00:00:56.800
or at least parallel concurrent to some degree.


00:00:56.800 --> 00:00:59.560
depends on how you're running it, whether it's truly multi-threaded.


00:00:59.560 --> 00:01:03.160
Anyway, there's a lot of options, let's say,


00:01:03.160 --> 00:01:07.400
on how you can interact with these coroutines and these tasks


00:01:07.400 --> 00:01:11.600
that are generated by the async I/O framework.


00:01:11.600 --> 00:01:15.800
And anytime there's like four ways to do something in programming,


00:01:15.800 --> 00:01:17.600
you should be asking yourself,


00:01:17.600 --> 00:01:20.560
one, why are there four ways to do this?


00:01:20.560 --> 00:01:22.000
But more importantly,


00:01:22.000 --> 00:01:25.000
when does way one apply best?


00:01:25.000 --> 00:01:29.800
and what scenario should I use way three and what is the trade-off between two and four


00:01:29.800 --> 00:01:31.400
and so on, right?


00:01:31.400 --> 00:01:34.300
So that's the case with async.io.


00:01:34.300 --> 00:01:38.300
There's tons of ways to await things.


00:01:38.300 --> 00:01:41.800
And Hank Henick, get the pronunciation right for me.


00:01:41.800 --> 00:01:42.600
I know you got it.


00:01:42.600 --> 00:01:43.300
You got it.


00:01:43.300 --> 00:01:43.800
That's good.


00:01:43.800 --> 00:01:44.300
Yeah.


00:01:44.300 --> 00:01:44.800
Hank.


00:01:44.800 --> 00:01:47.600
[laughs]


00:01:47.600 --> 00:01:48.100
Sorry.


00:01:48.100 --> 00:01:49.400
That's just a running thing.


00:01:49.400 --> 00:01:50.200
I can never get it right.


00:01:50.200 --> 00:01:50.700
I know.


00:01:50.700 --> 00:01:53.600
Well, the problem is, I think I had it right.


00:01:53.600 --> 00:01:56.800
And then we went back and forth so many times with so many variations.


00:01:56.800 --> 00:01:58.120
Now I'm, it's broken.


00:01:58.120 --> 00:02:00.880
Uh, sorry about messing up your name there.


00:02:00.880 --> 00:02:05.000
So wrote a great article though, called waiting and async IO that does exactly


00:02:05.000 --> 00:02:07.200
that, that says, here are all the ways.


00:02:07.200 --> 00:02:11.380
Here's the pluses and here's the minuses and the situations in which you apply them.


00:02:11.380 --> 00:02:16.460
So if you're like serious about using async IO and you're building real things,


00:02:16.460 --> 00:02:21.260
basically this podcast episode is for you because I have this in another one that


00:02:21.260 --> 00:02:22.840
bring two really cool ideas together.


00:02:23.300 --> 00:02:26.420
But let's talk about the waiting one first.


00:02:26.420 --> 00:02:31.020
So it's really easy to start doing some work, right?


00:02:31.020 --> 00:02:33.980
I can have two coroutines, let's say F and G,


00:02:33.980 --> 00:02:37.780
and I could say I want the result of F by saying,


00:02:37.780 --> 00:02:40.740
you know, result equals await calling F,


00:02:40.740 --> 00:02:44.120
and then result G equals await calling G.


00:02:44.120 --> 00:02:46.500
And that's fine if what you're looking for


00:02:46.500 --> 00:02:50.700
is more concurrent execution of that part of code, right?


00:02:50.700 --> 00:02:54.540
So this is say in a web method, like a view,


00:02:54.540 --> 00:02:56.180
someone makes a request,


00:02:56.180 --> 00:02:59.380
and there's not a lot you can do to make things go faster


00:02:59.380 --> 00:03:00.900
potentially for that one request,


00:03:00.900 --> 00:03:03.340
but you can say, let the server be less busy


00:03:03.340 --> 00:03:06.060
so it could handle like 10 or 20 times more


00:03:06.060 --> 00:03:07.340
of the same request.


00:03:07.340 --> 00:03:09.900
So this real simple, like just a wait calling


00:03:09.900 --> 00:03:12.380
these functions, these async functions,


00:03:12.380 --> 00:03:14.680
it will allow your system to scale more,


00:03:14.680 --> 00:03:16.580
but it won't make things faster.


00:03:16.580 --> 00:03:20.460
Like for example, if you're trying to crawl 20 web pages,


00:03:20.460 --> 00:03:21.940
this will not make it any faster.


00:03:21.940 --> 00:03:23.660
It'll just make your code more complicated.


00:03:23.660 --> 00:03:24.600
So don't do that, right?


00:03:24.600 --> 00:03:27.160
So there's other ways in which you want to do that.


00:03:27.160 --> 00:03:30.160
Another thing that I think a lot of people don't quite get


00:03:30.160 --> 00:03:33.220
is when you call one of these async functions,


00:03:33.220 --> 00:03:36.420
like async def function name, when you call it,


00:03:36.420 --> 00:03:41.340
it doesn't actually start it until you either await it


00:03:41.340 --> 00:03:43.840
or create a task from it.


00:03:43.840 --> 00:03:47.540
So if you call like F and then G,


00:03:47.540 --> 00:03:49.820
and you think you're gonna come back and get to them later,


00:03:49.820 --> 00:03:50.920
and now they're running.


00:03:50.920 --> 00:03:53.700
No, actually they're not unless you've created a task


00:03:53.700 --> 00:03:54.540
which starts them.


00:03:54.540 --> 00:03:57.260
So you either have to await them, which blocks,


00:03:57.260 --> 00:03:59.420
or create these tasks to like kick them off.


00:03:59.420 --> 00:04:00.300
That's pretty interesting, right?


00:04:00.300 --> 00:04:01.940
Like that's not super obvious, I think.


00:04:01.940 --> 00:04:04.420
Normally when you call a function, it does a thing.


00:04:04.420 --> 00:04:05.940
But here, not so much.


00:04:05.940 --> 00:04:07.180
So some other options,


00:04:07.180 --> 00:04:10.060
if you could call them both as create them as tasks,


00:04:10.060 --> 00:04:11.960
and then you could await those tasks, right?


00:04:11.960 --> 00:04:13.420
Because their tasks are already running,


00:04:13.420 --> 00:04:15.780
and then you await them both, whichever one first.


00:04:15.780 --> 00:04:16.780
Finishes first doesn't matter.


00:04:16.780 --> 00:04:18.140
You wait till the first one's done,


00:04:18.140 --> 00:04:19.900
maybe the second one's already done.


00:04:19.900 --> 00:04:21.700
So that's probably the pattern


00:04:21.700 --> 00:04:23.540
that most people are gonna be using.


00:04:23.540 --> 00:04:26.700
But you can also use asyncIO gather


00:04:26.700 --> 00:04:30.060
that takes one or more awaitables as a star args,


00:04:30.060 --> 00:04:32.540
and then it waits for them all to finish,


00:04:32.540 --> 00:04:33.360
which is pretty cool.


00:04:33.360 --> 00:04:37.340
And that itself is a future thing that you can await, right?


00:04:37.340 --> 00:04:40.420
So you would say await asyncIO.gather.


00:04:40.420 --> 00:04:41.260
- Oh, that's cool.


00:04:41.260 --> 00:04:43.180
- Yeah, gather's awesome because I can create all these tasks


00:04:43.180 --> 00:04:46.060
and I just say, I just need them all to be done.


00:04:46.060 --> 00:04:48.060
And when that's done, we can get the results and carry on.


00:04:48.060 --> 00:04:50.060
And what's cool is when you await gather,


00:04:50.060 --> 00:04:51.500
you get a tuple of results.


00:04:51.500 --> 00:04:54.940
So if I say async.io.gather function one,


00:04:54.940 --> 00:04:57.100
or task one, task two,


00:04:57.100 --> 00:05:00.460
then it returns the result one, comma, result two


00:05:00.460 --> 00:05:01.360
as a tuple.


00:05:01.360 --> 00:05:03.820
So you can gather them up and get all the answers back,


00:05:03.820 --> 00:05:04.820
which is pretty cool.


00:05:04.820 --> 00:05:06.180
- Yeah, that's really neat.


00:05:06.180 --> 00:05:07.560
- Yeah, one of the problems with gather though,


00:05:07.560 --> 00:05:09.820
is you're saying I'm willing to wait forever


00:05:09.820 --> 00:05:11.100
for this to finish.


00:05:11.100 --> 00:05:13.540
And sometimes that's fine,


00:05:13.540 --> 00:05:16.260
but sometimes things don't return correctly,


00:05:16.260 --> 00:05:18.680
or ever or in the right amount of time.


00:05:18.680 --> 00:05:21.140
So you can use wait for,


00:05:21.140 --> 00:05:23.460
which is nice and allows you to pass a timeout.


00:05:23.460 --> 00:05:25.500
But what's a little bit better than a wait for


00:05:25.500 --> 00:05:28.380
is there's an async timeout package on PyPI,


00:05:28.380 --> 00:05:29.920
which I'd not heard of.


00:05:29.920 --> 00:05:33.820
And you can basically create a block that will,


00:05:33.820 --> 00:05:35.580
a with block that will timeout.


00:05:35.580 --> 00:05:38.860
So you can say, I wanna have an async with timeout,


00:05:38.860 --> 00:05:41.320
five seconds, and then do a whole bunch of function calls


00:05:41.320 --> 00:05:42.740
and a waiting and all that.


00:05:42.740 --> 00:05:44.620
And either they're all gonna finish


00:05:44.620 --> 00:05:46.560
or when five seconds passes,


00:05:46.560 --> 00:05:48.520
everything gets canceled that hasn't finished.


00:05:48.520 --> 00:05:49.360
- Oh, that's cool.


00:05:49.360 --> 00:05:50.180
- That's pretty cool, right?


00:05:50.180 --> 00:05:51.320
Another one that's really interesting


00:05:51.320 --> 00:05:53.160
is I start a bunch of work,


00:05:53.160 --> 00:05:54.920
and then I would like to,


00:05:54.920 --> 00:05:57.040
say I kick off, I'm doing web scraping,


00:05:57.040 --> 00:05:59.680
and I wanna go get the results of 20 web pages.


00:05:59.680 --> 00:06:01.400
I kick off 20 requests,


00:06:01.400 --> 00:06:04.080
and then I want to process them as they complete.


00:06:04.080 --> 00:06:06.140
Like the first one that's done, I wanna work on that.


00:06:06.140 --> 00:06:07.880
Then the next one, then the next one.


00:06:07.880 --> 00:06:11.560
So you can create a task, or an iterable rather,


00:06:11.560 --> 00:06:15.720
from saying asyncio.ascompleted,


00:06:15.720 --> 00:06:17.640
and you give it a bunch of tasks,


00:06:17.640 --> 00:06:20.600
and it gives you an iterator that you can for in over


00:06:20.600 --> 00:06:22.560
that gives you the first completed one,


00:06:22.560 --> 00:06:23.720
then the second completed one,


00:06:23.720 --> 00:06:27.300
and just blocks until the next one is completed.


00:06:27.300 --> 00:06:28.560
So you kick a bunch off,


00:06:28.560 --> 00:06:31.000
and then you just say for completed task


00:06:31.000 --> 00:06:32.600
in asyncio.ascompleted,


00:06:32.600 --> 00:06:34.200
and you give it your running tasks.


00:06:34.200 --> 00:06:35.760
That's really slick, isn't it?


00:06:35.760 --> 00:06:36.800
- That is slick.


00:06:36.800 --> 00:06:39.480
Looks like it has a timeout also that you can add to it.


00:06:39.480 --> 00:06:41.120
- Yeah, very nice.


00:06:41.120 --> 00:06:43.480
- Yep, you can give it a timeout indeed.


00:06:43.480 --> 00:06:45.820
Now, there's a few more things covered in there


00:06:45.820 --> 00:06:49.000
and I didn't go over the trade-offs too much.


00:06:49.000 --> 00:06:50.980
You know, here's the scenario where you use this and that.


00:06:50.980 --> 00:06:53.280
So if you really care about this, two things to do.


00:06:53.280 --> 00:06:55.280
One is check out the article.


00:06:55.280 --> 00:06:56.520
It's got a lot of details


00:06:56.520 --> 00:06:59.000
and each subsection has a little trade-offs.


00:06:59.000 --> 00:07:01.000
Here's the good, here's the bad, which is nice.


00:07:01.000 --> 00:07:03.120
And also you can check out my Async course,


00:07:03.120 --> 00:07:04.320
which talks about this


00:07:04.320 --> 00:07:06.360
and a whole bunch of other things on Async as well.


00:07:06.360 --> 00:07:08.880
So I'll put a link in the show notes for that as well.


00:07:08.880 --> 00:07:09.700
- Nice. - Yep.


00:07:09.700 --> 00:07:13.260
So I was talking about waiting, you're talking about what, being faster?


00:07:13.260 --> 00:07:15.500
That sounds better than just waiting around.


00:07:15.500 --> 00:07:17.340
Yes, being faster.


00:07:17.340 --> 00:07:19.380
Well, maybe even faster.


00:07:19.380 --> 00:07:20.380
Not sure.


00:07:20.380 --> 00:07:21.380
So I'm still on the fence.


00:07:21.380 --> 00:07:23.580
Anyway, so virtual environments.


00:07:23.580 --> 00:07:24.860
I use virtual environments.


00:07:24.860 --> 00:07:26.180
Do you use virtual environments?


00:07:26.180 --> 00:07:31.020
Anytime I have to install any, if pip install has to be typed, there's a virtual environment


00:07:31.020 --> 00:07:32.020
involved.


00:07:32.020 --> 00:07:33.020
Yeah.


00:07:33.020 --> 00:07:34.020
Yeah.


00:07:34.020 --> 00:07:35.020
I use it for everything.


00:07:35.020 --> 00:07:37.820
Even if I've got a machine, like a build machine that really only has one Python environment


00:07:37.820 --> 00:07:41.180
I'm only using it for one thing, I still set up a virtual environment.


00:07:41.180 --> 00:07:42.140
It's just always.


00:07:42.140 --> 00:07:49.260
And I've been, since the Python three started, Python three packaged VENV with


00:07:49.260 --> 00:07:49.860
Python.


00:07:49.860 --> 00:07:55.100
So you can, you can create virtual environments just with the built in VENV


00:07:55.100 --> 00:07:55.740
package.


00:07:55.740 --> 00:08:00.020
And I've been using that now before that was in there.


00:08:00.020 --> 00:08:05.220
And if you were in Python two land, you needed to use the pip installable


00:08:05.220 --> 00:08:08.740
virtualenv package.


00:08:08.740 --> 00:08:12.740
Now, it is still updated and it is still being maintained.


00:08:12.740 --> 00:08:17.460
And I noticed, this was a conversation that started on Twitter this morning,


00:08:17.460 --> 00:08:22.100
that the virtual environment was still around and it was,


00:08:22.100 --> 00:08:23.540
maybe you should use that.


00:08:23.540 --> 00:08:27.220
So I went and checked it out, again, the documentation for it,


00:08:27.220 --> 00:08:30.020
and it says, "Virtualenv is a tool


00:08:30.020 --> 00:08:33.300
to create isolated Python environments." We know this.


00:08:33.300 --> 00:08:38.860
Since Python 3.3, I guess a subset of has been integrated into the standard library. Yep


00:08:38.860 --> 00:08:43.980
The V and V module does not offer all the features of this library


00:08:43.980 --> 00:08:47.000
Just to name some of the prominent ones


00:08:47.000 --> 00:08:49.540
V and V is slower and


00:08:49.540 --> 00:08:57.820
It's not extendable and it cannot create environments with multiple Python versions and you can't upstate it


00:08:58.100 --> 00:09:02.100
update it with pip, and it doesn't have a programmatic API.


00:09:02.100 --> 00:09:05.300
Now, most of that, I just really don't care about.


00:09:05.300 --> 00:09:08.420
But the slower part, I do care about.


00:09:08.420 --> 00:09:11.540
So, I gave it a shot this morning. I used time,


00:09:11.540 --> 00:09:15.940
the time function on the command line just to time a couple of commands,


00:09:15.940 --> 00:09:19.300
created virtual environments with both VENV and virtualenv.


00:09:19.300 --> 00:09:24.340
And yeah, VENV takes a little over two seconds, two and a half seconds


00:09:24.340 --> 00:09:30.900
To finish where is the virtual version takes like quite a bit under half a second.


00:09:30.900 --> 00:09:36.720
So that's that's a lot and i mean if i'm doing a lot of virtual environments i might care.


00:09:36.720 --> 00:09:45.080
Now one of the things i was like coming back and forth why why would i use bnv then if virtual environment virtual env is faster.


00:09:45.080 --> 00:09:48.560
Will you have to install virtual and so.


00:09:48.960 --> 00:10:01.980
I'll have to remember to do that i don't think i'll start teaching people this because it's just one more complication thing and a couple seconds in that big deal and i still like the prompt the dash dash prompt


00:10:01.980 --> 00:10:14.460
virtual and supports that too but it handles a different doesn't wrap your prompt in parentheses and and maybe it's just a nice city but i can like it i'm not sure i'm on the fence as to where i whether i should switcher.


00:10:14.600 --> 00:10:16.600
or use it. To me it feels like


00:10:16.600 --> 00:10:18.260
I'm going to stick with VEMV.


00:10:18.260 --> 00:10:20.260
For a long time I saw virtual EMV


00:10:20.260 --> 00:10:22.760
as just like it's legacy stuff. It's there because


00:10:22.760 --> 00:10:24.760
before Python 3.3


00:10:24.760 --> 00:10:26.760
you didn't have VEMV built in so you're going to need it.


00:10:26.760 --> 00:10:29.500
A lot of the tutorials talked about it and whatnot.


00:10:29.500 --> 00:10:31.500
We recently covered it about


00:10:31.500 --> 00:10:33.500
why it got a big update and a lot of the things


00:10:33.500 --> 00:10:35.900
that it does that are nice and the speed is cool.


00:10:35.900 --> 00:10:40.100
You know, maybe it wouldn't be that hard to adopt the --prompt


00:10:40.100 --> 00:10:42.860
dot feature, right? It's open source.


00:10:42.860 --> 00:10:44.500
It could get a PR that does that.


00:10:44.500 --> 00:10:46.500
That would be pretty cool, actually.


00:10:46.500 --> 00:10:48.500
It probably should just so it's consistent.


00:10:48.500 --> 00:10:53.180
But to me, the idea of having another thing I've got to install somewhere,


00:10:53.180 --> 00:10:56.660
probably into my user profiles Python packages,


00:10:56.660 --> 00:10:59.060
so that then I can then create virtual environments,


00:10:59.060 --> 00:11:01.380
so that I can then install things over into that area,


00:11:01.380 --> 00:11:03.260
it's just, it's fine for me.


00:11:03.260 --> 00:11:08.980
But as somebody who does courses and teaching and other stuff like presentations,


00:11:08.980 --> 00:11:11.900
Like it just seems like, okay, you just lost


00:11:11.900 --> 00:11:13.660
how many people out of that, right?


00:11:13.660 --> 00:11:15.380
Like, you know, what is the value?


00:11:15.380 --> 00:11:17.040
Like you say, it's two seconds.


00:11:17.040 --> 00:11:19.820
One of the things, what I would like to see,


00:11:19.820 --> 00:11:21.660
and it would be really nice,


00:11:21.660 --> 00:11:23.460
maybe that would even push me over the edge,


00:11:23.460 --> 00:11:27.260
is it drives me crazy that I create a new virtual environment


00:11:27.260 --> 00:11:28.980
from the latest version of Python


00:11:28.980 --> 00:11:31.340
that I can possibly get on the planet,


00:11:31.340 --> 00:11:32.980
and it tells me that pip is out of date.


00:11:32.980 --> 00:11:35.060
- Now, virtual environment didn't do that for me


00:11:35.060 --> 00:11:36.380
this morning.


00:11:36.380 --> 00:11:40.580
So it created a virtual environment with the newest pip in it.


00:11:40.580 --> 00:11:41.880
Ooh, okay.


00:11:41.880 --> 00:11:44.140
See now, that's pretty nice because it's annoying to say,


00:11:44.140 --> 00:11:45.780
okay, what you do is create this virtual environment


00:11:45.780 --> 00:11:47.140
and you pip install this thing.


00:11:47.140 --> 00:11:49.220
Look, there's always going to be a warning.


00:11:49.220 --> 00:11:50.900
So every single time what you're going to do


00:11:50.900 --> 00:11:53.820
is you're going to fix that warning by doing this.


00:11:53.820 --> 00:11:55.140
Right, so if it grabs the latest,


00:11:55.140 --> 00:11:57.740
that's actually kind of cool now that I think of it.


00:11:57.740 --> 00:12:02.380
I have a alias in my shell, my startup,


00:12:02.380 --> 00:12:03.780
that I just type V-E-N-V


00:12:03.780 --> 00:12:07.820
and it does the Python-MVNV,


00:12:07.820 --> 00:12:11.340
and then it does an upgrade of pip,


00:12:11.340 --> 00:12:13.500
and first it activates it,


00:12:13.500 --> 00:12:16.100
and then it does an upgrade of pip and setup tools,


00:12:16.100 --> 00:12:18.620
all in like four characters.


00:12:18.620 --> 00:12:20.420
So that's what I've been doing these days.


00:12:20.420 --> 00:12:22.300
- Yeah, I've got like a little snippet


00:12:22.300 --> 00:12:25.220
in my profile also that I'm using.


00:12:25.220 --> 00:12:27.700
Funny enough, I shared it recently on Twitter,


00:12:27.700 --> 00:12:30.100
just my like two line snippet that I used,


00:12:30.100 --> 00:12:31.700
and then people kept on telling me


00:12:31.700 --> 00:12:32.940
to use all these other tools.


00:12:32.940 --> 00:12:34.660
"Oh, you could just use this."


00:12:34.660 --> 00:12:36.220
Like, it's not just use this.


00:12:36.220 --> 00:12:38.400
It's just a two-line snippet in a profile.


00:12:38.400 --> 00:12:39.740
It's not a big deal.


00:12:39.740 --> 00:12:40.900
- I don't even have to know what it is.


00:12:40.900 --> 00:12:42.380
I just typed these three characters.


00:12:42.380 --> 00:12:43.220
I'm good.


00:12:43.220 --> 00:12:44.180
Why are you bothering me?


00:12:44.180 --> 00:12:45.260
Why is this such a big deal?


00:12:45.260 --> 00:12:46.260
I know, it's crazy.


00:12:46.260 --> 00:12:47.460
- Yeah, yeah, anyway.


00:12:47.460 --> 00:12:50.340
- What I would really like to see in none of these address


00:12:50.340 --> 00:12:55.100
is that something like, kind of like Node.js


00:12:55.100 --> 00:12:59.300
where it just has the virtual environment at the top level


00:12:59.300 --> 00:13:02.260
and it just walks up until it finds a virtual environment


00:13:02.260 --> 00:13:05.420
maybe complains if it doesn't, or it does something like that, right?


00:13:05.420 --> 00:13:09.940
Like something to the effect where you say, here, I know that this is a feature,


00:13:09.940 --> 00:13:12.940
I forgot what it's called, it's like local Python or something like that,


00:13:12.940 --> 00:13:14.900
but it's not just built into Python.


00:13:14.900 --> 00:13:18.900
So if I just went into that directory and tried to run it, it's not going to find


00:13:18.900 --> 00:13:20.740
and use that version of Python, you know?


00:13:20.740 --> 00:13:24.620
Oh, well, the direnv, there's a few, there are a few packages that do that.


00:13:24.620 --> 00:13:28.140
And that's one of the things that people are directing me to is direnv.


00:13:28.140 --> 00:13:28.900
Direnv is cool.


00:13:28.900 --> 00:13:30.980
We should talk about it as a separate item.


00:13:30.980 --> 00:13:31.100
Yeah.


00:13:31.100 --> 00:13:31.740
It's worth it.


00:13:31.740 --> 00:13:33.740
But yeah, D-I-R-E-N-V is cool.


00:13:33.740 --> 00:13:35.900
>> Yeah, we should talk about that sometime.


00:13:35.900 --> 00:13:36.740
>> Yeah, yeah, yeah.


00:13:36.740 --> 00:13:38.540
Don't use up all our items all on one show, man.


00:13:38.540 --> 00:13:39.460
Come on.


00:13:39.460 --> 00:13:41.540
>> Okay, let's thank our sponsor.


00:13:41.540 --> 00:13:44.620
So DigitalOcean is sponsoring this episode.


00:13:44.620 --> 00:13:48.460
And DigitalOcean just launched their Virtual Private Cloud


00:13:48.460 --> 00:13:50.100
and new trust platform.


00:13:50.100 --> 00:13:52.260
Together, these make it easier to architect


00:13:52.260 --> 00:13:54.140
and run serious business applications


00:13:54.140 --> 00:13:56.340
with even stronger security and confidence.


00:13:56.340 --> 00:13:59.100
The Virtual Private Cloud, or VPC,


00:13:59.100 --> 00:14:01.540
allows you to create multiple private networks


00:14:01.540 --> 00:14:05.340
for your account or your team instead of having just one private network.


00:14:05.340 --> 00:14:09.660
DigitalOcean can auto-generate your private network's IP address range,


00:14:09.660 --> 00:14:11.540
or you can specify your own.


00:14:11.540 --> 00:14:15.380
You can now configure droplets to behave as internet gateways.


00:14:15.380 --> 00:14:18.340
Trust Platform is a new microsite provides you


00:14:18.340 --> 00:14:21.460
one place to get all your security and privacy questions answered,


00:14:21.460 --> 00:14:25.060
and download their available security certifications.


00:14:25.060 --> 00:14:28.540
DigitalOcean is your trusted partner in the Cloud.


00:14:28.540 --> 00:14:36.460
visit pythonbytes.fm/digitalocean to get a $100 credit for new users to build something awesome.


00:14:36.460 --> 00:14:40.300
Yeah, awesome. Thanks for supporting the show, DigitalOcean. So before you had to wait on me,


00:14:40.300 --> 00:14:42.300
didn't you, Brian? It was frustrating.


00:14:42.300 --> 00:14:43.900
I did have to wait.


00:14:43.900 --> 00:14:47.500
All right. Let me tell you about when you might not even be awaiting stuff and things are still


00:14:47.500 --> 00:14:53.820
slow. So there's this cool analysis done by Chris Wellens in an article called Latency in


00:14:53.820 --> 00:14:59.260
asynchronous Python that I don't know if it talks about problems with async IO


00:14:59.260 --> 00:15:03.740
directly, but it's more talks about when you have a misconception of how


00:15:03.740 --> 00:15:08.300
something works over there, and then you apply a couple of patterns or


00:15:08.300 --> 00:15:13.060
behaviors to it, it might not do what you think. So for probably the best


00:15:13.060 --> 00:15:17.500
example would be there's, he gives a good one, there's a couple, I'll focus


00:15:17.500 --> 00:15:21.460
on this, this one where it's basically generating too much work and what can


00:15:21.460 --> 00:15:22.900
can be done about it.


00:15:22.900 --> 00:15:25.860
So he says, I was debugging a program


00:15:25.860 --> 00:15:28.900
that was having some significant problems,


00:15:28.900 --> 00:15:30.780
but it was based on async IO,


00:15:30.780 --> 00:15:33.820
and it would eventually take really long time


00:15:33.820 --> 00:15:36.660
for network responses to come back.


00:15:36.660 --> 00:15:38.540
And it's made of basically two parts.


00:15:38.540 --> 00:15:41.500
One is this thing that has to send a little heartbeat


00:15:41.500 --> 00:15:42.860
or receive a heartbeat or something.


00:15:42.860 --> 00:15:44.380
I don't remember if it's inbound or outbound,


00:15:44.380 --> 00:15:47.660
but it has to go beep, beep, beep,


00:15:47.660 --> 00:15:49.780
once every, let's say, millisecond, right?


00:15:49.780 --> 00:15:55.980
So there's an async function and it just rips through and just every one millisecond it


00:15:55.980 --> 00:15:57.640
kicks off one of these heartbeats.


00:15:57.640 --> 00:15:58.840
Totally simple, right?


00:15:58.840 --> 00:16:05.700
You just say await asyncIO dot whatever, like sleep for one millisecond, then do the thing


00:16:05.700 --> 00:16:06.860
and then go on, right?


00:16:06.860 --> 00:16:11.160
You can basically allow other concurrent work to happen while you're awaiting this sort


00:16:11.160 --> 00:16:14.380
of like timeout and to do it on a regular timeframe.


00:16:14.380 --> 00:16:19.120
And then there's this other stuff that has to do some computational work that takes not


00:16:19.120 --> 00:16:23.240
very long like 10 milliseconds. So you're receiving a JSON request, you have to


00:16:23.240 --> 00:16:27.520
parse that JSON and do it like a little bit of work. So because async.io


00:16:27.520 --> 00:16:34.120
runs really on a single thread, that 10 milliseconds is going to block out and


00:16:34.120 --> 00:16:38.160
stop the heartbeat for 10 milliseconds. Which is, you know, whatever, it's fine.


00:16:38.160 --> 00:16:42.920
It's like there's some variability but it's no big deal. However, if you


00:16:42.920 --> 00:16:46.300
run a whole bunch of these, in his example, Chris said let's run 200 of


00:16:46.300 --> 00:16:50.820
these computational things and like just start them up so that they can get put


00:16:50.820 --> 00:16:52.540
into this queue of work to be done.


00:16:52.540 --> 00:16:54.780
Well, the way it works is it all gets scheduled.


00:16:54.780 --> 00:16:58.820
It says, okay, we have a heartbeat and we have these 200 little slices of work.


00:16:58.820 --> 00:17:01.220
Each of which is kind of take 10 milliseconds.


00:17:01.220 --> 00:17:04.780
And there's a bunch of stuff around them that makes them a little bit


00:17:04.780 --> 00:17:06.820
slower, the scheduling and whatnot.


00:17:06.820 --> 00:17:08.580
And then we have a bunch of more heartbeats.


00:17:08.580 --> 00:17:14.860
So it goes beep, beep block for two seconds, beep, beep, beep, where you


00:17:14.860 --> 00:17:17.820
would expect, okay, I've got all these heartbeats going and I've got 200


00:17:17.820 --> 00:17:19.740
little async things, let's like mix them up.


00:17:19.740 --> 00:17:20.380
Right.


00:17:20.380 --> 00:17:21.780
And like kind of share it fairly.


00:17:21.780 --> 00:17:24.340
And it does not do that at all.


00:17:24.340 --> 00:17:30.020
So he talks about basically what some of the challenges are there.


00:17:30.020 --> 00:17:36.060
One is probably you shouldn't just give it that much work in some giant batch.


00:17:36.060 --> 00:17:41.580
You should, you know, give it less work at a time, like some kind of like a work


00:17:41.580 --> 00:17:45.580
Q or you know, he said, let's see if we have similar for can work.


00:17:45.580 --> 00:17:48.900
Now I don't remember if semaphores are reentrant or not.


00:17:48.900 --> 00:17:49.740
It didn't work.


00:17:49.740 --> 00:17:51.140
The semaphore didn't help at all.


00:17:51.140 --> 00:17:52.380
Actually.


00:17:52.380 --> 00:17:55.980
So we use a semaphore to limit limited 10, but if semaphores are reentrant,


00:17:55.980 --> 00:17:56.820
this is all one thread.


00:17:56.820 --> 00:17:57.540
It doesn't matter.


00:17:57.540 --> 00:17:59.400
Like the semaphore won't block itself.


00:17:59.400 --> 00:18:04.100
So that's a, like this normal threading, locking and stuff like that.


00:18:04.100 --> 00:18:05.140
They kind of don't apply.


00:18:05.140 --> 00:18:06.780
Cause there's not actual threading going on.


00:18:06.780 --> 00:18:10.980
So that doesn't really help, but he comes up with this example of.


00:18:11.460 --> 00:18:14.060
that the async IO has a job queue,


00:18:14.060 --> 00:18:16.020
which allows you to push work into it


00:18:16.020 --> 00:18:18.380
and then you can like wait for it to be completed


00:18:18.380 --> 00:18:19.800
and there's all sorts of cool patterns


00:18:19.800 --> 00:18:23.100
and like producer consumer stuff that you can put on there.


00:18:23.100 --> 00:18:24.820
So I actually put together an example.


00:18:24.820 --> 00:18:26.200
He has like little code snippets.


00:18:26.200 --> 00:18:27.800
I put together a running example


00:18:27.800 --> 00:18:30.700
and one whole program that demonstrates this


00:18:30.700 --> 00:18:33.700
and I have a link to the gist in the show notes.


00:18:33.700 --> 00:18:35.260
And I also would like to just point out


00:18:35.260 --> 00:18:37.840
how much a fan of unsync I am,


00:18:37.840 --> 00:18:41.220
which I always talk about when I can around this async stuff


00:18:41.220 --> 00:18:44.980
Like, Unsync is a library that is 120 lines of Python


00:18:44.980 --> 00:18:49.980
and it unifies multiprocessing, async.io, threading,


00:18:49.980 --> 00:18:54.260
like all these different APIs into like a perfect thing


00:18:54.260 --> 00:18:56.620
that fits with async and await.


00:18:56.620 --> 00:18:57.620
It's really, really nice.


00:18:57.620 --> 00:19:01.860
But applying like the standard unsync adjustments


00:19:01.860 --> 00:19:04.700
to this code, to say like, what you do is just put


00:19:04.700 --> 00:19:07.220
a decorator @unsync on the function.


00:19:07.220 --> 00:19:08.140
That's it.


00:19:08.140 --> 00:19:11.220
you still use a wait, async and await


00:19:11.220 --> 00:19:13.140
and all that kind of stuff, the problem's gone.


00:19:13.140 --> 00:19:13.980
Totally fixes it.


00:19:13.980 --> 00:19:14.820
- Oh, really?


00:19:14.820 --> 00:19:16.140
- Like, you don't have to go to the crazy queues


00:19:16.140 --> 00:19:17.860
and all that, like, the problem is gone.


00:19:17.860 --> 00:19:18.900
It's fixed.


00:19:18.900 --> 00:19:20.380
Well, it's alleviated.


00:19:20.380 --> 00:19:22.740
It may still be like if you push it far enough


00:19:22.740 --> 00:19:25.260
under certain more complex criteria,


00:19:25.260 --> 00:19:27.560
but the example that showed the problem,


00:19:27.560 --> 00:19:30.020
you just make them unsync and you await them,


00:19:30.020 --> 00:19:32.420
it just runs like you would have originally expected.


00:19:32.420 --> 00:19:34.020
Like, unsync is so beautiful.


00:19:34.020 --> 00:19:34.860
- Oh, that's cool.


00:19:34.860 --> 00:19:37.300
- It doesn't change the way async.io works.


00:19:37.300 --> 00:19:40.800
It basically says, okay, the async work is going to run on a background thread,


00:19:40.800 --> 00:19:44.500
and this other computational stuff will fit into the API,


00:19:44.500 --> 00:19:46.660
but will technically run on its own thread.


00:19:46.660 --> 00:19:50.040
So it's not like changing the internals,


00:19:50.040 --> 00:19:53.600
but you use the same code, and then now it doesn't have this problem


00:19:53.600 --> 00:19:56.300
because the way it slices them together is better, I think.


00:19:56.300 --> 00:19:58.400
Anyway, it's pretty interesting. It's worth a look.


00:19:58.400 --> 00:20:01.840
I also have a copy of that on the gist, and you can check that out and run it too.


00:20:01.840 --> 00:20:02.540
That's pretty cool.


00:20:02.540 --> 00:20:05.400
So, unsync allows you to possibly not think too much


00:20:05.400 --> 00:20:11.720
about whether you should have these things just be async or whether there should be threads or something.


00:20:11.720 --> 00:20:15.320
It's really neat. It just cleans everything up.


00:20:15.320 --> 00:20:17.320
I sure hope they don't deprecate it though.


00:20:17.320 --> 00:20:19.320
Oh, that's a better transition.


00:20:19.320 --> 00:20:22.520
I was going to say, speaking of cleaning things up.


00:20:22.520 --> 00:20:23.800
That works too?


00:20:23.800 --> 00:20:25.480
We'll just do both transitions.


00:20:25.480 --> 00:20:27.960
So how to deprecate a PyPI package.


00:20:27.960 --> 00:20:33.960
So you've put up a PyPI package and for some reason you don't want it to be up there.


00:20:33.960 --> 00:20:35.200
I don't want a puppy anymore.


00:20:35.200 --> 00:20:36.400
Why do I have to take care of this?


00:20:36.400 --> 00:20:36.900
Yeah.


00:20:36.900 --> 00:20:39.320
So there's lots of reasons why this might happen.


00:20:39.320 --> 00:20:43.880
One of them might just be you accidentally, you didn't use the test


00:20:43.880 --> 00:20:49.720
IPI and use the live one and you put up foo or some variant of foo and you


00:20:49.720 --> 00:20:54.640
didn't mean to, maybe it's some other package that somebody took over and


00:20:54.640 --> 00:20:57.240
it's handling it better and you want people to use something else.


00:20:57.240 --> 00:20:59.560
But anyway, there's lots of reasons why you might.


00:21:00.040 --> 00:21:04.040
a guy named Paul McCann wrote a blog post


00:21:04.040 --> 00:21:06.640
about how to deprecate a PyPI package.


00:21:06.640 --> 00:21:10.440
So he gives a few options, and I think these are cool.


00:21:10.440 --> 00:21:14.040
One of the interesting things is he mentions is that PyPI doesn't really


00:21:14.040 --> 00:21:17.240
give you direction as to what it should look like,


00:21:17.240 --> 00:21:20.840
which one you should use. So he's giving his opinion, which is great.


00:21:20.840 --> 00:21:23.840
You might use a deprecation warning.


00:21:23.840 --> 00:21:27.040
And this doesn't really apply to entire packages, but


00:21:27.040 --> 00:21:29.040
let's say you've changed your API,


00:21:29.040 --> 00:21:30.600
so it might as well be listed here.


00:21:30.600 --> 00:21:31.920
It's a good thing to,


00:21:31.920 --> 00:21:34.200
instead of just ripping out parts of your API,


00:21:34.200 --> 00:21:37.440
leave them in there, but make deprecation warnings in there.


00:21:37.440 --> 00:21:39.800
They really should be errors instead of warnings,


00:21:39.800 --> 00:21:43.700
if you're really taking them out and just having the warning.


00:21:43.700 --> 00:21:46.400
Something like an assert is probably better.


00:21:46.400 --> 00:21:48.920
But there's a good thing to think about whether,


00:21:48.920 --> 00:21:50.920
don't just rip it out, maybe, I don't know.


00:21:50.920 --> 00:21:53.000
But if you rip it out completely,


00:21:53.000 --> 00:21:54.520
assert will happen automatically,


00:21:54.520 --> 00:21:55.920
so maybe that's a good thing.


00:21:55.920 --> 00:22:01.780
As far as packages though, you could just delete it so you can pipey I does allow you to remove packages


00:22:01.780 --> 00:22:09.260
I don't think that that's probably the right thing to do usually ever unless you just push something up and it was an accident then


00:22:09.260 --> 00:22:11.060
Deleting it is fine


00:22:11.060 --> 00:22:17.020
but if it's been up there for a while and people are using it deleting it has a problem that somebody else could take over


00:22:17.020 --> 00:22:18.180
the name and


00:22:18.180 --> 00:22:25.060
Possibly a malicious package could take over the name and start have people having install it. So there's problems with that


00:22:25.060 --> 00:22:27.560
so it's probably not a good choice most of the time.


00:22:27.560 --> 00:22:30.260
The last two options are more reasonable.


00:22:30.260 --> 00:22:32.260
There's a redirect shim.


00:22:32.260 --> 00:22:34.260
This is an example, let's say


00:22:34.260 --> 00:22:37.460
there's an obvious package that is compatible


00:22:37.460 --> 00:22:39.460
that is being better maintained


00:22:39.460 --> 00:22:42.160
and you want to push people over to there.


00:22:42.160 --> 00:22:44.160
If it's really very compatible,


00:22:44.160 --> 00:22:46.160
you can add a set of a shim that just,


00:22:46.160 --> 00:22:48.660
and there's some code examples here to just,


00:22:48.660 --> 00:22:50.460
if somebody installs it,


00:22:50.460 --> 00:22:52.960
it just installs the other package also


00:22:52.960 --> 00:22:55.120
I know what you want, we'll give you that one.


00:22:55.120 --> 00:22:59.720
>> Yeah. Even having if somebody imports your package,


00:22:59.720 --> 00:23:02.020
it really just imports the other package too.


00:23:02.020 --> 00:23:03.240
That's a little weird,


00:23:03.240 --> 00:23:06.480
but it is interesting that it's an option.


00:23:06.480 --> 00:23:08.960
The thing I really like that probably the best is


00:23:08.960 --> 00:23:11.700
just a way to fail during install.


00:23:11.700 --> 00:23:15.860
There's a code example here for if somebody installs something,


00:23:15.860 --> 00:23:18.320
and all the packaging works,


00:23:18.320 --> 00:23:21.400
but the install part will throw


00:23:21.400 --> 00:23:29.900
an error and you can put a message there redirecting people to use a different package or maybe just explain why you ripped this one out.


00:23:29.900 --> 00:23:32.000
So I think I like the last one best.


00:23:32.000 --> 00:23:36.700
So most of those are my commentary, but there's some options for how to deal with it.


00:23:36.700 --> 00:23:37.900
So I thought that was good.


00:23:37.900 --> 00:23:44.100
Yeah, I really like the sort of I tried to pip install it and it gives you instead of just failing or being gone.


00:23:44.100 --> 00:23:48.100
It actually gives you a meaningful message like you should use this other package.


00:23:48.100 --> 00:23:51.700
we're done. If you really intend to delete it, that's probably it.


00:23:51.700 --> 00:23:57.300
Yeah, and one of the interesting things, the last couple, the redirect shim and the fail during install,


00:23:57.300 --> 00:24:03.000
those, he gives example packages that do this. And some of these are just mistyped things.


00:24:03.000 --> 00:24:08.300
Like if people mistype something, maybe they meant something else.


00:24:08.300 --> 00:24:10.300
And redirecting there.


00:24:10.300 --> 00:24:14.000
Yeah, it seems so right only over at PyPI.


00:24:14.000 --> 00:24:18.000
And you know if you make a mistake it's not good.


00:24:18.000 --> 00:24:22.360
So knowing what to do. I mean people depend on it right? If you yank it out then it's trouble.


00:24:22.360 --> 00:24:26.800
Yeah but if it's mistake driven though make sure you use the test interface first


00:24:26.800 --> 00:24:30.360
to play with things before you push garbage up there.


00:24:30.360 --> 00:24:33.360
Also I'd really like people to not squat on names.


00:24:33.360 --> 00:24:36.860
There's a lot of cool package names out there that really have nothing


00:24:36.860 --> 00:24:42.560
meaningful there because somebody decided they wanted to grab a name and then didn't do anything with it.


00:24:42.560 --> 00:24:43.680
That's lame, don't do that.


00:24:43.680 --> 00:24:44.800
- Yeah, that's definitely lame.


00:24:44.800 --> 00:24:46.640
On the other hand, there are some times I'm like,


00:24:46.640 --> 00:24:48.200
how did you just get that name?


00:24:48.200 --> 00:24:49.640
There'll be like a new package,


00:24:49.640 --> 00:24:51.520
like secure or something like that.


00:24:51.520 --> 00:24:54.160
Like how did you get that after all this time, right?


00:24:54.160 --> 00:24:55.080
It's crazy.


00:24:55.080 --> 00:24:56.280
- Yeah, definitely.


00:24:56.280 --> 00:24:57.120
- Yeah, yeah.


00:24:57.120 --> 00:25:00.400
We're up to 236,000 packages.


00:25:00.400 --> 00:25:01.240
That's pretty insane.


00:25:01.240 --> 00:25:02.060
- Yeah.


00:25:02.060 --> 00:25:03.680
- So Brian, would you like me to enlighten you


00:25:03.680 --> 00:25:05.360
a little bit and the listeners?


00:25:05.360 --> 00:25:07.080
- Yes, please enlighten me.


00:25:07.080 --> 00:25:11.320
- So last time you brought up a cool progress bar.


00:25:11.320 --> 00:25:13.520
It was either last time or the time before,


00:25:13.520 --> 00:25:15.920
and it did all sorts of cool stuff.


00:25:15.920 --> 00:25:17.480
But here's yet another one.


00:25:17.480 --> 00:25:19.320
Again, an example of our listeners saying,


00:25:19.320 --> 00:25:21.040
oh, here's three cool things you talked about,


00:25:21.040 --> 00:25:22.480
but did you know there's these four others


00:25:22.480 --> 00:25:23.680
you've never heard of?


00:25:23.680 --> 00:25:28.680
So Avram Lubkin sent over his progress bar package


00:25:28.680 --> 00:25:32.280
called Enlighten, and it's actually pretty cool.


00:25:32.280 --> 00:25:33.820
Like there's a bunch of cool progress bars


00:25:33.820 --> 00:25:35.600
with nice animations and stuff,


00:25:35.600 --> 00:25:38.080
but there's a few features of Enlighten


00:25:38.080 --> 00:25:40.200
that might make you choose it.


00:25:40.200 --> 00:25:44.580
One is you can have colored progress bars, which is nice,


00:25:44.580 --> 00:25:45.420
but more importantly,


00:25:45.420 --> 00:25:47.300
you can have multicolored progress bars.


00:25:47.300 --> 00:25:48.540
So let me throw out an example


00:25:48.540 --> 00:25:51.260
that I think would connect for you,


00:25:51.260 --> 00:25:52.680
given that you're a fan of pytest.


00:25:52.680 --> 00:25:55.260
Like if you run some sort of series


00:25:55.260 --> 00:25:57.040
or sequence of operations


00:25:57.040 --> 00:25:58.360
and you wanna show how far you're making them,


00:25:58.360 --> 00:26:00.820
but they have multiple outcomes like red is failure,


00:26:00.820 --> 00:26:03.060
green is success, and yellow is like skip


00:26:03.060 --> 00:26:04.460
or something like that.


00:26:04.460 --> 00:26:08.060
You could have a progress bar that has three segments,


00:26:08.060 --> 00:26:11.420
a red segment, a yellow segment, and a green segment.


00:26:11.420 --> 00:26:12.860
And it could be all one bar,


00:26:12.860 --> 00:26:15.700
but it could kind of like show you as it grows,


00:26:15.700 --> 00:26:17.140
here's the level of failure,


00:26:17.140 --> 00:26:19.060
here's the level of success, and so on.


00:26:19.060 --> 00:26:21.820
All with color, 24-bit color,


00:26:21.820 --> 00:26:23.300
not just like eight colors either.


00:26:23.300 --> 00:26:24.860
- Oh yeah, that'd be great.


00:26:24.860 --> 00:26:25.700
That's cool. - Yeah, and then,


00:26:25.700 --> 00:26:27.200
and then I saw those just go off.


00:26:27.200 --> 00:26:30.380
The other one is, a lot of these progress bars,


00:26:30.380 --> 00:26:31.900
they'll sort of control,


00:26:31.900 --> 00:26:33.620
they'll be rewriting the screen, right?


00:26:33.620 --> 00:26:35.940
They'll be putting stuff across as it's happening.


00:26:35.940 --> 00:26:38.100
But if you happen to do like a print statement,


00:26:38.100 --> 00:26:39.820
effectively writing the standard out


00:26:39.820 --> 00:26:42.180
or an exception that writes a standard error


00:26:42.180 --> 00:26:46.100
or something like that, it messes them all up.


00:26:46.100 --> 00:26:48.100
So this one works well,


00:26:48.100 --> 00:26:51.020
even allows you to write print statements


00:26:51.020 --> 00:26:52.180
while it's working.


00:26:52.180 --> 00:26:54.860
So the print statements kind of flow by above it,


00:26:54.860 --> 00:26:57.540
but it's whatever part of the screen it's taken over,


00:26:57.540 --> 00:26:59.760
it still is managing that as well.


00:26:59.760 --> 00:27:02.520
So it overrides what print means or standard out


00:27:02.520 --> 00:27:04.020
and sends it where it belongs.


00:27:04.020 --> 00:27:04.860
- That's cool.


00:27:04.860 --> 00:27:09.260
That's pretty cool. It also automatically handles resizing except on Windows.


00:27:09.260 --> 00:27:14.060
And where it says except on Windows, I'm not sure if that means on the new terminal,


00:27:14.060 --> 00:27:19.060
Windows terminal that they came out with that's much closer to what we have over on Mac and Linux.


00:27:19.060 --> 00:27:24.460
Or if it just means it doesn't work on Windows at all. I suspect it might work on the new Windows terminal


00:27:24.460 --> 00:27:27.760
that just went 1.0, but certainly not on CMD.


00:27:27.760 --> 00:27:30.260
Okay. Who uses CMD? Okay.


00:27:30.260 --> 00:27:37.540
I mean that's what comes with Windows if you don't like go out of the way to get something right like commander or the new terminal or something like that.


00:27:37.540 --> 00:27:42.660
Yeah but you gotta install git at least on Windows anyway and then you got bash that comes with it.


00:27:42.660 --> 00:27:43.660
That's true.


00:27:43.660 --> 00:27:54.140
So like all good things that have actions and behaviors and are visual there's a nice little animation even on the pypi.org page.


00:27:54.140 --> 00:27:57.700
So if you go there, you can watch and actually see the stuff scrolling by.


00:27:57.700 --> 00:28:00.320
It's like an animated GIF right on the PyPI page.


00:28:00.320 --> 00:28:01.280
So very, very nice.


00:28:01.280 --> 00:28:01.760
Well done.


00:28:01.760 --> 00:28:04.740
You know, the multicolored progress bars, it does seem pretty


00:28:04.740 --> 00:28:05.920
awesome if that's your use case.


00:28:05.920 --> 00:28:06.920
I want rainbow ones.


00:28:06.920 --> 00:28:08.060
I want to do a rainbow.


00:28:08.060 --> 00:28:08.620
Yes.


00:28:08.620 --> 00:28:13.580
Maybe with like little unicorns just shooting out of it and just like all sorts of.


00:28:13.580 --> 00:28:14.220
Yeah.


00:28:14.220 --> 00:28:14.820
Sounds good.


00:28:14.820 --> 00:28:15.220
Yes.


00:28:15.220 --> 00:28:16.620
Stars and unicorns.


00:28:16.620 --> 00:28:17.140
Yes.


00:28:17.140 --> 00:28:17.860
It would be perfect.


00:28:17.860 --> 00:28:18.140
Yeah.


00:28:18.140 --> 00:28:19.080
Let's have that.


00:28:19.080 --> 00:28:21.120
And people are starting to catch on that.


00:28:21.120 --> 00:28:24.560
we like animations because they'll include it in the suggestion.


00:28:24.560 --> 00:28:26.320
And by the way, it has an animation.


00:28:26.320 --> 00:28:27.200
>> You can watch it here.


00:28:27.200 --> 00:28:27.880
Yeah, good job.


00:28:27.880 --> 00:28:28.680
>> Bringing it up.


00:28:28.680 --> 00:28:30.000
Yeah.


00:28:30.000 --> 00:28:30.600
>> You're part of it.


00:28:30.600 --> 00:28:31.240
Awesome.


00:28:31.240 --> 00:28:33.160
Well, nice work on that progress bar library.


00:28:33.160 --> 00:28:34.880
It seems simple and well done.


00:28:34.880 --> 00:28:37.680
>> Speaking of unicorns, I want to talk about oceans.


00:28:37.680 --> 00:28:40.160
Wait, unicorns don't live in the ocean.


00:28:40.160 --> 00:28:41.160
>> Mermaids.


00:28:41.160 --> 00:28:41.920
>> Mermaids.


00:28:41.920 --> 00:28:42.840
>> We'll just go with mermaids.


00:28:42.840 --> 00:28:44.720
>> So I want to talk about code ocean.


00:28:44.720 --> 00:28:48.000
So this was contributed by Daniel Mulkey.


00:28:48.000 --> 00:28:50.360
So this is a pretty neat thing.


00:28:50.360 --> 00:28:54.860
So Code Ocean is a paid service, but there's a free tier.


00:28:54.860 --> 00:28:57.900
And it's a research collaboration platform


00:28:57.900 --> 00:29:01.060
that supports researchers from the beginning of a project


00:29:01.060 --> 00:29:02.160
through publication.


00:29:02.160 --> 00:29:04.900
So this is kind of this neat thing.


00:29:04.900 --> 00:29:07.700
I'm going to read a little bit from their About page.


00:29:07.700 --> 00:29:10.620
We built a platform that can help give researchers back


00:29:10.620 --> 00:29:14.120
20% of the time they spend troubleshooting technology


00:29:14.120 --> 00:29:17.200
in order to run and reproduce past work before completing


00:29:17.200 --> 00:29:18.560
new experiments.


00:29:18.560 --> 00:29:23.440
and CodeOcean is an open access platform for code and data


00:29:23.440 --> 00:29:27.520
where users can develop, share, publish, and download code through a web browser,


00:29:27.520 --> 00:29:30.720
eliminating the need to install software, blah, blah, blah, blah.


00:29:30.720 --> 00:29:33.520
Anyway, mission is to make research easier.


00:29:33.520 --> 00:29:39.240
So this idea is you can have code snippets like Jupyter and Python


00:29:39.240 --> 00:29:42.880
and even things like MATLAB and C++ code


00:29:42.880 --> 00:29:46.360
running with the data in this kind of environment


00:29:46.360 --> 00:29:51.080
that you can collaborate with other people and just sort of build up


00:29:51.080 --> 00:29:55.480
these data sets and the science and the code and all bundled together.


00:29:55.480 --> 00:29:59.720
And it's pretty cool. It also collaborates with some,


00:29:59.720 --> 00:30:02.920
one of the goals of it is to be able to have all of this


00:30:02.920 --> 00:30:07.320
reproducible code and data together in a form that's


00:30:07.320 --> 00:30:11.640
acceptable to journals. And one of the reasons why it was


00:30:11.640 --> 00:30:16.280
contributed is Daniel said that one of the peer-reviewed journals that he reads


00:30:16.280 --> 00:30:20.120
it happened to be SPIE's optical engineering journal,


00:30:20.120 --> 00:30:23.420
recommended this platform for associating code with the article.


00:30:23.420 --> 00:30:26.920
So people trying to do science and be published,


00:30:26.920 --> 00:30:31.280
associating code ocean space with it is an option.


00:30:31.280 --> 00:30:35.620
That's cool. And if it gets accepted by editors as, yeah, that's what you do,


00:30:35.620 --> 00:30:37.880
then it just makes it easier.


00:30:37.880 --> 00:30:41.480
It's kind of like saying, oh, you have an open source project, what's the GitHub URL?


00:30:41.480 --> 00:30:44.420
Not is it on GitHub, just where on GitHub is it?


00:30:44.420 --> 00:30:47.360
I do technically know that there's GitLab and other places,


00:30:47.360 --> 00:30:50.360
but like most of the code that's on GitHub is what I was getting at, right?


00:30:50.360 --> 00:30:51.760
[laughs]


00:30:51.760 --> 00:30:52.120
Yeah.


00:30:52.120 --> 00:30:52.520
Cool.


00:30:52.520 --> 00:30:53.620
Well, this looks pretty neat.


00:30:53.620 --> 00:30:58.320
I do think there's a lot of interesting takes on reproducibility in science,


00:30:58.320 --> 00:31:00.620
and that's definitely a good thing.


00:31:00.620 --> 00:31:03.960
There's this, there's Binder,


00:31:03.960 --> 00:31:05.820
which is doing a lot of interesting stuff,


00:31:05.820 --> 00:31:10.480
although not as focused on exact reproducibility, but still nice.


00:31:10.480 --> 00:31:14.620
There's Gigantum, which is also a cool platform for this kind of stuff.


00:31:14.620 --> 00:31:17.580
So there's a lot of options and it's nice to see more of them like CodeOcean.


00:31:17.580 --> 00:31:17.880
Yeah.


00:31:17.880 --> 00:31:18.520
Nice.


00:31:18.520 --> 00:31:20.360
Well, that's our six.


00:31:20.360 --> 00:31:22.420
Do you have anything extra for us today?


00:31:22.420 --> 00:31:25.780
Uh, I'm going to try to connect this to Python cause I want to be


00:31:25.780 --> 00:31:27.440
excited, cause I am excited about it.


00:31:27.440 --> 00:31:31.780
How long has it been since astronauts have been launched into space?


00:31:31.780 --> 00:31:36.380
And from, from NASA and from the U S like it's been a really long time, ever since


00:31:36.380 --> 00:31:40.280
the space shuttle got shut down four or five years ago, I heard it was like over


00:31:40.280 --> 00:31:45.880
10 but I could have heard run. It's very possible. It's been a very long time. So today, I know this


00:31:45.880 --> 00:31:50.840
doesn't help you folks listening because the time it takes us to get this episode out, but hopefully


00:31:50.840 --> 00:31:57.480
this went well. But I'm super excited for SpaceX's launch in collaboration with NASA to send two


00:31:57.480 --> 00:32:05.320
astronauts up into space. Wow, are those guys brave to get onto one of these rockets. But also,


00:32:05.320 --> 00:32:07.640
So I think there's probably somewhere in the mix,


00:32:07.640 --> 00:32:10.140
a lot of Python in action.


00:32:10.140 --> 00:32:12.400
If you go to SpaceX, they had,


00:32:12.400 --> 00:32:14.560
last time I looked at one random point,


00:32:14.560 --> 00:32:15.720
a couple months ago,


00:32:15.720 --> 00:32:19.240
they had 92 open positions for Python developers.


00:32:19.240 --> 00:32:20.080
- Oh wow.


00:32:20.080 --> 00:32:22.160
- I don't know if that's 92 people they're looking for,


00:32:22.160 --> 00:32:25.360
but at least there's 92 roles they were trying to fill.


00:32:25.360 --> 00:32:27.440
There could be multiple people into any one role.


00:32:27.440 --> 00:32:29.420
So that's a lot of Python.


00:32:29.420 --> 00:32:31.200
And so somehow in this launch,


00:32:31.200 --> 00:32:34.200
there's got to be some interesting stories around Python.


00:32:34.200 --> 00:32:37.200
And this is mostly to say, one, it's awesome


00:32:37.200 --> 00:32:39.340
that SpaceX and NASA are doing this.


00:32:39.340 --> 00:32:40.520
Hopefully this goes well.


00:32:40.520 --> 00:32:41.680
Lots and lots of luck to that.


00:32:41.680 --> 00:32:46.060
But also, if anyone knows how to connect us


00:32:46.060 --> 00:32:49.520
with the people inside SpaceX doing awesome rocket stuff


00:32:49.520 --> 00:32:51.800
with Python, those would make great stories.


00:32:51.800 --> 00:32:54.880
We would love to hear about those introductions and whatnot.


00:32:54.880 --> 00:32:55.720
- Yeah, that would be cool.


00:32:55.720 --> 00:32:57.320
I'd love to hear more about that.


00:32:57.320 --> 00:32:59.600
Yeah, I do hope it goes well.


00:32:59.600 --> 00:33:02.520
And I heard that possibly there was weather problems


00:33:02.520 --> 00:33:04.860
that might crop up, but we'll--


00:33:04.860 --> 00:33:06.820
- Well, maybe people will get to watch this.


00:33:06.820 --> 00:33:07.660
(both laughing)


00:33:07.660 --> 00:33:08.480
- Not gonna let this happen.


00:33:08.480 --> 00:33:10.820
- Maybe it'll be delayed for a week, we'll see.


00:33:10.820 --> 00:33:12.020
Awesome, how about you, what do you got?


00:33:12.020 --> 00:33:15.100
- I just downloaded 3.90 beta one,


00:33:15.100 --> 00:33:19.100
so Python 3.9 beta one is available for testing.


00:33:19.100 --> 00:33:21.140
If you are maintaining a package


00:33:21.140 --> 00:33:23.820
or any other maintaining your application,


00:33:23.820 --> 00:33:24.980
you probably ought to download it


00:33:24.980 --> 00:33:27.620
and make sure your stuff works with 3.9.


00:33:27.620 --> 00:33:29.540
- Oh yeah, that's cool, and because it's a beta now,


00:33:29.540 --> 00:33:34.060
it should be frozen in terms of features and APIs and stuff, right?


00:33:34.060 --> 00:33:36.020
It's no longer changing.


00:33:36.020 --> 00:33:40.340
So it's now time to start making sure your stuff works and yelling if it--


00:33:40.340 --> 00:33:41.660
>>Yeah, right.


00:33:41.660 --> 00:33:44.700
And another reason to download it is the prompt--


00:33:44.700 --> 00:33:50.020
V and V with the prompt with the magic dot that turns your directory name.


00:33:50.020 --> 00:33:51.820
Yeah, that is in 3.9.


00:33:51.820 --> 00:33:52.780
>>Yeah, super cool.


00:33:52.780 --> 00:33:53.540
Awesome.


00:33:53.540 --> 00:33:56.140
Well, that's not very funny, but I could tell you something that is.


00:33:56.140 --> 00:33:58.780
And it's very relevant to your item here, actually.


00:33:58.780 --> 00:33:59.900
- Okay. - You ready for this?


00:33:59.900 --> 00:34:01.620
So open up this link here


00:34:01.620 --> 00:34:03.420
and I'll put the link in the show notes


00:34:03.420 --> 00:34:05.340
'cause this is a visual, I gotta describe it to you.


00:34:05.340 --> 00:34:07.140
So this was sent over by Stephen Howell.


00:34:07.140 --> 00:34:08.300
Thank you for that.


00:34:08.300 --> 00:34:10.560
And this would be better during Halloween,


00:34:10.560 --> 00:34:13.740
but Halloween's far away, so we're gonna do it this way.


00:34:13.740 --> 00:34:15.420
So there's a person standing around


00:34:15.420 --> 00:34:18.300
and there's a ghost standing behind them, right?


00:34:18.300 --> 00:34:20.180
- Yeah. - The ghost says, "Boo!"


00:34:20.180 --> 00:34:21.420
Person doesn't react.


00:34:21.420 --> 00:34:22.420
"Boo!"


00:34:22.420 --> 00:34:23.260
Person doesn't react.


00:34:23.260 --> 00:34:24.820
"Boo!"


00:34:24.820 --> 00:34:25.660
Person doesn't react.


00:34:25.660 --> 00:34:28.180
The person says, "Python 2.7, ah!"


00:34:28.180 --> 00:34:30.180
"Ahhh!" The person runs away.


00:34:30.180 --> 00:34:32.180
[laughter]


00:34:32.180 --> 00:34:33.180
Yeah, this is great.


00:34:33.180 --> 00:34:34.180
It's good, right?


00:34:34.180 --> 00:34:35.180
Yeah.


00:34:35.180 --> 00:34:36.180
You got what it was about. What do you got here?


00:34:36.180 --> 00:34:39.180
Well, I'm going to get haters for this, but I'm going to say it anyway.


00:34:39.180 --> 00:34:43.180
So, somebody named Bert sent us a meta joke,


00:34:43.180 --> 00:34:45.180
because we have used PyJokes before.


00:34:45.180 --> 00:34:46.180
We love PyJokes.


00:34:46.180 --> 00:34:48.180
And I'm going to modify it a little bit.


00:34:48.180 --> 00:34:50.180
So, what does PyJokes have in common with Java?


00:34:50.180 --> 00:34:54.180
It gets updated all the time, but never gets any better.


00:34:54.180 --> 00:34:55.180
[laughter]


00:34:55.180 --> 00:34:56.180
That's pretty funny.


00:34:56.180 --> 00:35:00.180
I don't even really use Java, but I have a Java tool on my desktop.


00:35:00.180 --> 00:35:03.180
And so I get like, "Java's updated. Do you want to do the update?"


00:35:03.180 --> 00:35:04.180
All the time.


00:35:04.180 --> 00:35:06.180
Make it stop.


00:35:06.180 --> 00:35:08.180
Yeah, that's funny.


00:35:08.180 --> 00:35:09.180
Yeah, PyJokes is good.


00:35:09.180 --> 00:35:13.180
If you all need some programming jokes, just pip install --user pyjokes.


00:35:13.180 --> 00:35:15.180
And then you can type "pyjoke" anytime you want.


00:35:15.180 --> 00:35:16.180
Yeah.


00:35:16.180 --> 00:35:21.180
I had to change it because the original joke was like about Flash, Adobe Flash.


00:35:21.180 --> 00:35:24.180
And who has that? Is that even a thing anymore?


00:35:24.180 --> 00:35:26.660
Yeah, I don't even think it gets updated anymore.


00:35:26.660 --> 00:35:27.660
I don't know, maybe it does.


00:35:27.660 --> 00:35:29.140
I sure hope it's not on my computer.


00:35:29.140 --> 00:35:30.140
Yeah.


00:35:30.140 --> 00:35:31.140
It's a security flaw.


00:35:31.140 --> 00:35:32.140
Yeah, it totally is.


00:35:32.140 --> 00:35:33.140
Awesome.


00:35:33.140 --> 00:35:34.140
All right, well, very funny.


00:35:34.140 --> 00:35:35.140
All right.


00:35:35.140 --> 00:35:36.140
Thank you.


00:35:36.140 --> 00:35:37.140
Yep, you bet.


00:35:37.140 --> 00:35:38.140
Bye-bye.


00:35:38.140 --> 00:35:39.140
Thank you for listening to Python Bytes.


00:35:39.140 --> 00:35:41.780
Follow the show on Twitter @pythonbytes.


00:35:41.780 --> 00:35:44.780
That's Python Bytes as in B-Y-T-E-S.


00:35:44.780 --> 00:35:47.660
And get the full show notes at pythonbytes.fm.


00:35:47.660 --> 00:35:52.220
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:35:52.220 --> 00:35:53.220
way.


00:35:53.220 --> 00:35:57.060
out for sharing something cool. This is Brian Okken and on behalf of myself and


00:35:57.060 --> 00:36:00.180
Michael Kennedy, thank you for listening and sharing this podcast with your


00:36:00.180 --> 00:36:02.940
friends and colleagues.

