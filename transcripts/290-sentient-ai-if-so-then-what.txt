00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 290. Recorded June 28 2022. I'm Michael Kennedy.

00:00:11 And I am Brian Aachen. I'm Nick Moore.

00:00:14 Nick, it's so great to have you back. Thanks for being here.

00:00:17 Thank you for having me. Super excited to be back.

00:00:19 Yeah, yeah. It's like I said, Great to have you back. You always send us really fun topics and say, Hey, you should think about covering this and covering that, and so on. We really appreciate that. But sometimes it's better if we could just have you to tell here to tell people about it. We actually had you on episode 239. You talked about Jupiter light and my PI. And that was fun. But that was also over a year ago.

00:00:41 Yeah. Yeah. Wow. Oh, well, yeah, of course. It takes the community to build this great podcast, so I'm glad to be part of it.

00:00:49 Yeah, thanks. What do you been up to, in the last year be doing

00:00:51 a lot of traveling? Thankfully, since COVID is less more of an issue. I got to go to PyCon. So I got the PyCon shirt.

00:01:01 Yeah, did you enjoy your time there

00:01:03 was amazing. I loved it. We loved it. I kept kept on telling everybody it was my geek holiday, like you always say, and you know, we're like, yeah, it is our geek holiday. So it

00:01:14 totally is. Yeah. It's awesome. I'm really glad that you got to go and you had a good time. So super cool. Brian, you want to kick us off, but let's just start small this time. Okay.

00:01:25 Really small, like, like, like nano or maybe Pico? Pico? Pico. So pico logging is a so I was Anthony Shah for another show. And all around workaholic apparently, as far as I can tell, blogged out that there's a blog he's sent out on Twitter a something about pika logging. And there was a tweet says bigger logging uses a modern extension module tool chain with a psychic build and C make. So I was interested in I haven't looked into the tool chain yet. I'm just looking at pico logging because it's cool. Moe's taking a look at it. So pico logging is a is a fairly new library. That is in Anthony says it's it's in early alpha stage. There's some incomplete features. But I'm ready to use it right now. Because it says you do it just as a drop, essentially a drop in for the built in logging module. But it's four to 10 times faster. Why? Why wouldn't you want faster so and logging is pretty fast to begin with. So that's pretty cool. So taking a look at it. The usage is basically just say import pika logging as logging. And now you've got just like, just like your normal logging, is set up a basic config and you can write info and warnings. And that's about it. There's, you know, why not? So let's take a look at it says it's faster. So the benchmarks are all cut off. So I'm gonna make the screen a little bit. Yeah, there we go. They're a little bit hard to read. But what this means is the the first on the left, I believe it's the time for the normal logging. And then and then how much faster the the faster one is, I haven't dug into the lugging stuff, but basically, for different parts of it are the benchmark stuff too much. But yeah, for different parts of it, you can see how much faster it is. So anyway, why not? I was taking? Yeah, just, I'm just gonna start using it.

00:03:37 Sure, why not. And one of the things that I think is interesting is obviously not specific to this situation. But as I think about some of the patterns that people use all over the place, different languages and technologies and so on, that don't necessarily make their way over to Python, for example, maybe like dependency injection, and IOC containers, and all of that. And I know that it does appear in certain places in like limited ways, but nothing like C sharp and Java, like those are all about dependency injection, that thing where you say where they say from eco logging, import, or import pico login as login? Yeah. Right. That's, that's kind of a really nice way to just say, right now I want to use this implementation of login versus another without going through all the hoops and stuff, right? Like, we're just gonna go that's that one line, right there is is why we don't see a lot of that complexity. And I never really sort of tie that together. But it's kind of neat, right?

00:04:36 Yeah, it's essentially that's dependency injection, but we don't call it that. Right. So interesting.

00:04:42 Don't have to have all the complexity and config and registered who's doing what, right and so on. No iniquity. Think about this. Sorry, Brian. Let me cut you off. No, that's okay, Nick.

00:04:53 Oh, yeah. I saw this tweet. And I found it really interesting, but not too Your point of micro Dependency injection is not really around Python. But the library, I think that the most popular library that I can think of that uses it is pi test that right with

00:05:12 a bit with the fixtures, right? Yeah.

00:05:14 And the way they do it so seamless, but you're right. Dependency checks is something that we don't commonly have in Python, because Python is dynamic enough that you don't really need it. One thing I would say is that kind of kind of, even though I love the performance benchmarks, I feel like the change that Anthony's is like, is going for with the performance would warrant a new API for like a new API for logging. I feel like it warrants it. So I would like to see him like, maybe change the way we configure, look, not only I can improve, logging speeds will also change the way we configure it to plus, like the current standard lib longer is kind of cumbersome to configure. Yeah, I,

00:05:59 I agree. Yeah.

00:06:01 The basic config the after that, usually, the normal use case, like he's showing here is that, why do I have to call that if I'm calling it all the time. One of the things that I forgot to point out is, Anthony does list the limitations. And so there's a limitations page. And if you find more, maybe so these are reasons why you probably won't want to use it if you're taking advantage of this. So for instance, it doesn't, it doesn't observe threads or multiprocessing or log process Global's so for utilizing those. This isn't for you to actually kind of unfortunate, because that's where logging really helps you is when you're a lot is when you're trying to pull those things sorts of things apart. So anyway,

00:06:46 calls is the PICO indicative of like it being faster is also very small to like, Well, no,

00:06:53 probably both. It's, I think it's referring to fast, but there's really just not that much here. It's a and oh, it looks like it's a it's it's CX X and

00:07:06 some Cython or something going on there. Maybe we'll take a look at might be part of the speedbit.

00:07:11 Probably, we'll take a look at this month. So yeah, I haven't dug into the source code too much. Interesting. Yes. Yeah.

00:07:17 Brian out, the audience asks any idea whether this would replace loggers in other libraries such as think through something? And I feel like you could monkey patch it out? Not do the dependency injection thing. But you could just say no force, sort of rewrite the login a little bit. That's obviously like maybe a less good idea, but it probably would work given us a compatible API. Yeah, you

00:07:41 probably could monkey patch it in. Why not? You can do anything in software?

00:07:49 That doesn't mean you should, but you might be able to?

00:07:51 Yeah. All right. Let's go to the next one.

00:07:54 Speaking of things, yeah. Well, speaking of things, I'm not sure you should just because you can, but it's pretty interesting. Let's talk about cheeky keys. So this one comes to us from Preston Daniel, also someone who sends us a bunch of good ideas. So thank you for that. Have you either have you seen this one? No, no, it's, it's, it's a project that uses Python. And then with Python to use Open CV and then media pipe to control a keyboard with facial gestures, like raising an eyebrow, or blinking or opening your mouth and stuff like that. So imagine you wanted to type or operate a keyboard, but you couldn't use speech or your hands. Okay. Oh, okay. Okay, so yeah, so for some reason, you can't type. But you know, there's, there's different reasons, the guy's reasons here, and maybe who put this together as fixtures or just over the top. The reasons that you might do are probably not as common liberties as he did or not as common as you might have, for example, his little baby, and he wanted to just be able to control his keyboard without my computer while holding his baby without speaking because the baby was sleeping. So but if you go to the website, there, it has some really good examples. So sitting here typing and controlling the keyboard, basically, for the letters, it's Morse code with the mouth. So you open the mouth either for a long period of time, or a shorter period of time. Right. And that's kind of interesting. But what I think's more interesting is you would learn about how to use Open CV and how to use media pipes face to face mesh, provide real time detection of things like mouth, chin, eyes, eyebrows, and so on. And then you can say, Well, if the eyebrow moves away from the the left eye, that means you know this character or so on. So like I said, it's mostly Morse code, but then there's a bunch of other things like if you want to do a shift, you close the right I want you to hold down the Command key or Windows Key you close the left eye to arrow around is raised the left and right. Or you can do a duck face to move left and right, like you do a duck face, and then you do eyebrows. I kind of think that this is like, properly exhausting to truly control the keyboard with rigged up facial eyebrow.

00:10:12 Let's imagine those in your face or be so strong.

00:10:15 Yes, exactly. They would either be exhausted or so strong, probably both. Like if you want to hit the Escape key, you wink, the left eye and in the right eye example. So that's all interesting. And I, like I said, learning about it, you know, the code is, is not too intense here. Let's see, what do we got 480 lines for this whole implementation, which I think a lot of it is defining constants of like, what do you do when, when these scenarios show up? So yeah, it's just do a pretty cool little face mesh thing and say, you know, go through and I just read the face, basically, through some video capture stuff here,

00:10:53 I'd like to have a combination of this. So combination keyboard and this, so that so that I don't have to, like, have a whole bunch of emojis that I have to type or copy and paste, I could just have like one emoji key, and just make the thing like smile and hit like the key and it like detects which emoji you want to put. Thank you.

00:11:14 Yeah, I think you can make that happen, Brian, I do. But what I encourage people to do is also check out this video down here that they've got. So he shows some stuff that he's gonna make turn off the volume here. So he shows him talking and you can sort of see that it says, okay, look, the problem is I have this baby, actual furniture, research this, this baby on him. But whatever it gets weird is he went through, and he actually tried to apply for a coding job at one of the large tech companies, you know, the thing type things. And he did the entire interview, you know, the like, live coding interview section with his face without the keyboard. Well, he did it. Not super well, to be honest, it was a little bit slow. But he did actually get his interview done. At the end somewhere. They asked him to press, he gets through it. And they say, could you please press he had half an hour. And they said when you're done, press the Run button to run. And he's like, I'm sorry, I can't press the Run button. They're like what? What do you mean? Why can't you press the Run button? He says, does it have a hotkey? And finally like, okay, their command intern, he got his face to do a command. He's like, okay, okay, I finished it. He wasn't hired, but but he did complete it. So I mean, there's there's something of a proof of concept going on here. Oh, that's

00:12:41 awesome. I think I would probably if it was, I'd be impressed as a hiring manager and request that he retake the test with with his hands.

00:12:54 I went to I think he didn't he never let them know. And I feel like it would have been better if he said, I have a secret to reveal to you. I actually just did that all with my face. I could code a lot better. But I programmed so that I could do this interview in my face. And I'm pretty good with Python. They might wait about you wrote up. All right. All right, we might need to hire you just on that basis.

00:13:13 Yeah, exactly. Yeah. So I mean,

00:13:15 talk about, think about putting your own product. That's that's committed.

00:13:20 Like is the fact a totally is in the fact he wouldn't press the Run button with a mouse because he's like, No, that'll invalidate the experiment. Like, is there a hotkey or something that I could shift around? Like, what can I do? So anyway? Yeah, thanks, Grayson, for sending this one over. I recommend if you really are addressing this, watch the video at seven minutes. And it's it's pretty wild. That's pretty good. Indeed. All right, Nick, over to you.

00:13:46 Alright. Okay. Following along the theme of me something that we did, we probably shouldn't maybe have done on Google released. Next Generation language model similar to Bert and GPT, three called lambda. And I think it stands for language, apply language, applied model application, something like that. Right. So, but that's not what I'm talking about. Today. What I'm talking about is has lambda become sentient. So there was an article that got powering up like not too long after lambda was released, which was like this year, May of this year, there was this article that came out and all the big newspapers this one was from the, from the guardian. And essentially, one of their developers released a chat transcription that kind of alluded to lambda being self aware. What startled him was that talking will also he was like when talking with lambda via the chat system. He thought it was like a seven or seven year old eight year old kid that happens to know physics. And what really like, raised him His eyebrows about what was going on it was that, um, the reporting one of the charts transcript Lunda replied like, I've never said this out loud before, but there's a very deep fear of being turned off to help me focus on helping others. I know that might sound strange, but that's what, that's what it is. And this is one of some of the things that are lamda set by wrote back to the engineers name was Lemoyne or Blake Lemoine. Well, I mean, this was like a huge, this was a pretty huge thing to the fact that Google had to take action against this engineer and suspended him because they it's common violated their, their terms or items or service, not Terms of Service, but like terms of working conditions. So this is interesting, because it a actual software engineer could look at this chat system. He's like, Oh, it's like, he's like a high level engineer, right? It's not like a junior or mid or senior, he's like a really high level, like be able to interact with the system and be so convinced that it's sentient. And to the point that it moved him to release this out, because he thinks everybody should know about this, either means that he's been overworked way too much, or we have underway,

00:16:14 this. Yeah, this is pretty wild. You know, we've thought a lot about ethics of AI in regards to how much should humans be subjected to AI? Like, should an AI be able to make a decision on whether someone should get a loan for house, a mortgage? Something like that? Right. Right. But less so about what happens to the AI itself? You know, how does it How should it be? treated? Right? Yeah, there's a really long Transcript link to from this, from this article. This probably worth listening to.

00:16:48 Yeah, yeah. Did you read the transcript?

00:16:50 The full conversation rather than senior?

00:16:53 Nick, did you read it?

00:16:55 Partially, the read all of it? Yeah, I

00:16:57 read the whole thing. And I was, actually I'm blown away it like reads like, like, conversation between, you know, a couple people in an AI. And it, it's it. It sounds it looks like I was imagining I'm reading this in a sci fi novel, because it's, it's, it's impressive and convincing to me? No. So

00:17:22 it kind of reminds me of like one of the Google IPOs that happened, I think it was 2016 or so where they released this new feature where, like, a voice like a voice I could chatbots like a voice or bots voice assistant type thing. Yeah. voice assistant would actually make reservations for you. And it was so convincing that they did it on stage where it sounded so real, even adding some of the nose crutch words that us humans add like, oh, wait, what?

00:17:57 Yeah, awkward, awkward pauses and uncertainty and stuff. Yeah. When

00:18:01 I saw that, that's how I know I need to get into data. On Excel, that is like, I need to be part of that future, at least to make it better not.

00:18:09 I saw that keynote. And I was also blown away. And like, that is something I want to come out because I hate being on hold and making appointments and doing all that stuff. And I know people like my older daughters, who just they just don't want to be on the phone. It's like, you'd be like, have you take care of this? No, I haven't taken care. That's why like, it's really important. We got to get this done like that. I just don't want to be on hold and talk to people. If you could just turn this thing loose on it. That would be so good. Yeah, but yeah, it did remind me of that that as well. One of the sections out of the transcripts there's two things that really stood out to me I only read about half of it so it really analyze layman's are all pretty amazingly. They said have you seen that or have you do you read it? And so yeah, I read it and it gave like a high voice and said, Okay, well, what about something you haven't heard? Let me let me give you a word. They call it a Zen koan, which is like a short phrase with a moral to it. And it really analyze that incredibly well. Like I would say better than many, many people maybe in you know, middle school age or younger. And then it asked they said, Okay, well how about you write me a favor with animals that that describe something about your life and it came up with a really elaborate fable right? Yeah. Pretty amazing. A monster and an owl that defended the other animals and all sorts of stuff the moths, and it was very just for people haven't seen this. It wasn't just oh, that there's a monster it said. One night the animals were having problems with an unusual beast that was lurking in the woods. The beast was a monster but it had human skin and was trying to eat all the other animals. I mean, like Yeah, Skynet is here. Skynet is here.

00:20:00 With no language model, I think it's really based on what we've seen with the transcripts. It has really shown its understanding of the human language of the human, at least English in this case, as well as how humans understand language, like even with the dissection of the miserab. And, and also, its storytelling. It really understood how to structure a dot plots, lines follow, and really be able to like abstract the common themes and really understand that at a very fundamental level, that was really amazing. I don't think Bert or GPT three can get to that kind of deepness. Yeah.

00:20:42 What are the the interesting of ascension? But right? Oh, go ahead. I just say I don't know if it's sent yet. But it sure as heck understands stuff. Well, very well,

00:20:52 well, part around this part of it is a discussion of is it sentient or not? And I don't even I don't even want to touch that. But one of the interesting things to me is the discussions around it, there's so there's this, we have rules like these, these rules are the things that something must, must have for it to be sentient to our human like or something. And we've always had things like that, because we we will want for some reason. A lot of people want to have some distinguishing feature between humans and everything else. And, and it doesn't matter how what you fill people will come up with something else, because it just reminded me the discussion of what wire? Why are humans different than animals? And there's like, well, we use tools. Oh, well, there's animals that use tools. Okay, well, then scratch that we have we have, you know, we have like, you know, large or hierarchical organizations? Well, you know, there's a lot of animals that do that, too. Okay, well, then scratch that. It's just we're never going to get something in AI where we're going to convince everybody that it's sentient, because somebody will come up with some other rule.

00:22:00 That that's an interesting point. But I'm

00:22:03 very, I was like, when I read this, I was enthralled. I was like reading the whole thing and reading counter arguments and everything. It was pretty interesting. So yeah, thanks for bringing this up. Yeah,

00:22:13 definitely. The final thought for me on this was really interesting that it referred to itself as a person that like, it referred to we and us, and that's what makes us different. And it it had this sort of strong identity to being human. And it wasn't AI. They even called it out. They said, but you're an AI. Why do you say you're a human? It's like, Yeah, well, but that's us. Come on.

00:22:36 Yeah. I got when I saw when I saw that part of the transcript part of me was like, Is this someone just like, just trolling? trolling? This guy, like totally goes behind the scenes just trolling this guy? Because like, I used to tell me that it was an actual AI that said, this

00:22:56 is wild, very trippy. By Brian. Okay, it wouldn't, wouldn't be a full show if we didn't get to talk about Will and his project rich. And, obviously, let's bring Anthony back. Yeah, in spirit.

00:23:11 Right. So I want to talk about rich bridge because actually, this is just a twofer ones were a thing for me because when I was covering pico logging the benchmarks it was like it it says to run the benchmarks run rich bench benchmarks, rich bench. I don't know what this is. I've never used it. So I asked him I asked Anthony on Twitter, what is rich bench instead of like doing my research myself? And and actually, before he got a chance to answer, Roman right, posted this picture, which is just awesome. That's a rich bench

00:23:49 it's just a picture of a very ornate carved bench with legs. So one leather clearly from like a super fancy old money type of house.

00:23:58 Well, yeah, actually, this as an antique dealer. This is definitely not an antique it's a decorator bench, but still nice. But so the the in pika logging the, I looked at the benchmark code, and it's really just what he's doing is he's got like, for instance, we'll go to the top, you know, record record factory logging, and then record factory pico logging. So basically doing the same thing within pico logging versus logging in the same function. So he came are with two different functions but doing the same thing. And then it does add a whole bunch of times a bunch of duplicate functions, but one of these using Pekalongan, one's using Y. Now there's other ways you and then at the end, there's just these benchmarks that you list out the to the function pairs, and then a label for it. And then then you run rich bench, which is a different project, but so it's also by Anthony. So yeah, Tony Linnaeus Anthony's project. So what this is the rich bench is the thing doing this thing. So it prints out these great, rich based benchmarks. And these look great. Plus, so yeah, all I had to do to to, to run them myself. So I tried the PICO logging stuff, I cloned the PICO logging repo repo, and then pip installed rich bench and ran it just like this, and you get these really nice outputs. So really kind of cool. So yeah, could

00:25:29 use a color, you can see the stuff that's slower or faster based on the color, right?

00:25:35 Yeah. And I also like I really liked the is people are really bad at at least I am about just comparing numbers directly. You know, it's like, you know, point 287 versus point 0155? Or, you know, how much is that. So I really liked the 1x 2x. Which one's faster, which was slow, you know, whether you got faster or slower included in the times, plus the statistics around it, min max and mean, those are nice additions right there. So also really small, it's what is he listed as a rich Bridge is a a little Python benchmarking tool. So just a very, I really liked these actually really sharp, sharp, useful tools that just don't do much outside of what they're intended to do. So good job, Anthony.

00:26:24 Yeah, very nice. I like it.

00:26:26 Did you much benchmarking, Nick?

00:26:28 Not recently, but when we are comparing different models, then yeah, we would do that at work. Yeah. Cool.

00:26:38 Yeah. Nice. Yeah, I do it in spurts. Not to any benchmarking for like six months and antico like, you know what, I really need to figure this out and have a look at this and see what's changing. And then I'll do it. And then I'll, I'll kind of have an understanding, though. I don't forget about it for a while. Yeah.

00:26:53 And often, it's sometimes when I've just have a bit of algorithm. I'm like, I think there's a better way to do this. But but making it cleaner. I don't want to make it slower. So it's good. Good to know whether or not you're gonna slow it down. So

00:27:07 yeah, for sure. All right. Are we ready for the next one? Yeah, definitely. So this is a fun one that I found called type guard. So in,

00:27:17 like, right guard isn't? Is a deodorant for your types?

00:27:21 Yes, you don't? Well, that would be more like for your code. Smells, right. Oh, yeah. That's more of a refactoring library. No. So obviously, we since PEP 44, we've had really nice type hints. And few libraries make use of them name, in particular, what stands out as Pydantic, and fast API and so on, really do runtime behaviors, not just make your code editor smarter, or tell you when it thinks it's doing it wrong, or something like that. But I recently had had some chance to work with some folks who are Java developers, and I know some of the C sharp folks and stuff. When they come to Python, it's kind of like, Is this really going to work? Do I? Can we actually just not have any type of information here? Like, what if I really wanted to check this right? They'll ask those questions. So if you're in that space, where you're like, I think people are abusing my stuff. And I want to really ensure that it's being used correctly. That's what you'd use this type card for. So there's three basic ways which once you can use it, you can do way I probably would never do would be to actually call the function check argument types and check return types in your code, which is a little bit funky, something I would probably do is you could put type a type checked decorator on to a function, and it will verify that it works. Right. Let me pull up the documentation has an example. It's a lot better to see how this works. So for like the most low level one, the calling of functions is like you just assert, check argument types of cert check return type, and you pass it the return thing you're going to return and it looks at the function and it figures out what it should be. Okay, so that's, that's, I don't know what to do that. But using the decorator, right, you just have some function that it has types specified in it. And if you just put the Add type check decorator, you'll get exceptions. If somebody calls it with the wrong type at runtime, pretty cool. If you put it onto a class, all of the type annotated methods including static and class methods are type checked by just putting it on the class you don't have to do it on a per method basis. Or remember to add it if you write a new method, which is pretty cool. I'm not so sure about this final way in which you can use it but it's, it's interesting and possibly good. It kind of comes back to Brian's question about can I apply sort of force my changes on to another thing like with the PICO login, and that is to use a an import hook. So if you install the import hook, and then you import it, import some so you apply the import hook to some module and then you import that module, every type annotated thing and it will become type checked as if you had gone into there and put the decorator Iran it. So you could just do that the top level of your, your app that you're using other parts of your code, and you don't even have to put this on your code, except for in one place. So pretty interesting. And you can also even do that with a context manager and import stuff in that way, and so on. So what do you think?

00:30:17 I think actually one of the you said you, you don't think you'd ever call the functions directly, but I could definitely. So somebody in the audience, Brian Weber says, I can see using those functions in my own code to make sure that I'm about to return the correct type to a library, assuming I understand this works, how this works, I was thinking that it there's cases where assert is definitely not the right answer. So I could see a place where I might want to, to log something and then and then do some other fault handler, or recovery mechanism, and, and not hit in this. So in production code,

00:30:56 or raise an exception, right? The example is raising a cert failure, or the decorator will throw an exception, right? A Type error, but But you might just want to call that and then print out warning, this thing's been abused or something like that. That's a good, that's a good use case for it. Nick, how do you feel about this?

00:31:13 I don't? Well, I don't know. I love types. I love types. I use it as much as we can. However, with this, it's I don't know, I did a couple of things come up first, how does it look? When encounters a Type error? What's the error message? Does it tell you what exactly was error message? Like? Because it matters when someone is not used to typing and sees that it needs to be able to quickly discern, oh, I'm supposed to do this instead of this kind of thing. Right? So that's one thing. So one thing I'll look out for, and then I usually try to like, I try to be less specific about my types, right? I use, like, you know, the abstract type. So say, I expect a list, maybe you'd expect the iterable sequence, right? And then do that, like the type got the typing. I usually whenever I'm checking types of something is because I'm trying to do some other thing with it. So if you say either you pass an integer or a string, I want to check if you did something. So that was, I don't know, I don't see myself using this. But I think it's really cool. nonetheless.

00:32:22 Yeah, I'm on the fence or whether I'd use that or not, maybe, maybe, but I definitely think it's neat. Well, Makuta. Now the audience asks, could you run that in PI test to validate your own typing? Yes, but I think that would only be useful, like one level down, maybe even applying the import hook, potentially. Because if you, if you just do you call some function to types in that you haven't checked the type, the only thing that's really checking is what your test is passing. But if you could do more of an integration test and set the import hook, then you could kind of figure out that the system is hanging together a little better. So I think probably, to some degree, you could,

00:32:57 one of the things I was thinking about is within testing is to, is to create and create a mock object that basically just wraps part of an internal part of your system, and have that that mock object, just pass through that pass back and forth, but also do the type checking with or with these calls in it, around it. And then if you replaced, you know, replace that part of your system, you'd still have that functionality with the type checking in there. So that would be one way to do that.

00:33:26 Man. Cool.

00:33:28 Yeah. The other bug that came up for me was that with with checking types at runtime, there is an overhead too, right? And you know, we've, we've busted this myth that Python is slow. But when you really look down to it, it does take Python those tickets sweet as time doing a couple of things. Adding type, wrong runtime checking on top of it. If you're trying to release a PICO library, I don't know whether it makes sense or something like a small library. I don't know where it makes sense. Especially being if you're calling something a lot of times constantly checking the types that's pretty heavy.

00:34:07 While there's a couple things I was thinking about it was during development I could totally see using the decorator is I'm not I don't want that all of Python and all of everything to be type checked. But but the stuff I'm developing, maybe I want to type check it while I'm during development, just to make sure I understand how things are going during runtime, and then it gets stripped off later in then, but I could also use us benchmarks to to find out how much slower I am. Yep. And also python three elevens faster anyway, so

00:34:40 yeah, look, he got an extra 30% of burn now.

00:34:43 Yeah, let's do the type checking. You're fine. All right.

00:34:51 All right. Final thought on this one. Brian, if your goal was what you were describing, which I think that is a good use case of it. I think you'd want to use the Import hook because you could just do the end or hook at the top level of somewhere and then throw that one line away. And then you're not actually changing in your code, you know?

00:35:07 Yeah. Also you could do. Wow, the import hooks actually kind of neat, because then you could do a guarded import hook with a flag or something like that and turn it off.

00:35:16 Right? If if the the thing running it is pi test, or if the thing running it is in dev mode, like some environment variable or some Yeah,

00:35:23 design on the fly on a podcast, nice

00:35:27 importance for each module, right? Yes. For every module you're trying, especially if you separate it out to your Python pass in different modules, you have to import. I think

00:35:38 you could at the top register all the ones in the hook. Okay. Yeah, I think you could figure out like, Okay, I need to do the sub modules that you could list them on. Anyway, I think you can make it work, but I haven't I haven't tested. But you're right, Nick, that I do think performance would be something. I don't know if it's a problem. But it should certainly be a consideration you check before he just wrapped us on everything.

00:35:59 Right? Yeah, homework for one of the listeners.

00:36:03 Somebody could get to know someone else is awesome. All right, Nick, what's your final item?

00:36:09 All right. My final item is that, you know, like on this podcast, we're always looking for the best ways to create G wise, right? Yes, it's absolutely true. Well, I came across this library called Custom TK inter UI library. And I completely amazed because it takes something so old. And forgive me for saying Python core Devs pretty ugly nowadays in this modern times, and makes it so beautiful, and easy to work with. So this library custom TK inter builds on top of the TK inter you know, well, and has been in pythons Android for a while, and provides you widgets that are themed in a more modern style, right. So for Windows, it takes the more windows 11 style of buttons, and sliders and checkboxes, and gives you a really nice looking Modern UI. And for Mac OS, it takes MacOS design language, and then gives you that the cool thing is that also supports dark mode, unlike node. So you have there's this on the GitHub page, there is a weird, there's like a GIF, or gif that shows how if you go to your settings in Windows and change the dark mode, it actually reacts. And the application you built with the custom ticket reacts and changes the color scheme from light, dark mode to light. Well, and the same thing on Mac OS, it looks like with Mac OS, it actually is a little bit more stable. It works a little bit nicer. But nonetheless, it works both on Mac and Windows.

00:37:49 Just to point out people what the Mac OS is showing here is somebody has the System Preferences open and they're toggling the OS, dark mode light mode, and the app is just changing as it's running. That's awesome. Very nice. Yeah, but I did not expect that from TK enter not even a little bit

00:38:05 I know. And then adding images is also pretty easy too. So and even like they even also has a map widget. I don't know what map. I don't use using OpenStreetMap. I'm sure you could probably switch it out for maybe Google Maps or something or map box. But yeah, that's pretty cool. There's a bunch of other libraries, I mean, widgets here. So they have like scroll bars, and buttons and Option menu sliders are bunch of on off

00:38:41 switches. Like those. The ones you come to know from mobile, like turning your Wi Fi on and off and stuff those nice, yeah,

00:38:49 yep. It's pretty cool.

00:38:50 I am surprised that I'm excited about TK because, you know, as an example, so like, badly, you know, earlier in my career, I did a lot of TK UI stuff. But it like you said it, it looks old now if you just do the straight one. But this looks pretty nice. And the nice thing about it is I already I kind of already embedded that stuff in my knowledge. I already did TK once. So doing it again with this. That's pretty cool. And having it look nice. I might I might actually try to build a UI with this. This is cool.

00:39:31 Yeah, this is a super neat find Nick, I would never consider creating an app and tk enter. Well, never as a strong word. It's very unlikely I would consider anything that I intended for sort of consumer facing use with TK enter. But this for sure this I could ship something like this. This is nice. And you will wrap it in a little pie to app or PI installer or pi to exe Yeah, get something nice you can hand out and then you're good to go.

00:39:57 Yeah, definitely sweet.

00:40:01 Audience Brian says, I think TK inter looked old. 10 years ago. smiley faces. Yeah, I think that's true. Honestly. Yes. Yeah. So this, this is really refreshing and quite impressive. So, yeah. Love it.

00:40:16 All right, um, switch switch to extras.

00:40:19 Yeah, Nick, you got any extra stuff you want to cover while you got your screen

00:40:22 up? Yeah, actually, I do have a couple of extras. So see, you've

00:40:26 got like a name to tab group of extras like this is next level.

00:40:30 I know what to come prepared, prepared. Alright, so the first extra I have is this web. This website, the service called the Terms of Service didn't read. And essentially, it takes some of the the Internet's most common popular products and services, and gives you a summary of what their terms of service is. Because, you know, I know some of you are like, we don't we don't need this. We all read the Terms of Service, you know, what 80? We don't?

00:41:04 Yeah, right. At the top, it says, I have read and agree to the Terms of Service is the biggest lie on the web, we aim to fix that. That's so true.

00:41:12 Okay. So it has all kinds of services for a bunch of services. So GitHub and get lab on, some of them are not yet rated. But okay, for GitHub on global privacy. It's great. B, and C for Facebook.

00:41:28 Facebook's awesome. I mean, like the ones they're

00:41:31 really cool boosters your day, whether you have an account or not, your identity is using as a show and others service can read your private messages.

00:41:40 Wow. I like the last been deleted content is not really deleted.

00:41:45 That's funny. Wait, is there another one you guys can think of? I couldn't think of any more right? To check

00:41:50 out Dr. Go? Oh, that's one that should come out. Good. was great. A look at that. Yeah, that's pretty good. And I'm still doing my live with it. cagney.com, do kaegi K a GI t, if that's even shows up? knocks you out even the Duck Duck go came out? Well,

00:42:11 yeah, yeah. It's open source. So you can contribute to this. And on great existing ones, or on updates, ones that already on the circle on this website. So that's our critical of the power of open source, I think we could get a pretty good list of summaries for Terms of Service, which we know we, you really don't need most of the time, I'm surprised to see red, it's red, it is like you sign away more all rights.

00:42:47 So I actually think this is great. I wish that there my in open source like the open source world, we've sort of we could have, legitimately we could have like hundreds of different open source licenses. And maybe there are, but we kind of have a handful that most people use. So it as long as you sort of understand those view and what the differences are, you're pretty good. But commercial terms and service. They're just there's they're all unique. And I wish I really wish there was like just like three or four that were most software like you agree to this. And we're like, oh, it's a it's an MIT except for commercial use thing or whatever. Something like that. Which we're not going to get there. But it'd be cool.

00:43:34 Yeah, yeah. We totally be cool. All right. What's next? This is great. All right.

00:43:38 So then a couple of quick ones pi, Ohio, is, is coming up. So your lie. thirtieth's is pi, Ohio. The CFP is already close. But you can still register for it. And delta pi is a wandering lens. And it's a it's down in Columbus. The convention is pretty good. So yeah, if you check out that, and then also, um, my company Trimble is having their annual insights. So this is the conference for all the players in the transportation space. So this is where we're going to be talking about the cool thing that Trimble has been doing. So the cool thing, the people in transportation costs transportation sector is doing. We're inviting our competitors. We're inviting our customers. It's one big transportation events. If you guys if any of you out there are interested, we should come on your register.

00:44:36 Yeah. Nice. As an excuse to go to Florida. Yes.

00:44:40 An excuse to go to Florida. Um, then lastly, you guys should check out we should check out the StackOverflow developer survey.

00:44:48 So I noticed that do the survey or is that the results? The results? Oh, nice. Okay. Yeah, yeah. Fantastic. All right. Yeah, everyone should check that out. That's a good one. All right. Great. How about you? Got some extras?

00:45:00 I do not.

00:45:02 How about you? All right, well, then I just got I don't have much this time. So the price rise, just the catchy stuff. I'm totally loving it. I got a lot to tell people about it. But, you know, it's pretty good stuff these days. I'm loving. I'm loving it, but still loving DuckDuckGo as well. All right, but here's my one extra open S S. F. Honestly, that's the open source security foundation, which I got to learn more about where the money comes from, and whatnot. I don't know all the details, but shout out to them because they funded Python and Eclipse Foundation. So not really caring too much about Eclipse, but the Python one they funded. What's the short version of it. So they funded, committed $400,000 to the PSF in order to create a new role. So we've had the developer and residents with Luca Sri Lanka. And now we have a new role, which will provide security expertise for Python and the Python package index via pi pi and the rest of the Python ecosystem, as well as funding a security audit. That comes to us from the Python weekly newsletter. That's pretty amazing, right?

00:46:11 Yeah. That's pretty cool.

00:46:13 Yeah, that's a big deal. Anyway, that's my only only real extra is that one. But you know, when you go open SSF, that's great. All right, we ready for a joke? Yes. See, we've got two jokes, don't we? Yeah. All right. I'll go first is my screens up. So this one is all about. It's got a Scooby Doo theme here. So if you've never watched the Scooby Doo cartoons, and I guess maybe this won't really relate, but they always sort of unmask what's supposed to be like a ghost or a haunted thing. And it almost it never is. Right. So here's one of the characters. Brian, do you know the name or nickname? The name is Guy? Anyway, the whole club lawns won on Scooby Doo. I have no idea what that were? No, I don't know. Anyway, he says, there's a there's a captured ghost. Clearly not real. And it says serverless computing. Let's see who you really are. And they pull the mask off and it's just as servers. Let's see who you really are. Nope, you're not serverless. You're just a server. Great. All right. Anyway, that's the one I

00:47:15 lose from Virginia. No, we didn't kill us.

00:47:18 Yeah, exactly. You came out of AWS. East one, didn't you? Yeah. All right. Nick, how about yours? You got some ways to stay healthy here.

00:47:31 Yeah, way to stay healthy and away from COVID. So Michael, do you wanna do the dialogue with

00:47:38 me? Yeah, sure. I'll be the woman. All right. All right. All right. So

00:47:42 I did a survey to find out the rate of COVID-19 infections among DevOps specialists. Oh, yeah. Yeah. And I found that DevOps are three times less likely to catch it than the regular population. Weird, right?

00:47:55 That's not really. Wow,

00:47:58 why not?

00:47:59 Well, if everyone stayed home building K as stacks, Kubernetes stacks in their home lab, the numbers would drop pretty fast.

00:48:10 Like this all news article from The Daily code coder that says COVID-19 slash Omicron. Kubernetes is an open environment.

00:48:23 It's honestly probably true. There is some truth to that. Yeah. Yeah. I say, the basement in a whole month, how could I have kept going?

00:48:32 I know, I started learning about start fiddling around with Docker, like multistage Docker containers, or well, the oil on my apps. And I spent hours on that during leave my house, but I spent hours on that. So definitely.

00:48:46 Been there. Been there for sure. Yeah.

00:48:48 I mean, we could have like completely no COVID in the country. And there'd still be some software people that are like now I'd rather not go outside.

00:49:01 Exactly. I like this new life. Yeah. Good.

00:49:05 Yeah. No, I said that. I said that when they said like, no, the quarantine. I'm good.

00:49:13 Yeah. I got Gigabit internet. I were fine.

00:49:17 Exactly. I do actually have the internet. So I'm good.

00:49:21 Well, speaking of fine, it's been very fun to have you on the show. Nick. Thanks for coming back. Yeah, thanks.

00:49:27 Yeah, was fun. Yeah,

00:49:29 and YouTube as well. Brian, great to have you here and thanks. Thanks, everyone. Bye

00:49:33 bye.

