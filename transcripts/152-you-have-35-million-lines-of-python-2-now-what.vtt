
00:00:00.000 --> 00:00:04.700
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.700 --> 00:00:09.200
This is episode 152 recorded October 9th, 2019.


00:00:09.200 --> 00:00:10.000
I'm Michael Kennedy.


00:00:10.000 --> 00:00:10.900
And I'm Brian Okken.


00:00:10.900 --> 00:00:13.200
And this episode is brought to you by DigitalOcean.


00:00:13.200 --> 00:00:16.300
Check them out at pythonbytes.fm/digitalocean.


00:00:16.300 --> 00:00:18.300
Get $50 credit for new users.


00:00:18.300 --> 00:00:22.500
Now, we may have touched on this concept of legacy Python before, Brian.


00:00:22.500 --> 00:00:23.300
Have we covered it?


00:00:23.300 --> 00:00:24.400
Yeah, I think we have.


00:00:24.400 --> 00:00:25.000
We definitely have.


00:00:25.000 --> 00:00:31.040
So we know that there are companies out there that say it's really tricky for us to upgrade to Python 3


00:00:31.040 --> 00:00:36.660
Because and sometimes that's because I don't know just they don't put the resources into it, right?


00:00:36.660 --> 00:00:42.200
Like they would rather work on features rather than going back and rewriting old code to do the same thing


00:00:42.200 --> 00:00:44.620
But so it's not so old things like that


00:00:44.620 --> 00:00:51.380
other times it's because they have a ton of Python code and we're hearing more and more stories of these companies that have been like


00:00:51.920 --> 00:00:57.360
head in the sand waiting until the very very last minute to make those migrations and


00:00:57.360 --> 00:01:03.440
They're just like alright finally somebody is raised it to the level that like it has to be dealt with right?


00:01:03.440 --> 00:01:03.800
Yeah


00:01:03.800 --> 00:01:04.080
well


00:01:04.080 --> 00:01:10.040
it turns out that banks use a lot of Python code as we know and I've heard of Bank of America using a ton of


00:01:10.040 --> 00:01:14.600
Code and having a lot of people working on some Python projects, but JP Morgan


00:01:14.600 --> 00:01:19.780
JP Morgan chase they use maybe even more they use a ton of Python


00:01:19.780 --> 00:01:24.780
So there's an article that's based on this presentation by Misha Selman,


00:01:24.780 --> 00:01:27.780
who is the executive director at JPMorgan Chase, about this.


00:01:27.780 --> 00:01:29.780
It was given at PyData 2017.


00:01:29.780 --> 00:01:35.780
So they've been working on it, but the problem is they have 35 million lines of Python 2 code.


00:01:35.780 --> 00:01:36.780
Oh, that's a lot.


00:01:36.780 --> 00:01:39.780
In terms of Python code, that's kind of ridiculous, right?


00:01:39.780 --> 00:01:41.780
That's an insane amount.


00:01:41.780 --> 00:01:45.780
So they've got a lot of Python code that has to be converted to Python 3.


00:01:45.780 --> 00:01:48.380
And this is from their Athena trading platform,


00:01:48.380 --> 00:01:51.780
which is at the core of their business operations, right?


00:01:51.780 --> 00:01:54.620
So they got a late start to migrating Python 3


00:01:54.620 --> 00:01:55.900
and people were pointing out


00:01:55.900 --> 00:01:57.860
this could be a security risk for them, right?


00:01:57.860 --> 00:02:00.660
Like we saw what happened with Equifax


00:02:00.660 --> 00:02:02.900
and some outdated things there.


00:02:02.900 --> 00:02:05.060
Like who knows what the risks are?


00:02:05.060 --> 00:02:06.620
I think it's probably less than something


00:02:06.620 --> 00:02:09.300
like the web frameworks that were out of date


00:02:09.300 --> 00:02:10.700
at other places.


00:02:10.700 --> 00:02:13.300
But yeah, they have a lot of stuff that has to be migrated.


00:02:13.300 --> 00:02:15.300
And internally they use Python for pricing,


00:02:15.300 --> 00:02:17.260
trading, risk management, analytics,


00:02:17.260 --> 00:02:19.180
and even machine learning.


00:02:19.180 --> 00:02:22.440
So just to look at some stats from this project,


00:02:22.440 --> 00:02:27.440
the feature set utilizes 150,000 Python modules,


00:02:27.440 --> 00:02:30.620
over 500 open source packages,


00:02:30.620 --> 00:02:33.260
35 million lines of Python code


00:02:33.260 --> 00:02:36.220
contributed by 1,500 developers.


00:02:36.220 --> 00:02:37.540
- Okay, so they got a big team.


00:02:37.540 --> 00:02:39.100
- That's a huge scale, and by the way,


00:02:39.100 --> 00:02:42.260
I wonder how much JPMorgan Chase is contributing back


00:02:42.260 --> 00:02:44.820
to those 500 open source projects.


00:02:44.820 --> 00:02:45.740
- Hopefully some.


00:02:45.740 --> 00:02:48.780
All right, now, it says they're gonna miss the deadline.


00:02:48.780 --> 00:02:51.260
That most of the strategic elements


00:02:51.260 --> 00:02:54.620
are gonna be in place by Q1 2020,


00:02:54.620 --> 00:02:55.860
but they can't do it all.


00:02:55.860 --> 00:02:59.220
And I know, it's probably a good roadmap for folks.


00:02:59.220 --> 00:03:00.740
They don't have to upgrade it all


00:03:00.740 --> 00:03:02.240
and then release that new thing.


00:03:02.240 --> 00:03:04.300
They can upgrade elements at a time.


00:03:04.300 --> 00:03:05.980
And there's a lot of great stories


00:03:05.980 --> 00:03:07.020
on how folks have done that.


00:03:07.020 --> 00:03:09.880
I think probably the Instagram project


00:03:09.880 --> 00:03:11.500
was the most awesome one I've seen


00:03:11.500 --> 00:03:13.140
where they didn't even branch.


00:03:13.140 --> 00:03:17.420
They just found a way to seamlessly move from Python 2 to 3 while still running on 2 and


00:03:17.420 --> 00:03:19.260
then finally flipping the switch.


00:03:19.260 --> 00:03:21.300
Here's another one I thought you would find interesting though.


00:03:21.300 --> 00:03:24.140
They have some other stats.


00:03:24.140 --> 00:03:26.580
You know, on your projects, how often do you commit code?


00:03:26.580 --> 00:03:29.300
It's like once a week, once a day, once an hour.


00:03:29.300 --> 00:03:30.700
You get several times a day.


00:03:30.700 --> 00:03:31.700
I'm kind of the same.


00:03:31.700 --> 00:03:32.700
I do that.


00:03:32.700 --> 00:03:37.740
And you guys don't really release stuff, but like say the Python Bytes website or the Talk


00:03:37.740 --> 00:03:39.740
Python training site.


00:03:39.740 --> 00:03:46.460
Those probably do some form of website release every other day, some sort of deploy, restart,


00:03:46.460 --> 00:03:48.780
like run through the whole deployment process.


00:03:48.780 --> 00:03:56.340
So JP Morgan Chase uses continuous integration, continuous delivery with 10,000 to 15,000


00:03:56.340 --> 00:03:57.340
production changes a week.


00:03:57.340 --> 00:03:58.340
That's amazing.


00:03:58.340 --> 00:04:01.140
It's like mind blowing, isn't it?


00:04:01.140 --> 00:04:02.140
Yeah.


00:04:02.140 --> 00:04:03.140
Yeah.


00:04:03.140 --> 00:04:07.020
So they're on it, I guess, but it's just such a project of massive scale that it's hard


00:04:07.020 --> 00:04:10.380
to get your mind around and hard to find an analogy.


00:04:10.380 --> 00:04:12.420
So I'm sure there's a few other projects like this


00:04:12.420 --> 00:04:13.900
in the world, but it can't be many.


00:04:13.900 --> 00:04:17.620
- No, well, that's like one a second or faster.


00:04:17.620 --> 00:04:20.060
- It's constantly deployed.


00:04:20.060 --> 00:04:22.220
It's gotta be microservices and other stuff, right?


00:04:22.220 --> 00:04:24.060
Otherwise, just like how would you go to the website?


00:04:24.060 --> 00:04:25.900
How would you use the services?


00:04:25.900 --> 00:04:27.380
Anyway, quite incredible.


00:04:27.380 --> 00:04:28.480
All right, well, what you got for our next one?


00:04:28.480 --> 00:04:31.240
- This is just kind of a cool little tool called Organize,


00:04:31.240 --> 00:04:36.180
and it was suggested from Ariel Barkin on Twitter.


00:04:36.180 --> 00:04:40.180
And I took a look at this and I'm going to start using it right away.


00:04:40.180 --> 00:04:44.300
So it's a Python-based file management automation tool.


00:04:44.300 --> 00:04:50.140
And the idea is people are lazy with how they save files and download files and whatever.


00:04:50.140 --> 00:04:55.100
And on my Mac, for example, all the screenshots just show up on the desktop.


00:04:55.100 --> 00:05:00.620
And then, you know, occasionally I'll just take everything and lump them into a clutter folder or something.


00:05:00.620 --> 00:05:02.900
But this is a tool where you can give it rules.


00:05:02.900 --> 00:05:08.700
it's in a YAML file and say have it do things like move all your screenshots


00:05:08.700 --> 00:05:12.740
from the desktop into a screenshots folder or look through all your


00:05:12.740 --> 00:05:16.700
downloads to look at the incomplete downloads that you canceled or something


00:05:16.700 --> 00:05:20.100
they're still sitting there and just trash those if they're older than you


00:05:20.100 --> 00:05:23.980
know a few days old or something like doing things like removing empty files


00:05:23.980 --> 00:05:29.340
from certain folders like your download or desktop or other places. One of the


00:05:29.340 --> 00:05:32.940
examples is to organize your receipts and invoices into date-based folders,


00:05:32.940 --> 00:05:37.140
which is pretty cool because there's macros involved that you can look at the


00:05:37.140 --> 00:05:42.100
file touch time and and figure out what date and extrapolate the dates and stuff.


00:05:42.100 --> 00:05:47.060
And yeah, I always when I'm paying bills or something I save the receipt to just


00:05:47.060 --> 00:05:52.300
wherever in the downloads folder or something. And having this just running


00:05:52.300 --> 00:05:55.940
this every once in a while could clean it up and put everything in its place.


00:05:55.940 --> 00:05:58.780
It's pretty cool. -It's super cool. You could just put it on like a cron job


00:05:58.780 --> 00:06:01.480
that runs every five minutes or every minute or something,


00:06:01.480 --> 00:06:04.440
right, it just goes boop, it's gotta be super quick.


00:06:04.440 --> 00:06:06.260
Just looks at the files, a few folders,


00:06:06.260 --> 00:06:08.420
and then does some text matching.


00:06:08.420 --> 00:06:09.480
- It's one of those like, you know,


00:06:09.480 --> 00:06:11.120
automate the boring stuff sort of things


00:06:11.120 --> 00:06:12.360
that somebody thought, you know,


00:06:12.360 --> 00:06:14.720
everybody has this problem, so it's nice.


00:06:14.720 --> 00:06:16.280
- Yeah, I like it, I have the same problem


00:06:16.280 --> 00:06:18.720
with receipts and stuff, I'll get them an email


00:06:18.720 --> 00:06:22.920
or as a PDF attachment or actually it's just an email


00:06:22.920 --> 00:06:25.880
that I'll print it to PDF so that I can save it for taxes


00:06:25.880 --> 00:06:28.120
and they just like clutter up, yeah,


00:06:28.120 --> 00:06:30.200
I could totally see just using that.


00:06:30.200 --> 00:06:32.060
The rules seem like they're rich enough to do that.


00:06:32.060 --> 00:06:33.080
So yeah, it looks really good.


00:06:33.080 --> 00:06:33.320
Yeah.


00:06:33.320 --> 00:06:33.880
Super cool.


00:06:33.880 --> 00:06:34.480
All right.


00:06:34.480 --> 00:06:36.960
Speaking of cool, let me just tell you about digital ocean.


00:06:36.960 --> 00:06:41.160
So all of our services run on digital ocean audio or listen to now somehow


00:06:41.160 --> 00:06:45.960
flowed through the digital ocean servers to get to you and they've got all


00:06:45.960 --> 00:06:48.000
sorts of great options out there.


00:06:48.000 --> 00:06:50.080
They're simple, but powerful.


00:06:50.080 --> 00:06:51.720
There's not knobs to run.


00:06:51.720 --> 00:06:52.760
Absolutely.


00:06:52.760 --> 00:06:54.480
Every little edge case, right?


00:06:54.480 --> 00:06:55.480
You set up the main.


00:06:55.920 --> 00:06:59.720
servers that you want to work with, you have spaces, you have hosted databases,


00:06:59.720 --> 00:07:05.040
and MySQL and Postgres, and you even have caching like Redis and things like that.


00:07:05.040 --> 00:07:06.280
So super nice.


00:07:06.280 --> 00:07:12.700
Check them out at Python bytes.fm/digitalocean and get $50 credit for new users.


00:07:12.700 --> 00:07:13.640
Highly recommended.


00:07:13.640 --> 00:07:18.720
Now, this next one is a fun one, and it took me a minute to realize


00:07:18.720 --> 00:07:19.800
what this was about, Brian.


00:07:19.800 --> 00:07:24.800
So I realized there's this new PEP, PEP 589,


00:07:24.800 --> 00:07:28.400
and it allows you to define typed dictionaries.


00:07:28.400 --> 00:07:31.080
Like define a type that represents a dictionary.


00:07:31.080 --> 00:07:34.240
Well, it turns out there was already a way to do that,


00:07:34.240 --> 00:07:35.240
which is why I was confused,


00:07:35.240 --> 00:07:37.840
'cause there's PEP 484, which has been around for a while,


00:07:37.840 --> 00:07:41.560
which lets you create a dict of K comma V,


00:07:41.560 --> 00:07:44.420
which is like, here's a dictionary of arbitrary keys,


00:07:44.420 --> 00:07:46.480
and it has maybe integers,


00:07:46.480 --> 00:07:48.720
or it has user objects, or whatever, right?


00:07:48.720 --> 00:07:54.520
So you can define these uniform dictionaries, which is kind of interesting.


00:07:54.520 --> 00:07:59.680
But this new PEP, it lets you go much farther.


00:07:59.680 --> 00:08:06.360
It's proposed by Jukka Letosalo, and it's actually sponsored by Guido van Rossum.


00:08:06.360 --> 00:08:11.360
So remember recently we spoke about Guido and we had this philosophical debate of like,


00:08:11.360 --> 00:08:15.960
well, he's all about typing these days, but originally typing was like explicitly left


00:08:15.960 --> 00:08:16.960
out of the language.


00:08:16.960 --> 00:08:18.320
What's the story?


00:08:18.320 --> 00:08:21.640
So here's another typing thing that he's participating in, which I think is interesting.


00:08:21.640 --> 00:08:23.200
So this is accepted.


00:08:23.200 --> 00:08:25.360
It's scheduled for 3/8.


00:08:25.360 --> 00:08:26.960
So all sorts of interesting stuff.


00:08:26.960 --> 00:08:29.120
And it's, you know, it's coming down the line, right?


00:08:29.120 --> 00:08:30.120
Soon, actually.


00:08:30.120 --> 00:08:34.320
So what it lets you do is imagine you have an arbitrary JSON document or an arbitrary


00:08:34.320 --> 00:08:38.120
Python dictionary, really, but right, like, it's super easy to think of, like, well, somebody


00:08:38.120 --> 00:08:43.320
sends me a JSON request, and I want to treat it as if I know what's happening here.


00:08:43.320 --> 00:08:50.500
It lets you actually specify the shape of those things, both the keys as well as the


00:08:50.500 --> 00:08:53.540
values and potentially nested documents, right?


00:08:53.540 --> 00:08:57.120
So you might have a JSON object that's got like some values, one of those values might


00:08:57.120 --> 00:09:02.180
be a list of other JSON documents, you can describe that with this type dict thing.


00:09:02.180 --> 00:09:05.920
So the way it works, kind of caught me off guard at first, but I think I like it.


00:09:05.920 --> 00:09:11.260
So what you do is, instead of just saying, you know, there's a dictionary of like string,


00:09:11.260 --> 00:09:16.220
user, you actually create a class which derives from typed dict, okay?


00:09:16.220 --> 00:09:17.540
>> Okay. >> And then it has fields.


00:09:17.540 --> 00:09:19.420
It looks a lot like data classes a little bit.


00:09:19.420 --> 00:09:24.300
So you might have like a name colon str and a year colon int.


00:09:24.300 --> 00:09:26.860
In this thing, it is not actually the dictionary, but


00:09:26.860 --> 00:09:31.100
it is the type that validates the dictionary, all right?


00:09:31.100 --> 00:09:32.620
>> Okay. >> And then you can say it is one of


00:09:32.620 --> 00:09:33.300
those, right?


00:09:33.300 --> 00:09:35.340
So I say, the example they gave is there's a movie.


00:09:35.340 --> 00:09:38.420
So you say movie colon capital M movie is the name of the class, and


00:09:38.420 --> 00:09:39.740
then it's just a dictionary.


00:09:39.740 --> 00:09:43.220
But the dictionary has the name, which is a string value,


00:09:43.220 --> 00:09:45.860
and a year, which is an integer value, and so on.


00:09:45.860 --> 00:09:47.820
And then you can actually validate it.


00:09:47.820 --> 00:09:51.380
And the static type checker, like mypy and so on,


00:09:51.380 --> 00:09:55.780
will, if you say movie of director, it'll say, no, no, no.


00:09:55.780 --> 00:09:58.660
You can't set this value into this dictionary


00:09:58.660 --> 00:10:00.940
because it doesn't have a key called director.


00:10:00.940 --> 00:10:04.500
Or if you try to set the year to the string 1982,


00:10:04.500 --> 00:10:07.100
in quotes, it'll say, no, no, this is a string.


00:10:07.100 --> 00:10:08.300
It expected an integer.


00:10:08.300 --> 00:10:11.020
>> But the errors come at the type checking time, right?


00:10:11.020 --> 00:10:12.380
>> This is a type checking time.


00:10:12.380 --> 00:10:16.020
Although, it's totally reasonable that things like PyCharm and


00:10:16.020 --> 00:10:19.140
VS Code would add edit time checking for this as well.


00:10:19.140 --> 00:10:20.740
Cuz they do for all the other type stuff.


00:10:20.740 --> 00:10:21.860
>> Yeah, but it's not a run time.


00:10:21.860 --> 00:10:23.180
>> It's not a run time thing.


00:10:23.180 --> 00:10:24.540
Yeah, all the typing stuff.


00:10:24.540 --> 00:10:26.780
>> Okay. >> And this is definitely that way.


00:10:26.780 --> 00:10:28.740
So you're not re-implementing the dictionary.


00:10:28.740 --> 00:10:32.860
You're not creating a dictionary type that is different.


00:10:32.860 --> 00:10:38.480
you create a type which then talks about just a plain dictionary.


00:10:38.480 --> 00:10:39.920
So quite interesting, actually.


00:10:39.920 --> 00:10:42.920
>> Yeah, it does take a little while to look at it and go, does this make sense?


00:10:42.920 --> 00:10:43.720
But yeah, it does.


00:10:43.720 --> 00:10:46.360
>> Right, imagine you're running an API and


00:10:46.360 --> 00:10:51.320
somebody's submitting a JSON post to you, and you want to know is it valid, right?


00:10:51.320 --> 00:10:53.760
You could use this basically to validate your schema, or


00:10:53.760 --> 00:10:55.480
at least describe the schema you expect.


00:10:55.480 --> 00:10:56.120
>> Yeah, neat.


00:10:56.120 --> 00:10:56.920
>> It is neat.


00:10:56.920 --> 00:11:01.800
Speaking of APIs and new web things, your next one is one of those, right?


00:11:01.800 --> 00:11:03.800
I got carried down that rabbit hole.


00:11:03.800 --> 00:11:04.640
No, it's cool.


00:11:04.640 --> 00:11:07.520
The next one, I was just enticed by the name.


00:11:07.520 --> 00:11:10.280
So there's a package called Gospacho.


00:11:10.280 --> 00:11:11.280
It's just great.


00:11:11.280 --> 00:11:13.400
It's fun to say, it's fun to eat.


00:11:13.400 --> 00:11:18.000
But anyway, Gospacho is a web scraping library.


00:11:18.000 --> 00:11:21.420
And the goal of it is to replace requests


00:11:21.420 --> 00:11:25.280
and beautiful soup for most web scraping projects.


00:11:25.280 --> 00:11:27.200
And I gotta tell you, I was gonna do,


00:11:27.200 --> 00:11:30.040
I have some web scraping projects that I wanted to do.


00:11:30.040 --> 00:11:32.600
And I know that requests in BeautifulSoup are easy to use


00:11:32.600 --> 00:11:33.960
and are super powerful,


00:11:33.960 --> 00:11:38.960
but that one use case where you're just grabbing,


00:11:38.960 --> 00:11:41.720
like you're just doing a get, then you parse it,


00:11:41.720 --> 00:11:44.520
and then you find some stuff in it and separate it out,


00:11:44.520 --> 00:11:46.820
that's so common that this is,


00:11:46.820 --> 00:11:49.120
basically it's optimizing for that.


00:11:49.120 --> 00:11:52.040
There's an example article that I'll link to also


00:11:52.040 --> 00:11:54.920
that uses Gazpacho to scrape hockey data


00:11:54.920 --> 00:11:58.000
for the use of fantasy sport use.


00:11:58.000 --> 00:11:59.700
But it's just a really simple interface.


00:11:59.700 --> 00:12:04.300
you import from Gospacho, you import get and soup as a class,


00:12:04.300 --> 00:12:09.420
and you can use those to grab some HTML and parse it,


00:12:09.420 --> 00:12:10.820
find some stuff in there.


00:12:10.820 --> 00:12:13.100
It's just a handful of lines of code and


00:12:13.100 --> 00:12:15.580
you've got a web scraper on your hands.


00:12:15.580 --> 00:12:16.940
So I like it.


00:12:16.940 --> 00:12:18.220
I think I'll give it a shot.


00:12:18.220 --> 00:12:22.420
But I tried it out and I wanted to bring this up because I tried it out and I ran


00:12:22.420 --> 00:12:26.280
into a problem that I was getting these certificate errors.


00:12:26.280 --> 00:12:28.140
Have you ever gotten certificate errors when you're


00:12:28.140 --> 00:12:30.220
trying to parse things for pull things down?


00:12:30.220 --> 00:12:31.740
- Yeah, just once or twice.


00:12:31.740 --> 00:12:35.260
And it's the kind of thing where you bounce off the walls


00:12:35.260 --> 00:12:36.900
of Stack Overflow until you get it fixed


00:12:36.900 --> 00:12:38.620
and then you forget how to fix them.


00:12:38.620 --> 00:12:40.300
But yeah, so what did you do?


00:12:40.300 --> 00:12:42.900
- I did the same thing, went to Stack Overflow.


00:12:42.900 --> 00:12:45.620
And apparently in within the,


00:12:45.620 --> 00:12:48.100
I don't know if this is just a Mac thing or not,


00:12:48.100 --> 00:12:51.180
but on Macs at least, when you install Python,


00:12:51.180 --> 00:12:52.820
you also in the install directory


00:12:52.820 --> 00:12:55.600
in applications, Python three, whatever,


00:12:55.600 --> 00:12:59.300
there's a file called install certificates.command


00:12:59.300 --> 00:13:01.420
and you just have to run that


00:13:01.420 --> 00:13:04.980
and then it has the list of certificates or something.


00:13:04.980 --> 00:13:06.620
I don't know how certificates work,


00:13:06.620 --> 00:13:10.260
but it makes it so that you can access SSL stuff


00:13:10.260 --> 00:13:11.180
from Python.


00:13:11.180 --> 00:13:13.100
So ran into that today.


00:13:13.100 --> 00:13:13.940
- That's right.


00:13:13.940 --> 00:13:14.900
I'm glad you're linking to it


00:13:14.900 --> 00:13:17.300
so now we'll have it for forever.


00:13:17.300 --> 00:13:18.140
- Yeah.


00:13:18.140 --> 00:13:18.960
- Yeah, that's cool.


00:13:18.960 --> 00:13:21.940
It's nice, Gazpacho is like two to three times faster


00:13:21.940 --> 00:13:25.340
than Beautiful Soup, which is pretty sweet.


00:13:25.340 --> 00:13:25.840
I like that.


00:13:25.840 --> 00:13:28.100
It also does a lot less, so that makes sense.


00:13:28.100 --> 00:13:28.700
Yeah, for sure.


00:13:28.700 --> 00:13:29.900
It's a more focused thing.


00:13:29.900 --> 00:13:31.700
And that's like the 80% case, though, right?


00:13:31.700 --> 00:13:33.180
You just need to go do simple things.


00:13:33.180 --> 00:13:34.680
That's what I'm going to use it for.


00:13:34.680 --> 00:13:38.460
So the last thing I want to cover for our main items is PIP.


00:13:38.460 --> 00:13:42.220
So remember, actually, we spoke about PyDist, P-Y-D-I-S-T?


00:13:42.220 --> 00:13:42.720
Yeah.


00:13:42.720 --> 00:13:46.660
Yeah, this is like a private PyPI as a service, I guess,


00:13:46.660 --> 00:13:49.180
is kind of the way I would describe it.


00:13:49.180 --> 00:13:53.520
So right now, I think they-- before we had talked about this


00:13:53.520 --> 00:13:56.840
and I'm like, well, it just in beta,


00:13:56.840 --> 00:13:59.800
it doesn't seem to have any pricing or anything like that.


00:13:59.800 --> 00:14:02.360
So they have pricing and a little bit more details.


00:14:02.360 --> 00:14:04.200
They've more or less launched at this point.


00:14:04.200 --> 00:14:06.400
And so this article is not about this,


00:14:06.400 --> 00:14:09.400
but it was written by the folks who run that.


00:14:09.400 --> 00:14:12.180
Just that's the connection back to the previous thing.


00:14:12.180 --> 00:14:15.560
And it talks about how pip install works.


00:14:15.560 --> 00:14:18.480
So for this section, I just wanna talk to you real quick


00:14:18.480 --> 00:14:22.240
about when you say pip install certify,


00:14:22.240 --> 00:14:25.840
like it did in that previous article you just mentioned to fix your certificates.


00:14:25.840 --> 00:14:26.840
What do you do?


00:14:26.840 --> 00:14:27.840
How does it work?


00:14:27.840 --> 00:14:28.840
All right.


00:14:28.840 --> 00:14:32.380
So it walks you through all the steps and all the decisions and whatnot that pip has


00:14:32.380 --> 00:14:35.040
to make when you say pip install some package.


00:14:35.040 --> 00:14:39.520
So the first thing it has to decide, well, first, I guess it does the package exist,


00:14:39.520 --> 00:14:40.520
right?


00:14:40.520 --> 00:14:45.000
And then it needs to figure out which distribution of the package to install.


00:14:45.000 --> 00:14:51.420
Because we have eggs, we have wheels, we have source, we have all these different types


00:14:51.420 --> 00:14:57.420
of distributions. There are seven different kinds of distributions, but the most commons


00:14:57.420 --> 00:15:03.220
are either source distributions or binary wheels. So focus on those, right? So source


00:15:03.220 --> 00:15:07.860
distribution is just, here's your Python code and maybe the C code that comes with it. And


00:15:07.860 --> 00:15:11.340
as part of the setup, we're going to like run a compiler against the C code to make


00:15:11.340 --> 00:15:16.020
sure that that's compiled in your machine, right? Super easy to write, not so easy to


00:15:16.020 --> 00:15:20.100
make sure it works on, you know, everywhere, not just works on my machine, right? Because


00:15:20.100 --> 00:15:22.440
You gotta have compilers on all the platforms.


00:15:22.440 --> 00:15:24.680
And oh yeah, what about that old version of Windows


00:15:24.680 --> 00:15:28.000
that was a minimal install and doesn't have GCC


00:15:28.000 --> 00:15:29.600
or Visual Studio or whatever.


00:15:29.600 --> 00:15:33.720
So, wheels are a little bit more safe and also faster,


00:15:33.720 --> 00:15:36.880
but that means they have compiled C code,


00:15:36.880 --> 00:15:39.120
which has to be, you have to have multiple ones


00:15:39.120 --> 00:15:40.320
for different platforms, right?


00:15:40.320 --> 00:15:43.640
So, Windows versus macOS or something.


00:15:43.640 --> 00:15:46.020
The benefit is, stuff installs fast, right?


00:15:46.020 --> 00:15:49.360
So, like NumPy takes about four minutes


00:15:49.360 --> 00:15:50.700
to compile from source.


00:15:50.700 --> 00:15:53.280
So if you did a source dist of NumPy,


00:15:53.280 --> 00:15:56.500
pip install might be slower than you would otherwise expect.


00:15:56.500 --> 00:15:58.120
All right, so anyway.


00:15:58.120 --> 00:16:00.960
- Yeah, the four minute pip install, yes,


00:16:00.960 --> 00:16:01.800
that's slower than I expected.


00:16:01.800 --> 00:16:03.740
- Yeah, that's before you even hit the dependencies, right?


00:16:03.740 --> 00:16:05.480
That's just the primary thing.


00:16:05.480 --> 00:16:07.540
Yeah, okay, so it has to figure out which one of those are,


00:16:07.540 --> 00:16:10.360
and there's actually a known URL.


00:16:10.360 --> 00:16:15.360
So like pypi.org/simple/packagename is where you would go.


00:16:16.760 --> 00:16:20.360
So you can go to that slash request, for example.


00:16:20.360 --> 00:16:24.240
And there's a huge, just flat, it's a weird API.


00:16:24.240 --> 00:16:28.640
It's a HTML list of a bunch of wheels


00:16:28.640 --> 00:16:31.520
with platform names and tarballs and all sorts of stuff.


00:16:31.520 --> 00:16:35.680
So it starts out by going there to figure out what is here.


00:16:35.680 --> 00:16:36.720
What can I find?


00:16:36.720 --> 00:16:39.840
So first it determines what system you're on


00:16:39.840 --> 00:16:43.240
and what's compatible with the thing.


00:16:43.240 --> 00:16:46.120
So if you have a binary wheel,


00:16:46.120 --> 00:16:48.960
There's actually a path that talks about how you figure out which one that is.


00:16:48.960 --> 00:16:53.320
And then if it's a source gist, like, well, you just assume it works.


00:16:53.320 --> 00:16:57.320
So once it has that, then it'll try to get the best and it prefers wheels.


00:16:57.320 --> 00:16:59.240
And then it has to figure out the dependencies.


00:16:59.240 --> 00:17:02.720
So for binary wheels, there's a file called metadata that has a list of those.


00:17:02.720 --> 00:17:03.720
So that's cool.


00:17:03.720 --> 00:17:04.720
You can just look at that.


00:17:04.720 --> 00:17:09.560
If it's a source distribution, it figures it out by running the setup.py.


00:17:09.560 --> 00:17:11.240
So that's interesting.


00:17:11.240 --> 00:17:15.320
So to run setup.py to actually figure out what dependencies it has to install, you know,


00:17:15.320 --> 00:17:20.380
go do that. And then you might have two dependencies, you might have a thing and you might depend


00:17:20.380 --> 00:17:24.620
on, let's say, beautiful soup, but you also have some other library that also depends


00:17:24.620 --> 00:17:29.700
on beautiful soup. If you follow the dependency tree, and they might even specify versions.


00:17:29.700 --> 00:17:33.800
So you might wonder, well, what happens if one depends on one version, the other depends


00:17:33.800 --> 00:17:38.100
on the other. Turns out it just installs it anyway. Let's take the latest, that's going


00:17:38.100 --> 00:17:42.360
to be fine, right? That's different than like a requirements file that has like different


00:17:42.360 --> 00:17:45.520
dependency like pin versions like there's a slight difference there.


00:17:45.520 --> 00:17:51.520
So finally gets it builds it installs it and then it has to figure out where's the path.


00:17:51.520 --> 00:17:53.640
Is that I'm going to install it to a virtual environment?


00:17:53.640 --> 00:17:58.320
Am I going to install it into the system or the user path, things like that.


00:17:58.320 --> 00:18:02.520
So you can look at sys.prefix to figure out which one those are and


00:18:02.520 --> 00:18:03.680
there's some environment variables.


00:18:03.680 --> 00:18:04.640
Ooh.


00:18:04.640 --> 00:18:08.080
And finally it copies it over in the right place and your package installed.


00:18:08.080 --> 00:18:11.240
Oh, before it considers your package installed also converts the source


00:18:11.240 --> 00:18:15.840
files into PYC bytecode files so they don't have to get parsed again.


00:18:15.840 --> 00:18:16.840
Then your package is installed.


00:18:16.840 --> 00:18:17.840
- Okay.


00:18:17.840 --> 00:18:18.840
- Yeah, so anyway.


00:18:18.840 --> 00:18:19.840
- Simple.


00:18:19.840 --> 00:18:22.560
- Yeah, so if you're wondering what happens as part of the pip install stuff, there's


00:18:22.560 --> 00:18:27.080
a lot of details, and I didn't cover all of it, but as much as I thought made sense.


00:18:27.080 --> 00:18:28.080
- I was just curious.


00:18:28.080 --> 00:18:34.680
I was going to try to find one of those complicated packages that I knew had to be compiled because


00:18:34.680 --> 00:18:40.600
I went to a couple of mine and they're just Python code, so there's just one per version,


00:18:40.600 --> 00:18:47.000
wheel. But like NumPy, for instance, I know it's got some compiled code in it. It's got like,


00:18:47.000 --> 00:18:51.240
I lost count. It's like 15, 16, 17 different wheels for each version.


00:18:51.240 --> 00:18:54.680
Yeah, request has got a ton as well. Yeah, it's interesting.


00:18:54.680 --> 00:18:58.120
It is interesting how that works. I'm glad it all works. I don't have to think about it too much.


00:18:58.120 --> 00:19:01.720
I'm glad I don't have to think about it either. But it turns out there's like a lot of conversation


00:19:01.720 --> 00:19:07.560
in there about some stuff that is not totally solved even today, right? About trying to resolve


00:19:07.560 --> 00:19:10.520
all of the dependencies in a totally predictable way


00:19:10.520 --> 00:19:13.600
before you start installing anything and stuff like that.


00:19:13.600 --> 00:19:14.680
So it's worth checking out.


00:19:14.680 --> 00:19:15.520
- It's a hard problem.


00:19:15.520 --> 00:19:16.360
- Yep, for sure.


00:19:16.360 --> 00:19:18.120
But wanna finish up with a cool trick,


00:19:18.120 --> 00:19:19.880
like a zoo trick, a zoo animal trick?


00:19:19.880 --> 00:19:22.600
- Oh yeah, I'm just zoning today.


00:19:22.600 --> 00:19:26.320
So Kevin Markham, he runs, what's the thing he runs?


00:19:26.320 --> 00:19:27.880
- Data School, data school.io.


00:19:27.880 --> 00:19:30.000
- Data School, plus he's a super nice guy.


00:19:30.000 --> 00:19:32.080
Well, he's doing something neat that's,


00:19:32.080 --> 00:19:34.360
it's called Daily Pandas Tricks,


00:19:34.360 --> 00:19:36.920
or Tricks and Tips, or something like that.


00:19:36.920 --> 00:19:38.640
But anyway, we got a link to it.


00:19:38.640 --> 00:19:42.640
He's sending out a little tip or trick about pandas


00:19:42.640 --> 00:19:44.640
every day on Twitter.


00:19:44.640 --> 00:19:47.480
And the page we're linking to has a whole bunch of them


00:19:47.480 --> 00:19:48.720
already built in.


00:19:48.720 --> 00:19:52.500
And I like the notion of just trying to fit something.


00:19:52.500 --> 00:19:53.840
Often they're little screenshots,


00:19:53.840 --> 00:19:55.820
but they're still pretty small.


00:19:55.820 --> 00:19:58.500
A little lesson of how to do something cool.


00:19:58.500 --> 00:20:00.960
I just picked out one, which is like,


00:20:00.960 --> 00:20:04.160
let's say you wanted to rename all of the columns


00:20:04.160 --> 00:20:06.120
in a data frame the same way,


00:20:06.120 --> 00:20:09.460
like to replace all the spaces with underscores or something.


00:20:09.460 --> 00:20:11.800
And he just shows you how to do that in a little thing.


00:20:11.800 --> 00:20:14.120
I think that's neat, especially for something--


00:20:14.120 --> 00:20:15.920
for a package like pandas, there's


00:20:15.920 --> 00:20:17.960
a whole bunch of stuff you can do with it


00:20:17.960 --> 00:20:22.760
to have a way to just see a little extra new thing every day


00:20:22.760 --> 00:20:24.600
to say, that's something I might use.


00:20:24.600 --> 00:20:26.680
I'll keep looking at that later or something.


00:20:26.680 --> 00:20:28.960
So I don't think we've talked about it before.


00:20:28.960 --> 00:20:30.640
And I think it's a cool thing he's doing.


00:20:30.640 --> 00:20:31.760
So I wanted to highlight it.


00:20:31.760 --> 00:20:33.720
Yeah, it's definitely a cool thing he's doing.


00:20:33.720 --> 00:20:37.960
Pandas is one of those things where it's not always obvious,


00:20:37.960 --> 00:20:39.600
all the little magic that you can do, right?


00:20:39.600 --> 00:20:41.960
Like if you want to go to the columns


00:20:41.960 --> 00:20:46.760
and do string operations, just dataframe.columns.str.


00:20:46.760 --> 00:20:48.040
Apply your operation, right?


00:20:48.040 --> 00:20:50.960
Like that's, after you use it for a while, it's obvious,


00:20:50.960 --> 00:20:52.400
but maybe not right away.


00:20:52.400 --> 00:20:53.760
It definitely isn't to me.


00:20:53.760 --> 00:20:55.360
Pandas feels a little like magic to me.


00:20:55.360 --> 00:20:57.560
- I'm looking at this going, I would not have guessed that.


00:20:57.560 --> 00:20:58.400
- Exactly.


00:20:58.400 --> 00:21:00.200
It's not obvious, but once you know it,


00:21:00.200 --> 00:21:01.960
it's like, well, of course that's better than,


00:21:01.960 --> 00:21:06.760
Like, there's this saying that if you find yourself looping over things in like NumPy


00:21:06.760 --> 00:21:09.040
or Pandas, you're probably doing it wrong.


00:21:09.040 --> 00:21:14.120
- One of the nice fun things I think is if you get really good at something, you'll start


00:21:14.120 --> 00:21:17.640
learning the things that you shouldn't do, but that are fun.


00:21:17.640 --> 00:21:24.800
And some of Kevin's tips are, you can do this, it's sort of fun, but don't because it's confusing


00:21:24.800 --> 00:21:25.800
to other people.


00:21:25.800 --> 00:21:27.200
But anyway, here's the trick.


00:21:27.200 --> 00:21:28.200
- Nice.


00:21:28.200 --> 00:21:29.720
- It's neat that he's including those.


00:21:29.720 --> 00:21:31.200
- It's clever, but too clever sometimes.


00:21:31.200 --> 00:21:33.760
All right, so do you have any extras to share?


00:21:33.760 --> 00:21:36.200
- Oh, not only that we just got finished


00:21:36.200 --> 00:21:39.880
with our first Python West meetup last night,


00:21:39.880 --> 00:21:42.600
and it was both exhausting and really fun,


00:21:42.600 --> 00:21:44.760
so thanks for helping out with that.


00:21:44.760 --> 00:21:45.680
- Yeah, you bet.


00:21:45.680 --> 00:21:46.760
Good job putting it together.


00:21:46.760 --> 00:21:48.040
It came out really well.


00:21:48.040 --> 00:21:49.540
Everyone seemed to have a great time.


00:21:49.540 --> 00:21:51.240
There was a totally good turnout.


00:21:51.240 --> 00:21:53.440
I was blown away that it was actually,


00:21:53.440 --> 00:21:55.160
you know, basically sold out, not sold out,


00:21:55.160 --> 00:21:58.600
but booked out on its very first run, which is crazy.


00:21:58.600 --> 00:22:00.280
And people out there listening,


00:22:00.280 --> 00:22:04.280
If you want to come and give a talk at the meetup


00:22:04.280 --> 00:22:06.520
and you're willing to find your way to Portland,


00:22:06.520 --> 00:22:09.240
shoot a message to Brian or me and let us know.


00:22:09.240 --> 00:22:10.080
That'd be cool.


00:22:10.080 --> 00:22:10.900
- Yeah, would be cool.


00:22:10.900 --> 00:22:12.920
And then before anybody asks, it was not recorded.


00:22:12.920 --> 00:22:15.600
So you have to be here.


00:22:15.600 --> 00:22:16.440
How about you?


00:22:16.440 --> 00:22:17.560
You got some news to share.


00:22:17.560 --> 00:22:18.640
- I got all sorts of stuff.


00:22:18.640 --> 00:22:20.080
A few really quick things.


00:22:20.080 --> 00:22:23.680
One, I upgraded to macOS Catalina yesterday


00:22:23.680 --> 00:22:25.600
and so far so good.


00:22:25.600 --> 00:22:26.440
No major problems.


00:22:26.440 --> 00:22:27.960
All the Python things seem to be working.


00:22:27.960 --> 00:22:29.360
So if you're wondering,


00:22:29.360 --> 00:22:33.000
I did hear that someone out there was having trouble with mini conda.


00:22:33.000 --> 00:22:35.480
I don't use mini conda, so I have no idea about that.


00:22:35.480 --> 00:22:37.520
Maybe do a Google search if that matters to you.


00:22:37.520 --> 00:22:40.900
Also, Brian, I switched to working with Adobe audition.


00:22:40.900 --> 00:22:47.320
I've been using audacity and garage band finally broke down and pay the $30 a


00:22:47.320 --> 00:22:49.480
month for Adobe audition and wow.


00:22:49.480 --> 00:22:50.080
Is it worth it?


00:22:50.080 --> 00:22:51.920
It is so good.


00:22:51.920 --> 00:22:53.560
What has been wrong with me to not do that?


00:22:53.560 --> 00:22:54.960
I just didn't want to learn new software.


00:22:54.960 --> 00:22:55.960
It's not so much about the money.


00:22:55.960 --> 00:22:57.600
It's just like, I don't want to learn new hotkeys.


00:22:57.600 --> 00:22:58.640
I already know the hotkeys.


00:22:59.180 --> 00:23:00.300
But it's so super good.


00:23:00.300 --> 00:23:02.520
The reason I bring it up on the show instead of after


00:23:02.520 --> 00:23:05.660
is if you hear like weird artifacts or something odd


00:23:05.660 --> 00:23:08.180
in the audio, call our attention to it.


00:23:08.180 --> 00:23:09.500
'Cause there's all these dials and knobs


00:23:09.500 --> 00:23:12.120
that can like do things like chop off the S's


00:23:12.120 --> 00:23:13.900
at the end of words if you turn them too far


00:23:13.900 --> 00:23:15.420
and stuff like that.


00:23:15.420 --> 00:23:18.780
So hopefully things sound better if they don't, let us know.


00:23:18.780 --> 00:23:21.960
And then the two Python related things, really quick.


00:23:21.960 --> 00:23:25.480
Azure Databricks also is dropping support for Python 2.


00:23:25.480 --> 00:23:28.680
So just one more brick to fall for a legacy Python.


00:23:28.680 --> 00:23:34.360
The Python death clock continues to toll for those who hang on to their Python too.


00:23:34.360 --> 00:23:42.480
And, the folks over on the VS code team, wrong Lou in particular, just


00:23:42.480 --> 00:23:48.520
announced that at PyCon China, they just revealed a cool new Jupyter UI variable


00:23:48.520 --> 00:23:54.160
Explorer and Telesense stuff for basically running Jupyters inside of VS code.


00:23:54.160 --> 00:23:57.080
So if you're a VS Code user and you care about Jupyter, check that out.


00:23:57.080 --> 00:23:57.660
Very cool.


00:23:57.660 --> 00:23:58.460
Yeah, absolutely.


00:23:58.460 --> 00:23:58.960
Absolutely.


00:23:58.960 --> 00:24:00.500
Well, that's it for the stuff.


00:24:00.500 --> 00:24:02.360
I got a story for you, a joke maybe.


00:24:02.360 --> 00:24:03.320
Yes, please.


00:24:03.320 --> 00:24:06.500
This one comes to us from maybe an unexpected space.


00:24:06.500 --> 00:24:10.600
Comes to a person on Twitter, goes by the sarcastic pharmacist, sent us this


00:24:10.600 --> 00:24:14.780
actually really good joke and a nice comment, and the theme is that it's hard


00:24:14.780 --> 00:24:20.660
to distinguish between what is like super easy in programming and what is like


00:24:20.660 --> 00:24:25.620
nearly impossible for people who are not doing the programming themselves.


00:24:25.620 --> 00:24:28.900
So this is actually an XKCD article 145.


00:24:28.900 --> 00:24:33.460
It's got a programmer, a woman sitting there working at her desk.


00:24:33.460 --> 00:24:37.580
And there's like a manager type who comes up and is issuing feature requests.


00:24:37.580 --> 00:24:37.900
Okay.


00:24:37.900 --> 00:24:38.300
Okay.


00:24:38.300 --> 00:24:41.780
The manager, I'm going to think of one of the people from office space, maybe.


00:24:41.780 --> 00:24:46.420
And it comes over and says, when the, when a user takes a photo with the app, it


00:24:46.420 --> 00:24:48.420
should check whether they're in a national park.


00:24:48.980 --> 00:24:50.340
And the woman says, "Sure, easy.


00:24:50.340 --> 00:24:52.460
"Easy GIS, look up, give me a few hours.


00:24:52.460 --> 00:24:53.800
"Oh yeah, and it should also check


00:24:53.800 --> 00:24:55.580
"whether the photo's a bird."


00:24:55.580 --> 00:24:58.340
She says, "I'll need a research team in five years."


00:24:58.340 --> 00:24:59.180
(laughing)


00:24:59.180 --> 00:25:00.380
But the subtitle is,


00:25:00.380 --> 00:25:02.120
"In CS it can be hard to explain the difference


00:25:02.120 --> 00:25:04.220
"between the easy and the virtually impossible."


00:25:04.220 --> 00:25:05.060
Yeah.


00:25:05.060 --> 00:25:06.020
(laughing)


00:25:06.020 --> 00:25:07.900
So there you go.


00:25:07.900 --> 00:25:10.460
Yeah, I don't know, that resonates a lot with me at least.


00:25:10.460 --> 00:25:12.460
- Yeah, we'll probably get a bunch of the image people


00:25:12.460 --> 00:25:14.960
telling us that it's like five minutes now


00:25:14.960 --> 00:25:17.620
with all the new image libraries to do a bird.


00:25:17.620 --> 00:25:19.540
- Yeah, but that's now, right?


00:25:19.540 --> 00:25:20.940
Like, we probably should,


00:25:20.940 --> 00:25:23.820
I should see if there's a date for this, just to be fair.


00:25:23.820 --> 00:25:25.940
They don't have dates on these, that's kind of funky.


00:25:25.940 --> 00:25:26.900
All right, anyway, well,


00:25:26.900 --> 00:25:28.740
there's probably some algorithm that figures out


00:25:28.740 --> 00:25:31.860
the number of the XKC and maps it back to a date, but yeah.


00:25:31.860 --> 00:25:33.300
- Yeah, but that's funny.


00:25:33.300 --> 00:25:34.660
- Cool, all right.


00:25:34.660 --> 00:25:36.020
Well, great to chat with you as always.


00:25:36.020 --> 00:25:36.860
- Thank you. - Yep.


00:25:36.860 --> 00:25:37.680
- Bye. - Bye.


00:25:37.680 --> 00:25:39.180
Thank you for listening to Python Bytes.


00:25:39.180 --> 00:25:41.660
Follow the show on Twitter via @PythonBytes.


00:25:41.660 --> 00:25:44.700
That's Python Bytes as in B-Y-T-E-S.


00:25:44.700 --> 00:25:49.340
get the full show notes at pythonbytes.fm. If you have a news item you want featured,


00:25:49.340 --> 00:25:54.140
just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something


00:25:54.140 --> 00:25:58.940
cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and


00:25:58.940 --> 00:26:01.340
sharing this podcast with your friends and colleagues.

