00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 280, recorded April 19th, 2022.

00:00:10 I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 And I'm Pat Decker.

00:00:13 Welcome, Pat. Good to have you here.

00:00:15 Well, thanks for having me on.

00:00:17 Yeah, it's really exciting.

00:00:18 You and I were chatting a bit about less new programming languages a bit over email.

00:00:24 And yeah, it'd be fun to just have you come on and share some of the things that you're passionate about and whatnot.

00:00:30 Tell people a bit about yourself.

00:00:31 I got started with computers way back in the day.

00:00:35 High school, I had an Apple II computer at school.

00:00:38 Eventually got a Commodore 64 at home.

00:00:40 I did Pascal on cards at Iowa State University.

00:00:44 And I did a data processing program at Kirkwood in Cedar Rapids.

00:00:51 And got my first job out of there about 30 years ago or so.

00:00:55 So I've worked mainframe and PC, Cobalt, C, and a little bit of Python here and there.

00:01:04 Fantastic.

00:01:05 And it sounds like you're doing DevOps type things today.

00:01:08 Yeah, the company has, like many, gone from on-site in their own data center to 80% or so running on AWS.

00:01:18 And so I get to share your same frustration with the AWS interface in Python.

00:01:23 It's not always obvious how that works.

00:01:26 It's updated every week.

00:01:28 And I know the way it is updated every week has got to be some code gen is running somewhere that regenerates it.

00:01:35 And it's just never quite discoverable.

00:01:38 Right.

00:01:38 It's fine once you get it working, as long as you don't touch it or have to understand it.

00:01:43 This is not the sign of a fantastic API, but it's cool.

00:01:46 You get it working in AWS.

00:01:48 Cool.

00:01:48 Well, great to have you here.

00:01:49 Now, Brian, before we jump over to your first topic, I just want to say this episode is brought to you by Mergify.

00:01:56 I am psyched about what these guys are offering.

00:01:58 Mergify is super cool.

00:02:00 It's all about automating Git collaboration.

00:02:03 And I have a lot to say about Git, but I want to start with Pi because I love Pi.

00:02:08 Banana cream pie is my favorite.

00:02:10 I'll take a cheesecake.

00:02:11 Does that count as a Pi?

00:02:12 Is that what we're talking about?

00:02:13 No, we're talking about HTT Pi.

00:02:19 Still a good Pi.

00:02:20 Yeah.

00:02:20 The website actually lists in their readme, tells you exactly how they wish you to pronounce it right off the bat.

00:02:26 H-A-T-T-Pi.

00:02:28 Anyway, it's a really cool tool.

00:02:31 It's a command line tool, and I think we've covered it before, for interacting with...

00:02:37 It's especially useful for APIs.

00:02:39 So, you know...

00:02:40 It's one of the first things I install on any server on my Mac if I get a new one.

00:02:44 Straight up, this thing is fantastic.

00:02:45 Yeah, yeah.

00:02:46 And it's so fantastic that it had 60...

00:02:48 This is what I want to cover.

00:02:49 I'm sorry to laugh.

00:02:51 It had 54,000 stars on GitHub, and then it lost them.

00:02:57 Then it didn't?

00:02:57 Then it didn't.

00:02:58 So, oof, what a cliff.

00:03:01 So, how many does it have now?

00:03:04 Right now, if we look, it's got 16.1 thousand.

00:03:06 Oh my gosh, it's way back.

00:03:08 Yeah.

00:03:08 Actually, this morning when I looked, it was just 16.0 thousand.

00:03:12 So, it's gotten 100 stars just as I was researching this.

00:03:17 So, anyway, the...

00:03:19 That's one of the...

00:03:21 I guess what I want to shout out to these guys of...

00:03:23 It's a cool tool.

00:03:25 If you're doing APIs, check it out.

00:03:27 And also, if you've started before, restart it because they deserve it.

00:03:32 And what happened was they accidentally put their repo private for...

00:03:36 Somebody was trying to do make it private, make something, some other test repo private.

00:03:42 And they accidentally put the main one private.

00:03:46 And if you're even private for a second, you lose all your stars.

00:03:49 So, warning.

00:03:51 Don't make your public stuff private.

00:03:53 Don't do that.

00:03:54 Oops.

00:03:55 Wow.

00:03:56 That is...

00:03:57 Yeah.

00:03:58 It's a good warning.

00:03:59 It's a great tool, but a good warning.

00:04:01 It does have a danger zone.

00:04:03 Danger zone.

00:04:03 This is going to happen.

00:04:04 But unfortunately, the warning is equivalent if there's zero followers and zero people interested

00:04:12 in it.

00:04:12 Or you have one of the most popular things on GitHub.

00:04:14 Like, it should be like, this is super duper important.

00:04:17 You're going to lose 54,000 GitHub stars.

00:04:19 Are you doing it?

00:04:20 Yeah.

00:04:21 Well, and also, I mean, if you work with a lot of GitHub repos and you're like, maybe

00:04:28 you made something public for a talk and then you're making it private because, I don't

00:04:32 know, the talk's over or whatever.

00:04:33 Or you just don't want to maintain something like, I'm just done with this thing.

00:04:36 If you're working with it a lot, maybe you've seen that warning so many times that you're

00:04:40 not really reading it anymore and double checking.

00:04:42 So, I guess this is just a warning.

00:04:45 Double check it.

00:04:46 If you can see that warning box, make sure you're on the right repo.

00:04:50 Indeed.

00:04:50 And Pat, what do you think about this?

00:04:52 Yeah, it's pretty tragic.

00:04:54 It's kind of like those end user license agreements where we all see them so often, they just

00:04:58 automatically click, I think.

00:05:00 Yeah, exactly.

00:05:01 The confirmation dialogues and stuff.

00:05:03 You're like, well, I have to copy this and paste that there.

00:05:05 I just can't continue.

00:05:06 So, I'm going to just, you know.

00:05:07 Instead of warning danger, I think people see, I want to get my work done.

00:05:11 So, click here to get my work done.

00:05:14 And then, oh, no, what happened?

00:05:15 Yeah.

00:05:16 Yeah.

00:05:16 Yeah.

00:05:17 Well, Brian, I believe you have at least helped a little bit.

00:05:21 David, out in the audience, starting it right now.

00:05:24 Oh, I forgot to start also.

00:05:25 I'm going to go start.

00:05:26 You better get in there and start.

00:05:27 Boom.

00:05:27 All right.

00:05:27 Plus two.

00:05:27 Couldn't you?

00:05:28 I was going to start myself, but I'm not logged in any of my browsers for some reason on

00:05:32 this account.

00:05:32 So, no, starting.

00:05:33 I have to start it later.

00:05:34 Okay.

00:05:35 Also, a little bit out of order, but I want to also just cover this other thing.

00:05:39 We are generally, not 100% of the time, because there's still a little bit of long tail stuff

00:05:46 happening.

00:05:46 But generally, we are moving our live stream of the recording, the one where David said,

00:05:51 I'm starting right now.

00:05:52 Thanks for being here, David.

00:05:54 That recording is now moving to Tuesdays at noon Pacific time.

00:05:57 So, if people want to come be part of the live show, see the video version, as well as,

00:06:03 you know, just make comments or whatever, not Wednesday, Tuesdays in general.

00:06:07 But check for the next week, couple of weeks, because it is still like some pre-scheduled

00:06:10 stuff.

00:06:11 Yeah.

00:06:11 So, how do people find out when it's coming up next?

00:06:13 I would say the best way is just to subscribe to the YouTube channel.

00:06:17 And then, you know.

00:06:18 Okay.

00:06:19 I hate to say it, but push the little bell for notifications.

00:06:22 So, it'll tell you like, hey, this thing's coming up.

00:06:24 And it'll let you know that we're gone live.

00:06:26 Yep.

00:06:26 Yep.

00:06:27 I don't have a great, better way.

00:06:28 Maybe we could do a mailing list, but it's a little tricky.

00:06:31 But usually, stick around on Tuesday Pacific.

00:06:34 Tuesday noon Pacific, we'll be recording.

00:06:36 Yeah.

00:06:37 If you check YouTube once a week, you'll see it's scheduled pretty far out.

00:06:40 And then you can get a reminder for just that one thing.

00:06:42 You don't have to always get messages.

00:06:43 Okay.

00:06:44 So, this is a fun one.

00:06:47 You mentioned some of the older programming languages.

00:06:49 When I was in college, I was studying chemical chemistry, chemical engineering, math, all these

00:06:56 different things.

00:06:56 And as part of that, they said, you're going to have to take a programming class.

00:07:00 I'm like, super.

00:07:00 What's it going to be?

00:07:01 Like C++ or something?

00:07:02 Remember, this is like early 90s.

00:07:04 So, that was a good choice then.

00:07:05 And they said, no, you're going to take the most important programming class you're ever

00:07:10 going to take in your career.

00:07:11 You're going to learn Fortran.

00:07:12 I'm like, wait a minute.

00:07:13 No.

00:07:13 No, no.

00:07:15 I don't want to do that.

00:07:16 That doesn't sound like the most important thing ever.

00:07:18 But nonetheless, that was one of my first courses I had to take.

00:07:23 I only took a couple.

00:07:24 Eventually got to take some C++.

00:07:26 But Fortran was where it started.

00:07:28 So, here is an article that was recommended to us by, let me make sure I get the name

00:07:32 right, Galene Swint.

00:07:34 And Galene is a PhD researcher and said, hey, here's a really interesting article.

00:07:39 The article I don't believe is by them, but it's about the sort of, I think it was something

00:07:46 in their lab they were talking about.

00:07:47 It says, the title is, The Counterintuitive Rise of Python in Scientific Computing.

00:07:52 Why is it counterintuitive?

00:07:53 Because Fortran is fast.

00:07:55 And what you want to do is process lots of data and you want to do it fast.

00:07:58 So, here's a really interesting story of people who were doing older stuff like Fortran and

00:08:04 C sort of were forced in, coerced into doing a little bit of Python and accidentally made

00:08:10 their supercomputer stuff go like a hundred times faster or something in Python rather than

00:08:16 in C or rather than Fortran, which is a counterintuitive result, right?

00:08:20 Yes, it is.

00:08:21 Yeah.

00:08:22 So, I think that I'll cover a few details of this article, just put some highlights.

00:08:26 But the reason I'm bringing an article instead of like a tool or something is I think this

00:08:30 would be interesting for people to share if they're in a situation where they're like,

00:08:34 oh, Python is no good.

00:08:35 This is such a slow language.

00:08:36 It's like doing math is like a thousand times slower than C.

00:08:39 I don't actually know what it is, but it's a lot, lot slower, right?

00:08:41 So, it goes through here.

00:08:43 And here's a couple of things.

00:08:44 It says, in our laboratory, a polarizing debate rages since, has been raging since 2010.

00:08:49 Summarized by the question, why are more and more time-critical scientific computations

00:08:53 formerly performed in Fortran now written in Python, a slower language?

00:08:58 Ah, Python, a slower language.

00:09:00 So, Python does have the reputation of being slow and especially around math.

00:09:04 I think it's, honestly, it's earned it.

00:09:07 Unfortunately, I would really love, sidebar, I would really love to see Python adopt something

00:09:12 along the lines of value types that can be boxed back to PyLongs, right?

00:09:18 So, like, on the stack locally, it's a number, but it gets complicated.

00:09:22 But I think that would actually solve a ton of stuff.

00:09:24 Anyway, so, yeah, plain Python is slower than Fortran.

00:09:28 But when you do computational stuff, you don't do plain Python.

00:09:32 What you do is you do NumPy, SciPy, Dask.

00:09:36 All of these things are written in C with a thin coordination layer in Python as part of

00:09:41 its API, right?

00:09:43 So, here's, like, some graph you can see on the article.

00:09:46 And it says, here's, like, you know, 10 to the 1 versus 10 to the minus 2.

00:09:51 So, is that 100 times faster if you use Cython or NumPy and so on?

00:09:57 So, pretty interesting.

00:09:58 And it also shows, guess what?

00:10:00 Shocker.

00:10:00 Be-de-de-de-de-de-de-de-de.

00:10:01 News alert.

00:10:02 Fortran is somewhat less popular than it used to be.

00:10:05 Oh, no.

00:10:08 Oh, no.

00:10:09 So, there's an interesting story of this project nicknamed Projector, written in, written around

00:10:19 2010.

00:10:19 So, modern, in quotes, Fortran, by somebody named Bob.

00:10:24 So, Bob worked on this project, and there's apparently, let me find the numbers here.

00:10:28 It's, like, 1.5 thousand lines of Fortran code.

00:10:32 So, a lot of Fortran code.

00:10:33 Like, a lot of complicated math bits.

00:10:35 The kind you kind of don't want to touch after it works.

00:10:38 And it's going to do, it's trying to project something.

00:10:42 Thousands of multiple, multi-perforations of combustion liner onto a 3D complex shape made

00:10:50 of millions of polygons.

00:10:51 So, that might get complicated when you multiply those numbers together.

00:10:54 You know?

00:10:55 And it turns out, Bob soon discovered that he was going to use NumPy and this thing called

00:11:03 a KD tree.

00:11:04 Because there's a bunch of people working in the lab that only knew Python.

00:11:07 So, like, here's a Python version you can use.

00:11:09 And he thought, this is going to be rough.

00:11:11 It's going to be super slow.

00:11:13 So, he went and ran it after he got it done.

00:11:16 And the Fortran version ran in 6 hours and 30 minutes.

00:11:19 The Python version, 4 minutes.

00:11:21 Wow.

00:11:25 So, what happened?

00:11:26 Is Python 100 times faster?

00:11:28 No.

00:11:29 Python is easier to work with and has many more built-in algorithms and data structures.

00:11:34 This KD tree thing was using a different data structure, is a different data structure that

00:11:40 has O log N complexity.

00:11:42 Whereas the Fortran version, because it's so hard to write code in, they just wrote it

00:11:47 in the simplest way they can make it work.

00:11:49 So, O N.

00:11:50 And when you have billions times millions times thousands, O log N wins, even if it's in a

00:11:55 slower language.

00:11:56 So, the conclusion was, Fortran would have been faster if they had implemented this KD tree

00:12:01 algorithm in it.

00:12:02 But the people working on it, they're like computational scientists, not PhD data structure type people,

00:12:10 right?

00:12:10 Like, they're already super busy just trying to do the programming and not working on, like,

00:12:15 cutting edge data structures and optimizations and stuff.

00:12:19 So, it was very easy to try one new thing in Python, which would have been very hard in

00:12:23 Fortran, and it was a big win.

00:12:25 So, anyway, I think the debate about performance, developer speed versus execution speed, but

00:12:31 also straight up execution speed, I think it's really interesting in Python.

00:12:34 And it's hard to be nuanced enough.

00:12:37 It's always there's some little interesting wrinkle like this.

00:12:40 Yeah.

00:12:40 And if you're really, you're going to hand code everything anyway, it's also faster in assembly.

00:12:46 So, just write assembly.

00:12:47 There's a downside to that.

00:12:51 Why not?

00:12:51 Yeah.

00:12:52 I've always wanted to stick to this one processor I really loved forever.

00:12:56 But this is interesting.

00:12:59 I like it.

00:13:00 But it sort of reads like a commercial.

00:13:02 So, Bob was programming scientific computing and he was not happy in Fortran.

00:13:08 Bob tried Python and now he's happy.

00:13:12 Well, I think Bob unwillingly tried Python and eventually he was happy.

00:13:16 Like, it sounded like he didn't want it.

00:13:17 He was dragged through it.

00:13:18 I like it.

00:13:19 Yeah, yeah.

00:13:19 I know it does read a bit like that, but I think it's an interesting story.

00:13:22 Pat, what do you think?

00:13:23 You've had, you have a bit of a historical perspective on all this.

00:13:26 Yeah.

00:13:27 I didn't go to school for chemistry, but I bet Fortran's not popular among chemistry students, is it?

00:13:32 No, not anymore.

00:13:33 I'm sure.

00:13:33 I did a little benchmark the other day.

00:13:37 I was trying to just see how fast some EFS storage was on AWS versus EBS.

00:13:44 And so I wrote a Python script to do that and wrote 10 million records out.

00:13:48 And I thought, well, maybe Python is going to be slow.

00:13:50 So I thought I'll just whip up a quick thing in Rust here.

00:13:54 And as it turned out, Python was 10 times faster at that too.

00:13:58 On the same exact hardware.

00:14:00 And I'm not sure why that was.

00:14:02 I may not have done something that was optimal for Rust, but there it is.

00:14:06 10 times faster.

00:14:07 Yeah, sure.

00:14:07 No, that's super interesting.

00:14:08 I've seen Python just rip across like OS type stuff like that.

00:14:12 It's pretty good.

00:14:13 All right.

00:14:13 Well, what's your first item, Pat?

00:14:15 Are we off to the metaverse?

00:14:16 Or is the metaverse off to us?

00:14:18 I stumbled across this the other day.

00:14:20 We've had Lucas Longa on the show, the programmer in residence.

00:14:26 And it looks like they're going to get another year due to a donation from a meta of $300,000 to the Python Software Foundation.

00:14:36 And it was specifically for that purpose.

00:14:38 That's a really big deal.

00:14:40 And like you said in the past too.

00:14:43 Python is very important to meta.

00:14:47 Facebook's parent company now.

00:14:49 Because much of their infrastructure is built on it.

00:14:52 PyTorch in particular.

00:14:54 They use it a lot.

00:14:56 So their internal implementation of Python is called Cinder apparently.

00:15:01 Which I think I've seen mentioned a few times.

00:15:04 But they would like to see continued development.

00:15:06 And they're going to fund it, which is awesome.

00:15:08 Yeah, that's really neat.

00:15:10 I think Cinder is a fantastic thing they've created.

00:15:14 And it's interesting.

00:15:15 It's open source in the sense of maybe the better term would be source open.

00:15:20 Like, here, we're going to put this out here.

00:15:22 We don't expect any contributions.

00:15:23 And we don't want to put it out there as like a project to grow on its own.

00:15:27 But we think it might inspire people.

00:15:28 So here's the source.

00:15:29 But what they have contained in there is amazing.

00:15:33 There's just so many optimizations and different things.

00:15:37 I think they might even have that value type thing I discussed.

00:15:40 And I can't remember.

00:15:42 But yeah, that's a really cool project that they're working on.

00:15:46 So this is great.

00:15:47 You know, I think Lucas Schelenga has gone sort of full circle, right?

00:15:50 He was independent.

00:15:52 He was at Instagram for a while, which is, you know, part of Meta.

00:15:55 And then left to sort of do his own thing and found his way to this developer in residence.

00:16:00 And now Meta is sending money so that he stays there.

00:16:03 That's like an interesting circle, I think.

00:16:05 Yeah, that's good.

00:16:07 It seems tenuous, though, that we have it at like one year at a time.

00:16:11 That we don't know if we're going to have a developer in residence longer than another year.

00:16:15 It's like a postdoc.

00:16:16 Hopefully it's a game of tag with Microsoft coming next or something.

00:16:20 Yeah, exactly.

00:16:21 That'd be great.

00:16:23 And I think there are a couple of organizations doing this.

00:16:25 So I know that there was a talk about having multiple folks sort of participating in that group,

00:16:31 which would be great because I know there's way more work than Lucas can do on himself.

00:16:35 He's quite busy.

00:16:36 Alvaro in the audience has a fine name proposal here.

00:16:40 The PSF developer in residence should be called the PSF Dunderder.

00:16:45 Underscore, underscore, D-I-R, underscore, underscore.

00:16:48 I hereby am opening a pep.

00:16:51 Well done, Alvaro.

00:16:52 No, just kidding.

00:16:52 I want to give him more work for something silly like that.

00:16:56 But that's pretty awesome.

00:16:56 The PSF Dunderder.

00:16:58 Cool.

00:17:00 Well, thank you, Pat.

00:17:01 Now, before we move on to the next item, let me tell you all about our sponsor today.

00:17:07 And like I said, I'm really excited about this.

00:17:08 I'm actually doing a bunch of work on some Git presentations.

00:17:11 And so I'm just trying to think about what's the workflow with Git and how can we work better,

00:17:18 especially doing team type stuff.

00:17:20 So Mergeify is a service that will help you and especially your team be way better with Git.

00:17:27 So it's an amazing tool to make you and your team be more productive with GitHub in particular.

00:17:32 It's all about leveling up for requests.

00:17:36 So some of the features of their platform that you hook into your repositories are automatic merges.

00:17:42 So you can set up conditions for an automatic merge.

00:17:45 And Mergeify will take care of merging the PR as soon as it's ready and passes all the details.

00:17:49 There's automatic updates.

00:17:51 So if you have multiple pull requests, it'll merge the pull requests serially on top of each other.

00:17:57 So there's no way to introduce a regression.

00:17:59 There's also merge queues.

00:18:01 So if you've got like a long CI process and things are slow or you've got lots of code,

00:18:05 you can set up priorities and have the most important ones merge fix like bug requests or bug fixes,

00:18:11 especially if they're security fixes.

00:18:13 They go right here, right at the front.

00:18:15 Do those now.

00:18:15 So that's awesome.

00:18:16 They also have something called backports.

00:18:19 So Mergeify will copy the pull requests to other branches once it's merged, if you set that up,

00:18:25 so that you can ship bug fixes to multiple branches, feature branches and whatnot.

00:18:30 Automatically or even older versions, right?

00:18:32 Version 1.0 of your app versus, you know, 2.0, 2.2, whatever.

00:18:36 Have those automatically merge those bug requests, bug fixes in.

00:18:41 Super cool.

00:18:42 So Mergeify does all these things automatically that you would otherwise have to do manually.

00:18:46 So you save time.

00:18:47 You and your team will focus on projects that matter the most.

00:18:50 Mergeify is coordinated with any CI and is fully integrated into GitHub.

00:18:55 They also have a startup program that can give your company up to $21,000 of credits.

00:19:00 So if you're doing a startup and you want to use them to help grow, you can reach out to them for sure.

00:19:05 Do that by going to pythonbytes.fm/Mergeify.

00:19:08 Sign up for a demo and get started.

00:19:10 The link is at the top of your podcast player show notes.

00:19:13 So just click it.

00:19:14 Thanks to Mergeify for supporting our show.

00:19:17 Very cool project.

00:19:18 Yeah.

00:19:18 All right, Brian.

00:19:19 What's the next one here?

00:19:20 Well, we were talking about data science a little bit and people using Python for data science.

00:19:25 But one of the things that people use when they're doing data science, plus other stuff and DevOps and whatever, is dashboards.

00:19:32 Dashboards in Python.

00:19:33 And that's one of the powerful reasons to use it.

00:19:36 And so there's a couple things I want to discuss around dashboards.

00:19:40 Both of them come via suggestions from Mark Skov-Madsen.

00:19:45 So thanks, Mark.

00:19:46 First is the easiest way to create interactive dashboard in Python.

00:19:50 Obviously, it's their opinion, but it does look pretty easy.

00:19:53 Is to use hvplot.interactive.

00:19:57 So this is an article that talks about how to do this.

00:20:01 And it really looks nice.

00:20:04 This panel looks pretty good.

00:20:06 Oh, yeah.

00:20:07 That's great.

00:20:08 Pulling data out, you got dark and light, and you've got the controls on the one side.

00:20:13 Interactive sliders?

00:20:13 Yeah.

00:20:13 Okay.

00:20:14 So this is just using some pre-canned data, but you can use, obviously, your own data.

00:20:21 But the article's pretty short.

00:20:23 And one of the things I love about it, of course, is it's got an animated GIF to show you exactly what you're getting into.

00:20:30 And then also a video.

00:20:33 So one of the authors, Sophia, just reads the, like, pretty much goes through the article and talks about it and shows the demo of everything.

00:20:42 So that's nice.

00:20:43 And it's only, like, six minutes.

00:20:45 I was watching it this morning.

00:20:46 So really cool if you want to try.

00:20:49 So HVPLOT is part of the HoloViz family of tools.

00:20:53 So a lot of people are already using that.

00:20:55 Or if you're not, check that out.

00:20:57 Cool stuff.

00:20:58 Yeah.

00:20:58 This looks great.

00:20:59 I always want to have good use cases for this.

00:21:03 And I just, I don't find myself doing lots of dashboards and stuff.

00:21:06 But every time I see them, I'm like, well, what can I build a dashboard for?

00:21:08 That would be great to have this.

00:21:09 Well, so I have some use cases for dashboards, but I really don't want to spend a lot of time on it.

00:21:14 And I think even though this is, like, six-minute video of how to get through it, I think that probably I'd have to set aside maybe a half day to figure out something to get it usable.

00:21:25 But it does show that once you understand what you're doing, you can throw together dashboards pretty quickly and be able to.

00:21:33 Well, we didn't, in the demo, one of the dashboard items was, and the controls is, like, let's say you've got a whole bunch of columns or some different elements in a row or in a column that you want to filter out.

00:21:47 So there's ways to filter your data so that you're looking at different stuff.

00:21:51 And I was like, I have an exact use case for this, so I'm pretty excited.

00:21:55 The other thing around plots is maybe HV plot or dashboards is maybe HV plot isn't the right thing for you.

00:22:03 Well, we've got another thing is the PyData Global 2021.

00:22:09 There's a video stream up on YouTube called Python Dashboarding Shootout in Showdown.

00:22:16 And so this is a whole bunch of different presenters talking about building dashboards in Python using either dash or panel or voila or streamlet.

00:22:28 So watch different people do it.

00:22:31 So if you want to watch some, use something other than HV plot, watch this video.

00:22:36 One of the things I love about this is if you're only looking forward to one of them, one of the commenters on this video put up hyperlinks to each of the different sections.

00:22:47 So you can just hop right to the video part that you want to watch.

00:22:50 Oh, yeah, that's great.

00:22:51 Yeah, looks good.

00:22:52 I love these dashboards.

00:22:53 It's definitely one of their powers.

00:22:54 Pat, do you do anything with them?

00:22:56 Sorry, Brian.

00:22:57 I cut you out.

00:22:58 We do have some pre-built dashboards to model the EKS cluster in Grafana and Elastic.

00:23:06 But this is another option.

00:23:08 It'd be good to do something ad hoc.

00:23:10 If it's a quick and dirty, maybe I could put one out.

00:23:13 So, Brian, do you just like grab a Pandas data frame and then make it interactive?

00:23:16 No.

00:23:18 Well, not quite, but it's almost.

00:23:21 I mean, this is built to go really closely with Pandas data frames.

00:23:26 So the code is, you know, you're doing some filtering, some pipeline processing, like group buys and selecting in to see what index you're going to use.

00:23:36 And then, yeah, it's pretty much interactive at that point.

00:23:40 But the code around this is building the widgets for the controls.

00:23:46 You got to define the UI and how people interact with it.

00:23:49 Got it.

00:23:49 Yeah, it's not.

00:23:50 But it's pretty easy.

00:23:51 I can't imagine.

00:23:53 I mean, it's not obvious.

00:23:54 So you have to kind of, it's good to watch a tutorial or something.

00:23:57 But it's also not difficult.

00:23:59 And then putting it together.

00:24:02 Yeah.

00:24:02 So most of the code in here is not the interactive plot because that's kind of already happens.

00:24:07 But it's the widgets.

00:24:09 Got it.

00:24:10 Cool.

00:24:10 Thanks.

00:24:11 All right.

00:24:12 I think you all will be excited about this.

00:24:14 I think this is quite a neat project.

00:24:16 Now, let's see.

00:24:17 This was sent over by Dave Chevelle.

00:24:20 Well, actually, it is posted over and is by Dave Chevelle.

00:24:23 So, I don't know.

00:24:24 Brian, do you ever use entry points in Python packages?

00:24:27 You know, so you can set up and pip install a package.

00:24:31 And then if you have that Python active, then you can just type a CLI command that is one

00:24:35 of the entry points there.

00:24:36 You know what I'm talking about?

00:24:37 Yeah.

00:24:37 I do that all the time.

00:24:38 That's great.

00:24:39 But there is some overhead to set it up, right?

00:24:42 I've got to install it as a package and whatnot.

00:24:45 This project called sourcepy allows you to basically turn any function into a CLI command, straight

00:24:52 CLI command in one line.

00:24:54 So, let me show you what I'm talking about.

00:24:56 And it doesn't involve packages and installing or anything like that.

00:24:58 So, imagine you've got some file here and it's got a function, just a def function.

00:25:03 Pygrep is the example here.

00:25:05 And it has a pattern, which is actually a regular expression pattern.

00:25:09 Note the typing.

00:25:10 It has grep data, which is a list of text inputs.

00:25:13 So, it could be a string or something, but it could also be like something piped or standard

00:25:19 in or something along those lines, right?

00:25:20 So, if I have this script that just does that work with that type assigned data and I have

00:25:27 sourcepy installed, I can say source this file here.

00:25:32 And what it will do is it'll actually add up the, it'll expose those functions like pygrep

00:25:38 and so on.

00:25:39 So, then I can just type pygrep and it'll tell me how it works.

00:25:42 And somewhere in here, where's the example running it?

00:25:45 Oh, right here, I think it is.

00:25:46 So, what you can do is you can just run pygrep against, now, as a function, right?

00:25:51 As a CLI function.

00:25:53 So, it has all sorts of cool features.

00:25:55 For example, it has this type handling.

00:25:58 So, type hints that we talked about can be used to coerce inputs off the command line

00:26:03 into like integers and patterns and I.O.

00:26:07 streams for like files and standard in and such.

00:26:09 Let's see.

00:26:11 It just takes basically any function like this and turns it into something you run on the

00:26:15 shell.

00:26:16 And then you can also go down and you can do like, I believe there's some sort of class

00:26:21 based way to work with it and so on.

00:26:23 But yeah, this is pretty neat.

00:26:25 What do you think?

00:26:25 I guess I'm confused at how it works with the normal source command.

00:26:30 That is a good question.

00:26:31 Like, how does it not break normal source?

00:26:33 Yeah.

00:26:34 That's a good question.

00:26:35 Yeah.

00:26:35 It is a good question.

00:26:38 Like, does it replace it for while you've got it installed or does it extend it somehow?

00:26:43 Yeah, I don't know.

00:26:45 I haven't looked at it enough to understand how it either coordinates or overrides source.

00:26:51 Sorry to put you on the spot there.

00:26:53 No, no, no.

00:26:53 It's a great question.

00:26:54 Yeah.

00:26:55 I haven't played with it, but it's really important.

00:26:58 You would want to know because you want to break your regular source stuff.

00:27:00 I'm sure you could alice it if for some reason it conflicted, but I don't know.

00:27:04 I think.

00:27:04 So I think this would be really helpful for, aside from that, if that's all working great,

00:27:09 then aside from that, I think it's a very useful way to have like a handful of little tools

00:27:15 for a project to be able to use that.

00:27:18 If you're trying to share it with other people, I kind of think packaging it the right way

00:27:24 to have entry points is probably the right way to go.

00:27:26 Yeah.

00:27:26 If you want to do a more formal, like a PIPX style, but this feels way more ad hoc, right?

00:27:32 Like Pat was talking about his little script that he built to test some stuff.

00:27:35 You could run this and then just call those functions as if they were built into Bash or

00:27:39 ZShell or whatever.

00:27:40 Definitely.

00:27:40 Also, also worth pointing out, it has built in native async support.

00:27:44 So if you have async functions and you source it, then you can just call, call it as if it

00:27:49 was a regular command line command and it's, it still just takes it and runs.

00:27:53 And Kim Benwick, who's been a co-host here before has a clever thought.

00:27:59 I suspect it wraps the normal source command and hands it over to the normal source.

00:28:04 If it isn't Python, it's a good idea.

00:28:06 Probably.

00:28:07 Yeah, probably.

00:28:08 Although, like I said, I haven't really looked at the mechanism there, but this looks like

00:28:12 a cool project.

00:28:13 It's got all sorts of supported types like JSON and unions and date time objects and all kinds

00:28:19 of stuff.

00:28:19 So check it out.

00:28:20 If you do a bunch of kind of ad hoc stuff with Python on the command prompt terminal, Pat,

00:28:25 how's this strike you?

00:28:26 I know that this might touch some of the things you're doing in your world.

00:28:30 Right.

00:28:30 Yeah.

00:28:31 just yesterday, one of the guys was contacting me because he needed to go and cycle through

00:28:35 a list of addresses to, to hit an API.

00:28:40 And this, this could be something you'd use like that.

00:28:43 Consume this file and hit the API with each example and away we go.

00:28:47 Yeah, absolutely.

00:28:48 Yeah.

00:28:48 This looks great for putting a little, making those little scripts you build with Python,

00:28:52 like literally scripts.

00:28:54 I know a lot of people call everything Python scripts, but this is really for those types

00:28:58 of apps.

00:28:58 A single file script.

00:28:59 Yeah.

00:29:00 Yeah.

00:29:00 A single file thing, not like a 20,000 line Flask app, right?

00:29:04 That thing starts to stretch the terms of what script might mean, but this is exactly for

00:29:09 those things.

00:29:09 Yeah.

00:29:10 All right.

00:29:10 What's your final one, Pat?

00:29:11 This, this is, is similar to what you just covered.

00:29:14 Actually, you've, you've talked, I think a little bit about it before.

00:29:17 Conch shell combines the best of bash shell and Python in the Linux terminal terminal.

00:29:22 I ran across this.

00:29:24 This is way more than what I covered.

00:29:25 This, this is like another level here.

00:29:27 It takes it to another level.

00:29:28 Yeah.

00:29:29 I ran across it on its boss, which is, is a nice site for open source type things.

00:29:36 In a nutshell, what, what it does is provide you with a new shell where as they demonstrate

00:29:42 here, you can use straight Python.

00:29:44 You can import JSON, for example, and, and define a, a, a variable or a table, print,

00:29:53 print that out and, format it, the length function here, but you can also then mix

00:30:00 in regular bash functions where we, for example, here it curls from a website.

00:30:06 The result comes back and the length function tells you the length of that curl.

00:30:10 Oh, how interesting.

00:30:12 And one of their famous.

00:30:13 That's a little bit like, almost like a Jinja Django template, but in your terminal,

00:30:19 right?

00:30:19 You put a little dollar to say, here's a, a bit of code to run on the shell.

00:30:24 Yep.

00:30:24 Um.

00:30:25 Shell to run here.

00:30:26 The one famous statement they have is, you know, I always forget how to do a for loop in,

00:30:29 in bash, but in Python, it's pretty easy.

00:30:32 and, and they have kind of a rule that it evaluates.

00:30:35 To Python first.

00:30:37 If it evaluates to Python, it executes as Python.

00:30:40 If it doesn't, then it more or less executes as bash.

00:30:43 and I do have a link we could, we could put in the show notes too, to a, a video

00:30:50 demonstration from, from their homepage.

00:30:53 and the guy does a spectacular, demonstration with auto completes and, and they have, what

00:31:01 they call contributions.

00:31:02 And, and that also begins with an X.

00:31:05 so it's, it's like a plugin or an add on, but it's a contribution.

00:31:10 it, it, it, it is get aware and it is, virtual environment aware.

00:31:16 it sounds like a killer environment, but it would take some getting used to.

00:31:21 I have a lot of muscle memory to overcome, to take full advantage.

00:31:26 I think.

00:31:27 This is cool.

00:31:27 Brian, have you played with us?

00:31:29 You know, I tried to play with it a couple of years ago, but I, but now I, and then

00:31:34 I haven't, but I do want to.

00:31:35 And I think one of the things I didn't give it a fair shake.

00:31:38 And I think it would be good to just say for a week, maybe I'm going to try to just use

00:31:43 this instead of pulling up my normal terminal just to see if I can get used to it.

00:31:47 That's the thing.

00:31:48 I think you have to immerse yourself probably.

00:31:49 And, and it is about five years old.

00:31:51 I think it's fairly mature.

00:31:52 Yeah.

00:31:53 And yet also the less I write bash scripts, the more I wish that I bash scripts were more

00:32:00 like Python scripts.

00:32:01 So now they are.

00:32:03 Yeah, this is great.

00:32:05 a good find and it's something I've also wanted to play with, but haven't.

00:32:10 Nice.

00:32:11 Brian, you got any extras you want to share with people?

00:32:13 I don't this week.

00:32:14 How about you?

00:32:15 I thought I didn't, but then I did.

00:32:17 I just want to do a quick follow-up.

00:32:19 Okay.

00:32:19 I was just thinking about a couple episodes ago where we talked about the March Madness

00:32:25 package tournament that Chris May had sent in.

00:32:28 And I was thinking, you know, it's probably done now, isn't it?

00:32:31 Let's see who won.

00:32:32 Cause I think we were at the point where we were at the elite eight, weren't we?

00:32:36 Or yeah, I believe we were at the elite eight.

00:32:39 So we had a showdown to put between NumPy and Pip.

00:32:42 NumPy crushed it.

00:32:43 We had a showdown between pandas and requests.

00:32:46 Pandas crushed it.

00:32:47 And it was an all data science finale.

00:32:51 And NumPy and pandas went to head, went head to head.

00:32:54 And it was pandas, 55% taking the winter.

00:32:56 So I just want to do a quick follow-up on that.

00:32:58 Very important news.

00:32:59 We have a champion.

00:33:00 It's good.

00:33:01 But try using pandas without NumPy.

00:33:02 That'd be tough.

00:33:03 There you go.

00:33:04 Yeah, indeed.

00:33:06 I was.

00:33:07 Pat, do you have anything else you want to get a, give a shout out to?

00:33:10 I do have one extra.

00:33:12 quick, like, it's easy to bash Microsoft, but they've been involved in.

00:33:17 They bought GitHub.

00:33:18 They, have lots of our Python code developers working for them and they have this rewards program

00:33:25 and they want you to use Bing search, obviously.

00:33:27 But what you can do is choose a, a charity to give points to.

00:33:33 you can also get like a $5 gift certificate to AWS or, or Amazon or something, for yourself

00:33:40 if you'd rather.

00:33:40 And, and every day you just kind of click on these little links and, and I just got

00:33:45 five points or 10 points and, oh, now we got to do a quiz.

00:33:49 I'll come back to that later.

00:33:50 and, and as you do this, you accumulate more points each day and those points then

00:33:55 can go to your charity.

00:33:56 And I did, the red cross for a while and I did the CDC during our, our lockdown

00:34:02 year there.

00:34:03 And you can also donate to the Python software foundation.

00:34:07 So that's some, that's a way we can all contribute.

00:34:10 So if you're Googling stuff with Bing, go ahead and set up the rewards.

00:34:14 You're Googling stuff with Bing.

00:34:18 If you're Googling stuff with Bing, set up the rewards to go to the PSF.

00:34:20 You might as well, right?

00:34:21 That's right.

00:34:22 It's fantastic.

00:34:22 Awesome.

00:34:24 All right.

00:34:25 Well, thanks.

00:34:25 That's a good one.

00:34:26 I got a joke for you all here and I know Brian, you do as well, but I feel like this

00:34:32 one, I better take this one because I don't feel you're in a position to, to make an unbiased

00:34:37 decision here.

00:34:38 Cause it's so close to your heart.

00:34:39 Okay.

00:34:39 All right.

00:34:40 Okay.

00:34:40 So this one is over on the Reddit programming humor one and it poses a question.

00:34:45 What seems like a straightforward question for a piece of software?

00:34:49 How do you exit them?

00:34:51 And it types, it, there's some, you know, a couple of interesting options here.

00:34:56 You get colon exit.

00:34:58 7% of the people think you type colon exit.

00:35:01 They're wrong.

00:35:01 You type colon WQ, which I guess if you want to make changes, cool.

00:35:06 Save your changes and exit.

00:35:07 You could do most people got that one.

00:35:09 And then you could do colon quit 7% again.

00:35:12 You could click the close button hard for a non UI app, but or almost 20% of the people

00:35:19 said, you know what?

00:35:20 The way you restart Vim, this horrible thing.

00:35:22 I can't get out of it.

00:35:23 I'm going to restart the computer.

00:35:24 I'm trapped in here.

00:35:27 I just, I got to get out.

00:35:29 I tried command Z or control Z and it just background it.

00:35:32 And now what's it doing?

00:35:33 It keeps coming back.

00:35:34 And I think people clicked restart the computer to be funny.

00:35:38 I don't.

00:35:38 I know they did.

00:35:39 I thought, and I pulled it up as a joke to be funny as well, but there you go.

00:35:43 So have you, I don't know the, the close button works for me.

00:35:48 I don't know.

00:35:49 Well, it closes the terminal, right?

00:35:51 Yeah.

00:35:51 Yeah.

00:35:52 so I mean, who doesn't, you got to say, do you want to terminate the running program?

00:35:58 Right.

00:35:58 You get like a warning that you're doing it wrong.

00:36:00 I'm with you, Brian.

00:36:03 I'm a boom guy.

00:36:03 It's not hard.

00:36:07 And actually I haven't, I don't use straight Vim except for on the command line.

00:36:11 You're right.

00:36:12 I guess I do that on the command line, but I do, I essentially use Vim within PyCharm

00:36:16 or VS Code as well.

00:36:17 But yeah.

00:36:18 Vim emulation.

00:36:19 Yeah.

00:36:19 Okay.

00:36:20 It's fun.

00:36:20 So I wanted to share a joke also because I just thought this was so funny.

00:36:25 I could stop laughing this morning.

00:36:26 so ran across this, tweet by, mediocre superheroes.

00:36:31 it's a little cartoon thing.

00:36:33 So, so the guy, you know, finds a genie, genie says three wishes.

00:36:39 Hey, can I wish for more wishes?

00:36:41 Not with me?

00:36:42 No.

00:36:42 Well, fine.

00:36:43 I wish you couldn't count.

00:36:45 And the genie, done.

00:36:49 How many wishes do you have left?

00:36:50 A billion.

00:36:51 Hmm.

00:36:52 That sounds right.

00:36:53 I love it.

00:36:55 anyway, that was funny.

00:36:58 It's an inventive way around an old joke.

00:37:00 So that's great.

00:37:03 Anyway.

00:37:04 oh, quick.

00:37:05 Oh, a bit of audience feedback as well.

00:37:07 Henry Schreiner says, restart the computer.

00:37:10 Isn't that how you get out of email?

00:37:11 Also true.

00:37:14 Yeah.

00:37:14 Yeah.

00:37:16 What, what key chord do I hit to get out of that one?

00:37:19 Fantastic.

00:37:20 It's probably control something.

00:37:22 Yeah.

00:37:22 I bet it involves a control K something somehow.

00:37:25 Anyway, thanks for, everything.

00:37:28 Brian, thanks for being here.

00:37:29 Thanks for the jokes and pan.

00:37:30 It was great.

00:37:30 You could join us.

00:37:31 Yeah.

00:37:31 Thanks, Brett.

00:37:32 Thanks for having me on guys.

00:37:33 Bye everybody.

00:37:34 Bye everyone.

