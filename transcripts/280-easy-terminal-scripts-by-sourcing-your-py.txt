00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 280, recorded April 19 2022. I'm Michael Kennedy.

00:00:11 And I'm Brian knockin.

00:00:12 And I'm Pat Decker. Welcome, Pat. It's great to have you here. Well, thanks for having me on.

00:00:17 Yeah, it's really excited that you and I were chatting a bit about less new programming languages a bit over email. And, yeah, it's just fun to just have you come on and share some of the things that you're passionate about and, and whatnot. Tell people a bit about yourself.

00:00:32 Oh, I get started with computers. We back in the day high school, I had an apple two computer at school, eventually got to number 64. At home. I did Pascal on cards at Iowa State University. And I did a dino did a Data Processing program at Kirkwood in Cedar Rapids, and got my first job out of there, out 30 years ago or so. So I've worked mainframe and PC COBOL C, and a little bit of Python here and there.

00:01:04 Fantastic. And it sounds like you're doing DevOps type things today.

00:01:08 Yeah, the company is like many gone from onsite in their own data center to 80% or so. I'm running on AWS. And so I get to share your same frustration with AWS interface in Python. It's not always

00:01:25 obvious how that works. It's updated every week. And I know the way it is updated every week has got to be some code Gen is running somewhere that regenerates it, and it's just never quite discoverable, right, it's fine. Once you get it working as long as you don't touch it or have to understand it. These are not the sign of a fantastic API, but it's cool to get to work and ended up in AWS. Cool. Well, great to have you here. Now Brian, before we jump over to your first topic, I just want to say this episode is brought to you by merger phi. I am psyched about what these guys are offering merger phi is super cool. It's all about automating get collaboration. And I have a lot to say about Git. But I want to start with pie because I love pie. banana cream pie is my favorite. I'll take a cheesecake. Does that count as a pie? Is that what we're talking about? No, we're

00:02:14 talking about HCT HTT pie. And the the delegate pie, the website actually lists in their readme tells you exactly how they wish you to pronounce it right off the bat. Ah, nice. Tt py. Anyway, it's a command. It's a really cool tools command line tool. And I think we've covered it before. For, for interacting with. It's especially useful for API's. So

00:02:40 you don't we it's one of the first things I install on any server on my Mac. If I get a new one, I straight at this thing. It's fantastic. Yeah,

00:02:45 it's so fantastic that it had 60 This is what I want to cover. I'm sorry to laugh. It had 60 54,000 stars on GitHub, and then it lost that but it didn't. That didn't. So what a cliff. So how many does that have now? Right now? If we look, it's got 16 My gosh, way back? Yeah. Actually, this morning, when I looked it was just 16.0 1000. So it's gotten 100 stars, just as I was researching this. So anyway, the that that's one of the I just gotta guess where I want to shout out to these guys have it's a cool tool. If you're doing API's check it out. And also if you've started before restart, because they, they deserve it. And what happened was they accidentally put their repo private for the somebody was trying to do make it private, make something some other test repo private, and they accidentally put the main one private. And if you're even private for a second, you lose all your stars. So warning, don't make your public Sunday. Oops,

00:03:56 wow, that is too good warning. It's a great tool. But a good warning. It does have a danger zone, Danger Zone, this is going to happen. But unfortunately, the warning is equivalent. If there's zero followers, and zero people interested in or you have one of the most popular things on GitHub, like it shouldn't be like, this is super duper important. You're gonna lose 54,000 github stars. Are you doing it?

00:04:20 Yeah. Well, and also, I mean, if if you work with a lot of GitHub repos, and you're like, like, maybe you made something public for a talk, and then you're making it private, because I don't know, that talks over or

00:04:33 whatever. You just don't want to maintain something like I'm just done with. If you're working

00:04:37 with it a lot. Maybe you've seen that warning so many times that you're not really reading it anymore, and double checking. So I guess this is just a warning, double check if you can see that warning box. Make sure you're on the right repo.

00:04:51 Pat, what do you think about this?

00:04:53 And it's pretty tragic. It's kind of like those end user license agreements where we all see them so often, they just automatically click it Big

00:05:00 Yeah, exactly. The confirmation dialogues and stuff you're like, well I have to copy this and paste that there. I just can't continuous I'm gonna just you know, instead of warning danger people I think people see I want to get my work done so click here to get my work done and then Oh, no. Yeah, yeah, yeah. Well Brian, I believe you have at least helped a little bit. David out in the audience's staring at right now.

00:05:23 Oh, I forgot to start off. So I'm gonna go start you better get in there start Boom. Alright. Plus,

00:05:27 to me, I was gonna start myself. But I'm not logged in any my browsers for some reason on this account. So no story enough to start it later. Okay. Also a little bit out of order. But I want to also just cover this other thing. We are generally not 100% of the time because there's still a little bit of long tail stuff happening. But generally, we are moving our livestream and recording the one where David said, I'm starting right now. Thanks for being here, David. That recording is now moving to Tuesdays at noon pacific time. So if people want to come be part of the live show, see the video version, as well as Dinesh make comments or whatever. Not Wednesday, Tuesdays in general, but check for the next week, couple weeks because it is still like some pre scheduled stuff.

00:06:11 Yeah. So how do people find out when it's coming up next?

00:06:14 I would say the best way is just to subscribe to the YouTube channel. And then you know, okay, I hate to save, push the little bell for notification. So it'll tell you like, hey, this thing's coming up. And it'll let you know that we've gone live. Yep. Yep. I don't have a great better way. Maybe we could do a mailing list. But it's it's a little a little tricky.

00:06:31 But usually stick around on Tuesday, Pacific, Tuesday, noon, Pacific will be recording.

00:06:37 Yeah, they if you check YouTube, once a week, you'll see it scheduled pretty far out. And then you can get a reminder for just that one thing, you know, to always get messages. Okay. So this is a fun one, how you mentioned some of the older programming languages. When I was in college, I was studying chemical Chemistry, Chemical Engineering, Math, all these different things. And as part of that, they said, You're gonna have to take a programming class, I'm like, super, what's it going to be like C++ or something? Remember, this is like, early 90s. So that was a good choice then? And they said, No, you're going to take the most important programming class you're ever going to take in your career, you're going to learn Fortran, I'm like, wait a minute. No, no, no, I don't want to do that. That doesn't sound like the most important thing ever. But nonetheless, that was one of my first courses I had to take I went to a couple eventually got to take some C++ but for general is where it started. So here's an article that was recommended to us. By him, it makes sure get the name right. gallon, Swint gallon is PhD researcher and said, Hey, here's a really interesting article. The article I don't believe is by them. But it's, it's about the sort of, I think it was something in their lab they were talking about, it says the title is the counter intuitive rise of Python and scientific computing. Why is it counterintuitive? Because Fortran is fast. And what you want to do is process lots of data and you want to do it fast. So here's a really interesting story of people who were doing older stuff like Fortran and C, sort of were forced in, coerced into doing a little bit of Python, and accidentally made their super computer stuff go, like 100 times faster, or something in Python, rather than in C or rather than Fortran, which is a counterintuitive result, right? Yeah. So I think that I'll cover a few details of this article, just put some highlights. But the reason I'm bringing it up articles that have like a tool or something is I think this would be interesting for people to share, if they're in a situation where they're like, oh, Python is no good. This is such a slow language. It's like doing math is like 1000 times slower than C, I don't actually notice but it's a lot slower. Right. So it goes through here. And here's a couple things in our laboratory, a polarizing debate rages since has been raging since 2010, summarized by the question, Why are more and more time critical scientific computations, formerly performed in Fortran now written in Python, a slower language, Python, a slower language? So Python does have the reputation of being slow and specially around math? I think it's honestly it's earned it. Unfortunately, I would really love sidebar, I would really love to see Python adopt something along the lines of value types that can be boxed back to pi. Long's, right, so like, on the stack locally, it's a number but it gets complicated, but I think that would actually solve a ton of stuff anyway. So So yeah, plain Python is slower than Fortran. But when you do computational stuff, you don't do plain Python. What you do is you do NumPy, Sai, pi, Basque. All of these things are written in C with a thin coordination layer in Python as part of its API. Right. So here's a like a, some graph you can see on the article and it says, here's like, you know, 10 to the one versus 10 to the minus two. So what is that 100 times faster if you scythe on or number or NumPy and so on. So pretty interesting. It also shows guess what shocker. PTTD news alert. Fortran is somewhat less popular than it used to be. Oh, no. So there's that interesting story of this project, nicknamed projector written in, written around 2010. So modern, in quotes Fortran by somebody named Bob. So Bob worked on this project. And there's apparently I mean, find the numbers here. It's like 1.5 1000 lines of Fortran code. So a lot of Fortran code like a lot of complicated math bits, the kind you kind of don't want to touch after it works. And it's gonna do, it's trying to project something 1000s of multiple multi perforations of combustion liner on the ton to a 3d complex shape made a millions of polygons. So that might get complicated when you multiply those numbers together. And it turns out, Bob soon discovered that he was going to use NumPy. And this thing called a KD tree. Because there's a bunch of people working live the only new pythons like, here's a Python version you can use and he thought this is gonna, this is gonna be rough, it's going to be super slow. So he went and ran it after he got it done. And the Fortran version ran and six hours and 30 minutes, the Python version, four minutes.

00:11:23 Wow. So what happened is Python 100 times faster? No, Python is easier to work with and has much many more built in algorithms and data structures. This KD tree thing was using a different data structure is a different data structure that has Oh, login complexity, where's the Fortran version, because it's so hard to write code in, they just wrote it in the simplest way they can make it work. So O N, and when you have billions times millions times 1000s o log n wins, even if it's a slower language. So if the conclusion was Fortran would have been faster if they had implemented this KD tree algorithm in it, but the people working on it, they're like computational scientists, not PhD data structure type people, right? Like, they're already super busy just trying to do the programming and not working on like cutting edge data structures and optimizations and stuff. So it was very easy to try one new thing in Python, which would have been very hard, and Fortran and because big win. So anyway, I think the debate about performance, developer speed versus execution speed, but also straight up execution speed. I think it's really interesting in Python, and it's, it's hard to be nuanced enough. It's always there some little interesting wrinkle like this.

00:12:40 Yeah. And if you're really, you're going to encode everything anyway, it's also faster in assembly, so just write assembly.

00:12:49 There's a downside. Yeah.

00:12:52 I've always wanted to stick to this one processor I really loved forever.

00:12:57 But it's this is interesting. I like it. But it's sort of reads like a commercial. So Bob was programming scientific computing. And he was not happy in Fortran. Bob tried Python, and now he's happy.

00:13:12 Well, I think Bob unwillingly tried Python. And eventually he was happy. Like, it sounded like he didn't want it. He was dragged through. Yeah, I know. It does read a bit like that. But I think it's an interesting story. That what do you think you've had you've a bit of a historical perspective on all this?

00:13:26 Yeah. I didn't didn't go to school for chemistry. But I bet Fortran is not popular among chemistry students. Is

00:13:31 it now? Not anymore? Sure.

00:13:35 I did a little benchmark. The other day, I was trying to just see how, how fast some eff storage was on AWS versus EBS. And so I wrote a Python script to do that, and wrote 10 million records out. And I thought, well, maybe Python is going to be slow. So I thought I'll just whip up a quick thing in Rust here. And as it turned out, Python was 10 times faster at that, too, on the same exact hardware. And I'm not sure why that was. I may not have done something that was optimal for rust, but there it is. 10 times

00:14:07 faster. Now. That's super interesting. I've seen Python just rip across like OH S type, stuff like that. It's pretty good. All right. Well, what's your first item? Pat, are we off to the metaverse? Or is the metaverse off to us?

00:14:18 I stumbled across this the other day. We we've you've had Lucas longer on the show the the programmer in residence and it looks like they're gonna get another year due to a donation from a meta of $300,000 to the Python Software Foundation. And it was

00:14:37 SMAP is fantastic. That's, that's a really big deal.

00:14:41 And Python is very important to meta Facebook's parent company now, um, because much of their infrastructure is built on it pytorch In particular, they use it a lot. So their internal implementation of Python has come Old Cinder, apparently, which I think I've seen mentioned a few times. But they would like to see continued development, and they're going to fund it, which is awesome.

00:15:08 Yeah, that's really neat. I think Cinder is a fantastic thing they've created. And it's, it's interesting, it's open source in the sense of like, maybe the better term would be source open. Like, here, we're gonna put this out here. We don't expect any contributions. And we don't, we don't want to put it out there as like a project to grow on its own. But we think it might inspire people. So here's the source. But what they have contained in there is amazing. There's just so many optimizations and different things. I think they might even have that value type thing I discussed in there. I can't remember. But yeah, that's a really cool project that they're working on. So this is great. You know, I think lukesh Langa has gone sort of full circle, right? He was independent, that he is at Instagram for a while, which is, you know, part of meta, and then left to sort of do his own thing and found his way to this developer in residence. And now meta is sending money so that he stays there. That's like an interesting circle, I think.

00:16:06 Yeah, that's good. i It's so it seems tenuous, though, that we have, like one year at a time that we don't die. Now, we don't know if we're going to have a developer and residence lawyer than another year. It's like a postdoc.

00:16:17 Hopefully, it's a game and tagless, the Microsoft coming next or something?

00:16:21 Yeah, exactly. That'd be great. And I think there are a couple of organizations doing that. So I know that there was a talk about having multiple folks sort of participating in that group, which would be great, because I know there's way more work than Lucas can do on himself. He's quite busy. Navarro in the audience has a fine name. proposal here, the PSF developer and residents should be called the PSF, Dunder underscore, underscore, dir underscore underscore, I hear why am opening up PEP well down. Just kidding. Gotta give him more work for something silly like that. But that's pretty awesome. The PSF Dunder Dunder. Cool. Well, thank you, Pat. Now, before we move on to the next item, let me tell you all about our sponsor today. And like I said, I'm really excited about this. I'm actually doing a bunch of work on some git presentations. And so I'm just trying to think about what's the workflow with Git, and how can we work better, especially doing team type stuff. So merge, FYI, is a service that will help you and especially your team be way better with Git. So it's an amazing tool to make you and your team be more productive with GitHub in particular, it's all about leveling up all requests. So some of the features of their platform that you hook into your repositories are automatic merges. So you can set up conditions for an automatic merge and merge a file will take care of merging the PR as soon as it's ready and passes all the details. There's automatic updates. So if you have multiple pull requests, it'll merge the pull requests serially on top of each other. So there's no way to introduce a regression. There's also merge queues. So if you've got like a long CI process, and things are slow, or you've got lots of code, you can set up priorities and have the most important ones merge fix, like bug requests or bug fixes, especially if they're security fixes, they go right here right to the front, those now, that's awesome. They also have something called backport. To merge, if I will copy the pull request to other branches once it's merged if you set that up, so that you can ship bug fixes to multiple branches, feature branches and whatnot, automatically, or even older versions, right version one of your app versus you know, to do whatever have those automatically merge those bug requests, bug fixes in super cool. So merge, if it does all these things automatically, they would otherwise have to do manually. So you save time, you you and your team will focus on projects that matter. The most modify is coordinated with any CI and it's fully integrated into get up. They also have a startup program that can give your company up to $21,000 of credits. So if you're doing a startup, and you want to use them to help grow, and reach out to them for sure, do that by going to Python bisetta FM slash modify, sign up for a demo and get started. The link is at the top of your podcast player show notes. So just click it. Thanks to modify for supporting our show. Very cool project. Yeah, I Brian, what's the next one? Well, we were

00:19:20 talking about data science a little bit and people using Python for data science. But one of the things that people use when they're doing data science, plus other stuff and DevOps and whatever, is a dashboards, dashboards in Python. That's one of the powerful reasons to use it. And there's so there was a, there's a couple things I wanted to discuss around dashboards. Both of them come via suggestions from Mark scope Madson. So thanks Mark. First is the easiest way to create interactive dashboards in Python. Obviously, it's their opinion, but it does look pretty easy is to use a HV plot dot interactive. So this is an article Oh, that talks about how to do this. And it really looks nice this, this, this panel looks pretty good. You know? Yeah, that's great pulling data out, you got dark and light. And you've got the the controls on your

00:20:12 sliders. Yeah. Okay.

00:20:15 So this is, uh, this is just using some pre canned data, but you can use obviously your own data. But the the article is pretty short. And one of the things I love about it, of course, is it's got a animated GIF to show you exactly what you're getting into. And then also a video. So the, one of the authors, Sophia just reads the like pretty much goes through the article and talks about it and shows the demo of everything. So that's nice. It's only like six minutes. I was watching it this morning. So really cool, if you want to try in, so he plot is part of the whole of his family of tools. So a lot of people are already using that. Or if you're not check that out. Cool stuff. Yeah,

00:20:58 it looks great. The other, I always want to have good use cases for this. And I just I don't find myself doing lots of dashboards and stuff. But every time I see them, like, well, what can I build a dashboard for that would be great to have this will.

00:21:10 So I have some use cases for dashboards, but I don't really don't want to spend a lot of time on it. And I think even though this is like six minute video of how to get through it through it, I think that probably I'd have to set aside maybe a half day to figure out something to make get it usable. But it does show that once you understand what you're doing, you can do with you can throw together dashboards pretty quickly and, and be able to, well, one of the we didn't see in the demo, one of the dashboard items was in the controls is like let's say you've got a whole bunch of columns or, or some different elements in the in a column in a row that you are in a column that you want to filter out. So there's ways to filter your data so that you're looking at different stuff. And I was like, I have an exact use case for this. So I'm pretty excited. The other. The other thing around plots is maybe HP plot or dashboards is maybe HP plot isn't the right thing for you. Well, we've got another thing is the PI Data global 2021 There's a video stream up on YouTube called the Python dashboarding shootout in showdown. And so this is different, a whole bunch of different presenters talking about building dashboards in Python using either dash or panel or Viola, or ao or streamlet. So watch different people do it. So if you want to watch some do use something other than HP plot this, watch this video. One of the things I love about this as if you're only used looking forward to one of them, as one of the commenters on this video put up hyperlinks to each of the different sections. So you can just hop right to the video part that you want to watch. Yeah,

00:22:50 that's great. So let's see it I love these dashboards is definitely one of their powers. I do anything with them. Sorry, Bryce

00:22:57 are some some pre built dashboards to monitor the Eks cluster in Grafana, and elastic. But this is another option, it'd be good to do something ad hoc, to get a quick and dirty maybe like a quick one out

00:23:13 to Brian D just like grab a panda's data frame and then make it interactive?

00:23:19 Not quite, but it's almost I mean, this this this is built to go really closely with Panda's data for him. So the the code is, you know, you're doing some some filtering some pipeline processing like group bys. And, and selecting indices in what index you're gonna use. And then, yeah, it's pretty much interactive at that point. But the some of the code around us is building the widgets for the controls.

00:23:46 You got to define the UI and how people interact with it. God, yeah,

00:23:49 it's not it's but it's pretty easy. I can't manage. I mean, it's not obvious, because so you have to, it's good to watch a tutorial or something. But it's also not difficult. And then putting it together. Yeah. So most of the code in here is not the interactive plot, because that's that's kind of already happens. But it's the widget widgets. Back. Cool.

00:24:10 Thanks. All right. I think you all will be excited about this. I think this is quite a neat project. Now, let's see, this was sent over by Dave Chevelle, or actually is posted over and is by Dave Chevelle, too. I don't know, Brian, do you ever use entry points in Python packages, you know, you can set up pip install a package. And then if you have that Python active, then you can just type a CLI command. That is one of the entry points there. I'm talking about, Yeah, do that all the time. That's great. But there is some overhead to set it up. Right? I've got to install it as a package and whatnot. This project called Source pi allows you to basically turn any function into a CLI command, straight CLI command in one line. So let me show you talking about and it doesn't involve packages and installing or anything like that. So imagine you've Got some file here. And it's got a function just a def function, pi grep is the example here. And it has a pattern, which is actually a regular expression pattern note, the typing has grep data with, which is a list of text inputs. So could be a string or something. But it could also be like something piped or standard in or something along those lines, right? So if I have this script that just does that work with those that type assigned data, and I have eyesore source pie installed, I can say source this file here. And what it will do is it'll actually add up the, it'll expose those functions like pipe, grep, and so on. So then I could just type by grep. Now tell me how it works. And somewhere in here was the example running it out right here? I think it is. So what you can do is you can just run pipe grep against now as a function, right as a CLI function. So it has all sorts of pool features. For example, it has this type handling. So type hints that we talked about, can be used to coerce inputs off the command line into like integers and patterns and IO streams for like files and standard in and such. Let's see, it just takes basically any function like this and turns it into something you run on the shell. And then you can also go down. And you can do like I believe there's some sort of class based way to work with it, and so on. But yeah, this is pretty neat. What do you think?

00:26:26 I guess I'm confused at how it works with the normal source command.

00:26:30 But that is a good like, how does it not break? Normal sort? Yeah, that's a good question. It is a good question. Like it doesn't replace it for a while you've got it installed, or does it extend it somehow? Yeah, I don't know. I haven't looked at it enough to understand how it either coordinates or overrides. Sorry. No, it's a great question. Yeah, I haven't played with it. But it's, it's really important. You would want to know, because you want to break your your regular source step. I'm sure you could alias it if for some reason it conflicted. But I don't know. I think I was.

00:27:05 So I think this would be really helpful for aside from that, if, if that's all working great. Then aside from that, I think it's a very useful way to have like, a handful of little tools for for a project to be able to use that. If you're trying to share it with other people, I think packaging it the right way to have entry points is probably the right way to go.

00:27:26 Yeah, yeah, you want to do a more formal like a pip X style. But this feels way more ad hoc, right, like Pat was talking about his little script that he built a test, some stuff could run this, and then just call those functions as if they were built into bash, or C shell or whatever. Definitely also also worth pointing out it has built in native async support. So if you have async functions, and you source it, then you can just call, call it as if it was a regular Command Line command. And it's, it's still just takes it and runs. And Kim Fenwick, who's been a co host here before, has a clever thisis I suspect it wraps the normal source command and hands it over to the normal source if it is in Python. Good idea. Probably. Yeah, probably. Although, like I said, I haven't really looked at the mechanism there. But this looks like a cool project. It's got all sorts of supported types, like JSON unions and Date Time objects and all kinds of stuff. So check it out. If you do a bunch of kind of ad hoc stuff with Python on the command prompt terminal, how's it strike you, I know that this might touch some of the things you're doing in your world.

00:28:30 Right now. Just yesterday, one of the guys was contacting me because he needed to go and cycle through a list of addresses to to hit an API and this, this could be something you'd use, like that consume this file and hit the API with each example. And away we go.

00:28:47 Yeah, absolutely. Yeah, this looks great for putting in little making those little scripts, even with Python, like literally scripts. I know a lot of people call everything Python scripts. But this is really for those types of files script. Yeah, a single file thing, not like a 20,000 line flask app. Right, that thing starts to stretch the terms of what script might mean, but this is exactly for those things. Yeah. All right. What's your final one pet?

00:29:12 least this is similar to what you just covered. Actually, you've talked I think a little bit about it before conch shell combines the best of bash shell and Python and the Linux terminal terminal. I ran across. This

00:29:23 is way more than what I covered. This is like another low here.

00:29:27 It takes it to another level. Yeah, I ran across the dawn. It's Foss, which is a nice site for open source type things. In a nutshell, what what it does is provide you with a new shell, where as they demonstrate here, you can use straight Python. You can import JSON, for example, and define a variable or a table, print, print that out and format it the length function here, but you can also then mixing in regular bash functions, where we, for example, here at curls from a website, the result comes back. And the length function tells you the length of that curl.

00:30:11 Oh, how interesting. And what are their little bit like, almost like a ginger Django template. But in your terminal, right, you put a little dollar to say, here's a bit of code to run on the shell, you know, shelter out here,

00:30:26 the one famous statement they have is, you know, I always forget how to do a for loop in in bash. But in Python, it's pretty easy. And they have kind of a rule that it evaluates to Python first, it officially evaluates to Python and executes as Python. If it doesn't, then more or less executes as bash. And I do have a link, we could we could put in the show notes to to a video demonstration from from their homepage. And the guy does a spectacular home demonstration with autocompletes. And, and they have what they call contributions. And that also begins with an exe. So it's like a plugin or an add on, but it's a contribution. And it is get aware. And it is a virtual environment aware. It sounds like a killer environment. But it would take some getting used to I have a lot of muscle memory to overcome to take full advantage. I think

00:31:27 it's cool. Brian, have you played with this?

00:31:29 You know, I tried to play with it a couple of years ago, but I but now I haven't. But I do want to. And I think one of the things, I didn't give it a fair shake, I think it would be good to just say, for a week, maybe I'm going to try to just use this instead of pulling up my normal terminal just to see if I can get used to it. That's

00:31:47 the thing. I think you have to immerse yourself probably. And it is about five years old. I think it's fairly mature.

00:31:52 Yeah, and yet, also, the less I write bash scripts, the more I wish that I bash scripts were more like Python scripts. So

00:32:02 now they are in there. Yeah, this is great. A good find. And it's something I've also wanted to play with but haven't. Nice. Brian, you got any extra Do you want to share with people?

00:32:13 I don't this week?

00:32:15 I thought I didn't. But then I did. I just wanted to do a quick follow up. Okay. I was just thinking about a couple episodes ago, where we talked about the March Madness package tournament that Chris May had sent in. And I was thinking, you know, it's probably done now, isn't it? Let's see who won. Because I think we were at the point where we were at the Elite Eight, or we, or I believe we were at the Elite Eight. So we had a showdown between NumPy and PyPI. NumPy crushed it. We had a showdown between pandas in requests, and has crushed it. And it was an all data science finale. And NumPy and pandas with the head, went head to head and it was pandas 55%. Taking the winter. So I just wanted to do a quick follow up on that very important news. We have a champion.

00:33:00 It's good, but try using Pandas without NumPy that'd be tough. I was bad. Do

00:33:07 you have anything else you want to get a give a shout out to

00:33:10 I do have one extra column. Okay, quick, like, oh, it's easy to bash Microsoft. But they've been involved in they bought GitHub, the have lots of our Python core developers working for them. And they have this rewards program. And they want you to use Bing search, obviously. But what you can do is choose a charity to get points to, you can also get like a $5 gift certificate to AWS or Amazon or something for yourself if you'd rather. And everyday, you just kind of click on these little links and, and I just got five points or 10 points. And oh, now we got to do a quiz. I'll come back to that later. And, and as you do this, you accumulate more points each today. And those points then can go to your charity, and I did the Red Cross for a while. And I did the CDC during our lockdown year there. And you can also donate to the Python Software Foundation. So that sound that's cool, so we can all contribute.

00:34:10 So if you're Googling stuff with being set up the rewards, with the vague set of rewards to go to the PSF you might as well right, that's, that's fantastic. Awesome. Well, thanks. That's a good one. I got a joke for you all here. And I know Brian, you do as well, but I feel like this one, I better take this one because I don't feel you're in a position to to make an unbiased decision here because it's so close to your heart. Okay. All right. Okay, so this one is over on the Reddit programming humor one, and it poses a question, what seems like a straightforward question for a piece of software. How do you exit Vim? And it types it are some you know, couple interesting options here you get colon exit seven burns center the people think you typed colon exit, they're wrong. You type a colon wq, which I guess if you want to make changes, cool, save your changes and exit you could do most people got that one. And then you could do colon quit 7%. Again, you could click the Close button hard for non UI app, but or almost 20% of the people said, You know what, the way you restart Vim, this horrible thing, I can't get out of it. I'm gonna restart the computer. I'm traveling, I just gotta get out. I tried command Z, or Control Z, and it just background it and now what's it doing? It keeps coming back. And

00:35:34 I think people clicked restart the computer to be funny. I

00:35:38 know they did. I thought and I pulled it up as a joke to be funny as well. But no, there you go.

00:35:45 I don't know the Close button works for me. i

00:35:50 Well, it closes the terminal, right? Yeah. Yeah.

00:35:53 So I mean, who doesn't?

00:35:55 You got to say, Do you want to terminate the running program? Right, it gives you like a warning that you're doing it wrong.

00:36:06 Not hard. And actually, I haven't I don't use straight Vim, except for on the command line. You're right. I guess I do that on the command line. But I do essentially use Vim within PI charm or VS code as well. But yeah, that made me elation. Yeah. Okay, it's fine. So I, I wanted to share a joke also, because I just thought this was so funny. I could stop laughing this morning. So ran across this tweet by mediocre superheroes. It's a little cartoon thing. So. So the guy you know, finds a genie. Genie says three wishes. Hey, can I wish for more wishes? Not with me? No. Fine. I wish you couldn't count. The genie done how many wishes? Do you have left? A billion? That sounds right. I love it. Anyway,

00:36:58 voice around an old joke.

00:37:02 So that's great. Anyway, oh, quick. Bit of audience feedback as well. Henry Shriner says, restart the computer. Isn't that how you get out of email? Also true? Yeah. Yeah, what key cord do I hit to get out of that one?

00:37:20 Fantastic. It's probably control something.

00:37:22 Yeah, I bet involves a Ctrl K something somehow. Anyway, thanks for everything. Brian. Thanks for being here. Thanks for the jokes and pen. It was great. You could join us. Yeah. Thanks, Brett.

00:37:32 Thanks for having me on,

00:37:33 guys. Bye, everybody. Bye, everyone.

