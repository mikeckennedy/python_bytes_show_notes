
00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.000 --> 00:00:09.900
This is episode 296, recorded August 9th, 2022.


00:00:09.900 --> 00:00:11.000
I'm Michael Kennedy.


00:00:11.000 --> 00:00:12.300
And I'm Brian Okken.


00:00:12.300 --> 00:00:14.100
Hey Brian. We have a new sponsor.


00:00:14.100 --> 00:00:19.100
I just want to say thank you to Mozilla and the IRL podcast for sponsoring the show.


00:00:19.100 --> 00:00:22.100
Check them out at pythonbytes.fm/irl.


00:00:22.100 --> 00:00:23.200
More on that later.


00:00:23.200 --> 00:00:25.800
For now, I want to hear what you've discovered to share with us.


00:00:25.800 --> 00:00:27.700
Can you constrain your excitement?


00:00:27.700 --> 00:00:31.940
>> Yeah. I want to talk about pip constraints.


00:00:31.940 --> 00:00:35.200
I think I knew about pip constraints,


00:00:35.200 --> 00:00:36.660
but I forgot about them.


00:00:36.660 --> 00:00:40.700
But there's an article called pip Constraints Files


00:00:40.700 --> 00:00:44.220
by somebody named Luminousman.


00:00:44.220 --> 00:00:50.140
They're neat. I was just using


00:00:50.140 --> 00:00:56.540
PIP requirements.in file recently in a course that I'm taking.


00:00:56.540 --> 00:01:00.060
And I like using requirements.in


00:01:00.060 --> 00:01:02.780
to generate my requirements.txt file.


00:01:02.780 --> 00:01:06.980
But there's, and then there's, yeah, anyway,


00:01:06.980 --> 00:01:09.300
that uses pip tools, so you have to get pip tools.


00:01:09.300 --> 00:01:11.620
But, so there's that, and then there's also pinning.


00:01:11.620 --> 00:01:14.740
So especially with applications,


00:01:14.740 --> 00:01:16.060
we see it more in applications,


00:01:16.060 --> 00:01:19.940
less in libraries of pinning the application.


00:01:19.940 --> 00:01:21.580
But you can, even in libraries,


00:01:21.580 --> 00:01:25.980
there's regularly sort of constraints around stuff


00:01:25.980 --> 00:01:30.180
to say, hey, for this library, I need this range of versions,


00:01:30.180 --> 00:01:32.420
or it has to be greater than this or something,


00:01:32.420 --> 00:01:33.260
because I'm depending.


00:01:33.260 --> 00:01:33.940
And that's fine.


00:01:33.940 --> 00:01:39.340
But this is a way to say not what libraries I want to use,


00:01:39.340 --> 00:01:43.620
but if I use a library, which version?


00:01:43.620 --> 00:01:45.820
Or constraint on the version without saying


00:01:45.820 --> 00:01:47.220
I want the library.


00:01:47.220 --> 00:01:50.220
And actually, in the pip documentation,


00:01:50.220 --> 00:01:53.900
it says constraint files are requirement files that only


00:01:53.900 --> 00:01:57.020
control which version, not whether or not it's installed.


00:01:57.020 --> 00:01:58.580
So how would you use this?


00:01:58.580 --> 00:02:03.100
So this article talks about it and it basically says,


00:02:03.100 --> 00:02:07.980
you use it normally pip install requirements.txt,


00:02:07.980 --> 00:02:09.480
but you might have,


00:02:09.480 --> 00:02:12.060
if you do a freeze for instance or something,


00:02:12.060 --> 00:02:13.060
or you just pin everything,


00:02:13.060 --> 00:02:14.620
you might have all of the versions.


00:02:14.620 --> 00:02:19.060
But you might only want constraints on one of them.


00:02:19.060 --> 00:02:22.560
Say, let's say you're including pandas,


00:02:22.560 --> 00:02:24.640
but you want a certain version of pandas


00:02:24.640 --> 00:02:27.520
or you want a certain version of NumPy


00:02:27.520 --> 00:02:29.800
even though pandas requires NumPy or something like that.


00:02:29.800 --> 00:02:32.720
You can have a constraints file that lists,


00:02:32.720 --> 00:02:35.400
this just looks like a pip freeze file,


00:02:35.400 --> 00:02:38.880
but you can put like less than or less than equal


00:02:38.880 --> 00:02:41.320
if you want, and you don't have to have everything.


00:02:41.320 --> 00:02:43.480
So you could just pin one of the things.


00:02:43.480 --> 00:02:46.240
And that way, like let's say you were doing pandas


00:02:46.240 --> 00:02:47.800
and you wanted to constrain NumPy


00:02:47.800 --> 00:02:49.480
to be a certain version of NumPy.


00:02:49.480 --> 00:02:51.960
You can do that with a constraints file


00:02:51.960 --> 00:02:54.640
and not have to specify everything,


00:02:54.640 --> 00:02:55.800
just have it be separate.


00:02:55.800 --> 00:02:59.920
And the article talks about actually just sticking


00:02:59.920 --> 00:03:02.960
the constraints, specifying your constraint file


00:03:02.960 --> 00:03:04.640
within the requirements file,


00:03:04.640 --> 00:03:05.760
and that way they're separate.


00:03:05.760 --> 00:03:07.280
And I was thinking about that,


00:03:07.280 --> 00:03:09.400
and that's an interesting thing to say,


00:03:09.400 --> 00:03:12.520
the dependencies of my application don't change,


00:03:12.520 --> 00:03:15.380
but the constraints might because of testing or whatever.


00:03:15.380 --> 00:03:18.520
And this separating of these two files would help with,


00:03:18.520 --> 00:03:20.800
like, you know, when you have the two files


00:03:20.800 --> 00:03:23.920
version control, you've changed your constraints, but you haven't changed


00:03:23.920 --> 00:03:27.240
really what you're depending on just the versions of those. So it's kind of a


00:03:27.240 --> 00:03:29.240
neat to have that separate possibility.


00:03:29.240 --> 00:03:32.920
>>Yeah, so for people who are listening, literally the first line of the


00:03:32.920 --> 00:03:38.360
requirements.txt file is --constraint constraints.txt, which I'd never


00:03:38.360 --> 00:03:39.800
considered doing that. That's interesting.


00:03:39.800 --> 00:03:43.800
>>And then one of the things I thought is, but I'm not, and this works if you're


00:03:43.800 --> 00:03:48.240
handwriting your requirements file, but what if you're not? What if you're


00:03:48.240 --> 00:03:52.160
using requirements.in instead.


00:03:52.160 --> 00:03:53.980
This article doesn't go into it,


00:03:53.980 --> 00:03:56.240
but I tried just instead of putting


00:03:56.240 --> 00:04:01.160
that constraint thing in a requirements.txt file,


00:04:01.160 --> 00:04:05.560
putting it in a requirements.in and using pip compile to generate it.


00:04:05.560 --> 00:04:09.800
The pip compile seems to also watch the look at this.


00:04:09.800 --> 00:04:13.180
This constraint works for pip compile as well.


00:04:13.180 --> 00:04:14.720
>> Okay. That's cool.


00:04:14.720 --> 00:04:18.500
>> Yeah. A neat thing to check out.


00:04:18.500 --> 00:04:21.720
The usage of it's pretty easy.


00:04:21.720 --> 00:04:24.560
Pinning your requirements is good,


00:04:24.560 --> 00:04:26.020
but don't pin them too tight,


00:04:26.020 --> 00:04:30.880
especially for libraries and then for applications.


00:04:30.880 --> 00:04:33.640
I like this because there's a lot of times


00:04:33.640 --> 00:04:36.200
where I know there's a bug in something,


00:04:36.200 --> 00:04:37.640
or I've heard about it,


00:04:37.640 --> 00:04:39.940
or I haven't gotten around to fixing


00:04:39.940 --> 00:04:42.240
my code to deal with the new version yet,


00:04:42.240 --> 00:04:43.280
so I'm going to pin something.


00:04:43.280 --> 00:04:45.480
I don't necessarily need to pin everything,


00:04:45.480 --> 00:04:47.740
I just need to pin certain parts of it.


00:04:47.740 --> 00:04:50.340
>> I like this.


00:04:50.340 --> 00:04:52.580
Just also a little bit of a sidebar with


00:04:52.580 --> 00:04:54.940
the pip compile from pip tools.


00:04:54.940 --> 00:04:58.340
You give it the in file and it generates the TXT file and it


00:04:58.340 --> 00:05:00.860
basically obliterates the TXT file,


00:05:00.860 --> 00:05:02.460
whatever is there previously.


00:05:02.460 --> 00:05:02.860
>> Yeah.


00:05:02.860 --> 00:05:03.940
>> That can be a hassle,


00:05:03.940 --> 00:05:07.820
especially if you want to have a requirements.dev,


00:05:07.820 --> 00:05:10.140
and then a production requirements.


00:05:10.140 --> 00:05:12.380
If you install the dev one,


00:05:12.380 --> 00:05:16.220
you want to also pick up like a -r on the main ones.


00:05:16.220 --> 00:05:17.500
And the pip-tools blows that away.


00:05:17.500 --> 00:05:20.300
So what I ended up doing a lot for my workflows


00:05:20.300 --> 00:05:24.060
is having pip-tools generate some base TXT file


00:05:24.060 --> 00:05:26.340
and then having like requirements.txt


00:05:26.340 --> 00:05:29.300
just have a -r requirements production.


00:05:29.300 --> 00:05:33.180
And then the dev have -r requirements.txt,


00:05:33.180 --> 00:05:36.180
you know, prod, like sort of like put those commands


00:05:36.180 --> 00:05:37.380
just in real simple


00:05:37.380 --> 00:05:39.420
and have it actually generate a separate file.


00:05:39.420 --> 00:05:40.860
So it kind of makes it a little bit messy,


00:05:40.860 --> 00:05:42.580
but it gives you lots of flexibility.


00:05:42.580 --> 00:05:45.460
>> Cool. Yeah. I like to see that written up. That's neat.


00:05:45.460 --> 00:05:47.680
>> Yeah. Maybe I should actually blog


00:05:47.680 --> 00:05:49.540
something in the last three years.


00:05:49.540 --> 00:05:50.780
>> Blog.


00:05:50.780 --> 00:05:52.780
>> Yeah. What is that? Is that with words?


00:05:52.780 --> 00:05:54.200
Written words, not spoken words.


00:05:54.200 --> 00:05:55.580
Pamphlet on the audience says,


00:05:55.580 --> 00:05:57.420
"Does it take over requirements like if


00:05:57.420 --> 00:06:01.800
pip would resolve NumPy to 1.19 and you say at 120?"


00:06:01.800 --> 00:06:03.260
It sounds to me like it does,


00:06:03.260 --> 00:06:04.420
but what do you think, Brian?


00:06:04.420 --> 00:06:07.740
>> Well, I tried it with Typer.


00:06:07.740 --> 00:06:11.660
So I know Typer pulls in click, for instance,


00:06:11.660 --> 00:06:13.980
and they're both command line things.


00:06:13.980 --> 00:06:16.780
And so then I said, okay, well,


00:06:16.780 --> 00:06:20.500
Typer has a broad range of click things that it can do.


00:06:20.500 --> 00:06:24.260
And if I constrain click to be a lower number, will it work?


00:06:24.260 --> 00:06:26.080
And I blew everything away and tried it again.


00:06:26.080 --> 00:06:28.220
And sure enough, it did.


00:06:28.220 --> 00:06:31.380
It like add those extra constraints on top of even,


00:06:31.380 --> 00:06:34.440
like, so I was only declaring Typer,


00:06:34.440 --> 00:06:35.980
but Typer was specifying click,


00:06:35.980 --> 00:06:38.500
and I could specify which version of Click I wanted.


00:06:38.500 --> 00:06:39.760
>> Yeah, this is cool.


00:06:39.760 --> 00:06:43.120
>> Yeah. I guess adding


00:06:43.120 --> 00:06:47.360
one more complexity to your packaging workflow.


00:06:47.360 --> 00:06:48.360
>> Exactly.


00:06:48.360 --> 00:06:49.100
>> But useful if you need it.


00:06:49.100 --> 00:06:49.760
>> Flexibility.


00:06:49.760 --> 00:06:50.560
>> Yeah, flexibility.


00:06:50.560 --> 00:06:51.980
>> Good flexibility. All right.


00:06:51.980 --> 00:06:54.900
Well, I'll cover something simple, async caching.


00:06:54.900 --> 00:06:56.560
>> Simple.


00:06:56.560 --> 00:06:59.040
>> It is simple in a sense.


00:06:59.040 --> 00:06:59.560
>> Okay.


00:06:59.560 --> 00:07:03.200
>> We have some nice stuff built into Python,


00:07:03.200 --> 00:07:08.900
like async, sorry, with like funk tools and the LRU cache and whatnot.


00:07:08.900 --> 00:07:11.040
But from what I understand,


00:07:11.040 --> 00:07:13.680
those are synchronous only.


00:07:13.680 --> 00:07:15.020
Basically, their decorators,


00:07:15.020 --> 00:07:20.080
those decorators wrap functions and the decorators themselves are synchronous.


00:07:20.080 --> 00:07:23.600
So it only makes sense for them to wrap sync functions.


00:07:23.600 --> 00:07:24.280
>> Okay.


00:07:24.280 --> 00:07:26.320
>> So if you have an async function,


00:07:26.320 --> 00:07:29.800
but you want to do the LRU cache where you just put the decorator LRU cache,


00:07:29.800 --> 00:07:32.960
and then if it gets called with the same arguments, again,


00:07:32.960 --> 00:07:34.960
it doesn't even call the function, it just goes,


00:07:34.960 --> 00:07:36.260
"You know what? You've already called it with that.


00:07:36.260 --> 00:07:36.960
Here's the answer."


00:07:36.960 --> 00:07:38.760
So, like if you're in a tight loop


00:07:38.760 --> 00:07:40.460
and you're pulling in some values


00:07:40.460 --> 00:07:42.960
and you've got to compute something with it through a function,


00:07:42.960 --> 00:07:46.260
but there's a good chance of repeat of those values,


00:07:46.260 --> 00:07:47.860
you can put an LRU cache in.


00:07:47.860 --> 00:07:49.660
As long as that's pretty deterministic


00:07:49.660 --> 00:07:51.860
and you call it again, you expect the same output,


00:07:51.860 --> 00:07:54.660
you can make it fly by just adding one of those caches on it, right?


00:07:54.660 --> 00:07:56.860
So, short version of this is,


00:07:56.860 --> 00:08:00.760
this is the same idea, but for async functions.


00:08:00.760 --> 00:08:03.020
So I can have some function I want to call,


00:08:03.020 --> 00:08:05.260
and I just say @lrucache,


00:08:05.260 --> 00:08:08.880
and this way you give it a maximum size of results


00:08:08.880 --> 00:08:11.520
that it's willing, you know, inputs and matched up results


00:08:11.520 --> 00:08:12.800
it's willing to cache up.


00:08:12.800 --> 00:08:15.200
And then if you call it with the same arguments,


00:08:15.200 --> 00:08:17.240
it'll give the same response back.


00:08:17.240 --> 00:08:18.200
So that's pretty cool.


00:08:18.200 --> 00:08:21.000
That's the last used version.


00:08:21.000 --> 00:08:22.840
And then you also have time to live,


00:08:22.840 --> 00:08:25.560
a time to live, an async TTL.


00:08:25.560 --> 00:08:27.280
So you can say any results,


00:08:27.280 --> 00:08:29.840
I don't care how many I've used,


00:08:29.840 --> 00:08:32.560
but just within the last 60 seconds.


00:08:32.560 --> 00:08:34.720
And one thing that's really, really nice about that


00:08:34.720 --> 00:08:36.600
is it will expire results.


00:08:36.600 --> 00:08:38.200
So maybe you're calling an API


00:08:38.200 --> 00:08:39.720
and you want to do rate limiting,


00:08:39.720 --> 00:08:43.560
but you only want to call it maybe once a minute.


00:08:43.560 --> 00:08:45.100
That'll both make your code faster,


00:08:45.100 --> 00:08:48.040
but also not overrun your rate limiting


00:08:48.040 --> 00:08:50.800
that you might have with your API key and so on.


00:08:50.800 --> 00:08:52.840
So here's a real simple way to add rate limiting.


00:08:52.840 --> 00:08:54.280
It's just a time to live.


00:08:54.280 --> 00:08:56.300
I guess you got to have the same input arguments,


00:08:56.300 --> 00:08:58.880
but assuming that you have the same arguments,


00:08:58.880 --> 00:08:59.960
That's one way to do it.


00:08:59.960 --> 00:09:02.480
You can also specify the max size, which is pretty cool.


00:09:02.480 --> 00:09:05.040
>> Yeah, or if you're grabbing something off of a service,


00:09:05.040 --> 00:09:08.360
like what's the temperature out?


00:09:08.360 --> 00:09:11.160
I don't really care if it fluctuates every second,


00:09:11.160 --> 00:09:13.880
but every minute I might check it.


00:09:13.880 --> 00:09:15.920
>> Yeah, precisely.


00:09:15.920 --> 00:09:17.800
>> I don't, there's not a TTL.


00:09:17.800 --> 00:09:18.880
>> All those kind of things.


00:09:18.880 --> 00:09:22.760
>> So there's not a TTL on the normal LRU caches there?


00:09:22.760 --> 00:09:23.880
>> I don't believe so.


00:09:23.880 --> 00:09:26.160
>> Yeah. So that's actually cool.


00:09:26.160 --> 00:09:27.880
I like the time to live part.


00:09:27.880 --> 00:09:30.680
I do too. I like that. That really resonates with me.


00:09:30.680 --> 00:09:34.080
The other thing that's pretty cool here is you can pass


00:09:34.080 --> 00:09:37.080
ORM objects, you can pass request objects,


00:09:37.080 --> 00:09:39.280
you can pass custom classes.


00:09:39.280 --> 00:09:41.480
Even if the classes are not hashable,


00:09:41.480 --> 00:09:43.580
it will still go through and actually.


00:09:43.580 --> 00:09:45.780
So one of the problems you can run into is if you,


00:09:45.780 --> 00:09:50.180
say if you've got a customer object or a product object or something,


00:09:50.180 --> 00:09:52.380
you call it once, you've created this object,


00:09:52.380 --> 00:09:54.380
maybe you got it from the database and you say,


00:09:54.380 --> 00:09:57.580
call the function with the LRU hash and it says,


00:09:57.580 --> 00:09:58.860
well, what object is this?


00:09:58.860 --> 00:10:00.180
Have I seen it before?


00:10:00.180 --> 00:10:01.580
And maybe yes or no.


00:10:01.580 --> 00:10:03.340
And then you call it again.


00:10:03.340 --> 00:10:05.060
It might have the same effective value,


00:10:05.060 --> 00:10:07.580
but it's not actually the same object.


00:10:07.580 --> 00:10:09.280
But you might get it from the database again,


00:10:09.280 --> 00:10:11.940
so it has a different pointer, a different ID and so on.


00:10:11.940 --> 00:10:15.220
That, I'm not sure what the behavior there is,


00:10:15.220 --> 00:10:17.960
but this one will actually look and see,


00:10:17.960 --> 00:10:19.580
oh, is it actually a class?


00:10:19.580 --> 00:10:21.740
Well, then let's just get the dictionary


00:10:21.740 --> 00:10:23.900
and use the dictionary,


00:10:23.900 --> 00:10:25.780
the underlying field dictionary of the class


00:10:25.780 --> 00:10:29.380
to use as the match to see if I'm calling it again.


00:10:29.380 --> 00:10:32.180
So there's some really cool functionality here.


00:10:32.180 --> 00:10:35.100
Simple little class, but if you want to quickly add


00:10:35.100 --> 00:10:38.740
some performance boost async functions, you can add this.


00:10:38.740 --> 00:10:40.660
>> Nice. Okay. This is neat.


00:10:40.660 --> 00:10:41.100
>> Yeah.


00:10:41.100 --> 00:10:41.380
>> Yeah.


00:10:41.380 --> 00:10:42.300
>> That's fine.


00:10:42.300 --> 00:10:46.380
>> Yeah, thanks. Also, it's entirely possible.


00:10:46.380 --> 00:10:47.980
I don't think it does,


00:10:47.980 --> 00:10:50.700
but it's entirely possible to add async


00:10:50.700 --> 00:10:55.660
and synchronous support to a single decorator if you need to.


00:10:55.660 --> 00:10:59.140
For example, I have the, what was it called?


00:10:59.140 --> 00:11:01.860
The chameleon templates,


00:11:01.860 --> 00:11:04.780
fast API one that I created.


00:11:04.780 --> 00:11:06.580
Let's see, look at that.


00:11:06.580 --> 00:11:07.420
Number one result.


00:11:07.420 --> 00:11:08.660
What a search thing.


00:11:08.660 --> 00:11:13.460
So there's this fast API chameleon framework


00:11:13.460 --> 00:11:15.140
or library that I created that allows you


00:11:15.140 --> 00:11:17.460
to just do a decorator and say dot template


00:11:17.460 --> 00:11:20.820
and put a HTML template in the chameleon language


00:11:20.820 --> 00:11:23.140
on a fast API response.


00:11:23.140 --> 00:11:24.260
And it returns a dictionary


00:11:24.260 --> 00:11:26.760
and that just turns it into an HTML response.


00:11:26.760 --> 00:11:27.600
- Okay.


00:11:27.600 --> 00:11:29.980
- This one in FastAPI, you can both have synchronous


00:11:29.980 --> 00:11:31.480
and asynchronous functions.


00:11:31.480 --> 00:11:34.340
So this thing has to look and see if the inbound thing


00:11:34.340 --> 00:11:36.640
is a coroutine, an async coroutine,


00:11:36.640 --> 00:11:39.080
and it will dynamically generate the right wrapper,


00:11:39.080 --> 00:11:41.520
an async one or a synchronous one based on.


00:11:41.520 --> 00:11:42.440
So it's not super hard.


00:11:42.440 --> 00:11:46.400
It's also not super easy, but I did it, so it can be done.


00:11:46.400 --> 00:11:48.960
Cool, anyway, that's a little bit of a diversion.


00:11:48.960 --> 00:11:51.540
But this async cache versus a non-async cache,


00:11:51.540 --> 00:11:55.660
I feel like it could be one thing if it really, really wanted to be.


00:11:55.660 --> 00:11:58.300
But I feel like the person who created it probably is just like,


00:11:58.300 --> 00:12:00.300
"I need this for async methods. Let's go."


00:12:00.300 --> 00:12:05.020
>> Yeah. It's almost too bad that the normal URL or your cache doesn't just do that.


00:12:05.020 --> 00:12:08.260
>> Yeah. Maybe it's been updated too and I don't know.


00:12:08.260 --> 00:12:09.660
But I don't believe it does.


00:12:09.660 --> 00:12:11.380
>> I don't think so. Not currently.


00:12:11.380 --> 00:12:12.980
>> Yeah. Not that I know of.


00:12:12.980 --> 00:12:16.500
People can write us if we're wrong and we'll let people know next time.


00:12:16.500 --> 00:12:17.900
Be great to do it.


00:12:17.900 --> 00:12:19.300
>> I am never wrong.


00:12:19.300 --> 00:12:20.940
>> Okay. Sometimes.


00:12:20.940 --> 00:12:23.340
>> Because like I said, it's because it's a decorator,


00:12:23.340 --> 00:12:25.620
like you could make it start working that way.


00:12:25.620 --> 00:12:27.100
That's a good feature to add.


00:12:27.100 --> 00:12:27.820
>> Cool.


00:12:27.820 --> 00:12:29.540
>> Before we move on, Brian,


00:12:29.540 --> 00:12:32.900
let me tell you about AI in real life.


00:12:32.900 --> 00:12:33.420
>> Wow.


00:12:33.420 --> 00:12:35.820
>> Yeah. This week's sponsor,


00:12:35.820 --> 00:12:40.820
this episode of Python Bytes is brought to you by the IRL podcast,


00:12:40.820 --> 00:12:43.580
an original podcast from Mozilla.


00:12:43.580 --> 00:12:46.540
Thank you IRL and Mozilla for supporting the show.


00:12:46.540 --> 00:12:47.980
If you're like us,


00:12:47.980 --> 00:12:51.300
We care about the ideas behind technology and not just the tech itself.


00:12:51.300 --> 00:12:54.060
Obviously, we do a podcast on these things all the time,


00:12:54.060 --> 00:12:56.180
so we love talking about it, thinking about it.


00:12:56.180 --> 00:12:59.900
Everyone out there knows that tech has an enormous influence on society.


00:12:59.900 --> 00:13:02.580
Many of these effects are hugely beneficial.


00:13:02.580 --> 00:13:05.700
Just think about walking around with your cell phone,


00:13:05.700 --> 00:13:10.120
you have basically the entire sum of human knowledge just constantly with you.


00:13:10.120 --> 00:13:13.020
Other influences can have negative effects.


00:13:13.020 --> 00:13:15.980
I really appreciate that Mozilla is always looking out for and


00:13:15.980 --> 00:13:18.660
working to mitigate these types of negative influences


00:13:18.660 --> 00:13:20.140
tech has on all of us.


00:13:20.140 --> 00:13:21.820
So if these ideas resonate with you,


00:13:21.820 --> 00:13:24.100
you should definitely check out their podcast,


00:13:24.100 --> 00:13:26.060
IRL, the IRL podcast.


00:13:26.060 --> 00:13:27.740
It's hosted by Bridget Todd.


00:13:27.740 --> 00:13:31.700
And in this season, IRL looks at AI in real life.


00:13:31.700 --> 00:13:32.900
Who can AI help?


00:13:32.900 --> 00:13:33.860
Who can it harm?


00:13:33.860 --> 00:13:35.920
The show features fascinating conversations


00:13:35.920 --> 00:13:39.340
with people who are working to build more trustworthy AI.


00:13:39.340 --> 00:13:41.600
So just some of the examples of episodes.


00:13:41.600 --> 00:13:44.140
There's an episode about how our world is mapped,


00:13:44.140 --> 00:13:46.540
like Google Maps style map with AI.


00:13:46.540 --> 00:13:49.480
And what's really interesting is the data that's missing


00:13:49.480 --> 00:13:52.120
from those maps tells as much of the story


00:13:52.120 --> 00:13:53.360
as the data that's there.


00:13:53.360 --> 00:13:55.860
So also an episode about gig workers


00:13:55.860 --> 00:13:57.840
who depend on apps for their livelihood.


00:13:57.840 --> 00:14:00.120
And it looks at how they're pushing back against algorithms


00:14:00.120 --> 00:14:01.840
that control how much they get paid,


00:14:01.840 --> 00:14:05.160
seeking new ways to gain power and autonomy over data


00:14:05.160 --> 00:14:07.080
and creating better working conditions.


00:14:07.080 --> 00:14:08.960
And finally, for political junkies,


00:14:08.960 --> 00:14:11.160
there's an episode on the role that AI plays


00:14:11.160 --> 00:14:13.320
when it comes to the spread of disinformation


00:14:13.320 --> 00:14:17.440
around elections, a huge concern for democracies.


00:14:17.440 --> 00:14:19.200
You hear a lot about the US democracies,


00:14:19.200 --> 00:14:21.840
but more broadly, absolutely, across the world.


00:14:21.840 --> 00:14:24.160
And I just listened to the first episode,


00:14:24.160 --> 00:14:25.680
the tech that we won't build,


00:14:25.680 --> 00:14:28.040
which explores when developers and data scientists


00:14:28.040 --> 00:14:30.680
should consider saying no to projects that can be harmful


00:14:30.680 --> 00:14:33.000
or strongly against their beliefs,


00:14:33.000 --> 00:14:36.240
even though, sure, you could technically build them,


00:14:36.240 --> 00:14:38.460
just 'cause you can and should, should you?


00:14:38.460 --> 00:14:40.080
Anyway, if this sounds like an interesting show,


00:14:40.080 --> 00:14:41.160
try an episode for yourself.


00:14:41.160 --> 00:14:43.800
Just search for IRL in your podcast player


00:14:43.800 --> 00:14:46.360
or visit pythonbytes.fm/irl.


00:14:46.360 --> 00:14:47.880
Links in your podcast player show notes.


00:14:47.880 --> 00:14:51.480
And thank you to IRL and Mozilla for supporting our show.


00:14:51.480 --> 00:14:52.400
Thank you, Evan Strong.


00:14:52.400 --> 00:14:54.100
- Yes, thanks.


00:14:54.100 --> 00:14:58.440
So I wanna talk about organizing your code, Tim, actually.


00:14:58.440 --> 00:15:01.900
Organizing your Python code kind of structure,


00:15:01.900 --> 00:15:03.480
structuring projects and everything,


00:15:03.480 --> 00:15:05.220
but there's more than that.


00:15:05.220 --> 00:15:07.160
So I ran across this article called


00:15:07.160 --> 00:15:09.200
Organize Python Code Like a Pro.


00:15:09.200 --> 00:15:12.040
And yes, it's got a lot of great advice


00:15:12.040 --> 00:15:15.240
and it's opinionated by one person, of course,


00:15:15.240 --> 00:15:18.880
but I think it's for the most part, really good stuff.


00:15:18.880 --> 00:15:22.820
And also a couple of things that I don't normally see


00:15:22.820 --> 00:15:24.420
in these kinds of articles,


00:15:24.420 --> 00:15:25.640
and there's not too much weird stuff.


00:15:25.640 --> 00:15:29.720
So sometimes it's a little too opinionated,


00:15:29.720 --> 00:15:31.400
but this is obviously where you can see


00:15:31.400 --> 00:15:34.000
where some of the opinions are held.


00:15:34.000 --> 00:15:38.840
So take a look at, it talks about structuring your project.


00:15:38.840 --> 00:15:42.840
For instance, one of the first things is use a source directory, SRC.


00:15:42.840 --> 00:15:52.340
And so I try to do this, and I used to do it because there was an article about having your tests be seen.


00:15:52.340 --> 00:16:00.840
So basically, if I'm doing a pack installable package, I'd like to have my tests see the installed package, not the local files.


00:16:00.840 --> 00:16:03.880
And that happens sometimes if you're running,


00:16:03.880 --> 00:16:07.360
like say, pytest or unit test from the top level directory,


00:16:07.360 --> 00:16:10.600
and it might see the top level module


00:16:10.600 --> 00:16:11.440
and you don't want it to.


00:16:11.440 --> 00:16:13.120
So source is a way to hide that.


00:16:13.120 --> 00:16:15.360
But there's ways to get around that in testing.


00:16:15.360 --> 00:16:19.560
So I don't really, it's not really a solid argument


00:16:19.560 --> 00:16:20.440
as it used to be.


00:16:20.440 --> 00:16:23.900
This argument really is just, it looks nice


00:16:23.900 --> 00:16:25.800
in your code editor that you,


00:16:27.640 --> 00:16:31.940
Like here's an example of a non-source project


00:16:31.940 --> 00:16:34.440
where you have a couple of modules within the project


00:16:34.440 --> 00:16:38.200
and but alphabetically, they fall below,


00:16:38.200 --> 00:16:41.200
they're around your, you've got your test directory


00:16:41.200 --> 00:16:43.520
and your pyproject.toml and your source code's


00:16:43.520 --> 00:16:45.960
on both top and bottom of that, that's confusing.


00:16:45.960 --> 00:16:48.540
So I actually kind of love this simple argument


00:16:48.540 --> 00:16:52.120
of just combine all the source in one place, it's nice.


00:16:52.120 --> 00:16:52.960
So--


00:16:52.960 --> 00:16:54.400
- I do like that too.


00:16:54.400 --> 00:16:56.960
- I know the first reaction to this though


00:16:56.960 --> 00:16:59.360
is you're going to put a package level directory anyway,


00:16:59.360 --> 00:17:03.920
and having a package level directory in there if you have a package,


00:17:03.920 --> 00:17:08.020
instead of this source or something, that works too.


00:17:08.020 --> 00:17:10.280
But anyway, this is interesting.


00:17:10.280 --> 00:17:13.680
The one thing that gets me and it shows up here is


00:17:13.680 --> 00:17:17.640
this author is considering what I,


00:17:17.640 --> 00:17:20.840
so we have a problem in Python of what a package is.


00:17:20.840 --> 00:17:23.280
A package is something I install from PyPI,


00:17:23.280 --> 00:17:25.960
but it's also within this Python documentation,


00:17:25.960 --> 00:17:29.840
Sometimes it's just a directory with an init file in it.


00:17:29.840 --> 00:17:32.660
I don't know how you, so Michael,


00:17:32.660 --> 00:17:33.740
you teach people about that.


00:17:33.740 --> 00:17:36.980
Do you ever stumble with this part or just?


00:17:36.980 --> 00:17:39.760
>> Both seems complicated and overly simplistic.


00:17:39.760 --> 00:17:45.100
For me, I think one of the challenges really I often run into is,


00:17:45.100 --> 00:17:48.900
how do I organize my files if I want a sub-module,


00:17:48.900 --> 00:17:52.140
if I want simple import statements?


00:17:52.140 --> 00:17:52.700
>> Okay.


00:17:52.700 --> 00:17:54.820
>> If you don't have, yeah, go ahead.


00:17:54.820 --> 00:17:57.140
Do you think of directories with stuff,


00:17:57.140 --> 00:18:01.180
directories within a net as a module or as a package?


00:18:01.180 --> 00:18:06.720
>> I do, but often I try to dodge that bullet and just not.


00:18:06.720 --> 00:18:07.540
>> Not talk about it.


00:18:07.540 --> 00:18:10.040
>> Not really get. Yeah, well, honestly, not talk about it.


00:18:10.040 --> 00:18:11.400
If you're building a library,


00:18:11.400 --> 00:18:13.020
this matters very, very much.


00:18:13.020 --> 00:18:15.260
If you're building an application,


00:18:15.260 --> 00:18:17.580
a web app, or a CLI app or something,


00:18:17.580 --> 00:18:20.320
often it doesn't matter because you're just running


00:18:20.320 --> 00:18:24.020
the top level, some top level like main or app.py or something,


00:18:24.020 --> 00:18:27.020
and it'll just pick it up whether it's a module


00:18:27.020 --> 00:18:29.740
or a package or just a directory.


00:18:29.740 --> 00:18:33.380
>> I guess regardless of what we call directories,


00:18:33.380 --> 00:18:34.980
whether we call them modules or packages,


00:18:34.980 --> 00:18:37.500
this article calls them modules.


00:18:37.500 --> 00:18:40.660
Then it goes on to talk about some other cool stuff.


00:18:40.660 --> 00:18:43.020
Let's go down, naming things.


00:18:43.020 --> 00:18:45.560
It talks about that there's really no files,


00:18:45.560 --> 00:18:47.860
there's modules.


00:18:47.860 --> 00:18:50.180
There's no directories, they're all modules,


00:18:50.180 --> 00:18:51.820
but that's okay.


00:18:51.820 --> 00:18:55.980
So this is some of the opinion stuff that you can, it's interesting, you can skip over it.


00:18:55.980 --> 00:18:59.880
But the thing that I thought was interesting is these module names,


00:18:59.880 --> 00:19:03.780
they should be, they could be plural names.


00:19:03.780 --> 00:19:08.980
And I never thought about that, and it kind of makes sense, like if you have,


00:19:08.980 --> 00:19:12.420
it gives an example, like drivers.


00:19:12.420 --> 00:19:17.280
Drivers would be a module. Yeah, it'd probably be, the S on there makes sense.


00:19:17.280 --> 00:19:21.860
>> It said keep config and main as single,


00:19:21.860 --> 00:19:24.480
but most things have an S on the end.


00:19:24.480 --> 00:19:25.920
I never really thought about that before,


00:19:25.920 --> 00:19:29.960
but it does make sense of like from crawler storages,


00:19:29.960 --> 00:19:31.720
import get storage or something.


00:19:31.720 --> 00:19:33.080
>> Yeah.


00:19:33.080 --> 00:19:35.540
>> It's just a nice little extra thing.


00:19:35.540 --> 00:19:40.000
Then it talks about naming functions and stuff.


00:19:40.000 --> 00:19:43.000
This is something people get wrong all the time,


00:19:43.000 --> 00:19:44.920
so it's good to talk about it.


00:19:44.920 --> 00:19:46.500
Name your functions with verbs.


00:19:46.500 --> 00:19:50.140
it makes your code a lot clearer if your functions are methods or verbs.


00:19:50.140 --> 00:19:53.580
Unless you have to jump through giant hoops to make it work.


00:19:53.580 --> 00:19:55.940
But if you have to jump through giant hoops to make a verb work,


00:19:55.940 --> 00:19:57.940
maybe it's not really one function,


00:19:57.940 --> 00:19:59.980
maybe it should be two or three, but we'll see.


00:19:59.980 --> 00:20:02.900
>> Yeah, or a property instead of a function.


00:20:02.900 --> 00:20:04.340
>> Yeah, or a property, right.


00:20:04.340 --> 00:20:08.540
Then class names, one of the things I never thought about also was class names


00:20:08.540 --> 00:20:11.860
should be singular,


00:20:11.860 --> 00:20:16.760
So classes should be singular unless it's really a container.


00:20:16.760 --> 00:20:22.200
So don't name a class orders because it's going to describe multiple orders.


00:20:22.200 --> 00:20:24.220
It's an order, it's an order class,


00:20:24.220 --> 00:20:25.620
not an orders class.


00:20:25.620 --> 00:20:28.300
So that's a good thing.


00:20:28.300 --> 00:20:31.500
One of the things I loved about this article also is there's


00:20:31.500 --> 00:20:34.060
two things that we talk about,


00:20:34.060 --> 00:20:38.380
we use a lot, but I don't think very many people talk about it too much.


00:20:38.380 --> 00:20:39.840
Well, it's the dunder and net thing.


00:20:39.840 --> 00:20:43.920
I'm going to pop down that not the the dunder name equals dunder main.


00:20:43.920 --> 00:20:45.280
That's used all the time.


00:20:45.280 --> 00:20:49.760
Um, and so it's good to talk about that of if you want to execute a module itself,


00:20:49.760 --> 00:20:50.520
use that.


00:20:50.520 --> 00:20:58.160
But the if you one of the things I tried to do recently that I kind of didn't know how to do right off the bat is a directory within a net.


00:20:58.160 --> 00:21:00.360
If it also has a dunder main,


00:21:00.360 --> 00:21:03.960
then you can use the dash M uh thing on it.


00:21:03.960 --> 00:21:06.920
Uh, so if you include like dunder main,


00:21:06.920 --> 00:21:12.000
then you can use Python -m module name when you're running.


00:21:12.000 --> 00:21:13.960
>> Interesting. Okay.


00:21:13.960 --> 00:21:17.700
>> Because I had a library I was working with and I was like,


00:21:17.700 --> 00:21:20.460
I'm using -m for everything else.


00:21:20.460 --> 00:21:22.480
I'd like to have the entry point for


00:21:22.480 --> 00:21:26.680
my application be usable if I do -m also.


00:21:26.680 --> 00:21:29.640
How do I do that? This is how you do it.


00:21:29.640 --> 00:21:31.720
It's neat to have this in right away


00:21:31.720 --> 00:21:34.040
because I don't know if it's really a beginner thing,


00:21:34.040 --> 00:21:35.480
but it's still cool.


00:21:35.480 --> 00:21:38.360
Yeah, I like it a lot. It's like entry points, but simpler.


00:21:38.360 --> 00:21:44.600
Yeah. Anyway, so decent article. There's some opinions there, but that's okay.


00:21:44.600 --> 00:21:45.880
We like opinions.


00:21:45.880 --> 00:21:50.840
Absolutely. We do, we do. All right. Well, do you know what else we like, Brian? Follow-up.


00:21:50.840 --> 00:21:53.320
Yay! I was going to do this. I'm glad you're doing it.


00:21:53.320 --> 00:21:56.280
Too late. I grabbed it. I grabbed it because this one is a good one. So,


00:21:56.280 --> 00:22:03.160
remember last week you spoke about CLI apps and doing OAuth, and you've got to remember the tokens


00:22:03.160 --> 00:22:05.240
the example you gave was from Twitter,


00:22:05.240 --> 00:22:06.800
but it could be from all over the place.


00:22:06.800 --> 00:22:10.600
So Trent, we got multiple pieces of feedback.


00:22:10.600 --> 00:22:14.320
One about encrypting the stuff that goes into your user profile.


00:22:14.320 --> 00:22:16.800
I can't remember who, I apologize about forgetting the name,


00:22:16.800 --> 00:22:18.160
but someone sent in a message that says,


00:22:18.160 --> 00:22:22.280
well, the AWS CLI just puts your token straight there unencrypted.


00:22:22.280 --> 00:22:27.360
So there's that. I said maybe you should encrypt them somehow,


00:22:27.360 --> 00:22:29.160
and I agree with that still.


00:22:29.160 --> 00:22:32.560
But Trent sent in this project called Keyring,


00:22:32.560 --> 00:22:35.120
And key ring is key ring or vault,


00:22:35.120 --> 00:22:36.480
vaults, those types of things.


00:22:36.480 --> 00:22:38.960
There are ways, sort of more


00:22:38.960 --> 00:22:42.800
managed central stores of this type of information, right?


00:22:42.800 --> 00:22:45.000
On macOS you hear,


00:22:45.000 --> 00:22:48.200
and it put it in your OS X key chain, right?


00:22:48.200 --> 00:22:50.680
You probably have heard that or the Windows Credential Store


00:22:50.680 --> 00:22:53.600
or those things that the actual operating system


00:22:53.600 --> 00:22:55.880
is protecting from other apps to go look at it.


00:22:55.880 --> 00:22:57.880
But it's basically just encrypted,


00:22:57.880 --> 00:23:00.760
login, password or tokens, yeah?


00:23:00.760 --> 00:23:05.660
So this keyring thing that gested is something like that,


00:23:05.660 --> 00:23:07.840
but it works to Python library,


00:23:07.840 --> 00:23:09.640
it works across platform,


00:23:09.640 --> 00:23:12.020
and it works with different backends based on


00:23:12.020 --> 00:23:15.020
both what platform you're on and other things you might decide.


00:23:15.020 --> 00:23:18.300
So it's a library that gives you access to


00:23:18.300 --> 00:23:21.340
system keyring services from Python,


00:23:21.340 --> 00:23:22.880
which I think is fantastic.


00:23:22.880 --> 00:23:25.080
So on macOS, that's Keychain.


00:23:25.080 --> 00:23:29.560
On Linux, it's the Secret Service or


00:23:29.560 --> 00:23:32.160
the KDE 4 and 5K wallets.


00:23:32.160 --> 00:23:35.280
And then on Windows, it's the Windows Credential Locker.


00:23:35.280 --> 00:23:36.120
- Okay.


00:23:36.120 --> 00:23:36.960
- Right, and so in there,


00:23:36.960 --> 00:23:41.180
you can just call set password and get password


00:23:41.180 --> 00:23:42.360
and off it goes.


00:23:42.360 --> 00:23:44.000
And that's pretty much it, right?


00:23:44.000 --> 00:23:45.920
But it's stored in a nice encrypted,


00:23:45.920 --> 00:23:50.160
not just encrypted, but protected access way for the OS.


00:23:50.160 --> 00:23:52.740
- Yeah, so I actually forgot about this.


00:23:52.740 --> 00:23:55.860
I actually use this for testing all the time,


00:23:55.860 --> 00:23:56.800
but I never thought,


00:23:56.800 --> 00:23:59.920
I didn't think about using it for a command line application.


00:23:59.920 --> 00:24:00.920
Interesting.


00:24:00.920 --> 00:24:03.040
Okay, how do you use it for testing?


00:24:03.040 --> 00:24:09.280
So we have, some of the issues are we have different devices that we're testing against


00:24:09.280 --> 00:24:12.440
that are password protected devices.


00:24:12.440 --> 00:24:19.060
And so you had in order to access them, you need a login and password to run commands


00:24:19.060 --> 00:24:20.060
against them.


00:24:20.060 --> 00:24:25.060
And so to be able to do that, we need the,


00:24:25.060 --> 00:24:27.940
if you're SSHing into something or something like that,


00:24:27.940 --> 00:24:29.700
that's part of your process,


00:24:29.700 --> 00:24:32.760
you have to have those credentials somewhere,


00:24:32.760 --> 00:24:34.860
and we don't want them in our source code.


00:24:34.860 --> 00:24:38.420
That's the gist of it is we don't want them


00:24:38.420 --> 00:24:41.300
just to be, yeah, we don't want them in the source code


00:24:41.300 --> 00:24:42.860
and checked in to GitLab


00:24:42.860 --> 00:24:45.460
to have the whole company be able to read them.


00:24:45.460 --> 00:24:47.860
It's still protected, it's an internal thing,


00:24:47.860 --> 00:24:51.980
but maybe you're on GitLab or GitHub or something,


00:24:51.980 --> 00:24:53.260
and it's a public repo.


00:24:53.260 --> 00:24:54.660
You don't want any passwords right there,


00:24:54.660 --> 00:24:56.240
but you can have them stored on


00:24:56.240 --> 00:24:59.360
your local machine and then pull them out with keyring.


00:24:59.360 --> 00:24:59.900
>> Right.


00:24:59.900 --> 00:25:01.440
>> It surprised me a little bit that


00:25:01.440 --> 00:25:03.340
they're just the Git passwords are a thing.


00:25:03.340 --> 00:25:08.140
I expected it to be like a Git the password hash or something.


00:25:08.140 --> 00:25:12.060
But I have to remember this isn't verifying passwords,


00:25:12.060 --> 00:25:16.380
it's having them to be able to send them to another system.


00:25:16.380 --> 00:25:19.420
>> Ideally, that one is storing the hash, not the real thing.


00:25:19.420 --> 00:25:20.780
>> Yeah, exactly.


00:25:20.780 --> 00:25:21.780
>> Yeah.


00:25:21.780 --> 00:25:23.780
>> I don't know if it works.


00:25:23.780 --> 00:25:25.820
>> I don't know if this would be,


00:25:25.820 --> 00:25:28.060
this is still cool and I'm glad we're covering it,


00:25:28.060 --> 00:25:30.240
but my original question was around,


00:25:30.240 --> 00:25:32.420
is this what's a reasonable thing to


00:25:32.420 --> 00:25:36.340
store passwords for sessions for command line application?


00:25:36.340 --> 00:25:38.400
I don't know if keyring would work,


00:25:38.400 --> 00:25:39.740
but I haven't tried it yet.


00:25:39.740 --> 00:25:41.260
Maybe if you have a set password,


00:25:41.260 --> 00:25:43.620
maybe it will work, maybe it stores something locally.


00:25:43.620 --> 00:25:44.740
So I'll have to try it out.


00:25:44.740 --> 00:25:46.140
>> Yeah, I think that it will.


00:25:46.140 --> 00:25:46.660
>> Okay.


00:25:46.660 --> 00:25:48.300
>> The question that I was wondering is,


00:25:48.300 --> 00:25:49.960
what about the get password?


00:25:49.960 --> 00:25:53.420
Is that restricted to the process that put it in there?


00:25:53.420 --> 00:25:54.100
>> Yeah.


00:25:54.100 --> 00:25:55.660
>> Or is it anything running on the system?


00:25:55.660 --> 00:25:57.100
>> Yeah, exactly.


00:25:57.100 --> 00:25:59.420
Can you just start arbitrarily asking for stuff?


00:25:59.420 --> 00:26:00.700
Probably some restrictions there,


00:26:00.700 --> 00:26:02.580
but I don't know exactly what they are.


00:26:02.580 --> 00:26:05.380
Penfill out in the audience says,


00:26:05.380 --> 00:26:09.020
I'm not mistaken, Poetry is using the FITs installed.


00:26:09.020 --> 00:26:12.060
So that's where your PyPI credentials get installed.


00:26:12.060 --> 00:26:15.540
You can check out issue 210 from Poetry.


00:26:15.540 --> 00:26:18.340
And down here somewhere says,


00:26:18.340 --> 00:26:21.720
they talk about ways in which you could store.


00:26:21.720 --> 00:26:24.340
And it says, why not just make key ring a dependency?


00:26:24.340 --> 00:26:25.180
- Okay.


00:26:25.180 --> 00:26:26.260
- Yeah, if this approach,


00:26:26.260 --> 00:26:28.620
why not simply make key ring a dependency and so on.


00:26:28.620 --> 00:26:32.100
And so yeah, it talks about basically using this


00:26:32.100 --> 00:26:34.200
to store your PyPI credentials.


00:26:34.200 --> 00:26:35.380
And that's a CLI app.


00:26:35.380 --> 00:26:36.660
- Perfect then, we have an example.


00:26:36.660 --> 00:26:38.300
- It sounds like a pretty good match.


00:26:38.300 --> 00:26:39.540
Yeah, nice little example.


00:26:39.540 --> 00:26:41.220
Yeah, you can just follow along what they're doing there.


00:26:41.220 --> 00:26:43.140
So thank you Penfil for pointing that out.


00:26:43.140 --> 00:26:43.980
- Yeah.


00:26:43.980 --> 00:26:46.680
Well, anyway, I don't currently have any use for this.


00:26:46.680 --> 00:26:50.020
I think it might be useful even outside of,


00:26:50.020 --> 00:26:51.780
I have this interactive application,


00:26:51.780 --> 00:26:54.020
for example, storing secrets.


00:26:54.020 --> 00:26:56.980
You know, if you want to have the database connection string


00:26:56.980 --> 00:26:57.880
to your app, right?


00:26:57.880 --> 00:26:59.180
This might be a good way to do it.


00:26:59.180 --> 00:27:00.860
And one other thing that's interesting


00:27:00.860 --> 00:27:02.940
is you can have third-party backends.


00:27:02.940 --> 00:27:05.380
So you could have just encrypted text files,


00:27:05.380 --> 00:27:10.380
you could have the Dbus API for Linux,


00:27:10.380 --> 00:27:12.940
Google Sheets, I don't know about this, but.


00:27:12.940 --> 00:27:13.780
(both laughing)


00:27:13.780 --> 00:27:15.820
- It does say for use with IPython secret,


00:27:15.820 --> 00:27:17.620
so maybe it encrypts them.


00:27:17.620 --> 00:27:20.700
But more realistically, we've talked about Bitwarden before,


00:27:20.700 --> 00:27:24.020
an open source password manager, which is really nice.


00:27:24.020 --> 00:27:26.100
I use that for a few things.


00:27:26.100 --> 00:27:28.380
- Okay. - And so that has a CLI aspect.


00:27:28.380 --> 00:27:30.620
You can have Bitwarden as a backend.


00:27:30.620 --> 00:27:32.140
You can write your own as well.


00:27:32.140 --> 00:27:35.900
And 1Password has a CLI option as well


00:27:35.900 --> 00:27:37.940
for storing SSH keys even.


00:27:37.940 --> 00:27:40.220
So you could even put your SSH keys in there and whatnot.


00:27:40.220 --> 00:27:42.040
I don't know if this would pull it back correctly,


00:27:42.040 --> 00:27:44.760
but there's a lot of ways to store things


00:27:44.760 --> 00:27:47.160
and say one password and then access it with a CLI.


00:27:47.160 --> 00:27:48.520
Maybe you could plug this in.


00:27:48.520 --> 00:27:50.840
So just it's another provider, which is cool.


00:27:50.840 --> 00:27:51.660
- Yeah.


00:27:51.660 --> 00:27:53.640
- Yeah, anyway, seems really nice to me.


00:27:53.640 --> 00:27:56.160
If I have a use for it, I'll definitely look into it more.


00:27:56.160 --> 00:27:57.440
- Yeah, cool, nice.


00:27:57.440 --> 00:27:58.480
- Yep, all right.


00:27:58.480 --> 00:28:00.640
Hey, that might be all of our topics for the day, huh?


00:28:00.640 --> 00:28:01.800
- I think so, yeah.


00:28:01.800 --> 00:28:03.800
- So, extras, you got any extras?


00:28:03.800 --> 00:28:08.800
- I just wanted to say that I am working on a couple things.


00:28:09.280 --> 00:28:12.680
I'm editing my pytest course, of course,


00:28:12.680 --> 00:28:14.240
still working on that.


00:28:14.240 --> 00:28:16.160
But the other thing that I just started,


00:28:16.160 --> 00:28:17.520
which I'm super excited about,


00:28:17.520 --> 00:28:20.200
is I just started taking a FastAPI course.


00:28:20.200 --> 00:28:21.040
- Oh yeah?


00:28:21.040 --> 00:28:21.860
- It's really neat.


00:28:21.860 --> 00:28:23.400
The instructor's awesome, yeah.


00:28:23.400 --> 00:28:24.400
(laughing)


00:28:24.400 --> 00:28:26.320
- Awesome, yeah, thank you.


00:28:26.320 --> 00:28:27.680
That's the FastAPI course,


00:28:27.680 --> 00:28:29.660
this live course that I'm doing this week and next week,


00:28:29.660 --> 00:28:30.500
right?


00:28:30.500 --> 00:28:32.100
- Yeah, yeah, so I'm taking it from Michael,


00:28:32.100 --> 00:28:34.840
and if anybody is,


00:28:34.840 --> 00:28:38.040
if you've never taken one of the online courses with Michael


00:28:38.040 --> 00:28:40.720
or a live course, it's just really excellent.


00:28:40.720 --> 00:28:42.360
He's a good instructor, so it's good.


00:28:42.360 --> 00:28:43.200
- Thank you very much.


00:28:43.200 --> 00:28:44.020
Yeah, I love it.


00:28:44.020 --> 00:28:46.840
We're having a good time just playing with code as a group.


00:28:46.840 --> 00:28:47.680
- Yeah, how about you?


00:28:47.680 --> 00:28:50.200
- I have, I think I have some extras


00:28:50.200 --> 00:28:51.640
just really quickly here.


00:28:51.640 --> 00:28:55.160
Brian Skin, who's been a co-host before,


00:28:55.160 --> 00:28:57.960
sent us a tweet and said, "Attention Python Bytes."


00:28:57.960 --> 00:29:02.760
And that went over to this message from Jeff, Jeff Huntley.


00:29:02.760 --> 00:29:06.200
And it says, "GitLab, are you all right?"


00:29:06.200 --> 00:29:09.240
And this is linking to an article from the register.


00:29:09.240 --> 00:29:11.320
It says, "GitLab plans to delete


00:29:11.320 --> 00:29:13.360
"dormant projects in free accounts,


00:29:13.360 --> 00:29:15.520
"hoping to save a quarter of the hosting costs


00:29:15.520 --> 00:29:18.000
"by binning repos that haven't been touched for a year."


00:29:18.000 --> 00:29:18.840
- Yikes.


00:29:18.840 --> 00:29:19.840
- That's a little nerve wracking


00:29:19.840 --> 00:29:21.600
because just 'cause it hasn't been changed


00:29:21.600 --> 00:29:23.480
doesn't mean it's not useful.


00:29:23.480 --> 00:29:24.680
- Yeah. - Yes.


00:29:24.680 --> 00:29:26.560
- Oh, maybe I keep my recipes up there


00:29:26.560 --> 00:29:28.840
and I haven't added any recipes lately.


00:29:28.840 --> 00:29:30.560
- Yeah, maybe nothing's changed or whatever.


00:29:30.560 --> 00:29:33.000
So a couple of things.


00:29:33.000 --> 00:29:36.280
PSA if you have a GitLab project,


00:29:36.280 --> 00:29:42.200
maybe just add a period to some text file or something and check that in.


00:29:42.200 --> 00:29:46.120
>> Spam your own repo with trivial PRs.


00:29:46.120 --> 00:29:47.560
>> Yeah, exactly.


00:29:47.560 --> 00:29:52.320
I fixed this misspelling here by changing the word and the more.


00:29:52.320 --> 00:29:55.200
Mario Munoz says, they may be reverting this.


00:29:55.200 --> 00:29:58.680
Okay, so this was just from four or five days ago.


00:29:58.680 --> 00:30:00.320
And Pamphill says, yes, they did.


00:30:00.320 --> 00:30:03.960
"Okay, well, it sounds like they had the same face.


00:30:03.960 --> 00:30:06.720
Many people had the same reaction that we are going,


00:30:06.720 --> 00:30:09.240
"Oh boy, this seems like a bad idea.


00:30:09.240 --> 00:30:11.080
I'm glad this was changed."


00:30:11.080 --> 00:30:13.680
Yeah, Pamphle says, "Because of the huge backlash."


00:30:13.680 --> 00:30:14.700
I can imagine.


00:30:14.700 --> 00:30:15.800
- Yeah.


00:30:15.800 --> 00:30:17.320
- All right, well, I guess I'll have to continue


00:30:17.320 --> 00:30:19.240
to pay their million dollars extra per year


00:30:19.240 --> 00:30:21.260
to host things that people put up on there


00:30:21.260 --> 00:30:22.480
where they said they would host it.


00:30:22.480 --> 00:30:24.280
- Yeah, well, hopefully they, okay.


00:30:24.280 --> 00:30:25.120
Even if you did that,


00:30:25.120 --> 00:30:27.620
hopefully they would email people at least.


00:30:27.620 --> 00:30:28.460
Hopefully your current emails.


00:30:28.460 --> 00:30:29.800
- Yeah, exactly.


00:30:29.800 --> 00:30:30.920
How to like Google Voice.


00:30:30.920 --> 00:30:33.600
Please log in within the next 30 days


00:30:33.600 --> 00:30:34.880
to keep your phone number,


00:30:34.880 --> 00:30:37.360
or whatever it is they always did to me.


00:30:37.360 --> 00:30:40.680
Okay, well with that, I think it brings us to some jokes.


00:30:40.680 --> 00:30:41.720
You got some jokes to tell,


00:30:41.720 --> 00:30:43.240
and I brought a quick one as well.


00:30:43.240 --> 00:30:44.520
- Okay. - You wanna go first?


00:30:44.520 --> 00:30:47.040
- Sure, I'm not gonna read the ones up here,


00:30:47.040 --> 00:30:49.000
but I got them, I got a couple jokes


00:30:49.000 --> 00:30:52.120
from a place called, from a GitHub repo


00:30:52.120 --> 00:30:54.600
that's dad-style programming jokes,


00:30:54.600 --> 00:30:55.760
which is perfect for me.


00:30:55.760 --> 00:30:58.280
So I got a couple.


00:30:58.280 --> 00:31:01.320
How do programming pirates pass method parameters?


00:31:01.320 --> 00:31:02.160
- I don't know.


00:31:02.160 --> 00:31:03.360
- With virargs.


00:31:03.360 --> 00:31:05.160
(laughing)


00:31:05.160 --> 00:31:06.000
- Awesome.


00:31:06.000 --> 00:31:07.020
- Okay, second one.


00:31:07.020 --> 00:31:09.680
How do you get code?


00:31:09.680 --> 00:31:12.320
How do you get the code of your bank vault?


00:31:12.320 --> 00:31:13.160
So you can break into the bank.


00:31:13.160 --> 00:31:14.000
- I don't know.


00:31:14.000 --> 00:31:15.680
- You check out their branch.


00:31:15.680 --> 00:31:17.340
This is bad.


00:31:17.340 --> 00:31:18.400
- Nice, I love it.


00:31:18.400 --> 00:31:21.560
- And then one of the things I liked on the top of this,


00:31:21.560 --> 00:31:23.520
it says, "Unfortunately, these jokes only work


00:31:23.520 --> 00:31:24.840
"if you get them."


00:31:24.840 --> 00:31:25.680
Ah, bad.


00:31:25.680 --> 00:31:27.400
- Oh, so good.


00:31:27.400 --> 00:31:29.860
And it's a GitHub repo, so that's actually fitting.


00:31:29.860 --> 00:31:30.700
So anyway.


00:31:30.700 --> 00:31:32.780
- It's very self-referential, very meta.


00:31:32.780 --> 00:31:34.500
- Okay, how about you?


00:31:34.500 --> 00:31:36.900
- Here's a quick one before I put it up on screen.


00:31:36.900 --> 00:31:40.860
You know how there's this constant not built here syndrome?


00:31:40.860 --> 00:31:43.460
Like sure, this key ring is cool, but did we build it?


00:31:43.460 --> 00:31:45.740
No, I bet we could build a better key ring than that.


00:31:45.740 --> 00:31:48.060
And like, we'll get a team together to build key ring.


00:31:48.060 --> 00:31:48.880
Right?


00:31:48.880 --> 00:31:53.140
So here's a picture of normal people acting like developers.


00:31:53.140 --> 00:31:54.900
So there's these two construction workers


00:31:54.900 --> 00:31:55.980
with their hard hats on,


00:31:55.980 --> 00:31:59.060
there's a screwdriver with a $2 tag on it


00:31:59.060 --> 00:32:00.220
because it was just purchased.


00:32:00.220 --> 00:32:01.620
And one guy's outraged.


00:32:01.620 --> 00:32:02.460
What?


00:32:02.460 --> 00:32:03.700
Did you buy a screwdriver


00:32:03.700 --> 00:32:06.500
instead of building your own from scratch?


00:32:06.500 --> 00:32:07.540
- Exactly.


00:32:07.540 --> 00:32:08.380
Yeah.


00:32:08.380 --> 00:32:09.660
- Yeah, pretty good.


00:32:09.660 --> 00:32:10.500
- What?


00:32:10.500 --> 00:32:11.320
You're using Hugo?


00:32:11.320 --> 00:32:13.820
Why didn't you build your own blog engine?


00:32:13.820 --> 00:32:14.640
- Exactly.


00:32:14.640 --> 00:32:16.660
First, I'm gonna build my own Markdown parser


00:32:16.660 --> 00:32:18.260
so I can have better tables.


00:32:18.260 --> 00:32:19.100
Let's go.


00:32:19.100 --> 00:32:20.140
- Exactly.


00:32:20.140 --> 00:32:20.960
Yeah.


00:32:20.960 --> 00:32:21.800
- Yes, indeed.


00:32:21.800 --> 00:32:22.640
- So.


00:32:22.640 --> 00:32:23.940
- All right, well, excellent podcast as always.


00:32:23.940 --> 00:32:24.860
Thanks for being here.


00:32:24.860 --> 00:32:25.680
- Thank you.


00:32:25.680 --> 00:32:27.760
- You bet, and thank you everyone for listening,


00:32:27.760 --> 00:32:30.240
watching, however you've been part of this.


00:32:30.240 --> 00:32:31.320
- Yeah, thanks a lot.

