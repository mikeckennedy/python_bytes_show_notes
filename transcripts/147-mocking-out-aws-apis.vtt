
00:00:00.000 --> 00:00:04.700
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.700 --> 00:00:09.600
This is episode 147, recorded September 4th, 2019.


00:00:09.600 --> 00:00:10.400
I'm Michael Kennedy.


00:00:10.400 --> 00:00:11.300
I am Brian Okken.


00:00:11.300 --> 00:00:13.500
And this episode is brought to you by DigitalOcean.


00:00:13.500 --> 00:00:17.000
Tell you more about some cool stuff they got coming up later.


00:00:17.000 --> 00:00:19.600
Right now, I want to talk about tables.


00:00:19.600 --> 00:00:22.900
Okay. And really quick, what's 147 in hex?


00:00:22.900 --> 00:00:25.600
No, just, I couldn't do that. I don't expect you.


00:00:25.600 --> 00:00:27.400
Anyway.


00:00:27.400 --> 00:00:33.160
No, but one of the things I do like need to do occasionally, I need to do really fast is generate tables.


00:00:33.160 --> 00:00:38.280
And I know it's not something that everybody needs to do, but if I've got a whole bunch of data,


00:00:38.280 --> 00:00:44.360
like in this case, some dictionaries, a list, and I want to be able to just print that stuff out.


00:00:44.360 --> 00:00:48.200
They're all the same type of dictionary, they just hold some data. I want to print them out.


00:00:48.200 --> 00:00:54.680
How do I do that quickly? And for test reports or whatever. I found this called RapidTables,


00:00:54.680 --> 00:00:56.480
and it's really kind of awesome.


00:00:56.480 --> 00:00:59.640
>> Oh, that is so cool. Wow.


00:00:59.640 --> 00:01:03.040
>> Yeah. So you just basically you've got a list of dictionaries,


00:01:03.040 --> 00:01:04.500
and then you want to print them out,


00:01:04.500 --> 00:01:07.500
and you want it to look like a good ASCII table.


00:01:07.500 --> 00:01:08.780
It shows you how to do it,


00:01:08.780 --> 00:01:13.640
and it also shows you how to do it with a thing called term color.colored.


00:01:13.640 --> 00:01:15.140
I didn't know this was around.


00:01:15.140 --> 00:01:17.800
So you can do colored tables if you want.


00:01:17.800 --> 00:01:19.180
I probably won't do that.


00:01:19.180 --> 00:01:22.260
It also converts stuff to markdown and restructured text.


00:01:22.260 --> 00:01:24.080
That's neat. I might use that.


00:01:24.080 --> 00:01:28.080
But right away, I just need the just really easy tables.


00:01:28.080 --> 00:01:30.400
And it says it's super fast in speed--


00:01:30.400 --> 00:01:32.880
like speed-wise, it goes fast.


00:01:32.880 --> 00:01:37.120
But what I like is that it's not a lot of extra code gunk


00:01:37.120 --> 00:01:38.240
in your code.


00:01:38.240 --> 00:01:40.120
You just kind of say, I want this table,


00:01:40.120 --> 00:01:41.680
and you can print it out easily.


00:01:41.680 --> 00:01:43.800
Yeah, that's super cool, because a lot of times,


00:01:43.800 --> 00:01:47.760
like this kind of formatting, it's a lot of Z fill,


00:01:47.760 --> 00:01:50.200
and pad these strings, and L pad--


00:01:50.200 --> 00:01:52.040
just like trying to get the spacing,


00:01:52.040 --> 00:01:54.240
You're putting tabs, but every now and then the tab,


00:01:54.240 --> 00:01:56.360
like the word is too big, and so the tab will shoot it


00:01:56.360 --> 00:01:57.160
to the next column.


00:01:57.160 --> 00:02:00.840
It's a lot of work, and this is not you doing that work.


00:02:00.840 --> 00:02:01.340
Right.


00:02:01.340 --> 00:02:02.680
So for all the columns, you have to go


00:02:02.680 --> 00:02:05.000
through each of the elements to find the longest one


00:02:05.000 --> 00:02:08.720
to figure out how wide you need to make the column.


00:02:08.720 --> 00:02:10.720
And yeah, there's other libraries to do this,


00:02:10.720 --> 00:02:12.520
but this one I think is pretty cool.


00:02:12.520 --> 00:02:13.520
Yeah, it's pretty cool.


00:02:13.520 --> 00:02:16.440
I also like the Markdown and Restructure Text Output option.


00:02:16.440 --> 00:02:17.400
Yeah, very cool.


00:02:17.400 --> 00:02:20.240
So if you think about what is one


00:02:20.240 --> 00:02:23.660
of the most popular packages, what would you say?


00:02:23.660 --> 00:02:24.660
Take some guesses.


00:02:24.660 --> 00:02:25.500
- Requests.


00:02:25.500 --> 00:02:26.320
- It's gotta be requests.


00:02:26.320 --> 00:02:27.700
I don't know if it's the most used one,


00:02:27.700 --> 00:02:31.220
but it's certainly the one that has people's attention


00:02:31.220 --> 00:02:32.140
and imagination.


00:02:32.140 --> 00:02:34.300
So what would you think if I told you


00:02:34.300 --> 00:02:39.300
here is a competitor to requests called HTTPX?


00:02:39.300 --> 00:02:40.540
- Ooh, I like the X.


00:02:40.540 --> 00:02:42.700
- It's extra cool, absolutely.


00:02:42.700 --> 00:02:44.580
What's really interesting about HTTPX though


00:02:44.580 --> 00:02:47.300
is it's not a from scratch,


00:02:47.300 --> 00:02:49.500
like throw away the ideas of requests.


00:02:49.500 --> 00:02:54.300
it's compatible with the request API. So what you can do with requests you can do with this,


00:02:54.300 --> 00:02:58.700
so you can kind of drop it in. But it has all these other cool features. And in fact,


00:02:58.700 --> 00:03:05.500
it comes from this project called encode in COD encode. And over there, they have a ton of cool


00:03:05.500 --> 00:03:12.540
things including Django rest framework, starlet UVA, corn, HTTPS, and also some other async stuff.


00:03:12.540 --> 00:03:18.220
And a lot of the things happening around here UVA, corn databases, orm HTTPS is all about


00:03:18.220 --> 00:03:22.220
adding the asynchronous capabilities to these various things.


00:03:22.220 --> 00:03:26.720
And that's one of the shortcomings of requests, is it doesn't support an async option.


00:03:26.720 --> 00:03:31.020
But this HTTPX, it does a bunch of cool things around the async space


00:03:31.020 --> 00:03:35.420
to kind of let you gradually go up the stack of complexity.


00:03:35.420 --> 00:03:40.020
So you can just be straight synchronous stuff doing what request does.


00:03:40.020 --> 00:03:43.020
It has this concept of parallel requests.


00:03:43.020 --> 00:03:47.420
So you can issue a bunch of requests in parallel, but you don't have to think


00:03:47.420 --> 00:03:51.300
about actually creating the async event loop and stuff,


00:03:51.300 --> 00:03:53.140
you just say, I want to run these things all in parallel.


00:03:53.140 --> 00:03:55.460
And you could even ask it, say, I


00:03:55.460 --> 00:03:57.780
want to process the responses as they come in.


00:03:57.780 --> 00:04:01.740
So I can say, while parallel.hasPendingResponses,


00:04:01.740 --> 00:04:04.100
the response is parallel.nextResponse.


00:04:04.100 --> 00:04:07.220
So I could kick off 20 requests and just process them


00:04:07.220 --> 00:04:10.260
as they come back in four lines of code or something.


00:04:10.260 --> 00:04:11.260
- Oh, that's so cool.


00:04:11.260 --> 00:04:11.700
I like it.


00:04:11.700 --> 00:04:11.940
- Yeah.


00:04:11.940 --> 00:04:14.740
Or if you really want, if you're in something like Starlet,


00:04:14.740 --> 00:04:17.420
where it has actual async support for the method,


00:04:17.420 --> 00:04:18.660
you do want that to be async.


00:04:18.660 --> 00:04:21.740
So you can actually flip into an async mode


00:04:21.740 --> 00:04:23.740
where those happen the same way I described,


00:04:23.740 --> 00:04:27.380
but also on the asyncio event loop.


00:04:27.380 --> 00:04:28.300
So it's really cool.


00:04:28.300 --> 00:04:30.220
It also has some other neat features.


00:04:30.220 --> 00:04:32.660
So like I said, a request compatible API.


00:04:32.660 --> 00:04:37.300
It does HTTP/2, which I could do a request for a page.


00:04:37.300 --> 00:04:41.420
And as I pull down, say, five CSS style sheets,


00:04:41.420 --> 00:04:43.660
and a JavaScript, and an image, you can go get those all


00:04:43.660 --> 00:04:45.180
in one request.


00:04:45.180 --> 00:04:47.580
So it has support for that, which is cool.


00:04:47.580 --> 00:04:50.220
It has a standard synchronous interface,


00:04:50.220 --> 00:04:52.660
but also async and await if you want it.


00:04:52.660 --> 00:04:54.100
And Brian, you'll like this one.


00:04:54.100 --> 00:04:58.140
It allows you to make direct requests to WSGI or ASGI,


00:04:58.140 --> 00:05:00.460
the asynchronous variant of that, apps.


00:05:00.460 --> 00:05:01.940
So imagine I'm creating a Flask app,


00:05:01.940 --> 00:05:03.020
and I want to test it.


00:05:03.020 --> 00:05:06.020
I can actually, inside of my Flask app,


00:05:06.020 --> 00:05:10.500
provide HTTPX, the app, right, the Flask app object,


00:05:10.500 --> 00:05:12.100
and then I can issue requests


00:05:12.100 --> 00:05:13.620
that don't go through the network layer,


00:05:13.620 --> 00:05:16.780
They just go through this test app instance that I've created.


00:05:16.780 --> 00:05:17.500
Oh, that's cool.


00:05:17.500 --> 00:05:18.200
Isn't that cool?


00:05:18.200 --> 00:05:20.860
So if I want to mock out some behavior


00:05:20.860 --> 00:05:23.460
or interact with it as if I were externally,


00:05:23.460 --> 00:05:25.340
I don't have to start a server and talk to it.


00:05:25.340 --> 00:05:28.060
I'd literally just use the same API here,


00:05:28.060 --> 00:05:31.220
but directly skipping all the infrastructure.


00:05:31.220 --> 00:05:32.780
Oh, that sounds fun.


00:05:32.780 --> 00:05:33.300
Yeah.


00:05:33.300 --> 00:05:34.780
In a nerdy kind of fun.


00:05:34.780 --> 00:05:39.260
Yeah, that sounds really fun, but yeah.


00:05:39.260 --> 00:05:41.580
It is also fully type annotated, so it's


00:05:41.580 --> 00:05:44.260
It's very Python 3 friendly.


00:05:44.260 --> 00:05:46.460
Has 100% test coverage.


00:05:46.460 --> 00:05:49.180
And yeah, it has support for mocking out things.


00:05:49.180 --> 00:05:50.620
A lot of cool, nice features.


00:05:50.620 --> 00:05:54.060
And the fact that all this is built on top of requests


00:05:54.060 --> 00:05:55.780
means if you're already using requests,


00:05:55.780 --> 00:05:57.440
it's like you can adopt it pretty easily


00:05:57.440 --> 00:05:59.540
because you don't have to change anything.


00:05:59.540 --> 00:06:02.020
But if you want to bring in some of these cool new features,


00:06:02.020 --> 00:06:03.460
it's just you start using them.


00:06:03.460 --> 00:06:03.960
Nice.


00:06:03.960 --> 00:06:05.100
Now, one caveat.


00:06:05.100 --> 00:06:08.420
I does say that this is in some form of alpha.


00:06:08.420 --> 00:06:10.820
It's like pretty early days for this project.


00:06:10.820 --> 00:06:12.980
But yeah, it says this project should


00:06:12.980 --> 00:06:14.380
be considered an alpha release.


00:06:14.380 --> 00:06:17.780
It's substantially API complete, but some areas need to work.


00:06:17.780 --> 00:06:19.220
Well, people start using it.


00:06:19.220 --> 00:06:20.500
People start contributing to it.


00:06:20.500 --> 00:06:22.100
All of a sudden, it becomes not alpha.


00:06:22.100 --> 00:06:24.060
So anyway, it's out there for people to use.


00:06:24.060 --> 00:06:26.700
This is sort of the same umbrella area


00:06:26.700 --> 00:06:29.420
as Tom Christie and the Django REST framework area.


00:06:29.420 --> 00:06:30.980
So I think it's a pretty good place.


00:06:30.980 --> 00:06:31.540
Cool.


00:06:31.540 --> 00:06:32.100
OK.


00:06:32.100 --> 00:06:32.600
Neat.


00:06:32.600 --> 00:06:35.740
Speaking of stuff under the ENCODE GitHub project--


00:06:35.740 --> 00:06:37.780
So Starlette is part of that also?


00:06:37.780 --> 00:06:38.180
Yeah.


00:06:38.180 --> 00:06:38.680
OK.


00:06:38.680 --> 00:06:43.000
So interesting that we did not plan this.


00:06:43.000 --> 00:06:44.960
The universe planned it to line it up for us.


00:06:44.960 --> 00:06:47.400
Oh my gosh, we're wearing the same color shirt also.


00:06:47.400 --> 00:06:50.120
Oh my gosh!


00:06:50.120 --> 00:06:52.680
It's black, so it's not that weird of a coincidence.


00:06:52.680 --> 00:06:59.100
But anyway, so the article I wanted to highlight was Quick and Dirty Mock Services with Starlet.


00:06:59.100 --> 00:07:01.120
This is by a friend of the show, Matt Lehman.


00:07:01.120 --> 00:07:03.420
Hey Matt, it's kind of a neat thing.


00:07:03.420 --> 00:07:07.400
So one of the ideas, I don't know if we've talked about this on the show, but the idea


00:07:07.400 --> 00:07:12.160
of testing. So if you've got something that you're part of your


00:07:12.160 --> 00:07:16.360
application or the thing you want to test talks to a third-party service,


00:07:16.360 --> 00:07:20.780
sometimes you might not actually want to call that third-party service. You can


00:07:20.780 --> 00:07:25.400
mock or stub out the calls to the service or one of the ideas is to create


00:07:25.400 --> 00:07:30.180
a fake service to talk to. And so that's what this article is about is how to


00:07:30.180 --> 00:07:36.320
create a fake service so that you can use it for testing. And Matt uses, writes


00:07:36.320 --> 00:07:38.320
It's a really quick one using Starlet.


00:07:38.320 --> 00:07:41.360
And I think you could use other frameworks too,


00:07:41.360 --> 00:07:43.400
but I like how simple this is.


00:07:43.400 --> 00:07:46.480
One of the needs he had was that he didn't want the service


00:07:46.480 --> 00:07:48.640
to just come back right away.


00:07:48.640 --> 00:07:49.760
He wanted some delay,


00:07:49.760 --> 00:07:51.160
'cause there were some of the service calls


00:07:51.160 --> 00:07:53.360
that were taking up to a minute or longer,


00:07:53.360 --> 00:07:55.200
and he wanted to be able to simulate that


00:07:55.200 --> 00:07:57.040
within his fake service


00:07:57.040 --> 00:07:58.920
so that you can test the code under test


00:07:58.920 --> 00:08:02.960
to make sure it is working correct with a big delay.


00:08:02.960 --> 00:08:05.760
Anyway, it was a really easy to read, write up,


00:08:05.760 --> 00:08:06.840
easy way to do that.


00:08:06.840 --> 00:08:09.600
And I know that that's a recommended practice


00:08:09.600 --> 00:08:11.720
for a lot of instances.


00:08:11.720 --> 00:08:14.360
But there aren't very many write-ups of how to do it.


00:08:14.360 --> 00:08:15.960
And so congrats, Matt.


00:08:15.960 --> 00:08:16.480
I like it.


00:08:16.480 --> 00:08:17.880
- Yeah, that's really cool.


00:08:17.880 --> 00:08:20.440
You know, when you think of dependencies,


00:08:20.440 --> 00:08:24.120
you think of, well, my database layer or Stripe API


00:08:24.120 --> 00:08:24.920
or something.


00:08:24.920 --> 00:08:26.760
But time is one of those dependencies


00:08:26.760 --> 00:08:27.880
that's really tricky.


00:08:27.880 --> 00:08:29.460
- Most of the time, one of the reasons


00:08:29.460 --> 00:08:32.600
why we try to do a Maka service is to eliminate that time.


00:08:32.600 --> 00:08:35.560
You know, you want to make sure that the flow of the data


00:08:35.560 --> 00:08:37.220
it goes quickly, but you don't want to wait


00:08:37.220 --> 00:08:39.060
for the service during your test.


00:08:39.060 --> 00:08:42.460
But at the same time, you kind of want to make sure


00:08:42.460 --> 00:08:44.860
that you're, in most test cases,


00:08:44.860 --> 00:08:46.220
maybe that's the right thing,


00:08:46.220 --> 00:08:48.740
but you also want to make sure that your application


00:08:48.740 --> 00:08:52.620
deals with long latencies, if that's the normal situation.


00:08:52.620 --> 00:08:53.740
- Yeah, for sure.


00:08:53.740 --> 00:08:55.720
You might want to shrink it from five minutes


00:08:55.720 --> 00:08:57.420
to five seconds or something,


00:08:57.420 --> 00:08:59.780
so the tests don't run super long, but yeah.


00:08:59.780 --> 00:09:01.740
Or even like, I want to start something


00:09:01.740 --> 00:09:04.380
and then see in an hour if it's done.


00:09:04.380 --> 00:09:08.260
you could have to fake out like datetime.now.


00:09:08.260 --> 00:09:11.780
So the next time you ask it, it's like two hours from now,


00:09:11.780 --> 00:09:13.060
but it's one millisecond.


00:09:13.060 --> 00:09:15.920
- Yeah, well, and make sure your parameterization


00:09:15.920 --> 00:09:18.500
of that test doesn't make it so that you're running


00:09:18.500 --> 00:09:21.520
50 different versions of the hour-long wait.


00:09:21.520 --> 00:09:24.220
- Yeah, for sure.


00:09:24.220 --> 00:09:25.620
All right, now before we get to the next item,


00:09:25.620 --> 00:09:28.740
let me tell you about some new services from DigitalOcean.


00:09:28.740 --> 00:09:33.100
So they've traditionally had recently added Postgres


00:09:33.100 --> 00:09:36.200
as a service, so now hosted database, which is really cool,


00:09:36.200 --> 00:09:37.700
but maybe you don't use Postgres.


00:09:37.700 --> 00:09:38.900
Maybe you wanna use Redis.


00:09:38.900 --> 00:09:41.060
We just talked about queuing and stuff.


00:09:41.060 --> 00:09:44.380
So Redis is now a service that you can get


00:09:44.380 --> 00:09:46.500
over at DigitalOcean, Redis as a service,


00:09:46.500 --> 00:09:49.240
and also MySQL as a service.


00:09:49.240 --> 00:09:53.220
So check that out over at pythonbytes.fm/digitalocean.


00:09:53.220 --> 00:09:55.060
Get $50 credit for a new user.


00:09:55.060 --> 00:09:57.620
They've got all sorts of good stuff coming your way,


00:09:57.620 --> 00:10:00.360
and of course, all of our infrastructure runs on it as well,


00:10:00.360 --> 00:10:02.740
which is fun and very good.


00:10:02.740 --> 00:10:05.100
All right, the next thing I want to talk about


00:10:05.100 --> 00:10:09.100
is that other larger cloud provider.


00:10:09.100 --> 00:10:10.460
Have you heard of something?


00:10:10.460 --> 00:10:12.060
Some people started to use this, Brian.


00:10:12.060 --> 00:10:12.820
It's called AWS.


00:10:12.820 --> 00:10:13.740
Have you heard of this?


00:10:13.740 --> 00:10:14.420
I think so, yeah.


00:10:14.420 --> 00:10:17.300
Yeah, I think like a quarter of the internet


00:10:17.300 --> 00:10:18.620
at least runs on it.


00:10:18.620 --> 00:10:22.980
So the Python API, the Python package


00:10:22.980 --> 00:10:27.460
that used to talk to things like S3 and EC2 and AMI


00:10:27.460 --> 00:10:31.700
and all the stuff over at AWS, it's called Bodo.


00:10:31.700 --> 00:10:34.300
So there's a project brought to our attention


00:10:34.300 --> 00:10:36.060
by Giuseppe Consolo--


00:10:36.060 --> 00:10:37.860
thank you for that, Giuseppe--


00:10:37.860 --> 00:10:42.260
called Mocking Out AWS APIs with Modo.


00:10:42.260 --> 00:10:45.140
So if you're going to mock out Modo, what would you call it?


00:10:45.140 --> 00:10:46.100
Modo.


00:10:46.100 --> 00:10:46.580
So--


00:10:46.580 --> 00:10:47.020
-Oh, nice.


00:10:47.020 --> 00:10:48.820
-Now, it lets you do all sorts of stuff.


00:10:48.820 --> 00:10:54.340
Like if you, say, want to mock out an S3 bucket, right?


00:10:54.340 --> 00:10:56.340
So S3 is like file blob storage.


00:10:56.340 --> 00:10:59.300
You can mock it out and then, like, save a file to it


00:10:59.300 --> 00:11:01.460
and then see if it's there, or preload it with data,


00:11:01.460 --> 00:11:02.700
and then interact with it.


00:11:02.700 --> 00:11:04.540
And it's got all sorts of interesting stuff.


00:11:04.540 --> 00:11:06.980
But if you start to dig through this library,


00:11:06.980 --> 00:11:10.660
it turns out it's got both some really interesting ways


00:11:10.660 --> 00:11:14.460
to test stuff, and it's also super comprehensive.


00:11:14.460 --> 00:11:17.960
So for example, if I want to test working with S3,


00:11:17.960 --> 00:11:21.660
I can say from Modo import mock S3,


00:11:21.660 --> 00:11:24.500
and then I just put an @mock S3 on my method,


00:11:24.500 --> 00:11:25.560
on my test method.


00:11:25.560 --> 00:11:29.080
And now all of my true S3 calls with Bodo


00:11:29.080 --> 00:11:30.540
actually don't go to Bodo.


00:11:30.540 --> 00:11:32.860
they go to this Modo mock version.


00:11:32.860 --> 00:11:33.700
- Oh, that's neat.


00:11:33.700 --> 00:11:35.600
- Yeah, but apparently it doesn't really end there


00:11:35.600 --> 00:11:39.260
because if I wanted to work with like EC2,


00:11:39.260 --> 00:11:42.020
I could import mock EC2 and put that on there


00:11:42.020 --> 00:11:43.780
and say Bodo.workingWith,


00:11:43.780 --> 00:11:45.700
do all the Bodo client EC2, whatever.


00:11:45.700 --> 00:11:48.900
It's like, I don't know why Bodo is so terribly complicated.


00:11:48.900 --> 00:11:49.940
It's like super overloaded.


00:11:49.940 --> 00:11:52.100
But anyway, that's a different time for a different story.


00:11:52.100 --> 00:11:55.180
You can go and like ask for your reserved instances


00:11:55.180 --> 00:11:58.180
and it'll use your mocked out ones and things like that.


00:11:58.180 --> 00:12:01.260
So just like if you were to go flip through all the stuff


00:12:01.260 --> 00:12:05.420
that it supports, ACM, API gateway, auto scaling,


00:12:05.420 --> 00:12:08.220
cloud formation, cloud watch, cloud watch events,


00:12:08.220 --> 00:12:12.700
Cognito identity, data pipeline, DynamoDB, et cetera,


00:12:12.700 --> 00:12:14.140
et cetera, and we're only into the Ds, right?


00:12:14.140 --> 00:12:17.580
It just goes on and on and on of all the different


00:12:17.580 --> 00:12:19.100
AWS things that it mocks out.


00:12:19.100 --> 00:12:22.220
So if you got to test AWS, this is pretty killer.


00:12:22.220 --> 00:12:25.380
Like you can mock out Glacier, IoT, Kinesis,


00:12:25.380 --> 00:12:26.460
whatever, you name it.


00:12:26.460 --> 00:12:30.460
One of the notes you added was that it can run as a standalone server mode


00:12:30.460 --> 00:12:33.560
so that you can even test non-Python code.


00:12:33.560 --> 00:12:34.180
That's right.


00:12:34.180 --> 00:12:34.940
That's right.


00:12:34.940 --> 00:12:38.540
So apparently, I can-- yeah, there's a way to run it as a server


00:12:38.540 --> 00:12:42.660
and then talk to it as if it were some of these services


00:12:42.660 --> 00:12:44.020
as well, which is pretty wild.


00:12:44.020 --> 00:12:45.340
It is incredible.


00:12:45.340 --> 00:12:49.380
And I guess good that Bodo is all of the interface


00:12:49.380 --> 00:12:52.500
so that it's one point to mock it.


00:12:52.500 --> 00:12:53.460
Yeah.


00:12:53.460 --> 00:12:54.180
Yeah, Bodo.


00:12:54.180 --> 00:12:56.340
The reason I don't like it is you say Bodo,


00:12:56.340 --> 00:12:58.620
and you create a client, and you pass it a string.


00:12:58.620 --> 00:13:01.380
The string can be like EC2 or S3.


00:13:01.380 --> 00:13:03.100
And then how you interact with it has


00:13:03.100 --> 00:13:06.580
to do with what factory that string drove it to


00:13:06.580 --> 00:13:08.580
to create a different--


00:13:08.580 --> 00:13:11.060
it's really hard to discover what can I do with this thing,


00:13:11.060 --> 00:13:15.060
because it's like a generic blob that can be converted


00:13:15.060 --> 00:13:16.060
into something more real.


00:13:16.060 --> 00:13:16.660
I don't know.


00:13:16.660 --> 00:13:17.220
It's funky.


00:13:17.220 --> 00:13:19.380
But yes, in this regard, it's definitely very nice.


00:13:19.380 --> 00:13:21.740
Apparently, your life is more complicated than mine.


00:13:21.740 --> 00:13:24.800
I guess I've worked with S3 and Elastic Transcoder


00:13:24.800 --> 00:13:26.740
and all that stuff too much.


00:13:26.740 --> 00:13:28.460
- Yeah, okay, cool.


00:13:28.460 --> 00:13:29.300
- What's next?


00:13:29.300 --> 00:13:30.840
- I was just thinking that maybe we should have done


00:13:30.840 --> 00:13:32.960
a testing code episode with all this testing stuff.


00:13:32.960 --> 00:13:33.800
- Yeah.


00:13:33.800 --> 00:13:35.380
- But one of the things that we have,


00:13:35.380 --> 00:13:38.280
I think we've talked about Mongo Engine before


00:13:38.280 --> 00:13:40.680
and I know that you've used Mongo Engine


00:13:40.680 --> 00:13:42.320
in some of your courses, right?


00:13:42.320 --> 00:13:44.080
- Yeah, for sure, and on the sites.


00:13:44.080 --> 00:13:47.080
- Yeah, and it's like a mappers.


00:13:47.080 --> 00:13:49.920
- They don't say ORM because object relational mapping


00:13:49.920 --> 00:13:50.920
'cause it's not really the R,


00:13:50.920 --> 00:13:53.200
so they say ODM for object document mapper.


00:13:53.200 --> 00:13:56.160
That's like the adapted acronym.


00:13:56.160 --> 00:13:57.480
- So I didn't know that there were other,


00:13:57.480 --> 00:13:59.600
so I knew about Mongo engine because of you,


00:13:59.600 --> 00:14:00.840
but I didn't know about others.


00:14:00.840 --> 00:14:05.080
And here's a project called MicroMongo or MewMongo.


00:14:05.080 --> 00:14:06.720
- Yeah, I think MicroMongo is the way you would say it.


00:14:06.720 --> 00:14:09.120
I think that's the Greek, Mew, yeah.


00:14:09.120 --> 00:14:11.760
- It's a Python MongoDB ODM.


00:14:11.760 --> 00:14:16.200
And it comes because the people that made it had two needs.


00:14:16.200 --> 00:14:18.840
They wanted an asynchronous ODM.


00:14:18.840 --> 00:14:22.000
And for some reason, they felt like it was difficult


00:14:22.000 --> 00:14:26.280
to do serialization and un-serialization of documents


00:14:26.280 --> 00:14:28.000
with existing ODMs.


00:14:28.000 --> 00:14:29.080
And so this one doesn't.


00:14:29.080 --> 00:14:32.040
So it's an asynchronous sort of thing.


00:14:32.040 --> 00:14:36.080
It works directly with some of the popular Mongo drivers,


00:14:36.080 --> 00:14:38.280
like PyMongo, TxMongo--


00:14:38.280 --> 00:14:39.640
that's for Twisted--


00:14:39.640 --> 00:14:42.040
MotorAsyncIO, and MongoMock.


00:14:42.040 --> 00:14:45.080
And I'm kind of excited about MongoMock.


00:14:45.080 --> 00:14:45.720
Yeah, for sure.


00:14:45.720 --> 00:14:48.240
I got to say, this is probably the most interesting aspect


00:14:48.240 --> 00:14:50.560
to this because something like Mongo engine,


00:14:50.560 --> 00:14:51.800
it just works with PyMongo.


00:14:51.800 --> 00:14:52.920
But this one says, you know what,


00:14:52.920 --> 00:14:55.360
we actually can work with all these different foundations,


00:14:55.360 --> 00:15:00.040
which gives it fundamentally different behaviors


00:15:00.040 --> 00:15:00.880
and features, right?


00:15:00.880 --> 00:15:02.560
If you pointed at the Twisted one,


00:15:02.560 --> 00:15:04.920
it can now integrate with Twisted's asynchronous model.


00:15:04.920 --> 00:15:09.920
MotorAsyncIO now lets it plug into true AsyncIO stuff.


00:15:09.920 --> 00:15:11.720
Like you could plug it into Scarlett,


00:15:11.720 --> 00:15:15.480
like you discussed before in those async methods there.


00:15:15.480 --> 00:15:16.760
And then the mocking as well,


00:15:16.760 --> 00:15:18.200
like we're just gonna take the foundation


00:15:18.200 --> 00:15:19.360
and make it a mock version.


00:15:19.360 --> 00:15:20.920
All those are super cool.


00:15:20.920 --> 00:15:23.000
- Yeah, and then also because of this,


00:15:23.000 --> 00:15:24.920
I learned about MongoMock,


00:15:24.920 --> 00:15:28.000
which is a cool way to mock out your Mongo database.


00:15:28.000 --> 00:15:29.560
So, kind of neat.


00:15:29.560 --> 00:15:31.400
Definitely want to try this sometime.


00:15:31.400 --> 00:15:33.800
- Yeah, it definitely looks interesting.


00:15:33.800 --> 00:15:36.600
I don't remember exactly when this got created.


00:15:36.600 --> 00:15:37.720
Do you know what GitHub needs?


00:15:37.720 --> 00:15:40.920
Is it needs a, this project was created on this day, right?


00:15:40.920 --> 00:15:42.480
Because you can go back to the commits,


00:15:42.480 --> 00:15:43.880
but if there's thousands of commits,


00:15:43.880 --> 00:15:46.520
you've got to like infinite scroll your way back


00:15:46.520 --> 00:15:48.760
to the origins.


00:15:48.760 --> 00:15:50.440
But anyway, yeah, it's really cool.


00:15:50.440 --> 00:15:52.660
I think if I had known about this at first,


00:15:52.660 --> 00:15:54.680
I might have even chosen this over Mongo engine.


00:15:54.680 --> 00:15:56.440
But yeah, it's really nice.


00:15:56.440 --> 00:16:00.080
It's nice it has 90% plus test coverage.


00:16:00.080 --> 00:16:01.960
I really like the different foundations,


00:16:01.960 --> 00:16:05.200
which means you learn like one ODM style of programming,


00:16:05.200 --> 00:16:08.060
but then you can use it in these different situations.


00:16:08.060 --> 00:16:09.000
Yeah, super cool.


00:16:09.000 --> 00:16:09.840
I like it.


00:16:09.840 --> 00:16:11.560
And also I didn't know about MongoMock either,


00:16:11.560 --> 00:16:13.440
but now I'm excited about it.


00:16:13.440 --> 00:16:14.320
That looks cool.


00:16:14.320 --> 00:16:15.160
Nice.


00:16:15.160 --> 00:16:18.640
So let me hit you with an opinionated piece here,


00:16:18.640 --> 00:16:22.360
and you can give me some feedback.


00:16:22.360 --> 00:16:24.640
Let me know what you think about it.


00:16:24.640 --> 00:16:25.480
Some parts of it--


00:16:25.480 --> 00:16:26.400
- Okay, I got my tomatoes ready.


00:16:26.400 --> 00:16:27.240
- Yeah, perfect.


00:16:27.240 --> 00:16:28.060
Get ready to throw 'em.


00:16:28.060 --> 00:16:29.060
I'll get ready to dodge 'em.


00:16:29.060 --> 00:16:34.060
So this article was sent over by Tyler Madison,


00:16:34.060 --> 00:16:36.080
a listener, thanks for sending that over.


00:16:36.080 --> 00:16:38.760
Now, it's called the Single Responsibility Principle


00:16:38.760 --> 00:16:41.440
in Python, and the Single Responsibility Principle,


00:16:41.440 --> 00:16:46.440
or SRP comes out of this larger group of design principles,


00:16:46.440 --> 00:16:48.360
coding principles, architecture principles,


00:16:48.360 --> 00:16:50.980
something like that, called SOLID.


00:16:50.980 --> 00:16:53.540
So S is the single responsibility principle,


00:16:53.540 --> 00:16:55.740
O is the open-close principle,


00:16:55.740 --> 00:16:58.120
L is Liskov substitution principle.


00:16:58.120 --> 00:17:00.660
And these even come in really interesting


00:17:00.660 --> 00:17:03.320
demotivator style posters.


00:17:03.320 --> 00:17:05.580
I don't know if you're all familiar with demotivators.


00:17:05.580 --> 00:17:07.220
You're probably familiar with motivators.


00:17:07.220 --> 00:17:11.100
Like you will see this probably in the entryway,


00:17:11.100 --> 00:17:12.460
like kind of near the CEO office,


00:17:12.460 --> 00:17:15.880
it's like probably got a giant eagle soaring above clouds,


00:17:15.880 --> 00:17:18.860
like together we can fly higher than you ever dreamed


00:17:18.860 --> 00:17:20.420
or something stupid like that.


00:17:20.420 --> 00:17:23.100
Well, the demotivators take pictures like that


00:17:23.100 --> 00:17:26.720
but put like negative captions and connotations.


00:17:26.720 --> 00:17:28.980
So these are really interesting things.


00:17:28.980 --> 00:17:31.060
For example, the Liskov substitution one


00:17:31.060 --> 00:17:33.820
has a duck and a rubber duck in the water.


00:17:33.820 --> 00:17:36.380
And it says, if it looks like a duck and quacks like a duck,


00:17:36.380 --> 00:17:37.400
but it needs batteries,


00:17:37.400 --> 00:17:39.300
you probably have the wrong abstraction, right?


00:17:39.300 --> 00:17:40.140
So there's all these.


00:17:40.140 --> 00:17:44.580
There's all these really cool demotivator style posters


00:17:44.580 --> 00:17:45.880
around the solid principles.


00:17:45.880 --> 00:17:47.920
And I think the solid principles are pretty neat.


00:17:47.920 --> 00:17:50.840
You can go overboard with them, but they are pretty powerful.


00:17:50.840 --> 00:17:53.400
So this article focuses specifically


00:17:53.400 --> 00:17:56.040
on the single responsibility principle.


00:17:56.040 --> 00:17:59.000
And I think talking about it is really interesting.


00:17:59.000 --> 00:18:02.820
I think the solution is unexpected.


00:18:02.820 --> 00:18:03.760
And it made me think.


00:18:03.760 --> 00:18:05.600
And at first, I'm like, oh, I don't like it.


00:18:05.600 --> 00:18:08.400
But after a while, I'm like, but it is pretty creative.


00:18:08.400 --> 00:18:10.640
and things that make me think I like to share with people.


00:18:10.640 --> 00:18:12.840
So I guess that's why I chose it.


00:18:12.840 --> 00:18:14.040
And it starts out by saying,


00:18:14.040 --> 00:18:16.600
this article will guide you through the complex process


00:18:16.600 --> 00:18:18.680
of writing simple code.


00:18:18.680 --> 00:18:21.200
And it talks about stuff that you would expect, right?


00:18:21.200 --> 00:18:24.160
So there's some kind of super long function,


00:18:24.160 --> 00:18:26.280
says this is terrible, you can't test it,


00:18:26.280 --> 00:18:29.360
you can't reason about it because it's doing five things.


00:18:29.360 --> 00:18:31.600
How do you know whether you're doing too much?


00:18:31.600 --> 00:18:33.900
You can look at measures like the cyclomatic complexity,


00:18:33.900 --> 00:18:37.000
the Halstead complexity thing, the number of arguments,


00:18:37.000 --> 00:18:44.040
number of statements, body length, all that kind of stuff. And that'll help you condense down into,


00:18:44.040 --> 00:18:48.680
say, reasonable classes or functions. And this is really mostly focusing on functions. So alright,


00:18:48.680 --> 00:18:53.080
so let's think of another simple example, I want to calculate the price of a bunch of products,


00:18:53.080 --> 00:18:59.080
given a list of products. And it seems all well and good, except for that it also happens to


00:18:59.080 --> 00:19:04.120
use some kind of logger object and log out the price. Well, now, this thing is doing two things,


00:19:04.120 --> 00:19:06.360
It's one calculating and logging it out.


00:19:06.360 --> 00:19:08.740
What if you want to test it or work with it


00:19:08.740 --> 00:19:11.520
with its computation bits, but not the logging bit


00:19:11.520 --> 00:19:12.520
or something like that?


00:19:12.520 --> 00:19:15.680
So how do you go around dealing with these types


00:19:15.680 --> 00:19:16.920
of dependencies?


00:19:16.920 --> 00:19:19.680
This kind of goes back to the testing side of things, Brian.


00:19:19.680 --> 00:19:24.600
How do you deal with things like files and database connections


00:19:24.600 --> 00:19:30.160
or database connection objects and loggers and whatnot?


00:19:30.160 --> 00:19:36.080
So this guy takes us through this whole sort of thought process, which is really good,


00:19:36.080 --> 00:19:38.160
and says, you know what we're going to do?


00:19:38.160 --> 00:19:42.560
We're going to come up with callable classes.


00:19:42.560 --> 00:19:48.560
And the callable classes will be given the dependencies.


00:19:48.560 --> 00:19:54.000
And then you call them like functions, allowing you to pass different dependencies or other


00:19:54.000 --> 00:19:55.000
dependencies.


00:19:55.000 --> 00:20:00.880
And now that seems like a really bad idea, but he's using, they're using a lot of it.


00:20:00.880 --> 00:20:05.400
My first thought was, okay, well, that's, you know, that's like a curvy shaped weird


00:20:05.400 --> 00:20:08.480
hammer that I guess you could hit it with.


00:20:08.480 --> 00:20:10.400
But it's using a lot of interesting Python features.


00:20:10.400 --> 00:20:17.760
So if you create a class that has, it's a data class, you set frozen equal to true slots


00:20:17.760 --> 00:20:18.760
equal to true.


00:20:18.760 --> 00:20:24.360
It means all of its variables become internal and private only said it'd be private or final


00:20:24.360 --> 00:20:26.520
rather, so it can't be derived from.


00:20:26.520 --> 00:20:28.520
And you give it a call function.


00:20:28.520 --> 00:20:30.200
It turns out to be pretty interesting.


00:20:30.200 --> 00:20:34.120
And then they talk about some dependency injection frameworks


00:20:34.120 --> 00:20:36.360
that work with these types of classes.


00:20:36.360 --> 00:20:41.240
In the end, it comes up with a pretty interesting way


00:20:41.240 --> 00:20:43.640
to create these things and then call them.


00:20:43.640 --> 00:20:46.520
I'm not sure that I love it, but it definitely made me think.


00:20:46.520 --> 00:20:48.180
And I was a little bit surprised by it.


00:20:48.180 --> 00:20:49.880
So I thought you all might enjoy it.


00:20:49.880 --> 00:20:50.640
Yeah.


00:20:50.640 --> 00:20:54.000
It's an entertaining read, I'll give you that.


00:20:54.000 --> 00:20:57.400
Look at the very last code fragment in that article, Brian.


00:20:57.400 --> 00:21:00.040
OK.


00:21:00.040 --> 00:21:03.120
The last code fragment that says,


00:21:03.120 --> 00:21:06.520
like, send postcards equals container dot resolve.


00:21:06.520 --> 00:21:07.160
Send to these--


00:21:07.160 --> 00:21:07.960
Yes, exactly.


00:21:07.960 --> 00:21:09.880
And the little bit above it, yeah.


00:21:09.880 --> 00:21:10.880
Yeah, yeah.


00:21:10.880 --> 00:21:13.880
So it is powerful in that you can create these objects.


00:21:13.880 --> 00:21:16.640
You can pass in mock objects without actually using


00:21:16.640 --> 00:21:18.240
mock.patch and stuff.


00:21:18.240 --> 00:21:20.200
It's interesting.


00:21:20.200 --> 00:21:23.480
I don't think that I would go write software


00:21:23.480 --> 00:21:27.940
using this today, but I might use some of the concepts


00:21:27.940 --> 00:21:28.780
of it, maybe.


00:21:28.780 --> 00:21:32.040
- My opinion is that it is possible to do this,


00:21:32.040 --> 00:21:35.620
and it might make sure that you don't get fired


00:21:35.620 --> 00:21:37.780
'cause nobody else can edit your code.


00:21:37.780 --> 00:21:38.940
- Yeah.


00:21:38.940 --> 00:21:42.500
- Okay, so I do like the single responsibility part


00:21:42.500 --> 00:21:43.980
of solid.


00:21:43.980 --> 00:21:48.980
I am not a fan of the Liskov substitution principle


00:21:48.980 --> 00:21:53.360
or the open-closed, or dependency injection


00:21:53.360 --> 00:21:55.240
is something that frightens me.


00:21:55.240 --> 00:21:58.080
These are things that were put in place


00:21:58.080 --> 00:22:00.240
to work around limitations of other languages


00:22:00.240 --> 00:22:01.840
like Java and C.


00:22:01.840 --> 00:22:03.960
And I'm gonna get tomatoes thrown at me


00:22:03.960 --> 00:22:05.480
for coming up with saying this,


00:22:05.480 --> 00:22:07.840
but some problems are complex.


00:22:07.840 --> 00:22:11.140
And you can remove the complexity


00:22:11.140 --> 00:22:12.560
out of one part of your code,


00:22:12.560 --> 00:22:14.760
but it moves to somewhere else.


00:22:14.760 --> 00:22:17.820
And maybe it makes your unit tests better,


00:22:17.820 --> 00:22:19.960
but your system tests are just the same.


00:22:19.960 --> 00:22:22.160
- Or it makes writing regular code super hard


00:22:22.160 --> 00:22:25.120
because you're like, where did this database connection come


00:22:25.120 --> 00:22:25.620
from?


00:22:25.620 --> 00:22:29.080
I have no idea how I got here, right?


00:22:29.080 --> 00:22:29.580
Yeah.


00:22:29.580 --> 00:22:30.080
It is a thing.


00:22:30.080 --> 00:22:31.480
It's an interesting article.


00:22:31.480 --> 00:22:32.160
I'm not a fan.


00:22:32.160 --> 00:22:34.760
Yeah, I submit this to everyone as a thought piece,


00:22:34.760 --> 00:22:37.120
not necessarily as guidance.


00:22:37.120 --> 00:22:39.200
Yeah, but I'm not willing to say that it's wrong.


00:22:39.200 --> 00:22:40.280
It's just my opinion.


00:22:40.280 --> 00:22:42.040
All right, well, I think we should leave it


00:22:42.040 --> 00:22:43.320
there for our main topics.


00:22:43.320 --> 00:22:45.480
Got anything you want to share with folks this week?


00:22:45.480 --> 00:22:46.440
I've got one quick one.


00:22:46.440 --> 00:22:47.820
Oh, you'd share it with us, then.


00:22:47.820 --> 00:22:51.880
So do you know Bob and Julian over at PyBytes?


00:22:51.880 --> 00:22:53.260
- Of course, right?


00:22:53.260 --> 00:22:57.300
Well, they recently have their Code Challenges platform,


00:22:57.300 --> 00:23:00.940
which is at codechallenges.is, right?


00:23:00.940 --> 00:23:02.260
The .es extension, right?


00:23:02.260 --> 00:23:05.860
Just Code Challenges, but the period between G and ES.


00:23:05.860 --> 00:23:09.200
And that's a place where you can go do practice exercises,


00:23:09.200 --> 00:23:11.240
and it's a cool platform they've created.


00:23:11.240 --> 00:23:14.580
And they just came out with Byte 220,


00:23:14.580 --> 00:23:16.660
where they walk people through


00:23:16.660 --> 00:23:18.900
analyzing the Python Bytes RSS feed.


00:23:18.900 --> 00:23:19.740
- Oh, cool.


00:23:19.740 --> 00:23:20.560
- Yeah, so you can go in there,


00:23:20.560 --> 00:23:22.840
It shows you how to use Feed Parser,


00:23:22.840 --> 00:23:25.080
which is a really cool way to parse RSS feeds.


00:23:25.080 --> 00:23:28.400
Go in there and actually answer questions.


00:23:28.400 --> 00:23:30.440
What were they looking at?


00:23:30.440 --> 00:23:32.960
It was things like, what is the average duration


00:23:32.960 --> 00:23:34.680
of an episode in seconds?


00:23:34.680 --> 00:23:37.660
What are the number of episodes with special guests?


00:23:37.660 --> 00:23:40.280
Like Trey was on the show last week, for example.


00:23:40.280 --> 00:23:42.640
What are the most common domain names we mentioned?


00:23:42.640 --> 00:23:45.040
Like GitHub probably is right up near the top


00:23:45.040 --> 00:23:46.440
and things like that.


00:23:46.440 --> 00:23:48.920
So it's pretty cool that there's like this guided challenge


00:23:48.920 --> 00:23:50.440
to get through our platform.


00:23:50.440 --> 00:23:51.560
at least our platform's data.


00:23:51.560 --> 00:23:53.200
- Yeah, I'll have to come up with ways


00:23:53.200 --> 00:23:56.240
in our show notes to break their challenge.


00:23:56.240 --> 00:23:57.080
No.


00:23:57.080 --> 00:23:58.600
(laughing)


00:23:58.600 --> 00:23:59.840
- Yeah, that sounds good.


00:23:59.840 --> 00:24:00.680
So that's all fun.


00:24:00.680 --> 00:24:03.240
People can check that out if they're interested.


00:24:03.240 --> 00:24:04.360
You ready for some jokes?


00:24:04.360 --> 00:24:05.200
- Definitely.


00:24:05.200 --> 00:24:08.680
- These come from Web Boss's dad jokes GitHub repo.


00:24:08.680 --> 00:24:10.640
So they're pretty short and sweet,


00:24:10.640 --> 00:24:13.800
but they're in the dad joke style,


00:24:13.800 --> 00:24:16.680
which is kind of bad jokes that are hopefully funny.


00:24:16.680 --> 00:24:19.720
So what do you get when you cross a computer and a lifeguard?


00:24:19.720 --> 00:24:20.560
- I don't know, what?


00:24:20.560 --> 00:24:21.480
- A screensaver.


00:24:21.480 --> 00:24:25.420
When you cross a computer with an elephant.


00:24:25.420 --> 00:24:27.760
Lots of memory.


00:24:27.760 --> 00:24:28.600
- Oh yeah.


00:24:28.600 --> 00:24:29.420
- Lots of memory.


00:24:29.420 --> 00:24:30.840
- Lots of memory.


00:24:30.840 --> 00:24:31.660
Okay.


00:24:31.660 --> 00:24:32.500
- Nice.


00:24:32.500 --> 00:24:34.880
- So I'm gonna share this because I made it up


00:24:34.880 --> 00:24:36.900
and I thought it was funny, but it's an anti-joke.


00:24:36.900 --> 00:24:39.640
So a Python developer, a PHP developer,


00:24:39.640 --> 00:24:41.480
a C# developer, and a Go developer


00:24:41.480 --> 00:24:42.720
all went to lunch together.


00:24:42.720 --> 00:24:43.640
- Oh my gosh, what happened?


00:24:43.640 --> 00:24:46.440
- They had a nice lunch and all got along fine.


00:24:46.440 --> 00:24:47.280
- Perfect.


00:24:47.280 --> 00:24:48.880
Of course they should.


00:24:48.880 --> 00:24:55.280
developers. Anyway, thanks. Awesome. Yeah, well, thanks. Thanks as always, Brian. See you later.


00:24:55.280 --> 00:24:59.840
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. That's


00:24:59.840 --> 00:25:06.400
Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news


00:25:06.400 --> 00:25:11.120
item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout


00:25:11.120 --> 00:25:16.000
for sharing something cool. On behalf of myself and Brian Aukin, this is Michael Kennedy. Thank


00:25:16.000 --> 00:25:18.000
Thank you for listening and sharing this podcast


00:25:18.000 --> 00:25:19.640
with your friends and colleagues.

