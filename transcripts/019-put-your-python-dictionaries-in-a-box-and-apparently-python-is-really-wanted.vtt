WEBVTT

00:00:00.001 --> 00:00:08.880
Hello and welcome to Python Bytes. This is episode 19, where we're going to deliver Python news and headlines directly to your earbuds.

00:00:08.880 --> 00:00:15.500
It's recorded on Sunday, March 26, 2017. I'm Michael Kennedy.

00:00:15.500 --> 00:00:16.480
And I'm Brian Ockin.

00:00:16.480 --> 00:00:19.480
And we got some Python news for you. Hey, Brian, how's it going?

00:00:19.480 --> 00:00:20.520
It's going really good.

00:00:20.520 --> 00:00:24.440
Yeah. I'm excited about what you picked out. I want to learn about the ones that you got.

00:00:24.440 --> 00:00:28.740
And I have some sort of outer loop ones that are really, really different.

00:00:28.860 --> 00:00:33.300
I think people will be interested to hear about them. But let's start with what you got on tap.

00:00:33.300 --> 00:00:40.240
Well, we're going to start with a story about exceptions in Python 3, not exceptions in Python 3.

00:00:40.240 --> 00:00:51.040
But there is a person named Josh or Quix on GitHub who wrote a little utility for Python, which is actually really cool.

00:00:51.040 --> 00:00:58.140
And it's called Better Exceptions. And it is just it's just a it's a hook that actually is pretty clever.

00:00:58.140 --> 00:01:12.860
But it hooks into your exceptions. And so when you're like, especially when you're developing and debugging or dogfooding your own products, it will show exceptions that are color coded and split out everything that's in there.

00:01:13.080 --> 00:01:21.120
And we have the link on our show notes. But there's there's a great picture that you can see that that shows the exceptions as they yeah.

00:01:21.120 --> 00:01:25.340
What I like about this is that, like you said, a picture is what you have there.

00:01:25.340 --> 00:01:33.900
And we talked about Peter, too, last week about making that sort of bland, just flat list into like something really readable and colorized and nice.

00:01:33.900 --> 00:01:35.720
And this kind of does that for exceptions, right?

00:01:35.720 --> 00:01:37.880
Yeah, it does. And it was really great.

00:01:38.160 --> 00:01:43.160
And Josh works, he mentions and then it was he posted on Reddit as well.

00:01:43.160 --> 00:01:48.380
And on Reddit, he mentions that he he works only in Python 2.7.

00:01:48.380 --> 00:01:52.140
So he wasn't sure how to do Python 3 at first.

00:01:52.140 --> 00:01:55.080
And he put this together pretty quickly and then put it out there for everybody.

00:01:55.540 --> 00:02:02.960
And immediately the conversation on Reddit turned to to Python 3 and why why isn't there Python 3 support?

00:02:02.960 --> 00:02:12.820
And one of the the great things about this story is Florian, who is Paradox Zero on both on GitHub and on Reddit,

00:02:12.820 --> 00:02:17.820
said instead of adding to the complaints list, he went out and made it.

00:02:17.820 --> 00:02:21.380
He forked it, put in a pull request with a Python 3 fix.

00:02:21.820 --> 00:02:26.560
And and within like eight hours, the whole thing was merged and it was Python 3 as well.

00:02:26.560 --> 00:02:29.600
Yeah. So like eight hours of the thing being announced.

00:02:29.600 --> 00:02:32.660
It came out without Python 3 support.

00:02:32.660 --> 00:02:35.220
The community went in and added Python 3 support.

00:02:35.220 --> 00:02:36.100
It's something like this, right?

00:02:36.100 --> 00:02:37.880
Yeah. And it's just really incredible.

00:02:37.880 --> 00:02:43.800
And I actually reached out to both of them and wanted to know if they had had anything to add to the story.

00:02:43.800 --> 00:02:50.780
And like I was saying, Josh wasn't he didn't know how to do make sure that it was running on both because he normally works on Python 2.

00:02:51.060 --> 00:02:59.660
And Florian, apparently he supports this tool called WDB, which is a web debugger, which actually we should explore a little bit later.

00:02:59.660 --> 00:03:00.480
It's pretty cool.

00:03:00.480 --> 00:03:04.920
Anyway, he's used to doing that two and three all the time.

00:03:04.920 --> 00:03:09.720
So it wasn't that big of a jump for him to add that support, which is great.

00:03:09.720 --> 00:03:10.840
So I like it.

00:03:10.840 --> 00:03:12.040
Yeah, I think it's cool.

00:03:12.040 --> 00:03:13.260
I think better exceptions.

00:03:13.260 --> 00:03:15.360
The package is really cool.

00:03:15.360 --> 00:03:21.180
And I think the Python 3 story of eight hours from the time it was published, somebody went and said, there's a problem with this.

00:03:21.180 --> 00:03:22.200
It doesn't support Python.

00:03:22.200 --> 00:03:23.400
It only supports legacy Python.

00:03:23.400 --> 00:03:24.380
We have to fix it.

00:03:24.380 --> 00:03:25.140
That's really cool.

00:03:25.520 --> 00:03:28.960
I'm not sure if that would have happened four years ago, right?

00:03:28.960 --> 00:03:29.540
Right.

00:03:29.540 --> 00:03:31.200
And it's really great.

00:03:31.200 --> 00:03:42.800
The other thing, when I tried this out, and one of the things that I noticed about it is you have to put an import statement in the modules that you want to use this better exceptions.

00:03:43.300 --> 00:03:47.080
Paradox Zero also thought maybe we should modify that.

00:03:47.080 --> 00:03:56.040
So he added another GitHub project called Better Exceptions Hook that if you include that as well, you don't have to do that import statement.

00:03:56.040 --> 00:03:57.080
Oh, nice.

00:03:57.080 --> 00:03:58.060
It's pretty great.

00:03:58.060 --> 00:03:59.000
Yeah, that's really great.

00:03:59.000 --> 00:03:59.560
Cool.

00:03:59.560 --> 00:04:01.160
So everyone check out Better Exceptions.

00:04:01.160 --> 00:04:02.160
Check out the Reddit thread.

00:04:02.160 --> 00:04:06.000
We'll link to that, of course, maybe as the primary thing and all the stuff's in the show notes.

00:04:06.000 --> 00:04:06.400
Very cool.

00:04:06.400 --> 00:04:11.880
One of the things I always look forward to, Brian, is the Stack Overflow Developer Survey.

00:04:12.480 --> 00:04:24.380
Stack Overflow is such a powerhouse in the software space, and they get quite a bit of feedback on their surveys, like 100,000 people filling out the survey or something.

00:04:24.380 --> 00:04:26.380
And it's really comprehensive.

00:04:26.380 --> 00:04:35.580
So this year, they just released a couple days ago the 2017 survey, and it has good news for Python in there.

00:04:35.580 --> 00:04:36.040
Really?

00:04:36.040 --> 00:04:38.720
And it looks like they get results from all over the world.

00:04:38.720 --> 00:04:39.440
They do, yeah.

00:04:39.440 --> 00:04:41.360
They get a ton of results, like I said.

00:04:41.360 --> 00:04:48.000
They have stuff on gender equity, pay across different regions, job demand, all sorts of stuff like that.

00:04:48.000 --> 00:04:59.540
But the most interesting thing to me is really around the programming languages that are being used or desire behind working with certain technologies and so on.

00:05:00.080 --> 00:05:01.920
So there's some good news here for Python.

00:05:01.920 --> 00:05:10.980
If you look at the most popular technologies, we talked recently about Python being the second most popular technology behind JavaScript on GitHub.

00:05:10.980 --> 00:05:15.180
On Stack Overflow, in terms of questions, it's number five.

00:05:15.180 --> 00:05:24.100
And given that it's pretty easy to work with relative to things like Java, which might generate more questions, I think that's pretty interesting.

00:05:24.360 --> 00:05:25.280
So that's cool.

00:05:25.280 --> 00:05:26.820
But let's go down a little bit farther.

00:05:26.820 --> 00:05:34.200
They have areas where they talk about the frameworks you're working with, the databases that people are using, platforms.

00:05:34.200 --> 00:05:38.660
But one of the things that caught my attention is languages over time.

00:05:39.100 --> 00:05:46.880
So we've got things like C Sharp, JavaScript, Objective-C, Node.js, and whatever, Java itself.

00:05:46.880 --> 00:05:58.920
If you look at Python over the last five years, it went from 22% to 33%, and it's got like a hockey stick curve going to it.

00:05:58.920 --> 00:06:00.520
So it's not just it's going up.

00:06:00.520 --> 00:06:02.140
It's going up and the rate is increasing.

00:06:02.140 --> 00:06:03.180
How cool is that?

00:06:03.180 --> 00:06:03.960
That is very neat.

00:06:03.960 --> 00:06:04.600
I like it.

00:06:04.660 --> 00:06:07.460
If you compare it to Java, Java's on a pretty downward trend.

00:06:07.460 --> 00:06:09.180
C Sharp is on a downward trend.

00:06:09.180 --> 00:06:11.460
C++, downward trend.

00:06:11.460 --> 00:06:13.020
So that's cool.

00:06:13.020 --> 00:06:19.260
One other one that really I like, there's a section called Most Loved, Most Dreaded, and Most Wanted.

00:06:19.260 --> 00:06:23.900
So Python ranks very highly in the most loved.

00:06:23.900 --> 00:06:27.360
And just let's see how the story is for most dreaded.

00:06:27.360 --> 00:06:39.140
It turns out Visual Basic 6, VBA, CoffeeScript, and VB.net, three out of four for Visual Basic, are in the most dreaded technologies, just with MATLAB, Tal, and along.

00:06:39.140 --> 00:06:43.680
But if you go over to Most Wanted Technology, Python, by a wide margin.

00:06:43.680 --> 00:06:44.080
Oh, wow.

00:06:44.080 --> 00:06:45.320
Out of everything.

00:06:45.320 --> 00:06:46.220
That's great.

00:06:46.220 --> 00:06:50.780
Over JavaScript, over Go, over TypeScript, over Swift, over Rust, whatever.

00:06:50.780 --> 00:06:54.300
It's 20% of the people said, that's the thing I want most.

00:06:54.300 --> 00:06:56.080
Who responded about that?

00:06:56.080 --> 00:06:56.760
Isn't that cool?

00:06:56.760 --> 00:06:58.160
What does Most Wanted mean?

00:06:58.160 --> 00:07:04.340
It means, if you could choose, they ask, what are you using for your day-to-day job?

00:07:04.340 --> 00:07:07.260
And they ask, if you could use anything, what would you use?

00:07:07.260 --> 00:07:08.060
Oh, okay.

00:07:08.060 --> 00:07:08.360
Yeah?

00:07:08.360 --> 00:07:13.780
Just to round it out, one more thing, since I've been going on and on about Mongo and stuff like that recently.

00:07:13.780 --> 00:07:21.840
If you go to the Database section and look at the Most Wanted database, MongoDB is like more than 2x over second place.

00:07:21.840 --> 00:07:23.860
So, also quite interesting.

00:07:23.860 --> 00:07:28.060
Well, working with document databases is just, I like it.

00:07:28.060 --> 00:07:29.020
If you can do it.

00:07:29.020 --> 00:07:29.780
It's so glorious.

00:07:29.780 --> 00:07:30.120
Yeah.

00:07:30.120 --> 00:07:32.280
If you can make it work, it is so, so nice.

00:07:32.280 --> 00:07:34.140
We'll have to cover that in more detail.

00:07:34.140 --> 00:07:37.780
But I strongly encourage you guys to go and have a look at this survey.

00:07:37.780 --> 00:07:39.460
It's always really insightful.

00:07:40.020 --> 00:07:42.760
They had 64,000 developers in this response.

00:07:42.760 --> 00:07:43.580
It's not 100,000.

00:07:43.580 --> 00:07:43.780
Sorry.

00:07:43.780 --> 00:07:47.900
But still a huge number to make this highly statistically relevant, right?

00:07:47.900 --> 00:07:48.260
Yeah.

00:07:48.260 --> 00:07:49.520
And we need to get more.

00:07:49.520 --> 00:07:56.520
It looks like there's still, with surveys like this, we still have more white dudes answering than other people.

00:07:56.520 --> 00:07:56.800
Yeah.

00:07:57.480 --> 00:07:59.040
That is an ongoing problem.

00:07:59.040 --> 00:08:00.320
But what was it there?

00:08:00.320 --> 00:08:00.540
Okay.

00:08:00.540 --> 00:08:02.700
So, since you brought that up, I was thinking about it.

00:08:02.700 --> 00:08:03.780
I didn't want to go on too long.

00:08:03.780 --> 00:08:10.000
But there's a section in here that talks about, near the beginning, it talks about demographics.

00:08:10.320 --> 00:08:13.900
And it says males, like, 88.6%.

00:08:13.900 --> 00:08:16.460
Females, 7.6%.

00:08:16.460 --> 00:08:20.260
White dudes are, like, 74%.

00:08:20.260 --> 00:08:25.000
If you throw in Asians, it's super, super near, like, the top.

00:08:25.000 --> 00:08:31.980
But there's also a section somewhere in there that talks about years of coding experience and demographics over time.

00:08:31.980 --> 00:08:33.180
And they break that down.

00:08:33.180 --> 00:08:35.960
They don't break it down by anything but male, female, I don't think.

00:08:35.960 --> 00:08:41.020
But if you look at less than one year experience, there's more women than men.

00:08:41.020 --> 00:08:43.220
If you look at one to two, there's more women than men.

00:08:43.220 --> 00:08:48.180
It's not until you get into five years of experience that there are more men.

00:08:48.180 --> 00:08:50.860
And then after that, it's gone, right?

00:08:50.860 --> 00:08:52.280
It's all men all the time.

00:08:52.280 --> 00:08:59.820
But that's pretty encouraging to me because that means people coming into the industry, there's a lot of women coming in, actually.

00:08:59.820 --> 00:09:02.260
Yeah, that is really encouraging.

00:09:02.260 --> 00:09:02.840
That's good.

00:09:02.840 --> 00:09:03.060
Yeah.

00:09:03.060 --> 00:09:06.300
So it's right that it is kind of bleak in that sense.

00:09:06.300 --> 00:09:10.000
But there's a bit of a shining, at least a positive data point there.

00:09:10.000 --> 00:09:10.920
I think that's great.

00:09:10.920 --> 00:09:11.840
What do you got next for us?

00:09:11.840 --> 00:09:14.300
Next, I've got a project called Box.

00:09:14.300 --> 00:09:18.280
And there was an article on Code Calamity.

00:09:18.280 --> 00:09:19.280
That's a cool name.

00:09:19.280 --> 00:09:20.140
Anyway.

00:09:20.140 --> 00:09:20.840
That is a cool name.

00:09:20.960 --> 00:09:23.200
This is a really pretty simple tool.

00:09:23.200 --> 00:09:28.360
But you just take a dictionary and throw it into an object class called Box.

00:09:28.360 --> 00:09:33.180
And what it does is it makes it so that you can use dot notation instead of that annoying.

00:09:33.180 --> 00:09:35.820
I mean, the dictionary notation is okay.

00:09:35.820 --> 00:09:38.360
But it just takes so many characters to type.

00:09:38.360 --> 00:09:38.940
Yeah.

00:09:39.380 --> 00:09:39.720
Yeah.

00:09:39.720 --> 00:09:41.320
The brackets and the quotes.

00:09:41.320 --> 00:09:50.400
And for single word elements in your indexes in your dictionary, Box makes it so you can just use dot notation instead.

00:09:50.400 --> 00:09:51.820
It's pretty cool.

00:09:51.820 --> 00:09:52.620
That is cool.

00:09:52.620 --> 00:09:53.740
I am so using Box.

00:09:54.240 --> 00:10:00.300
So what's really nice about it, it feels like it's a little bit similar to like name tuple type things.

00:10:00.300 --> 00:10:03.560
I mean, I guess it's dictionaries rather than names for the tuples.

00:10:03.560 --> 00:10:06.640
But still, it's like kind of like that.

00:10:06.640 --> 00:10:11.520
Like you take this thing you have to index into and you turn it into a thing you can use dot names on.

00:10:11.520 --> 00:10:18.500
And while that's pretty helpful, what I think is really cool looking at this is you can have like a deep object graph.

00:10:18.500 --> 00:10:21.180
So in their example, they have a box which has movies.

00:10:21.180 --> 00:10:22.980
One of the movies is Spaceballs.

00:10:22.980 --> 00:10:25.440
Each individual movie has a rating.

00:10:25.440 --> 00:10:28.700
And you can just say mybox.movies.spaceballs.rating.

00:10:28.700 --> 00:10:35.600
And so if that was dictionaries, that would be a lot of this dot get this dot get this dot get this or bracket bracket bracket bracket bracket, right?

00:10:35.600 --> 00:10:35.900
Yeah.

00:10:35.900 --> 00:10:41.620
If you're trying to test each one of those, then that's even less fun to test that it's in the dictionary.

00:10:41.620 --> 00:10:41.960
Yeah.

00:10:41.960 --> 00:10:44.600
And it doesn't like obviously I was trying it out.

00:10:44.600 --> 00:10:48.900
Like one of the movies that they showed in their demo was Robin Hood Men in Tights.

00:10:48.900 --> 00:10:50.540
Also a good movie.

00:10:50.880 --> 00:10:53.240
Anyway, it has spaces in it.

00:10:53.240 --> 00:10:58.560
So obviously you can't make a dot name thing with something with spaces in it.

00:10:58.560 --> 00:11:00.720
So it just punts and doesn't do it for those.

00:11:00.720 --> 00:11:01.820
So it's only.

00:11:01.820 --> 00:11:02.280
Right.

00:11:02.280 --> 00:11:03.260
Okay.

00:11:03.260 --> 00:11:03.860
Anyway.

00:11:03.860 --> 00:11:04.120
Yeah.

00:11:04.120 --> 00:11:06.380
So those you have to basically use the brackets.

00:11:06.380 --> 00:11:07.180
Treat it like a dictionary.

00:11:07.180 --> 00:11:07.660
Yeah.

00:11:07.660 --> 00:11:09.120
But it's enough.

00:11:09.120 --> 00:11:12.980
Anything that saves me a little bit of typing and makes my code look a little cleaner.

00:11:12.980 --> 00:11:14.100
I'm going to give it a try.

00:11:14.100 --> 00:11:14.800
Yeah.

00:11:14.800 --> 00:11:15.340
This is cool.

00:11:15.340 --> 00:11:18.360
I think the thing that's awesome about this is it makes your code more readable.

00:11:18.360 --> 00:11:18.800
Yeah.

00:11:19.020 --> 00:11:19.380
Definitely.

00:11:19.380 --> 00:11:19.460
Definitely.

00:11:19.460 --> 00:11:20.160
Okay, cool.

00:11:20.160 --> 00:11:21.680
Well, thanks for teaching me about Box.

00:11:21.680 --> 00:11:25.960
So it wasn't very long ago that we just talked about Python 3.6 being released, right?

00:11:25.960 --> 00:11:26.620
Yeah.

00:11:26.620 --> 00:11:27.520
Very exciting.

00:11:27.520 --> 00:11:27.840
Yeah.

00:11:27.840 --> 00:11:28.580
It's super exciting.

00:11:28.580 --> 00:11:29.500
That's a big release.

00:11:29.500 --> 00:11:33.560
There was a lot of performance improvements, both in memory and CPU time.

00:11:33.800 --> 00:11:37.220
And so we were already at our next release.

00:11:37.220 --> 00:11:40.740
So on March 21st, we had Python 3.6.1 released.

00:11:40.740 --> 00:11:41.220
How about that?

00:11:41.220 --> 00:11:42.260
That's pretty cool.

00:11:42.260 --> 00:11:43.880
I haven't tried it out yet, though.

00:11:43.880 --> 00:11:44.740
I'm running it.

00:11:44.740 --> 00:11:46.020
It's been working well for me.

00:11:46.020 --> 00:11:46.760
It's very nice.

00:11:46.760 --> 00:11:53.340
There are actually a surprising number of changes given the timeframe between 3.6.1 and 3.6.0

00:11:53.340 --> 00:11:53.880
being released.

00:11:53.920 --> 00:11:56.120
So there's a lot of fixes.

00:11:56.120 --> 00:12:01.860
There's probably 25 fixes and optimizations for core and built-in.

00:12:01.860 --> 00:12:06.420
If you look at the library, there's probably 35 to 40 fixes.

00:12:07.080 --> 00:12:13.280
Things like there was some kind of bug in argpars that help messages would wrap on non-breaking spaces

00:12:13.280 --> 00:12:14.880
and other funky stuff like that.

00:12:14.880 --> 00:12:17.180
Fixes to the magic mock library.

00:12:17.180 --> 00:12:24.300
So what struck me about this release is like a 3.6.1 release feels like you got 3.6.0, 3.6.1,

00:12:24.300 --> 00:12:24.720
whatever.

00:12:24.720 --> 00:12:25.740
It's all the same, right?

00:12:25.740 --> 00:12:31.660
But there's actually a non-trivial number of things that I might actually want to go and

00:12:31.660 --> 00:12:33.400
say, oh my gosh, we need to upgrade to this.

00:12:33.400 --> 00:12:39.840
So for example, another one is fixes a crash when deallocating deep element tree objects.

00:12:39.840 --> 00:12:44.840
So if you load up large XML files and are having problems with that, maybe you want to look at

00:12:44.840 --> 00:12:45.040
this.

00:12:45.040 --> 00:12:48.480
There's also sections on Windows, on the C API, and lots of stuff.

00:12:48.480 --> 00:12:53.760
The other thing that's interesting or notable about this is I don't know if 3.6.0 or 3.6.1,

00:12:53.760 --> 00:13:00.100
but one of those two recent releases is the first time that Python is shipping off of GitHub

00:13:00.100 --> 00:13:02.300
since it's moved off of Mercurial.

00:13:02.300 --> 00:13:02.680
Okay.

00:13:02.860 --> 00:13:03.600
So that's pretty cool.

00:13:03.600 --> 00:13:04.320
I think so.

00:13:04.320 --> 00:13:05.020
Anyway, I think so.

00:13:05.020 --> 00:13:08.160
I'm pretty sure that 3.5 was on the other one.

00:13:08.160 --> 00:13:14.020
I can't find which one it is in here, but some of the core developers seem to be very excited

00:13:14.020 --> 00:13:17.600
about f-strings now with the 3.6.1.

00:13:17.600 --> 00:13:23.360
So there must have been some issue with it that we just don't even know about that now makes

00:13:23.360 --> 00:13:25.040
it work better or something.

00:13:25.040 --> 00:13:25.540
Yeah.

00:13:25.540 --> 00:13:31.080
The only one I can find is F string expressions are no longer accepted as doc strings.

00:13:31.520 --> 00:13:32.780
You know, that might be it.

00:13:32.780 --> 00:13:38.100
Maybe somehow the f-strings in doc strings were being interpreted when they were supposed

00:13:38.100 --> 00:13:38.880
to be documentation.

00:13:38.880 --> 00:13:40.200
Like, here's the F string to use.

00:13:40.200 --> 00:13:40.620
I don't know.

00:13:40.620 --> 00:13:41.060
It's great.

00:13:41.060 --> 00:13:42.880
If you get a chance, upgrade to 3.6.1.

00:13:42.880 --> 00:13:43.360
I will.

00:13:44.100 --> 00:13:47.540
Well, last, I've got to tell us a little bit of a story.

00:13:47.540 --> 00:13:54.320
I went to the University of Oregon and I tried to take statistics in a building called D.D.

00:13:54.320 --> 00:13:54.600
Hall.

00:13:54.840 --> 00:13:55.500
D.D.

00:13:55.500 --> 00:13:59.080
Hall was built in the 1873 to 1876.

00:13:59.080 --> 00:14:00.540
So it's a really old building.

00:14:00.540 --> 00:14:06.080
And I think my professor may have been born at the same time because he was a really old

00:14:06.080 --> 00:14:06.340
guy.

00:14:07.600 --> 00:14:11.080
And it was like on maybe the third floor.

00:14:11.080 --> 00:14:17.760
I had to walk upstairs, little tiny room and four o'clock in the afternoon with air conditioners

00:14:17.760 --> 00:14:18.120
blowing.

00:14:18.120 --> 00:14:21.360
And the gist of it is, is I didn't learn statistics.

00:14:21.360 --> 00:14:23.460
I was slept through that class.

00:14:24.240 --> 00:14:28.620
And so I'm excited that there's a, an article called, and it looks like it's the start of

00:14:28.620 --> 00:14:28.800
it.

00:14:28.800 --> 00:14:32.580
It's called Essential Statistics for Data Science.

00:14:32.580 --> 00:14:40.920
So it's teaching some of the Python data science stuff along with, and how to use statistics with

00:14:40.920 --> 00:14:44.020
it, but also teaching you about the statistics while it's going.

00:14:44.020 --> 00:14:46.580
And I really appreciated that.

00:14:46.580 --> 00:14:50.100
And it was really easy to follow, even for somebody that slept through statistics.

00:14:50.880 --> 00:14:55.240
You know, data science is actually one of the, the reasons I think for that, that growth

00:14:55.240 --> 00:14:57.420
in the stack overflow section.

00:14:57.420 --> 00:14:58.840
I was talking about others as well.

00:14:58.840 --> 00:14:59.120
Right.

00:14:59.120 --> 00:15:04.440
But I think the addition of all these data scientists moving into the space makes such, such a big

00:15:04.440 --> 00:15:04.760
difference.

00:15:04.760 --> 00:15:10.000
So there's a lot of people coming into the space and really having a good statistical foundation,

00:15:10.000 --> 00:15:11.660
I think is super important here.

00:15:11.660 --> 00:15:18.920
In this article is, it's tutorial is it also explains the box and whisker diagrams and

00:15:18.920 --> 00:15:20.700
what all of those pieces mean.

00:15:20.700 --> 00:15:23.100
which I had no idea what those meant before.

00:15:23.100 --> 00:15:24.340
So, so thank you.

00:15:24.340 --> 00:15:24.620
Okay.

00:15:24.620 --> 00:15:25.260
Yeah.

00:15:25.260 --> 00:15:25.600
Yeah.

00:15:25.600 --> 00:15:26.020
That's awesome.

00:15:26.020 --> 00:15:26.700
Anyway, cool.

00:15:26.700 --> 00:15:27.380
That's all I got.

00:15:27.380 --> 00:15:27.660
Yeah.

00:15:27.660 --> 00:15:27.920
Okay.

00:15:27.920 --> 00:15:31.560
Well, the last one that I want to talk about is called Hi, H-Y.

00:15:31.560 --> 00:15:38.940
And for those of you out there that like Lisp, this will be music to your ears.

00:15:38.940 --> 00:15:45.020
So the idea is Hi is a Lisp environment, scheme, Lisp type thing.

00:15:45.460 --> 00:15:53.300
And you can take it, give it Lisp code and it will actually take that code and compile it

00:15:53.300 --> 00:15:59.100
or assemble it into Python abstract syntax trees and then just hand it off to Python to execute.

00:15:59.100 --> 00:15:59.540
Okay.

00:15:59.540 --> 00:16:03.920
So we've talked about all sorts of different runtimes or interpreters.

00:16:04.140 --> 00:16:06.820
We have the two CPython versions.

00:16:06.820 --> 00:16:08.340
We have PyPy.

00:16:08.340 --> 00:16:10.320
We have Python.net.

00:16:10.320 --> 00:16:11.020
We have Jython.

00:16:11.020 --> 00:16:12.280
We have IronPython.

00:16:12.280 --> 00:16:14.260
We've got Cython.

00:16:14.260 --> 00:16:17.940
There's lots of different choices you can make, but I've never talked about Hi.

00:16:18.660 --> 00:16:20.440
And this was actually a listener recommendation.

00:16:20.440 --> 00:16:21.180
So thanks.

00:16:21.180 --> 00:16:22.300
Thanks for sending that in, guys.

00:16:22.300 --> 00:16:27.160
So this is if you write Lisp code, you can write code in Lisp and then it just runs on

00:16:27.160 --> 00:16:33.380
top of Python, which is cool because it means that you basically get access to the entire

00:16:33.380 --> 00:16:39.220
standard library and all the PyPI packages for your Lisp programs, which I think is pretty

00:16:39.220 --> 00:16:39.520
awesome.

00:16:39.520 --> 00:16:46.180
So if you want to work with various libraries, requests, it says you can write Django applications

00:16:46.180 --> 00:16:46.660
in Lisp.

00:16:46.660 --> 00:16:49.740
If that seems like a good idea to you, you can use Hi to do that.

00:16:49.740 --> 00:16:53.860
Probably Flask and Pyramid as well, I guess, because you just import it, right?

00:16:53.860 --> 00:16:54.100
Yeah.

00:16:54.100 --> 00:16:58.900
So yeah, they think it's a great way for people to explore Lisp if you are comfortable with Python.

00:16:58.900 --> 00:17:00.640
Now do something for me.

00:17:00.640 --> 00:17:07.460
Click on the link that says you must try, try-high.appspot.com and just tell me what you think when you see

00:17:07.460 --> 00:17:07.660
that.

00:17:07.660 --> 00:17:08.200
Oh.

00:17:09.160 --> 00:17:10.180
That's cool, right?

00:17:10.180 --> 00:17:12.080
So you guys all check this out when you hear this.

00:17:12.080 --> 00:17:13.340
Click this link in the show notes.

00:17:13.340 --> 00:17:15.680
It's what version of Apple is that?

00:17:15.680 --> 00:17:16.400
It's not even Apple.

00:17:16.400 --> 00:17:20.160
It's a, it's, but it looks a little bit like an Apple IIe computer.

00:17:20.160 --> 00:17:21.160
Oh, that's so cool.

00:17:21.160 --> 00:17:28.180
It's a little tiny old CRT and you can type on, like when you type in, you get to type right

00:17:28.180 --> 00:17:29.420
on this little monitor.

00:17:29.420 --> 00:17:29.980
It's cool.

00:17:29.980 --> 00:17:31.380
It's, it's fantastic.

00:17:31.380 --> 00:17:35.400
It's even at an angle and you get to type into the interpreter and it's live and you can

00:17:35.400 --> 00:17:36.000
try out Lisp.

00:17:36.000 --> 00:17:38.900
My Lisp is not good enough, but I can at least hit enter and see 42L.

00:17:38.900 --> 00:17:39.640
Come out.

00:17:39.640 --> 00:17:41.440
So check this out.

00:17:41.440 --> 00:17:43.820
This is really pretty interesting if you're into Lisp.

00:17:43.820 --> 00:17:49.080
If you're not into Lisp, I think it's just an interesting data point of here's one more

00:17:49.080 --> 00:17:53.240
thing, one alternate way to get other languages in the Python ecosystem.

00:17:53.240 --> 00:17:53.740
Yeah.

00:17:53.820 --> 00:17:58.280
I just tried out the extent of my Lisp knowledge that cons makes a tuple.

00:17:58.280 --> 00:17:59.140
Nice.

00:18:00.500 --> 00:18:03.660
I've forgotten all about the cutter in the car and all that stuff from when I took it

00:18:03.660 --> 00:18:04.220
back in school.

00:18:04.220 --> 00:18:05.000
It's been a long time.

00:18:05.000 --> 00:18:05.980
It's been a long time.

00:18:05.980 --> 00:18:07.600
It has.

00:18:07.600 --> 00:18:07.900
All right.

00:18:07.900 --> 00:18:10.440
Well, that's, that's it for the news this week, everyone.

00:18:10.440 --> 00:18:12.820
I think, Brian, you found some good ones.

00:18:12.820 --> 00:18:13.460
Thank you.

00:18:13.600 --> 00:18:14.880
I do want one last thing.

00:18:14.880 --> 00:18:16.480
I want to do a little bit of follow-up.

00:18:16.480 --> 00:18:22.320
Last week when we covered PDR2, I commented that it didn't look that great in PyPI.

00:18:23.340 --> 00:18:25.220
And that was fixed last week.

00:18:25.220 --> 00:18:31.200
And with one of the best pull requests I've ever seen or comments in the code, and it was

00:18:31.200 --> 00:18:33.640
the comment was remove beer from readme.

00:18:33.640 --> 00:18:39.760
Apparently there was a beer Unicode symbol that was messing up the PyPI stuff.

00:18:39.760 --> 00:18:41.420
So that's good.

00:18:41.420 --> 00:18:45.820
It's marked as a bug and urgent that we get the beer out of the readme.

00:18:45.820 --> 00:18:46.480
Fantastic.

00:18:46.480 --> 00:18:48.960
That is awesome.

00:18:48.960 --> 00:18:49.740
All right.

00:18:49.740 --> 00:18:49.920
Yeah.

00:18:49.920 --> 00:18:50.180
Cool.

00:18:50.180 --> 00:18:54.840
So that's, it's pretty neat that that actually, that people listen to our show and change

00:18:54.840 --> 00:18:56.100
the projects based on it.

00:18:56.100 --> 00:18:56.240
Right.

00:18:56.240 --> 00:18:56.840
That's, that's awesome.

00:18:56.840 --> 00:18:57.380
Yeah.

00:18:57.380 --> 00:19:00.640
Or they, they may have noticed it on their own, but let's go with that.

00:19:00.640 --> 00:19:01.300
They're listeners.

00:19:01.300 --> 00:19:03.480
They took your advice and remove the beer.

00:19:03.480 --> 00:19:04.500
Excellent.

00:19:04.500 --> 00:19:05.040
All right.

00:19:05.040 --> 00:19:08.080
Well, thanks so much for chatting with me, Brian, and sharing the news with everyone.

00:19:08.080 --> 00:19:09.400
It's fun as always.

00:19:09.400 --> 00:19:09.860
Thank you.

00:19:09.860 --> 00:19:10.120
Yep.

00:19:10.120 --> 00:19:10.480
Bye.

00:19:10.480 --> 00:19:13.820
Thank you for listening to Python Bytes.

00:19:13.820 --> 00:19:16.380
Follow the show on Twitter via at Python Bytes.

00:19:16.380 --> 00:19:19.260
That's Python Bytes as in B-Y-T-E-S.

00:19:19.480 --> 00:19:22.700
And get the full show notes at Python Bytes.fm.

00:19:22.700 --> 00:19:27.040
If you have a news item you want featured, just visit Python Bytes.fm and send it our way.

00:19:27.040 --> 00:19:29.740
We're always on the lookout for sharing something cool.

00:19:29.740 --> 00:19:33.120
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:19:33.120 --> 00:19:36.740
Thank you for listening and sharing this podcast with your friends and colleagues.

