
00:00:00.000 --> 00:00:02.720
Hello and welcome to Python Bytes.


00:00:02.720 --> 00:00:08.920
This is episode 19, where we're going to deliver Python news and headlines directly to your


00:00:08.920 --> 00:00:09.920
earbuds.


00:00:09.920 --> 00:00:14.520
It's recorded on Sunday, March 26, 2017.


00:00:14.520 --> 00:00:15.520
I'm Michael Kennedy.


00:00:15.520 --> 00:00:16.880
And I'm Brian Okken.


00:00:16.880 --> 00:00:18.440
And we got some Python news for you.


00:00:18.440 --> 00:00:19.800
Hey, Brian, how's it going?


00:00:19.800 --> 00:00:20.800
It's going really good.


00:00:20.800 --> 00:00:21.800
Yeah.


00:00:21.800 --> 00:00:22.800
I'm excited about what you picked out.


00:00:22.800 --> 00:00:24.560
I want to learn about the ones that you got.


00:00:24.560 --> 00:00:28.800
And I have some sort of outer loop ones that are really, really different.


00:00:28.800 --> 00:00:31.800
but I think people will be interested to hear about them.


00:00:31.800 --> 00:00:33.420
But let's start with what you got on tap.


00:00:33.420 --> 00:00:35.680
- Well, we're gonna start with a story


00:00:35.680 --> 00:00:40.680
about exceptions in Python 3, not exceptions in Python 3,


00:00:40.680 --> 00:00:45.800
but there is a person named Josh or Quicks on GitHub


00:00:45.800 --> 00:00:49.680
who wrote a little utility for Python,


00:00:49.680 --> 00:00:51.200
which is actually really cool


00:00:51.200 --> 00:00:53.320
and it's called Better Exceptions.


00:00:53.320 --> 00:00:58.280
And it's a hook that actually is pretty clever,


00:00:58.280 --> 00:01:00.100
but it hooks into your exceptions.


00:01:00.100 --> 00:01:02.320
And so when you're like,


00:01:02.320 --> 00:01:05.080
especially when you're developing and debugging


00:01:05.080 --> 00:01:07.720
or dogfooding your own products,


00:01:07.720 --> 00:01:10.660
it will show exceptions that are color coded


00:01:10.660 --> 00:01:13.320
and split out everything that's in there.


00:01:13.320 --> 00:01:15.240
And we have the link on their show notes,


00:01:15.240 --> 00:01:18.120
but there's a great picture that you can see


00:01:18.120 --> 00:01:20.960
that shows the exceptions as they--


00:01:20.960 --> 00:01:23.200
- Yeah, what I like about this is that,


00:01:23.200 --> 00:01:25.440
like you said, a picture is what you have there.


00:01:25.440 --> 00:01:27.640
And we talked about Peter too,


00:01:27.640 --> 00:01:31.400
last week about making that sort of bland, just flat list


00:01:31.400 --> 00:01:33.980
into like something really readable and colorized and nice.


00:01:33.980 --> 00:01:35.840
And this kind of does that for exceptions, right?


00:01:35.840 --> 00:01:36.680
- Yeah, it does.


00:01:36.680 --> 00:01:37.960
And it was really great.


00:01:37.960 --> 00:01:40.840
And Josh works, he mentions,


00:01:40.840 --> 00:01:43.680
and then he posted it on Reddit as well.


00:01:43.680 --> 00:01:48.680
And on Reddit, he mentions that he works only in Python 2.7.


00:01:48.680 --> 00:01:52.240
So he wasn't sure how to do Python 3 at first.


00:01:52.240 --> 00:01:53.780
And he put this together pretty quickly


00:01:53.780 --> 00:01:55.760
and then put it out there for everybody.


00:01:55.760 --> 00:02:03.040
And immediately the conversation on Reddit turned to Python 3 and why isn't there Python 3 support?


00:02:03.040 --> 00:02:13.040
And one of the great things about this story is Florian, who is Paradox0 on both GitHub and on Reddit,


00:02:13.040 --> 00:02:18.720
said instead of adding to the complaints list, he went out and made it, he forked it.


00:02:18.720 --> 00:02:24.640
in a pull request with a Python 3 fix and within like eight hours the whole thing was merged and


00:02:24.640 --> 00:02:31.680
it was Python 3 as well. Yeah so like eight hours of the thing being announced it came out without


00:02:31.680 --> 00:02:36.080
Python 3 support. The community went in and added Python 3 support. It's something like this right?


00:02:36.080 --> 00:02:41.360
Yeah and it's just really incredible and I actually reached out to both of them and wanted to know if


00:02:41.360 --> 00:02:47.520
they had anything to add to the story and like I was saying Josh wasn't he didn't know how to do


00:02:47.520 --> 00:02:52.240
make sure that it was running on both because he normally works on Python 2. And Florian,


00:02:52.240 --> 00:02:58.560
apparently he supports this tool called WDB, which is a web debugger, which actually we should


00:02:58.560 --> 00:03:04.160
explore a little bit later. It's pretty cool. Anyway, he's used to doing that two and three


00:03:04.160 --> 00:03:10.320
all the time. So it wasn't that big of a jump for him to add that support, which is great. So


00:03:10.320 --> 00:03:15.600
I like it. Yeah, I think it's cool. I think better exceptions, the package is really cool. And I


00:03:15.600 --> 00:03:19.680
And I think the Python 3 story of 8 hours from the time it was published, somebody went


00:03:19.680 --> 00:03:21.260
and said, "There's a problem with this.


00:03:21.260 --> 00:03:22.260
It doesn't support Python.


00:03:22.260 --> 00:03:23.760
It only supports legacy Python.


00:03:23.760 --> 00:03:24.760
We have to fix it."


00:03:24.760 --> 00:03:25.760
That's really cool.


00:03:25.760 --> 00:03:29.400
I'm not sure if that would have happened four years ago, right?


00:03:29.400 --> 00:03:30.400
Right.


00:03:30.400 --> 00:03:31.400
And it's really great.


00:03:31.400 --> 00:03:36.020
The other thing, when I tried this out, and one of the things that I noticed about it


00:03:36.020 --> 00:03:42.800
is you have to put an import statement in the modules that you want to use this better


00:03:42.800 --> 00:03:43.800
exceptions.


00:03:43.800 --> 00:03:47.160
also thought maybe we should modify that.


00:03:47.160 --> 00:03:49.760
So he added another GitHub project


00:03:49.760 --> 00:03:51.320
called Better Exceptions Hook


00:03:51.320 --> 00:03:54.000
that if you include that as well,


00:03:54.000 --> 00:03:56.640
you don't have to do that import statement.


00:03:56.640 --> 00:03:57.480
- Oh, nice.


00:03:57.480 --> 00:03:58.300
- It's pretty great.


00:03:58.300 --> 00:03:59.380
- Yeah, that's really great.


00:03:59.380 --> 00:04:01.240
Cool, so everyone check out Better Exceptions.


00:04:01.240 --> 00:04:02.200
Check out the Reddit thread.


00:04:02.200 --> 00:04:03.280
We'll link to that, of course,


00:04:03.280 --> 00:04:05.000
maybe as the primary thing


00:04:05.000 --> 00:04:06.040
and all the stuff's in the show notes.


00:04:06.040 --> 00:04:06.940
Very cool.


00:04:06.940 --> 00:04:09.200
One of the things I always look forward to, Brian,


00:04:09.200 --> 00:04:12.480
is the Stack Overflow Developer Survey.


00:04:12.480 --> 00:04:17.060
Stack Overflow is such a powerhouse in the software space,


00:04:17.060 --> 00:04:21.100
and they get quite a bit of feedback on their surveys,


00:04:21.100 --> 00:04:24.100
you know, like 100,000 people filling out the survey


00:04:24.100 --> 00:04:26.600
or something, and it's really comprehensive.


00:04:26.600 --> 00:04:31.280
So this year, they just released a couple days ago,


00:04:31.280 --> 00:04:35.800
the 2017 survey, and it has good news for Python in there.


00:04:35.800 --> 00:04:37.860
- Really, and it looks like they get results


00:04:37.860 --> 00:04:38.880
from all over the world.


00:04:38.880 --> 00:04:41.820
- They do, yeah, they get a ton of results, like I said.


00:04:41.820 --> 00:04:47.460
They have stuff on gender equity, pay across different regions, job demand, all sorts of


00:04:47.460 --> 00:04:48.460
stuff like that.


00:04:48.460 --> 00:04:52.940
But the most interesting thing to me is really around the programming languages that are


00:04:52.940 --> 00:05:00.140
being used or desire behind working with certain technologies and so on.


00:05:00.140 --> 00:05:02.100
So there's some good news here for Python.


00:05:02.100 --> 00:05:07.020
If you look at the most popular technologies, we talked recently about Python being the


00:05:07.020 --> 00:05:10.520
the second most popular technology behind JavaScript


00:05:10.520 --> 00:05:13.680
on GitHub on Stack Overflow in terms of questions,


00:05:13.680 --> 00:05:16.100
it's number five.


00:05:16.100 --> 00:05:17.780
And given that it's pretty easy to work with


00:05:17.780 --> 00:05:19.920
relative to things like Java,


00:05:19.920 --> 00:05:22.500
which might generate more questions,


00:05:22.500 --> 00:05:24.560
you know, I think that's pretty interesting.


00:05:24.560 --> 00:05:26.960
So that's cool, but let's go down a little bit farther.


00:05:26.960 --> 00:05:29.800
They have areas where they talk about the frameworks


00:05:29.800 --> 00:05:32.640
you're working with, the databases that people


00:05:32.640 --> 00:05:36.160
are using, platforms, but one of the things


00:05:36.160 --> 00:05:39.360
that caught my attention is languages over time.


00:05:39.360 --> 00:05:44.240
So we've got things like C#, JavaScript, Objective-C,


00:05:44.240 --> 00:05:47.720
Node.js, and whatever, Java itself.


00:05:47.720 --> 00:05:52.480
If you look at Python over the last, what is that, five years?


00:05:52.480 --> 00:05:55.520
It went from 22% to 33%, and it's


00:05:55.520 --> 00:05:58.960
got like a hockey stick-like curve going to it.


00:05:58.960 --> 00:06:00.560
So it's not just it's going up.


00:06:00.560 --> 00:06:02.680
It's going up, and the rate is increasing.


00:06:02.680 --> 00:06:03.440
How cool is that?


00:06:03.440 --> 00:06:04.200
That is very neat.


00:06:04.200 --> 00:06:04.680
I like it.


00:06:04.680 --> 00:06:07.680
If you compare it to Java, Java's on a pretty downward trend.


00:06:07.680 --> 00:06:10.000
C# is on a downward trend.


00:06:10.000 --> 00:06:11.880
C++, downward trend.


00:06:11.880 --> 00:06:13.440
So that's cool.


00:06:13.440 --> 00:06:18.360
One other one that really I like, there's a section called Most Loved, Most Dreaded,


00:06:18.360 --> 00:06:20.200
and Most Wanted.


00:06:20.200 --> 00:06:24.640
So Python ranks very highly in the most loved.


00:06:24.640 --> 00:06:27.380
And just let's see how the story is for most dreaded.


00:06:27.380 --> 00:06:34.240
It turns out Visual Basic 6, VBA, CoffeeScript, and VB.net, three out of four for Visual Basic


00:06:34.240 --> 00:06:37.280
are in the most dreaded technologies,


00:06:37.280 --> 00:06:39.480
just with MATLAB, Tel and along.


00:06:39.480 --> 00:06:41.880
But if you go over to most wanted technology,


00:06:41.880 --> 00:06:43.720
Python by a wide margin.


00:06:43.720 --> 00:06:44.560
- Wow.


00:06:44.560 --> 00:06:45.880
- Out of everything.


00:06:45.880 --> 00:06:46.720
- That's great.


00:06:46.720 --> 00:06:48.560
- Over JavaScript, over Go, over TypeScript,


00:06:48.560 --> 00:06:51.400
over Swift, over Rust, whatever.


00:06:51.400 --> 00:06:53.000
It's 20% of the people said,


00:06:53.000 --> 00:06:54.360
"That's the thing I want most."


00:06:54.360 --> 00:06:56.280
Who responded about that?


00:06:56.280 --> 00:06:57.120
Isn't that cool?


00:06:57.120 --> 00:06:58.320
- What does most wanted mean?


00:06:58.320 --> 00:07:01.160
- It means what, if you could choose,


00:07:01.160 --> 00:07:04.400
They ask, what are you using for your day-to-day job?


00:07:04.400 --> 00:07:06.400
And they ask, if you could use anything,


00:07:06.400 --> 00:07:07.440
what would you use?


00:07:07.440 --> 00:07:09.040
- Oh, okay. - Yeah?


00:07:09.040 --> 00:07:10.240
Just to round it out, one more thing,


00:07:10.240 --> 00:07:12.440
since I've been going on and on about Mongo


00:07:12.440 --> 00:07:14.200
and stuff like that recently,


00:07:14.200 --> 00:07:16.280
if you go to the database section


00:07:16.280 --> 00:07:18.840
and look at the most wanted database,


00:07:18.840 --> 00:07:22.400
MongoDB is like more than 2x over second place.


00:07:22.400 --> 00:07:24.040
So also quite interesting.


00:07:24.040 --> 00:07:27.480
- Well, working with document databases is just,


00:07:27.480 --> 00:07:29.040
I like it, if you can do it.


00:07:29.040 --> 00:07:30.200
- It's so glorious, yeah.


00:07:30.200 --> 00:07:32.720
If you can make it work, it is so, so nice.


00:07:32.720 --> 00:07:34.200
We'll have to cover that in more detail.


00:07:34.200 --> 00:07:36.400
But I strongly encourage you guys to go


00:07:36.400 --> 00:07:37.920
and have a look at this survey.


00:07:37.920 --> 00:07:39.960
It's always really insightful.


00:07:39.960 --> 00:07:42.880
They had 64,000 developers in this response.


00:07:42.880 --> 00:07:44.080
It's not 100,000, sorry.


00:07:44.080 --> 00:07:45.920
But still a huge number to make this


00:07:45.920 --> 00:07:48.000
highly statistically relevant, right?


00:07:48.000 --> 00:07:49.640
- Yeah, and we need to get more.


00:07:49.640 --> 00:07:52.760
It looks like there's still, with surveys like this,


00:07:52.760 --> 00:07:56.600
we still have more white dudes answering than other people.


00:07:56.600 --> 00:07:59.160
- Yeah, that is an ongoing problem.


00:07:59.160 --> 00:08:00.360
But what was it there?


00:08:00.360 --> 00:08:01.880
Okay, so since you brought that up,


00:08:01.880 --> 00:08:03.860
I was thinking about, didn't wanna go on too long,


00:08:03.860 --> 00:08:07.240
but there's a section in here that talks about,


00:08:07.240 --> 00:08:10.320
near the beginning, it talks about demographics,


00:08:10.320 --> 00:08:15.320
and it says males like 88.6%, females 7.6,


00:08:15.320 --> 00:08:21.360
white dudes are like 74%, if you throw in Asians,


00:08:21.360 --> 00:08:25.100
it's super, super near like the top.


00:08:25.100 --> 00:08:26.940
But there's also a section somewhere in there


00:08:26.940 --> 00:08:30.460
that talks about years of coding experience


00:08:30.460 --> 00:08:32.300
and demographics over time.


00:08:32.300 --> 00:08:33.260
And they break that down,


00:08:33.260 --> 00:08:35.580
they don't break it down by anything but male, female,


00:08:35.580 --> 00:08:36.420
I don't think.


00:08:36.420 --> 00:08:39.340
But if you look at less than one year experience,


00:08:39.340 --> 00:08:41.180
there's more women than men.


00:08:41.180 --> 00:08:43.300
If you look at one to two, there's more women than men.


00:08:43.300 --> 00:08:47.180
It's not until you get into five years of experience


00:08:47.180 --> 00:08:48.460
that there are more men.


00:08:48.460 --> 00:08:51.100
And then it's just after that, it's gone, right?


00:08:51.100 --> 00:08:52.820
It's all men all the time.


00:08:52.820 --> 00:08:55.540
But that's pretty encouraging to me


00:08:55.540 --> 00:08:58.300
because that means people coming into the industry,


00:08:58.300 --> 00:09:00.700
there's a lot of women coming in actually.


00:09:00.700 --> 00:09:02.460
- Yeah, that is really encouraging.


00:09:02.460 --> 00:09:03.300
That's good.


00:09:03.300 --> 00:09:06.340
- So it's right that it is kind of bleak in that sense,


00:09:06.340 --> 00:09:08.460
but there's a bit of a shining,


00:09:08.460 --> 00:09:10.320
at least a positive data point there.


00:09:10.320 --> 00:09:11.160
I think that's great.


00:09:11.160 --> 00:09:11.980
What do you got next for us?


00:09:11.980 --> 00:09:14.920
- Next, I've got a project called Box,


00:09:14.920 --> 00:09:18.580
and there was an article on Code Calamity.


00:09:18.580 --> 00:09:19.880
That's a cool name.


00:09:19.880 --> 00:09:20.940
Anyway-- - That is a cool name.


00:09:20.940 --> 00:09:23.320
- This is a really pretty simple tool,


00:09:23.320 --> 00:09:26.080
But you just take a dictionary and throw it


00:09:26.080 --> 00:09:28.880
into an object class called box.


00:09:28.880 --> 00:09:30.520
And what it does is it makes it so


00:09:30.520 --> 00:09:34.120
that you can use dot notation instead of that annoying--


00:09:34.120 --> 00:09:36.640
I mean, the dictionary notation is OK.


00:09:36.640 --> 00:09:38.440
It's like so many characters to type,


00:09:38.440 --> 00:09:41.920
and the brackets and the quotes.


00:09:41.920 --> 00:09:46.520
And for single word elements in your indexes


00:09:46.520 --> 00:09:49.080
in your dictionary, Box makes it so you can just


00:09:49.080 --> 00:09:50.640
use dot notation instead.


00:09:50.640 --> 00:09:52.080
It's pretty cool.


00:09:52.080 --> 00:09:52.680
That is cool.


00:09:52.680 --> 00:09:54.380
I am so using box.


00:09:54.380 --> 00:09:59.600
So what's really nice about it, it feels like it's a little bit similar to like name tuple


00:09:59.600 --> 00:10:00.600
type things.


00:10:00.600 --> 00:10:03.760
I guess it's dictionaries rather than names for the tuples.


00:10:03.760 --> 00:10:08.520
But still, it's like, kind of like that, like you take this thing you have to index into


00:10:08.520 --> 00:10:12.400
and you turn it into a thing you can use dot names on.


00:10:12.400 --> 00:10:16.440
And while that's pretty helpful, what I think is really cool looking, this is you can have


00:10:16.440 --> 00:10:18.760
like a deep object graph.


00:10:18.760 --> 00:10:22.320
So in their example, they have a box which has movies, the movies, one of the movies


00:10:22.320 --> 00:10:25.600
the spaceballs, the move, each individual movie has a rating.


00:10:25.600 --> 00:10:28.840
And you can just say my box dot movies dot spaceballs dot rating.


00:10:28.840 --> 00:10:32.640
And so if that was dictionaries, that would be a lot of this dot, get this,


00:10:32.640 --> 00:10:35.360
dot, get this, dot, get this or bracket, bracket, bracket, bracket.


00:10:35.360 --> 00:10:35.640
Right.


00:10:35.640 --> 00:10:35.960
Yeah.


00:10:35.960 --> 00:10:39.680
If you're trying to test each one of those, then that's even, even less


00:10:39.680 --> 00:10:41.760
fun to test that it's in the, in the dictionary.


00:10:41.760 --> 00:10:41.960
Yeah.


00:10:41.960 --> 00:10:44.640
And it doesn't like, obviously I was trying to train it out.


00:10:44.640 --> 00:10:48.240
Like one of the movies was that they showed in their demo was Robin Hood,


00:10:48.240 --> 00:10:50.600
men in tights, also good movie.


00:10:50.800 --> 00:10:53.240
Anyway, it has spaces in it.


00:10:53.240 --> 00:10:57.000
So obviously you can't make a dot name thing


00:10:57.000 --> 00:10:58.560
with something with spaces in it.


00:10:58.560 --> 00:11:01.280
So it just punts and doesn't do it for those.


00:11:01.280 --> 00:11:02.120
So it's only--


00:11:02.120 --> 00:11:03.920
- Right, okay.


00:11:03.920 --> 00:11:06.480
Yeah, so those you have to basically use the brackets,


00:11:06.480 --> 00:11:07.480
treat it like a dictionary.


00:11:07.480 --> 00:11:09.240
- Yeah, but it's enough.


00:11:09.240 --> 00:11:11.200
Anything that saves me a little bit of typing


00:11:11.200 --> 00:11:13.040
and makes my code look a little cleaner,


00:11:13.040 --> 00:11:14.560
I'm gonna give it a try.


00:11:14.560 --> 00:11:15.400
- Yeah, this is cool.


00:11:15.400 --> 00:11:16.720
I think the thing that's awesome about this


00:11:16.720 --> 00:11:18.600
is it makes your code more readable.


00:11:18.600 --> 00:11:19.600
- Yeah, definitely.


00:11:19.600 --> 00:11:22.000
Okay, cool. Well, thanks for teaching me about Box.


00:11:22.000 --> 00:11:26.300
So it wasn't very long ago that we just talked about Python 3.6 being released, right?


00:11:26.300 --> 00:11:27.600
Yeah, very exciting.


00:11:27.600 --> 00:11:29.500
Yeah, it's super exciting. That's a big release.


00:11:29.500 --> 00:11:33.700
There was a lot of performance improvements, both in memory and CPU time.


00:11:33.700 --> 00:11:37.400
And so we are already at our next release.


00:11:37.400 --> 00:11:41.300
So on March 21st, we had Python 3.6.1 released. How about that?


00:11:41.300 --> 00:11:44.000
That's pretty cool. I haven't tried it out yet, though.


00:11:44.000 --> 00:11:46.800
I'm running it. It's been working well for me. It's very nice.


00:11:46.800 --> 00:11:50.700
there are actually a surprising number of changes given the time frame between


00:11:50.700 --> 00:11:56.620
361 and 360 being released. So there's a lot of there's a lot of fixes. There's


00:11:56.620 --> 00:12:02.640
there's probably 25 fixes and optimizations for core built-in. If you


00:12:02.640 --> 00:12:08.080
look at the the library there's probably 35 to 40 fixes. Things like there was a


00:12:08.080 --> 00:12:12.900
some kind of bug in arg pars that help messages would wrap on non-breaking


00:12:12.900 --> 00:12:18.000
spaces and other funky stuff like that fixes to the magic mock library.


00:12:18.000 --> 00:12:24.500
So what struck me about this release is like a 361 release feels like you got 360, 361,


00:12:24.500 --> 00:12:26.180
whatever, it's all the same, right?


00:12:26.180 --> 00:12:31.420
But there's actually a non trivial number of things that I might actually want to go


00:12:31.420 --> 00:12:33.580
and say, Oh my gosh, we need to upgrade to this.


00:12:33.580 --> 00:12:39.980
So for example, another one is fixes a crash when deallocating deep element tree objects.


00:12:39.980 --> 00:12:44.540
So if you load up large XML files and are having problems with that, maybe you want


00:12:44.540 --> 00:12:45.540
to look at this.


00:12:45.540 --> 00:12:49.380
There's also sections on Windows, on the C API, and lots of stuff.


00:12:49.380 --> 00:12:53.980
The other thing that's interesting or notable about this is, I don't know if 360 or 361,


00:12:53.980 --> 00:12:59.740
but one of those two recent releases is the first time that Python is shipping off of


00:12:59.740 --> 00:13:02.940
GitHub since it's moved off of Mercurial.


00:13:02.940 --> 00:13:03.940
So that's pretty cool.


00:13:03.940 --> 00:13:04.940
I think so, anyway.


00:13:04.940 --> 00:13:05.940
I think so.


00:13:05.940 --> 00:13:08.220
I'm pretty sure that 3.5 was on the other one.


00:13:08.220 --> 00:13:13.620
I can't find which one it is in here, but some of the core developers seem to be very


00:13:13.620 --> 00:13:18.420
excited about f-strings now with the 361.


00:13:18.420 --> 00:13:22.940
So there must have been some issue with it that we just don't even know about that now


00:13:22.940 --> 00:13:25.260
makes it work better or something.


00:13:25.260 --> 00:13:30.660
Yeah, the only one I can find is F string expressions are no longer accepted as doc


00:13:30.660 --> 00:13:31.940
strings.


00:13:31.940 --> 00:13:33.580
You know, that might be it.


00:13:33.580 --> 00:13:38.100
Maybe somehow the f-strings in doc strings were being interpreted when they were supposed


00:13:38.100 --> 00:13:40.620
to be documentation, like here's the F string to use, I don't know.


00:13:40.620 --> 00:13:41.620
It's great.


00:13:41.620 --> 00:13:42.980
If you get a chance, upgrade to 361.


00:13:42.980 --> 00:13:43.980
I will.


00:13:43.980 --> 00:13:47.700
Well, last, I've got a, I've got to tell us a little bit of a story.


00:13:47.700 --> 00:13:54.060
I went to the University of Oregon and I tried to take statistics in a building called Dee


00:13:54.060 --> 00:13:55.060
Dee Hall.


00:13:55.060 --> 00:13:59.380
And Dee Dee Hall was built in the 1873 to 1876.


00:13:59.380 --> 00:14:01.220
So it's a really old building.


00:14:01.220 --> 00:14:06.020
And I think my professor may have been born at the same time because he was a really old


00:14:06.020 --> 00:14:07.540
guy.


00:14:07.540 --> 00:14:14.940
And it was like on maybe the third floor, I had to walk upstairs, little tiny room,


00:14:14.940 --> 00:14:18.760
and four o'clock in the afternoon with air conditioners blowing.


00:14:18.760 --> 00:14:21.580
And the gist of it is, is I didn't learn statistics.


00:14:21.580 --> 00:14:24.420
I slept through that class.


00:14:24.420 --> 00:14:28.540
And so I'm excited that there's an article called, and it looks like it's a start of


00:14:28.540 --> 00:14:33.500
it, it's called Essential Statistics for Data Science.


00:14:33.500 --> 00:14:37.560
So it's teaching some of the Python data science stuff


00:14:37.560 --> 00:14:41.180
along with and how to use statistics with it,


00:14:41.180 --> 00:14:44.660
but also teaching you about the statistics while it's going.


00:14:44.660 --> 00:14:46.680
And I really appreciated that,


00:14:46.680 --> 00:14:48.140
and it was really easy to follow


00:14:48.140 --> 00:14:51.020
even for somebody that slept through statistics.


00:14:51.020 --> 00:14:53.620
- You know, data science is actually one of the reasons,


00:14:53.620 --> 00:14:57.540
I think, for that growth in the Stack Overflow section.


00:14:57.540 --> 00:14:59.500
I was talking about others as well, right?


00:14:59.500 --> 00:15:02.340
But I think the addition of all these data scientists


00:15:02.340 --> 00:15:05.280
moving into the space makes such a big difference.


00:15:05.280 --> 00:15:07.280
So there's a lot of people coming into the space


00:15:07.280 --> 00:15:10.160
and really having a good statistical foundation


00:15:10.160 --> 00:15:11.800
I think is super important here.


00:15:11.800 --> 00:15:15.060
- In this article, this tutorial,


00:15:15.060 --> 00:15:18.720
is it also explains the box and whisker diagrams


00:15:18.720 --> 00:15:21.140
and what all of those pieces mean,


00:15:21.140 --> 00:15:24.400
which I had no idea what those meant before, so thank you.


00:15:24.400 --> 00:15:26.200
- Okay, yeah, yeah, that's awesome.


00:15:26.200 --> 00:15:27.520
- Anyway, that's all I got.


00:15:27.520 --> 00:15:30.120
- Yeah, okay, well the last one that I wanna talk about


00:15:30.120 --> 00:15:32.480
is called Hi, H-Y.


00:15:32.480 --> 00:15:37.120
And for those of you out there that like Lisp,


00:15:37.120 --> 00:15:39.160
this will be music to your ears.


00:15:39.160 --> 00:15:43.720
So the idea is Hi is a Lisp environment,


00:15:43.720 --> 00:15:45.380
Scheme Lisp type thing,


00:15:45.380 --> 00:15:48.960
and you can take it, give it Lisp code,


00:15:48.960 --> 00:15:53.320
and it will actually take that code and compile it


00:15:53.320 --> 00:15:56.980
or assemble it into Python abstract syntax trees


00:15:56.980 --> 00:15:59.640
and then just hand it off to Python to execute.


00:15:59.640 --> 00:16:04.480
So we've talked about all sorts of different runtimes or interpreters.


00:16:04.480 --> 00:16:07.440
We have the two CPython versions.


00:16:07.440 --> 00:16:08.540
We have PyPy.


00:16:08.540 --> 00:16:10.420
We have Python.net.


00:16:10.420 --> 00:16:11.420
We have Jython.


00:16:11.420 --> 00:16:12.420
We have IronPython.


00:16:12.420 --> 00:16:14.400
We've got Cython.


00:16:14.400 --> 00:16:18.900
There's lots of different choices you can make, but I've never talked about Hi.


00:16:18.900 --> 00:16:20.660
And this was actually a listener recommendation.


00:16:20.660 --> 00:16:22.800
So thanks for sending that in, guys.


00:16:22.800 --> 00:16:26.840
So this is if you write Lisp code, you can write code in Lisp, and then it just runs


00:16:26.840 --> 00:16:32.840
on top of Python, which is cool because it means that you basically get access to the


00:16:32.840 --> 00:16:39.280
entire standard library and all the PyPI packages for your Lisp programs, which I think is pretty


00:16:39.280 --> 00:16:40.280
awesome.


00:16:40.280 --> 00:16:46.160
So if you want to work with various libraries, requests, it says you can write Django applications


00:16:46.160 --> 00:16:50.180
in Lisp, if that seems like a good idea to you, you can use Hyda to do that.


00:16:50.180 --> 00:16:54.240
Probably Flask and Pyramid as well, I guess, because you just import it, right?


00:16:54.240 --> 00:16:59.200
So yeah, they think it's a great way for people to explore Lisp if you are comfortable with


00:16:59.200 --> 00:17:00.200
Python.


00:17:00.200 --> 00:17:06.040
Now do something for me, click on the link that says you must try, try-hi.appspot.com


00:17:06.040 --> 00:17:09.720
and just tell me what you think when you see that.


00:17:09.720 --> 00:17:10.720
That's cool, right?


00:17:10.720 --> 00:17:14.520
So you guys all check this out when you hear this, click this link in the show notes.


00:17:14.520 --> 00:17:15.800
What version of Apple is that?


00:17:15.800 --> 00:17:19.800
It's not even Apple, but it looks a little bit like an Apple IIe computer.


00:17:19.800 --> 00:17:21.200
Oh, that's so cool.


00:17:21.200 --> 00:17:25.560
It's a little tiny old CRT and you can type on,


00:17:25.560 --> 00:17:28.360
like when you type in, you get to type right


00:17:28.360 --> 00:17:29.680
on this little monitor.


00:17:29.680 --> 00:17:30.520
It's cool.


00:17:30.520 --> 00:17:31.560
- It's fantastic.


00:17:31.560 --> 00:17:33.320
It's even at an angle and you get to type


00:17:33.320 --> 00:17:35.120
into the interpreter and it's live


00:17:35.120 --> 00:17:36.120
and you can try out Lisp.


00:17:36.120 --> 00:17:38.080
My Lisp is not good enough, but I can at least hit enter


00:17:38.080 --> 00:17:39.720
and see 42L come out.


00:17:39.720 --> 00:17:41.520
So check this out.


00:17:41.520 --> 00:17:44.520
This is really pretty interesting if you're into Lisp.


00:17:44.520 --> 00:17:46.100
If you're not into Lisp, I think it's just


00:17:46.100 --> 00:17:49.680
an interesting data point of here's one more thing,


00:17:49.680 --> 00:17:53.440
one alternate way to get other languages in the Python ecosystem.


00:17:53.440 --> 00:17:58.560
Yeah, I just tried out the extent of my Lisp knowledge that cons makes a tuple.


00:17:58.560 --> 00:18:03.520
So nice. I have forgotten all about the cutter in the car and all that stuff from when I took


00:18:03.520 --> 00:18:05.920
it back in school. It's been a long time. It's been a long time.


00:18:05.920 --> 00:18:10.640
It is. All right. Well, that's it for the news this week, everyone. I


00:18:10.640 --> 00:18:12.960
think Brian, you found some good ones.


00:18:12.960 --> 00:18:17.920
Thank you. I do want one last thing I want to do a little bit of follow up last week when we covered


00:18:17.920 --> 00:18:22.480
Peter too, I commented that it didn't look that great in PyPI.


00:18:22.480 --> 00:18:25.240
And that was fixed last week.


00:18:25.240 --> 00:18:30.580
And with one of the best pull requests I've ever seen or comments in the code,


00:18:30.580 --> 00:18:33.720
and it was, the comment was remove beer from readme.


00:18:33.720 --> 00:18:39.740
Apparently there was a beer Unicode symbol that was messing up the PyPI stuff.


00:18:39.740 --> 00:18:41.360
So that's good.


00:18:41.360 --> 00:18:45.820
It's marked as a bug and urgent that we get the beer out of the readme.


00:18:45.820 --> 00:18:46.720
Fantastic.


00:18:46.720 --> 00:18:48.720
That is awesome.


00:18:48.720 --> 00:18:50.720
All right, yeah, cool.


00:18:50.720 --> 00:18:52.720
So, it's pretty neat that that actually,


00:18:52.720 --> 00:18:54.720
that people listen to our show and change


00:18:54.720 --> 00:18:56.720
the projects based on it, right? That's awesome.


00:18:56.720 --> 00:18:58.720
Yeah, or they may have noticed it


00:18:58.720 --> 00:19:00.720
on their own, but let's go with that they're


00:19:00.720 --> 00:19:02.720
listeners. They took your advice


00:19:02.720 --> 00:19:04.720
and removed the beer. Excellent.


00:19:04.720 --> 00:19:06.720
All right, well, thanks so much for chatting with me, Brian,


00:19:06.720 --> 00:19:08.720
and sharing the news with everyone. It's


00:19:08.720 --> 00:19:10.720
fun as always. Thank you. Yep. Bye.


00:19:10.720 --> 00:19:14.000
Thank you for listening to Python Bytes.


00:19:14.000 --> 00:19:19.840
Follow the show on Twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S.


00:19:19.840 --> 00:19:23.160
And get the full show notes at pythonbytes.fm.


00:19:23.160 --> 00:19:26.880
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:19:26.880 --> 00:19:27.880
way.


00:19:27.880 --> 00:19:30.360
We're always on the lookout for sharing something cool.


00:19:30.360 --> 00:19:33.640
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:19:33.640 --> 00:19:36.880
Thank you for listening and sharing this podcast with your friends and colleagues.

