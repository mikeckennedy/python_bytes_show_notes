00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your buds.

00:00:04 This is episode 181, recorded May 6, 2020. I'm Michael Kennedy.

00:00:09 And I am Brian Otkin.

00:00:10 And this episode is brought to you by Datadog. Tell you more about them later.

00:00:13 Brian, this first item that you picked here, I saw this going around the Twitterverse and I was like, "Oh, that looks really cool. Tell us about it." Yes, Interrogate. So it's a new little tool. I think it's kind of new, new to me at least.

00:00:26 It checks your code base for missing docstrings, or the presence of docstrings.

00:00:31 So it's written and maintained by Linroot, and we were notified by Herbert Beamster, suggested it to us.

00:00:38 I like docstrings.

00:00:39 I don't have a policy of having them everywhere, but docstrings can help you understand the code quite a bit.

00:00:45 I really love how a function docstring is utilized by VS Code and PyCharm and other editors to do things like, if you hover over a function, and it just pops up a little window with like, you know, what parameters you can send to it, but it also sends the docstring, shows the docstring if there is one.

00:01:03 There's also other tools like Sphinx or PyDoc or Docutils that can use that amongst other things to generate documentation.

00:01:11 I don't really use those.

00:01:12 I know a lot of people do though.

00:01:14 So it's a problem if you've got some missing, if you really need to have docstring someplace and they're missing.

00:01:19 So interrogate is a command line tool that you can use to check your code to make sure everything has a doc string that needs to.

00:01:26 - I think this is great. - It's so cool.

00:01:27 - Yeah, it's super cool.

00:01:28 And well done, Lynn.

00:01:29 Nice work on this one.

00:01:30 I think this is really nice because if you have a public library, that should be documented, right?

00:01:36 That should be covered with nice doc strings that give you all sorts of help in your editor, like you mentioned, but also if you generate the documentation, you don't wanna have just some random empty, either completely missing or just the, you know, like the function name and just an empty body or whatever it gets generated there.

00:01:56 So this is really cool.

00:01:57 And I could see if you were doing a package that was public, having this part of your CI/CD process that if somebody introduces something into say like a PR, here's a new function we wrote, like great.

00:02:10 It failed the CI because it doesn't have a docstring.

00:02:13 That'd be awesome.

00:02:14 - Yeah, and then there's also some common, there's some common like caveats, Like, yes, all public functions should have docstrings.

00:02:21 But what about like private functions and stuff?

00:02:24 There's options to be able to turn off things where you might not need a docstring for just an internal helper function or something.

00:02:32 - Yeah, I totally agree.

00:02:33 Like if it's not really meant to be included, you know, in the public API, then it shouldn't necessarily have a docstring.

00:02:41 - Yeah, it can if it helps to understand it, but you don't, maybe you don't need it.

00:02:44 So this is nice.

00:02:45 - Yeah, yeah, this is super cool.

00:02:47 Well done, Lynn.

00:02:48 I wanted to mention also there is information on the readme about how to use the tool within talks and within CI workflows, so that's helpful.

00:02:57 Yeah, this one seems like a super easy thing to adopt if you already have a CI process in place and you're working on something that's public, whether that's public to your people within your company or it's a package that is used by other projects, or it's public as in on pypi.org.

00:03:16 I still think it makes sense to just document it for whoever's consuming it who's not writing it.

00:03:20 Yep, very cool.

00:03:21 Now, this next one I've been holding off on talking about for a long time because it's really interesting, but I didn't feel like I was able to do it justice.

00:03:31 So the thing I wanna talk about is Streamlit.

00:03:34 With Streamlit, the idea is it allows you to build much simpler data science applications and web apps, I guess you would say.

00:03:45 So many people come to Python from, I've got a little bit of computation that I gotta do, and so I'm going to write a script that does like 10 things.

00:03:56 Maybe it doesn't even have a function, it just does, you know, load data, transform data, pivot data, show graph, or something like that, right?

00:04:04 Really, really simple.

00:04:05 They're not like pro web developers that are like busting out Vue or React or something like that to build cool apps.

00:04:12 But they've got this really cool outcome with Python, and they're happy, but at the same time, they would like to have this publicly shareable.

00:04:20 They maybe wanna put it on the internet.

00:04:21 They wanna make a web app out of it.

00:04:23 And the gap from I've got 10 lines of code that outputs a graph to I have a fully interactive, dynamic, server-backed, JavaScript front-end type of visual website, that's a big gap, right?

00:04:36 - Yeah. - So, Streamlit--

00:04:38 - Even for me, yeah. - Yeah, well, yeah, for me as well.

00:04:41 Now for Streamlit, the idea is that you write the code in the simple straightforward style that I talked about, but then it turns it into an interactive web application.

00:04:53 - That's neat.

00:04:53 - That sounds neat, right?

00:04:54 And it does a whole bunch of really interesting tricks to let you continue to write code in this simple straightforward way, and yet interact with like callbacks and stuff.

00:05:06 So you might have a function that comes along and says, okay, what I need to do is I wanna show, I don't know, a dropdown list in a web app or a slider bar or something like that.

00:05:15 And then you write your code that says, get the value from the slider bar.

00:05:19 And you might think, okay, well, normally that's a wait for the user to click on the slider bar.

00:05:24 And when there's a change or some kind of callback, and then you have some function that runs on the callback and then it updates the DOM, right?

00:05:31 But this is like straightforward procedural code or imperative code that doesn't have any of those ideas in it.

00:05:37 So what it does is it uses interesting caching on your function so that if it were to rerun it with the same inputs, it gives you the same answer instantly, like LRU cache type of stuff.

00:05:48 And then if any of those controls on the webpage change, it just reruns the whole script.

00:05:52 And when you say, "Get me the value from the slider," it says, "Well, currently the slider's set at this." And if it happens to change, it just reruns the entire thing from beginning to end.

00:06:02 But because everything's cached, it only recomputes the parts that are needed.

00:06:07 So you don't have to think about callbacks, you don't have to think about user interaction, You just write top to bottom code.

00:06:12 And here you've got multiple parts of your application that can be changed dynamically that just continue to refresh.

00:06:18 And it refreshes it by using JavaScript.

00:06:21 So it doesn't even reload the page.

00:06:23 It just looks like parts of the page are dynamic and coming alive.

00:06:26 - Oh, wow.

00:06:27 This is neat.

00:06:28 - Yeah, so it's super cool.

00:06:29 Basically, if you can write like straightforward top to bottom code that works with like graphing or pandas or something like that, you now can create a single page, a spa app.

00:06:41 And I don't remember what JavaScript framework it uses.

00:06:43 It's like React or Vue or something like that.

00:06:45 I think it might be React.

00:06:47 Anyway, it's not super relevant, but it does all of that work with like hosting it and creating the server callbacks and setting up the JavaScript and the UI widgets and all that kind of stuff.

00:06:58 And all you do is write basically procedural code.

00:07:01 One thing that I think is a danger of these types of applications is it's easy to say, if you use our magic graphing library and our magic UI widgets and our magic, you know, data processing library, not a real database, but our magic server database that we create, then it works, right?

00:07:19 What I like about this is it doesn't do any of those things.

00:07:22 It just says, you want to use pandas and NumPy and Plotly or something like that?

00:07:27 Use those and then use them in your script and then we just make it this single page app, which is pretty awesome.

00:07:34 - Yeah, that was my question.

00:07:34 Is this a hosted thing or can I do it like behind a firewall or a local thing?

00:07:39 Or do you know?

00:07:39 >> Yes.

00:07:40 So with Streamlit, you have a couple of options.

00:07:44 I haven't done anything myself, but you can self-host it or they'll host it for you, I believe.

00:07:50 >> Okay.

00:07:50 >> And if you -- they have this thing called four teams, which is like they automatically deploy and manage the apps and you just create them and say, here's the code and run it.

00:08:00 It's like kind of a platform as a service for Streamlit apps type of thing.

00:08:04 That's a paid part of what they're doing, but the stuff I described up until then, that is free and open source.

00:08:11 So it's still pretty usable.

00:08:13 Yeah, so you have to basically deploy them yourself.

00:08:16 But they talk about how to do it.

00:08:18 You know, it's not super hard.

00:08:19 - Okay, thanks.

00:08:20 - Yeah, so I had one of the guys, Adrian, on who was behind this and has also done some other interesting technical programming stuff and with self-driving cars and folding a home, those types of things, on Talk Python just a couple episodes ago.

00:08:33 I don't remember exactly what number it was, but I guess 260-ish, something like that.

00:08:40 So just check out that episode if people want to go much deeper.

00:08:43 But this is really cool.

00:08:44 If you're writing these imperative, simple little scripting apps and you're like, "I would really like to share this or make it better," Streamlit's cool.

00:08:51 Yeah, nice.

00:08:52 Okay.

00:08:53 I feel like we both have themes for ours.

00:08:54 Your theme is continuous documenting and whatnot, and you'll see my theme develop as well.

00:08:59 This is interesting because I ran across this interrogate second, but after I ran across this article by Heenik that says why you should document your tests.

00:09:12 He makes a lot of good points.

00:09:14 So I believe, and we have this policy where I work, tests should have doc strings on them to tell you what the test is doing and why it's there.

00:09:25 There's a lot of reasons that I have never really been able to describe clearly.

00:09:30 Because ideally your test name should be descriptive and the code should be clear.

00:09:35 So why do you need a doc string?

00:09:37 That's not something that you're going to call from an API or anything.

00:09:40 You probably won't type help function, test function, right?

00:09:44 Maybe, probably not.

00:09:45 And you also don't call it.

00:09:47 I mean, like test methods that you run pytest with, pytest calls it.

00:09:51 You don't call those tests.

00:09:52 But you can get confused in the future and one of the explanations is Hinnick has a good example where he shows some simple code with a simple test name but the thing he's asserting on doesn't really make sense and the reason if you don't know what's going on under the hood and the reason is because tests often are testing for a side effect of an action. If you're testing the output of a function, that's obvious.

00:10:17 It's kind of obvious of the, if I pass in functional tests, if you pass in certain parameters and you get a certain expected output, you can assert against that.

00:10:27 But what about actions that have side effects and you need to test for those?

00:10:31 That might need some more explanation.

00:10:34 And he writes, this is quite common in testing.

00:10:36 Very often you can't ask questions directly.

00:10:39 Instead, you verify certain properties that prove that your code is achieving its goals by checking side effects and stuff like that.

00:10:48 It's a short little article and I was just happy to have some of that expressed of why you should document.

00:10:56 And it might be you that's confused in the future.

00:10:58 And then it ties back into the interrogate because, so I was just thinking when I was reading about interrogate, I'm like, oh, awesome.

00:11:05 I really want to put something in place to just make sure all my tests have doc strings.

00:11:10 And he lists in the article, the exact command line that you need to make sure that all, just text to make sure that your tests have doc strings and nothing else.

00:11:21 So this is cool.

00:11:22 - Yeah, it looks really nice.

00:11:23 And I can see how this would lead you down to finding a library that searches for or evaluates these.

00:11:31 Yeah, so the test example he has here is testing that the hash, like creating the same object, an instance of a class twice and taking the hash and making sure that those are not the same because he's trying to test that adders is not implementing false on the class or something to that effect, right?

00:11:48 So, like what the heck is going on with this?

00:11:51 Like why would you check the hash of a thing is not equal to the hash of a thing, but it's looking like you said for this sort of like hidden layer that's operating below it, right?

00:12:00 - Yeah, and then also my reasoning, and I think he brings it up, is that often when you're looking at a test, it's because you really got to get a release out and one of the tests is failing.

00:12:12 So you got to go look at the test and figure out what it's testing for and why it's failing.

00:12:17 And if you don't have it clear why the test is important, you run the risk of the person at the time going, well, I don't even understand what this test does.

00:12:26 Maybe it's not important.

00:12:27 - Comment it out.

00:12:28 - Comment it out.

00:12:29 - Passes. - You don't want that.

00:12:30 - CI's good, we're going home.

00:12:32 - I don't do that, but I've heard it done before, of course.

00:12:37 - I would never do anything like that, but I can imagine that it has been done.

00:12:41 Now, I actually have some experiences in the past where there was some project and it had a beautiful set of tests and CI and stuff and I wasn't working on it anymore and whoever took it over was like, oh, those tests were really annoying, so I turned them off.

00:12:55 You're like, oh my gosh, those were there for a reason.

00:12:58 What just happened?

00:12:59 So at least if this gives you some description about what's up, that would be good.

00:13:03 Is there anything where pytest will show the docstring as part of the error report?

00:13:09 - I think there was somebody that wrote a tool that would do, I don't remember the name of it.

00:13:13 I remember running across a plugin that would pop out the doc string for failed tests, which would be pretty cool.

00:13:19 Yeah, that would be pretty cool.

00:13:20 Hopefully, the person evaluating the test failures has access to the code they can go look.

00:13:26 Yeah, I'm thinking more of like a CI/CD, like you're not really, you don't have it like loaded up right there, right?

00:13:31 You're just like, "Oh, I'm cruising on GitHub, checking a PR.

00:13:34 What the heck is this?" Yeah, I actually wrote a, it was an internal thing, but a quick plugin for pytest that that would just before every test function, print out the test name and print out the doc string.

00:13:47 If we can look at the logs, it's there.

00:13:49 - Yeah, that's cool.

00:13:50 Very nice.

00:13:51 Also cool, Datadog.

00:13:53 So this episode is brought to you by Datadog.

00:13:56 And let me ask you a question.

00:13:57 Do you have an app in production that's slower than you like?

00:13:59 Is performance all over the place?

00:14:01 Maybe sometimes fast, sometimes slow.

00:14:03 Here's the important question.

00:14:04 Do you know why it does that?

00:14:06 With Datadog, you will.

00:14:07 You can troubleshoot your app's performance with their end-to-end tracing.

00:14:11 Check out their detailed flame graphs to find bottlenecks and latency in that finicky app of yours.

00:14:16 Be the hero that got your app back on track at your company.

00:14:19 Get started with a free trial at pythonbytes.fm/datadog and get a cool little t-shirt as well.

00:14:26 All right, so your theme so far has been pretty clear.

00:14:29 Next one of mine, I wanna talk about a project called HoloViz.

00:14:33 Have you heard of HoloViz?

00:14:34 - I have not.

00:14:35 - I'm sure you've heard of SciPy and those types of things.

00:14:38 So there's kind of a grouping of other projects, right, under that general banner with like NumPy, Matplotlib, and whatnot.

00:14:46 But HoloViz is kind of like that for data processing and visualization.

00:14:53 And one of its features acts very much like Streamlit, but in a more general, probably a little more work to set up and like, right, you got to work more on its framework, but in a very similar way to what Streamlit is doing as well.

00:15:05 So HoloViz is a coordinated effort to make browser-based data visualization in Python easier to use, easier to learn, and more powerful.

00:15:18 - Very cool.

00:15:20 - So what does it do?

00:15:21 So it has a bunch of tools that make it easier to apply Python plotting libraries to your data, a bunch of tutorials, conda, like meta package that when you conda install, HoloViz, it actually installs a whole bunch of things.

00:15:31 tell you about a second, even has some sample data sets. So you can like go through the tutorials and actually get the outcome, right? So it's made up of a bunch of different things. One called panel and that one makes creating apps and dashboards for your plots using any of the supported plotting libraries, which is pretty awesome. It has HV plot to quickly generate interactive plots, as hollow views to make your data instantly visualizable, Geo views for visualizing and geographic data, data shader for rendering huge datasets, param for creating user configurable objects, like config stuff, and then color set for like color maps.

00:16:12 So yeah, you want to have like nice colors that flow together for your plots.

00:16:17 And panel is the main thing that I was thinking of that lets you create these single page apps around interactive sliders and dropdowns, around your graphs and other kinds of stuff.

00:16:28 And yeah, very cool project as well.

00:16:30 - Yeah, I was looking at the data shader and they have some really pretty pictures 'cause of the examples of overlaying data plots over the map of the US, things like that.

00:16:43 It's cool.

00:16:44 - Yeah, or you can plot attractors with 10 million points each.

00:16:48 Oh, is that all?

00:16:49 (laughing)

00:16:50 And these graphs, the resulting pictures are, I don't know what, they're like 400 by 400 pixels or smaller.

00:16:56 Yeah, that came from 10 million points.

00:16:58 Or here's the United States plotting each person in the United States where they're physically located from the 2010 census.

00:17:08 So 300 million points of data overlaid onto the United States map.

00:17:13 Yeah, it's like a sun.

00:17:15 Really is pretty interesting, actually.

00:17:17 I think I can see you over there, Brian.

00:17:19 You're on the left.

00:17:20 (Brian laughs)

00:17:21 - You are too.

00:17:22 - That's right.

00:17:23 Awesome, anyway, yeah, so this is a cool project.

00:17:25 there's a whole bunch of different little libraries that are pretty neat.

00:17:28 So if you wanna try to visualize your data and we'll come back and talk some more about both of these projects towards the end of the show as well.

00:17:35 But bunch of cool libraries, like all brought together under this HoloViz project to make them work together.

00:17:40 - Yeah, nice.

00:17:41 - Nice, what'd you got next?

00:17:42 - I have another command line tool.

00:17:44 So this was by, oh gosh, Rosario.

00:17:48 And he wrote a little blog post about it, but there's a project called Live Progress.

00:17:53 And it's a progress bar for Python.

00:17:55 And it's really cool.

00:17:57 So--

00:17:58 - It is pretty cool.

00:17:59 - Command line interface progress bar.

00:18:01 So often, I mean, like even like pytest has added progress bars for, you know, watching your test finish and things like that.

00:18:09 And it's nice to have progress bars.

00:18:10 It gives you good feedback and whatnot, but there's limits to what you can do, except for this seems unlimited.

00:18:17 It's got a whole bunch of different animations and spinners and things you can combine to make a more entertaining progress bar.

00:18:25 So it's fun.

00:18:26 - Yeah, these are really nice.

00:18:27 And you know, these little touches, they probably don't seem like much, but they can definitely make your app feel more professional and more polished, rather than just, you know, the answer is seven or like whatever, we're done.

00:18:37 - Yeah, some of the, like, what was it?

00:18:39 Pipenv, I don't use it, but I appreciated some of the fun command line interface stuff that they've added to it.

00:18:46 And I think adding some fun to a tool is nice.

00:18:49 One of the things I wanted to comment on also was just about the repo itself.

00:18:55 So the code is up on GitHub, and the readme has some nice thing features I wanted to call out.

00:19:01 So the animated pictures of what it does is a nice touch.

00:19:05 We've said this before, we love things like this.

00:19:08 I liked that there was a to-do list, so it encourages having a short to-do list, encourages contributions.

00:19:14 And I think even listing things that I've gotten done recently so that people that might not know about those features don't try to go work on them.

00:19:22 And then just a short list of things you'd like to have done.

00:19:25 And then it has an interesting facts section, which is kind of cool.

00:19:29 The code is in a functional style.

00:19:31 It uses closures and generators.

00:19:33 So I mean, actually, a lot of times I'll look at code not--

00:19:37 as an example of how to do something.

00:19:39 So if somebody is proud of their use of generators, maybe it's worth code checking out if you're trying to learn generators.

00:19:45 And then another feature that I'm definitely going to pick up for things that I work on is change log highlights.

00:19:52 So not the entire change log in the readme, but just one or two lines of semicolon separated features per version of change.

00:20:01 So this is kind of a nice thing to add.

00:20:03 - Oh yeah, that is really nice.

00:20:04 Cool, I think it's a great project.

00:20:06 If I need a progress bar, I'm definitely gonna consider this one.

00:20:09 But like I said, I do think they're neat and I do use them sometimes.

00:20:12 So yeah, it's cool, very nice.

00:20:14 All right, last one's a quick one.

00:20:16 So we talked about HoloViz, talked about Streamlit and Panel and how those are kind of similar.

00:20:22 So there's this other project called Awesome Panel, which is kind of like an awesome list for Panel, that way to build interactive data science, single page apps, or not even single page apps.

00:20:36 This is run by Mark Skolv-Madsen.

00:20:40 Like I got that close to right Mark.

00:20:41 And yeah, it's a cool project to just show a bunch of examples and a curated list of these.

00:20:46 So yeah, if you just open that up, You can go see there's an app that comes up.

00:20:50 It takes just a second, come to life.

00:20:53 And then on the left, there's like a gallery.

00:20:54 There's all sorts of cool pictures.

00:20:56 There's also a nice talk.

00:20:57 I can't remember who gave the talk, but yeah, there's like a talk from one of the conferences.

00:21:02 But if you go to the gallery, you'll see like as you navigate around, it's kind of like this single page app.

00:21:07 So you click gallery, you'll see like the main part of the app sort of spin for a second and then come up.

00:21:11 And then you can go and say, oh, there's like one of the things that's really cool that I'll point you guys at is this thing called the image classifier in there.

00:21:18 So I went in there and it lets you, if you just scroll down, it says upload an image and you can grab some JPEG and upload it.

00:21:26 I grabbed some like random microphone picture that I had laying around and threw it in there.

00:21:31 And then it ran, you can pick different neural networks to run against it.

00:21:34 Do you wanna run NAS net mobile, NAS net large, mobile net V2, like I don't know what these are, these classifiers, but you can pick from them.

00:21:41 And then it'll tell you in a cool little graph at the bottom, like what it thinks that is.

00:21:46 And it thought the microphone was most likely a microphone, but it could have been a shield, 'cause it had like a big metal guard on the front of it.

00:21:53 It's just really cool.

00:21:53 And so this whole website is built, if I got it right, in panel, to show you how you can build a cool panel app.

00:22:01 But then as you dive into the gallery, each one of these pieces is like an interactive sub panel or something like that.

00:22:07 So it's kind of, it's a little bit meta in that regard, but it's pretty cool actually.

00:22:10 - Yeah, it's really cool.

00:22:13 - Yeah, and yeah, it's apparently super easy to work with, again, I haven't built anything with it, but it seems like a much simpler way to get your interactive data science stuff on the internet than learning Vue.js, JavaScript, Flask, SQLAlchemy, et cetera, et cetera.

00:22:30 - Yeah.

00:22:31 - Yeah, so anyway, pretty cool.

00:22:32 I recommend if you want to check this out, just go browse the gallery.

00:22:35 That's the best way to see what this thing can do.

00:22:37 - I love pretty pictures.

00:22:39 - I know, yeah, this one definitely passes our test for you must have pretty pictures.

00:22:45 (laughing)

00:22:46 in order to talk about graphical stuff.

00:22:49 Yeah, so Brian, really quick, on this next one, click on the app for it, 'cause it's take just a second to load up.

00:22:54 So that's it for our main items.

00:22:57 I wanna tell you about a couple of things, then we'll get to yours as well.

00:23:00 First, one of the features that I really like about Visual Studio Code, I haven't really used, 'cause I don't use Visual Studio Code in like a meaningful way.

00:23:10 I use it all the time for like little bits of editing, but not, if I'm like doing real projects, I'd probably use PyCharm.

00:23:16 But it has Live Share, which is a pretty killer feature.

00:23:20 So you can say, I would like to share my coding environment with someone else who's going to look over my shoulder, do paired programming, just code review, whatever, and they can actually debug and step through and see your code in their editor.

00:23:34 And it could even be a different editor.

00:23:36 I think there's other stuff supported, like proper Visual Studio versus VS Code and whatnot.

00:23:41 So that's really cool.

00:23:42 And I've always thought, well, that would be awesome for PyCharm, but no.

00:23:47 So someone on Twitter, sorry, I don't remember who sent this to me, but thank you, sent up this link to this project called CodeTogether.

00:23:55 So CodeTogether is a freemium product.

00:23:59 So this is not an open source thing.

00:24:01 It's like a paid project.

00:24:03 You can go sign up, pay dollars a month for certain features or you can just use the free version.

00:24:08 But it has that type of experience that I just talked about, but for many different editors, right?

00:24:13 So it comes for all the IntelliJ stuff.

00:24:15 So like WebStorm, PyCharm, and so on.

00:24:18 Also works with VS Code.

00:24:19 It works with other things.

00:24:21 I don't know exactly all the things that it covers, but certainly Eclipse, IntelliJ, and VS Code, which covers quite a bit.

00:24:28 So if you're looking for that and you weren't using Live Share, 'cause it didn't exist for what you were doing, you could check this out.

00:24:34 I have not used it, I'm not endorsing it.

00:24:36 I'm just saying it looks interesting and it might help people.

00:24:38 - Cool. - Yeah, yeah.

00:24:40 Cool, and then the other one that I wanna just quickly mention is related to the first thing.

00:24:46 These are totally different things.

00:24:48 But Kevin Van Der Veen sent over a message a week ago and said, "Hey, I built a cool data explorer "to help you understand the whole COVID pandemic stuff "in a local way." And he built it using Streamlit.

00:25:03 So I thought, "Hey, here's an app "that someone just sent over "that's like a cool running on Heroku Streamlit app." That would be a nice example of what I talked about at the beginning.

00:25:12 And it also has the GitHub repo there as well.

00:25:15 So if you go and check out that app, like for example, Brian, you scroll down to the second, to the third graph, below the third graph, there's like a dropdown that lets you pick Oregon, and you can go pick that.

00:25:24 And wow, it looks like we're flattening the curve really well.

00:25:26 That's pretty awesome.

00:25:27 Although the last two days have been rough, I guess.

00:25:30 Or you can go down a little farther and compare it against different states.

00:25:32 You could go in there and type like, it's Colorado.

00:25:34 You could type Oregon or New York or whatever you want.

00:25:38 And then it'll like auto-complete that out of the list and then regenerate.

00:25:41 And this is exactly like what I was saying.

00:25:43 There's some line in the Streamlit code that's just saying, get the tags from the tag selector.

00:25:50 And then if you type in there, it just reruns the whole thing, but most of the stuff's cached, and then it'll redraw the graph.

00:25:55 It's super cool.

00:25:56 So this is both useful, I think, for if you want to try to understand that.

00:26:01 It's a cool data science project.

00:26:02 The source is on GitHub.

00:26:04 But also, it's just a cool example of Streamlit if people want to see that going.

00:26:07 -And the graphs are fun, too, because you box select and zooming and stuff like that.

00:26:12 Yeah, these are just plotly.

00:26:13 So they do all the standard plotly stuff, which is pretty cool.

00:26:16 That's kind of what I like about the Streamlit thing, not forcing you to use their random graphing thing, but just other graphs that you might like.

00:26:23 Yeah.

00:26:24 Yeah.

00:26:25 All right, well, that's it for my extras.

00:26:26 What else do you got?

00:26:27 Well, I wanted to remind people that PyCon 2020 online is available and new content is still being posted through the first few weeks of May.

00:26:34 I think that's when they're wrapping things up.

00:26:37 Yeah, that's cool.

00:26:38 videos go up there yeah? Yeah one of the new videos that just came up was my talk so multiply your testing effectiveness with parameterized testing. Oh yeah there it is right at the bottom with a couple of new tags on it. Yeah so I'm excited to have people get feedback from people to see what they thought. So it looks good I like it yeah well done. While I was there I was looking around there's tons of great talks there's a bunch of tutorials there there's Charla's is that new this year? They did it last year maybe okay the last two years but it's the Spanish language track. Yeah it's neat I'm glad they're doing it. Sponsor workshops that's kind of nice to have and then even an online poster hall so that's there so it's cool. The other thing I wanted to bring up a quick extra if anybody's following the drama in pytest the drama is over and I'm happy with the resolution so hopefully there will be peace in the family. I hope so. A link to the Twitter announcement from pytest. Yeah they got the whole public statement there. So the folks who had dropped out, are they dropping back in or what's or is there just permanent fallout from that? I don't know that any more details.

00:27:45 I know at least one person is back in but all the people I was worried about are signers of this message so yeah so probably kind of seems like maybe they're back in. Yeah all right well that's awesome I'm really glad to hear that got solved and it sounds like exactly the outcome that I would have voted for for as well. Okay, so you ready for some jokes? I don't know, are these jokes? How about you?

00:28:09 Are you ready for humor?

00:28:10 Yes, humor is good.

00:28:12 Humor is definitely good. So I found a couple of funny pictures and I'm going to put the pictures in the show notes. I don't know if they'll come up in your podcast players. Some of them do, some of them don't. Some of you guys say allow pictures in this podcast feed just like in the player as you're looking at the show notes. But certainly on the website they'll be there. And these are O'Reilly book covers. I love these. They're like O'Reilly and just if you've forgotten the O'Reilly books always have the title and then they have an animal that goes with it right so if you wrote a book for O'Reilly the thing is like what's your animal on your book and whatnot. Yeah. So these are like take those ideas put an animal on it but make it silly.

00:28:57 There's also usually like some sort of saying at the top of the book.

00:29:02 So for these you definitely have to read the top also.

00:29:04 Yeah, that's right.

00:29:05 Like sort of the subtitle.

00:29:06 Okay, so how about this?

00:29:08 I'll read the first one, you do the second one and so on.

00:29:11 So this one has like a badger or something on it, on the front of it and it's kind of like sneaky head down and the title is Pointless Meetings, the Survival Guide.

00:29:21 How to survive all pointless meetings.

00:29:23 I feel like many, many things that used to be meetings these days are now in email.

00:29:30 And people are like, "Oh my gosh, they really can just be emails.

00:29:33 Why have we been going to all these meetings?" Right?

00:29:35 Yeah.

00:29:36 All right.

00:29:37 You want to get the next one?

00:29:38 Next one is overriding your teammates code.

00:29:40 My code is better than yours anyway.

00:29:42 It's got a horse on the front.

00:29:46 I don't know what the horse is.

00:29:47 I don't know either.

00:29:48 I really love this one.

00:29:50 This one is the essential semicolon, parenthesis, sorry, quote, semicolon, parenthesis, drop table animals, semicolon, dash dash, and there's no animal, because, well, this is a SQL injection that has deleted it, and it says, now with user-generated content.

00:30:07 (laughing)

00:30:09 That one's, that may be the best.

00:30:11 - Yes, now with a security hole.

00:30:13 - Exactly.

00:30:14 Related, what's next?

00:30:15 - Okay, this one has a fish on the cover.

00:30:17 Expert hoping nobody hacks you.

00:30:20 security by optimism and prayer.

00:30:23 - I don't know what the fish has to do with it.

00:30:24 I must be missing it.

00:30:25 - But, no, but that's good.

00:30:27 That's most people's security solution, right?

00:30:30 - That's true.

00:30:31 So, the next one is an octopus.

00:30:34 Obviously, many legs that can type many things.

00:30:37 And the title of the entire book is Exiting Vim, Eventually.

00:30:42 Just memorize the 14 contextual dependent instructions.

00:30:45 (laughing)

00:30:48 - Exiting Vim, Eventually.

00:30:49 - Oh, I love it, I love it.

00:30:51 Yeah, so you'll have to visit the website and check out these because they're pretty sweet.

00:30:56 Awesome, speaking of sweet, it's been great to be here with you, Brian, thanks.

00:30:59 - It's been great, thanks.

00:31:00 - Yep, bye. - Bye.

