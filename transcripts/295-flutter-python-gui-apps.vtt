
00:00:00.000 --> 00:00:07.320
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 295


00:00:07.320 --> 00:00:13.220
Recorded August 4th 2022 and I am Brian Okken. I'm Michael Kennedy. It's good to have you back


00:00:13.220 --> 00:00:15.960
Good to be back for people out there listening


00:00:15.960 --> 00:00:20.120
We kind of batch some stuff up so that you have vacation for a couple weeks


00:00:20.120 --> 00:00:26.920
But now our news items will be more closely related in time to the release of the episode. Oh, we didn't do that


00:00:26.920 --> 00:00:28.220
>> It was live.


00:00:28.220 --> 00:00:30.960
>> No, it was always live.


00:00:30.960 --> 00:00:34.160
>> I'm glad you got back quickly.


00:00:34.160 --> 00:00:37.680
Speaking of fast, you've got a fast story for us.


00:00:37.680 --> 00:00:40.640
>> Yeah. How about we make things faster?


00:00:40.640 --> 00:00:43.920
I want to talk about Flask and Cort.


00:00:43.920 --> 00:00:45.600
Flask is Flask.


00:00:45.600 --> 00:00:47.720
It's one of the most popular web frameworks out there.


00:00:47.720 --> 00:00:53.480
Cort is the API compatible async version of Flask,


00:00:53.480 --> 00:00:55.560
originally done by Philip Jones.


00:00:55.560 --> 00:01:02.200
But I think that Philip has joined David Lord in, at least in support of the pallets organization.


00:01:02.200 --> 00:01:05.800
I feel like Flask and Cort are working much closer together these days.


00:01:05.800 --> 00:01:07.720
So I don't know exactly what the relationship is,


00:01:07.720 --> 00:01:10.760
but Flask and Cort are very closely tied together right now.


00:01:10.760 --> 00:01:17.320
What I want to talk about is routing, or for those UK friends, rooting if you prefer.


00:01:17.320 --> 00:01:21.960
But the idea of taking a URL and figuring out what function to call.


00:01:21.960 --> 00:01:27.660
Right, so what you do is you set up in Flask, you say @app.get, app.post,


00:01:27.660 --> 00:01:29.660
and you give it URL pattern.


00:01:29.660 --> 00:01:34.060
Sometimes that's just like /about, other times it's like /categories,


00:01:34.060 --> 00:01:37.860
bracket, category name, or even more general stuff,


00:01:37.860 --> 00:01:40.860
like where you might say, it's category,


00:01:40.860 --> 00:01:44.560
maybe a category ID and it has to be an integer, so convert that for me.


00:01:44.560 --> 00:01:50.660
Or I want to just capture arbitrary path, arbitrary URLs, /edit,


00:01:50.660 --> 00:01:52.060
whatever that happens to be.


00:01:52.060 --> 00:01:54.660
So that's the idea of routing.


00:01:54.660 --> 00:01:57.260
And the whole article here, something,


00:01:57.260 --> 00:01:59.260
the big news is that


00:01:59.260 --> 00:02:02.760
Philip Jones has worked on Vexoig,


00:02:02.760 --> 00:02:05.360
the HTTP router that is the foundation of


00:02:05.360 --> 00:02:07.360
doing the routing in Flask and Quart.


00:02:07.360 --> 00:02:08.860
And it's something like


00:02:08.860 --> 00:02:11.360
five times faster than it was before.


00:02:11.360 --> 00:02:12.660
I think five times the number.


00:02:12.660 --> 00:02:12.960
Wow.


00:02:12.960 --> 00:02:13.660
Much faster.


00:02:13.660 --> 00:02:15.660
So for very small little toy apps,


00:02:15.660 --> 00:02:17.060
if you have a couple of routes,


00:02:17.060 --> 00:02:18.360
whatever, it's no big deal.


00:02:18.360 --> 00:02:21.440
However, if you've got a production app like say,


00:02:21.440 --> 00:02:23.640
TalkByThon training where you've got hundreds,


00:02:23.640 --> 00:02:25.240
at least hundreds of routes,


00:02:25.240 --> 00:02:28.780
when a URL comes in, you could spend a decent amount of time checking.


00:02:28.780 --> 00:02:31.020
Is it get or is it post?


00:02:31.020 --> 00:02:33.880
Is it this URL and actually this thing here,


00:02:33.880 --> 00:02:35.260
can we convert it to an integer?


00:02:35.260 --> 00:02:36.800
Because if not, that's a 404,


00:02:36.800 --> 00:02:39.800
it's a different route and all the stuff that goes on there.


00:02:39.800 --> 00:02:40.280
>> Yeah.


00:02:40.280 --> 00:02:43.200
>> So the way that it worked previously is it


00:02:43.200 --> 00:02:46.680
just when you would specify these routes like app.get/api,


00:02:46.680 --> 00:02:50.120
an API slash angle bracket ID,


00:02:50.120 --> 00:02:53.120
those types of things, it would just come up with a table that just says,


00:02:53.120 --> 00:02:55.120
"Okay, here's the get verb,


00:02:55.120 --> 00:02:58.520
here's the path, and here's the function that it goes to."


00:02:58.520 --> 00:03:00.280
It was using regular expressions.


00:03:00.280 --> 00:03:06.280
So slash API or slash API and then backslash D plus,


00:03:06.280 --> 00:03:08.560
the regular expression for a number.


00:03:08.560 --> 00:03:10.360
The way it works is it just says, "Okay,


00:03:10.360 --> 00:03:13.640
we're going to run the verb test,


00:03:13.640 --> 00:03:17.560
the regex test, all those things, one at a time, top to bottom.


00:03:17.560 --> 00:03:21.880
Well, Brian, I know you studied a lot of computer stuff.


00:03:21.880 --> 00:03:26.760
This is not something that's good that grows with time, right?


00:03:26.760 --> 00:03:29.880
As you add more of these, it's complexity.


00:03:29.880 --> 00:03:30.200
What is it?


00:03:30.200 --> 00:03:35.160
Something like O of N or maybe a little bit O of N squared, maybe?


00:03:35.160 --> 00:03:35.800
I'm not sure.


00:03:35.800 --> 00:03:39.800
Something like that, because you're testing the verbs and you're testing the things, right?


00:03:39.800 --> 00:03:44.760
So as you get these larger and larger, you're like running through them every single request.


00:03:44.760 --> 00:03:49.240
And the world is full of interesting data structures and algorithms that you might consider.


00:03:49.240 --> 00:03:55.160
So the idea was, this is going to get rewritten into something that's not just the sort of brute


00:03:55.160 --> 00:04:01.400
force test at top to bottom in the order that is defined here. And so I think one thing,


00:04:01.400 --> 00:04:06.600
it's interesting the news that routing in Flask and Qt is five times faster. That's fantastic.


00:04:06.600 --> 00:04:08.600
but also just thinking about the algorithms.


00:04:08.600 --> 00:04:10.920
I think it's a cool problem solver,


00:04:10.920 --> 00:04:14.840
problem solving thing to go look at, an example.


00:04:14.840 --> 00:04:20.000
Philip thought about different ways in which you might do this and how it works.


00:04:20.000 --> 00:04:24.160
The first algorithm that he looked at was a radix tree.


00:04:24.160 --> 00:04:29.080
This is an interesting tree structure that gets defined where instead of having a table,


00:04:29.080 --> 00:04:32.560
you have all the verbs and then under each verb,


00:04:32.560 --> 00:04:36.360
you've got the path pattern.


00:04:36.360 --> 00:04:37.000
>> Okay.


00:04:37.000 --> 00:04:39.500
>> One of the things that's interesting here is,


00:04:39.500 --> 00:04:42.000
they have a path type.


00:04:42.000 --> 00:04:48.800
If you were building a CMS or something that would handle arbitrary URLs,


00:04:48.800 --> 00:04:51.240
you could build a database thing that says,


00:04:51.240 --> 00:04:54.000
here's a URL and here's the content to show for that URL.


00:04:54.000 --> 00:04:59.480
How do you express all the variations of that in the routing of Flask or


00:04:59.480 --> 00:05:02.800
other frameworks is you just say it's a path type


00:05:02.800 --> 00:05:05.880
instead of an integer or something along those lines.


00:05:05.880 --> 00:05:09.080
So there's kind of this wildcard thing that makes it a little bit harder.


00:05:09.080 --> 00:05:11.880
So you've got this get and you've got this post,


00:05:11.880 --> 00:05:17.720
you've got API, remember we had /API and we had /API/ID.


00:05:17.720 --> 00:05:21.000
So what gets created is there's a get node in the tree,


00:05:21.000 --> 00:05:26.360
then an API node that if it matches exactly terminates at that column,


00:05:26.360 --> 00:05:29.360
but if not, then it also has the, well keep going and match


00:05:29.360 --> 00:05:31.560
the next part of the path as a number.


00:05:31.560 --> 00:05:34.680
And if that matches, then you're going to get this next segment.


00:05:34.680 --> 00:05:37.560
Otherwise, you'll go to the next part of the tree and cruise through it.


00:05:37.560 --> 00:05:39.080
What do you think of that? That looks cool, right?


00:05:39.080 --> 00:05:45.560
>> Yeah. It looks good and also faster because you don't look at everything.


00:05:45.560 --> 00:05:47.580
>> Right. Exactly. You say, is it a get or post?


00:05:47.580 --> 00:05:49.980
Boom, you're down to one segment.


00:05:49.980 --> 00:05:51.920
Then you're like, well, what's this next path?


00:05:51.920 --> 00:05:57.380
You really quickly cruise through the various possibilities.


00:05:57.380 --> 00:06:01.680
This looks really great until you get down to this wild card thing.


00:06:01.680 --> 00:06:05.240
and it turns out with all the variations and whatnot,


00:06:05.240 --> 00:06:09.640
of like the wildcard matching and the sub wildcard matching,


00:06:09.640 --> 00:06:11.600
it didn't really work that well.


00:06:11.600 --> 00:06:17.000
But one benefit is the performance is now described as O of N,


00:06:17.000 --> 00:06:18.280
which is pretty good,


00:06:18.280 --> 00:06:20.640
better than N squared or something like that.


00:06:20.640 --> 00:06:24.920
>> Yeah. N is the depth now, not the.


00:06:24.920 --> 00:06:26.560
>> Right. That's very important.


00:06:26.560 --> 00:06:29.160
It's the depth rather than just the number,


00:06:29.160 --> 00:06:30.440
which is even better, right?


00:06:30.440 --> 00:06:36.680
because I think I'm still confused if, if like, if they're all gets, for instance, if


00:06:36.680 --> 00:06:41.720
you like most of your API is retrieval, are they all going to be falling into that wildcard


00:06:41.720 --> 00:06:42.720
thing?


00:06:42.720 --> 00:06:47.000
Yeah, I think they would. But then they would just be one. I think it'd be one more step.


00:06:47.000 --> 00:06:51.520
I think that splits pretty quick on the second part. But still, it's not that relevant, because


00:06:51.520 --> 00:06:57.800
that's that turned out to not work. What works is something I would have never, never thought


00:06:57.800 --> 00:07:02.600
should apply to this path finding, path determining algorithm.


00:07:02.600 --> 00:07:03.600
Ooh.


00:07:03.600 --> 00:07:05.160
And that's a state machine.


00:07:05.160 --> 00:07:06.160
Awesome.


00:07:06.160 --> 00:07:08.160
Are you a fan of state machines?


00:07:08.160 --> 00:07:09.160
Yes, I am.


00:07:09.160 --> 00:07:10.160
I love them.


00:07:10.160 --> 00:07:11.160
Yeah.


00:07:11.160 --> 00:07:12.160
Yeah.


00:07:12.160 --> 00:07:13.160
State machines are pretty wild.


00:07:13.160 --> 00:07:14.560
You know, I'm in the current editing state.


00:07:14.560 --> 00:07:16.280
Now what are my options?


00:07:16.280 --> 00:07:17.280
Where can I go from here?


00:07:17.280 --> 00:07:18.280
Things like that.


00:07:18.280 --> 00:07:21.960
So you define the same set of routes, but what you get is a state machine that has these


00:07:21.960 --> 00:07:23.320
transitions.


00:07:23.320 --> 00:07:25.040
For example, state one says,


00:07:25.040 --> 00:07:27.560
if you go to API, we'll go to state two.


00:07:27.560 --> 00:07:29.520
Or if you do some wildcard/edit,


00:07:29.520 --> 00:07:31.300
then the answer is you just do the edit,


00:07:31.300 --> 00:07:33.240
or you just do the true wildcard thing,


00:07:33.240 --> 00:07:35.600
and then you do some other step there.


00:07:35.600 --> 00:07:36.840
>> Pretty interesting.


00:07:36.840 --> 00:07:39.460
>> Then say for this API where it says go to state two,


00:07:39.460 --> 00:07:40.800
state two says, well,


00:07:40.800 --> 00:07:42.080
if there's nothing else,


00:07:42.080 --> 00:07:43.760
you've already gone through API,


00:07:43.760 --> 00:07:46.680
then you call the function create API you're looking for.


00:07:46.680 --> 00:07:48.040
Otherwise, if it's a number,


00:07:48.040 --> 00:07:49.200
go to state three,


00:07:49.200 --> 00:07:50.440
and state three says, well,


00:07:50.440 --> 00:07:51.440
if that's it, then you're done.


00:07:51.440 --> 00:07:54.520
Otherwise, you're in this wildcard state and so on.


00:07:54.520 --> 00:07:56.840
The way that you bounce between these states,


00:07:56.840 --> 00:07:58.560
it's pretty fascinating.


00:07:58.560 --> 00:08:02.800
>> Yeah, and also, how is this faster?


00:08:02.800 --> 00:08:05.760
>> Exactly. Yes, it doesn't.


00:08:05.760 --> 00:08:07.760
Like I said, I would have never thought about it because


00:08:07.760 --> 00:08:10.200
it also doesn't seem faster.


00:08:10.200 --> 00:08:14.360
However, you get to the benchmarking section and it says,


00:08:14.360 --> 00:08:18.160
I think by having 20 routes here or something,


00:08:18.160 --> 00:08:21.000
it came out to be quite a bit faster.


00:08:21.000 --> 00:08:23.000
Let's see.


00:08:23.000 --> 00:08:25.000
Ratio of, this one says


00:08:25.000 --> 00:08:27.000
50% better. I said 5 times,


00:08:27.000 --> 00:08:29.000
maybe it's not that much faster, but somewhere I know


00:08:29.000 --> 00:08:31.000
there's a 5. There's gotta be, yeah, here we go.


00:08:31.000 --> 00:08:33.000
Factor up to 5 times


00:08:33.000 --> 00:08:35.000
speed increase. And the more routes


00:08:35.000 --> 00:08:37.000
you have, the faster, the bigger


00:08:37.000 --> 00:08:39.000
the increase is. The more


00:08:39.000 --> 00:08:41.000
complicated and big your application is,


00:08:41.000 --> 00:08:43.000
the more it's going to benefit from this, right?


00:08:43.000 --> 00:08:45.000
I think it says that if you're


00:08:45.000 --> 00:08:47.000
looking at just like a toy example,


00:08:47.000 --> 00:08:49.000
you can run the benchmarks all you want,


00:08:49.000 --> 00:08:50.560
and it's not going to make any difference,


00:08:50.560 --> 00:08:53.120
but for realistic ones, it'll be quite a bit faster.


00:08:53.120 --> 00:08:55.280
So pretty cool.


00:08:55.280 --> 00:08:57.480
If you're using Flask record,


00:08:57.480 --> 00:08:59.000
be sure to use the latest version


00:08:59.000 --> 00:09:01.200
because the version that's coming out with this,


00:09:01.200 --> 00:09:03.120
this is going to make it a lot faster for you.


00:09:03.120 --> 00:09:05.520
And just an interesting example


00:09:05.520 --> 00:09:08.680
of how you might have a non-obvious solution


00:09:08.680 --> 00:09:10.240
to a problem like a state machine


00:09:10.240 --> 00:09:11.960
for finding the URL matches.


00:09:11.960 --> 00:09:12.920
- Yeah.


00:09:12.920 --> 00:09:13.880
- Brandon, now the audience says,


00:09:13.880 --> 00:09:16.040
I agree, I don't see how this is faster.


00:09:16.040 --> 00:09:18.680
I hear you.


00:09:18.680 --> 00:09:24.680
But the cool thing about computers is you push the button and then it does a thing and then you know, right?


00:09:24.680 --> 00:09:29.680
It's not like you got to have a theory and then you debate the theory and it's measurable.


00:09:29.680 --> 00:09:36.680
One of the interesting things around this also is that you can't assume much for Flask or Cort


00:09:36.680 --> 00:09:39.680
because there are frameworks that other people build up websites with.


00:09:39.680 --> 00:09:48.680
So some people are going to have like big, thick foresty trees that have lots of branching and everything for their, for their routes.


00:09:48.680 --> 00:09:54.680
And some people are going to have like, oh, let's just throw half the stuff in one, in one directory or one bucket or something like that.


00:09:54.680 --> 00:10:01.680
Right. That's true. A lot of people have different variations of how they construct the URLs that map to your site.


00:10:01.680 --> 00:10:03.680
And that also affects it. That's true.


00:10:03.680 --> 00:10:04.400
>> That's true.


00:10:04.400 --> 00:10:09.680
>> You have to have both be faster or not.


00:10:09.680 --> 00:10:13.680
You just have to not be slower in really any case.


00:10:13.680 --> 00:10:14.280
Interesting.


00:10:14.280 --> 00:10:16.480
>> Yeah. Also looking at the state machine,


00:10:16.480 --> 00:10:17.960
there's only four states.


00:10:17.960 --> 00:10:22.320
Most things terminate in one or two steps.


00:10:22.320 --> 00:10:24.480
Instead of testing four, five,


00:10:24.480 --> 00:10:27.080
six different regular expressions, doing one or two.


00:10:27.080 --> 00:10:27.480
>> Yeah.


00:10:27.480 --> 00:10:28.960
>> But yeah, it is interesting.


00:10:28.960 --> 00:10:30.200
What do you got next for us?


00:10:30.200 --> 00:10:31.720
>> Well, speaking of court,


00:10:31.720 --> 00:10:35.800
We've got court. Oh, or corto. And actually, it's funny, I have


00:10:35.800 --> 00:10:39.200
no idea if this is built on court or not, probably not. But


00:10:39.200 --> 00:10:44.080
I don't know. So corto. This was Oh, somebody said, suggested it


00:10:44.080 --> 00:10:50.200
Paul McKenzie. This is a, this is a thing to build documents


00:10:50.200 --> 00:10:54.320
and stuff. But it's, it's open source. And it's, it's, it's,


00:10:54.320 --> 00:10:57.880
they say open source scientific and technical publishing system


00:10:57.960 --> 00:11:05.160
built on Pandoc. So we love Pandoc, at least I do. It converts Markdown to really anything else,


00:11:05.160 --> 00:11:12.440
or REST to other stuff. Like a whole bunch of stuff. You can convert things to like PDFs or


00:11:12.440 --> 00:11:18.680
even ebooks and HTML documents, all sorts of things. So this is, and then Jupyter, of course,


00:11:18.680 --> 00:11:26.120
Jupyter's great for a lot of scientific Python research and data science, and even just learning


00:11:26.120 --> 00:11:27.520
in Python and playing and stuff.


00:11:27.520 --> 00:11:31.160
And I've kind of liked to see lately


00:11:31.160 --> 00:11:33.540
some people doing presentations even


00:11:33.540 --> 00:11:37.280
with just right within Jupyter Notebooks,


00:11:37.280 --> 00:11:38.220
just kind of fun.


00:11:38.220 --> 00:11:40.660
And I know people are teaching that way with tutorials.


00:11:40.660 --> 00:11:44.200
But anyway, so Cordo is a system where you can do,


00:11:44.200 --> 00:11:47.260
you can have documents be either Markdown documents


00:11:47.260 --> 00:11:49.740
or Jupyter Notebooks and have a combination


00:11:49.740 --> 00:11:52.480
of these things around and then build up stuff.


00:11:52.480 --> 00:11:55.920
So you can, so you know, you've got like a Jupyter Notebook


00:11:55.920 --> 00:11:59.280
in a demo and some markdown and stuff.


00:11:59.280 --> 00:12:05.500
Then you can convert the whole thing to a website or a journal entry,


00:12:05.500 --> 00:12:11.680
a publication ready for a journal or a website or an e-book or really anything.


00:12:11.680 --> 00:12:12.960
This is pretty exciting.


00:12:12.960 --> 00:12:15.260
>> I think it's very neat.


00:12:15.260 --> 00:12:17.000
The idea you can take a notebook,


00:12:17.000 --> 00:12:19.820
put a little extra metadata into it,


00:12:19.820 --> 00:12:22.360
and then publish it to all these different sources.


00:12:22.360 --> 00:12:24.200
Have you seen how much you can do?


00:12:24.200 --> 00:12:25.520
This is based on Pandoc.


00:12:25.520 --> 00:12:27.040
Have you seen how much you can do with Pandoc?


00:12:27.040 --> 00:12:28.440
Have you seen the conversion?


00:12:28.440 --> 00:12:31.440
Like, here, I'll pull up their homepage here.


00:12:31.440 --> 00:12:33.840
You just go to pandoc.org.


00:12:33.840 --> 00:12:37.240
See on the right, that thing that looks like gray shading?


00:12:37.240 --> 00:12:38.080
- Yeah.


00:12:38.080 --> 00:12:39.240
- Those are the different formats


00:12:39.240 --> 00:12:41.480
that it can convert from or to.


00:12:41.480 --> 00:12:42.680
- Yeah, it's incredible.


00:12:42.680 --> 00:12:44.920
- It's just like, unbelievable, yeah, yeah.


00:12:44.920 --> 00:12:48.040
So when you say, okay, well, if I could take my notebook


00:12:48.040 --> 00:12:50.220
and then power it through Pandoc to do these things,


00:12:50.220 --> 00:12:53.520
like, the output possibilities are insane.


00:12:53.520 --> 00:13:00.880
>> Yeah. One of the things that was unexpected for me is the presentation.


00:13:00.880 --> 00:13:03.240
So you can convert one of these to-


00:13:03.240 --> 00:13:05.040
>> To PowerPoint?


00:13:05.040 --> 00:13:07.480
>> Yeah, even to PowerPoint.


00:13:07.480 --> 00:13:10.040
I was excited about Reveal.js.


00:13:10.040 --> 00:13:11.480
I like Reveal.


00:13:11.480 --> 00:13:14.640
But in Beamer, I don't know what Beamer is.


00:13:14.640 --> 00:13:16.440
>> I've never heard of Beamer either.


00:13:16.440 --> 00:13:18.960
It's going to be our new favorite way to present.


00:13:18.960 --> 00:13:21.480
You can create Beamer LaTeX.


00:13:21.480 --> 00:13:25.640
>> I see. So is Beamer maybe is a little more scientific,


00:13:25.640 --> 00:13:27.480
mathematical where you have to have,


00:13:27.480 --> 00:13:29.820
here's the integral of this or where you've got


00:13:29.820 --> 00:13:33.940
really specific things possibly, I don't know, specific formulas.


00:13:33.940 --> 00:13:35.800
>> Then within each of these formats,


00:13:35.800 --> 00:13:39.540
there's things like, so I use Reveal.js for instance,


00:13:39.540 --> 00:13:43.480
but the documentation is great.


00:13:43.480 --> 00:13:48.920
It talks about using this to create code blocks and line highlighting.


00:13:48.920 --> 00:13:54.360
Check this out, you've got line highlighting that goes incremental.


00:13:54.360 --> 00:13:56.880
So you could have stages,


00:13:56.880 --> 00:14:00.560
instead of creating three slides, for instance,


00:14:00.560 --> 00:14:03.240
that have just slightly different highlighted text,


00:14:03.240 --> 00:14:07.200
you can say what order you want things highlighted in as you step through them.


00:14:07.200 --> 00:14:10.580
So I'm going to try this for presentation.


00:14:10.580 --> 00:14:11.920
>> I might try this as well.


00:14:11.920 --> 00:14:13.420
This is pretty neat actually.


00:14:13.420 --> 00:14:16.860
>> I was excited also about the e-books feature.


00:14:16.860 --> 00:14:19.180
You can even publish EPUB.


00:14:19.180 --> 00:14:21.980
I was talking to Matt Harrison about this,


00:14:21.980 --> 00:14:24.020
and Matt pointed out that he'd seen this,


00:14:24.020 --> 00:14:27.700
but he was, if you really care about indexing


00:14:27.700 --> 00:14:29.940
or the front matter or the back matter,


00:14:29.940 --> 00:14:34.340
this doesn't quite get there for generating that stuff.


00:14:34.340 --> 00:14:36.900
But there's cross-references


00:14:36.900 --> 00:14:38.660
and all sorts of things that it does do.


00:14:38.660 --> 00:14:42.140
So if you're just starting out a publication,


00:14:42.140 --> 00:14:43.100
this would be kind of fun.


00:14:43.100 --> 00:14:44.780
So I'm excited about this.


00:14:44.780 --> 00:14:48.420
The reason, one of the reasons why I brought up EPUB is


00:14:48.420 --> 00:14:53.260
I read all my, I read all my eBooks on a Kindle.


00:14:53.260 --> 00:14:55.540
And whenever I used to see this, I was like,


00:14:55.540 --> 00:14:57.020
but do Mobi also,


00:14:57.020 --> 00:14:58.380
'cause I wanna be able to read it on my Kindle.


00:14:58.380 --> 00:14:59.620
- Yes, exactly.


00:14:59.620 --> 00:15:01.740
- But I don't have the link here,


00:15:01.740 --> 00:15:05.820
but Kindle, Amazon is doing a conversion this year.


00:15:05.820 --> 00:15:08.160
So right now the mail to,


00:15:08.160 --> 00:15:11.380
the last time I sent a Mobi document to my Kindle


00:15:11.380 --> 00:15:13.140
through the email feature,


00:15:13.140 --> 00:15:14.560
it emailed me back and said,


00:15:14.560 --> 00:15:18.420
"We did this, but EPUB is preferred now."


00:15:18.420 --> 00:15:19.900
>> Oh, interesting.


00:15:19.900 --> 00:15:25.440
>> They're moving away from the Mobi format and back into EPUB.


00:15:25.440 --> 00:15:26.520
That's really cool.


00:15:26.520 --> 00:15:29.640
>> Cool. Yeah, I use the Send to Kendall app.


00:15:29.640 --> 00:15:32.160
It's some weird old archaic app format.


00:15:32.160 --> 00:15:33.660
[LAUGHTER]


00:15:33.660 --> 00:15:34.440
>> Really?


00:15:34.440 --> 00:15:40.020
>> Yeah. It's some weird install an app off the web.


00:15:40.020 --> 00:15:41.320
That's not a progressive web app.


00:15:41.320 --> 00:15:42.740
I can't remember what it is. It's something.


00:15:42.740 --> 00:15:43.260
>> Okay.


00:15:43.260 --> 00:15:47.380
>> I think from Adobe, it's some bizarre format, but yeah, that's what I use.


00:15:47.380 --> 00:15:50.700
>> You get this e-mail address that you can


00:15:50.700 --> 00:15:53.060
send stuff to and it just goes right to your Kindle.


00:15:53.060 --> 00:15:53.780
>> Yeah, nice.


00:15:53.780 --> 00:15:55.340
>> So that's what I use usually.


00:15:55.340 --> 00:15:59.620
>> Anyway, I would probably use that if I didn't have so many Kindles over the years,


00:15:59.620 --> 00:16:03.380
and I don't know which is the real e-mail for it.


00:16:03.380 --> 00:16:06.260
Because I have like five Kindles over and I lost some of them.


00:16:06.260 --> 00:16:08.740
>> You can unregister them, man.


00:16:08.740 --> 00:16:11.460
>> Oh, come on. Yes, I should do that.


00:16:11.460 --> 00:16:14.100
So for the website stuff, it's kind of fun too.


00:16:14.100 --> 00:16:16.460
So this will generate websites for you.


00:16:16.460 --> 00:16:21.460
And then it has publishing input, publishing in it too.


00:16:21.460 --> 00:16:26.000
So you can hook this up to a GitHub action


00:16:26.000 --> 00:16:27.680
and just say Quattro publish


00:16:27.680 --> 00:16:29.980
and be using this to publish stuff too.


00:16:29.980 --> 00:16:32.540
So this is really kind of cool,


00:16:32.540 --> 00:16:36.740
the whole infrastructure around documentation


00:16:36.740 --> 00:16:39.260
and publishing around scientific computing.


00:16:39.260 --> 00:16:40.980
So I'm pretty excited about this.


00:16:40.980 --> 00:16:42.620
- Yeah, I love it, it's great.


00:16:42.620 --> 00:16:45.040
Now, before we move on, Brian.


00:16:45.040 --> 00:16:47.280
- Yes, another thing I'm excited about


00:16:47.280 --> 00:16:51.800
is Microsoft for Startups.


00:16:51.800 --> 00:16:55.040
It's the Microsoft for Startups Founders Hub.


00:16:55.040 --> 00:16:57.360
So this episode of Python Bytes is brought to you


00:16:57.360 --> 00:16:59.000
by Microsoft for Startups.


00:16:59.000 --> 00:17:00.360
Starting a business is hard,


00:17:00.360 --> 00:17:03.420
but by some estimates, over 90% of startups


00:17:03.420 --> 00:17:05.860
will go out of business in the first year, ouch.


00:17:05.860 --> 00:17:07.880
With this in mind, Microsoft for Startups


00:17:07.880 --> 00:17:10.400
set out to understand what startups need


00:17:10.400 --> 00:17:12.780
to be successful and create a digital platform


00:17:12.780 --> 00:17:14.600
to help overcome those challenges.


00:17:14.600 --> 00:17:17.760
Microsoft for Startups Founders Hub.


00:17:17.760 --> 00:17:20.040
It provides all founders at any stage


00:17:20.040 --> 00:17:23.680
with free resources to help solve startup challenges.


00:17:23.680 --> 00:17:26.040
The platform provides technology benefits,


00:17:26.040 --> 00:17:29.080
access to expert guidance and skilled resources,


00:17:29.080 --> 00:17:31.840
mentorship and networking connections and so much more.


00:17:31.840 --> 00:17:33.240
Unlike others in the industry,


00:17:33.240 --> 00:17:35.600
Microsoft for Startups Founders Hub


00:17:35.600 --> 00:17:38.640
doesn't require startups to be investor backed


00:17:38.640 --> 00:17:41.100
or third-party validated to participate.


00:17:41.100 --> 00:17:43.160
Founders Hub is truly open to all.


00:17:43.160 --> 00:17:44.000
So what do you get?


00:17:44.000 --> 00:17:46.000
Speed up development with free access


00:17:46.000 --> 00:17:47.840
to GitHub and Microsoft Cloud


00:17:47.840 --> 00:17:50.260
with the ability to unlock credits over time.


00:17:50.260 --> 00:17:51.680
To help your startup innovate,


00:17:51.680 --> 00:17:54.840
Founders Hub is partnering with innovative companies


00:17:54.840 --> 00:17:58.160
like OpenAI, a global leader in AI research and development


00:17:58.160 --> 00:18:00.660
to provide exclusive benefits and discounts.


00:18:00.660 --> 00:18:02.560
Through Microsoft for Startups Founders Hub,


00:18:02.560 --> 00:18:05.960
becoming a founder is no longer about who you know.


00:18:05.960 --> 00:18:08.720
you'll have access to mentors, their mentorship network,


00:18:08.720 --> 00:18:11.520
giving you access to a pool of hundreds of mentors


00:18:11.520 --> 00:18:13.200
across a range of disciplines,


00:18:13.200 --> 00:18:15.780
across areas like validation, fundraising,


00:18:15.780 --> 00:18:18.260
management and coaching, sales and marketing,


00:18:18.260 --> 00:18:20.840
as well as specific technical stress points.


00:18:20.840 --> 00:18:24.200
You'll be able to book a one-on-one meeting with mentors,


00:18:24.200 --> 00:18:26.760
many of whom are former founders themselves.


00:18:26.760 --> 00:18:28.840
Make your idea a reality today


00:18:28.840 --> 00:18:30.840
with the critical support you'll get


00:18:30.840 --> 00:18:33.060
from Microsoft for Startups Founders Hub.


00:18:33.060 --> 00:18:38.060
To join the program, visit pythonbytes.fm/foundershub2022.


00:18:38.060 --> 00:18:40.140
The link is in your show notes.


00:18:40.140 --> 00:18:42.600
- Awesome, yeah, thanks Microsoft for supporting the show.


00:18:42.600 --> 00:18:45.000
They're big backers of Python Bytes


00:18:45.000 --> 00:18:47.920
and definitely help amplify what we're doing here.


00:18:47.920 --> 00:18:50.240
I think the most awesome thing is the mentors


00:18:50.240 --> 00:18:52.240
and the advice and the support you get.


00:18:52.240 --> 00:18:54.560
- Yeah, well, one of the things I think is awesome


00:18:54.560 --> 00:18:56.840
is when I read about this,


00:18:56.840 --> 00:19:01.840
I think about like the startup access that people get


00:19:02.940 --> 00:19:05.260
if they're in like Silicon Valley or--


00:19:05.260 --> 00:19:06.740
- Like Y Combinator or something like that.


00:19:06.740 --> 00:19:07.900
- Yeah, something like that.


00:19:07.900 --> 00:19:09.100
But this is, but that's,


00:19:09.100 --> 00:19:11.100
you only get a handful of those a year


00:19:11.100 --> 00:19:13.340
and this is open to way more people.


00:19:13.340 --> 00:19:14.180
So that's cool.


00:19:14.180 --> 00:19:15.140
- Awesome, yeah.


00:19:15.140 --> 00:19:15.980
Very cool.


00:19:15.980 --> 00:19:17.900
All right, can I take you on a diversion


00:19:17.900 --> 00:19:19.340
to show you something pretty cool?


00:19:19.340 --> 00:19:20.180
- Yeah.


00:19:20.180 --> 00:19:23.500
- All right, so Dart is a programming language


00:19:23.500 --> 00:19:27.220
that we don't usually talk about on Python Bytes, right?


00:19:27.220 --> 00:19:30.980
And Dart is a language that came out from Google


00:19:30.980 --> 00:19:34.940
And I felt like it was trying to compete with JavaScript


00:19:34.940 --> 00:19:38.780
to a large degree and didn't really gain a lot of traction


00:19:38.780 --> 00:19:41.080
until Flutter came along.


00:19:41.080 --> 00:19:45.680
And Flutter is a really cool way to design mobile


00:19:45.680 --> 00:19:49.860
and desktop native applications using Dart.


00:19:49.860 --> 00:19:54.780
Think of it as an alternative to Cordova, PhoneGap,


00:19:54.780 --> 00:19:59.460
Xamarin, Ionic, all these different sort of generic ways


00:19:59.460 --> 00:20:02.180
to build apps that run on different platforms.


00:20:02.180 --> 00:20:04.820
So with Flutter, I can build an app that runs


00:20:04.820 --> 00:20:07.860
on iOS and Android, but I can also compile it


00:20:07.860 --> 00:20:10.780
as a target to Mac OS, Linux, and Windows.


00:20:10.780 --> 00:20:13.500
And I can even compile it to a target for the web


00:20:13.500 --> 00:20:15.700
where it'll run as a progressive web app, okay?


00:20:15.700 --> 00:20:16.860
And you get some really cool apps.


00:20:16.860 --> 00:20:21.420
Like by far the most well known one is the BMW car.


00:20:21.420 --> 00:20:24.500
You have a BMW, this is like the app that is your car.


00:20:24.500 --> 00:20:26.020
But there's other ones as well.


00:20:26.020 --> 00:20:28.820
It's used a lot within Google, obviously, right?


00:20:28.820 --> 00:20:29.660
- Now you may be wondering-- - I would be ticked


00:20:29.660 --> 00:20:31.540
if I bought a car and all I got was an app.


00:20:31.540 --> 00:20:33.340
- I know, I would be too.


00:20:33.340 --> 00:20:35.860
By the way, sidebar, BMW's doing all sorts of weird stuff,


00:20:35.860 --> 00:20:38.580
like charging you subscriptions to use your seat heaters.


00:20:38.580 --> 00:20:41.660
$18 a month subscription to turn on the seat heater


00:20:41.660 --> 00:20:42.900
that's already in your car.


00:20:42.900 --> 00:20:46.380
So the least thing I'd be upset about is the app.


00:20:46.380 --> 00:20:49.060
- Okay. - But that's something else.


00:20:49.060 --> 00:20:52.300
Now why in the world am I talking about Flutter and Dart?


00:20:52.300 --> 00:20:54.820
I'm actually looking into using Flutter and Dart


00:20:54.820 --> 00:20:57.820
to rebuild the Talk Python Training apps


00:20:57.820 --> 00:21:01.900
so that we can have Mac OS, Windows, and Linux


00:21:01.900 --> 00:21:04.900
in addition to the iOS and Android version


00:21:04.900 --> 00:21:05.980
and give it like a refresh.


00:21:05.980 --> 00:21:07.420
And it's a really cool technology


00:21:07.420 --> 00:21:09.580
that I'm pretty excited about.


00:21:09.580 --> 00:21:13.140
So let me introduce you to something called Flet.


00:21:13.140 --> 00:21:14.380
Have you heard of Flet?


00:21:14.380 --> 00:21:16.740
- Well, just because Brandon just mentioned it.


00:21:16.740 --> 00:21:18.980
(laughing)


00:21:18.980 --> 00:21:20.900
Tell me about Flet.


00:21:20.900 --> 00:21:22.860
- Yes, yes, yes.


00:21:22.860 --> 00:21:24.680
Very timely, Brandon.


00:21:24.680 --> 00:21:29.680
So Flut was sent over to us from Mikhail Honkala.


00:21:29.680 --> 00:21:33.260
And Flut is the fastest way to build Flutter apps,


00:21:33.260 --> 00:21:35.780
but instead of using the Dart programming language,


00:21:35.780 --> 00:21:36.820
use Python.


00:21:36.820 --> 00:21:37.660
- Oh, perfect.


00:21:37.660 --> 00:21:39.940
- So let me see if I can, I'll go to the get started,


00:21:39.940 --> 00:21:42.420
I'll pull up a little example here.


00:21:42.420 --> 00:21:45.300
So there's an app here, check it out, it's a calculator.


00:21:45.300 --> 00:21:48.820
And look at it, it's got a nice little animated GIF


00:21:48.820 --> 00:21:49.660
showing how it works.


00:21:49.660 --> 00:21:52.300
And this looks like a proper calculator app


00:21:52.300 --> 00:21:54.140
you would see on a mobile phone or something, right?


00:21:54.140 --> 00:21:55.840
Yeah, it looks like my calculator.


00:21:55.840 --> 00:21:56.700
Yeah, exactly.


00:21:56.700 --> 00:22:01.380
And you could even go see a interactive version that is running in your browser


00:22:01.380 --> 00:22:05.900
because one of the six or seven compile targets is your browser.


00:22:05.900 --> 00:22:09.440
And I don't know if you noticed, but how quick did that load way faster than


00:22:09.440 --> 00:22:11.120
PyScript or any of these other things?


00:22:11.120 --> 00:22:12.460
It was like nearly instant.


00:22:12.460 --> 00:22:17.080
So if you go through and you look at how you build it, you just create a main


00:22:17.080 --> 00:22:22.460
method in Python and it's provided a page and you say flat dot app and you


00:22:22.460 --> 00:22:24.660
just give it the function to call and here you say,


00:22:24.660 --> 00:22:26.660
I'm just going to add some text called Hello World.


00:22:26.660 --> 00:22:28.740
You get your Hello World here, but you don't want that,


00:22:28.740 --> 00:22:30.260
you want some controls.


00:22:30.260 --> 00:22:33.540
I'm going to add a bunch of elevated buttons


00:22:33.540 --> 00:22:35.940
with the buttons that are on the calculator,


00:22:35.940 --> 00:22:38.920
like 1, 2, 3, star, plus, minus, and so on.


00:22:38.920 --> 00:22:40.940
You end up with this column of that.


00:22:40.940 --> 00:22:44.780
That's interesting, but you want these in rows and columns.


00:22:44.780 --> 00:22:46.980
You would say, I'm creating a row,


00:22:46.980 --> 00:22:49.300
which has some controls for elevated buttons.


00:22:49.300 --> 00:22:53.260
another row, right? So these are the rows of the calculators. And look at that


00:22:53.260 --> 00:22:57.580
already how cool it is to define that UI with just just that in Python.


00:22:57.580 --> 00:23:02.020
Yeah, right. It's pretty neat. And because it's Flutter, all of these things


00:23:02.020 --> 00:23:08.220
have native representations on their platforms, right? In Mac OS, it looks


00:23:08.220 --> 00:23:12.300
like a Mac OS button and Windows looks like a Windows button and so on. You


00:23:12.300 --> 00:23:15.700
got to put styles to make it look like, you know, the calculator app type of


00:23:15.700 --> 00:23:20.920
thing. So yeah, that's pretty much it. You just go and you put all these controls together


00:23:20.920 --> 00:23:25.580
like this and you say go and then somewhere in here there's a place where it talks about


00:23:25.580 --> 00:23:32.260
handling the input. But yeah, so here you just say I have created a class and then on


00:23:32.260 --> 00:23:37.820
click it self dot button clicked or whatever it is, whatever you're interested in. And


00:23:37.820 --> 00:23:42.420
what it's going to pass over is the actual button, the elevated button that was clicked,


00:23:42.420 --> 00:23:45.160
the event source or whatever you call it.


00:23:45.160 --> 00:23:45.840
>> Right.


00:23:45.840 --> 00:23:48.520
>> So you just say, "I'm hooking into


00:23:48.520 --> 00:23:51.480
these different button click events like you would with


00:23:51.480 --> 00:23:55.040
any UI reactive framework and now you have a calculator,


00:23:55.040 --> 00:23:58.900
or you've got what other app you want to build." Isn't that cool?


00:23:58.900 --> 00:24:02.640
>> It's very neat. So you can build both.


00:24:02.640 --> 00:24:06.880
I think some people would use this for iOS or Android,


00:24:06.880 --> 00:24:09.880
a mobile device, but you said there's other things too,


00:24:09.880 --> 00:24:10.960
like you can test it out.


00:24:10.960 --> 00:24:14.800
Would you realistically use this to develop a web app?


00:24:14.800 --> 00:24:16.460
>> I think developing a web app


00:24:16.460 --> 00:24:18.320
seems like it would be totally reasonable.


00:24:18.320 --> 00:24:20.320
If one of the things if you look here,


00:24:20.320 --> 00:24:21.600
if you go to the roadmap,


00:24:21.600 --> 00:24:25.720
the mobile story is not yet complete actually.


00:24:25.720 --> 00:24:26.240
>> Okay.


00:24:26.240 --> 00:24:30.800
>> So right now I would think of it as more of a desktop type of thing.


00:24:30.800 --> 00:24:32.280
But as you saw with that example,


00:24:32.280 --> 00:24:36.680
there's also a desktop and progressive web app story.


00:24:36.680 --> 00:24:39.020
The mobile story is not yet finished,


00:24:39.020 --> 00:24:44.540
but that's what's on the roadmap and I would love to see it come along and make good progress.


00:24:44.540 --> 00:24:47.100
There's also the possibility of other languages.


00:24:47.100 --> 00:24:49.500
That's not super interesting to me,


00:24:49.500 --> 00:24:52.600
but because I want to write Python.


00:24:52.600 --> 00:24:58.420
Anyway, but you have like Go and C# and stuff as possible other programming languages.


00:24:58.420 --> 00:24:58.740
>> Yeah.


00:24:58.740 --> 00:25:02.140
>> But things like having a built-in database with a simple ORM,


00:25:02.140 --> 00:25:05.420
it's way more powerful than it sounds.


00:25:05.420 --> 00:25:07.120
Because if you're in the web,


00:25:07.120 --> 00:25:09.280
well, how do you do database stuff?


00:25:09.280 --> 00:25:13.740
The web has local storage and it has like a SQL,


00:25:13.740 --> 00:25:18.060
a wimpy SQL thing that's embedded in offline storage for your app.


00:25:18.060 --> 00:25:19.820
If you're on iOS,


00:25:19.820 --> 00:25:21.700
you've got SQLite built in and stuff,


00:25:21.700 --> 00:25:24.220
but figuring out all those variations is a pain.


00:25:24.220 --> 00:25:25.180
But if you can just say,


00:25:25.180 --> 00:25:28.000
create a database and do queries against it with an ORM,


00:25:28.000 --> 00:25:32.740
all of a sudden, that gives you a super cool offline data access story.


00:25:32.740 --> 00:25:33.820
>> Yeah.


00:25:33.820 --> 00:25:36.660
and so on, so anyway, yeah,


00:25:36.660 --> 00:25:38.140
and I think there's a lot of neat things


00:25:38.140 --> 00:25:39.500
that are coming here.


00:25:39.500 --> 00:25:42.540
This is created by, let me see if I got the name,


00:25:42.540 --> 00:25:45.100
by Fedora, Fitzner.


00:25:45.100 --> 00:25:48.500
I'm actually having Fedora on Hock Python next week


00:25:48.500 --> 00:25:50.220
to talk about this, so we're gonna be diving


00:25:50.220 --> 00:25:51.180
even more into it.


00:25:51.180 --> 00:25:53.340
- Okay, cool, nice.


00:25:53.340 --> 00:25:55.400
- I don't know how ready this is


00:25:55.400 --> 00:25:58.740
for producing actual finished applications.


00:25:58.740 --> 00:26:00.900
Flutter is absolutely ready to go, right?


00:26:00.900 --> 00:26:02.220
It's been around for many years


00:26:02.220 --> 00:26:04.820
and there's lots of things being put out in production for it.


00:26:04.820 --> 00:26:06.100
Flutter on top of Flutter?


00:26:06.100 --> 00:26:07.260
Don't totally know.


00:26:07.260 --> 00:26:10.020
I'll ask for it later, next week,


00:26:10.020 --> 00:26:11.380
and we'll know a little bit more.


00:26:11.380 --> 00:26:14.220
But when I look at this, this is really exciting,


00:26:14.220 --> 00:26:16.740
because it looks like it builds applications


00:26:16.740 --> 00:26:19.620
that I would really want to use, using modern paradigms


00:26:19.620 --> 00:26:21.260
and all sorts of cool stuff.


00:26:21.260 --> 00:26:23.660
And you should be able to integrate with all the Flutter


00:26:23.660 --> 00:26:24.700
things, which is great.


00:26:24.700 --> 00:26:25.260
MARK MIRCHANDANI: Neat.


00:26:25.260 --> 00:26:25.620
MARK MANDEL: Yeah.


00:26:25.620 --> 00:26:27.100
Anyway, very cool.


00:26:27.100 --> 00:26:29.460
Thank you, Mikhail, for sending that over.


00:26:29.460 --> 00:26:32.160
So that's a UI thing.


00:26:32.160 --> 00:26:35.760
I'd like to switch gears to the command line.


00:26:35.760 --> 00:26:36.600
So I--


00:26:36.600 --> 00:26:37.580
- To the TUI.


00:26:37.580 --> 00:26:39.660
- To the, to the CLE?


00:26:39.660 --> 00:26:41.820
- The TUI, the text user interface.


00:26:41.820 --> 00:26:43.180
- Oh yeah, text user interface.


00:26:43.180 --> 00:26:46.540
Yeah, that's, anyway, so like with rich and textual


00:26:46.540 --> 00:26:47.380
and things like that.


00:26:47.380 --> 00:26:50.380
So I was really excited about this article actually,


00:26:50.380 --> 00:26:51.540
and now I'm a little confused.


00:26:51.540 --> 00:26:53.640
So I'm glad I'm gonna talk it through


00:26:53.640 --> 00:26:56.460
and you can let, I'd like to hear what you think.


00:26:56.460 --> 00:27:00.200
So I ran across this article,


00:27:00.200 --> 00:27:03.960
it's called "Building an Authenticated Python CLI"


00:27:03.960 --> 00:27:07.560
and it's from Notia, Notia?


00:27:07.560 --> 00:27:09.760
Notia.ai, N-O-T-I-A.


00:27:09.760 --> 00:27:12.960
Anyway, it's a blog post about building this.


00:27:12.960 --> 00:27:13.960
So here's the idea.


00:27:13.960 --> 00:27:15.180
So if you've got a,


00:27:15.180 --> 00:27:19.840
for this application you need Twitter authentication.


00:27:19.840 --> 00:27:24.480
So if they're developing a command line application


00:27:24.480 --> 00:27:27.620
that has to use the Twitter API.


00:27:27.620 --> 00:27:29.180
To get that, we've got some secrets.


00:27:29.180 --> 00:27:33.120
You've got a client ID and a secret that you've set up


00:27:33.120 --> 00:27:36.660
and you need to store the Twitter token somewhere.


00:27:36.660 --> 00:27:39.020
- You've gotta do that OAuth exchange where you say,


00:27:39.020 --> 00:27:40.160
"We're gonna connect to Twitter."


00:27:40.160 --> 00:27:43.260
And Twitter says, "This app is gonna interact


00:27:43.260 --> 00:27:45.360
"with your account this way," and whatnot, right?


00:27:45.360 --> 00:27:47.820
- Right, so I wanna be able to just,


00:27:47.820 --> 00:27:50.500
but I'd like to be able to have the application


00:27:50.500 --> 00:27:53.220
keep that around and not have to do that,


00:27:53.220 --> 00:27:55.420
not really build it into the app,


00:27:55.420 --> 00:27:57.880
like I don't want to compile it into the app


00:27:57.880 --> 00:27:59.940
or copy that token there.


00:27:59.940 --> 00:28:01.340
I want to be able to put that somewhere else.


00:28:01.340 --> 00:28:04.960
So the idea around this article is to take that,


00:28:04.960 --> 00:28:06.900
use the Twitter API.


00:28:06.900 --> 00:28:09.620
They talk about using click and rich a little bit,


00:28:09.620 --> 00:28:14.260
but for the command line stuff and click is cool.


00:28:14.260 --> 00:28:16.740
We, and we both love rich.


00:28:16.740 --> 00:28:19.160
And anyway, so the idea is to use,


00:28:19.160 --> 00:28:22.460
once you have, so use the OAuth


00:28:22.460 --> 00:28:24.300
and you come back and you've got a bear,


00:28:24.300 --> 00:28:25.700
what they call it?


00:28:25.700 --> 00:28:27.100
>> A bearer token.


00:28:27.100 --> 00:28:28.440
>> A bearer token.


00:28:28.440 --> 00:28:32.500
Then saving that in a file called a net RC file.


00:28:32.500 --> 00:28:36.820
Instead of telling somebody to just go put it there,


00:28:36.820 --> 00:28:40.100
they're reading, asking the user for


00:28:40.100 --> 00:28:44.740
the client ID and the secret from the Twitter API website stuff.


00:28:44.740 --> 00:28:46.260
Copy it and paste it here.


00:28:46.260 --> 00:28:50.180
Then they're storing the bearer token in


00:28:50.180 --> 00:28:54.660
that in the netRC file.


00:28:54.660 --> 00:28:57.940
Then the next time the application runs,


00:28:57.940 --> 00:29:00.620
it just reads that and you don't have to do it every time.


00:29:00.620 --> 00:29:04.580
Then that stuff isn't stored with the client code,


00:29:04.580 --> 00:29:08.860
but it's stored within the user netRC file or something.


00:29:08.860 --> 00:29:13.500
At first, I thought this was something that you could use for,


00:29:13.500 --> 00:29:19.060
I don't know whether or not this is a good idea for that even,


00:29:19.060 --> 00:29:21.180
whether you want to store your barrier stuff.


00:29:21.180 --> 00:29:24.720
But you probably don't want to store,


00:29:24.720 --> 00:29:26.760
you don't want to ask the user for


00:29:26.760 --> 00:29:29.320
username and password and store that there,


00:29:29.320 --> 00:29:31.800
because it's just a text file, I think.


00:29:31.800 --> 00:29:34.140
But maybe there's some other way around.


00:29:34.140 --> 00:29:35.320
I was hoping that-


00:29:35.320 --> 00:29:37.800
>> I'd rather lose an OAuth token than I


00:29:37.800 --> 00:29:39.680
would my actual username and password,


00:29:39.680 --> 00:29:41.420
because at least you can revoke the tokens


00:29:41.420 --> 00:29:43.280
or expire them and stuff.


00:29:43.280 --> 00:29:45.880
>> Okay. For token stuff, for saving tokens,


00:29:45.880 --> 00:29:48.760
is this a reasonable thing to do to keep that in


00:29:48.760 --> 00:29:50.380
the user's directory or something?


00:29:50.380 --> 00:29:52.880
>> Seems like it's all right.


00:29:52.880 --> 00:29:57.120
I'm a little suspicious of storing straight plaintext,


00:29:57.120 --> 00:29:59.520
even if it is just an OAuth token.


00:29:59.520 --> 00:30:01.200
>> Yeah. Okay.


00:30:01.200 --> 00:30:04.040
>> I don't know because I haven't read the article all the way through,


00:30:04.040 --> 00:30:07.320
but I might encrypt the token and then store it.


00:30:07.320 --> 00:30:08.200
>> Yeah.


00:30:08.200 --> 00:30:13.440
>> Yeah. Actually, so I wanted to start this conversation and then ask people


00:30:13.440 --> 00:30:15.680
because either for Tok--


00:30:15.680 --> 00:30:20.080
I know there's other password ways to store them locally safely,


00:30:20.080 --> 00:30:23.040
but is it something that you do that with--


00:30:23.040 --> 00:30:28.400
Anyway, I'd love to hear people's thoughts on this,


00:30:28.400 --> 00:30:33.960
on what's the best way to store people's secret information


00:30:33.960 --> 00:30:36.160
so they don't have to enter it every time.


00:30:36.160 --> 00:30:37.360
>> Yeah.


00:30:37.360 --> 00:30:40.680
>> Storing in their user directory might not be terrible,


00:30:40.680 --> 00:30:42.440
but maybe there's a better way.


00:30:42.440 --> 00:30:46.320
It's probably operating system specific too, but I don't know.


00:30:46.320 --> 00:30:52.840
>> Right. Well, your user profile is protected in general from other users.


00:30:52.840 --> 00:30:53.280
>> Right.


00:30:53.280 --> 00:30:55.920
>> But is it protected if you run an app that


00:30:55.920 --> 00:30:59.120
decides it's just going to go cruising through your user profile?


00:30:59.120 --> 00:31:02.760
Something that you ran and you should have trusted it, but you did.


00:31:02.760 --> 00:31:05.160
I mean, SSH keys,


00:31:05.160 --> 00:31:07.720
private keys are there in the .ssh folder.


00:31:07.720 --> 00:31:09.320
>> Yeah, that's true.


00:31:09.320 --> 00:31:12.280
>> That's probably worse than losing an OAuth token as well.


00:31:12.280 --> 00:31:19.160
So if you can guess, I'm thinking of, I'm in the design process for a command line application that has to store user credentials.


00:31:19.160 --> 00:31:22.460
So that's where I was running across stuff like this.


00:31:22.460 --> 00:31:25.460
I mean, isn't that one of the benefits of doing this podcast?


00:31:25.460 --> 00:31:31.020
It's a byproduct of our natural just working on new projects.


00:31:31.020 --> 00:31:33.020
Like Flutter for me on the previous one, right?


00:31:33.020 --> 00:31:33.760
Yeah.


00:31:33.760 --> 00:31:35.760
Yeah, this is interesting and I see where it goes.


00:31:35.760 --> 00:31:36.260
Yeah.


00:31:36.260 --> 00:31:38.860
But yeah, I would probably at least encrypt the token.


00:31:38.860 --> 00:31:39.760
I don't know.


00:31:39.760 --> 00:31:40.760
Okay, thanks.


00:31:40.760 --> 00:31:41.260
Maybe it doesn't matter.


00:31:41.260 --> 00:31:41.760
Yeah.


00:31:41.760 --> 00:31:44.340
- Well, they're done with our normal items.


00:31:44.340 --> 00:31:47.800
So the extra stuff that I had,


00:31:47.800 --> 00:31:52.120
I was gonna let you go first, but I'm super excited.


00:31:52.120 --> 00:31:54.720
I'm getting a whole bunch done on the pytest course.


00:31:54.720 --> 00:31:55.960
- Really quick before you go on,


00:31:55.960 --> 00:31:58.120
just Sam Morley out there says,


00:31:58.120 --> 00:31:59.880
"That's why you should encrypt your secret keys."


00:31:59.880 --> 00:32:02.440
And system toolchain is probably the correct,


00:32:02.440 --> 00:32:03.400
in quotes, answer.


00:32:03.400 --> 00:32:05.080
- Okay, system toolchain.


00:32:05.080 --> 00:32:06.560
Okay, I don't even know what that means,


00:32:06.560 --> 00:32:07.400
but I'll look it up.


00:32:07.400 --> 00:32:08.920
- Yes, this is something that go,


00:32:08.920 --> 00:32:11.320
- Kagi or DuckDuckGo or maybe Google.


00:32:11.320 --> 00:32:12.160
- Okay.


00:32:12.160 --> 00:32:14.720
- I'm excited to hear about this pytest course


00:32:14.720 --> 00:32:15.760
'cause people have been asking


00:32:15.760 --> 00:32:18.160
and progress is being significantly made, right?


00:32:18.160 --> 00:32:19.000
Awesome.


00:32:19.000 --> 00:32:20.480
- Yeah, it's going great.


00:32:20.480 --> 00:32:24.080
So I've got, it's really seven chapters,


00:32:24.080 --> 00:32:27.340
broken up into seven sections or chapters,


00:32:27.340 --> 00:32:29.080
but it's a video course.


00:32:29.080 --> 00:32:31.360
But I'm really excited about it


00:32:31.360 --> 00:32:35.840
'cause the pytest book has received a lot of people of it,


00:32:35.840 --> 00:32:37.040
which is great, I love that.


00:32:37.040 --> 00:32:38.880
I got a lot of great feedback.


00:32:38.880 --> 00:32:41.680
But it's detailed, right?


00:32:41.680 --> 00:32:44.040
So we jump into a whole bunch of the details.


00:32:44.040 --> 00:32:46.800
And with a book, you can kind of get to some section


00:32:46.800 --> 00:32:48.280
that you're like, yeah, I don't need that right now.


00:32:48.280 --> 00:32:49.540
And you can skip over it.


00:32:49.540 --> 00:32:51.500
And yes, you can do that with a course,


00:32:51.500 --> 00:32:52.340
but it's a little harder.


00:32:52.340 --> 00:32:56.840
So the goal for this is really for people new to pytest


00:32:56.840 --> 00:33:00.680
or that are just using a little piece of it


00:33:00.680 --> 00:33:02.720
and unfamiliar with some of the powers


00:33:02.720 --> 00:33:06.080
is to introduce people to like the full power of pytest,


00:33:06.080 --> 00:33:08.260
but quickly and not overwhelm them.


00:33:08.260 --> 00:33:10.620
So I think I've done a good job, but we'll see.


00:33:10.620 --> 00:33:13.180
We'll get it edited and get it available to people


00:33:13.180 --> 00:33:14.420
as soon as we can.


00:33:14.420 --> 00:33:15.620
- Yeah, I'm excited.


00:33:15.620 --> 00:33:16.460
- Yeah.


00:33:16.460 --> 00:33:17.280
- Yeah, I'm excited to check it out.


00:33:17.280 --> 00:33:18.120
It's gonna be awesome.


00:33:18.120 --> 00:33:19.420
- All right, how about you?


00:33:19.420 --> 00:33:20.900
Do you have anything extra?


00:33:20.900 --> 00:33:21.740
- Good lead in.


00:33:21.740 --> 00:33:25.140
So brand new course over at Talk Python Training.


00:33:25.140 --> 00:33:27.560
Django getting started, which is awesome.


00:33:27.560 --> 00:33:29.760
This is put together by Chris Trudeau.


00:33:29.760 --> 00:33:33.180
And this is a six hour course on Django.


00:33:33.180 --> 00:33:35.360
And right now people, hurry, hurry,


00:33:35.360 --> 00:33:38.080
there's an early bird discount to save 10%


00:33:38.080 --> 00:33:39.240
that you can get as well.


00:33:39.240 --> 00:33:41.140
So that just came out Wednesday.


00:33:41.140 --> 00:33:42.360
Wednesday is yesterday.


00:33:42.360 --> 00:33:44.240
So it came out yesterday, I think.


00:33:44.240 --> 00:33:45.900
That or the day before, very recently.


00:33:45.900 --> 00:33:48.120
Anyway, if you've been wanting to do,


00:33:48.120 --> 00:33:49.280
getting started in Django,


00:33:49.280 --> 00:33:50.640
if you wanna get into Django,


00:33:50.640 --> 00:33:52.840
this gives our Django course is really good.


00:33:52.840 --> 00:33:53.680
If you've been dabbling,


00:33:53.680 --> 00:33:54.760
and you're like, ah, I really need to see


00:33:54.760 --> 00:33:56.200
how the pieces fit together better,


00:33:56.200 --> 00:33:57.200
also check it out.


00:33:57.200 --> 00:33:58.720
It's definitely good stuff.


00:33:58.720 --> 00:34:01.360
Django is one of the top two web frameworks


00:34:01.360 --> 00:34:02.760
these days still in Python.


00:34:02.760 --> 00:34:03.600
- Yeah.


00:34:03.600 --> 00:34:07.200
Do you know how many courses you've got on the platform now?


00:34:07.200 --> 00:34:11.440
43 courses and about, that platform tells me,


00:34:11.440 --> 00:34:14.080
and 233 hours of content.


00:34:14.080 --> 00:34:15.800
So there's more than that in there,


00:34:15.800 --> 00:34:17.520
but a couple are not published yet.


00:34:17.520 --> 00:34:19.000
There's some exciting ones coming.


00:34:19.000 --> 00:34:20.400
- Cool, nice, sweet.


00:34:20.400 --> 00:34:21.220
- Yeah, yeah, yeah.


00:34:21.220 --> 00:34:23.020
All right, well those are all the extras I have for now.


00:34:23.020 --> 00:34:24.600
I do have a joke for you though.


00:34:24.600 --> 00:34:25.440
- Oh, good.


00:34:25.440 --> 00:34:27.400
- Are you a fan of "The Lion King"?


00:34:27.400 --> 00:34:29.080
You ever watch that show, "The Lion King"?


00:34:29.080 --> 00:34:32.020
The cartoon, Disney, it was a Disney, I don't know.


00:34:32.020 --> 00:34:34.800
- I saw it, I don't know if I'd call me a fan, but sure.


00:34:34.800 --> 00:34:37.160
- No, oh, did you enjoy watching it, I guess, at all?


00:34:37.160 --> 00:34:38.160
>> Yeah.


00:34:38.160 --> 00:34:42.640
>> Yeah. I watched it with my kids and we enjoyed it as well.


00:34:42.640 --> 00:34:46.320
I don't even remember the name of the father.


00:34:46.320 --> 00:34:47.800
Remember the name of the father?


00:34:47.800 --> 00:34:49.280
The actual Lion King?


00:34:49.280 --> 00:34:50.160
>> No.


00:34:50.160 --> 00:34:52.920
>> Whatever. Yeah, exactly. I don't either.


00:34:52.920 --> 00:34:56.400
But the little kid that was supposed to be the kid lion,


00:34:56.400 --> 00:34:59.040
who was supposed to be being groomed to be the king,


00:34:59.040 --> 00:35:02.480
is talking to his father and they're looking over the vast kingdom.


00:35:02.480 --> 00:35:04.120
This is Luxembourg.


00:35:04.120 --> 00:35:09.120
Every language that light touches has a garbage collector and symbol.


00:35:09.120 --> 00:35:12.720
But what's that shadowy place over there?


00:35:12.720 --> 00:35:15.640
That's a C++, you must never go there.


00:35:15.640 --> 00:35:17.200
>> Yes.


00:35:17.200 --> 00:35:19.440
>> Sorry, C++, but that was fun.


00:35:19.440 --> 00:35:20.800
>> Mufasa.


00:35:20.800 --> 00:35:22.720
>> Mufasa, yes. Thank you.


00:35:22.720 --> 00:35:24.560
Yes, you got it. Mufasa says,


00:35:24.560 --> 00:35:26.880
that's a C++, you must never go there.


00:35:26.880 --> 00:35:28.920
>> No, but you should.


00:35:28.920 --> 00:35:30.680
>> Don't take it too seriously,


00:35:30.680 --> 00:35:32.880
the joke, but it was fun.


00:35:33.480 --> 00:35:35.660
>> As a garbage collector.


00:35:35.660 --> 00:35:36.760
>> Yeah, I know.


00:35:36.760 --> 00:35:39.340
>> What's that shadowy place over there?


00:35:39.340 --> 00:35:41.600
You must never go there.


00:35:41.600 --> 00:35:43.360
>> What about Rust?


00:35:43.360 --> 00:35:44.640
>> What about Rust?


00:35:44.640 --> 00:35:45.640
>> Nice.


00:35:45.640 --> 00:35:49.520
>> I don't even know enough about Rust to make this part of the joke.


00:35:49.520 --> 00:35:52.640
I'm busy learning Dart and Flutter.


00:35:52.640 --> 00:35:54.280
Maybe I don't have to learn Dart though,


00:35:54.280 --> 00:35:55.360
because I can do it in Python.


00:35:55.360 --> 00:35:56.840
I could just learn Flutter. We'll see.


00:35:56.840 --> 00:35:59.040
>> That would be like, that is Rust.


00:35:59.040 --> 00:36:01.560
You can go there, but come back quickly.


00:36:01.560 --> 00:36:04.260
>> Exactly. Just short visits.


00:36:04.260 --> 00:36:05.240
>> Short visits.


00:36:05.240 --> 00:36:06.080
>> Yeah.


00:36:06.080 --> 00:36:07.560
>> It's a fun show too.


00:36:07.560 --> 00:36:09.960
>> Well, thanks for having this great episode.


00:36:09.960 --> 00:36:11.320
>> Yeah. It's great to be back with you.


00:36:11.320 --> 00:36:14.240
>> Yeah. I guess we'll talk next week.


00:36:14.240 --> 00:36:15.840
>> Yeah. You bet. See you.

