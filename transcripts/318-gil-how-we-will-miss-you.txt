00:00:00 Hello, and welcome to python bytes where we delivered Python news and headlines directly to your earbuds. This is Episode 318, recorded January 10 2023. I'm Michael Kennedy. And I'm Bryan Aachen. And this episode is brought to you by Microsoft for startups founders hub, thanks to Microsoft for again, supporting the show. And I, Brian, just want to let people know real quick at the beginning here that they should join us here on YouTube, like right now live, if they want, they could go to Python bisetta home slash stream slash live or just go to the website and click Live stream at the top, we typically record on Tuesdays at 11am. Pacific Time, and you'll also see the older video versions, people want to find them there. So it's always nice to have people in the audience.

00:00:43 And we also put information in there for about future episodes. So if if for some reason it changes we keep that up to date.

00:00:51 Usually what I'll do is I'll just schedule whatever time we're going to record a week in advance and YouTube will notify you if you smash the bell. You know, that sort of thing.

00:00:59 Smash the bell. Yeah.

00:01:00 What do you got to kick us off with today?

00:01:02 Well, I want to start with something like right out off the presses. So we PEP 703 This was a suggested by wills shanks. And the author is Sam gross. And it really was the PEP was created just yesterday, January 9, or at least Yeah, so that's pretty cool.

00:01:22 So very recent new PEP smell.

00:01:24 Yeah, hasn't that new PEP smell. And what also one of the things that that PEP thing. PEP stop. python.org has a like a dark mode and light mode thing I didn't didn't know that I was playing with that today. Anyway. So the PEP 703 is making the GIL optional in C Python. I knew that there was talk about this. I heard Guido talking about it, possibly going in 312. But I didn't know if it really was and it does. I mean, it's still in draft stage. So it's not it's not promised yet. But it's it's targeting 312, which is the one that's being worked on right now. It's pretty exciting. So

00:02:05 yeah, a couple of things that jumped out from reading just the title optional. Not removal. Yeah. Okay. That's, that's interesting. I have, like you said, it's still, it's still brand new. So I haven't got a chance to research this a lot yet to understand the nuances of what that is. But yeah, you know, a lot of the prior talk, we had the collective me and other things like that. Eric snows sub interpreters. All of those were about how do we remove the GIL or effectively remove it? And this is like, well,

00:02:34 well, not really, it is not really optionally selectable while you're running, it's a the option is a compile time flag. So this is in we probably shouldn't link to the that, that really long interview with Guido. But there's a there's a interview with Guido van Rossum that, that in it, he talks about some of the Guild Challenges and it's an interesting bit conversation. Anyway. So there's a flag a dash dash without Gil flag that's going to be added for compiling C Python. So when I first heard this, I'm like, Well, I don't really want to compile C Python. Um, I mean, I could, but I'm not that kind of guy that likes to do that in their free time. So we have good news. I'll share with that with you later. But the the idea around this is in there's a lot of a lot of interest. Because there's a lot more scientific computing, and machine learning and all this sort of stuff that's running on Python. Now that wasn't before or just I don't know what it was doing before. But there's a lot of there's a lot of interest in this. And scientific computing especially has a lot of concurrency, they can speed things up dramatically if you can run if you've got like these huge vectors that you can all compute at the same time. So there's, there's ways around it, we have some really fast libraries that can do this. But these are like engineering feats that people have to do to make this all work. And they're usually in C API extensions, and you and whatnot. So what are some of the motivation is that the there's a there's a lot of obstacles for concurrency because the gills in place, so what do we do? So the Chi, I'm going to jump to the the distribution part, which I'm pretty excited about. distribution, the distribution is is going to be easier than I thought. So I thought people are going to have to build it themselves. It doesn't look like that's the case. It looks like Sam is going to work with Anaconda to distribute a without Gil version of Python, together with compatible packages. And I imagine so this will take time. One of the things that's is going to be important is to get this out is like quickly so that people can start building packages because in one of the reasons why I'm glad this is like almost a different distribution. I know this is gonna be a lot of work, but people can't really use it until the packages that do that, like allow them to use it, you know, can are there straight Python sir, the

00:05:05 C layer might if you're integrating with C or something, I might assume that there's a Gil and not Yeah, the safety it needs to do or some Yeah, right.

00:05:13 And even even if there's no changes that have to be made, they're gonna be, they're going to have to these packages are going to have to be recompiled. But there probably are changes they have to make, but they're trying to keep it to a minimum. But anyway, they'll at least have to get re compiled. And there'll be not binary compatible with both versions of Python. So we'll have this to Python world for a little bit. But it's really targeted. And I think going through in Canada is a good way to do it. It's targeted to people developing the Caapi extensions, so that they can start developing it. So that's pretty, pretty neat. And this, this, this collection of packages that already support the gill lists, Python will grow over time. And I don't know I I'm okay with having that be coordinated through game to conduct seems reasonable. One of the things I loved about this article is it talked about some of the challenges. So zooming really fast. Apologies for people watching the video. But there's a lot of discussion around the motivation of all that a lot of the difficulties of different types of parallelism that you are hard to express with, with the GIL in place. And it's just an interest in this part's an interesting read. There's effects on Python library usability, there's effects. You want to be able to GPU heavy workloads require multi core processing to coordinate the whole thing together. There's a lot of stuff that we've done engineering wise to work around the Gil. And it's kind of exciting that this is I didn't think I actually didn't see this happening this quickly. So this is pretty exciting.

00:06:48 Yeah, this came out of the blue for me to

00:06:50 the one of the things that the discussion out go, I found it, the what's going to change. So I had this surprise to me, the surprise to me was that the there's supposedly going to be relatively few changes to the public Python and see API's. So this isn't like, moving from Python two to python three, you have to rewrite your Python code, hopefully, you won't have to change your Python code at all. It's going to be some of these extensions. And these are these I mean, like the people writing NumPy and things like that pandas, they might, they're probably going to have to do some changes. And pelo and you know, types are like pi torch and things like that. They really care about this, and they're going to be working with it. But they they're the ones that didn't want the GIL there in the first place. So I think they're motivated to make these changes. It's pretty exciting. But okay, so what what is changing, you know, a lot of the internals of C Python. So there's, and I think this is a fascinating thing, just as a, like a computer science discussion of, of this is a big problem. What are the problems while there's and how do we what are the changes to solve it? And there's reference counting, and memory management, container thread safety, like if you've got multiple, multiple threads using the same list? How do you deal with that locking and atomic API's? And there's a great discussion in here on all those. So I really loved this just as a refresher of some of these CS topics and how they're still relevant in in today's programming. So it's pretty cool.

00:08:19 Yeah, yeah, the container one's pretty interesting, especially with pythons extreme dependency upon dictionaries, yes, even been like the foundation of classes and stuff. The reference counting is the one that's always been held out as a hold up, right? Like, well, we have reference counting. And that can be so fast, because we don't have to do any locking or any thread safety around it. As soon as you remove the Gil, all that stuff goes out the window. It's it talks about a couple of building on on one of the things that was done previously, which is pretty interesting. And you know, Sam gross behind this, and a bunch of other folks have just put together a whole host, you know, a lot of this comes out of Senator met. There's a lot of small building blocks. This is not just like, well, here's the change, right. And one of the things that I saw in the reference counting section is in mortal, I think it was immortalizing. Auto. Yeah. Right. So one of the things was, can we make it so they basically, we're pretty sure that we don't want to ever remove these. So we're just going to take them out of the reference counting checks and just assume that they're going to be here for the life of the program. Yeah, just for performance and memory, caching and all that kind of stuff. However, you also don't have to lock something that you're not incrementing and decrementing. Because you've you've decided not ever to do that, right? So they're just like some interesting piling on effects. And also it was talking about, I don't remember the word but something about a certain a lock, free thread, thread safe type of way to do the increment for the well I added it for the reference counting.

00:09:55 I mean, I was familiar with just like brute force reference counting Of course. It's a It's a common way to deal with shared objects. But the one of the things I loved about this is the discussion around biased reference counting and deferred reference counting the notion that like, it's statistically looking at how multi threaded applications work, most objects really are only at like most, most things are only most objects are only accessed by one thread. There's not that many objects that are shared. So having like a, each object having a thread owner, and the the process for what reference counting is for the owner is different than the process for the for different, you know, the non owner, non thread owner, you know, people accessing the object and, and all of this is hopefully invisible to the people using it. I mean, clearly, at some point, we're going to have to have like some way in Python to be able to utilize this is like, yeah, it can't be invisible forever. So it'll be interesting.

00:10:59 Yeah, yeah, the bias reference counting, that's the word I was looking for. That's, that's pretty interesting. Like the owner thread might not have to lock it, it just does whatever. And the others have to care. Well, and

00:11:10 also, a lot of this is around. I mean, we do reference counting, but partly because of the reference counting, and how our object model is. I mean, one of the things I was surprised by when I moved from C++ to Python, or picked up Python and with objects, and everything is that like in C++, you didn't totally know when the destructor happens. But in Python, we don't really talk about destructors. Too much we have constructors, but we don't really put a ton of work in destructors, because you don't really know when it's going to really go away. And I think that's a good thing. Because now we can say it's actually going to be a little bit longer you thought it was going to, you know, it probably would have disappeared earlier. But we're going to defer that and have a garbage collection phase where it also includes making sure that the threads are concurrency is saved and stuff like that. So yeah, interesting. It's a very fascinating read, I just had a quick read of it this morning. But

00:12:05 it looks very clever. And I'm, I'm all for it, I'm here for let's do,

00:12:08 I don't want to like paint it too rosy. And everybody paying attention to this knows that there is a performance hit for single threaded stuff. So and I thought it was going to be larger. The reference in here talks about somewhere between a five and 10%. performance hit. But we've already seen these like massive gains in performance. So and the the work on improving the performance of Python is going to continue. So I personally optimistic I think that the gains in in performance elsewhere are going to far outweigh the possible slowdown of single threaded stuff.

00:12:46 I mean, a lot of a lot of people don't really care about 5% difference. I mean, the code they're running, that's more simple. It's probably not performance sensitive, a lot of the times and what it is you, you might be trying to squeeze even more performance out of it. Right. And you know, my little mini here as eight cores. Python only cares about one of them. Yeah, if I could use all eight, or six or something, I could do way more than 5%. Better, you know, so I could more than make up for that. If I actually leverage this feature. Yeah. And if I don't care about performance, plus or minus 5%, probably doesn't matter.

00:13:21 Yeah, I don't I don't, I think they have to bring it up. Because there's going to be people saying, but it's going to be slower. And so I'm glad that

00:13:29 Yeah, and that's also that's always been the reason we still have the GIL is it's like we'd like to make changes, but they make a cotton the most common use case less good. So we're not doing it, but maybe this is close enough possible improvements even down the road. So

00:13:43 yeah, I'm just it's gonna be I'm excited to see how this how this pans out. So

00:13:48 yeah, I'm excited as well. They're very cool. I would say certainly, the biggest news of the show is right here. And we got some good jokes and stuff for people to stick around for those

00:13:59 should stick around till the end. What do you got for us next?

00:14:03 All right. Well, I want to tell you about the ferret. You heard a ferret dB, have not like a mongoose, but it's not quite I honestly, if you get show me a mongoose and a ferret and said witches, which I don't know if I could tell maybe the fair mongoose is are more intense. I don't know. But there's more pet like the pretty similar, right?

00:14:22 Is is Mongo for mongoose?

00:14:24 No, it's from my humongous. But oh, there are some frameworks in the JavaScript space, like called mongoose from like, the Node js side. Anyway, so ferret dB, is this thing that thing someone told me about? Let me see if I got some credit. Yeah, this comes from John Bolton Mayor Bachmeier sorry, and they just sent it out and said ran across this. So ferret DB is it's pretty interesting. We'll see where it goes. It's a truly open source. MongoDB alternative. By the way, I'm going to accept the cookies you know, a cool way you don't have cookies. policy popups is not to track other people, that's even better, but I'm going to accept it for them. Our site doesn't have any desert brain because we don't have third party cookies. So 5000 github stars already, that's pretty incredible. And these folks are big fans of MongoDB. And also really big fans of 100%, true open source. And that's why they decided to make this thing called fair dB. So here, I'll read from their page. But MongoDB is a life changing technology for many developers and empowering them to build applications faster than using relational databases. Yes, however, MongoDB abandoned its open source routes, changing the license to SS PL making it unusable for many open source and commercial projects. Now, MongoDB is still open source. But this is like a pretty sure this license is basically you can't make our thing as a service and then sell it without us like, AWS had a MongoDB as a service. And Mongo is like, hello, we want to be we didn't expect it to be used in this way. So I don't think it's, I mean, it's it's not like a huge bash against Mongo. I don't really think but if you really wanted to be unencumbered entirely, well, MongoDB is not it right, right. So here's the idea. So ferret dB, is built on top of Postgres sequel, but it is wire compatible with MongoDB. That is, you can use the different libraries or drivers from different languages, you know, Python, JavaScript, dotnet, whatever, you should be able to just change the connection string over to the ferret dB. And off it goes. One thing it exchanges the binary JSON encoding across the wire, just like MongoDB does. I'm guessing they're using the JSON column stuff in Postgres sequel to match couldn't imagine they're trying to do a relational thing over there. They're probably just like stashing the blobs. But yeah, it's it's pretty neat. Do you think

00:16:59 that's actually, the architecture? That sounds great for an open source project to not try to do the entire database back end, but built on top of Postgres?

00:17:09 Yeah. I mean, there's edge. There's edge dB, right, which is quite popular in the Python space. And I believe they're doing basically the same thing. Like build, build something. And yeah, powered by Postgres under the hood, maybe just the query engine. I'm not sure if the database engine as well for the HDB. Folks, I interviewed them, but still pretty, pretty neat. Get ahead with the job. Yeah. So fair dB. Formerly mango DB is an open source proxy that translates MongoDB wire protocol queries to SQL with Postgres, as a Postgres, it was the database engine, Mango dB, that's

00:17:41 a little bit too close, I

00:17:42 think. Yeah. Little that. Was maybe pushing it. So yeah, you pretty much write the regular MongoDB code that you would would write, but it apparently works. Now, somewhere, I don't know where the roadmap is, let's see, they did a blog post yet. Maybe that's where I should be looking. And on the blog posts, they have something about their roadmap. I know. I'll link to it if I can find it. But there's a ferret DB roadmap, and there's one really notable thing that people are going to need to be holding out for. And that's indexes. Oh, okay. And so if you don't have, if you don't have indexes, you have a real hard time doing fast database stuff. So I think they said they're trying to get it kind of all finished up by the end of 2023. So this is not like, Hey, you should just jump right on this and run with it. Because I don't think it's I don't think it's far enough along. It's written and go for what that's worth. MongoDB itself is written in C. So it's not like it makes it more or less friendly to Python, folks. So here's the public roadmap perfect. So it's not linked off their GitHub Pages. And so you can see the end of alpha is supposed to be in the past. And it does look like they're all done and see their Beta stuff that they're working on. But then for general availability, this this index stuff that's supposed to come actually this, I said, 2023. This is supposed to be done January 2023, which felt like a long time ago, not long ago, but that's actually now so I don't know how far along it is, but support for issues for images rather indexes. Look at this issue here looks, I don't see a lot of traffic on it. But still, it would be basically required, right? If you've got many, many gigs of data, then you have to have indexes.

00:19:27 Right? However, the devil's advocate here, development work on a project that utilizes this can proceed before you get tons of users and stuff, knowing that it's coming soon.

00:19:42 Again, yeah, that's a good point. If you trust Him, yeah, although because it's wire protocol, you could just run MongoDB and then flip it theoretically, right? You don't have to nest it's not like a complete new creation. You've got to build upon right. It's meant to to mirror something that exists. So you could do that. Yeah, I think we've got like five I have six, seven gigs of data in the database that backs Python bytes. Like, if you do queries against, you know, give me the 20 things out of this, these millions and millions of records that match this without an index. It's actually I'm, I think MongoDB may refuse to do it, there are certain situations where it's like too much data, no index, not gonna be able to answer that question. So it might be really slow or might actually error out and say this, you need to create an index. So anyway, long story short, like this is a big deal until this comes in. I would not touch it in terms of a, I'm going to try to run on top of this. Yeah. But if that if that comes through, then, and you already have Postgres, but you want some kind of document, like experience for part of your app or one of your apps, but you don't want to switch to Mongo, that would be pretty cool.

00:20:50 So one of the things notable in the menu bar, fare to be a is careers. So this is not, this isn't intended to be something commercial at some point. Unless they just feel like hiring people for the fun of

00:21:05 it. Yeah, that is interesting. Where are they going with it? Right. So I would imagine they have a fair DB as a service. Yeah. Magic in mind out there. But you're right. It's certainly it has an ink. And

00:21:20 I mean, that's not necessarily bad. That's probably a good thing that there's money behind it. But just interesting.

00:21:25 It is interesting. Yes. Very interesting. All right. Well, fair to be something I put out there for people to keep their eye on not necessarily to jump on right away. But quite interesting. Yep. Oh, by the way, we have a couple of excited folks out in the audience, Gil optional would be amazing to zero. And I know that zero is working on some real high performance web framework stuff. So I That would be cool. And how about a Docker container? prebuilt was C Python with no Gil, pick your Docker container and run that one.

00:21:57 Sure. That'd be cool.

00:21:58 That's not a bad idea. Yeah. And Seth out there says Good thing we invested in faster C five on earlier. So now we can roll it back a little.

00:22:06 Yeah, I mean, kind of we knew that was coming. So that's one of the reasons for the speedups in 311, and planned for future. So

00:22:13 yeah, indeed. All right. Let's switch over to Real quickly talk about our sponsor, before we move on here. As I said at the beginning, this episode is brought to you by Microsoft for startups. We just got an email, I don't know if you saw Brian from somebody who signed up for the Microsoft started program and said, This is a really great, I was a little bit skeptical, but I signed up. And this is a really great project really great service and offering for them. And they actually, it's working really well. So that's great. Yeah, that was really good to hear. So you know, Microsoft knows that starting a business is hard. They want to help support startups that can then later, you know, be customers of theirs, of course. So they put together this Microsoft for startups program to help them understand what startups need to help them be more successful and to create a digital platform to help her help them overcome those challenges. And they call that Microsoft for startups founders hub, and it provides all founders at any stage with free resources to solve startup challenges, provides tech benefits, access to expert guidance and skilled resources, mentorship, network connections, and much more. It doesn't require the startups to be investor backed or third party validated, you just apply. Microsoft says looks like you'd be a good fit for this program you're in. And with that you get access to a bunch of cloud resources GitHub and Azure office 365 I think you also get access to open AI, which you know, chat GTP pretty hoppin these days and might be something cool to leverage and through Microsoft for startup founders hub, becoming a founder is also not no longer about who you know, you have access to their mentorship network, which I think is one of the biggest values you probably get talk to people about idea validation, fundraising, management, coaching and sales and marketing and all those things and you get a book one on one meeting those mentors to make your idea a reality today with the critical support you'll get from Microsoft for startups founders hub to join the program, just visit Python bytes dot F m slash founders hub 2022 links in the show notes. So are you interested? Give it a click? Yes. All right over to you, Brian.

00:24:17 Well, I was I want to guess, transition is difficult for me apparently right now, as our words. Anyway, the next article I want to talk about is four tips for structuring your research groups Python package. So I think this is just a Python package. But research group. I think this is this is from David Aaron Nicholson. And I think the idea around it is a lot of people do with scientific computing and, and various things like that might not be might be struggling with lots of Python code. So they're pack you know, putting it into subdirectories and stuff like that. So this is I'm talking about packages in that directory in that sense of it's a directory with a Dunder in it, and you can reference it by importing it through normal import the import mechanism. It's not about packaging for like IPI or something like that. It's still some really great information. So the four tips are, one, give your packages and modules terse, single word names whenever possible. And there's some great examples of what not to do later. Number two import modules internally, instead of importing everything from modules, make use of sub packages. And the last one is preferred modules with specific names instead of things like utils, helpers and support. And this is this, everyone struggling with this? And including me, even though I've been preaching this for a long time. It's hard. There, there's some great examples of what not to do. So the the, what was this the give your modules terse, single word names whenever possible. And I guess there's a couple examples of what not to do. So there's a really long directory name called electro my graphy toolkit. Yeah, that's a bit long. And then prefixing, everything with EMG. Afterwards, within it, don't do that. You need to just some great examples of better versions. So right,

00:26:19 already has the the top level part of the package has the namespace, yeah, if you want to be explicit, just you know, package.so package.

00:26:28 And so they're talking about how, how, what it looks like when you're importing it is different. So I'm gonna scroll down of like, importing stuff, I guess I'll just drop to one, a better thing would be like EMG toolkit. And I would say even like, is toolkit really adding in the information, maybe just the EMG or something. And then having instead of having like solvers, and a whole bunch of prefixes, just put solvers in a directory name, and then put the types of solvers underneath? You don't have to have EMGs? Under everything, or Yeah, EMG and by brute

00:27:04 force solver, and a star solver and all that it just solvers dot A star solver? Yeah, brute force or something, right?

00:27:11 Yeah. All right. And I'd argue that you can even just probably drop the toolkit and it'd be EMG dot solvers dot brute force, it'd be a better name. But I think so I'm not going to go through this, this entire thing. But import modules is something I've seen a lot of people will do, like, from package solver, import, and then list all of the things that they're importing. And I think, and I've been guilty of this to doing this before, also, especially if I'm only importing one of one of the things that people will do this for is because the entire name is too long, well then, you know, make the name shorter. So instead of doing that, just import the package solver, and then you dot reference everything else, right? And

00:27:54 do what the data scientists do. If you don't control the name, you know, import NumPy as NP, yeah, then np dot that you can shorten the name for you, even if you can't shorten it for others. And at the source,

00:28:07 right, so one of the reminders is you can do from if you're in the same directory you can do from dot import solvers. And then you can reference like solvers and entropy solver and things like that. Anyway, some great even discussion of sub packages of this is something that I always forget that is difficult. It's a mind shift to say, Oh, I'm gonna throw things into a directory and then have a package. But you can, you can do that again. And it can it can keep going down. And some people forget to do that. So that references that as well. So it's good. You can have packages inside of packages inside a package.

00:28:43 Nice. I think, Robert, our audience has a great recommendation to simplify the code we got to write. Just how about we just extended a little bit from Star import star and like you just have access to everything? There's sure the startup times 10 minutes, but it's fine. Yeah, painful Roy's reminding us that, you know, one of those no pythons is about these namespaces. Yeah,

00:29:06 yeah. And I think it's just also be nice to people. Just, you know, people trying to write write their code in Python, they're not doing weird stuff, because they want to do weird stuff. They just don't know what the normal way to do it is. So gentle reminders like this post are good. Indeed, what you got for us next.

00:29:24 I don't want to really quibble about it. But let's talk about anyway Quibbler. So Quibbler actually is, is interesting keeping with the data science theme. So this one here is a way to take matplotlib and make it more interactive. So you probably know matplotlib will make a nice, like printable, publishable, high quality image, but they're generally not as interactive as like bocce. Some of these other frameworks, so quibblers, like your data, but interactive. And let me just play a little video for you here and I'll just describe it but Uh, this way, you'll kind of know what this is about. If you haven't check this out. So the idea is, you could go and plot something with matplotlib. And you have some variable you'd like to make interactive, you just wrap it in an eye quip. And all of a sudden, the entire UI becomes completely interactive, which is insane. So here's like, a triangle with squares around each based off each of the edge of the triangle. And then if you just make the numbers, the inputs, this iClip type, then all of a sudden, you can drag them around and interact with them, and even even works on like cells, and zooms and other pictures. What do you think

00:30:39 this is amazing, also amazing use of video to show people how easy it is to switch? Yes,

00:30:44 thank you for doing that. Thank you for doing that vivo. But yeah, this is a super cool project. I don't I don't have a ton to say about it, actually. But you know, if you're working with matplotlib already, and like, you know, it'd be really nice if we could move some of these things around and create interactive graphics a little bit more than, you know, just wrapping the independent variables in I equip interactive bits. And it turns the whole the whole graph into something that's pretty excellent. You know, I think this is, it looks great. I don't see why you wouldn't, wouldn't want to use it.

00:31:17 Yeah. That's That's what looks fun. Yeah. Cool.

00:31:19 And so when are the audience's loves quip. So they must have experienced with as well. So if you were doing matplotlib, and you want to make it more interactive, check this out. Awesome. It's all of our items, isn't it? Brian, even though somehow I seem to have like a screen full of tabs. So I don't know how that works.

00:31:34 Yeah. So you've got some interesting Python related stuff. And I thought I would go with the tradition of Python and say, And now for something completely different. I just ran across an article I thought I'd share just quickly, I'm not going to talk about it a lot. But there was an article in Washington Post about how turtle moms talk to their eggs before they hatch. And I just thought it was a fascinating read. Plus, Kay got pictures of turtles so far. Awesome, that I wasn't going to talk about it too much. But one of the things I thought was really cool was somebody went out and thought, Oh, we don't we there's the turtle moms hanging out in the rivers or somewhere near the the the hatch, the eggs on the sand, and they just wait for him or something. Well, are they talking it? Probably not. But they went out and recorded it anyway. And it's lower frequencies frequencies that we don't normally hear. And that's also slower timeframes, like a conversation can be like hours for reply. So wow, takes a while to go back. And then also like some of the eggs talk to each other before they hatch. They can, they can talk to each other to help possibly coordinate wind to hatch, because if there's predators around more of them through will survive if they all hatch at the same time. So anyway, just cool article. Check it out. If you guys want to look at turtles.

00:32:55 Science is neat, isn't it? Yeah. Yeah, that's really cool. So kind of not one of my extras, but I'll go through as soon as the next coming talk Python episode is a brown the story of imaging black holes, with Dr. Sarah, I set it on. Yeah, so that's going to be really, really awesome. And then there's a good chance, not 100% chance, but a good chance that I also will have a science show on the future, the fusion National Ignition breakthrough with Python as well coming up. So very cool. Very cool stuff.

00:33:30 Very neat. You get to talk to so many cool people through that listening.

00:33:34 I know, it's, it's, I would never get to talk to these people are like, Hey, I have a podcast. Let's talk about it. All right. Yeah, let's do my extras. So are you so I published the thing on RSS a little while ago and talked a lot about RSS. So I'm more RSS stuff. Because I said, reader, ar e. D. Er, is a really cool thing. But it's Mac only other people are like, hey, guess what else I use? This is neat. So there's a fresh RSS, which is like your own hosted RSS web app. I think it also does some read later type of things. Feedly I knew about Feedly. But I thought it was just an average some sort of web app type of thing. But apparently, it has like a cool AI engine to help kind of recommend if you get like, overwhelmed with all the stuff he's subscribed to, you're like, Well, I can't read it. It's just insane. You know, it has kind of your own personal algorithmic feed, which is, I know, algorithmic feeds often get a bad name, but there are benefits to you know, yeah. Have you used Feedly? lately? I've not.

00:34:35 I've been using it for years. So I didn't know about the AI but but yeah, I use it a lot.

00:34:41 Yeah, I thought that was the one you said you were using. So but yeah, the the AI engine sounds at least interesting. flim, on Android. People care about that. And read wise we talked about but I've been playing the read wise and it continues to be interesting talking. Not only when I first started that RSS and you know, maybe to read later, but you can throw in like ePub books, you can do YouTube videos and like, it'll let you annotate the transcripts that it makes. And it's, it's pretty well. Wow. And then Okay, going for more RSS here is just published all the talk Python courses as an RSS feed. So if you want to subscribe to that, then soon as we publish a new talk Python training course, like if we go down here, there's a PI test one somewhere inside of pi tests, right? So that came out a couple months ago. And so people, if they're subscribed to the RSS feed another way, they'll get it straight away. It's cool, right? That is neat. Yeah. RSSC more things over at talk Python, the podcast, not the courses. I were talking about this right before the show, I did a ton of stuff for sort of helping people find when we're was a particular person, that guest on the show, when were they on the show? If they were on one episode? What other episodes do they do? So here's a great, huge list of tons of people who have been guests on the show. And Brian, who's in number one right now.

00:36:04 I am with Brett as a close second. So

00:36:07 close second. So Brian has been on 10 times right cannon nine. Anthony Shaw, nine, the invaders, six lukesh Langa, five sessile. Down there at five. It says a Philip as well. Anyway, if this is a new resource on the podcast, so go, if you want to explore the data for the last seven years in slightly different way, people can check that out. And congrats, Brian for a lead in the back there, just and at last I talked about how to do traveling around just taking an iPad and still doing development work. And we talked about prompt and all those things. So I basically wrote up an article on that discussion I had there. So I'll link to that people can check that out if they want. So there's the written more formal version called dev on the road on my website. Cool. All right. Ready for a joke. By the way, Robert out there is suggesting that we might need to update your photo. Now you got your cool hair. I need to update you on that. guestlist there was a seven year old photo or something. Yeah, that's from when you were on the show the first time maybe six years ago? No, I

00:37:11 really do look like that other photo, what you're seeing right now is an AI generated bot of yeah,

00:37:15 this is like actually, Brian hasn't been here for a few years. This is a deep fake and I infinitive. All right,

00:37:25 Brian is still embroiled in a lawsuit to try to get this to stop.

00:37:31 The real Brian will never defeat the AI. Okay. So. So I thought, I thought of you actually, right when I saw this one. This is programming humor. And it says it has this dog looking thing kind of very deep and thought projected to the sky for reasons I don't understand. But it says, Am I testing this program? Or is it testing me? I suspect a lot of people can, can relate to having that go both ways, deep thoughts, deep thoughts. And we've got a name for the AI. It's called Brian GPT. I know you got a joke as well, for us maybe more involved in the floating dog.

00:38:13 Okay, I can't remember where I got this. But every cloud architecture, it's just, I don't know, it's an image with, with some stuff that I wrote, there's a lot, I'm not gonna cover everything. But one of my favorite bits of this is the Managed Services, the MIS managed services and the unmanageable services

00:38:31 that are held together by duct tape and like some kind of like

00:38:36 containers everywhere. I do like the cool databases that drive resumes. And the real debate database that's actually doing all the actual work.

00:38:47 The plumbing, there's a huge bunch of plumbing around, it just has the data engineers got very excited here. Yeah, empties into a data lake,

00:38:54 which also drips into a data swamp. And there's a blame radius, services that stop stuff. There's one tiny cron job that keeps everything from falling apart. It's good VPN of sadness.

00:39:11 It's all backed by the frickin slick reverse proxy.

00:39:14 Yeah. So this is a this is found on good tech things, which actually has a whole bunch of cool, like, funny images. So I might steal some more of these from home,

00:39:25 or we might hear from good tech things. Again, this is this is pretty awesome.

00:39:29 All right. Well,

00:39:29 is that everything for us? That is that is all of it's so nice. Thank you everyone for listening, Brian. Thanks. As always, bye bye.

