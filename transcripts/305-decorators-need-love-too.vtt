
00:00:00.000 --> 00:00:01.760
- Hello and welcome to Python Bytes,


00:00:01.760 --> 00:00:03.560
where we deliver Python news and headlines


00:00:03.560 --> 00:00:04.880
directly to your earbuds.


00:00:04.880 --> 00:00:09.520
This is episode 305, recorded October 10, 2022,


00:00:09.520 --> 00:00:10.760
and I am Brian Okken.


00:00:10.760 --> 00:00:11.960
- I'm Michael Kennedy.


00:00:11.960 --> 00:00:14.080
- We got a whole bunch of stuff that's great.


00:00:14.080 --> 00:00:16.680
We also want to thank Microsoft for Startups,


00:00:16.680 --> 00:00:18.560
Founders Hub, for sponsoring this episode.


00:00:18.560 --> 00:00:20.360
We'll hear more about them later.


00:00:20.360 --> 00:00:24.240
But do you want to start us off with something exciting?


00:00:24.240 --> 00:00:25.060
- Let's kick it off.


00:00:25.060 --> 00:00:26.800
I have a theme this week, Brian.


00:00:26.800 --> 00:00:27.640
- Okay.


00:00:27.640 --> 00:00:28.480
- Before we get to it,


00:00:28.480 --> 00:00:30.580
If my voice sounds a little bit scratchy,


00:00:30.580 --> 00:00:31.580
I just want to apologize.


00:00:31.580 --> 00:00:33.060
It's not that I'm sick.


00:00:33.060 --> 00:00:35.420
It's that I was rocking out to the Scorpions last night.


00:00:35.420 --> 00:00:36.340
They were here in Portland,


00:00:36.340 --> 00:00:38.300
and even if they're 70, they still rock.


00:00:38.300 --> 00:00:39.300
It was amazing.


00:00:39.300 --> 00:00:40.140
I don't know how old they are,


00:00:40.140 --> 00:00:41.620
but they probably are up there.


00:00:41.620 --> 00:00:43.020
- I don't know, maybe being sick


00:00:43.020 --> 00:00:45.020
may have been a better excuse.


00:00:45.020 --> 00:00:46.860
- Yeah, maybe. (laughs)


00:00:46.860 --> 00:00:49.060
All right, I do have a theme, though, for the week,


00:00:49.060 --> 00:00:51.300
and let's kick it off with that theme.


00:00:51.300 --> 00:00:54.380
This first one, both of these are recommendations.


00:00:54.380 --> 00:00:56.740
The first one came to us from Matt Kramer.


00:00:56.740 --> 00:00:57.860
Thank you for that.


00:00:57.860 --> 00:01:01.520
And Jeff Glass, I remember last time I said,


00:01:01.520 --> 00:01:06.520
they announced PyScript, that is Python compiled


00:01:06.520 --> 00:01:09.520
to WebAssembly running on top of PyIodide


00:01:09.520 --> 00:01:11.520
and Wasm in the browser, which is amazing.


00:01:11.520 --> 00:01:14.480
So many cool things and so much potential there.


00:01:14.480 --> 00:01:16.040
I pointed out that that was released


00:01:16.040 --> 00:01:17.120
and there were some breaking changes


00:01:17.120 --> 00:01:19.500
and it was like last minute that I got that.


00:01:19.500 --> 00:01:21.300
So I just threw it in as an extra,


00:01:21.300 --> 00:01:23.320
but now I had a chance to look at it.


00:01:23.320 --> 00:01:26.320
So there's a bunch of changes and I just wanna highlight


00:01:26.320 --> 00:01:27.840
some of the things for people.


00:01:27.840 --> 00:01:31.440
So they're using semantic versioning


00:01:31.440 --> 00:01:33.920
and I don't fully understand this.


00:01:33.920 --> 00:01:35.800
I guess it's just like month based, right?


00:01:35.800 --> 00:01:38.840
So it's 2022.09.1.


00:01:38.840 --> 00:01:40.280
That doesn't mean September 1st though,


00:01:40.280 --> 00:01:41.880
it was released on September 30th.


00:01:41.880 --> 00:01:45.040
So about 11 days ago, 10 days ago.


00:01:45.040 --> 00:01:48.000
And they just reiterate this project


00:01:48.000 --> 00:01:50.360
is undergoing lots of changes.


00:01:50.360 --> 00:01:52.360
It's in its super early stages.


00:01:52.360 --> 00:01:54.960
The calendar versioning doesn't really indicate


00:01:54.960 --> 00:01:58.000
that it's like 0.1 or whatever type of level,


00:01:58.000 --> 00:01:59.800
but there's a lot of breaking changes.


00:01:59.800 --> 00:02:02.160
So if you've worked with it before,


00:02:02.160 --> 00:02:04.120
just you wanna read through this


00:02:04.120 --> 00:02:05.720
and figure out where things are going.


00:02:05.720 --> 00:02:08.560
It doesn't look like anything's majorly broken


00:02:08.560 --> 00:02:10.560
in like you've got to rewrite a ton of stuff,


00:02:10.560 --> 00:02:13.600
but it also, there are parts that will stop working,


00:02:13.600 --> 00:02:15.520
but they seem pretty easy to fix.


00:02:15.520 --> 00:02:19.440
So first of all, like many Python programs,


00:02:19.440 --> 00:02:21.560
you need to express your dependencies.


00:02:21.560 --> 00:02:23.440
You would do that through a pyproject.toml


00:02:23.440 --> 00:02:24.900
or requirements.txt,


00:02:24.900 --> 00:02:26.640
unless you're on the web running the browser,


00:02:26.640 --> 00:02:29.080
then nope, you don't do that.


00:02:29.080 --> 00:02:29.920
Instead, what you would do


00:02:29.920 --> 00:02:32.680
is you'd use this py-env section to express,


00:02:32.680 --> 00:02:34.040
I depend on these packages,


00:02:34.040 --> 00:02:37.460
either just a URL to a wheel, a Python wheel,


00:02:37.460 --> 00:02:41.080
or something that could be pip installed using micro pip.


00:02:41.080 --> 00:02:42.160
That's gone.


00:02:42.160 --> 00:02:45.000
It's now deprecated and will be taken away.


00:02:45.000 --> 00:02:48.640
So now that's folded into the py-config section,


00:02:48.640 --> 00:02:49.680
and there's a way to just say


00:02:49.680 --> 00:02:51.640
packages are a list of packages


00:02:51.640 --> 00:02:55.300
and files that we're using is a list of paths.


00:02:55.300 --> 00:02:57.400
And it's in these kinds of places where you indicate


00:02:57.400 --> 00:03:01.100
what Python files you might write and import,


00:03:01.100 --> 00:03:04.420
because while you can write Python in HTML,


00:03:04.420 --> 00:03:07.160
just like JavaScript, you should do that very sparingly


00:03:07.160 --> 00:03:08.740
and you shouldn't just write your, you know,


00:03:08.740 --> 00:03:10.660
a thousand lines of Python like inline.


00:03:10.660 --> 00:03:12.260
That's not a great idea.


00:03:12.260 --> 00:03:15.540
So you would link over to a set of Python files


00:03:15.540 --> 00:03:18.780
that you can run one of them and import others from that.


00:03:18.780 --> 00:03:22.220
All right, so pyenv going away, folded into pyconfig.


00:03:22.220 --> 00:03:23.820
This is one of the things that's easy to fix,


00:03:23.820 --> 00:03:25.700
but like I said, will stop working.


00:03:25.700 --> 00:03:29.140
They've also changed the syntax of some events.


00:03:29.140 --> 00:03:32.860
So you might've seen people on HTML elements


00:03:32.860 --> 00:03:35.180
like a paragraph or a div or a button,


00:03:35.180 --> 00:03:38.660
say mouse over equals in some JavaScript function name,


00:03:38.660 --> 00:03:42.020
like a function call, either inline function


00:03:42.020 --> 00:03:43.940
or a function you've written.


00:03:43.940 --> 00:03:47.840
In PyScript, there's a py-event.


00:03:47.840 --> 00:03:50.200
So there's a pie dash mouse over


00:03:50.200 --> 00:03:52.880
and a pie dash click type of thing.


00:03:52.880 --> 00:03:55.320
And in here you can just write arbitrary Python.


00:03:55.320 --> 00:03:59.080
And unlike JavaScript, you can actually


00:03:59.080 --> 00:04:01.960
write arbitrary Python, separate multi-line Python


00:04:01.960 --> 00:04:03.840
separated by semicolons, look at that.


00:04:03.840 --> 00:04:05.880
Semicolons, they made it to Python.


00:04:05.880 --> 00:04:07.240
You can write arbitrary Python,


00:04:07.240 --> 00:04:09.400
it doesn't have to be a single function call.


00:04:09.400 --> 00:04:10.440
Pretty cool, right?


00:04:10.440 --> 00:04:11.680
- It is pretty cool.


00:04:11.680 --> 00:04:14.340
Where Python's starting to turn into JavaScript


00:04:14.340 --> 00:04:15.960
that is changing all the time.


00:04:15.960 --> 00:04:17.800
- Exactly, well that's why the breaking changes.


00:04:17.800 --> 00:04:19.240
No, just kidding, that's the new project,


00:04:19.240 --> 00:04:21.440
but don't let it become JavaScript.


00:04:21.440 --> 00:04:22.280
(laughing)


00:04:22.280 --> 00:04:24.040
I'm very excited that maybe it could


00:04:24.040 --> 00:04:26.640
supplant JavaScript to some degree.


00:04:26.640 --> 00:04:29.080
There's some stuff about HTML escaping,


00:04:29.080 --> 00:04:31.160
so you could do like print a string


00:04:31.160 --> 00:04:34.320
and that will show up in the browser sometimes,


00:04:34.320 --> 00:04:36.280
or you can get it to go to the console.


00:04:36.280 --> 00:04:40.360
But if you put like one is less than two,


00:04:40.360 --> 00:04:42.520
and that shows up in the browser,


00:04:42.520 --> 00:04:45.560
you know, that might get interpreted as an opening bracket


00:04:45.560 --> 00:04:47.760
instead of just a less than symbol.


00:04:47.760 --> 00:04:50.580
So there's some fixes there, some stuff for logging.


00:04:50.580 --> 00:04:53.520
The ability to run multiple runtimes.


00:04:53.520 --> 00:04:56.520
So when people usually do PyScript,


00:04:56.520 --> 00:05:00.200
they point at just a CDN version of PyScript,


00:05:00.200 --> 00:05:03.840
which points at a CDN version of Pyodide.


00:05:03.840 --> 00:05:06.400
But you can and easily can do,


00:05:06.400 --> 00:05:08.280
you can download that,


00:05:08.280 --> 00:05:09.880
customize it, and put it in


00:05:09.880 --> 00:05:12.520
your static files and run it out of there.


00:05:12.520 --> 00:05:16.200
You could possibly not even use Pyodide itself,


00:05:16.200 --> 00:05:19.060
you could use, say, like, MicroPython, potentially.


00:05:19.060 --> 00:05:22.380
Or you could actually have maybe different versions


00:05:22.380 --> 00:05:27.320
of PyEdite running in different sections of your site,


00:05:27.320 --> 00:05:29.320
if you wanted, so different PyScript blocks,


00:05:29.320 --> 00:05:31.480
presumably even on the same page.


00:05:31.480 --> 00:05:35.040
So, a lot of flexibility about managing multiple runtimes.


00:05:35.040 --> 00:05:36.320
Let's see, a few other things.


00:05:36.320 --> 00:05:38.960
There's also some major releases of PyEdite


00:05:38.960 --> 00:05:41.680
that's coming along, and because it's built on top of PyEdite


00:05:41.680 --> 00:05:43.880
or runs on top of PyEdite, PyScript does,


00:05:43.880 --> 00:05:46.160
obviously the changes there are super important.


00:05:46.160 --> 00:05:48.920
So some of the changes are that they broke,


00:05:48.920 --> 00:05:51.360
it used to be kind of like one huge namespace


00:05:51.360 --> 00:05:53.060
and they broke that up into a bunch of pieces.


00:05:53.060 --> 00:05:54.660
So you got to know about that.


00:05:54.660 --> 00:05:57.180
But probably the most relevant for people is


00:05:57.180 --> 00:05:58.740
you used to have to do this thing


00:05:58.740 --> 00:06:02.980
where you would import from JavaScript some event


00:06:02.980 --> 00:06:06.980
and do like a proxy type thing to like hook an event,


00:06:06.980 --> 00:06:08.980
which wasn't terrible, but it was kind of like,


00:06:08.980 --> 00:06:11.660
well, he's still doing Python, I don't know.


00:06:11.660 --> 00:06:14.540
Right, so they've written a bunch of event handlers


00:06:14.540 --> 00:06:18.780
or event sources in pyodide ffi.wrappers.


00:06:18.780 --> 00:06:22.020
So like add event listener, remove event listener,


00:06:22.020 --> 00:06:24.300
set timeout, set interval, clear interval.


00:06:24.300 --> 00:06:27.140
And so now you can just import, say like add event listener,


00:06:27.140 --> 00:06:29.060
have a function, Python function,


00:06:29.060 --> 00:06:31.800
and then you just say add event listener on a tag,


00:06:31.800 --> 00:06:33.820
on an event, and here's your Python function.


00:06:33.820 --> 00:06:34.740
That's awesome, right?


00:06:34.740 --> 00:06:36.140
- That is awesome, yeah.


00:06:36.140 --> 00:06:39.580
- Yeah, so they've added these event handler sources


00:06:39.580 --> 00:06:42.080
that are straight Python and not interoperating


00:06:42.080 --> 00:06:45.260
with JavaScript more directly.


00:06:45.260 --> 00:06:46.780
There's a bunch of things behind the scenes


00:06:46.780 --> 00:06:47.620
that will make it better,


00:06:47.620 --> 00:06:49.700
like that we don't necessarily as users care about,


00:06:49.700 --> 00:06:52.000
but like, and Scriptin is getting better.


00:06:52.000 --> 00:06:53.960
They've got a whole testing scheme.


00:06:53.960 --> 00:06:56.980
You might be interested in this, Brian, for your show.


00:06:56.980 --> 00:06:59.700
They do integration tests with PyWrite.


00:06:59.700 --> 00:07:01.980
They do TypeScript tests,


00:07:01.980 --> 00:07:04.740
'cause a lot of the interaction bits are in TypeScript,


00:07:04.740 --> 00:07:06.260
and they do that with Jest.


00:07:06.260 --> 00:07:10.100
And then Python, the Python code gets tested with pytest.


00:07:10.100 --> 00:07:11.500
That's an interesting mix, huh?


00:07:11.500 --> 00:07:15.300
- I guess just pointing out, we said PyRite, it's PlayRite.


00:07:15.300 --> 00:07:18.280
- Yeah, I'm sorry, I'm too much on the Py right now.


00:07:18.280 --> 00:07:20.860
Yes, PlayRite, thank you for keeping me honest.


00:07:20.860 --> 00:07:24.580
- Yeah, but I'll do a famous pull request on them


00:07:24.580 --> 00:07:27.740
to try to get that pytest case all lowercase.


00:07:27.740 --> 00:07:28.700
That'd be good.


00:07:28.700 --> 00:07:31.460
- Yeah, I'm not even gonna use this project


00:07:31.460 --> 00:07:32.740
until that gets fixed.


00:07:32.740 --> 00:07:36.940
So some stuff on infrastructure,


00:07:36.940 --> 00:07:39.700
there's new CI things that they're working on


00:07:39.700 --> 00:07:40.640
to make it better.


00:07:40.640 --> 00:07:43.180
They're using type annotations and they're trying to


00:07:43.180 --> 00:07:46.940
synchronize TypeScript and PyScripts type annotations


00:07:46.940 --> 00:07:49.620
to kind of keep the end to end across JavaScript,


00:07:49.620 --> 00:07:53.460
across Python, accurate and a bunch of stuff that's coming.


00:07:53.460 --> 00:07:56.720
In particular, a lot of the rethinking how async works


00:07:56.720 --> 00:08:00.100
because JavaScript is already like super asynchronous


00:08:00.100 --> 00:08:03.060
but it just has one loop and if you hook your async Python


00:08:03.060 --> 00:08:05.220
into that and like, is it really async?


00:08:05.220 --> 00:08:07.260
Yeah, it's a little bit complicated.


00:08:07.260 --> 00:08:08.700
You can check out what they said there.


00:08:08.700 --> 00:08:10.720
But otherwise, very exciting stuff.


00:08:10.720 --> 00:08:13.320
And if you're doing PyScript, definitely check this out


00:08:13.320 --> 00:08:14.560
'cause it's going to affect you.


00:08:14.560 --> 00:08:15.580
- Yeah, that's cool.


00:08:15.580 --> 00:08:18.920
Well, let's give your voice a little bit of a break.


00:08:18.920 --> 00:08:21.820
- Yeah, I mean, too much Rocky Like a Hurricane


00:08:21.820 --> 00:08:23.300
stuff going on.


00:08:23.300 --> 00:08:24.140
- Yeah.


00:08:24.140 --> 00:08:27.580
Well, I wanna talk about decorators a little bit.


00:08:27.580 --> 00:08:32.580
So I was actually on a, I sat in on a Boston,


00:08:32.580 --> 00:08:34.580
the Python Boston Meetup group.


00:08:34.580 --> 00:08:38.120
It's kind of neat, they're still doing online.


00:08:38.120 --> 00:08:41.960
So it's not really Boston, it's anybody can jump in


00:08:41.960 --> 00:08:44.000
and have fun there.


00:08:44.000 --> 00:08:48.160
But we're talking about pytest and the,


00:08:48.160 --> 00:08:49.580
and Ned Batchelder was there


00:08:49.580 --> 00:08:52.020
and talking about coverage also.


00:08:52.020 --> 00:08:54.600
And he was showing us some of the test code,


00:08:54.600 --> 00:08:55.760
it was kind of, it was really fun.


00:08:55.760 --> 00:08:57.360
'Cause he was showing us some of the test code


00:08:57.360 --> 00:09:01.240
within the coverage, the test code that tests coverage


00:09:01.240 --> 00:09:03.360
by that coverage.py.


00:09:03.360 --> 00:09:06.460
And he was showing some things that,


00:09:06.460 --> 00:09:10.400
and then about using decorator shortcuts.


00:09:10.400 --> 00:09:12.780
And then I was like, that's really cool.


00:09:12.780 --> 00:09:14.600
I always forget to do that.


00:09:14.600 --> 00:09:18.420
And so he wrote up this, I don't know if it's just for me,


00:09:18.420 --> 00:09:21.920
but he wrote up a blog post called decorator shortcuts.


00:09:21.920 --> 00:09:24.960
And especially, I mean, I guess for a lot of stuff,


00:09:24.960 --> 00:09:27.380
we use decorators a lot in Python now.


00:09:27.380 --> 00:09:32.380
And in pytest also uses a lot of decorators,


00:09:32.900 --> 00:09:36.600
things like pytest mark parameterize


00:09:36.600 --> 00:09:39.520
or pytest mark skip or X fail.


00:09:39.520 --> 00:09:43.460
Those are all decorators built in part of pytest.


00:09:43.460 --> 00:09:46.660
And so the thing he wanted to show us is like,


00:09:46.660 --> 00:09:50.420
as an example, he's got some tests that have to,


00:09:50.420 --> 00:09:52.980
that are either skipped or X failed


00:09:52.980 --> 00:09:54.680
on certain Python versions.


00:09:54.680 --> 00:09:58.580
So he's got a way to test that piece of code


00:09:58.580 --> 00:10:03.420
that only works on, say, like, it doesn't work on PyPy,


00:10:03.420 --> 00:10:07.380
or it doesn't work on like Python 3.8 or before


00:10:07.380 --> 00:10:08.820
or something like that.


00:10:08.820 --> 00:10:13.820
And so he has these fairly complex version,


00:10:13.820 --> 00:10:19.740
like XFail decorator sequences that he can take.


00:10:19.740 --> 00:10:25.100
And instead of saying, and let's say he's actually filed,


00:10:25.100 --> 00:10:26.340
maybe there's an issue,


00:10:26.340 --> 00:10:29.820
He's actually filed an issue against PyPy, for instance.


00:10:29.820 --> 00:10:32.500
But his tests are still failing.


00:10:32.500 --> 00:10:34.380
He had an example where instead of just


00:10:34.380 --> 00:10:38.060
this whole big XFail blob with the environment,


00:10:38.060 --> 00:10:39.760
checking the environment version,


00:10:39.760 --> 00:10:43.640
and having a reason and a link to the defect,


00:10:43.640 --> 00:10:46.460
he just shortcutted that to just like


00:10:46.460 --> 00:10:49.460
a single variable name or single name


00:10:49.460 --> 00:10:56.120
that says XFailPyPy3749, as an example,


00:10:56.120 --> 00:10:57.040
just a single thing.


00:10:57.040 --> 00:10:59.440
And then when you're using it,


00:10:59.440 --> 00:11:01.200
instead of this whole big blob,


00:11:01.200 --> 00:11:04.200
you can just write @xfail.


00:11:04.200 --> 00:11:07.360
Instead of saying like pytestmark xfail,


00:11:07.360 --> 00:11:08.960
you can have this specific xfail,


00:11:08.960 --> 00:11:11.920
and then you get the reason printout and everything.


00:11:11.920 --> 00:11:13.160
Now this is-- - That's very clever.


00:11:13.160 --> 00:11:15.880
- Yeah, especially I like it for this,


00:11:15.880 --> 00:11:19.400
is we were talking about how we don't like


00:11:19.400 --> 00:11:21.200
to leave xfails in for a long time,


00:11:21.200 --> 00:11:24.320
but sometimes you're dependent on a different piece


00:11:24.320 --> 00:11:26.720
of software that you're not one of the maintainers,


00:11:26.720 --> 00:11:29.600
in which case, what do you do with the failing test?


00:11:29.600 --> 00:11:32.000
One of the things you can do is you can X fail it


00:11:32.000 --> 00:11:37.000
and link it to a defect report so you can keep watch of it.


00:11:37.000 --> 00:11:41.880
But yeah, having a way to just mark different tests


00:11:41.880 --> 00:11:44.120
with the same thing, it's pretty cool.


00:11:44.120 --> 00:11:46.600
And then this really kind of relates


00:11:46.600 --> 00:11:49.000
to really a lot of things.


00:11:49.000 --> 00:11:51.600
There's a lot of places where we use long,


00:11:51.600 --> 00:11:56.600
long complex decorators that you can just assign to a variable and then use it later.


00:11:56.600 --> 00:11:59.100
>> Yeah, to put this decorator on a test function,


00:11:59.100 --> 00:12:02.960
you specify a whole bunch of conditionals around the version,


00:12:02.960 --> 00:12:05.040
and then the reason is a big long string.


00:12:05.040 --> 00:12:07.960
If that's affecting 10 tests,


00:12:07.960 --> 00:12:10.680
you put that on 10 tests, it's all over the place.


00:12:10.680 --> 00:12:14.040
One of the things that you hear from people sometimes like,


00:12:14.040 --> 00:12:16.720
well, I don't like unit testing because it's hard to maintain.


00:12:16.720 --> 00:12:18.800
I find that when people say that a lot,


00:12:18.800 --> 00:12:23.160
they kind of go into this mode where,


00:12:23.160 --> 00:12:24.400
when they're writing test code,


00:12:24.400 --> 00:12:27.700
they forget about things like trying to isolate,


00:12:27.700 --> 00:12:28.920
change to one place,


00:12:28.920 --> 00:12:31.500
and you would never write the same code 10 times


00:12:31.500 --> 00:12:33.000
in a real part of your app.


00:12:33.000 --> 00:12:36.720
Why should you write it 10 times duplicate in a test?


00:12:36.720 --> 00:12:37.680
Well, it's hard to maintain.


00:12:37.680 --> 00:12:38.800
Well, it'd be hard to maintain


00:12:38.800 --> 00:12:40.720
if you did that in your regular code too.


00:12:40.720 --> 00:12:42.840
You don't do it there, so don't do it here.


00:12:42.840 --> 00:12:45.520
This is a cool technique to accomplish that, yeah.


00:12:45.520 --> 00:12:46.920
- Yeah, definitely.


00:12:46.920 --> 00:12:51.580
>> This part of it, it's also great because it's consistent.


00:12:51.580 --> 00:12:57.140
It'd be terrible if you were referencing this issue in three different places,


00:12:57.140 --> 00:13:04.220
but only sometimes including the link and having some consistencies good.


00:13:04.220 --> 00:13:07.440
There was some concerns,


00:13:07.440 --> 00:13:13.060
Larry Hastings put up a concern about possibly not doing this for code


00:13:13.060 --> 00:13:18.060
that generates a single use object,


00:13:18.060 --> 00:13:20.880
like a iterator or something like that.


00:13:20.880 --> 00:13:23.720
But just don't do that.


00:13:23.720 --> 00:13:26.580
But Larry has a workaround.


00:13:26.580 --> 00:13:27.680
You can do it a different way


00:13:27.680 --> 00:13:31.160
if you have something that acts like that.


00:13:31.160 --> 00:13:32.440
- I see, interesting, yeah.


00:13:32.440 --> 00:13:35.200
There's a lot of turtles all the way down,


00:13:35.200 --> 00:13:37.840
like decorators of functions that return functions.


00:13:37.840 --> 00:13:40.080
And so what we do is wrap that in a function


00:13:40.080 --> 00:13:42.880
to alleviate the capture, the closure.


00:13:42.880 --> 00:13:44.040
- Yeah, it's fun. - Yeah.


00:13:44.040 --> 00:13:45.100
But anyway.


00:13:45.100 --> 00:13:46.880
So. - Cool.


00:13:46.880 --> 00:13:49.600
Excellent stuff, yeah.


00:13:49.600 --> 00:13:51.800
Next up, our sponsor. - Yeah.


00:13:51.800 --> 00:13:52.880
We have a sponsor.


00:13:52.880 --> 00:13:56.360
Our sponsor this week is Microsoft for Startups,


00:13:56.360 --> 00:13:57.680
a founders hub.


00:13:57.680 --> 00:14:00.800
So Microsoft for Startups founders hub provides all founders


00:14:00.800 --> 00:14:02.920
at any stage with free resources


00:14:02.920 --> 00:14:05.160
to help solve startup challenges.


00:14:05.160 --> 00:14:07.360
The platform provides technology benefits,


00:14:07.360 --> 00:14:10.960
access to expert guidance and skilled resources,


00:14:10.960 --> 00:14:12.680
mentorship, networking connections,


00:14:12.680 --> 00:14:13.940
and a whole bunch more.


00:14:13.940 --> 00:14:15.820
And unlike others in the industry,


00:14:15.820 --> 00:14:17.500
Microsoft for Startup Founders Hubs


00:14:17.500 --> 00:14:20.260
does not require the startup to be investor backed


00:14:20.260 --> 00:14:22.260
or third-party validated


00:14:22.260 --> 00:14:27.020
or able to relocate to San Francisco for a short time.


00:14:27.020 --> 00:14:29.060
So Founders Hub is truly open to all.


00:14:29.060 --> 00:14:29.880
So what do you get?


00:14:29.880 --> 00:14:32.940
You get free access to GitHub and Microsoft Cloud


00:14:32.940 --> 00:14:35.940
with the ability to unlock credits over time.


00:14:35.940 --> 00:14:38.900
They've also partnered with other companies like OpenAI


00:14:38.900 --> 00:14:41.820
to provide services and discounts.


00:14:41.820 --> 00:14:46.180
And Microsoft, through the Microsoft for Startup Founders Hub,


00:14:46.180 --> 00:14:49.320
becoming a founder is no longer about who you know,


00:14:49.320 --> 00:14:51.420
you'll have access to their mentorship network,


00:14:51.420 --> 00:14:53.940
giving you access to a pool of hundreds of mentors


00:14:53.940 --> 00:14:55.980
across a range of disciplines,


00:14:55.980 --> 00:14:58.580
across areas like idea validation, fundraising,


00:14:58.580 --> 00:15:00.700
management, coaching, sales, marketing,


00:15:00.700 --> 00:15:03.100
maybe even testing, who knows?


00:15:03.100 --> 00:15:04.900
You'll be able to book a one-on-one meeting


00:15:04.900 --> 00:15:06.060
with the mentors,


00:15:06.060 --> 00:15:08.980
many of whom are former founders themselves.


00:15:08.980 --> 00:15:10.900
So make your ideas a reality today


00:15:10.900 --> 00:15:12.580
with the critical support you'll get


00:15:12.580 --> 00:15:15.260
from Microsoft for Startups Founders Hub.


00:15:15.260 --> 00:15:17.240
And to join or just check it out,


00:15:17.240 --> 00:15:22.040
visit pythonbytes.fm/foundershub2022.


00:15:22.040 --> 00:15:23.420
The link is in the show notes.


00:15:23.420 --> 00:15:26.460
And I know you can find this stuff on your own


00:15:26.460 --> 00:15:27.740
with Google or something,


00:15:27.740 --> 00:15:30.620
but if you go through our link,


00:15:30.620 --> 00:15:33.380
it helps them know that you heard about them here.


00:15:33.380 --> 00:15:34.740
So thanks.


00:15:34.740 --> 00:15:37.140
- Yeah, thanks Microsoft for supporting the show.


00:15:37.140 --> 00:15:38.720
Brian, before we move on,


00:15:38.720 --> 00:15:40.700
audience feedback from Henry Schreiner.


00:15:40.700 --> 00:15:43.420
For that exact example, talking about pytest and decorators,


00:15:43.420 --> 00:15:46.060
I'm not fond of making the test directory importable


00:15:46.060 --> 00:15:47.540
unless I have to.


00:15:47.540 --> 00:15:49.100
A mark might be better.


00:15:49.100 --> 00:15:49.940
What do you think?


00:15:49.940 --> 00:15:51.260
- A mark might be better?


00:15:51.260 --> 00:15:52.580
I mean, they are marks.


00:15:52.580 --> 00:15:55.020
So the marks are decorators.


00:15:55.020 --> 00:15:56.260
- Yeah, okay, cool.


00:15:56.260 --> 00:15:59.180
What is next?


00:15:59.180 --> 00:16:02.960
Another continuation of my theme here.


00:16:02.960 --> 00:16:05.580
So Mark Madsen sent over a recommendation


00:16:05.580 --> 00:16:10.180
to talk about this, unrelated to the previous announcement,


00:16:10.180 --> 00:16:13.060
only in timing or origin.


00:16:13.060 --> 00:16:16.300
So Panel, people probably have heard of HoloViz


00:16:16.300 --> 00:16:19.220
and Panel is related to that project.


00:16:19.220 --> 00:16:22.060
It's an open source Python library.


00:16:22.060 --> 00:16:24.320
It lets you create custom interactive web apps


00:16:24.320 --> 00:16:28.460
and dashboards by connecting widgets, plots, images.


00:16:28.460 --> 00:16:30.420
So people have heard of Streamlit,


00:16:30.420 --> 00:16:34.380
they've heard of H2O Wave, they've heard of Plotly Dash.


00:16:34.380 --> 00:16:36.040
It's like in that category, right?


00:16:36.040 --> 00:16:39.740
So you can put together a lot of interactive fun pieces.


00:16:39.740 --> 00:16:44.100
So for example, here, if you go to the main website for panel,


00:16:44.100 --> 00:16:45.600
you can see that there's this graph.


00:16:45.600 --> 00:16:47.220
As you hover over it, it's very interactive,


00:16:47.220 --> 00:16:48.880
but you also have widgets to let you


00:16:48.880 --> 00:16:53.880
re-evaluate how you compare all these things and just play with it live.


00:16:53.880 --> 00:16:56.660
Kind of like it's a notebook, but it's not. That's neat, right?


00:16:56.660 --> 00:16:57.380
>> Yeah.


00:16:57.380 --> 00:17:02.100
>> So traditionally, this has run in Jupyter Notebooks,


00:17:02.100 --> 00:17:06.500
or you can run it on the Flask backend type of thing.


00:17:06.500 --> 00:17:07.860
You can host it on your own server.


00:17:07.860 --> 00:17:09.420
The news is not that.


00:17:09.420 --> 00:17:10.540
This has been around for a while.


00:17:10.540 --> 00:17:15.540
The news is that Hanel now comes to Wasm via Pyodide


00:17:15.540 --> 00:17:19.620
and has PyScript integration.


00:17:19.620 --> 00:17:20.620
That's pretty awesome.


00:17:20.620 --> 00:17:21.740
- That is pretty cool.


00:17:21.740 --> 00:17:23.120
- So in order to host it before,


00:17:23.120 --> 00:17:25.420
you have to either have a running notebook server


00:17:25.420 --> 00:17:27.620
or you had to set up your own separate web server


00:17:27.620 --> 00:17:29.860
and maintain that thing and all that goes with.


00:17:29.860 --> 00:17:33.740
And now you can just put a little py-config in there


00:17:33.740 --> 00:17:36.020
and boom, when they interact with your data


00:17:36.020 --> 00:17:38.340
and they run it, it just happens client side.


00:17:38.340 --> 00:17:39.700
No servers needed.


00:17:39.700 --> 00:17:42.360
So let's talk about some of the things here.


00:17:42.360 --> 00:17:45.080
You can automatically convert panel applications


00:17:45.080 --> 00:17:48.960
to a Pyodide version, a couple of flavors,


00:17:48.960 --> 00:17:50.440
reasons I'll explain in a minute,


00:17:50.440 --> 00:17:53.880
or you can convert to a PyScript based app,


00:17:53.880 --> 00:17:55.000
which is pretty epic.


00:17:55.000 --> 00:17:57.920
So like you could embed a panel


00:17:57.920 --> 00:18:00.120
inside your Sphinx documentation,


00:18:00.120 --> 00:18:02.920
just as HTML, which is pretty nuts.


00:18:02.920 --> 00:18:04.800
So there's this convert command,


00:18:04.800 --> 00:18:07.080
panel space convert on the CLI,


00:18:07.080 --> 00:18:09.800
and you can tell it the two format


00:18:09.800 --> 00:18:14.760
from your regular panel code to convert it to a Pyodide.


00:18:14.760 --> 00:18:19.400
This one is good if you want to have a single HTML file


00:18:19.400 --> 00:18:22.680
that you say, here's my HTML file, off it goes.


00:18:22.680 --> 00:18:23.920
It's just no dependencies.


00:18:23.920 --> 00:18:24.840
And then it runs there.


00:18:24.840 --> 00:18:28.560
That's not as good as creating a Pyodide worker,


00:18:28.560 --> 00:18:31.360
which creates a JavaScript and HTML file


00:18:31.360 --> 00:18:34.320
that you got to serve over more of a server,


00:18:34.320 --> 00:18:36.640
or you can even output a PyScripts version


00:18:36.640 --> 00:18:38.940
where you can write additional PyScript code.


00:18:38.940 --> 00:18:40.080
It's pretty epic.


00:18:40.080 --> 00:18:42.120
And here you can see a little example.


00:18:42.120 --> 00:18:47.120
This looks like standard XGBoost SKLearn code right here.


00:18:47.120 --> 00:18:48.720
That does all its things.


00:18:48.720 --> 00:18:51.620
Except for the end, you just say pn.column,


00:18:51.620 --> 00:18:55.600
and here's your output right there.


00:18:55.600 --> 00:18:57.780
And you put your little pipeline you created


00:18:57.780 --> 00:19:01.320
and maybe a head of a data frame to show up,


00:19:01.320 --> 00:19:02.720
and there it goes.


00:19:02.720 --> 00:19:03.840
So in order to run this,


00:19:03.840 --> 00:19:06.320
you would say panel convert the script


00:19:06.320 --> 00:19:09.440
to a Pyodide worker, output Pyodide.


00:19:09.440 --> 00:19:11.280
Then you just run a server locally


00:19:11.280 --> 00:19:13.740
so that you can get to it and can pull in the JavaScript,


00:19:13.740 --> 00:19:16.000
open it up and you get something that looks like this.


00:19:16.000 --> 00:19:17.400
That's super interactive.


00:19:17.400 --> 00:19:19.620
There you have machine learning in the browser.


00:19:19.620 --> 00:19:20.460
That simple.


00:19:20.460 --> 00:19:21.380
- That's pretty cool.


00:19:21.380 --> 00:19:24.500
- The browsers, JavaScript will take over the world.


00:19:24.500 --> 00:19:27.300
It'll like get smart and then take off.


00:19:27.300 --> 00:19:30.640
So a couple of cool tips and tricks they recommend


00:19:30.640 --> 00:19:32.320
is you can do --auto reload.


00:19:32.320 --> 00:19:34.280
So if you make changes to the file,


00:19:34.280 --> 00:19:35.880
it'll auto reload the browser.


00:19:35.880 --> 00:19:37.440
So just as you edit,


00:19:37.440 --> 00:19:41.280
you can also add a panel.convert --watch.


00:19:41.280 --> 00:19:43.240
So if the source files change,


00:19:43.240 --> 00:19:45.600
it'll regenerate the script


00:19:45.600 --> 00:19:46.960
and then the script will get reloaded.


00:19:46.960 --> 00:19:49.080
So like you can chain those together, I believe.


00:19:49.080 --> 00:19:51.840
Then there's a section on formats that actually describes


00:19:51.840 --> 00:19:55.480
what is the point of the different outputs


00:19:55.480 --> 00:19:57.720
like PyDiver's PyDiverWorker.


00:19:57.720 --> 00:20:00.160
So the worker one says it generates an HTML file


00:20:00.160 --> 00:20:01.840
and JavaScript that runs better.


00:20:01.840 --> 00:20:03.520
this is the most, in a separate thread,


00:20:03.520 --> 00:20:05.160
this is the most performant option,


00:20:05.160 --> 00:20:06.880
but it has to be running out of a server


00:20:06.880 --> 00:20:08.080
instead of just a file.


00:20:08.080 --> 00:20:12.920
Worth noting here, PyScript generates an HTML file


00:20:12.920 --> 00:20:15.440
leveraging PyScript, produces standalone HTML files


00:20:15.440 --> 00:20:20.040
containing pyenv and PyScript tags with the dependencies.


00:20:20.040 --> 00:20:23.940
It's basically a PyScript variant of the Pyodide one.


00:20:23.940 --> 00:20:24.780
Well, guess what?


00:20:24.780 --> 00:20:26.880
This might need a little update, coming soon.


00:20:26.880 --> 00:20:30.760
Py-DENV is not there anymore, so they can check that out.


00:20:30.760 --> 00:20:33.200
I'm sure they're on top of it.


00:20:33.200 --> 00:20:34.040
- Yeah.


00:20:34.040 --> 00:20:36.280
- Final thing to note here that's pretty dope


00:20:36.280 --> 00:20:38.120
is progressive web apps.


00:20:38.120 --> 00:20:42.380
So this comes with a --PWA option,


00:20:42.380 --> 00:20:44.060
which turns your,


00:20:44.060 --> 00:20:45.860
I'm pretty sure this is gonna require


00:20:45.860 --> 00:20:48.280
the PowerDyed worker variant,


00:20:48.280 --> 00:20:49.640
'cause you need these worker things


00:20:49.640 --> 00:20:51.800
for progressive web apps.


00:20:51.800 --> 00:20:54.000
But this means that you can install


00:20:54.000 --> 00:20:58.340
your app into say an iPad


00:20:58.340 --> 00:21:00.020
or install it like a desktop app


00:21:00.020 --> 00:21:02.820
and run it with cached offline data.


00:21:02.820 --> 00:21:06.420
So for example, let's see if I go to YouTube here.


00:21:06.420 --> 00:21:08.420
I signed in, no.


00:21:08.420 --> 00:21:11.900
Good, so like in Vivaldi, I can right click on this


00:21:11.900 --> 00:21:13.740
and it'll say, install YouTube there.


00:21:13.740 --> 00:21:16.260
So if you did that option for your panel app,


00:21:16.260 --> 00:21:18.740
you could right click and say, install panel.


00:21:18.740 --> 00:21:20.240
And you might think, oh, well, that's silly.


00:21:20.240 --> 00:21:21.580
Like who cares about that?


00:21:21.580 --> 00:21:24.380
Let's see if this, this let me do it though here.


00:21:24.380 --> 00:21:25.220
Oh, this is live.


00:21:25.220 --> 00:21:27.460
If you go to a lot of these,


00:21:27.460 --> 00:21:29.660
just need some video, I don't really care where it is.


00:21:29.660 --> 00:21:32.880
Um, a lot of these you can come in and actually click download.


00:21:32.880 --> 00:21:35.860
I guess you got to be signed in, but if, if you're like a premium account,


00:21:35.860 --> 00:21:40.940
or you can click download and that's only possible for YouTube installed as a PWA.


00:21:40.940 --> 00:21:43.580
Cause I think a lot of people feel like, Oh, it just gives me an icon on my


00:21:43.580 --> 00:21:45.980
homepage, but like, there's actually different behaviors.


00:21:45.980 --> 00:21:50.860
So you can get like offline videos on the PWA YouTube, whereas the web one,


00:21:50.860 --> 00:21:52.280
you can't and so on.


00:21:52.280 --> 00:21:55.300
So anyway, that's the kind of benefits you would get if you would do your


00:21:55.300 --> 00:21:58.140
panels at PWA, which is just a command line option.


00:21:58.140 --> 00:21:58.900
Interesting.


00:21:58.900 --> 00:21:59.460
Cool.


00:21:59.540 --> 00:22:01.780
Anyway, people check it out if they're interested


00:22:01.780 --> 00:22:04.540
in building dashboards, they're interested in PyScript


00:22:04.540 --> 00:22:06.540
and running in the browser using WebAssembly,


00:22:06.540 --> 00:22:08.380
here's a pretty awesome option.


00:22:08.380 --> 00:22:09.860
Thanks, Mark, for sending this in.


00:22:09.860 --> 00:22:10.900
- Yeah, thanks a lot.


00:22:10.900 --> 00:22:16.780
Did you know that Python 3.11 is coming right up?


00:22:16.780 --> 00:22:18.540
- It's gotta be soon, it's October.


00:22:18.540 --> 00:22:20.540
There's not that much October left.


00:22:20.540 --> 00:22:23.820
- Yeah, but it was 3.8 when we got the Walrus operator.


00:22:23.820 --> 00:22:25.940
Do you realize it's been that long?


00:22:25.940 --> 00:22:28.220
- It seems like the Walrus operator's still new,


00:22:28.220 --> 00:22:30.280
but that's a long time, yeah.


00:22:30.280 --> 00:22:31.120
- Yeah, so--


00:22:31.120 --> 00:22:35.800
- So an adolescent walrus now, not even a baby walrus.


00:22:35.800 --> 00:22:37.580
- Yeah, exactly.


00:22:37.580 --> 00:22:41.060
So I think it's time for people to embrace the walrus.


00:22:41.060 --> 00:22:42.900
And so one of the things you can do


00:22:42.900 --> 00:22:47.620
is you can install Marco Garelli's AutoWalrus


00:22:47.620 --> 00:22:50.060
and it'll convert your code for you


00:22:50.060 --> 00:22:53.300
in places where you really should use the walrus operator.


00:22:53.300 --> 00:22:58.180
So, and this is good if you're supporting 3.8 and above


00:22:58.180 --> 00:23:02.140
And golly, I hope you're already up to 3.9 or 3.10 by now.


00:23:02.140 --> 00:23:06.580
So there's this auto walrus, I checked it out.


00:23:06.580 --> 00:23:08.140
It's pretty simple.


00:23:08.140 --> 00:23:12.980
It can run as a pre-commit hook too, which is nice.


00:23:12.980 --> 00:23:15.700
But you can run it on the command line,


00:23:15.700 --> 00:23:17.300
which that's what I did when I tried it.


00:23:17.300 --> 00:23:19.380
You pip install auto-walrus.


00:23:19.380 --> 00:23:23.000
So it's one word, but with a dash in the middle.


00:23:23.000 --> 00:23:25.320
And then you have this application,


00:23:25.320 --> 00:23:26.540
you can run it on a file.


00:23:26.540 --> 00:23:29.140
And like we've said, you can run it


00:23:29.140 --> 00:23:30.620
as a pre-commit hook as well,


00:23:30.620 --> 00:23:33.140
and it'll run on everything, but you can,


00:23:33.140 --> 00:23:34.180
and it just converts stuff.


00:23:34.180 --> 00:23:36.340
So if you have things like,


00:23:36.340 --> 00:23:38.860
here's a simple example of n equals 10,


00:23:38.860 --> 00:23:42.500
and then if n is greater than three, do something.


00:23:42.500 --> 00:23:46.380
And that converts, the auto-while-res will convert that


00:23:46.380 --> 00:23:50.300
to the while-res operator of if, you know,


00:23:50.300 --> 00:23:53.900
n colon equal 10 is greater than three.


00:23:53.900 --> 00:23:55.380
>> Nice.


00:23:55.380 --> 00:23:59.020
>> I like this being separate from other tools because some people


00:23:59.020 --> 00:24:04.220
just honestly haven't came on board with this already.


00:24:04.220 --> 00:24:07.040
Embrace the walrus sort of thing.


00:24:07.040 --> 00:24:11.540
But it's a fun way to just try it out on your code and do a diff,


00:24:11.540 --> 00:24:14.820
get diff and see what it changed and maybe you like it.


00:24:14.820 --> 00:24:18.980
Maybe it's a thing to do as a group code review thing


00:24:18.980 --> 00:24:23.060
to just talk to your team and find out if you want to change it this way or not.


00:24:23.060 --> 00:24:24.060
Yeah.


00:24:24.060 --> 00:24:25.900
And then this reminded me of something.


00:24:25.900 --> 00:24:28.500
I'm like, we had something like this before, right?


00:24:28.500 --> 00:24:32.660
And back in episode 82.


00:24:32.660 --> 00:24:35.660
Wow, that was in 2018.


00:24:35.660 --> 00:24:41.020
We talked about Anthony Sotile's PyUpgrade.


00:24:41.020 --> 00:24:44.020
So, and that's, it's been a while.


00:24:44.020 --> 00:24:45.420
So, that's like four years ago.


00:24:45.420 --> 00:24:47.420
So, I went and took a look again.


00:24:47.420 --> 00:24:51.020
And I would like people to try to check out PyUpgrade too.


00:24:51.020 --> 00:24:56.700
Because there's a whole it's moved on. So it's not just we recommended PyUpgrade for things like


00:24:56.700 --> 00:25:02.140
upgrading to from two to three sort of thing. >> Was that back in the controversial legacy


00:25:02.140 --> 00:25:08.700
Python days? >> Yeah. So there's and there's always times to go and revisit old scripts and


00:25:08.700 --> 00:25:14.140
old applications that you're still maintaining and going, well, we don't really want to support


00:25:14.140 --> 00:25:18.780
the old Python, but our code serves looks like the old Python. So let's take a look at some of


00:25:18.780 --> 00:25:22.740
of this stuff. And it'll do things like, you know, the set


00:25:22.740 --> 00:25:27.180
literal, some of the old some of the old things of and, and


00:25:27.180 --> 00:25:31.500
doing comprehensions for you and better, the comprehensions


00:25:31.500 --> 00:25:35.220
are cleaner looking. And then but there's also like different


00:25:35.220 --> 00:25:37.780
print styles. But one of the things I wanted to point out is


00:25:37.780 --> 00:25:40.740
if you go to the readme, you got to scroll all the way down or at


00:25:40.740 --> 00:25:44.060
least halfway down, and you get things like the three six plus.


00:25:44.060 --> 00:25:48.060
So there's these plus options. So you can say if you're running


00:25:48.060 --> 00:25:50.400
and three, six or above run that.


00:25:50.400 --> 00:25:52.100
But you also want to do like,


00:25:52.100 --> 00:25:55.020
let's just go all the way down to like three, seven plus.


00:25:55.020 --> 00:25:59.500
And there was a kind of a new way to run sub process


00:25:59.500 --> 00:26:01.280
for instance, but you're, I mean,


00:26:01.280 --> 00:26:02.800
and it just finds some of these things


00:26:02.800 --> 00:26:04.220
and just changes it for you.


00:26:04.220 --> 00:26:05.200
So it's kind of cool.


00:26:05.200 --> 00:26:07.700
And some of the things you may not have remembered


00:26:07.700 --> 00:26:12.780
the three in three, eight plus the LRU cache.


00:26:12.780 --> 00:26:15.460
You used to have to do the LRU cache


00:26:15.460 --> 00:26:18.580
call it as a function for your decorator,


00:26:18.580 --> 00:26:20.780
but now you don't have to do the params.


00:26:20.780 --> 00:26:24.660
Just some cleanup like that. It's just nice.


00:26:24.660 --> 00:26:27.660
I try to run this every once in a while.


00:26:27.660 --> 00:26:32.900
I guess public service announcement for this cool little project.


00:26:32.900 --> 00:26:34.780
>> That is a cool project and going through


00:26:34.780 --> 00:26:38.380
this huge long read me and looking at it as it gets later and later,


00:26:38.380 --> 00:26:40.340
Python versions, it's like,


00:26:40.340 --> 00:26:42.140
here are just a bunch of examples of how


00:26:42.140 --> 00:26:43.980
Python has changed over the last few years.


00:26:43.980 --> 00:26:48.780
Yeah, who need it has a like 604 type rewrites.


00:26:48.780 --> 00:26:53.580
It'll rewrite Union, the Union operator to the bar operator.


00:26:53.580 --> 00:26:55.180
That's in 310 plus.


00:26:55.180 --> 00:26:56.080
That's nice.


00:26:56.080 --> 00:26:56.580
Yeah.


00:26:56.580 --> 00:26:59.280
Well, we got 311 plus coming soon.


00:26:59.280 --> 00:27:00.680
Yeah.


00:27:00.680 --> 00:27:01.780
Yeah, that'll be fun.


00:27:01.780 --> 00:27:02.980
So awesome.


00:27:02.980 --> 00:27:04.780
Well, that's our items, right?


00:27:04.780 --> 00:27:05.480
Got any extras?


00:27:05.480 --> 00:27:11.080
You know, I was going to have an extra but I'm going to save that for later.


00:27:11.080 --> 00:27:13.080
So no, I don't do you have any extras?


00:27:13.080 --> 00:27:16.040
- No extras, but I have a joke.


00:27:16.040 --> 00:27:18.280
I do a quick follow up to this though.


00:27:18.280 --> 00:27:20.720
This is a hint of what's coming next week.


00:27:20.720 --> 00:27:22.520
I'm gonna talk, I think it's next week


00:27:22.520 --> 00:27:23.360
I'm gonna cover this.


00:27:23.360 --> 00:27:25.200
Refurb, have you seen Refurb?


00:27:25.200 --> 00:27:26.040
- I don't think so.


00:27:26.040 --> 00:27:27.920
- Refurb is a similar one that like,


00:27:27.920 --> 00:27:29.480
we'll go through and give you recommendations


00:27:29.480 --> 00:27:31.840
of here's the most modern way to do your thing.


00:27:31.840 --> 00:27:34.040
So like, if you said, you know,


00:27:34.040 --> 00:27:36.600
if value is in bracket XYZ,


00:27:36.600 --> 00:27:38.240
it's like, you know, it's a little less efficient


00:27:38.240 --> 00:27:41.320
than like why make a mutable list


00:27:41.320 --> 00:27:42.440
when you could make it a tuple.


00:27:42.440 --> 00:27:45.920
It's a little more efficient just to create the tuples too.


00:27:45.920 --> 00:27:46.760
- Nice.


00:27:46.760 --> 00:27:48.240
- If value is in parenthesis,


00:27:48.240 --> 00:27:49.640
it'll suggest you change the parenthesis


00:27:49.640 --> 00:27:53.760
or suggest using some pathlib operations


00:27:53.760 --> 00:27:55.680
instead of with open operations.


00:27:55.680 --> 00:27:57.600
Like instead of a context manager with open,


00:27:57.600 --> 00:27:58.700
do a bunch of stuff,


00:27:58.700 --> 00:28:01.240
you can just do path of thing dot retext.


00:28:01.240 --> 00:28:02.800
You don't need to do the context manager,


00:28:02.800 --> 00:28:04.360
just bam, there it is.


00:28:04.360 --> 00:28:06.120
A bunch of cool stuff like that.


00:28:06.120 --> 00:28:07.640
So anyway, one more.


00:28:07.640 --> 00:28:08.960
And then also Flint.


00:28:08.960 --> 00:28:10.000
I've talked about Flint a lot.


00:28:10.000 --> 00:28:11.000
I love Flint.


00:28:11.000 --> 00:28:12.120
Super straightforward.


00:28:12.120 --> 00:28:15.640
It brings one of the most beloved things you can do


00:28:15.640 --> 00:28:18.760
for upgrading your Python is convert all your variations


00:28:18.760 --> 00:28:20.640
of string formatting to f-strings


00:28:20.640 --> 00:28:23.080
just across a whole directory of Python files.


00:28:23.080 --> 00:28:23.920
- Cool.


00:28:23.920 --> 00:28:25.240
- A lot of different things to be running together,


00:28:25.240 --> 00:28:27.200
but are you ready for our joke?


00:28:27.200 --> 00:28:28.240
- I am.


00:28:28.240 --> 00:28:31.960
- You had the comment about bring back the walrus,


00:28:31.960 --> 00:28:35.800
or I feel like that could be a cool T-shirt, right?


00:28:35.800 --> 00:28:36.640
- Yeah.


00:28:36.640 --> 00:28:37.460
- Yeah, absolutely.


00:28:37.460 --> 00:28:39.520
So I came across this place a little while ago.


00:28:39.520 --> 00:28:41.780
I don't know if you have any particular one


00:28:41.780 --> 00:28:47.060
recommend here, but this place that has like funny, geeky t-shirts.


00:28:47.060 --> 00:28:51.340
So I thought I'd just pull a couple of these up and see what you think about them.


00:28:51.340 --> 00:28:53.220
So some of them are good.


00:28:53.220 --> 00:28:54.740
I like the first one, the Mordor.


00:28:54.740 --> 00:28:57.980
The Mordor fun run.


00:28:57.980 --> 00:29:01.340
One does not simply walk into middle earth.


00:29:01.340 --> 00:29:04.700
You have a, some for our data science friends out there.


00:29:04.700 --> 00:29:08.020
It has a graph of two things that are very similar.


00:29:08.020 --> 00:29:10.260
One is a shark attacks.


00:29:10.300 --> 00:29:12.160
The other is ice cream cone sales,


00:29:12.160 --> 00:29:15.180
and it says correlation does not imply causation.


00:29:15.180 --> 00:29:17.340
Apparently ice cream sales and shark attacks


00:29:17.340 --> 00:29:20.060
are closely correlated 'cause it's warm,


00:29:20.060 --> 00:29:21.540
you go in the water.


00:29:21.540 --> 00:29:23.540
It probably doesn't cause shark attacks.


00:29:23.540 --> 00:29:25.420
- It might.


00:29:25.420 --> 00:29:26.820
- It might.


00:29:26.820 --> 00:29:29.420
If you are more into math,


00:29:29.420 --> 00:29:32.060
you have the distance raptor divided by time raptor


00:29:32.060 --> 00:29:33.260
is the velocity raptor.


00:29:33.260 --> 00:29:38.300
But there's some really good programming ones


00:29:38.300 --> 00:29:39.180
in here as well.


00:29:39.180 --> 00:29:41.220
Like this one, for example, check this out.


00:29:41.220 --> 00:29:43.780
Go outside, the graphics are amazing.


00:29:43.780 --> 00:29:45.100
And the picture of the shirt is like


00:29:45.100 --> 00:29:47.680
a super low bit rate, like graphics.


00:29:47.680 --> 00:29:49.940
(laughing)


00:29:49.940 --> 00:29:52.540
Here's a good one.


00:29:52.540 --> 00:29:55.480
Some lab person pouring like beakers


00:29:55.480 --> 00:29:57.540
of clearly poisonous green stuff.


00:29:57.540 --> 00:29:59.840
It says, forget lab safety, I want superpowers.


00:29:59.840 --> 00:30:04.460
Oh boy, what about the, what do you think of this one,


00:30:04.460 --> 00:30:06.820
Brian, here, the forecast for Alderaan?


00:30:06.820 --> 00:30:13.700
So remember Alderaan is the home of Princess Leia that was blown up by the Death Star in


00:30:13.700 --> 00:30:14.700
Star Wars.


00:30:14.700 --> 00:30:20.940
And it says five day forecast Alderaan, Monday 72 and cloudy, Tuesday 74, Wednesday 15,000


00:30:20.940 --> 00:30:23.340
degrees, no Thursday or Friday.


00:30:23.340 --> 00:30:26.820
It's kind of mean, but it's also kind of awesome.


00:30:26.820 --> 00:30:27.820
Yeah.


00:30:27.820 --> 00:30:28.820
Yeah.


00:30:28.820 --> 00:30:29.820
This is me.


00:30:29.820 --> 00:30:33.540
Let me see if I can find one more.


00:30:33.540 --> 00:30:35.140
One more programming one.


00:30:35.140 --> 00:30:36.140
Oh yeah.


00:30:36.140 --> 00:30:40.260
Let's see. Here's some good ones.


00:30:40.260 --> 00:30:41.960
One, it has a floppy disk.


00:30:41.960 --> 00:30:45.420
It says, "Kids today have no idea what this is."


00:30:45.420 --> 00:30:48.340
Then this one here, Brian, this is the last one.


00:30:48.340 --> 00:30:52.460
It's somebody holding a CD going into a drive and it just says,


00:30:52.460 --> 00:30:55.400
"Never forget the CDs."


00:30:55.400 --> 00:30:57.940
>> Yeah. CD drive.


00:30:57.940 --> 00:31:01.760
I still love that old joke of a person calls into


00:31:01.760 --> 00:31:04.500
IT help desk and says,


00:31:04.500 --> 00:31:07.800
I need I need some help because my cup holders broken.


00:31:07.800 --> 00:31:11.700
Yeah, just went in and spilled his drink all over me.


00:31:11.700 --> 00:31:13.800
Come on man, you guys gotta get this.


00:31:13.800 --> 00:31:14.700
They fix.


00:31:14.700 --> 00:31:19.500
Yeah, so you could spend a lot of time on this page.


00:31:19.500 --> 00:31:22.100
I'm not necessarily suggesting you get a shirt here or anything,


00:31:22.100 --> 00:31:23.200
but it's pretty.


00:31:23.200 --> 00:31:24.100
It's pretty awesome.


00:31:24.100 --> 00:31:25.700
What makes me miss think geek?


00:31:25.700 --> 00:31:27.500
I think it should have never.


00:31:27.500 --> 00:31:28.400
Yes, hold it.


00:31:28.400 --> 00:31:32.500
But we have we have other people coming up with good humorous


00:31:32.500 --> 00:31:32.900
shirts.


00:31:32.900 --> 00:31:33.700
So that's good.


00:31:33.900 --> 00:31:34.400
Yeah.


00:31:34.400 --> 00:31:35.640
Houston, we have dibs.


00:31:35.640 --> 00:31:36.840
Putting the flag on the moon.


00:31:36.840 --> 00:31:40.760
[LAUGHTER]


00:31:40.760 --> 00:31:42.640
Dibs on the moon.


00:31:42.640 --> 00:31:43.680
Got it.


00:31:43.680 --> 00:31:46.880
So a more serious--


00:31:46.880 --> 00:31:48.600
a couple quick follow up here.


00:31:48.600 --> 00:31:51.920
Marco Garelli, from the project that you talked about,


00:31:51.920 --> 00:31:54.160
the auto walrus, says, yeah, I love Pi upgrade.


00:31:54.160 --> 00:31:57.000
And Will McGugan-- hey, guys--


00:31:57.000 --> 00:32:00.960
we could use the Pi upgrade because Rich is


00:32:00.960 --> 00:32:02.240
dropping support for 3.6.


00:32:02.240 --> 00:32:03.480
So just clean it up.


00:32:03.480 --> 00:32:06.240
>> Yeah. Then I want to follow up with


00:32:06.240 --> 00:32:12.120
the first thing I was talking about, about the decorators.


00:32:12.120 --> 00:32:16.000
Henry Schreiner said, I think I got the wrong one.


00:32:16.000 --> 00:32:18.080
But for that example,


00:32:18.080 --> 00:32:20.280
I'm not fond of making the test directory


00:32:20.280 --> 00:32:21.960
importable unless I have to,


00:32:21.960 --> 00:32:24.040
a mark might be better.


00:32:24.040 --> 00:32:27.520
I guess I brushed that off too quickly.


00:32:27.520 --> 00:32:30.720
I think I still not sure how I would use this.


00:32:30.720 --> 00:32:32.560
If I were to put a bunch of these,


00:32:32.560 --> 00:32:37.000
like if I had a project wide decorators that I wanted to use.


00:32:37.000 --> 00:32:39.380
I don't know what the best way to do that would be.


00:32:39.380 --> 00:32:42.240
It might be a non-test file that I would import.


00:32:42.240 --> 00:32:45.260
I'll have to play with it. Thanks for Henry for bringing that up.


00:32:45.260 --> 00:32:47.780
I'm not quite sure how to deal with that problem.


00:32:47.780 --> 00:32:49.260
>> Indeed.


00:32:49.260 --> 00:32:51.900
>> All right. Well, should we call it a week?


00:32:51.900 --> 00:32:53.060
>> Let's call it.


00:32:53.060 --> 00:32:55.660
>> All right. Thanks everybody for showing up.


00:32:55.660 --> 00:32:56.740
We'll talk to you next week.

