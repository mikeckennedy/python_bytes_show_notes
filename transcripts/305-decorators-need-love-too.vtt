WEBVTT

00:00:00.001 --> 00:00:04.540
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.540 --> 00:00:09.160
This is episode 305, recorded October 10, 2022.

00:00:09.160 --> 00:00:10.440
And I am Brian Okken.

00:00:10.440 --> 00:00:11.460
I'm Michael Kennedy.

00:00:11.460 --> 00:00:13.780
We got a whole bunch of stuff that's great.

00:00:13.780 --> 00:00:18.280
We also want to thank Microsoft for Startups, Founders Hub, for sponsoring this episode.

00:00:18.280 --> 00:00:19.680
We'll hear more about them later.

00:00:19.680 --> 00:00:23.860
But do you want to start us off with something exciting?

00:00:23.860 --> 00:00:24.880
Let's kick it off.

00:00:24.880 --> 00:00:26.180
I have a theme this week, Brian.

00:00:26.180 --> 00:00:26.980
Okay.

00:00:26.980 --> 00:00:31.280
Before we get to it, if my voice sounds a little bit scratchy, I just want to apologize.

00:00:31.280 --> 00:00:32.700
It's not that I'm sick.

00:00:32.700 --> 00:00:35.260
It's that I was rocking out to the Scorpions last night.

00:00:35.260 --> 00:00:36.180
They were here in Portland.

00:00:36.180 --> 00:00:38.260
And even if they're 70, they still rock.

00:00:38.260 --> 00:00:38.780
It was amazing.

00:00:38.780 --> 00:00:41.300
I don't know how old they are, but they probably are up there.

00:00:41.300 --> 00:00:41.960
I don't know.

00:00:41.960 --> 00:00:44.240
Maybe being sick may have been a better excuse.

00:00:44.240 --> 00:00:45.400
Yeah, maybe.

00:00:45.400 --> 00:00:47.140
All right.

00:00:47.140 --> 00:00:49.040
I do have a theme, though, for the week.

00:00:49.040 --> 00:00:51.020
And let's kick it off with that theme.

00:00:51.020 --> 00:00:54.060
This first one, both of these are recommendations.

00:00:54.060 --> 00:00:56.480
The first one came to us from Matt Kramer.

00:00:56.720 --> 00:00:57.280
Thank you for that.

00:00:57.280 --> 00:01:03.480
And Jeff Glass, remember last time I said they announced PyScript?

00:01:03.480 --> 00:01:11.400
That is Python compiled to WebAssembly running on top of PyIodide and Wasm browser, which is amazing.

00:01:11.400 --> 00:01:14.160
So many cool things and so much potential there.

00:01:14.160 --> 00:01:16.940
I pointed out that that was released and there were some breaking changes.

00:01:16.940 --> 00:01:19.440
And it was like last minute that I got that.

00:01:19.440 --> 00:01:20.820
So I just threw it in as an extra.

00:01:21.220 --> 00:01:22.820
But now I had a chance to look at it.

00:01:22.820 --> 00:01:24.560
So there's a bunch of changes.

00:01:24.560 --> 00:01:27.480
And I just want to highlight some of the things for people.

00:01:27.480 --> 00:01:30.940
So they're using semantic versioning.

00:01:30.940 --> 00:01:33.800
And I don't fully understand this.

00:01:33.800 --> 00:01:35.420
I guess it's just like month based.

00:01:35.420 --> 00:01:35.720
Right.

00:01:35.780 --> 00:01:38.460
So it's 2022.09.1.

00:01:38.460 --> 00:01:40.240
That doesn't mean September 1st, though.

00:01:40.240 --> 00:01:41.840
It was released on September 30th.

00:01:41.840 --> 00:01:44.540
So about 11 days ago, 10 days ago.

00:01:45.040 --> 00:01:50.120
And they just reiterate this project is undergoing lots of changes.

00:01:50.120 --> 00:01:51.900
It's in its super early stages.

00:01:51.900 --> 00:01:57.900
The calendar versioning doesn't really indicate that it's like 0.1 or whatever type of level.

00:01:57.900 --> 00:01:59.500
But there's a lot of breaking changes.

00:01:59.500 --> 00:02:05.580
So if you've worked with it before, just you want to read through this and figure out where things are going.

00:02:05.580 --> 00:02:10.440
It doesn't look like anything's majorly broken and like you've got to rewrite a ton of stuff.

00:02:10.560 --> 00:02:14.980
But it also, there are parts that will stop working, but they seem pretty easy to fix.

00:02:14.980 --> 00:02:20.920
So first of all, like many Python programs, you need to express your dependencies.

00:02:20.920 --> 00:02:24.620
You would do that through a pyproject.toml or requirements.txt.

00:02:24.620 --> 00:02:28.480
Unless you're on the web or in the browser, then nope, you don't do that.

00:02:28.480 --> 00:02:32.580
Instead, what you would do is you'd use this py-env section to express.

00:02:32.580 --> 00:02:37.340
I depend on these packages, either just a URL to a wheel, a Python wheel,

00:02:37.500 --> 00:02:40.760
or something that could be pip installed using micro pip.

00:02:40.760 --> 00:02:41.600
That's gone.

00:02:41.600 --> 00:02:44.480
It's now deprecated and will be taken away.

00:02:44.480 --> 00:02:48.260
So now that's folded into the pyconfig section.

00:02:48.260 --> 00:02:51.460
And there's a way to say packages are a list of packages.

00:02:51.460 --> 00:02:54.960
And files that we're using is a list of paths.

00:02:54.960 --> 00:03:00.960
And it's in these kind of places where you indicate what Python files you might write and import.

00:03:00.960 --> 00:03:07.100
Because while you can write Python in HTML, just like JavaScript, you should do that very sparingly.

00:03:07.100 --> 00:03:10.600
And you shouldn't just write your, you know, a thousand lines of Python, like inline.

00:03:10.600 --> 00:03:11.800
That's not a great idea.

00:03:11.800 --> 00:03:18.480
So you would link over to a set of Python files that you can run one of them and import others from that.

00:03:18.480 --> 00:03:18.940
All right.

00:03:18.940 --> 00:03:22.000
So pyenv going away, folded into pyconfig.

00:03:22.000 --> 00:03:23.760
This is one of the things that's easy to fix.

00:03:23.760 --> 00:03:25.240
But like I said, will stop working.

00:03:25.680 --> 00:03:29.060
They've also changed the syntax of some events.

00:03:29.060 --> 00:03:34.980
So you might have seen people on HTML elements like a paragraph or a div or a button.

00:03:34.980 --> 00:03:43.520
It's a mouse over equals in some JavaScript function name, like a function call, either inline function or a function you've written.

00:03:43.520 --> 00:03:47.260
In PyScript, there's a py dash event.

00:03:47.260 --> 00:03:52.240
So there's a py dash mouse over and a py dash click type of thing.

00:03:52.240 --> 00:03:54.980
And in here, you can just write arbitrary Python.

00:03:55.380 --> 00:04:03.080
And unlike JavaScript, you can actually write arbitrary Python, multiline Python separated by semicolons.

00:04:03.080 --> 00:04:03.500
Look at that.

00:04:03.500 --> 00:04:05.180
Semicolons, they made it to Python.

00:04:05.180 --> 00:04:07.160
You can write arbitrary Python.

00:04:07.160 --> 00:04:08.740
It doesn't have to be a single function call.

00:04:08.740 --> 00:04:09.880
Pretty cool, right?

00:04:09.880 --> 00:04:11.100
It is pretty cool.

00:04:11.100 --> 00:04:15.640
Python's starting to turn into JavaScript that is changing all the time.

00:04:15.640 --> 00:04:16.320
Exactly.

00:04:16.320 --> 00:04:17.720
Well, that's why the breaking changes.

00:04:17.720 --> 00:04:18.340
No, just kidding.

00:04:18.340 --> 00:04:19.140
That's the new project.

00:04:19.140 --> 00:04:21.040
But don't let it become JavaScript.

00:04:22.180 --> 00:04:25.740
I'm very excited that maybe it could supplant JavaScript to some degree.

00:04:25.740 --> 00:04:28.880
There's some stuff about HTML escaping.

00:04:28.880 --> 00:04:35.740
So you could do like print a string that will show up in the browser sometimes, or you can get it to go to the console.

00:04:37.100 --> 00:04:47.220
But if you put like one is less than two, and that shows up in the browser, you know, that might get interpreted as an opening bracket instead of just a less than symbol.

00:04:47.220 --> 00:04:47.920
All right.

00:04:47.920 --> 00:04:50.240
So there's some fixes there, some stuff for logging.

00:04:50.240 --> 00:04:53.200
The ability to run multiple runtimes.

00:04:53.940 --> 00:05:02.920
So there's, when people usually do PyScript, they point at just a CDN version of PyScript, which points at a CDN version of Pyodide.

00:05:02.920 --> 00:05:12.160
But you can, and easily can do, you can like download that, customize it, and put it in your static files and run it out of there.

00:05:12.540 --> 00:05:16.120
You could possibly not even use Pyodide itself.

00:05:16.120 --> 00:05:18.280
You could use, say, like MicroPython, potentially.

00:05:18.280 --> 00:05:27.800
Or you could actually have maybe different versions of Pyodide running in different sections of your site, if you want it.

00:05:27.800 --> 00:05:30.820
So different PyScript blocks, presumably even on the same page.

00:05:30.820 --> 00:05:34.460
So a lot of flexibility about managing multiple runtimes.

00:05:34.460 --> 00:05:36.260
Let's see a few other things.

00:05:36.340 --> 00:05:39.880
There's also some major releases of Pyodide that's coming along.

00:05:39.880 --> 00:05:46.020
And because it's built on top of Pyodide or runs on top of Pyodide, PyScript does, obviously the changes there are super important.

00:05:46.020 --> 00:05:52.900
So some of the changes are that they broke, it used to be kind of like one huge namespace, and they broke that up into a bunch of pieces.

00:05:52.900 --> 00:05:54.100
So you got to know about that.

00:05:54.100 --> 00:06:06.160
But probably the most relevant for people is you used to have to do this thing where you would import from JavaScript some event and do like a proxy type thing to like hook.

00:06:06.160 --> 00:06:09.920
An event, which wasn't terrible, but it was kind of like, well, are you still doing Python?

00:06:09.920 --> 00:06:10.560
I don't know.

00:06:10.560 --> 00:06:11.800
Right.

00:06:11.800 --> 00:06:18.500
So they've written a bunch of event handlers or event sources in Pyodide FFI.wrappers.

00:06:18.500 --> 00:06:23.660
So like add event listener, remove event listener, set timeout, set interval, clear interval.

00:06:23.660 --> 00:06:32.280
And so now you can just import, say like add event listener, have a function, Python function, and then you just say add event listener on a tag on an event.

00:06:32.280 --> 00:06:33.580
And here's your Python function.

00:06:33.580 --> 00:06:34.480
That's awesome, right?

00:06:34.480 --> 00:06:35.360
That is awesome.

00:06:35.360 --> 00:06:35.820
Yeah.

00:06:35.980 --> 00:06:36.300
Yeah.

00:06:36.300 --> 00:06:44.400
So they've added these event handler sources that are straight Python and not interoperating with JavaScript more directly.

00:06:44.400 --> 00:06:49.640
There's a bunch of things behind the scenes that will make it better, like that we don't necessarily as users care about.

00:06:49.640 --> 00:06:51.840
But like in scripting is getting better.

00:06:51.840 --> 00:06:53.500
They've got a whole testing scheme.

00:06:53.500 --> 00:06:56.820
You might be interested in this, Brian, for your show.

00:06:57.080 --> 00:06:59.260
They do integration tests with Pyright.

00:06:59.260 --> 00:07:04.420
They do TypeScript tests because a lot of the interaction bits are in TypeScript.

00:07:04.420 --> 00:07:05.620
And they do that with Jest.

00:07:06.040 --> 00:07:09.700
And then Python, the Python code gets tested with pytest.

00:07:09.700 --> 00:07:11.180
That's an interesting mix, huh?

00:07:11.180 --> 00:07:14.320
I guess just point out, we said Pyright.

00:07:14.320 --> 00:07:15.080
It's PlayWrite.

00:07:16.200 --> 00:07:16.940
Yeah, I'm sorry.

00:07:16.940 --> 00:07:18.260
I'm too much on the Py right now.

00:07:18.260 --> 00:07:18.980
Yes, PlayWrite.

00:07:18.980 --> 00:07:20.060
Thank you for keeping me honest.

00:07:20.060 --> 00:07:21.020
Yeah.

00:07:21.020 --> 00:07:27.660
But I'll do a famous pull request on them to try to get that pytest case all lowercase.

00:07:27.660 --> 00:07:28.200
That'd be good.

00:07:28.780 --> 00:07:32.160
Yeah, I'm not even going to use this project until I get fixed.

00:07:32.160 --> 00:07:36.560
So some stuff on infrastructure.

00:07:36.560 --> 00:07:40.220
There's new CI things that they're working on to make it better.

00:07:40.220 --> 00:07:42.500
They're using type annotations.

00:07:42.500 --> 00:07:51.180
And they're trying to synchronize TypeScript and PyScript type annotations to kind of keep the end-to-end across JavaScript, across Python accurate.

00:07:51.180 --> 00:08:01.280
And a bunch of stuff that's coming, in particular, a lot of rethinking how async works, because JavaScript is already super asynchronous, but it just has one loop.

00:08:01.280 --> 00:08:05.140
And if you hook your async Python into that, then is it really async?

00:08:05.140 --> 00:08:07.060
It's a little bit complicated.

00:08:07.060 --> 00:08:08.360
You can check out what they said there.

00:08:08.360 --> 00:08:10.660
But otherwise, very exciting stuff.

00:08:10.660 --> 00:08:14.300
And if you're doing PyScript, definitely check this out, because it's going to affect you.

00:08:14.300 --> 00:08:15.200
Yeah, that's cool.

00:08:15.200 --> 00:08:18.060
Well, let's give your voice a little bit of a break.

00:08:18.400 --> 00:08:22.580
Yeah, I mean, too much Rocky Like a Hurricane stuff going on.

00:08:22.580 --> 00:08:23.440
Yeah.

00:08:23.440 --> 00:08:27.520
Well, I want to talk about decorators a little bit.

00:08:27.520 --> 00:08:34.400
So I was actually on a – I sat in on a Boston, the Python Boston meetup group.

00:08:34.400 --> 00:08:37.100
They're still – it's kind of neat.

00:08:37.100 --> 00:08:39.460
They're still doing online, so it's not really Boston.

00:08:39.460 --> 00:08:43.580
It's anybody can jump in and have fun there.

00:08:44.000 --> 00:08:51.320
But we're talking about pytest, and Ned Batchelder was there and talking about coverage also.

00:08:51.320 --> 00:08:54.520
And he was showing us some of the test code.

00:08:54.520 --> 00:08:59.740
It was really fun, because he was showing us some of the test code within the coverage – the

00:08:59.740 --> 00:09:02.620
test code that tests coverage by coverage.py.

00:09:03.620 --> 00:09:09.680
And he was showing some things about using decorator shortcuts.

00:09:09.680 --> 00:09:12.400
And then I was like, that's really cool.

00:09:12.400 --> 00:09:14.480
I always forget to do that.

00:09:14.480 --> 00:09:21.220
And so he wrote up this – I don't know if it's just for me, but he wrote up a blog post called decorator shortcuts.

00:09:22.300 --> 00:09:26.880
And especially – I mean, I guess for a lot of stuff, we use decorators a lot in Python now.

00:09:26.880 --> 00:09:32.780
And pytest also uses a lot of decorators.

00:09:32.780 --> 00:09:39.100
Things like pytest mark parameterize or pytest mark skip or xfail.

00:09:39.100 --> 00:09:42.800
Those are all decorators built in part of pytest.

00:09:43.040 --> 00:09:54.460
And so the thing he wanted to show us is, like, as an example, he's got some tests that have to – that are either skipped or xfailed on certain Python versions.

00:09:54.460 --> 00:10:03.060
So he's got a way to test a piece of code that only works on, say, like it doesn't work on PyPy.

00:10:03.060 --> 00:10:08.220
Or it doesn't work on, like, Python 3.8 or before or something like that.

00:10:09.440 --> 00:10:21.580
And so he has these fairly complex, like, version – like, xfail decorator sequences that he can take.

00:10:21.580 --> 00:10:25.880
And instead of saying – and let's say he's actually filed – maybe there's an issue.

00:10:25.880 --> 00:10:28.900
And he's actually filed an issue against PyPy, for instance.

00:10:28.900 --> 00:10:31.900
But his tests are still failing.

00:10:31.900 --> 00:10:39.200
He had an example where instead of just this whole big xfail blob with the environment – checking the environment version,

00:10:39.200 --> 00:10:55.540
and having a reason and a link to the defect, he just shortcutted that to just, like, a single variable name or single name that says xfail PyPy3749 as an example.

00:10:55.540 --> 00:10:56.960
Just a single thing.

00:10:56.960 --> 00:11:04.020
And then when you're using it, instead of this whole big blob, you can just write at xfail.

00:11:04.020 --> 00:11:08.860
Instead of, like, xfail – instead of saying, like, pytestMark xfail, you can have this specific xfail.

00:11:08.860 --> 00:11:11.460
And then you get the reason printout and everything.

00:11:11.460 --> 00:11:12.620
That's very clever.

00:11:12.620 --> 00:11:13.380
Yeah.

00:11:13.380 --> 00:11:21.100
Especially – I like it for this is there's – we were talking about how we don't like to leave xfails in for a long time.

00:11:21.100 --> 00:11:26.380
But sometimes you're dependent on a different piece of software that you're not one of the maintainers.

00:11:26.380 --> 00:11:29.480
In which case, what do you do with the failing test?

00:11:29.480 --> 00:11:37.640
One of the things you can do is you can xfail it and link it to a defect report so you can keep watch of it.

00:11:37.640 --> 00:11:43.860
But, yeah, having a way to just mark different tests with the same thing is pretty cool.

00:11:44.340 --> 00:11:48.780
And then this really kind of relates to really a lot of things.

00:11:48.780 --> 00:11:56.120
There's a lot of places where we use long, complex decorators that you can just assign to a variable and then use it later.

00:11:56.120 --> 00:11:57.140
Yeah.

00:11:57.140 --> 00:12:02.740
To put this decorator on a test function, you have to have – you specify a whole bunch of conditionals around the version.

00:12:02.740 --> 00:12:04.740
And then the reason is a big, long string.

00:12:04.740 --> 00:12:10.600
And if that's affecting 10 tests, you put that on 10 tests, it's all over the place.

00:12:10.660 --> 00:12:16.420
You know, one of the things that you hear from people sometimes is like, well, I don't like unit testing because it's hard to maintain.

00:12:16.420 --> 00:12:24.300
And I find that when people say that a lot, they kind of go into like this sort of – this mode where when they're writing test code,

00:12:24.300 --> 00:12:28.860
they forget about things like trying to isolate change to one place.

00:12:28.860 --> 00:12:32.780
And you would never write the same code 10 times in a real part of your app.

00:12:32.780 --> 00:12:35.980
Why should you write it 10 times duplicate in a test?

00:12:35.980 --> 00:12:36.640
Right?

00:12:36.780 --> 00:12:37.640
Well, it's hard to maintain.

00:12:37.640 --> 00:12:40.100
Well, it'd be hard to maintain if you did that in your regular code too.

00:12:40.100 --> 00:12:42.400
Just – you don't do it there, so don't do it here.

00:12:42.400 --> 00:12:44.880
And this is a cool technique to accomplish that, yeah.

00:12:44.880 --> 00:12:46.340
Yeah, definitely.

00:12:46.340 --> 00:12:51.460
And this is – this part of it isn't – it's also great because it's consistent.

00:12:51.460 --> 00:12:57.000
It keeps – it'd be terrible if you were, you know, referencing this issue in three different places,

00:12:57.000 --> 00:13:03.180
but only sometimes including the link and, you know, having some consistency is good.

00:13:03.180 --> 00:13:04.800
So –

00:13:04.800 --> 00:13:05.020
Absolutely.

00:13:05.020 --> 00:13:07.400
And there was some concerns.

00:13:07.400 --> 00:13:18.180
Larry Hastings put up a concern about possibly not doing this for code that can – that is – that generates a single-use object,

00:13:18.180 --> 00:13:20.780
like iterator or something like that.

00:13:21.920 --> 00:13:23.520
But just don't do that.

00:13:23.520 --> 00:13:25.920
But Larry has a workaround.

00:13:25.920 --> 00:13:30.560
If you – you can do it a different way if you have something that acts like that.

00:13:30.560 --> 00:13:31.400
I see.

00:13:31.400 --> 00:13:31.880
Interesting.

00:13:31.880 --> 00:13:32.160
Yeah.

00:13:32.160 --> 00:13:37.580
There's a lot of turtles all the way down, like decorators of functions that return functions.

00:13:37.580 --> 00:13:42.040
And so what we do is wrap that in a function to alleviate the – capture the closure.

00:13:42.040 --> 00:13:43.020
Yeah.

00:13:43.020 --> 00:13:43.500
It's fun.

00:13:43.500 --> 00:13:44.840
But anyway.

00:13:44.840 --> 00:13:46.340
Cool.

00:13:46.340 --> 00:13:49.220
Excellent stuff.

00:13:49.320 --> 00:13:49.480
Yeah.

00:13:49.480 --> 00:13:51.040
Next up, our sponsor.

00:13:51.040 --> 00:13:51.260
Yeah.

00:13:51.260 --> 00:13:52.660
We have a sponsor.

00:13:52.660 --> 00:13:57.020
Our sponsor this week is Microsoft for Startups, Founders Hub.

00:13:57.020 --> 00:14:04.600
So Microsoft for Startups, Founders Hub provides all founders at any stage with free resources to help solve startup challenges.

00:14:04.600 --> 00:14:13.560
The platform provides technology benefits, access to expert guidance and skilled resources, mentorship, networking connections, and a whole bunch more.

00:14:13.560 --> 00:14:26.020
And unlike others in the industry, Microsoft for Startup, Founders Hub does not require the startup to be investor-backed or third-party validated or able to relocate to San Francisco for a short time.

00:14:26.020 --> 00:14:28.960
So Founders Hub is truly open to all.

00:14:28.960 --> 00:14:29.660
So what do you get?

00:14:29.660 --> 00:14:34.980
You get free access to GitHub and Microsoft Cloud with the ability to unlock credits over time.

00:14:35.540 --> 00:14:41.120
They've also partnered with other companies like OpenAI to provide services and discounts.

00:14:41.120 --> 00:14:48.600
And Microsoft, through the Microsoft for Startup Founders Hub, becoming a founder is no longer about who you know.

00:14:48.600 --> 00:15:01.560
You'll have access to their mentorship network, giving you access to a pool of hundreds of mentors across a range of disciplines, across areas like idea validation, fundraising, management, coaching, sales, marketing, maybe even testing.

00:15:01.700 --> 00:15:02.060
Who knows?

00:15:02.060 --> 00:15:08.140
You'll be able to book a one-on-one meeting with the mentors, many of whom are former founders themselves.

00:15:08.140 --> 00:15:14.980
So make your ideas a reality today with the critical support you'll get from Microsoft for Startups Founders Hub.

00:15:14.980 --> 00:15:21.220
And to join or just check it out, visit pythonbytes.fm/foundershub 2022.

00:15:21.220 --> 00:15:23.200
The link is in the show notes.

00:15:23.440 --> 00:15:27.640
And I know you can find this stuff on your own with Google or something.

00:15:27.640 --> 00:15:33.260
But if you go through our link, it helps them know that you heard about them here.

00:15:33.260 --> 00:15:34.060
So thanks.

00:15:34.060 --> 00:15:34.900
Yeah.

00:15:34.900 --> 00:15:36.620
Thanks, Microsoft, for supporting the show.

00:15:36.620 --> 00:15:40.160
Brian, before we move on, audience feedback from Henry Schreiner.

00:15:40.160 --> 00:15:47.040
For that exact example, talking about pytest and decorators, I'm not fond of making the test directory importable unless I have to.

00:15:47.040 --> 00:15:48.780
A mark might be better.

00:15:48.780 --> 00:15:49.440
What do you think?

00:15:49.760 --> 00:15:50.940
A mark might be better.

00:15:50.940 --> 00:15:52.120
I mean, they are marks.

00:15:52.120 --> 00:15:54.620
So the marks are decorators.

00:15:54.620 --> 00:15:55.180
Yeah.

00:15:55.180 --> 00:15:55.600
Okay.

00:15:55.600 --> 00:15:56.040
Cool.

00:15:56.040 --> 00:15:58.660
What is next?

00:15:58.660 --> 00:16:02.320
Another continuation of my theme here.

00:16:02.320 --> 00:16:06.520
So Mark Madsen sent over a recommendation to talk about this.

00:16:06.520 --> 00:16:12.480
Unrelated to the previous announcement, only in timing or origin.

00:16:13.220 --> 00:16:16.200
So Panel, people probably have heard of HoloViz.

00:16:16.200 --> 00:16:18.680
And Panel is related to that project.

00:16:18.680 --> 00:16:21.160
It's an open source Python library.

00:16:21.160 --> 00:16:27.580
It tells us you create custom interactive web apps and dashboards by connecting widgets, plots, images.

00:16:27.580 --> 00:16:30.080
So people have heard of Streamlit.

00:16:30.080 --> 00:16:32.260
They've heard of H2O Wave.

00:16:32.260 --> 00:16:34.320
They've heard of Plotly Dash.

00:16:34.320 --> 00:16:36.000
It's like in that category, right?

00:16:36.080 --> 00:16:39.620
So you can put together a lot of interactive fun pieces.

00:16:39.620 --> 00:16:45.480
So for example, here, if you go to the main website for Panel, you can see that there's like this graph.

00:16:45.480 --> 00:16:47.100
As you hover over it, it's very interactive.

00:16:47.100 --> 00:16:53.560
But you also have widgets to let you reevaluate how you compare all these things and just play with it live.

00:16:53.560 --> 00:16:53.980
Right?

00:16:54.040 --> 00:16:55.680
Kind of like it's a notebook, but it's not.

00:16:55.680 --> 00:16:56.380
That's neat, right?

00:16:56.380 --> 00:16:57.020
Yeah.

00:16:57.020 --> 00:17:01.700
So traditionally, this has run in Jupyter Notebooks.

00:17:01.700 --> 00:17:06.480
Or you can run it on like the Flask backend type of thing.

00:17:06.480 --> 00:17:07.500
You can host it on your own stroker.

00:17:07.500 --> 00:17:09.280
The news is not that.

00:17:09.280 --> 00:17:10.420
This has been around for a while.

00:17:10.420 --> 00:17:19.240
The news is that Panel now comes to Wasm via Pyodide and has PyScript integration.

00:17:19.240 --> 00:17:20.280
That's pretty awesome.

00:17:20.280 --> 00:17:21.320
That is pretty cool.

00:17:21.760 --> 00:17:28.860
So in order to host it before, you have to either have a running notebook server or you had to set up your own separate web server and maintain that thing.

00:17:28.860 --> 00:17:29.820
And all that goes with.

00:17:29.820 --> 00:17:33.600
And now you can just put a little py-config in there.

00:17:33.600 --> 00:17:38.080
And boom, when they interact with your data and they run it, it just happens client side.

00:17:38.080 --> 00:17:39.020
No servers needed.

00:17:39.020 --> 00:17:41.340
So let's talk about some of the things here.

00:17:41.340 --> 00:17:47.400
You can automatically convert Panel applications to a Pyodide version.

00:17:47.400 --> 00:17:48.440
A couple of flavors.

00:17:48.440 --> 00:17:50.360
Reasons I'll explain in a minute.

00:17:50.360 --> 00:17:54.740
Or you can convert to a PyScript-based app, which is pretty epic.

00:17:54.740 --> 00:18:02.280
So you could embed a panel inside your Sphinx documentation just to some HTML, which is pretty nuts.

00:18:02.280 --> 00:18:06.700
So there's this convert command, panel space convert on the CLI.

00:18:07.040 --> 00:18:14.280
And you can tell it the two format from your regular panel code to convert it to a Pyodide.

00:18:14.500 --> 00:18:21.000
This one is good if you want to have a single HTML file that you say, here's my HTML file.

00:18:21.000 --> 00:18:21.900
Off it goes.

00:18:21.900 --> 00:18:23.580
It's just no dependencies.

00:18:23.580 --> 00:18:24.780
And then it runs there.

00:18:24.780 --> 00:18:33.780
That's not as good as creating a Pyodide worker, which creates a JavaScript and HTML file that you've got to serve over more of a server.

00:18:33.960 --> 00:18:38.480
Or you can even output a PyScript version where you can write additional PyScript code.

00:18:38.480 --> 00:18:39.740
It's pretty epic.

00:18:39.740 --> 00:18:41.980
And here you can see a little example.

00:18:41.980 --> 00:18:46.840
This looks like standard XGBoost SKLearn code right here.

00:18:46.840 --> 00:18:48.120
It does all its things.

00:18:48.500 --> 00:18:51.060
Except for the end, you just say pn.column.

00:18:51.060 --> 00:18:55.300
And here's your output right there.

00:18:55.300 --> 00:19:01.320
And you put your little pipeline you created and maybe a head of a data frame to show up.

00:19:01.320 --> 00:19:02.120
And there it goes.

00:19:02.120 --> 00:19:07.800
So in order to run this, you would say panel convert the script to a Pyodide worker.

00:19:07.800 --> 00:19:09.060
Output Pyodide.

00:19:09.060 --> 00:19:12.180
Then you just run a server locally so that you can get to it.

00:19:12.180 --> 00:19:15.980
You can pull in the JavaScript, open it up, and you get something that looks like this.

00:19:15.980 --> 00:19:17.000
That's super interactive.

00:19:17.000 --> 00:19:19.240
There you have machine learning in the browser.

00:19:19.240 --> 00:19:20.040
That simple.

00:19:20.040 --> 00:19:21.160
That's pretty cool.

00:19:21.160 --> 00:19:24.440
The browser's JavaScript will take over the world.

00:19:24.440 --> 00:19:26.700
It'll get smart and then take off.

00:19:26.700 --> 00:19:32.200
So a couple of cool tips and tricks they recommend is you can do --auto reload.

00:19:32.200 --> 00:19:35.460
So if you make changes to the file, it'll auto reload the browser.

00:19:35.460 --> 00:19:41.180
So just as you edit, you can also add a panel dot convert --watch.

00:19:41.180 --> 00:19:45.500
So if the source files change, it'll regenerate the script.

00:19:45.500 --> 00:19:46.960
And then the script will get reloaded.

00:19:46.960 --> 00:19:48.560
So you can chain those together, I believe.

00:19:48.560 --> 00:19:55.400
But then there's a section on formats that actually describes what is the point of the different outputs,

00:19:55.400 --> 00:19:57.080
like Pyodide versus Pyodide worker.

00:19:57.080 --> 00:20:01.760
So the worker one says it generates an HTML file and JavaScript that runs better.

00:20:01.760 --> 00:20:03.380
This is the most in a separate thread.

00:20:03.540 --> 00:20:07.840
This is the most performing option, but it has to be running out of a server instead of just a file.

00:20:07.840 --> 00:20:18.960
Worth noting here, PyScript generates an HTML file leveraging PyScript, produces standalone HTML files containing pyenv and PyScript tags with the dependencies.

00:20:19.820 --> 00:20:23.280
It's basically a PyScript variant of the Pyodide one.

00:20:23.280 --> 00:20:24.520
Well, guess what?

00:20:24.520 --> 00:20:26.420
This might need a little update coming soon.

00:20:26.420 --> 00:20:30.340
Py-DNV is not there anymore, so they can check that out.

00:20:30.340 --> 00:20:32.740
I'm sure they're on top of it.

00:20:32.740 --> 00:20:33.360
Yeah.

00:20:33.360 --> 00:20:37.940
Final thing to note here that's pretty dope is progressive web apps.

00:20:37.940 --> 00:20:47.940
So this comes with a --PWA option, which turns your, I'm pretty sure this is going to require the Pyodide worker variant,

00:20:47.940 --> 00:20:51.340
because you need these worker things for progressive web apps.

00:20:51.340 --> 00:21:02.420
But this means that you can install your app into, say, an iPad or install it like a desktop app and run it with cached offline data.

00:21:02.420 --> 00:21:05.740
So, for example, let's see if I go to YouTube here.

00:21:05.740 --> 00:21:07.120
I signed in.

00:21:07.120 --> 00:21:07.700
No.

00:21:07.700 --> 00:21:08.580
Good.

00:21:08.580 --> 00:21:13.620
So, like, in Vivaldi, I can right-click on this, and it'll say install YouTube there.

00:21:13.620 --> 00:21:17.940
So if you did that option for your panel app, you could right-click and say install panel.

00:21:17.940 --> 00:21:20.180
And you might think, oh, well, that's silly.

00:21:20.180 --> 00:21:21.140
Like, who cares about that?

00:21:21.140 --> 00:21:23.900
Let's see if this let me do it, though, here.

00:21:23.900 --> 00:21:25.020
Oh, this is live.

00:21:25.020 --> 00:21:28.120
If you go to a lot of these, I just need some video.

00:21:28.120 --> 00:21:28.840
I don't really care where it is.

00:21:28.840 --> 00:21:32.800
A lot of these, you can come in and actually click download.

00:21:32.800 --> 00:21:37.020
I guess you've got to be signed in, but if you have, like, a premium account or whatever, you can click download.

00:21:37.760 --> 00:21:40.700
And that's only possible for YouTube installed as a PWA.

00:21:40.700 --> 00:21:43.900
Because I think a lot of people feel like, oh, it just gives me an icon on my homepage.

00:21:43.900 --> 00:21:45.900
But, like, there's actually different behaviors.

00:21:45.900 --> 00:21:51.360
So you can get, like, offline videos on the PWA YouTube, whereas the web one, you can't.

00:21:51.700 --> 00:21:52.320
And so on.

00:21:52.320 --> 00:21:58.140
So anyway, that's the kind of benefits you would get if you would do your panels at PWA, which is just a command line option.

00:21:58.140 --> 00:21:58.780
Interesting.

00:21:58.780 --> 00:21:59.360
Cool.

00:21:59.360 --> 00:22:06.160
Anyway, people check it out if they're interested in building dashboards, they're interested in PyScript and running in the browser using WebAssembly.

00:22:06.160 --> 00:22:07.580
Here's a pretty awesome option.

00:22:07.580 --> 00:22:09.360
Thanks, Mark, for sending this in.

00:22:09.360 --> 00:22:10.600
Yeah, thanks a lot.

00:22:12.360 --> 00:22:16.340
Did you know that Python 3.11 is coming right up?

00:22:16.340 --> 00:22:17.500
It's got to be soon.

00:22:17.500 --> 00:22:18.140
It's October.

00:22:18.140 --> 00:22:19.880
There's not that much October left.

00:22:19.880 --> 00:22:23.720
Yeah, but it was 3.8 when we got the walrus operator.

00:22:23.720 --> 00:22:25.200
Do you realize it's been that long?

00:22:25.200 --> 00:22:28.060
It seems like the walrus operator is still new.

00:22:28.060 --> 00:22:29.400
But that's a long time, yeah.

00:22:29.400 --> 00:22:31.100
Yeah, so...

00:22:31.100 --> 00:22:35.080
It's like an adolescent walrus now, not even a baby walrus.

00:22:35.080 --> 00:22:36.660
Yeah, exactly.

00:22:37.100 --> 00:22:40.760
So I think it's time for people to embrace the walrus.

00:22:40.760 --> 00:22:52.620
And so one of the things you can do is you can install Marco Gorelli's auto walrus, and it'll convert your code for you in places where you really should have used the walrus operator.

00:22:52.620 --> 00:22:57.280
So, and this is good if you're supporting 3.8 and above.

00:22:57.280 --> 00:23:01.940
And golly, I hope you're already up to 3.9 or 3.10 by now.

00:23:01.940 --> 00:23:05.680
So there's this auto walrus.

00:23:05.680 --> 00:23:06.480
I checked it out.

00:23:06.480 --> 00:23:07.940
It's pretty simple.

00:23:07.940 --> 00:23:12.740
It can run as a pre-commit hook, too, which is nice.

00:23:12.740 --> 00:23:17.060
But you can run it on the command line, which that's what I did when I tried it.

00:23:17.060 --> 00:23:19.300
You pip install auto-walrus.

00:23:19.300 --> 00:23:22.360
So it's one word, but with a dash in the middle.

00:23:22.360 --> 00:23:25.200
And then you have this application.

00:23:25.200 --> 00:23:26.220
You can run it on a file.

00:23:26.220 --> 00:23:31.480
And like we said, you can run it as a pre-commit hook as well, and it'll run on everything.

00:23:31.480 --> 00:23:33.100
But you can...

00:23:33.100 --> 00:23:34.120
And it just converts stuff.

00:23:34.120 --> 00:23:35.260
So if you have things like...

00:23:35.260 --> 00:23:38.720
Here's a simple example of n equals 10.

00:23:38.720 --> 00:23:41.880
And then if n is greater than 3, do something.

00:23:41.880 --> 00:23:44.700
And that converts...

00:23:44.700 --> 00:23:53.700
The auto walrus will convert that to the walrus operator of if, you know, n colon equal 10 is greater than 3.

00:23:55.380 --> 00:24:00.840
And I kind of like this being separate from other tools because some people just honestly haven't been...

00:24:00.840 --> 00:24:03.140
Haven't came on board with this already.

00:24:03.140 --> 00:24:06.620
You know, embrace the walrus sort of thing.

00:24:06.620 --> 00:24:10.960
But it's a fun way to just try it out on your code and do a diff.

00:24:10.960 --> 00:24:13.500
Get diff and see what it changed.

00:24:13.500 --> 00:24:14.840
And maybe you like it.

00:24:14.900 --> 00:24:22.580
Maybe it's a thing to do as a group code review thing to just talk to your team and find out if you want to change it this way or not.

00:24:22.580 --> 00:24:23.740
Yeah.

00:24:23.740 --> 00:24:25.820
And then this reminded me of something.

00:24:25.820 --> 00:24:28.480
I'm like, we had something like this before, right?

00:24:28.620 --> 00:24:32.580
And back in episode 82...

00:24:32.580 --> 00:24:33.200
Wow.

00:24:33.200 --> 00:24:34.620
That was in 2018.

00:24:34.620 --> 00:24:40.780
We talked about Anthony Satili's Pi upgrade.

00:24:40.780 --> 00:24:41.820
So...

00:24:41.820 --> 00:24:43.060
And that's...

00:24:43.060 --> 00:24:43.940
It's been a while.

00:24:43.940 --> 00:24:45.380
So that's like four years ago.

00:24:45.380 --> 00:24:47.100
So I went and took a look again.

00:24:47.100 --> 00:24:50.720
And I would like people to try to check out Pi upgrade too.

00:24:50.720 --> 00:24:51.940
Because there's a whole...

00:24:51.940 --> 00:24:53.080
It's moved on.

00:24:53.080 --> 00:24:54.400
So it's not just...

00:24:54.400 --> 00:24:59.900
We recommended Pi upgrade for things like upgrading from two to three sort of thing.

00:24:59.900 --> 00:25:02.860
Was that back in the controversial legacy Python days?

00:25:02.860 --> 00:25:03.620
Yeah.

00:25:03.620 --> 00:25:05.860
So there's...

00:25:05.860 --> 00:25:10.960
And there's always times to go and revisit old scripts and old applications that you're still maintaining.

00:25:10.960 --> 00:25:14.980
And going, well, we don't really want to support the old Python.

00:25:14.980 --> 00:25:17.480
But our code server looks like the old Python.

00:25:17.480 --> 00:25:19.380
So let's take a look at some of this stuff.

00:25:19.380 --> 00:25:23.100
And it'll do things like, you know, the set literal.

00:25:23.100 --> 00:25:25.340
Some of the old things of...

00:25:25.340 --> 00:25:28.860
And doing comprehensions for you.

00:25:28.860 --> 00:25:30.980
And better...

00:25:30.980 --> 00:25:32.280
Comprehensions are cleaner looking.

00:25:32.280 --> 00:25:33.920
And then...

00:25:33.920 --> 00:25:35.880
But there's also like different print styles.

00:25:35.880 --> 00:25:40.060
But one of the things I wanted to point out is if you go to the readme, you got to scroll all the way down.

00:25:40.060 --> 00:25:41.540
Or at least halfway down.

00:25:41.540 --> 00:25:43.900
And you get things like the 3.6 plus.

00:25:43.900 --> 00:25:45.880
So there's these plus options.

00:25:46.260 --> 00:25:50.280
So you can say if you're running 3.6 or above, run that.

00:25:50.280 --> 00:25:51.960
But you also want to do...

00:25:51.960 --> 00:25:54.660
Like let's just go all the way down to like 3.7 plus.

00:25:54.660 --> 00:25:59.940
And there was a kind of a new way to run subprocess, for instance.

00:25:59.940 --> 00:26:00.780
But you're...

00:26:00.780 --> 00:26:01.220
I mean...

00:26:01.220 --> 00:26:04.080
And it just finds some of these things and just changes it for you.

00:26:04.080 --> 00:26:05.080
So it's kind of cool.

00:26:05.160 --> 00:26:07.400
Some of the things you may not have remembered.

00:26:07.400 --> 00:26:12.220
The 3.8 plus the LRU cache.

00:26:12.220 --> 00:26:18.500
You used to have to do the LRU cache and call it as a function for your decorator.

00:26:18.500 --> 00:26:20.260
But now you don't have to do the PRINs.

00:26:20.260 --> 00:26:22.780
So just some cleanup like that.

00:26:22.780 --> 00:26:23.900
It's just nice.

00:26:24.900 --> 00:26:27.060
I try to run this every once in a while.

00:26:27.060 --> 00:26:32.640
And yeah, I guess public service announcement for this cool little project.

00:26:32.640 --> 00:26:33.980
That is a cool project.

00:26:33.980 --> 00:26:38.820
And going through this huge long readme and looking at like as it gets later and later in Python

00:26:38.820 --> 00:26:40.760
versions, it's kind of like a...

00:26:40.760 --> 00:26:43.840
Here are just a bunch of examples of how Python has changed over the last few years.

00:26:43.840 --> 00:26:44.400
Yeah.

00:26:44.400 --> 00:26:45.500
Ooh, neat.

00:26:45.940 --> 00:26:48.560
It has like 604 type rewrites.

00:26:48.560 --> 00:26:53.360
It'll rewrite the union operator to the bar operator.

00:26:53.360 --> 00:26:55.020
That's in 3.10 plus.

00:26:55.020 --> 00:26:55.700
That's nice.

00:26:55.700 --> 00:26:56.340
Yeah.

00:26:56.340 --> 00:26:59.060
Well, we got 3.11 plus coming soon.

00:26:59.060 --> 00:27:00.420
Yeah.

00:27:00.420 --> 00:27:00.980
Yeah.

00:27:00.980 --> 00:27:01.660
That'll be fun.

00:27:01.660 --> 00:27:02.700
Awesome.

00:27:02.700 --> 00:27:04.700
Well, that's our items, right?

00:27:04.700 --> 00:27:05.280
Got any extras?

00:27:05.280 --> 00:27:11.040
You know, I was going to have an extra, but I'm going to save that for later.

00:27:11.040 --> 00:27:12.240
So no, I don't.

00:27:12.240 --> 00:27:12.960
Do you have any extras?

00:27:12.960 --> 00:27:15.000
No extras.

00:27:15.000 --> 00:27:15.940
But I have a joke.

00:27:15.940 --> 00:27:17.540
I do a quick follow-up to this though.

00:27:17.540 --> 00:27:20.440
This is a hint of what's coming next week.

00:27:20.440 --> 00:27:21.640
I'm going to talk.

00:27:21.640 --> 00:27:22.480
I think it's next week.

00:27:22.480 --> 00:27:23.220
I'm going to cover this.

00:27:23.220 --> 00:27:23.740
Refurb.

00:27:23.740 --> 00:27:24.840
Have you seen Refurb?

00:27:24.840 --> 00:27:26.160
I don't think so.

00:27:26.160 --> 00:27:29.980
Refurb is a similar one that like will go through and give you recommendations of here's

00:27:29.980 --> 00:27:31.780
the most modern way to do your thing.

00:27:31.780 --> 00:27:37.300
So like if you said, you know, if value is in bracket XYZ, it's like, you know, it's a

00:27:37.300 --> 00:27:42.240
little less efficient than like why make a mutable list when you could make it a tuple.

00:27:42.240 --> 00:27:45.080
It's a little more efficient just to create the tuple.

00:27:45.080 --> 00:27:52.180
So if value is in parenthesis, it'll suggest you change a parenthesis or suggest using some

00:27:52.180 --> 00:27:55.500
path lib operations instead of with open operations.

00:27:55.500 --> 00:27:58.360
Like instead of a context manager with open, do a bunch of stuff.

00:27:58.480 --> 00:28:00.900
You can just do path of thing dot read text.

00:28:00.900 --> 00:28:02.700
You don't need to do the context manager.

00:28:02.700 --> 00:28:03.760
Just bam, there it is.

00:28:03.760 --> 00:28:05.760
A bunch of cool stuff like that.

00:28:05.760 --> 00:28:07.600
So anyway, that one more.

00:28:07.600 --> 00:28:08.480
And then also Flint.

00:28:08.480 --> 00:28:09.860
I've talked about Flint.

00:28:09.860 --> 00:28:10.580
I love Flint.

00:28:10.580 --> 00:28:11.920
Super straightforward.

00:28:11.920 --> 00:28:17.200
It brings one of the most beloved things you can do for upgrading your Python is convert

00:28:17.200 --> 00:28:22.140
all your variations of string formatting to f-strings just across a whole directory of

00:28:22.140 --> 00:28:22.740
Python files.

00:28:22.740 --> 00:28:23.260
Cool.

00:28:23.260 --> 00:28:26.520
A lot of different things to be running together, but are you ready for our joke?

00:28:26.520 --> 00:28:27.580
I am.

00:28:27.580 --> 00:28:32.920
You had the comment about bring back the walrus or something.

00:28:32.920 --> 00:28:35.360
I feel like that could be a cool t-shirt, right?

00:28:35.360 --> 00:28:35.960
Yeah.

00:28:35.960 --> 00:28:36.840
Yeah, absolutely.

00:28:36.840 --> 00:28:39.460
So I came across this place a little while ago.

00:28:39.460 --> 00:28:46.100
I don't have any particular one to recommend here, but this place that has like funny, geeky

00:28:46.100 --> 00:28:46.900
t-shirts.

00:28:46.900 --> 00:28:51.360
So I thought I'd just pull a couple of these up and see what you think about them.

00:28:51.360 --> 00:28:53.180
So some of them are good.

00:28:53.180 --> 00:28:54.580
I like the first one, the Mordor.

00:28:54.580 --> 00:28:57.940
The Mordor fun run.

00:28:57.940 --> 00:29:01.340
One does not simply walk into Middle Earth.

00:29:01.340 --> 00:29:04.680
You have some for our data science friends out there.

00:29:04.680 --> 00:29:07.720
It has a graph of two things that are very similar.

00:29:07.720 --> 00:29:10.220
One is shark attacks.

00:29:10.220 --> 00:29:12.040
The other is ice cream cone sales.

00:29:12.040 --> 00:29:14.380
And it says correlation does not imply causation.

00:29:15.100 --> 00:29:20.000
Apparently ice cream sales and shark attacks are closely correlated because it's warm.

00:29:20.000 --> 00:29:20.700
You go in the water.

00:29:20.700 --> 00:29:23.280
It probably doesn't cause shark attacks.

00:29:23.280 --> 00:29:25.040
It might.

00:29:25.040 --> 00:29:25.960
It might.

00:29:25.960 --> 00:29:33.040
If you are more into math, you have the distance raptor divided by time raptor is the velociraptor.

00:29:33.040 --> 00:29:39.120
But there's some really good programming ones in here as well.

00:29:39.120 --> 00:29:40.900
Like this one, for example, check this out.

00:29:40.900 --> 00:29:41.840
Go outside.

00:29:41.840 --> 00:29:43.340
The graphics are amazing.

00:29:43.800 --> 00:29:47.380
And the picture of the shirt is like a super low bit rate, like graphics.

00:29:47.380 --> 00:29:52.280
Here's a good one.

00:29:52.280 --> 00:29:57.500
Some lab person pouring like beakers of clearly poisonous green stuff.

00:29:57.500 --> 00:29:58.540
It says, forget lab safety.

00:29:58.540 --> 00:29:59.520
I want superpowers.

00:30:02.080 --> 00:30:02.660
Oh, boy.

00:30:02.660 --> 00:30:04.640
What about the, what do you think of this one, Brian?

00:30:04.640 --> 00:30:06.580
Here, the forecast for Alderaan.

00:30:06.580 --> 00:30:14.320
So remember, Alderaan is the home of Princess Leia that was blown up by the Death Star and Star Wars.

00:30:14.320 --> 00:30:16.400
And it says five day forecast, Alderaan.

00:30:16.400 --> 00:30:18.140
Monday, 72 and cloudy.

00:30:18.140 --> 00:30:19.580
Tuesday, 74.

00:30:19.580 --> 00:30:21.340
Wednesday, 15,000 degrees.

00:30:21.340 --> 00:30:22.540
No Thursday or Friday.

00:30:23.860 --> 00:30:26.160
It's kind of mean, but it's also kind of awesome.

00:30:26.160 --> 00:30:27.000
Yeah.

00:30:27.000 --> 00:30:28.760
Those are good.

00:30:28.760 --> 00:30:29.500
Yeah.

00:30:29.500 --> 00:30:30.080
This is me.

00:30:30.080 --> 00:30:34.620
We see if I can find one more, one more programming one.

00:30:34.620 --> 00:30:35.880
Oh, yeah.

00:30:35.880 --> 00:30:37.140
Let's see.

00:30:37.600 --> 00:30:39.800
Here's some good ones.

00:30:39.800 --> 00:30:41.900
One, it has a floppy disk.

00:30:41.900 --> 00:30:44.440
It says, kids today have no idea what this is.

00:30:44.440 --> 00:30:48.280
And then this one here, Brian, this is the last one.

00:30:48.280 --> 00:30:51.860
It's somebody holding a CD going into a drive.

00:30:51.860 --> 00:30:53.040
And it just says, never forget.

00:30:53.040 --> 00:30:55.100
Never forget the CDs.

00:30:55.100 --> 00:30:56.020
Yeah.

00:30:56.020 --> 00:30:57.680
CD drive.

00:30:57.680 --> 00:31:07.620
I still love that old joke of a person calls into IT help desk and says, I need some help because my cup holder's broken.

00:31:07.620 --> 00:31:09.720
Yeah.

00:31:09.720 --> 00:31:11.660
I just went in and spilled this drink all over me.

00:31:11.660 --> 00:31:12.600
Come on, man.

00:31:12.600 --> 00:31:14.440
You guys got to get a safe fix.

00:31:14.440 --> 00:31:17.020
Yeah.

00:31:17.020 --> 00:31:19.360
So you could spend a lot of time on this page.

00:31:19.360 --> 00:31:23.880
I'm not necessarily suggesting you get a shirt here or anything, but it's pretty awesome.

00:31:23.880 --> 00:31:25.660
Well, it makes me miss ThinkGeek.

00:31:25.980 --> 00:31:28.280
ThinkGeek should have never folded.

00:31:28.280 --> 00:31:32.840
But we have other people coming up with good humorous shirts.

00:31:32.840 --> 00:31:33.600
So that's good.

00:31:33.600 --> 00:31:34.080
Yeah.

00:31:34.080 --> 00:31:35.560
Houston, we have dibs.

00:31:35.560 --> 00:31:36.600
Putting a flag on the moon.

00:31:36.600 --> 00:31:41.500
Dibs on the moon.

00:31:41.500 --> 00:31:43.100
Got it.

00:31:43.100 --> 00:31:48.340
So a more serious, a couple quick follow-up here.

00:31:48.340 --> 00:31:54.020
Marco Garelli, from the project that you talked about, the Auto Auris, says, yeah, I love Pi Upgrade.

00:31:54.020 --> 00:31:55.260
And Will McGugan.

00:31:55.260 --> 00:31:55.900
Hey, guys.

00:31:56.720 --> 00:32:02.260
We could use the Pi Upgrade because Rich is dropping support for 3.6.

00:32:02.260 --> 00:32:03.300
So just clean it up.

00:32:03.300 --> 00:32:03.720
Yeah.

00:32:03.720 --> 00:32:11.720
And then I want to follow up with the first thing I was talking about, about the decorators.

00:32:11.720 --> 00:32:15.920
So Henry Schreiner said, oh, I think I got the wrong one.

00:32:15.920 --> 00:32:21.880
But for that example, I'm not fond of making the test directory importable unless I have to.

00:32:21.880 --> 00:32:22.980
A mark might be better.

00:32:23.740 --> 00:32:31.140
And I guess I brushed that off too quickly.

00:32:31.140 --> 00:32:39.320
If I were to put a bunch of these, like if I had a project-wide decorators that I wanted to use, I don't know what the best way to do that would be.

00:32:39.320 --> 00:32:41.900
It might be a non-test file that I would import.

00:32:41.900 --> 00:32:43.200
I'll have to play with it.

00:32:43.380 --> 00:32:45.200
So thanks for Henry for bringing that up.

00:32:45.200 --> 00:32:47.180
I'm not quite sure how to deal with that problem.

00:32:47.180 --> 00:32:48.600
Indeed.

00:32:48.600 --> 00:32:49.980
All right.

00:32:49.980 --> 00:32:51.460
Well, should we call it a week?

00:32:51.460 --> 00:32:52.700
Let's call it.

00:32:52.700 --> 00:32:53.760
All right.

00:32:54.280 --> 00:32:55.580
Thanks everybody for showing up.

00:32:55.580 --> 00:32:56.600
We'll talk to you next week.

