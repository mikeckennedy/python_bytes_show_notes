00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 304. Recorded October 5 2020. To Michael Kennedy.

00:00:11 I'm Brian Aachen. Hey, if you like threw me for a ranch with the whole date thing, so

00:00:18 I know well in our notes it has yesterday, but then we had to move it. Yeah, cuz some of us have meetings. Yeah, that's right. Move plenty for me. Plenty of moving. Yeah. Very cool. Well, great to be back with you. Also, we have a sponsor that sponsor before but has been a while a compiler from Red Hat. Excellent show tell you more about that later. For now, Brian. I'm kind of hungry. What can you do for me,

00:00:41 I've got tasty ingredients for let's see, add the stream tasty ingredients for delicious pull request. So it's October now. So that means how Oktoberfest for some people, right? So actually, I didn't really want to just highlight headcover fest what I really like about this. So this is an article 10 Tasty ingredients for a delicious pull request. It's on the wagtail blog, and from lb on the wagtail core team member. So thanks, lb. But this is kind of neat, because there's it's not good. It's kind of click Beatty. But also, it's just, it's actually nice information. So whether you're starting open source project, or starting wanting to start helping out with an open source project, or I think these tips are great, or at least majority of them are great, even for people that are used to developing solo and are moving into developing with a team of people or a group of people. And there's I've had questions about that even from companies of like, yeah, we want to kind of work better as a team. How do we do that? So I'm going to run through these quickly. There's, there's 10 of them. First one is, is great. It's read the documentation or read the development instructions. So a lot of projects have contributing guidelines. So actually read those and understand them. When we're used to it. It's just, Hey, forget and go. But that's not trivial for some people. So

00:02:05 right, well, you may have an non obvious details, like for example, maybe just fork the repo, you do your work there and you contribute. But well, you should obviously create a branch in your repo so that if they decide to not take it, then how do you stay in sync? Right? That's one of them. Another one as well, maybe when you do the PR, it doesn't go back to the main branch, it goes to some other like dev branch or something, right? Like you need to know, here's where you put the PR back to you. And just like those kinds of details for a work team.

00:02:33 Yeah. And then also, there's details like how do you run the tests? And are there extra stuff that you have to install or any settings or for a lot of projects is just, you know, do a virtual environment and clone it and go but there's there's there's some that have like extra bits that you have to set up. So good to read the instructions. But then we're going into things like read the issues and comments. So if you want to help out this is a great way is to read the issues. But don't just jump in and try to solve it right away. Read the comments around the issue. Also PRs that are related to the issue if there's any PRs linked, because there's somebody that might be started on a fix, and you want to, you want to help either help them get unstuck or just help out. You don't want to just take over and say, Oh, I could solve this if somebody else is working on it already. But maybe you do. There's there's different ways, but pay attention to that. So that's good. Create a fresh branch for your contribution, like you mentioned, it isn't always obvious because I'm already forking, what do we need a branch for. But it does help with the bridge model, when it comes back in just looks better. So it's,

00:03:41 it's not necessary until your change is not accepted. Or you want to make two changes, all right. And then if you ever want to get back in sync with the main repo, you need to do somewhere else.

00:03:53 And it might be very much a possibility that you want to make several changes, you're really excited about a project and you're making several. And like you said there, there might be a lot of discussion around some and some of them are trivial things like fixing readme or something. And so yeah, multiple due to a bridge so that you've got multiple names. And that's where we come to the next step for is keep the change focused. So a project would much rather have a several focused pull requests than a single pull request with like four different changes in it that are completely unrelated. So Apple focused, and this is great for personal or, you know, closed source projects, too. It just makes the code review easier and windy when you get in the habit of doing focus changes it just it's not harder. It's just a workflow you got to get used to next is write unit tests. Definitely for the changes but one of the comments that I loved in this as a bonus tip is there might be some either untested features in the project or under tested and adding tests around those features that you care about is a great way to contribute to, to a codebase. So keep that in mind.

00:05:06 That's a really good point. Because people often think, well, what can I do to contribute? I'm not an expert. Well, if it's missing tests, that's, that's pretty easy.

00:05:14 And there could be even like, if so there's an idea of like testing is documentation. And some tests work well, like that. And some tests do not. So a great way also just just a walk through, make tests around the the the onboarding documentation, like the Getting Started Guide, making sure that those features are tested is a good thing to throw in there. Give your pull request name, request a name with contacts, so naming well is good. And don't be surprised if your if your pull request name gets changed by one of the one of the core contributors. That's not, it's just so that everybody can track what's going on inside. Better. So just learn from that.

00:05:54 If Mei is associated with an issue, I tried to put the issue number as part of the branch, yes, that didn't like, you know, it'd be like add such and such, if that adds such and such as actually to fix, you know, issue 221, it'd be like, the branch would be, you know, add such and such two to one or whatever, for the branch name, just so you're like, Where the heck did this come from? Why is it here, oh, we have this right, I can go find it.

00:06:16 Yep. And reference the issue being fixed or resolved in the pull request. So referencing the issue in a way that you kind of gotta get used to this with GitHub or GitLab, or other things, they'll link to the thing that links things up if you if you name it correctly. So just play with that, and then some again, and then hopefully, there's CI, ci going on, and tests. So if your pull request has a break as a break that test fail, address those, this is nothing more frustrating than a fairly decent pull requests coming in. But the tests fail or the coverage fails or something, and the person that issued the pull request doesn't deal with it, they just leave it for you. And that's, that's not cool. So yeah, and address those, only a couple more push to the same branch with fixes and do not open a new pull request. So if the CI breaks, just push to the same branch again, it'll work. And then the lastly is be patient, I know that you've worked really hard on on a change, and you want to see it go into the main project right away. But these are volunteer projects, mostly. So it might take a while to review it and be comfortable with the changes. So yeah,

00:07:27 it's a bit of a balance. Yeah, it's frustrating. When you work on a project, you work, try to enhance some project, and then you put something out there and there's not even a response after you know, like two weeks you're like, Well, yeah, I guess I don't know. I don't know what to do with that, you know, but at the same time, it's absolutely volunteer. So there you go. Alright, let me tell you about something pretty cool. For this next one. Brian, I learned about this from Rhett Turnbull. He and I had a chat over on talk Python about building native Mac apps in Python. Recall, we talked about tech sniper, and he built a Python only equivalent, and we actually covered on the show a little bit. But during our conversation there, this is one of the recommendations he had for something really cool. So imagine somebody comes to you and says, Hey, Michael, I have a Raspberry Pi Arduino thing in my lab, and it controls let's say, this is a biology lab, right? It controls experiments. And you can build up something with like a UI or whatever. But if people want to script it, wouldn't it be cool if there's a way to express in like, some form of syntax? Here's how somebody who is just a biologist can make it go, it could just be like, Phil pipette, seven, mix, mix pipette, seven and 10. Wait 10 minutes, you know, he does such and such, right? You can sure you could come up with a programming language for them. You say? Well, here's your language. You know, we're gonna give you C++ Good luck. You know, more ideally, maybe Python or oftentimes JavaScript, which feels like a real bad example, or choice because it's, it's kind of a complicated syntactical language, even though it's easy to execute. You know, it's like, it's easy to make a mistake and forget a semicolon or some weird anyway, what if you could come up with the words that I use to, like, introduce this idea. You just have like lines like fill pipette, seven, mix pipette, seven, and eight, or whatever. So this thing I'm talking about here is called Text X. And text x is a Python library that allows you to build these kinds of grammars and map them Python implementations in a super easy way. Wow. Okay, so So let's see, it's a meta language for building domain specific languages. DSLs. In Python, basically, it will help you build a textual language in an easy way. And you can invent your own language, as I said, or build support for an existing format. So they have an example here. So they have this grammar. And this is about moving things around, basically drawing something in a language. So you come up with a grammar you'd say. There's a Shape command, which is just line two. or circle, there's a move command, which is moved to move by, and then you just have these words move. And then to that runs the move to command if the word the line is move space by, that's the move by command. And then you map to the additional information to these classes. So these are all Python classes, right? So you're just kind of like this is what is this 10 lines, eight lines. And then you create a class, which is a point and other pieces and just say metamodel from string, give it the grammar and the classes involved. And then here's the the new language we just created, move space to five comma 10, line to 10, comma 10. How cool is that? That's pretty interesting. Yeah, you just create the model from there. And then you can, you can just basically parse it, for command in the model, start doing the things. If the commands move to move by, right, it's already done. The parsing, it has the command elements, like the vector or the point already parsed and validated. And it just executes Python.

00:10:58 Okay. You think? Well, so how do you use it? So do you call it like, do you put all these commands in the somebody that put all these move things in a file and then run?

00:11:07 Yeah, exactly. So you would you would implement the code that defines the grammar, you would implement the grammar classes, so like point and vector and those sorts of things, and then somebody would write the little the grammar, so move space to five comma 10. And then they probably have either a CLI or they save it in a file and some location and like, you ordered a separator however it runs. So basically, from an external perspective, you will now allow people to just program in this simple way like another way you could do it is like you could write like a text adventure game, right? You could like around look at move right move. Move east west north, right attack creature run like you could really easily and Python build like a pretty interesting text adventure game based on this. I would imagine. Probably it already exists.

00:11:55 Yeah, that well, yeah. So the adventures around so we could probably reimplemented with this. Yeah, that'd be fun. Yeah, I'd be fun. I think this or like a complete, like burn way to burn up a summer. The this, this looks cool, though. There's a whole bunch of cases where DSL is appropriate, especially when you're interacting with non programmer type

00:12:17 people. Exactly. You want to give them some kind of text, ability to interact with what you've created. But you don't want to force them to do full on super precise programming.

00:12:27 Yeah. Or maybe there is programmers, and it's just easier to think about stuff in this manners. Yeah. Neat.

00:12:32 Guys have a real high level way to talk about what you want. Yeah, and a cool anyway, so text x, people can check it out. Another thing that's pretty awesome compiler from Red Hat or sponsor this week. Yeah. Let me tell folks about that before we move on. So this episode, as I said, is sponsored by compiler. Just like you, Brian, I are fans of podcasts. And I'm happy to share this new highly respected one from an open source company, I'm sure you know, compiler and original Red podcast from Red Hat. And if you want to stay on top of tech without dedicating 10s of time to it compiler presents perspectives, topics and insights from the tech industry free of jargon and judgment. They want to discover where technology's headed beyond the headlines and create a place for new IT professionals to learn, grow and thrive. Compile helps people break through barriers and challenges turning code into community at all levels of the enterprise. One recent interesting episode is there the great stack debate episode, I love, love, love talking to people about how they architect their code, the trade offs and conventions they chose and the cost challenges and smiles that result. This one is like that. This great steak stack debate episode, check it out and see if software is more like an onion or more like lasagna, or maybe it's more complicated than food. This is actually the first episode in compilers software stack series. And I think it'll be pretty interesting. So check that one out. Learn more about compiler at Python bytes FM slash compiler. The link is in a podcast player show notes. Yes, I know you can open up your podcast player and just search for compiler. But please visit Python by sight FM slash compiler and click on your podcast players icon that way they know it came from us or thanks to compiler for keeping our podcast go and strong.

00:14:10 Nice. Yeah, very cool.

00:14:12 Yeah. All right. What's next?

00:14:14 Well, I want to talk about locks and semaphores and analogies and stuff. So

00:14:21 I've been thinking about them so much lately, actually. Have you? Yes.

00:14:27 I will. So this is a blog post by Guido van Rossum doesn't blog often but there's usually some interesting bits when he when he wants to. So this, this is a post called Reading reasoning about async IO semaphore. So there's it starts off with a kind of a story about a restaurant so there's an analogy here about Okay, so you got into a restaurant, it's a fast food place but it only has one table and there's a line waiting for it and but you don't want to just wait in line so there's there's a way for you to get a buzzer says somebody hands you a buzzer, and you go wait. And when the tables open, your buzzer rings, and you can go, you go get seated and you can eat this sort of analogy, he talks about this with as a lock. And then so with concurrent programming, so only one one person can eat at a time. But then if you've got multiple tables, things get a little more interesting. So that's where semaphores come in. And that's, I love this, this mind shift of, of, in that this is often difficult for people when they're doing asynchronous programming to have this, like, lock makes sense, you know, you're either a thread or, or some code is using a resource, and it can and nobody else can, but at, but then then you unlock it, and somebody else can grab it. But what if there's like multiple, like three people can can at a time, those are some of the default, some a little bit of a mind shift. So I love this idea for a three table restaurant as a way to think about this analogy. And so he goes through the analogy, but then talks about locks and semaphores. And this is apparently to help him himself, even with the implementation of the semaphore, in in the new async IO code. So is in making sure that things like work correctly, and using a using an analogy to try to figure out how things are supposed to work. And like an error. So if you've got an exception happening, one of the problems can be It's like somebody get, but there they go, they're waiting, and they decide they don't want to wait anymore. So they go turn their buzzer in. Well, what happens if, while they're when they're just as they've decided to turn it in, but it's their turn, and they get buzzed, and they but they turned it in anyway, and they don't want to run? So they're never going to call the release code. And so with the, the, the common, the interaction between cancel and release, is, is is difficult. So there's, there's, there's all this stuff. And it's so cool to think about this in terms of a restaurant because it's easy to visualize. So any great article, and then at the end, he actually links to the the code that he was that he's finished writing. So the links to Yeah, correct code. So that's pretty cool. Right

00:17:15 on? Yeah, semaphores are, I would say, these are the things that many people don't really don't really think to grab and use. But they're so incredibly useful, like, so one example. Like, let's imagine your job is to go scan a bunch of URLs and ingest a bunch of data. And you're going to run that like 8am every day or whatever. If you've got 10,000 URLs, it would be way, way, way faster to use async. Io and HTTPS to kick off those requests. But if you just say for URL in URLs, start a task got 10,000 pending requests, and all that data is coming back into memory, and it's gonna you're gonna have a bad time, right? Yeah. So one thing you could do is you could create a semaphore and say, you know, I only want to allow 1020 100 inflight requests at a time and you just created a semaphore of 100. And you just pass it off to every task, and they just have to start at the beginning. And you know, acquire it and release it, boom, you're done. You've now created like, I only go in through 10 10,000 with a straightforward loop. And I'm doing nothing more than 100 at a time guaranteed. Yeah, beautiful. Right?

00:18:18 That's a really good analogy. I was I was trying to think of a good one where, because I was actually even looking through the Python code of, of any cases where they use more than one like, like, a semaphore with one is just like a lock. But if you can allow more than that, then it's then it gets interesting. So

00:18:36 yeah, absolutely. That's a good thing about similar. Yeah, thanks. Good thing about some of the things for like, databases, if it like really can't handle a ton of requests. Uh, one thing I know that he points out, I want to just give a quick shout out to any IO, I interviewed Alex, Alex from there, who've worked on it. And it's got a really cool idea. It's similar to the task groups and stuff that you talked about. And it has this thing called a capacity limiter, which is much like a, it's very much like a semaphore, but little more async native, because you can use it in async context manager like a with block async with so here I've created just a capacity to limiter of like my examples 100 And you just say what async with create a group for all the items, you know, task start soon pass loner and all the tasks, just do like async with this limiter, do whatever you're going to do, and boom, now you only get n up and running at a time to precise, very cool. Okay, that's not actually what I wanted to cover, though. I want to talk about some annoying stuff that got slightly less annoying. Security and preventing people from doing just bad stuff to your, your things online, right web apps and mostly web apps. You know, think about a forum people come in they're just like bots come in and start posting junk like I don't know why YouTube can't fix it. But I would say about one out of every three shows get some sort of like, disgusting um, see the come see the ladies over here sort of post with clearly text, I was like, Why is this still allowed, right? And you know, if you run a website, you're gonna run into those kinds of problems. So like we had big problems that talked about on training with a bunch of bots, creating free accounts. And they're just free. You don't get anything by creating an account. I don't know why they were doing it. But they they were. And so I, but they're doing it from hundreds or 1000s of different IPs. It was super annoying. So we ended up happening to put a reCAPTCHA on there. And every time I go to the site, and I've got a sign in, I'm like, oh, gosh, here come the crosswalk in the stoplights. And that's about a bus, there's no buses, what do you want me to do? You know, like how frustrating this. So CloudFlare, they're doing a bunch of interesting branching out of just being a CDN. And they've announced this thing called turnstile a user friendly privacy, preserving, preserving alternative to capture or recapture like reCAPTCHA is owned by Google. And like a lot of the stuff that you do there, it gets sent back over there. And it's, it's not ideal. So also, finding all the crosswalks not ideal. So this thing is something they announced. And it's free to use. Even if you don't have some kind of other reCAPTCHA thing, like you're not a customer, you just create an account for free, get an API key for this and use it. So here, if you go to the page that I'm linking to the blog@cloudflare.com, all that happens is you go there and it just spins for a second, it does the work in the magic that Cloudflare is already using to verify that you're a human and you're a real machine, and you maybe do some sort of like cost, make you run like a tight loop for a second or whatever. And then you're verified. And if it doesn't work, then you can click a little button and verify your human hopefully. But yeah, so this is pretty cool. You can now replace your reCAPTCHA with that. And it's pretty straightforward. Basically drop some JavaScript on to the page and a little widget, and then just put the widget in your forum. If somebody submits it, it comes without validation, like some sort of validation code that was created by Cloudflare. On the server side, you want to verify that because its presence isn't enough, because anybody could just send like garbage with the right form ID right. So there's, there's a server side API, you've got to call to validate that and make sure that yeah, this is actually it came from your domain, it just was created. It is a real one. It's a unique one and all those things. Oh, cool. Yeah. So anyway, if people want to use this, it seems pretty awesome. Over on talk Python, I switched the things over to and we'll see how it goes. So for example, if you want to get notified, notified about our mailing list, now you've got to wait about three quarters of a second before typing in your email address, unless you're like some kind of beast, and you could type it in like select the form, type your email address and hit subscribe before like a second is up, right. But that's pretty much it, you hit submit, and then it runs some magic on the server, right? But isn't doing this live in the checkout pipeline, or at checkout turnstile. There's a bunch of stuff up here. There's like rate limiting things and other stuff, but nothing about Cloudflare. So I created a for the moment it GitHub, just that has the server side implementation for anybody who wants to do this in Python, modern Pythonic way. Nice. Cool, right? So over here, you just need this one file. This one module, you can use here, this one's synchronous. But you could just as well use HTTP X and async. If you're wanting to do this validation in like an async view. So it has Pydantic models, like here's what you got to send over. And here's what you'll expect to get back from the API endpoint, some little examples, and then just has one function called validate given the thing they submitted in the form and their user IP, just so you have that as like part of your information of what happened. They need to know that. And that's it. It's kind of a cool example of seeing how to do like request response with, with Pydantic to API's as well.

00:23:40 That's pretty cool. Awesome.

00:23:42 Well, that's, that's a really good stuff. So here's the thing right now, it's not a package. I'm not trying to read more open source projects to manage however,

00:23:50 let's say if I was curious why you didn't make a package out of that? Well,

00:23:54 because I only did this like Monday, right? So it's only like, I will kind of wanted to stabilize a little if sufficiently many people shoot me a text on Twitter like a at mention, M Kennedy says, hey, please make this a package. So I can use it to more more directly or we can all contribute. Enough people do that. I'll I'll turn into a package. But I just haven't had the time because I've been playing with other stuff that I'll talk about in a minute. You can only have so many projects, you know? Yeah, yeah. All right. Well, that brings us to all of our main items, right? Yeah.

00:24:20 So one of the things for extras, I want to pop up just to briefly, I was looking at a so I was looking at, oh, let's go years to do you have any extras?

00:24:33 I do have some extras. So you go first, though, I have a ton. Okay.

00:24:36 So I just have a couple. So this this article says it's from test driven io.io. It Heroku alternatives for Python based applications. And to be fair, it's pretty fair to Heroku also, so really, it isn't, don't use Heroku. It is it's kind of like what are all the things you can use. So it goes through a Heroku, of course, but then it also goes through, does the posing some description and pros and cons for Digital Ocean app platform and render and fly it IO, and even some that some that we don't hear too much about like Engine Yard railway dot app. Railway light looks pretty cool. So it does look cool. So really having one person compared look at all of these and compare them. It's just kind of a nice thing to just hear what somebody has to say about all these different platforms that you might want to try out. So

00:25:32 yeah, yeah, that's a ton of that's a lot of reviews. Yeah, it's pretty neat. You know, these are all in the platform as a service equivalent. It looks like yeah, it's not like just a here's what you run VMs. Like, wow, okay, that's great. But it's not what Heroku was helping me with? Yeah. And

00:25:47 so that's actually one of the fair comments, it says, like, for instance, Heroku. One of the things it says the price can go up as it's not too bad, it's the start, but it can go up as you grow. And same with all of these really, but the end, it's how many times more than running it just directly on AWS. But it says be careful, because that's not a Platform as a Service is not a comparison, fair comparison to just running it all yourself, because then you have to do it all yourself, then by kind of paying the service instead of paying somebody to monitor it for you. So I think it's reasonable. So the other thing I wanted to bring up was, we brought it up last time, and maybe the time before the pipe, this course is going well. So I'm glad people are getting use use out of the pipe test course. But I wanted, I've been kicking around the idea of doing a cohort based thing, something like the pipe this course not the exact exact same content, but similar sorts of things, get people up to speed and do it as a cohort. And I'd like people to get in touch with me if they think that's a good idea. I'm thinking about maybe doing it in December, but I'm not sure December or January. So hit me up on Twitter, or you can get to the my contact form on testing code as well. It'll get to me, so yeah, let me know

00:27:04 those life events are really nice. Right? It's, it's it's a cool experience. So hopefully that that goes off. Yeah, that'd be neat. Indeed. All right. Would you believe that just last night, I was writing some C code? No, I typically do like a lot. Another semicolon, I forgot. Are you kidding me? I don't know why, but actually did a pretty good job without pulling up any references or anything. So more on that later. But I just want to give a quick shout out to this project called CPP front from herb Sutter. It's an experimental compiler for an alternative syntax to C++, I would make the language 10 times simpler, safer and more toolable. I think it basically is, as the name would say, like CPP front is like a slightly different language that compiles to C++. So it has interoperability and whatnot. People do a lot of C++, like for low level integration with Python and things might find this interesting. So you can jump over to the GitHub repo. And they have got some examples in here. Let me see if I think you've gotta maybe go check out the test or something like that. They don't have rate documentation. Up to it's just text show it to me, wait, no, it's not as Formax but it's okay. Anyway, it's, it's got some pretty, pretty funky syntax, but it also looks looks pretty fun. People can check that out. So if that's interesting, then then go for it. I don't know where I saw the ball examples or, or something. But I will they had some in here. What's different about this? Yeah, I find, oh, well, you can look through the notes here. They're the language it looks at hardly looks like C++, but it's still as the same kind of thing. What do you think about this? Brian, you do some C?

00:28:41 I don't. Well, I've been doing it for so long that I don't know if it's that hard to do C++. I mean, it's hard to get it right. But the but there's, I don't know that. We have a lot of help now with like, the modern compilers and linters and everything. But yeah. But I always that think I think it's a neat idea. If it's really easier. That little snippet you showed me didn't look easier. But

00:29:06 here's here's an example. If you check out this little graphic on the readme called it says cat hello dot CPP two. Okay. It looks a little bit like Python type pens. Doesn't it? Like the way you just specify the return value and stuff? Yeah, yeah. Anyway, could be fun. We'll see if it goes anywhere. All right, a few other things. TypeScript is definitely something that's that's going somewhere. Matt Kramer pointed out that Jeff glass has been doing a bunch of things with a script lately. So I want to highlight one thing, and then I'm going to dive into dive into it more next week. I just want to put this on people's radar. So pipe pie script. September edition is out with lots of changes on it. So probably the easiest way to see that is to click on this blog post I got down there. So if you've been doing a postscript you kind of want to know about this because it's like super breaking changes. So for example, used to have to say use the same pie In vi for configuring, like what libraries you would use and how you execute it, that thing's gone. Now you've got like a package section of a PI config and a path section for files. bunch of other things better logging, multiple runtimes upgraded pyridine and whatnot. But check that out. If you're doing postscript

00:30:20 nice. And they're not even zero over yet. Are there? Yeah. Well, calver

00:30:25 will get any some kind of like new calendar event or something. Yeah, cuz they're calver. Yep. Cool. Follow up. I talked about next DNS last time. That's like, basically, like for people do pie holes. It's like piehole, but it's on the internet, you don't have to manage it. I said, I didn't really try it out that much last time. So I went in. And I did an interesting experiment on the family, including myself, I went to the router, and I just changed it to use this blocking ad blocking malware blocking DNS as like for all the network, which is good, because like, my TV can no longer do bad things. But it was doing, you know, my kid gets ad blocking without knowing even visitors, I suppose. Right? And I was like, alright, well, let's see what breaks. Who has Michael I can't do this anymore. Like nothing broke, which is great. So I'm super psyched about that. And if you create it actually, you can create a free I've what I've learned is you get a free account for up to 300,000 DNS records a month. And if what happens after that is it just falls back to like Standard DNS with no blocking, which is pretty awesome. And there's like $2 in there's not an ad for them. Just I think it's pretty awesome. So I went and ran. I went to ad block dash tester.com. Okay, with Vivaldi with its max blocking, no plugins, no extensions for ad blocking just the built in one because I don't want to install more extensions. But with that turned on and the next DNS private DNS, I get 96 out of 100 on AdBlock tester with Brave I got 100 out of 100. It's pretty awesome. But even if I turn all the blocking off on Vivaldi, I still get 80 out of 100 just using that DNS is pretty awesome, right? It's like 80% Everything is just killed before ever gets through the network. Oh, I

00:32:11 was curious what the number was. So it's not at get through. It's a good blog.

00:32:15 It's at 80 blocked so you can actually scroll through, it'll show you like, the wild cat giffy wasn't blocked, the static image wasn't blocked, basically. But you know, pretty much everything else was was blocked. So okay. Yeah, pretty awesome. Yeah. And last thing here, one of the things you got to do to make this work, this is like a new extra. But it is like one flows into another one of the things you got to do to make this work is if your IP address changes, and you have a crap router, I have like an insanely good router that has crap configuration. Let's put it that way where I can't do h, I can't do IP over, sorry, DNS over HTTPS or setup any details. I can just say here's the four numbers for the DNS server. Yeah, right? Just the IP address. Well, if that's the way you do it, and you have some account that does blocking, you've got to go into your DNS account and associate your IP address with your account by just like clicking a button or calling an API endpoint. But what do you do when your IP address changes? How do you remember like all your ad blocking stops? Every time you know maybe the power goes out? You had like your things come back on and they get a new IP address. So I was like, Well, what can I do? I've always wanted to have like a little circuit Python project. That would be fun. So originally, I wanted to get a Raspberry Pi. Those are unattainable. It turns out if you tried to get a Raspberry Pi brine, not recently years ago, but yeah, I think they're like 3540 bucks for a new nice one. But they're all sold out. And you can find them on Amazon for like $200 people have bought them up and then are scalping them back to you on Amazon which is super lame. You can find them for about $100 on on eBay, right anyway, they're hard to get and then if you get them their way marked up and it's kind of frustrating. Well, what else could I use? So check this thing out. See, like I got on the screen here this this Adafruit ESP 32 dash s two feather is a full blown circuit Python and our Arduino basically for $17.50. And it's in stock. Nice. So I got that yesterday. And just to give you a sense of how small it is, like if you put it in your hand, it's probably two thirds the size of your hand and it's a full 240 megahertz computer four Meg's of RAM, Wi Fi, Bluetooth temperature, but the most important thing is Wi Fi make no doubt. And I see Paul Cutler out there. Yes, thank you, Paul. I was actually thinking of you last night when I was working on this. It took a bit of time to set up it was a little bit painful like getting it configured from originally it was Arduino which is C so as writing, I tried to do all this stuff in C which basically tried to like hold that endpoint and pull out my IP address and everything seemed fine except for nothing I could find supports HTTP S and C it only all all the rest parameters only supported HTTP unencrypted on like, what endpoint is unencrypted these days, what does this give me some requests. So I got a circuit Python going on it. And now it's happily sitting over there in the corner, sending me a little rake reports through like, sort of like Morse code through its LED. And then yeah, it's beautiful. I just plug into the power and it just goes constantly checks my IP address updates that that DNS setting periodically with an API. Okay, so it's

00:35:21 monitoring. And if you're, if your IP address changes, it uploads it, or

00:35:26 basically, it just has to call the API from the network. And that'll like go, wherever you're coming from, that's where we're, we're gonna treat you as being from Okay, nice. Yeah. You might say, Well, why don't just run that Python code on your computer, my computer is running a VPN, which is not the right IP address. So I kept all my devices I can't run it on. I don't want to run a whole computer for it. So like, this thing is incredibly small and cheap. And it was just a fun project. So nice. Cool, yeah. Yeah. So that was that was a lot of fun. A lot of learning a lot of differences with circuit Python, like similar, but then wait, why doesn't that work? Like, oh, I want to find out, you know, the relative path is oh, there is no path lib. Sorry. Oh, well, let me try again. Let me find some other way to answer that question. Oh, yeah, we're still fine. Yep. All right. Well, I those are all my items. I know I had a bunch of extras, but there they are. That's all right. Do we have a joke? Oh, you know, that we do. So follow on. Like one of the things I had last night, I was like, Why? Why can I get circuit Python installed in this and it was when it came out of the box from Adafruit. Maybe I'm missing something, but it didn't show up as a drive. It only could be communicated with over the serial port, right. And the way that you normally install circuit Python is you drag this bootloader just over the drive and it just restarts and off it goes. I'm like, Well, how do I get this on? It wouldn't work wouldn't work. And I'm like, I'm trying all these things. And eventually, I figured there's like a sequence of little clicks I got to do on like some of the buttons to like put it into a mode then I could do it. I could use some help. Okay, so this woman Annie here, she's got it figured out if I just went on to Stack Overflow or to read it, or whatever and posts that people just gonna ignore it right? They're gonna have whatever newbie he doesn't know what he's doing. Go away, however, and he has another idea. She says every time I have a programming question, I really need help I post it on Reddit and then I log in with another account to reply to it with an obscenely incorrect answer. People don't care about helping each other but they love correcting others. This works 100% of the time.

00:37:22 That's pretty funny. Yeah, that

00:37:25 works, too. Yeah. All right. If you went in there, like what you need to do is just type dash RM RM dash RF en forward slash and

00:37:35 yeah, it's a take a different take on it. So I used to do the similar thing of just post post a blog post with the wrong answer and in half or a bad tutorial and leave comments on and and then let people tell me what how much of an idiot I am and then delete that and write the real post.

00:37:54 Thank you. I incorporated your changes.

00:37:57 I tried to give people credit of course, but of

00:38:00 course, of course. Awesome. Well, here's a tip if people need help, you just got to have that secondary Reddit account to get in there and stir the pot or a friend. So ask my friend this right. Okay. Could you just come answer this really like with his bad answer?

00:38:16 Good idea. All right. Well, thanks again for a wonderful episode.

00:38:20 You bet. Lots of fun. Thanks for being here. See you later everyone. Bye bye.

