WEBVTT

00:00:00.001 --> 00:00:03.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:03.880 --> 00:00:10.100
your earbuds. This is episode 183, recorded May 19th, 2020. I'm Michael Kennedy.

00:00:10.100 --> 00:00:11.120
And I'm Brian Okken.

00:00:11.120 --> 00:00:15.060
And Brian, we have a special guest, Calvin Hendryx-Parker. Welcome, Calvin.

00:00:15.060 --> 00:00:16.160
Hey, guys. How are you doing?

00:00:16.160 --> 00:00:19.100
Doing super well. Great to have you here.

00:00:19.100 --> 00:00:19.920
Yeah.

00:00:19.920 --> 00:00:24.060
Awesome. Well, I'm excited to be on. This is my first time being on one of your podcasts,

00:00:24.060 --> 00:00:26.200
so I'm all giddy with the excitement.

00:00:26.200 --> 00:00:28.680
I'm very giddy as well. It's great to have you here.

00:00:28.680 --> 00:00:32.780
It's always nice to have a third person with a fresh perspective because Brian and I,

00:00:32.780 --> 00:00:36.720
we've given our perspective 183 times and people are probably able to guess

00:00:36.720 --> 00:00:41.020
for the most part what we're going to say, but not the jokes. The jokes are always original.

00:00:41.020 --> 00:00:44.600
Okay. Now, before we move on, I do want to say this episode is brought to you by DigitalOcean.

00:00:44.600 --> 00:00:48.600
Check them out at pythonbytes.fm/DigitalOcean. Get $100 credit for new users.

00:00:48.600 --> 00:00:51.960
Tell you more about that later. Brian, why don't you kick us off with something

00:00:51.960 --> 00:00:54.760
completely from 2001, like blogging?

00:00:54.760 --> 00:00:58.360
Like blogging. Yeah. So one of the things that we thought maybe

00:00:58.360 --> 00:01:02.740
there weren't enough ways to blog right now, there's actually tons of ways to blog.

00:01:02.740 --> 00:01:08.580
But this is kind of a neat thing. This is called Fast Pages and it comes from fast.ai.

00:01:09.380 --> 00:01:16.220
And it's a blogging platform that they say it's an easy to use blogging platform with enhanced support for Jupyter Notebooks.

00:01:16.220 --> 00:01:24.160
It's kind of put together. It's a, you know, where you write in Jupyter Notebooks and then you can also write markdown files.

00:01:24.160 --> 00:01:28.560
And for some reason, you can also write like Word doc files. But why would you do that?

00:01:28.760 --> 00:01:29.760
Blogging Word, baby.

00:01:29.760 --> 00:01:39.380
Weird. It has support for it anyway. And you can, for your pages and posts and whatever, and push it up to GitHub.

00:01:39.380 --> 00:01:47.400
It uses GitHub app actions to publish everything. It uses, I think it uses Jekyll on the backend to publish to GitHub pages.

00:01:47.640 --> 00:01:54.560
But it's all set up so that it's really fast to start. You can do things like Altair interactive visualizations.

00:01:54.560 --> 00:02:00.940
And you can have code that you can, code cells that you can hide and show or close by default if you want to.

00:02:00.940 --> 00:02:05.860
You can even do metadata like the title and summary. They go in special markdown cells.

00:02:06.520 --> 00:02:10.800
But you can even embed Twitter cards and YouTube videos and tag support and all that jazz.

00:02:10.800 --> 00:02:20.360
It actually looks pretty slick, to tell you the truth. If you want to publish something like a blog, but you're going to use Jupyter Notebooks on a daily basis anyway, this might be a good thing to check out.

00:02:20.360 --> 00:02:29.820
Yeah. Jupyter is nice, but it's not quite all the way there, right? It's still like the code is still shown on all the cells and they're not like collapsed like this.

00:02:29.820 --> 00:02:36.140
This is a really nice presentation format, I think. And the fact that you're not really running on your own platform, right?

00:02:36.140 --> 00:02:41.480
Like there's so many things where like, oh, I'm going to write my own blog and then now I have to run servers and patches.

00:02:41.480 --> 00:02:44.920
And like, wait a minute, why am I patching servers? Like, what have I gotten myself into?

00:02:44.920 --> 00:02:51.120
Whereas this just runs on GitHub pages. That's pretty cool. I like the Altair interactive visualizations, right?

00:02:51.120 --> 00:02:55.220
Because it's one thing to take a screenshot or a static image and put it up there.

00:02:55.220 --> 00:02:59.060
But if you've got live code and live interactions, that's pretty awesome, actually.

00:02:59.220 --> 00:03:06.600
So yeah, this kind of appeals to me. I'm not switching because I just, I don't have the energy for one more thing that I'm putting a lot of focus on, like a blog.

00:03:06.600 --> 00:03:12.740
I do blog, but not that much. But nonetheless, this looks really cool if you're, especially if you're in the Jupyter world.

00:03:12.740 --> 00:03:16.680
But now you've got to maintain your code on your blog page to make sure it always runs?

00:03:16.680 --> 00:03:18.660
That's right. That's right.

00:03:18.660 --> 00:03:20.260
Oh, you write tests for it. It'll be fine.

00:03:20.260 --> 00:03:21.420
Yeah, there we go. Okay. Yeah.

00:03:21.420 --> 00:03:21.860
Exactly.

00:03:22.120 --> 00:03:29.440
Yeah, no, I looked at this and I think this is a nice fresh take on like interactive code demonstrations in your blog.

00:03:29.440 --> 00:03:33.260
And to me, it's way better than just static code there with static pictures.

00:03:33.260 --> 00:03:39.420
Yeah. And I definitely, like I said, I think it's the best for people that are spending their day in Jupyter notebooks anyway.

00:03:39.980 --> 00:03:40.420
Yeah.

00:03:40.420 --> 00:03:44.080
And then it's going to be a natural place for them to be to write a blog with it.

00:03:44.080 --> 00:03:44.720
Yeah, absolutely.

00:03:44.720 --> 00:03:48.260
Yeah. Now, this next one that I want to cover, I'd not heard of.

00:03:48.740 --> 00:03:56.180
And I discovered it from Mahmoud Hashemi, who didn't realize that he had shared it with me, but he had like favorited it on GitHub.

00:03:56.180 --> 00:03:57.500
I'm like, whoa, wait, that looks cool.

00:03:57.500 --> 00:04:01.600
What, you know, just that little activity stream of people you follow on GitHub or whatever's happening.

00:04:02.660 --> 00:04:12.080
One of the things that I find lacking a lot of times is how you work with databases as sort of an admin side of things, right?

00:04:12.080 --> 00:04:16.480
Like if you're using Django, there's some kind of admin back in, you can sort of point at it.

00:04:16.480 --> 00:04:23.380
But if you're using like, you know, just SQLite and you don't have some web app to work with it, like, how do you work with it?

00:04:23.380 --> 00:04:24.980
I know there's a command line for working with it.

00:04:24.980 --> 00:04:28.780
You're right. DDL, data definition or description language, whatever that is.

00:04:28.780 --> 00:04:29.620
I don't want to do that.

00:04:29.620 --> 00:04:31.060
That doesn't sound fun at all to me.

00:04:31.520 --> 00:04:36.840
So what I want is a nice visual thing that is like a history of my most common searches, things like that.

00:04:36.840 --> 00:04:39.100
So there's this thing called Beekeeper Studio.

00:04:39.100 --> 00:04:40.400
Have you guys heard of this?

00:04:40.400 --> 00:04:41.160
I've not. No.

00:04:41.160 --> 00:04:42.080
No, I hadn't either.

00:04:42.080 --> 00:04:44.720
But if you go to their website, it is super polished.

00:04:44.720 --> 00:04:51.540
It certainly passes the Michael and Brian test of many screenshots and little animations because, hey, it's a UI thing.

00:04:51.540 --> 00:04:58.700
And what it is, is it's a really polished, free and open source SQL editor and database manager.

00:04:58.700 --> 00:05:00.500
It checks so many boxes.

00:05:00.620 --> 00:05:05.420
It talks to MySQL, Postgres, SQLite, Microsoft SQL server.

00:05:05.420 --> 00:05:08.280
It runs on all the things, Windows, Linux, macOS.

00:05:08.500 --> 00:05:14.120
It has a bunch of cool features.

00:05:14.120 --> 00:05:22.860
You know, you know, you're going to have your database server over SSH tunnels, which is really nice because you typically don't want to have your database out in, you know, DigitalOcean or wherever.

00:05:22.860 --> 00:05:24.400
Listen on the Internet.

00:05:24.840 --> 00:05:35.680
That's just asking to be in the headlines of, you know, company X has lost all their data and is now, you know, you now get everyone gets free credit monitoring for a year.

00:05:35.680 --> 00:05:36.300
Thanks.

00:05:36.300 --> 00:05:36.620
Right.

00:05:36.660 --> 00:05:37.280
You don't want that.

00:05:37.280 --> 00:05:41.940
So you can have like the database lockdown, but still SSH over to the server and then just tunnel.

00:05:42.040 --> 00:05:45.060
But this has like built in stuff for that cool tab interface.

00:05:45.060 --> 00:05:48.760
It has autocomplete for your SQL queries, which is really nice.

00:05:48.760 --> 00:05:50.640
So like your table schema.

00:05:50.640 --> 00:05:59.500
So, you know, you could pull up table name dot and it'll drop down all the columns in like your where clauses or your select clause, which I think is super nice.

00:05:59.760 --> 00:06:07.240
It has kind of an Excel view where you can just pull up the data in the table and like filter it and sort it by clicking on the columns.

00:06:07.240 --> 00:06:11.480
So you don't have to be super good at knowing that by default as a dark theme.

00:06:11.480 --> 00:06:12.260
That's pretty cool.

00:06:12.260 --> 00:06:12.920
Yeah.

00:06:12.920 --> 00:06:14.740
So, you know, it's for series programmers.

00:06:14.740 --> 00:06:16.220
Yeah, it's legit, baby.

00:06:16.220 --> 00:06:18.360
It is totally legit because it's default.

00:06:18.360 --> 00:06:19.660
You have a dark theme for sure.

00:06:19.660 --> 00:06:20.440
That's right.

00:06:20.440 --> 00:06:20.900
That's right.

00:06:20.900 --> 00:06:24.100
So there's just a bunch of cool things like you can save your most common queries.

00:06:24.220 --> 00:06:29.920
There's like a favorites queries section on the left that you can just pull up your common queries and like rerun them.

00:06:29.920 --> 00:06:34.860
If you got to do a report or something, you always have to ask about like you can run that, which I don't know.

00:06:34.860 --> 00:06:36.380
This seems like a really nice tool.

00:06:36.380 --> 00:06:38.960
And I'm telling you, it is worth every penny you pay for it.

00:06:38.960 --> 00:06:40.000
Is it free?

00:06:40.000 --> 00:06:41.020
It's free.

00:06:41.020 --> 00:06:41.880
Yeah, it's free and open source.

00:06:41.880 --> 00:06:49.080
I installed it and I connected it to some little SQLite toy things projects from my courses that I was working on and it came out great.

00:06:49.080 --> 00:06:50.380
So how do we keep them in business?

00:06:50.380 --> 00:06:52.020
Sounds like we need to keep them in business somehow.

00:06:52.020 --> 00:06:53.900
I know we don't want this to go away.

00:06:54.560 --> 00:06:55.640
But yeah, it's nice.

00:06:55.640 --> 00:06:59.500
Over on GitHub, they've got quite a few stars, 1.4 thousand.

00:06:59.500 --> 00:07:01.100
So it's pretty new.

00:07:01.100 --> 00:07:04.460
I'm not sure how long they've been around, but I'm excited to see them here.

00:07:04.460 --> 00:07:04.800
It's great.

00:07:04.800 --> 00:07:05.420
Yeah, nice.

00:07:05.420 --> 00:07:05.980
Well done, people.

00:07:05.980 --> 00:07:08.440
All right, Calvin, what do you got for your first item here?

00:07:08.440 --> 00:07:16.340
So my first item on the docket is the second annual Python web conference, which I'm actually one of the co-organizers of this web conference.

00:07:16.340 --> 00:07:20.700
So I'm excited to come on here and tell you all about this amazing event that's coming up.

00:07:21.140 --> 00:07:25.620
We did this last year and we thought it was a pretty good success.

00:07:25.620 --> 00:07:27.440
And so we wanted to actually continue that tradition.

00:07:27.440 --> 00:07:31.800
And it seemed to fall perfectly within all these conferences converting to virtual conferences.

00:07:31.800 --> 00:07:34.140
We are a virtual first conference.

00:07:34.140 --> 00:07:37.020
This was not a planned change to virtual.

00:07:37.020 --> 00:07:39.320
We're really doing this for real as a virtual conference.

00:07:39.580 --> 00:07:43.560
Just to be clear, you guys did this last year when it was not required to be virtual.

00:07:43.560 --> 00:07:43.940
Right.

00:07:43.940 --> 00:07:47.900
When it was not hip and cool to be a virtual remote conference.

00:07:47.900 --> 00:07:50.040
We're at least a year ahead of your time.

00:07:50.040 --> 00:07:50.640
We are.

00:07:50.640 --> 00:07:58.600
I'd like to think I'm a trailblazer when it comes to some of these things, but I'm only taking credit for the amazing work done by the people who are certainly behind me doing all the real work.

00:07:58.600 --> 00:08:04.060
But we're basically putting on what we're calling the most in-depth Python conference for web developers.

00:08:04.060 --> 00:08:06.240
I don't know if you all have been to Python.

00:08:06.240 --> 00:08:11.280
There seems to be a lack of web and production level talks going on there these days.

00:08:11.280 --> 00:08:12.980
Well, it kind of goes back a long ways.

00:08:13.080 --> 00:08:21.600
So we felt like this was a gap in the Python ecosystem for folks to come and talk about production use of Python on the web.

00:08:21.600 --> 00:08:26.660
So we're going to have talks on Django, Flask, Twisted, lots of testing talks.

00:08:26.660 --> 00:08:29.980
So maybe I'll draw certain folks from this audience in who like testing.

00:08:29.980 --> 00:08:33.460
SQLAlchemy, containers, deployment, like tons of stuff like that.

00:08:33.460 --> 00:08:38.840
So it's going to be a bunch of cool web talks and just kind of three tracks.

00:08:38.840 --> 00:08:40.260
So it's actually going to be three days.

00:08:40.580 --> 00:08:43.220
It is June 17th to the 19th.

00:08:43.220 --> 00:08:45.080
So make sure you mark that on your calendar right now.

00:08:45.080 --> 00:08:48.160
I would love if you went and bought a ticket right now, but go ahead and mark that on your calendar.

00:08:48.160 --> 00:08:48.920
Save the date.

00:08:48.920 --> 00:08:50.520
There'll be a full day of tutorials.

00:08:50.520 --> 00:08:55.800
So there'll be six tutorials, three in the morning, three in the afternoon, two days of talks with three tracks.

00:08:55.800 --> 00:08:57.460
We've got some awesome keynote speakers.

00:08:57.460 --> 00:09:01.360
So Lorena Mesa from the Python's Offer Foundation is going to be one of our keynotes.

00:09:01.360 --> 00:09:06.640
We've got Hennick, Russell Keith McGee, who gave a keynote at PyCon two years ago.

00:09:06.640 --> 00:09:07.600
That was in 18.

00:09:07.600 --> 00:09:08.540
Yeah, I think so.

00:09:08.540 --> 00:09:09.980
It depends if you count this one.

00:09:09.980 --> 00:09:10.180
Yeah.

00:09:10.280 --> 00:09:10.640
Right.

00:09:10.640 --> 00:09:17.060
So he'll be coming back and hopefully giving some more insights into, I'd love to see what

00:09:17.060 --> 00:09:19.400
he thinks kind of post Black Swan era.

00:09:19.400 --> 00:09:21.420
If you remember his talk from PyCon.

00:09:21.420 --> 00:09:22.820
That was a super good talk.

00:09:22.820 --> 00:09:24.040
Yeah, it was a super good talk.

00:09:24.040 --> 00:09:25.220
And that's why I've been really, really excited.

00:09:25.220 --> 00:09:29.460
He decided to kind of join my merry band and go on an adventure with all of us.

00:09:29.460 --> 00:09:31.060
We'll have some fireside chats.

00:09:31.060 --> 00:09:33.920
So during lunch, there's going to be, I don't know if you all are familiar with Carl Meyer,

00:09:33.920 --> 00:09:35.240
but he works for Instagram.

00:09:35.240 --> 00:09:37.020
He's in their infrastructure team.

00:09:37.260 --> 00:09:40.540
And so he's really available to talking about best practices.

00:09:40.540 --> 00:09:42.560
So we'll ask all kinds of deep questions.

00:09:42.560 --> 00:09:46.800
And actually, I've just enjoyed talking to him to no end about how things actually work in

00:09:46.800 --> 00:09:48.840
the real world for some of these kinds of things.

00:09:48.840 --> 00:09:51.260
You know, not everyone's doing microservices to the hilt.

00:09:51.260 --> 00:09:55.040
Like there are people who are running real things that are just Django monoliths and they still

00:09:55.040 --> 00:09:56.700
work and they're kind of tried and true.

00:09:57.100 --> 00:10:00.660
So there'll be a 40 presentation, 40 plus presentations, six tutorials.

00:10:00.660 --> 00:10:02.280
Fun will be had by all.

00:10:02.280 --> 00:10:03.660
Hopefully connections will be made.

00:10:03.660 --> 00:10:09.920
We really work hard at making sure that these kinds of virtual events are maybe overly stimulating

00:10:09.920 --> 00:10:13.100
so that you've got lots to do and kind of lots to interact with.

00:10:13.100 --> 00:10:16.800
There will be, you know, kind of virtual cocktail hours afterwards, online gaming.

00:10:16.800 --> 00:10:19.340
So we had a Mario Kart tournament at our last virtual conference.

00:10:19.560 --> 00:10:22.520
And we're going to bring back our board game night.

00:10:22.520 --> 00:10:27.540
And so actually, as part of the conference registration, you'll be sent a pre-swag pack

00:10:27.540 --> 00:10:30.160
that'll include something for the board game night.

00:10:30.160 --> 00:10:32.880
So if you actually want to play one of the games, we're going to give every player, every

00:10:32.880 --> 00:10:34.620
person who attends what they need.

00:10:34.620 --> 00:10:37.080
And actually, you don't need to have that to play, but we're going to have some specially

00:10:37.080 --> 00:10:40.260
themed ones made specifically for Python web conference.

00:10:40.260 --> 00:10:44.620
You point like your webcam at it and everyone sets it up in the initial state and like keep

00:10:44.620 --> 00:10:45.100
syncing it.

00:10:45.180 --> 00:10:48.160
Well, okay, so I'll kind of get a little bit of the cat out of the bag, but we're going

00:10:48.160 --> 00:10:48.740
to play Skull.

00:10:48.740 --> 00:10:49.720
Have you ever played Skull?

00:10:49.720 --> 00:10:50.840
It's a bluffing game.

00:10:50.840 --> 00:10:51.720
It's a lot of fun.

00:10:51.720 --> 00:10:53.220
So basically, everyone has four coasters.

00:10:53.220 --> 00:10:56.000
I mean, it looks like the coasters, you know, look kind of like, you know, just a round circular

00:10:56.000 --> 00:10:56.860
cardboard coaster.

00:10:56.860 --> 00:11:00.060
Three of them have flowers typically, and one has a skull on it.

00:11:00.060 --> 00:11:04.340
So it's a bluffing game to see how many flowers you can acquire before you rented somebody's

00:11:04.340 --> 00:11:05.360
skull or your own skull.

00:11:05.360 --> 00:11:08.960
So we're going to do a Python themed version of that with a web slant.

00:11:08.960 --> 00:11:10.480
So it should be pretty, pretty cool.

00:11:10.480 --> 00:11:11.700
I'm looking forward to that.

00:11:11.700 --> 00:11:12.280
That sounds fun.

00:11:12.360 --> 00:11:12.520
Yep.

00:11:12.520 --> 00:11:15.580
So the tickets are $199 and $99 for students.

00:11:15.580 --> 00:11:19.840
Now, as a bonus, there is a perfect for every professional ticket purchased.

00:11:19.840 --> 00:11:23.300
We're going to donate a ticket to an attendee in a developing country.

00:11:23.300 --> 00:11:27.440
So we want to be able to get people who couldn't normally even make it to a physical conference

00:11:27.440 --> 00:11:28.560
at this event.

00:11:28.560 --> 00:11:32.460
You know, if you're in the middle of Africa or some far off place, and you couldn't normally

00:11:32.460 --> 00:11:36.080
get to a conference like this, we want to make sure you can attend and actually connect

00:11:36.080 --> 00:11:37.440
with the Python web community.

00:11:37.440 --> 00:11:38.540
So I'm pretty excited about that.

00:11:38.960 --> 00:11:41.760
And then I do have a discount code for the Python Bytes listeners.

00:11:41.760 --> 00:11:46.120
There will be a 20% discount code if you just use the code PB20.

00:11:46.120 --> 00:11:49.020
And you guys will get a 20% off discount.

00:11:49.020 --> 00:11:49.340
Nice.

00:11:49.340 --> 00:11:50.820
Yeah, that sounds like a fun conference.

00:11:50.820 --> 00:11:56.920
I really like that you're taking the digitally native approach in the conference, because I

00:11:56.920 --> 00:11:59.940
feel like there's a lot of attempts at this right now.

00:11:59.940 --> 00:12:01.960
And we'll see what sticks.

00:12:02.100 --> 00:12:03.920
But everyone's trying to reinvent conferences.

00:12:03.920 --> 00:12:06.500
And this feels like a pretty good attempt at it.

00:12:06.500 --> 00:12:10.960
I've attended a couple recently where they kind of took conference skeuomorphism to an extreme.

00:12:10.960 --> 00:12:16.220
Like you kind of VR style walked into an expo hall and kind of clicked to go through a hall.

00:12:16.220 --> 00:12:20.940
And you're sitting in front of a screen with like Mystery Science Theater 3000 style, like,

00:12:20.940 --> 00:12:22.520
you know, characters sitting in front of you.

00:12:22.520 --> 00:12:22.960
Yeah, yeah.

00:12:22.960 --> 00:12:25.280
The silhouettes of people in front of you.

00:12:25.280 --> 00:12:26.380
That's not the way to go.

00:12:26.380 --> 00:12:27.520
Then that's not what this is.

00:12:28.000 --> 00:12:31.300
Yeah, I saw I saw something where they're like, oh, we'll make it totally real.

00:12:31.300 --> 00:12:35.660
You've got to go check in with a real person before they'll let you into the virtual conference

00:12:35.660 --> 00:12:36.440
and stuff like that.

00:12:36.440 --> 00:12:37.340
Yeah, no, no, no, no.

00:12:37.340 --> 00:12:38.360
It's interesting.

00:12:38.360 --> 00:12:38.880
Yeah.

00:12:38.880 --> 00:12:39.240
Yeah.

00:12:39.240 --> 00:12:41.200
So Microsoft Build is running right now.

00:12:41.200 --> 00:12:43.820
And they're, you know, trying to figure out what they're doing there.

00:12:43.820 --> 00:12:47.420
It didn't look super good to me this morning, the way the experience was going.

00:12:47.420 --> 00:12:49.280
But, you know, they're doing it for a week.

00:12:49.280 --> 00:12:51.000
So we'll or three or four days.

00:12:51.000 --> 00:12:53.120
So I don't know, maybe that'll be an example as well.

00:12:53.120 --> 00:12:54.660
AWS just did their summit.

00:12:54.660 --> 00:12:57.680
I didn't hear very good things about that as well.

00:12:57.900 --> 00:12:59.040
Well, it's a big challenge.

00:12:59.040 --> 00:13:02.720
And there's a possibility that I might be speaking to this conference.

00:13:02.720 --> 00:13:03.540
Oh, that's right.

00:13:03.540 --> 00:13:04.700
How could I forget?

00:13:04.700 --> 00:13:08.040
We do have if you go look at the speakers page, I'm super excited.

00:13:08.040 --> 00:13:11.180
I mean, it is a who's who of Python web community.

00:13:11.180 --> 00:13:14.760
It just kind of speaks to the volumes of like the confidence these people have that we can

00:13:14.760 --> 00:13:17.560
pull this off, that they're here to speak for this conference.

00:13:17.560 --> 00:13:18.380
Yeah, very cool.

00:13:18.380 --> 00:13:18.980
All right.

00:13:18.980 --> 00:13:21.000
Well, I definitely think it's going to be a fun event.

00:13:21.000 --> 00:13:21.880
People can check it out.

00:13:21.880 --> 00:13:24.340
Obviously, links in the show notes and the discount code.

00:13:24.340 --> 00:13:27.420
Now, speaking of web and running stuff in the cloud.

00:13:27.800 --> 00:13:29.560
DigitalOcean sponsoring the show.

00:13:29.560 --> 00:13:30.360
Very cool place.

00:13:30.360 --> 00:13:35.420
They just launched their virtual private cloud and their new trust platform, which makes it

00:13:35.420 --> 00:13:39.600
easier to run secure code in the cloud with some confidence.

00:13:39.600 --> 00:13:45.160
So VPC, it's kind of like a virtual private network, but it allows you to create multiple

00:13:45.160 --> 00:13:47.080
private networks for your whole team.

00:13:47.140 --> 00:13:51.360
And then you can stick your VMs where they need to go to make them to talk to different

00:13:51.360 --> 00:13:51.760
things.

00:13:51.760 --> 00:13:57.400
So I recently set up a whole bunch of complex firewall rules for all of our various servers

00:13:57.400 --> 00:13:58.500
that need to talk to each other.

00:13:58.500 --> 00:14:00.840
And it would be really nice to just click them in here.

00:14:00.960 --> 00:14:03.080
But I set those up before this existed.

00:14:03.080 --> 00:14:04.780
Hence, I did it that way.

00:14:04.780 --> 00:14:06.180
So this is really a nice feature.

00:14:06.180 --> 00:14:09.680
It can auto generate your private network IP addresses.

00:14:09.680 --> 00:14:13.480
So you can control them or you can specify how you want them generated.

00:14:13.720 --> 00:14:18.000
And you can even configure some of the droplets to behave as internet gateways to kind of act

00:14:18.000 --> 00:14:22.060
as a outbound area or place for those various private clouds.

00:14:22.060 --> 00:14:22.700
So that's cool.

00:14:22.700 --> 00:14:27.480
And then their trust platform is like a microsite with all sorts of information about security

00:14:27.480 --> 00:14:28.660
and running stuff in the cloud.

00:14:29.220 --> 00:14:34.220
So check them out at pythonbytes.fm/digitalocean, $100 credit for new users.

00:14:34.220 --> 00:14:37.320
And so go out there and build something awesome and make it a little more secure.

00:14:37.320 --> 00:14:37.760
Wonderful.

00:14:37.760 --> 00:14:38.120
Yeah.

00:14:38.120 --> 00:14:44.780
You mean, I mean, secure, like real honest data, no fake data, no fake news, none of that.

00:14:44.780 --> 00:14:45.460
No fake news.

00:14:45.460 --> 00:14:46.940
If only there was a fake news generator.

00:14:46.940 --> 00:14:48.960
There probably is.

00:14:48.960 --> 00:14:51.500
So if anybody knows a fake news generator, let us know.

00:14:51.500 --> 00:14:52.160
Be fun.

00:14:52.160 --> 00:14:56.600
As far as fake goes, we were talking about, I have no idea how to pronounce this.

00:14:56.600 --> 00:14:57.540
Anybody want to try?

00:14:58.080 --> 00:15:00.200
It's M-I-M-E-S-I-S.

00:15:00.200 --> 00:15:00.840
Mimesis.

00:15:00.840 --> 00:15:01.520
Mimesis.

00:15:01.520 --> 00:15:03.300
I've actually used this tool in the past.

00:15:03.300 --> 00:15:05.300
And this is a party game I love to play.

00:15:05.300 --> 00:15:09.580
You describe an open source project and you see how everyone will pronounce it.

00:15:09.580 --> 00:15:09.880
Okay.

00:15:09.880 --> 00:15:12.120
Anyway, maybe Mimesis?

00:15:12.120 --> 00:15:12.780
Mimesis?

00:15:12.780 --> 00:15:13.960
Anyway, I don't know.

00:15:13.960 --> 00:15:15.520
But it's a fake data generator.

00:15:15.520 --> 00:15:18.880
And I was reading it thinking, don't we already have fake generators?

00:15:18.880 --> 00:15:22.380
There are a handful of other fake data generators around.

00:15:22.380 --> 00:15:24.440
But this one looks pretty cool.

00:15:24.980 --> 00:15:29.720
It helps generate fake data in a variety of purposes and variety of languages.

00:15:29.720 --> 00:15:32.300
It's actually got over 33 locales.

00:15:32.300 --> 00:15:38.240
So you can get like, you know, Russian names and Spanish names and all sorts of stuff like that.

00:15:38.240 --> 00:15:48.140
But the localization also goes to things like you can, if you have addresses and food descriptions and people names and things like that can be localized.

00:15:48.140 --> 00:15:49.180
And that's pretty neat.

00:15:49.180 --> 00:15:50.820
Different phone numbers as well.

00:15:50.820 --> 00:15:53.220
So there's a whole bunch of different locales you can do.

00:15:53.220 --> 00:15:55.360
Supposedly, it's super fast.

00:15:55.560 --> 00:16:02.260
They posted their benchmark of 10,000 full names of Faker versus Mimesis.

00:16:02.260 --> 00:16:03.020
Mimesis?

00:16:03.020 --> 00:16:06.860
And then they were like 60 times faster, which is pretty cool.

00:16:06.860 --> 00:16:12.500
The thing I was really impressed with, it was one of the features is a data generation by schema.

00:16:12.740 --> 00:16:19.620
So you describe kind of the shape of some data and the different types of things.

00:16:19.620 --> 00:16:32.240
Like maybe, and we're putting in the show notes a description of a structure that has a name and an ID and a version, timestamp and owner information like email and creator name, full name, things like that.

00:16:32.620 --> 00:16:36.460
And then you can just generate from that schema, you can create a bunch of those.

00:16:36.460 --> 00:16:39.240
And that's pretty darn neat, I think.

00:16:39.240 --> 00:16:41.080
I think I could use this really readily.

00:16:41.080 --> 00:16:43.400
Yeah, we were talking about building web apps and stuff.

00:16:43.400 --> 00:16:53.140
And one of the things that makes it really hard is you've got all this HTML and these loops in your templates and all that kind of stuff and CSS that's going to describe.

00:16:53.140 --> 00:16:56.120
If I had data here, this is how it would look.

00:16:56.120 --> 00:17:01.420
And often you end up with no data or like just a few letters here or there.

00:17:01.540 --> 00:17:06.100
So having like legitimate looking data is really nice helping you design your apps.

00:17:06.100 --> 00:17:18.340
Or if you're trying to anonymize something for some kind of data science thing, you just want to like, I want to randomly put in something here, but I want it to seem normal, but not be actually tied to the person.

00:17:18.340 --> 00:17:19.480
This looks really cool.

00:17:19.480 --> 00:17:26.460
Yeah, especially useful like in Django projects when you want to have a fixture to load up some personally identifying information ahead of time for the developers.

00:17:26.660 --> 00:17:31.800
You don't want to have them grab the production data and have that liability sitting on their local disk.

00:17:31.900 --> 00:17:32.820
Yeah, yeah, exactly.

00:17:32.820 --> 00:17:36.300
There's interesting different classes that generate things.

00:17:36.300 --> 00:17:38.660
So there's obviously like a person.

00:17:38.660 --> 00:17:41.520
There's always called person, human, something like that.

00:17:41.520 --> 00:17:41.840
Let's see.

00:17:41.840 --> 00:17:42.620
Yeah, person.

00:17:43.020 --> 00:17:47.620
So it has things like you might expect, like an age and an email and a name.

00:17:47.620 --> 00:17:55.760
But it also has an avatar, which is a link to a graphic as an academic degree, like whether or not you have a bachelor's degree or master's degree.

00:17:56.360 --> 00:18:03.680
It has like nationality, occupation, political view, all these interesting different things.

00:18:03.680 --> 00:18:06.880
And they also take on different locales.

00:18:06.880 --> 00:18:08.260
There's a science one.

00:18:08.260 --> 00:18:13.540
So in the science one, you can have an atomic number, a chemical element, a DNA sequence, an RNA sequence.

00:18:13.540 --> 00:18:17.140
There's just a bunch of funky different types of data you can generate here.

00:18:17.140 --> 00:18:17.720
It looks pretty cool.

00:18:17.720 --> 00:18:29.560
Yeah, I was looking through things like software development, things like operating system, random operating system, random programming language, software license, things like that.

00:18:29.560 --> 00:18:30.320
That's pretty cool.

00:18:30.320 --> 00:18:30.560
Right.

00:18:30.560 --> 00:18:31.700
Like, what was it?

00:18:31.700 --> 00:18:33.320
OS 32 or what was it called?

00:18:33.320 --> 00:18:34.100
OS 2.

00:18:34.100 --> 00:18:34.620
Yeah.

00:18:34.620 --> 00:18:36.720
This is a cool find.

00:18:36.720 --> 00:18:44.720
And I have another one that's kind of in that same space, also with a bit of a web slant called Schema Thesis.

00:18:44.720 --> 00:18:46.320
Oh, this is cool.

00:18:47.320 --> 00:19:03.540
So the idea is you've got an API and the API is documented with something like OpenAPI 3 or Swagger or something like that, which is a bunch of HTTP endpoints and then descriptions of the data is exchanged.

00:19:03.540 --> 00:19:04.020
Right.

00:19:04.020 --> 00:19:04.940
Here's the endpoint.

00:19:04.940 --> 00:19:10.260
Here's the JSON document or God forbid, XML document.

00:19:10.260 --> 00:19:11.080
I almost said there.

00:19:11.080 --> 00:19:11.520
Right.

00:19:11.520 --> 00:19:13.200
But here's the thing being exchanged.

00:19:13.200 --> 00:19:13.540
Right.

00:19:14.040 --> 00:19:21.140
And then you would hope that the actual service actually exchanged data that looked like it described it exchanged.

00:19:21.140 --> 00:19:21.420
Right.

00:19:21.420 --> 00:19:30.020
So this project basically tests for conformance with the API as you declare it in your own documentation.

00:19:30.020 --> 00:19:31.080
That's pretty nice.

00:19:31.080 --> 00:19:33.900
It supports those two formats that I said, Swagger and OpenAPI.

00:19:34.120 --> 00:19:41.100
And it's built with Hypothesis, Hypothesis, JSON schema and, drum roll please, pytest.

00:19:41.100 --> 00:19:41.420
Yay.

00:19:41.420 --> 00:19:41.880
Yay.

00:19:41.880 --> 00:19:50.580
So the idea is it reads your application schema and then using Hypothesis, it will generate test cases that ensure your application is compliant with its own schema.

00:19:50.580 --> 00:19:51.320
That's pretty cool.

00:19:51.400 --> 00:19:51.560
Yeah.

00:19:51.560 --> 00:19:52.620
And it works in two ways.

00:19:52.620 --> 00:19:55.380
You can write tests with pytest, obviously.

00:19:55.380 --> 00:19:56.240
It's kind of meta.

00:19:56.240 --> 00:20:00.760
But then write tests with pytest and write code to talk to these things.

00:20:01.100 --> 00:20:15.180
It seems like maybe the predominant way actually to do it is through this command line interface where you can point it at a URL, at the schema definition, the documentation, and then the actual endpoints.

00:20:15.180 --> 00:20:18.100
And it'll just go and do all that work, which is pretty cool.

00:20:18.100 --> 00:20:18.800
Yeah, that's neat.

00:20:18.880 --> 00:20:20.240
Yeah, you can also parallelize it.

00:20:20.240 --> 00:20:24.220
You can pass the number of workers for concurrent test execution.

00:20:24.220 --> 00:20:43.300
Also, if you're testing something that has an app, as in Flask or AIoHTP or something like that, instead of firing up a thing that goes through the network, that goes through the whole serialization layer and hits some running thing, it'll actually just load up your app and run it in process.

00:20:43.300 --> 00:20:44.240
Right?

00:20:44.240 --> 00:20:47.780
As if you were doing unit testing against your Flask or AIoHTP app.

00:20:48.200 --> 00:20:55.540
So you can give it directly just the, basically the package or the module, and it'll just run it like without the web infrastructure in between.

00:20:55.540 --> 00:20:57.320
Yeah, so that probably speeds things up quite a bit.

00:20:57.320 --> 00:20:57.560
Yeah.

00:20:57.560 --> 00:20:59.840
Yeah, at least you don't have to have a server running somewhere.

00:20:59.840 --> 00:21:05.860
So it's probably also easier for CI, CD, because there's not a second thing to be running to then talk to.

00:21:05.860 --> 00:21:08.560
You just run it straight out of thin air.

00:21:08.560 --> 00:21:11.940
And then also, Calvin, you're talking about being keen on Docker.

00:21:11.940 --> 00:21:15.240
This CLI also can run as a Docker image.

00:21:15.240 --> 00:21:18.620
So there's like no setup other than just Docker run this.

00:21:18.620 --> 00:21:19.460
Live in the dream.

00:21:19.460 --> 00:21:20.420
Live in the dream, baby.

00:21:20.420 --> 00:21:22.960
It's always going to work as long as you have Docker.

00:21:22.960 --> 00:21:25.860
Anyway, that looks like a pretty cool thing.

00:21:25.860 --> 00:21:27.600
And there's a little example in here.

00:21:28.060 --> 00:21:34.300
It's not super clear to me, like how, how to put specific use cases into the code test.

00:21:34.300 --> 00:21:36.780
So that's why I say I think the CLI is kind of the way to go.

00:21:36.780 --> 00:21:45.960
Like there's ways to write code and it uses a primarization through hypothesis, but it's, it's a little bit generic, I guess, on what you would assert for.

00:21:46.500 --> 00:21:54.980
Anyway, if you've got APIs and they're already documented with Swagger or OpenAPI, this seems like a cool thing to point at it just to make sure that it's hanging together.

00:21:54.980 --> 00:21:55.700
Yeah, very nice.

00:21:55.700 --> 00:21:57.400
I wanted to give this a try sometime.

00:21:57.400 --> 00:21:57.680
Yeah.

00:21:57.680 --> 00:21:59.020
More testing is always better.

00:21:59.280 --> 00:22:00.500
Especially if it's one line.

00:22:00.500 --> 00:22:01.060
Yeah.

00:22:01.060 --> 00:22:01.920
I don't want to work to write that.

00:22:01.920 --> 00:22:05.000
All right, Gavin, what's this last one here?

00:22:05.000 --> 00:22:05.260
All right.

00:22:05.260 --> 00:22:11.620
So the last one up here, there has been a lot of people combing public code repositories looking for secrets.

00:22:11.620 --> 00:22:18.600
And a lot of the tools have been disregarding some common places secrets might be, be stuffed away.

00:22:18.600 --> 00:22:18.960
So.

00:22:18.960 --> 00:22:19.240
Right.

00:22:19.240 --> 00:22:20.880
So they look at like JSON files.

00:22:20.880 --> 00:22:25.560
They look at .py, .js, like it's embedded in code or maybe a .ini.

00:22:25.560 --> 00:22:26.240
Yeah.

00:22:26.240 --> 00:22:29.200
So they're not looking for maybe byte compiled code.

00:22:29.200 --> 00:22:33.320
So actually there's a blog post here by Jesse Lee.

00:22:33.320 --> 00:22:38.360
And I really enjoyed it because it's finding secrets by decompiling Python bytecode in public repositories.

00:22:38.360 --> 00:22:47.640
I mean, it's really common for maybe people new to Python not to realize that those PYC files could contain possibly sensitive information.

00:22:47.640 --> 00:22:56.440
So a lot of common patterns might be put your secrets into files like settings.py or config.py or secrets.py and then gitignore the PY file.

00:22:56.440 --> 00:23:02.380
But you could be accidentally still inserting the PYC file, which is the byte compiled version of that file.

00:23:02.380 --> 00:23:02.880
All right.

00:23:02.880 --> 00:23:05.080
Like a dunderpy cache.

00:23:05.080 --> 00:23:05.600
Yes.

00:23:05.860 --> 00:23:09.120
So settings.py is probably something you could look for, huh?

00:23:09.120 --> 00:23:09.540
Right.

00:23:09.540 --> 00:23:15.740
So you should probably leverage whatever tools you're using to make sure you get a stock like Python gitignore file.

00:23:15.740 --> 00:23:23.680
So if you're using like PyCharm and you have the gitignore module installed, like it'll tell you like, do you want to generate the stock gitignores for your type of project?

00:23:23.680 --> 00:23:25.840
And it'll put a bunch of stuff like right in there for you.

00:23:25.840 --> 00:23:27.520
You should do that for sure.

00:23:27.520 --> 00:23:37.440
But if you don't, you might actually be vulnerable to having some of your PYC files contain API keys or using passwords because that information gets compiled into the bytecode.

00:23:37.440 --> 00:23:45.900
What I liked about this post was they actually had a little crash course on deconstructing Python bytecode and like understanding what cached source means.

00:23:45.900 --> 00:23:47.840
So it wasn't just like, hey, don't do this thing.

00:23:47.840 --> 00:23:48.660
That's pretty uncool.

00:23:48.720 --> 00:23:54.000
It really kind of gave you a quick little lesson in like what a PYC file is or what's in that PyCache directory.

00:23:54.000 --> 00:23:57.780
You know, so this post also comes with another game you can play, which is kind of cool.

00:23:57.780 --> 00:23:59.440
A small like capture the flag.

00:23:59.440 --> 00:24:02.700
So there's a little lab in there for you to actually try it out and kind of play with it.

00:24:02.700 --> 00:24:18.460
So if you're totally into like security stuff and want to like see how this stuff actually works under the covers, like the author like went just kind of above and beyond and gave you like a capture the flag game to actually go explore those PYC files and cache files that are up on GitHub or any other public repository, which is really cool.

00:24:18.600 --> 00:24:18.760
I see.

00:24:18.760 --> 00:24:19.160
That's cool.

00:24:19.160 --> 00:24:22.260
So the idea is that here's some that have this problem.

00:24:22.260 --> 00:24:25.300
Your job is to go uncover them or something like that.

00:24:25.300 --> 00:24:25.860
Yeah, go on.

00:24:25.860 --> 00:24:26.360
Yeah, exactly.

00:24:26.360 --> 00:24:27.600
Here's a couple of sample repositories.

00:24:27.600 --> 00:24:28.400
Go uncover this.

00:24:28.400 --> 00:24:37.920
So the kind of the action items from this post specifically was like if you do have PYC files containing any secrets, you need to make sure you delete them and then go revoke and rotate those secrets.

00:24:38.160 --> 00:24:42.360
The other thing was using a standard git ignore for checking not preventing that to happen altogether.

00:24:42.900 --> 00:24:57.580
And ultimately, I think the best way to handle I've been preaching kind of a lot to folks who are around me recently about how to store secrets, you know, using tools like vault or one password, depending on what your situations are making it easy to get those secrets into say environment variables for me is the way to go.

00:24:57.840 --> 00:25:01.440
Don't even have those secrets sitting on your file system in any form whatsoever.

00:25:01.440 --> 00:25:12.400
So I typically have a little shell script that uses the command line tool for like one password or uses vault with a token to actually grab the secrets in real time, stuff them into an environment variable, either shove them into a container.

00:25:12.400 --> 00:25:17.540
Or as I launch, I grab those out of my environment and don't even take the risk of putting that stuff on my file system.

00:25:17.540 --> 00:25:18.640
Oh, that's a clever idea.

00:25:18.640 --> 00:25:21.080
You know, because so often it's kind of a chicken and egg.

00:25:21.080 --> 00:25:21.600
It's like, great.

00:25:21.600 --> 00:25:23.680
So you don't store it in GitHub.

00:25:23.680 --> 00:25:25.940
So now it's over in this other text file.

00:25:25.940 --> 00:25:27.000
Right.

00:25:27.000 --> 00:25:29.500
How much better is that, honestly?

00:25:29.500 --> 00:25:33.280
I mean, I know it's better, but it's it's still like not that awesome.

00:25:33.280 --> 00:25:33.600
Right.

00:25:33.600 --> 00:25:35.660
So having it encrypted is nice.

00:25:35.660 --> 00:25:35.900
Right.

00:25:35.900 --> 00:25:41.840
One password and last pass and bitkeeper or key pass all have command line tools.

00:25:42.160 --> 00:25:44.320
That you can script to get data out of them.

00:25:44.320 --> 00:25:53.480
One password will give you back like JSON and with JQ, you can basically filter it out and grab the thing and put it into an environment variable on the fly without it ever touching your file system, which is really nice.

00:25:53.480 --> 00:25:53.820
Okay.

00:25:53.820 --> 00:25:54.460
That's interesting.

00:25:54.460 --> 00:25:55.180
I didn't know about that.

00:25:55.180 --> 00:25:58.180
I'm a big fan of one password, but I didn't know I did that.

00:25:58.180 --> 00:26:01.460
Oh, so go check out, go grab the OP one password tool.

00:26:01.460 --> 00:26:03.020
It's got full access.

00:26:03.020 --> 00:26:04.880
You can just basically grab secrets.

00:26:04.880 --> 00:26:06.100
Yeah, you can edit secrets.

00:26:06.100 --> 00:26:07.800
I'm a huge fan of one password as well.

00:26:07.800 --> 00:26:09.200
And last pass was nice as well.

00:26:09.200 --> 00:26:11.980
We used to use last pass for a long time, but I store.

00:26:11.980 --> 00:26:13.880
For example, like AWS secrets.

00:26:13.880 --> 00:26:24.020
I'll put those up in one password in the notes field or I'll create separate special fields that have kind of key value pairs, which are environment variable name and environment variable value.

00:26:24.220 --> 00:26:32.340
And then I just have a quick little one liner in my shell that converts those from one password JSON into export those to real variables in my shell.

00:26:32.780 --> 00:26:42.000
So more than just the secret key, like the region and like what profile to use, which to assume to do, like anything that's a variable that I can put in my environment, I'll put into one password.

00:26:42.000 --> 00:26:42.340
Okay.

00:26:42.340 --> 00:26:43.540
Yeah, that's cool advice.

00:26:43.540 --> 00:26:43.980
That is cool.

00:26:43.980 --> 00:26:44.200
Yeah.

00:26:44.640 --> 00:26:44.840
All right.

00:26:44.840 --> 00:26:46.980
Well, that's it for our six items.

00:26:46.980 --> 00:26:49.440
You guys got any extra stuff that you want to throw out there?

00:26:49.440 --> 00:26:50.740
Ron, I see you got one here.

00:26:50.740 --> 00:26:50.980
Yeah.

00:26:50.980 --> 00:26:59.740
I just noticed that the PSF is looking for volunteers to help migrate issues from bugs.python.org to the GitHub issues.

00:26:59.740 --> 00:27:05.180
So if you want to help out PSF and do something worthwhile, like this cool thing to volunteer for.

00:27:05.180 --> 00:27:05.440
Yeah.

00:27:05.440 --> 00:27:06.300
Yeah, that's cool.

00:27:06.300 --> 00:27:06.800
That is cool.

00:27:06.800 --> 00:27:07.380
How about you, Calvin?

00:27:07.520 --> 00:27:16.780
In case you missed it, there is a Learn Python Humble Bundle that is going on right now that will benefit a couple charities, the Book Industry Charitable Foundation and the No Starch Press Foundation.

00:27:16.780 --> 00:27:24.600
And so those are helping folks who basically need a safety net during times like this, like independent bookstore owners, comic book owners, things like that.

00:27:24.600 --> 00:27:30.480
For $15, you get like nearly $400 worth of like amazing No Starch Press books.

00:27:30.480 --> 00:27:36.700
At some point in time, I recommend probably almost every one of the books that is on that list to folks so they can get jumped in both feet.

00:27:36.700 --> 00:27:37.560
How do I learn Python?

00:27:37.560 --> 00:27:41.660
I've got three of them sitting on my desk right here because they're fun books.

00:27:41.660 --> 00:27:45.000
You know, there's like stupid Python tricks and automate the boring stuff.

00:27:45.000 --> 00:27:46.680
And there's really fun books in there.

00:27:46.680 --> 00:27:51.220
So I'd recommend it to anybody who's spending time at home and doesn't know what to do with their time.

00:27:51.220 --> 00:27:54.480
Go grab these books for $15 or pay what you want.

00:27:54.480 --> 00:27:58.780
The money goes to a good cause and you get to learn awesome Python language.

00:27:58.780 --> 00:27:59.160
Nice.

00:27:59.160 --> 00:27:59.860
Yeah, that's cool.

00:28:00.460 --> 00:28:03.340
The Mission Python book is intriguing to me.

00:28:03.340 --> 00:28:04.760
That's definitely a cool one.

00:28:04.760 --> 00:28:05.720
All right.

00:28:05.720 --> 00:28:06.920
I got a few quick ones.

00:28:06.920 --> 00:28:10.240
Python 3.9 beta 1 is out for testing.

00:28:10.240 --> 00:28:13.420
So if you're into that, you know, go check it out.

00:28:13.420 --> 00:28:15.860
You can run, just download and run it.

00:28:15.860 --> 00:28:18.240
You know, play around with some of the new ideas in there.

00:28:18.240 --> 00:28:23.460
Also, not beta, but for real, Python 3.8.3 is also available.

00:28:23.460 --> 00:28:24.440
That's pretty cool.

00:28:24.440 --> 00:28:29.120
And then I got a cool message this morning from Jeff Derbyshire.

00:28:29.700 --> 00:28:33.440
And he sent over something that I thought was just kind of a cool little piece of information.

00:28:33.440 --> 00:28:35.480
I'll link to the paper in the show notes.

00:28:36.160 --> 00:28:38.220
So everyone's trying to help out this COVID stuff.

00:28:38.220 --> 00:28:44.900
Some particle physicists put some free time, took some of their free time to design and build a low cost ventilator.

00:28:44.900 --> 00:28:46.220
It's pretty cool, right?

00:28:46.220 --> 00:28:46.520
Yeah.

00:28:46.620 --> 00:28:49.320
And then they wrote a paper about it because they're particle physicists.

00:28:49.320 --> 00:28:55.400
And if you look through it, it says things like the target computing platform is Raspberry Pi 4.

00:28:55.400 --> 00:29:02.800
And it shows you know the tradeoff between computing power and power consumption and things like that, which is nice.

00:29:02.800 --> 00:29:05.000
The target programming language is Python 3.

00:29:05.000 --> 00:29:08.500
And the UI is PyQt 5.

00:29:08.500 --> 00:29:14.900
And then the MVM GUI, the UI for it, is Python 3 software written with PyQt 5.

00:29:14.900 --> 00:29:16.800
And pretty nice.

00:29:16.800 --> 00:29:19.220
It allows you to like steer and monitor the equipment.

00:29:19.220 --> 00:29:26.340
So anyway, here's a cool, effectively a Python ventilator created by a particle physicists that's like open source.

00:29:26.340 --> 00:29:27.040
Yeah, well, that's awesome.

00:29:27.040 --> 00:29:27.820
Yeah, it's pretty cool.

00:29:28.160 --> 00:29:30.320
There's a huge number of names on this paper too.

00:29:30.320 --> 00:29:31.320
Yeah, it's pretty awesome.

00:29:31.320 --> 00:29:32.900
Anyway, I'll link to that.

00:29:32.900 --> 00:29:35.080
People can check it out if they're interested.

00:29:35.080 --> 00:29:37.860
You got to do something to keep these particle physicists off the streets.

00:29:37.860 --> 00:29:39.240
That's right.

00:29:39.240 --> 00:29:41.760
You don't want to just roam around any old collider.

00:29:41.760 --> 00:29:42.800
All right.

00:29:42.800 --> 00:29:47.760
So for the joke this week, I thought I'd grab like a couple more O'Reilly covers.

00:29:47.760 --> 00:29:48.440
Not O'Reilly.

00:29:48.440 --> 00:29:49.300
I know.

00:29:49.300 --> 00:29:51.300
I mean, you already had the Humble Bundle book thing.

00:29:51.300 --> 00:29:53.160
So we got the O'Reilly ones.

00:29:53.160 --> 00:29:54.820
And I thought we could just each just do one.

00:29:54.820 --> 00:29:56.280
I'll talk about the first one here.

00:29:56.900 --> 00:30:01.160
It's a chameleon, which obviously is the lizard that can change colors to blend in.

00:30:01.160 --> 00:30:02.480
Brian, you'll like this one.

00:30:02.480 --> 00:30:04.400
It's called Refactoring Code Without Test.

00:30:04.400 --> 00:30:05.560
It looks like it's working.

00:30:05.560 --> 00:30:07.760
No code coverage, no problems.

00:30:07.760 --> 00:30:08.960
It just blends right in.

00:30:08.960 --> 00:30:10.420
Looks like it works on my machine.

00:30:10.420 --> 00:30:11.020
That's right.

00:30:11.020 --> 00:30:12.660
It was written by Sir Crash a lot.

00:30:12.660 --> 00:30:13.580
So cool.

00:30:13.580 --> 00:30:14.080
All right.

00:30:14.080 --> 00:30:15.280
Brian, you want to do the next one?

00:30:15.280 --> 00:30:15.760
Sure.

00:30:15.760 --> 00:30:19.840
Becoming a manager and listening to people complain all day.

00:30:19.840 --> 00:30:22.580
Jesus Christ, not another budget meeting.

00:30:22.580 --> 00:30:24.000
So luckily I...

00:30:24.000 --> 00:30:24.440
And the animal?

00:30:24.440 --> 00:30:26.180
The animal's a crab, of course.

00:30:26.740 --> 00:30:27.940
Of course.

00:30:27.940 --> 00:30:30.140
I don't have to deal with budget meetings, luckily.

00:30:30.140 --> 00:30:30.520
Yeah.

00:30:30.520 --> 00:30:31.000
Yeah.

00:30:31.000 --> 00:30:31.620
Me either.

00:30:31.620 --> 00:30:32.920
All right, Calvin.

00:30:32.920 --> 00:30:35.520
This one's a special web one for you.

00:30:35.520 --> 00:30:36.060
Yeah, it is.

00:30:36.060 --> 00:30:37.240
I'd say this is perfect for me.

00:30:37.240 --> 00:30:39.540
So this is the Z index.

00:30:39.540 --> 00:30:41.220
Good Lord, how many zeros?

00:30:41.220 --> 00:30:42.400
I think it's 100 billion.

00:30:42.400 --> 00:30:43.420
Is it 100 billion?

00:30:43.420 --> 00:30:45.120
It's the real world CSS.

00:30:45.120 --> 00:30:46.800
You've come this far.

00:30:46.800 --> 00:30:48.020
No going back now.

00:30:48.020 --> 00:30:50.280
That's so true on so many levels there, I think.

00:30:50.400 --> 00:30:53.000
No, you're like, Z index equals one.

00:30:53.000 --> 00:30:53.360
No.

00:30:53.360 --> 00:30:54.300
No, keep going.

00:30:54.300 --> 00:30:54.580
No, 100.

00:30:54.580 --> 00:30:55.240
Fine.

00:30:55.240 --> 00:30:58.280
Just, it's eventually not going to be behind that thing.

00:30:58.280 --> 00:30:58.940
I love it.

00:30:58.940 --> 00:31:00.680
All right.

00:31:00.680 --> 00:31:02.820
And then the last one, I'm a big fan of design patterns.

00:31:02.820 --> 00:31:05.860
So this one is avoid using dark patterns.

00:31:06.580 --> 00:31:08.140
And it says, do or do not.

00:31:08.140 --> 00:31:08.900
There's no try.

00:31:08.900 --> 00:31:10.320
And of course, there's a Yoda on it.

00:31:10.320 --> 00:31:11.940
Very good.

00:31:11.940 --> 00:31:12.480
Very good.

00:31:12.480 --> 00:31:14.120
So yeah, these are all fun.

00:31:14.120 --> 00:31:15.900
These are really good covers.

00:31:15.900 --> 00:31:16.540
Yeah.

00:31:16.540 --> 00:31:17.740
Always a nice joke.

00:31:17.740 --> 00:31:20.600
As well as nice being here with both you guys.

00:31:20.600 --> 00:31:23.720
So Brian, as always, Calvin, thanks for joining us.

00:31:23.720 --> 00:31:24.240
Yeah, it was wonderful.

00:31:24.240 --> 00:31:25.320
Thank you very much for having me.

00:31:25.320 --> 00:31:25.720
Thank you.

00:31:25.720 --> 00:31:26.020
You bet.

00:31:26.020 --> 00:31:26.460
Bye, everyone.

00:31:26.460 --> 00:31:26.920
See y'all later.

00:31:26.920 --> 00:31:29.040
Thank you for listening to Python Bytes.

00:31:29.040 --> 00:31:31.580
Follow the show on Twitter via at Python Bytes.

00:31:31.580 --> 00:31:34.440
That's Python Bytes as in B-Y-T-E-S.

00:31:34.680 --> 00:31:37.680
And get the full show notes at pythonbytes.fm.

00:31:37.680 --> 00:31:41.880
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:31:41.880 --> 00:31:44.580
We're always on the lookout for sharing something cool.

00:31:44.580 --> 00:31:47.700
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:31:47.700 --> 00:31:51.120
Thank you for listening and sharing this podcast with your friends and colleagues.

