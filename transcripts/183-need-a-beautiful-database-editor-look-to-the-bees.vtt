
00:00:00.000 --> 00:00:04.400
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.400 --> 00:00:09.300
This is episode 183, recorded May 19th, 2020.


00:00:09.300 --> 00:00:10.200
I'm Michael Kennedy.


00:00:10.200 --> 00:00:11.300
And I'm Brian Okken.


00:00:11.300 --> 00:00:14.500
And Brian, we have a special guest, Calvin Hendricks-Parker.


00:00:14.500 --> 00:00:15.200
Welcome, Calvin.


00:00:15.200 --> 00:00:16.600
Hey, guys. How are you doing?


00:00:16.600 --> 00:00:18.400
Doing super well.


00:00:18.400 --> 00:00:19.700
Great to have you here.


00:00:19.700 --> 00:00:21.600
Awesome. Well, I'm excited to be on.


00:00:21.600 --> 00:00:24.000
This is my first time being on one of your podcasts.


00:00:24.000 --> 00:00:26.300
So I'm all giddy with excitement.


00:00:26.300 --> 00:00:29.000
I'm very giddy as well. It's great to have you here.


00:00:29.000 --> 00:00:31.760
It's always nice to have a third person with a fresh perspective,


00:00:31.760 --> 00:00:35.240
because Brian and I, we've given our perspective 183 times,


00:00:35.240 --> 00:00:37.040
and people are probably able to guess,


00:00:37.040 --> 00:00:39.040
for the most part, what we're going to say.


00:00:39.040 --> 00:00:41.040
But not the jokes. The jokes are always original.


00:00:41.040 --> 00:00:44.680
Okay, now before we move on, I do want to say this episode is brought to you by DigitalOcean.


00:00:44.680 --> 00:00:47.080
Check them out at pythonbytes.fm/digitalocean.


00:00:47.080 --> 00:00:49.960
Get $100 credit from new users. Tell you more about that later.


00:00:49.960 --> 00:00:54.760
Brian, why don't you kick us off with something completely from 2001, like blogging.


00:00:54.760 --> 00:00:56.760
Like blogging.


00:00:56.760 --> 00:01:00.960
One of the things that we thought maybe there weren't enough ways to blog right now,


00:01:00.960 --> 00:01:02.960
there's actually tons of ways to blog.


00:01:02.960 --> 00:01:06.560
But this is kind of a neat thing. This is called Fast Pages.


00:01:06.560 --> 00:01:09.160
And it comes from Fast.ai.


00:01:09.160 --> 00:01:14.160
And it's a blogging platform that they say it's an easy to use blogging platform


00:01:14.160 --> 00:01:16.560
with enhanced support for Jupyter notebooks.


00:01:16.560 --> 00:01:19.460
It's kind of put together, it's a, you know,


00:01:19.460 --> 00:01:21.760
where you write in Jupyter notebooks,


00:01:21.760 --> 00:01:24.360
and then you can also write markdown files.


00:01:24.360 --> 00:01:27.560
And for some reason, you can also write like Word doc files.


00:01:27.560 --> 00:01:28.560
But why would you do that?


00:01:28.560 --> 00:01:29.960
I blog in Word, baby.


00:01:29.960 --> 00:01:33.260
Weird has support for it anyway.


00:01:33.260 --> 00:01:40.300
And you can for your pages and posts and whatever and push it up to GitHub uses


00:01:40.300 --> 00:01:43.200
GitHub app actions to publish everything it use.


00:01:43.200 --> 00:01:48.460
I think it uses Jekyll on the back end to publish to GitHub pages, but it's all set


00:01:48.460 --> 00:01:50.060
up so that it's really fast to start.


00:01:50.460 --> 00:01:55.140
You can do things like alter interactive visualizations,


00:01:55.140 --> 00:01:59.100
and you can have code cells that you can hide and show


00:01:59.100 --> 00:02:01.540
or close by default if you want to.


00:02:01.540 --> 00:02:04.300
You can even do metadata like the title and summary.


00:02:04.300 --> 00:02:06.380
They go in special markdown cells.


00:02:06.380 --> 00:02:08.980
But you can even embed Twitter cards and YouTube videos


00:02:08.980 --> 00:02:11.220
and tag support and all that jazz.


00:02:11.220 --> 00:02:13.900
It actually looks pretty slick, to tell you the truth.


00:02:13.900 --> 00:02:15.820
If you want to publish something like a blog


00:02:15.820 --> 00:02:18.260
but you're going to use Jupyter Notebooks on a daily basis


00:02:18.260 --> 00:02:20.340
anyway, this might be a good thing to check out.


00:02:20.340 --> 00:02:24.220
Yeah, Jupyter is nice, but it's not quite all the way there, right?


00:02:24.220 --> 00:02:28.180
It's still like, the code is still shown on all the cells,


00:02:28.180 --> 00:02:29.820
and they're not like collapsed like this.


00:02:29.820 --> 00:02:32.220
This is a really nice presentation format, I think.


00:02:32.220 --> 00:02:36.180
And the fact that you're not really running on your own platform, right?


00:02:36.180 --> 00:02:38.420
Like, there's so many things where like,


00:02:38.420 --> 00:02:39.620
"Oh, I'm going to write my own blog,


00:02:39.620 --> 00:02:41.620
and then now I have to run servers and patches."


00:02:41.620 --> 00:02:43.580
And like, "Wait a minute, why am I patching servers?


00:02:43.580 --> 00:02:44.980
Like, what have I gotten myself into?"


00:02:44.980 --> 00:02:46.620
Whereas this just runs on GitHub pages.


00:02:46.620 --> 00:02:47.580
That's pretty cool.


00:02:47.580 --> 00:02:51.140
I like the Altair interactive visualizations, right?


00:02:51.140 --> 00:02:55.300
Because it's one thing to take a screenshot or static image and put it up there.


00:02:55.300 --> 00:02:59.100
But if you've got live code and live interactions, that's pretty awesome, actually.


00:02:59.100 --> 00:03:00.900
So yeah, this kind of appeals to me.


00:03:00.900 --> 00:03:04.700
I'm not switching because I just, I don't have the energy for one more thing


00:03:04.700 --> 00:03:06.700
that I put in a lot of focus on, like a blog.


00:03:06.700 --> 00:03:08.380
I do blog, but not that much.


00:03:08.380 --> 00:03:10.700
But nonetheless, this looks really cool if you're,


00:03:10.700 --> 00:03:12.780
especially if you're in the Jupyter world.


00:03:12.780 --> 00:03:16.780
But now you got to maintain your code on your blog page to make sure it always runs.


00:03:16.780 --> 00:03:18.780
That's right.


00:03:18.780 --> 00:03:20.780
You write tests for it. It'll be fine.


00:03:20.780 --> 00:03:22.780
There we go. Okay. Yeah. Exactly.


00:03:22.780 --> 00:03:24.780
I looked at this and I think this is a nice fresh


00:03:24.780 --> 00:03:26.780
take on like interactive


00:03:26.780 --> 00:03:28.780
code demonstrations


00:03:28.780 --> 00:03:30.780
in your blog. And to me it's way better


00:03:30.780 --> 00:03:32.780
than just static code there with


00:03:32.780 --> 00:03:34.780
static pictures. Yeah. And definitely, like I


00:03:34.780 --> 00:03:36.780
said, I think it's the best for


00:03:36.780 --> 00:03:38.780
people that are spending their day in Jupyter


00:03:38.780 --> 00:03:40.780
notebooks anyway. Then it's going to be


00:03:40.780 --> 00:03:42.780
a natural place for them to be


00:03:42.780 --> 00:03:44.780
to write a blog with it. Yeah. Absolutely.


00:03:44.780 --> 00:03:48.380
Yeah, now this next one that I want to cover, I'd not heard of,


00:03:48.380 --> 00:03:52.080
and I discovered it from Mahmoud Hashemi,


00:03:52.080 --> 00:03:54.320
who didn't realize that he had shared it with me,


00:03:54.320 --> 00:03:56.180
but he had like favorited it on GitHub.


00:03:56.180 --> 00:03:57.780
I'm like, whoa, wait, that looks cool.


00:03:57.780 --> 00:04:00.780
You know, just that little activity stream of people you follow on GitHub,


00:04:00.780 --> 00:04:01.780
or whatever's happening.


00:04:01.780 --> 00:04:06.380
So one of the things that I find lacking a lot of times


00:04:06.380 --> 00:04:08.980
is how you work with databases


00:04:08.980 --> 00:04:12.080
as sort of an admin side of things, right?


00:04:12.080 --> 00:04:14.840
Like if you're using Django, there's some kind of admin back end,


00:04:14.840 --> 00:04:16.400
you can sort of point at it.


00:04:16.400 --> 00:04:20.480
But if you're using like, you know, just SQL lite and you don't have some web


00:04:20.480 --> 00:04:23.340
app to work with it, like how do you work with it?


00:04:23.340 --> 00:04:24.940
I know there's a command line for working with it.


00:04:24.940 --> 00:04:25.400
You're right.


00:04:25.400 --> 00:04:28.760
DDL data definition or description language, whatever that is.


00:04:28.760 --> 00:04:29.600
I don't want to do that.


00:04:29.600 --> 00:04:31.000
That doesn't sound fun at all to me.


00:04:31.000 --> 00:04:33.600
So what I want is a nice visual thing.


00:04:33.600 --> 00:04:36.800
There's like a history of my most common searches, things like that.


00:04:36.800 --> 00:04:39.280
So there's this thing called beekeeper studio.


00:04:39.280 --> 00:04:40.360
Have you guys heard of this?


00:04:40.360 --> 00:04:40.840
I've not.


00:04:40.840 --> 00:04:41.520
No, no.


00:04:41.560 --> 00:04:44.860
I hadn't either, but if you go to their website, it is super polished.


00:04:44.860 --> 00:04:49.960
It certainly passes the Michael and Brian test of many screenshots and little animations,


00:04:49.960 --> 00:04:51.560
because, hey, it's a UI thing.


00:04:51.560 --> 00:04:56.160
And what it is, is it's a really polished, free and open source,


00:04:56.160 --> 00:04:58.760
SQL editor and database manager.


00:04:58.760 --> 00:05:00.460
It checks so many boxes.


00:05:00.460 --> 00:05:05.560
It talks to MySQL, Postgres, SQLite, Microsoft SQL Server.


00:05:05.560 --> 00:05:08.460
It runs on all the things, Windows, Linux, macOS.


00:05:08.860 --> 00:05:17.160
It has a bunch of cool features like it has built-in support for connecting to your database server over SSH tunnels,


00:05:17.160 --> 00:05:23.160
which is really nice because you typically don't want to have your database out in, you know, digital ocean or wherever.


00:05:23.160 --> 00:05:24.660
Listen on the internet.


00:05:24.660 --> 00:05:33.160
That's just asking to be in the headlines of, you know, company X has lost all their data and is now, you know, you now get,


00:05:33.160 --> 00:05:35.860
everyone gets free credit monitoring for a year.


00:05:35.860 --> 00:05:37.260
Thanks, right? You don't want that.


00:05:37.260 --> 00:05:39.760
So you can have like the database locked down,


00:05:39.760 --> 00:05:42.000
but still SSH over to the server and then just tunnel.


00:05:42.000 --> 00:05:43.920
But this has like built in stuff for that.


00:05:43.920 --> 00:05:45.120
Cool tabbed interface.


00:05:45.120 --> 00:05:47.880
It has auto-complete for your SQL queries,


00:05:47.880 --> 00:05:48.800
which is really nice.


00:05:48.800 --> 00:05:51.040
So like your table schema,


00:05:51.040 --> 00:05:53.660
so you know, you can pull up table name dot


00:05:53.660 --> 00:05:55.360
and it'll drop down all the columns


00:05:55.360 --> 00:05:58.120
in like your where clauses or your select clause,


00:05:58.120 --> 00:06:00.060
which I think is super nice.


00:06:00.060 --> 00:06:02.240
It has kind of an Excel view


00:06:02.240 --> 00:06:03.920
where you can just pull up the data in the table


00:06:03.920 --> 00:06:07.280
and like filter it and sort it by clicking on the column.


00:06:07.280 --> 00:06:10.200
So you don't have to be super good at knowing that.


00:06:10.200 --> 00:06:12.760
By default as a dark theme, that's pretty cool.


00:06:12.760 --> 00:06:14.920
- Yeah, so you know it's for series programmers.


00:06:14.920 --> 00:06:16.320
- Yeah, it's legit, baby.


00:06:16.320 --> 00:06:18.480
It is totally legit 'cause it's default.


00:06:18.480 --> 00:06:20.080
- You had me in dark theme for sure.


00:06:20.080 --> 00:06:21.120
- That's right, that's right.


00:06:21.120 --> 00:06:22.360
So there's just a bunch of cool things.


00:06:22.360 --> 00:06:24.200
Like you can save your most common queries


00:06:24.200 --> 00:06:27.260
and there's like a favorites queries section on the left


00:06:27.260 --> 00:06:28.960
that you can just pull up your common queries


00:06:28.960 --> 00:06:31.080
and like rerun them if you gotta do a report


00:06:31.080 --> 00:06:32.860
or something you always have to ask about.


00:06:32.860 --> 00:06:34.900
Like you can run that, which I don't know.


00:06:34.900 --> 00:06:36.540
This seems like a really nice tool


00:06:36.540 --> 00:06:39.580
and I'm telling you it is worth every penny you pay for it.


00:06:39.580 --> 00:06:40.700
- Is it free?


00:06:40.700 --> 00:06:42.700
- It's free, yeah, it's free no-foot source.


00:06:42.700 --> 00:06:44.100
I installed it and I connected it


00:06:44.100 --> 00:06:46.260
to some little SQLite toy things projects


00:06:46.260 --> 00:06:48.100
from my courses that I was working on


00:06:48.100 --> 00:06:49.220
and it came out great.


00:06:49.220 --> 00:06:50.700
- So how do we keep them in business?


00:06:50.700 --> 00:06:52.500
It sounds like we need to keep them in business somehow.


00:06:52.500 --> 00:06:54.580
- I know, we don't want this to go away.


00:06:54.580 --> 00:06:56.660
But yeah, it's nice over on GitHub.


00:06:56.660 --> 00:06:59.940
They've got quite a few stars, 1.4 thousand.


00:06:59.940 --> 00:07:01.460
So it's pretty new.


00:07:01.460 --> 00:07:02.660
I'm not sure how long they've been around,


00:07:02.660 --> 00:07:04.920
but I'm excited to see him here. It's great.


00:07:04.920 --> 00:07:06.660
- Yeah, nice. - Well done, people.


00:07:06.660 --> 00:07:08.560
All right, Calvin, what do you got for your first item here?


00:07:08.560 --> 00:07:11.320
- So my first item on the docket is


00:07:11.320 --> 00:07:13.620
the second annual Python web conference,


00:07:13.620 --> 00:07:15.360
which I'm actually one of the co-organizers


00:07:15.360 --> 00:07:17.520
of this web conference, so I'm excited to come on here


00:07:17.520 --> 00:07:21.320
and tell you all about this amazing event that's coming up.


00:07:21.320 --> 00:07:23.460
We did this last year,


00:07:23.460 --> 00:07:25.700
and we thought it was a pretty good success,


00:07:25.700 --> 00:07:27.640
and so we wanted to actually continue that tradition,


00:07:27.640 --> 00:07:29.120
and it seemed to fall perfectly


00:07:29.120 --> 00:07:31.000
within all these conferences converting


00:07:31.000 --> 00:07:32.000
to virtual conferences.


00:07:32.000 --> 00:07:34.320
we are a virtual first conference.


00:07:34.320 --> 00:07:37.160
This was not a planned change to virtual.


00:07:37.160 --> 00:07:39.440
We're really doing this for real as a virtual conference.


00:07:39.440 --> 00:07:41.440
- Just to be clear, you guys did this last year


00:07:41.440 --> 00:07:43.760
when it was not required to be virtual, right?


00:07:43.760 --> 00:07:45.600
- Right, when it was not hip and cool


00:07:45.600 --> 00:07:48.320
to be a virtual remote conference.


00:07:48.320 --> 00:07:50.240
- We're at least a year ahead of your time.


00:07:50.240 --> 00:07:51.120
- We are.


00:07:51.120 --> 00:07:52.400
I'd like to think I'm a trailblazer


00:07:52.400 --> 00:07:53.540
when it comes to some of these things,


00:07:53.540 --> 00:07:55.360
but I'm only taking credit for the amazing work


00:07:55.360 --> 00:07:57.600
done by the people who are certainly behind me


00:07:57.600 --> 00:07:58.660
at doing all the real work.


00:07:58.660 --> 00:08:01.560
But we're basically putting on what we're calling


00:08:01.560 --> 00:08:04.600
the most in-depth Python conference for web developers.


00:08:04.600 --> 00:08:07.040
I don't know, if you all have been to PyCon,


00:08:07.040 --> 00:08:10.140
there seems to be a lack of web and production level talks


00:08:10.140 --> 00:08:11.320
going on there these days.


00:08:11.320 --> 00:08:13.040
Well, I don't know, it kind of goes back a long ways.


00:08:13.040 --> 00:08:16.800
And so we felt like this was a gap in the Python ecosystem


00:08:16.800 --> 00:08:20.760
for folks to come and talk about production use of Python


00:08:20.760 --> 00:08:21.880
in on the web.


00:08:21.880 --> 00:08:25.560
Now, so we're gonna have talks on Django, Flask, Twisted,


00:08:25.560 --> 00:08:26.720
lots of testing talks.


00:08:26.720 --> 00:08:29.240
So maybe I'll draw certain folks from this audience in


00:08:29.240 --> 00:08:30.480
who like testing.


00:08:30.480 --> 00:08:33.480
SQLAlchemy, containers, deployment, like tons of stuff like that.


00:08:33.480 --> 00:08:36.480
So it's going to be a bunch of cool web talks


00:08:36.480 --> 00:08:39.020
and just kind of three tracks.


00:08:39.020 --> 00:08:40.480
So it's actually going to be three days.


00:08:40.480 --> 00:08:43.180
That is June 17th to the 19th.


00:08:43.180 --> 00:08:45.360
So make sure you mark that on your calendar right now.


00:08:45.360 --> 00:08:46.980
I would love if you went and bought a ticket right now,


00:08:46.980 --> 00:08:49.220
but go ahead and mark that on your calendar, save the date.


00:08:49.220 --> 00:08:50.680
There'll be a full day of tutorials.


00:08:50.680 --> 00:08:53.720
So there'll be six tutorials, three in the morning, three in the afternoon,


00:08:53.720 --> 00:08:55.980
two days of talks with three tracks.


00:08:55.980 --> 00:08:57.860
We've got some awesome keynote speakers.


00:08:57.860 --> 00:09:00.320
So Lorena Mesa from the Python Software Foundation


00:09:00.320 --> 00:09:01.600
is gonna be one of our keynotes.


00:09:01.600 --> 00:09:03.440
We've got Henek, Russell Keith-McGee,


00:09:03.440 --> 00:09:06.760
who gave a keynote at PyCon two years ago.


00:09:06.760 --> 00:09:08.680
- 2018, yeah, I think so.


00:09:08.680 --> 00:09:10.320
It depends if you count this one, yeah.


00:09:10.320 --> 00:09:11.160
- Right.


00:09:11.160 --> 00:09:14.320
So he'll be coming back and hopefully giving


00:09:14.320 --> 00:09:15.960
some more insights into,


00:09:15.960 --> 00:09:17.440
hopefully, I'd love to see what he thinks


00:09:17.440 --> 00:09:19.560
kind of post-Black Swan era,


00:09:19.560 --> 00:09:21.560
if you remember his talk from PyCon.


00:09:21.560 --> 00:09:23.120
- Yeah, that was a super good talk, yeah.


00:09:23.120 --> 00:09:24.080
- It was a super good talk,


00:09:24.080 --> 00:09:25.280
and that's why I'm really, really excited


00:09:25.280 --> 00:09:27.160
he decided to kind of join my merry band


00:09:27.160 --> 00:09:29.880
and go on an adventure with all of us.


00:09:29.880 --> 00:09:59.860
We'll have some fireside chats. So during lunch, there's going to be, I don't know if you all are familiar with Carl Meyer, but he's, he works for Instagram. He's in their infrastructure team. And so he's really available to talking about like best practices. So we'll ask all kinds of deep questions. And actually, I've just enjoyed talking to him to no end about how things actually work in the real world. For some of these kinds of things. You know, not everyone's doing microservices to the hilt. Like there are people who are running real things that are just Django monoliths, and they still work. And they're kind of tried and true. So there'll be a 40 presentation 40 plus presentations.


00:09:59.860 --> 00:10:04.980
six tutorials, fun will be had by all, hopefully connections will be made. We really work hard


00:10:04.980 --> 00:10:10.820
at making sure that these kinds of virtual events are maybe overly stimulating so that you've got


00:10:10.820 --> 00:10:15.060
lots to do and kind of lots to interact with. There will be, you know, kind of virtual cocktail


00:10:15.060 --> 00:10:19.700
hours afterwards, online gaming. So we had a Mario Kart tournament at our last virtual conference,


00:10:19.700 --> 00:10:25.060
and we're going to bring back our board game night. And so actually, as part of the conference


00:10:25.060 --> 00:10:30.100
registration, you'll be sent a pre swag pack that will include something for the board game night.


00:10:30.100 --> 00:10:33.220
So if you actually want to play one of the games, we're going to give every player every person who


00:10:33.220 --> 00:10:36.500
attends what they need. And actually, you don't need to have that to play. But we're gonna have


00:10:36.500 --> 00:10:41.620
some especially themed ones made specifically for Python web conference. You point like your webcam


00:10:41.620 --> 00:10:46.100
at it, and everyone sets it up in the initial state and like keep sinking it. Okay, so I'll


00:10:46.100 --> 00:10:49.140
kind of get a little bit of the cat out of the bag, but we're gonna play skull. Have you ever


00:10:49.140 --> 00:10:53.140
played skull? It's a bluffing game. It's a lot of fun. So basically, everyone has four coasters. I


00:10:53.140 --> 00:10:56.980
I mean, looks like the coasters, you know, look kind of like, you know, just a round circular cardboard coaster.


00:10:56.980 --> 00:10:59.980
Three of them have flowers typically and one has a skull on it.


00:10:59.980 --> 00:11:05.360
So it's a bluffing game to see how many flowers you can acquire before you run into somebody's skull or your own skull.


00:11:05.360 --> 00:11:09.080
So we're going to do a Python themed version of that with a web slant.


00:11:09.080 --> 00:11:10.660
So it should be pretty, pretty cool.


00:11:10.660 --> 00:11:11.660
I'm looking forward to that.


00:11:11.660 --> 00:11:12.240
That sounds fun.


00:11:12.240 --> 00:11:15.660
Yep. So the tickets are $199 and $99 for students.


00:11:15.660 --> 00:11:19.960
Now, as a bonus, there is a perfect for every professional ticket purchased.


00:11:19.960 --> 00:11:23.460
we're going to donate a ticket to an attendee in a developing country.


00:11:23.460 --> 00:11:25.760
So we want to be able to get people who couldn't normally


00:11:25.760 --> 00:11:28.600
even make it to a physical conference at this event.


00:11:28.600 --> 00:11:31.800
If you're in the middle of Africa or some far off place


00:11:31.800 --> 00:11:33.800
and you couldn't normally get to a conference like this,


00:11:33.800 --> 00:11:37.480
we want to make sure you can attend and actually connect with the Python web community.


00:11:37.480 --> 00:11:38.740
So I'm pretty excited about that.


00:11:38.740 --> 00:11:41.880
And then I do have a discount code for the Python Bytes listeners.


00:11:41.880 --> 00:11:46.320
There will be a 20% discount code if you just use the code PB20.


00:11:46.320 --> 00:11:49.020
And you guys will get a 20% off discount.


00:11:49.020 --> 00:11:51.020
Yeah, this sounds like a fun conference.


00:11:51.020 --> 00:11:53.020
I really like that you're taking the


00:11:53.020 --> 00:11:55.020
digitally native approach


00:11:55.020 --> 00:11:57.020
in the conference because I feel


00:11:57.020 --> 00:11:59.020
like there's a lot of attempts


00:11:59.020 --> 00:12:01.020
at this right now and we'll see what


00:12:01.020 --> 00:12:03.020
sticks, but everyone's trying to reinvent


00:12:03.020 --> 00:12:05.020
conferences and this feels like


00:12:05.020 --> 00:12:07.020
a pretty good attempt at it.


00:12:07.020 --> 00:12:09.020
I've attended a couple recently where they kind of took


00:12:09.020 --> 00:12:11.020
conference skeuomorphism to an extreme.


00:12:11.020 --> 00:12:13.020
Like you kind of VR style


00:12:13.020 --> 00:12:15.020
walked into an expo hall and kind of clicked


00:12:15.020 --> 00:12:17.020
to go through a hall and you're sitting


00:12:17.020 --> 00:12:21.620
in front of a screen with like Mystery Science Theater 3000 style like, you know, characters


00:12:21.620 --> 00:12:22.620
sitting in front of you.


00:12:22.620 --> 00:12:23.620
Yeah, yeah.


00:12:23.620 --> 00:12:25.580
The silhouettes of people for you.


00:12:25.580 --> 00:12:26.580
That's not the way to go.


00:12:26.580 --> 00:12:27.580
Then that's not what this is.


00:12:27.580 --> 00:12:31.720
Yeah, I saw I saw something where they're like, Oh, we'll make it totally real.


00:12:31.720 --> 00:12:35.620
You've got to go check in with a real person before they'll let you into the virtual conference


00:12:35.620 --> 00:12:36.620
and stuff like that.


00:12:36.620 --> 00:12:38.620
Yeah, no, no, no, no, no, no, no.


00:12:38.620 --> 00:12:39.620
Yeah, yeah.


00:12:39.620 --> 00:12:41.300
So Microsoft Build is running right now.


00:12:41.300 --> 00:12:44.340
And they're, you know, trying to figure out what they're doing there.


00:12:44.340 --> 00:12:46.180
It didn't look super good to me this morning,


00:12:46.180 --> 00:12:47.540
the way the experience was going,


00:12:47.540 --> 00:12:51.060
but we're doing it for a week, or three or four days,


00:12:51.060 --> 00:12:53.220
so I don't know, maybe that'll be an example as well.


00:12:53.220 --> 00:12:54.820
- AWS just did their summit,


00:12:54.820 --> 00:12:58.100
and I didn't hear very good things about that as well.


00:12:58.100 --> 00:12:59.540
- Well, it's a big challenge.


00:12:59.540 --> 00:13:01.220
And there's a possibility


00:13:01.220 --> 00:13:02.900
that I might be speaking at this conference.


00:13:02.900 --> 00:13:04.900
- Oh, that's right, how could I forget?


00:13:04.900 --> 00:13:07.380
We do have, if you go look at the speakers page,


00:13:07.380 --> 00:13:08.260
I'm super excited.


00:13:08.260 --> 00:13:11.940
I mean, it is a who's who of Python web community.


00:13:11.940 --> 00:13:13.140
It just kind of speaks to the volumes


00:13:13.140 --> 00:13:15.380
like the confidence these people have that we can pull this off,


00:13:15.380 --> 00:13:17.680
that they're here to speak for this conference.


00:13:17.680 --> 00:13:18.680
Yeah, very cool.


00:13:18.680 --> 00:13:21.060
All right, well, I definitely think it's going to be a fun event.


00:13:21.060 --> 00:13:22.060
People can check it out.


00:13:22.060 --> 00:13:24.560
Obviously, links in the show notes and the discount code.


00:13:24.560 --> 00:13:27.820
Now, speaking of web and running stuff in the cloud,


00:13:27.820 --> 00:13:30.360
DigitalOcean, sponsoring the show, very cool place.


00:13:30.360 --> 00:13:32.660
They just launched their virtual private cloud


00:13:32.660 --> 00:13:34.240
and their new trust platform,


00:13:34.240 --> 00:13:38.000
which makes it easier to run secure code


00:13:38.000 --> 00:13:39.580
in the cloud with some confidence.


00:13:39.580 --> 00:13:43.660
So VPC, it's kind of like a virtual private network,


00:13:43.660 --> 00:13:47.020
but it allows you to create multiple private networks for your whole team.


00:13:47.020 --> 00:13:51.660
Then you can stick your VMs where they need to go to make them to talk to different things.


00:13:51.660 --> 00:13:56.540
So I recently set up a whole bunch of complex firewall rules for all of our


00:13:56.540 --> 00:13:58.380
various servers that need to talk to each other.


00:13:58.380 --> 00:14:00.780
And it would be really nice to just click them in here.


00:14:00.780 --> 00:14:03.260
But I set those up before this existed.


00:14:03.260 --> 00:14:04.780
Hence, I did it that way.


00:14:04.780 --> 00:14:06.140
So this is really a nice feature.


00:14:06.780 --> 00:14:10.220
it can auto generate your private network IP addresses.


00:14:10.220 --> 00:14:13.740
So you can control them or you can specify how you want them generated.


00:14:13.740 --> 00:14:16.220
And you can even configure some of the droplets to behave as


00:14:16.220 --> 00:14:18.620
internet gateways to kind of act as a


00:14:18.620 --> 00:14:22.140
outbound area or place for those various private clouds.


00:14:22.140 --> 00:14:25.140
So that's cool. And then their trust platform is like a micro site


00:14:25.140 --> 00:14:28.940
with all sorts of information about security and running stuff in the cloud.


00:14:28.940 --> 00:14:33.020
So check them out at pythonbytes.fm/digitalocean


00:14:33.020 --> 00:14:36.300
$100 credit for new users. And so go out there and build something awesome and


00:14:36.300 --> 00:14:37.400
Make it a little more secure.


00:14:37.400 --> 00:14:37.900
Wonderful.


00:14:37.900 --> 00:14:38.400
Yeah.


00:14:38.400 --> 00:14:44.800
You mean, I mean secure like real honest data, no fake data, no fake news, none of that.


00:14:44.800 --> 00:14:45.500
No fake news.


00:14:45.500 --> 00:14:47.100
If only there was a fake news generator.


00:14:47.100 --> 00:14:49.000
There probably is.


00:14:49.000 --> 00:14:51.600
So if anybody knows a fake news generator, let us know.


00:14:51.600 --> 00:14:52.400
It'd be fun.


00:14:52.400 --> 00:14:56.600
As far as fake goes, we were talking about, I have no idea how to pronounce this.


00:14:56.600 --> 00:14:57.800
Anybody want to try?


00:14:57.800 --> 00:15:00.200
It's M-I-M-E-S-I-S.


00:15:00.200 --> 00:15:00.900
Mimesis?


00:15:00.900 --> 00:15:01.600
Mimesis?


00:15:01.600 --> 00:15:03.300
I've actually used this tool in the past.


00:15:03.300 --> 00:15:05.400
And this is a party game I love to play.


00:15:05.400 --> 00:15:09.500
is you describe an open source project and you see how everyone will pronounce it.


00:15:09.500 --> 00:15:13.500
Okay, anyway, maybe mimesis, mimesis?


00:15:13.500 --> 00:15:17.500
I don't know. But it's a fake data generator. And I was reading it and thinking,


00:15:17.500 --> 00:15:21.500
don't we already have fake generators? There are a handful of other fake data


00:15:21.500 --> 00:15:25.500
generators around. But this one looks pretty cool. It


00:15:25.500 --> 00:15:30.000
helps generate fake data in a variety of purposes and a variety of languages.


00:15:30.000 --> 00:15:34.000
It's actually got over 33 locales. So you can get


00:15:34.000 --> 00:15:36.940
like Russian names and Spanish names


00:15:36.940 --> 00:15:38.300
and all sorts of stuff like that.


00:15:38.300 --> 00:15:42.260
But the localization also goes to things like you can,


00:15:42.260 --> 00:15:45.420
if you have addresses and food descriptions


00:15:45.420 --> 00:15:48.420
and people names and things like that can be localized


00:15:48.420 --> 00:15:51.360
and that's pretty neat, different phone numbers as well.


00:15:51.360 --> 00:15:54.040
So there's a whole bunch of different locales you can do.


00:15:54.040 --> 00:15:55.480
Supposedly it's super fast.


00:15:55.480 --> 00:15:59.780
They posted their benchmark of 10,000 full names


00:15:59.780 --> 00:16:03.620
of Faker versus Memesis.


00:16:03.620 --> 00:16:05.460
And then they were like 60 times faster,


00:16:05.460 --> 00:16:07.500
which is pretty cool.


00:16:07.500 --> 00:16:09.040
The thing I was really impressed with,


00:16:09.040 --> 00:16:13.080
it was one of the features is a data generation by schema.


00:16:13.080 --> 00:16:17.700
So you describe what kind of the shape of some data


00:16:17.700 --> 00:16:19.680
and the different types of things,


00:16:19.680 --> 00:16:22.180
like maybe, and we're putting in the show notes,


00:16:22.180 --> 00:16:25.340
a description of a structure that has a name


00:16:25.340 --> 00:16:28.980
and an ID and a version, timestamp and owner information,


00:16:28.980 --> 00:16:32.660
like email and creator name, full name, things like that.


00:16:32.660 --> 00:16:35.020
And then you can just generate from that schema.


00:16:35.020 --> 00:16:37.100
You can create a bunch of those.


00:16:37.100 --> 00:16:39.340
And that's pretty darn neat, I think.


00:16:39.340 --> 00:16:41.260
I think I could use this really readily.


00:16:41.260 --> 00:16:42.180
- Yeah, we were just talking about


00:16:42.180 --> 00:16:43.440
building a web apps and stuff.


00:16:43.440 --> 00:16:46.040
And one of the things that makes that really hard


00:16:46.040 --> 00:16:47.660
is you've got all this HTML


00:16:47.660 --> 00:16:49.960
and these loops in your templates


00:16:49.960 --> 00:16:50.920
and all that kind of stuff,


00:16:50.920 --> 00:16:53.740
and CSS that's going to describe.


00:16:53.740 --> 00:16:56.880
If I had data here, this is how it would look.


00:16:56.880 --> 00:16:58.820
And often you end up with no data


00:16:58.820 --> 00:17:01.500
or like just a few letters here or there.


00:17:01.500 --> 00:17:04.220
So having like legitimate looking data is really nice


00:17:04.220 --> 00:17:06.660
for helping you design your apps.


00:17:06.660 --> 00:17:09.420
Or if you're trying to anonymize something


00:17:09.420 --> 00:17:11.140
for some kind of data science thing,


00:17:11.140 --> 00:17:12.180
you just wanna like,


00:17:12.180 --> 00:17:13.860
I wanna randomly put in something here,


00:17:13.860 --> 00:17:15.620
but I want it to seem normal,


00:17:15.620 --> 00:17:18.780
but not be actually tied to the person.


00:17:18.780 --> 00:17:20.020
This looks really cool.


00:17:20.020 --> 00:17:21.740
- Yeah, especially useful like in Django projects


00:17:21.740 --> 00:17:23.040
when you wanna have a fixture to load up


00:17:23.040 --> 00:17:25.660
some personally identifying information ahead of time


00:17:25.660 --> 00:17:26.980
for the developers.


00:17:26.980 --> 00:17:29.380
You don't want to have them grab the production data


00:17:29.380 --> 00:17:31.900
and have that liability sitting on their local disk.


00:17:31.900 --> 00:17:33.500
- Yeah, yeah, exactly.


00:17:33.500 --> 00:17:36.400
There's interesting different classes that generate things.


00:17:36.400 --> 00:17:38.980
So there's obviously like a person,


00:17:38.980 --> 00:17:41.060
there's what's called person, human,


00:17:41.060 --> 00:17:43.340
something like that, let's see, yeah, person.


00:17:43.340 --> 00:17:45.640
So it has things like you might expect,


00:17:45.640 --> 00:17:47.700
like an age and an email and a name,


00:17:47.700 --> 00:17:51.740
but it also has an avatar, which is a link to a graphic


00:17:51.740 --> 00:17:53.000
as an academic degree,


00:17:53.000 --> 00:17:54.940
like whether or not you have a bachelor's degree


00:17:54.940 --> 00:17:56.660
or master's degree.


00:17:56.660 --> 00:18:01.340
It has like nationality, occupation, political view,


00:18:01.340 --> 00:18:04.540
all these interesting different things.


00:18:04.540 --> 00:18:07.020
And they also take on different locales.


00:18:07.020 --> 00:18:08.460
There's a science one.


00:18:08.460 --> 00:18:10.540
So in the science one, you can have an atomic number,


00:18:10.540 --> 00:18:13.660
a chemical element, a DNA sequence, an RNA sequence.


00:18:13.660 --> 00:18:16.620
There's just a bunch of funky different types of data


00:18:16.620 --> 00:18:17.460
you can generate here.


00:18:17.460 --> 00:18:18.280
It's pretty cool.


00:18:18.280 --> 00:18:20.580
- Yeah, I was looking through things like


00:18:20.580 --> 00:18:24.420
software development, things like operating system,


00:18:24.420 --> 00:18:27.540
a random operating system, random programming language,


00:18:27.540 --> 00:18:29.780
software license, things like that.


00:18:29.780 --> 00:18:30.620
That's pretty cool.


00:18:30.620 --> 00:18:31.780
- Right, like, what was it?


00:18:31.780 --> 00:18:33.740
OS 32 or what was it called?


00:18:33.740 --> 00:18:34.580
OS 2?


00:18:34.580 --> 00:18:35.420
Yeah.


00:18:35.420 --> 00:18:36.240
(laughing)


00:18:36.240 --> 00:18:37.080
This is a cool find.


00:18:37.080 --> 00:18:40.780
And I have another one that's kind of in that same space,


00:18:40.780 --> 00:18:45.780
also with a bit of a web slant called Schema Thesis.


00:18:45.780 --> 00:18:47.380
- Oh, this is cool.


00:18:47.380 --> 00:18:51.820
- So the idea is you've got an API


00:18:51.820 --> 00:18:54.300
and the API is documented with something like


00:18:54.300 --> 00:18:58.580
open API three or swagger or something like that,


00:18:58.580 --> 00:19:00.980
which is a bunch of HTTP endpoints


00:19:00.980 --> 00:19:04.140
and then descriptions of the data is exchanged, right?


00:19:04.140 --> 00:19:08.340
Here's the endpoint, here's the JSON document


00:19:08.340 --> 00:19:11.580
or God forbid XML document, I almost said there, right?


00:19:11.580 --> 00:19:14.340
But here's the thing being exchanged, right?


00:19:14.340 --> 00:19:17.660
And then you would hope that the actual service


00:19:17.660 --> 00:19:19.820
actually exchanged data that looked like


00:19:19.820 --> 00:19:22.020
it described it exchange, right?


00:19:22.020 --> 00:19:26.620
So this project basically tests for conformance


00:19:26.620 --> 00:19:30.500
with the API as you declare it in your own documentation.


00:19:30.500 --> 00:19:31.340
That's pretty nice.


00:19:31.340 --> 00:19:32.860
It supports those two formats that I said,


00:19:32.860 --> 00:19:36.300
Swagger and OpenAPI, and it's built with Hypothesis,


00:19:36.300 --> 00:19:41.300
Hypothesis, JSON Schema, and, drum roll please, pytest.


00:19:41.300 --> 00:19:42.360
- Yay! - Yay!


00:19:42.360 --> 00:19:44.660
So the idea is it reads your application schema,


00:19:44.660 --> 00:19:48.000
and then using Hypothesis, it will generate test cases


00:19:48.000 --> 00:19:49.900
that ensure your application is compliant


00:19:49.900 --> 00:19:50.740
with its own schema.


00:19:50.740 --> 00:19:51.700
- That's pretty cool. - Yeah?


00:19:51.700 --> 00:19:52.700
And it works in two ways.


00:19:52.700 --> 00:19:56.740
You can write tests with pytest, obviously, it's kind of meta,


00:19:56.740 --> 00:19:58.940
but then write tests with pytest


00:19:58.940 --> 00:20:01.320
and write code to talk to these things.


00:20:01.320 --> 00:20:04.080
It seems like maybe the predominant way actually to do it


00:20:04.080 --> 00:20:06.420
is through this command line interface,


00:20:06.420 --> 00:20:09.080
where you can point it at a URL,


00:20:09.080 --> 00:20:13.040
at the schema definition, the documentation,


00:20:13.040 --> 00:20:15.280
and then the actual endpoints,


00:20:15.280 --> 00:20:17.580
and it'll just go and do all that work,


00:20:17.580 --> 00:20:18.420
which is pretty cool.


00:20:18.420 --> 00:20:19.240
- Yeah, that's neat.


00:20:19.240 --> 00:20:20.280
- Yeah, you can also parallelize it.


00:20:20.280 --> 00:20:24.680
you can pass the number of workers for concurrent test execution.


00:20:24.680 --> 00:20:28.280
Also, if you're testing something that has an app,


00:20:28.280 --> 00:20:32.120
as in Flask or AIO HTTP or something like that,


00:20:32.120 --> 00:20:35.320
instead of firing up a thing that goes through the network,


00:20:35.320 --> 00:20:39.640
that goes through the whole serialization layer and hits some running thing,


00:20:39.640 --> 00:20:43.640
it'll actually just load up your app and run it in process,


00:20:43.640 --> 00:20:47.880
as if you were doing unit testing against your Flask or AIO HTTP app.


00:20:47.880 --> 00:20:52.080
So you can give it directly just the, basically the package or the module,


00:20:52.080 --> 00:20:55.600
and it'll just run it, like, without the web infrastructure in between.


00:20:55.600 --> 00:20:57.320
Yeah, so that probably speeds things up quite a bit.


00:20:57.320 --> 00:20:59.960
Yeah, at least you don't have to have a server running somewhere.


00:20:59.960 --> 00:21:02.080
So it's probably also easier for CI/CD,


00:21:02.080 --> 00:21:06.000
because there's not a second thing to be running to then talk to.


00:21:06.000 --> 00:21:08.800
You just run it straight out of thin air.


00:21:08.800 --> 00:21:12.160
And then also, Calvin, you're talking about being keen on Docker.


00:21:12.160 --> 00:21:15.240
This CLI also can run as a Docker image.


00:21:15.240 --> 00:21:18.740
So there's like no setup other than just Docker run this.


00:21:18.740 --> 00:21:20.740
– Living the dream. – Living the dream, baby.


00:21:20.740 --> 00:21:23.240
It's always going to work as long as you have Docker.


00:21:23.240 --> 00:21:26.240
Anyway, that looks like a pretty cool thing.


00:21:26.240 --> 00:21:28.240
And there's a little example in here.


00:21:28.240 --> 00:21:34.240
It's not super clear to me how to put specific use cases into the code test.


00:21:34.240 --> 00:21:37.240
So that's why I say I think CLI is kind of the way to go.


00:21:37.240 --> 00:21:41.240
Like there's ways to write code and it uses a primarization through hypothesis,


00:21:41.240 --> 00:21:46.240
but it's a little bit generic, I guess, on what you would assert for.


00:21:46.240 --> 00:21:51.240
Anyway, if you've got APIs and they're already documented with Swagger or OpenAPI,


00:21:51.240 --> 00:21:55.240
this seems like a cool thing to point at it just to make sure that it's hanging together.


00:21:55.240 --> 00:21:57.240
Yeah, very nice. I wanted to give this a try sometime.


00:21:57.240 --> 00:21:59.240
Yeah, more testing is always better.


00:21:59.240 --> 00:22:03.240
Especially if it's one line. I don't want to work to write that.


00:22:03.240 --> 00:22:05.240
Alright, Gavin, what's this last one here?


00:22:05.240 --> 00:22:08.240
Alright, so the last one up here, there's been a lot of people


00:22:08.240 --> 00:22:12.240
combing public code repositories looking for secrets.


00:22:12.240 --> 00:22:16.240
And a lot of the tools have been disregarding some common


00:22:16.240 --> 00:22:20.240
places secrets might be stuffed away.


00:22:20.240 --> 00:22:24.240
So they look at JSON files, they look at .py, .js, like it's embedded in


00:22:24.240 --> 00:22:28.240
code or maybe a .ini. Yeah, so they're not looking for


00:22:28.240 --> 00:22:32.240
byte-compiled code. So actually there's a blog post here by


00:22:32.240 --> 00:22:36.240
Jesse Lee, and I really enjoyed it because it's "Finding Secrets by Decompiling


00:22:36.240 --> 00:22:38.240
compiling Python bytecode in public repositories.


00:22:38.240 --> 00:22:40.240
I mean, it's really common


00:22:40.240 --> 00:22:42.240
for maybe people new to


00:22:42.240 --> 00:22:44.240
Python not to realize that those


00:22:44.240 --> 00:22:46.240
pyc files could contain


00:22:46.240 --> 00:22:48.240
possibly sensitive information.


00:22:48.240 --> 00:22:50.240
So a lot of common patterns


00:22:50.240 --> 00:22:52.240
might be put your secrets into


00:22:52.240 --> 00:22:54.240
files like settings.py or config.py


00:22:54.240 --> 00:22:56.240
or secrets.py and then get ignore the py file.


00:22:56.240 --> 00:22:58.240
But you could be accidentally


00:22:58.240 --> 00:23:00.240
still inserting the pyc


00:23:00.240 --> 00:23:02.240
file, which is the byte compiled version of that file.


00:23:02.240 --> 00:23:04.240
- Alright, like


00:23:04.240 --> 00:23:09.240
- Yes, exactly. - settings.pyc is probably something you could look for, huh?


00:23:09.240 --> 00:23:14.240
Right. So you should probably leverage whatever tools you're using to make sure you get a stock, like, Python


00:23:14.240 --> 00:23:19.240
gitignore file. So if you're using PyCharm and you have the gitignore module installed,


00:23:19.240 --> 00:23:24.240
it'll tell you, like, do you want to generate the stock gitignores for your type of project?


00:23:24.240 --> 00:23:29.240
And it'll put a bunch of stuff right in there for you. You should do that, for sure. But if you don't,


00:23:29.240 --> 00:23:35.480
actually be vulnerable to having some of your PYC files contain API keys or using passwords because that


00:23:35.480 --> 00:23:39.880
information gets compiled into the bytecode. What I liked about this post was they actually had a


00:23:39.880 --> 00:23:45.080
little crash course on deconstructing Python bytecode and like understanding what cached


00:23:45.080 --> 00:23:49.240
source means. So it wasn't just like, hey, don't do this thing. That's pretty uncool. It really


00:23:49.240 --> 00:23:53.560
kind of gave you a quick little lesson in like what a PYC file is or what's in that PyCache


00:23:53.560 --> 00:23:57.960
directory. You know, so this post also comes with another game you can play, which is kind of cool,


00:23:57.960 --> 00:24:02.840
a small capture the flag. So there's a little lab in there for you to actually try it out and play with it.


00:24:02.840 --> 00:24:06.840
So if you're totally into security stuff and want to see how this stuff actually works under the covers,


00:24:06.840 --> 00:24:11.340
the author went just above and beyond and gave you a capture the flag game


00:24:11.340 --> 00:24:14.960
to actually go explore those PYC files and cache files that are up on


00:24:14.960 --> 00:24:18.480
GitHub or any other public repository, which is really cool.


00:24:18.480 --> 00:24:22.600
I see, that's cool. So the idea is, here's some that have this problem,


00:24:22.600 --> 00:24:25.280
your job is to go uncover them or something like that.


00:24:25.280 --> 00:24:28.560
Yeah, exactly. Here's a couple of sample repositories. Go and cover this.


00:24:28.560 --> 00:24:34.560
So the action items from this post specifically was like if you do have PYC files containing any secrets,


00:24:34.560 --> 00:24:38.060
you need to make sure you delete them and then go revoke and rotate those secrets.


00:24:38.060 --> 00:24:43.060
The other thing was using a standard get ignore for checking, not preventing that to happen altogether.


00:24:43.060 --> 00:24:48.340
And ultimately, I think the best way to handle, I've been preaching kind of a lot to folks who are around me recently


00:24:48.340 --> 00:24:53.640
about how to store secrets using tools like Vault or 1Password, depending on what your situations are,


00:24:53.640 --> 00:24:56.640
making it easy to get those secrets into, say, environment variables,


00:24:56.640 --> 00:24:57.680
for me is the way to go.


00:24:57.680 --> 00:25:00.180
Don't even have those secrets sitting on your file system


00:25:00.180 --> 00:25:01.780
in any form whatsoever.


00:25:01.780 --> 00:25:06.380
So I typically have a little shell script that uses the command line tool for like one password,


00:25:06.380 --> 00:25:09.680
or uses vault with a token to actually grab the secrets in real time,


00:25:09.680 --> 00:25:12.720
stuff them into an environment variable, either shove them into a container,


00:25:12.720 --> 00:25:14.880
or as I launch, I grab this out of my environment


00:25:14.880 --> 00:25:17.540
and don't even take the risk of putting that stuff on my file system.


00:25:17.540 --> 00:25:18.840
That's a clever idea.


00:25:18.840 --> 00:25:21.040
You know, because so often it's kind of a chicken and egg.


00:25:21.040 --> 00:25:24.040
It's like, great, so you don't store it in GitHub.


00:25:24.040 --> 00:25:26.040
So now it's over in this other text file.


00:25:26.040 --> 00:25:28.040
- Right. - It's like,


00:25:28.040 --> 00:25:30.040
how much better is that Audit Slayer?


00:25:30.040 --> 00:25:32.040
I mean, I know it's better, but it's still


00:25:32.040 --> 00:25:34.040
not that awesome, right?


00:25:34.040 --> 00:25:36.040
So having it encrypted is nice.


00:25:36.040 --> 00:25:39.040
- Right, 1Password and LastPass and BitKeeper,


00:25:39.040 --> 00:25:42.040
or KeePass, all have command line tools


00:25:42.040 --> 00:25:44.040
that you can script to get data out of them.


00:25:44.040 --> 00:25:46.040
1Password will give you back JSON,


00:25:46.040 --> 00:25:48.040
and with JQ you can basically filter it out


00:25:48.040 --> 00:25:50.040
and grab the thing and put it into an environment variable


00:25:50.040 --> 00:25:54.040
on the fly without it ever touching your file system, which is really nice.


00:25:54.040 --> 00:25:58.040
Okay, that's interesting. I didn't know about that. I'm a big fan of 1Password, but I didn't know it did that.


00:25:58.040 --> 00:26:02.040
Oh, so go check out, go grab the OP 1Password tool.


00:26:02.040 --> 00:26:06.040
It's got full access. You can just basically grab secrets. Yeah, you can edit secrets.


00:26:06.040 --> 00:26:10.040
I'm a huge fan of 1Password as well. And LastPass was nice as well. We used to use LastPass


00:26:10.040 --> 00:26:14.040
for a long time. But I store, for example, like AWS secrets.


00:26:14.040 --> 00:26:18.040
I'll put those up in 1Password in the notes field or I'll create


00:26:18.040 --> 00:26:20.700
separate special fields that have key value pairs,


00:26:20.700 --> 00:26:22.700
which are environment variable name


00:26:22.700 --> 00:26:24.300
and environment variable value.


00:26:24.300 --> 00:26:27.040
And then I just have a quick little one-liner in my shell


00:26:27.040 --> 00:26:29.440
that converts those from one password JSON


00:26:29.440 --> 00:26:32.640
into export those to real variables in my shell.


00:26:32.640 --> 00:26:35.000
So more than just the secret key,


00:26:35.000 --> 00:26:37.500
like the region and what profile to use,


00:26:37.500 --> 00:26:40.040
which assume to do, anything that's a variable


00:26:40.040 --> 00:26:42.040
that I can put in my environment, I'll put into one password.


00:26:42.040 --> 00:26:44.040
- Okay. Yeah, that's cool advice. - That is cool.


00:26:44.040 --> 00:26:47.240
Yeah. Right. Well, that's it for our six items.


00:26:47.240 --> 00:26:49.740
You guys got any extra stuff that you want to throw out there?


00:26:49.740 --> 00:26:50.740
Ron, I see you got one here.


00:26:50.740 --> 00:26:54.440
Yeah, I just noticed that the PSF is looking for volunteers


00:26:54.440 --> 00:27:00.040
to help migrate issues from bugs.python.org to the GitHub issues.


00:27:00.040 --> 00:27:03.540
So if you want to help out PSF and do something worthwhile,


00:27:03.540 --> 00:27:05.240
like this is a cool thing to volunteer for.


00:27:05.240 --> 00:27:06.340
Yeah, that's cool.


00:27:06.340 --> 00:27:07.440
That is cool. How about you, Calvin?


00:27:07.440 --> 00:27:10.540
In case you missed it, there is a Learn Python Humble Bundle


00:27:10.540 --> 00:27:13.440
that is going on right now that will benefit a couple charities,


00:27:13.440 --> 00:27:17.140
the Book Industry Charitable Foundation and the NoStarch Press Foundation.


00:27:17.140 --> 00:27:21.460
And so those are helping folks who basically need a safety net during times like this,


00:27:21.460 --> 00:27:24.900
like independent bookstore owners, comic book owners, things like that.


00:27:24.900 --> 00:27:30.580
For $15, you get like nearly $400 worth of like amazing NoStarchPress books.


00:27:30.580 --> 00:27:34.660
At some point in time, I recommend probably almost every one of the books that is on that list to folks


00:27:34.660 --> 00:27:38.020
just so they can get jumped in both feet. How do I learn Python?


00:27:38.020 --> 00:27:41.700
I've got three of them sitting on my desk right here, because they're fun books.


00:27:41.700 --> 00:27:44.980
You know, there's like stupid Python tricks and automate the boring stuff.


00:27:44.980 --> 00:27:48.820
and there's really fun books in there. So I'd recommend it to anybody who's


00:27:48.820 --> 00:27:51.540
spending time at home and doesn't know what to do with their time.


00:27:51.540 --> 00:27:54.500
Go grab these books for 15 bucks or pay what you want.


00:27:54.500 --> 00:27:58.820
The money goes to a good cause and you get to learn awesome Python language.


00:27:58.820 --> 00:28:03.140
Nice. Yeah, that's cool. The Mission Python book is intriguing to me.


00:28:03.140 --> 00:28:06.900
That's definitely a cool one. All right, I got a few quick ones.


00:28:06.900 --> 00:28:13.380
Python 3.9 Beta 1 is out for testing. So if you're into that, you know, go check it out.


00:28:13.380 --> 00:28:16.180
you can run, just download and run it.


00:28:16.180 --> 00:28:18.500
You know, play around with some of the new ideas in there.


00:28:18.500 --> 00:28:23.700
Also, not beta, but for real, Python 3.8.3 is also available.


00:28:23.700 --> 00:28:24.580
That's pretty cool.


00:28:24.580 --> 00:28:29.540
And then I got a cool message this morning from Jeff Derbyshire.


00:28:29.540 --> 00:28:33.380
And he sent over something that I thought was just kind of a cool little piece of information.


00:28:33.380 --> 00:28:35.940
I'll link to the paper in the show notes.


00:28:35.940 --> 00:28:38.260
So everyone's trying to help out this COVID stuff.


00:28:38.260 --> 00:28:40.580
Some particle physicists put some free time,


00:28:41.220 --> 00:28:45.220
took some of their free time to design and build a low-cost ventilator.


00:28:45.220 --> 00:28:46.220
It's pretty cool, right?


00:28:46.220 --> 00:28:46.720
Yeah.


00:28:46.720 --> 00:28:49.720
And then they wrote a paper about it because they're particle physicists.


00:28:49.720 --> 00:28:52.720
And if you look through it, it says things like,


00:28:52.720 --> 00:28:55.720
the target computing platform is Raspberry Pi 4,


00:28:55.720 --> 00:28:59.720
as shows in the trade-off between computing power and


00:28:59.720 --> 00:29:02.720
power consumption and things like that, which is nice.


00:29:02.720 --> 00:29:05.220
The target programming language is Python 3,


00:29:05.220 --> 00:29:08.720
and the UI is PyQt 5.


00:29:08.720 --> 00:29:12.280
And then the MVM GUI, the UI for it,


00:29:12.280 --> 00:29:15.120
is Python 3 software written with PyQt 5.


00:29:15.120 --> 00:29:19.280
And pretty nice, allows you to steer and monitor the equipment.


00:29:19.280 --> 00:29:23.520
So anyway, here's a cool, effectively a Python ventilator


00:29:23.520 --> 00:29:26.360
created by a particle physicist that's open source.


00:29:26.360 --> 00:29:28.080
- Yeah, that's awesome. - Yeah, it's kind of cool.


00:29:28.080 --> 00:29:30.360
There's a huge number of names on this paper too.


00:29:30.360 --> 00:29:31.560
Yeah, it's pretty awesome.


00:29:31.560 --> 00:29:35.120
Anyway, I'll link to that, people can check it out if they're interested.


00:29:35.120 --> 00:29:37.960
You got to do something to keep these particle physicists off the streets.


00:29:37.960 --> 00:29:41.960
That's right. No one just roaming around any old collider.


00:29:41.960 --> 00:29:46.560
Alright, so, for the joke this week, I thought I'd grab like a couple more


00:29:46.560 --> 00:29:48.560
O'Reilly covers. Not O'Reilly.


00:29:48.560 --> 00:29:51.360
I know, I mean, you already had the Humble Bundle book thing.


00:29:51.360 --> 00:29:53.160
So we got the O'Reilly ones.


00:29:53.160 --> 00:29:54.760
And I thought we could just each just do one.


00:29:54.760 --> 00:29:56.760
I'll talk about the first one here.


00:29:56.760 --> 00:30:01.360
It's a chameleon, which obviously is the lizard that can change colors to blend in.


00:30:01.360 --> 00:30:04.360
Brian, you'll like this one. It's called refactoring code without test.


00:30:04.360 --> 00:30:05.960
It looks like it's working.


00:30:05.960 --> 00:30:07.800
No code coverage, no problems.


00:30:07.800 --> 00:30:09.080
It just blends right in.


00:30:09.080 --> 00:30:10.440
Looks like it works on my machine.


00:30:10.440 --> 00:30:10.920
That's right.


00:30:10.920 --> 00:30:12.680
It was written by Sir Crash a lot.


00:30:12.680 --> 00:30:13.560
So cool.


00:30:13.560 --> 00:30:15.400
All right, Brian, you want to do the next one?


00:30:15.400 --> 00:30:15.960
Sure.


00:30:15.960 --> 00:30:19.640
Becoming a manager and listening to people complain all day.


00:30:19.640 --> 00:30:22.520
Jesus Christ, not another budget meeting.


00:30:22.520 --> 00:30:23.880
So luckily, I--


00:30:23.880 --> 00:30:24.520
And the animal?


00:30:24.520 --> 00:30:26.040
The animal's a crab, of course.


00:30:26.040 --> 00:30:30.200
I don't have to deal with budget meetings, luckily.


00:30:30.200 --> 00:30:32.120
Yeah, yeah, me either.


00:30:32.120 --> 00:30:32.920
All right, Calvin.


00:30:32.920 --> 00:30:35.480
This one's a special web one for you.


00:30:35.480 --> 00:30:37.480
Yeah, it is. I'd say this is perfect for me.


00:30:37.480 --> 00:30:39.480
So this is the z-index.


00:30:39.480 --> 00:30:41.480
Good lord, how many zeros?


00:30:41.480 --> 00:30:43.480
I think it's 100 billion.


00:30:43.480 --> 00:30:45.480
Is it 100 billion? It's the real world CSS.


00:30:45.480 --> 00:30:47.480
You've come this far, no going back now.


00:30:47.480 --> 00:30:49.480
That's so true on so many levels there, I think.


00:30:49.480 --> 00:30:51.480
I know, you're like,


00:30:51.480 --> 00:30:53.480
z-index equals 1.


00:30:53.480 --> 00:30:55.480
No, 10. No, 100.


00:30:55.480 --> 00:30:57.480
Fine, just, it's eventually not going to be behind that thing.


00:30:57.480 --> 00:30:59.480
I love it.


00:30:59.480 --> 00:31:01.480
Alright, and then the last one.


00:31:01.480 --> 00:31:03.480
I'm a big fan of design patterns.


00:31:03.480 --> 00:31:06.760
is avoid using dark patterns.


00:31:06.760 --> 00:31:08.960
And it says do or do not, there's no try.


00:31:08.960 --> 00:31:10.520
And of course there's a Yoda on it.


00:31:10.520 --> 00:31:11.480
(Calvin laughs)


00:31:11.480 --> 00:31:12.560
Very good, very good.


00:31:12.560 --> 00:31:14.160
So yeah, these are all fun.


00:31:14.160 --> 00:31:16.360
These are really good covers.


00:31:16.360 --> 00:31:18.240
Yeah, always a nice joke.


00:31:18.240 --> 00:31:20.720
As well as nice being here with both you guys.


00:31:20.720 --> 00:31:23.800
So, right as always, Calvin, thanks for joining us.


00:31:23.800 --> 00:31:24.640
- Yeah, it was wonderful.


00:31:24.640 --> 00:31:25.460
Thank you very much for having me.


00:31:25.460 --> 00:31:26.300
- Thank you. - You bet.


00:31:26.300 --> 00:31:27.480
Bye everyone. - See y'all later.


00:31:27.480 --> 00:31:29.200
- Thank you for listening to Python Bytes.


00:31:29.200 --> 00:31:31.680
Follow the show on Twitter via @pythonbytes.


00:31:31.680 --> 00:31:34.720
that's Python Bytes as in B-Y-T-E-S.


00:31:34.720 --> 00:31:37.920
And get the full show notes at pythonbytes.fm.


00:31:37.920 --> 00:31:39.520
If you have a news item you want featured,


00:31:39.520 --> 00:31:41.960
just visit pythonbytes.fm and send it our way.


00:31:41.960 --> 00:31:44.840
We're always on the lookout for sharing something cool.


00:31:44.840 --> 00:31:46.680
On behalf of myself and Brian Okken,


00:31:46.680 --> 00:31:48.000
this is Michael Kennedy.


00:31:48.000 --> 00:31:50.040
Thank you for listening and sharing this podcast


00:31:50.040 --> 00:31:51.680
with your friends and colleagues.

