00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 278. Recorded April 6 2022. I'm Michael Kennedy. And I'm Brian. I

00:00:12 can name Riesling bow.

00:00:14 Welcome to CIA. It's really great to have you here.

00:00:17 You know, I'm really excited, and I feel honored to be here. So thanks for the opportunity.

00:00:22 Yeah, it's gonna be great to share some Python news with you. Before we jump into all those things. Tell us a bit about yourself. What do you do? What do you what do you into?

00:00:30 Firstly, I'd like to say I'm still relatively early on in my career. And I'm from Zimbabwe, and we have a small but growing Python community here. And for the long time, I didn't have any community. So podcasts like your talk, pipe and podcast was the only way I got to come in to connect with community members. So it's really great to be here. But on the question of, partly as I am a software developer a bit I work in the back end, I work for a company called ideation.ai. It's a health tech startup that's building information systems that help clinicians manage patients and hospital hospitals better. So I work mostly on API's and micro services using Python, Django, Postgres mostly.

00:01:15 Right. I know, that sounds like a really fun project. And we know that health care needs help and automation and, and modernization. So thanks. That's all Yep. Yep. Very cool. All right, Brian, should we kick it off? Yeah, sure. Well, you talked about getting drunk or what is this getting done? Sorry, I must have misread that.

00:01:34 So this was just announced a few days ago from Darren burns. He's He's the engineer that's helping. William, that will well, with with the rich and everything. The extra rich empire.

00:01:49 Yeah.

00:01:51 So this is just really cool. Because I often wanted the donkey, he released dunk. So dunk is a a prettier, get diff tool, and it's, it uses rich, and it's just a command line tool, and it's beautiful. So you just even install it, and then you do a git diff on something. Could be one file, or it could be it's usually a commit, right? So you do a diff of whatever you have now, or other stuff and it just instead of doing the weird, like the hard to read

00:02:26 the minus plus Yeah, yeah, that thing. It's got these

00:02:29 nice, just this nice colors with rich of like, you know, what was added? What was green for added red for taken out. And the line numbers, it's beautiful. And he's it's still a work in progress, but I'm using it already. It's just great.

00:02:45 This is fantastic. When I first looked at this, I thought it was like a GUI window that was showing, but now it's just the terminal.

00:02:52 Yeah. Yeah, it's pretty simple.

00:02:57 Text Editor. But yeah,

00:02:59 definitely, some text editors have something that like this nice, but just on the command line. It's super cool. The one of my first questions with it was sometimes I have a lot of diff stuff. So does this have a pager? And the answer from Darren was it does not have a pager, but but you can use less dash capital R I don't know what the RT is. But anyway, if you pipe git diff to Doc, and then pipe it to less dash r, you've got a diff with a pager that works for me. I'll just alias that to something. So yeah, yeah, that's really cool. Anyway, pretty quick, pretty short topic. But for people that are looking at git diff. So a lot, this is a super handy thing to look at.

00:03:42 Yeah, this is neat. I usually do a lot of my deaths in PI charm. And it actually looks real similar to that UI. We see they were what about you? How do you see your deaths?

00:03:51 Yeah, I do most of my coding in Visual Studio code. And I use the Visual Studio gift viewer for that. Same it's pretty similar to this.

00:04:00 Nice. Yeah, this looks great, I think. Very nice. Yeah, very nice. One. How about we start with some memes. So we all heard about log for J. And my favorite one was the take on the XKCD about little Bobby Tables, the little little little jindee or something like that. I can't remember. But you know, all the jokes aside like you know, here's Homer Simpson zero days without log for Jcv. And maybe the best one was that that this guy right here this this guy looks like he's probably about 75 are trying says upgraded log upgrading log for J three times wasn't that stressful, says Dave. 28 years old. But in all seriousness, like, is there a log for pi? Like, is there something that we should consider? And my first thought was, yeah, no, we're good. Like, we don't have this stupid, like remote method invocation where you can inject like, a function call as a string inside Have your your log message Oh, no. But here's Ari bolanburg, who wrote an article it says he is not anywhere near as severe as that. But there are some things you should consider. And so for your consideration, I present this article and some ideas. So it says, look, here's the basics of logging. And this is using pythons built in Logger. I'm, I'm a fan of logbook and log guru and the sort of higher level, nicer things. But nonetheless, here's the basics, right? So you can log like, say, logger dot info, or trace or whatever, and then put out a message like hello world, there's no injection there. You can also do this thing, which is really the crux of the problem across the board is you can say, here's a formatted string, and the data that formats it. So you can put in the problem with log for J was, even if the string was fully evaluated as user input or something. You take some user input and you fully validated, it still could have it'll still get like reinterpreted for these remote, like trying to find what machine Am I running on or my production or debug, like, let me go call this function and find out or just call it to hack you. But the Python version doesn't have that. But you can do this like format string and pass this context variable thing like pass a data structure in. In that case, some bad stuff can actually happen here. Right? So that's fine as well. What about what if I wrote my as my name instead of or my message instead of Hello, I wrote, hello, quote, backslash in Info main user, Alice commented something else, and you would you pass that over. And what you would end up with is a log message that was supposed to be one line that ends up like two. So that could cause some confusion, right, that might might be problematic is not going to result you and being hacked. But there's more like denial of service type of thing. So like one thing you could say as well just don't use backslash n, like pick those out. But there are all sorts of freaky Unicode ways to like restructure similar meanings and stuff to it. Another one has to do with formatting. So if you're logging in some information, and it's just a regular F string, that's probably fine. But if what you're logging into the F string, you can later get evaluated again, passing this like data structure, asking the logger to fill out the format string, then you can pass interesting stuff. One of the more interesting ones was, you could say percent parenthese, variable name, close parenthesis, nein, nein, nein, nein, nein, nein, nein, nein, nein s. And what that'll do is it'll pad the username with a gigabyte of whitespace and then try to have you read it to the log file. Okay. So that's bad, right? Right. You could also do things if you knew the data structure that was being passed into fill out the log string pad, you could sort of try to reach out and get variable names out of it by putting a formatted string in there. And if you marry that, with the huge piece of text that will make the login really slow. So you can put in like different things. And if you see, oh, this message actually makes the request really slow, you could infer that maybe that data is actually in the variable being passed over. So then you could try to get it to write it to a file if you have a file access, but not other types of access. Anyway. So there's a bunch of things. So basically, this the long story short is don't mix like F string formatting, along with passing more data to the log file, and one or the other. Because the logger knows how to look for some of these things in when it takes the data and puts it in the format. But it doesn't do that for the original string. So careful about mix and match final thing. There's actually in, it's been included in a PEP, and there's a discussion on discuss.python.org. And there's actually a pretty interesting discussion with a bunch of core Devs. There. So you can see, that's maybe a better follow up there. But pretty interesting. There's no log for pi. But there doesn't mean you can just completely go crazy with an verified user input.

00:09:01 You should trust your users, though.

00:09:03 I know. Why not? They're so friendly. And consider why not. The real ones aren't, you know,

00:09:10 when this when this blog for do vulnerability came out. And I realized that it wasn't really a big problem in pipe, and I didn't pay any attention to it. And now I'm actually shocked that you could do a denial of service attack using that.

00:09:23 Yeah, exactly. I think that's what it basically becomes is, there's two aspects. One is you can sort of crush the server by having it right, so much data. The other that they pointed out here was if your goal is to try to obscure regular hacking, if you could wreck the log file with so much data that it's really difficult for people to parse the log file, you might be able to hide yourself a little bit better for longer. So anyway, there's some interesting stuff in there. I will see they over to you.

00:09:51 Yep, thanks. If you're building a software as a service platform in Python and Django, there are a few things to I think about, you know, like the architecture you're going to use, what type of database you're going to use, whether use a single database or multiple databases and and all these things. So while I was getting ready for this call I, upon this book, it's called Building multi tenant applications with Django. And it's by an author that you've actually covered on the show at a company, I think called a gin, like this. So this book is free, it's open source, anyone's, anyone's free to read it, download it, and it goes through the different approaches that you would, you'd have to follow I mean, the different architecture designs that you can, you should consider when building software as a service or multi tenant applications. And so one of the things they cover here is email where you're using queries to isolate the data, something like that Postgres emails can do that. That's what goes over the different approaches you can use to build multi tenancy apps, right. And then it also covers some third party packages that you've been installed. That's, that helped do a lot of boilerplate code for you.

00:10:59 That's really nice. Because I've considered this it'd be so great. If you're doing some sort of software as a service type thing. We people log in, and you weren't like that group just to see all their all their data and all their records and stuff. But it's so scary, because if you just forget the where clause on just one, and just one exactly, they get everybody's data, which is really bad, right? And so this is really cool.

00:11:21 Yeah, this is Yep.

00:11:22 So the book covers things like using head HTTP headers, or subdomains and in the request to identify different tenants, and how you do that, how you capture that using middleware to Django.

00:11:36 That's cool. So some of the middleware is Django, multi tenant, Django, tenant schemas, or Django DB multi tenant, not a ton of variation in the naming there. But it's still pretty cool, right? And some of them use schemas, and some of them use isolated databases, right?

00:11:53 Yep. Yep. Nice, like loyal depend on what your tolerance for cost is. And then database management. So if you don't mind having a database for each client, you could do that. And then you'd have to do migrations on each database whenever you make updates to the application. Or you can just want to have a single shared database, you could do that and isolate using schemas.

00:12:13 Yeah. I hadn't thought about having to migrate every separate database. But yeah, that's a ton of work. The deployment all of a sudden looks really rough, doesn't it? Yep. Yeah. But then you got to isolation. Yeah, exactly. There's no way you're gonna make a mistake there. Do you guys do anything like this with your healthcare products?

00:12:30 Yep. Yeah, we use one of these approaches. I can't tell you which one but we we use, we use with our software, the software as a, what do you call it? Software as a Service, we have a number of clients, they need to have a central login, like the single application that way you can all log in and view only their data and we can't have information from one client leaking over into another.

00:12:51 Yeah, cool. I will really need I'm sure that'll be super valuable to people indeed. Now, Brian, before we move on, about it about our sponsor, once again, Microsoft is here, so let's hear from them before we carry on. This episode of Python bytes is brought to you by Microsoft for startups founders hub, starting a business is hard. By some estimates, over 90% of startups will go out of business in just their first year. With that in mind, Microsoft for startups set out to understand what startups need to be successful and to create a digital platform to help them overcome those challenges. Microsoft for startups founders hub was born founders hub provides all founders at any stage with free resources to solve their startup challenges. The platform provides technology benefits, access to expert guidance and skilled resources, mentorship and networking connections, and much more. Unlike others in the industry, Microsoft for startups founders hub doesn't require startups to be investor backed, or third party validated to participate. Founders hub is truly open to all too. What do you get if you join them? You speed up your development with free access to GitHub and Microsoft Cloud computing resources and the ability to unlock more credits. Over time. Help your startup innovate founders hub is partnering with innovative companies like open AI a global leader in AI research and development to provide exclusive benefits and discounts through Microsoft for startups founders hub, becoming a founder is no longer about who you know, you'll have access to their mentorship network, giving you a pool of hundreds of mentors across a range of disciplines and areas like idea validation, fundraising, management and coaching, sales and marketing as well as specific technical stress points. You'll be able to book a one on one meeting with the mentors, many of whom are former founders themselves. Make your idea a reality today with a critical support you'll get from founders hub to join the program, just visit Python bytes.fm/founders hub all one word, the links in your show notes. Thank you to Microsoft for supporting the show. This is a topic that has been very interesting to me, sort of this memory story around Python lists. Yeah I'm looking forward to this, that's when you got to share.

00:15:02 So I was I was interested, this is the gonna present an article called pre allocated lists with Python by red Juan de laoire. I think, anyway, that I've always thought about this before, because one of the things that happens with when you allocate a list in Python, if it's empty, it's not really empty. There's some data there already. And one of the first things the article talks about is this data structure that a C struct that Python uses to store, basically the info about the list, but it's still space, but it's, you know, it's still it's empty, supposedly, and then when you add normally, you kind of just append to it. So you are one way to, to add things to a list is to just append one thing after another. And what Python does, it's kind of a neat algorithm is it allocates more than it needs. So if you add it, you add, like five things are six things or something and there's not enough space, it'll it'll, and I don't remember the real algorithm, but it chunks up a bigger portion. And then if you run out of space, again, you get more space added to it,

00:16:06 right? Because the last thing you want to do is reallocate for every night at a time and copy the whole list as you're adding 1000 items, that would be super bad.

00:16:15 Right? So this, this article talks about three different ways. Like let's say, if you know, you know, you're gonna have 10,000 elements in a list. And in this example, it's just counting, you know, zero through 9999, and filling it into the list. But, but there's, that's, I think that that's irrelevant is the same sort of work for each kind of list. But it takes three kinds whether Well, the first kind is starting with an empty list and just appending every time. And that seems like it would be slow. But it's not actually not that bad. The other two ways are to pre allocate, and I'm like, how would you pre allocate, but his his technique was to, to take like none, and assign your list none times 10,000 to 10,000 element list of nuns, that's fine. And then

00:17:08 long as it's not a valid value, you're fine.

00:17:10 Yeah. And then the other the third way, was to take C whereas it is to do a list comprehension, and do and just assign your list the list comprehension, and then put a for loop for i in range 10,000, in the middle of it. And in the case, in this case, if you weren't really just counting to a 10,000. And doing something else, it would be a similar sort of thing of you'd have a for loop to fill this this in. And I I actually had no guesses as to what would be fastest. So the the, the final, say when he was doing timing on this was that the append method actually was was the slowest, but not terrible. It's pretty efficient. And the pre allocate method, it shaved, so we had 499 microseconds on his machine. And then 321 on the pre allocate. So that's not even half as I mean, it's not an order of magnitude, but it is faster. And the list comprehension was 225. So that was about half, it was about twice as fast as the Append was to use a list comprehension. And list comprehension is actually the most readable of the three I think. So. It's just sort of a, I guess, it's an interesting article to look at, like how to discuss, like how this, this allocating and allocating extra memory happens with append. But it also is interesting that the pre allocate, it seems like that would be the fast one of the faster ones and it's not so interesting. Yeah,

00:18:52 I wonder if I don't think the list has this. I know in other languages it does. Where you when you create the list empty, you can say I would like to initialize you with this capacity. Yeah. Right. And if it was like a built in way to say when you allocate your inner sea level array of pointers, make it this big to start with, but still sort of fill into it before you start your growing algorithm. Maybe there'd be a core PEP for some of the containers if it's not there. But yeah, this I think it's natural that the list comprehension is fastest. And also it doesn't, it means you don't end up with a weird programming model where you have a list, its length is one thing, but that's not what you should actually work with. I think that's, that's probably not worth it, except for extreme cases.

00:19:32 A couple of things that I was, I found interesting about this that I'd like to pursue a little further is it didn't talk about memory space. So one of the benefits of pre allocating is you're not allocating more than you need. But I don't know if you're not allocating I don't know what the Python algorithm is. But, but the so I'd like to see this with space. So how much memory is being used by the three methods? The other thing that would be interesting to see is to thrown NumPy in the mix, because I know NumPy has some more efficient. I mean, it's a completely different beast, but still

00:20:09 do work in homogeneous data. That's numbers or something or strings. Yeah. What do you think about this? Do you have to worry about these little details? Are you guys under like, heavy performance pressure?

00:20:18 You know? No, not not right now, at least, I've never had to think about like sea level things. And I'm actually taken aback that so much goes into allocating stuff to a list, because in Python, you know, allocating and stuff to let's just create a list and put stuff in there, you know? So this is eye opening to me.

00:20:36 Yeah, it's pretty cool ads. It's not like see, we have to pre allocate it and then fill it out and, or something funky like that.

00:20:42 So yeah, so Wilma Coogan is saying I think the list comprehension will pre allocate because the range object has a Dunder length hint method that reports its size? In? Yeah. So I think maybe the time saving we're getting we're getting is that we're not filling it in with nuns to begin with, but actually filling it in with the data we want.

00:21:02 Okay, yeah. Good to know. Thank you. Well, I've more than once had a not argument but a disagreement where somebody said, but you need to show me because, and it's Oh, you have a for looping users append to the list, that's the same as the list comprehension. They're doing the same thing. The outcome, the final result is the same. But the information that Python has to work with is more much like we'll say here, it can take all the information as to work with a say, Oh, look, it's going to be this long as we loop if you're going to just add stuff to the list, not use it and other interesting ways. So just go in and jam on it. Right? Yeah. All right. Speaking of working with some data, let me tell you about this cool project called maca roo you guys know this? No, no, no. So here's the story. Imagine you needed some data. And you want this for testing. Or you this could be testing like unit testing, this could be development, like, one of the big problems with UI apps is having something to display, just so that it fills it out. If I'm going to, like fill out a web page and say, I want to work on the CSS of this, this table or the CSS of this list. If there's nothing in the list, what are you gonna do, right? So you want have some realistic data to work with. So this mockery is this free thing that has all these different types of data that you can work with. So I can come over here and just say, I want some data. And I want it in a CSV format, or SQL table, or Firebase or Excel or XML, or you know, my favorite prize JSON. And then you can say, alright, well, I'm gonna have an ID here, we have like a customer table. So Id first name, last name, but it has also things like gender, and one of the types you can pick is gender. So it has all these well known data types. So if I go and type in I want to gender not only will it say male, female, or something, it gives you like a list. So I can have gender written out as female, male or non binary, I could have gender abbreviated as m or F. Or just buying. So you can have like, lots of control. So if I wanted, like, you say, auto or car, or I gotta type out a car, you do like car makes models, registration numbers, all of these things. So you can say this one is a gender abbreviated, and like you fill it out. And then you can just say, generate me this data exactly like you want and then download it in whatever format like I said, CSV SQL, insert statements, JSON excel in that cool. That was pretty cool. So I've used this more than once.

00:23:32 I can see a use case, but it's already Yeah, right.

00:23:35 Yeah. Yeah. And I, I kind of liked the first option when you were selecting the gender type, having it be animal names. That'd be fun.

00:23:45 Yeah. There's all like, there's all these. There's all these crazy. There's all these different data formats. So you've got, like cars. What else we got here? Credit cards. Good. ISBN for bogus numbers on a normal distribution, passwords,

00:24:02 even MongoDB object IDs.

00:24:04 That's cool. Oh, that is pretty cool. Yeah, yeah. So you have ecommerce stuff, money, stock, market symbols, locations, healthcare. We'll see they have at that. You got your, your drug companies, your NHS numbers and all those different things. Oh, it's because I'm searching for cotton. Why is car keep showing? Animals? Our names? Yeah, yes. You could have a wombat or jungle kangaroo. I mean, these are all some fun, right? Yeah. So these are all super neat. You can get up to like 1000 rows for free. And then I think you have to pay if you need more than that. And then a follow on I believe this from the same company. Full disclosure, these guys sponsored talk Python, but I wanted to talk about this even before so they have this thing, this service called tonic, that you can then point out your production database, and it'll do things like generate me something that looks exactly like production data but doesn't have any personally identifiable information. To that I can give it to the developers to test with real looking data with real variations from our clients, but is sort of safe. Like if they lose their laptop or whatever, or they just leave it open. It's not going to destroy something, right? Yeah. That's pretty cool. Yeah. So you basically connect it to your database, and then it will belong in to recruit data that looks more like what you actually have instead of just this mockery data. So pretty neat. Anyway, if you need to do some testing, you need to generate fake data, not just for like pi test testing, but also UI development, and just something to work with. These are both good options. Very cool. Yeah. Cool. Cool. Sam, they aren't says this. Fantastic. I agree. And Will says yeah, super useful. I could see even using this for testing, development of rich and textual out there. So very cool. All right. We'll see they after you. Last one.

00:25:53 All right. So this is a fun project that a good friend of mine, Daniel, April Tschida, made, he's demoed it at a couple of conferences. It's called the Brock EO graph. The goal for this project is to make a pen plotter, powered by Python and make it as cheap as possible using common things you can find in the house. So it's, it's a plotter, it uses the Raspberry Pi and ice cream stick in the clouds pig to draw a pencil Of course, like, so. It's got Python code that turn that turned an image into, I think it's called a raster rasterizes an image into points, Geo coordinates on a piece of paper. Give

00:26:34 us this yesterday. Oh my gosh, this is great.

00:26:37 Yeah, so I don't know if that can play video here. But it looks pretty cool when it's when it's when it's actually printing out or plotting out an image. It's cheaper compared to work here. But yeah, it has a motor that that then does everything and it can draw very basic images. It's a whole date that you can work on it. And the full edit costs. I mean, the setup for this cost less than 50 US dollars. And it's pretty, pretty fun project.

00:27:05 I would have gotten in a in art class if I had this. No, I love it. This is really neat. People should definitely play it. Because it's fascinating. Yeah,

00:27:15 yeah. Yeah. The website has like a How to Guides and document page on how to build it, what what things you need were sources to the software and everything. And it's also an open source project that anyone can contribute to if you're interested.

00:27:30 This is really neat. This is one of the things I like about simple things like this is they're great projects to start kids with, because it's very real and physical.

00:27:40 Yeah, I was thinking it'd be awesome. And a teaching. Yep. scenario as well. Yeah. Cool. All right. This is a great one. And I love it very easy to do with Python stuff. Alright. Well, I think that's it for our main items. Brian, do you have anything you'd like to share?

00:27:54 Oh, we covered last. I think we covered last week that the Python issues were migrating to get hub and it might be on April Fool's Day, and it was not. So next plan looks like April 8. Next one more week.

00:28:09 If we keep talking about it, it's never gonna happen.

00:28:12 Like a watch pot sort of a thing? Exactly. Yes. While I'm waiting for it to happen, I want it to happen.

00:28:18 I know that the transformation will be completed that point, right.

00:28:22 So next week, we won't cover it at all unless it's already happened. But if it's delayed again, we won't cover it again until

00:28:28 Exactly. We're not getting roped into this three times. Like we see a anything else you want to give a shout out to?

00:28:34 Yep, yep. Just one thing is a project that I found recently. It's called Thunder client. It's an alternative video code extension. And it's lightweight. You download it in less than a second. And you can get started sending sending requests. And it has lists the top then postman, right. It's it doesn't need any. It's like, it's easy to install. Yeah. So

00:28:57 if you're testing API's, like construct a JSON thing, put this header and you want to call it Yeah, Thunder client for VS code. Very nice. Yeah.

00:29:04 Thunder Xander. If

00:29:05 you're using code, exactly, yeah. You shoot gold, you just switch tabs, you know, instead of switching applications, so that shaves a few microns like Yeah,

00:29:15 exactly. That's cool. I love it. All right. Nice. I've got just one thing I believe today. This is really short. I've spoken about ngrok@ngrok.com before, but how it's really cool for exposing if you're like wanting to expose an API to the outside world that you're developing, or you need to debug it. I've used this for like web hooks. So this company when I need to integrate with their web hook, so I need them to call this but it's not working. So I want like a breakpoint on my machine. But how do they get to my machine? Just run in grok. And it'll tunnel it right through the firewalls using SSH reverse tunnels. That's all good. What I discovered working on yet another integration project was that there's actually this super rich inspector that I I think people haven't noticed in there, if you fire up an N grok thing, and then you go to localhost 4040. Every request comes through, you can see the summary, the HTTP headers, the cookies, the response, the status codes, the duration, all that. If you're using ngrok. For that sort of use case, be sure to check out this like live web view that lets you dive into it's almost like the dev tools, the Network tab of the dev tools, but for just people coming in rather than you consuming stuff, so it's pretty cool. Are you guys ready for a joke? Yes. Shall we finish it off, finish out with the joke. You may have heard recently, that the Microsoft source code for Bing was caught by the Lazarus group. And people thought this was some folks in like Brazil or somewhere in South America. It turns out it was a bunch of British teenagers, like $14 million in Bitcoin, whatever. So they had gotten hold of some of the windows and being source code, I believe it was, and there was like, Oh, my gosh, is this gonna reveal a bunch of zero days? Because people can go through the source code? Well, we don't do that much windows, at least on the server and Python. There's some but not as much, but we use a lot of Linux, right? For all the talk Python Python byte stuff, we've got like a fleet of eight Linux servers. Brian, when I saw this headline, I really began to worry that maybe some vulnerabilities to be discovered or some kind of problem would happen here. So the headline is, Linus Torvalds, confirms the lapses breach after hackers publish the Linux kernel source code to the internet. Okay. In a blog post on Tuesday, published hours after the lapses, posted a torrent file containing partial source code from the Linux kernel, the geek man himself revealed that his branch was cloned by the hacking group granting attackers unlimited power to the article stops there

00:31:59 are many times you have to read.

00:32:03 Exactly. I think, being open source, that's probably okay.

00:32:09 Yeah, yeah. Yeah.

00:32:11 No, it's publish publish the source, they've published

00:32:14 the source to Linux, what are we gonna do? The programming is a programming humor just never stops.

00:32:22 I love so. So they published the Bing source code. I think they

00:32:26 got some of the big source code, maybe Cortana. I can't remember exactly what it was. But it's some of these services. And I think the windows source code as well.

00:32:34 I was surprised. So I don't pay too much attention to the blog traffic stuff. But I was looking the other day after I put up a bunch of the transcripts for testing code. I was curious how much we're just getting hit. And for Python test.com. I'm getting more traffic from Bing than from Google, which is

00:32:53 how interesting, the interesting, all the sudden things pretty awesome in it.

00:32:59 Why it's been nice pictures, I'll tell you that. It's got nice background.

00:33:04 Actually, in terms of beauty. It's really nice. And you know, I ended up using Duck Duck go. So when I'm using Duck Duck go, I know, they've got a ton of different sources, but one of the sources they use for data, I believe is also being that's all right, inside. Hi. Well, obviously, it was really great to have you here with us. And yeah, it was my Yeah, it's great. Great to have a chat with you as always. All right. Bye, everyone. See you next week.

00:33:32 Bye. Cheers.

