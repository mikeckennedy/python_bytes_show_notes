
00:00:00.000 --> 00:00:06.980
This is Python bites Python headlines and news delivered directly to your earbuds. It's episode 8 recorded January 10th


00:00:06.980 --> 00:00:14.700
2017 this is your host Michael Kennedy along here with my co-host Brian Okken. Hey Brian. What's up, man? That's going really good


00:00:14.700 --> 00:00:16.440
Yeah, glad to hear it. Glad to hear it


00:00:16.440 --> 00:00:21.140
We're kind of feel like everybody's still kind of getting going after the the winter break


00:00:21.140 --> 00:00:26.920
I know, you know, we're both in Portland and we've been like our world has been covered in ice repeatedly recently


00:00:26.920 --> 00:00:30.760
So it's been a bit of a strange start, but there's still Python news to talk about.


00:00:30.760 --> 00:00:38.440
Yeah, there is. I'm going to start with actually, there was a PyBay 2016. I actually don't remember


00:00:38.440 --> 00:00:43.080
when that happened. It was sometime in the fall. I want to bring up one video, which is


00:00:43.080 --> 00:00:50.200
from Jessica McKellar titled "Breaking the Rules." From the talk, it sounds like it was pre-election.


00:00:51.560 --> 00:00:55.960
So at least it was in the fall, but yeah, the video came up in December.


00:00:55.960 --> 00:00:59.480
I was listening to it and was kind of blown away.


00:00:59.480 --> 00:01:04.720
So Jessica was the director of the Python Software Foundation for several years and


00:01:04.720 --> 00:01:08.840
was, she's been involved with lots of stuff like the Boston Python user group.


00:01:08.840 --> 00:01:12.320
And she's the chair for a diversity chair for PyCon.


00:01:12.320 --> 00:01:16.320
She's, I guess she's an engineering director at Dropbox, which just sounds cool.


00:01:16.320 --> 00:01:21.320
But anyway, the, the, this was a keynote, speech or a


00:01:21.320 --> 00:01:28.760
talk and she was talking about all of her work with Python was not really about Python but about


00:01:28.760 --> 00:01:33.880
studying systems and here's some cool quotes. "Learning how to program changes the way you


00:01:33.880 --> 00:01:40.600
think about debug and interact with the world and you learn a set of rules on how to build software


00:01:40.600 --> 00:01:46.040
and then you learn that you can change the rules and programmers master a system that they know


00:01:46.040 --> 00:01:51.800
they can change. And these sorts of comments that she talks about I guess I


00:01:51.800 --> 00:01:57.380
knew but I didn't really ever think about it before. And she takes it and she


00:01:57.380 --> 00:02:02.280
realizes that as programmers we often take it for granted that we if we were


00:02:02.280 --> 00:02:06.060
using a tool that we want to make better we can just go in and make it better.


00:02:06.060 --> 00:02:10.220
It's an open-source thing and and that this should carry over to the rest of


00:02:10.220 --> 00:02:17.200
your life. She takes the idea and applies it to politics and voting and stuff.


00:02:17.200 --> 00:02:21.880
I guess she ran a polling station by herself and her husband did a different


00:02:21.880 --> 00:02:26.000
one which actually is pretty cool but it's it's neat to hear somebody


00:02:26.000 --> 00:02:30.760
firsthand say it's not that hard to get it done. But I like the idea of


00:02:30.760 --> 00:02:35.680
thinking about how the programmer mindset and how you can change the


00:02:35.680 --> 00:02:39.320
system that you're working in and I think more people should apply that to


00:02:39.320 --> 00:02:44.720
their workplace a little bit. I've heard about people that are unhappy at


00:02:44.720 --> 00:02:50.180
their job and they like a cubicle farm or something and they get out and do an


00:02:50.180 --> 00:02:55.820
entrepreneurial thing and I that's great for some people but for others I think


00:02:55.820 --> 00:03:00.080
maybe it's better to look at this system and realize that you're part of it and


00:03:00.080 --> 00:03:05.280
try to make it better yourself. Picture yourself in your manager's shoes or your


00:03:05.280 --> 00:03:06.760
or manager's manager.


00:03:06.760 --> 00:03:09.200
Wouldn't you wanna hear from all of the employees


00:03:09.200 --> 00:03:11.640
if there's something that could happen


00:03:11.640 --> 00:03:12.920
to make it a better place?


00:03:12.920 --> 00:03:14.760
- Yeah, I think it's a great message.


00:03:14.760 --> 00:03:17.360
I think, I really like Jessica's work


00:03:17.360 --> 00:03:19.700
and I actually had her on Talk Python on episode 30


00:03:19.700 --> 00:03:22.640
and she's done so much for diversity


00:03:22.640 --> 00:03:27.020
and the way the Python community actually is today.


00:03:27.020 --> 00:03:29.600
Like 10 years ago, it was very different.


00:03:29.600 --> 00:03:30.760
- Yeah. - One of the things


00:03:30.760 --> 00:03:33.140
that she brought up in that talk was that,


00:03:33.140 --> 00:03:34.740
I think she said five years ago,


00:03:34.740 --> 00:03:37.460
but not, let's say a handful of years ago,


00:03:37.460 --> 00:03:40.780
the number of women speakers at BiCon was like 1%.


00:03:40.780 --> 00:03:44.420
And now it's like in the 30s, maybe low 40s percent.


00:03:44.420 --> 00:03:47.100
It's, you know, dramatically different.


00:03:47.100 --> 00:03:48.320
And there's a lot of changes like that


00:03:48.320 --> 00:03:50.660
that she was central in.


00:03:50.660 --> 00:03:52.900
So I think she does a great bunch of work.


00:03:52.900 --> 00:03:55.100
- In that video, that was one of the questions,


00:03:55.100 --> 00:03:56.280
is how did she do that?


00:03:56.280 --> 00:03:58.060
And the answer's awesome.


00:03:58.060 --> 00:04:00.180
She just emailed a lot of people


00:04:00.180 --> 00:04:01.900
and asked them to submit talks.


00:04:01.900 --> 00:04:04.140
- Yeah, and sometimes, you know,


00:04:04.140 --> 00:04:05.340
you just gotta ask, right?


00:04:05.340 --> 00:04:07.880
And you want the world to be a different way,


00:04:07.880 --> 00:04:10.260
sometimes you just have to ask or take the first step


00:04:10.260 --> 00:04:11.340
or whatever it is, right?


00:04:11.340 --> 00:04:15.120
Like I think two ideas that sort of come to mind


00:04:15.120 --> 00:04:18.020
as you said that, one is,


00:04:18.020 --> 00:04:19.820
there's a quote that goes something like this


00:04:19.820 --> 00:04:21.860
from Steve Jobs, like, "The world around you


00:04:21.860 --> 00:04:23.940
"was made by people no smarter than you,


00:04:23.940 --> 00:04:24.980
"and you can change it."


00:04:24.980 --> 00:04:26.060
And once you realize that,


00:04:26.060 --> 00:04:28.460
like you can't just accept the world the way it is,


00:04:28.460 --> 00:04:31.620
you see that you can change it and you kind of must, right?


00:04:31.620 --> 00:04:35.060
And the other is, I really liked the notion of,


00:04:35.060 --> 00:04:38.800
once you learn to program, you control the system


00:04:38.800 --> 00:04:41.200
as much as it controls you, and you can change it,


00:04:41.200 --> 00:04:44.580
and you start to apply that thought to the greater world.


00:04:44.580 --> 00:04:46.840
And I think that's really something valuable


00:04:46.840 --> 00:04:48.920
that people that are on this learn to code,


00:04:48.920 --> 00:04:51.120
teach kids to code mission don't get,


00:04:51.120 --> 00:04:54.220
but would be of powerful benefit to students


00:04:54.220 --> 00:04:55.580
and just everyone.


00:04:55.580 --> 00:04:59.020
- And it's another reason to teach everybody,


00:04:59.020 --> 00:05:00.280
more and more people to code.


00:05:00.280 --> 00:05:06.160
We don't have to generate an entire generation of programmers, but a generation that actually


00:05:06.160 --> 00:05:08.760
understood how computers work would be good.


00:05:08.760 --> 00:05:09.760
It wouldn't be bad.


00:05:09.760 --> 00:05:14.200
Yeah, I definitely think the world needs more creators, fewer consumers, but not necessarily


00:05:14.200 --> 00:05:16.080
more programmers, right?


00:05:16.080 --> 00:05:22.000
You know, people say that I'm a pretty happy guy, pretty optimistic guy, maybe to a fault


00:05:22.000 --> 00:05:26.300
sometimes, but usually people don't say I'm grumpy.


00:05:26.300 --> 00:05:29.400
But today I'm feeling a little grumpy.


00:05:29.400 --> 00:05:31.160
I'm feeling grumpy also.


00:05:31.160 --> 00:05:33.840
Yeah, and grumpy this time grumpy is good.


00:05:33.840 --> 00:05:35.600
I think grumpy is good grumpy is interesting.


00:05:35.600 --> 00:05:42.440
So the guys at YouTube, particular guy named Dylan Trotter wrote a blog post on the Google


00:05:42.440 --> 00:05:43.440
blog tech blog.


00:05:43.440 --> 00:05:48.400
I don't remember exactly which one but it's in the links called grumpy is a Python on


00:05:48.400 --> 00:05:50.840
go interpreter or runtime.


00:05:50.840 --> 00:05:55.720
So at grumpy.io there it redirects to the GitHub repository.


00:05:55.720 --> 00:05:59.240
built this thing and it was released really recently like three weeks ago and


00:05:59.240 --> 00:06:05.400
what it is it's a transpiler. It takes Python, legacy Python sadly, so CPython


00:06:05.400 --> 00:06:11.440
2.7, and it compiles it or transpiles it into Go code which is then compiled and


00:06:11.440 --> 00:06:17.560
run on top of the Go runtime. So there's a couple of interesting things. It's one,


00:06:17.560 --> 00:06:24.720
there is no interpreter. Two, it executes purely as Go so all the features and I


00:06:24.720 --> 00:06:29.520
I really think the reason they're doing this is the concurrency story around Go and maybe


00:06:29.520 --> 00:06:31.360
even a migration story, we'll see about that.


00:06:31.360 --> 00:06:36.840
But there's a lot of interesting things that they can do if they can get Python to run


00:06:36.840 --> 00:06:38.920
on top of Go.


00:06:38.920 --> 00:06:44.600
So one of the things that also caught my attention about this is this seems to have really taken


00:06:44.600 --> 00:06:48.800
people captured their enthusiasm because it's on GitHub.


00:06:48.800 --> 00:06:53.840
They announced it a few weeks ago and it already has 6,000 stars.


00:06:53.840 --> 00:06:55.880
or a project that's a few weeks old with 6,000 stars,


00:06:55.880 --> 00:06:57.160
that's pretty amazing.


00:06:57.160 --> 00:06:59.640
So I'm actually having Dylan on Talk Python to me


00:06:59.640 --> 00:07:03.160
on episode 95, which I think comes out next week.


00:07:03.160 --> 00:07:05.520
So look for a bigger story there.


00:07:05.520 --> 00:07:07.380
- So is that one that's already recorded?


00:07:07.380 --> 00:07:09.400
- No, I'm gonna talk to him Thursday.


00:07:09.400 --> 00:07:11.920
- So what's, do you know what the reasoning,


00:07:11.920 --> 00:07:14.960
I mean, like I get why you'd want Go for Python stuff,


00:07:14.960 --> 00:07:18.240
but why is the language Go not enough


00:07:18.240 --> 00:07:21.320
and the Python language easier to write in or?


00:07:21.320 --> 00:07:24.120
- Well, I believe, I don't know,


00:07:24.120 --> 00:07:25.880
there's certain things that they can't talk about


00:07:25.880 --> 00:07:26.880
or don't want to talk about,


00:07:26.880 --> 00:07:29.600
so I don't want to read too much into it for them.


00:07:29.600 --> 00:07:32.360
But Go is big at Google.


00:07:32.360 --> 00:07:35.320
YouTube right now, the front end for YouTube


00:07:35.320 --> 00:07:37.260
is written in CPython 2.7.


00:07:37.260 --> 00:07:41.120
So I would speculate that they're thinking of


00:07:41.120 --> 00:07:44.600
how do they not stay on Python 2.7.


00:07:44.600 --> 00:07:46.120
- Yeah, okay.


00:07:46.120 --> 00:07:47.040
- Yeah, pretty interesting.


00:07:47.040 --> 00:07:49.160
You know, another thing that would make me grumpy,


00:07:49.160 --> 00:07:51.120
not in the Python way, but really grumpy,


00:07:51.120 --> 00:07:54.200
is when I'm given a huge project,


00:07:54.200 --> 00:07:57.000
like, you know, tens of thousands


00:07:57.000 --> 00:07:58.480
or hundreds of thousands of lines of code.


00:07:58.480 --> 00:07:59.720
And they said, here, look through this


00:07:59.720 --> 00:08:01.040
and understand this code base.


00:08:01.040 --> 00:08:03.880
And I look at some method or some set of classes


00:08:03.880 --> 00:08:06.260
and I'm like, I don't understand what effect this has.


00:08:06.260 --> 00:08:08.600
It seems to do nothing in this code.


00:08:08.600 --> 00:08:09.800
And yet here it is.


00:08:09.800 --> 00:08:11.880
And I'll tweak it and play with it.


00:08:11.880 --> 00:08:13.800
And it doesn't even seem to have any effect.


00:08:13.800 --> 00:08:15.960
And then I realized that code is never called.


00:08:15.960 --> 00:08:17.880
- Yeah, hopefully, that'd be cool


00:08:17.880 --> 00:08:20.960
if there was a way to say you could find some dead code.


00:08:20.960 --> 00:08:24.640
You mean like if there was like a creature that could like soar through the sky and


00:08:24.640 --> 00:08:27.320
then would find these bodies and like consume them, they would be gone?


00:08:27.320 --> 00:08:28.320
Something like that?


00:08:28.320 --> 00:08:29.320
Yeah, yeah, yeah.


00:08:29.320 --> 00:08:33.600
Maybe, or maybe we could have like a cheesy Segway bot.


00:08:33.600 --> 00:08:34.600
But anyway.


00:08:34.600 --> 00:08:35.600
Exactly.


00:08:35.600 --> 00:08:42.300
There's an article by Dougal Matthews called Finding Dead Code with Vulture.


00:08:42.300 --> 00:08:47.040
And Vulture is a Python tool that you can install with just pip install Vulture.


00:08:47.040 --> 00:08:48.680
And it's really easy to use.


00:08:48.680 --> 00:08:54.760
downloaded it, applied it to some code I was working on, and you actually can just point


00:08:54.760 --> 00:09:01.240
it to a directory and it looks at all the Python code there and tells you, I'm sure it analyzes


00:09:01.240 --> 00:09:05.560
stuff and does call trees and whatnot, I don't know how it works, but it like tells, gives you


00:09:05.560 --> 00:09:10.280
a list of all the functions and variables and lines of code that are not used. It was just really


00:09:10.280 --> 00:09:16.360
fast and really easy to use. I liked it in the comment from Dougal was the, there's some people


00:09:16.360 --> 00:09:22.840
that use really aggressive unit testing and TDD strategies, which makes it such that every


00:09:22.840 --> 00:09:29.160
function is going to have a test for it. But what if that internal function isn't used by anything


00:09:29.160 --> 00:09:33.480
else? Well, there's a way you can take your unit tests and exclude them from the vulture,


00:09:33.480 --> 00:09:40.200
which is kind of neat. I was thinking about the comparison. Normally, I would find this sort of


00:09:40.200 --> 00:09:46.360
stuff by using Flake 8, but like the example you gave, you wouldn't want to try to convert,


00:09:46.360 --> 00:09:51.520
you'd fix all the like the PEP 8 errors and things just to find dead code.


00:09:51.520 --> 00:09:54.400
So this might be a good use case for that.


00:09:54.400 --> 00:10:01.440
And also there are some people that don't like static analyzers like Flake or whatever.


00:10:01.440 --> 00:10:06.680
The other comment was that coverage, if you're running coverage over your code with your


00:10:06.680 --> 00:10:13.080
tests that should tell you the parts of code aren't used also however your test


00:10:13.080 --> 00:10:16.760
suite's got to be fairly complete in order for you to really be sure that


00:10:16.760 --> 00:10:21.740
that's true so yeah it's tough to do it with coverage and testing I think


00:10:21.740 --> 00:10:28.520
because like you alluded to there might be some function that that is never


00:10:28.520 --> 00:10:32.080
called but you might have written a test about it so then it kind of looks like


00:10:32.080 --> 00:10:36.320
it's live again right and the the thing where I find this to be really insidious


00:10:36.320 --> 00:10:42.000
is I'm looking at some function and I realize if I take it away this other


00:10:42.000 --> 00:10:45.360
function depends on it and if I were to take that away another function and then


00:10:45.360 --> 00:10:49.800
maybe like three or four or five function calls back in this chain these


00:10:49.800 --> 00:10:53.520
are all kind of dependent on each other but nobody ever calls the first one and


00:10:53.520 --> 00:10:57.360
so it's really hard to tell like to follow all those chains and determine


00:10:57.360 --> 00:11:00.200
like actually this whole branch of code that you're trying to deal with just


00:11:00.200 --> 00:11:03.360
forget it it's gone you have source control delete it yeah that's pretty


00:11:03.360 --> 00:11:08.720
cool. I like it. So yeah, yeah, they did warn about false positives saying something wasn't


00:11:08.720 --> 00:11:15.760
used when actually it was. So be a little careful like, you know, systems that use conventions,


00:11:15.760 --> 00:11:21.360
like you know, pyramid or Django or something, right? You map a route to a thing and it doesn't


00:11:21.360 --> 00:11:25.920
look like you ever call that thing. But obviously, it's called by you know, a URL, right? So


00:11:25.920 --> 00:11:29.920
just be aware, beware those sorts of things. But yeah, it looks really cool. Speaking of


00:11:29.920 --> 00:11:32.500
tools that are cool.


00:11:32.500 --> 00:11:37.220
You know, I don't get much meaningful mail these days, but I do like this thing called


00:11:37.220 --> 00:11:38.220
postman.


00:11:38.220 --> 00:11:47.820
Yeah, postman at I think it's at get postman.com is a cross platform GUI app that lets you


00:11:47.820 --> 00:11:51.740
test and visualize and play with API's.


00:11:51.740 --> 00:11:52.740
I love my API's.


00:11:52.740 --> 00:11:57.660
Yeah, so I've actually been doing some things that required me to write some API's lately


00:11:57.660 --> 00:12:01.660
and I'm like, you know, obviously I could go into the dev tools in my browser or I could


00:12:01.660 --> 00:12:04.660
write some, you know, some command line thing to test them.


00:12:04.660 --> 00:12:05.660
But this is really nice.


00:12:05.660 --> 00:12:10.220
You can like create, you know, here's how I call this function as an authenticated user


00:12:10.220 --> 00:12:11.220
with this data.


00:12:11.220 --> 00:12:12.900
And you can actually save that in this UI.


00:12:12.900 --> 00:12:17.680
And you can even create them and share them across teams, integrate these into continuous


00:12:17.680 --> 00:12:23.500
integration for like testing deployments or, or more like integration tests of your whole


00:12:23.500 --> 00:12:24.500
system.


00:12:24.500 --> 00:12:25.500
It's really cool.


00:12:25.500 --> 00:12:26.500
It's free.


00:12:26.500 --> 00:12:27.500
It's cross platform.


00:12:27.500 --> 00:12:29.300
written in Python, unfortunately,


00:12:29.300 --> 00:12:32.220
but it's still a really cool system.


00:12:32.220 --> 00:12:34.500
- Question about that, when you say API,


00:12:34.500 --> 00:12:38.500
is that you're referring to like a REST API


00:12:38.500 --> 00:12:39.660
or some other web API?


00:12:39.660 --> 00:12:41.220
- Yeah, it says APIs,


00:12:41.220 --> 00:12:42.720
but I should maybe make it really clear,


00:12:42.720 --> 00:12:45.340
those are services like HTTP services,


00:12:45.340 --> 00:12:47.100
SOAP services, things like that.


00:12:47.100 --> 00:12:48.260
- Okay, great.


00:12:48.260 --> 00:12:51.020
- Yeah, not like APIs like pip install this package


00:12:51.020 --> 00:12:52.380
and then call this function.


00:12:52.380 --> 00:12:54.500
- Yeah, well, when I'm testing or running


00:12:54.500 --> 00:12:59.020
on developing a new API, sometimes it's tiring


00:12:59.020 --> 00:13:02.020
and I kind of get burned out on it.


00:13:02.020 --> 00:13:05.060
- Yeah, you know, you and I have been programming


00:13:05.060 --> 00:13:08.180
for a long time and I don't know about you,


00:13:08.180 --> 00:13:09.980
but I've certainly gone through a period or two


00:13:09.980 --> 00:13:12.740
where I'm just like, ugh, more of this.


00:13:12.740 --> 00:13:15.300
And it usually depends a little bit on the project.


00:13:15.300 --> 00:13:16.660
It's not really the programming,


00:13:16.660 --> 00:13:18.420
it's kind of like all the other stuff,


00:13:18.420 --> 00:13:20.980
you know, nitpicking at your time and energy.


00:13:20.980 --> 00:13:23.820
And so Kenneth writes, I'm gonna just keep going with writes


00:13:23.820 --> 00:13:25.860
not reads until I hear otherwise.


00:13:25.860 --> 00:13:28.820
Kenneth writes, does a bunch of great work.


00:13:28.820 --> 00:13:30.060
He's the, for humans guys.


00:13:30.060 --> 00:13:31.940
We talked about Maya last time, right?


00:13:31.940 --> 00:13:34.020
- Yeah, last episode we talked about Maya


00:13:34.020 --> 00:13:37.580
and he's of course the author of requests.


00:13:37.580 --> 00:13:39.180
But he wrote this article called


00:13:39.180 --> 00:13:41.460
"The Reality of Developer Burnout"


00:13:41.460 --> 00:13:43.620
and I really, I'm glad he did it.


00:13:43.620 --> 00:13:47.420
I had heard that he was, I don't remember last year


00:13:47.420 --> 00:13:50.660
or something, suffering from just like burnout


00:13:50.660 --> 00:13:55.540
of being the main support person for an open source project.


00:13:55.540 --> 00:13:56.820
- Yeah, and he's not the only one.


00:13:56.820 --> 00:13:58.780
Like, gosh, I can't remember the guy's name,


00:13:58.780 --> 00:13:59.980
but he's in Lawrence, Kansas.


00:13:59.980 --> 00:14:01.740
He's one of the founders of Django.


00:14:01.740 --> 00:14:05.220
Also, just got totally burned out and had to just step back.


00:14:05.220 --> 00:14:07.220
And I remember there was like a half hour


00:14:07.220 --> 00:14:09.500
conference presentation that was kind of like a goodbye


00:14:09.500 --> 00:14:11.900
or something to that effect, if I'm remembering it correctly.


00:14:11.900 --> 00:14:16.420
But yeah, there's plenty of stories of people getting


00:14:16.420 --> 00:14:19.700
not just requests, but like angry email


00:14:19.700 --> 00:14:21.980
for stuff they're doing for free, right?


00:14:21.980 --> 00:14:23.340
Open source projects and so on.


00:14:23.340 --> 00:14:25.620
- Definitely, and I think I'm not a,


00:14:25.620 --> 00:14:27.580
I don't maintain a large open source project,


00:14:27.580 --> 00:14:31.540
but they definitely maintain tools within our company,


00:14:31.540 --> 00:14:33.740
and I think a lot of people can relate


00:14:33.740 --> 00:14:36.780
to some of the things that Kenneth talks about


00:14:36.780 --> 00:14:38.820
in "Burnout" in this article.


00:14:38.820 --> 00:14:41.460
But I think he has some decent advice.


00:14:41.460 --> 00:14:45.340
Some of the advice he gave was to just keep producing,


00:14:45.340 --> 00:14:47.900
but possibly not at the same speed,


00:14:47.900 --> 00:14:51.500
but stop consuming so much on your social networks.


00:14:51.500 --> 00:14:54.860
He like disconnected from Twitter for a while.


00:14:54.860 --> 00:14:57.880
- He didn't quite pull a 410 gone.


00:14:57.880 --> 00:15:00.060
- Right, but like just stop following people,


00:15:00.060 --> 00:15:02.360
stop looking at it so much.


00:15:02.360 --> 00:15:04.660
And then he also talked about delegating more,


00:15:04.660 --> 00:15:06.340
trying to, it is a community,


00:15:06.340 --> 00:15:08.600
so try to get other people of the community


00:15:08.600 --> 00:15:11.540
to take over a lot of the roles that he had


00:15:11.540 --> 00:15:13.700
within the request community


00:15:13.700 --> 00:15:17.780
and then also generate other hobbies.


00:15:17.780 --> 00:15:20.420
Don't do all of your free time just doing coding.


00:15:20.420 --> 00:15:23.460
There should be some non-programming hobbies.


00:15:23.460 --> 00:15:25.340
I thought it was a great article.


00:15:25.340 --> 00:15:28.340
And I was poking around,


00:15:28.340 --> 00:15:29.940
trying to get links for the show notes,


00:15:29.940 --> 00:15:31.900
and I came across,


00:15:31.900 --> 00:15:33.620
when I was looking at the Maya,


00:15:33.620 --> 00:15:36.340
the GitHub page on Maya,


00:15:36.340 --> 00:15:39.940
and it said, "Say thanks to Kenneth."


00:15:39.940 --> 00:15:41.940
And I had never seen this before,


00:15:41.940 --> 00:15:44.980
but apparently there's a saythanks.io


00:15:44.980 --> 00:15:46.700
that's a Kenneth project that,


00:15:46.700 --> 00:15:49.500
it just sends a little thank you note


00:15:49.500 --> 00:15:52.700
to whoever, or the person that set it up.


00:15:52.700 --> 00:15:55.060
So I thought that was a cool project.


00:15:55.060 --> 00:15:57.020
- Yeah, yeah, that's really awesome.


00:15:57.020 --> 00:16:00.100
So for our final one, our final topic


00:16:00.100 --> 00:16:03.100
brings us snapping back to the future,


00:16:03.100 --> 00:16:08.060
away from Grumpy and Python 2.7, back to current Python.


00:16:08.060 --> 00:16:09.940
- Yeah, and hopefully you're not burnt out


00:16:09.940 --> 00:16:12.540
on template languages?


00:16:12.540 --> 00:16:16.380
- No, I'm still a big fan of server-side


00:16:16.380 --> 00:16:18.140
templated web applications.


00:16:18.140 --> 00:16:20.740
And one of the real popular ones is Jinja,


00:16:20.740 --> 00:16:25.260
Jinja 2 by Armin Roenicker, and he's the guy behind Flask.


00:16:25.260 --> 00:16:28.380
And he just released Jinja 2.9.


00:16:28.380 --> 00:16:30.560
This is really cool, and thanks to Hugh Blanford


00:16:30.560 --> 00:16:31.780
for sending us a note to say,


00:16:31.780 --> 00:16:35.780
"Here's a cool thing you should talk about on Python Bytes."


00:16:35.780 --> 00:16:36.940
So here we go.


00:16:36.940 --> 00:16:39.660
And one of the things that was stood out


00:16:39.660 --> 00:16:47.980
both to Hugh and to myself was the deep integration with Python 3.6 and the asynchronous concurrency


00:16:47.980 --> 00:16:49.500
story around that.


00:16:49.500 --> 00:16:54.300
Armin says, "While Jinja2 supported Python 3 years ago, it never really fully embraced


00:16:54.300 --> 00:16:58.700
the Python 3 features because they wanted to make it basically lowest common denominator


00:16:58.700 --> 00:17:01.020
so it'd work on Python 2 as well.


00:17:01.020 --> 00:17:06.780
But now they say that it actually supports async generators, which fully support the


00:17:06.780 --> 00:17:09.220
async and await keywords.


00:17:09.220 --> 00:17:15.900
So it means if you pass some kind of generator that is an async generator to the template


00:17:15.900 --> 00:17:21.980
and it's going to like loop over them, it will await it as it does that, which is fantastic.


00:17:21.980 --> 00:17:26.060
That's just so cool to see async and await and the concurrency flow all the way to the


00:17:26.060 --> 00:17:27.340
HTML.


00:17:27.340 --> 00:17:30.420
So where would this like affect it?


00:17:30.420 --> 00:17:33.540
When does the template engine end up doing coroutines?


00:17:33.540 --> 00:17:39.320
Well, yeah, so the template engine runs after your view method, your action method runs


00:17:39.320 --> 00:17:41.100
and you pass back the model.


00:17:41.100 --> 00:17:45.480
But the thing is, the model itself could have a collection that is a generator.


00:17:45.480 --> 00:17:47.260
And normally you would just loop over it.


00:17:47.260 --> 00:17:48.260
Right.


00:17:48.260 --> 00:17:51.400
So I've got like some kind of set of results.


00:17:51.400 --> 00:17:55.200
And maybe that came from a database query or computing it from a service, who knows,


00:17:55.200 --> 00:18:01.200
and you're going to like do a for loop over it and generate a bunch of, you know, 10 100


00:18:01.200 --> 00:18:04.560
little sub HTML pieces in your template.


00:18:04.560 --> 00:18:08.960
Well even if that was asynchronous it wouldn't treat it that way, it would just call it before.


00:18:08.960 --> 00:18:13.440
So now it can call, it can do this in an awaitable way.


00:18:13.440 --> 00:18:19.400
So my understanding is that if each one of those steps like has to go to file or network


00:18:19.400 --> 00:18:25.360
or something or it's like a database query and it's sort of flowing through as you generate,


00:18:25.360 --> 00:18:28.820
as you pull the items out of the generator, it will free up the thread to go to other


00:18:28.820 --> 00:18:32.600
web requests while that part is running, whereas before it would.


00:18:32.600 --> 00:18:33.600
Oh, that's very cool.


00:18:33.600 --> 00:18:34.600
I like it.


00:18:34.600 --> 00:18:37.840
Yeah, yeah, it's quite slick, quite slick.


00:18:37.840 --> 00:18:41.160
Another week in the Python world and we have a bunch of cool stuff.


00:18:41.160 --> 00:18:44.480
So you know, if you're using Jinja, get the new version.


00:18:44.480 --> 00:18:46.880
If you're feeling burnt out, check out Kenneth Wright's things.


00:18:46.880 --> 00:18:52.240
If you're doing APIs, check out Postman, bring out the vultures on that legacy code, and


00:18:52.240 --> 00:18:53.920
check out Grumpy as well.


00:18:53.920 --> 00:18:54.920
Lots of cool things.


00:18:54.920 --> 00:18:59.300
system programming as a larger concept with Jessica.


00:18:59.300 --> 00:19:00.800
- These are good things to check out.


00:19:00.800 --> 00:19:01.740
What's going on with you, Michael?


00:19:01.740 --> 00:19:02.880
Do you have any news you want to share?


00:19:02.880 --> 00:19:05.580
- Oh, I don't really have too much news.


00:19:05.580 --> 00:19:08.700
I'm just working like crazy on a couple of projects.


00:19:08.700 --> 00:19:10.520
The stuff, some stuff that I'm doing


00:19:10.520 --> 00:19:12.020
got me interested in Postman.


00:19:12.020 --> 00:19:14.100
I'm doing a bunch of API stuff right now


00:19:14.100 --> 00:19:15.940
for a project that I'm working on,


00:19:15.940 --> 00:19:17.700
but nothing I'm ready to talk about.


00:19:17.700 --> 00:19:18.700
How about you?


00:19:18.700 --> 00:19:19.820
How's the book?


00:19:19.820 --> 00:19:23.140
- It's getting closer and closer to a,


00:19:23.140 --> 00:19:29.580
we're now targeting a hopefully a beta release for PyCon but I am I have a


00:19:29.580 --> 00:19:34.980
handful of people I'm going to try to to get a hold of to be beta readers and


00:19:34.980 --> 00:19:41.740
not just not beta readers but technical consults to technical editors to just


00:19:41.740 --> 00:19:45.420
read through it I think it's a couple week thing but if anybody's listening


00:19:45.420 --> 00:19:49.260
and feel that they really want to contribute to making sure I don't make


00:19:49.260 --> 00:19:53.820
any pytest mistakes, yeah, hit me up and I'll put you on the list.


00:19:53.820 --> 00:19:58.020
Yeah, that sounds great. Get early access to the book and are you giving them


00:19:58.020 --> 00:20:03.020
credit? Do they get like a little thanks too? Oh yeah, definitely. And it's all


00:20:03.020 --> 00:20:07.540
handled through Pragmatic, so there's a limited number of people, so


00:20:07.540 --> 00:20:11.660
I don't know how many people they'll pick, but I want to give them a


00:20:11.660 --> 00:20:15.300
bunch of names. Excellent. Well, glad to hear it's still moving. Yep, thanks.


00:20:15.300 --> 00:20:19.140
Alright, thanks for sharing your stories with me and it was great to chat with


00:20:19.140 --> 00:20:20.140
with you and with everyone.


00:20:20.140 --> 00:20:21.140
>> Oh yeah, thank you.


00:20:21.140 --> 00:20:22.140
>> Yep, bye.


00:20:22.140 --> 00:20:24.420
>> Talk to you next week.


00:20:24.420 --> 00:20:26.260
>> Thank you for listening to Python Bytes.


00:20:26.260 --> 00:20:31.900
Follow the show on Twitter via @PythonBytes, that's Python Bytes as in B-Y-T-E-S.


00:20:31.900 --> 00:20:35.180
And get the full show notes at PythonBytes.fm.


00:20:35.180 --> 00:20:38.900
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:20:38.900 --> 00:20:39.900
way.


00:20:39.900 --> 00:20:42.380
We're always on the lookout for sharing something cool.


00:20:42.380 --> 00:20:45.860
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:20:45.860 --> 00:20:48.940
Thank you for listening and sharing this podcast with your friends and colleagues.

