WEBVTT

00:00:00.001 --> 00:00:04.640
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.640 --> 00:00:10.100
This is episode 61, recorded January 10th, 2018.

00:00:10.100 --> 00:00:11.380
I'm Michael Kennedy.

00:00:11.380 --> 00:00:12.260
And I'm Brian Okken.

00:00:12.260 --> 00:00:15.620
And we have, again, some really cool stuff we want to share with you.

00:00:15.620 --> 00:00:18.480
The best of what we found this week in the Python space.

00:00:18.480 --> 00:00:21.640
Before we get to it, though, I want to say thank you to DigitalOcean.

00:00:21.640 --> 00:00:27.780
This podcast, these MP3 files, everything is coming to you directly out of DigitalOcean servers.

00:00:27.780 --> 00:00:28.760
I'll tell you more about that later.

00:00:28.960 --> 00:00:30.600
Right now, I want to talk about dictionaries.

00:00:30.600 --> 00:00:32.300
Yeah, I want to talk about dictionaries, too.

00:00:32.300 --> 00:00:33.960
So thanks to Raymond.

00:00:33.960 --> 00:00:38.440
This is a, I'm going to reference Brandon Rhodes, actually, for later on.

00:00:38.440 --> 00:00:46.700
But Raymond Hedinger is probably the person that I have to thank for telling me how cool dictionaries are in the first place.

00:00:46.700 --> 00:00:49.940
Because he's talked about them at different PyCons in the past.

00:00:49.940 --> 00:00:54.220
And basically, I mean, tons of Python is built on top of dictionaries.

00:00:54.620 --> 00:01:01.580
But one of the things that I did not know was how awesome key sharing is.

00:01:01.580 --> 00:01:08.440
And we had one of our listeners on Twitter, Ned Letcher, keyed us in on this and said,

00:01:08.440 --> 00:01:11.220
Hey, if you haven't checked it out, you should go look at Brandon Rhodes'

00:01:11.900 --> 00:01:15.640
dictionary even mightier talk from PyCon 2017.

00:01:16.280 --> 00:01:17.460
And so I did.

00:01:17.460 --> 00:01:23.900
And yeah, the key sharing thing is like something I didn't know about, which is, it's totally cool.

00:01:23.900 --> 00:01:29.320
It's kind of funky to think that it's not that way until you really think about how it works.

00:01:29.320 --> 00:01:29.540
Right.

00:01:29.560 --> 00:01:35.300
So when you create a class, and you create an instance of it, an object, every one of those has a Dunder dict.

00:01:35.300 --> 00:01:35.860
Right.

00:01:35.860 --> 00:01:39.760
And what goes in the keys are the names of the fields of the class.

00:01:39.760 --> 00:01:42.080
And what goes for the values are, well, the values.

00:01:42.080 --> 00:01:42.320
Right.

00:01:42.320 --> 00:01:47.300
So when you say in Dunder init, you say self.name equals this, self.id equals that.

00:01:47.300 --> 00:01:49.720
Those are putting entries in that dictionary.

00:01:49.720 --> 00:01:50.140
Right.

00:01:50.140 --> 00:01:50.580
Yeah.

00:01:50.580 --> 00:02:01.180
But the thing is, if I create a million of those, I have a million times the string name as the key and a million times the string id as the id.

00:02:01.180 --> 00:02:10.960
So basically, every instance you create stores a separate copy of the names, not just the values, but the names of the fields, which can be super problematic, right?

00:02:10.960 --> 00:02:20.320
The names of the fields are, and in Brandon's talk, he talks about, since it's a dictionary, there can be hash collisions for figuring out where to put it.

00:02:20.460 --> 00:02:24.700
And so each of that happens for every single object has to figure that out.

00:02:24.700 --> 00:02:31.860
I think it was, what, Python 3.3, 3.4, where they changed it to where, so here's the trick.

00:02:31.860 --> 00:02:47.040
As long as you put all of the fields that you're going to use for your class objects, you initialize them with something in your init function, then all of your objects can share the same dictionary for the key lookup.

00:02:47.040 --> 00:02:48.060
Yeah, that's really cool.

00:02:48.320 --> 00:02:52.800
So I think that's quite awesome, and it should really help with performance as well, especially memory-wise.

00:02:52.800 --> 00:02:57.600
Yeah, it's a little bit of a little weird thing of, like, you have to kind of think about how this is implemented.

00:02:57.720 --> 00:03:04.220
But Brandon does a really good job of walking you through it, so that it's obvious how the savings is.

00:03:04.220 --> 00:03:16.100
And apparently from the PEP 4.12 that this was started with, for object-oriented programs, the memory reduction is like 10% to 20% less, using quite a bit less memory.

00:03:16.100 --> 00:03:17.560
So that's definitely worth it.

00:03:17.620 --> 00:03:19.720
Oh yeah, that's always a nice benefit there.

00:03:19.720 --> 00:03:26.920
So I have an interesting project recommended by a listener as well called Python Hunter.

00:03:26.920 --> 00:03:28.280
Have you heard of this?

00:03:28.280 --> 00:03:31.720
Well, just because it was recommended to us, but I haven't looked at it yet.

00:03:31.820 --> 00:03:33.500
Yeah, so it's pretty interesting.

00:03:33.500 --> 00:03:41.620
The idea is it's a little bit like code coverage, and it's a little bit like a debugger, in that you, like, enable it on your code.

00:03:41.960 --> 00:03:44.820
And then as you interact with the code, you get a report.

00:03:44.820 --> 00:04:00.800
But what you actually get here is it will give you, basically, as your program runs, it'll show you the internals of, basically, any module or package you want to point it at as it executes.

00:04:01.400 --> 00:04:13.940
So there's an example where they turn it on, and they call os.path.join, and it shows you, basically, all the internal implementation running, like, printed into the console, intermixed with your output.

00:04:13.940 --> 00:04:15.040
Oh, interesting.

00:04:15.040 --> 00:04:24.760
Yeah, so if you were like, I would like to explore what this does when I call this function, and I don't want to root through all the source code and try to figure out what piece this is referring to.

00:04:24.760 --> 00:04:29.620
You can just turn this on, call the function, and it'll show you the path through the external code it took.

00:04:29.620 --> 00:04:30.220
Oh, okay.

00:04:30.220 --> 00:04:32.280
Yeah, so pretty interesting.

00:04:32.280 --> 00:04:36.380
It has some integration with debuggers and things like that.

00:04:36.380 --> 00:04:37.940
So you can also override it.

00:04:37.940 --> 00:04:40.080
And it doesn't happen for every bit of code you call.

00:04:40.080 --> 00:04:41.160
You point it at a module.

00:04:41.160 --> 00:04:46.400
Like, say, I'm trying to work on, let's say, POSIX path.

00:04:46.400 --> 00:04:49.320
I want to understand my interaction with that module.

00:04:49.320 --> 00:04:51.680
Then you call os.path.join, and off it goes.

00:04:51.680 --> 00:04:53.400
So, yeah, pretty sweet, actually.

00:04:53.400 --> 00:04:59.860
Like, for instance, if I want to mock out my request interaction to external databases or external sites,

00:05:00.040 --> 00:05:06.320
I could point it at requests, for instance, to find out exactly what my application is doing with requests.

00:05:06.320 --> 00:05:07.040
Yes, exactly.

00:05:07.040 --> 00:05:09.740
And you would say, oh, this is the part where it goes to the network.

00:05:09.740 --> 00:05:11.720
That's the one thing I have to mock out.

00:05:11.720 --> 00:05:13.340
The rest I can just ignore.

00:05:13.340 --> 00:05:18.000
That would be a great tool, especially for people that are trying to isolate bits of their application.

00:05:18.000 --> 00:05:18.840
Yeah, that's cool.

00:05:18.840 --> 00:05:20.620
So this was recommended to us by EvenPage.

00:05:20.620 --> 00:05:21.680
So thank you for that.

00:05:21.740 --> 00:05:25.220
And it's also kind of interesting that it is built on Cython.

00:05:25.220 --> 00:05:27.040
So it's nice, high performance.

00:05:27.040 --> 00:05:30.140
It's always cool to see Cython making an appearance.

00:05:30.140 --> 00:05:31.180
Nice.

00:05:31.180 --> 00:05:36.520
So, you know, I always feel like when I'm working with Bash, I could do a better job.

00:05:36.520 --> 00:05:38.820
And in fact, I don't use Bash that much these days.

00:05:38.820 --> 00:05:39.960
I use ohmyzsh.

00:05:39.960 --> 00:05:41.060
But same thing.

00:05:41.060 --> 00:05:43.180
There's all this stuff about the shell I could do better.

00:05:43.180 --> 00:05:44.240
You use zsh?

00:05:44.240 --> 00:05:45.480
Use ohmyzsh.

00:05:45.480 --> 00:05:46.080
I love it.

00:05:46.080 --> 00:05:46.480
Ohmy.

00:05:46.480 --> 00:05:47.160
Ohmy.

00:05:47.280 --> 00:05:47.740
Oh, okay.

00:05:47.740 --> 00:05:48.260
Yeah, yeah.

00:05:48.260 --> 00:05:53.720
It's really got some nice integration with Git, the history and the search and the autocomplete,

00:05:53.720 --> 00:05:56.360
like a tabbed selection of various things.

00:05:56.360 --> 00:06:02.080
If you type a few characters and hit tab, it'll show you the list of all the things that you've done involving that.

00:06:02.080 --> 00:06:02.800
It's kind of cool.

00:06:02.800 --> 00:06:03.180
Okay.

00:06:03.180 --> 00:06:04.700
I'll check that out sometime.

00:06:04.700 --> 00:06:06.400
But I think more people use Bash, actually.

00:06:06.400 --> 00:06:13.000
So I went through a phase where I started out learning KSH in college and in my first job.

00:06:13.000 --> 00:06:16.600
And then I tried Bash and I went to Zshell for a while.

00:06:17.140 --> 00:06:21.080
But it had support issues on whatever operating system that I was using at the time.

00:06:21.080 --> 00:06:23.320
So Bash is just everywhere.

00:06:23.320 --> 00:06:25.700
So we can just use it as is.

00:06:25.700 --> 00:06:29.000
The place where you have to jump through a few hoops is on Windows.

00:06:29.000 --> 00:06:35.480
So I wanted to bring up, before we get into this article, there's an article called 10 Things I Wish I'd Known About Bash,

00:06:35.480 --> 00:06:40.900
which is a really great little quick start on things that might speed up.

00:06:40.900 --> 00:06:42.360
It's just some fun things.

00:06:42.360 --> 00:06:46.280
There's somebody trying to sell a book also, but it's only like five bucks.

00:06:46.380 --> 00:06:47.200
So go for it, dude.

00:06:47.200 --> 00:06:56.700
But kind of things that I'd always wanted to know, like what the difference is between back ticks or the dollar sign paren replacing bits in your command.

00:06:56.700 --> 00:06:58.760
Just if it is, they're identical.

00:06:58.760 --> 00:07:01.420
It's just one's a lot easier to read if you have a whole bunch of them.

00:07:01.420 --> 00:07:01.680
Yeah.

00:07:01.680 --> 00:07:02.020
Okay.

00:07:02.020 --> 00:07:02.580
Very cool.

00:07:02.940 --> 00:07:05.700
And then, you know, like globbing versus regular expressions.

00:07:05.700 --> 00:07:08.640
That's something that confused me at first.

00:07:08.640 --> 00:07:09.700
So that's a good thing.

00:07:09.700 --> 00:07:11.380
Dealing with exit codes.

00:07:11.380 --> 00:07:17.360
The number four is the one I really like the most because that one confused me is when you're using if statements,

00:07:17.360 --> 00:07:19.940
what's the difference between bracket and bracket bracket?

00:07:20.760 --> 00:07:24.360
And I'm not going to talk about it here, but these are some good things.

00:07:24.360 --> 00:07:32.200
I also wanted to bring up, I spend a lot of time trying to hunt for a good bash application for Windows.

00:07:32.200 --> 00:07:36.020
And right now, what I'm using the most is Git for Windows.

00:07:36.020 --> 00:07:39.120
And it has Git Bash is embedded in it.

00:07:39.120 --> 00:07:46.880
I think that's great, even for people that are not using Git, because it's just a good bundle of all of your bash tools.

00:07:47.140 --> 00:07:48.720
And it just always works.

00:07:48.720 --> 00:07:52.060
So I'm pointing everybody at that now, even if they're not using Git.

00:07:52.060 --> 00:07:58.300
We did have a recommendation from one of our listeners a long time ago about a tool called Commander, I think.

00:07:58.300 --> 00:07:59.560
Yeah, I'd say Commander, yeah.

00:07:59.560 --> 00:08:01.720
Yeah, cmder.net.

00:08:01.720 --> 00:08:07.760
And I think there's a reference on here that it's, I think it's related to Git for Windows somehow.

00:08:07.760 --> 00:08:09.380
So not sure.

00:08:09.380 --> 00:08:13.560
But if you don't really use all the, if you don't want to try Git for Windows,

00:08:13.560 --> 00:08:18.220
but you still want some emulator working on Windows, check out Commander also.

00:08:18.220 --> 00:08:21.180
Yeah, and it has the MonoKai theme.

00:08:21.180 --> 00:08:22.040
It actually looks really nice.

00:08:22.040 --> 00:08:23.100
Commander looks quite cool.

00:08:23.100 --> 00:08:24.800
I saw it on my Windows 10 machine.

00:08:24.800 --> 00:08:29.080
One more thing I'll throw on your list here while you're talking about these is,

00:08:29.080 --> 00:08:32.880
I don't even remember what version of Windows 10 has this.

00:08:32.880 --> 00:08:36.340
It's not the original, but maybe the one last fall.

00:08:36.340 --> 00:08:40.900
I can't remember what came out, but they've added the Ubuntu subsystem for Windows,

00:08:41.700 --> 00:08:43.000
which is pretty cool.

00:08:43.000 --> 00:08:46.600
But you have to turn that on in like the turn Windows features on and off.

00:08:46.600 --> 00:08:47.440
It's off by default.

00:08:47.440 --> 00:08:50.420
And I'm glad you brought that up because I want to try to revisit that.

00:08:50.420 --> 00:08:56.400
I did try those and I had issues with being able to launch external applications.

00:08:56.400 --> 00:08:58.340
Yeah, they're like really isolated.

00:08:58.340 --> 00:09:03.000
Like the Ubuntu part and the Windows part, they don't really communicate very well.

00:09:03.000 --> 00:09:05.100
And so it's not the same, I don't think.

00:09:05.100 --> 00:09:10.000
It's not like you have to do that a lot, but I often just want to open up my text editor

00:09:10.000 --> 00:09:11.400
from the command line.

00:09:11.400 --> 00:09:12.100
Yeah, exactly.

00:09:12.100 --> 00:09:12.880
Things like that.

00:09:12.880 --> 00:09:13.120
Cool.

00:09:13.120 --> 00:09:13.520
All right.

00:09:13.520 --> 00:09:15.960
Yeah, those are all nice things to check out, especially on Windows.

00:09:15.960 --> 00:09:18.780
It needs the most help with the shell, actually.

00:09:18.780 --> 00:09:19.860
Cool.

00:09:19.860 --> 00:09:24.020
So before we get to the next one, which is a bunch of pretty pictures that I hope will help

00:09:24.020 --> 00:09:29.340
people understand the definition of micro frameworks versus, you know, batteries included

00:09:29.340 --> 00:09:30.400
frameworks, things like that.

00:09:30.660 --> 00:09:32.040
I just want to tell people about DigitalOcean.

00:09:32.040 --> 00:09:37.100
Those guys are doing awesome work over at do.co slash Python.

00:09:37.100 --> 00:09:39.800
So check that out there.

00:09:39.800 --> 00:09:41.660
This is where I have all my servers.

00:09:41.660 --> 00:09:46.320
I probably have eight servers for the various things all working together now, failover and

00:09:46.320 --> 00:09:47.280
database servers and whatnot.

00:09:47.280 --> 00:09:50.680
But yeah, it's great, super easy.

00:09:50.680 --> 00:09:51.340
30 seconds.

00:09:51.340 --> 00:09:53.420
You got a Ubuntu machine or what other.

00:09:53.420 --> 00:09:57.260
There's a bunch of different distributions and pre-configured servers.

00:09:57.260 --> 00:09:58.920
Go over there, set them up, check it out.

00:09:59.020 --> 00:10:02.720
They're doing a bunch of great stuff and it's definitely affordable and reliable and fast.

00:10:02.720 --> 00:10:03.040
Awesome.

00:10:03.040 --> 00:10:03.380
Yeah.

00:10:03.380 --> 00:10:03.920
Cool.

00:10:03.920 --> 00:10:11.860
So there's this thing called Snake Food, which is a tool written by Martin Blaze and it creates

00:10:11.860 --> 00:10:13.400
Python dependency graphs.

00:10:13.400 --> 00:10:20.600
So I've got one package or one module or one class that depends upon some other thing and

00:10:20.600 --> 00:10:22.800
it'll like put them in a graph and draw lines between them.

00:10:22.800 --> 00:10:24.060
So that's pretty cool.

00:10:24.060 --> 00:10:25.720
I haven't done a whole lot with it.

00:10:26.100 --> 00:10:31.120
You can combine that with GraphViz and it'll create these nice visualizations of Python

00:10:31.120 --> 00:10:31.900
code bases.

00:10:31.900 --> 00:10:33.080
Oh, nice.

00:10:33.080 --> 00:10:33.960
So that's pretty cool.

00:10:33.960 --> 00:10:37.500
And this is not a brand new item, but I had seen it a while ago.

00:10:37.500 --> 00:10:39.320
It's from the Grok code guys.

00:10:39.320 --> 00:10:42.540
I think I had them on Talk Python like episode eight or something.

00:10:42.540 --> 00:10:43.920
So it's been a while.

00:10:43.920 --> 00:10:50.620
It wasn't about this, but they took this Snake Food plus GraphViz and they turned it on a variety

00:10:50.620 --> 00:10:52.840
of the frameworks that we know and love.

00:10:52.840 --> 00:10:58.540
And it's really interesting to pull up the pictures and just look at the relative complexity.

00:10:58.540 --> 00:11:03.760
So if somebody tells you a bottle is fast because it's simple, but it doesn't do very much for

00:11:03.760 --> 00:11:03.900
you.

00:11:03.900 --> 00:11:05.280
So you've got to bring a lot of pieces in.

00:11:05.280 --> 00:11:11.940
Django is much more full featured and more complex, but it has a lot of things built in.

00:11:11.940 --> 00:11:14.980
And Flask is somewhere in the middle and Pyramid, just a little more than that.

00:11:15.280 --> 00:11:17.340
You can look at these pictures and get a sense.

00:11:17.340 --> 00:11:18.480
Do you have the pictures pulled up?

00:11:18.480 --> 00:11:19.760
Yeah, definitely.

00:11:19.760 --> 00:11:22.320
You can totally see that that's the case.

00:11:22.320 --> 00:11:24.300
Bottle is like incredibly simple.

00:11:24.300 --> 00:11:28.220
Like I'm actually blown away that it is as simple as it is, but you can just tell like

00:11:28.220 --> 00:11:29.220
straight away by looking at it.

00:11:29.220 --> 00:11:30.120
It's so elegant.

00:11:30.120 --> 00:11:31.540
There's no cycles.

00:11:31.540 --> 00:11:32.960
Yeah, there's no cycle.

00:11:32.960 --> 00:11:35.000
It's an acyclic directed graph.

00:11:35.000 --> 00:11:36.460
That's quite interesting, isn't it?

00:11:36.460 --> 00:11:36.780
Yeah.

00:11:36.780 --> 00:11:37.160
Cool.

00:11:37.160 --> 00:11:40.360
So yeah, and then Django, how would you describe Django?

00:11:40.460 --> 00:11:45.900
It's like if you clean out a comb after it's been used for a year, that's what it looks

00:11:45.900 --> 00:11:46.320
like.

00:11:46.320 --> 00:11:49.260
Yeah, it's like a little bit like one of those inkblot tests.

00:11:49.260 --> 00:11:49.580
Yeah.

00:11:49.580 --> 00:11:53.440
And Flask and Pyramid, they're sort of on the same scale.

00:11:53.440 --> 00:11:57.420
Pyramid's got a little bit more going on, but they're definitely not simple, but they're

00:11:57.420 --> 00:11:58.340
not insane, right?

00:11:58.340 --> 00:12:00.500
They're not like Django level of interaction.

00:12:00.500 --> 00:12:04.700
Then they go and they do this for Celery and RQ as well.

00:12:04.700 --> 00:12:07.440
And you could tell Celery is way more complicated.

00:12:07.440 --> 00:12:10.180
It's more complicated than Pyramid or Flask, by the way.

00:12:10.180 --> 00:12:13.800
But it's also more complicated by ways than RQ.

00:12:13.800 --> 00:12:15.580
Let's see, what else do they cover?

00:12:15.580 --> 00:12:18.320
They cover Twisted, and Twisted is pretty insane.

00:12:18.320 --> 00:12:23.800
It's probably more tied together than Django, I would say.

00:12:23.800 --> 00:12:26.420
Mercurial, quite interesting as well.

00:12:26.420 --> 00:12:27.540
Request is in here.

00:12:27.540 --> 00:12:29.780
Request has got some pretty nice look, actually.

00:12:29.780 --> 00:12:32.020
Yeah, it's oddly elegant and pleasing.

00:12:32.020 --> 00:12:32.660
It is.

00:12:32.660 --> 00:12:33.840
IPython, not so pleasing.

00:12:33.840 --> 00:12:35.180
No.

00:12:35.540 --> 00:12:39.640
Anyway, I recommend people pull up this snake fooding link and just have a quick glance

00:12:39.640 --> 00:12:40.460
through the pictures.

00:12:40.460 --> 00:12:41.640
I think it's quite insightful.

00:12:41.640 --> 00:12:45.620
And it gives you the technique for applying this to other code bases as well.

00:12:45.620 --> 00:12:45.980
Yeah.

00:12:45.980 --> 00:12:50.860
These would be fun things to just print on your wall and tell people that you're using it

00:12:50.860 --> 00:12:51.460
as a reference.

00:12:51.460 --> 00:12:52.240
Yeah, absolutely.

00:12:52.240 --> 00:12:53.200
Pretty cool.

00:12:53.200 --> 00:12:56.940
Yeah, I just follow the graph when I need to know how things work.

00:12:56.940 --> 00:12:57.560
Yeah.

00:12:59.100 --> 00:13:03.920
Your next item is about being a good senior engineer.

00:13:03.920 --> 00:13:06.100
The new year, it's 2018 now.

00:13:06.100 --> 00:13:11.460
There was somebody that posted on Twitter that I'm terrible about references, said, hey, it's

00:13:11.460 --> 00:13:12.900
the new year, you should go read this again.

00:13:12.900 --> 00:13:18.100
So this is a 2012 article called On Being a Senior Engineer.

00:13:18.100 --> 00:13:21.620
It's from a website called Kitchen Soap, which is funny.

00:13:21.620 --> 00:13:25.340
But anyway, I think there's just a lot of really good advice.

00:13:25.440 --> 00:13:28.800
And I just went through and pulled out a bunch of the headlines.

00:13:28.800 --> 00:13:36.240
But it's some things that I've been thinking about lately as I'm hiring people and thinking

00:13:36.240 --> 00:13:39.540
about always with evaluations and stuff like that.

00:13:39.540 --> 00:13:40.660
What does it mean?

00:13:40.660 --> 00:13:43.620
What does an engineer versus a senior engineer mean?

00:13:43.620 --> 00:13:46.980
And these, a lot of traits, I think, fit well.

00:13:46.980 --> 00:13:49.280
I think these are all really, really good.

00:13:49.280 --> 00:13:54.580
I mean, maybe you don't necessarily cover them all, but don't practice CYAE.

00:13:54.860 --> 00:13:56.320
Yeah, cover your ass, engineer.

00:13:56.320 --> 00:13:57.000
Exactly.

00:13:57.000 --> 00:13:57.220
Oh, sorry.

00:13:57.220 --> 00:13:58.360
No, no, exactly.

00:13:58.360 --> 00:13:58.820
That's good.

00:13:58.820 --> 00:14:01.060
So, I mean, I think that's a really good point.

00:14:01.060 --> 00:14:05.780
Like a lot of people who, when they're starting out, they're trying to make sure they're never

00:14:05.780 --> 00:14:08.220
perceived as not knowing everything, right?

00:14:08.220 --> 00:14:08.660
Right.

00:14:08.660 --> 00:14:11.780
By the time you're a senior engineer, you've been beaten with the fact that you don't know

00:14:11.780 --> 00:14:15.480
stuff and new stuff is coming along that you also don't know continuously, right?

00:14:15.480 --> 00:14:19.300
One of the top ones is seek out constructive criticism of your designs.

00:14:20.040 --> 00:14:24.500
And yeah, you're just trying to find other perspectives to make sure you haven't missed

00:14:24.500 --> 00:14:24.940
something.

00:14:24.940 --> 00:14:28.900
One of the things I really like is lift the skills and expertise of those around you.

00:14:28.900 --> 00:14:29.320
Yeah.

00:14:29.320 --> 00:14:31.380
Well, you and I are definitely trying to do that.

00:14:31.380 --> 00:14:32.300
So that's good.

00:14:32.300 --> 00:14:36.220
I think a lot of people also try to like keep the recognition for themselves when they're

00:14:36.220 --> 00:14:36.440
new.

00:14:36.440 --> 00:14:37.200
All right.

00:14:37.420 --> 00:14:43.960
But I think one of the biggest skills someone can be providing on a team is actually anytime

00:14:43.960 --> 00:14:47.640
someone gets stuck, they kind of float over to that group and help them keep that part of

00:14:47.640 --> 00:14:49.800
the group and help that person keep moving.

00:14:49.800 --> 00:14:54.420
They can like almost write no code, but sort of float around and make sure nobody's stuck

00:14:54.420 --> 00:14:55.140
and everyone's productive.

00:14:55.140 --> 00:14:57.360
And that could be a massive boost to the team.

00:14:57.360 --> 00:15:02.820
Some of the things like bringing up a couple more items, estimating how long something's going

00:15:02.820 --> 00:15:04.360
to take or how much work it is.

00:15:04.360 --> 00:15:05.040
That's hard.

00:15:05.040 --> 00:15:06.120
It's always hard.

00:15:06.740 --> 00:15:09.740
You know, as you grow in your career, you realize that you can't avoid it.

00:15:09.740 --> 00:15:14.860
So you just need to embrace it and be okay with giving ballpark estimates to people and

00:15:14.860 --> 00:15:16.020
then trying to get better at it.

00:15:16.020 --> 00:15:18.240
Keep track of what you did and try to improve.

00:15:18.240 --> 00:15:20.840
The other one that's difficult is trade-offs.

00:15:20.840 --> 00:15:24.380
You know that you can't get all the information before you start working.

00:15:24.380 --> 00:15:31.320
So making good trade-offs between information and just risks and benefits and making good judgments.

00:15:31.320 --> 00:15:33.060
Those are things you just have to practice.

00:15:33.060 --> 00:15:36.060
Another thing that I wanted to bring up is the...

00:15:36.060 --> 00:15:37.840
There's a list of cognitive biases.

00:15:37.840 --> 00:15:43.840
So just knowing that when you're making a decision, there are biases in yourself that you will...

00:15:43.840 --> 00:15:49.000
You need to be aware of and try to, you know, make sure those are there and compensate somehow.

00:15:49.000 --> 00:15:49.320
Yeah.

00:15:49.320 --> 00:15:50.180
These are all really good.

00:15:50.180 --> 00:15:55.360
I like to understand that not all projects are filled with rock star on the stage work, right?

00:15:55.360 --> 00:15:56.640
Like you got to become a finisher.

00:15:56.640 --> 00:16:00.700
And a lot of times there's a bunch of just little details nobody likes that are part of that.

00:16:00.700 --> 00:16:11.060
Probably the first half of my career, most of my job usually was I would be taking on the things that everybody else didn't want to work on and forgot about and just wrapping them up and finishing.

00:16:11.060 --> 00:16:17.800
But then it looked like I was getting off and getting credit for finishing projects that most of the work was done by other people.

00:16:17.800 --> 00:16:18.860
They just didn't finish it.

00:16:18.860 --> 00:16:19.100
Yeah.

00:16:19.100 --> 00:16:19.860
Become a finisher.

00:16:19.860 --> 00:16:20.440
It's good stuff.

00:16:20.860 --> 00:16:23.960
And then there's finally the 10 commandments of egoless programming.

00:16:23.960 --> 00:16:25.400
Want to take us quickly through them?

00:16:25.400 --> 00:16:27.980
Understand and accept that you will make mistakes.

00:16:27.980 --> 00:16:29.900
You are not your code.

00:16:29.900 --> 00:16:32.000
Each of these could be episodes in themselves.

00:16:32.000 --> 00:16:35.900
No matter how much karate you know, someone else always knows more.

00:16:35.900 --> 00:16:39.100
Don't rewrite code without consultation.

00:16:39.100 --> 00:16:40.860
Oh, I'm guilty of that.

00:16:40.860 --> 00:16:41.280
Definitely.

00:16:41.280 --> 00:16:45.480
Treat people who know less than you with respect, deference, and patience.

00:16:45.480 --> 00:16:48.380
The only constant in the world is change.

00:16:48.380 --> 00:16:51.420
The only authority stems from knowledge, not from position.

00:16:51.420 --> 00:16:54.780
Fight for what you believe, but gracefully accept defeat.

00:16:54.780 --> 00:16:56.940
Don't be the coder in the corner.

00:16:56.940 --> 00:17:00.960
And critique code instead of people.

00:17:00.960 --> 00:17:02.980
Be kind to the coder, but not to the code.

00:17:02.980 --> 00:17:03.760
These are good.

00:17:03.760 --> 00:17:04.480
Yeah, these are all great.

00:17:04.480 --> 00:17:06.780
So yeah, I really connect with a lot of these.

00:17:06.780 --> 00:17:07.220
These are great.

00:17:07.220 --> 00:17:08.380
So I'm glad you brought this up.

00:17:08.380 --> 00:17:11.040
And nowhere in here it says don't make fun of PHP.

00:17:11.040 --> 00:17:13.160
No, you could totally make fun of PHP all day long.

00:17:13.160 --> 00:17:13.680
Yeah.

00:17:13.680 --> 00:17:18.280
But you could also kind of make fun of Python, unfortunately, a little bit for its lack.

00:17:18.280 --> 00:17:19.020
UI frameworks.

00:17:19.020 --> 00:17:21.140
Like we talked about that last week, right?

00:17:21.140 --> 00:17:27.220
How that's kind of one of its last remaining places where it really quite a bit could be

00:17:27.220 --> 00:17:27.480
better.

00:17:27.480 --> 00:17:31.500
One of the things that we didn't read above was no empty complaints.

00:17:31.500 --> 00:17:38.040
And one of my rules is I don't like criticizing stuff without offering a better alternative

00:17:38.040 --> 00:17:39.620
or at least some kind of constructive thing.

00:17:39.680 --> 00:17:45.360
So here's my attempt to backfill my criticism of the lack of UI frameworks with, well, here's

00:17:45.360 --> 00:17:45.980
where we are.

00:17:45.980 --> 00:17:49.360
And here's some things that seem like they're working and a little bit of constructiveness.

00:17:49.360 --> 00:17:53.520
So I went through and I said, all right, well, what are the options for Python UI frameworks,

00:17:53.520 --> 00:17:53.820
right?

00:17:53.820 --> 00:17:58.840
Like I'm not loving what's available right now in a lot of different angles.

00:17:58.840 --> 00:18:00.140
But what can we do?

00:18:00.140 --> 00:18:02.940
We talked TK Enter, not super amazing.

00:18:02.940 --> 00:18:05.200
Like I have a link to an example.

00:18:05.200 --> 00:18:07.780
Brian, pull it up and tell me how you feel about that application.

00:18:07.780 --> 00:18:13.600
Does that look like a classy new app from 2018?

00:18:13.600 --> 00:18:15.760
No, it looks like it's running on Windows 95.

00:18:15.760 --> 00:18:17.480
Yeah, it's like Battleship Gray.

00:18:17.480 --> 00:18:19.760
Looks like it could have easily come off of.

00:18:19.760 --> 00:18:26.040
It looks like whoever built the original Minesweeper in Windows 3.1.1, they built this, right?

00:18:26.040 --> 00:18:31.260
And so that's kind of what the current UI looks like in Python, which is, it's a problem,

00:18:31.260 --> 00:18:31.540
right?

00:18:31.540 --> 00:18:32.860
So what are the options?

00:18:32.860 --> 00:18:35.420
So we have that, but we have PySide and Qt.

00:18:35.720 --> 00:18:39.180
And actually Qt is pretty nice in terms of how it looks like.

00:18:39.180 --> 00:18:41.300
It really looks like it belongs on the platforms.

00:18:41.300 --> 00:18:45.760
There is a designer for it, a draggy droppy designer type thing, which is pretty good.

00:18:45.760 --> 00:18:47.800
But the license is a little weird.

00:18:47.800 --> 00:18:51.120
It's like PyCute is GPL.

00:18:51.120 --> 00:18:55.920
PySide is like an LGPL way to try to go around it.

00:18:55.920 --> 00:18:58.360
But PySide, I think, is slightly out of version with Qt.

00:18:58.360 --> 00:19:02.420
There's just like real messiness around it, but it's still a pretty nice thing.

00:19:02.420 --> 00:19:05.080
There's Kivy, which, and there's PyGame.

00:19:05.080 --> 00:19:06.900
There's also PyOpenGL.

00:19:06.900 --> 00:19:13.540
But to me, if you go to like Kivy and you look at the showcase or the examples of people,

00:19:13.540 --> 00:19:19.140
what they built, they all look like AR type things or games or other types of simulation

00:19:19.140 --> 00:19:19.460
stuff.

00:19:19.460 --> 00:19:22.700
And I know you said people have created a few things that are not quite like that, but it's

00:19:22.700 --> 00:19:24.460
not really the focus of the platform, right?

00:19:24.460 --> 00:19:27.280
One that actually looks pretty good is WX Python.

00:19:27.280 --> 00:19:28.660
Click on the example for that.

00:19:28.660 --> 00:19:30.320
That's one that I've used before.

00:19:30.320 --> 00:19:31.720
Yeah, this looks pretty good, right?

00:19:31.720 --> 00:19:35.480
This could certainly be at least circa 2005 on Windows.

00:19:35.480 --> 00:19:37.760
It looks pretty different.

00:19:37.760 --> 00:19:41.200
And it has like a GUI, a couple of GUI designers.

00:19:41.200 --> 00:19:42.100
It has these widgets.

00:19:42.100 --> 00:19:42.840
That's pretty cool.

00:19:42.840 --> 00:19:43.920
Yeah.

00:19:43.920 --> 00:19:45.880
And then there's all the Electron.js stuff.

00:19:45.960 --> 00:19:53.140
So Electron.js is basically Node.js plus hosted headless Chrome plus JavaScript and HTML for

00:19:53.140 --> 00:19:53.640
the front end.

00:19:53.640 --> 00:19:58.540
So there's actually a couple of attempts to create a, what I really think should be called

00:19:58.540 --> 00:20:01.400
Proton.py instead of Electron.js.

00:20:01.400 --> 00:20:05.020
A Python equivalent where the running back end is Python.

00:20:05.700 --> 00:20:09.680
And, you know, you could use like Sculpt or something to actually make the JavaScript side

00:20:09.680 --> 00:20:12.500
also Python, like the Anvil guys are doing, which is pretty cool.

00:20:12.500 --> 00:20:18.700
So there's this thing called Eel, which is a library for making Electron-like offline HTML

00:20:18.700 --> 00:20:20.840
JavaScript GUI apps.

00:20:20.840 --> 00:20:23.800
And like I said, you could put Python in the front end with that Sculpt bit.

00:20:24.500 --> 00:20:25.740
And that looks pretty interesting.

00:20:25.740 --> 00:20:31.820
So you get basically like a local app packaged up as a .app or .exe, but, you know, it's more

00:20:31.820 --> 00:20:36.720
or less like a web front end that can do like local machine Python capabilities.

00:20:36.720 --> 00:20:37.400
So that's pretty cool.

00:20:37.400 --> 00:20:41.400
And then there's a bigger version called CEF Python.

00:20:41.400 --> 00:20:45.840
That name is not amazing, but it's like Chrome embedded framework Python.

00:20:45.840 --> 00:20:47.880
And it's the same type of thing.

00:20:47.880 --> 00:20:51.460
It's a little more advanced, but it's also a little less obvious how to get started with

00:20:51.460 --> 00:20:51.920
it, I think.

00:20:52.340 --> 00:20:56.100
But both of those look like interesting ElectronJS-like things.

00:20:56.100 --> 00:20:58.240
These are people trying to solve the problem we have.

00:20:58.240 --> 00:20:58.960
So that's good.

00:20:58.960 --> 00:21:00.980
Yeah, it's good to see them do it.

00:21:00.980 --> 00:21:06.620
And yeah, last week we talked about possibly having an open session at PyCon in Cleveland

00:21:06.620 --> 00:21:07.780
in May about this.

00:21:07.780 --> 00:21:10.300
So it'd be really fun for people to get together and join us there.

00:21:10.300 --> 00:21:15.400
I think Paul Hilderman is kicking that off, but we can all go and be part of it.

00:21:15.400 --> 00:21:15.760
Definitely.

00:21:15.760 --> 00:21:16.280
Awesome.

00:21:16.280 --> 00:21:20.080
Well, anyway, here's my research bit I did on Python UI frameworks.

00:21:20.480 --> 00:21:24.980
None of them are like, yes, this is the answer, but maybe they'll spark some thinking and get

00:21:24.980 --> 00:21:25.760
us going in the right direction.

00:21:25.760 --> 00:21:26.360
All right.

00:21:26.360 --> 00:21:27.820
Well, that's all I got for you this week, Brian.

00:21:27.820 --> 00:21:28.940
Anything else from you?

00:21:28.940 --> 00:21:30.700
No, that was a fast six items.

00:21:30.700 --> 00:21:32.700
It was because they're so fun.

00:21:32.700 --> 00:21:35.780
I really like the one that you got about the senior developer stuff.

00:21:35.780 --> 00:21:40.440
It's not totally from 2018, but it's that evergreen material that just lasts, right?

00:21:40.840 --> 00:21:44.920
We talked about quite a bit of those, but every single item that we talked about has

00:21:44.920 --> 00:21:47.680
a paragraph or more of discussion on the article.

00:21:47.680 --> 00:21:49.120
So please go read that, everybody.

00:21:49.120 --> 00:21:50.500
It'll make you a better person.

00:21:50.500 --> 00:21:51.060
Absolutely.

00:21:51.060 --> 00:21:51.760
Very cool.

00:21:51.760 --> 00:21:51.960
All right.

00:21:51.960 --> 00:21:53.500
Well, Brian, thanks for sharing this with everyone.

00:21:53.500 --> 00:21:54.120
Thank you.

00:21:54.120 --> 00:21:54.620
Bye.

00:21:54.620 --> 00:21:54.920
Yep.

00:21:54.920 --> 00:21:55.120
Bye.

00:21:55.120 --> 00:21:55.160
Bye.

00:21:57.160 --> 00:21:58.160
Bye.

00:21:58.160 --> 00:21:59.160
Bye.

00:21:59.160 --> 00:22:00.160
Bye.

00:22:00.160 --> 00:22:01.160
Bye.

00:22:01.160 --> 00:22:02.160
Bye.

00:22:02.160 --> 00:22:03.160
Bye.

00:22:03.160 --> 00:22:04.160
Bye.

00:22:04.160 --> 00:22:05.160
Bye.

00:22:05.160 --> 00:22:06.160
Bye.

00:22:06.160 --> 00:22:06.160
Bye.

00:22:06.160 --> 00:22:06.160
Bye.

00:22:06.160 --> 00:22:08.160
Bye.

00:22:08.160 --> 00:22:10.160
Bye.

00:22:10.160 --> 00:22:11.160
Bye.

00:22:11.160 --> 00:22:12.160
Bye.

00:22:12.160 --> 00:22:12.160
Bye.

00:22:12.160 --> 00:22:12.160
Bye.

00:22:12.160 --> 00:22:12.160
Bye.

00:22:12.160 --> 00:22:12.160
Bye.

00:22:12.160 --> 00:22:12.160
Bye.

00:22:12.160 --> 00:22:17.060
we're always on the lookout for sharing something cool. On behalf of myself and Brian Okken,

00:22:17.060 --> 00:22:21.600
this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and

