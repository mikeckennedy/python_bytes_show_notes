
00:00:00.000 --> 00:00:04.160
This is Python Bytes. Python headlines and news delivered directly to your earbuds.


00:00:04.160 --> 00:00:08.160
Episode 4 recorded November 28th, 2016.


00:00:08.160 --> 00:00:12.560
This episode is brought to you by Rollbar. They help you take the pain out of errors.


00:00:12.560 --> 00:00:13.840
Hey Brian, how's it going?


00:00:13.840 --> 00:00:14.800
It's going really good.


00:00:14.800 --> 00:00:18.560
Yeah, we had a Thanksgiving break, which meant


00:00:18.560 --> 00:00:22.720
kind of a shake up in a lot of the news and the topics and whatnot.


00:00:22.720 --> 00:00:26.160
But that does not mean it was not interesting or controversial.


00:00:26.160 --> 00:00:28.400
It was a very controversial week last week.


00:00:28.400 --> 00:00:33.000
In fact, it might be one of the most Pythonically controversial Thanksgiving's ever, if I had


00:00:33.000 --> 00:00:36.520
to guess, I don't know, trying to intersect those two things.


00:00:36.520 --> 00:00:41.280
Yeah, so let's jump right into that as the first item that we're going to cover.


00:00:41.280 --> 00:00:42.920
And we'll sort of lay this out for you.


00:00:42.920 --> 00:00:48.120
So you may have heard that a guy named Zed Shah has written a very famous book teaching


00:00:48.120 --> 00:00:53.200
people to write programming, basically teaching people to become Python developers.


00:00:53.200 --> 00:00:54.200
Okay.


00:00:54.200 --> 00:01:01.200
He wrote this article called "The Case Against Python 3" or something to this effect.


00:01:01.200 --> 00:01:08.080
And it turned out this article, which is a huge, long, in-depth, highly charged criticism


00:01:08.080 --> 00:01:10.080
of Python 3.


00:01:10.080 --> 00:01:11.520
It's like 15 pages long.


00:01:11.520 --> 00:01:16.080
And it basically, let me just read you a short excerpt straight from the article.


00:01:16.080 --> 00:01:21.380
And remember, this is coming from the person who is the author of the primary book for


00:01:21.380 --> 00:01:23.100
learning Python.


00:01:23.100 --> 00:01:25.140
It's referring to Python 3.


00:01:25.140 --> 00:01:26.260
It's as simple as that.


00:01:26.260 --> 00:01:30.620
If you learn Python 2, you can still work with a legacy Python 2 code in existence until


00:01:30.620 --> 00:01:34.660
Python dies, or hopefully you move on.


00:01:34.660 --> 00:01:37.340
But if you learn Python 3, your future is very uncertain.


00:01:37.340 --> 00:01:42.020
You could really be learning a dead language and end up having to learn Python 2 anyway.


00:01:42.020 --> 00:01:43.500
Quote Zed Shah.


00:01:43.500 --> 00:01:47.100
Now if this was just some guy on the internet, like who cares, right?


00:01:47.100 --> 00:01:51.620
But the fact that this guy is our greeting person, this guy greets the new developers


00:01:51.620 --> 00:01:55.980
and welcomes them to Python and says, "Gee, Python is great and you can even use it until


00:01:55.980 --> 00:01:58.760
it dies or hopefully you move on."


00:01:58.760 --> 00:02:00.900
This is actually a really big problem.


00:02:00.900 --> 00:02:02.340
How did this whole experience strike you?


00:02:02.340 --> 00:02:08.420
It was hard to have coherent words come out when I was trying to express how angry I was


00:02:08.420 --> 00:02:09.420
about this article.


00:02:09.420 --> 00:02:11.700
I'm just shocked by it, actually.


00:02:11.700 --> 00:02:17.340
Yeah, I think shock and awe is really quite an appropriate summation of a lot of people's


00:02:17.340 --> 00:02:18.340
feelings.


00:02:18.340 --> 00:02:26.140
people writing me on Twitter going, what, what is this? Oh my god, this doesn't even like, like, they couldn't even like cognitively put it together with


00:02:26.140 --> 00:02:28.700
Zed Shah being the author of that book.


00:02:28.700 --> 00:02:37.260
So let me like, like I said, it's a 15 page article. Let me give you a few of the key points. In fact, I was able to condense it down pretty tightly, I believe, and


00:02:37.260 --> 00:02:41.540
everyone out there listening can decide sort of what this means to them.


00:02:41.540 --> 00:02:44.260
So there's a couple of key points. First of all,


00:02:44.260 --> 00:02:49.740
Zed says it's learning Python 3 or Python 3's existence is not in your best interest.


00:02:49.740 --> 00:02:55.860
And so this is quote, the Python projects effort to convince you to start with Python


00:02:55.860 --> 00:03:01.500
3 are not in your interest, but rather are in the best interest of the Python project.


00:03:01.500 --> 00:03:05.100
That's a case or point one against Python 3.


00:03:05.100 --> 00:03:11.960
Number two is you should be able to run Python 2 in the same process as Python 3.


00:03:11.960 --> 00:03:17.240
Like so they should be able to coexist in the same process as an execution engine.


00:03:17.240 --> 00:03:22.680
And the fact that no one has written a Python 3 interpreter that does this shows that Python


00:03:22.680 --> 00:03:25.280
3 is not Turing complete.


00:03:25.280 --> 00:03:28.640
It's one of the reasons that newcomers to the language can't use Python 3.


00:03:28.640 --> 00:03:33.280
I don't really understand that, but that was one of the major arguments, the Turing completeness,


00:03:33.280 --> 00:03:38.600
because Python 3 has not been made to host Python 2, which I think is actually not even


00:03:38.600 --> 00:03:41.640
correct, but also not making a lot of sense to me.


00:03:41.640 --> 00:03:45.640
But it also doesn't make sense that a newcomer would want to try to write a Python 2 interpreter


00:03:45.640 --> 00:03:46.640
in Python 3.


00:03:46.640 --> 00:03:49.200
It doesn't seem like a beginner task to me.


00:03:49.200 --> 00:03:50.200
Yeah, absolutely.


00:03:50.200 --> 00:03:54.640
So I actually had an exchange with Zed on Twitter.


00:03:54.640 --> 00:03:55.800
He was busy.


00:03:55.800 --> 00:03:58.840
He was talking to many people because a lot of people had the feeling that you and I did


00:03:58.840 --> 00:04:01.120
like, well, we'll get to that at the end.


00:04:01.120 --> 00:04:03.920
But we had this feeling that we just want to reach out.


00:04:03.920 --> 00:04:08.200
And so it really comes down actually to his, even though it took 15 pages in turn completeness


00:04:08.200 --> 00:04:12.760
and computer science and all sorts of stuff, the actual complaint is the way the strings


00:04:12.760 --> 00:04:15.080
changed in Python 3 are hard.


00:04:15.080 --> 00:04:18.780
So here's a quote again from the article, the strings in Python 3 are very difficult


00:04:18.780 --> 00:04:23.960
to use for beginners, and in an attempt to make strings more, quote, international, unquote,


00:04:23.960 --> 00:04:28.680
they turn themselves into difficult to use types with poor error messages.


00:04:28.680 --> 00:04:30.720
And so that that was straight from the article as well.


00:04:30.720 --> 00:04:36.160
So in my final analysis, I would say this, there's a huge uproar on Twitter, and various


00:04:36.160 --> 00:04:40.000
other things like on Reddit, I think I got like 500 upvotes across a couple of people


00:04:40.000 --> 00:04:46.560
who reposted this saying basically, look, I'm going to absolutely scare newcomers to


00:04:46.560 --> 00:04:53.000
Python away from Python three. And here's why you can't add the byte string hello to


00:04:53.000 --> 00:04:57.480
the Unicode string. Hello, I'm Python three that will crash. There's too many string formatting


00:04:57.480 --> 00:05:01.880
choices and bytes aren't decoded to strings automatically, you have to pick the encoding


00:05:01.880 --> 00:05:04.080
and explicitly do that.


00:05:04.080 --> 00:05:06.680
Therefore all newbies should avoid Python 3 like the plague.


00:05:06.680 --> 00:05:09.200
It'll curse your career and cloud your judgment.


00:05:09.200 --> 00:05:12.920
So that was Thanksgiving in the Python world basically.


00:05:12.920 --> 00:05:14.200
Yeah, that's just weird.


00:05:14.200 --> 00:05:19.680
I really have a hard time imagining that a newcomer to Python would need byte strings


00:05:19.680 --> 00:05:22.120
or byte arrays right away.


00:05:22.120 --> 00:05:23.240
Just not sure about that.


00:05:23.240 --> 00:05:27.360
But yeah, I mean, surely after a while, like if you were the person writing a network layer,


00:05:27.360 --> 00:05:30.920
like if you're writing requests, you're writing flash, you're writing pyramid, you got to


00:05:30.920 --> 00:05:31.840
to deal with this stuff.


00:05:31.840 --> 00:05:34.520
But beginners don't do that the first day.


00:05:34.520 --> 00:05:37.080
They just work with strings and they might get something


00:05:37.080 --> 00:05:39.440
from a framework that's already done that decoding for you.


00:05:39.440 --> 00:05:40.280
It's crazy.


00:05:40.280 --> 00:05:42.040
- Yeah, and I learned in Python 2


00:05:42.040 --> 00:05:45.560
and the conversion to Python 3 was very painless.


00:05:45.560 --> 00:05:48.700
I mean, the only thing, I remember,


00:05:48.700 --> 00:05:50.160
gosh, the only thing I was waiting for


00:05:50.160 --> 00:05:53.000
was one of the libraries that I depended on.


00:05:53.000 --> 00:05:55.400
The interactions with DLLs was a little different,


00:05:55.400 --> 00:05:58.320
so some of the, because of the string things.


00:05:58.320 --> 00:06:01.840
But let's face it, Python 2 used basically C strings,


00:06:01.840 --> 00:06:05.720
and they aren't normal, just arrays of characters,


00:06:05.720 --> 00:06:08.980
and that's not good enough, it's not real.


00:06:08.980 --> 00:06:12.360
And it's actually, the argument's a lot contradictory


00:06:12.360 --> 00:06:15.720
to itself because the many formatting choices for strings


00:06:15.720 --> 00:06:18.160
are because we've came up with lots of better ways


00:06:18.160 --> 00:06:20.720
to format strings and kept the old ones


00:06:20.720 --> 00:06:24.040
for backwards compatibility, which is exactly what Zed


00:06:24.040 --> 00:06:26.720
wants us to do to keep backwards compatibility.


00:06:26.720 --> 00:06:29.360
And yet there was this, one of the things


00:06:29.360 --> 00:06:31.720
that caused the break between two and three


00:06:31.720 --> 00:06:33.520
and make 'em not backward compatible


00:06:33.520 --> 00:06:35.400
is this decision about strings.


00:06:35.400 --> 00:06:37.880
And I just, at first I disagreed with it,


00:06:37.880 --> 00:06:40.360
but after working with it for a while,


00:06:40.360 --> 00:06:42.480
I totally understand the choice and it makes sense.


00:06:42.480 --> 00:06:44.480
- Yeah, I think, I don't know what the alternative is.


00:06:44.480 --> 00:06:46.480
Sporadic runtime errors?


00:06:46.480 --> 00:06:47.320
Great.


00:06:47.320 --> 00:06:49.020
You know, I mean, come on.


00:06:49.020 --> 00:06:52.520
So, and it's one thing to say, strings in Python 3 suck.


00:06:52.520 --> 00:06:55.200
Like, that's a reasonable contention.


00:06:55.200 --> 00:06:57.100
I don't make that myself, but you could.


00:06:57.100 --> 00:07:00.040
But to then make that immediately to be the case


00:07:00.040 --> 00:07:03.040
that you should absolutely stay away from Python 3


00:07:03.040 --> 00:07:06.280
and even Python 2 is kind of a bad choice for you,


00:07:06.280 --> 00:07:07.640
but you can kind of stick with it for a while.


00:07:07.640 --> 00:07:10.160
Like that is, one does not follow from the other.


00:07:10.160 --> 00:07:12.360
So I got worked up and I was gonna write up


00:07:12.360 --> 00:07:14.360
something about this, but this guy, girl,


00:07:14.360 --> 00:07:18.020
I don't even know the gender, Eve, E-E-V-E-E,


00:07:18.020 --> 00:07:23.020
wrote a fabulous point by point logical rebuttal of this


00:07:23.020 --> 00:07:24.800
and then sort of a personal comment as well.


00:07:24.800 --> 00:07:29.160
So we're going to link to that, which has the original articles, quotes, as well as


00:07:29.160 --> 00:07:30.840
comments about it in our show notes.


00:07:30.840 --> 00:07:31.840
Yeah.


00:07:31.840 --> 00:07:35.560
And I'd like to just say for anybody that's actually freaked out about this at all, don't


00:07:35.560 --> 00:07:36.560
be freaked out.


00:07:36.560 --> 00:07:37.560
It isn't a big deal.


00:07:37.560 --> 00:07:43.040
And for history reasons, or just a little background, Zed does like to jump up and down


00:07:43.040 --> 00:07:45.080
and make a lot of noise every once in a while.


00:07:45.080 --> 00:07:46.080
Yeah.


00:07:46.080 --> 00:07:47.080
Yeah.


00:07:47.080 --> 00:07:48.400
He even said on Twitter that he was looking to move on from Python.


00:07:48.400 --> 00:07:49.400
So that's fine.


00:07:49.400 --> 00:07:50.480
I mean, I totally respect that.


00:07:50.480 --> 00:07:53.000
I've moved on from other technologies to Python, actually.


00:07:53.000 --> 00:07:58.560
But don't poison the well on your way out the door as your last act.


00:07:58.560 --> 00:08:02.200
So personally, I'm not going to recommend Zed's book anymore.


00:08:02.200 --> 00:08:07.020
Just as a point of, I just don't think this is the person that should be representing


00:08:07.020 --> 00:08:09.200
the first touch with people coming into Python.


00:08:09.200 --> 00:08:11.360
So everyone else can do whatever they like.


00:08:11.360 --> 00:08:12.360
All right.


00:08:12.360 --> 00:08:13.360
I agree.


00:08:13.360 --> 00:08:14.360
Right on.


00:08:14.360 --> 00:08:17.200
So let's talk about something newer, something in Python 3, actually.


00:08:17.200 --> 00:08:18.200
Okay.


00:08:18.200 --> 00:08:23.720
things that has come up in Python 3 as our second article is the async I/O has


00:08:23.720 --> 00:08:28.440
changed quite a bit and in Python 3 it's sort of gone through several


00:08:28.440 --> 00:08:33.400
iterations and I'm not really an expert on it but there was a Reddit discussion


00:08:33.400 --> 00:08:38.320
talking about an article the article is actually from February but the Reddit


00:08:38.320 --> 00:08:44.440
discussion is about the async I/O for the working Python developer and


00:08:44.440 --> 00:08:47.600
And actually the article that we'll link to


00:08:47.600 --> 00:08:49.960
is I think a pretty okay tutorial


00:08:49.960 --> 00:08:53.080
on understanding some of the different terms,


00:08:53.080 --> 00:08:55.440
like, now I'm even gonna blank on 'em,


00:08:55.440 --> 00:08:59.880
but like futures and threads and tasks.


00:08:59.880 --> 00:09:02.820
And I think it does a pretty good job.


00:09:02.820 --> 00:09:04.120
There's a couple downsides.


00:09:04.120 --> 00:09:06.760
It does use Python 3.4 syntax,


00:09:06.760 --> 00:09:09.220
and the syntax has changed.


00:09:09.220 --> 00:09:10.960
It still works in 3.5,


00:09:10.960 --> 00:09:15.220
but there is a newer async await syntax in 3.5.


00:09:15.220 --> 00:09:18.560
- Yeah, and that makes it much more approachable, I think.


00:09:18.560 --> 00:09:21.480
It makes the code change significantly less


00:09:21.480 --> 00:09:24.760
coming from a synchronous model to an asynchronous model.


00:09:24.760 --> 00:09:27.800
Let the implementation or runtime deal with that for you.


00:09:27.800 --> 00:09:32.440
- Yeah, but in that regard, I'd actually like this sort of,


00:09:32.440 --> 00:09:34.880
so this is one of the reasons why I included it.


00:09:34.880 --> 00:09:37.200
I'd like somebody to take this type of an article


00:09:37.200 --> 00:09:40.520
and write it with the new async await keywords,


00:09:40.520 --> 00:09:42.400
And it would also be great if they could come up


00:09:42.400 --> 00:09:44.520
with an example that didn't include


00:09:44.520 --> 00:09:46.280
just like sleep statements.


00:09:46.280 --> 00:09:48.680
- Yeah, a real world example would be great.


00:09:48.680 --> 00:09:53.440
- Yeah, so anyway, that's my second article.


00:09:53.440 --> 00:09:55.760
- Yeah, and if you're looking to get into async stuff


00:09:55.760 --> 00:09:57.120
in Python, check this one out.


00:09:57.120 --> 00:09:59.920
It's cool, we'll have another thing later in the show


00:09:59.920 --> 00:10:01.960
as well about async.


00:10:01.960 --> 00:10:05.040
All right, so my second choice here was Piston,


00:10:05.040 --> 00:10:08.120
P-Y-S-T-O-N, which is an alternate implementation


00:10:08.120 --> 00:10:14.000
Python as opposed to say CPython. And this actually is maybe most notable


00:10:14.000 --> 00:10:19.400
because it's coming from Dropbox where Guido van Ralsom and crew work and


00:10:19.400 --> 00:10:24.600
Dropbox is one of the biggest sort of users of Python in the commercial space


00:10:24.600 --> 00:10:29.800
and so it's a real really is a center of the Python universe. So they're working


00:10:29.800 --> 00:10:35.920
on a JIT version, a just-in-time compiled version of Python that is different than


00:10:35.920 --> 00:10:40.960
CPython. So that's pretty cool. This release is the 0.6 release. The main goal was to reduce


00:10:40.960 --> 00:10:45.940
the overall memory footprint. So they actually, there's a couple of interesting comparisons.


00:10:45.940 --> 00:10:51.760
It's 50% better than it was before. And let me look at the graph. Yes, in every single


00:10:51.760 --> 00:10:58.040
case the memory usage is actually better in piston. Now it wasn't before now it is compared


00:10:58.040 --> 00:11:05.400
to pypy, P Y P Y, which is the other major active JIT implementation for Python. So they


00:11:05.400 --> 00:11:07.560
They also picked up some of the Python 3.6 features


00:11:07.560 --> 00:11:08.960
like order dict and so on.


00:11:08.960 --> 00:11:12.160
- Okay, I guess I'm misunderstanding the graph.


00:11:12.160 --> 00:11:17.160
It is, it's still larger memory footprint than CPython.


00:11:17.160 --> 00:11:20.400
- It is still more memory than CPython


00:11:20.400 --> 00:11:23.240
because I believe it's a reference counting


00:11:23.240 --> 00:11:24.680
garbage collector, I don't know that for sure,


00:11:24.680 --> 00:11:28.000
but I think it's a GC-based language possibly,


00:11:28.000 --> 00:11:30.720
which generally means more memory usage.


00:11:30.720 --> 00:11:34.600
Certainly PyPy is GC, which means more memory usage.


00:11:34.600 --> 00:11:36.320
So it's interesting.


00:11:36.320 --> 00:11:37.600
I don't think it's really there yet.


00:11:37.600 --> 00:11:39.600
I'm not totally sure.


00:11:39.600 --> 00:11:41.720
They focused a lot on NumPy implementation


00:11:41.720 --> 00:11:43.080
and some of the scientific stuff.


00:11:43.080 --> 00:11:45.880
But it's nice to know there are many implementations


00:11:45.880 --> 00:11:47.720
of Python and here's yet another.


00:11:47.720 --> 00:11:48.540
- Yeah, it would be cool.


00:11:48.540 --> 00:11:52.100
And I think it'd be kind of neat if we could get somebody


00:11:52.100 --> 00:11:55.400
from the Piston Project to maybe go on your show.


00:11:55.400 --> 00:11:57.040
- Yeah, I would love to have them on Talk Python.


00:11:57.040 --> 00:11:59.000
I actually talked to them a little bit


00:11:59.000 --> 00:12:01.320
when the project was announced like a year ago.


00:12:01.320 --> 00:12:03.120
And they were like, "Hmm, maybe."


00:12:03.120 --> 00:12:06.040
I don't believe anybody ever agreed to come on the show,


00:12:06.040 --> 00:12:07.100
so I might have to follow up with that.


00:12:07.100 --> 00:12:07.940
You're right, that would be cool.


00:12:07.940 --> 00:12:09.720
I've had the Pigeon guys on,


00:12:09.720 --> 00:12:12.240
which is the Microsoft's version of that,


00:12:12.240 --> 00:12:13.720
which is actually really cool.


00:12:13.720 --> 00:12:15.700
Some of the Python core developers are working on it,


00:12:15.700 --> 00:12:17.120
Brett Cannon and groups.


00:12:17.120 --> 00:12:17.960
I had them on my show,


00:12:17.960 --> 00:12:20.200
and that was a super interesting topic.


00:12:20.200 --> 00:12:21.040
- Yeah, it is interesting.


00:12:21.040 --> 00:12:23.200
I'd be interested to hear some of the motivation,


00:12:23.200 --> 00:12:25.640
because if, I mean, Dropbox is throwing money at it.


00:12:25.640 --> 00:12:27.780
There must be a reason by around there.


00:12:27.780 --> 00:12:30.560
It's not just they're curious, so.


00:12:30.560 --> 00:12:31.920
- No, there's something.


00:12:31.920 --> 00:12:34.520
They actually are not using it in production yet,


00:12:34.520 --> 00:12:36.080
but maybe they're looking to, we'll see.


00:12:36.080 --> 00:12:37.040
- Yeah, okay.


00:12:37.040 --> 00:12:38.100
- Before we get to the next one,


00:12:38.100 --> 00:12:39.660
I'd kinda like to tell you about our sponsor.


00:12:39.660 --> 00:12:41.080
How cool is it that we have a sponsor already?


00:12:41.080 --> 00:12:41.960
That's great, right?


00:12:41.960 --> 00:12:43.560
- Yeah, I'm very grateful to these guys.


00:12:43.560 --> 00:12:44.400
- Yeah, Rollbar's awesome.


00:12:44.400 --> 00:12:45.680
So I actually use Rollbar.


00:12:45.680 --> 00:12:47.520
I used Rollbar before they sponsored the show.


00:12:47.520 --> 00:12:48.440
So let me just tell you about them.


00:12:48.440 --> 00:12:50.640
So on the Talk Python websites,


00:12:50.640 --> 00:12:52.160
those across three sites there,


00:12:52.160 --> 00:12:55.120
they handle almost two million dynamic HTTP requests a month


00:12:55.120 --> 00:12:58.160
and transfer upwards of five terabytes of data.


00:12:58.160 --> 00:13:00.160
But I deploy to them several times a week,


00:13:00.160 --> 00:13:01.960
and I'm not even worried about pushing them out


00:13:01.960 --> 00:13:04.360
because in addition to continuous integration,


00:13:04.360 --> 00:13:07.320
like if something goes wrong, my Slack, my email,


00:13:07.320 --> 00:13:10.280
my phone, everything will be blowing up with notifications


00:13:10.280 --> 00:13:11.960
from Rollbar saying something broke,


00:13:11.960 --> 00:13:13.880
click, click, click, check the server.


00:13:13.880 --> 00:13:15.740
And you'll get detailed error ports


00:13:15.740 --> 00:13:17.000
whenever something's wrong.


00:13:17.000 --> 00:13:18.880
If there is an error, usually don't even have to debug it


00:13:18.880 --> 00:13:20.260
'cause all the info is right there.


00:13:20.260 --> 00:13:22.280
So you Python Bytes listeners,


00:13:22.280 --> 00:13:24.240
you can have the same peace of mind.


00:13:24.240 --> 00:13:26.520
Just visit rollbar.com/pythonbytes,


00:13:26.520 --> 00:13:27.540
which is also in the show notes


00:13:27.540 --> 00:13:28.920
and sign up for the free tier.


00:13:28.920 --> 00:13:29.760
So thanks Rollbar.


00:13:29.760 --> 00:13:30.520
Thank you, Robert.


00:13:30.520 --> 00:13:32.720
And also, while you're there, there's a really fun demo


00:13:32.720 --> 00:13:33.560
you can play with.


00:13:33.560 --> 00:13:34.240
All right.


00:13:34.240 --> 00:13:35.080
Let's talk about Docs.


00:13:35.080 --> 00:13:35.600
OK.


00:13:35.600 --> 00:13:37.640
I just heard about this last week.


00:13:37.640 --> 00:13:39.120
I'm not sure when they announced it.


00:13:39.120 --> 00:13:43.720
But there's a website called pydoc.io.


00:13:43.720 --> 00:13:48.800
And we're actually going to link to the announcement.


00:13:48.800 --> 00:13:51.440
It's on the Read the Docs site.


00:13:51.440 --> 00:13:52.880
I forgot who's behind this.


00:13:52.880 --> 00:13:58.160
But the idea is similar to a lot of API documentation generators.


00:13:58.160 --> 00:14:02.680
but it looks like they're gonna try to automatically


00:14:02.680 --> 00:14:05.000
generate documentation about the APIs


00:14:05.000 --> 00:14:09.120
for at least a whole bunch of PyPI repositories.


00:14:09.120 --> 00:14:10.840
- Yeah, they said they're starting with the popular ones,


00:14:10.840 --> 00:14:12.560
but they said eventually they're planning


00:14:12.560 --> 00:14:14.440
as to auto-generate API references


00:14:14.440 --> 00:14:15.960
for every package on PyPI,


00:14:15.960 --> 00:14:17.680
so that's over 90,000 packages.


00:14:17.680 --> 00:14:19.160
That's pretty awesome.


00:14:19.160 --> 00:14:20.840
- That's kind of incredible.


00:14:20.840 --> 00:14:23.520
Yeah, it may surpass all of the rest of the stuff


00:14:23.520 --> 00:14:25.360
on the Read the Docs right now, but I'm not sure.


00:14:25.360 --> 00:14:26.520
- Yeah, so it's really interesting,


00:14:26.520 --> 00:14:28.700
and I'm not really sure quite how it works.


00:14:28.700 --> 00:14:30.540
Maybe it looks at the actual documentation


00:14:30.540 --> 00:14:33.620
in your Python code or whatever, but yeah, have a look.


00:14:33.620 --> 00:14:35.340
If you have a package out there


00:14:35.340 --> 00:14:37.100
and you wanna make sure it shows up well here,


00:14:37.100 --> 00:14:37.940
be sure to check that out.


00:14:37.940 --> 00:14:40.500
- Yeah, a few of the packages they've got so far,


00:14:40.500 --> 00:14:41.780
I looked around, it looks pretty neat.


00:14:41.780 --> 00:14:42.760
- Yeah, absolutely.


00:14:42.760 --> 00:14:45.420
I was cruising through requests, it's up there, of course.


00:14:45.420 --> 00:14:49.460
So we talked about things that maybe advanced people


00:14:49.460 --> 00:14:53.060
care about, like converting bytes to byte strings


00:14:53.060 --> 00:14:55.380
and whatnot to regular strings or whatever,


00:14:55.380 --> 00:14:57.780
But I found an interesting article,


00:14:57.780 --> 00:15:00.740
really a conversation that I wanted to highlight.


00:15:00.740 --> 00:15:02.900
And the question was, what's the one thing


00:15:02.900 --> 00:15:05.420
or the primary thing that took your Python experience


00:15:05.420 --> 00:15:06.260
to the next level?


00:15:06.260 --> 00:15:08.340
And this is asked by a guy who's had like three months


00:15:08.340 --> 00:15:10.300
of Python and trying to get into it.


00:15:10.300 --> 00:15:13.060
And so I picked out five that I thought were pretty cool.


00:15:13.060 --> 00:15:16.380
So the first one out there said,


00:15:16.380 --> 00:15:19.180
that sort of changed their relationship with Python


00:15:19.180 --> 00:15:22.340
and how they wrote code was mastering generators.


00:15:22.340 --> 00:15:25.340
Another person said, how iteration really works.


00:15:25.340 --> 00:15:27.180
Understanding how iteration really works


00:15:27.180 --> 00:15:29.020
opens up so many possibilities,


00:15:29.020 --> 00:15:32.140
like learning how to do tuple unpacking,


00:15:32.140 --> 00:15:34.660
playing with zip, enumerate all, any,


00:15:34.660 --> 00:15:36.060
looking at iter tools.


00:15:36.060 --> 00:15:38.020
I find it's interesting in Python,


00:15:38.020 --> 00:15:39.740
another person said, list comprehensions,


00:15:39.740 --> 00:15:43.780
how important iteration and sort of processing


00:15:43.780 --> 00:15:45.420
streams of data is, right?


00:15:45.420 --> 00:15:46.660
- Yeah, these are good.


00:15:46.660 --> 00:15:47.500
- Yeah, these are good.


00:15:47.500 --> 00:15:49.540
One of them I think is gonna be near and dear to your heart


00:15:49.540 --> 00:15:51.660
is unit testing and pytest in particular.


00:15:51.660 --> 00:15:55.280
- Yeah, I would probably say do system level tests first,


00:15:55.280 --> 00:15:57.080
but yeah, I agree.


00:15:57.080 --> 00:15:58.200
- Well, it changed this guy's life.


00:15:58.200 --> 00:16:00.600
So another person said,


00:16:00.600 --> 00:16:02.720
"For me, all of David Beasley's work,


00:16:02.720 --> 00:16:05.960
"in particular, his work on coroutines,"


00:16:05.960 --> 00:16:09.520
which was sort of hinting at the async I/O stuff as well.


00:16:09.520 --> 00:16:10.760
- Maybe I should check that out.


00:16:10.760 --> 00:16:12.480
- Yeah, we could check that out for sure.


00:16:12.480 --> 00:16:14.660
- One of the things I'd like to add to this is the,


00:16:14.660 --> 00:16:18.120
I see a lot of people that already know several languages,


00:16:18.120 --> 00:16:19.960
and then when they come to Python,


00:16:19.960 --> 00:16:25.240
there's a desire to just jump in the deep end and skip over some of the basics. And I think


00:16:25.240 --> 00:16:29.800
anybody that's in that boat should go back and make sure they understand all the basic data


00:16:29.800 --> 00:16:36.280
structures in Python because misusing data structures and things like for loops and


00:16:36.280 --> 00:16:42.280
if-else and all those things and some of the comparison operators that are different than


00:16:42.280 --> 00:16:47.000
other languages can make your code a lot better right off the bat. Yeah, absolutely. I think it's


00:16:47.720 --> 00:16:50.680
- It's one of the curses of Python's ability


00:16:50.680 --> 00:16:52.640
to be quickly and easily learned.


00:16:52.640 --> 00:16:54.220
You don't have to trudge through all the details.


00:16:54.220 --> 00:16:57.020
You can almost just jump in right away.


00:16:57.020 --> 00:16:59.880
But you do actually overlook some of its


00:16:59.880 --> 00:17:02.480
really beautiful, nuanced aspects of it


00:17:02.480 --> 00:17:04.280
if you just have the same mindset


00:17:04.280 --> 00:17:05.780
as say coming from C or whatever.


00:17:05.780 --> 00:17:08.120
- Yeah, I still find people that are surprised


00:17:08.120 --> 00:17:10.540
that have actually written Python for a long time


00:17:10.540 --> 00:17:13.360
that don't know that you can do two comparisons


00:17:13.360 --> 00:17:14.200
in an if statement.


00:17:14.200 --> 00:17:16.800
You can say if one is less than x


00:17:16.800 --> 00:17:19.200
is less than 12 or something like that.


00:17:19.200 --> 00:17:21.440
- Yeah, I tried PipePipe and it didn't work,


00:17:21.440 --> 00:17:22.920
so it must not be in there.


00:17:22.920 --> 00:17:25.080
You know, so when you write code like that,


00:17:25.080 --> 00:17:26.960
you probably want to debug it easily, right?


00:17:26.960 --> 00:17:29.200
And the best place to learn how to quickly


00:17:29.200 --> 00:17:31.440
and easily debug your code is from my dinosaur.


00:17:31.440 --> 00:17:32.260
- What?


00:17:32.260 --> 00:17:34.020
- The guy who gave the talk was wearing a dinosaur suit.


00:17:34.020 --> 00:17:34.860
- Oh yeah, yeah.


00:17:34.860 --> 00:17:38.440
- So I'm talking about Q.


00:17:38.440 --> 00:17:41.020
Our friend Luciano Romalo gave us.


00:17:41.020 --> 00:17:42.720
- Oh yeah, totally.


00:17:42.720 --> 00:17:45.620
You like set it up for me and laid it up


00:17:45.620 --> 00:17:48.740
I just dropped the ball. I was playing baseball over in the corner.


00:17:48.740 --> 00:17:49.740
Dinosaurs.


00:17:49.740 --> 00:17:53.780
So, Luciano Romano tweeted out something really cool and we both picked up on it.


00:17:53.780 --> 00:18:01.380
Yeah, Luciano Romano, by the way, way cool name. There's a product, a project on PyPI


00:18:01.380 --> 00:18:07.460
called Q and it's a quick and dirty debugging output for tired programmers. And there's


00:18:07.460 --> 00:18:13.340
a link to a five minute lightning talk by, now I'm going to forget this guy's name. It


00:18:13.340 --> 00:18:14.340
was something cool also.


00:18:14.340 --> 00:18:15.340
Ping.


00:18:15.340 --> 00:18:16.180
- Yeah.


00:18:16.180 --> 00:18:20.220
- And the gist of it is just a way to add logging


00:18:20.220 --> 00:18:24.820
that saves to a file and in very little code.


00:18:24.820 --> 00:18:28.200
And this is something you can add even to a running


00:18:28.200 --> 00:18:31.440
like a web service or something that you have no idea


00:18:31.440 --> 00:18:33.760
where standard out and standard error are going.


00:18:33.760 --> 00:18:35.200
And you could still add some logging


00:18:35.200 --> 00:18:36.240
to find out what's going on.


00:18:36.240 --> 00:18:37.100
- Yeah, it's really cool.


00:18:37.100 --> 00:18:39.880
What I really like about it is you basically say,


00:18:39.880 --> 00:18:40.840
the guy hates typing.


00:18:40.840 --> 00:18:42.200
So everything's like one letter,


00:18:42.200 --> 00:18:43.840
which we could debate the merits of that.


00:18:43.840 --> 00:18:46.160
But you go instead of log something or print something,


00:18:46.160 --> 00:18:48.040
you say Q.Q and you give it an expression.


00:18:48.040 --> 00:18:49.580
It can be as complicated as you want.


00:18:49.580 --> 00:18:52.400
And it will actually figure out the expression,


00:18:52.400 --> 00:18:54.840
the method it's in, as well as the value


00:18:54.840 --> 00:18:56.200
and give you a little summary.


00:18:56.200 --> 00:18:57.480
It's really cool.


00:18:57.480 --> 00:18:58.560
There's also a tracing thing.


00:18:58.560 --> 00:19:01.180
So if one function is being called


00:19:01.180 --> 00:19:02.320
with the wrong parameters,


00:19:02.320 --> 00:19:03.560
and you're like, why is this happening?


00:19:03.560 --> 00:19:06.640
You can put like a decorator Q.T on that function


00:19:06.640 --> 00:19:08.280
and it will trace the entire call stack


00:19:08.280 --> 00:19:09.640
with the name of the function,


00:19:09.640 --> 00:19:11.680
all the local parameters that are passed and so on.


00:19:11.680 --> 00:19:14.520
- Yeah, and just watching him in this talk


00:19:14.520 --> 00:19:18.960
to add fairly complete logging onto a module


00:19:18.960 --> 00:19:20.920
in like, I don't know, 20 characters


00:19:20.920 --> 00:19:23.480
that he added to the file, it's pretty cool.


00:19:23.480 --> 00:19:25.320
So definitely check it out.


00:19:25.320 --> 00:19:27.220
- And a bonus 'cause he's in a dinosaur suit.


00:19:27.220 --> 00:19:29.040
- Yeah, he's also in a dinosaur suit.


00:19:29.040 --> 00:19:30.240
One of the things I liked about it is


00:19:30.240 --> 00:19:33.440
because I'm one of those quick and dirty debuggers


00:19:33.440 --> 00:19:35.720
that I will not reach for the debugger first,


00:19:35.720 --> 00:19:38.560
I will reach for logging, and so this is good.


00:19:38.560 --> 00:19:39.640
- Yeah, it was really cool.


00:19:39.640 --> 00:19:43.280
And it's a five minute lightning talk at a PyCon,


00:19:43.280 --> 00:19:44.560
but it's like 25 minutes in,


00:19:44.560 --> 00:19:46.560
and so the link I put in there


00:19:46.560 --> 00:19:48.280
actually has the timestamp in it,


00:19:48.280 --> 00:19:49.600
so it should jump right to his talk.


00:19:49.600 --> 00:19:51.360
- One of the things I liked is just,


00:19:51.360 --> 00:19:53.220
it's a decent example for giving


00:19:53.220 --> 00:19:54.800
a good lightning talk as well.


00:19:54.800 --> 00:19:57.160
- Oh yeah, it was really compelling, people loved it.


00:19:57.160 --> 00:19:58.000
- Yeah. - All right,


00:19:58.000 --> 00:19:59.140
that's it for the news.


00:19:59.140 --> 00:20:00.840
You might have thought Thanksgiving was gonna be dull,


00:20:00.840 --> 00:20:02.600
but no, it was not.


00:20:02.600 --> 00:20:04.000
Brian, what else is up with you?


00:20:04.000 --> 00:20:06.800
- Thanksgiving has put me behind schedule on my book,


00:20:06.800 --> 00:20:09.500
and so I'm gonna have to take a little bit of a pause


00:20:09.500 --> 00:20:11.540
from some of the podcasts.


00:20:11.540 --> 00:20:14.620
Other than this, I'm gonna keep up with this, of course,


00:20:14.620 --> 00:20:16.300
and catch up on my book.


00:20:16.300 --> 00:20:18.660
I do have some interesting interviews coming up


00:20:18.660 --> 00:20:19.980
and I'll definitely keep those flowing


00:20:19.980 --> 00:20:21.600
as soon as, whenever they come in.


00:20:21.600 --> 00:20:22.900
But that's up for me.


00:20:22.900 --> 00:20:23.940
What do you got going, Michael?


00:20:23.940 --> 00:20:24.780
- Excellent.


00:20:24.780 --> 00:20:25.600
You know, not too much.


00:20:25.600 --> 00:20:27.100
I try to catch up on a bunch of things


00:20:27.100 --> 00:20:29.700
over the downtime on break.


00:20:29.700 --> 00:20:32.460
But also, I just have a quick follow-up from last week.


00:20:32.460 --> 00:20:35.060
We talked about how cool Python 3.6 is


00:20:35.060 --> 00:20:37.020
and that the release is coming, that was in beta.


00:20:37.020 --> 00:20:38.500
I think I forgot to mention,


00:20:38.500 --> 00:20:40.820
the expected release date of Python 3.6,


00:20:40.820 --> 00:20:44.260
according to the official page there,


00:20:44.260 --> 00:20:47.260
is December 16th, 2016.


00:20:47.260 --> 00:20:50.540
So that's actually coming up in a couple weeks, right?


00:20:50.540 --> 00:20:53.340
We're gonna be having a shiny new Python 3.6.


00:20:53.340 --> 00:20:54.180
It's gonna be great.


00:20:54.180 --> 00:20:55.820
- Yeah, we'll definitely have to include that


00:20:55.820 --> 00:20:58.300
in that week's Python Bytes.


00:20:58.300 --> 00:20:59.260
- There's no way to avoid that.


00:20:59.260 --> 00:21:00.100
That's gonna be awesome.


00:21:00.100 --> 00:21:01.100
Looking forward to it.


00:21:01.100 --> 00:21:02.260
It was great to chat with you,


00:21:02.260 --> 00:21:04.700
and thanks for sharing all the news you found with everyone.


00:21:04.700 --> 00:21:06.460
- Thanks for talking with me, Michael.


00:21:06.460 --> 00:21:07.300
- Yeah, you bet.

