
00:00:00.000 --> 00:00:04.480
Hello, and welcome to Python Bytes, where we deliver news and headlines directly to your


00:00:04.480 --> 00:00:11.200
earbuds. This is episode 174, recorded March 18, 2020. I'm Brian Okken.


00:00:11.200 --> 00:00:12.240
And I'm Michael Kennedy.


00:00:12.240 --> 00:00:15.200
And this week, this episode is brought to you by


00:00:15.200 --> 00:00:18.000
Talk PythonCourses and the pytestBook.


00:00:18.000 --> 00:00:19.440
Yeah, yay, it's brought to you by us.


00:00:19.440 --> 00:00:21.040
Yeah, us.


00:00:21.040 --> 00:00:22.000
More about that later, huh?


00:00:22.000 --> 00:00:26.960
Yeah. So we're doing something a little different. We're recording in two different locations


00:00:26.960 --> 00:00:30.720
Because of actually we always record in two different locations, but


00:00:30.720 --> 00:00:35.600
But the locations are sometimes not the location, especially the location you're in.


00:00:35.600 --> 00:00:41.120
Yeah, I often, yeah, record somewhere else. But today I'm at home because a lot of people


00:00:41.120 --> 00:00:47.040
are at home working remotely in home offices now because of, I don't even know how to


00:00:47.040 --> 00:00:54.640
pronounce it. I read it. COVID COVID-19. Yeah, it is an insane time on so many levels,


00:00:54.640 --> 00:00:59.440
But I would say certainly there's a lot of tech people out there who may be


00:00:59.440 --> 00:01:00.960
working from home for the first time.


00:01:00.960 --> 00:01:05.120
You know, I know there's a lot of large companies that feel like you need to go


00:01:05.120 --> 00:01:07.640
to be in the office and you need to do the work.


00:01:07.640 --> 00:01:14.000
And yet a lot of the tools that we use as developers are very suited to the


00:01:14.000 --> 00:01:18.040
situation that many of us around the world find ourselves in working from home,


00:01:18.040 --> 00:01:20.080
working asynchronously and whatnot.


00:01:20.080 --> 00:01:20.440
Right.


00:01:20.960 --> 00:01:25.680
GitHub, Slack, email, Zoom, whatever it is.


00:01:25.680 --> 00:01:28.160
It's interesting to see the rest of the world scale up


00:01:28.160 --> 00:01:30.680
to kind of what we've been doing for a long time.


00:01:30.680 --> 00:01:34.360
- We were lucky that our office was recently moved


00:01:34.360 --> 00:01:38.600
in July, and during the move, we tried to set everybody up


00:01:38.600 --> 00:01:42.920
to be able to remote work because some people


00:01:42.920 --> 00:01:44.880
had longer commutes than before.


00:01:44.880 --> 00:01:47.320
And it happened to be, I mean, it's just fortunate


00:01:47.320 --> 00:01:49.740
that we set that up before this happened.


00:01:49.740 --> 00:01:52.140
And I'm also very fortunate that I'm a software worker.


00:01:52.140 --> 00:01:57.900
There's a lot of people that, I mean, our work can continue for the most part with little


00:01:57.900 --> 00:02:01.260
interruption, but it's a harder environment.


00:02:01.260 --> 00:02:05.420
But a lot of people that are not technical workers can't do that.


00:02:05.420 --> 00:02:06.060
Yeah.


00:02:06.060 --> 00:02:06.860
It's such a bummer.


00:02:06.860 --> 00:02:11.420
You know, my daughter, she just got a new job and she was supposed to start, actually,


00:02:11.420 --> 00:02:14.380
she was supposed to start today and they sent her a message, you know what?


00:02:14.380 --> 00:02:21.020
or closed or closed indefinitely and there's no reason for you to come and get trained to work


00:02:21.020 --> 00:02:25.340
here because who knows what it's going to look like in a month or two. I mean that's the reality


00:02:25.340 --> 00:02:29.740
for a lot of people. It's rough. One of the reasons why we started talking about this this morning is


00:02:29.740 --> 00:02:35.420
just to say you know to reach out to everybody and say yeah hope everybody's doing okay and


00:02:35.420 --> 00:02:41.260
yeah let us know some stories if you want to share. Yeah maybe some interesting tech angles


00:02:41.260 --> 00:02:46.620
right? Like problems you run into or things you found that really worked or whatever. But yeah,


00:02:46.620 --> 00:02:52.460
everyone out there be safe. It's not always fun, but just find a place to hole up and just wait


00:02:52.460 --> 00:02:57.740
this thing out and be safe. Yeah, that's a good idea for some extra things like related to that.


00:02:57.740 --> 00:03:02.540
I'll add one of these, on our add-ons at the end, I'll add one to that.


00:03:02.540 --> 00:03:06.060
All right, super. Well, I want to start out by talking about community.


00:03:06.620 --> 00:03:09.200
I was partly thinking about this because of


00:03:09.200 --> 00:03:11.980
the coronavirus stuff and a lot of people


00:03:11.980 --> 00:03:15.300
possibly have maybe two extra hours in the day,


00:03:15.300 --> 00:03:17.740
because they're not commuting, maybe.


00:03:17.740 --> 00:03:20.000
I'm sorry if you have a two-hour commute


00:03:20.000 --> 00:03:21.600
or an hour commute on each end,


00:03:21.600 --> 00:03:23.780
but you might have some extra time.


00:03:23.780 --> 00:03:26.240
One of the things you might want to share and spend


00:03:26.240 --> 00:03:27.660
some time doing is beefing up


00:03:27.660 --> 00:03:29.940
documentation on open-source projects.


00:03:29.940 --> 00:03:32.040
There actually was a great article called


00:03:32.040 --> 00:03:40.280
documentation as a way to build community by Melissa Mendoza, I think Mendoza, sorry, Melissa,


00:03:40.280 --> 00:03:46.360
but it talks about how educational materials can have a huge impact and, and effectively bring


00:03:46.360 --> 00:03:52.520
people into a community and beefing up the documentation story on open source projects


00:03:52.520 --> 00:03:56.840
can actually help bring more people to use it and help. I mean, it seems obvious, but,


00:03:57.400 --> 00:04:00.040
But it isn't really, and people aren't doing it.


00:04:00.040 --> 00:04:04.040
There's a lot of projects that lack in really good documentation,


00:04:04.040 --> 00:04:05.800
and there's a lot of reasons for that.


00:04:05.800 --> 00:04:08.480
Talking about the reasons, I think it's interesting.


00:04:08.480 --> 00:04:11.960
Decentralized development and a lot of projects


00:04:11.960 --> 00:04:14.680
start with just somebody scratching their own itch,


00:04:14.680 --> 00:04:17.360
and they don't need documentation for that.


00:04:17.360 --> 00:04:20.520
But it grows into other people getting involved.


00:04:20.520 --> 00:04:24.840
A lot of people, it's more glamorous to add new features or fix


00:04:24.840 --> 00:04:28.280
a nasty bug and adding more documentation,


00:04:28.280 --> 00:04:30.360
nobody really knows how to do that.


00:04:30.360 --> 00:04:33.660
I think it's important and spending some more focus.


00:04:33.660 --> 00:04:36.400
One of the directions of this article says,


00:04:36.400 --> 00:04:38.260
it was targeting a specific project,


00:04:38.260 --> 00:04:41.660
but I think it really can be really more than just this one,


00:04:41.660 --> 00:04:44.340
is splitting up the documentation


00:04:44.340 --> 00:04:47.900
into organizing it in four different areas;


00:04:47.900 --> 00:04:51.840
tutorials, how-tos, reference guides, and explanations.


00:04:51.840 --> 00:04:55.120
these four areas and subsections of those


00:04:55.120 --> 00:04:56.960
can be targeted towards different people,


00:04:56.960 --> 00:04:59.600
targeted towards beginners or advanced people,


00:04:59.600 --> 00:05:01.440
or somebody just looking something up.


00:05:01.440 --> 00:05:03.880
One of the great things about that is it makes it


00:05:03.880 --> 00:05:05.880
easier for somebody to jump in and say,


00:05:05.880 --> 00:05:08.700
"Oh, there's one little piece of things,


00:05:08.700 --> 00:05:10.220
how to do something,


00:05:10.220 --> 00:05:11.680
I can contribute to that.


00:05:11.680 --> 00:05:13.460
I might not know why it works,


00:05:13.460 --> 00:05:16.680
but I can contribute to how to in some tutorials."


00:05:16.680 --> 00:05:19.040
Whereas maybe some of the more expert people in


00:05:19.040 --> 00:05:20.120
the project can do some of


00:05:20.120 --> 00:05:22.400
the explanations of how things are working.


00:05:22.400 --> 00:05:25.320
Also, a lot of teams shift,


00:05:25.320 --> 00:05:28.320
or some projects have the new people come in and say,


00:05:28.320 --> 00:05:29.160
"Hey, you want to help out?


00:05:29.160 --> 00:05:30.640
Why don't you write documentation?"


00:05:30.640 --> 00:05:32.220
I think that's a great thing.


00:05:32.220 --> 00:05:34.960
But then you've got documentation that's just filled with


00:05:34.960 --> 00:05:37.920
the beginner people that content from beginners that


00:05:37.920 --> 00:05:41.440
might not be from some of the experienced people.


00:05:41.440 --> 00:05:43.280
I think there's some good information here,


00:05:43.280 --> 00:05:46.520
and I think focusing on documentation might be a good thing.


00:05:46.520 --> 00:05:48.800
>> I like the article. I like the idea of it,


00:05:48.800 --> 00:05:51.560
right, that you can build a community.


00:05:51.560 --> 00:05:54.440
Certainly you can contribute to these projects


00:05:54.440 --> 00:05:56.000
quite easily in this way.


00:05:56.000 --> 00:05:58.680
Breaking it up into these categories is really clever


00:05:58.680 --> 00:06:00.920
because then you can definitely,


00:06:00.920 --> 00:06:02.120
just sit down and think,


00:06:02.120 --> 00:06:03.900
oh, I'm gonna write some docs for this thing.


00:06:03.900 --> 00:06:05.280
Well, that's pretty wide open, right?


00:06:05.280 --> 00:06:07.560
But I'm gonna write a short tutorial,


00:06:07.560 --> 00:06:09.640
which I had to learn because I had to use this thing


00:06:09.640 --> 00:06:10.660
and now I know how to do that.


00:06:10.660 --> 00:06:12.720
Why don't I generalize it and make a tutorial?


00:06:12.720 --> 00:06:13.840
That seems like a really easy way


00:06:13.840 --> 00:06:16.300
to get yourself on the contributor list,


00:06:16.300 --> 00:06:19.780
beef up your resume, say I contributed to this project,


00:06:19.780 --> 00:06:20.700
et cetera, I think it's good.


00:06:20.700 --> 00:06:22.420
- One of the things I'd like to reach out to people,


00:06:22.420 --> 00:06:25.180
some of the beginner stuff, a great thing to do


00:06:25.180 --> 00:06:27.220
is while you're learning a project,


00:06:27.220 --> 00:06:29.140
isn't writing new content,


00:06:29.140 --> 00:06:32.200
but while you're reading documentation on a project,


00:06:32.200 --> 00:06:36.200
if there's typos, if there's just grammar errors,


00:06:36.200 --> 00:06:37.500
it may have been written by somebody


00:06:37.500 --> 00:06:39.600
that isn't native English, so you can help out


00:06:39.600 --> 00:06:42.180
by just fixing some of those things.


00:06:42.180 --> 00:06:44.220
And then also, while you're going through things,


00:06:44.220 --> 00:06:46.940
If you stumble on something and it's difficult


00:06:46.940 --> 00:06:48.700
to follow the instructions,


00:06:48.700 --> 00:06:51.180
it might be that the instructions need to be modified.


00:06:51.180 --> 00:06:53.500
And why not just do like a pull request


00:06:53.500 --> 00:06:54.860
of modifying those instructions


00:06:54.860 --> 00:06:57.100
to be the way it really works.


00:06:57.100 --> 00:06:58.700
And I think that'd be cool.


00:06:58.700 --> 00:06:59.620
- Yeah, that'd be great.


00:06:59.620 --> 00:07:01.380
You know, another area that might be interesting


00:07:01.380 --> 00:07:02.460
is to write tests.


00:07:02.460 --> 00:07:03.300
- Yeah, definitely.


00:07:03.300 --> 00:07:04.860
- A lot of projects lack tests


00:07:04.860 --> 00:07:08.140
or they're just marginally tested


00:07:08.140 --> 00:07:09.540
and you're like, well, okay,


00:07:09.540 --> 00:07:10.780
I'm gonna create this tutorial


00:07:10.780 --> 00:07:13.020
and I wanna make sure the things I'm saying work.


00:07:13.020 --> 00:07:16.660
So let me add some tests to verify what I believe to be true,


00:07:16.660 --> 00:07:18.740
to be true and go ahead and commit that back to the project.


00:07:18.740 --> 00:07:20.500
- Yeah, and modifying tests,


00:07:20.500 --> 00:07:22.380
if the tests are not readable, they should be.


00:07:22.380 --> 00:07:23.900
And maybe you can make them more readable.


00:07:23.900 --> 00:07:25.960
- Yeah, I guess I kind of started thinking about that


00:07:25.960 --> 00:07:29.460
because documentation and like tests feel a little bit like


00:07:29.460 --> 00:07:30.900
a form of documentation.


00:07:30.900 --> 00:07:32.420
- Yeah, definitely.


00:07:32.420 --> 00:07:33.340
- Yeah.


00:07:33.340 --> 00:07:34.160
Well, cool.


00:07:34.160 --> 00:07:37.220
Well, I'm pretty passionate about fast websites.


00:07:37.220 --> 00:07:38.060
As you probably know,


00:07:38.060 --> 00:07:41.300
I talk about trying to make websites fast all the time.


00:07:41.300 --> 00:07:42.420
Our website's pretty fast.


00:07:42.420 --> 00:07:45.820
Speed is important to slow websites strong,


00:07:45.820 --> 00:07:46.660
push people away.


00:07:46.660 --> 00:07:47.480
- They do.


00:07:47.480 --> 00:07:49.740
I think it was Amazon or somebody did a study saying


00:07:49.740 --> 00:07:53.860
like every, you know, 100 milliseconds latency


00:07:53.860 --> 00:07:56.540
of perceived latency to the user.


00:07:56.540 --> 00:07:58.440
And you know, it has a very tangible,


00:07:58.440 --> 00:08:02.420
like whole number percentage drop in actual sales.


00:08:02.420 --> 00:08:03.260
- Yikes.


00:08:03.260 --> 00:08:05.180
- Yeah, sales are not the most important thing necessarily.


00:08:05.180 --> 00:08:06.420
Maybe if you're Amazon, they are,


00:08:06.420 --> 00:08:08.820
but it's just gives you a sense of like,


00:08:08.820 --> 00:08:09.820
well, 100 milliseconds,


00:08:09.820 --> 00:08:11.660
you can barely perceive that as a person.


00:08:11.660 --> 00:08:13.840
And yet as those things add up, right,


00:08:13.840 --> 00:08:16.240
it starts to really make a difference in behavior.


00:08:16.240 --> 00:08:18.320
So I want to talk about this article,


00:08:18.320 --> 00:08:21.160
sort of riff on some topics covered in the article,


00:08:21.160 --> 00:08:23.880
more or less, called "The Django Speed Handbook,


00:08:23.880 --> 00:08:28.240
"Making a Django App Faster" by Shabell Mansour.


00:08:28.240 --> 00:08:30.720
Now, the title has Django,


00:08:30.720 --> 00:08:33.120
and some of the examples are really about Django,


00:08:33.120 --> 00:08:35.960
but this actually applies to most websites


00:08:35.960 --> 00:08:38.280
and Python websites and whatnot.


00:08:38.280 --> 00:08:39.840
So if you do Flask,


00:08:39.840 --> 00:08:42.560
I think that's still be super, super relevant.


00:08:42.560 --> 00:08:44.720
The first thing though that I want to point out


00:08:44.720 --> 00:08:46.380
is actually a Django thing.


00:08:46.380 --> 00:08:49.360
And it does appear at least in Pyramid as well.


00:08:49.360 --> 00:08:50.900
So there's this, in Django,


00:08:50.900 --> 00:08:53.900
there's a thing called the Django debug toolbar.


00:08:53.900 --> 00:08:56.520
And it lets you explore the different requests,


00:08:56.520 --> 00:08:58.120
see how long they're taking.


00:08:58.120 --> 00:09:01.820
You can even get in there and look at the ORM calls


00:09:01.820 --> 00:09:02.840
and what's happening.


00:09:02.840 --> 00:09:04.080
So that's pretty awesome.


00:09:04.080 --> 00:09:05.840
Like Pyramid has this as well.


00:09:05.840 --> 00:09:07.700
You can actually see the SQL alchemy calls


00:09:07.700 --> 00:09:09.680
going to the database and the timing


00:09:09.680 --> 00:09:13.240
and how many database queries there even are on a given page.


00:09:13.240 --> 00:09:17.120
It's pretty ridiculous to be able to use that to analyze what you're--


00:09:17.120 --> 00:09:21.520
it's almost like you've attached a little debugger or profiler all the time,


00:09:21.520 --> 00:09:22.600
and it's just right there.


00:09:22.600 --> 00:09:23.360
That's cool.


00:09:23.360 --> 00:09:24.720
Do you have to turn it off, then?


00:09:24.720 --> 00:09:27.760
Well, when you go into production, you don't include it in the setting,


00:09:27.760 --> 00:09:30.880
like the run settings for production, obviously, right?


00:09:30.880 --> 00:09:31.760
That would be bad.


00:09:31.760 --> 00:09:35.440
But some of those settings, even in the debug mode, you have to turn them on.


00:09:35.440 --> 00:09:38.280
I'm not sure about the Django one, but the pyramid one, you definitely--


00:09:38.280 --> 00:09:40.880
like the profiler's not on by default


00:09:40.880 --> 00:09:42.480
because that'll slow it down a little bit.


00:09:42.480 --> 00:09:45.080
But you can click a box and then go do the request again.


00:09:45.080 --> 00:09:47.080
All right, so that's a real quick and easy way


00:09:47.080 --> 00:09:49.160
just to see what your app is up to.


00:09:49.160 --> 00:09:51.920
Then one of the things you really wanna pay attention to,


00:09:51.920 --> 00:09:54.400
and this is gonna be a bit of a theme on today's show,


00:09:54.400 --> 00:09:56.360
is talking to databases.


00:09:56.360 --> 00:09:58.280
So when you're working with an ORM


00:09:58.280 --> 00:09:59.880
or just talking to the database,


00:09:59.880 --> 00:10:01.880
specifically here, the Django ORM,


00:10:01.880 --> 00:10:05.640
but this is super relevant for SQLAlchemy as well,


00:10:05.640 --> 00:10:12.220
is you want to be really careful of the so-called n plus one problem, which


00:10:12.220 --> 00:10:14.100
happens when you navigate relationships.


00:10:14.100 --> 00:10:20.040
So for example, if I have, let's say a category, I'm going to show a category


00:10:20.040 --> 00:10:26.480
of books and the category has a books relationship, or maybe there's some


00:10:26.480 --> 00:10:29.280
other thing like that, I get all the categories back and I want to tell you


00:10:29.280 --> 00:10:30.720
how many books are in each one or something.


00:10:30.940 --> 00:10:33.820
Like as you go through the things that come back,


00:10:33.820 --> 00:10:37.820
you end up doing one query for each property


00:10:37.820 --> 00:10:39.740
that you access on each instance of that object.


00:10:39.740 --> 00:10:42.340
So if you do a query that returns 20 things,


00:10:42.340 --> 00:10:44.900
you might end up talking to the database 21 times.


00:10:44.900 --> 00:10:47.500
It's a common problem in ORMs,


00:10:47.500 --> 00:10:49.580
but it also has an easy fix,


00:10:49.580 --> 00:10:51.220
which is why that debug toolbar is cool,


00:10:51.220 --> 00:10:52.260
'cause you could turn it up and say,


00:10:52.260 --> 00:10:53.100
well, turn it on and say,


00:10:53.100 --> 00:10:55.620
oh look, why are there 24 queries on this page, right?


00:10:55.620 --> 00:10:57.860
I feel like I did one, like, well, sort of.


00:10:57.860 --> 00:11:02.860
So you can use select rated, related and prefetch related


00:11:02.860 --> 00:11:06.940
and it'll basically join or pre-query


00:11:06.940 --> 00:11:10.240
those related objects together in one massive query.


00:11:10.240 --> 00:11:12.160
So you don't actually go back to the database


00:11:12.160 --> 00:11:13.140
N plus one times.


00:11:13.140 --> 00:11:13.960
- Okay, nice.


00:11:13.960 --> 00:11:14.840
- Yeah, and that's a big deal.


00:11:14.840 --> 00:11:18.180
And, you know, SQLAlchemy has a joined load and sub query


00:11:18.180 --> 00:11:20.020
that you can basically accomplish the same thing.


00:11:20.020 --> 00:11:22.580
So he's got a cool example of not a huge database,


00:11:22.580 --> 00:11:26.500
but using these two properties in the Django RM,


00:11:26.500 --> 00:11:28.820
going 24 times faster.


00:11:28.820 --> 00:11:29.660
- Oh wow, yeah.


00:11:29.660 --> 00:11:32.060
- Right, I mean it's basically not changing the code at all


00:11:32.060 --> 00:11:35.260
except saying, you know I'm gonna use this related property


00:11:35.260 --> 00:11:37.740
so just query that as part of the query


00:11:37.740 --> 00:11:38.940
instead of like doing 20, you know,


00:11:38.940 --> 00:11:40.980
however many queries you're going back for.


00:11:40.980 --> 00:11:41.980
Really, really nice.


00:11:41.980 --> 00:11:44.320
Related to that is indexes.


00:11:44.320 --> 00:11:47.860
So if you're not thinking about and using indexes,


00:11:47.860 --> 00:11:48.700
you should be.


00:11:48.700 --> 00:11:51.100
I mean that's like easily a thousand times faster


00:11:51.100 --> 00:11:53.300
to do a query against a lot of data


00:11:53.300 --> 00:11:55.120
with an index versus without.


00:11:55.120 --> 00:11:56.180
And then if you've got these joins,


00:11:56.180 --> 00:11:57.940
it's even better, you know.


00:11:57.940 --> 00:11:59.940
So, super important, but do be aware


00:11:59.940 --> 00:12:03.220
that indexes make writes slower.


00:12:03.220 --> 00:12:06.380
So, if you have, not, most websites


00:12:06.380 --> 00:12:10.820
don't write data like crazy, although some APIs do.


00:12:10.820 --> 00:12:12.780
So, it's usually not as big of a problem,


00:12:12.780 --> 00:12:15.580
but just be aware that writes are slow,


00:12:15.580 --> 00:12:18.220
slower with indexes, but queries are much, much faster.


00:12:18.220 --> 00:12:20.880
Another thing they talk about, which is really helpful,


00:12:20.880 --> 00:12:22.980
is using pagination, pagination,


00:12:22.980 --> 00:12:25.060
where instead of saying, here's 1,000 items,


00:12:25.060 --> 00:12:29.260
here's 50 and you can ask for the next 50 and the next 50 and so on.


00:12:29.260 --> 00:12:30.820
That's super easy to do with


00:12:30.820 --> 00:12:32.980
Django ORM or SQLAlchemy or anything like that.


00:12:32.980 --> 00:12:34.260
So that's a really good one.


00:12:34.260 --> 00:12:37.040
>> So does that often line up with like if you're showing,


00:12:37.040 --> 00:12:39.380
like if your page only shows 50 things,


00:12:39.380 --> 00:12:40.860
only fetch 50 things then?


00:12:40.860 --> 00:12:42.740
>> Yeah, exactly. It's super easy to put in


00:12:42.740 --> 00:12:45.660
the query string like page equals five.


00:12:45.660 --> 00:12:50.260
Then you just do a skip and a limit or


00:12:50.260 --> 00:12:54.540
or whatever the ORM using has like for the skip and take


00:12:54.540 --> 00:12:55.380
type of thing, right?


00:12:55.380 --> 00:12:57.740
So it's super easy, you can compute it yourself,


00:12:57.740 --> 00:12:59.700
but it makes a big difference, right?


00:12:59.700 --> 00:13:03.440
Also, if you have long running tasks,


00:13:03.440 --> 00:13:05.340
long running things to do,


00:13:05.340 --> 00:13:07.100
make them either background tasks


00:13:07.100 --> 00:13:10.300
and like extra other processes or celery or something,


00:13:10.300 --> 00:13:13.300
or just use, if the person making the call


00:13:13.300 --> 00:13:16.300
has to wait on it, be sure to use async, right?


00:13:16.300 --> 00:13:18.940
So you're not blocking up everything.


00:13:18.940 --> 00:13:21.220
Another super easy way to make things fast,


00:13:21.220 --> 00:13:23.860
and many of these things we're doing at Pythonbytes.fm


00:13:23.860 --> 00:13:28.780
and the other websites, is to turn on gzip.


00:13:28.780 --> 00:13:30.820
So you can just go to like NGINX


00:13:30.820 --> 00:13:35.260
or whatever your web server is and say gzip the response.


00:13:35.260 --> 00:13:36.700
He's got a really simple example here


00:13:36.700 --> 00:13:40.580
where the response size of the page and the CSS and whatnot


00:13:40.580 --> 00:13:43.100
is nine times smaller by just adding


00:13:43.100 --> 00:13:46.060
the gzip middleware to Django.


00:13:46.060 --> 00:13:48.900
I wouldn't actually add it to Django if this was me.


00:13:48.900 --> 00:13:50.560
I would add it to Nginx,


00:13:50.560 --> 00:13:53.380
'cause that's the outer shell web server.


00:13:53.380 --> 00:13:54.500
Just let it do it.


00:13:54.500 --> 00:13:55.960
And you don't have to,


00:13:55.960 --> 00:13:57.540
you're probably not talking directly


00:13:57.540 --> 00:13:58.740
to the server running Django.


00:13:58.740 --> 00:14:00.980
But anyway, somewhere along the way,


00:14:00.980 --> 00:14:03.740
gzip your content, 'cause that'll be big.


00:14:03.740 --> 00:14:06.820
Similarly, minify your static files,


00:14:06.820 --> 00:14:08.840
and bundle them, and cache them,


00:14:08.840 --> 00:14:11.180
and all of those good things, right?


00:14:11.180 --> 00:14:14.420
There's some cool libraries that he talked about in there.


00:14:14.420 --> 00:14:16.420
I think it was called Whitespace.


00:14:16.420 --> 00:14:17.900
I'm pretty sure it's called Whitespace.


00:14:17.900 --> 00:14:22.540
that they're using in Django to minify and bundle the files.


00:14:22.540 --> 00:14:25.400
So we don't use Whitespace, and we don't use Django.


00:14:25.400 --> 00:14:28.740
We use WebAssets and CSSmin and JSmin,


00:14:28.740 --> 00:14:31.340
which are three awesome Python libraries to bundle that.


00:14:31.340 --> 00:14:34.600
So if you go and look at Python Bytes or Talk Python


00:14:34.600 --> 00:14:36.980
or any of those sites, you can see that there's


00:14:36.980 --> 00:14:39.540
like a packed CSS and a packed JavaScript


00:14:39.540 --> 00:14:43.700
that has probably 20 CSS files that's smushed into one


00:14:43.700 --> 00:14:46.420
with those things and minified and whatnot.


00:14:46.420 --> 00:14:47.500
So that's pretty cool.


00:14:47.500 --> 00:14:49.860
There's two ways to measure page performance.


00:14:49.860 --> 00:14:53.140
One is like how fast is the server responding, right?


00:14:53.140 --> 00:14:56.280
But that's not the most important thing to the user.


00:14:56.280 --> 00:14:58.360
The most important thing is how does it feel to them.


00:14:58.360 --> 00:15:00.660
So Google has this thing called PageSpeed,


00:15:00.660 --> 00:15:04.420
which they're even using for measuring your SEO ranking.


00:15:04.420 --> 00:15:05.980
So put your website into there.


00:15:05.980 --> 00:15:09.580
I have a link for Talk Python Trainings ranking.


00:15:09.580 --> 00:15:12.440
I spent three days straight getting it


00:15:12.440 --> 00:15:17.440
from like 40 out of 100 to 99 or 100 out of 100.


00:15:17.440 --> 00:15:19.320
But it was quite the journey.


00:15:19.320 --> 00:15:21.380
So that took a while.


00:15:21.380 --> 00:15:24.040
You can both measure it for mobile and desktop.


00:15:24.040 --> 00:15:25.880
And it has slightly different rankings.


00:15:25.880 --> 00:15:30.160
Also, shrink your images with ImageOptim,


00:15:30.160 --> 00:15:32.560
which works for Mac OS and Linux.


00:15:32.560 --> 00:15:33.600
It doesn't work on Windows.


00:15:33.600 --> 00:15:35.280
But there's some really great options there.


00:15:35.280 --> 00:15:38.560
And it'll basically do completely lossless compression


00:15:38.560 --> 00:15:39.640
of your images.


00:15:39.640 --> 00:15:42.240
So they might be like 40 or 50% smaller.


00:15:42.240 --> 00:15:45.040
And visually, you literally couldn't distinguish them.


00:15:45.040 --> 00:15:46.040
- Interesting, yeah.


00:15:46.040 --> 00:15:46.880
- Yeah.


00:15:46.880 --> 00:15:51.200
And last recommendation is lazy load your images.


00:15:51.200 --> 00:15:57.000
This is not something I've really explored, but apparently Google Chrome images now support


00:15:57.000 --> 00:15:58.000
a lazy attribute.


00:15:58.000 --> 00:15:59.000
Oh, nice.


00:15:59.000 --> 00:16:00.000
Yeah.


00:16:00.000 --> 00:16:03.280
And then for things that don't support it, there's a lazy load JavaScript library.


00:16:03.280 --> 00:16:07.860
Basically your images, you say, here's as it scrolls into view, it'll download them.


00:16:07.860 --> 00:16:10.720
But if it's off the page and you never scrolled and it'll never load it.


00:16:10.720 --> 00:16:11.720
That's great.


00:16:11.720 --> 00:16:12.720
Yeah, pretty clever.


00:16:12.720 --> 00:16:15.000
So this is just some of the things covered in that article.


00:16:15.000 --> 00:16:19.040
So if you're out there and you're like, I need to get my site to go faster, it cannot


00:16:19.040 --> 00:16:21.180
be three seconds per page load.


00:16:21.180 --> 00:16:22.180
That's ridiculous.


00:16:22.180 --> 00:16:23.760
Like start looking through some of these things.


00:16:23.760 --> 00:16:25.760
It'll really help, especially if you're using Django.


00:16:25.760 --> 00:16:29.840
But even if you're using some other Python framework, I think it'll still be quite relevant.


00:16:29.840 --> 00:16:32.280
Yeah, most of these are relevant to any web stuff.


00:16:32.280 --> 00:16:34.200
Yeah, yeah, they're super, super general.


00:16:34.200 --> 00:16:36.560
Like some of the libraries they talk about plug into Django.


00:16:36.560 --> 00:16:38.720
So it's kind of a little extra boost if you're doing Django.


00:16:38.720 --> 00:16:40.040
But yeah, this is relevant to everyone.


00:16:40.040 --> 00:16:41.040
Yeah.


00:16:41.040 --> 00:16:42.040
All right, what do you got next?


00:16:42.040 --> 00:16:45.800
into as a listener's suggestion from the author of the library.


00:16:45.800 --> 00:16:47.800
So this is like JIT podcasting, right?


00:16:47.800 --> 00:16:53.800
Yeah, it just came in this morning and I love it. It's from Conrad Hallas, I think. It's called


00:16:53.800 --> 00:17:01.480
D-A-C-I-T-E, maybe D-C-I-T, D-C-I-T, D-C-I-T, I don't know. But it's cool. It simplifies the


00:17:01.480 --> 00:17:06.360
creation of data classes from dictionaries. So when I first heard it, I'm thinking, okay, well,


00:17:06.360 --> 00:17:10.920
I love to, I'm using data classes like all the time now because I really like them. There's a


00:17:10.920 --> 00:17:12.360
a lot of cool aspects of them.


00:17:12.360 --> 00:17:14.280
You can have default values.


00:17:14.280 --> 00:17:18.920
I really like that I can easily exclude some of the fields.


00:17:18.920 --> 00:17:21.160
You can take them out of the comparison.


00:17:21.160 --> 00:17:24.280
So some objects can be equal, even if they're not


00:17:24.280 --> 00:17:26.360
completely equal sort of thing.


00:17:26.360 --> 00:17:28.160
And I love that aspect.


00:17:28.160 --> 00:17:30.520
And there's a whole bunch of other cool stuff about them.


00:17:30.520 --> 00:17:32.240
So I'm using it more and more.


00:17:32.240 --> 00:17:36.080
But our data all over us that we get from databases


00:17:36.080 --> 00:17:39.080
and whatever, it often gets converted to dictionaries


00:17:39.080 --> 00:17:40.280
and not to data classes.


00:17:40.280 --> 00:17:43.680
So this is a little library that has basically


00:17:43.680 --> 00:17:45.920
it's one function called fromDict


00:17:45.920 --> 00:17:48.880
that converts dictionaries to data classes.


00:17:48.880 --> 00:17:51.720
And my first reaction was, I can already do that.


00:17:51.720 --> 00:17:55.920
If you do the star star or the double splat.


00:17:55.920 --> 00:17:58.740
- Dictionary to keyword argument type of thing.


00:17:58.740 --> 00:18:01.760
- Yeah, I mean, you can do that for simple data classes


00:18:01.760 --> 00:18:05.060
and simple dictionaries, that works just fine.


00:18:05.060 --> 00:18:09.700
But I looked into this more and this fromDict from Desight,


00:18:09.700 --> 00:18:11.580
It allows you to do nested structures.


00:18:11.580 --> 00:18:15.140
So you can have a data class with another data class field


00:18:15.140 --> 00:18:18.860
and arrays of lists or tuples of data classes


00:18:18.860 --> 00:18:20.520
and as some of the types.


00:18:20.520 --> 00:18:24.740
You can do unions in their collections, nested structures.


00:18:24.740 --> 00:18:27.300
It even has this thing called type hooks,


00:18:27.300 --> 00:18:30.160
which allows you to have a custom converter


00:18:30.160 --> 00:18:33.100
for certain types of data that come in.


00:18:33.100 --> 00:18:35.220
So his example is like,


00:18:35.220 --> 00:18:38.560
for all the strings, lowercase them or something like that.


00:18:38.560 --> 00:18:41.360
But you can definitely have that for certain types.


00:18:41.360 --> 00:18:42.080
It's pretty neat.


00:18:42.080 --> 00:18:42.880
Oh, that's cool.


00:18:42.880 --> 00:18:45.640
Or if you've got some kind of string that's a date time,


00:18:45.640 --> 00:18:48.400
you parse it out of an ISO string or whatever.


00:18:48.400 --> 00:18:50.080
Yeah, that's a good example, actually.


00:18:50.080 --> 00:18:50.960
That's cool.


00:18:50.960 --> 00:18:54.680
So one of the things that messes you up on my example


00:18:54.680 --> 00:18:58.300
of just taking a dictionary and expanding it as arguments


00:18:58.300 --> 00:19:02.160
to a data class constructor is that it doesn't really


00:19:02.160 --> 00:19:04.840
work if all the names don't match up.


00:19:04.840 --> 00:19:07.500
but this one allows you to have,


00:19:07.500 --> 00:19:09.860
if your data class only has a few fields,


00:19:09.860 --> 00:19:12.740
but your dictionary has like tons of stuff in there,


00:19:12.740 --> 00:19:15.840
by default it just ignores the stuff that doesn't match up.


00:19:15.840 --> 00:19:18.780
And so if you've got like a name and an ID,


00:19:18.780 --> 00:19:21.300
and there's names and IDs coming from the dictionary,


00:19:21.300 --> 00:19:23.220
but there's also like a whole bunch of other things


00:19:23.220 --> 00:19:27.080
like a URL and stuff like that, it just ignores that.


00:19:27.080 --> 00:19:27.920
That's the default,


00:19:27.920 --> 00:19:30.020
but you can also turn on strict mode that says,


00:19:30.020 --> 00:19:33.420
no, I expect it to match up directly and I want a warning.


00:19:33.420 --> 00:19:35.180
And then there's a whole bunch of exceptions


00:19:35.180 --> 00:19:37.900
that get raised if something goes wrong in the conversion.


00:19:37.900 --> 00:19:39.980
And I'm just excited to use this


00:19:39.980 --> 00:19:41.700
'cause it's a really cool tool


00:19:41.700 --> 00:19:44.340
to convert data to data classes.


00:19:44.340 --> 00:19:45.180
It's nice.


00:19:45.180 --> 00:19:46.300
- Yeah, this looks super nice.


00:19:46.300 --> 00:19:49.580
It's one of those things that seems to automate


00:19:49.580 --> 00:19:51.960
like the crummy part of programming, right?


00:19:51.960 --> 00:19:55.740
Like I'm getting this data submitted to me from an API


00:19:55.740 --> 00:19:57.540
or from somebody calling my API


00:19:57.540 --> 00:19:59.180
and who knows what they're sending me.


00:19:59.180 --> 00:20:02.300
But here's how, like, long as this thing lines up right,


00:20:02.300 --> 00:20:04.100
I tell it these fields are not optional,


00:20:04.100 --> 00:20:06.060
or this type has to be such and such.


00:20:06.060 --> 00:20:07.300
If that works, then we're good.


00:20:07.300 --> 00:20:09.540
Otherwise, tell them 400, that didn't work,


00:20:09.540 --> 00:20:11.660
or the file couldn't be loaded, or whatever it is.


00:20:11.660 --> 00:20:13.260
And there's definitely-- so Conrad


00:20:13.260 --> 00:20:15.020
made a point in the documentation


00:20:15.020 --> 00:20:18.980
to say that it is not a schema validation library.


00:20:18.980 --> 00:20:20.580
That's not the intent of it.


00:20:20.580 --> 00:20:23.620
It is really just intended for the conversion.


00:20:23.620 --> 00:20:25.900
So especially with external APIs,


00:20:25.900 --> 00:20:29.620
I think combining this with a schema validation


00:20:29.620 --> 00:20:31.500
is a good idea.


00:20:31.500 --> 00:20:34.860
But you could definitely go from schema validation to this


00:20:34.860 --> 00:20:36.260
and have data classes in the end.


00:20:36.260 --> 00:20:36.780
It'd be great.


00:20:36.780 --> 00:20:38.100
Yeah, it's a cool project.


00:20:38.100 --> 00:20:40.740
And I love how it leverages the brand new Python stuff,


00:20:40.740 --> 00:20:42.020
the data classes.


00:20:42.020 --> 00:20:44.900
Anyway, we should plug ourselves as sponsors.


00:20:44.900 --> 00:20:47.580
Yeah.


00:20:47.580 --> 00:20:48.740
Well, we should definitely let people


00:20:48.740 --> 00:20:50.200
know about what we're doing, right?


00:20:50.200 --> 00:20:53.060
So you've got this book on testing or something?


00:20:53.060 --> 00:20:55.620
I actually kind of love that I had some feedback early


00:20:55.620 --> 00:20:58.180
on when the book came out.


00:20:58.180 --> 00:21:00.540
Python Testing with pytest is the book


00:21:00.540 --> 00:21:01.540
that I'm talking about.


00:21:01.540 --> 00:21:04.540
And it did come out in 2017, the end of 2017.


00:21:04.540 --> 00:21:08.260
And I got some really great feedback from people saying they really loved following


00:21:08.260 --> 00:21:10.040
the book on this podcast.


00:21:10.040 --> 00:21:14.340
And I apologize for the lawnmower in the background, if it goes through.


00:21:14.340 --> 00:21:19.860
I wanted to point out that I had a couple of people ask me, it came out in 2017, is


00:21:19.860 --> 00:21:21.140
it still valid?


00:21:21.140 --> 00:21:24.380
And I want to take the time to say yes, it is.


00:21:24.380 --> 00:21:29.100
The intent of the book was never to be a thorough, complete inventory of everything you can do


00:21:29.100 --> 00:21:30.340
with pytest.


00:21:30.340 --> 00:21:35.860
It was a quick, what are the 80% of pytests that you're going to use all the time?


00:21:35.860 --> 00:21:39.240
And that is the core of pytest and how to think about it.


00:21:39.240 --> 00:21:44.500
There is new goodies that have been added since 2017, and it's good to check those out.


00:21:44.500 --> 00:21:47.900
But you could run with what's in this book and still be very productive.


00:21:47.900 --> 00:21:48.900
Nice.


00:21:48.900 --> 00:21:51.580
It's definitely made me more productive and better with pytest.


00:21:51.580 --> 00:21:52.580
So it's great.


00:21:52.580 --> 00:21:53.580
Thank you.


00:21:53.580 --> 00:21:54.580
Yeah, you bet.


00:21:54.580 --> 00:21:57.580
I also want to tell people about the courses that we have over at Talk Python Training.


00:21:57.580 --> 00:21:59.580
We've got a bunch of new ones we've been releasing.


00:21:59.580 --> 00:22:01.340
I do try to let you know when the new ones are out,


00:22:01.340 --> 00:22:06.340
but we've got like 120 hours of Python content over there


00:22:06.340 --> 00:22:08.100
on a bunch of projects that you can do.


00:22:08.100 --> 00:22:11.100
The 100 Days of Code courses all have like projects


00:22:11.100 --> 00:22:13.440
for every single day for 100 days.


00:22:13.440 --> 00:22:15.400
And yeah, so just check them out.


00:22:15.400 --> 00:22:18.300
We're gonna release a couple new courses coming soon


00:22:18.300 --> 00:22:19.840
and I'll be sure to let you know.


00:22:19.840 --> 00:22:22.860
But yeah, support us by checking out our work, right?


00:22:22.860 --> 00:22:24.880
- Yeah, I wanna tell people one of the things I love


00:22:24.880 --> 00:22:27.260
about the Talk Python courses is


00:22:27.260 --> 00:22:28.620
there's a lot of content there


00:22:28.620 --> 00:22:32.380
and I'm a busy person and sometimes it's overwhelming to me


00:22:32.380 --> 00:22:35.140
to look at a course to say it's like 12 hours of content


00:22:35.140 --> 00:22:36.780
on a course or something like that,


00:22:36.780 --> 00:22:38.500
six hours or something even.


00:22:38.500 --> 00:22:41.900
And however, the way that you've got it set up


00:22:41.900 --> 00:22:46.500
with bookmarks into separate videos and different topics,


00:22:46.500 --> 00:22:48.940
it's the outline of the courses are so incredible


00:22:48.940 --> 00:22:52.040
that if you really need to just jump to the right place


00:22:52.040 --> 00:22:54.020
to learn something, you can do that.


00:22:54.020 --> 00:22:57.220
And even though you can just watch them in series


00:22:57.220 --> 00:22:59.700
and just watch the whole thing, you can do that, of course.


00:22:59.700 --> 00:23:02.940
But being able to jump around and go back


00:23:02.940 --> 00:23:05.140
and use it as a reference is a great thing.


00:23:05.140 --> 00:23:05.980
So thanks.


00:23:05.980 --> 00:23:06.800
- Yeah, thanks.


00:23:06.800 --> 00:23:08.860
Yeah, we definitely work hard on making that a possibility.


00:23:08.860 --> 00:23:10.780
So I appreciate that.


00:23:10.780 --> 00:23:13.940
Now, do you know what the Python clock reads right now?


00:23:13.940 --> 00:23:14.940
- Oh, I haven't checked.


00:23:14.940 --> 00:23:16.020
What does it read?


00:23:16.020 --> 00:23:20.540
- It reads zero, zero, zero, zero, zero, zero.


00:23:20.540 --> 00:23:25.540
It's the Python clock has, clock bell has told


00:23:25.620 --> 00:23:28.120
for the folks who have to convert.


00:23:28.120 --> 00:23:30.100
This next thing I wanna share with everyone


00:23:30.100 --> 00:23:32.740
comes from LinkedIn and Barry Warsaw.


00:23:32.740 --> 00:23:35.900
Barry's been part of Python for a very long time,


00:23:35.900 --> 00:23:37.560
doing a lot of cool stuff there.


00:23:37.560 --> 00:23:40.660
And he was on the team that helped LinkedIn


00:23:40.660 --> 00:23:43.420
move from legacy Python to modern Python.


00:23:43.420 --> 00:23:44.260
- Okay.


00:23:44.260 --> 00:23:46.300
- Yeah, so it's called How We Retired Python 2


00:23:46.300 --> 00:23:49.180
and Improved Developer Happiness.


00:23:49.180 --> 00:23:51.900
So a couple years ago, 2018,


00:23:51.900 --> 00:23:56.180
LinkedIn started working on this multi-quarter effort


00:23:56.180 --> 00:23:58.700
to transition to Python 3.


00:23:58.700 --> 00:24:00.780
So maybe some of the lessons from here


00:24:00.780 --> 00:24:03.260
will help people out there


00:24:03.260 --> 00:24:05.060
for whom they haven't actually migrated


00:24:05.060 --> 00:24:06.380
all the way to Python 3.


00:24:06.380 --> 00:24:07.340
That'd be good, right?


00:24:07.340 --> 00:24:09.420
So basically they said,


00:24:09.420 --> 00:24:11.380
they did a inventory and they found


00:24:11.380 --> 00:24:16.380
they have 550 code repositories they had to migrate.


00:24:16.380 --> 00:24:18.780
That's a lot of different projects.


00:24:18.780 --> 00:24:21.100
And some of them depend on the others.


00:24:21.100 --> 00:24:27.020
So they said, look, Python is not the thing powering our main web app.


00:24:27.020 --> 00:24:28.100
I think it's Java.


00:24:28.100 --> 00:24:29.140
I'm not a hundred percent sure.


00:24:29.140 --> 00:24:31.660
But anyway, it's, it's not their main thing.


00:24:31.660 --> 00:24:36.360
And so there's a bunch of like independent microservices and tools and data science


00:24:36.360 --> 00:24:38.380
projects that are all using this.


00:24:38.380 --> 00:24:44.820
So their first pass at getting all those different things migrated was to say,


00:24:44.820 --> 00:24:52.220
we're going to have a bilingual philosophy for Python, meaning it'll run on two and three


00:24:52.220 --> 00:24:53.220
at the same time.


00:24:53.220 --> 00:24:54.220
Okay.


00:24:54.220 --> 00:24:59.060
And then once you get it there, the main problem that you could run into is I depend on a library,


00:24:59.060 --> 00:25:01.580
like this is standard legacy Python.


00:25:01.580 --> 00:25:05.620
I depend on a library that requires Python 2.


00:25:05.620 --> 00:25:10.180
Therefore, everything that I use, that I build that depends on that library must also be


00:25:10.180 --> 00:25:11.180
Python 2, right?


00:25:11.180 --> 00:25:12.180
Yeah.


00:25:12.180 --> 00:25:18.700
bilingual thing that they did. This was to prevent that blockade. So anyone who wants


00:25:18.700 --> 00:25:23.340
to build new stuff on Python 3 could still use the libraries and do so. That was the


00:25:23.340 --> 00:25:29.940
plan. They actually had a whole team that oversaw this effort across projects, across


00:25:29.940 --> 00:25:36.440
thousands of engineers called the Horizontal Initiatives Program. So that was to across


00:25:36.440 --> 00:25:38.440
all these different projects address that.


00:25:38.440 --> 00:25:42.440
And then in phase one, first quarter 2019,


00:25:42.440 --> 00:25:46.440
they went and they found the most important repositories,


00:25:46.440 --> 00:25:50.440
the ones that were, if you put them into a dependency graph at the bottom,


00:25:50.440 --> 00:25:53.440
and they said, "We're going to port those to Python 3 first,"


00:25:53.440 --> 00:25:55.440
because they're blocking everything else.


00:25:55.440 --> 00:25:59.440
And then they kind of finished it off in the second half of 2019.


00:25:59.440 --> 00:26:02.440
So they basically said, "All right, now we got the foundation done.


00:26:02.440 --> 00:26:05.440
We can start upgrading the libraries that depend on all these lower-level bits."


00:26:05.440 --> 00:26:09.240
And then, you know, they said, looking back, you'll like this part, Brian.


00:26:09.240 --> 00:26:13.400
They said our primary indicator for knowing that the migration was done, that we were


00:26:13.400 --> 00:26:19.520
all right, was that our builds passed and our tests ran and everything was okay.


00:26:19.520 --> 00:26:22.160
And then eventually they went through and said, all right, we're going to turn off the


00:26:22.160 --> 00:26:27.280
ability to run Python 2 type of tests in continuous integration.


00:26:27.280 --> 00:26:28.440
Now let's see what keeps working.


00:26:28.440 --> 00:26:29.440
Oh, yeah.


00:26:29.440 --> 00:26:30.440
Okay.


00:26:30.440 --> 00:26:31.440
Yeah.


00:26:31.440 --> 00:26:33.260
So one of the things you can imagine is important is having tests, right?


00:26:33.260 --> 00:26:36.960
Because if you don't have tests, CI/CD doesn't tell you a lot.


00:26:36.960 --> 00:26:39.340
It just does the CD part.


00:26:39.340 --> 00:26:41.340
Better for better or worse.


00:26:41.340 --> 00:26:46.220
Yeah, so they said, look, here's some guidelines for people, other organizations who are on


00:26:46.220 --> 00:26:53.720
similar paths, but earlier, I said plan early and engage your organization's Python experts.


00:26:53.720 --> 00:26:58.440
Find and leverage champions in the affected teams and help them promote the benefits of


00:26:58.440 --> 00:27:00.700
Python 3 to everyone.


00:27:00.700 --> 00:27:06.500
Stop this bilingual approach so people can at least begin if they want to go to Python


00:27:06.500 --> 00:27:07.500
3.


00:27:07.500 --> 00:27:13.460
Invest in test and test coverage, co-coverage, because these will be your best metrics of


00:27:13.460 --> 00:27:14.460
success.


00:27:14.460 --> 00:27:19.580
And then finally, ensure your data models explicitly deal with this, what used to be


00:27:19.580 --> 00:27:25.660
one thing, bytes and strings in Python 2 and now is of course two totally separate things.


00:27:25.660 --> 00:27:30.380
They said that was really the biggest challenge that they ran into is that making that distinction


00:27:30.380 --> 00:27:34.740
correctly. Yeah, those are a hurdle. Are you guys all upgraded? Yeah, it was a library


00:27:34.740 --> 00:27:40.260
that we were using that didn't support Python 3 yet. The reasoning was the


00:27:40.260 --> 00:27:47.620
library talks to a DLL that has, you know, C++ strings or C strings and old


00:27:47.620 --> 00:27:52.620
Python strings converted just fine but they don't now. Unicode fancy ones, yeah?


00:27:52.620 --> 00:27:58.940
Not so easy. Yeah. Cool, so to wrap this up, they said the benefits they have from


00:27:58.940 --> 00:28:01.140
in this whole process is they no longer have to worry


00:28:01.140 --> 00:28:02.980
about supporting Python 2 and they've seen


00:28:02.980 --> 00:28:05.080
their support loads decrease,


00:28:05.080 --> 00:28:06.460
and decrease in a good way,


00:28:06.460 --> 00:28:08.900
not you don't have to support the old crummy stuff.


00:28:08.900 --> 00:28:11.940
You can depend on the latest open source libraries.


00:28:11.940 --> 00:28:14.860
A lot of libraries these days only work with Python 3.


00:28:14.860 --> 00:28:18.100
And they opportunistically and enthusiastically


00:28:18.100 --> 00:28:22.420
adopted TypeHinting and mypy to improve overall quality,


00:28:22.420 --> 00:28:23.260
which is pretty cool.


00:28:23.260 --> 00:28:25.060
- Yeah, that is good.


00:28:25.060 --> 00:28:27.000
- Yeah, I'm looking forward to this next one you got.


00:28:27.000 --> 00:28:28.300
- This actually ties nicely


00:28:28.300 --> 00:28:33.260
you brought up the Django speedups and I probably should have talked to this about this right


00:28:33.260 --> 00:28:38.540
afterwards but anyway here we go. There was an article that I'm not saying I agree or disagree


00:28:38.540 --> 00:28:44.620
because I don't know enough about it but the article was called the troublesome active record


00:28:44.620 --> 00:28:50.380
pattern and I guess in you know like Ruby and stuff we talk about that they talk about active


00:28:50.380 --> 00:28:57.740
record more, I think. But in Python world, it's the object relational mappers, ORMs,


00:28:57.740 --> 00:29:04.140
like the Django ORM or SQLAlchemy is also an ORM. And those are essentially the same as active


00:29:04.140 --> 00:29:09.020
record. That's, I think, that's the same pattern, right? Well, certainly the Django ORM follows that


00:29:09.020 --> 00:29:14.940
pattern. SQLAlchemy, it has a lot of similarities, but its design pattern is technically called a


00:29:14.940 --> 00:29:15.940
a unit of work.


00:29:15.940 --> 00:29:16.940
Okay.


00:29:16.940 --> 00:29:21.500
The main variation is like on Django or things like that is you go to the object and you


00:29:21.500 --> 00:29:23.060
call save.


00:29:23.060 --> 00:29:26.300
Whereas so that happens on the individual objects.


00:29:26.300 --> 00:29:30.080
Whereas in SQLAlchemy, you make a bunch of changes and then there's this unit of work


00:29:30.080 --> 00:29:36.420
thing and you call save and it submits all the changes in one giant batch.


00:29:36.420 --> 00:29:40.820
But here's the interesting thing is like this whole article is like the troublesome active


00:29:40.820 --> 00:29:42.060
record pattern.


00:29:42.060 --> 00:29:47.060
My reading of it really was the troublesome ORM pattern.


00:29:47.060 --> 00:29:49.460
And so for the most part,


00:29:49.460 --> 00:29:52.100
it's kind of a immaterial distinction,


00:29:52.100 --> 00:29:53.920
although technically design pattern wise,


00:29:53.920 --> 00:29:55.220
they're not exactly the same.


00:29:55.220 --> 00:29:57.100
- Okay, okay, well, yeah.


00:29:57.100 --> 00:30:00.300
So the idea being like you just brought it up


00:30:00.300 --> 00:30:04.460
that the object, when you're referencing a bunch of objects


00:30:04.460 --> 00:30:06.840
and you have object save and things like that,


00:30:06.840 --> 00:30:08.780
there's a whole bunch of issues with that.


00:30:08.780 --> 00:30:23.180
One of the issues is if you want to query things about the data, not necessarily all the data, but things like if you've got a bunch of books, for example, and you just want to count the number of books, well, you might have to just retrieve them all.


00:30:23.180 --> 00:30:38.500
Or if you want to count all of the software testing books written by Oregon authors, you'd have to just ask me or you'd have to grab like all of them and grab all the data and then search on do in Python, look for stuff.


00:30:38.500 --> 00:30:40.500
in a for loop or something.


00:30:40.500 --> 00:30:43.060
The other problem was around transactions,


00:30:43.060 --> 00:30:45.860
because if I have a book item


00:30:45.860 --> 00:30:47.940
and then change something about it,


00:30:47.940 --> 00:30:49.840
and then save it back in,


00:30:49.840 --> 00:30:52.740
there's nothing stopping some other process.


00:30:52.740 --> 00:30:56.780
You know, the read modify write doesn't work that well


00:30:56.780 --> 00:30:58.700
if you've got multiple readers and writers.


00:30:58.700 --> 00:31:01.820
And I was looking this up, SQLAlchemy has sessions,


00:31:01.820 --> 00:31:04.060
or you said there's a unit of work thing.


00:31:04.060 --> 00:31:05.380
Don't know if those are atomic.


00:31:05.380 --> 00:31:06.380
- Yeah, yeah, they're the same, yeah.


00:31:06.380 --> 00:31:09.260
Okay, Django has an atomic setting,


00:31:09.260 --> 00:31:11.980
but I don't know if that's by default


00:31:11.980 --> 00:31:15.300
or if it always, or if you have to specifically say


00:31:15.300 --> 00:31:16.960
work with transactions.


00:31:16.960 --> 00:31:19.340
I did notice in some of the Django documentation


00:31:19.340 --> 00:31:21.960
that does say that transactions slow things down.


00:31:21.960 --> 00:31:23.460
So you don't want to do transactions


00:31:23.460 --> 00:31:25.380
if you're just reading, for instance.


00:31:25.380 --> 00:31:28.140
But, and then the author of the article,


00:31:28.140 --> 00:31:31.220
Cal Peterson, mentions that REST APIs


00:31:31.220 --> 00:31:32.660
often have the same problems


00:31:32.660 --> 00:31:35.060
and some microservice architectures


00:31:35.060 --> 00:31:37.940
have a similar sort of issue.


00:31:37.940 --> 00:31:41.380
It's just around REST APIs instead of the object model.


00:31:41.380 --> 00:31:44.420
You're reading tons of data when you don't need to.


00:31:44.420 --> 00:31:46.860
He brought up some solutions,


00:31:46.860 --> 00:31:50.260
at least for you can just directly use SQL


00:31:50.260 --> 00:31:53.760
or use some properties that do queries


00:31:53.760 --> 00:31:55.500
that are more like SQL.


00:31:55.500 --> 00:31:57.500
Doing transactions helps too.


00:31:57.500 --> 00:31:59.020
But basically he was recommending


00:31:59.020 --> 00:32:02.360
avoiding the active record style access patterns


00:32:02.360 --> 00:32:04.100
around the REST APIs he brought up


00:32:04.100 --> 00:32:09.100
that a GraphQL and RPC style APIs are some solutions


00:32:09.100 --> 00:32:11.980
to the same problem in REST APIs.


00:32:11.980 --> 00:32:14.500
As somebody that's moving towards learning more


00:32:14.500 --> 00:32:17.500
about web development and working with ORMs,


00:32:17.500 --> 00:32:18.820
I really did want to bring this up


00:32:18.820 --> 00:32:20.580
and find out what you thought of all of this.


00:32:20.580 --> 00:32:22.540
- Sure, it's interesting.


00:32:22.540 --> 00:32:25.220
There are a lot of good valid points


00:32:25.220 --> 00:32:26.660
that Cal's making here.


00:32:26.660 --> 00:32:29.100
I feel like the focus should almost be,


00:32:29.100 --> 00:32:31.020
instead of the troublesome active record pattern


00:32:31.020 --> 00:32:33.660
is you're using your ORM wrong,


00:32:33.660 --> 00:32:35.820
learn how to use it right.


00:32:35.820 --> 00:32:37.380
So let me give you some examples.


00:32:37.380 --> 00:32:41.620
So the one of the challenge here that we see is


00:32:41.620 --> 00:32:43.220
if you're going to create a record


00:32:43.220 --> 00:32:44.060
and you wanna get it back,


00:32:44.060 --> 00:32:46.180
you have to get it back by the primary key.


00:32:46.180 --> 00:32:47.940
Maybe if you're doing exactly


00:32:47.940 --> 00:32:50.460
on just the straight ORM record pattern,


00:32:50.460 --> 00:32:51.760
but you can just do a query


00:32:51.760 --> 00:32:53.980
and do like a give me the first or one item


00:32:53.980 --> 00:32:55.300
or something like that.


00:32:55.300 --> 00:32:57.700
There's a part where he's looping over stuff saying,


00:32:57.700 --> 00:33:00.020
here we're looping back to just get the ISBN


00:33:00.020 --> 00:33:00.840
off these things, right?


00:33:00.840 --> 00:33:03.040
You're pulling all the properties,


00:33:03.040 --> 00:33:05.680
Like you're doing basically a select star from table,


00:33:05.680 --> 00:33:09.040
just ultimately and a serialization of that result,


00:33:09.040 --> 00:33:10.720
just to get like the ISBN.


00:33:10.720 --> 00:33:14.840
Well, in SQLAlchemy, I don't know Django or ML enough,


00:33:14.840 --> 00:33:18.280
but SQLAlchemy, you can say only return these columns.


00:33:18.280 --> 00:33:20.760
I want just the ID and the title or the,


00:33:20.760 --> 00:33:24.520
I just want the ID and the ISBN, don't return the other results, right?


00:33:24.520 --> 00:33:26.160
So that's an option.


00:33:26.160 --> 00:33:28.360
And plus one thing we already discussed, right?


00:33:28.360 --> 00:33:32.360
You just use the sub query or the filter select or whatever it is for Django.


00:33:32.760 --> 00:34:02.740
And you can avoid those, right? So like, as you kind of go through these, you're like, okay, well, most of the time, these problems are actually solved with some aspect of like a proper ORM. Now, the transaction one is it really, I think, super interesting, because it sort of often gets to the heart of this debate about ORMs. And you're saying, well, okay, here's this active record thing where it's not really leveraging transactions. We know transactions are good. And so this, this is bad, because it doesn't do anything.


00:34:02.740 --> 00:34:05.860
But in practice, it's not so clean as that.


00:34:05.860 --> 00:34:10.340
So for example, suppose I'm working on a web app and I have a grid,


00:34:10.340 --> 00:34:13.540
like a grid that was maybe could be loaded off of a rest endpoint,


00:34:13.540 --> 00:34:14.660
bring that into it, right?


00:34:14.660 --> 00:34:16.580
And I've got this grid and I can type in it.


00:34:16.580 --> 00:34:18.260
And there's a button that calls, says save.


00:34:18.260 --> 00:34:23.940
There's no way that it makes sense to do a transaction around that, right?


00:34:23.940 --> 00:34:27.860
I'm not going to transactionally begin loading the grid and wait for me to press save, right?


00:34:27.860 --> 00:34:30.420
That's going to lock up the database for every user.


00:34:30.420 --> 00:34:30.740
Yeah.


00:34:30.740 --> 00:34:33.340
Any scenario like that, like rest endpoints, right?


00:34:33.340 --> 00:34:36.900
If I've got a phone and I've got my mobile app and it hits the rest endpoint,


00:34:36.900 --> 00:34:39.900
pulls it down the data and I hit a type on it and I hit save,


00:34:39.900 --> 00:34:41.900
you can't do that transactionally.


00:34:41.900 --> 00:34:45.860
Like it just, you would lock up the site like right away, right?


00:34:45.860 --> 00:34:47.140
So it doesn't make any sense.


00:34:47.140 --> 00:34:51.020
So there's just other patterns like optimistic concurrency is a super common


00:34:51.020 --> 00:34:55.420
pattern in ORMs that would work with active record or SQLAlchemy's


00:34:55.420 --> 00:34:56.420
unit work beautifully.


00:34:56.420 --> 00:35:01.020
And the idea is I'm going to make some kind of version in that record.


00:35:01.020 --> 00:35:04.580
And when I pull it back, it's going to come with the version that I got.


00:35:04.580 --> 00:35:09.000
And when you hit save, you say, update this record where the


00:35:09.000 --> 00:35:10.520
version is the version I have.


00:35:10.520 --> 00:35:13.360
So if someone else has updated it, it increments that version.


00:35:13.360 --> 00:35:14.960
And it says, no, no, there's no record.


00:35:14.960 --> 00:35:15.920
You can't update this.


00:35:15.920 --> 00:35:17.380
Right.


00:35:17.380 --> 00:35:20.720
So you, you basically say, ah, it looks like someone changed this behind you,


00:35:20.720 --> 00:35:24.280
like your grid and their grid, they hit save before you, so you got to deal


00:35:24.280 --> 00:35:25.720
with like syncing this back up.


00:35:25.720 --> 00:35:25.880
Right.


00:35:25.880 --> 00:35:28.560
So there's a lot of times where it's,


00:35:28.560 --> 00:35:30.400
it would feel great to like have a transaction,


00:35:30.400 --> 00:35:32.840
but that transaction actually can't be used anyway.


00:35:32.840 --> 00:35:35.480
And ORMs have like nice built-in ways


00:35:35.480 --> 00:35:36.800
where you can easily slot in like


00:35:36.800 --> 00:35:38.120
optimistic concurrency and stuff.


00:35:38.120 --> 00:35:39.880
So that's my thought.


00:35:39.880 --> 00:35:41.560
I think this is an interesting article.


00:35:41.560 --> 00:35:42.880
It's definitely interesting to think about


00:35:42.880 --> 00:35:43.720
all the points brought up,


00:35:43.720 --> 00:35:47.880
but I often think that the tools have like clever,


00:35:47.880 --> 00:35:49.960
non-obvious ways to solve most of these problems.


00:35:49.960 --> 00:35:54.440
- Yeah, and I guess to be a little bit on Cal's side here,


00:35:54.440 --> 00:35:58.840
that the tools have clever, non-obvious ways to deal with them,


00:35:58.840 --> 00:36:00.640
maybe that's an issue.


00:36:00.640 --> 00:36:03.480
That all of our beginning tutorials on how to use Django


00:36:03.480 --> 00:36:07.520
or how to use SQLAlchemy or how to use other ORMs


00:36:07.520 --> 00:36:10.800
are just ignoring that stuff because it's more advanced.


00:36:10.800 --> 00:36:13.880
But people often just read the beginning tutorial


00:36:13.880 --> 00:36:16.560
and then go do a startup or something.


00:36:16.560 --> 00:36:18.920
- Yeah, sure, and then you end up with your page loading


00:36:18.920 --> 00:36:21.160
like in six seconds and you don't know why.


00:36:21.160 --> 00:36:22.000
- Yeah.


00:36:22.000 --> 00:36:22.840
- Which is not great.


00:36:22.840 --> 00:36:25.840
Maybe we could teach people the right way to do it from the beginning.


00:36:25.840 --> 00:36:29.040
I do wish that some of these patterns were more built in.


00:36:29.040 --> 00:36:32.440
Like, I wish optimistic concurrency was there by default in the ORMs.


00:36:32.440 --> 00:36:36.040
And you've kind of got to like roll that yourself and whatnot.


00:36:36.040 --> 00:36:38.440
So anyway, it's a really interesting article to think about.


00:36:38.440 --> 00:36:41.640
And I think it dovetails nicely with my sort of performance one as well.


00:36:41.640 --> 00:36:45.640
Because it's, they're kind of two sides of the same coin a bit there.


00:36:45.640 --> 00:36:46.840
Yeah. Okay.


00:36:46.840 --> 00:36:50.040
All right. Well, I have the second side to your coin that is the Dacity.


00:36:50.040 --> 00:36:53.740
-Dacity? Whatever that one was called. -Yeah.


00:36:53.740 --> 00:36:59.540
So this is a cool thing by Steve Brazier called "Types at the Edge of Python".


00:36:59.540 --> 00:37:01.040
The edges of Python.


00:37:01.040 --> 00:37:04.540
And so Steve apparently creates a bunch of APIs.


00:37:04.540 --> 00:37:10.240
And I think, yeah, he was using FastAPI at the time when he was talking about all these ideas.


00:37:10.240 --> 00:37:13.040
But it's kind of generally valid for all of them.


00:37:13.040 --> 00:37:16.540
Because look, when I start with a new, when I create a new API, these days,


00:37:16.540 --> 00:37:19.620
I start with three things. I start with Pydantic,


00:37:19.620 --> 00:37:23.740
mypy, and some kind of error tracking like rollbar or sentry or something like that.


00:37:23.740 --> 00:37:24.240
Okay.


00:37:24.240 --> 00:37:26.240
That's pretty interesting, right? So Pydantic


00:37:26.240 --> 00:37:29.380
is a data translation and validation library,


00:37:29.380 --> 00:37:31.780
much like Dacity.


00:37:31.780 --> 00:37:33.080
Right?


00:37:33.080 --> 00:37:33.580
Yeah.


00:37:33.580 --> 00:37:37.740
They're not the same, but they kind of play in the same realm. They transform JSON


00:37:37.740 --> 00:37:39.980
with validation and type checking


00:37:39.980 --> 00:37:43.180
over there. And then there's mypy, which looks like


00:37:43.180 --> 00:37:46.140
you can use Pydantic to help specify


00:37:46.140 --> 00:37:48.900
some of the types on your classes,


00:37:48.900 --> 00:37:51.580
and then use mypy to verify that you're not


00:37:51.580 --> 00:37:53.340
missing some kind of check.


00:37:53.340 --> 00:37:56.300
So he says, look, the most common error you're going to run into


00:37:56.300 --> 00:37:58.820
as a Python developer in general is attribute error,


00:37:58.820 --> 00:38:01.220
none type object has no attribute


00:38:01.220 --> 00:38:04.020
x, where x is whatever you're trying to do, right?


00:38:04.020 --> 00:38:04.900
Yeah.


00:38:04.900 --> 00:38:06.580
I mean, that just means


00:38:06.580 --> 00:38:10.780
you got none instead of a value, and you're trying to continue to work with that class


00:38:10.780 --> 00:38:11.460
in some way.


00:38:11.460 --> 00:38:13.060
It's a void dereference in C.


00:38:13.060 --> 00:38:14.260
Yes, exactly.


00:38:14.260 --> 00:38:23.260
So wouldn't it be nice if it said none is not an allowed value for this or you have none and you can no longer operate on it or something like that.


00:38:23.260 --> 00:38:34.260
So Pydantic will actually give you those types of errors. It'll convert things like attribute errors and mismatch type errors to explain what was wrong. Right. So that's pretty awesome.


00:38:34.260 --> 00:38:42.260
And so you can use Pydantic to actually specify what your understanding of the interface like if you're calling an API, the stuff that you expect to get back.


00:38:42.260 --> 00:38:43.900
I think this is going to be a date.


00:38:43.900 --> 00:38:46.260
I think this is an optional string and whatnot.


00:38:46.260 --> 00:38:50.820
It says, then when you launch your code into production, your assumptions are tested against


00:38:50.820 --> 00:38:51.820
reality.


00:38:51.820 --> 00:38:52.820
That's pretty cool.


00:38:52.820 --> 00:38:55.780
And it says, if you're lucky, they turn out to be correct.


00:38:55.780 --> 00:38:59.780
But if not, you're going to run into some of these none type errors and PyDantic can


00:38:59.780 --> 00:39:00.860
help with that.


00:39:00.860 --> 00:39:05.860
But then you can also, once you put in the typing into your code, then mypy will go on


00:39:05.860 --> 00:39:06.860
helping.


00:39:06.860 --> 00:39:11.980
So for example, if you're taking an argument that says, first, you think it's a string.


00:39:11.980 --> 00:39:14.640
So you say colon str refers type, then you go work with it.


00:39:14.640 --> 00:39:16.120
And that means it cannot be none, right?


00:39:16.120 --> 00:39:22.760
Like none ability is explicitly set in the type thing in Python and the type space.


00:39:22.760 --> 00:39:27.000
So if you find out that it could be none, then you're going to go and say, this is


00:39:27.000 --> 00:39:29.720
a typing dot optional of string, right?


00:39:29.720 --> 00:39:30.960
Like that's what it's got to be.


00:39:30.960 --> 00:39:33.400
If it could be none or a string, you'd find that out and


00:39:33.400 --> 00:39:34.640
then specify that in Pydanic.


00:39:34.640 --> 00:39:39.360
And then if you run mypy against it and you start working with an optional string,


00:39:39.360 --> 00:39:41.620
you don't check for it to be none first.


00:39:41.620 --> 00:39:46.620
My pile actually give you an error saying that you're not checking for none basically.


00:39:46.620 --> 00:39:50.620
So it'll even tell you like the missed if statements or other conditional


00:39:50.620 --> 00:39:54.620
code to like verify that like no it's not the optional none it's actually the value.


00:39:54.620 --> 00:39:58.620
Okay. That's pretty cool right? And if you want to strip me up before. Yeah for sure.


00:39:58.620 --> 00:40:02.620
I mean normally it's just it's just not present and it's not because


00:40:02.620 --> 00:40:07.620
I thought as a dynamic language like C++ would have the same problem right if you take a pointer


00:40:07.620 --> 00:40:11.620
and you just start to work with it and see, C++,


00:40:11.620 --> 00:40:14.620
the compiler's not going to say, "You didn't check that for, you know,


00:40:14.620 --> 00:40:17.620
equal to null first." It just doesn't do that, right?


00:40:17.620 --> 00:40:21.620
So this is a really awesome addition for safety in your code.


00:40:21.620 --> 00:40:24.620
So he was talking about how FastAPI automatically integrates


00:40:24.620 --> 00:40:26.620
with Pydanic out of the box, which is pretty cool.


00:40:26.620 --> 00:40:31.620
And then also, at the end, he has a kata, a mini kata,


00:40:31.620 --> 00:40:33.620
that works you through these ideas.


00:40:33.620 --> 00:40:36.620
So a kata is like a practice to play with these typing ideas.


00:40:36.620 --> 00:40:40.120
- Yeah, and a nice picture of how these all fit in.


00:40:40.120 --> 00:40:42.620
- Yeah, yeah, yeah, there's some cool diagrams.


00:40:42.620 --> 00:40:45.120
So anyway, if you're building APIs and you're taking data,


00:40:45.120 --> 00:40:47.620
especially from sources where they might give you junk


00:40:47.620 --> 00:40:49.120
when you expected something valuable,


00:40:49.120 --> 00:40:50.620
or you're not really sure, you're like,


00:40:50.620 --> 00:40:53.120
"The docs say this, but I remember getting something different


00:40:53.120 --> 00:40:56.120
some other time," this is a really cool way to formalize that


00:40:56.120 --> 00:40:58.120
and then have your code automatically check it.


00:40:58.120 --> 00:40:59.620
- Yeah, this is cool. I like it.


00:40:59.620 --> 00:41:00.620
- Yeah, awesome.


00:41:00.620 --> 00:41:02.620
- That's all of our six items.


00:41:02.620 --> 00:41:05.120
Do you have any extra little things to share?


00:41:05.120 --> 00:41:10.400
Well, I kind of went overboard on the extras this week, but I'll keep them all quick because


00:41:10.400 --> 00:41:12.480
there's a bunch of cool stuff out there that people send in.


00:41:12.480 --> 00:41:15.520
First, Jack McHugh did a really cool thing.


00:41:15.520 --> 00:41:22.440
So Jack McHugh created a blog post or a page on a site called Python Bytes Awesome Package


00:41:22.440 --> 00:41:23.440
List.


00:41:23.440 --> 00:41:24.440
Have you seen this?


00:41:24.440 --> 00:41:25.440
Yeah.


00:41:25.440 --> 00:41:34.320
And he like listened to 171 episodes in 174 days or something like that of Python bytes.


00:41:34.320 --> 00:41:36.920
I mean, this is awesome because as I flip through this,


00:41:36.920 --> 00:41:38.680
there's a couple of things I've forgotten.


00:41:38.680 --> 00:41:39.600
I'm like, oh, that's cool.


00:41:39.600 --> 00:41:40.820
Oh, we must have talked about that,


00:41:40.820 --> 00:41:42.240
but I don't even remember.


00:41:42.240 --> 00:41:43.600
It's got beautiful pictures.


00:41:43.600 --> 00:41:45.880
It's, I mean, it's kind of an awesome list,


00:41:45.880 --> 00:41:49.520
but it's for a podcast, so that is super cool, Jack.


00:41:49.520 --> 00:41:50.760
Thank you, thank you.


00:41:50.760 --> 00:41:52.400
I'll be sure to link to it at the end.


00:41:52.400 --> 00:41:54.540
And I hope you keep adding to it.


00:41:54.540 --> 00:41:57.520
That would be great, but no pressure.


00:41:57.520 --> 00:41:59.680
I wanna talk about VB.net for a second.


00:41:59.680 --> 00:42:00.520
That's kind of weird, right?


00:42:00.520 --> 00:42:01.360
- Why?


00:42:01.360 --> 00:42:04.480
- Yeah, because I kind of appreciated VB


00:42:04.480 --> 00:42:06.800
back in the early days when it was like


00:42:06.800 --> 00:42:09.160
a drag and drop VB6 and whatnot.


00:42:09.160 --> 00:42:10.520
And then Microsoft came out with a thing


00:42:10.520 --> 00:42:13.160
called Visual Basic.net and it was complete crap.


00:42:13.160 --> 00:42:14.700
Didn't like it, but here's what's interesting,


00:42:14.700 --> 00:42:17.400
is like they have just announced


00:42:17.400 --> 00:42:20.440
that they are no longer maintaining,


00:42:20.440 --> 00:42:21.680
they'll keep that thing running,


00:42:21.680 --> 00:42:23.320
but they will no longer work on it.


00:42:23.320 --> 00:42:24.440
And I just thought it was interesting.


00:42:24.440 --> 00:42:26.560
Like here's a fairly major language,


00:42:26.560 --> 00:42:28.700
not super top five or something,


00:42:28.700 --> 00:42:29.860
but it's kind of a major language


00:42:29.860 --> 00:42:32.780
that's declared dead.


00:42:32.780 --> 00:42:34.360
And I just thought it was kind of interesting


00:42:34.360 --> 00:42:38.880
to point out, man, languages, they can go dead.


00:42:38.880 --> 00:42:39.720
It's weird.


00:42:39.720 --> 00:42:42.560
- Yeah, I think this one should have been shot


00:42:42.560 --> 00:42:44.280
a long time ago, but you know.


00:42:44.280 --> 00:42:46.160
- It's also worth thinking about this,


00:42:46.160 --> 00:42:48.400
I agree, by the way, it should have never existed,


00:42:48.400 --> 00:42:50.880
but anyway, that's a different story.


00:42:50.880 --> 00:42:52.480
It's also an interesting take on,


00:42:52.480 --> 00:42:55.240
here's a language controlled by a single company,


00:42:55.240 --> 00:42:57.560
and they can just decide they don't like it anymore.


00:42:57.560 --> 00:42:58.400
Right? - Yeah.


00:42:58.400 --> 00:43:02.960
It really happened to Python because there's not a single person or organization that goes,


00:43:02.960 --> 00:43:03.960
"Ah, we're done."


00:43:03.960 --> 00:43:04.960
Yeah.


00:43:04.960 --> 00:43:09.080
Well, that's actually one of the fears I have for, I mean, even Java.


00:43:09.080 --> 00:43:12.960
Java is not controlled by one company, but it kind of is sort of.


00:43:12.960 --> 00:43:13.960
Yeah.


00:43:13.960 --> 00:43:14.960
Yeah.


00:43:14.960 --> 00:43:19.720
Well, and there's also that Supreme Court case or the legal case of like, are you allowed


00:43:19.720 --> 00:43:22.200
to copy the Java API?


00:43:22.200 --> 00:43:23.200
I don't think that's resolved yet.


00:43:23.200 --> 00:43:24.400
I can't remember.


00:43:24.400 --> 00:43:25.800
It's still working its way through the courts.


00:43:25.800 --> 00:43:30.360
I want to reiterate, people that actually have a job in Visual Basic or love it, I'm


00:43:30.360 --> 00:43:31.360
not dissing you.


00:43:31.360 --> 00:43:36.520
I just had a personally bad experience with Visual Basic and didn't enjoy it.


00:43:36.520 --> 00:43:42.520
I had a good experience with Visual Basic 5, but that was in like 1993 or something.


00:43:42.520 --> 00:43:48.280
Okay, so also we talked about COVID-19, all the crazy stuff going on.


00:43:48.280 --> 00:43:53.640
As tragic as much of it is, there's some really interesting data science that can be done


00:43:53.640 --> 00:43:55.960
and some dashboards that can be built and whatnot.


00:43:55.960 --> 00:43:59.280
So someone on Twitter, let me pull up their name,


00:43:59.280 --> 00:44:02.920
just pointed to a whole bunch of COVID-19 datasets.


00:44:02.920 --> 00:44:04.880
Beekeep, I'm gonna call that Beekeep.


00:44:04.880 --> 00:44:07.040
I'll put that on Twitter, so check that out.


00:44:07.040 --> 00:44:09.960
Like the Johns Hopkins CSS-E dataset


00:44:09.960 --> 00:44:13.040
and some other dashboards and some things on Kaggle.


00:44:13.040 --> 00:44:14.880
So if you're in data science, you wanna explore it,


00:44:14.880 --> 00:44:17.600
here's some datasets that are probably interesting.


00:44:17.600 --> 00:44:19.000
Then finally, work on a new course,


00:44:19.000 --> 00:44:21.000
adding a CMS to your data-driven web app.


00:44:21.000 --> 00:44:22.200
That'll be a lot of fun.


00:44:22.200 --> 00:44:23.800
I'll talk more about that later.


00:44:23.800 --> 00:44:26.880
But I'm just super excited to be creating more courses


00:44:26.880 --> 00:44:28.000
as we kind of talked about earlier.


00:44:28.000 --> 00:44:29.640
- Yeah, one of the things we talked about


00:44:29.640 --> 00:44:31.280
is people working from home


00:44:31.280 --> 00:44:34.200
and getting around technical problems with that.


00:44:34.200 --> 00:44:36.140
That happened to me just this morning.


00:44:36.140 --> 00:44:38.480
So this morning I tried to hook up,


00:44:38.480 --> 00:44:41.080
I realized that I had an external keyboard


00:44:41.080 --> 00:44:43.440
that's working fine-ish.


00:44:43.440 --> 00:44:46.160
I wanted to use like a real mouse,


00:44:46.160 --> 00:44:48.720
so I plugged in an external mouse


00:44:48.720 --> 00:44:51.240
with a little click wheel thing on it


00:44:51.240 --> 00:44:55.280
and realized that on Apple, the click wheel behavior


00:44:55.280 --> 00:44:58.760
just goes the wrong direction for scrolling,


00:44:58.760 --> 00:45:00.160
and it confused me.


00:45:00.160 --> 00:45:01.320
And you can reverse it,


00:45:01.320 --> 00:45:04.160
but I didn't want my trackpad to be reversed.


00:45:04.160 --> 00:45:05.560
My trackpad's fine.


00:45:05.560 --> 00:45:08.880
So they're tied together for some reason, weird.


00:45:08.880 --> 00:45:12.540
So Dave Forjak, sorry Dave,


00:45:12.540 --> 00:45:17.440
he suggested I use something called a scroll reverser,


00:45:17.440 --> 00:45:21.040
that is a little tiny app that allows you to untie those


00:45:21.040 --> 00:45:26.040
and have trackpad scrolling and mouse scrolling be different.


00:45:26.040 --> 00:45:27.960
And thank you, Dave.


00:45:27.960 --> 00:45:28.920
- That's awesome.


00:45:28.920 --> 00:45:29.760
That's super cool.


00:45:29.760 --> 00:45:32.040
I guess my work from home thing that I've been playing with


00:45:32.040 --> 00:45:36.640
is with Zoom, you can have virtual backgrounds.


00:45:36.640 --> 00:45:38.400
You don't even have to have a green screen.


00:45:38.400 --> 00:45:41.000
You can have like alternate backgrounds


00:45:41.000 --> 00:45:43.920
just by uploading an image and it'll put you in,


00:45:43.920 --> 00:45:46.720
you know, an office space instead of a messy bedroom


00:45:46.720 --> 00:45:47.560
or whatever it is.


00:45:47.560 --> 00:45:48.400
- Oh, nice.


00:45:48.400 --> 00:45:50.400
Yeah, so you can block out the kids behind you


00:45:50.400 --> 00:45:51.240
and stuff like that.


00:45:51.240 --> 00:45:52.080
- Yeah, exactly.


00:45:52.080 --> 00:45:53.860
You don't have to see the kids being crazy


00:45:53.860 --> 00:45:55.120
home from school and whatnot.


00:45:55.120 --> 00:45:56.920
Anyway, yeah, a lot of stuff we're learning


00:45:56.920 --> 00:45:58.060
around those types of things.


00:45:58.060 --> 00:46:01.220
And I think the joke that I chose for us this week


00:46:01.220 --> 00:46:05.100
is gonna be perfect for the opening of community,


00:46:05.100 --> 00:46:08.660
as documentation as building community that you brought up.


00:46:08.660 --> 00:46:09.500
- Okay, cool.


00:46:09.500 --> 00:46:11.500
- This is before that person gets inspired


00:46:11.500 --> 00:46:14.380
from listening to you and actually makes things better.


00:46:14.380 --> 00:46:16.580
All right, so let me set the stage here.


00:46:16.580 --> 00:46:19.320
There's three people.


00:46:19.320 --> 00:46:24.320
Two of them clearly more senior and a very excited new person sitting in a laptop,


00:46:24.320 --> 00:46:29.120
like beaming with enthusiasm, ready to get going on the whole project.


00:46:29.120 --> 00:46:31.920
And one of the senior person says to the other,


00:46:31.920 --> 00:46:34.120
"And this is Jim, our new developer."


00:46:34.120 --> 00:46:37.820
The other one says, "Great, does he already know something about our system?"


00:46:37.820 --> 00:46:41.920
The new person turns around, "I read the whole documentation."


00:46:41.920 --> 00:46:45.920
Blank looks between the senior people, "No."


00:46:45.920 --> 00:46:48.180
(laughing)


00:46:48.180 --> 00:46:50.440
- Yeah, yeah.


00:46:50.440 --> 00:46:51.280
- It's good, right?


00:46:51.280 --> 00:46:52.120
- Yeah, definitely.


00:46:52.120 --> 00:46:53.960
I started a job once in my career


00:46:53.960 --> 00:46:56.200
where I had read the documentation


00:46:56.200 --> 00:46:57.720
'cause it was an internal job transfer.


00:46:57.720 --> 00:46:59.980
I read the documentation before getting there


00:46:59.980 --> 00:47:02.000
and the people there that didn't know


00:47:02.000 --> 00:47:03.420
they had documentation.


00:47:03.420 --> 00:47:08.400
So it was so out of date, nobody currently there knew it.


00:47:08.400 --> 00:47:10.120
- It may be a little out of date


00:47:10.120 --> 00:47:11.720
if they don't even know it exists.


00:47:11.720 --> 00:47:13.760
(laughing)


00:47:13.760 --> 00:47:14.600
- Yeah.


00:47:14.600 --> 00:47:15.680
- All right, well, awesome.


00:47:15.680 --> 00:47:17.200
- Cool, well thanks a lot.


00:47:17.200 --> 00:47:19.560
- You bet, great to be here with you as always.


00:47:19.560 --> 00:47:20.400
See you later.


00:47:20.400 --> 00:47:21.240
- Bye.


00:47:21.240 --> 00:47:22.200
- Thank you for listening to Python Bytes.


00:47:22.200 --> 00:47:24.680
Follow the show on Twitter @pythonbytes.


00:47:24.680 --> 00:47:27.760
That's Python Bytes as in B-Y-T-E-S.


00:47:27.760 --> 00:47:30.640
And get the full show notes at pythonbytes.fm.


00:47:30.640 --> 00:47:32.840
If you have a news item you want featured,


00:47:32.840 --> 00:47:35.600
just visit pythonbytes.fm and send it our way.


00:47:35.600 --> 00:47:37.720
We're always on the lookout for sharing something cool.


00:47:37.720 --> 00:47:38.800
This is Brian Okken,


00:47:38.800 --> 00:47:40.900
and on behalf of myself and Michael Kennedy,


00:47:40.900 --> 00:47:43.000
thank you for listening and sharing this podcast


00:47:43.000 --> 00:47:44.640
with your friends and colleagues.

