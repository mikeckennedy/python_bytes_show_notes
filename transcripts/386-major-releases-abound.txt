00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 386, recorded June 4th, 2024. I am Michael Kennedy.

00:00:12 And I am Brian Ruckin.

00:00:14 This episode is brought to you by Mailtrap. I want to tell you more about them later.

00:00:20 And I also want to let you know that you can find us over on Fosstodon.

00:00:24 We are Fosstodonians, as we've said before.

00:00:27 If you want to talk to us on Mastodon, the links are in the top of your podcast player show notes.

00:00:32 We're also on X, but do a little bit more stuff on Mastodon.

00:00:36 So check us out there.

00:00:37 Also, you can find us streaming live at exactly this time right now, Brian.

00:00:43 Finally, which is usually 10am Pacific time on a Tuesday.

00:00:49 So just pythonbytes.fm/live and you can be part of the live show.

00:00:52 If you want, watch the older videos there if you like, or just subscribe in your podcast player. We really appreciate that.

00:00:57 Finally, interest in our email that you've been writing.

00:01:00 There's a lot of people signing up for it, Brian.

00:01:02 So if you want an artisanal handcrafted digest of the show in written form,

00:01:06 just visit pythonbytes.fm.

00:01:08 Click on newsletter right there in the center and enter your email address.

00:01:13 We won't share it, but we will send you an email after every show about what we covered.

00:01:18 So you have it saved if you like.

00:01:19 Yeah.

00:01:20 All right. You want to kick us off, Brian?

00:01:22 I will. So this comes as a suggestion from somebody and I'm sorry I didn't write the name down.

00:01:28 So thanks. We do love it.

00:01:30 I love it when people share important news with us and say, "Hey, you really should cover this because it's important."

00:01:37 Thank you for that.

00:01:38 So what am I talking about today?

00:01:39 I'm talking about NumPy 2.0.

00:01:41 And I was searching for it.

00:01:43 I thought we'd covered some of the changes in NumPy 2.0, but I don't know if we have.

00:01:48 So NumPy 2.0 has been in the works for a long time.

00:01:52 The reason why I'm bringing it up right now is because the release date is June 16th.

00:01:56 It's right around the corner.

00:01:58 And NumPy is both, you're probably using it.

00:02:02 I guess I'll just say that.

00:02:04 If you're using any data science or any machine learning or something, you're probably using it, even if you don't use it directly.

00:02:13 But you probably are using it directly.

00:02:15 Anyway, lots of changes to 2.0.

00:02:17 We're linking to an announcement.

00:02:20 We've got the main page, numpy.org, announces it.

00:02:24 You can just go there if you want.

00:02:25 But there's also a news item for the release for the June 16th.

00:02:29 There is some cool migration guides.

00:02:31 So I'm not going to go over a lot of the details, but there are some breaking changes with this.

00:02:37 So I'll go over a few things.

00:02:40 First off, went over and looked at the migration guide.

00:02:43 Let's see the release note.

00:02:44 Migration guide, I thought this was super cool.

00:02:46 So the migration guide is around to help you go through, navigate some of the changes that might be the most problematic.

00:02:56 But one of the cool things is RUF is helping out.

00:03:00 So if you're using RUF greater than version 0.2.0, you added a rule for Npy 201.

00:03:11 But you can just look at the migration guide and find this.

00:03:14 You select this rule and run RUF and it will, and they can just run check or you can just run RUF to correct.

00:03:23 RUF is around to help you with a lot of the stuff in this migration guide

00:03:28 to try to modify your code from older NumPy to the NumPy 2.0.

00:03:34 So that's really cool.

00:03:36 I would probably start there.

00:03:38 Also, making sure you have tests around your code to make sure your code is working before and after the migration.

00:03:44 And then the release notes gets down to a lot of the nitty gritty stuff.

00:03:49 There's new string stuff, there's performance improvements, but there's also hopping down, there's a lot of breaking changes.

00:03:57 And we need to allow projects to do this.

00:04:02 So I think this is a good thing that they're moving towards some changes in NumPy.

00:04:07 Yeah, quite a big deal for a 2.0 of NumPy.

00:04:10 Yeah.

00:04:11 It's been around a super long time, 15 years or something like that.

00:04:15 So they must take it seriously.

00:04:17 And that was released in 2006.

00:04:19 Yeah.

00:04:20 And like I said, this 2.0 migration to make sure that they were making, doing the right deprecations and omissions and changes necessary for the breaking,

00:04:31 breaking some backwards compatibility.

00:04:35 But for good reasons, I think it's, yeah, just heads up, everybody.

00:04:40 So.

00:04:42 Yeah. Awesome.

00:04:43 Well, that's a good one to cover for sure.

00:04:45 I have another exciting one.

00:04:46 Let's jump over to that.

00:04:48 So if you are a fan of uvicorn, so uvicorn is one of the ways you can run ASGI, ASGI web app.

00:04:59 So things like Quartz, FastAPI, many others.

00:05:04 You can use uvicorn and it's definitely sort of the recommended way or the,

00:05:09 at least suggested way that you run FastAPI for development.

00:05:14 But then when you go into production, well, you've got challenges.

00:05:18 So for example, you want your web server to look and see if your web app crashes

00:05:25 for whatever reason, like something went wrong, excuse me, something went wrong with it.

00:05:29 Something, maybe it ran out of memory.

00:05:32 I don't know.

00:05:33 All these things, right?

00:05:34 Yeah.

00:05:35 You need the app to sort of look at that and say, well, we're going to restart it

00:05:38 because it looks like it's hung up or it looks like it crashed.

00:05:42 Bring it back.

00:05:43 The other thing you need to be able to do is you need to be able to potentially

00:05:46 scale out across processes.

00:05:49 So maybe I've, well, not maybe, at Python Bytes, we have an eight CPU server.

00:05:55 If we just create one process, you know, because of the GIL and other things,

00:05:58 it might be kind of blocked up.

00:06:01 If it's processing some slow requests, we don't want it to have to just queue up behind it.

00:06:06 You want to be able to say, well, this one is busy, but there's three other processes

00:06:09 that are clones of this thing running and hand it off to one of them, right?

00:06:14 Typically that's done in production by using g-unicorn with u-vehicorn workers, which is

00:06:20 like, why am I using two servers?

00:06:21 Like to kind of manage the CEO.

00:06:23 So like g-unicorn manages u-vehicorn running this stuff.

00:06:26 Like what a mess, right?

00:06:27 So the news of this item is u-vehicorn now does all of that stuff itself.

00:06:34 It no longer needs g-unicorn.

00:06:36 And this news comes from us from John Hagan.

00:06:39 So thanks for shooting this our way.

00:06:40 So this is filed under the new multiprocess manager.

00:06:45 And it says the multiprocess manager introduced by this includes a process keep alive and

00:06:51 process hung detection.

00:06:53 It also imitates g-unicorn and uses a bunch of different types of signals to control the

00:06:59 child processes.

00:07:00 And there's even, I haven't opened it up yet, but I will.

00:07:04 There we go.

00:07:04 I'll include a link to how you use this in production.

00:07:08 So it's pretty easy.

00:07:10 You just say u-vehicorn and then the module name and then the variable name of the app.

00:07:16 So like main colon app, super common.

00:07:18 But then the new thing is --workers, and you can specify how many workers you want.

00:07:23 The documentation has four.

00:07:25 It says unlike g-unicorn, u-vehicorn does not use pre-fork, but uses spawn, which allows

00:07:30 u-vehicorn's multiprocess manager to work well on Windows as well.

00:07:35 The default process manager monitors the status of child processes.

00:07:39 Those are actually the things handling your web requests.

00:07:42 And it automatically restarts child processes that die unexpectedly.

00:07:46 That's a little morbid.

00:07:48 Not only that, it'll also monitor the status of child processes through the pipeline.

00:07:53 And if it gets stuck, it'll be killed off and restarted and so on.

00:07:58 So that's the new thing.

00:08:00 And if you're already using u-vehicorn, especially if you're using u-vehicorn workers with g-unicorn,

00:08:06 this might be a pretty awesome way to simplify things.

00:08:08 Not only it might be, you kind of need to because the u-vehicorn workers have been

00:08:14 deprecated as well.

00:08:15 The g-unicorn workers, you mean?

00:08:17 The...

00:08:18 Oh, yeah.

00:08:19 Oh, yeah, that's right.

00:08:20 It is deprecated and will be removed in a future release.

00:08:24 So I guess get busy, people.

00:08:25 Yeah.

00:08:29 So exciting news.

00:08:31 Yeah, indeed.

00:08:32 Changes.

00:08:32 Very exciting.

00:08:32 Now, do you know what else is exciting, Brian?

00:08:36 Mailtrap.

00:08:37 Yeah.

00:08:37 Our sponsor.

00:08:38 Yeah, let's talk about them for just a second.

00:08:41 This episode is sponsored by Mailtrap, an email delivery platform that developers love.

00:08:45 An email sending solution with industry best analytics, SMTP and email API, as well as

00:08:53 SDKs for major programming languages and 24/7 human support.

00:08:57 Try for free at mailtrap.io.

00:09:00 Over to you.

00:09:01 All right.

00:09:01 What you got next?

00:09:02 We got Pixie.

00:09:03 This, I did write down who suggested this, suggested by Vic Kelson.

00:09:08 So thanks, Vic.

00:09:08 Pixie is a package management made easy.

00:09:13 So another package manager thing.

00:09:15 This is something that says Conda package management simplified.

00:09:21 So this is not trying to replace pip, but really trying to and things like that.

00:09:26 But it's trying to replace Conda or build on Conda.

00:09:29 So I haven't really dug too much into this, but I think it's an interesting project.

00:09:33 This is a cross platform written in Rust, but it's also not just about Python.

00:09:41 It's about other languages as well.

00:09:44 So the highlights are supports multiple languages, including Python.

00:09:49 C++ are using Conda packages.

00:09:52 And there's some exciting information around it.

00:09:58 It's cargo like.

00:10:00 I think that it's built thinking, trying to get Conda to kind of look like cargo.

00:10:04 Like I said, I haven't tried this, but it looks exciting.

00:10:10 There is a Pixie tutorial for doing Python development with Pixie.

00:10:16 This walks through creating a Pixie Pi project, which creates a Pi project tunnel.

00:10:24 I found this interesting that it is using setup tools as a back end.

00:10:30 And then there's some extra Pixie project stuff around Conda forward.

00:10:34 So I think this is a tool if you were publishing to the Conda space, this might be a tool worth looking into to try to manage your Conda environments.

00:10:45 >> Yeah, definitely.

00:10:47 It's a super cool project.

00:10:49 I feel like there was some collaboration between them and maybe the UV folks.

00:10:56 I can't remember.

00:10:57 But yeah, it's a super cool project.

00:10:59 I actually had Wolf Volprec and Ruben Arts on last year in October to talk about this

00:11:05 on Talk Python.

00:11:06 So if you want to hear them dive into why they built it and all the plans there.

00:11:10 And actually, we talked about some other stuff as well that they're doing.

00:11:13 We talked about like NixOS and so on.

00:11:15 So yeah.

00:11:16 >> Interesting.

00:11:17 >> Awesome.

00:11:17 Yeah, it's awesome.

00:11:18 Just, you know, there's a thousand flowers blooming in the packaging space right now.

00:11:22 It's very exciting.

00:11:22 >> Yeah.

00:11:23 So this was mentioned by Vic, but he also gave us a little bit of what his take on it is.

00:11:30 So I'm just going to quote from Vic right now.

00:11:34 He says, "Pixie is a project manager written in Rust that allows you to build Python projects

00:11:39 without having Python previously installed." That's interesting.

00:11:43 "It's installable via Homebrew.

00:11:45 There's support for supporting VS Code and PyCharm via plugins to deal with this.

00:11:51 By default, Pixie fetches packages from CondaForge.

00:11:55 So you get the scientific stack in a pretty reliable and performant build.

00:12:00 And if it's not there, it looks on PyPI, or if there's a possibility to look on PyPI."

00:12:07 So Vic tried to use it.

00:12:09 He was really impressed and got his Jupyter environment with QPy using NVIDIA GPUs working

00:12:17 really quickly.

00:12:18 So at least one person says it's a pretty cool thing to try.

00:12:21 >> Yeah.

00:12:23 Scroll up in that screen you got there.

00:12:25 >> Scroll up?

00:12:26 Or the other way?

00:12:27 >> Other up.

00:12:27 Yeah, to the top.

00:12:28 >> Yeah, 2,100 people think it's a pretty good way.

00:12:31 The number of stars there.

00:12:32 >> Yeah, yeah.

00:12:33 >> Exactly.

00:12:34 All right.

00:12:35 Final one for me is Jupyter.

00:12:39 So we already talked about NumPy, which also is the foundation of so many other data science

00:12:45 projects.

00:12:46 So here's maybe looking at it from the other direction of the data science space, looking

00:12:51 in from the top, from the UI.

00:12:52 So JupyterLab 4.2 and Jupyter Notebook 7.2 are now available.

00:12:59 So it's pretty awesome.

00:13:00 JupyterLab includes three new features.

00:13:03 I'll give you some shout outs on them.

00:13:06 20 enhancements, 33 bug fixes, and 29 maintenance tasks included by 39 contributors, which is

00:13:14 pretty awesome, right?

00:13:15 >> Yeah.

00:13:15 >> And Jupyter Notebook, I think, carries, you know, takes some of these forward as well.

00:13:21 So also has a bunch of fixes.

00:13:23 All right.

00:13:23 So what are some of the features?

00:13:24 Easier workspace management with the GUI.

00:13:28 So you can, instead of using the CLI or just grabbing a URL, for example, if you want to

00:13:33 have it open up a particular notebook when you launch it or something, you could create

00:13:37 a workspace with that open, I believe, instead of just pointing to a URL to that particular

00:13:43 notebook, right?

00:13:44 So now there's like a UI for workspaces that you can control, rename them, reset them,

00:13:50 delete them, and so on.

00:13:51 That's pretty cool.

00:13:52 You have recently opened and closed files.

00:13:55 So there used to be an extension called JupyterLab-recents to give you access to recent files and recent

00:14:01 directories.

00:14:02 And now that just comes built in.

00:14:04 So I guess if you have the extension still installed, you'll really know what recent

00:14:07 files you had, but now it probably disables it or something.

00:14:11 It has full notebook windowing mode by default.

00:14:15 That's not like a screen layout type thing.

00:14:18 Suppose you have a notebook with a thousand cells and their output, and those outputs

00:14:23 have interactive notebook widgets and Jupyter widgets, and they've got a bunch of graphs

00:14:28 and stuff.

00:14:29 If you open that thing up and it just goes, well, we're going to render all thousand items,

00:14:34 you know, it might take a moment, right?

00:14:35 Yeah.

00:14:36 So instead what it does is it basically renders only the cells visible on the window, which

00:14:41 should be for as it gets larger and larger, should be more important for performance.

00:14:47 Improved shortcut editor.

00:14:49 So you can do a bunch of different, better things.

00:14:51 In fact, like even change default bindings and stuff.

00:14:54 Dark, high contrast theme, more keyboard shortcuts or putting some of them back like control

00:15:01 D has been restored to allow users to delete a line and that type of stuff.

00:15:05 So there you have it.

00:15:06 If you are a notebook person, go forth and get the new one for you, whether JupyterLab

00:15:12 or Jupyter Notebook.

00:15:13 That's pretty exciting.

00:15:14 I'm glad to see this is continuing with the new releases.

00:15:18 So yeah, it's a really nice, really nice way to work with Python and data science and all

00:15:22 the things.

00:15:23 All the things.

00:15:24 How extra are you feeling today?

00:15:26 I got a few extras.

00:15:28 All right, do it.

00:15:28 Okay.

00:15:29 Tell us about them.

00:15:29 Okay.

00:15:30 This was this a couple of things came from Hugo Von Kinnam, I practiced this earlier.

00:15:36 Hugo Von Kaminada.

00:15:37 Sorry if I messed this up, Hugo.

00:15:41 But anyway, some encouragement for us to test Python 3.13.

00:15:46 So Python 3.13 is in the betas out and we're trying to, it's got some interesting stuff

00:15:54 in it, like the free threaded mode.

00:15:57 So a couple links here to encourage people to help test and some blog posts to help you

00:16:05 know how to test it.

00:16:06 So help test Python 3.13.

00:16:08 There's an announcement here, strongly encouraging people to test and then a specific test around

00:16:15 the free threading Python without the GIL and a reminder that some people call this

00:16:20 no gill, but we don't like to say that anymore.

00:16:23 So the free threading mode and how to test that.

00:16:27 And that one's a little tricky because you've got to, there are some official installers,

00:16:32 but you can build it yourself as well.

00:16:34 And it's available as well and get the dead snakes.

00:16:37 There's a question marker on GitHub Actions.

00:16:40 It'd be great if that works, like to hear back from people.

00:16:44 But we really want this to go well with this because it's a cool project.

00:16:49 So help test that.

00:16:51 So that's around the Python.

00:16:53 That's probably the biggest change, the biggest change facing people using 3.13 and packages

00:17:00 that you might be using that are on 3.13 and all those things, because those were not built

00:17:04 with this in mind.

00:17:05 Whereas everything else is built at least with the concept of backwards compatibility.

00:17:09 Right.

00:17:09 But this one.

00:17:10 Right.

00:17:10 But there's a break break.

00:17:12 I'm sure there's places where they've had to change this, the normal stuff as well, just

00:17:17 to keep get that ready for that.

00:17:19 So I encourage people, even if you're not planning on testing any part of the GIL versus

00:17:24 with free threading to test 3.13 anyway, just to make sure that there are no surprises with

00:17:30 your project and report them if there are.

00:17:32 Last thing, I have been fairly quiet on the Python test podcast recently, but there is

00:17:38 a an episode that came out the other day, how to get pytest to import your code under

00:17:43 test.

00:17:43 So 2.21 is out.

00:17:45 These are not going to come out very regularly, but occasionally they'll drop.

00:17:49 So I'll mention them.

00:17:50 And yeah, there's a new one.

00:17:52 So that's those are my extras.

00:17:54 Yeah, cool.

00:17:55 What's very excellent about podcast clients is even if something doesn't come out for

00:18:01 six weeks, when it does, boom, it just shows up right in your list.

00:18:04 Yeah, people will know.

00:18:06 Do you have extras?

00:18:07 I do.

00:18:08 I have just one quick bit of follow up.

00:18:11 So remember, Brian, we talked about the higher order company and we talked about bend, a

00:18:16 programming, a parallel programming language that is Python like it looks like Python.

00:18:22 That's the thing.

00:18:22 I feel like I maybe gave the impression that it is Python.

00:18:27 It's not Python.

00:18:28 It's just Python like.

00:18:31 So you could look at code and say, yeah, that is Python, but you might not be able to import

00:18:34 a bunch of things or there's certain things you can't do.

00:18:37 Right.

00:18:37 So it's a big time subset and maybe not exactly even a subset.

00:18:42 Right.

00:18:42 Anyway, I got some some follow up from Bernard Gabor.

00:18:46 I just wanted to read just so because I think it sounds like he's got more experience than

00:18:50 I do for sure.

00:18:51 So it says bend looks roughly like Python, but is nowhere, nowhere there actually.

00:18:57 For example, it has no for loops.

00:18:59 Instead, you're meant to use the bend keyword, hence the language name to expand calculations

00:19:04 and another keyword to join branches.

00:19:06 So basically think of something that resembles Python at a high level, but without being

00:19:11 compatible with that and without any of the standard library or packages that the Python

00:19:15 language provides.

00:19:16 That being said, it does an impressive job at parallelization, but essentially it's a

00:19:20 brand new language with new syntax and paradigms you'll have to learn.

00:19:24 It just shares the first look similar to Python.

00:19:26 So, yeah, if you want to check that out, I'm sure it's awesome, but it's going to be its

00:19:31 own kind of thing.

00:19:32 Yeah.

00:19:32 Yeah.

00:19:33 That's not funny, but you know what is funny?

00:19:35 What's funny?

00:19:37 Do while loops.

00:19:38 They're hilarious.

00:19:39 Do while loops are hilarious.

00:19:40 All right.

00:19:40 Describe what's going on in this picture without maybe the words here for us, Brian.

00:19:45 People dancing at a party with somebody in the corner looking at them.

00:19:48 Yeah.

00:19:48 So there's a couple, there's like a crowd of people dancing, having fun, just foot loose,

00:19:55 carefree, having a good time.

00:19:56 And there's someone in the corner with a party hat and a drink, but the most serious look on

00:20:00 their face as if the world is about to end and the people in the room don't know it.

00:20:05 And the quote says, they don't know today.

00:20:07 I finally ran into a situation that required a do while.

00:20:11 They're just going about it like life is normal.

00:20:16 And here it is, the do while.

00:20:18 We have do while in Python?

00:20:21 I was just thinking that I think no, but we have while else, which you could probably

00:20:26 end into some weird, I don't know.

00:20:28 I don't really think you ever need to do while.

00:20:30 I don't know why languages have this.

00:20:32 Amazing.

00:20:36 But it's a funny joke nonetheless.

00:20:38 Yeah, definitely.

00:20:38 Nice.

00:20:41 Do you know what's not funny?

00:20:44 It's the end of the podcast.

00:20:46 Oh, it is the end of the podcast.

00:20:48 I have to say goodbye, Brian, to everyone.

00:20:51 Until next week.

00:20:52 Yes, until next week.

00:20:54 Thank you, everyone, for listening.

00:20:55 We always appreciate it.

00:20:57 Thanks.

00:20:58 Bye.

