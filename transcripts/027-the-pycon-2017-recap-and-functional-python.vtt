WEBVTT

00:00:00.001 --> 00:00:06.940
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:06.940 --> 00:00:09.780
This is one of your hosts, Michael Kennedy.

00:00:09.780 --> 00:00:11.140
And this is Brian Okken.

00:00:11.140 --> 00:00:15.300
And we're here with our first post-PyCon episode.

00:00:15.300 --> 00:00:18.040
So, Brian, let's just jump straight into it.

00:00:18.040 --> 00:00:19.280
How was PyCon for you?

00:00:19.280 --> 00:00:22.840
Yeah, I wanted to bring up that right away because it was incredible.

00:00:22.840 --> 00:00:24.280
It's the first one I've been to.

00:00:24.280 --> 00:00:28.400
And I got to say, it was even more than I expected.

00:00:29.080 --> 00:00:29.900
Hard to put in word.

00:00:29.900 --> 00:00:30.800
We hung out.

00:00:30.800 --> 00:00:32.260
We had a booth there.

00:00:32.260 --> 00:00:35.220
Thanks to everybody that showed up to say hi.

00:00:35.220 --> 00:00:39.120
Apologies to anybody that stopped by and we weren't around at the time.

00:00:39.120 --> 00:00:42.920
But, Michael, you were pretty good about hanging out and talking with everybody.

00:00:42.920 --> 00:00:44.860
Yeah, I went deep into the hallway track.

00:00:44.860 --> 00:00:45.700
Yeah.

00:00:45.700 --> 00:00:55.380
Which meant I mostly ended up spending time at the booth having conversation with people or at other people's booth talking to them or something to that effect.

00:00:55.380 --> 00:00:57.700
That's the real value of PyCon to me.

00:00:57.840 --> 00:00:59.520
Like, I think the talks are amazing.

00:00:59.520 --> 00:01:03.260
And I really enjoy the keynotes and things like that.

00:01:03.260 --> 00:01:10.260
But the open spaces and these, like, impromptu meetings, that's where it's at for me with PyCon.

00:01:10.260 --> 00:01:13.740
Yeah, actually, the open spaces, that's something I didn't really do much.

00:01:13.740 --> 00:01:17.860
And I think that I'll have to make sure to do that more next time.

00:01:17.860 --> 00:01:19.140
They put up those.

00:01:19.240 --> 00:01:24.900
For anybody that hasn't gone, they put up these boards with just, like, a whole bunch of empty rooms.

00:01:24.900 --> 00:01:26.760
And you can just sign up for a time slot.

00:01:26.760 --> 00:01:28.900
And if you get it, you have it.

00:01:28.900 --> 00:01:31.140
They start out fresh each morning.

00:01:31.400 --> 00:01:34.060
So, people just hang out and do things.

00:01:34.060 --> 00:01:35.760
And it's not just all testing related.

00:01:35.760 --> 00:01:37.500
Or not testing related.

00:01:37.500 --> 00:01:38.240
Python related.

00:01:38.240 --> 00:01:42.700
Sometimes they do things like tie knots and stuff like that.

00:01:43.380 --> 00:01:46.180
Yeah, one thing that I went to was how to start a business.

00:01:46.180 --> 00:01:50.280
One that I went to was how to market yourself as a developer.

00:01:50.280 --> 00:01:52.100
And then I actually ran two.

00:01:52.100 --> 00:01:55.000
One was, like, a Python podcaster meetup.

00:01:55.000 --> 00:01:55.680
That was really cool.

00:01:55.680 --> 00:01:56.500
A bunch of people came.

00:01:56.500 --> 00:01:57.340
Thanks to everyone who came.

00:01:58.060 --> 00:02:05.120
And then one on out-of-the-box ideas for improving the diversity of funding for PyPI.

00:02:05.120 --> 00:02:07.560
So, that's something that will be coming out later.

00:02:07.560 --> 00:02:08.980
That requires some write-up.

00:02:08.980 --> 00:02:09.640
Oh, that's cool.

00:02:09.640 --> 00:02:09.980
Yeah.

00:02:09.980 --> 00:02:17.860
For my benefit, as well as the people listening, I'm going to put a link to the YouTube channel with all of the talks.

00:02:17.860 --> 00:02:22.080
Unfortunately, all these, like, open spaces and stuff aren't recorded.

00:02:22.680 --> 00:02:29.340
But one of the things that also I wanted to bring up was that I was surprised how much I enjoyed the lightning talks.

00:02:29.340 --> 00:02:38.280
I think it's neat to have a full range of people that are really great at speaking and people that they're new to it as well.

00:02:38.280 --> 00:02:39.320
Yeah, it's pretty.

00:02:39.320 --> 00:02:44.820
If you want to try your hand at public speaking and you're new, like, five minutes is not too tough.

00:02:44.820 --> 00:02:46.920
Although it's a big audience, it's only five minutes.

00:02:46.920 --> 00:02:47.260
Yeah.

00:02:47.260 --> 00:02:48.000
Okay.

00:02:48.000 --> 00:02:52.440
And, yeah, lastly, I wanted to say it's amazing.

00:02:52.600 --> 00:02:53.700
How many people know Michael?

00:02:53.700 --> 00:02:56.380
Man.

00:02:56.380 --> 00:02:57.620
I also find this amazing.

00:02:57.620 --> 00:03:00.560
It's, like, entirely humbling and, you know, it was amazing.

00:03:00.560 --> 00:03:00.940
Yeah.

00:03:00.940 --> 00:03:01.520
Okay.

00:03:01.520 --> 00:03:03.320
Well, let's move on.

00:03:03.320 --> 00:03:03.680
Awesome.

00:03:03.680 --> 00:03:04.080
Okay.

00:03:04.080 --> 00:03:22.340
So, keeping in the current latest state-of-the-art, like we talked about with many, many things at PyCon, we recently heard that AWS Lambda, which has nothing to do with Python Lambdas, it's just the serverless computing offering from AWS, has started supporting Python 3.6.

00:03:22.520 --> 00:03:27.040
And so, someone else who was there at the conference was Matt Makai from Fullstack Python.

00:03:27.040 --> 00:03:43.140
And he put together this little quick tutorial on just how can you quickly set up a AWS Lambda Python 3.6 function and do some interesting things like read from the environment variables and things like that to create this little app.

00:03:43.140 --> 00:03:43.560
Nice.

00:03:43.560 --> 00:03:43.840
Yeah.

00:03:43.840 --> 00:04:04.420
So, basically, if you can write a function, like a single function, then you can pretty much write and deploy these AWS Lambda functions, which, if you have something kind of like a micro service, micro architecture type thing, then, you know, maybe it makes a lot of sense to do it as these little AWS Lambdas.

00:04:04.560 --> 00:04:11.780
I'm actually going to have a guy tomorrow, a guy named Ryan, come and talk about serverless computing in general on Talk Python.

00:04:11.780 --> 00:04:15.360
But here's a little precursor if people want to check this out.

00:04:15.360 --> 00:04:15.940
Oh, that's cool.

00:04:15.940 --> 00:04:18.500
I'll be looking forward to listening to that.

00:04:18.500 --> 00:04:21.180
I was just curious on the Lambdas.

00:04:21.180 --> 00:04:24.180
Do you know if the functions you put in there have to have names?

00:04:25.080 --> 00:04:28.960
They have names, but you basically map them to endpoints that you can set up.

00:04:28.960 --> 00:04:30.260
And there's all sorts of events.

00:04:30.260 --> 00:04:34.320
Like, they maybe are not even public in terms of HTTP.

00:04:34.320 --> 00:04:36.880
Like, they might not be web service endpoints.

00:04:36.880 --> 00:04:37.620
They could be.

00:04:37.620 --> 00:04:39.120
It's basically event-driven.

00:04:39.120 --> 00:04:44.620
So, for example, you can say, I would like this function here, whatever you name it.

00:04:44.620 --> 00:04:46.960
It's kind of irrelevant, but you have to pick the name, right?

00:04:47.140 --> 00:04:55.140
I would like this function here to execute when somebody uploads a file to this subfolder, this bucket in S3.

00:04:55.140 --> 00:04:55.480
Okay.

00:04:55.480 --> 00:04:55.840
Right?

00:04:55.840 --> 00:05:02.940
So, maybe you're going to do, like, let's say we have a video delivery service for, like, training or something.

00:05:02.940 --> 00:05:15.360
Well, if you upload a new video, you might want to create an adaptive stream, like a low bandwidth, a high bandwidth version, different formats, like MP4 versus WebM or something like that.

00:05:15.440 --> 00:05:26.640
Like, you could detect when a file is dropped there and automatically, by virtue of effectively just uploading to S3, have this code manage and juggle all that in the background, and you don't ever have to do anything.

00:05:26.640 --> 00:05:32.760
So, you can set up these cool event-triggered things, but it could just be as simple as, like, here's an HTTP endpoint.

00:05:32.760 --> 00:05:33.100
Okay.

00:05:33.100 --> 00:05:34.140
I'm going to try that out.

00:05:34.140 --> 00:05:35.200
Yeah, it's pretty cool.

00:05:35.200 --> 00:05:35.940
Definitely.

00:05:35.940 --> 00:05:41.800
One of the things I talked about at the conference was PyPI and the Python Packaging Authority and so on.

00:05:41.800 --> 00:05:44.920
And that was around funding.

00:05:44.920 --> 00:05:51.300
But, you know, one of the reasons they have such a challenge with their infrastructure is because they have so many packages, right?

00:05:51.300 --> 00:05:51.560
Yeah.

00:05:51.560 --> 00:05:52.740
Yes.

00:05:52.740 --> 00:05:54.880
And so, you should put some more out there, everybody.

00:05:54.880 --> 00:05:55.280
Yes.

00:05:55.280 --> 00:05:56.560
Everybody, let's make more.

00:05:56.560 --> 00:05:57.740
Let's do more of that.

00:05:57.740 --> 00:06:02.320
There's a pretty good JetBrains article called How to Publish Your Package on PyPI.

00:06:02.320 --> 00:06:09.440
I think it does a really good job on talking about what all you have to put into your package.

00:06:09.440 --> 00:06:17.180
The structuring is pretty good, although I'd like to see them include the source directory in their article.

00:06:17.740 --> 00:06:28.420
But one of the things I liked was just a discussion of all the contents of the setup.py file, all the stuff that you've got to put in there, your license, your email.

00:06:28.420 --> 00:06:30.840
And I guess it's all pretty obvious.

00:06:30.840 --> 00:06:36.140
But when you just see it all in an example setup, it can be a little overwhelming.

00:06:36.140 --> 00:06:39.560
But it's really, there's the minimal amount of stuff you put in there.

00:06:39.560 --> 00:06:42.680
It's just not that complicated to put in there.

00:06:43.100 --> 00:06:52.260
I also liked that they, I hadn't seen a decent example recently of what you ought to put in your PYPIRC file.

00:06:52.260 --> 00:06:59.000
So, I guess it's like a, yeah, config file for, so that you can talk to PyPI easily.

00:06:59.000 --> 00:06:59.280
Right.

00:06:59.280 --> 00:07:04.800
Like, I think you could put like your account information so you don't have to like log in every time and stuff like that, right?

00:07:04.800 --> 00:07:05.060
Yeah.

00:07:05.260 --> 00:07:14.160
And then they talked about using Twine to push both to the test, the test repository, I guess, and then the actual one.

00:07:14.160 --> 00:07:16.140
That's something that people ought to do also.

00:07:16.140 --> 00:07:23.580
If you just want to try this out, but you don't have a package that you're ready to actually put out there to the world yet,

00:07:23.580 --> 00:07:27.300
you can use their test server and push things up and try it out.

00:07:27.300 --> 00:07:28.900
Yeah, definitely make use of the test server.

00:07:28.900 --> 00:07:33.020
And what surprised me is actually how easy it is to put something on PyPI.

00:07:33.440 --> 00:07:40.660
I found most of the difficulties that I ran into when I did this were actually around packaging itself, just purely packaging.

00:07:40.660 --> 00:07:43.940
And once you kind of had that solved, it was like, it wasn't too bad.

00:07:43.940 --> 00:07:48.320
Yeah, and I actually encourage people to just, yeah, come up with something and try it out.

00:07:48.320 --> 00:07:51.300
I have to drink my own Kool-Aid with this one.

00:07:51.300 --> 00:07:55.380
I still haven't put anything out there, so I got to put a couple of things up there.

00:07:55.380 --> 00:07:57.400
Yeah, maybe after you're done writing your book, huh?

00:07:57.400 --> 00:08:02.840
Yeah, actually, there's a lot of, quite a few pytest plugins that I'd like to write and put up there.

00:08:03.100 --> 00:08:04.220
Oh yeah, that'd be a good set.

00:08:04.220 --> 00:08:04.680
That'd be good.

00:08:04.680 --> 00:08:05.920
Yeah, that'd be awesome.

00:08:05.920 --> 00:08:10.920
Speaking of Pythons, Pythons live the same place where there are coconuts, right?

00:08:10.920 --> 00:08:12.100
No, that's...

00:08:12.100 --> 00:08:16.900
So, the next thing that we're going to talk about is called coconut.

00:08:16.900 --> 00:08:18.860
And there is a tie-in to Python.

00:08:18.860 --> 00:08:21.900
But you've got to go back to the origins.

00:08:21.900 --> 00:08:23.320
Back to Monty Python.

00:08:23.320 --> 00:08:24.320
Oh, right.

00:08:24.320 --> 00:08:24.800
Yeah, okay.

00:08:24.800 --> 00:08:29.020
Right, you know those knights that run around and they've got like those coconuts, they click together.

00:08:29.020 --> 00:08:29.660
Yeah.

00:08:29.660 --> 00:08:33.200
Because they don't actually have horses, but it sounds like the galloping, basically.

00:08:33.200 --> 00:08:35.140
We should have had some for the show.

00:08:35.140 --> 00:08:38.280
We should have brought some to PyCon and just run around with them.

00:08:38.280 --> 00:08:42.420
Next year, we know what to bring to Ohio.

00:08:42.420 --> 00:08:49.220
Okay, so the next thing I want to talk about is a Pythonic functional programming language.

00:08:49.700 --> 00:08:53.580
Now, functional programming, you know, some people are really into it.

00:08:53.580 --> 00:08:56.100
Some people are, I don't know, kind of stay away from it.

00:08:56.100 --> 00:09:03.000
To me, it's one of those languages where it's kind of like a good puzzle more than, I don't know, like building blocks.

00:09:03.000 --> 00:09:10.860
But it's more like this thing you have to sort of, you write a little bit of code and then you think about it for a long time, deeply.

00:09:10.860 --> 00:09:15.900
And then you write two more, you know, characters and you're done or something like this, right?

00:09:16.240 --> 00:09:21.040
So it's very concise and it's very interesting to write, you know, basically functional programming.

00:09:21.040 --> 00:09:23.920
And there's many options that have been for a long time.

00:09:23.920 --> 00:09:25.900
Scheme, Haskell, whatever, right?

00:09:25.900 --> 00:09:28.120
F-sharp, Erlang, you name it.

00:09:28.120 --> 00:09:35.280
But as Python programmers, we have all of our awesome PyPI packages, just as we talked about.

00:09:35.280 --> 00:09:36.960
And we may have some more after the session, right?

00:09:37.720 --> 00:09:41.360
So we have all of those and then we may be of existing Python code.

00:09:41.360 --> 00:09:52.220
So Coconut is a functional programming language that is deeply functional and unique, but is a superset of Python, Python 3 specifically.

00:09:52.900 --> 00:10:04.600
So what that means is you can take a given existing Python 3 code and go and rewrite one function or one algorithm functionally rather than imperatively.

00:10:04.600 --> 00:10:08.400
And you can use all the PyPI packages because it's just Python.

00:10:08.400 --> 00:10:09.020
Okay.

00:10:09.020 --> 00:10:14.400
So you can gradually add functional programming to an existing application or something.

00:10:14.400 --> 00:10:14.740
Right.

00:10:14.740 --> 00:10:15.700
And you don't have to start over.

00:10:15.700 --> 00:10:20.600
Like you have to learn the functional programming concepts where they apply, but you don't have to use them all the time.

00:10:20.600 --> 00:10:22.160
You can just use them where they make sense.

00:10:22.160 --> 00:10:25.800
So there's all kinds of unique things for Coconut.

00:10:25.800 --> 00:10:29.780
There's pattern matching, which I'll tell you what that is in a minute because that's wild.

00:10:29.780 --> 00:10:35.300
There's basically algebraic data types, which are immutable data types.

00:10:35.300 --> 00:10:39.660
Think anytime you see a class, replace the word class with data and that becomes immutable.

00:10:39.660 --> 00:10:41.920
But there's some other cool stuff that happens.

00:10:41.920 --> 00:10:45.420
Really interesting parallelization operations.

00:10:45.420 --> 00:10:56.180
Because once you have immutable data types, many of the problems that you solve by paralyzing them, these algorithms become what's called embarrassingly parallel.

00:10:56.180 --> 00:10:57.080
Right.

00:10:57.080 --> 00:10:58.500
Embarrassingly parallelizable.

00:10:58.500 --> 00:10:58.760
Right.

00:10:58.760 --> 00:11:03.540
Like if there's no real interaction because everything's read only, well, just let it roll.

00:11:03.540 --> 00:11:03.740
Right.

00:11:03.740 --> 00:11:07.420
Just fork it out and just give the pieces to little sub processes or something.

00:11:07.420 --> 00:11:09.260
So there's a lot of cool stuff.

00:11:09.260 --> 00:11:11.380
But just to give you a sense, I'll tell you about the pattern matching.

00:11:11.920 --> 00:11:19.560
Suppose I want to write a recursive function or let's just say a function that implements, like say factorial.

00:11:19.560 --> 00:11:20.680
That's their example they have.

00:11:20.680 --> 00:11:22.680
You would have a function.

00:11:22.680 --> 00:11:23.680
It would take a number.

00:11:23.680 --> 00:11:24.740
It would have a test.

00:11:24.740 --> 00:11:28.220
It would say if this number is zero, then return one.

00:11:28.220 --> 00:11:35.420
Otherwise, do some multiplication stuff with the current number plus times the factorial of n minus one.

00:11:35.420 --> 00:11:36.140
Something like that.

00:11:36.140 --> 00:11:36.360
Right.

00:11:36.420 --> 00:11:37.860
And you would do this kind of recursion thing.

00:11:37.860 --> 00:11:42.960
So you have these if statements for different situations in your function.

00:11:42.960 --> 00:11:50.960
In coconut, you can define one function for the degenerative case and another function for different situations.

00:11:50.960 --> 00:12:00.520
So, for example, like your parameters can say, I would like to take an n, but only if the n is an integer and it's greater than zero.

00:12:00.520 --> 00:12:01.440
Oh, wacky.

00:12:01.500 --> 00:12:09.780
It's kind of like a method overloading in, say, C++, C#, Java, where it might match by type or type plus number of parameters.

00:12:09.780 --> 00:12:12.660
It does that, but by if statement.

00:12:12.660 --> 00:12:13.260
It's crazy.

00:12:13.260 --> 00:12:13.660
Okay.

00:12:13.660 --> 00:12:14.680
It's pretty mind-bending.

00:12:14.680 --> 00:12:16.220
Anyway, people, check it out.

00:12:16.220 --> 00:12:17.180
There's a cool tutorial.

00:12:17.180 --> 00:12:19.900
It's just pip install coconut, so easy to get started with.

00:12:20.440 --> 00:12:25.320
It's definitely worth looking at because, you know, it'll make you think a little differently, which is always good.

00:12:25.320 --> 00:12:25.880
Well, thanks.

00:12:25.880 --> 00:12:28.560
I guess I'm just going to go back to packaging again.

00:12:28.760 --> 00:12:35.260
But one of the things that I have had trouble with is understanding all the open source licenses.

00:12:35.260 --> 00:12:43.460
And I guess I got into open source a little bit when everybody was afraid of the GPL, especially in the corporate circles.

00:12:43.460 --> 00:12:50.480
And now, you know, I just knew that MIT was, like, not as freaky, I guess.

00:12:51.840 --> 00:12:57.920
MIT is, like, super simple and permissive if you want to use it, but it's hard to decide.

00:12:57.920 --> 00:13:03.000
For these more permissive licenses, for me, it's hard to decide, like, well, what if I want some restrictions?

00:13:03.000 --> 00:13:03.660
Right.

00:13:03.660 --> 00:13:03.980
Right?

00:13:03.980 --> 00:13:10.760
It's like, what can I offer this useful to people, but it has, like, the kind of protections I would like to have in this code, right?

00:13:10.760 --> 00:13:15.960
Plus, if you start reading it into it, there's a bunch of legalese that, like, I just glaze over.

00:13:15.960 --> 00:13:16.800
My eyes glaze over.

00:13:17.300 --> 00:13:24.820
So I ran across a site called choosealicense.com, and it's pretty darn cool.

00:13:24.820 --> 00:13:32.440
It talks about the MIT and Apache and GPL, but it also has, like, a cool list of all of the whole bunch of different licenses

00:13:32.440 --> 00:13:41.560
and has some color-coded bullets for what you're getting with those and what you're giving up and what rights you keep and all that.

00:13:41.560 --> 00:13:42.780
And I like it.

00:13:42.780 --> 00:13:43.280
It's good.

00:13:43.280 --> 00:13:44.240
Yeah, very nice.

00:13:44.240 --> 00:13:44.680
Very nice.

00:13:44.680 --> 00:13:47.000
We even have the unlicensed covered there.

00:13:47.000 --> 00:13:48.380
Which is pretty cool.

00:13:48.380 --> 00:13:53.500
And then also a comment about you don't have to, you don't actually have to pick a license if you don't want to.

00:13:53.500 --> 00:13:54.680
There's nobody forcing you to.

00:13:54.680 --> 00:13:57.680
Yeah, yeah, in which case you pretty much just retain the copyright.

00:13:57.680 --> 00:14:06.640
There's somewhat of a problem with that on GitHub, I believe, in that there's a number of what are meant to be open source projects on GitHub

00:14:06.640 --> 00:14:12.200
that just whoever created the repo didn't do the little dropdown and say, yes, pick a license and choose one.

00:14:12.200 --> 00:14:20.600
And so there's the stuff that looks like public open source because it's publicly accessible and it's on GitHub and you can clone it and do stuff.

00:14:20.600 --> 00:14:24.620
But there's technically no license, so it's not really open source, which is kind of interesting.

00:14:24.620 --> 00:14:37.100
Yeah, and I guess one of the reasons why I picked up on this is because I'm trying to teach people to use simple setup files so that you can make a package pip installable even locally.

00:14:37.100 --> 00:14:41.780
And one of the requirements is you have to fill something in for license.

00:14:41.780 --> 00:14:47.500
So you may as well just kind of think about it a little bit ahead of time so that you can throw it in there.

00:14:47.500 --> 00:14:48.060
Anyway.

00:14:48.140 --> 00:14:48.700
Yep, absolutely.

00:14:48.700 --> 00:14:49.380
It's a good idea.

00:14:49.380 --> 00:14:50.680
All right.

00:14:50.680 --> 00:14:53.200
Let's round it out with something free for people.

00:14:53.200 --> 00:14:54.040
A free book.

00:14:54.040 --> 00:14:57.640
So there's a book called Python for Scientists and Engineers.

00:14:57.640 --> 00:15:02.580
And I think this was not free before, but now just became free.

00:15:02.580 --> 00:15:12.620
So this is a book if you're getting into basically using Python for science or machine learning or natural language processing, all these different things.

00:15:12.620 --> 00:15:15.060
There's a bunch of examples of using it there.

00:15:15.060 --> 00:15:15.740
All right.

00:15:15.780 --> 00:15:18.300
So just to give you a sense, there's like some introductory stuff.

00:15:18.300 --> 00:15:24.700
And then they've got image and video processing in Python, data analysis with pandas, audio and digital signal processing.

00:15:24.700 --> 00:15:30.240
Of course, you've got to control your Raspberry Pi with Python because who wouldn't want that?

00:15:30.240 --> 00:15:35.100
A couple of things on machine learning like building an Amazon-like recommendation engine.

00:15:35.100 --> 00:15:44.420
And then a bunch of stuff on natural language processing and sentiment analysis and looking for spam and, you know, basically text processing type things.

00:15:44.700 --> 00:15:51.340
So if learning about those things and dabbling in those things sounds interesting, here's a book with a bunch of applied chapters.

00:15:51.340 --> 00:15:51.820
Nice.

00:15:51.820 --> 00:15:52.960
Lots of cool stuff in there.

00:15:52.960 --> 00:15:59.700
There's all these cool things that I would love to know and would love to learn and have no applicable use for in my world.

00:15:59.700 --> 00:16:01.140
You know what I mean?

00:16:01.140 --> 00:16:08.680
Like I would love to build like a machine learning sort of something, but I have nothing to turn machine learning loose on right now.

00:16:08.680 --> 00:16:08.960
Yeah.

00:16:08.960 --> 00:16:14.700
And one of the things that I noticed in here is the audio and digital signal processing section.

00:16:14.700 --> 00:16:27.000
I think that's pretty cool because it's been on pretty hard to get into DSP stuff before Python and some of the engineering tools that came about with Python made it a lot easier.

00:16:27.200 --> 00:16:28.220
So that's pretty neat.

00:16:28.220 --> 00:16:28.860
Yeah, absolutely.

00:16:28.860 --> 00:16:29.700
Yeah.

00:16:29.700 --> 00:16:29.900
Yeah.

00:16:29.900 --> 00:16:30.300
Very cool.

00:16:30.300 --> 00:16:31.800
So that's our news for this week.

00:16:31.800 --> 00:16:38.440
I don't know about your podcast, but mine is definitely going to be a buzz with lots of stuff that we learned at PyCon.

00:16:38.440 --> 00:16:41.920
So I want to loop it back to the very first thing that you covered.

00:16:41.920 --> 00:16:43.760
Be sure to go check out those videos.

00:16:43.760 --> 00:16:46.840
I don't know how many there are, but it's like a hundred presentations.

00:16:47.620 --> 00:16:48.540
It's crazy.

00:16:48.540 --> 00:16:49.720
And there's so many good ones.

00:16:49.720 --> 00:16:58.820
Actually, I'm not watching them while driving, but I'm listening to them while driving and then just knowing to get back to the slides later if I want to see that.

00:16:58.820 --> 00:16:59.340
Yeah.

00:16:59.340 --> 00:17:07.400
And a lot of those talks, I think you can get like the 80% just in audio and it's probably good enough because you might not watch it all, but you're stuck in traffic.

00:17:07.400 --> 00:17:07.960
So why not?

00:17:07.960 --> 00:17:08.140
Right?

00:17:08.140 --> 00:17:09.020
Yeah, definitely.

00:17:09.020 --> 00:17:09.580
Right on.

00:17:09.740 --> 00:17:11.140
So how's the book?

00:17:11.140 --> 00:17:21.180
I saw a great giant like floor to head height banner of the book, but what's that mean for the rest of us?

00:17:21.180 --> 00:17:22.580
It was a nice timing.

00:17:22.580 --> 00:17:26.780
It was hard to get it out, but we got the beta out available.

00:17:26.780 --> 00:17:33.000
So it's not available in hardback yet, but Python testing with pytest is available within a beta.

00:17:33.340 --> 00:17:40.500
So the first five chapters are ready and the first five chapters cover like just about everything you need to know.

00:17:40.500 --> 00:17:48.940
The only thing that's left to wrap up in the last couple of chapters is the configuration files, like the any file and stuff like that.

00:17:48.940 --> 00:17:55.800
And then the last chapter is going to be using pytest with other tools like with Selenium and with continuous integration.

00:17:55.800 --> 00:18:00.920
These are definitely meaty, nice things, but they are not things that are necessary to get learning.

00:18:01.180 --> 00:18:10.560
And I've already had one of the comments from Twitter is somebody bought it and said, wow, this is like the best thing to learn pytest.

00:18:10.560 --> 00:18:11.900
So that was a good.

00:18:11.900 --> 00:18:17.300
That's got to make you feel good after like months and months of months of working in isolation.

00:18:17.300 --> 00:18:19.360
Yeah, yeah, definitely.

00:18:19.360 --> 00:18:23.540
And also just like it's been an incredible experience working with an editor too.

00:18:23.540 --> 00:18:24.320
It's been good.

00:18:24.320 --> 00:18:26.060
Yeah, yeah, I'm sure it has.

00:18:26.060 --> 00:18:26.560
That's awesome.

00:18:26.560 --> 00:18:27.300
All right.

00:18:27.300 --> 00:18:29.100
Well, we have a link at the bottom of the show notes.

00:18:29.100 --> 00:18:31.400
And so people want to check it out, they can totally do that, right?

00:18:31.400 --> 00:18:31.760
Yeah.

00:18:31.760 --> 00:18:32.160
All right.

00:18:32.160 --> 00:18:33.400
Well, that's it for this week.

00:18:33.400 --> 00:18:35.220
Brian, as always, thank you.

00:18:35.220 --> 00:18:37.180
It was great to hang out with you at PyCon.

00:18:37.180 --> 00:18:39.560
And once again, thanks to everyone who stopped by.

00:18:39.560 --> 00:18:40.540
We met so many people.

00:18:40.540 --> 00:18:41.260
It was really amazing.

00:18:41.260 --> 00:18:41.480
Right.

00:18:41.480 --> 00:18:41.840
Incredible.

00:18:41.840 --> 00:18:42.380
Thanks.

00:18:43.980 --> 00:18:45.720
Thank you for listening to Python Bytes.

00:18:45.720 --> 00:18:48.280
Follow the show on Twitter via at Python Bytes.

00:18:48.280 --> 00:18:51.160
That's Python Bytes as in B-Y-T-E-S.

00:18:51.160 --> 00:18:54.600
And get the full show notes at pythonbytes.fm.

00:18:54.600 --> 00:18:58.940
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:18:58.940 --> 00:19:01.640
We're always on the lookout for sharing something cool.

00:19:01.640 --> 00:19:05.020
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:19:05.020 --> 00:19:08.660
Thank you for listening and sharing this podcast with your friends and colleagues.

