
00:00:00.000 --> 00:00:06.880
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:06.880 --> 00:00:12.680
This is one of your hosts Michael Kennedy, and this is Brian Okken, and we're here with our first


00:00:12.680 --> 00:00:19.220
post PyCon episode. So Brian, let's just jump straight into it. How was PyCon for you?


00:00:19.220 --> 00:00:23.720
Yeah, I wanted to bring up that right away because it was incredible. It's the first one


00:00:23.720 --> 00:00:27.960
I've been to and I gotta say it was it was even more than I expected.


00:00:28.800 --> 00:00:35.060
Hard to put in word we hung out. We had a booth there. Thanks to everybody that showed up to say hi


00:00:35.060 --> 00:00:41.220
Apologies to anybody that stopped by and we weren't around at the time. But Michael you were pretty good about hanging out and


00:00:41.220 --> 00:00:45.660
Talking with everybody. Yeah, I went deep into the hallway track. Yeah


00:00:45.660 --> 00:00:53.820
Yeah, I mostly ended up spending time at the booth having conversation with people or at other people's booth talking to them or


00:00:54.300 --> 00:00:55.700
or something to that effect.


00:00:55.700 --> 00:00:58.140
That's the real value of PyCon to me.


00:00:58.140 --> 00:01:01.100
I think the talks are amazing, and I really


00:01:01.100 --> 00:01:03.300
enjoy the keynotes and things like that.


00:01:03.300 --> 00:01:08.500
But the open spaces and these impromptu meetings,


00:01:08.500 --> 00:01:10.580
that's where it's at for me with PyCon.


00:01:10.580 --> 00:01:12.300
Yeah, actually, the open spaces, that's


00:01:12.300 --> 00:01:13.860
something I didn't really do much.


00:01:13.860 --> 00:01:16.060
And I think that I'll have to make sure


00:01:16.060 --> 00:01:18.380
to do that more next time.


00:01:18.380 --> 00:01:20.420
They put up those-- for anybody that hasn't gone,


00:01:20.420 --> 00:01:25.500
They put up these boards with just like a whole bunch of empty rooms and you can just


00:01:25.500 --> 00:01:27.300
sign up for a time slot.


00:01:27.300 --> 00:01:29.500
And if you get it, you have it.


00:01:29.500 --> 00:01:31.420
They start out fresh each morning.


00:01:31.420 --> 00:01:34.060
So people just hang out and do things.


00:01:34.060 --> 00:01:38.740
And it's not just all testing related or not testing related, Python related.


00:01:38.740 --> 00:01:43.220
Sometimes they do things like tie knots and stuff like that.


00:01:43.220 --> 00:01:44.220
Yeah.


00:01:44.220 --> 00:01:46.680
One thing that I went to was how to start a business.


00:01:46.680 --> 00:01:50.680
that I went to was how to market yourself as a developer.


00:01:50.680 --> 00:01:52.120
And then I actually ran two.


00:01:52.120 --> 00:01:54.980
One was like a Python podcaster meetup.


00:01:54.980 --> 00:01:55.680
That was really cool.


00:01:55.680 --> 00:01:56.600
Bunch of people came.


00:01:56.600 --> 00:01:58.000
Thanks to everyone who came.


00:01:58.000 --> 00:02:01.400
And then one on out-of-the-box ideas


00:02:01.400 --> 00:02:05.240
for improving the diversity of funding for PyPI.


00:02:05.240 --> 00:02:07.920
So that's something that'll be coming out later.


00:02:07.920 --> 00:02:09.160
That requires some write-up.


00:02:09.160 --> 00:02:09.760
Oh, that's cool.


00:02:09.760 --> 00:02:10.260
Yeah.


00:02:10.260 --> 00:02:13.160
For my benefit as well as the people listening,


00:02:13.160 --> 00:02:15.760
I'm going to put a link to the YouTube channel


00:02:15.760 --> 00:02:18.560
with all of the talks.


00:02:18.560 --> 00:02:21.000
Unfortunately, all these like open spaces and stuff


00:02:21.000 --> 00:02:22.380
aren't recorded.


00:02:22.380 --> 00:02:25.320
But one of the things that also I wanted to bring up


00:02:25.320 --> 00:02:28.460
was that I was surprised how much I enjoyed


00:02:28.460 --> 00:02:30.040
the lightning talks.


00:02:30.040 --> 00:02:34.560
I think it's neat to have a full range of people


00:02:34.560 --> 00:02:35.720
that are really great at speaking


00:02:35.720 --> 00:02:38.600
and people that they're new to it as well.


00:02:38.600 --> 00:02:40.800
- Yeah, it's pretty, if you want to try your hand


00:02:40.800 --> 00:02:42.120
at public speaking and you're new,


00:02:42.120 --> 00:02:44.820
like five minutes is not too tough.


00:02:44.820 --> 00:02:47.060
Although it's a big audience, it's only five minutes.


00:02:47.060 --> 00:02:48.500
- Yeah, okay.


00:02:48.500 --> 00:02:52.500
And yeah, lastly, I wanted to say it's amazing


00:02:52.500 --> 00:02:54.000
how many people know Michael.


00:02:54.000 --> 00:02:56.420
(both laughing)


00:02:56.420 --> 00:02:57.660
- I also find this amazing.


00:02:57.660 --> 00:03:00.700
It's like entirely humbling and it was amazing.


00:03:00.700 --> 00:03:02.020
- Yeah, okay.


00:03:02.020 --> 00:03:03.380
Well, let's move on.


00:03:03.380 --> 00:03:04.220
- Awesome, okay.


00:03:04.220 --> 00:03:08.660
So keeping in the current latest state of the art,


00:03:08.660 --> 00:03:11.660
like we talked about with many, many things at PyCon,


00:03:11.660 --> 00:03:16.300
We recently heard that AWS Lambda, which has nothing to do with Python Lambdas,


00:03:16.300 --> 00:03:22.380
it's just the serverless computing offering from AWS, has started supporting Python 3.6.


00:03:22.380 --> 00:03:27.100
And so, someone else who was there at the conference was Matt McKay from Full Stack Python,


00:03:27.100 --> 00:03:34.620
and he put together this little quick tutorial on just how can you quickly set up a AWS Lambda


00:03:34.620 --> 00:03:41.260
Python 3.6 function and do some interesting things like read from the environment variables


00:03:41.260 --> 00:03:43.300
and things like that to create this little app.


00:03:43.300 --> 00:03:44.140
- Nice.


00:03:44.140 --> 00:03:46.660
- Yeah, so basically if you can write a function,


00:03:46.660 --> 00:03:48.700
like a single function,


00:03:48.700 --> 00:03:51.500
then you can pretty much write and deploy


00:03:51.500 --> 00:03:53.620
these AWS Lambda functions,


00:03:53.620 --> 00:03:58.620
which if you have something kind of like a micro service,


00:03:58.620 --> 00:04:00.820
micro architecture type thing,


00:04:00.820 --> 00:04:02.900
then maybe it makes a lot of sense to do it


00:04:02.900 --> 00:04:04.600
as these little AWS Lambdas.


00:04:04.600 --> 00:04:07.580
I'm actually gonna have a guy tomorrow,


00:04:07.580 --> 00:04:08.460
a guy named Ryan,


00:04:08.460 --> 00:04:12.180
come and talk about serverless computing in general and talk Python to me.


00:04:12.180 --> 00:04:15.460
But here's a little precursor if people want to check this out.


00:04:15.460 --> 00:04:16.460
Oh, that's cool.


00:04:16.460 --> 00:04:18.860
I'll be looking forward to listening to that.


00:04:18.860 --> 00:04:23.420
I was just curious on the lambdas, do you know if the functions you put in there have


00:04:23.420 --> 00:04:24.780
to have names?


00:04:24.780 --> 00:04:29.300
They have names, but you basically map them to endpoints that you can set up.


00:04:29.300 --> 00:04:34.940
And there's all sorts of events like they maybe are not even public in terms of HTTP.


00:04:34.940 --> 00:04:37.060
They might not be web service endpoints.


00:04:37.060 --> 00:04:39.300
They could be, it's basically event driven.


00:04:39.300 --> 00:04:41.140
So for example, you can say,


00:04:41.140 --> 00:04:43.860
I would like this function here,


00:04:43.860 --> 00:04:45.620
whatever you name it, it's kind of irrelevant,


00:04:45.620 --> 00:04:47.500
but you have to pick the name, right?


00:04:47.500 --> 00:04:49.680
I would like this function here to execute


00:04:49.680 --> 00:04:53.680
when somebody uploads a file to this sub folder,


00:04:53.680 --> 00:04:55.340
this bucket in S3.


00:04:55.340 --> 00:04:56.180
- Okay.


00:04:56.180 --> 00:04:58.500
- Right, so maybe you're gonna do,


00:04:58.500 --> 00:05:00.300
like let's say you have a video delivery service


00:05:00.300 --> 00:05:03.360
for like training or something.


00:05:03.360 --> 00:05:04.900
Well, if you upload a new video,


00:05:04.900 --> 00:05:07.060
You might want to create an adaptive stream,


00:05:07.060 --> 00:05:11.140
like a low bandwidth, a high bandwidth version,


00:05:11.140 --> 00:05:14.740
different formats, like MP4 versus WebM,


00:05:14.740 --> 00:05:15.580
or something like that.


00:05:15.580 --> 00:05:18.260
Like you could detect when a file is dropped there


00:05:18.260 --> 00:05:21.060
and automatically, by virtue of effectively


00:05:21.060 --> 00:05:23.980
just uploading to S3, have this code manage


00:05:23.980 --> 00:05:25.380
and juggle all that in the background


00:05:25.380 --> 00:05:26.780
and you don't ever have to do anything.


00:05:26.780 --> 00:05:29.820
So you can set up these cool event triggered things,


00:05:29.820 --> 00:05:31.660
but it could just be as simple as like,


00:05:31.660 --> 00:05:32.940
here's a HTTP endpoint.


00:05:32.940 --> 00:05:34.540
- Okay, I'm gonna try that out.


00:05:34.540 --> 00:05:36.460
- Yeah, it's pretty cool, definitely.


00:05:36.460 --> 00:05:38.840
One of the things I talked about at the conference


00:05:38.840 --> 00:05:42.400
was PyPI and the Python Package Authority and so on.


00:05:42.400 --> 00:05:45.020
And that was around funding,


00:05:45.020 --> 00:05:48.980
but one of the reasons they have such a challenge


00:05:48.980 --> 00:05:49.820
with their infrastructure


00:05:49.820 --> 00:05:51.420
is 'cause they have so many packages, right?


00:05:51.420 --> 00:05:54.540
- Yeah, yes, and so you should put some more out there,


00:05:54.540 --> 00:05:55.940
everybody. - Yes, everybody,


00:05:55.940 --> 00:05:57.860
let's make more, let's do more of that.


00:05:57.860 --> 00:05:59.700
- There's a pretty good JetBrains article


00:05:59.700 --> 00:06:03.140
called "How to Publish Your Package on PyPI."


00:06:03.140 --> 00:06:10.100
I think it does a really good job on talking about what all you have to put into your package.


00:06:10.100 --> 00:06:16.100
The structuring is pretty good, although I'd like to see them include the source directory


00:06:16.100 --> 00:06:17.100
in their article.


00:06:17.100 --> 00:06:25.340
But one of the things I liked was just a discussion of all the contents of the setup.py file,


00:06:25.340 --> 00:06:29.260
all the stuff that you've got to put in there, your license, your email.


00:06:29.260 --> 00:06:34.740
I guess it's all pretty obvious, but when you just see it all in an example setup, it


00:06:34.740 --> 00:06:36.420
can be a little overwhelming.


00:06:36.420 --> 00:06:41.220
But it's really, there's the minimal amount of stuff you put in there, it's just not that


00:06:41.220 --> 00:06:42.940
complicated to put in there.


00:06:42.940 --> 00:06:49.140
I also liked that they, I hadn't seen a decent example recently of what you ought to put


00:06:49.140 --> 00:06:52.940
in your pypirc file.


00:06:52.940 --> 00:06:58.820
So I guess it's like a, yeah, config file for, so that you can talk to PyPI easily.


00:06:58.820 --> 00:07:04.540
Right, like I think you could put like your account information so you don't have to like log in every time and stuff like that


00:07:04.540 --> 00:07:11.380
Right. Yeah, and then they talked about using twine to push both to the test the test repository


00:07:11.380 --> 00:07:14.060
I guess and and then the actual one


00:07:14.060 --> 00:07:17.560
That's something that people ought to do also if you just want to try this out


00:07:17.560 --> 00:07:23.540
But you don't have a have a package that you you're ready to actually put out there to the world yet


00:07:23.540 --> 00:07:27.220
You can use their test server and and push things up and try it out


00:07:27.220 --> 00:07:29.140
Yeah, definitely make use of the test server.


00:07:29.140 --> 00:07:33.740
And what surprised me is actually how easy it is to put something on PyPI.


00:07:33.740 --> 00:07:38.260
I found most of the difficulties that I ran into when I did this were actually around


00:07:38.260 --> 00:07:40.860
packaging itself, just purely packaging.


00:07:40.860 --> 00:07:44.180
And once you kind of had that solved, it was like, it wasn't too bad.


00:07:44.180 --> 00:07:48.620
Yeah, and I actually encourage people to just come up with something and try it out.


00:07:48.620 --> 00:07:51.620
I have to drink my own Kool-Aid with this one.


00:07:51.620 --> 00:07:53.260
I still haven't put anything out there.


00:07:53.260 --> 00:07:55.500
So I got to put a couple of things up there.


00:07:55.500 --> 00:07:57.500
Yeah, maybe after you're done writing your book, huh?


00:07:57.500 --> 00:08:03.000
Yeah, actually, there's a lot of, quite a few pytest plugins that I'd like to write and put up there.


00:08:03.000 --> 00:08:04.300
Oh yeah, that'd be a good set.


00:08:04.300 --> 00:08:05.300
That'd be good.


00:08:05.300 --> 00:08:06.100
Yeah, that'd be awesome.


00:08:06.100 --> 00:08:11.000
Speaking of pythons, pythons live the same place where there are coconuts, right?


00:08:11.000 --> 00:08:13.500
No, that's...


00:08:13.500 --> 00:08:20.200
So, the next thing that we're going to talk about is called Coconut, and there is a tie-in to Python,


00:08:20.200 --> 00:08:23.500
but you've got to go back to the origins, back to Monty Python.


00:08:23.500 --> 00:08:24.900
Oh, right, yeah, okay.


00:08:24.900 --> 00:08:28.260
All right, you know those knights that run around and they've got like those coconuts,


00:08:28.260 --> 00:08:32.540
they click together because they don't actually have horses, but it sounds like the galloping


00:08:32.540 --> 00:08:33.540
basically.


00:08:33.540 --> 00:08:35.740
We should have had some for the show.


00:08:35.740 --> 00:08:41.220
We should have brought some to PyCon and just run around with them.


00:08:41.220 --> 00:08:42.940
Next year, we know what to bring to Ohio.


00:08:42.940 --> 00:08:49.900
Okay, so the next thing I want to talk about is a Pythonic functional programming language.


00:08:49.900 --> 00:08:53.700
Now, functional programming, you know, some people are really into it.


00:08:53.700 --> 00:08:56.440
Some people stay away from it.


00:08:56.440 --> 00:09:03.800
To me, it's one of those languages where it's like a good puzzle more than building blocks.


00:09:03.800 --> 00:09:06.720
It's more like this thing you have to sort of...


00:09:06.720 --> 00:09:11.960
You write a little bit of code and then you think about it for a long time deeply.


00:09:11.960 --> 00:09:17.000
Then you write two more characters and you're done or something like this.


00:09:17.000 --> 00:09:21.840
It's very concise and it's very interesting to write basically functional programming.


00:09:21.840 --> 00:09:27.120
There's many options that have been for a long time, Scheme, Haskell, whatever, F#,


00:09:27.120 --> 00:09:29.500
Erlang, you name it.


00:09:29.500 --> 00:09:35.360
As Python programmers, we have all of our awesome PyPI packages just as we talked about


00:09:35.360 --> 00:09:36.360
them.


00:09:36.360 --> 00:09:38.620
We may have some more after this session.


00:09:38.620 --> 00:09:39.620
We have all of those.


00:09:39.620 --> 00:09:42.120
Then we maybe have existing Python code.


00:09:42.120 --> 00:09:48.920
Coconut is a functional programming language that is deeply functional and unique, but


00:09:48.920 --> 00:09:53.320
is a superset of Python, Python 3 specifically.


00:09:53.320 --> 00:09:59.400
So what that means is you can take a given existing Python 3 code and go and rewrite


00:09:59.400 --> 00:10:06.000
one function or one algorithm functionally rather than imperatively.


00:10:06.000 --> 00:10:08.600
And you can use all the PyPI packages because it's just Python.


00:10:08.600 --> 00:10:14.200
Okay, so you can gradually add functional programming to an existing application or


00:10:14.200 --> 00:10:15.200
something.


00:10:15.200 --> 00:10:16.200
Right, you have to start over.


00:10:16.200 --> 00:10:19.920
to learn the functional programming concepts where they apply, but you don't have to use


00:10:19.920 --> 00:10:20.920
them all the time.


00:10:20.920 --> 00:10:23.000
You can just use them where they make sense.


00:10:23.000 --> 00:10:26.400
There's all kinds of unique things for Coconut.


00:10:26.400 --> 00:10:29.400
There's pattern matching, which I'll tell you what that is in a minute because that's


00:10:29.400 --> 00:10:30.640
wild.


00:10:30.640 --> 00:10:35.520
There's basically algebraic data types, which are immutable data types.


00:10:35.520 --> 00:10:39.880
Think anytime you see a class, replace the word class with data and that becomes immutable,


00:10:39.880 --> 00:10:43.160
but there's some other cool stuff that happens.


00:10:43.160 --> 00:10:48.120
interesting parallelization operations because once you have immutable data


00:10:48.120 --> 00:10:53.000
types, many of the problems that you solve with parallelize by paralyzing


00:10:53.000 --> 00:10:56.280
them, these algorithms become what's called embarrassingly parallel.


00:10:56.280 --> 00:11:00.680
Embarrassingly parallelizable. If there's no real interaction


00:11:00.680 --> 00:11:04.600
because everything's read-only, well just let it roll. Just fork it out and


00:11:04.600 --> 00:11:08.640
just give the pieces to the little subprocesses or something. There's a


00:11:08.640 --> 00:11:11.000
lot of cool stuff but just to give you a sense, I'll tell you about the pattern


00:11:11.000 --> 00:11:17.240
and matching. Suppose I want to write a recursive function or let's just say a


00:11:17.240 --> 00:11:20.740
function that that implements like say factorial that's their example they have


00:11:20.740 --> 00:11:25.040
you would have a function it would take a number it would have a test it would


00:11:25.040 --> 00:11:31.000
say if this number is zero then return one otherwise do some multiplication


00:11:31.000 --> 00:11:35.400
stuff with the current number plus you know times the factorial of n minus 1


00:11:35.400 --> 00:11:39.080
something like that right and you would do this kind of recursion thing so you


00:11:39.080 --> 00:11:43.080
You have these if statements for different situations in your function.


00:11:43.080 --> 00:11:48.080
In Coconut, you can define one function for the degenerative case


00:11:48.080 --> 00:11:52.080
and another function for different situations.


00:11:52.080 --> 00:11:57.080
For example, your parameters can say, "I would like to take an n,


00:11:57.080 --> 00:12:01.080
but only if the n is an integer and it's greater than zero."


00:12:01.080 --> 00:12:06.080
It's kind of like a method overloading in, say, C++, C#, Java,


00:12:06.080 --> 00:12:10.480
where it might match by type or type plus number of parameters.


00:12:10.480 --> 00:12:12.800
It does that but by if statement.


00:12:12.800 --> 00:12:13.800
It's crazy.


00:12:13.800 --> 00:12:14.800
It's pretty mind-bending.


00:12:14.800 --> 00:12:16.320
Anyway, people check it out.


00:12:16.320 --> 00:12:17.560
There's a cool tutorial.


00:12:17.560 --> 00:12:20.720
It's just pip install coconut, so easy to get started with.


00:12:20.720 --> 00:12:24.720
It's definitely worth looking at because it'll make you think a little differently, which


00:12:24.720 --> 00:12:25.720
is always good.


00:12:25.720 --> 00:12:26.720
Well, thanks.


00:12:26.720 --> 00:12:29.240
I guess I'm just going to go back to packaging again.


00:12:29.240 --> 00:12:34.720
But one of the things that I have had trouble with is understanding all the open source


00:12:34.720 --> 00:12:40.520
licenses and I guess I got into open source a little bit when everybody was


00:12:40.520 --> 00:12:46.480
afraid of the GPL especially in the corporate circles and now you know I


00:12:46.480 --> 00:12:54.400
just knew that MIT was like not as freaky I guess. MIT is like super simple


00:12:54.400 --> 00:12:58.640
and permissive if you want to use it but it's hard to decide for these more


00:12:58.640 --> 00:13:02.480
permissive licenses for me it's hard to decide like well what if I want some


00:13:02.480 --> 00:13:07.200
restrictions. Right. Right. It's like, what can I offer this useful to


00:13:07.200 --> 00:13:10.120
people but it has like the kind of protections I would like to have in this


00:13:10.120 --> 00:13:13.880
code. Right. Plus if you start reading it into it, there's a bunch of legalese


00:13:13.880 --> 00:13:19.320
that like I just glaze, my eyes glaze over. So I ran across a site called


00:13:19.320 --> 00:13:26.880
choosealicense.com and it's pretty darn cool. It talks about the MIT and Apache


00:13:26.880 --> 00:13:32.000
and GPL but it also has like a cool list of all of the whole bunch of different


00:13:32.000 --> 00:13:37.320
licenses and has some color-coded bullets for what you're getting with those and what


00:13:37.320 --> 00:13:42.000
you're giving up and what rights you keep and all that.


00:13:42.000 --> 00:13:43.000
And I like it.


00:13:43.000 --> 00:13:44.000
It's good.


00:13:44.000 --> 00:13:45.000
Yeah, very nice.


00:13:45.000 --> 00:13:46.000
Very nice.


00:13:46.000 --> 00:13:48.560
We even have the unlicensed covered there, which is pretty cool.


00:13:48.560 --> 00:13:52.760
And then also a comment about you don't have to, you don't actually have to pick a license


00:13:52.760 --> 00:13:53.760
if you don't want to.


00:13:53.760 --> 00:13:54.760
There's nobody forcing you to.


00:13:54.760 --> 00:13:55.760
True.


00:13:55.760 --> 00:13:56.760
Yeah, yeah.


00:13:56.760 --> 00:13:59.040
In which case, you pretty much just retain the copyright.


00:13:59.040 --> 00:14:01.760
There's somewhat of a problem with that on GitHub.


00:14:01.760 --> 00:14:06.680
I believe in that there's a number of what are meant to be open source projects on GitHub


00:14:06.680 --> 00:14:10.800
that just the whoever created the repo didn't do the little drop down and say, "Yes, pick


00:14:10.800 --> 00:14:13.140
a license and choose one."


00:14:13.140 --> 00:14:17.560
And so there's the stuff that looks like public open source because it's publicly accessible


00:14:17.560 --> 00:14:21.840
and it's on GitHub and you can clone it and do stuff, but there's technically no license


00:14:21.840 --> 00:14:24.720
so it's not really open source, which is kind of interesting.


00:14:24.720 --> 00:14:25.720
Yeah.


00:14:25.720 --> 00:14:29.680
And I guess one of the reasons why I picked up on this is because I'm trying to teach


00:14:29.680 --> 00:14:37.920
people to use simple setup files so that you can make a package pip installable even locally.


00:14:37.920 --> 00:14:42.480
In one of the requirements is you have to fill something in for license.


00:14:42.480 --> 00:14:47.080
So you may as well just kind of think about it a little bit ahead of time so you can throw


00:14:47.080 --> 00:14:48.080
it in there.


00:14:48.080 --> 00:14:49.080
Anyway, yeah, absolutely.


00:14:49.080 --> 00:14:50.080
It's a good idea.


00:14:50.080 --> 00:14:54.320
All right, let's round it out with something free for people a free book.


00:14:54.320 --> 00:14:58.560
So there's a book called Python for Scientists and Engineers.


00:14:58.560 --> 00:15:03.260
And I think this was not free before, but now just became free.


00:15:03.260 --> 00:15:08.760
So this is a book if you're getting into basically using Python for science or machine learning


00:15:08.760 --> 00:15:12.900
or natural language processing, all these different things.


00:15:12.900 --> 00:15:14.840
There's a bunch of examples of using it there.


00:15:14.840 --> 00:15:15.840
Right.


00:15:15.840 --> 00:15:18.620
So just to give you a sense, there's like some introductory stuff.


00:15:18.620 --> 00:15:23.260
And then they've got image and video processing in Python data analysis with pandas, audio


00:15:23.260 --> 00:15:25.620
and digital signal processing.


00:15:25.620 --> 00:15:30.220
Of course, you got to control your Raspberry Pi with Python, because who wouldn't want


00:15:30.220 --> 00:15:31.220
that?


00:15:31.220 --> 00:15:35.420
A couple of things on machine learning, like building an Amazon-like recommendation engine,


00:15:35.420 --> 00:15:40.980
and then a bunch of stuff on natural language processing and synonym analysis and looking


00:15:40.980 --> 00:15:45.740
for spam and basically text processing type things.


00:15:45.740 --> 00:15:48.860
If learning about those things and dabbling in those things sounds interesting, here's


00:15:48.860 --> 00:15:51.340
a book with a bunch of applied chapters.


00:15:51.340 --> 00:15:52.340
Nice.


00:15:52.340 --> 00:15:55.520
stuff in there. There's all these cool things that I would love to know and


00:15:55.520 --> 00:16:00.880
would love to learn and have no no applicable use for in my world. You know


00:16:00.880 --> 00:16:04.440
what I mean? Like I would love to build like a machine learning sort of


00:16:04.440 --> 00:16:08.900
something but I have nothing to turn machine learning loose on right now. Yeah


00:16:08.900 --> 00:16:13.280
and one of the things that I noticed in here is the audio and digital signal


00:16:13.280 --> 00:16:18.440
processing section. I think that's pretty cool because it's it's been on pretty


00:16:18.440 --> 00:16:24.560
hard to get into DSP stuff before Python and some of the engineering tools that


00:16:24.560 --> 00:16:28.280
came about with Python made it a lot easier. So that's pretty neat.


00:16:28.280 --> 00:16:32.840
Yeah, absolutely. Yeah, yeah, very cool. So that's our news for this week. I don't know


00:16:32.840 --> 00:16:36.960
about your podcast but mine is definitely going to be a buzz with lots


00:16:36.960 --> 00:16:41.000
of stuff that we learned at PyCon. So I want to loop it back to the very first


00:16:41.000 --> 00:16:44.400
thing that you covered. Be sure to go check out those videos. I don't know how


00:16:44.400 --> 00:16:49.160
many there are but it's like a hundred presentations. It's crazy and there's so


00:16:49.160 --> 00:16:52.840
many good ones. Actually I'm not watching them while driving but I'm listening to


00:16:52.840 --> 00:16:58.120
them while driving and then just knowing to get back to the slides later if I


00:16:58.120 --> 00:17:01.920
want to see that. Yeah and a lot of those talks I think you can get like the 80%


00:17:01.920 --> 00:17:06.040
just in audio and it's probably good enough because you might not watch it


00:17:06.040 --> 00:17:09.800
all but you're stuck in traffic so why not right? Yeah definitely. Right on. So


00:17:09.800 --> 00:17:11.280
So how's the book?


00:17:11.280 --> 00:17:18.960
I saw a great giant like floor to head height banner of the book.


00:17:18.960 --> 00:17:21.320
But what's that mean for the rest of us?


00:17:21.320 --> 00:17:22.760
It was a nice timing.


00:17:22.760 --> 00:17:27.360
It was hard to get it out, but we got the beta out available.


00:17:27.360 --> 00:17:32.600
So it's not available in hardback yet, but Python testing with pytest is available within


00:17:32.600 --> 00:17:33.760
a beta.


00:17:33.760 --> 00:17:36.280
So the first five chapters are ready.


00:17:36.280 --> 00:17:40.640
the first five chapters cover like just about everything you need to know. The


00:17:40.640 --> 00:17:44.460
only thing that's left to wrap up in the last couple chapters is the


00:17:44.460 --> 00:17:50.000
configuration files like the NE file and stuff like that. And then the last


00:17:50.000 --> 00:17:54.840
chapter is going to be using pytest with other tools like with Selenium and with


00:17:54.840 --> 00:17:58.680
continuous integration. These are definitely meaty nice things but they


00:17:58.680 --> 00:18:02.680
are not things that are necessary to get learning. And I've already had one of the


00:18:02.680 --> 00:18:08.900
comments from Twitter is somebody bought it and said, "Wow, this is like


00:18:08.900 --> 00:18:11.940
the best thing to learn pytest." So that was a good...


00:18:11.940 --> 00:18:16.180
That's got to make you feel good after like months and months of months of


00:18:16.180 --> 00:18:21.260
working in isolation. Yeah, yeah, definitely. And also just like it's been


00:18:21.260 --> 00:18:25.580
an incredible experience working with an editor too. It's been good. Yeah, yeah, I'm


00:18:25.580 --> 00:18:28.740
sure it has. That's awesome. Alright, well we have a link at the bottom of the


00:18:28.740 --> 00:18:31.660
show notes so people want to check it out. They can totally do that, right? Yeah.


00:18:31.660 --> 00:18:33.780
All right, well, that's it for this week.


00:18:33.780 --> 00:18:35.180
Brian, as always, thank you.


00:18:35.180 --> 00:18:37.940
It was great to hang out with you at PyCon.


00:18:37.940 --> 00:18:39.700
And once again, thanks to everyone who stopped by.


00:18:39.700 --> 00:18:40.700
We met so many people.


00:18:40.700 --> 00:18:41.700
It was really amazing.


00:18:41.700 --> 00:18:42.700
>> Right.


00:18:42.700 --> 00:18:43.700
Incredible.


00:18:43.700 --> 00:18:44.700
Thanks.


00:18:44.700 --> 00:18:45.700
>> Thank you for listening to Python Bytes.


00:18:45.700 --> 00:18:48.620
Follow the show on Twitter via @pythonbytes.


00:18:48.620 --> 00:18:51.740
That's Python Bytes as in B-Y-T-E-S.


00:18:51.740 --> 00:18:55.060
And get the full show notes at pythonbytes.fm.


00:18:55.060 --> 00:18:58.740
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:18:58.740 --> 00:18:59.740
way.


00:18:59.740 --> 00:19:02.240
the lookout for sharing something cool.


00:19:02.240 --> 00:19:05.700
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:19:05.700 --> 00:19:08.740
Thank you for listening and sharing this podcast with your friends and colleagues.

