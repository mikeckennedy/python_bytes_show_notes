00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 154 recorded October 23rd 2019 I'm Michael Kennedy and I'm Brian I can and we have a special guest Bob elderbos. Welcome Bob. Hey, thanks for having me Yeah, yeah. Welcome back here been too long since you've been on the show. Yeah, I was a while back Glad to be back for sure glad you're here So before we get on to other things this show is brought to you by data dog check them out at pythonbytes.fm/datadog.

00:00:28 All sorts of good stuff happening there.

00:00:30 Tell you more about that later.

00:00:31 Brian, I feel like when I'm working on my editors, I'm never done tweaking my colors or picking the right font.

00:00:38 And as soon as I get comfortable with one, I'm like, "Oh, but did you see this one?

00:00:41 I'm going to switch to that now." You have that same problem?

00:00:43 No, I don't, actually.

00:00:45 [laughs]

00:00:46 You find them and stick with them, huh?

00:00:48 I never really thought about the font I use during coding.

00:00:51 I mean, I do sometimes.

00:00:54 So i'm nearing fifty years old my eyes are fifty year old eyes so i do have to do things like make the font bigger and stuff it never occurred to me to try a different font for my editor until i read this article so there's an article called lesser known coding fonts.

00:01:12 that talks about some of the benefits and drawbacks or mostly benefits of some of the different fonts out there that i hadn't even heard of there's an.

00:01:20 APL three eighty five unicode font which actually looks pretty nice go mono that was developed i'm not sure if it's part of the go programming language thing i don't know.

00:01:33 The one that interested me at the end of this, there's a one called input mono.

00:01:38 And there's a professional font designer, Jonathan David Ross, that developed it.

00:01:43 It's not free, but it's sort of free.

00:01:47 If it's for your personal use and for coding fonts, that's pretty much your personal use.

00:01:52 You can just download it and add it.

00:01:54 And I just downloaded this and added it, and I kind of like using it.

00:01:58 It's easier for me to read quickly.

00:02:01 And there's a really kind of a nice video called Cracking the Code, where Jonathan himself talks about developing it and basically why he cares about fonts and coding fonts.

00:02:12 Anyway, I thought it was interesting, especially people that might have trouble seeing their screen or having to push their monitor closer to their eyes, maybe trying a different font might be a good idea.

00:02:23 Yeah, for sure. You know, the thing that I did, I love this article, the thing that I did that has made a tremendous difference, and I'm Getting older my eyes are definitely getting less good as well is to get a 4k 32 inch monitor Night and day it's made all the difference and it's only made me more obsessive about my fonts because now they're even more crisp and clear I'm like, oh now I really got to dial these babies in I love some of the ones mentioned here. I use hack a lot That's a great one source code Pro is really nice But I am just all about the fear of code these days fear of code with its font ligatures on Okay, we should put a link to some of those because I've never heard of some of these.

00:02:59 Yeah, I mean they're a reference but they're not linked in this article.

00:03:02 Fear of code and I guess all the font ligature ones are crazy because you know in like math you were taught that not equals, you have the equal sign, you put a line through it, right?

00:03:11 But we don't have that symbol on our keyboard.

00:03:13 You'd say exclamation mark equals or if you said less than you would have like the arrow and then like the double arrow on the bottom to say less than or equal to.

00:03:21 When you turn on font ligatures with like fear code, and I see some of the fonts you're calling out here also, it has a category of font ligatures, yes or no.

00:03:29 When you turn those on, it becomes those symbols.

00:03:31 So like exclamation mark equals is one character on the screen with like an equal and a slash through it.

00:03:36 - Okay, that's useful.

00:03:37 - It's really interesting.

00:03:38 What's cool is it's not changing your code, it just changes how your code is shown to you.

00:03:43 So you're not actually, no one else on your team has to like it or agree with it or whatever, but if you like it, it's like, and it does a bunch of cool stuff for like other representations.

00:03:51 >> Yeah, I really like this one here at the end that you pick, input mono.

00:03:54 >> In the input family, it's a huge family.

00:03:56 And there's even some non-mono space fonts within it.

00:04:00 And they're all intended to be good on your eyes while editing.

00:04:05 It didn't even occur to me to not use a mono space font.

00:04:07 But sometimes it's nice to have things a little bit more condensed.

00:04:11 And an eye character doesn't have to take up the same width as a Z, for instance, or whatever.

00:04:17 >> That's cool.

00:04:17 Bob, how about you?

00:04:18 What's your thoughts on that?

00:04:19 I have honestly not really used many phone types, but I'm really eager to check it out now.

00:04:27 It's, yeah, as you get older and older screen time, it's definitely fundamental.

00:04:32 And a big screen, I lately started using at work, it makes all the difference.

00:04:36 So yeah, I'm eager to try it out now.

00:04:39 - Yeah, you might have even a higher res screen than I do.

00:04:42 You might have 5K or something like that, right?

00:04:45 It's pretty close.

00:04:46 - I'm not exactly sure.

00:04:47 I have the iMac 27, so it's pretty awesome.

00:04:51 Got some potential there.

00:04:52 - So Mike, you just wrote down fear of code, and it's F-I-R-A, and yes, I have tried that, that's nice.

00:04:59 When you said it at first, I thought you were saying like fear of code.

00:05:02 - Fear of code.

00:05:03 You may have fear of code, and you may be looking at that code with fear of code, but they're not necessarily related.

00:05:11 It's awesome, yeah, I love that, that the font ligatures turned on.

00:05:16 And you've got to, even with you enable those fonts, you have to enable your editor to show the ligatures, not just the fonts, just so you know, like if you're trying that out.

00:05:24 Also another thing that's down here that kind of is blowing my mind.

00:05:28 I, I was thinking maybe you pulled up something not safe for work here, Brian.

00:05:31 It has something on Reddit at slash R slash Unix porn, but then I pulled up the link and wow, what a cool place to just flip through awesome stuff about Linux, like screenshots and fonts and all sorts of stuff.

00:05:43 What a weird name for a Reddit channel or Reddit, whatever you call those things.

00:05:48 It is weird, but man, it's, I could just flip through those for a while.

00:05:50 That's pretty awesome.

00:05:51 Let's move on to the next one.

00:05:54 Now, Bob, what do you got for us here?

00:05:55 You're a fan of Django, right?

00:05:56 And not a news item per se.

00:05:58 I think this resource has been out there for a while.

00:06:01 It's the Django admin handbook.

00:06:03 It's a free online page and PDF.

00:06:07 If you subscribe with your email, the good PDF is about 40 pages or so.

00:06:12 You can just read it in the evening and it's chock full of useful tips and tricks using the Django admin.

00:06:19 And as a Django developer, you inevitably will be using the admin.

00:06:24 I use it both for a co-challenges as well as a project at work.

00:06:28 And just reading this doc, I learned a bunch of useful tricks.

00:06:33 I have a couple of favorite actually.

00:06:36 Yeah.

00:06:37 For example, on the list view of an admin page of a model, I had some expensive property going on and that would trigger a query for every row.

00:06:48 So what I learned from the book was that you can override the get query set and do like one annotated query.

00:06:56 And so for the whole list view, you then have like one big query instead of a query per row and the page.

00:07:03 Oh, interesting.

00:07:04 It's almost like a, like the N plus one problem of ORMs where you have a relationship that you should have pre-joined, but you didn't, but I didn't realize that that was happening in the admin section.

00:07:14 That's cool.

00:07:15 Yeah.

00:07:16 A bit like select related.

00:07:17 Yeah, exactly.

00:07:18 Uh huh.

00:07:19 So I used that for a page and yeah, I had the problem with that property and got resolved just reading this document.

00:07:26 The other thing, a nice little trick there, how to export CSV from a Django admin.

00:07:32 So you have a lot of data in your database, you can just export it to CSV and then dump it in a Jupyter notebook and do some pandas analysis.

00:07:41 So that's neat to have that interface.

00:07:44 And another one I liked is overriding the save behavior for Django admin.

00:07:48 I used that lately when we an exercise on the platform, and we made an opt in that people get an email right at the moment that we save the new exercise.

00:07:59 And for that, you can overwrite the safe method of the model.

00:08:03 Wow.

00:08:04 You're using the admin to trigger like outbound notifications.

00:08:07 Interesting.

00:08:08 Yeah.

00:08:09 So you can just overwrite the safe method.

00:08:10 And if the object is not yet in the database, then the first time it's created, you do some action and then after that you add it the object and you don't do the action.

00:08:20 So it's really nice to do that with overwriting the safe method.

00:08:24 So that's all stuff I got from this document.

00:08:26 And then I subscribe them email.

00:08:27 I've got a couple of PDFs more.

00:08:30 That's a nice resource.

00:08:31 Yeah, that looks really cool.

00:08:32 Yeah, awesome.

00:08:33 Another one that looks really useful is sorting by calculated fields and filtering by them and yeah, a lot of nice stuff.

00:08:39 Cool.

00:08:40 Well, before we move on to the next one, let me tell you all about Datadog.

00:08:43 They're sponsoring this episode.

00:08:45 They're a cloud scale monitoring platform built by engineers for engineers.

00:08:49 And they're tracing client auto instruments, all the good things like Django, for for example, but Flask and AsyncIO and MongoDB and all that, and lets you pivot seamlessly between requests across your different systems.

00:09:05 So from your database to your web app, things like that down to the frameworks, get metrics and logs and just visit pythonbytes.fm/datadog, start a free trial, get a cool Datadog t-shirt to go with it.

00:09:19 Now I want to cover something that's kind of major here.

00:09:23 I'm gonna talk about a project that has been in the works, oh geez, almost, I don't know, 30 years?

00:09:30 I don't know, a very long time, right?

00:09:32 So I'm gonna talk to you about CPython, the code, source code.

00:09:37 So Anthony Shaw, friend of the show, and we haven't covered that much by him.

00:09:41 It's probably been a few weeks since we've covered something that Anthony's done.

00:09:44 And he wrote this article that Bob properly referred to as a book over at RealPython, right, Bob?

00:09:52 - Yeah. (laughs)

00:09:54 - It's really good over there.

00:09:55 It's called Your Guide to the CPython Source Code.

00:09:58 Now, basically it gets you started by checking out the source code and then talks you through it and like highlights a bunch of different scenarios and then looks at the CPython source code so you understand it better, right?

00:10:10 Like the article talks about Python's memory management.

00:10:13 It says, and here are the objects and here's the data structure that does X, Y, and Z.

00:10:17 And it's all look here how it's implemented has a linked list of arenas for small object allocation, for example.

00:10:24 We actually talked about that a while ago, Brian.

00:10:27 And so if you are thinking, "Hey, I want to understand CPython code better, like the source code of CPython," definitely check out this article.

00:10:37 So I'm just going to talk about a few things that I pulled out that I thought were pretty awesome.

00:10:40 So first of all, if I want to get the code to CPython, there used to be a bunch of options.

00:10:46 It was under Mercurial for a while.

00:10:48 But now it's pretty natural.

00:10:50 Git clone github.com/python/cpython That's it, right?

00:10:55 I think it's awesome that cPython is on GitHub.

00:10:57 Yeah, that's nice.

00:10:58 Indeed.

00:10:59 Yeah. And then, how do you compile it?

00:11:01 Like, something as massive as cPython itself, with all the variations and all the C code, you might think it's going to be challenging to compile.

00:11:11 But he has a bunch of good steps for the three main platforms, Mac OS, Windows, and Linux, Linux, how you go through them.

00:11:18 On Mac OS, I did that.

00:11:20 It took me about five minutes to get the whole thing compiled, set up it compiled, and super easy to follow along.

00:11:25 So that was great.

00:11:26 And on Windows, there's a Visual Studio solution project.

00:11:30 You just open that up, set a few settings, and you're off to the races.

00:11:34 So getting the source code and compiling it is actually just a couple of commands on command prompt, terminal, and you're good to go.

00:11:41 Then one of the things that's pretty interesting to look at what you get after you check it out, right?

00:11:47 So let's just maybe talk through the structure of CPython a little bit.

00:11:51 So you've got, I don't know, what is this?

00:11:54 14, 13 different directories.

00:11:56 So if you look at what you get when you get CPython, you get the docs, which is source for documentation.

00:12:02 You get the grammar on how that's all defined, right?

00:12:05 It's the thing that's converted by the PEG parser into actual parser that you can use.

00:12:12 All the C include header files, and then a lib folder that has all the parts of the standard library that are written in Python.

00:12:20 And looking through here, I saw a bunch of interesting stuff.

00:12:23 So there's some cool little hidden goodies that I think of them as.

00:12:27 So for example, I was looking at the concurrency section, so lib concurrent features.

00:12:32 There's like process.py and thread.py and stuff like that.

00:12:36 And I'm like, "Oh, what's the process one look like?" If you open that up, there's a giant ASCII diagram inside there that shows you the workflow and the data exchange like swim lanes and all sorts of stuff in the source code in the comments.

00:12:51 Oh, wow.

00:12:51 Yeah.

00:12:52 Similarly, if you go to like the JSON module, it's got like diagrams in ASCII about what's happening in there.

00:12:58 I was like, wow, really?

00:12:59 This is better than I expected.

00:13:00 Wow.

00:13:01 So it's super fun to poke around in there and see the parts of the library that are written in Python.

00:13:06 I also have some other stuff, Mac support files, miscellaneous modules.

00:13:11 This is the opposite of the lib section.

00:13:12 This is the standard library parts written in C.

00:13:15 So if you want to see how that works.

00:13:17 Stuff for the object model, the parser, PC and PC build stuff for Windows, programs for source code for the Python executable and binaries and things like that.

00:13:30 Then actually this Python for the CPython interpreter and tools for standalone tools for building and extending Python.

00:13:36 So this is what you get.

00:13:38 And then this article kind of talks you through a whole bunch of it.

00:13:40 So you can read the article and dig in some more stuff that I don't think we really have time to cover, but I thought was pretty interesting was.

00:13:48 Like deeply looking at the Python interpreter process and how that works, you know, with the C source code as reference, the C Python compiler and execution loop, right?

00:13:59 People don't think of URC Python code as compiled, but it is, it's only just partway compiled.

00:14:05 It's compiled to the bytecode, the PYC files, and then it's evaluated, not JIT compiled or whatever.

00:14:11 Looking at the objects and how those are managed in Python on the standard library, and then finally, one of the things covered in the article, just like a little minor section of it, 'cause it's covered so much, is like, oh yeah, well let's add actually a new keyword to Python and whatnot, as like a small part in the parsing section.

00:14:30 And so if you actually wanted to like do some change and then deploy it and run it, it talks about installing like a custom version, like taking this version and installing it and stuff.

00:14:38 So, you know, as I was going through this, I'm thinking really, you know, if you're a professional Python developer, knowing this kind of stuff, you should probably know it.

00:14:48 You should know Python has two types of garbage collection, primarily reference counting, but also garbage collection.

00:14:53 Oh, and when does it run?

00:14:54 And like, what are the pressures and what are the trade-offs and so on.

00:14:57 Like this type of reference is what you need to dig down at that detail without actually becoming a core developer.

00:15:03 - That's really impressive.

00:15:04 The amount of detail and the diagrams and the code.

00:15:09 I'm really thankful that this article's out there, right?

00:15:12 Because it can be quite intimidating.

00:15:15 And here you have this guy that walks you through it with nice graphs and explanations.

00:15:21 - Yeah, for sure.

00:15:22 - Definitely want to look into it.

00:15:23 - Set aside.

00:15:24 It used to be a lot more complicated than it is now.

00:15:27 So highlighting it in an article that it really is only a few minutes to get started, that's really cool.

00:15:33 - Absolutely.

00:15:34 Brian, what do you got next for us?

00:15:35 - The next one is, I'm not sure why I hesitated, six Django template tags not often used in tutorials.

00:15:42 And so this intrigued me.

00:15:44 I'm not a Django expert, but I've looked through several tutorials before and done a couple Django sites.

00:15:51 These were fun and I haven't used them either.

00:15:53 So the article goes through six tags, but I'm pulling out a few of them.

00:15:57 So the empty tag, there's a for loop you can do with the tagging system so you can iterate through collections or arrays to populate, to fill out your HTML file.

00:16:09 But if there's nothing in the array, you can have an empty section to have some extra text or extra HTML output for if there's nothing there.

00:16:18 That's kind of neat.

00:16:19 >>Yeah, like here's where the list would go, but you know, nothing yet.

00:16:22 Or oops, there's nothing there yet.

00:16:23 You have to add.

00:16:24 That's cool.

00:16:25 There's a built-in lorem ipsum generator.

00:16:27 I had no idea.

00:16:28 Bob, did you know about this?

00:16:30 So this is just cool.

00:16:31 And basically that's it.

00:16:32 You don't have to add anything.

00:16:34 Django apparently has a built-in lorem ipsum generator.

00:16:37 That's neat.

00:16:38 So have you used this Bob?

00:16:40 No, I'm surprised that I don't know about any of those six.

00:16:45 And I see already some refactoring candidates, especially the four empty.

00:16:50 I would definitely look if student list had something before looping.

00:16:54 Now you can just use empty or lorem.

00:16:57 I would probably pass in some lorem text from the view and just put it in the template.

00:17:01 Pretty impressive.

00:17:02 >> Well, especially when you're trying to get your template looking right.

00:17:06 It's hard to see that when it's empty.

00:17:08 So being able to throw some stuff in there, that's kind of cool.

00:17:11 And then verbatim, that'd be good if you're going to basically, for instance, if you're going to talk about Django template tags, it would be hard to do that unless you had some way to turn off the parsing of it.

00:17:25 So you can use these.

00:17:26 You know a place where that verbatim looks really interesting?

00:17:28 I had the office hours for DocPython courses, and some folks in there were saying, "I found it a little bit tricky to combine Django and Vue.js because they have the same similar tags.

00:17:40 The double handlebars mean certain things and whatnot." And they're like, "Well, I'm going to put some Vue.js section into my Django templates, but Django keeps like wrecking my Vue.js templates.

00:17:51 You can just wrap your whole Vue.js app in this.

00:17:53 In the article it mentions that if you got something else down the tool chain like your JavaScript library or something that's going to re-change things, you can use this to make sure Django doesn't.

00:18:04 I think it's really cool that it's got built-in lorem ipsum.

00:18:07 It's something that I've been using just that seems like, lorem ipsum is cool, right?

00:18:11 You can get like random sort of Latin stuff in there that obviously is fake, but it looks like real text, right?

00:18:19 It doesn't look like just the same words repeated or something.

00:18:22 But, you know, being from Portland, I find that it's, you got to take it up a notch.

00:18:26 And there's a place called hipsteripsum.com.

00:18:29 If you go there, you can generate, it has a little generator to say, how many paragraphs do you want?

00:18:36 And do you want like hipster neat or hipster with a shot of Latin?

00:18:39 And you run it and it comes up with like stuff that is like super hipstery.

00:18:45 - Oh yeah, I just did that.

00:18:48 - Selfies, three, Wolf, Moon, Edison Bulb, Adapt Gen, Cray Organic, Venmo, what do you got?

00:18:55 - Portland, Bond Me, Vaporware, Polaroid, Farm to Table, Iceland, selfies.

00:19:01 - I love it, I love it.

00:19:03 But it is really cool that lorem ipsum is built into Django, I had no idea.

00:19:08 - Could we get hipsum built into Django?

00:19:10 That would be better.

00:19:11 - We should definitely get it built in there.

00:19:13 Awesome. So Bob, this one that you're going to cover next, this is brand new to me. I guess I've seen it all over, but I just learned that what it is today.

00:19:24 Yes. So you want to post some code on Twitter and you want to look at nice. So we're using carbon.now.sh a lot, which basically lets you create those terminal PNG images of code with nice color formatting and yeah, it's, that's very easy to use.

00:19:46 You just choose the font.

00:19:48 Talking about fonts.

00:19:49 Yes, exactly.

00:19:50 the language and, put the code in there and, that's nice.

00:19:54 integration with Twitter.

00:19:56 So you can click tweet button, but we actually, use it with Selenium to, populate it automatically with our tips and it generates a, a cached image, or I think it posts the image to Twitter and then provides you a Twitter link.

00:20:12 And then you can embed that link in your tweets.

00:20:14 And I saw actually, today, yeah, more developers overall these days using it on Twitter.

00:20:20 I see a lot of those images and they're probably, probably all from a Carmen dot now.

00:20:24 Yeah, they probably are.

00:20:25 They just look very nice.

00:20:27 Yeah, this is great.

00:20:28 Yeah.

00:20:28 It gives you like a screenshot of, a generic ish.

00:20:31 Terminal with code in it.

00:20:34 That's like color formatted and indented.

00:20:36 And then it just lets you export an image or directly tweet it.

00:20:40 I love it.

00:20:40 I say generic ish because it's got the three Mac windowing icons in the left and not the windows or the Ubuntu ones or whatever, but still like it's, it's really cool.

00:20:50 I like it.

00:20:51 Especially for Twitter, right?

00:20:53 If the code doesn't fit in 140 characters, it's, it's nice to put it on an image.

00:20:58 And besides it just looks way better.

00:21:01 I love it.

00:21:02 This is awesome.

00:21:02 I'm going to start using this.

00:21:03 I don't know yet for what.

00:21:04 I'm very tempted to use it for my courses, but I'm not sure it fits the Zen exactly.

00:21:10 So I have to decide.

00:21:11 It looks like the default font is hack.

00:21:13 That's nice.

00:21:15 Oh yeah.

00:21:15 Speaking of which that's a good one.

00:21:17 Yeah.

00:21:17 I love hack.

00:21:17 That's cool.

00:21:18 Okay, great.

00:21:19 All right.

00:21:19 Well, this is a great one.

00:21:20 And if you want to post any code, yeah.

00:21:22 The, one of the problems with posting any form of code, you know, certain places, it'll like not accept the formatting and it'll just completely wreck it.

00:21:30 Like for example, if I'm in a zoom meeting and I'm going to say, yeah, here, this code, you know, that's going to come out completely destroyed the people receiving And then on Twitter, like you said, you want to talk about the code, but you don't want the code to count as towards your 280 words. I really like this. It's great. I'm going to start using it.

00:21:48 So the last thing I want to cover, our main items this week, is about bugs in Python code.

00:21:56 And yeah, it's pretty interesting. This one was sent to us by actually quite a few people this week.

00:22:04 So it comes from Jacqueline Wilson, Jesper Sorensen, and Eric Palmer, all sent this over and said, "Hey, this is crazy.

00:22:14 You all should talk about this." So researchers found a bug in a Python script that was super subtle, really based on an assumption that may have affected hundreds of academic peer-reviewed published studies.

00:22:30 That sounds bad, right?

00:22:31 Yeah.

00:22:32 So it turns out that in this, there's a paper, of course, how do you rebut code bugs in academia?

00:22:42 You publish a paper.

00:22:43 So in a paper published in October 8th, a couple weeks ago, some folks at the University of Hawaii, researchers there, found a programming error in a set of Python scripts used for computational analysis of chemistry data.

00:22:56 It started returning different results based on the operating system you were running on.

00:23:01 That's bad.

00:23:02 That's not amazing.

00:23:04 It turns out that they were using Python's glob.glob and assuming it was sorted, but it was not sorted.

00:23:12 Sometimes.

00:23:13 Wow.

00:23:14 The reason that matters is something, what I'm kind of thinking is it worked, this script works with a bunch of files, one after another after another, and they kind of build up together to generate a result.

00:23:24 And so if you don't take them in order, it doesn't mean the same thing.

00:23:27 Okay.

00:23:28 I'm sure everyone's thinking like, "Oh yeah, it was probably on Windows it did this, but on Linux it did that, but on Mac it did that." It was actually worse.

00:23:36 It was more subtle than that.

00:23:38 So they found that it returned correct results on Mac OS Mavericks and Windows 10, but on Mac OS Mojave and on Ubuntu, the results were off.

00:23:47 So even across different versions of Mac OS, it changed because they were relying on the underlying operating system to do some sorting that they needed.

00:23:58 and apparently not so much.

00:24:00 - GloVe is very close to the OS, right?

00:24:02 - Yeah, it's just basically, there's no promises about sorting.

00:24:05 It just happened to be the OS they first developed it on.

00:24:08 It was.

00:24:09 Yeah, so they were trying to analyze the results from an experiment involving cyanobacteria, and they discovered significant variations in the results run against the same nuclear magnetic resonance spectroscopy, NMR data.

00:24:23 And yeah, it turned out to be not so good.

00:24:26 - So basically, the fix was incredibly simple, right?

00:24:29 Like you get the glob data and you just like call sort on the result, you know what I mean?

00:24:34 And then you process it.

00:24:36 It's just one of those things, you make an assumption and the assumption is wrong or it becomes wrong over time because it was never a promise, it was just implicit.

00:24:44 And yeah, stuff breaks.

00:24:45 - Wow, testing on multiple machines is good.

00:24:49 - Yes, it's a very good idea, right?

00:24:51 - One of the reasons, I mean, especially running some of these tests on, this would be like a system level having to have the files there and test them.

00:25:00 I don't know how you would do that individually, but doing it out on continuous integration service that used multiple operating systems, I guess, would be good.

00:25:11 - That seems like it could work in a reasonable way for sure.

00:25:14 Yeah, so basically the conclusion of all this, one of the professors who discovered the problem, William said that he hopes the paper will get scientists to pay more attention to the computational side of experiments in the future and maybe do a little more things like unit testing and whatnot, right?

00:25:31 - Yeah.

00:25:32 - Last part's my bit, I'll throw in there for him.

00:25:33 But yeah, anyway, this is rough.

00:25:37 I don't know, I feel like a lot of science is, both science is incredibly amazing and yet kind of rickety.

00:25:44 Like it's on a very unstable foundation sometimes.

00:25:48 - One of the differences now is that people can follow what kind of, they're even able to reproduce some science or able to reproduce the analysis part.

00:25:58 Whereas this wouldn't have been caught before.

00:26:01 It wouldn't have even ever been run again.

00:26:03 It was just, it would be run once on somebody's computer in their lab.

00:26:07 They publish the paper and then they put it away.

00:26:09 - Right, they say, here's the results of our computation.

00:26:11 Here's what we did.

00:26:12 And here was our methodology for doing it, but not here is the open source package on PyPI.

00:26:17 Why is it not working for you, right?

00:26:19 That's pretty cool.

00:26:20 So this is good to highlight some of the things to look for.

00:26:23 And we always have to be a little bit more cautious than we were before.

00:26:26 - Yeah, absolutely.

00:26:28 Well, pretty cool.

00:26:29 And that's it for our main topics this week.

00:26:31 Brian, you got anything else you want to throw out there?

00:26:32 - This wasn't really big enough to warrant a big topic, but there was an interesting discussion called using big tech tools.

00:26:42 And I just wanted to highlight it because it's a little bit interesting.

00:26:45 Basically, the question is, if I, Vicky Boyk has brought it up, or at least she highlighted it on Twitter, that if you, like things like PyTorch and other things, there are some projects that are sponsored and heavily built by large corporations.

00:27:02 Should you use them if you don't like the corporation?

00:27:07 I don't have an answer for it, but it's an interesting question.

00:27:10 - Oh, how interesting, yeah.

00:27:11 And Vicky's doing some really cool stuff.

00:27:13 She's got this, she did hack your name for a while, which was that Y Combinator startup namer thing.

00:27:20 And yeah, a bunch of cool projects.

00:27:22 - That's cool.

00:27:23 - I think it was, yeah.

00:27:24 Hopefully I don't misattribute that.

00:27:25 It's not up anymore, so I can't double check it.

00:27:27 But yeah, I think it was.

00:27:29 But yeah, she's doing a bunch of cool work.

00:27:30 This is great.

00:27:31 - Yeah, the other thing I wanted to bring up is the second Portland West Python meetup is November 5th.

00:27:37 So that's a week earlier.

00:27:39 We're shifting to the second, or the first Tuesday of the month because the second Tuesday's colliding with the data meetup.

00:27:47 That's awesome.

00:27:47 It's going really well.

00:27:48 I, the first meetup we had was a big success.

00:27:51 The venue that you got put together at your new office is fantastic.

00:27:55 We had like four 4k 70 inch screens or something all up there for people to watch on and yeah, it's going really well.

00:28:03 Like, unfortunately I can't make this one.

00:28:04 I'm going to be out of town, but generally definitely going to go to this.

00:28:07 It's great.

00:28:08 It'll be awesome.

00:28:09 Yeah.

00:28:09 How about you?

00:28:09 Well, so just reminded yesterday that it's turtles all the way down.

00:28:14 and sometimes you have to stand upon a turtle, but not control the turtle.

00:28:19 What I mean is, the Talk Python Training site started behaving weirdly for some users.

00:28:25 I don't know, it seems like it's working for me, I don't know what's going on, and it turns out we use Amazon for some of the video delivery of the courses, and Amazon was under a DDoS attack for like 12 hours straight yesterday.

00:28:40 And so, more of the DDoS attack that I'm talking about, but it basically knocked a whole bunch of stuff off the internet, which was crazy.

00:28:47 Wow.

00:28:48 Yeah, so people can check that out, but they were trying to mitigate the DDoS attack against their DNS systems, and by doing so, they were basically overprotecting and blocking all the other systems that were just trying to get their job done.

00:29:01 Another big piece of news for us is over on pypi.org, 201,227 projects.

00:29:09 We have passed over 200,000 projects, which is awesome.

00:29:13 Thanks for real to real Python for shouting that out.

00:29:16 And then Brian, we discussed about this XKCD that we talked about a few episodes ago and said, well, it was episode 100 or 1,425.

00:29:29 And it talked about how some things that are either hard or easy in programming are sometimes difficult to distinguish.

00:29:37 So Andre Janisch sent over this thing called explainxkcd.com, which is a wiki of every one of those with a detailed analysis of the XKCD and also includes the date.

00:29:51 Yeah, so this one has-- do you remember what the date is?

00:29:53 This was the date that we talked about it or the date when it was done?

00:29:57 It was done.

00:29:57 It was done in 2014 or something, right?

00:30:00 Yeah, yeah, yeah, exactly.

00:30:01 It was explaining that checking to see whether a photo had a bird in it was a difficult problem in 2014.

00:30:08 And now you can have code that figures that out on a Raspberry Pi.

00:30:12 Exactly.

00:30:14 Maybe your watch will do it.

00:30:15 Like you just shake your watch at the picture and it just like vibrates in a bird shape.

00:30:19 I don't know.

00:30:20 That was before not a hot dog.

00:30:22 Yes, exactly.

00:30:23 All right, Bob, what have you been up to?

00:30:25 Anything you want to tell people about?

00:30:27 Yeah, the platform, codechallenge.es, growing rapidly and a lot of development work. So we added some nice linters, Flake 8, Black. You can now blackify your code. Yeah. UI changes, making it easier and more Python ninjas coming in.

00:30:46 A lot of coding down there.

00:30:48 Yeah, that's awesome. Last week we talked about all the auto formatters, AutoPep8 and Black and stuff. So you're using Black basically to, as people work on the on the website, like it'll just clean it up for them?

00:30:59 Well, it's that they have to do it manually. It's just a button, right?

00:31:02 But they press it, but then it'll like clean it up automatically with black.

00:31:05 Yeah.

00:31:05 Yeah.

00:31:06 Made a new Lambda and it runs black against the code and yeah.

00:31:11 Return to it.

00:31:12 Yeah.

00:31:13 Good to see that that's coming along strong.

00:31:14 All right.

00:31:15 Now let's wrap this up with a joke.

00:31:17 I think it's safe for work, but it's a little bit, a little bit off, but I don't know, Brian wants to make me say it.

00:31:22 So I'm giggling in the background.

00:31:25 So here's our joke.

00:31:27 What did the network administrator say when they caught an at Steve Iris?

00:31:32 I don't know what it hurts when the IP What are I P?

00:31:36 I love this. It's so bad. Yeah, but this episode was not bad. It was good. Thank you guys for being here Thanks, Brian. Thanks Bob. Is it IPv4 IPv6? It hurts way worse when it's IPv6 All right. Thanks a lot Thanks. Bye guys. Thank you for listening to Python bites follow the show on Twitter via at Python bites that's Python bytes as in B-Y-T-E-S. And get the full show notes at Pythonbytes.fm.

00:32:04 If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:32:09 We're always on the lookout for sharing something cool. On behalf of myself and Brian Aukin, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

