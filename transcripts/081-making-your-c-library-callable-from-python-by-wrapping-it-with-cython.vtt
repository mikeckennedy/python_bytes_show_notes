WEBVTT

00:00:00.001 --> 00:00:05.020
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your buds.

00:00:05.020 --> 00:00:10.480
This is episode 81, recorded May 25th, 2018.

00:00:10.480 --> 00:00:11.380
I'm Michael Kennedy.

00:00:11.380 --> 00:00:12.260
And I'm Brian Okken.

00:00:12.260 --> 00:00:14.420
And we have a bunch of great stuff for you, as always.

00:00:14.420 --> 00:00:16.000
Super excited to talk about it.

00:00:16.000 --> 00:00:18.200
But before we do, Brian, let's say thanks to DigitalOcean.

00:00:18.200 --> 00:00:19.140
Thanks, DigitalOcean.

00:00:19.140 --> 00:00:20.220
Yeah, thank you, DigitalOcean.

00:00:20.220 --> 00:00:25.120
They're supporting the show by sponsoring this episode and a number of others.

00:00:25.120 --> 00:00:27.520
And they're giving you all something awesome as well.

00:00:27.520 --> 00:00:33.500
$100 free credit if you're a new user at pythonbytes.fm/digitalocean.

00:00:33.500 --> 00:00:34.600
More about that later.

00:00:34.600 --> 00:00:37.040
I'd like to learn some stuff right now, Brian.

00:00:37.040 --> 00:00:38.600
Learn about learning.

00:00:38.600 --> 00:00:41.660
We hear a lot about machine learning.

00:00:41.660 --> 00:00:45.500
And I came across a couple ways to learn it.

00:00:45.500 --> 00:00:47.720
So I've got a couple topics here.

00:00:47.720 --> 00:00:52.060
First one is a single page site called Hello TensorFlow.

00:00:52.780 --> 00:01:01.300
And it's a kind of fun little demo with one machine learning example of a bad guess at the

00:01:01.300 --> 00:01:06.700
coefficients for a polynomial and having the machine learning back end.

00:01:06.700 --> 00:01:07.680
I think it's TensorFlow.

00:01:07.680 --> 00:01:10.600
Figuring out what the real answer is.

00:01:10.600 --> 00:01:17.960
And it's got like a GUI or a graph on there where you can watch it zoom or narrow in on it.

00:01:17.960 --> 00:01:19.180
So it's fun.

00:01:19.440 --> 00:01:20.520
That is cool.

00:01:20.520 --> 00:01:21.340
Yeah.

00:01:21.340 --> 00:01:22.680
So it has a secret formula.

00:01:22.680 --> 00:01:25.280
And it says, here's some equation which you don't know.

00:01:25.280 --> 00:01:27.280
Machine learning system.

00:01:27.280 --> 00:01:31.940
Go learn how to predict where on that line it's going to be given a few points.

00:01:31.940 --> 00:01:34.960
And it's like this nice little animated thing that rolls in.

00:01:34.960 --> 00:01:36.740
I love the real timeness of it.

00:01:36.740 --> 00:01:37.540
That's great.

00:01:37.540 --> 00:01:39.480
And it doesn't quite get it right away.

00:01:39.480 --> 00:01:42.060
And if you run it again, it's even better.

00:01:42.060 --> 00:01:43.660
So it increases its guesses.

00:01:43.660 --> 00:01:44.760
It's kind of neat.

00:01:44.760 --> 00:01:45.280
Oh, nice.

00:01:45.280 --> 00:01:49.980
The other topic I wanted to bring up is I found out that there's both an article about this

00:01:49.980 --> 00:01:50.900
that we'll link to.

00:01:50.900 --> 00:01:58.180
But there is a Google-provided machine learning crash course that actually looks pretty slick.

00:01:58.180 --> 00:02:02.880
It's got like 15 hours of course material and a bunch of lessons and some exercises.

00:02:03.380 --> 00:02:08.180
So Google has put together a free course on getting started with machine learning.

00:02:08.180 --> 00:02:09.460
That's really cool.

00:02:09.460 --> 00:02:09.840
It's kind of fun.

00:02:09.840 --> 00:02:10.100
Yeah.

00:02:10.100 --> 00:02:12.500
So one is kind of like gets you interested in the idea of it.

00:02:12.500 --> 00:02:14.400
The other is like let's actually teach it to you.

00:02:14.400 --> 00:02:14.720
Yeah.

00:02:14.720 --> 00:02:15.260
Neat.

00:02:15.260 --> 00:02:15.700
Yeah.

00:02:15.700 --> 00:02:19.540
So remember last week when we talked about PySystemD with Dan Bader?

00:02:19.540 --> 00:02:20.020
Yeah.

00:02:20.020 --> 00:02:20.340
Yeah.

00:02:20.340 --> 00:02:26.960
So he pointed out that it was interesting that PySystemD was implemented in Cython even though

00:02:26.960 --> 00:02:28.720
it had no real performance issues.

00:02:28.720 --> 00:02:31.000
I mean, it just asked like, hey, is this service started?

00:02:31.000 --> 00:02:32.480
And it just delegated to the C API.

00:02:32.960 --> 00:02:38.440
So I came across an article called Making Your C Library Callable from Python by Wrapping

00:02:38.440 --> 00:02:43.540
It in Cython by Stav Shamir, which is a really nice short article.

00:02:43.540 --> 00:02:44.020
Interesting.

00:02:44.020 --> 00:02:44.360
Yeah.

00:02:44.360 --> 00:02:47.280
This is my guess why they use Cython for PySystemD.

00:02:47.280 --> 00:02:51.740
So Cython is known for its ability to increase performance of Python code, of course.

00:02:52.180 --> 00:02:59.660
But it's also a really interesting way to sort of bring Python syntax into the realm of C directly.

00:02:59.660 --> 00:03:00.960
Right.

00:03:00.960 --> 00:03:06.240
And because of that, it makes calling C code from what looks like Python and then exposing

00:03:06.240 --> 00:03:09.380
that part that looks like Python directly to Python really easy.

00:03:09.500 --> 00:03:11.160
So let me give you a quick example.

00:03:11.160 --> 00:03:12.200
Suppose I have a function.

00:03:12.200 --> 00:03:13.340
It's called hello.

00:03:13.340 --> 00:03:16.120
It takes a character pointer called name.

00:03:16.120 --> 00:03:16.500
Right.

00:03:16.500 --> 00:03:17.140
This is C.

00:03:17.140 --> 00:03:20.960
And then you do printf hello, percent S name.

00:03:20.960 --> 00:03:21.260
Right.

00:03:21.260 --> 00:03:22.120
So super simple.

00:03:22.120 --> 00:03:22.880
It's like a function.

00:03:23.020 --> 00:03:25.600
It takes a character pointer and returns void.

00:03:25.600 --> 00:03:31.820
So if I wanted to call that function from Python, I could write just like a couple of lines

00:03:31.820 --> 00:03:33.640
of code in Cython.

00:03:33.640 --> 00:03:35.700
So I would say C def external.

00:03:35.700 --> 00:03:36.620
Right.

00:03:36.620 --> 00:03:37.220
Define.

00:03:37.220 --> 00:03:38.380
Here's an external function.

00:03:38.380 --> 00:03:39.140
Void.

00:03:39.140 --> 00:03:39.340
Hello.

00:03:39.340 --> 00:03:39.820
Cons car.

00:03:39.820 --> 00:03:40.020
Right.

00:03:40.020 --> 00:03:42.720
Just the, there's the signature of that C function.

00:03:42.720 --> 00:03:45.120
And then I'd write a function like pi underscore hello.

00:03:45.120 --> 00:03:48.900
I'd say name colon bytes goes to none.

00:03:48.900 --> 00:03:50.020
And just say hello name.

00:03:50.020 --> 00:03:50.560
That's it.

00:03:50.740 --> 00:03:53.920
Not all these crazy extensions or pi objects or whatever.

00:03:53.920 --> 00:04:01.400
Just like it's basically Python code with type hints or type annotations applied.

00:04:01.400 --> 00:04:01.660
Right.

00:04:01.660 --> 00:04:03.520
I mean, that's what Cython more or less is.

00:04:03.520 --> 00:04:06.420
This is a really nice small example of how to get some.

00:04:06.420 --> 00:04:11.600
I thought I had to go through some like, like figure out how to link to the DLL and stuff

00:04:11.600 --> 00:04:12.140
like that.

00:04:12.140 --> 00:04:13.020
And yeah.

00:04:13.020 --> 00:04:13.720
Neat.

00:04:13.720 --> 00:04:13.940
Yeah.

00:04:13.940 --> 00:04:18.700
And so the final step you have to actually build, like you have to compile your Cython

00:04:18.700 --> 00:04:21.460
code so that it can be imported from regular Python code.

00:04:21.460 --> 00:04:25.500
And so they provide a setup py which does that.

00:04:25.500 --> 00:04:27.600
And you just run Python setup py build.

00:04:27.600 --> 00:04:28.080
Right.

00:04:28.080 --> 00:04:30.000
And it goes and does its magic.

00:04:30.000 --> 00:04:31.200
And then you, then you have it.

00:04:31.200 --> 00:04:31.780
You can work with it.

00:04:31.780 --> 00:04:33.200
And by the way, it happens to be fast.

00:04:33.200 --> 00:04:34.520
Even if that's not the point.

00:04:34.520 --> 00:04:34.880
Okay.

00:04:34.880 --> 00:04:36.020
I'm going to have to go play with this.

00:04:36.020 --> 00:04:36.440
It's neat.

00:04:36.440 --> 00:04:36.820
Yeah.

00:04:36.820 --> 00:04:37.280
It's cool.

00:04:37.280 --> 00:04:37.640
Isn't it?

00:04:37.640 --> 00:04:38.020
It's cool.

00:04:38.020 --> 00:04:38.560
And it's easy.

00:04:38.560 --> 00:04:38.880
Yeah.

00:04:38.920 --> 00:04:39.120
Yeah.

00:04:39.120 --> 00:04:42.420
It's way better than like flipping into sea land and doing all sorts of stuff.

00:04:42.420 --> 00:04:47.600
I think if your point is only to consume this code, maybe even just a regular Cython code.

00:04:47.600 --> 00:04:49.180
There's a lot of good things going on there.

00:04:49.180 --> 00:04:49.480
Yeah.

00:04:49.480 --> 00:04:49.900
Awesome.

00:04:49.900 --> 00:04:50.200
Cool.

00:04:50.320 --> 00:04:51.580
So what's this next one you got?

00:04:51.580 --> 00:04:52.700
Feature flags?

00:04:52.700 --> 00:04:53.200
Yeah.

00:04:53.200 --> 00:04:54.000
Feature flags.

00:04:54.000 --> 00:05:00.220
And I can't remember who was the, there was, now we're going back in time, but a year or

00:05:00.220 --> 00:05:02.740
so, but was it Instagram that talked about?

00:05:02.740 --> 00:05:03.000
Yeah.

00:05:03.000 --> 00:05:08.160
It was Instagram that moved from Python 2 to Python 3 on their Django deploy deployment, which

00:05:08.160 --> 00:05:14.620
is I think the largest Django deployment in the world on the same branch and without anything,

00:05:14.620 --> 00:05:14.900
right?

00:05:14.900 --> 00:05:16.480
Just by using feature flags.

00:05:16.480 --> 00:05:18.960
I don't remember if they used feature flags in that or not.

00:05:19.180 --> 00:05:25.380
But I know a lot of people that, a lot of teams that do have a model of merging to the

00:05:25.380 --> 00:05:31.160
master frequently or just working off master for everybody often use feature flags.

00:05:31.160 --> 00:05:34.880
And I know how to do that in C++, but I wasn't quite sure.

00:05:34.880 --> 00:05:40.640
I could have hacked together something for Python, but this is a nice article about really how to

00:05:40.640 --> 00:05:45.580
do feature flags in Python well and why you would do it and how to do it.

00:05:45.580 --> 00:05:51.160
So a few of the benefits they talked about is improving Teams response time to bugs, because

00:05:51.160 --> 00:05:57.600
if you add a feature with a feature flag, you can just turn it off by flipping the flag if

00:05:57.600 --> 00:06:00.200
you need to without having to redeploy everything.

00:06:00.200 --> 00:06:01.380
I really like this idea.

00:06:01.380 --> 00:06:07.160
It's great to be able to just keep everything in the same code base and also keep the database

00:06:07.160 --> 00:06:10.160
schemas in sync, which is nice as well.

00:06:10.360 --> 00:06:11.820
So a lot of cool stuff going on here.

00:06:11.820 --> 00:06:14.080
You have just one code base to test.

00:06:14.080 --> 00:06:18.000
I mean, you can turn on and off features to test different parts because you want both

00:06:18.000 --> 00:06:20.680
with the feature and without the feature to still work.

00:06:20.680 --> 00:06:27.880
And you can migrate user groups with A-B testing or group splitting or however you want to migrate

00:06:27.880 --> 00:06:28.880
the feature in.

00:06:29.340 --> 00:06:35.240
But then it went on to talk about some of the ways to implement it nicely so that it's a

00:06:35.240 --> 00:06:41.380
maintainable flag system, how to measure your success with different analytics, and then using

00:06:41.380 --> 00:06:47.060
third-party tools to make your flag support clean and not reinventing the wheel.

00:06:47.060 --> 00:06:49.020
And other people have figured this out.

00:06:49.460 --> 00:06:53.960
And then also just at the end of comment to say, you know, once you've really decided

00:06:53.960 --> 00:06:57.520
that a feature's in place, you have to go through and do feature flag cleanup.

00:06:57.520 --> 00:07:02.720
So make sure that you remove the flags and have the features be permanent when you're ready

00:07:02.720 --> 00:07:04.860
to have them permanent clean up your code base.

00:07:04.860 --> 00:07:06.820
So it was just a nice write-up for this.

00:07:06.820 --> 00:07:07.780
Yeah, and it's really nice.

00:07:07.780 --> 00:07:08.200
I like it.

00:07:08.200 --> 00:07:13.520
And they have maybe one of the best visualizations of flat is better than nested with like some

00:07:13.520 --> 00:07:15.540
kind of Mortal Kombat type character.

00:07:15.540 --> 00:07:20.560
It's a crazy nested if statement.

00:07:20.560 --> 00:07:22.720
That's the cleanup conversation, right?

00:07:22.720 --> 00:07:23.440
Like, don't do this.

00:07:23.440 --> 00:07:26.440
Yeah, and the example of how not to do feature flags.

00:07:26.440 --> 00:07:27.360
Yeah, definitely.

00:07:27.360 --> 00:07:29.100
Don't do this.

00:07:29.100 --> 00:07:29.860
Yeah, it's quite cool.

00:07:29.860 --> 00:07:30.260
Nice.

00:07:30.260 --> 00:07:31.380
All right.

00:07:31.380 --> 00:07:35.600
So speaking of quite cool, it's quite cool that DigitalOcean is sponsoring this podcast.

00:07:35.600 --> 00:07:37.460
And I want to just tell you guys quickly about them.

00:07:37.460 --> 00:07:38.760
So they're a hosting company.

00:07:38.760 --> 00:07:40.780
They've got data centers throughout the world.

00:07:41.580 --> 00:07:48.460
And I think one of the cleanest, nicest ways to create a set of virtual servers and get

00:07:48.460 --> 00:07:49.620
them up and running and configure them.

00:07:49.620 --> 00:07:53.920
So if you want to create one that's already pre-configured for some infrastructure like

00:07:53.920 --> 00:07:57.760
Disqus, you can just click a button and say, create me a Disqus virtual machine based on

00:07:57.760 --> 00:08:00.080
Ubuntu, you know, whatever version you're looking for.

00:08:00.080 --> 00:08:02.460
Or create a fresh one instead of PowerView like.

00:08:02.460 --> 00:08:05.360
So they provide a lot of the infrastructure for us.

00:08:05.360 --> 00:08:10.380
We actually pay for it, but they are the people we pay for getting you this podcast, which

00:08:10.380 --> 00:08:11.380
is pretty awesome.

00:08:11.380 --> 00:08:12.780
They've been really good.

00:08:12.780 --> 00:08:13.660
We're happy customers.

00:08:13.660 --> 00:08:20.760
And so if you want to be new happy customer, you can get $100 to try them out at pythonbytes.fm

00:08:20.760 --> 00:08:22.400
slash digital ocean.

00:08:22.400 --> 00:08:24.740
And that's for new customers.

00:08:24.740 --> 00:08:25.320
Check it out.

00:08:25.320 --> 00:08:28.340
And hopefully you create something cool and run it there.

00:08:28.340 --> 00:08:28.740
Nice.

00:08:28.740 --> 00:08:31.460
Hey, Brian, I got one that I think you're going to like.

00:08:31.460 --> 00:08:31.940
Okay.

00:08:31.940 --> 00:08:32.800
It's about testing.

00:08:32.800 --> 00:08:33.560
I like testing.

00:08:33.560 --> 00:08:39.040
Recently, I had a Talk Python episode on the release of PyPI and the inside story of how

00:08:39.040 --> 00:08:40.060
that got revised.

00:08:40.060 --> 00:08:43.120
And finally, pypi.org is the official thing.

00:08:43.120 --> 00:08:46.180
Not like a weird, scary place that also matches to the same database.

00:08:46.180 --> 00:08:47.200
So that's really awesome.

00:08:47.200 --> 00:08:49.520
And I can't remember who said it on the show.

00:08:49.520 --> 00:08:50.800
Sorry, because there were three folks.

00:08:51.080 --> 00:08:56.160
But one of the libraries brought up was pretend, which is a stubbing library.

00:08:56.160 --> 00:08:56.720
Neat.

00:08:56.720 --> 00:08:57.100
Yeah.

00:08:57.100 --> 00:08:59.060
So stubbing is like mocking, but it's different.

00:08:59.060 --> 00:08:59.900
How's that, Brian?

00:08:59.900 --> 00:09:01.860
You know more about that than I do.

00:09:01.940 --> 00:09:05.540
Oftentimes in mocking, you want to like check the behavior of the code.

00:09:05.540 --> 00:09:11.100
Like if you're interacting with some system that's not really there, you want to make sure

00:09:11.100 --> 00:09:15.920
that you've called it in certain ways or you called it a certain number of times or the order

00:09:15.920 --> 00:09:17.420
of calls, things like that.

00:09:17.420 --> 00:09:23.200
And stubbing is really like, I just want to have my code be able to call something and have

00:09:23.200 --> 00:09:26.300
the return value be like some pre-canned data.

00:09:26.300 --> 00:09:30.420
So it's more about pre-canning than about the behavior.

00:09:30.420 --> 00:09:30.820
I see.

00:09:31.000 --> 00:09:34.620
So with mocking, maybe I'm going to say, I'm going to call this login API and I want

00:09:34.620 --> 00:09:39.380
to make sure that it checks that I, my password is correct or something like that.

00:09:39.380 --> 00:09:40.620
And that would be a mocking thing.

00:09:40.620 --> 00:09:44.960
Whereas for stubbing, I just like, I need it to give back a password so it doesn't crash

00:09:44.960 --> 00:09:51.040
because it's like a, you know, none type attribute error type of crash if, if nothing comes back.

00:09:51.040 --> 00:09:51.980
So we got to give it something.

00:09:51.980 --> 00:09:53.240
So let's create a stub to do that.

00:09:53.240 --> 00:09:59.000
Stubbing also is a great way to do things like if there's error conditions, like when, when you're

00:09:59.000 --> 00:10:04.540
connecting to a third party that goes out to some, if you want to like, if the server

00:10:04.540 --> 00:10:06.400
crashes or something, you'll get an error code.

00:10:06.400 --> 00:10:08.100
So how do you, how do you simulate that?

00:10:08.100 --> 00:10:09.680
You can't go out and crash the server.

00:10:09.680 --> 00:10:13.980
It's a really great way to, to pretend bad things happen.

00:10:14.160 --> 00:10:14.240
Yeah.

00:10:14.240 --> 00:10:16.020
So let me give people a sense of the API.

00:10:16.020 --> 00:10:16.620
It's real simple.

00:10:16.620 --> 00:10:22.040
So from pretend import stub, and then you just say stub and say like, here's a function name

00:10:22.040 --> 00:10:23.120
equals some Lambda.

00:10:23.120 --> 00:10:25.640
And now you can just start, you pass that around.

00:10:25.640 --> 00:10:28.440
If somebody calls that function, it returns the value of the Lambda returns.

00:10:28.440 --> 00:10:28.920
Done.

00:10:28.920 --> 00:10:33.140
It's like, I don't think that it could really be simpler to be honest.

00:10:33.140 --> 00:10:33.420
Right.

00:10:33.420 --> 00:10:37.480
Well, that's one of the reasons why it's pretty cool is the, it's simpler than using mock.

00:10:37.480 --> 00:10:39.780
Mock can do this too, but this is simpler.

00:10:39.780 --> 00:10:40.140
Yeah.

00:10:40.140 --> 00:10:40.560
Really nice.

00:10:40.560 --> 00:10:40.800
Yeah.

00:10:41.380 --> 00:10:42.920
You could probably use that with flask, couldn't you?

00:10:42.920 --> 00:10:44.660
Yeah.

00:10:44.660 --> 00:10:46.760
You could probably use it with flask.

00:10:46.760 --> 00:10:47.060
Yep.

00:10:47.060 --> 00:10:50.020
And my next topic is a surprise to me.

00:10:50.020 --> 00:10:51.320
I forgot that I put this down.

00:10:51.320 --> 00:10:56.960
But one of the things I was, I got out of PyCon was I got to sit next to one of the people

00:10:56.960 --> 00:11:00.120
that at dinner that works on the flask project.

00:11:00.120 --> 00:11:05.600
And he reminded me that they just went through and rewrote a bunch of the flask tutorial.

00:11:05.600 --> 00:11:10.460
So I went through and took a look and yeah, the flask, the official flask tutorial is,

00:11:10.460 --> 00:11:11.920
uh, got a lot of updates.

00:11:11.920 --> 00:11:16.280
It's, the code that goes along with it's been updated in the, just everything's been

00:11:16.280 --> 00:11:17.820
simplified, updated.

00:11:17.820 --> 00:11:19.120
It's a little cleaner.

00:11:19.120 --> 00:11:23.540
It includes a, I don't know if it had this before, but it includes a section on testing,

00:11:23.540 --> 00:11:28.280
which, highlights pytest, of course, and coverage, which is good.

00:11:28.280 --> 00:11:33.840
And, one of the things I learned also with, with that discussion was flask is a part

00:11:33.840 --> 00:11:35.340
of the, a pallets.

00:11:35.340 --> 00:11:41.420
I'm not sure what their entity is really, but pallets is a collection of people that work

00:11:41.420 --> 00:11:42.820
on a collection of projects.

00:11:42.820 --> 00:11:45.240
And it's some pretty important stuff.

00:11:45.240 --> 00:11:46.980
We've got flask, click.

00:11:47.240 --> 00:11:48.040
It's dangerous.

00:11:48.040 --> 00:11:49.340
I'm not sure what that is.

00:11:49.340 --> 00:11:51.960
It's a request validation foundation of flask.

00:11:51.960 --> 00:11:52.560
Oh, okay.

00:11:52.560 --> 00:11:53.940
It's dangerous.

00:11:53.940 --> 00:11:56.300
I already said that, but Jinja and Jinja2.

00:11:56.300 --> 00:11:57.600
Is there a Jinja?

00:11:57.600 --> 00:11:59.200
Is it just Jinja2?

00:11:59.660 --> 00:12:03.520
I've not seen any Jinja in the wild lately, but there probably was at some point.

00:12:03.520 --> 00:12:03.840
Okay.

00:12:03.840 --> 00:12:10.800
But, and then, markup safe, which is an HTML markup safe string for Python library.

00:12:10.800 --> 00:12:15.320
And then workzug, workzug, I don't know how to pronounce that.

00:12:15.320 --> 00:12:16.100
Workzug.

00:12:16.100 --> 00:12:17.740
With a V.

00:12:17.740 --> 00:12:23.040
Everybody relies on a lot, some of these things, even if you don't use flask and the pallets,

00:12:23.040 --> 00:12:25.580
uh, project has a donate page now.

00:12:25.580 --> 00:12:31.680
So if you, if you want to donate and you can donate through their donation page, pretty

00:12:31.680 --> 00:12:31.920
neat.

00:12:31.920 --> 00:12:32.560
It's really nice.

00:12:32.560 --> 00:12:34.460
So we've had a lot of news around flask lately.

00:12:34.460 --> 00:12:36.260
Flask went one Oh, a while ago.

00:12:36.260 --> 00:12:38.620
I talked to one of the guys.

00:12:38.620 --> 00:12:39.080
I'm sorry.

00:12:39.080 --> 00:12:43.680
I'm so forgetting his name, but because I met so many people, but who is basically responsible

00:12:43.680 --> 00:12:44.920
for that whole progression.

00:12:44.920 --> 00:12:46.220
David, I believe.

00:12:46.220 --> 00:12:51.880
Anyway, he's like, I know people think because the flask went one Oh, the week after you guys

00:12:51.880 --> 00:12:56.500
did the zero over episode actually that was in the works for like a year.

00:12:56.500 --> 00:12:59.860
I would love for you to be doing that, but, it was actually just a coincidence.

00:12:59.860 --> 00:13:05.320
So anyway, glad to see you go one Oh, but yeah, this looks like flask is getting some renewed

00:13:05.320 --> 00:13:06.180
love, which is good.

00:13:06.180 --> 00:13:06.660
Yeah.

00:13:06.660 --> 00:13:09.680
And, I didn't know click was by the same people.

00:13:09.680 --> 00:13:10.760
I use click all the time.

00:13:10.760 --> 00:13:12.000
So that's pretty neat.

00:13:12.000 --> 00:13:12.700
Yeah.

00:13:12.700 --> 00:13:14.960
For, creating CLIs.

00:13:14.960 --> 00:13:15.400
Very nice.

00:13:15.400 --> 00:13:16.260
All right.

00:13:16.260 --> 00:13:20.560
So let's round it out with a little bit of an internals, look here as well.

00:13:20.560 --> 00:13:24.720
I feel like a lot of stuff I'm covering this week is like deep in the guts with the Cython.

00:13:24.720 --> 00:13:29.180
And if you're not doing Cython, you're doing regular Python, then you're operating in the

00:13:29.180 --> 00:13:30.180
bytecode space.

00:13:30.180 --> 00:13:34.040
So do you think people would be surprised if you told them that Python is compiled?

00:13:34.040 --> 00:13:34.700
Yes.

00:13:34.700 --> 00:13:38.640
A lot of them, I think they would, but it's not compiled to machine instructions or even

00:13:38.640 --> 00:13:42.080
JIT compiled unless you're using PyPy, but it's compiled to bytecode.

00:13:42.080 --> 00:13:48.940
So those PYC files, those are like the instructions to the Python virtual machine, not instructions

00:13:48.940 --> 00:13:52.260
to your processor, but they're still compiled and there's still this bytecode.

00:13:52.260 --> 00:13:56.220
And so understanding it's pretty interesting to just know like how the internals of Python

00:13:56.220 --> 00:13:56.680
is working.

00:13:56.680 --> 00:14:01.820
So there's this nice article called an introduction to Python bytecode.

00:14:01.820 --> 00:14:05.520
So if you know, this bytecode concept is kind of new to you, or you just want to play around

00:14:05.520 --> 00:14:06.320
with a little, check it out.

00:14:06.320 --> 00:14:07.260
It's pretty accessible.

00:14:07.720 --> 00:14:12.540
So I feel like there's a lot of hello world examples in my topics.

00:14:12.540 --> 00:14:13.740
So back to hello.

00:14:13.740 --> 00:14:19.660
So they have a function def hello, and it just prints the static string hello world, right?

00:14:19.660 --> 00:14:21.560
It's just, okay, well, what does this actually mean?

00:14:21.560 --> 00:14:24.180
And then they show you all the bytecode.

00:14:24.180 --> 00:14:26.740
So, okay, we're going to load the global, which is the print function.

00:14:26.740 --> 00:14:28.520
We're going to load the constant, which is hello world.

00:14:28.520 --> 00:14:31.000
And we're going to call the function that is on the stack.

00:14:31.760 --> 00:14:34.700
So CPython uses a stacked based virtual machine.

00:14:34.700 --> 00:14:36.960
And so they like load these things under the stack.

00:14:36.960 --> 00:14:40.700
If you have like a function that takes two arguments, they might load two arguments on

00:14:40.700 --> 00:14:43.360
the stack and then call the function and things like that.

00:14:43.360 --> 00:14:48.960
So that's how your Python source code gets into executable form.

00:14:48.960 --> 00:14:54.360
And then these steps are actually sent down to the CPython runtime and this giant wild loop

00:14:54.360 --> 00:14:55.260
with a switch statement.

00:14:55.260 --> 00:14:59.080
That's like literally 3000 lines of C code that says, what's the bytecode?

00:14:59.080 --> 00:14:59.880
Let's go do that.

00:14:59.880 --> 00:15:01.880
You know, so it's pretty interesting.

00:15:01.880 --> 00:15:05.380
And they talk about how you can take your Python code and look at this.

00:15:05.380 --> 00:15:11.120
So you just import this as in disassembly and say this dot this and you pass it like a callable

00:15:11.120 --> 00:15:12.000
or something like that.

00:15:12.000 --> 00:15:15.040
And it'll show you the bytecode instructions that make it up.

00:15:15.040 --> 00:15:15.860
So it's pretty nice.

00:15:15.860 --> 00:15:20.760
New phone who dis you can't actually just look at the PYC files though, right?

00:15:20.760 --> 00:15:21.840
No, they're like bytes.

00:15:21.840 --> 00:15:23.320
That's why you need this dis thing.

00:15:23.320 --> 00:15:28.160
I mean, I guess if you can like parse the bytes, you can, but it's not strings.

00:15:28.160 --> 00:15:28.720
I don't think.

00:15:28.720 --> 00:15:29.700
Okay.

00:15:29.700 --> 00:15:30.700
Yeah.

00:15:30.700 --> 00:15:36.880
I mean, the PYC files are basically the compiled steps from your hello world text into the

00:15:36.880 --> 00:15:38.840
bytecode instructions in terms of bytes.

00:15:38.840 --> 00:15:42.160
And then that's why those cache things are laying there.

00:15:42.160 --> 00:15:44.420
The next time you hit that app, right?

00:15:44.420 --> 00:15:48.880
It's just going to go and say, well, let's just load up that PYC so we don't have to reparse

00:15:48.880 --> 00:15:49.520
and validate it.

00:15:49.520 --> 00:15:49.820
Yeah.

00:15:49.820 --> 00:15:50.640
This is kind of neat.

00:15:50.640 --> 00:15:54.780
I'm going to definitely going to go check this out because I just want to know more about

00:15:54.780 --> 00:15:55.060
this.

00:15:55.060 --> 00:15:58.300
It seems like something I should know about, even though I probably don't need to on a

00:15:58.300 --> 00:15:58.920
daily basis.

00:15:58.920 --> 00:15:59.260
Yeah.

00:15:59.260 --> 00:16:03.260
I mean, I'm not sure how helpful it is, but it's helpful in your conceptualization of how

00:16:03.260 --> 00:16:03.740
stuff works.

00:16:03.740 --> 00:16:04.100
I think.

00:16:04.100 --> 00:16:05.040
Yeah, definitely.

00:16:05.040 --> 00:16:05.860
Very cool.

00:16:05.860 --> 00:16:06.240
Yeah.

00:16:06.280 --> 00:16:10.720
A little bit deeper down into the, is that the red pill or the blue pill that takes

00:16:10.720 --> 00:16:11.340
you farther down?

00:16:11.340 --> 00:16:12.240
That's the red pill, right?

00:16:12.240 --> 00:16:13.120
I don't remember.

00:16:13.120 --> 00:16:13.940
Awesome.

00:16:13.940 --> 00:16:17.320
Well, anyway, it's definitely worth checking out if you haven't played with bytecode before.

00:16:17.320 --> 00:16:19.420
It's a really nice, simple way to get introduced to it.

00:16:19.420 --> 00:16:22.700
Brian, you got anything, any other news you want to share with everyone this week?

00:16:22.700 --> 00:16:23.640
I don't think so.

00:16:23.640 --> 00:16:24.100
Do you?

00:16:24.280 --> 00:16:27.120
No, I'm all out of news this week other than the ones I found.

00:16:27.120 --> 00:16:28.640
So I just want to say thank you.

00:16:28.640 --> 00:16:31.940
Thank you for being part of this episode and sharing everything with everyone.

00:16:31.940 --> 00:16:32.540
Thank you.

00:16:32.540 --> 00:16:33.020
Bye.

00:16:33.020 --> 00:16:33.620
Yeah, you bet.

00:16:33.620 --> 00:16:33.880
Bye.

00:16:35.520 --> 00:16:37.320
Thank you for listening to Python Bytes.

00:16:37.320 --> 00:16:39.880
Follow the show on Twitter via at Python Bytes.

00:16:39.880 --> 00:16:42.780
That's Python Bytes as in B-Y-T-E-S.

00:16:42.780 --> 00:16:46.220
And get the full show notes at pythonbytes.fm.

00:16:46.220 --> 00:16:50.540
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:16:50.540 --> 00:16:53.240
We're always on the lookout for sharing something cool.

00:16:53.240 --> 00:16:56.640
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:16:56.640 --> 00:17:00.260
Thank you for listening and sharing this podcast with your friends and colleagues.

