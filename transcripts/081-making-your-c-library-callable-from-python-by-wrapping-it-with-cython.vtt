
00:00:00.000 --> 00:00:06.480
Hello and welcome to Python bites where we deliver Python news and headlines directly to your buds. This is episode 81


00:00:06.480 --> 00:00:09.240
recorded May 25th


00:00:09.240 --> 00:00:14.160
2018 I'm Michael Kennedy and I'm Brian Akin and we have a bunch of great stuff for you as always


00:00:14.160 --> 00:00:19.400
Super excited to talk about it. But before we do Brian, let's say thanks to digital ocean. Thanks to the ocean. Yeah


00:00:19.400 --> 00:00:21.400
Thank you digital ocean. They're


00:00:21.400 --> 00:00:27.400
Supporting the show by sponsoring this episode and a number of others and they're giving you all something awesome as well


00:00:27.920 --> 00:00:34.520
$100 free credit if you're a new user at Python by set FM slash digital ocean more about that later


00:00:34.520 --> 00:00:37.000
I'd like to learn learn some stuff right now, right?


00:00:37.000 --> 00:00:39.400
learn about learning


00:00:39.400 --> 00:00:45.400
We hear a lot about machine learning and I came across them a couple ways to learn it


00:00:45.400 --> 00:00:52.480
So I've got a couple topics here. First one is a single page site called. Hello tensorflow and


00:00:53.120 --> 00:00:56.000
And it's a kind of fun little demo


00:00:56.000 --> 00:00:58.480
with one machine learning example


00:00:58.480 --> 00:01:03.240
of a bad guess at the coefficients for a polynomial


00:01:03.240 --> 00:01:06.880
and having the machine learning back end,


00:01:06.880 --> 00:01:08.380
I think it's TensorFlow,


00:01:08.380 --> 00:01:10.680
figuring out what the real answer is.


00:01:10.680 --> 00:01:15.200
And it's got like a graph on there


00:01:15.200 --> 00:01:18.080
where you can watch it zoom or narrow in on it.


00:01:18.080 --> 00:01:19.560
So it's fun.


00:01:19.560 --> 00:01:21.160
- That is cool.


00:01:21.160 --> 00:01:23.000
Yeah, so it has a secret formula


00:01:23.000 --> 00:01:25.720
And it says, "Here's some equation which you don't know.


00:01:25.720 --> 00:01:29.580
Machine learning system, go learn how to predict


00:01:29.580 --> 00:01:32.120
where on that line it's gonna be given a few points."


00:01:32.120 --> 00:01:35.040
And it's like this nice little animated thing that rolls in.


00:01:35.040 --> 00:01:37.000
I love the real-timeness of it.


00:01:37.000 --> 00:01:37.820
That's great.


00:01:37.820 --> 00:01:39.560
- And it doesn't quite get it right away,


00:01:39.560 --> 00:01:42.200
and if you run it again, it's even better.


00:01:42.200 --> 00:01:44.320
So it increases its guesses.


00:01:44.320 --> 00:01:45.160
It's kinda neat.


00:01:45.160 --> 00:01:45.980
- Oh, nice.


00:01:45.980 --> 00:01:47.640
- The other topic I wanted to bring up is I found out


00:01:47.640 --> 00:01:50.960
that there's both an article about this that we'll link to,


00:01:50.960 --> 00:01:55.960
but there is a Google provided machine learning crash course


00:01:55.960 --> 00:01:58.320
that actually looks pretty slick.


00:01:58.320 --> 00:02:01.040
It's got like 15 hours of course material


00:02:01.040 --> 00:02:03.680
and a bunch of lessons and some exercises.


00:02:03.680 --> 00:02:06.160
So Google has put together a free course


00:02:06.160 --> 00:02:08.680
on getting started with machine learning.


00:02:08.680 --> 00:02:10.000
- Oh, that's really cool. - It's kind of fun.


00:02:10.000 --> 00:02:11.960
- Yeah, so one, it's kind of like gets you interested


00:02:11.960 --> 00:02:13.320
in the idea of it, the other is like,


00:02:13.320 --> 00:02:14.560
let's actually teach it to you.


00:02:14.560 --> 00:02:15.560
- Yeah, neat.


00:02:15.560 --> 00:02:18.200
- Yeah, so remember last week when we talked


00:02:18.200 --> 00:02:19.760
about PySystemD with Dan Bader?


00:02:19.760 --> 00:02:20.600
- Yeah.


00:02:20.600 --> 00:02:23.080
So he pointed out that it was interesting


00:02:23.080 --> 00:02:26.600
that PySystemD was implemented in Cython,


00:02:26.600 --> 00:02:28.800
even though it had no real performance issues.


00:02:28.800 --> 00:02:31.260
I mean, it just asked, like, hey, has this service started?


00:02:31.260 --> 00:02:33.240
And it just delegated to the C API.


00:02:33.240 --> 00:02:34.720
So I came across an article called


00:02:34.720 --> 00:02:37.800
"Making Your C Library Callable from Python


00:02:37.800 --> 00:02:41.620
by Wrapping It in Cython" by Stav Shamir, which


00:02:41.620 --> 00:02:43.480
is a really nice, short article.


00:02:43.480 --> 00:02:43.980
Interesting.


00:02:43.980 --> 00:02:47.920
Yeah, this is my guess why they use Cython for PySystemD.


00:02:47.920 --> 00:02:49.640
So Cython is known for its ability


00:02:49.640 --> 00:02:55.240
increase performance of Python code, of course. But it's also a really interesting way to sort


00:02:55.240 --> 00:03:02.040
of bring Python syntax into the realm of C directly, right. And because of that, it makes


00:03:02.040 --> 00:03:07.480
calling C code from what looks like Python, and then exposing that part that looks like Python


00:03:07.480 --> 00:03:12.520
directly to Python really easy. So let me give you a quick example. Suppose I have a function,


00:03:12.520 --> 00:03:18.200
it's called Hello, it takes a character pointer called name, right, this is C. And then you do


00:03:18.200 --> 00:03:23.240
do printf hello, percent s name, right? So super simple. It's like a function, it takes


00:03:23.240 --> 00:03:29.280
character pointer and returns void. So if I wanted to call that function from Python,


00:03:29.280 --> 00:03:35.720
I could write just like a couple of lines of code in Cython. So I would say c def external,


00:03:35.720 --> 00:03:40.960
right define here's an external function, void hello const car, right, just the there's


00:03:40.960 --> 00:03:45.080
the signature of that C function. And then I'd write a function like pi underscore hello


00:03:45.080 --> 00:03:50.080
I want to say name colon bytes goes to none and just say hello name.


00:03:50.080 --> 00:03:50.580
That's it.


00:03:50.580 --> 00:03:54.080
Not all these crazy extensions or py objects or whatever.


00:03:54.080 --> 00:04:01.080
Just like it's basically Python code with type hints or type annotations applied.


00:04:01.080 --> 00:04:01.580
Right?


00:04:01.580 --> 00:04:03.580
I mean that's what Cython more or less is.


00:04:03.580 --> 00:04:06.580
This is a really nice small example of how to get some.


00:04:06.580 --> 00:04:12.080
I thought I had to go through some like figure out how to link to the DLL and stuff like that.


00:04:12.080 --> 00:04:13.080
And yeah.


00:04:13.080 --> 00:04:18.080
Yeah, and so the final step you have to actually build, like you have to compile your


00:04:18.080 --> 00:04:22.080
Cython code so that it can be imported from regular Python code.


00:04:22.080 --> 00:04:26.080
And so they provide a setup py which does that. And you just run


00:04:26.080 --> 00:04:30.080
Python setup py build, right? And it goes and does its magic.


00:04:30.080 --> 00:04:33.080
And then you have it, you can work with it. And by the way, it happens to be fast.


00:04:33.080 --> 00:04:34.080
Even if that's not the point.


00:04:34.080 --> 00:04:36.080
Okay, I'm going to have to go play with this. It's neat.


00:04:36.080 --> 00:04:38.080
Yeah, it's cool, isn't it? It's cool and it's easy.


00:04:38.080 --> 00:04:39.080
Yeah.


00:04:39.080 --> 00:04:42.080
Yeah, it's way better than like flipping into C land and doing all sorts of stuff.


00:04:42.080 --> 00:04:45.760
to stuff, I think your point is only to consume this code.


00:04:45.760 --> 00:04:48.080
Maybe even just to write regular Cython code.


00:04:48.080 --> 00:04:49.320
There's a lot of good things going on there.


00:04:49.320 --> 00:04:50.320
- Yeah. - Awesome.


00:04:50.320 --> 00:04:52.160
So what's this next one you got?


00:04:52.160 --> 00:04:53.040
Feature flags?


00:04:53.040 --> 00:04:54.160
- Yeah, feature flags.


00:04:54.160 --> 00:04:56.280
And I can't remember who was the,


00:04:56.280 --> 00:04:59.080
there was a, now we're going back in time,


00:04:59.080 --> 00:05:02.920
but a year or so, but was it Instagram that talked about--


00:05:02.920 --> 00:05:04.480
- Yeah, it was Instagram that moved from Python 2


00:05:04.480 --> 00:05:07.560
to Python 3 on their Django deploy,


00:05:07.560 --> 00:05:09.000
on deployment, which is, I think,


00:05:09.000 --> 00:05:11.080
the largest Django deployment in the world,


00:05:11.080 --> 00:05:15.200
on the same branch and without anything, right?


00:05:15.200 --> 00:05:16.680
Just by using feature flags.


00:05:16.680 --> 00:05:18.360
- I don't remember if they used feature flags


00:05:18.360 --> 00:05:20.920
in that or not, but I know a lot of people,


00:05:20.920 --> 00:05:23.320
a lot of teams that do have a model


00:05:23.320 --> 00:05:26.960
of merging to the master frequently


00:05:26.960 --> 00:05:29.640
or just working off master for everybody


00:05:29.640 --> 00:05:31.760
often use feature flags.


00:05:31.760 --> 00:05:33.840
And I know how to do that in C++,


00:05:33.840 --> 00:05:35.420
but I wasn't quite sure.


00:05:35.420 --> 00:05:38.240
I could have hacked together something for Python,


00:05:38.240 --> 00:05:40.420
but this is a nice article about really


00:05:40.420 --> 00:05:42.920
how to do feature flags in Python well,


00:05:42.920 --> 00:05:45.660
and why you would do it and how to do it.


00:05:45.660 --> 00:05:48.060
So a few of the benefits they talked about


00:05:48.060 --> 00:05:50.820
is improving Teams response time to bugs


00:05:50.820 --> 00:05:54.300
because if you add a feature with a feature flag,


00:05:54.300 --> 00:05:57.460
you can just turn it off by flipping the flag


00:05:57.460 --> 00:06:00.420
if you need to without having to redeploy everything.


00:06:00.420 --> 00:06:01.580
- I really like this idea.


00:06:01.580 --> 00:06:04.580
It's great to be able to just keep everything


00:06:04.580 --> 00:06:05.660
in the same code base


00:06:05.660 --> 00:06:08.800
and also keep the database schemas in sync,


00:06:08.800 --> 00:06:10.440
which is nice as well.


00:06:10.440 --> 00:06:12.120
So a lot of cool stuff going on here.


00:06:12.120 --> 00:06:14.440
- You have just one code base to test,


00:06:14.440 --> 00:06:16.080
and you can turn on and off features


00:06:16.080 --> 00:06:17.280
to test different parts,


00:06:17.280 --> 00:06:19.120
'cause you want both with the feature


00:06:19.120 --> 00:06:21.240
and without the feature to still work.


00:06:21.240 --> 00:06:24.240
And you can migrate user groups with A/B testing


00:06:24.240 --> 00:06:28.160
or group splitting or however you wanna migrate


00:06:28.160 --> 00:06:29.440
the feature in.


00:06:29.440 --> 00:06:32.680
But then it went on to talk about some of the ways


00:06:32.680 --> 00:06:36.400
to implement it nicely so that it's a maintainable


00:06:36.400 --> 00:06:38.760
flag system, how to measure your success


00:06:38.760 --> 00:06:43.080
with different analytics, and then using third party tools


00:06:43.080 --> 00:06:47.200
to make your flag support clean and not reinventing the wheel


00:06:47.200 --> 00:06:49.440
and other people have figured this out.


00:06:49.440 --> 00:06:53.000
And then also just at the end a comment to say,


00:06:53.000 --> 00:06:55.120
once you've really decided that a feature's in place,


00:06:55.120 --> 00:06:57.820
you have to go through and do feature flag cleanup.


00:06:57.820 --> 00:07:00.120
So make sure that you remove the flags


00:07:00.120 --> 00:07:02.240
and have the features be permanent


00:07:02.240 --> 00:07:03.920
when you're ready to have them permanent,


00:07:03.920 --> 00:07:05.440
clean up your code base.


00:07:05.440 --> 00:07:06.960
It was just a nice write-up for this.


00:07:06.960 --> 00:07:08.360
- Yeah, and it's really nice, I like it.


00:07:08.360 --> 00:07:11.480
And they have maybe one of the best visualization


00:07:11.480 --> 00:07:13.120
of flat is better than nested,


00:07:13.120 --> 00:07:16.000
with like some kind of Mortal Kombat type character.


00:07:16.000 --> 00:07:17.720
How do you throw it down?


00:07:17.720 --> 00:07:20.760
It's a crazy nested if statement.


00:07:20.760 --> 00:07:22.800
That's the cleanup conversation, right?


00:07:22.800 --> 00:07:24.000
Like, don't do this.


00:07:24.000 --> 00:07:26.600
- Yeah, and the example of how not to do feature flags.


00:07:26.600 --> 00:07:28.640
Yeah, definitely. - Exactly.


00:07:28.640 --> 00:07:31.200
Don't do this, yeah, it's quite cool, nice.


00:07:31.200 --> 00:07:32.800
All right, so speaking of quite cool,


00:07:32.800 --> 00:07:34.020
it's quite cool that Digital Ocean


00:07:34.020 --> 00:07:35.740
is sponsoring this podcast.


00:07:35.740 --> 00:07:37.540
And I want to just tell you guys quickly about them.


00:07:37.540 --> 00:07:38.940
So they're a hosting company.


00:07:38.940 --> 00:07:41.460
They've got data centers throughout the world.


00:07:41.460 --> 00:07:45.920
And I think one of the cleanest, nicest ways


00:07:45.920 --> 00:07:47.840
to create a set of virtual servers


00:07:47.840 --> 00:07:49.680
and get them up and running and configure them.


00:07:49.680 --> 00:07:52.500
So if you want to create one that's already pre-configured


00:07:52.500 --> 00:07:54.400
for some infrastructure like Disqus,


00:07:54.400 --> 00:07:55.540
you can just click a button and say,


00:07:55.540 --> 00:07:58.740
create me a Disqus virtual machine based on Ubuntu,


00:07:58.740 --> 00:08:00.540
you know, whatever version you're looking for,


00:08:00.540 --> 00:08:02.700
or create a fresh one and set up however you like.


00:08:02.700 --> 00:08:05.420
So they provide a lot of the infrastructure for us.


00:08:05.420 --> 00:08:08.140
We actually pay for it, but they are the people we pay


00:08:08.140 --> 00:08:12.140
for getting you this podcast, which is pretty awesome.


00:08:12.140 --> 00:08:12.980
They've been really good.


00:08:12.980 --> 00:08:13.900
We're happy customers.


00:08:13.900 --> 00:08:16.860
And so if you want to be new happy customer,


00:08:16.860 --> 00:08:18.900
you can get $100 to try them out


00:08:18.900 --> 00:08:23.040
at pythonbytes.fm/digitalocean.


00:08:23.040 --> 00:08:24.860
And that's for new customers.


00:08:24.860 --> 00:08:27.660
Check it out and hopefully you create something cool


00:08:27.660 --> 00:08:28.500
and run it there.


00:08:28.500 --> 00:08:29.340
- Nice.


00:08:29.340 --> 00:08:31.740
- Hey, Brian, I got one that I think you're gonna like.


00:08:31.740 --> 00:08:32.580
- Okay.


00:08:32.580 --> 00:08:33.420
- I like testing.


00:08:33.420 --> 00:08:35.500
- Recently I had a Talk Python episode


00:08:35.500 --> 00:08:38.860
on the release of PyPI and the inside story


00:08:38.860 --> 00:08:40.180
of how that got revised.


00:08:40.180 --> 00:08:43.180
And finally, pypi.org is the official thing,


00:08:43.180 --> 00:08:44.700
not like a weird, scary place


00:08:44.700 --> 00:08:46.300
that also matches to the same database.


00:08:46.300 --> 00:08:47.780
So that's really awesome.


00:08:47.780 --> 00:08:49.620
And I can't remember who said it on the show.


00:08:49.620 --> 00:08:50.940
I'm sorry, 'cause there were three folks.


00:08:50.940 --> 00:08:54.420
But one of the libraries brought up was Pretend,


00:08:54.420 --> 00:08:56.460
which is a stubbing library.


00:08:56.460 --> 00:08:57.300
- Neat.


00:08:57.300 --> 00:08:59.300
- Yeah, so stubbing is like mocking, but it's different.


00:08:59.300 --> 00:09:00.140
How's that, Brian?


00:09:00.140 --> 00:09:00.960
(Brian laughs)


00:09:00.960 --> 00:09:01.940
You know more about that than I do.


00:09:01.940 --> 00:09:05.620
Oftentimes in mocking you want to check the behavior of the code.


00:09:05.620 --> 00:09:10.380
Like if you're interacting with some system that's not really there,


00:09:10.380 --> 00:09:13.020
you want to make sure that you've called it in certain ways


00:09:13.020 --> 00:09:16.700
or you called it a certain number of times or the order of calls,


00:09:16.700 --> 00:09:17.780
things like that.


00:09:17.780 --> 00:09:19.620
And stubbing is really like,


00:09:19.620 --> 00:09:22.380
I just want to have my code be able to call something


00:09:22.380 --> 00:09:26.620
and have the return value be like some pre-canned data.


00:09:26.620 --> 00:09:30.540
So it's more about pre-canning than about the behavior.


00:09:30.540 --> 00:09:32.620
- I see, so with mocking, maybe I'm gonna say,


00:09:32.620 --> 00:09:34.180
I'm gonna call this login API,


00:09:34.180 --> 00:09:36.260
and I want to make sure that it checks


00:09:36.260 --> 00:09:39.420
that my password is correct, or something like that.


00:09:39.420 --> 00:09:40.660
And that would be a mocking thing,


00:09:40.660 --> 00:09:42.380
whereas for stubbing, I just like,


00:09:42.380 --> 00:09:45.300
I need it to give back a password so it doesn't crash,


00:09:45.300 --> 00:09:47.600
'cause it's like a, you know,


00:09:47.600 --> 00:09:49.920
non-type attribute error type of crash


00:09:49.920 --> 00:09:52.100
if nothing comes back, so we gotta give it something,


00:09:52.100 --> 00:09:53.460
so let's create a stub to do that.


00:09:53.460 --> 00:09:56.300
- Stubbing also is a great way to do things like,


00:09:56.300 --> 00:09:57.800
if there's error conditions,


00:09:57.800 --> 00:10:00.660
like when you're connecting to a third party


00:10:00.660 --> 00:10:03.960
that goes out to some, if you wanna like,


00:10:03.960 --> 00:10:05.560
if the server crashes or something,


00:10:05.560 --> 00:10:06.480
you'll get an error code.


00:10:06.480 --> 00:10:08.180
So how do you simulate that?


00:10:08.180 --> 00:10:10.120
You can't go out and crash the server.


00:10:10.120 --> 00:10:14.140
It's a really great way to pretend bad things happen.


00:10:14.140 --> 00:10:16.140
- Yeah, so let me give people a sense of the API.


00:10:16.140 --> 00:10:16.980
It's real simple.


00:10:16.980 --> 00:10:18.900
So from pretend import stub,


00:10:18.900 --> 00:10:21.040
and then you just say stub and say like,


00:10:21.040 --> 00:10:23.780
here's a function name equals some lambda,


00:10:23.780 --> 00:10:25.700
and now you can just start, you pass that around.


00:10:25.700 --> 00:10:26.880
If somebody calls that function,


00:10:26.880 --> 00:10:29.000
It returns the value the lambda returns, done.


00:10:29.000 --> 00:10:32.600
It's like, I don't think that it could really be simpler,


00:10:32.600 --> 00:10:33.600
to be honest, right?


00:10:33.600 --> 00:10:35.280
- Well, that's one of the reasons why it's pretty cool


00:10:35.280 --> 00:10:37.560
is that it's simpler than using mock.


00:10:37.560 --> 00:10:40.040
Mock can do this too, but this is simpler.


00:10:40.040 --> 00:10:41.480
- Yeah, really nice, yeah.


00:10:41.480 --> 00:10:44.360
You could probably use that with Flask, couldn't you?


00:10:44.360 --> 00:10:47.560
- Yeah, you could probably use it with Flask, yep.


00:10:47.560 --> 00:10:50.080
And my next topic, this is a surprise to me,


00:10:50.080 --> 00:10:52.280
I forgot that I put this down.


00:10:52.280 --> 00:10:55.120
But one of the things I got out of PyCon


00:10:55.120 --> 00:10:58.560
was I got to sit next to one of the people at dinner


00:10:58.560 --> 00:11:00.720
that works on the Flask project.


00:11:00.720 --> 00:11:03.040
And he reminded me that they just went through


00:11:03.040 --> 00:11:06.360
and rewrote a bunch of the Flask tutorial.


00:11:06.360 --> 00:11:07.800
So I went through and took a look,


00:11:07.800 --> 00:11:10.120
and yeah, the official Flask tutorial


00:11:10.120 --> 00:11:12.080
is got a lot of updates.


00:11:12.080 --> 00:11:14.880
It's the code that goes along with it's been updated,


00:11:14.880 --> 00:11:18.360
and just everything's been simplified, updated.


00:11:18.360 --> 00:11:19.620
It's a little cleaner.


00:11:19.620 --> 00:11:21.760
It includes a, I don't know if it had this before,


00:11:21.760 --> 00:11:23.760
but it includes a section on testing,


00:11:23.760 --> 00:11:26.600
which highlights PyTest, of course,


00:11:26.600 --> 00:11:28.580
and coverage, which is good.


00:11:28.580 --> 00:11:32.280
And one of the things I learned also with that discussion


00:11:32.280 --> 00:11:35.760
was Flask is a part of the, of Pallets.


00:11:35.760 --> 00:11:37.960
I'm not sure what their entity is really,


00:11:37.960 --> 00:11:41.080
but Pallets is a collection of people


00:11:41.080 --> 00:11:43.460
that work on a collection of projects.


00:11:43.460 --> 00:11:45.320
And it's some pretty important stuff.


00:11:45.320 --> 00:11:48.320
We've got Flask, Click, it's dangerous,


00:11:48.320 --> 00:11:49.480
I'm not sure what that is.


00:11:49.480 --> 00:11:52.240
- It's a request validation foundation of Flask.


00:11:52.240 --> 00:11:58.000
Okay, it's dangerous. I already said that, but ginger and ginger too. Is there a ginger? Is it


00:11:58.000 --> 00:12:03.520
just ginger too? I've not seen any ginger in the wild lately, but there probably was at some point.


00:12:03.520 --> 00:12:11.200
Okay, but and then markup safe, which is an HTML markup safe string for Python library and then


00:12:11.200 --> 00:12:19.120
works. So we work so that's how I pronounce that. We're doing with a V. Everybody relies on a lot


00:12:19.120 --> 00:12:22.000
some of these things even if you don't use Flask.


00:12:22.000 --> 00:12:25.600
And the Pallets project has a donate page now.


00:12:25.600 --> 00:12:27.640
So if you wanna donate,


00:12:27.640 --> 00:12:31.520
and you can donate through their donation page.


00:12:31.520 --> 00:12:32.360
Pretty neat.


00:12:32.360 --> 00:12:33.180
- It's really nice.


00:12:33.180 --> 00:12:34.540
So we've had a lot of news around Flask lately.


00:12:34.540 --> 00:12:36.600
Flask went 1-0 a while ago.


00:12:36.600 --> 00:12:38.680
I talked to one of the guys,


00:12:38.680 --> 00:12:40.400
I'm sorry, I'm so forgetting his name,


00:12:40.400 --> 00:12:41.320
'cause I met so many people,


00:12:41.320 --> 00:12:45.400
but who is basically responsible for that whole progression.


00:12:45.400 --> 00:12:46.360
David, I believe.


00:12:46.360 --> 00:12:47.600
Anyway, he's like,


00:12:47.600 --> 00:12:50.800
I know people think because the Flask went 1.0


00:12:50.800 --> 00:12:54.680
the week after you guys did the Zerover episode,


00:12:54.680 --> 00:12:56.880
actually that was in the works for like a year.


00:12:56.880 --> 00:12:58.240
I would love for you to be doing that,


00:12:58.240 --> 00:13:00.240
but it was actually just a coincidence.


00:13:00.240 --> 00:13:02.600
So anyway, glad to see it go 1.0.


00:13:02.600 --> 00:13:04.960
But yeah, this looks like Flask is getting some,


00:13:04.960 --> 00:13:06.360
a renewed love, which is good.


00:13:06.360 --> 00:13:09.760
- Yeah, and I didn't know Qlik was by the same people.


00:13:09.760 --> 00:13:12.520
I use Qlik all the time, so that's pretty neat.


00:13:12.520 --> 00:13:16.040
- Yeah, for creating CLIs, very nice.


00:13:16.040 --> 00:13:18.080
All right, so let's round it out with a little bit


00:13:18.080 --> 00:13:20.600
of an internals look here as well.


00:13:20.600 --> 00:13:22.320
I feel like a lot of stuff I'm covering this week


00:13:22.320 --> 00:13:25.000
is like deep in the guts with the Cython


00:13:25.000 --> 00:13:27.920
and if you're not doing Cython, you're doing regular Python,


00:13:27.920 --> 00:13:30.960
then you're operating in the bytecode space.


00:13:30.960 --> 00:13:32.580
So do you think people would be surprised


00:13:32.580 --> 00:13:34.320
if you told them that Python is compiled?


00:13:34.320 --> 00:13:35.160
- Yes.


00:13:35.160 --> 00:13:36.400
- A lot of them, I think they would.


00:13:36.400 --> 00:13:38.300
But it's not compiled to machine instructions


00:13:38.300 --> 00:13:40.560
or even JIT compiled unless you're using PyPy.


00:13:40.560 --> 00:13:42.200
But it's compiled to bytecode.


00:13:42.200 --> 00:13:44.560
So those PYC files, those are like


00:13:44.560 --> 00:13:48.000
the instructions to the Python virtual machine,


00:13:48.000 --> 00:13:50.420
not instructions to your processor,


00:13:50.420 --> 00:13:52.320
but they're still compiled and there's still this bytecode.


00:13:52.320 --> 00:13:54.400
And so understanding it's pretty interesting


00:13:54.400 --> 00:13:57.600
to just know like how the internals of Python is working.


00:13:57.600 --> 00:13:59.800
So there's this nice article


00:13:59.800 --> 00:14:01.900
called "An Introduction to Python Bytecode."


00:14:01.900 --> 00:14:04.560
So if this bytecode concept is kind of new to you


00:14:04.560 --> 00:14:05.900
or you just want to play around with a little,


00:14:05.900 --> 00:14:07.960
check it out, it's pretty accessible.


00:14:07.960 --> 00:14:11.400
So I feel like there's a lot of hello world examples


00:14:11.400 --> 00:14:12.920
in my topics.


00:14:12.920 --> 00:14:14.440
So back to hello.


00:14:14.440 --> 00:14:16.120
So they have a function def hello,


00:14:16.120 --> 00:14:19.720
and it just prints the static string hello world, right?


00:14:19.720 --> 00:14:21.800
So it's okay, well, what does this actually mean?


00:14:21.800 --> 00:14:24.320
And then they show you all the byte codes.


00:14:24.320 --> 00:14:25.760
It's okay, we're gonna load the global,


00:14:25.760 --> 00:14:26.800
which is the print function.


00:14:26.800 --> 00:14:28.600
We're gonna load the constant, which is hello world.


00:14:28.600 --> 00:14:31.800
Then we're gonna call the function that is on the stack.


00:14:31.800 --> 00:14:35.080
So CPython uses a stacked-based virtual machine.


00:14:35.080 --> 00:14:37.020
And so they like load these things under the stack.


00:14:37.020 --> 00:14:39.200
If you have like a function that takes two arguments,


00:14:39.200 --> 00:14:41.100
they might load two arguments on the stack


00:14:41.100 --> 00:14:43.440
and then call the function and things like that.


00:14:43.440 --> 00:14:46.800
So that's how your Python source code


00:14:46.800 --> 00:14:49.080
gets into executable form.


00:14:49.080 --> 00:14:50.960
And then these steps are actually sent


00:14:50.960 --> 00:14:52.680
down to the CPython runtime


00:14:52.680 --> 00:14:55.400
and this giant wild loop with a switch statement


00:14:55.400 --> 00:14:57.960
that's like literally 3000 lines of C code


00:14:57.960 --> 00:14:59.200
that says, what's the bytecode?


00:14:59.200 --> 00:15:00.960
Let's go do that.


00:15:00.960 --> 00:15:02.020
So it's pretty interesting.


00:15:02.020 --> 00:15:04.820
And they talk about how you can take your Python code


00:15:04.820 --> 00:15:05.660
and look at this.


00:15:05.660 --> 00:15:07.640
So you just import dis as in disassembly


00:15:07.640 --> 00:15:09.760
and you say, dis.dis,


00:15:09.760 --> 00:15:12.080
and you pass it like a callable or something like that.


00:15:12.080 --> 00:15:15.200
it'll show you the bytecode instructions that make it up.


00:15:15.200 --> 00:15:16.040
So it's pretty nice.


00:15:16.040 --> 00:15:17.180
- New phone, who dissed?


00:15:17.180 --> 00:15:18.160
(laughing)


00:15:18.160 --> 00:15:20.880
You can't actually just look at the PYC files though, right?


00:15:20.880 --> 00:15:22.120
- No, they're like bytes.


00:15:22.120 --> 00:15:23.800
That's why you need this diss thing.


00:15:23.800 --> 00:15:27.240
I mean, I guess if you can like parse the bytes you can,


00:15:27.240 --> 00:15:29.440
but it's not strings, I don't think.


00:15:29.440 --> 00:15:30.540
- Okay.


00:15:30.540 --> 00:15:32.680
- Yeah, I mean the PYC files are basically


00:15:32.680 --> 00:15:36.120
the compiled steps from your hello world text


00:15:36.120 --> 00:15:39.520
into the bytecode instructions in terms of bytes.


00:15:39.520 --> 00:15:41.680
And then that's why those cache things


00:15:41.680 --> 00:15:46.640
laying there, the next time you hit that app, right, it's just going to go and say, "Well,


00:15:46.640 --> 00:15:49.640
let's just load up that PYC so we don't have to reparse and validate it."


00:15:49.640 --> 00:15:50.640
Yeah, this is kind of neat.


00:15:50.640 --> 00:15:55.120
I'm definitely going to go check this out because I just want to know more about this.


00:15:55.120 --> 00:15:58.200
It seems like something I should know about even though I probably don't need to on a


00:15:58.200 --> 00:15:59.200
daily basis.


00:15:59.200 --> 00:16:02.960
Yeah, I mean, I'm not sure how helpful it is, but it's helpful in your conceptualization


00:16:02.960 --> 00:16:04.440
of how stuff works, I think.


00:16:04.440 --> 00:16:05.440
Yeah, definitely.


00:16:05.440 --> 00:16:06.440
Very cool.


00:16:06.440 --> 00:16:08.640
Yeah, a little bit deeper down into the...


00:16:08.640 --> 00:16:11.360
Is that the red pill or the blue pill that takes you farther down?


00:16:11.360 --> 00:16:13.360
That's a red pill, right? I don't remember.


00:16:13.360 --> 00:16:17.360
Awesome. Well, anyway, it's definitely worth checking out if you haven't played with Bytecode before.


00:16:17.360 --> 00:16:19.360
It's a really nice, simple way to get introduced to it.


00:16:19.360 --> 00:16:22.360
Brian, you got anything, any other news you want to share with everyone this week?


00:16:22.360 --> 00:16:24.360
I don't think so. Do you?


00:16:24.360 --> 00:16:27.360
No. I'm all out of news this week other than the ones I found.


00:16:27.360 --> 00:16:28.360
So, I just want to say thank you.


00:16:28.360 --> 00:16:31.360
Thank you for being part of this episode and sharing everything with everyone.


00:16:31.360 --> 00:16:32.360
Thank you. Bye.


00:16:32.360 --> 00:16:34.360
Yeah, you bet. Bye.


00:16:34.360 --> 00:16:37.360
Thank you for listening to Python Bytes.


00:16:37.360 --> 00:16:39.360
Follow the show on Twitter via @PythonBytes.


00:16:39.360 --> 00:16:45.400
bytes that's Python bytes as in B Y T E S and get the full show notes at Python


00:16:45.400 --> 00:16:49.120
bytes dot FM if you have a news item you want featured just visit Python bytes


00:16:49.120 --> 00:16:52.800
dot FM and send it our way we're always on the lookout for sharing something


00:16:52.800 --> 00:16:57.600
cool on behalf of myself and Brian Akin this is Michael Kennedy thank you for


00:16:57.600 --> 00:17:02.240
listening and sharing this podcast with your friends and colleagues

