00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to earbuds.

00:00:04 This is episode 106, recorded November 30th, 2018. I'm Michael Kennedy.

00:00:10 And I'm Brian Otkin.

00:00:11 Hey, Brian. How are you doing?

00:00:12 I'm good. It's early in the morning, man.

00:00:14 Yeah, good morning, man. We're recording a little earlier than our average lunchtime get-together.

00:00:20 But, you know, this is what we do for our audience. We get up when it's dark and we talk about Python.

00:00:26 Yes, we do.

00:00:27 Yeah. So before we get on to the topics, I just want to say thank you to DigitalOcean.

00:00:31 They're sponsoring the show like they did for much of this year.

00:00:34 So check them out at pythonbytes.fm/DigitalOcean. Get $100 free credit for new users.

00:00:39 Speaking of cloud hosting and whatnot, one of the main innovations that's been coming along here the last couple of years is this whole idea of DevOps, right?

00:00:47 I don't know. DevOps has been around for a while and really important for a lot of people.

00:00:51 But I think Python is getting involved more and more with DevOps.

00:00:56 We've also talked about packaging tools and dependency management a lot on this podcast and our others as well.

00:01:04 This is actually, we've talked about Poetry and Pipenv.

00:01:08 I don't know if we've covered pip-tools before, but...

00:01:11 I don't think we have.

00:01:12 pip-tools is a package that combines, like, it has a couple commands, pip compile and pip sync,

00:01:19 which are ways to work with pip-based, usage-based packages.

00:01:25 And I'm not going to really get into that too much, but what I found was interesting was there's an article recently written by Henick that is called Python Application Dependency Management in 2018.

00:01:40 So, basically, he's got a use case.

00:01:43 He's working in DevOps or a DevOps problem space right here.

00:01:49 And the requirements he's got for doing packaging is he wants to be able to specify immediate dependencies, like a requirement.text or something.

00:02:00 But then be able to have a tool resolve the dependency tree.

00:02:04 So, I know I need Django, but if Django needs a bunch of stuff, I don't want to have to specify all that.

00:02:09 And then, hopefully, have hashes like the lock files.

00:02:12 And then integrate these with talks so that you can run tests.

00:02:16 And then, also, the last one is in deploying servers, I don't want to actually have to activate, like, a virtual environment and then install everything.

00:02:26 I want to be able to install dependencies, an application and a dependency, into a virtual environment without having to actually go in there and do it.

00:02:36 Those all seem reasonable, but so far, he's tried PIPM, he's tried Poetry, and right now he's sticking with pip Tools-based solution.

00:02:45 Like using the pip Tools thing itself or just PIP?

00:02:48 A combination of them.

00:02:50 Because being able to, you can't just use pip alone for a lot of this stuff.

00:02:55 So, like, for instance, pip Tools is one of the things that you can create hashes with.

00:02:59 You can create, like, the lock files, essentially.

00:03:02 And working with multiple requirements files, like a requirements text or, like, a requirements.

00:03:07 He has a work model, which I haven't seen before, which is sticking multiple requirements files in a requirements directory.

00:03:15 So, you've got a main.

00:03:16 Oh, interesting.

00:03:17 Like a requirements slash main.txt and then a dev.txt for development requirements.

00:03:23 And then you also have to be able to update them.

00:03:25 So, occasionally, you've got pinned requirements, but you want to be able to update them to the newest and test that.

00:03:33 So, all these things, it requires, like, a work model that should...

00:03:37 These are reasonable requests.

00:03:39 One of the things I really liked about this was it was just, basically, we have a very...

00:03:44 We have an environment now that we're...

00:03:47 We want to be able to...

00:03:48 I think it's a good thing we want to be able to not slam people for, like, make fun of or bash on different projects too much.

00:03:59 But you also want to be able to be honest and say, hey, I tried this thing and it didn't work for me.

00:04:04 And so, one of the things I liked about this is I think it's a good example article of saying, hey, this was my use case.

00:04:11 I tried this thing.

00:04:12 This thing didn't quite work for me and here's why.

00:04:15 But also, don't slam the people who made that thing because I think it's cool that they're working on the problem.

00:04:22 It just didn't work quite right for me yet.

00:04:24 Yeah, this whole package management, package tooling stuff, dependency tooling, it feels a little bit like the editor wars, like, don't tell me to use Vim.

00:04:35 I want to use Emacs or I want to use PyCharm or whatever.

00:04:38 Not quite, but it seems something like people get into their workflow and, you know, they really like their workflow and they kind of want to stick with it.

00:04:44 Yeah.

00:04:44 I think there's also some limitations of some of these tools.

00:04:46 They're built to address different problems than the one you're trying to solve.

00:04:50 Right.

00:04:50 They're not one-size-fits-all things.

00:04:52 I find it refreshing because I actually really like the idea of poetry.

00:04:56 Actually, I like the idea of Pip-Am-Vam poetry, but I don't have any specifics right now, but I jumped in and tried to use it in some of my workflows.

00:05:07 Like, some of the things I tried just didn't quite work.

00:05:12 So I have to go back to old ways.

00:05:15 Yeah.

00:05:15 I mean, I guess that makes sense.

00:05:16 The more that those tools try to do for you all at once, the more likely they are to not exactly fit your workflow.

00:05:22 Yeah.

00:05:23 Yeah.

00:05:23 So one way that's really cool to extend applications would be to have the ability for someone to just drop a file into a directory, accessing a common API and have that just become part of your app or part of the capabilities of your app.

00:05:39 Right.

00:05:39 Like a plugin, right?

00:05:40 Yeah.

00:05:40 Yeah.

00:05:41 That'd be cool.

00:05:41 So there's a cool library called PluginLib.

00:05:45 PluginLib.

00:05:46 P-L-U-G-I-N-L-I-B.

00:05:50 Yeah.

00:05:51 So really nice.

00:05:52 And it addresses this problem in a couple of ways.

00:05:55 And when I first heard about this, I'm like, well, can you just put, you know, like a file in a directory and be good with it?

00:06:00 You know, just try to load it.

00:06:02 But the more I looked at what this library is doing, it's actually solving a lot of problems for us.

00:06:08 For one, it's an interesting example of metaclasses and programming with metaclasses.

00:06:13 But you don't really have to deal with it because you just use the API and it works.

00:06:17 But one of the things, plugins are validated when they're loaded instead of when they're used, right?

00:06:23 Right away, they're validated.

00:06:24 Make sure everything fits the API.

00:06:27 They can be loaded through either file paths, through entry points, through module names, and so on.

00:06:34 You could have multiple versions of the same plugin.

00:06:37 Oh, interesting.

00:06:39 Yeah, pretty interesting.

00:06:40 You can blacklist them.

00:06:41 So if somebody puts a, you know, some kind of plugin there, you're like, no, we're not going to allow you to load this even if we find it, you know, configure something like that.

00:06:49 You can group them.

00:06:51 You can have conditionals like this plugin works on macOS but not on Linux, for example.

00:06:57 All sorts of cool stuff like that.

00:06:58 So if you were thinking about having this extensible plugin model, you know, give plugin them a look.

00:07:04 It looks like it handles a pretty simple problem but has a lot of support for you while it's doing it.

00:07:10 Yeah, this is pretty neat.

00:07:12 Just check this out.

00:07:13 Yeah, you know, I just don't work on any apps that really, that makes a lot of sense for me.

00:07:17 But if I did, I would definitely want to have a look at that.

00:07:20 Yeah, it looks like it's based on, or partly based on abstract methods of class hierarchies.

00:07:27 Yeah.

00:07:28 And I think I remember looking at this, and this doesn't scare me off, but the particular application I was working with, we didn't have any classes uses anywhere, and I didn't really want to introduce them for this.

00:07:40 You're like, let's throw in some abstract-based classes and hierarchies do a thing that doesn't even use classes.

00:07:45 Yeah.

00:07:45 Yeah, that makes sense.

00:07:46 But at the same time, writing a plugin for an application is a very specific need, and I think it's fine for if it didn't match the model of the rest of your system.

00:07:56 Yeah.

00:07:56 Something to look into.

00:07:57 Cool.

00:07:57 Yeah, for sure.

00:07:58 So what do you got for us next?

00:07:59 For some reason, I'm a little interested in testing sometimes.

00:08:03 Really?

00:08:03 Yeah.

00:08:04 Yeah.

00:08:04 I'm surprised.

00:08:05 One of the PyBytes guys, Bob Belderboss.

00:08:07 Belderboss?

00:08:08 He wrote an article called, How to Test Your Django App with Selenium and pytest.

00:08:13 And yeah, pytest is one of my favorite things, too.

00:08:17 It's a really nice write-up of, I'm going to quote the beginning of it.

00:08:22 It says, in this article, I will show you how to test a Django app with pytest and Selenium.

00:08:27 One of the things I was intrigued by is they don't use a toy app.

00:08:31 They use their Code Challenges platform and compare the logged out homepage versus the logged in dashboard.

00:08:38 And I think that's really cool and brave of them to publish it.

00:08:42 This is how we're testing our own stuff.

00:08:44 Publicly.

00:08:46 On the internet.

00:08:46 Yeah, no, it's really cool.

00:08:47 Yeah.

00:08:48 And it talks through, I probably wouldn't have done it.

00:08:50 Part of the project setup, they're using the activate and deactivate of a virtual environment to load environmental variables.

00:08:59 I don't have specific links to it, but I know there's ways to do this within pytest itself as well, using something else.

00:09:08 Yeah, I know.

00:09:09 It's kind of cool to do that, but at the same time, it makes it hard to, it makes it a little bit hard to, I think it's kind of hidden in the whole setup, right?

00:09:19 There's nowhere in the code that you see that.

00:09:21 And you basically accomplish that by editing the activate script to set some environment variables when you activate the environment.

00:09:27 But if you go to another machine, you check it out again, some other location, that kind of stuff is not there.

00:09:32 So it's, you know, it's hard to store passwords and secrets.

00:09:35 You don't want them on, they definitely don't want to put them into this repo.

00:09:38 Right.

00:09:39 So what are you going to do?

00:09:40 But it is tricky.

00:09:41 Yeah.

00:09:41 And you wouldn't be able to use Tox with this because Tox is going to create its own virtual environment.

00:09:45 But yeah, so I'll have to, maybe I'll have to write up an example of how I would tackle that.

00:09:50 Yeah, that's actually would be interesting.

00:09:51 But the rest of it's, even though they're not using, mocking out a database itself, they do show how to do that, how to get the database set up.

00:10:01 And then, yeah, anyway, it's just kind of a cool example.

00:10:05 I love working with Selenium.

00:10:07 And this is a neat write-up.

00:10:09 It's cool.

00:10:09 You know, maybe not everyone knows about Selenium.

00:10:11 They maybe know about web scraping and maybe trying to test it that way.

00:10:16 They also maybe know about testing, like, inside of apps.

00:10:19 Maybe just quickly tell folks who are not totally familiar, what is this like?

00:10:24 Oh, yeah.

00:10:24 Is this like request or what is this?

00:10:26 What Selenium does is it really just opens up while it's running.

00:10:30 You don't have to interact with, like, what you see is what you get or anything.

00:10:35 You're using Python code to control a web browser.

00:10:38 And you can use it in a couple of ways.

00:10:41 You can have, like, a web browser that you can actually see.

00:10:44 So while it's running, it pops up on your screen.

00:10:47 Or, like, for instance, Chrome and I believe Firefox also has a headless version where it can operate without actually –

00:10:56 they just call it headless because it doesn't pop anything on your screen.

00:10:59 But other than that, it interacts just like it, as if it was open.

00:11:04 And you can, you know, navigate the DOM and you can select things and activate things.

00:11:10 And one of the benefits of going through this using Selenium is that all the JavaScript stuff is loaded also through loading everything.

00:11:19 You can interact with it as if it were just literally in your browser because it's literally in a hidden browser in the headless mode.

00:11:25 So, yeah, it's definitely an interesting way to do it.

00:11:27 And, like, his example, they're like, let's take these things and put it in the username, put it in the password, and then click this button.

00:11:32 You know, find this button and click it, the login button and stuff like that.

00:11:35 It's really unique.

00:11:37 Okay, so before we get on to FluPi, which is the next thing I want to talk about, let's talk about DigitalOcean real quick.

00:11:44 So you probably built a lot of apps, have a lot of cloud resources running so far this year.

00:11:51 But, you know, which one goes with which project, that's always been something that's driven me crazy about other places.

00:11:57 Like, go to AWS and there's, like, just tons of virtual machines running and stuff.

00:12:01 You're like, what is this?

00:12:02 Do we need these?

00:12:02 I don't even know anymore.

00:12:04 So it would be really nice if we could group them together.

00:12:06 And at DigitalOcean, they create this idea called projects where you can group droplets and load balancers and IPs and all that into application categories that they work with.

00:12:16 Like, you could have, you know, your app.

00:12:18 You could have a your app sandbox testing Q&A environment.

00:12:22 And you could have, you know, multiple ones of those and so on.

00:12:25 So really nice, super cool way to organize your environment in DigitalOcean.

00:12:29 Check them out at pythonbytes.fm/DigitalOcean.

00:12:32 And like I said, for people who are new users, you get $100 free credit to play around.

00:12:37 So that's also really nice to have.

00:12:39 Very nice.

00:12:39 So I'm a big fan of fluent APIs in general.

00:12:41 And, you know, maybe not everyone knows the term.

00:12:43 It's like when you take a thing and you call a function on it and that function itself returns back the same object.

00:12:52 So instead of saying I've got a variable and I first initialize it to a list and then I do some operation on that list and it changes it.

00:13:01 And I do another operation.

00:13:02 Maybe it turns it into a set.

00:13:03 Then I pass that set somewhere else.

00:13:05 I could just say, you know, like, let's say customers or let's say numbers.

00:13:09 This is an example.

00:13:10 It's easier.

00:13:11 So say numbers.map.filter.skip.take.orderby, right?

00:13:17 Just like one after another all in one line.

00:13:20 That's the fluent API in general.

00:13:22 So the thing that I want to point out is actually two libraries.

00:13:26 So you can take your flavor of this fluent API and apply it to collections.

00:13:32 Because there's often more than one thing you might want to do to a collection.

00:13:36 You might want to change its values.

00:13:38 You might want to filter it.

00:13:39 You might want to only take a couple of them or put them into groups and things like that.

00:13:43 So there's one called, I originally wanted to pronounce it as fluffy, but flupy.

00:13:48 Flupy is in fluent Python.

00:13:50 And it lets you do, well, exactly what I was describing on collections.

00:13:55 So given any collection, you can upgrade it to a fluent collection by just calling flu and passing the collection.

00:14:03 And then it has all these operations.

00:14:05 Like you say .map and pass it a lambda.

00:14:08 And then on that result, you say .filter, pass another lambda, .chunk to break it into like pages, I believe.

00:14:15 And .take will like give you only three chunks of five back, for example.

00:14:21 So you can do that all in effectively one line.

00:14:24 Now maybe you want to wrap it for readability, but you don't have to like use a bunch of intermediate variables or intermediate collections or anything like that.

00:14:30 Nice.

00:14:31 It's like, right?

00:14:32 And the thing that's really cool is it's all based on yield and generators.

00:14:37 Really?

00:14:38 Yeah.

00:14:39 Yeah.

00:14:39 So every step in this chain is some generator type of operation, which means you could pass it a billion items.

00:14:47 And it's not going to like filter a billion items and map a billion items and all that.

00:14:51 It's just going to take them one at a time through this sort of data pipeline that you build.

00:14:55 Nice.

00:14:56 Yeah.

00:14:56 So the example that I put in the show notes uses count.

00:14:59 Like just all of it.

00:15:01 All of it.

00:15:03 But, you know, it ends with a break it into like pages of five and take three pages.

00:15:09 Right.

00:15:09 So it only takes 15 items out.

00:15:11 Okay.

00:15:11 Even though you pass it in the way that that works, of course, with generators, because you can just pull through till like the last part stops pulling.

00:15:18 And then it basically stops iterating this infinite collection.

00:15:21 Really nice.

00:15:21 In the little example you give, you do like a four item in pipeline at the end too.

00:15:26 So you can use the result as a generator also.

00:15:30 Yeah, exactly.

00:15:31 Because it's a generator, like that whole sequence of operations doesn't actually execute until you iterate it, until you pass it to something that itself does.

00:15:40 Like pass it to a list or to a dictionary or something like that.

00:15:43 Yeah.

00:15:43 Or use it in another one of these pipelines.

00:15:45 So it's really cool to build up these data pipeline, data transformation things using FluPyde.

00:15:50 Nice.

00:15:51 Yeah, and they also have a CLI.

00:15:52 So you can do this kind of stuff from the CLI for this guy's data science team.

00:15:59 Not everyone necessarily is great with Linux, but they would like to do a little bit more with these tools and with these ideas, these Python data pipelines.

00:16:07 So you can actually execute these sorts of operations on the command line as well.

00:16:13 I like it.

00:16:13 And then do you want to cover ask?

00:16:16 I do.

00:16:16 I want to cover ask.

00:16:18 So ASQ.

00:16:19 So this is another one.

00:16:21 I don't think we've covered it, but I guess it's possible that we have.

00:16:24 There's kind of two philosophies here.

00:16:27 They both do the same general thing.

00:16:29 FluPy and ask.

00:16:32 ASQ.

00:16:33 But the operations that you get to apply to these Fluent collections changes or varies.

00:16:40 So the FluPyde is like map and filter and so on.

00:16:43 And the other idea is if we work with this link operation, this link API, which comes through the C Sharp space and is actually, I think, one of the better parts of C Sharp.

00:16:54 It really maps very closely to the SQL query language with where, select, order by, and so on.

00:17:00 So ask is very, very similar to this for Python.

00:17:06 It's exactly the same thing.

00:17:08 A Fluent API on top of collections.

00:17:10 But here's a collection of words like 0, 1, 2, 3 as written out.

00:17:15 And you say query of words dot order by len, then by, and you pass it just here.

00:17:23 It's just ordering alphabetically, but you could pass something else.

00:17:26 And take five, select string dot upper to list.

00:17:29 And what you get back is a list of the first five in that ordered by length one.

00:17:34 So the short ones, like 1, 6, 10, and so on.

00:17:37 To me, the database-like operators of ASQ is a little bit nicer than the map, filter, reduce syntax of the other one.

00:17:47 But they're both valuable, and they both have the same idea.

00:17:50 So I kind of thought it'd be fun to just cover them both here.

00:17:53 I think it's good there's both of them because it kind of depends on what sort of mindset you're thinking about.

00:17:59 It's a different way to think of similar problems.

00:18:01 Yeah, but they both solve similar problems in really interesting ways.

00:18:05 You know what I mean?

00:18:06 You could say like a list comprehension.

00:18:07 Okay, well, a list comprehension could do a filter, and it could do a map.

00:18:12 But it doesn't – I wish there was just a little bit more on those types of things.

00:18:17 Like, for example, wouldn't it be great if there was a order by clause in a list comprehension?

00:18:22 Instead of having to do the list comprehension and then do a sorted on top of the result, you know, things like that.

00:18:28 It's just – it's like you could almost not do these things with list comprehensions, but not quite.

00:18:33 You can't do a paging and stuff.

00:18:35 So it's like it just adds that little bit extra that often you really need in practice.

00:18:38 Yeah, yeah, true.

00:18:39 Nice.

00:18:41 So there's a pretty exciting blog that's kicking back into gear?

00:18:43 Yeah.

00:18:43 It's a blog called Neopythonic, and it's Guido's blog.

00:18:48 And the last time we saw him, it looks like the last blog post before November was in July of 2016.

00:18:56 So one of the benefits of him stepping down as a BDFL is that he can blog now.

00:19:04 So this is a good – Yeah, I think it's – and, you know, the one from July was just him turning off comments because people are spamming us.

00:19:10 So it was even farther back than that.

00:19:11 It's great to – it's great to see him getting back into action.

00:19:15 So we have this.

00:19:16 We have him doing some more interviews with, like, the MIT podcast video series and whatnot.

00:19:23 So, yeah, it's really great.

00:19:24 And a couple of questions – so he's just answering listener questions or student questions, really.

00:19:29 And a couple of questions are whether to choose a 9-to-5 job or be an entrepreneur.

00:19:34 And then the other one is, will AI make human software developers redundant?

00:19:41 And, of course, the answer to the second one is no, because software development is not boring and AI is to replace boring tasks.

00:19:49 And, like, driving a car, yeah.

00:19:51 But the 9-to-5 versus entrepreneur is interesting because, as we know, he's worked for other people for a while.

00:19:58 Yeah, some really interesting places, right?

00:20:01 Like Google and Dropbox and stuff like that.

00:20:04 Yeah, I mean, they kind of tied together because at the end of the 9-to-5 question, he said, just be sure to not take a job that can be immediately replaced by a computer.

00:20:14 Yeah, for sure.

00:20:16 Did you ever see the posters called Demotivators?

00:20:19 I think that's what it's called.

00:20:20 No, it sounds great.

00:20:22 So you know those posters that, like, corporations will hang up that just, like, make you cringe?

00:20:26 It'll be, like, an eagle flying over, like, ocean with a sunset, and it'll say, we all soar together, or we can all soar higher.

00:20:36 Like, something you're just like, whoa, no, come on.

00:20:38 Who's that supposed to act?

00:20:40 So Demotivators have pictures like that, but the caption isn't something super positive.

00:20:45 Like, one example would be there's, like, a hang glider flying over an ocean into a sunset.

00:20:51 And the caption is something to the effect of, like, it's so great to dream big and to fly out, you know, like, soar towards your dream.

00:21:01 It's even better to sit on the shore and watch people sink into the ocean when they, you know, it's just, like, stuff like this, right?

00:21:06 So there's one about what you're talking about here, and it says, see, do you have a boring, it's got some picture of, like, people working together.

00:21:16 It says, your job is boring.

00:21:17 So boring that it'll probably be replaced by robots in 10 years.

00:21:21 You should find a new job.

00:21:22 But it's got, like, this beautiful picture.

00:21:24 Maybe I'll try to find it and link to it.

00:21:26 But, yeah, they're really good.

00:21:27 Yeah, it's dark.

00:21:28 Nice.

00:21:28 Yeah, it's great.

00:21:29 Great humor.

00:21:31 All right.

00:21:32 So the last thing I want to talk about today is something called Anvil.

00:21:37 And I'm surprised I haven't talked about it on the show.

00:21:39 I've had Meredith on Talk Python who created this.

00:21:42 And I think there's several interesting aspects.

00:21:45 In and of itself, it's interesting.

00:21:46 But then also how it works.

00:21:49 Pretty unique.

00:21:50 And maybe inspires some other folks as well.

00:21:52 So Anvil is a visual web building tool.

00:21:59 So what you do is you go there and you log in.

00:22:02 And it gives you kind of this design surface, right?

00:22:05 You can go and you've got buttons and text boxes and combo boxes and stuff like that.

00:22:10 And you can drop them down and interact with them, set some properties.

00:22:13 And you've got this visual bit.

00:22:15 And you've got, like, this sort of code part that runs as you interact with it.

00:22:18 So you've got a visual piece you can work with and a code behind or a code view, they call it.

00:22:23 And what's really interesting is all of that stuff happens in Python.

00:22:28 So if you've got, like, a combo box, you want to hook the change event, you don't go and write JavaScript.

00:22:33 You, like, double-click the little combo box and it takes you to a method that's Python, you know, def, combo box.click or underscore click.

00:22:42 And that little comment says, write your code here.

00:22:45 Oh, nice.

00:22:45 That code is Python code and it runs in your browser.

00:22:48 That's cool.

00:22:49 So, you know, we've talked a lot about WebAssembly and some of these other things about how do we get Python in your browser.

00:22:55 Here is, like, a full web development framework where the majority of your logic runs on the client side written in Python, but then behind the scenes, you know, translated to JavaScript.

00:23:07 Okay.

00:23:08 Well, this would be fun to play with.

00:23:09 Yeah, it's really interesting.

00:23:11 And then they also have, like, a back-end database and a back-end services where you can write some code that runs in, like, a Docker container or something.

00:23:18 So you have a server-side bit and a client-side bit.

00:23:20 But most of the code you write, by default, would probably land up in, you know, if you don't restructure things, probably land up as Python running the browser.

00:23:28 And it's really quite nice.

00:23:30 So here's a cool way for people who don't really know that much about web apps but they know Python.

00:23:37 A really nice way to quickly get up to speed with sort of what I think of as, like, forms over data type web apps, right?

00:23:43 Here's a grid.

00:23:45 Here's a bunch of input boxes.

00:23:46 I need to enter that data, save it, put it into a list, and show it to you.

00:23:50 Like, really quite common types of apps for sort of intranet type apps.

00:23:55 So check that out.

00:23:56 It's pretty cool.

00:23:58 And it does have a paid version, but there's also a free version.

00:24:01 So maybe it's interesting to people, but I think it's just interesting as a case study of how they're using Python in the browser as well.

00:24:07 Yeah.

00:24:08 Cool.

00:24:08 Cool.

00:24:09 Yeah.

00:24:09 All right.

00:24:09 Well, that's it for our six items this week.

00:24:12 Brian, you got anything else you want to share with everyone?

00:24:14 Yeah, I want to share.

00:24:15 I've got big news.

00:24:17 Big, big news.

00:24:18 Anyway, not huge news, but I wrote a book called Python Testing with pytest.

00:24:24 Did you know that?

00:24:25 Yes, I did.

00:24:26 It's awesome.

00:24:26 Yeah.

00:24:28 So we talked about it a lot for the first year we were doing this.

00:24:31 But the news related to that is there's a second printing out.

00:24:35 So I updated it, ran everything with Python 3.7 and the modern version of pytest at the time.

00:24:43 And then also fixed a whole bunch of the errata of people that pointed out, things like just little typos and things like that.

00:24:50 And updated the source code, stuff like that.

00:24:53 Nice.

00:24:54 Congratulations.

00:24:54 So it's available.

00:24:55 P2 is available.

00:24:56 They call it P2.

00:24:58 It must be second printing P2.

00:25:00 Anyway.

00:25:00 How about you?

00:25:01 Any news?

00:25:02 No, nothing.

00:25:02 Nothing right now.

00:25:03 I'm in just massive podcast recording mode trying to get ready for the holidays, both so that I can take a week or two off.

00:25:11 And it's also hard to get guests to come on over the holidays because obviously they want to do just chill out stuff.

00:25:18 It's been all recording all the time.

00:25:20 So I have cool things I've recorded, but they're not out yet.

00:25:23 We've even done one together, right?

00:25:25 That'll be fun.

00:25:26 Yeah.

00:25:27 And then I had you on mine too because I have the same problem you do.

00:25:31 That's right.

00:25:33 Yeah, we've got a lot of fun stuff coming out on Testing Code and Talk Python.

00:25:36 And of course, as always, on Python Bytes.

00:25:39 So we're not taking a break over Christmas break.

00:25:41 We're going to try to just go all the way through.

00:25:44 That's right.

00:25:45 We may physically be taking a break, but due to the magic of time shifting and podcasting, the podcast will not be taking a break.

00:25:51 Yes, wonderful.

00:25:52 Yeah, awesome.

00:25:53 Well, thanks for talking to me this morning.

00:25:54 Yeah, you bet.

00:25:55 Bye.

00:25:55 Bye.

00:25:56 Thank you for listening to Python Bytes.

00:25:57 Follow the show on Twitter via at Python Bytes.

00:26:00 That's Python Bytes as in B-Y-T-E-S.

00:26:03 And get the full show notes at pythonbytes.fm.

00:26:06 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:11 We're always on the lookout for sharing something cool.

00:26:13 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:17 Thank you for listening and sharing this podcast with your friends and colleagues.

