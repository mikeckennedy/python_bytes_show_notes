00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 113 recorded January 16th, 2019. I'm Michael Kennedy.

00:00:10 And I'm Brian Okken.

00:00:11 And this episode is brought to you by DigitalOcean.

00:00:14 Check them out at pythonbytes.fm/digitalocean.

00:00:17 Get $100 free credit for new users.

00:00:19 Brian, how you been?

00:00:20 I am great.

00:00:21 Nice. Me too.

00:00:21 Cold though.

00:00:22 Yeah, it's... I don't know what happened. It's like winter, mid-January.

00:00:25 I guess it's supposed to be cold.

00:00:27 But yeah, it's cold.

00:00:28 Maybe. My daughter said this morning, like, when are we going to get snow?

00:00:31 And I said, well, I hope never because I don't have snow tires yet.

00:00:34 So I just bought snow tires for my car so I can drive up to the mountains and go skiing real easy.

00:00:38 So I'm ready. It can snow whenever. But yeah, if it's not going to snow, let it be a little warm.

00:00:43 So speaking of wintry type things, advent calendars, those are a type of things that folks use a lot in December, right?

00:00:51 Yeah. And actually this last December, I totally meant to do the advent of code thing, but I didn't.

00:00:57 And also one of the things I'm doing this upcoming year is I'm trying to I read a great article about practicing programming I want to try to do incorporate more practice outside of just Doing my own work at work, but practicing extra things and there's challenges and code things and little snippets and everything But sometimes I I just want like 20 minutes of reading something and this is great. So I ran across this It's from Michael Fogelman. It's the Advent of Code 2018 solutions.

00:01:29 And it's pretty much he just talks through all the different...

00:01:32 He went through all of the Advent of Code for 2018 and then he solved them in Python.

00:01:37 And a lot of people have posted their solutions on GitHub.

00:01:40 This is a nice write-up that he has to describe how he solved them.

00:01:44 And there's some nice code comments. It's really put together well.

00:01:47 Yeah, I like it. You just sort of cruise through and see the problem, see the solution, see what you think.

00:01:52 I find looking at other people's solutions of fairly simple programs, especially compared to your own, it's a pretty interesting experience.

00:02:01 Like, "Oh yeah, I totally solved this." And then you look like, "Oh wait, they did that in two lines and mine took 10." Or, "Why did they do it that way versus this?" It's pretty cool.

00:02:10 Yeah, looking over, reading code is one of the ways to get better.

00:02:13 So it's a good way to practice is reading other people's code.

00:02:16 Yeah, and it's not like, "Read the Django source code or read the request source code." and it's like a huge undertaking, right?

00:02:23 These are 10, 20, 25 lines of code.

00:02:25 Yeah, yep, definitely.

00:02:27 So I dropped this in because I think I'm going to start trying to incorporate, sprinkle in some reading, reading of these into my daily practice.

00:02:35 Yeah, I think that's a good idea.

00:02:36 Do you know what the most popular platform that Python runs on is, Brian?

00:02:40 Probably Macs, Mac laptops.

00:02:42 A lot of Mac, a lot of Mac laptops, a lot of stickers on them.

00:02:46 That's what you'd believe if you were at a conference like PyCon or something.

00:02:49 Everyone's running around with their Apple logos glowing or sadly no longer glowing on the new Macs.

00:02:54 But nonetheless, it feels like when you're in those environments, it's mostly Mac and some Linux and obviously server-side Linux.

00:03:03 But really, a lot of the surveys say most of the users, you know, by a pretty wide margin are actually on Windows.

00:03:11 So we're talking students, we're talking corporate environments, A lot of folks who don't show up necessarily carrying those around at conferences, but that's where it is, right?

00:03:21 Yeah.

00:03:21 So the big news is that the PSF, broadly, and specifically Steve Dower, one of the core devs, who works at Microsoft, has released Python 3.7 as an official app on the Windows 10 store.

00:03:36 Nice.

00:03:37 So there's all sorts of stuff that is really awesome from that.

00:03:40 So that means you can just go to your Windows store and search for Python and say, "Yeah, I want that." You can actually already do that for Ubuntu subsystems and stuff.

00:03:50 You can do that for Linux distribution, surprisingly, and run those as subsystems in Windows, but not Python.

00:03:57 And some of the stuff that's really cool is it automatically takes care of a couple of problems that were incompatibilities between Windows and the other operating systems.

00:04:07 So, for example, Python 3 is a command in the Windows 10 App Store version, but not the one you actually install separately.

00:04:15 So now if you see instructions like type Python 3 this that that now works on Windows too also.

00:04:21 That's nice. Yeah, so it's a little more similar. It automatically puts that stuff in the path. I believe the place where you pip install stuff no longer requires admin access to do it because it's under your user profile, it's part of the store stuff. So a whole bunch of good things. Have you talked to anybody to find out when we're going to get to the point where the default Python is going to be Python 3 anyway.

00:04:42 That would be sweet, wouldn't it?

00:04:43 You know, all the stuff I've seen about it is like, it would be great, but it would also cause a lot of problems.

00:04:49 We saw that Red Hat Enterprise Linux is actually moving away from having a Python command at all.

00:04:55 So now it's either Python 3 or Python 2, and you have to be super explicit everywhere.

00:05:00 So I would love to see that, but I don't see it.

00:05:03 On my systems, Python means Python 3, because I've changed the path around, so that works that way.

00:05:09 But not everywhere, you know?

00:05:10 - Yeah, you recently talked about this and a lot of other things on Talk Python, right?

00:05:15 - Yeah, I had Steve Dower come over onto Talk Python and talk about his retrospective of Python's journey at Microsoft, which is actually really interesting.

00:05:25 It sort of matches the open source journey from a very closed source company to way more open source.

00:05:31 And there's a lot of cool stuff going on there.

00:05:33 They have a ton of core developers working at Microsoft, actually.

00:05:36 It's pretty neat.

00:05:37 - Yeah, that was a really interesting conversation.

00:05:38 I liked that. - Yeah, thanks.

00:05:40 So there is one limitation on the Windows Store version of Python that maybe is worth throwing out there while we're talking about it is they don't have full right access to shared locations like for example, the registry or SQL and backslash program files or stuff like that.

00:05:56 Right.

00:05:57 So it's kind of only has access to your user profile stuff, you know, whatever you can do without raising your permissions that you see stuff.

00:06:04 So that's a limitation that you may run into because the Windows Store apps are more locked down than regular apps.

00:06:10 But still, I think this is super cool.

00:06:12 You can go and just say, hey, you don't need to be an admin.

00:06:14 You just go to your Windows Store.

00:06:15 You click this little button.

00:06:16 And you also have Python 3 as a command.

00:06:18 It's quite nice.

00:06:19 Can you write stuff that's outside of your little environment?

00:06:22 Not write stuff, but read it.

00:06:23 Yeah, I'm pretty sure you can.

00:06:24 Like, you could read the registry, I would think.

00:06:26 Things like that.

00:06:27 Whatever you would be able to do without that little, this program would like to use admin rights, yes/no dialogue pop-up, I suspect you'd be able to do.

00:06:35 I think that's a good idea anyway.

00:06:37 So it's going to be in the App Store.

00:06:38 Yeah, exactly.

00:06:39 So I would actually love to see that on macOS, if Python 3 was an option on macOS, because the auto-updating feature is pretty cool.

00:06:47 Like you just wake up one day, and boom, you have the next version of Python.

00:06:50 Of course, that could cause its own problems, but it wouldn't be bad.

00:06:54 Python 5?

00:06:55 What's that?

00:06:56 Oh my goodness.

00:06:57 It's amazing.

00:06:58 Nothing works anymore.

00:06:59 What happened?

00:07:00 No, that's pretty cool, though.

00:07:01 I'm happy to see it getting some serious attention over there.

00:07:04 Yeah.

00:07:04 Definitely.

00:07:05 All right.

00:07:05 Well, what's next?

00:07:06 There's a project so new that it like came in in November this last year.

00:07:10 It's a project called a Bocadillo.

00:07:13 Yeah.

00:07:13 That's how I would say it as well.

00:07:14 Yeah.

00:07:14 A Bocadillo.

00:07:15 Yeah.

00:07:16 Yeah.

00:07:16 I think so.

00:07:16 Tagline is a modern Python web framework filled with asynchronous salsa.

00:07:20 But the, I'm not really going to talk about that.

00:07:22 I'm going to talk about article that the, the maintainer it's a four month bunker wrote an article called how I built a Python web framework and became an open source maintainer.

00:07:33 And it's this really fascinating article talking about pretty much what he went through.

00:07:38 He knew that there were a lot of other web frameworks already, but he built this to try to learn the internals of how to build a web framework and then just did it in the open.

00:07:47 But there's some really great advice.

00:07:49 One of the things he credits from somebody else called Funky Bob is reinventing the wheel is an awesome way to learn.

00:07:56 And sometimes what you learn is just how much your existing frameworks are doing for you.

00:08:01 I thought that was cool.

00:08:02 - That's very cool.

00:08:03 - This thing went from just inception to building it to putting up docs and getting extra maintainers in the course of a month in November.

00:08:13 And now it's still going, but there's one of the discussions in the article is talking about how he tried to put as much in the README as possible right off the bat, like a change log and contributing guidelines and how to work it and everything.

00:08:29 But the README got huge, So that migrated to a GitHub pages static site generator doc site.

00:08:36 And then also one of the things is he had all of his to-do items of what he wanted to work on next in a Trello doc, in Trello, but nobody else can see that.

00:08:47 So he moved Trello issues to GitHub issues.

00:08:50 And this process of trying to do a new project in a way that is open and encouraging other people to help out.

00:08:59 And then at the end of the article, it goes through, I'm not gonna go through all of these, but there's a whole bunch of tips on what to do with the project to make it encourage other people to get involved.

00:09:08 And this is like a goldmine of information for people wanting to start an open source project.

00:09:13 - Yeah, if you're thinking about an open source project or how to make it grow, you're right, there is an incredible amount of tips.

00:09:20 I mean, there's probably 45 specific things like this helps, this helps, this helps, right?

00:09:25 So that's really awesome.

00:09:27 - Yeah, if all this information at the bottom, you could have written a book on this, and maybe you will.

00:09:33 - Yeah, maybe you will.

00:09:33 - But thanks, Flormund, for putting this together.

00:09:37 - Yeah, it looks great, and the framework looks pretty nice as well, I like it.

00:09:40 I feel like a lot of these web frameworks are like slight derivatives of the Flask API.

00:09:47 They seem to all be centering around Flask for some reason, but Flask is pretty good, so that's cool.

00:09:52 Speaking of cool, I heard Kubernetes is cool.

00:09:55 Kelsey Hightower told us it was, It definitely showed us a cool demo at PyCon.

00:09:59 - Yeah, I believe anything Kelsey says.

00:10:01 - Yeah, for sure.

00:10:02 So Kubernetes is a way to basically orchestrate containers.

00:10:06 Often you don't want it to run one container, you want to run multiple ones, one with a database, couple web front ends, things like that.

00:10:13 And it's really a nice way to do zero downtime deployment on top of that and so on.

00:10:19 So DigitalOcean, who's sponsoring the show, of course, has just officially publicly released, no longer preview status, their DigitalOcean Kubernetes service.

00:10:30 So it's like a managed service and you can basically sign up for it and configure a Kubernetes cluster in a couple of seconds and provision it and log in within a couple minutes.

00:10:41 So it's super easy to scale.

00:10:44 You take inbound traffic and just access your data over block storage, pass it through your load balancers.

00:10:50 It's all great.

00:10:51 So they also say they saw a 2.4 times, not percent, times better price to performance compared to other providers.

00:11:00 So I can definitely believe that DigitalOcean's awesome.

00:11:03 So anyway, if you're thinking about this, check them out at pythonbytes.fm/digitalocean.

00:11:08 Get $100 free credit from your users and try your hand at some Kubernetes clusters.

00:11:13 - Nice. - Yeah, indeed.

00:11:14 You could even probably serve up Bocadillo on Kubernetes.

00:11:19 That'd be fun.

00:11:20 - Yeah.

00:11:21 (laughing)

00:11:22 - Cool, well, one thing that we talked about recently, and so this is a little bit of a follow-up, is the maintainability score.

00:11:29 Do you remember what we were talking about with the maintainability score?

00:11:31 It was like a sub-idea of something that we were covering recently.

00:11:34 - I totally remember, but I don't remember the main topic.

00:11:37 - I don't, it's always so many things we cover every week.

00:11:39 But yeah, it was one of the projects, and it was like, hey, this has a maintainability score of A, and we're like, wait, where did you get that score?

00:11:46 So, a friend of the show, Anthony Shaw, sent over, You know, he's done this project called Wiley.

00:11:51 Did you guys talk about it on your show?

00:11:52 - We talked about it briefly, yeah.

00:11:54 - Yeah, so Wiley is a Python app for tracking and reporting on timing and complexity and tests and things like that.

00:12:02 So what you can do is you can point this at your project and tell it to analyze it and then generate a bunch of reports.

00:12:10 And it has two types of reports that are relevant to this maintainability index.

00:12:14 It has just a number, like a percentage, and I think higher is better there.

00:12:18 It also has a rank from A to F, like a grade score on it.

00:12:23 So you can run this against your code and ask it, and you can even graph that kind of stuff over time.

00:12:28 So it's getting, on the reports it'll say, ah, it's lost some maintainability, or it's gained some maintainability, which I thought was pretty cool.

00:12:35 - Yeah, that is cool.

00:12:37 - Yeah.

00:12:38 So check out Anthony's project.

00:12:40 I'll link to it, of course, in the show notes.

00:12:42 And if you can see how well or not well Wiley thinks your app is doing.

00:12:47 It even has a GitHub pre-commit hook, as all the cool things do these days.

00:12:51 Yeah, that's a fairly new project too.

00:12:53 Wiley's only been around for a couple, two, three months or something.

00:12:56 Yeah, absolutely.

00:12:57 It's pretty new.

00:12:58 Would you say it's awesome?

00:12:59 I would say it's awesome.

00:13:01 I think so, yeah.

00:13:02 What else is awesome?

00:13:03 I kind of like the awesome lists.

00:13:05 So awesome lists, if you're not familiar with them, are usually on GitHub, but they're basically the readme is filled with links to a whole bunch of other projects of a particular type.

00:13:16 There's two awesome lists that I came across recently.

00:13:19 One of them is awesome Python security resources, and the other one is awesome Flake 8 extensions.

00:13:26 So as far as security resources, it covers tools and education resources, and then a couple of companies also.

00:13:34 The very first one that it has listed here is secure.py, which we talked about just, I think, last week or just recently.

00:13:39 Yeah, and we've also, I think we've talked about Bandit also for static analysis.

00:13:44 Some of these we've talked about and then I also, I really liked that it also included some education resources if you want to learn more about security for your software.

00:13:53 So this is a nice place to go for security stuff.

00:13:56 And then I like Flake 8 anyway as just as a tool by itself for static code analysis.

00:14:02 But I like that it has a plug-in system with it.

00:14:06 And so there's lots of different extensions to Flake 8.

00:14:09 So Brian, for the couple of folks out there who don't know what Flake is, Flake 8 is, Give them a quick, the elevator pitch.

00:14:15 - I don't know the elevator pitch.

00:14:16 (laughing)

00:14:17 It's not PEP-8 anymore.

00:14:19 It's like PyCode style or something like that.

00:14:21 - Yeah, it's a format, basically the formatting conventions of the language, right?

00:14:26 - Yeah, Flake 8 itself runs the checks for those, but it, and I think the 8 is because it checks a whole bunch of other things.

00:14:34 What it does cyclical, some complexity algorithm, and gosh, you're putting me on the spot here, man.

00:14:40 - No, no, that's close enough though.

00:14:41 But so basically it analyzes the quality of your code, right?

00:14:44 But it only does so much.

00:14:45 It's definitely a static analysis.

00:14:47 It's just looking at it just without running it.

00:14:50 So you found a couple of plugins for it?

00:14:52 Yeah, the extensions, there's a whole bunch of them.

00:14:55 There's some security ones that actually overlap.

00:14:59 The security resources in the previous list, you can run them from Flake 8.

00:15:06 So like the static analysis that's available for security, like Bandit, I think there's a Flake 8 Bandit.

00:15:12 There's also a couple of my favorites are, this is interesting, there's a Flake 8 pytest extension that I want to try this.

00:15:20 It doesn't actually run your pytest.

00:15:21 What it does is it checks to make sure that you've got pytest style assertions.

00:15:25 So one of the benefits of pytest is just regular assertions and not like the unit test stuff.

00:15:32 If you've converted from unit test to pytest, you might still have some of those other assertions laying around, and this one we'll try - Yeah, one that pops out to me is like flake8-docstrings, which actually checks the docstring code for you, which is pretty awesome.

00:15:50 Validates this restructured text of your documentation.

00:15:54 That's sweet.

00:15:55 - Oh, that's nice, yeah.

00:15:56 - Yeah, and there's just so many in here.

00:15:58 - Yeah, and there was, I didn't write this one down.

00:16:00 There was one that like checks for, it checks to make sure that you're not mocking things that didn't exist.

00:16:05 So the point of mock is to fake out existing functionality so that you do something different.

00:16:13 One of the things that you can muck up with is you can be mocking the wrong function name and it'll work just fine in your tests.

00:16:21 Your code won't run.

00:16:23 This plugin will check to make sure that you're mocking real existing methods and not made up methods.

00:16:28 - Yeah, cool.

00:16:29 Well, these are great.

00:16:30 These are awesome finds, right?

00:16:31 - Yeah. (laughs)

00:16:32 - Another thing that's awesome is logging.

00:16:35 So remember a couple weeks ago we talked about Loguru?

00:16:38 - Yeah. - Loguru?

00:16:39 Loguru?

00:16:40 We don't know.

00:16:41 We'll just try all the variations till one of them hits, I'm guessing.

00:16:44 And of course--

00:16:45 - I think it rhymes with kangaroo.

00:16:47 - It does.

00:16:48 And so just like when we talked about GUI frameworks, we're like, oh, here's like a couple of them.

00:16:53 And then just people are like, oh, and did you know?

00:16:55 Did you know?

00:16:56 So here's another really cool logging framework that Robert Young sent over to us to say, oh, you talked about Loguru.

00:17:02 You should definitely check this out.

00:17:03 So this is called fast logging.

00:17:06 So fast logging is a replacement for the standard logging module, and it's mostly compatible, which is pretty cool.

00:17:13 But would you guess from the name that it's faster?

00:17:16 - I should hope so.

00:17:17 - So basically the point is, logging can be kind of slow it turns out in the standard logging module.

00:17:22 But this one is faster, and not just like 20% faster, it's like five times faster for a regular file.

00:17:28 And if you're doing rotating log files, it's actually about 13 times faster.

00:17:33 So if you're doing a lot of logging and it's turning, basically the logging is slowing down your app, think about fast logging.

00:17:38 - Yeah, nice.

00:17:39 - Yeah, and it has a bunch of cool features.

00:17:41 So like, if you install Colorama, which is a great color way to do output on the console, it'll actually do colored logging when it's logging to print, you know, standard out.

00:17:53 You can set the maximum file size and rotating, a lot of options on the rotating stuff.

00:17:58 It'll also, like LogGuru, compress the older file, older log files, which can be 10 X or more savings.

00:18:06 Like those log files compress really, really well.

00:18:08 Can do like only log every so often, based on domains, different files, like all sorts of stuff.

00:18:14 You get callbacks.

00:18:15 One thing that's kind of cool is it'll do logging on background threads per file, which is pretty cool if you configure it.

00:18:22 So if you're like, all right, I want to log this stuff, but I know that might slow down my app and I don't want any slowdown.

00:18:29 So this will basically push it off to a background thread, which you'll eventually pick it up and write it.

00:18:34 So you can keep stuff flowing right along, maybe in a web request or something like that.

00:18:38 It's pretty cool.

00:18:39 - Yeah, yeah, very nice.

00:18:40 - Yeah, so thanks Robert for sending that in.

00:18:42 That's a good one.

00:18:43 Brian, that's it for our official items.

00:18:45 Got anything else?

00:18:46 - I actually don't, not right now.

00:18:47 - Nope, all right, right on.

00:18:49 - How about you?

00:18:49 - I have two things that I'd like to just throw out there really quick.

00:18:53 First of all, I'm doing a live webcast, but it'll also be recorded, over on January 24th at 11 a.m. Pacific time.

00:19:01 basically working and showing async and await in Python and building a little app that uses that.

00:19:07 So if you got a free hour and you want to drop in, check that out, put the links in the show notes there.

00:19:13 And we already talked about Anthony Shaw and his Wiley, but he also sent over a heads up, which I also got from GitHub, to watch your YAML.

00:19:23 YAML apparently had some pretty decent security vulnerability.

00:19:27 Like, I don't know how many people know, but you can actually just straight up execute arbitrary Python code in a YAML file.

00:19:35 That's bad, right?

00:19:36 So like, yeah, so hey, upload your configuration file and we'll just run it for you.

00:19:40 And like the configuration file is like, username is this, password is that, database format is this, bang, Python format the system or do other bad things.

00:19:51 Like it was really crazy that the YAML format just lets you embed code into what is otherwise supposed to be a static file.

00:19:58 Alright, so the warning is that you're supposed to use, what's it called, safe_load instead of load, but they've fixed some stuff to make that, basically make that more obvious with a new version of PyAML.

00:20:10 So if you're using PyAML, GitHub will give you a warning about this.

00:20:14 Anyway, it seems like it could actually have a lot of consequences if you don't update that, so check that out.

00:20:19 Yeah, but also if you're using PyAML, updating to the newest version should fix that, right?

00:20:24 Yes, you should.

00:20:25 What's weird is we talked about zero for the way you fix the pie.

00:20:30 Yama problem is you take a, an official, like I'm just a mess.

00:20:33 It's like one dot three release and you upgrade it to a beta release.

00:20:38 So it's like, so you have to install the beta version to not have the security problem, which I don't know.

00:20:43 Take that for what it is.

00:20:44 Yeah.

00:20:44 Okay.

00:20:45 Come on.

00:20:46 Bye.

00:20:46 I'm with people.

00:20:47 That's right.

00:20:48 All right.

00:20:48 Do you have a joke for us this week?

00:20:49 I don't.

00:20:50 All right.

00:20:50 I have a joke.

00:20:52 This is an oldie, but a goodie.

00:20:54 It's about Python, which is pretty sweet.

00:20:56 So if you're out there and you type Python on your terminal command prompt, and then you just import anti-gravity, like the command, right?

00:21:05 Import anti-gravity.

00:21:06 It turns out, have you done this, Brian, before?

00:21:09 Yeah, but it's good to bring it up because some people don't know about it.

00:21:11 Yeah, exactly.

00:21:12 This is one of the better things built into the Python REPL, honestly.

00:21:16 And so what it does is it actually opens up an XKCD comic, which is a great joke about Python's packages and libraries.

00:21:23 So there's a picture, there's a stick figure flying up in the air, and the stick figure on the ground, obviously amazement on his blank face, stick face, says, "How are you flying?" "Python!

00:21:36 I just learned it last night.

00:21:38 Everything's so simple.

00:21:39 Hello world is just print hello world." The guy on the ground says, "I don't know, dynamic typing, white space." The guy in the air says, "Come on, join us.

00:21:48 Programming's fun again.

00:21:49 It's a whole new world up here.

00:21:50 But how are you flying?" "I just typed import anti-gravity." That's it. I also sampled everything in the medicine cabinet for comparison, but I think it's the Python It's a good it's a little bit of goody, right? Yeah. Yeah, and what while you're playing on the command line It's not a joke, but import this it's another hidden Easter egg not very hidden, but that it'll show you these in of Python. Yep. That's awesome I'm gonna save another import joke that you can do on the terminal or in the rebel for next time or a time after - Okay.

00:22:20 - But yeah, I really love it that these kind of jokes and humorous things are built in there.

00:22:25 It's not like Python has been sterilized of all humanity.

00:22:29 - Yeah, and Anti-Gravity connects Python with XKCD, which is kind of neat.

00:22:33 And one of the things I like, I can't remember where to get these, but one of the things I like about XKCD is they often talk about things that you might not know about.

00:22:43 There's another place that I can't remember where it discusses like why it's funny.

00:22:48 So you can read about things you don't know about.

00:22:50 - Yeah, absolutely, absolutely.

00:22:51 - Well, thanks for recording this week.

00:22:53 - You bet, it's always fun and I always learn something.

00:22:56 So thanks a bunch.

00:22:57 Thank you for listening to Python Bytes.

00:22:59 Follow the show on Twitter via @PythonBytes.

00:23:02 That's Python Bytes as in B-Y-T-E-S.

00:23:05 And get the full show notes at PythonBytes.fm.

00:23:08 If you have a news item you want featured, just visit PythonBytes.fm and send it our way.

00:23:12 We're always on the lookout for sharing something cool.

00:23:15 On behalf of myself and Brian Aukin, This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

