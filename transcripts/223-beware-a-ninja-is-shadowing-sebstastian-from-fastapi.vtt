
00:00:00.000 --> 00:00:05.800
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.800 --> 00:00:10.900
This is episode 223, recorded March 3rd, 2021.


00:00:10.900 --> 00:00:11.900
I'm Brian Okken.


00:00:11.900 --> 00:00:12.900
I'm Michael Kennedy.


00:00:12.900 --> 00:00:14.700
And I'm Sebastian Ramirez.


00:00:14.700 --> 00:00:16.700
Cool, we did that without talking over the top.


00:00:16.700 --> 00:00:18.900
Hey, we're getting good at this.


00:00:18.900 --> 00:00:20.400
Welcome, Sebastian, great to see you.


00:00:20.400 --> 00:00:23.500
Thank you very much for inviting me. It's a pleasure to be here with you.


00:00:23.500 --> 00:00:26.500
All right, well, let's start it off.


00:00:26.500 --> 00:00:29.300
Oh, I wanted to mention, we'll talk about them later,


00:00:29.300 --> 00:00:31.740
but thanks to Datadog for sponsoring this episode.


00:00:31.740 --> 00:00:32.580
- Yeah, yeah.


00:00:32.580 --> 00:00:34.420
And Sebastian, people maybe know you,


00:00:34.420 --> 00:00:38.020
but they definitely know your API framework, right?


00:00:38.020 --> 00:00:39.980
- I hope so, at least some of them.


00:00:39.980 --> 00:00:44.380
Yeah, should I say who I am or not yet?


00:00:44.380 --> 00:00:46.100
- Yeah, yeah, sure, give us a quick little introduction


00:00:46.100 --> 00:00:47.820
and then we'll jump over to the items.


00:00:47.820 --> 00:00:50.140
- Awesome, so hello everyone, I'm Sebastian Ramirez.


00:00:50.140 --> 00:00:53.180
I'm the creator of FastAPI,


00:00:53.180 --> 00:00:56.500
which is a web API framework for Python


00:00:56.500 --> 00:00:58.700
based on type annotations.


00:00:58.700 --> 00:01:02.500
That, yeah, well it has been used


00:01:02.500 --> 00:01:04.940
by quite a bunch of interesting organizations


00:01:04.940 --> 00:01:06.020
and products recently.


00:01:06.020 --> 00:01:09.140
I'm a software developer at Explosion in Berlin, Germany,


00:01:09.140 --> 00:01:11.860
but I'm actually from Colombia, that's why the accent.


00:01:11.860 --> 00:01:12.700
And yeah, that's about me.


00:01:12.700 --> 00:01:15.060
- Fantastic, yeah, and you have the best mustache


00:01:15.060 --> 00:01:17.140
of anyone that's ever been on the show.


00:01:17.140 --> 00:01:18.780
- Thank you very much.


00:01:18.780 --> 00:01:19.820
- Definitely.


00:01:19.820 --> 00:01:21.020
Well, let's jump in.


00:01:21.020 --> 00:01:25.780
So I wanted to cover the Python Developer Survey 2020


00:01:25.780 --> 00:01:27.300
results.


00:01:27.300 --> 00:01:28.820
This is pretty exciting.


00:01:28.820 --> 00:01:31.460
We'll get a little bit in a minute,


00:01:31.460 --> 00:01:33.860
talk about one of the things I wanted to talk about,


00:01:33.860 --> 00:01:35.740
of course, but let's look at it a little bit.


00:01:35.740 --> 00:01:40.580
So the Python Developer Survey is put on by,


00:01:40.580 --> 00:01:42.060
it's the PSF, right?


00:01:42.060 --> 00:01:44.020
Isn't it joint PSF and JetBrains?


00:01:44.020 --> 00:01:46.540
- Yeah, I think it's put on by the PSF.


00:01:46.540 --> 00:01:49.460
It's like hosted and analyzed by JetBrains,


00:01:49.460 --> 00:01:51.620
but it's not collected by JetBrains.


00:01:51.620 --> 00:01:52.820
They make a point of not,


00:01:52.820 --> 00:01:55.720
you know, it's put on python.org and maybe even PyPI,


00:01:55.720 --> 00:01:58.980
but not on jetbrains.com.


00:01:58.980 --> 00:02:01.260
So they try to not slant it in that regard.


00:02:01.260 --> 00:02:04.260
- Yeah, so, but yeah, it's hard to,


00:02:04.260 --> 00:02:06.660
yeah, anyway, there's a whole bunch of cool stuff in here.


00:02:06.660 --> 00:02:07.580
One of the things that,


00:02:07.580 --> 00:02:10.260
takeaways that I was confused by a little bit at first


00:02:10.260 --> 00:02:13.580
was the use, what do you use Python for?


00:02:13.580 --> 00:02:17.460
And you've got a lot of reductions in percentages,


00:02:17.460 --> 00:02:18.940
but if you look at what increased,


00:02:18.940 --> 00:02:23.500
So you kind of see that people are using Python for more stuff, and it's spreading out.


00:02:23.500 --> 00:02:28.140
So there's increases in education and in desktop apps.


00:02:28.140 --> 00:02:29.620
Games increased quite a bit.


00:02:29.620 --> 00:02:31.820
Mobile, which was interesting.


00:02:31.820 --> 00:02:32.820
And other.


00:02:32.820 --> 00:02:36.380
So the long tail has gotten fatter, and that's good.


00:02:36.380 --> 00:02:39.100
We're using Python for a lot of stuff.


00:02:39.100 --> 00:02:42.220
Another good sign is Python 3 is increased.


00:02:42.220 --> 00:02:45.100
So last year we had 90% usage of Python 3.


00:02:45.100 --> 00:02:46.100
Now it's up to 94%.


00:02:46.100 --> 00:02:51.540
Not sure why it's not at 100% yet, but I think there's some probably some legacy stuff.


00:02:51.540 --> 00:02:57.860
There's some some projects out there that are in the "please don't touch it, it's working,


00:02:57.860 --> 00:03:03.580
nobody knows how it works, just leave it alone" category, and it's probably that last 5% or


00:03:03.580 --> 00:03:04.580
so.


00:03:04.580 --> 00:03:05.580
Yeah.


00:03:05.580 --> 00:03:08.100
What are people using for environment isolation?


00:03:08.100 --> 00:03:15.820
We've got virtualenv at 54%, but I assume that also includes VENV, or the built-in,


00:03:15.820 --> 00:03:19.040
- Yeah, I saw there was no mention of VNV,


00:03:19.040 --> 00:03:22.080
so just virtual ENV probably is that as well.


00:03:22.080 --> 00:03:23.500
I had that same question, like, wait,


00:03:23.500 --> 00:03:26.780
surely somebody uses pip, you know,


00:03:26.780 --> 00:03:30.360
or Python-env, 'cause I answered that question.


00:03:30.360 --> 00:03:32.160
- So we kind of use those interchangeably,


00:03:32.160 --> 00:03:34.400
so I guess that maybe that's what it is.


00:03:34.400 --> 00:03:38.000
But one of the things that surprised me was that the,


00:03:38.000 --> 00:03:40.200
I've heard, I know a lot of people use Conda


00:03:40.200 --> 00:03:42.600
for data science stuff, that's at 22%,


00:03:42.600 --> 00:03:46.040
but 32% are just using Docker for isolation,


00:03:46.040 --> 00:03:47.280
which that surprised me.


00:03:47.280 --> 00:03:48.880
That's an interesting thing.


00:03:48.880 --> 00:03:50.440
- That's a hardcore isolation.


00:03:50.440 --> 00:03:51.280
- Yeah.


00:03:51.280 --> 00:03:54.960
Although I think more and more people are just using it


00:03:54.960 --> 00:03:56.400
all the time for a lot of stuff.


00:03:56.400 --> 00:03:57.640
So I guess why not?


00:03:57.640 --> 00:03:58.480
- Sebastian, what about you?


00:03:58.480 --> 00:03:59.520
Are you a Poetry?


00:03:59.520 --> 00:04:01.640
Are you a Python-M VNV?


00:04:01.640 --> 00:04:02.920
Are you a Docker?


00:04:02.920 --> 00:04:04.160
- I'm all over the place.


00:04:04.160 --> 00:04:06.160
Actually, I'm quite a fan of Poetry


00:04:06.160 --> 00:04:08.360
and I think it's a great tool


00:04:08.360 --> 00:04:13.360
because it puts a lot of functionality in the same place,


00:04:13.360 --> 00:04:17.040
handling dependencies, handling environments,


00:04:17.040 --> 00:04:18.440
and handling binning versions.


00:04:18.440 --> 00:04:20.560
When you add a new package with Poetry,


00:04:20.560 --> 00:04:22.920
it automatically detects what is the latest version


00:04:22.920 --> 00:04:25.680
and adds the right ranges of versions.


00:04:25.680 --> 00:04:27.480
So I think that's very, very cool.


00:04:27.480 --> 00:04:29.880
And creating a package with Poetry


00:04:29.880 --> 00:04:31.920
is super straightforward to create a package


00:04:31.920 --> 00:04:34.400
that can be later published directly.


00:04:34.400 --> 00:04:38.920
So it's more similar to NPM in the Node.js world.


00:04:38.920 --> 00:04:41.160
- Right, 'cause you can publish from it as well, right?


00:04:41.160 --> 00:04:42.760
You can create the package and then publish.


00:04:42.760 --> 00:04:44.880
- Yeah, and have all the configurations together.


00:04:44.880 --> 00:04:49.360
But at the same time, I'm using vanilla Python VM


00:04:49.360 --> 00:04:51.360
in a bunch of projects at work and things,


00:04:51.360 --> 00:04:53.380
and a bunch of Docker as well.


00:04:53.380 --> 00:04:56.000
So yeah, it's many different things.


00:04:56.000 --> 00:04:58.320
I will think that for local development,


00:04:58.320 --> 00:05:02.040
it's always one type of virtual environment,


00:05:02.040 --> 00:05:05.120
being a VM for Poetry and then for deployment,


00:05:05.120 --> 00:05:07.200
sometimes it's just like pure Docker,


00:05:07.200 --> 00:05:09.640
sometimes Poetry inside of Docker,


00:05:09.640 --> 00:05:11.920
but not even using the virtual environment.


00:05:11.920 --> 00:05:14.680
But yeah, I would think Docker for deployment


00:05:14.680 --> 00:05:17.600
and then locally virtual environments, at least for me.


00:05:17.600 --> 00:05:18.640
- Yeah, and that was the majority.


00:05:18.640 --> 00:05:21.880
I think most people are primarily using VNV for that,


00:05:21.880 --> 00:05:23.240
but I can't remember exactly.


00:05:23.240 --> 00:05:24.480
Hey, Brian, quick comment.


00:05:24.480 --> 00:05:25.720
- Yeah, what's that?


00:05:25.720 --> 00:05:30.160
- Is VNV versus virtual ENV a Python 2 versus 3 thing?


00:05:30.160 --> 00:05:32.120
- Oh, yeah, I guess maybe it is.


00:05:32.120 --> 00:05:34.200
- I think, you know, VNV was added,


00:05:34.200 --> 00:05:35.720
I believe in Python 3,


00:05:35.720 --> 00:05:38.640
but, and I had kind of forgotten about virtualenv,


00:05:38.640 --> 00:05:40.000
but there's some interesting stuff.


00:05:40.000 --> 00:05:42.320
I think we covered it a while ago,


00:05:42.320 --> 00:05:43.680
the release of version 20,


00:05:43.680 --> 00:05:45.640
'cause it actually does a lot of interesting stuff.


00:05:45.640 --> 00:05:47.880
And then Magnuson has a comment on Poetry,


00:05:47.880 --> 00:05:50.920
uses it to create the virtual environment manually


00:05:50.920 --> 00:05:53.960
into, in order to use --prompt,


00:05:53.960 --> 00:05:57.460
which is, so it's not called venv when your prompt changes,


00:05:57.460 --> 00:05:59.520
but project name in parentheses


00:05:59.520 --> 00:06:03.240
when your project changes, which is the question Gandalf had.


00:06:03.240 --> 00:06:07.600
And then Dean is a fan of the virtual ENV wrapper as well.


00:06:07.600 --> 00:06:08.440
So awesome.


00:06:08.440 --> 00:06:10.840
Yeah, I haven't either.


00:06:10.840 --> 00:06:12.120
I feel like this is one of the areas


00:06:12.120 --> 00:06:14.520
where there's just so many different ways


00:06:14.520 --> 00:06:16.080
people are doing this stuff.


00:06:16.080 --> 00:06:19.160
But yeah, with our special guest here, Brian,


00:06:19.160 --> 00:06:20.160
but how about you touch on this one?


00:06:20.160 --> 00:06:21.600
This is big news here.


00:06:21.600 --> 00:06:23.760
- Yeah, so this is big news.


00:06:23.760 --> 00:06:26.760
So frameworks and libraries under web frameworks,


00:06:26.760 --> 00:06:30.120
We've got Flask at 46%, Django at 43,


00:06:30.120 --> 00:06:33.660
and then, dun dun dun, FastAPI at 12%.


00:06:33.660 --> 00:06:35.520
It's the first time it was on the survey,


00:06:35.520 --> 00:06:37.880
and it's already up at number three, so.


00:06:37.880 --> 00:06:39.400
- Whoa. - Yeah.


00:06:39.400 --> 00:06:40.520
Way to go.


00:06:40.520 --> 00:06:42.400
The growth is super, super interesting there,


00:06:42.400 --> 00:06:44.720
and yeah, congratulations, Sebastian.


00:06:44.720 --> 00:06:46.920
And I actually think that this is gonna grow


00:06:46.920 --> 00:06:47.760
quite a bit more.


00:06:47.760 --> 00:06:49.760
If you look at the first derivative,


00:06:49.760 --> 00:06:52.960
it's higher for the numbers for FastAPI,


00:06:52.960 --> 00:06:56.080
like the rate of growth, or just the growth.


00:06:56.080 --> 00:07:00.080
Also, I feel like a lot of people are not necessarily


00:07:00.080 --> 00:07:01.840
leveraging, I mean, I'd like to hear your thoughts


00:07:01.840 --> 00:07:04.480
on this, Sebastian, leveraging FastAPI's ability


00:07:04.480 --> 00:07:07.400
to deliver HTML as well.


00:07:07.400 --> 00:07:11.520
- Yeah, absolutely, because if you're rendering HTML


00:07:11.520 --> 00:07:15.880
in the back end, the benefits of FastAPI are not as obvious.


00:07:15.880 --> 00:07:20.880
So I guess people probably will use it more for APIs,


00:07:20.880 --> 00:07:24.840
but then there's actually a bunch of people using it


00:07:24.840 --> 00:07:29.080
for very different stuff than what I initially thought of.


00:07:29.080 --> 00:07:29.920
- Yeah, yeah.


00:07:29.920 --> 00:07:32.080
Yeah, I think you can basically get down


00:07:32.080 --> 00:07:33.840
to the Starlette type features and stuff,


00:07:33.840 --> 00:07:37.720
and then you can build an equivalent of Flask or Django.


00:07:37.720 --> 00:07:39.240
And what I think's interesting about that


00:07:39.240 --> 00:07:40.320
is a lot of people are like,


00:07:40.320 --> 00:07:42.440
well, I could do this really cool API with FastAPI,


00:07:42.440 --> 00:07:44.680
and then do we use Flask or Django for the web part?


00:07:44.680 --> 00:07:47.000
It's like, well, if you've already got the FastAPI part


00:07:47.000 --> 00:07:49.000
and you've got like 10 pages you wanna serve,


00:07:49.000 --> 00:07:52.440
just don't juggle two apps, just put them together.


00:07:52.440 --> 00:07:53.400
It's actually not that hard.


00:07:53.400 --> 00:07:55.180
I think there's some really interesting stuff.


00:07:55.180 --> 00:07:57.740
And I think as people learn those and leverage those,


00:07:57.740 --> 00:07:59.260
it's only gonna grow because they're like,


00:07:59.260 --> 00:08:02.380
oh, I actually don't have to have Flask plus FastAPI,


00:08:02.380 --> 00:08:03.740
I could just have FastAPI.


00:08:03.740 --> 00:08:04.980
- Yeah, and I think-- - Not that Flask is bad,


00:08:04.980 --> 00:08:05.820
but yeah.


00:08:05.820 --> 00:08:08.220
- Yeah, of course, and like, FastAPI is actually,


00:08:08.220 --> 00:08:12.460
FastAPI owes and was inspired a lot


00:08:12.460 --> 00:08:14.780
by all of these frameworks that paved the way.


00:08:14.780 --> 00:08:16.780
Like, all of these designs, all of these ideas


00:08:16.780 --> 00:08:18.220
came before FastAPI.


00:08:18.220 --> 00:08:20.740
FastAPI just putting them together


00:08:20.740 --> 00:08:24.340
with the new type annotations from modern Python to Dialect.


00:08:24.340 --> 00:08:28.540
It's all the work that has been done by a lot of people.


00:08:28.540 --> 00:08:30.300
- Yeah, yeah, standing on the shoulders


00:08:30.300 --> 00:08:31.140
of giants type thing.


00:08:31.140 --> 00:08:32.300
- Exactly, exactly.


00:08:32.300 --> 00:08:33.540
- Yeah, yeah, awesome.


00:08:33.540 --> 00:08:34.380
- But yeah, people are using it more.


00:08:34.380 --> 00:08:35.860
- I've got some stuff to add to that as well


00:08:35.860 --> 00:08:37.300
for my next item, by the way.


00:08:37.300 --> 00:08:38.140
- Oh, cool. - Nice.


00:08:38.140 --> 00:08:38.980
- Yeah.


00:08:38.980 --> 00:08:41.580
- No, before we move on, one of the things in the survey


00:08:41.580 --> 00:08:45.340
that was interesting to me was the use


00:08:45.340 --> 00:08:46.660
of continuous integration.


00:08:46.660 --> 00:08:50.500
So I use CI or continuous integration all the time,


00:08:50.500 --> 00:08:52.940
but one of the, see if I can find it.


00:08:52.940 --> 00:08:57.940
See, the CI systems in use, GitLab was top,


00:08:57.940 --> 00:08:59.900
which was interesting to me.


00:08:59.900 --> 00:09:02.580
I mean, I use GitLab at work, but I use GitHub,


00:09:02.580 --> 00:09:04.700
or I use, I guess, GitLab CI,


00:09:04.700 --> 00:09:06.880
but I'm using GitHub Actions a lot,


00:09:06.880 --> 00:09:08.660
and I don't see GitHub Actions even here.


00:09:08.660 --> 00:09:11.740
So I wonder if it just wasn't listed, or I'm not sure.


00:09:11.740 --> 00:09:12.740
- That's quite interesting.


00:09:12.740 --> 00:09:15.660
Yeah, I have noticed that GitHub Actions is not there.


00:09:15.660 --> 00:09:17.860
- Yeah, I expected to see it as well, yeah.


00:09:17.860 --> 00:09:19.560
But what I did not see, I just want to throw this out,


00:09:19.560 --> 00:09:21.140
like well done on building the survey.


00:09:21.140 --> 00:09:23.900
'Cause what I didn't see is what platform are you on?


00:09:23.900 --> 00:09:28.160
Do you use Python or do you use SQL or do you use Vue.js?


00:09:28.160 --> 00:09:31.080
Like they did a good job of comparing


00:09:31.080 --> 00:09:33.060
apples to apples in this one.


00:09:33.060 --> 00:09:34.180
And that was nice.


00:09:34.180 --> 00:09:35.020
- Yeah.


00:09:35.020 --> 00:09:37.940
- Yeah, I guess, but like, I guess what you brought up


00:09:37.940 --> 00:09:40.180
before on the web frameworks though,


00:09:40.180 --> 00:09:44.140
the like why, I mean, it depends on what you're using


00:09:44.140 --> 00:09:45.180
the web for.


00:09:45.180 --> 00:09:50.180
So like the early use of FastAPI was just APIs.


00:09:50.180 --> 00:09:52.820
So I don't know, that's not Apple's.


00:09:52.820 --> 00:09:55.140
- Right, you may be doing Flask plus FastAPI.


00:09:55.140 --> 00:09:56.660
- Yeah. - Yeah.


00:09:56.660 --> 00:09:58.580
- And the survey allows that.


00:09:58.580 --> 00:10:00.460
You can, if you add these numbers up,


00:10:00.460 --> 00:10:02.500
they are over a hundred.


00:10:02.500 --> 00:10:04.140
I wanted to bring up one more thing.


00:10:04.140 --> 00:10:07.300
I guess unit testing is at 49% for pytest.


00:10:07.300 --> 00:10:09.100
So pytest is in the lead.


00:10:09.100 --> 00:10:11.980
- Yeah, I also saw there's a really interesting number two


00:10:11.980 --> 00:10:13.620
in that list there.


00:10:13.620 --> 00:10:16.580
- 28% of using unit test, yeah.


00:10:16.580 --> 00:10:17.760
- No, that's not the one I was thinking of.


00:10:17.760 --> 00:10:18.840
That's number three.


00:10:18.840 --> 00:10:19.880
- Oh, was it number three?


00:10:19.880 --> 00:10:21.240
- Number two is none. - Oh, number two.


00:10:21.240 --> 00:10:23.620
- Number two is, so you know in Python,


00:10:23.620 --> 00:10:26.360
like a lot of languages have null or nil,


00:10:26.360 --> 00:10:28.560
but apparently people just like do stuff


00:10:28.560 --> 00:10:31.600
with the none type to test here a lot, so.


00:10:31.600 --> 00:10:34.440
(laughing)


00:10:34.440 --> 00:10:35.560
- None testing.


00:10:35.560 --> 00:10:37.520
- Yeah. - Oh yeah, that is number two.


00:10:37.520 --> 00:10:38.520
- Yeah, it's crushing it.


00:10:38.520 --> 00:10:39.760
Yeah, none is pretty, I mean,


00:10:39.760 --> 00:10:41.000
you do get a lot of exceptions


00:10:41.000 --> 00:10:42.800
and it's easy to like fail first


00:10:42.800 --> 00:10:44.040
And then, yeah, anyway.


00:10:44.040 --> 00:10:44.880
- So I gotta talk to--


00:10:44.880 --> 00:10:46.640
- None type has no attributes, such and such.


00:10:46.640 --> 00:10:50.560
- I gotta talk to the PSF and JetBrains about this


00:10:50.560 --> 00:10:52.520
because I'm not sure why they call it


00:10:52.520 --> 00:10:53.800
unit testing frameworks.


00:10:53.800 --> 00:10:56.000
We gotta drop the unit off there.


00:10:56.000 --> 00:10:57.440
Just call them testing frameworks.


00:10:57.440 --> 00:10:58.280
- Yeah.


00:10:58.280 --> 00:10:59.100
Brian, I hope you don't mind.


00:10:59.100 --> 00:11:00.200
I'm considering writing a book


00:11:00.200 --> 00:11:02.200
on this new none framework, by the way.


00:11:02.200 --> 00:11:04.760
- I think you should.


00:11:04.760 --> 00:11:06.320
That would be funny.


00:11:06.320 --> 00:11:07.160
- Actually, I--


00:11:07.160 --> 00:11:08.240
(laughing)


00:11:08.240 --> 00:11:09.880
- As soon as it's done.


00:11:09.880 --> 00:11:11.040
- Yeah, it's really short.


00:11:11.040 --> 00:11:12.320
It's really, really short.


00:11:12.320 --> 00:11:13.540
(laughing)


00:11:13.540 --> 00:11:16.380
All right, probably one page book, okay.


00:11:16.380 --> 00:11:18.380
All right, next item, I gotta keep moving along


00:11:18.380 --> 00:11:19.900
or we're gonna have a two hour show here,


00:11:19.900 --> 00:11:22.540
is I like ninjas, do you like ninjas, guys?


00:11:22.540 --> 00:11:23.380
Ninjas are cool.


00:11:23.380 --> 00:11:25.880
- Oh yeah, well I mean I don't know any, but.


00:11:25.880 --> 00:11:27.740
- Well, I mean, if you are a ninja,


00:11:27.740 --> 00:11:28.720
you can't really speak about it


00:11:28.720 --> 00:11:30.820
because it's something about the secrecy.


00:11:30.820 --> 00:11:33.180
Anyway, Sebastian was just talking about


00:11:33.180 --> 00:11:35.960
how FastAPI was inspired by many of the frameworks


00:11:35.960 --> 00:11:38.300
that were on there, and there's a cool framework


00:11:38.300 --> 00:11:41.780
called Django Ninja, Fast Django REST Framework,


00:11:41.780 --> 00:11:44.140
And I'm not a super expert in Django,


00:11:44.140 --> 00:11:46.500
but I think Django REST framework has been primarily


00:11:46.500 --> 00:11:48.900
the way to do APIs in Django these days


00:11:48.900 --> 00:11:49.740
and to layer that on.


00:11:49.740 --> 00:11:52.580
And if you look at the very bottom of this,


00:11:52.580 --> 00:11:53.540
there's a little bit here that says,


00:11:53.540 --> 00:11:56.380
"This project was heavily inspired by FastAPI


00:11:56.380 --> 00:11:58.380
"developed by some guy named Sebastian."


00:11:58.380 --> 00:11:59.340
So that's pretty cool.


00:11:59.340 --> 00:12:00.840
Have you checked this out, Sebastian?


00:12:00.840 --> 00:12:03.660
- I have seen it, and actually the author


00:12:03.660 --> 00:12:05.900
was quite active in the FastAPI community.


00:12:05.900 --> 00:12:09.220
But yeah, I haven't been able to play around


00:12:09.220 --> 00:12:10.980
with the framework itself.


00:12:10.980 --> 00:12:14.480
Yeah, like I think it could be a very nice idea


00:12:14.480 --> 00:12:16.120
and a very nice middle ground for people


00:12:16.120 --> 00:12:18.280
that is already having a lot of work,


00:12:18.280 --> 00:12:21.560
already a lot of code with Django REST framework.


00:12:21.560 --> 00:12:23.320
- Yeah, exactly, exactly.


00:12:23.320 --> 00:12:27.160
So this was sent over by Marcus Sharp and Adam Perkin


00:12:27.160 --> 00:12:29.460
who goes by Codependent Coder independently.


00:12:29.460 --> 00:12:31.340
So thank you both for sending this in.


00:12:31.340 --> 00:12:34.880
And the idea is that it's a framework for building APIs


00:12:34.880 --> 00:12:38.720
primarily based on type hints, but also with async support.


00:12:38.720 --> 00:12:40.440
And it makes use of Pydantic.


00:12:40.440 --> 00:12:42.280
And those are many of the important ingredients


00:12:42.280 --> 00:12:44.240
that make FastAPI special as well.


00:12:44.240 --> 00:12:46.360
So some of the key features are,


00:12:46.360 --> 00:12:48.160
it's pretty easy to work with.


00:12:48.160 --> 00:12:51.240
It has a similar feel as FastAPI.


00:12:51.240 --> 00:12:53.880
It's high performance, partly because of Pydantic,


00:12:53.880 --> 00:12:56.340
partly because it has native async support,


00:12:56.340 --> 00:12:58.680
and partly just because they did a good job there.


00:12:58.680 --> 00:13:00.040
Also fast to code.


00:13:00.040 --> 00:13:03.560
The type hints let you know what you're working with


00:13:03.560 --> 00:13:06.000
and automatically get conversions along with Pydantic,


00:13:06.000 --> 00:13:08.880
of course, does massive levels of like validation


00:13:08.880 --> 00:13:09.700
and conversion.


00:13:09.700 --> 00:13:13.260
And it also has automatic docs with open API,


00:13:13.260 --> 00:13:14.740
formerly known as Swagger,


00:13:14.740 --> 00:13:16.580
similar to FastAPI in that regard.


00:13:16.580 --> 00:13:19.060
And the reason this is interesting, I think,


00:13:19.060 --> 00:13:20.860
is because it's Django friendly.


00:13:20.860 --> 00:13:22.660
So it has integration with Django Core,


00:13:22.660 --> 00:13:24.180
it has integration with Django ORM.


00:13:24.180 --> 00:13:28.160
So if you're already got all of your stuff done in Django,


00:13:28.160 --> 00:13:29.780
and you were thinking, well, I really wanna have


00:13:29.780 --> 00:13:32.980
this style of API that FastAPI brings,


00:13:32.980 --> 00:13:34.260
but I don't wanna leave Django,


00:13:34.260 --> 00:13:36.700
I don't wanna have to rewrite everything in SQLAlchemy


00:13:36.700 --> 00:13:39.220
and learn the async API over there,


00:13:39.220 --> 00:13:40.060
and that kind of stuff.


00:13:40.060 --> 00:13:42.900
Well, here's a way to kind of like layer on APIs


00:13:42.900 --> 00:13:46.220
to your Django app, but in the Zen of what Sebastian.


00:13:46.220 --> 00:13:47.340
So yeah, I think it's pretty cool.


00:13:47.340 --> 00:13:50.540
And if you check out the performance here,


00:13:50.540 --> 00:13:54.060
you can see it's slightly faster


00:13:54.060 --> 00:13:55.740
in the single threaded version,


00:13:55.740 --> 00:13:57.500
but once you bust out async and await


00:13:57.500 --> 00:13:58.980
and it starts just crushing it.


00:13:58.980 --> 00:14:01.340
So here you can see like with 50 operations,


00:14:01.340 --> 00:14:02.460
50 workers and so on.


00:14:02.460 --> 00:14:04.380
And what's really interesting is you see like this graph


00:14:04.380 --> 00:14:06.900
at the bottom of, as you add more workers,


00:14:06.900 --> 00:14:10.740
things like Django rest framework or flask marshmallow start to catch up.


00:14:10.740 --> 00:14:15.140
And my theory, looking at this graph, my intuition is what this means is the


00:14:15.140 --> 00:14:19.220
thing that it's talking to and the backend, like the database that it was


00:14:19.220 --> 00:14:23.940
talking to or something like that is starting to like not be able to take it


00:14:23.940 --> 00:14:28.540
anymore or the, the overall CPU level is just starting to like to hit a limit


00:14:28.540 --> 00:14:30.340
where it can't scale.


00:14:30.340 --> 00:14:33.260
Cause it's really interesting that it's kind of just like linear number of


00:14:33.780 --> 00:14:36.100
things for flat for the Django Ninja.


00:14:36.100 --> 00:14:38.060
And as the scale increases,


00:14:38.060 --> 00:14:40.380
it kind of gets its normalized on that.


00:14:40.380 --> 00:14:41.660
So it would be flat, but anyway,


00:14:41.660 --> 00:14:43.900
it's a pretty interesting graph, I think there.


00:14:43.900 --> 00:14:44.740
- Yeah.


00:14:44.740 --> 00:14:45.560
- Yeah, and then last thing,


00:14:45.560 --> 00:14:48.460
just a super quick example of here is,


00:14:48.460 --> 00:14:50.820
all you gotta do is create a Ninja, API Ninja,


00:14:50.820 --> 00:14:53.420
and then you do an API.get, give it a URL.


00:14:53.420 --> 00:14:55.080
You give it some parameters.


00:14:55.080 --> 00:14:57.540
Those parameters have types like a colon int,


00:14:57.540 --> 00:14:59.980
b colon int, and then you return a dictionary


00:14:59.980 --> 00:15:00.920
and off you go.


00:15:00.920 --> 00:15:02.900
And then you've got an API


00:15:02.900 --> 00:15:06.360
And presumably you could make this async def add,


00:15:06.360 --> 00:15:08.300
although there's really no reason to do it.


00:15:08.300 --> 00:15:09.140
You could, right?


00:15:09.140 --> 00:15:10.320
'Cause it supports async.


00:15:10.320 --> 00:15:12.060
Anyway, I think this is a pretty cool thing


00:15:12.060 --> 00:15:13.660
for people already doing Django.


00:15:13.660 --> 00:15:15.840
And like we have so much logic in the ORM


00:15:15.840 --> 00:15:17.740
and in the other parts of our app,


00:15:17.740 --> 00:15:20.620
we just wanna add in this style of API.


00:15:20.620 --> 00:15:21.460
I think this is neat.


00:15:21.460 --> 00:15:22.380
- Absolutely.


00:15:22.380 --> 00:15:23.300
- Yeah, cool, cool.


00:15:23.300 --> 00:15:24.700
All right, well, let's see.


00:15:24.700 --> 00:15:27.300
What's your first item, Sebastian?


00:15:27.300 --> 00:15:31.660
- So I have Pydantic 1.8 was released.


00:15:31.660 --> 00:15:34.340
It was released one or two weeks ago.


00:15:34.340 --> 00:15:35.900
It's the latest version.


00:15:35.900 --> 00:15:37.620
And it has a bunch of interesting things.


00:15:37.620 --> 00:15:42.420
It has a hypothesis plugin for doing property-based testing,


00:15:42.420 --> 00:15:48.100
which I haven't been able to try out yet a lot.


00:15:48.100 --> 00:15:50.020
But I have heard a lot of good things


00:15:50.020 --> 00:15:53.580
about this idea of property-based testing.


00:15:53.580 --> 00:15:56.460
And in fact, there's a package for doing


00:15:56.460 --> 00:15:59.740
this type of testing, integrating hypothesis


00:15:59.740 --> 00:16:03.040
with OpenAPI, so you can test like it was made


00:16:03.040 --> 00:16:05.440
to test FastAPI actually with these ideas.


00:16:05.440 --> 00:16:09.940
But then now there's an integrated plugin in Pydantic.


00:16:09.940 --> 00:16:12.340
So I think that can be quite interesting.


00:16:12.340 --> 00:16:15.780
And also there's now support in Pydantic directly


00:16:15.780 --> 00:16:18.740
for name tuples and for type dicts.


00:16:18.740 --> 00:16:23.740
So type dicts are these new types or type declarations


00:16:23.740 --> 00:16:27.740
to say what is the shape of a dictionary inside of Python.


00:16:27.740 --> 00:16:29.420
If you have played with TypeScript,


00:16:29.420 --> 00:16:31.940
will be comparable to an interface,


00:16:31.940 --> 00:16:34.460
or I guess, you know, languages too.


00:16:34.460 --> 00:16:37.980
But then these type dicts, the thing is that they are


00:16:37.980 --> 00:16:42.300
the official or standard way inside of Python,


00:16:42.300 --> 00:16:46.740
that are part of Python to define the types of dictionaries.


00:16:46.740 --> 00:16:48.900
Because Pydantic is actually a class.


00:16:48.900 --> 00:16:52.020
So this could be, I think these type dicts


00:16:52.020 --> 00:16:53.460
will be interesting, for example,


00:16:53.460 --> 00:16:56.220
for declaring the parameters of a function


00:16:56.220 --> 00:16:58.020
that are actually a dictionary,


00:16:58.020 --> 00:17:01.140
and declaring where the types that that dictionary should


00:17:01.140 --> 00:17:02.780
take, things like that.


00:17:02.780 --> 00:17:06.740
And I will expect editors to be able to have support for that.


00:17:06.740 --> 00:17:10.780
So imagine that you are passing a parameter to a dictionary--


00:17:10.780 --> 00:17:12.140
sorry, a parameter to a function.


00:17:12.140 --> 00:17:13.740
And the parameter is a dictionary.


00:17:13.740 --> 00:17:17.420
And then the editor can give you completion for the dictionary


00:17:17.420 --> 00:17:19.900
inside of the parameter that you're passing,


00:17:19.900 --> 00:17:22.060
or the argument that you're passing to the function.


00:17:22.060 --> 00:17:24.540
Things like that, I think, type dicts will help a lot.


00:17:24.540 --> 00:17:27.540
And then now you can use them inside of Bidantic models.


00:17:27.540 --> 00:17:28.660
and I think that's pretty cool.


00:17:28.660 --> 00:17:32.060
And this other one is the Pydantic has support


00:17:32.060 --> 00:17:36.140
for annotated types, which is another of these types.


00:17:36.140 --> 00:17:39.140
So annotated is one of these things


00:17:39.140 --> 00:17:41.220
that you import from typing,


00:17:41.220 --> 00:17:43.700
the same way that you will import a optional


00:17:43.700 --> 00:17:45.840
or that you will import a union


00:17:45.840 --> 00:17:49.420
or that you will import the type for lists.


00:17:49.420 --> 00:17:50.260
- This is cool.


00:17:50.260 --> 00:17:52.340
I was wondering how you would do stuff like this.


00:17:52.340 --> 00:17:56.220
If you could say add a default value to a Pydantic model


00:17:56.220 --> 00:18:00.820
or to add simple constraints along with default values.


00:18:00.820 --> 00:18:03.180
- With Pydantic and with FastAPI,


00:18:03.180 --> 00:18:04.820
you have a way to declare,


00:18:04.820 --> 00:18:06.140
before annotated existed,


00:18:06.140 --> 00:18:08.500
you had a way to declare those things


00:18:08.500 --> 00:18:11.300
by setting the default value


00:18:11.300 --> 00:18:14.780
as a call to Pydantic's field,


00:18:14.780 --> 00:18:16.100
which is a special function.


00:18:16.100 --> 00:18:18.260
Or in FastAPI, you could call, for example,


00:18:18.260 --> 00:18:22.220
the function query, which is a special function


00:18:22.220 --> 00:18:24.780
that returns a special object that has all the information,


00:18:24.780 --> 00:18:26.860
including metadata for validation,


00:18:26.860 --> 00:18:29.140
and maybe like the title or the description


00:18:29.140 --> 00:18:31.220
of their specific parameter, things like that.


00:18:31.220 --> 00:18:34.140
But then the issue with that approach


00:18:34.140 --> 00:18:39.140
is that we are taking the place in the declaration


00:18:39.140 --> 00:18:40.900
of the parameter inside of the function.


00:18:40.900 --> 00:18:42.620
We are taking the place that will be used


00:18:42.620 --> 00:18:44.060
by the default value.


00:18:44.060 --> 00:18:48.260
And we are like playing around with that default value


00:18:48.260 --> 00:18:50.740
inside of the function signature,


00:18:50.740 --> 00:18:53.180
inside of the function declaration of parameters.


00:18:53.180 --> 00:18:56.980
So it's actually not like the most correct way to do it.


00:18:56.980 --> 00:18:59.880
It's kind of intuitive and it works quite well


00:18:59.880 --> 00:19:01.740
with Pydantic and FastAPI,


00:19:01.740 --> 00:19:05.900
but in terms of types, it's not very explicit.


00:19:05.900 --> 00:19:09.040
And now with these new annotated type,


00:19:09.040 --> 00:19:12.320
you can put the actual type that the parameter has,


00:19:12.320 --> 00:19:14.600
like let's say it's a string,


00:19:14.600 --> 00:19:18.100
and then you can also put the extra metadata


00:19:18.100 --> 00:19:20.700
that will go for Pydantic or for FastAPI


00:19:20.700 --> 00:19:25.700
inside of the same annotated generic type is the name.


00:19:25.700 --> 00:19:28.980
So the same way that you will put, let's say,


00:19:28.980 --> 00:19:31.180
annotate a type that is additional,


00:19:31.180 --> 00:19:33.300
that has strings as keys,


00:19:33.300 --> 00:19:36.000
and then as values it has integers,


00:19:36.000 --> 00:19:38.660
then instead of that, you will put this annotated thing


00:19:38.660 --> 00:19:41.880
and declare the type of the parameter,


00:19:41.880 --> 00:19:43.580
and this extra metadata that will include


00:19:43.580 --> 00:19:45.440
like validation and a bunch of things,


00:19:45.440 --> 00:19:47.420
and then the default value can be kept


00:19:47.420 --> 00:19:50.940
for the actual default value of the parameter.


00:19:50.940 --> 00:19:53.300
So that could be very useful,


00:19:53.300 --> 00:19:55.760
especially if you are calling the same functions,


00:19:55.760 --> 00:19:58.320
for example, for FastAPI dependencies,


00:19:58.320 --> 00:20:00.460
and you're calling the same functions in other places.


00:20:00.460 --> 00:20:02.980
And I think that can be very powerful,


00:20:02.980 --> 00:20:07.260
and very useful for reusing code in even more places.


00:20:07.260 --> 00:20:08.420
- Yeah, when I first looked at this,


00:20:08.420 --> 00:20:10.460
I thought it was this annotated thing,


00:20:10.460 --> 00:20:11.900
was the value you were setting,


00:20:11.900 --> 00:20:14.860
like SQLAlchemy would be, or Django ORM or something,


00:20:14.860 --> 00:20:17.960
where you say like name equals an annotated thing,


00:20:17.960 --> 00:20:20.480
but that's actually the type, it's name colon,


00:20:20.480 --> 00:20:22.360
this really interesting annotated thing


00:20:22.360 --> 00:20:24.880
with lots of constraints equals some potential


00:20:24.880 --> 00:20:26.680
default value or equals nothing, right?


00:20:26.680 --> 00:20:28.160
You just don't even have to set a value.


00:20:28.160 --> 00:20:30.480
- Yeah, yeah, I don't know.


00:20:30.480 --> 00:20:33.760
I feel the syntax might look a little bit weird.


00:20:33.760 --> 00:20:38.080
It's not necessarily like the most intuitive,


00:20:38.080 --> 00:20:40.880
but it's like the most correct at the same time.


00:20:40.880 --> 00:20:44.960
So in cases where like this strict type correctness


00:20:44.960 --> 00:20:48.440
is important, I think this could be quite useful.


00:20:48.440 --> 00:20:50.000
- Yeah, so another thing that I,


00:20:50.000 --> 00:20:51.600
this is not in the new release,


00:20:51.600 --> 00:20:53.920
but I'd like to hear your thoughts on it.


00:20:53.920 --> 00:20:55.720
What is it called, validation?


00:20:55.720 --> 00:20:57.400
Is that what it's?


00:20:57.400 --> 00:21:00.040
There's a type with like runtime validation.


00:21:00.040 --> 00:21:04.280
I think this thing here is you say at validate arguments.


00:21:04.280 --> 00:21:06.560
Have you seen this for actually going,


00:21:06.560 --> 00:21:09.640
instead of just suggesting that it's a string


00:21:09.640 --> 00:21:11.540
and an integer, it'll actually make sure


00:21:11.540 --> 00:21:13.620
that it's a string and an integer at runtime.


00:21:13.620 --> 00:21:14.460
Have you played with this?


00:21:14.460 --> 00:21:15.280
What are your thoughts?


00:21:15.280 --> 00:21:16.120
- I haven't played with it.


00:21:16.120 --> 00:21:18.860
Like I remember when Samuel Komold was talking about it


00:21:18.860 --> 00:21:22.900
and it was super exciting because it's also a very,


00:21:22.900 --> 00:21:26.780
it's the same idea of what FastAPI is doing


00:21:26.780 --> 00:21:29.980
or similarly what Typer, which is like the equivalent


00:21:29.980 --> 00:21:32.620
of FastAPI for building command line applications.


00:21:32.620 --> 00:21:34.020
The equivalent of what they do,


00:21:34.020 --> 00:21:35.980
which is take a signature in the,


00:21:35.980 --> 00:21:38.940
take the parameters from the function


00:21:38.940 --> 00:21:42.740
and use those parameters to do validation.


00:21:42.740 --> 00:21:45.500
I think that's very interesting and very powerful.


00:21:45.500 --> 00:21:48.460
I just haven't used it yet because I use Pydantic


00:21:48.460 --> 00:21:50.620
most of the time with FastAPI,


00:21:50.620 --> 00:21:54.660
and in FastAPI there's no need to add the specific decorator


00:21:54.660 --> 00:21:56.740
because FastAPI is already doing that.


00:21:56.740 --> 00:22:00.780
But for other use cases where it's not really using FastAPI


00:22:00.780 --> 00:22:02.460
but just Pydantic standalone


00:22:02.460 --> 00:22:04.460
because Pydantic is awesome by itself,


00:22:04.460 --> 00:22:07.020
I think this will be very, very powerful.


00:22:07.020 --> 00:22:08.180
- Yeah, yeah, totally agree.


00:22:08.180 --> 00:22:09.020
Okay, cool.


00:22:09.020 --> 00:22:10.740
Anything else you wanna add on this before we move on?


00:22:10.740 --> 00:22:11.820
I kick it back to Brian.


00:22:11.820 --> 00:22:16.020
- No, I think that was the highlight I had.


00:22:16.020 --> 00:22:16.860
Just I think it's pretty cool.


00:22:16.860 --> 00:22:18.760
- Well, we brushed by this quickly,


00:22:18.760 --> 00:22:20.720
but I was curious, not about this,


00:22:20.720 --> 00:22:24.140
but you mentioned a FastAPI does validation.


00:22:24.140 --> 00:22:26.520
Just we went by that quickly, but is that true?


00:22:26.520 --> 00:22:30.060
Can you, for FastAPI, can I say that this data


00:22:30.060 --> 00:22:32.640
or this data point that's coming in


00:22:32.640 --> 00:22:34.840
has to be in a certain range of integers


00:22:34.840 --> 00:22:35.740
or something like that?


00:22:35.740 --> 00:22:36.580
- Absolutely.


00:22:36.580 --> 00:22:40.260
All the validations that you can do with Pydantic,


00:22:40.260 --> 00:22:41.580
you can do them with FastAPI.


00:22:41.580 --> 00:22:44.500
And it's actually quite extensive,


00:22:44.500 --> 00:22:46.140
the things that you can do.


00:22:46.140 --> 00:22:48.100
You can say that you want to validate


00:22:48.100 --> 00:22:50.340
against a regular expression, or that you


00:22:50.340 --> 00:22:53.260
want to have a minimum number and a maximum number,


00:22:53.260 --> 00:22:54.620
or that you want to have--


00:22:54.620 --> 00:22:55.200
I don't know.


00:22:55.200 --> 00:22:58.580
You could even write custom types of validations


00:22:58.580 --> 00:23:00.100
for the things that you receive.


00:23:00.100 --> 00:23:03.540
And because Pydantic is based on the same standard Python type


00:23:03.540 --> 00:23:06.260
annotations, you could do these validations even


00:23:06.260 --> 00:23:08.460
for deeply nested data structures.


00:23:08.460 --> 00:23:12.140
You can say, my request of


00:23:12.140 --> 00:23:16.380
this endpoint is going to receive a list that contains dictionaries,


00:23:16.380 --> 00:23:20.140
that inside contain this key tag that contains the strings,


00:23:20.140 --> 00:23:23.020
and this other one that has sub dictionaries and sub lists,


00:23:23.020 --> 00:23:28.020
and a very complex deeply nested tree of data,


00:23:28.020 --> 00:23:31.180
and you can declare all that and have all that validated.


00:23:31.180 --> 00:23:32.060
>> That's awesome.


00:23:32.060 --> 00:23:33.460
>> When your code executes,


00:23:33.460 --> 00:23:36.140
when the code that you wrote executes,


00:23:36.140 --> 00:23:39.800
it's fastAPI already took care of making sure


00:23:39.800 --> 00:23:42.720
that the data that you deter is the data that you receive.


00:23:42.720 --> 00:23:46.020
Your code will never execute with invalid data.


00:23:46.020 --> 00:23:47.800
That's it, that's it, yeah, yeah.


00:23:47.800 --> 00:23:49.040
- It's so nice in that regard.


00:23:49.040 --> 00:23:50.760
You just like, by the time it gets here,


00:23:50.760 --> 00:23:53.440
I know it's all been converted and validated


00:23:53.440 --> 00:23:55.960
at least as much as the model is gonna validate it for me.


00:23:55.960 --> 00:23:57.240
You don't have to worry about that.


00:23:57.240 --> 00:23:59.800
So it's great to push that to somewhere else.


00:23:59.800 --> 00:24:02.120
- Yeah, and on the other side,


00:24:02.120 --> 00:24:06.080
because which is also a great feature of Pydantic,


00:24:06.080 --> 00:24:09.040
validation shows the errors exactly


00:24:09.040 --> 00:24:10.840
in the place where they are.


00:24:10.840 --> 00:24:12.440
And when you get that is like,


00:24:12.440 --> 00:24:16.000
yes, I can see exactly where is my data wrong.


00:24:16.000 --> 00:24:19.440
So you can see which index in the list was incorrect.


00:24:19.440 --> 00:24:22.120
And inside of that index, which key was incorrect.


00:24:22.120 --> 00:24:25.320
And inside of that, what was the exact error and see like,


00:24:25.320 --> 00:24:28.180
oh, I had to put a string in another object here.


00:24:28.180 --> 00:24:29.280
Not a JSON object.


00:24:29.280 --> 00:24:32.320
- And what you mean is like, if I have a PyDendic model


00:24:32.320 --> 00:24:34.520
and it says it has a list of customers


00:24:34.520 --> 00:24:36.060
and there's three customers in the list,


00:24:36.060 --> 00:24:38.060
but the third customer that was submitted


00:24:38.060 --> 00:24:40.380
as part of the JSON body has an error.


00:24:40.380 --> 00:24:43.900
It'll say in the customers in index three


00:24:43.900 --> 00:24:45.660
on this field is the problem.


00:24:45.660 --> 00:24:47.300
Not just the name is required.


00:24:47.300 --> 00:24:49.540
Like, oh great, what does this mean?


00:24:49.540 --> 00:24:50.380
Right?


00:24:50.380 --> 00:24:54.940
- Exactly, I don't know how you do to make these examples


00:24:54.940 --> 00:24:57.580
out of the book and understand them all at the same time.


00:24:57.580 --> 00:24:58.420
It's so difficult.


00:24:58.420 --> 00:24:59.860
(laughing)


00:24:59.860 --> 00:25:01.820
That's such a skill.


00:25:01.820 --> 00:25:05.000
- Yeah, we've been doing it for 223 episodes, I guess.


00:25:05.000 --> 00:25:06.320
(laughing)


00:25:06.320 --> 00:25:08.360
- Nice. - All right, Brian?


00:25:08.360 --> 00:25:11.200
- Yeah, so something else that's awesome is Datadog.


00:25:11.200 --> 00:25:13.580
So this episode of Python Bytes is brought to you


00:25:13.580 --> 00:25:14.800
by Datadog.


00:25:14.800 --> 00:25:17.960
Are you having trouble visualizing latency, CPU,


00:25:17.960 --> 00:25:19.400
and memory bottlenecks in your app


00:25:19.400 --> 00:25:21.560
and not sure where the issue's coming from


00:25:21.560 --> 00:25:22.480
or how to solve it?


00:25:22.480 --> 00:25:26.080
Well, Datadog seamlessly correlates logs and traces


00:25:26.080 --> 00:25:28.040
at the level of individual requests,


00:25:28.040 --> 00:25:30.160
allowing you to quickly troubleshoot


00:25:30.160 --> 00:25:31.320
your Python application.


00:25:31.320 --> 00:25:33.740
Plus their continuous profiler allows you to find


00:25:33.740 --> 00:25:36.660
the most resource consuming parts in your production code


00:25:36.660 --> 00:25:40.360
all the time at scale, at any scale with minimal overhead.


00:25:40.360 --> 00:25:43.480
Be the hero that got the app back on track at your company.


00:25:43.480 --> 00:25:45.160
Get started today with a free trial


00:25:45.160 --> 00:25:47.680
at pythonbytes.fm/datadog


00:25:47.680 --> 00:25:50.800
or just click the link in your podcast player show notes.


00:25:50.800 --> 00:25:53.980
Yes, check out our show notes and thank you Datadog.


00:25:53.980 --> 00:25:56.000
- Yeah, thanks Datadog and get a cool little


00:25:56.000 --> 00:25:57.380
Datadog t-shirt as well.


00:25:57.380 --> 00:26:00.160
Speaking of cool, let me talk about the next item here.


00:26:00.160 --> 00:26:02.520
I guess I'm next up on this, on the list here.


00:26:02.520 --> 00:26:06.280
So this item comes to us partially from Will Shanks.


00:26:06.280 --> 00:26:07.800
He sent me the Python side,


00:26:07.800 --> 00:26:10.000
but I wanted to highlight this sort of broader thing


00:26:10.000 --> 00:26:12.160
because I think it's pretty interesting.


00:26:12.160 --> 00:26:14.240
The first part, well, let me just tell you the title


00:26:14.240 --> 00:26:16.000
of the article, the piece of news is


00:26:16.000 --> 00:26:18.020
Google and Microsoft back Python


00:26:18.020 --> 00:26:19.900
and Rust programming languages.


00:26:19.900 --> 00:26:22.880
And they both, I believe do stuff with each,


00:26:22.880 --> 00:26:24.920
but it's primarily Google backs Python,


00:26:24.920 --> 00:26:27.840
Microsoft backs Rust, but the overall trend


00:26:27.840 --> 00:26:30.360
is part of the story that I think is interesting.


00:26:30.360 --> 00:26:34.840
So they both come along to make significant contributions


00:26:34.840 --> 00:26:36.160
to the various languages.


00:26:36.160 --> 00:26:38.880
And part of the trade-off I believe there


00:26:38.880 --> 00:26:43.400
is that they'll have some say or some ability to influence


00:26:43.400 --> 00:26:45.920
where the direction of these projects are going.


00:26:45.920 --> 00:26:50.320
Like, hey, for example, Google donated $350,000


00:26:50.320 --> 00:26:51.920
or it's not quite the right way to put it.


00:26:51.920 --> 00:26:52.880
That's what the article says.


00:26:52.880 --> 00:26:57.800
Google sponsored the PSF at the visionary sponsor level


00:26:57.800 --> 00:27:00.440
which has a price tag of $350,000.


00:27:00.440 --> 00:27:02.240
And the goal is,


00:27:02.240 --> 00:27:04.240
this is the first company to do so, by the way.


00:27:04.240 --> 00:27:08.440
And so they're investing in improved IPI malware detection


00:27:08.440 --> 00:27:11.240
and better foundational tools and services


00:27:11.240 --> 00:27:13.340
like pip type of things and so on.


00:27:13.340 --> 00:27:16.140
And they're hiring a CPython developer


00:27:16.140 --> 00:27:17.920
in residence for 2021.


00:27:17.920 --> 00:27:19.640
I don't know if that position is still open


00:27:19.640 --> 00:27:20.640
or if there's applications,


00:27:20.640 --> 00:27:22.960
but anyway, I think that's pretty awesome.


00:27:22.960 --> 00:27:26.020
So yeah, I'm really happy for this.


00:27:26.020 --> 00:27:28.940
I do feel like there's a hundred other companies


00:27:28.940 --> 00:27:30.460
that should be doing the same thing.


00:27:30.460 --> 00:27:32.860
You know, Bank of America, hello?


00:27:32.860 --> 00:27:36.060
5,000 people working on a Python project there.


00:27:36.060 --> 00:27:38.740
5,000 Python developers, surely some of their wellbeing


00:27:38.740 --> 00:27:40.420
depends on the wellbeing of Python.


00:27:40.420 --> 00:27:42.100
And you know, banks and places like that


00:27:42.100 --> 00:27:46.020
have at least $300,000 to spend on IT per year,


00:27:46.020 --> 00:27:46.860
I'm pretty sure.


00:27:46.860 --> 00:27:49.260
- You know what I find funny about that?


00:27:49.260 --> 00:27:52.780
That, you know, like these huge companies,


00:27:52.780 --> 00:27:55.460
these huge corporations, they are depending on Python


00:27:55.460 --> 00:27:56.580
and all this stuff.


00:27:56.580 --> 00:28:01.260
And they, for example, they are for sure running Python in CI


00:28:01.260 --> 00:28:03.740
and pip install a bunch of things.


00:28:03.740 --> 00:28:07.380
They are probably having some issues with the new resolver


00:28:07.380 --> 00:28:09.460
and pip install and taking a bunch of time


00:28:09.460 --> 00:28:12.740
and having a lot of time by their developers


00:28:12.740 --> 00:28:15.220
waiting for their solver to handle things.


00:28:15.220 --> 00:28:20.500
And the resolver is having to download all the packages that


00:28:20.500 --> 00:28:24.020
match some range to be able to extract the metadata to be


00:28:24.020 --> 00:28:26.820
able to compute and to be able to do all the backtracking


00:28:26.820 --> 00:28:27.620
and all that stuff.


00:28:27.620 --> 00:28:32.140
And if the PSF was better funded,


00:28:32.140 --> 00:28:34.340
they already have the feature request


00:28:34.340 --> 00:28:38.300
and they already have the idea and the objective


00:28:38.300 --> 00:28:42.260
to include the metadata of those packages in PyPI


00:28:42.260 --> 00:28:44.860
so that people could ask the API, what


00:28:44.860 --> 00:28:47.540
are the versions, instead of downloading all the packages.


00:28:47.540 --> 00:28:49.300
So it's like--


00:28:49.300 --> 00:28:53.940
- That seems more efficient, like a 100 byte JSON document


00:28:53.940 --> 00:28:55.860
instead of megs of packages.


00:28:55.860 --> 00:28:57.740
- Exactly, and it's just like, you know,


00:28:57.740 --> 00:29:01.260
like it will probably just be like a little funding,


00:29:01.260 --> 00:29:04.380
just, I don't know, a couple of full-time developers


00:29:04.380 --> 00:29:09.180
working a lot more on that than a lot of volunteering


00:29:09.180 --> 00:29:14.180
and like, yeah, like I feel if it was better funded,


00:29:14.180 --> 00:29:19.380
they will save a ton of money and time


00:29:19.380 --> 00:29:23.220
spent by their developers if the whole PSF


00:29:23.220 --> 00:29:24.260
was performance.


00:29:24.260 --> 00:29:25.100
- Absolutely.


00:29:25.100 --> 00:29:27.460
I mean, that's just one small example, right?


00:29:27.460 --> 00:29:28.300
- Yeah, yeah.


00:29:28.300 --> 00:29:30.860
- Another one is maybe we want higher performance.


00:29:30.860 --> 00:29:33.340
Like the survey that Brian covered was


00:29:33.340 --> 00:29:36.340
one of the top requested features was better performance.


00:29:36.340 --> 00:29:40.400
Well, if we had 20 companies each donate a million dollars,


00:29:40.400 --> 00:29:42.820
I bet we could get a pretty awesome JIT built.


00:29:42.820 --> 00:29:44.420
Or something like that, right?


00:29:44.420 --> 00:29:48.260
I mean, there's clear links back to the well-being.


00:29:48.260 --> 00:29:52.060
So anyway, awesome Google and Microsoft as well


00:29:52.060 --> 00:29:53.840
for the Rust side of things.


00:29:53.840 --> 00:29:54.680
- Absolutely.


00:29:54.680 --> 00:29:57.480
- But it's, I think part of the story


00:29:57.480 --> 00:29:59.360
is that this is a story, you know?


00:29:59.360 --> 00:30:01.600
Like that this is big news, it's awesome,


00:30:01.600 --> 00:30:04.300
but it should be like, oh yeah, and the other 20,


00:30:04.300 --> 00:30:06.080
or the other 100 companies, right?


00:30:06.080 --> 00:30:06.920
- Yeah.


00:30:06.920 --> 00:30:08.660
- So the people that listen to, I mean,


00:30:08.660 --> 00:30:13.280
Microsoft and Google know that they use Python and Rust.


00:30:13.280 --> 00:30:15.280
But I think there's a lot of people listening


00:30:15.280 --> 00:30:17.600
to this podcast that know there's a need there,


00:30:17.600 --> 00:30:20.760
but they're just engineers, and there's the people


00:30:20.760 --> 00:30:23.260
at the top of the company really might not know


00:30:23.260 --> 00:30:26.580
how much their company depends on these languages.


00:30:26.580 --> 00:30:31.580
And so I actually, nice, I actually would like to,


00:30:31.580 --> 00:30:33.580
I'd like to have some sort of


00:30:33.580 --> 00:30:35.660
how to start that conversation document.


00:30:35.660 --> 00:30:38.260
Something like, if I'm at a company,


00:30:38.260 --> 00:30:41.980
how do I start that conversation with my leaders


00:30:41.980 --> 00:30:45.580
to say how, you know, how do I talk to that?


00:30:45.580 --> 00:30:47.400
To say, hey, we use Python a lot,


00:30:47.400 --> 00:30:49.540
can we contribute to the PSO?


00:30:49.540 --> 00:30:53.820
- Yeah, I spoke to, I think it was Peter Yang about this.


00:30:53.820 --> 00:30:56.640
No, sorry, Peter Wing from Anaconda.


00:30:56.640 --> 00:30:59.140
And he has such a good insight and ideas


00:30:59.140 --> 00:31:01.340
on this whole topic.


00:31:01.340 --> 00:31:04.620
One of the challenges is, I think it was he,


00:31:04.620 --> 00:31:06.960
him who said this, like they don't have,


00:31:06.960 --> 00:31:10.320
there's not a place on a profits and loss


00:31:10.320 --> 00:31:12.380
accounting system for charity.


00:31:12.380 --> 00:31:14.180
There's a place for sponsorship


00:31:14.180 --> 00:31:15.500
where you get something back.


00:31:15.500 --> 00:31:16.880
There's a place for advertising.


00:31:16.880 --> 00:31:18.180
There's a place for IT.


00:31:18.180 --> 00:31:20.740
but just charity alone doesn't quite work.


00:31:20.740 --> 00:31:22.780
So I don't know, I think that's part of the story


00:31:22.780 --> 00:31:24.540
is like kind of got to fit into that world


00:31:24.540 --> 00:31:26.800
where like, well, we could support it.


00:31:26.800 --> 00:31:28.400
And in this sense that we've been talking about,


00:31:28.400 --> 00:31:29.400
yeah, you'll get something back,


00:31:29.400 --> 00:31:31.620
but we need a tangible, we get something back.


00:31:31.620 --> 00:31:32.740
I don't know what that is,


00:31:32.740 --> 00:31:35.260
but I think there's a little bit of a mismatch there.


00:31:35.260 --> 00:31:37.000
Anyway, just a couple of shout outs to some more.


00:31:37.000 --> 00:31:40.540
We got Salesforce, we got Fastly, Bloomberg, Azure,


00:31:40.540 --> 00:31:43.380
Microsoft, Capital One, you'll even find TalkByThon training


00:31:43.380 --> 00:31:45.380
down near the bottom of that list,


00:31:45.380 --> 00:31:47.180
sponsoring the PSF over there.


00:31:47.180 --> 00:31:48.020
That's cool.


00:31:48.020 --> 00:31:50.540
But also just to round this out,


00:31:50.540 --> 00:31:53.380
Microsoft is doing interesting stuff with Rust


00:31:53.380 --> 00:31:56.180
around using it to basically replace


00:31:56.180 --> 00:31:58.540
where they're using C and low level stuff like that.


00:31:58.540 --> 00:32:02.300
So they've joined Mozilla, AWS, Huawei,


00:32:02.300 --> 00:32:03.820
and Google as founding members


00:32:03.820 --> 00:32:05.300
of the Rust Foundation as well.


00:32:05.300 --> 00:32:07.060
And I think they donated something.


00:32:07.060 --> 00:32:09.120
And I don't know the numbers there, what that means.


00:32:09.120 --> 00:32:11.340
But anyway, thanks Will Shanks for sending that over


00:32:11.340 --> 00:32:13.820
and thank you Google and Microsoft


00:32:13.820 --> 00:32:15.380
and other companies we gave a shout out to


00:32:15.380 --> 00:32:17.600
for supporting these projects and communities.


00:32:17.600 --> 00:32:19.640
- Semantic versions, let's talk about that.


00:32:19.640 --> 00:32:23.680
So yeah, so I actually don't know if FastAPI


00:32:23.680 --> 00:32:26.320
is using SemVer or CalVer.


00:32:26.320 --> 00:32:27.700
Sebastian, what do you got?


00:32:27.700 --> 00:32:32.700
- I think FastAPI will match in what Henrik describes


00:32:32.700 --> 00:32:36.880
as the YOLO zone in that article.


00:32:36.880 --> 00:32:39.680
- Okay, so what version are you on?


00:32:39.680 --> 00:32:41.240
- So it's 0.something.


00:32:41.240 --> 00:32:42.800
The thing is that I'm managing it


00:32:42.800 --> 00:32:46.000
as if it was like very strict same version


00:32:46.000 --> 00:32:51.000
where I'm handling the bumps in the versions,


00:32:51.000 --> 00:32:56.040
but it's all zero point something still.


00:32:56.040 --> 00:32:57.840
Because I want to add some features


00:32:57.840 --> 00:33:01.040
and do some, the freedom to do some changes


00:33:01.040 --> 00:33:05.040
to the API to have like the best design possible.


00:33:05.040 --> 00:33:09.300
Also because I want to release the one version


00:33:09.300 --> 00:33:12.560
after Ubicorn and Starlette have the one version.


00:33:12.560 --> 00:33:15.600
Yeah, I think he's right.


00:33:15.600 --> 00:33:18.080
- So yeah, so what we're talking about is an article


00:33:18.080 --> 00:33:22.560
from Hinnick saying semantic versioning will not save you.


00:33:22.560 --> 00:33:26.240
So the idea with semantic, with versions


00:33:26.240 --> 00:33:28.680
is you've got like a three digit number


00:33:28.680 --> 00:33:33.440
and there's a major, minor, micro.


00:33:33.440 --> 00:33:37.080
And the idea is if the,


00:33:37.080 --> 00:33:38.920
as long as the major number doesn't change


00:33:38.920 --> 00:33:42.360
and you're using this package or this library or this tool,


00:33:42.360 --> 00:33:44.840
it's not gonna break you if it goes up.


00:33:44.840 --> 00:33:49.840
So if you go from 1.9 to 1.10, you can upgrade, it's fine,


00:33:49.840 --> 00:33:51.280
and nothing will break.


00:33:51.280 --> 00:33:55.040
But there's a whole bunch of problems with that.


00:33:55.040 --> 00:33:59.320
For one, that implication is just,


00:33:59.320 --> 00:34:01.200
it's not really true all the time.


00:34:01.200 --> 00:34:04.440
You don't really know, it's often there's no new features,


00:34:04.440 --> 00:34:06.000
but there'll be something fixes,


00:34:06.000 --> 00:34:07.240
there'll be fixes and things,


00:34:07.240 --> 00:34:09.840
and you might actually depend on the broken behaviors.


00:34:09.840 --> 00:34:13.080
So there's, in practice, you can't really


00:34:13.080 --> 00:34:14.800
just upgrade willy-nilly.


00:34:14.800 --> 00:34:16.840
So in practice, you have to be,


00:34:16.840 --> 00:34:18.360
like if you're depending on a package


00:34:18.360 --> 00:34:19.760
and it changes its version,


00:34:19.760 --> 00:34:22.800
you have to test and have good coverage


00:34:22.800 --> 00:34:24.640
for your own code to start with.


00:34:24.640 --> 00:34:26.080
And you should pin your dependencies


00:34:26.080 --> 00:34:29.360
so you don't just automatically update to the newest one.


00:34:29.360 --> 00:34:32.680
But you should also try to regularly keep updated


00:34:32.680 --> 00:34:34.520
to the new changes.


00:34:34.520 --> 00:34:38.040
And you have to do it in a try and a try basis.


00:34:38.040 --> 00:34:41.920
So you like update the new version and then try it


00:34:41.920 --> 00:34:43.380
and run your tests.


00:34:43.380 --> 00:34:45.740
And if they pass, then repin the new versions.


00:34:45.740 --> 00:34:49.540
And if they don't pass, well, you've got to have to either,


00:34:49.540 --> 00:34:54.080
you know, in below it or block that version or something.


00:34:54.080 --> 00:34:56.520
There are messy things that happen.


00:34:56.520 --> 00:34:57.880
- Yeah, and it's getting more complicated


00:34:57.880 --> 00:34:58.780
with the new resolver.


00:34:58.780 --> 00:35:00.440
Like if you say, I must have, you know,


00:35:00.440 --> 00:35:03.800
pedantic below some version and then FastAPI comes along


00:35:03.800 --> 00:35:06.080
and says, I must have pedantic above a higher version.


00:35:06.080 --> 00:35:08.760
well, whatever that other thing needed can't be used with FastAV.


00:35:08.760 --> 00:35:12.880
Like there's these intervals that no longer intersect that can become challenging.


00:35:12.880 --> 00:35:15.560
>> Yes. Let's say you've got an application,


00:35:15.560 --> 00:35:19.120
your end application, you're the only user of it or other people are,


00:35:19.120 --> 00:35:21.040
but nobody's importing it.


00:35:21.040 --> 00:35:23.300
Then you can pin directly all of


00:35:23.300 --> 00:35:25.480
your dependencies and you can test it and it's great.


00:35:25.480 --> 00:35:30.160
But if you're a library and somebody is going to import you,


00:35:30.160 --> 00:35:33.480
you can't really just actually just pin everything


00:35:33.480 --> 00:35:35.980
because somebody might, like,


00:35:35.980 --> 00:35:38.760
let's say I'm pulling in requests.


00:35:38.760 --> 00:35:42.040
Somebody else might be pulling in me and requests.


00:35:42.040 --> 00:35:45.220
So you pinning it hardcore is,


00:35:45.220 --> 00:35:48.600
you're like you said, with the dependency manager


00:35:48.600 --> 00:35:50.920
or the dependency resolver, that'll break.


00:35:50.920 --> 00:35:52.840
So you've got to be a little bit broad


00:35:52.840 --> 00:35:55.440
so that these overlaps happen.


00:35:55.440 --> 00:35:58.480
But okay, so the consequences of this just nightmare


00:35:58.480 --> 00:36:02.160
is mayhem and version conflicts, like we described.


00:36:02.160 --> 00:36:06.200
Let's say my package says I have to have request something


00:36:06.200 --> 00:36:08.080
and somebody else X and somebody else says,


00:36:08.080 --> 00:36:11.880
oh, well I need to request version Y in mine.


00:36:11.880 --> 00:36:13.860
And that's just gonna be a mess.


00:36:13.860 --> 00:36:16.680
So all of these promises,


00:36:16.680 --> 00:36:21.480
the other subheading for the promises for SemVer


00:36:21.480 --> 00:36:24.320
is that if you're on zero at the beginning,


00:36:24.320 --> 00:36:25.740
you can change it all you want.


00:36:25.740 --> 00:36:27.820
So there's no promises on zero over.


00:36:27.820 --> 00:36:30.240
If it's zero dot something, all bets are off.


00:36:30.240 --> 00:36:31.920
You can change the API.


00:36:31.920 --> 00:36:33.920
You can completely break things.


00:36:33.920 --> 00:36:35.920
You can completely change the API.


00:36:35.920 --> 00:36:38.080
So nothing before work.


00:36:38.080 --> 00:36:42.080
And in practice, that doesn't happen,


00:36:42.080 --> 00:36:45.520
but there are times where in the,


00:36:45.520 --> 00:36:48.680
there's a lot of people are stuck in the zero-ver,


00:36:48.680 --> 00:36:50.720
but you, in reality,


00:36:50.720 --> 00:36:53.160
the first few releases really are up in the air.


00:36:53.160 --> 00:36:54.480
You're not sure what's gonna work


00:36:54.480 --> 00:36:56.200
and what's gonna not work.


00:36:56.200 --> 00:37:00.720
But after a while, zero-ver just starts to be just there.


00:37:00.720 --> 00:37:02.380
and you really should have been at one


00:37:02.380 --> 00:37:04.600
because everybody's using it.


00:37:04.600 --> 00:37:06.000
But anyway, so.


00:37:06.000 --> 00:37:07.840
- Yeah, and we covered that whole thing,


00:37:07.840 --> 00:37:09.040
I think it was Mamutush, I mean,


00:37:09.040 --> 00:37:11.760
I can't remember about the whole zero over thing.


00:37:11.760 --> 00:37:12.600
- Yeah.


00:37:12.600 --> 00:37:14.120
- And calling places out.


00:37:14.120 --> 00:37:16.360
Yeah, I mean, it's fine to have it,


00:37:16.360 --> 00:37:18.640
but like some of these projects had been out for 15 years


00:37:18.640 --> 00:37:20.200
and they're still zero dot something, right?


00:37:20.200 --> 00:37:23.320
- Yeah, like React was used by everyone


00:37:23.320 --> 00:37:25.920
before they released the first one beta.


00:37:25.920 --> 00:37:28.400
- Exactly, exactly, interesting, yeah.


00:37:28.400 --> 00:37:30.120
- You know, it's quite fun that,


00:37:30.120 --> 00:37:33.480
I don't know, some months ago, I updated a little bit,


00:37:33.480 --> 00:37:38.320
a little piece in FastAPI of some corner case


00:37:38.320 --> 00:37:42.280
that I had for some specific workaround for SQLAlchemy


00:37:42.280 --> 00:37:45.600
that didn't import SQLAlchemy but excluded so much


00:37:45.600 --> 00:37:47.960
with some little thing over there.


00:37:47.960 --> 00:37:51.760
And it was like deprecated, not used in the latest versions


00:37:51.760 --> 00:37:53.760
and not anything, and I just removed it


00:37:53.760 --> 00:37:56.680
because it was there for a long time.


00:37:56.680 --> 00:37:57.960
And hell break loose.


00:37:57.960 --> 00:38:02.960
I have an issue that had like, I don't know,


00:38:02.960 --> 00:38:05.680
tens of thumbs up.


00:38:05.680 --> 00:38:09.440
I tracked the issue connected to the repository


00:38:09.440 --> 00:38:14.060
and Netflix that was using FastAPI for the, yeah.


00:38:14.060 --> 00:38:16.360
Anyway, I had to release something quickly


00:38:16.360 --> 00:38:19.680
to get the book back because people


00:38:19.680 --> 00:38:21.760
were already depending on that.


00:38:21.760 --> 00:38:22.600
And it's like, yeah.


00:38:22.600 --> 00:38:23.480
- Yeah, well you have this problem


00:38:23.480 --> 00:38:26.000
that you have so many consumers of,


00:38:26.000 --> 00:38:30.640
I mean, 12% of all web frameworks are FastAPI at the moment.


00:38:30.640 --> 00:38:32.660
That's a lot of people using your library,


00:38:32.660 --> 00:38:33.700
touching the corners.


00:38:33.700 --> 00:38:35.080
- Yeah, absolutely.


00:38:35.080 --> 00:38:35.920
- Yeah.


00:38:35.920 --> 00:38:37.940
- So the last thing I wanted to touch on with this is


00:38:37.940 --> 00:38:41.160
I do like Hennig's instructions


00:38:41.160 --> 00:38:43.560
on what you should do about this, of testing.


00:38:43.560 --> 00:38:46.280
But one of the things that we didn't bring up yet so far is


00:38:46.280 --> 00:38:50.360
if you test something against an update and it doesn't work,


00:38:50.360 --> 00:38:53.040
it might not be an intentional break in the API


00:38:53.040 --> 00:38:54.840
or the behavior.


00:38:54.840 --> 00:38:57.360
look into it and maybe notify the maintainers


00:38:57.360 --> 00:39:01.400
that you are depending on some behavior that it broke.


00:39:01.400 --> 00:39:03.160
- Almost all the stuff is on GitHub


00:39:03.160 --> 00:39:06.320
and you can file an issue potentially or something like that.


00:39:06.320 --> 00:39:07.680
- And don't just get mad.


00:39:07.680 --> 00:39:11.200
People didn't break you on purpose, so be nice.


00:39:11.200 --> 00:39:15.000
- That is a start out with a generosity in your thought.


00:39:15.000 --> 00:39:16.800
So there's a whole bunch of comments in the live stream.


00:39:16.800 --> 00:39:17.640
Thank you.


00:39:17.640 --> 00:39:19.760
I'm gonna just try to circle back on a few things.


00:39:19.760 --> 00:39:23.800
One, Magnus asks, how do you say or talk about verbally


00:39:23.800 --> 00:39:26.100
the square brackets in PyDentic or even typing


00:39:26.100 --> 00:39:28.740
just iterable, square bracket, int, bracket.


00:39:28.740 --> 00:39:30.740
I've always said interval of int,


00:39:30.740 --> 00:39:33.540
just like you would use for generics or templates


00:39:33.540 --> 00:39:35.180
in C++, like iterable of int.


00:39:35.180 --> 00:39:36.480
I don't know, what do you guys say?


00:39:36.480 --> 00:39:38.180
- I have no idea.


00:39:38.180 --> 00:39:42.380
I will ask Ivan Levinsky or maybe Luca Lange


00:39:42.380 --> 00:39:44.220
could say like, what is the actual term?


00:39:44.220 --> 00:39:45.820
I think it's one of those down there


00:39:45.820 --> 00:39:47.340
that doesn't have a name yet.


00:39:47.340 --> 00:39:48.180
I don't know.


00:39:48.180 --> 00:39:49.000
- Yeah, yeah.


00:39:49.000 --> 00:39:51.040
And then Dean has an interesting comment


00:39:51.040 --> 00:39:54.840
on versioning, Brian.


00:39:54.840 --> 00:39:55.680
Talking about versioning.


00:39:55.680 --> 00:39:56.920
Why is Brian not updating his Chrome?


00:39:56.920 --> 00:39:59.040
There's a big update button right there.


00:39:59.040 --> 00:40:01.560
And then this one for you, Sebastian.


00:40:01.560 --> 00:40:05.640
Although I believe we touched on this RJL a little bit ago.


00:40:05.640 --> 00:40:07.220
Any chance to ask a FastAPI question?


00:40:07.220 --> 00:40:09.320
Will it ever become a web server like Django


00:40:09.320 --> 00:40:11.360
or Flask more than API engine?


00:40:11.360 --> 00:40:12.200
Yeah, absolutely.


00:40:12.200 --> 00:40:15.840
- So the FastAPI, you can use,


00:40:15.840 --> 00:40:17.760
you can do everything that you can do


00:40:17.760 --> 00:40:20.120
with Flask or Django with FastAPI.


00:40:20.120 --> 00:40:23.520
you can render Jinja templates in the backend if you want.


00:40:23.520 --> 00:40:27.560
FastAPI will not include an ORM by default


00:40:27.560 --> 00:40:31.800
because that will compromise on tying it to a database


00:40:31.800 --> 00:40:33.400
and to a type of database.


00:40:33.400 --> 00:40:35.080
- Well, Flask doesn't as well, right?


00:40:35.080 --> 00:40:37.600
Like Flask says, go pick Mongo.


00:40:37.600 --> 00:40:38.440
- You're right, you're right.


00:40:38.440 --> 00:40:40.200
- Go pick SQLAlchemy, something like that.


00:40:40.200 --> 00:40:41.040
- You're right.


00:40:41.040 --> 00:40:44.160
Actually, I don't know, comparing to Flask,


00:40:44.160 --> 00:40:47.400
FastAPI will be pretty much comparable, I think.


00:40:47.400 --> 00:40:48.960
- I think it's super comparable.


00:40:48.960 --> 00:40:52.040
And I also, I created the decorators that you can put


00:40:52.040 --> 00:40:56.040
on the templates to, on the API endpoints.


00:40:56.040 --> 00:40:58.840
They have like a chameleon template or a flat,


00:40:58.840 --> 00:41:00.740
sorry, Jinja2 template.


00:41:00.740 --> 00:41:02.600
And then, yeah, I'm actually working on a course.


00:41:02.600 --> 00:41:03.440
I haven't told you, Sebastian.


00:41:03.440 --> 00:41:07.080
The course I'm gonna release is building proper web apps


00:41:07.080 --> 00:41:10.760
with FastAPI plus APIs, like sort of factoring that stuff in


00:41:10.760 --> 00:41:12.920
and like doing forums and stuff like that.


00:41:12.920 --> 00:41:14.240
- Nice, that's very cool.


00:41:14.240 --> 00:41:15.080
- Yeah, it'll be fun.


00:41:15.080 --> 00:41:16.840
Yeah, all right, so cool.


00:41:16.840 --> 00:41:19.440
RJL likes the ORM news.


00:41:19.440 --> 00:41:20.360
Yeah, you can pick that.


00:41:20.360 --> 00:41:21.800
And then also, Sebastian,


00:41:21.800 --> 00:41:23.640
you had such a good tweet a while ago,


00:41:23.640 --> 00:41:26.640
and Robert Robinson wants to just touch on that.


00:41:26.640 --> 00:41:28.520
When will it be possible to have four years of experience


00:41:28.520 --> 00:41:32.000
with FastAPIs, as companies are still yearning for it?


00:41:32.000 --> 00:41:33.400
Tell people about your tweet.


00:41:33.400 --> 00:41:34.240
(Robert laughs)


00:41:34.240 --> 00:41:37.240
- You know, it's fun that I tweeted something,


00:41:37.240 --> 00:41:39.920
for those that maybe probably didn't see it.


00:41:39.920 --> 00:41:42.600
I tweeted something half a year ago,


00:41:42.600 --> 00:41:45.720
and it was saying, "I saw a job post


00:41:45.720 --> 00:41:48.680
requiring four plus years of experience of FastAPI.


00:41:48.680 --> 00:41:52.280
I couldn't apply because I only have 1.5 years of experience


00:41:52.280 --> 00:41:53.760
since I created the thing.


00:41:53.760 --> 00:41:57.640
So maybe it's time to reevaluate the experience


00:41:57.640 --> 00:42:00.440
is equal to skillset.


00:42:00.440 --> 00:42:03.840
But a bunch of people seem to have learned it


00:42:03.840 --> 00:42:06.520
because they tweeted it like crazy.


00:42:06.520 --> 00:42:09.840
My Twitter app broke.


00:42:09.840 --> 00:42:12.600
And now recently, I don't know why they started


00:42:12.600 --> 00:42:13.920
with tweeting it again.


00:42:13.920 --> 00:42:18.920
I'm sharing screenshots of it on LinkedIn and tagging me.


00:42:18.920 --> 00:42:22.720
By this point, I have two years of experience with FastAPI.


00:42:22.720 --> 00:42:24.800
So that is no longer true.


00:42:24.800 --> 00:42:28.960
- So now it'll be like 20, what, 2023?


00:42:28.960 --> 00:42:30.720
- Yeah, 2023, these things will be legit.


00:42:30.720 --> 00:42:32.600
Then you could apply for that job, that'd be fantastic.


00:42:32.600 --> 00:42:33.440
- Yeah. - Show us what you want.


00:42:33.440 --> 00:42:35.720
- I will get a job there, hey.


00:42:35.720 --> 00:42:38.120
- All right, we're getting long in the show,


00:42:38.120 --> 00:42:39.920
so maybe our next two items should be kind of short,


00:42:39.920 --> 00:42:41.480
but Sebastian, the next one's yours.


00:42:41.480 --> 00:42:42.800
- Yeah, this will be short.


00:42:42.800 --> 00:42:47.800
OpenAPI 3.1.0 was released recently.


00:42:47.800 --> 00:42:49.640
FastAPI is based on OpenAPI,


00:42:49.640 --> 00:42:52.000
so it's important for FastAPI


00:42:52.000 --> 00:42:54.360
and for whoever are using FastAPI.


00:42:54.360 --> 00:42:57.840
OpenAPI 3.1.0 doesn't change much.


00:42:57.840 --> 00:43:00.880
It adds more compatibility underneath.


00:43:00.880 --> 00:43:04.840
So now it's based on the latest version of JSON schema,


00:43:04.840 --> 00:43:07.880
which means that if you do things like, for example,


00:43:07.880 --> 00:43:11.280
automatic react components based on JSON schema,


00:43:11.280 --> 00:43:14.760
now they will be able to share the same schema as OpenAPI.


00:43:14.760 --> 00:43:19.160
The previous OpenAPI was based on a very old version


00:43:19.160 --> 00:43:20.900
of JSON schema and the new one is based


00:43:20.900 --> 00:43:21.740
on the latest version.


00:43:21.740 --> 00:43:24.320
So we will have like all the compatibility


00:43:24.320 --> 00:43:27.960
all around the place in all the different tools.


00:43:27.960 --> 00:43:29.940
So that's great.


00:43:29.940 --> 00:43:32.400
And it will allow like a lot of interoperability


00:43:32.400 --> 00:43:35.120
and integration with other tools.


00:43:35.120 --> 00:43:35.960
- Yeah, yeah.


00:43:35.960 --> 00:43:37.040
For people who don't know,


00:43:37.040 --> 00:43:41.500
if you run a FastAPI site and you go to /docs,


00:43:41.500 --> 00:43:43.700
it'll generate a whole form that gives you information


00:43:43.700 --> 00:43:45.720
about the Pydantic models that are exchanged,


00:43:45.720 --> 00:43:46.820
the validation that happens,


00:43:46.820 --> 00:43:48.140
even lets you try it out, right?


00:43:48.140 --> 00:43:48.980
- Yeah.


00:43:48.980 --> 00:43:50.740
- That's related to this, yeah?


00:43:50.740 --> 00:43:52.880
- Yeah, and OpenAPI is an open standard


00:43:52.880 --> 00:43:55.660
that is held by the Linux Foundation


00:43:55.660 --> 00:43:58.860
and it uses JSON schema, which is another open standard,


00:43:58.860 --> 00:44:03.700
which is a in-progress RFC, an internet standard.


00:44:03.700 --> 00:44:06.020
And OpenAPI also uses OAuth2,


00:44:06.020 --> 00:44:07.060
which is another standard.


00:44:07.060 --> 00:44:08.780
So it's all based on standards.


00:44:08.780 --> 00:44:11.020
When you build an application with FastAPI,


00:44:11.020 --> 00:44:12.340
it's all based on standards


00:44:12.340 --> 00:44:14.760
and you get an application built on standards.


00:44:14.760 --> 00:44:18.140
Having this compatibility between these different standards


00:44:18.140 --> 00:44:20.580
and having all them synchronized now,


00:44:20.580 --> 00:44:24.140
will improve a lot all that interaction


00:44:24.140 --> 00:44:25.820
between those different things.


00:44:25.820 --> 00:44:27.860
- Yeah, that's really cool.


00:44:27.860 --> 00:44:28.940
Awesome, very nice.


00:44:28.940 --> 00:44:30.820
So Brian, that's our items, right?


00:44:30.820 --> 00:44:32.620
Anything you wanna throw out there?


00:44:32.620 --> 00:44:35.480
I am wearing this lovely Noah shirt


00:44:35.480 --> 00:44:39.800
from National Oceanic and Atmospheric Administration.


00:44:39.800 --> 00:44:43.800
Thanks to Matthew Kisari and Noah for the great shirt.


00:44:43.800 --> 00:44:46.200
Sent it as a thank you for speaking to them


00:44:46.200 --> 00:44:48.000
a couple of weeks ago, and that's really cool.


00:44:48.000 --> 00:44:49.800
They also sent a couple of shirts for my daughters,


00:44:49.800 --> 00:44:50.880
and that was nice, thanks.


00:44:50.880 --> 00:44:52.160
- Yeah, fantastic.


00:44:52.160 --> 00:44:53.000
That's really cool.


00:44:53.000 --> 00:44:54.800
I'm sure there's neat Python stuff there.


00:44:54.800 --> 00:44:58.080
- Yeah, so anybody want me to speak at their company


00:44:58.080 --> 00:45:01.240
and send me a shirt, I'll wear it online.


00:45:01.240 --> 00:45:02.440
(laughing)


00:45:02.440 --> 00:45:04.160
- Fantastic, Sebastian, we always throw out


00:45:04.160 --> 00:45:06.000
just little extra items if people,


00:45:06.000 --> 00:45:07.720
if you got anything extra you wanna let people know


00:45:07.720 --> 00:45:09.040
about, anything you wanna share?


00:45:09.040 --> 00:45:11.320
- I just got curious recently about item,


00:45:11.320 --> 00:45:14.120
which is a kind of React in Python,


00:45:14.120 --> 00:45:16.560
and you can use it through Jupyter.


00:45:16.560 --> 00:45:18.960
That's, it seemed quite interesting.


00:45:18.960 --> 00:45:20.960
I haven't played much with it.


00:45:20.960 --> 00:45:24.120
I know I just checked the first day that it works.


00:45:24.120 --> 00:45:26.400
It's a bit mind-bending,


00:45:26.400 --> 00:45:28.720
but it's quite an interesting experiment.


00:45:28.720 --> 00:45:29.960
- Yeah, awesome, okay, very cool.


00:45:29.960 --> 00:45:31.120
People should check that out.


00:45:31.120 --> 00:45:33.380
And Brian, it's true.


00:45:33.380 --> 00:45:34.920
Everyone has a price, everyone has a price.


00:45:34.920 --> 00:45:36.800
Some people it's just a t-shirt, that's awesome.


00:45:36.800 --> 00:45:39.080
All right, I got four things I wanna throw out there


00:45:39.080 --> 00:45:41.300
and then joke, I'll make these all super, super quick.


00:45:41.300 --> 00:45:44.080
So first of all, I wrote, I've been,


00:45:44.080 --> 00:45:45.400
with all of my courses, it's always like,


00:45:45.400 --> 00:45:46.240
oh, do you need Python?


00:45:46.240 --> 00:45:47.280
Do you have the right version of Python?


00:45:47.280 --> 00:45:48.560
Are you on Windows?


00:45:48.560 --> 00:45:51.000
Oh, then here's what you're gonna need to do to get,


00:45:51.000 --> 00:45:51.840
here's how you check it.


00:45:51.840 --> 00:45:53.480
You don't type Python three, that will never work.


00:45:53.480 --> 00:45:54.320
You type Python.


00:45:54.320 --> 00:45:56.120
Unless you are on a certain version of Windows 10,


00:45:56.120 --> 00:45:57.480
then it'll report that it's not there.


00:45:57.480 --> 00:45:59.680
But like, there's just like, oh my God, what is happening?


00:45:59.680 --> 00:46:00.740
I just couldn't take it anymore.


00:46:00.740 --> 00:46:02.780
So I finally broke down and wrote a,


00:46:02.780 --> 00:46:04.780
I don't have Python, I need Python, what do I do?


00:46:04.780 --> 00:46:07.400
Oh, I'm on macOS, okay, so then here's how you find out


00:46:07.400 --> 00:46:09.220
if you have Python, and it's a good version.


00:46:09.220 --> 00:46:11.900
If not, here's three or four options for each OS,


00:46:11.900 --> 00:46:14.340
the benefits, pros, and the cons of potentially,


00:46:14.340 --> 00:46:16.660
say, using Homebrew, and then how you install


00:46:16.660 --> 00:46:17.940
if you wanna go down that path.


00:46:17.940 --> 00:46:20.060
And so, anyway, I'll put a link in the show notes


00:46:20.060 --> 00:46:21.500
if people care about that.


00:46:21.500 --> 00:46:23.420
- Nice, thanks for doing that.


00:46:23.420 --> 00:46:25.460
- Yeah, you're absolutely welcome.


00:46:25.460 --> 00:46:27.640
And last time I was so excited, still am excited,


00:46:27.640 --> 00:46:29.380
about Boto3 type annotations.


00:46:29.380 --> 00:46:30.940
But someone pointed out that this,


00:46:30.940 --> 00:46:32.800
you noticed the last updated two years ago,


00:46:32.800 --> 00:46:34.860
there's a deprecated, oh, there's a fork over here.


00:46:34.860 --> 00:46:36.180
And if you go to that, it goes,


00:46:36.180 --> 00:46:38.060
you go down like, oh, no, no, no, this is deprecated.


00:46:38.060 --> 00:46:38.980
It's over here.


00:46:38.980 --> 00:46:41.940
Eventually you end up at this mypy boto3 builder


00:46:41.940 --> 00:46:46.140
that uses mypy to dynamically generate the type stubs


00:46:46.140 --> 00:46:49.220
for that are compatible with VS Code and PyCharm and so on


00:46:49.220 --> 00:46:51.020
for the Boto library.


00:46:51.020 --> 00:46:52.980
So if you're really super interested in that thing


00:46:52.980 --> 00:46:54.660
I covered last time, you know, check this out,


00:46:54.660 --> 00:46:56.420
follow the GitHub thing.


00:46:56.420 --> 00:46:58.460
- But use it fast before it's deprecated.


00:46:58.460 --> 00:47:00.420
- Yes, exactly, exactly.


00:47:00.420 --> 00:47:02.100
And that comes from Dean Langsom,


00:47:02.100 --> 00:47:03.220
who is also on the livestream,


00:47:03.220 --> 00:47:04.220
so thank you for that, Dean.


00:47:04.220 --> 00:47:05.420
That's awesome.


00:47:05.420 --> 00:47:06.780
We had Brett Cannon on the show.


00:47:06.780 --> 00:47:08.260
Was that last time or time before?


00:47:08.260 --> 00:47:10.180
That was last time, right?


00:47:10.180 --> 00:47:11.820
Very, very recently we had Brett Cannon


00:47:11.820 --> 00:47:13.740
come talk about various things,


00:47:13.740 --> 00:47:15.540
including the pattern matching stuff.


00:47:15.540 --> 00:47:17.460
He also talked about Python Launcher,


00:47:17.460 --> 00:47:18.660
and we threw out, like,


00:47:18.660 --> 00:47:21.700
"Hey, if I'm in a subdirectory of some project,


00:47:21.700 --> 00:47:23.560
"then somewhere up there's a virtual environment,


00:47:23.560 --> 00:47:24.600
"and I just try to run it,


00:47:24.600 --> 00:47:26.860
"it should automatically find the whole project's


00:47:26.860 --> 00:47:28.740
sort of ambient virtual environment.


00:47:28.740 --> 00:47:30.420
So he apparently added that for us.


00:47:30.420 --> 00:47:31.740
- Yeah, I just tried it this morning.


00:47:31.740 --> 00:47:32.580
It's awesome.


00:47:32.580 --> 00:47:33.400
- Yeah, fantastic.


00:47:33.400 --> 00:47:34.240
- Nice.


00:47:34.240 --> 00:47:35.060
- And then last thing,


00:47:35.060 --> 00:47:37.060
I'm thinking of doing an Ask Me Anything


00:47:37.060 --> 00:47:38.220
Talk Python episode,


00:47:38.220 --> 00:47:39.980
where I get some people in the audience


00:47:39.980 --> 00:47:41.980
to interview me and ask the questions


00:47:41.980 --> 00:47:43.540
of the audience just about the show.


00:47:43.540 --> 00:47:44.700
So I'll put a link in the show notes.


00:47:44.700 --> 00:47:46.620
If you have a question you would like to ask


00:47:46.620 --> 00:47:48.580
on Talk Python and make it part of the Ask Me Anything,


00:47:48.580 --> 00:47:51.100
we'll do that and we'll live stream it on YouTube as well.


00:47:51.100 --> 00:47:53.540
All right, so that's all my extra items.


00:47:53.540 --> 00:47:54.420
- We need a joke.


00:47:54.420 --> 00:47:55.260
- We need a joke.


00:47:55.260 --> 00:47:56.080
All right.


00:47:56.080 --> 00:47:57.780
I really enjoyed this one.


00:47:57.780 --> 00:48:01.040
So I thought the funny code comments.


00:48:01.040 --> 00:48:02.880
So I thought we might come back to this.


00:48:02.880 --> 00:48:06.300
So I think I'll kick it off, I guess,


00:48:06.300 --> 00:48:07.340
and then Brian, you're next,


00:48:07.340 --> 00:48:09.820
and then Sebastian, you can pick up the third one.


00:48:09.820 --> 00:48:10.660
How's that sound?


00:48:10.660 --> 00:48:11.480
- Sure.


00:48:11.480 --> 00:48:12.320
- Awesome, all right.


00:48:12.320 --> 00:48:15.380
So here's a comment that kind of misunderstands


00:48:15.380 --> 00:48:17.240
exception handling constructs.


00:48:17.240 --> 00:48:21.260
So try finally comment in the finally block


00:48:21.260 --> 00:48:22.320
should never happen.


00:48:23.820 --> 00:48:26.540
- I'm sure they meant try exception never happen.


00:48:26.540 --> 00:48:27.780
No, no, no, try finally.


00:48:27.780 --> 00:48:29.820
That probably almost always happens.


00:48:29.820 --> 00:48:32.660
- Yeah.


00:48:32.660 --> 00:48:33.500
- That's a good one, right?


00:48:33.500 --> 00:48:34.580
All right, Brian, you're up next.


00:48:34.580 --> 00:48:35.580
- Oh, okay.


00:48:35.580 --> 00:48:37.620
So comment that says,


00:48:37.620 --> 00:48:39.780
looks like C code 'cause of the comment style,


00:48:39.780 --> 00:48:43.260
but you may think you know what's the following code does,


00:48:43.260 --> 00:48:44.100
but you don't.


00:48:44.100 --> 00:48:45.200
Trust me, fiddle with it,


00:48:45.200 --> 00:48:48.340
and you'll spend many a sleepless night cursing


00:48:48.340 --> 00:48:50.320
the moment you thought you'd be clever enough


00:48:50.320 --> 00:48:51.980
to optimize the code below.


00:48:51.980 --> 00:48:54.780
Now close this file and go play with something else.


00:48:54.780 --> 00:48:56.980
(laughing)


00:48:56.980 --> 00:48:58.940
- All right, Sebastian, the next one's yours.


00:48:58.940 --> 00:49:02.980
- So there's this declaration of a constant integer


00:49:02.980 --> 00:49:07.020
with a name of capitals T-E-N, so 10,


00:49:07.020 --> 00:49:09.180
and the value is the number 10.


00:49:09.180 --> 00:49:10.340
And the comment says,


00:49:10.340 --> 00:49:12.740
as if the value of 10 will fluctuate.


00:49:12.740 --> 00:49:14.740
(laughing)


00:49:14.740 --> 00:49:16.780
- You know, you don't want magic numbers in your code,


00:49:16.780 --> 00:49:20.620
like blue might be better than some hexadecimal number


00:49:20.620 --> 00:49:24.640
or like max limit might be 10, but just the word 10,


00:49:24.640 --> 00:49:26.960
there's no reason for that, that's awesome.


00:49:26.960 --> 00:49:28.600
All right, I'll do the next one here.


00:49:28.600 --> 00:49:30.220
I'm not responsible for this code.


00:49:30.220 --> 00:49:32.120
They made me write it against my will.


00:49:32.120 --> 00:49:34.360
(laughing)


00:49:34.360 --> 00:49:37.320
Is it going right?


00:49:37.320 --> 00:49:38.720
- I like the last, it's the next one.


00:49:38.720 --> 00:49:42.480
So if this code works, it was written by Paul.


00:49:42.480 --> 00:49:44.520
If not, we don't know who wrote it.


00:49:44.520 --> 00:49:46.780
(laughing)


00:49:46.780 --> 00:49:50.040
- All right.


00:49:50.040 --> 00:49:51.580
And then the last one says,


00:49:51.580 --> 00:49:54.040
option, so is a declaration of options,


00:49:54.040 --> 00:49:57.200
dot batch size is equal to 300.


00:49:57.200 --> 00:49:59.220
And then the comment says, madness.


00:49:59.220 --> 00:50:02.200
And then screams, this is Sparta!


00:50:02.200 --> 00:50:03.640
- This is Sparta!


00:50:03.640 --> 00:50:05.860
That from the movie 300, fantastic.


00:50:05.860 --> 00:50:08.240
Oh my goodness.


00:50:08.240 --> 00:50:09.080
- Nice.


00:50:09.080 --> 00:50:09.900
- That's great.


00:50:09.900 --> 00:50:11.600
- Awesome, well those are some really good,


00:50:11.600 --> 00:50:13.160
important comments, all of them.


00:50:13.160 --> 00:50:15.120
I think the Sparta one kind of inspires.


00:50:15.120 --> 00:50:16.880
You're like, we're gonna go to batch size 300,


00:50:16.880 --> 00:50:18.040
let's do this.


00:50:18.040 --> 00:50:20.640
I don't know about them so much.


00:50:20.640 --> 00:50:22.400
- No, I'm gonna start doing the,


00:50:22.400 --> 00:50:25.160
if this code works, it was written by me.


00:50:25.160 --> 00:50:27.200
But you know, we have version control.


00:50:27.200 --> 00:50:28.760
You can just look it up.


00:50:28.760 --> 00:50:29.600
- Yeah, that's true.


00:50:29.600 --> 00:50:30.420
There is a blame.


00:50:30.420 --> 00:50:32.120
- Well, that was fun.


00:50:32.120 --> 00:50:32.960
We're done.


00:50:32.960 --> 00:50:34.480
Thanks everybody for joining us.


00:50:34.480 --> 00:50:37.280
Thank you, Sebastian, for joining us.


00:50:37.280 --> 00:50:38.120
This was great.


00:50:38.120 --> 00:50:39.320
- Thank you for the invitation.


00:50:39.320 --> 00:50:42.920
Thanks everyone for listening to my weird voice.


00:50:42.920 --> 00:50:43.760
- Thanks for having us.


00:50:43.760 --> 00:50:44.920
- Sebastian, it was great to have you here.


00:50:44.920 --> 00:50:45.760
Thank you.


00:50:45.760 --> 00:50:46.600
- It was awesome, thank you.


00:50:46.600 --> 00:50:47.880
- Yep, bye everyone, bye Brian.

