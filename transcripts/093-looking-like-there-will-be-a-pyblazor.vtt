
00:00:00.000 --> 00:00:06.100
Hello and welcome to Python bites where we deliver Python news and headlines directly to your buds. This is episode


00:00:06.100 --> 00:00:08.960
93 recorded August 30th


00:00:08.960 --> 00:00:15.620
2018 I'm Michael Kennedy. I'm Brian. I can and Brian, you know last time we had some awesome drop the mic stuff


00:00:15.620 --> 00:00:21.160
I think we're gonna do it again, aren't we? Yeah, I think it's some some really interesting things today. Absolutely


00:00:21.160 --> 00:00:23.660
So before we get on to them, though


00:00:23.660 --> 00:00:29.280
I just want to say thanks to data dog data dog sponsoring the show check them out at Python bytes FM slash data dog


00:00:29.280 --> 00:00:31.280
I'll tell you more about that later.


00:00:31.280 --> 00:00:37.100
Brian, a lot of people get into programming, kind of in air quotes there, by doing scripting


00:00:37.100 --> 00:00:39.360
around like the shell and stuff, right?


00:00:39.360 --> 00:00:40.360
I think so.


00:00:40.360 --> 00:00:42.960
I think that's the way some people like in the IT world are.


00:00:42.960 --> 00:00:45.840
Like Bash or even bat files?


00:00:45.840 --> 00:00:48.880
Or lots of DevOps roles.


00:00:48.880 --> 00:00:49.880
Yeah, exactly.


00:00:49.880 --> 00:00:55.440
At the point where I learned Python, I was doing a lot of C++ development and writing


00:00:55.440 --> 00:00:59.680
little utility scripts in bash and Perl and stuff like that.


00:00:59.680 --> 00:01:05.080
And so one of the things that I did, you know, I want to try to learn Python by writing as


00:01:05.080 --> 00:01:07.060
much Python as I can.


00:01:07.060 --> 00:01:14.460
And so I started doing more and more, more and more of my utility scripts in Python.


00:01:14.460 --> 00:01:19.640
And so I think that was a good way to just try to jump in and solve, solve little problems.


00:01:19.640 --> 00:01:24.520
I could have written it faster in bash because I knew that or in Perl, but learning how to


00:01:24.520 --> 00:01:26.540
to do things in Python is good.


00:01:26.540 --> 00:01:29.160
So there's a, it's a GitHub repo that's called


00:01:29.160 --> 00:01:32.480
Replacing Bash Scripting with Python.


00:01:32.480 --> 00:01:35.800
And I think it goes through a lot of stuff,


00:01:35.800 --> 00:01:37.960
a lot of the issues that you'd need to do,


00:01:37.960 --> 00:01:40.760
that you'd normally write in the little utilities,


00:01:40.760 --> 00:01:42.280
and how to do that in Python.


00:01:42.280 --> 00:01:44.320
So this is fun.


00:01:44.320 --> 00:01:47.700
Talks about dealing with files, reading and writing files,


00:01:47.700 --> 00:01:49.680
dealing with standard in and standard out,


00:01:49.680 --> 00:01:51.480
standard error, things like that,


00:01:51.480 --> 00:01:54.040
and writing the command line utilities.


00:01:54.040 --> 00:01:56.520
- Yeah, things like dealing with exit codes,


00:01:56.520 --> 00:01:58.160
so if you shell out to some other process,


00:01:58.160 --> 00:02:00.020
you run a command knowing whether it failed


00:02:00.020 --> 00:02:01.000
or it worked, right?


00:02:01.000 --> 00:02:01.840
Things like that?


00:02:01.840 --> 00:02:04.600
- Yeah, and how to pipe between commands


00:02:04.600 --> 00:02:07.040
to, if you're gonna pull things together.


00:02:07.040 --> 00:02:09.080
And then, it doesn't jump into a lot of


00:02:09.080 --> 00:02:11.160
the really cool stuff with Python,


00:02:11.160 --> 00:02:12.840
but it's a good start.


00:02:12.840 --> 00:02:15.680
But it does, like, introduce people to the path library


00:02:15.680 --> 00:02:18.280
and sh, I don't know how you pronounce that,


00:02:18.280 --> 00:02:20.400
shoot-ill, S-H-U-T-ILL.


00:02:20.400 --> 00:02:21.640
And those are things.


00:02:21.640 --> 00:02:27.680
And then a lot of times you'll maybe using sed and awk and grep and things like that


00:02:27.680 --> 00:02:34.180
and how to go about replacing that sort of stuff with regular expressions with regex.


00:02:34.180 --> 00:02:35.880
And so this is just fun.


00:02:35.880 --> 00:02:40.520
I like it to be able to, if you're writing a little utility and it's up to you as to


00:02:40.520 --> 00:02:43.960
what language you write it in, this might help you write it in Python.


00:02:43.960 --> 00:02:44.960
It's cool.


00:02:44.960 --> 00:02:49.440
And I think one of the real key things to actually making programming stick when you're


00:02:49.440 --> 00:02:52.520
trying to learn it or even learning a new programming language, you know, some other


00:02:52.520 --> 00:02:57.580
kind of programming is to have what you're doing be relevant to you, right?


00:02:57.580 --> 00:03:02.240
And so if you work in a DevOps world and you're like, "Well, I'm going to go learn Python,


00:03:02.240 --> 00:03:06.200
so I'm going to do this data science project," that may be totally irrelevant to you.


00:03:06.200 --> 00:03:10.880
So having this as a resource for people who generally do scripting and automation type


00:03:10.880 --> 00:03:11.880
stuff, this is really cool.


00:03:11.880 --> 00:03:16.120
Yeah, and then also you're going to, the stuff you, when you're learning is stuff you start


00:03:16.120 --> 00:03:20.960
outriding isn't, just to be frank, and it's the same with everybody, it's not that great


00:03:20.960 --> 00:03:22.320
to start with.


00:03:22.320 --> 00:03:26.720
So starting small is good, so you don't have something huge to rewrite later.


00:03:26.720 --> 00:03:27.720
True.


00:03:27.720 --> 00:03:32.840
I guess a lot of people, I know I did one in the earlier days, went through the experience


00:03:32.840 --> 00:03:37.560
of going back and reading code I wrote six months ago and going, "Wow, that's bad."


00:03:37.560 --> 00:03:45.360
But then that same person who looked back badly on the old code, six months farther


00:03:45.360 --> 00:03:48.780
down the line, you look back and you're like, "Yep, that's bad too, just in a different


00:03:48.780 --> 00:03:49.780
way," right?


00:03:49.780 --> 00:03:50.780
But eventually, you get there.


00:03:50.780 --> 00:03:53.020
But yeah, having the small stuff definitely helps.


00:03:53.020 --> 00:03:57.420
And I've heard a lot of people that, like in a DevOps world, where they just, you know,


00:03:57.420 --> 00:04:02.900
you start writing like one or two of your scripts in Python, and then you can just add


00:04:02.900 --> 00:04:03.900
to it.


00:04:03.900 --> 00:04:06.820
As you learn more stuff, you can do more powerful things.


00:04:06.820 --> 00:04:12.540
And having, like you said, having it be relevant to your job is important for what you're doing,


00:04:12.540 --> 00:04:13.540
for learning.


00:04:13.540 --> 00:04:14.540
Yep.


00:04:14.540 --> 00:04:18.220
I'm glad you brought it up and I'm sure to help a ton of people. Now this next


00:04:18.220 --> 00:04:22.860
topic I'm pretty excited about. I'm honestly kind of beside myself about


00:04:22.860 --> 00:04:29.980
this one. This literally could be a game-changer. This is called Pi


00:04:29.980 --> 00:04:35.020
Iodide and I don't know if you've heard of it before. I had not heard of it until


00:04:35.020 --> 00:04:39.740
just beginning of this week I think actually. So Iodide is a project by


00:04:39.740 --> 00:04:44.940
Mozilla and it's sort of think of iodide is like a competitor to Jupyter notebooks


00:04:44.940 --> 00:04:50.260
where the concept of Jupyter notebooks is you have this web page and it's like


00:04:50.260 --> 00:04:55.020
a view into a Jupyter server and then when you execute code that code executes


00:04:55.020 --> 00:04:58.980
on the server which is a little sketchy because if you're letting people run


00:04:58.980 --> 00:05:02.540
arbitrary Python code on your server that's not amazing so maybe you're using


00:05:02.540 --> 00:05:06.140
like some sort of Docker thing to like spin them up and shut them down it gets


00:05:06.140 --> 00:05:11.620
complicated right? Yeah. Well Mozilla wants to make this environment


00:05:11.620 --> 00:05:15.500
available to everybody but in a distributed fashion. So the goal is to


00:05:15.500 --> 00:05:21.220
bring this environment to the browser and when you execute code it executes on


00:05:21.220 --> 00:05:26.420
your browser client side so you can do whatever you want. Well that's cool but


00:05:26.420 --> 00:05:30.820
the problem is a lot of people want to do data science in Python and Python


00:05:30.820 --> 00:05:37.340
Python, while it's had some JavaScript options for running code in the browser, they've always


00:05:37.340 --> 00:05:39.980
been like, well, you can kind of do this.


00:05:39.980 --> 00:05:42.300
And it's mostly like Python and so on.


00:05:42.300 --> 00:05:48.340
A while ago, as in two weeks ago, we asked the question of will there be a pie blazer?


00:05:48.340 --> 00:05:54.460
Remember blazer is the dotnet communities attempt to bring the dotnet CLR, their equivalent


00:05:54.460 --> 00:05:59.580
of CPython into the browser with WebAssembly and make it run there.


00:05:59.580 --> 00:06:00.840
And they're making that actually work,


00:06:00.840 --> 00:06:02.480
which was kind of blowing my mind


00:06:02.480 --> 00:06:03.980
and giving me a lot of hope that maybe,


00:06:03.980 --> 00:06:06.360
maybe somebody could do it for CPython, right?


00:06:06.360 --> 00:06:07.620
And what do you think, do you think it'll happen?


00:06:07.620 --> 00:06:09.380
- Well, it's a nice dream.


00:06:09.380 --> 00:06:10.960
- I agree, it's a nice dream.


00:06:10.960 --> 00:06:14.100
But sometimes dreams become reality, right?


00:06:14.100 --> 00:06:19.100
So PyIodide is an implementation,


00:06:19.100 --> 00:06:22.980
a running version of all of CPython,


00:06:22.980 --> 00:06:26.460
an exact bit of CPython, same thing,


00:06:26.460 --> 00:06:28.940
in the browser, in WebAssembly.


00:06:28.940 --> 00:06:30.700
- That's so cool.


00:06:30.700 --> 00:06:31.860
- Is that incredible or what?


00:06:31.860 --> 00:06:34.180
I mean, my mind is blown.


00:06:34.180 --> 00:06:37.940
So I reached out to one of the contributors, Michael D,


00:06:37.940 --> 00:06:42.940
and asked him, like, this is like really CPython


00:06:42.940 --> 00:06:45.500
running in WebAssembly in the browser.


00:06:45.500 --> 00:06:46.860
And he said, yeah, yeah.


00:06:46.860 --> 00:06:50.580
So Michael works for Mozilla, this is a Mozilla project,


00:06:50.580 --> 00:06:53.940
and they're trying to bring all of CPython,


00:06:53.940 --> 00:06:57.060
at least the data science part of it, into the browser.


00:06:57.060 --> 00:06:58.900
Now, there's a few things that it won't do,


00:06:58.900 --> 00:07:00.420
like you can't open a socket.


00:07:00.420 --> 00:07:02.140
Obviously, Tkinter doesn't work,


00:07:02.140 --> 00:07:03.820
'cause what does that mean in the browser, right?


00:07:03.820 --> 00:07:05.740
There's still, there's some parts of CPython


00:07:05.740 --> 00:07:10.060
that are not there, but if it's permitted in the browser,


00:07:10.060 --> 00:07:13.580
it's identical to CPython, and that, I think, is amazing.


00:07:13.580 --> 00:07:15.500
- That is amazing, I can't wait to play with this.


00:07:15.500 --> 00:07:17.780
- I can't either, and so they also wanna have


00:07:17.780 --> 00:07:20.540
the data science tooling there,


00:07:20.540 --> 00:07:23.580
and so things like NumPy, Matplotlib, and so on,


00:07:23.580 --> 00:07:26.380
they have heavy dependencies upon C,


00:07:26.380 --> 00:07:30.680
So you can't just bring it over and run it in this WebAssembly version of CPython.


00:07:30.680 --> 00:07:36.560
So you have to take the C code that supports things like NumPy and Matplotlib and get them


00:07:36.560 --> 00:07:39.800
to compile to WebAssembly themselves.


00:07:39.800 --> 00:07:40.800
So they've also done that.


00:07:40.800 --> 00:07:47.960
So you have native NumPy, native Matplotlib on native CPython client-side in the browser


00:07:47.960 --> 00:07:48.960
with WebAssembly.


00:07:48.960 --> 00:07:49.960
And it's fast.


00:07:49.960 --> 00:07:51.820
I'm still trying to get my head around this.


00:07:51.820 --> 00:07:52.820
How could it be fast?


00:07:52.820 --> 00:07:53.820
I know.


00:07:53.820 --> 00:07:57.460
I mean, it's like binary stuff executing, and it's also not that big, right?


00:07:57.460 --> 00:08:02.780
The download, I noticed using the web tools, when you go and interact with this page, it


00:08:02.780 --> 00:08:06.260
downloads like CPython.Wasm, right?


00:08:06.260 --> 00:08:09.460
The extension for WebAssembly, and it's 2.5 megs, right?


00:08:09.460 --> 00:08:14.260
And on my connection, that's like one and a half seconds to get that thing up and running.


00:08:14.260 --> 00:08:17.700
And then it doesn't have to parse it like it does like two megs of JavaScript.


00:08:17.700 --> 00:08:19.980
You don't make sense of that, right?


00:08:19.980 --> 00:08:22.900
Effectively compile it, it just takes it and runs it because it's already compiled.


00:08:22.900 --> 00:08:30.900
Okay, that's okay. So it's not nothing, but that's pretty not nothing, but it's it's not it's not that bad. And you know, you could cash.


00:08:30.900 --> 00:08:37.900
Somebody could set up a CDN for that thing and cash it like say Mozilla. Yeah, like say Mozilla.


00:08:37.900 --> 00:08:48.900
So I think it's awesome. I want to I want to just say thank you Mozilla and Michael and team for working on this because this this is amazing. And this could really, really change.


00:08:48.900 --> 00:08:54.340
it could really expand where Python is broadly applicable. Now I think it's worth pointing out


00:08:54.340 --> 00:09:02.020
that this generally is built with the concept of making data science work in the browser,


00:09:02.020 --> 00:09:06.980
right? Whereas this pie blazer thing, this blazer, my imaginary pie blazer thing that I made up,


00:09:06.980 --> 00:09:12.580
that was around building single page apps, more of the website of programming than the


00:09:12.580 --> 00:09:15.160
in the data science programming, site programming.


00:09:15.160 --> 00:09:18.500
But this thing does have extensions


00:09:18.500 --> 00:09:21.620
to let you work with HTML and the DOM


00:09:21.620 --> 00:09:23.160
and events and stuff like that.


00:09:23.160 --> 00:09:27.380
So you could, it's not a long shot to go from this


00:09:27.380 --> 00:09:31.420
to having an interactive, rich application


00:09:31.420 --> 00:09:33.020
for a web app in Python.


00:09:33.020 --> 00:09:36.260
- Yeah, so it's still not quite where we want,


00:09:36.260 --> 00:09:37.700
but like really cool.


00:09:37.700 --> 00:09:38.520
- It's really cool.


00:09:38.520 --> 00:09:39.920
And I mean, it's totally working


00:09:39.920 --> 00:09:41.420
for what they're trying to do,


00:09:41.420 --> 00:09:48.940
But I'm just thinking like if I want to say replace like a React thing or an AngularJS


00:09:48.940 --> 00:09:56.420
thing with Python, there might be a few more steps to get like that angle of stuff working.


00:09:56.420 --> 00:10:01.220
But it shouldn't be that far because we already have the CPython runtime working, which is


00:10:01.220 --> 00:10:03.700
really what you need and the integration with HTML.


00:10:03.700 --> 00:10:05.260
Yeah, so this is cool.


00:10:05.260 --> 00:10:07.820
I want a lot of people to grab this and run with it.


00:10:07.820 --> 00:10:11.220
Yeah, I think this really opens up the possibility for some amazing stuff.


00:10:11.220 --> 00:10:13.900
So once again, thank you, Mozilla.


00:10:13.900 --> 00:10:19.500
And I also I just want to reflect a little bit, I think it's really ironic or interesting


00:10:19.500 --> 00:10:22.380
coincidence at PyCon 2018.


00:10:22.380 --> 00:10:26.380
As we mentioned, when we talked about the Blazor thing, I think it was Tim Callahan,


00:10:26.380 --> 00:10:33.020
I'm still forgetting the name, but somebody from Mozilla came and gave an impassioned


00:10:33.020 --> 00:10:38.820
presentation as the opening keynote of, please, let's find a way to use WebAssembly to get


00:10:38.820 --> 00:10:44.180
Python more capable in the web space and specifically in the browser and client


00:10:44.180 --> 00:10:49.140
side and I think it's just pretty awesome that Mozilla, another team in


00:10:49.140 --> 00:10:54.180
Mozilla, actually is the one that implemented this. So that's really


00:10:54.180 --> 00:10:59.780
amazing. So these guys working on PyIodide, they may want to document their


00:10:59.780 --> 00:11:04.220
stuff, right? Yeah, you're so much better at the transition thing than I am. I'm


00:11:04.220 --> 00:11:06.260
I'm like, oh, next topic.


00:11:06.260 --> 00:11:08.500
I personally like Markdown.


00:11:08.500 --> 00:11:11.680
I write, even when I have to use,


00:11:11.680 --> 00:11:14.260
to be honest, when I have to use Microsoft Word,


00:11:14.260 --> 00:11:16.580
I write in Markdown and then I convert it to Word.


00:11:16.580 --> 00:11:19.380
Anyway, I don't know why I was talking about Word.


00:11:19.380 --> 00:11:21.380
So restructured text is not something


00:11:21.380 --> 00:11:23.180
that comes naturally to me,


00:11:23.180 --> 00:11:25.340
but there's a lot of Python documentation


00:11:25.340 --> 00:11:27.260
that's written in restructured text.


00:11:27.260 --> 00:11:30.940
So if you're gonna contribute to an existing project,


00:11:30.940 --> 00:11:34.300
you can't say, well, I can't do any of the documentation


00:11:34.300 --> 00:11:35.960
'cause it's all in restructured text.


00:11:35.960 --> 00:11:36.800
Convert it to Markdown.


00:11:36.800 --> 00:11:37.740
- Just use Markdown.


00:11:37.740 --> 00:11:39.860
No, we're not rewriting all of this in Markdown.


00:11:39.860 --> 00:11:42.260
- Right, so whether or not you like it,


00:11:42.260 --> 00:11:45.520
restructured text is part of the Python world.


00:11:45.520 --> 00:11:47.660
So this is a wonderful,


00:11:47.660 --> 00:11:50.660
there's a wonderful article from Simon Will,


00:11:50.660 --> 00:11:52.060
oh, I always had his name wrong.


00:11:52.060 --> 00:11:55.300
I always thought it was Wilson, but it's Simon Willison.


00:11:55.300 --> 00:11:58.740
A subset of restructured text worth committing to memory.


00:11:58.740 --> 00:12:04.740
And that's a noble goal, but instead of committing it to memory, I'm just going to bookmark this article.


00:12:04.740 --> 00:12:08.740
But he's got the necessary things for easy documentation.


00:12:08.740 --> 00:12:14.740
You have paragraphs, headings, bulleted lists, how to do italics and things like that.


00:12:14.740 --> 00:12:24.740
And then, of course, for documenting code, you need how to do inline code and code snippets and images and internal references and things like that.


00:12:24.740 --> 00:12:31.380
And there's a lot covered here, but one of the issues that I always had was like the


00:12:31.380 --> 00:12:34.100
tutorials on restructured text.


00:12:34.100 --> 00:12:37.900
Restructured text can do a lot, and it's kind of overwhelming, and you don't need all of


00:12:37.900 --> 00:12:42.340
that to understand enough to help document a Python project.


00:12:42.340 --> 00:12:43.340
So this is great.


00:12:43.340 --> 00:12:44.340
Yeah, it's cool.


00:12:44.340 --> 00:12:46.540
These are the five or six things you need.


00:12:46.540 --> 00:12:50.740
Headings, links, bulleted list, numerical list, images, things like that, right?


00:12:50.740 --> 00:12:52.500
Yeah, and then how to get your code in there.


00:12:52.500 --> 00:12:53.500
Yeah, exactly.


00:12:53.500 --> 00:12:54.500
It's great.


00:12:54.500 --> 00:12:59.380
I'm gonna make use of this the one that you're sharing here because I'm working on a project where I have to write a lot


00:12:59.380 --> 00:13:00.980
of restructured text and


00:13:00.980 --> 00:13:04.500
Yeah, I basically have doubled my knowledge of restructured text by reading that


00:13:04.500 --> 00:13:12.260
Yeah, and I mean cuz like you I do markdown most the time so most to be honest most of the time when I needed


00:13:12.260 --> 00:13:14.500
To do something in restructured text


00:13:14.500 --> 00:13:19.940
I would just find somebody else that did something like that and copy it and not know why I was doing these things


00:13:19.940 --> 00:13:23.380
So having a little little primer and tutorial it's good


00:13:23.380 --> 00:13:29.380
Yeah, it's great. Speaking of finding things, let's talk about Datadog really quick. So


00:13:29.380 --> 00:13:34.900
if you have issues, performance problems, bugs, things like that with your application,


00:13:34.900 --> 00:13:40.100
you should check out Datadog. So they're sponsoring this episode. And it's a monitoring platform


00:13:40.100 --> 00:13:44.500
that brings together metrics, logs, request traces, all in one place. And they have this


00:13:44.500 --> 00:13:50.020
new feature called trace search and analytics. And it lets you break down the usage of your


00:13:50.020 --> 00:13:55.900
Python app around performance for things like show me all of the operations that


00:13:55.900 --> 00:14:00.220
this customer or this user did or all the requests that go to this URL and


00:14:00.220 --> 00:14:03.660
aggregate the performance of that which is pretty awesome. So start


00:14:03.660 --> 00:14:07.820
troubleshooting optimizing your Python apps today with a free trial and Datadog


00:14:07.820 --> 00:14:11.260
will send you a free cute little t-shirt so check them out at


00:14:11.260 --> 00:14:15.540
pythonbytes.fm/datadog. So I have a theme for the rest of this rest of the


00:14:15.540 --> 00:14:20.620
items I've chosen Brian. Okay. So have you ever heard that some software has like


00:14:20.620 --> 00:14:25.980
security problems people can break into it? Yeah. You know even though Python's


00:14:25.980 --> 00:14:30.260
not compiled, the Python code can have it too right? I assume so yeah. Well our


00:14:30.260 --> 00:14:35.940
friend Anthony Shaw told us about this cool projects little app you can run


00:14:35.940 --> 00:14:39.780
this so they're really a linter basically you run against your program


00:14:39.780 --> 00:14:45.420
called Bandit. Okay. So Bandit is designed to find common security issues in Python


00:14:45.420 --> 00:14:52.340
on code. So what it does is you point it at your project and it'll load up each


00:14:52.340 --> 00:14:58.460
file into an abstract syntax tree, run a bunch of analysis over that AST, and then


00:14:58.460 --> 00:15:02.200
it'll generate a report. And it'll tell you things like you're misusing the


00:15:02.200 --> 00:15:06.420
telnet lib, or you're using eval, or you're doing try except pass and eating


00:15:06.420 --> 00:15:12.700
errors. Opening a sub process with P open with shell equals true. I actually don't


00:15:12.700 --> 00:15:15.740
know what's wrong with that, but I should probably figure that out. Yeah. But


00:15:15.740 --> 00:15:20.820
apparently it's bad. Shouldn't do it. And that's error 602. So it'll tell you, you


00:15:20.820 --> 00:15:24.420
know, for example, like I wouldn't know that that's necessarily bad. I know I've


00:15:24.420 --> 00:15:28.300
heard it before, but I don't remember why it's bad. So it's pretty cool. And it


00:15:28.300 --> 00:15:33.340
just has a whole bunch of errors it'll find and, you know, security lapses it'll


00:15:33.340 --> 00:15:36.500
find and tell you about them. So this is something that you, it's like a static


00:15:36.500 --> 00:15:40.540
analysis. It's not, it's not running your code. It's looking at... No, it's, it's


00:15:40.540 --> 00:15:42.300
- Static, yeah, it's static analysis.


00:15:42.300 --> 00:15:43.240
- Oh, that's cool.


00:15:43.240 --> 00:15:44.080
- Yeah, isn't that nice?


00:15:44.080 --> 00:15:44.900
- Yeah, neat.


00:15:44.900 --> 00:15:46.700
- Yeah, it's like, I see you did a try, accept,


00:15:46.700 --> 00:15:48.500
and you just ate that error,


00:15:48.500 --> 00:15:51.700
and that can actually cause other types of problems,


00:15:51.700 --> 00:15:53.260
like maybe you should have validated something,


00:15:53.260 --> 00:15:55.100
but instead you just keep going, things like that.


00:15:55.100 --> 00:15:56.820
- So this might be good even for non,


00:15:56.820 --> 00:16:00.060
I mean, it's definitely important for Python projects


00:16:00.060 --> 00:16:05.060
that have an interface to the web or a web application,


00:16:05.060 --> 00:16:08.420
but you could use this for a lot of stuff, not just that.


00:16:08.420 --> 00:16:09.620
- Sure.


00:16:09.620 --> 00:16:11.060
- Yeah, yeah, it definitely lets you know


00:16:11.060 --> 00:16:13.620
when you're doing things wrong in like a different category,


00:16:13.620 --> 00:16:14.980
say, than probably Flake 8.


00:16:14.980 --> 00:16:15.980
- Yeah, neat.


00:16:15.980 --> 00:16:17.180
- Yeah, and because it's, you know,


00:16:17.180 --> 00:16:18.860
you can easily integrate this type of thing


00:16:18.860 --> 00:16:21.180
into a continuous build integration pipeline.


00:16:21.180 --> 00:16:23.940
- Yeah, I'll definitely have to check this out.


00:16:23.940 --> 00:16:24.780
Cool.


00:16:24.780 --> 00:16:25.820
- Yeah, this is, it even probably has


00:16:25.820 --> 00:16:27.140
a little testing angle to it somehow.


00:16:27.140 --> 00:16:28.820
- Maybe, yeah.


00:16:28.820 --> 00:16:30.100
- Maybe, awesome.


00:16:30.100 --> 00:16:31.100
All right, what you got next for us?


00:16:31.100 --> 00:16:33.540
- Well, last week we talked about


00:16:33.540 --> 00:16:35.660
what Netflix was up to with Jupyter Notebooks.


00:16:35.660 --> 00:16:39.140
So I was, and I mentioned that I've kind of been


00:16:39.140 --> 00:16:41.020
trying to learn more about them.


00:16:41.020 --> 00:16:45.580
So one of the, we had somebody submit another,


00:16:45.580 --> 00:16:49.620
it's another repo, but it's a whole bunch of notebooks.


00:16:49.620 --> 00:16:54.300
So it's a, what he's put together is learn Python three,


00:16:54.300 --> 00:16:56.280
I think I've got the wrong link here,


00:16:56.280 --> 00:16:59.340
learn Python three with a Jupyter notebook.


00:16:59.340 --> 00:17:01.700
And so I was actually playing with this this morning


00:17:01.700 --> 00:17:03.400
and it was just a blast.


00:17:03.400 --> 00:17:06.300
So we have, it's got beginner


00:17:06.300 --> 00:17:08.740
and intermediate Python concepts.


00:17:08.740 --> 00:17:11.580
And you just sort of like can walk through it.


00:17:11.580 --> 00:17:13.540
And one of the things I had to learn, of course,


00:17:13.540 --> 00:17:17.380
is to, at first, is just to how to do this.


00:17:17.380 --> 00:17:21.060
How do you clone the, I cloned the repo and just ran,


00:17:21.060 --> 00:17:25.300
and then installed Jupyter and then ran the,


00:17:25.300 --> 00:17:26.580
just say, what is it?


00:17:26.580 --> 00:17:28.560
You just say Jupyter Notebook or something,


00:17:28.560 --> 00:17:30.600
and it opens up a web browser.


00:17:30.600 --> 00:17:33.260
And then you can click different notebooks and run them


00:17:33.260 --> 00:17:35.380
and see what they do.


00:17:35.380 --> 00:17:37.180
And the thing that really intrigued me,


00:17:37.180 --> 00:17:40.560
that the bone that he put in there for me to try to grab is,


00:17:40.560 --> 00:17:43.200
there's two topics on testing.


00:17:43.200 --> 00:17:45.720
I've been asked this before of like,


00:17:45.720 --> 00:17:50.480
can you run pytest within a notebook?


00:17:50.480 --> 00:17:52.640
I didn't know if you could or not,


00:17:52.640 --> 00:17:56.200
I heard rumors, but there's two examples in here of


00:17:56.200 --> 00:17:59.440
how to notebooks that have tests embedded in them.


00:17:59.440 --> 00:18:05.120
So you can define a function or something in


00:18:05.120 --> 00:18:09.560
a different cell and then write a test for it in another cell.


00:18:09.560 --> 00:18:14.760
I think that's really cool and I had no idea how to run pytest either in there and I always


00:18:14.760 --> 00:18:18.320
sort of saw that as like one of the weaknesses of notebooks.


00:18:18.320 --> 00:18:21.560
I have lots of respect for them but one of the things I don't really like is it's hard


00:18:21.560 --> 00:18:28.400
to do like how do I run tests against this code, how do I get a code coverage report


00:18:28.400 --> 00:18:31.120
of the code my Jupyter notebook is doing, things like that.


00:18:31.120 --> 00:18:35.340
It seemed much easier when you have a set of files that you can like call directly. Yeah


00:18:35.340 --> 00:18:40.820
And I'm still not so this is running pytest within the notebook and I'm not I think there's also a way


00:18:40.820 --> 00:18:48.000
I haven't figured out yet to take a notebook and run if there's tests inside of it run the run tests against it


00:18:48.000 --> 00:18:52.800
Yeah, there may be in the stuff that Netflix talked about last week allow you to basically


00:18:52.800 --> 00:18:59.160
Take a notebook and execute it as if it were a function with an input and an output and like that in some sense would


00:18:59.160 --> 00:19:02.160
open up a testing angle by itself, right?


00:19:02.160 --> 00:19:07.160
Definitely, and especially if you save the output somewhere, that'd be great.


00:19:07.160 --> 00:19:10.160
Anyway, it was just really fun. It's fun to look around.


00:19:10.160 --> 00:19:14.160
The other thing that I like as an example is


00:19:14.160 --> 00:19:18.160
there's the examples of how to do pip install within a notebook.


00:19:18.160 --> 00:19:22.160
It has those at the top because it doesn't assume that you've installed pytest to begin with.


00:19:22.160 --> 00:19:23.160
Oh yeah, that's cool.


00:19:23.160 --> 00:19:24.160
And it shows that.


00:19:24.160 --> 00:19:31.440
And then it's using another pip installable package called the Ipytest, which is how it's


00:19:31.440 --> 00:19:33.400
running pytest within the notebook.


00:19:33.400 --> 00:19:34.400
So it's cool.


00:19:34.400 --> 00:19:35.400
That is really cool.


00:19:35.400 --> 00:19:36.400
Nice find.


00:19:36.400 --> 00:19:37.400
All right, last one.


00:19:37.400 --> 00:19:38.680
I said I was on a bit of a theme.


00:19:38.680 --> 00:19:40.360
So we talked about bandit.


00:19:40.360 --> 00:19:47.520
And bandit lets you find code that is being either using a bad library or is using a bad


00:19:47.520 --> 00:19:50.740
pattern like tracks a pass, things like that.


00:19:50.740 --> 00:19:56.580
This next one takes a different angle on the same sort of problem around security and integrity


00:19:56.580 --> 00:19:57.580
of your application.


00:19:57.580 --> 00:20:00.620
And it's called detect secrets.


00:20:00.620 --> 00:20:06.700
So their sort of tagline there is an enterprise friendly way of detecting and preventing secrets


00:20:06.700 --> 00:20:07.700
in code.


00:20:07.700 --> 00:20:10.700
And this is actually released from Yelp.


00:20:10.700 --> 00:20:17.220
So on one hand, like using code badly, that's a problem, but also put hard coding passwords


00:20:17.220 --> 00:20:21.660
And other things like that into your code can be a problem, right?


00:20:21.660 --> 00:20:23.060
Yeah, definitely.


00:20:23.060 --> 00:20:29.300
And so the enterprise friendly aspect, I think, comes from the fact that it says, all right,


00:20:29.300 --> 00:20:31.580
look, we assume that your code is just messed up.


00:20:31.580 --> 00:20:34.020
There's all sorts of badness in here.


00:20:34.020 --> 00:20:37.660
What do you do if you're you find yourself in a hole, and things keep getting worse,


00:20:37.660 --> 00:20:40.940
you know, first thing you do is stop digging, right before you get out of the hole, you


00:20:40.940 --> 00:20:42.620
just stop making it worse.


00:20:42.620 --> 00:20:48.060
So there's a lot of mechanisms in detect secrets to say, let's not make this worse.


00:20:48.060 --> 00:20:51.860
Let's prevent new secrets from going into the code base.


00:20:51.860 --> 00:20:55.620
Now we can start to peel off like start to like remove some of these things that are


00:20:55.620 --> 00:20:57.100
hard coded in there.


00:20:57.100 --> 00:21:02.460
But let's go and set a baseline and go alright, if we get any new detections of secrets being


00:21:02.460 --> 00:21:04.060
entered, that's going to fail the build.


00:21:04.060 --> 00:21:06.420
But the way it is now we're going to accept it.


00:21:06.420 --> 00:21:10.220
And then we can like make pass after pass to actually take away some of those and reset


00:21:10.220 --> 00:21:11.220
the baseline.


00:21:11.220 --> 00:21:12.220
Okay, interesting.


00:21:12.220 --> 00:21:31.220
Yeah, it's pretty also pretty much some things that look like they're secrets that should be detected, but you've inspected the code and said no, this one's fine. Yeah, exactly. And that baseline thing will let you say I approve of these, but not anything else. Yeah, cool, which is pretty cool. And they also show you how to set it up as a git commit hook.


00:21:31.220 --> 00:21:35.560
So as you know from the testing space, one of the challenges is like you can


00:21:35.560 --> 00:21:40.280
have awesome tests but if no one runs them or worse, one or two people on the


00:21:40.280 --> 00:21:44.560
team are very passionate about them and a whole bunch of other people hate them


00:21:44.560 --> 00:21:48.200
and refuse to run them no matter how much you talk about it. The people who


00:21:48.200 --> 00:21:54.080
care about the tests suffer from the neglect that the people who explicitly


00:21:54.080 --> 00:21:57.320
ignore it, right? Maybe that person enters some problem that'll fail a test but


00:21:57.320 --> 00:22:00.760
they don't run their tests so they don't know. You get it, you try to run your


00:22:00.760 --> 00:22:02.920
test and then you're hit with their problems as well, right?


00:22:02.920 --> 00:22:07.680
So this Git commit hook here basically means everyone on the


00:22:07.680 --> 00:22:11.120
team is going to be basically running this as part of a


00:22:11.120 --> 00:22:11.440
check-in.


00:22:11.440 --> 00:22:14.360
The whole idea around Git commit hooks is interesting.


00:22:14.360 --> 00:22:17.480
There's a lot of interesting things people are doing, like


00:22:17.480 --> 00:22:21.800
making sure that, like there's a plaque has a Git commit hook as


00:22:21.800 --> 00:22:23.040
part of it or attached to it.


00:22:23.040 --> 00:22:25.160
So people can make sure their code is still black before they


00:22:25.160 --> 00:22:25.640
check it in.


00:22:25.640 --> 00:22:27.320
Yeah, that's the one I was thinking of as well.


00:22:27.320 --> 00:22:32.560
And it can even like automatically reformat your code to the groups format as part of


00:22:32.560 --> 00:22:33.560
the check in, right?


00:22:33.560 --> 00:22:37.480
I'd be curious to know if there's any other, I'd like to have people let us know if there's


00:22:37.480 --> 00:22:42.120
other Git commit hooks that we haven't talked about that are helping their teams out.


00:22:42.120 --> 00:22:43.600
Maybe they help other people out too.


00:22:43.600 --> 00:22:47.440
So yeah, it'd be fun to collect like a list of use cases of what people are doing.


00:22:47.440 --> 00:22:48.440
Yeah, yeah.


00:22:48.440 --> 00:22:53.480
If you're doing some cool to get commit hook, check out Python bytes, FM slash 93 and put


00:22:53.480 --> 00:22:54.480
a comment at the bottom.


00:22:54.480 --> 00:22:55.920
that'll be in the show notes,


00:22:55.920 --> 00:22:59.040
sort of below the show notes for everyone to come see.


00:22:59.040 --> 00:23:01.680
All right, well, that's all of our items for this week.


00:23:01.680 --> 00:23:04.000
Brian, you got anything personal you wanna share


00:23:04.000 --> 00:23:04.840
before we're out of here?


00:23:04.840 --> 00:23:08.480
>> No, I guess pytest came out with a new version


00:23:08.480 --> 00:23:11.920
the other day, which was kind of blew me away


00:23:11.920 --> 00:23:15.080
because I had submitted a very minor bug,


00:23:15.080 --> 00:23:18.040
but I had submitted a bug to the project.


00:23:18.040 --> 00:23:20.300
And I only submitted it like five days ago,


00:23:20.300 --> 00:23:22.960
and it's already now in a fixed and in a release.


00:23:22.960 --> 00:23:24.400
So that's amazing.


00:23:24.400 --> 00:23:26.000
- That's a really good turnaround time, that's awesome.


00:23:26.000 --> 00:23:27.760
- Yeah, that's fun.


00:23:27.760 --> 00:23:29.400
Anything with you, got any news?


00:23:29.400 --> 00:23:30.600
- Nothing I'm ready to talk about.


00:23:30.600 --> 00:23:32.600
I'm working on a couple of new projects,


00:23:32.600 --> 00:23:35.200
one that I'm doing restructured text for,


00:23:35.200 --> 00:23:38.200
couple of new courses are coming down the pipe,


00:23:38.200 --> 00:23:41.200
things like that, but nothing ready to talk about just yet.


00:23:41.200 --> 00:23:42.040
- All right.


00:23:42.040 --> 00:23:43.720
- So how's that for a long-winded no?


00:23:43.720 --> 00:23:45.880
(laughing)


00:23:45.880 --> 00:23:47.000
- Well, it was fun talking to you.


00:23:47.000 --> 00:23:48.920
- Yeah, you as well, and thanks for everything,


00:23:48.920 --> 00:23:49.760
and see you later.


00:23:49.760 --> 00:23:50.720
- All right, bye.


00:23:50.720 --> 00:23:52.480
- Thank you for listening to Python Bytes.


00:23:52.480 --> 00:23:58.280
Follow the show on Twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S.


00:23:58.280 --> 00:24:01.580
And get the full show notes at pythonbytes.fm.


00:24:01.580 --> 00:24:05.280
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:24:05.280 --> 00:24:06.280
way.


00:24:06.280 --> 00:24:08.780
We're always on the lookout for sharing something cool.


00:24:08.780 --> 00:24:12.240
On behalf of myself and Brian Auchin, this is Michael Kennedy.


00:24:12.240 --> 00:24:15.280
Thank you for listening and sharing this podcast with your friends and colleagues.

