
00:00:00.000 --> 00:00:03.500
Hello and welcome to episode 2 of Python Bytes.


00:00:03.500 --> 00:00:08.500
Here we're going to cover the headlines for November 14th, 2016.


00:00:08.500 --> 00:00:11.500
And I want to start not with a headline but with a thank you.


00:00:11.500 --> 00:00:17.000
The reception to our first episode and the launch of this podcast has been really amazing.


00:00:17.000 --> 00:00:23.500
There's been thousands of downloads and tons of feedback on Twitter about how you guys really appreciate the format,


00:00:23.500 --> 00:00:28.500
you appreciate Brian and myself working together as a co-host and keeping it fun.


00:00:28.500 --> 00:00:30.300
And so I just want to say thanks.


00:00:30.300 --> 00:00:31.100
Thanks for listening.


00:00:31.100 --> 00:00:32.100
Thanks for subscribing.


00:00:32.100 --> 00:00:34.820
And I really like all the feedback on Twitter.


00:00:34.820 --> 00:00:37.260
And it's been good.


00:00:37.260 --> 00:00:41.420
So I'm going to start it off with the first headline is


00:00:41.420 --> 00:00:42.100
actually a few.


00:00:42.100 --> 00:00:44.540
We've had a few releases this past week that I thought were


00:00:44.540 --> 00:00:45.740
interesting.


00:00:45.740 --> 00:00:48.260
Celery came out with a 4.0 release.


00:00:48.260 --> 00:00:50.020
And it is a huge release.


00:00:50.020 --> 00:00:52.060
I don't personally use Celery.


00:00:52.060 --> 00:00:57.180
But I know it's used a lot in Django and other projects.


00:00:57.180 --> 00:00:58.380
And so check it out.


00:00:58.380 --> 00:01:03.580
Yeah, basically the idea with Celery is there's a lot of long-running tasks and you don't


00:01:03.580 --> 00:01:07.140
want to tie up your web apps while that's running.


00:01:07.140 --> 00:01:09.300
You'd like to kick them off to the background too.


00:01:09.300 --> 00:01:14.460
It's a way to do sort of queue up offline asynchronous things to be scheduled and run


00:01:14.460 --> 00:01:15.460
in the background.


00:01:15.460 --> 00:01:18.640
It's really excellent, especially for web apps, but for a lot of systems.


00:01:18.640 --> 00:01:20.300
So that was my question.


00:01:20.300 --> 00:01:23.020
Can it be used for things other than web apps then?


00:01:23.020 --> 00:01:24.580
Yes, it can.


00:01:24.580 --> 00:01:27.940
So one thing that comes to mind, although there's many,


00:01:27.940 --> 00:01:30.540
there's just the one that I think I remember hearing about


00:01:30.540 --> 00:01:33.380
is the mutation testing framework


00:01:33.380 --> 00:01:37.060
that Austin Bingham and a crew are working on.


00:01:37.060 --> 00:01:40.440
I believe they would parse your code


00:01:40.440 --> 00:01:41.660
that's supposed to be tested,


00:01:41.660 --> 00:01:43.640
and then they would come up with a bunch of tests


00:01:43.640 --> 00:01:45.900
that are supposed to be run over different,


00:01:45.900 --> 00:01:47.060
it's not just executing code,


00:01:47.060 --> 00:01:49.460
but it's actually mutating your source code,


00:01:49.460 --> 00:01:50.660
and all sorts of crazy stuff.


00:01:50.660 --> 00:01:52.460
They would kick those off to celery cues


00:01:52.460 --> 00:01:54.400
and then just wait for them to be finished.


00:01:54.400 --> 00:01:55.680
- Oh, okay, cool.


00:01:55.680 --> 00:01:58.400
I definitely have to check that out.


00:01:58.400 --> 00:02:00.980
But this release is supposedly the last major release


00:02:00.980 --> 00:02:02.480
for 2x support.


00:02:02.480 --> 00:02:06.160
It'll be 3.5 and above after this, so interesting.


00:02:06.160 --> 00:02:07.680
- That's actually super interesting, yeah,


00:02:07.680 --> 00:02:09.640
and plus one.


00:02:09.640 --> 00:02:11.780
My vote is plus one for that, well done.


00:02:11.780 --> 00:02:14.320
- Yeah, the next one is a little bit more,


00:02:14.320 --> 00:02:17.280
I think it may be a lot of IT people.


00:02:17.280 --> 00:02:20.880
PSUtil is a tool for process monitoring,


00:02:20.880 --> 00:02:23.520
system utilization, things like that.


00:02:23.520 --> 00:02:31.120
We actually use it in my job and it came out with a 5.0.0 release,


00:02:31.120 --> 00:02:35.120
but he claims that it's twice as fast as before.


00:02:35.120 --> 00:02:37.120
Excellent.


00:02:37.120 --> 00:02:42.120
And last up is a bug fix release from pytest 304.


00:02:42.120 --> 00:02:46.520
And mostly bug fixes, but one of the nice new features is


00:02:46.520 --> 00:02:50.320
they now report the teardown output on test failures.


00:02:50.320 --> 00:02:55.520
They already, on test failures, it already reports the output for setup.


00:02:55.520 --> 00:02:56.840
So that's a nice completion.


00:02:56.840 --> 00:02:58.280
Yeah, very nice.


00:02:58.280 --> 00:03:03.720
And the whole testing thing is going to make an appearance later as well in the headlines.


00:03:03.720 --> 00:03:08.240
So the first one that I have, this one I really want to encourage you to take action right


00:03:08.240 --> 00:03:09.240
away.


00:03:09.240 --> 00:03:14.000
Registration for PyCon US 2017 is open.


00:03:14.000 --> 00:03:20.720
Last year, PyCon US in Portland was such a great event that was so much good energy.


00:03:20.720 --> 00:03:26.240
I personally made so many good connections and just really, really enjoyed being there.


00:03:26.240 --> 00:03:32.840
It was a few months before PyCon 2016 kicked off that people would send me messages and


00:03:32.840 --> 00:03:35.520
say, "Michael, I really want to go to PyCon, but I don't have a ticket.


00:03:35.520 --> 00:03:36.640
They're sold out.


00:03:36.640 --> 00:03:38.600
Could you help me get in?"


00:03:38.600 --> 00:03:40.640
And once it's sold out, it's sold out.


00:03:40.640 --> 00:03:43.480
So, they're still doing early bird registration,


00:03:43.480 --> 00:03:45.320
which means you get a little bit of a discount.


00:03:45.320 --> 00:03:49.560
They've got like individual, corporate, and student levels


00:03:49.560 --> 00:03:50.840
with the discount and so on.


00:03:50.840 --> 00:03:51.840
So, get over there.


00:03:51.840 --> 00:03:56.040
It's us.pycon.org/2017/registration.


00:03:56.040 --> 00:03:58.160
- I can't say that enough, man.


00:03:58.160 --> 00:03:59.440
Register now if you can.


00:03:59.440 --> 00:04:00.760
I tried last year.


00:04:00.760 --> 00:04:03.360
I waited too long and didn't get a ticket.


00:04:03.360 --> 00:04:05.780
And it was really painful to live in the town


00:04:05.780 --> 00:04:08.360
where it's going on and not be able to go.


00:04:08.360 --> 00:04:11.560
- Yes, I'm sure that was really, really painful.


00:04:11.560 --> 00:04:12.400
Super unfortunate.


00:04:12.400 --> 00:04:16.320
So don't be in Brian's former self's boat.


00:04:16.320 --> 00:04:17.560
Get your tickets now.


00:04:17.560 --> 00:04:20.420
And if that's not enough of an encouragement,


00:04:20.420 --> 00:04:24.260
we're having a podcast community booth, right Brian?


00:04:24.260 --> 00:04:25.960
- Yeah, it's gonna be great.


00:04:25.960 --> 00:04:28.480
It's gonna be you and me and the--


00:04:28.480 --> 00:04:30.600
- Got the podcast in it.


00:04:30.600 --> 00:04:32.960
Yeah, I got the podcast in it guys.


00:04:32.960 --> 00:04:34.680
And the partially derivative folks


00:04:34.680 --> 00:04:37.000
for the data science podcast angle.


00:04:37.000 --> 00:04:39.200
- Yeah, you know, I just start, because of this,


00:04:39.200 --> 00:04:42.560
I just started listening to the Partially Derivative,


00:04:42.560 --> 00:04:43.880
and that's a pretty neat podcast.


00:04:43.880 --> 00:04:44.840
- Yeah, those guys are good.


00:04:44.840 --> 00:04:46.520
Those guys are definitely good.


00:04:46.520 --> 00:04:48.020
- But it'll be good to meet everybody up,


00:04:48.020 --> 00:04:50.520
and then everybody else can come by and say hi to us.


00:04:50.520 --> 00:04:51.360
So that'll be good.


00:04:51.360 --> 00:04:53.640
- Yep, so go register straight away.


00:04:53.640 --> 00:04:55.560
What's your second one, Brian?


00:04:55.560 --> 00:04:58.000
- Well, this is just a follow-up of that.


00:04:58.000 --> 00:05:02.600
The PyCon tutorial proposals for this 2017 PyCon


00:05:02.600 --> 00:05:04.560
are due at the end of the month.


00:05:04.560 --> 00:05:06.960
And so please don't hesitate,


00:05:06.960 --> 00:05:09.400
the tutorial's coming up at the end of the month.


00:05:09.400 --> 00:05:14.200
Proposals for talks and posters are due,


00:05:14.200 --> 00:05:15.660
you've got until January 3rd,


00:05:15.660 --> 00:05:18.060
but I would recommend getting those early in


00:05:18.060 --> 00:05:21.840
because I've heard that if you get 'em in early,


00:05:21.840 --> 00:05:23.360
sometimes you get some help


00:05:23.360 --> 00:05:25.360
if there's a few problems with it.


00:05:25.360 --> 00:05:27.840
Have you given a talk at PyCon before?


00:05:27.840 --> 00:05:29.800
- Not a stand-up on stage talk,


00:05:29.800 --> 00:05:34.360
although last year Tobias Macy and I did an open session


00:05:34.360 --> 00:05:35.920
for podcasts.


00:05:35.920 --> 00:05:38.120
You know, we had about 25 or 30 people come


00:05:38.120 --> 00:05:39.000
and give their feedback,


00:05:39.000 --> 00:05:41.400
where they'd like to see the direction of the podcast go.


00:05:41.400 --> 00:05:46.180
And with us having five podcasts and hosts and so on


00:05:46.180 --> 00:05:48.480
featured there, I think we definitely need to plan


00:05:48.480 --> 00:05:51.720
an open session and some kind of little community event


00:05:51.720 --> 00:05:53.340
around the podcast while we're there.


00:05:53.340 --> 00:05:56.080
So, you know, there's like an open session board


00:05:56.080 --> 00:05:58.480
and we'll let you know and keep your eye on that.


00:05:58.480 --> 00:06:00.480
- Okay, well I think I'll submit a talk.


00:06:00.480 --> 00:06:01.920
I think it'd be fun to talk there.


00:06:01.920 --> 00:06:03.400
- Yeah, I'm sure it would be.


00:06:03.400 --> 00:06:05.920
- Okay, Michael, what's your number two?


00:06:05.920 --> 00:06:08.120
- You know, Python's pretty awesome, right?


00:06:08.120 --> 00:06:08.960
- Yeah, definitely.


00:06:08.960 --> 00:06:09.800
- It's pretty awesome.


00:06:09.800 --> 00:06:12.160
So somebody actually made a GitHub project


00:06:12.160 --> 00:06:15.840
that was basically classifying, enumerating the ways


00:06:15.840 --> 00:06:17.380
in which Python is awesome.


00:06:17.380 --> 00:06:20.720
And it's simply called awesome-python.


00:06:20.720 --> 00:06:23.200
And what it is, is it's a curated list


00:06:23.200 --> 00:06:26.440
of awesome Python frameworks, libraries,


00:06:26.440 --> 00:06:28.160
software, and resources.


00:06:28.160 --> 00:06:29.880
You know, a lot of times people ask me,


00:06:29.880 --> 00:06:31.960
they'll send me an email or hit me up on Twitter


00:06:31.960 --> 00:06:36.840
say hey Michael I'm trying to do like this thing and I know there's something


00:06:36.840 --> 00:06:40.280
like that in this other language but is there something like that in Python


00:06:40.280 --> 00:06:43.680
should I build something like that and so on this is really cool because you


00:06:43.680 --> 00:06:47.080
can go in and it's basically categorized by area so you can go in there's a


00:06:47.080 --> 00:06:51.880
section on like authentication libraries data validation libraries date time


00:06:51.880 --> 00:06:55.960
utilities debugging tools machine learning search like it goes on and on


00:06:55.960 --> 00:07:00.640
and on and so if you're trying to discover the best library in one of


00:07:00.640 --> 00:07:03.000
of these areas, this is a pretty cool place to start.


00:07:03.000 --> 00:07:05.920
So it's on GitHub, and I'll link it in the show notes.


00:07:05.920 --> 00:07:09.480
- Now is it the same as the Awesome Python newsletter?


00:07:09.480 --> 00:07:10.440
Is that the same people?


00:07:10.440 --> 00:07:14.400
- I believe it's the same, but I'm not 100% sure.


00:07:14.400 --> 00:07:18.000
- I checked it out, there's a ton of stuff there.


00:07:18.000 --> 00:07:20.000
- Yeah, you definitely gotta explore it.


00:07:20.000 --> 00:07:24.480
- Okay, well next up we've got a blog post called


00:07:24.480 --> 00:07:27.720
Timing Tests in Python for Fun and Profit.


00:07:27.720 --> 00:07:32.000
And I'm a sucker for fun and profit type posts,


00:07:32.000 --> 00:07:33.920
and testing, of course.


00:07:33.920 --> 00:07:37.560
But this is about unit test, and it talks about,


00:07:37.560 --> 00:07:40.560
if you set up, if you've got, here's the problem,


00:07:40.560 --> 00:07:42.360
you've got a whole bunch of tests running,


00:07:42.360 --> 00:07:46.440
all the dots flying by, and one of them takes a while,


00:07:46.440 --> 00:07:48.880
and you're trying to figure out which one's the slow one,


00:07:48.880 --> 00:07:50.760
and basically timing your tests.


00:07:50.760 --> 00:07:53.520
And he walks through a few solutions


00:07:53.520 --> 00:07:56.360
that would, through timing during setup and teardown,


00:07:56.360 --> 00:07:59.840
And the final solution is pretty cool,


00:07:59.840 --> 00:08:02.660
and it uses the test runner customization.


00:08:02.660 --> 00:08:05.960
And I've never thought of a good reason


00:08:05.960 --> 00:08:07.780
to customize a test runner.


00:08:07.780 --> 00:08:10.160
And this is a pretty cool solution.


00:08:10.160 --> 00:08:13.160
However, I have to point out that that sort of timing


00:08:13.160 --> 00:08:14.480
is built into pytest.


00:08:14.480 --> 00:08:17.960
So if you run the same code with a --durations,


00:08:17.960 --> 00:08:22.340
you put how many, so equals zero is default,


00:08:22.340 --> 00:08:25.000
times everything, or if you just want the slowest three,


00:08:25.000 --> 00:08:27.160
You can do durations equal three,


00:08:27.160 --> 00:08:30.480
and it just spits that same information out for you already.


00:08:30.480 --> 00:08:31.320
- Okay, that's cool.


00:08:31.320 --> 00:08:32.160
And can you sort?


00:08:32.160 --> 00:08:35.240
Can you say like, show me the slowest one first,


00:08:35.240 --> 00:08:36.160
or anything like that?


00:08:36.160 --> 00:08:37.520
Or does it just give you output


00:08:37.520 --> 00:08:39.280
and you gotta parse it yourself?


00:08:39.280 --> 00:08:40.960
- It defaults to the slowest first.


00:08:40.960 --> 00:08:44.640
It does sort 'em by slowest to fastest.


00:08:44.640 --> 00:08:45.840
- Yeah, that's really cool.


00:08:45.840 --> 00:08:47.880
- Because that's, I mean, that's the exact same reason


00:08:47.880 --> 00:08:49.320
why that feature's in place,


00:08:49.320 --> 00:08:51.000
is to try to find your slow tests.


00:08:51.000 --> 00:08:52.560
- Yeah, 'cause you want your tests to run fast,


00:08:52.560 --> 00:08:53.880
'cause you don't wanna wait five minutes,


00:08:53.880 --> 00:08:57.880
then? It's probably a few of them that are causing the problem, right?


00:08:57.880 --> 00:09:01.880
Yeah, well, I don't know. I've got a lot of them that are long, but


00:09:01.880 --> 00:09:05.880
the nice thing about the pytest... One of the things I'm not sure about the example that


00:09:05.880 --> 00:09:09.880
was given in the blog post was whether or not the setup and teardown are included.


00:09:09.880 --> 00:09:13.880
And in the pytest durations, it shows


00:09:13.880 --> 00:09:17.880
it splits out the setup and teardown and all the fixture code separate so


00:09:17.880 --> 00:09:21.880
that you know exactly where the time is being spent. Nice. Do you have to use pytest for this?


00:09:21.880 --> 00:09:22.880
to use unit test?


00:09:22.880 --> 00:09:25.200
- Well, the example in the blog post


00:09:25.200 --> 00:09:27.720
is a unit test example using unit test,


00:09:27.720 --> 00:09:32.040
and the durations is just through pytest.


00:09:32.040 --> 00:09:34.480
But you can, I mean, you can use unit test code.


00:09:34.480 --> 00:09:35.960
You just run it with pytest.


00:09:35.960 --> 00:09:37.920
- Right, just use the pytest runner against it


00:09:37.920 --> 00:09:39.000
'cause it'll run that as well.


00:09:39.000 --> 00:09:41.120
Yeah, okay, fantastic.


00:09:41.120 --> 00:09:42.280
Another one that I wanted to cover


00:09:42.280 --> 00:09:44.200
was this article that came out,


00:09:44.200 --> 00:09:46.540
and it's a bit of a content marketing play


00:09:46.540 --> 00:09:49.320
by this hiring company or this HR company,


00:09:49.320 --> 00:09:51.800
but nonetheless, they put together a bunch of good research


00:09:51.800 --> 00:09:53.920
So I'm going to link to it anyway.


00:09:53.920 --> 00:09:57.380
And it's called "Why is Python so popular anyway?"


00:09:57.380 --> 00:09:59.280
So it goes through many different sources.


00:09:59.280 --> 00:10:00.960
It goes through Stack Overflow.


00:10:00.960 --> 00:10:02.520
It goes from something called Guru.


00:10:02.520 --> 00:10:03.520
It goes through Indeed.


00:10:03.520 --> 00:10:05.600
And it goes through all these different places.


00:10:05.600 --> 00:10:10.740
And it talks about the areas where Python is being used, the areas where Python is growing


00:10:10.740 --> 00:10:12.240
in popularity.


00:10:12.240 --> 00:10:16.800
It talks about the relative pay scale of people on different roles.


00:10:16.800 --> 00:10:22.200
Like if you're a data scientist versus in DevOps versus a web developer doing Python,


00:10:22.200 --> 00:10:23.200
things like that.


00:10:23.200 --> 00:10:29.800
So basically they say in 2015 and 2016, it's been really from a hiring and job outlook


00:10:29.800 --> 00:10:32.000
perspective big years for Python.


00:10:32.000 --> 00:10:33.000
Right?


00:10:33.000 --> 00:10:37.840
They said on Stack Overflow it ranks the sixth most popular language in the world and on


00:10:37.840 --> 00:10:39.960
some others it ranks even higher.


00:10:39.960 --> 00:10:46.200
So Brian, do people ask you about how to get into Python or get your advice on like what


00:10:46.200 --> 00:10:47.940
what they should focus on?


00:10:47.940 --> 00:10:49.740
- No, mostly I'm trying to push people


00:10:49.740 --> 00:10:52.580
and tell everybody they should learn Python.


00:10:52.580 --> 00:10:55.380
- Yeah, it's like, you need to know Python,


00:10:55.380 --> 00:10:56.940
you don't know it, what's going on?


00:10:56.940 --> 00:10:59.580
- Yeah, and actually there's a lot of people,


00:10:59.580 --> 00:11:04.580
I have a teenage daughter that's almost 20


00:11:04.580 --> 00:11:07.220
and she's in college and all of her friends


00:11:07.220 --> 00:11:10.020
I try to encourage in the college,


00:11:10.020 --> 00:11:12.380
at least while they're in college,


00:11:12.380 --> 00:11:14.980
if they're not in high school,


00:11:14.980 --> 00:11:18.000
no matter what you're into, if you're gonna do psychology


00:11:18.000 --> 00:11:21.060
or anything, learn a programming language,


00:11:21.060 --> 00:11:24.260
and Python's a good one to learn as a corollary


00:11:24.260 --> 00:11:25.980
to any other thing you're studying.


00:11:25.980 --> 00:11:26.980
- Yeah, I totally agree.


00:11:26.980 --> 00:11:30.900
I think the world needs more creators and fewer consumers.


00:11:30.900 --> 00:11:32.180
- Yeah. - And I think a little bit


00:11:32.180 --> 00:11:34.260
of programming skills lets you become a creator


00:11:34.260 --> 00:11:37.000
in whatever your specialty is, not necessarily programming.


00:11:37.000 --> 00:11:38.800
- One of the things I think is interesting


00:11:38.800 --> 00:11:43.420
is when people use the popularity of Stack Overflow for it,


00:11:43.420 --> 00:11:47.100
And that is an interesting indicator,


00:11:47.100 --> 00:11:49.660
but it also is like how much people


00:11:49.660 --> 00:11:51.420
are confused by the language.


00:11:51.420 --> 00:11:54.020
- That's an interesting point, yeah.


00:11:54.020 --> 00:11:54.860
Yeah, yeah.


00:11:54.860 --> 00:11:58.740
And so they had a couple of things to back up their article


00:11:58.740 --> 00:12:00.460
that I thought was interesting, worth pulling out.


00:12:00.460 --> 00:12:03.180
So they said, according to Dice,


00:12:03.180 --> 00:12:05.300
Python is one of the hottest skills to have


00:12:05.300 --> 00:12:08.660
because demand is slightly outstripping supply.


00:12:08.660 --> 00:12:09.500
And that's great.


00:12:09.500 --> 00:12:10.980
We all want to work with Python


00:12:10.980 --> 00:12:12.260
and not some other language.


00:12:12.260 --> 00:12:14.460
So this is really good news.


00:12:14.460 --> 00:12:17.300
It's one of the highest programming languages in the US.


00:12:17.300 --> 00:12:22.300
So in fact, it's number two, the only one higher is Ruby.


00:12:22.300 --> 00:12:25.100
So they say, according to two different sources,


00:12:25.100 --> 00:12:28.300
one being, I think Guru is like 103,000 a year,


00:12:28.300 --> 00:12:31.740
and Indeed said 116,000 a year on average


00:12:31.740 --> 00:12:33.060
for a Python programmer.


00:12:33.060 --> 00:12:34.260
And the only one higher was Ruby,


00:12:34.260 --> 00:12:36.180
and I feel like that might be because Ruby's


00:12:36.180 --> 00:12:38.460
really focused in the Bay Area,


00:12:38.460 --> 00:12:41.260
and so salaries are just naturally high there.


00:12:41.260 --> 00:12:43.420
could be wrong about that.


00:12:43.420 --> 00:12:45.500
- Like for instance, Seattle and Portland are,


00:12:45.500 --> 00:12:47.660
which I'm more familiar with,


00:12:47.660 --> 00:12:50.820
it's the same goes here.


00:12:50.820 --> 00:12:55.220
I was at the conference a couple weeks ago, PNSQC.


00:12:55.220 --> 00:12:57.300
I was talking with a recruiter there


00:12:57.300 --> 00:12:59.660
because I'm actually looking for a Python person,


00:12:59.660 --> 00:13:01.740
and, or sometimes I am.


00:13:01.740 --> 00:13:03.620
Anyway, they said Python and Ruby


00:13:03.620 --> 00:13:06.520
in the Portland and Seattle area are really hard to fill.


00:13:06.520 --> 00:13:10.460
And I'm not sure if it's just the lack of people


00:13:10.460 --> 00:13:12.820
or if everybody is already in a full-time job


00:13:12.820 --> 00:13:15.500
and doesn't want to contract work, I'm not sure.


00:13:15.500 --> 00:13:16.340
- That's really interesting.


00:13:16.340 --> 00:13:19.460
I can tell you, relative to other cities,


00:13:19.460 --> 00:13:24.300
Python is more popular as a percentage in Portland


00:13:24.300 --> 00:13:26.540
than it is in many other cities,


00:13:26.540 --> 00:13:29.340
based on some stuff I wrote up a couple years ago,


00:13:29.340 --> 00:13:32.540
a bunch of data mining off of meetup.com


00:13:32.540 --> 00:13:33.360
and things like that.


00:13:33.360 --> 00:13:35.380
So I think it's a good sign, yeah.


00:13:35.380 --> 00:13:37.500
- I guess one last thing I'd like to add to this


00:13:37.500 --> 00:13:39.180
is if you are a Python developer


00:13:39.180 --> 00:13:41.180
and you're looking for work,


00:13:41.180 --> 00:13:44.660
don't limit yourself to just software places


00:13:44.660 --> 00:13:47.380
because Python's a popular language


00:13:47.380 --> 00:13:49.460
for lots of other fields.


00:13:49.460 --> 00:13:50.780
There are a lot of companies


00:13:50.780 --> 00:13:53.540
that are not traditionally software companies


00:13:53.540 --> 00:13:55.460
that are looking for Python developers.


00:13:55.460 --> 00:13:56.780
- Yeah, that's a really good point.


00:13:56.780 --> 00:13:59.300
Don't just go to the popular web properties


00:13:59.300 --> 00:14:00.140
that you know, right?


00:14:00.140 --> 00:14:01.740
Look much more broadly.


00:14:01.740 --> 00:14:02.960
- Yeah. - All right.


00:14:02.960 --> 00:14:06.420
Well, I think that wraps up the headlines for this week.


00:14:06.420 --> 00:14:07.980
What's up with you?


00:14:07.980 --> 00:14:10.280
- Well, I'm getting back into more podcasting.


00:14:10.280 --> 00:14:12.600
You're pushing me along, it's good.


00:14:12.600 --> 00:14:17.200
So, last week I released the number 24 of Testing Code


00:14:17.200 --> 00:14:21.440
with Rafael Pirzina, and that was a really good reception,


00:14:21.440 --> 00:14:24.000
good talk, and then I also recorded one,


00:14:24.000 --> 00:14:25.440
an episode with Dave Hunt.


00:14:25.440 --> 00:14:28.320
He works at Mozilla, and he's a specialist


00:14:28.320 --> 00:14:31.000
in Python, pytest, and Selenium,


00:14:31.000 --> 00:14:33.360
and that was a really interesting conversation


00:14:33.360 --> 00:14:34.880
about what they do at Mozilla.


00:14:34.880 --> 00:14:37.080
So, hopefully I'll get that out this week.


00:14:37.080 --> 00:14:38.560
- Oh, that sounds really exciting.


00:14:38.560 --> 00:14:41.300
I love these looks inside of what like


00:14:41.300 --> 00:14:43.060
cutting edge companies are doing.


00:14:43.060 --> 00:14:45.420
You know, like how Mozilla's using testing


00:14:45.420 --> 00:14:48.140
and Selenium and Python, just sounds interesting to me.


00:14:48.140 --> 00:14:50.060
- Well, I like the cutting edge stuff,


00:14:50.060 --> 00:14:54.860
but I also like the we're not doing it great interviews.


00:14:54.860 --> 00:14:58.020
Like I interviewed, I'm blanking right now,


00:14:58.020 --> 00:15:00.080
one of the interviews I did was with a startup


00:15:00.080 --> 00:15:02.540
and it was, they were just talking about how


00:15:02.540 --> 00:15:04.240
they just don't really do end to end


00:15:04.240 --> 00:15:08.440
complete testing that much, and it works out okay sometimes.


00:15:08.440 --> 00:15:10.200
But I've got holes in my schedule,


00:15:10.200 --> 00:15:12.440
so I want people to hit me up for,


00:15:12.440 --> 00:15:15.080
if there's somebody they'd like me to interview,


00:15:15.080 --> 00:15:17.040
or if they'd like to come on the show.


00:15:17.040 --> 00:15:20.680
- Do you wanna come talk about Python and testing?


00:15:20.680 --> 00:15:23.640
I think maybe testing code might be the place to go.


00:15:23.640 --> 00:15:25.240
- Yeah, and even non-testing.


00:15:25.240 --> 00:15:27.320
Like I'm trying to get David Hussman,


00:15:27.320 --> 00:15:29.560
he's from Dev Jam Studios, on,


00:15:29.560 --> 00:15:32.160
and he talks about Dude's Law and Agile


00:15:32.160 --> 00:15:34.520
and software development practices.


00:15:34.520 --> 00:15:35.900
So that'll be fun.


00:15:35.900 --> 00:15:37.260
- Oh yeah, I'm looking forward to that one too.


00:15:37.260 --> 00:15:40.060
- Hey, you got some news a little bit, Michael?


00:15:40.060 --> 00:15:40.900
- I do.


00:15:40.900 --> 00:15:43.300
So on episode 83 of Talk Python to Me,


00:15:43.300 --> 00:15:45.260
I had Paul Logsdon on.


00:15:45.260 --> 00:15:48.860
He's the new lead for PyVideo.


00:15:48.860 --> 00:15:53.380
So pyvideo.org is this great catalog.


00:15:53.380 --> 00:15:54.460
They don't actually hold the videos,


00:15:54.460 --> 00:15:57.700
but a catalog of links to, sort of like Yahoo,


00:15:57.700 --> 00:16:02.300
of Python presentations and video resources, let's say.


00:16:02.300 --> 00:16:04.360
But everything there has to be free, right?


00:16:04.360 --> 00:16:06.280
It can't be like paid Python courses.


00:16:06.280 --> 00:16:07.700
If you put a video there,


00:16:07.700 --> 00:16:10.400
it has to be freely and fully available.


00:16:10.400 --> 00:16:12.860
So they've got over 5,000 videos there.


00:16:12.860 --> 00:16:15.460
And apparently the show that I had


00:16:15.460 --> 00:16:18.000
got a couple people interested and contributing


00:16:18.000 --> 00:16:19.260
and so on, that's really great.


00:16:19.260 --> 00:16:23.460
I happened to put up some conference talks from NDC Oslo.


00:16:23.460 --> 00:16:25.980
So I'll link to those on there.


00:16:25.980 --> 00:16:31.500
one for that I did and also link to one that about the mutation testing that I


00:16:31.500 --> 00:16:35.260
mentioned earlier in the show actually. I'm also I just I'm doing a bunch of


00:16:35.260 --> 00:16:40.340
work on bootstrap and sort of web design stuff for my Python for Entrepreneurs


00:16:40.340 --> 00:16:45.220
course and this week I'm gonna release episode 85 a talk Python to me which has


00:16:45.220 --> 00:16:49.300
the the fun title of parsing horrible things with Python and that's Eric Rose


00:16:49.300 --> 00:16:53.340
so check that out as well. Oh that's awesome I always love your episodes.


00:16:53.340 --> 00:16:58.860
>> Thanks so much. I think that's it for this week. Once again, everybody, thank you for


00:16:58.860 --> 00:17:02.860
subscribing and listening to Python Bytes. The reception for the first week was great.


00:17:02.860 --> 00:17:06.580
Hopefully, you enjoyed this episode. If you have news you'd like us to feature, send it


00:17:06.580 --> 00:17:07.580
our way.


00:17:07.580 --> 00:17:08.580
>> Thanks a lot.


00:17:08.580 --> 00:17:09.580
>> Yeah. Bye, Brian. Bye, everyone.


00:17:09.580 --> 00:17:10.580
>> Bye.


00:17:10.580 --> 00:17:16.500
>> Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes.


00:17:16.500 --> 00:17:22.900
That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If


00:17:22.900 --> 00:17:26.620
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:17:26.620 --> 00:17:27.620
way.


00:17:27.620 --> 00:17:30.100
We're always on the lookout for sharing something cool.


00:17:30.100 --> 00:17:33.300
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:17:33.300 --> 00:17:36.620
Thank you for listening and sharing this podcast with your friends and colleagues.


00:17:36.620 --> 00:17:46.620
[BLANK_AUDIO]

