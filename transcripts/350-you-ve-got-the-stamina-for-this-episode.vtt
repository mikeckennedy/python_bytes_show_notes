WEBVTT

00:00:00.000 --> 00:00:06.080
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:06.080 --> 00:00:13.280
This is episode 350 recorded August 29th, 2023 and I'm Michael Kennedy.


00:00:13.280 --> 00:00:14.560
And I'm Brian Okken.


00:00:14.560 --> 00:00:17.280
And this episode is brought to you by Sentry.


00:00:17.280 --> 00:00:22.240
Make sure those errors don't go unnoticed and you get to them quickly with the right information.


00:00:22.240 --> 00:00:25.920
Check them out at pythonbytes.fm/sentry.


00:00:25.920 --> 00:00:27.520
We'll tell you more about them later.


00:00:27.520 --> 00:00:34.000
And of course, connect with us over on mastodon at mkennedy@brianhawkin@pythonbytesall@fostodon.org.


00:00:34.000 --> 00:00:36.880
And if you want to be part of the live stream, part of the live audience,


00:00:36.880 --> 00:00:43.680
that's usually on Tuesdays, 11am Pacific time, as we are recording today. So if you can drop by and


00:00:43.680 --> 00:00:49.600
be part of the show, we would love that. If not, well, thanks for listening anyway. Brian, kick


00:00:49.600 --> 00:00:56.720
this off. Just a quick little article from Bob Belderbos to remind us to keep things simple. And


00:00:56.720 --> 00:01:00.120
And there's a lot of ways in Python


00:01:00.120 --> 00:01:02.260
where you can make elegant looking code,


00:01:02.260 --> 00:01:04.280
but it also is easier to read.


00:01:04.280 --> 00:01:06.980
And that's, I think, some of the emphasis.


00:01:06.980 --> 00:01:11.360
So Bob from PyBytes, and they see a lot of,


00:01:11.360 --> 00:01:12.520
they've got all those challenges.


00:01:12.520 --> 00:01:15.320
So I'm sure they see a lot of examples


00:01:15.320 --> 00:01:18.680
of like not quite elegant code, but it does the trick.


00:01:18.680 --> 00:01:21.440
So I think this is good advice from a good person.


00:01:21.440 --> 00:01:26.440
So like, and there's just a handful of these here,


00:01:26.540 --> 00:01:28.020
but they're all really good things.


00:01:28.020 --> 00:01:32.220
Like for instance, using the keyword all,


00:01:32.220 --> 00:01:35.020
I don't use that much, but here's an example.


00:01:35.020 --> 00:01:38.260
He's got a function where he wants to know


00:01:38.260 --> 00:01:43.260
if all things in a list are divisible by some number.


00:01:43.260 --> 00:01:50.180
And there's like a function he wrote


00:01:50.180 --> 00:01:54.220
with just like a for loop


00:01:54.220 --> 00:01:55.660
that goes through the whole thing.


00:01:55.660 --> 00:02:00.460
However, he rewrote it as a, what is that called?


00:02:00.460 --> 00:02:05.220
It uses all, but it's comprehension, I believe.


00:02:05.220 --> 00:02:09.140
So all numbers divided by divisor equals zero


00:02:09.140 --> 00:02:10.460
for divisor and divisors.


00:02:10.460 --> 00:02:11.300
So it's kind of neat.


00:02:11.300 --> 00:02:13.620
- I think it actually might be a generator.


00:02:13.620 --> 00:02:14.740
- Is it a generator?


00:02:14.740 --> 00:02:16.700
- I think it might be, but yeah,


00:02:16.700 --> 00:02:18.620
when it's passed as an argument,


00:02:18.620 --> 00:02:20.600
parentheses don't really tell you which it is, does it?


00:02:20.600 --> 00:02:22.820
- It doesn't, yeah, it's pretty cool.


00:02:22.820 --> 00:02:23.940
- I'm gonna find that out for us.


00:02:23.940 --> 00:02:28.180
pretty cool to use that generator or whatever


00:02:28.180 --> 00:02:33.180
in as an argument to a function, that's pretty slick.


00:02:33.180 --> 00:02:36.420
And it's pretty easy to read still, I think.


00:02:36.420 --> 00:02:39.100
I still think maybe, well, with the function name,


00:02:39.100 --> 00:02:41.100
you kind of get what it's going at,


00:02:41.100 --> 00:02:43.580
but if it was out of scope of a function,


00:02:43.580 --> 00:02:46.300
both of these methods would have used,


00:02:46.300 --> 00:02:49.300
could use a comment here or there.


00:02:49.300 --> 00:02:51.700
Dictionary lookups, I love this part.


00:02:51.700 --> 00:02:53.360
I use it all the time.


00:02:53.360 --> 00:02:55.860
The dictionary has a get function.


00:02:55.860 --> 00:03:00.040
So normally you reference a key in a dictionary


00:03:00.040 --> 00:03:02.060
with just brackets,


00:03:02.060 --> 00:03:05.460
but if you want to have some default value,


00:03:05.460 --> 00:03:07.860
if it's not there, use get instead.


00:03:07.860 --> 00:03:11.920
So you grab a key and then the second value is the value.


00:03:11.920 --> 00:03:15.760
Anyway, this saves a lot of code


00:03:15.760 --> 00:03:19.740
because I do this all the time for dictionary lookups.


00:03:19.740 --> 00:03:21.820
And then it goes through quite a few others,


00:03:21.820 --> 00:03:23.220
just it's a good list.


00:03:23.220 --> 00:03:25.900
We've got list comprehensions, don't forget those.


00:03:25.900 --> 00:03:28.820
List comprehensions are wonderful, we both love those.


00:03:28.820 --> 00:03:30.500
Looking for unique values.


00:03:30.500 --> 00:03:33.300
This one I had to look at for a while, it was interesting.


00:03:33.300 --> 00:03:35.700
If you're looking, I actually didn't understand


00:03:35.700 --> 00:03:40.020
the first one that well, but making sure that


00:03:40.020 --> 00:03:44.220
all items in a set, or items in a something are unique


00:03:44.220 --> 00:03:47.940
by taking the length and then doing a set of items


00:03:47.940 --> 00:03:51.380
and then the length, anyway, just lots of fun tricks


00:03:51.380 --> 00:03:56.380
to shorten your code and make it a little more readable.


00:03:56.380 --> 00:03:57.240
- I love it.


00:03:57.240 --> 00:03:58.940
There's all these non-obvious ways,


00:03:58.940 --> 00:04:00.580
you know, counter, I know Bob is a big fan


00:04:00.580 --> 00:04:02.180
of the counter class, but yeah,


00:04:02.180 --> 00:04:04.120
that's a really slick way to--


00:04:04.120 --> 00:04:05.500
- What is he trying to do with this last one?


00:04:05.500 --> 00:04:07.180
Counting things, yeah, counters,


00:04:07.180 --> 00:04:08.980
counters pretty cool, just to count things.


00:04:08.980 --> 00:04:11.700
- If you've got a paragraph or like some text


00:04:11.700 --> 00:04:13.900
and you wanna say which words appear


00:04:13.900 --> 00:04:15.620
and then how frequently do they appear,


00:04:15.620 --> 00:04:19.740
you could split on space and throw away the punctuation.


00:04:19.740 --> 00:04:20.580
- Yeah.


00:04:20.580 --> 00:04:25.380
like just basically a couple of lines of sentence.split.


00:04:25.380 --> 00:04:26.220
And that's it.


00:04:26.220 --> 00:04:27.040
And then you count that.


00:04:27.040 --> 00:04:27.880
It's awesome.


00:04:27.880 --> 00:04:29.340
It says, you know, this word appeared this many times.


00:04:29.340 --> 00:04:30.460
And it even sorts it.


00:04:30.460 --> 00:04:31.740
- Yeah, that's pretty cool.


00:04:31.740 --> 00:04:33.660
Yeah, and it's just like,


00:04:33.660 --> 00:04:37.020
did sentence.lower.split,


00:04:37.020 --> 00:04:39.140
and then throw it into a counter.


00:04:39.140 --> 00:04:40.460
Interesting.


00:04:40.460 --> 00:04:41.280
Pretty cool.


00:04:41.280 --> 00:04:42.780
- Interesting indeed.


00:04:42.780 --> 00:04:46.420
Also interesting is it turns out that is in fact


00:04:46.420 --> 00:04:48.540
a generator that comes out of that.


00:04:48.540 --> 00:04:51.740
I did a little quick REPL action on it


00:04:51.740 --> 00:04:53.220
for some real-time follow-up there.


00:04:53.220 --> 00:04:54.060
- Cool, yeah.


00:04:54.060 --> 00:04:54.900
- Yeah, yeah.


00:04:54.900 --> 00:04:56.720
All right, the first one I wanna cover today


00:04:56.720 --> 00:05:01.020
comes from a foundational element of Scrapy.


00:05:01.020 --> 00:05:05.460
So Scrapy is the project around extracting data


00:05:05.460 --> 00:05:07.500
from websites in a fast, cool way.


00:05:07.500 --> 00:05:10.500
You've got scrapy.org, you've got Scrapy itself.


00:05:10.500 --> 00:05:12.900
But the thing I wanna highlight is Parcel.


00:05:12.900 --> 00:05:15.380
You've probably heard of Beautiful Soup,


00:05:15.380 --> 00:05:18.260
and Beautiful Soup has been around for a really long time


00:05:18.260 --> 00:05:20.260
and it's quite excellent.


00:05:20.260 --> 00:05:22.260
But I was looking for something,


00:05:22.260 --> 00:05:24.500
you know, is there something kind of newer


00:05:24.500 --> 00:05:28.180
that's got some new paradigms, just to try out basically.


00:05:28.180 --> 00:05:30.660
And I ran across Parcel and it being the foundation


00:05:30.660 --> 00:05:33.500
of Scrapy kind of gives it some street cred.


00:05:33.500 --> 00:05:38.500
So Parcel lets you extract data from XML and HTML documents.


00:05:38.500 --> 00:05:41.500
So the fact that it's XML as well,


00:05:41.500 --> 00:05:46.340
'cause I was working with some RSS data for some things.


00:05:46.340 --> 00:05:51.060
And you can do either CSS selectors, which are my favorite,


00:05:51.060 --> 00:05:52.580
but sometimes you gotta get things


00:05:52.580 --> 00:05:54.780
that CSS doesn't really easily,


00:05:54.780 --> 00:05:55.860
make it easy for you to get.


00:05:55.860 --> 00:05:57.500
So you can use XPath as well.


00:05:57.500 --> 00:05:59.460
It also works on JSON, I believe,


00:05:59.460 --> 00:06:01.900
even though the description doesn't say so.


00:06:01.900 --> 00:06:03.160
Yeah, JSON as well.


00:06:03.160 --> 00:06:06.340
So the CSS and XPath is for HTML and XML


00:06:06.340 --> 00:06:11.140
and it use JamezPath, J-M-E-S-E path expressions


00:06:11.140 --> 00:06:13.900
for JSON documents, which kind of lets you say,


00:06:13.900 --> 00:06:15.340
I've got some big structure,


00:06:15.340 --> 00:06:18.180
So I want to navigate in kind of like you would


00:06:18.180 --> 00:06:20.740
with a CSS selector, like show me all the paragraphs


00:06:20.740 --> 00:06:24.180
and then get the images and get the title of the image


00:06:24.180 --> 00:06:26.060
out of every paragraph on the page,


00:06:26.060 --> 00:06:27.060
no matter how it's structured.


00:06:27.060 --> 00:06:29.780
You can kind of do that with this thing for JSON as well,


00:06:29.780 --> 00:06:31.300
which is pretty awesome.


00:06:31.300 --> 00:06:33.060
Instead of traversing it all over.


00:06:33.060 --> 00:06:34.660
And if you want two problems,


00:06:34.660 --> 00:06:37.980
you can try to solve it with one with regular expressions.


00:06:37.980 --> 00:06:39.420
Here, I'll give you a quick example.


00:06:39.420 --> 00:06:41.380
If you just pull up the page, it says,


00:06:41.380 --> 00:06:42.700
okay, we're gonna take some texts.


00:06:42.700 --> 00:06:47.100
The text has a body, an H1, an unordered list,


00:06:47.100 --> 00:06:48.580
a list items in there.


00:06:48.580 --> 00:06:50.180
Those list items are hyperlinks.


00:06:50.180 --> 00:06:53.380
The hyperlinks have URLs and they have text.


00:06:53.380 --> 00:06:55.820
There's also some JSON in this thing.


00:06:55.820 --> 00:06:57.620
So if you just create a new selector object,


00:06:57.620 --> 00:07:00.820
you can say H1 colon colon text,


00:07:00.820 --> 00:07:05.820
and that is a CSS way to speak about the context,


00:07:05.820 --> 00:07:07.000
the content of that,


00:07:07.000 --> 00:07:09.820
and that pulls just the value out of there.


00:07:09.820 --> 00:07:13.700
So hi parcel or hello parcel is the text inside the H1.


00:07:13.700 --> 00:07:16.380
So that simple little selector is a real simple example.


00:07:16.380 --> 00:07:18.180
So maybe it doesn't totally win you over,


00:07:18.180 --> 00:07:22.260
but in a real true complicated HTML document,


00:07:22.260 --> 00:07:23.940
it would be quite awesome.


00:07:23.940 --> 00:07:26.100
They also show how to do that with XPath.


00:07:26.100 --> 00:07:27.420
I don't know XPath very well.


00:07:27.420 --> 00:07:29.420
And then run a regular expression against it.


00:07:29.420 --> 00:07:31.420
You can break that into pieces.


00:07:31.420 --> 00:07:32.260
That's pretty intense.


00:07:32.260 --> 00:07:33.260
I'm not necessarily doing it,


00:07:33.260 --> 00:07:34.820
but you can do things like, for example,


00:07:34.820 --> 00:07:37.820
I want all the LIs that are only appearing


00:07:37.820 --> 00:07:41.040
in unordered lists, not the ordered list ones.


00:07:41.040 --> 00:07:44.360
So you can say ul greater than li


00:07:44.360 --> 00:07:47.360
and the greater than means immediate child


00:07:47.360 --> 00:07:49.240
of not somewhere in the hierarchy.


00:07:49.240 --> 00:07:50.820
So you just do that CSS selector


00:07:50.820 --> 00:07:52.160
and it gives you an iterable.


00:07:52.160 --> 00:07:53.280
It gives you all the list elements


00:07:53.280 --> 00:07:56.360
that you could pull out the hyperlinks out of both of those


00:07:56.360 --> 00:07:58.840
by doing slash slash at href, right?


00:07:58.840 --> 00:08:01.360
To grab that out of the thing that comes back.


00:08:01.360 --> 00:08:03.160
And you can also do similar stuff


00:08:03.160 --> 00:08:05.760
for the XML that's in here.


00:08:05.760 --> 00:08:08.920
So you can say, just go find me the thing


00:08:08.920 --> 00:08:10.800
that has the name A, no matter where it appears


00:08:10.800 --> 00:08:13.360
in the document, or give me all the items to the list,


00:08:13.360 --> 00:08:14.720
and so on, pretty cool.


00:08:14.720 --> 00:08:17.960
Again, really simple example, but quite a neat little tool.


00:08:17.960 --> 00:08:19.840
- I definitely need this.


00:08:19.840 --> 00:08:23.460
I've got some HTML that I'm parsing that are,


00:08:23.460 --> 00:08:25.200
it's not well-structured stuff.


00:08:25.200 --> 00:08:28.560
It's like, you know, generated from some CMS thing,


00:08:28.560 --> 00:08:32.600
and there's no identifiers anywhere.


00:08:32.600 --> 00:08:34.120
There's hardly any classes.


00:08:34.120 --> 00:08:37.000
It just is like purely generated GARP,


00:08:37.000 --> 00:08:38.720
div nightmares.


00:08:38.720 --> 00:08:39.560
(laughing)


00:08:39.560 --> 00:08:43.720
And yeah, it'll still be lucky


00:08:43.720 --> 00:08:45.280
if I can find what I'm looking for


00:08:45.280 --> 00:08:46.680
with something like this.


00:08:46.680 --> 00:08:48.840
- Yeah, but it'll help, right?


00:08:48.840 --> 00:08:50.440
- Yeah, yeah, that's pretty cool.


00:08:50.440 --> 00:08:51.720
- Give me, I'll see if I can pull up


00:08:51.720 --> 00:08:52.880
one more example real quick.


00:08:52.880 --> 00:08:54.440
Hold on, let it appear.


00:08:54.440 --> 00:08:55.960
Must appear, I just screenshot it.


00:08:55.960 --> 00:08:57.520
Also in our notes here,


00:08:57.520 --> 00:09:00.380
I put the way to get an RSS feed


00:09:00.380 --> 00:09:02.200
out of a standard webpage.


00:09:02.200 --> 00:09:03.760
So how would you normally do that?


00:09:03.760 --> 00:09:06.880
you would go get the HTML, then you go to the head section.


00:09:06.880 --> 00:09:09.080
And in the head section, there's a bunch of links.


00:09:09.080 --> 00:09:10.360
They mean different things.


00:09:10.360 --> 00:09:15.360
One of them would have the rel type as,


00:09:15.360 --> 00:09:16.640
what is that?


00:09:16.640 --> 00:09:17.460
I can't remember.


00:09:17.460 --> 00:09:21.480
It's like additional or something like that.


00:09:21.480 --> 00:09:23.760
And the, no, that's the rel.


00:09:23.760 --> 00:09:26.360
And then the rel type is something like RSS,


00:09:26.360 --> 00:09:30.040
application plus RSS, or whatever the MIME type is.


00:09:30.040 --> 00:09:31.640
So you can just grab those things,


00:09:31.640 --> 00:09:33.780
just saying head greater than link.


00:09:33.780 --> 00:09:36.700
I use a little XPath to grab the attributes


00:09:36.700 --> 00:09:38.940
out of the selector or out of the result


00:09:38.940 --> 00:09:40.100
and find which one of those.


00:09:40.100 --> 00:09:42.840
And then you've got the URL, which is, you know,


00:09:42.840 --> 00:09:44.860
where the RSS feed is.


00:09:44.860 --> 00:09:47.900
Like if you're looking, if you're writing like a blog engine


00:09:47.900 --> 00:09:49.260
and somebody puts in the domain,


00:09:49.260 --> 00:09:52.580
but not the actual RSS entry, you could get that page,


00:09:52.580 --> 00:09:54.500
find the RSS entry automatically for them


00:09:54.500 --> 00:09:56.460
and go on with just a couple of lines of code.


00:09:56.460 --> 00:09:57.500
- That's pretty cool.


00:09:57.500 --> 00:09:58.540
- Very neat.


00:09:58.540 --> 00:10:00.220
All right, what you got next for us?


00:10:00.220 --> 00:10:03.460
Oh wait, before we move on, Brian, before we move on,


00:10:03.460 --> 00:10:06.140
let me tell everyone about our sponsor.


00:10:06.140 --> 00:10:08.100
So as I said at the beginning,


00:10:08.100 --> 00:10:10.980
Sentry is sponsoring this episode and the next.


00:10:10.980 --> 00:10:13.580
So support the show, it really, really helps.


00:10:13.580 --> 00:10:17.760
If you go and if you're considering getting error monitoring


00:10:17.760 --> 00:10:21.000
or tracing for your application,


00:10:21.000 --> 00:10:23.140
check out pythonbytes.fm/sentry.


00:10:23.140 --> 00:10:24.420
Yes, you can Google them.


00:10:24.420 --> 00:10:26.820
We know you can just Google them and sign up,


00:10:26.820 --> 00:10:29.120
but if you use the code pythonbytes


00:10:29.120 --> 00:10:32.800
or just use the link and click, what is it down here?


00:10:32.800 --> 00:10:34.280
Try Sentry for free.


00:10:34.280 --> 00:10:35.960
Then it'll apply that code automatically,


00:10:35.960 --> 00:10:37.360
which will then let them know,


00:10:37.360 --> 00:10:39.080
hey, it's a good idea to sponsor the show.


00:10:39.080 --> 00:10:40.260
So let me tell you about them.


00:10:40.260 --> 00:10:42.240
So if you want to remove a little bit of stress


00:10:42.240 --> 00:10:43.080
from your life,


00:10:43.080 --> 00:10:45.080
if you're worried about errors on your website


00:10:45.080 --> 00:10:47.200
or errors your users are running into


00:10:47.200 --> 00:10:49.640
that you might not even know about,


00:10:49.640 --> 00:10:52.160
you might want to install something like Sentry.


00:10:52.160 --> 00:10:56.080
So if you're waiting for your users to send you an email


00:10:56.080 --> 00:10:57.820
saying, hey, I'm running into this problem,


00:10:57.820 --> 00:10:59.700
How many of them got frustrated?


00:10:59.700 --> 00:11:01.820
What was their opinion of your app


00:11:01.820 --> 00:11:03.660
or your website or your API?


00:11:03.660 --> 00:11:04.700
Probably not great.


00:11:04.700 --> 00:11:06.260
How much better it would be if you had


00:11:06.260 --> 00:11:09.540
error or performance details immediately sent to you,


00:11:09.540 --> 00:11:11.580
including things like the call stack,


00:11:11.580 --> 00:11:14.580
the values of the local variables in that call stack,


00:11:14.580 --> 00:11:16.660
the active user who was logged in,


00:11:16.660 --> 00:11:18.040
let's say their email address,


00:11:18.040 --> 00:11:19.300
all in some report and you're like,


00:11:19.300 --> 00:11:20.520
oh, here's the problem.


00:11:20.520 --> 00:11:22.260
Here's the data I got to pass to it


00:11:22.260 --> 00:11:24.140
to write a unit test to reproduce it


00:11:24.140 --> 00:11:25.860
so I can make sure it doesn't happen again.


00:11:25.860 --> 00:11:30.120
And here's the email of the user who I email and tell them, sorry, we fixed it.


00:11:30.120 --> 00:11:33.080
I know you didn't tell us, but we found out anyway, because we use Sentry.


00:11:33.080 --> 00:11:36.260
So with Sentry, it's not only possible, it's simple.


00:11:36.260 --> 00:11:37.400
We use it on Python bytes.


00:11:37.400 --> 00:11:38.380
I use it on talk Python.


00:11:38.380 --> 00:11:40.000
We use it in the talk Python mobile apps.


00:11:40.000 --> 00:11:42.260
There's a way to just plug it right into Flutter as well.


00:11:42.260 --> 00:11:42.800
Nice.


00:11:42.800 --> 00:11:44.520
So pretty, pretty awesome.


00:11:44.520 --> 00:11:49.600
And once I did exactly that, we had some user on Talk Python Training.


00:11:49.600 --> 00:11:50.900
They ran into a problem.


00:11:50.900 --> 00:11:52.980
I got a notification and I saw who it was.


00:11:52.980 --> 00:11:53.560
I fixed it.


00:11:53.740 --> 00:11:55.940
Send them a message, said, "Hey, here's the problem, it's fixed."


00:11:55.940 --> 00:11:57.540
They said, "I was about to write you.


00:11:57.540 --> 00:11:58.900
That's weird, but thank you."


00:11:58.900 --> 00:11:59.820
That's awesome.


00:11:59.820 --> 00:12:00.820
That's pretty cool.


00:12:00.820 --> 00:12:01.900
It's a really great email to write.


00:12:01.900 --> 00:12:02.660
Yeah, it's really cool.


00:12:02.660 --> 00:12:07.620
So if you want to have that kind of superpower for your web apps, your


00:12:07.620 --> 00:12:10.500
APIs, mobile apps, whatever, check out Sentry.


00:12:10.500 --> 00:12:12.020
So surprise and delight your users.


00:12:12.020 --> 00:12:16.120
Create your Sentry account @pythonbysetfm/sentry and be sure to sign up


00:12:16.120 --> 00:12:18.260
with the code "pythonbytes," all one word.


00:12:18.260 --> 00:12:22.720
It's good for two months of upgraded options for their Sentry business plan,


00:12:22.740 --> 00:12:26.240
which will give you 20 times as many monthly events as well as some other features.


00:12:26.240 --> 00:12:29.440
So thank you to Sentry for sponsoring our show.


00:12:29.440 --> 00:12:30.000
Cool.


00:12:30.000 --> 00:12:33.740
Yeah. And Ryan, now over to you.


00:12:33.740 --> 00:12:36.540
Well, I want to talk about struct log.


00:12:36.540 --> 00:12:38.700
I'm pretty sure we've covered it before.


00:12:38.700 --> 00:12:45.600
So struct log is a pretty cool way to do some logging in your Python,


00:12:45.600 --> 00:12:50.640
especially if you're logging from multiple services or multiple threads.


00:12:50.640 --> 00:12:55.980
And it's really great because you can add extra detail and it's got coloring and stuff.


00:12:55.980 --> 00:13:00.000
StruckLog has some pretty good documentation already,


00:13:00.000 --> 00:13:04.000
which I love and it's a beautiful tool.


00:13:04.000 --> 00:13:10.140
However, I wanted to highlight a new article I saw and it really is pretty fun.


00:13:10.140 --> 00:13:11.780
>> Wait, hold on, go back real quick.


00:13:11.780 --> 00:13:12.460
>> Okay.


00:13:12.460 --> 00:13:15.460
>> Is the icon logo of StruckLog,


00:13:15.460 --> 00:13:18.560
is that like Geordi from Star Trek but a beaver?


00:13:18.560 --> 00:13:19.860
>> I think so.


00:13:19.860 --> 00:13:21.620
- I'm not sure. - All right.


00:13:21.620 --> 00:13:24.820
- Okay, and he's holding two brackets. - It's so good.


00:13:24.820 --> 00:13:26.820
Or curly braces.


00:13:26.820 --> 00:13:32.820
So the article I wanted to look at was a comprehensive guide to Python logging with struct log.


00:13:32.820 --> 00:13:37.320
And one of the things I loved about it was just sort of the beginning example.


00:13:37.320 --> 00:13:40.820
There's a beautiful picture of a whole bunch of logged items.


00:13:40.820 --> 00:13:47.320
But what I liked was just the starting one that just said,


00:13:47.320 --> 00:13:50.380
hey, all you have to do is do pip installs struct log.


00:13:50.380 --> 00:13:54.760
And then if you wanna just start trying it,


00:13:54.760 --> 00:13:57.120
it's just a better logger than you're used to.


00:13:57.120 --> 00:14:01.640
So import struct log, do logger struct log get logger,


00:14:01.640 --> 00:14:04.360
and then you use it just like you normally would,


00:14:04.360 --> 00:14:08.400
logger info, and then you can just,


00:14:08.400 --> 00:14:10.360
here's an example, you can do debug info,


00:14:10.360 --> 00:14:12.800
warning error, critical, all that sort of stuff.


00:14:12.800 --> 00:14:16.380
This is a big article talking about the different ways


00:14:16.380 --> 00:14:21.220
You can set it up with, you can set the default logging level,


00:14:21.220 --> 00:14:23.860
you can configure it, you can set it up for different,


00:14:23.860 --> 00:14:26.260
have different loggers on different applications


00:14:26.260 --> 00:14:29.260
or different services, different formatting,


00:14:29.260 --> 00:14:30.740
you can have different renderers.


00:14:30.740 --> 00:14:33.060
That's all awesome, and I'm really glad


00:14:33.060 --> 00:14:34.260
that it walks through that.


00:14:34.260 --> 00:14:38.460
But what I really like was just this basic tutorial


00:14:38.460 --> 00:14:40.500
of, hey, just do this.


00:14:40.500 --> 00:14:43.220
Do the get logger and then just log stuff


00:14:43.220 --> 00:14:45.660
and you get this beautiful output.


00:14:45.660 --> 00:14:51.620
>> Yeah, the color and the weight and alignment of all the output is really awesome there.


00:14:51.620 --> 00:14:52.020
>> Yeah.


00:14:52.020 --> 00:14:54.100
>> So often you like, okay, you want to do login?


00:14:54.100 --> 00:14:56.260
Well, okay. So what you do is you set up the logger,


00:14:56.260 --> 00:14:58.060
then you register an output.


00:14:58.060 --> 00:15:02.900
So let's create a standard out stream writer thing,


00:15:02.900 --> 00:15:05.340
and then we can push that into it.


00:15:05.340 --> 00:15:07.740
If you don't do that, then no output shows up.


00:15:07.740 --> 00:15:09.180
You're like, what is going on here?


00:15:09.180 --> 00:15:10.940
Why is this not working?


00:15:10.940 --> 00:15:12.620
Yeah, this is really nice.


00:15:12.620 --> 00:15:14.140
>> So it does show the beauty of


00:15:14.140 --> 00:15:16.460
struct log that you can get started really fast.


00:15:16.460 --> 00:15:20.180
It has a lot of complexity and it's really not that complicated.


00:15:20.180 --> 00:15:24.420
Like I said, the documentation is awesome and configuring it and


00:15:24.420 --> 00:15:26.700
everything is not that hard,


00:15:26.700 --> 00:15:29.140
but it's a new tool.


00:15:29.140 --> 00:15:33.420
It's great that it's an easy way to get on board with it,


00:15:33.420 --> 00:15:36.340
start using it, start having these great logs.


00:15:36.340 --> 00:15:39.540
Both it can be for going to output,


00:15:39.540 --> 00:15:42.340
but also you can log to files, of course.


00:15:42.340 --> 00:15:47.780
And great tool and I love this tutorial that starts super easy and then gets into the more


00:15:47.780 --> 00:15:48.780
complex.


00:15:48.780 --> 00:15:50.420
So check it out.


00:15:50.420 --> 00:15:51.420
Excellent.


00:15:51.420 --> 00:15:52.420
Excellent.


00:15:52.420 --> 00:15:53.420
What you got for us?


00:15:53.420 --> 00:15:55.460
The last one of the main ones.


00:15:55.460 --> 00:16:00.500
This one comes to us from Matias Bach and is created by Hennecke.


00:16:00.500 --> 00:16:03.740
And I mentioned it before and it's stamina.


00:16:03.740 --> 00:16:05.300
But I didn't know too much about it.


00:16:05.300 --> 00:16:09.180
There were some questions in the audience like how does it relate to tenacity and other


00:16:09.180 --> 00:16:10.340
things right?


00:16:10.340 --> 00:16:12.100
So I thought, all right, this is a cool thing.


00:16:12.100 --> 00:16:13.460
I'll focus a little bit more on it.


00:16:13.460 --> 00:16:16.340
And it has direct StruckLog integration.


00:16:16.340 --> 00:16:18.580
How's that for a segue, Brian?


00:16:18.580 --> 00:16:21.820
- Yeah, well, I think StruckLog's a Hennick thing too, maybe.


00:16:21.820 --> 00:16:23.060
- Yeah, perhaps it is.


00:16:23.060 --> 00:16:24.060
It seems like it would be.


00:16:24.060 --> 00:16:28.260
So with Tenacity, the idea is you can put decorators


00:16:28.260 --> 00:16:31.380
and other things onto functions or operations


00:16:31.380 --> 00:16:33.240
and say, if something goes wrong, try it again.


00:16:33.240 --> 00:16:35.740
That's the tenaciousness of that package, right?


00:16:35.740 --> 00:16:38.300
That like, yeah, errors will not stop me.


00:16:38.300 --> 00:16:40.660
But as Henek describes it,


00:16:40.660 --> 00:16:43.400
that tenacity is great, but unopinionated.


00:16:43.400 --> 00:16:45.400
And you can work yourself into ways


00:16:45.400 --> 00:16:46.720
where you might be using it wrong


00:16:46.720 --> 00:16:50.940
or causing other sorts of infinite loop type of issues.


00:16:50.940 --> 00:16:53.440
So the idea is that stamina


00:16:53.440 --> 00:16:55.960
is an opinionated wrapper around tenacity.


00:16:55.960 --> 00:16:57.600
So it's not a replacement for,


00:16:57.600 --> 00:17:01.160
but a simplified API for tenacity


00:17:01.160 --> 00:17:03.600
with the goal of being as ergonomic as possible


00:17:03.600 --> 00:17:05.260
and doing the right thing by default


00:17:05.260 --> 00:17:08.540
with minimizing the potential for doing it wrong.


00:17:08.540 --> 00:17:10.300
So that's pretty cool.


00:17:10.300 --> 00:17:13.780
Basically, Annex says, he used to copy and paste


00:17:13.780 --> 00:17:15.760
the way he was working with Tenacity over and over.


00:17:15.760 --> 00:17:17.720
And wouldn't it be cool to just make a package


00:17:17.720 --> 00:17:20.620
that kind of embedded those ways of working with it.


00:17:20.620 --> 00:17:23.420
For example, instead of retrying on an exception,


00:17:23.420 --> 00:17:27.020
retry only on a certain exception,


00:17:27.020 --> 00:17:28.700
a certain type of exception, right?


00:17:28.700 --> 00:17:32.940
I wanna retry this only on database connection errors,


00:17:32.940 --> 00:17:36.000
not if there's a foreign key constraint error


00:17:36.000 --> 00:17:37.940
because that's never gonna go away, right?


00:17:37.940 --> 00:17:39.980
That's always gonna be a problem with the data,


00:17:39.980 --> 00:17:41.860
but maybe the database will come back online.


00:17:41.860 --> 00:17:43.240
So let's retry that one.


00:17:43.240 --> 00:17:44.420
There's exponential backoff,


00:17:44.420 --> 00:17:46.580
which comes from tenacity as well.


00:17:46.580 --> 00:17:49.060
But what about with jitter between the retries


00:17:49.060 --> 00:17:50.180
instead of just going,


00:17:50.180 --> 00:17:52.260
I'm gonna go one second, three second, five seconds.


00:17:52.260 --> 00:17:55.300
Let's go one second, then three seconds-ish,


00:17:55.300 --> 00:17:57.380
then five seconds-ish, and so on.


00:17:57.380 --> 00:17:59.220
Limit the total number of retries,


00:17:59.220 --> 00:18:00.940
limit the total amount of time,


00:18:00.940 --> 00:18:02.120
but all at once, right?


00:18:02.120 --> 00:18:05.920
So not just the number of retries, but the time and retries.


00:18:05.920 --> 00:18:08.560
And this one is very relevant to me right now.


00:18:08.560 --> 00:18:10.440
I've been thinking a lot about Python typing.


00:18:10.440 --> 00:18:11.280
I'll talk more about that later.


00:18:11.280 --> 00:18:16.280
But with type hints, you get things like mypy and PyCharm


00:18:16.280 --> 00:18:20.120
and other tools that say you're using this function correctly


00:18:20.120 --> 00:18:21.520
or you're using it wrong.


00:18:21.520 --> 00:18:24.260
And with the way the decorators work with stamina


00:18:24.260 --> 00:18:26.720
is it preserves type hint informations


00:18:26.720 --> 00:18:29.800
when you decorate a function that is type hinted.


00:18:29.800 --> 00:18:30.840
Honestly, I don't know how to do that,


00:18:30.840 --> 00:18:34.360
But I'm really glad that it like decorating the function with one of these


00:18:34.360 --> 00:18:36.760
retries doesn't wipe away its type information.


00:18:36.760 --> 00:18:37.500
That's super cool.


00:18:37.500 --> 00:18:43.700
It log logs with struct log retries with basic metadata if they happen to be


00:18:43.700 --> 00:18:44.320
installed.


00:18:44.320 --> 00:18:48.600
Um, and you can, this one you might like Brian, you can easily deactivate it


00:18:48.600 --> 00:18:51.080
with a fixture or something like that.


00:18:51.080 --> 00:18:56.200
Uh, or just globally for the whole test run so that you don't retry a thousand


00:18:56.200 --> 00:18:59.520
times while you're doing a unit test testing for an exception on purpose.


00:18:59.760 --> 00:19:01.400
- Yeah, that's great.


00:19:01.400 --> 00:19:04.180
- Yeah, so super, super easy to work with.


00:19:04.180 --> 00:19:07.780
Just basically put a decorator, right?


00:19:07.780 --> 00:19:09.820
Stamina at stamina.retry.


00:19:09.820 --> 00:19:14.140
And in this case, you can say only on the HTTPX HTTP errors


00:19:14.140 --> 00:19:15.420
and only try it three times.


00:19:15.420 --> 00:19:16.340
That's pretty cool.


00:19:16.340 --> 00:19:17.420
- That's pretty great.


00:19:17.420 --> 00:19:19.200
- Yeah, so a lot more you can do.


00:19:19.200 --> 00:19:21.180
It's async by default.


00:19:21.180 --> 00:19:24.620
So you don't just decorate an async def function


00:19:24.620 --> 00:19:26.180
and it does that as well.


00:19:26.180 --> 00:19:27.260
So very, very cool.


00:19:27.260 --> 00:19:28.500
People should certainly check it out.


00:19:28.500 --> 00:19:32.140
And you can also see in the example, he's doing reveal type, which I believe comes from


00:19:32.140 --> 00:19:33.140
mypy.


00:19:33.140 --> 00:19:37.500
And you can reveal type on the example here, which is a decorated thing.


00:19:37.500 --> 00:19:44.460
And it shows you that what you get back is a coroutine of any, any, and that HUPX response,


00:19:44.460 --> 00:19:48.340
which is basically how it was set up to go, right?


00:19:48.340 --> 00:19:49.420
Set up to work, right?


00:19:49.420 --> 00:19:52.500
Input on an int, and then output on that type of thing.


00:19:52.500 --> 00:19:53.780
So I think it's a pretty cool library.


00:19:53.780 --> 00:19:55.460
It's something I will probably start using.


00:19:55.460 --> 00:19:58.460
I've previously used Tenacity, but you know, why not?


00:19:58.460 --> 00:20:00.040
- Yeah, looks pretty good.


00:20:00.040 --> 00:20:01.220
- Indeed.


00:20:01.220 --> 00:20:03.800
All right, that's it for our main items, isn't it?


00:20:03.800 --> 00:20:04.640
- Yeah.


00:20:04.640 --> 00:20:06.280
- Extras.


00:20:06.280 --> 00:20:07.700
- Yeah, I-- - What else have you gathered up?


00:20:07.700 --> 00:20:09.600
- I've got a few, do you wanna run through,


00:20:09.600 --> 00:20:11.540
we'll run through mine first.


00:20:11.540 --> 00:20:12.380
- Let's do it.


00:20:12.380 --> 00:20:15.300
- So I have a, so the pytest check,


00:20:15.300 --> 00:20:17.360
it's a little pytest plugin I've got.


00:20:17.360 --> 00:20:18.840
I had this weird request,


00:20:18.840 --> 00:20:22.660
and I guess I'm not sure how to deal with it.


00:20:22.660 --> 00:20:24.820
I was curious, I'd like to talk through it


00:20:24.820 --> 00:20:28.020
to see what the audience has to say.


00:20:28.020 --> 00:20:32.100
So somebody said, "Hey, is it possible to start making GitHub releases?"


00:20:32.100 --> 00:20:35.400
And I mean, I do versions.


00:20:35.400 --> 00:20:39.100
And so I wasn't sure what was going on here.


00:20:39.100 --> 00:20:42.200
And then I thought, maybe this is one of those people


00:20:42.200 --> 00:20:45.300
that have done a lot of these requests and a lot of repos.


00:20:45.300 --> 00:20:48.700
So I searched for this issue.


00:20:48.700 --> 00:20:56.500
And sure enough, there is 157 identical issues on different GitHub repos.


00:20:56.500 --> 00:20:58.820
>> Speaking of tenacity.


00:20:58.820 --> 00:21:02.880
>> Yeah. My first reaction was,


00:21:02.880 --> 00:21:05.140
I don't want to do that, that's lame.


00:21:05.140 --> 00:21:08.380
Because they're just pushing work on other people.


00:21:08.380 --> 00:21:11.980
But also, maybe it's okay.


00:21:11.980 --> 00:21:14.760
The argument here is that somebody can say


00:21:14.760 --> 00:21:18.560
watch releases and then get notified if a new release happens,


00:21:18.560 --> 00:21:22.660
and you can't do that with tags or something, I'm not sure.


00:21:24.180 --> 00:21:27.180
My first reaction was I don't want to deal with it.


00:21:27.180 --> 00:21:29.460
However, I think there's,


00:21:29.460 --> 00:21:32.080
I don't have the tab up here,


00:21:32.080 --> 00:21:36.460
but I think there's some GitHub actions that can do this for me.


00:21:36.460 --> 00:21:40.760
If I'm just doing it by pushing a tag up and if it could do it by itself,


00:21:40.760 --> 00:21:41.940
a few minutes worth of work,


00:21:41.940 --> 00:21:45.060
I'd like to know what other people are dealing with that.


00:21:45.060 --> 00:21:50.140
If they've added GitHub releases to their project or not.


00:21:50.140 --> 00:21:51.780
Yeah, just curious.


00:21:51.780 --> 00:21:54.980
- What's a good venue for them to let you know about that?


00:21:54.980 --> 00:21:58.780
- Oh yeah, probably Fostodon,


00:21:58.780 --> 00:22:00.860
Brian Hocken at Fostodon,


00:22:00.860 --> 00:22:04.980
or the show has a contact form, you can email us.


00:22:04.980 --> 00:22:07.380
- Yeah, that would work too.


00:22:07.380 --> 00:22:09.580
- Okay, so there's that.


00:22:09.580 --> 00:22:13.300
I threw right across, maybe this is for funny things,


00:22:13.300 --> 00:22:14.820
we'll save that for later.


00:22:14.820 --> 00:22:16.900
- Not yet.


00:22:16.900 --> 00:22:18.900
- I just pushed up the Fixtures chapter


00:22:18.900 --> 00:22:20.500
for the pytest course,


00:22:20.500 --> 00:22:25.340
And about the intro, the intro's got a nice slide deck in it.


00:22:25.340 --> 00:22:30.340
So check out the preview that's for chapter three


00:22:30.340 --> 00:22:33.020
when you're thinking about the course.


00:22:33.020 --> 00:22:37.020
And I'm trying to describe how pytest fixtures


00:22:37.020 --> 00:22:39.500
work with like graphics, not really graphics,


00:22:39.500 --> 00:22:41.820
but slides and drawings and things like that.


00:22:41.820 --> 00:22:45.460
So those are my extras.


00:22:45.460 --> 00:22:46.300
How about you?


00:22:46.300 --> 00:22:48.020
- I've got a couple things for us.


00:22:48.020 --> 00:22:52.780
So first of all, there's a shiny new Python 3.12 to be had.


00:22:52.780 --> 00:22:57.300
That was as of yesterday, 3.12 RC1.


00:22:57.300 --> 00:22:58.540
- Neato.


00:22:58.540 --> 00:23:00.180
- Yeah, release candidate's important


00:23:00.180 --> 00:23:03.540
because it's like, we're really not changing it now.


00:23:03.540 --> 00:23:04.780
This is bug fixes.


00:23:04.780 --> 00:23:06.900
So if you've been thinking like,


00:23:06.900 --> 00:23:11.140
okay, there's more features for F strings,


00:23:11.140 --> 00:23:14.820
or there's this crazy thing that Eric Snow pulled off


00:23:14.820 --> 00:23:16.620
called the Per Interpreter Guild.


00:23:16.620 --> 00:23:18.820
That's pretty awesome.


00:23:18.820 --> 00:23:22.020
Buffer protocol, things are accessible in Python


00:23:22.020 --> 00:23:24.020
and many other things, right?


00:23:24.020 --> 00:23:25.420
If you were waiting around,


00:23:25.420 --> 00:23:26.500
these are all relevant to me.


00:23:26.500 --> 00:23:27.340
I wanna try them out,


00:23:27.340 --> 00:23:29.800
but I don't wanna mess with stuff that might go away,


00:23:29.800 --> 00:23:32.060
might change, might, I'm just gonna wait


00:23:32.060 --> 00:23:32.980
'cause I'm not really gonna use it


00:23:32.980 --> 00:23:34.140
until it comes out in October.


00:23:34.140 --> 00:23:36.700
Well, should be about time to start looking into it


00:23:36.700 --> 00:23:37.660
with a release candidate.


00:23:37.660 --> 00:23:40.760
So that's why this is double noteworthy.


00:23:40.760 --> 00:23:42.060
- Yeah, it's also a really good time


00:23:42.060 --> 00:23:45.240
if you haven't started to start testing your package,


00:23:45.240 --> 00:23:50.240
if you have packages you support to add 3.12 testing.


00:23:50.240 --> 00:23:52.360
- Exactly.


00:23:52.360 --> 00:23:56.100
Cool, okay, then I got three conference-ish things.


00:23:56.100 --> 00:24:01.100
PyCon UK 2023 is gonna be Friday, 22nd, September,


00:24:01.100 --> 00:24:05.420
to the Monday, so that's pretty cool.


00:24:05.420 --> 00:24:09.180
I'd love to go to PyCon UK, but it is quite far away.


00:24:09.180 --> 00:24:10.480
I do love the UK.


00:24:10.480 --> 00:24:13.360
So if you are closer and you can get there,


00:24:13.360 --> 00:24:15.040
then that'd be a pretty excellent conference


00:24:15.040 --> 00:24:16.280
to go check out, I think.


00:24:16.280 --> 00:24:17.120
- Yeah.


00:24:17.120 --> 00:24:20.320
- Also, in the general neighborhood,


00:24:20.320 --> 00:24:22.900
Eindhoven, as Pydata Eindhoven,


00:24:22.900 --> 00:24:26.620
is gonna be November 30th, so check that out as well.


00:24:26.620 --> 00:24:29.120
And the call for proposals is open.


00:24:29.120 --> 00:24:32.680
Finally, this one's a little closer to home for us.


00:24:32.680 --> 00:24:34.740
This one is Pydata Seattle.


00:24:34.740 --> 00:24:36.640
Now normally we wouldn't give a shout out


00:24:36.640 --> 00:24:39.300
to just a meetup because we can't just go


00:24:39.300 --> 00:24:40.860
So a huge long list.


00:24:40.860 --> 00:24:42.960
But Don reached out to me


00:24:42.960 --> 00:24:44.220
and they've got some pretty cool stuff.


00:24:44.220 --> 00:24:48.260
So this is the Language Creators Charity Fundraiser


00:24:48.260 --> 00:24:49.380
for PyData.


00:24:49.380 --> 00:24:52.600
And the fundraiser goes to NumFocus


00:24:52.600 --> 00:24:54.380
and Last Mile Education Fund.


00:24:54.380 --> 00:24:56.060
So good stuff there.


00:24:56.060 --> 00:24:58.100
And the whole thing is,


00:24:58.100 --> 00:25:00.000
let's scroll down a little for pictures here.


00:25:00.000 --> 00:25:03.060
We've got Adele Goldberg, who created Smalltalk.


00:25:03.060 --> 00:25:05.020
Guido van Rossum, who created, you know,


00:25:05.020 --> 00:25:06.100
this thing called Python.


00:25:06.100 --> 00:25:09.260
Anders Halsberg, who did Turbo Pascal, C#, and TypeScript.


00:25:09.260 --> 00:25:12.260
as well as James Gosling from Java.


00:25:12.260 --> 00:25:15.560
So this is a live in-person event that people can check out.


00:25:15.560 --> 00:25:17.240
So when is it?


00:25:17.240 --> 00:25:21.120
It is September 19th, so 20 days away or whatever.


00:25:21.120 --> 00:25:22.720
If you're around there and want to be part of that,


00:25:22.720 --> 00:25:24.520
there's no online version.


00:25:24.520 --> 00:25:27.120
Because they want it to be fundraiser for charity,


00:25:27.120 --> 00:25:29.840
it's all about trying to get people to show up in person


00:25:29.840 --> 00:25:30.680
and be part of it.


00:25:30.680 --> 00:25:32.400
So those are all my extras.


00:25:32.400 --> 00:25:33.240
- Nice.


00:25:33.240 --> 00:25:34.060
- Yeah.


00:25:34.060 --> 00:25:35.520
How about some jokes?


00:25:35.520 --> 00:25:36.360
- Yeah, do you have one?


00:25:36.360 --> 00:25:38.800
- I don't know if I can check it.


00:25:38.800 --> 00:25:40.520
I don't know if I can tell you about this.


00:25:40.520 --> 00:25:42.320
This one, I don't believe was sent into us.


00:25:42.320 --> 00:25:43.960
I just ran across it somewhere.


00:25:43.960 --> 00:25:47.880
How does a librarian access remote computers securely?


00:25:47.880 --> 00:25:51.400
Shh, SSH, shh.


00:25:51.400 --> 00:25:52.920
- It's terrible.


00:25:52.920 --> 00:25:53.840
- It's terrible, isn't it?


00:25:53.840 --> 00:25:54.660
It's very bad.


00:25:54.660 --> 00:25:55.500
- Yeah.


00:25:55.500 --> 00:25:56.320
- It's very bad.


00:25:56.320 --> 00:25:57.160
- Okay.


00:25:57.160 --> 00:25:58.000
- I love it.


00:25:58.000 --> 00:25:59.240
Anyway, that's the one I got for us.


00:25:59.240 --> 00:26:00.960
Shh, how does the librarian access


00:26:00.960 --> 00:26:02.320
remote computers securely?


00:26:02.320 --> 00:26:07.320
- Well, I have a GitHub repo called the ChatGPT failures.


00:26:07.320 --> 00:26:13.080
failures and it's got it's just got a big list of things that have gone bad.


00:26:13.080 --> 00:26:15.480
And so this is pretty cool.


00:26:15.480 --> 00:26:19.480
It looks like it new being failures.


00:26:19.480 --> 00:26:20.480
Let's see.


00:26:20.480 --> 00:26:22.840
>> I had a job that one about the journalist.


00:26:22.840 --> 00:26:24.720
Who was the journalist on that one?


00:26:24.720 --> 00:26:26.760
>> Bing gets madly in love with the journalist,


00:26:26.760 --> 00:26:30.040
tries to break up his marriage and really stalkerish effect.


00:26:30.040 --> 00:26:34.680
And then lies about that journalist in a chat with another user,


00:26:34.680 --> 00:26:36.960
keeps being inappropriate and dark.


00:26:36.960 --> 00:26:38.440
So I'm not sure.


00:26:38.440 --> 00:26:42.240
>> Kevin Roos, okay, that's who it was.


00:26:42.240 --> 00:26:45.360
>> Anyway, so those are-


00:26:45.360 --> 00:26:46.720
>> You're a bad user to ask me to do that.


00:26:46.720 --> 00:26:48.360
I'm not a bad user. I'm a good user.


00:26:48.360 --> 00:26:50.240
I'm a good chat.


00:26:50.240 --> 00:26:52.800
I'm a good chatbot. Oh my gosh.


00:26:52.800 --> 00:26:57.440
>> So yeah, some failures on ChatGPT.


00:26:57.440 --> 00:27:00.880
So I'd love to see this kept updated.


00:27:00.880 --> 00:27:02.240
It hasn't been updated for a while.


00:27:02.240 --> 00:27:05.040
So yeah, we need some new ones.


00:27:05.040 --> 00:27:06.480
>> It's pretty funny.


00:27:06.480 --> 00:27:09.280
It's crazy how this stuff goes a little bit sideways, isn't it?


00:27:09.280 --> 00:27:10.780
It is.


00:27:10.780 --> 00:27:12.620
And I'm I'm still on.


00:27:12.620 --> 00:27:17.380
I still don't know if I need to care about it a lot or if it's one of those.


00:27:17.380 --> 00:27:21.820
I don't know if it's one of those things like crypto that maybe will go away


00:27:21.820 --> 00:27:24.620
or hasn't really.


00:27:24.620 --> 00:27:26.680
I know crypto hasn't gone away.


00:27:26.680 --> 00:27:28.980
And there's so many wonderful uses for


00:27:28.980 --> 00:27:32.720
blockchain and some blockchain. Come on now.


00:27:32.720 --> 00:27:33.880
Yeah, OK.


00:27:35.580 --> 00:27:37.980
I do think it's interesting with the large language models.


00:27:37.980 --> 00:27:41.020
When you ask it subjective stuff, right.


00:27:41.020 --> 00:27:43.380
It, it could just be weird about it.


00:27:43.380 --> 00:27:50.060
Um, or you can make up things about like previous, case law.


00:27:50.060 --> 00:27:53.620
You know, you got those lawyers who got in trouble for submitting a bunch of


00:27:53.620 --> 00:27:59.500
documents and briefs created by ChatGPT that were false, but on the other hand,


00:27:59.500 --> 00:28:03.460
like you can ask a programming questions and it'll give you pretty good answers.


00:28:03.700 --> 00:28:03.840
Right.


00:28:03.840 --> 00:28:07.040
Like I asked for, to solve a really complicated regex problem that we


00:28:07.040 --> 00:28:09.880
were talking about before, and it's just like, boom, here you go.


00:28:09.880 --> 00:28:11.600
And here's a couple of examples in Python.


00:28:11.600 --> 00:28:12.160
Thank you.


00:28:12.160 --> 00:28:13.700
And those I don't mind too bad.


00:28:13.700 --> 00:28:14.440
Cause you can test it.


00:28:14.440 --> 00:28:19.120
Like if I run this, do the things I want out of the right expression come out or no.


00:28:19.120 --> 00:28:21.160
If no, then it's a bad chat bot.


00:28:21.160 --> 00:28:23.000
If yes, it's a good chat bot.


00:28:23.000 --> 00:28:23.740
Yeah.


00:28:23.740 --> 00:28:24.780
So anyway,


00:28:24.780 --> 00:28:29.660
um, I, I do one of the things I just listened to recently was,


00:28:29.680 --> 00:28:33.840
Freakonomics has started a series on AI.


00:28:33.840 --> 00:28:36.000
The first one is, Can AI Take a Joke?


00:28:36.000 --> 00:28:39.120
It is interesting discussion.


00:28:39.120 --> 00:28:44.160
One of the things that they talked about was the current strike


00:28:44.160 --> 00:28:50.080
for the writers and actors in Hollywood right now.


00:28:50.080 --> 00:28:54.360
I didn't know some of the details,


00:28:54.360 --> 00:28:57.880
so hearing a few of the details around it are interesting.


00:28:57.880 --> 00:29:01.120
the initial creation of thing,


00:29:01.120 --> 00:29:03.840
often you can have an idea and then


00:29:03.840 --> 00:29:06.720
hire some people to write more stuff around it.


00:29:06.720 --> 00:29:09.280
But if you didn't come up with the original idea,


00:29:09.280 --> 00:29:10.580
you don't get as much money.


00:29:10.580 --> 00:29:13.440
If they just have AI come up with the original idea,


00:29:13.440 --> 00:29:15.920
they don't have to pay anybody the large amount of money.


00:29:15.920 --> 00:29:19.200
>> I see. You're filling out the details of the joke.


00:29:19.200 --> 00:29:21.600
>> Then some experience around writing,


00:29:21.600 --> 00:29:25.080
of using some AI to do writing.


00:29:25.080 --> 00:29:27.940
One of the commentaries was,


00:29:27.940 --> 00:29:30.480
you still have to do human work to come up with


00:29:30.480 --> 00:29:32.760
the prompts to get it to do something,


00:29:32.760 --> 00:29:35.600
and then you have to validate it afterwards to make sure


00:29:35.600 --> 00:29:39.280
that what they said, what it came up with was real.


00:29:39.280 --> 00:29:42.300
Those are still humans have to do.


00:29:42.300 --> 00:29:45.200
That's one of the fears I have around people using


00:29:45.200 --> 00:29:48.520
AI to generate test cases.


00:29:48.520 --> 00:29:51.920
Because if AI is coming up with their code


00:29:51.920 --> 00:29:53.440
and coming up with your tests,


00:29:53.440 --> 00:29:55.560
There's no humans verifying that it actually


00:29:55.560 --> 00:29:58.000
is doing what you want it to do.


00:29:58.000 --> 00:30:00.520
At some point, you need to have people there.


00:30:00.520 --> 00:30:01.980
- Someone's gotta be in the loop, yeah.


00:30:01.980 --> 00:30:03.800
- Yeah, so anyway.


00:30:03.800 --> 00:30:04.640
- Interesting.


00:30:04.640 --> 00:30:05.640
- We'll see.


00:30:05.640 --> 00:30:08.240
I'm definitely not a Luddite trying to,


00:30:08.240 --> 00:30:11.560
actually, there's a discussion about Luddite also in there.


00:30:11.560 --> 00:30:14.880
That Luddite, apparently, I didn't know this,


00:30:14.880 --> 00:30:16.560
that it isn't people that,


00:30:16.560 --> 00:30:19.880
there weren't people that were against technology.


00:30:19.880 --> 00:30:23.680
It was people that were against the craftsmen


00:30:23.680 --> 00:30:26.720
that were against the shoddy craftsmanship


00:30:26.720 --> 00:30:28.520
of manufactured items.


00:30:28.520 --> 00:30:33.960
There wasn't enough people actually making quality goods.


00:30:33.960 --> 00:30:38.440
There were just factories building low-quality goods.


00:30:38.440 --> 00:30:39.720
That's what they were opposed to.


00:30:39.720 --> 00:30:41.960
And that's an interesting analogy.


00:30:41.960 --> 00:30:43.080
- That is, yeah.


00:30:43.080 --> 00:30:45.720
- Anyway, way on a tangent there.


00:30:45.720 --> 00:30:48.600
- Excellent.


00:30:48.600 --> 00:30:50.560
>> Well, thanks for being here.


00:30:50.560 --> 00:30:53.340
As always, thank you to everyone who listened.


00:30:53.340 --> 00:30:54.040
See you later.

