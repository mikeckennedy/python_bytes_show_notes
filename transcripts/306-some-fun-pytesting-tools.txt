00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 306. Recorded October 18 2022. I'm Michael Kennedy. And I'm Brannock. And very exciting to have a whole bunch of things to share this week. Also, I want to say thank you to Microsoft for startups for sponsoring yet another episode this one, Brian, we've had a very long, dry summer here in Oregon. And I was afraid that we would have like terrible fires and it'd be all smoky and all sorts of badness. And there have been plenty of fires in the West, but not really around here for us this summer. We kind of dodged the bullet. Until like today.

00:00:40 It's a little smoky. Today,

00:00:41 we smoke go inside. Yeah, I thought we dodged it. Sadly, no.

00:00:47 So I think it's affecting my voice a little bit. So, apologies for that.

00:00:50 We'll put that that filter on you. And we'll make it sound like someone else. And yeah, he'll be fine. Yeah. Yeah, it's also affecting me. So who knows? But anyway, we'll make our way through, we will bite through the fire to bring you the Python news, hopefully. Hopefully, they get that actually put out soon. Yeah, let's let's kick it off. What's your first thing?

00:01:13 So I've got? Let's put it up. So I've got at the stream. I've got awesome pipe this speed up. So this is awesome. Yeah. So actually, what some people may have noticed the testing code is not really going on lately. And so one of the things that makes it easier for me is when I see cool testing related articles, I don't have a decision anymore, I can just say, hey, it's gonna go here. Now testing code will eventually pick up something again, but I'm not sure when. So for now, if I find something cool, like this article, I'll bring it up here. So this is

00:01:47 I make a show up every week. Yeah, my fun stuff anyway.

00:01:51 So this is a GitHub repo. And we're seeing kind of seeing more of this, of people writing, instead of blogging, they just write like a readme as a repo.

00:02:03 I know this is such a weird trend. I totally get it. And it's good. But it's also weird.

00:02:08 But it's kind of neat that people can update it. So they can just keep it up. And you can see people

00:02:14 PR to your blog posts. That's not normally how it goes. Yeah.

00:02:17 Not sure. But it's probably harder to throw Google Analytics at it, right? Oh, yeah. Well,

00:02:24 we'll see like, whether you should do that or not.

00:02:27 So anyway, so this is this comes to us from Nate Zhu pan. Cool name, by the way. And he also has a we're will include a link in the show notes to a talk he gave at a Plone in Namara, 2022. So just recently, anyway, so they, he goes through best practices to speed up your PI test suite. And he's in, he's just gonna list them all at the top here, which is nice. Hardware first, like? Well, first of all, when he goes into the discussion, he talks about measuring first. So before you start speeding anything up, you should measure because you want to know if your changes had any effect. And if and if it's making support a little bit weirder, then you don't want to make the change if it's only marginal. So I liked that he's talking about that if like each step of the way here, measure to make sure it makes a difference. Right. So first off, and I'm glad he brought this up is check your hardware. Make sure you've got the hard fast hardware if you have it. So one of the and I've noticed this before as well is. So here, we got measure first. But in some CI systems allow you to have self hosted runners, and it's something to consider the whether your your CI is in the cloud, or you've got virtual machine like a server with some virtual machines around to be able to run your test runners, they're not going to be as fast as physical hardware if you've got some hardware laying around that you can use. So that's something to consider to throw hardware at it. And then test collection time some of the some of the problems with the speed of pi test is using if you've got if you run it from the top level directory of a project, and you've got tons of documentation and tons of source code, it's going to look everywhere. So don't let it look in those places. So there's, there's ways to turn that off. So with no requesters and, and giving it that that directory. I also wanted to point out he didn't talk about this in the article, but I want to point out that something to use is Oh, it went away test paths. So use tests pass to say specifically the so the no requesters has essentially avoid these directories. But test pass pretty much says this is where the tests are. Look here. So those are good.

00:04:51 Nice. Yeah. Before on some projects, like on the top Python training website, where there's got a ton of text files and things laying around And I've done certain things like that to exclude pi test and pi charm and other other different things to look there in those places where like, there's no code, but there's a ton of stuff here, and you're gonna go hunting through it. Yeah. So like, I really sped up the startup time for a pyramid scanning for files that have route definitions in them, right for URL endpoints, because it would look through everything apparently, doesn't matter, at least looking for files to directories with tons of stuff. And this like, it makes a big difference. If you have a large project for sure.

00:05:32 Yeah, it's significant. So it was something to think about. And documentation to you don't, unless you're really testing your documentation, you don't need to look there. So hardware fast code make election fast. This one is something I haven't used before, but I'll play with it. Python don't write byte code I environmental flag. I guess it comments that it might not make a big difference for you, but it might so you know, I don't know. So Python, right writes the bytecode. Normally, and maybe it'd be faster, if you didn't do that work during test phase, we'll try. There's a way to disable pi test plugins, to let's just go built in PI test plugins, you can say no, like no nose, or no doc test, if you're running those, I haven't noticed that it speeds it up a lot. But it's again, it's something to try. And, and then a subset of tests. So this is especially important if you're in TDD style. And that's and one of the things that I think some people forget is your test, if you've got your tests organized, well, you should be able to run a subset anyway. Because you're you've got like the feature you're working on is in a subdirectory of everything else. And just run those when you're working on that feature. And then you don't run the whole suite. They there's a discussion and this, this goes along with the unit tests, mostly but disabled networking, unless you intending to have your code using networks, that network connections, you can disable that for a set of tests or, or the whole suite, and then also dis access, trying to limit that. And he includes a couple of ways to ensure those. And then a really good discussion, fairly chunky discussion on database access and optimization to databases, including discussion around, roll back, and, and there was something else that I hadn't seen before. Let me see if I can remember.

00:07:36 Yeah, there's some interesting things. I think I know you've spoken about it in your PI tests course about using fixtures for setup of those common comment type things, right. So so one

00:07:48 of the things I am not familiar with is truncate have used the database truncate before. No. So apparently, that it allows you to set the whole database up, but delete all the stuff out of it, like the empty tables. And, and that I mean, if if part, if they'll big chunk of the work of setting up data is setting, getting all the tables correct, then truncate might be a good way to clean up and then refill them if you need to. But also Yeah, like you said to paying attention to, to fixtures, that's really good. And then the last thing he brings up is just running in parallel by default PI test runs single, each each test one at a time. And if you've got a code base that you're testing that can allow like you're not testing a hardware resource or something that you can allow parallel to go ahead and turn those on. Turn on the use x distant turn or something else and turn them in parallel. So really good list. And I'm glad he put it together. Also very entertaining talk. So give it give his talk a look.

00:08:51 Yeah, absolutely. Brandon. Now the audience says people are working on trying to convince me that tested live next to the file they are testing rather than in a test directory. I created a test directory that mirrors my app folder structure, with my tests in there any opinions?

00:09:06 I don't like that. But

00:09:10 what do you do? I honestly,

00:09:11 if you like it, I guess okay, I've heard that before. But I know I haven't heard people in Python recommending that very often.

00:09:18 Yeah, for me, I feel I understand why like, Okay, here's the code. Here's the test, maybe, maybe the test can be exactly isolated to what is only in that file. But sometime, you know, like, soon as you start to blend together, like okay, well, this thing works with that class to achieve its job but you kind of it kind of starts to blur together and like well, what if those are the wrong places? Well, now it's like half year and I don't know it just it leads to like lots of I don't know, it's like trying to go to your IDE and say I have these seven methods. Please write the test for it. It says test function one test function two tests function three right now. That does not really what you're after, but I feel it kind of leads leads towards that like, well, here's the file, let's test all the things in this file and which is not necessarily the way I would think about testing all well,

00:10:10 also, are you really test? I mean, it kind of lends itself to starting to test the implementation instead of testing the behavior,

00:10:18 yes exam,

00:10:19 because you might have if you've got a file that has no test associated with it, somebody might say, Well, why is the test for that or like, well, that file is just an implementation detail. It's not something we need to test because you it's, you can't access it directly from the API. So

00:10:34 right, it's completely covered by these two other other tests. And oh, by the way, they're in other folders, go find them. Also, the stuff you're speaking about here by like making collection fast, and such also is a little bit tricky. Potentially sharing fixtures might be a little more tricky that way. I don't know. My vote is, is to not mix it all together. Plus, do you want to ship your test code with your product? Maybe you do. But often you don't? Is it harder? Harder? If they're all woven together?

00:11:03 That's true. Yeah.

00:11:05 Yeah. So anyway, that's the same thing. Also, Henry Shriner out there kind of says, I don't like distributing tests in wheels on the STS. So like a test folder as well. Yeah. I think Brandon, the vote here is test folder. But you know, that's just just us. Awesome. All right. Well, yeah, it's good. Fine. You want to hear my first one. This is, this is a bit of a journey. It's a bit of a journey. So let's start here. So I have a perfectly fine laptop that I can take places if I need to, for work, take you to the coffee shop to work. If I'm going on like a two week vacation. It's definitely coming with me. Right? It's even if my intent is to completely disconnect, I still have to answer super urgent emails. If the website goes down. Any of the many websites I seem to be babysitting these days, like I've got to work on it. Like there could be urgent stuff, right? So I just I take it with me. But I'm on this mission to do that less, right? Because I have a 16 inch MacBook Pro. It's pretty heavy. It's pretty expensive. don't necessarily want to like, take it camping with me. But what if what if something goes wrong? Brian, I gotta fix it. Do I really want to drive the four hours back? Because I got a message that like, you know, the websites down and Everyone's upset, can't do their courses, or they can't get the podcast? No, I don't want that. So I would probably take the stupid thing and try to knock it away. So I'm on this mission to not do that. So I just wanted to share a couple of tools and you know, people if they've got thoughts, I guess probably the YouTube stream chat for this would be the best or on Twitter. They could let me know but I think I found like the right combination of tools that will let me just take my iPad and still do all the the dev opsi life that I gotta lead because it's not good for answering emails. You know, I have like minor RSI issues and I can't type on an iPad not even a little like keyboard that comes with it. Like I've got my proper Microsoft ergonomic sculpt. And you can plug that into an iPad. But once you start taking that, you know, like, well, you might as well just take the computer. So two tools, I want to give a shout out to prompt by panic. Panic is a Portland company. So shout out to the local team.

00:13:17 Is it at the disco or?

00:13:20 Exactly? They don't really freak out that much of the disco, panic there. But prompt is a SSH client for iOS in particular for iPad, but you could I mean, if you wanted to go extreme, you could do this on your phone. You know how, how far you go in camping height? Or where are you going? And so this lets you basically import your SSH keys and do full on SSH like you would in your iTerm to or are turned on

00:13:46 or turned into a dump terminal. Yeah, and it

00:13:49 does. So like you can easily log into the Python bytes server and over SSH, do all the things that you need to do. So you got to get into the server and you gotta like okay, well I really have to just go restart the stupid thing or change the connection string because who knows what right? You can you do it? It seems to work pretty well the only complaint The only complaint that I have for it is it doesn't have nerd font. So my only caution to this is serious business don't laugh my nerd fonts my like, I can't do pls I can't do all my posh and get like the cool, like show prompt with all the information. No, it's all just boxes. It's rough. Now it's fine. It would be nice, but it does have cool things like if you need to press ctrl shift that or you know, it has like a special way to pull up the all those kinds of keys you press control and then some other type of thing or, you know it has up arrow down arrow as like if you want to cycle through your history. It's got a it's got a lot of cool features like that where you kind of integrate that so it works. I think it's gonna work. I think this is the one half of the DevOps story. Okay, the other the other part is oh my goodness What if it's a code problem? Do I really want to try to edit code over this prompt thing through the iPad on knowing, like Emacs? Or what am I getting? No, I don't want to do that. So the other half is GitHub, in particular, the VS code integration into GitHub. So if you remember, like you're have pull up on the screen, just with any public repo or your private ones. This is my ginger partial thing for like, basically integrating htm x with Flask. But you can press the.if, you press.it turns that whole thing into a cloud hosted VS code session. That's awesome. Right even has autocomplete. So if I hit like, dot there, you can see it on my autocomplete. That's pretty cool. That's pretty cool. But how do you press dot when you're on a web page, and an iPad, there is no dot. Because you can't pull up the keyboard, the only thing you do pull up a keyboard is go to an input section. And once you're in input, well, that just types out it doesn't do that. Why? So here's the other piece. All right, here's the other piece. So you go over here and you change github.com/michael Kennedy slash enjoy partials to github.com/dev/whatever. From gun. So if you gotta edit your code, you just go change the.com to dot Dev, and you have an editor, you can check it back in, like in my setup, if I commit to the production branch, it kicks off a continuous deployment, which will like automatically restart the server and reinstall like, the things that might need that if it has a new dependency or something. So I could literally just come over here, make some changes, do a PR over to the production branch or push somehow merge over to the production branch. And it's done. It's good to go. And not awesome.

00:16:42 Just edit live, just, you know, edit your server life. No,

00:16:46 I saw somewhere somebody was complaining about the prompts. And it's really hard for me to edit my code on the server, like, why why would you know, it shouldn't be hard, you don't do that. Don't do

00:16:58 that. So I went to try to try this, but I have to do the two factor authentication to get into my account. So

00:17:05 yeah, yeah, you got it. But Brandon also says, hey, I'll buy you a keyboard case. I absolutely hear you. And I would love you have no idea how jealous I am people that can go and type on their laptops and type on the small things like RSI, I would be, I would be destroyed in like an hour or two. If I did, it's like, it's not a matter of do I want to get the keyboard and I like, I just can't. So anyway. Not that bad to be me. But I'm not. I'm not typing on like small square keyboards. It just didn't work. It's just something I can't do.

00:17:35 Okay, so just

00:17:39 exactly, no, I just I like because when I was 30, My hands got messed up. And they just they almost recover but not 100%. Right. So I

00:17:48 know you got more going on than I do, though. So I just got back from four days off, and I took the iPad. And I said, I had to answer a few emails. But the for me is just short emails, the little keypad to type inside cover thing and works fine, even though they're sort of those are expensive. And you add, oh, I want an iPad. But I also want the keyboard thing and I want the pencil. Suddenly it's like two almost twice as much. It is

00:18:15 it is absolutely. And yeah, just people have been paying attention for the last two hours, Apple just released new iPads with him too. So people go check that out if they want to spend money. I'm happy with mine. I'm gonna keep it. Alright. Before we move on to the next thing, Brian. Okay, let me tell you about our sponsor this week. So as has been the case, usual, thank you so much Microsoft. For startups, founders hub is sponsoring this episode. We all know that starting a business is hard. By a lot of estimates, over 90% of startups go out of business in just the first year. And there's a lot of reasons for that. Is it that you don't have the money to buy the resources? Can you not scale fast enough? Often, it's like, you have the wrong strategy? Or do you not have the right connections to get the right publicity, or you have no experience in marketing? Lots, lots of problems, lots of challenges. And as software developers are often not trained in those necessary areas, like marketing, for example, but even if you know that, like there's others, right. So having access to a network of founders, like you get in a lot of accelerators, like Y Combinator would be awesome. So that's what Microsoft created with their founders hub. So they give you free resources to a whole bunch of cloud things, Azure, GitHub, others, as well as very importantly, access to a mentor network where you can book one on one calls with people who have experience in these particular areas, often, many of them are founders themselves. And they've created startups and sold them and they're in this mentorship network. So if you want to talk to somebody about idea validation, fundraising, management and coaching, sales and marketing, all those things, you can book one on one meetings with these people. To help get you going and make connections. So if you need some free GitHub and Microsoft Cloud resources, if you need access to mentors, and you want to get your startup going, make your idea a reality today with the support from Microsoft, for startups, founders hub, it's free to join doesn't have to be venture backed, doesn't have to be third party validated. You just apply for free at Python by sight FM slash founders hub, one 822. The link is in your show notes. Thanks a bunch to Microsoft for sponsoring our show. What's next?

00:20:32 Well, that article had already read about the speeding up by test it had a whole bunch of cool tools in it. So I wanted to go through some of the tools that were in the article that I thought were neat. One of them for profiling and timing was a thing called hyperfine. And this is a not I don't think it's a Python thing. But like for Max, you had to brew install it. But one of the things it does is you can give it, you give it like two things. And it runs both of them. And it can run it multiple times and, and then give you statistics comparing them. So it's a really good comparison tool to you know, like, if you're testing your test suite, to see how long it runs. Maze will run out a couple times and see. But for

00:21:19 people who didn't see yet, the example from that first article, you covered a lot of those were CLI flags, right? Like dash dash, and no no's for disabling the plugin and so on. So you could have two commands on the command line, whatever you you'd like, basically change the command line arguments to determine those kinds of things. Right? Yeah,

00:21:41 like Yeah, exactly. So run it a couple times and run it, run the test suite a couple times each. And just to see if I add the if it had these no flags, or this other flag, or with the environmental variable? Actually, I don't know how you could do that in there. You can set environmental variables in command line, maybe,

00:21:58 yeah, I'm sure that you can somehow, yeah, EXPORT statement or something. Who knows?

00:22:03 At the very least, you can run the same command twice, you can run it, set the environmental variable, and then run it again to see if it makes a difference. So yeah, so there's that that was neat. I don't know why I've got the API reference in Oh, the thing I wanted to talk about was duration. So let me find that. I think I lost it. So we did talk about duration, durations, oh, oh, oh, here it is. So durations, if you give it a number it like durations 10 It pi test will give you like the 10 slowest tests and tell you how far how slow they are. But you can if you don't give it anything, it just does all of it. But the other thing that's been fairly recent, it wasn't there. When I started using PI test is durations min. So you can you can give it when you give it durations with blank or in zero it it times everything. But you can but that might be overwhelming. So you can give it a minimum duration in seconds to only include only time the tests they're all over a second or something like that.

00:23:06 Right? Right. It was really fun. If it's 25 milliseconds, like just I don't want to see it.

00:23:11 Yeah, I'm not gonna spend time trying to speed that up. Yeah. Another cool thing brought up was pi instrument, which is a way to, it's a very pretty way to look at, you know, the times that you're spending on different things. It's not just for testing, but you could use it for other stuff. But apparently, there's a in the User Guide, there is specifically how to profile your tests with PI test using PI instrument. So that's a cool, cool bit of documentation. This doesn't this doesn't actually look obvious. So maybe I'm even looking at this wrong. But I'm glad. I'm glad they wrote this up. So this is yeah, it's kind of cool.

00:23:49 Basically, profiling your towel interesting. And you do it as a fixture. Yeah. And so you create the profiler, you start the profiler, then you yield nothing, which triggers the test to run, and then you stop the profiler and do the output. That's really cool.

00:24:05 Yeah, pretty cool way to do that. So profiling each test. Yeah.

00:24:09 It's a bit mind bending on the CO routines.

00:24:12 So it's kind of cool. They're using it as a fixture. Because if you had the fixtures set up as a, like it's set up by default as a function, so it'll go around every function. But if you set it up as a module, you could just find the slow module test modules in your system, which might be easier way to speed things up for looking anyway right. Oh, he Tito I was I was thrilled that my my little pipe desk skip slow plugin that I developed as part of it. I didn't even come up with the ideas for the code. But that came out of the pipe test documentation, but it wasn't a plugin yet, but I developed this plugin during writing the second addition to the book and it is showed up in his article which is cool. More interesting is pi test socket, which is a plugin that can turn off it just turns off socket, Python socket calls. And and then it raises a particular exception. So it doesn't like if you just install it, it doesn't turn things off, you have to pass in a disabled socket to your test suite. And then it turns off accessing the external world. So this is kind of a cool way to easily find out which tests are failing because your network is not connected. So go figure out,

00:25:28 if you want to say definitely don't talk to the network, or don't talk to the database, turn off the network and see what happens.

00:25:33 Yeah, and then you can, I mean, but even if you did want part of your test suite to access the network, you could test it to make sure that there are other parts of your test suite that are accessing it when they shouldn't. So that'd be cool debugging D, and then filesystem. stuff, too, there's pi, fake Fs fake file system, that you can mock filesystem. So even things that you want to write, you don't actually have to have the files left around, you can leave them around just long enough to test them. So you can use this as perfect. And then the last thing I thought was cool was away, there's a thing called Blue eraser, that, that you can attach to a Git, GitHub, ci, to check to check it in merges. So if somebody merges something you can test, you can check to see if they've terribly slow down your test suite. So it kind of reports that it doesn't I don't think it fails on slower tests, but it just sort of reports or reports what's going on. So yeah, gives you a little report of like, the nice what happened on the branch. And if the test suite slow down. Thanks to now.

00:26:37 Yeah, that's a cool project. Blue racer. Nice. Okay. It's automatic, which is lovely. Yeah. So nice. All right. Well, I've got one more item for us as well, Brian. Yeah. So we talked a little bit about you talked about pi upgrade. The last show, I think it was Yeah, we talked about some of these other ones. So I want to talk about I'm gonna give a shout out to a refurb. Very active project last updated two days ago, 1600 stars. And the idea is basically you can point this at your code and just say, here are the things that are making it seem like the old way of doing things, you should try doing it. The Norway. So for example, here's something it's it's asking if the file name is in brat in a list, right? The one of the ways you can see if, if file name equals x, or file name equals y or file name equals Z, you can say if file name in x comma y, comma z, right? And that's a more concise and often considered more Pythonic way. But do you need a whole list allocated? Just to ask that question, what about a tuple. And here we have a with open filename as f then contents F dot read. And we have the split lines and so on. And so well, if you're using path lib, to say path dot read text, you don't need the context manager, you don't need two lines, just do it all in one. And so on a simple little bit of code here, they just run refurb against your this example, Python file. And it'll say use tuple. XYZ instead of list XYZ for that in case. And then what I really liked about is it finds like exactly the pattern that you're doing. So it says you're using with open something as f, then value equals F dot read, use, you know, value equals path of x dot read text, one line, it gives you like, pretty, it doesn't say you should use path, read text, it gives you in the syntax of here's the multiple lines, you did do this instead. Nice, right?

00:28:39 I don't I don't think I've ever used read text. So I learned something. I hadn't either.

00:28:43 But you know what I do now. It also says you can replace x starts with y, or starts with Z with starts with x, or y comma z as a tuple. And that will actually test. Yeah, one or the other. Okay? It says instead of printing with an empty string, there's no reason to allocate an empty string, just call print blank that does the same effect. Just, there's a whole bunch of things like that, that are really nice here. And yeah, just you can ask it to explain. You're like, dude, what's going on here? He told me, you told me to do 123 What's the motivation and you'll get kind of like a Help Text. Here's the bad version. Here's the good version. Here's why you might consider that. So for example, given a string, don't cast it again, to a string, just use it. Maybe more important as you can ignore error. So you can ignore just do a dash dash ignore a number. There's one which I'll show you in a second, which I started adopting that for when I use it, or you can put a hashtag QA and put a particular warning to be disabled or you can just say, No, just leave this line alone. Like I just don't wanna hear it. Don't tell me. So as you say, hash, no QA and then it'll catch like, all of them. Okay. Okay. So I ran this on the Python bytes website, and we got the As it says, there's a part where it like builds up a list and then take some things out trying to create a unique list I think this might be for like showing some of the testimonials, it says give me a list of all a bunch of testimonials, and then randomly pick some out of it. And then it will delete the one that randomly picked and then pick another so it doesn't get duplication. There's there's other things like that as well also in the search. And so I write Dell X bracket y to get rid of the element or whatever it's called item. And they say, you know, on a dictionary, you should just use x dot pop of y. I think the Dells kind of not obvious entirely what's going on. Sometimes it means free memories, sometimes it means take the thing out of the list, right? So they're like, Okay, do this. And I got the square bracket in warning instead of the parenthese, the tuple version. And then also, I had a list and I wanted to make a separate shallow copy of it. So I said list of that thing. And I said, you can just do list dot copy, or you know, thing dot copy. And it'll create the same thing. But it's a little more discoverable, what the intention is probably also more efficient, probably do it all at once instead of loop over it. Who knows. Anyway, this is what I got running against our stuff like this. And you know what, I fixed it all. Cool. Except there's this one part where it's got a whole bunch of different tests to transform a string. And it's like line after line of dot replaced, replaced, replaced, replaced, replace one of those lines is to replace tabs with spaces that eventually it finds all the spaces, turns them into single dashes and condenses them and whatnot. It says, oh, you should really change x dot replace backslash t. So tab with a space, replace that with x dot expand tabs one. No. Maybe if it was just a single line where the only call was to replace the tabs, but there's like seven replaces. And they all make sense. Replace tabs replace lowercase with that, like all these other things. And if you just turn them one of them into expand tabs, like what why did where did this come like into the sequence of replacements? Like why would you do this one thing? Yeah. And so I just put a no QA on that one and then fix it up. But I found that to be pretty helpful and offering some nice recommendations. People check it out the entire directory, you don't have to run on one file, just say refurb dot slash go.

00:32:24 Cool. Yeah, when we should run like several of these, and then just do them in a loop and see if it ever settles down.

00:32:30 Exactly. And if you just keep taking its advice, Does that upset the other one? Yeah,

00:32:35 like V pi upgrade, and then refurb. And then black and just and some others? Yeah, auto PEP it

00:32:42 say the goal of this one is to modernize Python code bases. If we had python two code, I suspect it would go bonkers, but we don't. So it's okay.

00:32:51 But one of the cool things you mentioned, you weren't going to do the Expand tabs. But I didn't know about the Expand tabs. So tools like this also just like teach you stuff that? Yeah.

00:33:04 context manager and all sorts of stuff. Yeah. Yeah. So the Expand tabs, where was it was over here, the Expand tabs of one, that means replace the tab with one space? So if you wanted like four spaces for every tab, you would just say expand tabs for

00:33:17 which is probably correct, right? Yeah, of course.

00:33:21 Of course it is, of course. Alright, well, that's it for all of our items. You got anything else you want to throw out there?

00:33:28 I don't. How about you?

00:33:30 I do actually. Alright, so let's, let's see, I had a few things. I'll get through them quick. So another sequence of things that think's pretty interesting. This is not really the main thing, but it's kind of starting the motivation. So we have over on all of our sites on Python bytes on talk, Python and talk Python training, we have the ability to do search. So for example, over and talk by that training, I can say ngrok, API, postman. And the results you got were just like, previously, were like this ugly lesson you'd have to kind of make sense of it was, it was really not so most proud of. But I'm like, I'm not inspired to figure out a different UI. But I got inspired last week and said, Okay, I'm gonna come up with this kind of like hierarchical view showing like, Okay, if I searched for, say, ngrok, API, postman, I want to see all the stuff that matches that out of the two and 40 hours of spoken word, basically, right? On the site, and all the descriptions and titles and so on. And so like, for example, this Twilio course I talked about used all those things, and actually has one lecture where exactly, it talks about all three of those things, and then others where they're in there, but like one, one video talks about ngrok than another one talks about an API or you know, some it's not really focused right here, just in this course, like it doesn't even exist in a single chapter, but across 100 days of web and Python, like all those words are said right, so I came up with this search engine. And while the search engine existed, but it wasn't running in a it wasn't basically hosted at way that I was really happy with. So what I did is I took some of our advice from 2017, I said, You know what I'm going to create, I'm going to create a system B service that just runs as part of Linux, when I turn it on, that is going to do all the indexing and a lot of the pre processing to that page can be super fast. So for example, like the response time, this page is effectively instant, it's like 3040 milliseconds, right? Even though it's, it's doing tons of searching. So I'm going to run this Python script, series of scripts and mobile app, as a system D service, which is excellent. So we talked about how you can do that. If you look, here's a, an example. Basically, just create a system d dot service file, and you say, like Python space, your file with the arguments, and you can set up and I'll just auto start and be managed by you know, system control, which is awesome. So that's all neat. The other thing I want to give, the main thing I really want to give some advice about though is those, these these, Damon's what they look like is wild, true. chill out for a while, do your thing, wait for an event, do your thing, look for a file, do your thing, then look for some more, right, you're just going over and over and this loop like running. But often it's not busy, right? It's waiting for something in this search thing. It's like waiting for an hour or something, then we'll rebuild the search. But it could just as well be waiting for a file to appear in some kind of upload folder, and then like start processing that? I don't know. Right? So it has, they almost always have this pattern of like wild true, either wait for an event and then do it or chill for a while and then do the thing. So my recommendation, my thought here is, if you combine this with multiprocessing, you can often get much, much lower overhead on your server, right? So check this out. So here's a an example of the search thing on top bite on search out of cleanses. Notice it's using 78 megabytes of RAM. This is in the in the show notes. Of course, this is just running there in the background. Before I started using multiprocessing. It was using like 300 Meg's of RAM constantly on the server, because it would wait for an hour. And then it would load up the entire 240 hours of texts and stuff and process it and do database calls. And then generate like a search result, a search set of keyword maps, and then it would you know, would refresh those again. But normally, it's just resting it puts that stuff back in the database. But if you'd like let it actually do the work, it will basically not not unload those modules and unload all that other stuff that happened in there. So if you take the function that says just do the one thing in the loop, and you just call that with multiprocessing it goes from 350 Meg's to 70 Meg's no other work, because it, that little thing fires up, it does all the work, and then it shuts back down. And it doesn't get like all that extra stuff loaded into your process. Okay, cool, right?

00:38:06 This cool. You can I mean, for special cases like ours, I mean, for yours, you could just kick it off yourself, right or as avid be part of your published thing when you publish new show notes. But

00:38:19 yeah, exactly. I mean, I could, I could base it on some of that, like, yeah, it could it gets complicated, because it's hard to tell when that happens. Yeah, there's there's like, as you can see, like, in this example, there's like eight worker processes. Right. So which one should be in charge him? Knowing that I know it's so it's, it's easy, you just have that thing running? And just like, you know, the search will be up to date. And it's going but please don't overwhelm the server by loading the entire thing. And hanging onto it forever. Exactly. Yeah, so do I thought that was a fun story. I just share. Let's do this one. Next. We talked about JetBrains fleet think pie charm, pie charms like little cousin that is very much like vs. Code, guys, but as like pie charm, heritage. So this thing is now out of private beta is now in the public beta. So it has like Google Docs type collaboration it has but it has like pi charm, source code, refactoring and deep understanding that seems pretty excellent. So people can check that out. It looks looks pretty neat. I've done a little bit of playing with it, but not too much yet. But if you're a VS code, type of person like this might speak to you more than pi charm. That's out. Speaking of pi charm, I'm going to be on a webcast with Paul Everett. On Thursday. We're talking about Django and pi charm tips, reloaded. So just kind of a bunch of cool things you can do to if you're working in a Django project in PI charm, you want to be awesome and quick and efficient. Okay, last one. How about this this This mark, go ahead.

00:40:01 This blows me away. And it's interesting. So

00:40:04 this is interesting. So we all have got to be familiar with the GDPR. I did weeks where the work reworking the various websites to be officially compliant with GDPR. You know, like, we weren't doing any creepy stuff to like, Oh, now we got to start stop our tracking or anything like that. But like, there's certain things about you need to record the opt in explicitly and be able to associate a record like that kind of stuff. Right? So some of us did a bunch of work to make our code GDPR compliant. Others, not so much. But the news here is that Denmark has ruled that Google Analytics is illegal. Like, okay. And illegal in the sense that the Google Analytics violates the GDPR. And basically can't be can be used, I believe of France in two other countries whose name I'm forgetting. I've also cited that as well. And yeah, more or less they a significant number of European countries are, are deciding that Google Analytics just can't be used if you're going to be falling into GDPR, which I think most companies in the west at least need to follow.

00:41:22 Yeah. So I'm glad I'm glad. I mean, I, my early days of web stuff, I was using Google Analytics. Of course, a lot of people do. It's a, it's, it's free, they like give you all these all this information free. Why not? Why are they giving? Oh, it's not. Wait a second. They're using you and your website to help collect data on everybody that uses your website? Yeah, it

00:41:46 seems like such a good trade off. But yeah, I mean, you're basically giving like every single action on your website, given the that information about your users every one of their actions over to Google, which seems like a little I could see why that would be looked down upon from a GDPR perspective, no doubt. Just by the way, also on that, if you look over on Python bytes.fm to pay, let's see, does it say anything? How many? How many blockers have we got? Or how many creepy things do we have to worry about over here? Zero? Like, we don't use Google Analytics, we don't use? Yeah, it's just global stats. But yeah, we don't use Google Analytics or any other form of client side analytics whatsoever. So I'm pretty happy about that, actually. But check out the video by Steve Gibson. It's an excerpt of different podcasts. But I think it's worth covering. It's pretty interesting.

00:42:42 Yeah. It's something to watch at least. Yeah.

00:42:45 Yeah. Egan who points out in the audience? How can you enforce something like that? That is Google Analytics being not allowed? It's embedded in so many sites everywhere. Sometimes you don't even manage it. You just enter an Analytics ID. Yeah, I, it's honestly a serious problem. Like, for example, on our Python bytes website, if you go to one of the newer episodes, they all have a nice little picture. That picture is from the YouTube thumbnail. Like it literally pulls it straight from YouTube. The first thing I tried to do, Brian was I said, Well, here's the image that YouTube uses for the poster on the video. So I'll just put a little image where the source is youtube.com/video poster, whatever the heck the URL is. Even for that Google started putting tracking cookies on all of our visitors. Come on Google, it's just an image No. Yeah, and so are cookies, right. So what I had to end up doing as the website on the server side, looks at the URL, downloads the images, puts it in MongoDB. And when a visitor comes, we serve it directly out of MongoDB. With no cookies, like, it is not trivial to avoid getting that kind of stuff in there. Because even when you try not to it shows up a lot of times like EcoBlue mentioned, the way it gets enforced. Somebody says, here's a big website, they're vile, violating the GDPR. We're going to recommend I'm going to report them basically is what happens, I think,

00:44:16 yeah, but I think I think for small fish, like me or something, it's just if a country says don't do that, maybe I will maybe I won't, because they might have good reasons. So

00:44:29 yeah, I mean, if you're a business, you got to worry a lot more. I don't think any individual will ever get in trouble for that. But it's also mean think about how much you're exposing everybody, everybody's information and that you can't know before you go to a website, whether that's going to happen. It's already happened once you get there. So I guess see our previous conversation about ad blockers next DNS, do we hate creators? No. Do we hate this kind of stuff? Yes.

00:44:56 Also, information is interesting. So but just pay attention. Do what you have, because you don't need Google Analytics to just find out which pages are viewed most. You can use other ways. So, yep.

00:45:08 All right. Well, I have a bunch of extras, but there they are.

00:45:12 That's so serious, though. Do we have something? No, honey, we do.

00:45:15 Okay, something I got some, this is very much. I picked this one for you, Brian. Okay, so this has to do with testing. Tell me what's in this picture here. Describe for our listeners.

00:45:25 I love this picture. This is great. So it says all unit tests passing and it is a completely shattered sink. The only thing left to the sink is the faucet is still attached to some porcelain. You can turn it on and it goes down the drain actually, so you've already even got integration tests passed.

00:45:47 This is pretty Yeah, it's not 100% coverage. But

00:45:51 yeah, right. Not 100% coverage of the sink.

00:45:55 Yeah, there's the sink and it's completely smashed. There's just like just a little tiny chunk fragment of it left but it's got the drain and the faucet is still pouring into it unit test pass. I love it. Yeah,

00:46:06 you might even cut yourself if you tried to wash your hands in this but but funny you might.

00:46:14 Well, that's good fun as always. Thanks for being here. Thank you. Yeah, see you later. Thank you everyone for listening.

00:46:21 Bye

00:46:21 bye.

