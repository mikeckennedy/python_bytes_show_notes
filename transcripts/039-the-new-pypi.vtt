
00:00:00.000 --> 00:00:05.680
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.680 --> 00:00:14.720
This is episode 39 recorded August 14, 2017. I'm Brian Okken and again Michael is on vacation


00:00:14.720 --> 00:00:19.680
and we have a guest host and this week we have Mahmoud Hashemi. Hey Mahmoud.


00:00:19.680 --> 00:00:22.640
Hi there. Great to be here.


00:00:22.640 --> 00:00:27.440
Yeah, you've been on Test and Code and you've been on Talk Python a couple times.


00:00:27.440 --> 00:00:29.040
Yeah, a couple of my faves for sure.


00:00:29.040 --> 00:00:35.120
Yeah, well, when I was looking up Talk Python, I noticed that you were on episode 4 and 54.


00:00:35.120 --> 00:00:39.920
Yeah, and I don't know when Guido was on, you know, Michael was kind enough to ask my question,


00:00:39.920 --> 00:00:46.160
and I did like a panel thing. I don't know, I guess. Yeah, it's been really nice to have repeats


00:00:46.160 --> 00:00:51.040
appearances. People recognize me by my voice now. It's kind of, kind of strange, but like,


00:00:51.040 --> 00:00:52.640
I'm very appreciative at the same time.


00:00:52.640 --> 00:00:56.480
That's good. That's great. And so thanks a lot for helping to do this today.


00:00:56.480 --> 00:00:59.180
Yeah, hopefully I can do Michael right taking his spot here.


00:00:59.180 --> 00:01:02.280
Well, let's just jump right in. I'm really excited about your first topic.


00:01:02.280 --> 00:01:04.280
Oh, sure. So let's see.


00:01:04.280 --> 00:01:06.780
First up, I mean one thing that's been on my radar,


00:01:06.780 --> 00:01:08.780
I'm not sure if you guys talked about this before,


00:01:08.780 --> 00:01:12.780
like sometimes I'm listening to Python Bytes and it's a little bit garbled or something.


00:01:12.780 --> 00:01:14.780
Have you guys tried calling decode?


00:01:14.780 --> 00:01:17.780
I'm kind of curious like why it's not Python strs.


00:01:17.780 --> 00:01:23.280
But one thing that's been on my radar is the new PyPI.


00:01:23.280 --> 00:01:27.080
So if you haven't been on distutils.sig,


00:01:27.080 --> 00:01:31.400
you may have not seen that there's actually a new PyPI,


00:01:31.400 --> 00:01:33.120
pypi.org.


00:01:33.120 --> 00:01:37.040
And this is going to be the Python package index going


00:01:37.040 --> 00:01:37.540
forward.


00:01:37.540 --> 00:01:40.360
So this is what we've been calling warehouse before.


00:01:40.360 --> 00:01:40.960
Is that right?


00:01:40.960 --> 00:01:44.760
So warehouse is the software that runs PyPI.


00:01:44.760 --> 00:01:45.360
You know?


00:01:45.360 --> 00:01:45.860
OK.


00:01:45.860 --> 00:01:48.680
And so, yeah, it's a package index.


00:01:48.680 --> 00:01:52.360
It's going to be where all of your wheels and SDISTS live.


00:01:52.360 --> 00:01:55.560
And there's basically a lot of development that's happening here.


00:01:55.560 --> 00:01:59.860
My friend Donald Stuffed is doing an amazing job with his team.


00:01:59.860 --> 00:02:05.360
Basically, yeah, we're up to 114,598 projects at the moment.


00:02:05.360 --> 00:02:12.360
This even lists a number of files, almost a million files with 230,000 users.


00:02:12.360 --> 00:02:16.160
And so, yeah, I would definitely check out this pypi.org for yourself.


00:02:16.160 --> 00:02:21.360
But for the most part, I wanted to talk about how they're deprecating the old PyPI.


00:02:21.360 --> 00:02:26.860
So pypi.python.org is now basically just a read-only interface.


00:02:26.860 --> 00:02:29.160
And if you've tried to upload a package recently,


00:02:29.160 --> 00:02:33.160
then you may have seen an error, "HTTP 4.10,"


00:02:33.160 --> 00:02:36.160
which is like a 404, but this is 4.10 gone,


00:02:36.160 --> 00:02:38.160
meaning it was here, but now it's gone.


00:02:38.160 --> 00:02:42.160
And so, yeah, you basically make sure to use a new version of setup tools,


00:02:42.160 --> 00:02:45.160
and it'll automatically start using the new one


00:02:45.160 --> 00:02:47.160
as long as your configs don't state otherwise.


00:02:47.160 --> 00:02:49.160
You might have to update a config.


00:02:49.160 --> 00:02:52.660
But this is a tremendous leap forward in a lot of ways.


00:02:52.660 --> 00:02:55.160
And they need some help doing it too, you know.


00:02:55.160 --> 00:02:57.160
So it's all open source on GitHub.


00:02:57.160 --> 00:02:58.160
There are issues.


00:02:58.160 --> 00:03:00.160
I'm working on one right now.


00:03:00.160 --> 00:03:02.660
Yeah, it's got a lot of cool features.


00:03:02.660 --> 00:03:04.160
Have you taken a look, Brian?


00:03:04.160 --> 00:03:05.660
I've looked around a little bit.


00:03:05.660 --> 00:03:08.160
Now, one of the things I've noticed, like right off the bat,


00:03:08.160 --> 00:03:11.160
is it says up at the top, there's a big red bar that says--


00:03:11.160 --> 00:03:11.660
I know.


00:03:11.660 --> 00:03:12.660
It's kind of scary.


00:03:12.660 --> 00:03:13.160
Yeah.


00:03:13.160 --> 00:03:17.160
So do you know, I'm guessing eventually at some point,


00:03:17.160 --> 00:03:20.800
The other interface will just redirect to here or is there?


00:03:20.800 --> 00:03:23.000
>> I mean, cool URLs don't change.


00:03:23.000 --> 00:03:24.680
Personally, in my view,


00:03:24.680 --> 00:03:27.560
I'd like it if they just kept it up and put the red bar over there,


00:03:27.560 --> 00:03:31.560
that this is a archive version of PyPI.


00:03:31.560 --> 00:03:34.560
But for now, all those URLs are still working.


00:03:34.560 --> 00:03:39.040
If you ask me, PyPI.org has been in use for so long because actually,


00:03:39.040 --> 00:03:41.060
if you've paid close attention,


00:03:41.060 --> 00:03:42.520
a lot of your downloads,


00:03:42.520 --> 00:03:44.560
PIP is downloading from the new one.


00:03:44.560 --> 00:03:45.080
>> Oh, okay.


00:03:45.080 --> 00:03:47.320
So yeah, it's been in production a long time.


00:03:47.320 --> 00:03:50.200
In fact, they just hit, I think, a petabyte a month


00:03:50.200 --> 00:03:52.040
in bandwidth downloads.


00:03:52.040 --> 00:03:54.880
So yeah, just for a sense of the cost there,


00:03:54.880 --> 00:03:57.440
I think it's like in the tens of thousands,


00:03:57.440 --> 00:04:01.320
like 30, 40,000 a month to host PyPI.


00:04:01.320 --> 00:04:05.560
And that's kindly donated by the Fastly CDN.


00:04:05.560 --> 00:04:08.160
Should they stop feeling so generous,


00:04:08.160 --> 00:04:10.760
we gotta support our community somehow.


00:04:10.760 --> 00:04:13.160
So there is a donate button here,


00:04:13.160 --> 00:04:19.160
But I think that right now, what they need most is sort of like people to work on cool features,


00:04:19.160 --> 00:04:24.680
like one that I saw has been working on that I'm very excited for, not strictly pypi.org,


00:04:24.680 --> 00:04:30.600
but same team, the Python Packaging Authority, they are working on making a dependency graph


00:04:30.600 --> 00:04:31.600
between all packages.


00:04:31.600 --> 00:04:37.720
So if you've ever wondered what depends on what ahead of time, then this would enable


00:04:37.720 --> 00:04:38.720
that.


00:04:38.720 --> 00:04:39.720
So yeah,


00:04:39.720 --> 00:04:40.720
How do I start working on it?


00:04:40.720 --> 00:04:42.240
Do I go to the GitHub page?


00:04:42.240 --> 00:04:48.600
Yeah, so I think it's github.com/pypa or I think it might be /warehouse.


00:04:48.600 --> 00:04:49.600
Yeah, okay.


00:04:49.600 --> 00:04:56.040
So and you know Donald has been very candid about like you know the areas that need development


00:04:56.040 --> 00:04:57.800
and he's been working very hard.


00:04:57.800 --> 00:05:02.360
He's at Amazon now and he spends some time working on stuff there.


00:05:02.360 --> 00:05:05.080
Oh, one last thing like distutils, right?


00:05:05.080 --> 00:05:10.960
So they still there's an email list called distutils-sig which stands for special interest


00:05:10.960 --> 00:05:11.960
group.


00:05:11.960 --> 00:05:15.280
And so this util sig, you can just go join the list serve.


00:05:15.280 --> 00:05:18.360
And you can read the archive and see the conversations they're having.


00:05:18.360 --> 00:05:21.120
If you care about packaging, you're probably already on there.


00:05:21.120 --> 00:05:23.640
But if you aren't definitely subscribe.


00:05:23.640 --> 00:05:24.840
I didn't know about it.


00:05:24.840 --> 00:05:25.840
Yeah.


00:05:25.840 --> 00:05:29.000
So we'll try to drop a link in the show notes for that.


00:05:29.000 --> 00:05:31.560
Okay, well, that's, that's really cool.


00:05:31.560 --> 00:05:34.480
Pretty good for first topic, you know, I don't know.


00:05:34.480 --> 00:05:35.480
Yeah, definitely.


00:05:35.480 --> 00:05:41.320
And I and the one one thing I want to add is I know that Donald has been vocal before


00:05:41.320 --> 00:05:43.720
about how awful the previous code was?


00:05:43.720 --> 00:05:46.520
Yeah, I mean, it's pretty old code, right?


00:05:46.520 --> 00:05:49.720
Like, I don't even know, it may not predate WSGI,


00:05:49.720 --> 00:05:50.820
but it's pretty old.


00:05:50.820 --> 00:05:52.120
You've looked at the new code.


00:05:52.120 --> 00:05:52.920
I've looked at the new code.


00:05:52.920 --> 00:05:54.820
I can talk about the new code if we got a second.


00:05:54.820 --> 00:05:56.820
So I've looked at it, I've used it.


00:05:56.820 --> 00:05:58.620
It's got 100% coverage.


00:05:58.620 --> 00:06:00.720
It's got a lot of CI stuff set up.


00:06:00.720 --> 00:06:02.220
It uses Docker.


00:06:02.220 --> 00:06:03.920
I had a little bit of trouble, like, you know,


00:06:03.920 --> 00:06:07.820
with the make based approach to running the thing,


00:06:07.820 --> 00:06:09.020
but it's pretty complex.


00:06:09.020 --> 00:06:11.120
Like, it runs, I think, an Elasticsearch


00:06:11.120 --> 00:06:16.080
and all this stuff. So basically, yeah, you just people shouldn't be afraid to help out


00:06:16.080 --> 00:06:20.280
just because they've heard bad things about the old code. No, the new code is, it's pretty


00:06:20.280 --> 00:06:24.840
idiomatic, I think. And you know, if you're familiar with SQL alchemy, and I think it


00:06:24.840 --> 00:06:31.000
uses also maybe like pyramid, I think, and it looks like the tests are in pytest, too.


00:06:31.000 --> 00:06:36.640
Yeah, this is definitely in pytest, which is frankly, the only way I've heard and have


00:06:36.640 --> 00:06:38.800
I've also found myself.


00:06:38.800 --> 00:06:40.520
So yeah, it's been good.


00:06:40.520 --> 00:06:42.240
- Oh, I could talk about this for a long time,


00:06:42.240 --> 00:06:44.280
but let's move on to the next topic.


00:06:44.280 --> 00:06:45.120
- Absolutely.


00:06:45.120 --> 00:06:45.960
- So one of the things,


00:06:45.960 --> 00:06:47.720
I just read about this yesterday.


00:06:47.720 --> 00:06:50.560
There's a, I read about it on Make,


00:06:50.560 --> 00:06:52.240
I think it's the Make website,


00:06:52.240 --> 00:06:56.560
but it's CircuitPython is now going to be,


00:06:56.560 --> 00:06:59.760
is supported by a whole bunch of Adafruit hardware.


00:06:59.760 --> 00:07:01.720
- It's great news for hardware hackers


00:07:01.720 --> 00:07:03.680
and also tinkerers like myself.


00:07:03.680 --> 00:07:05.440
- And so we'll put a link in the show notes


00:07:05.440 --> 00:07:12.720
the make article but there's also so I had heard Adafruit announced CircuitPython in January and


00:07:12.720 --> 00:07:19.440
it's a it's an open source it's based on MicroPython so CircuitPython is also open source but it's


00:07:19.440 --> 00:07:25.120
so I'm not quite sure how they differ but they've added some things to make it easier to control


00:07:25.120 --> 00:07:34.080
hardware and they already had like two devices micro Metro M0 and Feather M0 express versions


00:07:34.640 --> 00:07:37.600
that support CircuitPython right off the bat.


00:07:37.600 --> 00:07:41.600
And I guess they're working on a Circuit Playground Express.


00:07:41.600 --> 00:07:44.000
All of these look like really fun things.


00:07:44.000 --> 00:07:48.160
But the thing that really caught my attention was Gemma M0


00:07:48.160 --> 00:07:50.400
that was announced at the end of July.


00:07:50.400 --> 00:07:52.560
And this thing is like the size of a quarter.


00:07:52.560 --> 00:07:56.160
It's a little small thing that you can make wearable software


00:07:56.160 --> 00:07:59.040
projects with, like LEDs and whatever.


00:07:59.040 --> 00:08:02.320
And you just plug it in and into your computer,


00:08:02.320 --> 00:08:07.900
and you instantly it's like an extra drive you can see a main.py and it just


00:08:07.900 --> 00:08:11.320
you can just start programming in Python right away. Yeah right so basically just


00:08:11.320 --> 00:08:14.920
like it sort of functions kind of like a USB drive and there's a single main


00:08:14.920 --> 00:08:18.880
entry point in there and you can just modify it and then you know you don't


00:08:18.880 --> 00:08:22.960
need to install anything or anything like that. Yeah there's no loading


00:08:22.960 --> 00:08:27.280
apparently it does support Arduino but you don't like right off the bat you


00:08:27.280 --> 00:08:30.520
don't have to install anything you can just start programming and these are


00:08:30.520 --> 00:08:35.400
Right now they're currently out of stock, but I'm sure they get new stuff in pretty quick.


00:08:35.400 --> 00:08:39.560
But it's under 10 bucks to start programming some wearable programming.


00:08:39.560 --> 00:08:41.440
So I definitely have to get one of these.


00:08:41.440 --> 00:08:43.760
Yeah, I can't wait to start wearing some running Python.


00:08:43.760 --> 00:08:45.760
That'd be taking it to the next level.


00:08:45.760 --> 00:08:50.480
And I'm also going to link to what I thought was great was they realized that,


00:08:50.480 --> 00:08:55.120
I mean, they are encouraging people to use Python if they can for programming hardware,


00:08:55.120 --> 00:08:58.800
but they realized that a lot of people are new to the Python community.


00:08:58.800 --> 00:09:03.040
So there's a page called Creating and Sharing CircuitPython,


00:09:03.040 --> 00:09:04.960
a CircuitPython library.


00:09:04.960 --> 00:09:07.200
And it's got a whole bunch of great links,


00:09:07.200 --> 00:09:10.160
like basically just telling people what--


00:09:10.160 --> 00:09:13.280
when we say library, we mean a package or a module


00:09:13.280 --> 00:09:16.240
with a setup file and doing it all right.


00:09:16.240 --> 00:09:19.600
And there's little intros to GitHub and Read the Docs


00:09:19.600 --> 00:09:20.480
and Travis.


00:09:20.480 --> 00:09:21.920
So is it like--


00:09:21.920 --> 00:09:24.480
when you say package or module, is this their own format?


00:09:24.480 --> 00:09:27.200
Or is this like Python packages, wheels, that sort of thing?


00:09:27.200 --> 00:09:28.640
Yeah, it's just Python stuff.


00:09:28.640 --> 00:09:30.920
But it's just really quick tutorials


00:09:30.920 --> 00:09:32.640
to get people up to speed fast.


00:09:32.640 --> 00:09:33.140
Sure.


00:09:33.140 --> 00:09:35.080
So it's like sort of a full--


00:09:35.080 --> 00:09:36.760
it's got like an end-to-end thing.


00:09:36.760 --> 00:09:39.760
It doesn't just send you left and right to other sites.


00:09:39.760 --> 00:09:40.480
Yeah, right.


00:09:40.480 --> 00:09:42.280
It's really telling you everything.


00:09:42.280 --> 00:09:44.160
And they're pretty condensed.


00:09:44.160 --> 00:09:46.160
Actually, they're pretty good job


00:09:46.160 --> 00:09:47.840
condensing all that information.


00:09:47.840 --> 00:09:50.160
Yeah, you don't need the whole context and history


00:09:50.160 --> 00:09:51.760
of Python packaging.


00:09:51.760 --> 00:09:55.160
We've come a long way since eggs and that sort of stuff.


00:09:55.160 --> 00:09:55.840
Yeah.


00:09:55.840 --> 00:10:03.600
But then one of the things that is kind of interesting is they have a concept of bundles.


00:10:03.600 --> 00:10:09.960
And really all a bundle is is a bunch of installable Python packages that are zipped up into a


00:10:09.960 --> 00:10:10.960
bundle.


00:10:10.960 --> 00:10:11.960
Sure.


00:10:11.960 --> 00:10:18.040
We normally don't really care about that because on a larger computer it's not that big of


00:10:18.040 --> 00:10:19.040
a deal.


00:10:19.040 --> 00:10:23.000
But these little tiny devices you still have to care about how big it is.


00:10:23.000 --> 00:10:27.960
So you're only, you might want to get everything that somebody cool has made, but you don't


00:10:27.960 --> 00:10:28.960
need it all.


00:10:28.960 --> 00:10:32.240
You just need like the little part that you know, blinks the LED for you or whatever.


00:10:32.240 --> 00:10:33.240
Sure.


00:10:33.240 --> 00:10:34.440
So it sort of freezes it all together.


00:10:34.440 --> 00:10:36.840
Yeah, these embedded applications are interesting.


00:10:36.840 --> 00:10:40.520
So now that so I maintain this one library called hyperlink.


00:10:40.520 --> 00:10:43.880
And I guess it's pretty widely used because Twisted depends on it.


00:10:43.880 --> 00:10:49.280
And so I've gotten some interesting feedback, a few things like one code review I just went


00:10:49.280 --> 00:10:50.280
through.


00:10:50.280 --> 00:10:52.040
I promise this is related.


00:10:52.040 --> 00:10:56.520
I'm using PyTest and I'm writing my assert statements and you know I love


00:10:56.520 --> 00:11:00.960
that PyTest rewriting with the great error messages and so forth but I got a


00:11:00.960 --> 00:11:04.960
comment on my code review that these tests are not runnable in an embedded


00:11:04.960 --> 00:11:09.800
environment because they will run with -oo which elides all of those assert


00:11:09.800 --> 00:11:14.000
statements and I'm like well you're kind of running the tests wrong if you're


00:11:14.000 --> 00:11:17.800
you're not using PyTest but in these embedded environments I don't know maybe


00:11:17.800 --> 00:11:22.400
the convention is different. So when you get yours definitely like test it out


00:11:22.400 --> 00:11:27.200
maybe you'll have to put a little caveat on your pytest recommendation if that's


00:11:27.200 --> 00:11:32.520
not what not what we can do on hardware I don't know. Oh that's interesting. Yeah


00:11:32.520 --> 00:11:37.160
yeah I'll definitely have to check that out. So I don't want the hardware people


00:11:37.160 --> 00:11:41.160
to not buy my book. That would be terrible. Well that's the thing with something like


00:11:41.160 --> 00:11:46.360
hyperlink which is for URLs I'm like 99.9% sure it's gonna run exactly the


00:11:46.360 --> 00:11:51.000
same everywhere. So I'm confident that if it runs on my machine, it runs on TravisCI,


00:11:51.000 --> 00:11:57.080
it runs on CodeVeyor or whatever, it's going to app there, I think. It'll be fine. And


00:11:57.080 --> 00:12:03.040
uh, but at the same time, hardware people can be sticklers as I'm sure you know. So


00:12:03.040 --> 00:12:04.880
I respect that. I respect that.


00:12:04.880 --> 00:12:08.320
Cool. Yeah. Neat. Well, what do we got next? Mahmoud?


00:12:08.320 --> 00:12:13.880
Oh, right. It's back to me. So I don't know. I mean, so I spent a lot of my time pretty


00:12:13.880 --> 00:12:18.640
deep into development of all sorts of infrastructural sorts.


00:12:18.640 --> 00:12:23.040
And I find myself subscribed to Python Dev, Python Ideas,


00:12:23.040 --> 00:12:26.960
distutils.sig, and you can't read everything there


00:12:26.960 --> 00:12:27.960
and still have a life.


00:12:27.960 --> 00:12:30.000
So only a few things catch my eye,


00:12:30.000 --> 00:12:31.360
but this one in particular caught my eye


00:12:31.360 --> 00:12:35.280
because my friend Henik has this great library called adders.


00:12:35.280 --> 00:12:36.440
If you haven't heard of it,


00:12:36.440 --> 00:12:40.000
my other friend Glyph has a whole blog post


00:12:40.000 --> 00:12:44.440
that tells you why you have to use this library, ATTRS.


00:12:44.440 --> 00:12:47.700
And it's basically class decorators


00:12:47.700 --> 00:12:51.160
that make writing high level classes very easy.


00:12:51.160 --> 00:12:54.080
So it sort of derives from this sort of tradition


00:12:54.080 --> 00:12:56.000
of name tuples, right?


00:12:56.000 --> 00:12:58.460
Raymond Heidinger had this great idea to make name tuples,


00:12:58.460 --> 00:13:02.200
which let us define a class like structured thing


00:13:02.200 --> 00:13:04.200
within just one line.


00:13:04.200 --> 00:13:05.500
But the problem with name tuples is that


00:13:05.500 --> 00:13:08.000
if you want to add methods to it,


00:13:08.000 --> 00:13:09.440
then you have to inherit from it.


00:13:09.440 --> 00:13:11.080
And they're immutable by default.


00:13:11.080 --> 00:13:13.200
And they don't really-- even though they generate a dunder


00:13:13.200 --> 00:13:18.280
init for you, they don't do a whole heck of a lot of validation.


00:13:18.280 --> 00:13:20.360
So adders comes along, fixes all these things,


00:13:20.360 --> 00:13:22.360
adds a bunch of other cool functionality,


00:13:22.360 --> 00:13:24.240
and does it with class degraders.


00:13:24.240 --> 00:13:28.480
It doesn't pollute your final object with anything you don't want.


00:13:28.480 --> 00:13:30.480
Because you don't inherit from anything.


00:13:30.480 --> 00:13:32.160
So you just inherit from object.


00:13:32.160 --> 00:13:36.560
After glyphs-post took off or something, the core Python devs


00:13:36.560 --> 00:13:41.360
set up took some notice of this and said, maybe we have been neglecting a higher level interface for


00:13:41.360 --> 00:13:47.280
quickly defining classes. You know, you just want to have four or five fields, all sort of batch


00:13:47.280 --> 00:13:52.480
together. And you don't want to have a lot of functions that everywhere have to define 15


00:13:52.480 --> 00:13:59.200
arguments. So like, how can we quickly, in a nice, concise, Pythonic way define a Python class.


00:13:59.200 --> 00:14:04.000
And they came up with this new thing, which is still I guess, kind of, this is what I mean,


00:14:04.000 --> 00:14:07.000
I don't know if this is a little bit too deep underground,


00:14:07.000 --> 00:14:10.000
but there's this GitHub that Eric V. Smith,


00:14:10.000 --> 00:14:14.000
who is a Python core dev, has called "Data Classes."


00:14:14.000 --> 00:14:18.000
And the issues of this have been really interesting to watch


00:14:18.000 --> 00:14:22.000
because Hynik and a bunch of core devs have been debating,


00:14:22.000 --> 00:14:24.000
like, "Hey, should we just use Adders?


00:14:24.000 --> 00:14:28.000
If Adders is getting so popular, should it just be part of the core Python?"


00:14:28.000 --> 00:14:30.000
And people seem to like it.


00:14:30.000 --> 00:14:34.000
why make something that's so close to it, that sort of thing.


00:14:34.000 --> 00:14:38.000
There's sort of a draft pep inside of the data classes repo


00:14:38.000 --> 00:14:42.000
and there's some examples of how it's used. It has some semantic differences,


00:14:42.000 --> 00:14:46.000
has some syntactic differences. I think that it's pretty interesting to watch


00:14:46.000 --> 00:14:50.000
and in fact they seem to be encouraging more experimentation


00:14:50.000 --> 00:14:54.000
in this area. Even though I like adders, they seem to want even more


00:14:54.000 --> 00:14:58.000
options, at least from themselves. So, I don't know, I had a good


00:14:58.000 --> 00:15:00.400
time reading the issues, maybe other people enjoy it too.


00:15:00.400 --> 00:15:03.400
>> Yeah, so is this, it's similar to Adders then?


00:15:03.400 --> 00:15:05.640
>> Yeah, it's pretty similar to Adders.


00:15:05.640 --> 00:15:11.920
The differences are sort of fine enough that you have to kind of look closely.


00:15:11.920 --> 00:15:14.800
Basically, I think that what it is,


00:15:14.800 --> 00:15:18.680
is like there's actually an issue called why not just Adders?


00:15:18.680 --> 00:15:22.800
And they sort of explain that they want to use


00:15:22.800 --> 00:15:26.120
like the new, I think, type hint syntax type stuff.


00:15:26.120 --> 00:15:27.960
>> Okay. >> So yeah.


00:15:27.960 --> 00:15:31.920
Other people like kind of said that, hey, maybe like naming wise,


00:15:31.920 --> 00:15:36.400
data classes is a little bit clearer than others because someone who is a new


00:15:36.400 --> 00:15:42.120
Python programmer doesn't know that either is an attribute or something like that.


00:15:42.120 --> 00:15:42.800
That's true.


00:15:42.800 --> 00:15:45.260
So, it has some syntactic differences.


00:15:45.260 --> 00:15:45.520
Yeah.


00:15:45.520 --> 00:15:48.440
And there are some big names in this discussion.


00:15:48.440 --> 00:15:49.320
There are, there are.


00:15:49.320 --> 00:15:52.760
So that's, I mean, it's sort of like the, the, the inner circle, right?


00:15:52.760 --> 00:15:56.160
This is kind of like the sort of stuff that I have to follow.


00:15:56.160 --> 00:15:57.000
Oh, that's awesome.


00:15:57.000 --> 00:15:58.560
- Be on the edge here.


00:15:58.560 --> 00:16:00.600
And it happens kind of behind the scenes,


00:16:00.600 --> 00:16:03.640
but I really do encourage people to join these email lists


00:16:03.640 --> 00:16:05.960
if you wanna see the action happening.


00:16:05.960 --> 00:16:08.080
You know, you don't have to be a spectator


00:16:08.080 --> 00:16:10.740
or you don't have to sit maybe in the nosebleed section


00:16:10.740 --> 00:16:12.920
of the arena on open source, right?


00:16:12.920 --> 00:16:14.760
You can get up close on the, on like, you know,


00:16:14.760 --> 00:16:16.920
get the front row seats.


00:16:16.920 --> 00:16:18.800
And before you know it, you'll actually get involved.


00:16:18.800 --> 00:16:19.640
It'll be fun.


00:16:19.640 --> 00:16:20.460
- Yeah, that's great.


00:16:20.460 --> 00:16:21.400
Oh, thanks for bringing that up.


00:16:21.400 --> 00:16:22.680
That's cool.


00:16:22.680 --> 00:16:24.900
Well, speaking of trying to get involved,


00:16:24.900 --> 00:16:27.420
unless you've had your head under a rock,


00:16:27.420 --> 00:16:30.620
data science is a thing.


00:16:30.620 --> 00:16:31.780
Is it, really?


00:16:31.780 --> 00:16:35.140
It isn't something that I have to use on a daily basis,


00:16:35.140 --> 00:16:37.820
but it's definitely something I want to pay attention to.


00:16:37.820 --> 00:16:39.940
And I ran across--


00:16:39.940 --> 00:16:42.700
there's a lot of books and tutorials that are huge,


00:16:42.700 --> 00:16:44.940
because it's a huge topic.


00:16:44.940 --> 00:16:49.660
And I ran across a article called "Pandas in a Nutshell."


00:16:49.660 --> 00:16:54.020
And I like it, because it's a Jupyter Notebook style post,


00:16:54.020 --> 00:16:56.180
so you can just see the code working.


00:16:56.180 --> 00:16:58.380
And it's mostly tutorial by example


00:16:58.380 --> 00:17:01.940
with just a little bit of extra code for explanation.


00:17:01.940 --> 00:17:04.320
And the big part of it is really just talking


00:17:04.320 --> 00:17:05.900
about a couple of data structures.


00:17:05.900 --> 00:17:09.220
It's talking about the series data structure, which


00:17:09.220 --> 00:17:12.700
is a one-dimensional array with indices,


00:17:12.700 --> 00:17:14.740
so just kind of like a vector.


00:17:14.740 --> 00:17:18.780
And then the data frame, which is like a two-dimensional array.


00:17:18.780 --> 00:17:21.680
And all the sort of common things


00:17:21.680 --> 00:17:27.040
that you need to do with it, like specifying a custom index,


00:17:27.040 --> 00:17:33.920
or combining two series, or with matrix stuff, adding columns,


00:17:33.920 --> 00:17:36.600
adding a column that's based on another column.


00:17:36.600 --> 00:17:39.320
Then this sort of stuff sort of seems like Excel,


00:17:39.320 --> 00:17:40.760
like working on a spreadsheet.


00:17:40.760 --> 00:17:43.000
I think for a lot of people, that


00:17:43.000 --> 00:17:45.320
is the natural next step when they


00:17:45.320 --> 00:17:46.480
want to get into programming.


00:17:46.480 --> 00:17:49.000
It's either going to be doing visual,


00:17:49.000 --> 00:17:52.720
Or is it like basic script of some sort inside of Excel?


00:17:52.720 --> 00:17:54.440
Or maybe move into Python?


00:17:54.440 --> 00:17:56.160
Yeah, and I guess that's one of the things


00:17:56.160 --> 00:17:58.280
I like about this little nutshell article


00:17:58.280 --> 00:18:01.840
is that if somebody is already doing some things


00:18:01.840 --> 00:18:06.920
in spreadsheets and they want to switch to working with pandas,


00:18:06.920 --> 00:18:09.000
this might be a pretty good stepping point


00:18:09.000 --> 00:18:11.080
to try to get things going.


00:18:11.080 --> 00:18:12.620
And it's actually something I'm going


00:18:12.620 --> 00:18:14.720
to grab some of the concepts in here


00:18:14.720 --> 00:18:17.400
to try to deal with some of the large amounts of data


00:18:17.400 --> 00:18:20.360
that I deal with on a daily basis as well.


00:18:20.360 --> 00:18:21.200
- Oh, for sure.


00:18:21.200 --> 00:18:22.980
- So I haven't used, and I bring this up


00:18:22.980 --> 00:18:23.960
because I'm just starting.


00:18:23.960 --> 00:18:27.480
I'm trying to use pandas on a daily basis now.


00:18:27.480 --> 00:18:30.560
- And it is, I've actually faced a lot of the same challenges


00:18:30.560 --> 00:18:33.400
it's just because it's Python doesn't mean that it,


00:18:33.400 --> 00:18:36.600
you know, doesn't require some sort of kind of paradigm shift


00:18:36.600 --> 00:18:37.600
in your thought.


00:18:37.600 --> 00:18:40.360
It's like thinking about data frames is very different


00:18:40.360 --> 00:18:42.600
than thinking about lists in Python


00:18:42.600 --> 00:18:44.200
or dictionaries in Python.


00:18:44.200 --> 00:18:46.620
it's somewhere between Python


00:18:46.620 --> 00:18:48.620
and like full-blown relational databases.


00:18:48.620 --> 00:18:51.140
And so you do have to change the way you think


00:18:51.140 --> 00:18:52.980
how to approach a problem,


00:18:52.980 --> 00:18:55.020
especially if you wanna get some performance


00:18:55.020 --> 00:18:55.860
out of the thing,


00:18:55.860 --> 00:18:57.820
'cause it has all this great broadcasting logic


00:18:57.820 --> 00:18:59.220
that it can perform,


00:18:59.220 --> 00:19:00.260
but it's not gonna work


00:19:00.260 --> 00:19:02.620
if you just iterate over it in for loops.


00:19:02.620 --> 00:19:05.420
- Yeah, and I guess that's where the data frames


00:19:05.420 --> 00:19:06.660
and series stuff comes in


00:19:06.660 --> 00:19:10.620
is because you wanna do some computation on everything


00:19:10.620 --> 00:19:13.400
or searching on stuff.


00:19:13.400 --> 00:19:16.080
So it's kind of like a combination of a database


00:19:16.080 --> 00:19:20.040
and an in-memory database and something else.


00:19:20.040 --> 00:19:21.960
- Where I work, some of our data scientists


00:19:21.960 --> 00:19:24.020
are coming from an R background


00:19:24.020 --> 00:19:27.400
and the data frame is based on R construct, I believe.


00:19:27.400 --> 00:19:31.220
So they find it quite natural


00:19:31.220 --> 00:19:33.400
and the Python is what they sort of struggle with


00:19:33.400 --> 00:19:34.900
and they come to me for that.


00:19:34.900 --> 00:19:36.880
But a Python person would want to ramp up


00:19:36.880 --> 00:19:38.400
on the data frame itself.


00:19:38.400 --> 00:19:40.820
And so this notebook seems like a great option


00:19:40.820 --> 00:19:41.660
to do that quickly.


00:19:41.660 --> 00:19:46.300
So that's just a quickie. So that's it. Your last topic.


00:19:46.300 --> 00:19:52.780
Oh, already. So yeah, basically, just yesterday, I was at this conference,


00:19:52.780 --> 00:19:58.300
PyBay 2017 is sort of the Bay Area, Silicon Valley regional Python conference,


00:19:58.300 --> 00:20:02.740
only the second annual one. There's, it's surprising how long it took to spin up here.


00:20:02.740 --> 00:20:08.020
Meanwhile, PyOhio has been going for who knows how long. So anyways, but it was a great conference.


00:20:08.020 --> 00:20:15.020
almost 500 developers, pretty good turnout, and a lot of great topics covered.


00:20:15.020 --> 00:20:25.020
I gave a packaging talk, but the thing I'm going to talk about today is actually the opening panel was on static typing.


00:20:25.020 --> 00:20:28.020
And it was quite an interesting mix.


00:20:28.020 --> 00:20:30.020
First of all, it was very international.


00:20:30.020 --> 00:20:34.020
They had people from Germany, Russia, Poland, USA, and Netherlands.


00:20:34.020 --> 00:20:40.060
It seems like Europeans are big fans of static typing for whatever reason, Guido included.


00:20:40.060 --> 00:20:48.360
So yeah, they had people from I think, let's see, PyCharm, University of California, Berkeley,


00:20:48.360 --> 00:20:52.640
then also Quora, Google, and I think another guy too.


00:20:52.640 --> 00:20:59.100
So it was a really nice cross section of the industry and also the world.


00:20:59.100 --> 00:21:02.220
And they just talked about the state of static typing.


00:21:02.220 --> 00:21:07.220
So right now, just to bring you up to date, I'm not sure how recently you covered this stuff on the podcast,


00:21:07.220 --> 00:21:13.220
but there are currently three or four static type checkers.


00:21:13.220 --> 00:21:17.220
So in Python 3, you can specify your types however you'd like.


00:21:17.220 --> 00:21:23.220
Built into the language, it's not going to do a lot of complaining in case types don't match.


00:21:23.220 --> 00:21:26.220
First of all, at runtime, nothing is checked, right?


00:21:26.220 --> 00:21:30.220
So if you want to check it, it would be at a compile time step.


00:21:30.220 --> 00:21:36.220
The annotations are still there at runtime, and then you have a static type checker,


00:21:36.220 --> 00:21:40.220
the most popular of which is mypy, run over that and check it,


00:21:40.220 --> 00:21:44.220
kind of like a linter or any other static analysis tool.


00:21:44.220 --> 00:21:48.220
And so there are other ones too though.


00:21:48.220 --> 00:21:54.220
Google has one that is not super well documented, but they use it internally.


00:21:54.220 --> 00:21:58.660
then PyCharm has this functionality as well,


00:21:58.660 --> 00:22:00.560
which is also kind of built from scratch.


00:22:00.560 --> 00:22:02.220
And they made a pretty good case


00:22:02.220 --> 00:22:06.180
why you would want one built into PyCharm,


00:22:06.180 --> 00:22:09.280
which is that basically it can do incremental checking.


00:22:09.280 --> 00:22:11.100
So while you're still writing,


00:22:11.100 --> 00:22:12.620
it can do sort of partial checks,


00:22:12.620 --> 00:22:14.340
maybe a little bit better than mypy.


00:22:14.340 --> 00:22:16.740
Oh, right, the last person on the panel,


00:22:16.740 --> 00:22:19.220
Ukesh Langa from Facebook.


00:22:19.220 --> 00:22:20.660
He also comes to my meetup.


00:22:20.660 --> 00:22:23.380
Anyways, so yeah, he's very opinionated about types.


00:22:23.380 --> 00:22:25.380
We'll get to that in a second.


00:22:25.380 --> 00:22:27.380
One that wasn't talked about was pylint.


00:22:27.380 --> 00:22:29.380
I was actually blown away.


00:22:29.380 --> 00:22:31.380
I updated my Emacs config recently


00:22:31.380 --> 00:22:34.380
and I sort of integrated some more linting stuff.


00:22:34.380 --> 00:22:38.380
The default pylint these days can do an amazing amount of inference.


00:22:38.380 --> 00:22:41.380
It'll tell you you have the wrong number of arguments.


00:22:41.380 --> 00:22:45.380
It'll tell you that this default doesn't match that type.


00:22:45.380 --> 00:22:47.380
It'll do so many different things.


00:22:47.380 --> 00:22:50.380
In addition to its standard, very opinionated idea


00:22:50.380 --> 00:22:55.900
the idea of how many arguments a function should even have and that sort of thing. Anyways,


00:22:55.900 --> 00:23:02.340
so those are our four sort of type inference engines. And they all are slightly different.


00:23:02.340 --> 00:23:05.980
But everyone seemed to get along pretty well on stage. And they talked about, you know,


00:23:05.980 --> 00:23:10.380
potentially in the future, actually merging these things and making a pep that would allow


00:23:10.380 --> 00:23:16.580
them to all sort of comply together, maybe even turn into a single project. So that was


00:23:16.580 --> 00:23:21.740
nice to see. And one of the most interesting questions was


00:23:21.740 --> 00:23:25.780
basically from the audience. They said like, well, what is


00:23:25.780 --> 00:23:29.460
the real point behind the static typing? Like, what is the


00:23:29.460 --> 00:23:32.100
biggest benefit that you see? And there was a little bit of


00:23:32.100 --> 00:23:35.420
divergence on this, right? Some people like it for the


00:23:35.420 --> 00:23:39.220
strictness of it all being, you know, kind of the dictator of


00:23:39.220 --> 00:23:42.620
your own code base or whatever, right? But everyone else seemed


00:23:42.620 --> 00:23:49.580
seem to be pretty much on the same page that this is for human readability. This is a sort


00:23:49.580 --> 00:23:55.940
of documentation that can then be checked automatically at a rather large scale. So


00:23:55.940 --> 00:24:02.060
it's attached to the function, but it's more than just a doc test. And so the interesting


00:24:02.060 --> 00:24:07.620
side effect of this is that they even though they all work on static typing stuff, they


00:24:07.620 --> 00:24:13.800
a pretty nuanced view of how much static typing you should apply. So they say that, like,


00:24:13.800 --> 00:24:19.780
you know, maybe a list of a certain type, right, but but actually defining, say, a completely


00:24:19.780 --> 00:24:25.260
recursive type is one not supported, and two, maybe not even that desirable, because you


00:24:25.260 --> 00:24:32.100
don't want your function signatures to get super, super complex. So, yeah, I mean, it


00:24:32.100 --> 00:24:35.420
was interesting that they thought the human side of this was the most important part,


00:24:35.420 --> 00:24:39.120
opposed to say like a Haskell programmer or something where they want the


00:24:39.120 --> 00:24:42.700
mathematical correctness of it all. It's also interesting that there's, I would


00:24:42.700 --> 00:24:47.300
have liked to listen to the discussion of how much you should use of it.


00:24:47.300 --> 00:24:50.180
Well it was at LinkedIn I think that they recorded it, it should go up pretty


00:24:50.180 --> 00:24:54.140
soon. Yeah I'll definitely, you know it was only a couple days ago but once the


00:24:54.140 --> 00:24:57.460
video is available I'll maybe send it to you, you can add it to the show notes.


00:24:57.460 --> 00:25:01.020
Yeah. Some interesting side effects of this by the way, like something to


00:25:01.020 --> 00:25:06.020
So Cython does not support the new Python type syntax.


00:25:06.020 --> 00:25:09.020
So even though all these guys are kind of on the same page and buddy-buddy,


00:25:09.020 --> 00:25:12.020
like, you know, for us people who really like Cython


00:25:12.020 --> 00:25:15.020
and have used it to achieve a lot of performance


00:25:15.020 --> 00:25:17.020
and type correctness to some degree


00:25:17.020 --> 00:25:19.020
are a little bit out of luck at the moment.


00:25:19.020 --> 00:25:22.020
I think that people are working on making a pull request to it


00:25:22.020 --> 00:25:24.020
or something that would add support for this,


00:25:24.020 --> 00:25:27.020
but it's such a big change to the syntax,


00:25:27.020 --> 00:25:29.020
and Cython has its own type syntax,


00:25:29.020 --> 00:25:34.020
which is less focused on semantic types as this is


00:25:34.020 --> 00:25:37.020
and more focused on being in line with C types


00:25:37.020 --> 00:25:43.020
which allows you to have more compact memory, memory-like usage.


00:25:43.020 --> 00:25:46.020
And the people on the panel were actually pretty clear that


00:25:46.020 --> 00:25:49.020
the static types advantage is not in performance.


00:25:49.020 --> 00:25:54.020
So a project like PyPy, which actually can use types to achieve higher performance,


00:25:54.020 --> 00:25:59.020
they find that the JIT is faster without taking hints from the user in the code.


00:25:59.020 --> 00:26:01.020
So it just disregards this stuff.


00:26:01.020 --> 00:26:04.020
Because the JIT has the actual types.


00:26:04.020 --> 00:26:06.020
So just a real quick thought experiment.


00:26:06.020 --> 00:26:11.020
Like imagine that I say I'm going to pass you a list of integers.


00:26:11.020 --> 00:26:13.020
That list is three integers long.


00:26:13.020 --> 00:26:14.020
Okay, I can just check them.


00:26:14.020 --> 00:26:15.020
One, two, three.


00:26:15.020 --> 00:26:16.020
All integers, good to go.


00:26:16.020 --> 00:26:18.020
No type error.


00:26:18.020 --> 00:26:22.020
But if I pass you a list of 20,000 integers,


00:26:22.020 --> 00:26:26.020
Every time I pass that to you, I have to check that every single one is an integer.


00:26:26.020 --> 00:26:28.020
Otherwise, I want to have a type error.


00:26:28.020 --> 00:26:33.020
That sort of thing is going a little bit against the spirit of Python


00:26:33.020 --> 00:26:36.020
and being sort of practical and duck typey and whatnot.


00:26:36.020 --> 00:26:41.020
A friend of mine from Intel was sitting next to me and he was saying how


00:26:41.020 --> 00:26:44.020
he came to Python so he wouldn't have to type everything.


00:26:44.020 --> 00:26:46.020
But thankfully, you don't have to type everything.


00:26:46.020 --> 00:26:49.020
The standard library itself, for instance,


00:26:49.020 --> 00:26:53.820
all the type definitions for that are available in this joint type shed repo


00:26:53.820 --> 00:26:58.060
that all of these static type people sort of built together.


00:26:58.060 --> 00:26:59.900
And I'll link to that in the show notes for sure.


00:26:59.900 --> 00:27:03.900
Yeah, my favorite use so far that I've come across for my own work is


00:27:03.900 --> 00:27:09.980
putting type hints in interface areas like an API module to


00:27:09.980 --> 00:27:13.020
that that's how you interact with the package.


00:27:13.020 --> 00:27:14.940
So those are great places for type hints.


00:27:14.940 --> 00:27:15.900
Oh, for sure.


00:27:15.900 --> 00:27:20.400
And so wait, are you saying that-- so there is this old thing, like, they're trying to get rid of it.


00:27:20.400 --> 00:27:23.460
Basically, Python has these sort of stub files, these interface files.


00:27:23.460 --> 00:27:26.200
Some people call them the header files for Python.


00:27:26.200 --> 00:27:28.200
Like, I think it's a .py file.


00:27:28.200 --> 00:27:28.540
Okay.


00:27:28.540 --> 00:27:29.840
.py.


00:27:29.840 --> 00:27:42.420
I was just thinking, like, I've got a package that has a whole bunch of internal code, but it has like an API module that you should-- people interact with from the outside world.


00:27:42.900 --> 00:27:54.060
That's a great place for pretty much any interfaces that are not you're not you that's going to use it that somebody else is going to use it. Those are great places to put type hints if it matters. Oh, definitely. Definitely.


00:27:54.060 --> 00:28:10.020
Cool, but I'm pretty new to it too. So thanks for bringing that up. That was very interesting. Yeah, yeah. And I mean, I think that they're still changing this stuff quite a bit. Right. So I, you know, early adopters go nuts. But for the rest of us that like a little bit more boring technologies, you know, I'm going to go ahead and let


00:28:10.380 --> 00:28:13.180
the auto inference engine of Pylint figured things out for me.


00:28:13.180 --> 00:28:16.180
I'm not going to, you know, jump on the bandwagon so quickly.


00:28:16.180 --> 00:28:17.880
And I'm glad you brought Pylint up.


00:28:17.880 --> 00:28:21.580
I've been sort of dismissing it because I've been using Flake 8,


00:28:21.580 --> 00:28:24.480
but I'll have to take a look at Pylint again.


00:28:24.480 --> 00:28:27.780
Oh, yeah, they've definitely ramped up development on that again.


00:28:27.780 --> 00:28:30.220
I mean, you have to for me anyways, right?


00:28:30.220 --> 00:28:33.280
I just blacklist a lot of errors because I kind of don't agree


00:28:33.280 --> 00:28:35.480
with every single thing that they test for.


00:28:35.480 --> 00:28:37.420
But they make it pretty easy to do.


00:28:37.420 --> 00:28:39.380
You just change it in an INI file. No big deal.


00:28:39.380 --> 00:28:46.260
Last topic again comes back to me finally getting my head out of thinking about PyTest 24 hours a day.


00:28:46.260 --> 00:28:55.380
And one of the things I want to start looking at is some of the web frameworks like Django and Flask.


00:28:55.380 --> 00:28:59.620
I haven't played with them much personally and there's a bunch of personal projects and work


00:28:59.620 --> 00:29:06.980
projects I'd like to do with them. And also quite a few people that listen to testing code are web


00:29:06.980 --> 00:29:11.860
people. And so just to kind of get a more understanding of that, I'm trying to learn


00:29:11.860 --> 00:29:15.620
more frameworks. And one of the things that I've had a hard time getting my head around


00:29:15.620 --> 00:29:24.660
is ORMs or object relational mappers. So luckily I ran across a article from on full stack Python,


00:29:24.660 --> 00:29:30.900
which is Matt McKay's site. Amazing site. Yeah. Yeah. And it's basically it's a full stack Python.


00:29:30.900 --> 00:29:34.740
It's a, I don't remember what it's called, but I think it's just object relational mappers.


00:29:35.380 --> 00:29:38.580
And it goes through what they are.


00:29:38.580 --> 00:29:44.660
So a norm is some code that automates the transfer of data


00:29:44.660 --> 00:29:48.820
from your internal Python objects and classes


00:29:48.820 --> 00:29:51.180
to database tables.


00:29:51.180 --> 00:29:54.420
And they're useful so that you can write Python code instead


00:29:54.420 --> 00:29:56.020
of writing SQL queries.


00:29:56.020 --> 00:29:58.980
And it talks about that and then also talks


00:29:58.980 --> 00:30:02.020
about why you need them and some downsides.


00:30:02.020 --> 00:30:05.300
And yeah, so the downsides actually were interesting.


00:30:05.300 --> 00:30:09.140
I didn't think that anybody would talk about what's wrong with using ORMs.


00:30:09.140 --> 00:30:13.300
Yeah, I mean, realistically, there are some definite engineering trade-offs.


00:30:13.300 --> 00:30:14.180
So what do you say?


00:30:14.180 --> 00:30:17.740
Well, he said, well, a few things are impedance mismatch,


00:30:17.740 --> 00:30:22.540
which coming from electrical world, I was like, impedance mismatch?


00:30:22.540 --> 00:30:25.100
That's like 50 ohms to 75 ohms, right?


00:30:25.100 --> 00:30:25.540
Yeah, yeah.


00:30:25.540 --> 00:30:29.500
But it's basically the way a developer is using the objects


00:30:29.500 --> 00:30:31.300
is different from how--


00:30:31.300 --> 00:30:35.060
can be different from how the data is stored and joined


00:30:35.060 --> 00:30:37.100
in the tables in your database.


00:30:37.100 --> 00:30:41.840
Especially if you've set up the tables in a way that's not like,


00:30:41.840 --> 00:30:45.040
it's contradictory to how it's being used all the time.


00:30:45.040 --> 00:30:47.560
It might be slow and you can maybe


00:30:47.560 --> 00:30:50.480
reshaping your data might speed that up.


00:30:50.480 --> 00:30:53.420
Then potential for reduced performance,


00:30:53.420 --> 00:30:55.220
and this isn't surprising to me,


00:30:55.220 --> 00:30:57.300
if you stick some code in the middle,


00:30:57.300 --> 00:31:00.100
there's it's not free, it's got to run.


00:31:00.100 --> 00:31:00.820
>> Definitely not.


00:31:00.820 --> 00:31:02.980
>> Then also shifting complexity


00:31:02.980 --> 00:31:04.840
from database to the application code,


00:31:04.840 --> 00:31:09.040
which this is something that I didn't quite understand right off the bat,


00:31:09.040 --> 00:31:10.720
but if you think about it, it's not too bad.


00:31:10.720 --> 00:31:17.000
But databases are complex pieces of software that have things like stored procedures,


00:31:17.000 --> 00:31:21.040
stored procedures and a whole bunch of fancy join math and stuff.


00:31:21.040 --> 00:31:21.800
>> Right.


00:31:21.800 --> 00:31:24.560
>> That might not be supported by an ORM.


00:31:24.560 --> 00:31:27.760
So if you had to do that stuff,


00:31:27.760 --> 00:31:29.520
you have to do it in your application instead.


00:31:29.520 --> 00:31:33.340
So it's using a database in a simpler way,


00:31:33.340 --> 00:31:36.840
But that complexity has to go somewhere and it'll go in your application code.


00:31:36.840 --> 00:31:37.840
Yeah, almost certainly.


00:31:37.840 --> 00:31:40.840
But I mean, until you get like database specialists,


00:31:40.840 --> 00:31:46.640
then, you know, it makes it a little bit easier for you as, you know, a sole developer, for instance.


00:31:46.640 --> 00:31:50.240
Yeah, so I punted at first and used document databases


00:31:50.240 --> 00:31:53.340
because I didn't have to think about ORMs right off the bat.


00:31:53.340 --> 00:31:57.640
But I mean, so, but the thing is that an ORM, like he's correct,


00:31:57.640 --> 00:32:00.840
like a database is definitely a very advanced, complex tool.


00:32:00.840 --> 00:32:05.480
But a lot of that advances in complexity, you retain even when using an ORM.


00:32:05.480 --> 00:32:09.080
For instance, a lot of document databases don't have great transaction models,


00:32:09.080 --> 00:32:12.440
don't have great, you know, sort of multi version concurrency models.


00:32:12.440 --> 00:32:16.800
And, you know, so when they put all that work into Postgres,


00:32:16.800 --> 00:32:19.280
or even like MariaDB or something like that,


00:32:19.280 --> 00:32:24.680
you can just by using an ORM, it seems almost as simple as a document database,


00:32:24.680 --> 00:32:27.840
but you get that operational, you know, feature.


00:32:27.840 --> 00:32:34.880
Yeah, I'd definitely heard of SQLAlchemy or SQLAlchemy, but I hadn't heard of a couple


00:32:34.880 --> 00:32:41.200
of the others that he listed here, PeeWee and Pony and SQLObject. Have you used any of these?


00:32:41.200 --> 00:32:47.680
Yeah, so SQLAlchemy is definitely my go-to, and I'll talk about why in a second. But yeah,


00:32:47.680 --> 00:32:52.320
I mean, I've used Django's ORM because I did the Django tutorial, and that's one of the first


00:32:52.320 --> 00:32:57.920
things they teach you. Django has a serviceable ORM, but there are some issues with it that SQL


00:32:57.920 --> 00:33:03.760
Alchemy actually does a much better job with. And I have used PeeWee, in fact, I like PeeWee.


00:33:03.760 --> 00:33:08.160
It's sort of like a simplified version of Django. In my opinion, it basically says like, look,


00:33:08.160 --> 00:33:13.280
if you're not going to be SQLAlchemy, then you know, you can just be plain simple. And


00:33:13.280 --> 00:33:20.400
it does a pretty good job. But these days, SQLAlchemy has gotten so good that, you know, I just


00:33:20.400 --> 00:33:23.400
I'm going to work with a relational database in Python.


00:33:23.400 --> 00:33:29.400
So one thing that SQLAlchemy has is that it sort of has this working copy of all the models,


00:33:29.400 --> 00:33:34.400
and they end up being kind of like singletons within a given process space.


00:33:34.400 --> 00:33:41.400
So with Django, you can actually get two copies of the same thing from the database


00:33:41.400 --> 00:33:45.400
within the same request or the same process.


00:33:45.400 --> 00:33:49.400
And that means that basically concurrently somewhere else in your program


00:33:49.400 --> 00:33:52.400
it could change something, save it, and then when you change it


00:33:52.400 --> 00:33:55.400
in the request handler you're actually trying to work on,


00:33:55.400 --> 00:33:59.400
that will overwrite the previous change.


00:33:59.400 --> 00:34:03.400
You know, like if you change column A in one thread


00:34:03.400 --> 00:34:06.400
and column B in another thread, whichever thread saves first


00:34:06.400 --> 00:34:09.400
is going to overwrite the other unchanged value.


00:34:09.400 --> 00:34:13.400
So there's a setting that's off by default, I think, in Django


00:34:13.400 --> 00:34:16.400
called "atomic requests," and you have to enable that


00:34:16.400 --> 00:34:18.400
to prevent that sort of situation.


00:34:18.400 --> 00:34:20.280
But Django is not alone in this.


00:34:20.280 --> 00:34:23.160
I think that Rails, at least for a very long time,


00:34:23.160 --> 00:34:24.000
did the same thing.


00:34:24.000 --> 00:34:26.120
And Django, of course, is sort of Python's response


00:34:26.120 --> 00:34:27.480
to Ruby on Rails.


00:34:27.480 --> 00:34:28.760
So yeah.


00:34:28.760 --> 00:34:31.600
Does SQLAlchemy not have this problem?


00:34:31.600 --> 00:34:33.260
So SQLAlchemy doesn't have this problem


00:34:33.260 --> 00:34:34.920
because basically, yeah, you only


00:34:34.920 --> 00:34:36.840
get one copy of that thing in your system.


00:34:36.840 --> 00:34:40.640
It has this sort of local index of primary key


00:34:40.640 --> 00:34:43.560
to the object version of that row


00:34:43.560 --> 00:34:45.600
that you're representing, for instance.


00:34:45.600 --> 00:34:50.200
So yeah, SQLAlchemy sort of has, it adds a lot of machinery,


00:34:50.200 --> 00:34:51.840
makes SQLAlchemy a little bit more complex,


00:34:51.840 --> 00:34:55.200
but I've had a friend who I think spent days


00:34:55.200 --> 00:34:57.400
tracking down this issue with Django,


00:34:57.400 --> 00:34:59.400
and SQLAlchemy never would have happened.


00:34:59.400 --> 00:35:01.880
So you pay some upfront costs with setup with SQLAlchemy,


00:35:01.880 --> 00:35:04.240
but I think it's definitely worth it.


00:35:04.240 --> 00:35:06.320
When it comes to this sort of ORM thing though,


00:35:06.320 --> 00:35:08.720
like if I can provide some general advice,


00:35:08.720 --> 00:35:13.440
ORMs are sort of the tools of applications.


00:35:13.440 --> 00:35:19.240
And if you want to form a real opinion on object relational mappers,


00:35:19.240 --> 00:35:22.240
you should look at and compare applications.


00:35:22.240 --> 00:35:26.600
So I spent a fair amount of time reading Reddit source code,


00:35:26.600 --> 00:35:28.840
which does, I think, use SQLAlchemy.


00:35:28.840 --> 00:35:31.320
And it uses it without the declarative object mapper.


00:35:31.320 --> 00:35:37.080
It uses it with the legacy or lower level SQLAlchemy tools.


00:35:37.080 --> 00:35:41.600
But you still get a real sense for where they use an ORM and where they don't.


00:35:41.600 --> 00:35:46.400
And SQLAlchemy actually makes it very easy to pass through normal SQL text.


00:35:46.400 --> 00:35:47.900
That's another thing I really like about it.


00:35:47.900 --> 00:35:51.800
It understands that ORMs are an abstraction that's useful 90% of the time.


00:35:51.800 --> 00:35:58.300
And for that last 10%, you really want the full power of the driver or the database itself.


00:35:58.300 --> 00:35:59.500
Okay, cool.


00:35:59.500 --> 00:36:02.900
I don't have any opinion on these extra couple links that I put in here,


00:36:02.900 --> 00:36:08.100
but Matt has some dedicated pages for SQLAlchemy and PeeWee.


00:36:08.100 --> 00:36:10.980
And one of the things I like about Matt's site anyway,


00:36:10.980 --> 00:36:14.100
the full stack Python, is he gives his opinion


00:36:14.100 --> 00:36:16.060
and information when he has it.


00:36:16.060 --> 00:36:17.660
And when somebody else has already


00:36:17.660 --> 00:36:20.340
explained it well enough or better,


00:36:20.340 --> 00:36:22.500
he just links to their stuff and says, go read that.


00:36:22.500 --> 00:36:23.220
Yeah, absolutely.


00:36:23.220 --> 00:36:25.380
No, I mean, he's a real team player in that regard.


00:36:25.380 --> 00:36:27.740
But I also, I just got to give a shout out to him.


00:36:27.740 --> 00:36:30.900
Like, he so consistently adds to the site.


00:36:30.900 --> 00:36:33.420
It's become such a tremendous resource for someone who


00:36:33.420 --> 00:36:34.940
wants to develop an application.


00:36:34.940 --> 00:36:36.940
I'm sure that the listeners of this podcast


00:36:36.940 --> 00:36:39.700
or for the most part, like already aware of it,


00:36:39.700 --> 00:36:41.220
but yeah, definitely check it out.


00:36:41.220 --> 00:36:42.420
- Definitely.


00:36:42.420 --> 00:36:45.280
Well, that's all of our topics so far.


00:36:45.280 --> 00:36:48.260
We didn't address what you're up to lately


00:36:48.260 --> 00:36:50.900
other than helping out with podcasts.


00:36:50.900 --> 00:36:52.100
(laughing)


00:36:52.100 --> 00:36:53.540
- Yeah, no, it's funny.


00:36:53.540 --> 00:36:57.620
I'm also like prepping for another podcast as well,


00:36:57.620 --> 00:36:59.700
but partially examine life, I guess.


00:36:59.700 --> 00:37:02.860
But basically, yeah, what am I up to lately?


00:37:02.860 --> 00:37:04.220
Well, I had a talk at Pi Bay


00:37:04.220 --> 00:37:06.020
and because it was based on blog posts,


00:37:06.020 --> 00:37:07.420
I thought it'd be easy to put together slides.


00:37:07.420 --> 00:37:09.920
Now it still took, like just full disclosure here,


00:37:09.920 --> 00:37:11.980
it took like another 40, 50 hours


00:37:11.980 --> 00:37:14.380
to make slides from that blog post.


00:37:14.380 --> 00:37:15.720
But it seemed really well received


00:37:15.720 --> 00:37:17.940
and so I'm very relieved right now.


00:37:17.940 --> 00:37:20.660
I got some nice life events coming through,


00:37:20.660 --> 00:37:22.900
parents coming to town, keeping me real busy.


00:37:22.900 --> 00:37:25.260
I also am working on this hyperlink library,


00:37:25.260 --> 00:37:28.260
like I mentioned earlier, URLs in Python


00:37:28.260 --> 00:37:31.220
and it's used by Twisted and some other big projects.


00:37:31.220 --> 00:37:35.220
So fixing bugs in there is always kind of contentious,


00:37:35.220 --> 00:37:40.380
which is why I got a lot of support for people who work on things like setup tools, which is even more widely used.


00:37:40.380 --> 00:37:49.420
So then, beyond this, let's see, yeah, writing blog posts, I got, I think my draft count is up to like 100 now.


00:37:49.420 --> 00:37:53.420
But, yeah, maybe more conferences, more talks.


00:37:53.420 --> 00:37:56.720
I don't know why I keep signing up for these things, but it's great meeting people out there.


00:37:56.720 --> 00:38:01.020
People out there should really look into PiBay and regional conferences, meetups.


00:38:01.020 --> 00:38:05.060
Oh, well, I run a meetup to the Pine Insula meetup, the hottest


00:38:05.060 --> 00:38:09.820
new meetup in the Bay Area, Silicon Valley. And so yeah,


00:38:09.820 --> 00:38:14.940
like, yeah, yeah, we were a this is programming, man. It's all


00:38:14.940 --> 00:38:20.460
about the terrible puns. So we, but yeah, Pine Insula. Yeah, I


00:38:20.460 --> 00:38:24.020
think we even have the site now pineinsula.org. And you know,


00:38:24.020 --> 00:38:27.260
we're on Twitter and so forth. I do my best to record the talks.


00:38:27.260 --> 00:38:30.980
But for people who want to break into this type of, you know,


00:38:30.980 --> 00:38:32.400
speaking and that sort of thing.


00:38:32.400 --> 00:38:35.860
Just look at, look no further than your local meetup, right?


00:38:35.860 --> 00:38:38.660
Go make a 15 minute, 30 minute talk.


00:38:38.660 --> 00:38:39.920
See how it goes.


00:38:39.920 --> 00:38:41.300
Iterate on it, right?


00:38:41.300 --> 00:38:43.260
Have a brown bag at your company.


00:38:43.260 --> 00:38:46.300
Just keep iterating on it and you know, something will stick.


00:38:46.300 --> 00:38:50.340
And, then you can submit it to something like PyCon or whatever.


00:38:50.340 --> 00:38:51.220
That's a great idea.


00:38:51.220 --> 00:38:54.560
I think a lot of people think that you could, you just have to work really hard


00:38:54.560 --> 00:38:58.920
on a talk and give it once and then it's done, but a lot of people give them several


00:38:58.920 --> 00:38:59.320
times.


00:38:59.320 --> 00:38:59.560
Yeah.


00:38:59.560 --> 00:39:03.160
And also like if there's not a meetup in your area, just maybe start one.


00:39:03.160 --> 00:39:05.840
Python programmers are literally everywhere.


00:39:05.840 --> 00:39:16.360
So we, like, you know, even though there's a South Bay Python meetup, which is sort of like more towards Sunnyvale, like kind of south of Mountain View area.


00:39:16.360 --> 00:39:20.800
And there's this SF Python meetup, which is up in San Francisco.


00:39:20.800 --> 00:39:22.560
We put one right in the middle.


00:39:22.560 --> 00:39:27.160
I guess California traffic's bad enough that we sort of have a captive audience, literally.


00:39:27.320 --> 00:39:30.320
But we'll get like, you know, I think when Guido came,


00:39:30.320 --> 00:39:32.680
there were almost 100 people at the meetup.


00:39:32.680 --> 00:39:34.440
And normally we get like 50.


00:39:34.440 --> 00:39:37.480
But it's great because everyone can socialize and something


00:39:37.480 --> 00:39:38.160
a little more intimate.


00:39:38.160 --> 00:39:39.680
It's a little less stressful when you're trying


00:39:39.680 --> 00:39:41.000
to give the talk yourself too.


00:39:41.000 --> 00:39:41.840
Yeah.


00:39:41.840 --> 00:39:44.280
So it wouldn't be a Python Bytes episode


00:39:44.280 --> 00:39:45.680
if I didn't plug my book.


00:39:45.680 --> 00:39:46.240
By all means.


00:39:46.240 --> 00:39:47.920
So one of the things I want to bring up


00:39:47.920 --> 00:39:50.240
is the Python Testing with PyTest


00:39:50.240 --> 00:39:52.600
has a nice discussion forum.


00:39:52.600 --> 00:39:55.200
It's kind of built into what Pragmatic


00:39:55.200 --> 00:39:56.960
offers for all the books.


00:39:56.960 --> 00:40:02.740
But it's a, if you ever ask a question on there, it pings me and tells me, emails me and says, there's a question.


00:40:02.740 --> 00:40:05.120
Just this morning I answered a question.


00:40:05.120 --> 00:40:09.680
Somebody got on and said that they were actually this, I love this.


00:40:09.680 --> 00:40:13.760
They said that the book is helping them understand testing better.


00:40:13.760 --> 00:40:20.280
And I love comments like that, but the, he asked, he had a question about monkey patch versus mock.


00:40:20.280 --> 00:40:26.820
And I'm not going to get into it too much here, but I did reply to him and it's all up there for everybody else.


00:40:26.820 --> 00:40:29.820
to read too. So I'll have a link in the show notes to that.


00:40:29.820 --> 00:40:33.140
That's great. Yeah those sorts of comments really keep you going. I wish


00:40:33.140 --> 00:40:38.340
that my O'Reilly thing had had such a discussion forum. Instead I have to, I got


00:40:38.340 --> 00:40:44.700
my feedback through reviews for a while. I mean emails too. People email and I


00:40:44.700 --> 00:40:47.460
appreciate it. Yeah I get them from all over the place. I get it through the


00:40:47.460 --> 00:40:51.700
discussion forum. I get it from from Twitter and from, we've got a Slack


00:40:51.700 --> 00:40:55.980
channel so people come and tell me what's wrong in the Slack. Yeah


00:40:55.980 --> 00:40:58.980
Yeah, definitely. I know for just like sort of chatting here, right?


00:40:58.980 --> 00:41:06.980
I've been really into like Riot.im, which is a Python based open source Slack sort of thing.


00:41:06.980 --> 00:41:09.980
And there's also Zulip, which is just everywhere these days.


00:41:09.980 --> 00:41:10.980
They're doing an amazing job.


00:41:10.980 --> 00:41:12.980
So what's the first one, Riot?


00:41:12.980 --> 00:41:17.980
Yeah, so Riot.im and it runs a sort of protocol called Matrix.


00:41:17.980 --> 00:41:20.980
And it's a very, very large thing.


00:41:20.980 --> 00:41:24.980
It's basically like you can have end to end encrypted chats with people who are on it.


00:41:24.980 --> 00:41:27.980
but I use it because it's an IRC bridge.


00:41:27.980 --> 00:41:30.980
Like I said, if you want to be sort of in this inner circle,


00:41:30.980 --> 00:41:33.980
see the goings-ons, IRC is still very much alive.


00:41:33.980 --> 00:41:38.980
So you got your list serves and IRC and so forth.


00:41:38.980 --> 00:41:42.980
And Riot makes that pretty easy to get into.


00:41:42.980 --> 00:41:45.980
There's a free node bridge and you just join a free node thing


00:41:45.980 --> 00:41:48.980
and you can look at IRC through your browser


00:41:48.980 --> 00:41:50.980
while having end-to-end encrypted chats with your other friends.


00:41:50.980 --> 00:41:53.980
It also has a sort of peer-to-peer video chat


00:41:53.980 --> 00:41:57.900
that works really, really well because it's just the WebRTC


00:41:57.900 --> 00:42:01.180
open source protocol, works great in Firefox.


00:42:01.180 --> 00:42:04.260
- Well, I'm gonna cut you off 'cause we're running long.


00:42:04.260 --> 00:42:05.660
- Oh, yeah, we're way long.


00:42:05.660 --> 00:42:06.500
Anyways, that's great.


00:42:06.500 --> 00:42:09.140
- Also, I think this is an awesome topic.


00:42:09.140 --> 00:42:12.420
I think that you should come on to Test Encode


00:42:12.420 --> 00:42:16.060
and we can talk about IRC and communication channels.


00:42:16.060 --> 00:42:16.900
That'd be fun.


00:42:16.900 --> 00:42:17.780
- That's actually a great idea.


00:42:17.780 --> 00:42:19.020
Yeah, for sure.


00:42:19.020 --> 00:42:20.820
I'm always like coming up short with topics


00:42:20.820 --> 00:42:23.360
when they come, but yeah, here we are just chatting.


00:42:23.360 --> 00:42:24.360
That's a great idea.


00:42:24.360 --> 00:42:26.480
Dave Again, thank you so much for coming on.


00:42:26.480 --> 00:42:28.400
I love having new voices on here.


00:42:28.400 --> 00:42:30.920
Michael It's been my pleasure.


00:42:30.920 --> 00:42:31.920
And thank Michael.


00:42:31.920 --> 00:42:33.680
When he gets back, I'll send him an email.


00:42:33.680 --> 00:42:34.680
This has been great.


00:42:34.680 --> 00:42:38.600
Dave Yeah, and we'll keep in touch.


00:42:38.600 --> 00:42:40.520
Thank you for listening to Python Bytes.


00:42:40.520 --> 00:42:44.120
Follow the show on Twitter via @PythonBytes.


00:42:44.120 --> 00:42:47.840
That's Python Bytes as in B-Y-T-E-S.


00:42:47.840 --> 00:42:51.680
Get the full show notes, including links, at PythonBytes.fm.


00:42:51.680 --> 00:42:56.520
If you have a news story you'd like featured, visit pythonbytes.fm and send it our way.


00:42:56.520 --> 00:42:59.840
We're always on the lookout for sharing something cool.


00:42:59.840 --> 00:43:00.920
This is Brian Okken.


00:43:00.920 --> 00:43:05.200
On behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast


00:43:05.200 --> 00:43:06.600
with your friends and colleagues.

