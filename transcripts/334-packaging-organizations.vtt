WEBVTT

00:00:00.000 --> 00:00:02.200
- Hello and welcome to Python Bytes,


00:00:02.200 --> 00:00:04.100
where we deliver Python news and headlines


00:00:04.100 --> 00:00:05.680
directly to your earbuds.


00:00:05.680 --> 00:00:09.740
This is episode 300 and 334,


00:00:09.740 --> 00:00:11.680
recorded May 3rd, 2023.


00:00:11.680 --> 00:00:12.680
I'm Michael Kennedy.


00:00:12.680 --> 00:00:13.800
- And I'm Brian Okken.


00:00:13.800 --> 00:00:16.640
- This episode is brought to you this time by us.


00:00:16.640 --> 00:00:18.840
Support our work through our courses


00:00:18.840 --> 00:00:20.080
over at Talk Python Training.


00:00:20.080 --> 00:00:21.860
Check out Brian's pytest course.


00:00:21.860 --> 00:00:23.800
Check out a lot of the other courses I did there.


00:00:23.800 --> 00:00:25.600
Check out the Test and Code podcasts.


00:00:25.600 --> 00:00:27.560
And we have Patreon supporters as well.


00:00:27.560 --> 00:00:30.120
link on the episode pages on the website.


00:00:30.120 --> 00:00:35.000
Connect with us over on Fosstodon@mkennedy@brianhawkin@pythonbytes over there.


00:00:35.000 --> 00:00:39.000
And if you're not part of the YouTube livestream and you wanna be,


00:00:39.000 --> 00:00:44.080
we generally do this on Tuesdays at 11 Pacific time in the morning.


00:00:44.080 --> 00:00:47.720
But today we had to move it, so plus one, plus 23 hours.


00:00:47.720 --> 00:00:49.400
>> Yep. >> All right, yeah, Brian.


00:00:49.400 --> 00:00:50.720
>> Sometimes life happens.


00:00:50.720 --> 00:00:53.600
>> Life does happen, and sometimes PyCons happen.


00:00:53.600 --> 00:00:56.080
>> Yeah. >> Yeah, that was a lot of fun to see there.


00:00:56.080 --> 00:00:58.180
- Yeah, it was a blast.


00:00:58.180 --> 00:01:01.200
I guess I had a great time.


00:01:01.200 --> 00:01:02.040
How about you?


00:01:02.040 --> 00:01:02.860
You got a lot of work done.


00:01:02.860 --> 00:01:05.120
- I got a lot of recording done.


00:01:05.120 --> 00:01:06.900
Looking forward to releasing some of those episodes.


00:01:06.900 --> 00:01:08.560
Met a bunch of great people.


00:01:08.560 --> 00:01:10.840
Saw some old friends, got to hang out with you.


00:01:10.840 --> 00:01:13.600
You brought the staff of the Python staff of power


00:01:13.600 --> 00:01:15.000
and battled the snake,


00:01:15.000 --> 00:01:19.560
which was the episode album art from last time,


00:01:19.560 --> 00:01:20.400
which was a lot of fun.


00:01:20.400 --> 00:01:23.260
So yeah, it's starting to come back, isn't it?


00:01:23.260 --> 00:01:25.560
I mean, but still quite as many people


00:01:25.560 --> 00:01:28.880
or as vendors, but it's good to see it coming back to life.


00:01:28.880 --> 00:01:30.760
- Yeah, I really enjoyed it.


00:01:30.760 --> 00:01:32.520
So should we kick in?


00:01:32.520 --> 00:01:33.760
- Let's do it.


00:01:33.760 --> 00:01:35.280
Yeah, jump in.


00:01:35.280 --> 00:01:38.000
- Well, I was actually talking with one of our friends


00:01:38.000 --> 00:01:41.680
from PyCon that I'm blanking right now.


00:01:41.680 --> 00:01:44.840
So somebody from PyCon, so thank you


00:01:44.840 --> 00:01:48.000
and apologies for forgetting your name right now.


00:01:48.000 --> 00:01:51.680
But I came across, actually from several people


00:01:51.680 --> 00:01:56.680
mentioned Rye because we had talked about Hwak.


00:01:56.680 --> 00:02:01.240
Anyway, H-U-A-K, and I think I got corrected


00:02:01.240 --> 00:02:05.580
that the intended pronunciation is Hwak, I think.


00:02:05.580 --> 00:02:07.160
Anyway. (laughs)


00:02:07.160 --> 00:02:09.600
- I'm on board with that, let's do it.


00:02:09.600 --> 00:02:13.140
- So a similar, so that's what it was,


00:02:13.140 --> 00:02:16.800
was a Rust-based Python project workflow tool.


00:02:16.800 --> 00:02:18.020
So now we have another one.


00:02:18.020 --> 00:02:19.920
This one's called Rye.


00:02:19.920 --> 00:02:21.880
And I don't know what came first,


00:02:21.880 --> 00:02:24.360
but actually this doesn't look that old.


00:02:24.360 --> 00:02:26.720
This is from Armin Ronacher.


00:02:26.720 --> 00:02:28.700
Ronacher, Ronacher, I'm okay.


00:02:28.700 --> 00:02:30.360
I gotta practice this stuff.


00:02:30.360 --> 00:02:32.280
The dude from Flask that started Flask.


00:02:32.280 --> 00:02:34.840
So I was curious about it


00:02:34.840 --> 00:02:37.360
because he usually kind of knows what he's doing.


00:02:37.360 --> 00:02:40.700
And this is a really pretty interesting project.


00:02:40.700 --> 00:02:42.680
So I tried it out this morning.


00:02:42.680 --> 00:02:45.560
Rye, it says it's Armin's personal one-stop shop


00:02:45.560 --> 00:02:47.720
for all of his Python needs.


00:02:47.720 --> 00:02:49.640
So that, and there's a video,


00:02:49.640 --> 00:02:52.580
which I didn't watch, but it's a nine minute intro video.


00:02:52.580 --> 00:02:56.020
So what am I excited about with this?


00:02:56.020 --> 00:03:00.660
So it's more than just project.toml workflow tools.


00:03:00.660 --> 00:03:01.500
It does that.


00:03:01.500 --> 00:03:04.180
So you can do things like initializing a project,


00:03:04.180 --> 00:03:05.840
adding a dependency, removing.


00:03:05.840 --> 00:03:07.260
You can remove a dependency.


00:03:07.260 --> 00:03:08.660
That's kind of a neat trick.


00:03:08.660 --> 00:03:12.640
And then build a wheel and even add lock files,


00:03:12.640 --> 00:03:13.960
which is kind of nice.


00:03:13.960 --> 00:03:17.380
So the other thing that,


00:03:17.380 --> 00:03:19.740
One of the things that I thought was really kind of cool


00:03:19.740 --> 00:03:21.640
is it also manages,


00:03:21.640 --> 00:03:24.340
I'm not gonna find all the details here,


00:03:24.340 --> 00:03:26.020
but it manages Python.


00:03:26.020 --> 00:03:29.980
So you can, what are people using for Pion


00:03:29.980 --> 00:03:31.780
for something to install Python?


00:03:31.780 --> 00:03:33.300
This installs Python also.


00:03:33.300 --> 00:03:36.180
So you can say, you can say what,


00:03:36.180 --> 00:03:40.520
Rai fetch and then give it like 3.9


00:03:40.520 --> 00:03:44.860
and it'll download and install Python 3.9 for you,


00:03:44.860 --> 00:03:46.940
which like, wow, that's kind of cool.


00:03:46.940 --> 00:03:49.300
And it does it in an interesting way.


00:03:49.300 --> 00:03:54.300
So it uses these IndieGreg Python build standalone releases,


00:03:54.300 --> 00:03:56.540
which I was not familiar with.


00:03:56.540 --> 00:04:00.660
So there's these different standalone distributions


00:04:00.660 --> 00:04:02.640
builds of Python, so neat.


00:04:02.640 --> 00:04:06.760
I forgot to add, this is not a Windows thing yet.


00:04:06.760 --> 00:04:09.660
It's just Linux and macOS, so I tried it on Mac.


00:04:09.660 --> 00:04:13.220
So installing a bunch of stuff, but where does it install it?


00:04:13.220 --> 00:04:14.820
It doesn't install it in the normal place,


00:04:14.820 --> 00:04:19.820
it installs it in your home directory under .ry, R-Y-E.


00:04:19.820 --> 00:04:23.460
And that was surprising to me at first,


00:04:23.460 --> 00:04:25.500
but it's kind of neat that everything's there.


00:04:25.500 --> 00:04:29.180
So, okay, so it does pyenv sort of stuff.


00:04:29.180 --> 00:04:30.900
It can install Pythons for you,


00:04:30.900 --> 00:04:32.500
which is kind of cool with the command line.


00:04:32.500 --> 00:04:35.700
You can install a Python and it's pretty fast.


00:04:35.700 --> 00:04:37.460
It also handles virtual environments.


00:04:37.460 --> 00:04:39.940
So you can do things like add,


00:04:39.940 --> 00:04:43.100
run within your virtual environment.


00:04:43.100 --> 00:04:45.220
You can run a command without actually going into it.


00:04:45.220 --> 00:04:47.860
You can say like, "rai run black"


00:04:47.860 --> 00:04:50.100
and it'll run black on your project.


00:04:50.100 --> 00:04:53.380
You can say sync and it'll take all of the dependencies


00:04:53.380 --> 00:04:55.780
in your project.toml and install them


00:04:55.780 --> 00:04:56.860
in your virtual environment.


00:04:56.860 --> 00:04:58.060
That's kind of neat.


00:04:58.060 --> 00:05:00.380
And also it's kind of like PIPX also.


00:05:00.380 --> 00:05:04.740
So you can do things like install a global tool,


00:05:04.740 --> 00:05:07.500
like, you know, PIPX install cards


00:05:07.500 --> 00:05:09.580
or PIPX install really whatever you want


00:05:09.580 --> 00:05:12.860
or black, for instance, if you wanted to.


00:05:12.860 --> 00:05:17.860
if you're gonna like have any global tools on your machine.


00:05:17.860 --> 00:05:20.900
It confused me at first, 'cause I tried it


00:05:20.900 --> 00:05:23.460
and I couldn't get it in the thing to run,


00:05:23.460 --> 00:05:26.340
but it doesn't really, it isn't invasive.


00:05:26.340 --> 00:05:31.340
So it's not modifying your .zhrc or your RC files itself.


00:05:31.340 --> 00:05:33.380
You have to do that.


00:05:33.380 --> 00:05:38.380
So it's all going into your home directory.ry.


00:05:38.380 --> 00:05:41.900
And then I think there's a bin directory in there


00:05:41.900 --> 00:05:45.360
something like that that you just add to your path.


00:05:45.360 --> 00:05:47.480
It's doing that. The neat thing about


00:05:47.480 --> 00:05:51.500
that all that isolation in the .ry directory is that,


00:05:51.500 --> 00:05:53.020
if you decide you don't like it,


00:05:53.020 --> 00:05:57.140
you can just delete it and then delete that directory,


00:05:57.140 --> 00:05:59.900
and all that stuff's gone. Kind of cool.


00:05:59.900 --> 00:06:01.880
>> Yeah. I do like that it just blow away


00:06:01.880 --> 00:06:04.700
the directory and it's gone or it's reset.


00:06:04.700 --> 00:06:08.260
That's pretty cool. It's also interesting to see that this


00:06:08.260 --> 00:06:11.740
is not a package or tool within Python,


00:06:11.740 --> 00:06:13.220
but outside of Python.


00:06:13.220 --> 00:06:15.220
Yeah, I mean, it does.


00:06:15.220 --> 00:06:17.980
It says it uses like uses virtual environment.


00:06:17.980 --> 00:06:21.180
It uses actually uses virtual end,


00:06:21.180 --> 00:06:22.980
which is a third party package


00:06:22.980 --> 00:06:25.420
that's a little faster than the VNB.


00:06:25.420 --> 00:06:28.420
But it also uses a pip,


00:06:28.420 --> 00:06:30.020
but it doesn't expose any of those.


00:06:30.020 --> 00:06:32.260
So it is kind of interesting that it's outside.


00:06:32.260 --> 00:06:33.820
I kind of like that it's outside


00:06:33.820 --> 00:06:37.660
because you can do things like like pip X and and PY and V.


00:06:37.660 --> 00:06:40.260
And for me, it like just worked better.


00:06:40.260 --> 00:06:42.020
I've still had trouble getting,


00:06:42.020 --> 00:06:44.180
pyenv is a cool idea,


00:06:44.180 --> 00:06:46.980
but it mucks with everything in your environment.


00:06:46.980 --> 00:06:48.780
I don't like that part of it.


00:06:48.780 --> 00:06:50.860
>> Yeah, I don't like that either.


00:06:50.860 --> 00:06:53.420
I think the trend, I've been talking,


00:06:53.420 --> 00:06:57.180
I did the Python packaging discussion on


00:06:57.180 --> 00:07:01.180
Talk Python a while ago and there's been a lot of talk about this.


00:07:01.180 --> 00:07:06.020
Talked to Ofek about Hatch and it's looking like


00:07:06.020 --> 00:07:08.540
there's a little more interest in saying like,


00:07:08.540 --> 00:07:13.420
okay, what if we had a tool that actually not just manages environments and packages,


00:07:13.420 --> 00:07:17.860
but actually manages Python like it, for example, like this one, like install the version of


00:07:17.860 --> 00:07:24.620
Python you want and do a bunch of other things along those lines. So yeah, it's interesting.


00:07:24.620 --> 00:07:29.780
Another just a side note, Simon Wilson wrote up some notes on his when he tried Rai. So


00:07:29.780 --> 00:07:31.780
we'll link that article as well.


00:07:31.780 --> 00:07:36.380
Okay, excellent. All right. What is next? PyPI is next.


00:07:36.380 --> 00:07:37.380
Okay.


00:07:37.380 --> 00:07:42.380
Okay, so remarkably PyPI has 452,000 packages.


00:07:42.380 --> 00:07:47.040
That is insane.


00:07:47.040 --> 00:07:50.280
But what is more insane is the traffic, right?


00:07:50.280 --> 00:07:53.720
So there's some, one of the themes from PyCon this year


00:07:53.720 --> 00:07:56.480
was about sustainability and kind of building


00:07:56.480 --> 00:07:57.480
for the future.


00:07:57.480 --> 00:08:00.360
Carol Willing gave a great keynote talking about,


00:08:00.360 --> 00:08:03.560
let's make sure that we're investing


00:08:03.560 --> 00:08:06.720
in the front end story for Python,


00:08:06.720 --> 00:08:10.040
investing in a mobile and deployment story for Python


00:08:10.040 --> 00:08:14.040
and you know, PyPI and the Python Packaging Authority,


00:08:14.040 --> 00:08:15.240
it's kind of there as well, right?


00:08:15.240 --> 00:08:17.920
Like as we grow in traffic,


00:08:17.920 --> 00:08:22.520
we need things like somebody to watch over the security


00:08:22.520 --> 00:08:24.640
and some, you know, somebody to make sure


00:08:24.640 --> 00:08:27.140
all this stuff is developed and polished.


00:08:27.140 --> 00:08:28.440
And people have been doing that,


00:08:28.440 --> 00:08:31.340
but to a large degree in a volunteer way, right?


00:08:31.340 --> 00:08:34.800
But how does Python pay somebody to work on this?


00:08:34.800 --> 00:08:37.760
Well, there's been some grants, I think,


00:08:37.760 --> 00:08:38.840
I don't wanna say the wrong company,


00:08:38.840 --> 00:08:41.000
it was from some of the big tech companies


00:08:41.000 --> 00:08:45.080
are hiring people to do specifically security work,


00:08:45.080 --> 00:08:47.680
like a supply chain type of security for PyPI,


00:08:47.680 --> 00:08:49.040
which is great, right?


00:08:49.040 --> 00:08:51.720
But those are year by year things.


00:08:51.720 --> 00:08:53.640
So what could be done?


00:08:53.640 --> 00:08:56.080
Well, right now, if I go over here on PyPI


00:08:56.080 --> 00:08:58.080
and I search for like, Botocore,


00:08:58.080 --> 00:09:03.040
this is the way to talk to AWS basically,


00:09:03.040 --> 00:09:04.840
from Python to a large degree.


00:09:04.840 --> 00:09:05.680
Who's it run by?


00:09:05.680 --> 00:09:09.440
Oh, it's Garnot, amongst others.


00:09:09.440 --> 00:09:12.440
Wait a minute, this is like the official AWS thing.


00:09:12.440 --> 00:09:16.320
Shouldn't this somehow be kind of more official than that?


00:09:16.320 --> 00:09:19.380
And how do I find the other AWS projects?


00:09:19.380 --> 00:09:22.280
I can like email the person or something.


00:09:22.280 --> 00:09:24.520
I guess I could go over here and see this,


00:09:24.520 --> 00:09:26.440
the projects if I go to their user account,


00:09:26.440 --> 00:09:28.000
but it's kind of just, you know,


00:09:28.000 --> 00:09:30.240
AWS sort of hacked the system


00:09:30.240 --> 00:09:32.600
by creating an account named AWS,


00:09:32.600 --> 00:09:34.080
but it's not really official.


00:09:34.080 --> 00:09:37.840
You don't get a branded story,


00:09:37.840 --> 00:09:39.800
you just use your profile.


00:09:39.800 --> 00:09:41.560
GitHub has something like this.


00:09:41.560 --> 00:09:44.040
If you went to github.com/talkpython,


00:09:44.040 --> 00:09:46.640
this is the official organization.


00:09:46.640 --> 00:09:48.760
We have 47 repositories,


00:09:48.760 --> 00:09:50.760
we have six people involved,


00:09:50.760 --> 00:09:56.560
and you can put this together officially as not Michael,


00:09:56.560 --> 00:09:58.360
but this group.


00:09:58.360 --> 00:10:03.860
the big announcement is introducing PyPI organizations by E-Durban.


00:10:03.860 --> 00:10:07.560
So today we are rolling out, today being a few days ago,


00:10:07.560 --> 00:10:11.860
today we are rolling out the first step in our plan to build financial support


00:10:11.860 --> 00:10:16.060
and long-term sustainability for the Python packaging index,


00:10:16.060 --> 00:10:20.560
while simultaneously giving our users one of the most requested features,


00:10:20.560 --> 00:10:22.260
organization accounts.


00:10:22.260 --> 00:10:27.160
So these are self-managed teams with their own exclusive branded web addresses,


00:10:27.160 --> 00:10:32.840
And the goal is to make PyPI easier for large community projects, organizations, and companies


00:10:32.840 --> 00:10:35.880
to manage multiple sub-teams and multiple packages.


00:10:35.880 --> 00:10:40.280
So much like the GitHub org that I was talking about,


00:10:40.280 --> 00:10:42.520
you can say, "Okay, this person is an admin of it,


00:10:42.520 --> 00:10:45.880
and this person can have write access to that thing, but not this thing."


00:10:45.880 --> 00:10:49.800
So kind of those types of things instead of,


00:10:49.800 --> 00:10:55.640
"Hey, everyone in the company, here's the one and only username and password for PyPI Go."


00:10:56.360 --> 00:11:01.960
Interesting. Yeah. Yeah. And it's like I opened this conversation, increase the


00:11:01.960 --> 00:11:07.760
idea is to increase sustainability. This last year, PyPI served 235 billion


00:11:07.760 --> 00:11:14.000
downloads for those packages and saw 57% a year over year growth on download


00:11:14.000 --> 00:11:19.640
counts and bandwidth alike. That's great, but it also means costs and effort and


00:11:19.640 --> 00:11:23.480
infrastructure and all that is just going up. Also, these organizations are


00:11:23.480 --> 00:11:29.620
not required. AWS can still manage it however they are now they want. So these are opt-in


00:11:29.620 --> 00:11:35.580
and it does cost it says a small fee. I would love to see small fee equals $100 a month


00:11:35.580 --> 00:11:39.780
or a dollar a month. I don't know what this is. Maybe it says somewhere. Maybe I got to


00:11:39.780 --> 00:11:44.580
go on a sliding scale. Yes, exactly. If you got to ask, no, just kidding. It says small


00:11:44.580 --> 00:11:53.100
fee. If you ask, it's not for you. Anyway, PyPI organizations coming now. Check it out.


00:11:53.100 --> 00:11:56.180
- Okay, so is it just, okay, we don't know this yet,


00:11:56.180 --> 00:12:00.240
but is it just for things like companies,


00:12:00.240 --> 00:12:03.620
or could it be for like pytest or something like that?


00:12:03.620 --> 00:12:04.900
- Sure, it could be like for pytest.


00:12:04.900 --> 00:12:06.980
I mean, you talked about,


00:12:06.980 --> 00:12:09.700
it says for large community projects, for example.


00:12:09.700 --> 00:12:12.700
Like you talked about Flask, well, you talked about Armin,


00:12:12.700 --> 00:12:14.980
who was the original creator of Flask,


00:12:14.980 --> 00:12:16.940
but that's now under the Palettes project,


00:12:16.940 --> 00:12:18.800
which runs a bunch of different projects


00:12:18.800 --> 00:12:20.380
and has a bunch of contributors.


00:12:20.380 --> 00:12:22.860
Like I think a Palettes organization would be,


00:12:22.860 --> 00:12:24.500
potentially reasonable, you know?


00:12:24.500 --> 00:12:24.960
Yeah.


00:12:24.960 --> 00:12:25.460
Yeah.


00:12:25.460 --> 00:12:28.800
It's gotta be tough to come up with like pricing for something like this, because


00:12:28.800 --> 00:12:33.160
like we said, some of it is a bunch of volunteer organizations and some of it is,


00:12:33.160 --> 00:12:34.500
um, yeah, companies.


00:12:34.500 --> 00:12:35.560
Uh, so yeah.


00:12:35.560 --> 00:12:36.040
Interesting.


00:12:36.040 --> 00:12:37.160
I, yeah, I don't know.


00:12:37.160 --> 00:12:41.760
I, it probably says somewhere, but I didn't see it in this article on the


00:12:41.760 --> 00:12:42.120
pipe.


00:12:42.120 --> 00:12:42.400
Yeah.


00:12:42.400 --> 00:12:42.960
Nice.


00:12:42.960 --> 00:12:43.360
Cool.


00:12:43.360 --> 00:12:47.800
Well, should we jump into the next topic?


00:12:47.800 --> 00:12:48.500
Yeah, go.


00:12:48.500 --> 00:12:49.100
Okay.


00:12:49.100 --> 00:12:51.680
Well, I just, we.


00:12:51.920 --> 00:12:54.720
I like this article by Bob Belderbos.


00:12:54.720 --> 00:12:59.200
It's five tips to learn any new Python library faster.


00:12:59.200 --> 00:13:02.360
This is actually near and dear to my heart


00:13:02.360 --> 00:13:05.760
because we do this on a weekly basis,


00:13:05.760 --> 00:13:09.600
trying something new.


00:13:09.600 --> 00:13:12.740
I think I have a condensed version of this,


00:13:12.740 --> 00:13:14.360
but let's walk through.


00:13:14.360 --> 00:13:17.360
These are pretty good tips on if you're thinking about using


00:13:17.360 --> 00:13:19.360
something or just want to learn,


00:13:19.360 --> 00:13:20.840
you hear something cool,


00:13:20.840 --> 00:13:23.720
you want to learn about it, what do you do?


00:13:23.720 --> 00:13:28.360
So his first step is quickly read the main docs.


00:13:28.360 --> 00:13:31.560
So read the manual, RTFM.


00:13:31.560 --> 00:13:35.920
Especially, I like things like if they have a quick start


00:13:35.920 --> 00:13:39.560
or getting started, like I like to read that.


00:13:39.560 --> 00:13:41.520
If there's a video, go ahead and watch it,


00:13:41.520 --> 00:13:43.320
especially if it's a short video.


00:13:43.320 --> 00:13:45.080
Go ahead and try that.


00:13:45.080 --> 00:13:47.280
So, okay, so you know what it does, great,


00:13:47.280 --> 00:13:49.040
and you kind of know how it works.


00:13:49.040 --> 00:13:52.080
And then install, number two is install it.


00:13:52.080 --> 00:13:53.280
I think this is funny.


00:13:53.280 --> 00:13:55.260
I mean, obviously you have to install it


00:13:55.260 --> 00:13:57.680
in order to play with it, but okay, install it.


00:13:57.680 --> 00:14:01.000
Number three is explore the library.


00:14:01.000 --> 00:14:02.320
Essentially play with it.


00:14:02.320 --> 00:14:05.760
Play around, see what you do.


00:14:05.760 --> 00:14:09.960
Bob has a great idea of doing this within Jupyter Notebooks


00:14:09.960 --> 00:14:12.720
to just kind of explore what it does.


00:14:12.720 --> 00:14:14.360
That's pretty great.


00:14:14.360 --> 00:14:17.000
And then you have to kind of make it more deliberate.


00:14:17.000 --> 00:14:19.140
So instead of just playing around with like,


00:14:19.140 --> 00:14:22.040
maybe the things it does, try to do something with it.


00:14:22.040 --> 00:14:22.960
Try to have a task.


00:14:22.960 --> 00:14:26.220
And this is a deliberate practice,


00:14:26.220 --> 00:14:30.440
but this is where I think you're really gonna start


00:14:30.440 --> 00:14:34.000
learning something is actually trying to get something done


00:14:34.000 --> 00:14:36.740
because often there'll be extra features


00:14:36.740 --> 00:14:38.520
you don't need right away.


00:14:38.520 --> 00:14:40.660
With a lot of projects,


00:14:40.660 --> 00:14:44.040
most people use 20% of the functionality.


00:14:44.040 --> 00:14:46.480
So you don't learn a hundred percent of the functionality.


00:14:46.480 --> 00:14:49.620
you learn the 20% that you need to get something done.


00:14:49.620 --> 00:14:51.960
So deliberate exercise,


00:14:51.960 --> 00:14:55.400
and then maybe actually build something or change something.


00:14:55.400 --> 00:14:57.680
So number five is build something.


00:14:57.680 --> 00:15:01.160
So going into a deeper level is actually incorporate


00:15:01.160 --> 00:15:02.920
this library in a project of yours,


00:15:02.920 --> 00:15:05.840
or if it's similar to another project


00:15:05.840 --> 00:15:06.760
that you're already using,


00:15:06.760 --> 00:15:08.300
and you're just thinking about switching,


00:15:08.300 --> 00:15:09.720
go ahead and try switching it.


00:15:09.720 --> 00:15:10.880
You might not stick with it,


00:15:10.880 --> 00:15:14.760
but kind of feel how easy it is to change over


00:15:14.760 --> 00:15:16.940
to this new project.


00:15:16.940 --> 00:15:18.760
And you might not publish it, but you might.


00:15:18.760 --> 00:15:20.600
It might be great.


00:15:20.600 --> 00:15:22.320
Building something small is a good idea


00:15:22.320 --> 00:15:25.080
to just kind of get your hands dirty.


00:15:25.080 --> 00:15:28.360
And then the bonus, number six--


00:15:28.360 --> 00:15:31.560
I always like it when people lie about how many tips there are.


00:15:31.560 --> 00:15:34.280
The real bonus is teaching it.


00:15:34.280 --> 00:15:38.000
And this is massive.


00:15:38.000 --> 00:15:40.840
And it just ties the bow on the whole learning process


00:15:40.840 --> 00:15:44.180
is trying to teach it back to somebody.


00:15:44.180 --> 00:15:47.540
And this could be a today I learned thing on your blog


00:15:47.540 --> 00:15:49.460
or an actual longer blog post


00:15:49.460 --> 00:15:51.820
or maybe a little tutorial video or something


00:15:51.820 --> 00:15:54.060
or actually just sit down with somebody


00:15:54.060 --> 00:15:55.980
and try to talk to them about it.


00:15:55.980 --> 00:16:00.020
One of the things that I find even just for ourselves


00:16:00.020 --> 00:16:03.620
for this podcast, trying to look at it and go,


00:16:03.620 --> 00:16:05.180
if I was trying to teach this to somebody


00:16:05.180 --> 00:16:07.340
or tell somebody why they should use it, why?


00:16:07.340 --> 00:16:08.780
I mean, what are the different points?


00:16:08.780 --> 00:16:11.040
So like just earlier when I was talking about Rai,


00:16:11.040 --> 00:16:12.240
what's different about that?


00:16:12.240 --> 00:16:14.420
well, it's different because it's,


00:16:14.420 --> 00:16:17.640
it handles the Python installs also,


00:16:17.640 --> 00:16:19.280
and it also kind of works like PIPX.


00:16:19.280 --> 00:16:21.040
I mean, the different things about it.


00:16:21.040 --> 00:16:23.240
And then think about like, and then actually try it.


00:16:23.240 --> 00:16:24.080
So I tried it out.


00:16:24.080 --> 00:16:28.980
I went through, set up an extra little project directory


00:16:28.980 --> 00:16:31.440
and tried it out a few times and saw what it did,


00:16:31.440 --> 00:16:33.480
looked at the project Toml output.


00:16:33.480 --> 00:16:36.680
So yeah, and then just doing that.


00:16:36.680 --> 00:16:39.200
So some great things.


00:16:39.200 --> 00:16:42.520
- Yeah, I think, you know, teach it is really cool.


00:16:42.520 --> 00:16:44.800
You don't have to be an expert at something


00:16:44.800 --> 00:16:48.160
to give a presentation on it, if you structure,


00:16:48.160 --> 00:16:50.000
long as you're genuine about it, right?


00:16:50.000 --> 00:16:52.680
If you said, hey, I'm gonna teach you


00:16:52.680 --> 00:16:55.240
everything you need to know and how awesome this thing is,


00:16:55.240 --> 00:16:58.000
and really you just learned it last week


00:16:58.000 --> 00:16:59.920
at a conference talk, people might call you out,


00:16:59.920 --> 00:17:02.800
like you don't seem to really know as much as you came,


00:17:02.800 --> 00:17:07.320
but if you say, you know, I'm excited about this thing,


00:17:07.320 --> 00:17:09.900
I just learned it, I wanted to share my excitement


00:17:09.900 --> 00:17:12.720
and just show you a quick getting started thing.


00:17:12.720 --> 00:17:15.080
Then people won't go like, well, why doesn't he know it?


00:17:15.080 --> 00:17:16.680
Like you start out, well, I just learned it,


00:17:16.680 --> 00:17:20.400
but I'm excited and I think you'll be excited too if you.


00:17:20.400 --> 00:17:23.240
So I do think those presentations are awesome.


00:17:23.240 --> 00:17:24.280
I mean, there's plenty of places.


00:17:24.280 --> 00:17:26.380
There's user groups and meetups,


00:17:26.380 --> 00:17:30.160
regional conferences, like online meetups.


00:17:30.160 --> 00:17:32.080
Those people are always looking for presenters.


00:17:32.080 --> 00:17:33.960
They're like, gosh, it's a week away


00:17:33.960 --> 00:17:35.480
and we don't have a speaker yet, right?


00:17:35.480 --> 00:17:36.320
So reach out.


00:17:36.320 --> 00:17:38.060
and there's a ton of opportunity to do that,


00:17:38.060 --> 00:17:39.780
or even brown bags at your company.


00:17:39.780 --> 00:17:44.640
- Yeah, I like that you brought up that be honest about it,


00:17:44.640 --> 00:17:49.320
that you can even say, I just got excited about this,


00:17:49.320 --> 00:17:52.500
learned a little bit, and I wanna show you what it is.


00:17:52.500 --> 00:17:57.180
Yeah, don't make yourself out to be an expert in the field,


00:17:57.180 --> 00:17:59.880
but that's great.


00:17:59.880 --> 00:18:03.520
This process actually is exactly how I got started


00:18:03.520 --> 00:18:07.360
blogging about testing is just learning something new,


00:18:07.360 --> 00:18:09.560
writing an article about it, and then writing a bunch.


00:18:09.560 --> 00:18:14.680
If you really want to deep dive into a module or a package,


00:18:14.680 --> 00:18:16.080
you can write a series of them.


00:18:16.080 --> 00:18:18.880
Write your getting started one of the first thoughts,


00:18:18.880 --> 00:18:20.960
and then move on to,


00:18:20.960 --> 00:18:23.280
well, how do I do this other thing with it?


00:18:23.280 --> 00:18:24.640
How do I do authentication?


00:18:24.640 --> 00:18:27.320
We'll do a little article on that.


00:18:27.320 --> 00:18:30.400
The whole thing could end up being a book.


00:18:30.400 --> 00:18:33.480
You could make a book or a course or something out of it eventually.


00:18:33.480 --> 00:18:36.980
But if you just want to do a quick one, this is a great way to.


00:18:36.980 --> 00:18:37.480
>> Yeah.


00:18:37.480 --> 00:18:38.320
>> All right.


00:18:38.320 --> 00:18:41.000
>> Speaking of just like a open bubble,


00:18:41.000 --> 00:18:42.640
but it's conversation here with like,


00:18:42.640 --> 00:18:44.440
and some of the things I'm learning are PyScript,


00:18:44.440 --> 00:18:46.200
Flat, PySimple, GUI, PyWrite,


00:18:46.200 --> 00:18:48.000
HTMX, Redis, Leaflet.


00:18:48.000 --> 00:18:49.320
Those are all awesome.


00:18:49.320 --> 00:18:51.640
So I can see why you would want to learn those.


00:18:51.640 --> 00:18:55.640
Liz out there says, "I'm excited about this type of presentations,


00:18:55.640 --> 00:18:57.080
tend to be more to the point."


00:18:57.080 --> 00:18:58.400
Which is indeed.


00:18:58.400 --> 00:18:58.760
>> Yeah.


00:18:58.760 --> 00:19:00.720
>> All right. What's next?


00:19:00.720 --> 00:19:03.000
We have GPUs next.


00:19:03.000 --> 00:19:06.320
- Brian, I know you heard that we can do all sorts


00:19:06.320 --> 00:19:08.680
of amazing things by programming GPUs.


00:19:08.680 --> 00:19:12.840
And if we want to process tons of data,


00:19:12.840 --> 00:19:15.160
maybe we're doing medical research on protein folding,


00:19:15.160 --> 00:19:17.600
we're running around a cluster of GPUs,


00:19:17.600 --> 00:19:21.480
and we could solve some kind of huge computational


00:19:21.480 --> 00:19:23.880
biological problem and make a big impact.


00:19:23.880 --> 00:19:26.520
But if you're gonna do that, you sure better hope


00:19:26.520 --> 00:19:28.360
that you, if you're gonna do something like CUDA,


00:19:28.360 --> 00:19:31.360
you better hope that you have not just GPUs,


00:19:31.360 --> 00:19:32.720
that's way too broad, no, no, no,


00:19:32.720 --> 00:19:35.260
you have NVIDIA GPUs.


00:19:35.260 --> 00:19:38.840
And NVIDIA GPUs are sometimes hard to come by.


00:19:38.840 --> 00:19:41.200
Couple years ago, they were very hard to come by,


00:19:41.200 --> 00:19:42.160
unless you're using the cloud


00:19:42.160 --> 00:19:43.400
where you can go get them, right?


00:19:43.400 --> 00:19:45.520
I have an awesome Mac here.


00:19:45.520 --> 00:19:48.840
I've got my M2 Pro Mac mini now,


00:19:48.840 --> 00:19:53.840
and that thing has 16 GPU cores on it.


00:19:53.840 --> 00:19:57.400
Can I do CUDA or use PyCUDA on it?


00:19:57.400 --> 00:19:59.920
Nope, that's not an NVIDIA one.


00:19:59.920 --> 00:20:02.400
And so like, honestly, on Mac especially,


00:20:02.400 --> 00:20:06.800
it's been extremely hard to do any sort of GPU computation, right?


00:20:06.800 --> 00:20:11.000
We had the afterburner cards and those like weird external graphics cards


00:20:11.000 --> 00:20:15.300
on the older Intel ones, but those are not even an option in the last four years.


00:20:15.300 --> 00:20:18.100
So, you know, that's a drawback.


00:20:18.100 --> 00:20:23.100
And on Mac, the graphics language like DirectX on Windows


00:20:23.100 --> 00:20:25.900
or OpenGL and a lot of things is called Metal.


00:20:25.900 --> 00:20:29.800
And so I want to introduce you to a library and an article called


00:20:29.800 --> 00:20:33.960
Python gets down to the metal, not like CPU, but GPU.


00:20:33.960 --> 00:20:36.280
And it says, are you a Mac and Python person?


00:20:36.280 --> 00:20:38.640
Do you have a trillion numbers to multiply together?


00:20:38.640 --> 00:20:40.720
You don't have all day to wait for them?


00:20:40.720 --> 00:20:42.480
Says, well, Python is quite slow,


00:20:42.480 --> 00:20:43.520
although the person acknowledges,


00:20:43.520 --> 00:20:46.920
I've been a happy Python user for quite a while.


00:20:46.920 --> 00:20:49.760
You know, for pure number crunching,


00:20:49.760 --> 00:20:52.080
Python is not as fast as the compiled languages


00:20:52.080 --> 00:20:54.020
like C and REST, which is totally true.


00:20:54.020 --> 00:20:56.200
Is it plenty fast to drive your web API?


00:20:56.200 --> 00:20:57.920
Probably, it's probably really fast for that.


00:20:57.920 --> 00:20:59.840
But if you literally have a trillion numbers,


00:20:59.840 --> 00:21:01.480
you want to just crunch them in a loop.


00:21:01.480 --> 00:21:03.480
The advice is not to do that.


00:21:03.480 --> 00:21:08.140
The advice is to use something like Pandas or NumPy or Dask,


00:21:08.140 --> 00:21:09.360
or something like that,


00:21:09.360 --> 00:21:10.920
which are really all C-base.


00:21:10.920 --> 00:21:16.480
Or if you had a NVIDIA graphics card,


00:21:16.480 --> 00:21:18.960
maybe you could use some thing like PyCuda.


00:21:18.960 --> 00:21:22.400
But again, on the super powerful computer,


00:21:22.400 --> 00:21:23.960
it is just you can't do it.


00:21:23.960 --> 00:21:26.160
There's no way to get an NVIDIA graphics card.


00:21:26.160 --> 00:21:32.160
However, if you could somehow program this metal, it says metal does have a way to program it.


00:21:32.160 --> 00:21:34.160
It's just there's not a lot of things for it.


00:21:34.160 --> 00:21:40.560
And it says there's a language to do on GPU computation that looks very C++ like.


00:21:40.560 --> 00:21:45.160
And it says on an M2, this is not the pro, but the regular one has 8 GP cores,


00:21:45.160 --> 00:21:49.560
which means, let's see, they give some numbers here.


00:21:49.560 --> 00:21:53.360
Yeah, it says on the 8 GPU core version,


00:21:53.360 --> 00:21:57.040
you could do about a trillion floating point operations a second.


00:21:57.040 --> 00:21:59.680
And that's the base version, right?


00:21:59.680 --> 00:22:02.240
And so the bigger models like mine,


00:22:02.240 --> 00:22:04.720
those are up towards 10 trillion, right?


00:22:04.720 --> 00:22:07.040
So mine's probably like six or seven trillion.


00:22:07.040 --> 00:22:11.200
But, you know, the ultra max, I don't know, whatever,


00:22:11.200 --> 00:22:13.600
the bigger ones can do even more than that, right?


00:22:13.600 --> 00:22:16.480
So that is a ton of power.


00:22:16.480 --> 00:22:19.520
And so we introduce Metal Compute.


00:22:19.520 --> 00:22:21.600
So pip install Metal Compute.


00:22:21.600 --> 00:22:24.300
With this, it's a little bit like doing SQL,


00:22:24.300 --> 00:22:27.720
raw SQL database stuff in that you


00:22:27.720 --> 00:22:32.180
define a thing that you want to run on the graphics card.


00:22:32.180 --> 00:22:35.640
That looks a lot like C++,


00:22:35.640 --> 00:22:37.960
I think you would imagine, Brian, what do you say?


00:22:37.960 --> 00:22:38.480
>> Yeah.


00:22:38.480 --> 00:22:41.200
>> Yeah, it's just hash include metal standard lib,


00:22:41.200 --> 00:22:45.080
using namespace metal, write a function, do the operations.


00:22:45.080 --> 00:22:48.760
There's a lot of const device float star buffer.


00:22:48.760 --> 00:22:50.600
I mean, it's not easy, right?


00:22:50.600 --> 00:22:55.840
But it's also not that easy on CUDA and other things as well, generally speaking.


00:22:55.840 --> 00:22:57.320
So they come up and say, "All right,


00:22:57.320 --> 00:23:01.520
what we're going to do is going to come up with a bunch of a vector and a matrix,


00:23:01.520 --> 00:23:05.080
then we're going to multiply them and do a bunch of work and get the answers out."


00:23:05.080 --> 00:23:08.880
Off it goes, prints out the answer. Very cool.


00:23:08.880 --> 00:23:12.980
>> It's cool that you don't have to compile it or anything though.


00:23:12.980 --> 00:23:14.460
>> Yeah, it is cool.


00:23:14.460 --> 00:23:15.720
>> Or have it in a separate file.


00:23:15.720 --> 00:23:18.140
It's just a string there. That's neat.


00:23:18.140 --> 00:23:47.860
It is. And if I was a, if this was my job and someone said, Michael, you're writing this program, I would not do what they are doing in this example and put triple quotes and put metal code, which is like C++ in there. I would write a metal file. Yeah. Or a C, call it CPP or whatever is going to give you the best auto complete and color syntax highlighting. And then just do the old path, read text, get that, you know, in one line, get that out, but have that in a separate file. So you could sort of


00:23:47.860 --> 00:23:49.900
more properly reason about it.


00:23:49.900 --> 00:23:52.460
But anyway, it says, look, we run this together


00:23:52.460 --> 00:23:55.540
and did a whole bunch of work.


00:23:55.540 --> 00:23:58.100
Took 70 milliseconds to do 10 multiplications.


00:23:58.100 --> 00:24:00.420
Not that impressive because there's a startup cost.


00:24:00.420 --> 00:24:03.780
What if we gave it a billion multiplications


00:24:03.780 --> 00:24:05.940
to multiply that vector and that matrix?


00:24:05.940 --> 00:24:07.620
Oh, that takes 0.3 seconds.


00:24:07.620 --> 00:24:09.460
A billion times, that's a lot.


00:24:09.460 --> 00:24:10.300
- Yeah.


00:24:10.300 --> 00:24:11.620
- So that's pretty good.


00:24:11.620 --> 00:24:14.860
It does say though, look, part of the speed


00:24:14.860 --> 00:24:18.460
or part of the challenge is moving data into memory


00:24:18.460 --> 00:24:19.860
and then out of memory.


00:24:19.860 --> 00:24:21.940
And so the more you move stuff in and out


00:24:21.940 --> 00:24:23.740
rather than kind of load it up with the data


00:24:23.740 --> 00:24:25.540
and then do operations on it, it will be slower.


00:24:25.540 --> 00:24:28.540
So it talks a bit about some of the performance things


00:24:28.540 --> 00:24:30.100
that you can do to make it faster.


00:24:30.100 --> 00:24:32.360
It gives some examples on how to do that.


00:24:32.360 --> 00:24:33.980
There's probably some interesting trade-offs


00:24:33.980 --> 00:24:36.820
with the Apple Silicon having a shared memory


00:24:36.820 --> 00:24:40.020
between memory memory and GPU memory, right?


00:24:40.020 --> 00:24:41.740
You don't actually have to copy it between there.


00:24:41.740 --> 00:24:44.060
But I suspect that you're going from Python


00:24:44.060 --> 00:24:48.100
to C++ memory and back through some kind of serialization.


00:24:48.100 --> 00:24:50.580
That's going to have some kind of cost, who knows.


00:24:50.580 --> 00:24:53.900
Anyway, there's some cool examples of a Mandelbrot set


00:24:53.900 --> 00:24:57.860
being computed with this, or Julia set, rather.


00:24:57.860 --> 00:24:59.900
But yeah, people have been dreaming


00:24:59.900 --> 00:25:02.580
of doing GPU processing on their Macs.


00:25:02.580 --> 00:25:04.220
Well, this might be worth checking out.


00:25:04.220 --> 00:25:05.180
- Nice.


00:25:05.180 --> 00:25:07.020
- The other thing that's kind of cool about it,


00:25:07.020 --> 00:25:09.900
it doesn't, you know, it's not like a library


00:25:09.900 --> 00:25:12.260
that takes Python code and compiles it


00:25:12.260 --> 00:25:15.260
or transpiles it to run on the GPU,


00:25:15.260 --> 00:25:17.540
which would be awesome, but at the same time,


00:25:17.540 --> 00:25:19.280
if it doesn't quite get it right,


00:25:19.280 --> 00:25:20.620
how much control do you have?


00:25:20.620 --> 00:25:22.940
How useful is it? You don't know.


00:25:22.940 --> 00:25:27.040
Here, if you can just give it the data as an array,


00:25:27.040 --> 00:25:28.660
then you're just writing straight metal,


00:25:28.660 --> 00:25:30.480
which is a bit of a pain if you don't know it,


00:25:30.480 --> 00:25:34.100
but at the same time, it means that it's super flexible,


00:25:34.100 --> 00:25:36.280
like a DB API.


00:25:36.280 --> 00:25:37.760
You open a connection, you say,


00:25:37.760 --> 00:25:39.740
"Here's a string, run that on the database."


00:25:39.740 --> 00:25:43.540
you can give it a selector, some kind of query or update,


00:25:43.540 --> 00:25:45.180
and it kind of gets out of the way.


00:25:45.180 --> 00:25:47.340
So it seems pretty flexible in that regard.


00:25:47.340 --> 00:25:49.060
- Yeah. - Yeah.


00:25:49.060 --> 00:25:50.900
- Interesting, and this is Mac only, right?


00:25:50.900 --> 00:25:53.540
So this is-- - Yeah, it's Mac only.


00:25:53.540 --> 00:25:54.860
Take that, NVIDIA.


00:25:54.860 --> 00:25:56.380
You can't run Mac, no, just kidding.


00:25:56.380 --> 00:25:58.180
I have both an NVIDIA card and this,


00:25:58.180 --> 00:25:59.460
but I don't really have,


00:25:59.460 --> 00:26:00.980
I would like to do more GPU stuff,


00:26:00.980 --> 00:26:02.660
but I just don't have a trillion numbers


00:26:02.660 --> 00:26:04.220
that need multiplying right now.


00:26:04.220 --> 00:26:05.140
(laughing)


00:26:05.140 --> 00:26:06.540
- Well, you know, it's not a bad thing.


00:26:06.540 --> 00:26:07.380
- Someday, no.


00:26:08.540 --> 00:26:09.840
All right, over to you.


00:26:09.840 --> 00:26:12.180
- I've got, so we're onto extras.


00:26:12.180 --> 00:26:15.700
I've got just one extra that I wanted to bring up,


00:26:15.700 --> 00:26:18.560
and that was just the textual.


00:26:18.560 --> 00:26:24.020
So Will McGugin posted like this picture


00:26:24.020 --> 00:26:26.100
and like with no explanation.


00:26:26.100 --> 00:26:28.380
Apparently it's the weird,


00:26:28.380 --> 00:26:31.140
I'm showing a weird bird with a large mouth.


00:26:31.140 --> 00:26:33.540
It's kind of an ugly thing, I think.


00:26:33.540 --> 00:26:36.140
But it's the logo for Frogmouth.


00:26:36.140 --> 00:26:37.460
And what is Frogmouth?


00:26:37.460 --> 00:26:39.460
Frogmouth is the first,


00:26:39.460 --> 00:26:41.980
apparently first of possibly more to come,


00:26:41.980 --> 00:26:45.060
applications that the textual team is releasing


00:26:45.060 --> 00:26:46.380
that are built on textual.


00:26:46.380 --> 00:26:48.580
So Frogmouth is a markdown viewer


00:26:48.580 --> 00:26:50.620
and browser for your terminal.


00:26:50.620 --> 00:26:52.740
And it looks pretty clean.


00:26:52.740 --> 00:26:54.840
I tried it out as well.


00:26:54.840 --> 00:26:57.980
I haven't been able to get like these menu bar thing


00:26:57.980 --> 00:27:00.300
or the tree things on the side,


00:27:00.300 --> 00:27:04.420
but it's like a navigation thing with like,


00:27:04.420 --> 00:27:08.340
You can browse your markdown within Textual.


00:27:08.340 --> 00:27:09.860
So it's kind of fun.


00:27:09.860 --> 00:27:12.020
- Yeah, continues to impress


00:27:12.020 --> 00:27:13.460
with what they can build with that stuff.


00:27:13.460 --> 00:27:15.540
- Yeah, and this is the application that I tried


00:27:15.540 --> 00:27:17.020
when I was talking about Rai.


00:27:17.020 --> 00:27:20.980
I tried installing this as a global application


00:27:20.980 --> 00:27:22.540
and it worked just fine.


00:27:22.540 --> 00:27:23.380
- Yeah, cool.


00:27:23.380 --> 00:27:26.580
All right, I would like to serenade the audience, Brian.


00:27:26.580 --> 00:27:27.540
- Oh, yay.


00:27:27.540 --> 00:27:29.380
- Yeah, I was gonna talk about this as a main item.


00:27:29.380 --> 00:27:32.820
This thing called Serenade at serenade.ai


00:27:32.820 --> 00:27:34.540
And it's really neat.


00:27:34.540 --> 00:27:39.260
What it does is you install a plugin for your editor,


00:27:39.260 --> 00:27:43.340
where your editor equals VS Code or JetBrains IDs,


00:27:43.340 --> 00:27:44.300
one of them too.


00:27:44.300 --> 00:27:45.680
And then you run this in the background


00:27:45.680 --> 00:27:46.980
and you can speak to it,


00:27:46.980 --> 00:27:49.000
like you hit a hotkey or whatever.


00:27:49.000 --> 00:27:54.000
And you basically start speaking code-oriented operations.


00:27:54.000 --> 00:27:59.200
So there's a cool example that it shows somewhere in here.


00:27:59.200 --> 00:28:00.340
Let's see.


00:28:00.340 --> 00:28:02.460
Yeah, if you go and click on the docs,


00:28:02.460 --> 00:28:05.820
you'll see a bit of a video thing here.


00:28:05.820 --> 00:28:10.820
And basically you can go into it and you can say,


00:28:10.820 --> 00:28:13.180
teach you to do tests.


00:28:13.180 --> 00:28:15.260
You can navigate around, this is kind of cool.


00:28:15.260 --> 00:28:18.500
So if you're typing in the editor, you're kind of good.


00:28:18.500 --> 00:28:21.180
I mean, I know if you have RSI and stuff, that's not ideal.


00:28:21.180 --> 00:28:23.500
But one of the challenges is like,


00:28:23.500 --> 00:28:25.620
okay, I need to leave this and navigate over there.


00:28:25.620 --> 00:28:29.220
So you can say things like, open some file name


00:28:29.220 --> 00:28:31.580
and it'll actually go through your editor


00:28:31.580 --> 00:28:33.460
and say, "Oh, that's over in this directory.


00:28:33.460 --> 00:28:35.620
You need to expand the section and it'll jump to it."


00:28:35.620 --> 00:28:37.380
Or you can say, "Go to this function,"


00:28:37.380 --> 00:28:42.340
or those things you can speak to it and it'll do it.


00:28:42.340 --> 00:28:43.640
Anyway, it's really cool.


00:28:43.640 --> 00:28:45.240
Why is it not the main item?


00:28:45.240 --> 00:28:47.740
Because I'm super excited about these things.


00:28:47.740 --> 00:28:52.860
The reason it's not is it hasn't really been touched for coming up on a year,


00:28:52.860 --> 00:28:55.380
and that was just a merge of some PR.


00:28:55.380 --> 00:28:57.460
Is it still going? I don't know.


00:28:57.460 --> 00:29:00.020
It was working pretty good,


00:29:00.020 --> 00:29:02.020
but then it was throwing errors.


00:29:02.020 --> 00:29:03.700
I don't know, I love the idea.


00:29:03.700 --> 00:29:05.500
If this thing comes back to life,


00:29:05.500 --> 00:29:08.460
someone out there let us know because this is super cool,


00:29:08.460 --> 00:29:11.160
but it doesn't quite seem to be getting


00:29:11.160 --> 00:29:14.140
kept up with the editors and tools and so on.


00:29:14.140 --> 00:29:16.340
>> I liked your comment in the show notes,


00:29:16.340 --> 00:29:19.340
serenade has seemed to gone silent.


00:29:19.340 --> 00:29:22.660
>> It has gone silent. Thank you.


00:29:22.660 --> 00:29:25.220
But it's still worth checking out. It's cool.


00:29:25.220 --> 00:29:29.600
Then Brian Skin, we've been


00:29:29.600 --> 00:29:32.360
We're gonna talk a lot about packaging on this episode.


00:29:32.360 --> 00:29:35.400
And I did my packaging discussion,


00:29:35.400 --> 00:29:37.320
and sort of inspired by that,


00:29:37.320 --> 00:29:41.940
or maybe just the discussion that I was also inspired by,


00:29:41.940 --> 00:29:45.840
they're setting up a Python distribution


00:29:45.840 --> 00:29:47.640
packaging round table,


00:29:47.640 --> 00:29:52.080
not just of the people inside Python Core Devs world,


00:29:52.080 --> 00:29:55.600
but in the broader ecosystem for like Anaconda


00:29:55.600 --> 00:29:58.280
and data science and that, all right.


00:29:58.280 --> 00:30:01.520
Do they have 13 maintainers across nine projects


00:30:01.520 --> 00:30:06.520
lined up for Tuesday, May 9th, and a link to go attend it.


00:30:06.520 --> 00:30:10.080
So if you're interested, you can go check that out.


00:30:10.080 --> 00:30:14.160
Yeah, so I'll put a link in the show notes, yeah?


00:30:14.160 --> 00:30:15.060
- Cool. - Yeah.


00:30:15.060 --> 00:30:16.920
That's it for the extras on my end.


00:30:16.920 --> 00:30:18.920
How about a joke?


00:30:18.920 --> 00:30:20.680
- Yeah, but before we go there,


00:30:20.680 --> 00:30:22.840
I just wanted to say I just remembered the person


00:30:22.840 --> 00:30:25.160
that told me about Rai in the first place,


00:30:25.160 --> 00:30:26.640
and now I feel like a dork.


00:30:26.640 --> 00:30:28.100
It was Paul Everett.


00:30:28.100 --> 00:30:30.360
So thanks, Paul, from JetBrains.


00:30:30.360 --> 00:30:31.680
- Awesome, yeah.


00:30:31.680 --> 00:30:33.480
Paul was quite the host at PyCon


00:30:33.480 --> 00:30:36.840
and did a bunch of awesome stuff for many people.


00:30:36.840 --> 00:30:38.120
Much appreciated.


00:30:38.120 --> 00:30:39.520
- All right, how about a joke?


00:30:39.520 --> 00:30:41.560
- All right, before I put this on the screen,


00:30:41.560 --> 00:30:43.120
I'll tell you about it.


00:30:43.120 --> 00:30:46.960
Sometimes programming is just amazing.


00:30:46.960 --> 00:30:48.440
You just get in the zone and you just go,


00:30:48.440 --> 00:30:50.340
look what I built, boom, boom, boom, boom.


00:30:50.340 --> 00:30:52.960
Other times, you end up with a bald patch


00:30:52.960 --> 00:30:54.360
where you've been tearing your hair out.


00:30:54.360 --> 00:30:56.320
You're like, no, why?


00:30:56.320 --> 00:30:58.300
You may end up yelling at the computer, right?


00:30:58.300 --> 00:30:59.640
There's just like a bunch of stuff.


00:30:59.640 --> 00:31:03.060
And this joke highlights the small wins


00:31:03.060 --> 00:31:05.140
you might make in this situation, okay?


00:31:05.140 --> 00:31:08.700
So it's just a person with two monitors,


00:31:08.700 --> 00:31:12.400
a bunch of energy drinks crushed next to them,


00:31:12.400 --> 00:31:14.580
bunch of wrappers, empty coffee.


00:31:14.580 --> 00:31:16.500
They've clearly been here for a while.


00:31:16.500 --> 00:31:18.580
And the arms are up like, "Yes!


00:31:18.580 --> 00:31:20.400
"Wow, a different error message.


00:31:20.400 --> 00:31:22.060
"Finally, some progress."


00:31:22.060 --> 00:31:23.940
(laughing)


00:31:23.940 --> 00:31:24.780
- Yes.


00:31:24.780 --> 00:31:29.780
I mentioned I've been working with a guy named Lauren


00:31:29.780 --> 00:31:31.500
on a Flutter mobile app.


00:31:31.500 --> 00:31:34.560
Let me tell you, there are a lot of tools in that tool chain


00:31:34.560 --> 00:31:37.540
and more than once, here I have been like,


00:31:37.540 --> 00:31:41.220
"Yes, that's not the same error, we're making progress."


00:31:41.220 --> 00:31:42.060
- Yeah.


00:31:42.060 --> 00:31:44.140
(laughs)


00:31:44.140 --> 00:31:48.500
This was me yesterday for half the day.


00:31:48.500 --> 00:31:53.260
Working with a Docker compile that used Docker


00:31:53.260 --> 00:31:57.580
and artifactory and a whole bunch of C++ stuff.


00:31:57.580 --> 00:31:59.540
>> Indeed. All right.


00:31:59.540 --> 00:32:01.300
Well, let's hope for


00:32:01.300 --> 00:32:03.980
different error messages for anyone out there struggling,


00:32:03.980 --> 00:32:06.700
and then eventually, more error messages.


00:32:06.700 --> 00:32:08.500
>> That's a good one.


00:32:08.500 --> 00:32:11.260
May you have a different error message tomorrow.


00:32:11.260 --> 00:32:13.380
>> Exactly. May you live in


00:32:13.380 --> 00:32:17.020
interesting times and may you have different error messages.


00:32:17.020 --> 00:32:18.580
All right. Well, thanks for being here, Brian.


00:32:18.580 --> 00:32:18.860
>> Thank you.


00:32:18.860 --> 00:32:19.900
>> Thanks everyone for listening.


00:32:19.900 --> 00:32:21.140
>> All right. Bye.

