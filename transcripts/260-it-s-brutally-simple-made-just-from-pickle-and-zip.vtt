
00:00:00.000 --> 00:00:03.180
- Hello and welcome to Python Bytes,


00:00:03.180 --> 00:00:04.700
where we deliver Python news and headlines


00:00:04.700 --> 00:00:05.820
directly to your earbuds.


00:00:05.820 --> 00:00:10.820
This is episode 260, recorded November 19th, 2021.


00:00:10.820 --> 00:00:12.020
I'm Michael Kennedy.


00:00:12.020 --> 00:00:13.300
- And I'm Brian Okken.


00:00:13.300 --> 00:00:14.140
- I'm Chris Petty.


00:00:14.140 --> 00:00:16.340
- Chris, welcome to the podcast.


00:00:16.340 --> 00:00:18.300
You're a podcast veteran,


00:00:18.300 --> 00:00:20.820
but the first time here on Python Bytes.


00:00:20.820 --> 00:00:22.080
Happy to have you here.


00:00:22.080 --> 00:00:22.920
- Thank you very much.


00:00:22.920 --> 00:00:24.180
It's a pleasure to be here.


00:00:24.180 --> 00:00:25.280
It's good to be back.


00:00:25.280 --> 00:00:26.620
- We're gonna jump into a bunch of the news,


00:00:26.620 --> 00:00:27.860
but before we do, you know,


00:00:27.860 --> 00:00:29.500
tell people a bit about yourself.


00:00:29.500 --> 00:00:30.220
Absolutely.


00:00:30.220 --> 00:00:35.780
I've been in the tech business for about 35 years now, something like that.


00:00:35.780 --> 00:00:40.860
And, I've been a, and a self, self identifying Pythonista for


00:00:40.860 --> 00:00:42.540
about the last five or six years.


00:00:42.540 --> 00:00:44.940
Um, I work for these days.


00:00:44.940 --> 00:00:49.300
I work for just, just recently changed jobs within Amazon.


00:00:49.300 --> 00:00:52.660
I used to work for the web services, elastic file system team.


00:00:52.660 --> 00:00:58.160
And I now work, I switched gears from, you know, living in the clouds to living


00:00:58.160 --> 00:01:01.040
the Amazon fulfillment center is we're now a network.


00:01:01.040 --> 00:01:04.400
So is that mean you're doing what like programming in COBOL or we using now?


00:01:04.400 --> 00:01:07.840
Yeah, nothing but COBOL and Fortran.


00:01:07.840 --> 00:01:10.640
They're just all the worst, all the most possible, you know, not at all.


00:01:10.640 --> 00:01:17.280
We do my team Optitech IT, we do network automation in for infrastructure.


00:01:17.280 --> 00:01:19.040
So it's a lot of fun, actually.


00:01:19.040 --> 00:01:23.440
It's really kind of neat going from building microservices and things like that,


00:01:23.440 --> 00:01:29.680
being infrastructure oriented at that level to like working with being responsible for automating


00:01:29.680 --> 00:01:36.640
things like, you know, network protocols, DNS, DHCP, fun stuff like that at scale in the


00:01:36.640 --> 00:01:41.040
fulfillment sectors. It's a really cool gig. Yeah, that sounds really interesting. And you


00:01:41.040 --> 00:01:44.560
get an interface with physical things that go physical places, which is interesting.


00:01:44.560 --> 00:01:49.120
Yeah, it really is. Thank you. I only ship bits. I don't know. Brian,


00:01:49.120 --> 00:01:51.520
You also you also work on physical things.


00:01:51.520 --> 00:01:54.880
Yeah, I like working with actual make things.


00:01:54.880 --> 00:01:55.440
It's nice.


00:01:55.440 --> 00:01:56.240
Yeah, absolutely.


00:01:56.240 --> 00:01:58.080
It's a nice change of pace.


00:01:58.080 --> 00:02:02.080
Yeah, I've known out in the audience.


00:02:02.080 --> 00:02:03.120
Nat Ned batch elder.


00:02:03.120 --> 00:02:03.520
Hey, Ned.


00:02:03.520 --> 00:02:04.400
Thanks for being here.


00:02:04.400 --> 00:02:05.920
This Chris Boston represent.


00:02:05.920 --> 00:02:08.880
That is amazing.


00:02:08.880 --> 00:02:11.120
His he does so much work with Boston Python,


00:02:11.120 --> 00:02:17.040
and I can't wait till we can get back to actually like being in a room together with other people


00:02:17.040 --> 00:02:17.280
again.


00:02:18.880 --> 00:02:20.660
- I know, absolutely.


00:02:20.660 --> 00:02:24.360
So Brian, I used to feel like a cog in the machine,


00:02:24.360 --> 00:02:27.000
but now I work at a pretty small company


00:02:27.000 --> 00:02:28.240
where I make a lot of the choices,


00:02:28.240 --> 00:02:29.380
so I don't have to feel like that.


00:02:29.380 --> 00:02:32.540
But I think we're gonna talk about something


00:02:32.540 --> 00:02:35.480
that I think is awesome, because Ned is here.


00:02:35.480 --> 00:02:36.920
- Yeah, it's kinda nice that Ned's here.


00:02:36.920 --> 00:02:38.620
We picked this just for you, Ned.


00:02:38.620 --> 00:02:43.880
Ned does a lot of stuff for Python,


00:02:43.880 --> 00:02:46.160
and one of the things that he's done


00:02:46.160 --> 00:02:48.920
is this cool tool called Cog,


00:02:48.920 --> 00:02:50.720
which I've been watching for a while,


00:02:50.720 --> 00:02:55.520
but I haven't had a really good reason to use.


00:02:55.520 --> 00:02:57.440
But what Cog does is you point it,


00:02:57.440 --> 00:02:59.980
you can have these Cog,


00:02:59.980 --> 00:03:04.120
like these, it's like three brackets and the Cog word,


00:03:04.120 --> 00:03:05.640
and then some code.


00:03:05.640 --> 00:03:08.560
And then another magic incantation at the end,


00:03:08.560 --> 00:03:11.260
it's pretty simple, but it's hard to explain,


00:03:11.260 --> 00:03:12.440
but you have some code.


00:03:12.440 --> 00:03:14.120
And when you point Cog at it,


00:03:14.120 --> 00:03:17.100
it will run the code and then put the output of the code


00:03:17.100 --> 00:03:18.880
somewhere else where you put it to.


00:03:18.880 --> 00:03:21.320
So it seems neat, I wanted to use it,


00:03:21.320 --> 00:03:25.800
but I didn't know what a use case I would use it for.


00:03:25.800 --> 00:03:28.120
Well, Simon Willison wrote this article


00:03:28.120 --> 00:03:31.440
called "Using COG to Update Help,"


00:03:31.440 --> 00:03:33.940
the help output for a Markdown readme file,


00:03:33.940 --> 00:03:35.260
and I think this is brilliant.


00:03:35.260 --> 00:03:38.320
So this is super awesome use case.


00:03:38.320 --> 00:03:43.320
So Simon, he even has it going up on his CSVS website.


00:03:43.320 --> 00:03:47.560
VS to SQLite project.


00:03:47.560 --> 00:03:52.200
The idea is you've got at the end of the project,


00:03:52.200 --> 00:03:54.420
he actually lists on the read me,


00:03:54.420 --> 00:03:56.440
he lists the help output.


00:03:56.440 --> 00:03:59.340
Now, I actually have a project that the help output is out of


00:03:59.340 --> 00:04:01.660
date because the way I deal with it


00:04:01.660 --> 00:04:03.840
is I run the help and then copy and paste.


00:04:03.840 --> 00:04:05.640
But Simon's right,


00:04:05.640 --> 00:04:10.480
this is a great use for cog to just point cog at it.


00:04:10.480 --> 00:04:15.120
So he wrote a little snippet of code that goes in his readme.


00:04:15.120 --> 00:04:17.880
And since cog ignores comments,


00:04:17.880 --> 00:04:21.720
you can put it in an HTML comment block.


00:04:21.720 --> 00:04:25.440
And it so toggle run that file and took the output, stick it out.


00:04:25.440 --> 00:04:27.440
And then Simon didn't stop there.


00:04:27.440 --> 00:04:32.200
He said, I want to make sure that this gets run when it needs to get run.


00:04:32.200 --> 00:04:35.800
So he wrote a test in Pytest, of course,


00:04:35.800 --> 00:04:39.240
to to check to see if cog needs to be written.


00:04:39.240 --> 00:04:41.560
So this is just, this is really pretty cool.


00:04:41.560 --> 00:04:42.400
I like it.


00:04:42.400 --> 00:04:44.360
- This is the kind of thing that's so cool.


00:04:44.360 --> 00:04:45.840
Pardon me, Mike.


00:04:45.840 --> 00:04:47.480
This is the kind of thing that's so cool


00:04:47.480 --> 00:04:51.640
because anytime you can eliminate a DIY, right?


00:04:51.640 --> 00:04:54.040
Anytime you can make one thing,


00:04:54.040 --> 00:04:57.680
the one true source of whatever piece of the puzzle


00:04:57.680 --> 00:05:00.640
you're looking to build, you win.


00:05:00.640 --> 00:05:02.280
And this is a great example of that.


00:05:02.280 --> 00:05:03.120
- Yeah.


00:05:03.120 --> 00:05:05.880
- Out in the audience, a little live real-time feedback.


00:05:05.880 --> 00:05:08.520
Ned says, "I also just updated the coverage


00:05:08.520 --> 00:05:11.280
and CogDocs to do the same thing


00:05:11.280 --> 00:05:13.440
and to get help output into the docs.


00:05:13.440 --> 00:05:14.280
- Nice.


00:05:14.280 --> 00:05:15.320
- Yeah, very cool.


00:05:15.320 --> 00:05:17.480
I love the inception of it.


00:05:17.480 --> 00:05:20.280
Yeah, this is definitely a cool project.


00:05:20.280 --> 00:05:23.280
I want to take you all on a journey.


00:05:23.280 --> 00:05:27.200
Come with me into the world of Bank Python.


00:05:27.200 --> 00:05:28.040
- My drink.


00:05:28.040 --> 00:05:30.840
- This is an interesting article here.


00:05:30.840 --> 00:05:32.880
It's one of these things that says,


00:05:32.880 --> 00:05:37.080
I can't exactly tell you precisely where I worked


00:05:37.080 --> 00:05:38.160
or what we did.


00:05:38.160 --> 00:05:40.060
I have to make up names for the projects


00:05:40.060 --> 00:05:41.840
that are not the actual names.


00:05:41.840 --> 00:05:43.780
It's by Cal Patterson.


00:05:43.780 --> 00:05:46.480
And it says, "The strange world of Python


00:05:46.480 --> 00:05:48.800
"as used by big investment banks."


00:05:48.800 --> 00:05:51.960
So this is quite the read.


00:05:51.960 --> 00:05:52.800
If you go through it,


00:05:52.800 --> 00:05:54.160
if you click the little reader bit here,


00:05:54.160 --> 00:05:57.540
it says, you know, 30 minutes of reading time to read it.


00:05:57.540 --> 00:06:00.640
So it is a non-trivial bit of history.


00:06:00.640 --> 00:06:02.540
But let me see if I can give you


00:06:02.540 --> 00:06:06.040
some of the highlights that I took from this.


00:06:06.040 --> 00:06:06.880
And you can go read it


00:06:06.880 --> 00:06:08.760
if you really feel like you want to dive into it.


00:06:08.760 --> 00:06:13.200
So one of the things they talk about is the database


00:06:13.200 --> 00:06:14.760
and all these things have interesting names.


00:06:14.760 --> 00:06:17.180
I'm sure that they have actual interesting names as well


00:06:17.180 --> 00:06:18.320
that are not these names.


00:06:18.320 --> 00:06:21.100
So for example, like the database-like system


00:06:21.100 --> 00:06:22.520
is called Barbara.


00:06:22.520 --> 00:06:26.820
And I guess the place to start here with this oral history


00:06:26.820 --> 00:06:30.120
that Cal talks about is that bank Python implementations


00:06:30.120 --> 00:06:34.600
are basically forks of the entire Python ecosystem,


00:06:34.600 --> 00:06:36.240
not just a fork of CPython,


00:06:36.240 --> 00:06:39.240
but like the libraries that it uses and everything,


00:06:39.240 --> 00:06:40.320
which are used at many,


00:06:40.320 --> 00:06:42.920
but not all of the biggest investment banks.


00:06:42.920 --> 00:06:46.800
So it says, let's talk about this system called Minerva.


00:06:46.800 --> 00:06:47.840
Minerva.


00:06:47.840 --> 00:06:52.000
And it's a global database of Python objects.


00:06:52.000 --> 00:06:54.360
And Barbara is this way to talk to it.


00:06:54.360 --> 00:06:55.200
Okay.


00:06:55.200 --> 00:06:57.720
So a lot of interesting keywords to keep it hidden, right?


00:06:57.720 --> 00:06:59.680
But one of the things that's wild,


00:06:59.680 --> 00:07:01.460
this Barbara thing is,


00:07:01.460 --> 00:07:03.360
it's like a hierarchical database


00:07:03.360 --> 00:07:08.000
that stores basically zipped pickle objects.


00:07:08.000 --> 00:07:09.280
Wait, wait, what?


00:07:09.280 --> 00:07:12.480
So it's, and when I say hierarchical,


00:07:12.480 --> 00:07:14.780
I mean, it's in what they call rings.


00:07:14.780 --> 00:07:16.520
So you would talk to a database


00:07:16.520 --> 00:07:18.960
and there might be like a nearby replica


00:07:18.960 --> 00:07:22.400
that you talk to that might have a record or it might not.


00:07:22.400 --> 00:07:25.120
And so then there's like a bigger replica


00:07:25.120 --> 00:07:27.520
of sort of fallback to go look in this place.


00:07:27.520 --> 00:07:29.440
And if it's not there, go back and look at another one.


00:07:29.440 --> 00:07:31.240
They call these rings.


00:07:31.240 --> 00:07:33.880
And then you would ask for something by its key


00:07:33.880 --> 00:07:35.480
and then you get it back.


00:07:35.480 --> 00:07:37.120
So first of all, what do you guys think


00:07:37.120 --> 00:07:40.280
of just pickling all of your data objects?


00:07:40.280 --> 00:07:41.880
(laughing)


00:07:41.880 --> 00:07:44.520
- It's really, that bit made me chuckle


00:07:44.520 --> 00:07:48.040
because it is exactly the kind of like,


00:07:48.040 --> 00:07:50.720
at the time, pragmatic engineering trade-off


00:07:50.720 --> 00:07:52.640
that somebody made, right?


00:07:52.640 --> 00:07:55.160
Years ago, before we all saw pickles


00:07:55.160 --> 00:08:00.160
as the great villain of the Python ecosystem.


00:08:00.720 --> 00:08:01.960
(laughing)


00:08:01.960 --> 00:08:04.260
Before we knew that there could be downsides


00:08:04.260 --> 00:08:05.880
to pickling all the things,


00:08:05.880 --> 00:08:07.120
and they're like, well, it's perfect.


00:08:07.120 --> 00:08:07.960
It's a pickle idea.


00:08:07.960 --> 00:08:08.780
What more could you want?


00:08:08.780 --> 00:08:09.620
And now we're all just kind of looking at it.


00:08:09.620 --> 00:08:10.760
- Yeah, it's so simple.


00:08:10.760 --> 00:08:12.320
It's small, it's fast.


00:08:12.320 --> 00:08:13.440
Yeah.


00:08:13.440 --> 00:08:15.120
Yeah, how do you index something?


00:08:15.120 --> 00:08:16.520
- Actual database?


00:08:16.520 --> 00:08:17.720
Just curious.


00:08:17.720 --> 00:08:19.560
- Yeah, this is a fine question.


00:08:19.560 --> 00:08:20.720
They do, if you read it,


00:08:20.720 --> 00:08:24.280
they do also use databases sometimes.


00:08:24.280 --> 00:08:25.120
Okay.


00:08:25.120 --> 00:08:27.320
So, but the primary way seems to be this,


00:08:27.320 --> 00:08:29.080
this system called Barbara.


00:08:29.080 --> 00:08:32.540
So one of the things that comes to mind for me here is,


00:08:32.540 --> 00:08:35.420
oh my gosh, what if you upgrade something?


00:08:35.420 --> 00:08:40.420
What if you change the file, the structure in code


00:08:40.420 --> 00:08:44.680
of something that you put in the database five years ago?


00:08:44.680 --> 00:08:45.520
Whoops.


00:08:45.520 --> 00:08:49.780
Yeah, that used to be, you know,


00:08:49.780 --> 00:08:51.660
signed up for the mailing list, yes or no.


00:08:51.660 --> 00:08:53.200
And now when you change the order,


00:08:53.200 --> 00:08:56.340
that yes or no became yes or no is admin.


00:08:56.340 --> 00:08:57.500
Oh, oops.


00:08:57.500 --> 00:08:59.640
or it just doesn't match anymore and it crashes


00:08:59.640 --> 00:09:01.800
and you can't read your data 'cause it's incompatible.


00:09:01.800 --> 00:09:04.160
So this would happen with Python the runtime,


00:09:04.160 --> 00:09:06.080
but also the libraries you're using, it seems to me,


00:09:06.080 --> 00:09:09.300
and it's just incredibly unstable.


00:09:09.300 --> 00:09:10.140
So that's--


00:09:10.140 --> 00:09:11.780
- How much would it make a bet they also have like


00:09:11.780 --> 00:09:14.380
some kind of really highly evolved


00:09:14.380 --> 00:09:16.980
over many years validation system


00:09:16.980 --> 00:09:19.120
that ensures that the,


00:09:19.120 --> 00:09:21.020
that's gonna, that the pitfalls that you think


00:09:21.020 --> 00:09:23.560
are being used in the way that you think they're being used


00:09:23.560 --> 00:09:25.220
are actually still used that way.


00:09:25.220 --> 00:09:28.340
- Yeah, exactly, there's gotta be layers.


00:09:28.340 --> 00:09:31.220
Sam out in the audience livestream says,


00:09:31.220 --> 00:09:32.860
"Good luck upgrading your new Python."


00:09:32.860 --> 00:09:34.340
Yeah, exactly.


00:09:34.340 --> 00:09:35.660
Yeah, like as in never.


00:09:35.660 --> 00:09:37.120
And that's probably why part of it is like,


00:09:37.120 --> 00:09:38.980
yeah, we just forked it and froze it,


00:09:38.980 --> 00:09:40.500
because that's crazy.


00:09:40.500 --> 00:09:41.680
Let me show you something else.


00:09:41.680 --> 00:09:43.820
I will try to jump around the article


00:09:43.820 --> 00:09:45.660
via search 'cause I took notes.


00:09:45.660 --> 00:09:47.860
Applications also commonly store


00:09:47.860 --> 00:09:49.720
their internal state in Barbara,


00:09:49.720 --> 00:09:53.560
writing data classes straight into and out of Barbara,


00:09:53.560 --> 00:09:56.960
with very simple locking and transactions, if not.


00:09:56.960 --> 00:09:58.100
And one of the things they decided


00:09:58.100 --> 00:10:02.680
is there's no file system available to this platform.


00:10:02.680 --> 00:10:04.720
And the little bits of data that the script picks,


00:10:04.720 --> 00:10:06.700
gets picked up and outputs,


00:10:06.700 --> 00:10:09.720
it all just goes back into this key value store


00:10:09.720 --> 00:10:12.100
pickle database thing called Barbara.


00:10:12.100 --> 00:10:13.320
That's pretty wild, right?


00:10:13.320 --> 00:10:14.160
- Yeah.


00:10:14.160 --> 00:10:15.000
- Okay.


00:10:15.000 --> 00:10:19.360
They also talk about having these overlay features,


00:10:19.360 --> 00:10:21.720
which is pretty wild.


00:10:21.720 --> 00:10:24.800
This has to do with the different rings that I talked about.


00:10:24.800 --> 00:10:26.800
So when you connect, you can say,


00:10:26.800 --> 00:10:28.480
I wanna connect to the middle office ring


00:10:28.480 --> 00:10:31.060
and then the FICC ring and then the default ring.


00:10:31.060 --> 00:10:32.640
So then when you do a database query,


00:10:32.640 --> 00:10:35.920
which by the way, it looks like a dictionary index,


00:10:35.920 --> 00:10:38.200
just bracket key,


00:10:38.200 --> 00:10:41.520
it first is gonna look for it in the middle office database


00:10:41.520 --> 00:10:44.000
and then it's gonna look in the FICC database


00:10:44.000 --> 00:10:45.100
and then the default database.


00:10:45.100 --> 00:10:47.400
So there's like these layers of settings


00:10:47.400 --> 00:10:49.640
and these layers of specificity.


00:10:49.640 --> 00:10:52.880
And they even do things that are to some effect


00:10:52.880 --> 00:10:54.160
of like monkey patching.


00:10:54.160 --> 00:10:56.040
Like if you need to change it,


00:10:56.040 --> 00:10:58.020
you can have like your dev ring


00:10:58.020 --> 00:11:00.600
and then the middle office ring and then the outer ring


00:11:00.600 --> 00:11:02.040
and you could change the value


00:11:02.040 --> 00:11:04.380
and kind of like for mocking or something.


00:11:04.380 --> 00:11:07.160
So yeah, to your point, Brian,


00:11:07.160 --> 00:11:08.320
they say there are some good reasons,


00:11:08.320 --> 00:11:11.020
Cal says there are some good reasons not to use Barbara.


00:11:11.020 --> 00:11:15.280
If your data, let me count the ways.


00:11:15.280 --> 00:11:17.540
If your data set is large,


00:11:17.540 --> 00:11:19.320
it may be a good idea to look elsewhere.


00:11:19.320 --> 00:11:23.520
perhaps in a traditional SQL database or KDB plus,


00:11:23.520 --> 00:11:25.240
which I have no idea what that is.


00:11:25.240 --> 00:11:28.240
There's a limit on the size of Barbara objects,


00:11:28.240 --> 00:11:29.520
which is compressed at,


00:11:29.520 --> 00:11:32.540
you want it zipped 16 megs or smaller,


00:11:32.540 --> 00:11:33.660
which is pretty interesting.


00:11:33.660 --> 00:11:35.760
And then paired with this is this direct,


00:11:35.760 --> 00:11:36.700
this thing called Dagger,


00:11:36.700 --> 00:11:38.580
which is a directed acyclic graph


00:11:38.580 --> 00:11:42.440
that allows you to set up relationships between instruments.


00:11:42.440 --> 00:11:43.640
Like, okay, I've got a bond


00:11:43.640 --> 00:11:46.360
and then I've got a credit default swap on that bond.


00:11:46.360 --> 00:11:49.440
And then I've got like a fund of default swaps


00:11:49.440 --> 00:11:52.320
or you know, like it's a whole layer of stuff.


00:11:52.320 --> 00:11:55.960
And all of these things are like linked objects


00:11:55.960 --> 00:11:58.160
through these pickled things


00:11:58.160 --> 00:11:59.920
that you can ask questions about


00:11:59.920 --> 00:12:03.920
and like get sort of like graph database type things.


00:12:03.920 --> 00:12:05.360
That's pretty interesting.


00:12:05.360 --> 00:12:08.280
They talk a lot about how you model these things


00:12:08.280 --> 00:12:12.080
like instruments and swaps and stuff in Python.


00:12:12.080 --> 00:12:13.540
That's not super interesting,


00:12:13.540 --> 00:12:15.680
but I wanted to highlight this section


00:12:15.680 --> 00:12:16.520
and see what you all thought.


00:12:16.520 --> 00:12:21.200
It says, if you understand Excel,


00:12:21.200 --> 00:12:22.720
you'll be starting to recognize


00:12:22.720 --> 00:12:24.100
how a lot of this stuff here works.


00:12:24.100 --> 00:12:25.960
In Excel spreadsheets are cells


00:12:25.960 --> 00:12:27.000
and they have dependencies,


00:12:27.000 --> 00:12:28.520
which is like an acyclic graph,


00:12:28.520 --> 00:12:33.520
like this Dagger hierarchy graph database thing has.


00:12:33.520 --> 00:12:36.560
And it has a lot, so they basically modeled


00:12:36.560 --> 00:12:39.000
so much of the code around how Excel works.


00:12:39.000 --> 00:12:41.600
So you model the data first and then the behavior,


00:12:41.600 --> 00:12:43.760
rather, usually we write code


00:12:43.760 --> 00:12:46.000
and then we have data that comes out of it.


00:12:46.000 --> 00:12:48.200
So it's pretty interesting.


00:12:48.200 --> 00:12:50.440
There's also this thing called Wallpole,


00:12:50.440 --> 00:12:52.980
which is a database runner.


00:12:52.980 --> 00:12:54.720
So when you get to this section,


00:12:54.720 --> 00:12:56.840
so it's time to drop a bit of a bombshell.


00:12:56.840 --> 00:13:00.200
Let's talk about deployment, versioning, et cetera.


00:13:00.200 --> 00:13:03.760
The source code of this entire system itself,


00:13:03.760 --> 00:13:05.800
even including a Barbara, is stored in Barbara,


00:13:05.800 --> 00:13:08.760
not on disk, and it remains composed.


00:13:08.760 --> 00:13:12.400
And it's kept in a special Barbara ring called source code.


00:13:12.400 --> 00:13:15.400
(both laughing)


00:13:15.400 --> 00:13:17.200
- All right, what do you all think of that?


00:13:17.200 --> 00:13:21.040
- My hidden release engineer just left the building.


00:13:21.040 --> 00:13:22.560
(both laughing)


00:13:22.560 --> 00:13:24.040
Oh man, that's frightening.


00:13:24.040 --> 00:13:25.960
- Yeah, so not keeping the source code


00:13:25.960 --> 00:13:28.360
in the file system breaks some assumptions.


00:13:28.360 --> 00:13:30.160
Like how does the program run?


00:13:30.160 --> 00:13:32.120
So this wallpole thing runs,


00:13:32.120 --> 00:13:33.820
it's built to basically run source code


00:13:33.820 --> 00:13:35.760
that originates from a database.


00:13:35.760 --> 00:13:38.060
And it's all one huge database.


00:13:38.060 --> 00:13:41.400
So like if you think mono repo, it's like that


00:13:41.400 --> 00:13:44.640
because you import from database


00:13:44.640 --> 00:13:46.800
and it's just like whatever you need is there.


00:13:46.800 --> 00:13:51.200
So versioning, it's like the anti-microservice.


00:13:51.200 --> 00:13:55.440
Basically the entire whole thing is literally there.


00:13:55.440 --> 00:13:57.520
And then the way that you deploy it,


00:13:57.520 --> 00:13:59.660
let's see there, they talked about vouch.


00:13:59.660 --> 00:14:02.680
So the way that you deploy to it is really interesting


00:14:02.680 --> 00:14:05.640
in that it reminds me of the,


00:14:05.640 --> 00:14:08.480
it works on my machine certification program.


00:14:08.480 --> 00:14:14.720
So the way you deploy to the system is you just commit it to the database and boom, it's deployed.


00:14:14.720 --> 00:14:18.320
It's running, right? Because there's only one place the code lives. It's in the database.


00:14:18.320 --> 00:14:21.360
So once you do a commit, that's a full on deployment.


00:14:21.360 --> 00:14:26.240
Now, how does it get into there? There's a vouch system where you can get somebody


00:14:26.240 --> 00:14:30.320
who can code review what you've done and say, yeah, I vouch for this.


00:14:30.320 --> 00:14:35.520
You can commit it unless you have a high reputation for not breaking the system,


00:14:35.520 --> 00:14:38.480
in which case you can directly commit to it without question.


00:14:38.480 --> 00:14:41.760
(both laughing)


00:14:41.760 --> 00:14:43.600
- So I guess the culture of code review


00:14:43.600 --> 00:14:45.120
is not like a thing there.


00:14:45.120 --> 00:14:47.360
- I guess.


00:14:47.360 --> 00:14:49.280
(both laughing)


00:14:49.280 --> 00:14:51.840
So another interesting knock-on that comes from


00:14:51.840 --> 00:14:54.960
storing your code in a database is how do you edit it, right?


00:14:54.960 --> 00:14:56.640
Like what editor to use?


00:14:56.640 --> 00:14:59.040
VI won't work on it, PyCharm won't work on it,


00:14:59.040 --> 00:15:02.560
VS Code won't work on it because those work on files.


00:15:02.560 --> 00:15:10.080
So this Minerva system has its own IDE, because most IDEs think you have files, not databases,


00:15:10.080 --> 00:15:17.920
that contain the data. Does that make sense? It is. That makes sense. The guy, Cal says,


00:15:17.920 --> 00:15:20.480
what I can't understand is why does it contain its own web framework?


00:15:20.480 --> 00:15:28.080
Investment banks have a one-way approach to open source software. Some of it can come in,


00:15:28.080 --> 00:15:30.800
but none of it can go out.


00:15:30.800 --> 00:15:38.880
Well, I've seen projects that like people building IDEs within a company,


00:15:38.880 --> 00:15:43.440
and I always shake my head and say, "Why? This isn't your business.


00:15:43.440 --> 00:15:46.240
Why are you making an IDE within your company?"


00:15:46.240 --> 00:15:49.440
There are a couple things that strike me from this article.


00:15:49.440 --> 00:15:52.880
The first is, as I read it, because I really enjoyed it.


00:15:52.880 --> 00:15:54.000
Did you read the whole thing?


00:15:54.000 --> 00:15:56.880
I'm most of the way through.


00:15:56.880 --> 00:15:57.280
It's long, right?


00:15:57.280 --> 00:15:58.320
It's crazy, right?


00:15:58.320 --> 00:15:59.120
It really is.


00:15:59.120 --> 00:16:00.000
It really is.


00:16:00.000 --> 00:16:05.200
The thing that struck me is this is a perfect example of large organization,


00:16:05.200 --> 00:16:11.200
complex code base and engineering system and time.


00:16:11.200 --> 00:16:15.120
Because this really just smells like something that just got like built up,


00:16:15.120 --> 00:16:18.560
like, you know, the layers of rings around a tree over time.


00:16:18.560 --> 00:16:22.080
Engineer after engineer, year after year, making decisions.


00:16:22.080 --> 00:16:25.840
And I'm sure like in the modern day, everyone who walks through the door,


00:16:25.840 --> 00:16:28.700
where they probably have to plan for the period of time


00:16:28.700 --> 00:16:31.040
where the new engineer just freaks out


00:16:31.040 --> 00:16:32.520
when they tell them all this stuff


00:16:32.520 --> 00:16:34.420
as they adjust to the new reality


00:16:34.420 --> 00:16:36.280
that they're being exposed to.


00:16:36.280 --> 00:16:37.120
- Yeah.


00:16:37.120 --> 00:16:38.480
- And that in some sense,


00:16:38.480 --> 00:16:40.020
this is a particular wacky case,


00:16:40.020 --> 00:16:42.720
but it's that way in kind of every large


00:16:42.720 --> 00:16:44.680
corporate environment in a way.


00:16:44.680 --> 00:16:45.520
- That's true.


00:16:45.520 --> 00:16:46.500
Yeah, that's totally true.


00:16:46.500 --> 00:16:48.680
He actually, Cal actually discusses this a little bit here


00:16:48.680 --> 00:16:52.920
and says, this fact that you can't do very much


00:16:52.920 --> 00:16:55.380
of open source, you're stuck on some version of Python


00:16:55.380 --> 00:16:58.240
that's never gonna see, never gonna go back to sync


00:16:58.240 --> 00:17:00.360
with the real Python, 'cause how do you even do


00:17:00.360 --> 00:17:02.200
a database migration to that thing?


00:17:02.200 --> 00:17:06.400
Says it could be the biggest disadvantage


00:17:06.400 --> 00:17:07.960
for you as your profession.


00:17:07.960 --> 00:17:11.360
Every year you spend in the Minerva monoculture,


00:17:11.360 --> 00:17:13.240
the skills you need to interact


00:17:13.240 --> 00:17:15.320
with normal software atrophy.


00:17:15.320 --> 00:17:17.520
By the time I left, I had pretty much forgotten


00:17:17.520 --> 00:17:20.280
how to wrestle pip in virtual EMV into shape.


00:17:20.280 --> 00:17:22.160
Essential skills for normal Python.


00:17:22.160 --> 00:17:23.720
When everything is in the same repo


00:17:23.720 --> 00:17:25.320
and all the code is just an import away,


00:17:25.320 --> 00:17:27.800
software packaging just does not come up.


00:17:27.800 --> 00:17:29.680
So yeah, there's a lot of stuff.


00:17:29.680 --> 00:17:31.720
- That's one way to deal with retention


00:17:31.720 --> 00:17:36.000
is to have a system where people need to be skilled


00:17:36.000 --> 00:17:39.440
to use it and it removes all their other skills


00:17:39.440 --> 00:17:40.940
so they can't get another job.


00:17:40.940 --> 00:17:41.760
(laughing)


00:17:41.760 --> 00:17:43.680
- Oh, I was just about to say,


00:17:43.680 --> 00:17:46.600
this seems like a retention at-int pattern to me,


00:17:46.600 --> 00:17:49.480
but you know, goodbye let's be married.


00:17:49.480 --> 00:17:54.080
- It depends on which side of that leave-stay story


00:17:54.080 --> 00:17:56.240
you're on because if your job is like,


00:17:56.240 --> 00:17:59.600
I want job security and I don't want to have to learn new things like


00:17:59.600 --> 00:18:02.880
welcome to Minerva, whatever this is, right?


00:18:02.880 --> 00:18:05.700
You're home. You can stay here forever.


00:18:05.700 --> 00:18:07.020
It won't replace you.


00:18:07.020 --> 00:18:09.800
On the other hand, if you want to use like FastAPI,


00:18:09.800 --> 00:18:11.180
you're like, I got to get out of here.


00:18:11.180 --> 00:18:15.960
We can't be on Python 2.3 this long. I'm out.


00:18:15.960 --> 00:18:20.040
>> I did want to mention that both Minerva and


00:18:20.040 --> 00:18:22.400
Barbara are things that you can pip install,


00:18:22.400 --> 00:18:24.400
but those aren't things we're talking about.


00:18:24.400 --> 00:18:26.480
- No, these are like secret code names.


00:18:26.480 --> 00:18:28.400
I suspect the Minerva you installed


00:18:28.400 --> 00:18:29.640
doesn't have its own ID.


00:18:29.640 --> 00:18:31.360
I'm just guessing, right?


00:18:31.360 --> 00:18:32.440
- Yeah.


00:18:32.440 --> 00:18:34.740
- Though there's a lot of interesting conversation


00:18:34.740 --> 00:18:36.840
here about this.


00:18:36.840 --> 00:18:38.200
Just a quick little note.


00:18:38.200 --> 00:18:40.240
I actually ended up, I'm like, it was late last night.


00:18:40.240 --> 00:18:42.200
I'm like, I don't want to read this like 30 minute thing,


00:18:42.200 --> 00:18:44.080
but I do want to talk about it tomorrow.


00:18:44.080 --> 00:18:45.880
So I actually use this thing called natural reader.


00:18:45.880 --> 00:18:46.880
You can just throw this in here


00:18:46.880 --> 00:18:48.220
and it'll just like read it back.


00:18:48.220 --> 00:18:49.920
Super nice view. - Oh, that's so cool.


00:18:49.920 --> 00:18:54.680
So I was, it was like 1130 last night when I started on this, I'm like, Oh, I'm a little


00:18:54.680 --> 00:18:56.960
too tired to focus on this much stuff.


00:18:56.960 --> 00:18:59.220
But, yeah, it's pretty nice.


00:18:59.220 --> 00:19:02.880
You may have just made my day because I actually, you know, being part, yeah, because being


00:19:02.880 --> 00:19:07.440
partially blind, I, I, I feel like, you know how some people who have like lupus and other


00:19:07.440 --> 00:19:10.620
kind of, they talk about spoons, like they only have so much energy.


00:19:10.620 --> 00:19:13.800
My eyes only have so much like ice cream spoons.


00:19:13.800 --> 00:19:17.840
Wait, of course, of any one day that I can, I can do it.


00:19:17.840 --> 00:19:22.240
There are times when I'm like, I cannot stare at a screen for even a moment longer.


00:19:22.240 --> 00:19:26.680
And I really love things like audio books or the rare services like pocket that will


00:19:26.680 --> 00:19:28.520
actually read you articles.


00:19:28.520 --> 00:19:32.760
And so this sounds like an awesome tool for those things that don't have that feature


00:19:32.760 --> 00:19:33.760
already.


00:19:33.760 --> 00:19:34.760
It's really neat.


00:19:34.760 --> 00:19:36.960
It has different, different modes.


00:19:36.960 --> 00:19:40.320
I don't know how to make this thing come up without creating an account because I don't


00:19:40.320 --> 00:19:45.320
know my login is here, but it has like, if, if you're dyslexic, it has like a dyslexic


00:19:45.320 --> 00:19:47.760
font you can turn on and it'll highlight as you write.


00:19:47.760 --> 00:19:48.960
It's pretty neat.


00:19:48.960 --> 00:19:49.840
- That's awesome. - So yeah.


00:19:49.840 --> 00:19:52.080
- Cool. - Not directly related,


00:19:52.080 --> 00:19:54.240
but I've found it to be useful in doing this research.


00:19:54.240 --> 00:19:55.600
I was too tired.


00:19:55.600 --> 00:19:58.080
A little bit of audience interaction here.


00:19:58.080 --> 00:20:02.240
Brandon says, "Run the source code from a database."


00:20:02.240 --> 00:20:03.920
That's a one heck of an injection attack.


00:20:03.920 --> 00:20:05.280
Yeah, I mean, little Bobby Tables


00:20:05.280 --> 00:20:06.880
would be just all over this thing, right?


00:20:06.880 --> 00:20:08.160
(both laughing)


00:20:08.160 --> 00:20:10.160
- It's one big injection risk.


00:20:10.160 --> 00:20:11.760
- Although on the other hand,


00:20:11.760 --> 00:20:14.640
I feel there might be some big safety here as well,


00:20:14.640 --> 00:20:16.640
because everything is pickled.


00:20:16.640 --> 00:20:19.980
you've got to know what version of Python they forked it from


00:20:19.980 --> 00:20:23.740
and any variations they may be changed to the object model


00:20:23.740 --> 00:20:25.740
to even get it to parse it back.


00:20:25.740 --> 00:20:28.440
So it might be naturally safe as it's just like an opaque,


00:20:28.440 --> 00:20:29.840
it's almost like encryption.


00:20:29.840 --> 00:20:31.840
But it's weird.


00:20:31.840 --> 00:20:34.940
Really, really, really weak encryption.


00:20:34.940 --> 00:20:37.340
Yeah. And then let's see.


00:20:37.340 --> 00:20:42.240
Yeah, David says, absolutely everyone in the live audience has a furrowed brow right now.


00:20:42.240 --> 00:20:44.240
[laughter]


00:20:44.240 --> 00:20:47.880
Yes, David, or some like nervous laughter.


00:20:47.880 --> 00:20:50.960
There is one serious aspect to this though.


00:20:50.960 --> 00:20:55.360
We're talking about retention and the article talks about like,


00:20:55.360 --> 00:20:58.800
as he worked up in this private ecosystem,


00:20:58.800 --> 00:21:01.280
he felt his external skills atrophying.


00:21:01.280 --> 00:21:06.220
That is a common problem that I have heard so many people who work in


00:21:06.220 --> 00:21:14.220
these large pocket universes whether it's an Amazon or a Google or a Microsoft or an IBM or whatever.


00:21:14.220 --> 00:21:23.220
People can kind of feel very disconnected from where the field is currently going at the hot leading edge in the outside world.


00:21:23.220 --> 00:21:28.540
And I think it's a real issue because you can't always justify pulling in the latest greatest.


00:21:28.540 --> 00:21:35.740
Sometimes there are engineering and patients to that that would be really problematic to your businesses bottom line.


00:21:35.740 --> 00:21:41.820
And so I say, and I realize time is finite and this is hard,


00:21:41.820 --> 00:21:45.980
but this is where I say even dabbling in having side projects,


00:21:45.980 --> 00:21:49.940
even if it's just the kind of thing you do on weekend every once in a while when you have time,


00:21:49.940 --> 00:21:53.740
it's a great way to sort of like feel unconstrained


00:21:53.740 --> 00:21:59.580
by the requirements of your business and to go sort of play on your own terms.


00:21:59.580 --> 00:22:04.180
I mean, write helper scripts for yourself, even for your job in modern Python.


00:22:04.180 --> 00:22:09.220
Bingo. Yeah, absolutely. Good, good advice. Indeed. All right. Over to you, Chris.


00:22:09.220 --> 00:22:15.300
Okay, thank you. So I decided I was thinking about this and thinking about the fact that,


00:22:15.300 --> 00:22:22.020
you know, most of the people who come in and our guests here on this podcast are really sort of


00:22:22.020 --> 00:22:26.020
accomplished hardcore Python programmers, and they're familiar with the latest and greatest


00:22:26.020 --> 00:22:32.980
tools. There is no way that I'm going to scoop you all. So I decided to go a completely different


00:22:32.980 --> 00:22:38.260
direction and go in the direction. That's right, exactly, of the whimsical side of computing,


00:22:38.260 --> 00:22:44.420
because I think we all need to stay in touch with that. I know I had an issue a number of months ago


00:22:44.420 --> 00:22:49.540
before I changed jobs where I was feeling very burned out and I felt like I just I need to sort


00:22:49.540 --> 00:22:55.140
of get back in touch with like why am I passionate about computing and programming in this space.


00:22:55.140 --> 00:23:02.100
And one of the things that really was ball into my, you know, soothed by my burnt out soul was


00:23:02.100 --> 00:23:09.540
These retro consoles up. I used one called tick 80, which was not python based. It's it's lua based


00:23:09.540 --> 00:23:15.380
But the idea here is you can build like basically retro style video games


00:23:15.380 --> 00:23:21.140
Very very very easily with very few lines of code because these things


00:23:21.780 --> 00:23:26.820
They do have some constraints, but the constraints are completely artificial, right?


00:23:26.820 --> 00:23:31.160
Like in this case, this one is fix 16 color palette 256 by 256


00:23:31.160 --> 00:23:33.940
um, you know like


00:23:33.940 --> 00:23:38.120
The constraints the world that you're building in is uncomplicated


00:23:38.120 --> 00:23:45.540
And small and so as a result you can sort of like step in and wrap your head around this thing


00:23:45.940 --> 00:23:49.780
So quickly and come up to speed and suddenly you're like, you know


00:23:49.780 --> 00:23:55.620
Oh, I I need a flying saucer fly across the screen. I built a spray. Oh i'm making music


00:23:55.620 --> 00:24:00.900
I'm that's coding, you know the mean loop of my game and you can do it in a very


00:24:00.900 --> 00:24:07.380
Comparatively speaking short period of time with just a few lines of code. I'm just skipping down a little bit here


00:24:07.380 --> 00:24:15.220
Uh, like let's take an example. They have the sort of like, you know, sneak eating dots kind of game and


00:24:15.220 --> 00:24:20.740
And it's comparatively speaking, like when you compare it with like one of the modern,


00:24:20.740 --> 00:24:24.660
you know, game framework code bases.


00:24:24.660 --> 00:24:26.460
Like Unreal Engine or something.


00:24:26.460 --> 00:24:30.620
Yeah, Unreal Engine or Duty, where you're talking about like, here's my 60 pages of


00:24:30.620 --> 00:24:35.260
coordinate transforms and you just look at it, you're like, I can't, I can't even.


00:24:35.260 --> 00:24:39.180
And my 100 gigs of textures that we're going to export.


00:24:39.180 --> 00:24:40.180
Yeah.


00:24:40.180 --> 00:24:41.180
Exactly.


00:24:41.180 --> 00:24:42.180
So this project is called Pixel.


00:24:42.180 --> 00:24:44.900
I'm guessing that's how you, P-Y-X-E-L.


00:24:44.900 --> 00:24:50.700
And it allows you to create extremely simple 2D animated games in Python, right?


00:24:50.700 --> 00:24:51.700
Yes, I apologize.


00:24:51.700 --> 00:24:52.700
I shouldn't have said that.


00:24:52.700 --> 00:24:53.700
Yes, exactly.


00:24:53.700 --> 00:24:54.700
Yeah, yeah, of course.


00:24:54.700 --> 00:24:59.980
And so back when I was using the other one, I kept thinking the entire time, like, wow,


00:24:59.980 --> 00:25:02.220
you know, I'm really having fun with this.


00:25:02.220 --> 00:25:05.460
And I really, I actually really enjoyed learning Lua.


00:25:05.460 --> 00:25:06.780
And it's a really fun language.


00:25:06.780 --> 00:25:12.540
And it has a lot of, you know, characteristics that are wonderful.


00:25:12.540 --> 00:25:16.680
But I kept thinking like, wow, I kind of wish I didn't have to, you know, get my brain to


00:25:16.680 --> 00:25:19.120
switch gears, which is not very good at doing always.


00:25:19.120 --> 00:25:21.480
I wish I could be coding this in Python.


00:25:21.480 --> 00:25:26.120
And so this framework gives you the opportunity to do just that.


00:25:26.120 --> 00:25:30.720
And so you can use these, it almost feels like for those of us who are old enough to


00:25:30.720 --> 00:25:35.600
remember, it almost feels like coding in basic on the microcomputers that some of us grew


00:25:35.600 --> 00:25:37.400
up with in the 80s, right?


00:25:37.400 --> 00:25:41.200
Like it's that sort of kind of like back, back when you could type it in, you're like,


00:25:41.200 --> 00:25:43.600
I saw it printed and I typed it in and I ran it.


00:25:43.600 --> 00:25:44.940
Exactly.


00:25:44.940 --> 00:25:45.640
Exactly.


00:25:45.640 --> 00:25:46.340
Exactly.


00:25:46.340 --> 00:25:49.540
You know, it's like, yeah, it really, really is.


00:25:49.540 --> 00:25:53.400
And so I really, this one, what's, what's kind of interesting about this one is


00:25:53.400 --> 00:25:57.600
like, this is a great example, the, the sort of like sound and music section of


00:25:57.600 --> 00:26:03.940
this snake game here is, this one is actually a little bit more pythonic,


00:26:03.940 --> 00:26:07.720
which I think is actually really kind of cool for Python folks like us, because


00:26:08.020 --> 00:26:12.520
The other ones that I've seen kind of like drifted more back towards the 1980s


00:26:12.520 --> 00:26:16.660
Like, you know a little bit lower level of abstraction kind of thing


00:26:16.660 --> 00:26:22.980
Whereas this one really takes advantage of some of the beautiful data structures like stats and dictionaries and the like


00:26:22.980 --> 00:26:28.420
That python has to offer so you can use this really kind of nice expression


00:26:28.420 --> 00:26:34.980
Text to to write your games and I am just super excited. I I played with it a bit


00:26:35.060 --> 00:26:38.460
I wrote a few lines of it and I kicked the tires


00:26:38.460 --> 00:26:39.700
just to see how it worked.


00:26:39.700 --> 00:26:41.940
But I really have not had the opportunity yet


00:26:41.940 --> 00:26:46.300
to dive deep and kind of rewrite my side project in it.


00:26:46.300 --> 00:26:49.660
But I totally intend to and I'm super psyched about it.


00:26:49.660 --> 00:26:52.100
And I'm really, really glad that it exists.


00:26:52.100 --> 00:26:53.180
- Yeah, I'd love to do this.


00:26:53.180 --> 00:26:56.740
I mean, I got my start typing in games from the back,


00:26:56.740 --> 00:26:59.700
on a TRS-80 from the back of magazines


00:26:59.700 --> 00:27:01.780
and have an example.


00:27:01.780 --> 00:27:04.060
So one of the things, some engine like this,


00:27:04.060 --> 00:27:08.580
one of the things I love to do with somebody is take an existing game and say, let's


00:27:08.580 --> 00:27:13.340
look at the code and see what happens if we modify this this field. Is there any way we


00:27:13.340 --> 00:27:17.460
can get the character to run faster? Does that make it more fun to play the game or


00:27:17.460 --> 00:27:18.940
less fun? Things like that.


00:27:18.940 --> 00:27:22.700
Absolutely. And that's and that kind of thing, that kind of like, well, let's take a look


00:27:22.700 --> 00:27:27.540
at this and tweak it a little bit is so simple with this kind of thing, because it's like


00:27:27.540 --> 00:27:32.420
Everything is so like uncomplicated and straightforward.


00:27:32.420 --> 00:27:37.300
Like chances are like the, here is the number of frames that we skip as we


00:27:37.300 --> 00:27:39.700
transition or a sprite character across the screen.


00:27:39.700 --> 00:27:40.980
Oh, let's just tweak that.


00:27:40.980 --> 00:27:45.060
Now you've done your sort of like, let's make him run a little faster kind of thing.


00:27:45.060 --> 00:27:50.920
It's all so satisfyingly in a world where I don't know about you guys, but my day job,


00:27:50.920 --> 00:27:54.460
especially the old one that I did was like, you know, make a code change or make a


00:27:54.460 --> 00:27:58.400
configuration change and then wait, you know, eight hours for to deploy through


00:27:58.400 --> 00:28:02.880
the pipeline, like having something that's immediate, instant feedback like


00:28:02.880 --> 00:28:04.180
this was just a delight.


00:28:04.180 --> 00:28:05.360
Sorry.


00:28:05.360 --> 00:28:08.160
I'm just shocked at the eight hour turnaround time.


00:28:08.160 --> 00:28:09.000
I'm so sorry.


00:28:09.000 --> 00:28:09.920
That was it.


00:28:09.920 --> 00:28:10.440
That was it.


00:28:10.440 --> 00:28:11.920
That was just a really bad example.


00:28:11.920 --> 00:28:13.320
There are that, you know, a couple of cases.


00:28:13.320 --> 00:28:15.120
It's not, that's not my day to day life.


00:28:15.120 --> 00:28:16.720
I actually love my day to day life.


00:28:16.720 --> 00:28:19.040
I'm very happy, but that was just, you know what I mean?


00:28:19.040 --> 00:28:20.760
We all have these like long build times.


00:28:20.760 --> 00:28:21.000
Yep.


00:28:21.000 --> 00:28:21.720
Yep.


00:28:22.360 --> 00:28:23.800
Will McGugan, hey Will, says,


00:28:23.800 --> 00:28:28.800
"This makes me nostalgic for my ZX Spectrum in the 80s."


00:28:28.800 --> 00:28:30.120
(Will laughing)


00:28:30.120 --> 00:28:30.960
- Exactly.


00:28:30.960 --> 00:28:35.120
There's an Atari 800XL behind my head that I enjoy as well.


00:28:35.120 --> 00:28:37.400
So I feel that.


00:28:37.400 --> 00:28:39.320
- Who's not surprised that Will's been coding


00:28:39.320 --> 00:28:40.160
since the 80s?


00:28:40.160 --> 00:28:41.560
So anyway.


00:28:41.560 --> 00:28:43.720
(Will laughing)


00:28:43.720 --> 00:28:44.560
- Now, now.


00:28:44.560 --> 00:28:46.840
- And then also a few more follow-up items


00:28:46.840 --> 00:28:48.560
for your comment on side projects.


00:28:48.560 --> 00:28:49.600
Sam in the audience says,


00:28:49.600 --> 00:28:50.720
"100% agree, Chris.


00:28:50.720 --> 00:28:53.360
side projects are a great way to keep yourself sharp.


00:28:53.360 --> 00:28:56.440
And Jose says, plus one for the side projects


00:28:56.440 --> 00:28:57.860
to try out the latest indeed.


00:28:57.860 --> 00:29:00.860
So before we move on though, right,


00:29:00.860 --> 00:29:02.800
I wanna tell everyone about our sponsor.


00:29:02.800 --> 00:29:05.560
This episode is sponsored by Shortcut again.


00:29:05.560 --> 00:29:07.880
Thank you Shortcut for sponsoring


00:29:07.880 --> 00:29:09.720
and supporting Python Bytes.


00:29:09.720 --> 00:29:12.400
So there's a lot of project management tools out there,


00:29:12.400 --> 00:29:15.620
but they often suffer from either being too simple


00:29:15.620 --> 00:29:18.800
for the engineering teams or too complex.


00:29:18.800 --> 00:29:22.040
and they end up looking like Bugzilla or something insane.


00:29:22.040 --> 00:29:24.000
And you're like, I really don't want to go here.


00:29:24.000 --> 00:29:25.920
You want something nice and simple,


00:29:25.920 --> 00:29:27.200
but that actually scales with you.


00:29:27.200 --> 00:29:30.860
Something that's good both for managers and for engineers.


00:29:30.860 --> 00:29:32.680
So that's what Shortcut is.


00:29:32.680 --> 00:29:35.800
It's built to cater to both of these groups.


00:29:35.800 --> 00:29:37.200
So it's built for software teams


00:29:37.200 --> 00:29:39.720
based on making workflows easy.


00:29:39.720 --> 00:29:41.800
Big scale objectives, goals, roadmaps


00:29:41.800 --> 00:29:45.760
can be easily tied into the team or individual work sprints.


00:29:45.760 --> 00:29:47.520
Progress on those are easily flow back


00:29:47.520 --> 00:29:48.960
at higher level reports.


00:29:48.960 --> 00:29:51.440
And of course, as all things should be,


00:29:51.440 --> 00:29:52.960
it's keyboard friendly.


00:29:52.960 --> 00:29:54.900
You don't have to take your hand off


00:29:54.900 --> 00:29:56.840
and do a bunch of mousing around.


00:29:56.840 --> 00:29:58.400
You can use the UI if you like,


00:29:58.400 --> 00:29:59.720
but there's a bunch of hotkeys,


00:29:59.720 --> 00:30:01.880
which is fantastic as I think they all should be.


00:30:01.880 --> 00:30:04.160
So it makes you work faster and just keep going.


00:30:04.160 --> 00:30:06.200
Good version control integration,


00:30:06.200 --> 00:30:09.000
works with Git, GitHub, GitLab, and so on.


00:30:09.000 --> 00:30:11.000
A lot of the places that you probably already know.


00:30:11.000 --> 00:30:12.400
You can update your task project


00:30:12.400 --> 00:30:16.640
just by doing a commit or a PR, which is fantastic.


00:30:16.640 --> 00:30:19.040
The last thing you want to do is update Git and GitHub


00:30:19.040 --> 00:30:21.240
and then go update your system, right?


00:30:21.240 --> 00:30:22.820
Has iteration planning.


00:30:22.820 --> 00:30:25.400
You can see your team activity when you want to


00:30:25.400 --> 00:30:26.680
or just focus on what you're doing.


00:30:26.680 --> 00:30:29.760
And you can even let it schedule your project for you.


00:30:29.760 --> 00:30:31.720
So nice burn down charge, cycle time,


00:30:31.720 --> 00:30:32.720
all that kind of stuff.


00:30:32.720 --> 00:30:34.940
So finally, you can have a project management tool


00:30:34.940 --> 00:30:37.180
that's both for engineers and managers.


00:30:37.180 --> 00:30:40.680
Give it a try at pythonbytes.fm/shortcut.


00:30:40.680 --> 00:30:42.840
It's a cool project and it helps support the show.


00:30:42.840 --> 00:30:44.640
So thank you for supporting us.


00:30:44.640 --> 00:30:46.360
Brian, what do you got next?


00:30:46.360 --> 00:30:47.360
What are we ditching now?


00:30:47.360 --> 00:30:50.360
We're ditching CodeCov.


00:30:50.360 --> 00:30:52.360
Harsh crowd.


00:30:52.360 --> 00:30:58.360
So, okay. So, CodeCov has been great for a lot of people who have used it.


00:30:58.360 --> 00:31:05.360
It's a third-party service that you can attach to your repo or something.


00:31:05.360 --> 00:31:10.360
And it makes sure that you, and this has been helpful for merge requests and stuff.


00:31:10.360 --> 00:31:15.360
So, if somebody does a PR, it makes sure that the coverage is 100.


00:31:15.360 --> 00:31:16.760
if you've had 100% coverage


00:31:16.760 --> 00:31:18.080
and make sure that they don't degrade it.


00:31:18.080 --> 00:31:21.560
The code they add makes the coverage stay at a high level.


00:31:21.560 --> 00:31:27.760
But so it's not without problems, however.


00:31:27.760 --> 00:31:31.920
And Hinnick mentions that on some of his projects,


00:31:31.920 --> 00:31:35.960
it's been sometimes a CI pipeline is blocked


00:31:35.960 --> 00:31:39.100
just because it timed out with CodeCov.


00:31:39.100 --> 00:31:43.720
And that's not a good reason to fail a build.


00:31:43.720 --> 00:31:48.720
So, so anyway, he, so Henek has this, this project


00:31:48.720 --> 00:31:51.000
where he said, wait a second,


00:31:51.000 --> 00:31:54.040
I'm just trying to make sure everything goes to 100%.


00:31:54.040 --> 00:31:58.600
Coverage.py, hey Ned, second, second thing here for you.


00:31:58.600 --> 00:32:02.200
But Coverage.py from Ned Batchelder,


00:32:02.200 --> 00:32:04.100
maintaining it of course,


00:32:04.100 --> 00:32:07.660
has a thing that it says fail if under 100, under a percent.


00:32:07.660 --> 00:32:09.680
So you can do 100%, but you can do 80


00:32:09.680 --> 00:32:12.040
or whatever your current percentage is.


00:32:12.040 --> 00:32:15.120
But anyway, if you want that, something like CodeCov,


00:32:15.120 --> 00:32:18.160
you can get that with coverage.py,


00:32:18.160 --> 00:32:19.640
but there's some tricks around it.


00:32:19.640 --> 00:32:22.480
So if you've got, one of the things coverage does


00:32:22.480 --> 00:32:26.960
is let's say you've got a project that has some code


00:32:26.960 --> 00:32:30.040
that is run, like you're trying to take advantage


00:32:30.040 --> 00:32:31.800
of some of the newer things, but you also,


00:32:31.800 --> 00:32:34.360
newer Python things, but you want to run on older Python too


00:32:34.360 --> 00:32:36.560
so there's some if statements for Python version,


00:32:36.560 --> 00:32:40.360
for example, but it might be a different hardware as well,


00:32:40.360 --> 00:32:41.840
like Windows versus Mac.


00:32:41.840 --> 00:32:44.560
but there might be code that's run in one test suite


00:32:44.560 --> 00:32:45.840
and not on the other.


00:32:45.840 --> 00:32:47.320
So in order to do that,


00:32:47.320 --> 00:32:49.760
you kind of have to run in parallel mode


00:32:49.760 --> 00:32:53.000
and then combine the coverage reports at the end.


00:32:53.000 --> 00:32:54.840
And it sounds complicated,


00:32:54.840 --> 00:32:58.080
but mostly we just copy somebody else's work.


00:32:58.080 --> 00:33:01.060
So, and Hinnick has the examples here.


00:33:01.060 --> 00:33:05.800
So Hinnick goes through using GitHub and coverage


00:33:05.800 --> 00:33:07.960
to do everything that you used to be able,


00:33:07.960 --> 00:33:10.720
you were doing with CodeGov.


00:33:10.720 --> 00:33:14.040
So this is a nice article with examples.


00:33:14.040 --> 00:33:16.960
So we've got, for each project,


00:33:16.960 --> 00:33:20.320
we're downloading the coverage report


00:33:20.320 --> 00:33:22.000
and then combining it at the end


00:33:22.000 --> 00:33:24.440
with a report with a fail under 100.


00:33:24.440 --> 00:33:25.960
Really cool.


00:33:25.960 --> 00:33:27.280
If this is something you want to do,


00:33:27.280 --> 00:33:29.920
it's basically, it's a short article with examples.


00:33:29.920 --> 00:33:32.720
Even shows, he's got in his struct log,


00:33:32.720 --> 00:33:36.840
he shows his main workflow for GitHub pipelines


00:33:36.840 --> 00:33:38.360
that does all of this.


00:33:38.360 --> 00:33:41.600
So just kind of read his code and make it work.


00:33:41.600 --> 00:33:44.520
And I was actually thinking of doing this


00:33:44.520 --> 00:33:46.560
on a couple of projects I've got.


00:33:46.560 --> 00:33:49.160
I wanted to make sure that they were up at 100%


00:33:49.160 --> 00:33:50.280
and do something like this.


00:33:50.280 --> 00:33:53.880
But I actually, for some reason, I was dragging my feet


00:33:53.880 --> 00:33:55.840
and I didn't know why, but now I don't need to.


00:33:55.840 --> 00:33:58.560
I'll go ahead and use Hennig's suggestion.


00:33:58.560 --> 00:33:59.520
- No, you don't have to invent it.


00:33:59.520 --> 00:34:02.960
Just set up that job on GitHub.


00:34:02.960 --> 00:34:05.760
- This is actually something I've been kind of struggling


00:34:05.760 --> 00:34:07.360
with, I shouldn't say struggling with.


00:34:07.360 --> 00:34:13.480
I should say this is a journey that I have been on in that testing and code coverage


00:34:13.480 --> 00:34:18.840
and that whole class of proof of correctness is my weakest suit.


00:34:18.840 --> 00:34:24.480
And one of the things that I've really been sort of trying to wrap my head around is I


00:34:24.480 --> 00:34:32.440
see a lot of like unit test code that seems like it's just there to keep the coverage


00:34:32.440 --> 00:34:33.440
percentage up.


00:34:33.440 --> 00:34:36.800
And as far as I can tell, it doesn't actually test anything.


00:34:36.800 --> 00:34:40.720
Like we're, you know, creating these mocks and like in everything and,


00:34:40.720 --> 00:34:47.920
but they don't actually like enforce any contracts or prove anything out.


00:34:47.920 --> 00:34:54.720
And I, I, I've trying to figure out how we can use these tools in ways that actually sort of


00:34:54.720 --> 00:34:59.120
raise the bar on code quality without encouraging this kind of like,


00:34:59.120 --> 00:35:02.000
I don't know, T-crossing and I-dotting behavior.


00:35:02.000 --> 00:35:03.560
>> Well, we're getting on a tangent,


00:35:03.560 --> 00:35:07.240
but I would say that code reviews on tests are important.


00:35:07.240 --> 00:35:07.840
>> Yeah.


00:35:07.840 --> 00:35:09.880
>> Because that's just,


00:35:09.880 --> 00:35:12.360
I mean, one of the easiest ways to get 100 percent coverage


00:35:12.360 --> 00:35:16.800
with no tip failing test is don't put any asserts in your tests.


00:35:16.800 --> 00:35:20.640
Just saying.


00:35:20.640 --> 00:35:24.080
>> Good. That makes an excellent point unto itself.


00:35:24.080 --> 00:35:24.720
Yes, thank you.


00:35:24.720 --> 00:35:25.160
>> Yes.


00:35:25.160 --> 00:35:26.480
>> Nice. All right.


00:35:26.480 --> 00:35:30.360
Well, let's talk about the tippy top, the tip top.


00:35:30.360 --> 00:35:32.800
So I'm sure you all are familiar with top.


00:35:32.800 --> 00:35:35.460
It's like this somewhat dreadful way to tell


00:35:35.460 --> 00:35:37.440
what's happening on a Unix system.


00:35:37.440 --> 00:35:39.480
On Linux to see like what's happening,


00:35:39.480 --> 00:35:41.580
is it busy, is it not busy?


00:35:41.580 --> 00:35:42.840
I say dreadful 'cause it's so simple


00:35:42.840 --> 00:35:44.320
and there's better tools.


00:35:44.320 --> 00:35:46.840
One of them being this tip top thing.


00:35:46.840 --> 00:35:49.280
So for a long time I used glances.


00:35:49.280 --> 00:35:50.680
I didn't know, I still do use glances.


00:35:50.680 --> 00:35:53.220
I'm not sure if you all are familiar with glances,


00:35:53.220 --> 00:35:56.640
but the UI that it creates is fantastic.


00:35:56.640 --> 00:35:58.960
So you just type glances and you get this


00:35:58.960 --> 00:36:01.480
sort of progress bars that show you the CPU,


00:36:01.480 --> 00:36:03.320
the memory, all the processes.


00:36:03.320 --> 00:36:06.560
It has like hotkeys you can sort by CPU or memory,


00:36:06.560 --> 00:36:08.480
filter by process name or ID,


00:36:08.480 --> 00:36:10.540
all kinds of stuff going on here.


00:36:10.540 --> 00:36:12.640
And this is what I use now,


00:36:12.640 --> 00:36:16.800
but Zack Viller sent in TipTop as a competing thing.


00:36:16.800 --> 00:36:19.600
And by the way, Glances is Python and TipTop is Python.


00:36:19.600 --> 00:36:22.080
So very good candidates for pipx


00:36:22.080 --> 00:36:23.480
because no project needs them.


00:36:23.480 --> 00:36:24.880
You just want to run them as commands,


00:36:24.880 --> 00:36:26.000
but they're Python, right?


00:36:26.000 --> 00:36:27.640
So if you look at the same picture


00:36:27.640 --> 00:36:29.560
over on the tip top page,


00:36:29.560 --> 00:36:32.100
you can see that you get similar information,


00:36:32.100 --> 00:36:35.840
but you get a little bit better historical understanding


00:36:35.840 --> 00:36:40.760
of how your CPU is doing, how your memory is doing.


00:36:40.760 --> 00:36:44.300
It even breaks it down per thread or per core.


00:36:44.300 --> 00:36:47.780
It shows you your memory broken down by what's being used,


00:36:47.780 --> 00:36:49.320
what's being cached, what's free.


00:36:49.320 --> 00:36:51.140
There's a graph of that over time.


00:36:51.140 --> 00:36:53.620
Something that made me sad is it shows the network


00:36:53.620 --> 00:36:56.480
over time as well, the in and out flow,


00:36:56.480 --> 00:36:59.120
But what happened to me is one of my servers,


00:36:59.120 --> 00:37:02.160
I ran this and it only would show the output


00:37:02.160 --> 00:37:04.160
from like some kind of,


00:37:04.160 --> 00:37:06.200
there were multiple network adapters


00:37:06.200 --> 00:37:07.900
and would only show the one that's not being used,


00:37:07.900 --> 00:37:08.920
not the one that's being used.


00:37:08.920 --> 00:37:11.920
So I'm like, well, that part is useless, unfortunately here.


00:37:11.920 --> 00:37:14.000
And then it shows all the programs,


00:37:14.000 --> 00:37:17.080
like the CPU usage, the user it's running as,


00:37:17.080 --> 00:37:18.380
the arguments that were passed to it,


00:37:18.380 --> 00:37:20.280
how much memory it has and stuff.


00:37:20.280 --> 00:37:23.280
So I don't think I'm gonna give up using Glances


00:37:23.280 --> 00:37:24.180
'cause I really love that.


00:37:24.180 --> 00:37:28.460
But this feels like another tool to get a view of that sort into it.


00:37:28.460 --> 00:37:29.000
What do you all think?


00:37:29.000 --> 00:37:31.620
I like the visual design on the face of it.


00:37:31.620 --> 00:37:36.100
It, it like, especially comparing it to Lance's screenshot that you showed,


00:37:36.100 --> 00:37:41.140
it feels like it's a little prettier and it may, to me, at least it looks a little


00:37:41.140 --> 00:37:45.420
bit less like dense and maybe a little bit easier to sort of like, maybe it's


00:37:45.420 --> 00:37:48.900
just the bounding boxes, but I also feel like it's the way the screen is laid out.


00:37:48.900 --> 00:37:54.020
A way to visually, an easier way to visually parse the information


00:37:54.020 --> 00:37:57.100
it's presenting, that's always something I look for a new tool.


00:37:57.100 --> 00:37:59.900
- Absolutely. Brian?


00:37:59.900 --> 00:38:03.460
- Why do you need to, I don't use anything like this.


00:38:03.460 --> 00:38:11.460
- All right. So for example, if you log in to, let's say you logged into a web server


00:38:11.460 --> 00:38:16.220
that was running a search job and it said, you're running a little bit low on memory


00:38:16.220 --> 00:38:20.700
as a, over the last few minutes, and you've got five different web apps set up running


00:38:20.700 --> 00:38:24.860
there web processes with like a bunch of their sub processes running and you wanted to answer


00:38:24.860 --> 00:38:30.220
the question. Okay, which one is it? Which one do I have to restart? Okay, things like that.


00:38:30.220 --> 00:38:35.900
- It's easy to see where you might not encounter this or have a need for this when you're working


00:38:35.900 --> 00:38:42.860
in the world of things, right? Like the world of not servers, but embedded devices that might


00:38:42.860 --> 00:38:47.900
run Python or C or whatever. And you know, this is like managing infrastructure.


00:38:47.900 --> 00:38:49.820
- So you don't use this on your desktop?


00:38:49.820 --> 00:38:51.480
- No, I don't use this on my Mac,


00:38:51.480 --> 00:38:54.160
but I use this on all of my, not necessarily tip top,


00:38:54.160 --> 00:38:56.740
but glances on all of my Linux servers,


00:38:56.740 --> 00:38:58.120
including the Python bytes one.


00:38:58.120 --> 00:39:00.520
So it's nice to go in there and see what's going on


00:39:00.520 --> 00:39:02.800
in the servers with all I have is SSH.


00:39:02.800 --> 00:39:04.040
- I'm more of a high level person.


00:39:04.040 --> 00:39:06.000
I'd rather pay somebody else to do this for me.


00:39:06.000 --> 00:39:08.780
(laughing)


00:39:08.780 --> 00:39:10.800
- Well, let's like--


00:39:10.800 --> 00:39:12.160
- But it looks pretty.


00:39:12.160 --> 00:39:16.000
- Let's see if I can pull up a picture of top.


00:39:16.000 --> 00:39:18.260
- On behalf of my employer, Brian, thank you.


00:39:18.260 --> 00:39:21.260
Thank you. Yes, we're happy to take me to do that for you. No problem.


00:39:21.260 --> 00:39:27.260
Like this, this is the thing it's replacing by the way, is it's just a list of processes.


00:39:27.260 --> 00:39:32.260
And it moves around all the time and the stuff shoots off the screen. It's like, why is it doing this?


00:39:32.260 --> 00:39:39.260
You know, it's I mean, so here was also written probably in like 1968 or something. Yeah, yeah, absolutely. Yeah.


00:39:39.260 --> 00:39:45.260
I'm not knocking on it. I'm just saying I would rather use, you know, something like this.


00:39:45.260 --> 00:39:49.220
that gives me way more real time, like graphs,


00:39:49.220 --> 00:39:52.580
not just snapshot, now it is, now it is, now it is,


00:39:52.580 --> 00:39:54.900
but like here's what's happening


00:39:54.900 --> 00:39:57.140
as the things are running and doing their work, right?


00:39:57.140 --> 00:39:59.780
So that's super helpful to me to see.


00:39:59.780 --> 00:40:02.060
- To be fair, I also just installed TipTop


00:40:02.060 --> 00:40:03.540
just for the heck of it on my Mac,


00:40:03.540 --> 00:40:06.980
and a really quick install, and it does look pretty.


00:40:06.980 --> 00:40:08.460
I just don't know what to do with it, but.


00:40:08.460 --> 00:40:09.720
- Yeah, and by the way,


00:40:09.720 --> 00:40:11.480
let's just tie it back to the audience again.


00:40:11.480 --> 00:40:14.620
So TipTop uses textual for layout,


00:40:14.620 --> 00:40:17.900
which is based on, which is Will McGugan's thing,


00:40:17.900 --> 00:40:18.980
also based on Rich.


00:40:18.980 --> 00:40:20.740
So it's quite modern.


00:40:20.740 --> 00:40:23.820
- I think if we had Ned and Will in the audience,


00:40:23.820 --> 00:40:26.420
we would always touch on something they were doing.


00:40:26.420 --> 00:40:27.700
(laughing)


00:40:27.700 --> 00:40:28.540
- I'll set you up, Brian.


00:40:28.540 --> 00:40:29.860
Here's a way you could use this totally


00:40:29.860 --> 00:40:30.960
in your day-to-day life.


00:40:30.960 --> 00:40:33.340
Your Mac is running slow, right?


00:40:33.340 --> 00:40:35.940
And you say, why is my Mac running slow?


00:40:35.940 --> 00:40:38.500
You could totally use this and at a glance say,


00:40:38.500 --> 00:40:40.340
what's hoovering on my RAM?


00:40:40.340 --> 00:40:42.140
What is throttling my disk?


00:40:42.140 --> 00:40:45.740
what is using up all my CP, et cetera, et cetera.


00:40:45.740 --> 00:40:46.580
- Okay.


00:40:46.580 --> 00:40:49.700
- Yeah, like for example, you can run activity monitor,


00:40:49.700 --> 00:40:52.060
which will show you the process thing.


00:40:52.060 --> 00:40:52.980
And you go to the memory thing,


00:40:52.980 --> 00:40:54.560
which will show you just a single graph.


00:40:54.560 --> 00:40:56.000
But like, why is it using all that memory?


00:40:56.000 --> 00:40:58.220
Is that actually being used or is that cache?


00:40:58.220 --> 00:40:59.560
Because you loaded a bunch of files


00:40:59.560 --> 00:41:01.780
and now it's kind of could be free, but it's not.


00:41:01.780 --> 00:41:02.900
What's happening on the network,


00:41:02.900 --> 00:41:05.140
you can't see very well on macOS.


00:41:05.140 --> 00:41:07.940
I don't know why activity monitors are adverse


00:41:07.940 --> 00:41:09.540
to showing you network traffic.


00:41:09.540 --> 00:41:11.780
but you could see like, am I downloading something


00:41:11.780 --> 00:41:12.740
or not right now?


00:41:12.740 --> 00:41:14.220
- I can be taught new things.


00:41:14.220 --> 00:41:15.620
Okay, thanks.


00:41:15.620 --> 00:41:17.020
- Yeah, yeah, yeah.


00:41:17.020 --> 00:41:19.260
Anyway, I'm not excited for that use case.


00:41:19.260 --> 00:41:20.740
I'm excited for using it on the servers


00:41:20.740 --> 00:41:21.860
to understand them better.


00:41:21.860 --> 00:41:22.700
- Yeah.


00:41:22.700 --> 00:41:23.720
- Yeah, all right.


00:41:23.720 --> 00:41:27.280
Let's bring it home with some more retro, Chris.


00:41:27.280 --> 00:41:30.020
- Back in the world of Wibzy,


00:41:30.020 --> 00:41:34.860
I've always been into, well, you know,


00:41:34.860 --> 00:41:36.980
always ever since they weren't retro


00:41:36.980 --> 00:41:39.220
and they were just 8-bit machines,


00:41:39.220 --> 00:41:42.400
I have, I grew up, started with, with eight bit computing.


00:41:42.400 --> 00:41:48.740
I was an Atari kid, never owned a C64, but someone has actually written a


00:41:48.740 --> 00:41:53.500
Commodore 64 emulator called Pis C64 in pure Python.


00:41:53.500 --> 00:41:58.340
And the reason that I picked this, it really is, isn't it?


00:41:58.340 --> 00:42:04.680
I think it is so cool because not only do you get this Commodore 64 emulator,


00:42:04.920 --> 00:42:06.800
It's not 100% coverage.


00:42:06.800 --> 00:42:11.460
Like, he has openly emulated the display to the point where


00:42:11.460 --> 00:42:14.840
you can, display pets characters.


00:42:14.840 --> 00:42:18.720
But the bottom line is, is other than that, a largely full machine


00:42:18.720 --> 00:42:24.200
emulator runs on the high 65 library, which is a six five Oh two.


00:42:24.200 --> 00:42:28.080
A CPU chip emulator also written in pure Python.


00:42:28.080 --> 00:42:30.520
It really is.


00:42:30.520 --> 00:42:31.800
And, and it's so neat.


00:42:31.800 --> 00:42:34.000
I was able to pull this thing down and run it.


00:42:34.320 --> 00:42:39.060
And I was actually writing like Commodore 64 basic that votes bits.


00:42:39.060 --> 00:42:42.600
It's a screen memory and, you know, drew pictures off the screen.


00:42:42.600 --> 00:42:48.480
And, and one of the really cool things is this thing even concludes, you can sort


00:42:48.480 --> 00:42:54.420
of like pop out of your emulated Commodore 64 with the go by command to get a Python


00:42:54.420 --> 00:42:56.960
rapport is actually doing that.


00:42:56.960 --> 00:43:03.220
Like modifying the emulated Commodore 64 is memory by tweaking the Python data


00:43:03.220 --> 00:43:05.460
infrastructures inside the REPL.


00:43:05.460 --> 00:43:07.100
It is just, it is.


00:43:07.100 --> 00:43:08.500
That's pretty deep.


00:43:08.500 --> 00:43:09.140
Thank you.


00:43:09.140 --> 00:43:10.460
It is, it is really cool.


00:43:10.460 --> 00:43:15.460
And, and it is also from my perspective, one of the reasons I picked it, it's a


00:43:15.460 --> 00:43:20.020
testament to this programming language that we all use and love for our work.


00:43:20.020 --> 00:43:23.820
And, you know, whether it's webby stuff or testing devices or in my case,


00:43:23.820 --> 00:43:27.740
automating network infrastructure, it can do so much.


00:43:27.740 --> 00:43:32.100
You can reach out into all of these other really kind of, you know, full


00:43:32.100 --> 00:43:39.540
niche areas, whatever you're interested in, and do neat things with Python on your computer.


00:43:39.540 --> 00:43:41.980
So I just thought this was incredibly cool.


00:43:41.980 --> 00:43:46.900
I had enjoyed playing with it and I definitely intend to enjoy playing with it some more.


00:43:46.900 --> 00:43:51.180
It might be some interesting ways to go back and study operating systems back when they


00:43:51.180 --> 00:43:54.380
were simple if you were like a computer science student as well.


00:43:54.380 --> 00:43:55.380
Yeah, for sure.


00:43:55.380 --> 00:43:57.980
I think there's a lot to learn there.


00:43:57.980 --> 00:44:03.660
You know, even if you're not necessarily someone who is keenly interested in writing your own


00:44:03.660 --> 00:44:08.940
operating system, I think there's a lot to learn just in terms of the programming paradigm,


00:44:08.940 --> 00:44:09.940
right?


00:44:09.940 --> 00:44:14.780
Like when you wanted to solve a problem and you wanted to display something on the screen


00:44:14.780 --> 00:44:21.900
and a perfectly reasonable answer was, "I'm going to poke the right bits into screen memory


00:44:21.900 --> 00:44:27.020
because that's a more efficient way to display this thing as opposed to using whatever my


00:44:27.020 --> 00:44:31.860
my high level language provides it is, it's such a different way of thinking


00:44:31.860 --> 00:44:34.540
the reality that most of us have it day to day.


00:44:34.540 --> 00:44:37.660
It's just a fun, refresh, refreshing place to visit.


00:44:37.660 --> 00:44:38.860
At least from my perspective.


00:44:38.860 --> 00:44:39.500
Yeah.


00:44:39.500 --> 00:44:40.060
Very cool.


00:44:40.060 --> 00:44:40.620
It's a good one.


00:44:40.620 --> 00:44:41.440
Thank you.


00:44:41.440 --> 00:44:41.780
Brian.


00:44:41.780 --> 00:44:43.980
It's time for extra, extra, extra here all about it.


00:44:43.980 --> 00:44:45.300
How many extras do you have?


00:44:45.300 --> 00:44:47.700
I have zero today.


00:44:47.700 --> 00:44:49.300
You have no extras.


00:44:49.300 --> 00:44:50.780
You're not adding to the number of extras.


00:44:50.780 --> 00:44:53.420
Chris, anything else you want to throw out there that people know about?


00:44:53.420 --> 00:44:54.140
Sure.


00:44:54.140 --> 00:44:54.940
Absolutely.


00:44:54.940 --> 00:44:57.660
My team at Amazon is hiring.


00:44:57.660 --> 00:44:59.540
Hopefully we can put a link in the show notes.


00:44:59.540 --> 00:45:01.820
I work for OpsTech IT.


00:45:01.820 --> 00:45:04.060
We work with the fulfillment centers.


00:45:04.060 --> 00:45:08.060
And I cannot say enough how much I love


00:45:08.060 --> 00:45:09.060
working with this team.


00:45:09.060 --> 00:45:10.520
People are incredible.


00:45:10.520 --> 00:45:12.060
And they're sort of like,


00:45:12.060 --> 00:45:14.760
at least the folks I'm working directly with


00:45:14.760 --> 00:45:18.100
are people who started out in the fulfillment centers


00:45:18.100 --> 00:45:20.700
and were interested in technology,


00:45:20.700 --> 00:45:23.140
were bright, and they were able to prove


00:45:23.140 --> 00:45:25.340
that they could actually walk the walk


00:45:25.340 --> 00:45:27.040
and now they're being promoted


00:45:27.040 --> 00:45:28.900
into full-on engineering positions.


00:45:28.900 --> 00:45:32.300
And I just find that so incredibly refreshing because--


00:45:32.300 --> 00:45:33.460
- Yeah, that's fantastic.


00:45:33.460 --> 00:45:36.300
- Yeah, these people just have a very different perspective.


00:45:36.300 --> 00:45:37.380
You know, they're not the jaded,


00:45:37.380 --> 00:45:39.420
like I've been in the tech industry for 20 years,


00:45:39.420 --> 00:45:40.260
types like me.


00:45:40.260 --> 00:45:43.140
It's really inspiring to work with them.


00:45:43.140 --> 00:45:44.940
- Yeah, not too many debates of like,


00:45:44.940 --> 00:45:46.600
why don't we just switch to a functional language?


00:45:46.600 --> 00:45:47.440
Come on.


00:45:47.440 --> 00:45:49.220
(both laughing)


00:45:49.220 --> 00:45:50.060
- Exactly. - More practical


00:45:50.060 --> 00:45:51.220
and we'll just get stuff done.


00:45:51.220 --> 00:45:52.060
I love it.


00:45:52.060 --> 00:45:52.900
- Exactly.


00:45:52.900 --> 00:45:54.140
Before we move, yeah.


00:45:54.140 --> 00:45:55.420
Yeah, so we'll put that link in the show notes.


00:45:55.420 --> 00:45:58.660
Before we move on to my extras, which are not many,


00:45:58.660 --> 00:46:00.620
Sam says, "It's so helpful to understand


00:46:00.620 --> 00:46:02.080
"how a computer works when you're writing code.


00:46:02.080 --> 00:46:04.940
"These kinds of things are a good way to learn that."


00:46:04.940 --> 00:46:07.220
Talking about the Commvaar64 emulator.


00:46:07.220 --> 00:46:08.080
Awesome, all right.


00:46:08.080 --> 00:46:10.700
So I just have one, and that's,


00:46:10.700 --> 00:46:15.320
I'm going to be speaking at FlaskCon 2021.


00:46:15.320 --> 00:46:18.340
And so FlaskCon is the first week of December,


00:46:18.340 --> 00:46:20.260
which has remote attendance.


00:46:20.260 --> 00:46:23.500
I'm gonna be talking about HTMX and Flask once again,


00:46:23.500 --> 00:46:25.300
because I'm super psyched about all that stuff.


00:46:25.300 --> 00:46:28.960
And so if you wanna see some really cool apps get built


00:46:28.960 --> 00:46:31.200
using HTMX and Flask, drop in over there.


00:46:31.200 --> 00:46:33.380
There's a whole bunch of other talks going on as well.


00:46:33.380 --> 00:46:35.840
So I'll put the link to that in the show notes.


00:46:35.840 --> 00:46:38.720
All right, shall we finish it off with a joke?


00:46:38.720 --> 00:46:39.560
- Yeah.


00:46:39.560 --> 00:46:41.800
- Levity is the soul of wit, absolutely.


00:46:41.800 --> 00:46:43.160
- It is.


00:46:43.160 --> 00:46:46.260
So we just recently went through


00:46:46.260 --> 00:46:48.540
the whole daylight savings unraveling


00:46:48.540 --> 00:46:50.280
and went back to normal time.


00:46:50.280 --> 00:46:53.120
And I don't know what it's like for you all,


00:46:53.120 --> 00:46:56.900
but when I look at the weather and stuff here,


00:46:56.900 --> 00:46:59.380
I suspect Chris, it's similar in Boston.


00:46:59.380 --> 00:47:01.460
I mean, I know it's similar for you, Brian.


00:47:01.460 --> 00:47:02.300
- Yes.


00:47:02.300 --> 00:47:04.700
- It's like sunset is at 4.38 PM


00:47:04.700 --> 00:47:06.460
and we're headed towards the winter solstice.


00:47:06.460 --> 00:47:08.460
So it's only getting earlier in the day.


00:47:08.460 --> 00:47:11.180
And it's like, ah, that doesn't make me,


00:47:11.180 --> 00:47:13.660
it doesn't spark joy in my heart


00:47:13.660 --> 00:47:15.620
that it's already dark at 4.30.


00:47:15.620 --> 00:47:16.580
- I like it.


00:47:16.580 --> 00:47:17.420
- Yeah.


00:47:17.420 --> 00:47:20.420
I don't mind that it gets dark.


00:47:20.420 --> 00:47:21.420
I just wish it wouldn't.


00:47:21.420 --> 00:47:22.740
I wish we could just move it.


00:47:22.740 --> 00:47:25.060
So there's a little time the end of the day where there's still sun.


00:47:25.060 --> 00:47:26.060
I remember.


00:47:26.060 --> 00:47:27.060
I'm with you, Michael.


00:47:27.060 --> 00:47:28.060
I'm so low powered.


00:47:28.060 --> 00:47:31.420
So I enjoy the sunlight and I don't like it getting darker earlier either.


00:47:31.420 --> 00:47:33.020
Yeah, absolutely.


00:47:33.020 --> 00:47:34.220
I don't hate the winter.


00:47:34.220 --> 00:47:36.700
I just don't wish it shifted around a little bit.


00:47:36.700 --> 00:47:39.780
So this is a technical take on that.


00:47:39.780 --> 00:47:41.700
Our joke is this comes from the New Yorker.


00:47:41.700 --> 00:47:43.060
I mean, we're pretty highfalutin, right?


00:47:43.060 --> 00:47:47.060
We're not doing like dev jokes dot IO or whatever it was anymore.


00:47:47.060 --> 00:47:48.420
(laughing)


00:47:48.420 --> 00:47:49.980
- So this is by Matt Reuter,


00:47:49.980 --> 00:47:53.340
and it's a little cartoon of two people,


00:47:53.340 --> 00:47:55.540
clearly in kind of a darker space.


00:47:55.540 --> 00:47:57.840
A woman sitting in her chair with a laptop,


00:47:57.840 --> 00:47:58.680
and you could just,


00:47:58.680 --> 00:48:01.020
like the beaming laptop screen is like lighting her up,


00:48:01.020 --> 00:48:01.860
right?


00:48:01.860 --> 00:48:03.740
And the guy here on his tablet,


00:48:03.740 --> 00:48:05.460
same thing, glowing on his face.


00:48:05.460 --> 00:48:06.660
And underneath it, it says,


00:48:06.660 --> 00:48:09.060
"I hate how the screens get bright so early


00:48:09.060 --> 00:48:10.100
this time of year."


00:48:10.100 --> 00:48:11.660
(laughing)


00:48:11.660 --> 00:48:12.500
- Nice.


00:48:12.500 --> 00:48:14.580
- This is so much about our modern world.


00:48:14.580 --> 00:48:17.140
It's both hilarious and kind of sad.


00:48:17.140 --> 00:48:18.460
It's all it would go.


00:48:18.460 --> 00:48:19.660
(laughing)


00:48:19.660 --> 00:48:20.500
- Absolutely.


00:48:20.500 --> 00:48:23.900
Yeah, so welcome to Daylight Savings


00:48:23.900 --> 00:48:27.400
or Standard Time, I guess, everyone.


00:48:27.400 --> 00:48:30.300
The screens do get bright this time of year.


00:48:30.300 --> 00:48:31.140
- That's funny.


00:48:31.140 --> 00:48:31.960
- Nice.


00:48:31.960 --> 00:48:34.420
- And Chris, thanks for being on the show.


00:48:34.420 --> 00:48:35.540
Brian, thanks as always.


00:48:35.540 --> 00:48:36.580
- Yeah, thanks a lot.


00:48:36.580 --> 00:48:37.420
- Thank you so much.


00:48:37.420 --> 00:48:38.940
You know, I really appreciate everything


00:48:38.940 --> 00:48:40.740
you guys do for the community.


00:48:40.740 --> 00:48:43.180
It's really, you guys are great examples


00:48:43.180 --> 00:48:46.380
of why Python is such an amazing place to live.


00:48:46.380 --> 00:48:47.220
Thank you.


00:48:47.220 --> 00:48:48.040
- Thanks, Chris.

