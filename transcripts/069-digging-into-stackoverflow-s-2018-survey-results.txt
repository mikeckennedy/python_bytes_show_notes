00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 69, recorded March 15th, 2018. I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 And Brian, probably nothing to cover with notebooks or anything.

00:00:16 Like last time we had kind of an over-the-top notebook thing, didn't we?

00:00:19 Yeah, we did. We covered a few topics on notebooks.

00:00:22 Good thing. We probably won't do that again this week.

00:00:24 I just want to say a quick thanks to DigitalOcean.

00:00:27 They're sponsoring this episode and many of the episodes of Python Bytes.

00:00:30 So they really are helping make the show happen.

00:00:33 Check them out at do.co slash Python.

00:00:36 We'll talk more about that later.

00:00:38 Maybe we'll talk about notebooks, Brian.

00:00:40 Yeah, let's talk about them just for a little bit.

00:00:42 So because we talked about notebooks last time, one of our listeners contacted us and said,

00:00:50 we should take a look at a project called PYNB.

00:00:54 It says, Jupyter Notebooks in plain Python code with embedded markdown text.

00:00:59 So the comment from our listener was, loves Jupyter Notebooks, but he also loves using his own editor.

00:01:06 I think he uses PyCharm.

00:01:07 I like doing that too, but you can't, it's like not trivial to edit.

00:01:13 I haven't even tried to try to edit a notebook in PyCharm.

00:01:17 You probably can, but I haven't tried.

00:01:20 But anyway, but I like this idea of there's, it's basically a converter that you can convert back and forth between a plain text with,

00:01:30 or a Python code with embedded markdown back and forth to a notebook.

00:01:35 So it looks pretty cool.

00:01:37 Yeah, it's pretty wild.

00:01:38 So you define like a cells function, and then you can put like docstring type equivalent of markdown,

00:01:45 and that becomes a cell.

00:01:46 And then you put a little bit of Python, that becomes a Python cell.

00:01:49 the more markdown within docstrings, and that becomes like another cell.

00:01:52 And yeah, it's super cool.

00:01:54 So a really nice, simple example.

00:01:55 It's quite cool.

00:01:56 Yeah.

00:01:57 And one of the things that it points out, which is nifty, is it allows you to,

00:02:01 to use diffs better with, with your version control tools or things like that.

00:02:06 So that's, yeah, it's worth checking out if you, if you want to do more with notebooks,

00:02:11 but want to be able to store them in plain text better.

00:02:14 It's really just right down to the essence of it, isn't it?

00:02:17 Because the notebooks, they're pretty verbose.

00:02:19 If you crack open the text file and look at them, you know, you look at,

00:02:22 you look at this, and it's like, literally what you would see in the notebook is like,

00:02:26 all you type.

00:02:27 It's pretty cool.

00:02:27 was one of my to-do lists was to play with some notebooks a little bit.

00:02:31 So I'll play with this also.

00:02:32 Yeah.

00:02:33 So PiNB, Pi Notebook, check that out.

00:02:35 Very, very cool.

00:02:36 So you know how there's this really cool William Gibson quote, the future is already here.

00:02:41 It's just not evenly distributed.

00:02:42 Yeah.

00:02:43 I love that.

00:02:44 That's a cool quote.

00:02:45 Yeah, I do too.

00:02:45 And I often, when I think of like, oh, where's that future we were hoping for?

00:02:49 Well, it's not, well here.

00:02:50 Well, maybe it is.

00:02:51 It's just not evenly distributed.

00:02:52 So this next thing feels like it kind of falls into that realm.

00:02:56 And it's, it's definitely, like from the futuristic world.

00:03:00 I don't know how far futuristic is this two years in the future, 10 years or a hundred years or,

00:03:06 or something like that.

00:03:07 Or is it just live in science fiction?

00:03:08 But I promise this has something to do with Python.

00:03:10 It just takes a moment to get to it.

00:03:12 So the announcement is that Microsoft has created a quantum computing language called Q sharp.

00:03:19 Yeah.

00:03:19 Okay.

00:03:20 This just sounds neat.

00:03:21 This is awesome.

00:03:22 Right.

00:03:22 Yeah.

00:03:23 And it's been out for a little while.

00:03:25 And we were talking before the show.

00:03:27 It's like, it was almost worth covering before just because, wow, there's a program programming language specifically designed for quantum

00:03:34 computers.

00:03:34 That's a pretty nice language actually.

00:03:37 But the news is now it's available for macOS and Linux and you can try it.

00:03:42 Right.

00:03:43 So there's this new language called Q sharp.

00:03:45 And if you look at it, it's a little bit like C#.

00:03:47 It's also a little bit like either typescript in some ways, but also like Python.

00:03:52 And I was really pleased to see like the if statements don't have parentheses around the

00:03:57 condition and stuff like that, because we don't need them.

00:04:00 Why are we forced to write all those parentheses?

00:04:02 Like they're unnecessary.

00:04:03 We all know that from Python and Q sharp is sort of borrowing some of these cool ideas.

00:04:07 The type annotations are very much similar to Python's type annotations as well.

00:04:13 So quite cool.

00:04:14 There's this new language.

00:04:15 One of the first questions you might ask is like, great, there's this quantum computer programming language,

00:04:20 but there's no quantum computers.

00:04:22 So what's the point?

00:04:24 Like, why are we going to run this?

00:04:25 I mean, I know there's like a couple of bits, but not, you can't go and get like a quantum computer to test your program on.

00:04:31 So how do you test it?

00:04:32 Good question.

00:04:33 Yeah.

00:04:33 So they've got like this emulator type thing that emulates the behavior of a quantum computer,

00:04:37 although I suspect it's slower than a real one.

00:04:39 Well, are there, maybe I'm just not up to date.

00:04:42 Are there quantum computers now?

00:04:44 There are like, I can't remember who was, it feels like IBM, but there's like a couple of bits,

00:04:51 like a two bit quantum computer and like, like it's super, super cold environment that can do like very simple things.

00:04:58 So, but it's not like a general purpose, you know, unless you've got like a hydrogen bath,

00:05:04 like liquid hydrogen bath to put it in and things like that.

00:05:07 So it's, it's based on topological qubits and quantum computers.

00:05:12 So hence Q sharp, and it's out from macOS and Linux.

00:05:15 It's awesome.

00:05:15 On windows, you can play with it in visual studio standard, but on Mac and Linux,

00:05:21 you can use Visual Studio Code.

00:05:22 And there's like a quantum, programming code extension for Visual Studio Codes.

00:05:27 That's pretty cool.

00:05:28 Yeah.

00:05:29 And so you're saying that this ties into Python somehow.

00:05:32 Somehow.

00:05:33 In fact, so they said, all right, we created this new language and we created this way to emulate it.

00:05:37 And there's actually some stuff in their cloud computing platform, Azure,

00:05:40 where like you can plug in these things.

00:05:42 So like they all tie together in interesting ways, but they said, look, we know other languages exist.

00:05:47 And they're really important.

00:05:49 The one language we think is so important.

00:05:51 It should be involved in this as well as Python.

00:05:53 So you can now, you can now call, use Python to program quantum computers.

00:06:00 Oh, that is awesome.

00:06:02 Yeah.

00:06:02 That's awesome.

00:06:03 Right.

00:06:03 You know, emulated quantum computers, but still super awesome.

00:06:06 And they said, Oh, and a lot of this analysis has to do with like data science type stuff.

00:06:10 So we'll also support Jupyter.

00:06:12 Yeah.

00:06:12 I predict a whole bunch of like people in college doing their thesis on this

00:06:17 stuff like this.

00:06:18 Yeah.

00:06:19 That's a really good point.

00:06:19 Put the sciencey aspect back in computer science, right?

00:06:23 Yeah, definitely.

00:06:24 That'd be neat.

00:06:25 So do you speak Spanish, Brian?

00:06:27 I, you know, this is embarrassing.

00:06:30 I took two years of it in high school, but I barely can order a burrito.

00:06:34 Yeah.

00:06:35 My Spanish is not very good, but one of, there is, there is a fellow, a Valbana,

00:06:41 I think is his name.

00:06:43 that does speak Spanish.

00:06:45 And he gave a talk at PyCon ES in 2017 about pytest and let me know about it and,

00:06:53 showed me the slides and, and this was kind of cool.

00:06:56 He sent it to me on Twitter and said, Hey, I forgot to tell you, I gave this talk last year and I think it was in September.

00:07:03 And, and I said, that looks really cool.

00:07:06 There's a lot of neat stuff in it.

00:07:08 Unfortunately, I don't speak Spanish.

00:07:11 but neat anyway.

00:07:13 And he said, Oh, let me translate it for you.

00:07:15 So he translated the slide deck for me and the slide deck.

00:07:18 We have a link to the English slides.

00:07:20 and there's also, if you speak Spanish or want to watch anyway, there's a video on YouTube that we'll link to.

00:07:27 but one of the things I, one of the reasons I wanted to bring it up is because there's some neat things in there that I'd never heard of before.

00:07:33 There's some that I have and some that I haven't.

00:07:35 Like for instance, he does talk about, using pytest Django.

00:07:39 So how to, how to, how to hook up pytest with, Django models and stuff.

00:07:43 And then a thing called model mommy, which is a way to mock out, Django models.

00:07:50 haven't heard of that.

00:07:51 One of the things that doesn't get that I need to talk about in full length on my podcast is,

00:07:57 I test lazy fixture, which is, it's probably soon to be one of the recommended ways to,

00:08:03 to have fixtures be able to go into a test function parameterized input.

00:08:11 Anyway, it's a, it takes a bit of explaining, but then there's some fun,

00:08:16 also some fun things.

00:08:17 freeze gun is a way to freeze time for your testing into a specific spot.

00:08:22 And the interface, it looks really cool on freeze gun.

00:08:24 That's cool.

00:08:25 That, I love the names here, the model mommy and the freeze gun.

00:08:28 These are great.

00:08:28 Yeah.

00:08:29 And then a package called eradicate, which, like removes all the comments out of some code because,

00:08:36 you know, sometimes code is easier to read if you remove the comments.

00:08:40 So that's fun.

00:08:41 Code comments are deodorant for code spells, right?

00:08:46 They're there to explain why your code is fully written.

00:08:48 Right.

00:08:49 So a lot of the times if they're not full on documentation meant for like a help statement.

00:08:53 Yeah, I totally agree.

00:08:53 That's awesome.

00:08:54 Anyway, those are, those are some fun things.

00:08:56 So I wanted to bring it up and then a bonus topic, just today was announced that,

00:09:01 by test.org added a reference page, which has a one page reference, full reference to the by test API.

00:09:09 Oh, that's cool.

00:09:10 All, all in one place.

00:09:11 Yeah.

00:09:12 Super nice.

00:09:13 All right.

00:09:13 Speaking about stuff in one place, let me tell you about digital ocean and a cool feature they have.

00:09:19 So, you know, that you can go to digital ocean and create virtual machines,

00:09:22 right?

00:09:22 Like Linux servers and stuff.

00:09:23 Yeah.

00:09:24 Yeah.

00:09:24 So, you know, that's just the start a lot of time.

00:09:27 What if you want to run get lab or you want to like set up MongoDB, or you're going to run like a discourse server,

00:09:34 you got to install Ruby, you got to install the whole discourse stuff, the database,

00:09:37 et cetera.

00:09:38 So one of the things you can do at digital ocean, and when you go to create a new machine,

00:09:42 they call them droplets, as you can create these one clip apps, one click apps.

00:09:46 So I can click over here and say, I would like to click and say, boom, new discourse server,

00:09:50 all set up, configure it and save, go.

00:09:52 I want a new ghost server, go.

00:09:54 I want a new WordPress instance, go.

00:09:55 And just click it and it's up and running.

00:09:57 It's pretty awesome.

00:09:58 Really?

00:09:59 Okay.

00:09:59 That's neat.

00:10:00 Yeah.

00:10:01 You can even do Docker.

00:10:01 Like you want a Docker server, boom, hit that button and you've got Docker 17,

00:10:05 12 running.

00:10:06 Yeah.

00:10:08 On Ubuntu 1604.

00:10:08 Perfect.

00:10:09 Neat.

00:10:10 I'll have to check out all the one click things they've got.

00:10:12 Sounds cool.

00:10:13 Yeah.

00:10:13 So they got a bunch of stuff that helps you get going in a, a nice way.

00:10:16 So check that out.

00:10:18 D O C O slash D O dot C O slash Python.

00:10:20 And let them know that they are doing the right thing, supporting our show.

00:10:23 Great.

00:10:24 It is once again, that season in which the stack of workflow developer survey results come

00:10:30 back, come out.

00:10:31 So the 2018 developer survey results are out.

00:10:35 They said they had a hundred thousand, over a hundred thousand developers this time.

00:10:39 I think last year they had 64,000.

00:10:41 So this is cool.

00:10:42 It's growing.

00:10:42 And I thought it'd be fun to just cover some of the, high points.

00:10:46 They spent a lot of time actually talking about like history of education.

00:10:52 You know, like how much education level did your parents have a lot of that kind of social

00:10:58 stuff.

00:10:59 Interesting.

00:10:59 That, that sounds neat.

00:11:00 Yeah.

00:11:01 Yeah.

00:11:01 It's pretty interesting.

00:11:02 Like, yeah, things like that.

00:11:04 There's a bunch of that, but I'm going to focus mostly on like the tech tech bits.

00:11:08 So first, one of the first questions they asked was about open source.

00:11:12 And they said, how many of you contribute to open source and 55% of professional developers contribute to

00:11:19 open source.

00:11:19 That's higher than I would have expected.

00:11:21 That's awesome.

00:11:22 Yeah.

00:11:22 Yeah.

00:11:22 It's really awesome.

00:11:23 I think for, all respondents, there were some students and stuff and people who retired.

00:11:28 So it was slightly higher.

00:11:29 It's not surprising, but I thought the professional 55% was like the most interesting there.

00:11:33 And then people often feel like if they didn't get a computer science degree in school,

00:11:38 like they don't necessarily belong in programming or it's hard for them to get into programming,

00:11:43 but it turns out that only 64% of the people have CS degrees.

00:11:46 That's actually, yeah, I think that that's actually seems high to me.

00:11:50 there's only about a third or less of the people I work with have CS degrees.

00:11:55 Yeah, I agree.

00:11:56 I think that seems even high for my experience as well.

00:11:58 Maybe CS degree people spend a lot of time on stack overflow.

00:12:01 I don't know.

00:12:01 Maybe, but why are they spending so much time?

00:12:04 Because supposedly they have a degree.

00:12:06 Exactly.

00:12:07 Come on.

00:12:07 so one of the, one of the social things they talked about was sort of the sense of,

00:12:13 belonging.

00:12:14 Oh, nice.

00:12:15 People's perspective as developers among their peers.

00:12:18 So they taught, they put that under the manner of experience and belonging.

00:12:21 And they said, they had a graph and they said, okay, how much do you feel this is,

00:12:27 is true or false over time?

00:12:28 Like how much does this apply to you over time?

00:12:31 Well, not over time, but if you've had one year experience versus a people with five year experience,

00:12:35 versus people with 10 years, there's like a graph over years of experience and,

00:12:38 and this metric.

00:12:39 So they said, your connection and sense of community with other developers.

00:12:44 And apparently the more time you spend in the programming world, the more that,

00:12:48 you know, matches, which makes sense.

00:12:49 Right.

00:12:50 But they, they also said, how much do you feel like you're competing with your peers instead of actually

00:12:56 working together?

00:12:57 Right.

00:12:57 How much do you see it as a zero sum game?

00:12:59 I guess.

00:12:59 And at, in the beginning, it's people feel quite high that it's like direct competition.

00:13:04 That person gets more recognition.

00:13:06 I get less, they get a raise.

00:13:08 I don't, I don't know something like that, but over time that diminishes quite significantly.

00:13:12 That's good.

00:13:12 Same thing for, yeah, for sure.

00:13:14 And then also the feeling of I'm not as good of a programmer as my peers

00:13:18 pretty high at the beginning.

00:13:20 Over time, people feel less and less and less like that's a true statement,

00:13:23 which I thought it was good as well.

00:13:25 I mean, it seems to me like all of these are going in the right direction,

00:13:28 the longer you're in programming, which is a positive statement for the whole ecosystem.

00:13:34 Yeah.

00:13:34 So, but it also shows that we need to try to teach students, try to get that connectedness and the less,

00:13:41 less competitiveness.

00:13:43 Teach that earlier.

00:13:44 Yeah.

00:13:45 Right away.

00:13:45 Right away.

00:13:46 You want a kind of a bleak statement that totally applies to me.

00:13:49 How much time do you spend on computers?

00:13:50 The most popular answer, nine to 12 hours a day.

00:13:54 Does that include your phone?

00:13:56 I think it might even be behind a screen.

00:13:59 I'm not entirely sure, but if like you kick back and play games or watch Netflix or whatever,

00:14:02 it was also notable that the usage of Python has exceeded C# for the first time.

00:14:09 They called that out specifically, I think.

00:14:10 Yeah.

00:14:11 Cool.

00:14:11 Then the couple more things like there's languages and databases.

00:14:16 They talk about the most loved, the most dreaded and the most wanted.

00:14:20 So most love is you're using it and you love it.

00:14:22 Dreaded is like you've had to use it or you've never, ever want to use it.

00:14:25 It gives you fear.

00:14:26 And then wanted is I'm not yet using it, but I want to use it.

00:14:29 So these are all interesting ways to measure things.

00:14:31 So languages most love.

00:14:32 Number one is rust, even though not that many people use it among the people who use it.

00:14:36 They love it so much.

00:14:37 Apparently, Kotlin is number two and Python is number three.

00:14:40 Pretty nice.

00:14:42 Okay.

00:14:42 Yeah.

00:14:42 Dreaded VB six and coffee script.

00:14:45 Keep away.

00:14:45 Wanted.

00:14:47 Python is number one, the most wanted language by 25%.

00:14:51 Number two is JavaScript at 19, which is quite a drop.

00:14:54 And then go is at 16%.

00:14:56 So it drops off really quick.

00:14:57 And Python is sort of ruling that.

00:14:59 Yeah.

00:15:00 That's great.

00:15:00 Yeah.

00:15:01 Databases.

00:15:02 Yeah.

00:15:02 Databases.

00:15:03 Most love Postgres.

00:15:03 Most dreaded is IBM DB2.

00:15:05 Memcached in Oracle.

00:15:07 And Memcached was responsible for the largest distributed denial of service attack ever.

00:15:12 And that was put onto GitHub recently.

00:15:15 So, and then most wanted is MongoDB.

00:15:16 A most popular editor, Visual Studio Code.

00:15:19 Pretty interesting.

00:15:20 Yeah.

00:15:21 And for developers, what OS do they use?

00:15:23 Last thing.

00:15:24 Windows, 49%.

00:15:26 macOS, 27%.

00:15:28 Linux, 23%.

00:15:29 Not where they deploy to, but what do they write their code on?

00:15:32 That, and this is one that we need to pay attention to more, I think.

00:15:36 Because, of all the, a lot of the podcasters and bloggers and all of that within the Python community,

00:15:44 I think, either Linux or macOS might be, higher.

00:15:48 Much higher.

00:15:49 but you're teaching to a group of people that half of them are running Windows.

00:15:54 So you just can't ignore Windows.

00:15:56 Yeah.

00:15:57 It's, it's a really good point that like, even though it's sort of the thought leaders and the people who see at conferences and,

00:16:02 and speakers and whatnot are probably either Linux or Mac, the actual people doing the work and using the stuff is,

00:16:08 is very much Windows still.

00:16:10 So definitely not to be forgotten.

00:16:12 Speaking of presenting.

00:16:13 Speaking of presenting, Doug Hellman, he came up with, and there's got a new project,

00:16:21 called Demo Shell.

00:16:23 And the idea is, it came out like somebody named Gene Hack on Twitter said,

00:16:30 Hey speakers, if you're going to do live demos in a shell, clear the screen after every command and get the prompt back to the top.

00:16:37 So folks in the back can see what you're doing.

00:16:40 And that's, completely reasonable.

00:16:43 Yeah, it's a great idea.

00:16:44 But instead of fiddling with it, so this, demo shell is this site.

00:16:49 The idea is basically just to do that, to capture, a Python project, to capture your input and emulate a shell.

00:16:57 But it really just pushes all the work off to a shell to do the work.

00:17:00 But, but between commands, puts your prompt back at the top and it's, it's in its very early stages.

00:17:08 So, I actually reached out to Doug and said, Hey, do you want me to announce this yet?

00:17:13 Are you, you ready for it?

00:17:15 And he said, yeah, I put it up there to start the discussion.

00:17:17 Be happy if a bunch of people showed up and, started, participating and adding things.

00:17:22 But, he added a warning also that, too much interest is going to be met with commit privileges on the repo.

00:17:30 Essentially, if you want stuff done, he might say, Hey, just go ahead and do it.

00:17:36 but actually that's a good thing.

00:17:38 He's up, he's up for people to help him out.

00:17:40 So, yeah, I think it's really neat.

00:17:42 It's a cool idea.

00:17:43 It definitely makes a lot of sense.

00:17:45 I've done so many training classes where it's not like stadium seating.

00:17:48 It's like flat, right?

00:17:50 And it's usually in some room with a crappy projector screen.

00:17:54 That's like too small, like a third of it's off, you know, people in the back can't see it at all.

00:17:58 And this is perfect, right?

00:17:59 You just, everything stays at the top.

00:18:01 It's really great.

00:18:02 And people out there looking to find an open source project to work on, right?

00:18:06 Go and express some interest.

00:18:08 You might be met with commit privileges on the repo, but it's, it's still in its really small stages.

00:18:13 There's not a lot of code there, so it's pretty easy to read.

00:18:16 So yeah, that's awesome.

00:18:17 It's cool.

00:18:17 Nice.

00:18:18 All right.

00:18:18 So let's wrap this up with a really nice definitive statement.

00:18:23 The last thing I want to talk to talk about is Python two's end of life.

00:18:27 So we've spoken before how there's the Python death clock and it's, we know that in 2020,

00:18:33 Python two will go unsupported.

00:18:36 What exactly does that mean?

00:18:37 How strict are they going to be about that?

00:18:39 Is it going to be at PyCon 2020?

00:18:42 Is it going to be the end of the year, beginning of the year?

00:18:44 Well, my friend, Nicola Aroshi, he, who I have more news about in just a little bit,

00:18:49 he's put this out on Twitter and got my attention.

00:18:53 Basically there was this discussion on the Python mailing list saying, will there be a period where Python two seven is in security only status

00:19:02 before hitting end of life.

00:19:03 So like say 2020, will it go into like, well, we'll do security fixes for a while,

00:19:08 but no new features and we're not changing anything.

00:19:10 Or like, what is that going to happen earlier?

00:19:12 Guido actually came out and said, let's not play games with semantics.

00:19:16 The way I see it, the situation for two seven is the end of life is January 1st,

00:19:21 2020 beginning of 2020.

00:19:23 And there will be no updates, not even source only security patches after that date,

00:19:27 period support from the core devs, the PSF, Python.org completely stops on that date.

00:19:33 Yeah.

00:19:33 There's, there's your answer.

00:19:35 That's a pretty abundantly clear, isn't it?

00:19:38 Yeah, but that's way out.

00:19:40 That's like, that's like, like way in the future.

00:19:43 That has to be at least, a year and a half away.

00:19:45 So for those people with like millions of lines of code on Python too, they probably should start checking out things like my pie and some of the

00:19:55 other tooling on pushing that along.

00:19:57 Right.

00:19:57 Yeah.

00:19:58 Or, I mean, if you're planning on leaving your job and going to another company within the

00:20:03 next couple of years, don't worry about it.

00:20:04 Yeah, exactly.

00:20:05 Or I know I've got a better one for you, Brian.

00:20:08 I got a better one.

00:20:09 Or you want to get a really sweet consulting job, migrating Python two to Python three,

00:20:15 you know, learn all the nuances and go and, you know, when people are freaking out in November of 2019,

00:20:23 you're going to be in sweet demand.

00:20:25 Actually, that's not a bad idea.

00:20:28 Right.

00:20:28 My rate's $250 an hour to start.

00:20:30 So let's go with that.

00:20:31 Yeah.

00:20:33 I can help you with this problem.

00:20:34 It's going to take a while though.

00:20:35 Hmm.

00:20:36 I got, I got about a year to beef up on my conversion, do some conversion study on this.

00:20:42 Right.

00:20:42 All right.

00:20:42 Yeah.

00:20:43 Awesome.

00:20:44 Do you, you got any, news or extra things you want to throw out there?

00:20:47 You did some recent testing code episodes, right?

00:20:49 Yeah.

00:20:49 So I guess I just wanted to shout out that I'm back into recording more often.

00:20:53 Yeah.

00:20:55 Yeah.

00:20:56 and I thought I'd, I start with a little test project.

00:21:01 So I've got a project called cards that, it's kind of a to do app, but I want to,

00:21:06 I'm focusing around using it as an, just as an example bed to talk about things that I get questions about all the time.

00:21:13 So, okay, your book is great for how to write the tests actually, but what tests do I write?

00:21:19 How do I pick which tests to write?

00:21:21 How do I, how do I pick test cases?

00:21:23 Basically this, this, intro to quality assurance, but for busy people that don't have a QA team,

00:21:30 how do I do that?

00:21:31 So that's where, where we're exploring.

00:21:33 I'm, I'm two episodes into it and I'm just going to run with it until it runs out of steam.

00:21:37 So check those out.

00:21:39 Those are really awesome.

00:21:40 I think that's great, advice.

00:21:41 And when people get that wrong, testing seems super horrible, right?

00:21:45 You're like, what do you mean I got to test every single thing?

00:21:47 Like, like if you're focused on testing the wrong thing, you can just feel super,

00:21:51 like it's just super busy work.

00:21:53 Yeah.

00:21:53 But it's, testing should be something to help you, develop faster, not slow you down.

00:21:58 And that's where I'm focusing my energy.

00:22:00 How about you?

00:22:01 Anything else?

00:22:02 Well, I just got back from PyCon Slovakia.

00:22:05 That was pretty awesome.

00:22:06 So I wanted to send a shout out to everyone there who I met.

00:22:08 And that was, that was fun.

00:22:09 So if you're in central Europe ish, next year, be sure to check that out.

00:22:14 That was a good event.

00:22:15 And also I have a new course.

00:22:16 You do.

00:22:17 And I'm excited about it.

00:22:18 Yeah.

00:22:19 it's on the most, most wanted database technology.

00:22:22 So this is our, the first course based on Flask that I have.

00:22:26 So this is, on a thing called Eve, Eve, E, the E framework, which is a way to take Flask and a MongoDB database and turn it into a really awesome,

00:22:36 restful API with validation and business logic and all that kind of stuff.

00:22:41 So it's, it's a super cool way.

00:22:43 And it's like really declarative.

00:22:44 So you say, here's my models.

00:22:45 Here's my end points.

00:22:46 Here's the validation for them.

00:22:47 Make that a rest service.

00:22:49 Go.

00:22:49 And it's nice.

00:22:51 So that's out now.

00:22:52 That's actually written by Nicola Aroshi, the guy who talked about the Python two seven statement.

00:22:57 He, he wrote that.

00:22:59 And we just shipped it.

00:23:00 He's also the creator and maintainer of Eve.

00:23:02 So, he's pretty qualified to talk about it.

00:23:04 That's great.

00:23:05 And I'm, I've already started listening to it because I'm very interested in this topic.

00:23:09 So, yeah.

00:23:10 Awesome.

00:23:10 Cool.

00:23:11 Well, links in the show notes, check that out.

00:23:13 And I think that might be it.

00:23:15 I'm really excited that we have a concrete statement on Python two seven and it's not like,

00:23:19 it's just vague, right?

00:23:21 Yeah.

00:23:21 That's good to have it.

00:23:22 I wonder if they updated the clock.

00:23:24 Exactly.

00:23:24 I was just thinking that we've got to recalibrate all the clocks.

00:23:27 Cause they were all guessing.

00:23:28 They probably got shorter.

00:23:30 Awesome.

00:23:30 All right.

00:23:31 Well, thanks again, Brian.

00:23:32 And thanks everyone for listening.

00:23:33 Thank you for listening to Python bytes.

00:23:37 Follow the show on Twitter via at Python bytes.

00:23:39 That's Python bytes.

00:23:41 as in B Y T E S and get the full show notes at Python bytes.

00:23:45 Dot.

00:23:45 F M.

00:23:46 If you have a news item, you want featured, just visit Python bytes.

00:23:49 Dot.

00:23:49 F M and send it our way.

00:23:50 We're always on the lookout for sharing something cool.

00:23:53 On behalf of myself and Brian Okken.

00:23:55 This is Michael Kennedy.

00:23:56 Thank you for listening and sharing this podcast with your friends and colleagues.

