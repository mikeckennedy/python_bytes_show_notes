
00:00:00.000 --> 00:00:08.200
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 221, I think.


00:00:08.200 --> 00:00:13.000
Recorded, when is it? February 17th, 2021. I am Brian Okken.


00:00:13.000 --> 00:00:14.000
I'm Michael Kennedy.


00:00:14.000 --> 00:00:19.600
And we also have Brett Cannon. Yeah. I always talk over the third person. I'm not sure why.


00:00:19.600 --> 00:00:26.800
Well, you're always going like, is there going to be an introduction or should I just join the Brady Bunch theme? Let's just go in a circle and just introduce ourselves.


00:00:26.800 --> 00:00:33.500
But if we're going to do Brady Bunch, we've got to have more people so we can like fill out, what is that, like rows of three or whatever in the picture?


00:00:33.500 --> 00:00:38.800
I'm sure Anthony Shaw and Paul Everett are available based on how often they show up here. So I'm sure they're waiting in the wings.


00:00:38.800 --> 00:00:43.000
That's right. We'll just swoop them in here for the right picture. Welcome, Brad. It's great to have you here.


00:00:43.000 --> 00:00:44.200
Lovely to be back.


00:00:44.200 --> 00:00:50.100
You know what, Brian, I'm impressed with Brett's microphone. He has mastered the work from home.


00:00:50.100 --> 00:00:54.500
Yeah, I love this. We're going to have to put a link in the show notes to this thing.


00:00:54.500 --> 00:00:55.820
- Tell people about this.


00:00:55.820 --> 00:00:58.260
So, Bright and I both have good microphones.


00:00:58.260 --> 00:01:00.020
We have many different microphones we've tried,


00:01:00.020 --> 00:01:03.580
but yours has a visual aspect, which is unusual for audio.


00:01:03.580 --> 00:01:07.660
- Yeah, so it's a HyperX Quadcast S specifically,


00:01:07.660 --> 00:01:10.220
and it comes with RGB lighting


00:01:10.220 --> 00:01:11.640
'cause it's really a gamer mic.


00:01:11.640 --> 00:01:15.280
But obviously in pandemic times, I work from home,


00:01:15.280 --> 00:01:18.020
and my wife is also at home because of the pandemic,


00:01:18.020 --> 00:01:20.820
and we always had an issue of her wanting to come in


00:01:20.820 --> 00:01:23.300
and not knowing whether I was actually occupied


00:01:23.300 --> 00:01:26.540
actually in a meeting because I'm in them a lot for work


00:01:26.540 --> 00:01:27.900
or whether or not I was just sitting there


00:01:27.900 --> 00:01:29.820
with my headphones on listening to music or whatever


00:01:29.820 --> 00:01:31.360
and she could totally just walk in.


00:01:31.360 --> 00:01:33.700
And so the great thing about this microphone


00:01:33.700 --> 00:01:35.980
is if it has a touch sensitive top


00:01:35.980 --> 00:01:38.140
and if you tap it, the LEDs turn off.


00:01:38.140 --> 00:01:41.340
And so it acts as like an on air light for the room.


00:01:41.340 --> 00:01:42.780
I mean, it's not that bright specifically


00:01:42.780 --> 00:01:45.220
but if she opens the door, she can totally just look in


00:01:45.220 --> 00:01:46.680
and go, is the mic lit?


00:01:46.680 --> 00:01:48.980
And if the mic's not lit, she knows she's not going


00:01:48.980 --> 00:01:51.560
to be heard or be directly interrupting me


00:01:51.560 --> 00:01:53.900
and I can just turn and answer any questions she has.


00:01:53.900 --> 00:01:54.740
And it's awesome.


00:01:54.740 --> 00:01:55.940
It works out great that way.


00:01:55.940 --> 00:01:56.980
- That is so fantastic.


00:01:56.980 --> 00:01:59.660
The whole mic glows when it's on and active.


00:01:59.660 --> 00:02:00.820
Different colors, it's beautiful.


00:02:00.820 --> 00:02:01.660
I love it.


00:02:01.660 --> 00:02:03.340
- Yeah, and you can even change which colors it uses.


00:02:03.340 --> 00:02:05.460
This is, I can't remember if it's waterfall or not,


00:02:05.460 --> 00:02:08.040
but you can actually change how the color spectrum changes


00:02:08.040 --> 00:02:09.680
from side to side in terms of colors


00:02:09.680 --> 00:02:11.540
and whether it's top to bottom or not.


00:02:11.540 --> 00:02:12.380
It's very pretty.


00:02:12.380 --> 00:02:14.700
I think I once did Harry Potter color themed


00:02:14.700 --> 00:02:16.940
for a coworker of mine who's a big Harry Potter fan


00:02:16.940 --> 00:02:17.780
for all the houses.


00:02:17.780 --> 00:02:20.260
And I've purposely not played with it


00:02:20.260 --> 00:02:21.100
and kept with the defaults


00:02:21.100 --> 00:02:22.640
'cause it's definitely one of those things


00:02:22.640 --> 00:02:23.720
I could totally nerd out on


00:02:23.720 --> 00:02:25.340
and play with the colors all day long.


00:02:25.340 --> 00:02:27.000
I tried Python colors once,


00:02:27.000 --> 00:02:29.320
the transitions didn't look quite as nice, but you know.


00:02:29.320 --> 00:02:30.160
- Yeah, no, it's good.


00:02:30.160 --> 00:02:31.680
I have the microphone that matches,


00:02:31.680 --> 00:02:33.520
or sorry, the mouse that matches it.


00:02:33.520 --> 00:02:35.320
- Oh, nice. - And it pulses, so.


00:02:35.320 --> 00:02:36.480
I didn't get it for the color,


00:02:36.480 --> 00:02:38.440
but it's the only one I could get that had color.


00:02:38.440 --> 00:02:39.360
I'm like, why is it of color?


00:02:39.360 --> 00:02:40.200
How do I turn this off?


00:02:40.200 --> 00:02:41.800
But no, it just has colors, fine.


00:02:41.800 --> 00:02:43.160
But anyway, great, Mike.


00:02:43.160 --> 00:02:44.600
I think people should check that out.


00:02:44.600 --> 00:02:47.060
If they have like weird work-from-home situations


00:02:47.060 --> 00:02:49.800
and people are interrupting, it's super cool, I love it.


00:02:49.800 --> 00:02:51.880
Definitely get a mic stand, though.


00:02:51.880 --> 00:02:53.480
The default stand's a little low,


00:02:53.480 --> 00:02:58.000
and I have found that getting a cheap $10, $15 stand--


00:02:58.000 --> 00:03:01.800
I got this from Amazon-- that pushes it off about 7 inches,


00:03:01.800 --> 00:03:02.360
I think.


00:03:02.360 --> 00:03:04.360
Trying to do the American units.


00:03:04.360 --> 00:03:06.640
It pushes up about 15 centimeters.


00:03:06.640 --> 00:03:09.060
It's a nice, sweet spot in terms of distance,


00:03:09.060 --> 00:03:10.480
while still not completely taking up


00:03:10.480 --> 00:03:11.600
your vision in the screen.


00:03:11.600 --> 00:03:12.640
>>Brian: Yeah, excellent.


00:03:12.640 --> 00:03:13.160
Excellent.


00:03:13.160 --> 00:03:16.360
Well, Brian, you want to kick us off here with our first topic?


00:03:16.360 --> 00:03:16.920
>>Brian: Yeah.


00:03:16.920 --> 00:03:21.920
- Well, we've got, it's hard to keep up with Will McCougan,


00:03:21.920 --> 00:03:27.120
sorry Will, Will wrote Rich, which is a,


00:03:27.120 --> 00:03:28.120
I forget what he calls it.


00:03:28.120 --> 00:03:29.840
Basically it's a CLI tool,


00:03:29.840 --> 00:03:33.480
but there's been a whole bunch of really cool things


00:03:33.480 --> 00:03:35.920
he's done recently, like really recently.


00:03:35.920 --> 00:03:39.840
So in December, he added live view,


00:03:39.840 --> 00:03:42.920
which allows you to just, you can,


00:03:42.920 --> 00:03:45.320
it continually updates whenever an event happens


00:03:45.320 --> 00:03:48.280
something in that part of the screen, which is cool.


00:03:48.280 --> 00:03:50.480
He didn't write a blog post on that,


00:03:50.480 --> 00:03:54.520
but then in January, TreeView came out.


00:03:54.520 --> 00:03:56.520
The TreeViews are lovely.


00:03:56.520 --> 00:04:00.260
You can do all sorts of stuff with the TreeView.


00:04:00.260 --> 00:04:05.200
Yeah, it's a nice thing to have in a CLI tool.


00:04:05.200 --> 00:04:07.640
Then what's really impressive to me,


00:04:07.640 --> 00:04:09.760
I think, was layouts.


00:04:09.760 --> 00:04:13.400
This month, he released layouts.


00:04:13.400 --> 00:04:17.820
it allows you to split the screen up and his demo


00:04:17.820 --> 00:04:23.520
even shows it happening within a VS Code.


00:04:23.520 --> 00:04:26.880
>> Oh, yeah. Within the bottom.


00:04:26.880 --> 00:04:27.280
>> Yeah.


00:04:27.280 --> 00:04:28.960
>> Terminal part of VS Code.


00:04:28.960 --> 00:04:30.820
Yeah. Brett, you've heard of this, right?


00:04:30.820 --> 00:04:31.820
You've heard of this tool?


00:04:31.820 --> 00:04:34.080
>> How can I not? I'm a fan of the podcast and


00:04:34.080 --> 00:04:37.680
Brian loves this tool so I've heard about it multiple times.


00:04:37.680 --> 00:04:40.100
>> I guess we've covered it before.


00:04:40.100 --> 00:04:42.660
But one of the reasons why I'm covering it again,


00:04:42.660 --> 00:04:44.120
There's a couple of reasons.


00:04:44.120 --> 00:04:46.680
Is the layout's neat and really,


00:04:46.680 --> 00:04:49.780
now I want to click on stuff and I want to do entry.


00:04:49.780 --> 00:04:51.780
He hinted at that,


00:04:51.780 --> 00:04:54.840
that he's going towards a full TUI,


00:04:54.840 --> 00:04:56.220
which I had never heard of before,


00:04:56.220 --> 00:04:57.560
Text User Interface.


00:04:57.560 --> 00:04:58.960
>> Yeah, TUIs. All right.


00:04:58.960 --> 00:05:00.320
Right on. That'd be cool.


00:05:00.320 --> 00:05:03.420
>> I think that would be neat and I'd like to encourage that.


00:05:03.420 --> 00:05:05.840
The other thing that's going on with Rich is


00:05:05.840 --> 00:05:11.540
he's accepting sponsorships now and it's hidden in the demo window.


00:05:11.540 --> 00:05:15.940
But we're highlighting it on the show so more people can know about it.


00:05:15.940 --> 00:05:20.340
So GitHub is doing sponsorships on GitHub,


00:05:20.340 --> 00:05:22.980
and I like how GitHub sponsorships work.


00:05:22.980 --> 00:05:25.520
It's neat, so check it out.


00:05:25.520 --> 00:05:29.120
The other thing that I guess when I was playing with these layout things,


00:05:29.120 --> 00:05:33.320
that I didn't really realize before is you can just say Python-in rich,


00:05:33.320 --> 00:05:36.340
and it shows a little demo of a whole bunch of stuff.


00:05:36.340 --> 00:05:38.980
Then some of the particular parts of it,


00:05:38.980 --> 00:05:41.260
you can demo them individually.


00:05:41.260 --> 00:05:45.380
Like for the layout, you can say Python-mrich.layout,


00:05:45.380 --> 00:05:47.780
and it'll show a demo.


00:05:47.780 --> 00:05:50.620
The tree also has a demo,


00:05:50.620 --> 00:05:52.780
and the live one actually,


00:05:52.780 --> 00:05:54.500
I couldn't escape it.


00:05:54.500 --> 00:05:55.580
I had to kill my window.


00:05:55.580 --> 00:05:59.100
So the live one just continually updates some.


00:05:59.100 --> 00:06:04.140
I don't know if it's actually going out to the Internet,


00:06:04.140 --> 00:06:09.280
but it's doing some conversions of monetary conversions,


00:06:09.280 --> 00:06:11.020
and it just kept updating.


00:06:11.020 --> 00:06:13.020
It doesn't hit control C.


00:06:13.020 --> 00:06:16.200
>> Someone's got a bear except somewhere they shouldn't have.


00:06:16.200 --> 00:06:18.040
>> I think it's very reliable.


00:06:18.040 --> 00:06:19.760
I mean, the only way to exit is force quit.


00:06:19.760 --> 00:06:22.360
So we're all kill that line.


00:06:22.360 --> 00:06:24.280
Where's your friend?


00:06:24.280 --> 00:06:26.960
>> So yeah, I'd love to have


00:06:26.960 --> 00:06:31.540
some have rich continue with this and make it a full 2E, that'd be fun.


00:06:31.540 --> 00:06:34.640
>> That would be very cool because the presentation is really nice here.


00:06:34.640 --> 00:06:38.440
>> I will also fully support Will making this a full-on thing because actually,


00:06:38.440 --> 00:06:42.040
A couple of months ago, I did a slight dive on a weekend


00:06:42.040 --> 00:06:44.480
trying to find some TUI libraries,


00:06:44.480 --> 00:06:48.120
because I have a personal project for work purposes


00:06:48.120 --> 00:06:49.880
that I've been trying to do a GUI for.


00:06:49.880 --> 00:06:51.800
And two years in a row, I've tried


00:06:51.800 --> 00:06:54.520
to do it during Hackathon week at Microsoft,


00:06:54.520 --> 00:06:56.900
and I keep failing because I don't have enough time to dive


00:06:56.900 --> 00:06:59.600
into all the GUI libraries that go from, like, here's


00:06:59.600 --> 00:07:00.960
how to do Hello World.


00:07:00.960 --> 00:07:01.880
Here's the reference.


00:07:01.880 --> 00:07:05.440
And it's like, no, no, I need more steps there.


00:07:05.440 --> 00:07:06.880
Where's that middle ground?


00:07:06.880 --> 00:07:07.380
Come on.


00:07:07.380 --> 00:07:08.000
Yeah, exactly.


00:07:08.000 --> 00:07:11.400
And then I decided, oh, well, I totally could just do this in Curses.


00:07:11.400 --> 00:07:14.320
It's literally just to keep track of what I do every day.


00:07:14.320 --> 00:07:18.600
And it's just like it's snippets from Google is where I picked up the habit of just literally


00:07:18.600 --> 00:07:20.440
just, oh, I did this today that was out of ordinary.


00:07:20.440 --> 00:07:24.320
I did this today that was out of ordinary, just to kind of track the high level, not


00:07:24.320 --> 00:07:27.280
just meetings, but I actually did something different today.


00:07:27.280 --> 00:07:29.880
And it's like, oh, I could totally do this in the terminal.


00:07:29.880 --> 00:07:32.360
It's like suddenly pull up in Curses library.


00:07:32.360 --> 00:07:33.360
It's in the Snider library.


00:07:33.360 --> 00:07:36.160
And it's like, oh, yes, you need to know the size of your terminal window and all this


00:07:36.160 --> 00:07:39.280
other stuff and oh how to move the cursor to this specific position is like yeah no


00:07:39.280 --> 00:07:46.000
I still don't have time for this so move this along and make input work I mean I


00:07:46.000 --> 00:07:50.320
would be totally down for giving a shot yeah yeah quite cool and if people don't


00:07:50.320 --> 00:07:55.400
know you kind of live an alter ego you've got a bright Canon open source


00:07:55.400 --> 00:08:00.760
steering council and also work closely with VS Code at Microsoft right so


00:08:00.760 --> 00:08:05.840
having a screenshot on the screen is alright at home yeah yeah just for


00:08:05.840 --> 00:08:07.440
For people who don't know, I'm the dev manager


00:08:07.440 --> 00:08:09.280
for the Python extension for VS Code.


00:08:09.280 --> 00:08:13.320
That's how I pay for my open source habit,


00:08:13.320 --> 00:08:17.000
which includes being on the Python steering council


00:08:17.000 --> 00:08:17.840
on the core dev.


00:08:17.840 --> 00:08:18.940
- Yeah, quite cool.


00:08:18.940 --> 00:08:22.920
So, Gandalforf says, "I've been using prompt toolkit


00:08:22.920 --> 00:08:24.220
"for the Tui library for a while,


00:08:24.220 --> 00:08:26.760
"but this rich seems a lot nicer


00:08:26.760 --> 00:08:28.160
"if it actually accepted input,"


00:08:28.160 --> 00:08:30.160
which I agree, seems very cool.


00:08:30.160 --> 00:08:32.160
- And I've heard some people using them together,


00:08:32.160 --> 00:08:33.700
I just don't know how to do that.


00:08:33.700 --> 00:08:35.780
So if somebody wants to write a tutorial


00:08:35.780 --> 00:08:38.740
on how to use both Rich and Prompt Toolkit together,


00:08:38.740 --> 00:08:39.580
that'd be cool.


00:08:39.580 --> 00:08:41.460
- Yeah, that would be cool, actually.


00:08:41.460 --> 00:08:43.220
All right, what I wanna talk about


00:08:43.220 --> 00:08:45.660
is this article I ran across


00:08:45.660 --> 00:08:48.600
and some tools that I went to play with afterwards,


00:08:48.600 --> 00:08:51.180
after reading it, called 12 Requests Per Second.


00:08:51.180 --> 00:08:52.280
Sounds amazing, right?


00:08:52.280 --> 00:08:57.500
So it's a realistic look at web frameworks


00:08:57.500 --> 00:08:58.380
and Python web frameworks.


00:08:58.380 --> 00:09:00.560
So if you look out there, you'll hear things like,


00:09:00.560 --> 00:09:03.580
oh, we're getting 100,000 requests per second on UVLoop.


00:09:03.580 --> 00:09:07.880
with a single thread, or we've got Sanic


00:09:07.880 --> 00:09:11.720
doing 100,000 requests, or even Jopranto


00:09:11.720 --> 00:09:14.160
up to 1.2 million requests per second, right?


00:09:14.160 --> 00:09:15.420
Which is amazing.


00:09:15.420 --> 00:09:18.360
And then a lot of these examples are doing


00:09:18.360 --> 00:09:21.960
like really not real type of work, right?


00:09:21.960 --> 00:09:24.060
They're just doing some little tiny thing like,


00:09:24.060 --> 00:09:25.720
oh, here, let's add two numbers


00:09:25.720 --> 00:09:27.140
and tell you how fast we can do that.


00:09:27.140 --> 00:09:29.360
So this article is more like,


00:09:29.360 --> 00:09:31.920
well, let's go through a real application


00:09:31.920 --> 00:09:34.640
and see what kind of performance you might expect.


00:09:34.640 --> 00:09:37.040
So I thought it'd be fun to talk about this


00:09:37.040 --> 00:09:39.520
'cause it gives some people some things to think about.


00:09:39.520 --> 00:09:41.600
You know, how can you compare your app


00:09:41.600 --> 00:09:45.140
to these types of quotes that people are getting and so on?


00:09:45.140 --> 00:09:48.000
And would it be better to choose something like


00:09:48.000 --> 00:09:52.240
Depronto or AIOHTP or FastAPI or something like that


00:09:52.240 --> 00:09:54.560
over say Flask or Django,


00:09:54.560 --> 00:09:57.280
which don't have so much support for things like async.


00:09:57.280 --> 00:09:58.960
So I thought this was fun to go through


00:09:58.960 --> 00:10:00.200
and just kind of look at it.


00:10:00.200 --> 00:10:04.280
they start out by profiling just sort of a Hello World app


00:10:04.280 --> 00:10:05.520
and they get, all right, well,


00:10:05.520 --> 00:10:06.520
Hello World's pretty good.


00:10:06.520 --> 00:10:09.360
If you run Flask on CPython,


00:10:09.360 --> 00:10:11.700
you get, I don't know, some amount here,


00:10:11.700 --> 00:10:14.840
maybe it was 500 to 1,000.


00:10:14.840 --> 00:10:18.120
You run it on PyPy, they were able to get 3,000.


00:10:18.120 --> 00:10:20.920
You run it, and so that's just, you know, Flask run, right?


00:10:20.920 --> 00:10:21.920
Which is not really the way


00:10:21.920 --> 00:10:23.340
you should probably be doing things.


00:10:23.340 --> 00:10:26.280
You should be running on G-Unicorn or MicroWizGee


00:10:26.280 --> 00:10:27.160
or something like that.


00:10:27.160 --> 00:10:30.880
So if they ran the same thing on G-Unicorn,


00:10:30.880 --> 00:10:32.560
it's up to like 12,000.


00:10:32.560 --> 00:10:34.500
And you run it on, compare that against Sanic,


00:10:34.500 --> 00:10:37.280
you get, Sanic was doing like 24,000 or something.


00:10:37.280 --> 00:10:39.900
So these comparisons I thought would be fun for people.


00:10:39.900 --> 00:10:42.320
You can go through, they've got a bunch of graphs


00:10:42.320 --> 00:10:43.880
that you can check out, but then they write one


00:10:43.880 --> 00:10:46.840
that actually talks to a database doing database-y things.


00:10:46.840 --> 00:10:49.300
And then let me get down to the numbers here,


00:10:49.300 --> 00:10:51.100
the bottom for that, and they're like, okay,


00:10:51.100 --> 00:10:53.640
well with this one, now we're running at


00:10:53.640 --> 00:10:56.180
quite a bit lower request per second.


00:10:56.180 --> 00:10:58.120
And I think in the end they said for our real app,


00:10:58.120 --> 00:11:01.480
what we ended up with is a whopping like 12 requests


00:11:01.480 --> 00:11:02.320
for a second.


00:11:02.320 --> 00:11:03.160
Yeah, here we go.


00:11:03.160 --> 00:11:05.520
Here's the graph as I get for where like,


00:11:05.520 --> 00:11:11.560
this is Flask running the synchronous Postgres driver there.


00:11:11.560 --> 00:11:13.700
And that's all pretty interesting.


00:11:13.700 --> 00:11:16.440
I think, you know, even be able to answer the question,


00:11:16.440 --> 00:11:18.080
you know, well, what about me?


00:11:18.080 --> 00:11:19.040
What about my app?


00:11:19.040 --> 00:11:21.520
How would it do if I were to run these things against it?


00:11:21.520 --> 00:11:24.200
And we've talked about Locust before.


00:11:24.200 --> 00:11:28.720
Locust is a really fantastic way to write load testing


00:11:28.720 --> 00:11:33.280
and user interaction testing against websites,


00:11:33.280 --> 00:11:34.800
web APIs and so on.


00:11:34.800 --> 00:11:35.960
And it's all about Python.


00:11:35.960 --> 00:11:37.360
So what you do with this is you go through


00:11:37.360 --> 00:11:39.680
and you write some kind of class and you say,


00:11:39.680 --> 00:11:43.280
okay, here's a test, like a representation


00:11:43.280 --> 00:11:45.520
of what people might do to my website.


00:11:45.520 --> 00:11:48.360
They might log in, they might go view the episode page


00:11:48.360 --> 00:11:50.480
if we were testing the Python Bytes site,


00:11:50.480 --> 00:11:51.960
or they go check out the episode page,


00:11:51.960 --> 00:11:54.240
might drill into an episode, they might do a search.


00:11:54.240 --> 00:11:56.480
And what you can do is you write simple little bits


00:11:56.480 --> 00:12:00.120
of Python to say, here's a function that does this action.


00:12:00.120 --> 00:12:01.760
Here's a function that does that action.


00:12:01.760 --> 00:12:04.360
Like here's one that goes to the episode listing.


00:12:04.360 --> 00:12:06.520
And then you can actually, it's not shown in the example


00:12:06.520 --> 00:12:08.880
here, but you can say things like, well, you know,


00:12:08.880 --> 00:12:12.280
10 out of 15 times I want them to view an episode page.


00:12:12.280 --> 00:12:14.420
One out of the 10 times I want them to do a search.


00:12:14.420 --> 00:12:16.440
And three out of the 10 times I want them


00:12:16.440 --> 00:12:18.740
to actually go to the listing, right?


00:12:18.740 --> 00:12:21.160
So you can sort of break it up to what the normal


00:12:21.160 --> 00:12:24.780
would be, then you just run Locust and you get


00:12:24.780 --> 00:12:27.500
like this web UI where you enter some information


00:12:27.500 --> 00:12:30.300
and then it just runs, if you want even in a distributed way


00:12:30.300 --> 00:12:32.460
against your site and then pounds it


00:12:32.460 --> 00:12:34.300
until it gives up basically.


00:12:34.300 --> 00:12:36.500
Brett, have you heard of this tool?


00:12:36.500 --> 00:12:37.580
- No, I actually haven't.


00:12:37.580 --> 00:12:40.020
I mean, you hear about different tools


00:12:40.020 --> 00:12:41.420
for different things, but this is pretty,


00:12:41.420 --> 00:12:43.620
looking at this example, it's pretty simple,


00:12:43.620 --> 00:12:44.580
which is pretty great.


00:12:44.580 --> 00:12:46.360
- Yeah, the simplicity is really great.


00:12:46.360 --> 00:12:49.300
And then when you run it, you actually get a web view


00:12:49.300 --> 00:12:51.940
into it, then the web UI lets you basically control


00:12:51.940 --> 00:12:53.700
and monitor the tests in real time.


00:12:53.700 --> 00:12:56.180
So anyway, coming back to some numbers off of that,


00:12:56.180 --> 00:13:00.300
I decided, well, if they're getting 12 to 80 requests


00:13:00.300 --> 00:13:02.980
for a second, what does my stuff look like?


00:13:02.980 --> 00:13:04.940
Like, for example, a talk to Python training stuff.


00:13:04.940 --> 00:13:07.260
It's not using any of this async stuff.


00:13:07.260 --> 00:13:08.100
How is it doing?


00:13:08.100 --> 00:13:11.060
So it's Python 3, microWSGI, Pyramid, MongoDB


00:13:11.060 --> 00:13:13.340
on a $20 server.


00:13:13.340 --> 00:13:15.060
Would it get 12 requests per second?


00:13:15.060 --> 00:13:15.900
I don't know.


00:13:15.900 --> 00:13:22.300
I turned this thing loose and it'll do about 125 requests per second.


00:13:22.300 --> 00:13:25.900
I felt better than, that's better than 12, I felt pretty good.


00:13:25.900 --> 00:13:29.100
But one of the things that's cool about Locust is you can tell it,


00:13:29.100 --> 00:13:32.100
not just I want you to use this partitioning,


00:13:32.100 --> 00:13:37.500
but also I would like you to have a distribution of how often the user actually does something.


00:13:37.500 --> 00:13:42.100
So you can say, well, this user is going to make between every 10 to 60 seconds,


00:13:42.100 --> 00:13:45.300
it's going to do one of these things among this mix.


00:13:45.300 --> 00:13:51.260
So instead of just pounding it, it's like, well, an average user doesn't just hit F5 or control command R as hard as they can.


00:13:51.260 --> 00:13:54.100
They move around and they pause, right? So you can pause that.


00:13:54.100 --> 00:13:59.860
So I don't know, maybe it's 10 to 20,000 realistic users I was able to sort of map out with this.


00:13:59.860 --> 00:14:03.760
Anyway, it was just a fun deep dive into like, well, what does performance look like?


00:14:03.760 --> 00:14:07.100
How important is async? Some of the tools to do it?


00:14:07.100 --> 00:14:12.660
I don't know, if people are, if that's interesting people, definitely check out this 12 requests per second article here.


00:14:12.660 --> 00:14:14.780
I think you'll enjoy it.


00:14:14.780 --> 00:14:16.540
Then also check out Locus if you want to


00:14:16.540 --> 00:14:18.140
try to answer that question for yourself.


00:14:18.140 --> 00:14:21.820
>> I was curious how when you're testing your site,


00:14:21.820 --> 00:14:26.020
did anybody else experience downtime or something?


00:14:26.020 --> 00:14:28.500
>> No. Well, that's the question.


00:14:28.500 --> 00:14:32.420
With the Locus thing, you can start to see real-time,


00:14:32.420 --> 00:14:35.260
what the response times are and everything.


00:14:35.260 --> 00:14:36.460
It never crashed.


00:14:36.460 --> 00:14:37.820
It just got a little bit slow.


00:14:37.820 --> 00:14:40.140
I ran it locally and I'm like,


00:14:40.140 --> 00:14:42.420
well, what's it look like in production?


00:14:42.420 --> 00:14:44.540
I'm like, I really want to know,


00:14:44.540 --> 00:14:46.460
with all the way that everything's put together,


00:14:46.460 --> 00:14:47.660
what number will I get?


00:14:47.660 --> 00:14:49.180
So I'm like, I'm just gonna turn it loose on it,


00:14:49.180 --> 00:14:50.540
and if it starts to overwhelm it,


00:14:50.540 --> 00:14:51.980
I'll just hit the stop button.


00:14:51.980 --> 00:14:54.060
And it never died, it just got to where it took


00:14:54.060 --> 00:14:56.300
like three or 400 milliseconds to get back to me.


00:14:56.300 --> 00:14:57.180
So it was okay.


00:14:57.180 --> 00:14:58.100
- Okay, good.


00:14:58.100 --> 00:15:00.700
- Yeah, so pretty fun, pretty fun example there.


00:15:00.700 --> 00:15:01.820
- I think one other thing I appreciate


00:15:01.820 --> 00:15:03.100
about that blog post actually was


00:15:03.100 --> 00:15:05.060
they pointed out towards the end that


00:15:05.060 --> 00:15:07.580
at some point scaling is no longer a Python problem


00:15:07.580 --> 00:15:08.820
and it's an infrastructure problem.


00:15:08.820 --> 00:15:10.180
Like, oh, it's probably better


00:15:10.180 --> 00:15:11.700
to update your database and stuff.


00:15:11.700 --> 00:15:14.100
And I've heard this from a lot of people too,


00:15:14.100 --> 00:15:16.100
of there's kind of a misnomer


00:15:16.100 --> 00:15:17.700
if you're not in the Python community that,


00:15:17.700 --> 00:15:20.520
oh, Python's so slow, it's gonna be your bottleneck.


00:15:20.520 --> 00:15:22.140
And instead I've heard it from a lot of people


00:15:22.140 --> 00:15:23.780
in the community that, oh, actually it's not,


00:15:23.780 --> 00:15:26.520
I can get my work done in a third of a time,


00:15:26.520 --> 00:15:27.580
and then the two thirds of time


00:15:27.580 --> 00:15:29.060
it would have taken me to do it in,


00:15:29.060 --> 00:15:30.980
I don't know, Java, just choose a different language.


00:15:30.980 --> 00:15:32.780
I can optimize my infrastructure.


00:15:32.780 --> 00:15:33.620
And guess what?


00:15:33.620 --> 00:15:34.600
I end up with the same performance


00:15:34.600 --> 00:15:37.100
with more time to bug fix and test


00:15:37.100 --> 00:15:38.740
than I would have in the other platform.


00:15:38.740 --> 00:15:40.180
And the other thing is, is obviously,


00:15:40.180 --> 00:15:42.620
There is always throwing more hardware at the problem


00:15:42.620 --> 00:15:44.780
if you need a horizontally scale.


00:15:44.780 --> 00:15:47.620
But, and honestly, I think one nice thing


00:15:47.620 --> 00:15:50.140
this post also, I think, from a critical point out,


00:15:50.140 --> 00:15:52.340
not everyone needs 1,000 requests a second.


00:15:52.340 --> 00:15:53.380
- Yeah.


00:15:53.380 --> 00:15:54.340
Most people don't.


00:15:54.340 --> 00:15:57.980
Even popular websites are not doing 1,000.


00:15:57.980 --> 00:15:59.540
I mean, that's a lot of requests,


00:15:59.540 --> 00:16:01.520
1,000 requests a second. - That is a lot.


00:16:01.520 --> 00:16:03.580
Most people measure in queries per minute,


00:16:03.580 --> 00:16:05.060
not per second, right?


00:16:05.060 --> 00:16:09.940
So even 12 per second, we're still talking 720,


00:16:09.940 --> 00:16:11.800
my math is not finding me on the spot,


00:16:11.800 --> 00:16:15.020
request per minute, that's still a decent cliff.


00:16:15.020 --> 00:16:17.820
If you're running a business that's getting that much traffic


00:16:17.820 --> 00:16:19.180
every single minute, you're


00:16:19.180 --> 00:16:20.900
probably still doing pretty good for yourself.


00:16:20.900 --> 00:16:24.700
>> That's 32 million page views per month.


00:16:24.700 --> 00:16:26.620
You're at a limit where you've got


00:16:26.620 --> 00:16:28.460
some real stuff going on, some real infrastructure.


00:16:28.460 --> 00:16:32.260
>> Well, okay. But there's also if I've got services running,


00:16:32.260 --> 00:16:34.420
I've got a bunch of services that include this.


00:16:34.420 --> 00:16:38.300
I mean, one user interaction isn't one hit,


00:16:38.300 --> 00:16:40.220
It might be dozens.


00:16:40.220 --> 00:16:43.340
So yeah, so so my rule of thumb is honestly,


00:16:43.340 --> 00:16:45.860
don't worry unless you're going over 100 a second.


00:16:45.860 --> 00:16:48.540
Like you should be able to hit 100 a second without too much effort.


00:16:48.540 --> 00:16:50.380
And after that, you might have to start doing some planning.


00:16:50.380 --> 00:16:52.100
But I would suspect as your rule of thumb,


00:16:52.100 --> 00:16:55.900
you can you can handle hundreds without a whole lot of effort in Python.


00:16:55.900 --> 00:16:58.740
Yeah, if you get into 1000, you might have to do a bit more planning for it.


00:16:58.740 --> 00:17:01.540
But it's totally serviceable for that kind of thing.


00:17:01.540 --> 00:17:03.060
Yeah, totally agree.


00:17:03.060 --> 00:17:06.100
Magnus Carlsen has a quick comment.


00:17:06.100 --> 00:17:06.940
- All right, nice.


00:17:06.940 --> 00:17:11.100
So I can now see if my work turning my FastAPI app


00:17:11.100 --> 00:17:12.780
into async was worth it.


00:17:12.780 --> 00:17:13.980
Yes, you can.


00:17:13.980 --> 00:17:16.320
This is a very good use of that.


00:17:16.320 --> 00:17:17.300
- I'm gonna be biased and just say


00:17:17.300 --> 00:17:18.340
it was totally worth it, Magnus.


00:17:18.340 --> 00:17:19.540
You just don't know yet.


00:17:19.540 --> 00:17:21.220
(both laughing)


00:17:21.220 --> 00:17:23.940
- Because it's got the cool new design patterns, absolutely.


00:17:23.940 --> 00:17:24.780
- Exactly.


00:17:24.780 --> 00:17:26.100
- All right, Brett, you're up next.


00:17:26.100 --> 00:17:28.260
You've got something special for us.


00:17:28.260 --> 00:17:33.260
- Yeah, so the world exclusive, news-breaking thing is


00:17:34.980 --> 00:17:39.860
The Python launcher for Unix is probably at RC stage.


00:17:39.860 --> 00:17:41.620
For those of you who don't know about this,


00:17:41.620 --> 00:17:46.300
it's a project I've been working on since May of 2018.


00:17:46.300 --> 00:17:48.140
And if you're a Windows user, you probably


00:17:48.140 --> 00:17:49.260
know what I'm talking about.


00:17:49.260 --> 00:17:51.740
But on Windows, there is a little app


00:17:51.740 --> 00:17:54.260
called the Python launcher for Windows.


00:17:54.260 --> 00:17:55.460
And it chips with Python.


00:17:55.460 --> 00:17:57.020
And it gives you the py command.


00:17:57.020 --> 00:17:59.100
So sometimes you might see this on websites where they say,


00:17:59.100 --> 00:18:01.700
well, if you're on Windows, you run Python using py,


00:18:01.700 --> 00:18:02.620
and then the command.


00:18:02.620 --> 00:18:05.760
and other platforms just run with Python 3.


00:18:05.760 --> 00:18:10.540
And I decided that I kind of wanted this on Unix.


00:18:10.540 --> 00:18:12.700
I had had enough people complain to me


00:18:12.700 --> 00:18:14.820
about how it's difficult to get started


00:18:14.820 --> 00:18:16.780
where having the Windows instructions


00:18:16.780 --> 00:18:18.260
on how to run something was always different


00:18:18.260 --> 00:18:20.060
from the Unix version and all this.


00:18:20.060 --> 00:18:21.660
- Yes, that is really annoying,


00:18:21.660 --> 00:18:23.100
the very first thing you gotta do,


00:18:23.100 --> 00:18:24.920
like right at the start, like, oh, it's so easy,


00:18:24.920 --> 00:18:25.900
but there's these two ways,


00:18:25.900 --> 00:18:27.980
there's like this diversion, right?


00:18:27.980 --> 00:18:29.140
- Exactly.


00:18:29.140 --> 00:18:31.680
And I saw some benefit to the Python launcher


00:18:31.680 --> 00:18:36.320
because what it does on Windows is it serves kind of two key


00:18:36.320 --> 00:18:37.040
purposes.


00:18:37.040 --> 00:18:40.620
One is it kind of makes up for the lack of shebang support


00:18:40.620 --> 00:18:43.240
on Windows, because the launcher will actually


00:18:43.240 --> 00:18:44.880
look for a shebang line, figure out


00:18:44.880 --> 00:18:46.740
what version of Python is required,


00:18:46.740 --> 00:18:48.960
and then finds the right version of Python to run it.


00:18:48.960 --> 00:18:51.200
The other thing is it does away with the need


00:18:51.200 --> 00:18:54.640
of caring about what order you installed your Pythons in.


00:18:54.640 --> 00:18:57.000
Because like, for instance, on Unix, like Python 3,


00:18:57.000 --> 00:18:58.040
what does that point at?


00:18:58.040 --> 00:19:00.680
Well, what it points at is the last version of Python 3


00:19:00.680 --> 00:19:04.320
that you installed, not the newest version of Python.


00:19:04.320 --> 00:19:06.480
So if you installed 3.9 today,


00:19:06.480 --> 00:19:09.120
but then installed the 3.8 security release


00:19:09.120 --> 00:19:11.080
that I think happened yesterday,


00:19:11.080 --> 00:19:14.120
you will get 3.8 as your version for Python 3.


00:19:14.120 --> 00:19:17.240
So if you don't specify Python 3.9, you won't be running it.


00:19:17.240 --> 00:19:19.200
Like you have to either create your virtual environment


00:19:19.200 --> 00:19:21.160
and be using it that way or remember that.


00:19:21.160 --> 00:19:22.520
Python Launcher takes care of all that.


00:19:22.520 --> 00:19:24.160
It will automatically just figure out


00:19:24.160 --> 00:19:25.680
what versions you have installed


00:19:25.680 --> 00:19:28.280
and just automatically run the newest version.


00:19:28.280 --> 00:19:29.280
And so I really like that.


00:19:29.280 --> 00:19:32.480
So I decided to implement it in Rust,


00:19:32.480 --> 00:19:35.000
partially as a Rust project of decent size.


00:19:35.000 --> 00:19:37.120
And it's about 1,000 lines of Rust code.


00:19:37.120 --> 00:19:40.280
And also because I wanted it, because if this works out,


00:19:40.280 --> 00:19:43.320
hopefully some projects can stop listing two different ways


00:19:43.320 --> 00:19:44.880
to run things.


00:19:44.880 --> 00:19:47.560
So in the Unix version, it's a little different


00:19:47.560 --> 00:19:48.360
from the Windows version.


00:19:48.360 --> 00:19:50.280
And I'll ask for feedback from the two of you


00:19:50.280 --> 00:19:53.440
and anyone in the live stream if they want to provide it.


00:19:53.440 --> 00:19:55.240
First, it looks to see if a virtual environment's


00:19:55.240 --> 00:19:55.960
activated.


00:19:55.960 --> 00:19:58.240
So it looks for the virtual_env environment variable.


00:19:58.240 --> 00:19:59.840
if it's there, it just uses that.


00:19:59.840 --> 00:20:02.960
So automatically, this is a little shorter and easier


00:20:02.960 --> 00:20:04.280
if you have an activated virtual environment,


00:20:04.280 --> 00:20:06.840
it's just py now instead of having to type Python.


00:20:06.840 --> 00:20:08.120
The next one is if you--


00:20:08.120 --> 00:20:10.600
- You're here to save us from RSI already.


00:20:10.600 --> 00:20:11.440
(laughing)


00:20:11.440 --> 00:20:13.440
I'm kidding, but this is really interesting, keep going.


00:20:13.440 --> 00:20:15.040
- Yeah, one third of the typing.


00:20:15.040 --> 00:20:18.120
The other thing is if you create a virtual environment


00:20:18.120 --> 00:20:22.040
in a .venv directory,


00:20:22.040 --> 00:20:25.400
it will also automatically use that without activation.


00:20:25.400 --> 00:20:32.440
So once again, if you use the -- I personally think standard nomenclature, naming your virtual


00:20:32.440 --> 00:20:36.840
environments .venv, you don't have to activate them anymore. Activation is just a shorthand


00:20:36.840 --> 00:20:43.240
for the shell that honestly I typically just use to make Python do the right thing. I use


00:20:43.240 --> 00:20:48.600
-m for everything. This takes care of that entire step for me. I don't have to activate


00:20:48.600 --> 00:20:49.640
my environments anymore.


00:20:49.640 --> 00:20:50.840
>> Okay. That's super cool.


00:20:50.840 --> 00:20:54.680
>> After that, it does the shebang just like on Windows. Trying to figure out what the


00:20:54.680 --> 00:20:56.360
Bright Python might be for that.


00:20:56.360 --> 00:20:58.520
And then after that, it checks some environment variables.


00:20:58.520 --> 00:21:00.880
Like if you want to-- if you have 3.10 installed,


00:21:00.880 --> 00:21:02.840
for instance, for Python, you have an alpha installed.


00:21:02.840 --> 00:21:04.800
But you want to make sure that if you ever say,


00:21:04.800 --> 00:21:06.520
hey, if I say Python--


00:21:06.520 --> 00:21:08.280
if I run Py with no arguments or say,


00:21:08.280 --> 00:21:11.520
hey, I want to run a Python 3 version of Python,


00:21:11.520 --> 00:21:13.360
you can actually set the environment variables


00:21:13.360 --> 00:21:15.200
to restrict it and basically specify


00:21:15.200 --> 00:21:16.600
the exact version you want.


00:21:16.600 --> 00:21:18.960
And then after that, if none of that triggers,


00:21:18.960 --> 00:21:20.920
it just finds the newest version and runs that.


00:21:20.920 --> 00:21:23.400
I've been running this personally for a while.


00:21:23.400 --> 00:21:28.680
And when I added the .venv support, I've completely switched.


00:21:28.680 --> 00:21:32.600
I don't even bother typing Python anymore because this completely fits my workflow


00:21:32.600 --> 00:21:36.920
of just doing exactly what I think it should do whenever I need.


00:21:36.920 --> 00:21:39.960
Now, the question I have for the two of you and anyone in the audience who cares to answer


00:21:39.960 --> 00:21:44.680
is, do you think prioritizing virtual environments over shebangs makes sense?


00:21:44.680 --> 00:21:48.360
Now, my argument is yes, obviously, or else I wouldn't have done it this way.


00:21:48.360 --> 00:21:52.680
But this is, I don't know how much of this is a unixism versus just


00:21:52.680 --> 00:21:56.440
in general because I do hope to actually add Windows support to this as well and make this


00:21:56.440 --> 00:22:01.960
a universal Python launcher. So the reason I did it this way was on Unix you can just


00:22:01.960 --> 00:22:06.680
chmod a file and add the executable bit and that's how you can execute it. And honestly most of my


00:22:06.680 --> 00:22:10.520
files at this point are going to be in a virtual environment anyway whether installed via pipx


00:22:10.520 --> 00:22:16.360
or I create an entry point and I install that. So once again I don't need the shebang directly


00:22:16.360 --> 00:22:20.920
it's just going to be baked into the executable and Windows will do the exact same thing right


00:22:20.920 --> 00:22:22.800
Like set of tools will give you that little shim.


00:22:22.800 --> 00:22:26.000
So to me, if I am running in a project directory


00:22:26.000 --> 00:22:28.560
with a virtual environment, whether activated or not,


00:22:28.560 --> 00:22:30.500
I'm assuming that's what I want.


00:22:30.500 --> 00:22:32.720
Don't try to figure it out for me


00:22:32.720 --> 00:22:34.400
or else I'd be running this somewhere else


00:22:34.400 --> 00:22:36.400
and I would not have a virtual environment installed.


00:22:36.400 --> 00:22:37.560
Does that logic make sense?


00:22:37.560 --> 00:22:40.360
Do people, do you two think I made the right decision here


00:22:40.360 --> 00:22:42.420
in choosing virtual environments over shebang lines


00:22:42.420 --> 00:22:43.660
or am I crazy?


00:22:43.660 --> 00:22:45.960
- I forgot shebangs were even supported.


00:22:45.960 --> 00:22:48.700
- I'm all about virtual environments, yes.


00:22:48.700 --> 00:22:49.520
- Okay, cool.


00:22:49.520 --> 00:22:50.620
- I think this is fantastic.


00:22:50.620 --> 00:22:55.880
I've long wanted an easy way to just say I'm down inside.


00:22:55.880 --> 00:22:58.880
Maybe you can tell me if it works this way.


00:22:58.880 --> 00:23:01.880
Does it traverse up looking for a virtual environment?


00:23:01.880 --> 00:23:04.620
Like if I'm in a sub directory and I try to


00:23:04.620 --> 00:23:07.420
pie a file, but one directory up,


00:23:07.420 --> 00:23:08.340
there's a virtual environment.


00:23:08.340 --> 00:23:10.480
Will it go up and find that and then use it?


00:23:10.480 --> 00:23:12.020
>> No, I did not implement it that way.


00:23:12.020 --> 00:23:14.420
It would not be too difficult to do it that way.


00:23:14.420 --> 00:23:16.080
But for simplicity reasons,


00:23:16.080 --> 00:23:17.580
when I first plugged this in,


00:23:17.580 --> 00:23:21.740
For my purposes, I'm not an SRC guy like Brian is, for instance.


00:23:21.740 --> 00:23:23.580
So I don't need to worry about that as much.


00:23:23.580 --> 00:23:28.780
But that'd be totally reasonable feature request to ask for to be able to traverse


00:23:28.780 --> 00:23:31.260
up a directory is looking for the dot VNV directory.


00:23:31.260 --> 00:23:32.220
>> Yeah, very cool.


00:23:32.220 --> 00:23:36.700
>> I mean, I'm down a level of my SRC go up a level to find the actual.


00:23:36.700 --> 00:23:40.700
>> Right. Like I have a lot of things that will do like maintenance for my website.


00:23:40.700 --> 00:23:44.300
So I'll have like a bin folder as one of the subfolders of my website.


00:23:44.300 --> 00:23:45.900
Then I'll go in there and I want to run something.


00:23:45.900 --> 00:23:48.040
if I'm like, oh, I should have run and gone up


00:23:48.040 --> 00:23:49.160
and then been slash, right?


00:23:49.160 --> 00:23:50.080
I think it'd just be really cool.


00:23:50.080 --> 00:23:52.840
Like I'm sort of in the realm of this virtual environment,


00:23:52.840 --> 00:23:56.160
even if it's not at the same working directory.


00:23:56.160 --> 00:23:57.960
- Yeah, and one thing I do want to clarify here


00:23:57.960 --> 00:24:00.360
is this is very much about simplifying


00:24:00.360 --> 00:24:01.800
running Python manually.


00:24:01.800 --> 00:24:05.320
It is not meant to completely replace running Python, right?


00:24:05.320 --> 00:24:06.760
Like a misnomer I hear from people


00:24:06.760 --> 00:24:08.200
when I tell them about this is like,


00:24:08.200 --> 00:24:10.400
oh, hey, are you going to add a config file


00:24:10.400 --> 00:24:14.280
to be able to alias to PyPy versus specifically,


00:24:14.280 --> 00:24:15.840
or this thing or a framework builder?


00:24:15.840 --> 00:24:19.120
that thing is. And for me is if you have that kind of risk,


00:24:19.120 --> 00:24:22.920
specific requirement of a specific version of Python you have installed,


00:24:22.920 --> 00:24:26.800
just use the absolute paths of that version of Python. I don't think this is,


00:24:26.800 --> 00:24:30.880
this is purely for, I just want the newest version. I don't care what it is.


00:24:30.880 --> 00:24:32.920
Just give it to me. Or I have a virtual environment.


00:24:32.920 --> 00:24:35.680
Just give me the virtual environment. I don't want to have to think about it.


00:24:35.680 --> 00:24:38.960
If you have to put thought into what kind of Python you want to run,


00:24:38.960 --> 00:24:41.480
I think you should be specifying that manually, not be using this.


00:24:41.480 --> 00:24:45.120
Well, so on the, on the side of the,


00:24:45.320 --> 00:24:48.200
being able to go up a couple directories looking for virtual environments.


00:24:48.200 --> 00:24:50.260
I'm often not in the source directory.


00:24:50.260 --> 00:24:54.860
I'm often sitting in the tests directory running pytest on stuff, in which case,


00:24:54.860 --> 00:25:00.040
uh, I guess I already am in a virtual environment, so it doesn't matter, but I


00:25:00.040 --> 00:25:05.340
might just, open up another terminal and, and try to, and, you know,


00:25:05.340 --> 00:25:06.740
just, just run Python.


00:25:06.740 --> 00:25:07.700
So I like this.


00:25:07.700 --> 00:25:11.660
I'm excited to hear that this is eventually going to be a windows thing.


00:25:11.660 --> 00:25:15.200
Also, hopefully, I don't actually normally use the.


00:25:15.200 --> 00:25:17.380
The Python launcher on Windows,


00:25:17.380 --> 00:25:20.360
it doesn't do looking for virtual environments, does it?


00:25:20.360 --> 00:25:25.140
>> No, that is exclusive to the Unix version of this launcher.


00:25:25.140 --> 00:25:29.720
So basically, the environment variable it will use,


00:25:29.720 --> 00:25:31.120
it doesn't actually look on path,


00:25:31.120 --> 00:25:33.200
it completely uses the Windows registry.


00:25:33.200 --> 00:25:35.360
It does the shebang and that's it.


00:25:35.360 --> 00:25:38.200
So looking in the .venv folder,


00:25:38.200 --> 00:25:42.560
that is entirely my addition and the order of execution


00:25:42.560 --> 00:25:45.840
here is kind of tweaked to what I think.


00:25:45.840 --> 00:25:48.400
And it doesn't search on path actually.


00:25:48.400 --> 00:25:50.680
So that's a Unix thing specifically.


00:25:50.680 --> 00:25:53.200
But I suspect this actually helped with the Windows Store,


00:25:53.200 --> 00:25:55.160
although I think Steve Dower fixed that issue


00:25:55.160 --> 00:25:56.840
with the Windows Store install.


00:25:56.840 --> 00:25:59.320
But yeah, so there's slight tweaks.


00:25:59.320 --> 00:26:02.280
But I figure if I have a logic done already,


00:26:02.280 --> 00:26:04.200
there's no reason not to just make it universal


00:26:04.200 --> 00:26:06.840
to support multiple platforms, so why not?


00:26:06.840 --> 00:26:08.160
- Yeah.


00:26:08.160 --> 00:26:11.760
So your announcement here has kind of lit up the live stream.


00:26:11.760 --> 00:26:16.560
So ZDocs is just a Brett Cannon fan, which is awesome.


00:26:16.560 --> 00:26:20.920
Gendalfour asks, "Is the Rust version cross-platform?"


00:26:20.920 --> 00:26:23.320
Is there a chance of this on Windows?


00:26:23.320 --> 00:26:27.200
>> No, I've not tried it on Windows.


00:26:27.200 --> 00:26:29.440
It definitely works on Mac and Linux.


00:26:29.440 --> 00:26:31.880
So it truly is Unix-based,


00:26:31.880 --> 00:26:33.600
so it will handle that no problem.


00:26:33.600 --> 00:26:35.280
I've not tried to wire it up


00:26:35.280 --> 00:26:37.800
into the registry at all, so that's not there.


00:26:37.800 --> 00:26:40.800
I have an open enhancement issue to do that.


00:26:40.800 --> 00:26:42.240
I honestly don't know what would happen


00:26:42.240 --> 00:26:43.440
if you tried running on some Windows.


00:26:43.440 --> 00:26:45.080
I haven't tried.


00:26:45.080 --> 00:26:47.840
Everything's very hard-coded to Unix at the moment


00:26:47.840 --> 00:26:48.920
just to get this done.


00:26:48.920 --> 00:26:50.240
If you look at the readme, you'll


00:26:50.240 --> 00:26:53.000
notice everything is slash bin.


00:26:53.000 --> 00:26:54.960
It's like for virtual mines.


00:26:54.960 --> 00:26:58.600
There's no scripts support here.


00:26:58.600 --> 00:27:00.080
If slash one, I do Windows support.


00:27:00.080 --> 00:27:01.240
Obviously, I'll look at fix.


00:27:01.240 --> 00:27:03.240
But I have tried putting zero effort.


00:27:03.240 --> 00:27:04.920
Because the Python launcher for Windows


00:27:04.920 --> 00:27:07.080
just comes with the install from python.org, right?


00:27:07.080 --> 00:27:08.800
So there was no real time pressure


00:27:08.800 --> 00:27:09.920
to try to get that done.


00:27:09.920 --> 00:27:11.320
So I haven't tried it.


00:27:11.320 --> 00:27:12.160
- I'm a big fan.


00:27:12.160 --> 00:27:14.840
I could try this on my macOS and I'd be happy now.


00:27:14.840 --> 00:27:16.140
- Yeah, this is how I do it.


00:27:16.140 --> 00:27:16.980
I have it on my Mac.


00:27:16.980 --> 00:27:17.800
I just install,


00:27:17.800 --> 00:27:19.680
you do have to install Rust to install it right now


00:27:19.680 --> 00:27:21.160
'cause I haven't figured out how to do


00:27:21.160 --> 00:27:24.680
distributable binaries that you can just download.


00:27:24.680 --> 00:27:26.860
But yeah, if you have Rust installed,


00:27:26.860 --> 00:27:29.160
which you can get through RustUp or Humber or whatever,


00:27:29.160 --> 00:27:30.600
it's just a cargo install away.


00:27:30.600 --> 00:27:32.560
So if you wanna give it a shot, please do so.


00:27:32.560 --> 00:27:33.400
- Fantastic.


00:27:33.400 --> 00:27:34.220
And then--


00:27:34.220 --> 00:27:36.920
- I kind of forgot that my Mac was Unix-C.


00:27:36.920 --> 00:27:38.680
(laughing)


00:27:38.680 --> 00:27:41.840
- That's right, and Magnus agrees on the VMV over Shebang.


00:27:41.840 --> 00:27:42.680
- Awesome.


00:27:42.680 --> 00:27:44.440
- And GandalfForce is same as well.


00:27:44.440 --> 00:27:45.920
I don't think I've ever seen a Shebang


00:27:45.920 --> 00:27:48.880
that was more specific than user bin Python 3 anyway.


00:27:48.880 --> 00:27:50.920
- Yeah, and I actually suspect the Shebang support


00:27:50.920 --> 00:27:53.780
was partially because the Python launch has been around


00:27:53.780 --> 00:27:55.240
back in Python 2 days, right,


00:27:55.240 --> 00:27:56.520
where that was much more of a concern.


00:27:56.520 --> 00:27:59.080
So like, as I said, I started this in 2018,


00:27:59.080 --> 00:28:02.120
so it was pre-Python 2 deprecation.


00:28:02.120 --> 00:28:03.800
So it's still supported there,


00:28:03.800 --> 00:28:05.840
but a lot of this I think was also partially


00:28:05.840 --> 00:28:07.440
to support the 2 to 3 transition.


00:28:07.440 --> 00:28:09.200
So those little extras here I don't


00:28:09.200 --> 00:28:12.720
think are quite as important, unless Python 4 happens


00:28:12.720 --> 00:28:14.560
someday, which there are zero plans for.


00:28:14.560 --> 00:28:15.400
So I don't think so.


00:28:15.400 --> 00:28:17.680
>>Yeah, don't hold your breath.


00:28:17.680 --> 00:28:20.920
>>By the way, one extra nicety I want to tell people


00:28:20.920 --> 00:28:25.760
is if you're a Starship user, the Starship cross shell


00:28:25.760 --> 00:28:29.080
prompt, there is a setting in Starship


00:28:29.080 --> 00:28:30.880
that lets you specify how it figures out


00:28:30.880 --> 00:28:32.240
what version of Python you have.


00:28:32.240 --> 00:28:33.920
Now, it does look for virtualenv,


00:28:33.920 --> 00:28:35.840
but otherwise it has a list of binaries


00:28:35.840 --> 00:28:37.400
that it will execute to try to figure out


00:28:37.400 --> 00:28:39.240
what version of Python you have.


00:28:39.240 --> 00:28:41.680
If you set it to Pi using this,


00:28:41.680 --> 00:28:43.080
it will always tell you either


00:28:43.080 --> 00:28:45.620
what the virtual environments Python version is


00:28:45.620 --> 00:28:47.680
in the prompt or whatever the newest version


00:28:47.680 --> 00:28:49.120
of Python is installed.


00:28:49.120 --> 00:28:50.500
So it has a really nice side effect


00:28:50.500 --> 00:28:52.620
because if you read the docs in Starship,


00:28:52.620 --> 00:28:53.880
there's a big tip saying,


00:28:53.880 --> 00:28:56.560
hey, if you have a Python installed that's default,


00:28:56.560 --> 00:28:59.240
i.e. macOS, and it'll always say 2.7


00:28:59.240 --> 00:29:01.160
unless you happen to have an activated virtual environment,


00:29:01.160 --> 00:29:02.600
which always threw me 'cause it's like,


00:29:02.600 --> 00:29:04.440
no, I'm not using 2.7 in this project.


00:29:04.440 --> 00:29:07.400
As soon as I added this support for .venv files


00:29:07.400 --> 00:29:09.300
and tweaked my Starship config for this,


00:29:09.300 --> 00:29:10.960
it always tells me the exact version


00:29:10.960 --> 00:29:14.640
that I happen to have set up for my virtual environment.


00:29:14.640 --> 00:29:15.560
It's really handy.


00:29:15.560 --> 00:29:18.220
- For those of us not in the know, what's Starship?


00:29:18.220 --> 00:29:22.920
- So Starship is a cross-platform shell prompt tool.


00:29:22.920 --> 00:29:25.560
So it's written in Rust, but basically what you do


00:29:25.560 --> 00:29:28.680
is it has instructions for Bash and Zesh and Phish


00:29:28.680 --> 00:29:30.440
and PowerShell and everything else.


00:29:30.440 --> 00:29:32.400
And basically it just gives you a line.


00:29:34.000 --> 00:29:36.760
Brian's got it pulled up on the screen for those on the live.


00:29:36.760 --> 00:29:38.680
And it's basically just an easy way to just say,


00:29:38.680 --> 00:29:40.560
hey, this is how I want my prompt to look.


00:29:40.560 --> 00:29:43.680
Don't worry about whether it being Bash or Zeesh or Phish,


00:29:43.680 --> 00:29:44.200
whatever.


00:29:44.200 --> 00:29:45.280
I'm a Phish user.


00:29:45.280 --> 00:29:47.800
I'm sure Michael's probably a Zeesh user being a macOS


00:29:47.800 --> 00:29:48.520
user like he is.


00:29:48.520 --> 00:29:49.720
Yep.


00:29:49.720 --> 00:29:50.800
But it shouldn't matter.


00:29:50.800 --> 00:29:52.240
My prompt is a prompt.


00:29:52.240 --> 00:29:55.400
And pretty much, they have pretty consistent user support.


00:29:55.400 --> 00:29:57.840
So I just said, yeah, you know what?


00:29:57.840 --> 00:30:00.240
I like some of the niceties it has automatically baked in.


00:30:00.240 --> 00:30:03.040
It does notification-- it changed the prompt


00:30:03.040 --> 00:30:06.280
for the usual, oh, I edited my git checkout.


00:30:06.280 --> 00:30:07.500
It'll tell you what branch you're on,


00:30:07.500 --> 00:30:09.420
all these little nice things.


00:30:09.420 --> 00:30:11.320
And setting Fira code as my font


00:30:11.320 --> 00:30:13.180
gives me all the nice little glyphs I want.


00:30:13.180 --> 00:30:15.120
And so I said, nice, all right, cool.


00:30:15.120 --> 00:30:17.720
It'll tell me what version of Python's currently activated,


00:30:17.720 --> 00:30:20.400
except for that annoyance of being on Mac,


00:30:20.400 --> 00:30:23.000
it kept saying, oh, you've got 2.7 until I activate it.


00:30:23.000 --> 00:30:24.380
And I was like, no, I don't like this.


00:30:24.380 --> 00:30:26.960
So I prioritized getting the .vnv done,


00:30:26.960 --> 00:30:29.400
and then lo and behold, it magically now tells me


00:30:29.400 --> 00:30:30.760
exactly what I want for Python.


00:30:30.760 --> 00:30:31.600
- Nice.


00:30:31.600 --> 00:30:32.420
- Wow, that's super cool.


00:30:32.420 --> 00:30:35.060
Now we know, Starship, fantastic.


00:30:35.060 --> 00:30:37.700
>> Yeah. Before we move on,


00:30:37.700 --> 00:30:39.860
I'd like to thank our sponsor.


00:30:39.860 --> 00:30:43.240
This episode of Python Bytes is brought to you by Datadog.


00:30:43.240 --> 00:30:45.340
Are you having trouble visualizing latency,


00:30:45.340 --> 00:30:48.060
CPU, and memory bottlenecks in your apps,


00:30:48.060 --> 00:30:51.480
and not sure where the issue is coming from or how to solve it?


00:30:51.480 --> 00:30:54.660
Datadog seamlessly correlates logs and


00:30:54.660 --> 00:30:57.020
traces at the level of individual requests,


00:30:57.020 --> 00:30:59.940
allowing you to quickly troubleshoot your Python application.


00:30:59.940 --> 00:31:05.140
Plus their continuous profiler allows you to find most resource consuming parts


00:31:05.140 --> 00:31:10.040
in your production code all the time at any scale with minimal overhead.


00:31:10.040 --> 00:31:13.840
Be the hero that got your app back on track at your company.


00:31:13.840 --> 00:31:18.540
Get started today with a free trial at pythonbytes.fm/datadog


00:31:18.540 --> 00:31:22.100
or just click the link in your podcast player show notes.


00:31:22.100 --> 00:31:22.940
Ooh, that's neat.


00:31:22.940 --> 00:31:24.540
Yeah, very cool. Thanks, Datadog.


00:31:24.540 --> 00:31:28.340
So, Brett, I want to take you down a little bit lower.


00:31:28.340 --> 00:31:29.860
or if it's turtles all the way down,


00:31:29.860 --> 00:31:32.820
a few turtles down to this whole Tui world,


00:31:32.820 --> 00:31:34.060
and talk about this thing called


00:31:34.060 --> 00:31:37.420
build a text editor with Python and curses.


00:31:37.420 --> 00:31:40.020
Is curses, is that what you do when you get upset


00:31:40.020 --> 00:31:41.480
because it's too low level or,


00:31:41.480 --> 00:31:43.820
oh no, it's about the curses, sorry, okay.


00:31:43.820 --> 00:31:45.740
- Gotta remember I'm on the Python Bytes podcast.


00:31:45.740 --> 00:31:47.420
There are gonna be jokes like that.


00:31:47.420 --> 00:31:49.420
- They're gonna be bad too, by the way.


00:31:49.420 --> 00:31:53.680
So, now here's a really cool article by Waseem Lorgat


00:31:53.680 --> 00:31:58.100
about basically walking you through building a text editor


00:31:58.100 --> 00:32:00.980
like Vim or Emacs in the terminal using Curses,


00:32:00.980 --> 00:32:03.140
which is a library that lets you control


00:32:03.140 --> 00:32:04.480
what happens on the screen much better


00:32:04.480 --> 00:32:07.460
than like Print and Log and Warn and whatnot.


00:32:07.460 --> 00:32:09.620
So there's a couple of just interesting things.


00:32:09.620 --> 00:32:11.220
I thought going through this might just give people


00:32:11.220 --> 00:32:13.220
a sense of like what it's like to work with Curses.


00:32:13.220 --> 00:32:15.620
And then there's this context of this text editor


00:32:15.620 --> 00:32:16.460
you can play with.


00:32:16.460 --> 00:32:18.860
So for example, a minimal Curses app,


00:32:18.860 --> 00:32:20.860
all you gotta do is define a function.


00:32:20.860 --> 00:32:21.900
That's your main function.


00:32:21.900 --> 00:32:25.300
And then while true, go to the screen and get the key.


00:32:25.300 --> 00:32:26.380
And that's it, you just say get key


00:32:26.380 --> 00:32:28.780
and it just gives you whatever it gets pressed.


00:32:28.780 --> 00:32:30.380
Without any help here,


00:32:30.380 --> 00:32:32.620
there's probably not a way to get out of it.


00:32:32.620 --> 00:32:34.340
No, maybe Control + C,


00:32:34.340 --> 00:32:36.440
but yeah, there's not like a quit or anything.


00:32:36.440 --> 00:32:39.780
So you can really easily add like some tests and say,


00:32:39.780 --> 00:32:41.980
"Well, if they gave me the key, you know,


00:32:41.980 --> 00:32:43.780
"escape, then show the little colon."


00:32:43.780 --> 00:32:46.820
You can WQ exclamation mark, whatever, to get out of it.


00:32:46.820 --> 00:32:50.140
However you wanna exit your text editor


00:32:50.140 --> 00:32:50.980
that you're building.


00:32:50.980 --> 00:32:53.300
And then they talk about how to show stuff on the screen.


00:32:53.300 --> 00:32:55.260
So if you wanna just add a line,


00:32:55.260 --> 00:32:58.580
you can say at this XY screen, you know,


00:32:58.580 --> 00:33:02.820
cursor location, just write this line of text on the screen


00:33:02.820 --> 00:33:04.260
and it'll add that.


00:33:04.260 --> 00:33:06.620
So really easy and one of the things they do


00:33:06.620 --> 00:33:09.640
is they pass over the file name and it's kind of meta,


00:33:09.640 --> 00:33:12.800
like they edit the file that is the demo for the editor


00:33:12.800 --> 00:33:14.180
with the editor as they're building it,


00:33:14.180 --> 00:33:15.500
which is always fun to do.


00:33:15.500 --> 00:33:17.980
So you can do that.


00:33:17.980 --> 00:33:20.860
But then through this article,


00:33:20.860 --> 00:33:22.980
they go through and they build out like a window class


00:33:22.980 --> 00:33:24.820
that talks about how big is the screen,


00:33:24.820 --> 00:33:26.160
this is what Brett was talking about,


00:33:26.160 --> 00:33:28.400
like, ah, I gotta figure out what my screen looks like


00:33:28.400 --> 00:33:30.000
and all that stuff, and also a cursor


00:33:30.000 --> 00:33:31.600
where you are on the screen,


00:33:31.600 --> 00:33:34.820
how to have a view into the file


00:33:34.820 --> 00:33:37.280
because you might have moved to the right a little bit


00:33:37.280 --> 00:33:38.820
and the file might be a thousand lines,


00:33:38.820 --> 00:33:41.680
but you've only got a 40 on your screen or whatever.


00:33:41.680 --> 00:33:43.480
So anyway, if this is interesting to you,


00:33:43.480 --> 00:33:45.680
I think you should go through this article and check it out.


00:33:45.680 --> 00:33:47.680
In the end, you end up with a pretty simple


00:33:47.680 --> 00:33:50.880
but non-trivial little text editor that lets you do stuff.


00:33:50.880 --> 00:33:52.280
So I think it's pretty neat.


00:33:52.280 --> 00:33:53.120
What do you guys think?


00:33:53.120 --> 00:33:56.120
This shows me why I really hope will grants Brian's wish


00:33:56.120 --> 00:33:59.120
of making Rich a full TY library.


00:33:59.120 --> 00:34:00.320
- Yeah, I do agree.


00:34:00.320 --> 00:34:02.520
I think if Rich, if something like that


00:34:02.520 --> 00:34:04.920
that has a really beautiful display technology,


00:34:04.920 --> 00:34:07.200
but also has input, like this is cool


00:34:07.200 --> 00:34:09.760
'cause it has really great way to accept user input


00:34:09.760 --> 00:34:12.360
and like update the screen, but it's very low level.


00:34:12.360 --> 00:34:15.240
It's like, I don't know, it's OpenGL versus Pi game


00:34:15.240 --> 00:34:18.400
or arcade, or you're like at the level of,


00:34:18.400 --> 00:34:21.080
here's what I put at this cursor, this XY coordinate,


00:34:21.080 --> 00:34:22.040
let's put that there.


00:34:22.040 --> 00:34:24.220
Yeah, I think it's a great showing of actually


00:34:24.220 --> 00:34:26.140
how much work it actually needs to go


00:34:26.140 --> 00:34:29.200
into making those full text-based UIs that you see,


00:34:29.200 --> 00:34:31.240
like you used to see at the grocery store.


00:34:31.240 --> 00:34:32.260
And those screeners you probably still


00:34:32.260 --> 00:34:34.160
do at some of your grocery stores on that screen.


00:34:34.160 --> 00:34:36.500
And just like-- or when they book your airline ticket,


00:34:36.500 --> 00:34:38.360
and you're like, oh my god, what the hell are you using?


00:34:38.360 --> 00:34:40.200
You do this all day?


00:34:40.200 --> 00:34:40.960
Yeah, exactly.


00:34:40.960 --> 00:34:43.080
It takes a lot of work to make those things happen.


00:34:43.080 --> 00:34:45.180
It's surprising how much work it is,


00:34:45.180 --> 00:34:49.520
and hence why getting higher level libraries like--


00:34:49.520 --> 00:34:50.860
I think it was the Prompt Toolkit


00:34:50.860 --> 00:34:52.720
we were told about earlier and rich and all that


00:34:52.720 --> 00:34:55.600
would be very welcome in existing.


00:34:55.600 --> 00:34:56.680
- Yeah, absolutely.


00:34:56.680 --> 00:34:58.140
Do either of you guys know if there's any


00:34:58.140 --> 00:35:00.200
cursors libraries for Windows?


00:35:00.200 --> 00:35:02.520
Magnus is asking, that's why he's used


00:35:02.520 --> 00:35:05.360
Prompt Toolkit before, but I'm not sure actually.


00:35:05.360 --> 00:35:06.340
- Neither am I.


00:35:06.340 --> 00:35:07.920
- Yeah, yeah, cool, cool.


00:35:07.920 --> 00:35:10.040
All right, what's the next one?


00:35:10.040 --> 00:35:11.920
Brian, you got the next one, right?


00:35:11.920 --> 00:35:14.760
- Actually, I skipped, so Brett's next.


00:35:14.760 --> 00:35:16.360
- All right, Brett's next, and I'll pull up Brett's thing.


00:35:16.360 --> 00:35:17.380
All right, Brett.


00:35:17.380 --> 00:35:18.220
- Okay.


00:35:18.220 --> 00:35:22.140
- There's been a major language feature announced


00:35:22.140 --> 00:35:23.560
that is coming in 3.10, right?


00:35:23.560 --> 00:35:26.980
- Yes, which actually was in your quick links


00:35:26.980 --> 00:35:28.940
at the end of episode 220,


00:35:28.940 --> 00:35:33.140
which Brian called the five-barrel foot gun,


00:35:33.140 --> 00:35:34.440
which is pattern matching.


00:35:34.440 --> 00:35:38.020
So one of the things that always happens


00:35:38.020 --> 00:35:41.180
whenever there's a new Python feature that gets announced,


00:35:41.180 --> 00:35:42.620
and especially one of this size


00:35:42.620 --> 00:35:44.540
that gets out into the general community,


00:35:44.540 --> 00:35:47.640
is some interesting feelings from people.


00:35:47.640 --> 00:35:51.840
And so this is kind of slash--


00:35:51.840 --> 00:35:54.060
I don't want to say rant, but little-- just me


00:35:54.060 --> 00:35:55.720
as a steering council member just trying


00:35:55.720 --> 00:35:59.840
to explain how this all came about, where we're coming from


00:35:59.840 --> 00:36:01.640
as a steering council in general.


00:36:01.640 --> 00:36:03.600
I mean, obviously I'm speaking for me directly,


00:36:03.600 --> 00:36:06.280
but in general, I think how the steering council kind of


00:36:06.280 --> 00:36:06.780
thought.


00:36:06.780 --> 00:36:09.080
But also just kind of helping put all this in perspective,


00:36:09.080 --> 00:36:10.580
because I think for a lot of people,


00:36:10.580 --> 00:36:12.800
this might be the first big feature that they've seen,


00:36:12.800 --> 00:36:15.600
because we used to do this all the time in Python, too.


00:36:15.600 --> 00:36:18.100
but things kind of slowed down for Python 3.


00:36:18.100 --> 00:36:20.460
So as I said, I've seen around the internet


00:36:20.460 --> 00:36:22.780
a lot of people ranging from, oh, this looks really cool,


00:36:22.780 --> 00:36:24.060
I can't wait till I can use it,


00:36:24.060 --> 00:36:25.900
to people screaming bloody murder


00:36:25.900 --> 00:36:27.500
that we're killing Python and oh my God,


00:36:27.500 --> 00:36:29.760
it's the death knell of the language.


00:36:29.760 --> 00:36:30.600
I've been doing this for 17 years.


00:36:30.600 --> 00:36:32.780
- Is that stressful for you?


00:36:32.780 --> 00:36:34.140
'Cause it used to be?


00:36:34.140 --> 00:36:37.620
- It used to be stressful, now it's just frustrating.


00:36:37.620 --> 00:36:41.140
So for instance, I gave a talk at PyCon US 2018,


00:36:41.140 --> 00:36:42.100
it was one of the keynotes,


00:36:42.100 --> 00:36:43.860
about participating in open source.


00:36:43.860 --> 00:36:47.740
And one of the key things I said in it was people just need to try to be kind to each


00:36:47.740 --> 00:36:48.740
other.


00:36:48.740 --> 00:36:53.780
It's it's kind of a very generic thing I know but it really makes a difference as a project


00:36:53.780 --> 00:36:58.380
maintainer myself right like having people tell me what they think I need to be doing


00:36:58.380 --> 00:37:01.900
or what I should be doing is really frustrating right.


00:37:01.900 --> 00:37:06.140
Like I put my personal time and effort into helping make this happen.


00:37:06.140 --> 00:37:09.900
And the way you respond to that is tell me what I should be doing.


00:37:09.900 --> 00:37:16.900
I can only imagine people who are parents having other people tell them how they should be raising their children.


00:37:16.900 --> 00:37:20.900
It's worse than helicopter parents. It's like helicopter backseat parenting.


00:37:20.900 --> 00:37:26.900
Exactly. And it's kind of the equivalent for open source maintainers. People doing the backseat,


00:37:26.900 --> 00:37:32.900
"Oh, here's what you really should be doing with your free time, with what little time you have left on this planet."


00:37:32.900 --> 00:37:33.740
>> Yeah.


00:37:33.740 --> 00:37:37.660
>> So it used to get really upsetting,


00:37:37.660 --> 00:37:39.360
and now I'm just frustrated and


00:37:39.360 --> 00:37:41.520
just disappointed that this still happens.


00:37:41.520 --> 00:37:44.540
It's also a little weird too because in Python,


00:37:44.540 --> 00:37:46.240
we have tens of millions of people


00:37:46.240 --> 00:37:47.480
using language at this point.


00:37:47.480 --> 00:37:50.200
It's immeasurable. It's just cute.


00:37:50.200 --> 00:37:52.120
Which means even if you


00:37:52.120 --> 00:37:54.800
assume one out of a thousand people are jerks,


00:37:54.800 --> 00:37:57.840
0.1 percent, let's do 0.01 percent.


00:37:57.840 --> 00:38:00.920
We're still talking tens of thousands of people out there who


00:38:00.920 --> 00:38:03.800
basically know my face, name, and address,


00:38:03.800 --> 00:38:06.440
and feel totally fine sending me mail on occasion,


00:38:06.440 --> 00:38:09.000
or just posting out in the comments outside


00:38:09.000 --> 00:38:11.080
where we all congregate about what they think


00:38:11.080 --> 00:38:13.240
I should be doing with my life.


00:38:13.240 --> 00:38:15.260
So it's one of these things where,


00:38:15.260 --> 00:38:18.800
it's just frustrating.


00:38:18.800 --> 00:38:20.200
- I don't know how a lot of people feel about it, sorry,


00:38:20.200 --> 00:38:23.680
but I think when you hear those negative things said to you,


00:38:23.680 --> 00:38:25.680
even if a thousand people are appreciative,


00:38:25.680 --> 00:38:28.760
the one negative thing you get feels so much,


00:38:28.760 --> 00:38:30.840
it makes such a bigger, a disproportionate--


00:38:30.840 --> 00:38:31.680
- At least.


00:38:31.680 --> 00:38:32.520
- At least.


00:38:32.520 --> 00:38:33.340
- At least.


00:38:33.340 --> 00:38:35.740
And the problem is it's not relative numbers,


00:38:35.740 --> 00:38:37.000
it's absolute numbers.


00:38:37.000 --> 00:38:38.540
And at the scale that we're at with Python,


00:38:38.540 --> 00:38:40.920
the absolute number of people who just don't,


00:38:40.920 --> 00:38:43.080
haven't quite either, just, I mean,


00:38:43.080 --> 00:38:44.560
honestly some people are just totally ignorant


00:38:44.560 --> 00:38:45.760
that they are speaking this way


00:38:45.760 --> 00:38:47.120
and that they don't really realize


00:38:47.120 --> 00:38:48.580
the way they're phrasing things matters,


00:38:48.580 --> 00:38:50.320
or even that the way they're phrasing it


00:38:50.320 --> 00:38:51.160
comes off that way.


00:38:51.160 --> 00:38:52.560
Like not everyone who says should


00:38:52.560 --> 00:38:54.200
really means for it to come off that way.


00:38:54.200 --> 00:38:57.480
Thank you, Dean, I appreciate the awesomeness call out.


00:38:58.880 --> 00:39:02.280
But it's one of these things where I have to bring this up


00:39:02.280 --> 00:39:03.160
every couple of years.


00:39:03.160 --> 00:39:04.640
And then I usually end up doing a blog post,


00:39:04.640 --> 00:39:06.640
which honestly, this is kind of a rough draft


00:39:06.640 --> 00:39:07.460
of the blog post.


00:39:07.460 --> 00:39:08.920
I'm just talking out loud with all of you.


00:39:08.920 --> 00:39:10.200
- Yeah, yeah.


00:39:10.200 --> 00:39:13.400
- And bouncing ideas off all of you for the feedback.


00:39:13.400 --> 00:39:15.560
But it's just, it gets a little exhausting


00:39:15.560 --> 00:39:16.880
that this is something I have to bring up


00:39:16.880 --> 00:39:17.900
every couple of years.


00:39:17.900 --> 00:39:20.340
You'd hope that we'd all learn this by now.


00:39:20.340 --> 00:39:22.360
It's not like open source is a newfangled thing


00:39:22.360 --> 00:39:23.520
we've all just discovered.


00:39:23.520 --> 00:39:27.040
But there's still this disconnect between the consumer


00:39:27.040 --> 00:39:33.840
/users/takers of open source versus the maintainer/producer/givers of the community.


00:39:33.840 --> 00:39:38.100
And the disconnect of how to just communicate with each other is still there.


00:39:38.100 --> 00:39:41.840
And so specifically when it comes to this stuff with Python, right, is people go like,


00:39:41.840 --> 00:39:44.040
"Oh my God, this is crazy."


00:39:44.040 --> 00:39:45.680
And it's like, "No, it's not.


00:39:45.680 --> 00:39:47.780
I've been doing this for 17 years.


00:39:47.780 --> 00:39:49.800
Everything is controversial when it comes to syntax."


00:39:49.800 --> 00:39:52.120
True and false were controversial, right?


00:39:52.120 --> 00:39:53.120
Like true and false.


00:39:53.120 --> 00:39:56.960
There were arguments on Python Dev on whether or not we should add those keywords because


00:39:56.960 --> 00:40:01.760
they would break code that chose to define those constants as 1 and 0.


00:40:01.760 --> 00:40:04.080
>> Is that why it's capital T?


00:40:04.080 --> 00:40:05.680
>> Well, it's also because they're singletons,


00:40:05.680 --> 00:40:07.800
and that's just the practice we follow with none.


00:40:07.800 --> 00:40:09.720
So that was really where it tied in.


00:40:09.720 --> 00:40:14.480
I mean, it definitely helps that capital T lowered the chances of it being false.


00:40:14.480 --> 00:40:15.800
>> Yeah, exactly. It's less likely.


00:40:15.800 --> 00:40:17.520
>> But that was an actual discussion we had,


00:40:17.520 --> 00:40:20.320
was do we want to add Booleans to the language?


00:40:20.320 --> 00:40:23.520
Now today, everyone scoffs at that and laughs.


00:40:23.520 --> 00:40:25.720
Are you kidding me? Booleans, really?


00:40:25.720 --> 00:40:30.440
everything in the language gets debated. And in this too, right? Like everyone's going like,


00:40:30.440 --> 00:40:35.800
"Oh my God, what are you doing?" Do you understand the timeline of this? Guido brought this up,


00:40:35.800 --> 00:40:42.760
I think in July, maybe? And as one pep, got a massive amount of feedback on Python Dev on this,


00:40:42.760 --> 00:40:48.920
went back with his coauthors, broke it up into three peps, 634, 635, and 636, so that there was


00:40:48.920 --> 00:40:52.920
a pep about the design, a pep about the rationale behind the design, and a pep that acts as a


00:40:52.920 --> 00:40:58.920
tutorial to try to make it more easy to consume. Brought that out in October. We discussed it on


00:40:58.920 --> 00:41:03.320
Steering Council 2020. We made a recommendation that probably the next one should accept it,


00:41:03.320 --> 00:41:07.480
but we still didn't feel we had enough time to accept such a large thing. Fast forward now to


00:41:07.480 --> 00:41:11.320
today where Steering Council 2021 had a chance to sit down and look at the recommendation and


00:41:11.320 --> 00:41:16.840
the PEPs and have a discussion, including calling Guido in personally at least two times to talk


00:41:16.840 --> 00:41:20.200
directly to the Steering Council to help us understand where he was coming from. Like,


00:41:20.200 --> 00:41:21.680
Like this was not a snap decision,


00:41:21.680 --> 00:41:23.200
but everyone acts like it was.


00:41:23.200 --> 00:41:24.040
Like this is literally taking over.


00:41:24.040 --> 00:41:25.920
- Because it finally appears on their radar


00:41:25.920 --> 00:41:27.360
and they're like, oh, where'd this come from?


00:41:27.360 --> 00:41:29.360
- Exactly, oh, it's like on Hacker News today,


00:41:29.360 --> 00:41:30.180
suddenly it happened.


00:41:30.180 --> 00:41:31.360
Like no, no, no, this has been happening,


00:41:31.360 --> 00:41:33.320
this has been in discussion actively


00:41:33.320 --> 00:41:35.360
in public for six months.


00:41:35.360 --> 00:41:37.480
I first heard Guido talking with someone


00:41:37.480 --> 00:41:39.400
at a language summit in 2018


00:41:39.400 --> 00:41:40.960
about the idea of pattern matching.


00:41:40.960 --> 00:41:42.560
Like this has been on people's radar


00:41:42.560 --> 00:41:44.880
as something people have wanted for that long.


00:41:44.880 --> 00:41:46.680
And I'll fully admit, I wanted it.


00:41:46.680 --> 00:41:49.080
Pattern matching is something I've wanted for a long time.


00:41:49.080 --> 00:41:51.160
But it's just one of these things, once again,


00:41:51.160 --> 00:41:53.600
people just don't stop and think about the time and effort


00:41:53.600 --> 00:41:55.320
that go into all this behind the scenes.


00:41:55.320 --> 00:41:58.460
It's just, in my worldview, this just happened,


00:41:58.460 --> 00:42:00.320
versus, oh, there's probably stuff that happened


00:42:00.320 --> 00:42:02.220
that I'm just not aware of.


00:42:02.220 --> 00:42:03.600
And specifically about this,


00:42:03.600 --> 00:42:05.480
one thing I always notice about this


00:42:05.480 --> 00:42:06.880
is people need to understand


00:42:06.880 --> 00:42:08.200
the way the language is designed, right?


00:42:08.200 --> 00:42:10.880
Like, we aim to increase your productivity.


00:42:10.880 --> 00:42:12.800
Now, that means different things to different people,


00:42:12.800 --> 00:42:14.200
but in general, it means keeping a language


00:42:14.200 --> 00:42:15.420
that's easy to understand


00:42:15.420 --> 00:42:17.380
and small enough to have in your head,


00:42:17.380 --> 00:42:19.980
but also leads to you being more productive,


00:42:19.980 --> 00:42:21.300
which also means readability, right?


00:42:21.300 --> 00:42:23.740
There's a lot of side effects that we all appreciate


00:42:23.740 --> 00:42:25.740
that come with productivity,


00:42:25.740 --> 00:42:27.820
but that's really the ultimate goal to me.


00:42:27.820 --> 00:42:29.740
It's not that the language is readable.


00:42:29.740 --> 00:42:31.160
Readable makes you productive.


00:42:31.160 --> 00:42:33.320
And for pattern matching, there are certain algorithms


00:42:33.320 --> 00:42:35.220
that are just really difficult to do


00:42:35.220 --> 00:42:36.740
without pattern matching, right?


00:42:36.740 --> 00:42:38.980
Like the classic examples are parsers and compilers,


00:42:38.980 --> 00:42:42.740
and they're not easy to do without having pattern matching.


00:42:42.740 --> 00:42:44.460
There's a reason why functional programming languages


00:42:44.460 --> 00:42:46.740
that have had pattern matching for a very long time


00:42:46.740 --> 00:42:50.380
are the best places right now to typically write a parser


00:42:50.380 --> 00:42:52.820
or a compiler, because the algorithm just


00:42:52.820 --> 00:42:54.300
works so much better that way.


00:42:54.300 --> 00:42:56.340
So there were reasons why we brought this in.


00:42:56.340 --> 00:42:58.940
There will be increases in productivity for some people.


00:42:58.940 --> 00:43:01.100
We do realize that it is a big lift,


00:43:01.100 --> 00:43:03.460
but we also realize not everyone's going to see this day


00:43:03.460 --> 00:43:05.060
one.


00:43:05.060 --> 00:43:06.700
It is way more than a switch statement,


00:43:06.700 --> 00:43:09.540
which I know a lot of people typically look at it as.


00:43:09.540 --> 00:43:11.900
The key point is it matches on structure.


00:43:11.900 --> 00:43:14.860
It's not matching necessarily just on value.


00:43:14.860 --> 00:43:19.420
is the big difference between an if statement versus not. There was a lot of work behind


00:43:19.420 --> 00:43:24.700
this. There are reasons. This was not major. The other thing I keep seeing about this is


00:43:24.700 --> 00:43:26.540
people going, oh, this is not Pythonic.


00:43:26.540 --> 00:43:28.780
>> Well, it is now.


00:43:28.780 --> 00:43:32.940
>> Yeah, I hate to break it to people, but Guido van Rossum, the creator of Python and


00:43:32.940 --> 00:43:38.580
thus probably the harbinger of what is Pythonic, is a co-author and a big pusher of this pep.


00:43:38.580 --> 00:43:42.740
Guido helped make this happen. Unless you want to go up to him at PyCon and tell Guido


00:43:42.740 --> 00:43:46.180
that he doesn't know what's Pythonic or what's not, I think we kind of just have to go with


00:43:46.180 --> 00:43:50.900
it that this is now what is considered Pythonic. I will say I have seen people say, oh, my


00:43:50.900 --> 00:43:55.620
God, this is what happens when we lose the BDFL. Like the person who was the BDFL made


00:43:55.620 --> 00:43:56.620
this happen, right?


00:43:56.620 --> 00:43:57.620
**Jason:** Yeah, yeah. It's not that.


00:43:57.620 --> 00:44:02.900
**Tim:** It's a really funny disconnect with people. Like Guido drove this. Like Guido


00:44:02.900 --> 00:44:06.780
talked to the steering council about this. He was the point person for this. He really


00:44:06.780 --> 00:44:11.440
helped make this happen. So it's as Pythonic as it can be if you consider Guido the creator


00:44:11.440 --> 00:44:14.180
and head person in terms of the design of the language,


00:44:14.180 --> 00:44:16.020
which I will fully admit I still do.


00:44:16.020 --> 00:44:18.280
I kind of view Guido no longer as being BDFL,


00:44:18.280 --> 00:44:21.520
as kind of he relinquished bureaucratic overhead costs


00:44:21.520 --> 00:44:23.200
in his life of the language.


00:44:23.200 --> 00:44:25.060
And the steering council is more or less taking that on,


00:44:25.060 --> 00:44:27.320
but I still trust Guido's gut more or less.


00:44:27.320 --> 00:44:29.440
Like if he really went off the rails, we'd stop him,


00:44:29.440 --> 00:44:31.020
but I don't think this is him going off the rails.


00:44:31.020 --> 00:44:32.480
I think this is us going like,


00:44:32.480 --> 00:44:34.280
he's that one step ahead of us.


00:44:34.280 --> 00:44:37.400
- Yeah, and actually Leon says,


00:44:37.400 --> 00:44:39.360
I just wrote a horrible if LF statement


00:44:39.360 --> 00:44:41.240
and he's looking forward to pattern matching.


00:44:41.240 --> 00:44:48.920
Yeah, I mean, there are some real places where I think there's going to be benefits to ways to structure things that will just make things look better.


00:44:48.920 --> 00:44:55.040
Yeah, and Magnus says, "Greed is me," that Python's full spectrum language and it just extends that spectrum.


00:44:55.040 --> 00:45:04.760
Yeah, right. It's, yeah, thanks for that, Magnus. It's one of these things I think some people lose track of that being beginner-friendly does not mean only for beginners.


00:45:04.760 --> 00:45:07.000
And that's where this productivity thing comes in.


00:45:07.000 --> 00:45:10.360
I think that's actually a huge part of Python success, right?


00:45:10.360 --> 00:45:13.240
Visual Basic 6 was awesome for beginners, for example.


00:45:13.240 --> 00:45:14.760
But it just stopped.


00:45:14.760 --> 00:45:16.360
Like, well, you can't do that here.


00:45:16.360 --> 00:45:17.960
You're at the limit.


00:45:17.960 --> 00:45:18.400
I'm sorry.


00:45:18.400 --> 00:45:19.600
I don't want to be at the limit.


00:45:19.600 --> 00:45:20.680
I want to learn C++.


00:45:20.680 --> 00:45:21.320
Don't make me.


00:45:21.320 --> 00:45:24.040
If you want to be beginner-friendly, go code and scratch.


00:45:24.040 --> 00:45:26.840
No one wants to write production code and scratch.


00:45:26.840 --> 00:45:29.240
It's great to get going, but there's a limit.


00:45:29.240 --> 00:45:35.600
One of the great quotes that I've heard that I think applies to Python is that you can do


00:45:35.600 --> 00:45:39.560
easy things simply but you can do difficult things are possible.


00:45:39.560 --> 00:45:41.440
I know I got that quote wrong.


00:45:41.440 --> 00:45:44.640
>> It's definitely close enough that I'll just go with it.


00:45:44.640 --> 00:45:46.240
That is very true.


00:45:46.240 --> 00:45:47.480
That is the goal here,


00:45:47.480 --> 00:45:51.360
is to make the common things easy and simple,


00:45:51.360 --> 00:45:53.540
and definitely approachable,


00:45:53.540 --> 00:45:55.560
and make the hard things at least possible.


00:45:55.560 --> 00:45:57.780
This is part of it. This opens up the possibility


00:45:57.780 --> 00:46:00.220
for things that were really difficult to do in Python before.


00:46:00.220 --> 00:46:01.320
>> Yeah, fantastic.


00:46:01.320 --> 00:46:03.360
>> Yeah. I'm thinking of doing a blog post about


00:46:03.360 --> 00:46:05.620
this whole rant called the social contract of open source


00:46:05.620 --> 00:46:08.760
to try to harp on this whole should versus need and just--


00:46:08.760 --> 00:46:11.020
it's OK.


00:46:11.020 --> 00:46:13.000
Sort of criticism is totally acceptable.


00:46:13.000 --> 00:46:15.420
It's just be understanding about how you're delivering it,


00:46:15.420 --> 00:46:16.860
because we're all on the internet.


00:46:16.860 --> 00:46:17.420
We do here.


00:46:17.420 --> 00:46:20.500
And indirectly, you will suffer, because guess what?


00:46:20.500 --> 00:46:22.100
That project you're using is going


00:46:22.100 --> 00:46:23.620
to then suffer based on what you say.


00:46:23.620 --> 00:46:24.460
So it does matter.


00:46:24.460 --> 00:46:25.580
>>Yeah.


00:46:25.580 --> 00:46:28.740
>>And just one aside, I think last podcast,


00:46:28.740 --> 00:46:31.500
Michael said this was influenced from Haskell.


00:46:31.500 --> 00:46:34.060
is actually the design comes a lot from Scala


00:46:34.060 --> 00:46:35.860
specifically for this.


00:46:35.860 --> 00:46:39.040
But we got list comprehensions from Scala.


00:46:39.040 --> 00:46:41.220
So we have actually gotten some nice things out of Scala.


00:46:41.220 --> 00:46:43.940
- Interesting, yeah, okay, very interesting, yeah.


00:46:43.940 --> 00:46:47.300
Yeah, I mean, my feeling is it's a big step, I think.


00:46:47.300 --> 00:46:51.460
It's gonna take a while to really see the value of it


00:46:51.460 --> 00:46:53.660
if you're not working directly in a place


00:46:53.660 --> 00:46:56.360
where it's one of these algorithms that applies a lot,


00:46:56.360 --> 00:46:58.260
but I think it'll be good.


00:46:58.260 --> 00:46:59.740
- Yeah, it's definitely one of those things


00:46:59.740 --> 00:47:00.860
that when you see it for the first time,


00:47:00.860 --> 00:47:03.880
If you're not used to using a language,


00:47:03.880 --> 00:47:05.980
like most functional languages that have pattern matching,


00:47:05.980 --> 00:47:07.660
it's goes like, "What? Why?"


00:47:07.660 --> 00:47:08.100
>> Yeah.


00:47:08.100 --> 00:47:09.220
>> When you get exposed to it,


00:47:09.220 --> 00:47:10.460
when you start to use it more,


00:47:10.460 --> 00:47:12.940
it starts much like learning another programming language.


00:47:12.940 --> 00:47:15.660
It starts to tweak your approach to certain algorithms and stuff.


00:47:15.660 --> 00:47:18.100
It's another tool in your toolbox, really.


00:47:18.100 --> 00:47:21.180
>> Nice. Well, Brian, you've got the follow-up.


00:47:21.180 --> 00:47:26.740
>> Yeah. Actually, that's why I thought this would be good as a follow-up.


00:47:26.740 --> 00:47:34.820
Guido announced that he wrote the introduction to pattern matching and that it's now part


00:47:34.820 --> 00:47:39.580
of an appendix A of PEP 636.


00:47:39.580 --> 00:47:43.220
So I went off and looked at it and it actually really helped me a lot.


00:47:43.220 --> 00:47:49.540
So this introduction kind of, I actually, I've been trying to follow this PEP and honestly


00:47:49.540 --> 00:47:53.500
been confused for a while as to like exactly how it's working.


00:47:53.500 --> 00:47:56.140
A lot of people have been focusing on the weird parts,


00:47:56.140 --> 00:47:58.820
but the easy parts actually are really nice.


00:47:58.820 --> 00:48:03.460
So I really, there's an example that it starts off with


00:48:03.460 --> 00:48:06.360
that kind of looks like a switch statement, right?


00:48:06.360 --> 00:48:11.000
So it's a, I want to match a status and like an HTTP status.


00:48:11.000 --> 00:48:15.860
And then I do something different based on 400 or 404, 418.


00:48:15.860 --> 00:48:17.420
And then, and then of course we're like,


00:48:17.420 --> 00:48:18.900
well, what about default, right?


00:48:18.900 --> 00:48:20.640
So there's gotta be some sort of fall through


00:48:20.640 --> 00:48:22.520
that I handle all the other cases.


00:48:22.520 --> 00:48:23.860
And there's an example of that.


00:48:23.860 --> 00:48:25.740
And I was actually curious, the example here


00:48:25.740 --> 00:48:31.380
shows using just a single underscore magic variable


00:48:31.380 --> 00:48:34.180
as a catch-all.


00:48:34.180 --> 00:48:36.100
And so, Brett, I was just curious,


00:48:36.100 --> 00:48:37.460
can I use any variable here?


00:48:37.460 --> 00:48:39.260
Or does it need to be the single underscore?


00:48:39.260 --> 00:48:40.140
Do you know?


00:48:40.140 --> 00:48:42.860
So I was actually going to comment on this


00:48:42.860 --> 00:48:44.220
when you were done.


00:48:44.220 --> 00:48:48.180
So the underscore actually has some special semantics here,


00:48:48.180 --> 00:48:51.260
because in most languages that have pattern matching,


00:48:51.260 --> 00:48:53.380
the underscore represents the wildcard.


00:48:53.380 --> 00:48:55.380
This has actually been one of the most controversial parts


00:48:55.380 --> 00:48:57.860
of PEP 634 was the selection of this


00:48:57.860 --> 00:49:00.540
to stay consistent with other languages.


00:49:00.540 --> 00:49:03.100
While I will not suggest to people


00:49:03.100 --> 00:49:05.780
that there is an opportunity to remove pattern matching


00:49:05.780 --> 00:49:07.980
or to necessarily have massive changes to it,


00:49:07.980 --> 00:49:10.420
one of the things that if people try this out


00:49:10.420 --> 00:49:13.700
in real world code and can get feedback to us


00:49:13.700 --> 00:49:16.700
well before beta one locks in and gets released,


00:49:16.700 --> 00:49:19.700
'cause that's our cutoff for feature changes


00:49:19.700 --> 00:49:22.500
for Python 3.10, which will be in May.


00:49:22.500 --> 00:49:25.700
This is one of those areas where we could actually


00:49:25.700 --> 00:49:26.900
consider changing, right?


00:49:26.900 --> 00:49:31.340
Like fixing up code to change this case wildcard syntax


00:49:31.340 --> 00:49:34.560
of an underscore to something else is totally possible


00:49:34.560 --> 00:49:36.460
if we got feedback from the community that, yeah,


00:49:36.460 --> 00:49:38.020
this really was a nasty sticking point


00:49:38.020 --> 00:49:39.260
and really didn't work out well.


00:49:39.260 --> 00:49:42.820
So I do wanna say that there is still a chance


00:49:42.820 --> 00:49:44.500
to potentially influence the final outcome


00:49:44.500 --> 00:49:47.300
of how the exact thing is,


00:49:47.300 --> 00:49:48.140
although I don't wanna suggest that we--


00:49:48.140 --> 00:49:51.140
- Right, 'cause it's not shipped in 3.10 yet, right?


00:49:51.140 --> 00:49:53.340
- Exactly, it's not shipped in 3.10 yet,


00:49:53.340 --> 00:49:56.780
so we can tweak if necessary, but don't come out,


00:49:56.780 --> 00:49:58.260
I wouldn't suggest people come out


00:49:58.260 --> 00:50:00.340
and try to completely rewrite the entire syntax,


00:50:00.340 --> 00:50:03.940
but in this specific case, yes, it is special,


00:50:03.940 --> 00:50:05.620
yes, some people don't like it,


00:50:05.620 --> 00:50:08.940
and if enough people really came forward


00:50:08.940 --> 00:50:11.480
and really said this is the one thing I'd wanna tweak,


00:50:11.480 --> 00:50:12.980
I think we'd be open to considering tweaking.


00:50:12.980 --> 00:50:15.040
- Well, the underscore gets used so much


00:50:15.040 --> 00:50:16.260
for so many interesting things,


00:50:16.260 --> 00:50:18.060
like why not one more?


00:50:18.060 --> 00:50:20.980
I'm OK. I personally I don't care.


00:50:20.980 --> 00:50:23.020
I just want to know what it is.


00:50:23.020 --> 00:50:25.540
I mean, I didn't like I didn't like


00:50:25.540 --> 00:50:31.100
spaces instead of braces when I first hit it so.


00:50:31.100 --> 00:50:33.220
But what happens if I put it like X


00:50:33.220 --> 00:50:35.700
there instead of underscore if you put X?


00:50:35.700 --> 00:50:37.900
So the rules here basically are if you


00:50:37.900 --> 00:50:40.580
put a single name that has no dot in it,


00:50:40.580 --> 00:50:41.420
it's a binding.


00:50:41.420 --> 00:50:43.140
You put a name there with a dot.


00:50:43.140 --> 00:50:44.180
It will be a binding.


00:50:44.180 --> 00:50:45.660
Now this is one of the things that


00:50:45.660 --> 00:50:47.380
I learned from Guido in one of our


00:50:47.380 --> 00:50:50.820
help clarify this for me and one of the reasons I ended up


00:50:50.820 --> 00:50:54.100
voting to accept this was let's look at the like consider these


00:50:54.100 --> 00:50:56.660
cases right return codes. You're probably not going to hard code


00:50:56.660 --> 00:51:00.180
400 and 404 and 14. You're going to import the HTTP dot status


00:51:00.180 --> 00:51:02.500
module and you're going to specify the constants from


00:51:02.500 --> 00:51:05.860
there right. Do you really want to rebind those constants by


00:51:05.860 --> 00:51:10.340
accident in your code? Oh no no, but because it's been imported


00:51:10.340 --> 00:51:13.540
from a module or off a class for instance, you're not going to


00:51:13.540 --> 00:51:15.380
be wanting to do assignment. You're just going to want to


00:51:15.380 --> 00:51:17.380
So if there's a dot in the name, it automatically


00:51:17.380 --> 00:51:18.380
is just a reference.


00:51:18.380 --> 00:51:20.460
Now, some people get really hung up on that


00:51:20.460 --> 00:51:23.620
when they think about the single binding of a name,


00:51:23.620 --> 00:51:24.380
understandably.


00:51:24.380 --> 00:51:28.140
But here's the thing is, while this is a case right now


00:51:28.140 --> 00:51:30.900
where if you had just a bare name, that's a bind,


00:51:30.900 --> 00:51:32.660
where if there's a dot in it, it's actually


00:51:32.660 --> 00:51:36.300
going to be a reference and a load to do a value check,


00:51:36.300 --> 00:51:38.700
there is a potential in the future


00:51:38.700 --> 00:51:41.540
if people come back after trying out the PEP


00:51:41.540 --> 00:51:43.380
and having experience with pattern matching


00:51:43.380 --> 00:51:49.420
matching to add to the language a leading dot, which is actually used in Swift, by the


00:51:49.420 --> 00:51:52.180
way, in the Swift community for something else.


00:51:52.180 --> 00:51:57.820
But the key point is we can make it like a dot x to act as a load for comparison for


00:51:57.820 --> 00:51:58.820
a local--


00:51:58.820 --> 00:52:00.580
>> That's an interesting syntactical use.


00:52:00.580 --> 00:52:03.900
Like it's not actually coming from anywhere, but treat it as if it were.


00:52:03.900 --> 00:52:04.900
>> Exactly.


00:52:04.900 --> 00:52:09.060
Now, this was originally in the PEP, and there was massive pushback from people thinking


00:52:09.060 --> 00:52:11.620
that they would totally miss the dot.


00:52:11.620 --> 00:52:17.780
But Corey Benfield, who used to run requests and all that, and has multiple talks from


00:52:17.780 --> 00:52:24.260
PyCon, person who helped me start pushing Sans I/O development of libraries in the community,


00:52:24.260 --> 00:52:26.940
he works at Apple now on Swift stuff, and he posted something on Twitter.


00:52:26.940 --> 00:52:30.380
And I asked him, like, hey, does that leading dot have any problems with Swift?


00:52:30.380 --> 00:52:32.840
And they said, actually, the whole community is totally fine with it.


00:52:32.840 --> 00:52:33.840
There's no readability problems.


00:52:33.840 --> 00:52:34.840
It just totally works.


00:52:34.840 --> 00:52:35.840
Not an issue.


00:52:35.840 --> 00:52:40.300
So we could potentially, in the next version of Python, actually make it so that that have


00:52:40.300 --> 00:52:44.420
it a dot in the name, whether it's just leading or not, we could actually generalize that.


00:52:44.420 --> 00:52:48.460
But because it's a forward compatible thing and backwards compatible, we decided not to


00:52:48.460 --> 00:52:53.660
do that in this path and just try to just keep it simple, simple, keep it simpler than


00:52:53.660 --> 00:52:56.820
it had to be necessary to go out and then add an opportunity.


00:52:56.820 --> 00:53:02.940
So if I just put a bare X, it's going, will it hit it and will it bind to it and assign


00:53:02.940 --> 00:53:04.420
the value to X?


00:53:04.420 --> 00:53:05.420
Yes.


00:53:05.420 --> 00:53:06.420
Okay.


00:53:06.420 --> 00:53:10.220
Actually, that's what I expected because as I go down this little tutorial, it talks about


00:53:10.220 --> 00:53:15.660
like, on pattern, like unpacking, which is totally cool.


00:53:15.660 --> 00:53:19.560
So let's say you have a, like a, the example is a point object, which


00:53:19.560 --> 00:53:21.200
is like just an X, Y tuple.


00:53:21.200 --> 00:53:26.440
Um, now I want to be able to, if I, in the, the case statements are, you


00:53:26.440 --> 00:53:30.100
know, specific points that you're going to match to, or like, let's say


00:53:30.100 --> 00:53:36.920
you don't care what X is, but you, you want to fix Y at zero in, in the case,


00:53:36.980 --> 00:53:40.520
in the case block you want to know what the value of X was.


00:53:40.520 --> 00:53:44.640
So you do want that binding and that's really just cool.


00:53:44.640 --> 00:53:45.620
I can't wait to play with it.


00:53:45.620 --> 00:53:49.000
So my follow-up question, I'm glad you showed up here is,


00:53:49.000 --> 00:53:50.100
when can I play with this?


00:53:50.100 --> 00:53:53.360
Is this in one of the alphas now or betas or do you know?


00:53:53.360 --> 00:53:58.360
- I don't know if it's, I don't think it's landed yet.


00:53:58.360 --> 00:54:01.420
Bram Butcher, who's one of the co-authors of the PEP


00:54:01.420 --> 00:54:04.020
has a working implementation already,


00:54:04.020 --> 00:54:06.620
which is actually available in a Jupyter,


00:54:06.620 --> 00:54:09.320
was available in a Jupyter Notebook somewhere.


00:54:09.320 --> 00:54:10.820
So there's definitely a fork somewhere


00:54:10.820 --> 00:54:13.220
where you can try this out.


00:54:13.220 --> 00:54:15.540
But this is not landed in mainline,


00:54:15.540 --> 00:54:18.460
so it's not out in alpha quite yet.


00:54:18.460 --> 00:54:20.780
One thing I did want to point out about this that's really


00:54:20.780 --> 00:54:24.580
kind of cool, with the example that Brian's showing here,


00:54:24.580 --> 00:54:26.540
is the match against a point argument,


00:54:26.540 --> 00:54:29.100
as he said, that takes a two-item tuple.


00:54:29.100 --> 00:54:31.220
You could actually change this to also accept


00:54:31.220 --> 00:54:33.300
a single-item tuple that represented x and y


00:54:33.300 --> 00:54:35.100
with the same value, and that would totally


00:54:35.100 --> 00:54:36.460
match separately as well.


00:54:36.460 --> 00:54:38.960
So once again, this is matching against structure.


00:54:38.960 --> 00:54:41.700
So you could actually pass in tuples of different sizes


00:54:41.700 --> 00:54:43.740
and have it automatically just kind of infer based on--


00:54:43.740 --> 00:54:46.020
- Maybe do something different with 2D or 3D.


00:54:46.020 --> 00:54:46.940
- Yeah, exactly.


00:54:46.940 --> 00:54:48.220
Yeah, exactly.


00:54:48.220 --> 00:54:51.580
So because it's a structural thing and not a value thing,


00:54:51.580 --> 00:54:53.740
it opens those very interesting doors.


00:54:53.740 --> 00:54:54.580
- Cool. - Interesting.


00:54:54.580 --> 00:54:55.660
Yeah, cool, it's really great to have you here


00:54:55.660 --> 00:54:57.660
to talk about all this stuff.


00:54:57.660 --> 00:54:59.580
Final comment, close this one out, I guess.


00:54:59.580 --> 00:55:03.540
ZDoc says, "I think once good syntax highlighting lands,


00:55:03.540 --> 00:55:05.820
"this will be as natural as list comparisons."


00:55:05.820 --> 00:55:07.340
- Yeah, and that's actually a good point.


00:55:07.340 --> 00:55:10.340
One of the things we had discussed was, Mike,


00:55:10.340 --> 00:55:14.100
the leading dot, how hard would that be to see


00:55:14.100 --> 00:55:15.380
with or without syntax highlighting?


00:55:15.380 --> 00:55:16.700
And we realized that, honestly,


00:55:16.700 --> 00:55:17.980
syntax highlighting will probably do it.


00:55:17.980 --> 00:55:19.700
One thing some people were a little worried about


00:55:19.700 --> 00:55:22.020
was the reason this is even possible


00:55:22.020 --> 00:55:25.140
was because of the new parser that landed in Python 3.9,


00:55:25.140 --> 00:55:27.500
the new pgm parser.


00:55:27.500 --> 00:55:29.320
It can do more contextualized parsing.


00:55:29.320 --> 00:55:32.140
So that match, for instance, isn't gonna suddenly make


00:55:32.140 --> 00:55:35.500
all your match keywords or the match method


00:55:35.500 --> 00:55:38.900
from the RE module on match objects suddenly not work.


00:55:38.900 --> 00:55:41.240
It contextually can tell that that match keyword


00:55:41.240 --> 00:55:42.540
is for a match statement.


00:55:42.540 --> 00:55:45.100
So there might be a little funky coloring for some people


00:55:45.100 --> 00:55:46.580
based on how your syntax highlighting works.


00:55:46.580 --> 00:55:48.220
Like you might suddenly have all your match methods


00:55:48.220 --> 00:55:50.220
highlighted like it was the match keyword.


00:55:50.220 --> 00:55:53.980
But honestly, it'll be from what you're looking at


00:55:53.980 --> 00:55:55.580
in terms of code, it's gonna be fairly obvious


00:55:55.580 --> 00:55:56.860
that is not a match statement.


00:55:56.860 --> 00:55:59.820
So we weren't too worried about that kind of haziness


00:55:59.820 --> 00:56:01.420
as it were when it comes to syntax highlighting.


00:56:01.420 --> 00:56:02.340
- No, this is cool.


00:56:02.340 --> 00:56:04.300
- I know a guy on the VS Code team.


00:56:05.140 --> 00:56:06.200
- Yeah, so do I.


00:56:06.200 --> 00:56:10.320
- You see him every morning in the mirror.


00:56:10.320 --> 00:56:12.880
- A quick plug and thank you to Magic Python,


00:56:12.880 --> 00:56:17.160
which comes from the Magic Python team,


00:56:17.160 --> 00:56:19.100
Magic Stack, the people who do EdgeDB.


00:56:19.100 --> 00:56:22.740
They actually maintain the syntax highlighting


00:56:22.740 --> 00:56:24.420
that we use in VS Code,


00:56:24.420 --> 00:56:27.360
as well as I think is using some blind text and add on,


00:56:27.360 --> 00:56:29.080
like they have a generic grammar that they use


00:56:29.080 --> 00:56:32.840
that they just auto-gen out to various editors


00:56:32.840 --> 00:56:35.880
for their syntax, mostly text format.


00:56:35.880 --> 00:56:37.920
But kudos to them for always maintaining


00:56:37.920 --> 00:56:39.040
that syntax highlighting,


00:56:39.040 --> 00:56:41.480
'cause that's actually what VS Code itself ships in the box.


00:56:41.480 --> 00:56:42.320
- That's awesome.


00:56:42.320 --> 00:56:43.140
- Yeah, nice.


00:56:43.140 --> 00:56:44.400
Brian, I don't have any extras, do you?


00:56:44.400 --> 00:56:46.680
- I don't, no.


00:56:46.680 --> 00:56:48.120
- Brian, anything else you wanna throw out there


00:56:48.120 --> 00:56:50.320
before we make a bad joke?


00:56:50.320 --> 00:56:51.920
- No, just thanks for having me on.


00:56:51.920 --> 00:56:53.640
Thank you for everyone listening to me rant on


00:56:53.640 --> 00:56:57.640
about how to please try to talk to maintainers


00:56:57.640 --> 00:56:58.920
to help them keep their sanity.


00:56:58.920 --> 00:57:00.240
And that's it.


00:57:00.240 --> 00:57:02.680
I hope people give the Python Launcher a shot


00:57:02.680 --> 00:57:03.580
and it works for them.


00:57:03.580 --> 00:57:04.760
- Yeah, that's very exciting.


00:57:04.760 --> 00:57:05.600
- Let me know.


00:57:05.600 --> 00:57:07.340
I can't make any promises about it shipping


00:57:07.340 --> 00:57:08.580
specifically with Python,


00:57:08.580 --> 00:57:10.520
but at least it's a tool there that I find useful


00:57:10.520 --> 00:57:11.700
and I hope others do as well.


00:57:11.700 --> 00:57:13.860
- Cool, I'll definitely check that one out.


00:57:13.860 --> 00:57:15.740
All right, you guys ready for the joke?


00:57:15.740 --> 00:57:18.020
You know, we're all stuck at home,


00:57:18.020 --> 00:57:19.460
and especially if you're single,


00:57:19.460 --> 00:57:23.060
it's really tricky to get out and meet people


00:57:23.060 --> 00:57:24.620
and you know, whatnot,


00:57:24.620 --> 00:57:26.060
see what's gonna make you happy.


00:57:26.060 --> 00:57:27.460
So I got a joke along those lines


00:57:27.460 --> 00:57:29.260
to kind of help people out there.


00:57:29.260 --> 00:57:30.100
Ready?


00:57:30.100 --> 00:57:30.920
- Mm-hmm.


00:57:30.920 --> 00:57:33.680
There's this tweet by Christian Zhu,


00:57:33.680 --> 00:57:35.460
says, "If you're not happy single,


00:57:35.460 --> 00:57:37.060
"you won't be happy in a relationship."


00:57:37.060 --> 00:57:37.900
I mean, we've all heard this,


00:57:37.900 --> 00:57:39.940
how important it is to be just like content with yourself.


00:57:39.940 --> 00:57:41.780
She says, "No, true happiness comes


00:57:41.780 --> 00:57:43.500
"from closing 100 Chrome tabs


00:57:43.500 --> 00:57:45.660
"after solving an obscure programming bug,


00:57:45.660 --> 00:57:46.900
"not from other people."


00:57:46.900 --> 00:57:47.740
Come on.


00:57:47.740 --> 00:57:49.300
(laughing)


00:57:49.300 --> 00:57:50.140
- Yeah.


00:57:50.140 --> 00:57:52.100
- Anyway, I thought that was good and kinky.


00:57:52.100 --> 00:57:54.500
- Are you two the type of folk


00:57:54.500 --> 00:57:56.740
who have like a bazillion tabs open at any one time,


00:57:56.740 --> 00:57:57.560
or are you more like,


00:57:57.560 --> 00:57:59.420
I'll only keep open exactly what I'm working on,


00:57:59.420 --> 00:58:01.780
as soon as I'm done, I close them.


00:58:01.780 --> 00:58:03.980
- I am not a 100 tab person,


00:58:03.980 --> 00:58:07.120
but what I do sometimes I'll like leave the tabs open,


00:58:07.120 --> 00:58:08.740
like, oh, I'm not done with this.


00:58:08.740 --> 00:58:09.580
And so I'll close it.


00:58:09.580 --> 00:58:10.700
If I got to reboot the computer,


00:58:10.700 --> 00:58:12.500
the first thing I do is reopen the browser


00:58:12.500 --> 00:58:14.300
and say history restore previous session.


00:58:14.300 --> 00:58:15.580
Cause I'm like, there were things in there.


00:58:15.580 --> 00:58:17.860
I don't know what I was doing, but I know they're important.


00:58:17.860 --> 00:58:19.980
So I may abuse that a little bit.


00:58:19.980 --> 00:58:22.820
- I, my daughter came to me once and said,


00:58:22.820 --> 00:58:24.820
I need dead like finals.


00:58:24.820 --> 00:58:26.340
And then my laptop is too slow.


00:58:26.340 --> 00:58:27.340
I need a new laptop.


00:58:27.340 --> 00:58:29.060
Like, okay, well, let's talk about what you're doing.


00:58:29.060 --> 00:58:33.060
She was doing like three research projects and had like a hundred tabs open


00:58:33.060 --> 00:58:40.740
I'm like, well, let's just try this first. Can I can I tell you about this cool thing called bookmarks? and


00:58:40.740 --> 00:58:47.560
Anyway totally fixed it. Yeah, that's awesome dad showing bookmarks to the youngsters


00:58:47.560 --> 00:58:56.180
Yeah, magnus says the number of tabs is a measure of how hard the problem is and uh neils says


00:58:56.260 --> 00:58:58.180
- Great rant, love your work, Brett.


00:58:58.180 --> 00:59:00.460
Great to have you on the show, Brett.


00:59:00.460 --> 00:59:01.860
- Always happy to be on.


00:59:01.860 --> 00:59:03.060
- Thanks for being here, thanks everyone.


00:59:03.060 --> 00:59:04.700
Brian, thanks as always.

