00:00:00 This is Python Bytes, Python headlines and news delivered directly to your earbuds.

00:00:04 It's episode seven, recorded Wednesday, January 4th, 2017.

00:00:09 Hey, Brian.

00:00:10 Hey, happy new year.

00:00:12 Yeah, happy new year.

00:00:13 It's great to be back together.

00:00:15 We've gone three weeks without discussing cool things that came out in the Python community,

00:00:20 and I think it's time to get back together.

00:00:23 The Python news must flow.

00:00:24 It must, and plus I missed this.

00:00:27 This is fun.

00:00:27 Yeah, it's definitely, definitely fun.

00:00:29 And so, like many of our episodes, this one is sponsored by Rollbar.

00:00:33 They help you take the pain out of errors, so thank you, Rollbar.

00:00:36 We'll have more to say about them throughout the show.

00:00:38 So, Brian, you had a little warning.

00:00:41 You wanted to just get it out of the way?

00:00:43 Yeah, I've got, there's some, a couple, I want to try to list some of the names of the articles,

00:00:48 of the people that wrote the articles that we are reading and talking about in this episode,

00:00:52 and some of them have names that I am most definitely going to mispronounce.

00:00:56 I hope you don't take offense at it.

00:00:58 I have a last name that everybody mispronounces, so I understand.

00:01:04 You're used to it?

00:01:06 Yeah.

00:01:06 I get Oaken and, mostly Oaken is what I get, but.

00:01:11 But you're not a tree.

00:01:12 Yeah.

00:01:14 Hey, so before we get to the first episode, the first news item, I actually want to do

00:01:19 something.

00:01:19 I'm going to open up my terminal.

00:01:20 I'm going to type, type something, okay?

00:01:22 I'm going to type Python 3-V.

00:01:24 Do you know what it says?

00:01:26 Not Python 3.5.2.

00:01:29 Not anymore.

00:01:29 No.

00:01:30 It says Python 3.6.

00:01:31 That's right.

00:01:32 Python 3.6.

00:01:33 Yeah.

00:01:34 So Python 3.6 was announced on December 23rd, and it's now Python 3.6.0 is our official

00:01:42 latest release, and this is really exciting.

00:01:46 I've already started using some of the new features in my writing.

00:01:51 I'm definitely taking advantage of the f-strings.

00:01:55 I don't know how you would call those.

00:01:57 Yeah.

00:01:57 I think the other languages call it string interpolation, but it's the F character that indicates

00:02:02 it.

00:02:03 Yeah.

00:02:03 Swift and C# call it string interpolation.

00:02:06 I'm going to call them the F in strings.

00:02:08 I love it.

00:02:10 But in celebration of this, I know we've already talked about 3.6, but I've got links

00:02:15 to the, in our show notes for the announcement and the what's new article from docspython.org.

00:02:21 But there's also a couple other articles that are cool.

00:02:23 There's a Python 3.6 is packed with goodness article from Sirdar Yigalap.

00:02:30 No, I got that one wrong.

00:02:32 That's on InfoWorld, but it's a list of things that he thinks is cool in 3.6, including Async

00:02:39 await and use the use of that more.

00:02:42 The improvements of memory and speed.

00:02:45 And I, I'm really excited about that.

00:02:48 And some, something that I didn't know about is some of the improved API support so that

00:02:54 tracers and debuggers and stuff can hook into Python easier.

00:02:57 Yeah.

00:02:57 It's definitely packed with goodness.

00:02:58 I think that's, that's great.

00:03:00 Another article that you pointed out was adopt Python 3.

00:03:03 I really liked that one as well.

00:03:06 And I'll let you go to some of the stats and say the name as well, the author.

00:03:09 Yeah.

00:03:10 So this is the meet on medium and I'm going to try this one because it's a cool name.

00:03:16 Dibya Chakravarti.

00:03:17 I don't know.

00:03:18 Cool name.

00:03:19 But yeah.

00:03:21 So there, this other adopt Python 3 article talk, I thought it was interesting.

00:03:26 So there's a, I have heard of a couple of, sites called the wall of superpowers, and

00:03:34 Python 3 readiness that are two, two pages that list, most popular Python packages and

00:03:42 how much of them are Python 3 ready.

00:03:44 And I, the numbers are higher than I expected actually 187 out of 200 on one of them and 341

00:03:51 out of 360 on the other.

00:03:53 And I think this is important because a lot of people, tried to switch to Python 3 a long

00:03:59 time ago.

00:03:59 And one of their favorite packages wasn't supported, but I, they, it probably is now.

00:04:05 So, check those out.

00:04:06 And then this, person also, wrote up an IPython notebook and had some statistics,

00:04:14 to pull out, not just the most popular, but everything.

00:04:17 He pulled everything on PyPy that was, listed as stable and had at least one release

00:04:24 in 2016.

00:04:26 That was 6,000 packages of those.

00:04:29 So there must be a lot of like packages on PyPy that are not, or PyPI that are not, updated

00:04:35 very often.

00:04:36 But, yeah, I really like it when the statistics do some basic filtering, like nobody cares whether

00:04:43 that package that almost no one's using hasn't been updated for 10 years supports Python 2 or

00:04:48 Python 3.

00:04:49 Yeah.

00:04:49 Yeah.

00:04:50 Yeah.

00:04:50 But of the, of, of the, what he calls stable and active, I was interesting.

00:04:56 There's 14% of those don't even cover, Python 2.

00:05:00 They're Python 3 only packages and, 28%, which is higher than I would hope, but 28%

00:05:07 are Python 2 only.

00:05:09 but the author estimates that a lot of those could easily be switched if they're really important

00:05:15 to you.

00:05:15 And, but the, he does list out, he has a list of all the ones that he calls sticky,

00:05:21 the one 25% of the, of 28.

00:05:25 So I don't know.

00:05:25 I'm not, that's not very many.

00:05:28 14, 7% total.

00:05:29 Yeah.

00:05:30 Math on the fly.

00:05:31 anyway, of, those sticky packages that may be a problem for you, but I, you know,

00:05:37 I, I had a, I was in one of those camps a year ago.

00:05:40 I tried to switch our testing to Python 3 and there was a package that I needed that wasn't

00:05:45 switched and it is now.

00:05:47 So I don't have that excuse anymore.

00:05:49 Yeah.

00:05:49 That's really great.

00:05:50 I love the wall of superpowers.

00:05:51 This article is really, interesting and I think it makes a, it's a good argument and

00:05:56 it's data driven, which is cool.

00:05:58 In fact, like you said, you can get the IPython notebook for it.

00:06:01 My final thought on Python moving from legacy Python to Python 3.6, the new Python is you

00:06:08 get a lot of benefit in this release just by installing and running on it.

00:06:12 If you don't touch your code at all, cause there's a lot of memory and performance speed

00:06:15 up.

00:06:15 So that's really cool.

00:06:16 Yeah.

00:06:17 and it's the, instead of walls of, and the wall of superpowers, maybe we could look

00:06:24 at maybe roads and bridges.

00:06:25 Yeah.

00:06:26 There's walls, there's roads and there's bridges.

00:06:28 And, you know, I, I don't know how it is in the rest of the world.

00:06:31 I know in Germany, it's not quite this way, but in the U S we tend to neglect our physical

00:06:36 infrastructure, right?

00:06:37 Like I had to swerve the other day cause there's a huge pothole on the road and so on.

00:06:42 And you know, it's a, it's a problem, but I think the real problem for us these days is

00:06:47 actual digital infrastructure.

00:06:49 So there's a really great article, not an article.

00:06:52 It's more like a report or even a book.

00:06:54 It's like 150 pages called roads and bridges, the unseen labor behind our digital infrastructure.

00:06:59 It's written by Nadia egg ball.

00:07:02 And she did a really good job.

00:07:03 It's, it's a new relatively new report.

00:07:05 It came out in July.

00:07:07 It's basically talks about open source and mostly open source infrastructure, not open

00:07:13 source projects.

00:07:14 So not, not necessarily things like Django, but more things like PI PI and PIP, right?

00:07:22 The underlying foundation, things like, open SSL that everybody builds on top of.

00:07:28 And it turns out there's actually a really big problem across the board.

00:07:32 Like if you think physical infrastructure is neglected, you should see the digital infrastructure.

00:07:36 All right.

00:07:37 So I actually did a whole session with this, some of the folks from the Python community,

00:07:42 Eric Holther from read the docs, Donald stuff from PI PI on talk Python in episode 84.

00:07:47 And we talked about this a little bit.

00:07:49 Basically this, this report goes through and outlines all the challenges that they see for

00:07:55 supporting things like PI PI, supporting things like open SSL.

00:08:00 And they said that until heart bleed, you know, heart bleed was that really serious bug that

00:08:07 you could sort of send a bunch of requests to a server running open SSL that was vulnerable.

00:08:12 And you could actually get it to leak, information, unencrypted information back out.

00:08:17 So it's still, until then it was like, that thing was just barely coming along.

00:08:21 Like there's almost nobody that worked on it.

00:08:23 There's like one guy or a couple of guys that very, very short term were able to work on

00:08:28 it.

00:08:29 And two thirds of all the web servers use that for their communication.

00:08:33 And think about that.

00:08:35 Another example, they talked about Ruby gems, the website done by volunteers.

00:08:39 Somebody had found some kind of vulnerability in it.

00:08:41 And the, the people who had supported it, they're like, all right, we'll fix this on the weekend.

00:08:45 Cause we have jobs.

00:08:46 We can't work on this infrastructure.

00:08:48 And like, I mean, that's like pip to Ruby, right?

00:08:50 It's really important.

00:08:51 And it turned out it got hacked and taken down before the weekend.

00:08:56 And so people had to like schedule vacation days so they could get, get it back running.

00:09:01 One more example is PyPI itself.

00:09:04 And, you know, Donald stuffed works on that.

00:09:07 He was employed by HP.

00:09:09 HP went through a bunch of layoffs and not even really knowingly, I think took out his position.

00:09:15 Now there's Donald's doing that in spare time.

00:09:17 Who else supports PyPI?

00:09:19 They do 400 terabytes of traffic a month and it costs almost $40,000 to keep pip running.

00:09:25 So you can say pip install a thing.

00:09:28 That's like $40,000 worth of infrastructure.

00:09:30 And there's only a few baskets that are supporting that thing.

00:09:34 It's, it's, it's quite precarious.

00:09:35 So I wanted to bring up roads and bridges, the unseen labor behind our digital infrastructure.

00:09:39 This report, I think people who care about this will find this very well written, very interesting and lots of neat stories.

00:09:45 Well, even if they're depressing.

00:09:46 Yeah.

00:09:49 It is interesting.

00:09:50 Thanks for bringing that up.

00:09:51 Yeah, absolutely.

00:09:52 I threw a bunch of, a bunch of little excerpts that I got from, from the article.

00:09:56 People can flip through and see if they're interested in that.

00:09:58 Speaking of, things that we take for granted.

00:10:01 I know that a lot of, there's some libraries out there that people use all the time.

00:10:06 And if a library is used by a lot of people, making changes to it can be a little scary.

00:10:11 RC2 of, matplotlib 2.0.0 came out in December and Thomas Caswell is, I don't know if he's the only person supporting it, but he's one of the main developers.

00:10:23 And, he was telling me that there's, it's been, one of the changes in this is, some of the changes in the default style.

00:10:32 So the default, if you just, if you're not styling your plots, specifically, and you're just going with whatever matplotlib, comes up with those are going to change.

00:10:43 And, that took 10 years in the making apparently, to change that.

00:10:47 So this, this library has been around for a while anyway.

00:10:50 So he would love to have feedback.

00:10:52 So we've got a list of, in our show notes, there's a list of, changes.

00:10:58 There's a list of releases, list of changes.

00:11:00 And, 2.0.0 is coming out, soon ish.

00:11:04 he's not sure when, but he'd like to have people try it out and see if any of the default styles or, what do they, what they think of them?

00:11:12 He wants feedback.

00:11:12 So, well, I have a little feedback for them that one of the posts you, linked to in the show notes is, is basically a set of pictures, old version, new version with default styling almost universally.

00:11:23 They look better to me.

00:11:24 They look more modern.

00:11:25 they don't look like here's a cheap unstyled sort of thing.

00:11:29 I'm just going to drop in.

00:11:30 They actually look like something that you'd be really excited to share.

00:11:33 Right.

00:11:34 So thumbs up for me.

00:11:35 Yeah, I thought so too.

00:11:37 And I thought, I, I would, I didn't even think about how hard it would be to, to change something under.

00:11:42 You know, change the rug out of a lot of people.

00:11:45 And, you know, a lot of people don't follow him or follow, Python.

00:11:49 So I'm glad we're bringing this up to try to get people to go check it out.

00:11:52 Yeah, I totally agree.

00:11:53 So it's, it's easy to look through it.

00:11:55 If you care about Matt Plotlib, get out there and give them some feedback while you can.

00:11:58 Hey, before we move on, let me tell you about Rollbar.

00:12:01 Oh, please tell me about Rollbar.

00:12:03 I recently sent out an email, like a newsletter email to a bunch of people taking some of my courses.

00:12:09 And it turned out that I had typed in a URL incorrectly.

00:12:12 Like, so it was like, click here to launch this, this video.

00:12:16 It was like player slash lecture slash one, two, three, four.

00:12:19 Well, some like non-numerical number or a letter got in there.

00:12:23 My web app was trying to parse that as an integer.

00:12:27 And so I hit send on this email to like thousands of people.

00:12:29 And then all of a sudden my phone starts going beep, beep, beep, beep, beep, crash, crash, crash, error in your website.

00:12:35 And I'm like, what the heck is this?

00:12:37 I pull it up and like, I immediately see what's going on.

00:12:39 I see the stack trace.

00:12:40 I open up my, my, open up PyCharm, quickly change it, do a push to deploy.

00:12:45 And within five minutes of sending the email, nobody ever sent me a message.

00:12:49 I found the error and fixed it.

00:12:51 And the rest of the people that opened the email didn't crash.

00:12:53 And that was from Rollbar.

00:12:54 And if, if you, if you guys want that same type of behavior, that same type of safety net, you can get it at rollbar.com slash Python bytes.

00:13:00 That's awesome.

00:13:01 I wonder how long you would have figured out on their own without that.

00:13:05 I would have never known until somebody complained.

00:13:08 Like, so it was, it was really good.

00:13:10 I felt bad about it, but it was good that at least I got it fixed right away.

00:13:13 Yeah.

00:13:14 Awesome.

00:13:14 One of the things I'm a huge fan of is MongoDB and document databases.

00:13:20 I really think document databases are like this perfect sweet spot between performance, maintainability, ease of use, and relational integrity.

00:13:28 There's a really great article I want to point out.

00:13:30 If you're interested in MongoDB or document databases in general and Python and you want to get started, the guys over at RealPython, Michael Herman, wrote an article called Introduction to MongoDB and Python.

00:13:42 They talk about what's the difference between SQL and NoSQL.

00:13:45 They talk about the primary way to talk to the database through PyMongo, like inserting and querying data.

00:13:51 And they also talk about this thing called Mongo Engine.

00:13:53 Mongo Engine is like the SQLAlchemy.

00:13:55 You create classes, you put in constraints and defaults, and then you map those classes to documents in your database.

00:14:01 Yeah.

00:14:02 I'm really excited about this.

00:14:03 I'm trying to use PyMongo on one of my projects.

00:14:06 So this is good.

00:14:08 Yeah, it's definitely good.

00:14:08 PyMongo is pretty sweet.

00:14:10 MongoDB is easy to set up and use.

00:14:12 It's open source.

00:14:13 So that's all good.

00:14:14 I actually did a one and a half hour presentation at this conference in London called Software Architect.

00:14:18 And they recorded it and put it up.

00:14:19 And it was basically the same stuff.

00:14:21 So I put a link in the show notes as well to this thing I call Applied NoSQL with MongoDB and Python.

00:14:27 So if people want a video version of mostly the same topics, they can check that out as well.

00:14:31 And actually from you, I learned about TinyDB, I think, on one of your podcasts.

00:14:36 Oh, yeah.

00:14:37 TinyDB is awesome.

00:14:38 Yeah.

00:14:38 So that was neat too.

00:14:39 Yeah.

00:14:39 Also Document Database.

00:14:40 You know, I love things that are for humans.

00:14:43 Yeah.

00:14:44 Next up, we've got an article introducing Maya, Date Times for Humans.

00:14:49 And most of the for humans stuff comes from Kenneth Reitz.

00:14:53 Do you know how to pronounce his name?

00:14:56 I've been saying Reitz.

00:14:57 I think that's right.

00:14:58 If that was like a German reading.

00:15:00 But if it's Reitz, I'm sorry, Kenneth.

00:15:01 So, Kenneth, if you're listening, please let us know.

00:15:04 Or I could, I guess, look at any talk that he's given and try to get that.

00:15:09 But anyway.

00:15:11 But the date times seem like something that's just easy until you actually try to do something that's not.

00:15:20 It quickly goes from easy to deal with to hard to deal with very fast.

00:15:26 And so I'm excited that Kenneth has taken this on and tried to come up with his own library for dealing with date times and date time math and parsing dates and human readable stuff.

00:15:38 It just sounds exciting.

00:15:40 And I'm going to give it a try.

00:15:42 Yeah.

00:15:43 He has Request, which is the most popular Python package ever.

00:15:47 Downloaded 7 million times a month, which is insane.

00:15:49 He has Records, which is like just write SQL for humans sort of thing.

00:15:53 And now dates.

00:15:54 Very, very cool stuff.

00:15:55 Nice work, Kenneth.

00:15:56 Yeah, definitely.

00:15:57 And another package that I'm interested in that's coming up is an alternative to Flask or something Flask-like.

00:16:05 There are more and more reasons to move away from legacy Python to Python.

00:16:10 Especially Python 3.5 above because of the cool concurrency stuff.

00:16:13 One of the things that people talk about when they talk about Node.js, which I'm not a huge fan of Node.js, but it does have its benefits.

00:16:21 It's sort of asynchronous from the start programming model.

00:16:25 Now, that's been traditionally hard in Python because the WSGI API doesn't really support it super well.

00:16:33 Frameworks like Flask and Pyramid.

00:16:36 You can't just write async methods that all of a sudden become async, right?

00:16:40 There's like too much.

00:16:41 There's too much in the built-in stack that doesn't understand async.

00:16:45 This guy, I don't know what his real name is.

00:16:47 I can just know him as Channel Cat.

00:16:48 Created this thing called Sanic, which is called a Python 3.5 or higher web server written to go fast.

00:16:54 It's based on the API of Flask.

00:16:56 It leverages the async and await functionality of Python 3.5, which I think is really, really cool.

00:17:02 It also uses the UV loop, which is a really fast asynchronous IO loop for Python 3.

00:17:08 It's really cool.

00:17:08 So if I want to create some kind of method, like a view action method sort of thing, just like Flask, I'll say app.route and give it like a URL, so like slash.

00:17:17 But instead of saying def some method, you say async def some method.

00:17:21 And you can await throughout your method.

00:17:23 And all the cool benefits of letting the threads go on to do other work while you're waiting on databases, web services, files, things like that, just happen magically.

00:17:33 So you can get really good performance numbers.

00:17:36 Wow.

00:17:36 Neat.

00:17:37 Yeah, so it's pretty cool.

00:17:38 And the fact that it's a Flask, more or less like the Flask API, means you don't have to like start from scratch and learn a totally new thing.

00:17:44 They actually have some performance numbers compared to other things.

00:17:47 And they don't have Pyramid in here, which is too bad because Pyramid flies on Python 3.

00:17:51 But when you think of asynchronous programming in Python, Python web frameworks, typically you would probably come up first with Tornado.

00:18:00 And they have some tests they did.

00:18:03 They said, okay, Tornado did like 2,000 requests per second with a 44 second millisecond latency response time, basically.

00:18:11 I said, okay, well, what about Flask?

00:18:12 Well, Flask did twice as good.

00:18:14 So like 5,000 requests a second, 20 millisecond response time.

00:18:17 Almost double good in both directions.

00:18:20 The Sanic thing using Python 3 and the UV loop is 33,000 requests per second with a three millisecond response time.

00:18:28 Wow.

00:18:28 That's incredible.

00:18:29 Yeah.

00:18:31 See, Python's better than legacy Python.

00:18:33 Yeah, Python, definitely.

00:18:35 That's really cool.

00:18:37 So Python 3.5, the async await is a cool programming model.

00:18:40 And to have this nice web framework to plug in there, this thing's going to go places.

00:18:44 We're going to be talking about it for a while, I bet.

00:18:45 Yeah, definitely.

00:18:46 At some point, I need to talk with you about trying to figure out if I were going to start up a new application.

00:18:54 Would I care about asynchronous stuff right away?

00:18:56 Yeah, that's a good question, right?

00:18:58 Like how much do you really care?

00:19:00 Because I mean, let's say on the Talk Python website, I think I have 10 processes farmed out to handle the request.

00:19:07 So like, you know, let's just go with Flask.

00:19:10 If I were running Flask, 5,000 requests a second, that's 50,000 requests a second.

00:19:14 That's like a pretty insane amount that I'm going to have to hit before I care, right?

00:19:18 But still, there are people who care and having that built in.

00:19:21 That's pretty cool.

00:19:21 Yeah, definitely.

00:19:22 I can't believe we're wrapped it up.

00:19:24 We've got all these done already.

00:19:26 I know, I know.

00:19:27 I think we've got a bunch of cool topics.

00:19:29 I love SanEc.

00:19:30 I love that Python 3.6 is out.

00:19:33 And I'm happy to be back and sharing it with everybody.

00:19:36 It was a nice break, but it's even nicer to be back.

00:19:38 Yeah, do you have any extra news you want to share with us?

00:19:41 No, I just stepped away from the computer.

00:19:44 I went to California, put my toes in the sand, and just kind of forgot about things for a while.

00:19:49 And came back refreshed and excited to keep doing what I'm doing.

00:19:54 How about you?

00:19:54 You're still working on your book, right?

00:19:55 Definitely, and I've ramped up the schedule.

00:19:57 So I spent the Christmas break at the keyboard.

00:20:00 And I've got, I think, about halfway done with the rough draft approximately.

00:20:06 But going through the first level editor, I'm still shooting for a beta, at least a beta release by PyCon.

00:20:18 My goal of getting a physical copy by PyCon seems actually insane right now.

00:20:24 So, but that's what I'm up to.

00:20:26 You can do it.

00:20:27 We're all rooting for you, Brian.

00:20:28 You can do it.

00:20:28 And a whole bunch of test and code episodes coming up.

00:20:31 I've got one interview recorded and about four interviews scheduled.

00:20:35 So these will keep going.

00:20:37 I have not quit.

00:20:38 All right.

00:20:39 Awesome.

00:20:39 Glad to hear those are coming.

00:20:40 Yeah.

00:20:40 All right.

00:20:41 Well, thanks a lot for talking to me today.

00:20:43 Yeah, it's been great.

00:20:44 Thanks for sharing the news with me.

00:20:45 And we'll see you later.

00:20:46 Thanks.

00:20:46 Thank you for listening to Python Bytes.

00:20:49 Follow the show on Twitter via at Python Bytes.

00:20:51 That's Python Bytes as in B-Y-T-E-S.

00:20:54 And get the full show notes at pythonbytes.fm.

00:20:58 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:21:02 We're always on the lookout for sharing something cool.

00:21:05 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:21:08 Thank you for listening and sharing this podcast with your friends and colleagues.

