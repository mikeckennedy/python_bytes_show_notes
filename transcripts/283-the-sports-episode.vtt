WEBVTT

00:00:00.001 --> 00:00:04.920
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.920 --> 00:00:09.480
This is episode 283, recorded May 10th, and I am Brian Okken.

00:00:09.480 --> 00:00:10.620
I'm Michael Kennedy.

00:00:10.620 --> 00:00:12.000
And I am Tanya Sims.

00:00:12.000 --> 00:00:18.400
Well, welcome, Tanya. Since we're just meeting also, and some of our people might not know who you are, tell us a little bit about yourself.

00:00:18.400 --> 00:00:22.760
Sure. Well, thank you so much for having me today. I'm very excited to be here.

00:00:22.760 --> 00:00:27.940
So my name is Tanya, and I'm currently a Python developer advocate at a company called DeepGram.

00:00:28.120 --> 00:00:33.020
And so at DeepGram, we do speech-to-text speech recognition technology.

00:00:33.020 --> 00:00:36.720
I would say that my path to technology is a little bit unconventional.

00:00:36.720 --> 00:00:38.620
I come from like an athletics background.

00:00:38.620 --> 00:00:41.380
I started playing basketball when I was five years old.

00:00:41.380 --> 00:00:44.300
I won't tell you how old I am now, but I'm fine.

00:00:44.300 --> 00:00:47.740
So yeah, so I played basketball in college.

00:00:47.740 --> 00:00:50.840
I played professionally in Europe and a little bit in the WNBA.

00:00:50.840 --> 00:00:52.220
And then I got into sales.

00:00:52.220 --> 00:00:54.680
And then from sales, I got into tech.

00:00:54.680 --> 00:00:55.920
So yes, it's been very unconventional.

00:00:56.160 --> 00:00:57.480
That's pretty awesome.

00:00:57.480 --> 00:01:00.020
I wish we could jump in deeper, but yeah.

00:01:00.020 --> 00:01:01.740
Yeah, that is super awesome.

00:01:01.740 --> 00:01:04.600
And as you're telling us that, I'm listening.

00:01:04.600 --> 00:01:11.700
And you think about all the stats and statistics and graphs and visualizations and optimizations of sports, right?

00:01:11.700 --> 00:01:15.020
Like these Python and programming skills are actually pretty relevant.

00:01:15.220 --> 00:01:20.000
Although maybe you were just deep down in the sports side and then got into programming afterwards.

00:01:20.000 --> 00:01:20.840
Yeah.

00:01:20.840 --> 00:01:22.800
So yeah, I think you're totally right.

00:01:22.800 --> 00:01:28.820
I think Python is like the perfect language for doing a lot of stuff with like stats, like sports, statistics, and things like that.

00:01:28.820 --> 00:01:30.240
And like the visualization of it.

00:01:30.240 --> 00:01:34.080
But yeah, I started getting into coding when I was a kid, actually.

00:01:34.080 --> 00:01:42.040
But then I stopped for a long time because, you know, who would have thought this thing called coding or computers would have taken off and be where it is today?

00:01:42.040 --> 00:01:43.240
Yeah, absolutely.

00:01:43.240 --> 00:01:43.720
Yeah.

00:01:43.720 --> 00:01:45.220
Fascinating as that is.

00:01:45.220 --> 00:01:46.980
Let's take a different path, Michael.

00:01:47.260 --> 00:01:50.540
Yes, a different path and indeed a fine transition there, Brian.

00:01:50.540 --> 00:01:55.120
So this one was sent over, recommended to us by one of our listeners, Spencer.

00:01:55.120 --> 00:01:57.640
So thank you, Spencer, for sending this in.

00:01:57.640 --> 00:02:03.720
And we talked about things like FSSpec and other ways in which you could sort of abstract away.

00:02:03.720 --> 00:02:11.380
Just like I'm talking to a file, but oh, hey, that happens to live on Azure Blob Storage or AWS or Google Cloud Storage or something like that.

00:02:11.380 --> 00:02:16.780
So this one is called Pathy, a path interface for local and cloud bucket storage.

00:02:17.240 --> 00:02:25.880
So if you've got data that's stored in, at the moment, AWS or Google Cloud Storage and that AWS one, that's S3.

00:02:25.880 --> 00:02:32.240
So I suspect that means like Linode and any other S3 compatible storage.

00:02:32.240 --> 00:02:39.320
You know, there's many of these places that have object storage for their cloud services that are basically wrapping up the AWS story.

00:02:39.320 --> 00:02:42.260
So this might be much broader than actually just those two clouds.

00:02:42.480 --> 00:02:51.980
Anyway, the idea is that this is a Python package with type annotations, they like to call out, which is great, for working with cloud bucket storage using Pathlib.

00:02:52.120 --> 00:02:53.300
So Pathlib is great, right?

00:02:53.300 --> 00:03:03.580
We can create Pathlib and give it a path and it has things like make directory or the parent of the parent of this thing or does it exist and so on.

00:03:03.580 --> 00:03:10.560
So if you like working with path, the path class from Pathlib, how about turning that loose against cloud storage?

00:03:10.560 --> 00:03:11.380
That's cool, huh?

00:03:11.380 --> 00:03:11.760
Very.

00:03:11.760 --> 00:03:12.280
Yeah.

00:03:12.380 --> 00:03:13.240
Yeah, it's very awesome.

00:03:13.240 --> 00:03:13.800
Yeah.

00:03:13.800 --> 00:03:13.880
Yeah.

00:03:13.880 --> 00:03:28.640
So what's nice about it is you basically give it a URL with some type of scheme, you know, traditional schemes are like HTTP, HTTPS, but like GS for Google Cloud Storage or something in here that I'm not seeing for Azure.

00:03:28.640 --> 00:03:30.160
Not Azure, AWS.

00:03:30.460 --> 00:03:40.880
But you give it just the prefix or you just give it a local file path and it will determine which that is and just start talking to that platform, which I think is actually pretty neat here.

00:03:40.880 --> 00:03:47.600
So, yeah, if basically if you want to work with cloud storage using Pathlib, well, then here you go.

00:03:47.600 --> 00:03:58.320
It also supports caching locally, which is neat because that's one way in which you could get all of your cloud files sort of downloaded and replicated locally as well.

00:03:58.700 --> 00:04:02.820
And then Spencer had a quick comment saying the really cool function is fluid.

00:04:02.820 --> 00:04:14.220
So down here with fluid, you can take any type of local Google Cloud Storage or S3 path string and it'll just give you a path object that lets you interact with it agnostic of the platform.

00:04:14.220 --> 00:04:23.040
So basically, like I was saying, you say S3 colon or GS colon or just a local path and it'll just give you back a Pathlib and you don't care where it is.

00:04:23.040 --> 00:04:23.660
Is it in the cloud?

00:04:23.660 --> 00:04:24.140
Is it local?

00:04:24.140 --> 00:04:24.780
Who cares?

00:04:24.880 --> 00:04:28.880
Because it's just, you know, it's abstracted that way using Pathlib.

00:04:28.880 --> 00:04:33.060
And I don't know about YouTube, but I had been a bit of a holdout on Pathlib.

00:04:33.060 --> 00:04:41.440
It was all import, you know, system.io or import.io, whatever it was, and just use the IO way working with it.

00:04:41.440 --> 00:04:44.700
But I've really come to like Path and Pathlib last year or two.

00:04:45.120 --> 00:04:47.380
Yeah, I really, I love the interface.

00:04:47.380 --> 00:04:51.120
Just it feels, it's easier to program in to me.

00:04:51.120 --> 00:04:52.600
It just feels easier.

00:04:52.600 --> 00:04:53.540
It feels more obvious.

00:04:53.540 --> 00:04:54.800
So.

00:04:54.800 --> 00:04:55.300
Yeah.

00:04:55.660 --> 00:04:56.520
Yeah, this is great.

00:04:56.520 --> 00:04:59.040
I've been wanting to do more with cloud technologies.

00:04:59.040 --> 00:05:01.600
So yeah, I think this would be a really good place to start.

00:05:01.600 --> 00:05:02.160
Yeah.

00:05:02.160 --> 00:05:09.860
And so much of that possibility is just working with static files on S3 or static files in blob storage and other places.

00:05:09.860 --> 00:05:10.480
Sure.

00:05:10.480 --> 00:05:12.260
I'd love to not have to care about that.

00:05:12.260 --> 00:05:12.740
So.

00:05:13.700 --> 00:05:20.220
Yes, if I could just not do Boto3, that would be fantastic because that thing drives me crazy so much.

00:05:20.220 --> 00:05:21.340
Don't give me another rant.

00:05:21.340 --> 00:05:23.340
Brian, talk about your topic.

00:05:23.340 --> 00:05:24.900
Save me from ranting about Boto3.

00:05:24.900 --> 00:05:25.300
Okay.

00:05:25.300 --> 00:05:27.000
Well, let's talk about Robin.

00:05:27.000 --> 00:05:30.180
So Robin, for one, has just an awesome logo.

00:05:30.180 --> 00:05:31.680
It's a bird being hugged by a snake.

00:05:31.680 --> 00:05:32.140
I love it.

00:05:32.140 --> 00:05:32.540
Yeah.

00:05:32.540 --> 00:05:34.820
That's pretty clever.

00:05:34.820 --> 00:05:35.980
So what is Robin?

00:05:35.980 --> 00:05:42.080
Robin is an async web server in runtime written in Rust.

00:05:43.100 --> 00:05:45.040
And so that's pretty cool.

00:05:45.040 --> 00:05:48.640
And actually, it's kind of been taking off in popularity and stuff.

00:05:48.640 --> 00:05:51.660
But the so there's we're going to link to a bunch of stuff.

00:05:51.660 --> 00:05:56.100
One of them is the Hello Robin blog post written by the author.

00:05:56.100 --> 00:06:02.040
And so Robin is a fast, high performance Python web framework with Rust runtime.

00:06:02.040 --> 00:06:03.420
So what does that mean?

00:06:03.420 --> 00:06:06.000
It means that it's kind of like Flask.

00:06:06.000 --> 00:06:13.000
It looks a lot like in one of the examples, it looks a lot like just a little Flask thing.

00:06:13.000 --> 00:06:16.860
You can do app gets and app puts and different things.

00:06:16.860 --> 00:06:17.580
It's decorators.

00:06:17.580 --> 00:06:18.760
It's very new.

00:06:18.760 --> 00:06:20.600
There's not there's a lot of work to be done.

00:06:20.600 --> 00:06:24.000
So there's not a lot of ecosystem around it yet.

00:06:24.000 --> 00:06:27.440
But it's pretty cool.

00:06:27.440 --> 00:06:30.960
And I just kind of like this idea of like, well, let's let's make your code.

00:06:30.960 --> 00:06:32.780
The code you write look like Python.

00:06:32.780 --> 00:06:33.840
It is Python.

00:06:34.040 --> 00:06:36.260
But the the back end stuff.

00:06:36.260 --> 00:06:38.660
Well, maybe you don't care what that's running on.

00:06:38.660 --> 00:06:41.120
And maybe Rust is fine.

00:06:41.120 --> 00:06:48.160
So one of the things that doesn't have an ASCII or or ASGI or WSGI underlying because that's

00:06:48.160 --> 00:06:48.920
a Python thing.

00:06:48.920 --> 00:06:50.780
It is a sync.

00:06:50.780 --> 00:06:54.620
It's very Flask like and the numbers kind of look impressive.

00:06:54.620 --> 00:06:58.980
So and I know that benchmarks, you have to like read those with a grain of salt.

00:06:58.980 --> 00:07:03.440
But still, requests per second, getting.

00:07:03.440 --> 00:07:11.540
So we've got this document showing, Flask with G unicorn at 1800 requests per second.

00:07:11.540 --> 00:07:15.960
But, Robin going at 6400 requests per second.

00:07:15.960 --> 00:07:17.840
And this is, this is kind of insane.

00:07:17.840 --> 00:07:20.040
So definitely worth checking out and trying.

00:07:20.040 --> 00:07:24.680
Um, I think I, or maybe not trying, but just watching to see what this does though.

00:07:24.680 --> 00:07:29.020
Since it's very new though, one of the things I have to say is there's, there needs to

00:07:29.020 --> 00:07:34.740
be some, it's not really newbie friendly then I guess, because there's not a lot

00:07:34.740 --> 00:07:35.300
of docs yet.

00:07:35.300 --> 00:07:40.720
There is a, there is a doc site started, but, but there's a lot of work to do, but still

00:07:40.720 --> 00:07:41.880
getting started with it.

00:07:41.880 --> 00:07:44.700
Uh, if you, if you have a really fast thing, it's pretty good.

00:07:44.700 --> 00:07:47.640
So, oh, yeah, go ahead.

00:07:47.640 --> 00:07:48.120
Yeah.

00:07:48.120 --> 00:07:50.480
Well, a couple of notable things that stand out to me.

00:07:50.480 --> 00:07:56.940
One, it supports async and await and it supports multi-threading at the rust layer.

00:07:56.940 --> 00:08:01.460
So combine those two things and you might end up in a really interesting situation, which

00:08:01.460 --> 00:08:05.240
is probably where it's getting a lot of its, its high numbers in that benchmark from.

00:08:05.240 --> 00:08:05.640
Yeah.

00:08:05.640 --> 00:08:06.700
So that's great.

00:08:06.700 --> 00:08:07.900
It looks really simple.

00:08:07.900 --> 00:08:12.860
You know, it's very Flask or FastAPI like, so that's cool.

00:08:12.860 --> 00:08:17.600
One thing that's notably missing that I haven't seen is like, how do I render?

00:08:17.600 --> 00:08:19.140
I'm going to transfer an HTML page from it.

00:08:19.140 --> 00:08:23.480
It shows how to serve static files, which can be an HTML page, but I'm thinking, you know,

00:08:23.480 --> 00:08:27.020
Jinja templates, Chameleon templates, equivalent of Django templates.

00:08:27.020 --> 00:08:31.420
Like, like that's sort of the missing bit of a dynamic interactive website.

00:08:31.420 --> 00:08:32.100
Yeah.

00:08:32.440 --> 00:08:33.440
That also has an API.

00:08:33.440 --> 00:08:39.080
You could, you could just import Jinja and configure it yourself or import Chameleon and configure

00:08:39.080 --> 00:08:39.540
itself.

00:08:39.540 --> 00:08:45.100
And I've done that in some of my like, decorator API or a wrapper things for adding

00:08:45.100 --> 00:08:46.780
that onto API calls.

00:08:46.780 --> 00:08:51.500
But you know, that's just a layer of a thing you've got to learn to use it instead of just

00:08:51.500 --> 00:08:54.060
saying, here's a template or render this template or, or whatever.

00:08:54.060 --> 00:08:54.320
Right.

00:08:54.320 --> 00:08:58.580
So, I would love to see some sort of template support come built in.

00:08:58.580 --> 00:08:59.480
Yeah.

00:08:59.480 --> 00:09:03.200
And I, and I think that's something that definitely could be put in place.

00:09:03.200 --> 00:09:03.960
Um, and then there's.

00:09:03.960 --> 00:09:04.080
Sure.

00:09:04.080 --> 00:09:05.900
No, it's actually not very hard at all.

00:09:05.900 --> 00:09:08.240
It's just, it just doesn't, I just didn't say that's all.

00:09:08.640 --> 00:09:12.360
Um, so target market, maybe just APIs.

00:09:12.360 --> 00:09:18.840
Um, yeah, it's got a lot of examples of, of, JSON type of exchange, right?

00:09:18.840 --> 00:09:19.240
Yeah.

00:09:19.240 --> 00:09:19.860
Anya, what do you think?

00:09:19.860 --> 00:09:21.720
Um, yeah, I was going to ask, what does that come with?

00:09:21.720 --> 00:09:25.640
Like when you pip install it, what other packages does that come with it?

00:09:25.640 --> 00:09:26.820
It doesn't, does it indicate?

00:09:26.820 --> 00:09:27.860
I'm just curious.

00:09:27.860 --> 00:09:32.820
Well, it's, we could look, I don't think there's much else there.

00:09:32.820 --> 00:09:34.380
Uh, we've got the, uh.

00:09:34.380 --> 00:09:35.780
There's very little here.

00:09:35.780 --> 00:09:36.420
Okay.

00:09:36.420 --> 00:09:37.480
Yeah.

00:09:37.640 --> 00:09:39.500
Uh, yeah.

00:09:39.500 --> 00:09:43.520
If you look at, Brian, open up the, just the requirements.txt file there.

00:09:43.520 --> 00:09:48.720
Um, and you'll get, see it's like, I was the last file there.

00:09:48.720 --> 00:09:49.080
Okay.

00:09:49.080 --> 00:09:51.740
Like, like that's the, that's the super small list.

00:09:51.740 --> 00:09:52.480
Oh, wow.

00:09:52.480 --> 00:09:52.820
Okay.

00:09:52.820 --> 00:09:53.360
Yeah.

00:09:53.360 --> 00:09:54.720
I mean, you have to start somewhere, right?

00:09:54.720 --> 00:09:56.320
So I think it is definitely a good start.

00:09:56.320 --> 00:10:00.860
Um, it does seem like a lot of the, not a lot, maybe the last few frameworks, web frameworks

00:10:00.860 --> 00:10:04.020
that have come out in Python here, you know, they do kind of model after flask.

00:10:04.020 --> 00:10:05.420
Um, yeah, yeah, yeah.

00:10:05.420 --> 00:10:05.960
Yeah.

00:10:05.960 --> 00:10:08.600
I've been doing quite a bit in FastAPI and, and flask as well.

00:10:08.600 --> 00:10:09.200
2.0.

00:10:09.200 --> 00:10:09.700
Yeah.

00:10:09.700 --> 00:10:09.980
Cool.

00:10:09.980 --> 00:10:10.200
Yeah.

00:10:10.200 --> 00:10:15.920
I think flask is, has become very popular in its own right, but it also, its idea of how

00:10:15.920 --> 00:10:20.260
web apps should look in Python has spread to all the other frameworks that are kind of new,

00:10:20.260 --> 00:10:20.460
right?

00:10:20.460 --> 00:10:22.740
Like FastAPI is a variation on that.

00:10:22.740 --> 00:10:22.960
Yeah.

00:10:22.960 --> 00:10:23.240
Yeah.

00:10:23.580 --> 00:10:27.560
And I can't remember where I read it, but there's, there was a, part of this

00:10:27.560 --> 00:10:32.700
Robin documentation that talked about just, it was like almost started out as a,

00:10:32.700 --> 00:10:38.100
I think a college project or something of like, what if I built flask, but async and it, or

00:10:38.100 --> 00:10:41.500
in the target, it ends up being sort of like FastAPI.

00:10:41.500 --> 00:10:47.020
So FastAPI, yes, you can render websites with it, but the original focus wasn't websites.

00:10:47.020 --> 00:10:48.560
Uh, it was APIs.

00:10:48.560 --> 00:10:55.200
Um, and, and I think this is, it's even in an earlier stage thing than FastAPI.

00:10:55.200 --> 00:10:57.700
So I think it's definitely worth watching.

00:10:57.700 --> 00:11:03.920
Uh, one of the apparent, there is a talk from last fall, that's linked to on, I think the

00:11:03.920 --> 00:11:10.860
main page and then, Henry, Shriner in the audience says Robin had a lightning talk

00:11:10.860 --> 00:11:11.440
at PyCon.

00:11:11.440 --> 00:11:12.940
So check that out too.

00:11:12.940 --> 00:11:13.580
Oh, nice.

00:11:13.580 --> 00:11:13.840
Yeah.

00:11:13.840 --> 00:11:14.320
I will.

00:11:14.320 --> 00:11:14.560
Yeah.

00:11:14.560 --> 00:11:16.780
I shouldn't hear about that, but nice.

00:11:16.780 --> 00:11:18.140
So, yeah, absolutely.

00:11:18.140 --> 00:11:21.600
Brian's crying out, scroll down to just where it says why another framework real quick.

00:11:21.600 --> 00:11:22.920
Just a bit more.

00:11:22.920 --> 00:11:23.620
Yeah.

00:11:23.620 --> 00:11:27.880
So one of the interests, this, this is pretty interesting to me and it could be a sign of

00:11:27.880 --> 00:11:30.980
things to come, or it could be just really great for Robin.

00:11:30.980 --> 00:11:35.360
It says one of the things they're trying to get around is the execution.

00:11:35.360 --> 00:11:39.940
Traditionally, a lot of these frameworks has been with Python.

00:11:39.940 --> 00:11:45.220
So Python has the gill, which is rough on, parallelization and so on.

00:11:45.300 --> 00:11:51.240
It says this is using the rust runtime and server, which attempts to work around the GIL in order

00:11:51.240 --> 00:11:52.420
to improve performance.

00:11:52.420 --> 00:11:57.320
So if you could set yourself free from the gill, I don't know, maybe it hosts like multiple

00:11:57.320 --> 00:12:00.660
little pythons per thread or something.

00:12:00.660 --> 00:12:01.520
That's pretty cool.

00:12:01.520 --> 00:12:05.840
That's one of the things I'm wondering is if, if the runtime's in rust, how is it launching

00:12:05.840 --> 00:12:08.020
your code, for the callbacks?

00:12:08.020 --> 00:12:09.040
But I don't know.

00:12:09.040 --> 00:12:13.060
There is a, the documentation does have a, architecture docs.

00:12:13.060 --> 00:12:16.960
So if you're actually, it's very well documented architecture wise, it's not well documented

00:12:16.960 --> 00:12:19.380
for how to use it wise, but yeah.

00:12:19.380 --> 00:12:19.500
Yeah.

00:12:19.500 --> 00:12:19.960
Yeah.

00:12:19.960 --> 00:12:20.400
Indeed.

00:12:20.400 --> 00:12:21.080
All right.

00:12:21.080 --> 00:12:21.360
Well, good.

00:12:21.360 --> 00:12:21.560
Fine.

00:12:21.560 --> 00:12:22.440
That one's, that one's great.

00:12:22.440 --> 00:12:22.900
All right.

00:12:22.900 --> 00:12:24.980
Tonya off, off to your item next.

00:12:24.980 --> 00:12:26.020
All right.

00:12:26.320 --> 00:12:29.340
Uh, this is, this is sports apply.

00:12:29.340 --> 00:12:33.580
Um, so, so somebody told, I mean, okay.

00:12:33.580 --> 00:12:35.700
So for those of you who don't know, I'm really big into sports, right?

00:12:35.700 --> 00:12:41.660
Like I'm a huge, NBA, NFL, baseball, hockey, football fan.

00:12:41.660 --> 00:12:48.400
Um, so I'm doing a lot now with, you know, writing some web application, sports web

00:12:48.400 --> 00:12:48.920
application.

00:12:48.920 --> 00:12:55.040
So this is a library that somebody sent me, called sports apply to free sports API

00:12:55.040 --> 00:12:55.960
to written for Python.

00:12:55.960 --> 00:13:02.740
And, what it does, it actually pulls stats from, sports reference.com.

00:13:02.740 --> 00:13:05.520
I believe it's sports dash reference.com.

00:13:05.520 --> 00:13:07.300
And that site, it's a great website.

00:13:07.300 --> 00:13:13.080
That site is for getting sports, statistics for like professional sports, like the NBA, NFL,

00:13:13.080 --> 00:13:16.960
NHL, major league baseball and college basketball and football.

00:13:16.960 --> 00:13:19.620
And it's funny because yeah, it is really cool.

00:13:19.620 --> 00:13:23.800
And that site, it looks like a sports reference.com looks kind of looks like a, you know, like

00:13:23.800 --> 00:13:25.600
an HTML site from like the nineties.

00:13:25.800 --> 00:13:28.200
It does look like the dream of the nineties is alive.

00:13:28.200 --> 00:13:28.620
Doesn't it?

00:13:28.620 --> 00:13:29.080
Doesn't it?

00:13:29.080 --> 00:13:30.500
Oh my goodness.

00:13:30.500 --> 00:13:31.740
Yeah, it really does.

00:13:31.740 --> 00:13:35.460
So I think it's also great for, you know, if you want to like learn or do some like web

00:13:35.460 --> 00:13:37.640
scraping, but of course, you know, email the site owners first.

00:13:37.640 --> 00:13:38.980
I believe that is a lot on that site.

00:13:38.980 --> 00:13:41.860
But anyway, so back to the API of sports apply.

00:13:42.360 --> 00:13:48.660
You can get like a lot of API queries for like all the, you know, mainly like the North American

00:13:48.660 --> 00:13:53.360
sports that was saying like the NBA, NFL, National Hockey League, Major League Baseball.

00:13:53.360 --> 00:14:00.060
You can get like the list of teams for that sport, the date and time of games, the total

00:14:00.060 --> 00:14:03.800
number of wins for a team during the season and much more.

00:14:03.900 --> 00:14:07.400
You can also get stats from players and from box scores.

00:14:07.400 --> 00:14:12.360
So, you know, you can build some cool stuff around sports and how teams or players perform

00:14:12.360 --> 00:14:16.540
during a game or during a season or do even do something even better with it.

00:14:16.540 --> 00:14:17.880
This is super cool.

00:14:18.300 --> 00:14:22.120
It's got a kind of a nice object oriented model.

00:14:22.120 --> 00:14:27.740
So like, you know, from sports apply dot NFL dot teams, import teams, and then you can create

00:14:27.740 --> 00:14:30.640
a like a Detroit team or yeah, or whatever.

00:14:30.640 --> 00:14:36.260
And then or Purdue and get their schedule even has integration with pandas.

00:14:36.260 --> 00:14:37.920
So you get like a data frame out.

00:14:37.920 --> 00:14:38.700
This is neat.

00:14:38.700 --> 00:14:40.760
Yeah, I haven't used this one yet.

00:14:40.760 --> 00:14:43.840
I just had another one that we'll talk about later this this afternoon.

00:14:44.300 --> 00:14:49.000
But yeah, I want to try this out as well, because like I was saying, I'm always on sports

00:14:49.000 --> 00:14:49.860
reference dot com.

00:14:49.860 --> 00:14:52.020
Just check out the stats from the games.

00:14:52.020 --> 00:14:58.140
People ask me a lot of times for API so they can build interesting examples or play around

00:14:58.140 --> 00:14:58.540
and stuff.

00:14:58.540 --> 00:15:03.980
And it's so much of this tied into either college or professional sports.

00:15:03.980 --> 00:15:06.320
That information is really wrapped up and hard to get.

00:15:06.320 --> 00:15:06.860
Right.

00:15:06.860 --> 00:15:07.340
It is.

00:15:07.340 --> 00:15:08.020
Yes.

00:15:08.020 --> 00:15:08.720
Yeah.

00:15:08.720 --> 00:15:10.120
It has been for a long time.

00:15:10.120 --> 00:15:14.740
I think it's becoming a little, I mean, I don't know, a little easier, but it's for

00:15:14.740 --> 00:15:15.140
some reason.

00:15:15.140 --> 00:15:18.880
I remember like five, seven years ago that I wanted to do stuff with sports, like build

00:15:18.880 --> 00:15:23.840
applications with sports, but I couldn't find an API that had no sports data.

00:15:23.840 --> 00:15:25.240
Everything was kind of locked down.

00:15:25.240 --> 00:15:25.700
Yeah.

00:15:25.700 --> 00:15:25.960
Yeah.

00:15:25.960 --> 00:15:28.980
Well, I can start with this five year old CSV file.

00:15:28.980 --> 00:15:30.160
I guess that's what I'm going to feel.

00:15:30.160 --> 00:15:32.340
It's not so inspiring, but this looks really good.

00:15:32.340 --> 00:15:32.860
Yeah.

00:15:32.860 --> 00:15:33.280
Cool.

00:15:33.280 --> 00:15:33.820
Great.

00:15:33.820 --> 00:15:34.480
Cool.

00:15:34.480 --> 00:15:35.020
Great.

00:15:35.020 --> 00:15:35.660
All right.

00:15:35.660 --> 00:15:41.680
Now, before we move on, Brian, let me tell you about our sponsor for this week.

00:15:41.680 --> 00:15:41.980
Okay.

00:15:41.980 --> 00:15:42.560
Okay.

00:15:42.560 --> 00:15:48.720
So this episode is brought to you by compiler from a podcast from Red Hat.

00:15:48.720 --> 00:15:52.440
So just like you all out there listening, Brian and I are fans of podcasts.

00:15:52.440 --> 00:16:00.680
I'm happy to share a new one from Red Hat compiler and open an original podcast from Red

00:16:00.680 --> 00:16:00.840
Hat.

00:16:00.840 --> 00:16:05.180
So with more and more of us working from home, it's important to keep human connections

00:16:05.180 --> 00:16:08.260
and not just be stuck in our work from home setup.

00:16:08.260 --> 00:16:13.720
And compiler unravels industry topics and trends and things you always want to know through interviews

00:16:13.720 --> 00:16:19.140
with people who know it best and telling the stories of technology, not just the hows of it.

00:16:19.140 --> 00:16:24.320
So on compiler, you can hear a chorus of perspectives from diverse communities behind the code.

00:16:24.320 --> 00:16:28.320
These conversations include answering big questions like what is technical debt?

00:16:28.320 --> 00:16:31.120
What are tech hiring managers actually looking for?

00:16:31.120 --> 00:16:34.840
And do you have to know how to code to get started in open source?

00:16:34.840 --> 00:16:39.840
I actually was a guest on Red Hat's previous podcast, Command Line Heroes for their Python

00:16:39.840 --> 00:16:40.240
episode.

00:16:40.240 --> 00:16:46.580
And it was super well done, really polished and compiler follows along in that excellent tradition.

00:16:47.060 --> 00:16:51.380
So I checked out episode 12 of compiler, how we should handle failure, you know, really

00:16:51.380 --> 00:16:58.200
creating a space for people to grow technically and not get fired just for one mistake.

00:16:58.200 --> 00:17:02.380
But how do you create an environment where people are willing to grow and try things like, well,

00:17:02.380 --> 00:17:03.640
let's try out Robin and try that.

00:17:03.640 --> 00:17:05.600
And if it doesn't work, well, we gave it a good try.

00:17:05.600 --> 00:17:06.420
You know, you've learned something.

00:17:06.420 --> 00:17:10.460
So learn more about them at pythonbytes.fm/compiler.

00:17:10.460 --> 00:17:12.600
The link is in your podcast player show notes.

00:17:12.900 --> 00:17:16.460
I know you all out there listening, you can just go to your podcast app and type compiler,

00:17:16.460 --> 00:17:20.760
but please visit pythonbytes.fm/compiler and just click the link for your podcast player.

00:17:20.760 --> 00:17:22.640
There's like tons of them here.

00:17:22.640 --> 00:17:24.780
That way they know it came from us.

00:17:24.780 --> 00:17:27.660
So thank you, Red Hat and compiler for supporting our show.

00:17:27.660 --> 00:17:29.560
All right, Brian, you ready for the next one?

00:17:29.560 --> 00:17:30.340
I am.

00:17:30.340 --> 00:17:32.500
Give us a shot of terminals.

00:17:32.500 --> 00:17:33.600
A shot of terminals.

00:17:33.600 --> 00:17:35.680
I seem to have messed up my tabs though.

00:17:35.680 --> 00:17:37.800
So let me just open that back up here.

00:17:37.800 --> 00:17:38.460
Here we go.

00:17:38.460 --> 00:17:41.500
So this one comes to me, I believe from Jay Miller.

00:17:41.620 --> 00:17:43.300
I'm pretty sure he's the one who told me about it.

00:17:43.300 --> 00:17:44.060
So thank you, Jay.

00:17:44.060 --> 00:17:46.160
And the idea is really simple.

00:17:46.160 --> 00:17:51.200
I want to create a screenshot of something I'm doing for a demo code.

00:17:51.200 --> 00:17:54.240
You know, I create a lot of courses and presentations.

00:17:54.240 --> 00:17:55.700
So it's super helpful for that.

00:17:55.700 --> 00:17:59.520
Tanya's doing DevRel and she's, I'm sure, doing lots of presentations where there's like,

00:17:59.520 --> 00:18:02.960
I need a screenshot of this thing and Brian for books and so on.

00:18:02.960 --> 00:18:03.820
Yeah, I could totally use it.

00:18:03.820 --> 00:18:06.740
So this might, yeah, this thing might turn out to be super useful.

00:18:06.740 --> 00:18:14.340
So what it is it's a thing you brew install it and then, or there's different ways in which

00:18:14.340 --> 00:18:15.060
you can install it.

00:18:15.060 --> 00:18:18.580
It's a little bit like carbon.now.sh or if people have seen that.

00:18:18.580 --> 00:18:25.160
And you can capture some kind of output in your terminal exactly like it looks directly to an

00:18:25.160 --> 00:18:25.420
image.

00:18:25.420 --> 00:18:29.740
And you can even, you know, specify, I would like to pipe that directly to whatever

00:18:29.740 --> 00:18:32.280
app you edit screenshots in.

00:18:32.280 --> 00:18:34.700
So for example, I use Pixelmator Pro.

00:18:34.700 --> 00:18:40.080
So I might just say, take this, run this command, take the screenshot and then open it in Pixelmator

00:18:40.080 --> 00:18:42.340
Pro go and stuff like that.

00:18:42.340 --> 00:18:43.420
So really, really nice.

00:18:43.420 --> 00:18:46.060
The way you run it, it's a little bit like time or watch or perf.

00:18:46.060 --> 00:18:52.420
So you just say term shot and then like Python, some file or whatever it is you're trying

00:18:52.420 --> 00:18:52.740
to do.

00:18:52.740 --> 00:18:55.760
Here's an example of one that I did on.

00:18:55.760 --> 00:19:03.880
This is a program using Colorama to make interesting colors on the screen, doing async and await examples

00:19:03.880 --> 00:19:09.500
of like doing a bunch of requests against Talk Python and then pulling back the titles using Beautiful

00:19:09.500 --> 00:19:09.780
Soup.

00:19:09.920 --> 00:19:15.240
And I just said term shot, Python, program, boom, and out it comes with this really nice

00:19:15.240 --> 00:19:15.800
looking picture.

00:19:15.800 --> 00:19:17.300
Exactly the right size.

00:19:17.300 --> 00:19:21.520
So however long the scroll back is, like that's the size of the screenshot.

00:19:21.520 --> 00:19:26.160
You don't have to like, you know, take a picture, scroll down some, take another picture, try to fit it

00:19:26.160 --> 00:19:28.720
back together, all that kind of weirdness.

00:19:28.720 --> 00:19:30.280
So yeah, really neat.

00:19:30.280 --> 00:19:30.980
Yeah.

00:19:30.980 --> 00:19:37.200
And then the final thing is, if for some reason it's more complicated than one line of just

00:19:37.200 --> 00:19:40.220
Python this, but you're like, I want to run three commands.

00:19:40.220 --> 00:19:44.940
So maybe what I want to do is I want to show that I'm SSHing into a server, then I'm running

00:19:44.940 --> 00:19:49.200
this command and then I'm open, you know, I'm seeing the result of that or something like

00:19:49.200 --> 00:19:50.120
that through like LS.

00:19:50.120 --> 00:19:56.280
So if, if all else fails, you just type term shot and you give it some shell, like you could

00:19:56.280 --> 00:20:01.020
say slash bin slash Z shell, ZSH or slash bin slash bash.

00:20:01.020 --> 00:20:02.040
You do your work.

00:20:02.040 --> 00:20:06.580
And once you exit the shell, it'll just take a screenshot of like whatever you did while you

00:20:06.580 --> 00:20:07.060
were in there.

00:20:07.060 --> 00:20:09.460
So that's also pretty good.

00:20:09.460 --> 00:20:11.100
That takes less thinking.

00:20:11.100 --> 00:20:11.940
I like that.

00:20:11.940 --> 00:20:12.560
Yeah, it does.

00:20:12.560 --> 00:20:13.680
Exactly.

00:20:13.680 --> 00:20:14.100
So.

00:20:14.100 --> 00:20:15.080
Yeah.

00:20:15.080 --> 00:20:15.620
It's so interesting.

00:20:15.620 --> 00:20:18.020
You're, you're mentioning a color ammo, Michael.

00:20:18.020 --> 00:20:19.580
I learned about color ammo from you.

00:20:19.580 --> 00:20:19.980
Actually.

00:20:19.980 --> 00:20:24.040
I took your, your async, asynchronous programming course.

00:20:24.040 --> 00:20:24.780
Oh, you did.

00:20:24.780 --> 00:20:25.560
Oh, yeah, I did.

00:20:25.560 --> 00:20:25.800
Yeah.

00:20:25.800 --> 00:20:26.040
On.

00:20:26.040 --> 00:20:26.340
Yeah.

00:20:26.340 --> 00:20:27.020
Thank you.

00:20:27.020 --> 00:20:27.400
Yeah.

00:20:27.400 --> 00:20:27.760
You're awesome.

00:20:27.760 --> 00:20:27.960
Yeah.

00:20:27.960 --> 00:20:28.380
Of course.

00:20:28.380 --> 00:20:28.620
Yeah.

00:20:28.620 --> 00:20:30.500
That example was from that, that course for sure.

00:20:30.500 --> 00:20:30.800
Okay.

00:20:30.800 --> 00:20:31.060
Yeah.

00:20:31.060 --> 00:20:31.460
Yeah.

00:20:31.460 --> 00:20:32.020
I look familiar.

00:20:32.020 --> 00:20:32.940
Nice.

00:20:32.940 --> 00:20:33.160
Cool.

00:20:33.520 --> 00:20:33.640
Yeah.

00:20:33.640 --> 00:20:37.300
What I thought was neat about it is it like, even with just non-standard print output and

00:20:37.300 --> 00:20:40.540
stuff, it still captures it, you know, reliably, which is, which is nice.

00:20:40.540 --> 00:20:44.800
So when you run that command, it, it takes a screenshot and it saves it to, I don't know,

00:20:44.800 --> 00:20:49.920
your desktop or, so now like with carbon, you can, you, you know, you can like click

00:20:49.920 --> 00:20:52.380
a button and it'll save it, you know, or to save it.

00:20:52.380 --> 00:20:54.440
And then you can just paste it into wherever you want.

00:20:54.440 --> 00:20:55.200
Yeah, exactly.

00:20:55.200 --> 00:20:59.160
I don't think it goes to your, I think it goes to whatever working directory you happen to

00:20:59.160 --> 00:20:59.500
be in.

00:20:59.660 --> 00:21:00.060
Okay.

00:21:00.060 --> 00:21:03.760
Just wherever you ran the command in that directory, there's an out dot PNG.

00:21:03.760 --> 00:21:04.600
Okay.

00:21:04.600 --> 00:21:09.520
There's probably ways to specify it or whatever, but by default, it just drops that PNG file

00:21:09.520 --> 00:21:09.680
there.

00:21:09.680 --> 00:21:09.880
Yeah.

00:21:09.880 --> 00:21:12.100
It's super handy for presentations, I think.

00:21:12.100 --> 00:21:12.580
Yeah.

00:21:12.580 --> 00:21:13.280
All right.

00:21:13.280 --> 00:21:13.780
Over to you, Ryan.

00:21:13.780 --> 00:21:17.080
Well, I want to talk about the gill.

00:21:17.080 --> 00:21:22.220
Uh, we talked about it a little bit earlier, but, so it, our Turner,

00:21:22.220 --> 00:21:29.620
um, wrote an article called, when, when Python can't thread a deep dive into the gills

00:21:29.620 --> 00:21:30.260
impact.

00:21:30.260 --> 00:21:36.300
And what I really like about this article is just that the, the focus of it is to try to

00:21:36.300 --> 00:21:42.920
build, not, not the specifics of everything around the gill, but as a user of Python, what's

00:21:42.920 --> 00:21:49.600
the mental model that you need to, to be able to utilize threading and multiprocessing

00:21:49.600 --> 00:21:55.100
and, and different extensions correctly to try to figure this out so that you just have

00:21:55.100 --> 00:21:58.840
a gut feel for how things work so that you can work through it and everything.

00:21:58.840 --> 00:22:01.920
Um, there's a, a little bit, it's kind of in the middle of the article.

00:22:01.920 --> 00:22:07.820
There's, mental model that he presents and I'm, I'd like to talk about a little bit,

00:22:07.820 --> 00:22:12.480
some of the other cool aspects of the article, but first the mental model he's going for is

00:22:12.480 --> 00:22:17.000
a thread must hold the GIL to call a CPython API.

00:22:17.000 --> 00:22:24.880
Um, and, the, the, so anything that any Python code that's using, API like built

00:22:24.880 --> 00:22:30.120
in Python calls is, is going to block because it's going to grab the gill.

00:22:30.120 --> 00:22:35.660
Um, other threads can't run if the GIL is there, but if you're doing pure Python stuff,

00:22:35.660 --> 00:22:40.300
um, your stuff gets interrupted every five milliseconds automatically.

00:22:40.300 --> 00:22:42.940
I didn't know this, but that's kind of cool.

00:22:42.940 --> 00:22:44.640
Um, long running things.

00:22:44.640 --> 00:22:51.040
So if you have a sleep or some other extra process that takes a long time, not Python

00:22:51.040 --> 00:22:56.340
code going through, but, but like a sleep or something, or, you know, probably don't have

00:22:56.340 --> 00:23:00.040
a long sleep, but maybe you're reading a file or something, something that talking

00:23:00.040 --> 00:23:01.320
into a database, something like that.

00:23:01.320 --> 00:23:01.600
Yeah.

00:23:01.600 --> 00:23:04.920
It doesn't automatically interrupt every five milliseconds.

00:23:04.920 --> 00:23:06.660
So the five milliseconds isn't guaranteed.

00:23:06.660 --> 00:23:08.920
So there's blocking prop possibilities.

00:23:08.920 --> 00:23:17.020
Um, and then, Python extensions written in C, or rust or something can explicitly

00:23:17.020 --> 00:23:19.180
release the GIL to allow.

00:23:19.180 --> 00:23:22.000
So you can get around this with extensions and stuff.

00:23:22.000 --> 00:23:28.260
So this is this, that's the mental model, but to really sync at home, he's got a

00:23:28.260 --> 00:23:30.800
whole bunch of these profiling graphs that are great.

00:23:30.800 --> 00:23:35.860
So here's an example of a little, program that starts, there's like two functions.

00:23:35.860 --> 00:23:37.900
There's a, it's really a main and a go.

00:23:38.160 --> 00:23:40.880
And essentially you end up with two threads.

00:23:40.880 --> 00:23:43.240
Like the thread starts this go thing.

00:23:43.240 --> 00:23:46.140
And then you run go within the main thread also.

00:23:46.140 --> 00:23:51.180
So what this has done is just doing like some summing of a whole bunch of numbers, but the

00:23:51.180 --> 00:23:53.260
example is just to keep busy for a while.

00:23:53.260 --> 00:23:56.860
And, and, and then look at what happens.

00:23:56.940 --> 00:24:02.460
And what happens is you've get, you get these, these shifts of like one of them is spinning

00:24:02.460 --> 00:24:07.920
around, but the other one's just, you know, this toggling back and forth that happens

00:24:07.920 --> 00:24:08.700
kind of cool.

00:24:08.700 --> 00:24:13.920
There's, the, the, all the different models that can happen.

00:24:13.920 --> 00:24:18.960
And like, here's one where you're, let's see, what are we doing here?

00:24:18.960 --> 00:24:20.960
Uh, it's sleeping for a while.

00:24:20.960 --> 00:24:22.360
So it's completely blocked.

00:24:22.360 --> 00:24:26.100
So you've got one thread that's just completely blocked for a long time.

00:24:26.360 --> 00:24:31.400
And, and the visuals of the profile are great to, to visualize what's going on.

00:24:31.400 --> 00:24:36.820
So anyway, at the end of the article, he talks about how to get around it and when,

00:24:36.820 --> 00:24:41.820
when and where and how to use different models like async and extensions and things like that.

00:24:41.820 --> 00:24:45.920
So, anybody that's really caring about this sort of stuff, I think this is a great

00:24:45.920 --> 00:24:46.240
article.

00:24:46.240 --> 00:24:49.000
The visualizations are quite neat.

00:24:49.000 --> 00:24:54.880
Uh, you know, instead of just saying you're spending this much time in a particular function,

00:24:54.880 --> 00:24:58.040
it says, and you're waiting or you're doing CPU work.

00:24:58.040 --> 00:24:58.300
Right.

00:24:58.300 --> 00:25:04.040
And you can actually see those side by side and see like the CPUs here because normal profilers

00:25:04.040 --> 00:25:07.980
will just tell you, well, you're spending time, you know, here, what are you doing?

00:25:07.980 --> 00:25:08.740
Yeah, exactly.

00:25:08.740 --> 00:25:08.980
Right.

00:25:09.340 --> 00:25:09.640
Yeah.

00:25:09.640 --> 00:25:10.800
It's really helpful.

00:25:10.800 --> 00:25:12.180
The visual, I don't know.

00:25:12.180 --> 00:25:12.980
I learned visually.

00:25:12.980 --> 00:25:16.000
I'm like three, you know, large visual learner.

00:25:16.000 --> 00:25:17.060
Um, yeah.

00:25:17.060 --> 00:25:21.380
Like the gills is something that's always kind of like, I don't know, it just was really confusing

00:25:21.380 --> 00:25:21.780
to me.

00:25:21.780 --> 00:25:25.760
You know, when I was first starting out and, getting into like more intermediate stuff,

00:25:25.760 --> 00:25:30.100
but I took this, it was like a Python deep dive course where the instructor really

00:25:30.100 --> 00:25:34.100
kind of like talk about things behind the language, you know?

00:25:34.100 --> 00:25:38.180
Um, so it really kind of helped me grasp and wrap my head around it more, but yeah, this

00:25:38.180 --> 00:25:38.540
is great.

00:25:38.540 --> 00:25:39.160
I love this.

00:25:39.160 --> 00:25:39.700
Yeah.

00:25:39.700 --> 00:25:40.720
Nice work at tomorrow.

00:25:40.720 --> 00:25:42.560
This is a definitely a good one.

00:25:42.560 --> 00:25:43.960
I like the pictures as well.

00:25:43.960 --> 00:25:45.380
All right.

00:25:45.380 --> 00:25:46.180
On.

00:25:46.180 --> 00:25:47.200
You want to take a satan?

00:25:47.200 --> 00:25:47.780
I apologize.

00:25:47.780 --> 00:25:50.300
I believe I switched the order of your two topics.

00:25:50.860 --> 00:25:51.340
That's okay.

00:25:51.340 --> 00:25:51.780
No worries.

00:25:51.780 --> 00:25:53.620
I hope I didn't throw you off there.

00:25:53.620 --> 00:25:54.580
That's okay.

00:25:54.580 --> 00:25:55.700
So this is the, yeah.

00:25:55.700 --> 00:25:55.920
Okay.

00:25:55.920 --> 00:25:57.780
So this one is the NBA API.

00:25:57.780 --> 00:26:02.820
So this one is just strictly for the NBA, the National Basketball Association.

00:26:02.820 --> 00:26:04.400
This is really close to home for you, right?

00:26:04.400 --> 00:26:04.900
This is like.

00:26:04.900 --> 00:26:05.260
Yeah.

00:26:05.260 --> 00:26:06.560
It's very close to home.

00:26:06.560 --> 00:26:06.840
Yes.

00:26:06.840 --> 00:26:07.800
It brings back memories.

00:26:07.800 --> 00:26:12.400
So, and right now with, you know, NBA playoffs happening, I think this is pretty

00:26:12.400 --> 00:26:12.820
exciting.

00:26:12.820 --> 00:26:17.180
Um, so this package is maintained by a gentleman named Suara Kertal.

00:26:17.180 --> 00:26:19.580
I mean, does a very great job of maintaining it.

00:26:19.580 --> 00:26:20.960
Um, it's very up to date.

00:26:20.960 --> 00:26:27.360
Um, this API pulls data from the, NBA.com, right?

00:26:27.360 --> 00:26:30.280
That's the official website of the National Basketball Association.

00:26:30.280 --> 00:26:35.640
Uh, with this, package, you get like more accessible endpoints.

00:26:35.640 --> 00:26:37.860
Uh, the documentation is really, really good.

00:26:37.860 --> 00:26:40.800
I think it's probably, you know, it's a really well-documented API.

00:26:40.800 --> 00:26:43.860
Um, let me see what else here.

00:26:43.860 --> 00:26:49.160
Um, the, the NBA.com API isn't as well-documented because

00:26:49.160 --> 00:26:52.760
you know, a lot of things change, you know, things change frequently, right?

00:26:52.760 --> 00:26:55.700
Like players are traded, players get injured, players retire.

00:26:55.700 --> 00:27:00.140
You have to take into account all the stats as well, like points per game, rebounds per

00:27:00.140 --> 00:27:01.160
game, and that type of thing.

00:27:01.160 --> 00:27:04.900
Um, so this package, the NBA package has tons of features.

00:27:04.900 --> 00:27:11.700
Um, like you can get information on players, teams, like, you know, more static data as well

00:27:11.700 --> 00:27:13.560
as like data that changes as well.

00:27:13.560 --> 00:27:14.920
Like, you know, their stats.

00:27:14.920 --> 00:27:21.460
Um, I think, their stats per game, per season, like their player game law, there's tons and tons

00:27:21.460 --> 00:27:21.860
of endpoints.

00:27:21.860 --> 00:27:26.160
So I would, if you want to work with this API, I recommend looking up the API endpoints.

00:27:26.160 --> 00:27:29.400
Uh, there's probably like over 40 of them.

00:27:29.400 --> 00:27:30.000
Wow.

00:27:30.000 --> 00:27:31.520
Maybe around 40 actually.

00:27:31.520 --> 00:27:33.600
Um, yeah, it's just really cool.

00:27:33.600 --> 00:27:38.820
I'm actually working with this right now and I'm writing a, doing a, sports,

00:27:38.820 --> 00:27:41.000
NBA ranking website right now.

00:27:41.000 --> 00:27:42.480
I'm using this, package.

00:27:42.480 --> 00:27:43.080
Fun.

00:27:43.080 --> 00:27:48.360
One of the things that's cool is it has a lot of search functionalities and not just direct

00:27:48.360 --> 00:27:53.740
by, you know, find me the team from this city or this name, but like, find teams

00:27:53.740 --> 00:27:55.440
by state or something.

00:27:55.440 --> 00:27:55.880
Yeah.

00:27:55.880 --> 00:27:56.360
Yeah.

00:27:56.360 --> 00:27:56.920
Yeah.

00:27:56.920 --> 00:27:57.740
It's definitely very clever.

00:27:57.740 --> 00:28:03.000
Um, and it, I would say between like the first thing we looked at is sports reference

00:28:03.000 --> 00:28:03.460
dot com.

00:28:03.460 --> 00:28:04.660
I don't know where they're pulling.

00:28:04.660 --> 00:28:06.760
I think I'm not sure where they're pulling their data.

00:28:06.760 --> 00:28:12.700
Sports reference, maybe from each individual site of the, you know, the sports associations,

00:28:12.700 --> 00:28:13.200
I'm guessing.

00:28:13.200 --> 00:28:13.760
Right.

00:28:13.760 --> 00:28:14.560
Okay.

00:28:14.560 --> 00:28:21.400
Um, but well, I mean, like for example, if the data from NBA has got to be more centralized

00:28:21.400 --> 00:28:24.720
than like all of the college ball stuff, right?

00:28:24.720 --> 00:28:25.220
Yeah.

00:28:25.220 --> 00:28:25.900
Yeah.

00:28:25.900 --> 00:28:26.700
This is cool.

00:28:26.700 --> 00:28:32.680
Even as important for live data here, like NBA dot live and points for scoreboard and all

00:28:32.680 --> 00:28:33.320
kinds of stuff.

00:28:33.320 --> 00:28:35.140
That looks, that looks pretty neat.

00:28:35.140 --> 00:28:35.400
Wow.

00:28:35.400 --> 00:28:37.580
This is some, there's a lot of data here.

00:28:37.580 --> 00:28:38.260
Yeah.

00:28:38.260 --> 00:28:40.520
You check out the notebooks, right?

00:28:40.520 --> 00:28:42.100
The notebooks seem to have some cool examples.

00:28:42.100 --> 00:28:42.160
Yeah.

00:28:42.160 --> 00:28:42.240
Yeah.

00:28:42.240 --> 00:28:43.980
I just have a notebooks and a new better notebooks they have.

00:28:43.980 --> 00:28:44.260
Yeah.

00:28:44.260 --> 00:28:44.840
Yeah.

00:28:44.840 --> 00:28:45.740
There's a lot of data.

00:28:45.740 --> 00:28:46.720
It's a very good.

00:28:46.720 --> 00:28:46.980
Yeah.

00:28:46.980 --> 00:28:48.120
It's pretty, pretty awesome.

00:28:48.280 --> 00:28:49.120
There's a lot that you can do.

00:28:49.120 --> 00:28:49.960
A lot of fun stuff.

00:28:49.960 --> 00:28:50.500
Cool.

00:28:50.500 --> 00:28:56.600
I know so many people want to build examples with sports and I think having some live data

00:28:56.600 --> 00:28:58.320
would be really, really neat.

00:28:58.320 --> 00:29:02.960
So, you know, like during, like you say, like right now during the playoffs or something,

00:29:02.960 --> 00:29:05.180
you could, you could do some fun things indeed.

00:29:05.180 --> 00:29:05.620
Yep.

00:29:05.620 --> 00:29:06.260
All right.

00:29:06.260 --> 00:29:08.220
Brian, is that our six items?

00:29:08.220 --> 00:29:09.500
It is.

00:29:09.500 --> 00:29:12.840
So do you have any, anything extra to share with us?

00:29:12.840 --> 00:29:18.760
I have, I think just a real quick, quick one here for us from Pablo.

00:29:18.760 --> 00:29:22.360
We have Python 3.11 beta one is here.

00:29:22.360 --> 00:29:24.000
So hurrah.

00:29:24.000 --> 00:29:30.500
This marks feature freeze, which means there'll be no new features or APIs, only bug fixes.

00:29:30.500 --> 00:29:36.300
So please, they say, if you maintain a Python package, help us test that everything works

00:29:36.300 --> 00:29:36.900
as expected.

00:29:36.900 --> 00:29:38.040
But this is pretty neat.

00:29:38.040 --> 00:29:38.640
Nice.

00:29:38.640 --> 00:29:39.240
Yeah.

00:29:39.240 --> 00:29:40.140
That's it for me.

00:29:41.080 --> 00:29:44.880
On that, I'm going to grab this just a second.

00:29:44.880 --> 00:29:47.160
We'll link to this as well.

00:29:47.160 --> 00:29:54.440
Simon Willison has a little blurb on like if you're using GitHub actions to test your packages,

00:29:54.440 --> 00:30:00.160
Simon has a code snippet for exactly how to do that.

00:30:00.160 --> 00:30:08.200
Essentially, the Python thing you want is Python 3.11-dev and make sure it's in quotes and just

00:30:08.200 --> 00:30:10.460
add that to your Python versions matrix.

00:30:10.460 --> 00:30:11.640
All right.

00:30:11.640 --> 00:30:12.160
Fantastic.

00:30:12.160 --> 00:30:12.720
Cool.

00:30:12.720 --> 00:30:14.820
So how about you, Tanya?

00:30:14.820 --> 00:30:15.840
Do you have any extras?

00:30:15.840 --> 00:30:17.800
That's pretty much it.

00:30:17.800 --> 00:30:21.500
Well, I do see some people in the chat that I've met at PyCon last week.

00:30:21.500 --> 00:30:21.800
Mario.

00:30:21.800 --> 00:30:22.360
Hey, Mario.

00:30:22.360 --> 00:30:23.700
I'm not sure if you're still here, but hello.

00:30:23.700 --> 00:30:24.840
Cool.

00:30:24.840 --> 00:30:25.760
Fantastic.

00:30:25.760 --> 00:30:25.960
Yeah.

00:30:25.960 --> 00:30:28.540
You just came back from PyCon and Brian and I were not there.

00:30:28.600 --> 00:30:33.280
You want to give us a quick report from being on scene?

00:30:33.280 --> 00:30:34.660
Yeah, it was amazing.

00:30:34.660 --> 00:30:35.820
It was my first Python.

00:30:35.820 --> 00:30:39.480
And actually, one of my first tech conferences, actually.

00:30:39.480 --> 00:30:40.760
It was great.

00:30:41.100 --> 00:30:44.660
I spent most of the time working on booths for DeepGram because we were helping to sponsor

00:30:44.660 --> 00:30:45.060
the event.

00:30:45.060 --> 00:30:54.140
I did catch a few talks and met so many amazing people and also just connected with people that

00:30:54.140 --> 00:31:01.180
I have been communicating with over the last several years via internet and chat and stuff

00:31:01.180 --> 00:31:01.540
like that.

00:31:01.540 --> 00:31:02.480
So it was just really fun.

00:31:02.480 --> 00:31:03.220
It was a good time.

00:31:03.220 --> 00:31:04.040
I love PyCon.

00:31:04.040 --> 00:31:05.840
I consider it my geek holiday.

00:31:05.840 --> 00:31:06.980
Yeah.

00:31:06.980 --> 00:31:09.560
I love to go there and meet so many of the people.

00:31:09.560 --> 00:31:10.480
Everyone's so accessible.

00:31:10.480 --> 00:31:16.020
And I spend most of my time just walking around looking to say hi to folks and whatnot.

00:31:16.020 --> 00:31:16.440
Yeah.

00:31:16.440 --> 00:31:17.900
So I have an idea, Michael.

00:31:17.900 --> 00:31:19.060
Maybe next year we should go.

00:31:19.060 --> 00:31:19.360
Yeah.

00:31:19.360 --> 00:31:20.300
Yeah.

00:31:20.300 --> 00:31:21.320
Maybe next year we should go.

00:31:21.320 --> 00:31:23.060
Yeah, definitely.

00:31:23.180 --> 00:31:24.900
I'm looking forward to getting back there.

00:31:24.900 --> 00:31:25.900
Well, do you have anything funny for us?

00:31:25.900 --> 00:31:26.600
Are you looking forward to a joke?

00:31:26.600 --> 00:31:27.300
Yeah.

00:31:27.300 --> 00:31:27.760
I do.

00:31:27.760 --> 00:31:29.520
Well, I have something for you.

00:31:29.520 --> 00:31:30.120
I'll let you know.

00:31:30.120 --> 00:31:31.180
You'll be the judge if it's funny.

00:31:31.180 --> 00:31:32.560
All right.

00:31:32.560 --> 00:31:33.740
So here's what I got.

00:31:33.740 --> 00:31:37.500
Brian, just maybe give us a quick description of what this picture is about here.

00:31:37.500 --> 00:31:39.260
I don't know.

00:31:39.260 --> 00:31:43.180
There's a guy who looks really stressed out holding his hand in front of his face.

00:31:43.180 --> 00:31:44.740
I think he's crying.

00:31:44.740 --> 00:31:46.220
I think he's crying, yeah.

00:31:46.220 --> 00:31:47.480
He's pretty sad.

00:31:47.480 --> 00:31:49.720
I mean, red eyes almost, just crying.

00:31:49.720 --> 00:31:49.940
Yeah.

00:31:50.380 --> 00:31:54.360
And so, you know, we all come to these websites and it's, you know, prove you're human and

00:31:54.360 --> 00:31:55.720
all these recapture things.

00:31:55.720 --> 00:31:59.700
And sometimes you're lucky and you're going to slide the puzzle over until like the dog

00:31:59.700 --> 00:32:05.460
fits in his house or something rather than find all, you know, highlight all the stoplights.

00:32:05.460 --> 00:32:05.800
Or anyways.

00:32:05.940 --> 00:32:12.580
So the joke is, with a very sad guy here asking, it says, when a computer asks, are you a robot?

00:32:12.580 --> 00:32:15.160
Maybe it's just wanting to find its family.

00:32:15.160 --> 00:32:18.280
Poor thing.

00:32:18.280 --> 00:32:19.540
Maybe it does.

00:32:19.540 --> 00:32:20.280
Maybe we're not.

00:32:20.280 --> 00:32:21.800
We should just be helping more.

00:32:21.800 --> 00:32:26.460
And, you know, every time we prove a recapture, it's just like, no, that's not my family.

00:32:26.460 --> 00:32:27.160
It's so funny.

00:32:27.160 --> 00:32:34.220
One of the funniest find this memes that I saw recently was just like a picture of space.

00:32:34.220 --> 00:32:39.400
And it said, click all the squares that have a Klingon bird of prey inside.

00:32:39.400 --> 00:32:43.680
Because they cloak, they're invisible.

00:32:43.680 --> 00:32:44.420
That's right, yes.

00:32:44.420 --> 00:32:45.040
Of course.

00:32:45.040 --> 00:32:47.780
Very good.

00:32:47.780 --> 00:32:48.160
Very good.

00:32:48.160 --> 00:32:49.880
Thanks again for having a great podcast.

00:32:49.880 --> 00:32:52.980
Thanks, Tanya, for showing up and doing this with us.

00:32:52.980 --> 00:32:53.800
Yeah.

00:32:53.800 --> 00:32:54.440
Thanks for having me.

00:32:54.440 --> 00:32:55.240
It was fun.

00:32:55.560 --> 00:32:57.240
Yeah, great to have you on here, Tanya.

