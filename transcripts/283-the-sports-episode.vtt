
00:00:00.000 --> 00:00:05.200
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.200 --> 00:00:09.600
This is episode 283, recorded May 10th. And I am Brian Okken.


00:00:09.600 --> 00:00:10.720
I'm Michael Kennedy.


00:00:10.720 --> 00:00:12.160
And I am Tanya Sentence.


00:00:12.160 --> 00:00:14.880
Well, welcome, Tanya. Since we're just meeting also,


00:00:14.880 --> 00:00:18.560
and some of our people might not know who you are, tell us a little bit about yourself.


00:00:18.560 --> 00:00:24.240
Sure. Well, thank you so much for having me today. I'm very excited to be here. So my name is Tanya,


00:00:24.240 --> 00:00:28.320
and I'm currently a Python developer advocate at a company called DeepGram.


00:00:28.320 --> 00:00:31.480
And so at DeepGram we do speech-to-text,


00:00:31.480 --> 00:00:33.880
speech recognition technology.


00:00:33.880 --> 00:00:35.800
I would say that my path to technology


00:00:35.800 --> 00:00:36.960
is a little bit unconventional.


00:00:36.960 --> 00:00:39.240
I come from an athletics background.


00:00:39.240 --> 00:00:41.520
I started playing basketball when I was five years old.


00:00:41.520 --> 00:00:43.520
I won't tell you how old I am now, but.


00:00:43.520 --> 00:00:46.040
(laughing)


00:00:46.040 --> 00:00:47.840
So yeah, so I played basketball in college,


00:00:47.840 --> 00:00:49.400
I played professionally in Europe,


00:00:49.400 --> 00:00:51.080
and a little bit in the WNBA,


00:00:51.080 --> 00:00:52.480
and then I got into sales,


00:00:52.480 --> 00:00:54.720
and then from sales I got into tech.


00:00:54.720 --> 00:00:56.360
So yes, it's been very unconventional.


00:00:56.360 --> 00:00:57.880
- That's pretty awesome.


00:00:57.880 --> 00:01:00.380
I wish we could jump in deeper, but yeah.


00:01:00.380 --> 00:01:01.840
- Yeah, that is super awesome.


00:01:01.840 --> 00:01:03.880
And you know, as you're telling us that,


00:01:03.880 --> 00:01:07.300
I'm listening and you think about all the stats


00:01:07.300 --> 00:01:09.940
and statistics and graphs and visualizations


00:01:09.940 --> 00:01:11.740
and optimizations of sports, right?


00:01:11.740 --> 00:01:13.700
Like these Python and programming skills


00:01:13.700 --> 00:01:15.260
are actually pretty relevant.


00:01:15.260 --> 00:01:18.540
Although maybe you were just deep down in the sport side


00:01:18.540 --> 00:01:20.580
and then got into programming afterwards.


00:01:20.580 --> 00:01:22.780
- Yeah, so yeah, I think you're totally right.


00:01:22.780 --> 00:01:24.660
I think Python is like the perfect language


00:01:24.660 --> 00:01:26.900
for doing a lot of stuff with like stats, like sports,


00:01:26.900 --> 00:01:28.860
such as the six and things like that,


00:01:28.860 --> 00:01:30.500
and like the visualization of it.


00:01:30.500 --> 00:01:32.580
But yeah, I started getting into coding


00:01:32.580 --> 00:01:34.180
when I was a kid actually,


00:01:34.180 --> 00:01:36.300
but then I stopped for a long time because,


00:01:36.300 --> 00:01:38.380
who would have thought list things about coding


00:01:38.380 --> 00:01:42.340
or computers would have taken off and be where it is today.


00:01:42.340 --> 00:01:43.500
>> Yeah, absolutely.


00:01:43.500 --> 00:01:43.940
>> Yeah.


00:01:43.940 --> 00:01:45.420
>> Fascinating as that is,


00:01:45.420 --> 00:01:47.220
let's take a different path, Michael.


00:01:47.220 --> 00:01:50.860
>> Yes, a different path and indeed a fine transition there, Brian.


00:01:50.860 --> 00:01:52.540
This one was sent over,


00:01:52.540 --> 00:01:55.660
recommended to us by one of our listeners, Spencer.


00:01:55.660 --> 00:01:58.020
So thank you, Spencer, for sending this in.


00:01:58.020 --> 00:02:00.980
And we talked about things like FS spec


00:02:00.980 --> 00:02:03.860
and other ways in which you could sort of abstract away,


00:02:03.860 --> 00:02:05.220
just like I'm talking to a file,


00:02:05.220 --> 00:02:08.500
but oh, hey, that happens to live on Azure Blob Storage


00:02:08.500 --> 00:02:11.740
or AWS or Google Cloud Storage or something like that.


00:02:11.740 --> 00:02:13.260
So this one is called Pathy,


00:02:13.260 --> 00:02:17.220
a path interface for local and cloud bucket storage.


00:02:17.220 --> 00:02:20.860
So if you've got data that's stored in, at the moment,


00:02:20.860 --> 00:02:23.940
AWS or Google Cloud Storage,


00:02:23.940 --> 00:02:25.980
And that AWS one, that's S3.


00:02:25.980 --> 00:02:29.220
So I suspect that means like Linode


00:02:29.220 --> 00:02:32.380
and any other S3 compatible storage.


00:02:32.380 --> 00:02:33.780
You know, there's many of these places


00:02:33.780 --> 00:02:35.860
that have object storage for their cloud services


00:02:35.860 --> 00:02:39.440
that are basically wrapping up the AWS story.


00:02:39.440 --> 00:02:40.760
So this might be much broader


00:02:40.760 --> 00:02:42.480
than actually just those two clouds.


00:02:42.480 --> 00:02:46.420
Anyway, the idea is that this is a Python package


00:02:46.420 --> 00:02:48.700
with type annotations they like to call out, which is great


00:02:48.700 --> 00:02:52.140
for working with cloud bucket storage using Pathlib.


00:02:52.140 --> 00:02:53.380
So Pathlib is great, right?


00:02:53.380 --> 00:02:56.620
we can create a pathlib and give it a path


00:02:56.620 --> 00:02:59.380
and it has things like make directory


00:02:59.380 --> 00:03:02.300
or the parent of the parent of this thing


00:03:02.300 --> 00:03:03.660
or does it exist and so on.


00:03:03.660 --> 00:03:05.620
So if you like working with path,


00:03:05.620 --> 00:03:08.180
the path class from pathlib,


00:03:08.180 --> 00:03:10.860
how about turning that loose against cloud storage?


00:03:10.860 --> 00:03:11.700
That's cool, huh?


00:03:11.700 --> 00:03:12.540
- Very, yeah.


00:03:12.540 --> 00:03:13.660
- Yeah, it's very awesome.


00:03:13.660 --> 00:03:15.620
- Yeah, so what's nice about it


00:03:15.620 --> 00:03:20.020
is you basically give it a URL with some type of scheme,


00:03:20.020 --> 00:03:22.740
you know, traditional schemes are like HTTP, HTTPS,


00:03:22.740 --> 00:03:25.500
but like GS for Google Cloud Storage


00:03:25.500 --> 00:03:29.180
or something in here that I'm not seeing for Azure,


00:03:29.180 --> 00:03:32.340
not Azure, AWS, but you give it just the prefix


00:03:32.340 --> 00:03:33.980
or you just give it a local file path


00:03:33.980 --> 00:03:36.320
and it will determine which that is


00:03:36.320 --> 00:03:38.340
and just start talking to that platform,


00:03:38.340 --> 00:03:40.940
which I think is actually pretty neat here.


00:03:40.940 --> 00:03:45.840
So yeah, basically if you wanna work with cloud storage


00:03:45.840 --> 00:03:48.340
using Pathlib, well then here you go.


00:03:48.340 --> 00:03:51.000
It also supports caching locally,


00:03:51.000 --> 00:03:54.480
which is neat because that's one way in which you could get


00:03:54.480 --> 00:03:56.800
all of your cloud files sort of downloaded


00:03:56.800 --> 00:03:58.680
and replicated locally as well.


00:03:58.680 --> 00:04:00.680
And then Spencer had a quick comment saying,


00:04:00.680 --> 00:04:03.600
"The really cool function is fluid."


00:04:03.600 --> 00:04:05.860
So down here, with fluid, you can take any type


00:04:05.860 --> 00:04:09.680
of local Google Cloud Storage or S3 path string,


00:04:09.680 --> 00:04:11.160
and it'll just give you a path object


00:04:11.160 --> 00:04:14.600
that lets you interact with it agnostic of the platform.


00:04:14.600 --> 00:04:17.640
So basically, like I was saying, you say S3 colon


00:04:17.640 --> 00:04:20.040
or GS colon or just a local path,


00:04:20.040 --> 00:04:22.080
and it'll just give you back a Pathlib


00:04:22.080 --> 00:04:23.080
and you don't care where it is.


00:04:23.080 --> 00:04:23.920
Is it in the cloud?


00:04:23.920 --> 00:04:24.740
Is it local?


00:04:24.740 --> 00:04:25.580
Who cares?


00:04:25.580 --> 00:04:27.000
Because it's just, you know,


00:04:27.000 --> 00:04:29.200
it's abstracted that away using Pathlib.


00:04:29.200 --> 00:04:31.000
And I don't know about you too,


00:04:31.000 --> 00:04:33.400
but I had been a bit of a holdout on Pathlib.


00:04:33.400 --> 00:04:36.640
It was all import, you know, system.io


00:04:36.640 --> 00:04:38.880
or import.io, whatever it was,


00:04:38.880 --> 00:04:41.440
and just use the IO way of working with it.


00:04:41.440 --> 00:04:44.000
But I've really come to like Path and Pathlib


00:04:44.000 --> 00:04:45.080
last year or two.


00:04:45.080 --> 00:04:47.960
- Yeah, I really, I love the interface.


00:04:47.960 --> 00:04:51.480
It's easier to program into me.


00:04:51.480 --> 00:04:54.680
Just feels easier, it feels more obvious.


00:04:54.680 --> 00:04:56.560
>> Yeah, this is great.


00:04:56.560 --> 00:04:59.520
I've been wanting to do more with Cloud technologies.


00:04:59.520 --> 00:05:01.840
I think this would be a really good place to start.


00:05:01.840 --> 00:05:05.240
>> Yeah, and so much of that possibility is just working


00:05:05.240 --> 00:05:07.400
with static files on S3 or


00:05:07.400 --> 00:05:10.080
static files in Blob Storage and other places.


00:05:10.080 --> 00:05:10.600
>> Yeah, sure.


00:05:10.600 --> 00:05:13.040
>> I'd love to not have to care about that.


00:05:13.040 --> 00:05:16.280
>> Yes. If I could just not do Boto3,


00:05:16.280 --> 00:05:20.260
That would be fantastic because that thing drives me crazy so much.


00:05:20.260 --> 00:05:21.740
Don't give me another rant.


00:05:21.740 --> 00:05:23.380
Ryan, talk about your topic.


00:05:23.380 --> 00:05:25.020
Save me from ranting about Boto3.


00:05:25.020 --> 00:05:27.520
>> Okay. Well, let's talk about Robin.


00:05:27.520 --> 00:05:30.220
Robin, for one, is just an awesome logo.


00:05:30.220 --> 00:05:32.860
>> It's a bird being hugged by a snake. I love it.


00:05:32.860 --> 00:05:36.100
>> That's pretty clever. What is Robin?


00:05:36.100 --> 00:05:43.020
There's a Robin is a async web server in runtime written in Rust.


00:05:43.020 --> 00:05:45.640
That's pretty cool and actually,


00:05:45.640 --> 00:05:48.800
it's kind of been taking off in popularity and stuff.


00:05:48.800 --> 00:05:50.240
But the, so there's,


00:05:50.240 --> 00:05:51.700
we're going to link to a bunch of stuff.


00:05:51.700 --> 00:05:56.360
One of them is the Hello Robin blog post written by the author.


00:05:56.360 --> 00:05:58.620
And so Robin is a fast,


00:05:58.620 --> 00:06:02.380
high-performance Python web framework with Rust runtime.


00:06:02.380 --> 00:06:03.480
So what does that mean?


00:06:03.480 --> 00:06:06.080
It means that it's kind of like Flask.


00:06:06.080 --> 00:06:08.720
It looks a lot like,


00:06:08.720 --> 00:06:10.740
in one of the examples,


00:06:10.740 --> 00:06:13.040
it looks a lot like just a little Flask thing.


00:06:13.040 --> 00:06:16.900
You can do app gets and app puts and different things.


00:06:16.900 --> 00:06:18.840
It's decorators. It's very new.


00:06:18.840 --> 00:06:20.620
There's a lot of work to be done,


00:06:20.620 --> 00:06:24.380
so there's not a lot of ecosystem around it yet,


00:06:24.380 --> 00:06:27.580
but it's pretty cool.


00:06:27.580 --> 00:06:29.220
I just like this idea of,


00:06:29.220 --> 00:06:33.000
well, let's make the code you write look like Python.


00:06:33.000 --> 00:06:36.540
It is Python, but the back-end stuff,


00:06:36.540 --> 00:06:41.420
maybe you don't care what that's running on and maybe Rust is fine.


00:06:41.420 --> 00:06:46.620
So one of the things it doesn't have an ASCII or ASGI or WSGI


00:06:46.620 --> 00:06:49.860
underlying, because that's a Python thing.


00:06:49.860 --> 00:06:50.820
It is async.


00:06:50.820 --> 00:06:52.140
It's very Flask-like.


00:06:52.140 --> 00:06:55.580
And the numbers kind of look impressive.


00:06:55.580 --> 00:06:57.300
And I know that benchmarks, you have


00:06:57.300 --> 00:07:01.260
to read those with a grain of salt. But still,


00:07:01.260 --> 00:07:03.780
requests per second getting--


00:07:03.780 --> 00:07:09.260
so we've got this document showing Flask with gunicorn


00:07:09.260 --> 00:07:15.980
at 1800 requests per second, but Robin going at 6400 requests per second.


00:07:15.980 --> 00:07:17.940
And this is this kind of insane.


00:07:17.940 --> 00:07:22.540
So definitely worth checking out and trying, I think, or maybe not trying,


00:07:22.540 --> 00:07:26.300
but just watching to see what this does, though, since it's very new, though.


00:07:26.300 --> 00:07:29.500
One of the things I have to say is there's there needs to be some


00:07:29.500 --> 00:07:35.300
it's not really newbie friendly then, I guess, because there's not a lot of docs yet.


00:07:35.300 --> 00:07:38.500
There is a there is a doc site started, but


00:07:38.940 --> 00:07:41.900
But there's a lot of work to do, but still getting started with it.


00:07:41.900 --> 00:07:44.780
If you have a really fast thing, it's pretty good.


00:07:44.780 --> 00:07:47.780
So, oh, go ahead.


00:07:47.780 --> 00:07:50.620
>> Yeah, well, a couple of notable things that stand out to me.


00:07:50.620 --> 00:07:53.580
One, it supports async and await,


00:07:53.580 --> 00:07:57.300
and it supports multi-threading at the rust layer.


00:07:57.300 --> 00:07:59.580
So combine those two things and you might end up in


00:07:59.580 --> 00:08:02.340
a really interesting situation which is probably where it's getting


00:08:02.340 --> 00:08:05.380
a lot of its high numbers in that benchmark from.


00:08:05.380 --> 00:08:05.780
>> Yeah.


00:08:05.780 --> 00:08:08.340
>> So that's great. It looks really simple.


00:08:08.340 --> 00:08:13.260
You know, it's very Flask or FastAPI like, so that's cool.


00:08:13.260 --> 00:08:16.220
One thing that's notably missing that I haven't seen


00:08:16.220 --> 00:08:19.500
is like, how do I render an HTML page from it?


00:08:19.500 --> 00:08:21.540
It shows how to serve static files,


00:08:21.540 --> 00:08:22.740
which can be an HTML page,


00:08:22.740 --> 00:08:25.180
but I'm thinking, you know, Jinja templates,


00:08:25.180 --> 00:08:27.100
Chameleon templates, equivalent of Django templates,


00:08:27.100 --> 00:08:29.260
like that's sort of the missing bit


00:08:29.260 --> 00:08:31.940
of a dynamic interactive website.


00:08:31.940 --> 00:08:32.780
- Yeah.


00:08:32.780 --> 00:08:33.740
- That also has an API.


00:08:33.740 --> 00:08:37.780
You could just import Jinja and configure it yourself


00:08:37.780 --> 00:08:39.620
import chameleon and configure itself.


00:08:39.620 --> 00:08:41.420
And I've done that in some of my like,


00:08:41.420 --> 00:08:44.260
decorator API or a wrapper things


00:08:44.260 --> 00:08:47.020
for adding that onto API calls.


00:08:47.020 --> 00:08:49.140
But you know, that's just a layer of


00:08:49.140 --> 00:08:51.900
a thing you've got to learn to use it instead of just saying,


00:08:51.900 --> 00:08:52.940
here's a template or render


00:08:52.940 --> 00:08:54.340
this template or whatever, right?


00:08:54.340 --> 00:08:56.500
So I would love to see


00:08:56.500 --> 00:08:58.860
some sort of template support come built in.


00:08:58.860 --> 00:09:01.300
>> Yeah. And I think that's something that


00:09:01.300 --> 00:09:03.380
definitely could be put in place.


00:09:03.380 --> 00:09:05.920
>> Sure. No, it's actually not very hard at all.


00:09:05.920 --> 00:09:07.640
It's just, it just doesn't, I just didn't.


00:09:07.640 --> 00:09:08.920
- Doesn't have it yet.


00:09:08.920 --> 00:09:13.000
So target market, maybe just APIs?


00:09:13.000 --> 00:09:16.280
- Yeah, it's got a lot of examples


00:09:16.280 --> 00:09:19.080
of JSON type of exchange, right?


00:09:19.080 --> 00:09:20.360
- Yeah. - Tanya, what do you think?


00:09:20.360 --> 00:09:21.720
- Yeah, I was gonna ask, what does that come with?


00:09:21.720 --> 00:09:23.360
Like when you pip install it,


00:09:23.360 --> 00:09:25.560
what other packages does that come with?


00:09:25.560 --> 00:09:27.200
It doesn't, does it indicate?


00:09:27.200 --> 00:09:28.080
I'm just curious.


00:09:28.080 --> 00:09:31.040
- Well, it's, we could look.


00:09:31.040 --> 00:09:33.480
I don't think there's much else there.


00:09:33.480 --> 00:09:34.320
We've got the--


00:09:34.320 --> 00:09:36.080
- There's very little here.


00:09:36.080 --> 00:09:36.920
- Okay.


00:09:36.920 --> 00:09:37.740
(laughing)


00:09:37.740 --> 00:09:38.580
- Yeah.


00:09:38.580 --> 00:09:40.840
- Yeah, if you look at, Brian,


00:09:40.840 --> 00:09:43.960
open up the just the requirements.txt file there


00:09:43.960 --> 00:09:46.680
and you'll get, see it's like,


00:09:46.680 --> 00:09:48.360
- I was--


00:09:48.360 --> 00:09:49.180
- Yeah, the last file there.


00:09:49.180 --> 00:09:50.020
- Okay.


00:09:50.020 --> 00:09:52.160
- Like that's the super small list.


00:09:52.160 --> 00:09:53.240
- Oh wow, okay.


00:09:53.240 --> 00:09:54.800
Yeah, I mean, you have to start somewhere, right?


00:09:54.800 --> 00:09:56.780
So I think it is definitely a good start.


00:09:56.780 --> 00:09:58.480
It does seem like a lot of the, not a lot,


00:09:58.480 --> 00:10:00.320
maybe the last few frameworks,


00:10:00.320 --> 00:10:02.320
web frameworks that have come out in Python here,


00:10:02.320 --> 00:10:04.780
- Yeah, they do kind of model apps for Flask.


00:10:04.780 --> 00:10:05.820
- Yeah, yeah, yeah.


00:10:05.820 --> 00:10:07.580
- Yeah, I've been doing quite a bit in FastAPI


00:10:07.580 --> 00:10:09.560
and Flask as well, 2.0.


00:10:09.560 --> 00:10:10.620
- Yeah, cool, yeah.


00:10:10.620 --> 00:10:13.800
I think Flask has become very popular in its own right,


00:10:13.800 --> 00:10:17.700
but it also, its idea of how web apps should look in Python


00:10:17.700 --> 00:10:19.420
has spread to all the other frameworks


00:10:19.420 --> 00:10:20.540
that are kind of new, right?


00:10:20.540 --> 00:10:22.860
Like FastAPI is a variation on that.


00:10:22.860 --> 00:10:23.700
- Yeah.


00:10:23.700 --> 00:10:25.340
- And I can't remember where I read it,


00:10:25.340 --> 00:10:28.660
but there was a part of this Robin documentation


00:10:28.660 --> 00:10:30.080
that talked about just,


00:10:30.980 --> 00:10:32.900
is like almost started out as a,


00:10:32.900 --> 00:10:35.500
I think a college project or something of like,


00:10:35.500 --> 00:10:39.540
what if I built Flask, but async in it or in the target,


00:10:39.540 --> 00:10:41.660
it ends up being sort of like FastAPI.


00:10:41.660 --> 00:10:44.700
So FastAPI, yes, you can render websites with it,


00:10:44.700 --> 00:10:48.880
but the original focus wasn't websites, it was APIs.


00:10:48.880 --> 00:10:51.420
And I think this is,


00:10:51.420 --> 00:10:55.380
it's even an earlier stage thing than FastAPI.


00:10:55.380 --> 00:10:57.980
So I think it's definitely worth watching.


00:10:59.020 --> 00:11:03.260
There is a talk from last fall that's linked to,


00:11:03.260 --> 00:11:04.840
on I think the main page.


00:11:04.840 --> 00:11:09.540
And then Henry Schreiner in the audience says,


00:11:09.540 --> 00:11:11.580
"Robin had a lightning talk at PyCon."


00:11:11.580 --> 00:11:13.220
So check that out too. - Nice.


00:11:13.220 --> 00:11:14.060
Oh, nice.


00:11:14.060 --> 00:11:17.460
Yeah, I shouldn't, I didn't hear about that, but nice.


00:11:17.460 --> 00:11:18.340
- Yeah, absolutely.


00:11:18.340 --> 00:11:20.220
Brian, scroll down to just where it says Y


00:11:20.220 --> 00:11:22.300
and other framework real quick.


00:11:22.300 --> 00:11:23.540
Just a bit more.


00:11:23.540 --> 00:11:24.660
Yeah, so one of the interests,


00:11:24.660 --> 00:11:26.140
this is pretty interesting to me


00:11:26.140 --> 00:11:31.060
And it could be a sign of things to come, or it could be just really great for Robin.


00:11:31.060 --> 00:11:36.260
It says one of the things they're trying to get around is the execution.


00:11:36.260 --> 00:11:40.100
Traditionally, a lot of these frameworks has been with Python.


00:11:40.100 --> 00:11:45.340
So Python has the gill, which is rough on parallelization and so on.


00:11:45.340 --> 00:11:50.640
It says this is using the Rust runtime and server, which attempts to work around the


00:11:50.640 --> 00:11:52.620
gill in order to improve performance.


00:11:52.620 --> 00:11:55.780
So if you could set yourself free from the gill,


00:11:55.780 --> 00:11:57.420
well, I don't know, maybe it hosts like multiple


00:11:57.420 --> 00:12:00.860
little pythons per thread or something.


00:12:00.860 --> 00:12:01.700
That's pretty cool.


00:12:01.700 --> 00:12:02.980
- That's one of the things I'm wondering is


00:12:02.980 --> 00:12:07.220
if the runtime's in Rust, how is it launching your code


00:12:07.220 --> 00:12:08.140
for the callbacks?


00:12:08.140 --> 00:12:09.620
But I don't know.


00:12:09.620 --> 00:12:13.180
There is a, the documentation does have architecture docs.


00:12:13.180 --> 00:12:15.260
So if you're, actually it's very well documented


00:12:15.260 --> 00:12:17.140
architecture wise, it's not well documented


00:12:17.140 --> 00:12:19.260
for how to use it wise, but.


00:12:19.260 --> 00:12:20.900
- Yeah, yeah, indeed.


00:12:20.900 --> 00:12:22.800
All right, well, good find that one's great.


00:12:22.800 --> 00:12:25.440
All right, Tanya, off to your item next.


00:12:25.440 --> 00:12:30.440
- All right, this is, oh wait, this is Sports-a-Pie.


00:12:30.440 --> 00:12:33.640
So, somebody told, I mean, okay,


00:12:33.640 --> 00:12:34.480
so for those of you who don't know,


00:12:34.480 --> 00:12:35.760
I'm really big into sports, right?


00:12:35.760 --> 00:12:40.760
I'm a huge NBA, NFL, baseball, hockey, football fan.


00:12:40.760 --> 00:12:45.440
So I'm doing a lot now with, you know,


00:12:45.440 --> 00:12:47.840
writing some app, web application,


00:12:47.840 --> 00:12:49.040
sports web application.


00:12:49.040 --> 00:12:52.280
So this is a library that somebody sent me


00:12:52.280 --> 00:12:53.120
called SportsApi.


00:12:53.120 --> 00:12:56.600
It's a free sports API written for Python.


00:12:56.600 --> 00:13:00.040
And what it does, it actually pulls stats


00:13:00.040 --> 00:13:02.840
from sportsreference.com.


00:13:02.840 --> 00:13:05.640
I believe it's sports-reference.com.


00:13:05.640 --> 00:13:07.440
And that site, it's a great website.


00:13:07.440 --> 00:13:10.740
That site is for getting sports statistics


00:13:10.740 --> 00:13:11.960
for like professional sports,


00:13:11.960 --> 00:13:15.160
like the NBA, NFL, NHL, Major League Baseball,


00:13:15.160 --> 00:13:17.440
and college basketball and football.


00:13:17.440 --> 00:13:19.640
And it's funny because yeah, it is really cool.


00:13:19.640 --> 00:13:23.560
And that site, it looks like a sports reference that Tom looks, kind of looks like a, you


00:13:23.560 --> 00:13:25.600
know, like an HTML site from like the nineties.


00:13:25.600 --> 00:13:27.760
It does look like the dream of the nineties.


00:13:27.760 --> 00:13:28.760
It's alive.


00:13:28.760 --> 00:13:29.760
Doesn't it?


00:13:29.760 --> 00:13:30.760
Oh my goodness.


00:13:30.760 --> 00:13:32.320
It really does.


00:13:32.320 --> 00:13:35.240
So I think it's also great for, you know, if you want to like learn or do some like


00:13:35.240 --> 00:13:37.680
web scraping, but of course, you know, email this site or a source.


00:13:37.680 --> 00:13:39.080
I believe that is allowed on that site.


00:13:39.080 --> 00:13:45.640
But anyway, so back to the API of sports, a pie you can get like a lot of API queries


00:13:45.640 --> 00:13:49.320
for all the, mainly the North American sports,


00:13:49.320 --> 00:13:52.440
I was saying the NBA, NFL, National Hockey League,


00:13:52.440 --> 00:13:53.800
Major League Baseball.


00:13:53.800 --> 00:13:57.120
You can get the list of teams for that sport,


00:13:57.120 --> 00:13:59.360
the date and time of games,


00:13:59.360 --> 00:14:02.560
the total number of wins for a team during the season,


00:14:02.560 --> 00:14:03.900
and much more.


00:14:03.900 --> 00:14:07.960
You can also get stats from players and from box scores.


00:14:07.960 --> 00:14:10.340
So you can build some cool stuff around sports


00:14:10.340 --> 00:14:12.960
and how teams or players perform during a game


00:14:12.960 --> 00:14:14.920
or during a season, or do something


00:14:14.920 --> 00:14:16.880
even better with it.


00:14:16.880 --> 00:14:18.360
- This is super cool.


00:14:18.360 --> 00:14:19.200
- Yeah.


00:14:19.200 --> 00:14:22.240
- It's got a kind of a nice object oriented model.


00:14:22.240 --> 00:14:26.160
So like, you know, from sports supply.nfl.teams,


00:14:26.160 --> 00:14:28.240
import teams, and then you can create a,


00:14:28.240 --> 00:14:31.040
like a Detroit team or whatever.


00:14:31.040 --> 00:14:34.520
And then, or Purdue and get their schedule,


00:14:34.520 --> 00:14:36.360
even has integration with pandas.


00:14:36.360 --> 00:14:38.260
So you get like a data frame out.


00:14:38.260 --> 00:14:39.100
This is neat.


00:14:39.100 --> 00:14:40.840
- Yeah, I haven't used this one yet.


00:14:40.840 --> 00:14:42.760
I just had another one that we'll talk about later


00:14:42.760 --> 00:14:44.600
this afternoon.


00:14:44.600 --> 00:14:46.400
Yeah, I want to try this out as well.


00:14:46.400 --> 00:14:49.000
Because like I was saying, I'm always on sports,


00:14:49.000 --> 00:14:50.360
warfare dot com.


00:14:50.360 --> 00:14:52.400
Just check out the stats from the games.


00:14:52.400 --> 00:14:57.000
People ask me a lot of times for API so they can build interesting examples


00:14:57.000 --> 00:14:58.560
or play around and stuff.


00:14:58.560 --> 00:15:04.000
And it's so much of this tied into either college or professional sports.


00:15:04.000 --> 00:15:06.600
That information is really wrapped up and hard to get.


00:15:06.600 --> 00:15:07.600
Right. It is.


00:15:07.600 --> 00:15:08.600
Yes. Yeah.


00:15:08.600 --> 00:15:10.300
It has been for a long time.


00:15:10.300 --> 00:15:14.300
I think it's becoming a little a little easier, but it's


00:15:14.300 --> 00:15:17.140
For some reason, I remember like five, seven years ago,


00:15:17.140 --> 00:15:18.540
like I wanted to do stuff with sports,


00:15:18.540 --> 00:15:19.980
like build applications with sports,


00:15:19.980 --> 00:15:24.220
but I couldn't find an API that had sports data.


00:15:24.220 --> 00:15:25.540
Everything was kind of locked down.


00:15:25.540 --> 00:15:26.660
- Yeah, yeah.


00:15:26.660 --> 00:15:29.060
Well, I can start with this five-year-old CSV file.


00:15:29.060 --> 00:15:30.660
I guess that's what I'm gonna build.


00:15:30.660 --> 00:15:32.620
It's not so inspiring, but this looks really good.


00:15:32.620 --> 00:15:33.620
- Yeah, cool.


00:15:33.620 --> 00:15:34.460
- Great news.


00:15:34.460 --> 00:15:35.280
- Cool.


00:15:35.280 --> 00:15:36.120
- Great.


00:15:36.120 --> 00:15:38.900
All right, now, before we move on, Brian,


00:15:38.900 --> 00:15:42.340
let me tell you about our sponsor for this week, okay?


00:15:42.340 --> 00:15:43.180
- Okay.


00:15:43.180 --> 00:15:46.740
So this episode is brought to you by Compiler,


00:15:46.740 --> 00:15:48.980
from a podcast from Red Hat.


00:15:48.980 --> 00:15:51.140
So just like you all out there listening,


00:15:51.140 --> 00:15:52.780
Brian and I are fans of podcasts.


00:15:52.780 --> 00:15:56.280
I'm happy to share a new one from Red Hat,


00:15:56.280 --> 00:16:01.140
Compiler, an open, an original podcast from Red Hat.


00:16:01.140 --> 00:16:03.260
So with more and more of us working from home,


00:16:03.260 --> 00:16:05.500
it's important to keep human connections


00:16:05.500 --> 00:16:08.660
and not just be stuck in our work from home setup.


00:16:08.660 --> 00:16:11.940
And Compiler unravels industry topics and trends


00:16:11.940 --> 00:16:13.860
and things you always want to know through interviews


00:16:13.860 --> 00:16:15.080
with people who know it best


00:16:15.080 --> 00:16:17.640
and telling the stories of technology,


00:16:17.640 --> 00:16:19.440
not just the howls of it.


00:16:19.440 --> 00:16:22.440
So on Compiler, you can hear a chorus of perspectives


00:16:22.440 --> 00:16:24.700
from diverse communities behind the code.


00:16:24.700 --> 00:16:27.040
These conversations include answering big questions


00:16:27.040 --> 00:16:28.680
like what is technical debt?


00:16:28.680 --> 00:16:31.520
What are tech hiring managers actually looking for?


00:16:31.520 --> 00:16:33.420
And do you have to know how to code


00:16:33.420 --> 00:16:35.440
to get started in open source?


00:16:35.440 --> 00:16:38.120
I actually was a guest on Red Hat's previous podcast,


00:16:38.120 --> 00:16:40.560
Command Line Heroes for their Python episode


00:16:40.560 --> 00:16:43.940
and it was super well done, really polished,


00:16:43.940 --> 00:16:47.040
and compiler follows along in that excellent tradition.


00:16:47.040 --> 00:16:49.320
So I checked out episode 12 of compiler,


00:16:49.320 --> 00:16:51.040
how we should handle failure,


00:16:51.040 --> 00:16:54.640
really creating a space for people to grow technically


00:16:54.640 --> 00:16:58.320
and not get fired just for one mistake,


00:16:58.320 --> 00:16:59.840
but how do you create an environment


00:16:59.840 --> 00:17:02.280
where people are willing to grow and try things like,


00:17:02.280 --> 00:17:03.680
well, let's try out Robin and try that,


00:17:03.680 --> 00:17:05.680
and if it doesn't work, well, we gave it a good try.


00:17:05.680 --> 00:17:06.680
You've learned something.


00:17:06.680 --> 00:17:10.720
So learn more about them at pythonbytes.fm/compiler.


00:17:10.720 --> 00:17:13.200
The link is in your podcast player show notes.


00:17:13.200 --> 00:17:14.400
I know you all out there listening,


00:17:14.400 --> 00:17:16.600
you can just go to your podcast app and type compiler,


00:17:16.600 --> 00:17:18.960
but please visit pythonbytes.fm/compiler


00:17:18.960 --> 00:17:20.860
and just click the link for your podcast player.


00:17:20.860 --> 00:17:23.180
There's like tons of them here.


00:17:23.180 --> 00:17:24.920
That way they know it came from us.


00:17:24.920 --> 00:17:28.080
So thank you Red Hat and Compiler for supporting our show.


00:17:28.080 --> 00:17:29.680
All right, Brian, you ready for the next one?


00:17:29.680 --> 00:17:30.840
- I am.


00:17:30.840 --> 00:17:33.000
Give us a shot of terminals.


00:17:33.000 --> 00:17:33.840
- A shot of terminals.


00:17:33.840 --> 00:17:35.760
I seem to have messed up my tabs though.


00:17:35.760 --> 00:17:38.160
So let me just open that back up here.


00:17:38.160 --> 00:17:39.000
Here we go.


00:17:39.000 --> 00:17:41.820
So this one comes to me, I believe from Jay Miller.


00:17:41.820 --> 00:17:43.320
I'm pretty sure he's the one who told me about it.


00:17:43.320 --> 00:17:44.440
So thank you, Jay.


00:17:44.440 --> 00:17:46.640
And the idea is really simple.


00:17:46.640 --> 00:17:48.480
I want to create a screenshot


00:17:48.480 --> 00:17:51.720
of something I'm doing for a demo code.


00:17:51.720 --> 00:17:54.440
You know, I create a lot of courses and presentations,


00:17:54.440 --> 00:17:55.840
so it's super helpful for that.


00:17:55.840 --> 00:17:57.160
Tanya's doing DevRel,


00:17:57.160 --> 00:17:59.040
and she's, I'm sure, doing lots of presentations


00:17:59.040 --> 00:18:01.360
where there's like, I need a screenshot of this thing


00:18:01.360 --> 00:18:03.000
and brand me for books and so on.


00:18:03.000 --> 00:18:03.840
- Yeah, I could totally use this.


00:18:03.840 --> 00:18:04.840
- So this might, yeah,


00:18:04.840 --> 00:18:06.920
This thing might turn out to be super useful.


00:18:06.920 --> 00:18:11.600
So what it is, is it's a thing, you brew install it,


00:18:11.600 --> 00:18:14.160
and then, or there's different ways


00:18:14.160 --> 00:18:15.080
in which you can install it.


00:18:15.080 --> 00:18:17.440
It's a little bit like carbon.now.sh,


00:18:17.440 --> 00:18:18.960
or if people have seen that,


00:18:18.960 --> 00:18:22.960
and you can capture some kind of output in your terminal


00:18:22.960 --> 00:18:25.480
exactly like it looks directly to an image.


00:18:25.480 --> 00:18:27.640
And you can even specify,


00:18:27.640 --> 00:18:30.760
I would like to pipe that directly to whatever app


00:18:30.760 --> 00:18:32.320
you edit screenshots in.


00:18:32.320 --> 00:18:35.000
So for example, I use Pixelmator Pro.


00:18:35.000 --> 00:18:38.160
So I might just say, take this, run this command,


00:18:38.160 --> 00:18:40.840
take the screenshot and then open it in Pixelmator Pro,


00:18:40.840 --> 00:18:42.400
go and stuff like that.


00:18:42.400 --> 00:18:43.480
So really, really nice.


00:18:43.480 --> 00:18:45.240
The way you run it, it's a little bit like time


00:18:45.240 --> 00:18:46.440
or watch or perf.


00:18:46.440 --> 00:18:50.280
So you just say term shot and then like Python,


00:18:50.280 --> 00:18:53.260
some file or whatever it is you're trying to do.


00:18:53.260 --> 00:18:55.880
Here's an example of one that I did on,


00:18:55.880 --> 00:18:59.400
this is a program using Colorama


00:18:59.400 --> 00:19:01.720
to make interesting colors on the screen,


00:19:01.720 --> 00:19:05.600
doing async and await examples of like doing a bunch of requests against


00:19:05.600 --> 00:19:09.840
DocPython and then pulling back the titles using beautiful soup.


00:19:09.840 --> 00:19:13.660
And I just said, term shot, Python program, boom.


00:19:13.660 --> 00:19:17.340
And out it comes with this really nice looking picture, exactly the right size.


00:19:17.340 --> 00:19:21.600
So however long the scroll back is like, like that's the size of the screenshot.


00:19:21.600 --> 00:19:24.460
You don't have to like, you know, take a picture, zoom, scroll down,


00:19:24.460 --> 00:19:28.720
some take another picture, try to fit it back together, all that kind of a weirdness.


00:19:28.720 --> 00:19:30.320
So yeah, really neat.


00:19:30.320 --> 00:19:31.080
Yeah.


00:19:31.460 --> 00:19:33.860
And then the final thing is, if for some reason


00:19:33.860 --> 00:19:38.040
it's more complicated than one line of just Python this,


00:19:38.040 --> 00:19:40.260
but you're like, I want to run three commands.


00:19:40.260 --> 00:19:42.240
So maybe what I wanna do is I wanna show


00:19:42.240 --> 00:19:44.400
that I'm SSHing into a server,


00:19:44.400 --> 00:19:46.560
then I'm running this command and then I'm open,


00:19:46.560 --> 00:19:48.460
you know, I'm seeing the result of that


00:19:48.460 --> 00:19:50.500
or something like that through like LS.


00:19:50.500 --> 00:19:54.200
So if all else fails, you just type term shot


00:19:54.200 --> 00:19:56.440
and you give it some shell, like you could say,


00:19:56.440 --> 00:20:01.440
slash bin slash Z shell ZSH or slash bin slash bash.


00:20:01.440 --> 00:20:03.320
you do your work and once you exit the shell,


00:20:03.320 --> 00:20:07.600
it'll just take a screenshot of whatever you did while you were in there.


00:20:07.600 --> 00:20:09.600
That's also pretty good.


00:20:09.600 --> 00:20:11.960
>> That takes less thinking. I like that.


00:20:11.960 --> 00:20:12.960
>> Yeah, it does.


00:20:12.960 --> 00:20:14.400
>> Exactly.


00:20:14.400 --> 00:20:17.680
>> Yeah, it's so interesting. You're mentioning Coloramo.


00:20:17.680 --> 00:20:19.560
Michael, I learned about Coloramo from you.


00:20:19.560 --> 00:20:24.240
Actually, I took your asynchronous programming course.


00:20:24.240 --> 00:20:25.560
>> Oh, you did? Oh, how amazing.


00:20:25.560 --> 00:20:26.480
>> Yeah.


00:20:26.480 --> 00:20:27.120
>> Thank you.


00:20:27.120 --> 00:20:28.440
>> Yeah, of course.


00:20:28.440 --> 00:20:30.560
>> Yeah, that example was from that course for sure.


00:20:30.560 --> 00:20:32.700
- Okay, yeah, yeah, I look familiar.


00:20:32.700 --> 00:20:33.540
- Nice. - Cool.


00:20:33.540 --> 00:20:34.880
- Yeah, what I thought was neat about it is it,


00:20:34.880 --> 00:20:37.560
like, even with just non-standard print output and stuff,


00:20:37.560 --> 00:20:40.940
it still captures it, you know, reliably, which is nice.


00:20:40.940 --> 00:20:43.600
- So when you run that command, it takes a screenshot


00:20:43.600 --> 00:20:46.360
and it saves it to, I don't know, your desktop or,


00:20:46.360 --> 00:20:49.080
so now like with Carve a new pen, you know,


00:20:49.080 --> 00:20:51.840
you can like click a button and it'll save it, you know,


00:20:51.840 --> 00:20:53.480
or just save it and then you can just paste it


00:20:53.480 --> 00:20:54.560
into wherever you want to.


00:20:54.560 --> 00:20:55.380
- Yeah, exactly.


00:20:55.380 --> 00:20:56.720
I don't think it goes to your,


00:20:56.720 --> 00:20:58.680
I think it goes to whatever working directory


00:20:58.680 --> 00:20:59.880
you happen to be in.


00:20:59.880 --> 00:21:00.720
- Okay.


00:21:00.720 --> 00:21:02.760
- Just wherever you ran the command in that directory,


00:21:02.760 --> 00:21:04.300
there's an out.png.


00:21:04.300 --> 00:21:05.140
- Okay.


00:21:05.140 --> 00:21:07.240
- There's probably ways to specify it or whatever,


00:21:07.240 --> 00:21:09.740
but by default, it just drops that png file there.


00:21:09.740 --> 00:21:12.420
Yeah, it's super handy for presentations, I think.


00:21:12.420 --> 00:21:13.260
- Yeah.


00:21:13.260 --> 00:21:14.200
- All right, over to you, Brian.


00:21:14.200 --> 00:21:17.840
- Well, I want to talk about the GIL.


00:21:17.840 --> 00:21:19.340
We talked about it a little bit earlier,


00:21:19.340 --> 00:21:23.400
but so Itamar Turner-Troring


00:21:23.400 --> 00:21:26.000
wrote an article called,


00:21:26.000 --> 00:21:27.640
"When Python Can't Thread,


00:21:27.640 --> 00:21:30.720
a deep dive into the GILs impact.


00:21:30.720 --> 00:21:34.320
And what I really like about this article is just that


00:21:34.320 --> 00:21:37.020
the focus of it is to try to build,


00:21:37.020 --> 00:21:40.520
not the specifics of everything around the GIL,


00:21:40.520 --> 00:21:42.700
but as a user of Python,


00:21:42.700 --> 00:21:45.600
what's the mental model that you need


00:21:45.600 --> 00:21:49.680
to be able to utilize threading and multiprocessing


00:21:49.680 --> 00:21:53.880
and different extensions correctly to try to figure this out


00:21:53.880 --> 00:21:56.720
so that you just have a gut feel for how things work


00:21:56.720 --> 00:21:59.600
so that you can work through it and everything.


00:21:59.600 --> 00:22:00.760
There's a little bit,


00:22:00.760 --> 00:22:02.100
it's kind of in the middle of the article,


00:22:02.100 --> 00:22:05.360
there's a mental model that he presents.


00:22:05.360 --> 00:22:07.960
And I'd like to talk about a little bit


00:22:07.960 --> 00:22:09.760
some of the other cool aspects of the article,


00:22:09.760 --> 00:22:12.160
but first the mental model he's going for


00:22:12.160 --> 00:22:17.160
is a thread must hold the GIL to call a CPython API.


00:22:17.160 --> 00:22:23.000
And so anything that any Python code that's using API


00:22:24.280 --> 00:22:28.360
like built-in Python calls is gonna block


00:22:28.360 --> 00:22:30.420
because it's gonna grab the gill.


00:22:30.420 --> 00:22:34.160
Other threads can't run if the GIL is there,


00:22:34.160 --> 00:22:36.780
but if you're doing pure Python stuff,


00:22:36.780 --> 00:22:38.440
your stuff gets interrupted


00:22:38.440 --> 00:22:40.840
every five milliseconds automatically.


00:22:40.840 --> 00:22:43.700
I didn't know this, but that's kind of cool.


00:22:43.700 --> 00:22:45.720
Long running things, so if you have a sleep


00:22:45.720 --> 00:22:50.280
or some other extra process that takes a long time,


00:22:50.280 --> 00:22:51.920
not Python code going through,


00:22:51.920 --> 00:22:54.840
but like a sleep or something,


00:22:54.840 --> 00:22:57.000
or you probably don't have a long sleep,


00:22:57.000 --> 00:22:59.080
but maybe you're reading a file or something.


00:22:59.080 --> 00:22:59.920
Something that--


00:22:59.920 --> 00:23:01.400
- Talking to a database, something like that.


00:23:01.400 --> 00:23:04.080
- Yeah, it doesn't automatically interrupt


00:23:04.080 --> 00:23:05.040
every five milliseconds.


00:23:05.040 --> 00:23:06.800
So the five milliseconds isn't guaranteed.


00:23:06.800 --> 00:23:09.400
So there's blocking possibilities.


00:23:09.400 --> 00:23:13.840
And then Python extensions written in C


00:23:13.840 --> 00:23:18.600
or Rust or something can explicitly release the GIL


00:23:18.600 --> 00:23:20.880
to allow, so you can get around this


00:23:20.880 --> 00:23:22.280
with extensions and stuff.


00:23:22.280 --> 00:23:27.280
So that's the mental model, but to really sync at home,


00:23:27.280 --> 00:23:30.080
he's got a whole bunch of these profiling graphs


00:23:30.080 --> 00:23:31.140
that are great.


00:23:31.140 --> 00:23:34.860
So here's an example of a little program that starts,


00:23:34.860 --> 00:23:38.320
there's like two functions, it's really a main and a go,


00:23:38.320 --> 00:23:41.240
and essentially you end up with two threads,


00:23:41.240 --> 00:23:43.280
like the thread starts this go thing,


00:23:43.280 --> 00:23:46.560
and then you run go within the main thread also.


00:23:46.560 --> 00:23:49.600
So what this is, it's just doing like some summing


00:23:49.600 --> 00:23:55.480
of a whole bunch of numbers, but the examples just to keep busy for a while and and and


00:23:55.480 --> 00:24:00.800
then look at what happens and what happens is you get you get these meant these shifts


00:24:00.800 --> 00:24:06.240
of like one of them is spinning around, but the other one's just you know this toggling


00:24:06.240 --> 00:24:09.440
back and forth that happens kind of cool.


00:24:09.440 --> 00:24:17.560
There's the all the different models that can happen and like here's one where you're


00:24:17.560 --> 00:24:19.400
Let's see, what are we doing here?


00:24:19.400 --> 00:24:21.040
It's sleeping for a while,


00:24:21.040 --> 00:24:22.520
so it's completely blocked.


00:24:22.520 --> 00:24:23.860
You've got one thread that's just


00:24:23.860 --> 00:24:26.680
completely blocked for a long time.


00:24:26.680 --> 00:24:29.040
The visuals of the profile are


00:24:29.040 --> 00:24:31.880
great to visualize what's going on.


00:24:31.880 --> 00:24:35.040
Anyway, at the end of the article,


00:24:35.040 --> 00:24:38.120
he talks about how to get around it and when and where and how to


00:24:38.120 --> 00:24:39.720
use different models like


00:24:39.720 --> 00:24:42.360
Async and extensions and things like that.


00:24:42.360 --> 00:24:45.240
Anybody that's really caring about this stuff,


00:24:45.240 --> 00:24:46.460
I think this is a great article.


00:24:46.460 --> 00:24:49.100
the visualizations are quite neat.


00:24:49.100 --> 00:24:52.300
You know, instead of just saying you're spending this much time


00:24:52.300 --> 00:24:55.620
in a particular function, it says


00:24:55.620 --> 00:24:58.340
and you're waiting or you're doing CPU work, right?


00:24:58.340 --> 00:25:00.980
And you can actually see those side by side


00:25:00.980 --> 00:25:02.820
and see like the CPU's here.


00:25:02.820 --> 00:25:06.660
Because normal profilers will just tell you, well, you're spending time, you know,


00:25:06.660 --> 00:25:08.100
here, what are you doing?


00:25:08.100 --> 00:25:09.100
Yeah, exactly right.


00:25:09.100 --> 00:25:09.900
Yeah.


00:25:09.900 --> 00:25:11.340
It's really helpful.


00:25:11.340 --> 00:25:13.580
I learned visually, I'm like


00:25:13.580 --> 00:25:16.260
very, you know, large visual learner.


00:25:16.260 --> 00:25:19.660
Yeah, like the GIL is something that's always kind of like,


00:25:19.660 --> 00:25:21.960
I don't know, just, it was really confusing to me.


00:25:21.960 --> 00:25:23.960
You know, when I was first starting out and


00:25:23.960 --> 00:25:27.320
getting into more intermediate stuff. But I took this, it was like a


00:25:27.320 --> 00:25:29.320
Python deep dive course where


00:25:29.320 --> 00:25:30.920
the instructor really kind of like,


00:25:30.920 --> 00:25:33.420
talked about things behind the language.


00:25:33.420 --> 00:25:35.820
You know, so it really kind of helped me


00:25:35.820 --> 00:25:37.620
grasp and wrap my head around it more.


00:25:37.620 --> 00:25:39.320
But yeah, this is great. I love this.


00:25:39.320 --> 00:25:41.020
Yeah. Nice work, Itamar.


00:25:41.020 --> 00:25:44.120
This is definitely a good one. I like the pictures as well.


00:25:44.120 --> 00:25:45.120
All right.


00:25:45.120 --> 00:25:47.120
How do you want to take us out?


00:25:47.120 --> 00:25:48.120
And I apologize.


00:25:48.120 --> 00:25:50.120
I believe I switched the order of your two topics.


00:25:50.120 --> 00:25:51.120
That's okay.


00:25:51.120 --> 00:25:52.120
No worries.


00:25:52.120 --> 00:25:54.120
I hope I didn't throw you off there.


00:25:54.120 --> 00:25:55.120
That's okay.


00:25:55.120 --> 00:25:56.120
So this is the NBA.


00:25:56.120 --> 00:25:57.120
Okay.


00:25:57.120 --> 00:25:58.120
So this one is the NBA API.


00:25:58.120 --> 00:26:03.120
So this one is just strictly for the NBA, National Basketball Association.


00:26:03.120 --> 00:26:04.120
This is really close to home for you, right?


00:26:04.120 --> 00:26:05.120
This is like your world.


00:26:05.120 --> 00:26:06.120
Yes, very close to home.


00:26:06.120 --> 00:26:07.120
Yes.


00:26:07.120 --> 00:26:08.120
It brings back memories.


00:26:08.120 --> 00:26:13.120
So, and right now with, you know, NBA playoffs happening, I think this is pretty exciting.


00:26:13.120 --> 00:26:17.420
So this package is maintained by a gentleman named Swarup Patel.


00:26:17.420 --> 00:26:21.420
He does a very great job of maintaining it, it's very up to date.


00:26:21.420 --> 00:26:25.620
This API pulls data from the


00:26:25.620 --> 00:26:30.720
NBA.com, right, that's the official website of the National Basketball Association.


00:26:30.720 --> 00:26:35.820
With this package you get more accessible endpoints.


00:26:35.820 --> 00:26:38.420
The documentation is really good, I think it's


00:26:38.420 --> 00:26:42.620
a really well documented API.


00:26:42.620 --> 00:26:44.620
Let me see what else here.


00:26:44.620 --> 00:26:49.420
The NBA.com API isn't as well documented because


00:26:49.420 --> 00:26:53.020
a lot of things change frequently.


00:26:53.020 --> 00:26:55.020
Players are traded, players get injured,


00:26:55.020 --> 00:26:58.540
players retire, you have to take into account all the stats as well,


00:26:58.540 --> 00:27:01.340
points per game, rebounds per game, and that type of thing.


00:27:01.340 --> 00:27:05.340
So this package, the NBA API package, has a ton of features.


00:27:05.340 --> 00:27:09.020
You can get information on players,


00:27:09.020 --> 00:27:12.220
teams, more static data, as well as


00:27:12.220 --> 00:27:15.020
data that changes as well, like, you know, their stats.


00:27:15.020 --> 00:27:20.140
I think their stats per game per season, like their player game,


00:27:20.140 --> 00:27:21.900
while there's tons and tons of endpoints.


00:27:21.900 --> 00:27:26.300
So I would if you want to work with this API, I recommend looking up the API endpoints.


00:27:26.300 --> 00:27:29.660
There's probably like over 40 of them.


00:27:29.660 --> 00:27:29.980
Wow.


00:27:29.980 --> 00:27:31.500
Or maybe around 40, actually.


00:27:31.500 --> 00:27:33.500
Yeah, it's just really cool.


00:27:33.500 --> 00:27:34.860
I'm actually working with this right now.


00:27:34.860 --> 00:27:40.940
And I'm writing a, building a sports NBA ranking website right now.


00:27:40.940 --> 00:27:42.540
I'm using this package.


00:27:42.540 --> 00:27:43.540
Fun.


00:27:43.540 --> 00:27:47.900
One of the things that's cool is it has a lot of search functionalities and not just


00:27:47.900 --> 00:27:53.700
direct by, you know, find me the team from this city or this name, but like, find teams


00:27:53.700 --> 00:27:55.700
by state or something.


00:27:55.700 --> 00:27:56.700
Yeah.


00:27:56.700 --> 00:27:57.700
Yeah.


00:27:57.700 --> 00:27:58.700
Yeah.


00:27:58.700 --> 00:27:59.700
It's definitely very clever.


00:27:59.700 --> 00:28:03.500
And it, I would say between like the first one we looked at is sports reference.com.


00:28:03.500 --> 00:28:04.700
I don't know where they're pulling.


00:28:04.700 --> 00:28:07.140
I think I'm not sure where they're pulling their data.


00:28:07.140 --> 00:28:12.100
reference maybe from each individual site of the, you know, the sports


00:28:12.100 --> 00:28:13.300
associations, I'm guessing.


00:28:13.300 --> 00:28:13.800
Right.


00:28:13.800 --> 00:28:14.760
Okay.


00:28:14.760 --> 00:28:15.920
But.


00:28:15.920 --> 00:28:20.860
Well, I mean, like, for example, the data from NBA's got to be more


00:28:20.860 --> 00:28:24.740
centralized than like all of the college ball stuff, right?


00:28:24.740 --> 00:28:25.420
Yeah.


00:28:25.420 --> 00:28:25.980
Yeah.


00:28:25.980 --> 00:28:26.700
This is cool.


00:28:26.700 --> 00:28:32.300
Even as support for live data here, like NBA dot live and points for scoreboard


00:28:32.300 --> 00:28:35.060
and all kinds of stuff that looks, that looks pretty neat.


00:28:35.060 --> 00:28:35.560
Wow.


00:28:35.700 --> 00:28:37.700
This is some, there's a lot of data here.


00:28:37.700 --> 00:28:39.700
Yeah, you check out the notebooks.


00:28:39.700 --> 00:28:40.700
Yeah, there's tons of data.


00:28:40.700 --> 00:28:42.700
Right? The notebooks seem to have some cool examples.


00:28:42.700 --> 00:28:44.700
Yeah, I still have the notebooks and the Jupyter notebooks I have.


00:28:44.700 --> 00:28:46.700
Yeah, there's a lot of data. It's very good.


00:28:46.700 --> 00:28:48.700
Yeah, it's pretty awesome. There's a lot that you can do.


00:28:48.700 --> 00:28:49.700
A lot of fun stuff.


00:28:49.700 --> 00:28:54.700
Cool. I know so many people want to build examples with sports.


00:28:54.700 --> 00:28:58.700
And I think having some live data would be really, really neat.


00:28:58.700 --> 00:29:02.700
So, you know, like during, like you say, like right now during the playoffs or something,


00:29:02.700 --> 00:29:04.700
you could do some fun things. Indeed.


00:29:04.700 --> 00:29:05.380
>> Indeed.


00:29:05.380 --> 00:29:05.780
>> Yeah.


00:29:05.780 --> 00:29:08.540
>> All right. Brian, is that our six items?


00:29:08.540 --> 00:29:13.020
>> It is. Do you have anything extra to share with us?


00:29:13.020 --> 00:29:17.860
>> I have, I think just a real quick one here for us.


00:29:17.860 --> 00:29:20.780
From Pablo, we have Python 3.11,


00:29:20.780 --> 00:29:22.940
Beta 1 is here.


00:29:22.940 --> 00:29:26.780
Hurrah. This marks feature freeze,


00:29:26.780 --> 00:29:30.980
which means there'll be no new features or APIs, only bug fixes.


00:29:30.980 --> 00:29:35.100
So please, they say, if you maintain a Python package,


00:29:35.100 --> 00:29:37.300
help us test that everything works as expected.


00:29:37.300 --> 00:29:38.340
But this is pretty neat.


00:29:38.340 --> 00:29:39.180
- Nice.


00:29:39.180 --> 00:29:40.340
- Yeah, that's it for me.


00:29:40.340 --> 00:29:45.200
- On that, I'm gonna grab this just a second.


00:29:45.200 --> 00:29:47.540
We'll link to this as well.


00:29:47.540 --> 00:29:50.980
Simon Willison has a little blurb on,


00:29:50.980 --> 00:29:54.800
like if you're using GitHub actions to test your packages,


00:29:54.800 --> 00:30:00.500
Simon has a code snippet for exactly how to do that.


00:30:00.500 --> 00:30:05.500
Essentially the Python thing you want is Python 3.11-dev


00:30:05.500 --> 00:30:07.660
and make sure it's in quotes


00:30:07.660 --> 00:30:11.380
and just add that to your Python versions matrix.


00:30:11.380 --> 00:30:13.260
- All right, fantastic.


00:30:13.260 --> 00:30:15.300
- So how about you, Tanya?


00:30:15.300 --> 00:30:17.060
Do you have any extras?


00:30:17.060 --> 00:30:17.900
- That's pretty much it.


00:30:17.900 --> 00:30:19.380
Oh, I do see some people in the chat


00:30:19.380 --> 00:30:21.580
that I've met at PyCon last week.


00:30:21.580 --> 00:30:22.700
Mario, hey Mario.


00:30:22.700 --> 00:30:24.660
I'm not sure if you're still here, but hello.


00:30:24.660 --> 00:30:25.860
- Cool, fantastic.


00:30:25.860 --> 00:30:27.260
Yeah, you just came back from PyCon


00:30:27.260 --> 00:30:28.620
and Brian and I were not there.


00:30:28.620 --> 00:30:33.620
Do you want to give us a quick report from being on scene?


00:30:33.620 --> 00:30:34.980
- Yeah, it was amazing.


00:30:34.980 --> 00:30:36.640
It was my first Python.


00:30:36.640 --> 00:30:40.300
And actually one of my first tech conferences, actually.


00:30:40.300 --> 00:30:41.200
It was great.


00:30:41.200 --> 00:30:43.620
I spent most of the time working on booths for DeepM


00:30:43.620 --> 00:30:45.480
'cause we were helping to sponsor the event.


00:30:45.480 --> 00:30:48.320
I did catch a few talks


00:30:48.320 --> 00:30:52.040
and met so many amazing people


00:30:52.040 --> 00:30:54.040
and also just connected with people


00:30:54.040 --> 00:30:55.960
that I have been communicating with


00:30:55.960 --> 00:30:58.240
over the last several years,


00:30:58.240 --> 00:31:01.620
via internet and chat and stuff like that.


00:31:01.620 --> 00:31:02.460
So it was just really fun.


00:31:02.460 --> 00:31:03.560
It was a good time.


00:31:03.560 --> 00:31:04.640
- I love PyCon.


00:31:04.640 --> 00:31:06.240
I consider it my geek holiday.


00:31:06.240 --> 00:31:07.080
(laughing)


00:31:07.080 --> 00:31:09.720
I love to go there and meet so many of the people.


00:31:09.720 --> 00:31:12.620
Everyone's so accessible and I spend most of my time


00:31:12.620 --> 00:31:16.920
just walking around looking to say hi to folks and whatnot.


00:31:16.920 --> 00:31:18.040
- So I have an idea, Michael.


00:31:18.040 --> 00:31:19.240
Maybe next year we should go.


00:31:19.240 --> 00:31:20.200
- Yeah.


00:31:20.200 --> 00:31:22.560
Yeah, maybe next year we should go.


00:31:22.560 --> 00:31:23.400
Yeah, definitely.


00:31:23.400 --> 00:31:25.360
I'm looking forward to getting back there.


00:31:25.360 --> 00:31:26.200
- Well, do you have anything funny for us?


00:31:26.200 --> 00:31:27.160
- Are you looking forward to a joke?


00:31:27.160 --> 00:31:28.000
- Yeah.


00:31:28.000 --> 00:31:29.640
Well, I have something for you.


00:31:29.640 --> 00:31:32.320
I'll let you be the judge of it's funny.


00:31:32.320 --> 00:31:33.920
All right, so here's what I got.


00:31:33.920 --> 00:31:35.800
Brian, just maybe give us a quick description


00:31:35.800 --> 00:31:37.760
of what this picture is about here.


00:31:37.760 --> 00:31:40.040
- I don't know, there's a guy,


00:31:40.040 --> 00:31:42.400
like looks like really stressed out,


00:31:42.400 --> 00:31:44.400
holding his hand in front of his face.


00:31:44.400 --> 00:31:45.680
- I think he's crying.


00:31:45.680 --> 00:31:46.560
- Crying, yeah.


00:31:46.560 --> 00:31:47.700
- He's pretty sad.


00:31:47.700 --> 00:31:50.560
I mean, red eyes almost, just crying.


00:31:50.560 --> 00:31:52.360
And so, you know, we all come to these websites


00:31:52.360 --> 00:31:54.280
and it's, you know, prove you're human


00:31:54.280 --> 00:31:55.840
and all these recapture things.


00:31:55.840 --> 00:31:56.920
And sometimes you're lucky


00:31:56.920 --> 00:32:05.920
I'm going to get a slide the puzzle over until like the dog fits in its house or something rather than find all, you know, highlight all the stoplights or anyways.


00:32:05.920 --> 00:32:12.720
So the joke is when a with a very sad guy here asking, I says, when a computer asks, are you a robot?


00:32:12.720 --> 00:32:15.320
Maybe it's just wanting to find its family.


00:32:15.320 --> 00:32:18.320
Poor thing.


00:32:18.320 --> 00:32:19.620
Maybe it does.


00:32:19.620 --> 00:32:20.420
Maybe we're not.


00:32:20.420 --> 00:32:26.520
We should just be helping more and you know, every time I prove a recapture, it's just like, no, that's not my family.


00:32:26.520 --> 00:32:28.240
It's so funny.


00:32:28.240 --> 00:32:31.680
- One of the funniest find this memes


00:32:31.680 --> 00:32:34.660
that I saw recently was just like a picture of space.


00:32:34.660 --> 00:32:36.760
And it said, click all the squares


00:32:36.760 --> 00:32:39.640
that have a Klingon bird of prey inside.


00:32:39.640 --> 00:32:42.520
'Cause cloaked, you can't see it.


00:32:42.520 --> 00:32:43.840
- 'Cause they're cloaked, they're invisible.


00:32:43.840 --> 00:32:44.680
That's right, yes.


00:32:44.680 --> 00:32:45.520
Of course.


00:32:45.520 --> 00:32:46.340
- Anyway.


00:32:46.340 --> 00:32:48.240
- Very good, very good.


00:32:48.240 --> 00:32:50.040
- Thanks again for having a great podcast.


00:32:50.040 --> 00:32:53.720
Thanks, Tanya, for showing up and doing this with us.


00:32:53.720 --> 00:32:54.720
- Yeah, thanks for having me.


00:32:54.720 --> 00:32:55.860
It was fun.


00:32:55.860 --> 00:32:56.860
>> Yeah.


00:32:56.860 --> 00:32:57.860
Great to have you on here, Tanya.

