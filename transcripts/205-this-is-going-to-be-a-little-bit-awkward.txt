00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly

00:00:03 to your earbuds. This is episode 205, recorded October 21st. I'm Michael Kennedy.

00:00:09 And I'm Brian Okken.

00:00:10 And this episode is brought to you by us. More about that later, how you can support what we're

00:00:15 doing right now. Brian, I'm really sorry, man, but I've got something a little bit awkward to

00:00:20 talk about.

00:00:20 Well, this is awkward.

00:00:21 I know, but luckily it's just you and me, so you don't mind if I just sort of

00:00:25 tell it to you straight?

00:00:26 Yeah, just tell me.

00:00:27 Okay. All right. Well, sometimes I have an array and it's perfectly tabular. Like it's,

00:00:32 it's maybe just a linear array or sometimes the array goes across like every entry is like 20.

00:00:39 It's like a list with like 20 length, 20 lists in it. It's all the right size, but sometimes,

00:00:43 you know, maybe it's, it's the wrong shape and it's awkward and it's hard to deal with in Python.

00:00:48 You know, a lot of array processing happens in NumPy, but NumPy is all about rectangular like

00:00:55 things. And so if you've got data, that's kind of like an array, multi-dimensional array, but it

00:01:00 doesn't fit that shape. What do you do?

00:01:02 So, Simon Thor sent us a message and said, you all should talk about awkward arrays.

00:01:08 So awkward arrays, this is a, it's actually a pretty advanced library. So it's a little bit

00:01:16 like NumPy and it has NumPy like idioms and so on, but it's a library for nested variable size data,

00:01:23 including arbitrary length lists, records, mixed data types, missing data, and all those things and

00:01:30 dealing with those with NumPy like idioms. So it's better for handling, you know, like at what I

00:01:37 described, not the same shaped data. It's kind of the same dimensions, but it's not always the same

00:01:42 length on the various parts. And you could even use it with things like Numba to JIT compile the code to

00:01:49 make it even faster. And they just announced version 1.0 of this library, which was originally

00:01:55 written in Python. So it was good, but not super, super fast. And they rewrote the core in C++.

00:02:01 So now it's like a lot of the data science stuff, C++ at where the, in the business end of the

00:02:08 library. So it's super fast. Nice.

00:02:10 Yeah. Pretty cool. And what do you think about the logo?

00:02:12 The logo is actually great. It's awkward array, but the second array is below awkward and the A is

00:02:20 capitalized. So it sort of runs into the K and the W and the F to squish out of the way. It's very

00:02:26 clever.

00:02:26 Yeah. Kind of bent and awkward looking. Yeah. It's pretty clever. I like it as well. Another thing

00:02:31 that I thought was interesting, if you open up the link over there, you don't have to, but if you were

00:02:35 to go there, like right on the page, it says, here's the Python quickstart. Oh, and here's the C++

00:02:40 quickstart. So this library, the internals of it are written in C++, right? Okay. So that it's fast

00:02:46 from Python, but also you can go straight to the template library side of C++ and use it directly.

00:02:52 If you are say building some stuff in C++ and also want to use this library, or maybe you're building a

00:02:57 library that does data sciencey things and you have a big C++ C component aspect of it, you could use the

00:03:04 C side of it directly there. Nice. Yeah. So that's actually something I don't see almost ever is here's

00:03:09 the Python library and the C++ API that corresponds to it. Yeah, that's pretty cool. Also, it's,

00:03:15 I have a lot of cases for this. I'm going to definitely check this out. This is great.

00:03:20 Yeah, it's pretty cool. So thank you, Simon, for sending that in. Last quick note is when you install

00:03:24 it, you pip install awkward, the number one, not just awkward. I think awkward, which my gosh,

00:03:32 it's just so weird to have a package called awkward, but it's great. Anyway, I think awkward is the older

00:03:39 version and awkward one is this new 1.0 release. I think it's the same library. I wasn't sure if like,

00:03:45 I was like, okay, if this is awkward one, what is just awkward by itself? It's got to even be more

00:03:49 awkward, but I think it's the same library. It's just a different API version. Okay. Okay. Yeah.

00:03:54 You might be surprised by it, but nonetheless, it's, it's pretty good library.

00:03:58 You want to check it out. Yeah. You got any surprises for us? Yeah. The surprises came from Ned

00:04:03 Batchelder. So, Ned surprised us with, some surprising order dict, ordered dict surprises.

00:04:10 So I think we've covered this, but in Python three, six dictionaries changed a little bit. So normal

00:04:15 dictionary, just, if you just say dict or just declare one, they retain their insertion order.

00:04:20 If you list them out again, or just, you know, say, you know, if you have X equals some dictionary

00:04:26 and print X on the, the REPL, it'll just print it in the same order it arrived in.

00:04:31 Right. And if you do like four K comma V in, you know, dictionary dot items, you'll get them in the

00:04:38 same order now, which is nice. I think probably one of the most annoying things was if you are saving

00:04:44 a dictionary, if you're going back and forth between a JSON file into a dictionary and then you save it

00:04:49 again, right? Like that could just randomly be changing before. Whereas you'll be getting like,

00:04:55 yeah. Diffs on that file. Anyway, like this stability is nice.

00:04:59 I really like it, but I just sort of assumed I knew there may have been some differences. There's

00:05:03 still a collections dot ordered dict that is, around it's still around and there's a few reasons

00:05:10 for it. And then one of them is just because it's a class that some other stuff derives from and it

00:05:15 would break backwards compatibility to, to remove it. So I'm glad it's still there, but Ned brings up a

00:05:21 couple of surprising things around it. The first actually wasn't that surprising to me. What the, they're ordered, but you can't get access them by order. You can't say,

00:05:30 give me the first one by like saying like brackets zero or something. Does it surprise you? It doesn't

00:05:36 really surprise me.

00:05:36 Not really. I mean, I would just do, maybe just get the, yeah, just get the first thing out of items

00:05:43 and then just be happy with that. I don't know. But yeah, there's no way to like index like bracket zero

00:05:48 Right. That's okay. The thing that actually I didn't really think about before was that, Ned brings up is that how equality and order mix. So in the dictionaries for Python 3.6 and above now, if you declare two dictionaries with the same content, but they have, they've, they've, they're created in the different order. They're still going to be equal. So two dictionaries are equal if they have equal contents.

00:06:14 It would super bug me. Like if I have a equals one, B equals two, or B equals two, A equals one. Like if the dictionary contents are the same, but the order changes and you're, they, they say they're not equal. That would, I mean, that would bug me. I think.

00:06:28 Right. But order dict, apparently it does matter. So if you, if you care about order, you can use order dict to make sure they're in the same order.

00:06:36 Yeah. I guess you're explicitly saying I super care about order. So if the order changes, they're not the same.

00:06:41 Yeah. Yeah. So just a little surprise, surprise, surprise, but thanks Ned.

00:06:46 Yeah, that's cool. I, I wouldn't have known that. That's pretty neat.

00:06:50 Speaking of knowing stuff, you and I work on a few things. We've got some Patreon stuff going on. A lot of ways people can support us. I'll just really quick shout out. As a lot of people know, if you want to get better at Python, learn some things,

00:07:01 check out training.talkpython.fm. We've got a ton of classes coming up on almost 200 hours of polished Python content over there, which is pretty crazy.

00:07:11 Yeah. And I love the content there. We now have 55 supporters on Patreon, which is super cool. And if you go to any of our show notes, there's a Patreon link on the side. You can click on it. And, and a lot of people are just sending a buck a month and it's just awesome, but it adds up and it helps out.

00:07:27 Yeah.

00:07:27 Thank you.

00:07:28 Yeah. It definitely helps out covers operating expenses like editing and transcripts and whatnot.

00:07:33 Yeah. So what'd you got next for us?

00:07:36 I have a follow on to a follow on to a follow on. How about that?

00:07:42 That's great.

00:07:42 Yes. So we spoke about black cell magic, which is a way to type a thing into a cell in Jupyter and have black formatted. And a bunch of people said, Oh, and there's this and there's that. And there's all these great things.

00:07:56 And you covered, I think it was NB, NB QA.

00:07:59 QA. Yeah.

00:08:00 I wasn't sure the last letter QA, which is cool.

00:08:03 So that's kind of like a bigger set of tooling and other libraries along with black on top of that.

00:08:08 But one of the things that bugs me about Jupyter notebooks is they just seem to lack some of this like proper editor support and black like format code is one of those, but it's not the only one that bugs me.

00:08:22 And it took me a while to kind of get the Zen of notebooks.

00:08:24 Like, why do I create one of those instead of something else?

00:08:27 And what's the flow?

00:08:28 And I really do find them valuable, but it drives me crazy that if I type, you know, class object library dot, I just have to know.

00:08:36 Like, there's no help.

00:08:38 I have to know what I'm supposed to type.

00:08:39 And then when I type it out, I say parentheses.

00:08:43 And there's some number of arguments that go into this function call or whatever.

00:08:47 I have to just know the order, the type, the name, everything.

00:08:50 Now, before someone mails in, I know I can type thing dot and then press tab and it'll come up in a list.

00:08:58 But like this, like, please help me out on request.

00:09:02 I don't know.

00:09:03 It's like just typing dot should just I should be able to just flow and not have to like, OK, type.

00:09:08 And then, OK, now what's the documentation again for the signature?

00:09:11 Where is it defined?

00:09:12 All those kinds of things.

00:09:13 So there's this cool project that was sent in by Anders Kalmer called JupyterLab LSP for Language Server Protocol Integration or more.

00:09:26 It rolls right off the tongue.

00:09:29 Language Server Protocol Integration for JupyterLab is its official name, but it's super cool.

00:09:35 It brings a lot of these things that I felt were missing from the Jupyter experience.

00:09:41 So if you go there, you'll see that there's a bunch of examples, example code, which shows Python.

00:09:46 It actually works in R, Bash, TypeScript and a bunch of other languages.

00:09:49 So here are some of the things that are supported.

00:09:52 One, if I hover over a piece of code, if an underline appears, you can press control to get a tooltip with a function and function or class signature.

00:10:02 You can get documentation and other information about it just by hovering.

00:10:06 It'll show you, like, if you write code that's bad.

00:10:09 Like in Jupyter, if I write code that's bad, it just looks like code that's good, except for it won't run.

00:10:14 Whereas here, it'll put little squigglies under it and say, there's something wrong with this.

00:10:17 Or there's a warning here.

00:10:19 You're doing something wrong.

00:10:21 So editor stuff like that.

00:10:22 Jump to definition.

00:10:23 So you can right click and say, take me to where this variable or this function is defined, which is pretty awesome.

00:10:29 It'll highlight your references.

00:10:31 If you place it on a variable like in PyCharm, you've got a variable and you put your cursor on it.

00:10:38 Like all the places where it's used or defined light up.

00:10:41 So like that.

00:10:42 Yeah.

00:10:43 And, ta-da, auto-completion.

00:10:45 If I type the character dot, it will know that I want auto-complete so I don't have to keep typing stuff.

00:10:51 That's pretty cool.

00:10:52 And then on top of that, it has rename refactorings.

00:10:56 So you can rename stuff across your cells and things like that.

00:11:00 Oh, that's great.

00:11:01 As well as files.

00:11:02 So, you know, not groundbreaking, world-changing, but it definitely seems like it will take it up a notch in your Jupyter experience, right?

00:11:11 Just to bring it a little closer to editors like PyCharm and VS Code.

00:11:14 And it proves the point that the hardest thing in computer science is naming.

00:11:18 That's right.

00:11:18 We have a whole function when you get that wrong.

00:11:22 That's what you do.

00:11:23 Yeah.

00:11:23 But I mean the name Jupyter.

00:11:26 Jupyter.

00:11:26 Jupyter.

00:11:28 Jupyter dash.

00:11:28 Jupyter lab dash LSP.

00:11:30 Yes.

00:11:31 Indeed.

00:11:31 Right.

00:11:32 All right.

00:11:34 What's this next one you got?

00:11:35 Well, speaking of Jupyter, I guess it's a little related.

00:11:38 This is a project that is implemented as a Jupyter book.

00:11:42 I'm not sure if we covered Jupyter books, the Jupyter book project before, but it's a pretty neat documentation system.

00:11:49 This is open source tools and data for music source separation.

00:11:54 I was researching music, Python music tools recently, came across this.

00:11:59 And it's really cool.

00:12:01 So what it is, it's an online book powered by Jupyter book.

00:12:05 The authors are Ethan Manilow, Prem Sutherman, and Justin Solomon, I think.

00:12:12 And it's a tutorial intended to guide people through modern open source tooling and data sets for running, evaluating, researching, and deploying source separation approaches and focuses on music.

00:12:24 Now, that's a mouthful.

00:12:25 Now, that's a mouthful.

00:12:26 And maybe that's a limited set of people.

00:12:28 But it's really neat.

00:12:29 It uses Python.

00:12:29 It uses Python.

00:12:30 It uses Python.

00:12:31 And it has interactive demos.

00:12:33 Things with things with audio are way easier to visualize if you have a waveform in front of you.

00:12:39 And this uses waveforms and stuff.

00:12:41 It's beautiful.

00:12:42 One of the things I want to highlight is there's a basics of source separation section.

00:12:46 And that includes a primer on digitizing audio signals.

00:12:50 And it looks at frequency, time frequency representations, what phases, some evaluations and measurements.

00:12:58 Anyway, I think this is the best reference for understanding digitizing signals that I've seen so far.

00:13:04 It's really great.

00:13:05 Oh, this is super cool.

00:13:06 I think maybe the most generally useful thing at all, this is the whole Jupyter book way to create something like this for any knowledge base.

00:13:14 Yeah, I'd love to see how they do it.

00:13:16 And it's a creative commons sort of thing.

00:13:18 They got links to their GitHub repo so anybody can see how they do this.

00:13:22 So it's really cool.

00:13:23 I like it.

00:13:24 Yeah.

00:13:24 Yeah, it's super cool.

00:13:25 And they do have it on.

00:13:26 It's open source on GitHub.

00:13:28 So that's pretty sweet.

00:13:28 I do have a complaint, though.

00:13:30 Okay.

00:13:31 This is a big deal.

00:13:31 So there's a section in here on the basics of phase and phase trend, like waveforms and what phases and so on.

00:13:39 There's some formulas in here where they define J to be the square root of negative one.

00:13:44 We all know that I is the square root of negative one.

00:13:46 Come on.

00:13:47 I mean, it's an imaginary number.

00:13:52 It doesn't start with J.

00:13:53 There's an I.

00:13:54 Sorry, carry on.

00:13:57 That phase thing is gorgeous.

00:13:59 It's got, anyway.

00:14:00 Yeah, the animations and phase is actually really nice.

00:14:02 Yeah.

00:14:02 To tell you the truth, I deal with like signals all the time.

00:14:05 And if you want to get into the math, the math is here.

00:14:08 So this is, this actually would be a great actual textbook for a university course.

00:14:12 But I just skip over the math part and read the explanations and stuff.

00:14:17 It's still useful.

00:14:18 Yeah.

00:14:18 Quite neat.

00:14:19 All right.

00:14:19 Let me ask you a question.

00:14:20 Okay.

00:14:21 You've done C++ ton.

00:14:22 You still do it every now and then, right?

00:14:24 I do it every day.

00:14:25 Yeah.

00:14:25 Right on.

00:14:26 Python have pointers.

00:14:28 Somewhere.

00:14:28 I guess.

00:14:29 It's got to.

00:14:30 Does it have value types?

00:14:32 Like non-pointers?

00:14:33 Can I have a thing that doesn't behave like a pointer?

00:14:35 I think of it more like references.

00:14:37 Yeah.

00:14:37 All of Python seems like a reference.

00:14:39 I want to cover an article, Passed by Reference in Python, Background and Best Practices from

00:14:44 the Real Python crew.

00:14:45 And also, I just apparently failed this job interview.

00:14:48 By Marius Mogiarosi.

00:14:53 Hopefully, I got that somewhat close.

00:14:55 So, Marius wrote this article over there on Real Python, which is pretty interesting.

00:15:02 And it sort of compares languages that have explicit.

00:15:05 You can explicitly work with things as references or pointers, or you can work with them as local

00:15:11 value types.

00:15:12 And then sort of compare that, like there are certain types of problems you might solve

00:15:16 or address or algorithms over there that don't necessarily make a lot of sense in Python.

00:15:20 So, how would you simulate some of those behaviors?

00:15:23 So, Python's interesting because in the guts, like everything is a pointer.

00:15:28 Even the number four.

00:15:30 If you ask, like the number four in C.

00:15:33 If I said four, how many bytes would you think that would take?

00:15:36 It depends on the, in C?

00:15:37 Yeah.

00:15:38 It's the machine type.

00:15:40 Right.

00:15:40 So, probably four or eight, something like that, right?

00:15:42 How many bytes?

00:15:43 Yeah.

00:15:43 Yeah.

00:15:43 Yeah, exactly.

00:15:44 And when you create one, it would be associated with the stack, unless you did some funky stuff

00:15:50 to like allocate it and like, you do it in like an amper to get the address.

00:15:53 But by default, it's like, it comes on the stack and you pass it around and makes a copy

00:15:57 of it.

00:15:57 In Python, the number four is a pointer.

00:16:02 It's a C, it's a pi long object out in the heap.

00:16:07 And it takes like 28 bytes.

00:16:08 Like the number four takes 28 bytes, which is pretty interesting.

00:16:11 But so, everything, like even basic numbers that seem like they just might be values are

00:16:16 like in the guts, these sort of reference types.

00:16:19 But the function passing behavior is, they say it's something called pass by assignment,

00:16:26 which I'll go with that.

00:16:28 So, when I pass in, like if I create a variable, say x equals four, and then I pass the x to

00:16:34 a function and that function changes the value of x, it's changed for the function, but not

00:16:38 for the global thing that had it before, right?

00:16:41 Yes.

00:16:41 Well, in C or C++ or C#, like all the examples here, actually C#, you can say,

00:16:47 no, no, no.

00:16:47 Pass it so that if the function changes the variable, the one where it came from also changes,

00:16:52 right?

00:16:53 I can pass the, I guess in C, that would be the pointer to the pointer, and you would

00:16:59 make a change to the pointer.

00:17:00 In C#, you would say ref or out or something like that, and it would make a change on the

00:17:06 other side.

00:17:06 So, how do we do that in Python?

00:17:08 And like, what are some of the interesting things that you might do?

00:17:11 I said, well, Python doesn't have value type, so it doesn't, one of the problems with the

00:17:16 value type world is like, maybe if I created a class, let's say a class in C++, and I create

00:17:22 it on the stack and I pass it, it's, I think it can make a copy of that, is that right?

00:17:27 Anyway, it's definitely, if you don't use the new keyword, like these pass by values are

00:17:31 making copies of the data that's passed around, that can make things slow.

00:17:35 Python, everything at some level being a pointer, doesn't have that problem, so that

00:17:39 doesn't apply.

00:17:41 But how do you implement these algorithms?

00:17:43 So, it says, well, if you want to actually have the function make a change, you can do

00:17:49 a couple of interesting things.

00:17:50 Like, you could, suppose I want to pass in a variable, maybe have that variable change,

00:17:55 but also get like a true false back, like it worked or it didn't work or something along

00:18:00 those lines.

00:18:00 So, they said, look, you can use tuple unpacking to return multiple values, the return value

00:18:07 and then the modified value, which is one.

00:18:09 Another thing is you could pass in a mutable data type, like I create an object and change

00:18:13 a field on the object, right?

00:18:15 So, that would have this.

00:18:17 Or list.

00:18:17 Or list, or yeah, anything that is mutable, basically.

00:18:20 Right.

00:18:20 Or another interesting one would be returning optional value types.

00:18:25 So, if I had like a function that would say, like they would say, okay, we're going to

00:18:29 try to parse a string into an integer and I either want to tell you, here's the number, the

00:18:34 integer you got, or it didn't work.

00:18:37 Forget that you might throw an exception, but suppose for some reason, this example, you

00:18:41 don't want to throw an exception, right?

00:18:42 What do you do?

00:18:43 Well, you could return the value and whether or not it worked as a tuple.

00:18:48 And that's one thing.

00:18:49 Like in C#, the example they say is as a tripars takes a string and an out integer,

00:18:55 which is like a one way ref type of thing.

00:18:59 So, how do we do that in Python?

00:19:00 Well, you could do just this multi-value, multi-return value, tuple unpacking, like it

00:19:05 worked and here's the value, or it didn't work and there's no value, which is, I don't really

00:19:10 love that one.

00:19:11 One that kind of is interesting is like, you could use optional types.

00:19:14 So, you could return an integer and if it's not parsable, you return none.

00:19:19 And then use the walrus operator to say like, value colon equals, try to parse it.

00:19:24 If that's not none, then you're good to go.

00:19:25 That one's kind of okay with me.

00:19:27 How do you feel about this, Brian?

00:19:29 I feel like people are trying to force non-Python programming styles into Python.

00:19:34 Yeah.

00:19:35 It's interesting.

00:19:36 It was reading through, it just made me think about, think back to my C++ days and all these

00:19:40 patterns of passing variables and changes and, you know, passing by reference, copy, copying

00:19:46 values and all that stuff.

00:19:47 It's probably worth reading, I think, even if you don't necessarily need to do it that much.

00:19:51 Yeah.

00:19:51 I actually like to be more explicit and have either do functional programming where you're,

00:19:57 I like the functional model where you, you pass in data and you return the, return the

00:20:02 modified.

00:20:03 Yeah, exactly.

00:20:04 The other approaches to, that I like is to know, I mean, you have a shared data that

00:20:09 you're pointing to, that they're, you know, you're past a modifiable data, like a list

00:20:15 or something and say, hey, this function, and it needs to be obvious, like fill out the

00:20:20 data, you know, it needs to be obvious that the thing you're calling is going to change

00:20:24 that or use a database to reference changeable stuff.

00:20:28 Yeah, a lot can be done with data structures.

00:20:31 Anyway, I thought it was interesting to compare these other styles of programming to how you

00:20:35 might compare, get them done in Python.

00:20:37 And I think I'll go for the optional.

00:20:38 If I had to pick one of these to write, I think I would go for the optional try pars that

00:20:42 returns none.

00:20:43 If, you know, if it doesn't work.

00:20:46 Assuming that you don't want exceptions, right?

00:20:48 Right.

00:20:48 And I mean, that's also like the default.

00:20:51 If you've got like the return of a value in, in some nested data or logic and you don't

00:20:59 return anything, otherwise you're going to return none.

00:21:02 So.

00:21:02 Yeah.

00:21:03 Yeah.

00:21:03 You know, when I first started learning Python, that's something that was strange to me is

00:21:07 that every function returns a value.

00:21:09 Even if the word return doesn't appear in the function, it just happens to be none.

00:21:13 Like the fall through case sort of in there is return none.

00:21:16 If nothing happens.

00:21:18 I kind of forgot that that's not obvious.

00:21:19 Yeah.

00:21:20 Yeah.

00:21:21 But that's, that takes some getting used to because all the other languages you say

00:21:25 it returns one of these things.

00:21:26 If you want to return something, you say return none at the end or something.

00:21:30 Anyway.

00:21:31 Yeah.

00:21:31 A lot of interesting ways to think about passing variables and some of the patterns

00:21:35 there.

00:21:35 Yeah.

00:21:36 My head hurts.

00:21:36 So if we're going to write some, some of these down, maybe you should just put them in and

00:21:40 get up and store them.

00:21:41 Huh?

00:21:41 I apologize again.

00:21:42 I think somebody on Twitter sent us this, but I couldn't find the reference this morning.

00:21:46 This is a really cool thing.

00:21:48 The author is Wei Wang, I think.

00:21:50 Goes by only Wei on GitHub.

00:21:53 And it's a tool for visualizing Git concepts.

00:21:56 And I absolutely love this.

00:21:59 He actually references a Git basics page, which is, I forget where that's at, but it's a good

00:22:05 explanation, but it's a, you know, it's a visual, not really, it's like a static thing

00:22:10 that you read about all the different ways and all the repos and where they are and everything.

00:22:13 And that's, you kind of have to read that once, even though if it doesn't make sense,

00:22:17 read something about how Git goes together.

00:22:20 But this visualizing tool is super cool.

00:22:23 The one he's, he's put together, it says visualizing Git concepts in D3.

00:22:28 And it just nails the things home.

00:22:30 It's really cool.

00:22:31 It's got these, all these different concepts like commit, branch, checkout, checkout with

00:22:36 a B, reset, revert, merge, rebase, tag, fetch, pull, push.

00:22:40 And you just start out with a, like a diagram of what your repo looks like with branches and

00:22:47 everything in the dots.

00:22:49 And then on the left side, you can type commands and you, you don't have any code you're changing.

00:22:54 You're just, you're just typing these commands to see what it does to the, the repository tree.

00:22:59 And it'll like add nodes and add tags and things move around.

00:23:04 And it's like light bulbs go off in your head where you're like, oh, that's what's happening.

00:23:10 When I do a checkout, all I'm doing is looking at a different branch and that's it.

00:23:13 Yeah.

00:23:14 It's pretty cool.

00:23:15 So yeah, it's this cool interactive command thing.

00:23:17 Like you said there, what if I type this and this, what if I do like two commits and then

00:23:22 a branch and then a commit and then check it out the other branch and do a commit.

00:23:26 How does that whole thing look?

00:23:28 Yeah.

00:23:28 It's pretty nice.

00:23:29 And it tells you like, there's a little instructions around each little lesson to like describe what's

00:23:35 going on and then suggest things to try.

00:23:38 But the interactive thing, you can do whatever you want within it.

00:23:41 You can, you can try things out and it doesn't, it doesn't handle all of the things.

00:23:45 Like for instance, I tried to get checkout with a dash for the last branch.

00:23:50 That's not implemented.

00:23:52 It's not there.

00:23:52 So, but, but it's pretty cool.

00:23:55 You know, another thing that's nice about it.

00:23:57 I mean, the fact that it doesn't support everything isn't necessarily ideal.

00:24:01 But one thing that is pretty cool is you don't have to be totally accurate there to make it

00:24:07 work.

00:24:07 Right.

00:24:07 You can just do a get commit and you don't just like add stuff and fake stage things and

00:24:13 then like commit them.

00:24:14 You just type like get commit, get commit, get branch.

00:24:17 And it kind of just shows like there's sort of a shorthand.

00:24:19 Like if you kind of got the sense of it, it'll do the stuff to let you, you don't have to know

00:24:24 your get perfectly.

00:24:25 Yeah.

00:24:25 And the commands that involve, cause you kind of want to play with this stuff to try to get

00:24:30 it, get your head around it.

00:24:31 But you don't really want to muck up your own repo or your code base.

00:24:35 The ones that involve like a, the origin remote repository, like fetch, pull and push.

00:24:40 Those are great to be, you visualize both of them at the same time.

00:24:44 And if there's two pictures going on and this is definitely something, a desktop sort of thing.

00:24:49 I don't think that it would, I think it would be tricky to do this on an iPhone or something

00:24:54 like that.

00:24:55 But yeah.

00:24:55 Yeah.

00:24:55 Without a keyboard.

00:24:56 Yeah.

00:24:56 For sure.

00:24:57 I'm going to definitely going to bring this to my team and say, Hey everybody, check this

00:25:00 out.

00:25:01 Yeah.

00:25:01 You should do things like, I want you to build a picture that looks like this.

00:25:05 What get commands and what order of the commands are necessary to result in this structure.

00:25:11 Right.

00:25:12 I think that would be a cool way to do it.

00:25:13 Oh man.

00:25:14 Okay.

00:25:15 So, so the second part of the interview, I will fail at also, man, you're tough.

00:25:22 I'm glad I'm not interviewing with you.

00:25:24 Oh my gosh.

00:25:24 Yeah.

00:25:25 No, I think that would be cool though.

00:25:27 Cause you're like, all right, well, cause I think conceptually we also have this idea of

00:25:31 like, I, this is the picture I want, but what are the commands that like take those steps?

00:25:36 Right.

00:25:36 Yeah.

00:25:36 I'm still getting over the, yeah.

00:25:39 Quick, the integer four.

00:25:40 How many bytes?

00:25:42 How many bytes in Python?

00:25:44 Four or eight or something.

00:25:45 28.

00:25:46 Yeah, exactly.

00:25:47 28 is not what you would expect, but in Python it's 28.

00:25:50 Yeah.

00:25:50 Okay.

00:25:51 And if you want to test, import sys, get object size, pass the number four.

00:25:55 All right.

00:25:56 But if here's the, here's the next question, Brian, if I have a hundred fours in a

00:26:01 Python program, how many bytes does it take?

00:26:03 28.

00:26:04 Yeah, exactly.

00:26:04 Plus the pointers that point at them, but yeah, 28.

00:26:07 That's pretty cool.

00:26:08 So 128, I don't know.

00:26:10 Eight times, 828.

00:26:13 I don't know.

00:26:14 How big are the pointers?

00:26:15 I think they're 64 bits.

00:26:16 So they gotta be eight.

00:26:17 I don't know.

00:26:18 We've gone down a hole though.

00:26:20 We don't need to.

00:26:20 What I would rather talk about is, MicroPython.

00:26:24 Yeah.

00:26:24 So this is.

00:26:25 Round out the extras.

00:26:26 Oh yeah.

00:26:26 We're in the extras.

00:26:27 Now a micro bit announced that it's going to come out with a new version in November.

00:26:31 It's got a whole bunch of videos showing the cool stuff.

00:26:34 They're shooting at the same price point they had before, which I have no idea what it was,

00:26:38 but reasonable.

00:26:39 But micro bit now has a speaker and a microphone.

00:26:42 So you can play sounds and, and do things like, I don't know, record your voice or something.

00:26:48 I don't know what you want to do, but, but that's neat.

00:26:51 Nice.

00:26:51 Mike.

00:26:51 Yeah.

00:26:52 It does do a MicroPython.

00:26:54 I think that, I think that do something else also, but why would you do something else?

00:26:57 Use MicroPython.

00:26:58 Yeah, exactly.

00:26:59 Yeah.

00:27:00 I'm looking for the price.

00:27:01 all right.

00:27:03 Too much math.

00:27:04 I think it's $21, but that's Australian.

00:27:07 So I don't know.

00:27:08 Something like that.

00:27:08 It's not a lot.

00:27:09 Australian.

00:27:11 Well, the first thing I pulled up was $2,119 Australia, but that's for a hundred packs.

00:27:17 So.

00:27:17 Okay.

00:27:18 All right, cool.

00:27:20 Now that's really neat that the sound is coming in and you can interact with it.

00:27:24 I think there'll be a lot of neat stuff you can do there.

00:27:25 I, that's a really nice, I mean, so far, a lot of these little devices, like how do you

00:27:29 interact with it?

00:27:30 Well, you can kind of shake it or you can touch this button or it like has an led and sound

00:27:35 is a whole nother level, right?

00:27:36 You could do speech recognition.

00:27:37 You could play like, I think it's really neat.

00:27:39 Yeah.

00:27:40 It looks like they've got some plans to extend what this can do in the future too.

00:27:44 So it was pretty cool.

00:27:45 Yeah.

00:27:45 Absolutely.

00:27:46 I'm a fan of the circuit playground express.

00:27:48 That's really fun thing to play with, but this is neat also.

00:27:51 Yeah, for sure.

00:27:51 All right.

00:27:52 I got two quick things to share with people.

00:27:54 One really fast one yesterday.

00:27:57 So eight days ago in real time, I was on the four 25 show, which is a Microsoft identity,

00:28:06 which stream spent three hours converting a flask web app to use federated identity and like

00:28:15 remote login and all sorts of cool stuff like that.

00:28:17 And like just to step away from also having like social logins and whatnot using all those

00:28:23 libraries.

00:28:23 So if people are interested in that, I'll link to the whole show.

00:28:26 And I just want to comment.

00:28:27 It's kind of, it's a very different way of presenting.

00:28:30 Like I'm used to polished presentations.

00:28:32 Like what are we going to do in this half hour?

00:28:34 Let's get it all down really clear.

00:28:36 Here's the demo I'm going to write.

00:28:37 I've already like gone through it once.

00:28:39 So I know it's going to work.

00:28:39 And this is like, Hey, we have this idea.

00:28:41 Let's just work on it until we get it done.

00:28:43 And just kind of like take input from the audience, from the people watching live.

00:28:48 And yeah, for people who've done presentations and haven't done this style, it's, it's an interesting

00:28:54 shift.

00:28:55 It's a cool way to like sort of present programming to people.

00:28:57 I think.

00:28:58 So would you do it again?

00:28:59 Did it, was it fun?

00:29:00 Yeah, it was fun.

00:29:00 It was a little stressful because I haven't done a lot with like, you know, like OAuth identity

00:29:06 type stuff.

00:29:06 So I'm like, I have no idea if we're going to be successful, like making this work at all.

00:29:10 But it was fun.

00:29:11 And you know, spoiler alert, it worked in the end.

00:29:13 Is the 425 a joke on like, you know, five minutes after 420 or?

00:29:17 Yeah, that's, I have no idea.

00:29:20 No idea why.

00:29:21 Okay.

00:29:21 There's an about, let me see if it says what it says in the about.

00:29:24 I have no idea.

00:29:26 It doesn't say.

00:29:26 Okay.

00:29:27 But anyway, it was, it was fun.

00:29:29 So people can check out that video.

00:29:31 And then also I've started using something interesting that people may find interesting.

00:29:35 So one of the things that bugs me is so much of our life is on the web, right?

00:29:40 As you know.

00:29:41 And how many cookies do you think your browser has in it?

00:29:44 If you would like to sum them up across all the sites.

00:29:47 No.

00:29:48 Like an untold number, right?

00:29:49 Like 100,000, 200,000, like some insane number.

00:29:52 If it had been, you know, the same browser for years and you've used it all day, like who

00:29:58 knows, right?

00:29:58 Yeah.

00:29:59 So I had a couple of thoughts.

00:30:01 I decided, well, I want to just restart all that from scratch.

00:30:04 So I erased every bit of history from my browser and fired it back up.

00:30:09 I'm like, okay, now I've got to log into all these things again, which is fine.

00:30:12 But then also realize like, do I want, like say, if I go to some random site and maybe it

00:30:21 has some cross site vulnerability or whatever, do I want that site potentially to be able

00:30:24 to say to get to my GitHub things or my bank or whatever, if I'm logged in.

00:30:29 So I started using this thing called Firefox containers that let you basically create like

00:30:34 isolated independent browsers for like categories of sites.

00:30:38 So like, oh, like GitHub and all the, and Bitbucket and all those things are in their

00:30:42 own like container.

00:30:44 So only cookies they ever see in login sessions and whatnot are between say GitHub and Bitbucket

00:30:50 like those and all the other browsing, none of them know anything about that I've ever visited

00:30:56 GitHub, for example.

00:30:57 Oh, cool.

00:30:58 So anyway, if people are, if that sounds interesting, I'll link to a little, short video.

00:31:02 Is there a limit?

00:31:03 I mean, cause you could possibly just do a container for each site that you go to.

00:31:07 You could, it gets a little bit annoying because if you click on, like if you're in like Google

00:31:12 drive and you click on a link and it takes you somewhere and you did that like over, over

00:31:19 grouping it, like you'd have to log in every time cause it wouldn't know it.

00:31:22 There's a little bit of a juggling.

00:31:24 So too many is, it gets annoying, but yeah.

00:31:27 Anyway, it's kind of a cool idea to like keep all those things separated.

00:31:30 People definitely should put Facebook in there cause.

00:31:32 Oh yeah.

00:31:32 I have, I have one specifically the container, like the containers are like banking, shopping,

00:31:38 code, cloud drives.

00:31:40 And I have one called shunned and shunned is where Facebook is.

00:31:43 Yeah.

00:31:46 So for example, that's a great example.

00:31:47 So like you go to all these sites and they have like Facebook pixels and all this tracking

00:31:50 stuff.

00:31:51 Like, because I put Facebook over there and didn't log into it anywhere else, then it

00:31:56 will never, those things will never trigger for me in the sense of like being tied to my

00:32:00 account.

00:32:01 Right.

00:32:01 Yeah.

00:32:02 And that makes me happy.

00:32:03 I've got like one relative that's that the only way to get ahold of them is through

00:32:06 Facebook messenger.

00:32:07 And so I have to have Facebook just for that.

00:32:10 Yeah.

00:32:11 So you got to get one of these and like you kind of sort of don't have it.

00:32:14 Awesome.

00:32:16 All right.

00:32:17 Well, that was funny, but not nearly as funny as what we got coming up here.

00:32:21 Okay.

00:32:22 All right.

00:32:22 You want to do the first one?

00:32:23 I'll do the next one.

00:32:24 And then you've got to do the last one.

00:32:25 Cause I don't know where we're going with it.

00:32:27 Okay.

00:32:27 So I'm doing the first one.

00:32:28 Yeah.

00:32:29 Okay.

00:32:29 Where did developers drink?

00:32:31 I don't know.

00:32:31 Where do they drink?

00:32:32 At the food bar.

00:32:33 I had that food bar.

00:32:34 I love it.

00:32:35 Yeah.

00:32:35 All right.

00:32:35 This one, you got to do the last line for me.

00:32:38 Okay.

00:32:38 Cause it's a knock, knock joke where normally it's like knock, knock.

00:32:40 Who's there?

00:32:41 How?

00:32:41 Which cow?

00:32:42 Interrupting cow.

00:32:43 That kind of thing.

00:32:43 Right.

00:32:44 Yeah.

00:32:44 All right.

00:32:44 Knock, knock.

00:32:45 Async function.

00:32:46 Who's there?

00:32:47 Perfect.

00:32:50 All right.

00:32:51 So those are the two jokes.

00:32:52 What's this last one?

00:32:53 Oh, also, if anybody tells us that we've already done this async knock, knock joke before,

00:32:58 we haven't.

00:32:59 This is the first time we just, they somehow, asynced.

00:33:03 That's right.

00:33:04 Exactly.

00:33:04 Yeah.

00:33:05 Yeah.

00:33:05 It's just, it's a race condition.

00:33:06 It's not a, not a problem.

00:33:08 Fine.

00:33:08 Yeah.

00:33:08 No, I just, something funny happened to me on Twitter the other day.

00:33:12 Somebody contacted me and said, Hey Brian, what testing module would you recommend?

00:33:17 I'm aware that there's unit test and pitest, but are there better options?

00:33:22 Can you, can you guess which one I recommended?

00:33:25 Well, you don't like to install stuff.

00:33:28 So you definitely said unit tests.

00:33:29 Yeah.

00:33:32 That's right.

00:33:33 Yeah.

00:33:33 That's funny.

00:33:34 Awesome.

00:33:34 Cool.

00:33:34 Cool.

00:33:35 I thought it was a joke at first.

00:33:36 I really thought they were joking.

00:33:38 They were pulling your leg.

00:33:38 They're like, let's see what you'll say.

00:33:40 Come on.

00:33:40 Of course you'll say pitest.

00:33:41 Yeah.

00:33:42 But apparently he knew of me somehow without knowing that I wrote the book.

00:33:46 So yeah, exactly.

00:33:47 Yeah.

00:33:48 Cool.

00:33:49 Cool.

00:33:49 Well, thank you as always.

00:33:50 Thank you.

00:33:51 Yep.

00:33:51 Bye.

00:33:52 Next time.

00:33:52 Yeah.

00:33:53 See you next time.

00:33:53 Thank you for listening to Python bytes.

00:33:55 Follow the show on Twitter via at Python bytes.

00:33:58 That's Python bytes as in B Y T E S and get the full show notes at Python bytes.

00:34:03 Dot.

00:34:03 F M.

00:34:04 If you have a news item you want featured, just visit Python bytes.

00:34:07 Dot.

00:34:07 F M and send it our way.

00:34:08 We're always on the lookout for sharing something cool.

00:34:11 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:34:14 Thank you for listening and sharing this podcast with your friends and colleagues.

