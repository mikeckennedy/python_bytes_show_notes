00:00:00 Hello, and welcome to python bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 320, recorded January 24 2023. I'm Michael Kennedy. And I'm Brian Aachen. And this episode is sponsored by us over at talk Python training and testing code and Patreon supporters. And we'll talk more about all that a little bit further into the show. And also, yes, for those of you listening live, you already know this, but for most people, they may not know that we're live streaming this on YouTube. And if you just go to Python bisetta FM slash stream slash live, then you'll be able to follow over there, usually on Tuesdays at 11am. Pacific Time, which it is right now, you couldn't be part of the show. That's how it was, some of the folks are in the audience. So hopefully you go over there. And you know, subscribe on YouTube and press the Notify. So you know, when we're posting live streams. And with that, let's, let's get going, Brian, let's mark it down.

00:00:54 I'm gonna talk about markdown a little bit while you're queuing up your next item. We do pay attention to rich and Wilma Coogan, in the show, and I'm not going to talk about them too much. Except for that, I noticed that rich updated, we got a release note that they updated their markdown parser. And from something called common mark, which I was familiar with to mark down it, pi. And I, I was curious about this. So I went and took a look. So the common Mark library, if we go take a look at that. That's up on pi pi commonmark. No big deal. But if we go look at the source in GitHub, it says this repository has been archived by the owner on November of 2022. Oops. And if we look down a little bit further, it says Warning. It's deprecated. We recommend using come markdown it by and okay, I haven't used it. So I wanted to go take a look. So markdown it. I think I'm saying that right? Is it's built on top of another it's a another markdown tool. So markdown It is its own tool and the markdown at pi is a Python wrapper around it. So great. So it's what do we have to worry about this one going out of out of fashion as well. And I think we're probably safe because the project this is a part of executable books. And executable books is a project to try to build more collaboration with Jupyter Notebooks. So I think we're safe now. So to use markdown it for pie for a while. And I just did a quick there's a live demo thing there's converting markdown, it's it's kind of a nice package, you can do it by itself, you can convert from markdown to HTML on the command line, or you can use it within your code so you can use and it it's got some nice features for ENCODE, pulling in different plugins and stuff if you have different specialties. And we'll go back to the original release. One of the reasons why they did it wasn't just why the reasons why rich started using it isn't just because it's been the common Mark has been deprecated. But they say it will allow us to implement a number of additional markdown features in the future. So this is pretty exciting. And yeah, I'm I don't know a lot about markdown it but I am going to check it out. So this well,

00:03:25 if it's used by executable books, and it's used by Rich, I think it's that those are some pretty solid endorsements for it, I saw that it got installed as well. And I wasn't sure why. But now I see that it's from rich. So I use markdown to. And I have no idea what the status of it is. But there's so much of our website that runs on markdown, like every episode page you visit. That's a markdown page. There's a bunch on talk Python, a whole bunch of talk Python training. So anything that's better for markdown, I'd definitely, definitely be wanting to give that a look.

00:04:00 Well. And I don't want everybody to using the same thing because we do want some different tools to build on each other and stuff. But

00:04:08 indeed. All right. Should I sketch out the next idea for you?

00:04:12 Yeah. Let's take a look.

00:04:15 Let's take a look. Oh my god, this is fan tastic. So this was sent over by Jake Furman. And Jake said, have you seen sketch? So we've seen a lot of AI coding assistants. We've talked about the potential bordering on violating license agreements and stuff of GitHub co pilot, everyone has surely heard about chat GDP. I have friends who are not even a programming they come Michael I'm working on some programming thing because a jet chat GDP I'm like, alright, well, interesting. We'll see where all that stuff goes. But here this thing called sketch is like a simple view, a simple way to ask natural language questions of your data that's contained in a painting pandas dataframe Oh, yeah. So the way it works is you go and it's not built into the editor. It's part of it. Monkey patches. I believe pandas, you know, so it adds a function to pandas called, I think, ask, let's see, is the way we Yes, dot sketch dot ask or dot sketched on how to or sketch out apply. So these are the different kinds of prompts that you can give it. Okay, so you just pip install this. And once it's pip installed, and you import it, that's all you got to do. And it lets you ask data cataloging questions like, Is there any personally identifiable information PII within here? Like, is there a phone number? Or is there an email address? Or is there a social security number, this could be some big large data set, and you don't want to save necessarily that or share it, you can ask it, and it'll ask you how to, it'll basically tell you how to get rid of it as well. Also, give me descriptions of this dataset, which is, which is nuts. It also does data cleaning and masking, for example, removing the PII. And it'll extract some features and just lets you visualize stuff. So the best way to do this is to watch this one and a half minute video here. And so what you do, and what it shows you is here's a panda's data frame read from a CSV, and it's got like an order ID and a price and a date and an address. And they just say, data frame dot sketched out, is there any personalizing AI? Information? Or any personal information? This is yes, these fields and says, How can I remove it? And so it writes out the code, you just copy and paste that, boom, now it's removed. And then it says, give me a friendly, see if I can pause this go and click. It says, Can you give me friendly names? So moving? Can you give me friendly names in a single sentence description of each column format, as an HTML list, and boom, it says index, the numerical index dot product, the product purchase in each ordered order ID a unique identifier for each order purchase address the address of the customer who placed the order, and so on and so on. Isn't that isn't that neat? Yeah. Yeah. So it in when it spits out? The answer, it puts a little copy tag. So you can copy you can ask it, how do I do this? You know how to extract city state and zip from the address, which is a single string, and it writes, it writes the code did like, do the split statements to pull it apart telling you this thing is, you know, it's not going to be perfect, but it's going to be pretty good. It's pretty interesting to just jump in. What do you think?

00:07:36 I think it's great. Hey, Scott, how do I remove the data that disproves my hypothesis?

00:07:41 Exactly. I'm gonna need the data that that shows that downward trend here, can you extract just those rows? Anyway, people can check this out, I think it's, it's pretty neat. It says, in the future, we plan to update the prompts at this endpoint with our own custom foundation model built to answer your questions more accurately than GPT. Three can with its minimal data context. So because it doesn't know a lot about your data, you can also directly call open AI directly. It says in not use their endpoint by using your own API key. So there's, there's that anyway, it talks about how it works and monitors over. So this is pretty

00:08:26 powerful, though I'd really, because there's so much data for people using and, and different things we kind of expected now, I was working on a project just recently where somebody things like to test result analysis and a question of like, can we just put natural natural language strings in there to query it? Why do we have to end so people are kind of expecting this all over the place? Now.

00:08:52 I just want to highlight just the last one there, it says, go to the data frame sketch on how to using Plotly. Plot A map of the total sales in each state boom, you get a perfectly perfect interactive map. A geographical map of the United States with you that's pretty neat. Yeah, to be able to just jump in and do that, like, Sure, you could go search and look that up. But you know, instead of just doing D F dot head, d f dot tail, and so on, like,

00:09:22 how to, I could think I'm ready to hang up a shingle for like data science. The side job,

00:09:29 I'm pretty sure that you and I could pass as at least Junior data scientists now.

00:09:34 Just with this. Yeah.

00:09:38 Anyway, I think I think this is pretty cool. I'm pretty psyched about it. It's pretty cool. Yeah, people people should check it out. From what I can tell it doesn't cost anything. So just just play with it, which is really nice. And also, before we move on, I just wanna tell people that this episode is brought to you by us, right? So there's a whole bunch of Python courses that if you get inspired over At talk Python training, we've got the Python 311 guided tour, which a couple hours of hands on show that's awesome. Python did data visualization. So if the sketch stuff was interesting, like there's a bunch of that there, and oh, there's also something on PI test, isn't there? Yeah,

00:10:15 I highly recommend that course. It's great.

00:10:17 I do as well. All right. So if you want to support us, the best way you can do it is to support our other work, as well as share the podcast with your friends. So thank you. Thank you. Thank you for that.

00:10:28 Yes. I also want to thank the Patreon people because they're great. We don't really talk about it much. But you can support us through Patreon as well. And we very much appreciated.

00:10:36 Absolutely. All right. But you got for an excellent Brian.

00:10:40 Well, I want to go in circles a little bit, actually going back to the year 2021. No, in 2021, we covered a article by Henyk, called subclassing, in Python, Redux, and it's her great article to talk about, like, just how to subclassing and dealing with classes in Python and just get your head around it. So I did read it, and I enjoyed it. And then this year, I came across a problem. And I'm like, I think I can solve it with something I read in this article. So I'm gonna scroll down to the things specifically. And it's called. So we have nominal subtyping, with abstract base classes. I tried that, but I decided to go with structural subtyping. And with structural subtyping, basically, you're my understanding is, I just, it's like duck typing, but with like, it's like strict duck typing. And it says here, as you can see, the, the, if you got something calling to two things, two classes talking to each other, one of them doesn't have to know about the other. So in this example, we've got a reader and a full reader. And, you know, it's just a reader protocol, we just need to know that there's a reader protocol here. So I kind of like that. I just knew this was here. And I'm like, How do I apply this? So I went ahead and wrote up an article called fixing circular imports with in Python with protocol. And this is directly from that. So the, it's just a zoom in on one special case, I really have, like, if I've got a class director and actor, and they talk to each other. So a director tells an actor to do an action, no big deal. It has to import the actor, right. So the actor gets a director, so I'm going to, it's gets data from the director. And so it has to be able to call it well, I could just pass it itself. And since we have duck typing, it all works fine that we just called director get data. So far, we have no types that the problem comes in when we have types. If we add types to the whole mix, then when we add types to the director is no big deal. We just add types to everything. But to add types to the actor, suddenly, the actor needs to know what type the director is. And that's where we get the problem. And that's exactly the exactly the kind of problem that I ran into is I wanted to add typing to this to a similar problem and it blows up, it actually blows up really bad. You can't you Python just says you can't do that. It's circular import. So the protocol solution is really slick. And I'm gonna scroll down to the to the answer, the answer is just, I just need, I just need a little bit of a snippet of code that says, I've got this class that is derived from protocol, but it's just got a Get Data Function. And that's all I know about it. I know what it returns. And that's all I know. And I can say that my director really is that type. And that's it, the actor has to change to say what type it is. And the rest of the code just works. And I don't have to change the director to change the test code. It's just this. It's just this one file that I'm changing to be in I like this because I am adding typing, I'm not changing the code at all. And the only thing is that, yeah, anyway, so it's, it's a slick way to use it.

00:14:06 I think so too. It's a little bit like interfaces. But yeah, less, you know, in the traditional Java or C sharp I enumerable or whatever type of interfaces.

00:14:16 Yeah, the first and then I hit it goes through abstract base classes also and that's one thing you could do is you could have a base class that has this Get Data Function and and both the director and the actor know about the base class, but you don't really need that nobody else needs to know that except for this one file. So protocols and ice pack. So

00:14:38 interesting. Yeah. Jonathan audience asking why not just use abstract base classes,

00:14:42 and they both work so it's just a personal preference thing. So

00:14:48 Kim and audience is asking as a question to style do you prefer an ellipsis over the word the key word past indicated empty, empty function? Well, I

00:14:57 am I'm warming to the door. The ellipses a lot because I write a lot of test code and I write a lot of test example test code. And if I say an empty an empty function that is a is a test function, and I use dot, dot dot, it's clear that I'm, I'm not finishing it. Whereas if I say pass, I've actually had some people get confused and think that the pass keyword is how you pass a test. It's not what can be if you've gotten worse,

00:15:32 you're not gonna raise an error. And that that tells me Yeah, I mean, it's that sort of a way to pass it. Yeah. Yeah, yeah, I kind of like it to to say, look, I don't I don't want anything here. I don't intend to come back and fill it out. Just this is

00:15:46 the kind of matches the ellipses match how, how we do, like type stubs as well. I think I'll use ellipses. I don't know if they have

00:15:56 I think they do as well. Like if you go and look at type shed, and you look at the stubs, and they're like, let me just grab one. Rando. Yeah, they all have all those have dot dot, dots, dots, dots for their default value, dot, dot, dot for the implementation, kind of gnarly if you open them up, but there they are. So yeah, to me, I kind of feel like I'm matching the stub definition. Like I don't intend anything to be here. Yeah, exactly. Right. All right. Ready for the next one? Yes. This is a simple and I think will be useful to many, many folks. This one comes to us via red, Vander ham, breadwinner, ham, thank you sent job and recommended also created it. So we've all seen, like code samples, that, that I don't know why, but I guess it's a decent way to explore. But it's always, I've always found it a little bit difficult to consume. Basically, I want to show you how this bit of code works in the repple. Here's what happens, copy this and use it right. And when you see that here, you have the triple arrow and you write some code, that triple you know, right arrow greater than, greater than greater than, right, you might do a for loop, which then has the indent, and it does a triple.dot.to show you that, well, now you're still in the same command, you know, and then eventually, a closing dot and you run it and if you print out, we just say a variable or a response, and then that gets printed without any of the dots or the greater than or anything, it's just straight up. If he said print that, right. So if I do, like, copy this, and I want to explore it, I've got it, okay. You know, remove all the triple dot dot dots on indented correctly, remove the arrows coming out, you know, it's just like, yuck, right? It's just a hassle. So, enter, unravel the inverse of ripple, where you say, take this code and make it runnable. For me, isn't that cool? Yeah, super simple. Like, even if you're in the repple, you can't take what you're copying from someone else's example and put it in the repple, because then you'll have triple greater than, and so you just take this code, and the way it works is you copied to the clipboard, your code sample that you got from this repple thing. And then you just call on ripple as a CLI, and it replaces the clipboard with contents of exactly what you would want. And it even comments out the output. So what wasn't code is now a code comment.

00:18:30 Oh, wow.

00:18:31 Nice. That's perfect. Yeah, really perfect. Right? Yeah. So I can certainly see that this is a handy thing that people may want to install. So when you see the instructions here, it says you can just use UNREP old.py. And the way that you run it, it says up here somewhere. Okay, what you do. So what you do is you copy it, and then you run. Okay, he's updated, it just says hon used to say run unruffled.py. But it's also on pi pi. Which means that you can pip install it. But I would not pip install it. This is not the thing that goes into a virtual environment to be part of a program. This is a CLI tool that you just want to have available. So I would replace PIP with PIP x. And then you just globally have this command on your computer just happens to be implemented with Python, but you copy it, you know, just type on repple. And then you know, whatever is in the clipboard is now better. Okay. It doesn't say use PIP x, but I think I think that's the way that's certainly how I would do if I'm going to install and use this thing. There's a way to set up an AutoHotKey on Windows only. I have no idea about this. So you're on you're on there.

00:19:44 Okay, so how do you do? How do you use it on the command line, you're just

00:19:47 you just type the word on repple. Once you've installed it in the path, which PIP x of course does,

00:19:52 and then you paste your code or use it to

00:19:55 so you copy your code, type on repple on the command line, it looks at your clipboard Oh, come on Rebels, and then it replaces the clipboard like basically with a new copy. Oh, that's the demand. Yeah, that's exactly. Yeah. So really easy. It also says you can import it into a program and use it if for some reason you feel like that's the thing you want. And it has special handling of the underscore, which has special meaning in the repple. Like it knows about underscore and treats it

00:20:23 well, like for instance, like maybe somebody could like maybe change B Python or something like that to allow you to paste right in. Yep.

00:20:33 Meet Yeah, people out there think it's nice. This is a nifty little tool says Kim C uses TK enter presumably for clipboard access, I believe so as well, it should use paperclip, I believe he paper paperclip brother paperclip. If I were saying that, because I feel like a super small, simple little thing, cross platform, copy and paste. But you know, doesn't matter. Really what it uses to accomplish copy and paste.

00:21:02 Tick answers, like built in now is just normally

00:21:05 Yeah, that's true. So I guess there's no dependency? That's right. There's no dependency. So okay, maybe I'll take that back. Maybe that is better. No, I love paperclip. This is cool. If you are, I don't know, if you're working on a book. Or if you're learning a lot where you're grabbing stuff off of tutorials. I kind of sort of spoke tiny a tiny bit disparagingly of this, because the style of showing the repple output, because I'd rather show an example that has executable code and a print statement. You know, I kind of already write this output, like, here's the code, you know, comment, here's the output, right? I don't know, just it seems a little more reasonable to me. But whatever people can write them. And they saw that what and this unwrap will will roll it from one to the other.

00:21:46 Yeah, you can also use doc test to check your repple Doc's.

00:21:52 Yes, exactly. And while they're giving a challenge to the community, I think someone should write a PI charm, and Vyas code plugins using this. So it becomes part of the part of the editors as well, which should be pretty neat. Paste as pasted from right paste from ripple. Yeah, that'd be cool. Yeah, but it's already really handy to have it just, you know, just pop over to the terminal and run this. Alright, awesome. I guess that's it for all of our items, isn't it? I think it is. Yeah, we have we've come to the end of all of the main things. What do you got for our extras today?

00:22:28 Well, I was gonna mention that I wrote an article. But that was, that was my item. So

00:22:32 Alright, so let's go. I got a couple of quick ones here. So I think this happened since our last show, but pretty much right after it shipped. If you have Git, you should update it. So there's remote code execution level vulnerabilities in the Git client that is sitting on your machine, if you have less than 2.39, maybe even less than 2.3 9.1. I can't remember the exact version. But until last week, there was a problem. I'll link to this over here. But you don't really want that. Yeah. Affects 2.39 and older. Yeah, no. So careful. I mean, if you're only pulling stuff from your own repo, and only you can put stuff in your repo, you're safe. But if you're checking out someone else's repo, or PRs or things you might not like it. Okay, another one here. Over on a credit on training, we, as much as I don't like to, had to add some kind of validation. It used to be that dreaded reCAPTCHA thing from Google. And it would say find all of the stoplight, like Well, is it the pole of the stoplight? Also stop? I mean, technically it is, but it's not the light part. And it'd be like, try again, you're like No, right. But because it's the internet, and we can't have nice things. Unfortunately, I had to put something there to slow people down because they were just pounding away on it in various ways that were not ideal. We had stuff to mitigate it. But once you start encountering botnets, then you kind of get yourself into a bad place. So I had to put the reCAPTCHA stuff there to to keep people from messing with it. And I hate reCAPTCHA. But I did it because I had to. So then when Cloudflare came out with turnstyle I'm like, Yes, this is so much better. There's it doesn't ask you about chimneys or fire trucks. It just does a little like run some code on your browser to prove that you're not just requesting and posting this from some bot right but it's a real browser. Off it goes right so that's great. Eli cover cobbler said, Hey, this is awesome that you got this working, I can't get it working. How how to use it. So I ended up posting a gist which has an implementation of this using like a faux web framework didn't really I didn't want to tie it to flask, but it just says like, here's your thing that handles the forum posts do this. It shows the HTML bit which also Cloudflare would show but they don't have the Python version. And then it has the Pydantic based API validation stuff here, which is this is the gnarly bit. So he was like, I can't get it working. Could you post this? And apparently he got to work as well, but I'm sure there are other people who equally hate find all the haystacks find all the fire drugs who would rather use turnstile but it's kind of tricky to use so they can also use that just if they so wish.

00:25:34 Yeah, that's funny.

00:25:37 Yeah, David pool says Google's Google's CAPTCHA has made me doubt my own humanity.

00:25:45 So I always thought like, that'd be fun to do like trees instead or like planet identification. Like Yeah. Like, find the azaleas.

00:25:58 Let's see. So on when I talked about getting a bunch of stickers on my computer the other day, I remember that. Yeah, well, one of the stickers I put his I'm not a robot into like a validator. reCAPTCHA. So I just thought that was fun, too. But that's cool. Anyway, so people are interested in they want to try out turnstile, which is way more privacy oriented. Also nicer, because you don't have to interact with it just a little hard to work with. Here's some code that they can try that at least one other person has been successful using. So that's a tepid, but somewhat good. testimonial. How's that?

00:26:32 That's nice.

00:26:33 All right. Thank goodness, it wasn't in the JavaScript, Brian. Yeah, because it's in the JavaScript. I don't wanna have to go to bug that. Do you want to debug it? No, I

00:26:40 don't want to debug it in the JavaScript. It might make

00:26:43 you so crazy as you have to go and like literally write a song about how much you don't want to go into the JavaScript. Yeah. Now, I am very unskilled at music. But Dylan, Betty is actually quite skilled and has a whole bunch of really funny songs here. Like the big rewrite based on American Pie. When the eight and a half minute long song I'll point out and he wrote a programming song against it. Awesome. Your your API is a hall of shame. You give rest a bad name based on the band, Bon Jovi song. But neither of those are the one that I'm referring to. No, I'm referring to the song called bug in the JavaScript, based on Piano Man by Billy Joel. This is good stuff, right? Yeah. Now it's six and a half minutes. So there's no way I can play it. But it starts out like you've checked all of your database indexes, you've tuned all your API hooks, you starting to think that you might need a drink. Because there's only one place left to look, there must be a bug in the JavaScript because everything else is built properly. But the front end is a pile of crap. It's fun. I like starting to think that I might need a drink because only one place left a look. It's really good. I recommend people put this on. And if you're working with Angular or view or some front end framework, you can play it loud in the obvious office just to just to share a little bit of the feeling. Yeah. Anyway, that's what I got for you this week. Go watch the YouTube video. Thanks. You bet. And thanks for being here. Thanks, everyone for listening as always. Bye. Oh,

