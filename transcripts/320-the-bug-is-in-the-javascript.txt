00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 320, recorded January 24th, 2023.

00:00:10 I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 And this episode is sponsored by us over at Talk Python Training and Testing Code and Patreon supporters.

00:00:19 We'll talk more about all that a little bit further into the show.

00:00:23 And also, yes, for those of you listening live, you already know this.

00:00:26 But for most people, they may not know that we're live streaming this on YouTube.

00:00:30 And if you just go to pythonbytes.fm/stream slash live, then you'll be able to follow over there.

00:00:35 Usually on Tuesdays at 11 Pacific Time, which it is right now, you can be part of the show.

00:00:41 That's how some of the folks are in the audience.

00:00:43 So hopefully you go over there and subscribe on YouTube and press the notify so you know when we're posting live streams.

00:00:50 And with that, let's get going, Brian.

00:00:53 Let's mark it down.

00:00:54 I'm going to talk about markdown a little bit.

00:00:56 While you're queuing up your next item.

00:00:58 We do pay attention to Rich and Will McCuggan in the show.

00:01:02 And I'm not going to talk about them too much, except for that.

00:01:06 I noticed that Rich updated.

00:01:09 We got a release note that they updated their markdown parser.

00:01:13 And from something called CommonMark, which I was familiar with, to markdown it pi.

00:01:21 And I was curious about this.

00:01:23 So I went and took a look.

00:01:25 So the CommonMark library, if we go take a look at that, that's up on PyPI, CommonMark, no big deal.

00:01:34 But if we go look at the source in GitHub, it says this repository has been archived by the owner on November of 2022.

00:01:43 Oops.

00:01:46 And if we look down a little bit further, it says, warning, it's deprecated.

00:01:50 We recommend using Markdownit pi.

00:01:53 And okay, I haven't used it.

00:01:55 So I wanted to go take a look.

00:01:57 So Markdownit, I think I'm saying that right, is it's built on top of another Markdownit tool.

00:02:06 So Markdownit is its own tool.

00:02:08 And the Markdownit pi is a Python wrapper around it.

00:02:11 So great.

00:02:12 So it's what do we have to worry about this one going out of a fashion as well?

00:02:18 And I think we're probably safe because the project, this is a part of executable books.

00:02:23 And executable books is a project to try to build more collaboration with Jupyter Notebooks.

00:02:29 So I think we're safe now to use Markdownit pi for a while.

00:02:34 And I just did a quick, there's a live demo thing.

00:02:38 There's converting Markdown.

00:02:40 It's kind of a nice package.

00:02:43 You can do it by itself.

00:02:44 You can convert from Markdown to HTML on the command line.

00:02:48 Or you can use it within your code.

00:02:50 So you can use, and it's got some nice features for in-code, pulling in different plugins and stuff if you have different specialties.

00:02:59 And if we go back to the original release, one of the reasons why they did it wasn't just why,

00:03:04 the reasons why Rich started using it isn't just because it's been, the common mark's been deprecated.

00:03:11 But they say it will allow us to implement a number of additional Markdown features in the future.

00:03:17 So this is pretty exciting.

00:03:18 And yeah, I don't know a lot about Markdownit, but I am going to check it out.

00:03:24 So this is...

00:03:25 Well, if it's used by executable books and it's used by Rich, I think it's...

00:03:29 Those are some pretty solid endorsements for it.

00:03:33 I saw that it got installed as well, and I wasn't sure why, but now I see that it's from Rich.

00:03:38 Yeah.

00:03:38 So...

00:03:39 I use Markdown 2, and I have no idea what the status of it is, but there is so much of our website that runs on Markdown.

00:03:47 Like, every episode page you visit, that's a Markdown page.

00:03:51 There's a bunch on Talk Python, a whole bunch of Talk Python training.

00:03:54 So anything that's better for Markdown, I'd definitely be wanting to give that a look.

00:04:00 Well, and I don't want everybody using the same thing, because we do want some different tools to build on each other and stuff.

00:04:08 Indeed.

00:04:09 Yep.

00:04:10 All right.

00:04:10 Should I sketch out the next idea for you?

00:04:12 Yeah.

00:04:13 Let's take a look.

00:04:15 Let's take a look.

00:04:16 Oh, my God.

00:04:16 This is fantastic.

00:04:18 So this was sent over by Jake Furman, and Jake said, have you seen Sketch?

00:04:25 So we've seen a lot of AI coding assistants.

00:04:28 We've talked about the potential bordering on violating license agreements

00:04:34 and stuff of GitHub Copilot.

00:04:37 Everyone has surely heard about ChatGPT.

00:04:40 I have friends who are not even a programmer.

00:04:42 They come, Michael, I'm working on some programming thing because of ChatGPT.

00:04:45 I'm like, all right, well, interesting.

00:04:46 We'll see where all that stuff goes.

00:04:49 But this thing called Sketch is like a simple view, a simple way to ask natural language questions of your data that's contained in a panda's data frame.

00:05:01 Ooh.

00:05:01 Yeah.

00:05:02 Okay.

00:05:02 So the way it works is you go and it's not built into the editor.

00:05:08 It's part of monkey patches, I believe, pandas.

00:05:12 So it adds a function to pandas called, I think, ask.

00:05:16 Let's see.

00:05:18 What is the way we...

00:05:19 Yeah, it's .sketch.ask or .sketch.howto or sketch.apply.

00:05:24 So these are the different kinds of prompts that you can give it.

00:05:27 Okay.

00:05:28 Okay.

00:05:29 So you just pip install this.

00:05:30 And once it's pip installed and you import it, that's all you got to do.

00:05:34 And it lets you ask data cataloging questions like, is there any personally identifiable information, PII, within here?

00:05:42 Like, is there a phone number or is there an email address or is there a social security number?

00:05:47 This could be some big, large data set and you don't want to save necessarily that or share it.

00:05:51 You can ask it and it'll ask you how to...

00:05:54 It'll basically tell you how to get rid of it as well.

00:05:56 Also, give me descriptions of this data set, okay?

00:06:01 Okay.

00:06:01 Which is nuts.

00:06:03 It also does data cleaning and masking to, for example, removing the PII.

00:06:07 And it'll extract some features and just lets you visualize stuff.

00:06:12 So the best way to do this is to watch this one and a half minute video here.

00:06:18 And so what you do, you know, what it shows you is says, here's a Pandas data frame read from a CSV.

00:06:23 And it's got like an order ID and a price and a date and an address.

00:06:29 And they just say data frame dot sketch dot, is there any personalizing information or any personal information?

00:06:36 And it says, yes, these fields.

00:06:37 And it says, how can I remove it?

00:06:39 And so it writes out the code.

00:06:40 You just copy and paste that.

00:06:42 Boom.

00:06:42 Now it's removed.

00:06:43 And then it says, give me a friendly...

00:06:45 See if I can pause this going quick.

00:06:47 It says, can you give me friendly names?

00:06:50 Stop moving.

00:06:51 Can you give me friendly names in a single sentence description of each column?

00:06:55 Format output as an HTML list.

00:06:57 And boom, it says index, the numerical index, the da-da-da-da-da-da.

00:07:00 Product, the product purchase in each order.

00:07:02 Order ID, a unique identifier for each order.

00:07:05 Purchase address.

00:07:05 The address of the customer who placed the order.

00:07:07 And so on and so on.

00:07:09 Nice.

00:07:09 Isn't that neat?

00:07:10 Yeah.

00:07:11 Yeah.

00:07:12 So when it spits out the answer, it puts a little copy tag so you can copy.

00:07:17 You can ask it, how do I do this?

00:07:18 You know, how to extract city, state, and zip from the address, which is a single string.

00:07:23 And it writes the code to like do the split statements to pull it apart.

00:07:28 I'm telling you this thing is, you know, it's not going to be perfect, but it's going to be

00:07:33 pretty good.

00:07:33 It's pretty interesting.

00:07:34 I just jumped in.

00:07:35 What do you think of this, Brian?

00:07:36 I think it's great.

00:07:37 Hey, Sketch, how do I remove the data that disproves my hypothesis?

00:07:41 Exactly.

00:07:44 I'm going to need the data that shows a downward trend here.

00:07:48 Can you extract just those rows?

00:07:50 So anyway, people can check this out.

00:07:54 I think it's pretty neat.

00:07:56 It says, in the future, we plan to update the prompt at this endpoint with our own custom

00:08:02 foundation model built to answer questions more accurately than GPT-3 can with its minimal

00:08:09 data context.

00:08:10 So because it doesn't know a lot about your data.

00:08:12 You can also directly call OpenAI directly, it says, and not use their endpoint by using

00:08:20 your own API key.

00:08:21 So there's that.

00:08:23 And anyway, it talks about how it works and what it sends over and stuff.

00:08:26 This is pretty powerful, though, because there's so much data for people using and different

00:08:33 things.

00:08:33 We kind of expect it now.

00:08:34 I was working on a project just recently where somebody, things like test result analysis

00:08:41 and a question of like, can we just put natural language strings in there to query it?

00:08:47 Why do we have to?

00:08:48 And so people are kind of expecting this all over the place now.

00:08:53 I just want to highlight just the last one there.

00:08:54 It says, go to the data frame, sketch on how to, using Plotly, plot a map of the total sales

00:09:01 in each state.

00:09:02 Boom.

00:09:02 You get a perfectly, perfect interactive map, a geographical map of the United States with,

00:09:10 that's pretty neat.

00:09:11 Yeah.

00:09:12 To be able to just jump in and do that.

00:09:14 Like, sure, you could go search and look that up.

00:09:16 But, you know, instead of just doing df.head, df.tail, and so on, like, how to?

00:09:23 I could think I'm ready to hang up a shingle for like a data science side job.

00:09:29 I'm pretty sure that you and I could pass as at least junior data scientists now.

00:09:34 Just with this.

00:09:35 Yeah.

00:09:36 Anyway, I think this is pretty cool.

00:09:40 I'm pretty psyched about it.

00:09:42 It's pretty cool.

00:09:43 Yeah.

00:09:43 People should check it out.

00:09:44 From what I can tell, it doesn't cost anything.

00:09:46 So just play with it, which is really nice.

00:09:50 And also, before we move on, I just want to tell people that this episode is brought to you

00:09:55 by us, right?

00:09:56 So there's a whole bunch of Python courses that if you get inspired over at Talk Python Training,

00:10:01 we've got the Python 3.11 guided tour, which is a couple hours of hands-on, showing why

00:10:06 that's awesome.

00:10:06 Python data visualization.

00:10:08 So if the sketch stuff was interesting, like, there's a bunch of that there.

00:10:11 And, oh, there's also something on pytest, isn't there?

00:10:14 Yeah.

00:10:15 Highly recommend that course.

00:10:16 It's great.

00:10:17 I do as well.

00:10:18 All right.

00:10:19 So if you want to support us, the best way you can do it is to support our other work as

00:10:23 well as share the podcast with your friends.

00:10:26 So thank you.

00:10:27 Thank you.

00:10:27 Thank you for that.

00:10:28 Yes.

00:10:28 I also want to thank the Patreon people because they're great.

00:10:31 We don't really talk about it much, but you can support us through Patreon as well.

00:10:35 And we very much appreciate it.

00:10:36 Absolutely.

00:10:37 All right.

00:10:39 What you got for our next one, Brian?

00:10:40 Well, I want to go in circles a little bit, actually going back to the year 2021.

00:10:45 No.

00:10:46 In 2021, we covered an article by Hinnick called Subclassing in Python Redux.

00:10:54 And it's a great article to talk about, like, just how to subclassing and dealing with classes

00:11:01 in Python and just to get your head around it.

00:11:04 So I did read it and I enjoyed it.

00:11:06 And then this year I came across the problem and I'm like, I think I can solve it with something

00:11:12 I read in this article.

00:11:13 So I'm going to scroll now to the thing specifically.

00:11:17 And it's called, so we have nominal subtyping with abstract based classes.

00:11:22 I tried that, but I decided to go with structural subtyping.

00:11:26 And with structural subtyping, basically, my understanding is it's like duck typing, but

00:11:33 with like, it's like strict duck typing.

00:11:36 And it says here, as you can see, if you've got something calling two things, two classes

00:11:45 talking to each other, one of them doesn't have to know about the other.

00:11:47 So in this example, we've got a reader and a foo reader.

00:11:50 And, you know, it's just a reader protocol.

00:11:55 We just need to know that there's a reader protocol here.

00:11:58 So I kind of like that.

00:11:59 I just knew this was here and I'm like, how do I apply this?

00:12:03 So I went ahead and wrote up an article called fixing circular imports with in Python with protocol.

00:12:09 And this is directly from this.

00:12:11 So the it's just a zoom in on one special case.

00:12:15 I really have like if I've got a class director and actor and they talk to each other.

00:12:21 So director tells an actor to do an action.

00:12:23 No big deal.

00:12:25 It has to import the actor.

00:12:26 Right.

00:12:26 So the actor gets a director.

00:12:28 So I'm going to it's gets data from the director.

00:12:31 And so it has to be able to call it.

00:12:34 Well, I could just pass it in self.

00:12:35 And since we have duck typing, it all works fine.

00:12:38 That we just call director get data.

00:12:40 So far, we have no types that the problem comes in when we have types.

00:12:45 If we add types to the whole mix, then when we add types to the director, it's no big deal.

00:12:53 We just add types to everything.

00:12:54 But to add types to the actor, suddenly the actor needs to know what type the director is.

00:13:00 And that's where we get the problem.

00:13:02 And that's exactly the kind of problem that I ran into is I wanted to add typing to this to a similar problem.

00:13:09 And it blows up.

00:13:10 It actually blows up really bad.

00:13:12 You can't you Python just says you can't do that.

00:13:15 It's circular important.

00:13:16 So the protocol solution is really slick.

00:13:20 And I'm going to scroll down to the answer.

00:13:22 The answer is just I just need a little bit of a snippet of code that says I've got this class that is derived from protocol.

00:13:31 But it's just got a get data function.

00:13:34 And that's all I know about it.

00:13:35 I know what it returns.

00:13:36 And that's all I know.

00:13:37 And I can say that my director really is that type.

00:13:40 And that's it.

00:13:41 The actor has to change to say what type it is.

00:13:44 And the rest of the code just works.

00:13:47 And I don't have to change the director.

00:13:50 I don't have to change the test code.

00:13:51 It's just this one file that I'm changing.

00:13:55 And I like this because I'm adding typing.

00:13:59 I'm not changing the code at all.

00:14:01 And the only thing is that, yeah, anyway, it's a slick way to use it.

00:14:06 I think so, too.

00:14:07 It's a little bit like interfaces, but less, you know, in the traditional Java or C Sharp, I innumerable or whatever type of interfaces.

00:14:16 Yeah, the first.

00:14:17 And then Hinnick goes through abstract base classes also.

00:14:22 And that's one thing you could do is you could have a base class that has this get data function.

00:14:27 And both the director and the actor know about the base class.

00:14:30 But you don't really need that.

00:14:33 Nobody else needs to know that except for this one file.

00:14:36 So protocol is a nice hack.

00:14:37 Interesting.

00:14:38 Yeah.

00:14:39 Jonathan, the audience is asking, why not just use abstract base classes?

00:14:42 They both work.

00:14:44 So it's just a personal preference thing.

00:14:46 So, yeah.

00:14:47 And Kim in the audience is asking, as a question of style, do you prefer an ellipsis over the keyword pass to indicate an empty function?

00:14:57 Well, I'm warming to the ellipsis a lot because I write a lot of test code and I write a lot of example test code.

00:15:06 And if I say an empty function that is a test function and I use dot, dot, dot, it's clear that I'm not finishing it.

00:15:18 Whereas if I say pass, I've actually had some people get confused and think that the pass keyword is how you pass a test.

00:15:28 It's not.

00:15:29 It can be.

00:15:31 Well, you're not going to raise an error in that test method if you go past in there.

00:15:35 I mean, it's sort of a way to pass it.

00:15:37 Yeah.

00:15:38 Yeah.

00:15:39 I kind of like it too to say, look, I don't want anything here.

00:15:42 I don't intend to come back and fill it out.

00:15:44 Just, this is it.

00:15:46 And it kind of matches, the ellipses match how we do, like, type stubs as well.

00:15:53 I think I'll use ellipses, but I don't know if they have to.

00:15:56 I think they do as well.

00:15:59 Like, if you go and look at type shed and you look at the stubs in there, like, let me just grab one.

00:16:05 Rando.

00:16:06 Yeah.

00:16:07 All those have dot, dot, dots.

00:16:09 Dot, dots for their default value, dot, dot, dot for the implementation.

00:16:14 Kind of gnarly looking if you open them up, but there they are.

00:16:17 So, yeah, to me, I kind of feel like I'm matching the stub definition.

00:16:21 Like, I don't intend anything to be here.

00:16:23 Yeah.

00:16:24 Exactly.

00:16:24 Right.

00:16:25 All right.

00:16:26 Ready for the next one?

00:16:27 Yes.

00:16:27 This is a simple and I think will be useful to many, many folks.

00:16:32 This one comes to us via Rud Vanderham.

00:16:37 Rud Vanderham, thank you.

00:16:39 Sent it over and recommended, also created it.

00:16:42 So, we've all seen, like, code samples that, I don't know why, but I guess it's a decent way to explore it.

00:16:51 But it's always, I've always found it a little bit difficult to consume.

00:16:54 Basically, I want to show you how this bit of code works in the REPL.

00:17:00 Here's what happens.

00:17:01 Copy this and use it, right?

00:17:04 And when you see that here, you have the triple arrow and you write some code.

00:17:09 The triple, you know, right arrow, greater than, greater than, greater than.

00:17:12 Right?

00:17:13 You might do a for loop, which then has the indents and it does a triple dot dot dot to show you that, well, now you're still in the same command, you know.

00:17:21 And then eventually a closing dot and you run it.

00:17:23 And if you print out, you just say a variable or a response, then that gets printed without any of the dots or the greater than or anything.

00:17:30 It's just straight up as if you said print that, right?

00:17:34 So if I do, like, copy this and I want to explore it, I've got it.

00:17:38 Okay.

00:17:39 You know, remove all the triple dot dot dots, unindent it correctly, remove the arrows, common, you know, it's just like, yuck, right?

00:17:48 It's just a hassle.

00:17:48 So enter unREPL, the inverse of REPL, where you say, take this code and make it runnable for me.

00:17:59 Isn't that cool?

00:17:59 Yeah.

00:18:00 Super simple.

00:18:01 Like, even if you're in the REPL, you can't take what you're copying from someone else's example and put it in the REPL because then you'll have triple greater thans.

00:18:09 And so you just take this code and the way it works is you copy it to the clipboard, your code sample that you got from this REPL thing.

00:18:15 And then you just call unREPL as a CLI and it replaces the clipboard with contents of exactly what you would want.

00:18:24 And it even comments out the output.

00:18:27 So what wasn't code is now a code comment.

00:18:30 Oh, wow.

00:18:31 Nice.

00:18:32 That's perfect.

00:18:33 Yeah.

00:18:33 Really perfect, right?

00:18:34 Yeah.

00:18:35 So I can certainly see that this is a handy thing that people may want to install.

00:18:43 So when you see the instructions here, it says you can just use unREPL.py.

00:18:49 And the way that you run it, it says up here somewhere.

00:18:52 Okay.

00:18:53 What you do.

00:18:54 So what you do is you copy it and then you run.

00:18:58 Okay.

00:18:58 He's updated.

00:18:59 It just says unREPL.

00:19:00 It used to say run unREPL.py, but it's also on PyPI, which means that you can pip install it.

00:19:07 But I would not pip install it.

00:19:09 This is not the thing that goes into a virtual environment to be part of a program.

00:19:13 This is a CLI tool that you just want to have available.

00:19:17 So I would replace pip with pipx.

00:19:20 And then you just globally have this command on your computer.

00:19:23 Just happens to be implemented with Python.

00:19:25 But you copy it, you know, just type unREPL.

00:19:28 And then, you know, whatever was in the clipboard is now better.

00:19:32 It doesn't say use pipx, but I think that's the way.

00:19:36 That's certainly how I would do it if I'm going to install and use this thing.

00:19:38 There's a way to set up an auto hotkey on Windows only.

00:19:41 I have no idea about this.

00:19:42 So y'all are on your own there.

00:19:44 Okay.

00:19:44 So how do you use it on the command line?

00:19:46 You just type the word unREPL once you've installed it in the path, which pipx, of course, does.

00:19:52 And then you paste your code or use it to.

00:19:55 Yeah.

00:19:55 So you copy your code, type unREPL on the command line.

00:19:58 It looks at your clipboard.

00:19:59 Oh, okay.

00:20:00 UnREPLs it and then it replaces the clipboard, like basically with a new copy.

00:20:04 Oh, that's neat.

00:20:05 Yeah.

00:20:06 That's great.

00:20:07 Yeah.

00:20:08 So really easy.

00:20:08 It also says you can import it into a program and use it for some reason.

00:20:13 You feel like that's the thing you want.

00:20:14 And it has special handling of the underscore, which has special meaning in the REPL.

00:20:20 Like it knows about underscore and treats it accordingly.

00:20:23 Well, like for instance, like somebody could like maybe change Bpython or something like

00:20:29 that to allow you to paste right in.

00:20:31 So.

00:20:32 Yep.

00:20:32 Neat.

00:20:33 Yeah.

00:20:33 People out there think it's nice.

00:20:35 This is a nifty little tool, says Kim.

00:20:39 See, it uses TK Enter presumably for clipboard access.

00:20:43 I believe so as well.

00:20:45 It should use Paperclip, I believe.

00:20:48 Paperclip rather.

00:20:50 Piperclip.

00:20:51 If I were saying it, that's like a super small, simple little thing, cross-platform copy and paste.

00:20:57 But, you know, it doesn't matter really what it uses to accomplish, copy and paste.

00:21:02 But TK Enter is like built in now, or is just normally.

00:21:05 Yeah, that's true.

00:21:06 So I guess there's no dependency.

00:21:07 That's right.

00:21:07 There's no dependency.

00:21:08 So, okay, maybe I'll take that back.

00:21:09 Maybe that is better.

00:21:10 Anyway, I love Paperclip.

00:21:11 But this is cool.

00:21:13 If you're, I don't know, if you're working on a book or if you're learning a lot where you're

00:21:17 grabbing stuff off of tutorials, I kind of sort of spoke tiny, a tiny bit disparagingly of this

00:21:24 because the style of showing the REPL output, because I'd rather show an example that has

00:21:29 executable code and a print statement.

00:21:31 You know, I kind of already write this output like, here's the code, you know, comment, here's

00:21:38 the output, right?

00:21:39 So I don't know.

00:21:39 It just, it seems a little more reasonable to me, but whatever.

00:21:41 People can write them in any style they want and this un-REPL will roll it from one to the other.

00:21:46 Yeah, you can also use a doc test to check your REPL docs.

00:21:52 Yes, exactly.

00:21:53 And while out there, it's giving a challenge to the community.

00:21:58 I think someone should write a PyCharm and VS Code plugins using this so it becomes part

00:22:04 of the editors as well, which would be pretty neat.

00:22:07 Paste as, paste from, right?

00:22:10 Paste from REPL.

00:22:11 Yeah, that'd be cool.

00:22:13 Yeah, but it's already really handy to have it just, you know, just pop over the terminal

00:22:17 and run this.

00:22:18 Yeah.

00:22:19 All right.

00:22:19 Awesome.

00:22:19 I guess that's it for all of our items, isn't it?

00:22:22 I think it is.

00:22:23 Yeah.

00:22:24 We have, we've come to the end of all of the main things.

00:22:26 What do you got for our extras today?

00:22:28 Well, I was going to mention that I wrote an article, but it was, it was my item.

00:22:31 So.

00:22:32 Correct.

00:22:33 So that's it.

00:22:34 There you go.

00:22:34 How about you?

00:22:34 There you go.

00:22:35 I got a couple of quick ones here.

00:22:36 So I think this happened since our last show, but pretty much right after it shipped.

00:22:42 If you have Git, you should update it.

00:22:45 So there's remote code execution level vulnerabilities in the Git client that is sitting on your machine.

00:22:52 If you have less than 2.39, maybe even less than 2.39.1.

00:22:58 I can't remember the exact version, but until last week, there was a problem.

00:23:03 I'll link to this over here, but you don't really want that.

00:23:07 Yeah.

00:23:07 It affects 2.39 and older.

00:23:09 Yeah.

00:23:10 No.

00:23:10 So careful.

00:23:12 I mean, if you're only pulling stuff from your own repo and only you can put stuff in your repo, you're safe.

00:23:17 But if you're checking out someone else's repo or PRs or things, you might not like it.

00:23:23 Okay.

00:23:25 Another one here.

00:23:27 Over on Aquathon training, we, as much as I don't like to, had to add some kind of validation.

00:23:36 It used to be that dreaded reCAPTCHA thing from Google.

00:23:40 And it would say, find all of the stoplights.

00:23:43 And you're like, well, is it the pole of the stoplight?

00:23:45 Also the stoplight.

00:23:47 I mean, technically it is, but it's not the light part.

00:23:49 And it'll be like, try again.

00:23:50 You're like, no.

00:23:51 Right.

00:23:52 But because it's the internet and we can't have nice things, unfortunately.

00:23:56 I had to put something there to slow people down because they were just pounding away on it in various ways that were not ideal.

00:24:04 We had stuff to mitigate it.

00:24:05 But once you start encountering botnets, then you kind of get yourself into a bad place.

00:24:10 So I had to put the reCAPTCHA stuff there to keep people from messing with it.

00:24:15 And I hate reCAPTCHA, but I did it because I had to.

00:24:19 So then when Cloudflare came out with Turnstile, I'm like, yes, this is so much better.

00:24:23 It doesn't ask you about chimneys or fire trucks.

00:24:27 It just does a little like run some code on your browser to prove that you're not just requesting and posting this from some bot.

00:24:35 But it's a real browser.

00:24:36 Off it goes.

00:24:37 Right.

00:24:38 So that's great.

00:24:38 Eli Cobbler said, hey, this is awesome that you got this working.

00:24:44 I can't get it working how to use it.

00:24:48 So I ended up posting a gist, which has an implementation of this using like a faux web framework.

00:24:56 It didn't really, I didn't want to tie it to Flask.

00:24:58 It just says like, here's your thing that handles the forum posts.

00:25:01 Do this.

00:25:01 It shows the HTML bit, which also Cloudflare would show, but they don't have the Python version.

00:25:07 And then it has the, identic based API validation stuff here, which is, this is the gnarly bit.

00:25:15 So he was like, I can't get it working.

00:25:17 Could you post this?

00:25:18 Boom.

00:25:19 And apparently he got it working as well, but I'm sure there are other people who equally hate find all the haystacks, find all the fire trucks and would rather use Turnstile.

00:25:27 But it's kind of tricky to use.

00:25:29 So they can also use that gist if they so wish.

00:25:31 Yeah.

00:25:34 That's funny.

00:25:35 Yeah.

00:25:38 David Poole says Google's, Google's captchas made me doubt my own humanity.

00:25:43 So I always thought like, that'd be fun to do like trees instead or like plant identification.

00:25:50 Like, yeah.

00:25:51 Like find the azaleas.

00:25:54 Find the azaleas.

00:25:55 What?

00:25:55 Let's see.

00:25:59 So on, when I talked about getting a bunch of stickers on my computer the other day, remember that?

00:26:04 Yeah.

00:26:05 Well, one of the stickers I put is, I'm not a robot.

00:26:08 And it's like a validated recapture.

00:26:10 So I just thought that was fun too.

00:26:12 But that's cool.

00:26:13 Yeah.

00:26:14 Anyway, so if people are interested and they want to try on Turnstile, which is way more privacy oriented, also nicer because you don't have to interact with it.

00:26:21 It's just a little hard to work with.

00:26:22 Here's some code that they can try that at least one other person has been successful using.

00:26:26 So that's a tepid but somewhat good testimonial.

00:26:31 How's that?

00:26:32 That's nice.

00:26:32 All right.

00:26:33 Thank goodness it wasn't in the JavaScript, Brian.

00:26:35 Yeah.

00:26:37 Because if it's in the JavaScript, I don't want to have to go debug that.

00:26:39 Do you want to debug it?

00:26:40 No, I don't want to debug it in the JavaScript.

00:26:42 It might make you so crazy as if to go and like literally write a song about how much you don't want to go into the JavaScript.

00:26:49 Yeah.

00:26:51 Now, I am very unskilled at music, but Dylan Betty is actually quite skilled and has a whole bunch of really funny songs here like The Big Rewrite based on American Pie.

00:27:08 An eight and a half minute long song, I'll point out.

00:27:11 And he wrote a programming song against it.

00:27:14 Awesome.

00:27:14 Your API is a hall of shame.

00:27:16 You give rest a bad name based on the Bon Jovi song, but neither of those are the one that I'm referring to.

00:27:23 No, I'm referring to the song called Bug in the JavaScript based on Piano Man by Billy Joel.

00:27:29 This is good stuff, right?

00:27:32 Yeah.

00:27:33 Now, it's six and a half minutes, so there's no way I can play it.

00:27:35 But it starts out like you've checked all of your database indexes.

00:27:39 You've tuned all your API hooks.

00:27:41 You're starting to think that you might need a drink because there's only one place left to look.

00:27:46 There must be a bug in the JavaScript because everything else is built properly, but the front end's a pile of crap.

00:27:52 It's so fun.

00:27:54 I like it.

00:27:56 I'm starting to think that I might need a drink because there's only one place left to look.

00:28:00 It's really good.

00:28:01 I recommend people put this on.

00:28:02 And if you're working with Angular or Vue or some front end framework, you can play it loud in the office just to share a little bit of the feeling.

00:28:13 Yeah.

00:28:14 Anyway, that's what I got for you this week.

00:28:15 That's good.

00:28:16 People can go watch the YouTube video.

00:28:17 Thanks.

00:28:18 Yeah, you bet.

00:28:20 And thanks for being here.

00:28:22 Thanks, everyone, for listening, as always.

00:28:24 Thank you.

00:28:25 Bye.

