
00:00:00.000 --> 00:00:04.960
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.960 --> 00:00:10.880
This is episode 164 recorded January 9, 2020. And I'm Brian Okken.


00:00:10.880 --> 00:00:11.920
And I'm Michael Kennedy.


00:00:11.920 --> 00:00:16.080
And this episode is brought to you by Datadog. We'll talk more about them later.


00:00:16.080 --> 00:00:19.200
But speaking of data, data-driven journalism.


00:00:19.200 --> 00:00:24.720
Yeah, let's start there. So there's this project called CJ Workbench or just Workbench,


00:00:24.720 --> 00:00:30.880
something like this. And this recommendation comes to us from Michael Pawlowski. Sorry if I kind of


00:00:30.880 --> 00:00:37.440
mispronounce your name there, but thank you, Michael. And it's data-driven journalism as a


00:00:37.440 --> 00:00:43.840
service, as a platform, along with training on how to use it. Not training on journalism,


00:00:43.840 --> 00:00:48.320
but training on basically how to do data journalism. So it's a pretty cool idea.


00:00:48.320 --> 00:00:49.120
That is neat.


00:00:49.120 --> 00:00:53.880
Yeah. And so what you do is you can go and say, point it at, I don't know,


00:00:53.880 --> 00:00:57.120
some website and say, I want you to scrape this from the website.


00:00:57.120 --> 00:01:00.740
And then you go and you fill in like this UI, you fill in and say, okay, now


00:01:00.740 --> 00:01:03.400
I want to filter out the empty columns.


00:01:03.400 --> 00:01:07.080
And I want to do this and that transform and other transforms and so on.


00:01:07.080 --> 00:01:12.240
And so it basically lets you do kind of what you might do with a Jupyter


00:01:12.240 --> 00:01:16.920
notebook, but there's no code for the journalist, which is pretty cool.


00:01:17.000 --> 00:01:20.680
And so you might wonder, well, if there's no code,


00:01:20.680 --> 00:01:21.700
why are we talking about it?


00:01:21.700 --> 00:01:24.440
There's all sorts of software that does interesting stuff


00:01:24.440 --> 00:01:25.520
that we don't talk about.


00:01:25.520 --> 00:01:27.640
Well, one of the things you can do is,


00:01:27.640 --> 00:01:30.460
if you find that the built-in features are not enough,


00:01:30.460 --> 00:01:32.120
then you write a few lines of Python


00:01:32.120 --> 00:01:35.880
and you start extending it for the journalists using Python,


00:01:35.880 --> 00:01:37.080
which is a pretty cool way.


00:01:37.080 --> 00:01:38.760
So instead of you worrying about the UI


00:01:38.760 --> 00:01:41.100
and all the basic stuff like loading CSVs


00:01:41.100 --> 00:01:42.520
and working with data frames and all that,


00:01:42.520 --> 00:01:44.120
you just say, use this,


00:01:44.120 --> 00:01:45.920
and if we gotta write a little Python code, we will.


00:01:45.920 --> 00:01:50.560
You can use their system and just add your own little code snippets to it?


00:01:50.560 --> 00:01:51.360
Yeah, exactly.


00:01:51.360 --> 00:01:54.840
So if you look at the features, it has modules to scrape, clean, analyze, and


00:01:54.840 --> 00:01:55.760
visualize data.


00:01:55.760 --> 00:02:00.200
It's got built in training, like it'll teach you how to use the feature that


00:02:00.200 --> 00:02:01.080
you've got built in.


00:02:01.080 --> 00:02:06.440
It connects to things like social and Google drive and APIs like JSON endpoints.


00:02:06.440 --> 00:02:10.480
I think it has recorded workflows, so it's really repeatable.


00:02:10.480 --> 00:02:11.640
It versioning.


00:02:11.920 --> 00:02:16.320
But finally, you can write custom modules in Python and then add them to the little


00:02:16.320 --> 00:02:18.080
drop-down module library that you can use.


00:02:18.080 --> 00:02:19.200
Oh, that's neat.


00:02:19.200 --> 00:02:19.600
Yeah.


00:02:19.600 --> 00:02:20.080
Yeah.


00:02:20.080 --> 00:02:25.040
Plus, this is all in GitHub, so that if you really want to hack the back end, you can also.


00:02:25.040 --> 00:02:29.360
Yeah, exactly. It's open source. It's on GitHub. You can go grab it, download it, and run with it.


00:02:29.360 --> 00:02:33.520
But they also have it online as a service. So you can decide, do you want to run your own server?


00:02:33.520 --> 00:02:37.360
Do you want to use their public server that's in beta or whatnot?


00:02:37.360 --> 00:02:41.760
So I covered this partly because I think it's really cool. And I also covered it because


00:02:41.760 --> 00:02:44.560
Boy, I think the world needs journalism right now.


00:02:44.560 --> 00:02:47.160
- Yes, and yeah, more people saying,


00:02:47.160 --> 00:02:49.000
I don't know if I believe your analysis,


00:02:49.000 --> 00:02:50.640
I wanna do my own analysis on it.


00:02:50.640 --> 00:02:52.000
- Yeah, and here you don't have to commit


00:02:52.000 --> 00:02:53.120
to a huge amount of work.


00:02:53.120 --> 00:02:54.920
It's cool you pointed all these live sources.


00:02:54.920 --> 00:02:57.240
Like you can point it at some website


00:02:57.240 --> 00:03:00.400
and it can like real time refresh the live data


00:03:00.400 --> 00:03:02.440
that it's scraping for your article


00:03:02.440 --> 00:03:04.320
so it can evolve over time and whatnot.


00:03:04.320 --> 00:03:05.160
Pretty cool.


00:03:05.160 --> 00:03:06.320
- Might have to try this, yeah.


00:03:06.320 --> 00:03:07.360
- Yeah, nice.


00:03:07.360 --> 00:03:09.800
Have we covered GUIs yet on this podcast?


00:03:09.800 --> 00:03:11.400
- I think I do remember way back when,


00:03:11.400 --> 00:03:13.040
at some point, we talked about GUIs, right?


00:03:13.040 --> 00:03:15.760
- Yeah, at least once, yeah.


00:03:15.760 --> 00:03:16.720
- What do you got for us this time?


00:03:16.720 --> 00:03:19.280
- Well, so here's another one, another GUI.


00:03:19.280 --> 00:03:20.580
This one's called Remme.


00:03:20.580 --> 00:03:23.680
The Remme comes from Remote Interface Library.


00:03:23.680 --> 00:03:25.320
I'm not sure why it's called that.


00:03:25.320 --> 00:03:26.440
All GUIs are essentially--


00:03:26.440 --> 00:03:27.480
- Why is it not Rimmel?


00:03:27.480 --> 00:03:28.640
- Rimmel, I don't know.


00:03:28.640 --> 00:03:29.480
- No, no, it's cool.


00:03:29.480 --> 00:03:33.560
- But Remme, a platform-independent Python GUI library


00:03:33.560 --> 00:03:34.580
for your applications.


00:03:34.580 --> 00:03:37.540
And yes, we've covered things like this a lot,


00:03:37.540 --> 00:03:42.220
like okay I want to just just scrap the idea of a native user interface we'll


00:03:42.220 --> 00:03:47.060
just use web user interfaces. The thing that I liked about this it's so small


00:03:47.060 --> 00:03:51.060
if there's no dependencies you do I'm not sure why they're pointing you to do


00:03:51.060 --> 00:03:54.860
a pip install from their GitHub repo but I'm guessing it's they're not really


00:03:54.860 --> 00:03:59.380
that great about updating the PyPI version because it's there also but


00:03:59.380 --> 00:04:06.180
anyway I did this this morning grabbed a just did a pip install of Remy but from


00:04:06.180 --> 00:04:10.940
their git repo and then I tried their little sample basic app and I'm like is


00:04:10.940 --> 00:04:16.260
it really this easy and yeah this is like 30 lines of code or less that to


00:04:16.260 --> 00:04:20.620
just write and if you run it just Python blip oh first of all when you pip


00:04:20.620 --> 00:04:24.340
install it it installs the package and then that's it doesn't install anything


00:04:24.340 --> 00:04:28.860
else because it's only dependent on the standard library which is cool and then


00:04:28.860 --> 00:04:34.540
you start it up and it runs a little server on your thing and it's really


00:04:34.540 --> 00:04:39.820
easy to throw buttons together and stuff. It looks pretty good enough and the code is


00:04:39.820 --> 00:04:44.000
simple enough that I thought I'd include it because there's a lot of cases where, like


00:04:44.000 --> 00:04:49.680
in an internal team, where you have, if you want to throw something together where people


00:04:49.680 --> 00:04:56.200
have access to some Python data or some Python analysis with the user interface and something


00:04:56.200 --> 00:04:58.200
like this would be cool and it's neat.


00:04:58.200 --> 00:05:07.700
Yeah, it's pretty neat. It's like a Python only electron JS ish type of thing without the HTML part.


00:05:07.700 --> 00:05:14.500
So you define your app and you programmatically define like I want a button here and I want to label there.


00:05:14.500 --> 00:05:17.600
And when I click the button, I wanted to call this other Python function.


00:05:17.600 --> 00:05:23.900
So you just write pure Python and then it turns the GUI definition into HTML,


00:05:23.900 --> 00:05:26.460
shows that in a server and then calls back to your code,


00:05:26.460 --> 00:05:28.160
something like that, which is pretty cool, right?


00:05:28.160 --> 00:05:34.020
>> Yeah. It feels similar to working with TK back in the day.


00:05:34.020 --> 00:05:35.760
Within the Python code,


00:05:35.760 --> 00:05:38.200
you create a label object and a button object,


00:05:38.200 --> 00:05:40.360
and then you put them in a container.


00:05:40.360 --> 00:05:43.140
There's no packing so far that I can see,


00:05:43.140 --> 00:05:46.280
but has different types of containers that you append them,


00:05:46.280 --> 00:05:49.780
and then just throw those in a box.


00:05:49.780 --> 00:05:52.820
Yeah, like you said, you don't have to write any of the HTML,


00:05:52.820 --> 00:05:54.860
It's just all Python code.


00:05:54.860 --> 00:05:58.420
So yeah, for what it's worth, it's kind of simple.


00:05:58.420 --> 00:06:00.060
- Yeah, it's a nice simple little thing


00:06:00.060 --> 00:06:02.860
and it looks pretty cool and yeah, I kind of like it.


00:06:02.860 --> 00:06:05.780
- One of the things I was thinking about doing, sorry,


00:06:05.780 --> 00:06:10.780
was we have a switch box that's controlled through,


00:06:10.780 --> 00:06:13.380
we've got a Python thing that controls the switches


00:06:13.380 --> 00:06:16.180
and sometimes it'd be nice to be able to just see


00:06:16.180 --> 00:06:18.420
what the current setup is and just have a web page


00:06:18.420 --> 00:06:19.620
that just shows that.


00:06:19.620 --> 00:06:21.660
It'd be really easy to write in Python,


00:06:21.660 --> 00:06:26.540
kind of hard to do, I don't want to deal with a whole user interface sort of thing, but


00:06:26.540 --> 00:06:30.580
having that, I think I could probably throw that together with this tool in like half


00:06:30.580 --> 00:06:31.580
an hour.


00:06:31.580 --> 00:06:37.600
Yeah, and it's a proper local application, so it can look around on the system and do


00:06:37.600 --> 00:06:38.600
what it needs to do.


00:06:38.600 --> 00:06:40.660
It doesn't need to be really a web server.


00:06:40.660 --> 00:06:45.660
Although you can expose, I saw there's a way to tell it to listen on the network, broader


00:06:45.660 --> 00:06:47.060
interface, not just local host.


00:06:47.060 --> 00:06:51.180
So you can expose this thing to sort of the world, for what that's worth.


00:06:51.180 --> 00:06:52.820
I don't know if it's a good idea or not, but you could.


00:06:52.820 --> 00:06:55.620
- Like I said, we would do it within our internal network.


00:06:55.620 --> 00:06:59.140
So there's no malicious code flying around internally.


00:06:59.140 --> 00:07:00.480
- Yeah, yeah.


00:07:00.480 --> 00:07:01.440
- Yeah, anyway.


00:07:01.440 --> 00:07:04.840
- You know, I'm starting to get excited again about Qt


00:07:04.840 --> 00:07:07.620
after Ogie Moore's presentation


00:07:07.620 --> 00:07:10.020
at the last PDX Python West meetup.


00:07:10.020 --> 00:07:11.820
Like that looked pretty compelling actually.


00:07:11.820 --> 00:07:15.420
- Yeah, what a slick program that was, and zippy.


00:07:15.420 --> 00:07:16.720
- So very zippy.


00:07:16.720 --> 00:07:18.740
Nice, speaking of slick, Datadog.


00:07:18.740 --> 00:07:22.300
- Yeah, Python Bytes today is sponsored by Datadog,


00:07:22.300 --> 00:07:26.500
a cloud scale monitoring analytics platform


00:07:26.500 --> 00:07:30.020
that unifies metrics, logs, and distributed traces


00:07:30.020 --> 00:07:32.100
from your Python application.


00:07:32.100 --> 00:07:34.340
The Datadog tracing client auto-instruments


00:07:34.340 --> 00:07:37.180
popular frameworks and libraries such as Django, Flask,


00:07:37.180 --> 00:07:40.480
Postgres, and AsyncIO even,


00:07:40.480 --> 00:07:43.060
so you can quickly get deep visibility


00:07:43.060 --> 00:07:44.580
into your application.


00:07:44.580 --> 00:07:46.940
Trace requests across services boundaries


00:07:46.940 --> 00:07:49.820
with flame graphs, I like flame graphs,


00:07:49.820 --> 00:07:51.780
correlate traces with logs and metrics


00:07:51.780 --> 00:07:53.600
and plot your application architecture


00:07:53.600 --> 00:07:55.420
with the service map.


00:07:55.420 --> 00:07:57.380
Sign up for free for a free trial


00:07:57.380 --> 00:08:00.020
at pythonbytes.fm/datadog


00:08:00.020 --> 00:08:02.540
and you'll receive a free t-shirt.


00:08:02.540 --> 00:08:04.260
- Nice, yeah, they're doing good stuff.


00:08:04.260 --> 00:08:05.500
Thanks, Datadog.


00:08:05.500 --> 00:08:08.380
This next one, Brian, you wanted it, but I got it.


00:08:08.380 --> 00:08:09.780
- Yeah, you got it first.


00:08:09.780 --> 00:08:11.180
It's cool, I'm excited about it.


00:08:11.180 --> 00:08:14.940
- Yeah, so there's a couple of cool libraries


00:08:14.940 --> 00:08:17.420
are building CLIs.


00:08:17.420 --> 00:08:20.500
Flake is probably the most prevalent one.


00:08:20.500 --> 00:08:28.560
We've got our pars, but people who do fast API, the cool new API framework, these folks


00:08:28.560 --> 00:08:32.660
have now gone, let me just double check that it's actually the same organization.


00:08:32.660 --> 00:08:33.660
Yep.


00:08:33.660 --> 00:08:34.660
Yes.


00:08:34.660 --> 00:08:35.660
Good.


00:08:35.660 --> 00:08:36.660
Yeah, they work.


00:08:36.660 --> 00:08:37.660
Perfect.


00:08:37.660 --> 00:08:41.340
So they've gone and created a CLI definition library like click.


00:08:41.340 --> 00:08:43.220
And I believe it's actually based on click.


00:08:43.220 --> 00:08:44.680
Yeah, it's based on click.


00:08:44.680 --> 00:08:47.800
So you might wonder, well, what does it do?


00:08:47.800 --> 00:08:49.840
The name gives you a little bit of a hint.


00:08:49.840 --> 00:08:51.360
It's based on Python type ints.


00:08:51.360 --> 00:08:54.960
So typer looks at the various hints.


00:08:54.960 --> 00:08:56.320
You can say, I have a function.


00:08:56.320 --> 00:09:00.200
It takes a name, which is name colon str, it takes a string.


00:09:00.200 --> 00:09:01.200
And then you just use it.


00:09:01.200 --> 00:09:05.720
And when you go run it, it'll say, hey, this thing that we ran, in order to call it, you


00:09:05.720 --> 00:09:09.300
have to specify a name, and the name has to be a string, and so on.


00:09:09.300 --> 00:09:13.480
So it just looks at the arguments and the types of the methods you're trying to run,


00:09:13.480 --> 00:09:15.920
in the simple case at least, and it uses that.


00:09:15.920 --> 00:09:16.760
That's pretty cool, huh?


00:09:16.760 --> 00:09:17.580
- It's super cool.


00:09:17.580 --> 00:09:20.160
- Yeah, and then you can grow in more complexity.


00:09:20.160 --> 00:09:22.320
Like you can have subcommands,


00:09:22.320 --> 00:09:24.560
you can have help on all the commands,


00:09:24.560 --> 00:09:26.420
you can actually get autocomplete,


00:09:26.420 --> 00:09:29.400
you can install autocomplete in your shell,


00:09:29.400 --> 00:09:30.400
all kinds of cool stuff.


00:09:30.400 --> 00:09:31.600
So you can create a little app,


00:09:31.600 --> 00:09:33.320
you say here's a command and here's a command,


00:09:33.320 --> 00:09:36.120
and then of course the commands are functions,


00:09:36.120 --> 00:09:37.440
those functions take arguments,


00:09:37.440 --> 00:09:40.000
the arguments have types, they can have default values,


00:09:40.000 --> 00:09:40.840
all that kind of stuff.


00:09:40.840 --> 00:09:43.360
So you can try to run it, it'll give you help


00:09:43.360 --> 00:09:45.620
pretty much automatically, which, yeah,


00:09:45.620 --> 00:09:47.700
this really speaks to me the way this works.


00:09:47.700 --> 00:09:49.100
I could definitely see myself using it.


00:09:49.100 --> 00:09:52.520
- Yeah, so a really good, clean command line interface


00:09:52.520 --> 00:09:54.660
that has, if you're writing a tool


00:09:54.660 --> 00:09:55.940
with a command line interface,


00:09:55.940 --> 00:09:58.340
you're gonna want help associated with it,


00:09:58.340 --> 00:10:02.260
you're gonna want description of the different methods


00:10:02.260 --> 00:10:05.620
and what they do, but also with as little boilerplate


00:10:05.620 --> 00:10:08.300
as possible, you don't wanna clutter up your code.


00:10:08.300 --> 00:10:10.780
And as far as I'm concerned, right now,


00:10:10.780 --> 00:10:15.580
type or wins, there's like hardly any extra overhead that you have to add to


00:10:15.580 --> 00:10:19.740
make this work other than type hits and if you're not using a main or something


00:10:19.740 --> 00:10:23.020
you have to put a little decorator on the different entry points in your


00:10:23.020 --> 00:10:27.580
program but really clean I'm totally gonna start using this. It's really nice


00:10:27.580 --> 00:10:33.220
and because it can leverage so much of the natural program itself right the


00:10:33.220 --> 00:10:37.020
argument names the fact that it has arguments the argument types like that's


00:10:37.020 --> 00:10:42.780
really helpful for it. So you can also integrate things like Colorama and


00:10:42.780 --> 00:10:47.980
Click, which is based on automatically start using color for its output if you


00:10:47.980 --> 00:10:52.100
just have Colorama around. You can also use Click completion and Typer, this is


00:10:52.100 --> 00:10:55.060
the part I was talking about, will automatically configure it to provide


00:10:55.060 --> 00:11:00.020
completion for all the shells. That's really cool. Yeah. So the one thing I was


00:11:00.020 --> 00:11:04.580
concerned about is it's based on Click and one of the things I love about Click


00:11:04.580 --> 00:11:07.220
is that it has a good testing interface.


00:11:07.220 --> 00:11:09.460
You can write tests against your command line app


00:11:09.460 --> 00:11:11.180
as if you're writing from the command line,


00:11:11.180 --> 00:11:14.140
but you don't actually have to spawn a new subprocess


00:11:14.140 --> 00:11:15.780
to test things.


00:11:15.780 --> 00:11:18.500
And yes, Typer has the same sort of model


00:11:18.500 --> 00:11:21.220
where you can write your tests against the interface


00:11:21.220 --> 00:11:23.700
and not have to do a subprocess.


00:11:23.700 --> 00:11:24.780
- Oh, that's really cool.


00:11:24.780 --> 00:11:25.620
Yeah, nice.


00:11:25.620 --> 00:11:27.380
'Cause yeah, you don't have to start it.


00:11:27.380 --> 00:11:29.860
Basically, shell out and see what happens, right?


00:11:29.860 --> 00:11:32.820
Or like issue the command line directly to the shell


00:11:32.820 --> 00:11:33.660
to see what happens.


00:11:33.660 --> 00:11:34.500
- Yeah, really good job.


00:11:34.500 --> 00:11:39.860
Yeah, the other thing I like about this is you could say, well, we don't want the API of click.


00:11:39.860 --> 00:11:44.860
So we're going to start from zero and rebuild our version of what this whole world looks like.


00:11:44.860 --> 00:11:50.100
But what they did is said that we're going to build a new interface for writing against this, but on top of click.


00:11:50.100 --> 00:11:54.500
So things like Colorama and the completion just plug in seamlessly.


00:11:54.500 --> 00:11:55.580
I think that's a cool lesson.


00:11:55.580 --> 00:11:56.220
Yeah, definitely.


00:11:56.220 --> 00:11:59.180
Also, it's a smaller project for them to have to maintain too.


00:11:59.180 --> 00:11:59.820
Yeah, exactly.


00:11:59.820 --> 00:12:00.980
Yeah, exactly.


00:12:00.980 --> 00:12:01.220
Cool.


00:12:01.220 --> 00:12:01.580
All right.


00:12:01.580 --> 00:12:04.540
This next one that you got here is from Chris Moffitt, right?


00:12:04.540 --> 00:12:09.020
Yes, and this is actually, so I'm hoping this is completely still accurate.


00:12:09.020 --> 00:12:14.940
I imagine it is. The interface for Matplotlib hasn't changed too awfully much. I know they've


00:12:14.940 --> 00:12:20.300
had some cool releases, but I want to talk about an article called "Effectively Using Matplotlib."


00:12:20.300 --> 00:12:26.140
And this is a 2017 article, but in the middle of the introduction, it says, "At first,


00:12:26.140 --> 00:12:30.300
I think I was a little premature in dismissing Matplotlib. To be honest,


00:12:30.300 --> 00:12:34.140
I did not quite understand it and how to use it effectively in my workflow.


00:12:34.140 --> 00:12:37.860
I think that matches what my understanding of Matplotlib as well.


00:12:37.860 --> 00:12:41.380
I mean, when I first needed to put charts or graphs or something,


00:12:41.380 --> 00:12:43.860
of course, you try Matplotlib and then you're


00:12:43.860 --> 00:12:47.860
hit in the face with the complexity of the interface.


00:12:47.860 --> 00:12:50.180
You know you can do the simple thing simple,


00:12:50.180 --> 00:12:52.700
but how to do something a little bit more less than


00:12:52.700 --> 00:12:56.940
simple or more complex is a little daunting.


00:12:56.940 --> 00:12:59.380
Then I went out and looked for other alternatives.


00:12:59.380 --> 00:13:02.380
But now I think the alternatives have their issues too.


00:13:02.380 --> 00:13:06.220
So I'm ready to go back and take a serious look at Matplotlib.


00:13:06.220 --> 00:13:10.400
This article is a really good look at kind of understanding it and


00:13:10.400 --> 00:13:13.400
at least Chris's workflow, how to use it.


00:13:13.400 --> 00:13:17.100
And one of the things I like is the description that


00:13:17.100 --> 00:13:21.100
one of the reasons why Matplotlib's interface might be a little confusing


00:13:21.100 --> 00:13:24.140
is because it's really got two interfaces.


00:13:24.140 --> 00:13:27.480
It does a MATLAB-like state-based interface.


00:13:27.480 --> 00:13:33.640
And I'm not a MATLAB user, but I know that a lot of people have come from MATLAB to Matplotlib.


00:13:33.640 --> 00:13:39.280
And so that sort of interface is important to have that transition be easy for a lot of people.


00:13:39.280 --> 00:13:44.080
But then there's also an object-based interface that makes a lot more sense to me.


00:13:44.080 --> 00:13:49.280
And that's Chris's recommendation is to use the object-based interface instead.


00:13:49.280 --> 00:13:55.880
And so now after he's gone through it a few times, and he has some recommendations.


00:13:55.880 --> 00:14:01.960
and his recommendations are to first learn the basic Matt Plotlib terminology,


00:14:01.960 --> 00:14:09.160
specifically what is figure and axes and around those. And what's difficult for me is that those


00:14:09.160 --> 00:14:13.960
are just normal words that I think I already understand them, but I need to make sure I


00:14:13.960 --> 00:14:18.360
understand what Matt Plotlib thinks those things are. - Yeah, sometimes it's just hard to work


00:14:18.360 --> 00:14:24.600
with Matt Plotlib unless you find an example, right? A lot of times what I, my goal is to


00:14:24.600 --> 00:14:26.840
to hunt the internet for something that looks like I want,


00:14:26.840 --> 00:14:29.480
figure out if I can find the Python code that created it,


00:14:29.480 --> 00:14:30.480
and then I'm good.


00:14:30.480 --> 00:14:32.460
- Yeah, he does have an example in this,


00:14:32.460 --> 00:14:35.600
which is kind of walks through at least one example.


00:14:35.600 --> 00:14:37.840
But if you really want to kind of get your head around it,


00:14:37.840 --> 00:14:41.080
to start with using pandas with matplotlib.


00:14:41.080 --> 00:14:44.160
And so, yeah, start your visualization


00:14:44.160 --> 00:14:46.280
with basic pandas plotting,


00:14:46.280 --> 00:14:49.720
and then add, if you want it more complex, try seaborn.


00:14:49.720 --> 00:14:52.600
And then if you want to customize it a little bit more,


00:14:52.600 --> 00:14:58.240
He said use matplotlib native stuff to customize the visualization.


00:14:58.240 --> 00:15:01.600
And I wouldn't have thought to use that workflow so that's kind of nice.


00:15:01.600 --> 00:15:06.280
It also includes this really kind of cool handy reference that there's a little graphic


00:15:06.280 --> 00:15:11.600
that he created that has like all the different, what all the axes are and if you want to customize


00:15:11.600 --> 00:15:15.800
a certain part of a graph, what that name is within matplotlib so you know how to look


00:15:15.800 --> 00:15:16.800
it up.


00:15:16.800 --> 00:15:22.200
And that's often the secret of programming anymore is to know what specific word to Google.


00:15:22.200 --> 00:15:23.680
So I think that's a good thing.


00:15:23.680 --> 00:15:26.600
- Nice, and also I want to remind folks,


00:15:26.600 --> 00:15:30.520
long time listeners of Pyillustrator.


00:15:30.520 --> 00:15:32.320
Not really sure about the pronunciation,


00:15:32.320 --> 00:15:35.720
like illustrator, but pi for the first two words.


00:15:35.720 --> 00:15:36.880
I'll put a link in the show notes.


00:15:36.880 --> 00:15:39.320
And what it is, is it lets you take a basic


00:15:39.320 --> 00:15:41.960
Matplotlib plot, it launches a GUI


00:15:41.960 --> 00:15:43.940
where you customize the look and feel,


00:15:43.940 --> 00:15:45.120
and then it'll output the code


00:15:45.120 --> 00:15:46.120
that would have done that for you.


00:15:46.120 --> 00:15:46.960
- Oh, cool.


00:15:46.960 --> 00:15:48.600
- Yeah, we talked about that in episode 137,


00:15:48.600 --> 00:15:50.360
which is like a year ago or something.


00:15:50.360 --> 00:15:52.080
But anyway, still good stuff.


00:15:52.080 --> 00:15:53.080
So I put a link in there for that.


00:15:53.080 --> 00:15:57.080
- I'm also including a link in a almost related section.


00:15:57.080 --> 00:16:00.080
Maybe there's an article about this, but I haven't found it.


00:16:00.080 --> 00:16:02.960
There's a Stack Overflow answer that has a little,


00:16:02.960 --> 00:16:06.080
the code you need to stick a map,


00:16:06.080 --> 00:16:09.040
generate a map plot lib graph


00:16:09.040 --> 00:16:12.600
and put it in a flask file on the fly


00:16:12.600 --> 00:16:14.160
without having to save it to a file.


00:16:14.160 --> 00:16:15.960
- Oh yeah, like a live dashboard type thing.


00:16:15.960 --> 00:16:16.800
That's cool.


00:16:16.800 --> 00:16:17.620
- Yeah.


00:16:17.620 --> 00:16:18.460
- Nice.


00:16:18.460 --> 00:16:19.300
Speaking about doing stuff on the web,


00:16:19.300 --> 00:16:22.040
if you're using Django, there's a cool little library


00:16:22.040 --> 00:16:24.480
it'll let you do stuff in the background.


00:16:24.480 --> 00:16:29.920
Maybe you want to do some query and update some kind of report, or you want to send out


00:16:29.920 --> 00:16:35.920
a bunch of emails or recompute some indexes or recompute some search results or something


00:16:35.920 --> 00:16:36.920
like that.


00:16:36.920 --> 00:16:41.440
And it's going to take a little while and you don't want to just have it block on your


00:16:41.440 --> 00:16:42.440
main request.


00:16:42.440 --> 00:16:45.440
There's a bunch of different things you could do, you could set up a separate server with


00:16:45.440 --> 00:16:49.280
like celery, or rabbit MQ or something like that.


00:16:49.280 --> 00:16:53.200
But that's a whole nother set of servers and it just gets way more complicated.


00:16:53.200 --> 00:16:57.100
Sometimes you want to just run it in the background just in the same process, right?


00:16:57.100 --> 00:16:59.480
It's easy to share data because you just pass the pointers.


00:16:59.480 --> 00:17:03.100
So there's this thing called Django simple task.


00:17:03.100 --> 00:17:08.420
And it allows you to run background tasks in Django three without requiring any services


00:17:08.420 --> 00:17:09.420
or workers.


00:17:09.420 --> 00:17:10.420
Oh, cool.


00:17:10.420 --> 00:17:14.860
Yeah, basically, the reason it has to be Django three is it's based on async IO.


00:17:14.860 --> 00:17:19.300
And Django 3 is the first version that uses ASGI.


00:17:19.300 --> 00:17:24.380
And so you actually need to run it in ASGI server like UV, a corner, something like that.


00:17:24.380 --> 00:17:28.860
So be really aware that you have to run it in its async way for this to work.


00:17:28.860 --> 00:17:33.300
But basically, when it starts, when the web app starts, there's a queue created and some


00:17:33.300 --> 00:17:35.540
workers to listen to the queue.


00:17:35.540 --> 00:17:40.420
And then you just go to any function when you run, you just call defer on it, and that'll


00:17:40.420 --> 00:17:42.400
kick it off in the background.


00:17:42.400 --> 00:17:45.840
And you could do that now, like you could create a thread and just launch it as a background


00:17:45.840 --> 00:17:46.840
thread.


00:17:46.840 --> 00:17:49.400
But one, you don't get like a thread pooling.


00:17:49.400 --> 00:17:54.960
But the other is when it's time for the worker process to shut down, like you're doing a


00:17:54.960 --> 00:17:58.800
new deploy or something, it'll actually wait until its background work gets done before


00:17:58.800 --> 00:18:01.960
it allows you to restart it, at least in a friendly way.


00:18:01.960 --> 00:18:03.320
So that's cool.


00:18:03.320 --> 00:18:08.760
And you can either give it a async IO coroutine or just a function and it delegates it either


00:18:08.760 --> 00:18:12.760
runs it or delegates it to a thread pool if it's not async, things like that.


00:18:12.760 --> 00:18:15.760
So it's pretty cool and it's really easy to use, like ridiculously easy.


00:18:15.760 --> 00:18:16.760
Oh, that's neat.


00:18:16.760 --> 00:18:19.760
Yeah. So there's a simple little example I put in the show notes


00:18:19.760 --> 00:18:23.760
where it just imports the deferred operation method.


00:18:23.760 --> 00:18:28.760
It has two tasks, one of them which uses time.sleep that requires threading,


00:18:28.760 --> 00:18:31.760
and one uses asyncIO because it's an async method,


00:18:31.760 --> 00:18:33.760
so it would run on the async event loop.


00:18:33.760 --> 00:18:36.760
And in the view, you can just say defer one, defer method one,


00:18:36.760 --> 00:18:40.760
one, defer method two, and then do your regular work. And that kicks it off, but doesn't wait


00:18:40.760 --> 00:18:45.560
for the response. But does it in a slightly more durable, better way than just like launching


00:18:45.560 --> 00:18:50.520
threads or kicking off on on its own little background thing to go run unmonitored.


00:18:50.520 --> 00:18:55.160
So in this example, would that nobody can see, but they will if they look at the show notes,


00:18:55.160 --> 00:19:01.880
will the HTTP response happen? And the view return before the defer tasks get run?


00:19:01.880 --> 00:19:06.360
They might get started. But because both of them in both of them, they sleep for a second to kind


00:19:06.360 --> 00:19:08.360
kind of that's their work, right?


00:19:08.360 --> 00:19:09.600
They're sleeping for a second.


00:19:09.600 --> 00:19:13.200
So certainly the response would be sent back to the user


00:19:13.200 --> 00:19:15.240
before those are done.


00:19:15.240 --> 00:19:17.640
- And this is cool interface because the two tasks,


00:19:17.640 --> 00:19:19.740
one of them's async and one is not.


00:19:19.740 --> 00:19:22.280
And the defer call doesn't, you can't tell.


00:19:22.280 --> 00:19:23.720
- Right, you don't have to treat it differently.


00:19:23.720 --> 00:19:25.200
But if you can do async, great,


00:19:25.200 --> 00:19:28.280
it'll do that on the async event loop, I think.


00:19:28.280 --> 00:19:30.520
Otherwise, it just puts it into a thread pool,


00:19:30.520 --> 00:19:32.640
which is pretty cool that you don't have to worry.


00:19:32.640 --> 00:19:35.040
You can just kind of go, here's some background stuff.


00:19:35.040 --> 00:19:37.140
It's IO driven, we'll do it this way,


00:19:37.140 --> 00:19:39.420
otherwise just do it that way, which is, I like it, it's nice.


00:19:39.420 --> 00:19:40.820
- Yeah, really nice.


00:19:40.820 --> 00:19:41.900
- Cool. - Cool, all right.


00:19:41.900 --> 00:19:43.980
What's this last one you got for us?


00:19:43.980 --> 00:19:46.420
- Well, so something happened recently.


00:19:46.420 --> 00:19:50.260
I've got a handful of, I don't open source,


00:19:50.260 --> 00:19:52.820
work on open source projects really as much as I'd like to.


00:19:52.820 --> 00:19:56.220
I'd like to work, do some more work on open source projects,


00:19:56.220 --> 00:20:00.160
but I have a few that I maintain myself,


00:20:00.160 --> 00:20:03.020
but project is in air quotes I'm doing


00:20:03.020 --> 00:20:07.780
because they're really pretty small projects and a couple of them, cards and


00:20:07.780 --> 00:20:12.460
submark, are things that I just created to help with teaching people how


00:20:12.460 --> 00:20:17.340
testing works. They're not really intended to be useful projects. And then


00:20:17.340 --> 00:20:23.380
another one was a plug-in for pytest. Actually I do use it and it's useful for


00:20:23.380 --> 00:20:27.620
me but I started getting, like in the last handful of months, I started getting


00:20:27.620 --> 00:20:32.980
pull requests and issues and stuff and I didn't know anybody was using it at


00:20:32.980 --> 00:20:37.180
all so this was surprising to me. But I wanted to highlight, I don't know, I can't believe


00:20:37.180 --> 00:20:41.180
we haven't covered this or maybe we already have. There's a website called PyPIstats.org.


00:20:41.180 --> 00:20:44.660
Yeah, that's news to me. I hadn't heard of it.


00:20:44.660 --> 00:20:50.660
It's just a simple interface. Now the backend might be complicated, but in the interface


00:20:50.660 --> 00:20:55.780
you just has like a little box and you plug in a Python package and it tells you what


00:20:55.780 --> 00:21:01.100
the download stats, actually quite a bit of history too of different packages. And so


00:21:01.100 --> 00:21:04.620
I used that for all of my different projects,


00:21:04.620 --> 00:21:07.460
and sure enough, Cards was downloaded like,


00:21:07.460 --> 00:21:10.100
I don't know, less than 400 times in the last month.


00:21:10.100 --> 00:21:13.780
Submark less than 70 times in the last month.


00:21:13.780 --> 00:21:17.820
And then pytest-check, which is a little app


00:21:17.820 --> 00:21:20.860
or a plugin that lets you have multiple failures per test


00:21:20.860 --> 00:21:23.040
but keep going during the test,


00:21:23.040 --> 00:21:27.380
that was downloaded just a little less than 20,000 times


00:21:27.380 --> 00:21:28.520
in the last month.


00:21:28.520 --> 00:21:30.280
So clearly that one's more,


00:21:30.280 --> 00:21:33.260
and that's the reason why I'm having more people


00:21:33.260 --> 00:21:34.800
trying to tell me what's wrong with it.


00:21:34.800 --> 00:21:37.700
So I guess I have to start maintaining.


00:21:37.700 --> 00:21:39.120
- Yeah, this is a super cool interface.


00:21:39.120 --> 00:21:40.880
You get all kinds of graphs


00:21:40.880 --> 00:21:43.960
and ability to slice it by dates and whatnot.


00:21:43.960 --> 00:21:45.280
And yeah, I like it.


00:21:45.280 --> 00:21:46.360
- And there's also a top 20,


00:21:46.360 --> 00:21:47.640
so you can look at like really,


00:21:47.640 --> 00:21:51.100
what are the top 20 packages on PyPI?


00:21:51.100 --> 00:21:54.160
And that's why I say that mine are small peanuts


00:21:54.160 --> 00:21:57.820
because at the most it's like 19,000 a month,


00:21:57.820 --> 00:22:02.820
but the top 20 all get over 1.3 million downloads per day.


00:22:02.820 --> 00:22:05.260
- Wow, yeah, and you can look at the trends.


00:22:05.260 --> 00:22:06.340
That's pretty interesting.


00:22:06.340 --> 00:22:09.260
There's probably some cool stuff to go through here.


00:22:09.260 --> 00:22:12.460
And I guess if you were trying to do predictive stuff


00:22:12.460 --> 00:22:14.460
or analytics, there's probably a lot of things


00:22:14.460 --> 00:22:15.300
to be done here.


00:22:15.300 --> 00:22:16.300
- Yeah, definitely.


00:22:16.300 --> 00:22:18.340
Also, just occasionally, I'm just,


00:22:18.340 --> 00:22:20.620
the top 20 I like because I was,


00:22:20.620 --> 00:22:22.020
occasionally I'm curious about that.


00:22:22.020 --> 00:22:25.220
I'm like, what are the top packages on PyPI?


00:22:25.220 --> 00:22:26.060
What are people using?


00:22:26.060 --> 00:22:28.620
- Yeah, they weren't what I expected.


00:22:28.620 --> 00:22:30.400
I mean, some of the ones I obviously expected were,


00:22:30.400 --> 00:22:33.940
but I think right now, urllib was the top top,


00:22:33.940 --> 00:22:35.180
and I didn't expect that.


00:22:35.180 --> 00:22:38.460
So, urllib 3 specifically.


00:22:38.460 --> 00:22:39.300
But yeah.


00:22:39.300 --> 00:22:41.100
- It must be used by a whole bunch of other stuff.


00:22:41.100 --> 00:22:43.380
Like 6, I don't think people are specifically


00:22:43.380 --> 00:22:46.060
downloading 6, it's the 2 or 3.


00:22:46.060 --> 00:22:48.900
- Yeah, no, I think request uses both of those,


00:22:48.900 --> 00:22:51.820
and certify, and that hits the top four.


00:22:51.820 --> 00:22:54.820
So, Python dateutil is a good one up there.


00:22:54.820 --> 00:22:56.820
Bodo Core, pretty interesting.


00:22:56.820 --> 00:23:00.020
I use Bodo 3, which depends on Bodo 4,


00:23:00.020 --> 00:23:01.380
but it kind of makes me frustrated


00:23:01.380 --> 00:23:05.020
'cause Bodo 3 won't use the latest version of Bodo Core,


00:23:05.020 --> 00:23:07.900
but it's all made by the same people.


00:23:07.900 --> 00:23:10.140
Anyway, there's a bunch of interesting stuff up here.


00:23:10.140 --> 00:23:12.220
Yeah, I think I'm gonna have to look at this some more.


00:23:12.220 --> 00:23:13.660
- pip is in the top 20.


00:23:13.660 --> 00:23:17.280
- Nice, gotta get started somewhere.


00:23:17.280 --> 00:23:18.120
- Yeah.


00:23:18.120 --> 00:23:19.820
- All right, well, that's it for all of our main items.


00:23:19.820 --> 00:23:20.820
What you got for the extras?


00:23:20.820 --> 00:23:23.420
- Well, I wanted to actually just ask for some help.


00:23:23.420 --> 00:23:27.060
The last episode we put out was a live recording


00:23:27.060 --> 00:23:30.500
of the January Python PDX West meetup.


00:23:30.500 --> 00:23:32.540
Actually not the entire meetup, but just a--


00:23:32.540 --> 00:23:35.260
- Newsflash, in case people haven't been paying attention,


00:23:35.260 --> 00:23:38.140
they're near Portland, there's a second Python meetup


00:23:38.140 --> 00:23:40.260
which runs out in Hillsboro.


00:23:40.260 --> 00:23:42.060
Much better for West side folks.


00:23:42.060 --> 00:23:43.620
So yeah, you put that together, good job.


00:23:43.620 --> 00:23:45.340
- Yeah, and one of the things that we wanted to do


00:23:45.340 --> 00:23:48.220
with this one was to, I got this from a lot of people,


00:23:48.220 --> 00:23:51.860
and in the tech community, well, the West side has a lot


00:23:51.860 --> 00:23:54.080
of like high tech stuff that are,


00:23:54.080 --> 00:23:55.960
there's a lot of people coming from other languages


00:23:55.960 --> 00:23:56.940
to Python.


00:23:56.940 --> 00:23:59.600
And so they might not be beginner programmers,


00:23:59.600 --> 00:24:01.440
but they're beginners at Python.


00:24:01.440 --> 00:24:03.800
We've had this before people saying


00:24:03.800 --> 00:24:07.380
some beginner friendly content per at least one topic


00:24:07.380 --> 00:24:10.200
per meetup so that people aren't lost with everything.


00:24:10.200 --> 00:24:12.840
And yeah, we kind of forgot this this last time,


00:24:12.840 --> 00:24:14.600
but I enjoyed the topics.


00:24:14.600 --> 00:24:17.200
I'd like to hear from other people as to what sort of


00:24:17.200 --> 00:24:18.840
topics would be good at a meetup


00:24:18.840 --> 00:24:20.980
for Python beginner friendly.


00:24:20.980 --> 00:24:22.700
and just let us know, I think that'd be cool.


00:24:22.700 --> 00:24:26.460
- Yeah, well it's easy to get super into focusing on


00:24:26.460 --> 00:24:29.100
what's the most latest, coolest, hottest thing,


00:24:29.100 --> 00:24:33.300
but there's a lot of folks who really just appreciate


00:24:33.300 --> 00:24:35.340
setting the ground, a good foundation,


00:24:35.340 --> 00:24:36.980
and so yeah, I think that's a good topic.


00:24:36.980 --> 00:24:38.660
- Yeah, and one of the things I'd like to do


00:24:38.660 --> 00:24:41.020
is possibly get a list of those sorts of things


00:24:41.020 --> 00:24:44.900
so that we can try to ask people to put together something.


00:24:44.900 --> 00:24:47.300
Like at one of the meetups I did,


00:24:47.300 --> 00:24:51.620
just describing how pip and virtual environment work


00:24:51.620 --> 00:24:53.460
and how to use those.


00:24:53.460 --> 00:24:55.380
And there's a lot of basic stuff


00:24:55.380 --> 00:24:56.780
that people don't even think about,


00:24:56.780 --> 00:24:58.620
maybe, that they should talk about.


00:24:58.620 --> 00:25:00.300
And it'd be good to hear more.


00:25:00.300 --> 00:25:02.200
I also wanna try to get other people to do it


00:25:02.200 --> 00:25:03.700
because you and I could probably do those


00:25:03.700 --> 00:25:05.620
sorts of beginner-friendly ones.


00:25:05.620 --> 00:25:07.380
It'd be fun to have other speakers too.


00:25:07.380 --> 00:25:08.580
- Yeah, absolutely.


00:25:08.580 --> 00:25:09.420
It would be very fun.


00:25:09.420 --> 00:25:11.540
If people are willing to get to Portland


00:25:11.540 --> 00:25:13.020
on a Tuesday evening,


00:25:13.020 --> 00:25:15.220
then they can come give a presentation.


00:25:15.220 --> 00:25:16.060
- Yeah.


00:25:16.060 --> 00:25:19.340
One more thing I want to do a shout out to Pi Cascades 2020.


00:25:19.340 --> 00:25:21.860
I can't remember when that, it's in February coming up.


00:25:21.860 --> 00:25:25.100
- February, I believe, I believe it's like 8th and 9th.


00:25:25.100 --> 00:25:26.220
Let me double check.


00:25:26.220 --> 00:25:29.380
It is February 8th and 9th in Portland, Eastside.


00:25:29.380 --> 00:25:30.220
- Wonderful.


00:25:30.220 --> 00:25:32.100
So people should get tickets so they could come.


00:25:32.100 --> 00:25:34.620
And if you haven't bought your ticket yet,


00:25:34.620 --> 00:25:36.860
check the show notes because we've got a discount code


00:25:36.860 --> 00:25:37.900
for 10% off.


00:25:37.900 --> 00:25:38.740
- Yeah, absolutely.


00:25:38.740 --> 00:25:39.820
Yeah, it's right there at the bottom.


00:25:39.820 --> 00:25:43.460
I don't really have anything this week for extras to share,


00:25:43.460 --> 00:25:44.860
but one thing that did come out


00:25:44.860 --> 00:25:46.740
that caught my attention yesterday


00:25:46.740 --> 00:25:48.420
that I think I might as well just throw out


00:25:48.420 --> 00:25:51.860
that's kind of cool is Firefox 72 is out


00:25:51.860 --> 00:25:54.940
and it has come with anti-fingerprinting


00:25:54.940 --> 00:25:56.660
which is pretty exciting.


00:25:56.660 --> 00:25:58.340
So I don't know how many people are aware,


00:25:58.340 --> 00:25:59.700
I don't know if you're aware Brian,


00:25:59.700 --> 00:26:01.500
that even with ad blockers


00:26:01.500 --> 00:26:03.660
and blocking like tracking cookies and stuff,


00:26:03.660 --> 00:26:05.300
there's all these weird things


00:26:05.300 --> 00:26:07.380
that you can do to figure out,


00:26:07.380 --> 00:26:09.900
actually it's that same person, right?


00:26:09.900 --> 00:26:13.380
Like you can ask what are all the installed fonts


00:26:13.380 --> 00:26:15.780
and what version of OS do you have?


00:26:15.780 --> 00:26:17.420
And here's a canvas thing.


00:26:17.420 --> 00:26:18.660
Let's run some stuff on there


00:26:18.660 --> 00:26:22.300
and try to detect weird CPU cycles and other kinds.


00:26:22.300 --> 00:26:24.700
There's all these weird things you can do in browsers


00:26:24.700 --> 00:26:27.280
and pretty much uniquely identify


00:26:27.280 --> 00:26:28.900
everyone running a web browser.


00:26:28.900 --> 00:26:30.020
- Oh, that's lame.


00:26:30.020 --> 00:26:31.700
- Even without cookies, yeah.


00:26:31.700 --> 00:26:33.740
So Firefox is trying to fight back against that.


00:26:33.740 --> 00:26:36.180
So I think that's pretty awesome and worth checking out.


00:26:36.180 --> 00:26:38.980
I'll actually link to Ars Technica article about it.


00:26:38.980 --> 00:26:39.800
- Okay, cool.


00:26:39.800 --> 00:26:42.740
- Yep, well, I guess that leaves us with a joke, doesn't it?


00:26:42.740 --> 00:26:43.580
- Yeah.


00:26:43.580 --> 00:26:45.480
- The last time we did a joke about describing


00:26:45.480 --> 00:26:47.980
different software programming jobs,


00:26:47.980 --> 00:26:50.060
this one, you're gonna have to imagine


00:26:50.060 --> 00:26:53.360
that people who are fans of various programming languages


00:26:53.360 --> 00:26:56.280
are in like a literature course


00:26:56.280 --> 00:26:58.220
and they have to write an essay, okay?


00:26:58.220 --> 00:26:59.060
- Okay.


00:26:59.060 --> 00:27:00.420
- Okay, have you pulled up the picture?


00:27:00.420 --> 00:27:01.740
- Yes, I'm already laughing.


00:27:01.740 --> 00:27:02.560
- All right, cool.


00:27:02.560 --> 00:27:05.100
So basically there's professor looking person


00:27:05.100 --> 00:27:07.660
with glasses trying to read like a paper,


00:27:07.660 --> 00:27:10.780
a physical paper, and a student looking at it,


00:27:10.780 --> 00:27:12.700
getting the feedback from the professor.


00:27:12.700 --> 00:27:16.420
This is important because at the end it gets interesting with the pictures.


00:27:16.420 --> 00:27:19.140
So for Python it says, "This is plagiarism.


00:27:19.140 --> 00:27:21.020
You can't just import essay."


00:27:21.020 --> 00:27:28.300
For Java it says, "I'm two pages in and I have no idea what you're saying."


00:27:28.300 --> 00:27:29.300
Pretty appropriate.


00:27:29.300 --> 00:27:30.300
Yeah.


00:27:30.300 --> 00:27:35.620
Assembly, "Do you really have to redefine every word in the English language?"


00:27:35.620 --> 00:27:39.660
With C it says, "This is great, but you forgot to add a null terminator.


00:27:39.660 --> 00:27:40.740
Now I'm just reading garbage."


00:27:40.740 --> 00:27:43.420
(laughing)


00:27:43.420 --> 00:27:45.580
I don't really know if I understand the C++ one,


00:27:45.580 --> 00:27:47.660
but it says, "I asked for one copy, not 400,


00:27:47.660 --> 00:27:49.420
"and the professor's buried in books."


00:27:49.420 --> 00:27:51.380
- Oh, I don't get that either, but--


00:27:51.380 --> 00:27:53.800
- Yeah, Unix shell, this one's pretty good.


00:27:53.800 --> 00:27:55.860
I don't have permission to read this.


00:27:55.860 --> 00:27:59.380
LaTeX, which you often use to describe scientific papers


00:27:59.380 --> 00:28:02.780
and super elaborate mathematical formulas,


00:28:02.780 --> 00:28:05.140
says, "Your paper makes no sense to me,


00:28:05.140 --> 00:28:08.740
"but it's the most beautiful thing I've ever laid eyes on."


00:28:08.740 --> 00:28:11.300
- And the final one is the HTML programmer.


00:28:11.300 --> 00:28:14.100
And instead of holding a paper,


00:28:14.100 --> 00:28:16.020
the professor's holding a pot.


00:28:16.020 --> 00:28:19.380
And they just say, "This is a flower pot."


00:28:19.380 --> 00:28:21.700
That's it.


00:28:21.700 --> 00:28:23.180
- I don't get it, but it's funny.


00:28:23.180 --> 00:28:25.020
- Yeah, I don't either.


00:28:25.020 --> 00:28:27.180
All right, so anyway, I thought that was pretty fun.


00:28:27.180 --> 00:28:28.020
Y'all can check it out.


00:28:28.020 --> 00:28:30.660
The comic is linked in there, but it was pretty fun.


00:28:30.660 --> 00:28:31.860
You can't just import essay.


00:28:31.860 --> 00:28:32.940
This is plagiarism.


00:28:32.940 --> 00:28:35.940
- All right, well, thanks a lot, Michael.


00:28:35.940 --> 00:28:36.760
- Yeah, you bet.


00:28:36.760 --> 00:28:37.600
Thanks, Brian.


00:28:37.600 --> 00:28:38.420
Good to be here.


00:28:38.420 --> 00:28:43.940
listening to Python Bytes, follow the show on Twitter @PythonBytes, that's Python Bytes as in


00:28:43.940 --> 00:28:49.700
B-Y-T-E-S, and get the full show notes at PythonBytes.fm. If you have a news item you


00:28:49.700 --> 00:28:54.500
want featured, just visit PythonBytes.fm and send it our way. We're always on the lookout for sharing


00:28:54.500 --> 00:28:58.980
something cool. This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for


00:28:58.980 --> 00:29:01.860
listening and sharing this podcast with your friends and colleagues.

