00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 307, recorded October 26, and I am Brian Okken.

00:00:10 And I'm Michael Kennedy.

00:00:12 Yay! Well, it's pretty exciting here in Python world this week.

00:00:17 Oh, it's a big deal this week, absolutely.

00:00:20 It's a big deal. So tell us why it's a big deal.

00:00:23 We've talked about Python being faster, and new features coming along.

00:00:29 But primarily, at the most, I would say there's like two ends of the spectrum that people have been really looking forward to.

00:00:36 One is, wouldn't it be great if you did nothing and your code ran 50% faster?

00:00:42 Brian, you and I are of similar age, and I remember it was just like, well, wait till next year till I get a new computer.

00:00:48 And that program that's a little sluggish is going to be zooming along, right?

00:00:52 And just like computers would just double in speed all the time.

00:00:55 And we don't get so much that anymore.

00:00:57 But with Python, we kind of do this this time around.

00:01:00 Yeah, I remember like also like adding more memory and trying to detect whether I could tell the difference for the $100 I spent.

00:01:07 Yes, exactly. Exactly.

00:01:09 Or optimizing your low man versus high man.

00:01:12 I mean, that's going back always.

00:01:15 But the big news is Python 311 is out.

00:01:18 Woo.

00:01:19 Yay.

00:01:20 Yeah, that's it.

00:01:21 We should have had like champagne or something.

00:01:23 Yeah.

00:01:24 Yeah, pop some corks.

00:01:26 So very big news.

00:01:28 I'm super excited about it.

00:01:29 I told you there's this end of the spectrum.

00:01:31 The other end of things that people seem to be psyched about across the board is better error messages.

00:01:37 Yeah.

00:01:37 I mean, it's very important for debugging and also for teaching people and learning Python.

00:01:42 So yeah, absolutely.

00:01:44 Absolutely.

00:01:45 I got to pull this one off just for nostalgia sake.

00:01:47 Dave in the audience says back when we had turbo buttons, our computers, they literally had a button that said turbo.

00:01:53 I remember when I got my Pentium 90, it had a turbo button.

00:01:56 And I'm like, yes.

00:01:57 What it really meant is if it was off, it would run in like some weird retro slow mode.

00:02:01 So I would like play mech warrior and stuff would like zoom around insanely fast.

00:02:06 But if you took off turbo, you could play some of the older games because they weren't based on time.

00:02:10 They were based on frame rate.

00:02:12 Anyway, crazy, crazy memories.

00:02:15 So we're kind of getting that cool like doubling a speed thing here.

00:02:18 So there's a ton of stuff to talk about in terms of what's available here.

00:02:21 Before I get into the details, I want to point out on YouTube, which I'm linking to Python discord lemon over there, hosted a live stream of the release.

00:02:32 So this is not a party celebrating the release, but this is live broadcasting of the actions and the steps as it's being released, like, okay, the final one is built. Okay, we pushed it to the Microsoft Store for Windows, Windows Store install. Now we pushed it to, you know, Python dot org. Now it's over here and like, right, like the actual pushing of the deployment. And there's a bunch of interesting things that happen there. And along the way, they talk about some of the features, we're gonna have a subset of the people that were there in apparently 46 hours on Friday on talk Python to make an episode out of it there as well.

00:03:11 That's pretty cool. It's neat that they do that.

00:03:14 So people can just watch the process.

00:03:16 Yeah, it is cool that they do that.

00:03:18 And I saw a pop up and like, "These guys are going live." I'm like, "Oh, that's playing in the background while I'm working today." You know, I'm going to be apparently at 80% capacity of like getting stuff done, but I'm going to enjoy it a lot.

00:03:30 Also, we have a logo, which is not the official Python logo, but a Python 3.11 logo.

00:03:38 And it has like little, it's like two snakes, but they're not the Python, you know, cartoon, dramatic, like sort of stylized snakes, they just look like snakes.

00:03:49 And it says faster Python exception groups and accept star typing improvements.

00:03:54 And I literally love the logo basically as the release notes, but, and it has a lightning bolt in the middle.

00:04:00 I guess that means fast.

00:04:01 - I think so.

00:04:02 - I think so.

00:04:02 All right, so let's see, major new changes.

00:04:05 we've got fine-grained error locations and tracebacks.

00:04:09 Let me see if I can get it to show us some interesting example here.

00:04:13 Yeah, this is super cool.

00:04:15 So check, there's a line if you just follow the pep there.

00:04:19 There's an example of, suppose you're calling like a complicated JSON API and you get this data back and you store it in a variable x.

00:04:26 You've got to go to some field in the JSON document and then further down and further down and further down and like either get or set a value.

00:04:33 So here it has X bracket of A, bracket of B, bracket of C, bracket of D.

00:04:39 So you're like diving from like level A, B, C, D in the JSON document.

00:04:43 If you get the error, none type is, or object is not subscriptable.

00:04:48 You know something there was none.

00:04:51 >> Yeah, but you're four levels deep. Which one was it?

00:04:53 >> Right. It could have been B wasn't subscriptable, or it could have been C, or it could have been like, you don't know where.

00:04:58 And so what a hassle, right?

00:05:00 and you do print statements, that's when you do debugging statements, that's when you maybe make that four different lines, so you see which line crashes.

00:05:08 On 3.11 now it just says, tilde tilde tilde, look, it's, you had x of a of b of c, it's c that was the none thing, that's where the problem was.

00:05:20 Actually I suspect that, I guess it's probably c, we tried to get d out of none, and c was none, is probably where the error was.

00:05:28 Yeah. But it points like right where these problems is, problems are throughout there.

00:05:33 Yeah.

00:05:34 Really neat.

00:05:35 that's a whole bunch of others.

00:05:37 Yeah.

00:05:37 There's a bunch of other ways that they're highlighting where the problem is.

00:05:41 Yeah.

00:05:41 If you go through, there's a bunch of cool examples here, but basically you end up with, within complex expressions, you know, multiple things happening on one line and so on, you get a nice details.

00:05:53 They're, pretty cool.

00:05:55 So that's just one of them, but I would say if you don't care about performance, that's probably what you might consider the highlight.

00:06:03 If you're an async IO, async and await type person, async exception groups, PEP564 and except star are pretty interesting.

00:06:12 Because if I start three tasks and I wait on them and two of them have errors, well, which exception do I get?

00:06:19 Do I get the one from the first one or do I get the one from the second one?

00:06:23 So it would be great to be able to say, two of the three things failed, here are their problems.

00:06:28 You can get a holistic view of what's happening.

00:06:31 That's great.

00:06:32 >> Yeah. I still haven't got my head around this completely, but I'm curious to see how this will change Python style, because this changes how you can write exception handling.

00:06:46 >> Indeed. Some of the higher level async frameworks like Trio and Any.io have this concept of starting and managing a series of tasks together as a group.

00:07:01 So if I'm going to save an entry to the database, I'm going to call an API, and I'm going to create a file, and those are all the all results of like, I want to create a new user, I want to do whatever, right?

00:07:14 You might want to be able to say, I want to start all those and wait for them to finish.

00:07:18 or if I start a couple of them to decide I want to bail out, cancel all of them or if one fails and so on.

00:07:25 We've got this concept of a task group in AsyncIO and changes to the task cancellation semantics.

00:07:33 It's interesting, we've got PEP 657 was the traceback enhancements, 654 was the exception groups, but the task groups is GH 90908.

00:07:48 - Interesting. - Do you know what GH stands for?

00:07:49 GitHub.

00:07:49 - Okay.

00:07:50 Weird. - So, it's news to me that this, these features get added through just a GitHub issue rather than a proper, you know, PEP.

00:08:01 But, anyway.

00:08:03 Yeah.

00:08:04 Pretty neat.

00:08:05 - Maybe you're pronouncing GH as "puh" - Yeah. - like a...

00:08:09 (laughing)

00:08:11 - Exactly.

00:08:12 Let's see.

00:08:13 Henry has some cool comments falling up out there.

00:08:16 Henry Schreiner thinks, "Caters is already using exception groups via Backport exception group.

00:08:21 It is fantastic and really does change Python exceptions." >> Cool.

00:08:26 >> Cool extra information there. All right, let's keep going.

00:08:29 You've already talked about Tomlib being built-in.

00:08:32 Now that we have pyproject.toml, we really have external libraries in order to understand them.

00:08:37 >> Yeah, now we get to do the if block.

00:08:41 if import Tomolib or the try except around it.

00:08:47 >> Exactly.

00:08:48 >> How fun.

00:08:50 >> Yeah.

00:08:51 >> It is a good thing though. I'm glad for that.

00:08:54 >> Yeah. There's changes to regular expressions.

00:08:57 If you care, you know.

00:08:58 Then we've got basically a general statement saying, the faster CPython project is already yielding some exciting results.

00:09:08 That is Mark Shannon, Gideon Van Rossum, and a bunch of other folks, Grant and others, all working on this.

00:09:18 And this is already yielding exciting results.

00:09:20 Python 3.11 is up 10 to 60% faster than just 3.10.

00:09:25 That is just from last year, right?

00:09:27 Hence the turbo button.

00:09:29 On average, we measured a 1.22 or otherwise known as 22% speed up on the benchmarks for Python tests.

00:09:41 So our Python benchmarks.

00:09:43 You see, see faster Python for details, right?

00:09:46 There's already some of those we're making the 310, 311 is getting more, 312 is getting more.

00:09:50 And it's, yeah, it's just a first down payment, I guess.

00:09:54 But it's really great to see that happening.

00:09:56 >> Yeah, pretty exciting.

00:09:57 >> Yeah, a bunch of stuff around typing.

00:09:59 Those are a lot of other highlights there.

00:10:01 Two things that are worth calling out here, I would say.

00:10:04 One is self.

00:10:06 It's good to be self-aware, right, Brian?

00:10:08 Yeah.

00:10:10 It is.

00:10:11 And so Python classes can now understand that they too have a self.

00:10:16 Even though they say self all over the place.

00:10:18 Like, you know their language, right?

00:10:20 Like this in C++ and C# is a thing you can, but not must use.

00:10:24 Or you've got to say self.

00:10:25 So ironically, the typing system now also understands self.

00:10:28 And you can say, what the problem was before, if I'm in a class and I have a method of that class that returns an instance of that class.

00:10:36 The class is not yet defined as far as Python's concerned until you're to the end.

00:10:40 So I can't say the return type is the name of the class because until you're done the class is not defined, right?

00:10:48 It's like this weird error. So what you can say is it returns self.

00:10:50 And whatever self is, that's what it returns.

00:10:53 And one of the changes and difficulties was to make this work with inheritance.

00:10:59 >> Yeah. I mean, in C++, you have to pre-declare the type ahead of time.

00:11:04 But then, yeah, anyway, we don't have declarations in Python.

00:11:10 >> We don't. I wonder why we don't have a two-pass compiler that scans for types and then expands out the details.

00:11:17 >> Do you know what variadic generics are?

00:11:20 Putting you on the spot, sorry.

00:11:23 >> You are putting me on the spot. Let's see.

00:11:27 >> I just want to use that word more often.

00:11:29 >> I know, it sounds like, because I do have a PhD in computer science.

00:11:34 It enables the creation of generics parameterized with a single type.

00:11:41 This is something I don't do much of in Python types.

00:11:45 You can create a type variable that then defines the type of a thing and then use that variable.

00:11:51 It's like templates a little bit.

00:11:53 This has to do with that.

00:11:55 >> Okay. I don't think I'm smart enough to use this.

00:11:57 >> You look at the example, you say I created an axis one is like a type, and then I can say I have an array which is of generic of axis one.

00:12:08 I left that stuff behind in C++ like the multiple template.

00:12:15 >> Somebody is helping us out.

00:12:16 Dean is saying, "When I learned about Rayleigh generics, I thought maybe we've gone too far with typing." Thanks, Dean.

00:12:26 You don't, one thing that's nice about Python is often you don't have to know or care or consume certain parts.

00:12:33 You're like, you know what, that doesn't apply to me yet.

00:12:35 Maybe someday, not right now.

00:12:36 There's other stuff of course, the last one I think is noteworthy has to do with limiting the spread of little Bobby tables, let's say.

00:12:47 And these are arbitrary literal string types.

00:12:50 So the idea is, if you've got, say, like, a SQL query, it would be great to somehow define, here's a string that I want to put into code, but I don't want it, it's kind of like a static string, in a sense, like it can't be modified or added against non-literal strings.

00:13:11 So the example says, look, I've got slick* from data where user_id equals fstring curly user_id.

00:13:16 And if you say user123, good.

00:13:19 but you also might say user123; drop table data; or you could do, you want to get all the records, you say user123 or 1=1.

00:13:29 Right? Like these are bad.

00:13:31 So what you can do with these now is you can come up with literal strings, and in order to make the query work, you have to use database parameters.

00:13:42 You just put like a placeholder in the string that never changes, And that way, basically, your string, in a sense, is safe from injection.

00:13:50 Okay.

00:13:50 Yeah.

00:13:51 But you can still, you still can pass parameters in, but you just have to do it a different way.

00:13:55 Right. So in this example, they have select user.name, user.age from data, where user ID is question mark.

00:14:01 That's the indicator of a SQL parameter.

00:14:04 And then you say connection execute given that string, and then you pass the parameter, which has the value of the user ID.

00:14:10 and then the database engine knows like that can't truncate a statement, right?

00:14:15 It can't sort of modify the command you send.

00:14:18 What's notable though is you can also add on things, you can change it and combine it with other literal strings, but not with non-literal strings.

00:14:28 >> Okay, interesting.

00:14:30 >> Yeah. That's what this literal string type is here.

00:14:37 - And yeah, anyway, so people can check that out.

00:14:40 I think that's, you know, that's gonna be useful in a lot of situations where you're trying to be safe with a user input basically.

00:14:48 - Yeah.

00:14:49 - All right, is that it?

00:14:50 I think that might be all the highlights.

00:14:52 Yeah, there's a, go get your version.

00:14:55 I've already brew installed my 3.11, which is cool.

00:14:59 - Oh, you brew installed, okay.

00:15:01 - I did.

00:15:03 Now, if you just say brew install Python 3, you'll get three, you'll get three, 10, seven, I think, or eight, you won't get 311, but you can root install Python, I think it's at 311 or at 3.11, you'll have to look, I don't remember the exact command, but there's a way to say, no, I want the cutting edge version.

00:15:23 And I was already, final thought on this, we'll move on.

00:15:26 I was already given a small cut by it.

00:15:29 - You were.

00:15:29 - I was, so the Python Bytes website is based on Beanie, the MongoDB, pedantic combo of glory, because it's all async, it's based on motor, the async driver for Python and MongoDB from the MongoDB folks.

00:15:49 They built that thing in the super early days before async and await was a thing based on Tornado.

00:15:53 So they don't use async def for their async functions.

00:15:57 They put @asyncio.coroutine as a decorator onto all their async functions.

00:16:03 Well, that was awesome until 3.11 where that was removed from the runtime.

00:16:08 So that doesn't work anymore and it doesn't run so well either.

00:16:13 So the motor people had to rush out 3.11 yesterday after much conversation of like, you guys realize you should have tested on 3.11 beta or RC1 or RC2 or any other release at some point 'cause clearly this code was never gonna run and you should have known straight away, but at least they fixed it quickly.

00:16:33 >> Okay. So Henry wants to know, how did you find it?

00:16:37 Apparently, it's on MergedPR.

00:16:40 >> Perhaps. I just did brew update, brew outdated, and it said new recipe or new whatever it calls those things.

00:16:49 The new recipe Python 3.11.

00:16:51 I said, "Oh, cool. Then I'll install Python 3.11." >> Okay.

00:16:53 >> That's how I know.

00:16:54 >> So I want to stick with this install thing a little bit.

00:16:59 Because I would think that you're probably a power user.

00:17:02 I mean, you know Python pretty much and you're trying to be cutting edge and everything.

00:17:07 I think that a lot of Python bloggers and social media people that are famous in Python are probably the power user kind of people.

00:17:19 And they tell people weird things, I think.

00:17:22 >> Like brew install Python.

00:17:23 >> Just brew install.

00:17:24 And I don't think it's a good idea.

00:17:26 So I'm going to get on the soapbox a little bit and say, I wrote an article on how to install Python and it's installing Python 311 on Mac or Windows and we'll get to Linux in a bit.

00:17:39 But so the gist is you go to python.org, you hover over downloads and you click download and then the thing that gets installed, you install it. Now you're done.

00:17:51 Oh, so okay, so why did this deserve an entire article? Well, because I think a lot of people are teaching people to do like saying just brew install it or do a do pie in and and pie in I anyway we'll get to there but so I just want to tell people how long does it take it takes about a minute I took I did it I timed it on both my Mac and did it on a Windows machine and just installing everything takes yeah it took about a minute a little a minute and 13 seconds on my Mac.

00:18:29 And this is including me having to hit stuff.

00:18:32 So it's also my delay.

00:18:33 And then also did it on Windows, it took like twice as long, but I was tunneled through a VPN and firewalls and stuff.

00:18:42 So it probably, it's probably all that.

00:18:45 It's pretty fast.

00:18:46 You can have, and it doesn't uninstall anything.

00:18:49 So you can have multiple versions.

00:18:51 So it will, like if you use that sort of download link for like the latest, like 310.8, it'll go over the top of 310.7, I think.

00:19:00 At least on Mac it does that.

00:19:03 But that's okay, it's kind of what I want.

00:19:05 I've got 310, you can have multiple.

00:19:07 I got 310, 310, 311 all on my machine, just with those links.

00:19:12 And the 311 just is the default.

00:19:15 I think it's the newest one and the oldest.

00:19:19 Anyway, it modifies the Z profile, your .Z profile, and it shows up as the latest one.

00:19:26 Now if I had 3.10 before, what if I go back and install the update my 3.10, will it make 3.10 the default?

00:19:34 No, it doesn't.

00:19:35 It leaves it alone because it was already in there.

00:19:37 It leaves it be.

00:19:38 But you should check anyway if you're gonna go back and install old versions.

00:19:42 And Tox works just great with it.

00:19:44 So why am I kind of ranting on this is because a lot of people try to say Homebrew.

00:19:50 And if you're a Homebrew user, You're not gonna look for this blog anyway.

00:19:54 You're just gonna try to do it with homebrew.

00:19:56 Great, go for it, perfect.

00:19:59 And pyenv, I think there's some places for it, but pyenv is about managing different versions and having multiple live at the same time and different projects use different ones.

00:20:08 It's not just an easy installer.

00:20:11 And since it does all that other stuff, I don't think people should recommend it for newbies.

00:20:16 It's not the right tool for somebody new to Python.

00:20:20 I think it's just gonna confuse the heck out of people.

00:20:23 So that said, I walked through the whole thing in this article, but I also admit that it's Mac focused.

00:20:32 But on the Windows, you just, I did a little blurb on Windows too.

00:20:37 The thing I wanna tell people that I sometimes forget on the Windows install is go slow when you're clicking through everything so that you can select the advanced features.

00:20:46 and you probably want add Python to environmental variables.

00:20:50 That makes it so that it just shows up in your path because you can add it to your path manually or you can let the installer do it and I like to have the installer do it.

00:20:59 So that's my rant.

00:21:01 I think that for most people, just use the default installer.

00:21:06 - Yeah, I think that's totally good advice.

00:21:09 Let's see here, really quick.

00:21:11 I also did that the other day before it came out in brew.

00:21:15 I'm like, "Oh, let me just put it over here and see.

00:21:16 I wanted to test some things." I had 3.11 and they were both totally content next to each other from those installers.

00:21:23 I just decided to take 3.9 out because I didn't really need that.

00:21:27 I've got it from Homebrew as well already.

00:21:30 But they do coexist just fine.

00:21:35 Here's what the brew statement is.

00:21:37 It's new formula and it's Python at 3.11.

00:21:43 - Okay, nice. - Yeah.

00:21:46 And as for Linux people, I think it's sort of funny that people try to tell, if how to install Python articles, talk about Linux stuff.

00:21:55 Linux people already know how to install their stuff, don't they? I mean...

00:21:58 Yes, but although it's more complicated because Python's broken into a bunch of pieces.

00:22:03 You want Python, or do you want the Python dev, or do you need the build essentials, or like, there's a lot of like, Do you need Python 3-VE and V?

00:22:14 Because you want to create a virtual environments don't come with Python when you apt install it, which is like, what?

00:22:19 >> But they do on Mac and Windows.

00:22:21 >> Yes, exactly. At least the error message is, you don't have this, should you apt install Python 3-V and V?

00:22:29 Yes, I should. Let me copy and paste. Hold on.

00:22:31 >> Okay.

00:22:32 >> All right. See Roman out in the audience there.

00:22:35 Roman, I've got some shout outs for you in a little bit, and in the past if you weren't here.

00:22:40 But before we get to those, I wanna tell you about this week's sponsor, Microsoft Founders Hub, Microsoft for Startups Founders Hub.

00:22:49 As they have been recently, big supporters of the show, we really appreciate it.

00:22:53 And if you're out there either starting a business or want to start a business, gotta know that it's not easy.

00:23:00 Within the first year, 90% of startups go out of business.

00:23:04 That's not amazing.

00:23:06 So the folks over at Microsoft for Startups set out to understand what are the problems that people are running into, and how could they help. So they came up with Microsoft for Startups Founders Hub. And the idea is that you get at any stage of your startup free resources to grow and thrive. So you get thousands of dollars of cloud credits for things like Azure and GitHub, and deep Keep mine, don't look.

00:23:34 Open AI, sorry, for those types of things and as your startup grows and progresses, you get many, many more of those.

00:23:45 But you also get support in the form of mentorship and connections.

00:23:50 Brian, you're not in Silicon Valley, are you?

00:23:53 - No.

00:23:54 - Neither am I, by choice by the way.

00:23:57 And most people out there listening are not either, but having the connections of like, hey, let's meet up with so-and-so for coffee and talk about this new project and see if there's a connection there, right?

00:24:08 Like those kinds of things are incredibly powerful and they've given people in locations like that huge advantages.

00:24:15 So the other thing you get with this is access to a mentorship network, the ability to book one-on-ones with meetings, one-on-one meetings with mentors, many of whom are founders themselves.

00:24:26 We can talk about things like marketing or fundraising or whatever you need.

00:24:30 So if you wanna get started, make your dream, your company a reality today with the critical support you get from Microsoft for Startups Founders Hub.

00:24:39 You don't have to be third-party validated.

00:24:42 You don't have to be venture backed or part of some kind of accelerator.

00:24:45 Just go and apply for free.

00:24:47 Pythonbites.fm/foundershub2022.

00:24:50 Link is in your show notes.

00:24:52 Check them out.

00:24:53 Very cool program.

00:24:55 - Very cool.

00:24:56 - Indeed.

00:24:57 All right, you ready for some awards?

00:25:00 Got the red carpet out, the champagne, more champagne.

00:25:04 Some kind of theme with that here.

00:25:05 - Celebration.

00:25:06 - Yes, let's talk about the Bossy's.

00:25:09 So the Bossy's, this is InfoWorld's 2022 Bossy Awards, celebrate the most important and innovative solution for application developments, DevOps, analytics, and what not of the year.

00:25:21 So let's go, these are open source.

00:25:24 - Best open source software.

00:25:26 I was like, where does boss come from?

00:25:28 Okay.

00:25:29 - Exactly.

00:25:30 There's a bunch that are interesting, but we'll go through, you can't go through very fast.

00:25:34 There's like a delay, I guess, so you pay attention and you actually take it in.

00:25:39 So maybe really quick, just 'cause it's the first one, is there's Alma Linux, which is a free Linux OS for the community by the community that is like an enterprise Linux distribution focused on stability.

00:25:51 So that might be cool checking out.

00:25:53 I know a lot of people do things there.

00:25:55 You have to bear with me as I make my way through this thing as it won't let me go any faster.

00:26:00 Well, let's do the first one.

00:26:03 There's a lot of Java in here actually, which we'll get back to in a joke later.

00:26:07 That'll be fun.

00:26:08 Like Jhipster, I mean, greetings Java hipster.

00:26:12 That's a pretty awesome project.

00:26:14 But--

00:26:15 - Java hipster, that seems sort of anachronistic.

00:26:19 - You know, you gotta, this is part of that self-talk thing where you like try to talk yourself up a little.

00:26:25 All right, maybe number one that I want to give a shout out to at number one as in number 10 in the list is Wasm time.

00:26:32 A fast and secure runtime for web assembly outside of the browser. So if you think about what Node.js did for JavaScript, like JavaScript used to be this thing you did on web frontends and then somebody said, if we rip that engine out, it could be a server side technology or a client side technology that is not in a browser at all, but just it becomes a programming language as long as we have a runtime that everyone likes and works with.

00:26:56 Well, this is like that but for WebAssembly, right?

00:26:59 And so what's interesting is if you want to go and run a Python code and you don't want to worry about making sure Python is set up and all those things, you could just get, say, something like PyScript and ship it to run on top of WasmTime and there you go.

00:27:19 So you just say wasm time and then some wasm output, which could be, you know, your code.

00:27:25 And let's see if they have over here on pipe. Yeah, we have wasm time 2.0, which is the Python embedding of wasm time.

00:27:33 So there you go. Take your Python code and off it goes.

00:27:37 That's pretty cool. So Michael, what time is it? It's wasm time.

00:27:41 It's wasm time.

00:27:44 (laughs)

00:27:46 It is, awesome.

00:27:48 Yeah, so you just write your code in Python and then you could go and run it, which would be pretty excellent.

00:27:54 Also, something that's interesting about Wasm is it allows for interoperability.

00:27:58 So if I wanted to do C, .NET, Python, and Rust, have those all talk together, 'cause I don't know, I couldn't decide, or I don't know, whatever reason, right?

00:28:10 You could have them all converted to Wasm and then integrate there as well.

00:28:14 So there's some pretty interesting runtime and deployment things here.

00:28:18 Anyway, so that was one of the winners.

00:28:20 Right behind it, one of the biggest winners in our world has gotta be PyScript, right?

00:28:25 - Yeah.

00:28:27 It's got to be on the list.

00:28:28 - Yeah, it is.

00:28:29 There's a bunch of stuff here that I don't care about.

00:28:30 But number 14, Sentry.

00:28:33 - Nice. - Error monitoring.

00:28:35 I was just using this to track down some errors that I introduced with trying to run Python 3.11 and Beanie before it was time.

00:28:46 But it told me exactly what was going on and I figured, okay, that's a motor problem.

00:28:49 I was able to track that down, which is pretty excellent.

00:28:52 Let's see a few more here that are fun, almost.

00:28:57 In Bdev, if you're doing notebook stuff and you want to be able to test your notebooks or clean them up before you check them in, or you wanna turn notebooks into a Python package where certain actions in a cell become functions in your Python package and deploy it to PyBI, all those crazy things, nvdev.

00:29:18 So those are pretty interesting.

00:29:20 Accelerate, I think this is from Hugging Face, but I can't quite tell.

00:29:24 Yeah, it is Hugging Face, that's what it is.

00:29:28 It's a way to build, train, and deploy state of the art models powered by open source.

00:29:36 Yeah. So anyway, it looks interesting if you're into that.

00:29:39 Stable diffusion, do you need to have a bear that has just landed on the moon?

00:29:44 Well, go in there, you can create those funky AI art things.

00:29:51 Anyway, there's a bunch of fun projects in this 2022 Bossy's award list.

00:29:56 >> That's pretty great.

00:29:57 >> Yeah.

00:29:58 >> All right.

00:30:00 Yeah. Well, Scott, it's wasm time.

00:30:03 >> It's wasm time. Yeah.

00:30:06 We talk about Will McGugan a lot and textual and stuff.

00:30:11 Will's in the audience. Hey, Will.

00:30:13 One of the things that if you follow Will on Twitter, he shows a whole bunch of cool examples of stuff he's working on, but you haven't been able to play with it because he's been sneaky about it.

00:30:24 Well, it's not sneaky, but it's been on a CSS branch, a different branch of their code base on textualize or textual.

00:30:33 So now we can play with it because as of what, October 22nd, textual 0.2.0.

00:30:43 Wow, big jump in numbers there, guys.

00:30:45 But it released and it has all of the CSS branch stuff merged in.

00:30:51 So all the really cool fun things that you can do that look like web development, but they're in a CLI.

00:30:58 Now I can start playing with them because they've emerged in.

00:31:01 One of the things that I'm glad that they waited a little while for because they were looking for API stability, but also they wanted to finalize the documentation at the same time before they released it to everybody officially.

00:31:17 So they've got a tutorial written, which is really kind of nice.

00:31:21 It's a little stopwatch application that kind of walks through, of walks through and it walks through all the different pieces of how you use Textualize with their CSS.

00:31:33 And it's got going through writing through the CSS, the dynamicness of it, reactive attributes.

00:31:41 This really looks great.

00:31:42 I haven't gone through it yet, but it looks awesome.

00:31:44 And then they went through and updated the Textualize guide, which goes through all the different examples.

00:31:53 I've got my screen shrink up too far so it doesn't show everything.

00:31:57 But anyway, really great stuff in this manual. Good job guys.

00:32:03 >> Yeah, that was awesome.

00:32:04 >> I can't wait to play with it.

00:32:07 >> Who knew that we could treat terminals as high refresh rate general rendering engines.

00:32:15 I feel like the stuff that Will and crew are highlighting here is a little bit like what you could do with JavaScript canvases.

00:32:23 You're like, "Oh, guess what you could actually do?" Which is like our software here, StreamEar that we're using to live stream this.

00:32:30 It's like, "Who would have ever thought you could have done this with just a web browser without plugins?" Here we are.

00:32:36 >> I also just heard Will talking about this on ChangeLog just recently.

00:32:42 One of the more recent ChangeLogs was talking about this release, which is pretty cool.

00:32:46 Although, Will, I got to say I'm a little disappointed because they asked how you became rich and textual, have gained so much popularity so quickly, and you didn't even mention us.

00:33:01 Just come on. Anyway.

00:33:02 [LAUGHTER]

00:33:10 Anyway, that's it for our items.

00:33:13 Since I've been under the weather, I don't have any extras.

00:33:17 Do you have any extras for us?

00:33:18 Ah, you know that I do. I've got a bunch of things. I'll go quick through them.

00:33:22 I recently did a fun video.

00:33:25 I know that guy.

00:33:26 Yeah, I did a video where I added, I did the live coding on TalkBython training, actually adding the feature for the search over here.

00:33:36 I rewrote the search. You pointed out that pytest is a fun thing to type in there, right? pytest is good.

00:33:44 You might search for Postman in Grok, and you get your search results there.

00:33:51 But it's cool hierarchy thing.

00:33:52 But when I first wrote that, it was super slow.

00:33:55 The techniques that I used to debug that, figure out what's going on, make it faster.

00:34:00 The video says 17, but in an extreme case, it was actually 80 times faster.

00:34:04 There's just some really cool techniques of walking through like, "Oh, how could you use logging in the database to figure out what's happening?

00:34:10 How can you use the profiling?

00:34:12 How can we use dictionaries so that we and convert like 100 database calls into one, even though there's like a, not a natural join story going on.

00:34:20 So if people wanna follow, go check out that video, that's lots of fun in the show notes.

00:34:25 From, let me get the name right here, also from Ryan Sheftel.

00:34:30 If you're into stock markets and go on, and you want to use Pandas, here's a project called Pandas Market Calendars.

00:34:42 It's the market counters to use with pandas for trading applications.

00:34:45 So it has things like, when are the markets opening and closing?

00:34:49 Is there a holiday?

00:34:50 Is there some other weird event that's changing the start to close time?

00:34:54 Right.

00:34:55 So just a cool little library to bring that into your pandas code.

00:34:58 And I believe pandas came out of New York and, the whole trading industry over there.

00:35:03 So that's good.

00:35:04 Shout out for, Roman Wright, who is out in the audience.

00:35:08 Hey, Roman.

00:35:09 We recently, so when Beanie came out, Beanie is fantastic, MongoDB library, what FastAPI did for APIs, Beanie does for MongoDB, right?

00:35:19 It takes Pydantic and turns it into a really cool API that then use instead of creating just classes or whatever, right?

00:35:26 So all the benefits of having Pydantic plus MongoDB.

00:35:29 And when it came out, it was only async, which is awesome when you're doing async stuff, right?

00:35:34 Without it, you can't do all the really high scale, high concurrency things.

00:35:38 But there's plenty of times where you're like, "I don't want that, I just want to call this function, and I'm in the middle of a script that has no business being async, but you gave me an async only function, so now I got to figure out how to spin up a loop and run this thing, and wait for it when I just want to call the function." So in addition to the standard async model, Roman added a beanie.sync sub-module where you can get a sync document, and you can initialize a synchronous database connection and then all of your queries and everything become just straight up synchronous calls like on more traditional database engines or database ORMs, ODMs.

00:36:20 - Okay.

00:36:20 - Yeah, so excellent work out there.

00:36:23 - It's a good job keeping up on that.

00:36:25 It's a cool product or project.

00:36:27 - Yeah, it's super cool, yeah, I love it.

00:36:29 DuckDuckGo has released a web browser.

00:36:33 Just when you thought Chrome has taken over everything, DuckDuckGo says, "No," or they quacked, "No," or whatever DuckDuck does when they communicate.

00:36:42 And right now it's Mac only, but it's coming out for Windows pretty soon as well.

00:36:47 And it's a privacy-focused database.

00:36:50 - Web browser, yeah.

00:36:52 - Yes, I just did database, yeah, web browser.

00:36:55 But let me show you, I can even just show you real quick.

00:36:59 Here it is.

00:37:00 - But did you install it?

00:37:01 Oh, of course I did.

00:37:02 Why wouldn't I do that?

00:37:03 Here it is.

00:37:05 So we go over here, we can go to pythonbytes.fm.

00:37:09 And if you pull this up, why not?

00:37:13 Didn't add to stream, there we go.

00:37:14 But come over here to Python bytes and you can click on this, it'll show you where all the tracking is.

00:37:18 Like notice, no Google Analytics, no other tracking, but where shall we go?

00:37:25 Look somewhere super egregious.

00:37:26 We could go to cnn.com.

00:37:28 Remember, this is using already Next DNS and other blocking.

00:37:33 So a lot of the blocking happens before it gets here.

00:37:35 But if you pull it up, it'll still say, look at all these different things we blocked.

00:37:39 And here's the tracking, here's the advertising.

00:37:43 Again, many of these are already blocked before it gets to the network.

00:37:48 So it'd be 30 or 40, easy.

00:37:52 So that's pretty cool.

00:37:54 But I don't know, I'm not switching over to it yet.

00:37:59 Hopefully they can do better.

00:38:01 You can't do things like set your DNS servers for say DNS over HTTPS, so you can like have more control over that.

00:38:08 There's a lot of things that are not there.

00:38:10 It has a really cool way to play YouTube videos in like a private window.

00:38:14 So if you go over to YouTube and you hit play, it'll, would you like to play this in a non-tracking, non-algorithmic feeding sort of way, which is great.

00:38:22 But you know what you have over on YouTube?

00:38:24 hotkeys, I can type F for full screen or T to like go wide theater mode or I for many player.

00:38:29 It doesn't have any of those types of things.

00:38:31 Right.

00:38:31 And so it's like super, super early, but in that regard, I'm, I'm not really liked or recommending it, but it's awesome that they're trying.

00:38:39 I liked duck that go, I'd like to see them make progress here and they have the fire button, which you can just.

00:38:43 clear all the stuff up and get a cool animation.

00:38:47 What does that do?

00:38:49 Just it erases, erases like all history and closes all tabs and, and everything.

00:38:54 - Oh cool. - Yeah, anyway, there you go.

00:38:57 I think I've got one more thing to share, but I've got to share my screen back because that nabbed it.

00:39:05 Yeah, last one here before we get to a joke.

00:39:08 So I want to give credit here, this one comes from Will Shanks.

00:39:13 Apparently, remember when we talked about int, like I-N-T, parentheses, some string, like quote, one, two, three, close quote.

00:39:21 that had a security patch in Python 3.10.7 because if you send it the right malicious huge number string, it can get into like some denial of service where it like works for an insane amount of time trying to figure out what that number is by parsing it.

00:39:37 Not just a big number but like a specifically bad big number I think was the problem.

00:39:41 - Okay.

00:39:42 - So in 3.10.7 they said, you know what, we're gonna limit the size of int to, I don't know, like 994 with 100 zeros or something after, right?

00:39:53 At the time, you and I spoke about, remember when we did C and C++ and C# and we had to think about shorts and 32 bit integers and 64 bit integers and would it be bigger or smaller than 32,000?

00:40:07 Do we need to worry?

00:40:09 And like that number is so huge, like we probably don't think about it.

00:40:11 Some people do, in particular, the scientific folks.

00:40:15 So over on conda forage, there's a big conversation about what to do here.

00:40:19 Like, should we adopt this?

00:40:21 Should we say this is like too much of a problem?

00:40:24 I don't really know how they're gonna avoid eventually adopting it.

00:40:27 - Yeah.

00:40:28 - Because like every version of Python going forward is gonna have this in it, right?

00:40:32 They don't wanna eventually like permanently be held back.

00:40:36 But on the other side, the, what's it Ubuntu?

00:40:40 Let me look.

00:40:41 Yeah, Ubuntu has decided to patch out that int limit.

00:40:44 So basically unravel that security fix and preserve the behavior, previous behavior, thinking that the risk is low of getting an integer like that, and it's not worth breaking compatibility for.

00:40:56 >> Okay.

00:40:56 >> So apparently, int open parentheses, string close parentheses is still controversial.

00:41:03 Who knew? Not me.

00:41:04 >> Yeah.

00:41:04 >> Not me. Yeah. All right.

00:41:07 Let's see. Robert Robertson asks, In Python Bytes episode 311, is that going to be a special episode covering Python 311?

00:41:18 I don't know, but we got five weeks to figure it out and it's a great idea, Robert.

00:41:22 Thank you.

00:41:23 Sure.

00:41:24 Good idea.

00:41:25 I didn't see that coming.

00:41:26 Yeah, we should have coordinated with the Python folks.

00:41:27 We could have just released like five really short episodes like, "Still waiting.

00:41:31 Nope, can skip to the next one." All right, well, that's all I got.

00:41:35 That's all I got for extras.

00:41:36 Okay.

00:41:37 - Well, one of the things I want to extra from the audience, Dean Langsom, Piedata TLV.

00:41:46 - Tel Aviv.

00:41:47 - Tel Aviv, is on December 13th, and they have tickets up for sale, and there's a code.

00:41:52 So if you use discount code, B-Y-T-E-S, you get a discount, I guess.

00:41:59 So that's nice.

00:42:00 - Awesome.

00:42:01 Yeah, good luck with the conference there, Dean.

00:42:03 And lovely city to visit if you get a chance to.

00:42:06 - Okay, cool.

00:42:07 How about something funny?

00:42:09 - Yes.

00:42:11 All right.

00:42:11 - Besides my voice.

00:42:14 - Here we go.

00:42:16 See if I can open the image.

00:42:18 It's glorious.

00:42:19 So Brian, I was thinking about getting a new monitor.

00:42:21 I have a fine monitor.

00:42:22 It's like a 32 inch 4K monitor, but I want something kind of widescreen.

00:42:26 There is this cool, like horizontal resolution equivalent in 4K, but it was either 40 or 49 inches wide.

00:42:34 It was epic.

00:42:35 I didn't get it.

00:42:36 So, I didn't get it 'cause I thought the curved monitor might be like parabolic echoes for all the work that we do here.

00:42:46 And I also didn't get it because, well, it's expensive and I don't know if I can get it into the resolutions I want for recordings and things like that.

00:42:52 But here's somebody who posted a picture.

00:42:56 It says, "Develop in Java be like," and it's got, I think that's a 49 inch curved widescreen monitor, small font.

00:43:05 It's edge to edge code.

00:43:07 There's no pep eight ideas on this, right?

00:43:09 Look at that.

00:43:10 >> Yeah.

00:43:10 >> Is that nuts?

00:43:11 >> That is nuts. Yeah.

00:43:13 >> Yeah. The subtitles be like, I heard you like gooders, which apparently no properties and all that.

00:43:21 >> Yeah.

00:43:22 >> But anyway, I just thought you all might enjoy just checking out this picture of an insane bit of code.

00:43:28 Something's gone wrong.

00:43:30 When you actually need the full width of a 49-inch monitor.

00:43:34 I was thinking of putting a couple of windows side by side.

00:43:36 I don't know.

00:43:37 Call me crazy.

00:43:38 I didn't have measured mine.

00:43:40 I think mine's like, I'll have to measure it.

00:43:43 I think it's like 30 something.

00:43:45 I don't know.

00:43:45 but I, it's got a bit of a curve, but the, I have to, I, it's painful to watch that and I'm not going to throw rocks at this glass house because, I'm a C++ developer and we've got a few pieces of gnarly code that have a big, long lines.

00:44:03 >> Yeah, for the multiple inheritance, multiple template.

00:44:08 >> Yeah, and also just bad naming sometimes.

00:44:13 And that happens in Java too, you get big long names.

00:44:17 >> Well, the problem is you got to get a name something and then you got to have a factory something.

00:44:22 And you got to have an iFactory interface of that something.

00:44:25 And you got to mock it out.

00:44:27 Anyway, it gets complicated and the names get long, I understand.

00:44:30 >> You have to get a mock factory and a name factory and a factory factory.

00:44:34 >> That's right. If there's not, the audience has identified the coding style here as a pep infinity instead of pep eight.

00:44:44 That's pep infinity code.

00:44:46 >> Pep infinity, yeah.

00:44:47 >> Well, this was infinitely fun.

00:44:49 Thank you, Brian, and thanks everyone for being here.

00:44:51 >> Thank you. I'll talk to you later. Bye.

