
00:00:00.000 --> 00:00:10.900
Hello and welcome to Python bites where we deliver Python news and headlines directly to your earbuds. This is a episode 157 recorded November 14 2019.


00:00:10.900 --> 00:00:15.700
I'm Brian Okken and I'm Michael Kennedy and this episode is brought to you by Digital Ocean.


00:00:15.700 --> 00:00:19.900
So Michael we're gonna cover a topic that we've covered a little bit before.


00:00:19.900 --> 00:00:29.700
I think we covered cerebrus right or Cerberus. Cerberus yeah we covered Cerberus which is like a validation layer for unstructured data.


00:00:29.700 --> 00:00:35.300
So this is as built as part of the Eve framework by Nicola who runs both of those projects.


00:00:35.300 --> 00:00:40.900
And it's really nice, right? So I get like some JSON post back to my rest. It's a rest framework,


00:00:40.900 --> 00:00:46.020
I get a JSON post for some data. I have some models to find it can tell you whether they're


00:00:46.020 --> 00:00:52.500
a fit or not. It can tell you what's required. I do think the way you set it up is a little bit of


00:00:52.500 --> 00:00:57.460
out of band. So Colin Sullivan shot us a note after that said, hey, that's really cool. You


00:00:57.460 --> 00:01:00.060
you should also talk about Pydantic.


00:01:00.060 --> 00:01:01.020
Had you heard of Pydantic?


00:01:01.020 --> 00:01:03.460
- I think so, but yeah, tell me more.


00:01:03.460 --> 00:01:04.780
And it's got a great name.


00:01:04.780 --> 00:01:06.260
- Yeah, it has a great, it definitely has a,


00:01:06.260 --> 00:01:08.260
yeah, yeah, it's got a super name.


00:01:08.260 --> 00:01:09.420
I didn't believe I've heard of it,


00:01:09.420 --> 00:01:10.540
but I didn't do anything with it.


00:01:10.540 --> 00:01:12.920
So on Colin's suggestion, I checked it out,


00:01:12.920 --> 00:01:15.860
and yeah, this is a sweet simple framework


00:01:15.860 --> 00:01:18.020
that solves some really nice problems.


00:01:18.020 --> 00:01:19.420
And a lot of times with these frameworks,


00:01:19.420 --> 00:01:20.920
I'm like, yeah, I would love to use this,


00:01:20.920 --> 00:01:24.300
but at the same time, like, it's not that helpful.


00:01:24.300 --> 00:01:26.340
And so I'm not sure I'm actually gonna use it.


00:01:26.340 --> 00:01:28.100
I could just put a little test in my class


00:01:28.100 --> 00:01:30.940
to make sure this file, like this thing parses an int


00:01:30.940 --> 00:01:33.020
or this name is here or whatever.


00:01:33.020 --> 00:01:34.980
But this one like might convince me to do it


00:01:34.980 --> 00:01:37.300
because yeah, this is super, super cool.


00:01:37.300 --> 00:01:38.180
All right, let me tell you what it is.


00:01:38.180 --> 00:01:40.780
So it's data validations and settings managements


00:01:40.780 --> 00:01:43.640
for using Python type annotations.


00:01:43.640 --> 00:01:44.980
And it's the type annotations


00:01:44.980 --> 00:01:46.500
that make me really extra happy.


00:01:46.500 --> 00:01:47.340
- Oh, really?


00:01:47.340 --> 00:01:48.180
Okay. - Yeah.


00:01:48.180 --> 00:01:49.780
So you know how we've got data classes


00:01:49.780 --> 00:01:54.180
and you can have like annotated values there


00:01:54.180 --> 00:01:55.820
and you get a little validation and whatnot.


00:01:55.820 --> 00:01:57.220
But this is super cool.


00:01:57.220 --> 00:01:59.420
So I can just take a created class


00:01:59.420 --> 00:02:02.660
and say it has things like an ID, which is an integer,


00:02:02.660 --> 00:02:05.860
a name, which equals a default string,


00:02:05.860 --> 00:02:08.940
a date time, which has a default of none,


00:02:08.940 --> 00:02:09.860
things like that, right?


00:02:09.860 --> 00:02:13.300
So you basically, either you have type annotations


00:02:13.300 --> 00:02:15.300
or the thing has a default value,


00:02:15.300 --> 00:02:17.100
which implies the type, okay?


00:02:17.100 --> 00:02:18.580
And this probably represents some data


00:02:18.580 --> 00:02:22.620
that's exchanged over rest or something like that, right?


00:02:22.620 --> 00:02:23.740
Some sort of dictionary.


00:02:23.740 --> 00:02:25.220
So if I get a dictionary back,


00:02:25.220 --> 00:02:30.380
And then what I can do is I can just star star unpack that dictionary into the object,


00:02:30.380 --> 00:02:32.340
the class that I've defined.


00:02:32.340 --> 00:02:36.340
So basically keyword arguments, id equals whatever the value is, name equals whatever


00:02:36.340 --> 00:02:38.620
the name in the dictionary is, and so on.


00:02:38.620 --> 00:02:43.620
And it will validate all that using some really simple rules that you follow along.


00:02:43.620 --> 00:02:48.460
So we've got a class and it has an id, which is an integer, but has no default value, it


00:02:48.460 --> 00:02:49.460
has no none.


00:02:49.460 --> 00:02:53.380
That means the id has to obviously be an integer, but it's also required.


00:02:53.380 --> 00:02:55.540
If it's not there, an error will be raised.


00:02:55.540 --> 00:02:59.140
The name is a string, so it has to be a string, but


00:02:59.140 --> 00:03:02.380
because it has a default value, it's optional to pass it.


00:03:02.380 --> 00:03:03.620
That's cool, right?


00:03:03.620 --> 00:03:08.900
The date time, which is a date time field, is not required


00:03:08.900 --> 00:03:12.460
because it has none as a value, but if nothing's passed, it's just going to be


00:03:12.460 --> 00:03:15.940
none, so it's an optional date time, that's pretty cool.


00:03:15.940 --> 00:03:19.100
So some of the reasons that I think this is cool and they call out in their


00:03:19.100 --> 00:03:23.420
web page is that it works automatically with all the IDEs that you already have.


00:03:23.420 --> 00:03:23.900
Right.


00:03:23.900 --> 00:03:27.540
There's no like special, Oh yeah, there's a YAML file that tells me what


00:03:27.540 --> 00:03:32.100
this schema looks like for this, or there's a JSON schema that comes back


00:03:32.100 --> 00:03:35.340
and like, no, it's standard Python with type annotations.


00:03:35.340 --> 00:03:39.980
So your IDE knows already what all those things are and you don't


00:03:39.980 --> 00:03:41.400
have to like backfill that.


00:03:41.400 --> 00:03:41.680
Right.


00:03:41.680 --> 00:03:44.740
So the, the validation also works for just working with the classes.


00:03:44.740 --> 00:03:45.280
That's pretty cool.


00:03:45.280 --> 00:03:45.500
Right?


00:03:45.500 --> 00:03:45.700
Yeah.


00:03:45.700 --> 00:03:46.100
That's cool.


00:03:46.100 --> 00:03:46.340
Yeah.


00:03:46.340 --> 00:03:49.020
It's supposed to be faster than all the other libraries they tested.


00:03:49.020 --> 00:03:50.780
and they have a link to the ones that they did.


00:03:50.780 --> 00:03:55.300
It also supports really rich recursive validation.


00:03:55.300 --> 00:03:59.660
So if you've got like a list or a tuple


00:03:59.660 --> 00:04:03.300
and maybe like stuff is inside there, right?


00:04:03.300 --> 00:04:04.700
Or something like that, right?


00:04:04.700 --> 00:04:06.980
You've got some nested types.


00:04:06.980 --> 00:04:09.740
So it'll actually recursively traverse the stuff


00:04:09.740 --> 00:04:11.700
that you're looking for, right?


00:04:11.700 --> 00:04:13.980
So it doesn't just test the top level things,


00:04:13.980 --> 00:04:15.700
it tests like the entire object graph.


00:04:15.700 --> 00:04:18.380
And by default, the way it works is you derive


00:04:18.380 --> 00:04:20.280
from the Pydantic base model, which is cool,


00:04:20.280 --> 00:04:23.340
but you can also use a decorator on a data class,


00:04:23.340 --> 00:04:24.460
which we talked about.


00:04:24.460 --> 00:04:26.600
It's very similar 'cause the type annotations,


00:04:26.600 --> 00:04:29.000
and it'll actually put parsing and validation


00:04:29.000 --> 00:04:29.840
on there for you.


00:04:29.840 --> 00:04:30.660
- Oh, that's neat.


00:04:30.660 --> 00:04:31.900
- Yeah, so if you really wanna use data classes,


00:04:31.900 --> 00:04:33.780
you can make them better with Pydantic as well.


00:04:33.780 --> 00:04:35.020
- Okay. - Yeah, simple, right?


00:04:35.020 --> 00:04:36.600
- Yeah, so where do you put it in your,


00:04:36.600 --> 00:04:38.460
so do you get it like when you get data in,


00:04:38.460 --> 00:04:41.040
you validate the data with Pydantic then?


00:04:41.040 --> 00:04:42.860
- That's the thing is you don't even validate it.


00:04:42.860 --> 00:04:43.820
That's what's so sweet about it.


00:04:43.820 --> 00:04:45.160
There's not even a validation step.


00:04:45.160 --> 00:04:47.780
You have the class, and in the notes,


00:04:47.780 --> 00:04:50.780
I'm putting a user class, so I'll maybe reference that.


00:04:50.780 --> 00:04:53.820
And then you get some external data, which is a dictionary.


00:04:53.820 --> 00:04:55.940
And then you just create the user object, say,


00:04:55.940 --> 00:04:59.420
user of star star dictionary, and it'll unpack it keyword-wise.


00:04:59.420 --> 00:05:04.460
The validation happens in the fact that you don't have a dunder init on your class,


00:05:04.460 --> 00:05:07.860
and it derives from the Pythonic base model, so it uses its dunder init,


00:05:07.860 --> 00:05:09.580
which theoretically does the validation.


00:05:09.580 --> 00:05:11.860
>> Okay, so you can't not validate then.


00:05:11.860 --> 00:05:12.980
>> Yes, exactly.


00:05:12.980 --> 00:05:14.980
Yeah, you just basically, I tried to create the class, and


00:05:14.980 --> 00:05:16.820
either that worked really well or not so much.


00:05:16.820 --> 00:05:18.020
- Oh, that's actually pretty cool.


00:05:18.020 --> 00:05:20.060
- And you get like a JSON response of all the things


00:05:20.060 --> 00:05:21.380
that were wrong with the validation


00:05:21.380 --> 00:05:22.920
as part of the exception, I believe.


00:05:22.920 --> 00:05:24.420
So you can actually go,


00:05:24.420 --> 00:05:25.940
no, there's actually three things wrong here,


00:05:25.940 --> 00:05:28.140
not just, well, the first thing it hit made it crash.


00:05:28.140 --> 00:05:30.660
- So this is obviously useful for like REST APIs


00:05:30.660 --> 00:05:33.720
and stuff like that or using, grabbing external data.


00:05:33.720 --> 00:05:36.020
But there's a lot of times where we're passing dictionaries


00:05:36.020 --> 00:05:39.020
around between components and it'd be good to have some,


00:05:39.020 --> 00:05:40.820
if there's less trusted components,


00:05:40.820 --> 00:05:42.620
to have some sort of validation.


00:05:42.620 --> 00:05:43.660
So this is pretty cool.


00:05:43.660 --> 00:05:45.900
- Yeah, even web forms that get posted back,


00:05:45.900 --> 00:05:48.420
a lot of times those come back in Pyramid or Flask


00:05:48.420 --> 00:05:50.260
as dictionaries, right?


00:05:50.260 --> 00:05:52.180
If you wanted to map that to a class, right,


00:05:52.180 --> 00:05:53.060
you could get validation.


00:05:53.060 --> 00:05:54.100
There's a lot of places, yeah.


00:05:54.100 --> 00:05:55.700
- Yeah, cool. - Even settings files, right?


00:05:55.700 --> 00:05:57.540
- Yeah, yeah, there's a lot of people


00:05:57.540 --> 00:06:00.100
that just throw stuff that gets adjacent or something


00:06:00.100 --> 00:06:04.020
that gets thrown in a file, and it's user editable also.


00:06:04.020 --> 00:06:07.140
So you have to validate it


00:06:07.140 --> 00:06:10.260
because who knows what somebody edited it to, so.


00:06:10.260 --> 00:06:11.340
- Yeah, absolutely.


00:06:11.340 --> 00:06:12.300
All right, what you got next for us?


00:06:12.300 --> 00:06:14.980
I am doing, hopefully doing a favor,


00:06:14.980 --> 00:06:17.540
adding work to Ned Batchelder.


00:06:17.540 --> 00:06:20.020
So he posted on Twitter recently


00:06:20.020 --> 00:06:23.780
that there is changes afoot in coverage.py.


00:06:23.780 --> 00:06:26.340
So coverage is, hopefully everybody knows,


00:06:26.340 --> 00:06:28.660
coverage is great for using to tell you


00:06:28.660 --> 00:06:33.180
how much of your code base, your test suites are covering.


00:06:33.180 --> 00:06:34.580
I mean, that's how it's usually used.


00:06:34.580 --> 00:06:36.860
You could potentially do anything


00:06:36.860 --> 00:06:38.020
to try to measure coverage,


00:06:38.020 --> 00:06:40.580
but usually it's around a test suite or something.


00:06:40.580 --> 00:06:44.860
Anyway, so the change is they've added measurement contexts.


00:06:44.860 --> 00:06:49.540
So allowing you, while it's collecting data for coverage,


00:06:49.540 --> 00:06:52.700
it collects what was the context of what it was doing


00:06:52.700 --> 00:06:55.860
while it was covering certain bits of code.


00:06:55.860 --> 00:06:59.460
Now that seems a little, the obvious use model of that,


00:06:59.460 --> 00:07:00.460
there's lots of use models.


00:07:00.460 --> 00:07:04.060
The obvious use model is which test


00:07:04.060 --> 00:07:05.700
covered which line of code.


00:07:05.700 --> 00:07:07.580
And to have that, and that's a lot of data.


00:07:07.580 --> 00:07:10.540
So he's changed the way the data for coverage


00:07:10.540 --> 00:07:13.440
is being stored and it's pretty cool.


00:07:13.440 --> 00:07:15.300
So I'm gonna jump to the conclusion.


00:07:15.300 --> 00:07:18.540
There's this cool feature, the context feature is very cool.


00:07:18.540 --> 00:07:19.420
I wanna talk about that.


00:07:19.420 --> 00:07:22.740
But first of all, it is a little bit of a break


00:07:22.740 --> 00:07:24.540
in the coverage, use of coverage.


00:07:24.540 --> 00:07:27.140
I think the reason is just because there's a,


00:07:27.140 --> 00:07:28.540
the way the data is stored,


00:07:28.540 --> 00:07:30.920
there's a little local database stored.


00:07:30.920 --> 00:07:33.440
So there's another dependency


00:07:33.440 --> 00:07:35.220
that isn't an external dependency.


00:07:35.220 --> 00:07:37.820
It's a built-in dependency,


00:07:37.820 --> 00:07:41.340
but it's something that some versions of Python


00:07:41.340 --> 00:07:43.900
don't always have, I guess.


00:07:43.900 --> 00:07:46.020
So for that reason, he's asking everybody,


00:07:46.020 --> 00:07:50.760
please try out the beta one, coverage 5.0 beta one,


00:07:50.760 --> 00:07:52.820
and try it out and let them know if there's any issues.


00:07:52.820 --> 00:07:55.180
- Right, so basically the idea is go try it,


00:07:55.180 --> 00:07:56.820
see if what you're doing before still works.


00:07:56.820 --> 00:07:58.580
If not, let them know real quick


00:07:58.580 --> 00:07:59.900
before it becomes permanent, right?


00:07:59.900 --> 00:08:01.260
- Right, exactly.


00:08:01.260 --> 00:08:03.340
And I really want this to become permanent


00:08:03.340 --> 00:08:05.820
because measurement context is so cool.


00:08:05.820 --> 00:08:07.460
I tried it out this morning.


00:08:07.460 --> 00:08:08.820
I'm gonna put in show notes,


00:08:08.820 --> 00:08:10.780
I wasn't really clear on how to download,


00:08:10.780 --> 00:08:13.140
how to install a beta version of something.


00:08:13.140 --> 00:08:15.740
So you just do the, like for this,


00:08:15.740 --> 00:08:20.740
it's pip install coverage double equal 5.0 B1.


00:08:20.740 --> 00:08:21.740
- Okay.


00:08:21.740 --> 00:08:22.560
- So we'll put that in the show notes.


00:08:22.560 --> 00:08:24.540
It's not too bad to install it.


00:08:24.540 --> 00:08:26.320
And then also I didn't put this in the show notes,


00:08:26.320 --> 00:08:28.520
but one of the other tricks I found out is


00:08:28.520 --> 00:08:30.580
if you wanna know what versions are available


00:08:30.580 --> 00:08:34.440
to pip install, you can just do the coverage equal equal


00:08:34.440 --> 00:08:36.480
and then don't list a version


00:08:36.480 --> 00:08:38.700
and you'll get an error message that says,


00:08:38.700 --> 00:08:39.780
I don't know what you're talking about,


00:08:39.780 --> 00:08:42.120
but here's all of the versions that are available.


00:08:42.120 --> 00:08:43.560
- That's pretty awesome, I didn't know that.


00:08:43.560 --> 00:08:44.820
- Yeah, that's pretty cool.


00:08:44.820 --> 00:08:47.200
So I traded out a few lines of code to,


00:08:47.200 --> 00:08:48.820
or a few lines of command line stuff


00:08:48.820 --> 00:08:51.300
to run coverage on a little dummy file.


00:08:51.300 --> 00:08:54.820
And sure enough, if I generate the HTML report,


00:08:54.820 --> 00:08:56.560
on the right-hand side of the window,


00:08:56.560 --> 00:08:58.600
or the screen, I've got little drop-downs


00:08:58.600 --> 00:09:01.040
on every line of code to tell me


00:09:01.040 --> 00:09:03.880
which test covered which line of code.


00:09:03.880 --> 00:09:05.160
- I like that a lot, that's cool.


00:09:05.160 --> 00:09:06.180
Yeah, that's great. - Very neat.


00:09:06.180 --> 00:09:07.220
- Yeah, super nice.


00:09:07.220 --> 00:09:08.060
I look forward to it.


00:09:08.060 --> 00:09:10.740
- Okay, I don't know why I think this is funny.


00:09:10.740 --> 00:09:11.980
My brain's just not working, man.


00:09:11.980 --> 00:09:12.860
Will you do the ad read?


00:09:12.860 --> 00:09:13.700
- Got it.


00:09:13.700 --> 00:09:16.220
Now, this episode is brought to us by DigitalOcean,


00:09:16.220 --> 00:09:18.980
and I just want to tell you about something brand new


00:09:18.980 --> 00:09:22.940
that's gone from beta to general availability,


00:09:22.940 --> 00:09:25.100
memory-optimized droplets.


00:09:25.100 --> 00:09:27.980
Droplets are DigitalOcean's words for virtual machines,


00:09:27.980 --> 00:09:28.820
right?


00:09:28.820 --> 00:09:30.580
Goes to cloud, cloud's full of rain,


00:09:30.580 --> 00:09:32.420
rain droplets, that sort of thing.


00:09:32.420 --> 00:09:34.660
And if you have some sort of workload


00:09:34.660 --> 00:09:36.520
that requires a lot of memory,


00:09:36.520 --> 00:09:38.860
well, then these things are like super optimized that.


00:09:38.860 --> 00:09:43.740
So it has eight gigs of RAM for each dedicated virtual CPU.


00:09:43.740 --> 00:09:47.260
You can get them with two or many, many more, right?


00:09:47.260 --> 00:09:48.500
Multi-core systems.


00:09:48.500 --> 00:09:52.700
So basically you can go all the way from 16 gigs


00:09:52.700 --> 00:09:55.580
to 256 gigs of RAM,


00:09:55.580 --> 00:09:58.320
which is like a ridiculous amount of RAM.


00:09:58.320 --> 00:10:00.120
One thing you do to make your app run faster


00:10:00.120 --> 00:10:02.720
is to make sure like it never touches the disk, right?


00:10:02.720 --> 00:10:05.560
So Vic could just cache everything, that would be great.


00:10:05.560 --> 00:10:08.640
So they're really good for things like high performance SQL


00:10:08.640 --> 00:10:12.920
or NoSQL databases, large memory caches and indices,


00:10:12.920 --> 00:10:14.480
indexes, things like that.


00:10:14.480 --> 00:10:16.720
And just lots of big data and stuff running


00:10:16.720 --> 00:10:18.080
like with large runtime requirements.


00:10:18.080 --> 00:10:22.280
So you need between 16 to 256 gigs of RAM


00:10:22.280 --> 00:10:26.560
and you want to just pay mostly for the memory, right?


00:10:26.560 --> 00:10:28.780
The pricing's optimized around that use case,


00:10:28.780 --> 00:10:32.940
then check them out at pythonbytes.fm/digitalocean.


00:10:32.940 --> 00:10:34.460
They're a big supporter of the show.


00:10:34.460 --> 00:10:37.620
Speaking of cool stuff, the PSF


00:10:37.620 --> 00:10:40.060
and the Python Software Foundation


00:10:40.060 --> 00:10:42.220
Packaging Working Group, actually,


00:10:42.220 --> 00:10:45.980
that group of the PSF, they're looking to hire some folks.


00:10:45.980 --> 00:10:48.840
They're looking for, I think, three developers


00:10:48.840 --> 00:10:50.320
and maybe a project manager.


00:10:50.320 --> 00:10:52.040
I can't remember exactly all the details,


00:10:52.040 --> 00:10:55.700
but quite a few number of people to make pip better.


00:10:55.700 --> 00:10:57.060
Like you just said, if you said,


00:10:57.060 --> 00:11:00.500
pip install coverage double equals, it'll help you, right?


00:11:00.500 --> 00:11:04.180
So this is supposed to be a much better setup.


00:11:04.180 --> 00:11:07.260
So the idea is that one of the things


00:11:07.260 --> 00:11:12.260
that could be improved in pip is its dependency resolver.


00:11:12.260 --> 00:11:15.020
So it's, this package depends on this thing,


00:11:15.020 --> 00:11:17.060
but other package also maybe depends on that,


00:11:17.060 --> 00:11:19.260
but a different version, or I don't know


00:11:19.260 --> 00:11:20.580
how often it's happened to you,


00:11:20.580 --> 00:11:23.580
but I've had the order in which I list stuff


00:11:23.580 --> 00:11:25.900
in the requirements causing issues


00:11:25.900 --> 00:11:28.440
because one requires, I don't know,


00:11:28.440 --> 00:11:30.000
doc opt of this version,


00:11:30.000 --> 00:11:32.020
the other one requires doc opt of another version,


00:11:32.020 --> 00:11:34.260
and how can you possibly install them both


00:11:34.260 --> 00:11:35.340
at the same time, right?


00:11:35.340 --> 00:11:36.300
Weird stuff like that.


00:11:36.300 --> 00:11:38.120
- Poetry has noticed this problem,


00:11:38.120 --> 00:11:40.460
and it has a solution to it,


00:11:40.460 --> 00:11:41.700
but it's around poetry,


00:11:41.700 --> 00:11:44.020
and it'd be really cool if that sort of


00:11:44.020 --> 00:11:46.820
dependency resolution was built in to pip.


00:11:46.820 --> 00:11:47.660
That would be great.


00:11:47.660 --> 00:11:49.100
- Yeah, the underlying idea is to make


00:11:49.100 --> 00:11:51.940
distributing and installing Python software


00:11:51.940 --> 00:11:54.180
just more reliable and easier.


00:11:54.180 --> 00:11:57.740
So funding has been allocated to two contractors,


00:11:57.740 --> 00:12:01.300
a senior developer and an intermediate developer,


00:12:01.300 --> 00:12:02.180
that's what it is,


00:12:02.180 --> 00:12:05.900
to work on developing, testing, and building this feature,


00:12:05.900 --> 00:12:08.180
the test infrastructure, code review, bug triage,


00:12:08.180 --> 00:12:09.560
all that kind of stuff.


00:12:09.560 --> 00:12:12.160
And this is a non-trivial offering.


00:12:12.160 --> 00:12:15.240
So I believe the senior developer


00:12:15.240 --> 00:12:18.980
will end up getting $116,000 out of this


00:12:18.980 --> 00:12:21.360
based on the time they're estimating and the rate.


00:12:21.360 --> 00:12:23.580
And then the either senior developer


00:12:23.580 --> 00:12:27.220
or the contractors, I can't remember, get 103,000 each.


00:12:27.220 --> 00:12:28.700
This is quite significant.


00:12:28.700 --> 00:12:29.540
- Yeah, not too shabby.


00:12:29.540 --> 00:12:31.460
- Yeah, that's like a, not just a,


00:12:31.460 --> 00:12:33.540
"Hey, I need somebody to work on this for a couple weeks."


00:12:33.540 --> 00:12:34.660
That's like a legit thing.


00:12:34.660 --> 00:12:37.660
So if you'd like to contribute to Python, work on PIP,


00:12:37.660 --> 00:12:39.980
things like that, just go check out this link.


00:12:39.980 --> 00:12:41.140
It shows you how to apply.


00:12:41.140 --> 00:12:41.960
- Very cool.


00:12:41.960 --> 00:12:44.580
- Yeah, so when I work on pandas, Brian,


00:12:44.580 --> 00:12:46.300
I kind of feel a little bit lost.


00:12:46.300 --> 00:12:47.660
There's all these operations,


00:12:47.660 --> 00:12:48.980
and I don't use pandas enough


00:12:48.980 --> 00:12:51.140
to kind of actually know what I should be doing.


00:12:51.140 --> 00:12:53.380
Often it's in the context of Jupyter Notebooks


00:12:53.380 --> 00:12:55.240
where the autocomplete slightly less good


00:12:55.240 --> 00:12:57.380
than PyCharm or VS Code.


00:12:57.380 --> 00:12:59.300
I could always use some help when I'm working on pandas.


00:12:59.300 --> 00:13:00.140
How about you?


00:13:00.140 --> 00:13:01.100
- Yeah, I could.


00:13:01.100 --> 00:13:01.940
I know people that,


00:13:01.940 --> 00:13:03.860
there's a lot of people that work in it all the time,


00:13:03.860 --> 00:13:07.140
but I usually just jump in for some particular use.


00:13:07.140 --> 00:13:10.820
And I know I don't know the best way to do things.


00:13:10.820 --> 00:13:13.140
There's a thing called the Dove Panda.


00:13:13.140 --> 00:13:16.120
I think I'm saying that right, D-O-V Panda.


00:13:16.120 --> 00:13:20.840
And this was submitted by Dean Langstrom, Langsom, sorry.


00:13:20.840 --> 00:13:22.540
I think that it's his project.


00:13:22.540 --> 00:13:25.960
But essentially it's a overlay on,


00:13:25.960 --> 00:13:27.260
I'm just gonna read his thing.


00:13:27.260 --> 00:13:30.820
It says directions, so DovePanda has directions


00:13:30.820 --> 00:13:34.060
and are hints and tips for using pandas


00:13:34.060 --> 00:13:36.500
in an analysis environment.


00:13:36.500 --> 00:13:39.420
DovePanda is an overlay for working with pandas.


00:13:39.420 --> 00:13:44.060
And so the idea is like if you have this installed also,


00:13:44.060 --> 00:13:45.940
you're working in a Jupyter notebook


00:13:45.940 --> 00:13:47.440
and you start typing stuff,


00:13:47.440 --> 00:13:49.820
you start doing pandas operations,


00:13:49.820 --> 00:13:53.200
It looks at what you did and provides hints


00:13:53.200 --> 00:13:56.140
and it pops up in little windows in your notebook


00:13:56.140 --> 00:13:58.820
to give you hints on, I think you're doing this,


00:13:58.820 --> 00:14:01.940
but there's a better way to do it, or giving you tips.


00:14:01.940 --> 00:14:05.980
- So it's like Clippy for pandas in Jupyter.


00:14:05.980 --> 00:14:08.740
- Yeah, but it's definitely, it's sort of,


00:14:08.740 --> 00:14:13.340
but instead of having just one Clippy that pops down,


00:14:13.340 --> 00:14:15.100
they're in your notebook so you don't have to deal


00:14:15.100 --> 00:14:17.300
with them right away, but you can go back


00:14:17.300 --> 00:14:20.940
and improve your use of pandas within the notebook.


00:14:20.940 --> 00:14:21.780
It's pretty cool.


00:14:21.780 --> 00:14:23.740
- Yeah, it actually looks really helpful.


00:14:23.740 --> 00:14:25.100
So the example they have,


00:14:25.100 --> 00:14:27.100
they've got a bunch of pictures on the GitHub repo


00:14:27.100 --> 00:14:28.820
you can check out.


00:14:28.820 --> 00:14:29.960
But like for example,


00:14:29.960 --> 00:14:32.500
there's one where someone's calling pd.concat


00:14:32.500 --> 00:14:33.700
and taking two data frames


00:14:33.700 --> 00:14:36.140
and specifying the axis equals one.


00:14:36.140 --> 00:14:39.460
And then the little panda pops up and says,


00:14:39.460 --> 00:14:41.100
"All data frames have the same columns,"


00:14:41.100 --> 00:14:45.100
which hints for concat on axis zero.


00:14:45.100 --> 00:14:46.460
You specified axis one,


00:14:46.460 --> 00:14:48.260
which may result in unwanted behavior


00:14:48.260 --> 00:14:49.660
and it'll show you the code.


00:14:49.660 --> 00:14:51.620
Or after concatenation, you're gonna have


00:14:51.620 --> 00:14:54.380
duplicate column names, pay attention,


00:14:54.380 --> 00:14:55.300
and things like that.


00:14:55.300 --> 00:14:57.660
It's got a bunch of great little tricks.


00:14:57.660 --> 00:14:59.660
And then, you know how you had mentioned


00:14:59.660 --> 00:15:03.460
Kevin Markham from dataskool.io and his tips?


00:15:03.460 --> 00:15:05.220
You can type dovepanda.tip


00:15:05.220 --> 00:15:07.340
and it'll pull up a Kevin Markham tweet.


00:15:07.340 --> 00:15:08.540
- That's pretty cool.


00:15:08.540 --> 00:15:10.020
- Like inside your notebook,


00:15:10.020 --> 00:15:11.820
it'll pull up like some random tip.


00:15:11.820 --> 00:15:12.660
- Yeah, that's pretty cool.


00:15:12.660 --> 00:15:13.500
- Yeah. - Circle there.


00:15:13.500 --> 00:15:14.820
- And if you, like, you can use it,


00:15:14.820 --> 00:15:16.100
apparently you can use it,


00:15:16.100 --> 00:15:18.020
not even just in notebooks.


00:15:18.020 --> 00:15:19.660
So there's a command line mode


00:15:19.660 --> 00:15:21.820
where you can set the output to be,


00:15:21.820 --> 00:15:24.100
you know, there's no inline output to go to,


00:15:24.100 --> 00:15:26.060
so you can tell it to print the output


00:15:26.060 --> 00:15:28.740
to just standard out or to a display


00:15:28.740 --> 00:15:30.860
or to somewhere else.


00:15:30.860 --> 00:15:31.700
That's nice.


00:15:31.700 --> 00:15:33.820
So if you're using, you wanna have these sort of tips,


00:15:33.820 --> 00:15:35.500
but you're not using notebooks,


00:15:35.500 --> 00:15:36.620
you can still get them.


00:15:36.620 --> 00:15:37.580
So. - Yeah.


00:15:37.580 --> 00:15:38.460
Very cool.


00:15:38.460 --> 00:15:40.260
This next one is really simple,


00:15:40.260 --> 00:15:43.660
but I think some folks will find it super useful.


00:15:43.660 --> 00:15:45.500
You know, maybe you've picked up that project


00:15:45.500 --> 00:15:48.340
from someone else at work,


00:15:48.340 --> 00:15:51.300
and they're not following all the best Python practices.


00:15:51.300 --> 00:15:54.860
You see a bunch of import stars all over the place.


00:15:54.860 --> 00:15:56.460
And you're like, man,


00:15:56.460 --> 00:15:57.700
didn't somebody tell these people


00:15:57.700 --> 00:16:00.340
that import star is not worth it, right?


00:16:00.340 --> 00:16:02.900
That there's all these potential drawbacks.


00:16:02.900 --> 00:16:05.620
So enter remove star.


00:16:05.620 --> 00:16:08.820
Remove star is a command line app you can run


00:16:08.820 --> 00:16:10.580
or command you can run.


00:16:10.580 --> 00:16:14.340
And you point it at either a module, a file, a directory,


00:16:14.340 --> 00:16:15.160
something like that.


00:16:15.160 --> 00:16:19.920
it will go through and by default it'll just find the issues where import star is done


00:16:19.920 --> 00:16:25.380
and then it will look at the actual files and say well you said import star but you're


00:16:25.380 --> 00:16:31.760
actually just you know like from collections import star maybe you're actually just using


00:16:31.760 --> 00:16:36.520
named collections and counter or something like that yeah maybe that's it or tools anyway


00:16:36.520 --> 00:16:40.360
you're just using one or two things and it'll say you know what you could replace that line


00:16:40.360 --> 00:16:44.360
with from collections import name tuple.


00:16:44.360 --> 00:16:45.360
Right?


00:16:45.360 --> 00:16:48.920
And it could just adjust that or you could actually give it a command to say, no, just


00:16:48.920 --> 00:16:49.920
change all my files.


00:16:49.920 --> 00:16:50.920
Fix it.


00:16:50.920 --> 00:16:51.920
Yeah.


00:16:51.920 --> 00:16:52.920
This is very cool.


00:16:52.920 --> 00:16:53.920
Yeah, it's great.


00:16:53.920 --> 00:16:56.000
So it's not that it just says import star is bad.


00:16:56.000 --> 00:17:00.120
It actually figures out what of that star is being used and what you should actually


00:17:00.120 --> 00:17:01.360
write and then we'll write it for you.


00:17:01.360 --> 00:17:02.360
Yeah.


00:17:02.360 --> 00:17:07.000
So my normal operation when I see something like this is just to comment out the import


00:17:07.000 --> 00:17:10.000
statement and see what breaks.


00:17:10.000 --> 00:17:12.360
that's not the best way to do things.


00:17:12.360 --> 00:17:13.720
So this is way better.


00:17:13.720 --> 00:17:14.560
I like it.


00:17:14.560 --> 00:17:15.380
- Yeah, yeah.


00:17:15.380 --> 00:17:16.520
It reminds me a little bit of Flint,


00:17:16.520 --> 00:17:20.560
F-L-Y-N-T, which will take all your strings


00:17:20.560 --> 00:17:21.760
and rewrite them as f-strings.


00:17:21.760 --> 00:17:23.200
This will take all your import stars


00:17:23.200 --> 00:17:25.840
and rewrite them as proper specific imports.


00:17:25.840 --> 00:17:28.080
- OMG, I totally forgot about Flint.


00:17:28.080 --> 00:17:32.960
We've got a whole bunch of code that we wrote for 3.5


00:17:32.960 --> 00:17:35.260
that still has all the old stuff in it.


00:17:35.260 --> 00:17:36.480
So yeah, I gotta use that.


00:17:36.480 --> 00:17:38.140
- Well, it's about to get a whole lot better.


00:17:38.140 --> 00:17:38.980
Hit it with Flint.


00:17:38.980 --> 00:17:39.800
It's so good.


00:17:39.800 --> 00:17:40.980
- Yeah, definitely.


00:17:40.980 --> 00:17:42.340
- Awesome, all right, well, that's it.


00:17:42.340 --> 00:17:43.820
Remove stars, not a whole lot to it.


00:17:43.820 --> 00:17:46.320
It's just a great little command line tool


00:17:46.320 --> 00:17:47.940
you can use to make your Python code better.


00:17:47.940 --> 00:17:50.520
- Yeah, so the last thing I wanna talk about today,


00:17:50.520 --> 00:17:53.540
actually, oddly enough, we didn't plan this,


00:17:53.540 --> 00:17:56.020
is another, it came from Brian Rutledge too.


00:17:56.020 --> 00:17:59.460
So the PSF thing that we talked about,


00:17:59.460 --> 00:18:01.700
the hiring developers came from him too.


00:18:01.700 --> 00:18:03.420
So we've got two stories from Brian.


00:18:03.420 --> 00:18:05.300
So thanks, Brian, for helping us out.


00:18:05.300 --> 00:18:06.900
- Yeah, absolutely, thanks, Brian.


00:18:06.900 --> 00:18:07.740
Double thanks.


00:18:07.740 --> 00:18:13.700
Also, one of the things that Brian's working on is a pytest plugin called pytest Quarantine.


00:18:13.700 --> 00:18:14.700
This is so cool.


00:18:14.700 --> 00:18:18.940
Hopefully, all your tests pass, but let's say you've got a, you just implemented, you


00:18:18.940 --> 00:18:24.820
got really fantastic, you got into testing and you started it right in a bunch of tests


00:18:24.820 --> 00:18:28.100
and you put it on a code base and you got a bunch of failures.


00:18:28.100 --> 00:18:31.060
You know you're going to fix them, but you're not going to fix them right away.


00:18:31.060 --> 00:18:32.300
So what do you do?


00:18:32.300 --> 00:18:35.140
And the idea with pytest Quarantine is it saves a list.


00:18:35.140 --> 00:18:38.140
So you run it once and you tell it to save a list


00:18:38.140 --> 00:18:39.640
of all the failing tests.


00:18:39.640 --> 00:18:41.460
And it saves it somewhere and you can throw it


00:18:41.460 --> 00:18:44.940
in Git or something, store it.


00:18:44.940 --> 00:18:49.040
And then you run it again with that test or that list,


00:18:49.040 --> 00:18:51.780
and it automatically marks all of the tests


00:18:51.780 --> 00:18:55.220
that have failed in the past as X fails.


00:18:55.220 --> 00:18:58.220
Now this is something you can do manually to say,


00:18:58.220 --> 00:19:01.380
I know this is gonna fail, just run it as an X fail


00:19:01.380 --> 00:19:04.300
instead of, it separates it from a failure.


00:19:04.300 --> 00:19:07.980
know there's arguments of whether that's a good or bad but it's very useful so


00:19:07.980 --> 00:19:11.940
that you can still use your suite to find new failures while you're working


00:19:11.940 --> 00:19:16.740
on the old ones. Anyway this is a nice little extra tool I think it's super


00:19:16.740 --> 00:19:20.220
cool. I also wanted to bring this up because he sent me this really nice


00:19:20.220 --> 00:19:26.460
email. So apparently I met Brian a couple times at PyCon in Cleveland and he said


00:19:26.460 --> 00:19:32.140
he was a started out as a complete pytest newbie and bought my book, started


00:19:32.140 --> 00:19:37.380
working through it, loved pytest, and then helped his company to adopt pytest


00:19:37.380 --> 00:19:42.100
and then wrote this plugin and he wrote it at work and convinced his company to


00:19:42.100 --> 00:19:46.740
be able to release it as open source. So that's super cool. Yeah that's really


00:19:46.740 --> 00:19:50.860
great. Yeah good work Brian. This sounds like super useful. You know you've got to


00:19:50.860 --> 00:19:55.180
make some huge change if it breaks 50 tests. You can't start solving all 50 at


00:19:55.180 --> 00:19:59.500
once right? You got to like chop your way out of them. So yeah. Chip away at it. Yeah exactly.


00:19:59.500 --> 00:20:03.660
quarantine them and then just you know take them one at a time. So yeah I like


00:20:03.660 --> 00:20:07.420
it I mean there are ways in which you can deal with this like in PyCharm you


00:20:07.420 --> 00:20:13.460
could say run only this test or run certain ones but you know like it


00:20:13.460 --> 00:20:16.140
doesn't help you on continuous integration or something like that right


00:20:16.140 --> 00:20:19.420
so yeah I think this is great. And one of the things I wanted to bring up also is


00:20:19.420 --> 00:20:23.660
I've dealt with this in the past on a temporary basis of course where you've


00:20:23.660 --> 00:20:27.900
got for some reason a breaking change that fails some things you're working


00:20:27.900 --> 00:20:33.140
through them and we have occasionally if there's like a known failure that the


00:20:33.140 --> 00:20:36.660
fix is scheduled right it's a we know about it we're gonna fix it but it's not


00:20:36.660 --> 00:20:40.780
going to be fixed for like three weeks but you can add X fail to the test


00:20:40.780 --> 00:20:45.700
itself but one of the issues with that is you're to add the X fail mark you


00:20:45.700 --> 00:20:49.180
edit the test file so one of the benefits of this is you're not actually


00:20:49.180 --> 00:20:53.580
editing the test file you're editing a different file that marks those so


00:20:53.580 --> 00:20:56.620
that's kind of right you don't want those changes to show up and get saying


00:20:56.620 --> 00:20:58.300
well, we made all these changes to these tests,


00:20:58.300 --> 00:21:00.660
but actually, no, we're just trying to fix something else


00:21:00.660 --> 00:21:01.500
and get them out of our way.


00:21:01.500 --> 00:21:02.540
Yeah, I like it.


00:21:02.540 --> 00:21:03.900
All right, well, that's it for all of our main items.


00:21:03.900 --> 00:21:05.540
Brian, you got anything extra you wanna throw out there?


00:21:05.540 --> 00:21:07.240
- I do not.


00:21:07.240 --> 00:21:08.080
How about you?


00:21:08.080 --> 00:21:09.300
- I've got some pretty cool news.


00:21:09.300 --> 00:21:12.580
So I recently decided to go through the effort


00:21:12.580 --> 00:21:17.260
of figuring out how much energy all of our services


00:21:17.260 --> 00:21:18.580
and servers use, right?


00:21:18.580 --> 00:21:22.060
So for like delivering Python bytes and Talk Python


00:21:22.060 --> 00:21:24.340
and Talk Python Training courses and all that stuff.


00:21:24.340 --> 00:21:28.620
And I figured out how much that was and went out and bought


00:21:28.620 --> 00:21:31.060
renewable energy credits to offset all the carbon


00:21:31.060 --> 00:21:32.180
from all of our infrastructure.


00:21:32.180 --> 00:21:33.260
- Wow, that's neat.


00:21:33.260 --> 00:21:34.100
- Yeah, yeah, yeah.


00:21:34.100 --> 00:21:36.540
So I'm gonna keep doing that going forward.


00:21:36.540 --> 00:21:41.300
So not a huge, huge amount, but it's, you know,


00:21:41.300 --> 00:21:43.620
I think a good signal for all the other companies


00:21:43.620 --> 00:21:46.900
out there as well to say, look, if this podcast


00:21:46.900 --> 00:21:48.980
or these podcasts can be carbon neutral


00:21:48.980 --> 00:21:50.980
for their server infrastructure, why can't we, right?


00:21:50.980 --> 00:21:51.820
- Yeah. - Yeah, cool.


00:21:51.820 --> 00:21:54.160
So anyway, small, but hopefully can trigger


00:21:54.160 --> 00:21:58.680
some good change. Are you ready for a joke? I am so ready for a joke. I need it


00:21:58.680 --> 00:22:04.100
this week. Well it's it's more science than it is programming but I think our


00:22:04.100 --> 00:22:09.120
audience will generally generally like it. So I'm gonna tell the joke and then


00:22:09.120 --> 00:22:13.040
explain the joke because I'm not sure everyone will know but I think a lot of


00:22:13.040 --> 00:22:15.840
us will get it. And jokes are so much more funny if you explain them all. I know


00:22:15.840 --> 00:22:22.120
absolutely they are. So imagine a time not too long ago Dr. Heisenberg from


00:22:22.120 --> 00:22:27.060
Quantum Mechanics fame. He's driving down the highway and he gets pulled over for


00:22:27.060 --> 00:22:31.960
speeding. The policeman comes over, the officer says, "Excuse me sir, do you know


00:22:31.960 --> 00:22:35.980
how fast you were going?" Heisenberg pauses for a moment and then answers, "No,


00:22:35.980 --> 00:22:42.900
but I do know where I am." - I love that. That's so funny. - Yeah, so the


00:22:42.900 --> 00:22:47.180
Heisenberg uncertainty principle basically says that the position and


00:22:47.180 --> 00:22:51.280
velocity of an object cannot both be measured exactly at the same time, not


00:22:51.280 --> 00:22:52.440
not even theoretically.


00:22:52.440 --> 00:22:54.160
You can know one or the other, but not both.


00:22:54.160 --> 00:22:55.760
So yeah, he knows where he is.


00:22:55.760 --> 00:22:57.080
- Oh yeah, funny.


00:22:57.080 --> 00:22:57.920
- Pretty good.


00:22:57.920 --> 00:22:59.400
All right, well, thanks for being here.


00:22:59.400 --> 00:23:00.600
- Super cool, thanks. - Good to be back together


00:23:00.600 --> 00:23:03.240
after taking off and hiding in Florida for a while.


00:23:03.240 --> 00:23:04.920
Now we're back on the usual track.


00:23:04.920 --> 00:23:05.760
- Yeah. - Yeah.


00:23:05.760 --> 00:23:06.580
All right, have a good one.


00:23:06.580 --> 00:23:07.420
- You too, bye. - Bye.


00:23:07.420 --> 00:23:09.000
- Thank you for listening to Python Bytes.


00:23:09.000 --> 00:23:11.480
Follow the show on Twitter @pythonbytes.


00:23:11.480 --> 00:23:14.560
That's Python Bytes as in B-Y-T-E-S.


00:23:14.560 --> 00:23:17.440
And get the full show notes at pythonbytes.fm.


00:23:17.440 --> 00:23:19.640
If you have a news item you want featured,


00:23:19.640 --> 00:23:24.280
visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool.


00:23:24.280 --> 00:23:27.480
This is Brian Okken, and on behalf of myself and Michael Kennedy,


00:23:27.480 --> 00:23:31.640
thank you for listening and sharing this podcast with your friends and colleagues.

