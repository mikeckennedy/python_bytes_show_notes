WEBVTT

00:00:00.001 --> 00:00:05.240
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.240 --> 00:00:10.540
This is episode 157, recorded November 14, 2019.

00:00:10.540 --> 00:00:11.800
I'm Brian Okken.

00:00:11.800 --> 00:00:12.680
And I'm Michael Kennedy.

00:00:12.680 --> 00:00:15.500
And this episode is brought to you by DigitalOcean.

00:00:15.500 --> 00:00:20.580
So, Michael, we're going to cover a topic that we've covered a little bit before, I think.

00:00:20.580 --> 00:00:22.840
We covered Cerebrus, right? Or Cerberus?

00:00:22.840 --> 00:00:29.440
Cerberus. Yeah, we covered Cerberus, which is like a validation layer for unstructured data.

00:00:29.640 --> 00:00:35.160
So, this is as built as part of the Eve framework by Nicola, who runs both of those projects.

00:00:35.160 --> 00:00:36.660
And it's really nice, right?

00:00:36.660 --> 00:00:39.800
So, I get like some JSON posts back to my REST.

00:00:39.800 --> 00:00:40.720
It's a REST framework.

00:00:40.720 --> 00:00:42.880
I get a JSON post for some data.

00:00:42.880 --> 00:00:44.440
And I have some models to find.

00:00:44.440 --> 00:00:47.140
It can tell you whether they're a fit or not.

00:00:47.140 --> 00:00:49.200
It can tell you what's required.

00:00:49.200 --> 00:00:53.220
I do think the way you set it up is a little bit of out of band.

00:00:53.220 --> 00:00:56.340
So, Colin Sullivan shot us a note after that.

00:00:56.340 --> 00:00:57.320
Said, hey, that's really cool.

00:00:57.320 --> 00:00:59.500
You should also talk about Pydantic.

00:01:00.000 --> 00:01:00.740
Had you heard of Pydantic?

00:01:00.740 --> 00:01:01.700
I think so.

00:01:01.700 --> 00:01:02.680
But, yeah.

00:01:02.680 --> 00:01:03.360
Tell me more.

00:01:03.360 --> 00:01:04.460
And it's got a great name.

00:01:04.460 --> 00:01:06.180
Yeah, it definitely has it.

00:01:06.180 --> 00:01:06.660
Yeah, yeah.

00:01:06.660 --> 00:01:07.420
It's got a super name.

00:01:07.420 --> 00:01:10.440
I believe I've heard of it, but I didn't do anything with it.

00:01:10.440 --> 00:01:12.820
So, on Colin's suggestion, I checked it out.

00:01:12.820 --> 00:01:17.280
And, yeah, this is a sweet, simple framework that solves some really nice problems.

00:01:17.940 --> 00:01:20.840
And a lot of times with these frameworks, I'm like, yeah, I would love to use this.

00:01:20.840 --> 00:01:24.100
But at the same time, like, it's not that helpful.

00:01:24.100 --> 00:01:26.280
And so, I'm not sure I'm actually going to use it.

00:01:26.280 --> 00:01:32.440
I could just put a little test in my class to make sure this file, like, this thing parses an int or this name is here or whatever.

00:01:32.940 --> 00:01:36.860
But this one, like, might convince me to do it because, yeah, this is super, super cool.

00:01:36.860 --> 00:01:37.480
All right.

00:01:37.480 --> 00:01:38.160
Let me tell you what it is.

00:01:38.160 --> 00:01:43.360
So, it's data validations and settings managements for using Python type annotations.

00:01:43.360 --> 00:01:46.340
And it's the type annotations that make me really extra happy.

00:01:46.480 --> 00:01:46.760
Oh, really?

00:01:46.760 --> 00:01:47.200
Okay.

00:01:47.200 --> 00:01:47.560
Yeah.

00:01:47.560 --> 00:01:55.600
So, you know how we've got data classes and you can have, like, annotated values there and you get a little validation and whatnot.

00:01:55.600 --> 00:01:57.160
But this is super cool.

00:01:57.160 --> 00:02:09.620
So, I can just take a create class and say it has things like an ID, which is integer, a name, which equals a default string, a date time, which has a default of none, things like that.

00:02:09.620 --> 00:02:09.800
Right.

00:02:09.800 --> 00:02:16.440
So, you basically, either you have type annotations or the thing has a default value, which implies the type.

00:02:16.440 --> 00:02:16.700
Okay.

00:02:16.700 --> 00:02:17.040
Yeah.

00:02:17.040 --> 00:02:22.240
And this probably represents some data that's exchanged over REST or something like that.

00:02:22.240 --> 00:02:22.520
Right.

00:02:22.520 --> 00:02:23.500
Some sort of dictionary.

00:02:23.500 --> 00:02:31.560
So, if I get a dictionary back, then what I can do is I can just star, star, unpack that dictionary into the object, the class that I've defined.

00:02:31.560 --> 00:02:32.180
Right.

00:02:32.180 --> 00:02:38.420
So, basically, keyword arguments, ID equals whatever the value is, name equals whatever the name and the dictionary is and so on.

00:02:38.860 --> 00:02:43.500
And it will validate all that using some really simple rules that you follow along.

00:02:43.500 --> 00:02:48.320
So, we've got a class and it has an ID, which is an integer, but has no default value.

00:02:48.320 --> 00:02:49.000
It has no none.

00:02:49.000 --> 00:02:52.980
That means the ID has to obviously be an integer, but it's also required.

00:02:52.980 --> 00:02:55.160
If it's not there, an error will be raised.

00:02:55.160 --> 00:02:58.520
The name is a string, so it has to be a string.

00:02:58.520 --> 00:03:01.460
But because it has a default value, it's optional to pass it.

00:03:01.460 --> 00:03:02.380
Oh, okay.

00:03:02.380 --> 00:03:03.020
That's cool, right?

00:03:03.460 --> 00:03:10.980
The date time, which is a date time field, is not required because it has none as a value.

00:03:10.980 --> 00:03:12.680
But if nothing's passed, it's just going to be none.

00:03:12.680 --> 00:03:14.900
So, it's an optional date time.

00:03:14.900 --> 00:03:15.440
That's pretty cool.

00:03:15.900 --> 00:03:23.380
So, some of the reasons that I think this is cool and they call out in their webpage is that it works automatically with all the IDEs that you already have.

00:03:23.380 --> 00:03:23.880
Right?

00:03:23.880 --> 00:03:29.400
There's no, like, special, oh, yeah, there's a YAML file that tells me what this schema looks like for this.

00:03:29.400 --> 00:03:35.200
Or there's a JSON schema that comes back and, like, no, it's standard Python with type annotations.

00:03:35.740 --> 00:03:41.640
So, your IDE knows already what all those things are and you don't have to, like, backfill that, right?

00:03:41.640 --> 00:03:44.640
So, the validation also works for just working with the classes.

00:03:44.640 --> 00:03:45.460
That's pretty cool, right?

00:03:45.460 --> 00:03:46.100
Yeah, that's cool.

00:03:46.100 --> 00:03:50.440
Yeah, it's supposed to be faster than all the other libraries they tested and they have a link to the ones that they did.

00:03:50.440 --> 00:03:54.540
It also supports really rich recursive validation.

00:03:55.240 --> 00:04:03.180
So, if you've got, like, a list or a tuple and maybe, like, stuff is inside there, right?

00:04:03.180 --> 00:04:04.640
Or something like that, right?

00:04:04.640 --> 00:04:06.480
You've got some nested types.

00:04:06.480 --> 00:04:11.600
So, it'll actually recursively traverse the stuff that you're looking for, right?

00:04:11.600 --> 00:04:13.860
So, it doesn't just test the top-level things.

00:04:13.860 --> 00:04:15.320
It tests, like, the entire object graph.

00:04:15.320 --> 00:04:20.180
And by default, the way it works is you derive from the Pydanic base model, which is cool.

00:04:20.280 --> 00:04:24.140
But you can also use a decorator on a data class, which we talked about.

00:04:24.140 --> 00:04:26.080
It's very similar because of the type annotations.

00:04:26.080 --> 00:04:29.520
And it'll actually put parsing and validation on there for you.

00:04:29.520 --> 00:04:30.100
Oh, that's neat.

00:04:30.100 --> 00:04:30.340
Yeah.

00:04:30.340 --> 00:04:33.640
So, if you really want to use data classes, you can make them better with Pydanic as well.

00:04:33.640 --> 00:04:33.920
Okay.

00:04:33.920 --> 00:04:34.760
Yeah, simple, right?

00:04:34.760 --> 00:04:35.220
Yeah.

00:04:35.220 --> 00:04:36.620
So, where do you put it in your...

00:04:36.620 --> 00:04:40.860
So, do you get it, like, when you get data in, you validate the data with Pydanic then?

00:04:40.860 --> 00:04:42.680
That's the thing is you don't even validate it.

00:04:42.680 --> 00:04:43.760
That's what's so sweet about it.

00:04:43.760 --> 00:04:45.080
There's not even a validation step.

00:04:45.080 --> 00:04:46.380
You have the class.

00:04:46.380 --> 00:04:48.840
And in the notes, I'm putting a user class.

00:04:49.000 --> 00:04:50.380
So, I'll maybe reference that.

00:04:50.380 --> 00:04:53.140
And then you get some external data, which is a dictionary.

00:04:53.140 --> 00:04:55.680
And then you just create the user object.

00:04:55.680 --> 00:04:57.680
It's a user of star star dictionary.

00:04:57.680 --> 00:04:59.200
And it'll unpack it keyword-wise.

00:04:59.200 --> 00:05:04.360
The validation happens in the fact that you don't have a dunder init on your class.

00:05:04.360 --> 00:05:06.140
And it derives from the Pydanic base model.

00:05:06.140 --> 00:05:09.340
So, it uses its dunder init, which theoretically does the validation.

00:05:09.340 --> 00:05:09.840
Oh, okay.

00:05:09.840 --> 00:05:11.660
So, you can't not validate then.

00:05:11.660 --> 00:05:12.120
Yes.

00:05:12.120 --> 00:05:12.720
Exactly.

00:05:12.720 --> 00:05:13.160
Yeah.

00:05:13.160 --> 00:05:13.900
You just basically...

00:05:13.900 --> 00:05:14.860
I tried to create the class.

00:05:14.860 --> 00:05:16.640
And either that worked really well or not so much.

00:05:16.640 --> 00:05:17.840
Oh, that's actually pretty cool.

00:05:17.840 --> 00:05:22.820
And you get like a JSON response of all the things that were wrong with the validation as part of the exception, I believe.

00:05:22.820 --> 00:05:25.880
So, you can actually go, no, there's actually three things wrong here.

00:05:25.880 --> 00:05:27.960
Not just, well, the first thing it hit made it crash.

00:05:27.960 --> 00:05:33.300
So, this is obviously useful for like REST APIs and stuff like that or grabbing external data.

00:05:33.680 --> 00:05:37.440
But there's a lot of times where we're passing dictionaries around between components.

00:05:37.440 --> 00:05:42.360
And it'd be good to have some, if there's less trusted components, to have some sort of validation.

00:05:42.360 --> 00:05:43.520
So, this is pretty cool.

00:05:43.520 --> 00:05:43.740
Yeah.

00:05:43.740 --> 00:05:49.400
Even web forms that get posted back, a lot of times those come back in Pyramid or Flask as dictionaries.

00:05:49.400 --> 00:05:50.140
Right?

00:05:50.140 --> 00:05:52.760
If you wanted to map that to a class, right, you could get validation.

00:05:52.760 --> 00:05:53.660
There's a lot of places.

00:05:53.660 --> 00:05:53.860
Yeah.

00:05:53.860 --> 00:05:54.240
Yeah.

00:05:54.340 --> 00:05:55.580
Even settings files, right?

00:05:55.580 --> 00:05:55.880
Yeah.

00:05:55.880 --> 00:05:56.800
Yeah.

00:05:56.800 --> 00:06:01.220
There's a lot of people that just throw stuff that gets adjacent or something that gets thrown in a file.

00:06:01.220 --> 00:06:03.500
And it's user editable also.

00:06:03.500 --> 00:06:04.680
Yeah.

00:06:05.620 --> 00:06:09.680
So, you have to validate it because who knows what somebody edited it to.

00:06:09.680 --> 00:06:10.400
Yeah.

00:06:10.400 --> 00:06:10.880
Absolutely.

00:06:10.880 --> 00:06:11.460
All right.

00:06:11.460 --> 00:06:12.180
What you got next for us?

00:06:12.180 --> 00:06:17.060
I am doing, hopefully doing a favor, adding work to Ned Batchelder.

00:06:17.060 --> 00:06:23.100
So, he posted on Twitter recently that there is changes afoot in coverage.py.

00:06:23.100 --> 00:06:32.600
So, coverage is, hopefully everybody knows, coverage is great for using to tell you how much of your code base, your test suites are covering.

00:06:32.600 --> 00:06:34.500
I mean, that's how it's usually used.

00:06:34.500 --> 00:06:40.160
So, you could potentially do anything to try to measure coverage, but usually it's around a test suite or something.

00:06:40.160 --> 00:06:44.380
Anyway, so, the change is they've added measurement contexts.

00:06:44.380 --> 00:06:55.420
So, allowing you, while it's collecting data for coverage, it collects what was the context of what it was doing while it was covering certain bits of code.

00:06:55.420 --> 00:07:00.380
Now, that seems a little, the obvious use model of that, there's lots of use models.

00:07:00.380 --> 00:07:05.480
The obvious use model is which test covered which line of code.

00:07:05.480 --> 00:07:07.500
And to have that, and that's a lot of data.

00:07:07.500 --> 00:07:11.420
So, he's changed the way the data for coverage is being stored.

00:07:12.100 --> 00:07:13.360
And it's pretty cool.

00:07:13.360 --> 00:07:14.880
So, I'm going to jump to the conclusion.

00:07:14.880 --> 00:07:17.000
There's this cool feature.

00:07:17.000 --> 00:07:18.500
The context feature is very cool.

00:07:18.500 --> 00:07:19.380
I want to talk about that.

00:07:19.380 --> 00:07:24.340
But first of all, it is a little bit of a break in the coverage, use of coverage.

00:07:24.500 --> 00:07:30.840
I think the reason is just because there's a, the way the data is stored, there's a little local database stored.

00:07:30.840 --> 00:07:35.080
So, there's another dependency that isn't an external dependency.

00:07:35.080 --> 00:07:37.500
It's a built-in dependency.

00:07:37.500 --> 00:07:43.340
But it's something that some versions of Python don't always have, I guess.

00:07:43.600 --> 00:07:52.680
So, for that reason, he's asking everybody, please try out the beta 1 coverage 5, 5.0 beta 1, and try it out and let them know if there's any issues.

00:07:52.680 --> 00:07:52.980
Right.

00:07:52.980 --> 00:07:56.660
So, basically, the idea is go try it and see if what you're doing before still works.

00:07:56.660 --> 00:07:59.820
If not, let them know real quick before it becomes permanent, right?

00:07:59.820 --> 00:08:00.120
Right.

00:08:00.120 --> 00:08:00.700
Exactly.

00:08:00.700 --> 00:08:05.420
And I really want this to become permanent because measurement context is so cool.

00:08:05.420 --> 00:08:06.980
I tried it out this morning.

00:08:06.980 --> 00:08:08.660
I'm going to put in show notes.

00:08:08.660 --> 00:08:12.620
I wasn't really clear on how to download, how to install a beta version of something.

00:08:12.620 --> 00:08:20.520
So, you just do the, like for this, it's pip install coverage double equal 5.0b1.

00:08:20.520 --> 00:08:21.080
Okay.

00:08:21.080 --> 00:08:22.120
So, we'll put that in the show notes.

00:08:22.120 --> 00:08:24.020
It's not too bad to install it.

00:08:24.020 --> 00:08:31.280
And then also, I didn't put this in the show notes, but one of the other tricks I found out is if you want to know what versions are available to pip install,

00:08:31.280 --> 00:08:35.940
you can just do the coverage equal equal and then don't list a version.

00:08:36.500 --> 00:08:41.620
And you'll get an error message that says, I don't know what you're talking about, but here's all of the versions that are available.

00:08:41.620 --> 00:08:42.760
That's pretty awesome.

00:08:42.760 --> 00:08:43.440
I didn't know that.

00:08:43.440 --> 00:08:44.400
Yeah, that's pretty cool.

00:08:44.400 --> 00:08:50.720
So, I tried it out, a few lines of code to, or a few lines of command line stuff to run coverage on a little dummy file.

00:08:50.720 --> 00:09:03.620
And sure enough, if I generate the HTML report, on the right-hand side of the window or the screen, I've got little drop-downs on every line of code to tell me which test covered which line of code.

00:09:03.620 --> 00:09:04.500
I like that a lot.

00:09:04.500 --> 00:09:04.860
That's cool.

00:09:04.860 --> 00:09:05.360
Yeah.

00:09:05.360 --> 00:09:06.060
Very neat.

00:09:06.200 --> 00:09:06.780
Yeah, super nice.

00:09:06.780 --> 00:09:07.780
I look forward to it.

00:09:07.780 --> 00:09:08.220
Okay.

00:09:08.220 --> 00:09:10.220
I don't know why I think this is funny.

00:09:10.220 --> 00:09:11.880
My brain's just not working, man.

00:09:11.880 --> 00:09:12.680
Will you do the ad read?

00:09:12.680 --> 00:09:13.080
Got it.

00:09:13.080 --> 00:09:15.960
Now, this episode is brought to us by DigitalOcean.

00:09:15.960 --> 00:09:24.820
And I just want to tell you about something brand new that's gone from beta to general availability, memory-optimized droplets.

00:09:24.820 --> 00:09:28.140
Droplets are DigitalOcean's words for virtual machines, right?

00:09:28.140 --> 00:09:31.740
Goes to the cloud, clouds full of rain, rain droplets, that sort of thing.

00:09:32.480 --> 00:09:38.760
And if you have some sort of workload that requires a lot of memory, well, then these things are like super optimized that.

00:09:38.760 --> 00:09:43.020
So it has eight gigs of RAM for each dedicated virtual CPU.

00:09:43.360 --> 00:09:47.200
You can get them with two or many, many more, right?

00:09:47.200 --> 00:09:48.360
Multi-core systems.

00:09:48.360 --> 00:09:57.660
So basically, you can go all the way from 16 gigs to 256 gigs of RAM, which is like a ridiculous amount of RAM.

00:09:58.220 --> 00:10:02.620
One thing you can do to make your app run faster is to make sure it never touches the disk, right?

00:10:02.620 --> 00:10:05.220
So if it could just cache everything, that would be great.

00:10:05.220 --> 00:10:14.120
So they're really good for things like high-performance SQL or NoSQL databases, large memory caches and indices, indexes, things like that.

00:10:14.120 --> 00:10:17.940
And just lots of big data and stuff running with large runtime requirements.

00:10:17.940 --> 00:10:26.480
So if you need between 16 to 256 gigs of RAM and you want to just pay mostly for the memory, right?

00:10:26.480 --> 00:10:28.560
The pricing is optimized around that use case.

00:10:28.560 --> 00:10:32.400
Then check them out at pythonbytes.fm/DigitalOcean.

00:10:32.400 --> 00:10:33.760
They're a big supporter of the show.

00:10:33.760 --> 00:10:43.200
Speaking of cool stuff, the PSF and the Python Software Foundation Packaging Working Group, actually, that group of the PSF,

00:10:43.380 --> 00:10:45.240
they're looking to hire some folks.

00:10:45.240 --> 00:10:50.100
They're looking for, I think, three developers and maybe a project manager.

00:10:50.100 --> 00:10:55.380
I can't remember exactly all the details, but quite a few number of people to make pip better.

00:10:55.380 --> 00:11:00.420
Like you just said, if you said, you know, pip install coverage double equals, it'll help you, right?

00:11:00.420 --> 00:11:03.380
So this is supposed to be a much better setup.

00:11:03.380 --> 00:11:12.440
So the idea is that one of the things that could be improved in pip is its dependency resolver, right?

00:11:12.500 --> 00:11:17.940
So it's, you know, this package depends on this thing, but other package also maybe depends on that, but a different version.

00:11:17.940 --> 00:11:25.820
Or, you know, I don't know how often it's happened to you, but I've had the order in which I list stuff in the requirements causing issues.

00:11:25.820 --> 00:11:29.920
Because one requires, I don't know, doc opt of this version.

00:11:29.920 --> 00:11:31.920
The other one requires doc opt of another version.

00:11:31.920 --> 00:11:35.280
And how can you possibly install them both at the same time, right?

00:11:35.280 --> 00:11:36.240
Weird stuff like that.

00:11:36.240 --> 00:11:41.580
Poetry has noticed this problem and it has a solution to it, but it's around poetry.

00:11:41.580 --> 00:11:46.720
And it'd be really cool if that sort of dependency resolution was built in to PIP.

00:11:46.720 --> 00:11:47.380
That'd be great.

00:11:47.380 --> 00:11:47.640
Yeah.

00:11:47.640 --> 00:11:53.280
The underlying idea is to make distributing and installing Python software just more reliable and easier.

00:11:53.960 --> 00:12:01.140
So funding has been allocated to two contractors, a senior developer, an intermediate and an intermediate developer.

00:12:01.140 --> 00:12:01.820
That's what it is.

00:12:01.820 --> 00:12:08.940
To work on developing, testing and building this feature, the test infrastructure, code review, bug triage, all that kind of stuff.

00:12:09.460 --> 00:12:11.760
And this is a non-trivial offering.

00:12:11.760 --> 00:12:20.900
So I believe the senior developer will end up getting $116,000 out of this based on the time they're estimating and the rate.

00:12:20.900 --> 00:12:26.980
And then the either senior developer or the contractors, I can't remember, get $103,000 each.

00:12:26.980 --> 00:12:28.720
This is quite significant.

00:12:28.720 --> 00:12:29.340
Not too shabby.

00:12:29.340 --> 00:12:29.600
Yeah.

00:12:29.600 --> 00:12:33.460
That's like a, not just a, hey, I need somebody to work on this for a couple of weeks.

00:12:33.460 --> 00:12:34.620
That's like a legit thing.

00:12:34.680 --> 00:12:39.920
So if you'd like to contribute to Python, work on PIP, things like that, just, you know, go check out this link.

00:12:39.920 --> 00:12:41.000
It shows you how to apply.

00:12:41.000 --> 00:12:41.480
Very cool.

00:12:41.480 --> 00:12:41.780
Yeah.

00:12:41.780 --> 00:12:46.220
So when I work on Pandas, Brian, I kind of feel a little bit lost.

00:12:46.220 --> 00:12:50.660
There's all these operations and I don't use Pandas enough to kind of actually know what I should be doing.

00:12:50.660 --> 00:12:56.960
Often it's in the context of Jupyter Notebooks where the autocomplete's slightly less good than PyCharm or VS Code.

00:12:56.960 --> 00:12:59.180
I could always use some help when I'm working on Pandas.

00:12:59.180 --> 00:12:59.680
How about you?

00:12:59.680 --> 00:13:00.720
Yeah, I could.

00:13:00.720 --> 00:13:03.800
And I know people that, there's a lot of people that work in it all the time,

00:13:03.900 --> 00:13:07.080
but I usually just jumping in for some particular use.

00:13:07.080 --> 00:13:10.260
And I know I don't know the best way to do things.

00:13:10.260 --> 00:13:12.740
There's a thing called DovePanda.

00:13:12.740 --> 00:13:14.260
I think I'm saying that right.

00:13:14.260 --> 00:13:15.380
D-O-V Panda.

00:13:15.380 --> 00:13:20.260
And this was submitted by Dean Langstrom, Langsom, sorry.

00:13:20.260 --> 00:13:27.200
I think that it's his project, but essentially it's an overlay on, I'm just going to read his thing.

00:13:27.200 --> 00:13:28.040
He says directions.

00:13:28.040 --> 00:13:36.100
So DovePanda has directions and are hints and tips for using Pandas in an analysis environment.

00:13:36.100 --> 00:13:38.860
DovePanda is an overlay for working with Pandas.

00:13:39.780 --> 00:13:49.280
So the idea is, like, if you have this installed also, you're working in a Jupyter Notebook and you start typing stuff, you start doing Pandas operations.

00:13:49.280 --> 00:14:01.820
It looks at what you did and provides hints and it pops up in little windows in your notebook to give you hints on, I think you're doing this, but there's a better way to do it or giving you tips.

00:14:01.820 --> 00:14:05.520
So it's like Clippy for Pandas in Jupyter.

00:14:05.520 --> 00:14:08.700
Yeah, but it's definitely, sort of.

00:14:08.700 --> 00:14:20.680
But instead of having just one Clippy that pops down, they're in your notebook so you don't have to deal with them right away, but you can go back and improve your use of Pandas within the notebook.

00:14:20.680 --> 00:14:21.720
It's pretty cool.

00:14:21.720 --> 00:14:23.500
Yeah, it actually looks really helpful.

00:14:23.500 --> 00:14:28.240
So the example they have, they've got a bunch of pictures on the GitHub repo you all can check out.

00:14:28.240 --> 00:14:35.600
But, like, for example, there's one where someone's calling pd.concat and taking two data frames and specifying the axes equals one.

00:14:35.600 --> 00:14:44.860
And then the little panda pops up and says, all data frames have the same columns, which hints for concat on axis zero.

00:14:44.860 --> 00:14:49.160
You specified axis one, which may result in unwanted behavior, and it'll show you the code.

00:14:49.160 --> 00:14:55.260
Or after concatenation, you're going to have duplicate column names, pay attention, and things like that.

00:14:55.260 --> 00:14:57.560
It's got a bunch of great little tricks.

00:14:57.560 --> 00:15:02.920
And then, you know how you mentioned Kevin Markham from Dataschool.io and his tips?

00:15:02.920 --> 00:15:06.940
You can type DovePanda.tip, and it'll pull up a Kevin Markham tweet.

00:15:06.940 --> 00:15:08.100
That's pretty cool.

00:15:08.100 --> 00:15:11.560
Like, inside your notebook, it'll pull up, like, some random tip.

00:15:11.560 --> 00:15:12.560
Yeah, that's pretty cool.

00:15:12.560 --> 00:15:13.220
A whole circle there.

00:15:13.220 --> 00:15:17.640
And, like, you can use it, apparently you can use it, not even just in notebooks.

00:15:17.640 --> 00:15:23.980
So there's a command line mode where you can set the output to be, you know, there's no inline output to go to.

00:15:23.980 --> 00:15:30.360
So you can tell it to print the output to just standard out or to a display or to somewhere else.

00:15:30.360 --> 00:15:31.360
That's nice.

00:15:31.360 --> 00:15:36.280
So if you're using, you want to have these sort of tips, but you're not using notebooks, you can still get them.

00:15:36.280 --> 00:15:36.960
Yeah.

00:15:36.960 --> 00:15:37.840
Very cool.

00:15:38.120 --> 00:15:42.940
This next one is really simple, but I think some folks will find it super useful.

00:15:42.940 --> 00:15:50.920
You know, maybe you picked up that project from someone else at work, and they're not following all the best Python practices.

00:15:50.920 --> 00:15:54.200
You see a bunch of import stars all over the place.

00:15:54.200 --> 00:16:00.300
And you're like, man, didn't somebody tell these people that import star is not worth it, right?

00:16:00.300 --> 00:16:01.920
That there's all these potential drawbacks.

00:16:02.640 --> 00:16:04.800
So enter remove star.

00:16:04.800 --> 00:16:10.120
Remove star is a command line app you can run or command you can run.

00:16:10.120 --> 00:16:15.020
And you point it at either a module, a file, a directory, something like that.

00:16:15.020 --> 00:16:19.960
It will go through, and by default, it'll just find the issues where import star is done.

00:16:19.960 --> 00:16:29.200
And then it will look at the actual files and say, well, you said import star, but you're actually just, you know, like from collections import star.

00:16:29.200 --> 00:16:34.960
Maybe you're actually just using named collections encounter or something like that.

00:16:34.960 --> 00:16:35.120
Yeah.

00:16:35.120 --> 00:16:35.980
Maybe that's it or tools.

00:16:35.980 --> 00:16:37.580
Anyway, you're just using one or two things.

00:16:37.580 --> 00:16:39.140
And it'll say, you know what?

00:16:39.140 --> 00:16:44.640
You could replace that line with from collections import named tuple, right?

00:16:44.640 --> 00:16:49.740
And it could suggest that, or you could actually give it a command to say, no, just change all my files.

00:16:49.740 --> 00:16:50.480
Fix it.

00:16:50.480 --> 00:16:50.720
Yeah.

00:16:50.720 --> 00:16:52.080
This is very cool.

00:16:52.080 --> 00:16:52.900
Yeah, it's great.

00:16:52.900 --> 00:16:55.800
So it's not that it just says import star is bad.

00:16:55.800 --> 00:17:01.240
It actually figures out what of that star is being used and what you should actually write, and then it will write it for you.

00:17:01.240 --> 00:17:08.360
Yeah, so my normal operation when I see something like this is just to comment out the import statement and see what breaks.

00:17:08.360 --> 00:17:12.300
And that's not the best way to do things.

00:17:12.300 --> 00:17:13.480
So this is way better.

00:17:13.480 --> 00:17:14.160
I like it.

00:17:14.160 --> 00:17:14.600
Yeah, yeah.

00:17:14.600 --> 00:17:21.620
It reminds me a little bit of Flint, F-L-Y-N-T, which will take all your strings and rewrite them as f-strings.

00:17:21.620 --> 00:17:25.700
This will take all your import stars and rewrite them as proper specific imports.

00:17:25.700 --> 00:17:27.840
OMG, I totally forgot about Flint.

00:17:27.840 --> 00:17:35.260
We've got a whole bunch of code that we wrote for 3.5 that still has all the old stuff in it.

00:17:35.260 --> 00:17:36.620
So yeah, I got to use that.

00:17:36.620 --> 00:17:38.080
Well, it's about to get a whole lot better.

00:17:38.080 --> 00:17:38.720
Hit it with Flint.

00:17:38.720 --> 00:17:39.580
It's so good.

00:17:39.580 --> 00:17:40.720
Yeah, definitely.

00:17:40.720 --> 00:17:41.180
Awesome.

00:17:41.180 --> 00:17:41.500
All right.

00:17:41.500 --> 00:17:42.280
Well, that's it.

00:17:42.280 --> 00:17:42.860
Remove stars.

00:17:42.860 --> 00:17:43.760
There's not a whole lot to it.

00:17:43.760 --> 00:17:47.820
It's just a great little command line tool you can use to make your Python code better.

00:17:47.820 --> 00:17:48.100
Yeah.

00:17:48.100 --> 00:17:54.020
So the last thing I want to talk about today, actually, oddly enough, we didn't plan this, is another.

00:17:54.020 --> 00:17:55.900
It came from Brian Rutledge, too.

00:17:56.060 --> 00:18:01.240
So the PSF thing that we talked about, the hiring developers came from him, too.

00:18:01.240 --> 00:18:03.300
So we've got two stories from Brian.

00:18:03.300 --> 00:18:04.980
So thanks, Brian, for helping us out.

00:18:04.980 --> 00:18:05.700
Yeah, absolutely.

00:18:05.700 --> 00:18:06.420
Thanks, Brian.

00:18:06.420 --> 00:18:07.400
Double thanks.

00:18:07.400 --> 00:18:12.820
Well, so one of the things that Brian's working on is a pytest plugin called pytest Quarantine.

00:18:12.820 --> 00:18:14.360
This is so cool.

00:18:14.760 --> 00:18:15.980
Hopefully all your tests pass.

00:18:15.980 --> 00:18:27.600
But let's say you've got a, you just implemented, you got really fantastic, you got into testing, and you started writing a bunch of tests, and you put it on a code base, and you got a bunch of failures.

00:18:27.600 --> 00:18:30.960
You know you're going to fix them, but you're not going to fix them right away.

00:18:31.020 --> 00:18:31.580
So what do you do?

00:18:31.580 --> 00:18:35.020
And the idea with pytest Quarantine is it saves a list.

00:18:35.020 --> 00:18:39.100
So you run it once, and you tell it to save a list of all the failing tests.

00:18:39.100 --> 00:18:44.460
And it saves it somewhere, and you can throw it in Git or something, store it.

00:18:44.460 --> 00:18:54.580
And then you run it again with that list, and it automatically marks all of the tests that have failed in the past as X fails.

00:18:54.880 --> 00:19:03.620
Now this is something you can do manually to say, I know this is going to fail, just run it as an X fail instead of, it separates it from a failure.

00:19:03.620 --> 00:19:12.680
You know, there's arguments of whether that's good or bad, but it's very useful so that you can still use your suite to find new failures while you're working on the old ones.

00:19:12.680 --> 00:19:15.880
Anyway, this is a nice little extra tool.

00:19:15.880 --> 00:19:16.980
I think it's super cool.

00:19:16.980 --> 00:19:20.720
I also wanted to bring this up because he sent me this really nice email.

00:19:21.040 --> 00:19:39.560
So apparently I met Brian a couple times at PyCon in Cleveland, and he said he started out as a complete pytest newbie and bought my book, started working through it, loved pytest, and then helped his company to adopt pytest, and then wrote this plugin.

00:19:39.560 --> 00:19:44.320
And he wrote it at work and convinced his company to be able to release it as open source.

00:19:44.320 --> 00:19:46.040
So that's super cool.

00:19:46.040 --> 00:19:47.100
Yeah, that's really great.

00:19:47.100 --> 00:19:47.920
Yeah, good work, Brian.

00:19:47.920 --> 00:19:49.500
This sounds like super useful.

00:19:49.660 --> 00:19:51.900
You know, you've got to make some huge change.

00:19:51.900 --> 00:19:55.680
If it breaks 50 tests, you can't start solving all 50 at once, right?

00:19:55.680 --> 00:19:57.740
You've got to like chop your way out of them.

00:19:57.740 --> 00:19:58.340
So yeah.

00:19:58.340 --> 00:19:59.080
Chip away at it.

00:19:59.080 --> 00:19:59.580
Yeah, exactly.

00:19:59.580 --> 00:20:02.540
Quarantine them and then just, you know, take them one at a time.

00:20:02.540 --> 00:20:03.800
So yeah, I like it.

00:20:03.800 --> 00:20:05.900
I mean, there are ways in which you can deal with this.

00:20:05.900 --> 00:20:11.780
Like in PyCharm, you can say run only this test or run certain ones.

00:20:11.780 --> 00:20:16.180
But you know, like it doesn't help you on continuous integration or something like that, right?

00:20:16.180 --> 00:20:17.520
So yeah, I think this is great.

00:20:17.520 --> 00:20:27.020
And one of the things I wanted to bring up also is I've dealt with this in the past on a temporary basis, of course, where you've got for some reason a breaking change that fails some things.

00:20:27.220 --> 00:20:28.360
You're working through them.

00:20:28.360 --> 00:20:34.440
And we have occasionally, if there's like a known failure, that the fix is scheduled, right?

00:20:34.440 --> 00:20:35.640
It's a, we know about it.

00:20:35.640 --> 00:20:38.000
We're going to fix it, but it's not going to be fixed for like three weeks.

00:20:38.000 --> 00:20:41.300
You can add X fail to the test itself.

00:20:41.620 --> 00:20:46.820
But one of the issues with that is you're to add the X fail mark, you edit the test file.

00:20:46.820 --> 00:20:50.460
So one of the benefits of this is you're not actually editing the test file.

00:20:50.460 --> 00:20:53.260
You're editing a different file that marks those.

00:20:53.260 --> 00:20:54.100
So that's kind of right.

00:20:54.100 --> 00:21:01.380
You don't want those changes to show up and get saying, well, we've made all these changes to these tests, but actually, no, we're just trying to fix something else and get them out of our way.

00:21:01.380 --> 00:21:02.300
Yeah, I like it.

00:21:02.300 --> 00:21:02.500
Yeah.

00:21:02.500 --> 00:21:02.660
All right.

00:21:02.660 --> 00:21:03.820
Well, that's it for all of our main items.

00:21:03.820 --> 00:21:05.340
Brian, you got anything extra you want to throw out there?

00:21:05.480 --> 00:21:06.480
I do not.

00:21:06.480 --> 00:21:07.640
How about you?

00:21:07.640 --> 00:21:09.160
I've got some pretty cool news.

00:21:09.160 --> 00:21:18.500
So I recently decided to go through the effort of figuring out how much energy all of our services and servers use, right?

00:21:18.500 --> 00:21:24.300
So for like delivering Python bytes and talk Python and Talk Python Training courses and all that stuff.

00:21:24.300 --> 00:21:32.000
And I figured out how much that was and went out and bought renewable energy credits to offset all the carbon from all of our infrastructure.

00:21:32.000 --> 00:21:32.460
Wow.

00:21:32.460 --> 00:21:33.160
That's neat.

00:21:33.160 --> 00:21:33.460
Yeah.

00:21:33.460 --> 00:21:34.000
Yeah.

00:21:34.000 --> 00:21:36.480
So I'm going to keep doing that going forward.

00:21:36.480 --> 00:21:50.680
So not a huge, huge amount, but it's, you know, I think a good signal for all the other companies out there as well to say, look, if this podcast or these podcasts can be carbon neutral for their server structure, why can't we?

00:21:50.680 --> 00:21:50.880
Right?

00:21:50.880 --> 00:21:51.120
Yeah.

00:21:51.120 --> 00:21:51.360
Yeah.

00:21:51.360 --> 00:21:51.560
Cool.

00:21:51.560 --> 00:21:54.720
So anyway, small, but hopefully can trigger some good change.

00:21:54.720 --> 00:21:55.400
All right.

00:21:55.400 --> 00:21:56.300
Ready for a joke?

00:21:56.300 --> 00:21:57.720
I am so ready for a joke.

00:21:57.720 --> 00:21:59.180
I need it this week.

00:21:59.180 --> 00:22:03.400
Well, it's more science than it is programming.

00:22:03.400 --> 00:22:07.020
But I think our audience will generally, generally like it.

00:22:07.020 --> 00:22:13.500
So I'm going to tell the joke and then explain the joke because I'm not sure everyone will know, but I think a lot of us will get it.

00:22:13.500 --> 00:22:15.520
And jokes are so much more funny if you explain them.

00:22:15.520 --> 00:22:15.920
I know.

00:22:15.920 --> 00:22:16.580
Absolutely.

00:22:16.580 --> 00:22:16.960
They are.

00:22:17.080 --> 00:22:20.420
So imagine a time not too long ago.

00:22:20.760 --> 00:22:23.760
Dr. Heisenberg from quantum mechanics fame.

00:22:23.760 --> 00:22:27.440
He's driving down the highway and he gets pulled over for speeding.

00:22:27.440 --> 00:22:29.100
The policeman comes over.

00:22:29.100 --> 00:22:31.320
The officer says, excuse me, sir.

00:22:31.320 --> 00:22:33.200
Do you know how fast you were going?

00:22:33.200 --> 00:22:37.320
Heisenberg pauses for a moment and then answers, no, but I do know where I am.

00:22:39.100 --> 00:22:39.960
I love that.

00:22:39.960 --> 00:22:40.680
That's so funny.

00:22:40.680 --> 00:22:41.260
Yeah.

00:22:41.260 --> 00:22:41.860
Thanks.

00:22:41.860 --> 00:22:42.060
Yeah.

00:22:42.060 --> 00:22:50.740
So the Heisenberg uncertainty principle basically says that the position and velocity of an object cannot both be measured exactly at the same time.

00:22:50.740 --> 00:22:52.260
Not even theoretically.

00:22:52.260 --> 00:22:54.060
You can know one or the other, but not both.

00:22:54.060 --> 00:22:54.680
So, yeah.

00:22:54.680 --> 00:22:55.600
He knows where he is.

00:22:55.600 --> 00:22:56.220
Yeah.

00:22:56.220 --> 00:22:56.880
Funny.

00:22:57.020 --> 00:22:57.320
Pretty good.

00:22:57.320 --> 00:22:57.620
All right.

00:22:57.620 --> 00:22:58.880
Well, thanks for being here.

00:22:58.880 --> 00:23:00.260
Good to be back together.

00:23:00.260 --> 00:23:03.140
After taking off and hiding in Florida for a while.

00:23:03.140 --> 00:23:04.680
Now we're back on the usual track.

00:23:04.680 --> 00:23:05.080
Yeah.

00:23:05.080 --> 00:23:05.340
Yeah.

00:23:05.340 --> 00:23:05.660
All right.

00:23:05.660 --> 00:23:06.080
Have a good one.

00:23:06.080 --> 00:23:06.400
You too.

00:23:06.400 --> 00:23:06.700
Bye.

00:23:06.700 --> 00:23:06.900
Bye.

00:23:06.900 --> 00:23:08.760
Thank you for listening to Python Bytes.

00:23:08.760 --> 00:23:11.220
Follow the show on Twitter at Python Bytes.

00:23:11.220 --> 00:23:14.260
That's Python Bytes as in B-Y-T-E-S.

00:23:14.260 --> 00:23:17.140
And get the full show notes at Pythonbytes.fm.

00:23:17.140 --> 00:23:22.200
If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:23:22.200 --> 00:23:24.260
We're always on the lookout for sharing something cool.

00:23:24.500 --> 00:23:28.440
This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening

00:23:28.440 --> 00:23:30.740
and sharing this podcast with your friends and colleagues.

00:23:30.740 --> 00:23:31.740
Thanks.

