
00:00:00.000 --> 00:00:05.840
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.840 --> 00:00:13.600
This is episode 213 recorded December 23rd or Anthony, Anthony Shaw here. Is this December


00:00:13.600 --> 00:00:16.240
23rd or 24th? You tell me. It's the 24th. It's Christmas Eve.


00:00:16.240 --> 00:00:17.360
Yeah, of course. Yeah.


00:00:17.360 --> 00:00:18.560
In Australia. Awesome.


00:00:18.560 --> 00:00:19.360
In the future.


00:00:19.360 --> 00:00:27.760
Yeah. 23rd for us, Brian and me here in the US, 2020. And yeah, this episode is brought to you


00:00:27.760 --> 00:00:31.840
by us so we'll talk more about that later. And I'm Michael Kennedy.


00:00:31.840 --> 00:00:33.040
And I am Brian Arkin.


00:00:33.040 --> 00:00:37.120
And Brian we got a special guest here, friend of the show, Anthony Shaw. Welcome Anthony.


00:00:37.120 --> 00:00:38.560
Hi there, great to be on.


00:00:38.560 --> 00:00:42.880
Yeah, it's good to have you here. Thanks for taking time out of your holiday.


00:00:42.880 --> 00:00:47.280
Yeah, no, it's a pleasure. It started last night so the Christmas holiday has now started. I'm off


00:00:47.280 --> 00:00:48.880
for two weeks. Should be lovely.


00:00:48.880 --> 00:00:54.880
Yeah, yeah, it should be very lovely. So you've got, I think everyone on Twitter is jealous of


00:00:54.880 --> 00:00:58.760
of all the pictures that you post when it's like cold and gray and you're like,


00:00:58.760 --> 00:01:00.680
"Oh yeah, there's this beautiful sunny beach here in


00:01:00.680 --> 00:01:04.360
the summer in Australia that I happen to be suffering through."


00:01:04.360 --> 00:01:09.000
>> Yeah, it's the middle of summer here and it's beautiful weather


00:01:09.000 --> 00:01:11.320
and five minute walk to the beach.


00:01:11.320 --> 00:01:14.080
>> Yeah, not too bad.


00:01:14.080 --> 00:01:15.680
Cool. Well, welcome to the show.


00:01:15.680 --> 00:01:21.520
Happy to have you here. I want to kick us off with this project called Django Ledger.


00:01:21.520 --> 00:01:24.120
Django Ledger is, have you guys heard of this?


00:01:24.120 --> 00:01:28.500
- Yeah, so Django Ledger, you've probably heard of QuickBooks


00:01:28.500 --> 00:01:31.180
or FreshBooks or some of this accounting software, right?


00:01:31.180 --> 00:01:32.980
That you've got to work with.


00:01:32.980 --> 00:01:35.180
You know, it's allows you to do either,


00:01:35.180 --> 00:01:37.580
it's a desktop app or some kind of online thing


00:01:37.580 --> 00:01:40.180
where you create purchase orders,


00:01:40.180 --> 00:01:43.020
you keep track of who your customers are,


00:01:43.020 --> 00:01:45.740
when they owe you money, you accept payments,


00:01:45.740 --> 00:01:46.940
all that kind of stuff, right?


00:01:46.940 --> 00:01:50.740
So Django Ledger is something like that built in Django,


00:01:50.740 --> 00:01:51.860
which I think is really cool


00:01:51.860 --> 00:01:54.060
because it could serve multiple purposes.


00:01:54.060 --> 00:01:56.420
You could take it and just run it for yourself


00:01:56.420 --> 00:01:58.920
or for your company and then customize it.


00:01:58.920 --> 00:02:03.020
Or you could actually use it to extend something,


00:02:03.020 --> 00:02:04.060
build something on top of it,


00:02:04.060 --> 00:02:05.920
or maybe even offer services in it.


00:02:05.920 --> 00:02:07.020
If you're like Stripe,


00:02:07.020 --> 00:02:10.300
maybe it makes sense to integrate some sort of plugin here


00:02:10.300 --> 00:02:13.100
'cause then you get 3% of everything that company makes,


00:02:13.100 --> 00:02:15.020
basically, the way credit cards go.


00:02:15.020 --> 00:02:17.760
So it's a bookkeeping and financial analysis engine


00:02:17.760 --> 00:02:20.100
for the Django framework, which pretty sweet.


00:02:20.100 --> 00:02:21.400
It's open source.


00:02:21.400 --> 00:02:23.160
And if you look through its features,


00:02:23.160 --> 00:02:28.120
It has a chart of accounts, basically customers, financial statements,


00:02:28.120 --> 00:02:33.760
it has multi-tenancy support, it has stuff for operations, for investing,


00:02:33.760 --> 00:02:37.900
it has bills and invoices and bank accounts, all that kind of stuff.


00:02:37.900 --> 00:02:39.420
And yeah, pretty awesome, right?


00:02:39.420 --> 00:02:41.100
Wait, multi-tenancy?


00:02:41.100 --> 00:02:43.660
So is there like North Tennessee and South Tennessee or?


00:02:43.660 --> 00:02:45.020
That, that would be Dakota.


00:02:45.020 --> 00:02:46.760
I think Tennessee, there's only just one Tennessee.


00:02:46.760 --> 00:02:46.960
No.


00:02:46.960 --> 00:02:48.060
Yeah.


00:02:48.060 --> 00:02:52.000
I think if you wanted to run this as like a platform as a service type of thing,


00:02:52.200 --> 00:02:53.760
and you wanted to offer up,


00:02:53.760 --> 00:02:56.560
if you wanted to basically create your version of FreshBooks,


00:02:56.560 --> 00:02:58.600
I feel like that's what it would be.


00:02:58.600 --> 00:03:02.320
- If you're an accountant that serviced multiple clients,


00:03:02.320 --> 00:03:03.620
you'd probably do it that way, I guess.


00:03:03.620 --> 00:03:04.460
It looks pretty cool.


00:03:04.460 --> 00:03:06.520
I thought I'd add, there's a project called Ledger,


00:03:06.520 --> 00:03:09.600
which is open source, but it's not a,


00:03:09.600 --> 00:03:10.760
I don't think it's a Python project.


00:03:10.760 --> 00:03:13.960
I think it's written in something completely different.


00:03:13.960 --> 00:03:15.800
So yeah, this is really cool and great,


00:03:15.800 --> 00:03:18.500
I think for businesses who maybe have someone


00:03:18.500 --> 00:03:19.480
who can set this up,


00:03:19.480 --> 00:03:22.000
I'm guessing it's not available as a service.


00:03:22.000 --> 00:03:23.040
Do you have to kind of?


00:03:23.040 --> 00:03:24.040
- I don't think so.


00:03:24.040 --> 00:03:26.080
Especially, yeah, yeah, if you look at it,


00:03:26.080 --> 00:03:28.760
it says this project is under active development.


00:03:28.760 --> 00:03:30.640
It's not quite ready for production.


00:03:30.640 --> 00:03:34.920
So this comes to us from Miguel Sanda.


00:03:34.920 --> 00:03:36.160
I believe that's his project.


00:03:36.160 --> 00:03:40.040
And I would love to see what the roadmap for stability is


00:03:40.040 --> 00:03:42.340
and when this is ready, when it's coming out.


00:03:42.340 --> 00:03:44.720
But it's basically all Python and HTML


00:03:44.720 --> 00:03:46.800
and just a tiny bit of TypeScript,


00:03:46.800 --> 00:03:48.920
like a salt level.


00:03:48.920 --> 00:03:50.960
Stuff that's coming is like inventory management,


00:03:50.960 --> 00:03:54.220
cash flow, taxes, all the fun stuff.


00:03:54.220 --> 00:03:56.880
And Brian, even BDD's coming.


00:03:56.880 --> 00:03:58.340
- I don't understand.


00:03:58.340 --> 00:04:00.960
Behavior driven, oh, behavior driven development tests.


00:04:00.960 --> 00:04:02.140
- Yeah, yeah, yeah.


00:04:02.140 --> 00:04:05.220
And so they're also actively looking for contributors,


00:04:05.220 --> 00:04:08.980
especially anyone with financial or accounting experience.


00:04:08.980 --> 00:04:11.980
So if you're looking for some project to contribute to,


00:04:11.980 --> 00:04:12.820
you know, that'd be great.


00:04:12.820 --> 00:04:14.220
You could contribute to this one.


00:04:14.220 --> 00:04:15.420
It's not super well known yet,


00:04:15.420 --> 00:04:17.460
but I thought I would shine a little bit of a light on it


00:04:17.460 --> 00:04:19.940
because it seems like it's a cool idea.


00:04:19.940 --> 00:04:21.940
- Well, it's even got invoicing and stuff too.


00:04:21.940 --> 00:04:24.660
So I think this is pretty neat.


00:04:24.660 --> 00:04:25.820
- Yeah, absolutely.


00:04:25.820 --> 00:04:27.460
So what's up next for you, Brian?


00:04:27.460 --> 00:04:28.980
What do you got for us?


00:04:28.980 --> 00:04:31.820
- Next up, oh, so another web sort of thing.


00:04:31.820 --> 00:04:35.380
But this, I ran across Flask Meld.


00:04:35.380 --> 00:04:37.180
- Flask Meld, I've never heard of this.


00:04:37.180 --> 00:04:41.460
So is this like a Vulcan thing from Star Trek?


00:04:41.460 --> 00:04:43.940
- No, the idea is like melding the front end


00:04:43.940 --> 00:04:45.620
and the back end.


00:04:45.620 --> 00:04:48.180
And it's a pretty cool,


00:04:49.140 --> 00:04:52.620
You should click on the example article.


00:04:52.620 --> 00:04:54.620
But yeah, that first link.


00:04:54.620 --> 00:04:55.620
Right there.


00:04:55.620 --> 00:04:56.620
Oh, right here?


00:04:56.620 --> 00:04:57.620
Okay.


00:04:57.620 --> 00:04:58.620
Yeah.


00:04:58.620 --> 00:04:59.620
There's a...


00:04:59.620 --> 00:05:05.380
It's basically fairly simple interactive stuff where that JavaScript gives you.


00:05:05.380 --> 00:05:10.700
But it's super fast and it just...


00:05:10.700 --> 00:05:12.420
You don't have to write the JavaScript code.


00:05:12.420 --> 00:05:16.940
So the article in this article talks about how--


00:05:16.940 --> 00:05:20.860
this is from Michael Abrahamson.


00:05:20.860 --> 00:05:23.940
But he wanted to avoid writing JavaScript,


00:05:23.940 --> 00:05:28.220
so he wrote a whole bunch of JavaScript to make this plugin.


00:05:28.220 --> 00:05:29.660
So it's a Flask--


00:05:29.660 --> 00:05:32.060
his first Flask extension.


00:05:32.060 --> 00:05:36.060
But you modify the Flask templates


00:05:36.060 --> 00:05:37.620
to insert these elements.


00:05:37.620 --> 00:05:42.380
And then the elements just show up as objects in Python.


00:05:42.380 --> 00:05:43.820
and you can program them like that.


00:05:43.820 --> 00:05:46.740
So all these elements are all implemented in Python.


00:05:46.740 --> 00:05:47.740
Oh, cool.


00:05:47.740 --> 00:05:51.140
And there's a little video on there, but there's a demo as well.


00:05:51.140 --> 00:05:53.340
So there's a working example.


00:05:53.340 --> 00:05:57.540
And then the code for the example is up on GitHub as well,


00:05:57.540 --> 00:05:58.380
so you can play with it.


00:05:58.380 --> 00:06:02.940
One of the fun parts in one of his working examples


00:06:02.940 --> 00:06:06.500
is the dropdown for search.


00:06:06.500 --> 00:06:09.140
So if you start predictive search sort of thing,


00:06:09.140 --> 00:06:11.300
so if you start, the example shows states.


00:06:11.300 --> 00:06:13.680
So if you start typing states,


00:06:13.680 --> 00:06:16.840
it'll like start filling in this list of states


00:06:16.840 --> 00:06:20.040
that you might mean, and it's like super fast.


00:06:20.040 --> 00:06:22.480
- Nice, yeah, apparently it says right here


00:06:22.480 --> 00:06:25.580
that it utilizes WebSockets and Morphdom


00:06:25.580 --> 00:06:27.840
to create server-side rendered HTML


00:06:27.840 --> 00:06:30.580
and swap out DOM elements without refreshing the page.


00:06:30.580 --> 00:06:31.860
That's pretty killer actually.


00:06:31.860 --> 00:06:35.560
- Yeah, and he's nice enough, I think this is cool,


00:06:35.560 --> 00:06:38.240
he's saying that he basically stole all the ideas


00:06:38.240 --> 00:06:40.880
from other people and put them together for this,


00:06:40.880 --> 00:06:44.600
or standing on the shoulders of giants, so to speak.


00:06:44.600 --> 00:06:47.840
And there's a similar project called Django Unicorn


00:06:47.840 --> 00:06:48.920
for Django people.


00:06:48.920 --> 00:06:50.520
I played with that a little bit.


00:06:50.520 --> 00:06:56.600
The Django Unicorn is, the documentation site's amazing.


00:06:56.600 --> 00:06:58.640
It's got a bunch of examples.


00:06:58.640 --> 00:07:01.800
But it seemed, I don't know if it's the server


00:07:01.800 --> 00:07:03.160
that it's hosted on or what,


00:07:03.160 --> 00:07:06.200
but the Django example seemed a little bit slower.


00:07:06.200 --> 00:07:08.780
It seemed like there was this round trip thing going on,


00:07:08.780 --> 00:07:13.260
whereas the Flask example, Flask meld was zippy enough


00:07:13.260 --> 00:07:15.260
that that would be completely sufficient


00:07:15.260 --> 00:07:17.660
for a lot of the applications I'm thinking of throwing


00:07:17.660 --> 00:07:19.460
in some interactive stuff.


00:07:19.460 --> 00:07:21.500
- Yeah, this is really neat.


00:07:21.500 --> 00:07:24.620
This idea of components is pretty cool here.


00:07:24.620 --> 00:07:25.540
Anthony, what do you think?


00:07:25.540 --> 00:07:26.380
- Yeah, it's interesting.


00:07:26.380 --> 00:07:30.020
I don't really use Flask, but in the Django world,


00:07:30.020 --> 00:07:32.180
quite a lot of components and stuff that I've pulled in


00:07:32.180 --> 00:07:34.940
and plugins to do interactive elements.


00:07:36.300 --> 00:07:39.360
And each one is implemented completely differently,


00:07:39.360 --> 00:07:40.880
which is really frustrating,


00:07:40.880 --> 00:07:43.000
whether it's like a search box or a type ahead


00:07:43.000 --> 00:07:45.600
or like a multi-select field,


00:07:45.600 --> 00:07:46.560
just something that I need,


00:07:46.560 --> 00:07:50.600
which is not available in the standard forms model.


00:07:50.600 --> 00:07:53.220
And each one tends to have its own JavaScript


00:07:53.220 --> 00:07:55.180
and its own collection of bugs.


00:07:55.180 --> 00:07:58.560
And yeah, it is quite frustrating to be honest,


00:07:58.560 --> 00:07:59.560
because you kind of think,


00:07:59.560 --> 00:08:02.000
oh, I don't need to write this from scratch in JavaScript.


00:08:02.000 --> 00:08:04.680
I'll use an extension that already exists out there.


00:08:04.680 --> 00:08:08.380
And then you kind of get stuck in, does it work in Django three?


00:08:08.380 --> 00:08:09.280
Right.


00:08:09.280 --> 00:08:11.140
You know, what state is the JavaScript in?


00:08:11.140 --> 00:08:15.340
And then you read through the source code and you stumble across security issues.


00:08:15.340 --> 00:08:19.460
And it's like, okay, I wasn't, you know, there's a, there's a line between it's


00:08:19.460 --> 00:08:23.500
easier to write it myself and you end up, I ended up just maintaining folks of all


00:08:23.500 --> 00:08:27.060
these extensions and then trying to get pull requests back into them to kind of


00:08:27.060 --> 00:08:27.720
fix things up.


00:08:27.720 --> 00:08:31.380
But, yeah, it's interesting to see, I guess, a different model for doing it.


00:08:31.520 --> 00:08:35.080
which could be applied to Django.


00:08:35.080 --> 00:08:42.920
>> This thing brings me back to the year 2001 web with ASP.NET web forms,


00:08:42.920 --> 00:08:45.240
which are such a weird way to build web apps.


00:08:45.240 --> 00:08:47.240
They tried to mirror desktop apps,


00:08:47.240 --> 00:08:52.160
but you could put a little Ajax tag onto a section and just that part of


00:08:52.160 --> 00:08:56.300
the page would automatically refresh and interact differently.


00:08:56.300 --> 00:08:57.700
This gives me that feel,


00:08:57.700 --> 00:08:59.560
but not old school web,


00:08:59.560 --> 00:09:01.240
but more modern web, which is nice.


00:09:01.240 --> 00:09:31.040
Yeah, I mean, like I was thinking of it, and now a lot of people that are comfortable with like jumping into some JavaScript, this seems silly, I'm sure. But for instance, like me, I never touched JavaScript. So if I've got a little, I've got like a little flask app that pulls up, like test result data, and it'd be great to just have a be able to get a little form there that says, hey, here's here's the version I want to see the results for and be able to pull that up. And it, it doesn't have to be pretty. But this way, I could implement it


00:09:31.040 --> 00:09:34.540
without having to go in and learn JavaScript.


00:09:34.540 --> 00:09:37.040
- Yeah, yeah, and I think this is super neat.


00:09:37.040 --> 00:09:40.120
I'm with you, Anthony, on the trade-off


00:09:40.120 --> 00:09:42.460
of grabbing some of these cool plugins,


00:09:42.460 --> 00:09:43.640
Flask, Django, whatever, and go,


00:09:43.640 --> 00:09:45.860
okay, this is just now adding functionality,


00:09:45.860 --> 00:09:48.800
but then you've kind of gotta understand its assumptions,


00:09:48.800 --> 00:09:51.360
when does it work, like why does it not quite work


00:09:51.360 --> 00:09:53.600
for what you're doing, it's always a trade-off.


00:09:53.600 --> 00:09:56.560
I usually go for the vanilla version of the web


00:09:56.560 --> 00:09:58.800
and just build it myself until it's like really clear


00:09:58.800 --> 00:10:00.440
that there's a big benefit.


00:10:00.440 --> 00:10:02.640
- Yeah, and you bring up an interesting point


00:10:02.640 --> 00:10:04.400
with the security concerns,


00:10:04.400 --> 00:10:07.280
especially anytime you've got dealing with input fields


00:10:07.280 --> 00:10:09.360
and stuff, you've got to be careful with that.


00:10:09.360 --> 00:10:12.840
- Yeah, because they normally run queries in a database.


00:10:12.840 --> 00:10:15.220
So you've got to kind of audit these things


00:10:15.220 --> 00:10:18.240
to make sure that they're not using raw queries


00:10:18.240 --> 00:10:20.720
and that they're not using weird templates


00:10:20.720 --> 00:10:21.560
and stuff like that.


00:10:21.560 --> 00:10:24.040
- Right, they better be parameterized queries


00:10:24.040 --> 00:10:26.040
and not little Bobby Table type queries.


00:10:26.040 --> 00:10:26.860
- Exactly.


00:10:26.860 --> 00:10:27.700
- Yeah, yeah.


00:10:27.700 --> 00:10:30.000
All right, wrong one, this one.


00:10:30.000 --> 00:10:31.740
So what about what's next?


00:10:31.740 --> 00:10:35.140
Um, maybe they're using even bitwise operators in there, Anthony.


00:10:35.140 --> 00:10:35.840
Possibly.


00:10:35.840 --> 00:10:36.280
Yeah.


00:10:36.280 --> 00:10:42.880
Um, so my next, link is bitwise operators in Python, by Bartosz


00:10:42.880 --> 00:10:46.980
Zatrznicki, and this one's really cool.


00:10:46.980 --> 00:10:51.160
What she, I think if you've ever used, bitwise operators or seen


00:10:51.160 --> 00:10:52.400
them in the Python language.


00:10:52.400 --> 00:10:58.760
So this is where you'd use, the pipe symbol to, less than less than,


00:10:58.800 --> 00:11:02.720
which kind of looks like two arrows or right, right, right, which is greater than greater


00:11:02.720 --> 00:11:09.360
than there's a X or is, is there another way to say X or I just use X or.


00:11:09.360 --> 00:11:10.360
Oh yeah.


00:11:10.360 --> 00:11:11.360
That's what I say as well.


00:11:11.360 --> 00:11:12.360
You didn't say Xor or something.


00:11:12.360 --> 00:11:13.360
No.


00:11:13.360 --> 00:11:14.360
Which is the hat sign.


00:11:14.360 --> 00:11:19.480
I can't, well that symbol is called the tilde is for not.


00:11:19.480 --> 00:11:26.840
So yeah, these are basically used for specific types in Python, which support bitwise operators.


00:11:26.840 --> 00:11:31.680
I like this article because they're rarely used in Python


00:11:31.680 --> 00:11:34.600
because you typically use types where you'd use a method


00:11:34.600 --> 00:11:36.640
to do a lot of these things.


00:11:36.640 --> 00:11:39.640
Or most of the time you wouldn't necessarily need to work


00:11:39.640 --> 00:11:42.760
with data which is binary.


00:11:42.760 --> 00:11:46.320
So you wouldn't necessarily need to do these things.


00:11:46.320 --> 00:11:48.160
But if you are working with binary data,


00:11:48.160 --> 00:11:49.500
they're super useful.


00:11:49.500 --> 00:11:52.640
And it takes a bit of time to get your head around.


00:11:52.640 --> 00:11:56.120
So I've got a couple of examples, but yeah,


00:11:56.120 --> 00:12:00.000
I love this tutorial because it actually, it doesn't assume you know anything about


00:12:00.000 --> 00:12:03.240
this topic explains what the binary system is.


00:12:03.240 --> 00:12:09.420
And it uses these icons of hands like it uses emojis, kind of like a mini sign language


00:12:09.420 --> 00:12:16.440
to explain the the the kind of the bytes and stuff like that, which is really cool.


00:12:16.440 --> 00:12:18.200
See I really like it for that reason.


00:12:18.200 --> 00:12:24.320
It's really illustrative and kind of takes you through a few concepts and then how you


00:12:24.320 --> 00:12:30.320
You can use these special operators for some of the built-in types, Python integers, bit


00:12:30.320 --> 00:12:31.320
strings.


00:12:31.320 --> 00:12:35.760
You can also use them for byte arrays, which is really helpful.


00:12:35.760 --> 00:12:38.480
And then it goes into things like bit masks and stuff like that.


00:12:38.480 --> 00:12:45.360
So if you're ever working with any lower level data, this is super helpful to understand.


00:12:45.360 --> 00:12:55.220
And also a little trick I discovered a while ago was if you've ever used the enum built-ins.


00:12:55.220 --> 00:13:01.140
So enum is in the standard library. And if you want to describe an enum, you basically


00:13:01.140 --> 00:13:08.700
create a class and inherit from an enum type, which is in the enum package. And you can


00:13:08.700 --> 00:13:13.820
do a whole bunch of things and just represent things as enums in Python instead of other


00:13:13.820 --> 00:13:20.060
weird ways of doing it. I don't know. Introduced in Python 3.7, I think it was. But there's


00:13:20.060 --> 00:13:30.460
a little known feature in the enums, which is there's an int flag and a flag type. An


00:13:30.460 --> 00:13:37.260
int flag is an enum, which you can represent as a flag, which means you can combine multiple


00:13:37.260 --> 00:13:44.540
of them. So for example, if you had a color, enum, and you had red, blue and green, you


00:13:44.540 --> 00:13:51.500
could represent white as being red, blue and green, and by combining the colors together.


00:13:51.500 --> 00:13:53.460
So nice. Wow, that's cool.


00:13:53.460 --> 00:13:59.140
Yeah, you probably wouldn't make a paint mixer in Python. But there's lots of things, flags,


00:13:59.140 --> 00:14:04.300
for example, like if you're representing system flags, or compiler flags, or any other kind


00:14:04.300 --> 00:14:11.420
flags. This is really useful because it actually implements all the binary operators. So yeah,


00:14:11.420 --> 00:14:17.020
flag and int flag are super helpful types which are built into the standard library. So if you


00:14:17.020 --> 00:14:23.420
ever find yourself doing something like this, or using a package which has implemented its own


00:14:23.420 --> 00:14:28.540
weird version of this feature which is built in, then you can upgrade it to this new syntax and


00:14:28.540 --> 00:14:29.460
and then you're done.


00:14:29.460 --> 00:14:32.580
- So, tell me what does this auto do?


00:14:32.580 --> 00:14:37.460
- Oh, so in enums, if you're gonna say,


00:14:37.460 --> 00:14:40.600
you know, you need to make a representation


00:14:40.600 --> 00:14:43.180
of the enum name.


00:14:43.180 --> 00:14:46.880
And if it's an int enum or int flag,


00:14:46.880 --> 00:14:49.420
you'd say, you know, one, two, three, four, five.


00:14:49.420 --> 00:14:52.240
Like, so if I save it to a file or pickle it or something,


00:14:52.240 --> 00:14:54.460
then it's, this is the number that it represents.


00:14:54.460 --> 00:14:55.640
So I can convert.


00:14:55.640 --> 00:14:58.100
So if you converted the number one to your enum,


00:14:58.100 --> 00:15:00.240
it would know that red was one.


00:15:00.240 --> 00:15:01.880
So, you know, you could basically use it


00:15:01.880 --> 00:15:03.240
for storage or something.


00:15:03.240 --> 00:15:05.780
It's also really helpful, like if you're reading


00:15:05.780 --> 00:15:08.900
from XML files or JSON files or something,


00:15:08.900 --> 00:15:11.480
and there's like, there's a field


00:15:11.480 --> 00:15:13.320
which is stored as an integer,


00:15:13.320 --> 00:15:14.800
but you know that it actually represents


00:15:14.800 --> 00:15:17.320
something a bit more logical, like enumeration,


00:15:17.320 --> 00:15:20.080
then you can do it that way.


00:15:20.080 --> 00:15:22.320
However, for flags, then,


00:15:22.320 --> 00:15:24.320
because they support bitwise operators,


00:15:24.320 --> 00:15:26.480
they should follow the binary sequence.


00:15:26.480 --> 00:15:30.620
So 1, 2, 4, 8, 16, 32, 64, et cetera.


00:15:30.620 --> 00:15:33.580
And once you get past 1,024,


00:15:33.580 --> 00:15:36.380
most people start to forget.


00:15:36.380 --> 00:15:40.280
So instead of working that all out in your head,


00:15:40.280 --> 00:15:42.120
you can just use auto,


00:15:42.120 --> 00:15:45.000
which is a function built into the enum.


00:15:45.000 --> 00:15:46.300
And it will basically just work out


00:15:46.300 --> 00:15:48.280
what that value should be for you.


00:15:48.280 --> 00:15:50.420
So you don't have to work it out in your head.


00:15:50.420 --> 00:15:52.840
- It'll let you like reorder stuff and not have to go,


00:15:52.840 --> 00:15:55.560
oh, now I just wanna go one, two, three,


00:15:55.560 --> 00:15:59.960
or I want to add another one, but in the middle and accidentally messed it up or whatever.


00:15:59.960 --> 00:16:04.920
I think I might use those anyway just to indicate that the actual number isn't important.


00:16:04.920 --> 00:16:07.160
It's just that they're unique.


00:16:07.160 --> 00:16:08.360
Exactly.


00:16:08.360 --> 00:16:13.080
I think if you don't assign it, then it works,


00:16:13.080 --> 00:16:15.240
but with flags you need to assign it to something.


00:16:15.240 --> 00:16:19.800
Yeah, just for people listening who don't necessarily see the code, the show notes,


00:16:19.800 --> 00:16:22.480
The idea is you create a new class and you say like,


00:16:22.480 --> 00:16:25.960
category equals just lowercase auto open close.


00:16:25.960 --> 00:16:28.560
That's the way that you sort of invoke this behavior.


00:16:28.560 --> 00:16:30.480
Also a couple of questions from the listeners


00:16:30.480 --> 00:16:31.600
who are in the live stream.


00:16:31.600 --> 00:16:33.000
Anthony Lister says,


00:16:33.000 --> 00:16:34.960
useful for MicroPython or hardware maybe?


00:16:34.960 --> 00:16:35.680
What do you think?


00:16:35.680 --> 00:16:36.440
Yeah, absolutely.


00:16:36.440 --> 00:16:40.240
If you're working with embedded systems or anything,


00:16:40.240 --> 00:16:42.000
I mean, Brian, you're the expert on this.


00:16:42.000 --> 00:16:44.520
Yeah, you have to work with binary a lot.


00:16:44.520 --> 00:16:47.200
So yeah, this is super helpful because


00:16:47.200 --> 00:16:49.120
you can represent stuff which is


00:16:49.120 --> 00:16:55.280
different states in the system or if you want to read inputs and stuff from multiple channels,


00:16:55.280 --> 00:16:57.280
you're going to need to use Bitwise operators.


00:16:57.280 --> 00:17:02.480
So both the Bitwise operators are really helpful as well as the flags enums.


00:17:02.480 --> 00:17:06.720
Yeah, and Brandon Rayner says Bitwise always confuses me.


00:17:06.720 --> 00:17:10.800
When I see it, I tend to roll my eyes back and ask why. I'm sure there's a reason.


00:17:10.800 --> 00:17:15.120
Well, I mean, one of the things that comes to mind for me is, you know, you're thinking about storing stuff in memory.


00:17:15.120 --> 00:17:19.300
you know, if I wanted to store, say, a number or something like that, or, you


00:17:19.300 --> 00:17:22.060
know, you put that into a Python number, that's like 28 bytes.


00:17:22.060 --> 00:17:25.120
But if you create an array of bytes and you know, the size of them are going to


00:17:25.120 --> 00:17:28.660
be, you know, packed into little bits there, you know, like one to 10 or


00:17:28.660 --> 00:17:32.380
something, a whole bunch, you could be way more efficient by, you know, creating


00:17:32.380 --> 00:17:36.000
little smaller containers and then bitwise oring them together and whatnot.


00:17:36.000 --> 00:17:36.480
Yeah.


00:17:36.480 --> 00:17:41.040
Like bitfields for instance, are a really cool thing, but even just, just straight


00:17:41.040 --> 00:17:46.320
numbers with bitwise operators are important for hardware because you're like a lot of times you


00:17:46.320 --> 00:17:51.280
just have register access to something or you have memory memory mapped registers and you you know


00:17:51.280 --> 00:17:56.560
just uh kind of read those out and there may be a whole bunch of data so each bit might represent


00:17:56.560 --> 00:18:01.280
completely wildly different things so you can't really just check for equality you have to check


00:18:01.280 --> 00:18:07.440
is this bit on or off um or i need to set this bit and leave all the rest alone things like that


00:18:07.440 --> 00:18:09.200
- Yeah, yeah, absolutely, absolutely.


00:18:09.200 --> 00:18:10.880
All right, before we get to our next item,


00:18:10.880 --> 00:18:13.040
let me just let you know this episode is brought to you


00:18:13.040 --> 00:18:15.800
by us, things that Brian and I are doing.


00:18:15.800 --> 00:18:18.360
And so one of the things we just launched over


00:18:18.360 --> 00:18:21.520
at Talk by Then Training is our brand new Fast API course,


00:18:21.520 --> 00:18:24.760
which is a super cool new API framework


00:18:24.760 --> 00:18:26.240
that I think brings together a lot of the things


00:18:26.240 --> 00:18:28.560
that we've been proponents of, you know,


00:18:28.560 --> 00:18:31.720
things like Pydantic, TypeHints, Async and Await,


00:18:31.720 --> 00:18:33.600
all those, they all come together really nice over there.


00:18:33.600 --> 00:18:35.320
So if you wanna learn that, check that out.


00:18:35.320 --> 00:18:38.680
Brian has some book on pytest, so yeah, you can check that as well.


00:18:38.680 --> 00:18:40.240
Links in the show notes.


00:18:40.240 --> 00:18:42.720
The next thing I want to talk about, though,


00:18:42.720 --> 00:18:45.480
is why you should use an ORM.


00:18:45.480 --> 00:18:46.680
Here, there we go.


00:18:46.680 --> 00:18:49.240
So, Anthony, Brian, what do you guys think?


00:18:49.240 --> 00:18:52.640
Raw SQL ORMs, what are your thoughts here?


00:18:52.640 --> 00:18:55.640
Well, I've been using, like, document databases lately,


00:18:55.640 --> 00:18:58.120
and I don't really need an ORM, so...


00:18:58.120 --> 00:19:01.120
I'm with you. So, over there, maybe the R is a D,


00:19:01.120 --> 00:19:04.760
at least if it's a document database, it's an object document mapper, maybe,


00:19:04.760 --> 00:19:07.720
But yeah, I find being able to work with classes,


00:19:07.720 --> 00:19:09.920
like the way I think of it in Python to be,


00:19:09.920 --> 00:19:12.720
that's how I want my data to be and just something else can figure out


00:19:12.720 --> 00:19:15.880
how the database has to break that apart into relationships and stuff.


00:19:15.880 --> 00:19:16.680
Super neat.


00:19:16.680 --> 00:19:18.720
You know, like SQLAlchemy,


00:19:18.720 --> 00:19:22.480
go and say create, like if I had a user and the user had orders,


00:19:22.480 --> 00:19:26.280
like they might have an orders list on the user class.


00:19:26.280 --> 00:19:29.760
To create a new order, you can just go to the user.orders.append,


00:19:29.760 --> 00:19:32.960
that new thing and hit save, commit changes, and then boom.


00:19:32.960 --> 00:19:36.960
you know, it like figures out that has to be inserted and the relationship has to be said and all that.


00:19:36.960 --> 00:19:37.960
Anthony, what do you think?


00:19:37.960 --> 00:19:42.960
I use the Django ORM quite a lot and really like it.


00:19:42.960 --> 00:19:48.160
Learning all the edge cases where it creates queries which are not super efficient.


00:19:48.160 --> 00:19:52.320
But so I guess there's pros and cons like if you were to write raw SQL,


00:19:52.320 --> 00:19:56.960
you know, sometimes if you know SQL really well, then you can write more efficient queries.


00:19:56.960 --> 00:20:00.400
However, there are typically ways around that.


00:20:00.400 --> 00:20:03.120
And the n plus one problem in Django.


00:20:03.120 --> 00:20:06.400
The n plus one is the biggest problem for sure.


00:20:06.400 --> 00:20:09.440
You want to describe the n plus one problem or take a shot at that?


00:20:09.440 --> 00:20:14.320
Oh, yeah. So if you sort of have a foreign key and you reference an entity,


00:20:14.320 --> 00:20:20.080
which might be a many to many relationship, and then you reference a property of it in the query,


00:20:20.080 --> 00:20:25.120
not actually not in the query, but actually in the view, you, you, you mentioned something or


00:20:25.120 --> 00:20:28.640
you look up a field which is part of a mapping to another table.


00:20:28.640 --> 00:20:32.800
Kind of like I described, like if you gave a user to the view and the view wanted to


00:20:32.800 --> 00:20:33.800
know about its orders.


00:20:33.800 --> 00:20:34.800
Yeah.


00:20:34.800 --> 00:20:38.400
So more probably if you gave a list of users and it wanted to know about the orders for


00:20:38.400 --> 00:20:39.400
each of them, right?


00:20:39.400 --> 00:20:40.400
That's the real bad case.


00:20:40.400 --> 00:20:41.400
Yeah.


00:20:41.400 --> 00:20:45.280
So you had it for like, you know, which group people are in or like which team they're in


00:20:45.280 --> 00:20:46.280
or something.


00:20:46.280 --> 00:20:48.640
And it's just, it's the team ID.


00:20:48.640 --> 00:20:51.720
And then you actually want to show it on the table was the team name.


00:20:51.720 --> 00:20:57.240
So what ends up happening is that for every row in the table, it does another query to


00:20:57.240 --> 00:21:00.520
look up the team name, even though they're the same across the board.


00:21:00.520 --> 00:21:06.200
Whereas if you're writing that in SQL, I'd hope you'd do that as an outer join.


00:21:06.200 --> 00:21:11.020
But yeah, so, sorry, not an outer join.


00:21:11.020 --> 00:21:15.720
So yeah, OMs are really useful in that sort of thing, but they do have edge cases.


00:21:15.720 --> 00:21:19.720
For N+1s, pretty sure you covered this one before, but there is an awesome tool called


00:21:19.720 --> 00:21:22.720
N plus one, which you can run in your test suite.


00:21:22.720 --> 00:21:25.040
So when you do all your integration tests with Django,


00:21:25.040 --> 00:21:29.280
it fails the test if it detects an N plus one query,


00:21:29.280 --> 00:21:32.160
which I use quite extensively.


00:21:32.160 --> 00:21:34.520
I think Adam.


00:21:34.520 --> 00:21:36.400
- Oh, I had not heard of this.


00:21:36.400 --> 00:21:38.240
I mean, this is not such a problem for me


00:21:38.240 --> 00:21:41.520
because I work like Brian in document databases,


00:21:41.520 --> 00:21:44.280
but to the extent that I work with like SQLAlchemy


00:21:44.280 --> 00:21:45.680
and stuff like this is really,


00:21:45.680 --> 00:21:47.080
this is the one you're talking about the one.


00:21:47.080 --> 00:21:48.280
- Yeah, yeah, that's it, yeah.


00:21:48.280 --> 00:21:55.160
L-U-S-O-N-E. Yeah, that one. Yeah. So I add it. I only add it in the test suite. So you don't,


00:21:55.160 --> 00:21:58.920
you don't really need to put this into production. So you just load it into Django.


00:21:58.920 --> 00:22:02.600
You're assuming that you have tests, Anthony. Yeah. Well, that's probably a starting point.


00:22:02.600 --> 00:22:08.920
So, or if you're, if you're, you're developing an environment, you can just turn it on, but it would,


00:22:08.920 --> 00:22:15.720
yeah, it basically, it would print a warning and stuff like that. However, there is a config


00:22:15.720 --> 00:22:20.400
option that says that it can raise an exception if it detects one, which is awesome because


00:22:20.400 --> 00:22:27.020
when you run all your tests, it will fire off and fail the test if it detects this type


00:22:27.020 --> 00:22:31.520
of query. And the workaround in Django is actually really simple. You just add another


00:22:31.520 --> 00:22:38.160
function to the chain, the query command basically, which indicates that I'm going to use this


00:22:38.160 --> 00:22:40.920
field in this other table. So it kind of pre-looks up.


00:22:40.920 --> 00:22:45.080
Right, right. Do the join or sub query load or whatever it needs to do. Yeah.


00:22:45.080 --> 00:22:50.520
And the other thing about IRMs that I really like is the migration ability.


00:22:50.520 --> 00:22:55.160
Like, it's fine when you initially design a system, you could, yeah, fine, you can write


00:22:55.160 --> 00:22:57.160
your own custom SQL queries and stuff.


00:22:57.160 --> 00:23:01.040
But, you know, within a week or two, you've added like five extra fields.


00:23:01.040 --> 00:23:05.520
And actually, that one field you added now needs to be a different type or, you know,


00:23:05.520 --> 00:23:12.840
databases are not static things like database structures change all the time in a real application.


00:23:12.840 --> 00:23:18.080
So that becomes an absolute nightmare if you've handcrafted all your SQL, especially if you


00:23:18.080 --> 00:23:21.160
don't have tests.


00:23:21.160 --> 00:23:25.840
So yeah, I mean, for different database engines, there's different ways to do this.


00:23:25.840 --> 00:23:32.080
I mean, SQL Server like has DAX, so you can do DAQ packs and DAQ pack migrations, but


00:23:32.080 --> 00:23:35.800
most of the other database systems don't have that.


00:23:35.800 --> 00:23:39.960
Whereas if you're using the ORM, then, you know, Django and Flask and stuff would create


00:23:39.960 --> 00:23:42.720
the migration for you.


00:23:42.720 --> 00:23:47.320
you're kind of pretty sure that you can add fields as you wish,


00:23:47.320 --> 00:23:49.800
without necessarily breaking things,


00:23:49.800 --> 00:23:53.440
or you can add types and you can describe what to do with the old ones.


00:23:53.440 --> 00:23:59.000
So I think it saves so much time in just working with a live system


00:23:59.000 --> 00:24:03.400
where you're actually constantly making modifications to the table structures and stuff.


00:24:03.400 --> 00:24:06.360
- And maybe you have different developers at different stages,


00:24:06.360 --> 00:24:08.160
or you want to go back in the brain,


00:24:08.160 --> 00:24:10.240
you say, I'm going to go back here


00:24:10.240 --> 00:24:13.560
and then work on this version of the app at this stage,


00:24:13.560 --> 00:24:14.880
you want to be able to go to just run


00:24:14.880 --> 00:24:17.280
the migrations and get to the right structure.


00:24:17.280 --> 00:24:19.680
I find it to be super, super helpful.


00:24:19.680 --> 00:24:22.200
I mean, there are times where you want to get


00:24:22.200 --> 00:24:26.000
a 100,000 records back from the database and ORM doesn't make sense.


00:24:26.000 --> 00:24:28.240
But to me, I feel like you should 80,


00:24:28.240 --> 00:24:30.920
90 percent of the time use an ORM and then there's


00:24:30.920 --> 00:24:32.160
that little edge case where something


00:24:32.160 --> 00:24:33.620
slightly different maybe needs to happen.


00:24:33.620 --> 00:24:37.680
But you shouldn't start there because there's that 10 percent or five percent chance.


00:24:37.680 --> 00:24:43.520
Yeah, that most of our rooms give you the ability to write a raw query. Yeah. And and yeah,


00:24:43.520 --> 00:24:48.080
you should also check those raw queries for SQL injection. And I do have a tool for that.


00:24:48.080 --> 00:24:54.000
If you if you want to, you can run it through the Python security thing that I've built,


00:24:54.000 --> 00:25:01.040
which will scan your code and spot where you've used the raw SQL functions in the flask or m and


00:25:01.040 --> 00:25:06.640
the Django or m. And it will see if there's anything in them, which is pretty likely to leave


00:25:06.640 --> 00:25:08.680
give you subject to a secret injection.


00:25:08.680 --> 00:25:13.160
- Yeah, is that built into your PyCharm security plugin?


00:25:13.160 --> 00:25:14.880
- Yes, yeah, it is.


00:25:14.880 --> 00:25:17.640
- Yeah, I wanna just mention this conversation,


00:25:17.640 --> 00:25:19.400
although not exactly, we didn't pull that much out of it,


00:25:19.400 --> 00:25:21.760
but comes from an article I wanna highlight


00:25:21.760 --> 00:25:24.160
called "Why Should You Use an ORM?


00:25:24.160 --> 00:25:26.280
Object Relational Mapper," written by Karim.


00:25:26.280 --> 00:25:27.440
I'll leave that in the show notes.


00:25:27.440 --> 00:25:29.200
There's a bunch of details that walks you through it.


00:25:29.200 --> 00:25:31.920
So I wanted to cover this so people,


00:25:31.920 --> 00:25:34.280
if they're having this debate on their team,


00:25:34.280 --> 00:25:35.720
or they're not sure which way to go,


00:25:35.720 --> 00:25:38.600
they're new and they're like, what are all these funky acronyms about?


00:25:38.600 --> 00:25:39.600
You know, they can check that out.


00:25:39.600 --> 00:25:44.320
There's the obligatory little Bobby Tables joke in there.


00:25:44.320 --> 00:25:46.240
I gotta go with that.


00:25:46.240 --> 00:25:48.800
This is what your plugin is supposed to detect.


00:25:48.800 --> 00:25:50.960
Is this cool XKCD.


00:25:50.960 --> 00:25:51.720
Cool.


00:25:51.720 --> 00:25:53.000
If you're not on the receiving end.


00:25:53.000 --> 00:25:55.920
One of the things I'd like to bring up around ORMs is that


00:25:55.920 --> 00:26:00.040
like a lot of the ORM tutorials assume that you know SQL.


00:26:00.040 --> 00:26:04.520
And I'd like to see more tutorials on how to use an ORM


00:26:04.520 --> 00:26:08.200
and how to use it correctly without any SQL examples.


00:26:08.200 --> 00:26:11.100
>> Yeah. You know classes in Python.


00:26:11.100 --> 00:26:11.520
>> Yeah.


00:26:11.520 --> 00:26:13.320
>> Here's your way, you don't have to know SQL.


00:26:13.320 --> 00:26:15.280
>> I thought that was the point,


00:26:15.280 --> 00:26:19.760
is that you can think in objects instead of in SQL.


00:26:19.760 --> 00:26:24.480
Why do I got to learn SQL in order to understand the tool?


00:26:24.480 --> 00:26:27.080
>> Another thing that you can turn on that's


00:26:27.080 --> 00:26:29.120
helpful for the N plus one problem,


00:26:29.120 --> 00:26:30.520
at least with SQLAlchemy,


00:26:30.520 --> 00:26:32.840
you can go to the engine when you create it and you can say,


00:26:32.840 --> 00:26:36.760
echo, echo equals true, and it'll echo every single


00:26:36.760 --> 00:26:39.160
underlying SQL command sent to the database.


00:26:39.160 --> 00:26:41.000
You can do something in SQLAlchemy and it'll say,


00:26:41.000 --> 00:26:42.520
here's what the actual thing is.


00:26:42.520 --> 00:26:44.600
And if you've written your code well,


00:26:44.600 --> 00:26:46.920
and you've done the right join stuff,


00:26:46.920 --> 00:26:49.800
you'll just see like a couple of entries for each


00:26:49.800 --> 00:26:51.480
page or interaction you're having.


00:26:51.480 --> 00:26:53.560
You've done it wrong, you'll see your output


00:26:53.560 --> 00:26:55.160
just scream by full of these things.


00:26:55.160 --> 00:26:56.760
Like, ah, there's one of these problems.


00:26:56.760 --> 00:26:58.600
So that's an easy way as well.


00:26:58.600 --> 00:27:00.840
- Is there like a test way to like,


00:27:00.840 --> 00:27:05.240
Like for instance, the check to see how many for a certain test sequence, how many


00:27:05.240 --> 00:27:07.960
database interactions you've done?


00:27:07.960 --> 00:27:13.720
Yeah, there is. Yeah. There is in Django, you can kind of hack a bit of middleware, which


00:27:13.720 --> 00:27:21.080
kind of catches SQL queries and stuff like that. It's not built in, but you can write it. I think


00:27:21.080 --> 00:27:26.680
I've got code sample somewhere that does that. And just say how many queries this page executed.


00:27:26.680 --> 00:27:31.960
Obviously, it depends on that's why it's important to see the database first with test data,


00:27:31.960 --> 00:27:38.040
because if you just run it on an empty database, then typically, or you've got like one row or


00:27:38.040 --> 00:27:41.160
something, then it's going to be like, "Yeah, it's fine." But then when you deploy it to


00:27:41.160 --> 00:27:44.360
production, it's actually running thousands of queries for every page.


00:27:44.360 --> 00:27:49.160
Yeah. Did you end up with what you got in the United States when we tried to roll out the


00:27:49.160 --> 00:27:53.480
healthcare.gov and the entire system went down? And yeah.


00:27:54.920 --> 00:27:55.760
Yeah, whatever.


00:27:55.760 --> 00:27:58.220
They knew it was going to be the entire country using it


00:27:58.220 --> 00:27:59.720
and they didn't load test it.


00:27:59.720 --> 00:28:01.220
Exactly.


00:28:01.220 --> 00:28:03.880
One more thing, a comment from Dave.


00:28:03.880 --> 00:28:07.060
It's also useful when using Django


00:28:07.060 --> 00:28:10.020
to add the Django debug toolbar or Django Silk


00:28:10.020 --> 00:28:11.400
to be aware of what queries are going on.


00:28:11.400 --> 00:28:13.480
And also I would add for Pyramid,


00:28:13.480 --> 00:28:15.200
there's a Pyramid debug toolbar.


00:28:15.200 --> 00:28:17.700
And you can actually see the underlying queries


00:28:17.700 --> 00:28:19.700
and how many of them there are and the timing.


00:28:19.700 --> 00:28:21.160
It's really nice, those things.


00:28:21.160 --> 00:28:22.080
All right.


00:28:22.080 --> 00:28:24.700
Well, let's move on to the next one.


00:28:24.700 --> 00:28:26.360
Sticking with the database stuff, Brian.


00:28:26.360 --> 00:28:28.360
Definitely sticking with databases.


00:28:28.360 --> 00:28:31.960
And SQL. So this one's from Simon Wilson.


00:28:31.960 --> 00:28:35.960
And he's got a tool called, or a library called--


00:28:35.960 --> 00:28:36.960
Dataset.


00:28:36.960 --> 00:28:40.960
Well, yeah, sure, Dataset. But SQLite Utils.


00:28:40.960 --> 00:28:45.460
This is, it's developed as part of the Dataset project,


00:28:45.460 --> 00:28:50.700
but it's usable by anybody that uses SQLite.


00:28:50.700 --> 00:28:52.700
And it's a couple things.


00:28:52.700 --> 00:29:02.100
It's a command line utility, which a lot of databases do have a command line way to query the database, but I don't know if SQLite does.


00:29:02.100 --> 00:29:09.700
But this is a pretty cool command line. You can interrogate, analyze tables and dump things and do all sorts of stuff.


00:29:09.700 --> 00:29:15.540
And even search, it's pretty useful in pretty simple examples.


00:29:15.540 --> 00:29:20.620
One of the things I really like though is the API that it has.


00:29:20.620 --> 00:29:22.680
So there's a Python API to,


00:29:22.680 --> 00:29:25.540
I mean, you can use SQLAlchemy,


00:29:25.540 --> 00:29:28.600
for instance, to interact with SQLite.


00:29:28.600 --> 00:29:35.720
But another way to do it is to use the SQL Utils as an API for SQLite.


00:29:35.720 --> 00:29:37.300
It's a pretty clean,


00:29:37.300 --> 00:29:43.320
simple interaction and I think that's something I want to try because it looks like,


00:29:43.320 --> 00:29:47.920
I do need to get back into some SQL database work,


00:29:47.920 --> 00:29:50.300
and I think this would help a lot.


00:29:50.300 --> 00:29:52.600
>> Yeah. This comes from the dataset,


00:29:52.600 --> 00:29:54.760
it's one of the foundational tools from dataset,


00:29:54.760 --> 00:29:56.200
this project that he's working on,


00:29:56.200 --> 00:29:57.560
which is really interesting.


00:29:57.560 --> 00:30:01.320
It's like empowering data-driven journalism and


00:30:01.320 --> 00:30:04.640
data exploration across all these different data sources


00:30:04.640 --> 00:30:08.160
by converting them all down to SQLite databases.


00:30:08.160 --> 00:30:10.720
Then once they're there, you can explore them in interesting ways.


00:30:10.720 --> 00:30:13.640
So there's like Twitter to SQLite,


00:30:13.640 --> 00:30:15.400
various other things to SQLite,


00:30:15.400 --> 00:30:18.440
Gmail to SQLite, and then you can like explore


00:30:18.440 --> 00:30:22.600
all these different things like GeoJSON to SQLite.


00:30:22.600 --> 00:30:23.640
What else have we got here?


00:30:23.640 --> 00:30:25.800
There's just tons and tons of these things


00:30:25.800 --> 00:30:26.960
that plug into other stuff


00:30:26.960 --> 00:30:28.680
and then gets into this common format.


00:30:28.680 --> 00:30:31.640
And then he also has this cool tool called DogSheep,


00:30:31.640 --> 00:30:33.860
which builds on top of those databases


00:30:33.860 --> 00:30:36.320
that creates like a personal search engine for your life.


00:30:36.320 --> 00:30:37.640
So you could like plug in Twitter,


00:30:37.640 --> 00:30:40.280
you could plug in your iPhoto's library,


00:30:40.280 --> 00:30:43.720
You could plug in your Gmail and then there's a search engine that just says,


00:30:43.720 --> 00:30:44.540
search that.


00:30:44.540 --> 00:30:47.160
So it's like one of the foundational building blocks of like,


00:30:47.160 --> 00:30:51.000
how do I get everything from its original source into SQLite?


00:30:51.000 --> 00:30:51.840
Pretty cool.


00:30:51.840 --> 00:30:52.680
- Yeah.


00:30:52.680 --> 00:30:53.500
- Yeah.


00:30:53.500 --> 00:30:54.720
So, Anthony, what do you think?


00:30:54.720 --> 00:30:58.320
- I'm actually really interested about the next link on his blog,


00:30:58.320 --> 00:31:02.440
which says I commissioned an oil painting of Barbra Streisand's cloned dogs.


00:31:02.440 --> 00:31:04.680
(laughing)


00:31:04.680 --> 00:31:07.560
- It's really nice, actually.


00:31:07.560 --> 00:31:08.640
I kind of like it.


00:31:08.640 --> 00:31:09.640
I thought it was a joke.


00:31:09.640 --> 00:31:10.640
He actually did.


00:31:10.640 --> 00:31:12.960
For gazing the tombstone of the dog that they are.


00:31:12.960 --> 00:31:13.960
Yeah.


00:31:13.960 --> 00:31:14.960
Okay.


00:31:14.960 --> 00:31:15.960
Interesting.


00:31:15.960 --> 00:31:16.960
Yeah.


00:31:16.960 --> 00:31:17.960
I'm not sure what it has to do with SQLite, but it's pretty cool.


00:31:17.960 --> 00:31:23.040
I think, yeah, more tools for journalists and stuff as they start to work with data


00:31:23.040 --> 00:31:26.360
and data becomes more readily available, or at least there's more of it.


00:31:26.360 --> 00:31:27.360
So yeah.


00:31:27.360 --> 00:31:32.800
And people aren't necessarily, yeah, don't necessarily have the technical skills to work


00:31:32.800 --> 00:31:34.840
with massive data sets and stuff like that.


00:31:34.840 --> 00:31:39.280
So yeah, it'd be really interesting to use some of these tools.


00:31:39.280 --> 00:31:40.280
For sure.


00:31:40.280 --> 00:31:43.600
Simon Wilson was one of the co-founders of Django.


00:31:43.600 --> 00:31:46.200
I had him on Talk Python recently, but it's not published yet.


00:31:46.200 --> 00:31:48.720
And we talked about Datasette and DogSheep.


00:31:48.720 --> 00:31:50.480
And there's just a lot of interesting stuff.


00:31:50.480 --> 00:31:55.000
But one of the stories that he tells, so people can listen to the episode, but he has a dog,


00:31:55.000 --> 00:31:56.880
which may be this commissioned thing.


00:31:56.880 --> 00:31:59.160
He's like really got this dog that has a Twitter.


00:31:59.160 --> 00:32:00.800
The dog has its own Twitter account.


00:32:00.800 --> 00:32:05.040
So for example, some of the interesting stuff that he did was his dog in the Twitter account


00:32:05.040 --> 00:32:08.720
will tweet when it goes to the veterinarian, like how much it weighs and stuff.


00:32:08.720 --> 00:32:10.820
And then it will tweet pictures when it's on a walk.


00:32:10.820 --> 00:32:17.840
And he was able to do things like create a graph over time of his dog's weight by just


00:32:17.840 --> 00:32:21.560
doing a SQL query against the dog's Twitter account that got pulled in.


00:32:21.560 --> 00:32:25.560
Like all sorts of weird connections of like pulling data together that you just couldn't


00:32:25.560 --> 00:32:26.560
imagine.


00:32:26.560 --> 00:32:29.440
So yeah, anyway, really, really neat stuff there.


00:32:29.440 --> 00:32:30.440
Okay.


00:32:30.440 --> 00:32:31.440
Yeah.


00:32:31.440 --> 00:32:32.440
All right.


00:32:32.440 --> 00:32:33.440
People would check that out.


00:32:33.440 --> 00:32:40.400
And then you want to wrap it up with a talk that is very work from home-ish.


00:32:40.400 --> 00:32:41.400
Conference is very work from home-ish.


00:32:41.400 --> 00:32:42.880
A talk from there, maybe?


00:32:42.880 --> 00:32:43.880
Yeah.


00:32:43.880 --> 00:32:44.880
Yeah.


00:32:44.880 --> 00:32:51.720
So my next one is from the Pyjamas conference, which happened a couple of weeks ago.


00:32:51.720 --> 00:32:56.560
And this is, yeah, lots of online conferences happening at the moment, which I kind of sign


00:32:56.560 --> 00:33:00.800
up for and look at the, you know, the talk list and think, oh, great, that'll be really


00:33:00.800 --> 00:33:04.240
interesting and then never actually get around to watching any of them.


00:33:04.240 --> 00:33:05.240
Exactly.


00:33:05.240 --> 00:33:09.360
Yeah, I'm just kind of struggling with this online conferencing thing.


00:33:09.360 --> 00:33:10.840
The ideas are really cool.


00:33:10.840 --> 00:33:13.320
The concept is cool, but the practicalities of it.


00:33:13.320 --> 00:33:18.620
Yeah, especially like, I don't know if it's different in our house, but the conference


00:33:18.620 --> 00:33:22.520
run over a weekend and I just wanted, you know, maybe an hour or so to watch some of


00:33:22.520 --> 00:33:27.160
of talks and things, but just sitting down on the couch and turning the TV on, putting


00:33:27.160 --> 00:33:29.120
on YouTube and then sitting and watching talks.


00:33:29.120 --> 00:33:31.680
And it was like, the kids isn't making so much noise.


00:33:31.680 --> 00:33:33.200
My wife's like, why are you watching TV?


00:33:33.200 --> 00:33:34.200
There's loads of stuff to do.


00:33:34.200 --> 00:33:37.680
And I'm like, no, but I'm, this isn't.


00:33:37.680 --> 00:33:38.680
And then...


00:33:38.680 --> 00:33:39.680
Is this work?


00:33:39.680 --> 00:33:40.680
It actually is work.


00:33:40.680 --> 00:33:41.680
I'm sure it is.


00:33:41.680 --> 00:33:42.680
Yeah, yeah, sure.


00:33:42.680 --> 00:33:43.680
It looks like work.


00:33:43.680 --> 00:33:44.680
Yeah.


00:33:44.680 --> 00:33:45.680
So, yeah.


00:33:45.680 --> 00:33:46.680
I see pajamas.


00:33:46.680 --> 00:33:47.680
There's pajamas up there.


00:33:47.680 --> 00:33:48.680
This doesn't make it, this doesn't feel like work.


00:33:48.680 --> 00:33:49.680
Yeah.


00:33:49.680 --> 00:33:50.680
And I definitely wasn't in my pajamas.


00:33:50.680 --> 00:33:51.680
10 in the morning.


00:33:51.680 --> 00:33:54.320
So, yeah, I don't know.


00:33:54.320 --> 00:33:57.800
I know I'm kind of talked about this and a couple of other people said they're


00:33:57.800 --> 00:34:00.720
having similar challenges with these online conferences.


00:34:00.720 --> 00:34:02.440
Just like, where do you fit them in?


00:34:02.440 --> 00:34:07.880
And if you actually go to a conference, it's like you've got an excuse that this


00:34:07.880 --> 00:34:10.560
is more, this is like my time is now set out.


00:34:10.560 --> 00:34:14.760
Whereas if I was to say I'm going away for a few days to a conference, that's fine.


00:34:14.760 --> 00:34:18.040
But if I try to attend that conference at home, it's like that's not.


00:34:18.040 --> 00:34:18.640
Yeah. Yeah.


00:34:18.640 --> 00:34:21.840
I'm going to lock myself in my room and watch TV for two days.


00:34:21.840 --> 00:34:22.840
I'll be back.


00:34:22.840 --> 00:34:23.840
Yeah, yeah, exactly.


00:34:23.840 --> 00:34:24.840
It's not the same story.


00:34:24.840 --> 00:34:30.560
Yeah, someone at work actually suggested that we have like a work hotel sort of thing where


00:34:30.560 --> 00:34:33.640
people can attend virtual conferences.


00:34:33.640 --> 00:34:39.080
Where, you know, especially if you're on if they're late at night or they're in weird


00:34:39.080 --> 00:34:40.160
time zones and stuff.


00:34:40.160 --> 00:34:44.240
So even if it's just in your local city, you can go and stay there.


00:34:44.240 --> 00:34:46.640
So you can at least dedicate the time.


00:34:46.640 --> 00:34:51.760
Anyway, the pyjamas, which I really wanted to attend, I managed to get through half a talk.


00:34:51.760 --> 00:34:58.720
And then I watched the other half like a week later. And so that was not very successful.


00:34:58.720 --> 00:35:04.640
However, the talk was brilliant. So I wanted to share a link. It was called what the struct


00:35:04.640 --> 00:35:13.200
by Zachary Anglin. And it's talking about the struct library, which is built into


00:35:13.200 --> 00:35:17.840
the standard library. I didn't really realize there was a struct library, right? Like there


00:35:17.840 --> 00:35:22.800
is an array library that says this will hold floats contiguously. Same thing for structs, right?


00:35:22.800 --> 00:35:27.840
Yeah, exactly. And I think, you know, Brian was talking about data classes before we went live,


00:35:27.840 --> 00:35:32.160
actually. But, you know, data classes are really cool. Like if you wanted to represent


00:35:32.160 --> 00:35:37.600
interesting structures and stuff like that. ORMs are really important for this sort of thing.


00:35:37.600 --> 00:35:42.720
But if you're working with binary data, reading the binary data and then converting it into


00:35:42.720 --> 00:35:48.800
native Python types. Often, you know, you do C for that sort of thing. And in C, you just


00:35:48.800 --> 00:35:52.640
declare a struct and just say, there's these fields. And you can just read and write that


00:35:52.640 --> 00:35:58.400
into binary structures, which is kind of built in. But sometimes you need to do that in Python,


00:35:58.400 --> 00:36:03.440
if you're working with... Actually, I've got some examples. So this explains what the struct


00:36:03.440 --> 00:36:08.960
library is. And it also has this macro language for describing what the underlying type is.


00:36:10.080 --> 00:36:15.440
And then you can kind of like pack and unpack it basically. So you can say, here's my class or


00:36:15.440 --> 00:36:22.960
whatever. And here's the fields and the underlying binary structure is a float 32 bit integer or


00:36:22.960 --> 00:36:29.760
binary Boolean or, you know, it may be a ASCII string or something. So yeah, there's basically


00:36:29.760 --> 00:36:36.800
all these like little characters for packing and unpacking data. So yeah, it's really helpful.


00:36:37.600 --> 00:36:42.080
If you're getting into this topic of working with binary data structures, or something that you've


00:36:42.080 --> 00:36:50.640
wanted to do, I recommend if you're on a Mac using a tool called Sinalyze it, or Spice Sinalysis,


00:36:50.640 --> 00:36:58.560
which is basically a GUI for working with binary data. And it has a database of grammars.


00:36:58.560 --> 00:37:04.880
So you can basically like open a compiled executable or, you know, something like that.


00:37:05.680 --> 00:37:09.920
And it would be like, oh, I know what this format is. And it would then just represent it in


00:37:09.920 --> 00:37:14.320
actually something more understandable. And you can edit fields and hack around with stuff.


00:37:14.320 --> 00:37:21.760
It's great if you're doing capture the flags, or if you're doing some hacking for good.


00:37:21.760 --> 00:37:30.720
It's also really cool if you want to edit files, which are not in a human readable format,


00:37:30.720 --> 00:37:35.200
if they're in a binary format. And in the database, they've got a whole bunch of examples,


00:37:35.200 --> 00:37:40.160
including a lot of save game formats. So this is actually how I got into this topic.


00:37:40.160 --> 00:37:44.160
Originally, it was when I was a lot younger playing games and stuff. And I'm like,


00:37:44.160 --> 00:37:49.200
what is this file? And then, you know, trying to echo it on the shell, and it would be like,


00:37:49.200 --> 00:37:54.080
oh, that's all garbled. And then realizing it's all in binary. And then, you know, trying to figure


00:37:54.080 --> 00:37:58.880
out if you open it up in a hex editor or something, what it is. And then, oh, if I change this field,


00:37:58.880 --> 00:38:03.600
than I can give myself more gold or I can make my character invincible or...


00:38:03.600 --> 00:38:07.040
So basically like hacking the game by modifying the save game.


00:38:07.040 --> 00:38:09.680
This end would also be so much easier if I had a hundred thousand


00:38:09.680 --> 00:38:13.040
hit points or whatever. So let's just increment that number.


00:38:13.040 --> 00:38:17.440
Yeah, exactly. I think modern games are a bit, they kind of put protections around the save game


00:38:17.440 --> 00:38:22.160
because there's a lot more online aspect, but definitely older games, you can hack the save


00:38:22.160 --> 00:38:27.680
games and most of them give yourself whatever it is that you feel like. So yeah, understanding


00:38:27.680 --> 00:38:30.240
binary structures is really helpful on the structs.


00:38:30.240 --> 00:38:34.400
You can even automate it using the structs much more.


00:38:34.400 --> 00:38:38.320
Yeah, nice. Yeah, there's also some good comparisons between


00:38:38.320 --> 00:38:42.720
like the values of structs and then tuples and named tuples and data classes


00:38:42.720 --> 00:38:46.080
and pydantic. So there's sort of a spectrum that gets covered there as well.


00:38:46.080 --> 00:38:51.680
Yeah, interesting. Goes in line well with the bit manipulation


00:38:51.680 --> 00:38:56.000
topic you were talking about. It's like for instance,


00:38:56.000 --> 00:39:03.680
Very structured structs are very important for message systems, like communication systems.


00:39:03.680 --> 00:39:11.200
We have very defined fields within each, within the, you know, we've got 128-bit sequence or


00:39:11.200 --> 00:39:18.720
1,000 bits in there. Each bit is specifically assigned to different things. And those are,


00:39:18.720 --> 00:39:24.000
yeah, you definitely don't want to just hope that it's right. You have to put it exactly where you


00:39:24.000 --> 00:39:25.820
- Yeah, exactly.


00:39:25.820 --> 00:39:28.400
Like little network packet headers and things like that.


00:39:28.400 --> 00:39:30.280
- Yeah, I'm using this at the moment


00:39:30.280 --> 00:39:32.120
'cause I'm writing a disassembler.


00:39:32.120 --> 00:39:34.400
So it's quite helpful.


00:39:34.400 --> 00:39:37.040
- Yeah, awesome.


00:39:37.040 --> 00:39:39.280
Yeah, you're definitely doing some low level stuff


00:39:39.280 --> 00:39:40.160
these days.


00:39:40.160 --> 00:39:43.840
So I guess that's our main items for today.


00:39:43.840 --> 00:39:46.520
Brian, you got some extras you wanna share?


00:39:46.520 --> 00:39:49.740
- Yeah, we had poked by the Python Software Foundation


00:39:49.740 --> 00:39:52.280
that we should probably plan some events


00:39:52.280 --> 00:39:57.280
because we've got a meetup, the Python PDX West meetup,


00:39:57.280 --> 00:40:01.340
but I can't access the building that we normally held it in


00:40:01.340 --> 00:40:03.280
and nobody would come anyway, right?


00:40:03.280 --> 00:40:04.940
So we're doing virtual.


00:40:04.940 --> 00:40:06.940
So we've got January 14th,


00:40:06.940 --> 00:40:09.620
we're gonna start seeing what it's like


00:40:09.620 --> 00:40:10.700
to do a virtual thing.


00:40:10.700 --> 00:40:12.940
And I thought, normally when we did the meetups


00:40:12.940 --> 00:40:15.100
before it was in the evening,


00:40:15.100 --> 00:40:17.780
I don't really wanna hang out in the evening doing this,


00:40:17.780 --> 00:40:19.460
but at lunchtime would be fine.


00:40:19.460 --> 00:40:22.320
So I thought like a lunch and learn thing.


00:40:22.320 --> 00:40:23.940
So we're gonna try that, see what it's like.


00:40:23.940 --> 00:40:25.040
- Yeah, it's perfect.


00:40:25.040 --> 00:40:27.260
Being virtual, you could just do it during lunch, right?


00:40:27.260 --> 00:40:30.320
You don't have to go, okay, well, I'm gonna drive out,


00:40:30.320 --> 00:40:32.280
you know, fight the traffic or whatever, right?


00:40:32.280 --> 00:40:33.860
- Yeah, and I don't have to convince my boss


00:40:33.860 --> 00:40:35.780
to buy a bunch of pizzas.


00:40:35.780 --> 00:40:38.320
So it's good. - Yeah, exactly, exactly.


00:40:38.320 --> 00:40:40.460
All right, I got a couple of extras as well.


00:40:40.460 --> 00:40:42.740
I ended up doing a fast API webcast


00:40:42.740 --> 00:40:44.380
with the folks over at JetBrains.


00:40:44.380 --> 00:40:46.160
So people can check that out.


00:40:46.160 --> 00:40:49.160
They wanna go learn more about that.


00:40:49.160 --> 00:40:53.200
And then also, let me close my notes here,


00:40:53.200 --> 00:40:54.560
but I'll get them back.


00:40:54.560 --> 00:40:55.400
Brian, you go next.


00:40:55.400 --> 00:40:57.120
I gotta pull this up somewhere else.


00:40:57.120 --> 00:40:58.520
- I just went, so let's--


00:40:58.520 --> 00:40:59.920
- Sorry, yeah, you got it.


00:40:59.920 --> 00:41:01.880
Anthony, what are you up to these days?


00:41:01.880 --> 00:41:03.960
What extra you got to share, folks?


00:41:03.960 --> 00:41:08.200
- Yeah, so I'm gonna be starting at Microsoft in February,


00:41:08.200 --> 00:41:09.840
which is big news for me.


00:41:09.840 --> 00:41:11.560
- Yeah, congratulations, that's awesome.


00:41:11.560 --> 00:41:13.440
- Yeah, yeah, I'm really excited about it.


00:41:13.440 --> 00:41:16.040
So yeah, I'm gonna be the Python developer advocate


00:41:16.040 --> 00:41:17.880
working with Nina Zakharenko.


00:41:17.880 --> 00:41:21.160
So Nina is the current Python developer advocate,


00:41:21.160 --> 00:41:22.920
and I'm gonna be helping out.


00:41:22.920 --> 00:41:25.440
So yeah, really looking forward to it


00:41:25.440 --> 00:41:28.440
and working with a bunch of smart people over at Microsoft.


00:41:28.440 --> 00:41:30.440
So yeah, all things Python.


00:41:30.440 --> 00:41:33.800
- Do you know any particular projects you're working on?


00:41:33.800 --> 00:41:36.360
- So I'm not gonna be, I'm not gonna be,


00:41:36.360 --> 00:41:37.960
I'm not on the engineering team.


00:41:37.960 --> 00:41:41.200
And I'm definitely not working on Pigeon.


00:41:41.200 --> 00:41:43.160
This has got nothing to do with Pigeon.


00:41:43.160 --> 00:41:46.960
Contrary to the rumor, I guess.


00:41:46.960 --> 00:41:49.060
I heard or a compendium. That's what I heard. Come on.


00:41:49.060 --> 00:41:55.020
Yeah, I yeah, I'm definitely not. So yeah, this is kind of a side thing. But


00:41:55.020 --> 00:42:01.500
yeah, it's kind of definitely the Azure platform and like using Python and


00:42:01.500 --> 00:42:07.180
Python working with Azure and on Azure VS code and the Python extension and


00:42:07.180 --> 00:42:11.860
just the tooling and in around that, as well as the Python ecosystem with


00:42:11.860 --> 00:42:16.220
Microsoft products in general, or Microsoft technologies, and Python in


00:42:16.220 --> 00:42:21.580
general. So all things Python and yeah, really looking forward to starting on the 1st of


00:42:21.580 --> 00:42:26.620
Feb. And yeah, I have a long list of things that I want to want to get stuck into.


00:42:26.620 --> 00:42:30.780
Yeah, I'm guessing that's remote, not just now, but permanently, right?


00:42:30.780 --> 00:42:31.780
Yes. Yeah.


00:42:31.780 --> 00:42:37.220
Yeah, that's super, that's super exciting. But that does mean, Brian, that he'll be somewhat


00:42:37.220 --> 00:42:42.220
in our neighborhood more often. I suspect you'll come up to Seattle and Redmond sometimes


00:42:42.220 --> 00:42:44.900
when that happens again, when the world is let loose.


00:42:44.900 --> 00:42:49.620
Yeah, I expect so when we're not even allowed to leave the country at the moment.


00:42:49.620 --> 00:42:50.920
Yeah.


00:42:50.920 --> 00:42:53.940
We'll see you in the Northwest once in a while.


00:42:53.940 --> 00:42:54.980
Yeah, yeah.


00:42:54.980 --> 00:42:58.020
When, when, maybe 2022.


00:42:58.020 --> 00:42:58.180
Yeah.


00:42:58.180 --> 00:42:59.540
What 2030 we'll see.


00:42:59.540 --> 00:43:00.980
We'll definitely see you 2030.


00:43:00.980 --> 00:43:01.540
No problem.


00:43:01.540 --> 00:43:06.740
Also, from, from, from, the YouTube stream, Piling says, congrats, Anthony, on the new job.


00:43:06.740 --> 00:43:07.620
Thanks Piling.


00:43:07.620 --> 00:43:07.940
Yeah.


00:43:07.940 --> 00:43:08.180
Yeah.


00:43:08.180 --> 00:43:14.020
So we should have like a, like a webpage with like a, graphic to show like how many,


00:43:14.020 --> 00:43:19.020
Like well-known Python people there are, and the, like maybe a death star,


00:43:19.020 --> 00:43:22.300
Microsoft sucking all the Python people into Microsoft.


00:43:22.300 --> 00:43:22.940
Yeah.


00:43:22.940 --> 00:43:26.220
That's pretty evenly distributed.


00:43:26.220 --> 00:43:28.500
Yeah.


00:43:28.500 --> 00:43:30.060
No, it's all good.


00:43:30.060 --> 00:43:30.540
All right.


00:43:30.540 --> 00:43:34.060
Well, I feel like, might be time to wrap this up with the joke.


00:43:34.060 --> 00:43:34.740
You think?


00:43:34.740 --> 00:43:35.380
Sure.


00:43:35.380 --> 00:43:35.900
Yeah.


00:43:35.900 --> 00:43:41.300
So, this one came to us over Twitter from Lars and there was a, apparently a


00:43:41.300 --> 00:43:46.340
question, someone named Kate Maddox asks, what's the best programming language for


00:43:46.340 --> 00:43:47.780
coding your own therapist?


00:43:47.780 --> 00:43:49.160
You know, like we're all stuck at home.


00:43:49.160 --> 00:43:54.200
People are depressed, have social anxiety or just anxiety about the world in general.


00:43:54.200 --> 00:43:57.280
And Wes comes along with an appropriate answer.


00:43:57.280 --> 00:43:58.040
What do you guys think here?


00:43:58.040 --> 00:44:00.080
Python of course is the language.


00:44:00.080 --> 00:44:01.720
So you can call it there up.


00:44:01.720 --> 00:44:04.720
I E H R a dot P Y.


00:44:04.720 --> 00:44:05.320
Yeah.


00:44:05.320 --> 00:44:09.740
I think it's pretty much on par for our standard jokes though.


00:44:09.740 --> 00:44:12.620
[LAUGHTER]


00:44:12.620 --> 00:44:13.740
Yeah.


00:44:13.740 --> 00:44:15.660
Might be better than average, actually.


00:44:15.660 --> 00:44:16.020
Yeah.


00:44:16.020 --> 00:44:17.100
Yeah, it could be better than average.


00:44:17.100 --> 00:44:19.340
You need a little drum kit in the background, Brian,


00:44:19.340 --> 00:44:19.940
that you can--


00:44:19.940 --> 00:44:20.440
Yeah.


00:44:20.440 --> 00:44:21.500
[DRUMMING]


00:44:21.500 --> 00:44:22.100
Some cymbals.


00:44:22.100 --> 00:44:23.180
We'll set you up with that little--


00:44:23.180 --> 00:44:24.180
It's a business expense.


00:44:24.180 --> 00:44:25.860
I'll totally get a drum kit.


00:44:25.860 --> 00:44:27.300
Yeah.


00:44:27.300 --> 00:44:28.300
Fantastic.


00:44:28.300 --> 00:44:28.780
All right.


00:44:28.780 --> 00:44:30.220
Well, Brian, thanks as always.


00:44:30.220 --> 00:44:32.060
And Anthony, thanks for joining us.


00:44:32.060 --> 00:44:32.580
Thank you.


00:44:32.580 --> 00:44:33.620
Yeah, always a pleasure.


00:44:33.620 --> 00:44:34.260
Yeah, you bet.


00:44:34.260 --> 00:44:36.380
And everyone listening, see you next time.


00:44:36.380 --> 00:44:38.100
Thank you for listening to Python Bytes.


00:44:38.100 --> 00:44:43.740
Follow the show on Twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S.


00:44:43.740 --> 00:44:46.920
And get the full show notes at PythonBytes.fm.


00:44:46.920 --> 00:44:50.620
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:44:50.620 --> 00:44:51.620
way.


00:44:51.620 --> 00:44:53.860
We're always on the lookout for sharing something cool.


00:44:53.860 --> 00:44:56.900
On behalf of myself and Brian Auchin, this is Michael Kennedy.


00:44:56.900 --> 00:45:00.100
Thank you for listening and sharing this podcast with your friends and colleagues.

