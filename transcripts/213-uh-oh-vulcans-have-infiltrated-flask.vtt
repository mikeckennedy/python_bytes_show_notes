WEBVTT

00:00:00.001 --> 00:00:05.380
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.380 --> 00:00:12.760
This is episode 213, recorded December 23rd, or Anthony, Anthony Shaw here.

00:00:12.760 --> 00:00:14.880
Is this December 23rd or 24th? You tell me.

00:00:14.880 --> 00:00:16.060
It's the 24th, it's Christmas Eve.

00:00:16.060 --> 00:00:16.940
Yeah, of course.

00:00:16.940 --> 00:00:17.200
Yeah.

00:00:17.200 --> 00:00:18.580
In Australia, awesome.

00:00:18.580 --> 00:00:19.120
In the future.

00:00:19.120 --> 00:00:24.940
Yeah, 23rd for us, Brian and me, here in the US, 2020.

00:00:25.580 --> 00:00:30.120
And yeah, this episode is brought to you by us, so we'll talk more about that later.

00:00:30.120 --> 00:00:31.800
And I'm Michael Kennedy.

00:00:31.800 --> 00:00:32.960
And I am Brian Okken.

00:00:32.960 --> 00:00:36.140
And Brian, we got a special guest here, friend of the show, Anthony Shaw.

00:00:36.140 --> 00:00:36.940
Welcome, Anthony.

00:00:36.940 --> 00:00:38.420
Hi there. Great to be on.

00:00:38.420 --> 00:00:42.520
Yeah, it's good to have you here. Thanks for taking time out of your holiday.

00:00:42.520 --> 00:00:47.080
Yeah, no, it's a pleasure. It started last night, so the Christmas holiday has now started.

00:00:47.080 --> 00:00:48.900
I'm off for two weeks. It should be lovely.

00:00:48.900 --> 00:00:50.860
Yeah, it should be very lovely.

00:00:50.860 --> 00:00:56.260
So, you've got, I think everyone on Twitter is jealous of all the pictures that you post

00:00:56.260 --> 00:00:58.300
when it's like cold and gray.

00:00:58.300 --> 00:01:01.440
And you're like, oh yeah, there's this beautiful sunny beach here in the summer in Australia

00:01:01.440 --> 00:01:03.520
that I happen to be suffering through.

00:01:03.520 --> 00:01:05.560
Yeah, it is.

00:01:05.560 --> 00:01:10.440
Yeah, it's the middle of summer here and it's, yeah, beautiful weather and five minute walk

00:01:10.440 --> 00:01:10.900
to the beach.

00:01:10.900 --> 00:01:11.680
So, yeah.

00:01:11.680 --> 00:01:12.460
Yeah, yeah, yeah.

00:01:12.460 --> 00:01:13.400
Not too bad.

00:01:13.400 --> 00:01:13.940
Not too bad.

00:01:13.940 --> 00:01:14.420
Cool.

00:01:14.420 --> 00:01:15.640
Well, welcome to the show.

00:01:15.640 --> 00:01:16.420
Happy to have you here.

00:01:16.420 --> 00:01:21.060
I want to kick us off with this project called Django Ledger.

00:01:21.060 --> 00:01:23.940
And Django Ledger is, have you guys heard of this?

00:01:23.940 --> 00:01:24.400
No.

00:01:24.400 --> 00:01:30.400
Yeah, so Django Ledger, you've probably heard of QuickBooks or FreshBooks or some of this accounting

00:01:30.400 --> 00:01:32.760
software, right, that you've got to work with.

00:01:32.760 --> 00:01:37.840
You know, it allows you to do either it's a desktop app or some kind of online thing where

00:01:37.840 --> 00:01:44.140
you create purchase orders, you keep track of who your customers are, when they owe you money,

00:01:44.140 --> 00:01:46.680
you accept payments, all that kind of stuff, right?

00:01:46.680 --> 00:01:52.100
So Django Ledger is something like that built in Django, which I think is really cool because

00:01:52.100 --> 00:01:53.920
it could serve multiple purposes.

00:01:53.920 --> 00:01:58.340
One, you could take it and just run it for yourself or for your company and then customize

00:01:58.340 --> 00:01:58.780
it.

00:01:58.780 --> 00:02:04.400
Or you could actually use it to extend something, you know, build something on top of it, or maybe

00:02:04.400 --> 00:02:05.920
even offer services in it, right?

00:02:05.920 --> 00:02:10.500
If you're like Stripe, maybe it makes sense to integrate some sort of plug in here because

00:02:10.500 --> 00:02:14.440
then you get 3% of everything that company makes basically, that's where credit cards

00:02:14.440 --> 00:02:14.820
go, right?

00:02:14.820 --> 00:02:19.860
So it's a bookkeeping and financial analysis engine for the Django framework, which pretty

00:02:19.860 --> 00:02:20.080
sweet.

00:02:20.080 --> 00:02:20.940
It's open source.

00:02:20.940 --> 00:02:26.520
And if you look through its features, it has a chart of accounts and basically customers,

00:02:26.520 --> 00:02:33.960
financial statements, has multi-tenancy support, has stuff for operations, for investing, has

00:02:33.960 --> 00:02:37.880
bills and invoices and bank accounts, all that kind of stuff.

00:02:37.880 --> 00:02:39.360
And yeah, pretty awesome, right?

00:02:39.360 --> 00:02:40.860
Wait, multi-tenancy?

00:02:40.860 --> 00:02:43.600
So is there like North Tennessee and South Tennessee or?

00:02:43.600 --> 00:02:44.920
That would be Dakota.

00:02:44.920 --> 00:02:46.700
I think Tennessee, there's only just one tenant.

00:02:46.700 --> 00:02:46.960
No.

00:02:46.960 --> 00:02:48.000
Yeah.

00:02:48.000 --> 00:02:52.460
I think if you wanted to run this as like a platform as a service type of thing and you

00:02:52.460 --> 00:02:56.960
wanted to offer up, if you wanted to basically create your version of FreshBooks, I feel like

00:02:56.960 --> 00:02:57.580
that's what it would be.

00:02:57.880 --> 00:03:03.180
If you're an accountant that serviced multiple clients, you'd probably do it that way, I

00:03:03.180 --> 00:03:03.360
guess.

00:03:03.360 --> 00:03:04.220
It looks pretty cool.

00:03:04.220 --> 00:03:09.820
I thought there's a project called Ledger, which is open source, but it's not a, I don't

00:03:09.820 --> 00:03:10.660
think it's a Python project.

00:03:10.660 --> 00:03:12.700
I think it's written in something completely different.

00:03:12.700 --> 00:03:18.420
So yeah, this is really cool and great, I think, for businesses who maybe have someone

00:03:18.420 --> 00:03:19.440
who can set this up.

00:03:19.440 --> 00:03:21.900
I'm guessing it's not available as a service.

00:03:21.900 --> 00:03:23.000
You have to kind of...

00:03:23.000 --> 00:03:23.800
I don't think so.

00:03:23.800 --> 00:03:25.380
Especially, yeah, yeah.

00:03:25.380 --> 00:03:28.680
If you look at it, it says this project is under active development.

00:03:28.680 --> 00:03:30.260
It's not quite ready for production.

00:03:30.260 --> 00:03:34.580
So this comes to us from Miguel Sanda.

00:03:34.580 --> 00:03:35.860
I believe that's his project.

00:03:35.860 --> 00:03:41.920
And I would love to see what the roadmap for stability is and when this is ready, when it's

00:03:41.920 --> 00:03:42.300
coming out.

00:03:42.300 --> 00:03:47.740
But it's basically all Python and HTML and just a tiny bit of TypeScript, like a salt

00:03:47.740 --> 00:03:48.300
level.

00:03:48.300 --> 00:03:54.100
Stuff that's coming is like inventory management, cash flow, taxes, all the fun stuff.

00:03:54.100 --> 00:03:56.480
And Brian, even BDD is coming.

00:03:56.480 --> 00:03:57.520
I don't understand.

00:03:57.520 --> 00:03:59.020
Behavior driven...

00:03:59.020 --> 00:04:00.820
Oh, behavior driven development tests.

00:04:00.820 --> 00:04:01.640
Yeah, yeah, yeah.

00:04:01.640 --> 00:04:07.620
And so they're also actively looking for contributors, especially anyone with financial or accounting

00:04:07.620 --> 00:04:08.360
experience.

00:04:08.360 --> 00:04:12.640
So if you're looking for some project to contribute to, you know, that'd be great.

00:04:12.640 --> 00:04:13.840
You could contribute to this one.

00:04:13.840 --> 00:04:17.740
It's not super well known yet, but I thought I would shine a little bit of a light on it because

00:04:17.740 --> 00:04:19.600
it seems like it's a cool idea.

00:04:19.600 --> 00:04:21.860
Well, it's even got invoicing and stuff too.

00:04:21.860 --> 00:04:24.040
So I think this is pretty neat.

00:04:24.040 --> 00:04:25.320
Yeah, absolutely.

00:04:25.320 --> 00:04:27.340
So what's up next for you, Brian?

00:04:27.340 --> 00:04:28.040
What do you got for us?

00:04:28.040 --> 00:04:29.340
Next up?

00:04:29.340 --> 00:04:31.720
Oh, so another web sort of thing.

00:04:31.720 --> 00:04:34.980
But this ran across Flask Meld.

00:04:34.980 --> 00:04:36.160
Flask Meld?

00:04:36.160 --> 00:04:36.900
I've never heard of this.

00:04:36.900 --> 00:04:38.280
So it's like...

00:04:38.280 --> 00:04:40.900
Is it like a Vulcan thing from Star Trek?

00:04:41.200 --> 00:04:44.600
No, the idea is like melding the front end and the back end.

00:04:44.600 --> 00:04:45.240
Okay.

00:04:45.240 --> 00:04:47.000
And the...

00:04:47.000 --> 00:04:48.120
It's a pretty cool...

00:04:48.120 --> 00:04:49.060
There's a...

00:04:49.060 --> 00:04:51.320
You should click on the example article.

00:04:51.320 --> 00:04:54.300
But yeah, that first link.

00:04:54.300 --> 00:04:54.960
Right there.

00:04:54.960 --> 00:04:55.600
Oh, right here?

00:04:55.600 --> 00:04:56.020
Okay.

00:04:56.200 --> 00:04:56.380
Yeah.

00:04:56.380 --> 00:04:58.160
There's a...

00:04:58.160 --> 00:04:59.260
It's basically...

00:04:59.260 --> 00:05:04.740
It's fairly simple interactive stuff that JavaScript gives you.

00:05:04.740 --> 00:05:07.520
But it's super fast.

00:05:07.520 --> 00:05:09.880
And it just...

00:05:09.880 --> 00:05:12.260
Like, you don't have to write the JavaScript code.

00:05:12.260 --> 00:05:16.260
So the article in this article talks about how...

00:05:16.260 --> 00:05:18.600
This is from Michael Abraham...

00:05:18.600 --> 00:05:19.640
I think it's Abrahamson.

00:05:19.640 --> 00:05:23.760
But he wanted to avoid writing JavaScript.

00:05:23.760 --> 00:05:28.060
So he wrote a whole bunch of JavaScript to make this plugin.

00:05:28.060 --> 00:05:29.620
So it's a Flask...

00:05:29.620 --> 00:05:31.740
His first Flask extension.

00:05:31.740 --> 00:05:37.380
But you kind of modify the Flask templates to insert these elements.

00:05:37.380 --> 00:05:41.660
And then the elements just show up as like objects in Python.

00:05:41.660 --> 00:05:43.800
And you can program them like that.

00:05:43.800 --> 00:05:46.540
So all these elements are all implemented in Python.

00:05:46.540 --> 00:05:47.480
Oh, cool.

00:05:47.480 --> 00:05:49.800
And there's a little video on there.

00:05:49.800 --> 00:05:51.080
But there's a demo as well.

00:05:51.080 --> 00:05:53.060
So there's a working example.

00:05:53.060 --> 00:05:57.520
And then the code for the example is up on GitHub as well.

00:05:57.520 --> 00:05:58.360
So you can play with it.

00:05:58.360 --> 00:06:06.400
One of the fun parts in one of his working examples is the drop-down for like a search.

00:06:06.400 --> 00:06:09.120
So if you start like predictive search sort of thing.

00:06:09.120 --> 00:06:09.860
So if you start...

00:06:09.860 --> 00:06:11.260
The example shows states.

00:06:11.460 --> 00:06:12.840
If you start typing states.

00:06:12.840 --> 00:06:17.740
It'll like start filling in this list of states that you might mean.

00:06:17.740 --> 00:06:19.400
And it's like super fast.

00:06:19.400 --> 00:06:20.300
Nice.

00:06:20.300 --> 00:06:20.540
Yeah.

00:06:20.540 --> 00:06:27.600
Apparently it says right here that it utilizes web sockets and morphed them to create server-side rendered HTML

00:06:27.600 --> 00:06:30.520
and swap out DOM elements without refreshing the page.

00:06:30.520 --> 00:06:31.640
That's pretty killer actually.

00:06:31.640 --> 00:06:32.080
Yeah.

00:06:32.080 --> 00:06:34.460
And he's nice enough.

00:06:34.460 --> 00:06:35.520
I think this is cool.

00:06:35.520 --> 00:06:40.740
He's saying that he basically stole all the ideas from other people and put them together for this.

00:06:40.740 --> 00:06:43.700
Or standing on the shoulders of giants, so to speak.

00:06:44.360 --> 00:06:48.580
And there's a similar project called Django Unicorn for Django people.

00:06:48.580 --> 00:06:50.180
I played with that a little bit.

00:06:50.180 --> 00:06:54.620
The Django Unicorn is...

00:06:54.620 --> 00:06:56.220
The documentation site's amazing.

00:06:56.220 --> 00:06:57.740
It's got a bunch of examples.

00:06:58.600 --> 00:06:59.780
But it seemed...

00:06:59.780 --> 00:07:06.040
I don't know if it's the server that it's hosted on or what, but the Django example seemed a little bit slower.

00:07:06.040 --> 00:07:16.200
It seemed like there was this round-trip thing going on, whereas the Flask example, Flask meld, was zippy enough that that would be completely sufficient for a lot of the applications.

00:07:16.200 --> 00:07:18.800
I'm thinking of throwing in some interactive stuff.

00:07:18.800 --> 00:07:19.700
Yeah.

00:07:19.700 --> 00:07:20.440
Yeah.

00:07:20.440 --> 00:07:21.440
This is really neat.

00:07:21.440 --> 00:07:24.240
This idea of components is pretty cool here.

00:07:24.240 --> 00:07:25.320
Anthony, what do you think?

00:07:25.320 --> 00:07:26.160
Yeah, it's interesting.

00:07:26.160 --> 00:07:34.640
I don't really use Flask, but in the Django world, quite a lot of components and stuff that I've pulled in and plugins to do interactive elements.

00:07:34.640 --> 00:07:40.300
And each one is implemented completely differently, which is really frustrating.

00:07:40.620 --> 00:07:50.220
Whether it's like a search box or a type ahead or like a multi-select field, just something that I need, which is not available in the standard forms model.

00:07:50.220 --> 00:07:54.820
And each one tends to have its own JavaScript and its own collection of bugs.

00:07:54.820 --> 00:08:01.780
And yeah, it is quite frustrating, to be honest, because you kind of think, oh, I don't need to write this from scratch in JavaScript.

00:08:01.780 --> 00:08:04.660
I'll use an extension that already exists out there.

00:08:04.660 --> 00:08:08.160
And then you kind of get stuck in, does it work in Django 3?

00:08:08.160 --> 00:08:09.180
Right.

00:08:09.180 --> 00:08:11.040
You know, what state is the JavaScript in?

00:08:11.040 --> 00:08:15.280
And then you read through the source code and you stumble across security issues.

00:08:15.280 --> 00:08:20.520
And it's like, okay, I wasn't, you know, there's a line between it's easier to write it myself.

00:08:20.520 --> 00:08:27.700
And you end up, I end up just maintaining forks of all these extensions and then trying to get pull requests back into them to kind of fix things up.

00:08:27.700 --> 00:08:34.640
But yeah, it's interesting to see, I guess, a different model for doing it, which, you know, could be applied to Django.

00:08:34.640 --> 00:08:45.180
This thing brings me back to like the year 2001 web with ASP.NET web forms, which are like such a weird way to build web apps.

00:08:45.180 --> 00:08:47.080
They kind of like tried to mirror desktop apps.

00:08:47.380 --> 00:08:56.180
But you could put a little Ajax tag onto like a section and just that part of the page would just become like would automatically refresh and interact differently.

00:08:56.180 --> 00:09:01.080
This gives me like kind of that feel, but like not old school web, but more modern web, which is nice.

00:09:01.080 --> 00:09:01.560
Yeah.

00:09:01.640 --> 00:09:07.460
I mean, like I was thinking of it and now a lot of people that are comfortable with like jumping into some JavaScript.

00:09:07.460 --> 00:09:09.220
This seems silly, I'm sure.

00:09:09.220 --> 00:09:12.320
But for instance, like me, I never touched JavaScript.

00:09:12.320 --> 00:09:18.560
So if I've got a little and I've got like a little flask app that pulls up like test result data.

00:09:18.660 --> 00:09:26.280
And it'd be great to just have a be able to get a little form there that says, hey, here's here's the version I want to see the results for and be able to pull that up.

00:09:26.280 --> 00:09:28.860
And it it doesn't have to be pretty.

00:09:28.860 --> 00:09:33.420
But this way I could implement it without having to go in and learn JavaScript.

00:09:33.420 --> 00:09:34.620
So, yeah.

00:09:34.620 --> 00:09:35.160
Yeah.

00:09:35.160 --> 00:09:36.800
And I think this is super neat.

00:09:37.040 --> 00:09:43.360
I'm with you, Anthony, on the tradeoff of grabbing some of these cool plugins, Flask, Django, whatever.

00:09:43.360 --> 00:09:45.520
OK, this is just now adding functionality.

00:09:45.520 --> 00:09:48.440
But then you've kind of got to understand its assumptions.

00:09:48.440 --> 00:09:49.660
When does it work?

00:09:49.660 --> 00:09:52.020
Like, why does it not quite work for what you're doing?

00:09:52.020 --> 00:09:53.340
It's always a tradeoff.

00:09:53.340 --> 00:10:00.020
I usually go for the vanilla version of the web and just build it myself until it's like really clear that there's a big benefit.

00:10:00.180 --> 00:10:00.620
Yeah.

00:10:00.620 --> 00:10:07.680
And you bring up an interesting point with the security concerns, especially anytime you've got dealing with input fields and stuff.

00:10:07.680 --> 00:10:09.160
You've got to be careful with that.

00:10:09.160 --> 00:10:09.580
Yeah.

00:10:09.580 --> 00:10:12.240
Because they normally run queries in a database.

00:10:12.240 --> 00:10:21.300
So you've got to kind of audit these things to make sure that they're not using raw queries and that they're not using weird templates and stuff like that.

00:10:21.300 --> 00:10:21.800
All right.

00:10:21.800 --> 00:10:25.660
They better be parameterized queries and not little Bobby table type queries.

00:10:25.660 --> 00:10:26.300
Exactly.

00:10:26.300 --> 00:10:26.900
Yeah.

00:10:26.900 --> 00:10:27.160
Yeah.

00:10:27.160 --> 00:10:27.820
All right.

00:10:27.820 --> 00:10:29.040
Wrong one.

00:10:29.040 --> 00:10:29.640
This one.

00:10:30.060 --> 00:10:31.580
So what's next?

00:10:31.580 --> 00:10:35.000
Maybe they're using even Bitwise operators in there, Anthony.

00:10:35.000 --> 00:10:35.700
Possibly.

00:10:35.700 --> 00:10:36.160
Yeah.

00:10:36.160 --> 00:10:43.880
So my next link is Bitwise operators in Python by Bartosz Zacznicki.

00:10:43.880 --> 00:10:46.960
And this one's really cool.

00:10:46.960 --> 00:10:52.280
Actually, I think if you've ever used Bitwise operators or seen them in the Python language.

00:10:52.740 --> 00:11:03.000
So this is where you'd use the pipe symbol to less than, less than, which kind of looks like two arrows or right, right, right, which is greater than greater than.

00:11:03.000 --> 00:11:05.700
There's a XOR.

00:11:05.700 --> 00:11:07.820
Is there another way to say XOR?

00:11:07.820 --> 00:11:09.320
I just use XOR.

00:11:09.520 --> 00:11:09.780
Oh, yeah.

00:11:09.780 --> 00:11:09.780
Yeah.

00:11:09.780 --> 00:11:10.740
That's what I say as well.

00:11:10.740 --> 00:11:12.400
You didn't say XOR or something.

00:11:12.400 --> 00:11:12.920
No.

00:11:12.920 --> 00:11:16.100
Which is the hat sign.

00:11:16.100 --> 00:11:18.000
I can't remember what that symbol is called.

00:11:18.000 --> 00:11:19.320
The tilde is for not.

00:11:19.320 --> 00:11:26.400
So, yeah, these are basically used for specific types in Python, which support Bitwise operators.

00:11:26.780 --> 00:11:36.100
I like this article because they're rarely used in Python because you typically use types where you'd use a method to do a lot of these things.

00:11:36.100 --> 00:11:42.520
Most of the time, you wouldn't necessarily need to work with data, which is binary.

00:11:42.520 --> 00:11:45.920
So you wouldn't necessarily need to do these things.

00:11:45.920 --> 00:11:49.160
But if you are working with binary data, they're super useful.

00:11:49.160 --> 00:11:52.140
And it takes a bit of time to get your head around.

00:11:52.640 --> 00:11:54.100
So I've got a couple of examples.

00:11:54.100 --> 00:12:00.620
But, yeah, I love this tutorial because it actually doesn't assume you know anything about this topic.

00:12:00.620 --> 00:12:03.140
It explains what the binary system is.

00:12:03.140 --> 00:12:06.040
And it uses these icons of hands.

00:12:06.040 --> 00:12:14.560
It uses emojis, kind of like a mini sign language to explain the kind of the bytes and stuff like that, which is really cool.

00:12:14.560 --> 00:12:18.020
So, yeah, I really like it for that reason.

00:12:18.020 --> 00:12:22.920
And it's really illustrative and kind of takes you through a few concepts.

00:12:22.920 --> 00:12:30.820
And then how you can use these special operators for some of the built-in types, Python integers, bit strings.

00:12:30.820 --> 00:12:35.000
You can also use them for byte arrays, which is really helpful.

00:12:35.000 --> 00:12:38.320
And then it goes into things like bit masks and stuff like that.

00:12:38.440 --> 00:12:44.820
So if you're ever working with any lower level data, this is super helpful to understand.

00:12:44.820 --> 00:12:54.960
And also a little trick that I discovered a while ago was if you've ever used the enum built-ins.

00:12:54.960 --> 00:12:58.660
So enum is in the standard library.

00:12:59.120 --> 00:13:06.500
And if you wanted to describe an enum, you basically create a class and inherit from an enum type, which is in the enum package.

00:13:06.500 --> 00:13:14.740
And you can do a whole bunch of things and just represent things as enums in Python instead of other weird ways of doing it.

00:13:14.740 --> 00:13:15.140
I don't know.

00:13:15.140 --> 00:13:18.720
Introduced in Python 3.7, I think it was.

00:13:19.560 --> 00:13:28.680
But there's a little known feature in the enums, which is there's an int flag and a flag type.

00:13:28.680 --> 00:13:38.120
An int flag is an enum, which you can represent as a flag, which means you can combine multiple of them.

00:13:38.120 --> 00:13:51.020
So, for example, if you had a color enum and you had red, blue, and green, you could represent white as being red, blue, and green by combining the colors together.

00:13:51.020 --> 00:13:52.740
Nice. Wow. That's cool.

00:13:52.740 --> 00:13:57.680
Yeah, you probably wouldn't make a paint mixer in Python, but there's lots of things.

00:13:57.680 --> 00:14:04.800
Flags, for example, like if you're representing system flags or compiler flags or any other kind of flags,

00:14:05.280 --> 00:14:08.900
this is really useful because it actually implements all the binary operators.

00:14:08.900 --> 00:14:16.220
So, yeah, flag and int flag are super helpful types, which are built into the standard library.

00:14:16.220 --> 00:14:21.880
So, yeah, if you ever find yourself doing something like this or using a package,

00:14:21.880 --> 00:14:25.920
which has implemented its own weird version of this feature, which is built in,

00:14:25.920 --> 00:14:29.200
then you can upgrade it to this new syntax and then you're done.

00:14:29.200 --> 00:14:30.320
Yeah. Nice.

00:14:30.320 --> 00:14:31.940
Tell me, what does this auto do?

00:14:32.560 --> 00:14:42.820
Oh, so in enums, if you're going to say, you know, you need to make a representation of the enum name.

00:14:42.820 --> 00:14:49.320
And if it's an int enum or an int flag, you'd say, you know, one, two, three, four, five.

00:14:49.320 --> 00:14:54.340
Like, so if I save it to a file or pickle it or something, then it's, this is the number that it represents.

00:14:54.340 --> 00:14:55.260
So I can convert.

00:14:55.260 --> 00:14:59.900
So if you converted the number one to your enum, it would know that red was one.

00:14:59.900 --> 00:15:02.940
So, you know, you could basically use it for storage or something.

00:15:02.940 --> 00:15:04.040
It's also really helpful.

00:15:04.040 --> 00:15:13.200
Like if you're reading from XML files or JSON files or something, and there's like, there's a field which is stored as an integer,

00:15:13.200 --> 00:15:19.760
but you know that it actually represents something a bit more logical, like enumeration, then you can, you can do it that way.

00:15:19.760 --> 00:15:26.440
However, for flags, then because they support bitwise operators, they should follow the binary sequence.

00:15:26.440 --> 00:15:29.480
So one, two, four, eight, 16, 32, 64, et cetera.

00:15:29.480 --> 00:15:36.080
And once you get past 1024, most people start to forget.

00:15:36.080 --> 00:15:44.420
So instead of working that all out in your head, you can just use auto, which is a function built into the enum.

00:15:44.420 --> 00:15:47.800
And it will basically just work out what that value should be for you.

00:15:47.800 --> 00:15:50.220
So you don't have to work it out in your head.

00:15:50.220 --> 00:15:55.240
It'll let you like reorder stuff and not have to go, oh, now I want to just want to go one, two, three.

00:15:55.480 --> 00:15:59.640
Or I want to add another one, but in the middle and it accidentally messed it up or whatever.

00:15:59.640 --> 00:15:59.880
Yeah.

00:15:59.880 --> 00:16:04.680
I think I might use those anyway, just to, just to indicate that the actual number isn't important.

00:16:04.680 --> 00:16:07.120
It's just that they're, they're unique.

00:16:07.120 --> 00:16:07.580
Exactly.

00:16:07.580 --> 00:16:08.180
Exactly.

00:16:08.180 --> 00:16:12.980
I think if you, if you don't assign it, then in enums, if you don't assign it, then it works.

00:16:12.980 --> 00:16:15.020
But with flags, you need to assign it to something.

00:16:15.020 --> 00:16:15.540
Yeah.

00:16:15.540 --> 00:16:15.920
Yeah.

00:16:15.920 --> 00:16:24.520
Just for people listening who don't necessarily see the code, the show notes, the idea is you create an enum class and you say like category equals just lowercase

00:16:24.520 --> 00:16:25.760
auto open close.

00:16:25.760 --> 00:16:28.360
That's the way that you sort of invoke this behavior.

00:16:28.360 --> 00:16:31.620
Also a couple of questions from the listeners who are in the live stream.

00:16:31.620 --> 00:16:34.900
Anthony Lister says useful for MicroPython or hardware, maybe.

00:16:34.900 --> 00:16:35.400
What do you think?

00:16:35.400 --> 00:16:36.300
Yeah, absolutely.

00:16:36.300 --> 00:16:40.760
If you're, I mean, if you're working with like embedded systems or anything, I mean, Brian,

00:16:40.760 --> 00:16:41.340
you're the expert.

00:16:42.740 --> 00:16:43.140
Yeah.

00:16:43.140 --> 00:16:44.520
You have to work with binary a lot.

00:16:44.520 --> 00:16:50.080
So yeah, this is super helpful because you can represent stuff, which is different states

00:16:50.080 --> 00:16:50.780
in the system.

00:16:50.780 --> 00:16:55.860
Or if you want to read, read inputs and stuff from multiple channels, you're going to need

00:16:55.860 --> 00:16:56.960
to use bitwise operators.

00:16:57.200 --> 00:17:02.200
So both the bitwise operators are really helpful as well as the flags enums.

00:17:02.200 --> 00:17:02.740
Yeah.

00:17:02.740 --> 00:17:06.600
And Brandon Rainer says bitwise always confuses me.

00:17:06.600 --> 00:17:09.320
And when I see it, I tend to roll my eyes back and ask why.

00:17:09.320 --> 00:17:10.060
I'm sure there's reason.

00:17:10.060 --> 00:17:13.620
But well, I mean, one of the things that comes to mind for me is, you know, you're thinking

00:17:13.620 --> 00:17:14.820
about storing stuff in memory.

00:17:15.220 --> 00:17:19.820
You know, if I wanted to store, say, a number or something like that, or, you know, you put

00:17:19.820 --> 00:17:22.000
that into a Python number, that's like 28 bytes.

00:17:22.000 --> 00:17:25.720
But if you create an array of bytes and you know the size of them are going to be, you know,

00:17:25.720 --> 00:17:29.800
packed into little bits there, you know, like one to 10 or something, a whole bunch, you

00:17:29.800 --> 00:17:34.540
could be way more efficient by, you know, creating little smaller containers and then bitwise

00:17:34.540 --> 00:17:35.920
boring them together and whatnot.

00:17:35.920 --> 00:17:36.460
Yeah.

00:17:36.460 --> 00:17:42.180
Like bitfields, for instance, are a really cool thing, but even just straight numbers with bitwise

00:17:42.180 --> 00:17:47.160
operators are important for hardware because you're like a lot of times you just have register

00:17:47.160 --> 00:17:52.500
access to something or you have memory mapped registers and you, you know, just kind of read

00:17:52.500 --> 00:17:54.660
those out and there may be a whole bunch of data.

00:17:54.660 --> 00:17:58.240
So each bit might represent completely wildly different things.

00:17:58.240 --> 00:18:00.360
So you can't really just check for equality.

00:18:00.360 --> 00:18:03.060
You have to check, is this bit on or off?

00:18:03.060 --> 00:18:07.260
Or I need to set this bit and leave all the rest alone and things like that.

00:18:07.260 --> 00:18:07.700
Yeah.

00:18:07.700 --> 00:18:08.400
Yeah, absolutely.

00:18:08.400 --> 00:18:08.920
Absolutely.

00:18:08.920 --> 00:18:09.480
All right.

00:18:09.480 --> 00:18:11.840
Before we get to our next item, let me just let you know.

00:18:11.840 --> 00:18:15.320
this episode is brought to you by us, things that Brian and I are doing.

00:18:15.320 --> 00:18:19.980
And so one of the things we just launched over at Talk By Theen Training is our brand

00:18:19.980 --> 00:18:25.540
new FastAPI course, which is a super cool new API framework that I think brings together

00:18:25.540 --> 00:18:29.480
a lot of the things that we've been proponents of, you know, things like Pydantic,

00:18:29.480 --> 00:18:33.640
Typense, Async and Await, all those, they all come together really nice over there.

00:18:33.640 --> 00:18:34.880
So if you want to learn that, check that out.

00:18:34.880 --> 00:18:36.820
Brian has some book on pytest.

00:18:36.820 --> 00:18:38.580
So yeah, you can check that as well.

00:18:38.580 --> 00:18:40.020
Links in the show notes.

00:18:40.020 --> 00:18:45.340
The next thing I want to talk about, though, is why you should use an ORM.

00:18:45.340 --> 00:18:45.920
Here.

00:18:45.920 --> 00:18:46.440
There we go.

00:18:46.440 --> 00:18:49.060
So Anthony, Brian, what do you guys think?

00:18:49.060 --> 00:18:51.140
Raw SQL ORMs?

00:18:51.140 --> 00:18:52.440
What are your thoughts here?

00:18:52.440 --> 00:18:57.360
Well, I've been using like document databases lately and I don't really need an ORM.

00:18:57.360 --> 00:18:57.900
So.

00:18:57.900 --> 00:18:58.740
I'm with you.

00:18:58.740 --> 00:19:03.540
So over there, maybe the R is a D, at least if it's a document database, it's an object

00:19:03.540 --> 00:19:04.720
document mapper maybe.

00:19:04.880 --> 00:19:09.380
But yeah, I find being able to work with classes like the way I think of it in Python

00:19:09.380 --> 00:19:11.340
to be that's how I want my data to be.

00:19:11.340 --> 00:19:15.200
And just something else can figure out how the database has to break that apart into relationships

00:19:15.200 --> 00:19:15.720
and stuff.

00:19:15.720 --> 00:19:16.520
Super neat.

00:19:16.520 --> 00:19:22.400
You know, like SQL can go and say, create like if I had a user and the user had orders,

00:19:22.400 --> 00:19:27.020
like they might have an orders list on the user class to create a new order.

00:19:27.100 --> 00:19:32.060
You can just go to the user.orders.append the new thing and hit save, commit changes,

00:19:32.060 --> 00:19:35.720
and then boom, you know, it like figures out that has to be inserted and the relationship

00:19:35.720 --> 00:19:36.920
has to be said and all that.

00:19:36.920 --> 00:19:37.800
Anthony, what do you think?

00:19:37.800 --> 00:19:42.660
I use the Django ORM quite a lot and really like it.

00:19:42.660 --> 00:19:48.020
Learning all the edge cases where it creates queries which are not super efficient.

00:19:48.020 --> 00:19:50.220
But so I guess there's pros and cons.

00:19:50.220 --> 00:19:55.100
Like if you were to write raw SQL, you know, sometimes if you know SQL really well, then

00:19:55.100 --> 00:19:56.800
you can write more efficient queries.

00:19:56.800 --> 00:20:00.380
However, there are typically ways around that.

00:20:00.380 --> 00:20:02.700
The N plus one problem in Django.

00:20:02.700 --> 00:20:06.040
The N plus one is the biggest problem for sure.

00:20:06.040 --> 00:20:09.100
You want to describe the N plus one problem or take a shot at that?

00:20:09.100 --> 00:20:09.860
Yeah.

00:20:09.860 --> 00:20:15.680
So if you sort of have a foreign key and you reference an entity which might be a many

00:20:15.680 --> 00:20:20.080
to many relationship and then you reference a property of it in the query,

00:20:20.900 --> 00:20:25.380
not actually not in the query, but actually in the view, you mentioned something or you

00:20:25.380 --> 00:20:28.540
look up a field which is part of a mapping to another table.

00:20:28.540 --> 00:20:32.960
Kind of like I described, like if you gave a user to the view and the view wanted to know

00:20:32.960 --> 00:20:33.680
about its orders.

00:20:33.680 --> 00:20:34.400
Yeah.

00:20:34.400 --> 00:20:38.480
More importantly, if you gave a list of users and it wanted to know about the orders for

00:20:38.480 --> 00:20:39.000
each of them, right?

00:20:39.000 --> 00:20:40.020
That's the real bad case.

00:20:40.020 --> 00:20:40.340
Yeah.

00:20:40.340 --> 00:20:45.360
So you had it for like, you know, which group people are in or like which team they're in

00:20:45.360 --> 00:20:45.700
or something.

00:20:45.860 --> 00:20:48.340
And it's just, it's a team ID.

00:20:48.340 --> 00:20:51.540
And then you actually want to show it on the table as the team name.

00:20:51.540 --> 00:20:56.760
So what ends up happening is that for every row in the table, it looks, it does another

00:20:56.760 --> 00:21:00.100
query to look up the team name, even though they're the same across the board.

00:21:00.100 --> 00:21:05.640
Whereas if you're writing that in SQL, I'd hope you'd do that as an outer join.

00:21:06.100 --> 00:21:09.620
But yeah, so, sorry, not an outer join.

00:21:09.620 --> 00:21:15.560
So yeah, OOMs are really useful in that sort of thing, but they do have edge cases.

00:21:15.560 --> 00:21:19.600
For N plus ones, pretty sure you covered this one before, but there is an awesome tool called

00:21:19.600 --> 00:21:22.600
N plus one, which you can run in your test suite.

00:21:22.600 --> 00:21:27.080
So when you do all your integration tests with Django, it fails the test if it detects

00:21:27.080 --> 00:21:31.580
an N plus one query, which I use quite extensively.

00:21:31.580 --> 00:21:33.580
I think Adam.

00:21:33.580 --> 00:21:36.140
Oh, I had not heard of this.

00:21:36.140 --> 00:21:40.560
I mean, this is not such a problem for me because I work like Brian and document databases.

00:21:41.460 --> 00:21:45.800
But to the extent that I work with like SQLAlchemy and stuff, like this is really, this

00:21:45.800 --> 00:21:46.520
is the one you're talking about?

00:21:46.520 --> 00:21:47.420
Yeah, yeah.

00:21:47.420 --> 00:21:47.740
That's it.

00:21:47.740 --> 00:21:47.900
Yeah.

00:21:47.900 --> 00:21:50.480
P-L-U-S-O-N-E.

00:21:50.480 --> 00:21:50.820
Yeah.

00:21:50.820 --> 00:21:51.100
That one.

00:21:51.100 --> 00:21:51.380
Yeah.

00:21:51.380 --> 00:21:54.240
So I add it, I only add it in the test suite.

00:21:54.240 --> 00:21:57.280
So you don't, you don't really need to put this into production.

00:21:57.280 --> 00:21:59.560
So you just load it into Django.

00:21:59.560 --> 00:22:00.620
You're assuming that you have tests, Anthony.

00:22:00.620 --> 00:22:01.400
Yeah.

00:22:01.400 --> 00:22:02.740
Well, that's probably a starting point.

00:22:02.740 --> 00:22:09.060
So, or if you're a developer in an environment, you can just turn it on, but it would.

00:22:10.500 --> 00:22:13.380
Yeah, it basically, it would print a warning and stuff like that.

00:22:13.380 --> 00:22:18.860
However, there is a config option that says that it can raise an exception if it detects

00:22:18.860 --> 00:22:25.700
one, which is awesome because when you run all your tests, it will fire off and fail the

00:22:25.700 --> 00:22:27.600
test if it detects this type of query.

00:22:27.600 --> 00:22:30.000
And the workaround in Django is actually really simple.

00:22:30.000 --> 00:22:36.780
You just add another function to the chain, the query command, basically, which indicates

00:22:36.780 --> 00:22:39.280
that I'm going to use this field in this other table.

00:22:39.440 --> 00:22:40.820
So it kind of pre-looks up.

00:22:40.820 --> 00:22:41.260
Right, right.

00:22:41.260 --> 00:22:44.240
Please do the join or sub-query load or whatever it needs to do.

00:22:44.240 --> 00:22:44.560
Yeah.

00:22:44.560 --> 00:22:44.960
Yeah.

00:22:44.960 --> 00:22:50.220
And the other thing about IRMs that I really like is the migration ability.

00:22:50.220 --> 00:22:54.680
Like, it's fine when you initially design a system, you could, yeah, fine.

00:22:54.680 --> 00:22:56.880
You can write your own custom SQL queries and stuff.

00:22:56.880 --> 00:23:00.840
But, you know, within a week or two, you've added like five extra fields.

00:23:00.840 --> 00:23:05.540
And actually, that one field you added now needs to be a different type or, you know, databases

00:23:05.540 --> 00:23:07.120
are not static things.

00:23:07.120 --> 00:23:12.520
Like, database structures change all the time in a real application.

00:23:12.520 --> 00:23:18.120
So that becomes an absolute nightmare if you've handcrafted all your SQL, especially if you

00:23:18.120 --> 00:23:18.860
don't have tests.

00:23:20.760 --> 00:23:22.120
So, yeah.

00:23:22.120 --> 00:23:25.380
I mean, for different database engines, there's different ways to do this.

00:23:25.380 --> 00:23:28.920
I mean, SQL Server like has DAX.

00:23:28.920 --> 00:23:31.440
So you can do DAX packs and DAX pack migrations.

00:23:31.720 --> 00:23:34.640
But most of the other database systems don't have that.

00:23:34.640 --> 00:23:39.980
Whereas if you're using the IRM, then, you know, Django and Flask and stuff would create

00:23:39.980 --> 00:23:41.240
the migration for you.

00:23:41.240 --> 00:23:48.600
And you're kind of pretty sure that you can add fields as you wish without necessarily

00:23:48.600 --> 00:23:49.720
breaking things.

00:23:49.720 --> 00:23:53.280
Or you can add types and you can describe what to do with the old ones.

00:23:54.040 --> 00:24:00.000
So I think it saves so much time in just working with a live system where you're actually constantly

00:24:00.000 --> 00:24:03.280
making modifications to the table structures and stuff.

00:24:03.280 --> 00:24:08.180
And maybe you have different developers at different stages or you want to go back in the brand.

00:24:08.180 --> 00:24:12.880
You want to say, I'm going to go back here and then work on this version of the app at this

00:24:12.880 --> 00:24:13.480
stage.

00:24:13.480 --> 00:24:16.640
You want to be able to go to just run the migrations and get to the right structure.

00:24:16.640 --> 00:24:19.560
Yeah, I find it to be super, super helpful.

00:24:19.560 --> 00:24:24.100
I mean, there are times where, you know, you want to get 100,000 records back from the

00:24:24.100 --> 00:24:25.820
database and an ORM doesn't make sense.

00:24:25.820 --> 00:24:30.220
But to me, I feel like, you know, you should 80, 90% of the time use an ORM.

00:24:30.220 --> 00:24:33.320
And then there's that little edge case where something slightly different maybe needs to

00:24:33.320 --> 00:24:37.500
happen, but you shouldn't start there because there's that 10% or 5% chance.

00:24:37.500 --> 00:24:41.420
Yeah, most ORMs give you the ability to write a raw query.

00:24:41.420 --> 00:24:41.960
Yeah.

00:24:41.960 --> 00:24:46.000
And yeah, you should also check there's raw queries for SQL injection.

00:24:46.000 --> 00:24:48.180
And I do have a tool for that.

00:24:48.180 --> 00:24:53.600
Yeah, if you want to, you can run it through the Python security thing that I've built,

00:24:53.600 --> 00:25:01.140
which will scan your code and spot where you've used the raw SQL functions in the Flask ORM and

00:25:01.140 --> 00:25:02.040
the Django ORM.

00:25:02.040 --> 00:25:07.660
And it will see if there's anything in them, which is pretty likely to leave you subject to

00:25:07.660 --> 00:25:08.320
SQL injection.

00:25:08.320 --> 00:25:08.780
Yeah.

00:25:08.780 --> 00:25:12.620
Is that built into your PyCharm security plugin?

00:25:12.620 --> 00:25:13.440
Yes.

00:25:13.440 --> 00:25:13.940
Yeah.

00:25:13.940 --> 00:25:14.300
Maybe.

00:25:14.300 --> 00:25:14.980
Yeah.

00:25:14.980 --> 00:25:18.480
I want to just mention this come like this conversation, although not exactly.

00:25:18.480 --> 00:25:20.740
We didn't pull out much out of it, but comes from an article.

00:25:21.060 --> 00:25:25.040
I wanted to highlight called why should I, why should you use an ORM object relational mapper

00:25:25.040 --> 00:25:25.920
written by Kareem?

00:25:25.920 --> 00:25:27.380
I'll leave that in the show notes.

00:25:27.380 --> 00:25:29.140
There's a bunch of details that walks you through it.

00:25:29.140 --> 00:25:31.140
So I wanted to cover this.

00:25:31.140 --> 00:25:35.380
So people, if they're having this debate on their team or they're not sure which way to

00:25:35.380 --> 00:25:38.600
go, or they're, they're new and they're like, what are all these funky acronyms about?

00:25:38.600 --> 00:25:39.640
You know, they can check that out.

00:25:39.860 --> 00:25:44.360
There's, there's the obligatory little Bobby tables joke in there.

00:25:44.360 --> 00:25:46.140
I got to, got to go with that.

00:25:46.140 --> 00:25:50.800
This is what your, your plugin is supposed to detect is this cool XKCD.

00:25:50.800 --> 00:25:51.520
Cool.

00:25:51.520 --> 00:25:52.960
You're not on the receiving end.

00:25:52.960 --> 00:25:58.100
One of the things I'd like to bring up around ORMs is that like a lot of the ORM tutorials

00:25:58.100 --> 00:25:59.920
assume that, you know, SQL.

00:26:00.480 --> 00:26:05.860
And I'd like to see more tutorials on how to use an ORM and how to use it correctly

00:26:05.860 --> 00:26:07.800
without any SQL examples.

00:26:07.800 --> 00:26:08.660
Yeah.

00:26:08.660 --> 00:26:09.160
Yeah.

00:26:09.160 --> 00:26:10.820
You know, classes in Python.

00:26:10.820 --> 00:26:11.360
Yeah.

00:26:11.360 --> 00:26:12.180
Here's your way.

00:26:12.180 --> 00:26:13.260
You don't have to know SQL.

00:26:13.260 --> 00:26:13.500
Yeah.

00:26:13.500 --> 00:26:19.020
I mean, I thought that was the point is that you can think in objects instead of in SQL.

00:26:19.020 --> 00:26:20.080
So yeah.

00:26:20.080 --> 00:26:23.640
Why do I got to learn SQL in order to understand the tool?

00:26:23.640 --> 00:26:24.140
Sure.

00:26:24.140 --> 00:26:24.680
Sure.

00:26:24.680 --> 00:26:29.880
Another thing that you can turn on that's helpful for the N plus one problem, at least with SQL

00:26:29.880 --> 00:26:34.560
Alchemy, you can go to the engine when you create it and you can say echo, echo equals

00:26:34.560 --> 00:26:34.820
true.

00:26:34.820 --> 00:26:39.120
And it'll echo every single underlying SQL command sent to the database.

00:26:39.120 --> 00:26:42.420
You can do something in SQLAlchemy and it'll say, here's what the actual thing is.

00:26:42.420 --> 00:26:47.760
And if you've written your code well, and you've done the right join stuff, you'll just see like

00:26:47.760 --> 00:26:51.300
a couple of entries for each page or interaction you're having.

00:26:51.300 --> 00:26:52.240
You've done it wrong.

00:26:52.240 --> 00:26:55.280
You'll see your, your output just scream by full of these things.

00:26:55.280 --> 00:26:56.800
Like, ah, there's one of these problems.

00:26:56.800 --> 00:26:58.720
So that's, that's a easy way as well.

00:26:58.720 --> 00:27:03.800
Is there like a test way to like, like for instance, to check to see how many for

00:27:03.800 --> 00:27:07.780
certain test sequence, how many, database interactions you've done?

00:27:07.780 --> 00:27:08.660
Yeah, there is.

00:27:08.660 --> 00:27:08.920
Yeah.

00:27:09.220 --> 00:27:13.840
there is in, there is in, Django, you can kind of hack a bit of middleware, which,

00:27:13.840 --> 00:27:17.460
um, kind of catches SQL queries and stuff like that.

00:27:17.460 --> 00:27:20.940
it's not built in, but you can write it.

00:27:20.940 --> 00:27:23.000
I think I've got code sample somewhere that does that.

00:27:23.000 --> 00:27:26.400
and just say how many queries this page executed.

00:27:26.680 --> 00:27:32.480
Obviously it depends on, that's why it's important to see the database first with test data, because,

00:27:32.480 --> 00:27:38.160
you know, if you just run it on an empty database, then typically, or you've got like one row or

00:27:38.160 --> 00:27:40.140
something, then it's, it's going to be like, yeah, it's fine.

00:27:40.240 --> 00:27:43.860
But then when you deploy it to production, like it's actually running thousands of queries

00:27:43.860 --> 00:27:44.520
for every page.

00:27:44.520 --> 00:27:44.900
Yeah.

00:27:44.900 --> 00:27:50.680
Did you end up with what you got in the United States when we tried to roll out the healthcare.gov

00:27:50.680 --> 00:27:53.620
and the entire system went down and yeah.

00:27:53.620 --> 00:27:55.620
Like, like the, yeah, whatever.

00:27:55.620 --> 00:27:59.800
They knew it was going to be the entire country using it and they didn't load test it.

00:27:59.800 --> 00:28:00.380
Exactly.

00:28:00.380 --> 00:28:01.020
Exactly.

00:28:01.020 --> 00:28:07.200
one more thing, a comment from Mateus, it's also useful, when using Django to

00:28:07.200 --> 00:28:11.420
add the Django debug toolbar or Django silk to be aware of what queries are going on.

00:28:11.420 --> 00:28:16.660
And also I would add for pyramid, there's a pyramid debug toolbar and you can actually see the

00:28:16.660 --> 00:28:19.540
underlying queries and how many of them there are and the timing.

00:28:19.660 --> 00:28:20.580
It's, it's really nice.

00:28:20.580 --> 00:28:21.040
Those things.

00:28:21.040 --> 00:28:21.640
All right.

00:28:21.640 --> 00:28:22.020
All right.

00:28:22.020 --> 00:28:24.600
Well, let's move on to the next one.

00:28:24.600 --> 00:28:26.180
Sticking with the database stuff, Brian.

00:28:26.180 --> 00:28:29.260
Definitely sticking with databases, and SQL.

00:28:29.260 --> 00:28:36.040
So, this one's from Simon Wilson and, he's got a tool called, library.

00:28:36.040 --> 00:28:37.760
Well, yeah, sure.

00:28:37.760 --> 00:28:40.720
Dataset, but, SQLite utils.

00:28:40.720 --> 00:28:47.120
this is, it's developed as part of data, the dataset project, but it's, it's usable

00:28:47.120 --> 00:28:50.540
by anybody that uses, SQLite, SQLite.

00:28:50.540 --> 00:28:52.700
And, it's a couple of things.

00:28:52.700 --> 00:28:58.140
It's a command line utility, which, a lot of databases do have a command line way to enter

00:28:58.140 --> 00:28:59.700
to query the database.

00:28:59.700 --> 00:29:01.880
But I don't know if SQLite does.

00:29:01.880 --> 00:29:04.460
but this is a pretty cool command line.

00:29:04.460 --> 00:29:09.620
You can interrogate, analyze tables and dump things and do all sorts of stuff.

00:29:09.620 --> 00:29:15.300
and even search, it's pretty useful and pretty simple examples.

00:29:15.300 --> 00:29:20.440
the, one of the things I really liked though, is the API that he has.

00:29:20.540 --> 00:29:26.720
So there's a Python API to, I mean, you can use, like SQLAlchemy for instance,

00:29:26.720 --> 00:29:28.440
to interact with SQLite.

00:29:28.440 --> 00:29:35.560
But, another way to do it is to use the SQLite utils as a, as an API for, for SQLite.

00:29:35.560 --> 00:29:39.380
And it's a pretty clean, simple, interaction.

00:29:39.380 --> 00:29:44.340
And I think that's, it's something I'm, I want to try because it looks like a, I do need to

00:29:44.340 --> 00:29:47.720
get back into some SQL, SQL database work.

00:29:47.720 --> 00:29:50.220
And, I think this would help a lot.

00:29:50.220 --> 00:29:50.640
Yeah.

00:29:50.640 --> 00:29:54.460
This comes from the dataset found, it's like one of the foundational tools from dataset,

00:29:54.460 --> 00:29:57.420
this project that he's working on, which is really interesting.

00:29:57.420 --> 00:30:03.740
It's like empowering data driven journalism and data exploration across all these different

00:30:03.740 --> 00:30:07.800
data sources by converting them all down to SQLite databases.

00:30:07.800 --> 00:30:10.660
And then once they're there, you can explore them in interesting ways.

00:30:10.760 --> 00:30:16.600
So there's like Twitter to SQLite, various other things to SQLite, Gmail to SQLite.

00:30:16.600 --> 00:30:21.980
And then you can like explore all these different things, like geo JSON to SQLite.

00:30:21.980 --> 00:30:23.460
what else have we got here?

00:30:23.460 --> 00:30:27.620
There's just tons and tons of these things that plug into other stuff and then gets into this

00:30:27.620 --> 00:30:28.360
common format.

00:30:28.360 --> 00:30:33.580
And then he also has this cool tool called dog sheep, which builds on top of those databases

00:30:33.580 --> 00:30:36.220
that creates like a personal search engine for your life.

00:30:36.220 --> 00:30:40.100
So you could like plug in Twitter, you could plug in, your iPhotos library.

00:30:40.280 --> 00:30:44.160
You could plug in your Gmail and then there's a search engine that just says search that.

00:30:44.160 --> 00:30:48.700
So it's like the, one of the foundational building blocks of like, how do I get everything from

00:30:48.700 --> 00:30:50.740
its original source into SQLite?

00:30:50.740 --> 00:30:51.300
Pretty cool.

00:30:51.300 --> 00:30:51.800
Yeah.

00:30:51.800 --> 00:30:52.280
Yeah.

00:30:52.280 --> 00:30:54.340
So Anthony, Anthony, what do you think?

00:30:54.340 --> 00:30:59.120
I'm actually really interested about the next, link on his blog, which says I commissioned

00:30:59.120 --> 00:31:02.140
an oil painting of Barbra Streisand's cloned dogs.

00:31:05.440 --> 00:31:06.600
It's really nice.

00:31:06.600 --> 00:31:06.600
It's really nice.

00:31:06.600 --> 00:31:07.040
Actually.

00:31:07.040 --> 00:31:08.580
I kind of like it.

00:31:08.580 --> 00:31:09.400
I thought it was a joke.

00:31:09.400 --> 00:31:10.120
You actually did.

00:31:10.120 --> 00:31:12.780
For gazing the tombstone of the dog that they are.

00:31:12.780 --> 00:31:13.480
yeah.

00:31:13.480 --> 00:31:13.980
Okay.

00:31:13.980 --> 00:31:14.660
Interesting.

00:31:14.660 --> 00:31:15.180
Yeah.

00:31:15.180 --> 00:31:17.800
I'm not sure what it has to do with SQLite, but no, it's pretty cool.

00:31:17.800 --> 00:31:23.180
I think, yeah, more tools for, journalists and stuff as I start to work with data and

00:31:23.180 --> 00:31:26.240
data becomes more readily available or at least there's more of it.

00:31:26.240 --> 00:31:27.460
So, yeah.

00:31:27.460 --> 00:31:29.660
And people aren't necessarily, yeah.

00:31:29.660 --> 00:31:34.440
And don't necessarily have the technical skills to work with massive data sets and stuff like

00:31:34.440 --> 00:31:34.680
that.

00:31:34.680 --> 00:31:39.120
So yeah, it'd be really interesting to, yeah, use some, some of these tools.

00:31:39.120 --> 00:31:39.680
For sure.

00:31:39.680 --> 00:31:43.220
Simon Wilson was one of the co-founders of Django.

00:31:43.220 --> 00:31:46.140
I had him on Talk Python recently, but it's not published yet.

00:31:46.140 --> 00:31:50.240
And we talked about data set and dog sheep and there's, there's just a lot of interesting

00:31:50.240 --> 00:31:54.300
stuff that one of the stories that he tells, so people can listen to the episode, but he

00:31:54.300 --> 00:31:56.780
has a dog, which may be this, commissioned thing.

00:31:56.780 --> 00:31:58.780
He's like really got this dog that has a Twitter.

00:31:58.780 --> 00:32:00.440
The dog has its own Twitter account.

00:32:00.440 --> 00:32:05.020
So for example, some of the interesting stuff that he did was his dog in the Twitter account

00:32:05.020 --> 00:32:08.640
will tweet when it goes to the veterinarian, like how much it weighs and stuff.

00:32:08.640 --> 00:32:10.460
And then it will tweet pictures when it's on a walk.

00:32:10.460 --> 00:32:17.600
And he was able to do things like we create a graph over time of his dog's weight by just

00:32:17.600 --> 00:32:22.060
doing a SQL query against the dog's Twitter account that got pulled in like all sorts

00:32:22.060 --> 00:32:25.900
of weird connections of like pulling data together that you just couldn't imagine.

00:32:25.900 --> 00:32:27.060
So, yeah.

00:32:27.060 --> 00:32:28.660
Anyway, really, really neat stuff there.

00:32:28.660 --> 00:32:30.320
Okay.

00:32:30.320 --> 00:32:31.160
Yeah.

00:32:31.160 --> 00:32:31.600
All right.

00:32:31.600 --> 00:32:32.700
People will check that out.

00:32:32.700 --> 00:32:39.740
and then you want to wrap it up with a, a talk that is very, work from home ish,

00:32:39.740 --> 00:32:41.240
a conference that's very work from home.

00:32:41.240 --> 00:32:42.380
I should talk from there maybe.

00:32:42.720 --> 00:32:43.020
Yeah.

00:32:43.020 --> 00:32:43.280
Yeah.

00:32:43.280 --> 00:32:49.360
So, my next one is from the Pyjamas conference, which happened a couple of

00:32:49.360 --> 00:32:49.900
weeks ago.

00:32:49.900 --> 00:32:54.640
and this is, yeah, lots of online conferences happening at the moment.

00:32:54.640 --> 00:32:59.900
which I kind of sign up for and look at the, you know, the talk list and think, oh,

00:32:59.900 --> 00:33:00.220
great.

00:33:00.220 --> 00:33:01.160
That'd be really interesting.

00:33:01.160 --> 00:33:03.900
And then never actually get around to watching any of them.

00:33:03.900 --> 00:33:05.200
Exactly.

00:33:05.680 --> 00:33:08.540
yeah, I'm just kind of struggling with this online conferencing thing.

00:33:08.540 --> 00:33:10.420
I like the ideas are really cool.

00:33:10.420 --> 00:33:15.700
The concept is cool, but the practicalities of it, yeah, especially like, I don't know

00:33:15.700 --> 00:33:20.080
if it's different in our house, but, the conference run over a weekend and I just

00:33:20.080 --> 00:33:24.600
wanted, you know, maybe an hour or so to watch some of the talks and things, but just sitting

00:33:24.600 --> 00:33:28.680
down on the couch and turning the TV on, putting it on YouTube and then sitting and watching

00:33:28.680 --> 00:33:29.180
talks.

00:33:29.180 --> 00:33:31.560
And it was like, the kids isn't making so much noise.

00:33:31.560 --> 00:33:33.180
My wife's like, why are you watching TV?

00:33:33.280 --> 00:33:36.900
There's loads of stuff to do and I'm like, no, but I'm, this isn't.

00:33:36.900 --> 00:33:38.980
And then is this work?

00:33:38.980 --> 00:33:39.920
It actually is work.

00:33:39.920 --> 00:33:40.880
I'm sure it is.

00:33:40.880 --> 00:33:41.260
Yeah.

00:33:41.260 --> 00:33:41.480
Yeah.

00:33:41.480 --> 00:33:41.680
Sure.

00:33:41.680 --> 00:33:42.340
It looks like work.

00:33:42.340 --> 00:33:42.560
Yeah.

00:33:42.560 --> 00:33:44.220
so yeah.

00:33:44.220 --> 00:33:44.940
I see pajamas.

00:33:44.940 --> 00:33:46.100
There's pajamas up there.

00:33:46.100 --> 00:33:46.740
This doesn't make it.

00:33:46.740 --> 00:33:47.540
This doesn't feel like work.

00:33:47.540 --> 00:33:48.020
Yeah.

00:33:48.020 --> 00:33:49.320
And I definitely wasn't in my pajamas.

00:33:49.320 --> 00:33:51.260
I had to get dressed because it was 10 in the morning.

00:33:51.260 --> 00:33:54.320
so yeah, I don't know.

00:33:54.320 --> 00:33:58.520
I know I'm kind of talked about this and a couple of other people said they're having similar

00:33:58.520 --> 00:34:00.540
challenges with these online conferences.

00:34:00.540 --> 00:34:02.380
Just like, where do you fit them in?

00:34:02.760 --> 00:34:07.280
and if you actually go to a conference, it's like, you've got, you've got an excuse

00:34:07.280 --> 00:34:10.580
that this is more, this is like, my time is now set out.

00:34:10.580 --> 00:34:14.680
Whereas if I, if I was to say, I'm going away for a few days to a conference, that's fine.

00:34:14.680 --> 00:34:18.200
But if I try to attend that conference at home, it's like, that's not, yeah.

00:34:18.200 --> 00:34:18.640
Yeah.

00:34:18.640 --> 00:34:19.440
That's completely different.

00:34:19.440 --> 00:34:21.740
I'm going to lock myself in my room and watch TV for two days.

00:34:21.740 --> 00:34:22.980
I'll be back.

00:34:22.980 --> 00:34:23.540
Yeah.

00:34:23.540 --> 00:34:23.980
Yeah.

00:34:23.980 --> 00:34:24.320
Exactly.

00:34:24.320 --> 00:34:25.540
It's not the same story.

00:34:25.880 --> 00:34:26.040
Yeah.

00:34:26.040 --> 00:34:30.600
Someone at work actually suggested that we have like a, a work hotel sort of thing where

00:34:30.600 --> 00:34:32.500
people can attend virtual conferences.

00:34:32.500 --> 00:34:38.900
where, you know, especially if you're on, if, if they're late at night or they're in

00:34:38.900 --> 00:34:40.020
weird time zones and stuff.

00:34:40.020 --> 00:34:43.180
So even if it's just in your local city, you can go and stay there.

00:34:43.180 --> 00:34:46.240
So you can at least dedicate the time.

00:34:46.240 --> 00:34:51.320
anyway, the, so the pajamas, which I really wanted to attend, I managed to get through half

00:34:51.320 --> 00:34:51.880
a talk.

00:34:52.260 --> 00:34:55.980
and then I watched the other half like a week later.

00:34:55.980 --> 00:34:58.640
so that was not very successful.

00:34:58.640 --> 00:35:01.000
however, the talk was brilliant.

00:35:01.000 --> 00:35:03.040
So I wanted to share a link.

00:35:03.040 --> 00:35:07.320
It was called what the struct, by Zachary Anglin.

00:35:07.320 --> 00:35:13.740
And it's talking about the struct library, which is built into, the standard

00:35:13.740 --> 00:35:14.220
library.

00:35:14.220 --> 00:35:17.640
I didn't really realize there was a struct library, right?

00:35:17.640 --> 00:35:21.000
Like there is an array library that says this will hold floats contiguously.

00:35:21.180 --> 00:35:22.580
Same thing for structs, right?

00:35:22.580 --> 00:35:23.380
Yeah, exactly.

00:35:23.380 --> 00:35:28.140
And I think, you know, Brian was talking about data classes before we went live actually,

00:35:28.140 --> 00:35:30.840
but, you know, data classes are really cool.

00:35:30.840 --> 00:35:35.940
Like if you wanted to represent, interesting structures and stuff like that, ORMs are

00:35:35.940 --> 00:35:37.260
really important for this sort of thing.

00:35:37.260 --> 00:35:42.460
But if you're working with binary data, reading the binary data and then converting

00:35:42.460 --> 00:35:47.780
into native Python types, often, you know, you do C for that sort of thing.

00:35:47.780 --> 00:35:51.120
And in C you just declare a struct and just say, there's these filled.

00:35:51.120 --> 00:35:56.020
And you can just read and write that into binary, structures, which is kind of built

00:35:56.020 --> 00:35:58.360
in, but sometimes you need to do that in Python.

00:35:58.360 --> 00:36:03.040
If you're working with, actually, I've got some examples, but, so this explains what

00:36:03.040 --> 00:36:04.140
the structure library is.

00:36:04.140 --> 00:36:09.120
And it also has this macro language for describing what the underlying type is.

00:36:09.120 --> 00:36:12.760
and then you can kind of like pack and unpack it basically.

00:36:12.760 --> 00:36:18.260
So you can say, here's my, here's my class or whatever, and here's the fields and the underlying

00:36:18.260 --> 00:36:25.340
binary structure is a, you know, a float, a 32 bit integer or binary, Boolean, or,

00:36:25.480 --> 00:36:28.380
you know, it may be a, a, a ASCII string or something.

00:36:28.380 --> 00:36:33.720
so yeah, there's basically all these like little, characters, for packing and

00:36:33.720 --> 00:36:34.460
unpacking data.

00:36:34.460 --> 00:36:36.840
so yeah, it was really helpful.

00:36:36.840 --> 00:36:41.860
if you're getting into this topic of working with binary data structures or something that

00:36:41.860 --> 00:36:48.220
you've wanted to do, I recommend if you're on a Mac using a tool called Sinalize

00:36:48.220 --> 00:36:56.040
it, or spice analysis, which is basically a GUI for working with binary data and it has,

00:36:56.040 --> 00:36:58.600
um, a database of grammars.

00:36:58.600 --> 00:37:05.040
so you can basically like open a compiled executable or, you know, something like that.

00:37:05.040 --> 00:37:07.940
and it would be like, Oh, I know what this format is.

00:37:07.940 --> 00:37:12.600
And it would then just represent it in actually something more understandable and you can edit

00:37:12.600 --> 00:37:14.400
fields and hack around with stuff.

00:37:14.400 --> 00:37:17.440
it's great if you're doing capture the flags.

00:37:17.800 --> 00:37:26.900
or if you're doing some hacking for good, it's also really cool if you want to,

00:37:26.900 --> 00:37:31.980
um, edit files, which are not in a human readable format, if they're in a binary format.

00:37:31.980 --> 00:37:37.340
and in the database, they've got a whole bunch of examples, including a lot of save game

00:37:37.340 --> 00:37:37.980
formats.

00:37:37.980 --> 00:37:40.260
So this is actually how I got into this topic.

00:37:40.260 --> 00:37:43.820
originally it was when I was a lot younger playing games and stuff.

00:37:43.820 --> 00:37:45.640
And I'm like, what is this file?

00:37:45.640 --> 00:37:49.860
And then, you know, trying to echo it on the shell and it would be like, Oh, that's all

00:37:49.860 --> 00:37:50.340
gobbled.

00:37:50.340 --> 00:37:52.160
And then realizing it's all in binary.

00:37:52.160 --> 00:37:56.400
And then, you know, trying to figure out if you open it up in a hex editor or something,

00:37:56.400 --> 00:37:57.200
what it is.

00:37:57.200 --> 00:38:02.020
And then, Oh, if I change this field, then I can give myself more gold or I can make my

00:38:02.020 --> 00:38:03.740
character invincible or.

00:38:04.640 --> 00:38:07.360
So basically like hacking the game by modifying the save game.

00:38:07.360 --> 00:38:11.380
This end boss would be so much easier if I had a hundred thousand hit points or whatever.

00:38:11.380 --> 00:38:12.880
So let's just increment that number.

00:38:12.880 --> 00:38:13.680
Yeah, exactly.

00:38:13.680 --> 00:38:17.780
I think modern games are a bit, they kind of put protections around the save game because

00:38:17.780 --> 00:38:20.920
there's a lot more online aspect, but definitely older games.

00:38:20.920 --> 00:38:25.800
You can, you can hack the save games and most of them give yourself whatever it is that you

00:38:25.800 --> 00:38:26.300
feel like.

00:38:26.300 --> 00:38:29.880
so yeah, understanding binary structures is really helpful on the struct.

00:38:30.340 --> 00:38:33.160
you can even automate it using the struct module.

00:38:33.160 --> 00:38:34.980
Yeah, nice.

00:38:34.980 --> 00:38:35.380
Yeah.

00:38:35.380 --> 00:38:41.380
There's also some good comparisons between like the values of structs and then tuples and name

00:38:41.380 --> 00:38:43.420
tuples and data classes and Pydantic.

00:38:43.420 --> 00:38:45.900
So there's sort of a spectrum that gets covered there as well.

00:38:45.900 --> 00:38:46.380
Yeah.

00:38:46.380 --> 00:38:47.260
Interesting.

00:38:47.260 --> 00:38:52.880
Goes online well with the bit manipulation topic you were talking about.

00:38:52.880 --> 00:39:00.220
It's like, for instance, very structured, structs are, are very

00:39:00.220 --> 00:39:03.340
important for like message, systems like communication systems.

00:39:03.340 --> 00:39:09.200
we have very defined, fields within each, with, within the, you know, we've

00:39:09.200 --> 00:39:12.920
got 128 bit sequence or a thousand bits in there.

00:39:12.920 --> 00:39:17.080
Each bit is a specifically assigned to different things.

00:39:17.080 --> 00:39:22.020
and those are, yeah, we, you definitely don't want to just like hope that it's right.

00:39:22.020 --> 00:39:24.440
You have to put it exactly where you need it.

00:39:24.440 --> 00:39:24.760
Yeah.

00:39:24.760 --> 00:39:25.680
Yeah, exactly.

00:39:25.680 --> 00:39:28.360
Like little network packet headers and things like that.

00:39:28.500 --> 00:39:28.620
Yeah.

00:39:28.620 --> 00:39:28.940
Yeah.

00:39:28.940 --> 00:39:29.380
Yeah.

00:39:29.380 --> 00:39:32.060
I'm using this at the moment cause I'm writing a disassembler.

00:39:32.060 --> 00:39:34.020
So it's quite helpful.

00:39:34.020 --> 00:39:36.060
yeah.

00:39:36.060 --> 00:39:36.840
Awesome.

00:39:36.840 --> 00:39:37.240
Yeah.

00:39:37.240 --> 00:39:39.800
That you're, you're definitely doing some low level stuff these days.

00:39:39.800 --> 00:39:43.800
so I guess that's our, our main items for today.

00:39:43.800 --> 00:39:46.140
Brian, you got some, some extras you want to share.

00:39:46.140 --> 00:39:46.780
Yeah.

00:39:46.780 --> 00:39:51.660
We got, poked by the Python software foundation that we should probably plan some events.

00:39:51.660 --> 00:39:59.100
because we're, we're, we've got a meetup, the, Python PDX West meetup, but I can't

00:39:59.100 --> 00:40:02.480
access the building that we normally held it in and nobody would come anyway.

00:40:02.480 --> 00:40:02.820
Right.

00:40:02.820 --> 00:40:04.800
So, we're doing virtual.

00:40:04.800 --> 00:40:09.240
So we've got, January 14th, we're going to do, we're going to start seeing what

00:40:09.240 --> 00:40:10.660
it's like to do a virtual thing.

00:40:10.660 --> 00:40:14.820
And I thought, you know, normally when we did the meetups before it was in the evening,

00:40:14.820 --> 00:40:18.560
I don't really want to hang out in the, in the evening doing this, but a lunchtime would

00:40:18.560 --> 00:40:19.000
be fine.

00:40:19.320 --> 00:40:22.080
So I thought like a lunch, a lunch and learn thing.

00:40:22.080 --> 00:40:24.180
So we're going to try that and see what it's like.

00:40:24.180 --> 00:40:24.200
Yeah.

00:40:24.200 --> 00:40:24.740
It's perfect.

00:40:24.740 --> 00:40:27.220
Being virtual, you could just do it during lunch, right?

00:40:27.220 --> 00:40:31.460
You don't have to go, okay, well I'm going to drive out, you know, fight the traffic or

00:40:31.460 --> 00:40:31.720
whatever.

00:40:31.720 --> 00:40:32.000
Right.

00:40:32.000 --> 00:40:32.460
Yeah.

00:40:32.460 --> 00:40:34.760
And I don't have to convince my boss to buy a bunch of pizzas.

00:40:34.760 --> 00:40:37.320
so yeah, exactly.

00:40:37.320 --> 00:40:37.960
Exactly.

00:40:37.960 --> 00:40:38.480
All right.

00:40:38.480 --> 00:40:40.340
I got a couple of extras as well.

00:40:40.340 --> 00:40:44.280
I ended up doing a FastAPI webcast with the folks over at JetBrains.

00:40:44.280 --> 00:40:45.940
So people can check that out.

00:40:46.140 --> 00:40:48.920
They want to go learn more about that.

00:40:48.920 --> 00:40:54.020
And then also let me close my, our notes here, but I'll get them back.

00:40:54.020 --> 00:40:55.160
Brian, you go next.

00:40:55.160 --> 00:40:56.280
I got to pull this up somewhere else.

00:40:56.280 --> 00:40:57.580
I just went.

00:40:57.580 --> 00:40:58.660
So let's, sorry.

00:40:58.660 --> 00:40:59.180
Yeah.

00:40:59.180 --> 00:40:59.840
You got it.

00:40:59.840 --> 00:41:00.320
Anthony, yeah.

00:41:00.320 --> 00:41:01.780
Anthony, what are you up to these days?

00:41:01.780 --> 00:41:03.220
What extra you got to share with folks?

00:41:03.220 --> 00:41:04.120
yeah.

00:41:04.120 --> 00:41:09.520
So, I'm going to be starting at Microsoft in February, which is big news for me.

00:41:09.520 --> 00:41:09.980
Yeah.

00:41:09.980 --> 00:41:10.560
Congratulations.

00:41:10.560 --> 00:41:11.160
That's awesome.

00:41:11.160 --> 00:41:11.740
Yeah.

00:41:11.740 --> 00:41:11.940
Yeah.

00:41:11.940 --> 00:41:12.960
I'm really excited about it.

00:41:13.220 --> 00:41:17.680
so yeah, I'm going to be the Python developer advocate working with, Nina Zakarenko.

00:41:17.680 --> 00:41:22.380
So Nina's the current Python developer advocate and I'm going to be, yeah, helping

00:41:22.380 --> 00:41:22.660
out.

00:41:22.660 --> 00:41:27.940
so yeah, really looking forward to it and working with a bunch of smart people over at

00:41:27.940 --> 00:41:28.200
Microsoft.

00:41:28.200 --> 00:41:30.060
So yeah, all things Python.

00:41:30.060 --> 00:41:33.160
do you know any particular projects you're working on?

00:41:33.160 --> 00:41:37.520
So I'm not going to be, I'm not going to be, I'm not on the engineering team.

00:41:37.520 --> 00:41:41.080
and I'm definitely not working on Pidgin.

00:41:41.080 --> 00:41:42.460
This has got nothing to do with Pidgin.

00:41:42.460 --> 00:41:46.140
contrary to the rumor, I guess.

00:41:46.140 --> 00:41:47.860
you were hired to work on Pidgin.

00:41:47.860 --> 00:41:48.500
That's what I heard.

00:41:48.500 --> 00:41:48.980
Come on.

00:41:48.980 --> 00:41:49.620
Yeah.

00:41:49.620 --> 00:41:51.240
I, yeah, I'm definitely not.

00:41:51.240 --> 00:41:53.960
so yeah, this is kind of a side thing.

00:41:53.960 --> 00:42:01.180
but yeah, it's kind of, definitely the, Azure platform and like using Python

00:42:01.180 --> 00:42:07.180
and Python working with Azure and on Azure, VS Code and the Python extension and

00:42:07.180 --> 00:42:12.660
just the tooling and around that, as well as the Python ecosystem with Microsoft products

00:42:12.660 --> 00:42:16.580
in general or Microsoft technologies, and Python in general.

00:42:16.580 --> 00:42:21.940
So, all things Python and yeah, really looking forward to starting on the 1st of Feb.

00:42:21.940 --> 00:42:26.400
and yeah, I have a long list of things that I want to, want to get stuck into.

00:42:26.400 --> 00:42:27.020
Yeah.

00:42:27.020 --> 00:42:30.360
I'm guessing that's remote, not just now, but permanently, right?

00:42:30.680 --> 00:42:31.000
Yes.

00:42:31.000 --> 00:42:31.540
Yeah.

00:42:31.540 --> 00:42:31.900
Yeah.

00:42:31.900 --> 00:42:33.480
That's super, that's super exciting.

00:42:33.480 --> 00:42:39.080
but that does mean Brian that he'll be somewhat in our neighborhood more often.

00:42:39.080 --> 00:42:43.500
I suspect you'll come up to Seattle and Redmond sometimes when that happens again, when the

00:42:43.500 --> 00:42:44.620
world is let loose.

00:42:44.620 --> 00:42:45.240
Yeah.

00:42:45.240 --> 00:42:49.580
I expect so when, we're not even allowed to lead the country at the moment.

00:42:49.580 --> 00:42:50.740
Yeah.

00:42:50.740 --> 00:42:53.960
Well, we'll see you in the Northwest once in a while.

00:42:53.960 --> 00:42:54.760
Yeah.

00:42:54.760 --> 00:42:55.060
Yeah.

00:42:55.060 --> 00:42:57.220
When, when, maybe 2022.

00:42:57.220 --> 00:42:58.280
Yeah.

00:42:58.280 --> 00:42:59.180
What 2030?

00:42:59.180 --> 00:43:00.500
We'll definitely see you.

00:43:00.500 --> 00:43:00.740
2030.

00:43:00.740 --> 00:43:01.460
No problem.

00:43:01.460 --> 00:43:06.640
Also, from, from, the YouTube stream, piling says, congrats Anthony on the new job.

00:43:06.640 --> 00:43:07.320
Thanks, piling.

00:43:07.320 --> 00:43:07.960
Yeah.

00:43:07.960 --> 00:43:08.300
Yeah.

00:43:08.300 --> 00:43:13.760
So we should have like a, like a webpage with like a, graphic to show like how many,

00:43:13.760 --> 00:43:20.200
like well-known Python people there are and the, like maybe a death star Microsoft sucking

00:43:20.200 --> 00:43:22.280
all the Python people into Microsoft.

00:43:22.280 --> 00:43:22.900
Yeah.

00:43:23.900 --> 00:43:26.040
They're pretty evenly distributed.

00:43:26.040 --> 00:43:26.600
Yeah.

00:43:26.600 --> 00:43:28.440
Yeah.

00:43:28.440 --> 00:43:30.040
No, it's all good.

00:43:30.040 --> 00:43:30.560
All right.

00:43:30.560 --> 00:43:34.000
Well, I feel like, might be time to wrap this up with a joke.

00:43:34.000 --> 00:43:34.700
You think?

00:43:34.700 --> 00:43:35.260
Sure.

00:43:35.260 --> 00:43:35.820
Yeah.

00:43:36.100 --> 00:43:41.860
So, this one came to us over Twitter from Lars and there was a, apparently a question.

00:43:41.860 --> 00:43:47.120
Someone named Kate Maddox asks, what's the best programming language for coding your own

00:43:47.120 --> 00:43:47.680
therapist?

00:43:47.780 --> 00:43:49.100
You know, like we're all stuck at home.

00:43:49.100 --> 00:43:54.100
People are depressed, have social anxiety or just anxiety about the world in general.

00:43:54.100 --> 00:43:57.240
And Wes comes along with a, an appropriate answer.

00:43:57.240 --> 00:43:58.020
What do you guys think here?

00:43:58.020 --> 00:44:00.020
Python, of course, is the language.

00:44:00.020 --> 00:44:04.580
So you can call it thera, I, E-H-E-R-A dot P-Y.

00:44:04.580 --> 00:44:05.180
Yeah.

00:44:05.180 --> 00:44:09.740
I think it's pretty much on par for our standard jokes though.

00:44:09.740 --> 00:44:12.840
Yeah.

00:44:12.840 --> 00:44:15.580
might be better than average actually.

00:44:15.580 --> 00:44:15.900
Yeah.

00:44:15.900 --> 00:44:16.240
Yeah.

00:44:16.240 --> 00:44:17.060
It could be better than that.

00:44:17.060 --> 00:44:19.580
You need a little drum kit in the background, Brian, that you can.

00:44:19.580 --> 00:44:20.120
Yeah.

00:44:20.120 --> 00:44:22.000
Some symbols.

00:44:22.000 --> 00:44:23.020
We'll set you up with like a little.

00:44:23.020 --> 00:44:24.020
It's a business expense.

00:44:24.020 --> 00:44:25.400
I'll totally get a drum kit.

00:44:25.400 --> 00:44:26.060
Yeah.

00:44:26.060 --> 00:44:27.720
Fantastic.

00:44:27.720 --> 00:44:28.580
All right.

00:44:28.580 --> 00:44:30.120
Well, Brian, thanks as always.

00:44:30.120 --> 00:44:31.720
And Anthony, thanks for joining us.

00:44:31.720 --> 00:44:32.380
Thank you.

00:44:32.380 --> 00:44:32.640
Yeah.

00:44:32.640 --> 00:44:33.160
Always a pleasure.

00:44:33.160 --> 00:44:33.760
Yeah.

00:44:33.760 --> 00:44:34.060
You bet.

00:44:34.060 --> 00:44:35.080
And everyone listening.

00:44:35.080 --> 00:44:36.040
See you next time.

00:44:36.040 --> 00:44:37.860
Thank you for listening to Python Bytes.

00:44:37.860 --> 00:44:40.420
Follow the show on Twitter via at Python Bytes.

00:44:40.420 --> 00:44:43.300
That's Python Bytes as in B-Y-T-E-S.

00:44:43.300 --> 00:44:46.580
And get the full show notes at Pythonbytes.fm.

00:44:46.580 --> 00:44:50.820
If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:44:50.820 --> 00:44:53.520
We're always on the lookout for sharing something cool.

00:44:53.520 --> 00:44:56.640
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:44:56.640 --> 00:45:00.060
Thank you for listening and sharing this podcast with your friends and colleagues.

