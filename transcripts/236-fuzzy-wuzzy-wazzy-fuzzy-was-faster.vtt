
00:00:00.000 --> 00:00:04.640
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.640 --> 00:00:10.080
This is episode 236 recorded June 2nd 2021. I'm Michael Kennedy.


00:00:10.080 --> 00:00:11.200
And I'm Brian Okken.


00:00:11.200 --> 00:00:12.800
And I'm Anastasia Timoshev.


00:00:12.800 --> 00:00:17.280
Hey Anastasia, so great to have you here. Nice to have you on the show.


00:00:17.280 --> 00:00:18.640
Thank you for inviting.


00:00:18.640 --> 00:00:22.560
Yeah, absolutely. Why don't you tell people a little bit about yourself before we get into the topics?


00:00:22.560 --> 00:00:25.840
So I'm joining from Germany, Berlin remotely right now.


00:00:25.840 --> 00:00:30.840
And I have a little one, a baby dog joining as well.


00:00:30.840 --> 00:00:33.300
You might hear him on the stream.


00:00:33.300 --> 00:00:35.020
I am originally from Ukraine.


00:00:35.020 --> 00:00:35.860
I'm not German.


00:00:35.860 --> 00:00:38.100
I moved to Germany around five years ago,


00:00:38.100 --> 00:00:40.060
maybe five and a half.


00:00:40.060 --> 00:00:42.020
And my passion is Python.


00:00:42.020 --> 00:00:44.620
I used to be a C++ developer, a game developer,


00:00:44.620 --> 00:00:46.140
and so many more languages,


00:00:46.140 --> 00:00:49.020
but the best one I think for me is Python.


00:00:49.020 --> 00:00:53.180
So I decided to stick with it for around eight years now.


00:00:53.180 --> 00:00:54.020
- Oh, how cool.


00:00:54.020 --> 00:00:57.700
I started out doing my professional programming in C++


00:00:57.700 --> 00:01:00.380
and I know Brian still touches a little bit of C and C++


00:01:00.380 --> 00:01:02.220
in his world, so that's cool.


00:01:02.220 --> 00:01:03.540
- Yeah, it's half my life.


00:01:03.540 --> 00:01:07.060
- Nice, and what kind of games?


00:01:07.060 --> 00:01:11.660
- Well, they were adapted first for iPad.


00:01:11.660 --> 00:01:14.100
They were like two and a half D games


00:01:14.100 --> 00:01:19.100
and then later on it was mostly 3D games with Unreal Engine.


00:01:19.100 --> 00:01:22.420
- Cool, yeah, that's awesome.


00:01:22.420 --> 00:01:24.620
All right, well, once again, welcome, welcome.


00:01:24.620 --> 00:01:26.340
So glad to have you here.


00:01:26.340 --> 00:01:28.140
Brian, do I have the first item this time around?


00:01:28.140 --> 00:01:28.960
No, you do.


00:01:28.960 --> 00:01:29.800
Go for it.


00:01:29.800 --> 00:01:31.500
What do you got for us?


00:01:31.500 --> 00:01:33.980
- Well, accessibility isn't really something,


00:01:33.980 --> 00:01:36.020
I probably should think about accessibility more,


00:01:36.020 --> 00:01:38.980
but I don't really, but I probably should.


00:01:38.980 --> 00:01:40.820
So I was excited to see,


00:01:40.820 --> 00:01:45.140
there was a tweet recently by Matthew Fickert that said,


00:01:45.140 --> 00:01:46.700
"I need to give some serious praise


00:01:46.700 --> 00:01:51.260
"to a fellow scikit-hep dev, Hans Daminski,


00:01:51.260 --> 00:01:56.600
and it's an excellent monolens tool for interactive simulations of colorblindness.


00:01:56.600 --> 00:01:57.960
So I checked this out.


00:01:57.960 --> 00:02:02.020
So monolens is a Python package, and you can pip install it.


00:02:02.020 --> 00:02:06.500
And as Matthew said, you can pipx install it,


00:02:06.500 --> 00:02:08.700
so you just always have it around, which is nice.


00:02:08.700 --> 00:02:15.920
And it just pops up this really cool window,


00:02:15.920 --> 00:02:20.020
and you can just drag it around,


00:02:20.100 --> 00:02:23.340
and it makes whatever the windows are over,


00:02:23.340 --> 00:02:27.340
all over your desktop, it just makes it black and white instead of color.


00:02:27.340 --> 00:02:31.580
So you can see what it looks like in grayscale.


00:02:31.580 --> 00:02:34.540
One of the things I really liked about this is


00:02:34.540 --> 00:02:41.300
the example showing it with Matplotlib and plots,


00:02:41.300 --> 00:02:44.880
because plots are really where you're using color to


00:02:44.880 --> 00:02:48.940
distinguish between two different sets of data.


00:02:48.940 --> 00:02:54.220
You really want that data to look different even if people don't see color.


00:02:54.220 --> 00:02:57.320
That's an important thing. That was neat.


00:02:57.320 --> 00:03:00.140
Then somebody that replied to that and said,


00:03:00.140 --> 00:03:05.120
"Hey, I always try to use Cmasher,


00:03:05.120 --> 00:03:07.540
Smasher, I'm not sure,


00:03:07.540 --> 00:03:11.260
to make sure they're colorblind friendly."


00:03:11.260 --> 00:03:12.740
I'm like, "I've never heard of this."


00:03:12.740 --> 00:03:16.100
I went and checked out Smasher.


00:03:16.100 --> 00:03:20.660
What it is is it's a bunch of color maps.


00:03:20.660 --> 00:03:23.180
You don't really have to think about it.


00:03:23.180 --> 00:03:26.040
There's all these great named color maps,


00:03:26.040 --> 00:03:30.540
and they're actually fairly attractive color changes.


00:03:30.540 --> 00:03:35.380
But it shows you what they look like in black and white also.


00:03:35.380 --> 00:03:41.060
This is a little demo at the top that we're looking at on the stream.


00:03:41.060 --> 00:03:43.500
But the code that you have to,


00:03:43.500 --> 00:03:47.020
it's just built into MapPlotLib already.


00:03:47.020 --> 00:03:48.820
It's also an extension to


00:03:48.820 --> 00:03:51.620
MapPlotLib and other things that use color maps.


00:03:51.620 --> 00:03:53.340
You can just say when you're plotting,


00:03:53.340 --> 00:03:56.720
you can just specify a color map like rainforest or something,


00:03:56.720 --> 00:04:00.740
and it automatically is a colorblind,


00:04:00.740 --> 00:04:02.900
friendly color map.


00:04:02.900 --> 00:04:07.180
You can do your plots and have it still look nice everywhere.


00:04:07.180 --> 00:04:08.820
>> Yeah. This is really cool.


00:04:08.820 --> 00:04:11.780
Matthew friend of the show, thanks for sending that in.


00:04:11.780 --> 00:04:25.500
I never really thought about this and I should have, you know, I mean, I feel like maybe I should go over my websites and go, do they look terrible for people who have, you know, color, vision impairments and whatnot.


00:04:25.500 --> 00:04:27.620
So really cool.


00:04:27.620 --> 00:04:30.460
And it looks like it's this independent thing that we'll just go over.


00:04:30.460 --> 00:04:31.760
You just move your mouse around.


00:04:31.760 --> 00:04:32.480
It works on anything.


00:04:32.480 --> 00:04:36.660
It doesn't necessarily have to do with Jupiter or matplotlib or something like that.


00:04:36.660 --> 00:04:36.920
Right.


00:04:36.920 --> 00:04:37.540
Great.


00:04:37.540 --> 00:04:40.440
So the monolens is just something that works on anything.


00:04:40.440 --> 00:04:43.840
I drug it over even my desktop, my background,


00:04:43.840 --> 00:04:46.940
and it showed the picture in black and white.


00:04:46.940 --> 00:04:48.740
So it is cool.


00:04:48.740 --> 00:04:54.280
>> The other thing is, wait, there's color maps I can just add to Mapplotlib?


00:04:54.280 --> 00:04:56.880
That's cool. Like rainbows and stuff, how neat.


00:04:56.880 --> 00:04:58.680
>> I didn't know you could just do that.


00:04:58.680 --> 00:05:00.340
So that's a neat thing.


00:05:00.340 --> 00:05:02.200
Then you can, for instance,


00:05:02.200 --> 00:05:06.360
one of the examples that they have on the C-Mesh or Readme,


00:05:06.360 --> 00:05:09.520
It's just sort of a simple plot.


00:05:09.520 --> 00:05:13.920
And when you're in map plot lib kind of just picks colors for you


00:05:13.920 --> 00:05:16.920
unless you specify colors for different plot lines.


00:05:16.920 --> 00:05:24.480
But you can just you can give it a color map instead of a specific list for each item.


00:05:24.480 --> 00:05:28.200
So and that's just kind of nice.


00:05:28.200 --> 00:05:29.480
Why not do it?


00:05:29.480 --> 00:05:30.480
Yeah, why not do it?


00:05:30.480 --> 00:05:31.800
Anastasia, what do you think?


00:05:31.800 --> 00:05:33.640
It looks amazing, really.


00:05:33.640 --> 00:05:35.240
And it's super helpful.


00:05:35.240 --> 00:05:37.880
Yeah, when you were doing the video games?


00:05:37.880 --> 00:05:40.280
But that would be great to use it as well.


00:05:40.280 --> 00:05:43.480
For sure. When you were doing games, did you have to think about this kind of stuff?


00:05:43.480 --> 00:05:49.240
No, actually, we were not that far at that time. It was around seven years ago, eight.


00:05:49.240 --> 00:05:50.540
Yeah.


00:05:50.540 --> 00:05:51.580
Yeah.


00:05:51.580 --> 00:05:59.480
On the Monolens site, one of the examples they show is having one of the plots use


00:05:59.480 --> 00:06:04.840
some sort of pattern underneath and not just color. And I'm not sure how to do that. So


00:06:04.840 --> 00:06:06.780
So people that are great at Matplotlib


00:06:06.780 --> 00:06:09.020
probably know how to do that really right away.


00:06:09.020 --> 00:06:11.400
But that's kind of a neat idea also to have like,


00:06:11.400 --> 00:06:14.600
one of the graphs has hashes versus stars


00:06:14.600 --> 00:06:16.720
or slant lines or something like that.


00:06:16.720 --> 00:06:20.240
- Oh yeah, I have it like some sort of ASCII differentiator.


00:06:20.240 --> 00:06:21.080
Yeah. - Yeah.


00:06:21.080 --> 00:06:22.600
- So that's nice.


00:06:22.600 --> 00:06:23.720
Yeah, this is super helpful.


00:06:23.720 --> 00:06:24.560
I'm Matthew again.


00:06:24.560 --> 00:06:26.200
Thanks for sending in.


00:06:26.200 --> 00:06:28.860
And Joy, yeah, welcome to the live stream.


00:06:28.860 --> 00:06:31.320
Thanks for being here for the recording.


00:06:31.320 --> 00:06:33.360
So the next one I wanna talk about


00:06:33.360 --> 00:06:36.480
is something called RapidFuzz.


00:06:36.480 --> 00:06:37.720
- RapidFuzz.


00:06:37.720 --> 00:06:41.080
- Yeah, so last time I talked when we had Vincent on,


00:06:41.080 --> 00:06:44.860
I saw the fuzzy wuzzy, fuzzy text matching for that,


00:06:44.860 --> 00:06:47.200
that chat bot that he was showing off.


00:06:47.200 --> 00:06:48.900
I thought, oh, fuzzy wuzzy is cool.


00:06:48.900 --> 00:06:53.900
So Mikhail Honkala sent in RapidFuzz.


00:06:53.900 --> 00:06:56.400
And it's very much like fuzzy wuzzy,


00:06:56.400 --> 00:06:59.180
but it turns out to be a whole lot faster.


00:06:59.180 --> 00:07:00.800
And it uses some of the same ideas,


00:07:00.800 --> 00:07:02.080
but you know, coming back to the,


00:07:02.080 --> 00:07:03.480
some of the things we were talking about.


00:07:03.480 --> 00:07:06.000
It is basically written in C++


00:07:06.000 --> 00:07:09.680
using the Levenstein distance algorithm for words,


00:07:09.680 --> 00:07:13.360
similarities, but obviously has a Python API


00:07:13.360 --> 00:07:14.800
that we all work with.


00:07:14.800 --> 00:07:16.520
And so yeah, it's pretty neat.


00:07:16.520 --> 00:07:17.860
It's really easy to work with.


00:07:17.860 --> 00:07:19.420
You just, again, pip install it,


00:07:19.420 --> 00:07:21.880
and then you come down here and do things like


00:07:21.880 --> 00:07:25.120
fuzz.ratio, and you can then give it two sentences.


00:07:25.120 --> 00:07:28.720
This is a test, or this is a test exclamation mark,


00:07:28.720 --> 00:07:31.720
and it says that's 96.5% the same,


00:07:31.720 --> 00:07:34.960
Or, you have fuzzy wuzzy was a bear.


00:07:34.960 --> 00:07:37.480
I guess these are, yeah, fuzzy wuzzy was a bear.


00:07:37.480 --> 00:07:39.240
I guess those are, those are the same?


00:07:39.240 --> 00:07:40.480
- No, wuzzy fuzzy.


00:07:40.480 --> 00:07:42.960
- Oh, wuzzy fuzzy, yeah, I gotta read better.


00:07:42.960 --> 00:07:45.320
Wuzzy fuzzy was a bear versus fuzzy wuzzy was a bear.


00:07:45.320 --> 00:07:46.800
Oh my goodness.


00:07:46.800 --> 00:07:48.360
That's 90% the same.


00:07:48.360 --> 00:07:52.280
Given a bunch of phrases, you can sort them by similarity.


00:07:52.280 --> 00:07:54.840
You can say, gonna use selection,


00:07:54.840 --> 00:07:57.240
like, you know, to call in,


00:07:57.240 --> 00:07:59.360
sort of call center type of automation.


00:07:59.360 --> 00:08:02.180
given three choices and given some text,


00:08:02.180 --> 00:08:04.280
you can say find which one,


00:08:04.280 --> 00:08:06.040
you know, like Atlanta Falcons, New York Jets,


00:08:06.040 --> 00:08:07.860
New York Giants, and so on.


00:08:07.860 --> 00:08:10.120
Somebody says, you know, lowercase New York Jets


00:08:10.120 --> 00:08:12.420
instead of uppercase, it'll say, well,


00:08:12.420 --> 00:08:14.360
here's the likelihood that that's a match,


00:08:14.360 --> 00:08:16.520
but here's another possible match that's, you know,


00:08:16.520 --> 00:08:19.120
and it gives you the ratios of how good of a match it is.


00:08:19.120 --> 00:08:21.500
So if you've got a select set of choices


00:08:21.500 --> 00:08:23.240
and you're asking for input on it,


00:08:23.240 --> 00:08:25.400
you can just say, well, give me the closest match.


00:08:25.400 --> 00:08:27.680
And if it's anywhere close, you can just run with that.


00:08:27.680 --> 00:08:29.400
So yeah, pretty neat, right?


00:08:29.400 --> 00:08:30.480
- That is pretty cool.


00:08:30.480 --> 00:08:33.920
- Yeah, and the other thing that's interesting


00:08:33.920 --> 00:08:35.120
is the performance.


00:08:35.120 --> 00:08:38.800
And before people tell me that all benchmarks are broken


00:08:38.800 --> 00:08:39.720
and they don't work,


00:08:39.720 --> 00:08:41.320
sometimes at least they give you a sense.


00:08:41.320 --> 00:08:44.920
So here's some of the things that they've got


00:08:44.920 --> 00:08:46.880
in terms of performance, say versus Fuzzy Wuzzy,


00:08:46.880 --> 00:08:49.960
and the numbers are like 10 or 20 times faster.


00:08:49.960 --> 00:08:51.080
- Definitely broken.


00:08:51.080 --> 00:08:53.120
- It's definitely broken.


00:08:53.120 --> 00:08:55.000
I think it's because it's written in C++


00:08:55.000 --> 00:08:58.360
instead of Python at most of its core, you know, probably.


00:08:58.360 --> 00:09:01.880
But anyway, if you're looking for fuzzy text matching,


00:09:01.880 --> 00:09:03.280
fuzzy wuzzy is a good option.


00:09:03.280 --> 00:09:06.600
And apparently, thanks to Mikko, rapid fuzz is as well.


00:09:06.600 --> 00:09:07.960
So yeah, pretty neat.


00:09:07.960 --> 00:09:09.240
- Yeah, we probably should do a segment


00:09:09.240 --> 00:09:11.060
on benchmarks at some point.


00:09:11.060 --> 00:09:12.320
- No, no.


00:09:12.320 --> 00:09:14.400
- No. (laughs)


00:09:14.400 --> 00:09:15.580
- No, we should do it.


00:09:15.580 --> 00:09:17.560
But I've written blog posts and stuff on it,


00:09:17.560 --> 00:09:20.800
and it's just an endless battle of you're doing it wrong.


00:09:20.800 --> 00:09:22.680
Your situation is not my situation.


00:09:22.680 --> 00:09:25.120
in my situation, it's not as good or it's worse


00:09:25.120 --> 00:09:28.160
or it's better or you're, yeah, no, I hear you.


00:09:28.160 --> 00:09:30.400
It would be interesting, but at the same time, yeah.


00:09:30.400 --> 00:09:31.240
- Okay, there we go.


00:09:31.240 --> 00:09:33.520
We just had a section on benchmarks.


00:09:33.520 --> 00:09:36.440
- Yeah, I've already just explained the emotional trauma


00:09:36.440 --> 00:09:38.240
that I'll go through from receiving all the feedback.


00:09:38.240 --> 00:09:39.560
Now it's, (laughs)


00:09:39.560 --> 00:09:43.720
Ines, what do you think about this fuzzy text matching?


00:09:43.720 --> 00:09:45.200
- Well, maybe next time we can organize


00:09:45.200 --> 00:09:46.320
a battle between them.


00:09:46.320 --> 00:09:47.480
(both laugh)


00:09:47.480 --> 00:09:49.280
- That's right, yeah, we'll bring some in.


00:09:49.280 --> 00:09:50.280
- Yeah, sure.


00:09:50.280 --> 00:09:52.160
- Do you have any use for this fuzzy text matching,


00:09:52.160 --> 00:09:53.280
string matching stuff?


00:09:53.280 --> 00:09:55.160
- Well, actually, yes, it's work.


00:09:55.160 --> 00:09:58.760
We have lots of matching algorithms,


00:09:58.760 --> 00:10:01.920
but we are using different tools,


00:10:01.920 --> 00:10:04.040
and I'm not a data scientist person,


00:10:04.040 --> 00:10:06.680
but I would love to try that, actually.


00:10:06.680 --> 00:10:07.840
Looks super cool.


00:10:07.840 --> 00:10:10.600
Yeah, we use some C++ libraries, well.


00:10:10.600 --> 00:10:11.640
- Cool. - Yeah.


00:10:11.640 --> 00:10:13.440
- Yeah, Robert out there in the live stream says,


00:10:13.440 --> 00:10:15.360
we would have to benchmark the episode


00:10:15.360 --> 00:10:17.440
if we had an episode about benchmarking.


00:10:17.440 --> 00:10:19.120
You see, it's like recursion.


00:10:19.120 --> 00:10:21.200
Save that thought for the end of the show, by the way.


00:10:21.200 --> 00:10:23.560
- All right, Anastasia, you're up next.


00:10:23.560 --> 00:10:25.520
Structured logging, tell us about it.


00:10:25.520 --> 00:10:29.080
- Well, a few years ago, I went to a meetup


00:10:29.080 --> 00:10:33.960
and I heard a talk from Markus Holterman about StructLog.


00:10:33.960 --> 00:10:35.960
That's the first time when I heard about this


00:10:35.960 --> 00:10:37.900
and I decided to give it a try.


00:10:37.900 --> 00:10:40.400
And actually, I fell in love with it


00:10:40.400 --> 00:10:44.200
and I'm using it since at least two and a half years,


00:10:44.200 --> 00:10:45.040
maybe two.


00:10:45.040 --> 00:10:49.720
It's awesome way to bring a bit of structure to your logs


00:10:49.720 --> 00:10:52.940
to make them more visible and more usable


00:10:52.940 --> 00:10:55.560
because usually how we log,


00:10:55.560 --> 00:10:58.280
it's like just one huge sentence,


00:10:58.280 --> 00:11:00.600
which is readable by humans,


00:11:00.600 --> 00:11:02.560
but it's not machine readable.


00:11:02.560 --> 00:11:06.320
And the idea is here to bring more structure,


00:11:06.320 --> 00:11:10.940
to build some dashboards based on different keys


00:11:10.940 --> 00:11:11.880
and then values,


00:11:11.880 --> 00:11:14.600
and then see what's actually happening with the system


00:11:14.600 --> 00:11:16.320
without touching the logs,


00:11:16.320 --> 00:11:18.440
without scrolling through the whole log


00:11:18.440 --> 00:11:23.440
and then just reading a whole bunch of things.


00:11:23.440 --> 00:11:26.740
And I already used it in production.


00:11:26.740 --> 00:11:27.820
It looks pretty well.


00:11:27.820 --> 00:11:32.820
If you try using JSON format, just fantastic.


00:11:32.820 --> 00:11:34.060
- Oh, how cool.


00:11:34.060 --> 00:11:37.340
Yeah, you can pass it all these processors and type stuff.


00:11:37.340 --> 00:11:41.820
So you can say, render out the print the stack info,


00:11:41.820 --> 00:11:44.700
the log level, timestamp, all those kinds of things.


00:11:44.700 --> 00:11:45.540
That's neat.


00:11:45.540 --> 00:11:48.340
- We added a bunch of processors, like custom made,


00:11:48.340 --> 00:11:52.100
which were specifically designed for our applications,


00:11:52.100 --> 00:11:57.100
which made a life of our DevOps parsing the logs way easier


00:11:57.100 --> 00:12:00.640
because they didn't have to write them by hand.


00:12:00.640 --> 00:12:04.900
And if you use structured logs for all applications,


00:12:04.900 --> 00:12:07.680
not just one, but for example, microservices,


00:12:07.680 --> 00:12:12.180
and you pass the key ID or like trace ID


00:12:12.180 --> 00:12:14.640
or something that will identify the path


00:12:14.640 --> 00:12:18.000
which the log goes through,


00:12:18.000 --> 00:12:21.820
then you might see what happened before the bug happened.


00:12:21.820 --> 00:12:25.740
Or maybe because if you want to see


00:12:25.740 --> 00:12:27.380
how the system is working,


00:12:27.380 --> 00:12:31.440
you also need to be either one of the detectives


00:12:31.440 --> 00:12:33.900
of the system or use the struct log.


00:12:33.900 --> 00:12:36.340
- Yeah, it's interesting when you log out stuff,


00:12:36.340 --> 00:12:40.200
it looks like you can just do key keyword arguments


00:12:40.200 --> 00:12:43.220
and those will add to the log really nicely.


00:12:43.220 --> 00:12:45.480
So you don't have to create a message


00:12:45.480 --> 00:12:48.600
that you're going to send that embeds, you know,


00:12:48.600 --> 00:12:51.100
the value, you know, variable equals valuable,


00:12:51.100 --> 00:12:51.940
variable equals value,


00:12:51.940 --> 00:12:53.600
you just pass them to the log message


00:12:53.600 --> 00:12:55.960
and they become part of the message like that.


00:12:55.960 --> 00:12:56.800
That's cool.


00:12:56.800 --> 00:12:59.380
- Yeah, and you can also use the initial message,


00:12:59.380 --> 00:13:01.780
which is an event like greeted here,


00:13:01.780 --> 00:13:04.800
as some kind of key,


00:13:04.800 --> 00:13:06.360
which would give more clues


00:13:06.360 --> 00:13:08.160
where this message is coming from


00:13:08.160 --> 00:13:09.980
and what type of event happened


00:13:09.980 --> 00:13:12.520
instead of a usual message.


00:13:12.520 --> 00:13:13.640
- Yeah, nice.


00:13:13.640 --> 00:13:14.480
Very cool.


00:13:14.480 --> 00:13:17.280
The other thing it says is if you have Colorama installed,


00:13:17.280 --> 00:13:20.000
it will automatically render in nice colors.


00:13:20.000 --> 00:13:21.000
That's very neat.


00:13:21.000 --> 00:13:23.360
I love Colorama and I love having colors


00:13:23.360 --> 00:13:26.160
in the code that we look at.


00:13:26.160 --> 00:13:27.720
It really makes a nice difference.


00:13:27.720 --> 00:13:30.540
So yeah, you get things like the colored,


00:13:30.540 --> 00:13:34.160
whether it's an info message or an error and whatnot.


00:13:34.160 --> 00:13:35.800
Yeah, very neat. I like it.


00:13:35.800 --> 00:13:39.080
- I keep meaning to use this more and I know,


00:13:39.080 --> 00:13:39.920
I'm glad you brought it up


00:13:39.920 --> 00:13:41.760
'cause I definitely want to try this.


00:13:41.760 --> 00:13:42.720
- Definitely try this.


00:13:42.720 --> 00:13:44.800
- Yeah, this is a really good one.


00:13:44.800 --> 00:13:46.960
This is new to me, but quite neat.


00:13:46.960 --> 00:13:49.320
All right, not new to me, but also quite neat,


00:13:49.320 --> 00:13:50.800
is our sponsor for this episode.


00:13:50.800 --> 00:13:54.600
So this episode is brought to you by Sentry.


00:13:54.600 --> 00:13:56.040
So how would you like to remove


00:13:56.040 --> 00:13:57.500
a little stress from your life?


00:13:57.500 --> 00:13:59.880
Do you worry that users may be having difficulties


00:13:59.880 --> 00:14:02.240
and encountering errors with your app right now?


00:14:02.240 --> 00:14:04.760
Would you even know until they send that support email?


00:14:04.760 --> 00:14:06.080
Yes, maybe using StruckLog,


00:14:06.080 --> 00:14:08.000
but are you watching the StruckLog now?


00:14:08.000 --> 00:14:08.960
You don't know, right?


00:14:08.960 --> 00:14:10.720
So how much better would it be


00:14:10.720 --> 00:14:13.420
if you had that error or performance details


00:14:13.420 --> 00:14:16.020
immediately sent to you with the call stack


00:14:16.020 --> 00:14:18.600
and local variables and active user and all that stuff.


00:14:18.600 --> 00:14:21.160
And with Sentry, it's not just possible, it's easy.


00:14:21.160 --> 00:14:22.980
We use Sentry on all of our web apps,


00:14:22.980 --> 00:14:24.880
Python by setup them, Talk Python Training,


00:14:24.880 --> 00:14:26.200
all those kinds of things.


00:14:26.200 --> 00:14:28.560
And we know if there's some kind of problem.


00:14:28.560 --> 00:14:29.960
It's unfortunate if someone hits a problem,


00:14:29.960 --> 00:14:31.800
but it's better to know and be able to fix it right away.


00:14:31.800 --> 00:14:34.460
In fact, one time somebody ran into a problem


00:14:34.460 --> 00:14:37.240
over at Talk Python Training, getting a course


00:14:37.240 --> 00:14:38.960
and got the message.


00:14:38.960 --> 00:14:41.120
I could see who was logged in when they had the problem


00:14:41.120 --> 00:14:42.400
and I actually fixed the bug


00:14:42.400 --> 00:14:43.760
and was about to push out the changes


00:14:43.760 --> 00:14:44.600
and I got an email,


00:14:44.600 --> 00:14:46.680
"Hey, I'm having a problem with your site."


00:14:46.680 --> 00:14:48.760
I'm like, "Yeah, I know, I just fixed it.


00:14:48.760 --> 00:14:49.600
"Try again, please."


00:14:49.600 --> 00:14:51.480
And they were quite surprised.


00:14:51.480 --> 00:14:53.600
So surprise and delight your users today.


00:14:53.600 --> 00:14:56.600
Create your Sentry account at pythonbytes.fm/sentry.


00:14:56.600 --> 00:14:57.920
And please, when you're signing up,


00:14:57.920 --> 00:14:59.600
click the "Got a promo code?"


00:14:59.600 --> 00:15:01.920
redeem option and enter Python bytes.


00:15:01.920 --> 00:15:03.600
It's not automatic.


00:15:03.600 --> 00:15:06.200
So make sure that you enter Python bytes as the promo code,


00:15:06.200 --> 00:15:07.840
otherwise they won't know it's from us.


00:15:07.840 --> 00:15:08.800
You'll get a bunch of cool stuff.


00:15:08.800 --> 00:15:13.200
two free months of the team plan with many more errors and events and other features as well.


00:15:13.200 --> 00:15:15.700
So check them out at pythonbytes.fm/sentry.


00:15:15.700 --> 00:15:16.700
That's pretty awesome.


00:15:16.700 --> 00:15:19.700
Brian, I guess you should probably also test your code,


00:15:19.700 --> 00:15:22.300
maybe before you end up with errors.


00:15:22.300 --> 00:15:23.300
What do you think?


00:15:23.300 --> 00:15:25.900
Definitely. And actually, before we go on,


00:15:25.900 --> 00:15:30.000
I think I've mentioned this before, but the graphic on that is on the Sentry page is so cool.


00:15:30.000 --> 00:15:35.500
I know, I really like it too. I love the upset console terminal reading of paper.


00:15:35.500 --> 00:15:40.800
>> Yeah. This is like inside baseball maybe.


00:15:40.800 --> 00:15:43.200
But I don't know, maybe three people might care about this.


00:15:43.200 --> 00:15:45.720
But anyway, I'm one of them.


00:15:45.720 --> 00:15:51.120
XFail now works with pytest subtests.


00:15:51.120 --> 00:15:55.300
It's neat, but I got to explain it a little bit.


00:15:55.300 --> 00:16:01.100
Subtests are this weird feature of unit tests that came along in Python 3.4,


00:16:01.100 --> 00:16:03.960
and it's a context manager so that you can


00:16:03.960 --> 00:16:08.520
have possibly several places where your test might fail,


00:16:08.520 --> 00:16:12.280
but continue, it doesn't stop if it fails.


00:16:12.280 --> 00:16:15.380
That was within unit test.


00:16:15.380 --> 00:16:18.480
pytest had, well, pytest had pytest check,


00:16:18.480 --> 00:16:20.480
the plugin that I wrote that


00:16:20.480 --> 00:16:22.640
allows something similar context manager.


00:16:22.640 --> 00:16:25.960
But then pytest subtests came out,


00:16:25.960 --> 00:16:29.880
which was a plugin in about 2019 that started,


00:16:29.880 --> 00:16:36.460
that allowed you to run the unit test subtests from pytest,


00:16:36.460 --> 00:16:40.060
but there's also a pytest style of doing subtests also.


00:16:40.060 --> 00:16:42.180
They're a bit quirky.


00:16:42.180 --> 00:16:47.080
I'm linking to two resources,


00:16:47.080 --> 00:16:50.140
an article by Paul Gansel and


00:16:50.140 --> 00:16:54.880
an episode of Testing Code where he and I talked about subtests.


00:16:54.880 --> 00:16:57.300
Before you jump in and use them right away,


00:16:57.300 --> 00:16:58.880
you should know some of the quirks about them,


00:16:58.880 --> 00:17:00.800
but they're still cool if they work for you.


00:17:00.800 --> 00:17:04.880
But one of the quirks that was around for a long time was that XFail didn't work.


00:17:04.880 --> 00:17:06.360
XFail is a way to say,


00:17:06.360 --> 00:17:08.920
I know my test is going to fail,


00:17:08.920 --> 00:17:13.000
and then you get to decide whether or not you want to


00:17:13.000 --> 00:17:17.880
make market as an XPass or market as a fail if it fails.


00:17:17.880 --> 00:17:23.680
Anyway, XFail didn't work with subtests,


00:17:23.680 --> 00:17:26.760
but it does now as of the start of the month.


00:17:26.760 --> 00:17:30.840
So somebody named maybe siber on GitHub.


00:17:30.840 --> 00:17:31.940
- Maybe. - Maybe.


00:17:31.940 --> 00:17:36.500
Merged a fix or submitted a fix as a pull request


00:17:36.500 --> 00:17:39.660
and it got merged and it's now in version 0.5.0.


00:17:39.660 --> 00:17:42.740
So XFail, if you wanted to use subtests,


00:17:42.740 --> 00:17:43.860
XFail now works with them.


00:17:43.860 --> 00:17:45.980
So that's the good news.


00:17:45.980 --> 00:17:47.320
- Yeah, yeah, this is so interesting.


00:17:47.320 --> 00:17:51.300
So the basic idea is I wanna loop over a bunch of scenarios


00:17:51.300 --> 00:17:52.740
or whatever, maybe test them all


00:17:52.740 --> 00:17:55.180
and then have the test fail if any of them did,


00:17:55.180 --> 00:17:57.580
but actually just go through them all before?


00:17:57.580 --> 00:18:02.060
>> Yeah. On the subtests site,


00:18:02.060 --> 00:18:03.380
there's a little example.


00:18:03.380 --> 00:18:07.500
Let's say you're looping through a range and you want to run all of them,


00:18:07.500 --> 00:18:10.000
not a parameterized, just within the test,


00:18:10.000 --> 00:18:12.560
you're doing several things.


00:18:12.560 --> 00:18:17.140
If something fails, you want to actually report all of the failures.


00:18:17.140 --> 00:18:21.140
This is helpful with loops,


00:18:21.140 --> 00:18:23.580
but why not just use parameterization?


00:18:23.580 --> 00:18:28.860
But the one part where it does really help is if you really are checking


00:18:28.860 --> 00:18:32.020
four or five different things and you really want to know,


00:18:32.020 --> 00:18:34.740
like let's say you're measuring something or


00:18:34.740 --> 00:18:39.060
you're checking several dimensions of something.


00:18:39.060 --> 00:18:44.860
Having all of the failures together would help you determine what the real problem is.


00:18:44.860 --> 00:18:50.300
So when you have to have all the information, this is a good idea.


00:18:50.300 --> 00:18:52.180
>> Very cool. Anastasia, what's


00:18:52.180 --> 00:18:54.180
the testing story in your world?


00:18:54.180 --> 00:18:57.080
Well, we use mostly parameterized testing


00:18:57.080 --> 00:18:59.380
because we don't have the sub-test need.


00:18:59.380 --> 00:19:01.780
We don't need to test it multiple times.


00:19:01.780 --> 00:19:03.480
Maybe in the future.


00:19:03.480 --> 00:19:04.180
Yeah.


00:19:04.180 --> 00:19:05.380
When we use it.


00:19:05.380 --> 00:19:07.480
Parameterized works, so I'd stick with it.


00:19:07.480 --> 00:19:09.580
Yeah, it's definitely good.


00:19:09.580 --> 00:19:10.180
All right.


00:19:10.180 --> 00:19:13.380
Another thing that I think is really neat to talk about,


00:19:13.380 --> 00:19:16.580
but I feel like it's almost down to the


00:19:16.580 --> 00:19:18.780
benchmark type of situation is


00:19:18.780 --> 00:19:21.080
what do you do with the secrets


00:19:21.080 --> 00:19:23.080
in your application. There's


00:19:23.080 --> 00:19:26.420
shgit, s-s-s-h-git,


00:19:26.420 --> 00:19:28.200
which is always terrifying.


00:19:28.200 --> 00:19:30.460
If you go here, you can see, oh, here's


00:19:30.460 --> 00:19:35.560
all the code that we found in this branch of this GitHub repository. For example, here's your


00:19:35.560 --> 00:19:37.560
database connection string


00:19:37.560 --> 00:19:39.560
with username and password right there.


00:19:39.560 --> 00:19:40.600
Right? So,


00:19:40.600 --> 00:19:43.320
you can see all kinds of issues if you go over here.


00:19:43.320 --> 00:19:47.560
Like even a live stream, if it doesn't feel bad enough, you can watch the live stream


00:19:47.560 --> 00:19:50.840
of all the things that are coming in. Like right now, apparently,


00:19:50.840 --> 00:19:55.480
there's some username and password and a URI and some kind of private key and whatnot.


00:19:55.480 --> 00:19:57.400
You don't want that. So what do you do?


00:19:57.400 --> 00:19:59.160
Well, there's all kinds of things you can do.


00:19:59.160 --> 00:20:03.080
Do you encrypt those secrets and put them in source code?


00:20:03.080 --> 00:20:05.320
Well, then where do you store the encryption key?


00:20:05.320 --> 00:20:08.920
There's some kind of certain types of vaults you can install on your server,


00:20:08.920 --> 00:20:13.400
kind of like one password, but for servers, you could do that kind of thing.


00:20:13.400 --> 00:20:17.320
There's just leave it in there and hoping for the best.


00:20:17.320 --> 00:20:21.480
there's put in environment variables, that's a very, very common one.


00:20:21.480 --> 00:20:27.240
Right. But still, no matter what you pick, you kind of got to get that data back and deal with it. So


00:20:27.240 --> 00:20:31.560
I want to introduce you to Pydantic. Brian, you've heard of Pydantic, right?


00:20:31.560 --> 00:20:32.060
Yeah.


00:20:32.060 --> 00:20:33.640
In fact,


00:20:33.640 --> 00:20:36.040
I didn't know this had anything to do with secrets.


00:20:36.040 --> 00:20:41.640
Yeah. If you go to Pydantic right here at the top, I believe there might be


00:20:42.920 --> 00:20:45.180
some nice little comment here. Oh, yeah.


00:20:45.180 --> 00:20:47.880
I thought you were in here, but apparently I'm in here right now.


00:20:47.880 --> 00:20:49.560
I think it toggles between us. Anyway,


00:20:49.560 --> 00:20:52.060
yeah, so we've known, the point is we


00:20:52.060 --> 00:20:54.260
really talked about pedantic a lot.


00:20:54.260 --> 00:20:58.220
It's a really cool way to create these classes that are kind of like data classes.


00:20:58.220 --> 00:21:00.720
Point them at some data source and then they


00:21:00.720 --> 00:21:04.220
validate it and adapt it, right? So if I've got like a JSON document


00:21:04.220 --> 00:21:07.520
and it has a field in it, and that field is a list of something,


00:21:07.520 --> 00:21:08.960
I could say in my model,


00:21:08.960 --> 00:21:11.820
this thing has a list of integers. And if it happens to be,


00:21:11.820 --> 00:21:15.420
quote a string or a number that has quotes on it,


00:21:15.420 --> 00:21:19.820
it'll just automatically do the int parse type of thing to get it fixed.


00:21:19.820 --> 00:21:23.100
Or it'll tell us that it couldn't figure out what to do with the third value,


00:21:23.100 --> 00:21:25.340
something like that. It's really fantastic.


00:21:25.340 --> 00:21:27.980
But what I also didn't know was that it has


00:21:27.980 --> 00:21:30.780
built-in support for working with these user secrets.


00:21:30.780 --> 00:21:33.740
So Dennis Roy pointed this out to me.


00:21:33.740 --> 00:21:34.940
And there's all kinds of things.


00:21:34.940 --> 00:21:37.340
You can have the .env file,


00:21:37.340 --> 00:21:39.980
you can have Docker secrets,


00:21:39.980 --> 00:21:42.740
you can have environment variables


00:21:42.740 --> 00:21:45.140
and all of these things as your secrets.


00:21:45.140 --> 00:21:48.040
And if you just derive from instead of base model,


00:21:48.040 --> 00:21:50.040
you derive from base settings,


00:21:50.040 --> 00:21:52.040
then this will automatically determine


00:21:52.040 --> 00:21:54.740
any of the fields that are not passed to it


00:21:54.740 --> 00:21:57.840
from the environment or from .env files.


00:21:57.840 --> 00:21:58.580
What do you think?


00:21:58.580 --> 00:22:01.840
>> Well, that's cool. Where do the .env files go?


00:22:01.840 --> 00:22:03.340
>> Not in GitHub.


00:22:03.340 --> 00:22:05.340
>> Okay.


00:22:05.340 --> 00:22:07.540
>> You know, you store them somewhere else, right?


00:22:07.540 --> 00:22:14.340
probably what ideally I think you do is you would store like an env template file that has, you know,


00:22:14.340 --> 00:22:17.940
put this value and then the real value here, this value and the real value there, and then you of


00:22:17.940 --> 00:22:22.100
course, ignore, get ignore the other one, the real one, right? So you at least have a structure.


00:22:22.100 --> 00:22:28.020
But so the idea is you come down here and say I've got these settings, and we've got like an API key


00:22:28.020 --> 00:22:35.140
and auth key, we've got a Redis connection, all those kinds of things. And you can even say,


00:22:35.140 --> 00:22:37.140
I'm going to put a prefix on it.


00:22:37.140 --> 00:22:39.140
So in your environment variables


00:22:39.140 --> 00:22:41.900
is fine if you've got one app and one server.


00:22:41.900 --> 00:22:43.900
But if you've got 10 apps running


00:22:43.900 --> 00:22:46.500
or 10 APIs running on your server,


00:22:46.500 --> 00:22:48.500
what does the API key refer to?


00:22:48.500 --> 00:22:50.260
What does the database connection string


00:22:50.260 --> 00:22:52.500
with the database name in it refer to?


00:22:52.500 --> 00:22:53.900
Which one of those 10 apps, right?


00:22:53.900 --> 00:22:56.140
So you can put a prefix so you could have like


00:22:56.140 --> 00:22:59.140
login app API key or


00:22:59.140 --> 00:23:02.340
you know, login app API key.


00:23:02.340 --> 00:23:04.500
And you put that in there and it automatically


00:23:04.500 --> 00:23:07.500
will just let you access it as if it's API key.


00:23:07.500 --> 00:23:10.000
So you can sort of configure an environment a little bit better.


00:23:10.000 --> 00:23:13.660
There's just lots of really neat things that you can do in here to make that work.


00:23:13.660 --> 00:23:16.100
You can say whether it's case sensitive.


00:23:16.100 --> 00:23:17.500
Let's see, let me pull up...


00:23:17.500 --> 00:23:20.260
I had to take notes of other things I thought were super cool.


00:23:20.260 --> 00:23:23.160
So it's a regular Pydantic model,


00:23:23.160 --> 00:23:25.860
which means it'll do all the conversions and the validation.


00:23:25.860 --> 00:23:28.860
So if something is missing that's required from your environment,


00:23:28.860 --> 00:23:31.060
it'll let you know exactly what's missing.


00:23:31.060 --> 00:23:32.660
It'll do those conversions.


00:23:32.660 --> 00:23:34.660
Yeah, all sorts of stuff.


00:23:34.660 --> 00:23:38.160
It has support for raw sequence files as well,


00:23:38.160 --> 00:23:40.160
which is like a slightly different way to do it.


00:23:40.160 --> 00:23:42.660
You can have differently named


00:23:42.660 --> 00:23:45.660
env files like a prod.env versus


00:23:45.660 --> 00:23:48.660
qnad.env or whatever.


00:23:48.660 --> 00:23:50.660
All sorts of settings. So


00:23:50.660 --> 00:23:52.660
I've always thought Pydantic is amazing and I had


00:23:52.660 --> 00:23:54.660
no idea it had this built-in support


00:23:54.660 --> 00:23:56.160
for working with this.


00:23:56.160 --> 00:23:58.660
The other thing that's really cool about this is


00:23:58.660 --> 00:24:01.160
if you go back to the top where it describes it, it says


00:24:01.160 --> 00:24:03.620
it will try to get these values from the environment


00:24:03.620 --> 00:24:05.260
if you don't pass them over.


00:24:05.260 --> 00:24:08.100
So if you're in, say, a testing environment,


00:24:08.100 --> 00:24:10.760
and you want to actually pass values that would control it,


00:24:10.760 --> 00:24:13.060
you could just explicitly pass them along


00:24:13.060 --> 00:24:15.500
instead of having them come from the environment.


00:24:15.500 --> 00:24:16.960
So it's really easy to test,


00:24:16.960 --> 00:24:20.860
set the test values instead of trying to configure a test environment.


00:24:20.860 --> 00:24:21.560
Nice.


00:24:21.560 --> 00:24:23.260
We do use it, by the way,


00:24:23.260 --> 00:24:24.100
by settings.


00:24:24.100 --> 00:24:25.760
But we didn't use prefixes.


00:24:25.760 --> 00:24:26.360
Yes.


00:24:26.360 --> 00:24:26.900
Yeah.


00:24:26.900 --> 00:24:28.400
Which is a good idea.


00:24:28.400 --> 00:24:29.260
A really good idea.


00:24:29.260 --> 00:24:30.960
Yeah, the prefixes are cool if you have a bunch of apps.


00:24:30.960 --> 00:24:33.300
So if you just have one, it doesn't really matter, right?


00:24:33.300 --> 00:24:34.460
Yeah, of course.


00:24:34.460 --> 00:24:36.300
Cool, you like this? It's working well for you?


00:24:36.300 --> 00:24:37.800
Yeah, it's working perfectly well.


00:24:37.800 --> 00:24:40.400
And we are committing on the development version


00:24:40.400 --> 00:24:43.800
with some dummy keys just to have them around, of course.


00:24:43.800 --> 00:24:46.000
Of course. Oh, wow. How neat. Okay.


00:24:46.000 --> 00:24:48.340
Well, cool. Well, that's neat that you're using it.


00:24:48.340 --> 00:24:50.840
Brian, you got the next one? Is that right?


00:24:50.840 --> 00:24:54.240
- You've already done it. - No, but I just wanted to mention the...


00:24:54.240 --> 00:24:55.740
Oh, wait.


00:24:55.740 --> 00:24:58.600
Never mind. I hit the wrong thing.


00:24:58.600 --> 00:25:00.740
Oh, here we go.


00:25:00.740 --> 00:25:03.940
The quote I think you were looking for was from FastAPI.


00:25:03.940 --> 00:25:06.580
Oh, yes, yes, of course, of course.


00:25:06.580 --> 00:25:09.580
Yeah, it is. I'm over the moon.


00:25:09.580 --> 00:25:12.140
Yeah, super excited about it. Yeah, FastAPI. Thanks.


00:25:12.140 --> 00:25:14.140
Yeah, we use it.


00:25:14.140 --> 00:25:16.420
I love FastAPI as well. And to me, like,


00:25:16.420 --> 00:25:20.340
Pydantic and FastAPI, they go together because I learned about them at the same time.


00:25:20.340 --> 00:25:23.420
I know there are different people and different projects, but, you know.


00:25:23.420 --> 00:25:24.860
It works like magic.


00:25:24.860 --> 00:25:26.860
Yeah, yeah, absolutely.


00:25:26.860 --> 00:25:29.700
And if it's not magic, maybe you should document it.


00:25:29.700 --> 00:25:31.700
Or maybe it is magic, you should document it.


00:25:31.700 --> 00:25:33.700
Definitely.


00:25:33.700 --> 00:25:35.700
Definitely.


00:25:35.700 --> 00:25:37.700
Actually, I'm the one who is usually bringing this


00:25:37.700 --> 00:25:39.700
topic to the team.


00:25:39.700 --> 00:25:41.700
How to write documentation.


00:25:41.700 --> 00:25:43.700
And first, the question is why to write documentation?


00:25:43.700 --> 00:25:45.700
Everyone knows that we need


00:25:45.700 --> 00:25:47.700
documentation, but


00:25:47.700 --> 00:25:49.700
it's hard, it's time consuming, it's


00:25:49.700 --> 00:25:51.700
annoying, and


00:25:51.700 --> 00:25:53.700
how it usually happens, someone


00:25:53.700 --> 00:25:55.700
leaves the team, and then the last


00:25:55.700 --> 00:25:57.700
days are about


00:25:57.700 --> 00:26:03.460
handing over everything. Oh my gosh, I remember I've had this experience twice at least.


00:26:03.460 --> 00:26:10.660
Writing? Where you said you're going to, you've given me your two weeks, so your next two weeks,


00:26:10.660 --> 00:26:14.420
your two weeks notice that you're going to leave, your next two weeks will be to start writing


00:26:14.420 --> 00:26:19.540
documentation for everything you've ever worked on and anything that people might need to do. So


00:26:19.540 --> 00:26:22.580
your next two weeks are to begin writing documentation that you should have been


00:26:22.580 --> 00:26:27.300
doing the whole time. In Germany, you will have a notice period of three months, so like it's


00:26:27.300 --> 00:26:28.980
- Oh, that's a lot of documentation writing.


00:26:28.980 --> 00:26:29.820
- Yeah.


00:26:29.820 --> 00:26:31.420
(both laughing)


00:26:31.420 --> 00:26:34.980
Just kidding, but normally, even if you leave the team,


00:26:34.980 --> 00:26:38.140
like you, for example, move from one team to another,


00:26:38.140 --> 00:26:40.760
it doesn't mean that you have to leave the company.


00:26:40.760 --> 00:26:43.700
Still, you have to hand over everything that you worked for,


00:26:43.700 --> 00:26:47.540
let's say, in a year or even half of the year.


00:26:47.540 --> 00:26:50.500
And for example, in my experience,


00:26:50.500 --> 00:26:51.700
when I started with Python,


00:26:51.700 --> 00:26:53.820
I didn't know any Python, I had to learn it.


00:26:53.820 --> 00:26:56.720
And of course, I didn't know about Sphinx or Read-a-Dox


00:26:56.720 --> 00:26:58.840
or any kind of documentation for Python.


00:26:58.840 --> 00:27:00.000
And what did I do?


00:27:00.000 --> 00:27:01.440
Nothing, I didn't write it.


00:27:01.440 --> 00:27:05.720
And half a year later, I was wondering who wrote this code.


00:27:05.720 --> 00:27:07.640
So I did git blame, and of course it was me.


00:27:07.640 --> 00:27:09.960
And I was like, what a stupid person.


00:27:09.960 --> 00:27:11.480
(laughing)


00:27:11.480 --> 00:27:12.400
So yeah.


00:27:12.400 --> 00:27:16.000
And I suggest to start writing documentation now,


00:27:16.000 --> 00:27:18.580
even if you're not leaving the team.


00:27:18.580 --> 00:27:22.200
The reason why I'm bringing up the Sphinx and Read the Docs


00:27:22.200 --> 00:27:26.800
is that it will allow to have continuous documentation.


00:27:26.800 --> 00:27:31.800
And with Sphinx, you can easily write just some doc strings


00:27:31.800 --> 00:27:34.640
which will explain what the function does,


00:27:34.640 --> 00:27:36.760
what the class is doing,


00:27:36.760 --> 00:27:39.960
add some input output parameters,


00:27:39.960 --> 00:27:42.760
and then you will automatically generate it.


00:27:42.760 --> 00:27:46.800
So there's no need to write it somewhere on Confluence


00:27:46.800 --> 00:27:48.840
or any other source,


00:27:48.840 --> 00:27:51.240
because if there are too many sources,


00:27:51.240 --> 00:27:52.880
that's where the documentation will die


00:27:52.880 --> 00:27:54.720
because no one will go and check it.


00:27:54.720 --> 00:27:57.440
And during the handover, usually it happens like that.


00:27:57.440 --> 00:27:59.080
You write documentation somewhere


00:27:59.080 --> 00:28:01.880
where nobody knows where and nobody reads it.


00:28:01.880 --> 00:28:03.800
- Yeah, you pointed out that you've got it in Jira


00:28:03.800 --> 00:28:05.120
and you've got it in GitHub


00:28:05.120 --> 00:28:07.240
and you've got it in all the different places.


00:28:07.240 --> 00:28:08.400
- Google Docs, yes.


00:28:08.400 --> 00:28:09.240
- Yeah, yeah.


00:28:09.240 --> 00:28:11.440
- Especially Google Docs. - Oh yes.


00:28:11.440 --> 00:28:12.600
(laughing)


00:28:12.600 --> 00:28:15.080
- And then you share like 10 Google Docs


00:28:15.080 --> 00:28:18.560
with different people and then they lose the links


00:28:18.560 --> 00:28:20.480
and people are leaving.


00:28:20.480 --> 00:28:23.040
It's nice when people are leaving the team,


00:28:23.040 --> 00:28:25.360
but it's not nice to the people who are leaving the team


00:28:25.360 --> 00:28:27.360
to another team because they are getting


00:28:27.360 --> 00:28:29.360
all the questions for a year.


00:28:29.360 --> 00:28:30.840
(laughing)


00:28:30.840 --> 00:28:31.680
Where to find this?


00:28:31.680 --> 00:28:33.520
How can I get this function?


00:28:33.520 --> 00:28:35.440
How to get this data?


00:28:35.440 --> 00:28:37.600
- Yeah, yeah, very good advice.


00:28:37.600 --> 00:28:39.840
You know, for a long time,


00:28:39.840 --> 00:28:42.680
Sphinx was like synonymous with restructured text,


00:28:42.680 --> 00:28:45.160
but now we've also got the markdown


00:28:45.160 --> 00:28:46.960
with the mist parser there.


00:28:46.960 --> 00:28:48.920
So that's very cool as well.


00:28:48.920 --> 00:28:51.360
I'm a fan of Markdown instead, yeah.


00:28:51.360 --> 00:28:54.200
- And also it supports the Sphinx itself.


00:28:54.200 --> 00:28:57.240
It supports different types of documentation.


00:28:57.240 --> 00:28:59.720
For example, you can write code reference,


00:28:59.720 --> 00:29:01.600
then you can go through all the code,


00:29:01.600 --> 00:29:05.120
and then you can also write extra documentation,


00:29:05.120 --> 00:29:05.960
like Markdown.


00:29:05.960 --> 00:29:08.800
Even Readme can be included into documentation.


00:29:08.800 --> 00:29:10.440
And you can also style it.


00:29:10.440 --> 00:29:11.280
- Oh, nice.


00:29:11.280 --> 00:29:12.620
Yeah, yeah, very cool.


00:29:12.620 --> 00:29:14.520
- Yeah, there's lots of great themes to it too now.


00:29:14.520 --> 00:29:16.280
It really looks attractive.


00:29:16.280 --> 00:29:17.880
- Yeah, you did recently cover that, right, Brian,


00:29:17.880 --> 00:29:19.720
the Sphinx themes.


00:29:19.720 --> 00:29:23.360
- Yeah, and actually when the Markdown,


00:29:23.360 --> 00:29:25.980
the support came on, that's when I went back


00:29:25.980 --> 00:29:27.000
and started looking at Sphinx.


00:29:27.000 --> 00:29:31.240
So some of our documentation is done in Sphinx now


00:29:31.240 --> 00:29:33.440
because it does Markdown.


00:29:33.440 --> 00:29:36.920
And you can even make it do, it's not built in,


00:29:36.920 --> 00:29:39.840
but you can make it read doc strings


00:29:39.840 --> 00:29:41.960
and interpret doc strings as Markdown.


00:29:41.960 --> 00:29:44.540
- Yeah, very cool, very cool.


00:29:44.540 --> 00:29:47.240
Robert on the live stream has an interesting addition


00:29:47.240 --> 00:29:50.440
to continuous integration and continuous delivery.


00:29:50.440 --> 00:29:51.680
So can we deploy yet?


00:29:51.680 --> 00:29:53.640
Only if the documentation is complete.


00:29:53.640 --> 00:29:54.480
- Definitely.


00:29:54.480 --> 00:29:56.940
- Very cool.


00:29:56.940 --> 00:29:59.760
All right, well, that's it for our main topics.


00:29:59.760 --> 00:30:00.960
Brian, you got anything you want to share?


00:30:00.960 --> 00:30:02.920
Any extra stuff you want to throw out there?


00:30:02.920 --> 00:30:06.640
- Mostly I'm curious about pytest uses.


00:30:06.640 --> 00:30:08.560
So I'll drop a link in the show notes,


00:30:08.560 --> 00:30:13.320
but basically I've got a pinned tweet on my Twitter.


00:30:13.320 --> 00:30:16.120
And I'd like to have people tell me where they see


00:30:16.120 --> 00:30:20.200
where they're using pytest.


00:30:20.200 --> 00:30:24.600
So I've got some examples and then I kind of went,


00:30:24.600 --> 00:30:27.520
my first question was people, projects that have switched.


00:30:27.520 --> 00:30:32.600
But I was looking at just the guts of how Python works.


00:30:32.600 --> 00:30:35.680
And there's some amazing projects that use pytest,


00:30:35.680 --> 00:30:39.160
like wheel, tip, setup tools, warehouse,


00:30:39.160 --> 00:30:40.720
those all use pytest, that's pretty cool.


00:30:40.720 --> 00:30:41.920
>> Wow, how interesting.


00:30:41.920 --> 00:30:44.920
Yeah. And those are sort of almost inside of Python,


00:30:44.920 --> 00:30:47.520
which is interesting because they're not using unit tests, right?


00:30:47.520 --> 00:30:49.520
>> Yeah. So then I just learned about recently,


00:30:49.520 --> 00:30:52.160
even if it's proprietary, that'd be interesting.


00:30:52.160 --> 00:30:54.080
I just learned that Stripe and Lyft went through


00:30:54.080 --> 00:30:57.360
a pytest conversion recently, so that's going to be neat.


00:30:57.360 --> 00:30:58.880
>> That's cool. Yeah, very cool.


00:30:58.880 --> 00:31:00.520
Anastasia, anything else you want to throw


00:31:00.520 --> 00:31:03.000
out there or let people know about while we're here?


00:31:03.000 --> 00:31:06.440
>> Yeah, maybe using exceptions.


00:31:06.440 --> 00:31:08.360
Don't use base exception.


00:31:08.360 --> 00:31:12.000
>> Yeah, create custom ones that are for your app or have certain.


00:31:12.000 --> 00:31:14.480
Absolutely, I definitely second that idea.


00:31:14.480 --> 00:31:22.000
All right, this, Brian, this was in danger of almost being an extra, extra, extra, extra, extra hero about it. So I'll just go quick.


00:31:22.000 --> 00:31:25.680
So Matthew Fikert's getting a couple of shout outs


00:31:25.680 --> 00:31:28.160
on this show. So he also pointed out


00:31:28.160 --> 00:31:30.560
that whoa, super cool pipx,


00:31:30.560 --> 00:31:35.360
which we've talked about on the show before, it lets you install Python tools kind of like homebrew or apt.


00:31:35.360 --> 00:31:42.720
They're not part of a project, but you want to have them managed and installed in their own isolated environment. So you pipx instead of pip install a thing, which is great.


00:31:42.720 --> 00:31:46.640
That is now officially part of PyPA, the Python Packaging Authority.


00:31:46.640 --> 00:31:48.320
So yeah, pretty cool.


00:31:48.320 --> 00:31:51.840
So pipx is now officially part of Python.


00:31:51.840 --> 00:31:54.640
Not Python, the distribution, but the group, you know.


00:31:54.640 --> 00:31:57.760
Next, I will be presenting-ish.


00:31:57.760 --> 00:32:00.880
It's recorded, but then there's like a live Q&A afterwards.


00:32:00.880 --> 00:32:04.880
Manning is having a conference on developer productivity.


00:32:04.880 --> 00:32:08.480
I don't honestly remember what my talk is going to be about.


00:32:08.480 --> 00:32:09.440
Oh, yes, here it is.


00:32:09.440 --> 00:32:13.120
It's 10 tips and tools you can adopt in 15 minutes or less


00:32:13.120 --> 00:32:14.920
to level up your developer productivity.


00:32:14.920 --> 00:32:16.120
So I'm going to be speaking on that.


00:32:16.120 --> 00:32:18.320
All sorts of fun things.


00:32:18.320 --> 00:32:20.320
So if you want to check that out, it's free to register for.


00:32:20.320 --> 00:32:22.120
It's later this month, I guess.


00:32:22.120 --> 00:32:24.440
Here's just a thought I would throw out there for you.


00:32:24.440 --> 00:32:28.120
I don't expect an answer, but yikes, cloud bills can pile up.


00:32:28.120 --> 00:32:32.760
Alex Chan, who is teaching, I guess.


00:32:32.760 --> 00:32:35.160
I could figure out exactly the context of this,


00:32:35.160 --> 00:32:37.520
but put out a tweet that said,


00:32:37.520 --> 00:32:43.760
I have a panicked student in my DMs who accidentally racked up an $8,000 AWS bill.


00:32:43.760 --> 00:32:48.000
My suggestion of talk to support is no good. Apparently, they won't issue a billing adjustment.


00:32:48.000 --> 00:32:49.920
Anyone got ideas out there?


00:32:49.920 --> 00:32:56.080
Could you imagine as a student? I mean, as a professional, it's still a lot of money,


00:32:56.080 --> 00:32:59.280
but as a student, $8,000 is like a ton of money.


00:32:59.280 --> 00:33:03.200
Yeah, it's like a term of bills. It depends on...


00:33:03.200 --> 00:33:06.400
Yes, exactly. Yeah, like a semester of studies or something.


00:33:06.400 --> 00:33:10.840
So maybe other students and basically all people out there,


00:33:10.840 --> 00:33:15.140
put up billing alerts on whatever cloud thing you're doing,


00:33:15.140 --> 00:33:18.880
on whatever places I have, including AWS.


00:33:18.880 --> 00:33:21.720
I get periodically, I get an announcement like,


00:33:21.720 --> 00:33:23.280
"Your bill is now at $50,


00:33:23.280 --> 00:33:24.400
your bill is at $100,


00:33:24.400 --> 00:33:25.720
your bill is now at $500,


00:33:25.720 --> 00:33:27.200
your bill is now at $1,000."


00:33:27.200 --> 00:33:29.520
If it goes beyond that, I'm going to have to start paying


00:33:29.520 --> 00:33:32.400
a lot of attention to what's going on with my AWS account.


00:33:32.400 --> 00:33:34.500
So just put these alerts on there.


00:33:34.500 --> 00:33:37.340
It's usually easy with whatever platform you're on.


00:33:37.340 --> 00:33:40.140
Anyway, don't be that poor student.


00:33:40.140 --> 00:33:41.300
All right, what's next?


00:33:41.300 --> 00:33:43.980
Brian Skin shot it out.


00:33:43.980 --> 00:33:46.140
Hey, this might not be a total new item,


00:33:46.140 --> 00:33:47.980
but maybe we can mention it, maybe it's interesting.


00:33:47.980 --> 00:33:50.700
Developed a, mentioned a Flake,


00:33:50.700 --> 00:33:52.060
he didn't develop it, I don't believe,


00:33:52.060 --> 00:33:54.820
a Flake 8 plugin for FastAPI.


00:33:54.820 --> 00:33:57.180
So if you're doing FastAPI,


00:33:57.180 --> 00:33:59.820
there's different ways to do things like routes and whatnot.


00:33:59.820 --> 00:34:02.020
And there's like the natural way,


00:34:02.020 --> 00:34:03.300
and there's sort of a clumsy way.


00:34:03.300 --> 00:34:06.880
And so here's a flake eight thing to make sure you're doing FastAPI.


00:34:06.880 --> 00:34:07.520
Nice.


00:34:07.520 --> 00:34:08.340
Interesting.


00:34:08.340 --> 00:34:08.920
Yep.


00:34:08.920 --> 00:34:10.920
And I think, yeah, yeah.


00:34:10.920 --> 00:34:12.320
And I think this is my last one.


00:34:12.320 --> 00:34:13.560
It is my last one here.


00:34:13.560 --> 00:34:19.240
So Sal Shannon Brooke tweeted JupyterLab 3 will have localization.


00:34:19.240 --> 00:34:24.640
So localization means like the menus and the help text and the button hover


00:34:24.640 --> 00:34:27.960
tips and all that kind of stuff are localized for different languages.


00:34:27.960 --> 00:34:33.040
So JupyterLab 3 will have localization making it more approachable for


00:34:33.040 --> 00:34:37.680
people who don't want to work in an English UI and they're crowdsourcing


00:34:37.680 --> 00:34:38.720
translations.


00:34:38.720 --> 00:34:43.360
So if you wanted to contribute to Jupiter and you were good at programming


00:34:43.360 --> 00:34:46.960
and in a language that's not English, that's already done in English, you know,


00:34:46.960 --> 00:34:47.600
go check that out.


00:34:47.600 --> 00:34:48.320
That would be kind of cool.


00:34:48.320 --> 00:34:52.560
What if anybody just messes with people and like does wrong translations just for


00:34:52.560 --> 00:34:52.840
fun?


00:34:52.840 --> 00:34:54.200
I'm so afraid of that.


00:34:54.200 --> 00:34:56.040
Yeah, I think they do.


00:34:56.040 --> 00:34:57.480
I bet they do.


00:34:57.480 --> 00:34:58.240
I bet they do.


00:34:58.240 --> 00:35:00.800
And maybe not really obvious, maybe in real subtle ways.


00:35:00.800 --> 00:35:01.440
Yeah.


00:35:01.440 --> 00:35:01.920
Yeah.


00:35:01.920 --> 00:35:02.480
Yeah.


00:35:02.800 --> 00:35:04.800
Never mind. Don't have any ideas.


00:35:04.800 --> 00:35:06.800
Brian, don't give people ideas. This is not...


00:35:06.800 --> 00:35:08.800
That's a good one.


00:35:08.800 --> 00:35:10.800
[laughter]


00:35:10.800 --> 00:35:12.800
Alright, well that's all the extras as well. So


00:35:12.800 --> 00:35:14.800
how about a joke? Yeah.


00:35:14.800 --> 00:35:16.800
Okay. So, imagine you're


00:35:16.800 --> 00:35:18.800
learning programming, you're learning Python.


00:35:18.800 --> 00:35:20.800
Take one of these


00:35:20.800 --> 00:35:22.800
computer science courses where they talk about


00:35:22.800 --> 00:35:24.800
weird things like recursion.


00:35:24.800 --> 00:35:26.800
So, recursion is the idea that


00:35:26.800 --> 00:35:28.800
the function calls itself with different


00:35:28.800 --> 00:35:30.800
parameters, right? Like a really common


00:35:30.800 --> 00:35:34.880
example would be factorial. So if I'm going to calculate a factorial, it's just


00:35:34.880 --> 00:35:39.640
n times n minus 1 times n minus 2. So that's just n times factorial of the


00:35:39.640 --> 00:35:43.400
smaller number. You just like work your way back, right? But there should be an


00:35:43.400 --> 00:35:49.520
exit condition, like if n equals 1, return. Don't keep recursing. So here's a


00:35:49.520 --> 00:35:53.720
nice little graphic under the banner of "Only programmers would understand."


00:35:53.720 --> 00:35:56.840
And it's got the four squares. It's kind of like screen sharing. We got that


00:35:56.840 --> 00:36:01.880
infinite view. So it's learning a program in one corner. Next corner, make recursive function.


00:36:01.880 --> 00:36:06.120
Third corner, no exit condition. And then it just repeats and repeats and repeats down to smaller


00:36:06.120 --> 00:36:13.000
and smaller and smaller. I love it. This is bad. No, this is good. That's how you learn.


00:36:13.000 --> 00:36:20.440
That's right. No. Yeah, exactly. It's like when you share your screen in Zoom or maybe Google


00:36:20.440 --> 00:36:24.200
Meet, but you still got the window up or something like that. But it's about recursion. It's beautiful.


00:36:24.200 --> 00:36:27.800
And then you silence base exceptions and you cannot exit the program.


00:36:27.800 --> 00:36:29.800
Yes, that's right.


00:36:29.800 --> 00:36:34.800
Do you know if Python has a tail recursion optimization?


00:36:34.800 --> 00:36:37.560
I'm thinking no.


00:36:37.560 --> 00:36:41.960
So the whole point is here, Brian, that we would run out of a call stack space really quickly.


00:36:41.960 --> 00:36:43.960
And that's usually the error stack overflow,


00:36:43.960 --> 00:36:45.960
error if you recurse too deep type of thing.


00:36:45.960 --> 00:36:49.400
But with trail recursion, it basically becomes an infinite loop.


00:36:49.400 --> 00:36:51.400
So you run out of time instead of memory.


00:36:51.400 --> 00:36:52.400
Okay.


00:36:52.400 --> 00:36:56.880
So that would be the advantage of tail recursion. I have no idea if it is or not.


00:36:56.880 --> 00:37:02.640
Yeah, I mean, there's some languages that do the optimization so they don't generate a new call stack


00:37:02.640 --> 00:37:04.640
because there's nothing to save.


00:37:04.640 --> 00:37:09.120
Yeah. I don't know. I'm sure we will find out before next week.


00:37:09.120 --> 00:37:14.560
Yeah. One of the reasons why I like asking open-end questions on the podcast.


00:37:14.560 --> 00:37:16.320
Yeah, that's awesome. Yep.


00:37:16.320 --> 00:37:20.720
Well, Brian, thank you as always. And Anastasia, thank you for being here. It was great to have you as a guest.


00:37:20.720 --> 00:37:23.280
Thank you for inviting me.

