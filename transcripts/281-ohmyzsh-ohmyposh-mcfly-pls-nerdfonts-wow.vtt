WEBVTT

00:00:00.001 --> 00:00:05.060
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.060 --> 00:00:10.140
This is episode 281, recorded April 27th, 2022.

00:00:10.140 --> 00:00:11.380
I'm Brian Okken.

00:00:11.380 --> 00:00:12.480
I'm Michael Kennedy.

00:00:12.480 --> 00:00:13.780
And I'm Anna Story.

00:00:13.780 --> 00:00:15.080
Welcome, Anna.

00:00:15.080 --> 00:00:16.240
Thank you.

00:00:16.240 --> 00:00:18.440
Before we jump in, tell us a little bit about yourself.

00:00:18.440 --> 00:00:19.360
Yeah, definitely.

00:00:19.360 --> 00:00:22.100
So I'm a data engineer, or at least at the moment.

00:00:22.100 --> 00:00:25.360
I'm a byte trainee.

00:00:25.360 --> 00:00:26.900
I'm a linguist.

00:00:27.200 --> 00:00:31.180
So I'm debating both theoretical linguistics and computational linguistics.

00:00:31.180 --> 00:00:37.900
So I'm really about how the information is encoded in our brains and how we share this information.

00:00:37.900 --> 00:00:39.720
And that's why I work in the tech.

00:00:39.720 --> 00:00:41.100
Nice.

00:00:41.100 --> 00:00:50.200
Since I got my master's in computational linguistics, I worked at Amazon, at thelex.ai.org for a while.

00:00:50.200 --> 00:00:52.680
The first worked as a language engineer, actually.

00:00:52.820 --> 00:01:03.060
So I was more on the side of linguistic side of things and dealing with extracting the semantic and the meaning really out of the data for Electrophone.

00:01:03.060 --> 00:01:11.720
And then gradually I switched over to just data processing and been in the role of data engineer for about three, four years now.

00:01:11.720 --> 00:01:16.260
And I'm currently with Decafone, which is the worldwide sports retailer.

00:01:16.260 --> 00:01:18.720
So I'm still working with lots and lots of data there.

00:01:19.520 --> 00:01:20.040
Okay.

00:01:20.040 --> 00:01:20.580
Wow.

00:01:20.580 --> 00:01:21.040
Interesting.

00:01:21.040 --> 00:01:21.880
That is fascinating.

00:01:21.880 --> 00:01:22.980
Yeah, it's been right.

00:01:22.980 --> 00:01:31.540
Yeah, it's really neat how we can speak to our devices these days and they kind of actually work, do amazing things, right?

00:01:31.540 --> 00:01:38.600
Like I know when Alexa first came out and Siri especially, it was like, I don't really want to, that thing is so not getting it.

00:01:38.620 --> 00:01:40.760
And now I talk to my devices all the time.

00:01:40.760 --> 00:01:41.400
It's amazing.

00:01:41.400 --> 00:01:42.760
Yeah.

00:01:42.760 --> 00:01:48.660
There are some things that are really sophisticated that they haven't been doing now.

00:01:48.660 --> 00:01:51.840
Sometimes I can't even believe where we're actually getting there.

00:01:51.840 --> 00:01:53.300
So it's pretty exciting.

00:01:53.300 --> 00:01:53.760
Yeah.

00:01:53.860 --> 00:01:58.440
And sometimes I admit that, you know, in several things that they're like, really, you can't do it.

00:01:58.440 --> 00:01:59.660
Yeah.

00:01:59.660 --> 00:02:10.220
But I realized that having worked on that, actually, I realized that sometimes it's just kind of thing that, you know, like from a professional standpoint, it might seem like kind of trivial to me.

00:02:10.280 --> 00:02:14.200
But I realized that, you know, there's so much work with things.

00:02:14.200 --> 00:02:16.900
And then they say, I love the actual device.

00:02:16.900 --> 00:02:22.360
But sometimes just like you, you, you don't get, you know, go over the little like corners.

00:02:22.360 --> 00:02:23.020
Right.

00:02:23.020 --> 00:02:31.460
So one of the things that I got to work at some point was actually helping Alexa kind of know when she needs to stop.

00:02:31.460 --> 00:02:37.760
When she needs to stop talking about things and telling you about things like whatever she thought on Wikipedia or whatnot.

00:02:37.760 --> 00:02:40.080
So, yeah, it's funny.

00:02:41.020 --> 00:02:41.420
Fantastic.

00:02:41.420 --> 00:02:46.420
So, well, for our first item, Michael, do you want to kick it off?

00:02:46.420 --> 00:02:48.300
I will definitely kick it off.

00:02:48.300 --> 00:02:49.920
Let's take it to the next level with this one.

00:02:49.920 --> 00:02:56.440
So this is an article by Eluda called Take Your GitHub Repository to the Next Level.

00:02:56.440 --> 00:03:00.180
And there's kind of 13 levels, but, you know, I guess it's a spectrum.

00:03:00.180 --> 00:03:02.620
You decide which level you want to take it to.

00:03:02.620 --> 00:03:08.060
So here are basically 13 ideas on how your GitHub repository can be better.

00:03:08.240 --> 00:03:11.400
So there was a topic I was going to cover after I explored more.

00:03:11.400 --> 00:03:12.980
I decided, eh, not so much.

00:03:12.980 --> 00:03:17.840
But as part of it, there was a conversation about some WebAssembly stuff in Python.

00:03:17.840 --> 00:03:18.740
And I checked it out.

00:03:18.740 --> 00:03:19.180
It's really cool.

00:03:19.180 --> 00:03:20.400
They're like, we're going to use this library.

00:03:20.400 --> 00:03:22.400
This is the fundamental thing that makes it work.

00:03:22.400 --> 00:03:23.800
And I go to the GitHub repo for that.

00:03:23.800 --> 00:03:24.940
And it says, here's how you build it.

00:03:24.940 --> 00:03:26.120
And that's it.

00:03:26.120 --> 00:03:26.600
I'm like, wait.

00:03:26.920 --> 00:03:27.380
OK, great.

00:03:27.380 --> 00:03:28.480
But why do I want it?

00:03:28.480 --> 00:03:29.900
What can I do with it?

00:03:29.900 --> 00:03:30.580
How do I use it?

00:03:30.580 --> 00:03:31.860
I don't care about how do I build it.

00:03:31.860 --> 00:03:33.100
Like, that's the last.

00:03:33.100 --> 00:03:34.640
I'll just download the WASM file.

00:03:34.640 --> 00:03:36.860
But what do I do with it once I get it?

00:03:36.860 --> 00:03:37.000
Right.

00:03:37.000 --> 00:03:38.120
It was just none of that.

00:03:38.120 --> 00:03:42.680
And so that's kind of, you know, this article helps you think through those ideas.

00:03:43.080 --> 00:03:43.320
Nice.

00:03:43.320 --> 00:03:49.320
So number one, and you know it's Python friendly because it starts with zero, step zero, rather

00:03:49.320 --> 00:03:52.540
than one, make your project more discoverable.

00:03:52.540 --> 00:03:58.320
Now, every one of these comes with a recommendation, a bit of a description, and then examples, which

00:03:58.320 --> 00:03:58.680
is cool.

00:03:58.680 --> 00:03:59.280
Nice.

00:03:59.280 --> 00:04:03.940
So for example, this one says, what you can do is to help people find your project.

00:04:03.940 --> 00:04:10.060
If the name of your project does not carefully describe what it is, you can put tags, basically.

00:04:11.000 --> 00:04:16.240
So like refactoring or science or things like that might be something you put on there that's

00:04:16.240 --> 00:04:17.980
not immediately obvious from it, right?

00:04:17.980 --> 00:04:21.600
So you can tag subject areas and whatnot, and they have some examples.

00:04:21.600 --> 00:04:27.040
So for example, there's this thing called Well app, which is like a mindfulness app for the

00:04:27.040 --> 00:04:27.280
Mac.

00:04:27.280 --> 00:04:28.680
Of course, it's for the Mac, isn't it?

00:04:28.680 --> 00:04:36.780
So it has tags such as macOS, productivity, happiness, mental health, but also Flutter and

00:04:36.780 --> 00:04:39.260
web app if people wanted to check out a Flutter web app, right?

00:04:39.260 --> 00:04:41.780
Okay, so that's, you know, there's other examples as well.

00:04:41.780 --> 00:04:43.540
That's step zero.

00:04:43.540 --> 00:04:45.440
Step one is choose a name that sticks.

00:04:45.440 --> 00:04:52.660
Something that's available on PyPI, something that people can Google, something that people

00:04:52.660 --> 00:04:53.480
want to say.

00:04:53.480 --> 00:04:57.400
It doesn't sound silly or unprofessional if they were to use it.

00:04:57.400 --> 00:05:01.320
You wouldn't call your web app Fancy Pants Server, right?

00:05:01.320 --> 00:05:03.940
You wouldn't say, well, our Fancy Pants Server is really scaling today.

00:05:04.100 --> 00:05:06.420
Like, you wouldn't want to speak that way necessarily.

00:05:06.420 --> 00:05:07.540
So don't name it that way, right?

00:05:07.540 --> 00:05:08.280
Yeah.

00:05:08.280 --> 00:05:10.100
So choose a name that sticks.

00:05:10.100 --> 00:05:11.760
And that we can say on air.

00:05:11.760 --> 00:05:13.200
Yes, exactly.

00:05:13.200 --> 00:05:19.380
And is, you know, somewhat predictable in the pronunciation maybe because that's also a

00:05:19.380 --> 00:05:19.680
challenge.

00:05:19.680 --> 00:05:21.300
But so there's some examples of like...

00:05:21.300 --> 00:05:21.420
Yeah.

00:05:21.420 --> 00:05:22.440
Yeah, yeah.

00:05:22.440 --> 00:05:23.540
Anna, what do you think?

00:05:23.540 --> 00:05:24.620
Yeah, absolutely.

00:05:25.320 --> 00:05:30.680
Just thinking about the name, something that I ran into today, particularly with Python,

00:05:30.680 --> 00:05:36.260
some of the services or applications and libraries as well that help them.

00:05:36.260 --> 00:05:41.940
And in PY, and sometimes you don't know if it's PY or P in that case.

00:05:41.940 --> 00:05:43.860
It's like, you know, confusing.

00:05:43.860 --> 00:05:46.640
And then you're talking to somebody else who's looking about the same thing.

00:05:46.640 --> 00:05:48.360
They're like constantly confused.

00:05:48.360 --> 00:05:49.580
So, yeah.

00:05:49.580 --> 00:05:50.260
Yeah.

00:05:50.400 --> 00:05:51.320
I agree.

00:05:51.320 --> 00:05:52.060
It matters a lot.

00:05:52.060 --> 00:05:52.860
Let's see.

00:05:52.860 --> 00:05:57.180
So some of the things are conduct a thorough internet search for the name, avoid hard to

00:05:57.180 --> 00:06:00.800
spell names, get the dev or .io domain if you really, really care about it.

00:06:00.800 --> 00:06:04.980
You know, is it some random small little package or are you trying to create the next FastAPI?

00:06:04.980 --> 00:06:05.500
Right.

00:06:05.500 --> 00:06:08.320
A name that conveys some meaning.

00:06:08.320 --> 00:06:10.060
I was thinking about Jupyter, for example.

00:06:10.060 --> 00:06:13.800
Like, Jupyter is pretty interesting because it's kind of hard to spell.

00:06:13.800 --> 00:06:16.220
But once you know it, you just know it.

00:06:16.220 --> 00:06:19.240
And it very clearly works well in a search.

00:06:19.340 --> 00:06:23.600
There's probably no domain name that's like a misspelled planet type of thing.

00:06:23.600 --> 00:06:27.020
You know, I mean, it was probably a really good choice, even though it kind of breaks the

00:06:27.020 --> 00:06:29.000
maybe hard to spell at first.

00:06:29.000 --> 00:06:29.580
Yeah.

00:06:29.580 --> 00:06:30.840
But it's easier to search.

00:06:30.840 --> 00:06:31.380
Right.

00:06:31.380 --> 00:06:31.680
So.

00:06:31.680 --> 00:06:32.060
Yeah.

00:06:32.060 --> 00:06:32.280
Yeah.

00:06:32.280 --> 00:06:35.840
So the example they get for this one is size limit is the name.

00:06:35.840 --> 00:06:36.520
And what does it do?

00:06:36.520 --> 00:06:39.200
It calculates the real cost to run your JavaScript app or lib.

00:06:39.200 --> 00:06:40.260
Keep good performance.

00:06:40.260 --> 00:06:44.580
It'll show an error in a PR if the cost, basically file size, exceeds the limit.

00:06:44.580 --> 00:06:45.100
That's cool.

00:06:45.100 --> 00:06:47.180
The next one, I'm all about this.

00:06:47.180 --> 00:06:49.280
Display a beautiful cover image.

00:06:49.720 --> 00:06:54.580
So if you go to a repo and it's just the text, that's not amazing.

00:06:54.580 --> 00:06:59.860
You want some color and you don't necessarily have to have like an amazing logo.

00:06:59.860 --> 00:07:04.500
So they come back to this well app and it's just a W with like a little connection smile

00:07:04.500 --> 00:07:05.420
or something under it.

00:07:05.420 --> 00:07:08.260
One thing I did learn about this, though, that I thought was interesting.

00:07:08.260 --> 00:07:12.480
Like, how do they center this image but not have it go all the way across the readme?

00:07:12.700 --> 00:07:17.780
If you go to the readme and you actually look at it, apparently GitHub will let you put full

00:07:17.780 --> 00:07:21.020
HTML inside of your readme for the segments that need lots of formatting.

00:07:21.020 --> 00:07:22.600
I thought I thought they wouldn't.

00:07:22.600 --> 00:07:25.900
I know some markdown does fall back that way, but I didn't think GitHub did.

00:07:25.900 --> 00:07:27.460
Anyway, apparently, yes, you can.

00:07:28.180 --> 00:07:31.160
Also, this one's quick badges like a CI passing.

00:07:31.160 --> 00:07:33.120
What's the license and so on.

00:07:33.640 --> 00:07:37.180
Is there a YouTube link to like a YouTube channel that shows people how to use it?

00:07:37.180 --> 00:07:38.600
Some more of those as examples.

00:07:38.600 --> 00:07:41.560
Write a convincing description in a paragraph or two.

00:07:41.560 --> 00:07:44.980
Add things like, what is this repo or project?

00:07:44.980 --> 00:07:46.140
How does it work?

00:07:46.140 --> 00:07:46.920
Who will use it?

00:07:46.920 --> 00:07:47.760
What is the goal?

00:07:47.760 --> 00:07:48.580
And so on, right?

00:07:48.580 --> 00:07:49.420
Real simple one.

00:07:49.420 --> 00:07:51.400
And again, they come back to the size limit.

00:07:51.400 --> 00:07:55.000
It's a performance tool that'll crash your CI if it's too big.

00:07:55.000 --> 00:07:55.840
Here we go.

00:07:55.840 --> 00:07:57.740
Getting to the ones that Brian and I love.

00:07:58.080 --> 00:07:59.500
Port Visuals to attract users.

00:07:59.500 --> 00:08:00.180
Yes.

00:08:00.180 --> 00:08:07.360
So you might think there's no UI aspect, but here's a full-on CLI example.

00:08:07.360 --> 00:08:09.660
That is create Go app CLI.

00:08:09.660 --> 00:08:13.380
And all it does, imagine this, it creates Go apps on the CLI.

00:08:13.380 --> 00:08:16.200
It's a good name that can base what it does.

00:08:16.200 --> 00:08:18.680
But if you go to see, it's like, how do I create one?

00:08:18.680 --> 00:08:23.540
It has the option, but then under it, it has an animated GIF doing the things that creates

00:08:23.540 --> 00:08:28.040
the app and showing you the tree structure that results, the file structure that results and so on.

00:08:28.040 --> 00:08:30.720
Then a full video and a documentation to that thing and so on.

00:08:30.720 --> 00:08:31.900
So that's pretty awesome.

00:08:31.900 --> 00:08:33.160
And how about you?

00:08:33.160 --> 00:08:38.140
Brian and I are always trying to quickly jump into a project and figure out what is it about?

00:08:38.140 --> 00:08:40.340
Is it polished and so on?

00:08:40.340 --> 00:08:42.560
But that's because we run this podcast.

00:08:42.560 --> 00:08:47.040
How do you see this sort of pictures and animations for repos?

00:08:47.040 --> 00:08:49.240
Yeah, that's super helpful.

00:08:49.240 --> 00:08:52.860
I really like the idea with the animation.

00:08:53.720 --> 00:08:58.840
Just basically taking you through the kinds of things that this particular app, for instance,

00:08:58.840 --> 00:08:59.380
can do.

00:08:59.380 --> 00:09:01.620
That's super helpful.

00:09:01.620 --> 00:09:03.920
More and more people are doing it.

00:09:03.920 --> 00:09:06.040
I don't think it's super popular yet.

00:09:06.040 --> 00:09:10.820
I don't know about how about you guys, but I haven't seen it for a lot of times.

00:09:10.820 --> 00:09:12.240
Yeah.

00:09:12.240 --> 00:09:14.400
But it, yeah, it definitely looks nice.

00:09:14.400 --> 00:09:16.240
Yeah, I really like it as well.

00:09:16.240 --> 00:09:17.080
All right, let's see.

00:09:17.400 --> 00:09:23.000
Another one is create a practical usage guide, like how to use it with some examples, some

00:09:23.000 --> 00:09:25.600
templates, answer common questions like an FAQ.

00:09:25.600 --> 00:09:29.440
I use it on Windows or does it require admin support?

00:09:29.440 --> 00:09:29.840
I don't know.

00:09:29.840 --> 00:09:30.620
Something like that.

00:09:30.620 --> 00:09:31.460
Build a community.

00:09:31.460 --> 00:09:35.580
So maybe you have a, this is probably further down the line, but like, do you have a Discord

00:09:35.580 --> 00:09:36.880
community for your project?

00:09:36.880 --> 00:09:40.800
Or you can even just enable discussions on the GitHub repository.

00:09:40.800 --> 00:09:45.620
I'll end up with people opening issues on my various repositories saying, I have a question.

00:09:45.620 --> 00:09:47.180
Like, okay, a question's not an issue.

00:09:47.180 --> 00:09:51.040
An issue is the thing that is wrong or a thing to be improved, but they don't have another

00:09:51.040 --> 00:09:53.000
way to communicate traditionally.

00:09:53.000 --> 00:09:58.520
But GitHub now has, in addition to issues, they also have a discussion section that's more

00:09:58.520 --> 00:09:59.060
open-ended.

00:09:59.060 --> 00:10:03.780
So I think that's off by default, if I remember correctly, at least on the older ones it is.

00:10:03.780 --> 00:10:04.880
So I go and turn that on.

00:10:04.880 --> 00:10:05.940
Code of conduct.

00:10:05.940 --> 00:10:07.020
That's all good.

00:10:07.020 --> 00:10:08.460
Contributor guidelines.

00:10:08.460 --> 00:10:10.500
Choose a license, the right license.

00:10:10.500 --> 00:10:14.720
Remember, if you don't choose a license at all, that means it's unlicensed and people

00:10:14.720 --> 00:10:15.420
can't really use it.

00:10:15.420 --> 00:10:17.160
So add a roadmap.

00:10:17.160 --> 00:10:18.580
Create GitHub releases.

00:10:18.580 --> 00:10:25.200
One thing that I didn't pull up that's pretty cool is release drafter.

00:10:25.200 --> 00:10:29.860
I'm not sure if you all are familiar with this, but this is a pretty cool thing as well.

00:10:29.860 --> 00:10:30.740
Release drafter.

00:10:30.740 --> 00:10:36.300
Drafts your next release notes as PRs are merged into master or main, depending on how you set

00:10:36.300 --> 00:10:36.720
up your repo.

00:10:36.720 --> 00:10:37.500
That's pretty cool.

00:10:39.700 --> 00:10:41.580
Customize your social media preview.

00:10:41.580 --> 00:10:45.960
So if somebody shares your project, you can control what is shown in that little Twitter

00:10:45.960 --> 00:10:47.600
card or other cards.

00:10:47.600 --> 00:10:53.280
So apparently that that can be customized inside of your GitHub repository and launch a website.

00:10:53.280 --> 00:10:54.100
Off it goes.

00:10:54.100 --> 00:10:58.820
You can use GitHub pages or Netlify is really easy for easy and free for static sites and

00:10:58.820 --> 00:10:59.360
so on.

00:10:59.440 --> 00:11:03.540
So anyway, there's a bunch of things people can do to take their repo to the next level.

00:11:03.540 --> 00:11:04.340
What do you think?

00:11:04.340 --> 00:11:05.360
I think it's great.

00:11:05.360 --> 00:11:05.960
Yeah.

00:11:05.960 --> 00:11:06.940
I love this list.

00:11:06.940 --> 00:11:07.960
It looks very nice.

00:11:07.960 --> 00:11:11.340
I don't do any of these things and I probably should.

00:11:12.340 --> 00:11:13.920
So I might have a picture.

00:11:13.920 --> 00:11:15.360
I have a usage guide.

00:11:15.360 --> 00:11:19.060
Oh, there's also one that talks about how to install it that I somehow skipped, but most

00:11:19.060 --> 00:11:19.660
things don't need.

00:11:19.660 --> 00:11:26.060
So one of the things that I see a lot is, I don't know if this covers it, but I see documentation

00:11:26.060 --> 00:11:32.740
that's on read the docs, which is great, but I still think a quick start or a little like

00:11:32.740 --> 00:11:37.100
this is how you install it and this is how you can do a little bit of something with it.

00:11:37.100 --> 00:11:42.640
That should be in the read me, even if you have other documentation, because I don't

00:11:42.640 --> 00:11:46.100
want to have to just go to the documentation to see if this is the right project for me.

00:11:46.100 --> 00:11:48.320
So, yeah, this is great.

00:11:48.320 --> 00:11:55.480
So we have a question of does, how does one create a CLI animated GIF?

00:11:55.480 --> 00:12:00.320
And I don't know if the dot, if this article covers that, but I don't think so.

00:12:00.320 --> 00:12:00.620
Okay.

00:12:00.620 --> 00:12:03.960
We'll have to, we'll have to research that and get back to you.

00:12:03.960 --> 00:12:04.160
Yeah.

00:12:04.160 --> 00:12:11.200
Well, Alvaro, what I do is I'll use Camtasia and you can record a Camtasia video of just

00:12:11.200 --> 00:12:11.960
the window.

00:12:11.960 --> 00:12:17.500
And then there's different output options like just audio or just the video or an animated

00:12:17.500 --> 00:12:17.820
GIF.

00:12:17.820 --> 00:12:19.340
So that's one of them.

00:12:19.340 --> 00:12:26.140
Jeremy Page points out there are a few tools to record that in a cinema.

00:12:26.140 --> 00:12:26.760
I don't know.

00:12:26.760 --> 00:12:29.700
Like ASCII cinema, basically.

00:12:29.700 --> 00:12:30.940
I don't know how to say that.

00:12:30.940 --> 00:12:32.520
It's often used pretty cool.

00:12:33.800 --> 00:12:35.540
And Dean, hello Dean.

00:12:35.540 --> 00:12:36.280
You know, the hook of names.

00:12:36.280 --> 00:12:37.060
Exactly.

00:12:37.060 --> 00:12:38.740
I'm at a loss on that one.

00:12:38.740 --> 00:12:43.000
Claudia, who I just had on Talk Python, has a blog post about many of those things.

00:12:43.000 --> 00:12:45.500
And he has a better for release drafter and badges.

00:12:45.500 --> 00:12:49.340
Yeah, I covered that on Talk Python just recently about hypermodern Python.

00:12:49.340 --> 00:12:49.920
Awesome.

00:12:49.920 --> 00:12:53.420
Well, that's probably way more than people want to know about their GitHub repository.

00:12:53.640 --> 00:13:01.760
But so often GitHub repositories these days serve as your CV or your resume when you go to apply

00:13:01.760 --> 00:13:02.720
for developer jobs.

00:13:02.720 --> 00:13:07.100
And if you end up at somewhere that looks like what they described here, rather than a bunch

00:13:07.100 --> 00:13:11.200
of things with like weird commit messages and nothing like that's going to make a different

00:13:11.200 --> 00:13:11.600
impression.

00:13:11.600 --> 00:13:13.740
Or if you want people to adopt it and start using it.

00:13:14.140 --> 00:13:14.460
Yeah.

00:13:14.460 --> 00:13:17.100
And if you don't, then don't put this stuff in.

00:13:17.100 --> 00:13:17.660
Yeah.

00:13:17.660 --> 00:13:19.160
Exactly.

00:13:19.160 --> 00:13:21.120
All right, Brian.

00:13:21.120 --> 00:13:22.120
Let's go faster.

00:13:22.120 --> 00:13:23.240
Well, let's go faster.

00:13:23.240 --> 00:13:24.480
Speaking of CLI.

00:13:24.920 --> 00:13:27.000
So this is a fun tool.

00:13:27.000 --> 00:13:29.480
We're talking about faster row.

00:13:29.480 --> 00:13:30.040
Faster?

00:13:30.040 --> 00:13:30.860
I don't know.

00:13:30.860 --> 00:13:31.660
Faster row.

00:13:31.660 --> 00:13:32.460
I'm going to go with that.

00:13:32.460 --> 00:13:34.880
So this is a time.

00:13:34.880 --> 00:13:37.580
It's like time it on the command line.

00:13:37.580 --> 00:13:40.480
So but it's pretty neat.

00:13:40.480 --> 00:13:44.320
So this is by Arian Wasi.

00:13:44.320 --> 00:13:47.280
And we've had we've covered something of his before.

00:13:47.280 --> 00:13:50.660
So it was the type explainer thing.

00:13:50.660 --> 00:13:51.060
Right.

00:13:51.060 --> 00:13:54.800
I don't remember its exact name, but type explainer where you put a typed thing in there and

00:13:54.800 --> 00:13:57.820
would humanize what those meant.

00:13:57.820 --> 00:14:01.380
So I this is a simple little tool, but I'm loving it already.

00:14:01.380 --> 00:14:07.600
So this one of the it does either it times stuff, but it also compares times.

00:14:07.600 --> 00:14:15.480
So like in this, we're showing the website here, but and it I can't I can't tell what

00:14:15.480 --> 00:14:16.040
they're timing.

00:14:16.040 --> 00:14:19.400
So let's just pull over in the documentation.

00:14:19.400 --> 00:14:21.000
It does have a bunch of examples.

00:14:21.000 --> 00:14:28.300
So if you ran faster row with with two code snippets and in this example, we're showing

00:14:28.300 --> 00:14:33.360
is just either just showing either a string or an F string timing those.

00:14:33.360 --> 00:14:34.240
So that's pretty neat.

00:14:34.920 --> 00:14:37.060
And those so those two code snippets.

00:14:37.060 --> 00:14:41.680
If you run those, it'll run both of those a whole bunch of times and do some statistics.

00:14:41.680 --> 00:14:45.740
Like in this example, it's running it 20,000 and 50,000 times.

00:14:45.740 --> 00:14:47.720
No, 20 million and 50 million.

00:14:47.720 --> 00:14:48.060
Wow.

00:14:48.840 --> 00:14:53.540
And then it shows you a little progress bar and and then who wins.

00:14:53.540 --> 00:14:58.260
But if you don't if you're not comparing two things, it'll just show one with the same

00:14:58.260 --> 00:15:00.440
graphics, but you can do more than two.

00:15:00.440 --> 00:15:05.500
I did like three or four just trying this out to time different things and compare them.

00:15:05.500 --> 00:15:08.640
And this often that's why I'm timing something.

00:15:08.640 --> 00:15:11.120
I'm comparing two things and I want to see which one's faster.

00:15:11.120 --> 00:15:13.260
So this is a really cool feature.

00:15:13.840 --> 00:15:18.960
You can either pass in code snippets or you can give it to Python file names and it'll

00:15:18.960 --> 00:15:20.400
run both both those things.

00:15:20.400 --> 00:15:23.180
One of the it's kind of a whole bunch of really cool features, actually.

00:15:23.180 --> 00:15:30.280
And one of the things I like is you can if you've got some code snippet that you are

00:15:30.280 --> 00:15:34.740
need some setup, but that the setup part isn't the part you're timing.

00:15:34.740 --> 00:15:39.080
You can give it some setup code to do before it does the time part.

00:15:39.080 --> 00:15:40.600
So that's pretty neat.

00:15:40.600 --> 00:15:45.560
Anyway, just a really nice looking command line interface timing tool.

00:15:45.560 --> 00:15:46.700
Yeah, that's very cool.

00:15:46.700 --> 00:15:50.020
So you can sort of isolate the thing that you really want to time.

00:15:50.020 --> 00:15:53.840
So you don't care about.

00:15:53.840 --> 00:15:57.780
Yeah, I haven't tried the setup part, but it's cool that it has it in there.

00:15:57.780 --> 00:16:03.120
There's there's a documentation is pretty thorough, actually, as well.

00:16:03.120 --> 00:16:06.200
Quite a bit of cost customization available.

00:16:06.200 --> 00:16:06.940
That's cool.

00:16:06.940 --> 00:16:11.560
Yeah, I agree that that is nice that setup stuff, because so often if I want to profile

00:16:11.560 --> 00:16:16.360
like some web app or something, it's the thing I want to profile is dwarfed by just loading

00:16:16.360 --> 00:16:18.520
up the framework and scanning all the files.

00:16:18.520 --> 00:16:22.060
And you're like, all right, now I got to hunt down that little fragment that actually represents

00:16:22.060 --> 00:16:23.100
what I'm really after.

00:16:23.100 --> 00:16:23.920
So cool.

00:16:23.920 --> 00:16:24.440
Yeah.

00:16:24.440 --> 00:16:26.660
Maybe I'll try one of those sometimes.

00:16:26.660 --> 00:16:26.980
Yeah.

00:16:27.020 --> 00:16:29.840
And you can pass in strings of Python or you can pass in files.

00:16:29.840 --> 00:16:30.640
Yeah.

00:16:30.640 --> 00:16:34.700
And when I saw the strings a bit, I'm like, all right, there's a good use case for semicolons

00:16:34.700 --> 00:16:35.180
in Python.

00:16:35.180 --> 00:16:36.920
Right?

00:16:36.920 --> 00:16:37.800
You can use them.

00:16:37.800 --> 00:16:38.060
Do it.

00:16:38.060 --> 00:16:39.480
Yeah.

00:16:39.480 --> 00:16:40.140
So.

00:16:40.140 --> 00:16:40.880
Exactly.

00:16:40.880 --> 00:16:41.640
It makes you feel better.

00:16:41.640 --> 00:16:42.360
Awesome.

00:16:42.360 --> 00:16:43.220
That's a good one.

00:16:43.220 --> 00:16:43.720
All right.

00:16:43.720 --> 00:16:44.520
Anna, on to you.

00:16:44.520 --> 00:16:45.740
What's your first one here?

00:16:45.740 --> 00:16:46.460
Yeah.

00:16:46.640 --> 00:16:51.620
So I wanted to talk a little bit about, well, data, my line of business.

00:16:51.620 --> 00:16:57.920
And I was just thinking that something that could be really interesting, especially for

00:16:57.920 --> 00:17:04.540
that part of our audience that works with data science projects.

00:17:04.540 --> 00:17:07.920
Well, in general, you're collecting data.

00:17:07.920 --> 00:17:16.620
You definitely, in most cases, you get some kind of noisy data that you need to clean up

00:17:16.620 --> 00:17:18.420
and filter out in some way.

00:17:18.420 --> 00:17:24.280
And particularly, so I imagine we have a pretty large international audience as well.

00:17:24.280 --> 00:17:31.120
And also, on the other hand, if you're working with data from social media, which is very popular

00:17:31.120 --> 00:17:38.940
right now, one of the questions that you have to solve there is identify the human language

00:17:38.940 --> 00:17:41.360
of the data that you're working with on content.

00:17:41.360 --> 00:17:46.600
You want to filter out the pieces of data that are maybe, for example, are not an individual

00:17:46.600 --> 00:17:51.560
if you're going through social media posts or something.

00:17:51.560 --> 00:17:52.220
All right.

00:17:52.220 --> 00:17:56.300
You get that little, translate this to your language, little button at the end, if for some

00:17:56.300 --> 00:17:59.240
reason the popular post is in Spanish or something, right?

00:17:59.240 --> 00:17:59.660
Exactly.

00:17:59.660 --> 00:17:59.940
Yeah.

00:17:59.940 --> 00:18:07.820
And some of the platforms, their APIs rather, do provide this kind of filtering on their backhand.

00:18:08.340 --> 00:18:09.760
I know Twitter does that.

00:18:09.760 --> 00:18:17.060
But also, as I know, sometimes it's not as reliable, really.

00:18:17.060 --> 00:18:22.580
I guess maybe, again, like I could imagine that maybe it's not really sort of the ultimate

00:18:22.580 --> 00:18:23.380
goal.

00:18:23.380 --> 00:18:27.360
That's either maybe not putting as much love and caring to this question.

00:18:28.360 --> 00:18:32.980
So that's something that I had to do a few times also.

00:18:32.980 --> 00:18:39.960
And a couple of libraries that I've worked with are LANGID and LANGDETECT.

00:18:39.960 --> 00:18:41.480
There are a few more out there.

00:18:41.480 --> 00:18:46.780
And these ones have been out there for a while, actually.

00:18:46.780 --> 00:18:53.760
And LANGID hasn't been actually sort of worked on actually for a few years now.

00:18:53.760 --> 00:18:59.400
But it's still kind of one of those benchmark libraries for this kind of questions.

00:18:59.400 --> 00:19:03.760
And both of those are super neat, actually.

00:19:03.760 --> 00:19:06.920
So LANGID is really popular.

00:19:06.920 --> 00:19:11.980
And one of the things that I really liked about it is that it actually covers a lot of languages.

00:19:11.980 --> 00:19:19.400
So I've actually had different pieces of information depending on the documentation that I was using,

00:19:19.400 --> 00:19:21.360
either at Hi-Fi or at the GitHub page.

00:19:22.060 --> 00:19:25.200
So at some point, I saw it was covering 97.

00:19:25.200 --> 00:19:27.940
And I think there did have pages saying 97.

00:19:27.940 --> 00:19:30.280
97 is a lot of languages.

00:19:30.280 --> 00:19:32.220
I couldn't name 97 languages.

00:19:32.220 --> 00:19:35.240
I'm a linguist.

00:19:35.240 --> 00:19:38.260
I would have trouble naming, you know, 97 languages off the top of my head.

00:19:38.260 --> 00:19:41.080
I definitely don't speak 97 languages.

00:19:42.140 --> 00:19:48.340
And some of the nice things about it is that you can use it as sort of like a standalone, you know, module,

00:19:48.340 --> 00:19:50.460
like a command line tool, for instance.

00:19:50.460 --> 00:19:54.500
But you can also use it as launched as a web service.

00:19:54.500 --> 00:19:57.060
So that's really neat about it.

00:19:57.060 --> 00:20:04.880
And some more like needy-free things that were really helpful when I was trying it out for some of my project was that

00:20:04.880 --> 00:20:18.180
when you try to identify the human language using one ID, it actually outputs the weight and the calculations done,

00:20:18.180 --> 00:20:20.320
which is very typical in like a log space.

00:20:20.320 --> 00:20:24.100
So you have like these funky numbers in the end, you know, truly speaking.

00:20:24.560 --> 00:20:32.420
But the good thing is that you actually can convert them to a bit more confidence force that especially a data scientist are used to.

00:20:32.420 --> 00:20:39.060
And that actually comes in super handy because sometimes you, when you're trying to filter out the data

00:20:39.060 --> 00:20:44.680
and you know that this kind of tools are like obviously not, you know, 100% reliable,

00:20:44.680 --> 00:20:53.120
you can also use this confidence force to maybe use it as again as like, okay, I'm taking this answer and I'm relying on that.

00:20:53.500 --> 00:21:03.340
Or, okay, maybe I'll just like drop this piece of data altogether because it looks like the language identified is not super actually sure.

00:21:03.340 --> 00:21:07.880
Like what kind of language this is, you know, if you're targeting a specific language.

00:21:07.880 --> 00:21:09.340
And another...

00:21:09.340 --> 00:21:10.680
Yeah, this is wild.

00:21:10.680 --> 00:21:11.900
Yeah.

00:21:11.900 --> 00:21:18.920
So you get, you basically might say we're 80% sure it's English, but it might also be Spanish or something.

00:21:19.340 --> 00:21:19.740
Exactly.

00:21:19.740 --> 00:21:19.940
Yeah.

00:21:19.940 --> 00:21:20.140
Yeah.

00:21:20.140 --> 00:21:29.180
Like English can be easily confused with maybe German or sometimes French just to use it so much of the vocabulary circling around with those two languages.

00:21:29.180 --> 00:21:31.860
So, yeah.

00:21:31.860 --> 00:21:37.900
So the identifier is not going to be like 100% sure that, you know, this is language.

00:21:37.900 --> 00:21:43.240
And the funny thing is that I'm not so sure about Lang ID.

00:21:43.240 --> 00:21:46.620
Yeah, Lang ID is also statistical actually.

00:21:46.620 --> 00:21:47.740
No remembering.

00:21:47.740 --> 00:21:50.060
And so Lang Detect as well.

00:21:50.060 --> 00:21:56.600
And sort of the flip side of that is that it actually works very well.

00:21:56.600 --> 00:22:02.000
The bigger piece of data that you're fitting into it, the more confidence going to be.

00:22:02.000 --> 00:22:02.460
Like, right?

00:22:02.460 --> 00:22:03.760
That's how specific work.

00:22:03.760 --> 00:22:05.080
Yeah.

00:22:05.260 --> 00:22:08.380
That's how machine learning works, sort of generally speaking.

00:22:08.380 --> 00:22:24.420
And if you're working specifically with this kind of short tweet, social media posts, if it's like really short phrase, sentence, interspersed with like emojis and stuff, it's probably not going to be super confident.

00:22:24.420 --> 00:22:30.860
So the bigger piece of data, the more confident, the better the performance of the languages.

00:22:30.860 --> 00:22:36.360
And there will be something to keep in mind when you're working on data and you're trying to filter it by language.

00:22:36.360 --> 00:22:37.340
Yeah, that makes sense.

00:22:37.340 --> 00:22:40.660
If you have one word or something, it's very hard to go off.

00:22:40.660 --> 00:22:41.660
Yeah, exactly.

00:22:41.660 --> 00:22:42.060
Yeah, exactly.

00:22:42.060 --> 00:22:44.320
So this being one file, sorry, right.

00:22:44.320 --> 00:22:45.700
This being one file is insane.

00:22:45.700 --> 00:22:48.160
Like it acts as a web server and does all sorts of stuff.

00:22:48.160 --> 00:22:48.780
Crazy.

00:22:48.780 --> 00:22:49.620
This is crazy.

00:22:49.620 --> 00:22:50.060
Yeah.

00:22:50.060 --> 00:22:53.820
And it's something that I really like about it.

00:22:54.100 --> 00:23:00.920
It's a pretty lightweight, sort of, well, isolated, low dependency kind of package, which is fascinating.

00:23:00.920 --> 00:23:09.140
Based on a kind of not a super sophisticated, naive-based Helgern, if I'm remembering it actually correctly.

00:23:09.140 --> 00:23:12.940
And so, yeah, that's really, really fun.

00:23:12.940 --> 00:23:14.540
It's really nice.

00:23:14.540 --> 00:23:15.320
It works so nicely.

00:23:15.320 --> 00:23:24.000
And the other one that I wanted to sort of kind of juxtapose to it was Lang Detect, which is in my second tab.

00:23:24.000 --> 00:23:24.820
I wanted to do a lot of things.

00:23:24.820 --> 00:23:25.820
I wanted to do a lot of things.

00:23:25.820 --> 00:23:26.820
I wanted to do a lot of things.

00:23:26.820 --> 00:23:27.820
I wanted to do a lot of things.

00:23:27.820 --> 00:23:28.820
I wanted to do a lot of things.

00:23:28.820 --> 00:23:29.820
I wanted to do a lot of things.

00:23:29.820 --> 00:23:30.820
I wanted to do a lot of things.

00:23:30.820 --> 00:23:31.820
I wanted to do a lot of things.

00:23:31.820 --> 00:23:32.820
I wanted to do a lot of things.

00:23:32.820 --> 00:23:33.820
I wanted to do a lot of things.

00:23:33.820 --> 00:23:34.820
I wanted to do a lot of things.

00:23:34.820 --> 00:23:35.820
I wanted to do a lot of things.

00:23:35.820 --> 00:23:36.820
I wanted to do a lot of things.

00:23:36.820 --> 00:23:43.520
And it's also really neat and easy to use.

00:23:43.520 --> 00:23:48.220
And the great thing about the basic usage is very straightforward.

00:23:48.220 --> 00:23:51.640
It's like one of those packages you discover, like, you know, we need to do what's doing,

00:23:51.640 --> 00:23:52.420
how it's doing it.

00:23:52.420 --> 00:23:56.000
And, you know, like, you really can understand in five minutes if it's going to be something

00:23:56.000 --> 00:23:59.740
that, you know, is going to suit well in my project when I put it.

00:23:59.740 --> 00:24:00.740
Sure.

00:24:00.740 --> 00:24:05.300
So the main methods are the text and the text language.

00:24:05.300 --> 00:24:13.020
So you can either just call it in a piece of data and try and get the most probable language

00:24:13.020 --> 00:24:16.780
that this package thinks it is.

00:24:16.780 --> 00:24:22.120
Or you can have returned a list of possible languages.

00:24:22.120 --> 00:24:24.980
So it's going to actually to order them.

00:24:24.980 --> 00:24:32.740
English and then there's a fraction of probability that's going to be in the German or something

00:24:32.740 --> 00:24:33.740
like that.

00:24:33.740 --> 00:24:36.980
And then you can decide for yourself.

00:24:36.980 --> 00:24:45.480
And yeah, so overall, from my experience, language is a little bit better than language, but that

00:24:45.480 --> 00:24:47.980
sort of looks, you know, empirical.

00:24:47.980 --> 00:24:48.980
Yeah, that's great.

00:24:48.980 --> 00:24:54.980
It seems super useful for anyone that needs to parse text and can't be sure it's all in

00:24:54.980 --> 00:24:55.980
one language.

00:24:55.980 --> 00:24:56.980
Yeah.

00:24:56.980 --> 00:24:57.980
So if anyone else is working on some kind of data science project or working with human

00:24:57.980 --> 00:24:58.980
language data, I would highly recommend.

00:24:58.980 --> 00:25:02.980
And probably one of the things while I think it's a little bit more confident and robust,

00:25:02.980 --> 00:25:03.980
I know that it covers fewer languages.

00:25:03.980 --> 00:25:09.980
So I think it's 55 languages total compared to 97 for language I do with it.

00:25:09.980 --> 00:25:10.980
But yeah.

00:25:10.980 --> 00:25:10.980
Yeah.

00:25:10.980 --> 00:25:11.980
Interesting.

00:25:11.980 --> 00:25:12.980
It's both great.

00:25:12.980 --> 00:25:13.980
Nice.

00:25:13.980 --> 00:25:16.980
Well, Michael, let me tell you about our sponsor for this episode.

00:25:16.980 --> 00:25:18.980
Before we move on.

00:25:18.980 --> 00:25:19.980
It's a podcast.

00:25:19.980 --> 00:25:20.980
Amazing.

00:25:20.980 --> 00:25:24.980
So this episode of Python Bytes is sponsored by the Python Bytes.

00:25:24.980 --> 00:25:25.980
Compiler Podcast from Red Hat.

00:25:25.980 --> 00:25:31.980
So everyone out there, just like you, Brian and I, we're both fans of podcasts, listening

00:25:31.980 --> 00:25:33.980
to podcasts all the time and stuff.

00:25:33.980 --> 00:25:34.980
That's why we started some.

00:25:34.980 --> 00:25:35.980
We like them.

00:25:35.980 --> 00:25:38.980
And so I'm happy to share a new one from a highly respected open source company, Compiler

00:25:38.980 --> 00:25:39.980
Interactive.

00:25:39.980 --> 00:25:40.980
And I'm a fan of the Python Bytes.

00:25:40.980 --> 00:25:41.980
And I'm a fan of the Python Bytes.

00:25:41.980 --> 00:25:42.980
And I'm a fan of the Python Bytes.

00:25:42.980 --> 00:25:43.980
And I'm a fan of the Python Bytes.

00:25:43.980 --> 00:25:44.980
And I'm a fan of the Python Bytes.

00:25:44.980 --> 00:25:45.980
And I'm a fan of the Python Bytes.

00:25:45.980 --> 00:25:46.980
And I'm a fan of the Python Bytes.

00:25:46.980 --> 00:25:47.980
And I'm a fan of the Python Bytes.

00:25:47.980 --> 00:25:48.980
And I'm a fan of the Python Bytes.

00:25:48.980 --> 00:25:49.980
And I'm a fan of the Python Bytes.

00:25:49.980 --> 00:25:54.980
And so I'm happy to share a new one from a highly respected open source company, Compiler,

00:25:54.980 --> 00:25:56.980
an original podcast from Red Hat.

00:25:56.980 --> 00:26:00.980
With more and more of us working from home or being more disconnected, it's important to

00:26:00.980 --> 00:26:03.980
keep our human connection with technology.

00:26:03.980 --> 00:26:07.980
Compiler unravels industry topics, trends, and things you've always wanted to know about

00:26:07.980 --> 00:26:10.980
tech through interviews with the people who know best.

00:26:10.980 --> 00:26:15.980
So on Compiler, you'll hear a chorus of perspectives from diverse communities behind the code.

00:26:15.980 --> 00:26:19.980
These conversations include questions like, "What is technical debt?"

00:26:19.980 --> 00:26:22.980
"What are tech hiring managers actually looking for?"

00:26:22.980 --> 00:26:24.980
"Hint, see item one to some degree."

00:26:24.980 --> 00:26:29.980
"And do you know how to code to get started with open..."

00:26:29.980 --> 00:26:32.980
"How do you know how to code to get started with open source?"

00:26:32.980 --> 00:26:34.980
All right.

00:26:34.980 --> 00:26:38.980
I was a guest on Red Hat's previous podcast called Command Line Heroes.

00:26:38.980 --> 00:26:41.980
And that was a super produced and polished podcast.

00:26:41.980 --> 00:26:42.980
It was a really cool experience.

00:26:42.980 --> 00:26:46.980
And so Compiler follows along in that excellent tradition and that polished style.

00:26:46.980 --> 00:26:51.980
So I checked out episode 12, how we should handle failure, which I found really interesting.

00:26:51.980 --> 00:26:55.980
I really value their conversation about making space for developers to fail,

00:26:55.980 --> 00:27:00.980
so they can learn without fear of making mistakes, you know, like taking down the production website and so on.

00:27:00.980 --> 00:27:01.980
Right?

00:27:01.980 --> 00:27:04.980
People grow through experimentation, but they also fail.

00:27:04.980 --> 00:27:05.980
They try new things.

00:27:05.980 --> 00:27:08.980
So you got to make sure that they get a chance to grow.

00:27:08.980 --> 00:27:12.980
So learn about the Compiler podcast at pythonbytes.fm/compiler.

00:27:12.980 --> 00:27:15.980
The link is at your podcast player show notes right at the top.

00:27:15.980 --> 00:27:17.980
You can listen to it on all the places that you would think.

00:27:17.980 --> 00:27:21.980
So thanks to Compiler podcast for keeping this podcast going strong.

00:27:21.980 --> 00:27:27.980
And Brian, also just real quickly want to point out, I know people can just go to their podcast app,

00:27:27.980 --> 00:27:31.980
wherever that's Pocket Cast or Overcast or whatever and type in Compiler and search.

00:27:31.980 --> 00:27:38.980
But please visit pythonbytes.fm/compiler and there's a place to subscribe with all of your various podcasts destinations.

00:27:38.980 --> 00:27:42.980
That way they know it came from us rather than just out of the ether.

00:27:42.980 --> 00:27:47.980
So if you're going to subscribe or check them out, please do through that link just so people know.

00:27:47.980 --> 00:27:48.980
Nice.

00:27:48.980 --> 00:27:49.980
Yeah.

00:27:49.980 --> 00:27:53.980
So how about we talk about watching some things like files?

00:27:53.980 --> 00:27:54.980
Yeah.

00:27:54.980 --> 00:27:55.980
We were listening.

00:27:55.980 --> 00:27:56.980
Now we're watching.

00:27:56.980 --> 00:27:57.980
We were listening.

00:27:57.980 --> 00:27:58.980
Now we're going to watch.

00:27:58.980 --> 00:27:59.980
But watch them for changes, not watch what they are.

00:27:59.980 --> 00:28:04.980
So this one comes to us from Samuel Colvin of Pydantic fame.

00:28:04.980 --> 00:28:09.980
So you know, it's a pretty cool experience behind developing this API.

00:28:09.980 --> 00:28:16.980
And the idea is it's a simple, modern and high performance ways to watch files for changes.

00:28:16.980 --> 00:28:18.980
So there's a lot of reasons you might want to do that.

00:28:18.980 --> 00:28:26.980
You might want to say if somebody drops a file into this directory, I'm going to kick off a job to like load it up and process it in some kind of batch processing.

00:28:26.980 --> 00:28:33.980
Or I want to have my web framework automatically restart if this, any of the files in here get changed, right?

00:28:33.980 --> 00:28:35.980
Any of the Python files or whatever.

00:28:35.980 --> 00:28:36.980
So you could use it for things like that.

00:28:36.980 --> 00:28:38.980
But the modern part's pretty interesting.

00:28:38.980 --> 00:28:39.980
So that's a good thing.

00:28:39.980 --> 00:28:49.980
It hooks into the underlying file system, the underlying OS notification systems, and is done through, that's done through the notify rust library.

00:28:49.980 --> 00:28:56.980
So basically it's a low latency, high performance, native, non polling way of watching the files.

00:28:56.980 --> 00:29:01.980
And then just goes to the operating system and says, hey, I, in this directory tree, if anything changes, call the callback.

00:29:01.980 --> 00:29:02.980
Nice.

00:29:02.980 --> 00:29:03.980
That's pretty awesome.

00:29:03.980 --> 00:29:04.980
Yeah.

00:29:04.980 --> 00:29:05.980
So there's real simple uses here.

00:29:05.980 --> 00:29:12.980
Like I can say from watch files import watch, and then just for changes in watch some path, then you can process those changes.

00:29:12.980 --> 00:29:18.980
So here's an example of an app that just starts and its job is to, as things change here, take them up.

00:29:18.980 --> 00:29:27.980
That might be an example of what I said about kicking off something over to like load it and parse it and decide what to do, and then maybe pass it to Celery for background work, right?

00:29:27.980 --> 00:29:34.980
On the other hand, you might want to do other things while you're watching for changes as well in your app.

00:29:34.980 --> 00:29:39.980
In which case there's also an A watch, an asynchronous watch.

00:29:39.980 --> 00:29:48.980
So if you're doing other work and it's all asyncio based, here you can just say, kick off the watching bit and await for the changes to happen.

00:29:48.980 --> 00:29:58.980
And then do other async processing like FastAPI or web or database calls, you know, web with HTTPX or database calls with Beanie or whatever other asyncio things.

00:29:58.980 --> 00:30:01.980
And it's sort of less you run them in parallel, which is cool, right?

00:30:01.980 --> 00:30:02.980
Yeah.

00:30:02.980 --> 00:30:13.980
And if you want to go even further, you can kick off a separate process and say, start a process that will watch for changes here and then call back this function if those things change.

00:30:13.980 --> 00:30:15.980
So that's pretty cool too.

00:30:15.980 --> 00:30:19.980
There's all these different ways in which you can use it, but yeah, it's pretty neat.

00:30:19.980 --> 00:30:22.980
It's based on this REST library and it seems pretty powerful.

00:30:22.980 --> 00:30:27.980
There's also a CLI, which I did want to point out one other thing over here.

00:30:27.980 --> 00:30:29.980
Like this, I thought this might impress you, Brian.

00:30:29.980 --> 00:30:30.980
Definitely.

00:30:30.980 --> 00:30:32.740
I can do a command line.

00:30:32.740 --> 00:30:35.740
Watch files command that will say, watch this directory.

00:30:35.740 --> 00:30:38.740
And if anything changes, rerun the failing tests.

00:30:38.740 --> 00:30:39.740
That's very cool.

00:30:39.740 --> 00:30:40.740
That's cool, right?

00:30:40.740 --> 00:30:43.740
So you just do watch files and you run the string,

00:30:43.740 --> 00:30:46.740
pytest - - lf, which is pytest, rerun the failing tests.

00:30:46.740 --> 00:30:47.740
If anything changes.

00:30:47.740 --> 00:30:49.740
I think that's neat.

00:30:49.740 --> 00:30:52.740
The, the, the command line stuff is actually cool.

00:30:52.740 --> 00:30:57.740
I, I, I check it out just for the command line usage, but the, the ability to use it

00:30:57.740 --> 00:31:00.740
programmatically too with an API, that's impressive.

00:31:00.740 --> 00:31:02.740
And I'm, I'm very happy they included that.

00:31:02.740 --> 00:31:03.740
Yeah, absolutely.

00:31:03.740 --> 00:31:08.740
This is, if you're going to use it through the CLI, this is the perfect pip X install type thing, right?

00:31:08.740 --> 00:31:09.740
Yeah.

00:31:09.740 --> 00:31:10.740
Pip X install watch files.

00:31:10.740 --> 00:31:11.740
And it's not really tied to any of your projects.

00:31:11.740 --> 00:31:12.740
It's just always there.

00:31:12.740 --> 00:31:13.740
Anna, what do you think?

00:31:13.740 --> 00:31:15.740
Yeah, but that, that looks super neat.

00:31:15.740 --> 00:31:22.740
Um, just made me immediately think about, file triggers that are one of the things

00:31:22.740 --> 00:31:27.740
that it's built in mostly, or at least widely used in, you know, and, cloud storage as well.

00:31:27.740 --> 00:31:28.740
Yeah.

00:31:28.740 --> 00:31:29.740
And it's like, yep.

00:31:29.740 --> 00:31:32.740
I can imagine like all the possible ways that it can be used.

00:31:32.740 --> 00:31:33.740
So yeah, that's really neat.

00:31:33.740 --> 00:31:34.740
Yeah.

00:31:34.740 --> 00:31:39.740
I wonder if they, in their documentation, they actually provide any popular use features or anything.

00:31:39.740 --> 00:31:43.740
They might not do that, but I'm curious if they actually do.

00:31:43.740 --> 00:31:44.740
Yeah.

00:31:44.740 --> 00:31:49.740
I didn't see any, any in particular, just a couple of examples on how you might use it and all, but yeah.

00:31:49.740 --> 00:31:50.740
Yeah.

00:31:50.740 --> 00:31:52.740
There's an older project called watch God.

00:31:52.740 --> 00:31:56.740
I don't know anything about that one, but I'm glad I didn't learn about it.

00:31:56.740 --> 00:31:58.740
Cause now there's a new one called watch files.

00:31:58.740 --> 00:32:01.740
But if you use an old one, this is the successor to that as well.

00:32:01.740 --> 00:32:05.740
It's a funny name, but I could see why some people might not want to use it.

00:32:05.740 --> 00:32:08.740
So yeah, well, I can see item one, right?

00:32:08.740 --> 00:32:10.740
Pick a name that people are willing to talk about.

00:32:10.740 --> 00:32:11.740
Exactly.

00:32:11.740 --> 00:32:12.740
Yeah.

00:32:12.740 --> 00:32:15.740
Well, I want to talk about a new tool as well.

00:32:15.740 --> 00:32:16.740
Coverage, not.

00:32:16.740 --> 00:32:20.740
So hopefully all of us are familiar with coverage.py.

00:32:20.740 --> 00:32:27.740
So it's maintained by Ned Batchelder, a really cool tool, but there's a new guy on the scene

00:32:27.740 --> 00:32:30.740
and the new person on the scene is slip cover.

00:32:30.740 --> 00:32:31.740
So slip cover.

00:32:31.740 --> 00:32:37.740
And actually I heard about slip cover through the coverage.py Twitter account, which was interesting.

00:32:37.740 --> 00:32:40.740
And so not surprising though.

00:32:40.740 --> 00:32:42.740
Ned's a pretty open-minded guy.

00:32:42.740 --> 00:32:43.740
Okay.

00:32:43.740 --> 00:32:49.740
Um, but, so slip cover is, is coverage, but it's, it's pretty new.

00:32:49.740 --> 00:32:53.740
So some of these, commits that's just within the last week or so that things, this came in.

00:32:53.740 --> 00:32:59.740
So there's a, it's still at like, I think the version is 0.1.1 or something like that.

00:32:59.740 --> 00:33:02.740
Um, you even just got a new one out this morning.

00:33:02.740 --> 00:33:05.740
So why would you want to use something different?

00:33:05.740 --> 00:33:10.740
Well, the, the, the big selling point of this is it's really fast.

00:33:10.740 --> 00:33:16.740
It uses a different, a different process for, for getting the coverage information.

00:33:16.740 --> 00:33:23.740
And it supposedly is only a 3% overhead, which, depending on your code coverage that probably

00:33:23.740 --> 00:33:28.740
can be, can sometimes slow down your code, significantly.

00:33:28.740 --> 00:33:35.740
Um, and if you've got a really long running test suite, making it even 20% faster, but sometimes

00:33:35.740 --> 00:33:37.740
coverage can make it like twice as slow.

00:33:37.740 --> 00:33:42.740
Um, so if, if you've got a five minute test suite that makes it 10 minutes and that's a little

00:33:42.740 --> 00:33:43.740
painful.

00:33:43.740 --> 00:33:45.740
So, this might be worth checking out.

00:33:45.740 --> 00:33:46.740
It's quite a bit faster.

00:33:46.740 --> 00:33:52.740
I tried it against flask, as an example and the, the flask numbers.

00:33:52.740 --> 00:33:58.740
Um, so flask is, they've got a pretty tight test suite anyway, but, so just straight

00:33:58.740 --> 00:33:59.740
pie test on my machine.

00:33:59.740 --> 00:34:01.740
It was like 2.7 seconds.

00:34:01.740 --> 00:34:05.740
Um, with coverage was, about four, 4.3 seconds.

00:34:05.740 --> 00:34:09.740
Um, and then with slip cover, it was just a little slower than just pie test.

00:34:09.740 --> 00:34:12.740
So pie test 2.7 with slip covers 2.88.

00:34:12.740 --> 00:34:15.740
So just a little tiny bit more and you get coverage information.

00:34:15.740 --> 00:34:16.740
That's pretty cool.

00:34:16.740 --> 00:34:19.740
Um, it is in the early stages though.

00:34:19.740 --> 00:34:23.740
There's some, there's some kinks to work out still.

00:34:23.740 --> 00:34:25.740
So, I would try it out and watch this space.

00:34:25.740 --> 00:34:27.740
Um, I think they're doing some really cool things.

00:34:27.740 --> 00:34:28.740
Definitely worth watching.

00:34:28.740 --> 00:34:35.740
But, like for instance, I ran into issues on projects that use pie test plugins.

00:34:35.740 --> 00:34:38.740
I don't know why, but the plugins don't get loaded.

00:34:38.740 --> 00:34:45.740
So the, like for instance, I tried to run this, this flask example, but with xdist,

00:34:45.740 --> 00:34:50.740
uh, so that I could run all the tests in parallel to see if it's sped up parallel runs.

00:34:50.740 --> 00:34:53.740
Also, it didn't recognize the parallelism.

00:34:53.740 --> 00:34:59.740
So I'm not sure what's going on there, but I am in communication with, Juan, one

00:34:59.740 --> 00:35:03.740
of the maintainers of this or, let them know what, what I found out.

00:35:03.740 --> 00:35:06.740
I'm not just griping, and not trying to make it better.

00:35:06.740 --> 00:35:08.740
I'd love to have this be a really cool tool.

00:35:08.740 --> 00:35:10.740
So it looks neat.

00:35:10.740 --> 00:35:11.740
Yeah.

00:35:11.740 --> 00:35:12.740
Go ahead, Anna.

00:35:12.740 --> 00:35:13.740
Yeah.

00:35:13.740 --> 00:35:20.740
And so the data near zero overhead is mostly due to how they, managed to, to provide that.

00:35:20.740 --> 00:35:22.740
Uh, we talk about the involved recommendations.

00:35:22.740 --> 00:35:24.740
It's really interesting.

00:35:24.740 --> 00:35:25.740
Yeah.

00:35:25.740 --> 00:35:26.740
Yeah.

00:35:26.740 --> 00:35:30.740
With such a little overhead, I'm tempted to think of a more diabolical use of it.

00:35:30.740 --> 00:35:35.740
Like I've got, I'm handed some crummy old app that doesn't really have tests.

00:35:35.740 --> 00:35:37.740
And I got to figure out, well, what part of this is dead?

00:35:37.740 --> 00:35:41.740
Cause I don't know if you've ever picked up some old app that's evolved and evolved.

00:35:41.740 --> 00:35:45.740
And there's just stuff people don't take out cause they're afraid to just run this in

00:35:45.740 --> 00:35:46.740
production for a while.

00:35:46.740 --> 00:35:47.740
Oh yeah.

00:35:47.740 --> 00:35:50.740
And just go, okay, these things don't look like they're doing it.

00:35:50.740 --> 00:35:54.740
I mean, there might be some case I need to track down, but this gray area over here,

00:35:54.740 --> 00:35:55.740
that's not touched.

00:35:55.740 --> 00:35:57.740
Let me look for things to delete over here.

00:35:57.740 --> 00:35:58.740
That'd be kind of fun.

00:35:58.740 --> 00:36:01.740
That's my favorite use of coverage is looking for dead code.

00:36:01.740 --> 00:36:02.740
Um, yeah, exactly.

00:36:02.740 --> 00:36:06.740
Uh, before we move off this, Brian of our ass, does it have a pie test plugin?

00:36:06.740 --> 00:36:10.740
I know you said it doesn't work to run plugins, but this is the reverse question.

00:36:10.740 --> 00:36:12.740
Um, I don't, I don't think so.

00:36:12.740 --> 00:36:17.740
So you're running, you're running a slip cover and pie test at the same time.

00:36:17.740 --> 00:36:20.740
I don't think you really need a pie test plugin for it.

00:36:20.740 --> 00:36:23.740
Um, it, I w it, it does run it work with pie tests.

00:36:23.740 --> 00:36:28.740
So you can run a pie test, operations on with it, but nice.

00:36:28.740 --> 00:36:30.740
Just not the bells and whistles yet.

00:36:30.740 --> 00:36:31.740
Right.

00:36:31.740 --> 00:36:32.740
Uh, but I'm sure they'll get there.

00:36:32.740 --> 00:36:33.740
Yep.

00:36:33.740 --> 00:36:36.740
I would love to sort of circle back to the, the, the data.

00:36:36.740 --> 00:36:37.740
Great.

00:36:37.740 --> 00:36:40.740
Sound like a perfect record, but that's my favorite topic.

00:36:40.740 --> 00:36:42.740
No, it's great to have you on to talk about it.

00:36:42.740 --> 00:36:45.740
Cause Brian and I don't live in the data science world.

00:36:45.740 --> 00:36:45.740
Right.

00:36:45.740 --> 00:36:46.740
So it's really cool.

00:36:46.740 --> 00:36:47.740
Yeah.

00:36:47.740 --> 00:36:50.740
Um, well, you're, you're welcome in our, in our world.

00:36:50.740 --> 00:36:52.740
There's a lot of fun stuff happening here.

00:36:52.740 --> 00:36:56.740
And, well, actually if you think about it from the actual, the very beginning, right.

00:36:56.740 --> 00:37:02.740
Even before trying to wrangle the data and trying to, for any interesting information

00:37:02.740 --> 00:37:05.740
of the data, you have to get it somehow.

00:37:05.740 --> 00:37:11.740
And, sometimes if you're like particularly working on some, sort of, side projects

00:37:11.740 --> 00:37:18.740
on your own, and you, you want to maybe try out a new tool or maybe new, you can, if you're

00:37:18.740 --> 00:37:24.740
doing like a, machine learning project on modeling approach, you usually need,

00:37:24.740 --> 00:37:28.740
um, some very specific data to, to work on.

00:37:28.740 --> 00:37:30.740
Um, and how do you get through the data?

00:37:30.740 --> 00:37:34.740
Well, you have to actually go and maybe find some examples of the data on your own.

00:37:34.740 --> 00:37:38.740
And so something I wanted to talk a little bit today was, actually webclawing,

00:37:38.740 --> 00:37:41.740
webclawing, webclawing and a couple of, tools for that.

00:37:41.740 --> 00:37:48.740
Um, so one that is, quite popular and it's actually like, industrial grade kind of tool

00:37:48.740 --> 00:37:56.740
is, well actually either scrapey or scrape by as for both, variants.

00:37:56.740 --> 00:37:57.740
Yeah.

00:37:57.740 --> 00:38:00.740
Um, and it is a pretty great tool.

00:38:00.740 --> 00:38:03.740
Um, so one of the great things that you're doing, you're doing, you're doing, you're

00:38:03.740 --> 00:38:04.740
a great tool.

00:38:04.740 --> 00:38:05.740
Yeah.

00:38:05.740 --> 00:38:09.740
One of the great things like from the get go about is that, it actually has a built

00:38:09.740 --> 00:38:10.740
in shell.

00:38:10.740 --> 00:38:16.740
Um, so you can just, go ahead and sort of try out things in the CLI, get response

00:38:16.740 --> 00:38:23.740
from a URL for instance, and then try to, look around it and then test out it behavior,

00:38:23.740 --> 00:38:24.740
which is really nice.

00:38:24.740 --> 00:38:27.740
And then see what kind of things you might want from there.

00:38:27.740 --> 00:38:32.740
Um, and if you're actually, sort of go ahead and, and, and use it, for your,

00:38:32.740 --> 00:38:39.740
uh, for your module to, to acquire, to get some data rather, it provides all sorts

00:38:39.740 --> 00:38:42.740
of, reunite functionality to begin with.

00:38:42.740 --> 00:38:48.740
Um, for instance, the, the choice between using other, there's a selectors for the, the, the,

00:38:48.740 --> 00:38:53.740
the content of the pages or an expat, which is, obviously a little bit more flexible.

00:38:53.740 --> 00:38:54.740
It's more flexible.

00:38:54.740 --> 00:38:55.740
Yeah.

00:38:55.740 --> 00:38:56.740
It's more fragile though.

00:38:56.740 --> 00:38:58.740
Cause if they make any change to the page.

00:38:58.740 --> 00:38:59.740
That also, yeah.

00:38:59.740 --> 00:39:00.740
Um, but so yeah.

00:39:00.740 --> 00:39:01.740
Well, it's part of the game.

00:39:01.740 --> 00:39:02.740
Yeah.

00:39:02.740 --> 00:39:03.740
Um, yeah.

00:39:03.740 --> 00:39:08.740
And then, some other really nice things about it is that actually, they do a lot

00:39:08.740 --> 00:39:11.740
of like heavy lifting for you in terms of translating.

00:39:11.740 --> 00:39:17.740
So you can, there's, built-in methods for start project and you can, you know, run

00:39:17.740 --> 00:39:23.740
that and right away you have the whole structure and by cost of the boilerplate, kind of code.

00:39:23.740 --> 00:39:26.740
You just fill in the, certain pieces for, I can processing, which is in there.

00:39:26.740 --> 00:39:27.740
I plan modules, you think some of the setting, et cetera.

00:39:27.740 --> 00:39:28.740
And, there you go.

00:39:28.740 --> 00:39:29.740
You know, I have like a huge amount of work already.

00:39:29.740 --> 00:39:32.740
So it's, pre set for you, pre done candidates for you.

00:39:32.740 --> 00:39:39.740
Um, and then, some other nice things about it is that, also provide you with, like,

00:39:39.740 --> 00:39:44.740
a, a, pre set for you, pre done candidates for you.

00:39:44.740 --> 00:39:52.740
Um, and then, some other nice things about it is that, also provide you with, like,

00:39:52.740 --> 00:39:59.740
um, numerous choices actually for, exporting the data and for storing the data as well.

00:39:59.740 --> 00:40:04.740
I mean, in a few places and the format that you would love to, to use for it.

00:40:04.740 --> 00:40:13.740
Um, but all the typical standard things like PSA, JSON, some more, some, some left frequent options.

00:40:13.740 --> 00:40:14.740
Yeah.

00:40:14.740 --> 00:40:21.740
Another thing that's pretty interesting about this whole project is that there's a web scraping as a service company.

00:40:21.740 --> 00:40:22.740
Yeah.

00:40:22.740 --> 00:40:26.740
Behind it. Right. It used to be called scraping hub. Now it's Zite, Z-Y-T-E.

00:40:26.740 --> 00:40:27.740
Zite.

00:40:27.740 --> 00:40:27.740
Yep.

00:40:27.740 --> 00:40:38.740
And you can basically, you can basically go in there and just, you know, sign up and hand it one of these, these, spiders and it'll just run it on the different servers, try to avoid getting blocked, all that crazy stuff.

00:40:38.740 --> 00:40:55.740
Exactly. Yeah. so, therefore it's so elaborate and they really put a lot of, just like I was talking before, a lot of, loving carrots, like all those sorts of, functionality, like covering all those corners of like what you might want from, it's a web crawling, tool. and some other examples that, I found particularly useful for instance, the link extractor class is like really getting to like reading.

00:40:55.740 --> 00:40:57.740
You know, parts of the tool where you can, extract further links from the page. but don't need those ones that, you know, to hear to a particular pattern for instance. and the list that you get is already. so once again,

00:40:57.740 --> 00:40:58.980
tool.

00:40:58.980 --> 00:41:01.160
Some other examples that

00:41:01.160 --> 00:41:03.740
I found particularly useful, for instance,

00:41:03.740 --> 00:41:05.780
is the link extractor

00:41:05.780 --> 00:41:07.640
class is really getting to

00:41:07.640 --> 00:41:09.420
need reading parts of

00:41:09.420 --> 00:41:11.400
the tool where you can

00:41:11.400 --> 00:41:13.580
extract further links

00:41:13.580 --> 00:41:14.460
from a page,

00:41:14.460 --> 00:41:16.880
but don't use those ones that

00:41:16.880 --> 00:41:19.400
adhere to a particular pattern, for instance.

00:41:19.400 --> 00:41:21.060
And

00:41:21.060 --> 00:41:23.200
the list that you get is already

00:41:23.200 --> 00:41:25.000
decouped. So

00:41:25.000 --> 00:41:26.520
once again, it's already

00:41:26.520 --> 00:41:28.320
so much of the

00:41:28.320 --> 00:41:30.260
dirty work on your part.

00:41:30.260 --> 00:41:32.760
So that's really great. And they

00:41:32.760 --> 00:41:34.420
do provide, actually,

00:41:34.420 --> 00:41:36.880
ways to interact with

00:41:36.880 --> 00:41:38.440
the pages as well. There's a

00:41:38.440 --> 00:41:40.420
format class that you can use

00:41:40.420 --> 00:41:41.200
as it does

00:41:41.200 --> 00:41:44.740
provide some functionality where you can interact with the page,

00:41:44.740 --> 00:41:46.500
but I haven't used

00:41:46.500 --> 00:41:48.400
it as much myself, so

00:41:48.400 --> 00:41:50.740
I can barely show how

00:41:50.740 --> 00:41:51.920
fascinating it is.

00:41:51.920 --> 00:41:54.920
But it's probably well done

00:41:54.920 --> 00:41:57.400
as well. And another

00:41:57.400 --> 00:41:59.060
library that I wanted

00:41:59.060 --> 00:42:00.620
to touch on briefly

00:42:00.620 --> 00:42:02.060
today as well was

00:42:02.060 --> 00:42:04.740
Robux. That's actually something

00:42:04.740 --> 00:42:06.720
new for MacBoss. That's

00:42:06.720 --> 00:42:08.960
something I'm in the

00:42:08.960 --> 00:42:10.240
process of exploring,

00:42:10.240 --> 00:42:11.120
so I haven't

00:42:11.120 --> 00:42:14.200
had a chance to work a whole lot

00:42:14.200 --> 00:42:14.840
with it yet.

00:42:14.840 --> 00:42:17.360
But it's been really, really interesting,

00:42:17.600 --> 00:42:19.580
and I would love, I would be happy if, you know,

00:42:19.580 --> 00:42:21.740
I got to hear from somebody else to write it out

00:42:21.740 --> 00:42:22.160
or something.

00:42:22.160 --> 00:42:25.800
Because it, well, in the first place,

00:42:25.800 --> 00:42:27.800
it's still some type of

00:42:27.800 --> 00:42:30.440
HTTPX and beautiful soup,

00:42:30.440 --> 00:42:32.060
beautiful soup 4, rather.

00:42:32.060 --> 00:42:33.640
They're super popular

00:42:33.640 --> 00:42:36.200
in sort of the data

00:42:36.200 --> 00:42:37.780
processing line of work

00:42:37.780 --> 00:42:38.920
and particularly web

00:42:38.920 --> 00:42:41.160
and web scraping.

00:42:41.160 --> 00:42:44.860
But it adds

00:42:44.860 --> 00:42:45.720
some, you know,

00:42:45.720 --> 00:42:46.400
really useful

00:42:46.400 --> 00:42:47.300
functionalities,

00:42:47.300 --> 00:42:48.620
and it looks like it

00:42:48.620 --> 00:42:50.200
allows even more

00:42:50.200 --> 00:42:51.100
of this interruption

00:42:51.100 --> 00:42:52.600
with the pages

00:42:52.600 --> 00:42:53.300
in a, like,

00:42:53.300 --> 00:42:54.320
very neat

00:42:54.320 --> 00:42:55.360
and clean way.

00:42:55.360 --> 00:42:57.340
And you can probably

00:42:57.340 --> 00:42:58.780
find examples

00:42:58.780 --> 00:42:59.640
where you're here

00:42:59.640 --> 00:43:01.160
in the documentation.

00:43:01.160 --> 00:43:03.080
It looks so, you know,

00:43:03.080 --> 00:43:04.100
nice and clean

00:43:04.100 --> 00:43:04.900
and straightforward.

00:43:05.260 --> 00:43:06.080
looks lovely.

00:43:06.080 --> 00:43:07.440
So, yeah,

00:43:07.440 --> 00:43:08.280
I'm really excited

00:43:08.280 --> 00:43:09.000
about this package.

00:43:09.000 --> 00:43:10.700
I'm hoping to

00:43:10.700 --> 00:43:11.480
have an opportunity

00:43:11.480 --> 00:43:12.880
to test it out

00:43:12.880 --> 00:43:13.840
soon.

00:43:13.840 --> 00:43:15.480
Yeah, Roblox looks very interesting.

00:43:15.480 --> 00:43:16.220
It looks very

00:43:16.220 --> 00:43:18.040
Selenium-like

00:43:18.040 --> 00:43:18.700
where you can actually

00:43:18.700 --> 00:43:19.540
control the page

00:43:19.540 --> 00:43:19.980
as well,

00:43:19.980 --> 00:43:20.900
like, fill in this,

00:43:20.900 --> 00:43:22.160
fill in the comments with this,

00:43:22.160 --> 00:43:23.580
fill in the first name

00:43:23.580 --> 00:43:24.000
with that,

00:43:24.000 --> 00:43:24.700
and then submit.

00:43:24.700 --> 00:43:25.500
The other thing

00:43:25.500 --> 00:43:26.120
that's cool about it

00:43:26.120 --> 00:43:26.800
is it has

00:43:26.800 --> 00:43:28.160
async support

00:43:28.160 --> 00:43:29.000
for doing all those things.

00:43:29.000 --> 00:43:29.740
Exactly, yeah.

00:43:29.740 --> 00:43:30.680
You can scale it.

00:43:30.680 --> 00:43:32.300
Yeah, that's fantastic.

00:43:32.300 --> 00:43:32.860
Awesome.

00:43:32.860 --> 00:43:34.000
Thanks.

00:43:34.000 --> 00:43:34.820
Nice.

00:43:35.140 --> 00:43:36.920
Well, where are we at now?

00:43:36.920 --> 00:43:37.380
We have

00:43:37.380 --> 00:43:38.300
Extras.

00:43:38.300 --> 00:43:39.060
Extras.

00:43:39.060 --> 00:43:39.840
Extra, extra, extra.

00:43:39.840 --> 00:43:40.600
Here all about it.

00:43:40.600 --> 00:43:41.460
I only got one.

00:43:41.460 --> 00:43:41.980
How many you got?

00:43:41.980 --> 00:43:42.820
I got zero.

00:43:42.820 --> 00:43:43.520
Zero.

00:43:43.520 --> 00:43:44.220
All right.

00:43:44.220 --> 00:43:45.760
And anything else

00:43:45.760 --> 00:43:46.380
you want to give a quick

00:43:46.380 --> 00:43:46.860
shout out to

00:43:46.860 --> 00:43:47.480
while we're here?

00:43:47.480 --> 00:43:48.140
No.

00:43:48.140 --> 00:43:48.680
No?

00:43:48.680 --> 00:43:49.400
Okay, cool.

00:43:49.400 --> 00:43:50.780
Well, I wanted to tell you

00:43:50.780 --> 00:43:51.660
all about

00:43:51.660 --> 00:43:54.240
my terminal adventures,

00:43:54.240 --> 00:43:55.320
I suppose we'll call them.

00:43:55.320 --> 00:43:56.660
So I've been using

00:43:56.660 --> 00:43:57.460
Oh My Z Shell,

00:43:57.460 --> 00:43:58.480
which is amazing.

00:43:58.480 --> 00:44:00.100
I love Oh My Z Shell.

00:44:00.100 --> 00:44:01.220
But I also started

00:44:01.220 --> 00:44:02.460
playing with Oh My Posh

00:44:02.460 --> 00:44:04.320
and Please

00:44:04.320 --> 00:44:04.940
and some of these

00:44:04.940 --> 00:44:05.560
other things.

00:44:05.560 --> 00:44:06.120
And I thought,

00:44:06.120 --> 00:44:06.620
oh, well,

00:44:06.620 --> 00:44:07.780
how am I going to decide

00:44:07.780 --> 00:44:09.400
between say Oh My Posh

00:44:09.400 --> 00:44:10.200
and Oh My Z Shell?

00:44:10.200 --> 00:44:11.520
Well, it turns out, Brian,

00:44:11.520 --> 00:44:12.700
you don't have to decide.

00:44:12.700 --> 00:44:13.500
You get both.

00:44:13.500 --> 00:44:14.380
So here's a little

00:44:14.380 --> 00:44:15.780
animated video

00:44:15.780 --> 00:44:16.380
I'll throw up

00:44:16.380 --> 00:44:17.380
for people who are watching

00:44:17.380 --> 00:44:18.140
and I'll put it

00:44:18.140 --> 00:44:18.700
in the links as well.

00:44:18.700 --> 00:44:19.680
So here's,

00:44:19.680 --> 00:44:21.120
you can see this cool

00:44:21.120 --> 00:44:22.240
prompt,

00:44:22.240 --> 00:44:22.900
which is all driven

00:44:22.900 --> 00:44:23.740
by Oh My Posh,

00:44:23.740 --> 00:44:24.280
but you can see

00:44:24.280 --> 00:44:25.700
like auto-complete

00:44:25.700 --> 00:44:27.300
into local Git branches

00:44:27.300 --> 00:44:28.880
through Oh My Z Shell

00:44:28.880 --> 00:44:30.160
for either branch

00:44:30.160 --> 00:44:30.880
or checkout.

00:44:30.880 --> 00:44:33.040
And then on top of that,

00:44:33.040 --> 00:44:35.040
we can do like PLS,

00:44:35.040 --> 00:44:36.060
which is amazing.

00:44:36.060 --> 00:44:36.440
You can do,

00:44:36.440 --> 00:44:37.300
oh, and McFly.

00:44:37.300 --> 00:44:38.740
We talked about McFly before,

00:44:38.740 --> 00:44:39.260
which gives you

00:44:39.260 --> 00:44:40.560
auto-complete into your history

00:44:40.560 --> 00:44:42.340
and sort of a Emacs style

00:44:42.340 --> 00:44:45.100
editor type of AI complete.

00:44:45.100 --> 00:44:48.380
Then PLS for LS replacement

00:44:48.380 --> 00:44:50.440
that is developer friendly

00:44:50.440 --> 00:44:51.600
with like little icons

00:44:51.600 --> 00:44:52.800
for the file types

00:44:52.800 --> 00:44:54.020
and it uses Git ignore

00:44:54.020 --> 00:44:54.840
to hide stuff

00:44:54.840 --> 00:44:55.920
that you don't want to see.

00:44:55.920 --> 00:44:57.200
And it's like Python friendly,

00:44:57.200 --> 00:44:58.580
like understands V and Vs

00:44:58.580 --> 00:45:00.180
and de-emphasizes them

00:45:00.180 --> 00:45:01.180
and all that kind of stuff.

00:45:01.180 --> 00:45:02.060
So anyway,

00:45:02.060 --> 00:45:03.740
people have been trying

00:45:03.740 --> 00:45:04.920
to decide between these things.

00:45:04.920 --> 00:45:05.420
It turns out

00:45:05.420 --> 00:45:06.540
they all go well together.

00:45:06.540 --> 00:45:07.680
You don't have to decide.

00:45:07.680 --> 00:45:09.120
That's pretty cool.

00:45:09.120 --> 00:45:09.640
Yeah.

00:45:09.640 --> 00:45:10.040
Yeah.

00:45:10.040 --> 00:45:10.760
Yeah.

00:45:10.760 --> 00:45:11.820
I really go with VSH

00:45:11.820 --> 00:45:13.600
and that looks even,

00:45:13.600 --> 00:45:14.060
yeah.

00:45:14.060 --> 00:45:14.620
Yeah.

00:45:14.620 --> 00:45:15.680
All the stuff that works,

00:45:15.680 --> 00:45:17.020
you don't have to give up any of it.

00:45:17.020 --> 00:45:18.200
The only thing that isn't there

00:45:18.200 --> 00:45:19.080
is the prompt

00:45:19.080 --> 00:45:19.920
and the prompt is not

00:45:19.920 --> 00:45:20.520
all that great,

00:45:20.520 --> 00:45:21.120
honestly.

00:45:21.120 --> 00:45:21.360
I mean,

00:45:21.360 --> 00:45:22.540
I know you can customize it,

00:45:22.540 --> 00:45:23.280
but I think it's better

00:45:23.280 --> 00:45:23.960
in Oh My Posh,

00:45:23.960 --> 00:45:25.280
which is pretty amazing.

00:45:25.280 --> 00:45:26.820
So people who are listening,

00:45:26.920 --> 00:45:27.480
they can check out

00:45:27.480 --> 00:45:28.000
the little video.

00:45:28.000 --> 00:45:29.080
I'll link to somehow

00:45:29.080 --> 00:45:30.480
find a way to do that

00:45:30.480 --> 00:45:32.500
in the show notes

00:45:32.500 --> 00:45:33.400
so you all can check it out.

00:45:33.400 --> 00:45:33.700
Okay.

00:45:33.700 --> 00:45:34.680
That's my extra.

00:45:34.680 --> 00:45:35.500
Yeah.

00:45:35.500 --> 00:45:36.120
Yeah.

00:45:36.120 --> 00:45:37.120
How about a joke?

00:45:37.120 --> 00:45:37.460
And I guess,

00:45:37.460 --> 00:45:38.780
how about a joke?

00:45:39.340 --> 00:45:40.960
So we're all starting

00:45:40.960 --> 00:45:41.960
to go back out to dinner,

00:45:41.960 --> 00:45:43.400
restaurants,

00:45:43.400 --> 00:45:44.360
COVID's over,

00:45:44.360 --> 00:45:44.800
I hear,

00:45:44.800 --> 00:45:45.520
not necessarily,

00:45:45.520 --> 00:45:47.000
but here's one

00:45:47.000 --> 00:45:48.920
from a slightly different perspective.

00:45:48.920 --> 00:45:49.560
It says,

00:45:49.560 --> 00:45:49.780
hello,

00:45:49.780 --> 00:45:50.960
I'm your server today.

00:45:50.960 --> 00:45:51.760
Brian,

00:45:51.760 --> 00:45:52.660
can you just describe

00:45:52.660 --> 00:45:53.400
for people listening

00:45:53.400 --> 00:45:54.440
what's in this picture?

00:45:54.680 --> 00:45:56.140
there's two robots

00:45:56.140 --> 00:45:57.980
at a restaurant

00:45:57.980 --> 00:45:58.720
sitting down

00:45:58.720 --> 00:46:01.340
and there's a server rack

00:46:01.340 --> 00:46:02.080
next to them.

00:46:02.080 --> 00:46:03.280
Yeah.

00:46:03.280 --> 00:46:03.540
Okay.

00:46:03.540 --> 00:46:04.620
And the subtitle is

00:46:04.620 --> 00:46:05.160
when you go out

00:46:05.160 --> 00:46:05.780
for a bite,

00:46:05.780 --> 00:46:06.500
B-Y-T,

00:46:06.500 --> 00:46:06.820
he says,

00:46:06.820 --> 00:46:08.200
the server

00:46:08.200 --> 00:46:09.460
is by the table

00:46:09.460 --> 00:46:10.080
where the robots

00:46:10.080 --> 00:46:10.400
are drinking.

00:46:10.400 --> 00:46:10.640
He says,

00:46:10.640 --> 00:46:11.380
my name is

00:46:11.380 --> 00:46:13.540
D-H-X-005972

00:46:13.540 --> 00:46:14.240
and I will be

00:46:14.240 --> 00:46:15.260
your server this evening.

00:46:15.260 --> 00:46:17.280
I'll follow this one.

00:46:17.280 --> 00:46:18.440
Thanks.

00:46:18.440 --> 00:46:20.120
All right.

00:46:20.120 --> 00:46:21.160
That's what I got for us

00:46:21.160 --> 00:46:21.920
for our joke today.

00:46:21.920 --> 00:46:22.600
Nice.

00:46:22.600 --> 00:46:23.780
Well,

00:46:23.780 --> 00:46:24.000
thanks,

00:46:24.000 --> 00:46:24.200
Anna,

00:46:24.200 --> 00:46:26.080
for joining us today.

00:46:26.080 --> 00:46:26.980
Thank you.

00:46:26.980 --> 00:46:28.520
Thank you for having me.

00:46:28.520 --> 00:46:28.980
Yeah,

00:46:28.980 --> 00:46:29.320
it was great.

00:46:29.320 --> 00:46:29.720
Thank you,

00:46:29.720 --> 00:46:29.920
Brian,

00:46:29.920 --> 00:46:30.320
as always,

00:46:30.320 --> 00:46:30.940
and everyone out there

00:46:30.940 --> 00:46:31.220
listening.

00:46:31.220 --> 00:46:32.060
Thanks so much.

00:46:32.060 --> 00:46:33.480
Very good on our own.

