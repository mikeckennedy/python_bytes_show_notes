00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04 your earbuds. This is episode 143, recorded August 7th, 2019. I'm Michael Kennedy.

00:00:10 And I'm Brian Okken.

00:00:11 And Brian, we have a special guest this week.

00:00:13 Yeah, very special.

00:00:14 Yeah, Kelly Schuster-Perez. Welcome, Kelly.

00:00:17 Thank you. Thank you for having me.

00:00:18 It's great to have you here. I know you do a lot of podcasting, but you can do a little

00:00:22 podcasting with us in addition to that, huh?

00:00:24 It's very exciting. I've become quite an expert now at podcasting, I think, with my whole

00:00:29 25 or 26 episodes.

00:00:31 I would say, I don't know, Brian, what do you think? What's the major milestone you got to

00:00:35 cross? 10? After 10, you're kind of in?

00:00:38 Yeah, I think so. I don't think I'm worried about these guys. They're pretty dedicated, I think.

00:00:42 Yeah, definitely. You all seem to be going strong. So we'll talk more about your podcast at the end.

00:00:47 I'll let you get a word in about that and tell everyone. I also want to tell you that this episode

00:00:52 is brought to you by DigitalOcean. Check them out at pythonbytes.fm/DigitalOcean. Get a $50

00:00:57 credit for new users. Lots of good stuff there. Tell you more about that as well.

00:01:01 Brian, you want to kick us off with a keynote?

00:01:03 Yeah. So we don't often, there's a lot of great videos out there and sometimes we'll

00:01:07 recommend people that mention when new conference videos show up. So I don't even really know what

00:01:14 PyLondinium? PyLondinium19. I'm guessing that's a London Python conference.

00:01:19 Yeah, that or it's a new element discovered out far at the far end of the elemental table there.

00:01:25 But it sounds cool. I saw a couple people recommending this video by Lucas Lange,

00:01:30 his keynote about Python 2020. So that's just looking forward a little bit. It's a keynote,

00:01:37 so it's kind of a long talk. It's about an hour-ish. It was really interesting and it's

00:01:42 interesting on a lot of fronts. And what I want to highlight is he gets into that it is important for

00:01:48 us to try to get Python on multiple platforms and not just on the desktop or on the back end.

00:01:55 There's other platforms specifically like web, front-end stuff, 3D games, system orchestration,

00:02:02 mobile platforms that have other languages that are used more than Python. The question is really,

00:02:08 maybe we can get there if we don't limit ourselves to the same implementation as CPython, that maybe we

00:02:14 limit the implementation. And as an example, MicroPython and CircuitPython are very successful

00:02:21 and they are limited implementations. They don't do everything that Python can do.

00:02:26 Right. Those run on little tiny embedded chips, right? Like $5 chips. And so you can't put all

00:02:32 of CPython into that little tiny thing and expect it to behave well. So you've got like this, as you

00:02:38 said, limited one. And yeah, maybe that does make sense. We kind of have a limited one for the web

00:02:42 front-end, right? We've got Sculpt and Brython and some of those things as well. But I don't feel like

00:02:48 it's, maybe it's not limited enough because those are pretty massive downloads for your JavaScript.

00:02:53 But I think this is a really important message. And I think the idea of some kind of limited

00:02:59 thing is quite interesting. You know, we had the conversation or the debate at the Core Developer

00:03:06 Language Summit and around that about what do we maybe take out of Python or how do we create like a

00:03:11 minimum subset of Python? It seems like this is kind of part of that conversation.

00:03:16 The discussion even talked about things that I hadn't even thought about before. Like,

00:03:20 if you're controlling, like you would on JavaScript, you're controlling, it gets compiled down into

00:03:26 modern JavaScript now gets compiled down into something that isn't the same as what people

00:03:31 wrote it in that gets delivered to the end user. And things that, like for instance, massive imports,

00:03:38 maybe we don't need the same flexibility of the import system for a web front-end stuff. And it also reminded me of,

00:03:46 of how like C and C++ went, because there are many other compilers of C and C++, not just visual, like Visual Studio or GCC,

00:03:58 that are targeted. Because I, like you were saying, for different limitations, I've worked on platforms that really still felt like C++,

00:04:05 C++, but like they threw out the template system. You can't use that.

00:04:08 Sure.

00:04:09 He was even bringing up things like that I didn't think about, like monkey patching. Maybe we don't allow monkey patching for some cases. And I think this is a great idea.

00:04:17 It's definitely an interesting idea and worth thinking about. Kelly, you do a lot with education. Your main day job is teaching kids and programming and stuff, yeah?

00:04:26 Yes, that's correct. And we use MicroPython and CircuitPython. And I actually watched some of the keynote and I found it kind of interesting how he scrolled through the documentation. And I don't really get into that conversation with the kids on where it's coming from. I always tell them that some smart guys and girls have like put all this information in there.

00:04:46 And we don't have to worry about that. And in some cases, it's great because we can only do that limited amount. And it's fast. And I think there should be more of it.

00:04:56 What parts of programming is relevant for education and younger kids learning, do you think? What stuff doesn't matter? What stuff matters to them? What kind of programs do you teach them? Or what kind of projects do you give them, I guess?

00:05:08 Right now, the physical computing is really big because it's that instantaneous gratification. A lot of kids don't want to code 200, 300, 400 lines of code before something happens. So that old school thought of, oh, we're going to build an app or a game is just out of the question, I think, right now, because the kids want something, they want to code and they want it to happen.

00:05:29 So we particularly work on hard, you know, physical computing or a little bit of instantaneous activities.

00:05:35 Yeah. So Adafruit stuff, things like these little Circuit Express and so on, that kind of thing.

00:05:40 Correct. And the ESP and the BBC Microbit and Lego and stuff that we're going to talk about later.

00:05:46 Yeah. Very cool. What age group is that?

00:05:49 We currently are working with 10-year-olds to 13, 14-year-olds. And then as they go up higher, then they're getting more deep into Python and AI and TensorFlow and things like that.

00:06:00 Wow. That sounds like a way cooler education than I had.

00:06:03 It's totally cooler than what I had. I didn't grow up on this stuff.

00:06:08 Yeah. Amazing. That dovetails really well into what you want to talk about next. So tell us about Mew.

00:06:13 Oh, yeah. So Code with Mew is a software that was created by Nicholas Tolerbe.

00:06:18 And what's so great about Nick is that he's a former teacher. He's a music teacher.

00:06:23 And he's developed this code editor that is specifically for beginner programmers.

00:06:30 And it's a modal editor, whereas the kids can go and click on a mode and code in BBC Microbit, code in CircuitPython, code in ESP, PyGame.

00:06:42 He just added Flask. And the kids can click on it and it kind of packages everything.

00:06:47 So we don't have to worry about slower processing and all these nice little from import, microbit, everything.

00:06:55 It's right there in that package. And it just bundles things up with simplicity.

00:07:01 A lot of, you know, when you work in another editor like PyCharm, there's so much going on for newcomers.

00:07:07 You don't know where to go. With Mew, it just has these buttons and you can click, check for updates, save, flash, put on a REPL.

00:07:14 It's just a great little package.

00:07:17 Yeah, it's incredible. And it really reminds me or makes me think this is kind of what Idle should be.

00:07:23 The Idle editor that's built in is like kind of meant there to be like a little helpful editor, but it seems like it just doesn't help enough.

00:07:30 And this really brings together kind of a similar philosophy, but really making so many things easy to get started with.

00:07:36 And like you said, these modes you can put it into. It's very great.

00:07:40 All the books that are out there always tell you to install Idle or to go there and get Python.

00:07:45 But it's really not something that a newcomer like myself who just started coding, it's not intuitive.

00:07:51 So with using Mew, you're able to just jump in and start coding right away.

00:07:55 So it's great. And what I love about it is he's constantly updating.

00:07:59 He just released a mode called Flask for the kids so that they can start making some short web apps.

00:08:06 And he presented at EuroPython and he released a whole bunch of new alpha features of Mew, which I think is great because he's not afraid of just throwing something out or pre-alpha.

00:08:17 And he just lets everyone get on there and train. So it's pretty cool.

00:08:21 It's so exciting that Flask is on there. And the Flask, it can run on these little devices. Is that right?

00:08:26 It just runs on the desktop.

00:08:28 Yeah, I think it's really great to make it just, you know, a mode and then the kids can just start writing Flask apps.

00:08:33 Do they want to have a website? Well, here you go.

00:08:36 You flip the switch on and it's really great.

00:08:38 Yeah. And he just tweeted out literally like 30 minutes ago that he released a project he started two days ago called PiperCard,

00:08:45 which is a HyperCard inspired GUI framework based on what Adafruit had released.

00:08:51 And when I mentioned to my co-worker, Sean, about HyperCard, he's like, oh, I hated HyperCard.

00:08:57 I don't remember. I don't know if you guys used HyperCard back in the days.

00:09:02 I don't know if you guys were around.

00:09:04 I only know it in lore. I have never used it.

00:09:07 It's like in 1980s. So that might be dating some of us.

00:09:11 But what it does is he just released a it's called PiperCard.

00:09:16 And he's asking for feedback on it.

00:09:18 And you can run it through Moo by just going into the toggle, the little cog on the bottom right and install PiperCard.

00:09:25 And then you can run it in the Python 3 mode.

00:09:27 I can't wait to get my hands on it. And I just had a little bit of a play just a few seconds ago.

00:09:31 That's exciting. Anything that contributes to the GUI story in Python makes me happy.

00:09:35 It helps with that instant gratification for the kids.

00:09:38 You know, you can click on that button and then so that they can type something and get in there.

00:09:41 It's just great.

00:09:42 Yeah, absolutely. Brian, you're a fan of Moo, right?

00:09:45 Moo?

00:09:45 Yeah, I'm really excited to try the Flask and the PiperCard. It looks really fun.

00:09:49 And also CircuitPython. I want to get my daughter started working on CircuitPython.

00:09:55 And the serial output, how to configure that is not hard, but it's not something I can expect a nine-year-old to do.

00:10:02 But within the Mu editor, it just does it. It hooks up to it automatically.

00:10:08 Yeah, you should check out the alpha release that they launched at EuroPython.

00:10:13 And he has the ESP MicroPython on there as well, which is a board from Adafruit.

00:10:19 Yeah, super cool. I'm really happy that project exists.

00:10:23 So let's keep with the theme a little bit in this helping beginners.

00:10:26 There's a cool article that I want to reference and then just talk about some things here.

00:10:32 So there's an article called Understanding the Python Traceback.

00:10:35 And this is on RealPython, written by Chad Henson.

00:10:38 And I'm pretty sure one of the first experiences any new programmer has is being confronted with this traceback.

00:10:46 Some kind of error, probably syntax error, but maybe not, right?

00:10:49 It could be some other kind of runtime error.

00:10:51 But you get this giant dump of information.

00:10:53 And it's like, what is all of this?

00:10:56 And I just wanted to highlight this article and talk a little bit about some of the things it covers.

00:11:00 Because there is a wealth of information in the traceback.

00:11:04 And depending on the tools you're using, the tools maybe understand that.

00:11:08 And they can allow you to navigate different parts of your application by turning various things into hyperlinks and stuff like that.

00:11:15 So if you get a traceback, what do you learn right away?

00:11:17 You learn the type of error, attribute error, key error, something like that.

00:11:21 A description of the error, hopefully, sometimes.

00:11:24 The line of code that the error occurred on.

00:11:27 Usually, like, actually the syntax that that error was on.

00:11:30 The call stack.

00:11:32 And for, you know, the file names.

00:11:34 The line numbers.

00:11:34 The module names.

00:11:36 And even if that happened while handling some other error, right?

00:11:40 Some exception caused another exception to happen or things like that.

00:11:43 So really, really nice.

00:11:44 I think there's even some plug-in on PyPI that, like, colorizes this.

00:11:51 I can't entirely remember.

00:11:52 It might be a pytest extension, Brian.

00:11:53 Who knows?

00:11:55 But this article is really nice.

00:11:56 People should check it out if they just, you know, they've always, I'm sure they've, like I said, one of the very first things you learn about is errors.

00:12:02 But it's nice to kind of really highlight, actually look at all these things that are there.

00:12:07 So people should check that out.

00:12:08 One of the things that's unusual, so if you're experienced in programming but not Python, about tracebacks is they read in reverse.

00:12:16 Most error messages like this in other languages, they start with the error that actually happened and then where and then what caused that and so on.

00:12:24 But this is the reverse.

00:12:26 You read it from bottom to top instead of the other way around, which I think is a little bit weird.

00:12:29 It also has some interesting conversation and highlights of different common error messages.

00:12:35 If you see this type of error, that probably was caused by this.

00:12:39 You see this other type of error is caused by that.

00:12:41 And I would, I don't know if it was even covered in the article, but I would throw out the most common error you're going to run into is attribute error.

00:12:47 None type does not have whatever you're trying to do to the none type, right?

00:12:51 It's just some kind of crash there.

00:12:52 So it's useful if you have some more junior developers or people are learning.

00:12:57 I think handing this article out to them would be great.

00:12:58 I love this article.

00:13:00 I picked it up.

00:13:01 I looked at it after you posted it.

00:13:03 And then the idea of the name error being or the error being at the bottom, that's something that I never knew.

00:13:10 I just was like, skim down until you find something that you can figure out.

00:13:13 This looks like it applies.

00:13:15 Yeah, exactly.

00:13:16 They're like, line two, there's nothing on line two.

00:13:19 And I'm like, just keep reading.

00:13:20 Somewhere in there, it tells you the error.

00:13:22 So I love that.

00:13:23 I didn't know that it was only the last thing, you know, was the first.

00:13:26 So thank you for that.

00:13:27 Yeah, for sure.

00:13:28 But I'm constantly using my error readings lately.

00:13:31 When you're teaching people and especially younger kids, this is something that's got to be a little frustrating, but also, you know, something they've got to get used to right away.

00:13:41 And it's not really beginner friendly, I wouldn't say.

00:13:43 One of the things that's really nice that Al Schweiger does in his book, Automate the Boring Stuff, is like right near the beginning, he says, let me show you how to Google some errors and find ways to fix them.

00:13:56 And he literally spends several pages talking about, here's this problem.

00:13:59 Type this into Google.

00:14:00 You get this answer.

00:14:01 Here's what you mean.

00:14:02 Here's how you interpret it.

00:14:03 He kind of trains people to understand how they can solve their own problems when they hit this kind of stuff, which I think was really cool, too.

00:14:10 So that's one of our features as well, is going straight to Google and putting that error in.

00:14:15 One of the things I want to pop in is when you're just playing with some code, you might have to deal with one traceback.

00:14:23 When you're dealing with test suites, there might be lots of failures and lots of tracebacks altogether.

00:14:29 And I've found that people get a little overwhelmed with like these just lots of huge tracebacks.

00:14:35 So pytest has a feature that you can limit the size of the traceback.

00:14:40 And so I highly recommend people use short tracebacks.

00:14:43 It only gives you like 10 lines of code around the failure instead of having a huge traceback.

00:14:49 And it makes it a little less intimidating.

00:14:51 Yeah, you don't need to see the whole call stack all the way into the pytest library, right?

00:14:55 Yeah.

00:14:56 Because otherwise, yeah, you'll be chasing that down.

00:14:58 So one more thing to throw in.

00:15:00 I don't know that this is covered in the article, but it's definitely worth considering.

00:15:03 To make tracebacks more helpful, to make exception handling better and more specific, you should definitely consider making your own exception type.

00:15:13 Right?

00:15:14 If you're writing a library or you're writing an application, it's super easy to make your own classifications for errors.

00:15:20 Like if it has some kind of lookup, you can have it derived from key error, but, you know, means something, you know, something more specific.

00:15:28 And it's literally like three, two lines, three lines, probably two lines to write that, you know, class exception name derived from the exception you want, colon pass.

00:15:37 You're good.

00:15:38 You know what I mean?

00:15:38 Like, and it really helps communicate errors back and lets you be more specific in your try except block.

00:15:43 So also worth considering there.

00:15:45 All right.

00:15:46 Now, before we move on to the next one, let me just tell you about DigitalOcean.

00:15:49 So all of our infrastructure here runs on DigitalOcean.

00:15:53 When you get your audio on your player, that's flown, distributed through the DigitalOcean infrastructure, our website, our database server, everything runs there.

00:16:03 It's been wonderful.

00:16:04 It's super affordable.

00:16:05 It's the right level of detail.

00:16:08 You have enough features to do what you need, but it's not overwhelming.

00:16:11 Like you're trying to build the world's most complicated app.

00:16:13 So I definitely recommend checking out DigitalOcean.

00:16:16 Visit them at pythonbytes.fm/DigitalOcean.

00:16:18 Sign up, get $50 credit to play around for six months.

00:16:22 And yeah, give them a try.

00:16:23 It's a really good place to be.

00:16:25 Now, Brian, you did mention plugins and other things or settings and pytest.

00:16:30 So let's keep going with that.

00:16:32 Yeah.

00:16:32 So we actually, this is a listener contribution from Raycoat via email.

00:16:37 And he recommended us cover extension, like mypyE extensions to other tools.

00:16:44 So there's a flake8-mypy and a pytest-mypy.

00:16:49 So mypy is the, I'm sure we've covered that, talking about testing type hints in your code to verify that they're right or something.

00:16:59 Right.

00:16:59 So let me give a quick overview for people who don't know.

00:17:02 I mean, you sort of did.

00:17:03 But Python has optional type hints, right?

00:17:07 I could say, here's a function that has a thing, colon, int.

00:17:10 Now, the runtime of Python does nothing with that, right?

00:17:13 There's no validation.

00:17:14 But if you run mypyE, it will do static type checking to make sure that everywhere you're calling that function, you actually are passing integers and all that.

00:17:22 So all the stuff you're talking about is built on top of that.

00:17:25 Carry on.

00:17:26 Yeah.

00:17:26 There's a couple ideas.

00:17:28 Flake8 is a static type checker also.

00:17:30 Flake8-mypy just is an extension to that so that you're running mypy while you're running Flake8.

00:17:36 The interesting thing that Ray brought up is that he said that he tried to do run mypy by itself and always had trouble getting it configured right.

00:17:46 But with the plug-in Flake8-mypy, it just worked easier.

00:17:49 I don't know.

00:17:51 It was easier to use.

00:17:51 So I'm going to try that also.

00:17:53 I've tried mypy with limited success, so I'll try this as well.

00:17:56 And this extension to Flake8 is also, I guess it's Łukasz Langaday for me, but this is a project maintained by Lucas.

00:18:05 And then another project, these are static analysis.

00:18:08 But if you want to check to see if you're really using it in runtime, whether the types are right or not.

00:18:15 Actually, I'm not sure if I'm telling this correctly, but as part of the pytest.

00:18:19 No, I think I lied.

00:18:21 I don't think it checks runtime types.

00:18:24 It is still just a static type checker, but it's triggered by your pytest suite.

00:18:29 So pytest can check doc tests.

00:18:32 It can check other things as well.

00:18:35 And this is just an extension that runs mypy while you're running your tests.

00:18:38 Yeah, that's pretty cool.

00:18:40 I like it.

00:18:40 And it's maintained by our friend Dan Bader and David Tucker.

00:18:43 That's a good one.

00:18:44 Kelly, do you do any testing with the kids?

00:18:48 Or do you do any of these type hints where you say, hey, kids, this is an integer?

00:18:52 Or is the beauty of Python that you don't have to even talk about that kind of stuff?

00:18:56 No, we're getting into it a little bit.

00:18:58 We do introduce a little bit of the idea of tests in the older grade levels.

00:19:04 Sean, my colleague, he uses it quite often just to set parameters.

00:19:08 We use the lingo.

00:19:10 He's a big fan of tests and he's been trying to show me all of that.

00:19:15 So I plan to learn more this year, step by step.

00:19:17 Yay.

00:19:17 We have the test, the test book signed by somebody famous or something.

00:19:25 Amazing.

00:19:27 Got the legit version.

00:19:29 I'm blushing.

00:19:29 I know.

00:19:30 All right.

00:19:32 Speaking of working with kids, your next one has to do with Lego Education.

00:19:37 Tell us about this.

00:19:38 I don't know if you're familiar with Lego Education.

00:19:40 We all know the Lego bricks that you buy at the store.

00:19:42 But Lego Education launched a series of robots over the years.

00:19:48 The last robot that they launched was in 2013 called the EV3 Mindstorm.

00:19:54 And there hasn't been a new robot since.

00:19:57 The EV3 Mindstorm, you can still code with Python.

00:20:00 There was a gentleman named Nigel Ward who did this.

00:20:04 You'll have to dig into it yourself.

00:20:06 But this kind of convoluted way of getting Python to run on the EV3.

00:20:11 And it was a Debian Linux-based operating system called EV3 Dev.

00:20:17 So you're going to have to explain that to me.

00:20:20 But it was a little bit difficult for a person not knowledgeable in Python to run it on Mindstorms.

00:20:26 We played with it a little bit, but it's kind of convoluted.

00:20:29 Well, since earlier this year, they're launching a new robot called Spike Prime.

00:20:35 And Spike Prime is said that it's going to be running with MicroPython.

00:20:41 And this is really huge that Lego Education is launching this because there's over 300,000 kids who compete with Lego robotics.

00:20:49 And now, instead of just using the Lego programming operating system, they're now going to launch it with any programming system that they want to use and with support of MicroPython.

00:21:00 And earlier this year, they launched a whole guide about how to run MicroPython on top of the EV3 Dev with Pybricks.

00:21:09 And there's a whole bunch of people with their hands in there.

00:21:11 And it's just a really interesting thing.

00:21:13 They even have its own Visual Studio Code extension where you can click on it and install it with Visual Studio Code.

00:21:19 There's no need for use in Terminal.

00:21:22 It has all these instructions.

00:21:24 It kind of looks like the MicroPython API when you open up their guidebook.

00:21:29 And it just seems a lot easier.

00:21:31 And there were a couple people with their hands in this development.

00:21:36 And I'm not sure who started what and if it's all based on the original guide.

00:21:41 But Sebastian Thomas, he's one of the main contributors, it looks like, for Pybricks.

00:21:47 And then David Lechner, Lorenz Valk, and Antoine Van Hook are the Lego MicroPython release guys.

00:21:54 And they have a lot of really cool programs that they've converted into MicroPython.

00:21:59 So we're excited.

00:22:00 This is such exciting news.

00:22:01 This is like really a mainstream thing that will probably bring awareness of MicroPython and exposure of Python to a lot of kids and teachers.

00:22:10 Absolutely.

00:22:11 And what the cool thing is, is like EV3 Mindstorm robots, they're a little bit, you know, like all other robots.

00:22:17 They don't really do what you program them to do.

00:22:20 But with using MicroPython, you're pretty much getting down into correct angle and speed.

00:22:26 And you can use the gyroscope to regulate where it is on with GPS kind of coordination on a mat.

00:22:33 So you're going to get a little bit more controlled environment.

00:22:36 So we're excited.

00:22:37 I'm still buying that when it comes out.

00:22:39 It just sounds so cool.

00:22:41 It's really cool.

00:22:43 Wait till Spike Prime gets released later this year.

00:22:45 It looks, it's got really a lot of colors.

00:22:47 So I think it sounds bad, but I think it's going to get more girls involved with robotics.

00:22:53 It's not the basic gray and white of the EV3.

00:22:55 There's a lot of colors on Spike Prime.

00:22:58 So I'm excited about it.

00:22:59 Yeah, it sounds like it's going to look fun.

00:23:00 That's cool.

00:23:00 Yeah, very exciting.

00:23:02 Thanks for covering that one.

00:23:03 I think that's great.

00:23:03 So the last one, I want to start with a popular saying.

00:23:07 So 20 years ago was the best time to plant a tree.

00:23:11 But, you know, the second best time might be like right now.

00:23:14 And that's kind of the story for Mozilla.

00:23:17 So Mozilla has tons of Python.

00:23:20 And they wrote this sort of, let's look at what we're doing with Python large at Mozilla.

00:23:26 And what's the story around Python 3 and converting over to it?

00:23:31 So they say, hey, look, we actually have 3,500 Python files at Mozilla Central, which is like 230,000 lines of code, which is a lot of Python.

00:23:41 And they also have 462 repositories over at the Mozilla or GitHub repo organization.

00:23:50 So they've got a lot of stuff going on with Python.

00:23:52 And they looked and they said, you know, most of this is Python 2 only.

00:23:56 Boo-hoo.

00:23:58 So we all know that the end of life of Python 2 is quickly approaching.

00:24:03 Brian, you were talking about Python 2020.

00:24:06 Like that sounds still to me way in the future.

00:24:09 I don't know what 2020 is, but that is maybe we'll have flying cars by then.

00:24:13 I don't know.

00:24:14 But that's way out there, isn't it?

00:24:15 This next year.

00:24:16 I know.

00:24:16 It's like five months.

00:24:17 It's crazy.

00:24:20 How is that possible?

00:24:21 So that is when Python 2 is going to be end of life.

00:24:24 So this is an interesting article because I know a lot of organizations are thinking about their status with Python 2 and Python 3, whether it's worth upgrading things, are they behind, and looking to other leading organizations on how they're doing their migration.

00:24:41 So this is kind of a walkthrough of where is Mozilla?

00:24:44 Where are they going?

00:24:44 What's their assessment here?

00:24:47 And the idea was, first of all, do they actually need to migrate off of Python 2?

00:24:51 Technically, no.

00:24:52 You can still download 2.7.

00:24:54 You can still run it.

00:24:55 But here's the things we're concerned about at Mozilla.

00:24:58 Python 2 will no longer receive security fixes.

00:25:00 That could be a problem.

00:25:03 More scary, I guess, is all the exciting growth of all the other packages they depend upon may no longer support Python 2.

00:25:11 And so they will be stuck on old versions of all the other libraries that are great.

00:25:15 Right?

00:25:15 So in a sense, like, the libraries they can use will be calcified, not just the runtime.

00:25:20 It also means delaying more code they got to migrate and probably writing new code that is not as easily migrated.

00:25:26 And it also has an opportunity cost that they can't use the cool features like async and wait and f strings and all those good things.

00:25:33 So probably they should migrate to Python 3 is what they decided.

00:25:37 And their first step was to set up some linters.

00:25:40 They said one of the linters makes sure that Python code at least can be imported into Python 3 without failing.

00:25:46 Like, that's a pretty low bar.

00:25:48 Can I say import this and run that statement under Python 3?

00:25:53 Yes or no.

00:25:54 Right?

00:25:55 But it's like that's the first step, you know.

00:25:56 And then the other linter they set up was to make sure that all the Python 2 files had the dunder future import statements.

00:26:04 So things like print statements and whatnot were working out.

00:26:08 All right?

00:26:09 So you write the right print statements at least.

00:26:11 And then we've talked a lot about pip enf, poetry, managing dependencies, all that kind of stuff.

00:26:17 So there's an interesting conversation there about their evaluation of pip enf and poetry and whether or not that made sense for them.

00:26:24 And pip enf and poetry are pretty good for, like, I would like to create a project and here are some dependencies I want to install.

00:26:30 You know, pip enf, install, whatever, right?

00:26:33 Request or something like that.

00:26:34 But it turns out the way Mozilla works with one huge mega repository, like monolith repository, those tools don't really work for that.

00:26:44 And so they actually created this thing called Jetty, which is based on poetry.

00:26:47 That is more appropriate for those types of, like, systems and dependencies and stuff.

00:26:52 So it's a pretty interesting look into some simple steps that Mozilla is taking to move to Python 3.

00:26:57 Yeah.

00:26:58 Jetty seems interesting.

00:26:59 Yeah.

00:27:00 Take a project based on another project that removes features.

00:27:04 These features.

00:27:06 What did you do?

00:27:09 Well, I removed these three features.

00:27:10 So now we won't use them.

00:27:12 Yeah.

00:27:15 The idea of some of the stuff about the way poetry worked, just it assumed that the top level of the project is kind of all of it.

00:27:21 And at Mozilla, that's, like, all of their code in entirety.

00:27:24 And they want to work in, like, sub bits or something to that effect is what I got out of it.

00:27:28 All right.

00:27:28 Well, that's cool.

00:27:30 Yeah.

00:27:30 I like it.

00:27:31 Yeah.

00:27:31 So if you're thinking of moving your organization to Python 3, which should be anybody who is not already on Python 3, I would say, or that's your role or something like that, check out this article.

00:27:42 I think it's got some good tips.

00:27:44 One question for you, Michael.

00:27:45 Wouldn't the second best time to plant the tree be 19 years ago?

00:27:50 Yeah, but it makes explaining the thing a long – it takes, like, 21 statements instead of two.

00:27:56 Okay.

00:27:57 Okay.

00:27:58 All right.

00:27:58 All right.

00:27:59 So that's our main topic.

00:28:01 So, Brian, you got anything extra you just want to throw out there real quick?

00:28:03 Yeah.

00:28:03 The beta 3 for Python 3.8 is out.

00:28:06 And the core Python team is encouraging everybody, especially people that maintain third-party package at third-party Python projects, to heavily test 3.8 because it can be fixed now.

00:28:21 But if you wait until 3.8 is actually out, it's harder to fix.

00:28:24 So please test.

00:28:26 It seems like we're getting a little bit closer to Python 4.

00:28:29 Is that in a future?

00:28:30 It's such an interesting idea.

00:28:33 It's such an interesting idea.

00:28:35 2.7 and 3.8.

00:28:37 Well, I asked – speaking of Lucas Lang, I asked him about it back at PyCon when I did an interview with him and Anthony Shaw around the features of Python 3.8.

00:28:45 And I think, you know, there's hesitation to have a double-digit second number there, like 3.11 or something like this.

00:28:54 But there's also so much fatigue of this Python 2 to 3 conversation that I'm not sure that we're going to be going to 4 anytime soon.

00:29:02 On that note, though, I think it might be interesting to have a 4.0 be a non-event, to have it just be another version.

00:29:10 Yeah.

00:29:10 That would be nice, wouldn't it?

00:29:12 Especially since everyone's getting used to the conversion.

00:29:15 So you might as well just throw it in and have another one there.

00:29:18 We've been converting for like 10 years.

00:29:20 Let's just keep going.

00:29:21 All right.

00:29:22 So I've got a quick one I want to throw out there.

00:29:24 PipX.

00:29:25 I love PipX.

00:29:26 It lets you install things that are Python but are meant to be little utilities that you just run on your terminal.

00:29:33 Install and manage those separately, kind of like Homebrew, but for Python stuff.

00:29:37 It now has shell completions, which is pretty cool.

00:29:40 So you can install those really easy.

00:29:43 You can say pipX space you tab and it'll show you all the things that you can send to PipX that starts with you for like upgrade, upgrade all, things like that.

00:29:51 Not a huge thing, but I'm a big fan of PipX.

00:29:53 So it's a little bit better still.

00:29:54 That's good.

00:29:55 Yeah.

00:29:55 Kelly, how about you?

00:29:56 So you got to put a plug in for our podcast at teachingpython.sm.

00:30:00 Sean, Tiber, and I, we started this podcast because if you haven't heard, I'm a new coder.

00:30:07 I can't say I'm a newbie anymore.

00:30:09 I guess I've been around for a year now trying to learn how to code and Sean's a new teacher.

00:30:13 And we started this podcast and it's just about the frustration of working with a coder who's becoming a teacher and a teacher who's trying to become a coder.

00:30:22 And it's just about our pitfalls and what we've learned.

00:30:25 And it's been a great push for me learning Python.

00:30:28 So for all those people that listen to you guys, Michael and Brian, I think it's a good in-between.

00:30:34 We go home and after we listen to you, we start Googling, what is he talking about?

00:30:39 It's great.

00:30:40 Yeah, that's a great podcast.

00:30:42 I'm happy you all are doing it.

00:30:43 I think you're doing good work there.

00:30:45 I recommend the podcast to anybody that has to teach anybody anything Python related.

00:30:51 Not just teachers or paid instructors.

00:30:55 If you're acting as a mentor within your organization, I think that you get a lot out of this podcast also.

00:31:01 Absolutely.

00:31:01 We really want to hit everyone in the college, even colleagues who want to learn Python.

00:31:06 And just about good teaching, whether it isn't Python, you know, it's not Python, God forbid.

00:31:10 It's something else.

00:31:12 It's just that idea of all the other skills that come along with being a coder.

00:31:16 Yeah, it's a good podcast.

00:31:17 People should definitely check it out, especially like Brian said, if you're in that role somehow.

00:31:21 All right.

00:31:22 Time for a joke, huh?

00:31:23 This is visual.

00:31:25 So I'm going to set the stage, but you two, you have to click that link to open that and see the image here.

00:31:31 Okay.

00:31:31 Then I'm going to describe it, describe it to folks.

00:31:34 We'll see if we can do a visual joke on the air.

00:31:37 So here's the idea.

00:31:38 In Python, you just had this phrase, something to the effect of, like, we're all consenting adults.

00:31:44 We don't need to be overly protective or overly structured in how we put our data together.

00:31:49 Like, we can just say, you know, this part of our data is meant to be internal and leave it alone.

00:31:54 And so there's conventions, but not really enforcement in the language to make that happen.

00:31:58 So, like, if I had a module and something was like an internal implementation, I might have underscore value instead of value.

00:32:05 Underscore method for a private method.

00:32:07 But, of course, you could still get to it, right?

00:32:08 Yeah.

00:32:09 So the joke is, this is a little cartoon, and the cartoon is a door and a welcome mat.

00:32:15 It has a key.

00:32:16 Like, sometimes you have a key under the doormat, but the key is half sticking out.

00:32:19 Kelly, what does it say?

00:32:21 A little annotation there?

00:32:23 It says Python private method.

00:32:26 There you go.

00:32:27 It's, you know, you're not supposed to pick it up, but it's right there.

00:32:31 So anyway, you know, we'll put the link in the show notes.

00:32:33 Y'all can click it, check it out.

00:32:35 But it's pretty funny.

00:32:36 That comes to us both from RealPython and Nick's spirit.

00:32:38 So thanks, guys, for sending that over.

00:32:40 All right.

00:32:42 Well, that's it for the show.

00:32:43 Brian, great to chat with you as always.

00:32:45 Kelly, thanks for being here.

00:32:47 It's great to talk to you and get your perspective on all this stuff.

00:32:49 Thank you for having me.

00:32:51 It's always fun talking to you guys and listening to you guys.

00:32:53 Yeah, you bet.

00:32:54 See you all later.

00:32:55 Thank you for listening to Python Bytes.

00:32:57 Follow the show on Twitter via at Python Bytes.

00:32:59 That's Python Bytes as in B-Y-T-E-S.

00:33:02 And get the full show notes at Pythonbytes.fm.

00:33:05 If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:33:09 We're always on the lookout for sharing something cool.

00:33:12 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:33:15 Thank you for listening and sharing this podcast with your friends and colleagues.

