WEBVTT

00:00:00.000 --> 00:00:06.200
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode


00:00:06.200 --> 00:00:08.800
327 recorded March 13th


00:00:08.800 --> 00:00:13.140
2023 and I am Brian Okken and I am Michael Kennedy


00:00:13.140 --> 00:00:19.380
This week's episode is sponsored by compiler podcast from Red Hat listen to their spot later in the show


00:00:19.380 --> 00:00:22.760
and connect with the show on


00:00:23.040 --> 00:00:29.680
Fostadon at pythonbytes@fostadon.org and both Brian and Michael are there also.


00:00:29.680 --> 00:00:31.920
Brian Okken and M. Kennedy.


00:00:31.920 --> 00:00:41.560
You can also join us on YouTube or join us live by going to pythonbytes.fm/live to be a part of the audience.


00:00:41.560 --> 00:00:42.720
It's really kind of fun.


00:00:42.720 --> 00:00:44.720
Usually it's Tuesdays at 11.


00:00:44.720 --> 00:00:47.920
This week it's Monday, but usually it's Tuesdays at 11.


00:00:47.920 --> 00:00:52.720
And you can watch older videos on the YouTubes as well.


00:00:52.920 --> 00:00:56.660
So thanks, Michael, for showing up again this week.


00:00:56.660 --> 00:00:59.360
We got quite a few episodes under our belt.


00:00:59.360 --> 00:01:01.080
So are you excited to get started?


00:01:01.080 --> 00:01:02.960
- We do, I am.


00:01:02.960 --> 00:01:07.740
You know, technology can be a tangled mess sometimes.


00:01:07.740 --> 00:01:11.120
And not long ago, we spoke about Untangle.


00:01:11.120 --> 00:01:14.480
And then, I believe it was Ian sent in and said,


00:01:14.480 --> 00:01:15.360
you know, that was really cool.


00:01:15.360 --> 00:01:16.680
Yeah, it was Ian, thank you.


00:01:16.680 --> 00:01:20.160
Said, I know you're a huge fan of Pydantic.


00:01:20.160 --> 00:01:20.980
It's true.


00:01:20.980 --> 00:01:25.260
Maybe you want to check out something that is similar to Untangle,


00:01:25.260 --> 00:01:28.140
which would let you talk to XML through


00:01:28.140 --> 00:01:32.980
Python in an object-oriented style way, a little more dynamic.


00:01:32.980 --> 00:01:38.900
He sent in the Pydantic-XML extension. Have you heard of this, Brian?


00:01:38.900 --> 00:01:39.540
>> No.


00:01:39.540 --> 00:01:41.460
>> No, I hadn't either. It's totally news to me.


00:01:41.460 --> 00:01:43.300
But the idea is basically,


00:01:43.300 --> 00:01:46.660
the way Pydantic traditionally works is you point it at


00:01:46.660 --> 00:01:50.080
a JSON file or a Python dictionary,


00:01:50.080 --> 00:01:52.920
and it can create an object graph hierarchy


00:01:52.920 --> 00:01:55.520
of all the pieces that it knows.


00:01:55.520 --> 00:01:58.200
So you can say it has a name and a number,


00:01:58.200 --> 00:02:00.480
but then also has a list of locations


00:02:00.480 --> 00:02:03.680
and the locations model of these Pydantic objects and so on.


00:02:03.680 --> 00:02:05.100
And that's how Pydantic has worked


00:02:05.100 --> 00:02:07.200
from day one more or less, right?


00:02:07.200 --> 00:02:08.720
It's based on dictionaries


00:02:08.720 --> 00:02:12.960
because that's the way that you speak APIs, right?


00:02:12.960 --> 00:02:14.880
And so it was very closely tied to APIs


00:02:14.880 --> 00:02:16.600
and JSON exchange there.


00:02:16.600 --> 00:02:19.400
So this one does basically the same thing,


00:02:19.400 --> 00:02:21.880
but for XML and it's glorious, right?


00:02:21.880 --> 00:02:23.880
It's glorious with the data validation,


00:02:23.880 --> 00:02:26.880
the required versus optional, the type conversion,


00:02:26.880 --> 00:02:27.820
all of those things.


00:02:27.820 --> 00:02:31.180
It supports dictionaries, lists, sets, tuples, unions.


00:02:31.180 --> 00:02:36.180
It has LXML parser support for high speed parser processing.


00:02:36.180 --> 00:02:39.480
You can pass in an element tree as well,


00:02:39.480 --> 00:02:44.000
which is the xml-e3-element tree class,


00:02:44.000 --> 00:02:46.760
which allows you to do parsing traditionally.


00:02:46.760 --> 00:02:48.320
So how do you get going?


00:02:48.320 --> 00:02:53.720
Well, you create a class here with pure Pydantic you derive from base model.


00:02:53.720 --> 00:02:56.040
Here you derive from base XML model,


00:02:56.040 --> 00:02:58.280
so it's slightly different, but it's fine.


00:02:58.280 --> 00:03:01.420
Check this out. In the XML document that they're talking about here,


00:03:01.420 --> 00:03:05.780
there's a top-level node has a thing called status,


00:03:05.780 --> 00:03:08.400
an attribute called status in XML.


00:03:08.400 --> 00:03:09.360
>> Okay.


00:03:09.360 --> 00:03:12.640
>> In the product it does, part of it anyway.


00:03:12.640 --> 00:03:15.640
It has two possible valid values.


00:03:15.640 --> 00:03:17.800
It can either be running or in development.


00:03:17.800 --> 00:03:21.040
It can't be ran or prod or any,


00:03:21.040 --> 00:03:22.320
it has to be those two words.


00:03:22.320 --> 00:03:24.160
So because it's Pydantic,


00:03:24.160 --> 00:03:28.680
you can just say the type of this is a literal running comma development.


00:03:28.680 --> 00:03:30.120
Isn't that awesome? That's it.


00:03:30.120 --> 00:03:30.560
>> That is pretty good.


00:03:30.560 --> 00:03:33.040
>> You're done validating that, that is correct.


00:03:33.040 --> 00:03:34.700
You set that equal to an adder,


00:03:34.700 --> 00:03:37.720
which means it's not coming from the body of the XML node,


00:03:37.720 --> 00:03:41.440
but it's coming from this attribute name status down here.


00:03:41.440 --> 00:03:45.440
So cool. Then you can have launched,


00:03:45.440 --> 00:03:48.340
You could have launched which is a numerical date.


00:03:48.340 --> 00:03:52.780
So the running ones have 2023 and 2019 as launch,


00:03:52.780 --> 00:03:53.980
but the one that's in development,


00:03:53.980 --> 00:03:56.060
well, it doesn't have a launch date, so it's missing.


00:03:56.060 --> 00:03:59.740
So the optional aspect of Pydantic is a play here.


00:03:59.740 --> 00:04:02.960
Then there's a title for that element,


00:04:02.960 --> 00:04:05.180
and that just comes, you say it's string,


00:04:05.180 --> 00:04:07.600
it just comes straight out of the body of the node,


00:04:07.600 --> 00:04:09.700
because it's not set to an attribute,


00:04:09.700 --> 00:04:10.980
but it's just the base one.


00:04:10.980 --> 00:04:13.620
I guess, presumably, you can only have one of those per node.


00:04:13.620 --> 00:04:16.960
- Okay, so is title special or can you name it


00:04:16.960 --> 00:04:17.980
whatever you want then?


00:04:17.980 --> 00:04:19.620
- You can name it whatever you want, I'm pretty sure.


00:04:19.620 --> 00:04:20.460
- Okay, okay.


00:04:20.460 --> 00:04:21.280
- Yeah.


00:04:21.280 --> 00:04:23.460
- Oh yeah, it says extracted from the element text, nice.


00:04:23.460 --> 00:04:24.300
Okay.


00:04:24.300 --> 00:04:25.120
- Yeah, yeah, exactly.


00:04:25.120 --> 00:04:27.440
And so then the overall XML document,


00:04:27.440 --> 00:04:29.340
I had it reversed when I first started talking about this.


00:04:29.340 --> 00:04:31.500
There's a company and the company has products, right?


00:04:31.500 --> 00:04:33.020
So there's a company class.


00:04:33.020 --> 00:04:35.460
It has a trade name from its attribute,


00:04:35.460 --> 00:04:36.940
SpaceX in this case.


00:04:36.940 --> 00:04:39.580
And then it has a node which has a website


00:04:39.580 --> 00:04:40.900
as its text value.


00:04:40.900 --> 00:04:44.840
but the text value is HTTPSpaceX.com, right?


00:04:44.840 --> 00:04:46.960
And so you can say the type is a URL


00:04:46.960 --> 00:04:48.920
and it'll actually parse it out as a URL,


00:04:48.920 --> 00:04:51.440
not just a string, which is really cool.


00:04:51.440 --> 00:04:54.640
And then in standard, identic style,


00:04:54.640 --> 00:04:58.280
it has a list of products and you give it the tag name


00:04:58.280 --> 00:05:00.600
that it's product, the node name is product


00:05:00.600 --> 00:05:02.400
and it just loops through that list.


00:05:02.400 --> 00:05:04.080
Isn't that a clever way to parse that


00:05:04.080 --> 00:05:06.560
with validation and data conversion and all that?


00:05:06.560 --> 00:05:08.880
- Not only that, I'm really glad you walked me through it


00:05:08.880 --> 00:05:10.320
because the first time I looked at this,


00:05:10.320 --> 00:05:14.480
I was a little bit lost on how to think about this


00:05:14.480 --> 00:05:18.700
and how it's building it up from different components


00:05:18.700 --> 00:05:21.000
and attributes and elements.


00:05:21.000 --> 00:05:22.160
It's pretty neat.


00:05:22.160 --> 00:05:25.560
- Yeah, if I've got to do XML again, I'm all over this.


00:05:25.560 --> 00:05:28.560
So there's a bunch of stuff about how you talk about


00:05:28.560 --> 00:05:32.120
heterogeneous collections, aliases, union types, model.


00:05:32.120 --> 00:05:32.960
You can go through it if you want.


00:05:32.960 --> 00:05:35.720
But I think this little quick getting started bit


00:05:35.720 --> 00:05:37.440
they have right at the top of the website


00:05:37.440 --> 00:05:39.560
that I'm linking to, that's pretty good.


00:05:39.560 --> 00:05:41.760
- Yeah, nice. Cool. - Very good.


00:05:41.760 --> 00:05:44.760
Yeah, anyway, that one's a great one. Thanks, Ian, for sending that in.


00:05:44.760 --> 00:05:46.760
I'm psyched to know about it.


00:05:46.760 --> 00:05:50.760
Well, next, I kind of want to talk about virtual environments.


00:05:50.760 --> 00:05:56.760
So I use the virtual environment VENV built into Python.


00:05:56.760 --> 00:06:04.360
I, in the past, have used the virtualenv-extra package that you can install,


00:06:04.360 --> 00:06:08.360
but since, I don't know, it's been quite a few versions of Python,


00:06:08.360 --> 00:06:10.080
on the built-in ones pretty darn good.


00:06:10.080 --> 00:06:12.140
So I'm happy with it.


00:06:12.140 --> 00:06:16.440
Anyway, there's a lot of people that kind of don't really


00:06:16.440 --> 00:06:17.800
get how they work.


00:06:17.800 --> 00:06:20.560
There's trying to get people on board with that they should


00:06:20.560 --> 00:06:23.880
use them is great, but trying to use them effectively,


00:06:23.880 --> 00:06:26.040
like one of the mistakes I've seen a lot of people make


00:06:26.040 --> 00:06:28.760
with virtual environments is using them,


00:06:28.760 --> 00:06:31.480
but then when they go to test in CI,


00:06:31.480 --> 00:06:34.000
actually trying to activate the virtual environment


00:06:34.000 --> 00:06:35.960
and you don't really have to,


00:06:35.960 --> 00:06:39.640
you can just use the binaries directly.


00:06:39.640 --> 00:06:42.920
And so I'm really happy this article is around.


00:06:42.920 --> 00:06:45.600
So Brett Cannon wrote an article called


00:06:45.600 --> 00:06:47.600
"How Virtual Environments Work."


00:06:47.600 --> 00:06:50.540
And this is excellent, and it's a short read.


00:06:50.540 --> 00:06:54.700
So one of the things that starts it with a little history,


00:06:54.700 --> 00:06:57.180
not a lot of history, just a little to remind people


00:06:57.180 --> 00:07:00.760
that back in the day, we had global


00:07:00.760 --> 00:07:03.560
and the working directory, or your current directory,


00:07:03.560 --> 00:07:05.000
and that's it.


00:07:05.000 --> 00:07:06.120
It wasn't anything else.


00:07:06.120 --> 00:07:09.040
And I kind of remember this of trying to find,


00:07:09.040 --> 00:07:12.480
if I'm sharing some code, trying to find some on the web


00:07:12.480 --> 00:07:14.960
and then just downloading it and sticking it in my directory


00:07:14.960 --> 00:07:15.780
and see if it works.


00:07:15.780 --> 00:07:17.760
It's just part of your code now.


00:07:17.760 --> 00:07:19.440
That's not what we have today.


00:07:19.440 --> 00:07:22.160
And partly in thanks to virtual environments.


00:07:22.160 --> 00:07:24.200
So it's better now.


00:07:24.200 --> 00:07:25.760
You can still complain about them.


00:07:25.760 --> 00:07:27.620
That's fine, but it's better now.


00:07:27.620 --> 00:07:30.400
And then he goes on to talk about the structure.


00:07:30.400 --> 00:07:33.260
So, and it's really, there's really not much there.


00:07:33.260 --> 00:07:35.840
I mean, when you're building a virtual environment,


00:07:35.840 --> 00:07:38.200
it's kind of a lightweight throwaway thing.


00:07:38.200 --> 00:07:40.140
Don't think of it as this huge thing.


00:07:40.140 --> 00:07:42.980
It's just a little directory and it's got a bin


00:07:42.980 --> 00:07:45.840
and an include and a site packages directory


00:07:45.840 --> 00:07:48.940
for the Python that you're using.


00:07:48.940 --> 00:07:51.060
And on Windows, it's a little different,


00:07:51.060 --> 00:07:54.080
but we'll just hand wave around that.


00:07:54.080 --> 00:07:57.340
In the Unix environment, it's mostly symbolic links to,


00:07:57.340 --> 00:07:59.660
I mean, you do have stuff installed there,


00:07:59.660 --> 00:08:04.080
but as far as replicating the Python environment,


00:08:04.080 --> 00:08:06.220
your Python interpreter isn't copied in there,


00:08:06.220 --> 00:08:07.180
it's symbolic linked,


00:08:07.180 --> 00:08:09.820
so you don't have to worry about that too much.


00:08:09.820 --> 00:08:12.780
It's the site packages in the bin and everything


00:08:12.780 --> 00:08:14.460
and how that's there.


00:08:14.460 --> 00:08:16.420
So how does Python deal with that?


00:08:16.420 --> 00:08:21.420
Well, it deals with it through a pyvenv.cfg.


00:08:21.420 --> 00:08:24.300
It's a config file that tells Python,


00:08:24.300 --> 00:08:26.580
when you run Python from this virtual environment,


00:08:26.580 --> 00:08:28.420
where the home directory should be,


00:08:28.420 --> 00:08:31.540
whether or not to include system packages


00:08:31.540 --> 00:08:34.260
in the site packages, and then the version


00:08:34.260 --> 00:08:38.020
and the executable and some other stuff,


00:08:38.020 --> 00:08:40.260
like the command, if you wanted to recreate it.


00:08:40.260 --> 00:08:43.580
I don't know why that's there, but in general,


00:08:43.580 --> 00:08:45.860
this is enough to tell Python,


00:08:45.860 --> 00:08:50.460
if you just run it from that environment,


00:08:50.460 --> 00:08:52.780
that you just get all the right stuff.


00:08:52.780 --> 00:08:56.660
And so if you're putting it in a script, just use those.


00:08:56.660 --> 00:08:58.840
But if you're using it from the shell,


00:08:58.840 --> 00:09:00.560
then of course you're gonna activate the shell.


00:09:00.560 --> 00:09:04.040
But the activation, he's stressing,


00:09:04.040 --> 00:09:06.580
and this is important to understand, it's optional.


00:09:06.580 --> 00:09:08.280
You don't have to hit activate


00:09:08.280 --> 00:09:11.060
as long as you're calling stuff within the environment.


00:09:11.060 --> 00:09:15.700
And he kind of goes on to talk about really what it's doing.


00:09:15.700 --> 00:09:18.220
What does the activation do though, if you're curious?


00:09:18.220 --> 00:09:19.340
It doesn't do much.


00:09:19.340 --> 00:09:22.620
It sticks some stuff in your path.


00:09:22.620 --> 00:09:24.920
It edits a like a virtual environment,


00:09:24.920 --> 00:09:29.380
sets a virtual env environment variable,


00:09:29.380 --> 00:09:32.340
and it registers a deactivate shell function.


00:09:32.340 --> 00:09:33.340
And that's about it.


00:09:33.340 --> 00:09:34.540
It changes your prompt too,


00:09:34.540 --> 00:09:38.000
to let you know that you've activated it, which is cool.


00:09:38.000 --> 00:09:40.220
And then he goes on to talk about how,


00:09:40.220 --> 00:09:42.260
partly why he's dug into this lately


00:09:42.260 --> 00:09:45.940
is because for VS Code, they're creating a little tiny,


00:09:45.940 --> 00:09:47.540
but you can use it anywhere you want,


00:09:47.540 --> 00:09:51.580
a extra extension called MicroVENV.


00:09:52.580 --> 00:09:54.700
microvenv, I don't know.


00:09:54.700 --> 00:09:58.140
So, and this is a single file, less than 100 lines


00:09:58.140 --> 00:10:00.420
to kind of emulate all of that.


00:10:00.420 --> 00:10:03.420
And the reason is because Debian doesn't,


00:10:03.420 --> 00:10:07.100
or Debian doesn't include the virtual environments


00:10:07.100 --> 00:10:07.940
by default.


00:10:07.940 --> 00:10:09.700
So they kind of have to wanna work around that.


00:10:09.700 --> 00:10:12.820
So anyway, really great summary of virtual environments.


00:10:12.820 --> 00:10:15.020
- Yeah, peeling away a little bit of the magic,


00:10:15.020 --> 00:10:16.540
letting you know what's happening in there, right?


00:10:16.540 --> 00:10:19.660
- Yeah, well, and also because it's sort of magical


00:10:19.660 --> 00:10:22.420
to some people, a lot of people are concerned


00:10:22.420 --> 00:10:25.160
about like trying to copy it or something.


00:10:25.160 --> 00:10:27.380
And it's, you shouldn't think,


00:10:27.380 --> 00:10:29.900
you shouldn't have anything kept that you,


00:10:29.900 --> 00:10:32.340
that's important within your virtual environment.


00:10:32.340 --> 00:10:34.680
You should be able to recreate it whenever you want.


00:10:34.680 --> 00:10:36.660
So there should be lightweight thing.


00:10:36.660 --> 00:10:38.700
Though, oh, the one thing I really wanted to highlight,


00:10:38.700 --> 00:10:40.900
and the reason why I really wanted to talk about this


00:10:40.900 --> 00:10:42.920
was because of a flag.


00:10:42.920 --> 00:10:45.500
So where's that flag?


00:10:45.500 --> 00:10:47.920
There's a flag, dash, dash.


00:10:49.100 --> 00:10:50.100
I gotta find it.


00:10:50.100 --> 00:10:51.860
Do you remember, do you know what I'm talking about?


00:10:51.860 --> 00:10:52.700
Anyway.


00:10:52.700 --> 00:10:54.780
- I'll help you search.


00:10:54.780 --> 00:10:58.380
- There's like no, there's like--


00:10:58.380 --> 00:10:59.860
- Without pip?


00:10:59.860 --> 00:11:00.700
- Yeah, without pip.


00:11:00.700 --> 00:11:02.740
- Dash dash without dash pip.


00:11:02.740 --> 00:11:07.740
- Okay, so without pip, excellent thing to know about,


00:11:07.740 --> 00:11:09.620
because, oh, here it is.


00:11:09.620 --> 00:11:10.980
BNV without pip.


00:11:10.980 --> 00:11:13.300
That will get it so that it doesn't ask you


00:11:13.300 --> 00:11:14.420
(laughs)


00:11:14.420 --> 00:11:16.140
ask you to upgrade pip.


00:11:16.140 --> 00:11:19.200
So especially in CI and other places,


00:11:19.200 --> 00:11:21.400
you don't care about upgrading it right now.


00:11:21.400 --> 00:11:24.780
I mean, I get it if I'm in the development mode,


00:11:24.780 --> 00:11:27.200
I do wanna upgrade it, I want to use the latest one.


00:11:27.200 --> 00:11:30.480
But in a CI environment or a lot of automated places,


00:11:30.480 --> 00:11:32.560
I don't need to do that.


00:11:32.560 --> 00:11:35.120
I can just use whatever's there, it's gonna be fine.


00:11:35.120 --> 00:11:36.920
So turning that off is awesome.


00:11:36.920 --> 00:11:37.760
And it saves some time.


00:11:37.760 --> 00:11:39.680
It's not just, it doesn't say not,


00:11:39.680 --> 00:11:42.600
it isn't really not install pip or upgrade,


00:11:42.600 --> 00:11:44.960
it just doesn't try.


00:11:44.960 --> 00:11:47.200
So it assumes PIP's already there is all.


00:11:47.200 --> 00:11:49.680
It uses the system PIP, so that's it.


00:11:49.680 --> 00:11:50.680
- Cool. - That's cool.


00:11:50.680 --> 00:11:52.200
Yeah, it just falls back to the global one


00:11:52.200 --> 00:11:53.680
but runs it for that environment.


00:11:53.680 --> 00:11:55.100
- Yeah, yeah.


00:11:55.100 --> 00:11:58.000
And apparently it saves a lot of time of that,


00:11:58.000 --> 00:11:59.280
so that's great.


00:11:59.280 --> 00:12:00.520
- Very cool, very cool.


00:12:00.520 --> 00:12:03.800
Well, before we move on, our sponsor.


00:12:03.800 --> 00:12:05.400
- Oh yeah, let's cover our sponsor.


00:12:05.400 --> 00:12:07.880
And I really, really appreciate Red Hat


00:12:07.880 --> 00:12:10.860
and The Compiler Podcast for sponsoring this episode.


00:12:10.860 --> 00:12:12.920
So just like you, both Michael and I


00:12:12.920 --> 00:12:14.760
are big fans of podcasts.


00:12:14.760 --> 00:12:17.940
and really happy to share a new one


00:12:17.940 --> 00:12:20.800
from a highly respected open source company.


00:12:20.800 --> 00:12:23.960
Compiler is an original podcast from Red Hat.


00:12:23.960 --> 00:12:26.940
Compiler brings together a curious team of Red Hatters


00:12:26.940 --> 00:12:29.940
to simplify tech topics and provide insight


00:12:29.940 --> 00:12:32.160
for a new generation of IT professionals.


00:12:32.160 --> 00:12:33.960
The show covers topics like,


00:12:33.960 --> 00:12:36.280
what are the components of a software stack?


00:12:36.280 --> 00:12:38.680
Are big mistakes that big of a deal?


00:12:38.680 --> 00:12:40.480
And do you have to know how to code


00:12:40.480 --> 00:12:42.680
to get started in open source?


00:12:42.680 --> 00:12:45.280
Compiler closes the gap between those


00:12:45.280 --> 00:12:48.360
who are new to technology and those behind the inventions


00:12:48.360 --> 00:12:50.100
and services shaping our world.


00:12:50.100 --> 00:12:52.360
They bring together stories and perspectives


00:12:52.360 --> 00:12:54.360
from the industry and simplifies it,


00:12:54.360 --> 00:12:57.080
its language, culture, and movements in a way


00:12:57.080 --> 00:13:00.380
that's fun, informative, and guilt-free.


00:13:00.380 --> 00:13:02.360
I recently listened to an episode titled


00:13:02.360 --> 00:13:05.120
Testing PDFs and Donkeys.


00:13:05.120 --> 00:13:06.000
It was great.


00:13:06.000 --> 00:13:11.000
It's part of a Stack Unstuck series.


00:13:11.640 --> 00:13:14.400
It's a great series and it talks about the entire tech stack,


00:13:14.400 --> 00:13:17.080
software tech stack, especially around web stuff,


00:13:17.080 --> 00:13:19.480
starting with the great stack debate.


00:13:19.480 --> 00:13:22.800
There's episodes on front end, frameworks, fundamentals,


00:13:22.800 --> 00:13:25.800
databases, and OS, even OS is just,


00:13:25.800 --> 00:13:27.520
OS is in system calls.


00:13:27.520 --> 00:13:29.240
And then it even talks about testing,


00:13:29.240 --> 00:13:31.160
even though testing really isn't part of the,


00:13:31.160 --> 00:13:33.160
you think of as the tech stack,


00:13:33.160 --> 00:13:34.880
it's kind of part of all of it.


00:13:34.880 --> 00:13:36.200
So I'm glad they covered it,


00:13:36.200 --> 00:13:38.900
especially for people either jumping into software


00:13:38.900 --> 00:13:41.940
or software old hats like me trying on new hats


00:13:41.940 --> 00:13:44.580
like embedded systems or control systems,


00:13:44.580 --> 00:13:46.800
people learning how to do web applications.


00:13:46.800 --> 00:13:48.620
These are great overview episodes


00:13:48.620 --> 00:13:50.020
and they're timed well.


00:13:50.020 --> 00:13:52.700
They're either, they're timed how they need to be.


00:13:52.700 --> 00:13:55.460
Sometimes some of them are 45 minutes, some of them are 25.


00:13:55.460 --> 00:13:57.420
And I like that flexibility.


00:13:57.420 --> 00:14:01.620
Learn more about the compiler at pythonbytes.fm/compiler.


00:14:01.620 --> 00:14:04.380
The link is in your podcast player show notes.


00:14:04.380 --> 00:14:08.060
And thank you to Compiler for keeping this podcast going.


00:14:08.060 --> 00:14:10.620
- Yes, thank you Red Hat, thank you compiler, good show.


00:14:10.620 --> 00:14:11.640
Check it out.


00:14:11.640 --> 00:14:13.460
All right, on to the next one, Brian.


00:14:13.460 --> 00:14:14.300
- Okay.


00:14:14.300 --> 00:14:17.220
- This one is a project by Raid.


00:14:17.220 --> 00:14:20.500
And if you've worked with databases in Python,


00:14:20.500 --> 00:14:23.580
especially if you're using an ORM like SQLAlchemy,


00:14:23.580 --> 00:14:25.860
SQLModel, QE, any of these things,


00:14:25.860 --> 00:14:27.060
what's really nice about those


00:14:27.060 --> 00:14:29.100
is you create classes in Python


00:14:29.100 --> 00:14:31.060
and then through some sort of magic,


00:14:31.060 --> 00:14:32.660
somehow there's a startup thing


00:14:32.660 --> 00:14:35.620
that makes sure the database exists,


00:14:35.620 --> 00:14:38.920
that the database has tables that map over the classes.


00:14:38.920 --> 00:14:40.720
So for example, if I create a class


00:14:40.720 --> 00:14:42.880
and say it's these three columns and here's an index


00:14:42.880 --> 00:14:44.320
and this one must be unique,


00:14:44.320 --> 00:14:46.960
it'll talk to the database and make that happen.


00:14:46.960 --> 00:14:49.500
But for the rest of database management,


00:14:49.500 --> 00:14:53.240
you've got to go and write stuff in SQL


00:14:53.240 --> 00:14:56.600
or DDL, data definition language, or whatever that is, right?


00:14:56.600 --> 00:14:58.640
The stuff where you create the tables


00:14:58.640 --> 00:15:01.480
and create those types of scripts, create users.


00:15:01.480 --> 00:15:05.120
So Raid created DB declare,


00:15:05.120 --> 00:15:06.840
a declarative layer for your database


00:15:06.840 --> 00:15:10.100
that adds on on top of those types of things


00:15:10.100 --> 00:15:14.720
like SQL alchemies, what I described for that kind of work.


00:15:14.720 --> 00:15:16.920
So it's a pretty new project, people can check it out.


00:15:16.920 --> 00:15:20.720
The idea is, let me find a quick example here.


00:15:20.720 --> 00:15:23.240
So what you can do is you can come and say,


00:15:23.240 --> 00:15:25.440
I wanna create a database and it's got this name


00:15:25.440 --> 00:15:27.560
and I wanna create a role.


00:15:27.560 --> 00:15:30.040
And here they have the name of the role is a hungry user,


00:15:30.040 --> 00:15:32.120
They have to log in, here's their password.


00:15:32.120 --> 00:15:36.000
They get privileges on the certain database,


00:15:36.000 --> 00:15:38.920
and you can model out those types of things.


00:15:38.920 --> 00:15:41.000
Then on top of that, you can just use


00:15:41.000 --> 00:15:43.420
SQLAlchemy itself as part of this process.


00:15:43.420 --> 00:15:46.740
You create a SQLAlchemy engine and you call run on that,


00:15:46.740 --> 00:15:50.140
and it'll create the SQLAlchemy models.


00:15:50.140 --> 00:15:55.520
There's an example a little bit further also linked to this that shows how to do


00:15:55.520 --> 00:15:58.320
basically the standard SQLAlchemy stuff that will


00:15:58.320 --> 00:16:01.080
create the tables with the primary keys and so on.


00:16:01.080 --> 00:16:03.200
So this one's just a short one,


00:16:03.200 --> 00:16:07.320
but if you like the way that SQLAlchemy works,


00:16:07.320 --> 00:16:09.880
also with SQLAlchemy you get migrations,


00:16:09.880 --> 00:16:12.060
or with SQL Model through Alembic,


00:16:12.060 --> 00:16:14.560
the idea is that this is gonna be extended


00:16:14.560 --> 00:16:17.360
in the future as well to have some of those


00:16:17.360 --> 00:16:19.280
type of transformational behaviors,


00:16:19.280 --> 00:16:21.440
but for now it's really the extra stuff


00:16:21.440 --> 00:16:24.280
like table creation, database creation,


00:16:24.280 --> 00:16:26.480
user roles and management.


00:16:26.480 --> 00:16:28.040
So, pretty cool.


00:16:28.040 --> 00:16:30.320
People can check that out if they find that useful.


00:16:30.320 --> 00:16:33.240
Want to stay more in Python and less in SQL scripts.


00:16:33.240 --> 00:16:36.880
- Well, especially the roles and permissions,


00:16:36.880 --> 00:16:39.240
having that covered by that, that's pretty cool.


00:16:39.240 --> 00:16:42.040
That's a piece that always trips me up, so.


00:16:42.040 --> 00:16:43.880
- You don't just have like the root users


00:16:43.880 --> 00:16:47.800
have full access, just run as admin.


00:16:47.800 --> 00:16:48.640
Just kidding.


00:16:48.640 --> 00:16:50.040
(laughing)


00:16:50.040 --> 00:16:51.100
- Yeah, exactly.


00:16:51.100 --> 00:16:55.280
It always seems like it's covered as like an advanced topic,


00:16:55.280 --> 00:16:57.720
but it's almost the first thing you need to figure out.


00:16:57.720 --> 00:17:01.060
is how to separate user roles.


00:17:01.060 --> 00:17:02.700
- Right, are we gonna put this on the internet


00:17:02.700 --> 00:17:04.440
and just let people have at it


00:17:04.440 --> 00:17:06.860
or are we gonna put a little data protection in there?


00:17:06.860 --> 00:17:09.900
Anyway, people can check that out, it's a good one.


00:17:09.900 --> 00:17:11.840
- Next, let's talk about Knox.


00:17:11.840 --> 00:17:16.780
So I use both Tox and Knox on various projects.


00:17:16.780 --> 00:17:20.220
A lot of my open source stuff is Tox-based for testing


00:17:20.220 --> 00:17:22.380
just because I'm used to it.


00:17:22.380 --> 00:17:24.280
But I'm starting to use Knox more and more


00:17:24.280 --> 00:17:27.900
And I wanna cover this article by Seth Larson


00:17:27.900 --> 00:17:31.500
called Testing Multiple Python Versions with Knox


00:17:31.500 --> 00:17:33.960
and PyEnv, P-Y-E-N-V.


00:17:33.960 --> 00:17:37.040
Now I personally don't use PyEnv, but I have before.


00:17:37.040 --> 00:17:39.280
And one of the things that's tripped me up before


00:17:39.280 --> 00:17:42.320
is how to use it with like Tox and Knox.


00:17:42.320 --> 00:17:45.260
So basically even, so check this out


00:17:45.260 --> 00:17:46.680
if you wanna check this article out


00:17:46.680 --> 00:17:48.920
if you wanna learn more about Knox,


00:17:48.920 --> 00:17:52.800
but also the trick about, even if you're a Tox user,


00:17:52.800 --> 00:17:55.020
the trick about how to use PyEnv with it,


00:17:55.020 --> 00:17:57.340
with the global, there's an example here, it's awesome.


00:17:57.340 --> 00:17:59.140
So let's go over this a little bit.


00:17:59.140 --> 00:18:02.420
So if you want, one of the first things I wanna try to do


00:18:02.420 --> 00:18:04.660
with Knox, when it wasn't obvious to me


00:18:04.660 --> 00:18:07.040
from the documentation is just how do I set it up


00:18:07.040 --> 00:18:09.920
like I would talks to just test multiple,


00:18:09.920 --> 00:18:12.500
my stuff with multiple Python versions?


00:18:12.500 --> 00:18:14.900
And that's the example that shows right off the bat.


00:18:14.900 --> 00:18:18.540
You have a Knox file, it's Knox file.py,


00:18:18.540 --> 00:18:20.380
and it's Python code.


00:18:20.380 --> 00:18:24.240
So you import Knox and you can set up a session


00:18:24.240 --> 00:18:26.020
for multiple Python versions.


00:18:26.020 --> 00:18:29.940
And then within this defining test,


00:18:29.940 --> 00:18:30.880
this can be anything.


00:18:30.880 --> 00:18:34.860
So the function names of around a session are,


00:18:34.860 --> 00:18:36.980
they're just, they're what you'll use later.


00:18:36.980 --> 00:18:38.460
So we'll cover that in a little bit.


00:18:38.460 --> 00:18:42.400
But then within your session, you do stuff.


00:18:42.400 --> 00:18:44.460
You either install or run.


00:18:44.460 --> 00:18:45.540
There's probably other stuff too,


00:18:45.540 --> 00:18:47.580
but this is what I use is install and run.


00:18:47.580 --> 00:18:50.700
So installing dot means installing the current project


00:18:50.700 --> 00:18:52.020
that you're working on.


00:18:52.020 --> 00:18:54.500
And then there's an example here for requirements files.


00:18:54.500 --> 00:18:55.940
So a dev requirements,


00:18:55.940 --> 00:18:58.700
but if you're using pyproject.toml,


00:18:58.700 --> 00:19:02.100
it could be also part of your dot install if you want.


00:19:02.100 --> 00:19:03.780
And then run test, run a support,


00:19:03.780 --> 00:19:05.220
and of course run pytest.


00:19:05.220 --> 00:19:06.460
So good job, Seth.


00:19:06.460 --> 00:19:09.860
And then it goes through how to run it.


00:19:09.860 --> 00:19:12.660
So you can either just type Knox and it'll run everything,


00:19:12.660 --> 00:19:17.660
or you can say nox-s for dash session to run test.


00:19:17.660 --> 00:19:19.620
And if you wanna run a specific one,


00:19:19.620 --> 00:19:24.620
like just 3.11, Python 3.11, you can say test-3.11.


00:19:24.620 --> 00:19:27.480
I kinda like that there's a dot in there.


00:19:27.480 --> 00:19:29.720
It's pretty easy to understand.


00:19:29.720 --> 00:19:32.400
So I just really like how simple this is


00:19:32.400 --> 00:19:34.000
to get the basics down,


00:19:34.000 --> 00:19:37.560
the basics of I wanna run tests on my project


00:19:37.560 --> 00:19:39.500
on over a multiple Python versions.


00:19:39.500 --> 00:19:41.120
And this is pretty clean.


00:19:41.120 --> 00:19:45.120
This is already a decent argument to switch to Knox


00:19:45.120 --> 00:19:47.640
if you're on the fence between Tox and Knox.


00:19:47.640 --> 00:19:52.640
- I agree, and it's so nice because not only is it clean,


00:19:52.640 --> 00:19:56.120
you get auto-complete support from your editor,


00:19:56.120 --> 00:19:58.120
you get whatever editor you're using


00:19:58.120 --> 00:20:00.640
will tell you if you've done something wrong.


00:20:00.640 --> 00:20:01.880
There's more support than just,


00:20:01.880 --> 00:20:05.000
well, here's a arbitrary text file I'm typing stuff into.


00:20:05.000 --> 00:20:05.920
Hope it works.


00:20:05.920 --> 00:20:09.440
- Yeah, and then you can, I mean, I've used it also to,


00:20:09.440 --> 00:20:12.880
just like I do is talks with doing something like


00:20:12.880 --> 00:20:17.880
adding linting and coverage checks and all sorts of stuff.


00:20:17.880 --> 00:20:19.600
I do want to actually, it's one of the things


00:20:19.600 --> 00:20:21.220
I'm glad you wrote this 'cause it's a reminder.


00:20:21.220 --> 00:20:24.240
I did want to write a, like an example of the


00:20:24.240 --> 00:20:27.720
workflow differences between using talks and Knox


00:20:27.720 --> 00:20:29.960
and showing a side-by-side comparison of those two.


00:20:29.960 --> 00:20:32.320
So hopefully in the future I can get that written.


00:20:32.320 --> 00:20:34.240
But one of the things that gets me


00:20:34.240 --> 00:20:36.600
is that with the run command,


00:20:36.600 --> 00:20:40.800
You have to separate every little piece of your command by,


00:20:40.800 --> 00:20:43.440
they have to be quoted as quoted strings,


00:20:43.440 --> 00:20:46.660
like pytest tests has to be two different parameters


00:20:46.660 --> 00:20:47.740
to the run argument.


00:20:47.740 --> 00:20:49.620
And if you have a bunch of flags,


00:20:49.620 --> 00:20:52.280
each of the flag needs to be different things.


00:20:52.280 --> 00:20:55.200
Now, some people might not care about this.


00:20:55.200 --> 00:20:56.960
I kind of care and it bugs me


00:20:56.960 --> 00:20:58.560
'cause I don't have to do that with talks.


00:20:58.560 --> 00:21:00.960
So what I do is I just, since it's Python,


00:21:00.960 --> 00:21:05.200
I just write a string with all of the things


00:21:05.200 --> 00:21:08.640
that I want in it, and then I use split to create a--


00:21:08.640 --> 00:21:10.200
- Split on space, something like that.


00:21:10.200 --> 00:21:15.060
- Yeah, I just use split on space to create a array


00:21:15.060 --> 00:21:17.800
with all of the elements, and then when I run,


00:21:17.800 --> 00:21:19.840
I pass it to run and do the star thing


00:21:19.840 --> 00:21:23.440
so that it explodes it and passes it in all together.


00:21:23.440 --> 00:21:24.600
- Yeah, nice.


00:21:24.600 --> 00:21:26.400
- And then here's the trick, the magic trick


00:21:26.400 --> 00:21:31.400
about pyenv at the bottom is that if you say pyenv global


00:21:31.400 --> 00:21:33.180
and list all of the environments


00:21:33.180 --> 00:21:35.040
that you want to have available.


00:21:35.040 --> 00:21:38.880
It makes it available if you're using PyEnv.


00:21:38.880 --> 00:21:40.020
It isn't by default.


00:21:40.020 --> 00:21:42.580
So you have to run this for each session


00:21:42.580 --> 00:21:47.580
or shell invocation to get it to work for PyEnv people.


00:21:47.580 --> 00:21:50.100
But that trick works with TOCs also.


00:21:50.100 --> 00:21:52.120
And the other thing I wanted to mention


00:21:52.120 --> 00:21:55.360
was one of the things I really like about NOCs


00:21:55.360 --> 00:21:57.060
is that if you don't like it,


00:21:57.060 --> 00:22:02.060
this example has PyPy3 and 3, 8, 9, 10, 11, 12 all there.


00:22:02.380 --> 00:22:05.240
By default, Knox will not fail


00:22:05.240 --> 00:22:06.920
if you don't have one of these around.


00:22:06.920 --> 00:22:09.320
So if you only have like 3.11 installed,


00:22:09.320 --> 00:22:11.560
it'll just run that and it'll skip the others.


00:22:11.560 --> 00:22:13.480
You can make it fail if it doesn't have it,


00:22:13.480 --> 00:22:15.720
but you don't, by default, it just skips them,


00:22:15.720 --> 00:22:16.680
which is kind of cool.


00:22:16.680 --> 00:22:18.080
The Tox is the reverse.


00:22:18.080 --> 00:22:21.200
Tox is if by default, it'll fail if it's not there,


00:22:21.200 --> 00:22:24.440
but you can tell it to skip if it's not there.


00:22:24.440 --> 00:22:25.420
- Yeah, that's cool.


00:22:25.420 --> 00:22:27.360
One really quick thing if people are copying and pasting


00:22:27.360 --> 00:22:28.940
from that example, I'm pretty sure


00:22:28.940 --> 00:22:32.740
the -r dev requirements needs a -r space dev requirements


00:22:32.740 --> 00:22:34.980
in there just people are copy pasting, right?


00:22:34.980 --> 00:22:37.000
'Cause that's the command is install,


00:22:37.000 --> 00:22:39.260
pip install -r space file name.


00:22:39.260 --> 00:22:40.300
- This always surprised me.


00:22:40.300 --> 00:22:42.460
I've seen it in multiple tutorials.


00:22:42.460 --> 00:22:43.540
I don't know if that's true.


00:22:43.540 --> 00:22:46.500
I think it might be able to get away without the space.


00:22:46.500 --> 00:22:47.540
I don't know.


00:22:47.540 --> 00:22:49.620
- Okay, well, you may be able to.


00:22:49.620 --> 00:22:51.740
We can try it.


00:22:51.740 --> 00:22:52.900
Yeah, we can try it later.


00:22:52.900 --> 00:22:53.740
- Yeah.


00:22:53.740 --> 00:22:55.860
- All right, quick question for you, Brian,


00:22:55.860 --> 00:22:57.180
'cause I don't know the answer.


00:22:57.180 --> 00:23:00.340
Damien asked, does someone know if how Nox or Tox


00:23:00.340 --> 00:23:01.620
work with poetry?


00:23:01.620 --> 00:23:02.460
Do you know?


00:23:02.460 --> 00:23:03.420
- Nothing works with poetry.


00:23:03.420 --> 00:23:05.820
(laughing)


00:23:05.820 --> 00:23:07.940
I don't know actually.


00:23:07.940 --> 00:23:11.540
So poetry, I'm sure there's, I don't know.


00:23:11.540 --> 00:23:12.380
I'd be--


00:23:12.380 --> 00:23:13.980
- Probably you talked about the Pi Project


00:23:13.980 --> 00:23:17.020
Tommel integration, so I mean it probably is more or less.


00:23:17.020 --> 00:23:18.540
- It probably works.


00:23:18.540 --> 00:23:19.380
Probably.


00:23:19.380 --> 00:23:20.460
- Yeah, it probably works.


00:23:20.460 --> 00:23:22.660
I'm sure many people listening know.


00:23:22.660 --> 00:23:25.060
Sorry, Damien, I don't know either.


00:23:25.060 --> 00:23:26.900
All right.


00:23:26.900 --> 00:23:27.740
- All that thought.


00:23:27.740 --> 00:23:28.560
- All that thought, yeah.


00:23:28.560 --> 00:23:30.140
That's all of our things, isn't it, Brian?


00:23:30.140 --> 00:23:33.140
- Dude, the search, yeah, we were quick.


00:23:33.140 --> 00:23:34.460
Do you have any extras for us?


00:23:34.460 --> 00:23:36.020
- Oh, I always got extras.


00:23:36.020 --> 00:23:38.700
So let's get through here.


00:23:38.700 --> 00:23:41.260
Remember when we talked about how much drama


00:23:41.260 --> 00:23:45.080
there was around, how was it, Google maybe?


00:23:45.080 --> 00:23:49.300
Someone was giving away like 2,000 or 4,000 YubiKeys


00:23:49.300 --> 00:23:54.300
to the top 100 or top 1,000 maintainers on PyPI,


00:23:54.900 --> 00:23:57.700
maintainers of the top projects on PyPI.


00:23:57.700 --> 00:24:00.780
And that was 'cause there was gonna be a requirement


00:24:00.780 --> 00:24:05.540
for PyPI that the very top 1% or some small percent


00:24:05.540 --> 00:24:07.580
was required to have 2FA.


00:24:07.580 --> 00:24:08.420
Well, guess what?


00:24:08.420 --> 00:24:12.580
If that caused drama, wait until you hear about this.


00:24:12.580 --> 00:24:15.540
GitHub makes 2FA mandatory next week


00:24:15.540 --> 00:24:18.160
for anyone who is an active developer.


00:24:18.160 --> 00:24:24.100
So basically, if you're making contributions to projects,


00:24:24.100 --> 00:24:26.100
public projects, I believe, something like that.


00:24:26.100 --> 00:24:28.940
So, yeah, security that counts


00:24:28.940 --> 00:24:31.340
of more than 100 million users.


00:24:31.340 --> 00:24:32.780
I'm not sure exactly what the definition


00:24:32.780 --> 00:24:36.540
of an active developer versus an active contributor,


00:24:36.540 --> 00:24:38.240
'cause I might contribute to the code


00:24:38.240 --> 00:24:40.700
without writing any actual software,


00:24:40.700 --> 00:24:42.820
but whatever, it's splitting hairs.


00:24:42.820 --> 00:24:44.420
The only reason I really bring this up


00:24:44.420 --> 00:24:46.860
is not to go into depth, that's why this is an extra,


00:24:46.860 --> 00:24:51.820
but if it was a big deal that a thousand Python developers


00:24:51.820 --> 00:24:54.840
had to do 2FA and it sounded like it was.


00:24:54.840 --> 00:24:56.080
What about 100 million?


00:24:56.080 --> 00:24:58.440
It's gonna cause some drama.


00:24:58.440 --> 00:25:01.680
And then how many of those people


00:25:01.680 --> 00:25:04.420
who are contributing to PyPI are doing so


00:25:04.420 --> 00:25:06.080
in some way or another through GitHub?


00:25:06.080 --> 00:25:08.500
I would say the majority, probably.


00:25:08.500 --> 00:25:10.040
- Yeah, yeah.


00:25:10.040 --> 00:25:13.320
Actually, so I don't think it's gonna be drama.


00:25:13.320 --> 00:25:14.920
Hopefully people are just cool with it.


00:25:14.920 --> 00:25:17.960
I think that the mess up with PyPI was the dongle thing.


00:25:17.960 --> 00:25:20.800
I think people thought they had to have the hardware thing


00:25:20.800 --> 00:25:24.640
And they don't, I mean I use a software 2FA system.


00:25:24.640 --> 00:25:27.360
And it's not just them, I don't know about you,


00:25:27.360 --> 00:25:29.960
but I just looked, I got like half a dozen,


00:25:29.960 --> 00:25:33.640
dozen different things I gotta log into with Authy.


00:25:33.640 --> 00:25:36.560
- Yeah, I think I have about 30 accounts or so


00:25:36.560 --> 00:25:37.920
that are 2FA.


00:25:37.920 --> 00:25:38.760
- Yeah.


00:25:38.760 --> 00:25:40.440
- And I'm happy that I do.


00:25:40.440 --> 00:25:43.080
That is not a complaint, that's not me whining,


00:25:43.080 --> 00:25:44.600
that's me going yes.


00:25:44.600 --> 00:25:46.680
- Occasionally I'm annoyed by it.


00:25:46.680 --> 00:25:47.880
- Yes, oh yes. - Like right now,


00:25:47.880 --> 00:25:50.880
I went to the look at GitHub thing


00:25:50.880 --> 00:25:52.960
and I have to log in,


00:25:52.960 --> 00:25:54.720
so I don't have time to do that right now.


00:25:54.720 --> 00:25:57.120
So occasionally it's annoying, but--


00:25:57.120 --> 00:26:00.120
- Well, here, let me tell you why this is annoying so often.


00:26:00.120 --> 00:26:01.680
We're gonna take this and make it a whole episode,


00:26:01.680 --> 00:26:02.500
aren't we?


00:26:02.500 --> 00:26:06.680
So the reason it is annoying is there's so many places,


00:26:06.680 --> 00:26:08.440
like what is the point of the 2FA?


00:26:08.440 --> 00:26:13.440
The 2FA is if somebody steals your account login information


00:26:13.520 --> 00:26:15.840
through some kind of data breach


00:26:15.840 --> 00:26:18.880
or through password reuse or whatever,


00:26:18.880 --> 00:26:21.400
that someone else can't go and use those credentials


00:26:21.400 --> 00:26:22.740
to log in as you.


00:26:22.740 --> 00:26:24.480
They have to have the second factor.


00:26:24.480 --> 00:26:25.920
Well, here's why it's annoying.


00:26:25.920 --> 00:26:30.600
Every time I log into my credit card processor,


00:26:30.600 --> 00:26:33.780
I think almost every time I log into DigitalOcean,


00:26:33.780 --> 00:26:36.880
it's like, "Hey, how you doing?


00:26:36.880 --> 00:26:38.400
What's your 2FA factor?"


00:26:38.400 --> 00:26:41.240
It's like, I've given that to you about 100 times


00:26:41.240 --> 00:26:42.920
in the same browser, right?


00:26:42.920 --> 00:26:44.600
it should at some point go, you know what?


00:26:44.600 --> 00:26:46.880
They've given us the 2FA, we trust them.


00:26:46.880 --> 00:26:49.940
It's not, I'm not concerned someone is on my computer,


00:26:49.940 --> 00:26:51.800
logging into my thing.


00:26:51.800 --> 00:26:54.920
I'm concerned about the seven other billion people


00:26:54.920 --> 00:26:57.340
who might want to log in from somewhere else, right?


00:26:57.340 --> 00:27:00.000
So I think there should be a little bit of like,


00:27:00.000 --> 00:27:02.760
hey, if you've already logged in on this device,


00:27:02.760 --> 00:27:05.000
maybe you don't need the 2FA every time.


00:27:05.000 --> 00:27:06.480
Could you even refresh it monthly,


00:27:06.480 --> 00:27:08.640
but not four times this morning, right?


00:27:08.640 --> 00:27:11.600
That's when I'm like, ah, 2FA, it's driving me nuts.


00:27:11.600 --> 00:27:12.440
So that's my--


00:27:12.440 --> 00:27:15.840
But I mean, to be fair, GitHub doesn't do that or PyPI.


00:27:15.840 --> 00:27:17.000
- No, GitHub is great.


00:27:17.000 --> 00:27:18.720
GitHub, I have no complaints.


00:27:18.720 --> 00:27:22.320
- Okay, 'cause I don't have to do it every time for GitHub.


00:27:22.320 --> 00:27:24.760
So, and I've been-- - No, no, GitHub's really good.


00:27:24.760 --> 00:27:26.720
- Yeah, and I've been using 2FA for GitHub


00:27:26.720 --> 00:27:27.560
for quite a long time.


00:27:27.560 --> 00:27:29.640
It's been optional for a long time.


00:27:29.640 --> 00:27:31.600
So, or a while at least.


00:27:31.600 --> 00:27:32.960
I have a very short memory.


00:27:32.960 --> 00:27:34.200
I'm really good with open source


00:27:34.200 --> 00:27:36.200
because I have the same memory span


00:27:36.200 --> 00:27:40.520
as the general technology memory of open source.


00:27:40.520 --> 00:27:42.080
(laughing)


00:27:42.080 --> 00:27:43.380
- Nice.


00:27:43.380 --> 00:27:46.340
All right, I have one other really quick thing.


00:27:46.340 --> 00:27:48.900
You know, Brian, we always have good luck


00:27:48.900 --> 00:27:51.060
reaching out to our listeners about things.


00:27:51.060 --> 00:27:52.640
And this one is a little bit different.


00:27:52.640 --> 00:27:55.700
So I recently got a brand new adventure motorcycle


00:27:55.700 --> 00:27:58.300
as of last week, which is awesome.


00:27:58.300 --> 00:28:00.700
And I found some fun places to take it and ride.


00:28:00.700 --> 00:28:02.780
Like I rode up into the snow around here


00:28:02.780 --> 00:28:05.700
in the coastal range and stuff like that.


00:28:05.700 --> 00:28:08.740
I'm looking for somewhere fun in the Northwest


00:28:08.740 --> 00:28:13.340
to go riding that's like not intense motocross off-road,


00:28:13.340 --> 00:28:14.780
but you know, would be a lot of fun--


00:28:14.780 --> 00:28:16.380
- Just a nice view.


00:28:16.380 --> 00:28:18.180
- Yeah, just get out in the woods


00:28:18.180 --> 00:28:20.340
and cruise around in the summer, the spring.


00:28:20.340 --> 00:28:23.460
So listeners out there who know where to ride around here,


00:28:23.460 --> 00:28:27.140
that's not one of the couple huge off-road vehicle


00:28:27.140 --> 00:28:29.620
like state sponsored areas around Portland.


00:28:29.620 --> 00:28:33.380
People got it, shoot it in, and if you wanna know


00:28:33.380 --> 00:28:35.380
why I kinda got this bike, how much fun it was,


00:28:35.380 --> 00:28:36.700
there's a cool video I linked to


00:28:36.700 --> 00:28:40.260
with Ben Townley and another guy,


00:28:40.260 --> 00:28:43.800
something Raymond, I can't remember his first name.


00:28:43.800 --> 00:28:44.940
Anyway, you can check that out.


00:28:44.940 --> 00:28:47.300
And yeah, that's all I got for my extras.


00:28:47.300 --> 00:28:48.140
How about you?


00:28:48.140 --> 00:28:50.420
- I mean, while we're asking for contributors,


00:28:50.420 --> 00:28:53.980
we just passed, we were driving around this weekend


00:28:53.980 --> 00:28:58.980
and saw a group of 10, 20 people riding motorcycles.


00:28:58.980 --> 00:29:03.440
And since we've got a couple Harley places around here,


00:29:03.440 --> 00:29:06.180
so there are Harley groups around.


00:29:06.180 --> 00:29:09.820
But when I was a kid, I was scared of these people.


00:29:09.820 --> 00:29:12.780
And these people, just people with motorcycles,


00:29:12.780 --> 00:29:14.220
mostly wearing black leather.


00:29:14.220 --> 00:29:16.260
But now they're like, I mean,


00:29:16.260 --> 00:29:18.700
it's mostly people my age or older,


00:29:18.700 --> 00:29:21.820
you know, it's 50 to 70 year olds riding motorbikes


00:29:21.820 --> 00:29:23.580
just to hang out with their friends.


00:29:23.580 --> 00:29:24.400
Well, that's cool.


00:29:24.400 --> 00:29:25.900
I mean, at least that's what I see.


00:29:25.900 --> 00:29:29.260
But I think it'd be cool if I could see,


00:29:29.260 --> 00:29:31.380
are there e-bike gangs?


00:29:31.380 --> 00:29:36.100
Or are there e-bike groups of people


00:29:36.100 --> 00:29:38.460
just a bunch of e-bikes riding together or?


00:29:38.460 --> 00:29:40.580
Anyway, some of these e-bikes are awesome.


00:29:40.580 --> 00:29:43.220
Like electric bicycles, they're so cool.


00:29:43.220 --> 00:29:45.140
And I'm sure there are actually.


00:29:45.140 --> 00:29:45.980
But how are you gonna find them, right?


00:29:45.980 --> 00:29:48.180
- It'd be cool to see a picture of like a bunch of them.


00:29:48.180 --> 00:29:49.580
Anyway.


00:29:49.580 --> 00:29:50.420
- Do you have to have to get one of those


00:29:50.420 --> 00:29:51.620
club patches for it?


00:29:51.620 --> 00:29:52.460
- Can we get probably a little--


00:29:52.460 --> 00:29:54.060
- Do you have any extras before?


00:29:54.060 --> 00:29:56.460
- No, I don't have any extras.


00:29:56.460 --> 00:29:59.380
I was just BSing, so let's do a joke.


00:29:59.380 --> 00:30:01.020
- All right, let's do a joke.


00:30:01.020 --> 00:30:03.380
And, boy, I didn't do this, I didn't plan this,


00:30:03.380 --> 00:30:05.100
but boy, did it line up good.


00:30:05.100 --> 00:30:08.420
So this one comes to us from ProgrammingHumor on Reddit.


00:30:08.420 --> 00:30:10.620
And just check out this picture, Brian, here really quick.


00:30:10.620 --> 00:30:13.080
Describe the picture to folks.


00:30:13.080 --> 00:30:15.420
You see this?


00:30:15.420 --> 00:30:16.260
- I don't know what it means.


00:30:16.260 --> 00:30:17.940
- Some sort of login into GitHub.


00:30:17.940 --> 00:30:18.780
- Okay.


00:30:18.780 --> 00:30:22.320
- And somebody's gotta do a code review here in the morning.


00:30:22.320 --> 00:30:25.760
- Oh, there's over a million lines changed.


00:30:25.760 --> 00:30:26.780
And 20 deletions.


00:30:26.780 --> 00:30:30.460
- 1,094,000 lines changed, 20 removed,


00:30:30.460 --> 00:30:35.320
so not too bad there, but 2,945 files to review


00:30:35.320 --> 00:30:36.700
and zero of those.


00:30:36.700 --> 00:30:38.360
It's like, let's get started.


00:30:38.360 --> 00:30:43.840
So the title is, anyone else have this kind of colleague?


00:30:43.840 --> 00:30:45.300
What a way to start a Monday.


00:30:45.300 --> 00:30:49.720
- So, any guesses what they did?


00:30:49.720 --> 00:30:52.680
I'm guessing they applied black to their project


00:30:52.680 --> 00:30:55.220
and just changed everything.


00:30:55.220 --> 00:30:56.280
- Yeah, maybe.


00:30:56.280 --> 00:30:59.180
The comments section's pretty good too.


00:30:59.180 --> 00:31:02.960
Someone else suggested that maybe the git commit message


00:31:02.960 --> 00:31:04.340
is fixed typo.


00:31:04.340 --> 00:31:05.180
- Fixed typo.


00:31:05.180 --> 00:31:06.000
(laughing)


00:31:06.000 --> 00:31:07.700
- Or something like that.


00:31:07.700 --> 00:31:10.140
Added stuff, small update.


00:31:10.140 --> 00:31:11.420
- Small update, yeah.


00:31:11.420 --> 00:31:13.620
That's funny.


00:31:13.620 --> 00:31:15.340
Reformatted every line of code.


00:31:15.340 --> 00:31:17.540
- Exactly.


00:31:17.540 --> 00:31:21.940
So, it's Case of the Mondays, one of the best shows ever.


00:31:21.940 --> 00:31:23.920
- Replace all spaces with tabs.


00:31:23.920 --> 00:31:26.580
- Exactly.


00:31:26.580 --> 00:31:27.740
- Nice.


00:31:27.740 --> 00:31:29.020
So, anyway, cool.


00:31:29.020 --> 00:31:30.500
All right, well, that's what I got for you.


00:31:30.500 --> 00:31:33.180
- For this wonderful episode, I had a lot of fun.


00:31:33.180 --> 00:31:34.020
Hope everybody else did too.


00:31:34.020 --> 00:31:35.180
- Yeah, I did too.


00:31:35.180 --> 00:31:36.420
Thanks everyone for listening.


00:31:36.420 --> 00:31:37.260
See y'all later.

