WEBVTT

00:00:00.001 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.000 --> 00:00:11.580
This is episode 327, recorded March 13th, 2023, and I am Brian Okken.

00:00:11.580 --> 00:00:13.100
And I am Michael Kennedy.

00:00:13.100 --> 00:00:17.240
This week's episode is sponsored by Compiler Podcast from Red Hat.

00:00:17.240 --> 00:00:19.460
Listen to their spot later in the show.

00:00:19.460 --> 00:00:25.920
And connect with the show on Fostadon at pythonbytes at fostadon.org.

00:00:25.920 --> 00:00:31.780
And both Brian and Michael are there also, Brian Okken and M. Kennedy.

00:00:31.780 --> 00:00:41.440
You can also join us on YouTube or join us live by going to pythonbytes.fm/live to be a part of the audience.

00:00:41.440 --> 00:00:42.640
It's really kind of fun.

00:00:42.640 --> 00:00:44.560
Usually it's Tuesdays at 11.

00:00:44.560 --> 00:00:47.860
This week it's Monday, but usually it's Tuesdays at 11.

00:00:47.860 --> 00:00:52.660
And you can watch older videos on the YouTubes as well.

00:00:52.660 --> 00:00:56.240
So thanks, Michael, for showing up again this week.

00:00:56.240 --> 00:00:58.820
We've got quite a few episodes under our belt.

00:00:58.820 --> 00:01:01.040
So are you excited to get started?

00:01:01.040 --> 00:01:01.460
We do.

00:01:01.460 --> 00:01:02.440
I am.

00:01:02.440 --> 00:01:07.300
You know, technology can be a tangled mess sometimes.

00:01:07.300 --> 00:01:10.620
And not long ago we spoke about Untangle.

00:01:11.180 --> 00:01:15.340
And then, I believe it was Ian, sent in and said, you know, that was really cool.

00:01:15.340 --> 00:01:15.880
Yeah, it was Ian.

00:01:15.880 --> 00:01:16.380
Thank you.

00:01:16.380 --> 00:01:19.640
Said, I know you're a huge fan of Pydantic.

00:01:19.640 --> 00:01:20.520
It's true.

00:01:20.520 --> 00:01:31.080
And maybe you want to check out something that is similar to Untangle, which would let you talk to XML through Python in an object-oriented style way.

00:01:31.080 --> 00:01:32.340
A little more dynamic.

00:01:32.860 --> 00:01:37.740
So he sent in Pydantic, the Pydantic-XML extension.

00:01:37.740 --> 00:01:38.660
Have you heard of this, Brian?

00:01:38.660 --> 00:01:39.300
No.

00:01:39.300 --> 00:01:40.260
No, I hadn't either.

00:01:40.260 --> 00:01:41.300
It's totally news to me.

00:01:41.300 --> 00:01:49.720
But the idea is basically, you know, the way Pydantic traditionally works is you point it at a JSON file or a Python dictionary.

00:01:49.800 --> 00:01:55.460
And it can create an object graph hierarchy of all the pieces that it knows.

00:01:55.460 --> 00:02:03.440
So you can say it has a name and a number, but then also has a list of locations and the locations model of these Pydantic objects and so on.

00:02:03.440 --> 00:02:06.640
And that's how Pydantic has worked from day one, more or less.

00:02:06.640 --> 00:02:12.900
It's based on dictionaries because that's the way that you speak APIs, right?

00:02:12.900 --> 00:02:16.280
And so it was very closely tied to APIs and JSON exchange there.

00:02:16.280 --> 00:02:20.060
So this one does basically the same thing, but for XML.

00:02:20.060 --> 00:02:21.800
And it's glorious, right?

00:02:21.800 --> 00:02:27.740
It's glorious with the data validation, the required versus optional, the type conversion, all of those things.

00:02:27.740 --> 00:02:30.600
It supports dictionaries, listsets, tuples, unions.

00:02:30.600 --> 00:02:36.140
It has LXML parser support for high-speed parser processing.

00:02:36.140 --> 00:02:46.300
You can pass in an element tree as well, which is the XML-etree-element tree class, which allows you to do parsing traditionally.

00:02:46.300 --> 00:02:48.180
So how do you get going?

00:02:48.180 --> 00:02:52.200
Well, you create a class here with pure Pydantic.

00:02:52.200 --> 00:02:53.460
You derive from base model.

00:02:53.460 --> 00:02:55.960
Here you derive from base XML model.

00:02:55.960 --> 00:02:58.040
So it's slightly different, but, you know, it's fine.

00:02:58.040 --> 00:02:58.980
And check this out.

00:02:58.980 --> 00:03:08.080
In the XML document that they're talking about here, there's a top-level node has a thing called status, an attribute called status in XML.

00:03:08.080 --> 00:03:08.600
Okay.

00:03:08.600 --> 00:03:12.380
And, yeah, or in the product it does, part of it anyway.

00:03:12.380 --> 00:03:15.540
It has two possible valid values.

00:03:15.540 --> 00:03:17.500
It can either be running or in development.

00:03:17.500 --> 00:03:21.000
It can't be ran or prod or any.

00:03:21.000 --> 00:03:22.260
It has to be those two words.

00:03:22.260 --> 00:03:28.460
So because it's Pydantic, you can just say the type of this is a literal running comma development.

00:03:28.460 --> 00:03:29.380
Isn't that awesome?

00:03:29.380 --> 00:03:30.180
And that's it.

00:03:30.180 --> 00:03:30.640
That is pretty good.

00:03:30.640 --> 00:03:32.860
You're done validating that that is correct.

00:03:32.860 --> 00:03:41.220
And you set that equal to an adder, which means it's not coming from the body of the XML node, but it's coming from this attribute name status down here.

00:03:41.220 --> 00:03:42.440
So cool, huh?

00:03:42.440 --> 00:03:43.080
Yeah.

00:03:43.080 --> 00:03:45.120
Then you can have launched.

00:03:45.120 --> 00:03:48.100
You could have launched, which is a numerical date.

00:03:48.100 --> 00:03:55.880
So the running ones have 2023 and 2019 as launched, but the one that's in development, well, it doesn't have a launch date, so it's missing.

00:03:55.880 --> 00:03:59.500
So the optional aspect of Pydantic is at play here.

00:03:59.500 --> 00:04:02.700
And then there's a title for that element.

00:04:02.700 --> 00:04:10.960
And that just comes, you say it's string, it just comes straight out of the body of the node because it's not set to an attribute, but it's just the base one.

00:04:10.960 --> 00:04:13.340
I guess, presumably, you can only have one of those per node.

00:04:13.340 --> 00:04:13.940
Okay.

00:04:13.940 --> 00:04:17.800
So is title special or can you name it whatever you want then?

00:04:18.060 --> 00:04:19.400
You can name it whatever you want, I'm pretty sure.

00:04:19.400 --> 00:04:19.820
Okay.

00:04:19.820 --> 00:04:20.380
Yeah.

00:04:20.380 --> 00:04:21.240
Oh, yeah.

00:04:21.240 --> 00:04:22.920
It says extracted from the element text.

00:04:22.920 --> 00:04:23.240
Nice.

00:04:23.240 --> 00:04:23.660
Okay.

00:04:23.660 --> 00:04:24.520
Yeah, yeah, exactly.

00:04:24.520 --> 00:04:29.280
And so then the overall XML document, I had it reversed when I first started talking about this.

00:04:29.280 --> 00:04:31.420
There's a company and the company has products, right?

00:04:31.420 --> 00:04:32.700
So there's a company class.

00:04:32.700 --> 00:04:36.720
It has a trade name from its attribute, SpaceX in this case.

00:04:36.720 --> 00:04:40.560
And then it has a node, which has a website as its text value.

00:04:40.620 --> 00:04:44.480
But the text value is HTTPSSpaceX.com, right?

00:04:44.480 --> 00:04:50.840
And so you can say the type is a URL and it'll actually parse it out as a URL, not just a string, which is really cool.

00:04:50.840 --> 00:04:51.360
Okay.

00:04:51.360 --> 00:04:59.060
And then in standard Pydantic style, it has a list of products and you give it the tag name that it's product.

00:04:59.060 --> 00:05:02.120
The node name is product and it just loops through that list.

00:05:02.120 --> 00:05:06.300
Isn't that a clever way to parse that with validation and data conversion and all that?

00:05:06.520 --> 00:05:20.780
Not only that, I'm really glad you walked me through it because the first time I looked at this, I was a little bit lost on how to think about this and how it's building it up from different components and attributes and elements.

00:05:20.780 --> 00:05:21.660
It's pretty neat.

00:05:21.660 --> 00:05:22.320
Yeah.

00:05:22.320 --> 00:05:25.520
If I've got to do XML again, I'm all over this.

00:05:25.520 --> 00:05:31.780
So there's a bunch of stuff about how you talk about heterogeneous collections, aliases, union types, model.

00:05:31.780 --> 00:05:32.780
You can go through it if you want.

00:05:32.780 --> 00:05:38.120
But I think this little quick getting started bit they have right at the top of the website that I'm linking to.

00:05:38.120 --> 00:05:39.380
That's pretty good.

00:05:39.380 --> 00:05:40.280
Yeah.

00:05:40.280 --> 00:05:40.860
Nice.

00:05:40.860 --> 00:05:41.300
Cool.

00:05:41.300 --> 00:05:41.680
Very good.

00:05:41.680 --> 00:05:41.980
Yeah.

00:05:41.980 --> 00:05:43.300
Anyway, that one's a great one.

00:05:43.300 --> 00:05:44.340
Thanks, Ian, for sending that in.

00:05:44.340 --> 00:05:45.720
I'm psyched to know about it.

00:05:45.720 --> 00:05:50.340
Well, next, I kind of want to talk about virtual environments.

00:05:50.340 --> 00:05:56.540
So I use the virtual environment, VENV, built into Python.

00:05:56.540 --> 00:06:04.360
I, in the past, have used the virtualenv extra package that you can install.

00:06:04.360 --> 00:06:09.940
But since, I don't know, it's been quite a few versions of Python, the built-in one's pretty darn good.

00:06:09.940 --> 00:06:11.920
So I'm happy with it.

00:06:11.920 --> 00:06:17.440
Anyway, there's a lot of people that kind of don't really get how they work.

00:06:17.680 --> 00:06:23.620
Trying to get people on board with that they should use them is great, but trying to use them effectively.

00:06:23.620 --> 00:06:33.820
Like, one of the mistakes I've seen a lot of people make with virtual environments is using them, but then when they go to test in CI, actually trying to activate the virtual environment.

00:06:33.820 --> 00:06:35.100
And you don't really have to.

00:06:35.620 --> 00:06:39.080
You can just use the binaries directly.

00:06:39.080 --> 00:06:42.380
And so I'm really happy this article is around.

00:06:42.380 --> 00:06:47.200
So Brett Cannon wrote an article called How Virtual Environments Work.

00:06:47.200 --> 00:06:49.180
And this is excellent.

00:06:49.180 --> 00:06:50.440
And it's a short read.

00:06:50.440 --> 00:06:58.580
So one of the things that starts with a little history, not a lot of history, just a little to remind people that back in the day,

00:06:59.300 --> 00:07:04.140
we had global and the working directory or your current directory, and that's it.

00:07:04.140 --> 00:07:06.020
It wasn't anything else.

00:07:06.020 --> 00:07:12.180
And I kind of remember this of trying to find if I'm sharing some code, trying to find some on the web,

00:07:12.180 --> 00:07:15.580
and then just downloading it and sticking in my directory and see if it works.

00:07:15.580 --> 00:07:16.960
It's just part of your code now.

00:07:16.960 --> 00:07:19.080
That's not what we have today.

00:07:19.080 --> 00:07:21.760
And partly in thanks to virtual environments.

00:07:21.760 --> 00:07:23.980
So it's better now.

00:07:23.980 --> 00:07:25.660
You can still complain about them.

00:07:25.660 --> 00:07:26.220
That's fine.

00:07:26.220 --> 00:07:27.360
But it's better now.

00:07:27.360 --> 00:07:30.280
And then he goes on to talk about the structure.

00:07:30.280 --> 00:07:33.100
And there's really not much there.

00:07:33.100 --> 00:07:37.840
I mean, when you're building a virtual environment, it's kind of a lightweight throwaway thing.

00:07:37.840 --> 00:07:39.860
Don't think of it as this huge thing.

00:07:39.860 --> 00:07:41.240
It's just a little directory.

00:07:41.240 --> 00:07:48.180
And it's got a bin and an include and a site packages directory for the Python that you're using.

00:07:48.180 --> 00:07:50.940
And on Windows, it's a little different.

00:07:50.940 --> 00:07:53.080
But we'll just hand wave around that.

00:07:53.720 --> 00:07:59.000
In the Unix environment, it's mostly symbolic links to, I mean, you do have stuff installed there.

00:07:59.760 --> 00:08:05.860
But as far as replicating the Python environment, it's your Python interpreter isn't copied in there.

00:08:05.860 --> 00:08:07.060
It's symbolic linked.

00:08:07.060 --> 00:08:08.920
So you don't have to worry about that too much.

00:08:08.920 --> 00:08:14.120
It's the site packages and the bin and everything and how that's there.

00:08:14.120 --> 00:08:16.320
So how does Python deal with that?

00:08:16.420 --> 00:08:21.580
Well, it deals with it through a pyvenv.cfg.

00:08:21.580 --> 00:08:32.480
It's a config file that tells Python when you run Python from this virtual environment where the home directory should be, where the system, whether or not to include system packages in the site packages.

00:08:32.680 --> 00:08:40.140
And then the version and the executable and some other stuff like the command, if you wanted to recreate it.

00:08:40.140 --> 00:08:41.260
I don't know why that's there.

00:08:41.260 --> 00:08:52.460
But in general, this is enough to tell Python if you just run it from that environment that you just get all the right stuff.

00:08:53.700 --> 00:08:56.260
And so if you're putting it in a script, just use those.

00:08:56.260 --> 00:09:00.480
But if you're using it from the shell, then, of course, you're going to activate the shell.

00:09:00.480 --> 00:09:05.940
But the activation, he's stressing, and this is important to understand, it's optional.

00:09:05.940 --> 00:09:10.060
You don't have to hit activate as long as you're calling stuff within the environment.

00:09:10.060 --> 00:09:15.540
And it kind of goes on to talk about really what it's doing.

00:09:15.540 --> 00:09:17.960
What does the activation do, though, if you're curious?

00:09:17.960 --> 00:09:19.240
It doesn't do much.

00:09:19.240 --> 00:09:21.720
It sticks some stuff in your path.

00:09:22.800 --> 00:09:28.520
And it's like a virtual environment, sets a virtual environment variable.

00:09:28.520 --> 00:09:31.980
And it registers a deactivate shell function.

00:09:31.980 --> 00:09:33.000
And that's about it.

00:09:33.000 --> 00:09:36.660
It changes your prompt, too, to let you know that you've activated it, which is cool.

00:09:36.660 --> 00:09:51.280
And then he goes on to talk about how partly why he's dug into this lately is because for VS Code, they're creating a little tiny, but you can use it anywhere you want, a extra extension called microvenv.

00:09:51.900 --> 00:09:52.900
Microvenv.

00:09:52.900 --> 00:09:53.900
I don't know.

00:09:53.900 --> 00:10:00.100
So this is a single file, less than 100 lines to kind of emulate all of that.

00:10:00.100 --> 00:10:07.580
And the reason is because Debian doesn't include virtual environments by default.

00:10:07.580 --> 00:10:09.540
So they kind of have to want to work around that.

00:10:09.740 --> 00:10:12.400
So anyway, really great summary of virtual environments.

00:10:12.400 --> 00:10:12.900
Yeah.

00:10:12.900 --> 00:10:16.240
I'm peeling away a little bit of the magic to let you know what's happening in there, right?

00:10:16.460 --> 00:10:16.820
Yeah.

00:10:16.820 --> 00:10:24.620
Well, and also because it's sort of magical to some people, a lot of people are concerned about like trying to copy it or something.

00:10:25.240 --> 00:10:31.860
And you shouldn't have anything kept that's important within your virtual environment.

00:10:31.860 --> 00:10:34.080
You should be able to recreate it whenever you want.

00:10:34.760 --> 00:10:36.360
So there should be lightweight things.

00:10:36.360 --> 00:10:42.560
Oh, the one thing I really wanted to highlight, the reason why I really wanted to talk about this was because of a flag.

00:10:42.960 --> 00:10:44.420
So where's that flag?

00:10:44.420 --> 00:10:47.580
There's a flag, dash, dash.

00:10:47.580 --> 00:10:49.920
I've got to find it.

00:10:49.920 --> 00:10:51.520
Do you know what I'm talking about?

00:10:51.520 --> 00:10:52.100
Anyway.

00:10:52.100 --> 00:10:52.580
Okay.

00:10:52.920 --> 00:10:54.000
I'll help you search.

00:10:54.000 --> 00:11:00.680
There's like no, there's like, like, yeah, without pip.

00:11:00.680 --> 00:11:02.480
Dash, dash, without dash pip.

00:11:02.480 --> 00:11:02.960
Okay.

00:11:02.960 --> 00:11:08.900
So without pip, excellent thing to know about because, oh, here it is.

00:11:08.900 --> 00:11:10.680
BNV without pip.

00:11:10.680 --> 00:11:12.140
That will get it.

00:11:12.140 --> 00:11:15.820
So that doesn't ask you, ask you to upgrade pip.

00:11:15.820 --> 00:11:21.300
So especially in CI and other places, you don't, you don't care about upgrading it right now.

00:11:21.380 --> 00:11:24.360
I mean, I get it if I'm in the development mode.

00:11:24.360 --> 00:11:25.700
I do want to upgrade it.

00:11:25.700 --> 00:11:26.940
I want to use the latest one.

00:11:26.940 --> 00:11:32.460
But in a CI environment or a lot of automated places, I don't need to do that.

00:11:32.460 --> 00:11:33.800
I can just use whatever's there.

00:11:33.800 --> 00:11:34.520
It's going to be fine.

00:11:34.520 --> 00:11:36.800
So turning that off is awesome.

00:11:36.800 --> 00:11:37.640
And it saves some time.

00:11:37.640 --> 00:11:42.480
It's not just, it doesn't say not, it isn't really not install pip or upgrade.

00:11:42.480 --> 00:11:44.040
It just doesn't try.

00:11:44.040 --> 00:11:47.120
So it assumes pip's already there is all.

00:11:47.120 --> 00:11:48.220
It uses the system pip.

00:11:48.220 --> 00:11:49.100
So that's it.

00:11:49.100 --> 00:11:49.800
Cool.

00:11:49.800 --> 00:11:50.340
That's cool.

00:11:50.660 --> 00:11:53.300
Yeah, it just falls back to the global one, but runs it for that environment.

00:11:53.300 --> 00:11:53.860
Yeah.

00:11:53.860 --> 00:11:54.360
Yeah.

00:11:54.360 --> 00:11:57.880
And apparently it saves a lot of time of that.

00:11:57.880 --> 00:11:58.660
So that's great.

00:11:58.660 --> 00:11:59.820
Very cool.

00:11:59.820 --> 00:12:00.300
Very cool.

00:12:00.300 --> 00:12:03.280
Well, before we move on, our sponsor.

00:12:03.280 --> 00:12:04.180
Oh, yeah.

00:12:04.180 --> 00:12:05.200
Let's cover our sponsor.

00:12:05.200 --> 00:12:10.480
And I really, really appreciate Red Hat and the compiler podcast for sponsoring this episode.

00:12:10.480 --> 00:12:20.120
So just like you, both Michael and I are big fans of podcasts and really happy to share a new one from a highly respected open source company.

00:12:20.120 --> 00:12:23.680
Compiler is an original podcast from Red Hat.

00:12:23.880 --> 00:12:31.820
Compiler brings together a curious team of Red Haters to simplify tech topics and provide insight for a new generation of IT professionals.

00:12:31.820 --> 00:12:35.980
The show covers topics like what are the components of a software stack?

00:12:35.980 --> 00:12:38.180
Are big mistakes that big of a deal?

00:12:38.180 --> 00:12:41.780
And do you have to know how to code to get started in open source?

00:12:41.780 --> 00:12:49.820
Compiler closes the gap between those who are new to technology and those behind the inventions and services shaping our world.

00:12:49.820 --> 00:12:59.540
They bring together stories and perspectives from the industry and simplifies its language, culture, and movements in a way that's fun, informative, and guilt-free.

00:12:59.540 --> 00:13:04.240
I recently listened to an episode titled Testing PDFs and Donkeys.

00:13:04.240 --> 00:13:05.540
It was great.

00:13:05.540 --> 00:13:10.580
It's part of a Stack Unstuck series.

00:13:10.580 --> 00:13:19.180
It's a great series, and it talks about the entire tech stack, software tech stack, especially around web stuff, starting with the great stack debate.

00:13:19.180 --> 00:13:24.480
There's episodes on front-end frameworks, fundamentals, databases, and OS.

00:13:24.480 --> 00:13:29.080
Even OS is in system calls, and then it even talks about testing.

00:13:29.080 --> 00:13:34.780
Even though testing really isn't part of what you think of as the tech stack, it's kind of part of all of it.

00:13:34.780 --> 00:13:46.280
So I'm glad they covered it, especially for people either jumping into software or software old hats like me trying on new hats like embedded systems or control systems, people learning how to do web applications.

00:13:46.280 --> 00:13:49.160
These are great overview episodes, and they're going to be a great episode.

00:13:49.160 --> 00:13:49.920
They're timed well.

00:13:49.920 --> 00:13:52.620
They're timed how they need to be.

00:13:52.620 --> 00:13:54.240
Some of them are 45 minutes.

00:13:54.240 --> 00:13:56.780
Some of them are 25, and I like that flexibility.

00:13:56.780 --> 00:14:01.340
Learn more about the compiler at pythonbytes.fm.compiler.

00:14:01.340 --> 00:14:07.760
The link is in your podcast player show notes, and thank you to Compiler for keeping this podcast going.

00:14:08.460 --> 00:14:09.040
Thank you, Red Hat.

00:14:09.040 --> 00:14:09.700
Thank you, Compiler.

00:14:09.700 --> 00:14:10.280
Good show.

00:14:10.280 --> 00:14:11.000
Check it out.

00:14:11.000 --> 00:14:11.860
All right.

00:14:11.860 --> 00:14:13.020
On to the next one, Brian.

00:14:13.020 --> 00:14:13.680
Okay.

00:14:13.680 --> 00:14:16.220
This one is a project by Raid.

00:14:17.200 --> 00:14:28.660
And if you've worked with databases in Python, especially if you're using an ORM like SQLAlchemy, SQL Model, Kiwi, any of these things, what's really nice about those is you create classes in Python.

00:14:28.660 --> 00:14:38.540
And then through some sort of magic, somehow there's a startup thing that makes sure the database exists, that the database has tables that map over the classes.

00:14:39.040 --> 00:14:46.720
So, for example, if I create a class and say it's these three columns, and here's an index, and this one must be unique, it'll talk to the database and make that happen.

00:14:46.720 --> 00:14:56.520
But for the rest of database management, you've got to go and write stuff in SQL or DDL, data definition language, or whatever that is, right?

00:14:56.520 --> 00:15:01.140
The stuff where you create the tables and create those types of scripts, create users.

00:15:01.640 --> 00:15:14.580
So, Raid created DB declare, a declarative layer for your database that adds on top of those types of things, like SQLAlchemy is what I described, for that kind of work.

00:15:14.580 --> 00:15:15.720
So, it's a pretty new project.

00:15:15.720 --> 00:15:16.620
People can check it out.

00:15:16.620 --> 00:15:20.620
The idea is, let me find a quick example here.

00:15:20.620 --> 00:15:27.300
So, what you can do is you can come and say, I want to create a database, and it's got this name, and I want to create a role.

00:15:27.300 --> 00:15:29.720
And here they have the name of the role as a hungry user.

00:15:29.720 --> 00:15:30.920
They have to log in.

00:15:31.040 --> 00:15:31.780
Here's their password.

00:15:31.780 --> 00:15:35.360
They get privileges on this certain database.

00:15:35.360 --> 00:15:38.760
And you can model out those types of things.

00:15:38.760 --> 00:15:43.300
And then on top of that, you can just use SQLAlchemy itself as part of this process.

00:15:43.300 --> 00:15:46.580
You create a SQLAlchemy engine, and you call run on that.

00:15:46.580 --> 00:15:49.760
And you can also, it'll create the SQLAlchemy models.

00:15:49.760 --> 00:16:00.600
There's an example a little bit further, I'll also link to this, that shows how to do basically the standard SQLAlchemy stuff that will create the tables with the primary keys and so on.

00:16:00.940 --> 00:16:03.160
So, this one's just a short one.

00:16:03.160 --> 00:16:09.340
But if you like the way that SQLAlchemy works, also with SQLAlchemy, you get migrations.

00:16:09.340 --> 00:16:11.720
Or with SQL model through Alembic.

00:16:11.720 --> 00:16:19.040
The idea is that this is going to be extended in the future as well to have some of those type of transformational behaviors.

00:16:19.040 --> 00:16:26.080
But for now, it's really the extra stuff like table creation, database creation, user roles, and management.

00:16:26.080 --> 00:16:27.740
So, pretty cool.

00:16:27.740 --> 00:16:29.960
People can check that out if they find that useful.

00:16:29.960 --> 00:16:32.880
Want to stay more in Python and less in SQL scripts.

00:16:33.260 --> 00:16:39.140
Well, especially the roles and permissions, having that covered by that, that's pretty cool.

00:16:39.140 --> 00:16:41.500
That's a piece that always trips me up.

00:16:41.500 --> 00:16:47.260
You don't just have the root user, just have read access, full access, just run as admin.

00:16:47.260 --> 00:16:48.120
Just kidding.

00:16:49.700 --> 00:16:50.640
Yeah, exactly.

00:16:50.640 --> 00:16:57.640
It always seems like it's covered as an advanced topic, but it's almost the first thing you need to figure out.

00:16:57.640 --> 00:16:58.600
Yeah, exactly.

00:16:58.600 --> 00:17:00.300
How to separate user roles.

00:17:00.300 --> 00:17:01.160
Right.

00:17:01.160 --> 00:17:06.560
Are we going to put this on the internet and just let people have at it, or are we going to put a little data protection in there?

00:17:06.560 --> 00:17:08.240
Anyway, people can check that out.

00:17:08.240 --> 00:17:08.660
It's a good one.

00:17:09.760 --> 00:17:11.540
Next, let's talk about Nox.

00:17:11.540 --> 00:17:15.680
So, I use both Tox and Nox on various projects.

00:17:15.680 --> 00:17:21.700
A lot of my open source stuff is Tox-based for testing, just because I'm used to it.

00:17:21.700 --> 00:17:23.920
But I'm starting to use Nox more and more.

00:17:23.920 --> 00:17:33.640
And I want to cover this article by Seth Larson called Testing Multiple Python Versions with Nox and PyEnv, P-Y-E-N-V.

00:17:33.640 --> 00:17:36.660
Now, I personally don't use PyEnv, but I have before.

00:17:37.040 --> 00:17:42.220
And one of the things that's tripped me up before is how to use it with Tox and Nox.

00:17:42.220 --> 00:17:48.580
So, basically, even – so, check this out if you want to – check this article out if you want to learn more about Nox.

00:17:48.580 --> 00:17:55.600
But also, the trick about – even if you're a Tox user, the trick about how to use PyEnv with it, with the global.

00:17:55.600 --> 00:17:56.740
There's an example here.

00:17:56.740 --> 00:17:57.220
It's awesome.

00:17:57.220 --> 00:17:58.900
So, let's go over this a little bit.

00:17:58.900 --> 00:18:05.280
So, if you want – one of the first things I want to try to do with Nox, when it wasn't obvious to me from the documentation,

00:18:05.280 --> 00:18:11.740
is just how do I set it up like I would Tox to just test multiple – my stuff with multiple Python versions?

00:18:11.740 --> 00:18:14.600
And that's the example that it shows right off the bat.

00:18:14.600 --> 00:18:15.840
You have a Nox file.

00:18:15.840 --> 00:18:17.660
It's NoxFile.py.

00:18:18.440 --> 00:18:20.260
And it's Python code.

00:18:20.260 --> 00:18:25.600
So, you import Nox, and you can set up a session for multiple Python versions.

00:18:25.600 --> 00:18:30.720
And then, within this defining test, this can be anything.

00:18:30.720 --> 00:18:36.860
So, the function names around a session are – they're just – they're what you'll use later.

00:18:36.860 --> 00:18:38.100
So, we'll cover that in a little bit.

00:18:38.460 --> 00:18:42.320
But then, within your session, you do stuff.

00:18:42.320 --> 00:18:44.080
You either install or run.

00:18:44.080 --> 00:18:45.480
There's probably other stuff, too.

00:18:45.480 --> 00:18:47.480
But this is what I use, is install and run.

00:18:47.480 --> 00:18:51.520
So, installing . means installing the current project that you're working on.

00:18:51.520 --> 00:18:54.380
And then, there's an example here for requirements files.

00:18:54.380 --> 00:18:55.440
So, a dev requirements.

00:18:55.940 --> 00:19:01.540
But if you're using pyproject.toml, it could be also part of your .install, if you want.

00:19:01.540 --> 00:19:02.840
And then, run test.

00:19:02.840 --> 00:19:05.120
And, of course, run pytest.

00:19:05.120 --> 00:19:06.240
So, good job, Seth.

00:19:06.240 --> 00:19:09.780
And then, it goes through how to run it.

00:19:09.780 --> 00:19:12.440
So, you can either just type Nox, and it'll run everything.

00:19:12.440 --> 00:19:17.600
Or you can say Nox-S for –session to run test.

00:19:17.600 --> 00:19:25.420
And if you want to run a specific one, like just 3.11, Python 3.11, you can say test-3.11.

00:19:25.680 --> 00:19:27.380
I kind of like that there's a dot in there.

00:19:27.380 --> 00:19:29.080
It's pretty easy to understand.

00:19:29.080 --> 00:19:33.900
So, I just really like how simple this is to get the basics down.

00:19:33.900 --> 00:19:39.340
The basics of, I want to run tests on my project on over multiple Python versions.

00:19:39.340 --> 00:19:40.660
And this is pretty clean.

00:19:40.660 --> 00:19:46.980
This is already a decent argument to switch to Nox if you're on the fence between Tox and Nox.

00:19:46.980 --> 00:19:47.840
I agree.

00:19:47.840 --> 00:19:55.580
It's so nice because not only is it clean, you get autocomplete support from your editor.

00:19:56.140 --> 00:19:57.960
You get whatever editor you're using.

00:19:57.960 --> 00:19:59.700
It'll tell you if you've done something wrong.

00:19:59.700 --> 00:20:04.760
There's more support than just, well, here's an arbitrary text file I'm typing stuff into.

00:20:04.760 --> 00:20:05.540
I hope it works.

00:20:05.540 --> 00:20:06.160
Yeah.

00:20:06.160 --> 00:20:11.540
And then, you can – I mean, I've used it also to, just like I do, is Tox with doing something

00:20:11.540 --> 00:20:17.200
like adding linting and coverage checks and all sorts of stuff.

00:20:17.200 --> 00:20:19.520
I do want to – actually, that's one of the things.

00:20:19.520 --> 00:20:21.000
I'm glad you wrote this because it's a reminder.

00:20:21.000 --> 00:20:27.520
I did want to write a – like an example of the workflow differences between using Tox and Nox

00:20:27.520 --> 00:20:29.860
and showing a side-by-side comparison of those two.

00:20:30.000 --> 00:20:31.680
So hopefully in the future I can get that written.

00:20:31.680 --> 00:20:40.720
But one of the things that gets me is that with the run command, you have to separate every little piece of your command by –

00:20:40.720 --> 00:20:43.320
they have to be quoted as quoted strings.

00:20:43.320 --> 00:20:47.360
Like pytest tests has to be two different parameters to the run argument.

00:20:47.800 --> 00:20:51.940
And if you have a bunch of flags, each of the flag needs to be different things.

00:20:51.940 --> 00:20:54.960
Now, this – most – some people might not care about this.

00:20:54.960 --> 00:20:58.200
I kind of care, and it bugs me because I don't have to do that with Tox.

00:20:58.200 --> 00:21:06.000
So what I do is I just – since it's Python, I just write a string with all of the things that I want in it,

00:21:06.000 --> 00:21:08.540
and then I use split to create a –

00:21:08.540 --> 00:21:10.120
Split on space, something like that.

00:21:10.120 --> 00:21:10.300
Yeah.

00:21:10.300 --> 00:21:15.980
I just use split on space to create an array with all of the elements.

00:21:16.080 --> 00:21:22.740
And then when I run – I pass it to run and do the star thing so that it explodes it and passes it in altogether.

00:21:22.740 --> 00:21:23.520
Yeah.

00:21:23.520 --> 00:21:23.980
Nice.

00:21:23.980 --> 00:21:31.300
And then here's the trick – the magic trick about PyEnv at the bottom is that if you say PyEnv global

00:21:31.300 --> 00:21:36.580
and list all of the environments that you want to have available, it makes it available.

00:21:36.580 --> 00:21:39.860
If you're using PyEnv, it isn't by default.

00:21:39.860 --> 00:21:46.820
So you have to run this for each session or shell invocation to get it to work for PyEnv people.

00:21:46.820 --> 00:21:47.020
Cool.

00:21:47.480 --> 00:21:49.520
But that trick works with Tox also.

00:21:49.520 --> 00:21:56.500
And the other thing I wanted to mention was one of the things I really like about Nox is that if you –

00:21:56.500 --> 00:22:02.040
like this example has PyPy3 and 3.8, 9, 10, 11, 12 all there.

00:22:02.040 --> 00:22:06.760
By default, Nox will not fail if you don't have one of these around.

00:22:06.920 --> 00:22:11.160
So if you only have like 3.11 installed, it'll just run that and it'll skip the others.

00:22:11.160 --> 00:22:14.120
You can make it fail if it doesn't have it, but you don't.

00:22:14.120 --> 00:22:16.420
By default, it just skips them, which is kind of cool.

00:22:16.420 --> 00:22:17.740
The Tox is the reverse.

00:22:17.740 --> 00:22:23.220
Tox is if by default, it'll fail if it's not there, but you can tell it to skip if it's not there.

00:22:23.220 --> 00:22:24.800
Yeah, that's cool.

00:22:25.320 --> 00:22:33.020
One really quick thing if people are copy and paste from that example, I'm pretty sure the –r dev requirements needs a –r space dev requirements in there.

00:22:33.020 --> 00:22:34.820
Just people are copy-pasting, right?

00:22:34.820 --> 00:22:39.200
Because that's the command is install, pip install –r space filename.

00:22:39.200 --> 00:22:40.280
This always surprised me.

00:22:40.280 --> 00:22:42.260
I've seen it in multiple tutorials.

00:22:42.260 --> 00:22:43.480
I don't know if that's true.

00:22:43.480 --> 00:22:46.260
I think you might be able to do my way without the space.

00:22:46.260 --> 00:22:46.840
I don't know.

00:22:46.840 --> 00:22:49.400
Okay, well, you may be able to.

00:22:49.400 --> 00:22:51.380
We could try it.

00:22:51.380 --> 00:22:52.040
Yeah, we could try it later.

00:22:52.040 --> 00:22:53.060
Yeah.

00:22:53.060 --> 00:22:53.620
All right.

00:22:54.120 --> 00:22:56.820
Quick question for you, Brian, because I don't know the answer.

00:22:56.820 --> 00:23:01.160
Damian asked, does someone know if, how, Nox or Tox work with poetry?

00:23:01.160 --> 00:23:01.840
Do you know?

00:23:01.840 --> 00:23:03.140
Nothing works with poetry.

00:23:03.140 --> 00:23:07.060
I don't know, actually.

00:23:07.060 --> 00:23:11.340
So, poetry, I'm sure there's – I don't know.

00:23:11.340 --> 00:23:14.980
Probably, you talked about the PyProject Toml integration.

00:23:14.980 --> 00:23:16.980
So, I mean, it probably is more or less –

00:23:16.980 --> 00:23:17.780
It probably works.

00:23:17.780 --> 00:23:18.760
Probably.

00:23:18.760 --> 00:23:19.500
Yeah, it probably works.

00:23:19.500 --> 00:23:22.140
I'm sure many people listening know.

00:23:22.140 --> 00:23:23.140
Sorry, Damian.

00:23:23.140 --> 00:23:23.600
I don't know.

00:23:23.920 --> 00:23:24.680
Either.

00:23:24.680 --> 00:23:26.400
All right.

00:23:26.400 --> 00:23:27.240
Hold that thought.

00:23:27.240 --> 00:23:28.100
Hold that thought.

00:23:28.100 --> 00:23:29.800
Yeah, that's all of our things, isn't it, Brian?

00:23:29.800 --> 00:23:30.780
Do the search.

00:23:30.780 --> 00:23:31.460
Yeah.

00:23:31.460 --> 00:23:32.800
We were quick.

00:23:32.800 --> 00:23:34.000
Do you have any extras for us?

00:23:34.000 --> 00:23:35.340
Oh, I always got extras.

00:23:35.340 --> 00:23:38.100
So, let's go through here.

00:23:38.100 --> 00:23:44.200
Remember when we talked about how much drama there was around – how was it?

00:23:44.260 --> 00:23:44.880
Google, maybe.

00:23:44.880 --> 00:23:57.060
Someone was giving away, like, two or 4,000 YubiKeys to the top 100 or top 1,000 maintainers on PyPI – maintainers of the top projects on PyPI.

00:23:57.060 --> 00:24:06.820
And that was because there was going to be a requirement for PyPI that the very top 1% or some small percent was required to have 2FA.

00:24:06.820 --> 00:24:07.460
Yeah.

00:24:07.540 --> 00:24:08.180
Well, guess what?

00:24:08.180 --> 00:24:12.440
If that caused drama, wait until you hear about this.

00:24:12.440 --> 00:24:17.820
GitHub makes 2FA mandatory next week for anyone who is an active developer.

00:24:19.420 --> 00:24:25.860
So, basically, like, if you're making contributions to projects, public projects, I believe, something like that.

00:24:25.860 --> 00:24:27.700
So, yeah.

00:24:27.700 --> 00:24:27.960
Okay.

00:24:27.960 --> 00:24:30.920
Security accounts of more than 100 million users.

00:24:30.920 --> 00:24:40.480
I'm not sure exactly what the definition of an active developer versus an active contributor because I might contribute to the code without writing any actual software.

00:24:40.480 --> 00:24:41.380
But whatever.

00:24:41.380 --> 00:24:42.200
It's splitting hairs.

00:24:42.200 --> 00:24:45.680
The only reason I really bring this up is not to, like, go into depth.

00:24:45.760 --> 00:24:46.700
That's why this is an extra.

00:24:46.700 --> 00:24:55.800
But if it was a big deal that, you know, 1,000 Python developers had to do 2FA and it sounded like it was, what about 100 million?

00:24:55.800 --> 00:24:58.340
It's going to cost some drama.

00:24:58.340 --> 00:25:05.720
And then how many of those people who are contributing to PyPI are doing so in some way or another through GitHub?

00:25:05.720 --> 00:25:07.640
I would say the majority, probably.

00:25:07.640 --> 00:25:08.700
Yeah.

00:25:08.700 --> 00:25:09.600
Yeah.

00:25:09.600 --> 00:25:12.580
Actually, so I don't think it's going to be drama.

00:25:12.580 --> 00:25:14.840
Hopefully, people are just cool with it.

00:25:14.940 --> 00:25:17.800
I think the mess up with PyPI was the dongle thing.

00:25:17.800 --> 00:25:20.520
I think people thought they had to have the hardware thing.

00:25:20.520 --> 00:25:21.460
And they don't.

00:25:21.460 --> 00:25:24.500
I mean, I use a software 2FA system.

00:25:24.500 --> 00:25:26.640
And it's not just them.

00:25:26.640 --> 00:25:27.300
I don't know about you.

00:25:27.300 --> 00:25:28.440
But I just looked.

00:25:28.440 --> 00:25:32.980
I got, like, half a dozen, dozen different things I got to log into with Authy.

00:25:32.980 --> 00:25:33.740
Yeah.

00:25:33.740 --> 00:25:37.140
I think I have about 30 accounts or so that are 2FA.

00:25:37.140 --> 00:25:38.100
Yeah.

00:25:38.100 --> 00:25:39.900
And I'm happy that I do.

00:25:39.900 --> 00:25:41.580
That is not a complaint.

00:25:41.580 --> 00:25:42.920
I mean, that's not me whining.

00:25:42.920 --> 00:25:44.180
That's me, like, going, yes.

00:25:44.940 --> 00:25:45.960
Occasionally, I'm annoyed by it.

00:25:45.960 --> 00:25:46.180
Sometimes I'm lying.

00:25:46.180 --> 00:25:46.880
Yes.

00:25:46.880 --> 00:25:53.700
Like, right now, I went to look at a GitHub thing, and I have to log in, so I don't have

00:25:53.700 --> 00:25:54.660
time to do that right now.

00:25:54.660 --> 00:25:56.080
So, occasionally, it's annoying.

00:25:56.080 --> 00:25:59.720
Well, here, let me tell you why this is annoying so often.

00:25:59.720 --> 00:26:01.920
I'm going to take this and make it a whole episode, aren't I?

00:26:01.920 --> 00:26:06.260
So, the reason it is annoying is there's so many places.

00:26:06.260 --> 00:26:08.220
Like, what is the point of the 2FA?

00:26:08.220 --> 00:26:15.420
The 2FA is if somebody steals your account login information through some kind of data breach

00:26:15.420 --> 00:26:21.200
or through password reuse or whatever, that someone else can't go and use those credentials

00:26:21.200 --> 00:26:22.600
to log in as you.

00:26:22.600 --> 00:26:24.140
They have to have the second factor.

00:26:24.400 --> 00:26:25.480
Well, here's why it's annoying.

00:26:25.480 --> 00:26:33.460
Every time I log into my credit card processor, I think almost every time I log into DigitalOcean,

00:26:33.460 --> 00:26:35.940
it's like, hey, how are you doing?

00:26:35.940 --> 00:26:38.240
What's your 2FA factor?

00:26:38.240 --> 00:26:42.780
It's like, you know, I've given that to you about 100 times in the same browser, right?

00:26:42.780 --> 00:26:44.480
It should, at some point, go, you know what?

00:26:44.480 --> 00:26:45.660
They've given us the 2FA.

00:26:45.660 --> 00:26:46.820
We trust them.

00:26:46.820 --> 00:26:51.680
It's not, I'm not concerned someone is on my computer logging into my thing.

00:26:51.680 --> 00:26:56.620
I'm concerned about the seven other billion people who might want to log in from somewhere

00:26:56.620 --> 00:26:57.220
else, right?

00:26:57.220 --> 00:27:02.060
So, I think there should be a little bit of like, hey, if you've already logged in on this

00:27:02.060 --> 00:27:04.780
device, maybe you don't need the 2FA every time.

00:27:04.780 --> 00:27:08.400
You could even refresh it monthly, but not four times this morning, right?

00:27:08.400 --> 00:27:10.260
That's when I'm like, ah, 2FA.

00:27:10.260 --> 00:27:11.280
It's driving me nuts.

00:27:11.280 --> 00:27:12.320
So, that's my right.

00:27:12.320 --> 00:27:15.720
Yeah, but I mean, to be fair, GitHub doesn't do that, or PyPI.

00:27:15.720 --> 00:27:16.720
No, GitHub is great.

00:27:16.720 --> 00:27:18.000
GitHub, I have no complaints.

00:27:18.000 --> 00:27:21.780
Okay, because I don't have to do it every time for GitHub.

00:27:21.780 --> 00:27:24.460
No, no, GitHub is really good.

00:27:24.460 --> 00:27:27.500
Yeah, and I've been using 2FA for GitHub for quite a long time.

00:27:27.500 --> 00:27:29.120
It's been optional for a long time.

00:27:29.120 --> 00:27:29.720
Yeah.

00:27:29.720 --> 00:27:31.140
Or a while, at least.

00:27:31.140 --> 00:27:32.760
I have a short, very short memory.

00:27:32.760 --> 00:27:38.560
I'm really good with open source because I have the same memory span as the general technology

00:27:38.560 --> 00:27:40.220
memory of open source.

00:27:41.860 --> 00:27:42.300
Nice.

00:27:42.300 --> 00:27:43.580
All right.

00:27:43.580 --> 00:27:45.980
I have one other really quick thing.

00:27:45.980 --> 00:27:50.920
You know, Brian, we always have good luck reaching out to our listeners about things.

00:27:50.920 --> 00:27:52.100
And this one is a little bit different.

00:27:52.100 --> 00:27:57.920
So, I recently got a brand new adventure motorcycle as of last week, which is awesome.

00:27:58.260 --> 00:28:00.640
And I found some fun places to take it and ride.

00:28:00.640 --> 00:28:05.460
Like, I rode up into the snow around here and the coastal range and stuff like that.

00:28:05.460 --> 00:28:12.200
I'm looking for somewhere fun in the Northwest to go riding that's like not intense motocross

00:28:12.200 --> 00:28:12.720
off-road.

00:28:12.720 --> 00:28:15.540
But, you know, it would be a lot of fun for these types of things.

00:28:15.540 --> 00:28:16.020
Just a nice view.

00:28:16.360 --> 00:28:16.600
Yeah.

00:28:16.600 --> 00:28:19.940
Just get out and get out in the woods and cruise around this summer, this spring.

00:28:19.940 --> 00:28:24.320
And so, listeners out there who know where to ride around here, that's not one of the

00:28:24.320 --> 00:28:29.340
couple huge off-road vehicle like state-sponsored areas around Portland.

00:28:29.540 --> 00:28:30.140
People got it.

00:28:30.140 --> 00:28:31.340
Shoot it in.

00:28:31.340 --> 00:28:35.800
And if you want to know why I kind of got this bike, how much fun it was, there's a cool

00:28:35.800 --> 00:28:40.900
video I linked to with Ben Townley and another guy, something Raymond.

00:28:40.900 --> 00:28:43.260
I can't remember his first name.

00:28:43.260 --> 00:28:44.660
Anyway, you can check that out.

00:28:44.660 --> 00:28:47.180
And, yeah, that's all I got for my extras.

00:28:47.180 --> 00:28:47.560
How about you?

00:28:47.560 --> 00:28:52.380
I mean, while we're asking for, like, contributors, I just, we just passed.

00:28:52.380 --> 00:28:59.140
We were driving around this weekend and saw, like, a group of motorcy, like, 10, 20 people

00:28:59.140 --> 00:28:59.860
riding motorcycles.

00:28:59.860 --> 00:29:05.360
And since we've got a couple of Harley places around here, so there are, like, Harley groups

00:29:05.360 --> 00:29:05.820
around.

00:29:05.820 --> 00:29:09.100
But when I was a kid, I was, like, scared of these people.

00:29:09.100 --> 00:29:10.480
And these people.

00:29:10.480 --> 00:29:11.720
Just people with motorcycles.

00:29:11.720 --> 00:29:13.880
Mostly wearing black leather.

00:29:13.880 --> 00:29:18.220
But now they're, like, I mean, it's mostly people my age or older.

00:29:18.220 --> 00:29:23.240
You know, it's 50 to 70-year-olds riding motorbikes just to hang out with your friends.

00:29:23.240 --> 00:29:24.040
Well, that's cool.

00:29:24.040 --> 00:29:25.440
I mean, at least that's what I see.

00:29:25.440 --> 00:29:28.780
But I think it'd be cool if I could see, like,

00:29:28.780 --> 00:29:31.000
are there, like, e-bike gangs?

00:29:31.000 --> 00:29:37.560
Or, like, are there e-bike groups of people, like, just a bunch of e-bikes riding together?

00:29:37.560 --> 00:29:38.820
Anyway.

00:29:38.820 --> 00:29:39.440
I bet there are.

00:29:39.440 --> 00:29:40.300
E-bikes are awesome.

00:29:40.300 --> 00:29:41.980
Like, electric bicycles.

00:29:41.980 --> 00:29:42.840
They're so cool.

00:29:42.840 --> 00:29:44.760
And I'm sure there are, actually.

00:29:44.760 --> 00:29:45.500
But how are you going to find them, right?

00:29:45.500 --> 00:29:47.600
That'd be cool to see a picture of, like, a bunch of them.

00:29:47.600 --> 00:29:47.900
Yeah.

00:29:47.900 --> 00:29:48.360
Anyway.

00:29:49.300 --> 00:29:51.340
Do you have to get one of those club patches for it?

00:29:51.340 --> 00:29:52.120
Can we get it?

00:29:52.120 --> 00:29:52.400
Probably.

00:29:52.400 --> 00:29:53.720
Do you have any extras before?

00:29:53.720 --> 00:29:56.280
No, I don't have any extras.

00:29:56.280 --> 00:29:57.320
I was just BSing.

00:29:57.320 --> 00:29:58.520
So let's do a joke.

00:29:58.520 --> 00:29:58.740
Yeah, awesome.

00:29:58.740 --> 00:29:59.600
All right.

00:29:59.600 --> 00:30:00.280
Let's do a joke.

00:30:01.020 --> 00:30:02.540
And, boy, I didn't do this.

00:30:02.540 --> 00:30:03.320
I didn't plan this.

00:30:03.320 --> 00:30:04.560
But, boy, did it line up good.

00:30:04.560 --> 00:30:07.880
So this one comes to us from ProgrammingHumor on Reddit.

00:30:07.880 --> 00:30:10.560
And just check out this picture, Brian, here really quick.

00:30:10.560 --> 00:30:12.740
Describe the picture to folks.

00:30:14.240 --> 00:30:15.000
You see this?

00:30:15.000 --> 00:30:15.880
I don't know what I'm saying.

00:30:15.880 --> 00:30:17.340
So it's some sort of logging into GitHub.

00:30:17.340 --> 00:30:18.140
Okay.

00:30:18.140 --> 00:30:22.080
And somebody's got to do a code review here on the end of the morning.

00:30:22.080 --> 00:30:26.700
Oh, there's over a million lines changed and 20 deletions.

00:30:26.700 --> 00:30:30.340
1,094,000 lines changed, 20 removed.

00:30:30.340 --> 00:30:31.120
So not too bad there.

00:30:31.120 --> 00:30:35.180
But 2,945 files to review.

00:30:35.180 --> 00:30:36.600
And it's zero of those.

00:30:36.600 --> 00:30:38.160
It's like, let's get started.

00:30:38.160 --> 00:30:43.700
So the title is, anyone else have this kind of colleague?

00:30:43.820 --> 00:30:44.860
What a way to start a Monday.

00:30:44.860 --> 00:30:49.620
So any guesses what they did?

00:30:49.620 --> 00:30:52.420
I'm guessing they, like, applied black to their project.

00:30:52.420 --> 00:30:54.740
And it just changed everything.

00:30:54.740 --> 00:30:55.820
Yeah, maybe.

00:30:55.820 --> 00:30:59.080
The comments section is pretty good, too.

00:30:59.080 --> 00:31:03.900
Someone else, like, suggested that maybe the git commit message is fixed typo.

00:31:03.900 --> 00:31:05.000
Fixed typo.

00:31:05.000 --> 00:31:07.080
Or something like that.

00:31:07.080 --> 00:31:08.220
Added stuff.

00:31:08.220 --> 00:31:09.260
Small update.

00:31:09.260 --> 00:31:10.720
Small update.

00:31:10.720 --> 00:31:11.160
Yeah.

00:31:11.160 --> 00:31:13.220
That's funny.

00:31:13.400 --> 00:31:15.120
Reformatted every line of gun.

00:31:15.120 --> 00:31:16.480
Exactly.

00:31:16.480 --> 00:31:20.020
So it's a case of the Mondays.

00:31:20.020 --> 00:31:21.500
One of the best shows ever.

00:31:21.500 --> 00:31:23.620
Replace all spaces with tabs.

00:31:23.620 --> 00:31:26.020
Exactly.

00:31:26.020 --> 00:31:26.880
Nice.

00:31:26.880 --> 00:31:28.840
So anyway, cool.

00:31:28.840 --> 00:31:29.220
All right.

00:31:29.220 --> 00:31:30.100
Well, that's what I got for you.

00:31:30.100 --> 00:31:31.940
For this wonderful episode.

00:31:31.940 --> 00:31:33.060
I had a lot of fun.

00:31:33.060 --> 00:31:34.000
Hope everybody else did, too.

00:31:34.000 --> 00:31:34.380
Yeah, I did, too.

00:31:34.380 --> 00:31:35.960
And thanks, everyone, for listening.

00:31:35.960 --> 00:31:36.760
See y'all later.

