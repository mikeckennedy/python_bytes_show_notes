
00:00:00.000 --> 00:00:12.000
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 293, recorded July 11, 2022. And I am Brian Okken.


00:00:12.000 --> 00:00:13.000
Hey, I'm Michael Kennedy.


00:00:13.000 --> 00:00:15.000
And I'm Ashley Anderson.


00:00:15.000 --> 00:00:19.000
Well, welcome, Ashley. Before we jump in, tell us a little bit about who you are.


00:00:19.000 --> 00:00:19.960
about who you are.


00:00:19.960 --> 00:00:21.280
- Yeah, I'm a software developer.


00:00:21.280 --> 00:00:23.600
I work for a relatively small,


00:00:23.600 --> 00:00:26.480
but sometimes growing startup out here.


00:00:26.480 --> 00:00:28.180
We make a portable MRI machine.


00:00:28.180 --> 00:00:30.120
So I'm one of these software developers


00:00:30.120 --> 00:00:32.540
that came from a academic background.


00:00:32.540 --> 00:00:35.240
I studied biomedical engineering and medical physics,


00:00:35.240 --> 00:00:39.240
and then this is kind of my first full-time software gig.


00:00:39.240 --> 00:00:40.680
But I think in research,


00:00:40.680 --> 00:00:42.080
everyone's doing software these days,


00:00:42.080 --> 00:00:43.660
so a lot of people are kind of making that jump,


00:00:43.660 --> 00:00:45.240
and this was a perfect opportunity for it.


00:00:45.240 --> 00:00:48.640
- A portable MRI, that's gotta be fascinating.


00:00:48.640 --> 00:00:49.480
- Cool, very cool.


00:00:49.480 --> 00:00:52.440
How do you find the transition from this more researchy side


00:00:52.440 --> 00:00:55.320
over to this maybe more formal dev role?


00:00:55.320 --> 00:00:59.540
- Yeah, it's like just such a better fit for me, I think.


00:00:59.540 --> 00:01:01.240
Like in my research labs and stuff,


00:01:01.240 --> 00:01:03.880
I was often like way more interested


00:01:03.880 --> 00:01:05.200
in helping build tools and stuff


00:01:05.200 --> 00:01:07.400
to help accelerate other people's work


00:01:07.400 --> 00:01:09.880
rather than diving into the research myself.


00:01:09.880 --> 00:01:12.000
I often found that to be very frustrating


00:01:12.000 --> 00:01:14.080
and maybe I wasn't the best at it or something like that.


00:01:14.080 --> 00:01:16.400
So this has just been a much better fit for me.


00:01:16.400 --> 00:01:17.240
- Right on, cool.


00:01:17.240 --> 00:01:19.920
Well, let's jump into your first topic.


00:01:19.920 --> 00:01:21.220
What do you got for us?


00:01:21.220 --> 00:01:24.160
- Sure, yeah, the first thing I wanted to talk about was,


00:01:24.160 --> 00:01:26.980
I think this is kind of the big news since Friday.


00:01:26.980 --> 00:01:31.440
The PSF and the PyPI announced that they're giving away


00:01:31.440 --> 00:01:34.320
4,000 of these two-factor hardware keys.


00:01:34.320 --> 00:01:37.040
That's maybe kind of gotten washed out in this,


00:01:37.040 --> 00:01:38.720
but it's kind of a cool effort.


00:01:38.720 --> 00:01:41.480
I saw this from Dustin Ingram's Twitter,


00:01:41.480 --> 00:01:43.780
and I know he's been involved in a lot of the,


00:01:44.720 --> 00:01:49.360
been interested in kind of outlining a lot of the security concerns about supply chain


00:01:49.360 --> 00:01:53.440
vulnerabilities and stuff in the past. I thought this was a really interesting idea for helping


00:01:53.440 --> 00:01:57.280
with supply chain vulnerabilities, or at least kind of taking a step in that direction. And I


00:01:57.280 --> 00:02:03.600
think it's just the PyPI, you know, sort of first step in this direction. They announced some other


00:02:03.600 --> 00:02:09.040
stuff in the past about maybe having private packages or organizations on there and namespace


00:02:09.040 --> 00:02:13.600
packages and stuff. But this was a pretty cool thing to do. It looks like they're going to roll


00:02:13.600 --> 00:02:18.640
out two factor as a requirement probably eventually for everybody. The way they're starting it


00:02:18.640 --> 00:02:25.140
now is kind of for some of the most popular packages. And for people who have those popular


00:02:25.140 --> 00:02:30.380
packages, I'm not one of them. They're offering codes to get some of these hardware keys to


00:02:30.380 --> 00:02:31.380
help that.


00:02:31.380 --> 00:02:32.380
Interesting.


00:02:32.380 --> 00:02:37.440
Yeah, there's been a bit of a backlash to this actually, which on two levels, some people


00:02:37.440 --> 00:02:41.740
just expressing a little bit of frustration and others more so.


00:02:41.740 --> 00:02:43.240
See item two coming up.


00:02:43.240 --> 00:02:48.360
One thing I think is interesting about this, this whole side of things is like


00:02:48.360 --> 00:02:52.000
the original thing that you brought up, Ashley is people I think are focusing


00:02:52.000 --> 00:02:57.380
on their hardware keys and I, while that's a cool idea, I think the bigger


00:02:57.380 --> 00:03:00.000
story is just 2FA forget hardware keys.


00:03:00.000 --> 00:03:02.680
Like hardware keys are one way to do 2FA.


00:03:02.680 --> 00:03:03.100
Yeah.


00:03:03.100 --> 00:03:03.440
Right.


00:03:03.440 --> 00:03:05.200
But if you look at the actual giveaway,


00:03:05.200 --> 00:03:08.720
I think it's limited to certain locations, right?


00:03:08.720 --> 00:03:10.840
Like I can't remember what all the locations were.


00:03:10.840 --> 00:03:13.760
I feel like it's kind of North America,


00:03:13.760 --> 00:03:16.920
Europe and Australia or something in that general realm.


00:03:16.920 --> 00:03:18.840
And you could entirely have a popular,


00:03:18.840 --> 00:03:22.080
what is now known as a critical Python package


00:03:22.080 --> 00:03:23.960
and not live in those locations, right?


00:03:23.960 --> 00:03:24.800
- Yeah, for sure.


00:03:24.800 --> 00:03:25.960
I mean, I suspect a lot of them,


00:03:25.960 --> 00:03:27.640
a lot of the maintainers of those packages


00:03:27.640 --> 00:03:29.440
are not in some of those locations.


00:03:29.440 --> 00:03:32.200
I think those are probably dictated by like export rules


00:03:32.200 --> 00:03:35.440
on certain cryptography, but I had thought about that.


00:03:35.440 --> 00:03:37.880
I thought it was just a shipping thing, but you're probably right about that.


00:03:37.880 --> 00:03:38.360
Actually.


00:03:38.360 --> 00:03:38.920
Yeah.


00:03:38.920 --> 00:03:39.720
Oh yeah.


00:03:39.720 --> 00:03:45.320
So the, there's a little bit of a pushback and like, Hey, I'm doing this for free.


00:03:45.320 --> 00:03:47.680
Why are you making me do this extra work?


00:03:47.680 --> 00:03:48.760
Setting up these keys.


00:03:48.760 --> 00:03:52.280
And that's kind of why I've, I said, I feel like it's, it's kind of the


00:03:52.280 --> 00:03:55.560
headline has missed the point here because to say, Oh, I've got to get this


00:03:55.560 --> 00:03:58.240
hardware key and set it up is not technically true.


00:03:58.240 --> 00:04:01.440
You just have to use two of a, of some form, right.


00:04:01.440 --> 00:04:06.400
It could be with like the standard 2FA you have with your phone or maybe it even SMS would work.


00:04:06.400 --> 00:04:10.680
Although SMS is a sketchy, but better than nothing form of 2FA.


00:04:10.680 --> 00:04:13.080
Like if I'm going to go get a bank account.


00:04:13.080 --> 00:04:13.720
If I'm going to.


00:04:13.720 --> 00:04:14.320
Some people.


00:04:14.320 --> 00:04:14.820
Yeah, go ahead.


00:04:14.820 --> 00:04:15.320
Sorry.


00:04:15.320 --> 00:04:19.800
Some people say that SMS really is like a pretty insecure version of 2FA.


00:04:19.800 --> 00:04:22.520
So I think having some type of key.


00:04:22.520 --> 00:04:25.360
And they say like, yeah, it would be better.


00:04:25.360 --> 00:04:29.560
But like at the same time, if you don't have any 2FA, there's still another step.


00:04:29.560 --> 00:04:30.960
They've got to hack your SMS.


00:04:30.960 --> 00:04:31.800
(laughs)


00:04:31.800 --> 00:04:34.160
somehow to get through the SMS stuff,


00:04:34.160 --> 00:04:35.600
which is better than just like,


00:04:35.600 --> 00:04:36.680
they just guess your password


00:04:36.680 --> 00:04:37.800
or they get it from a password breach.


00:04:37.800 --> 00:04:42.080
So it's even for all the criticisms of SMS as a 2FA,


00:04:42.080 --> 00:04:43.780
it's still not a negative,


00:04:43.780 --> 00:04:46.920
it's just not nearly as good as the other option.


00:04:46.920 --> 00:04:50.200
- I'm just chuckling 'cause I just got an email last week


00:04:50.200 --> 00:04:53.980
about from, was it on the 8th of July,


00:04:53.980 --> 00:05:00.080
saying, "Hey, you're a maintainer of a critical project."


00:05:00.800 --> 00:05:03.040
and they want me to set up to UFA


00:05:03.040 --> 00:05:04.640
and I just haven't read it yet.


00:05:04.640 --> 00:05:08.000
So I like, this is news to me.


00:05:08.000 --> 00:05:10.640
And it's a pytest plugin I've got


00:05:10.640 --> 00:05:12.600
that supposedly is a critical project.


00:05:12.600 --> 00:05:13.440
Go figure.


00:05:13.440 --> 00:05:14.260
- Oh, that's awesome.


00:05:14.260 --> 00:05:15.660
The definition, people are wondering,


00:05:15.660 --> 00:05:17.560
I saw Will McGugan asking on Twitter,


00:05:17.560 --> 00:05:19.440
like, does anybody know what this means?


00:05:19.440 --> 00:05:21.040
I got this too.


00:05:21.040 --> 00:05:22.640
The definition from what I understand


00:05:22.640 --> 00:05:26.160
is you are in the top 1% of downloads


00:05:26.160 --> 00:05:28.620
for a moving six month window.


00:05:28.620 --> 00:05:30.120
So in the last six months,


00:05:30.120 --> 00:05:32.620
your project is in the top 1% of most used,


00:05:32.620 --> 00:05:34.080
most downloaded packages.


00:05:34.080 --> 00:05:36.180
So congratulations, that's awesome, Brian.


00:05:36.180 --> 00:05:38.440
(laughing)


00:05:38.440 --> 00:05:42.540
- Cool, I guess I'll read the email more closely now.


00:05:42.540 --> 00:05:43.880
- Yeah, perhaps.


00:05:43.880 --> 00:05:46.200
Actually, do you know what happens


00:05:46.200 --> 00:05:47.480
if you just are like Brian,


00:05:47.480 --> 00:05:50.840
like I don't, spam, doesn't matter to me, just ignore it?


00:05:50.840 --> 00:05:51.680
- That's a good question.


00:05:51.680 --> 00:05:54.220
I guess eventually they'll probably not let you upload


00:05:54.220 --> 00:05:55.380
if you don't enable it.


00:05:55.380 --> 00:05:59.080
Like next time you go to log in or upload a package,


00:05:59.080 --> 00:06:00.940
it'll just say, hey, you have to turn on 2FA.


00:06:00.940 --> 00:06:02.460
'Cause like you said, you don't have to have the key,


00:06:02.460 --> 00:06:04.480
you just have to have 2FA on.


00:06:04.480 --> 00:06:08.140
- So I clicked on the manage and it says,


00:06:08.140 --> 00:06:09.900
I've got a little big banner up.


00:06:09.900 --> 00:06:12.580
I'll just pop to it right now.


00:06:12.580 --> 00:06:14.560
Oh, where's it on here?


00:06:14.560 --> 00:06:15.860
We'll go ahead and show this.


00:06:15.860 --> 00:06:19.980
I get, this project is included in the two factor mandate


00:06:19.980 --> 00:06:21.040
for critical projects.


00:06:21.040 --> 00:06:24.340
In the future, you will be unable to perform this action


00:06:24.340 --> 00:06:26.940
without enabling two factor auth.


00:06:26.940 --> 00:06:28.820
So I think you're right.


00:06:28.820 --> 00:06:32.400
I think it's just going to kick me out of being able to do


00:06:32.400 --> 00:06:35.440
anything with the project if I don't enable this.


00:06:35.440 --> 00:06:35.700
>> Yeah.


00:06:35.700 --> 00:06:36.480
>> Interesting.


00:06:36.480 --> 00:06:38.260
>> Interesting. This is cool, Brian.


00:06:38.260 --> 00:06:40.580
One, I think Teddy's right out there,


00:06:40.580 --> 00:06:43.020
like congrats, Brian's on fire.


00:06:43.020 --> 00:06:44.980
High-test check by the way,


00:06:44.980 --> 00:06:46.880
people listening is the plugin.


00:06:46.880 --> 00:06:48.660
But it's cool to see it live, to see what's happening.


00:06:48.660 --> 00:06:51.100
So this apparently is what maintainers get.


00:06:51.100 --> 00:06:53.620
I'm with you, I think what's going to happen is


00:06:53.620 --> 00:06:56.500
you won't be able to upload with Twine anymore,


00:06:56.500 --> 00:06:57.960
you won't be able to log in,


00:06:57.960 --> 00:06:59.160
you won't be able to make changes.


00:06:59.160 --> 00:07:01.600
It'll just force you down a 2FA path.


00:07:01.600 --> 00:07:02.920
>> Yeah, I read that you still can


00:07:02.920 --> 00:07:04.480
upload because people want to do,


00:07:04.480 --> 00:07:06.440
I know there were some people initially concerned about like,


00:07:06.440 --> 00:07:09.360
how do I do automatic uploads from my CI system or whatever?


00:07:09.360 --> 00:07:10.900
You can do it if you get a token,


00:07:10.900 --> 00:07:12.720
but you have to generate one of


00:07:12.720 --> 00:07:15.800
those tokens with your 2FA enabled account to do that.


00:07:15.800 --> 00:07:18.560
>> Right. That happens with all the 2FA accounts.


00:07:18.560 --> 00:07:23.280
You can no longer use your GitHub password for on a CLI.


00:07:23.280 --> 00:07:25.440
Once you set up GitHub 2FA,


00:07:25.440 --> 00:07:27.240
then all of a sudden you've got to go create an app,


00:07:27.240 --> 00:07:30.440
give it a name and get it like an API token for it and stuff like that, right?


00:07:30.440 --> 00:07:32.360
I think that's OK.


00:07:32.360 --> 00:07:35.040
Yeah. So, Brian, let's let's ask you, like, how do you feel about that?


00:07:35.040 --> 00:07:36.600
Does this seem like a big burden to you?


00:07:36.600 --> 00:07:37.880
Are you OK with this or?


00:07:37.880 --> 00:07:41.320
You know, I was I'm OK with it because I I think it's


00:07:41.320 --> 00:07:43.600
securing the supply chain.


00:07:43.600 --> 00:07:47.080
I mean, I've already enabled the two factor authentication on GitHub,


00:07:47.080 --> 00:07:51.480
and I've got, you know, a bunch of banking stuff that I have on,


00:07:51.480 --> 00:07:54.200
you know, multi-factor authentication and stuff.


00:07:54.240 --> 00:08:01.280
So I'm waiting for 12 factor authentication, but that might be a bit extreme.


00:08:01.280 --> 00:08:02.240
All right.


00:08:02.240 --> 00:08:06.740
Now you put your small pinky toe onto the key reader over there, and then you hold


00:08:06.740 --> 00:08:09.580
down this key with your other finger and then put your face up.


00:08:09.580 --> 00:08:10.640
Yeah.


00:08:10.640 --> 00:08:13.540
An optic scan, a blood scan.


00:08:13.540 --> 00:08:18.240
You got to have, you know, deposit a urine scan and all sorts of stuff you got to do.


00:08:18.240 --> 00:08:19.080
Good night.


00:08:19.080 --> 00:08:20.240
No, I'm not.


00:08:20.240 --> 00:08:21.580
I've drawn the line there.


00:08:21.580 --> 00:08:22.280
I'm not doing it.


00:08:22.280 --> 00:08:26.900
So, no, but I'm, I'm fine with it.


00:08:26.900 --> 00:08:29.300
I, I don't know the details yet though.


00:08:29.300 --> 00:08:32.580
Uh, if, if I got to get a hardware key though, I'm going to be a little upset.


00:08:32.580 --> 00:08:33.680
I think, I don't know.


00:08:33.680 --> 00:08:36.740
Well, they might give you one for free, but yeah, even, even, even getting one


00:08:36.740 --> 00:08:40.780
for free, I feel like I'd be like, if I'm not a hardware key guide, I don't know.


00:08:40.780 --> 00:08:41.060
Yeah.


00:08:41.060 --> 00:08:42.240
Well, what if I lose it?


00:08:42.240 --> 00:08:43.760
Uh, so yes.


00:08:43.760 --> 00:08:47.460
Uh, first of all, let me preface the statement with, please don't email me.


00:08:47.460 --> 00:08:51.220
It's if we disagree on this, it's fine.


00:08:51.220 --> 00:08:52.060
Just don't email me.


00:08:52.060 --> 00:08:57.740
We can just agree to disagree, but I am personally not a fan of 2FA hardware keys.


00:08:57.740 --> 00:08:59.740
Because what if you lose it?


00:08:59.740 --> 00:09:01.740
It's really bad.


00:09:01.740 --> 00:09:11.340
Now all of a sudden, what if I'm traveling and the website is down and I've got to log into the ISP, the cloud system to make a change.


00:09:11.340 --> 00:09:13.340
What if I forgot to bring the key?


00:09:13.340 --> 00:09:15.340
Or what if I do bring it, then I lose it?


00:09:15.340 --> 00:09:19.340
The act of having a physical key that has to always be with you.


00:09:19.340 --> 00:09:21.340
Do you take it with you when you go swimming?


00:09:21.340 --> 00:09:25.940
I mean, that's a little extreme, but like, if you're going to go to the beach and you might need it, what are you going to do?


00:09:25.940 --> 00:09:28.780
And then if I only have my phone, I can't plug the key into the phone.


00:09:28.780 --> 00:09:29.100
I don't know.


00:09:29.100 --> 00:09:38.260
It just, it seems like I certainly know why you would have it at like, if I worked at a bank and I needed to get on the VPN and I needed to have that permanently stuck in my computer.


00:09:38.260 --> 00:09:38.860
Fine.


00:09:38.860 --> 00:09:47.300
But as a broad based solution, I feel like things like Authy, Google Authenticator, the Microsoft, whatever it's called, all those things.


00:09:47.500 --> 00:09:50.300
I think they still provide a pretty strong level of security


00:09:50.300 --> 00:09:52.500
while being able to travel with you


00:09:52.500 --> 00:09:54.500
and being able to synchronize across devices


00:09:54.500 --> 00:09:55.900
that you might not always have them with you.


00:09:55.900 --> 00:09:57.100
So, yeah.


00:09:57.100 --> 00:09:59.700
When people say, "Oh, it's such a hassle to get these keys," like,


00:09:59.700 --> 00:10:00.900
you could just set up Authy.


00:10:00.900 --> 00:10:02.100
You know what I mean?


00:10:02.100 --> 00:10:04.100
Yeah, I use Authy too.


00:10:04.100 --> 00:10:06.700
I'm also, I'm a little freaked out by the hardware keys.


00:10:06.700 --> 00:10:09.100
I did find it interesting in the giveaway actually,


00:10:09.100 --> 00:10:11.100
I think they give you a coupon to get two


00:10:11.100 --> 00:10:14.100
so that, like, you could get two in case you lose one.


00:10:14.100 --> 00:10:17.640
but that to me just is exactly why I don't want one.


00:10:17.640 --> 00:10:19.240
(laughing)


00:10:19.240 --> 00:10:21.420
- Exactly, well, okay, so I've got one plugged


00:10:21.420 --> 00:10:24.680
into my computer and I put one into the closet.


00:10:24.680 --> 00:10:27.420
If the house burns down, what am I gonna do?


00:10:27.420 --> 00:10:29.140
I mean, I'll probably, I'll grab my phone and run,


00:10:29.140 --> 00:10:30.120
maybe if I can get to it,


00:10:30.120 --> 00:10:32.920
but I'm not gonna go rooting around for a hardware key.


00:10:32.920 --> 00:10:34.240
I'm just gonna get out, you know what I mean?


00:10:34.240 --> 00:10:37.620
There's just all these like sort of weird edge cases


00:10:37.620 --> 00:10:38.460
that to me, I'm just like,


00:10:38.460 --> 00:10:41.540
I don't really wanna end on one of these hardware keys.


00:10:41.540 --> 00:10:43.160
- Yeah, Brian's gonna have to go to the bank


00:10:43.160 --> 00:10:46.320
in his safe deposit box just to upload a new pytest check.


00:10:46.320 --> 00:10:47.160
(laughing)


00:10:47.160 --> 00:10:48.560
- Yeah, exactly.


00:10:48.560 --> 00:10:49.920
- All right, I turned both keys to the right


00:10:49.920 --> 00:10:52.440
on three, two, one, chink, okay.


00:10:52.440 --> 00:10:54.400
V1.2 is out.


00:10:54.400 --> 00:10:55.240
Yeah, okay.


00:10:55.240 --> 00:10:58.480
- But I would just point out the article here


00:10:58.480 --> 00:11:02.200
from Armin Rodofar, which was super interesting, I think.


00:11:02.200 --> 00:11:04.400
And this kind of gets into,


00:11:04.400 --> 00:11:06.360
it'll probably lead us into the next topic here


00:11:06.360 --> 00:11:08.760
of why there was a little bit of controversy around this.


00:11:08.760 --> 00:11:10.140
And I think it wasn't so much


00:11:10.140 --> 00:11:12.200
that people are resistant to two-factor.


00:11:12.200 --> 00:11:15.440
It's more this designation of packages as critical.


00:11:15.440 --> 00:11:18.940
And I don't know if that's just because like critical is a bit of a loaded term


00:11:18.940 --> 00:11:23.060
or it ended up feeling a little bit like a popularity contest, but yeah, I think


00:11:23.060 --> 00:11:26.220
it's pretty clear to me that PyPI wants to, you know, which is an open source


00:11:26.220 --> 00:11:27.520
project itself, right?


00:11:27.520 --> 00:11:31.000
Uh, wants to eventually probably roll this out to everybody and maybe doesn't


00:11:31.000 --> 00:11:32.920
have the capacity for that right now or something.


00:11:32.920 --> 00:11:34.400
Yeah, I totally agree.


00:11:34.400 --> 00:11:39.380
And Armin is quite interesting and he comes down a little bit, you know, on the


00:11:39.380 --> 00:11:43.100
middle like I see the value but also I see why people are a little bit


00:11:43.100 --> 00:11:46.980
frustrated with this. He does talk about this thing that the Rust community has


00:11:46.980 --> 00:11:53.540
you know hat tip towards topic four as well called cargo vet which is the idea


00:11:53.540 --> 00:11:59.580
of vetted packages and unvetted packages so if you when you pip install something


00:11:59.580 --> 00:12:04.460
you could say something like do I only want to allow like the higher vetted


00:12:04.460 --> 00:12:09.260
packages. IPI doesn't have this at the moment but other package indexes do. To


00:12:09.260 --> 00:12:12.660
To me, again, coming back to the hardware thing, I feel like people saw this and they


00:12:12.660 --> 00:12:14.060
thought, I've got to go to this hardware key.


00:12:14.060 --> 00:12:17.060
Like this seems like, I can't believe you're forcing this on me.


00:12:17.060 --> 00:12:22.500
If you're a software developer in 2022 and you don't have any form of 2FA set up, that's,


00:12:22.500 --> 00:12:24.700
I feel like those are the people who got really frustrated.


00:12:24.700 --> 00:12:30.300
But at the same time, like what are you doing on the internet in 2022 without at least a


00:12:30.300 --> 00:12:32.000
few things on 2FA?


00:12:32.000 --> 00:12:37.360
My Authy account has something like 46 different 2FAs in there.


00:12:37.360 --> 00:12:39.560
and password has like a thousand accounts.


00:12:39.560 --> 00:12:40.400
I don't know.


00:12:40.400 --> 00:12:43.260
It doesn't seem like a huge burden to hold up your phone,


00:12:43.260 --> 00:12:45.440
scan a QR code and carry on.


00:12:45.440 --> 00:12:47.780
But if you're not in the 2FA space,


00:12:47.780 --> 00:12:49.380
and especially if you perceive that to mean


00:12:49.380 --> 00:12:51.660
I gotta get into the hardware 2FA space,


00:12:51.660 --> 00:12:54.280
I can see why people would see this as frustrating.


00:12:54.280 --> 00:12:56.060
And with that, maybe it's time to just move


00:12:56.060 --> 00:12:57.580
to the next topic, number two,


00:12:57.580 --> 00:13:01.740
which is IPI moved to require 2FA for critical projects,


00:13:01.740 --> 00:13:03.000
which is this here.


00:13:03.000 --> 00:13:06.020
But what's really interesting is there's sort of talking


00:13:06.020 --> 00:13:07.620
about the challenges.


00:13:07.620 --> 00:13:09.680
And one of the things that happened


00:13:09.680 --> 00:13:12.380
is there's this project called Atomic Writes,


00:13:12.380 --> 00:13:15.620
which was designated as critical.


00:13:15.620 --> 00:13:18.240
Atomics Writes, what it actually does,


00:13:18.240 --> 00:13:19.880
it's pretty straightforward,


00:13:19.880 --> 00:13:22.260
is it lets you use a context manager


00:13:22.260 --> 00:13:25.340
to write to files atomically.


00:13:25.340 --> 00:13:27.940
So you can write to the file, write to the file.


00:13:27.940 --> 00:13:31.580
If there's some kind of rash or mistake


00:13:31.580 --> 00:13:34.300
or bug or something, it won't actually change the file.


00:13:34.300 --> 00:13:39.060
So normally you would just do like while true start writing.


00:13:39.060 --> 00:13:42.020
And if something crashes, like you'll have a half written file.


00:13:42.020 --> 00:13:43.020
So this is kind of cool.


00:13:43.020 --> 00:13:45.340
It says, what are you going to do is use a context manager,


00:13:45.340 --> 00:13:47.860
open a file, we're going to write to a temp file.


00:13:47.860 --> 00:13:50.980
And then when you exit the context manager successfully,


00:13:50.980 --> 00:13:53.900
we're going to apply all those changes by doing an overwrite


00:13:53.900 --> 00:13:56.340
move type of operation at the OS level.


00:13:56.340 --> 00:13:58.380
I don't know how truly atomic it is,


00:13:58.380 --> 00:14:00.580
but it sure is better than writing line by line, right?


00:14:00.580 --> 00:14:03.980
And certainly it has the data safety aspect,


00:14:03.980 --> 00:14:04.820
which is pretty cool.


00:14:04.820 --> 00:14:06.580
Anyway, apparently people use this


00:14:06.580 --> 00:14:10.620
as in 127,839 packages.


00:14:10.620 --> 00:14:13.060
Maybe that number was higher not long ago.


00:14:13.060 --> 00:14:16.380
Packages, projects on GitHub use this.


00:14:16.380 --> 00:14:17.260
I guess not packages,


00:14:17.260 --> 00:14:20.060
but projects, many of which were packages themselves.


00:14:20.060 --> 00:14:25.060
So this guy, Markus Unterwalzer,


00:14:25.060 --> 00:14:30.420
said, you know what, this is really frustrating to me.


00:14:30.420 --> 00:14:31.980
I don't want to set up 2FA.


00:14:31.980 --> 00:14:35.900
So I'm just going to unpublish this, take it down.


00:14:35.900 --> 00:14:39.700
And so don't know exactly what the chain of events was.


00:14:39.700 --> 00:14:42.540
I think something happened to the GitHub repository


00:14:42.540 --> 00:14:44.640
getting deleted, which then triggered,


00:14:44.640 --> 00:14:47.340
maybe also somehow triggered a delete


00:14:47.340 --> 00:14:50.700
of all of the historical PyPI packages.


00:14:50.700 --> 00:14:52.900
Whatever the steps were,


00:14:52.900 --> 00:14:56.160
it erased all the historical PyPI packages.


00:14:56.160 --> 00:15:00.100
So imagine your project has a dependency on atomic rights


00:15:00.100 --> 00:15:03.380
and your requirements.txt or pyproject.toml


00:15:03.380 --> 00:15:06.660
or whatever says equal equal, what version are we on?


00:15:06.660 --> 00:15:08.780
We've got some releases here.


00:15:08.780 --> 00:15:10.500
There's no releases anymore, so I can't tell you.


00:15:10.500 --> 00:15:13.060
But if you had like some concrete number there,


00:15:13.060 --> 00:15:15.940
it would say, pip would say, can't find that, sorry.


00:15:15.940 --> 00:15:18.780
And so all sorts of started breaking.


00:15:18.780 --> 00:15:20.860
Continuous deployment, continuous integration,


00:15:20.860 --> 00:15:25.180
a bunch of PyPI, pytest package tests


00:15:25.180 --> 00:15:26.940
and automation and stuff.


00:15:26.940 --> 00:15:28.420
Brian, maybe you saw some people going,


00:15:28.420 --> 00:15:29.780
what's going on with this thing?


00:15:29.780 --> 00:15:31.960
I didn't really notice it, but.


00:15:31.960 --> 00:15:35.560
- You'd only notice if you depended upon this


00:15:35.560 --> 00:15:36.720
head setup automation, right?


00:15:36.720 --> 00:15:38.320
Like basically check out your code,


00:15:38.320 --> 00:15:40.600
install the dependencies, run pytest.


00:15:40.600 --> 00:15:42.560
But people were like, these tests used to pass.


00:15:42.560 --> 00:15:43.680
Why are they no longer passing?


00:15:43.680 --> 00:15:46.000
And it's 'cause pip couldn't install this project


00:15:46.000 --> 00:15:48.440
that Marcus got a little frustrated with


00:15:48.440 --> 00:15:50.560
and deleted out of PyPI.


00:15:50.560 --> 00:15:52.400
So that's interesting, right?


00:15:52.400 --> 00:15:53.560
Like, did he have done that?


00:15:53.560 --> 00:15:54.640
I don't know.


00:15:54.640 --> 00:15:57.080
Here's his sort of comment saying,


00:15:57.080 --> 00:15:58.400
here's what you got, and it says,


00:15:58.400 --> 00:16:01.480
IPI just told me to enable 2FA to keep uploading this package


00:16:01.480 --> 00:16:03.680
because I thought it was annoying and entitled


00:16:03.680 --> 00:16:06.400
to guarantee the software compliance


00:16:06.400 --> 00:16:07.880
for a handful of companies.


00:16:07.880 --> 00:16:09.840
Basically, his take was,


00:16:09.840 --> 00:16:12.040
you're making me secure the supply chain


00:16:12.040 --> 00:16:15.040
so that large banks and other companies that care about it


00:16:15.040 --> 00:16:16.040
will feel better.


00:16:16.040 --> 00:16:17.880
And you're making me do extra work,


00:16:17.880 --> 00:16:21.400
again, that I think the confusion about hardware,


00:16:21.400 --> 00:16:24.560
moving to hardware 2FA versus just scanning the QR code


00:16:24.560 --> 00:16:25.400
with your phone.


00:16:25.400 --> 00:16:27.520
Anyway, you're making me do extra work,


00:16:27.520 --> 00:16:28.760
And so I deleted the packages.


00:16:28.760 --> 00:16:32.960
Apparently, I deleted all the old versions, sorry.


00:16:32.960 --> 00:16:36.760
Those have been restored by directly working with,


00:16:36.760 --> 00:16:38.960
I believe, Dustin Ingram from PyPI.


00:16:38.960 --> 00:16:41.280
So if you go down here somewhere, it says,


00:16:41.280 --> 00:16:43.600
no, sorry, Donald Stuff, just the one here.


00:16:43.600 --> 00:16:47.280
But yeah, it shows you, I guess, unintended consequences.


00:16:47.280 --> 00:16:49.880
Hey, we're gonna make atomic rights a little safer.


00:16:49.880 --> 00:16:51.800
Maintainer of atomic rights doesn't like that.


00:16:51.800 --> 00:16:53.720
Deletes it, makes everything break.


00:16:53.720 --> 00:16:54.720
Ashley, what's your take on this?


00:16:54.720 --> 00:16:56.400
You've been tracking it.


00:16:56.400 --> 00:16:58.400
Yeah, I mean, I find it really interesting.


00:16:58.400 --> 00:17:01.560
It gets to the whole, you know, what is the sustainability


00:17:01.560 --> 00:17:04.720
of this giant open-source ecosystem that we have?


00:17:04.720 --> 00:17:07.200
I know, I think in the show notes,


00:17:07.200 --> 00:17:10.200
you refer to this as Python's left pad incident or something like that,


00:17:10.200 --> 00:17:12.680
which is sort of a throwback to a very similar thing


00:17:12.680 --> 00:17:15.640
that happened in NPM recently.


00:17:15.640 --> 00:17:18.080
And there was another one recently,


00:17:18.080 --> 00:17:22.480
like at the start of the Ukraine war, basically,


00:17:22.480 --> 00:17:24.520
where someone, I think, pulled their package


00:17:24.600 --> 00:17:27.880
and put in something that was like protest wear or something like that.


00:17:27.880 --> 00:17:32.000
It tried to delete all the data off the hard drives if it detected


00:17:32.000 --> 00:17:36.440
you are in certain countries or something, which is a pretty, pretty rough


00:17:36.440 --> 00:17:39.360
and pretty extreme measure.


00:17:39.360 --> 00:17:43.000
Right. What what if you were working to collect data


00:17:43.000 --> 00:17:47.320
about trying to help Ukraine, but you happen to be in this other country?


00:17:47.320 --> 00:17:48.560
I mean, this is.


00:17:48.560 --> 00:17:52.360
Yeah, it's just overstepping, I think, a little bit unintended consequences.


00:17:52.440 --> 00:17:56.540
Yeah, but this is like, I mean, we're working in industry and having to pin our packages and stuff.


00:17:56.540 --> 00:18:02.140
This is something that, you know, we kind of already protect for by mirroring, you know, I think most people with,


00:18:02.140 --> 00:18:06.540
I'm going to use critical not in the way that's being used here, but like when you have a project and


00:18:06.540 --> 00:18:11.340
you're using all these dependencies, it's kind of also on you to know that like, well, the supply chain,


00:18:11.340 --> 00:18:14.340
I mean, PyPI doesn't have a permanent retention policy.


00:18:14.340 --> 00:18:21.640
Maybe it should, but that is going to lead to, you know, potentially much even bigger hosting costs and everything for what's already a really expensive project.


00:18:21.640 --> 00:18:26.520
We run into the same thing with like packages from Ubuntu and stuff like that as well.


00:18:26.520 --> 00:18:30.640
Not that they get pulled in this way, but they'll bump versions on us that,


00:18:30.640 --> 00:18:35.120
you know, and especially in a regulated industry, we can't just update dependencies whenever they come out.


00:18:35.120 --> 00:18:36.120
So, yeah.


00:18:36.120 --> 00:18:39.440
It wouldn't surprise me to see IPI become immutable.


00:18:39.440 --> 00:18:41.680
Once it goes up there, like you can't change it.


00:18:41.680 --> 00:18:43.280
Yeah, or more so, right?


00:18:43.280 --> 00:18:45.920
Yeah, I would expect it to be more of a request thing.


00:18:45.920 --> 00:18:49.480
You put in a request and say, hey, I want it, this is mine, I want to take it down.


00:18:49.480 --> 00:18:54.360
and some review happens or something because people depend on it.


00:18:54.360 --> 00:18:57.280
I get both sides of it.


00:18:57.280 --> 00:18:59.160
I get that it's my thing,


00:18:59.160 --> 00:19:01.040
I should have complete control over it.


00:19:01.040 --> 00:19:04.580
But I don't have complete control over GitHub,


00:19:04.580 --> 00:19:09.480
I don't have complete control over PyPI or the PSF,


00:19:09.480 --> 00:19:11.880
and I use those services.


00:19:11.880 --> 00:19:14.680
The PSF for instance,


00:19:14.680 --> 00:19:18.160
they purge all of your accounts once a year or something like that,


00:19:18.160 --> 00:19:22.120
You have to re-login or recreate your account.


00:19:22.120 --> 00:19:28.920
Projects and services change their policies every once in a while.


00:19:28.920 --> 00:19:31.240
This is a change in policy that for


00:19:31.240 --> 00:19:33.560
some projects we're going to require 2FA.


00:19:33.560 --> 00:19:37.520
They can do that. If I want to continue to use it, I have to.


00:19:37.520 --> 00:19:39.920
Now, if I don't want to continue to use it,


00:19:39.920 --> 00:19:43.680
I guess that's where we're getting the question in,


00:19:43.680 --> 00:19:46.720
is what ramifications are there?


00:19:46.720 --> 00:19:51.200
Can somebody take their stuff off of PyPI or not?


00:19:51.200 --> 00:19:52.240
Don't know.


00:19:52.240 --> 00:19:55.640
>> Yeah. I think if you read a lot of the conversations here,


00:19:55.640 --> 00:19:58.200
maybe we'll just close up this whole section on that.


00:19:58.200 --> 00:20:00.600
It comes down to two different beliefs.


00:20:00.600 --> 00:20:02.640
One, it's my code,


00:20:02.640 --> 00:20:04.520
I wrote it, I can do whatever I want.


00:20:04.520 --> 00:20:06.660
If I don't like it, I can just delete it.


00:20:06.660 --> 00:20:08.420
If I want to stop, I can stop.


00:20:08.420 --> 00:20:11.240
The other one says, once you put it out there on GitHub and


00:20:11.240 --> 00:20:13.860
you've put it out to the world as here's


00:20:13.860 --> 00:20:16.260
a library that you can use and depend upon,


00:20:16.260 --> 00:20:17.820
and you publish it to the index


00:20:17.820 --> 00:20:20.100
with a clear intention of sharing it,


00:20:20.100 --> 00:20:22.740
you have a minuscule responsibility


00:20:22.740 --> 00:20:24.100
not to keep working on it,


00:20:24.100 --> 00:20:26.260
but to not destroy it for other people


00:20:26.260 --> 00:20:28.220
who are building on what you previously did.


00:20:28.220 --> 00:20:29.580
- Yeah, I think there's a difference there too


00:20:29.580 --> 00:20:31.740
between like writing and publishing the code


00:20:31.740 --> 00:20:33.860
and publishing a package or distributing a package


00:20:33.860 --> 00:20:35.540
that's intended to be, you know,


00:20:35.540 --> 00:20:37.980
conveniently downloaded in CI and stuff like that,


00:20:37.980 --> 00:20:39.900
where you're kind of making a little bit more


00:20:39.900 --> 00:20:41.020
of a promise there.


00:20:41.020 --> 00:20:43.460
But also, I mean, going back to Marcus's post here,


00:20:43.460 --> 00:20:45.940
it sounds like his intention wasn't to break,


00:20:45.940 --> 00:20:48.780
you know, people's existing workflows and stuff like that.


00:20:48.780 --> 00:20:50.940
It was really, he just didn't want to be the maintainer


00:20:50.940 --> 00:20:52.140
of a critical package.


00:20:52.140 --> 00:20:53.540
(laughing)


00:20:53.540 --> 00:20:55.880
- Exactly, he's like, I deleted it, that fixed it.


00:20:55.880 --> 00:20:59.060
- Yeah, and then became, I think, the sort of poster


00:20:59.060 --> 00:21:02.060
of this controversy, so yeah.


00:21:02.060 --> 00:21:03.820
- Yeah, yeah, yeah.


00:21:03.820 --> 00:21:06.620
If you read Marcus's Twitter, you can go back and sort of,


00:21:06.620 --> 00:21:08.380
you kind of get a sense that he's the kind of person


00:21:08.380 --> 00:21:11.300
that would not want to take that kind of stuff


00:21:11.300 --> 00:21:12.940
being put upon him or whatever.


00:21:12.940 --> 00:21:14.980
Let's wrap it up with Teddy's comment out in the audience.


00:21:14.980 --> 00:21:17.460
Feels like a small step to enable 2FA.


00:21:17.460 --> 00:21:18.900
I wonder why it creates so much debate.


00:21:18.900 --> 00:21:20.500
Feels a bit political, especially today


00:21:20.500 --> 00:21:22.500
where 2FA is required almost everywhere.


00:21:22.500 --> 00:21:24.460
Yeah, I agree.


00:21:24.460 --> 00:21:26.700
I think, again, I think people saw the,


00:21:26.700 --> 00:21:27.700
here's your hard work key.


00:21:27.700 --> 00:21:28.900
Like, I don't want a hard work key.


00:21:28.900 --> 00:21:30.220
This is so much work.


00:21:30.220 --> 00:21:31.460
Let's move on, Brian.


00:21:31.460 --> 00:21:33.860
That was a good one, but let's fast.


00:21:33.860 --> 00:21:34.740
Let's get out of there.


00:21:34.740 --> 00:21:36.500
- Yeah, fast, a harsh transition.


00:21:36.500 --> 00:21:39.100
Yeah, let's just talk about FastAPI.


00:21:39.100 --> 00:21:42.420
You know, anyway, don't know how to transition from that.


00:21:42.420 --> 00:21:43.820
So that's good.


00:21:43.820 --> 00:21:48.820
FastAPI filter came up, it was suggested by Arthur Ryo,


00:21:48.820 --> 00:21:51.900
who is also the creator of it.


00:21:51.900 --> 00:21:53.080
And it looks pretty cool.


00:21:53.080 --> 00:21:56.180
So he said in a tweet,


00:21:56.180 --> 00:22:00.620
"I loved using Django filter with Django REST framework,


00:22:00.620 --> 00:22:03.420
and I wanted an equivalent for FastAPI."


00:22:03.420 --> 00:22:05.740
So what this is, is this is a package you add


00:22:05.740 --> 00:22:08.140
to a project that uses FastAPI.


00:22:08.140 --> 00:22:11.740
And with it, you get, like when you're going through


00:22:11.740 --> 00:22:14.440
the cool debug user interface stuff,


00:22:14.440 --> 00:22:16.920
you can filter stuff.


00:22:16.920 --> 00:22:21.740
So you can, you know, it'll look at your schema


00:22:21.740 --> 00:22:24.740
and then you can, you know, filter different items


00:22:24.740 --> 00:22:26.360
and only see part of it.


00:22:26.360 --> 00:22:28.900
And it's just pretty neat.


00:22:28.900 --> 00:22:31.100
He also, it also has things like


00:22:31.100 --> 00:22:33.940
the filters support operators,


00:22:33.940 --> 00:22:37.340
like greater than, greater than equal,


00:22:37.340 --> 00:22:39.940
less than, not in, and things like that.


00:22:39.940 --> 00:22:42.220
So it's kind of a fun way to just filter


00:22:42.220 --> 00:22:44.260
when you're looking at your data, filter it.


00:22:44.260 --> 00:22:48.260
And in his read me, he mentions that he's got a video


00:22:48.260 --> 00:22:50.040
and you kind of need a big screen for this,


00:22:50.040 --> 00:22:54.620
but he does have a video to show it in action,


00:22:54.620 --> 00:22:56.260
which is kind of cool.


00:22:56.260 --> 00:22:58.740
He shows filtering some of the data


00:22:58.740 --> 00:23:01.060
and then seeing the different data output.


00:23:01.060 --> 00:23:04.120
Anyway, just kind of a neat, nice debugging tool


00:23:04.120 --> 00:23:05.660
if you're using FastAPI.


00:23:05.660 --> 00:23:07.020
- That's really awesome.


00:23:07.020 --> 00:23:07.860
- So- - Actually,


00:23:07.860 --> 00:23:09.500
do you do anything with FastAPI?


00:23:09.500 --> 00:23:12.440
Unfortunately, no, this just makes me more jealous, I think,


00:23:12.440 --> 00:23:14.420
of the people who get to use FastAPI,


00:23:14.420 --> 00:23:16.040
'cause it's got all these cool,


00:23:16.040 --> 00:23:19.180
I mean, as a developer, I've played around with it,


00:23:19.180 --> 00:23:22.640
but it's got all these cool debug and min interfaces,


00:23:22.640 --> 00:23:24.420
and then you see even more stuff like this


00:23:24.420 --> 00:23:25.620
kind of built on top of that.


00:23:25.620 --> 00:23:26.780
It's really awesome.


00:23:26.780 --> 00:23:27.980
- Yeah, absolutely.


00:23:27.980 --> 00:23:28.820
- Yeah.


00:23:28.820 --> 00:23:29.780
- This is a fun one.


00:23:29.780 --> 00:23:32.460
- I'm planning on learning more about FastAPI


00:23:32.460 --> 00:23:34.800
on Michael's upcoming course, so.


00:23:34.800 --> 00:23:38.460
- Yeah, are you gonna be able to make it, Brian?


00:23:38.460 --> 00:23:40.380
- I'm gonna make sure I make it.


00:23:40.380 --> 00:23:41.220
Yeah. - Awesome.


00:23:41.220 --> 00:23:42.540
- I'm looking forward to that.


00:23:42.540 --> 00:23:45.540
- Yeah, that's the live in-person FastAPI course.


00:23:45.540 --> 00:23:47.220
I'm doing it about a month from now.


00:23:47.220 --> 00:23:49.260
So should be fun. - Okay.


00:23:49.260 --> 00:23:50.540
- Before we move on,


00:23:50.540 --> 00:23:53.740
I do wanna talk about our sponsor for this week,


00:23:53.740 --> 00:23:56.780
Microsoft for Startups Founders Hub.


00:23:56.780 --> 00:23:58.460
They're doing super cool stuff.


00:23:58.460 --> 00:24:01.580
As someone who has started his own small business,


00:24:01.580 --> 00:24:03.180
it is a lot of work,


00:24:03.180 --> 00:24:04.280
there's a lot of uncertainty,


00:24:04.280 --> 00:24:06.940
and knowing how to get help


00:24:06.940 --> 00:24:09.380
and having support of people who have experience


00:24:09.380 --> 00:24:11.100
is really, really valuable.


00:24:11.100 --> 00:24:12.720
Starting business is hard.


00:24:12.720 --> 00:24:14.260
They say that by some estimates,


00:24:14.260 --> 00:24:16.940
90% of all the startups will go out of business


00:24:16.940 --> 00:24:19.900
in the first year, which is tough, but that's how it is.


00:24:19.900 --> 00:24:21.620
With that in mind, Microsoft for Startups


00:24:21.620 --> 00:24:24.140
set out to understand what startups need to be successful


00:24:24.140 --> 00:24:26.140
and create a digital platform


00:24:26.140 --> 00:24:27.740
to help overcome those challenges,


00:24:27.740 --> 00:24:30.260
and that's where they got their Founders Hub.


00:24:30.260 --> 00:24:32.060
So Microsoft for Startups Founders Hub


00:24:32.060 --> 00:24:34.620
provides all founders at any stage


00:24:34.620 --> 00:24:38.020
with free resources to help them solve startup challenges.


00:24:38.020 --> 00:24:39.880
You get technology benefits,


00:24:39.880 --> 00:24:43.700
access to expert guidance and skilled resources,


00:24:43.700 --> 00:24:46.780
mentorship, networking connections, and so much more.


00:24:46.780 --> 00:24:49.980
So, and unlike a lot of other similar programs


00:24:49.980 --> 00:24:52.220
in the industry, it doesn't require startups


00:24:52.220 --> 00:24:54.620
to be investor backed or third party validated


00:24:54.620 --> 00:24:55.860
to participate.


00:24:55.860 --> 00:24:57.940
Founders Hub is just open to everyone.


00:24:57.940 --> 00:24:58.820
So what do you get?


00:24:58.820 --> 00:25:00.740
You get, you can speed up your development


00:25:00.740 --> 00:25:04.240
with free access to GitHub and Microsoft Cloud resources


00:25:04.240 --> 00:25:06.480
that have a bunch of credits to unlock over time


00:25:06.480 --> 00:25:09.120
so you can grow without worrying about paying for stuff.


00:25:09.120 --> 00:25:11.080
They also help startups innovate.


00:25:11.080 --> 00:25:13.520
They're partnering with companies like OpenAI,


00:25:13.520 --> 00:25:15.980
AI research and deployment company


00:25:15.980 --> 00:25:19.160
to get extra benefits through their partners as well.


00:25:19.160 --> 00:25:20.340
So with the Founders Hub,


00:25:20.340 --> 00:25:21.920
it's not really about who you know.


00:25:21.920 --> 00:25:24.720
You have this access to this mentorship network.


00:25:24.720 --> 00:25:27.240
So you get access to a pool of hundreds of mentors


00:25:27.240 --> 00:25:29.240
across a range of disciplines,


00:25:29.240 --> 00:25:31.440
areas like idea validation, fundraising,


00:25:31.440 --> 00:25:34.060
management and coaching, sales and marketing,


00:25:34.060 --> 00:25:36.140
and specific technical stress points.


00:25:36.140 --> 00:25:37.940
I think that might be the most valuable, honestly,


00:25:37.940 --> 00:25:40.540
is, "Hey, I need to talk to this person or somebody.


00:25:40.540 --> 00:25:41.380
Is this a good idea?


00:25:41.380 --> 00:25:42.580
Is this how I should be doing?" and so on.


00:25:42.580 --> 00:25:45.140
So you can book a one-on-one meeting with mentors,


00:25:45.140 --> 00:25:47.500
many of whom are founders themselves.


00:25:47.500 --> 00:25:50.460
Make your idea a reality today with critical support


00:25:50.460 --> 00:25:53.660
that you'll get from Microsoft for Startups Founders Hub.


00:25:53.660 --> 00:25:56.700
During the program, visit pythonbytes.fm/foundershub


00:25:56.700 --> 00:25:58.620
to click the link in your show notes.


00:25:58.620 --> 00:26:01.460
And yeah, thanks to Microsoft for supporting the show.


00:26:01.460 --> 00:26:02.620
- Nice. - Indeed.


00:26:03.540 --> 00:26:05.540
So what do you got for us next, Michael?


00:26:05.540 --> 00:26:07.740
>> Ashley's next. I'm letting him go next.


00:26:07.740 --> 00:26:08.340
>> Oh, right.


00:26:08.340 --> 00:26:08.740
>> Okay.


00:26:08.740 --> 00:26:10.500
>> Yeah, we'll scroll down to mine then.


00:26:10.500 --> 00:26:14.100
Yeah, so I guess I think the reason I'm here,


00:26:14.100 --> 00:26:16.500
I emailed you guys after there was some discussion


00:26:16.500 --> 00:26:18.980
on the podcast a few weeks ago about,


00:26:18.980 --> 00:26:21.380
hey, we're seeing a lot more stuff built in Rust,


00:26:21.380 --> 00:26:25.220
and you had some good points about why we're seeing that.


00:26:25.220 --> 00:26:29.820
But I thought super relevant to this podcast is this project,


00:26:29.820 --> 00:26:34.140
And in fact, this whole organization, Py03 on GitHub,


00:26:34.140 --> 00:26:37.620
has a number of projects in here that are super relevant


00:26:37.620 --> 00:26:39.420
to Python developers, obviously.


00:26:39.420 --> 00:26:43.740
So the main one, I think, is Py03, which is Rust bindings.


00:26:43.740 --> 00:26:46.140
And basically what I emailed you guys was that my hypothesis


00:26:46.140 --> 00:26:50.420
is the tooling around building extensions for Python in Rust


00:26:50.420 --> 00:26:54.620
or calling Python from Rust is getting so good and so easy


00:26:54.620 --> 00:26:59.180
that for me, I find this preferable to writing C extensions, for example.


00:26:59.240 --> 00:27:01.640
Not even necessarily because of Rust,


00:27:01.640 --> 00:27:04.040
although Rust is a really great language


00:27:04.040 --> 00:27:06.480
I've been getting into over the last year.


00:27:06.480 --> 00:27:09.920
But just that tooling aspect of it is really great.


00:27:09.920 --> 00:27:12.080
So the experience is pretty awesome


00:27:12.080 --> 00:27:14.000
based on these separate projects.


00:27:14.000 --> 00:27:16.840
So there's Py03, which is the bindings.


00:27:16.840 --> 00:27:18.640
And this allows you to basically use


00:27:18.640 --> 00:27:20.640
these type of things.


00:27:20.640 --> 00:27:22.200
It's almost like a function decorator.


00:27:22.200 --> 00:27:24.480
These are called procedural macros.


00:27:24.480 --> 00:27:25.580
They're kind of tricky to write,


00:27:25.580 --> 00:27:27.160
but they're really easy to use.


00:27:27.160 --> 00:27:28.600
So you just put this on there


00:27:28.600 --> 00:27:30.820
and then use this one to create a module,


00:27:30.820 --> 00:27:32.220
add your function to the module,


00:27:32.220 --> 00:27:33.860
and then if you build this file,


00:27:33.860 --> 00:27:36.700
you can import it in Python and run this function.


00:27:36.700 --> 00:27:40.380
So the combination of the ease of writing this,


00:27:40.380 --> 00:27:43.540
and then there's another project in here called Maturin.


00:27:43.540 --> 00:27:44.820
- Before you move on real quick,


00:27:44.820 --> 00:27:47.420
maybe for people listening,


00:27:47.420 --> 00:27:50.980
if you go back just real quick to that section you had there.


00:27:50.980 --> 00:27:54.740
So the idea is what you do is you write some Rust code,


00:27:54.740 --> 00:27:57.140
and then you put, do you call it a decorator


00:27:57.140 --> 00:27:59.500
an attribute or what do you call that hash?


00:27:59.500 --> 00:28:01.220
- It's called a macro.


00:28:01.220 --> 00:28:02.660
Yeah, a procedural macro,


00:28:02.660 --> 00:28:04.260
but you can just call it a macro, yeah.


00:28:04.260 --> 00:28:07.180
- Yeah, so you put the macro onto functions.


00:28:07.180 --> 00:28:09.780
There's one function that defines the module.


00:28:09.780 --> 00:28:11.020
And then in there you just say,


00:28:11.020 --> 00:28:13.220
here are basically all the things I'm exporting


00:28:13.220 --> 00:28:15.180
from Rust over to Python.


00:28:15.180 --> 00:28:17.380
And those are just the ones you wrap with the macro, right?


00:28:17.380 --> 00:28:18.700
- Mm-hmm, yep, yeah, exactly.


00:28:18.700 --> 00:28:22.260
- Assuming that writing Rust for you is straightforward.


00:28:22.260 --> 00:28:23.820
This is a really simple addition.


00:28:23.820 --> 00:28:26.340
- Yeah, and I think, you know, once you have this kind of,


00:28:26.340 --> 00:28:28.600
You know, there's a little bit of boilerplate in here, but the, these


00:28:28.600 --> 00:28:32.520
macros reduce the boilerplate so much that once you're in the function, in


00:28:32.520 --> 00:28:35.680
fact, I think this is like a really cool way to get started with Rust because.


00:28:35.680 --> 00:28:39.780
Uh, some of the really steep learning curve in Rust is when you're building


00:28:39.780 --> 00:28:42.940
larger projects and you have to deal with, you know, strict typing and


00:28:42.940 --> 00:28:46.400
lifetimes and all these scary things that, you know, Rust can do, but like


00:28:46.400 --> 00:28:49.080
you're, you're limited to just a function scope, cause that's what


00:28:49.080 --> 00:28:50.760
you're calling from, from Python.


00:28:50.760 --> 00:28:53.000
I think it's a kind of a cool way to get started and just get


00:28:53.000 --> 00:28:54.080
familiar with the syntax.


00:28:54.080 --> 00:28:54.800
Interesting.


00:28:54.800 --> 00:28:55.080
Yeah.


00:28:55.080 --> 00:28:55.480
Yeah.


00:28:55.720 --> 00:29:01.720
And yeah, I think part of the reason these tools are so great is like the whole Rust community puts a lot of value on


00:29:01.720 --> 00:29:08.580
Tooling it's a like a relatively young language. So from the start I think it had this sort of you know attitude of


00:29:08.580 --> 00:29:12.140
Building good ergonomics for developers having good, you know


00:29:12.140 --> 00:29:15.000
A single command-line tool kind of that can do all these different things


00:29:15.000 --> 00:29:19.760
And so this group that that maintains pi oh three has also created this tool called mature in


00:29:19.760 --> 00:29:24.120
Which feels to me a lot like flit with you know, like the super lightweight


00:29:25.040 --> 00:29:26.720
wheel builder.


00:29:26.720 --> 00:29:28.800
And so you see here, you just run mature and develop


00:29:28.800 --> 00:29:30.800
with this project structure in here.


00:29:30.800 --> 00:29:33.080
It also has like a mature init, I think,


00:29:33.080 --> 00:29:34.840
which will create a new project for you.


00:29:34.840 --> 00:29:38.040
And then you see here this develop will actually


00:29:38.040 --> 00:29:39.120
give you some output, whatever,


00:29:39.120 --> 00:29:41.260
'cause it builds a wheel and then installs it


00:29:41.260 --> 00:29:42.400
in your virtual environment.


00:29:42.400 --> 00:29:44.960
And so you can see here, you just call into that code


00:29:44.960 --> 00:29:47.880
and then this is calling Rust code for you already.


00:29:47.880 --> 00:29:48.720
- Oh, cool.


00:29:48.720 --> 00:29:49.540
- That's really nice.


00:29:49.540 --> 00:29:51.720
So have you built things that you've released


00:29:51.720 --> 00:29:54.560
or are backed by Rust?


00:29:54.560 --> 00:29:58.640
Not released, but I've done some hobbyist things


00:29:58.640 --> 00:30:03.200
and then also some stuff for work as well.


00:30:03.200 --> 00:30:07.240
Some small pieces of, mostly I work in,


00:30:07.240 --> 00:30:08.560
I came from a scientific background


00:30:08.560 --> 00:30:10.480
and I now work for this, like I said,


00:30:10.480 --> 00:30:12.320
a portable MRI startup, so our whole thing


00:30:12.320 --> 00:30:15.640
is like Python from top to bottom, which is really cool.


00:30:15.640 --> 00:30:16.960
But for those performance-critical


00:30:16.960 --> 00:30:18.880
numerical computing things, we use a ton


00:30:18.880 --> 00:30:22.200
of NumPy and TensorFlow, but then also


00:30:23.240 --> 00:30:25.120
some C extensions, and I've been just kind of


00:30:25.120 --> 00:30:26.960
playing around with converting those to Rust,


00:30:26.960 --> 00:30:30.360
and this Rust NumPy is another one of their projects here


00:30:30.360 --> 00:30:32.880
that makes it really easy to write a function


00:30:32.880 --> 00:30:35.400
that'll take a NumPy array, basically,


00:30:35.400 --> 00:30:36.760
and do some calculations on it.


00:30:36.760 --> 00:30:37.880
- Oh, fantastic.


00:30:37.880 --> 00:30:39.560
Rust NumPy.


00:30:39.560 --> 00:30:41.840
Is it like an interoperability layer


00:30:41.840 --> 00:30:43.280
between Rust and NumPy?


00:30:43.280 --> 00:30:47.120
- Yeah, it pretty much just lets you take NumPy arrays


00:30:47.120 --> 00:30:48.960
from Python into your Rust functions


00:30:48.960 --> 00:30:51.160
that you're creating with Py03,


00:30:51.160 --> 00:30:53.800
and then also create NumPy arrays


00:30:53.800 --> 00:30:56.440
and return them from those functions.


00:30:56.440 --> 00:30:58.520
And it depends heavily on ndarray,


00:30:58.520 --> 00:31:00.640
which is a pure Rust project here


00:31:00.640 --> 00:31:03.800
for n-dimensional arrays and computation,


00:31:03.800 --> 00:31:05.000
so which is probably more analogous


00:31:05.000 --> 00:31:07.040
to what actually NumPy itself is,


00:31:07.040 --> 00:31:08.880
but in the Rust ecosystem.


00:31:08.880 --> 00:31:10.720
- Okay, very cool. - That's pretty cool.


00:31:10.720 --> 00:31:14.280
- So why Rust over C?


00:31:14.280 --> 00:31:16.360
- I mean, I think it's, I was mentioning to you before,


00:31:16.360 --> 00:31:18.680
like, you know, the Rust community


00:31:18.680 --> 00:31:21.080
is really excited about Rust.


00:31:21.080 --> 00:31:23.520
Like everyone who tries it likes it, I think.


00:31:23.520 --> 00:31:25.840
It's topping the charts in all these


00:31:25.840 --> 00:31:27.700
most loved programming language surveys


00:31:27.700 --> 00:31:30.760
and stuff like that from Stack Overflow and everything.


00:31:30.760 --> 00:31:34.320
It guarantees, it provides some more stronger guarantees


00:31:34.320 --> 00:31:37.760
around memory safety while still maintaining


00:31:37.760 --> 00:31:39.960
high performance, so that comes at a cost


00:31:39.960 --> 00:31:43.040
of a little bit of complexity and learning curve.


00:31:43.040 --> 00:31:46.360
It also happens to, with those memory safety things,


00:31:46.360 --> 00:31:48.920
come with what they call fearless concurrency,


00:31:48.920 --> 00:31:51.120
where the typing system can prevent you


00:31:51.120 --> 00:31:52.620
from creating race conditions


00:31:52.620 --> 00:31:53.920
and actually warn you about them


00:31:53.920 --> 00:31:57.680
or fail to compile at compile time.


00:31:57.680 --> 00:32:01.920
And so I find the trade-offs between memory safety


00:32:01.920 --> 00:32:03.880
and performance and ease of use


00:32:03.880 --> 00:32:06.480
to be really interesting between Rust and Python.


00:32:06.480 --> 00:32:07.960
They make completely different choices,


00:32:07.960 --> 00:32:12.160
but both sort of with similar things in mind.


00:32:12.160 --> 00:32:14.800
Python sacrifices some performance for ease of development,


00:32:14.800 --> 00:32:16.640
but still wants to be memory safe, right?


00:32:16.640 --> 00:32:18.600
Like if you're getting a seg fault in Python,


00:32:18.600 --> 00:32:21.400
you're calling into something and doing something wrong.


00:32:21.400 --> 00:32:23.600
It's hard to do that with pure Python code, right?


00:32:23.600 --> 00:32:24.600
And same is true of Rust.


00:32:24.600 --> 00:32:27.680
It's like if you're not writing what they call unsafe code,


00:32:27.680 --> 00:32:29.720
where you have to kind of wrap it in a block


00:32:29.720 --> 00:32:31.440
that's actually called unsafe,


00:32:31.440 --> 00:32:33.840
you shouldn't end up with those type of problems.


00:32:33.840 --> 00:32:36.080
So it's kind of cool to see those two things.


00:32:36.080 --> 00:32:37.800
And then when you really do need performance,


00:32:37.800 --> 00:32:40.280
you can drop into this sort of lower level language.


00:32:40.280 --> 00:32:42.400
Maybe it's a little bit steeper learning curve,


00:32:42.400 --> 00:32:43.520
but you'll get the performance


00:32:43.520 --> 00:32:46.100
and you don't have to sacrifice that memory safety to get it.


00:32:46.100 --> 00:32:47.220
- Yeah, fantastic.


00:32:47.220 --> 00:32:50.260
Brian, you do more C stuff than I do these days.


00:32:50.260 --> 00:32:51.100
What do you think?


00:32:51.100 --> 00:32:53.760
- There's some bottleneck stuff,


00:32:53.760 --> 00:32:56.540
things that I use Python for that we do have


00:32:56.540 --> 00:32:59.820
like large amounts of data passing back and forth.


00:32:59.820 --> 00:33:03.940
And I don't, I mean, normally Python isn't the bottleneck,


00:33:03.940 --> 00:33:05.120
but sometimes it is.


00:33:05.120 --> 00:33:08.180
And there are cases where I'm,


00:33:08.180 --> 00:33:09.680
I was just Googling some stuff right now


00:33:09.680 --> 00:33:12.180
trying to figure out if I can apply Rust


00:33:12.180 --> 00:33:13.380
to some of these things.


00:33:13.380 --> 00:33:19.460
Because actually, I think that's what Ashley pointed out is fascinating, is this might


00:33:19.460 --> 00:33:25.060
be a really great way to learn Rust is to try to solve one of your bottleneck problems


00:33:25.060 --> 00:33:28.180
in Python with Rust.


00:33:28.180 --> 00:33:36.420
And I mean, I'm comfortable with C as well, but even though I've been using it for decades,


00:33:36.420 --> 00:33:39.460
I'd rather, if I can use something else, I would like to try.


00:33:39.460 --> 00:33:40.940
>> Something a little more modern.


00:33:40.940 --> 00:33:42.060
I totally agree.


00:33:42.060 --> 00:33:43.260
- And yeah, you're right that,


00:33:43.260 --> 00:33:47.040
oh, I need to implement these three functions in Rust


00:33:47.040 --> 00:33:48.240
and then plug them into Python.


00:33:48.240 --> 00:33:51.020
That's different than I need to completely learn Rust


00:33:51.020 --> 00:33:53.340
so I can just do this whole project in Rust.


00:33:53.340 --> 00:33:55.360
- Yeah, it's a narrow scope,


00:33:55.360 --> 00:33:58.720
kind of a cool way to try to learn something.


00:33:58.720 --> 00:34:01.780
- Yeah, and these projects have a ton of great examples.


00:34:01.780 --> 00:34:04.420
A few of them have user guides and stuff like that.


00:34:04.420 --> 00:34:07.160
So plenty of material there to get you started.


00:34:07.160 --> 00:34:08.000
- Nice. - Cool.


00:34:08.000 --> 00:34:09.360
- Cool, yeah, very good one.


00:34:09.360 --> 00:34:10.200
Thanks, Ashley.


00:34:10.200 --> 00:34:12.160
- Right, have you ever heard that regular expressions


00:34:12.160 --> 00:34:13.000
are easy?


00:34:13.000 --> 00:34:13.840
- Yeah.


00:34:13.840 --> 00:34:14.660
(laughing)


00:34:14.660 --> 00:34:15.820
- Yeah, not me.


00:34:15.820 --> 00:34:17.300
But here, Brian, let me type something.


00:34:17.300 --> 00:34:18.140
I'm gonna type this.


00:34:18.140 --> 00:34:22.060
I'm gonna say, okay, I want a dot plus,


00:34:22.060 --> 00:34:24.940
and then I want, I'm gonna write the word fun.


00:34:24.940 --> 00:34:29.020
I'm gonna write, is it backslash D plus?


00:34:29.020 --> 00:34:30.860
I don't even know if that's a proper regular expression,


00:34:30.860 --> 00:34:32.460
but what does it do?


00:34:32.460 --> 00:34:36.460
So I wanna introduce you to this site called AutoregX,


00:34:36.460 --> 00:34:39.460
and this comes to us from Jason Washburn.


00:34:39.460 --> 00:34:41.240
Thank you, Jason, for sending this over.


00:34:41.240 --> 00:34:45.120
And the idea is I can put a regex in here and hit go.


00:34:45.120 --> 00:34:46.820
Wait, hold on.


00:34:46.820 --> 00:34:48.740
Let me just do this one.


00:34:48.740 --> 00:34:50.100
Do a simple one for a second.


00:34:50.100 --> 00:34:51.900
What am I missing here?


00:34:51.900 --> 00:34:53.380
- I think you have that it's backwards.


00:34:53.380 --> 00:34:54.820
You're going English to regex.


00:34:54.820 --> 00:34:55.660
- Yeah, yeah, yeah.


00:34:55.660 --> 00:34:56.700
So why was it doing that?


00:34:56.700 --> 00:34:59.460
That was, yeah, so first of all, yeah.


00:34:59.460 --> 00:35:00.500
Okay, so let's start with that direction.


00:35:00.500 --> 00:35:01.780
That's the default direction it pulls up.


00:35:01.780 --> 00:35:03.340
So what I can do is say,


00:35:03.340 --> 00:35:06.800
I want a regex that starts with fun,


00:35:06.800 --> 00:35:09.380
then any number, right that, okay.


00:35:09.380 --> 00:35:12.580
And so then it says, well, you know what?


00:35:12.580 --> 00:35:17.580
What you want is, caret fun dot star regex.


00:35:17.580 --> 00:35:19.380
Mm-hmm.


00:35:19.380 --> 00:35:19.980
Is that right?


00:35:19.980 --> 00:35:22.100
It's not quite right.


00:35:22.100 --> 00:35:23.940
Well, this is start.


00:35:23.940 --> 00:35:24.660
Starts with.


00:35:24.660 --> 00:35:26.980
But dot star, I think, is any character, right?


00:35:26.980 --> 00:35:27.940
Yeah.


00:35:27.940 --> 00:35:30.380
Oh, then how about-- yeah, it's not perfect.


00:35:30.380 --> 00:35:31.860
Then the same numbers.


00:35:31.860 --> 00:35:32.500
There you go.


00:35:32.500 --> 00:35:33.780
Oh, there you go.


00:35:33.780 --> 00:35:36.780
Yeah, you've got to-- it's not perfect at understanding English.


00:35:36.780 --> 00:35:38.660
But I wrote an English sentence to it.


00:35:38.660 --> 00:35:40.500
And it came up with a regular expression.


00:35:40.500 --> 00:35:42.580
It says, disclaimer, all outputs are generated


00:35:42.580 --> 00:35:45.300
by OpenAI's GTP3.


00:35:45.300 --> 00:35:47.620
Sometimes it makes sense, sometimes it doesn't.


00:35:47.620 --> 00:35:49.160
But you could also do the reverse.


00:35:49.160 --> 00:35:50.480
- Yeah, let's do the reverse.


00:35:50.480 --> 00:35:51.320
- All right, I'm gonna make,


00:35:51.320 --> 00:35:52.900
I'll try to go back to my other one.


00:35:52.900 --> 00:35:55.740
I'll say, caret, then dot plus,


00:35:55.740 --> 00:35:58.140
and then fun, then backslash,


00:35:58.140 --> 00:36:01.220
let's try that, and do it in reverse.


00:36:01.220 --> 00:36:03.860
So, I'll run it again, and you wait for a second.


00:36:03.860 --> 00:36:05.600
It says, the regular expression means


00:36:05.600 --> 00:36:07.580
the string must start with any character,


00:36:07.580 --> 00:36:09.120
then there must be one or more characters


00:36:09.120 --> 00:36:10.740
before the substring fun,


00:36:10.740 --> 00:36:13.060
and then there may be any number of digits


00:36:13.060 --> 00:36:14.580
after the substring fun.


00:36:14.580 --> 00:36:15.420
What do you think about that?


00:36:15.420 --> 00:36:16.240
It's not quite right.


00:36:16.240 --> 00:36:17.540
I think it only matches one number.


00:36:17.540 --> 00:36:18.960
- Yeah, maybe it only matches one.


00:36:18.960 --> 00:36:20.100
- Yeah, yeah, but still.


00:36:20.100 --> 00:36:21.940
- The trick for me too is that regular expressions


00:36:21.940 --> 00:36:24.220
are like different depending on your platform.


00:36:24.220 --> 00:36:25.620
That's what always tricks me up.


00:36:25.620 --> 00:36:27.060
I'm like, which one is this?


00:36:27.060 --> 00:36:28.780
- So this is a really cool tool


00:36:28.780 --> 00:36:31.540
to almost understand regular expressions.


00:36:31.540 --> 00:36:34.700
- Yeah, so here's how I would perceive this.


00:36:34.700 --> 00:36:36.920
I would say, I wouldn't use this


00:36:36.920 --> 00:36:39.080
and just go writing all my regular expressions.


00:36:39.080 --> 00:36:41.080
But if I'm like, I really don't know


00:36:41.080 --> 00:36:43.760
how to get a regular expression to do that.


00:36:43.760 --> 00:36:45.400
You could go write the English sentence


00:36:45.400 --> 00:36:47.840
and it might come up with either the right answer


00:36:47.840 --> 00:36:49.880
or something close enough that it's like,


00:36:49.880 --> 00:36:52.680
you know, okay, I see where it's going now.


00:36:52.680 --> 00:36:54.200
It's not quite matching, but let me,


00:36:54.200 --> 00:36:56.380
I would call this more of a guide


00:36:56.380 --> 00:36:59.760
or like a signpost along the way,


00:36:59.760 --> 00:37:01.360
not the tool to build it.


00:37:01.360 --> 00:37:03.640
- I could see it being super useful with like,


00:37:03.640 --> 00:37:06.160
I think there's a site, Regex or something like that


00:37:06.160 --> 00:37:08.200
where you can basically write a bunch of test cases


00:37:08.200 --> 00:37:12.640
and then your regex and have it run against them all


00:37:12.640 --> 00:37:14.280
in your browser and see it right there.


00:37:14.280 --> 00:37:16.880
And that's like, when I have to write regular expressions,


00:37:16.880 --> 00:37:18.400
that's how I do it.


00:37:18.400 --> 00:37:21.000
Like write a bunch of tests in here and get it to work.


00:37:21.000 --> 00:37:23.060
I maybe should be writing the tests in my own code


00:37:23.060 --> 00:37:24.880
and actually putting them in as tests,


00:37:24.880 --> 00:37:26.560
but I do it in this.


00:37:26.560 --> 00:37:28.760
But yeah, if you kind of integrate those two tools together,


00:37:28.760 --> 00:37:30.200
I could see this being useful.


00:37:30.200 --> 00:37:31.560
- Okay, yeah, for sure.


00:37:31.560 --> 00:37:33.520
We take the example one over here


00:37:33.520 --> 00:37:36.740
And we could put it into this there and see what it says.


00:37:36.740 --> 00:37:39.540
So the regex is create a group that is a word


00:37:39.540 --> 00:37:42.100
and then you got a piece, at least some white space there.


00:37:42.100 --> 00:37:43.120
What do we get if we run that?


00:37:43.120 --> 00:37:45.100
The regular expression matches any word


00:37:45.100 --> 00:37:46.900
that begins with an uppercase letter.


00:37:46.900 --> 00:37:47.740
That's pretty cool. - Pretty cool.


00:37:47.740 --> 00:37:49.120
- It does. - Yeah.


00:37:49.120 --> 00:37:51.340
- Anyway, fun, people can check it out.


00:37:51.340 --> 00:37:54.140
More regex fun, thank Jason for sending that in.


00:37:54.140 --> 00:37:55.700
And then Ashley, you also pointed out


00:37:55.700 --> 00:37:58.700
that Simon Wilson wrote an article on this.


00:37:58.700 --> 00:37:59.660
I don't know anything about this.


00:37:59.660 --> 00:38:00.780
I just saw this in the notes.


00:38:00.780 --> 00:38:03.180
- Yeah, he was actually, so it's sort of related


00:38:03.180 --> 00:38:05.780
'cause it's GPT-3 and code, and I mean,


00:38:05.780 --> 00:38:08.260
even this first one has some regular expression stuff in it,


00:38:08.260 --> 00:38:10.340
but I guess there's a mode with GPT-3,


00:38:10.340 --> 00:38:11.420
I haven't really played with this,


00:38:11.420 --> 00:38:12.760
but you can like paste in code


00:38:12.760 --> 00:38:15.420
and then start asking it questions about it,


00:38:15.420 --> 00:38:17.320
like in a sort of conversational manner.


00:38:17.320 --> 00:38:20.340
And his blog post I thought was really cool.


00:38:20.340 --> 00:38:21.580
One thing I did see pointed out


00:38:21.580 --> 00:38:22.900
was similar to what we were just talking about


00:38:22.900 --> 00:38:25.980
is apparently the AI model, like the chatbot,


00:38:25.980 --> 00:38:29.260
can be very scarily confident in its answers,


00:38:29.260 --> 00:38:31.480
and sometimes it's very confidently wrong.


00:38:32.580 --> 00:38:36.060
So you have to not be lulled into the false sense of security there.


00:38:36.060 --> 00:38:37.060
Yeah, for sure.


00:38:37.060 --> 00:38:38.060
Cool.


00:38:38.060 --> 00:38:39.860
You definitely do have to take it with a grain of salt.


00:38:39.860 --> 00:38:42.060
All right, Brian, close us out here.


00:38:42.060 --> 00:38:51.180
Okay, so Philippe sent us this next topic and he's working for Python Anywhere.


00:38:51.180 --> 00:38:54.220
So anyway, he's one of the insiders.


00:38:54.220 --> 00:39:00.500
Anaconda acquires Python Anywhere to expand the Python team collaboration in the cloud.


00:39:00.500 --> 00:39:05.040
So not expand the team, expand Python team collaboration.


00:39:05.040 --> 00:39:12.100
So this is an interesting, we're linking to an article from Anaconda press release just


00:39:12.100 --> 00:39:17.420
saying, yeah, we bought Python anywhere or, you know, acquired them.


00:39:17.420 --> 00:39:19.700
So it's interesting.


00:39:19.700 --> 00:39:25.220
I think I'm going to jump to another thing before I guess give my feedback.


00:39:25.220 --> 00:39:30.460
One of the things here it says from the announcement, the acquisition comes on the heels of Anaconda.


00:39:30.460 --> 00:39:33.920
release of Pyscript, an open source framework for running


00:39:33.920 --> 00:39:37.180
Python applications with HTML. We've covered that. The Python


00:39:37.180 --> 00:39:40.020
Anywhere acquisition and the development of Pyscript are


00:39:40.020 --> 00:39:43.460
central to Anaconda's focus on democratizing Python and data


00:39:43.460 --> 00:39:47.540
science. So I'm going to be optimistic and not pessimistic


00:39:47.540 --> 00:39:52.540
on this. I think hopefully it's a good thing. And then on the


00:39:52.540 --> 00:39:55.820
Python Anywhere side blog there's a FAQ about the


00:39:55.820 --> 00:39:59.860
acquisition and kind of goes through the whole process of


00:39:59.860 --> 00:40:03.380
it kind of goes through from the customer standpoint,


00:40:03.380 --> 00:40:07.100
will this affect my account, will the billing change?


00:40:07.100 --> 00:40:09.500
Basically, they're going to keep everything the same,


00:40:09.500 --> 00:40:11.740
at least for now.


00:40:11.740 --> 00:40:14.740
But hopefully, it will expand its services and stuff


00:40:14.740 --> 00:40:15.780
and make things better.


00:40:15.780 --> 00:40:19.180
My personal take on it is that I'm


00:40:19.180 --> 00:40:21.620
hoping-- Python Anywhere is a cool idea,


00:40:21.620 --> 00:40:23.440
but I haven't seen much from them lately.


00:40:23.440 --> 00:40:27.860
So I'm hoping this will breathe some life into Python Anywhere.


00:40:27.860 --> 00:40:29.740
I'm not saying it's dead, but I just,


00:40:29.740 --> 00:40:31.740
it'd be cool to see it grow.


00:40:31.740 --> 00:40:34.740
- Fun fact, Talk Python itself started out


00:40:34.740 --> 00:40:37.580
on Python Anywhere for a month or so,


00:40:37.580 --> 00:40:38.860
because I'm like, I want to get this up,


00:40:38.860 --> 00:40:40.740
and it's kind of complicated to figure out


00:40:40.740 --> 00:40:42.780
all the Linux, Nginx stuff,


00:40:42.780 --> 00:40:44.980
and it seems real easy to just fire it up over here,


00:40:44.980 --> 00:40:46.140
and it worked great for a while,


00:40:46.140 --> 00:40:48.620
but eventually moved off as like,


00:40:48.620 --> 00:40:51.420
you know, started doing 15 terabytes of traffic a month.


00:40:51.420 --> 00:40:55.820
Yeah, so anyway, I'd love to see that coming along.


00:40:55.820 --> 00:40:56.860
That seems great.


00:40:56.860 --> 00:40:58.820
Let me share also one more other thing.


00:40:58.820 --> 00:41:00.780
So on the screen I have python.org


00:41:00.780 --> 00:41:02.780
and it shows you a code sample.


00:41:02.780 --> 00:41:05.900
Has anyone clicked this little thing up here on the right?


00:41:05.900 --> 00:41:08.060
This little shell looking thing?


00:41:08.060 --> 00:41:10.520
- Yeah, I have before, but I don't remember what it does.


00:41:10.520 --> 00:41:11.360
- Watch.


00:41:11.360 --> 00:41:13.260
- Oh, nice.


00:41:13.260 --> 00:41:15.420
- So it opens up a Python REPL.


00:41:15.420 --> 00:41:18.020
That Python REPL is running on Python Anywhere.


00:41:18.020 --> 00:41:19.940
- Yeah, and one of the cool things about Python Anywhere


00:41:19.940 --> 00:41:22.220
is this ability, this ability to just


00:41:22.220 --> 00:41:23.780
like run it from any device.


00:41:23.780 --> 00:41:26.500
So you can run this from a tablet


00:41:26.500 --> 00:41:29.860
or Chromebook or something without installing anything.


00:41:29.860 --> 00:41:31.900
And that's neat.


00:41:31.900 --> 00:41:33.620
I'd like to see that expand.


00:41:33.620 --> 00:41:34.460
Cool idea.


00:41:34.460 --> 00:41:35.280
- Yeah, it sure is.


00:41:35.280 --> 00:41:36.900
And I can see how this pairs with PyScript.


00:41:36.900 --> 00:41:38.420
So this is in my browser,


00:41:38.420 --> 00:41:42.180
I can just run Python and get a view into a REPL.


00:41:42.180 --> 00:41:43.020
But with PyScript,


00:41:43.020 --> 00:41:45.420
I maybe just move the execution to the front end as well.


00:41:45.420 --> 00:41:47.340
So they're kind of related in that regard.


00:41:47.340 --> 00:41:48.860
- Yeah, there's a few things--


00:41:48.860 --> 00:41:49.900
- Go, Brian.


00:41:49.900 --> 00:41:51.900
- No, there's a few things I'd really love to see


00:41:51.900 --> 00:41:53.740
Python Anywhere change with this


00:41:53.740 --> 00:41:58.940
is the currently Python Anywhere doesn't support Python 3.10.


00:41:58.940 --> 00:42:01.820
Hopefully, we can get that updated.


00:42:01.820 --> 00:42:04.460
It doesn't, you can run


00:42:04.460 --> 00:42:07.780
Whiskey apps but you cannot run ASCII right now.


00:42:07.780 --> 00:42:10.300
No FastAPI on there.


00:42:10.300 --> 00:42:12.860
Hopefully, that will be fixed.


00:42:12.860 --> 00:42:18.540
Then also the free plan doesn't allow you to do Jupyter Notebooks.


00:42:18.540 --> 00:42:21.740
I'm guessing with Anaconda in there that might be changing.


00:42:21.740 --> 00:42:23.240
- Probably will.


00:42:23.240 --> 00:42:24.340
I suspect it would.


00:42:24.340 --> 00:42:25.660
All right, how about extras?


00:42:25.660 --> 00:42:28.200
Got just a couple minutes left for those.


00:42:28.200 --> 00:42:29.300
- I've got nothing.


00:42:29.300 --> 00:42:30.660
Ashley? - Nothing?


00:42:30.660 --> 00:42:32.700
- I had a couple in here.


00:42:32.700 --> 00:42:33.780
Not a whole lot to say about them,


00:42:33.780 --> 00:42:36.180
but that's I guess why they're extras.


00:42:36.180 --> 00:42:40.900
PEP 691, there's a new JSON-based simple API for PyPI,


00:42:40.900 --> 00:42:43.200
so more PyPI news there.


00:42:43.200 --> 00:42:45.300
This is like for tools like pip, I guess,


00:42:45.300 --> 00:42:48.840
that are sort of indexing packages and stuff like that,


00:42:48.840 --> 00:42:50.340
or going to search for packages.


00:42:50.340 --> 00:42:52.220
will now be able to parse JSON instead of,


00:42:52.220 --> 00:42:54.060
I guess up until now they've been parsing HTML,


00:42:54.060 --> 00:42:55.900
which was a surprise to me.


00:42:55.900 --> 00:42:57.820
- You can go to somewhere,


00:42:57.820 --> 00:43:01.940
yeah, you go somewhere on pipi.org/something simple,


00:43:01.940 --> 00:43:03.740
and you just get a wall of links,


00:43:03.740 --> 00:43:05.700
and you get like 350,000 links,


00:43:05.700 --> 00:43:07.260
which is not an ideal way to,


00:43:07.260 --> 00:43:09.700
like it doesn't seem like the best stage format.


00:43:09.700 --> 00:43:11.260
- It's cool 'cause I guess it can be like,


00:43:11.260 --> 00:43:13.260
it can serve those as static files, right?


00:43:13.260 --> 00:43:15.780
So that's why, like instead of having, you know,


00:43:15.780 --> 00:43:17.660
dynamic web app, you have to worry about load


00:43:17.660 --> 00:43:19.460
and all this stuff, it's just like an Nginx server


00:43:19.460 --> 00:43:20.760
pointed at a huge directory.


00:43:20.760 --> 00:43:23.800
Um, but this allows those same servers, I guess, to serve


00:43:23.800 --> 00:43:25.920
Jason instead of HTML is neat.


00:43:25.920 --> 00:43:26.280
Yeah.


00:43:26.280 --> 00:43:26.580
Great.


00:43:26.580 --> 00:43:32.580
And then rich codecs is a tool for like automatically creating these


00:43:32.580 --> 00:43:36.760
terminal screenshots from stuff in your documentation, mostly.


00:43:36.760 --> 00:43:39.280
I thought we can't have a Python Biceps episode without


00:43:39.280 --> 00:43:40.740
something related to rich.


00:43:40.740 --> 00:43:41.040
Right.


00:43:41.040 --> 00:43:42.600
So, that's right.


00:43:42.600 --> 00:43:43.000
That's right.


00:43:43.000 --> 00:43:43.440
Check this out.


00:43:43.440 --> 00:43:47.860
If you've got, if you're using rich or, and, and wanna, you know, make


00:43:47.860 --> 00:43:50.120
some screenshots that stay up to date with your code.


00:43:50.120 --> 00:43:54.320
- Yeah, some color coded code blocks in your markdown.


00:43:54.320 --> 00:43:55.840
Yeah, for sure, very nice.


00:43:55.840 --> 00:43:59.500
All right, I just have a quick one for an extra here.


00:43:59.500 --> 00:44:02.900
There's an article on DevJobs Scanner,


00:44:02.900 --> 00:44:05.800
the top eight most in demand programming languages.


00:44:05.800 --> 00:44:08.300
So we've got JavaScript, TypeScript is number one,


00:44:08.300 --> 00:44:09.740
but Python number two.


00:44:09.740 --> 00:44:11.800
I bring this up because I was doing a live stream


00:44:11.800 --> 00:44:13.560
on Talk Python and somebody came along and said,


00:44:13.560 --> 00:44:15.760
"Hey, should I still be learning Python?


00:44:15.760 --> 00:44:17.300
"I heard that it's really hard to get a job


00:44:17.300 --> 00:44:19.300
and there's not a lot of interest in that.


00:44:19.300 --> 00:44:21.300
So, yeah, well, anyway.


00:44:21.300 --> 00:44:23.300
I'm not sure what else you choose.


00:44:23.300 --> 00:44:25.300
And again, this JavaScript stuff,


00:44:25.300 --> 00:44:29.300
it's like being a full stack CSS developer.


00:44:29.300 --> 00:44:33.300
You might have to have JavaScript skills


00:44:33.300 --> 00:44:35.300
to do Python stuff, or to do ASP.NET,


00:44:35.300 --> 00:44:37.300
or to do whatever else, right?


00:44:37.300 --> 00:44:39.300
JavaScript is unique in the sense that


00:44:39.300 --> 00:44:42.300
a lot of times it's paired with other things,


00:44:42.300 --> 00:44:44.300
whereas those other things are often more standalone.


00:44:44.300 --> 00:44:46.300
You know what I mean?


00:44:46.300 --> 00:44:48.460
maybe the fact that JavaScript is up there


00:44:48.460 --> 00:44:50.100
'cause like every other language below it


00:44:50.100 --> 00:44:51.900
also needs JavaScript plus,


00:44:51.900 --> 00:44:54.180
I'm not exactly sure what the metric is here


00:44:54.180 --> 00:44:56.540
if this is like how you pull that out.


00:44:56.540 --> 00:44:58.620
But anyway, take it with a bit of grain of salt,


00:44:58.620 --> 00:45:00.380
but I think this is pretty good.


00:45:00.380 --> 00:45:02.540
All right, are you all ready for a joke?


00:45:02.540 --> 00:45:04.260
'Cause Brian, you have started something.


00:45:04.260 --> 00:45:05.460
- I have, okay.


00:45:05.460 --> 00:45:06.300
- You have.


00:45:06.300 --> 00:45:08.620
So remember we had the,


00:45:08.620 --> 00:45:10.200
don't remember what the exact topic was,


00:45:10.200 --> 00:45:14.340
but we talked about this,


00:45:14.340 --> 00:45:18.900
Oh, this was what is the junior dev see themselves doing in five years and senior dev.


00:45:18.900 --> 00:45:25.420
So this woman, Netta, she has just an amazing set of jokes.


00:45:25.420 --> 00:45:28.460
And so you're going to be hearing more than one of these.


00:45:28.460 --> 00:45:30.300
But let's look at this one.


00:45:30.300 --> 00:45:31.420
They're so good.


00:45:31.420 --> 00:45:33.540
They're so good. I'm obviously linking to the show notes.


00:45:33.540 --> 00:45:36.340
So here's an example of people.


00:45:36.340 --> 00:45:39.580
I think what the story is here is these two women,


00:45:39.580 --> 00:45:42.380
they live in this apartment complex and


00:45:42.380 --> 00:45:46.020
they're in an elevator with some of their neighbors.


00:45:46.020 --> 00:45:47.660
There's this older woman says,


00:45:47.660 --> 00:45:50.180
"So what do you girls do for a living?"


00:45:50.180 --> 00:45:52.340
One of the women says, "I'm an architect."


00:45:52.340 --> 00:45:54.500
Oh, and Netta, she's a programmer.


00:45:54.500 --> 00:45:57.620
You just see the crap emoji, like, "Oh, no."


00:45:57.620 --> 00:46:00.900
Later on, Netta receives a knock at the door,


00:46:00.900 --> 00:46:02.220
and this old woman is like,


00:46:02.220 --> 00:46:03.700
"There's a problem with my phone."


00:46:03.700 --> 00:46:06.580
Then there's another guy with a beard that shows up,


00:46:06.580 --> 00:46:08.220
which is showing the laptop to her.


00:46:08.220 --> 00:46:11.820
Then there's a whole line of people with printers,


00:46:11.820 --> 00:46:13.420
and all kinds of stuff.


00:46:13.420 --> 00:46:16.260
Just basically, oh, you're our tech support now.


00:46:16.260 --> 00:46:18.020
- I so have lived this.


00:46:18.020 --> 00:46:20.020
- Yeah, I have too.


00:46:20.020 --> 00:46:20.860
Ashley?


00:46:20.860 --> 00:46:22.220
Oh, go ahead, Brian, sorry.


00:46:22.220 --> 00:46:25.100
- Yeah, no, Ashley, do you get this?


00:46:25.100 --> 00:46:27.220
- Not so much anymore, I guess.


00:46:27.220 --> 00:46:30.700
But this was definitely my experience in the dorms,


00:46:30.700 --> 00:46:32.100
I remember.


00:46:32.100 --> 00:46:33.460
- Well, I mean, now you could say,


00:46:33.460 --> 00:46:35.980
I work on MRI machines and nobody will ask you.


00:46:35.980 --> 00:46:37.420
They don't want you to fix it.


00:46:37.420 --> 00:46:38.340
They don't have one, so.


00:46:38.340 --> 00:46:40.820
- No, they'll start telling you their medical problems


00:46:40.820 --> 00:46:42.420
and stuff like that.


00:46:42.420 --> 00:46:45.780
- So my first job out of college was with HP.


00:46:45.780 --> 00:46:49.420
I was working with satellite test systems,


00:46:49.420 --> 00:46:53.340
but everybody just heard HP and wanted me to figure out


00:46:53.340 --> 00:46:56.220
how to configure their computer or their printer.


00:46:56.220 --> 00:46:57.820
Can you get my printer on my network?


00:46:57.820 --> 00:46:59.860
- Brian, and it's really gotten slow lately.


00:46:59.860 --> 00:47:01.080
I get a lot of pop-ups.


00:47:01.080 --> 00:47:04.820
- Like, no, I don't know how to fix that.


00:47:04.820 --> 00:47:07.620
- On purpose.


00:47:07.620 --> 00:47:09.060
I don't know how to fix that.


00:47:10.340 --> 00:47:12.860
- Awesome, well, that's all I got, Brian.


00:47:12.860 --> 00:47:15.020
- Okay, well, thanks for the joke.


00:47:15.020 --> 00:47:16.260
I love that one.


00:47:16.260 --> 00:47:17.700
We could have more of these, yeah.


00:47:17.700 --> 00:47:20.260
And thanks, Ashley, for joining us.


00:47:20.260 --> 00:47:23.620
And I really appreciate you talking about


00:47:23.620 --> 00:47:27.580
the Rust Python stuff.


00:47:27.580 --> 00:47:29.020
We've been curious about that.


00:47:29.020 --> 00:47:29.860
It's cool. - Cool, yeah.


00:47:29.860 --> 00:47:30.680
Really happy to be here.


00:47:30.680 --> 00:47:31.520
Thanks for having me on.


00:47:31.520 --> 00:47:33.300
- All right, well, bye, everybody.

