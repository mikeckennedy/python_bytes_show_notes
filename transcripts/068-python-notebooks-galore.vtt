
00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.000 --> 00:00:10.000
It's episode 68 recorded February 28th, 2018. I'm Michael Kennedy.


00:00:10.000 --> 00:00:11.000
And I'm Brian Okken.


00:00:11.000 --> 00:00:15.000
And we have yet another bundle of amazing stuff to share with you.


00:00:15.000 --> 00:00:18.000
Super excited about the ones I got. How about you, Brian?


00:00:18.000 --> 00:00:22.000
I'm really excited. I had to kick some out because I had too many things to cover.


00:00:22.000 --> 00:00:25.000
I think I changed my list four times this week because I'm like, oh, this is a great list.


00:00:25.000 --> 00:00:27.000
Oh, no, this one's more important. No, this is even better. It's awesome.


00:00:27.000 --> 00:00:28.000
Yeah.


00:00:28.000 --> 00:00:32.240
Yeah, so before we get to it, just want to say thanks to DigitalOcean for sponsoring this episode.


00:00:32.240 --> 00:00:39.280
Check them out at do.co/python. Right now, I want to hear about PyPI, but there's something wrong


00:00:39.280 --> 00:00:45.840
with it. What's up here? Well, so I've had this on the list for a long time, a project called the


00:00:45.840 --> 00:00:52.400
dumb P-Y-P-I. So dumb PyPI or PyPI. I don't know. Anyway, it's not really that dumb, though. So


00:00:53.920 --> 00:00:57.520
There's a lot of local, so you can have your own repository.


00:00:57.520 --> 00:01:03.120
So there's a bunch of different ways you can set up your own server so that you can serve your own packages.


00:01:03.120 --> 00:01:10.920
Like if you've got a team or something that you've got proprietary code that you don't want to share with others on normal PyPI,


00:01:10.920 --> 00:01:12.420
you can have your own.


00:01:12.420 --> 00:01:14.720
But you have to have a server running.


00:01:14.720 --> 00:01:19.220
And there's a lot of the generation of the server code is tied to it.


00:01:19.220 --> 00:01:22.620
So there's like a Flask version and there's various versions.


00:01:22.620 --> 00:01:25.500
This one is just a flat file creator.


00:01:25.500 --> 00:01:27.740
So this package,


00:01:27.740 --> 00:01:32.940
dumpypi will just take a directory full of wheels or


00:01:32.940 --> 00:01:36.020
zipped packages and create


00:01:36.020 --> 00:01:39.020
a directory that you can just stick on


00:01:39.020 --> 00:01:43.420
any server and have it be served up for an index.


00:01:43.420 --> 00:01:45.820
For instance, I've got a,


00:01:45.820 --> 00:01:47.300
so it doesn't do any caching.


00:01:47.300 --> 00:01:51.060
It doesn't go through to pypi and grab things that it's missing.


00:01:51.060 --> 00:01:53.060
So you have to manually do that yourself.


00:01:53.060 --> 00:01:57.560
But if we combine this with what we learned in episode 24,


00:01:57.560 --> 00:02:02.060
that you can just do pip download easily and download your own files somewhere.


00:02:02.060 --> 00:02:09.060
This combined, I'm using this at work now to create a really simple PyPI server


00:02:09.060 --> 00:02:14.060
behind our firewall that doesn't have, I don't have to give it permission to talk to the outside world.


00:02:14.060 --> 00:02:15.560
It's just a bunch of files.


00:02:15.560 --> 00:02:18.680
It's actually really cool. So you could even put it up on like


00:02:18.680 --> 00:02:25.000
Amazon S3 or somewhere like that, right? Right and actually the there is an example on


00:02:25.000 --> 00:02:31.280
I think that is the example on the the website or the the package website


00:02:31.280 --> 00:02:33.960
Yeah, hub site does have an S3 example


00:02:33.960 --> 00:02:39.200
It's like super fast and slick and it doesn't do anything like updates or anything


00:02:39.200 --> 00:02:41.040
You have to rebuild everything yourself


00:02:41.040 --> 00:02:46.300
But if you're gonna you can set up a crown job or something to do some of this exactly just do it at night


00:02:46.300 --> 00:02:48.300
When nobody's around


00:02:48.300 --> 00:02:53.300
Yeah, just update it daily how often do these packages change right but like for instance


00:02:53.300 --> 00:03:00.380
I've got like all of our test code that we're creating virtual environments to and then pulling in test packages and different packages


00:03:00.380 --> 00:03:03.500
That stuff just I don't want it to update all the time


00:03:03.500 --> 00:03:09.420
I wanted to I wanted to grab certain versions that I know were there. So something like this is perfect


00:03:09.420 --> 00:03:13.420
Yeah, it looks really cool. I think it needs a better name than dumb PyPI.


00:03:13.420 --> 00:03:15.420
Yeah, it does.


00:03:15.420 --> 00:03:18.420
Clever but doesn't do anything PyPI. How about that?


00:03:18.420 --> 00:03:20.420
No server, server.


00:03:20.420 --> 00:03:23.420
Serverless PyPI. How about this? Come on.


00:03:23.420 --> 00:03:24.420
Yeah.


00:03:24.420 --> 00:03:29.420
Awesome. Okay. So the next thing I want to talk about is something for humans.


00:03:29.420 --> 00:03:31.420
And if I said it was for humans, who would that mean?


00:03:31.420 --> 00:03:32.420
Kenneth.


00:03:32.420 --> 00:03:35.420
That's right. Kenneth Wright. So he's got all of his things for humans.


00:03:35.420 --> 00:03:41.100
He's got Maya, DateTime for humans, Records, SQL for humans, obviously requests.


00:03:41.100 --> 00:03:45.500
So he's out with a new human thing and this time for web scraping.


00:03:45.500 --> 00:03:50.980
So he created this thing called requests HTML, HTML parsing for humans.


00:03:50.980 --> 00:03:55.380
So when I looked at this, I thought, oh, is this maybe like a replacement for beautiful


00:03:55.380 --> 00:03:59.420
soup or something like that, like in some kind of extension to request.


00:03:59.420 --> 00:04:02.580
But in fact, it actually depends upon beautiful soup.


00:04:02.580 --> 00:04:03.580
Right.


00:04:03.580 --> 00:04:10.220
It's a library that like puts a different API on top of combining requests plus beautiful


00:04:10.220 --> 00:04:16.980
soup plus something called pie query, which lets you run jQuery style CSS selectors.


00:04:16.980 --> 00:04:18.920
So it does a bunch of cool stuff.


00:04:18.920 --> 00:04:25.700
Some of the notable features are it has full JavaScript support, which I'm taking to mean


00:04:25.700 --> 00:04:30.020
that it will parse and execute the JavaScript necessary.


00:04:30.020 --> 00:04:34.620
So if I hit like an AngularJS page, instead of just seeing curly brackets everywhere,


00:04:34.620 --> 00:04:38.020
there's data that would have gone in there, which is a big deal in web scraping.


00:04:38.020 --> 00:04:42.220
Because if you just use straight up request plus beautiful soup, you just get the the


00:04:42.220 --> 00:04:45.500
markup where those bits would execute when it does, right?


00:04:45.500 --> 00:04:51.460
Yeah, the CSS selectors, XPath selectors, mocked user agents.


00:04:51.460 --> 00:04:52.820
So it pretends to be a real browser.


00:04:52.820 --> 00:04:56.660
So people don't know that you're trying to scrape their sites, which is kind of interesting,


00:04:56.660 --> 00:04:59.700
uses connection pooling and cookie persistence.


00:04:59.700 --> 00:05:03.880
So you can like log in and then go do a bunch of stuff at a site.


00:05:03.880 --> 00:05:06.000
And you can do it without reconnecting every time.


00:05:06.000 --> 00:05:07.000
So that's pretty cool.


00:05:07.000 --> 00:05:12.320
Yeah, and it keeps the session open and tying requests with, I mean, that's what people


00:05:12.320 --> 00:05:19.240
often need did anyways, request plus beautiful soup, and writing it in with one, one API


00:05:19.240 --> 00:05:20.240
is great.


00:05:20.240 --> 00:05:24.120
And actually, I like the idea anyway, if somebody saying, hey, these tools are great, but I


00:05:24.120 --> 00:05:26.040
wish the API was different.


00:05:26.040 --> 00:05:29.060
So just write another package that uses others


00:05:29.060 --> 00:05:30.680
and write a better API then.


00:05:30.680 --> 00:05:32.440
- Yeah, it's a little like Flask,


00:05:32.440 --> 00:05:34.920
what Flask did, but for requests and parsing.


00:05:34.920 --> 00:05:38.600
- Kenneth is a great one for, he's a good eye for APIs.


00:05:38.600 --> 00:05:39.440
- Yeah, that's for sure.


00:05:39.440 --> 00:05:41.500
People definitely seem to love his APIs.


00:05:41.500 --> 00:05:44.120
So I'll leave you with the final sort of tagline here


00:05:44.120 --> 00:05:45.400
from their website.


00:05:45.400 --> 00:05:47.160
The request experience you know and love,


00:05:47.160 --> 00:05:49.560
but with magical parsing abilities.


00:05:49.560 --> 00:05:50.400
- That's nice.


00:05:50.400 --> 00:05:51.560
- Yeah, not bad, right?


00:05:51.560 --> 00:05:54.840
Cool, so what's up with this phony number thing?


00:05:54.840 --> 00:05:57.480
You got some more like prank calls to make?


00:05:57.480 --> 00:05:58.600
- This was awesome.


00:05:58.600 --> 00:06:01.320
So Twilio does their Twilio blog


00:06:01.320 --> 00:06:03.040
where people can write for them.


00:06:03.040 --> 00:06:05.300
I think we've talked about it before.


00:06:05.300 --> 00:06:06.440
They do a pretty cool program


00:06:06.440 --> 00:06:09.960
where they give you an editor even to help you out with it.


00:06:09.960 --> 00:06:12.200
But this article is basically a,


00:06:12.200 --> 00:06:14.520
and you don't have to do a Twilio project,


00:06:14.520 --> 00:06:16.320
but this is a Twilio project.


00:06:16.320 --> 00:06:18.560
This is a phone number proxy.


00:06:18.560 --> 00:06:21.440
So the idea is you imagine a situation


00:06:21.440 --> 00:06:23.840
like for instance you've got a, I don't know,


00:06:23.840 --> 00:06:26.480
a meetup or some temporary event,


00:06:26.480 --> 00:06:29.120
and you want people to be able to text you


00:06:29.120 --> 00:06:31.320
because you're not gonna be around your computer


00:06:31.320 --> 00:06:34.200
all the time, you want people to be able to text you


00:06:34.200 --> 00:06:35.480
and you wanna text back,


00:06:35.480 --> 00:06:37.520
but you don't wanna give out your phone number.


00:06:37.520 --> 00:06:39.380
Well, this project gives you a little proxy


00:06:39.380 --> 00:06:41.120
so that you can set it up with Flask


00:06:41.120 --> 00:06:43.120
and set up a server with Twilio


00:06:43.120 --> 00:06:46.280
and give out a temporary phone number


00:06:46.280 --> 00:06:48.800
and have it be attached to your phone.


00:06:48.800 --> 00:06:51.100
And I'm gonna definitely have to try this out


00:06:51.100 --> 00:06:52.080
because it looks fun.


00:06:52.080 --> 00:06:53.280
- Yeah, that looks really, really cool.


00:06:53.280 --> 00:06:55.560
And I think that program they have is awesome.


00:06:55.560 --> 00:06:58.280
One of the challenges of getting started blogging


00:06:58.280 --> 00:07:00.240
is nobody knows about you.


00:07:00.240 --> 00:07:01.920
Nobody, like, you put all this effort


00:07:01.920 --> 00:07:03.820
into writing this thing and you put it out there


00:07:03.820 --> 00:07:06.180
and your 10 friends who are willing


00:07:06.180 --> 00:07:09.000
to follow your tech stuff off of Facebook


00:07:09.000 --> 00:07:10.520
glanced at it, right?


00:07:10.520 --> 00:07:15.000
And so here's a way to like appear on a major, major blog


00:07:15.000 --> 00:07:17.080
and highlight what you're doing


00:07:17.080 --> 00:07:19.400
and maybe jumpstart your other tech stuff, right?


00:07:19.400 --> 00:07:21.560
Like you could link back to your blog or something like this.


00:07:21.560 --> 00:07:25.160
Having somebody work with you to polish it up a little bit


00:07:25.160 --> 00:07:26.400
is a good idea.


00:07:26.400 --> 00:07:30.060
Often when you just tap your friends for that sort of help,


00:07:30.060 --> 00:07:31.760
they'll just tell you, "Oh, it looks great.


00:07:31.760 --> 00:07:32.600
"Go ahead and put it up."


00:07:32.600 --> 00:07:33.800
- Yeah, yeah, very cool, very cool.


00:07:33.800 --> 00:07:35.460
- But this project's also pretty neat.


00:07:35.460 --> 00:07:39.620
It does encourage you to do some of the paid part of Twilio,


00:07:39.620 --> 00:07:42.560
but I think for something like this, it's a good idea.


00:07:42.560 --> 00:07:43.720
- Yeah, very nice.


00:07:43.720 --> 00:07:44.680
Good article.


00:07:44.680 --> 00:07:46.480
All right, before we get to the next,


00:07:46.480 --> 00:07:48.560
let me just tell you about DigitalOcean.


00:07:48.560 --> 00:07:50.440
They're doing some really amazing stuff.


00:07:50.440 --> 00:07:55.960
So the thing I'd like to highlight is they just upgraded all of their things and left


00:07:55.960 --> 00:07:56.960
the price the same.


00:07:56.960 --> 00:08:01.360
And by upgraded, I mean doubled all the stuff at least.


00:08:01.360 --> 00:08:06.600
So for example, you go to DigitalOcean and get a Linux server with all variety of Linux


00:08:06.600 --> 00:08:15.800
machines, Linux distributions, with four gigs of RAM, two CPUs, 80 gigs of SSD for $20 a


00:08:15.800 --> 00:08:16.800
month.


00:08:16.800 --> 00:08:17.800
Like that's insane.


00:08:17.800 --> 00:08:18.800
Right?


00:08:18.800 --> 00:08:19.800
That is a crazy thing.


00:08:19.800 --> 00:08:21.720
That used to cost 40 bucks and they just said,


00:08:21.720 --> 00:08:23.400
nope, that's now 20 bucks.


00:08:23.400 --> 00:08:26.840
And it comes with four terabytes of free traffic.


00:08:26.840 --> 00:08:29.980
If I were to just transfer that over S3,


00:08:29.980 --> 00:08:32.280
which is nine cents a gigabyte,


00:08:32.280 --> 00:08:35.540
just that bandwidth would be $368 at S3.


00:08:35.540 --> 00:08:37.600
That's included in your $20 server.


00:08:37.600 --> 00:08:39.160
So really, really awesome stuff.


00:08:39.160 --> 00:08:42.240
Check them out over at do.co/python.


00:08:42.240 --> 00:08:44.740
And you know, you check out what they're doing,


00:08:44.740 --> 00:08:45.700
help support the show.


00:08:45.700 --> 00:08:47.000
Everybody's getting good stuff.


00:08:47.000 --> 00:08:49.200
So thanks, thanks DigitalOcean for that.


00:08:49.200 --> 00:08:57.400
All right, I kind of want to just go on a Jupiter-like notebook rant for a while, Brian,


00:08:57.400 --> 00:09:01.680
because the news around this stuff is just coming in fast and furious.


00:09:01.680 --> 00:09:04.800
So there are so many things going on with notebooks right now.


00:09:04.800 --> 00:09:07.040
And like, this is a world I don't really live in.


00:09:07.040 --> 00:09:12.040
I'm much more creative Python project and have like 10 related files and run stuff on


00:09:12.040 --> 00:09:16.680
the command line or my editor and not put it in these cells because that's just not


00:09:16.680 --> 00:09:17.960
my world.


00:09:17.960 --> 00:09:22.120
But I see how powerful it is for people who are exploring data and being more iterative


00:09:22.120 --> 00:09:24.960
with their code.


00:09:24.960 --> 00:09:27.240
And in the last couple of weeks, they've got a lot more options.


00:09:27.240 --> 00:09:28.880
They've been in the news a lot right now.


00:09:28.880 --> 00:09:30.560
So I'll start with one for this one.


00:09:30.560 --> 00:09:33.440
And then we'll do another one in the final segment.


00:09:33.440 --> 00:09:37.920
So for this one, I want to talk about something that's brand new called data lore.


00:09:37.920 --> 00:09:39.440
Have you heard of data lore?


00:09:39.440 --> 00:09:40.440
I've not.


00:09:40.440 --> 00:09:42.240
You've heard of PyCharm, right?


00:09:42.240 --> 00:09:47.940
So this is like PyCharm in a notebook, online, hosted.


00:09:47.940 --> 00:09:49.820
So it's from the JetBrains guys.


00:09:49.820 --> 00:09:52.180
It's just in the cloud, you just go sign up.


00:09:52.180 --> 00:09:58.540
It has this intelligent editor just like JetBrains has, like, you know, IntelliJ plus PyCharm


00:09:58.540 --> 00:10:02.180
has with all of the, like the cool autocomplete and IntelliSense.


00:10:02.180 --> 00:10:05.700
It comes like pre-installed with a bunch of stuff that you need, like Matplotlib and so


00:10:05.700 --> 00:10:06.700
on.


00:10:06.700 --> 00:10:07.700
It has collaboration.


00:10:07.700 --> 00:10:12.860
So you can log in and kind of like do Google Docs style, work on it together.


00:10:12.860 --> 00:10:14.660
I don't know how real time it is.


00:10:14.660 --> 00:10:16.820
Like, do you actually see every character going in?


00:10:16.820 --> 00:10:19.380
Or do you have to refresh it?


00:10:19.380 --> 00:10:20.900
Does it automatically refresh?


00:10:20.900 --> 00:10:23.000
I'm not entirely sure the level of collaboration,


00:10:23.000 --> 00:10:25.800
but there's some real-time multiple people


00:10:25.800 --> 00:10:28.380
working on the same notebook type of collaboration.


00:10:28.380 --> 00:10:30.180
I gotta check that out.


00:10:30.180 --> 00:10:31.780
It has integrated version control,


00:10:31.780 --> 00:10:34.300
so you don't have to be, like, if you're a student,


00:10:34.300 --> 00:10:36.620
or you say you're an engineer, but you don't like,


00:10:36.620 --> 00:10:39.000
you're not like, get pushed on the command line


00:10:39.000 --> 00:10:40.700
type of competent, right?


00:10:40.700 --> 00:10:42.860
You go there and just say, create me a save point,


00:10:42.860 --> 00:10:45.820
basically saves it and tags it so you can get it back,


00:10:45.820 --> 00:10:46.660
things like that.


00:10:46.660 --> 00:10:47.580
- Oh, that's great. - Pretty cool.


00:10:47.580 --> 00:10:50.140
- The JetBrains, like the diff viewer


00:10:50.140 --> 00:10:51.580
for version control is really great,


00:10:51.580 --> 00:10:54.060
so building that in here is cool.


00:10:54.060 --> 00:10:55.360
- Yeah, they've got some really cool stuff.


00:10:55.360 --> 00:10:58.540
And finally, this might be pretty big for some folks,


00:10:58.540 --> 00:10:59.540
depending on what you're doing,


00:10:59.540 --> 00:11:02.100
they have incremental calculations.


00:11:02.100 --> 00:11:04.820
So you can, if you're doing machine learning and training


00:11:04.820 --> 00:11:07.260
and all sorts of analysis, and there's a bunch of cells


00:11:07.260 --> 00:11:09.480
that work together to generate that data,


00:11:09.480 --> 00:11:12.700
they actually have figured out how to track the dependencies


00:11:12.700 --> 00:11:14.080
between where that data comes from


00:11:14.080 --> 00:11:16.840
and you have to rerun the entire thing.


00:11:16.840 --> 00:11:18.000
If you're changing your model,


00:11:18.000 --> 00:11:20.840
it only reruns the parts that have changed,


00:11:20.840 --> 00:11:22.640
that depend upon something you've changed.


00:11:22.640 --> 00:11:23.480
- Oh, that's awesome.


00:11:23.480 --> 00:11:24.300
- Yeah, it's pretty cool, right?


00:11:24.300 --> 00:11:26.480
So if your computation takes two minutes,


00:11:26.480 --> 00:11:27.600
but this little part's really quick


00:11:27.600 --> 00:11:29.720
'cause it uses mostly finished data,


00:11:29.720 --> 00:11:31.280
and that's a really big deal, I think.


00:11:31.280 --> 00:11:33.440
So anyway, Datalore, it seems like it's in beta.


00:11:33.440 --> 00:11:35.480
I don't know what it costs,


00:11:35.480 --> 00:11:36.880
if there's a free thing or whatever,


00:11:36.880 --> 00:11:41.480
but it's a Jupyter Notebook-like hosted service


00:11:41.480 --> 00:11:42.300
from JetBrains,


00:11:42.300 --> 00:11:43.980
I thought was pretty cool and worth talking about.


00:11:43.980 --> 00:11:44.540
Yeah.


00:11:44.540 --> 00:11:44.940
Neat.


00:11:44.940 --> 00:11:49.180
Nice. I have no idea how to get started on this next one.


00:11:49.180 --> 00:11:51.740
I'm just going to say the name, Belly Button.


00:11:51.740 --> 00:11:54.060
Belly Button, yes. For personal lint.


00:11:54.060 --> 00:11:54.780
What's up with this?


00:11:54.780 --> 00:12:02.860
So yeah, I think it's a play on words around linters and where lint usually shows up.


00:12:02.860 --> 00:12:10.620
So we have things like PyLint and Flake8, which in PyCode style, which used to be called Pep8,


00:12:10.620 --> 00:12:13.220
that I use all the time and love.


00:12:13.220 --> 00:12:17.480
But there's times where you have extra requirements for


00:12:17.480 --> 00:12:21.320
your own team or for your own project and it'd be cool to have


00:12:21.320 --> 00:12:25.820
something like Pilot but just with your own rules in it.


00:12:25.820 --> 00:12:28.280
That's where our belly button comes in.


00:12:28.280 --> 00:12:34.840
It's a way to create rules around for static analysis or style.


00:12:34.840 --> 00:12:36.960
One of the examples that I thought was great was,


00:12:36.960 --> 00:12:39.440
let's say you've got a library with


00:12:39.440 --> 00:12:42.600
some functions that you decide that your team uses,


00:12:42.600 --> 00:12:46.200
but you decided some of them are dumb and deprecate them.


00:12:46.200 --> 00:12:48.280
Yeah, or maybe there's a better way to do things.


00:12:48.280 --> 00:12:51.840
You can add some of these rules to Belly Button


00:12:51.840 --> 00:12:55.360
to say, hey, this code here, you need to change it this way


00:12:55.360 --> 00:12:58.040
and actually give exact examples


00:12:58.040 --> 00:12:59.720
of how somebody should change it.


00:12:59.720 --> 00:13:01.880
And I think that's a really cool idea.


00:13:01.880 --> 00:13:02.880
- Yeah, awesome, Belly Button.


00:13:02.880 --> 00:13:03.760
- Wanted to bring that up.


00:13:03.760 --> 00:13:04.600
- Yeah, it sounds really cool.


00:13:04.600 --> 00:13:05.980
These linters are really great.


00:13:05.980 --> 00:13:08.080
And I typically think of them in the context


00:13:08.080 --> 00:13:10.760
of like continuous integration and sort of team-wide things.


00:13:10.760 --> 00:13:13.160
But yeah, here's a cool way to sort of make your own


00:13:13.160 --> 00:13:14.360
overrides and whatnot.


00:13:14.360 --> 00:13:17.760
- Yeah, and any time where you've got like a coding style


00:13:17.760 --> 00:13:20.160
within your team, if you can automate it


00:13:20.160 --> 00:13:21.840
and take the person out of it


00:13:21.840 --> 00:13:24.520
and take that out of your code reviews,


00:13:24.520 --> 00:13:28.000
it helps with team dynamics to just have the computer say,


00:13:28.000 --> 00:13:31.440
"Hey, change this code," instead of having your coworkers


00:13:31.440 --> 00:13:32.880
keep telling you to change your code.


00:13:32.880 --> 00:13:34.800
- Yeah, that's a really interesting dynamic, isn't it?


00:13:34.800 --> 00:13:39.040
Like people are willing to take petty nitpicky criticism


00:13:39.040 --> 00:13:41.800
from robots and automated systems


00:13:41.800 --> 00:13:46.080
way more than from your manager or whoever.


00:13:46.080 --> 00:13:47.320
- Yeah, and you can just,


00:13:47.320 --> 00:13:49.160
like we've already had the discussion


00:13:49.160 --> 00:13:50.760
about what our style is.


00:13:50.760 --> 00:13:52.160
This is what it is.


00:13:52.160 --> 00:13:54.120
I don't wanna keep opening up the discussion.


00:13:54.120 --> 00:13:56.160
So just do it.


00:13:56.160 --> 00:13:57.000
- Nice.


00:13:57.000 --> 00:13:58.560
- Manager speak.


00:13:58.560 --> 00:13:59.380
- That's right, cool.


00:13:59.380 --> 00:14:02.840
All right, you ready for Notebooks Galore Part Two?


00:14:02.840 --> 00:14:04.360
- Oh, more notebook news, yay.


00:14:04.360 --> 00:14:11.000
Yes. So our friend, a friend of the show, Daniel Shorstein posted something on Reddit,


00:14:11.000 --> 00:14:17.880
some news that has to do with free hosted notebooks in Azure, right? This would be like


00:14:17.880 --> 00:14:24.600
pretty much a direct competitor to Datalore, right? So they are now supporting Python 3.6


00:14:24.600 --> 00:14:30.040
Jupyter notebooks in Azure. And there's a nice conversation over on Reddit about that. And


00:14:30.040 --> 00:14:33.240
You go over and read more about it and so on.


00:14:33.240 --> 00:14:35.920
So they had basically if you just drop in on


00:14:35.920 --> 00:14:40.560
notebooks.azure.com, then off you go.


00:14:40.560 --> 00:14:42.360
You can go work with it right there.


00:14:42.360 --> 00:14:45.480
And that's like straight up Jupyter Notebooks, I believe.


00:14:45.480 --> 00:14:46.520
That's pretty cool, right?


00:14:46.520 --> 00:14:48.480
Free, in the cloud, powered by Jupyter.


00:14:48.480 --> 00:14:50.080
Like I'm telling you, this is like a space


00:14:50.080 --> 00:14:52.040
that is just like so blowing up right now.


00:14:52.040 --> 00:14:53.960
- Yeah, we better pay attention to it more


00:14:53.960 --> 00:14:55.400
if people are fighting over it.


00:14:55.400 --> 00:14:57.120
- Exactly, there's big companies fighting over it.


00:14:57.120 --> 00:14:58.960
So speaking of big companies who wanna fight over it,


00:14:58.960 --> 00:15:00.460
Have you heard of CoLaboratory?


00:15:00.460 --> 00:15:01.760
- No, a great word though.


00:15:01.760 --> 00:15:02.600
- It is.


00:15:02.600 --> 00:15:05.140
So this comes from a research,


00:15:05.140 --> 00:15:06.700
the research group at Google,


00:15:06.700 --> 00:15:08.920
colab.research.google.com.


00:15:08.920 --> 00:15:10.900
And people, this has been around for a little while,


00:15:10.900 --> 00:15:12.880
and people have been kind of dissing on it a little bit


00:15:12.880 --> 00:15:15.120
because it had been just Python 2.


00:15:15.120 --> 00:15:19.000
However, it is now Python supporting,


00:15:19.000 --> 00:15:21.400
not legacy Python, but modern Python.


00:15:21.400 --> 00:15:24.000
So that's really cool.


00:15:24.000 --> 00:15:26.540
And since the time that I took this note


00:15:26.540 --> 00:15:28.160
to talk to you about it today,


00:15:28.160 --> 00:15:33.160
And today, they now have also launched GPU support.


00:15:33.160 --> 00:15:35.360
So you go to your notebook and you say,


00:15:35.360 --> 00:15:36.960
"I want to do some machine learning."


00:15:36.960 --> 00:15:41.960
Oh yeah, run this TensorFlow, this training process on a GPU


00:15:41.960 --> 00:15:46.160
and you can basically hit Command + Shift + P


00:15:46.160 --> 00:15:47.600
to make it run on a GPU.


00:15:47.600 --> 00:15:48.960
Like how insane is that?


00:15:48.960 --> 00:15:49.780
- That's cool.


00:15:49.780 --> 00:15:50.960
- Okay, so that was pretty cool.


00:15:50.960 --> 00:15:52.480
You ready for some more notebook news?


00:15:52.480 --> 00:15:53.660
- Yes.


00:15:53.660 --> 00:15:57.600
- JupyterLab is ready for users, is now open.


00:15:57.600 --> 00:15:58.640
So what is JupyterLab?


00:15:58.640 --> 00:16:03.040
So Jupyter is something based on Jupyter Notebooks,


00:16:03.040 --> 00:16:04.820
but it's more than just--


00:16:04.820 --> 00:16:07.840
so we're going to have to put this with a grain of salt.


00:16:07.840 --> 00:16:11.320
A lot of people out there know better than I do.


00:16:11.320 --> 00:16:14.480
So it's like a hosted Jupyter Notebooks,


00:16:14.480 --> 00:16:16.160
which is really cool.


00:16:16.160 --> 00:16:19.760
But it also enables you to use text editors, terminals,


00:16:19.760 --> 00:16:23.400
data file viewers, and all sorts of other stuff


00:16:23.400 --> 00:16:25.880
that's not just in the notebook.


00:16:25.880 --> 00:16:30.180
So you could like SSH in and do stuff behind the scenes


00:16:30.180 --> 00:16:32.040
or something to this effect, right?


00:16:32.040 --> 00:16:35.720
So they've got some cool pictures, like they have,


00:16:35.720 --> 00:16:38.600
it's almost like this crazy web IDE.


00:16:38.600 --> 00:16:40.280
So you got like your files on the left,


00:16:40.280 --> 00:16:42.480
you got your standard notebook with graphs in the middle.


00:16:42.480 --> 00:16:45.240
And then on the right, you might have like a map,


00:16:45.240 --> 00:16:48.760
a couple of JSON files and a CSV in like an Excel thing,


00:16:48.760 --> 00:16:49.960
all in the same window.


00:16:49.960 --> 00:16:51.080
- Okay, well, that's neat.


00:16:51.080 --> 00:16:53.880
- Yeah, and you can build like extensions and plugins.


00:16:53.880 --> 00:16:57.760
So like that CSV thing is probably like a JupyterLab extension.


00:16:57.760 --> 00:17:02.240
So yet another really cool thing going on there.


00:17:02.240 --> 00:17:07.600
And I guess the final piece, a tip, maybe from the very first one from this segment


00:17:07.600 --> 00:17:13.160
is Daniel said, one thing that can happen is when you log into, say, like the Azure


00:17:13.160 --> 00:17:17.120
notebook, some of their dependencies are a little bit old, like pandas or matplotlib


00:17:17.120 --> 00:17:18.880
or something like that.


00:17:18.880 --> 00:17:24.440
He shows you how to import pip and then execute pip inside your notebook to force it to upgrade


00:17:24.440 --> 00:17:26.280
the dependencies in your project.


00:17:26.280 --> 00:17:27.280
Oh, okay.


00:17:27.280 --> 00:17:30.400
And it's good that you're going to put the snippet in our notes.


00:17:30.400 --> 00:17:36.720
Yeah, the snippet is in there, but you can basically, it shows you how to, from code,


00:17:36.720 --> 00:17:41.240
run pip to upgrade stuff, which I think is interesting and useful outside of just notebooks,


00:17:41.240 --> 00:17:45.200
but it happens to be, like if you don't get a remote into them, to the servers, you still


00:17:45.200 --> 00:17:46.200
want to upgrade stuff.


00:17:46.200 --> 00:17:47.200
It's pretty helpful.


00:17:47.200 --> 00:17:48.200
Yeah, nice.


00:17:48.200 --> 00:17:50.120
- All right, whew, that's a lot of notebook news.


00:17:50.120 --> 00:17:51.200
Probably have more next week.


00:17:51.200 --> 00:17:52.640
- Probably.


00:17:52.640 --> 00:17:54.400
- Probably, it's really cool though


00:17:54.400 --> 00:17:57.720
to see so much innovation and creativity around this stuff.


00:17:57.720 --> 00:18:00.920
So it's kind of a paradox of choice problem going on.


00:18:00.920 --> 00:18:03.040
Like if I wanted to get started, what the heck would I do?


00:18:03.040 --> 00:18:05.200
But there's a bunch of good options here.


00:18:05.200 --> 00:18:06.040
- Definitely.


00:18:06.040 --> 00:18:07.320
- Awesome, all right, you got anything extra


00:18:07.320 --> 00:18:08.560
you want to let everyone know about this week?


00:18:08.560 --> 00:18:10.520
- Just that maybe I should spend more time


00:18:10.520 --> 00:18:13.680
paying attention to Jupyter, but other than that, no.


00:18:13.680 --> 00:18:15.800
- Yeah, Jupyter's pretty cool.


00:18:15.800 --> 00:18:17.880
JupyterLab's exciting, Collaboratory's exciting,


00:18:17.880 --> 00:18:20.720
Notebooks on Azure is exciting, data lore is exciting.


00:18:20.720 --> 00:18:22.680
Yeah, I'll have to pay more attention as well.


00:18:22.680 --> 00:18:23.620
- Do you have any news?


00:18:23.620 --> 00:18:24.460
- No news.


00:18:24.460 --> 00:18:26.540
Well, when this episode goes out,


00:18:26.540 --> 00:18:31.060
there's a very good chance that I'll be at PyCon Slovakia.


00:18:31.060 --> 00:18:32.460
And if I am, and you hear this,


00:18:32.460 --> 00:18:33.900
feel free to come say hi, that'd be cool.


00:18:33.900 --> 00:18:34.740
- Neat.


00:18:34.740 --> 00:18:36.500
- Yeah, so I think that's the right timing.


00:18:36.500 --> 00:18:37.380
I'm pretty sure it will be.


00:18:37.380 --> 00:18:39.620
I'll try to line it up that way.


00:18:39.620 --> 00:18:41.460
All right, well, thanks for getting all this stuff together,


00:18:41.460 --> 00:18:42.300
Brian, this is great stuff.


00:18:42.300 --> 00:18:43.140
- Yeah, thank you.


00:18:43.140 --> 00:18:46.460
- Thank you for listening to Python Bytes.


00:18:46.460 --> 00:18:52.340
Follow the show on Twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S.


00:18:52.340 --> 00:18:55.620
And get the full show notes at PythonBytes.fm.


00:18:55.620 --> 00:18:59.340
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:18:59.340 --> 00:19:00.340
way.


00:19:00.340 --> 00:19:02.820
We're always on the lookout for sharing something cool.


00:19:02.820 --> 00:19:06.060
On behalf of myself and Brian Auchin, this is Michael Kennedy.


00:19:06.060 --> 00:19:09.340
Thank you for listening and sharing this podcast with your friends and colleagues.

