
00:00:00.000 --> 00:00:04.640
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.640 --> 00:00:09.760
This is episode 161 recorded December 12th, 2019.


00:00:09.760 --> 00:00:14.640
I'm Michael Kennedy and Brian Okken is not here today. Instead, we have a very special guest,


00:00:14.640 --> 00:00:15.920
Anthony Herbert. Welcome, Anthony.


00:00:15.920 --> 00:00:17.360
It's nice to be here. Thanks for having me.


00:00:17.360 --> 00:00:20.960
Yeah, it's great to have you here. You're doing all sorts of cool stuff in the Python space and


00:00:20.960 --> 00:00:23.920
I'm looking forward to sharing some of the week's news with you.


00:00:23.920 --> 00:00:27.920
Also want to say thank you to DigitalOcean. They're sponsored this episode as they have


00:00:27.920 --> 00:00:34.920
many, many of them. So check them out at PythonBytes.fm/DigitalOcean and get a $50 credit for new users.


00:00:34.920 --> 00:00:38.880
Anthony, people might know you from your website PrettyPrinted. You do a lot of stuff with


00:00:38.880 --> 00:00:40.760
Flask and things like that, right?


00:00:40.760 --> 00:00:41.760
Yeah.


00:00:41.760 --> 00:00:47.000
Yeah, cool. So people have checked that out. That's the same Anthony. And you're here with


00:00:47.000 --> 00:00:53.160
a bit of a contrarian story on getting stuff solved, right? And I actually really subscribe


00:00:53.160 --> 00:00:57.080
to this idea as well about using crappy code when it makes sense. Tell us about it.


00:00:57.080 --> 00:01:02.040
This is from a talk by Larry Hastings. It's called "Solve Your Problem with Sloppy Python."


00:01:02.040 --> 00:01:07.320
And in this talk, he basically advocates solving personal problems with sloppy Python, not


00:01:07.320 --> 00:01:11.440
problems that you would have at work because that would be a huge issue. So in the talk,


00:01:11.440 --> 00:01:16.760
he gives three or four examples of how he solves problems that he has encountered in


00:01:16.760 --> 00:01:22.560
his everyday life. And three of the four have to do with string manipulation, so renaming


00:01:22.560 --> 00:01:27.560
files and I think that's something that everyone has had to deal with at some point. I know


00:01:27.560 --> 00:01:33.240
I have to deal with it all the time. And another example is a script that he uses to install


00:01:33.240 --> 00:01:37.780
all the packages after reinstalling an operating system. So instead of going through and trying


00:01:37.780 --> 00:01:42.960
to install each package individually, what he does is he just writes a script and installs


00:01:42.960 --> 00:01:48.160
everything that he uses. So Sublime, Chrome, and even the latest versions of Python. And


00:01:48.160 --> 00:01:52.440
as an example of some of the sloppy code that he has, when he goes to install the latest


00:01:52.440 --> 00:01:57.440
versions of Python. All he does is he goes to Python.org and he scrapes the


00:01:57.440 --> 00:02:01.040
latest version of Python there. So he gets the version number, then he can go


00:02:01.040 --> 00:02:04.440
and download the source for that, build the source, and then he has the latest


00:02:04.440 --> 00:02:08.800
version of Python installed without him having to actually do anything.


00:02:08.800 --> 00:02:11.960
Yeah, I didn't catch that he actually was using that to build from source.


00:02:11.960 --> 00:02:15.680
That's pretty funny. Yeah, but he's doing a lot of cool stuff. And I like


00:02:15.680 --> 00:02:18.800
this message. Like I said, I kind of subscribe to it. It's there are times


00:02:18.800 --> 00:02:22.840
that you should put tons of energy into structuring beautiful code that's very


00:02:22.840 --> 00:02:24.640
maintainable and very abstracted.


00:02:24.640 --> 00:02:29.340
And like you mentioned, Anthony, when you were doing this on a team, if you


00:02:29.340 --> 00:02:32.340
create crappy code, your team members are not going to like you and you're like,


00:02:32.340 --> 00:02:36.040
oh man, I don't want to go work on that part of the code because you know, it's


00:02:36.040 --> 00:02:40.340
always like, there's like two features and three bugs, it seems to be the ratio


00:02:40.340 --> 00:02:41.200
or something like that.


00:02:41.200 --> 00:02:41.440
Right.


00:02:41.440 --> 00:02:44.960
But there's all these little things that, you know, like you don't need to do a


00:02:44.960 --> 00:02:47.580
lot of error handling, you're just going to run it and it's just, it just needs


00:02:47.580 --> 00:02:50.940
to do this thing and you're the one person looking at it.


00:02:50.940 --> 00:02:55.340
And if it doesn't work, it's going to be obvious you'll get a big stack trace or trace back,


00:02:55.340 --> 00:02:56.340
something like that.


00:02:56.340 --> 00:02:57.340
Right?


00:02:57.340 --> 00:03:00.300
What the reason I like it is it allows people to say, instead of spending a lot of work


00:03:00.300 --> 00:03:04.780
on building something fancy to solve my problem, I can spend 10 minutes and solve it for the


00:03:04.780 --> 00:03:05.780
rest of my life.


00:03:05.780 --> 00:03:06.780
Right?


00:03:06.780 --> 00:03:07.780
Right.


00:03:07.780 --> 00:03:08.980
Do you have situations in your world where you do that?


00:03:08.980 --> 00:03:11.100
I have to move files around all the time.


00:03:11.100 --> 00:03:16.660
And what tends to happen is like I start to do it and I feel a bit stubborn at times.


00:03:16.660 --> 00:03:18.500
So I just continue doing it manually.


00:03:18.500 --> 00:03:21.760
And then when I'm done, I realize, "Oh, I could have written a script for that."


00:03:21.760 --> 00:03:26.760
So what this talk basically reminds me to do is think about automating at first and


00:03:26.760 --> 00:03:31.160
do as much as I can in code and then minimize the manual parts.


00:03:31.160 --> 00:03:35.160
There was something I did recently where I had to cut out pieces of audio files, starting


00:03:35.160 --> 00:03:38.240
at a certain time step and ending at a time stamp.


00:03:38.240 --> 00:03:39.880
And I had to do that for about 30 files.


00:03:39.880 --> 00:03:42.060
And it took me a couple of hours to do this.


00:03:42.060 --> 00:03:45.820
And Audacity has the ability to be controlled by a Python script.


00:03:45.820 --> 00:03:49.340
So perhaps I could have written a script to do that for me automatically instead of sitting


00:03:49.340 --> 00:03:52.060
in my computer messing with audio files for a couple of hours.


00:03:52.060 --> 00:03:55.860
Yeah, and you can do that for a few hours, but eventually at some point you're like,


00:03:55.860 --> 00:03:58.340
this is really hard.


00:03:58.340 --> 00:04:02.140
And in my own world, I've had a lot of these experiences to the point where I'm like, maybe


00:04:02.140 --> 00:04:03.420
I should hire someone to do this.


00:04:03.420 --> 00:04:07.940
And then like, wait, wait, wait, I bet I could do this in Python, and then two hours later,


00:04:07.940 --> 00:04:08.940
it's automated.


00:04:08.940 --> 00:04:09.940
I'm like, why was I ever thinking that?


00:04:09.940 --> 00:04:10.940
What a fool.


00:04:10.940 --> 00:04:15.540
So I threw out some examples onto the show notes of stuff that I was doing as well.


00:04:15.540 --> 00:04:18.300
So there's a bunch of little things that just make my life so much easier.


00:04:18.300 --> 00:04:23.660
If I export course sale data, I use Stripe, I got to get it out of their format as an


00:04:23.660 --> 00:04:28.420
Excel CSV, and then I got to convert it to something else that I process and filter and


00:04:28.420 --> 00:04:29.420
so on.


00:04:29.420 --> 00:04:32.460
And I was doing that by hand for years.


00:04:32.460 --> 00:04:37.380
Why am I always going into the sheet, deleting these columns, copying this stuff over there.


00:04:37.380 --> 00:04:38.780
And I just wrote a Python script.


00:04:38.780 --> 00:04:44.980
Now it's one line of command line call, runs a Python script, and it transforms my stuff


00:04:44.980 --> 00:04:48.620
into something I can just paste into the right sheet,


00:04:48.620 --> 00:04:51.180
a Google sheet, sort of calculation place.


00:04:51.180 --> 00:04:53.980
Another one is I always have titles and stuff


00:04:53.980 --> 00:04:57.380
that I want to make into file names or folder names.


00:04:57.380 --> 00:05:02.180
Think the title of this show or the name of a lecture,


00:05:02.180 --> 00:05:03.260
a video lecture in a course.


00:05:03.260 --> 00:05:05.580
I want to take the title and make the file name that.


00:05:05.580 --> 00:05:07.580
So I wrote this thing called URLify,


00:05:07.580 --> 00:05:09.300
and it was like 20 lines of code,


00:05:09.300 --> 00:05:11.020
because I was sick of lowercase e


00:05:11.020 --> 00:05:13.780
and putting dashes for spaces, taking away the dots,


00:05:13.780 --> 00:05:16.980
taking away the punctuation and I put that in as a gist, people can have it.


00:05:16.980 --> 00:05:18.340
I do tons of reporting this way.


00:05:18.340 --> 00:05:22.100
The deployment on my server, I turn that into the script that I can use with


00:05:22.100 --> 00:05:27.480
Python, it sort of does a bunch of stuff with actually async and await in there,


00:05:27.480 --> 00:05:28.620
which is pretty cool.


00:05:28.620 --> 00:05:32.320
Importing information from video files, because I don't want to go there and


00:05:32.320 --> 00:05:35.620
copy, like it's this long and its name is this, so now I can just point it at


00:05:35.620 --> 00:05:38.340
the directory and it'll just rip that out of there or same thing for like


00:05:38.340 --> 00:05:39.420
duration of audio files.


00:05:39.420 --> 00:05:44.020
there's all these cool little things that were nagging me that I had to do


00:05:44.020 --> 00:05:47.100
all the time and I'm just like you know what this is getting some Python on it.


00:05:47.100 --> 00:05:52.060
Yeah sounds good. Absolutely. So I mentioned async and await and the place


00:05:52.060 --> 00:05:57.620
where async and await seems to have the most power right is around well network


00:05:57.620 --> 00:06:02.540
stuff. So it's either on the server side where you have a framework that is some


00:06:02.540 --> 00:06:06.100
kind of web server that can scale out better because the web methods are


00:06:06.100 --> 00:06:09.100
or async and await, or a client, something like requests,


00:06:09.100 --> 00:06:12.100
more like HTTPX or something like that that supports an async


00:06:12.100 --> 00:06:15.100
way to talk to a bunch of different services or websites.


00:06:15.100 --> 00:06:18.100
The next thing I want to cover is this little write-up


00:06:18.100 --> 00:06:21.100
by Floramund Manka,


00:06:21.100 --> 00:06:24.100
and it's the introduction to ASGI,


00:06:24.100 --> 00:06:27.100
the emergence of async Python web frameworks.


00:06:27.100 --> 00:06:30.100
We've probably all heard of WSGI or WSGI,


00:06:30.100 --> 00:06:33.100
that powers Flask and


00:06:33.100 --> 00:06:35.140
are things like Pyramid and Django and so on.


00:06:35.140 --> 00:06:36.580
That's the web service gateway interface.


00:06:36.580 --> 00:06:40.140
And it's, you've got a request, give me the answer.


00:06:40.140 --> 00:06:43.340
And that just doesn't work when you want to allow


00:06:43.340 --> 00:06:45.840
multiple requests to all run at the same time, right?


00:06:45.840 --> 00:06:47.480
If I'm gonna have a bunch of async stuff,


00:06:47.480 --> 00:06:50.020
I gotta let some pause and let some new ones come in


00:06:50.020 --> 00:06:51.700
and all that kind of stuff.


00:06:51.700 --> 00:06:55.380
So one of the areas where I think there's a ton of growth,


00:06:55.380 --> 00:06:57.860
and I'd like to get your opinion on this, Anthony,


00:06:57.860 --> 00:07:00.260
is around these new Python web frameworks.


00:07:00.260 --> 00:07:01.860
It used to seem really clear, like, yeah,


00:07:01.860 --> 00:07:05.940
Flash, Django, Pyramid, a few others. And now there's a new one every week. I don't even know


00:07:05.940 --> 00:07:09.540
what to keep track of anymore. How do you feel? Yeah, and I don't know what to keep track of


00:07:09.540 --> 00:07:14.100
either. Like I don't even know where to start. So I haven't, I haven't really looked into any of


00:07:14.100 --> 00:07:18.980
them closely. Some people on my channel have been telling me to look into Sanic. Yeah, Sanic's got


00:07:18.980 --> 00:07:22.900
a lot of traction. Yeah, that was the first one I heard about a couple of years ago. And it's still


00:07:22.900 --> 00:07:27.060
going pretty strong. I haven't looked into it yet. And it seems interesting. Like I've done a little


00:07:27.060 --> 00:07:32.180
bit of Node stuff in the past. And I know this is bringing Node-like functionality to Python.


00:07:32.180 --> 00:07:37.220
So I want to look into it, but I haven't looked into it deeply yet. And I noticed that Django,


00:07:37.220 --> 00:07:43.540
they just released 3.0, and they have support for ASCI. I don't think it's completely functional yet,


00:07:43.540 --> 00:07:46.820
but the beginnings of it are there. So I should definitely look into it more.


00:07:46.820 --> 00:07:50.420
Yeah, for sure. The foundations are there. And if you're a Flask person like you are,


00:07:50.420 --> 00:07:55.380
probably the best thing to actually start with might be Court. So I don't know if you've heard


00:07:55.380 --> 00:08:00.180
heard of court but court is a 100% compatible even with the extensions


00:08:00.180 --> 00:08:05.900
plugins and stuff for flask API but it also allows for async and await on the


00:08:05.900 --> 00:08:09.420
view methods so basically the way you convert from flask to court is you


00:08:09.420 --> 00:08:12.580
replace the word flask with the word court if it's lowercase flask it's


00:08:12.580 --> 00:08:15.900
lowercase court if it's uppercase flask it's uppercase court and that's it and


00:08:15.900 --> 00:08:19.660
then you have async methods you do have to run it on something like uvicorn but


00:08:19.660 --> 00:08:23.060
yeah that's probably the path of least resistance but it also doesn't take


00:08:23.060 --> 00:08:26.180
advantage of necessarily the best new features, right?


00:08:26.180 --> 00:08:29.060
- That seems easy. I can try that last support.


00:08:29.060 --> 00:08:30.460
- Yeah, you could definitely try that.


00:08:30.460 --> 00:08:32.860
The thing is, when I first did that and I tested it out,


00:08:32.860 --> 00:08:34.300
I'm like, "All right, let's see how much faster this is."


00:08:34.300 --> 00:08:36.500
And I made the mistake of just running it


00:08:36.500 --> 00:08:38.380
as it traditionally had been,


00:08:38.380 --> 00:08:40.820
and it was running on a WSGI server,


00:08:40.820 --> 00:08:42.460
so it couldn't do any of the async stuff.


00:08:42.460 --> 00:08:44.540
I'm like, "It's just the same. What a shame.


00:08:44.540 --> 00:08:46.140
This is not working at all.


00:08:46.140 --> 00:08:49.220
Like, oh, maybe I need a different server to enable this."


00:08:49.220 --> 00:08:50.540
Yes, that is what was missing.


00:08:50.540 --> 00:08:52.140
So yeah, it's pretty cool.


00:08:52.140 --> 00:08:56.460
And the thing is, the slower the external systems that you depend upon are,


00:08:56.460 --> 00:08:59.060
the better your performance is going to increase, right?


00:08:59.060 --> 00:09:02.060
So if your database responds in 10 milliseconds,


00:09:02.060 --> 00:09:05.940
you can handle more requests if you switch it to async and await.


00:09:05.940 --> 00:09:08.820
But you're kind of doing more work in that 10 millisecond window.


00:09:08.820 --> 00:09:11.220
But if you're talking to a database that takes two seconds,


00:09:11.220 --> 00:09:13.220
or web services that take two seconds,


00:09:13.220 --> 00:09:16.660
all of a sudden you have a whole two seconds of what was blocked up web server


00:09:16.660 --> 00:09:20.340
to now go do kick off a whole bunch more waiting or something like that, right?


00:09:20.340 --> 00:09:21.260
So it's pretty cool.


00:09:21.260 --> 00:09:22.020
I'll look into that more.


00:09:22.020 --> 00:09:22.420
Yeah, nice.


00:09:22.420 --> 00:09:24.820
So they give a few reasons why you might care about this.


00:09:24.820 --> 00:09:29.460
So they say speed, obviously, they're doing some tests and they say things like,


00:09:29.460 --> 00:09:34.420
well, they're getting 60 to 70,000 requests per second, whereas like


00:09:34.420 --> 00:09:38.180
synchronous flask and Django do like 10 to 20,000, right?


00:09:38.180 --> 00:09:42.020
I mean, performance is always one of those things that's very hard to measure.


00:09:42.020 --> 00:09:46.500
And if you had a very slow flask app, like I was describing, you would get a


00:09:46.500 --> 00:09:49.300
much bigger percentage boost and so on.


00:09:49.300 --> 00:09:50.300
So pretty cool.


00:09:50.300 --> 00:09:50.820
Yeah.


00:09:50.820 --> 00:09:53.900
So they link to a couple of different tools you might use.


00:09:53.900 --> 00:09:58.900
uvicorn, which is a like g-unicorn, but based on uvloop,


00:09:58.900 --> 00:10:02.840
which is the C implementation of async IO event loop,


00:10:02.840 --> 00:10:05.340
and plugged in a g-unicorn,


00:10:05.340 --> 00:10:08.340
that's a good foundational production server.


00:10:08.340 --> 00:10:10.740
And then starlet seems to be


00:10:10.740 --> 00:10:12.980
one of the best async frameworks.


00:10:12.980 --> 00:10:15.780
Like you mentioned Sanic, and I talked about Cort.


00:10:15.780 --> 00:10:17.220
Starlet seems to be the foundation.


00:10:17.220 --> 00:10:19.940
It's like the foundation of FastAPI and some other ones,


00:10:19.940 --> 00:10:22.140
and it's its own framework, so it's pretty good.


00:10:22.140 --> 00:10:23.740
There's a bunch of other things that are interesting,


00:10:23.740 --> 00:10:26.940
like HTTPX as a replacement for requests,


00:10:26.940 --> 00:10:28.500
where you have async there,


00:10:28.500 --> 00:10:30.860
ORM, which is an asynchronous ORM,


00:10:30.860 --> 00:10:32.780
'cause if you don't have an async database call,


00:10:32.780 --> 00:10:34.700
then what are you waiting on, usually?


00:10:34.700 --> 00:10:36.980
So a bunch of cool little things to bring together,


00:10:36.980 --> 00:10:38.420
and if you're getting interested


00:10:38.420 --> 00:10:40.300
in this async and await plus web frameworks,


00:10:40.300 --> 00:10:42.700
check out this article here, it's pretty nice.


00:10:42.700 --> 00:10:46.540
Speaking of nice, let me tell you all about DigitalOcean.


00:10:46.540 --> 00:10:48.660
They're making Kubernetes easier


00:10:48.660 --> 00:10:51.380
with their container registry in one click apps.


00:10:51.380 --> 00:10:54.500
So when you create a Docker image, Docker containers,


00:10:54.500 --> 00:10:57.100
you've got to have a Docker file that says,


00:10:57.100 --> 00:11:01.180
here's exactly how to construct my Docker container.


00:11:01.180 --> 00:11:02.740
Maybe it has some files it copies in


00:11:02.740 --> 00:11:03.980
and all that kind of stuff.


00:11:03.980 --> 00:11:05.460
But you probably don't want to put that


00:11:05.460 --> 00:11:08.580
onto some public place like Docker Hub.


00:11:08.580 --> 00:11:12.140
You might, but you may well be really reticent to do that.


00:11:12.140 --> 00:11:15.060
So DigitalOcean introduced a new managed service,


00:11:15.060 --> 00:11:17.460
the DigitalOcean Container Registry.


00:11:17.460 --> 00:11:19.860
And it's in early access now, but you can check it out.


00:11:19.860 --> 00:11:21.860
It's simple, private, secure, and fast.


00:11:21.860 --> 00:11:24.060
And you don't have to put your


00:11:24.060 --> 00:11:27.020
Docker file definitions up there


00:11:27.020 --> 00:11:29.180
somewhere where you would rather not put them.


00:11:29.180 --> 00:11:32.540
So check them out at python.bytes.fm/digitalocean.


00:11:32.540 --> 00:11:35.220
You usually get a $50 credit to get started.


00:11:35.220 --> 00:11:37.220
So what's this next one you got here, Anthony?


00:11:37.220 --> 00:11:39.820
So this is a blog called Python Insights.


00:11:39.820 --> 00:11:42.420
And it's from someone named Tim Martin.


00:11:42.420 --> 00:11:45.420
And in this blog, he just talks about the internals of Python.


00:11:45.420 --> 00:11:48.100
So how Python works behind the scenes.


00:11:48.100 --> 00:11:51.140
Because oftentimes when we write Python, we don't really think about what's


00:11:51.140 --> 00:11:53.540
happening when it actually gets executed.


00:11:53.540 --> 00:11:59.020
So on the first page, for example, he has posts like how context variables work,


00:11:59.020 --> 00:12:02.980
how the import statement works, and how even Python is converted to bytecode.


00:12:02.980 --> 00:12:07.620
And one post that I saw that was pretty interesting was called "Dictionaries


00:12:07.620 --> 00:12:12.260
Preserve Order." So when I first learned Python some years ago, one of the things


00:12:12.260 --> 00:12:15.260
that I learned about dictionaries is there's no ordering to them.


00:12:15.260 --> 00:12:17.940
Because, you know, they're just hash tables. You put things in,


00:12:17.940 --> 00:12:21.180
and there's no guarantee on what order they'll come back when you go to


00:12:21.180 --> 00:12:22.680
look at the entire dictionary.


00:12:22.680 --> 00:12:26.260
Well, apparently, since Python 3.6 or 3.7,


00:12:26.260 --> 00:12:30.140
there is ordering now. So the order in which you insert things into the dictionary


00:12:30.140 --> 00:12:32.260
is the order that is always going to be there.


00:12:32.260 --> 00:12:36.060
So every time you look at the dictionary, you're going to see the things in the order that you


00:12:36.060 --> 00:12:39.740
inserted them. And this is something that I would never have suspected.


00:12:39.740 --> 00:12:43.860
But they changed the implementation of how the memory of dictionaries work in Python.


00:12:43.860 --> 00:12:46.860
And this is something that he looked into. So he goes to explain


00:12:46.860 --> 00:12:48.360
how all that works,


00:12:48.360 --> 00:12:50.960
how hash tables work in general, and why


00:12:50.960 --> 00:12:53.760
the ordering is there now in 3.7.


00:12:53.760 --> 00:12:55.760
Yeah, nice. There's a bunch of just cool little insights.


00:12:55.760 --> 00:12:58.400
Like, take that idea and just dive into it and explain it.


00:12:58.400 --> 00:13:01.060
It seems like a good place, especially if you're getting started,


00:13:01.060 --> 00:13:02.900
and you want to dig into those ideas.


00:13:02.900 --> 00:13:05.860
Yeah, the more you know about how it works, I think the better off you'll be.


00:13:05.860 --> 00:13:08.660
Yeah, it's kind of cool they finally decided to make dictionaries


00:13:08.660 --> 00:13:20.060
ordered, right? It lets them be used in a few more places where maybe you actually need ordering and you're like, well, I could use a list and that'll have the order, but it'll be slow to get the items out. But maybe that's the trade off we have to make. And now you don't have to.


00:13:20.060 --> 00:13:28.160
Right, right. And I noticed 3.8, they add a reverse function as well. Our dictionaries can work with reverse. So if you want to reverse your dictionary for whatever reason, you can.


00:13:28.160 --> 00:13:30.960
Yeah, that's really taking the order seriously.


00:13:30.960 --> 00:13:33.960
So this next one, since you're a big web developer,


00:13:33.960 --> 00:13:36.760
I think will be interesting to you, and you're into Flask.


00:13:36.760 --> 00:13:38.760
This one is called Assembly.


00:13:38.760 --> 00:13:39.260
Have you heard of it?


00:13:39.260 --> 00:13:39.960
I have not.


00:13:39.960 --> 00:13:41.760
Well, when somebody recommended it,


00:13:41.760 --> 00:13:44.960
Luis Honda sent this over and said, "Oh, you should check out Assembly."


00:13:44.960 --> 00:13:47.760
My first thought was, like, "Assembly language?"


00:13:47.760 --> 00:13:49.960
Like, I'm really not interested in Assembly language,


00:13:49.960 --> 00:13:52.960
but you said it's a web framework, so let me check this out.


00:13:52.960 --> 00:13:57.260
And it turns out that this is like an API on top of Flask.


00:13:57.260 --> 00:14:01.140
So it has its own API, but deep down, it's really flask, right?


00:14:01.140 --> 00:14:05.740
And the idea is this person who wrote this project said,


00:14:05.740 --> 00:14:12.140
"I would like to build my web application using the concept of object-oriented relationships."


00:14:12.140 --> 00:14:17.740
So for example, if you want to have just bare routes,


00:14:17.740 --> 00:14:20.740
so like maybe just a slash for your homepage,


00:14:20.740 --> 00:14:25.140
you want to slash about for your about, slash contact for slash contact or something like that.


00:14:25.140 --> 00:14:27.940
All you do is you create a class called index,


00:14:27.940 --> 00:14:29.620
and then you have functions,


00:14:29.620 --> 00:14:32.100
one called index, one called home, one called about,


00:14:32.100 --> 00:14:34.740
and it automatically sets up all the routing.


00:14:34.740 --> 00:14:37.500
And at first, it sounds like, "Ah, you know, okay,


00:14:37.500 --> 00:14:40.340
how much is this really buying me in terms of..."


00:14:40.340 --> 00:14:43.420
I had that right, I could put app.route and put that in there,


00:14:43.420 --> 00:14:45.980
you may use a module to structure things that way.


00:14:45.980 --> 00:14:49.100
But as you look through this more and more,


00:14:49.100 --> 00:14:51.620
there's just like all of these features.


00:14:51.620 --> 00:14:53.220
So I put a link in here, it says,


00:14:53.220 --> 00:14:55.380
decisions made for you plus features.


00:14:55.380 --> 00:14:56.420
And I'll just go through this,


00:14:56.420 --> 00:14:59.580
and Anthony, you tell me how these ideas hit you.


00:14:59.580 --> 00:15:00.500
All in this one framework.


00:15:00.500 --> 00:15:03.100
So it has smart routing, which I just described.


00:15:03.100 --> 00:15:06.060
It has class names as part of the URL.


00:15:06.060 --> 00:15:08.300
So if I have a class called user account,


00:15:08.300 --> 00:15:10.180
the URL will be of all the stuff,


00:15:10.180 --> 00:15:13.580
and then we'll start, be prefixed with user dash account.


00:15:13.580 --> 00:15:17.100
Class methods can also be accessed in the same way, right?


00:15:17.100 --> 00:15:18.340
It'll put dashes and whatnot.


00:15:18.340 --> 00:15:19.380
It has a RESTful API.


00:15:19.380 --> 00:15:22.220
It automatically figures out the view to render.


00:15:22.220 --> 00:15:25.380
So in the templates folder, if you have an index class,


00:15:25.380 --> 00:15:27.380
in there you make a folder.


00:15:27.380 --> 00:15:29.700
In that folder, you create, you know,


00:15:29.700 --> 00:15:32.660
I said there's a slash about, you put in an about.html


00:15:32.660 --> 00:15:35.140
and it'll automatically find that and render that


00:15:35.140 --> 00:15:37.860
as part of the template by just returning a dictionary.


00:15:37.860 --> 00:15:39.060
So I like that.


00:15:39.060 --> 00:15:40.500
Although you can edit it with route.


00:15:40.500 --> 00:15:42.580
It also has built-in markdown support.


00:15:42.580 --> 00:15:43.900
So if you have a markdown file,


00:15:43.900 --> 00:15:46.740
it'll process it and convert it to HTML.


00:15:46.740 --> 00:15:47.580
- Okay, that's nice.


00:15:47.580 --> 00:15:48.420
- Yeah, that's cool, right?


00:15:48.420 --> 00:15:51.140
It has built-in support for passwords and it uses bcrypt,


00:15:51.140 --> 00:15:52.900
which is an awesome thing to do it.


00:15:52.900 --> 00:15:54.940
It has session-based support.


00:15:54.940 --> 00:15:59.040
You can use Redis, AWS S3, SQLite, Postgres,


00:15:59.040 --> 00:16:00.860
all these things as backend support for that.


00:16:00.860 --> 00:16:03.300
It has ActiveAlchemy,


00:16:03.300 --> 00:16:06.780
which is a different take on SQLAlchemy.


00:16:06.780 --> 00:16:08.500
So SQLAlchemy uses unit of work


00:16:08.500 --> 00:16:09.860
where you start the unit of work,


00:16:09.860 --> 00:16:11.300
you do a bunch of stuff, and then you commit it.


00:16:11.300 --> 00:16:12.840
And this one is more active record,


00:16:12.840 --> 00:16:14.220
so each thing gets a change,


00:16:14.220 --> 00:16:16.140
but it's still SQLAlchemy underneath.


00:16:16.140 --> 00:16:16.980
Ooh, I'll keep going though,


00:16:16.980 --> 00:16:19.140
'cause these are cool, like cross-site request forgery


00:16:19.140 --> 00:16:22.820
on all posts automatically, idiomatic HTTP errors,


00:16:22.820 --> 00:16:26.280
storage can be like S3, mail support, arrow for time,


00:16:26.280 --> 00:16:31.140
caching, pagination, assets, signals for dispatching


00:16:31.140 --> 00:16:33.040
messages to other parts of your app,


00:16:33.040 --> 00:16:34.000
and a bunch of other stuff.


00:16:34.000 --> 00:16:37.340
So that's a lot of things to add on top of basic Flask.


00:16:37.340 --> 00:16:38.180
- Yeah, it is.


00:16:38.180 --> 00:16:40.140
All those extra features sound great.


00:16:40.140 --> 00:16:43.220
The main part that I noticed was using the class


00:16:43.220 --> 00:16:47.660
to organize your routes, and that's a little strange to me.


00:16:47.660 --> 00:16:51.020
I'm used to just writing functions that are part of blueprints


00:16:51.020 --> 00:16:52.860
because I think that works so well


00:16:52.860 --> 00:16:56.300
that I haven't thought of a reason to switch that up.


00:16:56.300 --> 00:16:57.540
But I'll definitely look into it


00:16:57.540 --> 00:17:00.500
because I'm sure there's a reason why this was done.


00:17:00.500 --> 00:17:02.780
Like I don't like to dismiss things right away


00:17:02.780 --> 00:17:04.820
because I don't understand it.


00:17:04.820 --> 00:17:06.260
If they spent the time to build this library,


00:17:06.260 --> 00:17:07.140
then there's a good reason.


00:17:07.140 --> 00:17:09.660
So I'll look into it and I'll see what the advantages are


00:17:09.660 --> 00:17:10.860
of using a class for this.


00:17:10.860 --> 00:17:13.540
- Sure, my two impressions,


00:17:13.540 --> 00:17:16.580
to me the things that seem like two advantages,


00:17:16.580 --> 00:17:19.380
There's some other stuff that I didn't mention about RESTful APIs and whatnot,


00:17:19.380 --> 00:17:24.340
but the two big ones seem to be automatic URL generation and grouping.


00:17:24.340 --> 00:17:29.140
So if I have got like a blog class and then a, you know, latest post, like


00:17:29.140 --> 00:17:32.980
that latest method, it automatically says that slash blog slash latest.


00:17:32.980 --> 00:17:34.100
And I don't have to think about that.


00:17:34.100 --> 00:17:36.180
I think that is one part that's interesting.


00:17:36.180 --> 00:17:40.660
Stuff that's grouped in that class is clearly grouped in a URL hierarchy.


00:17:40.660 --> 00:17:45.780
And then the other is the automatic discovery and rendering of the template,


00:17:45.860 --> 00:17:48.540
If your template structure looks like the shape of your classes,


00:17:48.540 --> 00:17:50.900
then it'll just find the template without you saying


00:17:50.900 --> 00:17:53.140
flask render template and give the template name.


00:17:53.140 --> 00:17:54.900
I don't know if that's enough to win people over,


00:17:54.900 --> 00:17:56.900
but I think that that's what they're going for.


00:17:56.900 --> 00:17:59.700
Okay, yeah, and I always name my templates the same as the function,


00:17:59.700 --> 00:18:00.740
so that would definitely help.


00:18:00.740 --> 00:18:02.980
Yeah, I try to do that too, but this thing just says,


00:18:02.980 --> 00:18:05.620
and we're going to use that to figure out what to render and whatnot.


00:18:05.620 --> 00:18:08.660
So it's pretty new, and I think this is one of the challenges.


00:18:08.660 --> 00:18:10.980
There's all these cool and exciting ideas,


00:18:10.980 --> 00:18:13.060
but it's just getting started,


00:18:13.060 --> 00:18:15.420
and you don't know which one is going to survive, right?


00:18:15.420 --> 00:18:17.220
Like you've been doing a lot with Flask and you're like,


00:18:17.220 --> 00:18:18.380
"Well, maybe I should look at Sanic,


00:18:18.380 --> 00:18:20.460
but maybe Sanic won't be here in two months.


00:18:20.460 --> 00:18:21.660
So maybe I shouldn't look at Sanic.


00:18:21.660 --> 00:18:22.500
What else should I look at?"


00:18:22.500 --> 00:18:24.860
There's just so much churn, which is beautiful


00:18:24.860 --> 00:18:25.980
'cause there's all these things coming,


00:18:25.980 --> 00:18:28.300
but at the same time, it means it's really kind of hard


00:18:28.300 --> 00:18:29.860
to pick a horse in the race.


00:18:29.860 --> 00:18:32.140
- Yeah, Flask has a huge problem with this.


00:18:32.140 --> 00:18:35.260
Like Flask itself is fine, but so many extensions,


00:18:35.260 --> 00:18:37.180
you know, they get popular,


00:18:37.180 --> 00:18:40.820
then there are no more maintainers after just a few months.


00:18:40.820 --> 00:18:42.700
So you have to find a new library


00:18:42.700 --> 00:18:44.540
if you want to get the latest.


00:18:44.540 --> 00:18:45.380
- Yeah.


00:18:45.380 --> 00:18:48.600
All right, this next thing you have is pretty interesting.


00:18:48.600 --> 00:18:49.880
Some physical hardware, huh?


00:18:49.880 --> 00:18:51.380
- Yeah, so this is an article by Lennon.


00:18:51.380 --> 00:18:53.840
It's called "Building a Standalone GPS Logger


00:18:53.840 --> 00:18:57.460
"with CircuitPython Using Adafruit and Particle Hardware."


00:18:57.460 --> 00:18:59.620
So I've never done anything with hardware


00:18:59.620 --> 00:19:01.800
because it seems kind of mysterious to me.


00:19:01.800 --> 00:19:04.520
So reading this post was interesting


00:19:04.520 --> 00:19:07.260
because it kind of showed how straightforward it is.


00:19:07.260 --> 00:19:09.060
Like obviously you have to figure out


00:19:09.060 --> 00:19:10.900
what components you need to build something.


00:19:10.900 --> 00:19:13.100
But in terms of writing the code to control all this


00:19:13.100 --> 00:19:15.660
with CircuitPython, which is a version of Python


00:19:15.660 --> 00:19:17.180
for microcontrollers.


00:19:17.180 --> 00:19:18.340
It's pretty straightforward.


00:19:18.340 --> 00:19:21.500
It reminds me of taking data from an API


00:19:21.500 --> 00:19:24.000
and just writing it somewhere, so to like a database.


00:19:24.000 --> 00:19:26.320
So in this case, you have the GPS logger,


00:19:26.320 --> 00:19:28.100
so that's like your API in a sense.


00:19:28.100 --> 00:19:29.600
You have data coming from that,


00:19:29.600 --> 00:19:31.880
and you just take that data and you put it somewhere else.


00:19:31.880 --> 00:19:33.780
So it's really that straightforward.


00:19:33.780 --> 00:19:35.540
Obviously, you have some code to check


00:19:35.540 --> 00:19:37.340
if the hardware is working properly,


00:19:37.340 --> 00:19:40.660
but the actual code to do what you want


00:19:40.660 --> 00:19:41.900
is pretty straightforward.


00:19:41.900 --> 00:19:44.900
So he built this GPS logger because he wanted a way to


00:19:44.900 --> 00:19:47.900
track his GPS location over time instead of just having


00:19:47.900 --> 00:19:50.900
the current location like your phone gives you.


00:19:50.900 --> 00:19:53.900
And in a way that doesn't just drain your battery.


00:19:53.900 --> 00:19:56.900
So he shows you what components he had to purchase


00:19:56.900 --> 00:19:59.900
and how he put them all together and then he gives you the code


00:19:59.900 --> 00:20:02.900
that he wrote to control all this.


00:20:02.900 --> 00:20:05.900
I find it quite interesting. It makes me want to think about hardware projects I can attempt.


00:20:05.900 --> 00:20:08.900
Yeah, it doesn't seem that out of reach, right? And it's not too expensive.


00:20:08.900 --> 00:20:11.620
One of the things that I think is really challenging


00:20:11.620 --> 00:20:13.280
about these hardware projects,


00:20:13.280 --> 00:20:15.360
and Adafruit makes it better,


00:20:15.360 --> 00:20:16.740
because they have all these options,


00:20:16.740 --> 00:20:18.120
but I'm like, all right,


00:20:18.120 --> 00:20:20.160
maybe this microcontroller thing would work,


00:20:20.160 --> 00:20:22.360
and it's $10, and I probably need a battery.


00:20:22.360 --> 00:20:23.820
I don't even know how to hook the battery


00:20:23.820 --> 00:20:26.720
to the microcontroller, and then I need the GPS thing,


00:20:26.720 --> 00:20:28.860
but will that hook on this, or do I need a board?


00:20:28.860 --> 00:20:29.960
It's just like all the little parts,


00:20:29.960 --> 00:20:31.720
I'm like, what even goes together?


00:20:31.720 --> 00:20:33.080
And so one of the cool things is,


00:20:33.080 --> 00:20:35.080
it's like, here are the seven things I used, right?


00:20:35.080 --> 00:20:35.920
- Yeah. - Yeah, that's cool.


00:20:35.920 --> 00:20:37.580
- Yeah, so it makes it approachable,


00:20:37.580 --> 00:20:39.900
and there are tons of tutorials as well


00:20:39.900 --> 00:20:42.340
for the beginners who want to get into hardware.


00:20:42.340 --> 00:20:44.340
So I think, I'm pretty sure once you learn


00:20:44.340 --> 00:20:46.860
like the basics of what works with what,


00:20:46.860 --> 00:20:49.340
I think you can do similar things


00:20:49.340 --> 00:20:50.540
to what he's done in this tutorial.


00:20:50.540 --> 00:20:51.360
- Yeah, that's cool.


00:20:51.360 --> 00:20:53.400
So if you wanted to like go skiing


00:20:53.400 --> 00:20:56.620
and have a little trace of every bit you've done,


00:20:56.620 --> 00:20:58.420
you could just throw it into your backpack or whatever


00:20:58.420 --> 00:21:00.220
and just at the end of the day,


00:21:00.220 --> 00:21:02.940
it goes for like four days or something on its battery,


00:21:02.940 --> 00:21:04.420
it's got a little SD card, right?


00:21:04.420 --> 00:21:06.100
Take the little SD card out and you just,


00:21:06.100 --> 00:21:07.940
you have all your data, you do whatever you want with it.


00:21:07.940 --> 00:21:08.820
Sounds fun. - Yeah.


00:21:08.820 --> 00:21:11.580
- Nice, so let me wrap up our main items here


00:21:11.580 --> 00:21:14.540
with a little article that folks can use


00:21:14.540 --> 00:21:17.420
to maybe make a case for using Python


00:21:17.420 --> 00:21:20.320
or learning Python at your organization or for yourself.


00:21:20.320 --> 00:21:22.940
And it's called 10 Reasons Python is Good to Learn.


00:21:22.940 --> 00:21:25.120
And pretty straightforward.


00:21:25.120 --> 00:21:27.660
So, obviously Python is popular.


00:21:27.660 --> 00:21:31.080
If you go and throw Python and all the other major languages


00:21:31.080 --> 00:21:35.060
into Stack Overflow trends, it's ridiculous.


00:21:35.060 --> 00:21:36.060
I did this recently.


00:21:36.060 --> 00:21:41.340
A couple years ago, Stack Overflow covered this and talked about, they wrote an article


00:21:41.340 --> 00:21:45.300
called "The Incredible Growth of Python" and they predicted Python just blowing past JavaScript


00:21:45.300 --> 00:21:46.300
and Java and all that.


00:21:46.300 --> 00:21:49.540
It just really going and the others kind of going and flattening off.


00:21:49.540 --> 00:21:54.060
If you go and put those same things into Stack Overflow Trends Now, Python is even more popular


00:21:54.060 --> 00:21:56.980
than they predicted and the other ones are going down more than they predicted.


00:21:56.980 --> 00:21:57.980
It's ridiculous.


00:21:57.980 --> 00:21:59.580
And so the question kind of becomes why?


00:21:59.580 --> 00:22:03.140
And I think that this article touches on some of them.


00:22:03.140 --> 00:22:06.660
But before I talk about it really quickly, I just wanted to throw out this idea that


00:22:06.660 --> 00:22:07.660
I have.


00:22:07.660 --> 00:22:10.620
And it's that Python is a full spectrum language.


00:22:10.620 --> 00:22:15.300
And this is an idea I'm trying to popularize about why Python is popular.


00:22:15.300 --> 00:22:21.660
So on one hand, maybe, let's think of like a scientist, a biologist, or physicist, or


00:22:21.660 --> 00:22:25.540
somebody who's, they don't think of themselves as a programmer, let's just go with biology.


00:22:25.540 --> 00:22:31.260
But the person has all this data and they can't properly analyze it in say Excel.


00:22:31.260 --> 00:22:33.620
So they got to use some kind of programming,


00:22:33.620 --> 00:22:36.260
sort of in quotes, thing to work with it.


00:22:36.260 --> 00:22:37.780
One option is they could use MATLAB,


00:22:37.780 --> 00:22:39.820
but MATLAB's like thousands of dollars,


00:22:39.820 --> 00:22:44.260
like $800 a year continuously, plus all the add-ons.


00:22:44.260 --> 00:22:46.620
And the other thing is you can't build real apps


00:22:46.620 --> 00:22:48.240
with those kinds of projects, right?


00:22:48.240 --> 00:22:51.180
Like nobody builds YouTube with MATLAB


00:22:51.180 --> 00:22:53.220
or Windows with MATLAB.


00:22:53.220 --> 00:22:55.820
They just, it just doesn't do that.


00:22:55.820 --> 00:22:57.460
On the other hand, you could pick other things


00:22:57.460 --> 00:22:58.600
that can do those sorts of things,


00:22:58.600 --> 00:23:00.920
like C++ or .NET or whatever.


00:23:00.920 --> 00:23:03.140
and you're hit right from the beginning


00:23:03.140 --> 00:23:04.220
with all the complexity.


00:23:04.220 --> 00:23:06.540
Like the biologists, instead of just being able to


00:23:06.540 --> 00:23:08.800
add a reference to a couple libraries,


00:23:08.800 --> 00:23:11.540
not even write a function, just write like 10 lines of


00:23:11.540 --> 00:23:14.060
just straight in the script Python code


00:23:14.060 --> 00:23:16.540
that solves your problem, that would be Python.


00:23:16.540 --> 00:23:18.300
In say .NET, you gotta have a namespace,


00:23:18.300 --> 00:23:19.740
you gotta have a static class,


00:23:19.740 --> 00:23:20.940
you gotta have a public static void,


00:23:20.940 --> 00:23:22.220
you gotta have like all the compiling,


00:23:22.220 --> 00:23:23.940
like all that stuff, you know, it's just,


00:23:23.940 --> 00:23:25.220
it hits you right from the beginning


00:23:25.220 --> 00:23:27.500
that's there to build these major apps.


00:23:27.500 --> 00:23:29.820
And so I think Python, one of the reasons it's so popular


00:23:29.820 --> 00:23:31.860
and bringing in people from these sort of edge cases


00:23:31.860 --> 00:23:33.300
of programming and computation


00:23:33.300 --> 00:23:35.280
is they can start really easy,


00:23:35.280 --> 00:23:36.420
but then over time,


00:23:36.420 --> 00:23:37.860
they just add a little more and a little more,


00:23:37.860 --> 00:23:39.260
and all of a sudden,


00:23:39.260 --> 00:23:41.420
they're like, "Oh, I just actually used machine learning


00:23:41.420 --> 00:23:44.060
"to study ancient manuscripts with Python,


00:23:44.060 --> 00:23:45.900
"but I'm not even a developer.


00:23:45.900 --> 00:23:47.260
"What just happened?"


00:23:47.260 --> 00:23:48.660
What do you think about this idea, Anthony?


00:23:48.660 --> 00:23:51.540
- Yeah, I think that's why people,


00:23:51.540 --> 00:23:54.860
like especially people who have absolutely no background


00:23:54.860 --> 00:23:55.700
in programming,


00:23:55.700 --> 00:23:58.580
like what I notice is when they look at Python,


00:23:58.580 --> 00:23:59.900
they feel they can understand it.


00:23:59.900 --> 00:24:02.340
Whereas when they look at something like JavaScript


00:24:02.340 --> 00:24:06.780
or C or pretty much anything else, it looks difficult.


00:24:06.780 --> 00:24:09.640
It could be the exact same, accomplish the same thing,


00:24:09.640 --> 00:24:11.780
but Python just looks more approachable.


00:24:11.780 --> 00:24:14.060
You can kind of read it and understand what's going on.


00:24:14.060 --> 00:24:15.500
So people love it for that.


00:24:15.500 --> 00:24:18.380
And I think that's why so many people new to programming


00:24:18.380 --> 00:24:19.340
go with Python first.


00:24:19.340 --> 00:24:21.140
- Right, it draws them into like,


00:24:21.140 --> 00:24:22.900
oh, hey, I can actually program in Python.


00:24:22.900 --> 00:24:24.640
But then they grow into real programmers


00:24:24.640 --> 00:24:27.100
doing real cool stuff with scientific libraries


00:24:27.100 --> 00:24:30.980
other things or Flask or whatever and then they're kind of hooked right then


00:24:30.980 --> 00:24:33.580
they're in that space and I think that's part of the secret of Python's growth


00:24:33.580 --> 00:24:37.360
but let me go through my listicle here nonetheless so the ten


00:24:37.360 --> 00:24:41.460
reasons that they claim in this article that Python's good to learn is it's free


00:24:41.460 --> 00:24:46.620
and open source obviously nice it's popular loved and wanted hat tip to the


00:24:46.620 --> 00:24:52.660
Stack Overflow survey where they asked those exact questions who uses this who


00:24:52.660 --> 00:24:55.940
loves the technology they use and who wants to use some technology they're not


00:24:55.940 --> 00:24:57.700
and Python always ranks high there.


00:24:57.700 --> 00:25:00.260
It has a friendly and devoted community, of course,


00:25:00.260 --> 00:25:03.140
elegant and concise syntax, not all those semicolons


00:25:03.140 --> 00:25:06.660
and curly braces and type specifications.


00:25:06.660 --> 00:25:10.260
It's multi-platform, for most of the platforms at least.


00:25:10.260 --> 00:25:12.420
Supports multiple programming paradigms,


00:25:12.420 --> 00:25:15.140
just like no functions straight down the script


00:25:15.140 --> 00:25:19.940
versus actual functions versus functional programming


00:25:19.940 --> 00:25:22.420
versus object-oriented programming and so on.


00:25:22.420 --> 00:25:25.780
Has tons of libraries, built-in and third-party.


00:25:25.780 --> 00:25:29.780
It's a general purpose programming library unlike my example with MATLAB, right?


00:25:29.780 --> 00:25:33.780
You can do stuff in it till you hit the limit that you just can't do anything else.


00:25:33.780 --> 00:25:35.780
And then it also integrates with other languages.


00:25:35.780 --> 00:25:37.780
C, C++, it's got tons of integration there.


00:25:37.780 --> 00:25:39.780
It has Rust integration.


00:25:39.780 --> 00:25:42.780
It has .NET integration and a bunch of cool stuff like that.


00:25:42.780 --> 00:25:46.780
So anyway, there's a bit of a take on why Python is good to learn


00:25:46.780 --> 00:25:48.780
or why people are adopting it.


00:25:48.780 --> 00:25:52.780
All right. Well, Anthony, that does it for our main items.


00:25:52.780 --> 00:25:54.660
We've got a couple of, a little bit of time


00:25:54.660 --> 00:25:56.060
to just talk about a few extra things.


00:25:56.060 --> 00:25:57.860
Maybe you start first and tell us about


00:25:57.860 --> 00:25:59.340
what's going on in your world.


00:25:59.340 --> 00:26:02.080
- I'm from prettyprinted.com and mostly the YouTube channel.


00:26:02.080 --> 00:26:04.660
So, URLs for YouTube are a little tricky.


00:26:04.660 --> 00:26:06.960
So if you just go to YouTube and search for Pretty Printed,


00:26:06.960 --> 00:26:08.120
you'll find my channel.


00:26:08.120 --> 00:26:10.740
And I basically talk about Python web development there.


00:26:10.740 --> 00:26:12.540
I occasionally talk about other topics,


00:26:12.540 --> 00:26:15.580
but it's mostly Flask and Django that I talk about there.


00:26:15.580 --> 00:26:18.860
And then on my website, I have courses that I have available


00:26:18.860 --> 00:26:20.500
and I'm also trying to write more.


00:26:20.500 --> 00:26:23.900
So hopefully you'll see some articles there soon as well.


00:26:23.900 --> 00:26:25.340
So that's what I do.


00:26:25.340 --> 00:26:28.020
And if you watch my videos, that would be great.


00:26:28.020 --> 00:26:28.860
- Yeah, awesome.


00:26:28.860 --> 00:26:29.940
Yeah, you're doing good work.


00:26:29.940 --> 00:26:31.900
So I have four quick announcements,


00:26:31.900 --> 00:26:34.340
maybe three announcements and a follow up there.


00:26:34.340 --> 00:26:38.300
So I was just a guest on the .NET Rocks podcast


00:26:38.300 --> 00:26:40.540
talking about Python for the .NET developer.


00:26:40.540 --> 00:26:42.380
So if people are into .NET


00:26:42.380 --> 00:26:45.380
and they want to hear what does the world of Python


00:26:45.380 --> 00:26:47.020
look like from that perspective,


00:26:47.020 --> 00:26:49.740
maybe you're working at a company


00:26:49.740 --> 00:26:51.900
mostly it's a .NET shop, but you really love Python,


00:26:51.900 --> 00:26:54.280
right, check that out, share that with your coworkers


00:26:54.280 --> 00:26:56.220
about why they should maybe pay a little more attention.


00:26:56.220 --> 00:26:59.860
So I got a link to that episode that just came out yesterday.


00:26:59.860 --> 00:27:01.820
I got a link to that in the show notes.


00:27:01.820 --> 00:27:03.660
And then I also kind of tied together with that


00:27:03.660 --> 00:27:05.580
these sort of one precipitated the other


00:27:05.580 --> 00:27:08.540
is I've just released a new nine hour course


00:27:08.540 --> 00:27:10.620
called Python for the .NET Developer.


00:27:10.620 --> 00:27:12.460
So the goal is to help all these .NET people


00:27:12.460 --> 00:27:15.300
take their skills like they know how to talk to databases


00:27:15.300 --> 00:27:17.780
using any framework or create websites using ASP.NET,


00:27:17.780 --> 00:27:21.180
like recreate all of that, take those examples


00:27:21.180 --> 00:27:24.680
and then recreate them in Flask or SQLAlchemy or so on.


00:27:24.680 --> 00:27:27.780
So that's a really fun course if you're into the .NET space.


00:27:27.780 --> 00:27:30.620
Also have another course, Python for Decision Makers.


00:27:30.620 --> 00:27:32.460
Like if you're thinking about whether Python


00:27:32.460 --> 00:27:34.540
makes sense for your organization or your team,


00:27:34.540 --> 00:27:35.700
check that out as well.


00:27:35.700 --> 00:27:37.140
Links to all those are in the show notes.


00:27:37.140 --> 00:27:39.060
And then finally, a couple episodes ago,


00:27:39.060 --> 00:27:41.540
I was talking to Brian saying,


00:27:41.540 --> 00:27:45.260
one of the reasons I call my virtual environment folder,


00:27:45.260 --> 00:27:48.340
V-E-E-N-V is it doesn't show up in Finder.


00:27:48.340 --> 00:27:50.220
And when I'm cruising through Finder


00:27:50.220 --> 00:27:53.020
and I get to one of my courses or one of my old projects,


00:27:53.020 --> 00:27:54.480
I wanna be able to just look really quickly,


00:27:54.480 --> 00:27:56.300
say, does this have a virtual environment


00:27:56.300 --> 00:27:58.420
or do I need to hop over to the terminal


00:27:58.420 --> 00:27:59.740
and create one real quick?


00:27:59.740 --> 00:28:02.340
And by default, if it's .env,


00:28:02.340 --> 00:28:04.460
which many times it has been, it's hidden.


00:28:04.460 --> 00:28:05.740
You don't know, you've gotta go in there


00:28:05.740 --> 00:28:08.180
and go into the terminal and just find out.


00:28:08.180 --> 00:28:10.700
It's not hard, but it's not like immediately obvious.


00:28:10.700 --> 00:28:12.580
It requires a little step, right?


00:28:12.580 --> 00:28:14.820
So many people, too many to name,


00:28:14.820 --> 00:28:16.660
I mean, many people sent me this message,


00:28:16.660 --> 00:28:17.780
which kind of blew my mind.


00:28:17.780 --> 00:28:20.060
It said, if you're in Finder,


00:28:20.060 --> 00:28:21.780
and you want to see hidden files,


00:28:21.780 --> 00:28:23.660
you hit Command + Shift + Dot,


00:28:23.660 --> 00:28:25.980
and it will refresh with all the hidden files.


00:28:25.980 --> 00:28:26.980
So you see your dot files,


00:28:26.980 --> 00:28:28.100
and your dot folders and whatnot.


00:28:28.100 --> 00:28:29.160
Did you know about this, Anthony?


00:28:29.160 --> 00:28:31.180
- I did not, because I do not use Mac.


00:28:31.180 --> 00:28:32.400
(laughing)


00:28:32.400 --> 00:28:34.460
- Right, so this is not a problem that you have, right?


00:28:34.460 --> 00:28:35.560
What do you use, Windows?


00:28:35.560 --> 00:28:36.500
- Yes, Windows.


00:28:36.500 --> 00:28:37.340
- Yeah, cool.


00:28:37.340 --> 00:28:38.780
- And I use the Linux subsystem.


00:28:38.780 --> 00:28:39.600
- Nice.


00:28:39.600 --> 00:28:41.800
Yeah, and in Windows, this is more of a setting, right?


00:28:41.800 --> 00:28:44.340
You set in the file explorer,


00:28:44.340 --> 00:28:48.300
say I would like to see hidden files or not see hidden files but in Mac there's


00:28:48.300 --> 00:28:51.580
no such setting so apparently it's a hotkey. All right well that's all my


00:28:51.580 --> 00:28:54.820
announcements as well. We always close this out at the end with a joke so are


00:28:54.820 --> 00:28:57.700
you ready for a joke? By the way I also would like to point out that they're not


00:28:57.700 --> 00:29:03.540
always funny but we always try. Okay I'm ready. All right so here speaking of


00:29:03.540 --> 00:29:09.220
different languages and all that here's a failed pickup line so this girl's


00:29:09.220 --> 00:29:12.940
hanging out with her friends at a bar or just hanging around and some guys like


00:29:12.940 --> 00:29:16.540
"Wow, I'd really like to meet her. Maybe I could come up and say something clever.


00:29:16.540 --> 00:29:20.040
She looks like she might be a programmer. Maybe I'll say some computer thing."


00:29:20.040 --> 00:29:24.040
Comes up and he says, you know, maybe he's been watching too much of Jerry McGuire.


00:29:24.040 --> 00:29:26.640
He's like, "You're the semicolon to my line of code."


00:29:26.640 --> 00:29:29.640
She responds, "Get out of your creep. I code in Python."


00:29:29.640 --> 00:29:31.640
[laughter]


00:29:31.640 --> 00:29:34.640
You know, that might be the reason number 11 to learn Python.


00:29:34.640 --> 00:29:35.640
Yes, exactly.


00:29:35.640 --> 00:29:36.640
You can come up with better pickup lines.


00:29:36.640 --> 00:29:39.140
Exactly. You don't have to take that semicolon thing.


00:29:39.140 --> 00:29:40.140
[laughter]


00:29:40.140 --> 00:29:42.140
Yeah, it's pretty funny. All right.


00:29:42.140 --> 00:29:45.660
Well, Anthony, thank you for filling in for Brian and being here today.


00:29:45.660 --> 00:29:48.740
It was great to spend some time with you and talk about these ideas.


00:29:48.740 --> 00:29:49.740
And thanks for having me here.


00:29:49.740 --> 00:29:50.740
You bet.


00:29:50.740 --> 00:29:51.740
Bye.


00:29:51.740 --> 00:29:52.740
Bye.


00:29:52.740 --> 00:29:53.740
Thank you for listening to Python Bytes.


00:29:53.740 --> 00:29:54.740
Follow the show on Twitter via @PythonBytes.


00:29:54.740 --> 00:29:58.220
That's Python Bytes as in B-Y-T-E-S.


00:29:58.220 --> 00:30:01.340
And get the full show notes at PythonBytes.fm.


00:30:01.340 --> 00:30:05.060
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:30:05.060 --> 00:30:06.060
way.


00:30:06.060 --> 00:30:08.260
We're always on the lookout for sharing something cool.


00:30:08.260 --> 00:30:11.540
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:30:11.540 --> 00:30:14.620
Thank you for listening and sharing this podcast with your friends and colleagues.

