
00:00:00.000 --> 00:00:04.800
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.800 --> 00:00:10.400
This is episode 195, recorded August 12th, 2020.


00:00:10.400 --> 00:00:11.200
I'm Michael Kennedy.


00:00:11.200 --> 00:00:12.320
And I am Brian Okken.


00:00:12.320 --> 00:00:15.440
And this episode is brought to you by all the cool work that we're doing.


00:00:15.440 --> 00:00:16.800
Tell you more about this.


00:00:16.800 --> 00:00:20.400
Right now, I kind of just want to think about paying attention to stuff, Brian.


00:00:20.400 --> 00:00:22.720
Maybe watching things.


00:00:22.720 --> 00:00:24.080
Oh, like look closer.


00:00:24.080 --> 00:00:25.680
Yes, watch carefully.


00:00:25.680 --> 00:00:30.060
So actually this thing sent over by Preston Daniel,


00:00:30.060 --> 00:00:32.660
he sends us a bunch of good topics and links.


00:00:32.660 --> 00:00:34.940
And this one's called Watchdog, and maybe you've heard of it.


00:00:34.940 --> 00:00:38.380
It's the foundation of some web frameworks, for example,


00:00:38.380 --> 00:00:40.320
and things like that to know if, say,


00:00:40.320 --> 00:00:42.340
a file has changed that you're editing.


00:00:42.340 --> 00:00:44.460
Does it need to auto restart the website?


00:00:44.460 --> 00:00:46.500
So when you refresh it, it actually reruns it,


00:00:46.500 --> 00:00:47.600
things like that.


00:00:47.600 --> 00:00:50.380
But Watchdog is a cool little library


00:00:50.380 --> 00:00:52.660
that you can use just on your own


00:00:52.660 --> 00:00:55.140
to know if something has changed.


00:00:55.140 --> 00:00:57.540
So basically it's a simple little API.


00:00:57.540 --> 00:01:01.260
You create this thing called an observer and you tell it to just.


00:01:01.260 --> 00:01:03.300
Start watching in some way.


00:01:03.300 --> 00:01:04.220
You give it a path.


00:01:04.220 --> 00:01:07.900
It can recursively look, you can give it like a pattern or whatnot.


00:01:07.900 --> 00:01:12.940
And it will say, just basically start firing events back on this observer.


00:01:12.940 --> 00:01:18.060
Thing when stuff happens, files created, files, deleted, files, modified, and so on.


00:01:18.060 --> 00:01:18.580
Nice.


00:01:18.580 --> 00:01:19.540
This is cool.


00:01:19.540 --> 00:01:19.860
Yeah.


00:01:19.860 --> 00:01:20.720
Isn't that cool?


00:01:20.720 --> 00:01:25.720
It also comes with a CLI script called watch me do.


00:01:25.720 --> 00:01:28.200
And what you can do with watch me do


00:01:28.200 --> 00:01:32.400
is you just type watch me do, all one word, log.


00:01:32.400 --> 00:01:34.360
And wherever your current working directory is


00:01:34.360 --> 00:01:37.040
when you type that, it will just start watching


00:01:37.040 --> 00:01:39.020
for files that change right there,


00:01:39.020 --> 00:01:40.200
just like on the command line.


00:01:40.200 --> 00:01:41.040
- Oh, okay, cool.


00:01:41.040 --> 00:01:43.520
- So if you're, you don't wanna write a program,


00:01:43.520 --> 00:01:44.800
but you just happen to be somewhere


00:01:44.800 --> 00:01:46.240
and you're like, what is happening?


00:01:46.240 --> 00:01:48.000
Like what files are being modified


00:01:48.000 --> 00:01:49.640
or being touched or being changed here?


00:01:49.640 --> 00:01:51.920
And you can just type that and boom, there it goes.


00:01:51.920 --> 00:01:52.720
That's cool.


00:01:52.720 --> 00:01:52.920
Right?


00:01:52.920 --> 00:01:54.040
That actually is really cool.


00:01:54.040 --> 00:01:54.320
Yeah.


00:01:54.320 --> 00:01:59.240
We have a build process that part of it is mucking up some directories and it


00:01:59.240 --> 00:02:00.760
kind of cool to use something like this.


00:02:00.760 --> 00:02:02.120
Yeah, absolutely.


00:02:02.120 --> 00:02:06.460
And so you could just pip install watchdog and then just type watch me do


00:02:06.460 --> 00:02:08.800
space log wherever you want it to know.


00:02:08.800 --> 00:02:13.160
There's a bunch of other things it does that you can pass commands and stuff.


00:02:13.160 --> 00:02:17.520
I suppose like you could ask it to recursively watch or whatever, but yeah,


00:02:17.520 --> 00:02:19.120
I haven't had a use case for that.


00:02:19.120 --> 00:02:22.000
So, but yeah, this is a cool recommendation from Preston.


00:02:22.000 --> 00:02:22.840
- Yeah, nice.


00:02:22.840 --> 00:02:26.320
- The example that I think I could possibly use it for is,


00:02:26.320 --> 00:02:28.560
you know, one of the things that we do


00:02:28.560 --> 00:02:31.280
that makes pythonbytes.fm,


00:02:31.280 --> 00:02:33.960
as well as all the Talk Python, Talk Python Training sites,


00:02:33.960 --> 00:02:36.920
ridiculously fast as a user,


00:02:36.920 --> 00:02:40.040
is we don't require you to re-download


00:02:40.040 --> 00:02:42.200
almost any of the static content.


00:02:42.200 --> 00:02:45.600
Anything JavaScript, any image in the entire site,


00:02:45.600 --> 00:02:47.320
you know, CSS, all of those things,


00:02:47.320 --> 00:02:50.020
they're cached for a year, right?


00:02:50.020 --> 00:02:53.680
And so a problem with caching stuff for a long time


00:02:53.680 --> 00:02:58.160
is if you redeploy a new version, something's wacky, right?


00:02:58.160 --> 00:02:59.040
Something is really weird.


00:02:59.040 --> 00:03:01.700
Like I have this problem with Twitter and Firefox.


00:03:01.700 --> 00:03:03.760
I'll go there and periodically it'll just say


00:03:03.760 --> 00:03:05.720
something went wrong, can't load it.


00:03:05.720 --> 00:03:09.000
And a command R, a hard refresh always fixes it


00:03:09.000 --> 00:03:10.920
because there's probably some JavaScript file


00:03:10.920 --> 00:03:13.560
that's like out of sequence, some other part of some API


00:03:13.560 --> 00:03:15.640
or some random thing like that.


00:03:15.640 --> 00:03:18.320
And so what we do to make sure that never happens


00:03:18.320 --> 00:03:21.440
is we look at every one of those static files


00:03:21.440 --> 00:03:22.800
that we have a year long cache on,


00:03:22.800 --> 00:03:24.360
and we read it and we create the hash


00:03:24.360 --> 00:03:27.080
and we put question mark hash equals


00:03:27.080 --> 00:03:29.860
the hash of the file on the end of it.


00:03:29.860 --> 00:03:32.840
So that, you know, that's a separate file.


00:03:32.840 --> 00:03:35.900
If it ever changes, one character of it changes,


00:03:35.900 --> 00:03:38.760
the hash changes and it's now a totally separate thing


00:03:38.760 --> 00:03:40.400
in the web browser cache, right?


00:03:40.400 --> 00:03:41.480
Although this is perfect.


00:03:41.480 --> 00:03:44.160
The one drawback is to make things fast,


00:03:44.160 --> 00:03:46.680
you're not rehashing all the images on every request,


00:03:46.680 --> 00:03:50.040
is it just says, have I seen this file before?


00:03:50.040 --> 00:03:51.320
Do I already compute the hash?


00:03:51.320 --> 00:03:52.280
Just use it, right?


00:03:52.280 --> 00:03:54.840
So that's fine, but that means that little hash


00:03:54.840 --> 00:03:59.080
refresh trick only really works if I restart the website.


00:03:59.080 --> 00:04:02.240
If like say only a CSS file changed.


00:04:02.240 --> 00:04:05.360
I could use this watchdog to watch all the static files


00:04:05.360 --> 00:04:06.280
that we're hashing.


00:04:06.280 --> 00:04:09.960
If any of them change, just instantly recompute the hash.


00:04:09.960 --> 00:04:10.800
That's it.


00:04:10.800 --> 00:04:13.360
So that would allow me to do like push deploys


00:04:13.360 --> 00:04:15.680
of just static content changes


00:04:15.680 --> 00:04:18.000
without kicking the website at all.


00:04:18.000 --> 00:04:19.600
And it would just magically like


00:04:19.600 --> 00:04:21.140
redetect those and start rolling.


00:04:21.140 --> 00:04:23.480
I think I might start using Watchdog for that.


00:04:23.480 --> 00:04:25.360
Anyway, that's my use case that makes me excited.


00:04:25.360 --> 00:04:27.320
- And I'm glad you pronounced Watch-Me-Do


00:04:27.320 --> 00:04:28.720
because I looked at it and I went,


00:04:28.720 --> 00:04:30.840
Watch-Meadow, that's a weird name.


00:04:30.840 --> 00:04:33.800
- That is a weird, I think it's Watch-Me-Do.


00:04:33.800 --> 00:04:34.960
- Watch-Me-Do is better, yeah.


00:04:34.960 --> 00:04:37.440
- Yeah, you know what else is weird?


00:04:37.440 --> 00:04:40.000
Weird HTTP status codes.


00:04:40.000 --> 00:04:43.380
Like I'm very familiar with 400 bad requests.


00:04:43.380 --> 00:04:45.400
That's when somebody's created an API


00:04:45.400 --> 00:04:47.160
and I talked to it badly


00:04:47.160 --> 00:04:49.280
and they've created the API correctly.


00:04:49.280 --> 00:04:53.280
Or I get a 500 where their stuff has crashed


00:04:53.280 --> 00:04:54.580
because I sent them something bad


00:04:54.580 --> 00:04:56.820
and they've written their API badly.


00:04:56.820 --> 00:05:00.820
But somewhere in between there lives some odd thing.


00:05:00.820 --> 00:05:01.660
Right?


00:05:01.660 --> 00:05:04.540
- Yes. Have you heard of error code 418 before?


00:05:04.540 --> 00:05:05.720
- I'm a teapot.


00:05:05.720 --> 00:05:07.360
(laughing)


00:05:07.360 --> 00:05:08.680
- This is just great.


00:05:08.680 --> 00:05:10.680
- I love it, I love it.


00:05:10.680 --> 00:05:13.460
- Status code 418, I'm a teapot.


00:05:13.460 --> 00:05:16.320
Any attempt to brew a coffee with a teapot


00:05:16.320 --> 00:05:19.040
should result in an error code 418, I'm a teapot.


00:05:19.040 --> 00:05:22.160
Resulting entity may be short and stout.


00:05:22.160 --> 00:05:23.120
(laughing)


00:05:23.120 --> 00:05:26.240
- So resulting entity may be short and stout, I love it.


00:05:26.240 --> 00:05:28.600
- This actually got brought up in a conversation


00:05:28.600 --> 00:05:30.240
I was having this morning.


00:05:30.240 --> 00:05:33.160
A colleague of mine, Andy Howe, suggested it.


00:05:33.160 --> 00:05:36.380
He said, so when is Python 3.9 gonna come out?


00:05:36.380 --> 00:05:38.240
Because hasn't it been a while?


00:05:38.240 --> 00:05:39.880
And as a reminder to everybody,


00:05:39.880 --> 00:05:43.680
Python 3.9 release, or the release candidate one,


00:05:43.680 --> 00:05:46.960
or RCCR, or whatever, is out now.


00:05:46.960 --> 00:05:47.920
So you can play with it.


00:05:47.920 --> 00:05:50.960
It's probably, I've been using it, it's safe to use,


00:05:50.960 --> 00:05:55.120
but the schedule for the release,


00:05:55.120 --> 00:05:58.200
final release is in October, I believe.


00:05:58.200 --> 00:06:00.680
And then after that, bug fixes releases


00:06:00.680 --> 00:06:03.480
every four months are planned, if there are any.


00:06:03.480 --> 00:06:08.440
Andy said, you know, my favorite enhancement for Python 3.9


00:06:08.440 --> 00:06:11.520
is this 4.0.1.8 ima-tpot.


00:06:11.520 --> 00:06:13.940
This is new in Python 3.9.


00:06:13.940 --> 00:06:18.940
HTTP library was missing the status code 4.0.1.8 ima-tpot


00:06:18.940 --> 00:06:21.400
and now it has it in there.


00:06:21.400 --> 00:06:23.200
But wow, I've got some links for you


00:06:23.200 --> 00:06:25.820
because in the show notes,


00:06:25.820 --> 00:06:29.480
this is referenced from HTCPCP,


00:06:29.480 --> 00:06:33.060
which is Hypertext Coffee Pot Control Protocol.


00:06:33.060 --> 00:06:38.060
And this came out in 1998 as an April Fool's joke.


00:06:38.060 --> 00:06:40.660
And then it's kind of part of it now.


00:06:40.660 --> 00:06:43.540
So it's part of HTTP, sort of.


00:06:43.540 --> 00:06:45.300
Another fun error code.


00:06:45.300 --> 00:06:50.300
So HT, the document, the entire document for HTCPCP


00:06:50.300 --> 00:06:53.700
says that most error codes share the same status codes


00:06:53.700 --> 00:06:55.300
as HTTP.


00:06:55.300 --> 00:06:59.460
However, 4018 is separate, but also now HTTP


00:06:59.460 --> 00:07:00.620
can use that also.


00:07:00.620 --> 00:07:03.940
but also 406 not acceptable.


00:07:03.940 --> 00:07:08.780
So 406 is this response code may be returned


00:07:08.780 --> 00:07:10.380
if the operator of the coffee pot


00:07:10.380 --> 00:07:13.440
cannot comply with the accept addition request


00:07:13.440 --> 00:07:15.380
unless the request was in the head.


00:07:15.380 --> 00:07:18.140
So, and it should return


00:07:18.140 --> 00:07:21.100
the list of possible coffee additions.


00:07:21.100 --> 00:07:23.400
This is bizarre that this is in the world.


00:07:23.400 --> 00:07:25.820
- This is awesome.


00:07:25.820 --> 00:07:26.640
I really love it.


00:07:26.640 --> 00:07:27.820
I don't realize, I didn't realize


00:07:27.820 --> 00:07:29.700
it had been taken so far as this.


00:07:29.700 --> 00:07:30.860
This is great.


00:07:30.860 --> 00:07:33.060
And if you go and look at the thing you linked to,


00:07:33.060 --> 00:07:36.340
the Hypertext Coffee Pot Control Protocol,


00:07:36.340 --> 00:07:41.340
HTC PCP/1.0, the whole memo describes so much of this thing.


00:07:41.340 --> 00:07:47.300
And it even talks about things like crossing firewalls.


00:07:47.300 --> 00:07:49.660
Like modern coffee pots do not use fire,


00:07:49.660 --> 00:07:52.620
however, a firewall is useful in protecting it.


00:07:52.620 --> 00:07:55.580
It also addresses the security considerations.


00:07:55.580 --> 00:07:57.520
Anyone who gets between me and my morning coffee


00:07:57.520 --> 00:07:58.820
should be insecure.


00:07:58.820 --> 00:08:01.400
Unmoderated access to unprotected coffee pots


00:08:01.400 --> 00:08:03.620
from internet users might lead to several kinds


00:08:03.620 --> 00:08:05.740
of denial of coffee service attacks.


00:08:05.740 --> 00:08:07.620
The improper use of filtration devices


00:08:07.620 --> 00:08:10.100
might admit Trojan grounds.


00:08:10.100 --> 00:08:12.420
Filtration is not a good virus protection method.


00:08:12.420 --> 00:08:13.500
I mean, it just goes on and on.


00:08:13.500 --> 00:08:14.760
It's beautiful.


00:08:14.760 --> 00:08:17.940
- Yes, and there's a security layer


00:08:17.940 --> 00:08:21.580
that I forgot about that's funny too,


00:08:21.580 --> 00:08:23.980
that's part of this, but I can't find it right now.


00:08:23.980 --> 00:08:24.820
- Yeah, no worries.


00:08:24.820 --> 00:08:27.780
I threw in a quick link also to this place


00:08:27.780 --> 00:08:31.380
called htpstatuses.com,


00:08:31.380 --> 00:08:33.980
which this is a slightly more serious take,


00:08:33.980 --> 00:08:36.700
although it does of course include the coffee pot.


00:08:36.700 --> 00:08:37.980
But it's just, if you were like,


00:08:37.980 --> 00:08:41.660
what the heck should I be doing in this situation?


00:08:41.660 --> 00:08:42.900
Like here's the error codes here,


00:08:42.900 --> 00:08:44.740
so on if you just click on them,


00:08:44.740 --> 00:08:46.900
it gives you a like a really nice summary.


00:08:46.900 --> 00:08:48.620
Like if you click on 403, for example,


00:08:48.620 --> 00:08:50.260
it talks about when it's used


00:08:50.260 --> 00:08:52.700
and when it's like how it compares to 404.


00:08:52.700 --> 00:08:56.980
And then also how that reference code is set up


00:08:56.980 --> 00:08:59.020
as an enumeration in different languages.


00:08:59.020 --> 00:09:02.820
So for example, in Go, it's HTTP.status forbidden.


00:09:02.820 --> 00:09:04.460
In Rails, it's colon forbidden.


00:09:04.460 --> 00:09:08.100
And in Python 3, it's HTTP.httpstatus.forbidden


00:09:08.100 --> 00:09:08.940
and things like that.


00:09:08.940 --> 00:09:12.380
So it tells you like the language version


00:09:12.380 --> 00:09:14.020
instead of typing it all in yourself


00:09:14.020 --> 00:09:16.300
and having magic strings and numbers everywhere.


00:09:16.300 --> 00:09:18.260
- Yeah, so it does look like,


00:09:18.260 --> 00:09:19.400
I don't know what Symfony is,


00:09:19.400 --> 00:09:24.400
but both Symfony and Go do also support 418 status.


00:09:26.120 --> 00:09:28.240
- Beautiful, we're on par with Go


00:09:28.240 --> 00:09:29.720
in terms of the internet now.


00:09:29.720 --> 00:09:31.000
Very good, that was a good one.


00:09:31.000 --> 00:09:33.280
I almost could have been the joke, but I like it.


00:09:33.280 --> 00:09:34.640
All right, also things that I like


00:09:34.640 --> 00:09:38.280
is that we get a chance to create amazing stuff


00:09:38.280 --> 00:09:40.640
to help people get better with Python out there.


00:09:40.640 --> 00:09:42.620
So over at Talk Python Training,


00:09:42.620 --> 00:09:45.240
we have three new courses coming very soon.


00:09:45.240 --> 00:09:47.260
We have Getting Started with Data Science,


00:09:47.260 --> 00:09:49.120
we have Moving from Excel to Python,


00:09:49.120 --> 00:09:52.900
and we have Diving into Python Memory Management


00:09:52.900 --> 00:09:55.040
and Optimizing Your Programs around that.


00:09:55.040 --> 00:09:57.940
All three of those are coming within probably a month or so.


00:09:57.940 --> 00:10:00.140
So if you want to get notified about that,


00:10:00.140 --> 00:10:03.020
just visit training.talkpython.fm.


00:10:03.020 --> 00:10:04.820
And right at the front, there's a little email place


00:10:04.820 --> 00:10:08.020
you can enter your email address to get notified.


00:10:08.020 --> 00:10:08.860
How about you?


00:10:08.860 --> 00:10:10.940
- I wanted to highlight Test Encode.


00:10:10.940 --> 00:10:13.500
So pytest 6 is out.


00:10:13.500 --> 00:10:16.980
And so Test Encode is the other podcast I do


00:10:16.980 --> 00:10:18.460
at testencode.com.


00:10:18.460 --> 00:10:20.700
And I had talked last week


00:10:20.700 --> 00:10:24.060
that there was going to be a pytest 6 episode.


00:10:24.060 --> 00:10:26.180
And instead of doing it just by myself,


00:10:26.180 --> 00:10:30.860
I contacted Anthony Sotilli and had him come on the show.


00:10:30.860 --> 00:10:34.060
And so we BS about stuff for about an hour,


00:10:34.060 --> 00:10:35.580
some of its actual content.


00:10:35.580 --> 00:10:37.600
So I'm really trying to get,


00:10:37.600 --> 00:10:39.780
I'd really like to have the shorter episodes on there,


00:10:39.780 --> 00:10:41.700
but you know, I get to talking with somebody


00:10:41.700 --> 00:10:43.020
and it's just fun, so.


00:10:43.020 --> 00:10:45.100
- Just keeps going, awesome.


00:10:45.100 --> 00:10:46.060
Yeah, it's definitely a good one.


00:10:46.060 --> 00:10:46.900
People should check it out.


00:10:46.900 --> 00:10:48.300
- What do we got next?


00:10:48.300 --> 00:10:50.420
- We talked about Pydantic, right?


00:10:50.420 --> 00:10:52.420
So Pydantic is a cool library.


00:10:52.420 --> 00:10:54.980
you know, it's something I really just need to start using.


00:10:54.980 --> 00:10:56.800
Like I haven't created any new projects


00:10:56.800 --> 00:10:59.200
that probably really deserve this,


00:10:59.200 --> 00:11:01.740
but I think it's definitely one of those things


00:11:01.740 --> 00:11:04.580
that I wanna start using 'cause it's just so slick.


00:11:04.580 --> 00:11:07.260
The ability to say, I have these models,


00:11:07.260 --> 00:11:09.660
they have these types, you can validate them,


00:11:09.660 --> 00:11:12.060
you can auto convert between them and so on, right?


00:11:12.060 --> 00:11:14.740
So we talked about that not too long ago actually.


00:11:14.740 --> 00:11:18.620
However, Andy Shapiro sent over a heads up


00:11:18.620 --> 00:11:22.060
about a new feature that's in the beta version of PyDandic


00:11:22.060 --> 00:11:25.580
that's coming that makes me pretty excited, actually.


00:11:25.580 --> 00:11:27.280
I don't know, we'll see how people feel about this,


00:11:27.280 --> 00:11:29.080
but I'm excited about it.


00:11:29.080 --> 00:11:31.540
I'm excited because I'm a fan of type hints.


00:11:31.540 --> 00:11:32.920
- Yeah, me too. - I love type hints.


00:11:32.920 --> 00:11:35.460
Yeah, I love them mostly because the way


00:11:35.460 --> 00:11:40.020
they make the editor help me write code.


00:11:40.020 --> 00:11:43.220
Instead of going and saying, oh, how do I do this thing


00:11:43.220 --> 00:11:45.260
with this library, right?


00:11:45.260 --> 00:11:48.820
If I just say the type of this thing is one of the objects


00:11:48.820 --> 00:11:51.380
out of that library and I hit dot, boom.


00:11:51.380 --> 00:11:53.140
the editor shows me all the stuff I can do.


00:11:53.140 --> 00:11:55.780
It just keeps me in flow and working on what I need to.


00:11:55.780 --> 00:11:58.580
So I love type hints mostly for that,


00:11:58.580 --> 00:12:00.340
but also for the validation.


00:12:00.340 --> 00:12:04.020
One of the things they are like, but they do not do,


00:12:04.020 --> 00:12:06.620
is they are not like static typing


00:12:06.620 --> 00:12:08.180
in other programming languages


00:12:08.180 --> 00:12:11.380
where somehow that verifies what's being passed, right?


00:12:11.380 --> 00:12:13.180
So like, for example, if I have a function,


00:12:13.180 --> 00:12:17.340
it says it takes an integer, an age colon int,


00:12:17.340 --> 00:12:19.080
and that's what it says it takes.


00:12:19.080 --> 00:12:22.680
But then I go and I write code and I give it quote seven instead of the number


00:12:22.680 --> 00:12:23.880
seven, that's fine.


00:12:23.880 --> 00:12:25.000
Python's like, yeah, that's cool.


00:12:25.000 --> 00:12:27.280
You probably don't know what you're doing, but whatever.


00:12:27.280 --> 00:12:28.080
We're just going to let it fly.


00:12:28.080 --> 00:12:28.360
Right?


00:12:28.360 --> 00:12:33.320
Well, with Pydantic, there's this new type annotation validator.


00:12:33.320 --> 00:12:37.920
And so what you can do is you can say for this function, it has type annotations


00:12:37.920 --> 00:12:39.520
and I want those to mean something.


00:12:39.520 --> 00:12:40.400
Okay.


00:12:40.400 --> 00:12:43.840
So it gives it basically that it's not runtime behavior in the static


00:12:43.840 --> 00:12:45.760
languages, it's a compile error, right?


00:12:46.400 --> 00:12:50.360
you argument string cannot be converted to enter whatever the compilation


00:12:50.360 --> 00:12:53.460
error happens to be, but it would give you the runtime equivalent.


00:12:53.460 --> 00:12:56.800
So all you have to do is you have a regular Python function and it has


00:12:56.800 --> 00:13:02.480
regular types, just like it would, you know, S colon, stir count, colon,


00:13:02.480 --> 00:13:03.660
int, that type of thing.


00:13:03.660 --> 00:13:06.460
And you can just work with it.


00:13:06.460 --> 00:13:09.060
It's a little bit smarter than the compiler.


00:13:09.060 --> 00:13:13.400
Maybe of say like C++ or C# though, in that, what do you do?


00:13:13.400 --> 00:13:18.280
you just say at validate arguments you give a decorator that validates the arguments.


00:13:18.280 --> 00:13:23.400
And not only does it validate but it will convert if it can. So for example, I'll put an example in


00:13:23.400 --> 00:13:28.520
our show notes, there's a function called repeat it takes a string and a number. And it's just


00:13:28.520 --> 00:13:34.760
going to echo out that string, however many times that number exists, right? So you can say repeat,


00:13:34.760 --> 00:13:40.360
quote, hello, comma three, and it'll print hello three times. Super simple. That passes the


00:13:40.360 --> 00:13:43.560
the validation precisely because it takes a string and an integer.


00:13:43.560 --> 00:13:48.700
But you can also say repeat hello, comma quote for, and it'll still print


00:13:48.700 --> 00:13:52.100
out hello four times because it can take the string for and make it an integer.


00:13:52.100 --> 00:13:53.740
For that's cool.


00:13:53.740 --> 00:13:54.080
Right.


00:13:54.080 --> 00:14:00.920
But if I say repeat, hello, comma, goodbye, boom, exception, validation


00:14:00.920 --> 00:14:05.700
error, you know, the value is not a valid integer type equals type error


00:14:05.700 --> 00:14:07.480
integer, whatever, like some message there.


00:14:07.480 --> 00:14:07.740
Right.


00:14:08.140 --> 00:14:12.340
So it says the count parameter is not and cannot be converted to


00:14:12.340 --> 00:14:14.600
the type specified by the type annotation.


00:14:14.600 --> 00:14:15.780
Oh, yeah, this is cool.


00:14:15.780 --> 00:14:16.580
How do you feel about this?


00:14:16.580 --> 00:14:20.580
I obviously don't want runtime typing for


00:14:20.580 --> 00:14:23.080
all of Python code. It's not...


00:14:23.080 --> 00:14:24.580
I don't want it, but


00:14:24.580 --> 00:14:27.380
for special places, like maybe


00:14:27.380 --> 00:14:28.780
around your API?


00:14:28.780 --> 00:14:32.380
Exactly, the boundary of libraries, like stuff going in there.


00:14:32.380 --> 00:14:32.780
Yeah.


00:14:32.780 --> 00:14:35.280
You're like, please don't send me the wrong data.


00:14:35.280 --> 00:14:37.480
Like, what is your other alternative, right?


00:14:37.480 --> 00:14:38.700
if you really want to validate that,


00:14:38.700 --> 00:14:42.560
you have to do is instance of an int


00:14:42.560 --> 00:14:44.500
or try to cast it to an int


00:14:44.500 --> 00:14:46.700
and you've got to raise your own exception type


00:14:46.700 --> 00:14:47.540
and all that kind of stuff.


00:14:47.540 --> 00:14:49.220
You're already going to have to do that work


00:14:49.220 --> 00:14:50.900
if you're writing a good API,


00:14:50.900 --> 00:14:53.580
or you're going to send out weird errors


00:14:53.580 --> 00:14:56.060
like int does not have,


00:14:56.060 --> 00:14:59.500
type int does not have function split


00:14:59.500 --> 00:15:00.520
or some weird thing.


00:15:00.520 --> 00:15:01.740
And people have to realize like,


00:15:01.740 --> 00:15:04.540
oh, what that means is you type some kind of,


00:15:04.540 --> 00:15:07.520
you send a number where a string value is accepted, right?


00:15:07.520 --> 00:15:10.160
So this, if you really do depend on the types


00:15:10.160 --> 00:15:12.640
that you specify in your type annotation,


00:15:12.640 --> 00:15:14.040
this seems like a good idea to me.


00:15:14.040 --> 00:15:17.180
The one drawback is this cannot make your code faster.


00:15:17.180 --> 00:15:18.240
(laughing)


00:15:18.240 --> 00:15:19.080
Right?


00:15:19.080 --> 00:15:22.120
If it's doing both validation and type conversion


00:15:22.120 --> 00:15:24.660
in front of your code, it can't be faster


00:15:24.660 --> 00:15:25.720
than just not doing that.


00:15:25.720 --> 00:15:26.560
But you know.


00:15:26.560 --> 00:15:27.380
- But it might make your development faster.


00:15:27.380 --> 00:15:28.820
- It's not always about speed.


00:15:28.820 --> 00:15:30.880
Exactly, and may make your sanity.


00:15:30.880 --> 00:15:33.920
- Yeah, so one of the ways people have gotten around this


00:15:33.920 --> 00:15:37.000
in the past is instead of, is like for an example,


00:15:37.000 --> 00:15:40.000
doing instead of trying to validate parameters


00:15:40.000 --> 00:15:43.440
to a function at an API level,


00:15:43.440 --> 00:15:48.440
I have the parameters bundled into like an adders object


00:15:48.440 --> 00:15:52.640
and have adders validators written because adders does have.


00:15:52.640 --> 00:15:53.480
- Right, right.


00:15:53.480 --> 00:15:55.640
Put it into a validated object type


00:15:55.640 --> 00:15:56.740
and then pass that thing over.


00:15:56.740 --> 00:15:57.720
Yeah, gotcha.


00:15:57.720 --> 00:16:00.680
Which is kind of what this is, but without doing it.


00:16:00.680 --> 00:16:01.520
- This is cool.


00:16:01.520 --> 00:16:02.340
- Yeah. - I like it.


00:16:02.340 --> 00:16:03.180
- Yeah, very cool.


00:16:03.180 --> 00:16:06.340
I was leaning Pydantically previously.


00:16:06.340 --> 00:16:07.500
This makes me lean more that way.


00:16:07.500 --> 00:16:08.340
I like it.


00:16:08.340 --> 00:16:09.160
All right.


00:16:09.160 --> 00:16:10.380
So one of the things that's really cool is,


00:16:10.380 --> 00:16:12.180
you know, we've had a lot of conversation about


00:16:12.180 --> 00:16:14.020
is Python fast, is it slow?


00:16:14.020 --> 00:16:18.700
Is it fast for coming up with programs that work?


00:16:18.700 --> 00:16:19.660
Does it execute fast?


00:16:19.660 --> 00:16:22.040
Should you use libraries like Cython


00:16:22.040 --> 00:16:24.140
or rewrite some stuff in Rust?


00:16:24.140 --> 00:16:27.420
But Anthony Shah, he took it to another level,


00:16:27.420 --> 00:16:29.540
like further down than even something like


00:16:29.540 --> 00:16:32.780
rewrite bits in C or compile Python to C


00:16:32.780 --> 00:16:39.100
or something. Yeah, I think this is maybe an example of Anthony just having too much time in his hands.


00:16:39.100 --> 00:16:46.620
I think maybe. So Anthony wrote a, I just tried it this morning, a project called PyMult,


00:16:46.620 --> 00:16:54.140
P-Y-M-U-L-T. You can pip install it and it just multiplies numbers and it only works for positive


00:16:54.140 --> 00:16:59.820
integers or negative integers. It just doesn't do, it doesn't ever display negative numbers.


00:17:00.460 --> 00:17:06.180
Anyway, regardless of that, it's an extension for Python written in assembly.


00:17:06.180 --> 00:17:08.260
Because why not?


00:17:08.260 --> 00:17:09.220
And because of Anthony.


00:17:09.220 --> 00:17:14.180
As in like MV and you know, add like the assembly language.


00:17:14.180 --> 00:17:18.620
That's the foundation of basically every other programming language.


00:17:18.620 --> 00:17:19.060
Yeah.


00:17:19.060 --> 00:17:23.460
In Anthony's Twitter announcement, he says after a series of highly questionable life


00:17:23.460 --> 00:17:28.100
decisions, my Python extension written in pure assembly is now on PyPI.


00:17:28.660 --> 00:17:32.100
It required an assembly extension for distutils.


00:17:32.100 --> 00:17:34.780
He also wrote a GitHub action support.


00:17:34.780 --> 00:17:38.500
So it's running CI/CD and testing with pytest.


00:17:38.500 --> 00:17:40.220
Above and beyond, over the top.


00:17:40.220 --> 00:17:41.780
But there is some coolness of it.


00:17:41.780 --> 00:17:43.980
So it's a proof of concept to demonstrate


00:17:43.980 --> 00:17:48.980
how to create a Python extension in 100% assembly.


00:17:48.980 --> 00:17:52.540
And then how to write a, you know, how to link those up,


00:17:52.540 --> 00:17:55.860
how to call a C API and create a Py object


00:17:55.860 --> 00:17:57.660
and parse PyTubal and stuff like that.


00:17:57.660 --> 00:18:04.660
basically all the stuff you have to do to get parameters back and values out of an extension


00:18:04.660 --> 00:18:06.420
written in an assembly.


00:18:06.420 --> 00:18:09.020
And yeah, it's interesting.


00:18:09.020 --> 00:18:10.540
So I like it actually.


00:18:10.540 --> 00:18:11.540
Yeah.


00:18:11.540 --> 00:18:19.620
And anyone wants to know what the code looks like, it's like move racks, x, I'm all keyword


00:18:19.620 --> 00:18:23.460
of why move result to racks, move Eddie to result.


00:18:23.460 --> 00:18:27.380
- Yeah, but then you get a call, PyLong from long,


00:18:27.380 --> 00:18:28.620
which is kind of a cool thing.


00:18:28.620 --> 00:18:30.200
So there's this like interesting mix


00:18:30.200 --> 00:18:32.620
between the just pure assembly language


00:18:32.620 --> 00:18:35.580
and the C data types of CPython.


00:18:35.580 --> 00:18:37.280
- On a serious note though,


00:18:37.280 --> 00:18:39.620
anybody wanting to learn a little bit of assembly


00:18:39.620 --> 00:18:42.220
or something, it's not like often you need


00:18:42.220 --> 00:18:44.180
some sort of environment to try it out


00:18:44.180 --> 00:18:46.680
and having some way to link Python


00:18:46.680 --> 00:18:49.100
and assembly is kind of neat actually.


00:18:49.100 --> 00:18:50.940
So I'm grateful for that.


00:18:50.940 --> 00:18:53.020
Well, you're right, some of these commands,


00:18:53.020 --> 00:18:55.320
I mean, I wrote some assembly in college.


00:18:55.320 --> 00:18:56.580
That was a long time ago.


00:18:56.580 --> 00:18:58.480
- Yeah, well, you had to tip to Anthony


00:18:58.480 --> 00:19:00.340
'cause that's some impressive stuff.


00:19:00.340 --> 00:19:02.740
Would you say it's easy though?


00:19:02.740 --> 00:19:04.420
- No, that's hard mode.


00:19:04.420 --> 00:19:06.340
- Yeah, you know what actually is not as easy,


00:19:06.340 --> 00:19:07.280
I think, as it should be.


00:19:07.280 --> 00:19:09.500
And it's honestly just bizarre,


00:19:09.500 --> 00:19:11.240
are properties in Python.


00:19:11.240 --> 00:19:14.820
As in at property, some function,


00:19:14.820 --> 00:19:17.660
return some value, converge what looks like a function call


00:19:17.660 --> 00:19:19.980
over to something that looks like field access, right?


00:19:19.980 --> 00:19:23.540
But why does it have to have this


00:19:23.540 --> 00:19:25.540
like bizarre sequence of conventions


00:19:25.540 --> 00:19:28.120
where I have an app property and then a function


00:19:28.120 --> 00:19:29.260
that has a name and okay,


00:19:29.260 --> 00:19:32.160
that defines the name of the property, that makes sense.


00:19:32.160 --> 00:19:33.540
But then the subsequent thing,


00:19:33.540 --> 00:19:35.780
if I wanna be able to set that, I have to say,


00:19:35.780 --> 00:19:37.580
you know, if the property was A,


00:19:37.580 --> 00:19:41.500
then I have to say decorator A.setter


00:19:41.500 --> 00:19:44.500
and also have a function that is called A.


00:19:44.500 --> 00:19:46.040
Like the A.setter stuff is weird.


00:19:46.040 --> 00:19:50.540
And then the order of the setter varies as well, right?


00:19:50.540 --> 00:19:52.700
It has to be, or is constrained.


00:19:52.700 --> 00:19:54.340
It has to be after the property A.


00:19:54.340 --> 00:19:56.220
And what I've found also is that


00:19:56.220 --> 00:19:59.900
you can run into issues with inheritance.


00:19:59.900 --> 00:20:03.020
I think if the property is defined in the base class,


00:20:03.020 --> 00:20:04.740
you try to create a setter on a drive class,


00:20:04.740 --> 00:20:05.820
things don't work right as well,


00:20:05.820 --> 00:20:06.820
which is all kinds of weird, right?


00:20:06.820 --> 00:20:09.660
So there's just like, this is supposed to make life easy.


00:20:09.660 --> 00:20:11.020
Why is this so complicated?


00:20:11.020 --> 00:20:14.300
Like surely there was just another alternative


00:20:14.300 --> 00:20:18.340
that was like easier to do, to implement as well.


00:20:18.340 --> 00:20:19.980
Anyway, it's always kind of been


00:20:19.980 --> 00:20:22.220
one of the bizarro things of Python.


00:20:22.220 --> 00:20:23.740
That said, I love properties.


00:20:23.740 --> 00:20:27.820
I love that you can do like lazy calculation with them.


00:20:27.820 --> 00:20:28.860
You don't have to store them.


00:20:28.860 --> 00:20:30.060
It's part of the memory.


00:20:30.060 --> 00:20:32.340
If they can be recomputed from the values,


00:20:32.340 --> 00:20:33.900
there's a lot of good reasons to have them.


00:20:33.900 --> 00:20:37.860
So Rude Vanderham sent over this cool project,


00:20:37.860 --> 00:20:40.340
which he created called EasyProperty.


00:20:40.340 --> 00:20:41.260
And do you know what?


00:20:41.260 --> 00:20:43.380
It's easier than regular properties.


00:20:43.380 --> 00:20:45.980
I think that's why he named it that.


00:20:45.980 --> 00:20:48.980
So the idea is, you know what you could do?


00:20:48.980 --> 00:20:53.980
Instead of have this property of then at a.setter or a.deleter


00:20:53.980 --> 00:20:58.660
is you could just say, there's a at getter, at setter,


00:20:58.660 --> 00:21:01.400
at deleter on the thing.


00:21:01.400 --> 00:21:03.140
And it doesn't matter what order they are


00:21:03.140 --> 00:21:04.380
or if they're all defined.


00:21:04.380 --> 00:21:07.060
Like for example, you can't have a setter without a getter.


00:21:07.060 --> 00:21:09.460
Now conceptually, you should never really do that.


00:21:09.460 --> 00:21:11.700
But just, you know, syntactically,


00:21:11.700 --> 00:21:14.540
Like those things have to be defined there.


00:21:14.540 --> 00:21:16.660
And like I said, the sort of base class,


00:21:16.660 --> 00:21:19.980
drive class type of thing, it gets wonky as well.


00:21:19.980 --> 00:21:22.220
So with this, you just create a function.


00:21:22.220 --> 00:21:25.020
The function name is the name of the property,


00:21:25.020 --> 00:21:27.180
and then you put @getter on it.


00:21:27.180 --> 00:21:29.220
And that makes it the kind that is,


00:21:29.220 --> 00:21:30.980
you know, the getter property.


00:21:30.980 --> 00:21:33.820
If you want to have one, you can set, you say @setter.


00:21:33.820 --> 00:21:36.180
The order doesn't matter or anything like that.


00:21:36.180 --> 00:21:37.180
- Nice. - Isn't that nice?


00:21:37.180 --> 00:21:38.020
- Yeah.


00:21:38.020 --> 00:21:42.500
There's a cool little example that he wrote.


00:21:42.500 --> 00:21:43.600
You can do them separately,


00:21:43.600 --> 00:21:45.680
which is probably what I would recommend and do,


00:21:45.680 --> 00:21:48.740
but you can also have an @getter/setter.


00:21:48.740 --> 00:21:52.020
So you can have one function whose job is to both


00:21:52.020 --> 00:21:56.020
be the getter and the setter operation of the property.


00:21:56.020 --> 00:21:59.140
And then the way it works is just the value is set to be


00:21:59.140 --> 00:22:00.380
like some default value,


00:22:00.380 --> 00:22:04.060
which is what happens in the get version.


00:22:04.060 --> 00:22:06.180
- You can have an @documenter.


00:22:06.180 --> 00:22:07.500
- You can have an @documenter.


00:22:07.500 --> 00:22:12.500
So you can also have documentation for your property.


00:22:12.500 --> 00:22:16.820
And there's a little function that will come up and do that.


00:22:16.820 --> 00:22:19.140
So anyway, it looks pretty nice to me.


00:22:19.140 --> 00:22:21.180
It's not one of those things that's gonna be,


00:22:21.180 --> 00:22:24.220
you're taking a heavy dependency upon to give it a try.


00:22:24.220 --> 00:22:26.060
It's not like a runtime thing.


00:22:26.060 --> 00:22:28.180
For example, that validate arguments,


00:22:28.180 --> 00:22:30.620
that's in between every time you call a function


00:22:30.620 --> 00:22:31.900
all the time, all the time.


00:22:31.900 --> 00:22:33.820
So this is the type of thing, if it's gonna work,


00:22:33.820 --> 00:22:36.320
it's gonna work clearly, or it's just not gonna work at all.


00:22:36.320 --> 00:22:38.400
So give it a try and see if it makes you happy.


00:22:38.400 --> 00:22:42.320
And if it sparks joy, you can have an at getter.


00:22:42.320 --> 00:22:44.600
- And I like the syntax better than properties.


00:22:44.600 --> 00:22:45.560
Just more sense.


00:22:45.560 --> 00:22:48.080
- Yeah, and you know, I think at property is just fine.


00:22:48.080 --> 00:22:51.520
Like, okay, that totally, but you know,


00:22:51.520 --> 00:22:54.840
at property name dot setter, like that just drives me,


00:22:54.840 --> 00:22:57.080
it's just so bizarre and weird in the ordering


00:22:57.080 --> 00:22:58.600
and the dependencies of it existing


00:22:58.600 --> 00:23:01.540
in the same class hierarchy level.


00:23:01.540 --> 00:23:02.380
Yeah, don't get me started.


00:23:02.380 --> 00:23:03.220
So this is cool.


00:23:03.220 --> 00:23:04.040
I like it.


00:23:04.040 --> 00:23:07.360
Thanks for developing that and sending that over, Rude.


00:23:07.360 --> 00:23:10.280
- So we talked about assembly and properties


00:23:10.280 --> 00:23:11.640
and decorators and stuff.


00:23:11.640 --> 00:23:14.300
So if anybody's left listening to this podcast,


00:23:14.300 --> 00:23:16.640
we do have more to talk about.


00:23:16.640 --> 00:23:17.720
- Let's talk about recursion.


00:23:17.720 --> 00:23:18.700
No, just kidding.


00:23:18.700 --> 00:23:22.280
- I couldn't resist highlighting the last topic.


00:23:22.280 --> 00:23:25.120
So there was an article by Ryan Howard


00:23:25.120 --> 00:23:27.960
that was on the testproject.io blog


00:23:27.960 --> 00:23:31.360
called "Non-blocking Assertion Failures with pytest-check."


00:23:31.360 --> 00:23:32.400
And I had to highlight it


00:23:32.400 --> 00:23:37.000
because it's really the first time anybody's ever written an article about something I wrote.


00:23:37.000 --> 00:23:38.700
So that's neat.


00:23:38.700 --> 00:23:44.600
So pytestCheck is a library that allows you to do multiple failures within a test,


00:23:44.600 --> 00:23:47.800
mostly because assert, normally you use asserts,


00:23:47.800 --> 00:23:52.400
but asserts stop after the first failure, and sometimes you want more.


00:23:52.400 --> 00:23:55.100
And I never really thought about the different use cases,


00:23:55.100 --> 00:23:58.600
but so Orion has the use case of using it with Selenium,


00:23:58.600 --> 00:24:01.400
because sometimes when you're testing a page,


00:24:01.400 --> 00:24:04.760
coming back you might have to test multiple aspects of it.


00:24:04.760 --> 00:24:08.440
What's the, his example was, what's the content of


00:24:08.440 --> 00:24:13.640
some field and also if the URL is correct or something. And I think with


00:24:13.640 --> 00:24:16.280
like a Selenium or some sort of web test that totally


00:24:16.280 --> 00:24:18.040
makes sense because you'd have things like


00:24:18.040 --> 00:24:23.880
you want to check the error code and content and whether somebody's name


00:24:23.880 --> 00:24:27.080
shows up then a whole bunch of stuff you could check


00:24:27.080 --> 00:24:30.520
and having multiple things. Right, you don't necessarily have just


00:24:30.520 --> 00:24:35.480
one assertion that captures all of the essence of what you're trying to determine, right?


00:24:35.480 --> 00:24:42.920
Yeah. And so I also linked to the pytest-check Library and then, or plugin, and then also an


00:24:42.920 --> 00:24:47.800
article that I wrote back in way back in 2015 where I started thinking about this and thinking


00:24:47.800 --> 00:24:52.040
of how to solve it. So. Okay. Yeah. Yeah. Very cool. Nice article, right?


00:24:52.040 --> 00:24:57.960
And then I also wanted to do a public service announcement that because both Ryan and Anthony


00:24:57.960 --> 00:25:01.640
got this wrong, there are no capital letters in pytest.


00:25:01.640 --> 00:25:03.480
- Hold on, hold on, hold on, let me try this.


00:25:03.480 --> 00:25:05.580
Let me just, yeah, okay, on this one,


00:25:05.580 --> 00:25:07.680
but if I go over to Word and I type


00:25:07.680 --> 00:25:09.820
pytest is a testing framework,


00:25:09.820 --> 00:25:12.280
I'll bet you that Word makes it capital.


00:25:12.280 --> 00:25:13.120
- Yeah. - Doesn't that change,


00:25:13.120 --> 00:25:14.400
doesn't that make it real?


00:25:14.400 --> 00:25:16.640
- (laughs) No.


00:25:16.640 --> 00:25:17.800
- I know PowerPoint well.


00:25:17.800 --> 00:25:18.740
- So. - No, yeah,


00:25:18.740 --> 00:25:20.760
that's always tricky, right, when you have


00:25:20.760 --> 00:25:22.560
sort of a formal name, but the formal name


00:25:22.560 --> 00:25:24.720
is, doesn't have spaces or it's lowercase,


00:25:24.720 --> 00:25:25.560
but I'm fine with it.


00:25:25.560 --> 00:25:27.240
- We got used to it with the iPhone,


00:25:27.240 --> 00:25:31.920
So there's no capital, I mean, the P is capitalized in iPhone, but--


00:25:31.920 --> 00:25:32.200
>> Yeah.


00:25:32.200 --> 00:25:35.640
>> Will Word correct you, I wonder, if you try to type iPhone?


00:25:35.640 --> 00:25:36.480
>> I would doubt it.


00:25:36.480 --> 00:25:39.200
I mean, but that's Apple, and they think differently.


00:25:39.200 --> 00:25:40.040
That's what they tell me.


00:25:40.040 --> 00:25:42.000
>> [LAUGH] But there's others.


00:25:42.000 --> 00:25:46.040
I mean, so there's some, I guess it's a weird thing with tools and stuff.


00:25:46.040 --> 00:25:51.080
Some tools don't care whether you capitalize or not.


00:25:51.080 --> 00:25:54.000
The people in pytest like it not capitalized.


00:25:54.000 --> 00:25:54.760
So anyway.


00:25:54.760 --> 00:25:59.760
- Yeah, let's respect their lowercase p's.


00:25:59.760 --> 00:26:02.920
All right, so I have three really quick things.


00:26:02.920 --> 00:26:03.920
They're all kind of fun.


00:26:03.920 --> 00:26:08.920
So PyMC is a cool library for Bayesian analysis


00:26:08.920 --> 00:26:12.440
and probabilistic programming in Python.


00:26:12.440 --> 00:26:15.320
So Alex, one of the core developers there,


00:26:15.320 --> 00:26:16.760
sent me a message, said,


00:26:16.760 --> 00:26:21.760
"Hey, we're planning the first ever PyMC on."


00:26:21.760 --> 00:26:24.680
I pronounce PyMC on because it's so on.


00:26:24.680 --> 00:26:27.880
they say, and it's the first Bayesian community


00:26:27.880 --> 00:26:30.440
online conference around PyMC.


00:26:30.440 --> 00:26:33.880
So if you're into probabilistic programming in Python,


00:26:33.880 --> 00:26:34.800
check it out.


00:26:34.800 --> 00:26:37.000
There are a bunch of cool stuff they got going on.


00:26:37.000 --> 00:26:40.220
They're also, I think, have a call for paper.


00:26:40.220 --> 00:26:41.560
So if you wanna do a presentation,


00:26:41.560 --> 00:26:45.840
shoot them a note and yeah,


00:26:45.840 --> 00:26:47.300
I'll link to that in the show notes.


00:26:47.300 --> 00:26:50.280
Second, a while ago, we talked about RUMS,


00:26:50.280 --> 00:26:51.360
quite a while ago.


00:26:51.360 --> 00:26:55.720
this ridiculously uncomplicated Mac,


00:26:55.720 --> 00:26:59.120
I don't know, something, menu programs


00:26:59.120 --> 00:27:00.440
or something like that.


00:27:00.440 --> 00:27:03.400
And so I ended up, I was sitting around,


00:27:03.400 --> 00:27:05.920
I have this little library that I run


00:27:05.920 --> 00:27:10.680
because so many things in my life require taking a title


00:27:10.680 --> 00:27:14.160
or taking some words and turning them into a file name


00:27:14.160 --> 00:27:15.880
or a URL name, all right?


00:27:15.880 --> 00:27:19.100
So suppose I've got the title of a video


00:27:19.100 --> 00:27:22.320
and I want to name an MP4 file that,


00:27:22.320 --> 00:27:23.860
and it's got like a colon in it,


00:27:23.860 --> 00:27:25.300
or like a forward slash,


00:27:25.300 --> 00:27:27.660
or some random thing that shouldn't be in there.


00:27:27.660 --> 00:27:29.140
I don't want spaces, I want...


00:27:29.140 --> 00:27:31.060
So I wrote this little command line utility


00:27:31.060 --> 00:27:32.980
called urllify that I would just run,


00:27:32.980 --> 00:27:34.460
it would take whatever's in the clipboard


00:27:34.460 --> 00:27:37.580
and replace it with that canonicalized version


00:27:37.580 --> 00:27:39.580
that would work well as a file name.


00:27:39.580 --> 00:27:40.500
Yeah, and that was cool,


00:27:40.500 --> 00:27:43.060
but then I got tired of like always firing up


00:27:43.060 --> 00:27:45.020
the command line, the terminal,


00:27:45.020 --> 00:27:46.340
maybe it's busy doing something else,


00:27:46.340 --> 00:27:48.060
so I got into a new window, run that thing,


00:27:48.060 --> 00:27:49.020
and then close it down.


00:27:49.020 --> 00:27:52.500
And I was like, I just wanna click something once.


00:27:52.500 --> 00:27:54.300
All right, I don't wanna click the terminal


00:27:54.300 --> 00:27:56.160
and then start a new terminal.


00:27:56.160 --> 00:27:58.260
And it was like, not that much work,


00:27:58.260 --> 00:28:01.420
but you can imagine the way I'm going on and on about this,


00:28:01.420 --> 00:28:03.380
I must be doing it more than is reasonable.


00:28:03.380 --> 00:28:05.720
So what I did is in like 45 minutes,


00:28:05.720 --> 00:28:09.980
I converted that command line app to a Mac.app file,


00:28:09.980 --> 00:28:12.780
like a full on.app file that I could just ship


00:28:12.780 --> 00:28:13.780
to any Mac user.


00:28:13.780 --> 00:28:18.380
They have no idea it uses multiple Python packages,


00:28:18.380 --> 00:28:21.180
a code that I wrote, and it runs as a GUI,


00:28:21.180 --> 00:28:25.140
auto-starting with my macOS when I log in in my menu bar.


00:28:25.140 --> 00:28:25.980
Is that cool?


00:28:25.980 --> 00:28:29.220
And so I linked to a little tweet that has a screenshot


00:28:29.220 --> 00:28:30.100
just says convert text,


00:28:30.100 --> 00:28:33.540
but actually I changed it to URL-fi text, trim text,


00:28:33.540 --> 00:28:35.300
and now I can just click up there and any text that I have.


00:28:35.300 --> 00:28:36.380
You know, if you copy something


00:28:36.380 --> 00:28:38.740
and you want to like paste an email,


00:28:38.740 --> 00:28:40.060
but maybe it's got a bunch of white space,


00:28:40.060 --> 00:28:41.460
you're like, why is this all here?


00:28:41.460 --> 00:28:42.700
Right, instead of putting it in text editor


00:28:42.700 --> 00:28:44.260
and just getting the little bit out.


00:28:44.260 --> 00:28:45.620
I just hit that and it'll trim it


00:28:45.620 --> 00:28:47.180
or like a good lowercase text.


00:28:47.180 --> 00:28:48.500
So like have these like little cool


00:28:48.500 --> 00:28:50.900
like clipboard text transforms


00:28:50.900 --> 00:28:54.200
and it all took like 45 minutes to turn it into a Mac app


00:28:54.200 --> 00:28:56.180
with pie to app and rumps.


00:28:56.180 --> 00:28:57.180
- Oh wow.


00:28:57.180 --> 00:28:58.860
So are you sharing this somewhere?


00:28:58.860 --> 00:29:02.020
- I will happily share it.


00:29:02.020 --> 00:29:02.860
- Okay.


00:29:02.860 --> 00:29:04.660
- But I don't have the GitHub repo public yet.


00:29:04.660 --> 00:29:07.660
So let me just like put like a screenshot


00:29:07.660 --> 00:29:09.820
and what the heck it is and then I can make it public.


00:29:09.820 --> 00:29:11.420
But yeah, so I'll put it in the show notes.


00:29:11.420 --> 00:29:12.260
- Neat.


00:29:12.260 --> 00:29:16.140
- Super cool, and finally, I just want to let people know


00:29:16.140 --> 00:29:19.140
who are taking courses over at Talk Python,


00:29:19.140 --> 00:29:20.900
I was sitting around and I decided,


00:29:20.900 --> 00:29:23.360
I want, as you hover over the scrubber,


00:29:23.360 --> 00:29:26.540
I want it to show a little thumbnail


00:29:26.540 --> 00:29:28.200
of where you would go in the video


00:29:28.200 --> 00:29:30.540
if you were to click the scrubber in that location.


00:29:30.540 --> 00:29:31.380
- That's a scrubber.


00:29:31.380 --> 00:29:33.620
- We're not, like the little time thing


00:29:33.620 --> 00:29:36.580
where you can click around and zoom ahead and whatever,


00:29:36.580 --> 00:29:40.020
we're not reusing Vimeo or YouTube or something


00:29:40.020 --> 00:29:41.780
that might potentially do that.


00:29:41.780 --> 00:29:44.540
I think YouTube does it, I don't know that Vimeo does.


00:29:44.540 --> 00:29:48.480
Anyway, I recently figured out how to do that.


00:29:48.480 --> 00:29:52.160
So if people are interested, they can check it out.


00:29:52.160 --> 00:29:53.760
But there's a cool little trick


00:29:53.760 --> 00:29:57.200
where you can take a second hidden video player


00:29:57.200 --> 00:29:59.720
and point it at either the same video


00:29:59.720 --> 00:30:01.760
or a smaller version of the video,


00:30:01.760 --> 00:30:06.120
and then as the mouse moves, just seek it to that time


00:30:06.120 --> 00:30:08.200
and show it above where the mouse is.


00:30:08.200 --> 00:30:09.040
Isn't that crazy?


00:30:09.040 --> 00:30:09.860
- Yeah, that's cool.


00:30:09.860 --> 00:30:11.280
- Yeah, so if people need something like that,


00:30:11.280 --> 00:30:13.000
- Yeah, a little cool trick you might consider.


00:30:13.000 --> 00:30:16.260
Not that often in Python, but if you happen to make your way


00:30:16.260 --> 00:30:17.500
to the JavaScript side of things,


00:30:17.500 --> 00:30:18.520
you'll do a lot of that, I guess.


00:30:18.520 --> 00:30:20.360
- So is that in your training site?


00:30:20.360 --> 00:30:21.200
Has it been updated then?


00:30:21.200 --> 00:30:22.040
- Yeah, exactly.


00:30:22.040 --> 00:30:24.240
It's not updated as we speak,


00:30:24.240 --> 00:30:29.040
because I'm still busy transcoding 200 hours of video


00:30:29.040 --> 00:30:32.040
to 500 by 200 size.


00:30:32.040 --> 00:30:35.320
So I'm about halfway through that.


00:30:35.320 --> 00:30:39.720
Yesterday, I uploaded 200 gigs of data.


00:30:39.720 --> 00:30:42.520
I'm so going over my data limit this month.


00:30:42.520 --> 00:30:44.600
(laughing)


00:30:44.600 --> 00:30:47.920
That was 20% of my data limit in one day.


00:30:47.920 --> 00:30:48.760
I got more to send.


00:30:48.760 --> 00:30:50.960
So, but yeah, it'll be there as soon as the videos are done.


00:30:50.960 --> 00:30:51.780
It'll turn it on.


00:30:51.780 --> 00:30:52.780
- I'm gonna back up a little bit.


00:30:52.780 --> 00:30:55.620
This IMC, probabilistic programming.


00:30:55.620 --> 00:30:58.920
Can I use this to make a probability drive?


00:30:58.920 --> 00:30:59.880
- A probability drive?


00:30:59.880 --> 00:31:00.720
- Yeah.


00:31:00.720 --> 00:31:01.540
- Is this from science fiction?


00:31:01.540 --> 00:31:02.380
I don't know it.


00:31:02.380 --> 00:31:03.280
- Like Hitchhiker's Guide to the Galaxy.


00:31:03.280 --> 00:31:05.320
- Oh, yeah, I would think so.


00:31:05.320 --> 00:31:07.960
I would begin by feeding it the number 42


00:31:07.960 --> 00:31:09.040
and see what comes out.


00:31:09.040 --> 00:31:09.880
- Maybe, yeah.


00:31:09.880 --> 00:31:12.080
- That's probably the natural first step, yeah.


00:31:12.080 --> 00:31:14.720
All right, speaking of jokes, we've got two.


00:31:14.720 --> 00:31:15.560
You wanna go first?


00:31:15.560 --> 00:31:18.200
- Yes, this was submitted by Reuven Lerner,


00:31:18.200 --> 00:31:20.200
inspired by Anthony Shaw.


00:31:20.200 --> 00:31:22.200
I used to do low-level programming,


00:31:22.200 --> 00:31:25.560
then a product I bought told me no assembly required.


00:31:25.560 --> 00:31:27.520
Since then, I've been coding in Python.


00:31:27.520 --> 00:31:29.320
- Nice.


00:31:29.320 --> 00:31:30.400
- Except for Anthony.


00:31:30.400 --> 00:31:31.720
Anthony's coding in assembly.


00:31:31.720 --> 00:31:33.440
- He codes in both, yeah.


00:31:33.440 --> 00:31:37.320
His Python is assembly code or something like that.


00:31:37.320 --> 00:31:40.760
So this one, like last week we talked about little Bobby Tables,


00:31:40.760 --> 00:31:42.480
who's beautiful, over at XKCD.


00:31:42.480 --> 00:31:44.800
And I've got another XKCD for us.


00:31:44.800 --> 00:31:46.880
But this one is not about databases.


00:31:46.880 --> 00:31:48.920
No, it's about source control and Git.


00:31:48.920 --> 00:31:52.400
All right, you want to be the woman developer that asks the question?


00:31:52.400 --> 00:31:54.440
I'll start us off.


00:31:54.440 --> 00:31:56.880
All right, so a couple developers speaking.


00:31:56.880 --> 00:31:59.760
First one is talking about this new source control.


00:31:59.760 --> 00:32:00.600
This is Git.


00:32:00.600 --> 00:32:04.720
It tracks collaborative work on projects through a beautiful distributed graph


00:32:04.720 --> 00:32:05.800
theory tree model.


00:32:05.800 --> 00:32:06.920
Cool, how do we use it?


00:32:06.920 --> 00:32:08.800
- No idea, just memorize these shell commands


00:32:08.800 --> 00:32:09.760
and type them to sync up.


00:32:09.760 --> 00:32:11.800
If you get errors, save your work elsewhere,


00:32:11.800 --> 00:32:13.920
delete the project and download a fresh copy.


00:32:13.920 --> 00:32:16.160
(laughing)


00:32:16.160 --> 00:32:22.280
It's funny because it happens too often, I think.


00:32:22.280 --> 00:32:25.160
- Yeah, I think most people have like the four, five,


00:32:25.160 --> 00:32:27.400
or six git commands that they use all the time


00:32:27.400 --> 00:32:29.680
and everything else they have to look up if they need it.


00:32:29.680 --> 00:32:32.120
- Yeah, like merge conflict, all right, I'm deleting it,


00:32:32.120 --> 00:32:33.620
I'm gonna copy this back over.


00:32:35.200 --> 00:32:36.200
- Yep.


00:32:36.200 --> 00:32:37.560
- All right.


00:32:37.560 --> 00:32:38.680
Funny indeed.


00:32:38.680 --> 00:32:40.000
Well, thanks for being here as always,


00:32:40.000 --> 00:32:41.080
and thanks everyone for listening.


00:32:41.080 --> 00:32:41.920
- Thank you.


00:32:41.920 --> 00:32:42.760
Bye. - Yep, bye.


00:32:42.760 --> 00:32:44.480
Thank you for listening to Python Bytes.


00:32:44.480 --> 00:32:46.920
Follow the show on Twitter via @pythonbytes.


00:32:46.920 --> 00:32:49.960
That's Python Bytes as in B-Y-T-E-S.


00:32:49.960 --> 00:32:53.160
And get the full show notes at pythonbytes.fm.


00:32:53.160 --> 00:32:54.760
If you have a news item you want featured,


00:32:54.760 --> 00:32:57.220
just visit pythonbytes.fm and send it our way.


00:32:57.220 --> 00:33:00.100
We're always on the lookout for sharing something cool.


00:33:00.100 --> 00:33:01.940
On behalf of myself and Brian Okken,


00:33:01.940 --> 00:33:03.280
this is Michael Kennedy.


00:33:03.280 --> 00:33:05.320
Thank you for listening and sharing this podcast


00:33:05.320 --> 00:33:06.960
with your friends and colleagues.

