
00:00:00.000 --> 00:00:06.000
Hey Brian. Hey. I see that you've come wielding a staff of mighty power. Yeah well I was cleaning


00:00:06.000 --> 00:00:10.000
my office and I found the Python staff so I'm like I'm ready to help for the show.


00:00:10.000 --> 00:00:13.920
Yeah that was when we used to go to conferences. Do you remember that? Like people they'd all get


00:00:13.920 --> 00:00:18.240
together. I think they might have been making a comeback. I think so. I think I might be attending


00:00:18.240 --> 00:00:22.160
some conferences in the future. Awesome. So am I. I'm looking forward to it. Before we get to our


00:00:22.160 --> 00:00:29.280
topics also want to say thank you to a new sponsor this week. Not totally new but new for recent


00:00:29.280 --> 00:00:32.020
and times compiler, the podcast from red hat.


00:00:32.020 --> 00:00:34.420
So awesome to have the support from red hat.


00:00:34.420 --> 00:00:38.880
We're going to be telling you more about them later, but Brian, let's just mix it up.


00:00:38.880 --> 00:00:39.680
Let's make a difference.


00:00:39.680 --> 00:00:42.840
This is episode 308 recorded November 1st, 2022.


00:00:42.840 --> 00:00:43.680
I'm Michael Kennedy.


00:00:43.680 --> 00:00:44.760
And I'm Brian Atkin.


00:00:44.760 --> 00:00:46.040
Let's let's, let's do it.


00:00:46.040 --> 00:00:48.000
Um, I did want to talk about PyCon.


00:00:48.000 --> 00:00:50.400
Uh, yeah, so PyCon is, is coming up.


00:00:50.400 --> 00:00:52.000
So, when is it?


00:00:52.000 --> 00:00:58.320
It's, I wrote this down even so they could remember it's April 19th at a 23rd.


00:00:58.320 --> 00:01:05.800
It's but one of the we bring up PyCon US because the the the site just launched recently.


00:01:05.800 --> 00:01:07.480
So pretty excited about that.


00:01:07.480 --> 00:01:12.720
Linking to a blog post about the site launch and the call for proposals.


00:01:12.720 --> 00:01:16.580
So again it's going to be let's just hop over to the big one.


00:01:16.580 --> 00:01:20.080
It's kind of a cool cool look to it now.


00:01:20.080 --> 00:01:25.960
It's an homage to some of the old ones because there's what's the 20th anniversary special.


00:01:25.960 --> 00:01:27.880
So it's some of the old pictures.


00:01:27.880 --> 00:01:28.380
So you can--


00:01:28.380 --> 00:01:28.880
>> Oh, I see.


00:01:28.880 --> 00:01:30.240
So it's a bunch of tiles.


00:01:30.240 --> 00:01:32.280
And the different tiles are actually


00:01:32.280 --> 00:01:34.440
like the hero image or whatever.


00:01:34.440 --> 00:01:34.940
>> Yeah.


00:01:34.940 --> 00:01:35.760
>> From that year.


00:01:35.760 --> 00:01:37.960
>> Or bits of it or something.


00:01:37.960 --> 00:01:41.320
So it looks cool.


00:01:41.320 --> 00:01:45.400
So PyCon US is going to be April 19th through the 23rd.


00:01:45.400 --> 00:01:46.960
Well, that's when the talks are.


00:01:46.960 --> 00:01:47.680
It's longer.


00:01:47.680 --> 00:01:49.840
So there's tutorials ahead of time.


00:01:49.840 --> 00:01:52.440
And then there's hack days or whatever


00:01:52.440 --> 00:01:54.760
we call those afterwards.


00:01:54.760 --> 00:01:56.520
So if you can stay longer, awesome.


00:01:56.520 --> 00:01:59.040
But the talk part is the 19th through the 23rd.


00:01:59.040 --> 00:02:02.600
Salt Lake City, the site looks great.


00:02:02.600 --> 00:02:04.480
The call for proposals is up.


00:02:04.480 --> 00:02:07.080
And that's really kind of what I wanted to highlight


00:02:07.080 --> 00:02:10.360
is so people start thinking about your talks.


00:02:10.360 --> 00:02:13.440
And of course, yeah, we've got some more information


00:02:13.440 --> 00:02:15.880
about talks coming up later in the show.


00:02:15.880 --> 00:02:18.320
But the deadlines, what are the deadlines?


00:02:18.320 --> 00:02:22.440
So we've got the CFP just opened, just opened the 18th.


00:02:22.440 --> 00:02:25.160
and then it's through December 9th.


00:02:25.160 --> 00:02:29.640
So, but don't wait until December, get those in early.


00:02:29.640 --> 00:02:30.560
So anyway.


00:02:30.560 --> 00:02:31.560
- Yeah, excellent.


00:02:31.560 --> 00:02:32.800
- I think I'm gonna submit some


00:02:32.800 --> 00:02:35.800
because I kind of think I wanna go to PyCon this year.


00:02:35.800 --> 00:02:37.280
I didn't go last year.


00:02:37.280 --> 00:02:39.560
What do you, have you thought about it yet, Michael?


00:02:39.560 --> 00:02:40.880
- Yeah, I've definitely thought about it.


00:02:40.880 --> 00:02:42.880
I'm very much considering going.


00:02:42.880 --> 00:02:44.760
You know, for me, it's like,


00:02:44.760 --> 00:02:46.440
is Talk Python gonna get a booth


00:02:46.440 --> 00:02:48.280
and have like a bunch of presence there,


00:02:48.280 --> 00:02:49.860
in which case going to the conference


00:02:49.860 --> 00:02:51.840
means hanging out at the booth for three days,


00:02:51.840 --> 00:02:55.360
which is kind of awesome, but also it's like not exactly a conference.


00:02:55.360 --> 00:02:55.900
>> Yeah.


00:02:55.900 --> 00:02:59.560
>> Maybe I'll go low-key and submit a talk and then just cruise around the halls.


00:02:59.560 --> 00:03:02.760
I haven't decided. I do a bunch of podcast recording live there.


00:03:02.760 --> 00:03:04.880
So there's trade-offs to both obviously.


00:03:04.880 --> 00:03:07.320
So I got to think about what I might want to do.


00:03:07.320 --> 00:03:10.480
>> Yeah. I think I'm going to submit some talks.


00:03:10.480 --> 00:03:13.360
One of the things I wanted to bring up with submitting talks is to


00:03:13.360 --> 00:03:17.680
not to do it because it's a good experience to submit a talk.


00:03:17.680 --> 00:03:19.240
Even if you don't get the talk,


00:03:19.240 --> 00:03:22.600
It's the process of going through that submittal process.


00:03:22.600 --> 00:03:25.880
I think it's a growth experience,


00:03:25.880 --> 00:03:27.640
even if it gets rejected.


00:03:27.640 --> 00:03:30.660
And don't feel bad, because tons of people submit talks,


00:03:30.660 --> 00:03:33.800
and they can't accept all of them, obviously.


00:03:33.800 --> 00:03:34.840
- Yeah. - Yeah.


00:03:34.840 --> 00:03:36.000
- Absolutely. - Anyway, cool.


00:03:36.000 --> 00:03:38.280
- Cool, well, yeah, that'd be exciting.


00:03:38.280 --> 00:03:41.320
I actually wanna do a bit of bookkeeping before we move on.


00:03:41.320 --> 00:03:42.720
- Oh, yeah, that's a good idea.


00:03:42.720 --> 00:03:46.520
- For people who typically attend our livestream recording,


00:03:46.520 --> 00:03:48.920
which we really appreciate that, that's awesome.


00:03:48.920 --> 00:03:52.720
We see a bunch of familiar faces in the chat already out here,


00:03:52.720 --> 00:03:55.120
and we do that live on YouTube,


00:03:55.120 --> 00:03:58.520
and then we polish it up and send it out to the world over the audio channels.


00:03:58.520 --> 00:04:02.040
I think you can get a lot out of the video version.


00:04:02.040 --> 00:04:04.520
That said, we're moving the video version, right?


00:04:04.520 --> 00:04:07.520
>> We are, and it's my fault.


00:04:07.520 --> 00:04:13.600
A periodic meeting that happens in my day job,


00:04:13.600 --> 00:04:15.360
and it happens at noon on Tuesdays,


00:04:15.360 --> 00:04:17.900
and that's when we usually used to record.


00:04:17.900 --> 00:04:19.560
So we're just shifting it a little bit.


00:04:19.560 --> 00:04:22.240
So we're going to do 11 a.m. on Tuesdays.


00:04:22.240 --> 00:04:25.600
>> Exactly. It's just an hour earlier on Tuesdays.


00:04:25.600 --> 00:04:28.480
I want to encourage people to go to


00:04:28.480 --> 00:04:32.560
pythonbytes.fm/youtube and it'll take you over to our channel.


00:04:32.560 --> 00:04:34.560
If you subscribe and get notified,


00:04:34.560 --> 00:04:37.000
you'll just get a pop-up when we're streaming live.


00:04:37.000 --> 00:04:38.160
If you've got time, you can drop in.


00:04:38.160 --> 00:04:39.480
You don't have to plan too much about it.


00:04:39.480 --> 00:04:43.440
Anyway, encourage people to be part of the YouTube experience here,


00:04:43.440 --> 00:04:47.120
because we put a lot of stuff on the screen and it makes it even a little bit cooler, I think.


00:04:47.120 --> 00:04:49.680
>> While we're bookkeeping and it's 11,


00:04:49.680 --> 00:04:52.720
if you can make it 11 AM on Tuesdays,


00:04:52.720 --> 00:04:54.160
maybe you want to be on the show.


00:04:54.160 --> 00:04:56.180
Reach out if you'd like to be a guest host.


00:04:56.180 --> 00:04:57.400
We still do those.


00:04:57.400 --> 00:05:00.600
>> Yeah, exactly. I wonder if I got anything to talk about.


00:05:00.600 --> 00:05:02.040
Let's see. How about Any.io?


00:05:02.040 --> 00:05:06.720
Any.io is a framework that lets you build async things.


00:05:06.720 --> 00:05:08.920
When you first hear about it,


00:05:08.920 --> 00:05:13.200
it looks like it's for making network libraries.


00:05:13.200 --> 00:05:15.340
Like if you were making a low level network app


00:05:15.340 --> 00:05:18.400
and you wanted it to be concurrent and asynchronous,


00:05:18.400 --> 00:05:20.920
like, well, you could use any IO, which would be cool.


00:05:20.920 --> 00:05:23.040
And it has the ability to be,


00:05:23.040 --> 00:05:24.800
how did Alex, the creator of it, put it?


00:05:24.800 --> 00:05:27.420
Something like a framework that goes above


00:05:27.420 --> 00:05:29.140
the async IO frameworks.


00:05:29.140 --> 00:05:32.920
So it doesn't, like if you think of Trio or Curio,


00:05:32.920 --> 00:05:35.720
those are replacements for async IO.


00:05:35.720 --> 00:05:39.320
Whereas any IO will run on top and integrate with async IO


00:05:39.320 --> 00:05:42.280
or it will run on top of and integrate with Trio.


00:05:42.280 --> 00:05:44.660
So you can kind of add it into whatever you're doing,


00:05:44.660 --> 00:05:45.900
which I think is pretty sweet.


00:05:45.900 --> 00:05:47.860
But I think it's a little,


00:05:47.860 --> 00:05:49.540
it's elevator pitch or whatever here,


00:05:49.540 --> 00:05:50.820
sells it a bit short.


00:05:50.820 --> 00:05:53.560
So I just wanted to talk about some awesome building blocks


00:05:53.560 --> 00:05:55.540
that people can use from any I/O


00:05:55.540 --> 00:05:58.240
that I think would make them make it really fun.


00:05:58.240 --> 00:06:01.660
All right, so one of the 3.11 features actually


00:06:01.660 --> 00:06:05.460
is this idea of task groups.


00:06:05.460 --> 00:06:08.420
And they also have this concept of task groups over,


00:06:08.420 --> 00:06:11.100
they had it originally in Trio,


00:06:11.100 --> 00:06:14.300
and then it comes over here about these groups.


00:06:14.300 --> 00:06:17.260
And what you can do is you can basically create a task group,


00:06:17.260 --> 00:06:18.500
do a bunch of work on them,


00:06:18.500 --> 00:06:22.420
and then when it exits that with block, it's all finished.


00:06:22.420 --> 00:06:24.860
So if you're not ready to go to 3.11,


00:06:24.860 --> 00:06:27.500
but you wanna have task groups, here's one way to get it.


00:06:27.500 --> 00:06:29.220
So that's one thing that's kind of cool.


00:06:29.220 --> 00:06:32.060
It supports cancellation and timeout, which is important,


00:06:32.060 --> 00:06:34.300
especially as a group of related things.


00:06:34.300 --> 00:06:35.900
But one of the things I wanna touch on here


00:06:35.900 --> 00:06:39.380
that's pretty cool is the synchronization primitives.


00:06:39.380 --> 00:06:41.920
Remember a few weeks ago, Guido wrote that article


00:06:41.920 --> 00:06:44.820
about people at a table and semaphores and stuff.


00:06:44.820 --> 00:06:46.860
- Yeah, yeah, that's a thing.


00:06:46.860 --> 00:06:47.700
- Yeah, exactly.


00:06:47.700 --> 00:06:50.500
So there's a couple of those types of primitives here


00:06:50.500 --> 00:06:51.340
that are really neat.


00:06:51.340 --> 00:06:54.060
So they've got events, which allow you to just run up


00:06:54.060 --> 00:06:57.940
to a point and wait until some other async IO thing


00:06:57.940 --> 00:07:00.040
comes along and says, now go.


00:07:00.040 --> 00:07:03.540
And these are similar to the events that are built


00:07:03.540 --> 00:07:06.660
into the standard library, but they're not reentrant


00:07:06.660 --> 00:07:08.380
and they have a little bit,


00:07:08.380 --> 00:07:11.680
a claim to have a better way of presenting a race condition,


00:07:11.680 --> 00:07:14.140
a little bit closer to Trio.


00:07:14.140 --> 00:07:16.600
So there's those, and one of the ones over here


00:07:16.600 --> 00:07:18.780
that's cool is capacity limiters.


00:07:18.780 --> 00:07:21.100
I think I did talk about this one before.


00:07:21.100 --> 00:07:22.940
So you can go over here and just say,


00:07:22.940 --> 00:07:24.940
I want to only do, in this case,


00:07:24.940 --> 00:07:26.580
the example says create a capacity limiter two,


00:07:26.580 --> 00:07:29.420
I only wanna do two things at a time, but yeah.


00:07:29.420 --> 00:07:33.820
Then let's see, another one is this working with threads,


00:07:33.820 --> 00:07:34.660
pretty awesome.


00:07:34.660 --> 00:07:41.140
So you can, given some function that is just a regular function, you can turn it into async,


00:07:41.140 --> 00:07:44.020
but actually have it execute on a background thread with two thread.


00:07:44.020 --> 00:07:45.020
Wow.


00:07:45.020 --> 00:07:46.020
Give it that.


00:07:46.020 --> 00:07:49.780
And then you can await it just like other things that mix into your async IO world.


00:07:49.780 --> 00:07:51.500
You can also do it in reverse.


00:07:51.500 --> 00:07:56.900
If you're over in a thread and you need to run it on the async event loop, you can also


00:07:56.900 --> 00:07:57.900
push it.


00:07:57.900 --> 00:07:59.140
You can say from thread and to thread.


00:07:59.140 --> 00:08:03.180
The to thread is the, the one that, no, the from thread will push it back, back to the


00:08:03.180 --> 00:08:04.860
async event loop, which is cool.


00:08:04.860 --> 00:08:09.540
Let's see. Also, subprocesses are pretty awesome.


00:08:09.540 --> 00:08:14.620
So you can do, like you have this idea of running your code in a thread,


00:08:14.620 --> 00:08:17.660
because it's not async, but you want it to be concurrent and mix it in.


00:08:17.660 --> 00:08:19.340
You can do the same thing with subprocess,


00:08:19.340 --> 00:08:20.540
and this is super cool.


00:08:20.540 --> 00:08:22.580
So you can say, just run process,


00:08:22.580 --> 00:08:24.620
and then it becomes something that's a task


00:08:24.620 --> 00:08:27.940
that you can await along with your other things, which is sweet.


00:08:27.940 --> 00:08:30.980
Then you can even go as far as to open the process,


00:08:30.980 --> 00:08:33.540
and then like asynchronously work with it.


00:08:33.540 --> 00:08:36.400
So here's an example of where you open some process


00:08:36.400 --> 00:08:38.620
and then you create a text receive stream


00:08:38.620 --> 00:08:40.500
from its standard out and you just cruise around


00:08:40.500 --> 00:08:41.820
and read from it while it's running,


00:08:41.820 --> 00:08:43.060
awaiting all the time.


00:08:43.060 --> 00:08:43.900
- Wow.


00:08:43.900 --> 00:08:44.720
- That's neat, right?


00:08:44.720 --> 00:08:45.560
- Yeah.


00:08:45.560 --> 00:08:49.280
So it just, it grabs it while it's printing out?


00:08:49.280 --> 00:08:51.480
- Yeah, so basically what I think it does


00:08:51.480 --> 00:08:53.740
is it creates a stream that you can await


00:08:53.740 --> 00:08:57.180
and then it's just listening for process messages


00:08:57.180 --> 00:08:59.380
to come through and then it, you know,


00:08:59.380 --> 00:09:02.020
like the task kind of partially completes, right?


00:09:02.020 --> 00:09:04.180
'Cause it's an async for loop.


00:09:04.180 --> 00:09:06.460
So you asynchronously wait for an item to come in


00:09:06.460 --> 00:09:07.880
and then it kicks it one time around the loop


00:09:07.880 --> 00:09:08.720
and then it waits again


00:09:08.720 --> 00:09:11.180
and yeah, it's pretty cool how it juggles that.


00:09:11.180 --> 00:09:16.000
And then finally here, the file support.


00:09:16.000 --> 00:09:18.120
So you can now, instead of saying open,


00:09:18.120 --> 00:09:20.660
you just say anyio.openfile,


00:09:20.660 --> 00:09:23.900
but you can async await it, you know,


00:09:23.900 --> 00:09:25.780
it's crazy, async with await,


00:09:25.780 --> 00:09:27.340
there's a lot of crazy stuff happening,


00:09:27.340 --> 00:09:29.220
but then you can await the reads and so on.


00:09:29.220 --> 00:09:33.460
Now there's not actual asynchronous behavior in Python.


00:09:33.460 --> 00:09:35.180
So how does it manage this?


00:09:35.180 --> 00:09:38.680
Basically it creates a wrapper that uses threads


00:09:38.680 --> 00:09:40.220
that does the file IO,


00:09:40.220 --> 00:09:42.700
and then it just sort of coordinates the communication


00:09:42.700 --> 00:09:44.900
of the IO back and forth on the threads


00:09:44.900 --> 00:09:46.180
as soon as it comes back from IO,


00:09:46.180 --> 00:09:47.300
which should release the GIL


00:09:47.300 --> 00:09:49.820
'cause it's off doing its own thing in the OS.


00:09:49.820 --> 00:09:51.420
So it should be pretty good anyway, yeah.


00:09:51.420 --> 00:09:53.080
- It looks like maybe, I haven't used this,


00:09:53.080 --> 00:09:57.100
but it looks like it makes things like subprocesses


00:09:57.100 --> 00:10:02.440
threads and normal async and await all kind of look the same.


00:10:02.440 --> 00:10:05.320
>> Yeah, exactly. It's like a unifying API


00:10:05.320 --> 00:10:08.640
across the different scenarios, which is really cool.


00:10:08.640 --> 00:10:11.000
Once you wrap it, you're like, "Oh, there's just a bunch of task.


00:10:11.000 --> 00:10:13.320
I just call await on them, good to go."


00:10:13.320 --> 00:10:16.960
>> Nice. Then possibly it wouldn't be too much if you had to change


00:10:16.960 --> 00:10:21.240
your mind and have something be a sub-process or a thread.


00:10:21.240 --> 00:10:24.760
Instead, it might not wreak havoc on your design too much.


00:10:24.760 --> 00:10:27.640
>> Yeah, exactly. You almost don't even have to worry about it.


00:10:27.640 --> 00:10:31.680
Long as the parameters can be passed,


00:10:31.680 --> 00:10:36.360
they've got to be pickable to go across the wire there.


00:10:36.360 --> 00:10:39.880
But as long as they can be passed to the process as well as to a thread,


00:10:39.880 --> 00:10:42.240
then you just get a task back.


00:10:42.240 --> 00:10:43.520
Talks to you, it's cool.


00:10:43.520 --> 00:10:45.320
>> I'll definitely take a look at this.


00:10:45.320 --> 00:10:46.880
>> Just before I move off of this,


00:10:46.880 --> 00:10:48.000
I just want to say also,


00:10:48.000 --> 00:10:51.960
I interviewed Alex Gronholm over on Talk Python.


00:10:51.960 --> 00:10:53.880
When was that? September.


00:10:53.880 --> 00:10:55.420
actually released it in October though.


00:10:55.420 --> 00:10:57.300
So effectively October,


00:10:57.300 --> 00:10:58.940
or a couple of weeks ago,


00:10:58.940 --> 00:11:00.820
and people can check that out if they want to


00:11:00.820 --> 00:11:03.100
dive deep into it and hear my story.


00:11:03.100 --> 00:11:03.420
>> Nice.


00:11:03.420 --> 00:11:05.460
>> I feel like, yeah, thanks.


00:11:05.460 --> 00:11:07.660
I do just feel like any I/O sells itself a bit short.


00:11:07.660 --> 00:11:09.500
Say, no, it's like a network library.


00:11:09.500 --> 00:11:10.940
Like, oh, I don't need a network library,


00:11:10.940 --> 00:11:11.880
but now there's like


00:11:11.880 --> 00:11:13.460
all these little cool building blocks in there.


00:11:13.460 --> 00:11:15.280
>> Pretty cool. Have you used it?


00:11:15.280 --> 00:11:17.260
Is it pretty nice to use?


00:11:17.260 --> 00:11:18.380
>> I've not used it.


00:11:18.380 --> 00:11:18.820
>> Okay.


00:11:18.820 --> 00:11:21.100
>> I'm still working on getting


00:11:21.100 --> 00:11:24.420
my interesting projects more async capable,


00:11:24.420 --> 00:11:26.500
before, for example,


00:11:26.500 --> 00:11:30.060
getting some of the web stuff in the front end can be more async and so on.


00:11:30.060 --> 00:11:34.140
Then I can start bringing these fun ideas and more Unreal projects.


00:11:34.140 --> 00:11:35.640
Back to your topic real quick,


00:11:35.640 --> 00:11:37.260
Brandon, an audience says,


00:11:37.260 --> 00:11:39.720
"If one was looking at submitting to PyCon,


00:11:39.720 --> 00:11:42.660
what's the difference between a tutorial versus a talk?"


00:11:42.660 --> 00:11:44.100
Time? What else, Brian?


00:11:44.100 --> 00:11:45.100
Hands-on exercises?


00:11:45.100 --> 00:11:47.020
>> Right. Tutorials are what,


00:11:47.020 --> 00:11:48.620
like three hours or something?


00:11:48.620 --> 00:11:50.620
I can't remember how long they are.


00:11:50.620 --> 00:11:53.100
>> Okay, so there are three hours.


00:11:53.100 --> 00:11:54.140
They're also at a different time,


00:11:54.140 --> 00:11:55.620
so they're not on the same day.


00:11:55.620 --> 00:11:57.340
>> The day before or something in the main conference.


00:11:57.340 --> 00:11:59.740
>> I think there are two or three days before.


00:11:59.740 --> 00:12:01.980
I can't remember how many days before they run them.


00:12:01.980 --> 00:12:02.900
I should have looked this up.


00:12:02.900 --> 00:12:03.260
>> Yeah.


00:12:03.260 --> 00:12:04.460
>> But they're before the conference,


00:12:04.460 --> 00:12:08.300
so you have more hotel tickets to get, for instance.


00:12:08.300 --> 00:12:11.140
But since it's three hours and a talk is what?


00:12:11.140 --> 00:12:12.860
Like 25 minutes or something?


00:12:12.860 --> 00:12:13.780
>> Yeah.


00:12:13.780 --> 00:12:17.180
>> Since there are more work to prepare for a tutorial,


00:12:17.180 --> 00:12:19.940
you get paid for it. You get a little stipend.


00:12:19.940 --> 00:12:24.180
but also people have to pay to go to the tutorial.


00:12:24.180 --> 00:12:26.340
But I think there are cool things.


00:12:26.340 --> 00:12:31.180
I know a handful of the people we know do like to do tutorials if they can.


00:12:31.180 --> 00:12:33.620
>> Yeah. I think it's also a lot more guiding people


00:12:33.620 --> 00:12:36.380
through hands-on coding than it is,


00:12:36.380 --> 00:12:37.820
I'm here to present.


00:12:37.820 --> 00:12:40.860
>> Yeah. It shouldn't be a three-hour presentation.


00:12:40.860 --> 00:12:42.980
It's like we're going to present something and


00:12:42.980 --> 00:12:45.360
then have exercises for people to work on.


00:12:45.360 --> 00:12:47.580
People bring their laptops in and stuff like that.


00:12:47.580 --> 00:12:48.820
>> Yeah.


00:12:48.820 --> 00:12:52.660
>> But there's also one of the things that people forget about is posters.


00:12:52.660 --> 00:12:54.160
Posters are also pretty cool.


00:12:54.160 --> 00:12:56.460
On the last day of the con, Sunday,


00:12:56.460 --> 00:12:59.740
I think it's on Sunday, they have the posters up.


00:12:59.740 --> 00:13:01.360
>> The posters and the job fair, right?


00:13:01.360 --> 00:13:04.280
>> Yeah, I think so. The job fair and the posters at the same time.


00:13:04.280 --> 00:13:06.820
It really literally is a poster.


00:13:06.820 --> 00:13:09.500
If you get one of the poster spots,


00:13:09.500 --> 00:13:12.980
you get a section where you get to have your poster up,


00:13:12.980 --> 00:13:15.580
and you can describe whatever you want on there.


00:13:15.580 --> 00:13:18.380
Hopefully, it's fairly entertaining to look at and read.


00:13:18.380 --> 00:13:19.440
And then you get to hang out.


00:13:19.440 --> 00:13:22.780
So let's say you've got a project you wanted to talk to people about.


00:13:22.780 --> 00:13:24.480
It's not really a presentation.


00:13:24.480 --> 00:13:26.880
You have your poster up and you just hang out there and then people


00:13:26.880 --> 00:13:28.640
come around and ask you questions.


00:13:28.640 --> 00:13:29.460
Yeah, that's pretty neat.


00:13:29.460 --> 00:13:29.880
Absolutely.


00:13:29.880 --> 00:13:30.240
Yeah.


00:13:30.240 --> 00:13:30.560
Yeah.


00:13:30.560 --> 00:13:33.180
If you want to have a chance to just have a conversation around something


00:13:33.180 --> 00:13:35.540
you're working on, but not go all in on a talk.


00:13:35.540 --> 00:13:37.280
I tried to submit a keynote once.


00:13:37.280 --> 00:13:38.200
Turns out you can't do it.


00:13:38.200 --> 00:13:40.780
Oh, are they, did they ask people or something?


00:13:40.780 --> 00:13:43.540
So keynotes are invite only Michael, you can't submit a keynote.


00:13:43.540 --> 00:13:44.940
I'm like, well, I'm submitting one.


00:13:44.940 --> 00:13:46.220
You can turn it down if you want.


00:13:46.220 --> 00:13:47.340
They did.


00:13:47.340 --> 00:13:47.840
It's all right.


00:13:48.220 --> 00:13:51.940
Okay, now I want to tell you about one more thing awesome.


00:13:51.940 --> 00:13:53.700
One awesome thing before we move on, Brian,


00:13:53.700 --> 00:13:57.820
I'll tell you about compiler podcasts from Red Hat.


00:13:57.820 --> 00:14:02.340
Super cool to have Red Hat come along and support in the show.


00:14:02.340 --> 00:14:04.540
Like pretty much everyone listening,


00:14:04.540 --> 00:14:06.100
you and I, we're fans of podcasts,


00:14:06.100 --> 00:14:10.500
and so it's awesome to have this compiler from Red Hat supporting the show.


00:14:10.500 --> 00:14:12.780
Really, really good show that they have themselves.


00:14:12.780 --> 00:14:15.900
It's very highly edited and polished, so that's excellent.


00:14:15.900 --> 00:14:19.240
If you want to stay on top of tech without dedicating tons of time to it,


00:14:19.240 --> 00:14:20.700
you can listen to Compiler.


00:14:20.700 --> 00:14:24.700
They present different perspectives and topics and insights from the tech industry,


00:14:24.700 --> 00:14:26.540
free from jargon and judgment.


00:14:26.540 --> 00:14:29.960
If you want to discover where technology is headed beyond the headlines


00:14:29.960 --> 00:14:33.540
and create a place for new IT professionals to learn, grow, and thrive,


00:14:33.540 --> 00:14:36.220
they help people break through barriers and challenges,


00:14:36.220 --> 00:14:39.420
turning code into community at all the levels of the enterprise.


00:14:39.420 --> 00:14:43.680
One recent interesting episode is the one about the great stack debate.


00:14:43.680 --> 00:14:47.520
I love love love talking about talking to people about their architecture and


00:14:47.520 --> 00:14:50.120
the trade-offs and choices that they made and


00:14:50.120 --> 00:14:52.420
what the costs and challenges and you know,


00:14:52.420 --> 00:14:54.220
smiles and frowns that result from that.


00:14:54.220 --> 00:14:57.260
So you can definitely check out the Great Stack Debate. That's a fun one.


00:14:57.260 --> 00:14:59.160
They answer the question of whether


00:14:59.160 --> 00:15:01.660
software is like an onion or like it's lasagna


00:15:01.660 --> 00:15:04.360
or whether it's some other more complicated dish.


00:15:04.360 --> 00:15:05.700
So you can check that. That's a lot of fun.


00:15:05.700 --> 00:15:07.360
And it's actually the first... Yeah, go ahead.


00:15:07.360 --> 00:15:09.900
>> Looks like the most recent one is about testing too.


00:15:09.900 --> 00:15:11.240
I better check that out.


00:15:11.240 --> 00:15:12.580
- Yeah, you gotta get in there.


00:15:12.580 --> 00:15:15.480
They have a whole series on the compiler,


00:15:15.480 --> 00:15:17.400
the compiler series on software stacks.


00:15:17.400 --> 00:15:19.360
And I guess testing is an important part of that.


00:15:19.360 --> 00:15:20.200
It's awesome.


00:15:20.200 --> 00:15:23.800
- Yeah, so learn about compiler at pythonbytes.fm/compiler.


00:15:23.800 --> 00:15:26.000
The link is in your podcast player show notes.


00:15:26.000 --> 00:15:28.400
I know you could just search for compiler and sign up,


00:15:28.400 --> 00:15:31.280
but follow the link and click on your podcast player there


00:15:31.280 --> 00:15:32.400
and subscribe that way.


00:15:32.400 --> 00:15:34.560
It would really help us let them know


00:15:34.560 --> 00:15:35.960
that you heard about them from us.


00:15:35.960 --> 00:15:39.000
So thanks to compiler for keeping this show going strong.


00:15:39.000 --> 00:15:40.560
All right, Brian, what's next?


00:15:40.560 --> 00:15:42.920
- Well, I was gonna talk about conference talks.


00:15:42.920 --> 00:15:45.280
(laughing)


00:15:45.280 --> 00:15:46.120
So some more.


00:15:46.120 --> 00:15:48.480
So I think everybody should try


00:15:48.480 --> 00:15:52.800
'cause I actually, I was terrified to do my first talk


00:15:52.800 --> 00:15:54.080
and I think it was a good experience.


00:15:54.080 --> 00:15:58.520
So Ruven Lerner, Ruven Lerner, friend of the show


00:15:58.520 --> 00:16:00.720
and all around awesome guy,


00:16:00.720 --> 00:16:01.720
wrote an article called


00:16:01.720 --> 00:16:04.360
"How to Propose a Winning Conference Talk."


00:16:04.360 --> 00:16:05.480
So we're linking to that.


00:16:05.480 --> 00:16:08.880
And there's a lot of articles on how to do a talk.


00:16:08.880 --> 00:16:12.060
and what I really like about this is it's short.


00:16:12.060 --> 00:16:13.960
(laughs)


00:16:13.960 --> 00:16:17.120
There's a few things that he focuses on.


00:16:17.120 --> 00:16:19.800
One of the first is coming up with ideas.


00:16:19.800 --> 00:16:24.800
And he, part of his audience is also other trainers.


00:16:24.800 --> 00:16:28.700
But I think that more people are trainers than you realize.


00:16:28.700 --> 00:16:32.560
So maybe you actually teach people like Reuven does


00:16:32.560 --> 00:16:35.600
or you have a training gig.


00:16:35.600 --> 00:16:39.500
But you could teach, mentor, or lead, or coach in other ways


00:16:39.500 --> 00:16:44.600
just by being the resident Python guy, or girl, or woman,


00:16:44.600 --> 00:16:46.960
or whatever at your company when people come to you


00:16:46.960 --> 00:16:48.000
and ask questions.


00:16:48.000 --> 00:16:50.600
So some of those things are to come up


00:16:50.600 --> 00:16:52.180
with a list of things to talk about.


00:16:52.180 --> 00:16:54.600
What questions do people ask you all the time?


00:16:54.600 --> 00:16:57.120
Those are great things to write talks about, maybe.


00:16:57.120 --> 00:16:59.300
What knowledge-- what knowledge do


00:16:59.300 --> 00:17:01.000
you think people should have that they just


00:17:01.000 --> 00:17:02.600
don't know to ask about?


00:17:02.600 --> 00:17:04.080
Those are also great topics.


00:17:04.080 --> 00:17:08.580
And then also, where do you see that people just don't seem to get it?


00:17:08.580 --> 00:17:11.440
And so somehow they're not getting some concept,


00:17:11.440 --> 00:17:14.360
they don't quite get it from whatever they've sought out.


00:17:14.360 --> 00:17:15.520
Those are also great things.


00:17:15.520 --> 00:17:20.200
And if you're still stumped, he says, well, check out Stack Overflow.


00:17:20.200 --> 00:17:22.640
What kind of questions come up there all the time?


00:17:22.640 --> 00:17:25.560
Those are good things to maybe give a talk about.


00:17:25.560 --> 00:17:27.800
>> Hey, I got a cheat code for people listening.


00:17:27.800 --> 00:17:28.360
>> Okay.


00:17:28.360 --> 00:17:32.160
>> What awesome thing did you hear about on Python Bytes that was new to you?


00:17:32.160 --> 00:17:33.720
And there's not a talk at the conference.


00:17:33.720 --> 00:17:34.560
- I'm serious.


00:17:34.560 --> 00:17:35.940
- Yeah, exactly.


00:17:35.940 --> 00:17:40.080
Rewind a handful of episodes and go through and go,


00:17:40.080 --> 00:17:41.320
that sounds interesting.


00:17:41.320 --> 00:17:43.600
And spend a few hours researching it


00:17:43.600 --> 00:17:45.080
and come up with a talk, why not?


00:17:45.080 --> 00:17:45.920
- Right, right.


00:17:45.920 --> 00:17:47.240
It's interesting to me, I wanna learn it


00:17:47.240 --> 00:17:48.520
and then I could present it.


00:17:48.520 --> 00:17:50.680
You could test drive these things also


00:17:50.680 --> 00:17:52.200
at smaller regional conferences.


00:17:52.200 --> 00:17:54.480
You could test drive them at meetups.


00:17:54.480 --> 00:17:56.840
You could test drive them as like a YouTube video


00:17:56.840 --> 00:17:58.920
that you post somewhere or even a blog post, you're right.


00:17:58.920 --> 00:18:01.080
Like there's a bunch of, let me take a shot at it


00:18:01.080 --> 00:18:02.480
and then build some confidence


00:18:02.480 --> 00:18:06.460
and then submit it to PyCon US or Europe or wherever.


00:18:06.460 --> 00:18:07.560
- Yeah.


00:18:07.560 --> 00:18:12.260
He goes on to talk about using an outline.


00:18:12.260 --> 00:18:16.440
And even if you don't go for a talk,


00:18:16.440 --> 00:18:18.040
maybe, I don't remember,


00:18:18.040 --> 00:18:21.340
I think PyCon US does ask for this, but some don't.


00:18:21.340 --> 00:18:23.400
But even if it's not asked for,


00:18:23.400 --> 00:18:25.400
come up with an outline with times.


00:18:25.400 --> 00:18:26.880
And that part freaked me out.


00:18:26.880 --> 00:18:28.880
I'm like, how do I do that?


00:18:28.880 --> 00:18:32.480
But his example is fairly not scary.


00:18:32.480 --> 00:18:34.980
It's kind of the bullet points of the sort of stuff


00:18:34.980 --> 00:18:36.160
you're gonna talk about


00:18:36.160 --> 00:18:38.480
and how long you intend to talk about it.


00:18:38.480 --> 00:18:41.480
And this is actually really important.


00:18:41.480 --> 00:18:43.600
When I finally embraced this and went,


00:18:43.600 --> 00:18:45.440
I gotta think about this.


00:18:45.440 --> 00:18:48.000
And I kind of do this hand in hand with the next step.


00:18:48.000 --> 00:18:52.840
The next step, he said, is you don't just need an outline,


00:18:52.840 --> 00:18:53.800
you need a summary.


00:18:53.800 --> 00:18:55.320
And you kind of need a short summary


00:18:55.320 --> 00:18:57.560
and a long summary, possibly.


00:18:57.560 --> 00:19:00.440
And that's, and you should include,


00:19:00.440 --> 00:19:02.720
I can't remember where I wrote this down,


00:19:02.720 --> 00:19:06.040
but you should include, what is it?


00:19:06.040 --> 00:19:07.600
The value that people get,


00:19:07.600 --> 00:19:09.600
what benefit they'll get from your talk


00:19:09.600 --> 00:19:11.200
and what knowledge they'll get,


00:19:11.200 --> 00:19:13.400
what they'll have when they leave your talk


00:19:13.400 --> 00:19:15.080
and how will that help them.


00:19:15.080 --> 00:19:16.540
And think about those


00:19:16.540 --> 00:19:17.960
and that while you're putting through


00:19:17.960 --> 00:19:19.680
your outline together too,


00:19:19.680 --> 00:19:21.480
as to where you wanna spend your time.


00:19:21.480 --> 00:19:23.160
And, you know, be paying attention


00:19:23.160 --> 00:19:26.800
that you do want to have some wrap up time possibly


00:19:26.800 --> 00:19:29.240
and you might want some introduction time,


00:19:29.240 --> 00:19:31.500
so include that and think about those times.


00:19:31.500 --> 00:19:34.760
And then you've got just these little tiny one or two minute,


00:19:34.760 --> 00:19:36.600
one or two or three or four minute segments


00:19:36.600 --> 00:19:39.480
that you've got to come up with words for.


00:19:39.480 --> 00:19:42.600
And that's actually a lot easier to deal with


00:19:42.600 --> 00:19:45.880
than thinking I got to come up with 25 minutes.


00:19:45.880 --> 00:19:47.160
- Right, right, yeah.


00:19:47.160 --> 00:19:50.120
Like an example here, it says generate warnings, two minutes.


00:19:50.120 --> 00:19:51.200
Could you spend two minutes


00:19:51.200 --> 00:19:52.520
talking about generating warnings?


00:19:52.520 --> 00:19:53.760
I imagine you could.


00:19:55.080 --> 00:19:58.720
- Yeah, and if it's important, throw some time into it.


00:19:58.720 --> 00:20:02.480
But one of the things I wanted to highlight on this,


00:20:02.480 --> 00:20:04.360
I really like this write-up.


00:20:04.360 --> 00:20:05.880
He also, a couple more things.


00:20:05.880 --> 00:20:09.320
One is submit the same talk to multiple conferences.


00:20:09.320 --> 00:20:11.600
You can do that, and you don't even have,


00:20:11.600 --> 00:20:12.800
it doesn't even have to be new.


00:20:12.800 --> 00:20:16.040
You could have already submitted, presented it somewhere,


00:20:16.040 --> 00:20:18.120
and it might already be on YouTube.


00:20:18.120 --> 00:20:20.840
And you're like, really, I can do that?


00:20:20.840 --> 00:20:23.000
Yes, really, you can do that.


00:20:23.000 --> 00:20:25.040
Some people give talks at multiple conferences,


00:20:25.040 --> 00:20:26.520
and it's fine, you don't have to come up


00:20:26.520 --> 00:20:28.680
with a brand new talk for every conference.


00:20:28.680 --> 00:20:32.200
The other thing is the list of topics.


00:20:32.200 --> 00:20:35.560
My mistake the first time I gave a talk was I did this.


00:20:35.560 --> 00:20:38.140
I went, what are all the things I'd like to talk about?


00:20:38.140 --> 00:20:41.560
And then I crammed them all into one talk.


00:20:41.560 --> 00:20:42.920
This is not what you wanna do.


00:20:42.920 --> 00:20:45.640
You wanna pick like, you know, one focused thing


00:20:45.640 --> 00:20:48.740
so that you can go at a reasonably comfortable pace.


00:20:48.740 --> 00:20:51.280
You don't wanna be talking at 100 miles an hour


00:20:51.280 --> 00:20:52.720
or people can't keep up with you.


00:20:52.720 --> 00:20:55.960
There are some people, don't get me wrong,


00:20:55.960 --> 00:20:58.000
there's some people that can talk really fast


00:20:58.000 --> 00:20:59.160
and pack a lot of information


00:20:59.160 --> 00:21:00.280
and they're really good about it,


00:21:00.280 --> 00:21:01.640
and it's still entertaining.


00:21:01.640 --> 00:21:04.120
But I think the average person would be better


00:21:04.120 --> 00:21:06.440
at trying to go at a little slower pace.


00:21:06.440 --> 00:21:08.840
- Yep, yeah, I totally agree about that.


00:21:08.840 --> 00:21:10.240
And that could be your,


00:21:10.240 --> 00:21:11.360
like you could come up with that list


00:21:11.360 --> 00:21:12.800
of all the things you wanna talk about,


00:21:12.800 --> 00:21:15.720
and then that could be the source for two or three talks.


00:21:15.720 --> 00:21:16.560
- Yeah, yep.


00:21:16.560 --> 00:21:18.080
- Like, oh, this is kind of like,


00:21:18.080 --> 00:21:19.800
this all stuff seems to be about fixtures,


00:21:19.800 --> 00:21:21.600
so let's do like five things


00:21:21.600 --> 00:21:23.200
that are awesome about fixtures you didn't know.


00:21:23.200 --> 00:21:26.480
And here's like why you should care about structuring your,


00:21:26.480 --> 00:21:27.400
I don't know, whatever.


00:21:27.400 --> 00:21:28.600
- And if they get rejected,


00:21:28.600 --> 00:21:31.000
but from every conference that you submitted to,


00:21:31.000 --> 00:21:34.420
you're still won because you did all that work.


00:21:34.420 --> 00:21:37.160
Just turn it into like a blog post


00:21:37.160 --> 00:21:39.520
or a YouTube video or something.


00:21:39.520 --> 00:21:40.560
- Yeah, absolutely.


00:21:40.560 --> 00:21:42.400
A bunch of good feedback from the audience.


00:21:42.400 --> 00:21:44.520
John out there says, "A great place to give a talk


00:21:44.520 --> 00:21:45.960
is at the user group."


00:21:45.960 --> 00:21:48.240
Kind of matched exactly the same time I said that,


00:21:48.240 --> 00:21:50.320
so definitely agree in there.


00:21:50.320 --> 00:21:52.960
Brandon says, "Give it a lunch and learn at your company."


00:21:52.960 --> 00:21:53.800
- Great idea.


00:21:53.800 --> 00:21:55.080
- Yeah, that's a really good idea.


00:21:55.080 --> 00:21:57.720
And casual viewer number three,


00:21:57.720 --> 00:21:59.640
says, "My team has a show and tell,


00:21:59.640 --> 00:22:01.600
like meeting on Fridays to show off stuff


00:22:01.600 --> 00:22:03.840
people can talk about that'd be impactful.


00:22:03.840 --> 00:22:04.660
Also a good place."


00:22:04.660 --> 00:22:05.600
Yeah, a lot of good ideas.


00:22:05.600 --> 00:22:06.760
If the venue doesn't exist,


00:22:06.760 --> 00:22:08.280
you may well be able to create it.


00:22:08.280 --> 00:22:10.980
- Yeah, and you might get promoted because of it,


00:22:10.980 --> 00:22:12.800
'cause you're like, "Oh, people will know


00:22:12.800 --> 00:22:14.120
that you're the expert in the company


00:22:14.120 --> 00:22:15.320
that they didn't know before."


00:22:15.320 --> 00:22:16.800
It's good to know. - That's right, that's right.


00:22:16.800 --> 00:22:18.540
All right, I wanna come back to something


00:22:18.540 --> 00:22:22.460
that I know we talked about before, but a feature of it.


00:22:22.460 --> 00:22:25.080
So we talked about Sanic when it came out,


00:22:25.080 --> 00:22:27.740
there was Sanic and Gepronto and a couple other things.


00:22:27.740 --> 00:22:30.180
This I believe predates FastAPI even,


00:22:30.180 --> 00:22:34.060
and it was one of the very first high performance


00:22:34.060 --> 00:22:35.900
async frameworks for Python.


00:22:35.900 --> 00:22:37.060
Very cool.


00:22:37.060 --> 00:22:38.940
I hadn't really been tracking it that much lately,


00:22:38.940 --> 00:22:41.380
but if you drop over by the GitHub,


00:22:41.380 --> 00:22:44.380
github.com/sanic-org, go to Sanic,


00:22:44.380 --> 00:22:48.500
16,000 stars, 1,500 forks, it's going really strong.


00:22:48.500 --> 00:22:52.300
I totally did not, I've not been tracking it well enough.


00:22:52.300 --> 00:22:54.500
So this is really fantastic.


00:22:54.500 --> 00:22:58.500
So cool way to build asynchronous web apps in Python.


00:22:58.500 --> 00:23:02.640
It claims to be unopinionated and flexible.


00:23:02.640 --> 00:23:05.460
It is the plastic that you build your APIs


00:23:05.460 --> 00:23:07.660
and your web apps out of as you like,


00:23:07.660 --> 00:23:09.260
rather than being very structured


00:23:09.260 --> 00:23:10.420
in the way you put stuff together.


00:23:10.420 --> 00:23:12.620
So if you're looking for that, good.


00:23:12.620 --> 00:23:15.020
it's, I said, super fast.


00:23:15.020 --> 00:23:17.340
That was its original selling point


00:23:17.340 --> 00:23:19.340
and apparently used by millions of people,


00:23:19.340 --> 00:23:20.740
which is pretty awesome.


00:23:20.740 --> 00:23:24.200
So what I wanna point out here is not Sanic exactly,


00:23:24.200 --> 00:23:28.100
but rather a new feature that was shared with us by Felix.


00:23:28.100 --> 00:23:31.780
And Felix pointed out that Adam, one of the maintainers,


00:23:31.780 --> 00:23:36.420
just added this concept of a worker manager


00:23:36.420 --> 00:23:37.820
into the new version of Sanic.


00:23:37.820 --> 00:23:41.940
So if you wanna run background work,


00:23:41.940 --> 00:23:45.340
like I want to send an email or I want to send,


00:23:45.340 --> 00:23:47.500
I do other like lots of processing


00:23:47.500 --> 00:23:49.900
or computational work in the background.


00:23:49.900 --> 00:23:52.540
It's going to block up not just a single request,


00:23:52.540 --> 00:23:54.180
but it's going to block up potentially


00:23:54.180 --> 00:23:55.420
the whole web server, right?


00:23:55.420 --> 00:23:57.540
You get a bunch of things that are querying tons of data


00:23:57.540 --> 00:23:59.300
or doing a bunch of computation,


00:23:59.300 --> 00:24:01.580
then all of a sudden, or even calling other APIs,


00:24:01.580 --> 00:24:03.740
potentially that could log up the server,


00:24:03.740 --> 00:24:05.740
especially if it can't be done asynchronously.


00:24:05.740 --> 00:24:09.580
So they added this concept of kind of like


00:24:09.580 --> 00:24:11.420
a lightweight celery type of thing


00:24:11.420 --> 00:24:14.780
where you can push the work off to it and have it run in the background and manage that.


00:24:14.780 --> 00:24:15.180
>> Okay.


00:24:15.180 --> 00:24:18.220
>> Step four is just an API inside of Sanic,


00:24:18.220 --> 00:24:20.100
and it starts a sub-process that


00:24:20.100 --> 00:24:22.340
hangs around and does that background work for you.


00:24:22.340 --> 00:24:24.620
So it's like you don't have to manage another server,


00:24:24.620 --> 00:24:26.860
you don't have to set up Celery or Redis and then


00:24:26.860 --> 00:24:30.720
some worker mechanism to process the messages coming out of there.


00:24:30.720 --> 00:24:34.280
You just take the work over to this worker manager and off it goes.


00:24:34.280 --> 00:24:34.940
>> Nice.


00:24:34.940 --> 00:24:35.260
>> Yeah.


00:24:35.260 --> 00:24:35.740
>> That's pretty cool.


00:24:35.740 --> 00:24:36.220
>> Pretty cool.


00:24:36.220 --> 00:24:36.820
>> Yeah.


00:24:36.820 --> 00:24:40.600
>> Yeah. The way that it works is basically you can


00:24:40.600 --> 00:24:47.800
hook into some lifetime events, like you can use a decorator app dot before server start,


00:24:47.800 --> 00:24:51.560
and you can go make sure that there's a queue that can be used for the communication across


00:24:51.560 --> 00:24:56.040
that and then you can handle on request. And then when a request comes in, you can like


00:24:56.040 --> 00:25:00.240
push work over over to it. Yeah. Anyway, you can even get it to do like some cool little


00:25:00.240 --> 00:25:06.640
printout of like the status of what the workers are up to, and so on. So anyway, pretty neat.


00:25:06.640 --> 00:25:10.320
If you need to run asynchronous work, and you're looking at a web framework, you know,


00:25:10.320 --> 00:25:14.400
check out Sanic. It's got this cool feature and it's got a lot of nice async and await


00:25:14.400 --> 00:25:15.400
features as well.


00:25:15.400 --> 00:25:16.400
>> Cool. Nice.


00:25:16.400 --> 00:25:19.920
>> Yep. All right. That's it for our main items, isn't it?


00:25:19.920 --> 00:25:21.360
>> I guess it is, yeah.


00:25:21.360 --> 00:25:26.000
>> Before we move off this real quick, casual viewer says FastAPI is something similar called


00:25:26.000 --> 00:25:27.000
background task.


00:25:27.000 --> 00:25:28.000
>> Okay. Good to know.


00:25:28.000 --> 00:25:32.840
>> Yeah, and you can also build those out of your, on your own using like multiprocessing


00:25:32.840 --> 00:25:33.840
or something, but...


00:25:33.840 --> 00:25:34.840
>> Or any I/O.


00:25:34.840 --> 00:25:38.800
>> Or any I/O, for sure. One of the real challenges of all of those like roll your own things


00:25:38.800 --> 00:25:45.560
are usually what happens is you, you farm out your web server. So for example, on talk


00:25:45.560 --> 00:25:49.660
by the training, we have eight worker processes that are cruising around waiting and like,


00:25:49.660 --> 00:25:53.220
as far as they're concerned, they are the website, right? And if all those things start


00:25:53.220 --> 00:25:57.740
kicking off background work, and they start starting their own processes, it'll be like,


00:25:57.740 --> 00:26:02.340
why are there 17 worker processes cruising around? I don't know what's going on. So yeah,


00:26:02.340 --> 00:26:05.980
it's kind of cool to have something that's a little more structured like that. All right,


00:26:05.980 --> 00:26:07.340
You said you got some extras.


00:26:07.340 --> 00:26:08.700
Tell us about them.


00:26:08.700 --> 00:26:11.820
- Well, stuck on the presentation thing,


00:26:11.820 --> 00:26:14.780
but I ran across this article called


00:26:14.780 --> 00:26:17.540
Create Presentations from Jupyter Notebooks.


00:26:17.540 --> 00:26:19.940
And I just wanted to link to it.


00:26:19.940 --> 00:26:22.300
If you're thinking about doing a presentation


00:26:22.300 --> 00:26:24.900
and you want to possibly just use your Jupyter Notebook,


00:26:24.900 --> 00:26:26.140
apparently it's built in.


00:26:26.140 --> 00:26:28.900
I didn't know that it was just built in.


00:26:28.900 --> 00:26:31.820
So this just walks through the built-in features


00:26:31.820 --> 00:26:34.480
of how to, so you've got a Jupyter Notebook,


00:26:34.480 --> 00:26:37.880
You can even do some markdown.


00:26:37.880 --> 00:26:39.560
You can do markdown Jupyter anyway,


00:26:39.560 --> 00:26:42.440
but there's ways to have both code and markdown together


00:26:42.440 --> 00:26:47.080
with this, with IPython display markdown, which is cool.


00:26:47.080 --> 00:26:50.840
And then it goes through a couple more examples of things,


00:26:50.840 --> 00:26:52.680
but then there's this dropdown.


00:26:52.680 --> 00:26:57.680
You can just say view cell toolbar slideshow,


00:26:57.680 --> 00:27:03.160
and then you select slide for each of your little cells,


00:27:03.840 --> 00:27:06.340
and they become slides in your presentation.


00:27:06.340 --> 00:27:11.340
And then you can use the built-in NB convert


00:27:11.340 --> 00:27:14.920
that convert it to a presentation.


00:27:14.920 --> 00:27:17.960
So just got an HTML presentation right there.


00:27:17.960 --> 00:27:19.240
So that's pretty neat.


00:27:19.240 --> 00:27:23.060
- You can say slide, you can say it's a sub-slide,


00:27:23.060 --> 00:27:24.720
a fragment, you could skip,


00:27:24.720 --> 00:27:26.080
and you could even make it notes


00:27:26.080 --> 00:27:27.440
just for like a presentation view.


00:27:27.440 --> 00:27:30.040
That's pretty flexible per cell in Jupyter.


00:27:30.040 --> 00:27:30.880
That's awesome.


00:27:30.880 --> 00:27:33.200
- And then there's ways to either show it by default,


00:27:33.200 --> 00:27:36.400
it shows the code, but you can have it hide the code apparently.


00:27:36.400 --> 00:27:38.300
Then if you want to be able to,


00:27:38.300 --> 00:27:39.940
instead of doing the command line thing,


00:27:39.940 --> 00:27:42.780
if you want to toggle back and forth while you're developing it,


00:27:42.780 --> 00:27:46.300
they're recommending using the RISE extension.


00:27:46.300 --> 00:27:49.740
I'm like, is it really this easy?


00:27:49.740 --> 00:27:53.420
I tried it out and sure enough,


00:27:53.420 --> 00:27:56.940
I just went through some of the examples and it's really pretty cool.


00:27:56.940 --> 00:27:59.380
With RISE, you've got these examples.


00:27:59.380 --> 00:28:01.040
Then you can just, with RISE,


00:28:01.040 --> 00:28:03.920
you can just select this little icon here.


00:28:03.920 --> 00:28:07.960
It looks like a graph and it just enters into slideshow mode.


00:28:07.960 --> 00:28:11.960
>> Nice. What happens if you hit space in that mode?


00:28:11.960 --> 00:28:15.040
Does it automatically take you from one to one?


00:28:15.040 --> 00:28:16.680
Okay, cool. Very nice.


00:28:16.680 --> 00:28:20.160
>> You can do the arrows back and forth and stuff.


00:28:20.160 --> 00:28:24.840
It doesn't look as good as the actual presentation at the output,


00:28:24.840 --> 00:28:29.240
but especially if you're trying to toggle back and forth to see,


00:28:29.240 --> 00:28:31.740
like is my stuff too big?


00:28:31.740 --> 00:28:34.440
Like right now I would totally alter this


00:28:34.440 --> 00:28:37.380
because it doesn't look good right now.


00:28:37.380 --> 00:28:40.960
But that's kind of what you do with slideshows


00:28:40.960 --> 00:28:43.440
is you sort of work with them until they look good.


00:28:43.440 --> 00:28:46.800
But anyway, so this is something I wanted to share.


00:28:46.800 --> 00:28:49.760
It was just this, if you want to try using Jupyter


00:28:49.760 --> 00:28:51.720
for your presentation, here's a link,


00:28:51.720 --> 00:28:54.700
kind of maybe take a look at this article.


00:28:54.700 --> 00:28:57.040
The other thing I wanted to point out as an extra


00:28:57.040 --> 00:29:02.840
is what Python pytest as 7.2,


00:29:02.840 --> 00:29:04.560
pytest 7.2 released.


00:29:04.560 --> 00:29:06.440
I don't normally like, I mean,


00:29:06.440 --> 00:29:11.360
I'm personally ready to try every new release that comes out.


00:29:11.360 --> 00:29:14.680
But why I'm bringing this up is there's a couple of things


00:29:14.680 --> 00:29:18.520
that bit us at work and I wonder if they might bite you.


00:29:18.520 --> 00:29:22.320
The PyLibrary is now separated from pytest.


00:29:22.320 --> 00:29:25.640
So you don't get the PyLibrary by default when you


00:29:25.640 --> 00:29:28.120
import when you're installing pytest.


00:29:28.120 --> 00:29:30.240
If you are using the PyLibrary,


00:29:30.240 --> 00:29:32.720
you just have to make that one of your own requirements.


00:29:32.720 --> 00:29:35.520
>> You were cheating and not stating it as a requirement,


00:29:35.520 --> 00:29:37.400
because it'll always be there, we know.


00:29:37.400 --> 00:29:39.840
>> I don't think we were using it at all,


00:29:39.840 --> 00:29:41.620
but I think we may have declared


00:29:41.620 --> 00:29:44.080
like PyPath or something like that.


00:29:44.080 --> 00:29:44.440
>> Yeah.


00:29:44.440 --> 00:29:49.120
>> Whatever. A couple more things that I think is neat.


00:29:49.120 --> 00:29:50.760
A few releases ago,


00:29:50.760 --> 00:29:54.200
I added the test paths so that you can


00:29:54.200 --> 00:29:59.720
add import path for where your source code is.


00:29:59.720 --> 00:30:04.040
For this release, they added a shell style wildcard support.


00:30:04.040 --> 00:30:08.440
That's pretty cool. There's a whole bunch of cool features.


00:30:08.440 --> 00:30:11.520
Yeah, check out pytest if you're up for it.


00:30:11.520 --> 00:30:13.660
One of the things I'm really glad,


00:30:13.660 --> 00:30:14.920
they deprecated nose.


00:30:14.920 --> 00:30:17.480
I can't remember where it's listed here.


00:30:17.480 --> 00:30:18.880
But they're not using,


00:30:18.880 --> 00:30:21.480
so setup, that's just the keyword setup and teardown.


00:30:21.480 --> 00:30:22.860
You could define functions.


00:30:22.860 --> 00:30:26.780
you were able to define functions setup and tear down and those were run automatically,


00:30:26.780 --> 00:30:31.740
but those were run automatically because they were part of the nose support. So even if you


00:30:31.740 --> 00:30:36.700
don't know what nose is, if you're using those, those are deprecated, so stop using those.


00:30:36.700 --> 00:30:43.260
There's other ways to do setup and tear down with pytest. And so check that out if you're using that.


00:30:43.260 --> 00:30:48.380
And the first edition of the pytest book, I actually talked about setup and tear down.


00:30:48.380 --> 00:30:50.200
and luckily in the second edition,


00:30:50.200 --> 00:30:51.000
I took those out.


00:30:51.000 --> 00:30:53.320
>> Very good, you saw that coming.


00:30:53.320 --> 00:30:54.320
>> Awesome.


00:30:54.320 --> 00:30:59.520
>> Awesome. Cool. Bit of follow-up on your Jupyter item here.


00:30:59.520 --> 00:31:02.120
Henry Schreiner says, "You can also use this in labs,


00:31:02.120 --> 00:31:03.680
in JupyterLab, not the old notebook.


00:31:03.680 --> 00:31:05.260
Though if you want to use RISE,


00:31:05.260 --> 00:31:07.080
live editable presentations,


00:31:07.080 --> 00:31:08.620
that still requires the old notebook."


00:31:08.620 --> 00:31:10.480
>> Okay. So you can do


00:31:10.480 --> 00:31:12.800
use JupyterLab for presentations too. Awesome.


00:31:12.800 --> 00:31:14.400
>> Yeah. Very cool.


00:31:14.400 --> 00:31:17.960
Then also Brandon points out that background task


00:31:17.960 --> 00:31:21.920
from when we credited fast API may actually come from starlet.


00:31:21.920 --> 00:31:24.800
For those of you don't know, fast API is a layer on top of starlet.


00:31:24.800 --> 00:31:29.240
So a lot of times what people perceive as a fast API feature is actually a starlet feature.


00:31:29.240 --> 00:31:34.720
And it also Henry says it also now the notebooks now warn you


00:31:34.720 --> 00:31:38.720
if you return from a test on Pytest, sorry,


00:31:38.720 --> 00:31:41.320
now also warns you for a term from a Pytest function,


00:31:41.320 --> 00:31:43.200
this would be an error in Pytest 8.


00:31:43.200 --> 00:31:43.640
Okay.


00:31:43.640 --> 00:31:46.240
>> Yeah. Well, yeah, apparently some people were like


00:31:46.240 --> 00:31:48.680
returning true or false from their test functions


00:31:48.680 --> 00:31:53.000
and wanting that to indicate whether test passed or failed.


00:31:53.000 --> 00:31:53.880
Don't do that.


00:31:53.880 --> 00:31:55.680
>> Didn't you just parse the print statements?


00:31:55.680 --> 00:31:56.080
>> No.


00:31:56.080 --> 00:31:57.000
>> Or did you have an error?


00:31:57.000 --> 00:31:58.480
>> No, it's an exception.


00:31:58.480 --> 00:32:01.000
If an exception happens, that's a failure.


00:32:01.000 --> 00:32:03.560
>> Of course. All right. I got a few extras


00:32:03.560 --> 00:32:05.040
and we'll bust out some jokes.


00:32:05.040 --> 00:32:07.720
These are quick. Rich, the colorizing,


00:32:07.720 --> 00:32:11.840
formatting, awesome Tui foundation is great.


00:32:11.840 --> 00:32:13.920
now available on PyScript.


00:32:13.920 --> 00:32:18.360
So, Rich, yeah, you just do Rich things


00:32:18.360 --> 00:32:20.120
and just print this stuff all out.


00:32:20.120 --> 00:32:20.960
And guess what?


00:32:20.960 --> 00:32:25.140
It now comes out as like colorized output and HTML, I guess.


00:32:25.140 --> 00:32:28.240
I'm not sure where the destination is gonna land,


00:32:28.240 --> 00:32:30.000
but it says REPL.


00:32:30.000 --> 00:32:32.740
So I'm guessing maybe it prints out in the REPL there.


00:32:32.740 --> 00:32:34.180
Anyway, there's a bunch of notes


00:32:34.180 --> 00:32:35.560
on how to use Rich in PyScript.


00:32:35.560 --> 00:32:37.680
So if you like PyScript and you're tracking that project


00:32:37.680 --> 00:32:39.280
and you like Rich, put them together.


00:32:39.280 --> 00:32:41.720
Also, we talked about YouTube videos


00:32:41.720 --> 00:32:44.280
and you could make a talk, you could just make a video.


00:32:44.280 --> 00:32:46.720
So I did a Python 3.11 in


00:32:46.720 --> 00:32:50.800
100 seconds video that I released yesterday, day before.


00:32:50.800 --> 00:32:52.200
I think it was yesterday actually.


00:32:52.200 --> 00:32:54.040
Anyway, people can check that out if they've got


00:32:54.040 --> 00:32:56.040
a 100 seconds to spare and they want to know what's cool


00:32:56.040 --> 00:32:58.960
about Python 3.11 and why it's neat.


00:32:58.960 --> 00:33:01.380
That's fun. Links in the show notes there.


00:33:01.380 --> 00:33:02.840
All right. Ready for some jokes?


00:33:02.840 --> 00:33:03.440
>> Yes.


00:33:03.440 --> 00:33:05.580
>> Okay. So here's one.


00:33:05.580 --> 00:33:08.920
It's titled Laughter in Linux, but it's about Windows.


00:33:08.920 --> 00:33:10.920
So you might have to go back a ways for


00:33:10.920 --> 00:33:12.780
people that get this joke, but let's see.


00:33:12.780 --> 00:33:14.620
So I know you spend some time in Windows, Brian.


00:33:14.620 --> 00:33:15.540
Let me see what you think about this.


00:33:15.540 --> 00:33:20.520
So here's like a sort of a karate master type of scenario.


00:33:20.520 --> 00:33:25.060
And like sensei says, just time for you to look inward and start


00:33:25.060 --> 00:33:26.580
asking yourself the big question.


00:33:26.580 --> 00:33:28.180
What happened to the A and B drive?


00:33:28.180 --> 00:33:30.980
Because it's all you see, right?


00:33:30.980 --> 00:33:31.480
Where did it go?


00:33:31.480 --> 00:33:32.140
>> Let me see.


00:33:32.140 --> 00:33:34.220
>> It used to make that noise.


00:33:34.220 --> 00:33:35.900
[MAKES NOISE]


00:33:35.900 --> 00:33:38.020
Pretty much if it's not a C drive, it makes noise.


00:33:38.020 --> 00:33:39.780
It's my understanding from my history.


00:33:40.060 --> 00:33:42.620
Some of them make that sort of a disky noise,


00:33:42.620 --> 00:33:44.180
other like a CD seeking noise,


00:33:44.180 --> 00:33:46.740
but there's always a noise associated with a non-C drive.


00:33:46.740 --> 00:33:48.900
I know that's not always true, but it's fun.


00:33:48.900 --> 00:33:53.420
All right, other one. This one is not about OSs and disks,


00:33:53.420 --> 00:33:56.180
but rather databases and it's dating advice.


00:33:56.180 --> 00:34:01.040
So here's a woman talking to a clearly nerdy programmer type.


00:34:01.040 --> 00:34:04.660
It says, "What do you need for a good relationship?"


00:34:04.660 --> 00:34:07.100
The guy looks at her, obviously primary keys.


00:34:07.100 --> 00:34:08.940
>> Primary keys.


00:34:09.620 --> 00:34:11.340
>> Yeah.


00:34:11.340 --> 00:34:13.740
>> So bad. Anyway, that's what I got.


00:34:13.740 --> 00:34:15.260
>> Dude from the IT crowd.


00:34:15.260 --> 00:34:16.980
>> Okay. Yeah. I need to watch


00:34:16.980 --> 00:34:19.580
more TV to fully catch the means, don't I?


00:34:19.580 --> 00:34:20.460
>> So.


00:34:20.460 --> 00:34:21.740
>> Yeah. Cool. All right.


00:34:21.740 --> 00:34:25.420
Well, always fun to have you here and do the show. Thanks.


00:34:25.420 --> 00:34:28.420
>> Definitely. Thanks. Thanks everybody for showing up an hour early.


00:34:28.420 --> 00:34:29.260
I really appreciate it.


00:34:29.260 --> 00:34:32.740
>> Yeah, absolutely. We'll try to stick to that time for a while,


00:34:32.740 --> 00:34:35.380
and I guess we'll let you know if we don't.


00:34:35.380 --> 00:34:37.940
All right. See you all later. Thanks.

