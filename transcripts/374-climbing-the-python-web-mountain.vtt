WEBVTT

00:00:00.000 --> 00:00:06.200
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:06.200 --> 00:00:11.600
This is episode 374 recorded March 11th, 2024.

00:00:11.600 --> 00:00:12.800
I am Michael Kennedy.

00:00:12.800 --> 00:00:14.000
And I'm Brian Okken.

00:00:14.000 --> 00:00:17.000
And this episode is brought to you by Scout APM.

00:00:17.000 --> 00:00:22.700
Check them out at pythonbytes.fm/scout.

00:00:22.700 --> 00:00:24.300
I'll tell you more about them later.

00:00:24.300 --> 00:00:27.500
If you'd like to connect with us, Mastodon is the main place.

00:00:27.500 --> 00:00:29.500
We're also on X Twitter.

00:00:29.500 --> 00:00:32.000
But primarily on Mastodon.

00:00:32.000 --> 00:00:36.300
And that's @mkennedy, @brianocken, and @pythonbytes all at mastodon.org.

00:00:36.300 --> 00:00:41.200
And watch us live, usually Tuesdays at 10 a.m. Pacific time.

00:00:41.200 --> 00:00:42.500
However, different today.

00:00:42.500 --> 00:00:44.900
But check it out at pythonbytes.fm/live.

00:00:44.900 --> 00:00:48.000
You'll be able to like get notified about the next upcoming recording.

00:00:48.000 --> 00:00:51.000
I usually put that up right after we're done with this one.

00:00:51.000 --> 00:00:55.000
Brian, before we jump into your first topic,

00:00:55.000 --> 00:00:59.200
I want to just take a moment and appreciate the beginning of summer.

00:00:59.200 --> 00:01:01.900
The first step towards summer coming.

00:01:01.900 --> 00:01:05.400
It is daylight savings switch over here in the U.S.

00:01:05.400 --> 00:01:07.300
And I know it is much maligned by people,

00:01:07.300 --> 00:01:11.900
but I was delighted to see the sun was up past 7 p.m. yesterday.

00:01:11.900 --> 00:01:15.100
After living in dark and rain for months and months,

00:01:15.100 --> 00:01:16.800
I'm feeling the summer.

00:01:16.800 --> 00:01:18.900
I know it's not quite there yet, but...

00:01:18.900 --> 00:01:22.400
Yeah, I didn't really notice it until after I woke up.

00:01:22.400 --> 00:01:22.900
Yeah.

00:01:22.900 --> 00:01:27.400
I woke up and I'm like, "Oh, gosh, I thought I'd slept in until like 10,

00:01:27.400 --> 00:01:32.100
but it was really 11. So, sleep the day away."

00:01:32.100 --> 00:01:33.800
Beautiful. Beautiful, beautiful.

00:01:33.800 --> 00:01:35.800
All right. Well, over to Python.

00:01:35.800 --> 00:01:36.600
What's your first thing?

00:01:36.600 --> 00:01:40.200
Okay. Well, I want to talk about spaghetti code a little bit.

00:01:40.200 --> 00:01:42.000
Actually, or how to fix it.

00:01:42.000 --> 00:01:43.300
So, there's an article...

00:01:43.300 --> 00:01:44.600
Is that what you get when you're real hungry?

00:01:44.600 --> 00:01:46.200
You're like, "What are you gonna have for dinner?

00:01:46.200 --> 00:01:47.800
Maybe some spaghetti code.

00:01:47.800 --> 00:01:50.500
A little carbonara?"

00:01:50.500 --> 00:01:52.800
Is that how you pronounce it?

00:01:52.800 --> 00:01:53.800
I've never been able to pronounce it.

00:01:53.800 --> 00:01:56.500
I'm probably gonna get emailed that it's not, but that's how I pronounce it.

00:01:56.500 --> 00:01:59.400
Article from somebody that goes by Piggly.

00:01:59.400 --> 00:02:04.300
"Six ways to improve the architecture of your Python project using import linter."

00:02:04.300 --> 00:02:08.700
And I kind of like this article, even if you don't want to use import linter.

00:02:08.700 --> 00:02:12.800
So, because of the six ways to improve the architecture, I love that.

00:02:12.800 --> 00:02:14.200
I love digging into that.

00:02:14.200 --> 00:02:17.900
So, and I actually have a couple projects that I'm working on

00:02:17.900 --> 00:02:20.900
that I would like to maybe clean up the architecture a bit.

00:02:20.900 --> 00:02:22.500
So, kind of a fun picture.

00:02:22.500 --> 00:02:23.800
Not sure what's going on here.

00:02:23.800 --> 00:02:26.400
Just a whole bunch of boxes pointing at each other.

00:02:26.400 --> 00:02:33.200
I guess just indicating that there's circular dependencies or something going on.

00:02:33.200 --> 00:02:40.200
And anyway, so a little bit of a discussion about why complex architecture might be bad,

00:02:40.200 --> 00:02:43.100
but I don't think any of us need convincing of that.

00:02:43.100 --> 00:02:44.600
Simplifying is a good thing.

00:02:44.600 --> 00:02:48.600
So, the first part talks about maybe setting up an idea of like,

00:02:48.600 --> 00:02:52.900
maybe you could, you have an idea of like setting your architecture into layers.

00:02:52.900 --> 00:02:58.100
If that's what you want to do, like a user layer or an application layer,

00:02:58.100 --> 00:03:01.100
plus a utilities or something services.

00:03:01.100 --> 00:03:06.900
But there's a tool called the import linter that there's a discussion about how to set it up

00:03:06.900 --> 00:03:15.000
so that you can use that to both configure what you want your layers to be and then test for it.

00:03:15.000 --> 00:03:18.900
It's like a linting to make sure that you're not importing in the wrong direction.

00:03:18.900 --> 00:03:21.100
So, the idea would be like, you're not importing,

00:03:21.100 --> 00:03:24.700
like if you want the top level one to be calling the lower level ones,

00:03:24.700 --> 00:03:25.900
but not the other way around.

00:03:25.900 --> 00:03:29.400
So, the importing is a way to test that.

00:03:29.400 --> 00:03:32.500
Because of that, I'm not sure what these arrows mean.

00:03:32.500 --> 00:03:36.900
Because it doesn't quite make sense if it's not an inheritance or calling.

00:03:36.900 --> 00:03:38.700
I don't know. Anyway, it's just an error.

00:03:38.700 --> 00:03:40.300
That looks pretty interesting.

00:03:40.300 --> 00:03:45.200
I think that means that something from that layer is importing something from the bottom layer,

00:03:45.200 --> 00:03:46.200
the lower layer.

00:03:46.200 --> 00:03:48.200
Yeah, but yeah.

00:03:48.200 --> 00:03:52.700
I think you can have stuff like import across within,

00:03:52.700 --> 00:03:57.800
but then it can only, I think it would be an error or a warning if maybe,

00:03:57.800 --> 00:04:01.100
say like the data layer imported the UI layer sort of thing.

00:04:01.100 --> 00:04:02.300
I think that's what it's saying.

00:04:02.300 --> 00:04:07.500
Yeah. Oh, and it makes more sense if I would have drawn the top layer at the top.

00:04:07.500 --> 00:04:10.000
I think it makes more sense to me if you do it the other way.

00:04:10.000 --> 00:04:12.400
Anyway, that's a drawing thing.

00:04:12.400 --> 00:04:13.400
It doesn't really matter.

00:04:13.400 --> 00:04:13.900
And also-

00:04:13.900 --> 00:04:17.000
It's probably by somebody in Australia because everything is upside down down there.

00:04:17.000 --> 00:04:18.000
Oh, yeah.

00:04:18.000 --> 00:04:19.000
That's probably it.

00:04:19.000 --> 00:04:19.800
Yeah, yeah. That was it.

00:04:19.800 --> 00:04:20.900
Okay.

00:04:20.900 --> 00:04:24.800
So what happens when you run this is you're probably-

00:04:24.800 --> 00:04:29.700
the recommendation is you're probably going to get a bunch of lint warnings or errors.

00:04:29.700 --> 00:04:32.800
And or maybe not, if not, awesome.

00:04:32.800 --> 00:04:37.200
But if you do, the recommendation here, which I kind of thought was cool,

00:04:37.200 --> 00:04:41.100
was to kind of exclude all of them.

00:04:41.100 --> 00:04:44.800
Like go through and add these ignore imports

00:04:44.800 --> 00:04:48.700
and just go through and ignore the ones that failed.

00:04:48.700 --> 00:04:52.400
And I'm like, okay, well, then you're going to pass and it's just going to ignore everything.

00:04:52.400 --> 00:04:55.300
But the idea behind it is to do it one at a time.

00:04:55.300 --> 00:04:57.700
So it's going to be overwhelming to get a bunch of errors.

00:04:57.700 --> 00:05:04.100
So ignore them all and then unignore one at a time and then go through and fix them.

00:05:04.100 --> 00:05:10.500
So that's where the really- the reason why I picked out this article isn't really because import linter is cool.

00:05:10.500 --> 00:05:17.100
It might be cool, but it's that these ways to fix these import dependencies,

00:05:17.100 --> 00:05:19.800
I thought were really great to walk through.

00:05:19.800 --> 00:05:23.800
There's six of them. First one is merging and splitting modules.

00:05:23.800 --> 00:05:27.900
And like there's an example where you've got resources that calls clusters,

00:05:27.900 --> 00:05:33.100
clusters calls resources dot cluster utils, and that's going the wrong direction.

00:05:33.100 --> 00:05:40.200
But to fix it, you maybe move those cluster utils down into the lower, like a lower library, like splitting them off.

00:05:40.200 --> 00:05:45.200
Kind of sort of straightforward, but it's good to like think about this.

00:05:45.200 --> 00:05:48.700
So I like that that part of it. Dependency injection.

00:05:48.700 --> 00:05:53.300
And if you're the kind of person that's kind of afraid of dependency injection,

00:05:53.300 --> 00:05:57.300
then don't even think about that term because it's not actually that scary.

00:05:57.300 --> 00:05:59.700
Just the term was scary to me for a while.

00:05:59.700 --> 00:06:08.200
So anyway, dependency injection might help to be able to pass a pass dependencies down into lower layers from upper layers.

00:06:08.200 --> 00:06:11.200
So that's a good way to get around it.

00:06:11.200 --> 00:06:18.500
The interesting, I'm glad they dug into this, is when you do the inversion of, what is it?

00:06:18.500 --> 00:06:19.700
I forget, the inversion of control.

00:06:19.700 --> 00:06:21.000
Inversion of control, yeah.

00:06:21.000 --> 00:06:27.900
Yeah. Sometimes if with Python, that works great, except for type hints.

00:06:27.900 --> 00:06:31.400
Sometimes you need to get the type hints, getting those right.

00:06:31.400 --> 00:06:38.100
So talking about how to use the protocol from typing to get that to work right.

00:06:38.100 --> 00:06:41.600
That discussion's in here, which is great. I love protocol.

00:06:41.600 --> 00:06:48.700
Then another discussion about using simpler dependency types and then delaying function implementation.

00:06:48.700 --> 00:06:52.600
And then even, what was the last one?

00:06:52.600 --> 00:06:54.800
Look at for six, configuration driven.

00:06:54.800 --> 00:06:56.100
That was interesting.

00:06:56.100 --> 00:06:57.600
I never really thought about doing this.

00:06:57.600 --> 00:07:09.300
The idea is you'd have a settings file or something and have that have, and then have the string that you would import, like marketing.sendSMS.

00:07:09.300 --> 00:07:14.300
And then later on in your calling thing, you use import string to import it.

00:07:14.300 --> 00:07:23.000
So you're still have the backwards dependency, but you don't know it at run, at compile, at write time, you know it at run time.

00:07:23.000 --> 00:07:23.500
I don't know.

00:07:23.500 --> 00:07:24.800
I don't know what I think about that.

00:07:24.800 --> 00:07:25.800
But anyway.

00:07:25.800 --> 00:07:26.300
Yeah.

00:07:26.300 --> 00:07:27.300
Yeah, that's interesting.

00:07:27.300 --> 00:07:28.800
It's a way to do it.

00:07:28.800 --> 00:07:34.600
So and then the last one is a replace function calls with event driven and purchase.

00:07:34.600 --> 00:07:37.000
So like callbacks and stuff like that.

00:07:37.000 --> 00:07:45.200
So these are a great architecture things to think about when you're cleaning up architecture, because it's not always trivial to just say, just don't do that.

00:07:45.200 --> 00:07:46.200
Don't do those imports.

00:07:46.200 --> 00:07:48.800
Well, how do you get around it if you've designed it that way?

00:07:48.800 --> 00:07:53.000
So I think a decent discussion about software architecture here.

00:07:53.000 --> 00:07:55.300
So I do think that's pretty interesting.

00:07:55.300 --> 00:08:06.000
And also just more broadly, I like the idea of ignoring all the issues you might run into with linters and then slowly turning the screws to make it a little tighter is good advice.

00:08:06.000 --> 00:08:14.900
Because if you have existing code of any significant size and you've never done linting on it, and then you turn on a linter, you feel bad about yourself.

00:08:14.900 --> 00:08:16.800
You're like, I've done all that wrong.

00:08:16.800 --> 00:08:18.200
593 errors.

00:08:18.200 --> 00:08:19.100
Great.

00:08:19.100 --> 00:08:21.300
Well, we'll turn that back off because I got work to do.

00:08:21.300 --> 00:08:22.100
You know what I mean?

00:08:22.100 --> 00:08:22.800
Yeah.

00:08:22.800 --> 00:08:26.500
Well, I'm kind of going through that with rough right now.

00:08:26.500 --> 00:08:33.500
So got some projects where default rough works fine, but the rough has like 800 rules or something you can add.

00:08:33.500 --> 00:08:37.500
And so I'm trying to turn on some of those extra features.

00:08:37.500 --> 00:08:39.400
I have just a few at a time.

00:08:39.400 --> 00:08:44.200
See, testing the waters, see how many failures I get and whether I want to clean them up.

00:08:44.200 --> 00:08:45.000
So yeah.

00:08:45.000 --> 00:08:45.500
Yeah.

00:08:45.500 --> 00:08:46.500
Interesting.

00:08:46.500 --> 00:08:48.900
Just interesting timing.

00:08:48.900 --> 00:08:51.900
I'm going to be speaking with Charlie Marshall on Talk Python tomorrow.

00:08:51.900 --> 00:08:52.700
Oh, awesome.

00:08:52.700 --> 00:08:55.100
About 24 hours from now, whatever that makes it for you.

00:08:55.100 --> 00:08:55.900
Yeah.

00:08:55.900 --> 00:08:56.900
Out there listening.

00:08:56.900 --> 00:08:57.200
Yeah.

00:08:57.200 --> 00:09:00.400
And we're going to talk mostly about UV, but I'm sure we'll talk a bit about rough as well.

00:09:00.400 --> 00:09:00.800
Cool.

00:09:00.800 --> 00:09:04.700
Well, I'm going to release a episode with Charlie Marsh today.

00:09:04.700 --> 00:09:05.200
So.

00:09:05.200 --> 00:09:07.100
Well, how about that?

00:09:07.100 --> 00:09:07.700
Awesome.

00:09:07.700 --> 00:09:08.000
Awesome.

00:09:08.000 --> 00:09:09.800
Do you guys talk about UV as well?

00:09:09.800 --> 00:09:14.200
Yeah, we talked about Flickate, or not Flickate.

00:09:14.200 --> 00:09:21.700
We talked about rough and Astral and UV, most of the conversations around UV and some of the discussion around that.

00:09:21.700 --> 00:09:22.200
So.

00:09:22.200 --> 00:09:22.900
Nice.

00:09:22.900 --> 00:09:23.400
Yeah.

00:09:23.400 --> 00:09:23.900
That'll be fun.

00:09:23.900 --> 00:09:24.800
All right.

00:09:24.800 --> 00:09:28.500
On to the next one here by Pierce Freeman.

00:09:28.500 --> 00:09:29.500
That's kind of a cool name, isn't it?

00:09:29.500 --> 00:09:32.400
It could be like a double O sort of agent.

00:09:32.400 --> 00:09:32.900
Yeah.

00:09:32.900 --> 00:09:33.400
Double O nine.

00:09:33.400 --> 00:09:35.000
I don't know what that is.

00:09:35.000 --> 00:09:36.200
Not James, but something like that.

00:09:36.200 --> 00:09:36.900
Anyway.

00:09:36.900 --> 00:09:38.900
Pierce Freeman to the rescue.

00:09:38.900 --> 00:09:39.600
Exactly.

00:09:39.600 --> 00:09:43.100
To bring you React and FastAPI and Python.

00:09:43.100 --> 00:09:45.600
In fact, with this framework called Mountaineer.

00:09:45.600 --> 00:09:51.300
So Mountaineer is a batteries included web framework for Python and React.

00:09:51.300 --> 00:10:00.600
So this, it plays in a similar space as FastUI from Samuel Colvin and the Pydantic crew.

00:10:00.600 --> 00:10:05.700
I don't know enough about them to know how truly similar they are.

00:10:05.700 --> 00:10:08.200
I think this is coming from a different angle.

00:10:08.200 --> 00:10:14.200
I think you're doing, you know, so FastUI is more about maybe you don't really have to do the React side unless you want.

00:10:14.200 --> 00:10:15.800
And it kind of brings that stuff together.

00:10:15.800 --> 00:10:23.700
Whereas this kind of like you're embracing TypeScript, you're embracing React, but you also get some really nice Python integration.

00:10:23.700 --> 00:10:26.900
And so if you look down here, what does it say?

00:10:26.900 --> 00:10:30.400
It says it lets you easily build web apps in Python and React.

00:10:30.400 --> 00:10:34.000
And if you are familiar with this, it should sound familiar to you.

00:10:34.000 --> 00:10:37.100
It should basically seem like what you're used to.

00:10:37.100 --> 00:10:39.500
And if not, then maybe not.

00:10:39.500 --> 00:10:45.500
But it says each framework like Flask or FastAPI or Django or whatever has its tradeoffs and features.

00:10:45.500 --> 00:10:51.400
And for this one, it focuses on developer productivity above all else with production speed of close seconds.

00:10:51.400 --> 00:10:57.900
So type hints up and down the stack front end, back end database, trivially easy client server communication.

00:10:57.900 --> 00:11:03.600
So you don't find yourself creating a bunch of APIs so that your React stuff can talk to the API.

00:11:03.600 --> 00:11:07.500
So it can actually get its data and all that, which is pretty interesting.

00:11:07.500 --> 00:11:09.500
It comes, this is kind of cool.

00:11:09.500 --> 00:11:14.500
So one of the things you can run into, I'm sure you've seen this, Brian, it drives me absolutely bonkers.

00:11:14.500 --> 00:11:17.900
You'll go to a website and it'll have something on the screen.

00:11:17.900 --> 00:11:23.400
And then like half a second later, it'll shift around and stuff will like all come into existence.

00:11:23.400 --> 00:11:28.200
You know, you'll be like, it'll have like the footer will be touching the top and then it'll bump out.

00:11:28.200 --> 00:11:30.600
It'll be a spinner and then stuff, you know, it's like, what is it?

00:11:30.600 --> 00:11:31.600
What is it doing?

00:11:31.600 --> 00:11:37.600
Well, especially if you start reading and then a picture pops in and what you read pops off the screen.

00:11:37.600 --> 00:11:45.100
Yeah. Another thing that drives me crazy is if you paste something into an input, but you don't type it,

00:11:45.100 --> 00:11:47.400
sometimes that won't trigger the data binding.

00:11:47.400 --> 00:11:53.300
And you know, like if he's a password manager type thing or something, or you just paste something,

00:11:53.300 --> 00:11:55.300
it'll say, oh, this is invalid.

00:11:55.300 --> 00:11:56.100
What is wrong with this?

00:11:56.100 --> 00:11:57.800
Oh, if you put a space and delete the space.

00:11:57.800 --> 00:11:59.300
Oh, oh, it's valid now.

00:11:59.300 --> 00:12:01.000
It's like, oh, I see.

00:12:01.000 --> 00:12:05.400
So something that would be really nice is if you just could ship straight HTML, right?

00:12:05.400 --> 00:12:05.900
Yeah.

00:12:05.900 --> 00:12:08.400
Or the first view of that was.

00:12:08.400 --> 00:12:12.700
And so what this comes with is they actually bundle the V8 engine.

00:12:12.700 --> 00:12:18.600
So on the server side, it can, it can render what your browser would do for you as final HTML.

00:12:18.600 --> 00:12:24.300
And it delivers with so optimized server side rendering for better accessibility and SEO.

00:12:24.300 --> 00:12:25.200
That's pretty cool.

00:12:25.200 --> 00:12:25.700
I think.

00:12:25.700 --> 00:12:26.300
Yeah, that's cool.

00:12:26.300 --> 00:12:29.900
As a Python thing, like normally you hear that as a node thing or something, right?

00:12:29.900 --> 00:12:30.400
Yeah.

00:12:30.400 --> 00:12:35.800
It also does static analysis for validations of like links and CSS and so on.

00:12:35.800 --> 00:12:41.300
And like I said, skip the API or Node.js server just for front end clients.

00:12:41.300 --> 00:12:41.600
Okay.

00:12:41.600 --> 00:12:43.800
So all of these things are pretty cool.

00:12:43.800 --> 00:12:46.700
If let me give you a warning and a disclaimer.

00:12:46.700 --> 00:12:51.400
One, if you don't know React real well, I don't think you'll really appreciate the benefits here that much.

00:12:51.400 --> 00:12:54.000
Like this is really for React people 100%.

00:12:54.000 --> 00:12:55.600
Second, that's not me.

00:12:55.600 --> 00:12:59.300
So I'm going to do my best to like tell you why you might want this.

00:12:59.300 --> 00:13:00.900
I think I can, can I get there?

00:13:00.900 --> 00:13:08.300
So first of all, it has a scaffolding type thing called create Mountaineer app and they suggest pipx.

00:13:08.300 --> 00:13:12.700
And I'm loving to see more pipx come along for these kinds of tools, right?

00:13:12.700 --> 00:13:15.100
Like you run this once, it's not part of your app.

00:13:15.100 --> 00:13:17.500
You just pipx install it and everything gets going.

00:13:17.500 --> 00:13:18.100
It's great.

00:13:18.100 --> 00:13:20.600
Also uses poetry pretty heavily.

00:13:20.600 --> 00:13:27.200
So what it does is it creates a Python bits and then some TypeScript stuff for your front end.

00:13:27.200 --> 00:13:29.300
And it comes with a CLI as well, which is nice.

00:13:29.300 --> 00:13:36.500
It has a built-in Docker containers for like managing Postgres databases and so on if you want to use that, but you don't have to.

00:13:36.500 --> 00:13:37.900
And let's see.

00:13:37.900 --> 00:13:42.000
So another interesting integration is it uses SQL model.

00:13:42.000 --> 00:13:44.500
So that's the typing in the data layer aspect.

00:13:44.500 --> 00:13:49.800
So SQL model is Pydantic plus SQLAlchemy basically by Sebastian Ramirez.

00:13:49.800 --> 00:13:50.900
So that's cool.

00:13:50.900 --> 00:13:54.700
And then you go down here and you create controllers.

00:13:54.700 --> 00:13:56.900
So it's kind of a class-based type of thing.

00:13:56.900 --> 00:14:05.900
First, it seems a little unnecessary, but as you interact with it and expose more features to the React layer, you'll see that kind of relevant there.

00:14:05.900 --> 00:14:11.200
So you just say, I'm going to render, say, my database things and some other pieces of data.

00:14:11.200 --> 00:14:18.700
And then down somewhere, you've got your React code and your TSX, your React component there.

00:14:18.700 --> 00:14:22.900
And if you've written React stuff, you should know pretty well how it works.

00:14:22.900 --> 00:14:26.300
But it manages passing all that data over like serverstate.todo's.

00:14:26.300 --> 00:14:28.100
And then you can just work with that, which is interesting.

00:14:28.100 --> 00:14:35.500
But it gets more interesting later if you say, let's add an async function, like add one of my to-dos.

00:14:35.500 --> 00:14:36.700
And I have a to-do example, right?

00:14:36.700 --> 00:14:41.900
So if you put this @sideeffect decorator on it, here's where the React integration comes in.

00:14:41.900 --> 00:14:43.100
That's pretty wild.

00:14:43.100 --> 00:14:50.900
So it automatically generates typed, let's just say typed TypeScript because, I mean, you can't have non-typed TypeScript.

00:14:50.900 --> 00:14:52.500
But generally, TypeScript is typed.

00:14:52.500 --> 00:14:58.500
You generate TypeScript versions of the functions that you write in Python on the JavaScript side.

00:14:58.500 --> 00:15:02.100
So you immediately can just start calling it and using those features.

00:15:02.100 --> 00:15:06.800
All right, so it kind of has this really tight integration with React, like as you would expect.

00:15:06.800 --> 00:15:07.300
What else?

00:15:07.300 --> 00:15:08.300
I think that's pretty much it.

00:15:08.300 --> 00:15:18.600
But if you're a heavy React shop and you want a nice Python back end and you want a tight data integration between those, this is probably worth a look.

00:15:18.600 --> 00:15:19.500
- Yeah, neat.

00:15:19.500 --> 00:15:20.200
- Yeah, yeah.

00:15:20.200 --> 00:15:21.400
It looks pretty neat to me too.

00:15:21.400 --> 00:15:24.700
I'm not, like I said, I'm not really a React person.

00:15:24.700 --> 00:15:27.000
So I'm not sure that I'm necessarily going to use it.

00:15:27.000 --> 00:15:32.300
But if I were to start adopting React, I may well decide that that's what I want.

00:15:32.300 --> 00:15:36.900
Speaking of cool things, Brian, how about Scout APM?

00:15:36.900 --> 00:15:40.900
Let me tell you real quick about Scout APM.

00:15:40.900 --> 00:15:44.500
They're big supporters of Python Bytes, so we appreciate that very much.

00:15:44.500 --> 00:15:53.700
So if you are tired of spending hours trying to find the root cause of issues impacting your performance, then you owe it to yourself to check out Scout APM.

00:15:53.700 --> 00:16:03.000
They're a leading Python application performance monitoring tool, APM, that helps you identify and solve performance abnormalities faster and easier.

00:16:03.000 --> 00:16:16.000
Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs, and the dreaded N+1 queries that you can end up if you do lazy loading in your ORM, and then you say, "Oh no, why is it so slow?

00:16:16.000 --> 00:16:18.500
Why are you doing 200 database queries for what should be one?"

00:16:18.500 --> 00:16:19.900
So you can find out things like that.

00:16:19.900 --> 00:16:27.500
And it links it back directly to source code, so you can spend less time in the debugger and peeling logs and just finding the problems and moving on.

00:16:27.500 --> 00:16:30.400
And you'll love it because it's built for developers by developers.

00:16:30.400 --> 00:16:32.200
It makes it easy to get set up.

00:16:32.200 --> 00:16:34.500
Seriously, you can do it in less than four minutes.

00:16:34.500 --> 00:16:35.400
So that's awesome.

00:16:35.400 --> 00:16:39.000
And the best part is the pricing is straightforward.

00:16:39.000 --> 00:16:44.400
You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:16:44.400 --> 00:16:51.600
And I just learned this, Brian, they also have, they provide the pro version for free to all open source projects.

00:16:51.600 --> 00:16:59.500
So if you're an open source maintainer and you want to have Scout APM for that project, just shoot them a message or something on their pricing page about that.

00:16:59.500 --> 00:17:03.300
So you can start your free trial and get instant insights today.

00:17:03.300 --> 00:17:05.800
Visit pythonbytes.fm/scout.

00:17:05.800 --> 00:17:08.300
The link is in your podcast player show notes as well.

00:17:08.300 --> 00:17:09.200
And please use that link.

00:17:09.200 --> 00:17:13.400
Don't just search for them because otherwise they don't think you came from us.

00:17:13.400 --> 00:17:14.800
And then they'd stop supporting the show.

00:17:14.800 --> 00:17:17.500
So please use our link pythonbytes.fm/scout.

00:17:17.500 --> 00:17:18.400
Check them out.

00:17:18.400 --> 00:17:20.500
It really supports the show.

00:17:20.500 --> 00:17:20.900
Awesome.

00:17:20.900 --> 00:17:21.700
Awesome.

00:17:21.700 --> 00:17:22.700
What's next, Brian?

00:17:22.700 --> 00:17:26.000
Well, what's next is Guido van Rossum.

00:17:26.000 --> 00:17:27.200
Oh, yeah.

00:17:27.200 --> 00:17:30.400
So he's blogging a little bit lately.

00:17:30.400 --> 00:17:38.100
And he put up a post called "Why Python's Integer Division Floors".

00:17:38.100 --> 00:17:43.400
And I think this is just an interesting little bit of history.

00:17:43.400 --> 00:17:47.800
There's some, so, and this was a difference between Python 2 and 3.

00:17:47.800 --> 00:17:51.200
I guess, no, it, integer division always did flooring.

00:17:51.200 --> 00:17:55.900
But the, you know, we did a kind of a thing of what one slash meant.

00:17:55.900 --> 00:18:00.200
So if you do two slashes, it's always integer division.

00:18:00.200 --> 00:18:06.700
If you do one slash in, if it was both integers in Python 2, it would be integer division.

00:18:06.700 --> 00:18:09.800
And it would possibly not be the floating point result.

00:18:09.800 --> 00:18:13.200
But in Python 3, it will generate a float if you have it.

00:18:13.200 --> 00:18:18.500
Like, for instance, one third will, one divided by three results in a float.

00:18:18.500 --> 00:18:21.500
But if you do integer division, it's not.

00:18:21.500 --> 00:18:22.600
It's something else.

00:18:22.600 --> 00:18:25.200
Is that why the two to three conversion was so hard?

00:18:25.200 --> 00:18:26.000
I'm just kidding.

00:18:26.000 --> 00:18:26.500
What was that?

00:18:26.500 --> 00:18:28.300
It was strings. Everyone knows it's strings.

00:18:28.300 --> 00:18:33.000
So is that why the integer, the Python 2 to 3 story was so hard?

00:18:33.000 --> 00:18:34.800
[laughs]

00:18:34.800 --> 00:18:36.000
No, I'm just joking.

00:18:36.000 --> 00:18:37.400
[laughs]

00:18:37.400 --> 00:18:38.600
Yeah.

00:18:38.600 --> 00:18:45.500
So, yeah, so if you do five to two slashes, so integer division of five divided by two,

00:18:45.500 --> 00:18:47.100
you get two.

00:18:47.100 --> 00:18:51.900
And, which is normal, that's everywhere.

00:18:51.900 --> 00:18:58.600
But if you do it, like, say, negative five, you don't get negative two, you get negative three.

00:18:58.600 --> 00:19:00.500
So that's the, there's a question.

00:19:00.500 --> 00:19:06.400
So Guido said that he had a question about that, of why it's different, why it's like that.

00:19:06.400 --> 00:19:16.200
And so it's going, it does a division, and then it goes to the closest integer to the negative, closest to negative infinity.

00:19:16.200 --> 00:19:19.600
So, and there's reasonings behind that.

00:19:19.600 --> 00:19:21.100
But it's different than C.

00:19:21.100 --> 00:19:24.200
Apparently, I completely forgot what C did.

00:19:24.200 --> 00:19:26.200
C does it closer to zero.

00:19:26.200 --> 00:19:31.900
So you'd both, so negative five divided by two would, you'd end up with two, negative two.

00:19:31.900 --> 00:19:37.700
So the history there is that there was a choice to make.

00:19:37.700 --> 00:19:45.000
And you could either, with, it works with the modulo operator as well.

00:19:45.000 --> 00:19:52.500
Modulo will create the remainder, where integer division creates the integer division, the integer quotient.

00:19:52.500 --> 00:20:01.200
So, such that A divided by B equals Q, with remainder R, such that R is between zero and B.

00:20:01.200 --> 00:20:03.400
There's math here.

00:20:03.400 --> 00:20:12.500
But it just, you have a choice as to what you want to do, whether you want R to be possibly negative, positive or negative for the remainder.

00:20:12.500 --> 00:20:14.700
Or if you want R to always be positive.

00:20:14.700 --> 00:20:22.100
And basically, Guido chose the one that looks nicer in math.

00:20:22.100 --> 00:20:27.500
So that we go, we go do a floor division instead.

00:20:27.500 --> 00:20:33.800
The interesting, the interesting take on this, I thought, was, well, why did C choose the other way?

00:20:33.800 --> 00:20:37.800
And that's, that's the part that I thought was really interesting.

00:20:37.800 --> 00:20:44.900
And his answer, or his guess, is that, well, C was doing it way before Python was.

00:20:44.900 --> 00:20:54.500
And C was doing it on hardware that it may have been easier to do, to do division closer to zero instead of floor division.

00:20:54.500 --> 00:21:03.000
And part of that reason might be because some of the early hardware architectures were using sine plus magnitude, rather than twos complement.

00:21:03.000 --> 00:21:06.000
Which is kind of, I didn't know that.

00:21:06.000 --> 00:21:10.000
I must have, either if I did know it from CS, I forgot it.

00:21:10.000 --> 00:21:12.500
Definitely no remember twos complement.

00:21:12.500 --> 00:21:15.000
But anyway, it's an interesting history there.

00:21:15.000 --> 00:21:20.700
Also, one of the things I brought up, one of the reasons, it's kind of a silly little article to bring up.

00:21:20.700 --> 00:21:31.900
But one of the things I wanted to bring it up is because a lot of new Python people actually don't remember, will forget about integer division.

00:21:31.900 --> 00:21:34.200
And just assume that division is division.

00:21:34.200 --> 00:21:37.700
But integer division is really handy for a lot of cases.

00:21:37.700 --> 00:21:38.700
So don't forget about it.

00:21:38.700 --> 00:21:39.700
That's true, actually.

00:21:39.700 --> 00:21:43.200
Yeah, I find myself sometimes doing int of some float result.

00:21:43.200 --> 00:21:46.700
Maybe, maybe I could just double slash it and not have to.

00:21:46.700 --> 00:21:51.200
So comment from the chat, which I'm not sure how to take this.

00:21:51.200 --> 00:21:53.700
I'm thinking that they're bored with this topic, but...

00:21:53.700 --> 00:21:56.700
I'm not sure either.

00:21:56.700 --> 00:21:58.700
Anyway.

00:21:58.700 --> 00:21:59.700
No comment.

00:21:59.700 --> 00:22:01.200
All right.

00:22:01.200 --> 00:22:03.700
You know what, we're going to bring the hatchet out on this one, Ryan.

00:22:03.700 --> 00:22:04.700
Bring in the hatchet.

00:22:04.700 --> 00:22:13.200
So there's this thing I ran across called a hatchet, which is a distributed task queue for more resilient web apps.

00:22:13.200 --> 00:22:17.700
Now, I don't recall exactly what it is written in.

00:22:17.700 --> 00:22:19.700
I don't think it's written in Python.

00:22:19.700 --> 00:22:21.700
It's unclear.

00:22:21.700 --> 00:22:24.700
It's primary language is Python, but also has a go.

00:22:24.700 --> 00:22:25.700
Anyway, it doesn't matter.

00:22:25.700 --> 00:22:26.700
It has a Python.

00:22:26.700 --> 00:22:33.200
It's first SDK, its first integration is with Python.

00:22:33.200 --> 00:22:35.200
So here's the idea.

00:22:35.200 --> 00:22:36.200
You've got some work.

00:22:36.200 --> 00:22:39.200
It's going to take a little while to run.

00:22:39.200 --> 00:22:43.200
You know, your web app says, "Hey, I want you to ship this thing."

00:22:43.200 --> 00:22:46.200
Or, "I want you to run some analytics."

00:22:46.200 --> 00:22:50.700
And if those analytics take 10, 15 seconds to run, maybe they're computational.

00:22:50.700 --> 00:22:56.200
And they should run out on another computer rather than on your main web front end.

00:22:56.200 --> 00:22:58.700
Or they shouldn't block it for 15 seconds or whatever.

00:22:58.700 --> 00:23:04.700
When you're talking about your, how do you break up import dependencies across the wrong layers and stuff,

00:23:04.700 --> 00:23:09.700
maybe one way to fix that is to move some of the compute work completely to its own place, right?

00:23:09.700 --> 00:23:17.700
Like this whole queuing mechanism is super fascinating for creating like truly scalable, like multi-user thing, right?

00:23:17.700 --> 00:23:23.700
So if the majority of your work is in some place and you kind of don't really need the answer to give a response,

00:23:23.700 --> 00:23:27.700
you can just throw it onto one of these background queues and let it go.

00:23:27.700 --> 00:23:32.700
So one of the problems that you run into though is what if something goes wrong?

00:23:32.700 --> 00:23:35.200
Or how do I see what is running?

00:23:35.200 --> 00:23:36.700
Something fails, can I resume it?

00:23:36.700 --> 00:23:39.200
Maybe it was really important, like ship this thing to the customer.

00:23:39.200 --> 00:23:43.700
But when I put that on the queue and it finally got around to being run,

00:23:43.700 --> 00:23:48.700
the API at UPS was down for who knows, whatever reason, right?

00:23:48.700 --> 00:23:50.200
Things like that and you can't ship it.

00:23:50.200 --> 00:23:53.700
And then just go into the ether as an error or you resume it.

00:23:53.700 --> 00:23:57.200
Another problem you run into is fairness, right?

00:23:57.200 --> 00:24:01.700
If there's a ton of work coming in faster than the processor can handle,

00:24:01.700 --> 00:24:07.700
is there some thing where maybe only the new ones get worked on and the older ones get almost abandoned, right?

00:24:07.700 --> 00:24:09.700
There's all these interesting things.

00:24:09.700 --> 00:24:15.700
So this thing called Hatchet is in the realm of many different things that attempt to solve this problem, right?

00:24:15.700 --> 00:24:19.200
It's interesting, it's Y Combinator backed.

00:24:19.200 --> 00:24:22.700
It's a company that presumably will have a price,

00:24:22.700 --> 00:24:28.200
but there's also just an open source, take it for yourself and run with it,

00:24:28.200 --> 00:24:33.700
version over on GitHub, so 100% open source, 2,200 GitHub stars.

00:24:33.700 --> 00:24:34.700
Pretty interesting.

00:24:34.700 --> 00:24:37.700
But I think the business model is it says request cloud access,

00:24:37.700 --> 00:24:40.700
like they can run it for you or you can run your own, right?

00:24:40.700 --> 00:24:41.700
- Yeah.

00:24:41.700 --> 00:24:45.200
- So the website has a bunch of these little animations, which are kind of cool.

00:24:45.200 --> 00:24:48.700
It talks about fairness, batch processing.

00:24:48.700 --> 00:24:52.200
And as you click on them, see how it has these little fun animations.

00:24:52.200 --> 00:24:53.700
Like, what does this mean? Oh, I see.

00:24:53.700 --> 00:24:54.700
- Oh, I love it.

00:24:54.700 --> 00:24:56.200
- I do too. I do too.

00:24:56.200 --> 00:25:02.700
So it talks about fairness, batch processing, workflow, and event stuff.

00:25:02.700 --> 00:25:06.200
It's engineered for scaling challenges, which is pretty awesome.

00:25:06.200 --> 00:25:09.200
So low latency, 25 milliseconds on average,

00:25:09.200 --> 00:25:12.200
which means if you put something into the queue,

00:25:12.200 --> 00:25:17.700
there's ways in which you can sort of make callbacks to check on the process of the work

00:25:17.700 --> 00:25:19.200
and it shouldn't take all that long.

00:25:19.200 --> 00:25:21.700
A bunch of rules about rate limiting.

00:25:21.700 --> 00:25:25.200
Also durable, so you can replay events.

00:25:25.200 --> 00:25:29.200
You can do cron jobs and say, hey, every morning,

00:25:29.200 --> 00:25:32.700
just drop this into the queue and run it at 7 a.m. or whatever.

00:25:32.700 --> 00:25:34.700
You can schedule one-time jobs.

00:25:34.700 --> 00:25:38.700
It has ability to avoid being destroyed by spikes.

00:25:38.700 --> 00:25:42.200
Like if for some reason a whole bunch of work comes in all at once,

00:25:42.200 --> 00:25:45.200
maybe you got IoT things that do a bunch of work

00:25:45.200 --> 00:25:48.700
and people come into the office and at very first sees a bunch of stuff

00:25:48.700 --> 00:25:49.700
and then it chills out, right?

00:25:49.700 --> 00:25:51.700
You could smooth that out, all kinds of stuff.

00:25:51.700 --> 00:25:54.700
But like I said, it supports three technologies,

00:25:54.700 --> 00:25:58.200
Python number one, TypeScript number two, and Go number three.

00:25:58.200 --> 00:26:00.200
And it's really easy to do.

00:26:00.200 --> 00:26:02.700
You just go down here and you just put a, you know,

00:26:02.700 --> 00:26:05.700
when this event happens, I want you to run this class.

00:26:05.700 --> 00:26:08.700
And then it has a bunch of functions, methods.

00:26:08.700 --> 00:26:11.700
You say, here's a step, step one, do this work, step two.

00:26:11.700 --> 00:26:15.200
So you just basically put some decorators on a class

00:26:15.200 --> 00:26:17.200
and then plug it in and off it goes.

00:26:17.200 --> 00:26:19.700
Super easy. And to run it, you just say, push an event,

00:26:19.700 --> 00:26:21.700
whatever the name it is with the data,

00:26:21.700 --> 00:26:23.700
and it'll go, put it off in the background and run it.

00:26:23.700 --> 00:26:26.200
So yeah, it also has like nice visualizations.

00:26:26.200 --> 00:26:29.700
Like here you can see there's this on hatchet.run.

00:26:29.700 --> 00:26:33.700
You can see there's this like live view of how is the work running

00:26:33.700 --> 00:26:35.700
through the system and all kinds of stuff.

00:26:35.700 --> 00:26:37.700
So it looks pretty neat to me.

00:26:37.700 --> 00:26:39.700
Open source, people can check it out.

00:26:39.700 --> 00:26:40.700
It's worth knowing about.

00:26:40.700 --> 00:26:42.700
Yeah, it's pretty cool.

00:26:42.700 --> 00:26:44.700
Indeed, indeed.

00:26:44.700 --> 00:26:46.700
That's it for items.

00:26:46.700 --> 00:26:48.700
How are you feeling? How extra are you feeling?

00:26:48.700 --> 00:26:50.700
I've only got one extra that I almost,

00:26:50.700 --> 00:26:52.700
that I pretty much mentioned already.

00:26:52.700 --> 00:26:54.700
So I'll do it quickly.

00:26:54.700 --> 00:26:57.700
So Python test is at 2.15 right now as we look,

00:26:57.700 --> 00:27:02.700
but the most recent episode that will come out probably today

00:27:02.700 --> 00:27:06.700
is 2.16, which will be Charlie Marsh talking about UV.

00:27:06.700 --> 00:27:08.700
So check that out also.

00:27:08.700 --> 00:27:10.700
Awesome. Yeah, you did mention that.

00:27:10.700 --> 00:27:11.700
That's really good though.

00:27:11.700 --> 00:27:13.700
How about you? Got any extras?

00:27:13.700 --> 00:27:14.700
I'm feeling somewhat extra.

00:27:14.700 --> 00:27:16.700
I got two exciting announcements.

00:27:16.700 --> 00:27:20.700
One, I have a free new course over at Talk Python Training

00:27:20.700 --> 00:27:23.700
that covers a bunch of awesome technologies,

00:27:23.700 --> 00:27:29.700
but the core idea, the title is Build an Audio App with AI,

00:27:29.700 --> 00:27:31.700
with Python and Assembly AI.

00:27:31.700 --> 00:27:37.700
So the idea is what would you do if you say had access to,

00:27:37.700 --> 00:27:39.700
I don't know, a podcast's worth of data

00:27:39.700 --> 00:27:40.700
that's been going for many years,

00:27:40.700 --> 00:27:43.700
like Python Bytes or Talk Python, or honestly,

00:27:43.700 --> 00:27:48.700
the thing we built lets you access a whole library of podcasts.

00:27:48.700 --> 00:27:49.700
And you can go in there and do things like,

00:27:49.700 --> 00:27:52.700
hey, create me a transcript, which seems kind of straightforward.

00:27:52.700 --> 00:27:53.700
But once you have transcript data,

00:27:53.700 --> 00:27:55.700
you could get really cool search,

00:27:55.700 --> 00:27:57.700
like building your own custom search engine,

00:27:57.700 --> 00:28:00.700
not just over the title and the show notes and stuff,

00:28:00.700 --> 00:28:03.700
but also all the spoken words, which is kind of neat.

00:28:03.700 --> 00:28:05.700
Then you also bring more of the AI stuff in.

00:28:05.700 --> 00:28:09.700
You could create a summary. What are the key moments of this?

00:28:09.700 --> 00:28:11.700
And actually, what if I could just have a Q&A

00:28:11.700 --> 00:28:15.700
with you and me around what we said in the show?

00:28:15.700 --> 00:28:19.700
So kind of creating an LLM ChatGPT type of thing,

00:28:19.700 --> 00:28:23.700
but where it knows about any given episode out on the internet.

00:28:23.700 --> 00:28:26.700
So really fun. People will learn FastAPI.

00:28:26.700 --> 00:28:29.700
They learn Pydantic. They learn HTMX.

00:28:29.700 --> 00:28:32.700
They learn Beanie, and they learn Assembly AI

00:28:32.700 --> 00:28:33.700
and build a cool thing.

00:28:33.700 --> 00:28:35.700
And the whole course is like a four-hour free course,

00:28:35.700 --> 00:28:36.700
so they can check that out.

00:28:36.700 --> 00:28:38.700
- Wow, neat. Sounds fun.

00:28:38.700 --> 00:28:41.700
- Thanks. And next to it, another new course,

00:28:41.700 --> 00:28:44.700
Rock Solid Python with Python Typing.

00:28:44.700 --> 00:28:46.700
So this one is not a free one,

00:28:46.700 --> 00:28:50.700
but it basically shows you not just the how,

00:28:50.700 --> 00:28:53.700
but the why and when of Python typing.

00:28:53.700 --> 00:28:56.700
A bunch of different examples.

00:28:56.700 --> 00:29:00.700
Obviously the language, but things like FastAPI and Pydantic,

00:29:00.700 --> 00:29:02.700
how do they use it?

00:29:02.700 --> 00:29:04.700
What you talked about protocol before.

00:29:04.700 --> 00:29:06.700
What is protocol? Where does it fit?

00:29:06.700 --> 00:29:10.700
A bunch of design patterns and guidance for Python typing

00:29:10.700 --> 00:29:12.700
and how to think about how you should use it.

00:29:12.700 --> 00:29:14.700
So people should also check this one out.

00:29:14.700 --> 00:29:15.700
I'm really proud of this one.

00:29:15.700 --> 00:29:18.700
And it is also around four hours, 4.4 hours.

00:29:18.700 --> 00:29:22.700
And Pradeep asks out there, are these courses paid or free?

00:29:22.700 --> 00:29:27.700
Yes. The Build an Audio App course is 100% free.

00:29:27.700 --> 00:29:28.700
You just have to create an account.

00:29:28.700 --> 00:29:30.700
The Rock Solid Python course is 49 bucks.

00:29:30.700 --> 00:29:33.700
Yeah, but that's like 10 bucks an hour.

00:29:33.700 --> 00:29:34.700
That's almost free.

00:29:34.700 --> 00:29:37.700
Yes. It's certainly not a lot of money,

00:29:37.700 --> 00:29:41.700
you know, compared to other ways you might go learn about things like this.

00:29:41.700 --> 00:29:44.700
So anyway, both of these courses are awesome.

00:29:44.700 --> 00:29:45.700
People should check them out.

00:29:45.700 --> 00:29:47.700
So those are the two big announcements.

00:29:47.700 --> 00:29:49.700
I also have a couple of interesting things.

00:29:49.700 --> 00:29:51.700
I just want to give a quick shout out to,

00:29:51.700 --> 00:29:53.700
previously we spoke about Doku.

00:29:53.700 --> 00:29:55.700
I'm going to go with Doku because I think it's based on Docker.

00:29:55.700 --> 00:29:56.700
I don't know.

00:29:56.700 --> 00:29:57.700
Yes.

00:29:57.700 --> 00:30:03.700
Doku. And this is an open source platform as a service alternative to Heroku.

00:30:03.700 --> 00:30:04.700
We already spoke about that.

00:30:04.700 --> 00:30:09.700
But when we did, Ray out there on Mastodon, thank you, Ray,

00:30:09.700 --> 00:30:12.700
said, hey, you guys, love the episode on Doku.

00:30:12.700 --> 00:30:13.700
Haven't tried it myself.

00:30:13.700 --> 00:30:15.700
Big fan of Heroku.

00:30:15.700 --> 00:30:18.700
However, I set up Coolify.

00:30:18.700 --> 00:30:19.700
Coolify.

00:30:19.700 --> 00:30:20.700
I haven't talked about this, have I?

00:30:20.700 --> 00:30:21.700
I don't think so.

00:30:21.700 --> 00:30:22.700
Yeah, I don't think so.

00:30:22.700 --> 00:30:26.700
Okay. So Coolify is kind of the same.

00:30:26.700 --> 00:30:27.700
So this is pretty similar,

00:30:27.700 --> 00:30:32.700
but it has a nice GUI to configure everything and keep an eye on the status and all those things.

00:30:32.700 --> 00:30:36.700
So Coolify is self-hosting with superpowers.

00:30:36.700 --> 00:30:42.700
It's a self-hosted alternative to not just Heroku, but also Netlify and Verisign.

00:30:42.700 --> 00:30:44.700
So Netlify for static sites.

00:30:44.700 --> 00:30:47.700
You basically set this thing up, get it going.

00:30:47.700 --> 00:30:51.700
It'll run any language on basically any server.

00:30:51.700 --> 00:30:54.700
You just push to some Git branch, you deploy it.

00:30:54.700 --> 00:30:56.700
It does automatic SSL certificates.

00:30:56.700 --> 00:31:02.700
So if you just had a static site and I just want it to run over SSL on the internet, boom, done.

00:31:02.700 --> 00:31:08.700
It just does deluxe encrypt automatically as part of creating the app up there and gets it going.

00:31:08.700 --> 00:31:13.700
So it's probably a little bit of setup to get it going and get it running on Docker and stuff.

00:31:13.700 --> 00:31:18.700
But once you do, it just becomes the substrate for all of your apps that you want to put out there.

00:31:18.700 --> 00:31:21.700
And you don't have to think about anything but Git basically.

00:31:21.700 --> 00:31:22.700
- That's pretty cool, actually.

00:31:22.700 --> 00:31:24.700
- Yeah, it looks really, really nice.

00:31:24.700 --> 00:31:27.700
So people can check this out.

00:31:27.700 --> 00:31:36.700
Yeah, it has a paid cloud version and a self-hosted version with 17,000 or more people using it self-hosted.

00:31:36.700 --> 00:31:37.700
So that's pretty cool.

00:31:37.700 --> 00:31:39.700
It's interesting that they give stats there.

00:31:39.700 --> 00:31:40.700
But that's my last one.

00:31:40.700 --> 00:31:42.700
I think this is really neat as well.

00:31:42.700 --> 00:31:45.700
So Ray, thanks for sharing extra details.

00:31:45.700 --> 00:31:46.700
- Yeah, nice.

00:31:46.700 --> 00:31:48.700
- Shall we close it off with a joke?

00:31:48.700 --> 00:31:49.700
- Yeah, let's.

00:31:49.700 --> 00:31:51.700
- Yeah, okay.

00:31:51.700 --> 00:31:55.700
So speaking of I want to run my stuff on production, how do I do it?

00:31:55.700 --> 00:31:57.700
This is a great, great one.

00:31:57.700 --> 00:31:59.700
Back to workchronicles.com.

00:31:59.700 --> 00:32:03.700
And so I don't know how you feel about this, Brian, but I think it's pretty true.

00:32:03.700 --> 00:32:05.700
There's two engineers talking.

00:32:05.700 --> 00:32:07.700
It says, "Oh, no, I broke production.

00:32:07.700 --> 00:32:09.700
Will I get fired?"

00:32:09.700 --> 00:32:12.700
The more seasoned developer looks over.

00:32:12.700 --> 00:32:18.700
If we fire engineers who break production, we will need to fire everyone eventually.

00:32:18.700 --> 00:32:20.700
- Yeah, yeah.

00:32:20.700 --> 00:32:25.700
Also, if you fix it, you'll get a promotion or a raise or something.

00:32:25.700 --> 00:32:26.700
- There you go.

00:32:26.700 --> 00:32:27.700
Yeah.

00:32:27.700 --> 00:32:32.700
Maybe you just need to keep your fix rate above your destroy rate.

00:32:32.700 --> 00:32:33.700
- Yeah.

00:32:33.700 --> 00:32:34.700
- Yeah, there you go.

00:32:34.700 --> 00:32:35.700
- So, yeah.

00:32:35.700 --> 00:32:37.700
- Well, that's what I brought for us today.

00:32:37.700 --> 00:32:38.700
- Cool.

00:32:38.700 --> 00:32:39.700
I like it.

00:32:39.700 --> 00:32:40.700
- Yeah, excellent.

00:32:40.700 --> 00:32:44.700
- Okay, well, nice to kick off the week with a little Python Bytes.

00:32:44.700 --> 00:32:45.700
Happy to do it early.

00:32:45.700 --> 00:32:46.700
- Yeah, thank you.

00:32:46.700 --> 00:32:47.700
- Yeah.

00:32:47.700 --> 00:32:48.700
Good to see you, and thanks to everyone who joined.

00:32:48.700 --> 00:32:49.700
- Bye.

