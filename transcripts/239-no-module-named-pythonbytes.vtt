
00:00:00.000 --> 00:00:05.240
Hello and welcome to Python Bytes where we deliver news and headlines directly to your earbuds.


00:00:05.240 --> 00:00:09.440
This is episode 239 recorded June 23rd.


00:00:09.440 --> 00:00:11.440
It's almost end of June. Wow.


00:00:11.440 --> 00:00:13.880
2021. I am Brian Okken.


00:00:13.880 --> 00:00:15.000
I'm Michael Kennedy.


00:00:15.000 --> 00:00:16.480
And I am Nick Mo.


00:00:16.480 --> 00:00:18.880
Welcome, Nick. Thanks for joining the show.


00:00:18.880 --> 00:00:21.600
Before we jump in, tell me a little bit about yourself.


00:00:21.600 --> 00:00:24.480
Yeah, sure. So as I said, Nick Mo.


00:00:24.480 --> 00:00:28.480
I'm based out of Ohio and I work as a data engineer


00:00:28.480 --> 00:00:36.720
Trimble Transportation. It's a software company aiming to revolutionize the way we supply the world and simplify


00:00:36.720 --> 00:00:43.680
and connect the world supply chain. It wants to make it easier to move goods and freight all around the world.


00:00:43.680 --> 00:00:50.000
I'm also the co-organizer of Kleepi, which is Cleveland's Python meetup group.


00:00:50.000 --> 00:00:54.480
Thank you, Michael, for sharing that on the screen. So yeah, that's a bit about me.


00:00:54.480 --> 00:00:57.480
Nice. I enjoyed Cleveland. We're there for Python.


00:00:57.480 --> 00:00:59.480
Yeah, I think I met you guys there.


00:00:59.480 --> 00:01:00.480
Cool.


00:01:00.480 --> 00:01:02.480
I think you guys were in the JetBrains.


00:01:02.480 --> 00:01:07.480
That's right. We were. It was really great to be in Cleveland for a couple years.


00:01:07.480 --> 00:01:09.480
And I guess we just completely missed Pittsburgh.


00:01:09.480 --> 00:01:14.480
But they're going to get another round out of here as a redo, which is cool from COVID.


00:01:14.480 --> 00:01:21.480
I got a chance to speak at the Cleveland Python meetup and talked about memory. Was that right?


00:01:21.480 --> 00:01:23.600
- Yeah, you're talking about how Python


00:01:23.600 --> 00:01:26.520
might have used memory was like a really cool deep dive.


00:01:26.520 --> 00:01:27.360
- Yeah, thanks.


00:01:27.360 --> 00:01:28.280
That was super fun for having me.


00:01:28.280 --> 00:01:29.760
Now it's good to have you on our show.


00:01:29.760 --> 00:01:30.600
- Yeah.


00:01:30.600 --> 00:01:31.760
- So was that on purpose?


00:01:31.760 --> 00:01:33.280
Did you make a joke that you couldn't remember


00:01:33.280 --> 00:01:34.560
what the talk was about?


00:01:34.560 --> 00:01:35.400
- No, I think.


00:01:35.400 --> 00:01:36.920
(laughing)


00:01:36.920 --> 00:01:39.160
I know how my brain might store the memory


00:01:39.160 --> 00:01:40.960
of what I spoke about, but I just,


00:01:40.960 --> 00:01:42.240
it could have been that or async


00:01:42.240 --> 00:01:44.240
and I wasn't 100% sure which one it was.


00:01:44.240 --> 00:01:45.960
(laughing)


00:01:45.960 --> 00:01:48.120
- We did talk about async too though, so.


00:01:48.120 --> 00:01:48.960
- Cool.


00:01:48.960 --> 00:01:49.800
- Yeah, yeah, for sure.


00:01:49.800 --> 00:01:51.320
Speaking of async, Brian.


00:01:51.320 --> 00:01:51.820
>> Yeah.


00:01:51.820 --> 00:01:53.160
>> Databases tell us about it.


00:01:53.160 --> 00:01:58.020
>> Well, this is object relational mappers also.


00:01:58.020 --> 00:02:04.620
We have ORMR, which is an async mini ORM for Python,


00:02:04.620 --> 00:02:08.200
which supports Postgres, MySQL, and SQLite.


00:02:08.200 --> 00:02:13.300
This was a suggestion sent to us by John Hagan.


00:02:13.300 --> 00:02:15.300
Thanks, John, for sending this in.


00:02:15.300 --> 00:02:17.340
I actually haven't played with this a lot.


00:02:17.340 --> 00:02:18.880
I was looking around, it looks pretty neat.


00:02:18.880 --> 00:02:20.980
But I'm going to quote John here.


00:02:20.980 --> 00:02:23.980
He says, "It's a really cool ORM that combines


00:02:23.980 --> 00:02:28.340
Pydantic models and SQL models into a single definition.


00:02:28.340 --> 00:02:30.980
What is great about this is it can be used to reduce


00:02:30.980 --> 00:02:34.980
the repetitive duplication between the models for an ORM


00:02:34.980 --> 00:02:37.380
and the Pydantic models that


00:02:37.380 --> 00:02:40.500
FastAPI needs to describe serialization."


00:02:40.500 --> 00:02:43.660
I guess you do have to specify that twice normally.


00:02:43.660 --> 00:02:47.460
>> Yeah. Normally what you do is you would have the data model,


00:02:47.460 --> 00:02:51.700
the classes that do the exchange on the API level.


00:02:51.700 --> 00:02:53.260
So those are probably Pydantic.


00:02:53.260 --> 00:02:56.500
But maybe then you have something like a SQLAlchemy model.


00:02:56.500 --> 00:02:58.380
And then somewhere in the middle,


00:02:58.380 --> 00:03:00.700
you've got to copy the SQLAlchemy data over to


00:03:00.700 --> 00:03:03.860
the Pydantic model send out over FastAPI and you get it back.


00:03:03.860 --> 00:03:05.160
Then you've got to copy that from


00:03:05.160 --> 00:03:08.020
FastAPI and Pydantic back into SQLAlchemy.


00:03:08.020 --> 00:03:09.900
And because SQLAlchemy types are not


00:03:09.900 --> 00:03:11.740
really meant to be transferred on the wire,


00:03:11.740 --> 00:03:14.500
you don't get the open API documentation that you get from


00:03:14.500 --> 00:03:17.180
Pydantic integration and all those sorts of things.


00:03:17.180 --> 00:03:18.740
So that's normally what happens.


00:03:18.740 --> 00:03:22.340
But if your database model can also be a Pydantic model,


00:03:22.340 --> 00:03:24.620
then you don't do that back and forth.


00:03:24.620 --> 00:03:26.460
Yeah, and anytime you've got duplication,


00:03:26.460 --> 00:03:28.460
it's like that dry issue of just,


00:03:28.460 --> 00:03:30.260
you're going to mess it up sometime.


00:03:30.260 --> 00:03:31.380
It's going to be wrong.


00:03:31.380 --> 00:03:34.300
I think that's why like SQLAlchemy,


00:03:34.300 --> 00:03:36.460
I think in version 1.4,


00:03:36.460 --> 00:03:40.500
they've been playing around with a lot of ideas on how to integrate,


00:03:40.500 --> 00:03:42.260
like data, not Pydantic,


00:03:42.260 --> 00:03:50.060
but data classes and the ORM style base models.


00:03:50.060 --> 00:03:53.340
Four different propositions of how that should be done,


00:03:53.340 --> 00:03:54.700
but it's not yet perfect.


00:03:54.700 --> 00:03:56.820
I think that's something that looks


00:03:56.820 --> 00:03:59.180
like they could learn from Omar here.


00:03:59.180 --> 00:04:02.300
>> Or at least it's good to have these experiments going


00:04:02.300 --> 00:04:04.660
on for everybody to look around and see how


00:04:04.660 --> 00:04:07.860
do we move forward so that we can do this cleanly.


00:04:07.860 --> 00:04:11.700
>> Yeah. The one thing I will say is that with all of these ORMs,


00:04:11.700 --> 00:04:15.300
I don't know why they never give some love to SQL Server.


00:04:15.300 --> 00:04:18.100
I always see Postgres, MySQL, SQLite,


00:04:18.100 --> 00:04:20.740
but SQL Server is pretty cool too.


00:04:20.740 --> 00:04:23.340
Where is the support for that?


00:04:23.340 --> 00:04:24.860
>> What's SQL Server?


00:04:24.860 --> 00:04:26.860
>> That's like Microsoft's.


00:04:26.860 --> 00:04:29.580
You know what? Fair point.


00:04:29.580 --> 00:04:37.020
>> I think it really matters what audience you're addressing, Nick.


00:04:37.020 --> 00:04:40.620
If you're talking startups and a lot of


00:04:40.620 --> 00:04:42.920
the open source crowd, yeah, it's all Postgres,


00:04:42.920 --> 00:04:45.720
or if you're talking to Michael, it's all MongoDB, right?


00:04:45.720 --> 00:04:48.300
But if you're talking to enterprises,


00:04:48.300 --> 00:04:51.420
boy oh boy do a big bunch of those enterprises


00:04:51.420 --> 00:04:54.340
run on the Microsoft stack.


00:04:54.340 --> 00:04:58.380
Windows, Windows servers, Microsoft SQL Server,


00:04:58.380 --> 00:05:01.980
and that's a non-trivial amount of the use cases


00:05:01.980 --> 00:05:03.660
for these things, so I agree that it should get


00:05:03.660 --> 00:05:06.340
some attention, even if it's not necessarily


00:05:06.340 --> 00:05:08.420
the one that the maintainers or many of the people


00:05:08.420 --> 00:05:10.300
are most keen to use.


00:05:10.300 --> 00:05:12.820
- Yeah, and I agree, it was joke, but.


00:05:12.820 --> 00:05:14.420
(laughing)


00:05:14.420 --> 00:05:15.700
One of the things I wanted to point out


00:05:15.700 --> 00:05:20.700
that John mentioned is that one of the benefits of ORMR


00:05:20.700 --> 00:05:25.060
is there's a quick start specifically for FastAPI.


00:05:25.060 --> 00:05:26.420
So you can look at the documentation


00:05:26.420 --> 00:05:28.340
and there's a FastAPI quick start


00:05:28.340 --> 00:05:31.660
on how to get this running with FastAPI.


00:05:31.660 --> 00:05:35.260
- What an interesting combination of descriptors


00:05:35.260 --> 00:05:40.260
from the ORM class side and Pydantic models you get here.


00:05:40.260 --> 00:05:45.380
So for this, we have like the Pydantic model based type of thing.


00:05:45.380 --> 00:05:49.860
We've got the columns specified with type information that Pydantic would use,


00:05:49.860 --> 00:05:56.580
but then you set them to things like an integer column that's a primary key or a string that has a max length setting and things like that.


00:05:56.580 --> 00:05:58.980
Yeah, it's like the worst of every world.


00:05:58.980 --> 00:06:04.980
But it's better than repeating stuff, right? So yeah, interesting.


00:06:04.980 --> 00:06:11.460
Yeah, I think it's pretty good. And Nick, you mentioned SQL, alchemy and data classes.


00:06:11.460 --> 00:06:16.500
Pydantic also has some integration for working with data classes as well. So maybe there's a


00:06:16.500 --> 00:06:21.940
way to bridge those things across for like FastAPI and similar situations as well. I haven't


00:06:21.940 --> 00:06:25.860
tried that, but it's possible. Yeah, let's see out there in the live stream. We got Sam Morley. Hey,


00:06:25.860 --> 00:06:32.100
Sam says this looks a lot like a Django or M. Yeah, absolutely. It really does. And then Dean


00:06:32.100 --> 00:06:35.180
is hoping that we'll get some support for a very important database,


00:06:35.180 --> 00:06:37.340
accessdb, that and,


00:06:37.340 --> 00:06:40.620
oh gosh, what was it, db2 and a couple of the others.


00:06:40.620 --> 00:06:43.340
Yeah, there's some really important ones that we might be forgetting,


00:06:43.340 --> 00:06:44.900
but I think it's going to be okay.


00:06:44.900 --> 00:06:48.300
Oh man, access, that gives me PTSD from college.


00:06:48.300 --> 00:06:51.500
I can imagine.


00:06:51.500 --> 00:06:53.500
All right, well, speaking of people


00:06:53.500 --> 00:06:56.220
who might be getting some trauma,


00:06:56.220 --> 00:06:59.820
let's talk about nomodulenamed.


00:06:59.820 --> 00:07:02.020
nomodulenamed.com, in fact.


00:07:02.020 --> 00:07:03.380
It's now its own website.


00:07:03.380 --> 00:07:05.380
It used to think of it as like an error.


00:07:05.380 --> 00:07:08.180
And now it's actually a service.


00:07:08.180 --> 00:07:11.380
So error explanations of a service, I guess is what you would call it.


00:07:11.380 --> 00:07:17.220
All right. So Garedoon pointed out that there's this website called no module named.


00:07:17.220 --> 00:07:18.660
And it looks super plain.


00:07:18.660 --> 00:07:20.660
And I went to like, what is this?


00:07:20.660 --> 00:07:25.060
It has 3,626 packages.


00:07:25.060 --> 00:07:28.660
And oh my goodness, like 2 million modules or something like that.


00:07:28.660 --> 00:07:32.340
And it has 151,000 package install guidelines.


00:07:32.340 --> 00:07:35.140
So for example, what if I'm working with HTTPX?


00:07:35.140 --> 00:07:37.140
And I get the message that says,


00:07:37.140 --> 00:07:39.940
Python error, no module named HTTPX.


00:07:39.940 --> 00:07:42.820
This is what you would have if you wrote import HTTPX


00:07:42.820 --> 00:07:44.260
and you went and tried to run it,


00:07:44.260 --> 00:07:47.140
but you were new and you didn't realize


00:07:47.140 --> 00:07:48.500
there were external dependencies


00:07:48.500 --> 00:07:51.460
or that HTTPX wasn't built into the standard library.


00:07:51.460 --> 00:07:52.660
You would get that error, right?


00:07:52.660 --> 00:07:53.300
Yeah.


00:07:53.300 --> 00:07:55.140
So this tells you how to fix it.


00:07:55.140 --> 00:07:57.860
It says, oh, this is probably because you don't have the package


00:07:57.860 --> 00:08:01.260
HTTPS. Let's see if I can go


00:08:01.260 --> 00:08:04.020
something like FastAPI that responses.


00:08:04.020 --> 00:08:06.460
Is that a thing? And what will tell me if I try it?


00:08:06.460 --> 00:08:08.140
Oh, no such model. Yeah.


00:08:08.140 --> 00:08:11.060
But so NumPy, for example,


00:08:11.060 --> 00:08:13.020
it'll give you a lot of these and it'll tell you,


00:08:13.020 --> 00:08:14.900
this is probably because you don't have


00:08:14.900 --> 00:08:19.380
the package NumPy or NumPy MIPS 64 installed.


00:08:19.380 --> 00:08:21.740
So that's what I was looking for is if it would show like,


00:08:21.740 --> 00:08:25.980
well, the package name is not exactly what you're looking for.


00:08:25.980 --> 00:08:29.860
So maybe BS4, sometimes these modules that,


00:08:29.860 --> 00:08:32.140
so for example, if I say BS4,


00:08:32.140 --> 00:08:33.580
it'll say, "Oh, it's because you don't have,


00:08:33.580 --> 00:08:34.700
if you have the error,


00:08:34.700 --> 00:08:35.980
no module name BS4,


00:08:35.980 --> 00:08:38.780
it's because you don't have beautiful support installed."


00:08:38.780 --> 00:08:40.700
It's more than just like, "Duh,


00:08:40.700 --> 00:08:42.780
pip install the thing that there's no module of."


00:08:42.780 --> 00:08:45.660
It tries to help a little bit more with understanding that,


00:08:45.660 --> 00:08:47.820
and it tells you how to get the latest version,


00:08:47.820 --> 00:08:49.380
it tells you how to install it.


00:08:49.380 --> 00:08:51.580
There's even a related article.


00:08:51.580 --> 00:08:55.420
>> Extremely beautiful SEO on that with


00:08:55.420 --> 00:08:58.020
with people just googling error messages as well.


00:08:58.020 --> 00:09:01.060
>> Yeah. Pretty interesting.


00:09:01.060 --> 00:09:04.040
Garrett Dunn, thank you so much for sending that in.


00:09:04.040 --> 00:09:08.060
It's simple, but these kinds of things can help people who are new,


00:09:08.060 --> 00:09:12.220
they're getting in. I think one of the powers of Python is we have people coming


00:09:12.220 --> 00:09:15.180
from all these different backgrounds and experiences,


00:09:15.180 --> 00:09:16.900
and they are not all computer science people


00:09:16.900 --> 00:09:19.100
that know about package managers and love that.


00:09:19.100 --> 00:09:21.420
They're just like, "Oh, I know that I can do cool.


00:09:21.420 --> 00:09:24.760
I can load this file and make a picture out of it that I need to work on,


00:09:24.760 --> 00:09:29.720
but I get this stupid no module name this what is this right and then they can this you know these kinds of things can help.


00:09:29.720 --> 00:09:34.480
Yeah I'm trying to teach my 11 year old some programming and we started with packaging.


00:09:34.480 --> 00:09:36.980
Yeah we didn't.


00:09:36.980 --> 00:09:39.860
I know you started with virtual environments and then packaging.


00:09:39.860 --> 00:09:44.580
Yeah but Brian I thought you would have started with testing first.


00:09:44.580 --> 00:09:47.080
I always test first.


00:09:47.080 --> 00:09:50.920
I think this is like a really this is like a really cool project.


00:09:50.920 --> 00:10:01.960
I find it super useful when working on projects related to GUIs like Qt or WXPython,


00:10:01.960 --> 00:10:06.960
because those packages come with so many underlying dependencies,


00:10:06.960 --> 00:10:12.160
and sometimes you might miss one or might miss something that is an OS dependency that you don't know.


00:10:12.160 --> 00:10:13.720
I feel like this could help you out.


00:10:13.720 --> 00:10:19.960
I know I've run through this a few times where I'm using a package that is built on top of Qt,


00:10:19.960 --> 00:10:24.660
But it tells me you don't have PyQt GT, PyQt Fibers.


00:10:24.660 --> 00:10:25.660
Exactly.


00:10:25.660 --> 00:10:27.660
Well, I like that.


00:10:27.660 --> 00:10:33.560
I think you probably already mentioned this, but the error message is the module not found.


00:10:33.560 --> 00:10:35.560
That's often not the same.


00:10:35.560 --> 00:10:38.060
It's not the same name as the thing you pip install.


00:10:38.060 --> 00:10:39.360
So.


00:10:39.360 --> 00:10:41.660
Yeah, like one that drives me crazy is DateUtil.


00:10:41.660 --> 00:10:42.860
I love DateUtil.


00:10:42.860 --> 00:10:45.860
I think it's like magic for the pain of parsing dates.


00:10:45.860 --> 00:10:47.260
But that's not what you install.


00:10:47.260 --> 00:10:50.020
you install Python underscore date, you tell, right.


00:10:50.020 --> 00:10:53.500
And so there's just, it's those situations where you're like, why is there no date?


00:10:53.500 --> 00:10:56.620
You tell I have pip install date until, and then it's not even the right thing.


00:10:56.620 --> 00:11:00.180
Or, you know, it's, it's just, yeah, I think it's helpful to sort of put those


00:11:00.180 --> 00:11:01.300
things together for people.


00:11:01.300 --> 00:11:01.540
Yeah.


00:11:01.540 --> 00:11:01.940
Yeah.


00:11:01.940 --> 00:11:04.820
And for people doing new packages, don't do this if you can.


00:11:04.820 --> 00:11:09.420
Uh, even if you have the perfect name for your package, maybe come up with something


00:11:09.420 --> 00:11:12.060
else that you can actually, it's available on pipe.


00:11:12.060 --> 00:11:13.060
Yeah.


00:11:13.060 --> 00:11:13.940
Yeah, for sure.


00:11:13.940 --> 00:11:15.740
All right, Nick, you got the next one, right?


00:11:15.740 --> 00:11:16.420
Yep.


00:11:16.500 --> 00:11:18.700
I got the next one.


00:11:18.700 --> 00:11:23.700
So I was looking through Jupyter.


00:11:23.700 --> 00:11:26.020
So I'm like, as I said, as a data engineer,


00:11:26.020 --> 00:11:29.660
I often use Jupyter for like data wrangling


00:11:29.660 --> 00:11:33.500
and just trying out how to like clean up some kind of data


00:11:33.500 --> 00:11:36.260
before I actually do the actual cleaning


00:11:36.260 --> 00:11:37.860
in our data pipeline.


00:11:37.860 --> 00:11:40.020
As I stumble, I got a new iPod.


00:11:40.020 --> 00:11:44.020
I went into like tinkering around with Python code


00:11:44.020 --> 00:11:46.220
and I was like researching into how to do that.


00:11:46.220 --> 00:11:48.800
and I stumbled across JupyterLite.


00:11:48.800 --> 00:11:50.440
And I was like, okay, cool, JupyterLite.


00:11:50.440 --> 00:11:52.860
But sometimes I'm not gonna always,


00:11:52.860 --> 00:11:55.840
always gonna be connected to internet using my iPad.


00:11:55.840 --> 00:11:57.600
And then I look deeper into it


00:11:57.600 --> 00:12:00.640
and it's a Jupyter distribution


00:12:00.640 --> 00:12:02.840
that runs entirely in the browser


00:12:02.840 --> 00:12:05.000
and is like built from the ground up


00:12:05.000 --> 00:12:08.080
using JupyterLab components and extensions.


00:12:08.080 --> 00:12:09.560
And essentially-- - Oh, that's cool.


00:12:09.560 --> 00:12:14.560
- And the kernels that are available are like in the browser.


00:12:14.700 --> 00:12:18.120
So like there's a Python kernel that is like in the browser


00:12:18.120 --> 00:12:20.100
and it's built using PyIoDyed.


00:12:20.100 --> 00:12:21.980
That was like really cool to see.


00:12:21.980 --> 00:12:24.940
And there's also like, I think there is a,


00:12:24.940 --> 00:12:26.500
where is it?


00:12:26.500 --> 00:12:31.380
In the user guide, there are other kernels such as,


00:12:31.380 --> 00:12:33.700
yeah, JavaScript and p5.js,


00:12:33.700 --> 00:12:36.500
which I think is like a graphics library


00:12:36.500 --> 00:12:39.380
to build like things on canvas.


00:12:39.380 --> 00:12:42.860
But it was really cool to see like it's supports Python 3.8


00:12:42.860 --> 00:12:45.460
and you get like start session,


00:12:45.460 --> 00:12:48.840
you can run Python code, Python completion,


00:12:48.840 --> 00:12:50.260
which is really cool.


00:12:50.260 --> 00:12:53.500
It's interesting, they call the kernel Pyolite.


00:12:53.500 --> 00:12:56.740
- Pyolite, based on PyIodide.


00:12:56.740 --> 00:12:58.620
- Yeah, based on PyIodide.


00:12:58.620 --> 00:13:00.740
And this is, I pulled it on, this is how it looks like,


00:13:00.740 --> 00:13:02.860
and it looks pretty cool.


00:13:02.860 --> 00:13:05.300
So it also supports, right, I think for now,


00:13:05.300 --> 00:13:08.900
it supports Altair and Olegoid again.


00:13:08.900 --> 00:13:11.540
- I think Matplotlib as well, I think, yeah.


00:13:11.540 --> 00:13:13.620
- Malta, malta.lib.


00:13:13.620 --> 00:13:18.060
And so like open up this Altair notebook.


00:13:18.060 --> 00:13:20.380
It even has something called micro pip,


00:13:20.380 --> 00:13:23.220
which is like, I don't know what this means,


00:13:23.220 --> 00:13:28.220
but I think it means that it's like a package manager,


00:13:28.220 --> 00:13:33.340
but for the browser for Python, which is interesting.


00:13:33.340 --> 00:13:35.980
- And it's asynchronous


00:13:35.980 --> 00:13:37.700
because it's JavaScript basically, right?


00:13:37.700 --> 00:13:40.780
So it's a wait micro pip installed like Jinja2,


00:13:40.780 --> 00:13:42.180
or Altair or something like that.


00:13:42.180 --> 00:13:43.100
How interesting.


00:13:43.100 --> 00:13:44.520
- That's very cool.


00:13:44.520 --> 00:13:48.900
I think it also, everything that you download


00:13:48.900 --> 00:13:52.960
and everything that, all the data that you like load up,


00:13:52.960 --> 00:13:56.760
it's being stored in the browsers like local storage


00:13:56.760 --> 00:14:00.260
or some other, I don't know, index DB.


00:14:00.260 --> 00:14:02.700
So it's like self-contained.


00:14:02.700 --> 00:14:04.700
The only thing I noticed is that right now,


00:14:04.700 --> 00:14:09.700
it's not, what was the word here?


00:14:09.980 --> 00:14:10.940
PWA.


00:14:10.940 --> 00:14:11.580
So,


00:14:11.580 --> 00:14:15.540
I was just thinking it would be fantastic if that was a progressive web app and


00:14:15.540 --> 00:14:18.660
they just have it in mostly offline mode.


00:14:18.660 --> 00:14:19.060
Yeah.


00:14:19.060 --> 00:14:24.660
Edge does a great job with PWAs and every time you detect like a manifest or


00:14:24.660 --> 00:14:26.780
Jason, it will show you, do you want to install this app?


00:14:26.780 --> 00:14:31.060
And I would just love to have like this click install and then have Jupyter


00:14:31.060 --> 00:14:35.260
light wherever I go, or load it up on my iPad and then disconnect and still be


00:14:35.260 --> 00:14:36.900
tinkering around with what I want.


00:14:36.900 --> 00:14:38.620
So this is all browser based.


00:14:38.620 --> 00:14:39.940
So that's really cool.


00:14:39.940 --> 00:14:41.600
I'm not gonna run any of these,


00:14:41.600 --> 00:14:43.780
but I encourage everybody to check this out.


00:14:43.780 --> 00:14:44.720
It's pretty cool.


00:14:44.720 --> 00:14:45.800
- Yeah, yeah, this is really cool.


00:14:45.800 --> 00:14:48.040
I do the same thing with, I use Brave.


00:14:48.040 --> 00:14:51.560
So I have like a YouTube app installed on my Mac


00:14:51.560 --> 00:14:54.560
and I've got a Twitter app installed


00:14:54.560 --> 00:14:55.760
at all as Progressive Web Apps.


00:14:55.760 --> 00:14:57.080
So you can just launch them.


00:14:57.080 --> 00:14:58.800
I do wish Firefox supported that.


00:14:58.800 --> 00:15:00.160
Firefox people, if you're listening,


00:15:00.160 --> 00:15:01.480
bring back the Progressive Web App.


00:15:01.480 --> 00:15:02.420
We all need this.


00:15:02.420 --> 00:15:03.360
- Yep.


00:15:03.360 --> 00:15:04.200
- Yeah, that's cool.


00:15:04.200 --> 00:15:05.360
What are some of the other notebooks in there


00:15:05.360 --> 00:15:06.200
that look cool?


00:15:06.200 --> 00:15:09.200
Are these like demo ones or did you create these?


00:15:09.200 --> 00:15:10.400
- Yeah, there's a demo one.


00:15:10.400 --> 00:15:14.100
So there are, there's a p5.js one.


00:15:14.100 --> 00:15:15.340
There's the alternate one.


00:15:15.340 --> 00:15:17.920
I don't know what folium is.


00:15:17.920 --> 00:15:19.840
There's the interactive widgets, which is cool.


00:15:19.840 --> 00:15:24.840
So it still uses Jupyter's IPython notebook widgets.


00:15:24.840 --> 00:15:26.360
Matplotlib.


00:15:26.360 --> 00:15:29.200
- Oh, Plotly as well.


00:15:29.200 --> 00:15:31.040
- Oh, cool, and Plotly, cool.


00:15:31.040 --> 00:15:33.500
And so this is a de facto like PyOlight one.


00:15:33.500 --> 00:15:38.040
So it supports Matlab, Pandas, that's cool.


00:15:38.040 --> 00:15:39.920
- It's important to LaTeX as well.


00:15:39.920 --> 00:15:43.840
- Yeah, so like as I was saying before,


00:15:43.840 --> 00:15:46.760
Pyodide is, what is it?


00:15:46.760 --> 00:15:51.760
Is a like implementation of Python on the browser.


00:15:51.760 --> 00:15:54.440
Actually the implementation of Python


00:15:54.440 --> 00:15:56.680
is on the computing stack on the browser.


00:15:56.680 --> 00:16:00.680
So I think things like Pandas, NuPy, SciPy, Scikit-learn


00:16:00.680 --> 00:16:03.320
are already like available,


00:16:03.320 --> 00:16:05.240
it's within the Pyodide ecosystem.


00:16:05.240 --> 00:16:06.080
So you don't have to--


00:16:06.080 --> 00:16:11.320
I had the guys behind it, you know, Firefox and Mozilla was behind it originally, at least.


00:16:11.320 --> 00:16:12.880
And I had them on talk Python.


00:16:12.880 --> 00:16:15.000
I believe it's WebAssembly based.


00:16:15.000 --> 00:16:19.080
I think what they did is they took all these major visualization libraries and things like


00:16:19.080 --> 00:16:25.280
pandas and NumPy and compiled them all into a Python plus those WebAssembly thing that


00:16:25.280 --> 00:16:28.680
runs in the browser instead of a JavaScript version, which is pretty awesome.


00:16:28.680 --> 00:16:30.000
Oh, you mean symbol output?


00:16:30.000 --> 00:16:35.080
Yeah, the symbolic output, like the, got the math symbol integral of the square root of


00:16:35.080 --> 00:16:37.320
- 1/xdx, beautiful. - Yeah.


00:16:37.320 --> 00:16:39.160
- I wonder if you could hand calcs on it.


00:16:39.160 --> 00:16:42.040
- Oh, yeah. (laughing)


00:16:42.040 --> 00:16:42.880
- Awesome.


00:16:42.880 --> 00:16:44.640
Cool, all right, well, that's a really good one.


00:16:44.640 --> 00:16:45.480
I love it.


00:16:45.480 --> 00:16:47.320
All the data scientists out there


00:16:47.320 --> 00:16:49.160
can definitely enjoy that.


00:16:49.160 --> 00:16:50.600
- Yeah, cool.


00:16:50.600 --> 00:16:51.560
What do we got next?


00:16:51.560 --> 00:16:52.760
- I think you're up next.


00:16:52.760 --> 00:16:54.080
- Oh, right, okay.


00:16:54.080 --> 00:16:56.440
So next we've got--


00:16:56.440 --> 00:16:57.680
- More plotting, maybe?


00:16:57.680 --> 00:16:58.760
- Yeah, more plotting.


00:16:58.760 --> 00:17:02.540
So this is a long title.


00:17:02.540 --> 00:17:04.440
Basically, it's lots of plots.


00:17:04.440 --> 00:17:08.360
There's eight popular graphs made with pandas,


00:17:08.360 --> 00:17:11.920
Matplotlib, Seaborn, and Plotly Express.


00:17:11.920 --> 00:17:15.600
I've seen a lot of articles and stuff


00:17:15.600 --> 00:17:19.320
talking about how to do different plots in one or more of these.


00:17:19.320 --> 00:17:22.440
A lot of the articles, and rightly so,


00:17:22.440 --> 00:17:27.400
are focused on something cool you can do with one library that you can't do with others.


00:17:27.400 --> 00:17:30.460
I've seen Seaborn ones like that, and that's great.


00:17:30.460 --> 00:17:33.840
What I like about this article is it's like,


00:17:33.840 --> 00:17:38.780
well, let's just take these different pandas plotting


00:17:38.780 --> 00:17:41.240
and matplotlib, seaborn, plotlyexpress,


00:17:41.240 --> 00:17:42.780
and do the same plot.


00:17:42.780 --> 00:17:45.160
Let's do something they can all do.


00:17:45.160 --> 00:17:47.320
And so that's what this article does.


00:17:47.320 --> 00:17:49.300
It does a whole list.


00:17:49.300 --> 00:17:52.960
You got normal line charts, grouped bar charts,


00:17:52.960 --> 00:17:55.880
stacked bars, pies, a whole bunch of things,


00:17:55.880 --> 00:17:59.160
and histograms, and then you can just compare


00:17:59.160 --> 00:18:02.240
to see what it looks like before you try.


00:18:02.240 --> 00:18:05.460
And for one, it's got the output,


00:18:05.460 --> 00:18:08.840
what do the graphs look like, which is important.


00:18:08.840 --> 00:18:11.920
But also, it's a fairly simple article,


00:18:11.920 --> 00:18:13.700
it's talking about what do the plots look like,


00:18:13.700 --> 00:18:15.300
but also how do you make them?


00:18:15.300 --> 00:18:18.800
It's in a notebook viewer, Jupyter notebook viewer,


00:18:18.800 --> 00:18:22.000
and it shows you what's the code look like


00:18:22.000 --> 00:18:23.460
to get these plots set up.


00:18:23.460 --> 00:18:25.160
And I think that's a big part


00:18:25.160 --> 00:18:26.480
of choosing your plotting library,


00:18:26.480 --> 00:18:28.660
is looking at the API to see


00:18:28.660 --> 00:18:30.920
what kind of API looks comfortable to you.


00:18:30.920 --> 00:18:32.400
I've got to write this code.


00:18:32.400 --> 00:18:33.860
Will I be able to remember this?


00:18:33.860 --> 00:18:34.440
>> Yeah.


00:18:34.440 --> 00:18:37.880
>> Or will it be like regular expressions and I learn it every time I use it?


00:18:37.880 --> 00:18:40.360
>> Yeah. Or if you get stuck with one and you want to switch to


00:18:40.360 --> 00:18:42.880
other to look at what the deltas are.


00:18:42.880 --> 00:18:47.040
I like these side-by-side apples to apples comparison articles.


00:18:47.040 --> 00:18:51.160
I think this is good for choosing the simple parts of plotting.


00:18:51.160 --> 00:18:53.120
But some of the comparisons are funny because


00:18:53.120 --> 00:18:55.600
like the bar charts just all look the same.


00:18:55.600 --> 00:18:58.780
Um, but,


00:18:58.780 --> 00:19:02.040
that one's orange versus orange and blue versus green and blue.


00:19:02.040 --> 00:19:02.800
It's not all the same.


00:19:02.800 --> 00:19:07.700
Uh, yeah, but you get down there, some of the fancy ones in the, in the, yeah,


00:19:07.700 --> 00:19:08.520
they do look great.


00:19:08.520 --> 00:19:10.860
Some of the, what area charts.


00:19:10.860 --> 00:19:12.820
Um, yeah, that one looks great.


00:19:12.820 --> 00:19:13.240
What's that?


00:19:13.240 --> 00:19:15.300
Uh, probably express area charts.


00:19:15.300 --> 00:19:15.860
The costume.


00:19:15.860 --> 00:19:16.300
Yeah.


00:19:16.300 --> 00:19:17.460
The area charts look good.


00:19:17.460 --> 00:19:22.700
And what's the donut chart was a donut pie chart with a hole in it.


00:19:22.700 --> 00:19:23.380
Yep.


00:19:23.380 --> 00:19:24.620
Why do people use that?


00:19:24.620 --> 00:19:29.780
What's I think it's because of like with the pie charts, the


00:19:29.780 --> 00:19:33.380
sectors are kind of, it's kind of, sometimes it can be hard to


00:19:33.380 --> 00:19:38.460
see like how much with no, like, yeah, the circumference of like


00:19:38.460 --> 00:19:39.260
at this sector.


00:19:39.260 --> 00:19:42.260
So maybe the donut chart, it kind of makes it easier to see


00:19:42.260 --> 00:19:45.020
like, okay, this takes like all of this.


00:19:45.020 --> 00:19:46.740
It's just a visual thing to be honest.


00:19:46.740 --> 00:19:47.020
Yeah.


00:19:47.020 --> 00:19:48.140
Okay, good.


00:19:48.140 --> 00:19:49.100
Nick, this is your world.


00:19:49.100 --> 00:19:49.580
What do you think?


00:19:49.580 --> 00:19:51.180
I think this is really cool.


00:19:51.180 --> 00:19:57.420
but to be honest, all of these APIs don't compare to the grammar of graphics from R.


00:19:57.420 --> 00:19:59.460
And so I usually use...


00:19:59.460 --> 00:20:03.260
If I am going to do graphics in Python,


00:20:03.260 --> 00:20:07.900
I would prefer to use something that like conforms to the grammar of graphics


00:20:07.900 --> 00:20:10.420
because to me, that's kind of...


00:20:10.420 --> 00:20:16.300
You know how like Python has the import this and it's all philosophy of how you write Python?


00:20:16.300 --> 00:20:18.060
The grammar of graphics has that.


00:20:18.060 --> 00:20:21.640
It gives you these sentences,


00:20:21.640 --> 00:20:23.700
so to speak, to build graphics.


00:20:23.700 --> 00:20:25.900
That makes so much sense in my head.


00:20:25.900 --> 00:20:31.420
For GraphQL, it's either Altair or ggplot.


00:20:31.420 --> 00:20:36.280
There is a Python port of ggplot that's pretty good,


00:20:36.280 --> 00:20:37.580
but I think Altair is like


00:20:37.580 --> 00:20:40.940
the Pythonic de facto version that I've used.


00:20:40.940 --> 00:20:42.180
That's really nice.


00:20:42.180 --> 00:20:45.140
All the other ones that make me have to do


00:20:46.860 --> 00:20:50.180
do these method calls on objects,


00:20:50.180 --> 00:20:52.580
just I can't remember it.


00:20:52.580 --> 00:20:54.700
I'll have to come back to something like this.


00:20:54.700 --> 00:20:58.180
How do you use Ganymath or are you using Seaborn?


00:20:58.180 --> 00:21:00.360
I really like the fact that Seaborn has a lot of


00:21:00.360 --> 00:21:05.260
one-liners to do simple charts in one line, which is great.


00:21:05.260 --> 00:21:06.740
Unlike with the grammar graphics,


00:21:06.740 --> 00:21:09.100
it still makes you have to build everything out.


00:21:09.100 --> 00:21:13.240
But if I'm building something really custom or I am


00:21:13.240 --> 00:21:19.160
just building something that I want to have complete control over, the grammar


00:21:19.160 --> 00:21:23.800
of graphics just gives me a better way of remembering what to do compared to


00:21:23.800 --> 00:21:27.560
having to remember all this API, all this method API calls.


00:21:27.560 --> 00:21:32.200
>> Well, I mean, the author, Dylan Castillo, says, "Let me know what you


00:21:32.200 --> 00:21:37.400
think." So maybe we could give him some feedback to add Altair and a couple


00:21:37.400 --> 00:21:37.720
others.


00:21:37.720 --> 00:21:41.160
>> Oh, yeah, that'd be cool. Dean also has some thoughts out there, Brian.


00:21:41.160 --> 00:21:44.920
Oh, Seaborn and Pandas use matplotlib in the back end,


00:21:44.920 --> 00:21:47.240
so you can do everything they can do with matplotlib.


00:21:47.240 --> 00:21:49.640
Okay. It'd be harder, but not impossible.


00:21:49.640 --> 00:21:51.720
Also, that's probably why they look all the same.


00:21:51.720 --> 00:21:54.520
[LAUGHTER]


00:21:54.520 --> 00:21:56.760
They are the same. Turtles all the way down.


00:21:56.760 --> 00:21:58.240
He also says, "Remember kids,


00:21:58.240 --> 00:22:01.880
almost every command in matplotlib returns the object it charts.


00:22:01.880 --> 00:22:03.400
That's the start of OOP,


00:22:03.400 --> 00:22:05.600
object-oriented plotting." All right, Reno.


00:22:05.600 --> 00:22:07.120
OOP, it'd be two Ps.


00:22:07.120 --> 00:22:09.380
(laughing)


00:22:09.380 --> 00:22:15.080
- All right, well, Brian, you got to talk about databases.


00:22:15.080 --> 00:22:17.400
So I'm going to talk about databases too.


00:22:17.400 --> 00:22:19.760
But my databases are going to be smaller


00:22:19.760 --> 00:22:22.920
and in memory and embedded, but also about MongoDB.


00:22:22.920 --> 00:22:27.200
So there's this really cool one created by David Latwe


00:22:27.200 --> 00:22:29.200
called MontyDB.


00:22:29.200 --> 00:22:34.200
So it's a Monty, it's a MongoDB tiny-ified.


00:22:34.600 --> 00:22:37.700
So it's MongoDB implemented in Python,


00:22:37.700 --> 00:22:39.480
and you can have it in process,


00:22:39.480 --> 00:22:41.720
kind of like SQLite, I believe.


00:22:41.720 --> 00:22:43.140
We've covered a couple of these libraries


00:22:43.140 --> 00:22:44.400
that are starting to show up


00:22:44.400 --> 00:22:46.560
that let you do sort of embedded MongoDB,


00:22:46.560 --> 00:22:48.480
which I think is really neat.


00:22:48.480 --> 00:22:51.040
So it's inspired by TinyDB,


00:22:51.040 --> 00:22:53.240
and its extension, TinyMongo.


00:22:53.240 --> 00:22:55.360
So the way you work with it, it's super simple.


00:22:55.360 --> 00:22:57.440
You just import the Monty client.


00:22:57.440 --> 00:23:00.060
If you want to go crazy, you could say as Mongo client,


00:23:00.060 --> 00:23:01.500
and make it basically the same.


00:23:01.500 --> 00:23:03.160
And then you can give it connection strings


00:23:03.160 --> 00:23:04.980
like colon memory colon,


00:23:04.980 --> 00:23:07.420
that should look familiar from something like SQLite.


00:23:07.420 --> 00:23:09.120
And then you can insert data to it,


00:23:09.120 --> 00:23:12.240
do all sorts of things and do queries against it,


00:23:12.240 --> 00:23:15.440
run like the MongoDB query syntax against it,


00:23:15.440 --> 00:23:17.020
and you get the responses back,


00:23:17.020 --> 00:23:18.940
which I think is pretty cool.


00:23:18.940 --> 00:23:21.360
It's certainly interesting for testing.


00:23:21.360 --> 00:23:23.580
If you told it to use a file storage,


00:23:23.580 --> 00:23:26.160
it could be an interesting little embedded database


00:23:26.160 --> 00:23:27.220
and things like that.


00:23:27.220 --> 00:23:28.180
So pretty cool.


00:23:28.180 --> 00:23:31.240
It supports many of the MongoDB versions up to 4.2


00:23:31.240 --> 00:23:34.680
and 4/4 on the way with wave emoji.


00:23:34.680 --> 00:23:36.760
I'm not really sure about that, but also--


00:23:36.760 --> 00:23:38.800
- Sweat. - What's that?


00:23:38.800 --> 00:23:40.340
- I think it's sweat.


00:23:40.340 --> 00:23:43.240
- Oh, gotcha, like the work is being done, gotcha.


00:23:43.240 --> 00:23:45.760
So you can pip install MontyDB,


00:23:45.760 --> 00:23:49.480
and it will work in sort of its way.


00:23:49.480 --> 00:23:52.360
If you wanna use the actual serialization library


00:23:52.360 --> 00:23:56.600
from MongoDB itself, you can say install MontyDB


00:23:56.600 --> 00:23:59.320
bracket bson to install that as well.


00:23:59.320 --> 00:24:04.320
And it also has a lightning memory map DB LMDB library.


00:24:04.320 --> 00:24:07.520
It can use that as the storage engine as well.


00:24:07.520 --> 00:24:10.800
So you can pip install, you know, add that on as well.


00:24:10.800 --> 00:24:12.560
So for the storage, you've got in memory,


00:24:12.560 --> 00:24:13.800
you've got a flat file.


00:24:13.800 --> 00:24:16.200
It'll actually use SQL lite as a back end store,


00:24:16.200 --> 00:24:17.040
which is pretty cool.


00:24:17.040 --> 00:24:20.560
And then that LMDB lightning memory mapped DB.


00:24:20.560 --> 00:24:22.960
So this looks pretty neat to me.


00:24:22.960 --> 00:24:25.520
If you're gonna do some kind of embedded thing,


00:24:25.520 --> 00:24:26.800
or you're gonna do some testing


00:24:26.800 --> 00:24:28.880
and you want something lightweight,


00:24:28.880 --> 00:24:31.540
it's not a separate server, you've got to set up and run


00:24:31.540 --> 00:24:33.320
and all those kinds of things.


00:24:33.320 --> 00:24:34.160
This is cool.


00:24:34.160 --> 00:24:35.120
- I think it's awesome.


00:24:35.120 --> 00:24:37.240
- Could you make this a pytest fixture, Brian,


00:24:37.240 --> 00:24:39.900
that just gives you like preset, sets up your database


00:24:39.900 --> 00:24:42.280
and gives you access to the connection or something?


00:24:42.280 --> 00:24:44.000
- Yeah, I mean, I actually, I don't,


00:24:44.000 --> 00:24:46.440
I'm not really a fan of people switching their databases


00:24:46.440 --> 00:24:49.280
too much for testing because most modern databases


00:24:49.280 --> 00:24:52.840
have in-memory options or smaller version options.


00:24:52.840 --> 00:24:56.280
But I mean, we use SQLite for tons of stuff.


00:24:56.280 --> 00:24:57.880
That's not just for testing.


00:24:57.880 --> 00:24:59.720
And if you've got SQLite at the back end,


00:24:59.720 --> 00:25:00.920
there's no reason why this couldn't be


00:25:00.920 --> 00:25:03.560
a production thing then.


00:25:03.560 --> 00:25:04.720
- Yeah, absolutely.


00:25:04.720 --> 00:25:06.440
- No, this is really cool.


00:25:06.440 --> 00:25:09.440
This could be really useful for like CLI apps


00:25:09.440 --> 00:25:11.880
that need to store your things.


00:25:11.880 --> 00:25:13.920
- Exactly, you wanna have a little thing,


00:25:13.920 --> 00:25:14.760
but you don't wanna say,


00:25:14.760 --> 00:25:16.520
"Oh, you wanna run my little utility,


00:25:16.520 --> 00:25:21.000
"I packaged it up with Py2 app or Py2 exe or something."


00:25:21.000 --> 00:25:22.400
You're gonna need to install MongoDB


00:25:22.400 --> 00:25:23.960
and become an admin of that.


00:25:23.960 --> 00:25:27.320
No, you just use like a SQLite file


00:25:27.320 --> 00:25:29.840
as the back end store or the LMDB version.


00:25:29.840 --> 00:25:32.840
Another thing that's common from the MongoDB world


00:25:32.840 --> 00:25:35.800
is there's a set of CLI tools that allows you to manage it.


00:25:35.800 --> 00:25:38.120
So I can connect to it.


00:25:38.120 --> 00:25:42.360
I can import a bunch of exported files from some other


00:25:42.360 --> 00:25:45.240
or backed up files from some other MongoDB instance


00:25:45.240 --> 00:25:49.320
and import that into my current server or whatever


00:25:49.320 --> 00:25:51.200
or create those exports, right?


00:25:51.200 --> 00:25:54.440
There's actually a bunch of utilities called Monty import,


00:25:54.440 --> 00:25:57.680
Monty export, Monty restore, Monty dump.


00:25:57.680 --> 00:26:00.800
All of these are the parallels of


00:26:00.800 --> 00:26:04.440
Mongo dump, Mongo restore, and so on.


00:26:04.440 --> 00:26:07.160
If you're used to working with MongoDB,


00:26:07.160 --> 00:26:11.320
it's not just explicitly that there's some API to talk to some file.


00:26:11.320 --> 00:26:13.960
There's also the tools that are there as well.


00:26:13.960 --> 00:26:14.680
>> Yeah.


00:26:14.680 --> 00:26:17.680
>> Yeah, I think that could be a cool project.


00:26:17.680 --> 00:26:20.760
So why did I make this mostly for just fun and practice,


00:26:20.760 --> 00:26:24.320
but also needed to run in this limited environments


00:26:24.320 --> 00:26:27.040
for like render farms in the film industry.


00:26:27.040 --> 00:26:28.160
So that's pretty cool.


00:26:28.160 --> 00:26:29.560
(laughing)


00:26:29.560 --> 00:26:31.680
- It's a side project also with render firms.


00:26:31.680 --> 00:26:33.800
(laughing)


00:26:33.800 --> 00:26:36.200
- It's a side project for my super computer, yes.


00:26:36.200 --> 00:26:37.520
(laughing)


00:26:37.520 --> 00:26:40.960
- I love the name by the way, Monty, Monty Python.


00:26:40.960 --> 00:26:44.120
- Yeah, I mean, yeah, it really brings the MongoDB


00:26:44.120 --> 00:26:48.120
word play in with Monty Python, Python, or, or Daniel.


00:26:48.120 --> 00:26:48.960
Pretty cool.


00:26:48.960 --> 00:26:50.040
All right, Nick, you got the last one?


00:26:50.040 --> 00:26:51.640
Awesome.


00:26:51.640 --> 00:26:55.440
Exhaustiveness checking with mypy.


00:26:55.440 --> 00:26:59.000
So essentially what exhaustiveness checking is,


00:26:59.000 --> 00:27:02.160
is a feature of like a lot of type checkers


00:27:02.160 --> 00:27:05.460
where they guarantee that the programmer


00:27:05.460 --> 00:27:07.760
has covered all their cases.


00:27:07.760 --> 00:27:12.760
And so with mypy, you could essentially check things


00:27:12.760 --> 00:27:15.160
like whether you've covered all the,


00:27:15.160 --> 00:27:17.720
or like you have written all the if statements


00:27:17.720 --> 00:27:19.880
you're supposed to write at compile time


00:27:19.880 --> 00:27:23.080
rather than figuring that out at runtime.


00:27:23.080 --> 00:27:26.600
And I really got into using mypy


00:27:26.600 --> 00:27:31.600
and trying to have it save my butt a lot


00:27:31.600 --> 00:27:34.600
the way I think about code by embracing types.


00:27:34.600 --> 00:27:37.520
So I stumbled across this, which was really interesting,


00:27:37.520 --> 00:27:42.440
where this article written by Haki Benita


00:27:42.440 --> 00:27:46.720
went into how auxiliary net checking actually works.


00:27:46.720 --> 00:27:51.720
So they start out with enum that has order status


00:27:51.720 --> 00:27:56.200
and you have a function that is called handle order


00:27:56.200 --> 00:28:00.000
that takes a status, which is an instance,


00:28:00.000 --> 00:28:01.720
which should be an instance of order status.


00:28:01.720 --> 00:28:05.320
And so in his function, he has it like,


00:28:05.320 --> 00:28:07.960
if status is order ready, you do something.


00:28:07.960 --> 00:28:10.200
If status is order shift, you do something.


00:28:10.200 --> 00:28:13.200
But then he gave this, like,


00:28:13.200 --> 00:28:16.000
added this like new scenario where,


00:28:16.000 --> 00:28:19.600
What if you wanted to check the status


00:28:19.600 --> 00:28:20.960
of something scheduled?


00:28:20.960 --> 00:28:23.080
And so he tried to run my Py right now


00:28:23.080 --> 00:28:24.280
and I didn't complain about it.


00:28:24.280 --> 00:28:26.200
So like, okay, cool.


00:28:26.200 --> 00:28:27.960
- Yeah, 'cause one of the things that's very common


00:28:27.960 --> 00:28:30.520
is if you have something like a set of cases,


00:28:30.520 --> 00:28:33.640
in this case it's put together in an enumeration,


00:28:33.640 --> 00:28:35.180
you have more cases over time,


00:28:35.180 --> 00:28:38.880
but all these if, else if, else if, else if statements


00:28:38.880 --> 00:28:42.420
all over your code, have you exhaustively gone through


00:28:42.420 --> 00:28:44.560
and added that case check for all of them?


00:28:44.560 --> 00:28:45.400
Probably not.


00:28:45.400 --> 00:28:45.920
>> Yeah, probably.


00:28:45.920 --> 00:28:48.440
>> You've got a good test, a really good test.


00:28:48.440 --> 00:28:55.540
>> Okay. He proposed one quick way of checking that you handled


00:28:55.540 --> 00:29:02.040
all cases is by adding this assert false comma on handle status,


00:29:02.040 --> 00:29:04.680
you pass in the status using f strings.


00:29:04.680 --> 00:29:06.680
Then when you try to pass


00:29:06.680 --> 00:29:10.120
a state that you have not actually handled before,


00:29:10.120 --> 00:29:12.280
you actually get assertion error,


00:29:12.280 --> 00:29:15.820
which is all right, but if you use mypy,


00:29:15.820 --> 00:29:20.820
there's this clever trick where you create a function called assertNever


00:29:20.820 --> 00:29:26.540
that takes a value called noReturn and returns noReturn,


00:29:26.540 --> 00:29:29.860
and in it, it has the assertFalse on handle value.


00:29:29.860 --> 00:29:36.300
Then when you use that function in your handleOrder function,


00:29:36.300 --> 00:29:37.620
you at the end case,


00:29:37.620 --> 00:29:41.800
you have this else assertNever and you pass in the status.


00:29:41.800 --> 00:29:44.260
Now when you check with mypy, mypy will know,


00:29:44.260 --> 00:29:47.280
hey, argument one to assert has incompatible type,


00:29:47.280 --> 00:29:50.880
literal, or their status schedule, expected, no return.


00:29:50.880 --> 00:29:52.380
>> How interesting.


00:29:52.380 --> 00:29:54.920
>> Yeah. This is a compile time and you can actually get this.


00:29:54.920 --> 00:29:56.840
>> Yeah. I think that's the important thing


00:29:56.840 --> 00:29:58.040
because I was looking at that going,


00:29:58.040 --> 00:30:00.320
I could just add the else statement and put the assert


00:30:00.320 --> 00:30:04.020
there and have nothing to do with mypy and it would catch that error.


00:30:04.020 --> 00:30:06.560
But that catches that error when that code runs.


00:30:06.560 --> 00:30:07.720
Like I said before,


00:30:07.720 --> 00:30:10.960
hopefully there's test, but oftentimes there's not test for everything.


00:30:10.960 --> 00:30:11.560
>> Yeah.


00:30:11.560 --> 00:30:18.660
And so especially it's there might not be a test for the new thing you've added. And so this is cool in that it it checks


00:30:18.660 --> 00:30:20.820
all the possible types that could go in there. That's cool.


00:30:20.820 --> 00:30:31.980
Yeah, and it's the part that really got me was that it integrates with your ID. So PyCharm VS Code, or any any editor that


00:30:31.980 --> 00:30:39.580
implements a language server can then like look at this and say, Hey, you haven't handled all your cases, right? And you get that


00:30:39.580 --> 00:30:43.500
immediate feedback rather than having to run your code and then find out,


00:30:43.500 --> 00:30:46.220
"Oh, dang it, I missed this case."


00:30:46.220 --> 00:30:49.380
>> Yeah. People who are not looking at the live stream,


00:30:49.380 --> 00:30:53.100
YouTube stream, which is almost all the people listening,


00:30:53.100 --> 00:30:55.620
Nick is showing on the screen


00:30:55.620 --> 00:30:59.340
this assert function that's checking the enumeration.


00:30:59.340 --> 00:31:02.740
There's just a red squiggly line that literally says,


00:31:02.740 --> 00:31:05.940
"Assert never has incompatible order status scheduled."


00:31:05.940 --> 00:31:08.220
That's the missed enumeration case.


00:31:08.220 --> 00:31:10.140
I think that's incredible that actually finds this.


00:31:10.140 --> 00:31:18.780
>> Yeah. It works because mypy uses this technique called type narrowing.


00:31:18.780 --> 00:31:25.020
Essentially, what that means is that it's given a variable


00:31:25.020 --> 00:31:28.340
as it goes through a control flow,


00:31:28.340 --> 00:31:31.180
like if statements, switch statements,


00:31:31.180 --> 00:31:35.220
while mypy will confine or in other words,


00:31:35.220 --> 00:31:39.860
narrow down the types as it goes through those control flow.


00:31:39.860 --> 00:31:45.860
It works with enumeration types, unions, literals.


00:31:45.860 --> 00:31:48.500
I have in the article there are examples of


00:31:48.500 --> 00:31:52.080
how you could pass in a union of different types, strings,


00:31:52.080 --> 00:31:55.240
float, and you could still use this technique and it'll tell you,


00:31:55.240 --> 00:31:57.580
"Hey, you've missed a case."


00:31:57.580 --> 00:32:00.340
Or you could do this with literals.


00:32:00.340 --> 00:32:03.660
You have RGB and then you only


00:32:03.660 --> 00:32:08.540
implemented the, you only check for like two cases, which are R and G, and they need to tell


00:32:08.540 --> 00:32:15.980
you, hey, you did not handle the B case. So yeah, and so like, the article goes further into


00:32:15.980 --> 00:32:22.540
different ways in which you could set this up, have my check all of the different cases for you,


00:32:22.540 --> 00:32:23.820
which is really cool.


00:32:23.820 --> 00:32:29.180
You've even got like the, the various suites for cards, like diamonds, hearts.


00:32:29.180 --> 00:32:31.860
It's interesting that to Mai Pai,


00:32:31.860 --> 00:32:35.360
when it sees an enum that has like clubs,


00:32:35.360 --> 00:32:36.960
diamonds, hearts, and spades,


00:32:36.960 --> 00:32:40.420
all it sees is like a union of literals,


00:32:40.420 --> 00:32:42.740
which are sweets, cards,


00:32:42.740 --> 00:32:44.140
sweet clubs, sweet heart,


00:32:44.140 --> 00:32:45.160
which is actually interesting.


00:32:45.160 --> 00:32:46.360
That's how Mai Pai sees it.


00:32:46.360 --> 00:32:47.560
>> Yeah, that's very interesting.


00:32:47.560 --> 00:32:49.420
Basically, it's emojis.


00:32:49.420 --> 00:32:52.140
>> Yeah, it's basically emojis.


00:32:52.140 --> 00:32:56.980
The one other thing I wanted to mention here is


00:32:56.980 --> 00:33:01.260
that there was a specific, oh yeah.


00:33:01.260 --> 00:33:04.220
This feature is actually something


00:33:04.220 --> 00:33:07.100
that Guido actually thought was pretty cool.


00:33:07.100 --> 00:33:10.460
And so I think it's part of PEP 622,


00:33:10.460 --> 00:33:12.500
structural pattern matching already.


00:33:12.500 --> 00:33:16.100
So if you are matching against an enum


00:33:16.100 --> 00:33:20.180
or something that has multiple different states,


00:33:20.180 --> 00:33:23.420
the matching, hopefully Python 3.10


00:33:23.420 --> 00:33:24.540
will give you a nice error saying,


00:33:24.540 --> 00:33:28.940
"Hey, you missed a particular case."


00:33:28.940 --> 00:33:32.220
And this could really, and if you're a Django developer,


00:33:32.220 --> 00:33:34.340
or you just use Django, or even, yeah,


00:33:34.340 --> 00:33:38.180
you use a new ORM, and the ORM provides something


00:33:38.180 --> 00:33:43.180
like choices, where like yes, no, or dollar, euro,


00:33:43.180 --> 00:33:45.600
like these kinds of choices in the field,


00:33:45.600 --> 00:33:46.860
this works pretty well.


00:33:46.860 --> 00:33:48.020
And so in your Django code,


00:33:48.020 --> 00:33:49.680
you could actually have mypy telling you,


00:33:49.680 --> 00:33:53.900
"Hey, you missed handling a particular case."


00:33:53.900 --> 00:33:56.820
- Yeah, that's awesome. - Yeah, which is really cool.


00:33:56.820 --> 00:34:01.660
Yeah, Sam out in the live stream was sort of on to the same thoughts you were talking about with Peter there.


00:34:01.660 --> 00:34:06.700
Wonder if one could hack on the match mechanism to deliver this functionality at runtime


00:34:06.700 --> 00:34:12.380
using by somehow getting all the variants of the enum and checking the branches


00:34:12.380 --> 00:34:13.820
in the AST or something. Yeah.


00:34:13.820 --> 00:34:19.100
That's actually interesting because I know that part of the structural pattern matching


00:34:19.100 --> 00:34:24.580
any object can implement the magic method match,


00:34:24.580 --> 00:34:27.020
and maybe that is your gate,


00:34:27.020 --> 00:34:29.140
like that's your entry point into providing


00:34:29.140 --> 00:34:32.000
that kind of checking at runtime.


00:34:32.000 --> 00:34:34.060
Of course, with Python,


00:34:34.060 --> 00:34:38.180
anything that has around runtime checking,


00:34:38.180 --> 00:34:40.940
there's performance costs with that, so be careful.


00:34:40.940 --> 00:34:45.380
>> Yeah, but having this built into Mypy already would be good.


00:34:45.380 --> 00:34:48.980
And Juergen is talking about on the live stream,


00:34:48.980 --> 00:34:51.220
he says, "I wonder whether you could rewrite the code


00:34:51.220 --> 00:34:53.220
"to not use if statements at all,


00:34:53.220 --> 00:34:55.580
"but be more polymorphic."


00:34:55.580 --> 00:34:58.220
Which I agree, it's a really interesting idea


00:34:58.220 --> 00:35:00.340
with the method overloading and stuff.


00:35:00.340 --> 00:35:03.300
And it reminds me back a couple weeks ago,


00:35:03.300 --> 00:35:05.020
Brian talked about function overloading


00:35:05.020 --> 00:35:07.420
with single dispatch and multiple dispatch.


00:35:07.420 --> 00:35:09.660
And yeah, you could kind of more or less


00:35:09.660 --> 00:35:10.580
make that happen there.


00:35:10.580 --> 00:35:11.620
So yeah, pretty neat.


00:35:11.620 --> 00:35:14.500
Although you still may miss a case, I'm not entirely sure.


00:35:14.500 --> 00:35:16.700
At least in the enumeration bit, that won't help you, right?


00:35:16.700 --> 00:35:18.460
'Cause the enum will still be the same type.


00:35:18.460 --> 00:35:20.460
It'll just, you'll still have more values.


00:35:20.460 --> 00:35:21.820
- Yep. - Awesome.


00:35:21.820 --> 00:35:22.660
Good one, Nick.


00:35:22.660 --> 00:35:23.820
Brian, what else we got?


00:35:23.820 --> 00:35:25.980
- Well, I've got a couple things.


00:35:25.980 --> 00:35:28.900
One of the things I wanted to note was that


00:35:28.900 --> 00:35:30.380
this is the second week in a row


00:35:30.380 --> 00:35:32.900
we've featured an article by Haki,


00:35:32.900 --> 00:35:36.220
or Haki, and the third in this year.


00:35:36.220 --> 00:35:38.340
So we should probably try to get him on the show


00:35:38.340 --> 00:35:39.300
or something, so.


00:35:39.300 --> 00:35:40.500
- Yeah, absolutely.


00:35:40.500 --> 00:35:41.700
That sounds good.


00:35:41.700 --> 00:35:44.140
- He's doing some good writing, so thanks.


00:35:44.140 --> 00:35:47.580
The other thing I wanted to mention is I've got,


00:35:47.580 --> 00:35:50.920
oh yeah, by the way, my book is out.


00:35:50.920 --> 00:35:53.080
- Yay!


00:35:53.080 --> 00:35:54.880
This is the book too.


00:35:54.880 --> 00:35:58.160
- Yeah, second edition of pytest is available for beta.


00:35:58.160 --> 00:36:01.020
So people can tell me everything that's,


00:36:01.020 --> 00:36:04.020
I already got it, somebody said they have got an issue.


00:36:04.020 --> 00:36:08.100
It's a minor issue with it already, so thanks.


00:36:08.100 --> 00:36:10.900
But it's just been me and my editor so far


00:36:10.900 --> 00:36:11.740
working through it.


00:36:11.740 --> 00:36:14.740
having more people, more eyes before we go to,


00:36:14.740 --> 00:36:17.140
go to shipping the physical book would be great.


00:36:17.140 --> 00:36:20.100
So of course this is through pragmatic,


00:36:20.100 --> 00:36:22.260
but if you go to pytestbook.com,


00:36:22.260 --> 00:36:24.860
it'll take you there. So that was my extra.


00:36:24.860 --> 00:36:26.980
>> Right on. Cool. I've got a couple as well.


00:36:26.980 --> 00:36:28.300
Yeah, I got some neat ones here.


00:36:28.300 --> 00:36:32.440
So how often do you maybe have like a blueprint, floor plan?


00:36:32.440 --> 00:36:34.540
Maybe you're looking at a house


00:36:34.540 --> 00:36:36.540
and you're trying to decide whether you want to buy it,


00:36:36.540 --> 00:36:39.020
what would it be like to actually live there?


00:36:39.020 --> 00:36:41.140
Maybe you're trying to figure out, well,


00:36:41.140 --> 00:36:43.360
I'm planning out this apartment or I have this place,


00:36:43.360 --> 00:36:48.160
I want to remodel it like Ikea it all out or something along those lines.


00:36:48.160 --> 00:36:53.900
I ran across this thing that uses some interesting models called plan to scene.


00:36:53.900 --> 00:36:57.820
The idea is it'll take what is literally a floor plan,


00:36:57.820 --> 00:37:01.340
like a blueprint floor plan that shows like swinging doors and bits,


00:37:01.340 --> 00:37:03.620
and then you tell it what kind of room it is.


00:37:03.620 --> 00:37:05.740
It's like a bedroom or a bathroom or whatever,


00:37:05.740 --> 00:37:12.340
and it will generate a 3D world that has things like sinks and toilets and


00:37:12.340 --> 00:37:16.420
couches that are three-dimensional, not just somehow projected in there.


00:37:16.420 --> 00:37:19.300
There's all of these interesting things you can see.


00:37:19.300 --> 00:37:20.460
There's like if you pull up the site,


00:37:20.460 --> 00:37:22.900
there's all these spinning worlds and you can see that they've


00:37:22.900 --> 00:37:26.300
created these little environments just from floor plans,


00:37:26.300 --> 00:37:28.260
which I think is pretty insane.


00:37:28.260 --> 00:37:30.340
Anyway, you can go ahead, Nick.


00:37:30.340 --> 00:37:32.300
>> That's really cool.


00:37:32.300 --> 00:37:36.900
I wonder if like, because like Tremble, we own like SketchUp.


00:37:36.900 --> 00:37:38.900
I wonder if they do this kind of stuff.


00:37:38.900 --> 00:37:42.940
They take floor plans and then they make it 3D.


00:37:42.940 --> 00:37:44.100
That's really cool.


00:37:44.100 --> 00:37:46.820
- Yeah, there's a whole bunch of comparisons


00:37:46.820 --> 00:37:48.060
of how it used to be done,


00:37:48.060 --> 00:37:49.980
how you can pick like different,


00:37:49.980 --> 00:37:52.220
you know, different flooring and walls


00:37:52.220 --> 00:37:53.860
and source codes available on GitHub.


00:37:53.860 --> 00:37:54.700
People can run with that.


00:37:54.700 --> 00:37:55.740
So that's pretty cool.


00:37:55.740 --> 00:37:56.940
It's called plan to scene.


00:37:56.940 --> 00:38:00.660
And then just a quick shout out to this TCast podcast.


00:38:00.660 --> 00:38:02.580
I happen to be a guest of recently,


00:38:02.580 --> 00:38:05.780
and we got to talk about Python and data science


00:38:05.780 --> 00:38:08.980
and how Python and data are sort of changing the world


00:38:08.980 --> 00:38:09.820
and stuff, and it's really fun.


00:38:09.820 --> 00:38:11.340
So people can check that out.


00:38:11.340 --> 00:38:12.700
Yeah, and that's it for the things I got.


00:38:12.700 --> 00:38:14.340
Nick, anything else you want to throw out there?


00:38:14.340 --> 00:38:17.340
- Yeah, just a shameless plug.


00:38:17.340 --> 00:38:20.060
As I said earlier on the livestream,


00:38:20.060 --> 00:38:22.580
I co-host the CLEPI,


00:38:22.580 --> 00:38:25.940
which is Cleveland's Area Python Meetup Group.


00:38:25.940 --> 00:38:30.940
And so we have meetups every second Monday of the month.


00:38:30.940 --> 00:38:35.880
And one of the reasons why I would encourage anybody


00:38:35.880 --> 00:38:39.220
across the world or US or everywhere


00:38:39.220 --> 00:38:42.460
to still come and present is because oftentimes


00:38:42.460 --> 00:38:47.020
meetups are a great place to present talks


00:38:47.020 --> 00:38:48.320
that you are planning on giving


00:38:48.320 --> 00:38:53.220
and maybe like continental conferences


00:38:53.220 --> 00:38:55.180
or like other larger conferences,


00:38:55.180 --> 00:38:59.940
smaller crowd and you know, we show you guys a good time, right?


00:38:59.940 --> 00:39:04.340
So it's a great place to come, give your talk, get feedback from that, and then,


00:39:04.340 --> 00:39:06.340
you know, take on the improve on it.


00:39:06.340 --> 00:39:07.500
So that's one.


00:39:07.500 --> 00:39:15.900
And then the other, shameless blog is that PI Ohio has its own conference


00:39:15.900 --> 00:39:20.380
coming up on July 31st registrations are open.


00:39:20.380 --> 00:39:22.020
We have pretty cool t-shirts.


00:39:22.020 --> 00:39:23.860
So yeah, register.


00:39:24.140 --> 00:39:26.660
>> Is that live or streaming?


00:39:26.660 --> 00:39:28.940
>> Yes, that is being streamed.


00:39:28.940 --> 00:39:30.220
>> Okay. How about your meetups?


00:39:30.220 --> 00:39:32.420
Are those streamed or live?


00:39:32.420 --> 00:39:35.980
>> Those are virtual. We used to have them in person,


00:39:35.980 --> 00:39:40.340
and that's when pandemic really messed things up because you have stuff like


00:39:40.340 --> 00:39:43.660
pizza over and those have a good time talking about Python.


00:39:43.660 --> 00:39:49.140
But no, the virtual setting has given a lot more people access.


00:39:49.140 --> 00:39:51.500
We're able to have more people on.


00:39:51.500 --> 00:39:52.380
>> Nice.


00:39:52.380 --> 00:39:53.920
>> Yeah, that's fantastic.


00:39:53.920 --> 00:39:57.180
Pi Ohio is definitely one of those big regional conferences


00:39:57.180 --> 00:40:00.260
that a lot of people pay attention to even if they're not in Ohio.


00:40:00.260 --> 00:40:02.940
Are you going to go back to in-person only?


00:40:02.940 --> 00:40:06.700
Are you going to do a hybrid stream and in-person or is it going to be?


00:40:06.700 --> 00:40:10.100
What's your plans for when the world returns to normal?


00:40:10.100 --> 00:40:12.060
>> That's if it ever returns to normal.


00:40:12.060 --> 00:40:14.220
I think we'll change forever.


00:40:14.220 --> 00:40:16.340
But to answer your question,


00:40:16.340 --> 00:40:20.660
I think my co-organizer and I have been thinking about it.


00:40:20.660 --> 00:40:22.660
We're not set yet,


00:40:22.660 --> 00:40:24.940
we see the benefits of the virtual,


00:40:24.940 --> 00:40:28.060
but we also see the benefits of the live.


00:40:28.060 --> 00:40:29.820
Things have changed so much,


00:40:29.820 --> 00:40:31.140
we don't even know whether the live


00:40:31.140 --> 00:40:32.860
person is still available.


00:40:32.860 --> 00:40:35.460
But no, it's something we're thinking about.


00:40:35.460 --> 00:40:37.500
>> Cool. Well, it's a challenge,


00:40:37.500 --> 00:40:39.940
I think all the meetups and other events are having,


00:40:39.940 --> 00:40:44.380
especially these smaller monthly, bi-weekly things.


00:40:44.380 --> 00:40:45.980
It's one thing to say that there's going to be


00:40:45.980 --> 00:40:48.700
a big conference and we'll all go to it or not.


00:40:48.700 --> 00:40:50.700
But if you're doing it every couple of weeks,


00:40:50.700 --> 00:40:53.020
and it's mostly local but not 100% local,


00:40:53.020 --> 00:40:54.100
yeah, it's a challenge.


00:40:54.100 --> 00:40:54.940
- Yeah.


00:40:54.940 --> 00:40:55.760
- Fantastic.


00:40:55.760 --> 00:40:57.820
All right, Brian, you ready for a joke?


00:40:57.820 --> 00:40:58.660
- Definitely.


00:40:58.660 --> 00:41:01.220
- Okay, so I've got one and then Nick has one.


00:41:01.220 --> 00:41:05.740
So this one, the title of the joke is Root Beer Float.


00:41:05.740 --> 00:41:08.100
Okay, so a programmer walks into a bar.


00:41:08.100 --> 00:41:13.100
He orders 1.000000119 root beers.


00:41:13.100 --> 00:41:16.060
The bartender says, "I'm gonna have to charge you extra.


00:41:16.060 --> 00:41:17.860
"That's a root beer float."


00:41:17.860 --> 00:41:20.500
The programmer says, "Well, in that case, make it a double."


00:41:20.500 --> 00:41:22.500
[laughter]


00:41:22.500 --> 00:41:23.240
It's bad, right?


00:41:23.240 --> 00:41:24.100
That's bad.


00:41:24.100 --> 00:41:24.600
Yeah.


00:41:24.600 --> 00:41:25.400
Alright.


00:41:25.400 --> 00:41:28.140
And Nick, you've got one as well. You want to do this one for us?


00:41:28.140 --> 00:41:30.140
Yeah, would someone like to join?


00:41:30.140 --> 00:41:32.940
You want me to be the bearded person?


00:41:32.940 --> 00:41:34.940
Yeah, I really have something going on there anyway.


00:41:34.940 --> 00:41:36.940
Alright, so...


00:41:36.940 --> 00:41:39.620
Will refactoring the code improve the loading time?


00:41:39.620 --> 00:41:40.700
Not really.


00:41:40.700 --> 00:41:42.700
Will it improve the security then?


00:41:42.700 --> 00:41:43.200
No.


00:41:43.200 --> 00:41:45.200
So, it's for browser compatibility?


00:41:45.200 --> 00:41:47.200
Yeah, no, not really. Nope.


00:41:47.200 --> 00:41:50.660
So tell me, why is it always the same old story


00:41:50.660 --> 00:41:53.400
with you guys wanting to refactor everything?


00:41:53.400 --> 00:41:55.240
I need to know.


00:41:55.240 --> 00:41:57.800
Because as devs, if we know...


00:41:57.800 --> 00:42:01.200
excuse me, if we know we've left behind some messy code,


00:42:01.200 --> 00:42:02.600
we can't stop thinking about it.


00:42:02.600 --> 00:42:06.680
We wake up in the morning, at lunchtime, in the evening, when we go home,


00:42:06.680 --> 00:42:08.200
and when we're trying to go to sleep.


00:42:08.200 --> 00:42:10.000
It haunts us, you know.


00:42:10.000 --> 00:42:12.000
It haunts us.


00:42:12.000 --> 00:42:14.000
I love it.


00:42:14.000 --> 00:42:16.000
And it's true too.


00:42:16.000 --> 00:42:17.840
(laughing)


00:42:17.840 --> 00:42:19.720
- Totally true, it's totally true.


00:42:19.720 --> 00:42:22.040
- All right, I have one more joke for you guys.


00:42:22.040 --> 00:42:22.880
- Oh yeah, hit us.


00:42:22.880 --> 00:42:26.160
- All right, how much does a chimney cost?


00:42:26.160 --> 00:42:26.980
- No idea.


00:42:26.980 --> 00:42:28.520
- Nothing, it's on the house.


00:42:28.520 --> 00:42:30.320
(laughing)


00:42:30.320 --> 00:42:31.160
- Very good.


00:42:31.160 --> 00:42:35.600
- I have a friend that is so into dad jokes,


00:42:35.600 --> 00:42:38.300
which is weird because it's only 22.


00:42:38.300 --> 00:42:42.520
- Practicing, practicing for the future.


00:42:42.520 --> 00:42:43.520
(laughing)


00:42:43.520 --> 00:42:44.340
- Yeah, but--


00:42:44.340 --> 00:42:46.940
I think dads can be blamed for all bad jokes.


00:42:46.940 --> 00:42:49.180
(laughing)


00:42:49.180 --> 00:42:54.260
Yeah, I wanna highlight Juergen says that


00:42:54.260 --> 00:42:56.140
they cost 2,500 euros.


00:42:56.140 --> 00:42:57.140
- That's expensive.


00:42:57.140 --> 00:42:58.780
(laughing)


00:42:58.780 --> 00:43:01.140
- Well, thanks a lot for joining us today.


00:43:01.140 --> 00:43:02.180
This was a lot of fun.


00:43:02.180 --> 00:43:04.980
And thanks everybody in the stream for showing up


00:43:04.980 --> 00:43:07.340
and we'll talk to everybody next week.


00:43:07.340 --> 00:43:08.220
- Thanks, bye everyone.

