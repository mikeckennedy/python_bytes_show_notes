WEBVTT

00:00:00.160 --> 00:00:04.900
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.900 --> 00:00:10.800
This is episode 307, recorded October 26th, and I am Brian Okken.

00:00:10.800 --> 00:00:11.880
Hey, I'm Michael Kennedy.

00:00:11.880 --> 00:00:17.020
Yay. Well, it's pretty exciting here in Python world this week.

00:00:17.020 --> 00:00:20.380
Oh, it's a big deal this week, absolutely.

00:00:20.380 --> 00:00:23.320
It's a big deal. So tell us why it's a big deal.

00:00:23.600 --> 00:00:29.500
We've talked about Python being faster and new features coming along.

00:00:29.500 --> 00:00:36.580
But primarily, I would say there's like two ends of the spectrum that people have been really looking forward to.

00:00:36.580 --> 00:00:41.800
One is, wouldn't it be great if you did nothing and your code ran 50% faster?

00:00:41.800 --> 00:00:48.520
Brian, you and I are of similar age, and I remember it was just like, well, wait till next year till I get a new computer.

00:00:48.520 --> 00:00:52.860
And that program that's a little sluggish is going to be zooming along, right?

00:00:52.940 --> 00:00:55.900
And just like computers would just double in speed all the time.

00:00:55.900 --> 00:00:57.500
And we don't get so much of that anymore.

00:00:57.500 --> 00:01:00.260
But with Python, we kind of do this this time around.

00:01:00.260 --> 00:01:07.380
Yeah, I remember like also like adding more memory and trying to detect whether I could tell a difference for the $100 I spent.

00:01:07.380 --> 00:01:12.500
Yes, exactly. Exactly. Or optimizing your low MIM versus high MIM.

00:01:12.500 --> 00:01:14.440
I mean, that's going back always.

00:01:14.440 --> 00:01:18.660
But the big news is Python 3.11 is out.

00:01:18.660 --> 00:01:19.080
Woo!

00:01:19.080 --> 00:01:20.340
Yay!

00:01:20.940 --> 00:01:21.720
Yeah, that's...

00:01:21.720 --> 00:01:23.500
We should have had like champagne or something.

00:01:23.500 --> 00:01:23.760
Yeah.

00:01:23.760 --> 00:01:26.800
Yeah, pop some corks.

00:01:26.800 --> 00:01:28.200
So very big news.

00:01:28.200 --> 00:01:29.520
I'm super excited about it.

00:01:29.520 --> 00:01:31.100
I told you there's this end of the spectrum.

00:01:31.100 --> 00:01:36.860
The other end of things that people seem to be psyched about across the board is better error messages.

00:01:36.860 --> 00:01:37.560
Yeah.

00:01:37.560 --> 00:01:42.780
I mean, it's very important for debugging and also for teaching people and learning Python.

00:01:43.260 --> 00:01:45.080
Yeah, absolutely. Absolutely.

00:01:45.080 --> 00:01:47.800
I got to pull this one up just for nostalgia's sake.

00:01:47.800 --> 00:01:53.300
Dave in the audience says, back when we had turbo buttons, our computers, they literally had a button that said turbo.

00:01:53.300 --> 00:01:56.300
I remember when I got my Pentium 90, it had a turbo button.

00:01:56.300 --> 00:01:57.400
And I'm like, yes.

00:01:57.400 --> 00:02:01.900
What it really meant is if it was off, it would run in like some weird retro slow modes.

00:02:01.900 --> 00:02:03.220
I would like play MechWarrior.

00:02:03.220 --> 00:02:06.340
And stuff would like zoom around insanely fast.

00:02:06.380 --> 00:02:10.620
But if you took off turbo, you could play some of the older games because they weren't based on time.

00:02:10.620 --> 00:02:11.760
They were based on frame rate.

00:02:11.760 --> 00:02:14.980
Anyway, crazy, crazy memories.

00:02:14.980 --> 00:02:18.700
So we're kind of getting that cool like doubling of speed thing here.

00:02:18.700 --> 00:02:21.720
So there's a ton of stuff to talk about in terms of what's available here.

00:02:21.720 --> 00:02:32.040
Before I get into the details, I want to point out on YouTube, which I'm linking to, Python Discord, Lemon over there, hosted a live stream of the release.

00:02:32.040 --> 00:02:41.960
So this is not a party celebrating the release, but this is live broadcasting of the actions and the steps as it's being released.

00:02:41.960 --> 00:02:43.360
Like, okay, the final one is built.

00:02:43.360 --> 00:02:48.860
Okay, we pushed it to the Microsoft Store for Windows Store install.

00:02:48.860 --> 00:02:52.500
Now we pushed it to, you know, Python.org.

00:02:52.500 --> 00:02:54.200
Now it's over here.

00:02:54.200 --> 00:02:57.860
And like, right, like the actual pushing of the deployment.

00:02:57.860 --> 00:03:00.120
And there's a bunch of interesting things that happen there.

00:03:00.120 --> 00:03:02.640
And along the way, they talk about some of the features.

00:03:02.640 --> 00:03:11.760
I'm going to have a subset of the people that were there in apparently 46 hours on Friday on Talk Python to make an episode out of it there as well.

00:03:11.760 --> 00:03:12.760
That's pretty cool.

00:03:12.760 --> 00:03:14.260
It's neat that they do that.

00:03:14.260 --> 00:03:14.560
Yeah.

00:03:14.560 --> 00:03:16.620
So people can just watch the process.

00:03:16.620 --> 00:03:18.880
Yeah, it is cool that they do that.

00:03:18.880 --> 00:03:22.080
And I certainly, I saw a pop up and like, these guys are going live.

00:03:22.080 --> 00:03:25.240
I'm like, oh, that's playing on the background while I'm working today.

00:03:25.360 --> 00:03:30.020
You know, I'm going to be apparently at 80% capacity of like getting stuff done, but I'm going to enjoy it a lot.

00:03:30.020 --> 00:03:38.260
Also, we have a logo, which is not the official Python logo, but a Python 311 logo.

00:03:38.920 --> 00:03:48.500
And it has like little, it's like two snakes, but they're not the Python, you know, cartoon, dramatic, like sort of stylized snakes.

00:03:48.500 --> 00:03:49.440
They just look like snakes.

00:03:49.440 --> 00:03:54.720
And it says faster Python exception groups and accept star typing improvements.

00:03:54.720 --> 00:03:57.980
And like literally the logo basically is the release notes.

00:03:57.980 --> 00:04:00.020
But, and it has a lightning bolt in the middle.

00:04:00.020 --> 00:04:01.140
I guess that means fast.

00:04:01.140 --> 00:04:01.780
I think so.

00:04:02.180 --> 00:04:02.700
I think so.

00:04:02.700 --> 00:04:03.380
All right.

00:04:03.380 --> 00:04:03.900
So let's see.

00:04:03.900 --> 00:04:05.440
Major new changes.

00:04:05.440 --> 00:04:09.820
We've got fine grained error locations and tracebacks.

00:04:09.820 --> 00:04:13.080
Let me see if I can get it to show us some interesting example here.

00:04:13.080 --> 00:04:14.760
Yeah, this is super cool.

00:04:14.760 --> 00:04:17.100
So check, there's a line.

00:04:17.100 --> 00:04:26.500
If you just follow the PEP there, there's an example of, you know, suppose you're calling like a complicated JSON API and you get this data back and you start in a variable X.

00:04:26.820 --> 00:04:33.540
And you've got to go to some field in the JSON document, then further down, then further down, and further down, and like either get or set a value.

00:04:33.540 --> 00:04:39.220
So here it has X bracket of A, bracket of B, bracket of C, bracket of D.

00:04:39.220 --> 00:04:43.160
So you're like diving from like level A, B, C, D in the JSON document.

00:04:43.160 --> 00:04:48.500
If you get the error, none type is, or, you know, object is not subscriptable.

00:04:48.500 --> 00:04:51.180
You know, something there was none.

00:04:51.180 --> 00:04:52.980
Yeah, but you're four levels deep.

00:04:52.980 --> 00:04:53.840
Which one was it?

00:04:53.840 --> 00:04:54.260
Right.

00:04:54.260 --> 00:04:58.460
It could have been B wasn't subscriptable, or it could have been C, or it could have been like, you don't know where.

00:04:58.460 --> 00:05:00.360
And so what a hassle, right?

00:05:00.360 --> 00:05:04.840
And you do print statements, and that's when you do debugging statements.

00:05:04.840 --> 00:05:08.240
That's when you maybe make that four different lines so you see which line crashes.

00:05:08.240 --> 00:05:13.300
Well, in 3.11 now it just says tilde, tilde, tilde, carat, carat, carat.

00:05:13.300 --> 00:05:16.720
Look, it's, you had X of A of B of C.

00:05:16.720 --> 00:05:19.540
It's C that was the none thing.

00:05:19.540 --> 00:05:20.880
That's where the problem was.

00:05:20.880 --> 00:05:24.800
Actually, I suspect that, yeah, I guess it's probably C.

00:05:24.800 --> 00:05:28.880
We tried to get D out of none, and C was none is probably where the error was.

00:05:28.880 --> 00:05:29.160
Yeah.

00:05:29.160 --> 00:05:33.700
But it points like right where these problems are throughout there.

00:05:33.700 --> 00:05:34.480
Yeah.

00:05:34.480 --> 00:05:35.400
Really neat.

00:05:35.400 --> 00:05:37.760
Plus a whole bunch of others.

00:05:37.760 --> 00:05:41.140
Yeah, there's a bunch of other ways that they're highlighting where the problem is.

00:05:41.660 --> 00:05:44.100
Yeah, if you go through, there's a bunch of cool examples here.

00:05:44.100 --> 00:05:49.320
But basically, you end up with within complex expressions.

00:05:49.320 --> 00:05:52.360
You know, multiple things happening on one line and so on.

00:05:52.360 --> 00:05:54.520
You get nice details there.

00:05:54.520 --> 00:05:55.600
Pretty cool.

00:05:55.600 --> 00:05:57.180
So that's just one of them.

00:05:57.180 --> 00:06:03.040
But I would say if you don't care about performance, that's probably what you might consider the highlight.

00:06:03.040 --> 00:06:12.160
If you're an asyncio, async and await type person, async exception groups, PEP 564 and accept star are pretty interesting.

00:06:12.160 --> 00:06:19.900
Because if I start three tasks and I wait on them and two of them have errors, well, which exception do I get?

00:06:19.900 --> 00:06:22.840
Do I get the one from the first one or do I get the one from the second one?

00:06:24.000 --> 00:06:27.620
So it would be great to be able to say two of the three things failed.

00:06:27.620 --> 00:06:28.660
Here are their problems.

00:06:28.660 --> 00:06:29.040
Right.

00:06:29.040 --> 00:06:31.280
So you can kind of get a holistic view of what's happening.

00:06:31.280 --> 00:06:32.420
That's great.

00:06:32.420 --> 00:06:33.300
Yeah.

00:06:33.300 --> 00:06:43.080
I'm actually, I'm actually, I still haven't got my head around this completely, but I'm curious to see how that this will change sort of Python style.

00:06:43.080 --> 00:06:46.100
Because this changes how you can write exception handling.

00:06:46.100 --> 00:06:47.700
Indeed.

00:06:50.080 --> 00:07:01.620
Some of the higher level async frameworks like Trio and AnyIO have this concept of starting and managing a series of tasks together as a group.

00:07:01.620 --> 00:07:09.060
So if I'm going to save and entry to the database, I'm going to call an API and I'm going to create a file.

00:07:09.060 --> 00:07:13.440
And those are all the, all a result of like, I want to create a new user.

00:07:13.440 --> 00:07:14.460
I want to do whatever.

00:07:14.460 --> 00:07:14.760
Right.

00:07:14.760 --> 00:07:18.940
You might want to be able to say, I want to start all those and wait for them to finish.

00:07:19.000 --> 00:07:24.860
Or if I start a couple of them to decide I want to bail out, cancel all of them or if one fails and so on.

00:07:24.860 --> 00:07:33.220
So we've got this concept of a task group in AsyncIO and changes to the task cancellation semantics.

00:07:33.220 --> 00:07:34.360
And it's interesting.

00:07:34.360 --> 00:07:40.680
We've got, you know, PEP 657 was the traceback enhancements.

00:07:40.680 --> 00:07:43.600
654 was the exception groups.

00:07:43.600 --> 00:07:47.800
But the task groups is GH 90908.

00:07:47.800 --> 00:07:48.560
Interesting.

00:07:48.560 --> 00:07:49.240
You know what GH stands for?

00:07:49.240 --> 00:07:49.600
GitHub.

00:07:49.600 --> 00:07:50.200
Okay.

00:07:50.200 --> 00:07:51.060
Weird.

00:07:51.060 --> 00:08:01.260
So it's news to me that this, these features get added through just a GitHub issue rather than a proper, you know, PEP.

00:08:01.260 --> 00:08:04.380
But anyway, yeah.

00:08:04.380 --> 00:08:05.220
Pretty neat.

00:08:05.660 --> 00:08:07.980
Maybe you're pronouncing GH as P.

00:08:07.980 --> 00:08:08.480
Yeah.

00:08:08.480 --> 00:08:08.960
Like it.

00:08:08.960 --> 00:08:12.260
Exactly.

00:08:12.260 --> 00:08:13.660
Let's see.

00:08:13.660 --> 00:08:16.460
Henry has some cool comments following up out there.

00:08:16.460 --> 00:08:17.220
Henry Schreiner.

00:08:17.220 --> 00:08:17.640
Thanks.

00:08:17.640 --> 00:08:21.720
Catters is already using exception groups via backport exception group.

00:08:21.720 --> 00:08:24.740
It is fantastic and really does change Python exceptions.

00:08:25.500 --> 00:08:26.500
Cool.

00:08:26.500 --> 00:08:26.640
Cool.

00:08:26.640 --> 00:08:27.200
Cool.

00:08:27.200 --> 00:08:28.000
Extra information there.

00:08:28.000 --> 00:08:29.400
All right.

00:08:29.400 --> 00:08:29.860
Let's keep going.

00:08:29.860 --> 00:08:32.040
You've already talked about TomlLib being built in.

00:08:32.040 --> 00:08:34.520
Like now that we have pyproject.toml.

00:08:34.520 --> 00:08:37.240
Should we really have external libraries in order to understand them?

00:08:37.240 --> 00:08:37.820
Yay.

00:08:37.820 --> 00:08:41.340
Now we, now we get to do the, the if block.

00:08:41.340 --> 00:08:47.360
If, if, if import TomlLib or, you know, the try except around it.

00:08:47.360 --> 00:08:47.700
Because.

00:08:47.700 --> 00:08:48.520
Exactly.

00:08:48.520 --> 00:08:49.820
How fun.

00:08:49.820 --> 00:08:50.740
Yeah.

00:08:50.740 --> 00:08:51.140
Yeah.

00:08:51.140 --> 00:08:52.860
It is a good thing though.

00:08:52.860 --> 00:08:54.300
I'm glad for that.

00:08:54.300 --> 00:08:54.880
Yep.

00:08:54.880 --> 00:08:56.620
There's changes to regular expressions.

00:08:56.620 --> 00:08:58.420
If you care, you know.

00:08:58.420 --> 00:08:59.320
All right.

00:08:59.320 --> 00:09:06.520
And then we've got basically a general statement saying the faster CPython project is already

00:09:06.520 --> 00:09:08.240
yielding some exciting results.

00:09:08.240 --> 00:09:17.300
That is Mark Shannon, Gita Van Rossum, and a bunch of other folks, Grant and others, all

00:09:17.300 --> 00:09:17.960
working on this.

00:09:17.960 --> 00:09:19.900
And it says already yielding some exciting results.

00:09:19.900 --> 00:09:24.860
Python 3.11 is up 10 to 60% faster than just 3.10.

00:09:24.860 --> 00:09:26.880
That is just from last year.

00:09:26.880 --> 00:09:27.480
Right?

00:09:27.480 --> 00:09:27.560
Right?

00:09:27.560 --> 00:09:29.060
Hence the turbo button.

00:09:29.600 --> 00:09:40.920
On average, we measured a 1.22 or otherwise known as 22% feed up on the benchmarks for Python

00:09:40.920 --> 00:09:41.260
tests.

00:09:41.260 --> 00:09:42.840
So, or Python benchmarks.

00:09:43.380 --> 00:09:44.120
That's awesome.

00:09:44.120 --> 00:09:46.280
You can see faster Python for details, right?

00:09:46.280 --> 00:09:48.460
There's already some of those we're making to 3.10.

00:09:48.460 --> 00:09:49.480
3.11 is getting more.

00:09:49.480 --> 00:09:50.620
3.12 is getting more.

00:09:50.620 --> 00:09:54.900
And it's, yeah, it's just a first down payment, I guess.

00:09:54.900 --> 00:09:56.380
But it's really great to see that happening.

00:09:56.380 --> 00:09:56.840
Yeah.

00:09:56.840 --> 00:09:57.300
Pretty exciting.

00:09:57.300 --> 00:09:59.300
A bunch of stuff around typing.

00:09:59.300 --> 00:10:01.320
Those are a lot of the other highlights there.

00:10:01.320 --> 00:10:04.040
Two things that are worth calling out here, I would say.

00:10:04.040 --> 00:10:05.640
One is self.

00:10:05.640 --> 00:10:08.000
It's good to be self-aware, right, Brian?

00:10:08.000 --> 00:10:08.900
Yeah.

00:10:08.900 --> 00:10:10.980
It is.

00:10:11.400 --> 00:10:17.140
And so, Python classes can now understand that they too have a self, even though they

00:10:17.140 --> 00:10:18.300
say self all over the place.

00:10:18.300 --> 00:10:19.840
Like, no, their language, right?

00:10:19.840 --> 00:10:24.800
Like, this in C++ and C Sharp is a thing you can, but not must use, or you've got to say

00:10:24.800 --> 00:10:25.020
self.

00:10:25.020 --> 00:10:28.900
So, ironically, the typing system now also understands self.

00:10:28.900 --> 00:10:34.220
And you can say, well, the problem was before, if I'm in a class and I have a method of that

00:10:34.220 --> 00:10:39.040
class that returns an instance of that class, the class is not yet defined as far as Python's

00:10:39.040 --> 00:10:40.600
concerned until you're to the end.

00:10:40.800 --> 00:10:46.700
So, I can't say the return type is the name of the class, because until you're done, the

00:10:46.700 --> 00:10:48.080
class is not defined, right?

00:10:48.080 --> 00:10:49.180
It's like this weird error.

00:10:49.180 --> 00:10:50.740
So, what you can say is it returns self.

00:10:50.740 --> 00:10:53.520
And whatever self is, that's what it returns.

00:10:53.520 --> 00:10:58.520
And one of the changes and difficulties was to make this work with inheritance.

00:10:58.520 --> 00:10:59.480
Yeah.

00:10:59.480 --> 00:11:04.580
I mean, like in C or in C++, you have to pre-declare the type ahead of time.

00:11:04.580 --> 00:11:07.780
But then, yeah, anyway.

00:11:07.780 --> 00:11:10.100
We don't have declarations in Python, so.

00:11:10.200 --> 00:11:11.200
We don't.

00:11:11.200 --> 00:11:16.540
I wonder why we don't have a two-pass compiler that like scans for types and then expands

00:11:16.540 --> 00:11:17.240
out the details.

00:11:17.240 --> 00:11:19.840
Do you know what variadic generics are?

00:11:19.840 --> 00:11:22.700
Putting you on the spot.

00:11:22.700 --> 00:11:23.140
Sorry.

00:11:23.140 --> 00:11:24.200
You are putting me on the spot.

00:11:24.200 --> 00:11:27.140
Let's see.

00:11:27.140 --> 00:11:29.280
I just want to use that word more often.

00:11:29.480 --> 00:11:29.920
I know.

00:11:29.920 --> 00:11:29.920
I know.

00:11:29.920 --> 00:11:30.640
It sounds like.

00:11:30.640 --> 00:11:33.720
Yes, I do have a PhD in computer science.

00:11:33.720 --> 00:11:41.380
It enables the creation of generics parametrized with a single type.

00:11:41.820 --> 00:11:45.220
So this is something I don't do much of in Python types.

00:11:45.220 --> 00:11:50.900
You can create a type variable that then defines the type of a thing and then use that variable.

00:11:50.900 --> 00:11:52.500
It's kind of like templates a little bit.

00:11:53.100 --> 00:11:54.940
And so this has to do with that.

00:11:54.940 --> 00:11:55.720
Okay.

00:11:55.720 --> 00:11:57.500
I don't think I'm smart enough to use this.

00:11:57.500 --> 00:12:01.580
If you look at the example, you say I created an axis one is like a type.

00:12:01.580 --> 00:12:07.160
And then I can say I have an array, which is of type, you know, of generic, of axis one,

00:12:07.160 --> 00:12:08.120
axis one, right?

00:12:08.120 --> 00:12:09.060
Like, I don't know.

00:12:09.560 --> 00:12:14.680
I kind of left that kind of stuff behind in C++, like the multiple template.

00:12:14.680 --> 00:12:14.860
Oh, good.

00:12:14.860 --> 00:12:16.420
Somebody's helping us out.

00:12:16.420 --> 00:12:23.200
Dean is saying, when I learned about generic, I thought maybe we've gone too far with typing.

00:12:23.200 --> 00:12:25.200
Thanks, dude.

00:12:25.200 --> 00:12:33.500
You know, one thing that's nice about Python is often you don't have to know or care or consume certain parts.

00:12:33.500 --> 00:12:34.060
You know what?

00:12:34.060 --> 00:12:35.300
That doesn't apply to me yet.

00:12:35.300 --> 00:12:36.040
Maybe someday.

00:12:36.040 --> 00:12:36.620
Not right now.

00:12:36.620 --> 00:12:38.040
There's other stuff, of course.

00:12:38.040 --> 00:12:47.000
The last one I think is noteworthy has to do with limiting the spread of little Bobby tables, let's say.

00:12:47.000 --> 00:12:50.320
And these are arbitrary literal string types.

00:12:50.320 --> 00:12:58.620
So the idea is if you've got, say, like a SQL query, it would be great to somehow define,

00:12:58.620 --> 00:13:06.580
here's a string that I want to put into code, but I don't want to, it's kind of like a static string in a sense.

00:13:06.580 --> 00:13:11.300
Like it can't be modified or added against non-literal strings.

00:13:11.300 --> 00:13:16.500
So the example says, look, I've got select star from data where user ID equals F string curly user ID.

00:13:17.220 --> 00:13:18.840
And if you say user 123, good.

00:13:18.840 --> 00:13:19.420
Good.

00:13:19.420 --> 00:13:24.000
But you also might say user 123, semicolon, drop table, data, semicolon.

00:13:24.000 --> 00:13:29.500
Or you could do, you want to get all the records, you say user 123 or one equals one.

00:13:29.500 --> 00:13:30.300
Right?

00:13:30.300 --> 00:13:31.200
Like these are bad.

00:13:31.940 --> 00:13:42.220
So what you can do with these now is you can come up with literal strings and they, in order to make the query work, you have to use database parameters.

00:13:42.220 --> 00:13:45.180
You just put like a placeholder in the string that never changes.

00:13:45.180 --> 00:13:49.980
And that way, basically your string in a sense is safe from injection.

00:13:49.980 --> 00:13:50.640
Okay.

00:13:50.640 --> 00:13:51.260
Yeah.

00:13:51.460 --> 00:13:55.340
But you can still, you still can pass parameters in, but you just have to do it a different way.

00:13:55.340 --> 00:13:56.280
Right.

00:13:56.280 --> 00:14:01.860
And so in this example, they have select, select user.name, user.age from data where user ID is question mark.

00:14:01.860 --> 00:14:04.400
That's the indicator of a SQL parameter.

00:14:04.400 --> 00:14:07.620
And then you say connection execute given that string.

00:14:07.620 --> 00:14:10.760
And then you pass the parameter, which has the value of the user ID.

00:14:10.760 --> 00:14:15.220
And then the database engine knows like that can't like truncate a statement.

00:14:15.220 --> 00:14:15.760
Right.

00:14:15.760 --> 00:14:18.340
It can't sort of modify the command you send.

00:14:18.340 --> 00:14:28.380
What's notable though, is you can also add on things and you can change it and combine it with other literal strings, but not with non-literal strings.

00:14:28.380 --> 00:14:28.920
Okay.

00:14:28.920 --> 00:14:29.960
Interesting.

00:14:29.960 --> 00:14:30.660
Yeah.

00:14:31.440 --> 00:14:35.860
That's what this literal string type is here.

00:14:35.860 --> 00:14:38.980
And yeah.

00:14:38.980 --> 00:14:40.940
Anyway, so people can check that out.

00:14:40.940 --> 00:14:47.640
I think that's, you know, that's going to be useful in a lot of situations where you're trying to be safe with user input, basically.

00:14:47.640 --> 00:14:48.380
Yeah.

00:14:48.380 --> 00:14:50.080
All right.

00:14:50.080 --> 00:14:50.520
Is that it?

00:14:50.520 --> 00:14:52.440
I think that might be all the highlights.

00:14:52.440 --> 00:14:52.920
Yeah.

00:14:52.920 --> 00:14:55.180
There's a go, go get your version.

00:14:55.180 --> 00:14:59.660
I've already brew installed my 3.11, which is cool.

00:14:59.660 --> 00:15:00.400
You brew installed.

00:15:00.400 --> 00:15:00.780
Okay.

00:15:01.020 --> 00:15:02.920
I did.

00:15:02.920 --> 00:15:09.840
Now, if you just say brew install Python 3, you'll get 3.10, 7, I think, or 8.

00:15:09.840 --> 00:15:11.020
You won't get 3.11.

00:15:11.400 --> 00:15:13.820
But you can brew install Python.

00:15:13.820 --> 00:15:17.300
I think it's at 3.11 or at 3.11.

00:15:17.300 --> 00:15:18.980
You'll have to look.

00:15:18.980 --> 00:15:20.360
I don't remember the exact command.

00:15:20.420 --> 00:15:23.420
But there's a way to say, no, I want the cutting edge version.

00:15:23.420 --> 00:15:24.420
And I was already, final thought on this.

00:15:24.420 --> 00:15:28.500
I was already given a small cut by it.

00:15:28.600 --> 00:15:29.220
You were.

00:15:29.220 --> 00:15:29.480
You were.

00:15:29.480 --> 00:15:30.480
I was.

00:15:30.480 --> 00:15:30.480
I was.

00:15:30.480 --> 00:15:31.480
So, you know, I was.

00:15:31.480 --> 00:15:32.480
The Python bytes.

00:15:32.480 --> 00:15:39.460
Python bytes website is based on Beanie, the MongoDB, Pydantic combo of glory.

00:15:39.460 --> 00:15:41.140
Because it's all async.

00:15:41.140 --> 00:15:42.180
It's based on motor.

00:15:42.180 --> 00:15:48.600
The async driver for Python and MongoDB from the MongoDB folks.

00:15:48.600 --> 00:15:53.240
They built that thing in the super early days before async and await was a thing based on

00:15:53.240 --> 00:15:53.620
tornado.

00:15:53.620 --> 00:15:57.180
So, they don't use async def for their async functions.

00:15:57.180 --> 00:16:02.940
They put at async.io.coroutine as a decorator onto all their async functions.

00:16:02.940 --> 00:16:07.760
Well, that was awesome until 3.11 where that was removed from the runtime.

00:16:07.760 --> 00:16:11.240
So, that doesn't work anymore.

00:16:11.240 --> 00:16:12.480
And it doesn't run so well either.

00:16:12.480 --> 00:16:19.820
So, the motor people had to rush out 3.11 yesterday after much conversation of like,

00:16:19.900 --> 00:16:26.840
you guys realize you should have tested on 3.11 beta or RC1 or RC2 or any other release

00:16:26.840 --> 00:16:31.180
at some point because clearly this code was never going to run and you should have known

00:16:31.180 --> 00:16:31.600
straight away.

00:16:31.600 --> 00:16:33.280
But at least they fixed it quickly.

00:16:33.280 --> 00:16:34.080
Okay.

00:16:34.080 --> 00:16:36.900
So, Henry wants to know, how did you find it?

00:16:36.900 --> 00:16:39.620
Apparently, it's on unmerged PR.

00:16:39.620 --> 00:16:41.040
Perhaps.

00:16:41.040 --> 00:16:43.980
I just did brew update, brew outdated.

00:16:43.980 --> 00:16:47.600
And it said new recipe or new whatever they call it.

00:16:47.600 --> 00:16:49.140
Whatever it calls those things.

00:16:49.480 --> 00:16:51.160
It said new recipe, Python 3.11.

00:16:51.160 --> 00:16:51.780
I said, oh, cool.

00:16:51.780 --> 00:16:52.920
Then I'll install Python 3.11.

00:16:52.920 --> 00:16:53.340
Okay.

00:16:53.340 --> 00:16:54.680
Yeah, that's how I know.

00:16:54.680 --> 00:16:58.540
So, I want to stick with this install thing a little bit.

00:16:58.540 --> 00:16:59.360
Yeah.

00:16:59.360 --> 00:17:02.400
Because I would think that you're probably a power user.

00:17:02.400 --> 00:17:04.320
I mean, kind of.

00:17:04.320 --> 00:17:07.480
You know Python pretty much and you're doing, trying to be cutting edge and everything.

00:17:07.480 --> 00:17:16.360
I think that a lot of Python bloggers and social media people that are famous in Python

00:17:16.360 --> 00:17:18.460
are probably the power user kind of people.

00:17:18.460 --> 00:17:21.700
And they tell people weird things, I think.

00:17:21.700 --> 00:17:22.940
Like brew install Python 3.11.

00:17:22.940 --> 00:17:23.720
Just brew install.

00:17:23.720 --> 00:17:25.540
And I don't think it's a good idea.

00:17:25.540 --> 00:17:26.360
Yeah.

00:17:26.360 --> 00:17:32.400
I'm going to get on the soapbox a little bit and say, I wrote an article on how to install Python.

00:17:32.400 --> 00:17:36.340
And it's installing Python 3.11 on Mac or Windows.

00:17:36.340 --> 00:17:38.960
And we'll get to Linux in a bit.

00:17:39.960 --> 00:17:46.900
So, the gist is, you go to python.org, you hover over downloads, and you click download.

00:17:46.900 --> 00:17:50.560
And then the thing that gets installed, you install it.

00:17:50.560 --> 00:17:51.560
Now you're done.

00:17:51.560 --> 00:17:53.840
Okay.

00:17:53.840 --> 00:17:56.060
So, why did this deserve an entire article?

00:17:56.060 --> 00:18:01.680
Well, because I think a lot of people are teaching people to do, like saying, just brew install it.

00:18:01.680 --> 00:18:05.940
Or do PyInv.

00:18:05.940 --> 00:18:09.980
And PyInv, anyway, we'll get to there.

00:18:09.980 --> 00:18:13.720
But so, I just want to tell people how long does it take?

00:18:13.720 --> 00:18:15.020
It takes about a minute.

00:18:15.020 --> 00:18:20.520
I timed it on both my Mac and did it on a Windows machine.

00:18:20.520 --> 00:18:26.340
And just installing everything takes, yeah, it took about a minute.

00:18:26.460 --> 00:18:28.740
A minute and 13 seconds on my Mac.

00:18:28.740 --> 00:18:31.940
And this is including me having to hit stuff.

00:18:31.940 --> 00:18:33.380
So, it's also my delay.

00:18:33.380 --> 00:18:38.080
And then also did it, on Windows, it took like twice as long.

00:18:38.080 --> 00:18:42.540
But I was tunneled through a VPN and firewalls and stuff.

00:18:42.540 --> 00:18:45.080
So, it's probably all that.

00:18:45.080 --> 00:18:46.200
It's pretty fast.

00:18:46.200 --> 00:18:49.220
You can have, and it doesn't uninstall anything.

00:18:49.220 --> 00:18:50.960
So, you can have multiple versions.

00:18:51.640 --> 00:19:00.840
So, it will, like if you use that sort of download link for like the latest, like 310.8, it'll go over the top of 310.7, I think.

00:19:00.840 --> 00:19:02.120
At least on Mac, it does that.

00:19:02.120 --> 00:19:03.520
But that's okay.

00:19:03.520 --> 00:19:04.280
It's kind of what I want.

00:19:04.280 --> 00:19:06.060
I've got 310.

00:19:06.060 --> 00:19:07.160
You can have multiple.

00:19:07.160 --> 00:19:11.960
I've got 310, 3.7, 3.11 all on my machine just with those links.

00:19:11.960 --> 00:19:14.980
And the 3.11 just is the default.

00:19:14.980 --> 00:19:19.480
I think it's the newest one and the oldest.

00:19:19.480 --> 00:19:23.480
Anyway, it modifies the Z profile, your .Z profile.

00:19:23.480 --> 00:19:25.880
And it shows up as the latest one.

00:19:25.880 --> 00:19:31.280
Now, if I had 310 before, what if I go back and install the update my 310?

00:19:31.280 --> 00:19:34.180
Will it make 310 the default?

00:19:34.180 --> 00:19:35.120
No, it doesn't.

00:19:35.120 --> 00:19:37.240
It leaves it alone because it was already in there.

00:19:37.240 --> 00:19:38.500
It leaves it be.

00:19:38.500 --> 00:19:41.840
But you should check anyway if you're going to go back and install old versions.

00:19:41.840 --> 00:19:44.260
And Tox works just great with it.

00:19:44.260 --> 00:19:50.060
So why am I kind of ranting on this is because a lot of people try to say homebrew.

00:19:50.060 --> 00:19:54.180
And if you're a homebrew user, you're not going to look for this blog anyway.

00:19:54.180 --> 00:19:56.600
You're just going to try to do it with homebrew.

00:19:56.600 --> 00:19:56.980
Great.

00:19:56.980 --> 00:19:57.860
Go for it.

00:19:57.860 --> 00:19:58.640
You're perfect.

00:19:58.640 --> 00:20:02.140
And PyEnv, I think there's some places for it.

00:20:02.140 --> 00:20:06.660
But PyEnv is about managing different versions and having multiple live at the same time and

00:20:06.660 --> 00:20:08.180
different projects use different ones.

00:20:08.180 --> 00:20:11.180
It's not just an easy installer.

00:20:11.460 --> 00:20:16.640
And since it does all that other stuff, I don't think people should recommend it for newbies.

00:20:16.640 --> 00:20:20.220
It's not the right tool for somebody new to Python.

00:20:20.220 --> 00:20:22.900
I think it's just going to confuse the heck out of people.

00:20:24.020 --> 00:20:28.340
So that said, I walked through the whole thing in this article.

00:20:28.340 --> 00:20:32.660
But I also admit that it's Mac focused.

00:20:32.660 --> 00:20:37.060
But on the Windows, I did a little blurb on Windows too.

00:20:37.060 --> 00:20:42.740
The thing I want to tell people that I sometimes forget on the Windows install is go slow when

00:20:42.740 --> 00:20:45.840
you're clicking through everything so that you can select the advanced features.

00:20:45.840 --> 00:20:50.540
And you probably want add Python to environmental variables.

00:20:50.540 --> 00:20:53.060
That makes it so that just shows up in your path.

00:20:53.060 --> 00:20:57.680
Because you can add that to your path manually or you can let the installer do it.

00:20:57.680 --> 00:20:59.240
And I like to have the installer do it.

00:20:59.240 --> 00:21:01.460
So that's my rant.

00:21:01.640 --> 00:21:06.220
I think that for most people, just use the default installer.

00:21:06.220 --> 00:21:08.920
Yeah, I think that's totally good advice.

00:21:08.920 --> 00:21:10.860
Let's see here real quick.

00:21:10.860 --> 00:21:14.920
I also did that the other day before it came out in Peru.

00:21:14.920 --> 00:21:16.600
I'm like, let me just put it over here and see.

00:21:16.600 --> 00:21:17.720
I wanted to test some things.

00:21:17.720 --> 00:21:19.580
And I had 3.11.

00:21:19.580 --> 00:21:23.240
And they were both totally content next to each other from those installers.

00:21:23.340 --> 00:21:27.280
I just decided to take 3.9 out because I didn't really need that.

00:21:27.280 --> 00:21:30.100
I've got it from homebrew as well already.

00:21:30.100 --> 00:21:32.620
But they do coexist.

00:21:32.620 --> 00:21:34.100
It's fine.

00:21:34.100 --> 00:21:37.620
And here's what the brew statement is.

00:21:37.620 --> 00:21:40.280
It's new formulae.

00:21:40.280 --> 00:21:43.840
And it's Python at 3.11 is what you can expect.

00:21:43.840 --> 00:21:43.860
Okay.

00:21:43.860 --> 00:21:45.080
Nice.

00:21:45.080 --> 00:21:46.100
Yeah.

00:21:46.100 --> 00:21:51.220
And as for Linux people, I think it's sort of funny that people try to tell

00:21:51.220 --> 00:21:55.060
how to install Python articles, talk about Linux stuff.

00:21:55.060 --> 00:21:57.660
Linux people already know how to install their stuff, don't they?

00:21:57.660 --> 00:21:58.080
I mean.

00:21:58.080 --> 00:21:59.600
Yes.

00:21:59.600 --> 00:22:03.560
But although it's more complicated because Python's broken into a bunch of pieces.

00:22:03.560 --> 00:22:04.740
You want Python?

00:22:04.740 --> 00:22:06.640
Or do you want the Python dev bit?

00:22:06.640 --> 00:22:07.860
Or do you need the build essentials?

00:22:07.860 --> 00:22:13.580
Or like there's a lot of like, do you need Python 3-V and V?

00:22:13.580 --> 00:22:17.480
Because you want to create a, like, the virtual environments don't come with Python

00:22:17.480 --> 00:22:19.140
when you apt install it, which is like, what?

00:22:19.140 --> 00:22:19.840
Okay.

00:22:20.020 --> 00:22:21.500
But they do on Mac and Windows.

00:22:21.500 --> 00:22:22.280
Yes, exactly.

00:22:22.280 --> 00:22:25.280
At least the error message is, you don't have this.

00:22:25.280 --> 00:22:29.040
Should you apt install Python 3-V and V?

00:22:29.040 --> 00:22:29.680
Yes, I should.

00:22:29.680 --> 00:22:30.560
Let me copy and paste.

00:22:30.560 --> 00:22:30.980
Hold on.

00:22:30.980 --> 00:22:31.680
Yeah.

00:22:31.680 --> 00:22:32.020
Okay.

00:22:32.020 --> 00:22:32.860
All right.

00:22:32.860 --> 00:22:35.740
I see Roman out in the audience there.

00:22:35.740 --> 00:22:38.460
Roman, I've got some shout outs for you in a little bit.

00:22:38.460 --> 00:22:39.860
And in the past, if you weren't here.

00:22:39.860 --> 00:22:44.100
But before we get to those, I want to tell you about this week's sponsor,

00:22:44.100 --> 00:22:46.480
Microsoft Founders Hub.

00:22:46.480 --> 00:22:48.360
Microsoft for Startups Founders Hub.

00:22:49.220 --> 00:22:52.260
Has, they have been recently big supporters of the show.

00:22:52.260 --> 00:22:53.240
We really appreciate it.

00:22:53.240 --> 00:22:57.780
And if you're out there either starting a business or want to start a business,

00:22:57.780 --> 00:23:00.460
got to know that it's, it's not easy, right?

00:23:00.460 --> 00:23:04.020
Within the first year, 90% of startups go out of business.

00:23:04.020 --> 00:23:05.320
That's not amazing.

00:23:05.820 --> 00:23:10.400
So the folks over at Microsoft for Startups set out to understand what are the problems

00:23:10.400 --> 00:23:13.700
that people are running into and how could they help?

00:23:13.700 --> 00:23:16.920
So they came up with Microsoft for Startups Founders Hub.

00:23:17.780 --> 00:23:24.440
And the idea is that you get at any stage of your startup free resources to grow and thrive.

00:23:24.960 --> 00:23:33.200
So you get thousands of dollars of cloud credits for things like Azure and GitHub and DeepMind.

00:23:33.200 --> 00:23:36.880
So look, OpenAI, sorry.

00:23:38.140 --> 00:23:39.920
For those types of things.

00:23:39.920 --> 00:23:45.120
And as your startup grows and progresses, you get many, many more of those.

00:23:45.120 --> 00:23:49.600
But you also get support in the form of mentorship and connections.

00:23:49.600 --> 00:23:52.560
Brian, you're not in Silicon Valley, are you?

00:23:52.560 --> 00:23:53.860
No.

00:23:53.860 --> 00:23:55.020
Neither am I.

00:23:55.020 --> 00:23:56.460
By choice, by the way.

00:23:57.020 --> 00:23:59.520
And most people out there listening are not either.

00:23:59.520 --> 00:24:05.600
But having the connections of like, hey, let's meet up with so-and-so for coffee and talk

00:24:05.600 --> 00:24:08.040
about this new project and see if there's a connection there, right?

00:24:08.040 --> 00:24:11.320
Like those, those kinds of things are incredibly powerful.

00:24:11.320 --> 00:24:15.620
And they've given people in locations like that huge advantages.

00:24:15.620 --> 00:24:21.260
So the other thing you get with this is access to a mentorship network, the ability to book

00:24:21.260 --> 00:24:26.180
one-on-ones with meetings, one-on-one meetings with mentors, many of whom are founders themselves.

00:24:27.000 --> 00:24:30.400
You can talk about things like marketing or fundraising or whatever you need.

00:24:30.400 --> 00:24:36.360
So if you want to get started, make your dream, your company a reality today with the critical

00:24:36.360 --> 00:24:38.920
support you get from Microsoft for Startups Founders Hub.

00:24:38.920 --> 00:24:42.180
You don't have to be third-party validated.

00:24:42.180 --> 00:24:45.320
You don't have to be venture-backed or part of some kind of accelerator.

00:24:45.320 --> 00:24:47.080
Just go and apply for free.

00:24:47.080 --> 00:24:50.020
PythonBuy.fm slash Founders Hub 2022.

00:24:50.020 --> 00:24:51.880
Link is in your show notes.

00:24:51.880 --> 00:24:52.860
Check them out.

00:24:52.860 --> 00:24:54.100
Very cool program.

00:24:54.100 --> 00:24:55.500
Very cool.

00:24:55.500 --> 00:24:56.680
Indeed.

00:24:56.980 --> 00:24:58.260
All right.

00:24:58.260 --> 00:25:00.100
Ready for some awards?

00:25:00.100 --> 00:25:02.000
Got the red carpet out.

00:25:02.000 --> 00:25:03.000
The champagne.

00:25:03.000 --> 00:25:03.820
More champagne.

00:25:03.820 --> 00:25:05.500
There's some kind of theme with that here.

00:25:05.500 --> 00:25:06.460
Celebration.

00:25:06.460 --> 00:25:07.080
Yes.

00:25:07.080 --> 00:25:08.200
Let's talk about the Bossies.

00:25:08.200 --> 00:25:14.400
So the Bossies, this is InfoWorld's 2022 Bossie Awards.

00:25:14.400 --> 00:25:20.060
Celebrate the most important and innovative solution for application developments, DevOps, analytics,

00:25:20.060 --> 00:25:21.120
and what year.

00:25:21.120 --> 00:25:22.840
So let's go.

00:25:22.840 --> 00:25:23.860
These are open source.

00:25:24.300 --> 00:25:26.100
Best open source software.

00:25:26.100 --> 00:25:28.140
I was like, where does Boss come from?

00:25:28.140 --> 00:25:28.400
Okay.

00:25:28.400 --> 00:25:29.320
Exactly.

00:25:29.320 --> 00:25:32.700
There's a bunch that are interesting, but we'll go through.

00:25:32.700 --> 00:25:34.440
You can't go through very fast.

00:25:34.440 --> 00:25:35.500
There's like a delay.

00:25:35.500 --> 00:25:36.560
Yeah, I guess.

00:25:36.560 --> 00:25:38.500
So you pay attention and you actually take it in.

00:25:39.160 --> 00:25:51.100
So maybe really quick, just because it's the first one, is there's Alma Linux, which is a free Linux OS for the community, by the community, that is like an enterprise Linux distribution focused on stability.

00:25:51.320 --> 00:25:53.060
So that might be cool checking out.

00:25:53.060 --> 00:25:55.680
I know a lot of people do things there.

00:25:55.680 --> 00:25:59.900
You have to bear with me as I make my way through this thing, is it won't let me go any faster.

00:25:59.900 --> 00:26:02.880
Well, let's do the first one.

00:26:02.880 --> 00:26:06.920
There's a lot of Java in here, actually, which we'll get back to in a joke later.

00:26:06.920 --> 00:26:07.600
That'll be fun.

00:26:07.600 --> 00:26:08.960
Like Jhipster.

00:26:09.200 --> 00:26:11.460
I mean, greetings, Java hipster.

00:26:11.460 --> 00:26:14.440
That's a pretty awesome project.

00:26:14.440 --> 00:26:15.940
Java hipster.

00:26:15.940 --> 00:26:19.080
That seems sort of anachronistic.

00:26:19.080 --> 00:26:25.300
You know, you got to, this is part of that self-talk thing where you like try to talk yourself up a little.

00:26:25.300 --> 00:26:26.080
All right.

00:26:26.080 --> 00:26:32.240
Maybe number one that I want to give a shout out to, number one, as in number 10 in the list, is WASM time.

00:26:32.240 --> 00:26:37.000
A fast and secure runtime for WebAssembly outside of the browser.

00:26:37.220 --> 00:26:43.000
So if you think about what Node.js did for JavaScript, like JavaScript used to be this thing you did on web front ends.

00:26:43.000 --> 00:26:51.000
And then somebody said, if we rip that engine out, it could be a server-side technology or a client-side technology that is not in a browser at all.

00:26:51.000 --> 00:26:56.440
But just, it becomes a programming language, as long as we have a runtime that everyone likes and works with.

00:26:56.440 --> 00:26:59.640
Well, this is like that, but for WebAssembly, right?

00:26:59.960 --> 00:27:18.080
And so what's interesting is if you want to go and run a Python code and you don't want to worry about making sure Python is set up and all those things, you could just get, say, something like PyScript and ship it to run on top of WASM time.

00:27:18.080 --> 00:27:19.380
And there you go.

00:27:19.740 --> 00:27:25.660
So you just say WASM time and then some WASM output, which could be, you know, your code.

00:27:26.120 --> 00:27:33.340
And let's see if they have over here on PyPI, we have WASM time 2.0, which is the Python embedding of WASM time.

00:27:33.340 --> 00:27:34.740
So there you go.

00:27:34.740 --> 00:27:36.840
Take your Python code and off it goes.

00:27:36.840 --> 00:27:38.180
That's pretty cool.

00:27:38.180 --> 00:27:39.900
So, Michael, what time is it?

00:27:39.900 --> 00:27:40.980
It's WASM time.

00:27:40.980 --> 00:27:41.760
It's WASM.

00:27:41.760 --> 00:27:43.080
I'm like, wait, what?

00:27:43.080 --> 00:27:44.140
It's WASM time.

00:27:44.140 --> 00:27:46.820
It is.

00:27:46.820 --> 00:27:47.440
Oh, awesome.

00:27:47.960 --> 00:27:53.720
Yeah, so you just write your code in Python and then you could go and run it, which would be pretty excellent.

00:27:53.720 --> 00:27:58.500
Also, something interesting about WASM is it allows for interoperability.

00:27:58.500 --> 00:28:10.180
So if I wanted to do C, .NET, Python, and Rust, have those all talk together because, I don't know, I couldn't decide or I don't know, whatever reason, right?

00:28:10.180 --> 00:28:14.020
You could have them all converted to WASM and then integrate there as well.

00:28:14.020 --> 00:28:17.700
So there's some pretty interesting runtime and deployment things here.

00:28:18.300 --> 00:28:20.220
Anyway, so that was one of the winners.

00:28:20.220 --> 00:28:25.420
Right behind it, one of the biggest winners in our world has got to be PyScript, right?

00:28:25.420 --> 00:28:25.920
Yeah.

00:28:25.920 --> 00:28:27.780
Let's go look at it on the list.

00:28:27.780 --> 00:28:29.000
Yeah, it is.

00:28:29.000 --> 00:28:30.640
There's a bunch of stuff here that I don't care about.

00:28:30.640 --> 00:28:32.960
But number 14, Sentry.

00:28:32.960 --> 00:28:33.680
Nice.

00:28:33.680 --> 00:28:34.440
Error monitoring.

00:28:34.440 --> 00:28:46.180
I was just using this to track down some errors that I introduced with trying to run Python 3.11 and Beanie before it was time.

00:28:46.580 --> 00:28:49.720
But it told me exactly what was going on and I figured, okay, that's a motor problem.

00:28:49.720 --> 00:28:51.840
I was able to track that down, which is pretty excellent.

00:28:51.840 --> 00:28:56.040
Let's see a few more here that are fun.

00:28:57.040 --> 00:29:15.120
In BDEV, if you're doing notebook stuff and you want to be able to test your notebooks or clean them up before you check them in, or you want to turn notebooks into a Python package where certain actions in a cell become functions in your Python package and deploy it to PyBI.

00:29:15.760 --> 00:29:17.720
All those crazy things in BDEV.

00:29:17.720 --> 00:29:19.180
So those are pretty interesting.

00:29:19.180 --> 00:29:21.120
Accelerate.

00:29:21.120 --> 00:29:24.340
I think this is from Hugging Face, but I can't quite tell.

00:29:24.340 --> 00:29:26.560
Yeah, it is Hugging Face.

00:29:26.560 --> 00:29:27.260
That's what it is.

00:29:28.220 --> 00:29:35.580
It's a way to build, train, and deploy state-of-the-art models powered by open source.

00:29:35.580 --> 00:29:36.480
Yeah.

00:29:36.480 --> 00:29:39.540
So anyway, it looks interesting if you're into that.

00:29:39.540 --> 00:29:40.780
Stable diffusion.

00:29:40.780 --> 00:29:44.360
Do you need to have a bear that has just landed on the moon?

00:29:44.360 --> 00:29:45.760
Well, go in there.

00:29:45.760 --> 00:29:50.360
You can create those funky AI art things.

00:29:50.360 --> 00:29:56.120
Anyway, there's a bunch of fun projects in this 2022 Bossies Award list.

00:29:56.120 --> 00:29:57.160
Yeah, that's pretty great.

00:29:57.160 --> 00:29:57.780
Yep.

00:29:57.780 --> 00:29:59.500
All right.

00:29:59.500 --> 00:30:00.520
Yeah.

00:30:00.520 --> 00:30:03.560
Well, Scott, it's wasm time.

00:30:03.560 --> 00:30:04.860
It's wasm time.

00:30:04.860 --> 00:30:06.000
Yeah.

00:30:06.000 --> 00:30:11.000
We talk about Will McCoogan a lot and textural and stuff.

00:30:11.000 --> 00:30:12.560
And Will's in the audience.

00:30:12.560 --> 00:30:13.060
Hey, Will.

00:30:13.060 --> 00:30:16.980
So one of the things that if you follow Will on Twitter, he shows a whole bunch of cool

00:30:16.980 --> 00:30:22.760
examples of stuff he's working on, but you haven't been able to play with it because he's

00:30:22.760 --> 00:30:24.240
been sneaky about it.

00:30:24.240 --> 00:30:28.120
And it's been on a, well, it's not sneaky, but it's been on a CSS branch, different branch

00:30:28.120 --> 00:30:33.520
of their code base on textualize or textual.

00:30:33.520 --> 00:30:43.040
So now we can play with it because as of what, October 22nd, textual 0.2.0.

00:30:43.040 --> 00:30:43.740
Wow.

00:30:43.740 --> 00:30:45.120
Big jump in numbers there, guys.

00:30:45.120 --> 00:30:51.300
But it released and it has all of the CSS branch stuff merged in.

00:30:51.300 --> 00:30:55.680
So all the really cool, fun things that you can do that looked like web development and,

00:30:55.680 --> 00:30:58.120
but they're in a CLI.

00:30:58.120 --> 00:31:01.400
Now I can start playing with them because they merged in.

00:31:02.240 --> 00:31:08.560
One of the things that I'm glad that they waited a little while for because they were looking

00:31:08.560 --> 00:31:14.640
for API stability, but also they wanted to finalize the documentation at the same time

00:31:14.640 --> 00:31:17.060
before they released it to everybody officially.

00:31:17.500 --> 00:31:21.300
So they've got a tutorial written, which is really kind of nice.

00:31:21.300 --> 00:31:26.320
It's a little stopwatch application that kind of walks through and it walks through all the

00:31:26.320 --> 00:31:32.860
different pieces of, of how you, how you use textualize and with their CSS.

00:31:32.860 --> 00:31:39.360
And it's got going through writing through the CSS, the dynamicness of it, reactive attributes.

00:31:39.360 --> 00:31:42.360
This, this really looks great.

00:31:42.360 --> 00:31:44.200
I haven't gone through it yet, but it looks awesome.

00:31:44.200 --> 00:31:51.460
And then, and then they went through and updated the textualize guide, which has, you know, it goes,

00:31:51.460 --> 00:31:53.080
goes through all the different examples.

00:31:53.080 --> 00:31:56.720
And I've got my screen shrink up too far, so it doesn't show everything.

00:31:57.080 --> 00:32:01.980
But anyway, really great stuff in this, in this, this manual.

00:32:01.980 --> 00:32:03.360
Good job guys.

00:32:03.360 --> 00:32:04.400
Yeah, that looks awesome.

00:32:04.400 --> 00:32:06.660
So I can't wait to play with it.

00:32:06.660 --> 00:32:07.900
Yeah.

00:32:07.900 --> 00:32:14.900
Who knew that we could treat, treat terminals as high refresh rate, general rendering engines.

00:32:14.900 --> 00:32:21.420
It's, I feel like the stuff that Will and crew are highlighting here is a little bit like

00:32:21.420 --> 00:32:23.800
what you could do with JavaScript canvases, right?

00:32:23.800 --> 00:32:27.020
You're like, oh, guess what you could actually do, which is, you know,

00:32:27.020 --> 00:32:30.160
like our software here, StreamYard, that we're using to live stream this, right?

00:32:30.160 --> 00:32:33.560
It's like, who would have ever thought you could have done this with just a web browser

00:32:33.560 --> 00:32:34.660
without plugins, right?

00:32:34.660 --> 00:32:35.500
And here we are.

00:32:35.500 --> 00:32:42.140
And I also just heard Will talking about this on ChangeLog just recently.

00:32:42.140 --> 00:32:46.420
One of the more recent ChangeLogs was talking about this release, which is pretty cool.

00:32:46.420 --> 00:32:49.380
Although, Will, I got to say I'm a little disappointed.

00:32:50.380 --> 00:32:59.140
Because they asked how you became rich and textual have gained so much popularity so quickly.

00:32:59.140 --> 00:33:00.800
And you didn't even mention us.

00:33:00.800 --> 00:33:02.260
Just come on.

00:33:02.260 --> 00:33:02.540
Anyway.

00:33:02.540 --> 00:33:09.620
Cool.

00:33:09.620 --> 00:33:12.960
Anyway, that's it for our items.

00:33:13.620 --> 00:33:16.920
And since I've been kind of under the weather, I don't have any extras.

00:33:16.920 --> 00:33:18.160
Do you have any extras for us?

00:33:18.160 --> 00:33:19.820
You know that I do.

00:33:19.820 --> 00:33:20.880
I've got a bunch of things.

00:33:20.880 --> 00:33:21.920
I'll go quick through them.

00:33:21.920 --> 00:33:24.720
So I recently did a fun video.

00:33:24.720 --> 00:33:25.720
I know that guy.

00:33:25.720 --> 00:33:26.620
Yeah.

00:33:26.620 --> 00:33:34.200
I did a video where I added, I did the live coding on Talk Python Training, actually adding

00:33:34.200 --> 00:33:36.860
the feature for the search over here.

00:33:36.960 --> 00:33:37.940
So I rewrote the search.

00:33:37.940 --> 00:33:42.880
You pointed out that pytest is a fun thing to type in there, right?

00:33:42.880 --> 00:33:44.100
pytest is good.

00:33:44.100 --> 00:33:50.800
You might search for Postman, Ingrok, and you get your search results there.

00:33:50.800 --> 00:33:52.620
Got this cool hierarchy thing.

00:33:52.620 --> 00:33:55.420
But when I first wrote that, it was super slow.

00:33:55.420 --> 00:34:00.000
And the techniques that I used to debug that, figure out what's going on, make it faster.

00:34:00.000 --> 00:34:04.440
The video says 17, but in an extreme case, it was actually 80 times faster.

00:34:04.920 --> 00:34:07.900
There's just some really cool techniques of walking through like, oh, how could you like

00:34:07.900 --> 00:34:10.620
use logging in the database to figure out what's happening?

00:34:10.620 --> 00:34:12.140
How could you use the profiling?

00:34:12.140 --> 00:34:16.920
How do we use dictionaries so that we can convert like 100 database calls into one, even though

00:34:16.920 --> 00:34:20.460
there's like a, not a natural join story going on.

00:34:20.460 --> 00:34:23.040
So if people want to follow, go check out that video.

00:34:23.040 --> 00:34:25.000
That's lots of fun in the show notes.

00:34:25.000 --> 00:34:28.680
From, let me get the name right here.

00:34:28.680 --> 00:34:30.520
Also from Ryan Scheftel.

00:34:30.520 --> 00:34:40.320
If you're into stock markets and so on and you want to use Pandas, here's a project called

00:34:40.320 --> 00:34:42.060
Pandas Market Calendars.

00:34:42.060 --> 00:34:45.500
It's the market calendars used with Pandas for trading applications.

00:34:45.500 --> 00:34:49.340
So it has things like, when are the markets opening and closing?

00:34:49.340 --> 00:34:50.400
Is there a holiday?

00:34:50.900 --> 00:34:54.240
Is there some other weird event that's changing the start to close time?

00:34:54.240 --> 00:34:55.000
Right.

00:34:55.000 --> 00:34:58.180
So just a cool little library to bring that into your Pandas code.

00:34:58.180 --> 00:35:03.380
And I believe Pandas came out of New York and the whole trading industry over there.

00:35:03.380 --> 00:35:04.340
So that's good.

00:35:04.340 --> 00:35:08.020
Shout out for Roman Wright, who is out in the audience.

00:35:08.020 --> 00:35:08.560
Hey, Roman.

00:35:09.240 --> 00:35:12.760
We recently, so when Beanie came out, Beanie's fantastic.

00:35:12.760 --> 00:35:18.960
MongoDB library, you know, what FastAPI did for APIs, Beanie does for MongoDB, right?

00:35:18.960 --> 00:35:24.140
It takes Pydantic and turns it into a really cool API that then you use instead of creating

00:35:24.140 --> 00:35:26.080
just classes or whatever, right?

00:35:26.080 --> 00:35:29.560
So all the benefits of having Pydantic plus MongoDB.

00:35:29.560 --> 00:35:33.960
And when it came out, it was only async, which is awesome when you're doing async stuff,

00:35:33.960 --> 00:35:34.260
right?

00:35:34.260 --> 00:35:38.300
Without it, you can't do all the really high scale, high concurrency things.

00:35:38.980 --> 00:35:41.600
But there's plenty of times where you're like, I don't want that.

00:35:41.600 --> 00:35:43.440
I just want to call this function.

00:35:43.440 --> 00:35:47.940
And I'm in the middle of a script that has no business being async, but you gave me an

00:35:47.940 --> 00:35:48.980
async only function.

00:35:48.980 --> 00:35:53.240
So now I got to figure out how to like spin up a loop and run this thing and wait for it

00:35:53.240 --> 00:35:55.200
when I just want to call the function.

00:35:55.200 --> 00:36:03.620
So in addition to the standard async model, Roman added a Beanie.sync submodule where you

00:36:03.620 --> 00:36:08.880
can get async document and you get a, you can initialize a synchronous database,

00:36:08.880 --> 00:36:09.380
connection.

00:36:09.380 --> 00:36:15.120
And then all of your queries and everything become just straight up synchronous calls,

00:36:15.120 --> 00:36:19.740
like on more traditional database engines or database ORMs, ODMs.

00:36:19.740 --> 00:36:20.260
Okay.

00:36:20.260 --> 00:36:20.980
Yeah.

00:36:20.980 --> 00:36:22.940
So excellent work out there.

00:36:22.940 --> 00:36:25.580
It's a good job keeping up on that.

00:36:25.580 --> 00:36:26.720
It's a cool product.

00:36:26.720 --> 00:36:27.360
Yeah.

00:36:27.360 --> 00:36:28.020
It's super cool.

00:36:28.020 --> 00:36:28.280
Yeah.

00:36:28.280 --> 00:36:28.980
I love it.

00:36:28.980 --> 00:36:33.020
DuckDuckGo has released a web browser.

00:36:33.220 --> 00:36:38.900
Just when you thought Chrome has taken over everything, DuckDuckGo says no, or they quacked

00:36:38.900 --> 00:36:41.740
no, or whatever DuckDuck does when they communicate.

00:36:41.740 --> 00:36:46.700
And right now it's Mac only, but it's coming out for Windows pretty soon as well.

00:36:46.700 --> 00:36:49.740
And it's a privacy focused database.

00:36:49.740 --> 00:36:51.840
Web browser.

00:36:51.840 --> 00:36:52.340
Yeah.

00:36:52.540 --> 00:36:52.940
Yes.

00:36:52.940 --> 00:36:53.080
Sorry.

00:36:53.080 --> 00:36:53.540
I said database.

00:36:53.540 --> 00:36:53.800
Yeah.

00:36:53.800 --> 00:36:54.380
Web browser.

00:36:54.380 --> 00:36:57.140
But let me, let me show you.

00:36:57.140 --> 00:36:58.760
I can even show you real quick.

00:36:58.760 --> 00:36:59.660
Here it is.

00:36:59.660 --> 00:37:00.860
But did you install it?

00:37:00.860 --> 00:37:02.020
Oh, of course I did.

00:37:02.020 --> 00:37:03.120
Why wouldn't I do that?

00:37:03.120 --> 00:37:05.020
Here it is.

00:37:05.020 --> 00:37:06.080
So we go over here.

00:37:06.160 --> 00:37:09.620
We can go to pythonbytes.fm.

00:37:09.620 --> 00:37:12.680
And if you pull this up, why not?

00:37:12.680 --> 00:37:13.620
Didn't add to stream.

00:37:13.620 --> 00:37:13.960
There we go.

00:37:13.960 --> 00:37:15.640
But come over here to Python Bytes.

00:37:15.640 --> 00:37:17.180
And you can click on this.

00:37:17.180 --> 00:37:18.760
It'll show you where all the tracking is.

00:37:18.760 --> 00:37:21.740
Like notice, no Google Analytics, no other tracking.

00:37:21.740 --> 00:37:24.600
But where shall we go?

00:37:24.600 --> 00:37:26.420
We have somewhere super egregious.

00:37:26.420 --> 00:37:28.120
We could go to CNN.com.

00:37:28.120 --> 00:37:33.060
And remember, this is using already NextDNS and other blocking.

00:37:33.060 --> 00:37:35.180
So a lot of the blocking happens before it gets here.

00:37:35.660 --> 00:37:39.640
But if you pull it up, it'll still say, look at all these different things we blocked.

00:37:39.640 --> 00:37:41.620
And here's the tracking.

00:37:41.620 --> 00:37:42.620
Here's the advertising.

00:37:42.620 --> 00:37:47.960
Again, many of these are already blocked before it gets to the network.

00:37:47.960 --> 00:37:51.900
So it'd be 30 or 40 easy.

00:37:51.900 --> 00:37:53.880
So that's pretty cool.

00:37:53.880 --> 00:37:56.820
But I don't know.

00:37:56.820 --> 00:37:59.120
I'm not switching over to it yet.

00:37:59.120 --> 00:38:00.660
Hopefully they can do better.

00:38:00.660 --> 00:38:05.640
You can't do things like set your DNS servers for, say, DNS over HTTPS.

00:38:05.640 --> 00:38:07.860
So you can have more control over that.

00:38:07.860 --> 00:38:10.660
There's a lot of things that are not there.

00:38:10.660 --> 00:38:13.800
It has a really cool way to play YouTube videos in a private window.

00:38:13.800 --> 00:38:18.540
So if you go over to YouTube and you hit play, it'll, would you like to play this in a non-tracking,

00:38:18.540 --> 00:38:21.420
non-algorithmic feeding sort of way?

00:38:21.420 --> 00:38:22.000
Which is great.

00:38:22.080 --> 00:38:23.600
But you know what you have over on YouTube?

00:38:23.600 --> 00:38:24.500
Hotkeys.

00:38:24.500 --> 00:38:29.220
I can type F for full screen or T to like go wide theater mode or I for mini player.

00:38:29.220 --> 00:38:31.500
It doesn't have any of those types of things.

00:38:31.500 --> 00:38:31.720
Right.

00:38:31.780 --> 00:38:33.580
And so it's like super, super early.

00:38:33.580 --> 00:38:37.880
But in that regard, I'm not really liked or recommending it.

00:38:37.880 --> 00:38:39.660
But it's awesome that they're trying.

00:38:39.660 --> 00:38:40.540
I like DuckDuckGo.

00:38:40.540 --> 00:38:42.140
I'd like to see them make progress here.

00:38:42.140 --> 00:38:47.260
And they have the fire button, which you can just clear all the stuff up and get a cool animation.

00:38:47.260 --> 00:38:49.420
What does that do?

00:38:49.420 --> 00:38:50.300
Just close it up?

00:38:50.300 --> 00:38:54.020
It erases like all history and closes all tabs and everything.

00:38:54.020 --> 00:38:55.180
Oh, cool.

00:38:55.180 --> 00:38:55.740
Yeah.

00:38:55.740 --> 00:38:57.340
Anyway, there you go.

00:38:57.340 --> 00:39:03.380
I think I've got one more thing to share, but I've got to share my screen back because of that.

00:39:03.380 --> 00:39:04.860
Nabbed it.

00:39:04.860 --> 00:39:06.520
Yeah.

00:39:06.520 --> 00:39:08.620
Last one here before we get to a joke.

00:39:08.620 --> 00:39:11.100
So I want to give credit here.

00:39:11.100 --> 00:39:12.840
This one comes from Will Shanks.

00:39:12.840 --> 00:39:20.220
Remember when we talked about int, like I-N-T parentheses, some string, like quote, one, two, three, close quote.

00:39:20.220 --> 00:39:20.460
Okay.

00:39:20.460 --> 00:39:36.820
That had a security patch in Python 3.10.7 because if you send it right, malicious, huge number string, it can get into like some denial of service where it like works for an insane amount of time trying to figure out what that number is by parsing it.

00:39:36.820 --> 00:39:40.940
Not just a big number, but like a specifically bad big number, I think was the problem.

00:39:40.940 --> 00:39:44.400
So in 3.10.7, they said, you know what?

00:39:44.440 --> 00:39:52.780
We're going to limit the size of int to, I don't know, like 94 with 100 zeros or something after it, right?

00:39:52.780 --> 00:40:04.260
At the time, you and I spoke about, remember when we did C and C++ and C# and we had to think about shorts and, you know, 32-bit integers and 64-bit integers?

00:40:04.580 --> 00:40:07.440
And would it be bigger or smaller than 32,000?

00:40:07.440 --> 00:40:08.260
Do we need to worry?

00:40:08.260 --> 00:40:11.620
And like that number is so huge, like we probably don't think about it.

00:40:11.620 --> 00:40:15.440
Well, some people do, in particular, the scientific folks.

00:40:15.440 --> 00:40:19.480
So over on CondoForge, there's a big conversation about what to do here.

00:40:19.480 --> 00:40:21.580
Like, should we adopt this?

00:40:21.580 --> 00:40:23.660
Should we say this is like too much of a problem?

00:40:23.660 --> 00:40:27.000
I mean, I don't really know how they're going to avoid eventually adopting it.

00:40:27.340 --> 00:40:32.620
Because like every version of Python going forward is going to have this in it, right?

00:40:32.620 --> 00:40:35.920
They don't want to eventually like permanently be held back.

00:40:35.920 --> 00:40:39.540
But on the other side, the, what's it, Ubuntu?

00:40:39.540 --> 00:40:40.460
Let me look.

00:40:40.460 --> 00:40:44.280
Yeah, Ubuntu has decided to patch out that int limit.

00:40:44.280 --> 00:40:54.340
So basically unravel that security fix and preserve the behavior, previous behavior, thinking that the risk is low of getting an integer like that.

00:40:54.340 --> 00:40:56.200
And it's not worth breaking compatibility for.

00:40:56.560 --> 00:40:56.820
Okay.

00:40:56.820 --> 00:41:02.620
So apparently, int, open parenthesis, string, close parenthesis is still controversial.

00:41:02.620 --> 00:41:03.640
Who knew?

00:41:03.640 --> 00:41:04.160
Who knew?

00:41:04.160 --> 00:41:04.300
Not me.

00:41:04.300 --> 00:41:04.860
Yeah.

00:41:04.860 --> 00:41:05.200
Not me.

00:41:05.200 --> 00:41:05.940
Yeah.

00:41:05.940 --> 00:41:07.500
All right.

00:41:07.500 --> 00:41:08.980
Let's see.

00:41:08.980 --> 00:41:18.160
Robert Robertson asks, in Python Bytes episode 311, is that going to be a special episode covering Python 311?

00:41:18.160 --> 00:41:22.100
I don't know, but we got five weeks to figure it out and it's a great idea, Robert.

00:41:22.100 --> 00:41:22.960
Thank you.

00:41:22.960 --> 00:41:23.640
Sure.

00:41:23.640 --> 00:41:24.660
Good idea.

00:41:24.660 --> 00:41:25.380
I didn't see that coming.

00:41:25.700 --> 00:41:27.440
Yeah, we should have coordinated with the Python folks.

00:41:27.440 --> 00:41:30.020
We could have just released like five really short episodes.

00:41:30.020 --> 00:41:31.200
Like, still waiting.

00:41:31.200 --> 00:41:33.500
No, skip to the next one.

00:41:33.500 --> 00:41:34.520
All right.

00:41:34.520 --> 00:41:35.460
Well, that's all I got.

00:41:35.460 --> 00:41:37.500
That's all I got for extras.

00:41:37.500 --> 00:41:40.600
Well, one of the things I want to extra from the audience.

00:41:40.600 --> 00:41:43.400
is Dean Langs.

00:41:43.400 --> 00:41:45.800
I did a T-L-V.

00:41:45.800 --> 00:41:46.760
Tel Aviv.

00:41:46.760 --> 00:41:47.460
Tel Aviv.

00:41:47.460 --> 00:41:49.060
It's on December 13th.

00:41:49.180 --> 00:41:50.180
And they have tickets.

00:41:50.180 --> 00:41:51.180
They have tickets up for sale.

00:41:51.180 --> 00:41:52.540
And there's a code.

00:41:52.540 --> 00:41:58.720
So if you use discount code BYTES, you get a discount, I guess.

00:41:59.100 --> 00:41:59.880
So that's nice.

00:41:59.880 --> 00:42:00.640
Awesome.

00:42:00.640 --> 00:42:00.680
Awesome.

00:42:00.680 --> 00:42:01.720
Yeah.

00:42:01.720 --> 00:42:02.840
Good luck with the conference there, Dean.

00:42:02.840 --> 00:42:04.240
And how about-

00:42:04.240 --> 00:42:05.580
Lovely city to visit if you get a chance to.

00:42:05.580 --> 00:42:06.400
Okay.

00:42:06.400 --> 00:42:06.960
Cool.

00:42:06.960 --> 00:42:09.320
How about something funny?

00:42:09.320 --> 00:42:10.180
Yes.

00:42:10.180 --> 00:42:11.440
All right.

00:42:11.440 --> 00:42:13.820
Besides my voice.

00:42:15.280 --> 00:42:16.020
Here we go.

00:42:16.020 --> 00:42:17.840
See if I can open the image.

00:42:17.840 --> 00:42:19.120
It's own glorious.

00:42:19.120 --> 00:42:21.320
So, Brian, I was thinking about getting a new monitor.

00:42:21.320 --> 00:42:22.140
I have a fine monitor.

00:42:22.140 --> 00:42:24.420
It's like a 32-inch 4K monitor.

00:42:24.420 --> 00:42:26.340
But I want something kind of widescreen.

00:42:26.340 --> 00:42:31.340
There was this cool, like, horizontal resolution equivalent in 4K.

00:42:31.340 --> 00:42:32.180
But it was 40.

00:42:32.180 --> 00:42:34.500
It was either 40 or 49 inches wide.

00:42:34.500 --> 00:42:35.140
It was epic.

00:42:35.140 --> 00:42:36.060
But I didn't get it.

00:42:36.060 --> 00:42:43.720
So I didn't get it because I thought the curved monitor might be like parabolic echoes

00:42:43.720 --> 00:42:45.340
for all the work that we do here.

00:42:45.340 --> 00:42:48.260
And I also didn't get it because, well, it's expensive.

00:42:48.260 --> 00:42:52.260
And I don't know if I can get it into the resolutions I want for recordings and things like that.

00:42:52.260 --> 00:42:56.720
But here's somebody who posted a picture.

00:42:56.720 --> 00:42:58.400
It says, develop in Java, be like.

00:42:58.400 --> 00:43:02.720
And it's got, I think, that's a 49-inch curved widescreen monitor.

00:43:02.720 --> 00:43:04.140
Small font.

00:43:04.140 --> 00:43:07.720
And it's edge to edge code.

00:43:07.720 --> 00:43:09.720
There's no PEP8 ideas on this, right?

00:43:09.720 --> 00:43:10.480
Look at that.

00:43:10.480 --> 00:43:11.760
Is that nuts?

00:43:11.760 --> 00:43:12.860
That is nuts.

00:43:12.860 --> 00:43:13.580
Yeah.

00:43:13.580 --> 00:43:13.760
Yeah.

00:43:13.760 --> 00:43:14.300
Yeah.

00:43:14.300 --> 00:43:17.600
And the subtitles be like, I heard you like getters.

00:43:17.600 --> 00:43:21.480
Which apparently, you know, no properties and all that.

00:43:21.480 --> 00:43:22.220
Yeah.

00:43:22.220 --> 00:43:27.380
But anyway, I just thought you all might enjoy just checking out this picture of an insane

00:43:27.380 --> 00:43:28.260
bit of code.

00:43:28.260 --> 00:43:29.660
Like, something's gone wrong.

00:43:29.660 --> 00:43:34.380
When you need, you actually need the full width of a 49-inch monitor.

00:43:34.380 --> 00:43:36.660
I was thinking of putting a couple windows side by side.

00:43:36.660 --> 00:43:37.780
I don't know.

00:43:37.780 --> 00:43:38.660
Call me crazy.

00:43:38.660 --> 00:43:40.260
I didn't have measured mine.

00:43:40.260 --> 00:43:43.180
I think mine's like, I'll have to measure it.

00:43:43.180 --> 00:43:44.900
I think it's like 30-something.

00:43:44.900 --> 00:43:45.840
I don't know.

00:43:45.840 --> 00:43:48.720
But it's got a bit of a curve.

00:43:48.720 --> 00:43:49.680
Nice.

00:43:49.820 --> 00:43:50.220
I have to.

00:43:50.220 --> 00:43:50.220
I have to.

00:43:50.220 --> 00:43:52.260
I, it's painful to watch that.

00:43:52.260 --> 00:43:57.460
And I'm not going to throw rocks at this glass house because I'm a C++ developer.

00:43:57.460 --> 00:44:02.380
And we've got a few pieces of gnarly code that have big long lines.

00:44:02.920 --> 00:44:03.480
Yeah.

00:44:03.480 --> 00:44:08.600
For the multiple inheritance, multiple template.

00:44:08.600 --> 00:44:10.280
Oh, yeah.

00:44:10.280 --> 00:44:13.640
And also just bad naming sometimes.

00:44:13.640 --> 00:44:15.620
And that happens in Java too.

00:44:15.620 --> 00:44:16.640
You've got big long names.

00:44:16.640 --> 00:44:19.920
Well, the problem is you've got to get a name something.

00:44:19.920 --> 00:44:22.520
And then you've got to have a factory something.

00:44:22.520 --> 00:44:25.360
And you've got to have an iFactory interface of that something.

00:44:25.360 --> 00:44:27.340
And you've got to mock it out.

00:44:27.340 --> 00:44:29.520
Anyway, it gets complicated and the names get long.

00:44:29.520 --> 00:44:29.920
I understand.

00:44:30.320 --> 00:44:34.020
And you have to get a mock factory and a name factory and a factory factory.

00:44:34.020 --> 00:44:35.380
That's right.

00:44:35.380 --> 00:44:44.880
If it's not, the audience has identified the coding style here as a PEP infinity instead of PEP 8.

00:44:44.880 --> 00:44:46.120
That's PEP infinity code.

00:44:46.120 --> 00:44:47.160
PEP infinity.

00:44:47.160 --> 00:44:47.740
Yeah.

00:44:47.740 --> 00:44:49.180
Well, this was infinitely fun.

00:44:49.180 --> 00:44:50.040
Thank you, Brian.

00:44:50.040 --> 00:44:51.420
And thanks, everyone, for being here.

00:44:51.420 --> 00:44:52.180
Thank you.

00:44:52.180 --> 00:44:53.280
I'll talk to you later.

