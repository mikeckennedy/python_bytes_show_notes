
00:00:00.000 --> 00:00:09.500
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 158 recorded November 20th,


00:00:09.500 --> 00:00:14.600
2019. I'm Michael Kennedy. And I'm Brian Okken. And this episode is brought to you by DigitalOcean.


00:00:14.600 --> 00:00:18.800
DigitalOcean is awesome. Check them out at pythonbytes.fm/digitalocean.


00:00:18.800 --> 00:00:28.600
Tell you more about that later. But Brian, I find that Python is making its way into all these different areas, not just traditional computer science or maybe data science.


00:00:28.600 --> 00:00:34.440
Right, there's this an article that I saw that's kind of interesting. I mean there's not a lot of


00:00:34.440 --> 00:00:42.120
details but essentially it's saying that Python is replacing Excel in banking and investing.


00:00:42.120 --> 00:00:48.920
The real title is "Python already replaced Excel in banking" but we've got some interesting


00:00:48.920 --> 00:00:53.160
quotes from here so I'm just going to read it out. This is from the article. "If you wanted


00:00:53.160 --> 00:00:57.480
to prove your mettle as an entry-level banker or trader it used to be the case that you had


00:00:57.480 --> 00:01:02.360
had to know all about financial modeling in Excel. Not anymore. These days it's all


00:01:02.360 --> 00:01:07.640
about Python, especially on the trading floor. And it goes on to talk about how a


00:01:07.640 --> 00:01:14.760
lot of different modeling that used to be done in smaller cases in Excel, but it


00:01:14.760 --> 00:01:19.520
would take like a few minutes to run the Excel modifications and analysis. Now


00:01:19.520 --> 00:01:24.880
they can do even like way more data and have it done in like a second or two. So


00:01:24.880 --> 00:01:29.880
So it does make sense in cases where split-second decisions


00:01:29.880 --> 00:01:32.940
or change how you react to the market,


00:01:32.940 --> 00:01:35.320
that you'd wanna have speed and ease.


00:01:35.320 --> 00:01:36.800
So Python makes sense to me.


00:01:36.800 --> 00:01:37.840
- Yeah, that's really interesting.


00:01:37.840 --> 00:01:39.520
I'm sure it's using a lot of the data science stuff


00:01:39.520 --> 00:01:43.480
like NumPy and whatnot to make that fast deep down below.


00:01:43.480 --> 00:01:45.400
The whole trading, the algorithmic trading,


00:01:45.400 --> 00:01:47.160
the high-speed trading, all that kind of stuff,


00:01:47.160 --> 00:01:50.520
the latency that those folks care about is crazy, right?


00:01:50.520 --> 00:01:52.840
Like if you could get it from four milliseconds


00:01:52.840 --> 00:01:55.000
at three milliseconds, we'd really appreciate that, right?


00:01:55.000 --> 00:01:56.760
And they'll actually rent servers


00:01:56.760 --> 00:01:59.680
that are nearly co-located to the stock market


00:01:59.680 --> 00:02:02.680
to reduce the actual latency or set up alternate


00:02:02.680 --> 00:02:04.120
direct connections over microwaves.


00:02:04.120 --> 00:02:05.960
There's all kinds of crazy stuff.


00:02:05.960 --> 00:02:08.600
And so if you can go from minutes to seconds,


00:02:08.600 --> 00:02:09.960
that already seems like it would make


00:02:09.960 --> 00:02:11.000
a big difference to these folks.


00:02:11.000 --> 00:02:13.960
- Yeah, and also being able to go from minutes to seconds


00:02:13.960 --> 00:02:16.160
and while incorporating more data.


00:02:16.160 --> 00:02:17.720
- Yeah, super cool.


00:02:17.720 --> 00:02:19.720
- I'm imagining walking through the trading floor


00:02:19.720 --> 00:02:22.640
and seeing some guy in a hoodie


00:02:22.640 --> 00:02:24.760
sitting with a laptop on the floor.


00:02:24.760 --> 00:02:28.280
I mean, I don't understand this, but whatever.


00:02:28.280 --> 00:02:30.220
- Five years ago, that person would have been arrested.


00:02:30.220 --> 00:02:32.600
Now people are like, hey, I need some help, man.


00:02:32.600 --> 00:02:35.160
Can you give me some advice on this trade?


00:02:35.160 --> 00:02:36.000
- Yeah.


00:02:36.000 --> 00:02:37.560
- I have a little personal experience with this,


00:02:37.560 --> 00:02:40.180
Python replacing Excel in banking and trading.


00:02:40.180 --> 00:02:41.160
Can't talk about the details,


00:02:41.160 --> 00:02:43.880
but I did teach a class to a bunch of folks


00:02:43.880 --> 00:02:47.160
working on the European stock market,


00:02:47.160 --> 00:02:50.000
and they actually couldn't even take the class


00:02:50.000 --> 00:02:51.840
during the day 'cause they had to be there for a while,


00:02:51.840 --> 00:02:54.520
the market was open, so we had the class in the evening


00:02:54.520 --> 00:02:56.500
for a week over there,


00:02:56.500 --> 00:02:58.400
and they were all really into learning Python


00:02:58.400 --> 00:03:00.840
because they had been trying to analyze how their day went


00:03:00.840 --> 00:03:02.760
and do this kind of analysis that you're talking about


00:03:02.760 --> 00:03:04.800
in Excel, and they're just like, we can't do this anymore,


00:03:04.800 --> 00:03:06.400
we have to get better tools,


00:03:06.400 --> 00:03:08.320
and Python was the answer for them as well.


00:03:08.320 --> 00:03:09.160
Pretty cool.


00:03:09.160 --> 00:03:10.000
- Oh, that's great.


00:03:10.000 --> 00:03:10.840
Interesting.


00:03:10.840 --> 00:03:11.660
- Yeah.


00:03:11.660 --> 00:03:13.880
Another thing that I think is really, really good news


00:03:13.880 --> 00:03:16.360
is something that GitHub just announced.


00:03:16.360 --> 00:03:17.960
GitHub has announced a ton of things.


00:03:17.960 --> 00:03:20.240
While you were not with us last week


00:03:20.240 --> 00:03:21.940
when we recorded in Florida,


00:03:21.940 --> 00:03:25.480
we talked about how GitHub has added code navigation


00:03:25.480 --> 00:03:29.320
to all the source code there, much of the source code.


00:03:29.320 --> 00:03:33.120
You go in there and click on functions and classes


00:03:33.120 --> 00:03:34.720
and say go to definition in Python,


00:03:34.720 --> 00:03:36.080
and that's pretty awesome.


00:03:36.080 --> 00:03:39.680
So give it a week, and GitHub launches Security Lab


00:03:39.680 --> 00:03:42.340
to help secure the open source ecosystem.


00:03:42.340 --> 00:03:43.180
- Wow.


00:03:43.180 --> 00:03:44.760
- So you've probably heard about bug bounties


00:03:44.760 --> 00:03:48.840
and like these bounties paid out to security researchers before, I would guess.


00:03:48.840 --> 00:03:49.160
Yeah.


00:03:49.160 --> 00:03:49.640
Yeah.


00:03:49.640 --> 00:03:53.240
So it's pretty much like that is my understanding of it.


00:03:53.240 --> 00:03:59.560
So it's like a bug bounty program to go and find bugs in open source libraries.


00:03:59.560 --> 00:04:05.240
But what's kind of cool is it seems like the folks like paying out that money


00:04:05.240 --> 00:04:07.080
are not the open source projects, right?


00:04:07.080 --> 00:04:10.120
Like Apple might pay out a huge amount of money,


00:04:10.120 --> 00:04:15.000
like $100,000 for finding a big vulnerability in iOS or Microsoft


00:04:15.000 --> 00:04:20.040
might or whoever, but who's going to pay to find that security bug in


00:04:20.040 --> 00:04:22.520
Flask or wherever it is, right?


00:04:22.520 --> 00:04:23.080
All right.


00:04:23.080 --> 00:04:27.840
It seems like that this is to pay for those types of things.


00:04:27.840 --> 00:04:32.080
So it says organizations as well as individual security researchers can


00:04:32.080 --> 00:04:36.160
join a bug bounty program with rewards of up to $3,000 is available to


00:04:36.160 --> 00:04:39.680
compensate bug hunters for the time they put into searching for vulnerabilities


00:04:39.680 --> 00:04:40.680
in open source projects.


00:04:40.680 --> 00:04:41.680
Oh, that's neat.


00:04:41.680 --> 00:04:42.680
Cool, right?


00:04:42.680 --> 00:04:43.680
Yeah.


00:04:43.680 --> 00:04:44.680
Yeah.


00:04:44.680 --> 00:04:45.680
So apparently this has been in beta since for a little while.


00:04:45.680 --> 00:04:46.680
When was it exactly?


00:04:46.680 --> 00:04:49.280
A little while, not very long.


00:04:49.280 --> 00:04:53.360
Anyway, the founding members who were part of it have already found, reported, and helped


00:04:53.360 --> 00:04:58.080
fix more than 100 security flaws already across the open source ecosystem.


00:04:58.080 --> 00:05:00.120
That's pretty cool.


00:05:00.120 --> 00:05:05.240
Another thing that's interesting is the bug report, in order to count, must contain a


00:05:05.240 --> 00:05:10.240
a code QL, like SQL, but code QL or something.


00:05:10.240 --> 00:05:14.920
I don't know, code QL, which is an open source tool


00:05:14.920 --> 00:05:17.960
that GitHub released at the same time.


00:05:17.960 --> 00:05:20.320
Remember we talked about their semantic code analysis engine


00:05:20.320 --> 00:05:22.680
and what it does is basically this is a query


00:05:22.680 --> 00:05:27.200
that runs against source code that will uncover


00:05:27.200 --> 00:05:30.200
the vulnerabilities in dependent projects.


00:05:30.200 --> 00:05:31.040
- Okay.


00:05:31.040 --> 00:05:33.280
- So if I find a bug in Flask, I don't know if there is one,


00:05:33.280 --> 00:05:34.960
but let's just say I'm just picking a random project.


00:05:34.960 --> 00:05:39.600
find a bug in Flask and I submit this, I submit a query to GitHub so that they


00:05:39.600 --> 00:05:43.780
can go find all the projects that depend on Flask that have out-of-date versions


00:05:43.780 --> 00:05:47.740
of Flask that need to also subsequently receive warnings to get their stuff


00:05:47.740 --> 00:05:52.920
updated. So do they then notify all these the other maintainers? Yes, so if you


00:05:52.920 --> 00:05:57.300
look at that article there's like some screenshots of what it gets. So they will


00:05:57.300 --> 00:06:02.180
get the actual project will get an automated pull request that fixes the


00:06:02.180 --> 00:06:05.980
security vulnerability, maybe it bumps the requirements pinned version to


00:06:05.980 --> 00:06:10.820
something where it's fixed or something, right? It gets the PR to automatically


00:06:10.820 --> 00:06:17.380
fix it and then there's also a button where they can publish an advisory out


00:06:17.380 --> 00:06:22.140
to from that repository to dependent repositories and they could also request


00:06:22.140 --> 00:06:27.860
a CVE which is like a vulnerability official number to be recognized as an


00:06:27.860 --> 00:06:29.900
an actual issue.


00:06:29.900 --> 00:06:32.740
So GitHub became, what was the term they used?


00:06:32.740 --> 00:06:37.740
A CVE numbering authority, a CNA of course,


00:06:37.740 --> 00:06:40.540
so that they can actually issue these vulnerability numbers


00:06:40.540 --> 00:06:44.220
to be understood and referenced as unique IDs


00:06:44.220 --> 00:06:46.780
across the security landscape.


00:06:46.780 --> 00:06:47.620
- Interesting.


00:06:47.620 --> 00:06:49.860
- Yeah, so all this stuff is integrated into GitHub.


00:06:49.860 --> 00:06:51.860
So GitHub, the researchers find the issue


00:06:51.860 --> 00:06:53.860
in the main project, the main project gets a PR,


00:06:53.860 --> 00:06:58.340
the main project can then also push out these warnings


00:06:58.340 --> 00:07:01.540
to other folks and request CVEs for their projects.


00:07:01.540 --> 00:07:02.380
That's pretty cool, right?


00:07:02.380 --> 00:07:03.900
- Yeah, open source is growing up.


00:07:03.900 --> 00:07:07.620
- Yeah, it totally is, and it seems like it's pretty solid


00:07:07.620 --> 00:07:10.340
for all the folks working on it.


00:07:10.340 --> 00:07:13.060
It doesn't seem like it requires much of the maintainers.


00:07:13.060 --> 00:07:15.060
It's more like there's this bug bounding program


00:07:15.060 --> 00:07:16.460
from what I can tell.


00:07:16.460 --> 00:07:19.180
And also, they threw in there right at the end of this,


00:07:19.180 --> 00:07:22.180
GitHub also updated the token scanning,


00:07:22.180 --> 00:07:26.140
an in-house service that scans for API keys,


00:07:26.140 --> 00:07:29.820
like AWS access keys or whatever,


00:07:29.820 --> 00:07:31.820
that have been accidentally left inside a source code.


00:07:31.820 --> 00:07:32.780
- Oh, that's good.


00:07:32.780 --> 00:07:33.900
That's really good.


00:07:33.900 --> 00:07:35.140
- Yeah, it'd be pretty nice to like,


00:07:35.140 --> 00:07:36.520
you probably didn't mean this.


00:07:36.520 --> 00:07:38.940
Click this button to make this go away.


00:07:38.940 --> 00:07:40.380
Anyway, I think this is really cool.


00:07:40.380 --> 00:07:43.320
I think this is just plumbing


00:07:43.320 --> 00:07:45.300
to make open source more secure, and I like that.


00:07:45.300 --> 00:07:49.180
- Yeah, and also just to be able to have companies


00:07:49.180 --> 00:07:52.360
but money at open source projects to keep them fixed.


00:07:52.360 --> 00:07:56.960
And it's not necessarily trying to get the official


00:07:56.960 --> 00:07:59.640
maintainer to do it, but to have some incentive


00:07:59.640 --> 00:08:03.440
for everybody else to watch these things.


00:08:03.440 --> 00:08:04.280
So that's great.


00:08:04.280 --> 00:08:05.300
- Absolutely.


00:08:05.300 --> 00:08:07.960
Yeah, these bug bounty programs have been working


00:08:07.960 --> 00:08:09.080
really well for the industry,


00:08:09.080 --> 00:08:11.920
and it's cool to see GitHub putting that in there.


00:08:11.920 --> 00:08:14.920
Also cool is DigitalOcean, not just for sponsoring the show,


00:08:14.920 --> 00:08:16.600
but because they have awesome infrastructure


00:08:16.600 --> 00:08:18.880
and awesome product, and we use them for our stuff.


00:08:18.880 --> 00:08:22.880
So let me tell you about a new thing that they have generally available,


00:08:22.880 --> 00:08:25.240
memory optimized droplets.


00:08:25.240 --> 00:08:28.240
And if you have a memory heavy workload,


00:08:28.240 --> 00:08:31.600
basically this is the best way to get tons of memory


00:08:31.600 --> 00:08:33.640
in a droplet or a virtual machine.


00:08:33.640 --> 00:08:37.800
So you can get 8 gigs of RAM for each dedicated CPU.


00:08:37.800 --> 00:08:43.880
And then it goes from 2 CPUs all the way up to enough to get you 256 gigs of RAM,


00:08:43.880 --> 00:08:45.800
whatever that math works out to be.


00:08:45.800 --> 00:08:48.240
And it's really good for high memory applications


00:08:48.240 --> 00:08:51.240
like high performance SQL or NoSQL databases


00:08:51.240 --> 00:08:54.260
in memory caches like Redis or indexes,


00:08:54.260 --> 00:08:56.800
some kind of large data analysis runtime,


00:08:56.800 --> 00:08:57.640
something like that.


00:08:57.640 --> 00:09:01.220
So check those out at pythonbytes.fm/digitalocean.


00:09:01.220 --> 00:09:02.240
Really good stuff over there.


00:09:02.240 --> 00:09:03.640
Lots of cool things coming.


00:09:03.640 --> 00:09:05.560
Brian, what you got next for us?


00:09:05.560 --> 00:09:08.240
- Well, we have a couple of friends of ours,


00:09:08.240 --> 00:09:11.800
Bob Belderbos and Julian Sequeira.


00:09:11.800 --> 00:09:15.720
They run a thing called PyBytes and PyBytes challenges.


00:09:15.720 --> 00:09:18.680
not affiliated with Python bytes, just sounds similar.


00:09:18.680 --> 00:09:21.800
- It's the I versus the Y. It's not even close to the same thing.


00:09:21.800 --> 00:09:31.320
- It's P-Y-B-I-T dot yes. Anyway, I enjoy it. It's a challenges platform where you can just sort of,


00:09:31.320 --> 00:09:37.720
there's a few of them for free, but it is a paid service. It's one of those things where


00:09:37.720 --> 00:09:44.120
they give you like kind of a written assignment and some test code already there, and it checks


00:09:44.120 --> 00:09:48.840
to see and then you have to fill in like the body of a function to make all the tests pass.


00:09:48.840 --> 00:09:53.560
It's a kind of a brain teaser sort of thing. It's a fun way to keep up, make sure that you're


00:09:53.560 --> 00:09:59.080
practicing out of the box Python stuff that you don't normally do. That's what I use it for.


00:09:59.080 --> 00:10:05.240
But the news is they just added test coverage, so or tests testing. So in the past you were,


00:10:05.240 --> 00:10:11.320
you didn't write the tests, they wrote them to evaluate your code. But they've added a few test


00:10:11.320 --> 00:10:16.360
challenges where they write the code and you have to write the test code to check that code.


00:10:16.360 --> 00:10:20.440
And it's kind of cool, but they were, they actually talked to me about this as well as


00:10:20.440 --> 00:10:25.080
to try to pick my ideas, but they came up with it on their own. How do you evaluate


00:10:25.080 --> 00:10:30.440
if the test code is good? So if you evaluate if your source code is good by running tests,


00:10:30.440 --> 00:10:33.880
but the other way around is a little difficult. Yeah. How do you test the tests?


00:10:33.880 --> 00:10:38.680
Yeah. So they did it a couple of ways. They're using coverage up high to make sure that you're


00:10:38.680 --> 00:10:44.680
hitting 100% coverage. And, you know, yes, it's debatable for a large project of whether you


00:10:44.680 --> 00:10:50.120
should get 100% coverage, but for a small function or some small bit of code, it should, you should


00:10:50.120 --> 00:10:55.960
be able to hit 100% coverage. That's a nice thing. The other one is mutation testing. So


00:10:55.960 --> 00:11:05.160
there's a couple projects we've heard of, MutMut and MutPy, M-U-T-P-Y. And I think we talked about


00:11:05.160 --> 00:11:11.480
this earlier but Ned Batchelder did write an article about his experience with mutmut,


00:11:11.480 --> 00:11:18.520
but PyBytes is using mutpy and what it does is it takes your the source code and changes


00:11:18.520 --> 00:11:25.240
something about it and mutpy works at the level of the abstract syntax tree and it changes like


00:11:25.240 --> 00:11:31.160
for instance a division operator to a multiplication or or changes a string to some other string or


00:11:31.160 --> 00:11:35.640
something and then it runs the tests again and the idea is you want your


00:11:35.640 --> 00:11:39.520
tests to be able to it makes a whole bunch of mutants of the code and you


00:11:39.520 --> 00:11:44.240
want the test to be able to kill off all the mutants except for the original


00:11:44.240 --> 00:11:48.560
that's how they're testing it's kind of a neat idea but it's fun to play with it


00:11:48.560 --> 00:11:52.560
is an interesting question to ask how do you test the test and I think this is


00:11:52.560 --> 00:11:57.080
pretty creative well done Bob and Julie I haven't used a mutation testing a lot


00:11:57.080 --> 00:12:00.920
I've tried it out but I haven't used it like for projects.


00:12:00.920 --> 00:12:03.920
The idea of using it in a training situation


00:12:03.920 --> 00:12:06.120
is a novel thing I haven't heard of before


00:12:06.120 --> 00:12:08.280
and I think that's a cool idea to be able


00:12:08.280 --> 00:12:11.620
to try to test somebody's test code.


00:12:11.620 --> 00:12:14.080
- Yeah, I agree and like you said,


00:12:14.080 --> 00:12:17.100
100% code coverage for a project that's real is challenging.


00:12:17.100 --> 00:12:19.360
I think also maybe mutation testing


00:12:19.360 --> 00:12:21.480
for a project that's real is tricky.


00:12:21.480 --> 00:12:24.080
'Cause maybe it changes like the print statement


00:12:24.080 --> 00:12:25.680
that shows what the title of the app is.


00:12:25.680 --> 00:12:27.760
who cares, no one's going to check for that, right?


00:12:27.760 --> 00:12:28.600
- Right.


00:12:28.600 --> 00:12:29.640
- But in this case, where pretty much


00:12:29.640 --> 00:12:31.400
it's a very small focused bit of code


00:12:31.400 --> 00:12:33.000
and you're supposed to test it,


00:12:33.000 --> 00:12:35.520
presumably any changes to that


00:12:35.520 --> 00:12:37.640
are going to appear in the couple of tests you write.


00:12:37.640 --> 00:12:38.480
- Yep.


00:12:38.480 --> 00:12:39.300
- Nice, now speaking of tests,


00:12:39.300 --> 00:12:41.460
I feel like I stole this one from you, Brian,


00:12:41.460 --> 00:12:43.560
just out of the universe, I mean.


00:12:43.560 --> 00:12:47.480
So I want to talk about PyHttpTest.


00:12:47.480 --> 00:12:50.480
Now this one comes from Florian Dalets,


00:12:50.480 --> 00:12:55.280
and he actually sent in two things for this week,


00:12:55.280 --> 00:12:57.760
which they were both excellent, so I'm gonna cover them.


00:12:57.760 --> 00:13:01.280
This is a command line tool for HTTP tests


00:13:01.280 --> 00:13:02.960
against RESTful APIs.


00:13:02.960 --> 00:13:03.800
- Okay.


00:13:03.800 --> 00:13:04.940
- All right, so the idea is, basically,


00:13:04.940 --> 00:13:08.440
I want to test some RESTful endpoint,


00:13:08.440 --> 00:13:10.640
and instead of going over and say,


00:13:10.640 --> 00:13:12.280
okay, I'm gonna create, I'm gonna get requests,


00:13:12.280 --> 00:13:13.760
I'm gonna do a get, I'm gonna get the dictionary,


00:13:13.760 --> 00:13:15.760
I'm gonna verify, like, this thing is in the dictionary,


00:13:15.760 --> 00:13:19.520
and so on, what you basically do is you just write


00:13:19.520 --> 00:13:23.120
a simple little JSON document for each test


00:13:23.120 --> 00:13:24.000
that you want to run.


00:13:24.000 --> 00:13:24.840
- Oh, cool.


00:13:24.840 --> 00:13:27.640
Other than it has things like what is the name of the test?


00:13:27.640 --> 00:13:29.520
What HTTP verb do you want to use?


00:13:29.520 --> 00:13:30.520
What is the URL?


00:13:30.520 --> 00:13:32.880
A combination between host and endpoint.


00:13:32.880 --> 00:13:34.360
The headers you need to pass.


00:13:34.360 --> 00:13:35.760
A query string you need to pass.


00:13:35.760 --> 00:13:36.960
And then you get back a report.


00:13:36.960 --> 00:13:42.840
It actually gives you a cool report in a like columnar style validation that lets you assert


00:13:42.840 --> 00:13:43.840
things about it.


00:13:43.840 --> 00:13:45.840
Yeah, there's a handful of these types of things.


00:13:45.840 --> 00:13:49.320
And I think it's kind of a neat way to describe API testing.


00:13:49.320 --> 00:13:51.320
Yeah, it seems really cool.


00:13:51.320 --> 00:13:55.400
There's a bunch of neat little libraries that are used as well, like Tabulate, which is


00:13:55.400 --> 00:13:59.760
a cool way to print the tabular data that they're showing there, and things like that.


00:13:59.760 --> 00:14:01.400
But yeah, I like this project.


00:14:01.400 --> 00:14:06.480
If your job is to test a bunch of HTTP endpoints, this is pretty cool.


00:14:06.480 --> 00:14:07.480
Yeah, neat.


00:14:07.480 --> 00:14:08.480
Nice.


00:14:08.480 --> 00:14:09.480
All right, what else?


00:14:09.480 --> 00:14:10.480
What's next?


00:14:10.480 --> 00:14:11.480
Oh, next.


00:14:11.480 --> 00:14:12.480
X-Ray.


00:14:12.480 --> 00:14:14.800
This was suggested by a listener.


00:14:14.800 --> 00:14:16.360
I think it's Guido Imperial.


00:14:16.360 --> 00:14:17.360
Yep, I agree.


00:14:17.360 --> 00:14:18.360
Thanks, Guido.


00:14:18.360 --> 00:14:19.720
Sent it in.


00:14:19.720 --> 00:14:23.140
haven't covered it before and actually I didn't know about it before. People in


00:14:23.140 --> 00:14:26.520
the data science community probably do because it seems like pretty powerful


00:14:26.520 --> 00:14:32.440
but the the gist of it is it's built it uses and builds on top of NumPy and


00:14:32.440 --> 00:14:38.900
pandas and Dask to offer in-dimensional arrays. You can do in-dimensional arrays


00:14:38.900 --> 00:14:45.160
in pandas already, I believe, but the one of the neat things about these is


00:14:45.160 --> 00:14:49.240
that they're they've got labels on them so they're self-describing and they've


00:14:49.240 --> 00:14:54.320
got indexes. There's a few data types within it. There's a data, so there's X-


00:14:54.320 --> 00:14:59.240
array, data array. The data array is the n-dimensional array but it has metadata


00:14:59.240 --> 00:15:04.560
like names and labels for the dimensions. And you can also have


00:15:04.560 --> 00:15:09.360
coordinates and attributes. And coordinates are essentially like the


00:15:09.360 --> 00:15:15.160
tick elements for the different axes. And then attributes, the data array doesn't


00:15:15.160 --> 00:15:21.720
really do anything with the attributes, but it's a way to consistently keep data with data.


00:15:21.720 --> 00:15:27.400
So if you have to keep track of some extra things like, you know, where was this data collected or


00:15:27.400 --> 00:15:34.920
really anything, you can add them as an attribute. And then a data set is a dictionary-like collection


00:15:34.920 --> 00:15:41.960
of data array elements. I was playing with this and it's pretty darn cool. One of the nice things


00:15:41.960 --> 00:15:47.640
about using it is just keeping all of that the dimension names together. So if you have a


00:15:47.640 --> 00:15:52.200
multi-dimensional array, even just like a three-dimensional array, it's sometimes hard to


00:15:52.200 --> 00:15:59.080
keep track of, you know, which axis is which and this is all together. But it's not just packaged


00:15:59.080 --> 00:16:06.680
together. You can also do things like use the label names and the axi names and even axi element


00:16:06.680 --> 00:16:09.920
at the coordinates, they don't actually need to be numbers.


00:16:09.920 --> 00:16:13.920
For instance, you could have the months of the year


00:16:13.920 --> 00:16:17.180
or the letters of the alphabet be coordinates.


00:16:17.180 --> 00:16:20.800
You can use those as selectors to be able to select rows and


00:16:20.800 --> 00:16:24.600
columns and those return different data array elements.


00:16:24.600 --> 00:16:27.440
The data array elements also can be used in algorithms.


00:16:27.440 --> 00:16:30.580
They can just be passed directly to Pandas algorithms.


00:16:30.580 --> 00:16:31.840
These are pretty cool.


00:16:31.840 --> 00:16:33.360
>> Yeah, it looks a little bit like it's


00:16:33.360 --> 00:16:35.080
taken some of the features from NumPy,


00:16:35.080 --> 00:16:36.400
some of the features from Pandas,


00:16:36.400 --> 00:16:40.720
some of the features from Dask and sort of brings them together into one package.


00:16:40.720 --> 00:16:44.920
So when I was going through some of the tutorials I was to get somebody to talk


00:16:44.920 --> 00:16:49.680
about this it was like a three-dimensional array in I think it's


00:16:49.680 --> 00:16:54.700
in pandas is used to be is considered a panel but when I went to look at the


00:16:54.700 --> 00:16:58.640
panel information it looks like panels are being deprecated for something else


00:16:58.640 --> 00:17:04.720
so even in the pandas documentation it was pointing to this x-ray project so oh


00:17:04.720 --> 00:17:05.560
- Oh, interesting.


00:17:05.560 --> 00:17:06.960
- I think the people in the pandas community


00:17:06.960 --> 00:17:08.320
are definitely familiar with it,


00:17:08.320 --> 00:17:11.160
but if you're using pandas kind of on the side


00:17:11.160 --> 00:17:12.920
and you're not really in it all the time,


00:17:12.920 --> 00:17:13.880
this might be helpful.


00:17:13.880 --> 00:17:16.360
- Now, previously you spoke about Bob Belderbos,


00:17:16.360 --> 00:17:19.600
and I said we got this item from Florian Dalitz.


00:17:19.600 --> 00:17:22.120
I'm gonna bring those two things together in this next one.


00:17:22.120 --> 00:17:26.600
So Bob had introduced us to Carbon, remember that?


00:17:26.600 --> 00:17:27.440
- Yeah.


00:17:27.440 --> 00:17:29.600
- Carbon is like sort of beautiful screenshots


00:17:29.600 --> 00:17:31.200
for colored code, right?


00:17:31.200 --> 00:17:36.480
code, it's like a mock bow, little like shell or whatever editor.


00:17:36.480 --> 00:17:38.680
Like you don't use screenshots of real editors.


00:17:38.680 --> 00:17:42.040
You just create that with carbon@carbon.nav.sh.


00:17:42.040 --> 00:17:42.560
And that's cool.


00:17:42.560 --> 00:17:44.680
But those are generally static.


00:17:44.680 --> 00:17:48.320
So Florian sent in this thing called term to SVG.


00:17:48.320 --> 00:17:53.040
And it's a cool way to create animated terminal.


00:17:53.040 --> 00:17:54.300
Yes.


00:17:54.300 --> 00:17:58.400
So instead of going all the way to create like full on screencasts of your


00:17:59.360 --> 00:18:04.200
you can run this in your terminal and then you just do whatever you want to do


00:18:04.200 --> 00:18:09.880
in the terminal and it captures it perfectly into SVG and then you get


00:18:09.880 --> 00:18:13.960
convert that out to some kind of animated thing like I guess the SVG


00:18:13.960 --> 00:18:17.640
itself is animated so you just show that in the browser or wherever you want to


00:18:17.640 --> 00:18:22.480
put it. Isn't that cool? Yeah very cool. You basically just type term to SVG once you


00:18:22.480 --> 00:18:25.160
have it installed and it starts recording you do a bunch of stuff and


00:18:25.160 --> 00:18:28.840
and then there's a way to get out of its recording status.


00:18:28.840 --> 00:18:29.680
So it's pretty cool.


00:18:29.680 --> 00:18:33.080
It produces like lightweight, clean looking animations,


00:18:33.080 --> 00:18:34.680
or you can even do still frames


00:18:34.680 --> 00:18:37.200
if you want for like a project page.


00:18:37.200 --> 00:18:39.680
So instead of, like carbon is cool


00:18:39.680 --> 00:18:42.160
'cause I can put in the text and the code I wanna show up,


00:18:42.160 --> 00:18:43.520
but maybe it doesn't have,


00:18:43.520 --> 00:18:45.660
here is what the progress bar


00:18:45.660 --> 00:18:49.480
and then the install steps with the spinner look like, right?


00:18:49.480 --> 00:18:53.480
It doesn't naturally capture what actually happens


00:18:53.480 --> 00:18:56.840
when that code or those terminal commands execute.


00:18:56.840 --> 00:19:01.040
So this one, it has color themes, animation controls,


00:19:01.040 --> 00:19:02.160
all sorts of good stuff.


00:19:02.160 --> 00:19:04.440
And yeah, it's pretty cool.


00:19:04.440 --> 00:19:07.040
So there's a, probably if you want to,


00:19:07.040 --> 00:19:09.160
this sounds interesting, you want to check out the examples.


00:19:09.160 --> 00:19:10.760
So there's a whole page of examples


00:19:10.760 --> 00:19:12.400
and there's a bunch of different stuff happening.


00:19:12.400 --> 00:19:14.080
You can just look through there.


00:19:14.080 --> 00:19:15.560
And I think there's also templates


00:19:15.560 --> 00:19:17.840
that configure how it records and stuff.


00:19:17.840 --> 00:19:19.320
So there's a bunch of predefined templates


00:19:19.320 --> 00:19:20.840
that you can go play with to get started from.


00:19:20.840 --> 00:19:23.120
- That'd be really cool for like a tutorial site


00:19:23.120 --> 00:19:25.200
or something to-- - Yes, exactly.


00:19:25.200 --> 00:19:26.160
- Yeah. - Or even,


00:19:26.160 --> 00:19:28.160
or if you have a project, right?


00:19:28.160 --> 00:19:30.360
Like if you're the maintainer of pipX,


00:19:30.360 --> 00:19:31.940
it'd be cool to use this to create a way


00:19:31.940 --> 00:19:33.760
to like show how awesome pipX is.


00:19:33.760 --> 00:19:35.960
Like this step, then this step, and then boom, right?


00:19:35.960 --> 00:19:37.600
Just put that right in your GitHub readme.


00:19:37.600 --> 00:19:40.000
- Yeah, I love it when there's little animated things


00:19:40.000 --> 00:19:41.080
in the readme.


00:19:41.080 --> 00:19:43.920
So when you go to GitHub, you just see that.


00:19:43.920 --> 00:19:48.200
- Yeah, you and I, we spend an inordinate amount of time


00:19:48.200 --> 00:19:50.480
jumping into new projects and going,


00:19:50.480 --> 00:19:51.320
is it interesting?


00:19:51.320 --> 00:19:52.320
Yes or no?


00:19:52.320 --> 00:19:53.480
Why is it interesting, right?


00:19:53.480 --> 00:19:56.180
And this kind of stuff is the thing that just goes,


00:19:56.180 --> 00:19:59.420
after 10 seconds I knew I wanted to learn about it, right?


00:19:59.420 --> 00:20:01.120
It really makes a difference and it's easy.


00:20:01.120 --> 00:20:02.480
- Yeah, very cool.


00:20:02.480 --> 00:20:03.480
Definitely check this out.


00:20:03.480 --> 00:20:04.820
- Yeah, for sure.


00:20:04.820 --> 00:20:05.720
All right, yeah, so that's a good one.


00:20:05.720 --> 00:20:08.680
People can check that out, a term to SVG.


00:20:08.680 --> 00:20:09.520
Pretty cool.


00:20:09.520 --> 00:20:10.560
All right, well that's it for our main items.


00:20:10.560 --> 00:20:11.400
What else you got?


00:20:11.400 --> 00:20:13.400
- I have one bit of extra news,


00:20:13.400 --> 00:20:18.320
is that pytest 5.3.0 was released the other day.


00:20:18.320 --> 00:20:21.880
And it is mostly, there's some cool features.


00:20:21.880 --> 00:20:23.820
And if you, you know, pytest nerds,


00:20:23.820 --> 00:20:25.020
definitely check it out.


00:20:25.020 --> 00:20:26.920
But I wanted to bring it up because I think a lot of people


00:20:26.920 --> 00:20:28.980
that just use pytest and are using it


00:20:28.980 --> 00:20:31.480
with a continuous integration systems


00:20:31.480 --> 00:20:32.600
should pay attention to this


00:20:32.600 --> 00:20:35.840
because the JUnit XML output,


00:20:35.840 --> 00:20:37.520
they've changed the default.


00:20:37.520 --> 00:20:41.580
So the default format, there's an XML output has,


00:20:41.580 --> 00:20:44.040
there's an old version and a new version.


00:20:44.040 --> 00:20:46.000
The new version has some more information,


00:20:46.000 --> 00:20:48.960
but they wanted to make sure that people know about this.


00:20:48.960 --> 00:20:50.900
So if you run it, you'll get a warning


00:20:50.900 --> 00:20:53.220
and it's not really a warning, it just says,


00:20:53.220 --> 00:20:55.740
it's just to make you aware that there's a particular


00:20:55.740 --> 00:20:57.860
format that's being deprecated.


00:20:57.860 --> 00:21:01.740
So eventually in the 5.4 release,


00:21:01.740 --> 00:21:03.180
they won't support the old format.


00:21:03.180 --> 00:21:06.500
So if you see this, I encourage anybody using pytest


00:21:06.500 --> 00:21:09.700
and continuous integration to read the change log


00:21:09.700 --> 00:21:12.320
and understand what's going on and make sure they're ready


00:21:12.320 --> 00:21:15.460
to either pin pytest or change their system.


00:21:15.460 --> 00:21:18.100
- Yeah, it's a good thing to put on people's radar for sure.


00:21:18.100 --> 00:21:20.180
- Okay, how about you, Michael?


00:21:20.180 --> 00:21:21.180
Any extra spits?


00:21:21.180 --> 00:21:22.420
- Yeah, I got a bunch for you.


00:21:22.420 --> 00:21:24.780
Actually, a couple of things.


00:21:24.780 --> 00:21:28.420
PyCon, PyCon's awesome, we love that each year.


00:21:28.420 --> 00:21:30.860
And this year it's going to be in Pittsburgh


00:21:30.860 --> 00:21:33.520
for the first of its two years in that city.


00:21:33.520 --> 00:21:36.220
And PyCon registration is now open.


00:21:36.220 --> 00:21:37.820
You can go and register, get your ticket


00:21:37.820 --> 00:21:38.660
before it sells out.


00:21:38.660 --> 00:21:39.480
- Oh, cool.


00:21:39.480 --> 00:21:41.080
- Yeah, that comes to us from Jacqueline Wilson,


00:21:41.080 --> 00:21:43.100
so thank you very much for sending that in.


00:21:43.100 --> 00:21:46.100
And then also I saw, I can't remember where I saw this,


00:21:46.100 --> 00:21:48.420
somewhere, actually I think somewhere funky


00:21:48.420 --> 00:21:50.340
like a flip board or something.


00:21:50.340 --> 00:21:54.540
So Facebook has now decided that Microsoft's


00:21:54.540 --> 00:21:57.740
Visual Studio Code is their default development platform.


00:21:57.740 --> 00:21:58.820
That's a little surprising to me.


00:21:58.820 --> 00:21:59.980
- Yeah, interesting.


00:21:59.980 --> 00:22:02.540
- Yeah, that's an article on ZDNet.


00:22:02.540 --> 00:22:04.840
And they're also helping Microsoft improve


00:22:04.840 --> 00:22:08.300
the remote development experience in VS Code.


00:22:08.300 --> 00:22:11.020
Cats, dogs, all live in the same place.


00:22:11.020 --> 00:22:11.860
(laughing)


00:22:11.860 --> 00:22:12.700
- Okay.


00:22:12.700 --> 00:22:13.520
- Yeah, this is cool.


00:22:13.520 --> 00:22:16.160
I suspect that things like Vim and Emacs and stuff


00:22:16.160 --> 00:22:18.100
probably have a strong representation there,


00:22:18.100 --> 00:22:21.220
but apparently it's all about Visual Studio Code over there now.


00:22:21.220 --> 00:22:21.900
Anything else?


00:22:21.900 --> 00:22:23.900
Yes, two more things. Very exciting.


00:22:23.900 --> 00:22:27.660
So if the release schedule lines up correctly


00:22:27.660 --> 00:22:30.380
and the future extends as I expected,


00:22:30.380 --> 00:22:35.100
this should be Wednesday before Thanksgiving, right?


00:22:35.100 --> 00:22:37.100
And that would mean


00:22:37.100 --> 00:22:40.940
the day or two after that is going to be Black Friday.


00:22:40.940 --> 00:22:42.300
So I just want to point out that


00:22:42.300 --> 00:22:46.460
Talk Python Training is going to have a really awesome Black Friday sale.


00:22:46.460 --> 00:22:49.220
get a whole bunch of stuff on buying all the courses,


00:22:49.220 --> 00:22:51.220
but also we're doing some special things


00:22:51.220 --> 00:22:54.220
to support the PSF and other stuff,


00:22:54.220 --> 00:22:57.540
some surprises in there that I suspect people won't guess at


00:22:57.540 --> 00:23:00.060
and there's no way people are gonna guess what is there.


00:23:00.060 --> 00:23:03.780
So check it out over at training.docpython.fm,


00:23:03.780 --> 00:23:04.740
but you gotta act right away


00:23:04.740 --> 00:23:06.660
'cause it's only gonna be there for like four days.


00:23:06.660 --> 00:23:07.500
It's a big deal.


00:23:07.500 --> 00:23:08.340
So check that out.


00:23:08.340 --> 00:23:10.940
And also we have a new course coming,


00:23:10.940 --> 00:23:12.980
Python for the .NET Developer.


00:23:12.980 --> 00:23:15.140
So, so many people are coming from C#


00:23:15.140 --> 00:23:17.260
in the .NET world over into the Python space,


00:23:17.260 --> 00:23:19.860
I thought it would be cool to create a course


00:23:19.860 --> 00:23:22.460
that kind of gives them a big hug and holds their hand


00:23:22.460 --> 00:23:24.500
and helps them step over that divide.


00:23:24.500 --> 00:23:28.100
So it's like, do you know about ASP.NET?


00:23:28.100 --> 00:23:30.940
Here's Flask, and here's how you use it in Python.


00:23:30.940 --> 00:23:32.460
Do you know about any framework?


00:23:32.460 --> 00:23:34.420
Here's SQLAlchemy, here's how you use it in Python.


00:23:34.420 --> 00:23:36.300
Like all the things that they need


00:23:36.300 --> 00:23:38.780
or they love from C# and .NET,


00:23:38.780 --> 00:23:41.380
here's the Python equivalent and why it's awesome


00:23:41.380 --> 00:23:42.220
and how it works.


00:23:42.220 --> 00:23:44.220
- Is that one that you did or did somebody else do that?


00:23:44.220 --> 00:23:45.060
- No, no, I did that one.


00:23:45.060 --> 00:23:46.860
- 'Cause you're like the perfect person for that.


00:23:46.860 --> 00:23:48.740
- Exactly, I spent so many years doing C#


00:23:48.740 --> 00:23:50.160
and now I'm all about Python.


00:23:50.160 --> 00:23:52.800
So exactly, I figured like why don't I try to


00:23:52.800 --> 00:23:54.980
think back to the way it was for me many years ago


00:23:54.980 --> 00:23:58.300
and like sort of extend that experience back to other people.


00:23:58.300 --> 00:24:00.500
It's probably not gonna be out yet.


00:24:00.500 --> 00:24:02.780
It may be out at the time that people hear this,


00:24:02.780 --> 00:24:03.860
but it's coming really soon,


00:24:03.860 --> 00:24:05.040
so I'll just put it out there as that.


00:24:05.040 --> 00:24:05.940
- That's nice.


00:24:05.940 --> 00:24:07.780
Hey, speaking of Black Friday,


00:24:07.780 --> 00:24:10.300
I do not have any insider knowledge,


00:24:10.300 --> 00:24:14.040
but Pragmatic Publishers often does a Black Friday sale


00:24:14.040 --> 00:24:15.960
It's usually fairly steep.


00:24:15.960 --> 00:24:19.720
So if you've not picked up the Pytest book yet,


00:24:19.720 --> 00:24:21.160
and really if you're listening to this


00:24:21.160 --> 00:24:22.920
and you haven't read it yet, what's going on?


00:24:22.920 --> 00:24:23.760
- Come on.


00:24:23.760 --> 00:24:26.840
- If you haven't, maybe check out praguefrog.com


00:24:26.840 --> 00:24:29.680
and see if there's a sale.


00:24:29.680 --> 00:24:30.960
- Definitely, I'm sure there will be.


00:24:30.960 --> 00:24:32.400
It would be surprising if there weren't.


00:24:32.400 --> 00:24:33.320
Awesome.


00:24:33.320 --> 00:24:34.600
- How about a joke or two or three?


00:24:34.600 --> 00:24:35.600
- I like three jokes.


00:24:35.600 --> 00:24:36.440
- Okay.


00:24:36.440 --> 00:24:37.320
- It's a good number.


00:24:37.320 --> 00:24:41.640
So this first one is more of just a geeky STEM type of joke,


00:24:41.640 --> 00:24:43.560
but I think people will like it.


00:24:43.560 --> 00:24:48.120
So I love soda drinks, you know, Coca-Cola, Dr. Pepper,


00:24:48.120 --> 00:24:49.360
root beer, things like that.


00:24:49.360 --> 00:24:51.440
So this one, I try to not drink too much,


00:24:51.440 --> 00:24:53.040
but I do like it.


00:24:53.040 --> 00:24:56.240
But here's how that world can clash together with math.


00:24:56.240 --> 00:24:59.400
What do you get when you put root beer into a square glass?


00:24:59.400 --> 00:25:00.240
- I don't know, what?


00:25:00.240 --> 00:25:01.080
- Beer.


00:25:01.080 --> 00:25:03.440
(laughing)


00:25:03.440 --> 00:25:05.120
- I don't even get it, but it's funny.


00:25:05.120 --> 00:25:07.680
- If you take root of beer and you square it.


00:25:07.680 --> 00:25:08.760
- Oh, okay.


00:25:08.760 --> 00:25:10.080
- Right?


00:25:10.080 --> 00:25:11.080
Like the square root of beer,


00:25:11.080 --> 00:25:12.440
and then you put it in a square glass.


00:25:12.440 --> 00:25:13.360
- Okay, that was bad.


00:25:13.360 --> 00:25:14.280
What's your next one here?


00:25:14.280 --> 00:25:17.360
- Okay, what do you call an optimistic front-end developer?


00:25:17.360 --> 00:25:19.520
- I don't know, what do you call it?


00:25:19.520 --> 00:25:21.840
- A stack half full developer.


00:25:21.840 --> 00:25:22.940
- That is awesome.


00:25:22.940 --> 00:25:28.040
- Okay, now also I was gonna tell a version control joke,


00:25:28.040 --> 00:25:30.000
but they're only funny if you get them.


00:25:30.000 --> 00:25:32.640
- Get G-I-D, awesome.


00:25:32.640 --> 00:25:35.120
Those are both good, I like them, yeah, great.


00:25:35.120 --> 00:25:36.640
- Cool, well thanks again


00:25:36.640 --> 00:25:38.440
for having a nice conversation this week.


00:25:38.440 --> 00:25:39.680
- Yeah, you bet, and thanks as always.


00:25:39.680 --> 00:25:40.760
See you later, Brian. - Bye.


00:25:40.760 --> 00:25:42.480
- Thank you for listening to Python Bytes.


00:25:42.480 --> 00:25:44.920
Follow the show on Twitter via @pythonbytes,


00:25:44.920 --> 00:25:47.960
that's Python Bytes as in B-Y-T-E-S.


00:25:47.960 --> 00:25:51.160
And get the full show notes at pythonbytes.fm.


00:25:51.160 --> 00:25:52.760
If you have a news item you want featured,


00:25:52.760 --> 00:25:55.200
just visit pythonbytes.fm and send it our way.


00:25:55.200 --> 00:25:58.080
We're always on the lookout for sharing something cool.


00:25:58.080 --> 00:25:59.920
On behalf of myself and Brian Okken,


00:25:59.920 --> 00:26:01.240
this is Michael Kennedy.


00:26:01.240 --> 00:26:03.280
Thank you for listening and sharing this podcast


00:26:03.280 --> 00:26:04.880
with your friends and colleagues.

