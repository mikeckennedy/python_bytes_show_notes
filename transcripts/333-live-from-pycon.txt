00:00:00 Hey, welcome everybody and welcome. We've got a whole room full of people. We're recording this live.

00:00:05 How about we get a live from PyCon?

00:00:07 Shout out.

00:00:08 There we go. Thank you all.

00:00:11 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:16 This is episode 333, half of a beast, recorded April 21st, 2023.

00:00:24 And I am Brian Okken.

00:00:25 And I'm Michael Kennedy.

00:00:26 And we are live at PyCon US 2023.

00:00:30 Yeah, it's excellent to be here. Thanks everyone for coming. It's awesome. It's a real honor.

00:00:35 So, shall we kick off the show?

00:00:43 Let's kick off the show. I think first I'd just like maybe to get your thoughts real quick on PyCon, the Expo, people.

00:00:49 How's it feeling this year?

00:00:50 Well, it's the first time I've been back from the pandemic. I didn't show up last year, so I'm pretty excited.

00:00:55 It's really good to see people. There's people that I haven't seen in person since 2019.

00:00:59 So, it's pretty awesome. How about you?

00:01:01 Same. It's really great to reconnect with a bunch of people and see folks I haven't seen for a long time.

00:01:05 Really nice.

00:01:06 Yeah, it's been great. Plus, we've got the Python staff this year.

00:01:09 Yeah, the Python staff of Python things.

00:01:14 So, I want to talk about something that's all the rage.

00:01:17 And I do want to put that on the screen for a live stream, people as well.

00:01:20 And that is more AI chat things.

00:01:25 What do you all think about ChatGPT and all these things?

00:01:28 Is this scary or is it scary or is it awesome?

00:01:31 I'm like, oh, we're getting...

00:01:33 Yeah, all right.

00:01:34 So, honesty.

00:01:35 I think that represents how I've felt.

00:01:37 I've felt like everyone out there at different stages in this whole journey.

00:01:40 Yeah.

00:01:42 What we saw is a whole bunch of thumbs up and a lot of sideways.

00:01:46 So, we're not quite sure yet what we think of it.

00:01:48 We're not quite sure yet.

00:01:49 It's one of those things that's kind of here.

00:01:52 The cat is out of the bag.

00:01:53 We can either rail against it or find good uses for it to take advantage of it.

00:01:57 So, Microsoft has found a way to use their large language models behind OpenAI and the stuff that powers ChatGPT to help security defenders, they say.

00:02:10 Like, if I'm on the blue team trying to stop people from breaking into my company, I could use a little bit of help with that.

00:02:16 And you can already use ChatGPT for all sorts of crazy programming and security type of things, right?

00:02:25 You can say, hey, dear chat, I would love if you could help me write a phishing email that looks convincing.

00:02:31 Or I would like you to help me identify things I might test for misconfiguration Nginx files and what I might do with that, you know?

00:02:39 Those are all bad things.

00:02:41 But this project here is called Microsoft Security Copilot.

00:02:46 It says, empowering defenders at the speed of AI.

00:02:49 And so, basically what this is, is it's ChatGPT.

00:02:52 But instead of using a general purpose language model is using a cybersecurity focused large language model that understands things like, don't let me get hacked, buffer overflows, configuration files, that kind of stuff.

00:03:05 So, if you're in the space of cybersecurity, which Python is one of the most popular languages out there for cybersecurity, right?

00:03:14 Both sides of it, the good and the bad.

00:03:16 But, yeah.

00:03:18 So, basically, you give it a prompt.

00:03:20 You ask it a question about configuration file or some kind of environment.

00:03:26 And it will allow, it'll go and use that large language model.

00:03:29 And it doesn't always get it right.

00:03:31 This is one of the big challenges.

00:03:33 Maybe some of the thumbs down from you all were like, you know, this large language model made up something about the world or whatever.

00:03:41 But it was real confident.

00:03:42 It was certain it was right.

00:03:43 But it wasn't.

00:03:44 So, this has a feedback loop.

00:03:45 You can say, no, no, that's actually not misconfigured security copilot thing.

00:03:49 That was okay.

00:03:50 And here's why.

00:03:51 And so, you can have this loop that you would have with, you know, maybe with like a junior cybersecurity researcher or whatever.

00:03:59 And another thing that I don't really know how all these large language models work and all this AI stuff works.

00:04:06 Many of it, much of it seems to be, we're going to go find a bunch of other people's work and then take that.

00:04:12 We'll have a really cool system with this cool data, right?

00:04:14 Like we're going to scan repos and maybe it doesn't matter if it's GPL.

00:04:19 If we filter the GPL out through some kind of neural net or, you know, get all the Getty images.

00:04:25 And now we can create really cool pictures if you ask for it.

00:04:27 But the Getty wasn't on board with that.

00:04:29 So, this data story is kind of a little suspicious for these.

00:04:34 But with this one, they explicitly say your data does not get shared back.

00:04:39 It doesn't go anywhere.

00:04:41 This is like, you can even lock it down about how other people are allowed to access.

00:04:44 So, that's kind of cool.

00:04:46 And yeah, they're basically trying to help people go through log files and other things on the server where people are trying to hide their tracks,

00:04:55 behaving normally but not really, and pull those things out.

00:04:59 Now, I have no experience with this.

00:05:00 But I know I interviewed some folks on Talk Python who are astronomers looking for exoplanets.

00:05:07 And they were able to take old Kepler data and apply some machine learning and computer vision and discover 50 new exoplanets that people thought they had already analyzed.

00:05:17 And guess what?

00:05:17 They were hiding.

00:05:18 They couldn't be discovered by people.

00:05:19 But by computers, they could.

00:05:21 I suspect the same type of thing is true here.

00:05:24 They're like, there's 10 million lines of log file.

00:05:26 And these three are suspicious.

00:05:28 But nobody really noticed, you know.

00:05:29 So, anyway, if you're in cybersecurity, definitely give this a look.

00:05:33 So, next, I want – I should have thought of this at a time.

00:05:37 But we've got a bunch of people here that can't see our screens.

00:05:41 And I do – which is a good reminder that this is also an audio podcast.

00:05:46 It's not just on YouTube, apparently.

00:05:48 So, the next topic I'll have to be careful talking about.

00:05:53 But it's PEP 695 type parameter syntax.

00:05:58 Now, this is – this PEP is an – it's for Python version 3.12.

00:06:05 It's accepted.

00:06:06 So, I don't know if it's already in some of the alphas or betas or not.

00:06:11 Yeah, I don't know either.

00:06:11 But we've got – so, it's accepted for 3.12 type parameter syntax.

00:06:16 The abstract is this PEP specifies an improved syntax for specifying type parameters within a generic class function or type alias.

00:06:26 It also introduces a new statement for declaring type aliases.

00:06:30 What does that mean?

00:06:31 Well, I like to – it has some great examples.

00:06:36 So, we go – if we go down to the examples, there – it's the old way.

00:06:40 Like, let's say I've got – one of the examples is great.

00:06:45 So, let's say I've got a function like that takes – it takes something.

00:06:49 We don't know what the type is.

00:06:51 But it takes something and then it returns the same type.

00:06:54 Or it takes something – it takes two of – it has to have two of the same typed things.

00:06:59 It doesn't matter what they are.

00:07:00 It doesn't matter what they are.

00:07:01 So, like two ints or two floats or two lists or two tuples.

00:07:06 It doesn't matter what, but it's the same thing.

00:07:09 The old way to do that, which is – I still think it's fairly recent.

00:07:13 I think this might have been 3.11 for type var.

00:07:15 It's pretty new, I think.

00:07:17 So, yeah.

00:07:18 Yeah.

00:07:18 I'm laughing because it's rolling over so quickly, right?

00:07:22 Yeah.

00:07:22 So, the – anyway, the old way to do it was from typing import type var.

00:07:28 And I didn't even know you could do this.

00:07:30 And then you declare a new type using, like, as in this example, underscore t equals type var.

00:07:37 And then in parentheses, underscore t.

00:07:41 And then you can use that as the type of arguments.

00:07:44 And that's really kind of ugly syntax.

00:07:47 And the new proposed syntax is to just give a bracket, like bracket t bracket after the function to say, basically, it's a templated function.

00:07:56 Like all the other generic statically typed languages, like C and stuff, right?

00:08:01 Yeah.

00:08:01 So, it definitely reminds me of, like, the type – yeah, the – Templates.

00:08:07 Templates.

00:08:08 Thank you.

00:08:08 In C++ and stuff.

00:08:11 So, it's definitely easier.

00:08:13 I still – I'm not sure.

00:08:15 So, it's approved.

00:08:16 So, we'll get this in 3.12.

00:08:17 It's definitely better than the old way, but it's still – I think we might be confusing people with this.

00:08:22 What do you think?

00:08:23 I think types in Python are awesome, but I think it can also go too far.

00:08:27 I mean, let's ask – since you all are here, let's ask, like, how many people like typing in Python?

00:08:33 Almost uniformly.

00:08:34 Yeah.

00:08:35 Yeah.

00:08:36 Okay.

00:08:36 But it can get over the top sometimes, I think.

00:08:40 One of the things, though, is cool.

00:08:42 One of the bottom examples in this, it shows that combining types.

00:08:46 So, like, maybe a function that takes two of the same type things, maybe that's a little weird.

00:08:51 But it's not too weird if you think of, like, lists of things.

00:08:55 If I want to say it can either be a list or a set of a certain type, but only one type.

00:09:02 How do you say that without these generics?

00:09:05 Yeah.

00:09:06 Yeah, I know.

00:09:06 Yeah, I think – It is incomplete.

00:09:08 And so it's the question of how far are you going to push the language to get that last couple percent?

00:09:12 Anyway, it is looking a lot more like C, isn't it?

00:09:15 I'm glad I studied that, but also glad I don't have to write it these days.

00:09:18 Anyway.

00:09:19 So something to look forward to in Python 3.12 is PEP 6.9.5.

00:09:24 Yeah, absolutely.

00:09:25 While we're riffing on types, I just want to make a quick comment.

00:09:29 I got a message from somebody recently on this project.

00:09:32 It said, Michael, I discovered a bug in your code.

00:09:35 It doesn't run.

00:09:36 I'm like, oh, really?

00:09:37 It seemed like it ran last time I touched it.

00:09:38 But, okay, what's going on?

00:09:39 Well, you used the lowercase l list bracket type, and only capital L list works.

00:09:45 Like, no, the bug is you're in Python 3.9, not 3.10.

00:09:49 This is a new feature.

00:09:50 And I think – I'm joking, kind of – but with all these changes so quickly,

00:09:54 like, it starts to get – you've got to be on the right version of Python or this thing won't exist.

00:09:59 Right?

00:09:59 And it's going to be an error.

00:10:00 Yeah.

00:10:00 It used to be, oh, the last five versions is fine.

00:10:03 Now it's like, oh, the last version is fine.

00:10:04 We'll see.

00:10:05 Yeah, that – I'm starting to – I'm working with some educators.

00:10:10 And one of the tricky things in, like, universities is the – your curriculum is kind of needs to be known ahead of time.

00:10:21 And they kind of set that.

00:10:22 And so with Python moving so fast, I wonder how educators are dealing with this.

00:10:27 If they're teaching 3.8 or 3.11.

00:10:30 All right, we've got some teachers in the audience saying 3.11.

00:10:33 Kids, they like new shiny things anyway.

00:10:35 Give them that.

00:10:35 Give them that.

00:10:36 All right.

00:10:36 All right.

00:10:37 What's next here, Brian?

00:10:38 What's my next one?

00:10:39 I don't know either.

00:10:40 No, I do.

00:10:40 It has to do with AI probably.

00:10:41 So this one comes to us from Matt Harrison, who's here at the conference, if you want to say hi.

00:10:46 Obviously, there's all this GPT stuff going crazy.

00:10:49 But one of the challenges is you can ask it a question, and it'll give you an answer.

00:10:54 Right?

00:10:54 Like, hey, please write this code for me.

00:10:56 And it'll go, boom.

00:10:57 Here's – you don't need to hire anybody.

00:10:59 Just take this code and trust me.

00:11:01 Or whatever, right?

00:11:01 You ask it a question.

00:11:02 And you can ask it a couple of questions, but it has what's called – was it a token stack or something like that?

00:11:08 It only has so much memory of, like, the context of what you're asking it.

00:11:12 And the ability to go and ask it to do one thing and then based on its response, go do another and then a third after that, it's not quite there yet.

00:11:19 So there's this project called Auto GPT.

00:11:22 So if you have an open AI API key, basically, so if you pay for open AI or somehow have access to it, then you can plug it into this thing.

00:11:32 And what it does is you give it a mission.

00:11:34 You say, dear AI thing, what I would like you to do is go search Google for this, figure out what you find, and then get the top three most popular ones.

00:11:45 Go find their web pages.

00:11:46 Take all the information out of that and summarize them for me and then make a prediction about, like, who's going to win the Super Bowl because I'm going to bet big on it.

00:11:53 I don't know.

00:11:54 So basically that's the idea.

00:11:56 It says it has a couple of benefits over regular chat to be, for example, which is you can't connect it to the Internet.

00:12:04 I don't know if you ever played with it, but it'll say things like, I only know up to 2021.

00:12:07 Sorry.

00:12:08 This one has Internet access.

00:12:09 It has long-term memory storage.

00:12:12 It'll store in a database so you can, like, have it go on and on for a long time.

00:12:16 File storage, all sorts of interesting things.

00:12:18 So they have a video that we'll link in the show notes you can check out here.

00:12:22 I'm going to mute it because I don't want to hear this person talk.

00:12:25 But it says, fires it up, and it says, all right, we're going to get started.

00:12:29 And what I want you to do, your role is an AI designed to teach me about AutoGPT, the thing that is itself, right, very meta, self-referential.

00:12:38 Your goals as a list in Python is first search what AutoGPT is and then find the GitHub and figure out what it actually is from its GitHub project.

00:12:48 And then explain what it is and save your explanation to a file called AutoGPT.txt and then stop.

00:12:55 And it will, if you run it, you will say, okay, well, now it's gone out to Google and it's done this thing and it's pulled it in.

00:13:03 And now it's starting to analyze it.

00:13:04 And why is this interesting?

00:13:06 This is all Python code, right?

00:13:07 So this thing is created in Python.

00:13:09 You run it with Python.

00:13:10 I'm sure you can extend it in different ways with Python.

00:13:13 But, yeah, it's pretty nuts.

00:13:15 You create these little things.

00:13:17 You put them on a mission.

00:13:18 And you just say, go, you know, go get me tickets for this concert or go do this other thing.

00:13:23 And here's the plan I want you to follow.

00:13:26 You just set it loose.

00:13:27 So, anyway, if you want to combine some Python and some automating of the large language models, there you go.

00:13:35 This seems like something could definitely easily be used for evil.

00:13:38 No, no way.

00:13:39 There's no way.

00:13:40 Yeah, I agree.

00:13:43 All right.

00:13:44 What do you got for the last one?

00:13:45 I am, so we've talked about Ruff before, I think.

00:13:50 So there's been an announcement that Charlie Marsh is now his own company and hiring people.

00:13:58 So Charlie Marsh has formed a company called Astral.

00:14:02 And he's made a good start.

00:14:05 He's starting with $4 million of investment money.

00:14:09 So it's not a bad.

00:14:10 That is not a bad deal at all.

00:14:12 Bad deal to start a company.

00:14:13 But I'm kind of excited about it, actually.

00:14:15 Well, one, I'm happy for him.

00:14:19 Obviously, well, at least I hope it's a good thing for him.

00:14:21 But I just think it's neat that I guess I just wanted to highlight and say congrats, Charlie, you're doing this.

00:14:29 So the Ruff, if you're not familiar, is kind of like a flake 8 linter sort of thing.

00:14:36 But it's written in rust, and it's really, really fast.

00:14:39 It's so fast.

00:14:40 I can't.

00:14:41 You can barely detect it's running.

00:14:43 But it works.

00:14:44 Yeah.

00:14:45 How many of you all have heard of Ruff?

00:14:46 R-U-F-F?

00:14:47 Pretty much everyone.

00:14:48 And this thing's only been out like a year.

00:14:50 So that's a big deal.

00:14:51 Yeah.

00:14:51 I ran it on the Python bytes and the Talk Python code and 20,000 lines of Python.

00:14:57 And you're like, did it actually run?

00:14:59 Did I give it the wrong files?

00:15:00 It might not have seen anything.

00:15:01 It's instant.

00:15:02 It's crazy.

00:15:02 One of the things Charlie's noticed is that it's becoming very popular.

00:15:07 But he's also getting a lot of requests.

00:15:09 So it's a very active project now.

00:15:12 And I'm sure it's taking a lot of time.

00:15:14 So he's got things like new requests.

00:15:17 So let's do more of the extensions of Flake 8, which is completely valid.

00:15:25 And then also, yeah.

00:15:28 Well, this was a good idea of taking part of the Python tool chain and rewriting it in Rust.

00:15:34 What other stuff could we rewrite in Rust?

00:15:36 And I think that's where they're headed is making more Python things more Ruff-like or Rustifying them.

00:15:45 So I'm excited for it and to see what they come up with.

00:15:49 And he's promising that a lot of this stuff is going to be open source available to everybody.

00:15:54 Awesome.

00:15:55 Congratulations, Charlie.

00:15:57 That's awesome.

00:15:58 I would say, you know, when I got into Python nine, ten years ago, there seemed to be this really strong resistance to anything corporate.

00:16:06 Anything like people were trying to bring money.

00:16:08 It seemed really suspicious.

00:16:09 Like, what is your motive here?

00:16:11 Are you trying to corrupt our open source environment?

00:16:14 And I think since then, we've kind of found a way where there can be commercial interests that don't undermine the community, but also come in and benefit.

00:16:24 I mean, we saw Samuel Colvin with Pydantic.

00:16:28 We're seeing this now.

00:16:30 And, you know, a lot of them seem to fall.

00:16:31 Textuals.

00:16:32 Textuals.

00:16:32 Absolutely.

00:16:33 Will McCoogan.

00:16:35 Out with Rich.

00:16:36 Sorry, Will.

00:16:36 And a lot of them seem to fall under this what's called open core business model where, like, the essence of what they're doing, they give away for free.

00:16:44 Like Rich.

00:16:45 Like Pydantic.

00:16:47 But then, on top of that, there's something that is highly polished and commercial, and that's where they're kind of working.

00:16:54 And I, personally, am just really happy for these folks that this is happening.

00:16:58 I think it creates more opportunity.

00:16:59 It creates more opportunity for people in Python.

00:17:01 People who worked on these projects for so long get a lot of, it kind of pays off eventually, right?

00:17:06 Like, the PayPal donate button.

00:17:08 There's no way that that's a job that's like a covered my dinner once a month sort of thing.

00:17:13 I also get that there's a lot of people that can't do this.

00:17:15 I mean, there's a lot of things that people are happy with their normal job.

00:17:21 But they're doing something cool on the side.

00:17:23 We still need to figure out how to compensate those people better.

00:17:26 Yeah.

00:17:27 So we'll figure that out.

00:17:28 One of the things I wanted to bring up is I was talking about this announcement with somebody just yesterday.

00:17:32 And they said, oh, Ruff, that's kind of like black, right?

00:17:36 I'm like, wait.

00:17:37 I don't think it's quite, that's quite right.

00:17:39 I think of it more like Flake 8, but I was curious about the overlap.

00:17:44 So I went up and looked in the FAQ, and the top question is, is Ruff compatible with black?

00:17:51 So yes, it says Ruff is compatible with black out of the box, as long as line length setting is consistent between the two,

00:17:59 because black has a weird line length thing.

00:18:02 I've had no problem with running them together.

00:18:05 And I was like, also, should I run them together?

00:18:08 And right in here, Ruff is, it says Ruff is designed to be used alongside black.

00:18:13 And as such, we'll defer implementing stylistic lint rules that are obviated by auto formatting.

00:18:22 So what does that mean?

00:18:24 It means that there's no point, if they're assuming that you're running black.

00:18:28 So if running black will do something, there's no point in Ruff checking it,

00:18:33 because they know that you've already done it.

00:18:35 Or something.

00:18:36 They're going to, you know.

00:18:37 Yeah.

00:18:37 Don't let them fight.

00:18:38 Wrap this line.

00:18:40 Unwrap that line.

00:18:40 Wrap that line.

00:18:41 Unwrap that line.

00:18:41 Well, that.

00:18:42 And also, like, that's not their highest priority of fixing, of checking for lint errors that black would have changed anyway.

00:18:49 So.

00:18:49 Yeah.

00:18:49 Indeed.

00:18:50 All right.

00:18:50 Well, congrats.

00:18:51 That's very cool.

00:18:52 I think that might be it for our items, huh?

00:18:55 What do you think?

00:18:55 Oh, yeah.

00:18:56 For our main items.

00:18:57 Our main items.

00:18:57 You got some extras?

00:18:58 I do have one extra.

00:18:59 The one extra is, like, Fikert?

00:19:03 What's Matthew?

00:19:04 Matthew Fikert.

00:19:05 Okay.

00:19:05 Yes.

00:19:06 Wanted us to bring up, which, sorry, Matthew, for me forgetting your name right away.

00:19:10 Former Python Bytes co-host, guest, attendee.

00:19:13 Yeah.

00:19:14 So, I wanted to announce that the tickets are available.

00:19:18 It's now open.

00:19:19 You can buy tickets to SciPy 2023.

00:19:21 And SciPy 2023 is in Austin, Texas, on July 10th through the 16th.

00:19:28 So, that's open.

00:19:29 If anybody wants to go, it should be fun.

00:19:31 Yeah.

00:19:32 Anyone go into Austin to go to SciPy?

00:19:34 I know you've all used up your conference going.

00:19:37 There's a maybe.

00:19:38 Some maybes out there.

00:19:39 I mean, Austin would be great to visit.

00:19:41 SciPy will give you a different flavor of Python.

00:19:43 I think it'd be great.

00:19:44 But I can't make it.

00:19:46 I'm coming home from vacation on the 10th or something like that, which makes it a little

00:19:51 tight to get all the way to Austin.

00:19:52 Yeah.

00:19:52 All right.

00:19:53 Do you have any extras?

00:19:54 I have one extra, nothing major, kind of a follow-up here.

00:20:00 The mobile app, I talked about that.

00:20:04 The mobile app is officially out for Talk By Then courses.

00:20:07 And I would like people to try it out.

00:20:08 If they find a bug, just shoot me an email rather than write a one-star review.

00:20:13 And trash it.

00:20:14 Because we're working really hard to get.

00:20:16 It's been two and a half months I've been working on it.

00:20:19 It's completely redone from scratch.

00:20:22 It's very nice.

00:20:24 But it needs a little testing across all the zillions of devices.

00:20:28 Android is out.

00:20:29 Do you notice, Brian, I did not say the Apple version is out, did I?

00:20:33 No.

00:20:33 Oh, no.

00:20:34 No, no, no.

00:20:34 Because when you submit something to Apple, what they tell you is, rejected.

00:20:37 Rejected.

00:20:38 Your app does not do X, Y, and Z.

00:20:40 And Android is like, yeah, sure.

00:20:42 That's good.

00:20:42 So we're now adding in-app purchasing because without it, you can't have your app.

00:20:49 So I'm going to work on that for the next week.

00:20:51 And then we'll have an Apple version y'all can test.

00:20:54 And it will be out, but it's just not out yet.

00:20:56 What are you going to sell for in-app purchases?

00:20:58 Courses.

00:20:59 I actually wrote some of them.

00:21:00 You know, I might even sell one of yours.

00:21:02 Yeah, the Pi test course.

00:21:03 Yes, exactly.

00:21:03 Nice.

00:21:06 Awesome.

00:21:07 Anyway, that's my extra.

00:21:08 What's Android, by the way?

00:21:09 Yeah, it's.

00:21:10 No, just kidding.

00:21:12 Let's not go there.

00:21:14 This one, I'm going to take a chance.

00:21:18 I'm going to take a risk here and turn my screen around.

00:21:21 Okay.

00:21:21 For everyone, because this joke is very visual.

00:21:25 You'll be able to see it over there.

00:21:27 And you can see mine.

00:21:28 But you know it already.

00:21:30 This is what it's like releasing new production.

00:21:32 We've got the senior dev and we've got the junior dev.

00:21:35 Here we go.

00:21:36 Here we go.

00:21:40 What is this, Mr. Bean?

00:21:43 Yeah.

00:21:44 Mr. Bean.

00:21:44 It's just people are rocking all over.

00:21:49 The junior dev is hanging on for life.

00:21:51 There's like a molten lava here in a second.

00:21:53 That's the database.

00:21:54 Some of the developers are thrown into the lava.

00:21:57 Scrum master.

00:21:57 There you go.

00:21:58 The scrum master was thrown into the lava, which is the database.

00:22:01 Anyway, what do you all think?

00:22:04 You ever felt that way?

00:22:05 No, I'd definitely throw the scrum master into the lava.

00:22:09 Yeah, definitely.

00:22:10 Definitely.

00:22:10 But anyway, that's what I brought for our joke.

00:22:13 Nice.

00:22:13 I like it.

00:22:14 And I also took you off the camera.

00:22:16 There you go.

00:22:16 That's all right.

00:22:17 Well, this was fun doing a live episode.

00:22:20 It was very fun.

00:22:21 And thank you all for being here.

00:22:22 This is really awesome.

00:22:23 Yeah.

00:22:24 Thanks to everybody, and thank you everybody online for watching and showing up.

00:22:27 Yeah, absolutely.

00:22:28 Have fun.

00:22:28 Bye, y'all.

00:22:29 Thank you.

