
00:00:00.000 --> 00:00:04.240
This is Python Bytes, Python headlines and news delivered directly to your earbuds.


00:00:04.240 --> 00:00:08.800
It's episode 16, recorded March 6th, 2017.


00:00:08.800 --> 00:00:12.960
And this is your host, Michael Kennedy, here with my co-host, Brian Okken.


00:00:12.960 --> 00:00:13.600
Hey, Brian.


00:00:13.600 --> 00:00:14.160
Hello.


00:00:14.160 --> 00:00:14.800
Hello.


00:00:14.800 --> 00:00:18.160
Well, I'm excited to talk about another week's worth of Python news.


00:00:18.160 --> 00:00:20.240
But before I do, I want to say thank you.


00:00:20.240 --> 00:00:21.920
Thanks to Rollbar for sponsoring this episode.


00:00:21.920 --> 00:00:22.640
Yes, thank you.


00:00:22.640 --> 00:00:23.200
Yeah.


00:00:23.200 --> 00:00:28.800
So you've got the first item, and it's kind of an artistic postmodern type of thing,


00:00:28.800 --> 00:00:30.000
But with error handling, huh?


00:00:30.000 --> 00:00:34.000
Yeah, so there's an article on Journal Panic,


00:00:34.000 --> 00:00:36.440
and I got to say, that's a cool name for a website.


00:00:36.440 --> 00:00:41.160
But it was called Postmodern Error Handling in Python 3.6.


00:00:41.160 --> 00:00:44.160
And it's actually-- it's not really,


00:00:44.160 --> 00:00:46.280
I guess you could consider it error handling.


00:00:46.280 --> 00:00:50.040
It's mostly like how to structure your code so


00:00:50.040 --> 00:00:54.560
that you don't make mistakes and let the language help you out.


00:00:54.560 --> 00:00:56.000
The examples are--


00:00:56.000 --> 00:00:58.440
I highly recommend the read, because the examples


00:00:58.440 --> 00:01:07.640
are hilarious. And it's, it goes through some error prevention, looking at using enum classes,


00:01:07.640 --> 00:01:12.360
and the named tuple class, which I have to admit, I just like learned about I've used


00:01:12.360 --> 00:01:17.400
named tuples, but I've only learned about the class recently, and using type hints in


00:01:17.400 --> 00:01:20.960
my pi to to help avoid errors in your code.


00:01:20.960 --> 00:01:26.360
So yeah, I think it's really nice. Some of these are three, four only, right, like enum


00:01:26.360 --> 00:01:29.640
support was added in Python 3.4, which is pretty cool.


00:01:29.640 --> 00:01:35.040
Yeah, there's somebody who commented, basically the idea was they were talking on some message


00:01:35.040 --> 00:01:39.720
board like core or something about like, how would you handle this kind of error?


00:01:39.720 --> 00:01:45.680
Let's say, it's not true or false, it's true or false or maybe, right?


00:01:45.680 --> 00:01:47.720
And they propose like this three state type of thing.


00:01:47.720 --> 00:01:50.800
And somebody said, well, if you were using Rust, you could have enums.


00:01:50.800 --> 00:01:53.400
And he says, well, I'm using Python 3, so I have enums.


00:01:53.400 --> 00:01:54.400
Right?


00:01:54.400 --> 00:01:55.400
That was pretty funny.


00:01:55.400 --> 00:01:56.640
- Definitely, okay.


00:01:56.640 --> 00:01:58.680
Oh, and yeah, the tail, it's nice.


00:01:58.680 --> 00:02:00.300
I only noticed this this morning


00:02:00.300 --> 00:02:03.120
is the tail end of this article references


00:02:03.120 --> 00:02:05.200
your talk Python, so that's cool.


00:02:05.200 --> 00:02:06.040
- Yeah, oh, that's awesome.


00:02:06.040 --> 00:02:07.760
Yeah, thanks for referencing that.


00:02:07.760 --> 00:02:08.760
That's really cool.


00:02:08.760 --> 00:02:11.960
Yeah, so I think name tuples are so excellent.


00:02:11.960 --> 00:02:13.760
I've really started using name tuples a lot.


00:02:13.760 --> 00:02:15.720
I think they're great.


00:02:15.720 --> 00:02:16.560
Type hints?


00:02:16.560 --> 00:02:18.960
- Yeah, name tuples I've been using a lot


00:02:18.960 --> 00:02:20.640
because they're very convenient,


00:02:20.640 --> 00:02:23.700
but the syntax is a little ugly,


00:02:23.700 --> 00:02:27.740
And the name tuple class actually makes the syntax


00:02:27.740 --> 00:02:30.020
a little bit cleaner and I think that's cool.


00:02:30.020 --> 00:02:31.100
- Yeah, very cool.


00:02:31.100 --> 00:02:34.960
And of course, mypy, which is great for static type,


00:02:34.960 --> 00:02:37.400
well, type hinting, I guess, and type discovery.


00:02:37.400 --> 00:02:38.940
- Yeah, and in the show notes,


00:02:38.940 --> 00:02:41.300
I'm also including a link to another article


00:02:41.300 --> 00:02:45.500
on mypy and type hints called Python Type Annotations,


00:02:45.500 --> 00:02:47.020
and that's from the Cactus Group,


00:02:47.020 --> 00:02:49.620
and it's another pretty good tutorial


00:02:49.620 --> 00:02:52.580
for type hints in mypy.


00:02:52.580 --> 00:02:54.140
- Yeah, excellent, excellent.


00:02:54.140 --> 00:02:56.700
So the next one we're gonna talk about,


00:02:56.700 --> 00:02:58.660
and this is sort of a sequence


00:02:58.660 --> 00:02:59.740
that I'm gonna go through here.


00:02:59.740 --> 00:03:01.660
One leads to another in a very cool way.


00:03:01.660 --> 00:03:05.020
So mid last year, mid 2016,


00:03:05.020 --> 00:03:08.780
Mozilla awarded a little over half a million dollars


00:03:08.780 --> 00:03:13.380
to nine open source projects just in Q2 2016.


00:03:13.380 --> 00:03:14.260
That's really cool, right?


00:03:14.260 --> 00:03:15.100
- That's very cool.


00:03:15.100 --> 00:03:17.660
- Yeah, so they have these things they call tracks,


00:03:17.660 --> 00:03:19.740
foundational technology tracks,


00:03:19.740 --> 00:03:21.460
and mission partner tracks.


00:03:21.460 --> 00:03:27.140
And so what they do is they go out and they find open source projects that somehow the


00:03:27.140 --> 00:03:32.760
success of that open source project furthers the goals of Mozilla, you know, an open source


00:03:32.760 --> 00:03:38.700
free web that Firefox and other things run well on, right?


00:03:38.700 --> 00:03:40.860
And so why is this on the Python thing?


00:03:40.860 --> 00:03:43.060
Well, they chose a really cool project.


00:03:43.060 --> 00:03:49.820
So they said that they've already funded eight projects for $385,000.


00:03:49.820 --> 00:03:51.460
and they're still considering more,


00:03:51.460 --> 00:03:54.540
and they have actually applications available


00:03:54.540 --> 00:03:56.400
for what's called a mission partner.


00:03:56.400 --> 00:03:57.940
So if you have an open source project


00:03:57.940 --> 00:03:59.780
and you think the mission of your project


00:03:59.780 --> 00:04:01.820
lines up well with Mozilla,


00:04:01.820 --> 00:04:03.140
maybe that could be your job, right?


00:04:03.140 --> 00:04:05.640
Like maybe Mozilla would pay you to work on your project.


00:04:05.640 --> 00:04:07.180
So first of all, just check this out.


00:04:07.180 --> 00:04:08.020
That's awesome.


00:04:08.020 --> 00:04:08.840
- Yeah, definitely.


00:04:08.840 --> 00:04:09.680
That's cool.


00:04:09.680 --> 00:04:13.220
- Yeah, they also have a track on secure open source


00:04:13.220 --> 00:04:17.500
for improving the security of open source software.


00:04:17.500 --> 00:04:19.540
And then the one that's really interesting to me,


00:04:19.540 --> 00:04:23.680
I think to the audience, is the foundational technology track.


00:04:23.680 --> 00:04:29.260
And one of the things that was awarded there, one of the projects was PyPy, the alternate


00:04:29.260 --> 00:04:32.640
implementation that's a JIT for Python.


00:04:32.640 --> 00:04:37.260
And it's been working with Python 2.7, but not really great with Python 3.


00:04:37.260 --> 00:04:39.020
It's kind of sort of iffy.


00:04:39.020 --> 00:04:41.100
Some of the features are supported and so on.


00:04:41.100 --> 00:04:45.740
So they received $200,000 in donations to make that happen.


00:04:45.740 --> 00:04:46.860
That's really great.


00:04:46.860 --> 00:04:52.420
And that'll make PyPy a lot more compelling if we can get that updated to 3.


00:04:52.420 --> 00:04:53.420
Yeah, absolutely.


00:04:53.420 --> 00:04:57.220
I mean, it's one thing to say we're on 2.7 and then we'll move in a little bit, but it's


00:04:57.220 --> 00:05:00.900
another to say, and we're going to build on a technology that has no Python 3 story.


00:05:00.900 --> 00:05:02.820
Like that's a pretty serious blockade.


00:05:02.820 --> 00:05:08.420
But now they have an alpha version of PyPy 3.5 out and it's looking really good.


00:05:08.420 --> 00:05:10.700
So more on that in another section.


00:05:10.700 --> 00:05:12.020
Okay, cool.


00:05:12.020 --> 00:05:17.100
Speaking of announcements, I've just been sort of following what Intel's been doing.


00:05:17.100 --> 00:05:20.180
I think Talk Python had an Intel episode.


00:05:20.180 --> 00:05:25.860
Yeah, we had a great conversation about how Intel's actually thinking about the architecture


00:05:25.860 --> 00:05:31.940
of their chips so that it lines up with the way that Python executes code, CPython.


00:05:31.940 --> 00:05:35.420
Yeah, and they're continuing working on this.


00:05:35.420 --> 00:05:39.340
The announcement that we're linking to is an announcement from Intel that says, "Intel


00:05:39.340 --> 00:05:45.380
distribution for Python 2017 update 2 accelerates five key areas for


00:05:45.380 --> 00:05:50.380
impressive performance gains and so it looks like they're continuing on and


00:05:50.380 --> 00:05:55.420
this this this version that they've got is both something that it's so it's a


00:05:55.420 --> 00:06:00.620
special release of Python that's compiled most for knowing that it's


00:06:00.620 --> 00:06:05.260
going to run on an Intel architecture and it supports Windows, Linux, OS X and


00:06:05.260 --> 00:06:12.700
It's got two seven and three five oddly three six missing. What's going on guys, but the improvements are pretty cool. There was a


00:06:12.700 --> 00:06:14.980
comment about


00:06:14.980 --> 00:06:20.020
widespread optimum optimizations for numpy and scipy FFTs with


00:06:20.020 --> 00:06:21.980
stated


00:06:21.980 --> 00:06:24.420
sometimes in could possibly improve


00:06:24.420 --> 00:06:32.580
60 X over update one and so there really are hammering into trying to make this fast for some some


00:06:33.220 --> 00:06:39.780
Intensive stuff. Yeah, that's really cool. You know if you're doing any sort of computational stuff involving numpy and scipy that's


00:06:39.780 --> 00:06:47.460
That's pretty amazing performance increase and to make it basically as fast as native C and the Intel


00:06:47.460 --> 00:06:51.940
High performance C libraries. That's really something they also touched on some


00:06:51.940 --> 00:06:53.900
improvements in memory management


00:06:53.900 --> 00:06:58.460
What I thought was cool was arithmetic and transcendental expressions from numpy are


00:06:59.140 --> 00:07:01.340
able to use multi-cores now.


00:07:01.340 --> 00:07:03.660
And I just like that because I don't know what


00:07:03.660 --> 00:07:05.460
a transcendental expression is.


00:07:05.460 --> 00:07:07.340
I think that's like what your face looks like


00:07:07.340 --> 00:07:08.740
when you're meditating maybe.


00:07:08.740 --> 00:07:11.100
- Yeah, that sounds awesome.


00:07:11.100 --> 00:07:12.900
It already sounds intriguing.


00:07:12.900 --> 00:07:14.780
What good naming the nomenclature.


00:07:14.780 --> 00:07:17.020
- Yeah, but anyway, I think it's neat


00:07:17.020 --> 00:07:18.780
that they're both, that they're working on it


00:07:18.780 --> 00:07:22.440
and also that there is a, it's not just for paid people.


00:07:22.440 --> 00:07:23.940
There is a free standalone version.


00:07:23.940 --> 00:07:25.140
That's cool.


00:07:25.140 --> 00:07:27.260
- Yeah, yeah, that's very cool.


00:07:27.260 --> 00:07:28.980
Okay, the next one I want to talk about


00:07:28.980 --> 00:07:30.620
that's also about performance.


00:07:30.620 --> 00:07:32.940
But before we do, I wanna talk about errors.


00:07:32.940 --> 00:07:34.660
We don't like errors in our web apps, do we?


00:07:34.660 --> 00:07:35.540
- Definitely not.


00:07:35.540 --> 00:07:36.380
- No.


00:07:36.380 --> 00:07:38.060
So our sponsor this week, Rollbar,


00:07:38.060 --> 00:07:40.320
will totally help you take the pain out of errors


00:07:40.320 --> 00:07:42.040
and solve that problem.


00:07:42.040 --> 00:07:43.480
So I use them on my own sites.


00:07:43.480 --> 00:07:45.460
I know many people out there do as well.


00:07:45.460 --> 00:07:48.260
So what you do is you basically install


00:07:48.260 --> 00:07:49.860
with just a few lines of code,


00:07:49.860 --> 00:07:54.180
Rollbar into your Flask, Django, Pyramid web apps.


00:07:54.180 --> 00:07:57.220
And if there's ever an error, you'll get a notification,


00:07:57.220 --> 00:08:00.600
you'll get a report containing all the details that you need.


00:08:00.600 --> 00:08:06.480
So here's some kind of crash, here is the trace back, here's the browser and the platform


00:08:06.480 --> 00:08:11.120
and everything that was possibly passed in the whole web request right there for you.


00:08:11.120 --> 00:08:14.900
So you'll get notified straight away of any errors and you won't even probably have to


00:08:14.900 --> 00:08:15.900
debug it.


00:08:15.900 --> 00:08:17.960
You'll just have to look and go, "Oh dear, we have to go fix this."


00:08:17.960 --> 00:08:22.360
So definitely check them out at rollbar.com and I use them.


00:08:22.360 --> 00:08:23.360
I think they're great.


00:08:23.360 --> 00:08:24.360
Wonderful.


00:08:24.360 --> 00:08:25.360
Yeah, absolutely.


00:08:25.360 --> 00:08:26.360
And thanks for sponsoring the show, guys.


00:08:26.360 --> 00:08:29.400
All right, so let's talk about performance.


00:08:29.400 --> 00:08:33.520
And this is follow on from the Mozilla one.


00:08:33.520 --> 00:08:40.600
So the guys at PyPy released some performance graphs and stuff from their work on implementing


00:08:40.600 --> 00:08:42.480
Python 3.5.


00:08:42.480 --> 00:08:48.640
And they said, look, the core new thing that we need to work on is this whole async IO


00:08:48.640 --> 00:08:50.240
story, right?


00:08:50.240 --> 00:08:53.480
That's sort of the kernel of the new stuff in Python 3.5.


00:08:53.480 --> 00:08:57.220
And so what they did is they said, well, let's, let's put out some numbers on how we're doing


00:08:57.220 --> 00:08:58.220
in that area.


00:08:58.220 --> 00:09:03.420
I want to say thanks to Guy Fickel, who actually sent this over to us to say, hey, you should


00:09:03.420 --> 00:09:04.580
talk about this.


00:09:04.580 --> 00:09:10.740
They said, look, we're going to take things like Tornado, AsyncIO, Curio, GeoEvent, and


00:09:10.740 --> 00:09:16.060
Twisted, and we're going to run them on PyPy 3.5 and see how they do.


00:09:16.060 --> 00:09:20.180
And they did pretty well, actually, they have a bunch of graphs, and they're, they're basically


00:09:20.180 --> 00:09:24.740
five to 10 times faster than CPython for all of those workloads.


00:09:24.740 --> 00:09:25.740
Wow.


00:09:25.740 --> 00:09:26.740
Yeah.


00:09:26.740 --> 00:09:32.980
So, if you could run five times fewer servers because you don't need them with pretty much


00:09:32.980 --> 00:09:35.540
the same code, that would be pretty handy, right?


00:09:35.540 --> 00:09:36.540
Definitely.


00:09:36.540 --> 00:09:37.540
Yeah.


00:09:37.540 --> 00:09:38.540
That's cool.


00:09:38.540 --> 00:09:39.540
Yeah.


00:09:39.540 --> 00:09:40.540
So, there's a lot of interesting things.


00:09:40.540 --> 00:09:46.660
I feel like this whole let's leverage async I/O plus something else is really blowing


00:09:46.660 --> 00:09:47.660
up these days.


00:09:47.660 --> 00:09:53.060
a lot of the stuff happening in the web frameworks with Jopranto, with async, AIO


00:09:53.060 --> 00:09:58.460
HTTP, with Sanic, with this. There's just there's a lot of stuff going on right


00:09:58.460 --> 00:10:02.660
now trying to do something with async and async and await and async I/O to


00:10:02.660 --> 00:10:05.820
make things faster. So I think we'll continue to hear good stories around


00:10:05.820 --> 00:10:09.860
this. Yeah it's cool that it keeps progressing. Yeah absolutely.


00:10:09.860 --> 00:10:13.740
Definitely. Well what's unclear is like which one of these is going to be the


00:10:13.740 --> 00:10:17.860
path right? Like is Gepronto gonna be the way to go? Is AIOHCP the way to go?


00:10:17.860 --> 00:10:22.500
Like Sand Neck, there's so many sort of flowers blooming it's kind of tough


00:10:22.500 --> 00:10:25.860
to pick the right one because they all seem so promising in slightly different


00:10:25.860 --> 00:10:31.100
ways. Yeah and from somebody that's trying to maybe to set up a project and


00:10:31.100 --> 00:10:34.380
trying to pick, that needs to pick one right now, I could see that that might be


00:10:34.380 --> 00:10:40.500
a little confusing but I don't think these are terribly different things.


00:10:40.500 --> 00:10:44.020
I don't know, maybe it is. I have no idea what it would be like if you had to like,


00:10:44.020 --> 00:10:49.020
if you went with, I don't know, Sanic or something and then Sanic disappeared for


00:10:49.020 --> 00:10:52.940
some reason you needed to switch, how difficult that would be. But at the very


00:10:52.940 --> 00:10:56.820
least, having a lot of people look at it and try to make things faster is a


00:10:56.820 --> 00:11:01.900
good thing. Yeah, absolutely. Ned Batchelder is the guy that supports


00:11:01.900 --> 00:11:08.460
coverage.py and to measure your, that's most people use for coverage of


00:11:08.460 --> 00:11:13.660
looking at coverage of their code. And he wrote a couple articles called


00:11:13.660 --> 00:11:19.580
"A Tale of Two Exceptions" and he's got two parts. And there's a... what was going on


00:11:19.580 --> 00:11:24.500
was he was trying to get all of his test suite to run on Jython. And there


00:11:24.500 --> 00:11:28.600
was some... I don't know the details of the problem, but there was a an issue with


00:11:28.600 --> 00:11:33.640
the Jython that made it so that, like, the reporting mechanism doesn't


00:11:33.640 --> 00:11:37.980
quite work or doesn't work. So it's not a crucial part of the system of coverage,


00:11:37.980 --> 00:11:44.540
but they didn't work so he wanted to skip the tests that depended on that while running on Jytha.


00:11:44.540 --> 00:11:49.580
And wow, it's an interesting tale. He kind of walks through the entire thought process of


00:11:49.580 --> 00:11:55.820
why he chose different attempts and maybe inheriting from the exception class and


00:11:55.820 --> 00:12:03.580
picking another base for the exceptions that the coverage exceptions use and ends up kind of


00:12:03.580 --> 00:12:08.580
of leaving it not quite wrapped up at the end of the first post and then with


00:12:08.580 --> 00:12:14.500
some feedback from one of the readers on the first post came up with a way to use


00:12:14.500 --> 00:12:21.100
decorators and meta classes to apply the decorators to be able to skip those more


00:12:21.100 --> 00:12:26.340
effectively and it's a couple pretty cool articles so yeah nice work Ned


00:12:26.340 --> 00:12:30.380
that's a nice write-up so what do you have to do if you want to do coverage on


00:12:30.380 --> 00:12:36.820
Jython, you basically run it and collect the report. And then you have to like actually


00:12:36.820 --> 00:12:38.900
somehow process it with CPython.


00:12:38.900 --> 00:12:44.240
Well, I'm not exactly sure what the I'm sure that there's there's enough support to understand


00:12:44.240 --> 00:12:49.260
your coverage. But the the coverage package has like a whole bunch of cool stuff like


00:12:49.260 --> 00:12:54.980
generating HTML reports and, and a lot of other type of reports. And it's, it's possible


00:12:54.980 --> 00:12:57.500
that those are the parts that are that are missing.


00:12:57.500 --> 00:13:01.500
Yeah, yeah, this is definitely an interesting use of meta classes.


00:13:01.500 --> 00:13:03.860
There's some multiple inheritance thrown in there.


00:13:03.860 --> 00:13:05.180
There's a lot of stuff in this actually.


00:13:05.180 --> 00:13:10.220
Yeah, and one of the things that I wanted to point out was, it's refreshing to, I've


00:13:10.220 --> 00:13:14.080
seen a lot of articles with people saying, "Look, I've got this cool solution I came


00:13:14.080 --> 00:13:16.900
up with for this particular problem."


00:13:16.900 --> 00:13:21.140
And it's very refreshing to see somebody say, "I've got a sticky problem with a solution


00:13:21.140 --> 00:13:24.540
that I'm still not quite happy with it, and here it is."


00:13:24.540 --> 00:13:26.460
And it's nice.


00:13:26.460 --> 00:13:31.940
And another thing, a good takeaway from it is he didn't present all of the code that


00:13:31.940 --> 00:13:33.900
he could have.


00:13:33.900 --> 00:13:40.580
He boiled the code that he puts in the articles, he boiled those down so that you could understand


00:13:40.580 --> 00:13:42.860
the problem, but they're not huge.


00:13:42.860 --> 00:13:46.380
That's extra work on his part, but it makes it for a nice quick read.


00:13:46.380 --> 00:13:50.660
Yeah, a lot of people ask me, "How did you come up with this type of problem?"


00:13:50.660 --> 00:13:52.660
Or, "Could you explain the thinking that got you here?


00:13:52.660 --> 00:13:54.300
Because I don't see how you got from A to B."


00:13:54.300 --> 00:13:56.500
And like, this is a good example of like laying that out.


00:13:56.500 --> 00:13:57.500
I think it's nice.


00:13:57.500 --> 00:13:58.500
Yeah.


00:13:58.500 --> 00:14:02.220
And also to kind of prevent people from saying, well, why didn't you try X?


00:14:02.220 --> 00:14:04.500
Because he already did and he's showing it.


00:14:04.500 --> 00:14:05.500
So it's nice.


00:14:05.500 --> 00:14:06.500
Yeah.


00:14:06.500 --> 00:14:07.500
Nice.


00:14:07.500 --> 00:14:08.500
All right.


00:14:08.500 --> 00:14:09.500
Check that one out.


00:14:09.500 --> 00:14:10.500
That's very cool.


00:14:10.500 --> 00:14:11.900
The last one is also about async and OA and it's also about performance.


00:14:11.900 --> 00:14:14.260
So, but this is a totally different story.


00:14:14.260 --> 00:14:18.380
So all this stuff that we've been talking about, the Mozilla thing, the PyPi, the PyPi


00:14:18.380 --> 00:14:22.040
tests that they ran, the majority of those were testing web frameworks.


00:14:22.040 --> 00:14:23.040
So I want to write a web server.


00:14:23.040 --> 00:14:24.860
It's going to process some requests.


00:14:24.860 --> 00:14:26.260
Let's do it faster.


00:14:26.260 --> 00:14:27.600
This is totally different.


00:14:27.600 --> 00:14:32.500
This is about I want to consume services really quickly.


00:14:32.500 --> 00:14:37.920
And the AIO HTTP library actually has some really cool stuff to do this that I just learned


00:14:37.920 --> 00:14:38.920
about.


00:14:38.920 --> 00:14:39.920
So I thought I'd share it with you guys.


00:14:39.920 --> 00:14:40.920
Wow.


00:14:40.920 --> 00:14:41.920
That's great.


00:14:41.920 --> 00:14:42.920
Yeah.


00:14:42.920 --> 00:14:43.920
So you've heard of requests, right?


00:14:43.920 --> 00:14:44.920
Like the most downloaded package ever?


00:14:44.920 --> 00:14:45.920
Well, definitely.


00:14:45.920 --> 00:14:46.920
Yeah.


00:14:46.920 --> 00:14:47.920
Yeah.


00:14:47.920 --> 00:14:48.920
So we all know about requests, right?


00:14:48.920 --> 00:14:50.800
It's downloaded like 7 million times a month or something insane.


00:14:50.800 --> 00:14:55.480
Well, AIO HTTP has a similar library as request.


00:14:55.480 --> 00:15:00.800
It's actually very, very similar in the way that you use it and its features and so on.


00:15:00.800 --> 00:15:07.000
However, request itself is not...you can't await it in async and await, right?


00:15:07.000 --> 00:15:13.120
So it doesn't like use some sort of deferred IO callback in order to complete requests.


00:15:13.120 --> 00:15:14.640
It's just blocks.


00:15:14.640 --> 00:15:21.200
So the big difference with AIO HTTP is you can await the responses at different levels.


00:15:21.200 --> 00:15:24.520
You can do it on the network calls, you can do it on the parsing, you can actually do


00:15:24.520 --> 00:15:28.640
it, even has like a file based thing so you can await writing the files.


00:15:28.640 --> 00:15:33.840
And so this person wrote up a cool little example, putting those both side by side.


00:15:33.840 --> 00:15:35.400
And the code is quite similar.


00:15:35.400 --> 00:15:39.620
If you didn't have async and await, it would be not so similar, it'd be really nasty looking.


00:15:39.620 --> 00:15:42.240
But because you do, it becomes real, real similar.


00:15:42.240 --> 00:15:45.300
So what we're going to do is I want to get a bunch of stats about basketball players


00:15:45.300 --> 00:15:46.300
in the NBA.


00:15:46.300 --> 00:15:48.280
There's an API for that apparently.


00:15:48.280 --> 00:15:52.280
So it's going to run some code and it's going to go collect all the stats and it took 12


00:15:52.280 --> 00:15:54.640
minutes on requests.


00:15:54.640 --> 00:15:59.960
Using AIOHCP and AIO files, it took 22 seconds.


00:15:59.960 --> 00:16:01.720
Wow, that's really awesome.


00:16:01.720 --> 00:16:02.720
Right?


00:16:02.720 --> 00:16:03.720
That's 33 times faster.


00:16:03.720 --> 00:16:04.720
Definitely.


00:16:04.720 --> 00:16:06.920
And the code is virtually identical.


00:16:06.920 --> 00:16:07.920
That's pretty cool.


00:16:07.920 --> 00:16:11.680
So the difference is like basically, you begin a request to the API.


00:16:11.680 --> 00:16:13.840
normally you're just waiting on the network, right?


00:16:13.840 --> 00:16:15.120
You're waiting for a response, right?


00:16:15.120 --> 00:16:16.940
But you should be able to kick off


00:16:16.940 --> 00:16:19.300
a whole bunch more of those requests


00:16:19.300 --> 00:16:22.520
until one of them comes back and you have to process them.


00:16:22.520 --> 00:16:24.880
So it doesn't even use threads to pull this off.


00:16:24.880 --> 00:16:27.520
It just uses IO callback type things.


00:16:27.520 --> 00:16:28.640
- Really? Okay.


00:16:28.640 --> 00:16:29.840
- Yeah.


00:16:29.840 --> 00:16:30.680
Yeah, pretty awesome.


00:16:30.680 --> 00:16:32.560
So this is definitely one of those things


00:16:32.560 --> 00:16:34.960
that shows the power of Python 3.5 and up.


00:16:34.960 --> 00:16:38.280
- Yeah, it's nice to have it on the client side too.


00:16:38.280 --> 00:16:39.880
We've got a lot of examples recently


00:16:39.880 --> 00:16:43.500
of async and await on the server side.


00:16:43.500 --> 00:16:45.440
- Yeah, absolutely, absolutely.


00:16:45.440 --> 00:16:47.480
So I wanna squeeze one more piece of news in here.


00:16:47.480 --> 00:16:48.360
- Okay.


00:16:48.360 --> 00:16:50.520
- Yeah, before we wrap it up.


00:16:50.520 --> 00:16:54.080
So I talk about PyPI a lot on Talk Python.


00:16:54.080 --> 00:16:56.280
We grab a lot of packages out of there


00:16:56.280 --> 00:16:59.000
and talk about them here on Python Bytes.


00:16:59.000 --> 00:17:00.960
There's quite a milestone that just passed there


00:17:00.960 --> 00:17:02.920
two days ago, three days ago, something like that.


00:17:02.920 --> 00:17:03.960
- Very cool milestone.


00:17:03.960 --> 00:17:04.880
- A very cool milestone.


00:17:04.880 --> 00:17:09.200
So there are now over 100,000 packages on PyPI.


00:17:09.200 --> 00:17:10.040
How cool is that?


00:17:10.040 --> 00:17:10.860
- It's very cool.


00:17:10.860 --> 00:17:13.240
I wonder if the guy that, or the, I shouldn't say guy,


00:17:13.240 --> 00:17:17.160
the person that got the 100,000th one in there,


00:17:17.160 --> 00:17:18.200
if they know about it.


00:17:18.200 --> 00:17:19.680
- If they know that they are the one


00:17:19.680 --> 00:17:21.360
that put it over the top?


00:17:21.360 --> 00:17:22.420
Yeah, we need to find out.


00:17:22.420 --> 00:17:24.280
We need to contact like Donald Stuft


00:17:24.280 --> 00:17:26.120
and see if he knows, if he can find out.


00:17:26.120 --> 00:17:27.920
I bet there's some sort of query that can be done


00:17:27.920 --> 00:17:28.880
that'll answer that question.


00:17:28.880 --> 00:17:29.720
- Yeah, that'd be cool.


00:17:29.720 --> 00:17:30.560
- That'd be very cool.


00:17:30.560 --> 00:17:33.000
Okay, all right, that's it for me.


00:17:33.000 --> 00:17:34.280
Got any news to share with anyone?


00:17:34.280 --> 00:17:36.320
- Just that I've been in the throes


00:17:36.320 --> 00:17:38.400
of trying to switch over.


00:17:38.400 --> 00:17:45.920
I switched over the Testing Code podcast to a new domain name at testingcode.com.


00:17:45.920 --> 00:17:50.980
And hopefully that should be seamless to anybody that's already subscribed.


00:17:50.980 --> 00:17:55.240
But yeah, just if you see anything, that's going on.


00:17:55.240 --> 00:17:56.240
We should let you know.


00:17:56.240 --> 00:17:57.240
Okay, awesome.


00:17:57.240 --> 00:17:58.480
Testing Code, very cool.


00:17:58.480 --> 00:17:59.480
So congrats.


00:17:59.480 --> 00:18:01.600
You have a whole new system driving it and everything, right?


00:18:01.600 --> 00:18:02.800
Like a whole new website.


00:18:02.800 --> 00:18:04.680
It's basically hands off for me.


00:18:04.680 --> 00:18:08.160
I'm letting Software as a Service do most of the work for me.


00:18:08.160 --> 00:18:09.360
- Sounds very relaxing.


00:18:09.360 --> 00:18:10.840
(laughing)


00:18:10.840 --> 00:18:13.360
- Now, I was gonna switch the,


00:18:13.360 --> 00:18:16.600
I have Test Podcast as the Twitter thing,


00:18:16.600 --> 00:18:18.000
with a bunch of followers,


00:18:18.000 --> 00:18:21.160
and I also have Test & Code as a Twitter,


00:18:21.160 --> 00:18:23.200
but there's only like four people following,


00:18:23.200 --> 00:18:25.040
so I have no idea what to do with that.


00:18:25.040 --> 00:18:27.280
How about you, got anything you wanna announce?


00:18:27.280 --> 00:18:29.920
- No, not too much, I'm just continuing


00:18:29.920 --> 00:18:32.400
to working on classes, creating more online classes.


00:18:32.400 --> 00:18:34.160
So I actually have a surprise one coming


00:18:34.160 --> 00:18:37.200
that nobody is, I'm sure will be unexpected,


00:18:37.200 --> 00:18:39.680
I think it'll be fun and maybe next week I can talk about it.


00:18:39.680 --> 00:18:41.920
>> I'll practice my surprised voice.


00:18:41.920 --> 00:18:42.920
>> Yeah.


00:18:42.920 --> 00:18:43.920
All right.


00:18:43.920 --> 00:18:46.560
Well, thank you everyone for listening.


00:18:46.560 --> 00:18:48.240
Brian, great to talk to you as always.


00:18:48.240 --> 00:18:49.240
>> As always.


00:18:49.240 --> 00:18:50.240
See you.


00:18:50.240 --> 00:18:52.440
>> Thank you for listening to Python Bytes.


00:18:52.440 --> 00:18:54.960
Follow the show on Twitter via @PythonBytes.


00:18:54.960 --> 00:18:58.080
That's Python Bytes as in B-Y-T-E-S.


00:18:58.080 --> 00:19:01.380
And get the full show notes at PythonBytes.fm.


00:19:01.380 --> 00:19:05.080
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:19:05.080 --> 00:19:06.080
way.


00:19:06.080 --> 00:19:08.580
the lookout for sharing something cool.


00:19:08.580 --> 00:19:12.040
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:19:12.040 --> 00:19:15.080
Thank you for listening and sharing this podcast with your friends and colleagues.

