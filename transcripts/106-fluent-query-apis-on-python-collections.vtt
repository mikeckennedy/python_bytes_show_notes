WEBVTT

00:00:00.001 --> 00:00:04.800
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to earbuds.

00:00:04.800 --> 00:00:10.360
This is episode 106, recorded November 30th, 2018. I'm Michael Kennedy.

00:00:10.360 --> 00:00:11.220
And I'm Brian Otkin.

00:00:11.220 --> 00:00:12.540
Hey, Brian. How are you doing?

00:00:12.540 --> 00:00:14.760
I'm good. It's early in the morning, man.

00:00:14.760 --> 00:00:20.640
Yeah, good morning, man. We're recording a little earlier than our average lunchtime get-together.

00:00:20.640 --> 00:00:26.320
But, you know, this is what we do for our audience. We get up when it's dark and we talk about Python.

00:00:26.320 --> 00:00:27.000
Yes, we do.

00:00:27.000 --> 00:00:31.320
Yeah. So before we get on to the topics, I just want to say thank you to DigitalOcean.

00:00:31.320 --> 00:00:34.160
They're sponsoring the show like they did for much of this year.

00:00:34.160 --> 00:00:39.780
So check them out at pythonbytes.fm/DigitalOcean. Get $100 free credit for new users.

00:00:39.780 --> 00:00:47.960
Speaking of cloud hosting and whatnot, one of the main innovations that's been coming along here the last couple of years is this whole idea of DevOps, right?

00:00:47.960 --> 00:00:51.880
I don't know. DevOps has been around for a while and really important for a lot of people.

00:00:51.880 --> 00:00:56.420
But I think Python is getting involved more and more with DevOps.

00:00:56.580 --> 00:01:04.760
We've also talked about packaging tools and dependency management a lot on this podcast and our others as well.

00:01:04.760 --> 00:01:08.700
This is actually, we've talked about Poetry and Pipenv.

00:01:08.700 --> 00:01:11.820
I don't know if we've covered pip-tools before, but...

00:01:11.820 --> 00:01:12.620
I don't think we have.

00:01:12.620 --> 00:01:19.920
pip-tools is a package that combines, like, it has a couple commands, pip compile and pip sync,

00:01:19.920 --> 00:01:25.680
which are ways to work with pip-based, usage-based packages.

00:01:25.680 --> 00:01:39.820
And I'm not going to really get into that too much, but what I found was interesting was there's an article recently written by Hynek that is called Python Application Dependency Management in 2018.

00:01:40.780 --> 00:01:43.540
So, basically, he's got a use case.

00:01:43.540 --> 00:01:48.500
He's working in DevOps or a DevOps problem space right here.

00:01:49.220 --> 00:01:59.580
And the requirements he's got for doing packaging is he wants to be able to specify immediate dependencies, like a requirement.text or something.

00:02:00.280 --> 00:02:04.040
But then be able to have a tool resolve the dependency tree.

00:02:04.040 --> 00:02:08.900
So, I know I need Django, but if Django needs a bunch of stuff, I don't want to have to specify all that.

00:02:09.400 --> 00:02:12.600
And then, hopefully, have hashes like the lock files.

00:02:12.600 --> 00:02:16.780
And then integrate these with talks so that you can run tests.

00:02:16.780 --> 00:02:26.860
And then, also, the last one is in deploying servers, I don't want to actually have to activate, like, a virtual environment and then install everything.

00:02:26.860 --> 00:02:35.780
I want to be able to install dependencies, an application and a dependency, into a virtual environment without having to actually go in there and do it.

00:02:36.020 --> 00:02:45.960
Those all seem reasonable, but so far, he's tried PIPM, he's tried Poetry, and right now he's sticking with pip Tools-based solution.

00:02:45.960 --> 00:02:48.580
Like using the pip Tools thing itself or just PIP?

00:02:48.580 --> 00:02:50.120
A combination of them.

00:02:50.120 --> 00:02:55.220
Because being able to, you can't just use pip alone for a lot of this stuff.

00:02:55.220 --> 00:02:59.080
So, like, for instance, pip Tools is one of the things that you can create hashes with.

00:02:59.080 --> 00:03:02.800
You can create, like, the lock files, essentially.

00:03:02.940 --> 00:03:07.940
And working with multiple requirements files, like a requirements text or, like, a requirements.

00:03:07.940 --> 00:03:15.320
He has a work model, which I haven't seen before, which is sticking multiple requirements files in a requirements directory.

00:03:15.320 --> 00:03:16.560
So, you've got a main.

00:03:16.560 --> 00:03:17.160
Oh, interesting.

00:03:17.160 --> 00:03:23.440
Like a requirements slash main.txt and then a dev.txt for development requirements.

00:03:23.440 --> 00:03:25.860
And then you also have to be able to update them.

00:03:25.860 --> 00:03:33.160
So, occasionally, you've got pinned requirements, but you want to be able to update them to the newest and test that.

00:03:33.160 --> 00:03:37.720
So, all these things, it requires, like, a work model that should...

00:03:37.720 --> 00:03:39.040
These are reasonable requests.

00:03:39.580 --> 00:03:44.840
One of the things I really liked about this was it was just, basically, we have a very...

00:03:44.840 --> 00:03:47.040
We have an environment now that we're...

00:03:47.040 --> 00:03:48.760
We want to be able to...

00:03:48.760 --> 00:03:59.380
I think it's a good thing we want to be able to not slam people for, like, make fun of or bash on different projects too much.

00:03:59.760 --> 00:04:04.480
But you also want to be able to be honest and say, hey, I tried this thing and it didn't work for me.

00:04:04.480 --> 00:04:11.160
And so, one of the things I liked about this is I think it's a good example article of saying, hey, this was my use case.

00:04:11.160 --> 00:04:12.080
I tried this thing.

00:04:12.080 --> 00:04:15.780
This thing didn't quite work for me and here's why.

00:04:15.780 --> 00:04:22.180
But also, don't slam the people who made that thing because I think it's cool that they're working on the problem.

00:04:22.180 --> 00:04:24.320
It just didn't work quite right for me yet.

00:04:24.320 --> 00:04:35.680
Yeah, this whole package management, package tooling stuff, dependency tooling, it feels a little bit like the editor wars, like, don't tell me to use Vim.

00:04:35.680 --> 00:04:38.420
I want to use Emacs or I want to use PyCharm or whatever.

00:04:38.420 --> 00:04:44.360
Not quite, but it seems something like people get into their workflow and, you know, they really like their workflow and they kind of want to stick with it.

00:04:44.360 --> 00:04:44.620
Yeah.

00:04:44.620 --> 00:04:46.920
I think there's also some limitations of some of these tools.

00:04:46.920 --> 00:04:50.040
They're built to address different problems than the one you're trying to solve.

00:04:50.040 --> 00:04:50.340
Right.

00:04:50.340 --> 00:04:52.280
They're not one-size-fits-all things.

00:04:52.560 --> 00:04:56.420
I find it refreshing because I actually really like the idea of poetry.

00:04:56.420 --> 00:05:07.120
Actually, I like the idea of Pip-Am-Vam poetry, but I don't have any specifics right now, but I jumped in and tried to use it in some of my workflows.

00:05:07.120 --> 00:05:12.340
Like, some of the things I tried just didn't quite work.

00:05:12.340 --> 00:05:14.920
So I have to go back to old ways.

00:05:15.100 --> 00:05:15.280
Yeah.

00:05:15.280 --> 00:05:16.340
I mean, I guess that makes sense.

00:05:16.340 --> 00:05:22.900
The more that those tools try to do for you all at once, the more likely they are to not exactly fit your workflow.

00:05:22.900 --> 00:05:23.500
Yeah.

00:05:23.500 --> 00:05:23.760
Yeah.

00:05:23.760 --> 00:05:39.320
So one way that's really cool to extend applications would be to have the ability for someone to just drop a file into a directory, accessing a common API and have that just become part of your app or part of the capabilities of your app.

00:05:39.320 --> 00:05:39.500
Right.

00:05:39.520 --> 00:05:40.420
Like a plugin, right?

00:05:40.420 --> 00:05:40.760
Yeah.

00:05:40.760 --> 00:05:41.420
Yeah.

00:05:41.420 --> 00:05:41.920
That'd be cool.

00:05:41.920 --> 00:05:45.260
So there's a cool library called PluginLib.

00:05:45.260 --> 00:05:46.900
PluginLib.

00:05:46.900 --> 00:05:50.460
P-L-U-G-I-N-L-I-B.

00:05:50.460 --> 00:05:51.460
Yeah.

00:05:51.540 --> 00:05:52.520
So really nice.

00:05:52.520 --> 00:05:55.340
And it addresses this problem in a couple of ways.

00:05:55.340 --> 00:06:00.940
And when I first heard about this, I'm like, well, can you just put, you know, like a file in a directory and be good with it?

00:06:00.940 --> 00:06:02.020
You know, just try to load it.

00:06:02.020 --> 00:06:08.760
But the more I looked at what this library is doing, it's actually solving a lot of problems for us.

00:06:08.760 --> 00:06:13.860
For one, it's an interesting example of metaclasses and programming with metaclasses.

00:06:13.860 --> 00:06:17.860
But you don't really have to deal with it because you just use the API and it works.

00:06:17.860 --> 00:06:23.700
But one of the things, plugins are validated when they're loaded instead of when they're used, right?

00:06:23.700 --> 00:06:24.960
Right away, they're validated.

00:06:24.960 --> 00:06:27.480
Make sure everything fits the API.

00:06:27.480 --> 00:06:34.040
They can be loaded through either file paths, through entry points, through module names, and so on.

00:06:34.040 --> 00:06:37.580
You could have multiple versions of the same plugin.

00:06:37.580 --> 00:06:39.440
Oh, interesting.

00:06:39.440 --> 00:06:40.500
Yeah, pretty interesting.

00:06:40.860 --> 00:06:41.960
You can blacklist them.

00:06:41.960 --> 00:06:49.400
So if somebody puts a, you know, some kind of plugin there, you're like, no, we're not going to allow you to load this even if we find it, you know, configure something like that.

00:06:49.400 --> 00:06:51.140
You can group them.

00:06:51.140 --> 00:06:57.600
You can have conditionals like this plugin works on macOS but not on Linux, for example.

00:06:57.600 --> 00:06:58.920
All sorts of cool stuff like that.

00:06:58.920 --> 00:07:04.160
So if you were thinking about having this extensible plugin model, you know, give plugin them a look.

00:07:04.160 --> 00:07:09.980
It looks like it handles a pretty simple problem but has a lot of support for you while it's doing it.

00:07:10.080 --> 00:07:12.040
Yeah, this is pretty neat.

00:07:12.040 --> 00:07:13.460
Just check this out.

00:07:13.460 --> 00:07:17.540
Yeah, you know, I just don't work on any apps that really, that makes a lot of sense for me.

00:07:17.540 --> 00:07:20.160
But if I did, I would definitely want to have a look at that.

00:07:20.160 --> 00:07:27.240
Yeah, it looks like it's based on, or partly based on abstract methods of class hierarchies.

00:07:27.240 --> 00:07:27.880
Yeah.

00:07:28.020 --> 00:07:40.060
And I think I remember looking at this, and this doesn't scare me off, but the particular application I was working with, we didn't have any classes uses anywhere, and I didn't really want to introduce them for this.

00:07:40.060 --> 00:07:45.360
You're like, let's throw in some abstract-based classes and hierarchies do a thing that doesn't even use classes.

00:07:45.360 --> 00:07:45.620
Yeah.

00:07:45.620 --> 00:07:46.880
Yeah, that makes sense.

00:07:46.880 --> 00:07:55.980
But at the same time, writing a plugin for an application is a very specific need, and I think it's fine for if it didn't match the model of the rest of your system.

00:07:56.560 --> 00:07:56.960
Yeah.

00:07:56.960 --> 00:07:57.540
Something to look into.

00:07:57.540 --> 00:07:57.860
Cool.

00:07:57.860 --> 00:07:58.660
Yeah, for sure.

00:07:58.660 --> 00:07:59.740
So what do you got for us next?

00:07:59.740 --> 00:08:03.020
For some reason, I'm a little interested in testing sometimes.

00:08:03.020 --> 00:08:03.540
Really?

00:08:03.540 --> 00:08:04.120
Yeah.

00:08:04.120 --> 00:08:04.560
Yeah.

00:08:04.560 --> 00:08:05.080
I'm surprised.

00:08:05.280 --> 00:08:07.600
One of the PyBytes guys, Bob Belderboss.

00:08:07.600 --> 00:08:08.440
Belderboss?

00:08:08.440 --> 00:08:13.140
He wrote an article called, How to Test Your Django App with Selenium and pytest.

00:08:13.140 --> 00:08:17.160
And yeah, pytest is one of my favorite things, too.

00:08:17.160 --> 00:08:22.000
It's a really nice write-up of, I'm going to quote the beginning of it.

00:08:22.000 --> 00:08:26.660
It says, in this article, I will show you how to test a Django app with pytest and Selenium.

00:08:27.260 --> 00:08:31.300
One of the things I was intrigued by is they don't use a toy app.

00:08:31.300 --> 00:08:37.780
They use their Code Challenges platform and compare the logged out homepage versus the logged in dashboard.

00:08:38.780 --> 00:08:42.900
And I think that's really cool and brave of them to publish it.

00:08:42.900 --> 00:08:44.520
This is how we're testing our own stuff.

00:08:44.520 --> 00:08:46.100
Publicly.

00:08:46.100 --> 00:08:46.660
On the internet.

00:08:46.660 --> 00:08:47.660
Yeah, no, it's really cool.

00:08:47.660 --> 00:08:48.020
Yeah.

00:08:48.020 --> 00:08:50.980
And it talks through, I probably wouldn't have done it.

00:08:50.980 --> 00:08:59.080
Part of the project setup, they're using the activate and deactivate of a virtual environment to load environmental variables.

00:08:59.080 --> 00:09:08.580
I don't have specific links to it, but I know there's ways to do this within pytest itself as well, using something else.

00:09:08.860 --> 00:09:09.520
Yeah, I know.

00:09:09.520 --> 00:09:19.440
It's kind of cool to do that, but at the same time, it makes it hard to, it makes it a little bit hard to, I think it's kind of hidden in the whole setup, right?

00:09:19.440 --> 00:09:21.060
There's nowhere in the code that you see that.

00:09:21.060 --> 00:09:27.140
And you basically accomplish that by editing the activate script to set some environment variables when you activate the environment.

00:09:27.140 --> 00:09:32.760
But if you go to another machine, you check it out again, some other location, that kind of stuff is not there.

00:09:32.760 --> 00:09:35.240
So it's, you know, it's hard to store passwords and secrets.

00:09:35.240 --> 00:09:38.380
You don't want them on, they definitely don't want to put them into this repo.

00:09:38.380 --> 00:09:39.380
Right.

00:09:39.380 --> 00:09:40.400
So what are you going to do?

00:09:40.400 --> 00:09:41.100
But it is tricky.

00:09:41.100 --> 00:09:41.440
Yeah.

00:09:41.440 --> 00:09:45.740
And you wouldn't be able to use Tox with this because Tox is going to create its own virtual environment.

00:09:45.740 --> 00:09:50.120
But yeah, so I'll have to, maybe I'll have to write up an example of how I would tackle that.

00:09:50.120 --> 00:09:51.420
Yeah, that's actually would be interesting.

00:09:51.740 --> 00:10:01.900
But the rest of it's, even though they're not using, mocking out a database itself, they do show how to do that, how to get the database set up.

00:10:01.900 --> 00:10:05.460
And then, yeah, anyway, it's just kind of a cool example.

00:10:05.460 --> 00:10:07.100
I love working with Selenium.

00:10:07.800 --> 00:10:09.440
And this is a neat write-up.

00:10:09.440 --> 00:10:09.820
It's cool.

00:10:09.820 --> 00:10:11.440
You know, maybe not everyone knows about Selenium.

00:10:11.440 --> 00:10:16.220
They maybe know about web scraping and maybe trying to test it that way.

00:10:16.220 --> 00:10:19.360
They also maybe know about testing, like, inside of apps.

00:10:19.360 --> 00:10:24.020
Maybe just quickly tell folks who are not totally familiar, what is this like?

00:10:24.020 --> 00:10:24.320
Oh, yeah.

00:10:24.320 --> 00:10:26.300
Is this like request or what is this?

00:10:26.300 --> 00:10:30.200
What Selenium does is it really just opens up while it's running.

00:10:30.200 --> 00:10:35.020
You don't have to interact with, like, what you see is what you get or anything.

00:10:35.020 --> 00:10:38.700
You're using Python code to control a web browser.

00:10:38.700 --> 00:10:41.680
And you can use it in a couple of ways.

00:10:41.680 --> 00:10:44.920
You can have, like, a web browser that you can actually see.

00:10:44.920 --> 00:10:47.020
So while it's running, it pops up on your screen.

00:10:47.560 --> 00:10:56.380
Or, like, for instance, Chrome and I believe Firefox also has a headless version where it can operate without actually –

00:10:56.380 --> 00:10:59.500
they just call it headless because it doesn't pop anything on your screen.

00:10:59.500 --> 00:11:04.240
But other than that, it interacts just like it, as if it was open.

00:11:04.240 --> 00:11:10.300
And you can, you know, navigate the DOM and you can select things and activate things.

00:11:10.560 --> 00:11:19.560
And one of the benefits of going through this using Selenium is that all the JavaScript stuff is loaded also through loading everything.

00:11:19.560 --> 00:11:25.660
You can interact with it as if it were just literally in your browser because it's literally in a hidden browser in the headless mode.

00:11:25.660 --> 00:11:27.680
So, yeah, it's definitely an interesting way to do it.

00:11:27.680 --> 00:11:32.420
And, like, his example, they're like, let's take these things and put it in the username, put it in the password, and then click this button.

00:11:32.420 --> 00:11:35.860
You know, find this button and click it, the login button and stuff like that.

00:11:35.860 --> 00:11:36.580
It's really unique.

00:11:37.240 --> 00:11:44.520
Okay, so before we get on to FluPi, which is the next thing I want to talk about, let's talk about DigitalOcean real quick.

00:11:44.520 --> 00:11:51.160
So you probably built a lot of apps, have a lot of cloud resources running so far this year.

00:11:51.160 --> 00:11:57.260
But, you know, which one goes with which project, that's always been something that's driven me crazy about other places.

00:11:57.260 --> 00:12:01.520
Like, go to AWS and there's, like, just tons of virtual machines running and stuff.

00:12:01.520 --> 00:12:02.300
You're like, what is this?

00:12:02.300 --> 00:12:02.940
Do we need these?

00:12:02.940 --> 00:12:04.100
I don't even know anymore.

00:12:04.100 --> 00:12:05.960
So it would be really nice if we could group them together.

00:12:06.100 --> 00:12:16.000
And at DigitalOcean, they create this idea called projects where you can group droplets and load balancers and IPs and all that into application categories that they work with.

00:12:16.000 --> 00:12:18.260
Like, you could have, you know, your app.

00:12:18.260 --> 00:12:22.540
You could have a your app sandbox testing Q&A environment.

00:12:22.540 --> 00:12:25.020
And you could have, you know, multiple ones of those and so on.

00:12:25.020 --> 00:12:28.680
So really nice, super cool way to organize your environment in DigitalOcean.

00:12:29.100 --> 00:12:32.680
Check them out at pythonbytes.fm/DigitalOcean.

00:12:32.680 --> 00:12:37.360
And like I said, for people who are new users, you get $100 free credit to play around.

00:12:37.360 --> 00:12:39.300
So that's also really nice to have.

00:12:39.300 --> 00:12:39.820
Very nice.

00:12:39.940 --> 00:12:41.940
So I'm a big fan of fluent APIs in general.

00:12:41.940 --> 00:12:43.940
And, you know, maybe not everyone knows the term.

00:12:43.940 --> 00:12:51.960
It's like when you take a thing and you call a function on it and that function itself returns back the same object.

00:12:52.100 --> 00:13:01.160
So instead of saying I've got a variable and I first initialize it to a list and then I do some operation on that list and it changes it.

00:13:01.160 --> 00:13:02.080
And I do another operation.

00:13:02.080 --> 00:13:03.680
Maybe it turns it into a set.

00:13:03.680 --> 00:13:05.200
Then I pass that set somewhere else.

00:13:05.200 --> 00:13:09.860
I could just say, you know, like, let's say customers or let's say numbers.

00:13:09.860 --> 00:13:10.700
This is an example.

00:13:10.700 --> 00:13:11.200
It's easier.

00:13:11.200 --> 00:13:17.960
So say numbers.map.filter.skip.take.orderby, right?

00:13:17.960 --> 00:13:20.180
Just like one after another all in one line.

00:13:20.180 --> 00:13:22.500
That's the fluent API in general.

00:13:22.500 --> 00:13:26.140
So the thing that I want to point out is actually two libraries.

00:13:26.140 --> 00:13:32.380
So you can take your flavor of this fluent API and apply it to collections.

00:13:32.380 --> 00:13:36.600
Because there's often more than one thing you might want to do to a collection.

00:13:36.600 --> 00:13:38.440
You might want to change its values.

00:13:38.440 --> 00:13:39.640
You might want to filter it.

00:13:39.640 --> 00:13:43.980
You might want to only take a couple of them or put them into groups and things like that.

00:13:43.980 --> 00:13:48.660
So there's one called, I originally wanted to pronounce it as fluffy, but flupy.

00:13:48.660 --> 00:13:50.720
Flupy is in fluent Python.

00:13:50.720 --> 00:13:55.660
And it lets you do, well, exactly what I was describing on collections.

00:13:55.660 --> 00:14:03.480
So given any collection, you can upgrade it to a fluent collection by just calling flu and passing the collection.

00:14:03.480 --> 00:14:05.760
And then it has all these operations.

00:14:05.760 --> 00:14:08.320
Like you say .map and pass it a lambda.

00:14:08.920 --> 00:14:15.800
And then on that result, you say .filter, pass another lambda, .chunk to break it into like pages, I believe.

00:14:15.800 --> 00:14:21.300
And .take will like give you only three chunks of five back, for example.

00:14:21.300 --> 00:14:24.340
So you can do that all in effectively one line.

00:14:24.340 --> 00:14:30.960
Now maybe you want to wrap it for readability, but you don't have to like use a bunch of intermediate variables or intermediate collections or anything like that.

00:14:30.960 --> 00:14:31.500
Nice.

00:14:31.840 --> 00:14:32.600
It's like, right?

00:14:32.600 --> 00:14:37.180
And the thing that's really cool is it's all based on yield and generators.

00:14:37.180 --> 00:14:38.440
Really?

00:14:38.440 --> 00:14:39.140
Yeah.

00:14:39.140 --> 00:14:39.580
Yeah.

00:14:39.580 --> 00:14:46.680
So every step in this chain is some generator type of operation, which means you could pass it a billion items.

00:14:47.320 --> 00:14:51.440
And it's not going to like filter a billion items and map a billion items and all that.

00:14:51.440 --> 00:14:55.540
It's just going to take them one at a time through this sort of data pipeline that you build.

00:14:55.540 --> 00:14:56.140
Nice.

00:14:56.140 --> 00:14:56.500
Yeah.

00:14:56.500 --> 00:14:58.820
So the example that I put in the show notes uses count.

00:14:59.620 --> 00:15:01.400
Like just all of it.

00:15:01.400 --> 00:15:03.240
All of it.

00:15:03.240 --> 00:15:09.080
But, you know, it ends with a break it into like pages of five and take three pages.

00:15:09.080 --> 00:15:09.540
Right.

00:15:09.540 --> 00:15:11.120
So it only takes 15 items out.

00:15:11.120 --> 00:15:11.480
Okay.

00:15:11.480 --> 00:15:18.020
Even though you pass it in the way that that works, of course, with generators, because you can just pull through till like the last part stops pulling.

00:15:18.020 --> 00:15:21.120
And then it basically stops iterating this infinite collection.

00:15:21.120 --> 00:15:21.700
Really nice.

00:15:21.820 --> 00:15:26.940
In the little example you give, you do like a four item in pipeline at the end too.

00:15:26.940 --> 00:15:30.260
So you can use the result as a generator also.

00:15:30.260 --> 00:15:31.080
Yeah, exactly.

00:15:31.080 --> 00:15:40.340
Because it's a generator, like that whole sequence of operations doesn't actually execute until you iterate it, until you pass it to something that itself does.

00:15:40.340 --> 00:15:43.400
Like pass it to a list or to a dictionary or something like that.

00:15:43.400 --> 00:15:43.600
Yeah.

00:15:43.600 --> 00:15:45.540
Or use it in another one of these pipelines.

00:15:45.540 --> 00:15:50.600
So it's really cool to build up these data pipeline, data transformation things using FluPyde.

00:15:50.600 --> 00:15:50.780
Nice.

00:15:51.260 --> 00:15:52.900
Yeah, and they also have a CLI.

00:15:52.900 --> 00:15:59.020
So you can do this kind of stuff from the CLI for this guy's data science team.

00:15:59.020 --> 00:16:07.940
Not everyone necessarily is great with Linux, but they would like to do a little bit more with these tools and with these ideas, these Python data pipelines.

00:16:07.940 --> 00:16:13.000
So you can actually execute these sorts of operations on the command line as well.

00:16:13.000 --> 00:16:13.880
I like it.

00:16:13.880 --> 00:16:16.440
And then do you want to cover ask?

00:16:16.440 --> 00:16:16.980
I do.

00:16:16.980 --> 00:16:18.260
I want to cover ask.

00:16:18.260 --> 00:16:19.660
So ASQ.

00:16:19.660 --> 00:16:21.020
So this is another one.

00:16:21.020 --> 00:16:24.460
I don't think we've covered it, but I guess it's possible that we have.

00:16:24.460 --> 00:16:27.160
There's kind of two philosophies here.

00:16:27.160 --> 00:16:29.980
They both do the same general thing.

00:16:29.980 --> 00:16:32.480
FluPy and ask.

00:16:32.480 --> 00:16:33.460
ASQ.

00:16:33.460 --> 00:16:40.340
But the operations that you get to apply to these Fluent collections changes or varies.

00:16:40.520 --> 00:16:43.620
So the FluPyde is like map and filter and so on.

00:16:43.620 --> 00:16:54.080
And the other idea is if we work with this link operation, this link API, which comes through the C# space and is actually, I think, one of the better parts of C#.

00:16:54.600 --> 00:17:00.920
It really maps very closely to the SQL query language with where, select, order by, and so on.

00:17:00.920 --> 00:17:06.300
So ask is very, very similar to this for Python.

00:17:06.560 --> 00:17:08.120
It's exactly the same thing.

00:17:08.120 --> 00:17:10.140
A Fluent API on top of collections.

00:17:10.780 --> 00:17:15.380
But here's a collection of words like 0, 1, 2, 3 as written out.

00:17:15.380 --> 00:17:23.460
And you say query of words dot order by len, then by, and you pass it just here.

00:17:23.460 --> 00:17:25.840
It's just ordering alphabetically, but you could pass something else.

00:17:26.400 --> 00:17:29.320
And take five, select string dot upper to list.

00:17:29.320 --> 00:17:34.720
And what you get back is a list of the first five in that ordered by length one.

00:17:34.720 --> 00:17:37.620
So the short ones, like 1, 6, 10, and so on.

00:17:37.620 --> 00:17:47.620
To me, the database-like operators of ASQ is a little bit nicer than the map, filter, reduce syntax of the other one.

00:17:47.620 --> 00:17:50.000
But they're both valuable, and they both have the same idea.

00:17:50.000 --> 00:17:53.000
So I kind of thought it'd be fun to just cover them both here.

00:17:53.000 --> 00:17:59.200
I think it's good there's both of them because it kind of depends on what sort of mindset you're thinking about.

00:17:59.200 --> 00:18:01.500
It's a different way to think of similar problems.

00:18:01.500 --> 00:18:05.400
Yeah, but they both solve similar problems in really interesting ways.

00:18:05.400 --> 00:18:06.120
You know what I mean?

00:18:06.120 --> 00:18:07.820
You could say like a list comprehension.

00:18:07.820 --> 00:18:12.120
Okay, well, a list comprehension could do a filter, and it could do a map.

00:18:12.120 --> 00:18:17.240
But it doesn't – I wish there was just a little bit more on those types of things.

00:18:17.240 --> 00:18:22.240
Like, for example, wouldn't it be great if there was a order by clause in a list comprehension?

00:18:22.240 --> 00:18:28.160
Instead of having to do the list comprehension and then do a sorted on top of the result, you know, things like that.

00:18:28.160 --> 00:18:33.220
It's just – it's like you could almost not do these things with list comprehensions, but not quite.

00:18:33.220 --> 00:18:35.100
You can't do a paging and stuff.

00:18:35.100 --> 00:18:38.560
So it's like it just adds that little bit extra that often you really need in practice.

00:18:38.560 --> 00:18:39.900
Yeah, yeah, true.

00:18:39.900 --> 00:18:40.680
Nice.

00:18:41.040 --> 00:18:43.600
So there's a pretty exciting blog that's kicking back into gear?

00:18:43.600 --> 00:18:43.960
Yeah.

00:18:43.960 --> 00:18:48.140
It's a blog called Neopythonic, and it's Guido's blog.

00:18:48.140 --> 00:18:56.920
And the last time we saw him, it looks like the last blog post before November was in July of 2016.

00:18:56.920 --> 00:19:04.440
So one of the benefits of him stepping down as a BDFL is that he can blog now.

00:19:04.440 --> 00:19:05.880
So this is a good –

00:19:05.880 --> 00:19:10.660
Yeah, I think it's – and, you know, the one from July was just him turning off comments because people are spamming us.

00:19:10.660 --> 00:19:11.940
So it was even farther back than that.

00:19:11.940 --> 00:19:15.160
It's great to – it's great to see him getting back into action.

00:19:15.160 --> 00:19:16.080
So we have this.

00:19:16.080 --> 00:19:23.060
We have him doing some more interviews with, like, the MIT podcast video series and whatnot.

00:19:23.060 --> 00:19:24.080
So, yeah, it's really great.

00:19:24.080 --> 00:19:29.700
And a couple of questions – so he's just answering listener questions or student questions, really.

00:19:29.700 --> 00:19:34.780
And a couple of questions are whether to choose a 9-to-5 job or be an entrepreneur.

00:19:34.780 --> 00:19:40.980
And then the other one is, will AI make human software developers redundant?

00:19:41.460 --> 00:19:49.180
And, of course, the answer to the second one is no, because software development is not boring and AI is to replace boring tasks.

00:19:49.180 --> 00:19:51.920
And, like, driving a car, yeah.

00:19:51.920 --> 00:19:58.820
But the 9-to-5 versus entrepreneur is interesting because, as we know, he's worked for other people for a while.

00:19:58.820 --> 00:20:01.200
Yeah, some really interesting places, right?

00:20:01.200 --> 00:20:04.380
Like Google and Dropbox and stuff like that.

00:20:04.660 --> 00:20:14.540
Yeah, I mean, they kind of tied together because at the end of the 9-to-5 question, he said, just be sure to not take a job that can be immediately replaced by a computer.

00:20:14.540 --> 00:20:16.380
Yeah, for sure.

00:20:16.380 --> 00:20:19.760
Did you ever see the posters called Demotivators?

00:20:19.760 --> 00:20:20.680
I think that's what it's called.

00:20:20.680 --> 00:20:22.000
No, it sounds great.

00:20:22.000 --> 00:20:26.700
So you know those posters that, like, corporations will hang up that just, like, make you cringe?

00:20:26.780 --> 00:20:36.220
It'll be, like, an eagle flying over, like, ocean with a sunset, and it'll say, we all soar together, or we can all soar higher.

00:20:36.220 --> 00:20:38.800
Like, something you're just like, whoa, no, come on.

00:20:38.800 --> 00:20:40.020
Who's that supposed to act?

00:20:40.020 --> 00:20:45.200
So Demotivators have pictures like that, but the caption isn't something super positive.

00:20:45.200 --> 00:20:51.380
Like, one example would be there's, like, a hang glider flying over an ocean into a sunset.

00:20:51.960 --> 00:21:01.140
And the caption is something to the effect of, like, it's so great to dream big and to fly out, you know, like, soar towards your dream.

00:21:01.140 --> 00:21:06.920
It's even better to sit on the shore and watch people sink into the ocean when they, you know, it's just, like, stuff like this, right?

00:21:06.920 --> 00:21:16.440
So there's one about what you're talking about here, and it says, see, do you have a boring, it's got some picture of, like, people working together.

00:21:16.440 --> 00:21:17.600
It says, your job is boring.

00:21:17.600 --> 00:21:20.920
So boring that it'll probably be replaced by robots in 10 years.

00:21:21.280 --> 00:21:22.540
You should find a new job.

00:21:22.540 --> 00:21:24.000
But it's got, like, this beautiful picture.

00:21:24.000 --> 00:21:26.300
Maybe I'll try to find it and link to it.

00:21:26.300 --> 00:21:27.260
But, yeah, they're really good.

00:21:27.260 --> 00:21:28.100
Yeah, it's dark.

00:21:28.100 --> 00:21:28.580
Nice.

00:21:28.580 --> 00:21:29.780
Yeah, it's great.

00:21:29.780 --> 00:21:31.960
Great humor.

00:21:31.960 --> 00:21:32.960
All right.

00:21:32.960 --> 00:21:37.260
So the last thing I want to talk about today is something called Anvil.

00:21:37.260 --> 00:21:39.300
And I'm surprised I haven't talked about it on the show.

00:21:39.300 --> 00:21:42.920
I've had Meredith on Talk Python who created this.

00:21:42.920 --> 00:21:45.160
And I think there's several interesting aspects.

00:21:45.160 --> 00:21:46.740
In and of itself, it's interesting.

00:21:46.740 --> 00:21:49.280
But then also how it works.

00:21:49.280 --> 00:21:50.680
Pretty unique.

00:21:50.680 --> 00:21:52.640
And maybe inspires some other folks as well.

00:21:52.640 --> 00:21:59.080
So Anvil is a visual web building tool.

00:21:59.500 --> 00:22:02.620
So what you do is you go there and you log in.

00:22:02.620 --> 00:22:05.600
And it gives you kind of this design surface, right?

00:22:05.600 --> 00:22:10.700
You can go and you've got buttons and text boxes and combo boxes and stuff like that.

00:22:10.700 --> 00:22:13.800
And you can drop them down and interact with them, set some properties.

00:22:13.800 --> 00:22:15.520
And you've got this visual bit.

00:22:15.520 --> 00:22:18.740
And you've got, like, this sort of code part that runs as you interact with it.

00:22:18.740 --> 00:22:23.040
So you've got a visual piece you can work with and a code behind or a code view, they call it.

00:22:23.220 --> 00:22:28.400
And what's really interesting is all of that stuff happens in Python.

00:22:28.400 --> 00:22:33.340
So if you've got, like, a combo box, you want to hook the change event, you don't go and write JavaScript.

00:22:33.340 --> 00:22:42.660
You, like, double-click the little combo box and it takes you to a method that's Python, you know, def, combo box.click or underscore click.

00:22:42.660 --> 00:22:45.200
And that little comment says, write your code here.

00:22:45.200 --> 00:22:45.800
Oh, nice.

00:22:45.800 --> 00:22:48.800
That code is Python code and it runs in your browser.

00:22:48.800 --> 00:22:49.680
That's cool.

00:22:49.680 --> 00:22:55.460
So, you know, we've talked a lot about WebAssembly and some of these other things about how do we get Python in your browser.

00:22:55.460 --> 00:23:07.580
Here is, like, a full web development framework where the majority of your logic runs on the client side written in Python, but then behind the scenes, you know, translated to JavaScript.

00:23:07.580 --> 00:23:08.440
Okay.

00:23:08.440 --> 00:23:09.920
Well, this would be fun to play with.

00:23:09.920 --> 00:23:11.140
Yeah, it's really interesting.

00:23:11.140 --> 00:23:18.020
And then they also have, like, a back-end database and a back-end services where you can write some code that runs in, like, a Docker container or something.

00:23:18.020 --> 00:23:20.880
So you have a server-side bit and a client-side bit.

00:23:20.880 --> 00:23:28.740
But most of the code you write, by default, would probably land up in, you know, if you don't restructure things, probably land up as Python running the browser.

00:23:28.740 --> 00:23:30.380
And it's really quite nice.

00:23:30.380 --> 00:23:37.160
So here's a cool way for people who don't really know that much about web apps but they know Python.

00:23:37.340 --> 00:23:43.820
A really nice way to quickly get up to speed with sort of what I think of as, like, forms over data type web apps, right?

00:23:43.820 --> 00:23:45.040
Here's a grid.

00:23:45.040 --> 00:23:46.880
Here's a bunch of input boxes.

00:23:46.880 --> 00:23:50.040
I need to enter that data, save it, put it into a list, and show it to you.

00:23:50.040 --> 00:23:55.320
Like, really quite common types of apps for sort of intranet type apps.

00:23:55.320 --> 00:23:56.840
So check that out.

00:23:56.840 --> 00:23:57.720
It's pretty cool.

00:23:58.000 --> 00:24:01.560
And it does have a paid version, but there's also a free version.

00:24:01.560 --> 00:24:07.920
So maybe it's interesting to people, but I think it's just interesting as a case study of how they're using Python in the browser as well.

00:24:07.920 --> 00:24:08.400
Yeah.

00:24:08.400 --> 00:24:08.880
Cool.

00:24:08.880 --> 00:24:09.180
Cool.

00:24:09.180 --> 00:24:09.600
Yeah.

00:24:09.600 --> 00:24:09.960
All right.

00:24:09.960 --> 00:24:12.740
Well, that's it for our six items this week.

00:24:12.740 --> 00:24:14.740
Brian, you got anything else you want to share with everyone?

00:24:14.740 --> 00:24:15.880
Yeah, I want to share.

00:24:15.880 --> 00:24:17.040
I've got big news.

00:24:17.040 --> 00:24:18.240
Big, big news.

00:24:18.740 --> 00:24:24.520
Anyway, not huge news, but I wrote a book called Python Testing with pytest.

00:24:24.520 --> 00:24:25.220
Did you know that?

00:24:25.220 --> 00:24:26.060
Yes, I did.

00:24:26.060 --> 00:24:26.460
It's awesome.

00:24:26.460 --> 00:24:28.140
Yeah.

00:24:28.140 --> 00:24:31.140
So we talked about it a lot for the first year we were doing this.

00:24:31.140 --> 00:24:35.060
But the news related to that is there's a second printing out.

00:24:35.060 --> 00:24:42.820
So I updated it, ran everything with Python 3.7 and the modern version of pytest at the time.

00:24:43.480 --> 00:24:50.500
And then also fixed a whole bunch of the errata of people that pointed out, things like just little typos and things like that.

00:24:50.500 --> 00:24:53.660
And updated the source code, stuff like that.

00:24:53.660 --> 00:24:54.220
Nice.

00:24:54.220 --> 00:24:54.900
Congratulations.

00:24:54.900 --> 00:24:55.720
So it's available.

00:24:55.720 --> 00:24:56.860
P2 is available.

00:24:56.860 --> 00:24:58.320
They call it P2.

00:24:58.320 --> 00:25:00.000
It must be second printing P2.

00:25:00.000 --> 00:25:00.540
Anyway.

00:25:00.540 --> 00:25:01.620
How about you?

00:25:01.620 --> 00:25:02.040
Any news?

00:25:02.040 --> 00:25:02.940
No, nothing.

00:25:02.940 --> 00:25:03.920
Nothing right now.

00:25:03.920 --> 00:25:10.720
I'm in just massive podcast recording mode trying to get ready for the holidays, both so that I can take a week or two off.

00:25:11.400 --> 00:25:18.940
And it's also hard to get guests to come on over the holidays because obviously they want to do just chill out stuff.

00:25:18.940 --> 00:25:20.880
It's been all recording all the time.

00:25:20.880 --> 00:25:23.900
So I have cool things I've recorded, but they're not out yet.

00:25:23.900 --> 00:25:25.880
We've even done one together, right?

00:25:25.880 --> 00:25:26.480
That'll be fun.

00:25:26.480 --> 00:25:27.180
Yeah.

00:25:27.180 --> 00:25:31.600
And then I had you on mine too because I have the same problem you do.

00:25:31.600 --> 00:25:32.880
That's right.

00:25:33.380 --> 00:25:36.800
Yeah, we've got a lot of fun stuff coming out on Testing Code and Talk Python.

00:25:36.800 --> 00:25:39.320
And of course, as always, on Python Bytes.

00:25:39.320 --> 00:25:41.980
So we're not taking a break over Christmas break.

00:25:41.980 --> 00:25:44.280
We're going to try to just go all the way through.

00:25:44.280 --> 00:25:45.100
That's right.

00:25:45.100 --> 00:25:51.420
We may physically be taking a break, but due to the magic of time shifting and podcasting, the podcast will not be taking a break.

00:25:51.420 --> 00:25:52.220
Yes, wonderful.

00:25:52.220 --> 00:25:53.360
Yeah, awesome.

00:25:53.360 --> 00:25:54.700
Well, thanks for talking to me this morning.

00:25:54.820 --> 00:25:55.340
Yeah, you bet.

00:25:55.340 --> 00:25:55.780
Bye.

00:25:55.780 --> 00:25:56.020
Bye.

00:25:56.020 --> 00:25:57.820
Thank you for listening to Python Bytes.

00:25:57.820 --> 00:26:00.340
Follow the show on Twitter via at Python Bytes.

00:26:00.340 --> 00:26:03.240
That's Python Bytes as in B-Y-T-E-S.

00:26:03.240 --> 00:26:06.640
And get the full show notes at pythonbytes.fm.

00:26:06.640 --> 00:26:11.000
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:11.000 --> 00:26:13.700
We're always on the lookout for sharing something cool.

00:26:13.700 --> 00:26:17.080
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:17.080 --> 00:26:20.600
Thank you for listening and sharing this podcast with your friends and colleagues.

