
00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.000 --> 00:00:10.500
This is episode 106, recorded November 30th, 2018. I'm Michael Kennedy.


00:00:10.500 --> 00:00:11.500
And I'm Brian Otkin.


00:00:11.500 --> 00:00:12.500
Hey Brian, how you doing?


00:00:12.500 --> 00:00:15.000
I'm good. It's early in the morning, man.


00:00:15.000 --> 00:00:21.000
Yeah, good morning, man. We're recording a little earlier than our average lunchtime get-together.


00:00:21.000 --> 00:00:26.500
But, you know, this is what we do for our audience. We get up when it's dark and we talk about Python.


00:00:26.500 --> 00:00:27.500
Yes, we do.


00:00:27.500 --> 00:00:31.500
So before we get on to the topics, I just want to say thank you to DigitalOcean.


00:00:31.500 --> 00:00:34.500
They're sponsoring the show like they did for much of this year.


00:00:34.500 --> 00:00:37.500
So check them out at pythonbytes.fm/digitalocean.


00:00:37.500 --> 00:00:39.500
Get $100 free credit for new users.


00:00:39.500 --> 00:00:45.500
Speaking of cloud hosting and whatnot, one of the main innovations that's been coming along here


00:00:45.500 --> 00:00:47.500
the last couple of years is this whole idea of DevOps, right?


00:00:47.500 --> 00:00:48.500
I don't know.


00:00:48.500 --> 00:00:52.500
DevOps has been around for a while and really important for a lot of people.


00:00:52.500 --> 00:00:56.500
But I think Python is getting involved more and more with DevOps.


00:00:56.500 --> 00:01:00.900
We've also talked about packaging tools and dependency management a lot on


00:01:00.900 --> 00:01:04.660
This podcast and others are others as well


00:01:04.660 --> 00:01:08.500
This is actually we've talked about poetry and a band


00:01:08.500 --> 00:01:14.500
I don't know if we've covered pip tools before but I don't think we have pip tools is a package that


00:01:14.500 --> 00:01:21.860
Combines like it has a couple commands pip compile and pip sync which are ways to work with


00:01:22.820 --> 00:01:26.040
pip based usage based packages and


00:01:26.040 --> 00:01:33.840
I'm not gonna really get into that too much. But what what I found was interesting was there's a an article recently written by


00:01:33.840 --> 00:01:36.240
Enix that is called


00:01:36.240 --> 00:01:40.800
Python application dependency management in 2018. So


00:01:40.800 --> 00:01:46.500
Basically, he's got a use case. He's working in DevOps or a DevOps


00:01:47.060 --> 00:01:52.900
problem space right here and he wants the requirements he's got for doing packaging is


00:01:52.900 --> 00:01:59.580
He wants to be able to specify immediate dependencies like a requirement text or something


00:01:59.580 --> 00:02:04.020
But then and then be able to have a tool resolve the dependency tree


00:02:04.020 --> 00:02:07.260
So I know I need Django, but if Django needs a bunch of stuff


00:02:07.260 --> 00:02:12.380
I don't want to specify all that and then hopefully have hashes like the lock files


00:02:12.860 --> 00:02:17.060
and then integrate these into with talks so that you can run tests.


00:02:17.060 --> 00:02:21.060
And then also the last one is in deploying servers,


00:02:21.060 --> 00:02:25.460
I don't want to actually have to activate them like a virtual environment


00:02:25.460 --> 00:02:27.260
and then install everything.


00:02:27.260 --> 00:02:29.460
I want to be able to install dependencies


00:02:29.460 --> 00:02:32.660
and application and dependency into a virtual environment


00:02:32.660 --> 00:02:36.060
without having to actually go in there and do it.


00:02:36.060 --> 00:02:38.660
Those all seem reasonable, but so far,


00:02:38.660 --> 00:02:41.860
he's tried pipenv, he's tried poetry,


00:02:41.860 --> 00:02:46.120
And right now he's sticking with pip-tools based solution.


00:02:46.120 --> 00:02:48.760
Like using the pip-tools thing itself or just PIP?


00:02:48.760 --> 00:02:52.460
A combination of them because being able to,


00:02:52.460 --> 00:02:55.260
you can't just use pip alone for a lot of this stuff.


00:02:55.260 --> 00:02:59.120
So like for instance pip-tools is one of the things that you can create hashes with.


00:02:59.120 --> 00:03:03.120
You can create like the lock files essentially.


00:03:03.120 --> 00:03:08.120
And working with multiple requirements files like a requirements text or like a requirements.


00:03:08.120 --> 00:03:11.620
He has a work model which I haven't seen before which is


00:03:11.620 --> 00:03:15.600
sticking multiple requirements files in a requirements directory.


00:03:15.600 --> 00:03:17.600
So you've got a main,


00:03:17.600 --> 00:03:23.820
a requirements/main.txt and then a dev.txt for development requirements.


00:03:23.820 --> 00:03:27.380
And then you also have to be able to update them. So occasionally,


00:03:27.380 --> 00:03:30.180
you've got pinned requirements, but you want to


00:03:30.180 --> 00:03:33.220
be able to update them to the newest and test that.


00:03:33.220 --> 00:03:37.420
So all these things, it requires like a work model that should,


00:03:37.420 --> 00:03:39.420
these are reasonable requests.


00:03:39.420 --> 00:03:59.420
One of the things I really liked about this was it was just basically we have an environment now that we want to be able to, I think it's a good thing, we want to be able to not slam people for like make fun of or bash on different projects too much.


00:03:59.420 --> 00:04:04.420
But you also want to be able to be honest and say, "Hey, I tried this thing and it didn't work for me."


00:04:04.420 --> 00:04:09.900
And so one of the things I liked about this is I think it's a good example article of of saying hey


00:04:09.900 --> 00:04:13.340
This was my use case. I tried this thing this thing didn't quite work


00:04:13.340 --> 00:04:16.740
For me and here's why but also


00:04:16.740 --> 00:04:22.220
Don't slam the people who made that thing because I think it's cool that they're working on the problem


00:04:22.220 --> 00:04:26.660
It just didn't work quite right for me yet. Yeah, this whole package


00:04:26.660 --> 00:04:30.520
management package tooling stuff dependency tooling


00:04:31.100 --> 00:04:35.560
It feels a little bit like the editor wars like don't tell me use them


00:04:35.560 --> 00:04:38.980
I want to use emacs or I want to use by charm or whatever not quite


00:04:38.980 --> 00:04:41.300
But it seems something like people get into their workflow


00:04:41.300 --> 00:04:44.320
And you know they they really like their workflow, and they kind of want to stick with it


00:04:44.320 --> 00:04:46.780
Yeah, I think it's also some limitations of some of these tools


00:04:46.780 --> 00:04:50.620
They're built to address different problems than the one you're trying to solve right there


00:04:50.620 --> 00:04:56.500
Not one size fits all things and I found it refreshing because I I actually really like the idea of poetry


00:04:56.960 --> 00:05:02.760
Actually, I like the idea of pitman van poetry, but I in I don't have any specifics right now


00:05:02.760 --> 00:05:07.000
But I jumped in and tried to use it in some of my workflows


00:05:07.000 --> 00:05:09.040
Like he Nick


00:05:09.040 --> 00:05:14.740
Some of the things I tried just didn't quite work. So I have to go back to old ways


00:05:14.740 --> 00:05:15.260
Yeah


00:05:15.260 --> 00:05:19.240
I mean, I guess that makes sense it the more that those tools try to do for you all at once


00:05:19.240 --> 00:05:24.360
The more likely they are to not exactly fit your workflow. Yeah. Yeah, so


00:05:24.920 --> 00:05:27.980
One way that's really cool to extend applications


00:05:27.980 --> 00:05:30.160
would be to have the ability for someone


00:05:30.160 --> 00:05:33.360
to just drop a file into a directory,


00:05:33.360 --> 00:05:36.560
accessing a common API and have that just become


00:05:36.560 --> 00:05:39.360
part of your app or part of the capabilities of your app.


00:05:39.360 --> 00:05:40.520
Right, like a plugin, right?


00:05:40.520 --> 00:05:41.440
- Yeah, yeah.


00:05:41.440 --> 00:05:42.280
- That'd be cool.


00:05:42.280 --> 00:05:46.200
So there's a cool library called PluginLib.


00:05:46.200 --> 00:05:47.040
PluginLib.


00:05:47.040 --> 00:05:51.280
P-L-U-G-I-N, Lib.


00:05:51.280 --> 00:05:52.600
Yeah, so really nice.


00:05:52.600 --> 00:05:55.400
And it addresses this problem in a couple ways.


00:05:55.400 --> 00:05:56.560
And when I first heard about this, I'm like,


00:05:56.560 --> 00:05:59.480
well, can't you just put a file in a directory


00:05:59.480 --> 00:06:02.700
and be good with it, just try to load it?


00:06:02.700 --> 00:06:06.220
But the more I looked at what this library is doing,


00:06:06.220 --> 00:06:09.520
it's actually solving a lot of problems for us.


00:06:09.520 --> 00:06:12.680
For one, it's an interesting example of metaclasses


00:06:12.680 --> 00:06:14.080
and programming with metaclasses,


00:06:14.080 --> 00:06:15.600
but you don't really have to deal with it


00:06:15.600 --> 00:06:18.760
because you just use the API and it works.


00:06:18.760 --> 00:06:21.480
But one of the things, plugins are validated


00:06:21.480 --> 00:06:24.000
when they're loaded instead of when they're used, right?


00:06:24.000 --> 00:06:25.560
Right away, they're validated.


00:06:25.560 --> 00:06:28.040
Make sure everything fits the API.


00:06:28.040 --> 00:06:31.280
They can be loaded through either a file pass,


00:06:31.280 --> 00:06:35.080
through entry points, through module names, and so on.


00:06:35.080 --> 00:06:37.900
You could have multiple versions of the same plugin.


00:06:37.900 --> 00:06:40.960
Which is pretty interesting.


00:06:40.960 --> 00:06:42.040
You can blacklist them.


00:06:42.040 --> 00:06:44.840
So if somebody puts some kind of plugin there,


00:06:44.840 --> 00:06:46.680
you're like, no, we're not gonna allow you to load this,


00:06:46.680 --> 00:06:48.440
even if we find it, you know,


00:06:48.440 --> 00:06:50.200
and configure something like that.


00:06:50.200 --> 00:06:56.160
You can group them, you can have conditionals like this plugin works on macOS but not on


00:06:56.160 --> 00:06:57.720
Linux for example.


00:06:57.720 --> 00:06:59.460
All sorts of cool stuff like that.


00:06:59.460 --> 00:07:04.480
So if you were thinking about having this extensible plugin model, give plugin a look.


00:07:04.480 --> 00:07:09.620
It looks like it handles a pretty simple problem but has a lot of support for you while it's


00:07:09.620 --> 00:07:10.620
doing it.


00:07:10.620 --> 00:07:11.620
Yeah, this is pretty neat.


00:07:11.620 --> 00:07:12.620
Just check this out.


00:07:12.620 --> 00:07:18.020
Yeah, I just don't work on any apps that really, that makes a lot of sense for me but if I


00:07:18.020 --> 00:07:20.280
If I did, I would definitely want to have a look at that.


00:07:20.280 --> 00:07:22.540
- Yeah, and it looks like it's based on,


00:07:22.540 --> 00:07:27.540
or partly based on abstract methods of class hierarchies.


00:07:27.540 --> 00:07:28.600
- Yeah.


00:07:28.600 --> 00:07:30.100
- And I think I remember looking at this,


00:07:30.100 --> 00:07:32.280
and this doesn't scare me off,


00:07:32.280 --> 00:07:35.080
but the particular application I was working with,


00:07:35.080 --> 00:07:37.460
we didn't have any classes uses anywhere,


00:07:37.460 --> 00:07:40.540
and I didn't really want to introduce them for this.


00:07:40.540 --> 00:07:42.820
- You're like, let's throw in some abstract-based classes


00:07:42.820 --> 00:07:45.500
and hierarchies to a thing that doesn't even use classes.


00:07:45.500 --> 00:07:47.180
Yeah, yeah, that makes sense.


00:07:47.180 --> 00:07:51.460
But at the same time, writing a plugin for an application is a very specific need.


00:07:51.460 --> 00:07:56.300
And I think it's fine for didn't match the rest of the model of the rest of your system.


00:07:56.300 --> 00:07:57.980
So yeah, something to look into.


00:07:57.980 --> 00:07:58.980
Yeah, for sure.


00:07:58.980 --> 00:08:00.140
So what do you got for us next?


00:08:00.140 --> 00:08:03.220
For some reason, I'm a little interested in testing sometimes.


00:08:03.220 --> 00:08:04.220
Really?


00:08:04.220 --> 00:08:05.220
Yeah.


00:08:05.220 --> 00:08:10.900
One of the PyBytes guys, Bob Belderboss, he wrote an article called how to test your Django


00:08:10.900 --> 00:08:14.420
app with Selenium and pytest.


00:08:14.420 --> 00:08:17.780
And yeah, pytest is one of my favorite things too.


00:08:17.780 --> 00:08:22.140
It's a really nice write-up of, I'm going to quote the beginning of it.


00:08:22.140 --> 00:08:27.540
It says in this article, I will show you how to test a Django app with pytest and Selenium.


00:08:27.540 --> 00:08:31.380
One of the things I was intrigued by is that they don't use a toy app.


00:08:31.380 --> 00:08:36.660
They use their CodeChallenges platform and compare the logged out homepage versus the


00:08:36.660 --> 00:08:39.100
logged in dashboard.


00:08:39.100 --> 00:08:43.060
And I think that's really cool and brave of them to publish.


00:08:43.060 --> 00:08:45.060
This is how we're testing our own stuff.


00:08:45.060 --> 00:08:47.060
Publicly, on the internet.


00:08:47.060 --> 00:08:49.060
Yeah, no, it's really cool.


00:08:49.060 --> 00:08:51.060
Yeah, and it talks through, I probably wouldn't have done it,


00:08:51.060 --> 00:08:53.060
part of the project setup,


00:08:53.060 --> 00:08:55.060
they're using the activate and deactivate


00:08:55.060 --> 00:08:57.060
of a virtual environment


00:08:57.060 --> 00:08:59.060
to load environmental variables.


00:08:59.060 --> 00:09:01.060
I don't have specific


00:09:01.060 --> 00:09:03.060
links to it, but I know there's


00:09:03.060 --> 00:09:05.060
a ways to do this within pytest


00:09:05.060 --> 00:09:07.060
itself as well,


00:09:07.060 --> 00:09:09.060
using something else.


00:09:09.060 --> 00:09:11.060
Yeah, I know, it's kind of cool


00:09:11.060 --> 00:09:15.140
But at the same time, it makes it hard to--


00:09:15.140 --> 00:09:16.660
makes it a little bit hard to--


00:09:16.660 --> 00:09:19.460
I think it's kind of hidden in the whole setup, right?


00:09:19.460 --> 00:09:21.500
There's nowhere in the code that you see that.


00:09:21.500 --> 00:09:23.000
And you basically accomplish that


00:09:23.000 --> 00:09:25.480
by editing the activate script to set some environment


00:09:25.480 --> 00:09:27.740
variables when you activate the environment.


00:09:27.740 --> 00:09:29.340
But if you go to another machine,


00:09:29.340 --> 00:09:31.220
you check it out again some other location,


00:09:31.220 --> 00:09:32.820
that kind of stuff is not there.


00:09:32.820 --> 00:09:35.380
So it's hard to store passwords and secrets.


00:09:35.380 --> 00:09:36.340
You don't want them on--


00:09:36.340 --> 00:09:38.420
they definitely don't want to put them into this repo


00:09:38.420 --> 00:09:38.700
either.


00:09:38.700 --> 00:09:40.420
So what are you going to do?


00:09:40.420 --> 00:09:41.260
but it is tricky.


00:09:41.260 --> 00:09:43.420
>>Yeah, and you wouldn't be able to use Tox with this


00:09:43.420 --> 00:09:46.020
because Tox is going to create its own virtual environment.


00:09:46.020 --> 00:09:47.700
But yeah, so I'll have to,


00:09:47.700 --> 00:09:49.060
maybe I'll have to write up an example


00:09:49.060 --> 00:09:50.180
of how I would tackle that.


00:09:50.180 --> 00:09:51.620
>>Yeah, that actually would be interesting.


00:09:51.620 --> 00:09:53.900
>>But the rest of it,


00:09:53.900 --> 00:09:55.700
even though they're not using


00:09:55.700 --> 00:09:57.820
mocking out a database itself,


00:09:57.820 --> 00:09:59.700
they do show how to do that,


00:09:59.700 --> 00:10:02.420
how to get the database set up.


00:10:02.420 --> 00:10:05.980
And then, yeah, anyway, it's just kind of a cool example.


00:10:05.980 --> 00:10:07.780
I love working with Selenium,


00:10:07.780 --> 00:10:09.540
and this is a neat write-up.


00:10:09.540 --> 00:10:12.380
It's cool, you know, maybe not everyone knows about Selenium.


00:10:12.380 --> 00:10:16.340
They maybe know about web scraping and maybe trying to test it that way.


00:10:16.340 --> 00:10:19.540
They also maybe know about testing inside of apps.


00:10:19.540 --> 00:10:24.060
Maybe just quickly tell folks who are not totally familiar, what is this like?


00:10:24.060 --> 00:10:26.460
Like, is this like requests or what is this?


00:10:26.460 --> 00:10:30.900
What Selenium does is it really just opens up while it's running.


00:10:30.900 --> 00:10:35.140
You don't have to interact with what you see is what you get or anything.


00:10:35.140 --> 00:10:39.340
You're using Python code to control a web browser.


00:10:39.340 --> 00:10:41.700
And you can use it in a couple of ways.


00:10:41.700 --> 00:10:44.940
You can have like a, a web browser that you can actually see.


00:10:44.940 --> 00:10:49.600
So while it's running, it pops up on your screen or like for instance, Chrome.


00:10:49.600 --> 00:10:54.380
And I believe Firefox also has a headless version where you can, where you can, it


00:10:54.380 --> 00:10:58.340
can operate without actually, they, they just call it headless because it doesn't


00:10:58.340 --> 00:10:59.540
pop anything on your screen.


00:10:59.540 --> 00:11:05.460
But other than that, it interacts just like it, as if it was open and you can,


00:11:05.460 --> 00:11:10.460
you know navigate the DOM and you can select things and activate things and


00:11:10.460 --> 00:11:16.680
and one of the benefits of going through this using Selenium is that it all the


00:11:16.680 --> 00:11:20.400
JavaScript stuff is loaded also through loading everything. You can interact with


00:11:20.400 --> 00:11:24.180
it as if it were just literally in your browser because it's literally in a


00:11:24.180 --> 00:11:27.320
hidden browser in the headless mode so yeah it's definitely an interesting way


00:11:27.320 --> 00:11:30.440
to do it like his example you're like let's take these things and put it in


00:11:30.440 --> 00:11:33.120
the username put in the password and then click this button you know find


00:11:33.120 --> 00:11:35.160
this button and click it, the login button,


00:11:35.160 --> 00:11:37.240
and stuff like that is really unique.


00:11:37.240 --> 00:11:41.040
Okay, so before we get on to FluPi,


00:11:41.040 --> 00:11:42.800
which is the next thing I want to talk about,


00:11:42.800 --> 00:11:44.920
let's talk about a digital issue real quick.


00:11:44.920 --> 00:11:47.560
So you probably built a lot of apps,


00:11:47.560 --> 00:11:51.200
have a lot of cloud resources running so far this year,


00:11:51.200 --> 00:11:54.200
but which one goes with which project?


00:11:54.200 --> 00:11:56.520
That's always been something that's driven me crazy


00:11:56.520 --> 00:11:58.480
about other places, like I go to AWS


00:11:58.480 --> 00:12:01.280
and there's just tons of virtual machines running


00:12:01.280 --> 00:12:02.280
and stuff, you're like, what is this?


00:12:02.280 --> 00:12:03.120
Do we need these?


00:12:03.120 --> 00:12:04.160
I don't even know anymore.


00:12:04.160 --> 00:12:05.980
So it would be really nice if we could group them together.


00:12:05.980 --> 00:12:08.520
And at DigitalOcean, they create this idea called Projects,


00:12:08.520 --> 00:12:11.480
where you can group droplets and load balancers and IPs


00:12:11.480 --> 00:12:16.000
and all that into application categories that they work with.


00:12:16.000 --> 00:12:18.320
Like you could have your app,


00:12:18.320 --> 00:12:22.760
you could have your app sandbox testing Q&A environment,


00:12:22.760 --> 00:12:25.000
and you could have multiple ones of those and so on.


00:12:25.000 --> 00:12:27.640
So really nice, super cool way to organize


00:12:27.640 --> 00:12:29.280
your environment in DigitalOcean.


00:12:29.280 --> 00:12:32.880
check them out at pythonbytes.fm/digitalocean.


00:12:32.880 --> 00:12:35.400
And like I said, for people who are new users,


00:12:35.400 --> 00:12:37.440
you get $100 free credit to play around.


00:12:37.440 --> 00:12:39.400
So that's also really nice to have.


00:12:39.400 --> 00:12:40.240
- Very nice.


00:12:40.240 --> 00:12:42.320
- So I'm a big fan of fluent APIs in general.


00:12:42.320 --> 00:12:44.040
And maybe not everyone knows the term.


00:12:44.040 --> 00:12:46.220
It's like when you take a thing


00:12:46.220 --> 00:12:48.560
and you call a function on it,


00:12:48.560 --> 00:12:52.120
and that function itself returns back the same object.


00:12:52.120 --> 00:12:54.340
So instead of saying I've got a variable


00:12:54.340 --> 00:12:56.560
and I first initialize it to a list,


00:12:56.560 --> 00:12:59.440
And then I do some operation on that list,


00:12:59.440 --> 00:13:01.160
and it changes it.


00:13:01.160 --> 00:13:02.280
And I do another operation.


00:13:02.280 --> 00:13:03.720
Maybe it turns it into a set.


00:13:03.720 --> 00:13:05.240
Then I pass that set somewhere else.


00:13:05.240 --> 00:13:08.920
I could just say, let's say customers--


00:13:08.920 --> 00:13:10.040
or let's say numbers.


00:13:10.040 --> 00:13:10.880
This is an example.


00:13:10.880 --> 00:13:11.440
It's easier.


00:13:11.440 --> 00:13:18.080
So say numbers.map.filter.skip.take.orderby.


00:13:18.080 --> 00:13:20.760
Just like one after another, all in one line.


00:13:20.760 --> 00:13:23.200
That's the Fluent API in general.


00:13:23.200 --> 00:13:24.780
So the thing that I want to point out


00:13:24.780 --> 00:13:26.280
is actually two libraries.


00:13:26.280 --> 00:13:30.280
So you can take your flavor of this Fluent API


00:13:30.280 --> 00:13:32.920
and apply it to collections.


00:13:32.920 --> 00:13:35.440
Because there's often more than one thing


00:13:35.440 --> 00:13:37.000
you might want to do to a collection.


00:13:37.000 --> 00:13:38.600
You might want to change its values.


00:13:38.600 --> 00:13:39.800
You might want to filter it.


00:13:39.800 --> 00:13:41.840
You might want to only take a couple of them


00:13:41.840 --> 00:13:44.720
or put them into groups and things like that.


00:13:44.720 --> 00:13:46.040
So there's one called--


00:13:46.040 --> 00:13:49.160
I originally wanted to pronounce it as Fluffy, but FluPy.


00:13:49.160 --> 00:13:51.920
FluPy is in Fluent Python.


00:13:51.920 --> 00:13:54.240
And it lets you do, well, exactly what I


00:13:54.240 --> 00:13:55.760
was describing on collections.


00:13:55.760 --> 00:13:58.940
So given any collection, you can upgrade it


00:13:58.940 --> 00:14:02.340
to a fluent collection by just calling flue


00:14:02.340 --> 00:14:04.380
and passing the collection.


00:14:04.380 --> 00:14:06.220
And then it has all these operations.


00:14:06.220 --> 00:14:09.180
Like you say .map and pass it a lambda.


00:14:09.180 --> 00:14:11.660
And then on that result, you say .filter,


00:14:11.660 --> 00:14:16.180
pass another lambda, .chunk to break it into pages, I believe.


00:14:16.180 --> 00:14:20.780
And .take will give you only three chunks of five back,


00:14:20.780 --> 00:14:22.260
for example.


00:14:22.260 --> 00:14:24.380
So you could do that all in effectively one line.


00:14:24.380 --> 00:14:26.180
Now maybe you want to wrap it for readability,


00:14:26.180 --> 00:14:29.140
but you don't have to use a bunch of intermediate variables


00:14:29.140 --> 00:14:31.020
or intermediate collections or anything like that.


00:14:31.020 --> 00:14:32.060
- This is nice, yeah.


00:14:32.060 --> 00:14:32.900
- It's slick, right?


00:14:32.900 --> 00:14:34.180
And the thing that's really cool


00:14:34.180 --> 00:14:37.940
is it's all based on yield and generators.


00:14:37.940 --> 00:14:38.780
- Really?


00:14:38.780 --> 00:14:42.100
- Yeah, so every step in this chain


00:14:42.100 --> 00:14:43.980
is some generator type of operation,


00:14:43.980 --> 00:14:47.500
which means you could pass it a billion items


00:14:47.500 --> 00:14:49.860
and it's not gonna filter a billion items,


00:14:49.860 --> 00:14:51.700
map a billion items and all that.


00:14:51.700 --> 00:14:53.660
It's just gonna take them one at a time


00:14:53.660 --> 00:14:55.760
through this sort of data pipeline that you build.


00:14:55.760 --> 00:14:56.600
- Nice.


00:14:56.600 --> 00:14:58.100
- Yeah, so the example that I put in the show notes


00:14:58.100 --> 00:15:01.560
uses count, like just all of it.


00:15:01.560 --> 00:15:02.820
(laughing)


00:15:02.820 --> 00:15:03.660
- All of it.


00:15:03.660 --> 00:15:08.260
- But you know, it ends with a break it into pages of five


00:15:08.260 --> 00:15:09.620
and then take three pages, right?


00:15:09.620 --> 00:15:11.300
So it only takes 15 items out.


00:15:11.300 --> 00:15:12.140
- Okay.


00:15:12.140 --> 00:15:12.960
- Even though you pass it,


00:15:12.960 --> 00:15:14.860
and the way that that works of course is with generators


00:15:14.860 --> 00:15:16.300
'cause you can just pull through


00:15:16.300 --> 00:15:18.220
'til like the last part stops pulling


00:15:18.220 --> 00:15:20.500
and then it basically stops iterating


00:15:20.500 --> 00:15:21.820
its infinite collection, really nice.


00:15:21.820 --> 00:15:23.260
- In the little example you gave,


00:15:23.260 --> 00:15:27.060
you do like a for item in pipeline at the end too,


00:15:27.060 --> 00:15:30.460
so you can use the result as a generator also.


00:15:30.460 --> 00:15:32.300
- Yeah, exactly, because it's a generator,


00:15:32.300 --> 00:15:34.780
like that whole sequence of operations


00:15:34.780 --> 00:15:38.060
doesn't actually execute until you iterate it,


00:15:38.060 --> 00:15:40.420
until you pass it to something that itself does,


00:15:40.420 --> 00:15:42.700
like pass it to a list or to a dictionary


00:15:42.700 --> 00:15:43.980
or something like that, yeah.


00:15:43.980 --> 00:15:45.660
Or use it in another one of these pipelines.


00:15:45.660 --> 00:15:48.480
So it's really cool to build up these data pipeline,


00:15:48.480 --> 00:15:51.300
data transformation things using Flupo.


00:15:51.300 --> 00:15:53.260
- Yeah, and they also have a CLI,


00:15:53.260 --> 00:15:57.220
so you can do this kind of stuff from the CLI for,


00:15:57.220 --> 00:15:59.740
apparently, this guy's data science team.


00:15:59.740 --> 00:16:01.620
Not everyone necessarily is great with Linux,


00:16:01.620 --> 00:16:03.740
but they would like to do a little bit more


00:16:03.740 --> 00:16:06.380
with these tools and with these ideas,


00:16:06.380 --> 00:16:08.460
these Python data pipelines,


00:16:08.460 --> 00:16:11.560
so you can actually execute these sorts of operations


00:16:11.560 --> 00:16:13.180
on the command line as well.


00:16:13.180 --> 00:16:14.020
- I like it.


00:16:14.020 --> 00:16:16.580
What's, and then do you wanna cover Ask?


00:16:16.580 --> 00:16:18.660
- I do, I wanna cover Ask.


00:16:18.660 --> 00:16:20.240
So, ASQ.


00:16:20.240 --> 00:16:21.100
So this is another one.


00:16:21.100 --> 00:16:25.300
I don't think we've covered it, but I guess it's possible that we have.


00:16:25.300 --> 00:16:27.420
There's kind of two philosophies here.


00:16:27.420 --> 00:16:34.100
They both do the same general thing, flupy and ask, A-S-Q.


00:16:34.100 --> 00:16:38.940
But the operations that you get to apply these fluent collections


00:16:38.940 --> 00:16:40.420
changes or vary.


00:16:40.420 --> 00:16:44.220
So the flupy is like map and filter and so on.


00:16:44.220 --> 00:16:49.700
And the other idea is if we work with this link operation, this link


00:16:49.700 --> 00:16:52.380
which comes from the C# space and is actually, I think,


00:16:52.380 --> 00:16:54.260
one of the better parts of C#.


00:16:54.260 --> 00:16:57.860
It really maps very closely to the SQL query language


00:16:57.860 --> 00:17:01.020
with WHERE, SELECT, ORDER BY, and so on.


00:17:01.020 --> 00:17:06.020
So ASK is very, very similar to this for Python.


00:17:06.020 --> 00:17:08.580
It's exactly the same thing, a fluid API


00:17:08.580 --> 00:17:10.540
on top of collections.


00:17:10.540 --> 00:17:12.820
But here's a collection of words,


00:17:12.820 --> 00:17:15.620
like 0, 1, 2, 3, as written out.


00:17:15.620 --> 00:17:19.420
And you say query of words dot ORDER BY len,


00:17:19.420 --> 00:17:24.940
then by and you pass it just here is just ordering alphabetically but you


00:17:24.940 --> 00:17:29.420
could pass something else and take five select string dot upper to list and


00:17:29.420 --> 00:17:34.900
once you get back as a list of the first five and that ordered by length one so


00:17:34.900 --> 00:17:41.060
the the short ones like one six ten and so on to me this the database like


00:17:41.060 --> 00:17:47.220
operators of ask is a little bit nicer than the map filter reduce syntax of the


00:17:47.220 --> 00:17:50.140
other one, but they're both valuable and they both have the same idea.


00:17:50.140 --> 00:17:53.060
So I kind of thought it'd be fun to just cover them, cover them both here.


00:17:53.060 --> 00:17:57.780
I think it's good there's both of them because it kind of depends on where, what sort of


00:17:57.780 --> 00:17:59.380
mindset you're thinking about.


00:17:59.380 --> 00:18:01.580
It's a different way to think of similar problems.


00:18:01.580 --> 00:18:05.820
Yeah, but they both solve similar problems in really interesting ways.


00:18:05.820 --> 00:18:07.820
You know, I mean, you could say like a list comprehension.


00:18:07.820 --> 00:18:14.140
Okay, well, list comprehension could do a filter and it could do a map, but it doesn't.


00:18:14.140 --> 00:18:17.260
I wish there was just a little bit more on those types of things.


00:18:17.260 --> 00:18:21.780
Like, for example, wouldn't it be great if there was a order by clause in a list


00:18:21.780 --> 00:18:26.140
comprehension instead of having to do the list comprehension and then do a sorted


00:18:26.140 --> 00:18:28.140
on top of the result, you know, things like that.


00:18:28.140 --> 00:18:31.500
It's just, it's like you could almost not do these things with list


00:18:31.500 --> 00:18:33.300
comprehensions, but not quite.


00:18:33.300 --> 00:18:35.100
You can't do a paging and stuff.


00:18:35.100 --> 00:18:37.460
So it's like, it just adds that little bit extra that often


00:18:37.460 --> 00:18:38.620
you really need in practice.


00:18:38.620 --> 00:18:39.180
Yeah.


00:18:39.180 --> 00:18:39.540
Yeah.


00:18:39.540 --> 00:18:39.940
True.


00:18:39.940 --> 00:18:40.740
Nice.


00:18:40.740 --> 00:18:43.580
So there's a pretty exciting blog that's kicking back into gear.


00:18:43.580 --> 00:18:44.060
Yeah.


00:18:44.100 --> 00:18:48.720
It's a blog called Neopythonic, and it's Guido's blog.


00:18:48.720 --> 00:18:51.220
And the last time we saw him,


00:18:51.220 --> 00:18:55.100
it looks like the last blog post before November


00:18:55.100 --> 00:18:57.940
was in July of 2016.


00:18:57.940 --> 00:19:02.260
So one of the benefits of him stepping down as a BDFL


00:19:02.260 --> 00:19:05.860
is that he can blog now, so this is a good.


00:19:05.860 --> 00:19:07.940
- Yeah, I think it's, and you know, the one from July


00:19:07.940 --> 00:19:09.500
was just him turning off comments


00:19:09.500 --> 00:19:10.660
'cause people are spamming us.


00:19:10.660 --> 00:19:12.260
So it was even further back than that.


00:19:12.260 --> 00:19:15.260
It's great to see him getting back into action.


00:19:15.260 --> 00:19:16.500
So we have this.


00:19:16.500 --> 00:19:19.540
We have him doing some more interviews


00:19:19.540 --> 00:19:23.220
with the MIT podcast video series and whatnot.


00:19:23.220 --> 00:19:24.220
So yeah, it's really great.


00:19:24.220 --> 00:19:25.300
And a couple of questions.


00:19:25.300 --> 00:19:29.460
So he's just answering listener questions or student questions,


00:19:29.460 --> 00:19:30.260
really.


00:19:30.260 --> 00:19:34.060
And a couple of questions are whether to choose a 9 to 5 job


00:19:34.060 --> 00:19:35.700
or be an entrepreneur.


00:19:35.700 --> 00:19:40.220
And then the other one is, will AI make human software


00:19:40.220 --> 00:19:41.460
developers redundant?


00:19:41.460 --> 00:19:45.080
And of course the answer to the second one is no,


00:19:45.080 --> 00:19:47.280
because software development is not boring


00:19:47.280 --> 00:19:50.080
and AI is to replace boring tasks.


00:19:50.080 --> 00:19:52.520
And like driving a car, yeah.


00:19:52.520 --> 00:19:55.200
But the nine to five versus entrepreneur is interesting


00:19:55.200 --> 00:19:58.360
because as we know, he's worked for other people


00:19:58.360 --> 00:19:59.300
for a while, so.


00:19:59.300 --> 00:20:01.320
- Yeah, some really interesting places, right?


00:20:01.320 --> 00:20:04.720
Like Google and Dropbox and stuff like that.


00:20:04.720 --> 00:20:06.920
- Yeah, I mean, and they kind of tie together


00:20:06.920 --> 00:20:10.320
because at the end of the nine to five question,


00:20:10.320 --> 00:20:12.240
He said, "Just be sure to not take a job


00:20:12.240 --> 00:20:15.740
"that can be immediately replaced by a computer."


00:20:15.740 --> 00:20:17.040
- Yeah, for sure.


00:20:17.040 --> 00:20:19.920
Did you ever see the posters called Demotivators?


00:20:19.920 --> 00:20:21.000
I think that's what it's called.


00:20:21.000 --> 00:20:22.200
- No, it sounds great.


00:20:22.200 --> 00:20:25.400
- So you know those posters that corporations will hang up


00:20:25.400 --> 00:20:26.800
that just make you cringe?


00:20:26.800 --> 00:20:31.800
It'll be like an eagle flying over ocean with a sunset


00:20:31.800 --> 00:20:35.000
and it'll say, "We all soar together,"


00:20:35.000 --> 00:20:36.360
or, "We can all soar higher."


00:20:36.360 --> 00:20:39.260
Like something you're just like, "Whoa, no, come on.


00:20:39.260 --> 00:20:40.640
Who's that supposed to act?


00:20:40.640 --> 00:20:43.040
So demotivators have pictures like that,


00:20:43.040 --> 00:20:45.340
but the caption isn't something super positive.


00:20:45.340 --> 00:20:48.380
Like one example would be there's like a hang glider


00:20:48.380 --> 00:20:52.080
flying over an ocean into a sunset,


00:20:52.080 --> 00:20:55.560
and the caption is something to the effect of like,


00:20:55.560 --> 00:20:59.560
it's so great to dream big and to fly out,


00:20:59.560 --> 00:21:01.480
you know, like soar towards your dream.


00:21:01.480 --> 00:21:02.780
It's even better to sit on the shore


00:21:02.780 --> 00:21:04.800
and watch people sink into the ocean when they,


00:21:04.800 --> 00:21:07.640
you know, it's just like stuff like this, right?


00:21:07.640 --> 00:21:10.000
- So there's one about what you're talking about here,


00:21:10.000 --> 00:21:12.940
and it says, see, do you have a boring,


00:21:12.940 --> 00:21:16.560
it's got some picture of people working together.


00:21:16.560 --> 00:21:17.880
It says, "Your job is boring.


00:21:17.880 --> 00:21:19.700
"So boring that it'll probably be replaced


00:21:19.700 --> 00:21:21.240
"by robots in 10 years.


00:21:21.240 --> 00:21:22.620
"You should find a new job."


00:21:22.620 --> 00:21:24.920
But it's got this beautiful picture.


00:21:24.920 --> 00:21:26.320
Maybe I'll try to find it and link to it,


00:21:26.320 --> 00:21:27.640
but yeah, they're really good.


00:21:27.640 --> 00:21:28.960
- It's dark, nice.


00:21:28.960 --> 00:21:30.040
- Yeah, it's great.


00:21:30.040 --> 00:21:32.740
Great humor.


00:21:32.740 --> 00:21:35.320
All right, so the last thing I wanna talk about today


00:21:35.320 --> 00:21:37.440
is something called Anvil.


00:21:37.440 --> 00:21:39.360
And I'm surprised I haven't talked about on the show.


00:21:39.360 --> 00:21:42.960
I've had Meredith on Talk Python who created this.


00:21:42.960 --> 00:21:45.460
And I think there's several interesting aspects.


00:21:45.460 --> 00:21:47.200
In and of itself, it's interesting.


00:21:47.200 --> 00:21:50.760
But then also how it works, pretty unique,


00:21:50.760 --> 00:21:53.280
and maybe inspires some other folks as well.


00:21:53.280 --> 00:21:58.280
So Anvil is a visual web building tool.


00:21:58.280 --> 00:22:02.640
So what you do is you go there and you log in


00:22:02.640 --> 00:22:05.640
and it gives you kind of this design surface, right?


00:22:05.640 --> 00:22:10.200
You can go and you've got buttons and text boxes and combo boxes


00:22:10.200 --> 00:22:11.040
and stuff like that.


00:22:11.040 --> 00:22:13.120
And you can drop them down and interact with them,


00:22:13.120 --> 00:22:14.280
set some properties.


00:22:14.280 --> 00:22:16.000
And you've got this visual bit, and you've


00:22:16.000 --> 00:22:18.760
got this sort of code part that runs as you interact with it.


00:22:18.760 --> 00:22:21.400
So you've got a visual piece you can work with and a code


00:22:21.400 --> 00:22:23.520
behind, or code view, they call it.


00:22:23.520 --> 00:22:26.720
And what's really interesting is all of that stuff


00:22:26.720 --> 00:22:28.840
happens in Python.


00:22:28.840 --> 00:22:30.520
So if you've got a combo box, you


00:22:30.520 --> 00:22:32.360
want to hook the change event, you


00:22:32.360 --> 00:22:34.260
don't go and write JavaScript.


00:22:34.260 --> 00:22:36.740
you double click the little combo box


00:22:36.740 --> 00:22:39.700
and it takes you to a method that's Python,


00:22:39.700 --> 00:22:43.260
you know, def combo box dot click or underscore click.


00:22:43.260 --> 00:22:45.420
And that little comma that says, write your code here.


00:22:45.420 --> 00:22:46.260
- Oh, nice.


00:22:46.260 --> 00:22:49.180
- That code is Python code and it runs in your browser.


00:22:49.180 --> 00:22:50.020
- That's cool.


00:22:50.020 --> 00:22:52.820
- So, you know, we've talked a lot about WebAssembly


00:22:52.820 --> 00:22:54.040
and some of these other things


00:22:54.040 --> 00:22:55.940
about how do we get Python in your browser.


00:22:55.940 --> 00:22:58.980
Here is like a full web development framework


00:22:58.980 --> 00:23:03.980
where the majority of your logic runs on the client side,


00:23:03.980 --> 00:23:06.220
written in Python, but then behind the scenes,


00:23:06.220 --> 00:23:08.180
you know, translated to JavaScript.


00:23:08.180 --> 00:23:10.060
- Okay, well this would be fun to play with.


00:23:10.060 --> 00:23:11.420
- Yeah, it's really interesting.


00:23:11.420 --> 00:23:13.860
And then they also have like a backend database


00:23:13.860 --> 00:23:16.260
and a backend services where you can write some code


00:23:16.260 --> 00:23:18.180
that runs in like a Docker container or something.


00:23:18.180 --> 00:23:20.980
So you have a server side bit and a front client side bit.


00:23:20.980 --> 00:23:22.900
But most of the code you write by default


00:23:22.900 --> 00:23:24.800
would probably land up in,


00:23:24.800 --> 00:23:26.260
you know, if you don't restructure things,


00:23:26.260 --> 00:23:28.900
probably land up as Python running in the browser.


00:23:28.900 --> 00:23:30.460
And it's really quite nice.


00:23:30.460 --> 00:23:33.180
So here's a cool way for people who


00:23:33.180 --> 00:23:36.380
don't really know that much about web apps,


00:23:36.380 --> 00:23:37.420
but they know Python,


00:23:37.420 --> 00:23:39.780
a really nice way to quickly get up to speed


00:23:39.780 --> 00:23:41.740
with sort of what I think of as like


00:23:41.740 --> 00:23:43.900
forms over data type web apps, right?


00:23:43.900 --> 00:23:46.940
Here's a grid, here's a bunch of input boxes


00:23:46.940 --> 00:23:48.780
I need to enter that data, save it,


00:23:48.780 --> 00:23:50.060
put it into a list and show it to you.


00:23:50.060 --> 00:23:53.020
Like really quite common types of apps


00:23:53.020 --> 00:23:55.620
for sort of intranet type apps.


00:23:55.620 --> 00:23:57.860
So check that out, it's pretty cool.


00:23:57.860 --> 00:24:00.460
And it does have a paid version,


00:24:00.460 --> 00:24:01.640
but there's also a free version.


00:24:01.640 --> 00:24:03.480
So maybe it's interesting to people,


00:24:03.480 --> 00:24:05.960
but I think it's just interesting as a case study


00:24:05.960 --> 00:24:08.160
of how they're using Python in the browser as well.


00:24:08.160 --> 00:24:09.040
- Yeah, cool.


00:24:09.040 --> 00:24:10.440
- Cool, yeah, all right, well,


00:24:10.440 --> 00:24:12.800
that's it for our six items this week.


00:24:12.800 --> 00:24:15.040
Brian, you got anything else you wanna share with everyone?


00:24:15.040 --> 00:24:18.760
- Yeah, I wanna share, I've got big news, big, big news.


00:24:18.760 --> 00:24:20.320
Anyway, not huge news,


00:24:20.320 --> 00:24:24.720
but I wrote a book called "Python Testing with pytest."


00:24:24.720 --> 00:24:25.560
Did you know that? - You did the book?


00:24:25.560 --> 00:24:26.680
Yes, I did, it's awesome.


00:24:26.680 --> 00:24:27.960
(Brian laughs)


00:24:27.960 --> 00:24:29.620
- Yeah, so we talked about it a lot


00:24:29.620 --> 00:24:31.660
for the first year we were doing this.


00:24:31.660 --> 00:24:34.120
But the news related to that is there's a


00:24:34.120 --> 00:24:35.260
second printing out.


00:24:35.260 --> 00:24:40.260
So I updated it, ran everything with Python 3.7


00:24:40.260 --> 00:24:43.480
and the modern version of pytest at the time.


00:24:43.480 --> 00:24:46.680
And then also fixed a whole bunch of the errata


00:24:46.680 --> 00:24:48.740
of people that pointed out things like


00:24:48.740 --> 00:24:51.180
just little typos and things like that.


00:24:51.180 --> 00:24:53.860
And updated the source code, stuff like that.


00:24:53.860 --> 00:24:54.700
So it's--


00:24:54.700 --> 00:24:55.520
>> Nice, congratulations.


00:24:55.520 --> 00:24:57.500
>> Available, P2 is available.


00:24:57.500 --> 00:25:01.260
They call it-- P2 must be second printing, P2.


00:25:01.260 --> 00:25:01.860
How about you?


00:25:01.860 --> 00:25:02.360
Any news?


00:25:02.360 --> 00:25:03.340
No, nothing.


00:25:03.340 --> 00:25:04.100
Nothing right now.


00:25:04.100 --> 00:25:06.500
I'm in just massive podcast recording mode,


00:25:06.500 --> 00:25:08.260
trying to get ready for the holidays,


00:25:08.260 --> 00:25:11.060
both so that I can take a week or two off.


00:25:11.060 --> 00:25:15.540
And it's also hard to get guests to come on over the holidays,


00:25:15.540 --> 00:25:19.580
because obviously they want to do just chill out stuff.


00:25:19.580 --> 00:25:21.100
It's been all recording all the time.


00:25:21.100 --> 00:25:23.060
So I have cool things I've recorded,


00:25:23.060 --> 00:25:24.540
but they're not out yet.


00:25:24.540 --> 00:25:26.060
We've even done one together, right?


00:25:26.060 --> 00:25:27.060
That'll be fun.


00:25:27.060 --> 00:25:28.340
- Yeah, we-- - At the year end.


00:25:28.340 --> 00:25:30.160
- And then I had you on mine too


00:25:30.160 --> 00:25:32.580
because I have the same problem you do.


00:25:32.580 --> 00:25:33.580
- That's right.


00:25:33.580 --> 00:25:34.960
Yeah, we got a lot of fun stuff coming out


00:25:34.960 --> 00:25:37.100
on Testing Code and Talk Python,


00:25:37.100 --> 00:25:39.500
and of course, as always, on Python Bytes.


00:25:39.500 --> 00:25:42.060
- So we're not taking a break over Christmas break.


00:25:42.060 --> 00:25:44.780
We're gonna try to go, just go all the way through.


00:25:44.780 --> 00:25:45.640
- That's right.


00:25:45.640 --> 00:25:47.140
We may physically be taking a break,


00:25:47.140 --> 00:25:50.040
but due to the magic of time shifting and podcasting,


00:25:50.040 --> 00:25:51.540
the podcast will not be taking a break.


00:25:51.540 --> 00:25:52.780
- Yes, wonderful.


00:25:52.780 --> 00:25:53.620
- Yeah, awesome.


00:25:53.620 --> 00:25:54.860
- Well, thanks for talking to me this morning.


00:25:54.860 --> 00:25:55.700
- Yeah, you bet.


00:25:55.700 --> 00:25:56.520
Bye. - Bye.


00:25:56.520 --> 00:26:01.560
for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. That's Python Bytes as


00:26:01.560 --> 00:26:08.120
in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want


00:26:08.120 --> 00:26:13.080
featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing


00:26:13.080 --> 00:26:18.000
something cool. On behalf of myself and Brian Auchin, this is Michael Kennedy. Thank you for


00:26:18.000 --> 00:26:20.640
listening and sharing this podcast with your friends and colleagues.

