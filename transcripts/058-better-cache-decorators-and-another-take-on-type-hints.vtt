WEBVTT

00:00:00.001 --> 00:00:05.480
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.480 --> 00:00:09.940
This is episode 58, recorded December 19th, 2017.

00:00:09.940 --> 00:00:10.960
I'm Michael Kennedy.

00:00:10.960 --> 00:00:11.960
And I'm Brian Okken.

00:00:11.960 --> 00:00:13.880
And we have a bunch of awesome stuff to share with you.

00:00:13.880 --> 00:00:17.720
First, I want to say this episode is brought to you by DigitalOcean, so thank you, DigitalOcean.

00:00:17.720 --> 00:00:19.440
Yeah, thanks, DigitalOcean.

00:00:19.440 --> 00:00:22.180
Yes, thank you, DigitalOcean.

00:00:22.180 --> 00:00:24.640
Indeed. Love their stuff. Tell me more about it later.

00:00:24.640 --> 00:00:27.040
Let's start with monkeying around a bit.

00:00:27.040 --> 00:00:30.360
I like them. There's so much monkey, I'm not sure why, in Python.

00:00:30.360 --> 00:00:31.660
Here's a lot of monkey, you're right.

00:00:31.660 --> 00:00:33.900
Yeah, we got monkey patching and stuff.

00:00:33.900 --> 00:00:37.180
But this is monkey type from Instagram.

00:00:37.180 --> 00:00:47.160
And in episode 54, we talked about PyAnnotate, which is a way to add type annotations to your code while it's running.

00:00:47.160 --> 00:00:51.200
But it was from Dropbox, but it was only Python 2 at the moment.

00:00:51.200 --> 00:00:56.620
This one is a similar sort of thing, but it's from Instagram, and it's Python 3 only.

00:00:56.620 --> 00:00:59.200
And it doesn't do the comments.

00:00:59.200 --> 00:01:01.920
It does the Python 3 style type annotations.

00:01:01.920 --> 00:01:04.640
So I'm kind of really excited to try this out.

00:01:04.640 --> 00:01:06.000
Yeah, that sounds really cool.

00:01:06.000 --> 00:01:14.360
You know, I'm definitely heartened to see a lot of people who have large code bases, Dropbox, Instagram, and so on, making these tools.

00:01:14.360 --> 00:01:18.180
They're going to bring everybody along to modern Python really nicely.

00:01:18.180 --> 00:01:19.160
It's very good.

00:01:19.160 --> 00:01:22.900
And I like the way the types are moving.

00:01:22.900 --> 00:01:27.300
I was kind of lukewarm on types for Python at first.

00:01:27.300 --> 00:01:34.680
But using it to try to solidify the quality of your code base for large code bases makes total sense.

00:01:34.680 --> 00:01:36.460
And I like what they're doing with it.

00:01:36.520 --> 00:01:38.320
I really like adding the type hints.

00:01:38.320 --> 00:01:46.260
Just in a couple of places where the autocomplete falls down, like, you know, last week we talked about Mongo Engine.

00:01:46.260 --> 00:01:47.680
You do a query for Mongo Engine.

00:01:47.680 --> 00:01:52.480
And as far as the tooling, it's just like that's a random thing that came back.

00:01:52.480 --> 00:01:53.640
It has no idea what it is.

00:01:53.640 --> 00:02:01.840
But if you add just a few type hints, the rest of your application can automatically, well, editor, can detect the rest of your applications working with one of these concrete types.

00:02:01.840 --> 00:02:05.860
So just a little type hint here and there will go a long ways.

00:02:05.860 --> 00:02:07.820
And I guess that's probably for new code, right?

00:02:07.820 --> 00:02:14.280
But for older code, you want to switch to Python 3 from Python 2, having that as a solid foundation.

00:02:14.280 --> 00:02:17.920
So you really know what you're working with as you move it around.

00:02:17.920 --> 00:02:20.780
I think that that's even really valuable right there on its own.

00:02:20.780 --> 00:02:30.560
The article we linked to is one of the things it talks about is what happens is you're actually running your code and it pays attention to which types are going through different parts of your code.

00:02:30.560 --> 00:02:45.060
And the little, you can run it through while you're running tests, but it did have a note, which I thought was interesting to say, if you have the style of testing where you're using a lot of mock objects, the types are going to be all messed up.

00:02:45.060 --> 00:02:46.920
So be aware of that.

00:02:46.920 --> 00:02:49.800
And you may want to generate your types some other way.

00:02:50.060 --> 00:02:50.340
Oh, right.

00:02:50.340 --> 00:02:53.500
Because it will see the mock and I don't think that's what's supposed to go there.

00:02:53.500 --> 00:02:54.680
Not the thing it is mocking.

00:02:54.680 --> 00:02:55.860
Yeah, exactly.

00:02:55.860 --> 00:02:56.400
Interesting.

00:02:56.400 --> 00:02:56.900
Cool.

00:02:56.900 --> 00:03:02.320
So sometimes you can make your code fast by optimizing it.

00:03:02.600 --> 00:03:06.800
Maybe it talks to a database and you're going to put the right kind of indexes in there.

00:03:06.800 --> 00:03:08.300
And of course, that should be fast.

00:03:08.300 --> 00:03:12.480
But other times you're working with things that are out of your control.

00:03:12.480 --> 00:03:16.400
You need to call the web service to get some kind of stock quote or whatever.

00:03:16.400 --> 00:03:24.300
And you can only be as fast as that web service or whatever, unless you're willing to hang on to it for a little bit and do some caching.

00:03:24.300 --> 00:03:24.660
Right?

00:03:24.860 --> 00:03:25.100
Yeah.

00:03:25.100 --> 00:03:31.240
So Python, I don't know how many people know, but there's something called functools in Python.

00:03:31.240 --> 00:03:35.100
And in there, there's a decorator called LRU underscore cache.

00:03:35.420 --> 00:03:41.100
And you can put that onto any function and it will look at the arguments going in there.

00:03:41.100 --> 00:03:45.280
And if it sees that argument series again, it can have multiple arguments.

00:03:45.280 --> 00:03:49.800
If it sees all the same arguments it's seen before, it will just return that value instantly.

00:03:49.800 --> 00:03:51.300
So that's pretty cool, right?

00:03:51.300 --> 00:03:52.580
I did not know that.

00:03:52.580 --> 00:03:53.380
That is cool.

00:03:53.380 --> 00:03:53.900
Yeah.

00:03:53.900 --> 00:03:54.280
Yeah.

00:03:54.280 --> 00:04:03.040
So suppose I'm calling like a weather API and I'm doing it from my website and I've got all these different people coming in and calling it.

00:04:03.040 --> 00:04:04.180
And it turns out to be slow.

00:04:04.260 --> 00:04:06.120
I could actually throw that onto it.

00:04:06.120 --> 00:04:12.480
And it would say if two people ask for the same zip code, potentially it's just going to return that instantly, just out of memory.

00:04:12.480 --> 00:04:13.660
So that's really cool.

00:04:13.660 --> 00:04:16.700
But it only works in certain ways.

00:04:16.700 --> 00:04:21.060
For example, if that method takes a list, well, lists are not hashable.

00:04:21.060 --> 00:04:22.800
LRU cache thing.

00:04:22.800 --> 00:04:26.340
Decorator requires all the stuff it's going to hold to be cacheable, for example.

00:04:26.340 --> 00:04:30.720
So it's cool, but it's kind of limited in a certain way.

00:04:30.720 --> 00:04:38.840
So there's this other project that's kind of inspired by this idea and it goes much further and has a lot more options called cache tools.

00:04:39.020 --> 00:04:41.940
I'm guessing you probably haven't heard of cache tools if you haven't heard of LRU cache.

00:04:41.940 --> 00:04:42.620
I have not.

00:04:42.620 --> 00:04:51.280
So this is a project that has a bunch of different cache implementations as well as a more flexible decorator.

00:04:51.280 --> 00:04:54.480
Actually, a couple of decorators you can use in exactly the same way.

00:04:54.880 --> 00:05:03.480
So it defines like a basic cache, an LFU cache, so least frequently used, because eventually your cache may run, you know, get full and run out of memory.

00:05:03.480 --> 00:05:05.640
Or you can say only hold 100 items.

00:05:05.640 --> 00:05:08.520
Well, when you get to 101, which one do you throw away?

00:05:08.520 --> 00:05:12.820
Well, you can use the LFU cache and throw away the one that was least frequently used.

00:05:12.820 --> 00:05:16.180
An LRU cache, the one that was least recently used.

00:05:16.760 --> 00:05:19.920
Or have what's called a TTL cache, which is a time to live.

00:05:19.920 --> 00:05:21.620
Like cache everything for five minutes.

00:05:21.620 --> 00:05:22.880
I'm sure we have the memory for this.

00:05:22.880 --> 00:05:23.840
How could that be bad, right?

00:05:23.840 --> 00:05:26.140
Yeah.

00:05:26.140 --> 00:05:28.220
And then you get that call in the middle of the night.

00:05:28.220 --> 00:05:29.280
Server's down.

00:05:30.260 --> 00:05:36.540
The TTL cache, that seems like, for instance, your example of grabbing some weather data or something.

00:05:36.540 --> 00:05:41.900
I mean, you could hold on to the weather data for at least a few minutes before refreshing that.

00:05:41.900 --> 00:05:42.120
Right.

00:05:42.120 --> 00:05:49.400
And what's really cool about the TTL one is it naturally expires the data in a way that you can predict and might understand.

00:05:49.400 --> 00:05:52.120
So if you're like, look, the weather's not going to change that much in 10 minutes.

00:05:52.120 --> 00:05:54.000
Just cache everything for 10 minutes.

00:05:54.000 --> 00:05:58.320
And it automatically will go get a new one after the 11th minute, right?

00:05:58.320 --> 00:05:59.840
So that's a really nice way to do it.

00:06:00.260 --> 00:06:02.180
So these are cache implementations.

00:06:02.180 --> 00:06:04.520
And then there's what's called a memoizing.

00:06:04.520 --> 00:06:07.760
So memoization is this concept that we've been talking about.

00:06:07.760 --> 00:06:13.120
Memoizing decorators, cacheutils.cache, which is like the one we talked about before.

00:06:13.120 --> 00:06:14.960
But you can plug in all sorts of stuff.

00:06:14.960 --> 00:06:19.460
You can plug in any of the cache implementations we've talked about or even a straight dictionary.

00:06:19.460 --> 00:06:25.440
It takes a function that will generate the hash so it can cache non-hashable things.

00:06:25.440 --> 00:06:29.280
Because you could generate some kind of indicator like an ID out of a database object or something.

00:06:29.280 --> 00:06:35.180
You could pass interesting things like a weak value, a weak ref.weak value dictionary.

00:06:35.180 --> 00:06:38.740
So you don't actually hold on to the memory of the things, which is pretty cool.

00:06:39.000 --> 00:06:46.380
And it even has like a locking object you can pass for thread safety if you've got to recreate stuff in the hash and stuff.

00:06:46.380 --> 00:06:51.880
So really, it's like the idea of the LRU cache and functools, but way more flexible and configurable.

00:06:51.880 --> 00:06:52.760
Yeah, this is nice.

00:06:52.880 --> 00:06:54.880
It's insanely easy to use them, right?

00:06:54.880 --> 00:06:57.560
You just throw a decorator on a slow function and now it's a fast function.

00:06:57.560 --> 00:06:59.720
Just make sure you understand what that means.

00:06:59.720 --> 00:07:06.640
Yeah, so definitely in conjunction with a safe measure before you prematurely optimize.

00:07:06.640 --> 00:07:07.980
Yeah, it's cool though.

00:07:07.980 --> 00:07:09.500
Speaking of going fast.

00:07:09.500 --> 00:07:10.740
Yeah, speaking of going fast.

00:07:10.740 --> 00:07:17.300
One of the things that people often start with with a new project is to use for a database.

00:07:17.300 --> 00:07:24.000
Instead of deciding which one they're going to use down the road, they'll throw SQLite in or SQLite.

00:07:24.000 --> 00:07:25.160
I don't know how you pronounce that.

00:07:25.160 --> 00:07:33.160
But since it's built into Python and you don't have to install anything extra, I guess Python calls it SQLite 3.

00:07:33.160 --> 00:07:33.720
I don't know.

00:07:33.720 --> 00:07:35.340
Were there two of them before that?

00:07:35.340 --> 00:07:35.940
Yeah, I guess so.

00:07:35.940 --> 00:07:40.020
That's something folks use and then they sometimes migrate to something else.

00:07:40.020 --> 00:07:42.740
And sometimes there's a lot of applications that stick with it.

00:07:42.740 --> 00:07:51.340
There's an article called Going Fast with SQLite in Python that talks about some of the ways this fellow came up with to make it quickly.

00:07:51.340 --> 00:07:53.620
Make it run faster.

00:07:53.620 --> 00:07:54.140
Yeah, that's great.

00:07:54.140 --> 00:07:55.720
So SQLite is really awesome.

00:07:55.720 --> 00:07:58.300
It's an embedded database that ships with Python.

00:07:58.300 --> 00:08:00.040
You don't have to do anything to have it.

00:08:00.040 --> 00:08:00.860
You just have it.

00:08:00.860 --> 00:08:02.420
It runs in process.

00:08:02.420 --> 00:08:06.660
So there's like zero latency over the network or overhead or anything like that.

00:08:06.660 --> 00:08:12.380
It's actually really powerful if you're willing to have a sort of in-process databases.

00:08:12.380 --> 00:08:12.740
Yeah.

00:08:12.740 --> 00:08:16.440
And I had the impression that it was simpler than it is.

00:08:16.440 --> 00:08:20.540
But it does quite a bit of cool things as I was reading through this.

00:08:20.540 --> 00:08:23.320
Like I didn't know you could do user-defined functions.

00:08:23.320 --> 00:08:28.840
And you've got control over transactions and auto-commits and things like that.

00:08:28.840 --> 00:08:30.620
It's gotten to be pretty feature-rich.

00:08:30.620 --> 00:08:30.980
It's cool.

00:08:30.980 --> 00:08:38.700
It's a pretty dense article, but I think it's a good throw yourself into the deep end if you want to jump into SQLite 3.

00:08:38.700 --> 00:08:39.780
Yeah, yeah, it's definitely cool.

00:08:39.780 --> 00:08:46.100
It's certainly a good way to get started so you don't have to worry about extra servers and network connectivity and keeping that safe and all that.

00:08:46.100 --> 00:08:46.900
Very cool.

00:08:46.900 --> 00:08:51.300
So before we get on to the next item, I want to talk quickly about DigitalOcean.

00:08:52.100 --> 00:08:58.760
This website that hosts the podcast, delivers the podcast feed, and a lot of the other stuff that I'm doing online runs on DigitalOcean.

00:08:58.760 --> 00:09:01.680
Very, very nice experience.

00:09:01.680 --> 00:09:05.700
They've got incredibly fast, reliable, and cheap servers.

00:09:05.700 --> 00:09:06.660
Five, ten dollars.

00:09:06.660 --> 00:09:09.720
You can have servers based on SSDs.

00:09:09.720 --> 00:09:12.200
Really up and running in 30 seconds.

00:09:12.200 --> 00:09:13.480
You just SSH in.

00:09:13.980 --> 00:09:15.760
Get them all set up and ready to roll.

00:09:15.760 --> 00:09:22.740
So if you want nice, fast servers, check them out at DigitalOcean.com and let them know that we sent you their way.

00:09:22.740 --> 00:09:25.660
And they've been really good about sponsoring the show, and I really appreciate that.

00:09:25.660 --> 00:09:26.280
It's great.

00:09:26.280 --> 00:09:26.880
Yeah, definitely.

00:09:26.880 --> 00:09:27.600
Thank you.

00:09:27.600 --> 00:09:28.440
Thank you, DigitalOcean.

00:09:29.540 --> 00:09:36.140
One of the things I think many people got their first programming experience on is a graphing calculator.

00:09:36.140 --> 00:09:36.980
Right?

00:09:36.980 --> 00:09:40.380
Remember back when you were in middle school or something, you had like a TI, whatever.

00:09:40.380 --> 00:09:42.180
You could make it do dumb things.

00:09:42.180 --> 00:09:43.040
Well, yeah.

00:09:43.040 --> 00:09:45.960
I even started programming my HP calculator.

00:09:45.960 --> 00:09:46.980
It didn't even graph.

00:09:46.980 --> 00:09:48.800
So I was programming that.

00:09:48.800 --> 00:09:49.480
Yeah, exactly.

00:09:49.480 --> 00:09:49.680
Yeah.

00:09:49.680 --> 00:09:52.320
So HP or TI instruments or whatever.

00:09:53.320 --> 00:10:02.840
One of the really cool finds we've dug up recently is this graphing calculator by this company called NumWorks.

00:10:02.840 --> 00:10:06.320
And you might think, okay, why is this graphing calculator very interesting?

00:10:06.320 --> 00:10:12.140
Well, the way that you program it is you program it in Python.

00:10:12.140 --> 00:10:13.100
Yeah, that's cool.

00:10:13.100 --> 00:10:14.060
It's really cool.

00:10:14.060 --> 00:10:16.860
So the programming language literally is Python.

00:10:16.860 --> 00:10:20.560
And it will do sort of visual math.

00:10:20.700 --> 00:10:26.920
It's got even a free emulator so you can run it on your Mac or your PC and check it out there.

00:10:26.920 --> 00:10:29.320
It does graphing, all kinds of stuff.

00:10:29.320 --> 00:10:42.460
And then it even has a way for you to work with the hardware through gives you like some stats on 3D printing and things like that if you want to do other more hardware oriented things with it.

00:10:42.460 --> 00:10:49.180
But definitely this concept of a full-blown graphing calculator where you program it in Python, that's awesome.

00:10:49.180 --> 00:10:50.560
And hackable and all.

00:10:50.560 --> 00:10:58.880
And yet it's still supposedly it's going to be okay for use on the SAT even in August next year.

00:10:58.880 --> 00:10:59.960
Yeah, that's actually a big deal.

00:10:59.960 --> 00:11:04.420
Like I know some of the graphing calculators are banned because people use them to cheat or they do too much or whatever.

00:11:04.420 --> 00:11:04.780
Yeah.

00:11:04.780 --> 00:11:09.180
At least for now until they figure out how pip install SAT helper.

00:11:09.180 --> 00:11:10.780
Yeah, exactly.

00:11:10.780 --> 00:11:11.340
Nice.

00:11:11.340 --> 00:11:12.080
Yeah, it's pretty fun.

00:11:12.080 --> 00:11:12.780
Check that out.

00:11:12.900 --> 00:11:19.340
It's nice to see that showing up in the calculator space because that really is like the first programmable things lots of kids really have to interact with.

00:11:19.340 --> 00:11:20.640
We don't really see it too much anymore.

00:11:20.640 --> 00:11:23.300
But there's well in consumer things.

00:11:23.300 --> 00:11:30.160
But in in test measurement, we see some programmable features show up in different sorts of devices.

00:11:30.160 --> 00:11:34.740
And having the programmable language be Python in more places is good.

00:11:34.740 --> 00:11:35.240
Yeah, definitely.

00:11:35.240 --> 00:11:39.400
We talked about last week having Python be the programming language of Excel.

00:11:39.400 --> 00:11:39.900
Right.

00:11:39.900 --> 00:11:40.380
For example.

00:11:40.380 --> 00:11:40.720
Right.

00:11:40.720 --> 00:11:41.060
Yeah.

00:11:41.060 --> 00:11:47.600
It seems like a really, really great choice for if you want to add a little programmability to whatever it is you're doing.

00:11:47.600 --> 00:11:50.360
Python seems like a great choice for that language.

00:11:50.360 --> 00:11:51.720
So nice to see it here as well.

00:11:51.720 --> 00:11:52.100
It's nice.

00:11:52.100 --> 00:12:02.220
One of the problems you might have with the data science space, if you work with a Jupyter notebook and you just have access to the notebook, but you need a library that's not on the server, what are you going to do?

00:12:02.220 --> 00:12:04.360
I didn't know this was a problem, actually.

00:12:04.360 --> 00:12:08.460
I haven't been using Jupyter notebooks enough to run into this issue.

00:12:08.800 --> 00:12:19.100
But a lot of people get their Python and Jupyter from installing like a Conda package or some other bundled thing.

00:12:19.100 --> 00:12:21.760
And you can't just go off and pip install.

00:12:21.760 --> 00:12:23.380
I didn't know you couldn't.

00:12:23.380 --> 00:12:30.440
But Jake Vanderplass, he wrote up this article on installing Python packages.

00:12:30.920 --> 00:12:40.040
And there's a couple, I'm not even going to try to write this, but I pulled out some of the cheats for pip and Conda and on how to install from within it.

00:12:40.040 --> 00:12:42.180
And there's some magical incantations.

00:12:42.180 --> 00:12:46.660
But the article also goes through about all the different reasons why you have to do this.

00:12:46.660 --> 00:12:46.880
Yeah.

00:12:46.880 --> 00:12:48.280
And they're not obvious at all.

00:12:48.280 --> 00:12:50.120
Like I would have never figured those out.

00:12:50.120 --> 00:12:50.560
Yeah.

00:12:50.560 --> 00:12:52.640
So it's good that somebody figured it out.

00:12:52.640 --> 00:12:53.700
Yes.

00:12:53.700 --> 00:12:54.240
Thank you, Jake.

00:12:55.220 --> 00:12:55.840
That's awesome.

00:12:55.840 --> 00:12:59.280
So if you're doing data science and Jupyter notebooks, this is really, really cool.

00:12:59.280 --> 00:13:08.500
So last thing I want to share for us is the videos from PyCon DE, as in Deutschland, 2017 are online.

00:13:08.500 --> 00:13:12.640
So Miroslav, let us know on Twitter about this.

00:13:12.640 --> 00:13:15.740
And there are a ton of interesting talks over here.

00:13:15.920 --> 00:13:19.640
So quite a bunch of cool talks.

00:13:19.640 --> 00:13:23.740
I'm not sure how many, but I would, I don't know, guess 50 or so.

00:13:23.740 --> 00:13:24.660
Are they all in German?

00:13:24.660 --> 00:13:25.460
Here's the thing.

00:13:25.460 --> 00:13:28.300
They're, as far as I can tell, I've only seen English ones.

00:13:28.300 --> 00:13:29.740
And I looked through a bunch of them.

00:13:29.740 --> 00:13:39.080
So there's a cool talk called Technical Lessons from Pythonic Refactoring at Yelp by a woman named Yenny Chung.

00:13:39.080 --> 00:13:41.600
And a bunch of other ones.

00:13:41.760 --> 00:13:51.240
It's kind of hard to read all the titles right here, but I've looked through and I'm definitely filling up my playlist with stuff that I need to start watching because there's a lot of cool stuff here.

00:13:51.240 --> 00:13:58.500
Eve Hilpisch, who was on my podcast, talks about why Python has taken over in finance, for example, right?

00:13:58.500 --> 00:14:00.120
And we don't even have it in Excel yet.

00:14:00.120 --> 00:14:02.320
So there's lots of cool stuff here.

00:14:02.320 --> 00:14:05.800
It was in Karlsruhe in Germany, which is a lovely place.

00:14:05.800 --> 00:14:08.880
I wish I could have gone to the conference, but second best thing, watch it online.

00:14:08.880 --> 00:14:10.200
I'm really glad that we have those.

00:14:10.200 --> 00:14:10.920
Can't wait.

00:14:11.060 --> 00:14:17.960
Yeah, all the Pycons do such a good job of getting their content online straight away, you know, within a day or two of the presentation.

00:14:17.960 --> 00:14:21.120
So it really makes a big difference, especially since they sell out.

00:14:21.120 --> 00:14:22.060
Yeah, definitely.

00:14:22.060 --> 00:14:26.160
You were definitely going to be at, I'm going to be at the one in Cleveland, Pycon US.

00:14:26.160 --> 00:14:26.880
Are you going to make it?

00:14:26.880 --> 00:14:27.700
Yeah, I think so.

00:14:27.700 --> 00:14:28.720
That's the plan.

00:14:28.720 --> 00:14:29.280
That's the plan.

00:14:29.280 --> 00:14:29.740
It's going to be fun.

00:14:29.740 --> 00:14:30.700
All right.

00:14:30.700 --> 00:14:32.720
But for now, we'll enjoy the ones in Germany.

00:14:32.720 --> 00:14:34.480
Any news into the year?

00:14:34.480 --> 00:14:35.240
Into the year.

00:14:35.360 --> 00:14:40.980
Yeah, no, I'm trying to come up with some fun Python projects to work on in my free time.

00:14:40.980 --> 00:14:43.380
Get a Raspberry Pi and do something with it.

00:14:43.380 --> 00:14:44.700
Maybe plug it into Home Assistant.

00:14:44.700 --> 00:14:46.600
Things like that.

00:14:46.600 --> 00:14:47.640
But I haven't done anything.

00:14:47.640 --> 00:14:48.660
Yeah, me either.

00:14:48.660 --> 00:14:50.440
I've got two of them sitting there.

00:14:50.440 --> 00:14:51.640
But yeah.

00:14:51.700 --> 00:14:54.140
If you could just put some code on them and make them do some cool stuff.

00:14:54.140 --> 00:14:54.840
Right on.

00:14:54.840 --> 00:14:55.500
All right.

00:14:55.500 --> 00:14:59.100
Well, Brian, thanks again for sharing the news with everyone.

00:14:59.100 --> 00:15:00.280
It's great to chat with you as always.

00:15:00.280 --> 00:15:01.120
Yeah, thank you.

00:15:01.120 --> 00:15:03.660
Thank you for listening to Python Bytes.

00:15:03.660 --> 00:15:06.220
Follow the show on Twitter via at Python Bytes.

00:15:06.220 --> 00:15:09.120
That's Python Bytes as in B-Y-T-E-S.

00:15:09.120 --> 00:15:12.520
And get the full show notes at pythonbytes.fm.

00:15:12.520 --> 00:15:16.860
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:15:16.860 --> 00:15:19.580
We're always on the lookout for sharing something cool.

00:15:20.080 --> 00:15:22.960
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:15:22.960 --> 00:15:26.580
Thank you for listening and sharing this podcast with your friends and colleagues.

