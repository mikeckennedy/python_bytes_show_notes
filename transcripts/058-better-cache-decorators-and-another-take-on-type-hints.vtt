
00:00:00.000 --> 00:00:05.600
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.600 --> 00:00:10.200
This is episode 58 recorded December 19th, 2017.


00:00:10.200 --> 00:00:11.100
I'm Michael Kennedy.


00:00:11.100 --> 00:00:12.000
And I'm Brian Okken.


00:00:12.000 --> 00:00:14.000
And we have a bunch of awesome stuff to share with you.


00:00:14.000 --> 00:00:16.600
First I want to say this episode is brought to you by DigitalOcean.


00:00:16.600 --> 00:00:17.800
So thank you DigitalOcean.


00:00:17.800 --> 00:00:20.800
Yeah, thanks DigitalOcean.


00:00:20.800 --> 00:00:22.300
Yes, thank you DigitalOcean.


00:00:22.300 --> 00:00:23.000
Indeed.


00:00:23.000 --> 00:00:23.800
Love their stuff.


00:00:23.800 --> 00:00:24.800
Talk more about it later.


00:00:24.800 --> 00:00:27.100
Let's start with monkeying around a bit.


00:00:27.100 --> 00:00:27.600
I like them.


00:00:27.600 --> 00:00:28.600
There's so much monkey.


00:00:28.600 --> 00:00:30.520
I'm not sure why in Python.


00:00:30.520 --> 00:00:31.660
Here's a lot of monkey, you're right.


00:00:31.660 --> 00:00:33.900
Yeah, we got monkey patching and stuff.


00:00:33.900 --> 00:00:37.900
But this is monkey type from Instagram.


00:00:37.900 --> 00:00:41.800
And in episode 54, we talked about pyannotate,


00:00:41.800 --> 00:00:46.300
which is a way to add type annotations to your code


00:00:46.300 --> 00:00:47.220
while it's running.


00:00:47.220 --> 00:00:51.720
But it was from Dropbox, but it was only Python 2 at the moment.


00:00:51.720 --> 00:00:55.000
This one is a similar sort of thing, but it's from Instagram,


00:00:55.000 --> 00:00:57.120
and it's Python 3 only.


00:00:57.120 --> 00:01:02.040
and it doesn't do the comments, it does the Python 3 style type annotations.


00:01:02.040 --> 00:01:04.680
So I'm kind of really excited to try this out.


00:01:04.680 --> 00:01:06.440
Yeah, that sounds really cool.


00:01:06.440 --> 00:01:09.640
You know, I'm definitely heartened to see a lot of people


00:01:09.640 --> 00:01:13.160
who have large code bases, Dropbox, Instagram, and so on,


00:01:13.160 --> 00:01:18.320
making these tools, they're going to bring everybody along to modern Python really nicely.


00:01:18.320 --> 00:01:23.320
It's very good, and I like the way the types are moving.


00:01:23.320 --> 00:01:27.640
I was kind of lukewarm on types for Python at first,


00:01:27.640 --> 00:01:30.840
but using it to try to solidify


00:01:30.840 --> 00:01:34.760
the quality of your code base for large code bases makes total sense.


00:01:34.760 --> 00:01:36.440
And I like what they're doing with it.


00:01:36.440 --> 00:01:38.440
I really like adding the type hints


00:01:38.440 --> 00:01:43.160
just in a couple of places where the autocomplete falls down like,


00:01:43.160 --> 00:01:46.480
you know, last week we talked about Mongo engine.


00:01:46.480 --> 00:01:48.120
You do a query for Mongo engine,


00:01:48.120 --> 00:01:52.440
and as far as the tooling, it's just like that's a random thing that came back.


00:01:52.440 --> 00:01:53.640
It has no idea what it is.


00:01:53.640 --> 00:01:55.480
But if you add just a few type hints,


00:01:55.480 --> 00:01:58.000
the rest of your application can automatically,


00:01:58.000 --> 00:02:00.320
well, editor can detect the rest of your applications


00:02:00.320 --> 00:02:02.320
working with one of these concrete types.


00:02:02.320 --> 00:02:05.880
So just a little type hint here and there will go a long ways.


00:02:05.880 --> 00:02:07.840
And I guess that's probably for new code, right?


00:02:07.840 --> 00:02:11.960
But for older code, you want to switch to Python 3 from Python 2,


00:02:11.960 --> 00:02:14.960
having that as a solid foundation.


00:02:14.960 --> 00:02:17.960
So you really know what you're working with as you move it around.


00:02:17.960 --> 00:02:20.800
I think that that's even really valuable right there on its own.


00:02:20.800 --> 00:02:24.600
The article we link to is one of the things it talks about is


00:02:24.600 --> 00:02:30.840
what happens is you're actually running your code and it pays attention to which types are going through different parts of your code.


00:02:30.840 --> 00:02:38.400
And the little, you can run it through while you're running tests, but it did have a note which I thought was interesting


00:02:38.400 --> 00:02:43.400
to say, if you have this style of testing where you're using a lot of mock objects,


00:02:43.400 --> 00:02:48.000
the types are going to be all messed up. So be aware of that and you may want to


00:02:48.000 --> 00:02:49.800
generate your type some other way.


00:02:49.800 --> 00:02:51.800
Oh, right, because it will see the mock


00:02:51.800 --> 00:02:54.800
and it will think that's what's supposed to go there, not the thing it is mocking.


00:02:54.800 --> 00:02:56.000
Yeah, exactly.


00:02:56.000 --> 00:02:57.200
Interesting. Cool.


00:02:57.200 --> 00:03:02.400
So, sometimes you can make your code fast by optimizing it.


00:03:02.400 --> 00:03:04.400
Maybe it talks to a database and


00:03:04.400 --> 00:03:08.800
you're going to put the right kind of indexes in there and of course that should be fast, but


00:03:08.800 --> 00:03:12.700
other times you're working with things that are out of your control.


00:03:12.700 --> 00:03:14.400
You need to call a web service


00:03:14.400 --> 00:03:16.500
to get some kind of stock quote or whatever,


00:03:16.500 --> 00:03:20.440
and you can only be as fast as that web service or whatever.


00:03:20.440 --> 00:03:23.540
Unless you're willing to hang on to it for a little bit


00:03:23.540 --> 00:03:24.740
and do some caching, right?


00:03:24.740 --> 00:03:25.240
- Yeah.


00:03:25.240 --> 00:03:27.740
- So Python, I don't know how many people know,


00:03:27.740 --> 00:03:31.380
but there's something called FuncTools in Python,


00:03:31.380 --> 00:03:35.260
and in there there's a decorator called lru_cache.


00:03:35.260 --> 00:03:37.760
And you can put that on to any function,


00:03:37.760 --> 00:03:41.160
and it will look at the arguments going in there,


00:03:41.160 --> 00:03:44.260
and if it sees that argument series again,


00:03:44.260 --> 00:03:45.380
and it can have multiple arguments.


00:03:45.380 --> 00:03:47.700
If it sees all the same arguments it's seen before,


00:03:47.700 --> 00:03:50.100
it will just return that value instantly.


00:03:50.100 --> 00:03:51.380
So that's pretty cool, right?


00:03:51.380 --> 00:03:54.020
>> I did not know that. That is cool. Yeah.


00:03:54.020 --> 00:03:57.980
>> Yeah. So suppose I'm calling like a weather API,


00:03:57.980 --> 00:04:00.200
and I'm doing it from my website,


00:04:00.200 --> 00:04:03.060
and I've got all these different people coming in and calling it,


00:04:03.060 --> 00:04:04.220
and it turns out to be slow.


00:04:04.220 --> 00:04:06.380
I could actually throw that onto it,


00:04:06.380 --> 00:04:09.600
and it would say if two people ask for the same zip code,


00:04:09.600 --> 00:04:11.060
potentially it's just going to return


00:04:11.060 --> 00:04:12.540
that instantly just out of memory.


00:04:12.540 --> 00:04:16.800
So that's really cool, but it only works in certain ways.


00:04:16.800 --> 00:04:19.680
For example, if that method takes a list,


00:04:19.680 --> 00:04:23.120
well, lists are not hashable, LRU cache thing,


00:04:23.120 --> 00:04:25.260
decorator requires all the stuff it's gonna hold


00:04:25.260 --> 00:04:27.120
to be cacheable, for example.


00:04:27.120 --> 00:04:31.120
So it's cool, but it's kind of limited in a certain way.


00:04:31.120 --> 00:04:33.000
So there's this other project


00:04:33.000 --> 00:04:35.600
that's kind of inspired by this idea,


00:04:35.600 --> 00:04:36.760
and it goes much further


00:04:36.760 --> 00:04:39.280
and has a lot more options called cache tools.


00:04:39.280 --> 00:04:40.760
I'm guessing you probably haven't heard of cache tools


00:04:40.760 --> 00:04:42.080
if you haven't heard of LRU cache.


00:04:42.080 --> 00:04:46.680
So this is a project that has a bunch of different cache implementations,


00:04:46.680 --> 00:04:54.680
as well as a more flexible decorator, actually a couple of decorators you can use in exactly the same way.


00:04:54.680 --> 00:05:00.180
So it defines like a basic cache, an LFU cache, so least frequently used,


00:05:00.180 --> 00:05:03.480
because eventually your cache may run, you know, get full and run out of memory,


00:05:03.480 --> 00:05:05.680
or you can say only hold 100 items.


00:05:05.680 --> 00:05:08.680
Well, when you get to 101, which one do you throw away?


00:05:08.680 --> 00:05:13.000
Well, you can use the LFU cache and throw away the one that was least frequently used,


00:05:13.000 --> 00:05:16.600
and LRU cache, the one that was least recently used,


00:05:16.600 --> 00:05:20.200
or have what's called a TTL cache, which is a time to live, like,


00:05:20.200 --> 00:05:23.880
cache everything for five minutes. I'm sure we have the memory for this. How could that be bad, right?


00:05:23.880 --> 00:05:26.200
Yeah.


00:05:26.200 --> 00:05:28.600
And then you get that call in the middle of the night.


00:05:28.600 --> 00:05:29.600
Server's down.


00:05:29.600 --> 00:05:34.280
The TTL cache, that seems like, like, for instance, your example of


00:05:34.280 --> 00:05:36.880
grabbing some weather data or something,


00:05:36.880 --> 00:05:41.920
I mean, you could hold on to the weather data for at least a few minutes before refreshing that.


00:05:41.920 --> 00:05:45.320
Right, and what's really cool about the TTL one is it naturally


00:05:45.320 --> 00:05:47.320
expires the data


00:05:47.320 --> 00:05:49.320
in a way that you can predict and might understand.


00:05:49.320 --> 00:05:52.520
So if you're like, look, the weather is not going to change that much in 10 minutes, just


00:05:52.520 --> 00:05:54.520
cache everything for 10 minutes.


00:05:54.520 --> 00:05:58.360
And it automatically will go get a new one after the 11th minute, right?


00:05:58.360 --> 00:06:00.000
So that's a really nice way to do it.


00:06:00.000 --> 00:06:04.880
So these are cache implementations, and then there's what's called a memoizing.


00:06:04.880 --> 00:06:07.960
So memoization is this concept that we've been talking about.


00:06:07.960 --> 00:06:13.360
Memoizing decorators, cacheUtils.cache, which is like the one we talked about before.


00:06:13.360 --> 00:06:14.960
But you can plug in all sorts of stuff.


00:06:14.960 --> 00:06:18.000
You can plug in any of the cache implementations we've talked about,


00:06:18.000 --> 00:06:20.000
or even a straight dictionary.


00:06:20.000 --> 00:06:25.480
It takes a function that will generate the hash so it can cache non-hashable things


00:06:25.480 --> 00:06:29.680
because you could generate some kind of indicator like an ID out of a database object or something.


00:06:29.680 --> 00:06:35.380
You could pass interesting things like a weak value, a weak ref.weakvalue dictionary,


00:06:35.380 --> 00:06:38.980
so you don't actually hold on to the memory of the things, which is pretty cool.


00:06:38.980 --> 00:06:43.780
And even has like a locking object you can pass for thread safety


00:06:43.780 --> 00:06:46.380
if you got to recreate stuff in the hash and stuff.


00:06:46.380 --> 00:06:51.940
So really it's like the idea of the LRU cache and func tools, but way more flexible and configurable.


00:06:51.940 --> 00:06:54.940
- This is nice. - It's insanely easy to use them, right?


00:06:54.940 --> 00:06:57.780
You just throw a decorator on a slow function and now it's a fast function.


00:06:57.780 --> 00:06:59.780
Just make sure you understand what that means.


00:06:59.780 --> 00:07:03.780
Yeah, so definitely in conjunction with safe


00:07:03.780 --> 00:07:06.980
measure before you prematurely optimize.


00:07:06.980 --> 00:07:08.480
Yeah, it's cool though.


00:07:08.480 --> 00:07:09.480
Speaking of going fast.


00:07:09.480 --> 00:07:13.980
Yeah, speaking of going fast, one of the things that people often start with a new


00:07:13.980 --> 00:07:20.180
project is to use for a database instead of deciding which one they're going to use down the road,


00:07:20.180 --> 00:07:25.580
they'll throw SQLite in, or SQLite, I don't know how you pronounce that.


00:07:25.580 --> 00:07:30.060
But since it's built into Python and you don't have to install anything extra,


00:07:30.060 --> 00:07:33.340
I guess Python calls it SQLite 3.


00:07:33.340 --> 00:07:35.380
I don't know whether two of them before that.


00:07:35.380 --> 00:07:35.940
>> Yeah, I guess so.


00:07:35.940 --> 00:07:40.100
>> That's something folks use and then they sometimes migrate to something else.


00:07:40.100 --> 00:07:42.940
Sometimes there's a lot of applications that stick with it.


00:07:42.940 --> 00:07:47.260
There's an article called Going Fast with SQLite and Python that talks


00:07:47.260 --> 00:07:51.980
about some of the ways this fellow came up with to make it quickly.


00:07:51.980 --> 00:07:53.620
Make it run faster.


00:07:53.620 --> 00:07:55.780
Yeah, that's great. So, SQLite is really awesome.


00:07:55.780 --> 00:07:58.460
Like, it's an embedded database that ships with Python.


00:07:58.460 --> 00:08:01.020
You don't have to do anything to have it. You just have it.


00:08:01.020 --> 00:08:05.180
It runs in process, so there's like zero latency over the network


00:08:05.180 --> 00:08:06.820
or overhead or anything like that.


00:08:06.820 --> 00:08:09.740
It's actually really powerful if you're willing to,


00:08:09.740 --> 00:08:12.460
you know, have a sort of in-process databases.


00:08:12.460 --> 00:08:16.460
Yeah, and I had the impression that it was simpler than it is,


00:08:16.460 --> 00:08:20.540
but it does quite a bit of cool things as I was reading through this.


00:08:20.540 --> 00:08:23.820
Like, I didn't know you could do user defined functions


00:08:23.820 --> 00:08:28.860
and you've got control over transactions and auto commits and things like that.


00:08:28.860 --> 00:08:31.060
It's gotten to be pretty feature rich. It's cool.


00:08:31.060 --> 00:08:35.660
It's a pretty dense article, but I think it's a good throw yourself into the deep end


00:08:35.660 --> 00:08:38.780
if you want to jump into SQLite 3.


00:08:38.780 --> 00:08:39.900
Yeah, it's definitely cool.


00:08:39.900 --> 00:08:42.580
It's certainly a good way to get started so you don't have to worry about


00:08:42.580 --> 00:08:46.500
extra servers and network connectivity and keeping that safe and all that.


00:08:46.500 --> 00:08:49.540
Very cool. So, before we get on to the next item,


00:08:49.540 --> 00:08:51.540
I want to talk quickly about DigitalOcean.


00:08:51.540 --> 00:08:55.540
This website that hosts the podcast, delivers the podcast feed,


00:08:55.540 --> 00:08:59.040
and a lot of the other stuff that I'm doing online runs on DigitalOcean.


00:08:59.040 --> 00:09:02.040
Very, very nice experience.


00:09:02.040 --> 00:09:05.840
They've got incredibly fast, reliable, and cheap servers.


00:09:05.840 --> 00:09:09.840
Five, ten dollars, you can have servers based on SSDs.


00:09:09.840 --> 00:09:13.840
Really up and running in 30 seconds, you just SSH in,


00:09:13.840 --> 00:09:15.840
get them all set up and ready to roll.


00:09:15.840 --> 00:09:19.140
So if you want nice, fast servers, check them out.


00:09:19.140 --> 00:09:22.740
at digitalocean.com and let them know that we sent you their way.


00:09:22.740 --> 00:09:25.700
And they've been really good about sponsoring the show and I really appreciate that.


00:09:25.700 --> 00:09:26.260
It's great.


00:09:26.260 --> 00:09:28.500
Yeah, definitely. Thank you. Thank you, DigitalOcean.


00:09:28.500 --> 00:09:34.180
One of the things I think many people got their first programming experience


00:09:34.180 --> 00:09:36.980
on is a graphing calculator, right?


00:09:36.980 --> 00:09:40.500
Remember back in your middle school or something, you had like a TI, whatever,


00:09:40.500 --> 00:09:42.420
you could make it do dumb things.


00:09:42.420 --> 00:09:46.020
Well, yeah, I even started programming my HP calculator.


00:09:46.020 --> 00:09:48.820
It didn't even graph. So I was programming that.


00:09:48.820 --> 00:09:52.500
Yeah, exactly. So HP or TI instruments or whatever.


00:09:52.500 --> 00:10:00.820
So one of the really cool finds we've dug up recently is this graphing calculator


00:10:00.820 --> 00:10:02.820
by this company called NumWorks.


00:10:02.820 --> 00:10:06.500
And you might think, "Okay, why is this graphing calculator very interesting?"


00:10:06.500 --> 00:10:12.340
Well, the way that you program it is you program it in Python.


00:10:12.340 --> 00:10:13.220
Yeah, that's cool.


00:10:13.220 --> 00:10:17.060
It's really cool. So the programming language literally is Python.


00:10:17.060 --> 00:10:20.740
and it will do sort of visual math.


00:10:20.740 --> 00:10:22.860
It's got even a free emulator,


00:10:22.860 --> 00:10:25.980
so you can run it on your Mac or your PC


00:10:25.980 --> 00:10:26.980
and check it out there.


00:10:26.980 --> 00:10:29.340
It does graphing, all kinds of stuff.


00:10:29.340 --> 00:10:33.420
And then it even has a way for you to work with the hardware


00:10:33.420 --> 00:10:38.020
through, gives you like some stats on 3D printing


00:10:38.020 --> 00:10:39.820
and things like that if you want to do


00:10:39.820 --> 00:10:42.480
other more hardware oriented things with it.


00:10:42.480 --> 00:10:45.980
But definitely this concept of a full blown


00:10:45.980 --> 00:10:48.680
graphing calculator where you program it in Python.


00:10:48.680 --> 00:10:49.520
That's awesome.


00:10:49.520 --> 00:10:50.640
- And hackable and all.


00:10:50.640 --> 00:10:53.560
And yet it's still supposedly,


00:10:53.560 --> 00:10:56.520
it's gonna be okay for use on the SAT


00:10:56.520 --> 00:10:58.960
even in August next year.


00:10:58.960 --> 00:11:00.000
- Yeah, that's actually a big deal.


00:11:00.000 --> 00:11:01.960
Like I know some of the graphing calculators are banned


00:11:01.960 --> 00:11:03.000
'cause people use them to cheat


00:11:03.000 --> 00:11:04.880
or they do too much or whatever.


00:11:04.880 --> 00:11:06.000
At least for now,


00:11:06.000 --> 00:11:09.880
until they figure out how pip install SAT helper.


00:11:09.880 --> 00:11:11.080
- Yeah, exactly.


00:11:11.080 --> 00:11:12.240
- Nice, but that's pretty fun.


00:11:12.240 --> 00:11:13.080
Check that out.


00:11:13.080 --> 00:11:15.200
It's nice to see that showing up in the calculator space


00:11:15.200 --> 00:11:17.520
'cause that really is like the first programmable thing


00:11:17.520 --> 00:11:19.400
lots of kids really have to interact with.


00:11:19.400 --> 00:11:20.800
- We don't really see it too much anymore,


00:11:20.800 --> 00:11:23.360
but there's, well, in consumer things,


00:11:23.360 --> 00:11:25.720
but in test and measurement,


00:11:25.720 --> 00:11:28.460
we see some programmable features show up


00:11:28.460 --> 00:11:30.380
in different sorts of devices,


00:11:30.380 --> 00:11:33.500
and having the programmable language be Python


00:11:33.500 --> 00:11:34.840
in more places is good.


00:11:34.840 --> 00:11:35.660
- Yeah, definitely.


00:11:35.660 --> 00:11:37.860
We talked about last week having Python


00:11:37.860 --> 00:11:40.480
be the programming language of Excel, right, for example.


00:11:40.480 --> 00:11:41.320
- Right, yeah.


00:11:41.320 --> 00:11:44.440
- It seems like a really, really great choice for,


00:11:44.440 --> 00:11:47.880
if you want to add a little programmability to whatever it is you're doing,


00:11:47.880 --> 00:11:50.440
Python seems like a great choice for that language.


00:11:50.440 --> 00:11:51.800
So, nice to see it here as well.


00:11:51.800 --> 00:11:52.240
- It's nice.


00:11:52.240 --> 00:11:55.600
- One of the problems you might have with the data science space,


00:11:55.600 --> 00:11:59.520
if you work with a Jupyter notebook and you just have access to the notebook,


00:11:59.520 --> 00:12:02.440
but you need a library that's not on the server, what are you going to do?


00:12:02.440 --> 00:12:04.440
- I didn't know this was a problem, actually.


00:12:04.440 --> 00:12:08.560
I haven't been using Jupyter notebooks enough to run into this issue,


00:12:08.560 --> 00:12:13.200
but a lot of people get their Python and Jupyter


00:12:13.200 --> 00:12:16.920
from installing like a conda package


00:12:16.920 --> 00:12:19.680
or some other bundled thing.


00:12:19.680 --> 00:12:22.160
And you can't just go off and pip install.


00:12:22.160 --> 00:12:23.880
I didn't know you couldn't.


00:12:23.880 --> 00:12:27.400
But Jake Vanderplass, Vanderplass?


00:12:27.400 --> 00:12:30.680
He wrote up this article on installing Python packages


00:12:30.680 --> 00:12:34.000
and there's a couple, I'm not even gonna try to write this,


00:12:34.000 --> 00:12:37.560
but I pulled out some of the cheats for pip and conda


00:12:37.560 --> 00:12:40.180
and on how to install from within it.


00:12:40.180 --> 00:12:42.700
And there's some magical incantations.


00:12:42.700 --> 00:12:44.160
But the article also goes through


00:12:44.160 --> 00:12:46.740
about all the different reasons why you have to do this.


00:12:46.740 --> 00:12:48.500
- Yeah, and they're not obvious at all.


00:12:48.500 --> 00:12:50.300
Like I would have never figured those out.


00:12:50.300 --> 00:12:53.460
- Yeah, so it's good that somebody figured it out.


00:12:53.460 --> 00:12:54.560
- Yes, thank you, Jake.


00:12:54.560 --> 00:12:56.300
That's awesome.


00:12:56.300 --> 00:12:58.060
So if you're doing data science and Jupyter Notebooks,


00:12:58.060 --> 00:12:59.940
this is really, really cool.


00:12:59.940 --> 00:13:02.100
So last thing I wanna share for us


00:13:02.100 --> 00:13:06.860
is the videos from PyCon DE, as in Deutschland,


00:13:06.860 --> 00:13:08.700
2017 are online.


00:13:08.700 --> 00:13:12.700
So Miroslav let us know on Twitter about this


00:13:12.700 --> 00:13:15.800
and there are a ton of interesting talks over here.


00:13:15.800 --> 00:13:19.700
So quite a bunch of cool talks.


00:13:19.700 --> 00:13:22.340
I'm not sure how many, but I would, I don't know,


00:13:22.340 --> 00:13:23.900
guess 50 or so.


00:13:23.900 --> 00:13:24.860
- Are they all in German?


00:13:24.860 --> 00:13:27.060
- Here's the thing, as far as I can tell,


00:13:27.060 --> 00:13:28.820
I've only seen English ones


00:13:28.820 --> 00:13:29.780
and I looked through a bunch of them.


00:13:29.780 --> 00:13:33.220
So there's a cool talk called


00:13:33.220 --> 00:13:37.260
technical lessons from Pythonic refactoring at Yelp


00:13:37.260 --> 00:13:41.700
by a woman named Yenny Chung and a bunch of other ones.


00:13:41.700 --> 00:13:43.880
It's kind of hard to read all the titles right here,


00:13:43.880 --> 00:13:46.400
but I've looked through and I'm definitely filling up


00:13:46.400 --> 00:13:49.380
my playlist with stuff that I need to start watching


00:13:49.380 --> 00:13:52.100
'cause there's a lot of cool stuff here.


00:13:52.100 --> 00:13:54.660
Eve Hilpisch, who was on my podcast,


00:13:54.660 --> 00:13:57.700
talks about why Python has taken over in finance,


00:13:57.700 --> 00:13:58.700
for example, right?


00:13:58.700 --> 00:14:00.740
And we don't even have it in Excel yet.


00:14:00.740 --> 00:14:02.440
So there's lots of cool stuff here.


00:14:02.440 --> 00:14:05.880
It was in Karlsruhe in Germany, which is a lovely place.


00:14:05.880 --> 00:14:07.160
I wish I could have gone to the conference,


00:14:07.160 --> 00:14:09.080
but second best thing, watch it online.


00:14:09.080 --> 00:14:10.560
- I'm really glad that we have those.


00:14:10.560 --> 00:14:11.400
Can't wait.


00:14:11.400 --> 00:14:13.200
- Yeah, all the PyCons do such a good job


00:14:13.200 --> 00:14:16.100
of getting their content online straight away,


00:14:16.100 --> 00:14:18.180
you know, within a day or two of the presentation.


00:14:18.180 --> 00:14:20.020
So it really makes a big difference,


00:14:20.020 --> 00:14:21.460
especially since they sell out.


00:14:21.460 --> 00:14:22.380
- Yeah, definitely.


00:14:22.380 --> 00:14:23.960
- You were definitely gonna be at,


00:14:23.960 --> 00:14:26.300
I'm gonna be at the one in Cleveland, PyCon US.


00:14:26.300 --> 00:14:27.140
Are you gonna make it?


00:14:27.140 --> 00:14:28.200
- Yeah, I think so.


00:14:28.200 --> 00:14:29.040
That's the plan.


00:14:29.040 --> 00:14:30.460
- That's the plan, it's gonna be fun.


00:14:30.460 --> 00:14:31.400
All right, but for now,


00:14:31.400 --> 00:14:33.080
We'll enjoy the ones in Germany.


00:14:33.080 --> 00:14:34.680
Any news, end of the year?


00:14:34.680 --> 00:14:37.360
- End of the year, yeah, no, I'm trying to come up


00:14:37.360 --> 00:14:41.200
with some fun Python projects to work on in my free time.


00:14:41.200 --> 00:14:43.440
- Get a Raspberry Pi and do something with it.


00:14:43.440 --> 00:14:46.680
Maybe plug it in a home assistant, things like that.


00:14:46.680 --> 00:14:47.880
But I haven't done anything.


00:14:47.880 --> 00:14:49.120
- Yeah, me either.


00:14:49.120 --> 00:14:51.760
I've got two of them sitting there, but yeah.


00:14:51.760 --> 00:14:53.200
- If you could just put some code on them


00:14:53.200 --> 00:14:55.320
and make them do some cool stuff, right on.


00:14:55.320 --> 00:14:57.360
All right, well, Brian, thanks again


00:14:57.360 --> 00:14:59.240
for sharing the news with everyone.


00:14:59.240 --> 00:15:00.560
It's great to chat with you, as always.


00:15:00.560 --> 00:15:26.720
Yeah, thank you.

