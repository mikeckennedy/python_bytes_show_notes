00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 127, recorded April 24th, 2019. I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 And we have a special guest this week as well. Kenneth Wrights. Welcome to the show, man.

00:00:17 Hi, thanks for having me.

00:00:18 It's great to have you here. I wonder if requests will come up as a topic during the show. What do you think?

00:00:23 Request three, might.

00:00:25 The future of requests. How exciting. Awesome. Well, thanks for being here. It's great to have Before we get any further, I want to say thank you to Datadog for sponsoring this show.

00:00:33 Check them out at pythonbytes.fm/datadog.

00:00:35 More on why they're cool later.

00:00:37 Brian, I feel like WebAssembly, Rust, all these things are just – there's so many cool things going on around it.

00:00:43 And that's something you found us – for us to start off with, right?

00:00:46 Yeah, I saw this from a cool – actually a Twitter post from Mara Boss.

00:00:50 I think it's Boss, B-O-S.

00:00:52 And it's an extension to Rust that's inline Python.

00:00:57 So if you're a Rust person and you need a little Python in there, you can just inline it as a, I think it's as a macro or something.

00:01:04 I'm not a Rust person, so I'm not sure how this works, but you can inline Python code, including things like embedding a matplotlib call to pop up a window.

00:01:15 So it's pretty neat.

00:01:16 I don't really have much more to say about it other than neat.

00:01:19 You can run Python within Rust.

00:01:21 I think that's pretty awesome. Yeah, quite cool.

00:01:23 I wrote something like this this week, actually, for Bash and Python.

00:01:27 So you can do inline bash in Python.

00:01:29 So it seems to be a trend.

00:01:30 People want to embed other languages in other languages.

00:01:33 That's cool.

00:01:34 Can people get to your bash thing?

00:01:35 Is that a public thing?

00:01:36 Yeah, it's just import bash or pip install bash.

00:01:38 That's pretty cool.

00:01:40 There's a lot of interesting interplays here.

00:01:42 Brian, have I talked about Wasmr, as in WebAssembly-mer, before on the show?

00:01:48 I'm not sure.

00:01:49 I think that's going to have to be a topic.

00:01:51 So there's all sorts of cool interplays between Rust and Python these days.

00:01:56 Rust, obviously, is big for generating WebAssembly.

00:01:58 And so there's now a project called Wasmr, which lets you--

00:02:02 I think I talked about it last week.

00:02:03 I did, yeah.

00:02:04 So lets you basically run WebAssembly in Python.

00:02:07 And this is kind of like the opposite.

00:02:09 Oh, really?

00:02:09 It's an interesting way.

00:02:10 Yeah, yeah.

00:02:11 So kind of like Node.js is the platform for running JavaScript outside of the browser, Wasmr kind of does similar stuff.

00:02:17 Lets you take any WebAssembly thing and run it in your Python code.

00:02:21 You basically import the functions from it, and then you call them in straight Python.

00:02:24 >> So do you have to do reflecting where like you know what the structure of the code looks like when you import it?

00:02:30 >> I don't know.

00:02:31 I doubt it gives you any help, but the way you interact with it looks like Python.

00:02:35 You don't have to do anything special beyond an import statement.

00:02:38 >> Okay, so you don't have to write C or anything?

00:02:40 >> Like a load statement.

00:02:41 No, nothing like that.

00:02:42 It's pretty much straight Python.

00:02:44 This is really cool, Brian.

00:02:44 Yeah, I like this.

00:02:45 Very, very nice find.

00:02:46 Cool.

00:02:47 All right, Kenneth, what's your next one?

00:02:49 You want to tell us about the future with your back from the past microphone?

00:02:52 >> Yeah, sure.

00:02:53 I wanted to announce that request three is underway right now.

00:02:56 This we're doing a development cycle at the moment, and I wanted to announce just some information about that basically.

00:03:02 So request two, which is the thing that you know and love is going to go into CVE only mode, which is basically been for a long time.

00:03:10 That's kind of the way things have been for a couple of years now.

00:03:13 Does that mean like security fixes only or security fixes and bug fixes?

00:03:17 It means that if there's a CVE, like if there's a true security vulnerability, we'll fix that as soon as possible.

00:03:26 And if there's a, you know, any security conscious bugs that will, will address those as well.

00:03:30 But you know, things like people, a lot of suggest UI changes a lot and it's just not going to happen at this point.

00:03:35 It's going to happen in request three, if you're going to.

00:03:38 Awesome.

00:03:38 So what's the story with request three?

00:03:40 What are you guys, what are the major features?

00:03:41 Yeah.

00:03:42 So the major features are there's going to have asynchronous await keywords.

00:03:45 So you're going to be able to do asynchronous calls.

00:03:47 We're ripping out URL of three, which is unfortunate because there's different Approaches on how the future of the project could unfold and it's this needs to start happening now so we're just taking action and making our own library for making these low-level requests and We'll see how far along we get with that But there's we don't see any blockers that we can foresee at this point So we'll have a new a new core if you will and it'll be as a new namespace for quest 3 So everything that you know that depends on requests. This is gonna have backwards and compatible changes But it'll be under a new namespace.

00:04:22 So you won't have to worry about that.

00:04:23 You can have both installed at the same time.

00:04:25 - Nice, and it's modern Python only, right?

00:04:27 - Yeah, it's only Python 3.6, and it has type annotations and all the public functions so your IDEs can get some nice code completion and stuff like that.

00:04:35 I'm pretty excited about it.

00:04:36 So I don't wanna take up too much time now, so I guess we gotta keep moving.

00:04:39 - Well, we do, and I'm pretty excited.

00:04:41 So I have one more question.

00:04:42 So why 3.6 and not 3.5?

00:04:44 Like 3.5 is fine for async and await.

00:04:46 Did you do like different type annotations?

00:04:48 What was the three six maybe f-strings?

00:04:51 - f-strings.

00:04:52 - Okay, F yes, right on.

00:04:53 Brian, I still owe you a sticker.

00:04:54 - They're really useful when you're writing a low level library or something that deals with a lot of URLs.

00:04:59 It's really nice to have f-strings.

00:05:00 - Yeah, that's pretty cool.

00:05:01 That's interesting.

00:05:02 - And I don't find it acceptable to use three five.

00:05:04 Like if you have three six, even three six doesn't seem to be acceptable.

00:05:08 I'd like to, it's gonna be documented as three seven only because like if you're gonna be on latest Python, you might as well be on latest latest Python.

00:05:16 - Yeah. - Yeah.

00:05:16 - Right on, and by the time that that comes out, 3.7 will definitely be easy, easy, right?

00:05:21 What's the time frame?

00:05:22 - Yeah, I think it'll secretly work at 3.6 and secretly work at 3.7, but I'll just say it works at 3.8.

00:05:27 - I love it, Brian, you excited?

00:05:31 - Yeah, actually I think that'll be fun.

00:05:33 - Yeah, I'm thinking of also ripping out the .get keyword.

00:05:38 That's the thing I'm torn about at the moment.

00:05:40 Like the request.get that everyone uses.

00:05:42 - What would it, what it's--

00:05:43 - To force everyone to use session.

00:05:45 - Interesting, okay.

00:05:46 - So you create a session and then you call get on the session, right?

00:05:48 - Yeah, so it would be, it's called HTTP session now.

00:05:51 So it'd be http.request is what I want people to do.

00:05:55 But I'm still playing with the idea.

00:05:57 So it might be not changed, we'll see.

00:05:59 - Yeah, you could face some backlash.

00:06:01 But yeah, it sounds good.

00:06:03 - I'm willing to take it.

00:06:04 (laughing)

00:06:04 - You got some tough skin, you've been on the internet for a while, right?

00:06:07 (laughing)

00:06:08 Yeah, let's not go down that path.

00:06:09 All right, so maybe you could even say that you've been in some flame wars.

00:06:14 So the next item I have is called Pyflame.

00:06:18 And Pyflame is pretty cool.

00:06:19 Like, if you want to know how the performance of your program or certain libraries going, you can generate what's called a flame graph for Python.

00:06:28 And what's really nice about this is it's super low overhead enough that you can even run it in production without like hurting your program.

00:06:37 So you could say, oh, there's something going wrong with the website.

00:06:40 Let me log in and attach Pyflame to it and see what's happening, and then just break loose and go analyze that, rather than try to simulate what's happening.

00:06:50 So I think that's pretty cool.

00:06:51 - We actually used this on the PipM team at one point to determine where our slow points were and how fast our boot up time is.

00:06:58 - Yeah, and was it useful?

00:06:59 - It was very useful.

00:07:00 It shows you every single call in your stack and just shows you a graph over time of how much time was spent on each call and all the sub calls.

00:07:09 So it's great.

00:07:10 I really like it.

00:07:11 Yeah, the graphs are nice as well.

00:07:12 They're pretty obvious, not just like a grid of numbers like a spreadsheet, but graphs.

00:07:17 Yeah, usually when you hear someone talk about graphs that are generated from Python, it's like you have to work with them a lot to make them useful.

00:07:24 But these ones are useful out of the box, which I really like.

00:07:28 Yeah, cool.

00:07:29 Another thing that it said that it does, which is nice, has nothing to do with bitbump in this feature, but it's capable of profiling embedded Python interpreters.

00:07:38 So like for example, in micro whiskey or gene or corn or some of these, you know, back end worker processes for web servers, so you can get in there and get that in multi-threaded stuff.

00:07:46 So I think it's pretty awesome.

00:07:47 Brian, do you guys care about performance where you are?

00:07:50 I mean, you're doing testing hardware, so it's not like users are directly interacting with it.

00:07:55 Is it, is it, I guess not, do you care about it, but is it something you have to like worry about?

00:07:59 Hey, in my production stuff, the Python is not the bottleneck.

00:08:04 It's the communication.

00:08:05 So yeah, that's a great response.

00:08:08 It's on the wire, it's not our fault.

00:08:11 Well, it usually is our fault, but it's usually an optimization of doing too many calls and reducing the communication latencies.

00:08:19 Right, having a chatty API versus trying to bulk up the thing you want to ask it or whatever, right?

00:08:24 Are you working with a lot of microservices?

00:08:26 Working with test equipment, so communicating commands and retrieving data.

00:08:32 Yeah, that would take a lot of time.

00:08:34 - Yeah, Brian tests actual devices with Python.

00:08:38 - That's awesome.

00:08:39 Oh, that's right, I knew about this.

00:08:40 Yeah, you test like phones and stuff, don't you?

00:08:44 - Yep.

00:08:45 - That's awesome.

00:08:45 - Yeah, pretty cool.

00:08:46 All right, before we get on to the next one, which looks pretty interesting, let me just tell you about Datadog.

00:08:51 So they've been sponsoring Python Bytes for quite a while and we definitely appreciate them.

00:08:55 So they're a monitoring and analytics service that lets you take all of your metrics and logs and tracing and whatnot across your services, like microservices, like Ken just said, and put them all in one place, and it automatically instruments async libraries like asyncio and Django and Tornado, and helps you visualize all that stuff across the boundaries to find your bottlenecks.

00:09:15 Super cool, so check them out.

00:09:16 Get a free 14-day trial and a cool Datadog T-shirt over at pythonbytes.fm/datadog.

00:09:22 All right, thanks Datadog.

00:09:23 Brian, what do you got next?

00:09:25 - This was gonna be one of my extras, but I thought I'd just discuss it 'cause I was curious what you guys thought.

00:09:29 So Flit is, I really like it.

00:09:31 It's a little package that allows you to quickly build a pyproject.toml file and a license file.

00:09:39 Basically, if you've got a module that you want to share with somebody, or a package that's just a source package, it's just a few commands to try to get it into a wheel form so you can share it.

00:09:50 And it even does publishing within it.

00:09:53 The one thing I didn't like about it is it didn't support source directories.

00:09:57 And I like source directories in my packages.

00:10:00 So I did what you can do with open source projects is I submitted a pull request.

00:10:05 So just submitted this last night.

00:10:08 I've been playing with the corner cases today, and there's still some, I'm listing it as a work in progress because there's some corner cases that still need tested and probably ironed out.

00:10:18 But I don't know, we'll see.

00:10:20 We'll see where this goes.

00:10:22 >> Did you make it so it's configurable to any directory or specifically SRC?

00:10:26 >> Specifically SRC.

00:10:28 >> Okay, cool.

00:10:29 It doesn't break any of the other.

00:10:31 So really right now it used to have two kinds of projects, just a module or a package with a name.

00:10:38 And now I'm just adding those two within a source directory.

00:10:42 The old mechanism all works.

00:10:44 It's just extending it.

00:10:45 Yeah.

00:10:45 Played us a little bit like a combination between twine and cookie cutter a little bit.

00:10:50 Like it's far reduced in scope from cookie cutter and in twine, all it does is, is publish things, publish wheels for you.

00:10:59 And that's the tool I typically use in my workflow.

00:11:01 But flit is a great alternative.

00:11:03 If you don't already have your setup stuff built out, I think flit is like a great first tool to go for, especially if you don't have those files already written.

00:11:12 Yeah, that's awesome.

00:11:12 Yeah.

00:11:13 Well, hopefully people like it.

00:11:14 I mean, it's out there, the PR, right?

00:11:16 They could merge it.

00:11:16 That's pretty cool.

00:11:17 Yeah.

00:11:17 So hopefully, hopefully they'll put it in.

00:11:19 Otherwise you can't use it on your project.

00:11:21 You'll have to succumb to our side where without, where you don't use source.

00:11:25 Well, I could fork it.

00:11:27 Yeah, you could.

00:11:28 But I don't really want to support it.

00:11:31 So I'm hoping that...

00:11:32 Call it split.

00:11:33 Yeah, you don't want that puppy.

00:11:34 You don't need another thing to take care of, right?

00:11:39 Yeah, that's a good name though.

00:11:41 Just going to do it.

00:11:44 Awesome.

00:11:45 All right.

00:11:46 So speaking of packaging and things that we've talked about and things we like, I'm a huge fan of PipX.

00:11:52 I think PipX is really killer.

00:11:54 The way it works.

00:11:55 issues with homebrew in it, but I'm going to put those aside for a minute.

00:11:58 Also, Pipin, tell us the story here.

00:12:01 My endorsement is also with this flag, which is I've run into some issues and I'm not sure what they are yet.

00:12:06 So, it appears as though PipX is great.

00:12:09 And what it does is it just creates a virtual environment and installs binaries for you.

00:12:14 So, it's like a PIPC replacement or a virtual amp wrapper if you have like, sometimes people will have like a system virtual amp where they install their system utilities, or they'll just keep their system utilities in the system installation of Python, and then they'll isolate their different projects into virtual labs.

00:12:32 This makes it so every single tool has its own virtual lab, which is really best practice.

00:12:37 So if you're using pipav, if you're using HTTP IE, if you're using anything pip itself, anything that's pip installable from the command line, you can install easily with pipx.

00:12:48 And it does appear as though it has Chimp, so I'm not sure that it's fantastic, but it appears as though it works pretty well so far.

00:12:57 And I really like that it supports multiple binaries.

00:12:59 Yeah, I do too. It's quite nice.

00:13:01 And to me, it feels like homebrew, but for Python executables.

00:13:05 Like, it's not necessarily for managing stuff for your project, but for stuff that is Python-based that you just want to run, right?

00:13:12 Like, I want to, I don't know, run Glances or Cookie Cutter or something like that, right? Or PipMF.

00:13:17 Exactly. And it gives you a nice isolated environment in which to install that.

00:13:21 And some of these, like PipM has like some 50 dependencies or something crazy.

00:13:25 So it's really good to have an isolated virtual environment for that.

00:13:29 Because in Python you can't install multiple versions of a dependency like you can in Ruby. So that's why we need to do this, basically.

00:13:37 Yeah, cool. Well, I definitely like it.

00:13:40 That's the end of my endorsement with the asterisks afterwards.

00:13:43 afterwards. Yeah, I love it. The problem that I ran into the only problem I ran into was when I installed Python three through homebrew and then Python three got upgraded by homebrew, it had lost like the sim link to where Python was in all of the virtual environments that it had created. Oh, interesting. Yeah. Yeah.

00:14:02 So when I basically when I upgraded Python, it like lost track of what it was up to. So I just had to like re pip X install everything. There's maybe another way to fix it. But that that was what I did because all the virtual environments it manages seem to have gotten whacked.

00:14:16 - Yeah, PipM does that too, where it'll break, all your virtual homes just break if you upgrade your Python underneath it, so.

00:14:22 - Yeah, what do you do to fix it?

00:14:23 You know better than I do.

00:14:24 - I just delete them all.

00:14:26 - Okay, so even you have the same fix as I do.

00:14:29 Did you try turning it off and on?

00:14:31 How many times?

00:14:32 Three times, I always do it three times.

00:14:34 - I would like to automate that so it does it for you.

00:14:37 Like, you know, it has a message like, oh, you appear to have upgraded your Python.

00:14:40 We're gonna clean it up for you.

00:14:42 but it is limited time.

00:14:44 - Exactly, quite cool.

00:14:45 All right, the last one, Kenneth, I think you'll like this one because it has to do with requesting things on the internet.

00:14:51 And I don't know how to say this, I'm guessing cheat sheet, cheat.sh as a domain, okay?

00:14:58 So this is an interesting cheat sheet for getting started with Python or Bash or whatever.

00:15:08 And the way it works is you send it curl requests or send it HTTP pi request on the command line to ask it questions, okay?

00:15:19 So you can go over there and say, like if you have HTTP pi installed, you could say, HTTP space cht.sh/python that tells you you're talking about Python, then you could say /sort+list.

00:15:31 And if you run that, it will tell you, oh, here's a Python example of how you sort a list.

00:15:37 You create the list, you say mylist.sort, you set the key to like string.lower, or whatever you wanna sort, if you say you wanna sort alphabetically, but without concern of casing, things like that.

00:15:48 So you can ask it arbitrary questions, like cheat.sheet./python/connect-to-database, or something like that, with a pluses in there.

00:15:57 And it'll tell you, oh, here's some ways you can do it, like with SQLite, let's see what it says for this one.

00:16:02 Oh yeah, here's a little example of how I use PeeWee to open up a cute little class and do ORM stuff to it.

00:16:08 And just, it's pretty, pretty funky, pretty interesting.

00:16:11 And then you can ask it questions like how to get started with a colon learn on any project.

00:16:16 Like how do I get started with Python?

00:16:17 And it'll tell you in its little way.

00:16:20 It's, it's pretty sweet.

00:16:21 I think funky is the right word for this.

00:16:22 It's different, right?

00:16:24 So it's like Google, but harder.

00:16:26 Basically it's slightly more deterministic.

00:16:31 Yes, but it has integration into Visual Studio Code and VIM.

00:16:34 Oh, nice.

00:16:34 Which is interesting.

00:16:36 And then you can also, like you can install a client and put it into stealth mode.

00:16:41 So like if you're doing an interview, anything that you select in a text box, it will start like on the side, printing out its response to that.

00:16:50 Okay, so if like you're in a chat window.

00:16:54 - I'm looking at the readme and he really takes this very seriously.

00:16:58 - It is.

00:16:59 - He says ultra fast returns answers within 100 milliseconds as a rule.

00:17:02 So like he's definitely making scalability a concern.

00:17:05 So I think this is a really fun production project.

00:17:08 - I think so too.

00:17:08 And it doesn't use its own data sources, it uses other community driven repos for different topics and it tries to pull those in.

00:17:16 So it's not like it tries to be the answer, it tries to be a facade from an API to the answers.

00:17:23 - So it has sources that it gets them from.

00:17:25 I'm interested in seeing that part.

00:17:27 - Yeah, yeah, it's pretty interesting.

00:17:28 So I just wanna give a shout out to John Boltmeyer.

00:17:31 He sent this in a while ago and I thought it was fun, so I thought I'd throw it out there.

00:17:34 - And he also has clipboard integration and tab completion support for Bash, Phish, and ZSH.

00:17:39 - I know, I mean, this is in depth, right?

00:17:41 - (laughs) Like, you can really go all out with this.

00:17:44 - (laughs) Yes, you can.

00:17:46 All right, well, that's it for our full major topics.

00:17:49 But I'm sure we'll have a couple extra things to throw out here real quick.

00:17:52 Brian, you wanna start us off?

00:17:53 - So you guys were giving me a bad time about being a VI person last week, so I thought I'd throw in an article about VI is good for beginners.

00:18:01 It's just a fun read for anybody that thinks that VI is terrible.

00:18:06 - You used Vim, not VI?

00:18:07 - Actually, I used PyCharm right now with the idea of Vim.

00:18:10 - Yeah, this is an interesting contrarian sort of take on the simplicity is good for you.

00:18:15 - Yeah.

00:18:16 - Yeah, I myself, I think it's a good thing to learn.

00:18:19 - I did a presentation last week with a Jupyter notebook, and one of the things I needed to do was to quickly make sure I cleaned out all the output of a bunch of notebooks, and I found this tool called nbstripout, And so I wanted to drop a link to that.

00:18:34 It's pretty helpful.

00:18:35 - Yeah, it's nice. - It's just a command line thing.

00:18:37 And then we had a bunch of people, a couple people including Cecil mentioned PioDyed, but we did cover that in episode 93, but there was a recent article written up about PioDyed that's kind of neat, so I'll drop a link to that in the show notes as well.

00:18:51 - I'm super excited about PioDyed.

00:18:54 I actually just yesterday interviewed Michael Dropboom, who wrote that article you're referencing here worked on the project on Talk Python going deep into WebAssembly and what Mozilla's doing with PyOdied stuff.

00:19:06 So it's, yeah, it's super cool.

00:19:07 Kenneth, have you seen this PyOdied?

00:19:08 I'm looking at it now.

00:19:09 It's like all of the scientific Python stack in WebAssembly.

00:19:15 Yes, including the libraries like NumPy and Matplotlib and stuff like that.

00:19:20 That's awesome.

00:19:21 Not just like CPython.

00:19:22 That is not unimpressive.

00:19:24 No, it's not.

00:19:27 It's quite something.

00:19:28 That's awesome.

00:19:29 Let's see.

00:19:30 I got some quick conference announcements.

00:19:32 Kenneth, I see you do as well.

00:19:33 So PyCon Australia just opened their call for proposals.

00:19:37 So Australia is a beautiful place to be.

00:19:39 Either maybe you're already there and you just want to go to the conference, or you want an excuse to go to Australia, submit a talk.

00:19:44 That's awesome.

00:19:45 And then last time I had used about whether the gravitational waves of black holes colliding, that research was also done with Python.

00:19:56 So remember we talked about the black hole picture and all that stuff, Brian?

00:20:00 - Yeah.

00:20:01 - Well, our listeners are awesome because they're like, "Oh, Michael, did you wonder about this?" Yes, here's the package they use to discover gravitational waves and do all this amazing science.

00:20:09 So actually, there's some really cool projects out there, and I'll link to a video of someone talking about it.

00:20:15 So thanks to Dave Kirby and Matthew Fikert both for that, and I think it's gwpi?

00:20:21 Yeah, gwpi.github.io is a Python package for gravitational wave astrophysics, So detecting when black holes collide and the ripple in space time they make with Python is pretty awesome.

00:20:32 - Yeah, I was really surprised to find out that when that code was made available, that a request was used for it.

00:20:38 - That's so awesome.

00:20:39 - I have no idea how or why.

00:20:42 - It doesn't matter.

00:20:43 It's awesome.

00:20:44 - But it's in there, so I was like, yes.

00:20:46 - That is super cool.

00:20:47 Congrats, man.

00:20:48 And then finally, another thing that's awesome about our listeners is anytime we mention something we think it's unique, they're like, there's four other ones.

00:20:54 Here's another one.

00:20:55 So bullet we talked about, cooked input we talked about is awesome.

00:20:59 Bullets is super cool for like drop downs inside terminal windows and like nice selections, but it doesn't work on Windows.

00:21:05 So someone else, Sander Tunison, sent over Questionnaire, which is one that is also compatible for Windows, for our Windows folks.

00:21:12 - Thanks for putting that in, 'cause I need that.

00:21:15 - See, you were like the first, one of the very first people to benefit from this podcast.

00:21:19 I feel the same way, like people are like, oh, you finally, I mean, like I benefit from this just like you guys do.

00:21:24 It's just I have to get there first before we publish it.

00:21:27 - Yeah. - Awesome, awesome.

00:21:28 Okay, Kenneth, what do you got?

00:21:29 - Honestly, I have a few CFPs I wanted to announce.

00:21:31 One of them is for Pi Colorado.

00:21:33 It's a great conference.

00:21:34 It's gonna be their first year.

00:21:35 It's run by a great team, at least.

00:21:37 It should be a great conference.

00:21:38 If they are actively looking for people to submit to their CFP, they have not had as many submissions as they would like to so far.

00:21:44 They, you know, bad timing with the conference year, that type of thing.

00:21:48 So if anyone has any talks that they think could be applicable to that event, please submit.

00:21:54 Pi Ohio also has their CFP open at the moment, they're looking for people to submit, but they never have a problem with getting too many submissions.

00:22:01 So I wouldn't rush to that one if you're, you know, if you're feeling iffy about it.

00:22:06 And then the last one is a PyCon remote, which is something that I'm going to be putting on.

00:22:11 If all goes according to plan, with Calvin, Spellman, I believe is how you say his last name, who is from the PI Tennessee organizers group.

00:22:19 him and I are co-chairing.

00:22:21 That's cool.

00:22:22 What's that about?

00:22:22 It's basically a PyCon, but it'll be accessible to people who can't attend PyCon or who can't normally speak at PyCon.

00:22:29 Is it also virtual or only virtual?

00:22:31 Only virtual.

00:22:32 Okay, sweet.

00:22:33 That's awesome.

00:22:34 Yeah.

00:22:34 We're still figuring out what the feasibility of different approaches are, but it'll most likely be live streamed and people will send in videos ahead of time of their talks.

00:22:43 Okay.

00:22:44 And unless they're like a keynote speaker or something like that.

00:22:46 So we're still figuring out the details, but it'll be, it should be good.

00:22:50 We have a mailing list with like 700 people who have signed up so far.

00:22:53 So it should be something we can pull off.

00:22:57 So if you're interested and want to learn more, you can go to do/co/pycon-remote.

00:23:04 I know it's not the best URL, but that's the best I can give you right now.

00:23:07 Awesome.

00:23:07 Yeah, we'll put the link in the show notes.

00:23:08 People can just click it in their player.

00:23:10 That's awesome.

00:23:11 All right, well, let's round it out with some jokes here.

00:23:17 Brian, you want to go first?

00:23:19 We're not doing all the jokes, are we?

00:23:21 We've got to go fast.

00:23:21 We've got to go fast.

00:23:22 OK.

00:23:23 So yeah, I'll just pick one.

00:23:25 I don't know how tasteful this is.

00:23:27 We'll let it land anyway.

00:23:29 So Python used to be directed by the BDFL, Guido.

00:23:32 Now it's directed by a steering council, GUIDs zero through four.

00:23:36 Love it.

00:23:39 Kenneth, you want to do one?

00:23:40 You got any?

00:23:41 What's the difference between a musician and a pizza?

00:23:43 I don't know.

00:23:43 You can eat a pizza.

00:23:44 Pizza can feed a family of four.

00:23:46 Oh, that hurts.

00:23:47 I can say that because I've made $25 off of my music so far.

00:23:50 Beautiful.

00:23:51 All right.

00:23:52 I got two, but they're related, so I'm gonna put them together real quick.

00:23:55 I think first to kick it off that Ubuntu users are apt to get this joke that I'm about to tell, okay?

00:24:01 And then the second one.

00:24:02 (laughing)

00:24:05 The second one, this is fun.

00:24:07 I actually, I know Kenneth, you switched over to Windows recently, and I'm also kind of a fan of it, even though I spend a lot of time on Mac.

00:24:13 Still, I like the joke.

00:24:15 How many programmers does it take to kill a cockroach?

00:24:18 Two.

00:24:18 One holds, the other installs Windows on it.

00:24:21 (laughter)

00:24:24 - All right, beautiful.

00:24:24 Well, I think that's probably about it for our show today.

00:24:27 Kenneth, thank you for coming.

00:24:28 Brian, thank you as always for being here.

00:24:30 - Yeah, thank you.

00:24:31 - Thank you for listening to Python Bytes.

00:24:32 Follow the show on Twitter via @pythonbytes.

00:24:35 That's Python Bytes as in B-Y-T-E-S.

00:24:38 And get the full show notes at pythonbytes.fm.

00:24:41 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:24:45 We're always on the lookout for sharing something cool.

00:24:48 On behalf of myself and Brian Okken, This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

