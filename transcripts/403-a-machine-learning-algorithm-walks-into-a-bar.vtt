WEBVTT

00:00:00.001 --> 00:00:05.120
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:05.120 --> 00:00:10.320
This is episode 403, recorded September 30th, last day in September.

00:00:10.320 --> 00:00:11.820
And this is Brian Okken.

00:00:11.820 --> 00:00:12.960
And I'm Michael Kennedy.

00:00:12.960 --> 00:00:18.160
And if you'd like to connect with us to suggest something or whatever,

00:00:18.160 --> 00:00:23.360
you can send us a link, a contact form at pythonbytes.fm.

00:00:23.360 --> 00:00:28.660
You can watch the show live, pythonbytes.fm/live for more information about that.

00:00:28.660 --> 00:00:35.700
You can always, usually Mondays at 10, but you can check those out on YouTube later also.

00:00:35.700 --> 00:00:38.500
And this episode is sponsored by us.

00:00:38.500 --> 00:00:44.900
So check out our offerings, courses on Talk Python training and also at pythontest.com.

00:00:44.900 --> 00:00:48.400
Also a shout out, thanks to the Patreon supporters that we still have.

00:00:48.400 --> 00:00:55.960
And if you'd like to connect with us, you can find the links in the show notes for our Fosted on links.

00:00:55.960 --> 00:00:57.300
So we're on Fosted on.

00:00:57.300 --> 00:01:02.500
Also, Michael still hangs out on X sometimes, so you can get in there.

00:01:02.500 --> 00:01:05.800
Sometimes when people talk to me over there, I'll go talk to him for sure.

00:01:05.800 --> 00:01:11.860
All right, well, let's kick this off with a discussion very much from Mastodon.

00:01:11.860 --> 00:01:19.900
This is a blog post from Simon Willison and the title, opening sentence, I don't know, whatever it is.

00:01:19.900 --> 00:01:23.600
It's "UV is under discussion on Mastodon."

00:01:23.600 --> 00:01:31.400
And Jacob Kaplan Moss kicked off a fascinating conversation about UV on Mastodon, and it's worth reading the whole thing.

00:01:31.400 --> 00:01:33.160
I think it's pretty interesting.

00:01:33.160 --> 00:01:40.560
You know, we've got this really powerful and transformative tool that's kind of improving Python packaging.

00:01:40.560 --> 00:01:43.620
That's been a little bit rough on various edges.

00:01:43.620 --> 00:01:48.460
And yet it's definitely not the first one of these to come along, right?

00:01:48.460 --> 00:01:50.760
We've got many of them that have been successful.

00:01:50.760 --> 00:01:57.320
We have Hatch, Poetry, PDM, even PipENV and all these different things that have tried to do this.

00:01:57.320 --> 00:02:01.620
And I don't feel like there was much controversy about them.

00:02:01.620 --> 00:02:09.400
And it's this interesting mix of why are people worried if someone else goes and makes another attempt to work?

00:02:09.400 --> 00:02:17.400
You know, on the other hand, I think part of the reason people are really invested in this and debating should you use UV, should you not?

00:02:17.400 --> 00:02:21.800
Is it good for Python? Is it so effective?

00:02:21.800 --> 00:02:27.700
And it's taking over so much that people are like, "Wait, this is the new way? This is the way things are going?"

00:02:27.700 --> 00:02:32.200
I just think it's really fascinating that people are, I don't know, considering this.

00:02:32.200 --> 00:02:36.000
So there's a bunch of different comments that people made.

00:02:36.000 --> 00:02:40.260
And I'll just kind of give a flavor of it and you can go check this out.

00:02:40.260 --> 00:02:42.600
But I think it's just interesting.

00:02:42.600 --> 00:02:48.500
Before I jump in, I for one am a fan of UV. I think they're making really meaningful change.

00:02:48.500 --> 00:02:53.800
And so in that sense, I'm kind of in the Hennec camp of this conversation.

00:02:53.800 --> 00:03:04.800
So Russell Keith-McGee says, "As enthusiastic as I am about the direction UV is going, I haven't adopted them yet because I want to very much understand Astral's business model."

00:03:04.800 --> 00:03:06.900
More on that in a minute. So that's very interesting.

00:03:06.900 --> 00:03:13.300
Hennec says, "As much as I hate VC, FOSS projects," there's a worry that because it's VC funded, it'll flame out.

00:03:13.300 --> 00:03:21.700
"FOSS projects flame out all the time too. If Frost lost interest in PDM, there's no PDM anymore. Same for OFEC and Hatch and so on."

00:03:21.700 --> 00:03:29.500
So like, look, this could fix packaging and we'd have open source code to run with afterwards.

00:03:29.500 --> 00:03:38.800
One of the concerns I think that Glyph also is the one to bring up here is that because it's written in Rust, it's more difficult for Python people to maintain.

00:03:38.800 --> 00:03:43.300
And while I think that's fair, I think that's also there's a lot of Python that's written in C.

00:03:43.300 --> 00:03:45.000
I mean, it's CPython.

00:03:45.000 --> 00:03:52.200
And so to say that it's not Python is not necessarily fair, because there's a lot of things that we do in Python that are C based.

00:03:52.200 --> 00:04:00.100
I think the difference might be there's more people currently working in Python who also know C versus people currently working in Python who also know Rust.

00:04:00.100 --> 00:04:02.100
I think that's kind of the mix there.

00:04:02.100 --> 00:04:03.800
But to say, "Oh, it's in a different language."

00:04:03.800 --> 00:04:06.000
Like, well, Python itself is a different language.

00:04:06.000 --> 00:04:06.900
So there's that.

00:04:06.900 --> 00:04:11.400
Maybe two more things and then I'll wrap it up here.

00:04:11.400 --> 00:04:17.800
Hennec also says about Rust, "I don't think you all quite grok what UV makes so special due to your seniority.

00:04:17.800 --> 00:04:32.200
The speed is really cool, but the reason Rust is elemental is that it's a single compiled blob that you can put onto your machine as a binary and it will bootstrap Python, it will bootstrap Python packages, Python projects, and just the deployment thing."

00:04:32.200 --> 00:04:33.500
And I really agree with that.

00:04:33.500 --> 00:04:40.000
I think that's been the missing piece and an ongoing challenge of Python's to just be like, "Here, have this thing you run."

00:04:40.000 --> 00:04:44.500
Like, "Well, let's have a conversation about a few things before you can run that code."

00:04:44.500 --> 00:04:44.900
Right?

00:04:44.900 --> 00:04:47.200
I was just working on that this morning with another project.

00:04:47.200 --> 00:04:49.100
Like, this doesn't run as smooth as it should.

00:04:49.100 --> 00:04:59.900
Christopher Neugenbauer says, "Just dropping here to say that corporate capture of the Python ecosystem is the number one thing that keeps me up at night subject in my community work.

00:04:59.900 --> 00:05:02.900
So I watch Astral with interest, even though I'm not worried."

00:05:02.900 --> 00:05:09.900
Speaking of, let's go and see an authoritative response from Charlie Marsh, founder of Astral.

00:05:09.900 --> 00:05:11.800
Y'all are worried about the business model.

00:05:11.800 --> 00:05:12.800
So here's the deal.

00:05:12.800 --> 00:05:15.800
I don't want to charge people money to use our tools.

00:05:15.800 --> 00:05:26.800
I don't want to create an incentive structure whereby our open source offerings are competing with any commercial offerings, which is what you see with a lot of hosted open source SaaS business models.

00:05:26.800 --> 00:05:27.300
That's true.

00:05:27.300 --> 00:05:39.800
What I want to do is to build software that vertically integrates with our open source tools and let's sell that software to companies that are already using Ruff, UV, and et cetera, alternative to things that companies pay for today.

00:05:39.800 --> 00:05:41.300
And that's some examples and so on.

00:05:41.300 --> 00:05:50.300
I'll go read this, but this is quite interesting to keep your thumb on the zeitgeist of UV and packaging and all these things.

00:05:50.300 --> 00:05:53.300
I guess put my spin on it.

00:05:53.300 --> 00:06:07.300
On both sides, I like to Arm and Ronaker's comment of what UV is doing, even in the worst possible future outcome, it's very forkable and maintainable thing.

00:06:07.300 --> 00:06:14.800
Even if something happened with Astral and Astral suddenly became evil, there's an escape hatch.

00:06:14.800 --> 00:06:19.800
The other side of that is also, I actually like Charlie.

00:06:19.800 --> 00:06:29.300
I don't think Charlie Marsh has any nefarious ideas, but there's nothing stopping him from selling the company and the new owners taking it into a different direction.

00:06:29.300 --> 00:06:38.300
And so that's the side that Charlie might have the greatest intent, but the next owner might not.

00:06:38.300 --> 00:06:41.300
And that's where an escape hatch is okay.

00:06:41.300 --> 00:06:46.300
But also I'm totally a UV fanboy and I'm not worried right now.

00:06:46.300 --> 00:06:49.300
Yeah, I think it's fair about the selling.

00:06:49.300 --> 00:06:51.300
And I also think Charlie's a good guy.

00:06:51.300 --> 00:06:56.300
I think it's fair about the selling, but that could also be, I'm not doing this open source project anymore.

00:06:56.300 --> 00:07:01.300
I'm giving it to someone else, although the incentives are much stronger when there's money involved for sure.

00:07:01.300 --> 00:07:17.300
And I think from Armin's perspective, his article, which I think I covered a while ago called "RYE and UV August is Harvest Season for Python and Packaging" is an excellent take and much more thorough than just a mastodon thread.

00:07:17.300 --> 00:07:23.300
All right. Anyway, I thought that would be, I'm glad Simon wrote that up and I thought it was worth highlighting.

00:07:23.300 --> 00:07:27.300
All right. Well, let's hop over to something a little smaller.

00:07:27.300 --> 00:07:30.300
Maybe not smaller, but anyway.

00:07:30.300 --> 00:07:37.300
Erdantic, I just wanted to, I can't remember where I saw this, but anyway, it's a fairly new thing.

00:07:37.300 --> 00:07:42.300
It looks like it's been out a few years, but it's active development right now.

00:07:42.300 --> 00:07:51.300
What is it? Erdantic is entity relationship diagrams that are based on Pydantic models.

00:07:51.300 --> 00:07:58.300
It's a simple tool for drawing entity relationship diagrams for data model classes.

00:07:58.300 --> 00:08:04.300
It supports modeling frameworks such as pedantic adders and data classes.

00:08:04.300 --> 00:08:19.300
This is one of those things of maybe sort of inside baseball, but basically if you're dealing with data structures, especially if they're mapping around your system and mapping around your databases and whatnot.

00:08:19.300 --> 00:08:33.300
And database tools often have these diagram things that you can look at, but the stuff going into your application, the data sets that are being used in your application, you might not have these tools around.

00:08:33.300 --> 00:08:40.300
So this is kind of neat. And it allows you to basically draw these relationship diagrams for your data in your system.

00:08:40.300 --> 00:08:42.300
It's pretty straightforward.

00:08:42.300 --> 00:08:48.300
I like these. You know, one thing that's really cool about these pictures, Brian, when you're working on a project, it's one you've created, you've been working a long time.

00:08:48.300 --> 00:08:55.300
You have probably a really strong mental model of what are the conceptual pieces and how they fit together and what the data looks like.

00:08:55.300 --> 00:09:02.300
But if somebody is new to a team or new to an open source project, or they get dropped in as a consultant, you're like, what?

00:09:02.300 --> 00:09:05.300
What do we got going on here? You know, what is all of this?

00:09:05.300 --> 00:09:11.300
Tools like Erdantic let you just go, bam, show me a visual representation of this.

00:09:11.300 --> 00:09:14.300
And I think that's a huge jumpstart if you need help there.

00:09:14.300 --> 00:09:27.300
Yeah, so you can do it after the fact, like if you're jumping into a system, you can use it to draw the diagrams or if these are part of your documentation or even internal documentation to help somebody come up to speed.

00:09:27.300 --> 00:09:35.300
But you also might like for yourself, throw these in the docs so that like, you know, six months from now you come back and you're like, well, how is this?

00:09:35.300 --> 00:09:39.300
Or even documentation, like in just read the doc style, right?

00:09:39.300 --> 00:09:48.300
Yeah, and also to make sure things don't go haywire. So often you have a mental model that your system makes sense.

00:09:48.300 --> 00:09:54.300
But then when you draw it out, you find all sorts of like, it's like a crazy tree in a forest.

00:09:54.300 --> 00:09:58.300
You're like, oh, man, I didn't think it was that complicated. I need to simplify things.

00:09:58.300 --> 00:10:01.300
So visual tools are great for that.

00:10:01.300 --> 00:10:15.300
The one, I guess one beef with it is that it's based on GraphViz, which is very widely available, but it's probably easiest on Linux and Mac, but you can do it on Windows, too.

00:10:15.300 --> 00:10:19.300
But it might be a little bit more difficult to get GraphViz going on Windows.

00:10:19.300 --> 00:10:23.300
Maybe, maybe not, but I've had issues in the past trying to get running.

00:10:23.300 --> 00:10:26.300
But anyway, that's it. Just a little graphing tool.

00:10:26.300 --> 00:10:27.300
I love it.

00:10:27.300 --> 00:10:37.300
Well, let's switch back to what I got to cover because I have a bunch of things and I'm making this an extra, extra, extra main section because otherwise this will be an hour and a half long show.

00:10:37.300 --> 00:10:41.300
We don't want that. It's not bytes. It would be more than a byte.

00:10:41.300 --> 00:10:43.300
So I want to talk about a couple of things.

00:10:43.300 --> 00:10:51.300
First of all, this is news to you. You're learning about this unless you've been spying on the website, which I find unlikely because you're familiar with it already.

00:10:51.300 --> 00:11:00.300
But if you just Friday, I was messing around with some custom search engine in my browser and I think I had to search for something on Python bytes.

00:11:00.300 --> 00:11:10.300
I'm like, wouldn't it be cool if we could just integrate Python bytes search right into your browser and our search URL you were able to it was a get style search.

00:11:10.300 --> 00:11:14.300
You could do a get style search on it so you could actually plug it in as a custom extension.

00:11:14.300 --> 00:11:29.300
I went farther so that if you're over on Python bytes.fm and you pull up the source, there is now an open search description specification in this bad boy here that don't really want that.

00:11:29.300 --> 00:11:33.300
But that actually describes how search works.

00:11:33.300 --> 00:11:52.300
So if you go over here and you type pb space, see how it says search Python bytes. Oh, wow. But watch this UV space, do see e Docker UVX all these things in that cool has auto complete and everything off of our actual transcripts and our show notes and all of that.

00:11:52.300 --> 00:11:58.300
So so then you just go over here and hit Docker UV boom. And then, you know, there's the shows that we talked about those various things.

00:11:58.300 --> 00:12:05.300
So anyway, if you go to Python bytes and you click little search icon, it says right below, add our search engine directly to your browser.

00:12:05.300 --> 00:12:13.300
Learn how here. And so you click it. It actually shows you the couple of steps. It's super easy. I did a similar thing for talk Python as well.

00:12:13.300 --> 00:12:18.300
Once you do one, you go, I see how I do for the other. They weren't identical, but they were similar. What do you think?

00:12:18.300 --> 00:12:25.300
I think I'm going to be using this all the time. We've covered a lot of topics. And occasionally I'm like, when did we talk about that thing?

00:12:25.300 --> 00:12:32.300
Mm hmm. Mm hmm. I like it. Yeah, yeah. Me too, as well. So I think that's that is pretty excellent. So yeah, I'm really excited about it.

00:12:32.300 --> 00:12:39.300
All right. Next of the extra extra extras is I wrote we talked about passkeys, I think a little while ago.

00:12:39.300 --> 00:12:48.300
So I actually wrote up a little article on passkeys, password managers, whether you should use them. And then there was some debate with people.

00:12:48.300 --> 00:12:56.300
I said, hey, I put out a post about this and someone replied and said, people do not use password managers to store passkeys.

00:12:56.300 --> 00:13:03.300
I'm like, do they or do they not? I have no idea who are using it. So I put out some Twitter and Mastodon polls on which one is this?

00:13:03.300 --> 00:13:10.300
This is Twitter. 44% of the people are using password managers for their passkeys and 20% are just letting their OS go.

00:13:10.300 --> 00:13:15.300
Do you want to save a passkey? Say yes. And 30%, 35% not. That's really high adoption, actually.

00:13:15.300 --> 00:13:22.300
And on Mastodon, I think four or five times as many people are using password managers and half of them are not.

00:13:22.300 --> 00:13:27.300
So pretty interesting, right? Yeah. Anyway, people can check out this article. A little bit of follow up there.

00:13:27.300 --> 00:13:33.300
What's next? I think you should have added one extra like survey thing of what's a passkey.

00:13:33.300 --> 00:13:39.300
That's true. People did say, hey, I'm storing them in hardware, things like Yubikeys.

00:13:39.300 --> 00:13:48.300
Yeah, I didn't quite have that. I think that fell under the password manager thing. Related to that, I was worried about lock-in.

00:13:48.300 --> 00:13:55.300
You're like, passkeys are cool, except for this is the way for Apple and Microsoft and Google to say, just stay more in our platform.

00:13:55.300 --> 00:13:59.300
Please don't leave us. We want to make it nicer for you by helping you stay here.

00:13:59.300 --> 00:14:09.300
So Pablo sent over this recommendation of VaultWarden, which is an unofficial Bitwarden compatible server written in Rust, formerly known as Bitwarden RS,

00:14:09.300 --> 00:14:15.300
that you can basically self-host your own Bitwarden sync and servers.

00:14:15.300 --> 00:14:20.300
And so when you run Bitwarden, you can tell it, here's my server, not the commercial one, the SaaS one.

00:14:20.300 --> 00:14:27.300
All right. You notice anything weird about my display? I mean, people don't really need to see the display here or anything.

00:14:27.300 --> 00:14:30.300
But look at this, Brian. See the bottom where my tabs are?

00:14:30.300 --> 00:14:39.300
I'm trying to live the tabs on bottom lifestyle. I've been watching a lot of people use Arc and then there's Zen Browser, which is a Firefox type thing.

00:14:39.300 --> 00:14:46.300
But I still think Vivaldi, especially after the search stuff that we were doing, I still think Vivaldi is the best browser, hands down.

00:14:46.300 --> 00:14:52.300
For example, Firefox, you can't do this cool search thing I told you about. They give you a list of six search engines.

00:14:52.300 --> 00:14:58.300
I hope you like one of them. Good with that. You don't get a pick anymore. You don't get to add anymore. Same with Zen Browser.

00:14:58.300 --> 00:15:03.300
Chrome will let you add it, but it won't do the autocomplete. It will just do the search.

00:15:03.300 --> 00:15:09.300
Safari auto discovers it through the open search thing, but I don't know how to actually search it.

00:15:09.300 --> 00:15:13.300
I don't know that it uses it may or may not use the search things. I can't make it work.

00:15:13.300 --> 00:15:18.300
But Vivaldi has it like, here's the auto suggest. Here's the search. Here's all the things.

00:15:18.300 --> 00:15:25.300
Anyway, a lot of those newer, shinier browsers are all about like put your tabs in kind of this hidden mode or whatever.

00:15:25.300 --> 00:15:31.300
So I'm trying to go for like a little less distraction. It is surprisingly hard to put the tabs on the bottom from a mental model perspective.

00:15:31.300 --> 00:15:35.300
But give it a week and you'll be good with it. Probably. We'll see how long I last.

00:15:35.300 --> 00:15:38.300
It's never bothered me that they were at the top.

00:15:38.300 --> 00:15:42.300
Well, so here's the thing. It doesn't bother me either. It didn't bother me either.

00:15:42.300 --> 00:15:48.300
But if you look at it the way it is when the tabs are not at the top, you're just focused on the thing that is up.

00:15:48.300 --> 00:15:52.300
You don't mentally realize, oh, there's all these other things up there.

00:15:52.300 --> 00:15:56.300
It takes actual conscious thought to go look at the bottom and see what else is open.

00:15:56.300 --> 00:15:58.300
Almost to the point of it being a flaw.

00:15:58.300 --> 00:16:03.300
But it's kind of just like, this is the thing you should be focusing on now. Don't worry about the other stuff.

00:16:03.300 --> 00:16:05.300
Anyway, that's the thinking for me anyway.

00:16:05.300 --> 00:16:10.300
All right. And PyCon 2025. I don't know if we've covered this.

00:16:10.300 --> 00:16:14.300
I know that we talked about where the new upcoming PyCons are going to be.

00:16:14.300 --> 00:16:19.300
Right. The 2026 one is I think Long Beach. Right. This one is back in Pittsburgh.

00:16:19.300 --> 00:16:25.300
However, the dates are listed on Python.org. Have we mentioned this before? I don't think so. Right.

00:16:25.300 --> 00:16:29.300
I don't remember. We should. Well, we should totally search for it. Yes.

00:16:29.300 --> 00:16:36.300
If we only could. So May 14 to May 22, 2025 is PyCon 2025.

00:16:36.300 --> 00:16:40.300
So the US PyCon. That's pretty awesome. People can check that out. Right.

00:16:40.300 --> 00:16:44.300
Yeah. Because, you know, my brother's like, hey, I want to come visit you.

00:16:44.300 --> 00:16:47.300
I'm thinking of coming in May or maybe April. Is that all right?

00:16:47.300 --> 00:16:55.300
I'm like, I don't know. There's not many things that I got to do that are going to make me not be able to be around.

00:16:55.300 --> 00:16:58.300
But PyCon might be one of them. It would be nice to know what it is. Well, here's what it is.

00:16:58.300 --> 00:17:03.300
It's in May. I may go. I don't know. Yep. All right. Well, that's all the extras that I got.

00:17:03.300 --> 00:17:08.300
OK, well, I've got a bunch of them. I liked all your extras.

00:17:08.300 --> 00:17:12.300
I'm going to do a whole bunch of extras also, but Django related. So this is a Django themed extras.

00:17:12.300 --> 00:17:17.300
So we've got from the PyCharm blog Django project ideas.

00:17:17.300 --> 00:17:22.300
And I actually kind of love this because I'm working on some Django projects myself.

00:17:22.300 --> 00:17:28.300
And sometimes you just want to play play around with Django or any other way for your work to figure out.

00:17:28.300 --> 00:17:35.300
Like I want to try to learn, like do a project, but there's to do list and then there's like, what else could you do?

00:17:35.300 --> 00:17:43.300
And that's where I love this jump off. So there's there's some some tutorials that are well known.

00:17:43.300 --> 00:17:48.300
The Django normal Django tutorial for beginners. Useful.

00:17:48.300 --> 00:17:57.300
PyCharm has a air temperature or JetBrains and PyCharm has an air temperature app tutorial with a step by step tutorial you can walk through.

00:17:57.300 --> 00:18:02.300
But after you've gone through the tutorials, what do you like? You know, what should you do?

00:18:02.300 --> 00:18:06.300
So there's a there's some some great ideas and I like how it's listed.

00:18:06.300 --> 00:18:09.300
So, like, for instance, you could do a blog and what would you learn there?

00:18:09.300 --> 00:18:20.300
Well, you could learn you'd learn about the Django admin Django templates and then doing an editor, because if it's a blog, you're probably going to do an in in in application editor.

00:18:20.300 --> 00:18:30.300
So maybe you could try that. So this is all set up with what tech stack you would run into or the different pieces of Django or extra plugins you would learn.

00:18:30.300 --> 00:18:33.300
And then and then a little blurb about it.

00:18:33.300 --> 00:18:41.300
They also about the blog, they recommended the Django to tutorials Django girls tutorial because it talks about a blog, which is great.

00:18:41.300 --> 00:18:47.300
There's the to do app that you would learn a single page applications and Django templates.

00:18:47.300 --> 00:18:50.300
A recipe organizer. I love this idea. Don't know.

00:18:50.300 --> 00:18:57.300
I didn't think of that. But you'd learn about databases and the ORM and templates and JavaScript is optional for additional security.

00:18:57.300 --> 00:19:04.300
I don't know how that works out, but just a whole bunch of cool ideas around maybe a URL shortener expense tracker.

00:19:04.300 --> 00:19:09.300
That's kind of a neat idea. A social network and then personal portfolio.

00:19:09.300 --> 00:19:19.300
That's pretty neat. And then a lot of these. One of the things I like about these is these are things that would be useful to you, even if nobody else uses it.

00:19:19.300 --> 00:19:25.300
So it's just even if you just put this up for your own use, it help you learn Django and you get some useful tool.

00:19:25.300 --> 00:19:35.300
And then there's some advanced projects, which I like the idea of multi multi user sites, classified site or something, maybe for your neighborhood or for even work, a classified site for your own job.

00:19:35.300 --> 00:19:40.300
Like where you work and be kind of neat. People could sell their stuff to friends and colleagues.

00:19:40.300 --> 00:19:44.300
Anyway, I love this idea, but I've got a lot of examples there.

00:19:44.300 --> 00:19:48.300
Yeah, yeah. It's pretty. It's a pretty fun list.

00:19:48.300 --> 00:19:53.300
So so that's why my first extra on Django, these Django project ideas from JetBrains.

00:19:53.300 --> 00:19:57.300
Really good list. Looks like fun. This came from Jeff Triplett.

00:19:57.300 --> 00:20:03.300
He just put this together recently, I think, or at least posted it recently. Django TV dot com.

00:20:03.300 --> 00:20:10.300
It is a list of talks and tutorials from Django conferences around the world.

00:20:10.300 --> 00:20:12.300
It's kind of a neat, neat resource.

00:20:12.300 --> 00:20:14.300
I love that idea. That's super cool.

00:20:14.300 --> 00:20:17.300
Yeah, it's it's kind of new, but I'm sure it'll grow.

00:20:17.300 --> 00:20:22.300
So a bunch of a bunch of great stuff will show up. Django Commons, also a new thing.

00:20:22.300 --> 00:20:33.300
Learned about this from Lacey Henschel and Django Commons is an organization dedicated to supporting the community's efforts to maintain packages.

00:20:33.300 --> 00:20:36.300
So that are Django related packages.

00:20:36.300 --> 00:20:42.300
So there's there's some great information about how to join this this group, how to transfer a project into the group,

00:20:42.300 --> 00:20:47.300
how to transfer a project out of the group and some code of conduct and FAQ.

00:20:47.300 --> 00:20:53.300
Again, this is just sort of getting started, but it's cool idea. Django Commons.

00:20:53.300 --> 00:20:56.300
Couple more things around Django. I did see.

00:20:56.300 --> 00:21:01.300
So in Django five, we did get some simplified templates for form field rendering.

00:21:01.300 --> 00:21:06.300
But if that's not enough for you, you might want to try IOMI forms.

00:21:06.300 --> 00:21:10.300
So IOMI forms are a different take on Django forms.

00:21:10.300 --> 00:21:15.300
And they wrote a post why we wrote a new form library for Django.

00:21:15.300 --> 00:21:23.300
So just a little different take if you've struggled with Django forms, maybe try Django five, but also maybe try this.

00:21:23.300 --> 00:21:30.300
IOMI forms might be a good thing. And the last Django extra I have got, this comes from Adam Johnson.

00:21:30.300 --> 00:21:38.300
He introduced a template formatter called Jade, D-J-A-D-E.

00:21:38.300 --> 00:21:41.300
But we'll have a link to this article in the show notes, of course.

00:21:41.300 --> 00:21:51.300
So what this is, is you've got all these, you were used to black using black as formatters or probably UV now or rough.

00:21:51.300 --> 00:21:56.300
But what about like for forms, the template forms?

00:21:56.300 --> 00:22:04.300
So that's what this, that's where this comes in. Jade is a, a something like black, but for, for forms.

00:22:04.300 --> 00:22:11.300
So there's some examples of like, for instance, the old form Django two of load static files.

00:22:11.300 --> 00:22:16.300
You're supposed to just say load static now. So having it automatically just change that for you is good.

00:22:16.300 --> 00:22:19.300
So, yeah, yeah. Not just format it, but fix it.

00:22:19.300 --> 00:22:25.300
Yeah. Things like making, like if you have weird space, weird spacing things just to make it easier to read.

00:22:25.300 --> 00:22:30.300
I like it. So, yeah, that's awesome. I love it. Those are my, I like that idea a lot.

00:22:30.300 --> 00:22:35.300
Let's get some for the other formatters as well, or the other templates as well, rather.

00:22:35.300 --> 00:22:36.300
That's a good idea.

00:22:36.300 --> 00:22:39.300
Right. Jinja or whatever. Maybe it exists. People should let us know if it exists.

00:22:39.300 --> 00:22:40.300
Yeah. All right.

00:22:40.300 --> 00:22:42.300
All right. How about some jokes?

00:22:42.300 --> 00:22:49.300
Jokes would be great. Oh, wait, I have one more extra. If we're already to jokes.

00:22:49.300 --> 00:22:54.300
The one extra I got this, this came in from, who sent this in?

00:22:54.300 --> 00:23:02.300
So we've got, I want to give credit where credit is due. So this came from Raphael Weingartner,

00:23:02.300 --> 00:23:06.300
and he suggested we take a look at this. And I thought it was a serious thing at first.

00:23:06.300 --> 00:23:10.300
The open source project maintainer's guide. Have you looked at this yet?

00:23:10.300 --> 00:23:12.300
No, I've not.

00:23:12.300 --> 00:23:13.300
Okay.

00:23:13.300 --> 00:23:16.300
Is it kind of like your blog? Monetization?

00:23:16.300 --> 00:23:25.300
It's just, it's like how to have an open source project and have people not help you maintain.

00:23:25.300 --> 00:23:26.300
Got it.

00:23:26.300 --> 00:23:35.300
So first off, use a source control mechanism other than Git. So try, maybe try Subversion or Mercurial or Bazaar.

00:23:35.300 --> 00:23:42.300
Or even just like SQLite or do it. What is SQLite doing? Where are they? Bust on them. I don't know.

00:23:42.300 --> 00:23:49.300
Anyway, so use something other than Git. Only accept patches on a mailing list.

00:23:49.300 --> 00:23:51.300
Isn't Linux core like that?

00:23:51.300 --> 00:23:53.300
Or like Usenet or something.

00:23:53.300 --> 00:23:59.300
Require a contributor license agreement. Like, that's funny. You have to sign something.

00:23:59.300 --> 00:24:08.300
Don't have community forums or leadership. So no, no discourse Zulip and definitely not Slack or Discord.

00:24:08.300 --> 00:24:13.300
Ignore detailed reports. Systematically close reports. Prioritize features over bugs.

00:24:13.300 --> 00:24:19.300
There's a lot of projects like that, I think. Wait for the big rewrite. Merge half-baked patch sets.

00:24:19.300 --> 00:24:24.300
Bike shed all user visible changes. This is my favorite. Only use outdated language standards.

00:24:24.300 --> 00:24:31.300
So like, for instance, current language standard for C++ is C++ 23. 17 is widely supported.

00:24:31.300 --> 00:24:41.300
So why not use 03? I would say like, why not just stick with C++ 98? It was fine in my day. It's fine now.

00:24:41.300 --> 00:24:44.300
It's good enough for your grandparents. It's good enough for you.

00:24:44.300 --> 00:24:52.300
Yeah. Anyway, these are some amusing lists of things to do for an open source project if you don't want people to help.

00:24:52.300 --> 00:24:53.300
Yeah, that's pretty funny.

00:24:53.300 --> 00:24:54.300
Okay.

00:24:54.300 --> 00:24:57.300
If you do want people to help, though, you might have a joke like this.

00:24:57.300 --> 00:25:01.300
A machine learning algorithm walks into a bar. The bartender asks, "What do you have?"

00:25:01.300 --> 00:25:03.300
The algorithm says, "What's everyone else having?"

00:25:03.300 --> 00:25:06.300
It's because it's trading on everyone's data. It's all it knows.

00:25:06.300 --> 00:25:10.300
Oh, that's funny. It took me a while.

00:25:10.300 --> 00:25:14.300
It's not lose-your-mind funny, but it's amusing.

00:25:14.300 --> 00:25:15.300
Yeah.

00:25:15.300 --> 00:25:16.300
So thank you, Ted Haas.

00:25:16.300 --> 00:25:17.300
I like it.

00:25:17.300 --> 00:25:18.300
Indeed.

00:25:18.300 --> 00:25:23.300
Well, another episode of Python Bytes in the Bag. Thanks for joining.

00:25:23.300 --> 00:25:24.300
Thanks, Brian.

00:25:24.300 --> 00:25:25.300
Thank you.

00:25:25.300 --> 00:25:26.300
Bye all.

