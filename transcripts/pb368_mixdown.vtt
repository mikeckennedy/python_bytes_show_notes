WEBVTT

00:00:00.000 --> 00:00:04.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines

00:00:04.000 --> 00:00:13.500
directly to your earbuds. This is episode 368, recorded January 23rd, 2024.

00:00:13.500 --> 00:00:14.500
I'm Michael Kennedy.

00:00:14.500 --> 00:00:16.000
And I'm Brian Okken.

00:00:16.000 --> 00:00:21.000
This episode is sponsored by us. Support us by checking out our work.

00:00:21.000 --> 00:00:25.000
We do lots of things. We have many, many courses over at Talk Python Training.

00:00:25.000 --> 00:00:28.500
We have the complete pytest course. We have Patreon supporters.

00:00:28.500 --> 00:00:34.000
You can become one in the show page, the episode page, and connect with all of us,

00:00:34.000 --> 00:00:38.000
all three of us, Brian, me, and the show over on faucet.org.

00:00:38.000 --> 00:00:42.500
And if you want to be part of the live episode, it's pythonbytes.fm/live.

00:00:42.500 --> 00:00:47.500
Usually, Tuesdays at 10 a.m., we've changed it. We have a new time, Brian.

00:00:47.500 --> 00:00:48.500
New time, yes.

00:00:48.500 --> 00:00:53.000
New time. So that's the plan for now until... it's not the plan.

00:00:53.000 --> 00:00:55.000
But we love it when people show up for the show.

00:00:55.000 --> 00:00:59.000
And now let's dive right in. Go for it, Brian. What you got?

00:00:59.000 --> 00:01:05.500
Well, I wanted to talk about debugging a little bit because we've got a blog post.

00:01:05.500 --> 00:01:12.500
Actually, it's a blog post and really a newsletter episode from Unis.

00:01:12.500 --> 00:01:15.500
It's from a site called Syntax Error.

00:01:15.500 --> 00:01:21.000
And it looks like it's a collection of... it's a newsletter about debugging,

00:01:21.000 --> 00:01:25.500
which is kind of nice, and somehow I missed it in the past year.

00:01:25.500 --> 00:01:29.000
It started, it looks like, February of 2023.

00:01:29.000 --> 00:01:33.000
But we're on episode 11 or issue 11, and it's kind of a summary.

00:01:33.000 --> 00:01:35.500
So it's pretty neat. It's talking about debugging in Python.

00:01:35.500 --> 00:01:40.000
I really love just the concept of this, of the newsletter,

00:01:40.000 --> 00:01:43.500
but also just it's really good content in a small thing.

00:01:43.500 --> 00:01:45.500
So what is he talking about?

00:01:45.500 --> 00:01:49.500
So if you're debugging some code, the first thing you got to do is

00:01:49.500 --> 00:01:53.500
you got to get in the right mindset, and then you can use some tools.

00:01:53.500 --> 00:01:56.000
So I'm glad that he starts that with the mindset.

00:01:56.000 --> 00:02:02.000
He's talking about mindset, take a break, stop, breathe, and then come back to it.

00:02:02.000 --> 00:02:06.000
And this breaking away from you're frustrated with your code

00:02:06.000 --> 00:02:08.500
to clearing your head is really important.

00:02:08.500 --> 00:02:11.500
Don't skip that. I think it's essential.

00:02:11.500 --> 00:02:14.000
Go grab a cup of coffee or something.

00:02:14.000 --> 00:02:16.500
And then using a step-by-step process.

00:02:16.500 --> 00:02:21.000
Don't just, I mean, it's hard to say not to just jump to the thing

00:02:21.000 --> 00:02:23.000
that you think might be broken and try to fix it.

00:02:23.000 --> 00:02:26.500
Okay, after you did that and it didn't work, then come back to this

00:02:26.500 --> 00:02:29.500
and then do a step-by-step methodical process.

00:02:29.500 --> 00:02:32.500
And I think it's very helpful.

00:02:32.500 --> 00:02:38.000
There's a little comic here, which is great, of Gru from, oh,

00:02:38.000 --> 00:02:40.000
I forget the name of the movie.

00:02:40.000 --> 00:02:45.000
But he says, "Need to debug an issue, set a breakpoint to get started.

00:02:45.000 --> 00:02:48.000
The breakpoint never hits. The breakpoint never hits."

00:02:48.000 --> 00:02:49.000
It's pretty funny.

00:02:49.000 --> 00:02:52.500
Anyway, so being methodical about it will help.

00:02:52.500 --> 00:02:58.000
And then I'm glad he brought this up, talking about rubber ducking

00:02:58.000 --> 00:02:59.000
or talking to ducks.

00:02:59.000 --> 00:03:04.000
And this is an age-old, and I don't know if it ever actually happened

00:03:04.000 --> 00:03:07.000
in my computer science classes.

00:03:07.000 --> 00:03:12.000
In our lab, we had a stuffed monkey that if you asked the TAs

00:03:12.000 --> 00:03:17.000
or the grad students that were hanging out in the lab for help,

00:03:17.000 --> 00:03:21.000
they would say, "Ask the monkey first."

00:03:21.000 --> 00:03:25.000
And so this is just essentially getting a description of the bug,

00:03:25.000 --> 00:03:28.000
the situation, the background information in your mind

00:03:28.000 --> 00:03:31.000
in a way that you can say it out loud will sometimes

00:03:31.000 --> 00:03:33.000
completely solve your problem.

00:03:33.000 --> 00:03:36.000
It's an incredible tool.

00:03:36.000 --> 00:03:40.000
And one of the things that was interesting is he talks about

00:03:40.000 --> 00:03:44.000
brain dump as an alternative solution is writing on paper.

00:03:44.000 --> 00:03:47.000
If you're not the kind of person that verbalizing helps,

00:03:47.000 --> 00:03:48.000
writing it on paper might help.

00:03:48.000 --> 00:03:53.000
Okay, now let's get into the tools, the tools that help with debugging.

00:03:53.000 --> 00:03:56.000
And I used to feel guilty about this all the time,

00:03:56.000 --> 00:04:02.000
but I reached for print all the time, or some sort of module.

00:04:02.000 --> 00:04:04.000
They said, "Don't do print. Come on."

00:04:04.000 --> 00:04:08.000
So his technique is to start with print because it's low friction.

00:04:08.000 --> 00:04:10.000
Everybody knows how to do it.

00:04:10.000 --> 00:04:14.000
Plus we have F-strings now, and with the equal sign,

00:04:14.000 --> 00:04:17.000
if you do curly braces and then the variable name with an equal,

00:04:17.000 --> 00:04:20.000
it just says it's great.

00:04:20.000 --> 00:04:24.000
So anyway, it's really easy to debug print, which is good,

00:04:24.000 --> 00:04:27.000
and it's low friction. It's easy to add.

00:04:27.000 --> 00:04:31.000
Snoop is an interesting, cool toolkit that he talks about

00:04:31.000 --> 00:04:36.000
for helping to see what's going on within your code at each step.

00:04:36.000 --> 00:04:38.000
It's a pretty cool tool as well.

00:04:38.000 --> 00:04:40.000
Let's just quickly go through some of the other tools.

00:04:40.000 --> 00:04:43.000
Those are the two printing, logging sort of things.

00:04:43.000 --> 00:04:48.000
There's also Ice Cream that he mentions, and there's debuggers.

00:04:48.000 --> 00:04:51.000
So talking about debuggers, this is not--

00:04:51.000 --> 00:04:54.000
interestingly, he doesn't mention IDEs,

00:04:54.000 --> 00:05:00.000
which that's what I usually reach for is either a PyCharm or VS Code debugger.

00:05:00.000 --> 00:05:03.000
But sometimes you don't have access to those

00:05:03.000 --> 00:05:06.000
if you're SSH'd into something or whatever.

00:05:06.000 --> 00:05:09.000
So invoking--being able to use PDB,

00:05:09.000 --> 00:05:12.000
I think he talks about PDB, which is the Python debugger.

00:05:12.000 --> 00:05:15.000
I learned how to--actually learned how to do this

00:05:15.000 --> 00:05:20.000
mostly just to talk about using PDB with pytest for the book,

00:05:20.000 --> 00:05:25.000
and now I use it once in a while because sometimes it's even more convenient,

00:05:25.000 --> 00:05:28.000
especially when using PDB with talks. It's great.

00:05:28.000 --> 00:05:32.000
So PDB, IPDB, which is an interactive REPL sort of thing.

00:05:32.000 --> 00:05:37.000
PUDB, which is kind of like--it's got panels and stuff.

00:05:37.000 --> 00:05:39.000
It's a nice terminal UI.

00:05:39.000 --> 00:05:43.000
WebPDB, which is the same thing within a browser. It's kind of nice.

00:05:43.000 --> 00:05:45.000
Birdseye is something I hadn't seen before,

00:05:45.000 --> 00:05:48.000
which is kind of cool talking about Birdseye.

00:05:48.000 --> 00:05:54.000
It has these kind of neat diagrams with boxes around stuff as things change.

00:05:54.000 --> 00:05:57.000
It's an interesting interface.

00:05:57.000 --> 00:05:59.000
>> It's pretty, yeah.

00:05:59.000 --> 00:06:04.000
I don't know if it's for me, but if it resonates with you, that's great.

00:06:04.000 --> 00:06:08.000
It might be worth trying on a project. Kind of neat.

00:06:08.000 --> 00:06:11.000
Anyway, and then a quick shout-out to some Django tools.

00:06:11.000 --> 00:06:17.000
So if you're debugging Django, there's the Django debug toolbar

00:06:17.000 --> 00:06:21.000
and an extension for VS Code called Colo.

00:06:21.000 --> 00:06:26.000
So anyway, some great advice about debugging specifically Python,

00:06:26.000 --> 00:06:30.000
but really a lot of this advice applies to everything.

00:06:30.000 --> 00:06:33.000
So nice. And kind of nice that there's a newsletter around that.

00:06:33.000 --> 00:06:35.000
>> Yeah, it is a nice newsletter.

00:06:35.000 --> 00:06:39.000
There's something kind of good about the permanency of written stuff.

00:06:39.000 --> 00:06:42.000
What we do is great, and I think it connects with a lot of people,

00:06:42.000 --> 00:06:46.000
but it's harder to go back to it and search it.

00:06:46.000 --> 00:06:48.000
>> Yeah, and I kind of like the idea of--

00:06:48.000 --> 00:06:54.000
I know that a lot of newsletter software, like Substack and things like that,

00:06:54.000 --> 00:06:57.000
can keep it around for you in Medium,

00:06:57.000 --> 00:06:59.000
but I like the idea of somebody doing a newsletter

00:06:59.000 --> 00:07:03.000
and putting the newsletter things on blog posts at the same time

00:07:03.000 --> 00:07:05.000
for people to reach out to.

00:07:05.000 --> 00:07:08.000
>> Neat. I might have more to say about that later.

00:07:08.000 --> 00:07:13.000
But I also have something to say about what you just pointed out,

00:07:13.000 --> 00:07:17.000
what you just talked about, and I have just done a new project.

00:07:17.000 --> 00:07:19.000
I have some things that I've been working on.

00:07:19.000 --> 00:07:21.000
I already talked about the leave in the cloud

00:07:21.000 --> 00:07:23.000
and the interview with Mark Prusinovich

00:07:23.000 --> 00:07:27.000
that inspired me to kind of rethink how our infrastructure goes,

00:07:27.000 --> 00:07:29.000
and it is just paying so many dividends.

00:07:29.000 --> 00:07:32.000
I'm going to talk about it in some interesting ways.

00:07:32.000 --> 00:07:35.000
As part of that, I've had to write a little bit of new software,

00:07:35.000 --> 00:07:37.000
and I'm like, "I need some logging."

00:07:37.000 --> 00:07:39.000
I'm going to try Loguru.

00:07:39.000 --> 00:07:42.000
Loguru? I don't know. The G is combined.

00:07:42.000 --> 00:07:44.000
Wow, is this a nice piece of logging software.

00:07:44.000 --> 00:07:47.000
So what I would suggest, Brian, if you're feeling the print coming on,

00:07:47.000 --> 00:07:49.000
if you're like, "I'm going to print this.

00:07:49.000 --> 00:07:52.000
I'm going to print my way to this bug solving this problem,"

00:07:52.000 --> 00:07:55.000
you should consider Loguru-ing your way.

00:07:55.000 --> 00:07:57.000
You just create the Loguru thing,

00:07:57.000 --> 00:08:00.000
and you can say use color and all of that,

00:08:00.000 --> 00:08:04.000
and it will also do print statements just to sys out, right?

00:08:04.000 --> 00:08:07.000
But you can see right here on their homepage,

00:08:07.000 --> 00:08:10.000
it says how to do color and stuff like that.

00:08:10.000 --> 00:08:14.000
And then if you just logger.info or whatever,

00:08:14.000 --> 00:08:17.000
it'll print it out, but way more structured and with color,

00:08:17.000 --> 00:08:20.000
and then if there's an exception, you're going to say print E,

00:08:20.000 --> 00:08:23.000
the exception, you could just say logger.exception,

00:08:23.000 --> 00:08:26.000
and it will create the trace back

00:08:26.000 --> 00:08:29.000
showing the local variables at every step.

00:08:29.000 --> 00:08:31.000
So instead of having to jump into the debugger,

00:08:31.000 --> 00:08:32.000
you can just print your way to like,

00:08:32.000 --> 00:08:34.000
"Oh, here's the entire call stack and all the values."

00:08:34.000 --> 00:08:35.000
That's pretty cool.

00:08:35.000 --> 00:08:37.000
I super, super recommend it.

00:08:37.000 --> 00:08:40.000
I've been using Logbook. I'm a Loguru fan.

00:08:40.000 --> 00:08:43.000
I'm resisting the urge to go and rewrite all my logging

00:08:43.000 --> 00:08:46.000
for all of my things to Loguru because it's not that productive,

00:08:46.000 --> 00:08:49.000
but boy, did my logging look cool.

00:08:49.000 --> 00:08:51.000
All right, that's not what I want to talk about,

00:08:51.000 --> 00:08:54.000
but I want to talk about things that were kind of inspired by that.

00:08:54.000 --> 00:08:56.000
So first I want to talk about Umami,

00:08:56.000 --> 00:09:00.000
and this has a Python loopback really, really quickly here,

00:09:00.000 --> 00:09:03.000
but let's start from the outside in, okay?

00:09:03.000 --> 00:09:04.000
- Okay.

00:09:04.000 --> 00:09:08.000
- So Brian, I set up Umami at umami.is,

00:09:08.000 --> 00:09:12.000
which is like Google Analytics, but not evil.

00:09:12.000 --> 00:09:13.000
That's awesome, right?

00:09:13.000 --> 00:09:16.000
So the idea is it's privacy preserving.

00:09:16.000 --> 00:09:20.000
It is GDPR and CCPA compliant.

00:09:20.000 --> 00:09:24.000
It's open source, and you can buy it as a service, right?

00:09:24.000 --> 00:09:28.000
I can go over here and say pricing for nine bucks.

00:09:28.000 --> 00:09:31.000
Some period I will get some number of websites

00:09:31.000 --> 00:09:33.000
and it'll give me, you know, analytics,

00:09:33.000 --> 00:09:36.000
like Google Analytics for my site, right?

00:09:36.000 --> 00:09:37.000
That's pretty cool.

00:09:37.000 --> 00:09:38.000
- Yeah.

00:09:38.000 --> 00:09:40.000
- But what's better, the problem with that is

00:09:40.000 --> 00:09:42.000
it's still third-party JavaScript,

00:09:42.000 --> 00:09:44.000
even if it's, they don't use cookies,

00:09:44.000 --> 00:09:46.000
but it's still third-party JavaScript,

00:09:46.000 --> 00:09:49.000
and by way of that, it gets blocked a lot,

00:09:49.000 --> 00:09:52.000
especially by the developer crowd, right?

00:09:52.000 --> 00:09:54.000
And I'm not, that's not a criticism.

00:09:54.000 --> 00:09:56.000
I'm like on the high end of blocking, right?

00:09:56.000 --> 00:09:58.000
Like, no, no, we're not doing this.

00:09:58.000 --> 00:10:00.000
No, you don't need this kind of stuff, right?

00:10:00.000 --> 00:10:03.000
But if you run it on your own infrastructure,

00:10:03.000 --> 00:10:04.000
under your own domain,

00:10:04.000 --> 00:10:07.000
the app is doing nothing nefarious.

00:10:07.000 --> 00:10:08.000
It's talking to itself for some things

00:10:08.000 --> 00:10:09.000
and it's going back and talking to itself

00:10:09.000 --> 00:10:11.000
for other forward tracking.

00:10:11.000 --> 00:10:14.000
So this is really, really easy to run under Docker

00:10:14.000 --> 00:10:17.000
as a multi-tier Docker app on your own domain,

00:10:17.000 --> 00:10:18.000
which is what I'm doing.

00:10:18.000 --> 00:10:20.000
And so now I can have some really nice insights

00:10:20.000 --> 00:10:23.000
into what are happening on PythonBytes.fm,

00:10:23.000 --> 00:10:25.000
the courses, all that,

00:10:25.000 --> 00:10:28.000
without sharing any data with anyone ever

00:10:28.000 --> 00:10:29.000
and without being blocked

00:10:29.000 --> 00:10:32.000
because it's just code running on our own server,

00:10:32.000 --> 00:10:34.000
just like everything else on the website.

00:10:34.000 --> 00:10:35.000
- That's cool.

00:10:35.000 --> 00:10:36.000
- Awesome, right?

00:10:36.000 --> 00:10:37.000
The problem is if you go over here

00:10:37.000 --> 00:10:38.000
and you're like, awesome, okay, developers,

00:10:38.000 --> 00:10:40.000
this is me, I'm a developer, let's go.

00:10:40.000 --> 00:10:41.000
Take me to the docs.

00:10:41.000 --> 00:10:43.000
And cool, look, there's an API section

00:10:43.000 --> 00:10:45.000
at the end down here.

00:10:45.000 --> 00:10:47.000
Okay, and now look, there's an API client.

00:10:47.000 --> 00:10:48.000
I don't wanna write code.

00:10:48.000 --> 00:10:49.000
That's great.

00:10:49.000 --> 00:10:51.000
NPM install API client.

00:10:51.000 --> 00:10:54.000
Oh, crap.

00:10:54.000 --> 00:10:57.000
The only API client for Umami

00:10:57.000 --> 00:10:59.000
is JavaScript or TypeScript.

00:10:59.000 --> 00:11:00.000
I don't know, it doesn't matter.

00:11:00.000 --> 00:11:01.000
It runs in JavaScript.

00:11:01.000 --> 00:11:02.000
It's not Python, right?

00:11:02.000 --> 00:11:03.000
Actually TypeScript.

00:11:03.000 --> 00:11:05.000
This whole app is basically TypeScript, right?

00:11:05.000 --> 00:11:07.000
That was until this week.

00:11:07.000 --> 00:11:09.000
So some guy down here named Michael

00:11:09.000 --> 00:11:13.000
released this thing called Umami-Analytics.

00:11:13.000 --> 00:11:16.000
Put it on PyPI, go over to the homepage.

00:11:16.000 --> 00:11:19.000
And you can see it talks about how it works.

00:11:19.000 --> 00:11:21.000
Basically, one of the things that's really nice

00:11:21.000 --> 00:11:24.000
about Umami over certain other systems,

00:11:24.000 --> 00:11:28.000
like plausible.io is one that has been thrown around

00:11:28.000 --> 00:11:30.000
in the same space and it's similar,

00:11:30.000 --> 00:11:33.000
is that with Umami, you can send custom events

00:11:33.000 --> 00:11:36.000
that have nothing to do with direct web actions.

00:11:36.000 --> 00:11:41.000
So for example, suppose somebody signs up

00:11:41.000 --> 00:11:43.000
for an account and then opts into your newsletter.

00:11:43.000 --> 00:11:44.000
You just talked about newsletters.

00:11:44.000 --> 00:11:46.000
And then that's a double opt-in.

00:11:46.000 --> 00:11:48.000
So they get an email, which then goes back

00:11:48.000 --> 00:11:50.000
to some other place where they actually say,

00:11:50.000 --> 00:11:52.000
"Yes, I really, really do wanna get this."

00:11:52.000 --> 00:11:54.000
It'd be cool if you could know,

00:11:54.000 --> 00:11:55.000
"Okay, that happened," right?

00:11:55.000 --> 00:11:59.000
And so the whole point of this Python library

00:11:59.000 --> 00:12:02.000
is to add Python-based events to your analytics

00:12:02.000 --> 00:12:04.000
on top of just what the JavaScript is.

00:12:04.000 --> 00:12:06.000
Like you're on this page and then you went to that page

00:12:06.000 --> 00:12:08.000
and you came from this place and you're on this browser.

00:12:08.000 --> 00:12:10.000
It'll let you send in things like,

00:12:10.000 --> 00:12:11.000
somebody bought a course,

00:12:11.000 --> 00:12:14.000
somebody confirmed their email address,

00:12:14.000 --> 00:12:18.000
somebody logged in with the mobile app for the first time.

00:12:18.000 --> 00:12:20.000
All of these things that have no straight

00:12:20.000 --> 00:12:23.000
HTML JavaScript experience, you can just pump those in

00:12:23.000 --> 00:12:25.000
right alongside all of your other analytics.

00:12:25.000 --> 00:12:27.000
Still all privacy preserving,

00:12:27.000 --> 00:12:28.000
not sharing data with anybody,

00:12:28.000 --> 00:12:31.000
no retargeting, no cookies, none of that crap.

00:12:31.000 --> 00:12:34.000
Just, I wanna view into what's happening in my app.

00:12:34.000 --> 00:12:36.000
So this thing lets you add a custom event

00:12:36.000 --> 00:12:39.000
and also you can like register multiple sites.

00:12:39.000 --> 00:12:41.000
You can list them out.

00:12:41.000 --> 00:12:44.000
It has both synchronous and asynchronous programming models

00:12:44.000 --> 00:12:47.000
based on Pydantic and HCPX.

00:12:47.000 --> 00:12:49.000
And yeah, super easy to use.

00:12:49.000 --> 00:12:50.000
- Very cool.

00:12:50.000 --> 00:12:51.000
- Isn't that neat? - Yeah.

00:12:51.000 --> 00:12:53.000
- So, recommend Umami,

00:12:53.000 --> 00:12:55.000
but one of the problems with Umami is

00:12:55.000 --> 00:12:57.000
there's not really a great client to like round that out.

00:12:57.000 --> 00:12:59.000
So check out the one that I created.

00:12:59.000 --> 00:13:00.000
- Nice.

00:13:00.000 --> 00:13:01.000
- This is gonna be a theme this week.

00:13:01.000 --> 00:13:02.000
So...

00:13:02.000 --> 00:13:03.000
- Apparently.

00:13:03.000 --> 00:13:04.000
We didn't plan this.

00:13:04.000 --> 00:13:05.000
- No.

00:13:05.000 --> 00:13:06.000
- Yeah.

00:13:06.000 --> 00:13:09.000
If we did, we would have both worn blue shirts.

00:13:09.000 --> 00:13:10.000
Oh wait, we're both wearing blue shirts.

00:13:10.000 --> 00:13:12.000
- We are wearing blue shirts.

00:13:12.000 --> 00:13:13.000
Oh, my tent is off though.

00:13:13.000 --> 00:13:15.000
All right, over to you.

00:13:15.000 --> 00:13:17.000
- I had an extra from the last one

00:13:17.000 --> 00:13:19.000
'cause there was a link from Eunice

00:13:19.000 --> 00:13:21.000
about fstrings.help,

00:13:21.000 --> 00:13:23.000
which I think I've seen before,

00:13:23.000 --> 00:13:24.000
but I kind of forgot about.

00:13:24.000 --> 00:13:27.000
But just looks like a Jupyter notebook

00:13:27.000 --> 00:13:30.000
about fstrings, which is...

00:13:30.000 --> 00:13:32.000
Okay, well, I'll have a link of that in the show notes.

00:13:32.000 --> 00:13:35.000
I wanted to mention that...

00:13:35.000 --> 00:13:38.000
So I did an open source thing also.

00:13:38.000 --> 00:13:40.000
So I released a thing called...

00:13:40.000 --> 00:13:42.000
- Oh, you did, okay.

00:13:42.000 --> 00:13:44.000
- pytest suite timeout.

00:13:44.000 --> 00:13:47.000
And there's a little, I guess, a story around it.

00:13:47.000 --> 00:13:50.000
So what happened was I recorded an episode

00:13:50.000 --> 00:13:53.000
of Python test about repeating tests.

00:13:53.000 --> 00:13:56.000
And I noted that pytest repeat doesn't have a timeout,

00:13:56.000 --> 00:13:59.000
but pytest flake finder does have a timeout.

00:13:59.000 --> 00:14:02.000
And it'd be kind of neat if repeat had a timeout also.

00:14:02.000 --> 00:14:07.000
And by timeout, I mean, there's the entire suite.

00:14:07.000 --> 00:14:09.000
So if I want to say, "Hey, I want to run..."

00:14:09.000 --> 00:14:10.000
I have an example.

00:14:10.000 --> 00:14:13.000
I want to run my suite a thousand times

00:14:13.000 --> 00:14:15.000
or a test a thousand times

00:14:15.000 --> 00:14:18.000
'cause I'm looking for flaky behavior or something.

00:14:18.000 --> 00:14:21.000
But I want to make sure that it only runs 10 minutes.

00:14:21.000 --> 00:14:24.000
Then that's the behavior I wanted.

00:14:24.000 --> 00:14:27.000
Like the entire suite, not individual tests,

00:14:27.000 --> 00:14:29.000
but the entire suite to only be like 10 minutes

00:14:29.000 --> 00:14:30.000
or an hour or whatever.

00:14:30.000 --> 00:14:32.000
That's the behavior I want.

00:14:32.000 --> 00:14:34.000
And I couldn't figure it out.

00:14:34.000 --> 00:14:36.000
And so I wrote this.

00:14:36.000 --> 00:14:39.000
Now it could have been in pytest repeat,

00:14:39.000 --> 00:14:42.000
but while I was thinking about it, I thought,

00:14:42.000 --> 00:14:45.000
"Well, I have other times where I've got parameterized tests

00:14:45.000 --> 00:14:47.000
that are like big lists,

00:14:47.000 --> 00:14:49.000
like 20 different waveforms or something

00:14:49.000 --> 00:14:51.000
that I'm passing through something."

00:14:51.000 --> 00:14:54.000
And sometimes I don't really know how long those are going to take.

00:14:54.000 --> 00:14:56.000
It'd be kind of nice to be able to say,

00:14:56.000 --> 00:14:58.000
"Hey, I want to make sure that the whole suite

00:14:58.000 --> 00:15:00.000
isn't longer than so much."

00:15:00.000 --> 00:15:03.000
So I made it its own plugin.

00:15:03.000 --> 00:15:05.000
So here it is, pytest suite timeout.

00:15:05.000 --> 00:15:07.000
You just pass it a flag.

00:15:07.000 --> 00:15:10.000
It's still... I just sort of did this a couple days ago,

00:15:10.000 --> 00:15:13.000
and I think there might be bugs in it.

00:15:13.000 --> 00:15:16.000
So I guess don't put it in production yet.

00:15:16.000 --> 00:15:17.000
That's why I know...

00:15:17.000 --> 00:15:18.000
>> Well, in production.

00:15:18.000 --> 00:15:19.000
>> Yeah.

00:15:19.000 --> 00:15:23.000
>> It's a little lower bar for test production

00:15:23.000 --> 00:15:25.000
rather than I took down the website.

00:15:25.000 --> 00:15:28.000
I just took down CI/CD is possibly what you might take down,

00:15:28.000 --> 00:15:29.000
which is still a problem.

00:15:29.000 --> 00:15:30.000
>> Yeah.

00:15:30.000 --> 00:15:33.000
Well, I think I just ran across this morning

00:15:33.000 --> 00:15:34.000
I was playing with it.

00:15:34.000 --> 00:15:37.000
At least one use case, the word doesn't actually timeout.

00:15:37.000 --> 00:15:41.000
So that's the behavior when it fails is it won't timeout.

00:15:41.000 --> 00:15:44.000
But we'll work with it and fix it.

00:15:44.000 --> 00:15:45.000
>> That's super cool.

00:15:45.000 --> 00:15:48.000
>> One of the... I announced it on Mastodon,

00:15:48.000 --> 00:15:52.000
and Mike Felder said, "That's pretty cool,

00:15:52.000 --> 00:15:55.000
but have you tried pytest-timeout?"

00:15:55.000 --> 00:15:58.000
Which, yeah, there's another one called timeout,

00:15:58.000 --> 00:16:01.000
and it seems like that should be what I want.

00:16:01.000 --> 00:16:02.000
It's just the timeout is...

00:16:02.000 --> 00:16:05.000
The pytest timeout is per test.

00:16:05.000 --> 00:16:09.000
It just makes sure that individual tests themselves

00:16:09.000 --> 00:16:11.000
don't run longer than a certain amount.

00:16:11.000 --> 00:16:12.000
>> I see.

00:16:12.000 --> 00:16:14.000
>> And this is kind of like...

00:16:14.000 --> 00:16:15.000
You should know this, right?

00:16:15.000 --> 00:16:18.000
Probably about how long your tests run.

00:16:18.000 --> 00:16:21.000
But it's Python and software,

00:16:21.000 --> 00:16:23.000
so sometimes infinite loops happen

00:16:23.000 --> 00:16:26.000
or some use case that you never break out of.

00:16:26.000 --> 00:16:30.000
>> Well, also, just the fact that it's taking

00:16:30.000 --> 00:16:32.000
way longer than it should

00:16:32.000 --> 00:16:35.000
might be something you want to trigger as an error, right?

00:16:35.000 --> 00:16:36.000
>> Yeah.

00:16:36.000 --> 00:16:39.000
>> Like if for some reason you want to talk to a database

00:16:39.000 --> 00:16:41.000
or an API directly and you're not stubbing it out,

00:16:41.000 --> 00:16:44.000
if those things are down, it could take 20 seconds for them

00:16:44.000 --> 00:16:46.000
to say, "Nope," every single time.

00:16:46.000 --> 00:16:47.000
And you might want to say,

00:16:47.000 --> 00:16:49.000
"If this ever takes more than five seconds,

00:16:49.000 --> 00:16:51.000
something's wrong," and just kill it.

00:16:51.000 --> 00:16:52.000
You know what I mean?

00:16:52.000 --> 00:16:54.000
I think that would even be reasonable.

00:16:54.000 --> 00:16:57.000
>> Yeah, so that's the idea around pytest timeout

00:16:57.000 --> 00:16:59.000
is if it takes longer than a certain amount,

00:16:59.000 --> 00:17:00.000
attempt to kill it, and it does.

00:17:00.000 --> 00:17:02.000
It does like SIG events and stuff

00:17:02.000 --> 00:17:06.000
to try to kill the process that's taking too long.

00:17:06.000 --> 00:17:07.000
>> Excellent.

00:17:07.000 --> 00:17:09.000
>> Whereas the new one, suite timeout, is nice.

00:17:09.000 --> 00:17:11.000
It won't kill anything,

00:17:11.000 --> 00:17:14.000
but it also won't stop something like that.

00:17:14.000 --> 00:17:17.000
But it'll just, between tests, say,

00:17:17.000 --> 00:17:19.000
"Hey, this is taking kind of too long.

00:17:19.000 --> 00:17:21.000
Let's stop now."

00:17:21.000 --> 00:17:22.000
>> Okay.

00:17:22.000 --> 00:17:25.000
Well, you might not want to SIG kill either

00:17:25.000 --> 00:17:29.000
because what if it's going to put something in a database,

00:17:29.000 --> 00:17:31.000
do some stuff, and then take it back out

00:17:31.000 --> 00:17:33.000
or make a file change and then clean up the temporary files

00:17:33.000 --> 00:17:35.000
or, you know, whatever, right?

00:17:35.000 --> 00:17:36.000
>> Yeah.

00:17:36.000 --> 00:17:38.000
The other part of this, though,

00:17:38.000 --> 00:17:41.000
is I think it's too nice so far.

00:17:41.000 --> 00:17:44.000
It doesn't throw any exceptions or errors or anything.

00:17:44.000 --> 00:17:46.000
It just stops the counting.

00:17:46.000 --> 00:17:48.000
So if you normally, like in this example,

00:17:48.000 --> 00:17:52.000
if I had 1,000 and I only get through, like, 150,

00:17:52.000 --> 00:17:54.000
it just stops, passes everything,

00:17:54.000 --> 00:17:57.000
but it only ran 150 instead of 1,000.

00:17:57.000 --> 00:17:59.000
I'm trying to figure out a way to, like,

00:17:59.000 --> 00:18:03.000
alert the user a little bit more that there's something wrong.

00:18:03.000 --> 00:18:04.000
So we'll see.

00:18:04.000 --> 00:18:07.000
It'll grow a little bit after this.

00:18:07.000 --> 00:18:09.000
>> Cool. Oh, excellent. Excellent.

00:18:09.000 --> 00:18:11.000
This is a crazy episode of where it's just

00:18:11.000 --> 00:18:13.000
we all created a bunch of things.

00:18:13.000 --> 00:18:14.000
So let's go back to things we created, huh?

00:18:14.000 --> 00:18:15.000
>> Okay.

00:18:15.000 --> 00:18:16.000
>> Next one.

00:18:16.000 --> 00:18:18.000
This one is also a thing I didn't create,

00:18:18.000 --> 00:18:20.000
but outside in again.

00:18:20.000 --> 00:18:23.000
So I've been using MailChimp for years,

00:18:23.000 --> 00:18:24.000
and when I first started using MailChimp,

00:18:24.000 --> 00:18:27.000
you know, MailChimp is I want to let you subscribe

00:18:27.000 --> 00:18:29.000
to my newsletter and put you into groups

00:18:29.000 --> 00:18:31.000
so that if I only want to talk to the Talk Python people,

00:18:31.000 --> 00:18:32.000
I can send that message.

00:18:32.000 --> 00:18:34.000
If I only want to talk to the Python Bytes people,

00:18:34.000 --> 00:18:36.000
I can send that message, right?

00:18:36.000 --> 00:18:38.000
And the price has just been going up and up and up,

00:18:38.000 --> 00:18:40.000
like hundreds of, $100 this month,

00:18:40.000 --> 00:18:42.000
the next month another $100.

00:18:42.000 --> 00:18:44.000
You're like, what is going on with these people?

00:18:44.000 --> 00:18:45.000
You know, Intuit bought it,

00:18:45.000 --> 00:18:47.000
and it used to be like kind of a cute little company,

00:18:47.000 --> 00:18:50.000
and now it's just a accounting firm grinding its users,

00:18:50.000 --> 00:18:52.000
and I kind of don't want anything else to do with it.

00:18:52.000 --> 00:18:56.000
And I would much prefer to not share all of the people,

00:18:56.000 --> 00:18:59.000
customers, people who just want to subscribe their data

00:18:59.000 --> 00:19:01.000
with a third party either, right?

00:19:01.000 --> 00:19:03.000
So I went on, I think I talked about this before.

00:19:03.000 --> 00:19:05.000
Remember I talked about the 10 different options

00:19:05.000 --> 00:19:08.000
that people had sent out of possible newsletter places?

00:19:08.000 --> 00:19:09.000
- Yeah.

00:19:09.000 --> 00:19:11.000
- I wish I remember who's hold me on Mastodon,

00:19:11.000 --> 00:19:12.000
but somebody said,

00:19:12.000 --> 00:19:13.000
well, there's these five open source ones.

00:19:13.000 --> 00:19:14.000
I'm like, wait a minute.

00:19:14.000 --> 00:19:16.000
Okay, that's interesting.

00:19:16.000 --> 00:19:18.000
And so after a bunch of research,

00:19:18.000 --> 00:19:21.000
I decided to turn on ListMonk.

00:19:21.000 --> 00:19:24.000
And ListMonk is written in Go,

00:19:24.000 --> 00:19:26.000
and it's an open source.

00:19:26.000 --> 00:19:27.000
There's not even a SaaS version.

00:19:27.000 --> 00:19:31.000
It's just self-hosted version of basically MailChimp, right?

00:19:31.000 --> 00:19:33.000
You can have different lists, people can subscribe to them,

00:19:33.000 --> 00:19:35.000
you can put them into groups, you send them emails,

00:19:35.000 --> 00:19:36.000
all that kind of stuff, right?

00:19:36.000 --> 00:19:37.000
- Yeah.

00:19:37.000 --> 00:19:39.000
- So I, again, 'cause I have all this cool

00:19:39.000 --> 00:19:41.000
Docker infrastructure stuff set up now,

00:19:41.000 --> 00:19:43.000
it was super easy to just move that over

00:19:43.000 --> 00:19:45.000
and run that in Docker, right?

00:19:45.000 --> 00:19:47.000
Just like you, mom, you're like, okay,

00:19:47.000 --> 00:19:48.000
how do I talk to it?

00:19:48.000 --> 00:19:50.000
There's not even an official API client.

00:19:50.000 --> 00:19:53.000
The ones you find are like, well, here's one for PHP.

00:19:53.000 --> 00:19:56.000
There's actually several for Python,

00:19:56.000 --> 00:19:58.000
but they're really bad and they don't work.

00:19:58.000 --> 00:19:59.000
I mean, really bad.

00:19:59.000 --> 00:20:03.000
So some of them, for example, are just,

00:20:03.000 --> 00:20:06.000
they look at the Swagger docs or the open API docs

00:20:06.000 --> 00:20:07.000
and they just auto-generate it.

00:20:07.000 --> 00:20:09.000
But somehow it's like stuck in time,

00:20:09.000 --> 00:20:12.000
auto-generated on an old version that doesn't work anymore.

00:20:12.000 --> 00:20:14.000
I don't know, it's like even the auto-generated one

00:20:14.000 --> 00:20:15.000
doesn't work.

00:20:15.000 --> 00:20:16.000
I'm like, ah, man, I really need this.

00:20:16.000 --> 00:20:20.000
Even more than the umami thing, I need code to be written.

00:20:20.000 --> 00:20:22.000
So like someone creates an account when they buy a course

00:20:22.000 --> 00:20:24.000
and they say, yes, I wanna be, you know,

00:20:24.000 --> 00:20:26.000
I asked them, do you wanna be in the middle of this?

00:20:26.000 --> 00:20:27.000
Yes, I wanna be in there.

00:20:27.000 --> 00:20:28.000
How do I make that happen, right?

00:20:28.000 --> 00:20:30.000
Well, Python, of course.

00:20:30.000 --> 00:20:33.000
So over the next project,

00:20:33.000 --> 00:20:36.000
ListMonk email app API client for Python

00:20:36.000 --> 00:20:39.000
or just pip install ListMonk.

00:20:39.000 --> 00:20:40.000
- Okay.

00:20:40.000 --> 00:20:41.000
- So over here, this is the next one.

00:20:41.000 --> 00:20:43.000
Super nice, you can add a subscriber,

00:20:43.000 --> 00:20:44.000
get details about them.

00:20:44.000 --> 00:20:46.000
One of the things that's cool in ListMonk

00:20:46.000 --> 00:20:51.000
is there's a arbitrary JSON Python dictionary type thing

00:20:51.000 --> 00:20:53.000
associated with each user.

00:20:53.000 --> 00:20:55.000
So whatever data you wanna put in there, you can.

00:20:55.000 --> 00:20:56.000
And with this thing, you can manage it.

00:20:56.000 --> 00:20:59.000
Like for example, if one thing that's common

00:20:59.000 --> 00:21:03.000
is you have a rating or things along those lines or actions,

00:21:03.000 --> 00:21:05.000
you could put that into the user

00:21:05.000 --> 00:21:06.000
as part of their user record.

00:21:06.000 --> 00:21:07.000
So you can manage it with that.

00:21:07.000 --> 00:21:08.000
You can search them,

00:21:08.000 --> 00:21:10.000
check the health of your self-hosted thing,

00:21:10.000 --> 00:21:11.000
segment on your list.

00:21:11.000 --> 00:21:14.000
Obviously you gotta unsubscribe and delete users.

00:21:14.000 --> 00:21:16.000
You can even send transactional emails.

00:21:16.000 --> 00:21:18.000
So super, super cool stuff.

00:21:18.000 --> 00:21:20.000
Again, one more nice open source thing

00:21:20.000 --> 00:21:24.000
that's not, you know, some big, super expensive,

00:21:24.000 --> 00:21:27.000
privacy questionable SaaS service.

00:21:27.000 --> 00:21:29.000
And instead running good over here,

00:21:29.000 --> 00:21:31.000
it does take a little bit of work.

00:21:31.000 --> 00:21:33.000
Umami is like perfect.

00:21:33.000 --> 00:21:37.000
This is a little clunky in some little edge cases,

00:21:37.000 --> 00:21:38.000
but it's still quite nice.

00:21:38.000 --> 00:21:40.000
So that's the next project.

00:21:40.000 --> 00:21:43.000
Also available on PyPI today.

00:21:43.000 --> 00:21:44.000
- Nice.

00:21:44.000 --> 00:21:46.000
- That's it for our items.

00:21:46.000 --> 00:21:47.000
- Cool.

00:21:47.000 --> 00:21:48.000
- Hopefully between all these things,

00:21:48.000 --> 00:21:51.000
we can help people write one a little bit better test

00:21:51.000 --> 00:21:54.000
and to depend a little bit less on

00:21:54.000 --> 00:21:56.000
just giving up a little bit of privacy

00:21:56.000 --> 00:21:58.000
to trade it in convenience,

00:21:58.000 --> 00:22:00.000
like Google Analytics, for example,

00:22:00.000 --> 00:22:01.000
or to a lesser degree,

00:22:01.000 --> 00:22:02.000
some of these mail platforms.

00:22:02.000 --> 00:22:03.000
- Yeah.

00:22:04.000 --> 00:22:05.000
And save some money while you're at it.

00:22:05.000 --> 00:22:06.000
All right.

00:22:06.000 --> 00:22:08.000
- Well, normally we would jump into some extras

00:22:08.000 --> 00:22:11.000
and I don't have any extras this week.

00:22:11.000 --> 00:22:13.000
So do you have any extras?

00:22:13.000 --> 00:22:14.000
- I do have extras.

00:22:14.000 --> 00:22:16.000
Well, let's see what have I got here.

00:22:16.000 --> 00:22:17.000
Yeah.

00:22:17.000 --> 00:22:18.000
Okay.

00:22:18.000 --> 00:22:19.000
So the first one is if I'm running,

00:22:19.000 --> 00:22:20.000
self-hosting these things, right?

00:22:20.000 --> 00:22:21.000
I'm running them in a Docker cluster.

00:22:21.000 --> 00:22:25.000
So it's really easy to basically just do a Docker pull,

00:22:25.000 --> 00:22:28.000
restart, you know, relaunch the app,

00:22:28.000 --> 00:22:29.000
off it goes, right?

00:22:29.000 --> 00:22:30.000
So that's awesome.

00:22:30.000 --> 00:22:33.000
That's one of the reasons I'm willing to run like Umami

00:22:33.000 --> 00:22:34.000
rather than like FS server

00:22:34.000 --> 00:22:36.000
and all these database things,

00:22:36.000 --> 00:22:37.000
I get a patch and whatever, right?

00:22:37.000 --> 00:22:42.000
Just literally one command to manage like 15 multi-tier apps.

00:22:42.000 --> 00:22:43.000
It's awesome.

00:22:43.000 --> 00:22:45.000
But how do you know when there's a new one, right?

00:22:45.000 --> 00:22:46.000
Obviously you could just set it up

00:22:46.000 --> 00:22:47.000
to just do it continuously.

00:22:47.000 --> 00:22:50.000
But what I realized is every GitHub repository,

00:22:50.000 --> 00:22:53.000
this has nothing to do with Umami, just an example,

00:22:53.000 --> 00:22:56.000
every GitHub repository, if they use releases, right?

00:22:56.000 --> 00:23:00.000
If you go over here and you say like the releases,

00:23:00.000 --> 00:23:03.000
like I have a V01.10 for my Umami thing,

00:23:03.000 --> 00:23:05.000
and there's actually two of them, right?

00:23:05.000 --> 00:23:07.000
If you have that for any object,

00:23:07.000 --> 00:23:10.000
you can just go to the GitHub URL

00:23:10.000 --> 00:23:12.000
for the web, not the dot get thing

00:23:12.000 --> 00:23:15.000
and just do slash releases dot Adam.

00:23:15.000 --> 00:23:18.000
And that's an RSS feed for the releases

00:23:18.000 --> 00:23:20.000
for any GitHub project, even if they don't have a blog.

00:23:20.000 --> 00:23:21.000
- Wow.

00:23:21.000 --> 00:23:22.000
- That's cool, right?

00:23:22.000 --> 00:23:23.000
- Yeah.

00:23:23.000 --> 00:23:24.000
I can put this in Feedly then.

00:23:24.000 --> 00:23:26.000
- Yes, I put it in Reader for me

00:23:26.000 --> 00:23:29.000
and now I have ListMonk and Umami

00:23:29.000 --> 00:23:30.000
and a few other things that I'm like,

00:23:30.000 --> 00:23:31.000
if this gets changed,

00:23:31.000 --> 00:23:33.000
I probably wanna just go take a little action

00:23:33.000 --> 00:23:34.000
on that real quick.

00:23:34.000 --> 00:23:36.000
And now it's in my RSS feed.

00:23:36.000 --> 00:23:37.000
- That's pretty cool.

00:23:37.000 --> 00:23:38.000
- Yeah, so very simple.

00:23:38.000 --> 00:23:41.000
Anyone can just watch whatever they want.

00:23:41.000 --> 00:23:42.000
Brian, we both tried to do this one.

00:23:42.000 --> 00:23:43.000
- Yeah.

00:23:43.000 --> 00:23:44.000
- Colo, you mentioned that

00:23:44.000 --> 00:23:46.000
in your article, I ran across this

00:23:46.000 --> 00:23:47.000
'cause I, sorry, I don't remember the last name,

00:23:47.000 --> 00:23:51.000
but I saw one of my Mastodon followers, Lily,

00:23:51.000 --> 00:23:54.000
she somehow interacted with me

00:23:54.000 --> 00:23:57.000
and her profile came by in my app.

00:23:57.000 --> 00:23:59.000
And I saw that she works on this thing called

00:23:59.000 --> 00:24:02.000
Colo, debugging for Django apps.

00:24:02.000 --> 00:24:03.000
I'm like, huh, that's interesting.

00:24:03.000 --> 00:24:04.000
What is this?

00:24:04.000 --> 00:24:05.000
So this is a thing that's in beta.

00:24:05.000 --> 00:24:08.000
It says, see everything happening

00:24:08.000 --> 00:24:10.000
in your running Django app.

00:24:10.000 --> 00:24:12.000
And they have a really nice design

00:24:12.000 --> 00:24:14.000
of their webpage here.

00:24:14.000 --> 00:24:16.000
So probably best to see visually.

00:24:16.000 --> 00:24:18.000
It says debug your Django app 10 times faster,

00:24:18.000 --> 00:24:20.000
get instant access, et cetera, et cetera.

00:24:20.000 --> 00:24:23.000
So this is a plugin or extension for VS Code.

00:24:23.000 --> 00:24:26.000
And it just has tons of information

00:24:26.000 --> 00:24:27.000
all available to you.

00:24:27.000 --> 00:24:30.000
So it has a tab or whatever the thing on the left is.

00:24:30.000 --> 00:24:32.000
You expand like extensions and files

00:24:32.000 --> 00:24:35.000
and it plugs into that thing, a little pane, I guess.

00:24:35.000 --> 00:24:38.000
And it shows you the request response,

00:24:38.000 --> 00:24:41.000
like kind of like a dev tools in a web browser.

00:24:41.000 --> 00:24:45.000
So you can see headers, HTTP requests, responses

00:24:45.000 --> 00:24:49.000
as kind of a running history of the HTTP exchange

00:24:49.000 --> 00:24:51.000
your browser is having with your Django app.

00:24:51.000 --> 00:24:52.000
That's cool, right?

00:24:52.000 --> 00:24:53.000
- Yeah.

00:24:53.000 --> 00:24:54.000
- And I think it's showing you,

00:24:54.000 --> 00:24:57.000
not entirely sure, but I think it might be showing you

00:24:57.000 --> 00:25:00.000
even Python code, not just web things, right?

00:25:00.000 --> 00:25:02.000
It has local variables, arguments,

00:25:02.000 --> 00:25:04.000
and then it has even like this tree thing

00:25:04.000 --> 00:25:07.000
for visualizing code execution paths.

00:25:07.000 --> 00:25:09.000
So yeah.

00:25:09.000 --> 00:25:10.000
- Yeah, so you click on the, sorry,

00:25:10.000 --> 00:25:12.000
you click on the request, it shows you the code

00:25:12.000 --> 00:25:14.000
and then it actually shows you the local variables

00:25:14.000 --> 00:25:15.000
that were passed around as well.

00:25:15.000 --> 00:25:16.000
It's pretty neat.

00:25:16.000 --> 00:25:17.000
- Yeah.

00:25:17.000 --> 00:25:18.000
I don't know that the tree,

00:25:18.000 --> 00:25:20.000
the visual thing is super pretty,

00:25:20.000 --> 00:25:22.000
but I don't know how awful it is,

00:25:22.000 --> 00:25:23.000
but I haven't played with it yet.

00:25:23.000 --> 00:25:24.000
- I agree with you.

00:25:24.000 --> 00:25:25.000
It's awesome.

00:25:25.000 --> 00:25:26.000
Wouldn't use it.

00:25:26.000 --> 00:25:29.000
(laughing)

00:25:29.000 --> 00:25:32.000
Yeah, you can do, what is it?

00:25:32.000 --> 00:25:34.000
Inspect all the outbound HTTP requests made.

00:25:34.000 --> 00:25:35.000
That's kind of neat.

00:25:35.000 --> 00:25:38.000
And SQL queries, you can,

00:25:38.000 --> 00:25:41.000
it'll track all the SQL queries that were made.

00:25:41.000 --> 00:25:43.000
Really good for understanding what's happening.

00:25:43.000 --> 00:25:44.000
What's up, Brian?

00:25:44.000 --> 00:25:45.000
- That's just really nice

00:25:45.000 --> 00:25:48.000
because you never know when your queries get out of hand

00:25:48.000 --> 00:25:50.000
and you're making way more than you need to.

00:25:50.000 --> 00:25:51.000
- Exactly.

00:25:51.000 --> 00:25:53.000
Especially in the ORM space

00:25:53.000 --> 00:25:56.000
because it's so easy to do lazy loading

00:25:56.000 --> 00:25:57.000
and say, give me all the customers.

00:25:57.000 --> 00:26:00.000
For each customer, get me this thing about them.

00:26:00.000 --> 00:26:02.000
And that's a relationship.

00:26:02.000 --> 00:26:03.000
So every time through the loop,

00:26:03.000 --> 00:26:04.000
it's another database query,

00:26:04.000 --> 00:26:07.000
the so-called N plus one performance problem, right?

00:26:07.000 --> 00:26:08.000
And you would just see like,

00:26:08.000 --> 00:26:10.000
whoa, the SQL thing is full.

00:26:10.000 --> 00:26:12.000
I thought there were like two or three requests

00:26:12.000 --> 00:26:13.000
and now it's just full.

00:26:13.000 --> 00:26:15.000
What is happening here, right?

00:26:15.000 --> 00:26:16.000
So that's great.

00:26:16.000 --> 00:26:17.000
Yeah, anyway.

00:26:17.000 --> 00:26:18.000
- Ooh, background jobs.

00:26:18.000 --> 00:26:21.000
- Yeah, even contract your salary background tasks.

00:26:21.000 --> 00:26:22.000
So right now it's in beta.

00:26:22.000 --> 00:26:23.000
I'm pretty sure this is a thing

00:26:23.000 --> 00:26:25.000
that costs money at some point.

00:26:25.000 --> 00:26:28.000
Yeah, so if you VS code, check this out.

00:26:28.000 --> 00:26:29.000
It's kind of interesting.

00:26:29.000 --> 00:26:30.000
- Yeah, definitely.

00:26:30.000 --> 00:26:31.000
Neat.

00:26:31.000 --> 00:26:32.000
- Neat, all right.

00:26:32.000 --> 00:26:36.000
Another thing that's cool is I've talked about warp before

00:26:36.000 --> 00:26:38.000
and I've been using warp at the terminal a lot.

00:26:38.000 --> 00:26:41.000
One of the drawbacks of warp for all of its beauty

00:26:41.000 --> 00:26:44.000
and cool features is that it doesn't,

00:26:44.000 --> 00:26:46.000
it only works on Mac for now,

00:26:46.000 --> 00:26:48.000
which is a limitation, let's call it.

00:26:48.000 --> 00:26:49.000
- Not for me.

00:26:49.000 --> 00:26:50.000
(laughing)

00:26:50.000 --> 00:26:51.000
For other people.

00:26:51.000 --> 00:26:53.000
- Yeah, not for me, but for a good chunk.

00:26:53.000 --> 00:26:55.000
Now I say it's only somewhat of a limitation.

00:26:55.000 --> 00:27:00.000
So like on my Mac, if I SSH into my Docker cluster thing

00:27:00.000 --> 00:27:01.000
that I've been talking about,

00:27:01.000 --> 00:27:05.000
warp will like inject the warp behaviors

00:27:05.000 --> 00:27:07.000
into the Linux shell over there.

00:27:07.000 --> 00:27:11.000
So I get like end to end warp as a Mac user,

00:27:11.000 --> 00:27:13.000
but if I was actually a Linux user,

00:27:13.000 --> 00:27:16.000
I couldn't use warp 'cause it's a Mac app

00:27:16.000 --> 00:27:17.000
until pretty much now, right?

00:27:17.000 --> 00:27:20.000
So coming soon is warp on Linux.

00:27:20.000 --> 00:27:21.000
So people wanna sign up for that.

00:27:21.000 --> 00:27:25.000
I put a link for in the Linux terminal signup page

00:27:25.000 --> 00:27:26.000
to get on the wait list

00:27:26.000 --> 00:27:30.000
and warp is just a super neat way to work with.

00:27:30.000 --> 00:27:32.000
With your terminals more like an editor.

00:27:32.000 --> 00:27:35.000
It's got AI built in, which most AI built in things I hate.

00:27:35.000 --> 00:27:37.000
They're really bad, but you can say things like,

00:27:37.000 --> 00:27:40.000
just say hash and then you'll say something like,

00:27:40.000 --> 00:27:43.000
you know, search this directory for all files

00:27:43.000 --> 00:27:45.000
with this pattern, except that directory.

00:27:45.000 --> 00:27:48.000
And then it'll go, here's the command that you type.

00:27:48.000 --> 00:27:49.000
You know, like that kind of,

00:27:49.000 --> 00:27:50.000
'cause it's that kind of stuff that I'm like,

00:27:50.000 --> 00:27:52.000
what's the parameter to this?

00:27:52.000 --> 00:27:53.000
How do I grep that again?

00:27:53.000 --> 00:27:54.000
I have no idea.

00:27:54.000 --> 00:27:55.000
(laughing)

00:27:55.000 --> 00:27:56.000
So anyway, it's pretty cool.

00:27:56.000 --> 00:27:58.000
- I wonder if it's set up.

00:27:58.000 --> 00:28:00.000
I'm just curious if it's,

00:28:00.000 --> 00:28:02.000
since they're doing different platforms,

00:28:02.000 --> 00:28:06.000
if they've got a UI layer and then a warp core.

00:28:06.000 --> 00:28:08.000
- Oh my God, they probably do have a warp core.

00:28:08.000 --> 00:28:09.000
And if they didn't name it that,

00:28:09.000 --> 00:28:12.000
they've really lost a chance here, right?

00:28:12.000 --> 00:28:13.000
- Yeah, hopefully.

00:28:13.000 --> 00:28:17.000
- So I talked about this before I realized through search

00:28:17.000 --> 00:28:19.000
about two and a half years ago,

00:28:19.000 --> 00:28:21.000
something called BPyTop.

00:28:21.000 --> 00:28:23.000
So BPyTop is an awesome,

00:28:23.000 --> 00:28:25.000
if it gets too small,

00:28:25.000 --> 00:28:26.000
it thinks it's gonna hide all of its graphics,

00:28:26.000 --> 00:28:30.000
way to look at how your server is going.

00:28:30.000 --> 00:28:34.000
And it is so neat the way that this app works.

00:28:34.000 --> 00:28:36.000
I definitely, let me just, I'll put it up.

00:28:36.000 --> 00:28:41.000
Here's the live running version of the one

00:28:41.000 --> 00:28:43.000
that I've been messing with lately.

00:28:43.000 --> 00:28:45.000
And Brian, you can see you've got your memory.

00:28:45.000 --> 00:28:47.000
If there's not a whole lot of action going on right now,

00:28:47.000 --> 00:28:48.000
so it's kind of blank graphs,

00:28:48.000 --> 00:28:50.000
but like if the memory jumped up,

00:28:50.000 --> 00:28:51.000
you would see it go up.

00:28:51.000 --> 00:28:53.000
It shows you how much memory is free,

00:28:53.000 --> 00:28:55.000
how much is being used,

00:28:55.000 --> 00:28:58.000
how much of that is being cached, disk activity.

00:28:58.000 --> 00:29:01.000
You can see the network traffic,

00:29:01.000 --> 00:29:03.000
the multiple, it has four CPUs

00:29:03.000 --> 00:29:06.000
and it shows you graphs for all four CPUs

00:29:06.000 --> 00:29:08.000
as well as like the combined.

00:29:08.000 --> 00:29:09.000
And I'm not gonna show the processes

00:29:09.000 --> 00:29:12.000
'cause they might show command arguments

00:29:12.000 --> 00:29:14.000
that I just don't wanna share.

00:29:14.000 --> 00:29:17.000
But it seems like it probably somehow could be a bad idea

00:29:17.000 --> 00:29:18.000
that I'm not aware of,

00:29:18.000 --> 00:29:20.000
but we'll learn later in a hard way.

00:29:20.000 --> 00:29:23.000
But isn't that an amazing way to just,

00:29:23.000 --> 00:29:25.000
this is over an SSH session.

00:29:25.000 --> 00:29:26.000
- Oh, that's pretty cool.

00:29:26.000 --> 00:29:27.000
That's amazing.

00:29:27.000 --> 00:29:29.000
- Yeah, and watch this.

00:29:29.000 --> 00:29:30.000
So if I just hit escape,

00:29:30.000 --> 00:29:34.000
you get even, it's like an old video game options

00:29:34.000 --> 00:29:36.000
with mouse support and everything.

00:29:36.000 --> 00:29:37.000
- Oh, that's pretty cool.

00:29:37.000 --> 00:29:40.000
- Yeah, so another thing to sort of announce here

00:29:40.000 --> 00:29:45.000
is there's BPyTOP, which you can pipx install,

00:29:45.000 --> 00:29:46.000
but they've also, as part of this,

00:29:46.000 --> 00:29:49.000
released a BTOP rewritten,

00:29:49.000 --> 00:29:51.000
and I think it must be C++.

00:29:51.000 --> 00:29:53.000
So anyway, that's cool, right?

00:29:53.000 --> 00:29:55.000
People can, I think that's supposed to be

00:29:55.000 --> 00:29:56.000
a little bit more high performance,

00:29:56.000 --> 00:29:58.000
although to me, they kind of seem like

00:29:58.000 --> 00:30:00.000
the same type of thing.

00:30:00.000 --> 00:30:01.000
Anyway, really cool.

00:30:01.000 --> 00:30:05.000
If you've been using like TOP or something like this,

00:30:05.000 --> 00:30:07.000
there's a really much better way.

00:30:07.000 --> 00:30:10.000
And Glance is good, but BTOP is the new winner

00:30:10.000 --> 00:30:11.000
in my world here.

00:30:11.000 --> 00:30:13.000
- And you know, those sort of graphs,

00:30:13.000 --> 00:30:14.000
even if you don't need them,

00:30:14.000 --> 00:30:15.000
you can have a second monitor

00:30:15.000 --> 00:30:17.000
and have one of those running.

00:30:17.000 --> 00:30:18.000
Everybody in your life will think

00:30:18.000 --> 00:30:20.000
you do something cooler than you actually do.

00:30:20.000 --> 00:30:21.000
- Exactly.

00:30:21.000 --> 00:30:22.000
Whoa, you're a hacker, aren't you?

00:30:22.000 --> 00:30:23.000
That's a terminal.

00:30:23.000 --> 00:30:24.000
(laughing)

00:30:24.000 --> 00:30:26.000
Yeah, I am, okay.

00:30:26.000 --> 00:30:27.000
Don't cross me.

00:30:28.000 --> 00:30:29.000
All right.

00:30:29.000 --> 00:30:30.000
- Nice.

00:30:30.000 --> 00:30:33.000
Right, I think that's our extras.

00:30:33.000 --> 00:30:34.000
- It is.

00:30:34.000 --> 00:30:35.000
Chris Tyler, just real quick,

00:30:35.000 --> 00:30:38.000
has a recommendation, switch to bottom BTM,

00:30:38.000 --> 00:30:40.000
which is similar, but written in Rust

00:30:40.000 --> 00:30:41.000
and a little more performant.

00:30:41.000 --> 00:30:44.000
Also cross-platform like BPyTOP.

00:30:44.000 --> 00:30:47.000
Okay, well, maybe, maybe that needs

00:30:47.000 --> 00:30:48.000
to be checked out as well.

00:30:48.000 --> 00:30:50.000
Maybe my time with BTOP was short

00:30:50.000 --> 00:30:52.000
and I'll be over to bottom before I know it.

00:30:52.000 --> 00:30:54.000
- Top and bottom, that's just terrible.

00:30:54.000 --> 00:30:56.000
- Yeah, these are funny.

00:30:56.000 --> 00:30:57.000
Yeah, thanks Christopher.

00:30:57.000 --> 00:30:59.000
All right, I think I'm ready for a joke.

00:30:59.000 --> 00:31:00.000
- Yes.

00:31:00.000 --> 00:31:01.000
- I've got something, you know,

00:31:01.000 --> 00:31:03.000
I've been talking about consolidating

00:31:03.000 --> 00:31:05.000
all these servers and running different things.

00:31:05.000 --> 00:31:07.000
We just talked about the monitoring

00:31:07.000 --> 00:31:09.000
your server and Docker.

00:31:09.000 --> 00:31:13.000
So I thought it might be fun to share this post

00:31:13.000 --> 00:31:16.000
on InfoSec Exchange Mastodon from Jeff Hall.

00:31:16.000 --> 00:31:17.000
- Wow.

00:31:17.000 --> 00:31:19.000
- And it's got this, describe this for us, Brian.

00:31:19.000 --> 00:31:23.000
- It's just a mess of cables coming out of the back

00:31:23.000 --> 00:31:25.000
of what, a bunch of, I don't know.

00:31:25.000 --> 00:31:26.000
- Network equipment?

00:31:26.000 --> 00:31:27.000
- Yeah.

00:31:27.000 --> 00:31:28.000
- It's just like the world,

00:31:28.000 --> 00:31:32.000
you couldn't imagine a worse set of tangled wires

00:31:32.000 --> 00:31:33.000
and they're dirty too, right?

00:31:33.000 --> 00:31:36.000
It's not just like, they're covered in,

00:31:36.000 --> 00:31:39.000
that's all these routers and they're just,

00:31:39.000 --> 00:31:41.000
they're white, but they're most,

00:31:41.000 --> 00:31:43.000
they're significantly brown as well.

00:31:43.000 --> 00:31:44.000
- With like a whole bunch of hubs

00:31:44.000 --> 00:31:45.000
hanging in between and stuff.

00:31:45.000 --> 00:31:47.000
- Yeah, yeah, and a lot of these pieces

00:31:47.000 --> 00:31:49.000
are just suspended by the wires

00:31:49.000 --> 00:31:51.000
and it just says the cloud.

00:31:51.000 --> 00:31:52.000
(laughing)

00:31:52.000 --> 00:31:54.000
- Yeah, yeah.

00:31:54.000 --> 00:31:55.000
- It's very nice, I love it.

00:31:55.000 --> 00:31:57.000
- Yeah, that's very cool.

00:31:57.000 --> 00:31:58.000
- Indeed.

00:31:58.000 --> 00:31:59.000
- Funny.

00:31:59.000 --> 00:32:01.000
- All right, well, that's it for the show, I suppose.

00:32:01.000 --> 00:32:04.000
And we don't normally have a final call to action,

00:32:04.000 --> 00:32:07.000
but go check out your new pytest thing,

00:32:07.000 --> 00:32:09.000
your timeout and check out some of these

00:32:09.000 --> 00:32:11.000
other self-hosted things.

00:32:11.000 --> 00:32:12.000
- Yeah.

00:32:12.000 --> 00:32:13.000
- Yeah, it's really cool.

00:32:14.000 --> 00:32:16.000
A lot of stuff people can adopt in.

00:32:16.000 --> 00:32:17.000
- Yeah.

00:32:17.000 --> 00:32:18.000
- Thanks for being here.

