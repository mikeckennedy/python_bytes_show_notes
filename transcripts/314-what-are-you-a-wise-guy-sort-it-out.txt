00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your buds. This is episode 314. Recorded December 13 2022. I'm Michael Kennedy. And I'm Brian knockin. And it's just us this time, very nice to be together to share some fun Python news.

00:00:18 Yeah, we got some good stuff.

00:00:19 I think we do. Why don't you kick it off. But before you do, actually, real quick, I just want to say thank you to Microsoft for startups for sponsoring this show. tell you more about them later,

00:00:26 guys. Well, first up, we've got something from Wilma Coogan, surprise, surprise. But he's got this cool project called factory FAQ. T o ry factory, cute joke. But it's a it's a tool to generate FAQ page, markdown page specifically for, you know, GitHub project or something. I mean, you could use it for anything, really. But it's one of the fun things about it is it uses it itself. So you can I mean, not if there's an example there, but the questions are fun. So the idea is, is you've got a lot of questions, maybe that come in about your project, and you want to answer, you know, keep track of them. So what you do is you stick, you stick your questions in a question directory, and then and then they're, they're like just these little markdown snippets. And they're let's look at the raw format. It's just like this just title is a title block, and then some some, and that's the question. And then some, maybe some information, you can cite things, maybe it's really pretty easy. I'm gonna go actually to the readme again to, to talk about that, because it's not

00:01:41 gonna go to the FAQ. Oh, yeah, we could

00:01:45 just the I wanted to make sure that we talked about all the titles. So you had you have a title for a question, and then an alt title, maybe for different kinds of questions that are really the same question, and then an answer. That's the simple form of what to do, and these little markdown files, these little question files, and then you just use do factory build. And what it does is takes all those in creates a markdown page. And then you can see what it looks like on there, the faq.md in this project, but it's nice, it's got frequently asked questions at the top, it's got links to all the questions, and then and then you know, you go down, and you can see what the answer is. Yeah,

00:02:25 even like a table of contents with the hash, you know, the hash in our page navigation within GitHub, which is interesting, right?

00:02:33 Yeah, it is interesting. And links to each question. So if you wanted to, like email, somebody a link to it, you can link to the question, which is nice. There's some funny ones in there as examples, just correct me up, I gotta bring them up. Like, in fact, most frequently asked questions have never, and perhaps will never be asked. And then a, quote, 89% of statistics are made up on the spot. These are, these are pretty funny. But it's kind of cool. And that's not all it so you do it, this would be enough. Actually, if it just generated this FAQ page, it might be worthwhile taking a look at but it also has templates. So it builds like a template so that you can have like a dot efic. In the dot FAQ, there's templates and you can tweak these to have a different, you know, it's a different look to them. If you want, you can add some more code. Nice. And then. And then there's the suggestion which we got to talk about these suggestions because it has a template for what to do on a suggestion. And why this is important is it comes with this, this hook that you can put into into GitHub actions. So there's a there's a built in thing with actions that you can suggest something if so if you suggest a question that tries to figure out what the question might be using some, like fuzzy, what does it say, fuzzy matching or something, which is kind of a neat idea. And then there's an example right in there. Let's see work GitHub workflows. You can look at the new issues, and it's calling this factory. So if somebody asks files an issue, that's really just a question, and it figures out that there's something it can answer with, it'll answer for you. So if you get if you have, you know, I don't have any projects that have that many issues, but I'm sure will does. And some people do have like these huge projects and having a little thing that goes, Hey, this question is already in the FAQ or something similar. Just go look there. Or here's the answer. Maybe. That's pretty cool. I haven't tried this, but looks like fun.

00:04:42 I think that's actually excellent. Even from my limited small number of small projects, I still get things like, Have you considered this or why is it different than that? It seems like it's the same. It's not the same. It's similar. It's not the same. Here's the huge long discussion on the issue that somebody filed. That's clear. goes, because we're not resolving it. And we don't leave it. It's an open issue. But you go look in the closed issues, and you'll see that discussion, then you can participate there, right? We thought kind of just point them in the right direction. Yeah, that's really cool. I think there's a lot of stuff like this. I actually talked with Ned Batchelder. Last week, seven days ago, it says on an episode that's coming out on talk Python called tools for readme, creation and maintenance. Oh, yeah. As well as FAQs and change logs and those sorts of things. Remember, I did a shout out for give me all the tools for a READMEs on here. And so this is the episode we ended up doing. Because like three of the tools out of the eight or nine, we covered were written by Ned like, we should just, I should just have Ned on the show, because it seems like he's a major topic here. Nice. Anyway, there's a lot of other tools that do that. But what I think is relevant here is this automation. And this suggest feature this is what makes it really stand out as being different.

00:05:54 Yeah. So I'm gonna even on some of my small projects, I'm gonna go ahead and turn it on, and then probably issue questions myself and play with it and see, see how it works.

00:06:03 Yeah, that'd be awesome. Yeah. Cool. Yeah. Steven audience is what's the answer to what's the difference between a duck? I must know what? FAQ. Steve, will help you out there. Yeah. All right. Shall we go off to the next one? Yes. All right. So way back. And let's see. Bytes. You'll have a we have a pretty cool search engine here. Search for Hagi. Live with it way back here. We had when we had you know, who's got on the show. I talked about this catchy thing. Yeah. It was it like a paid search thing? Yeah, it is. That was suggested by Daniel. And I said, you know, like all, I'll give this a try. And I'll give you all report that was in June. Well, it's December now. So maybe not just one month, which was my idea, when I finally got around to writing up a report on Kogi, and you know, TLDR, I'm still using it, I still really like it. So for those of you who don't have six months, perfect memory of the extras, don't don't doubt that it's, you know, faded. Kagi is a paid search engine that is super privacy respecting and very customizable. So instead of being the product, you can pay for a product, which is search, which is pretty rare, actually. Right? There's not many others that do that. So what I did is I went through and did a little write up here. And it's really kind of the what are my thoughts? And is why did I go through this whole process, but I entitled it pain for search and 2020 2am I crazy, which now we'll see. So some of the highlights of the things I'm really enjoying it, I laid out some of the reasons I think it matters, like surveillance, capitalism is net net bad for society. That is you being the product by being tracked. And having all of that information tracked across different sources grouped together and resold through data brokers, not good most search engines, that's their business. Right? Which is not great, right? And also, if you support small companies, we all win, right? Even if you don't use it, people are supporting small companies who have many choices. There's just, there's just more choice, right? And we don't nobody wants a world where there's like one giant or two giant tech companies that make all the decisions in search happens to kind of live in that intersection of all of these things, right. So when you go to do search, you know, you're kind of supporting some giant tech company, but at the same time, you're also being tracked and resold. And it's just, I classified it as like, some things are on the neutral good side, like DuckDuckGo like they're mostly good. But there's also that sneaky behind thing scenes things with like, like, only Microsoft can track our users. No one else can. We want to talk about it linked to that others fully on the dark side, right? So I've linked to an article about how to retarget your customers. So just some of the highlights here for Akagi as it's totally privacy perspective, respecting because you pay for it, right, there's no ads, which don't lead to these perverse incentives, or these counter incentives. And one of the things I really like is you can block websites like I just unblocked all the things that I had previously blocked and I did a search for HTML for div tag event. What was the first result? W three schools do you ever run across W three schools do you like yes,

00:09:18 no. There's a few there's a few of these that are just they just turn out questions and they're just like

00:09:24 this just stop Can I just never like how are they so good at SS SEO and so bad at answers right? And so for those things, you could there's like a little globey looking icon looking thing next to this and you can press it and just say block I will never ever see that the three schools now some people may have extensions. There's like a W three school blocker extension you can get for Chrome and other browsers. But I also really don't want to install like any more extensions into my browser than necessary. There's plenty of examples of like, oh, this extension became unmaintained and so some money bought it and put some, you know tracking into it. So not only your searches track, everything you do ever is like now, right? Like, I just don't want to install those things. It's just not worth it. But here you can just say block these four or five domains, or just lower them if you kinda want them to sort. Yeah. Oh, you you muted. How did I mute sorry? Check this Outbrain. If you do a search for CNN, see how this globe turns reddish orange? Just in the search results? This is on Cagney right, on the right next to it, you know, like, wait a minute, why is it red? If you go over to it, it has a big red water there. You can click it, it'll give you more information. It has a big red warning. There's 43 trackers detected on this page. So if you click on it, you're getting 43 trackers put on you. It's like junk, like that pool is full of leeches don't go in it. You gotta go in it. Morning. And it even gives you the categorization of it has fingerprinting advertising as Google as a tracking category and email magnets and cool. Yeah, I mean, cool. It tells you not cool that it is.

00:10:55 Yeah. But then the just to be fair, things like Vivaldi and stuff can block most of that stuff.

00:11:00 Yes, exactly. And so if you want to block it, you can write it certainly you should be blocked blocking it, I think. But anyway, it's also nice that the search engine is kind of like Got Your Back in that regard. Like, you know, your Yeah, this category of the site. Yeah.

00:11:15 So are the results. Good, though?

00:11:16 That is a super important question. Because if they're not, then it's all this doesn't matter. Right. Right. I would say they're pretty close to Google, I'm pretty sure that the cost, which is $10 a month, I think the cost mostly because that's that can't be compute. There's just no way that cost that much. I think the results are there. I'm pretty sure they're buying search as a service from Google and Bing. Okay. They haven't been able to verify it. But there's, they talk about enhancing their search results with open source and other results. So it's like, we've got those the results. Plus, you know what I mean? Yeah. And so as far as I can tell, they're pretty it's quite similar to Google actually, I think,

00:11:57 features the block be able to block sites you don't ever want to see. So that's cool.

00:12:01 Exactly. Yeah. So here's the follow up to live with it. kaegi. I give it a solid thumbs up. The only really the only downside is that it costs money. Are you interested in paying another subscription? Another $10 a month for something for me, it makes me happy. I search for stuff just constantly, all day. And every time I'm like, yep, still not being tracked. Feels pretty good. And so for me, it's worth it. People can can decide. All right,

00:12:25 well, I'm gonna say, this is a random comment from Vincent. is I don't know how I, I don't know how to read this. Once again, I'm rocking my baby to sleep. And once again, y'all voices aid me and doing so. So we're so boring. You're putting your kid asleep? I'm not sure what. No, yeah, I'm not sure.

00:12:45 That's awesome. Hey, Vincent, great to have you here. As somebody who had one of those baby carriers. When I had twins, I would hook them both on me and I would sit there and like work on my keyboard because like in the middle of the night, because they would sleep if they were stuck to me, but not if I was like trying to lay them down. Oh, god. No. So

00:13:01 hopefully, we're just really, I feel Yeah. Oh, a newborn. He has a newborn. So they're not listening anyway, they're just our voices. So for

00:13:09 where are they? And are they going to grow up to know Python? By the time they're five?

00:13:13 Yeah. Yeah. And know how to properly protect themselves against search engines.

00:13:20 That's right. That's right. All right, Brian, before we move on, let me tell folks about our sponsor, Microsoft for startups. You know, Microsoft startups has been a great supporter of the show. And it's really good to have them on board. And sure that we can keep this going strong. You know what they don't have in this ad, by the way, brain retargeting. We don't have any retargeting for you. So sorry about that. But you do have some really great offers, if you go visit it. Or if you start a business, obviously, it's hard to get started. Lot 90% or more businesses go out of business within the first year. And so Microsoft for startups, to understand what are some of the challenges? And what are some of the assets that they can bring to bear to help that so Microsoft for startups, founders hub was created. And it has a bunch of free resources, or once you accepted into the program, a lot of included resources that are just given to you. And they come in two categories. They come in bunch of Cloud Credits, so you can run your infrastructure and code for no money out, probably for free for a couple of years. And they also come in the form of mentorship and connections and information. So you get a bunch of free great GitHub credits, you get a bunch of Microsoft Cloud Credits, you get many from open AI, global leader in AI research and development as well. And it's also not just about who you know, like it is so often for companies out there on their own, you get access to their mentorship network and giving you access to a pool of hundreds of mentors across a range of disciplines like idea validation, fundraising, management, coaching, sales and marketing. That's definitely an important one, as well as a bunch of specific technical aspects. So you can even book a one on one meeting with these mentors when In whom our founders themselves. So make your idea a reality today with a critical support you'll get from Microsoft for startups founders hub, is it Python bytes.fm/bounders. Hub when he 22. The link is in your show notes. Thank you, Microsoft for supporting the show. Thanks a lot. Well, is it time to rewrite some code? Brian?

00:15:18 Yeah, we, this was fun. So I ran across an article called tools for rewriting Python code by Luke plant. And it's also like, by the way, it's kind of a gorgeous blog formatting looks like a book almost. But beside the point, we've covered a lot of these things, these tools on the podcast, things like black, and I saw it and linters and things like that. But it's kind of fun to see them a whole bunch of things listed together. So what by rewriting, we mean, like, hopefully, tools that change your code, but hopefully for the better. So we've got things like formatting, formatting, and style guides, like black. And another popular one is that I don't know if we've covered is ya pF, for yet another Python formatter, I think. And it's, it's similar ethos to black, but it's more customizable. So black, you can't, there's only a few options. But YPF is often used by companies that have their own style guide to be able to customize it, see it, but it's a little more tweaky. So you have to kind of get in there and set it up so that it follows your style guide. So there's that there's Otto PEP eight eisert, which I really like which reorders Python imports. And so there's things like this table format, I have to play with this makes it easy to align columns in your Python source code, I kind of want to try this out. Because it's, that's something I don't like about black and other format, or sometimes they muck up my tables. But anyway, there's upgrade things like by upgrade in Flint, you've mentioned Flint a couple times.

00:16:58 I'm a big fan of Flint. I've run it on either on baits website code on top Python on the chain site, and it's, it's great. Yeah,

00:17:06 actually, I just got a pull request on one of my projects. And I'm pretty sure they just ran Flint over there just going through and finding some projects and do a run in Flint and then doing PRs against them. And it was slightly kind of annoyed by that. But also like, I didn't have to do it. So yeah, thanks. So I grabbed it. Type hints, which I didn't know about this stuff. So I've kind of have to look at this. So things like pi annotate and monkey type to add, and there's a few others to add type hints to your

00:17:37 this is super interesting. Adding type hints based on an instrumented test suite runs so instrumented mean, it watches what functions get called and it says, Hey, this parameter was always a string. This one was always a user object. So here's your type parameter colon string colon user. That's awesome.

00:17:53 Yeah. Have you ever? And then I guess I need to do this. Try it. Yeah, so I'm gonna try these. There's a few of them. So anyway, interesting. Some refactoring stuff is, uh, that it mostly talks about how a lot of these refactoring tools are built into IDs and often say when I'm, I usually use an IDE assisted thing like pilot answer, I write to, to do some refactoring, but actually don't use them as much as I probably should usually do manual refactorings but anyway, and then some standalone ones, like rope and Jedi, and then and then the other category includes things like shed which which I still have yet to try out a new try that that combines a whole bunch of the tools but the part that one of the parts that I was really excited about is I didn't know about lib CST so talks about this article talks about writing your own there's a project called lib lib CST that apparently, you can use to write your own. You does a syntax tree thing and and you can hopefully write your own reformat or so that might be fun. Okay. And one of the recommendations is the the documentation is a little overwhelming for lib CSD. So maybe use GitHub, or libraries.io to find other projects that are using it and then see how they're using it. And I love that way to understand how to use something

00:19:23 Yeah, no, I I need pretty much what this does, but I want to change these two things. Let me copy that and go

00:19:28 Yeah, I guess that'd be another way to do is like fork black, like the people that forked black and made blue which gotta love blue wasn't listed here. But, uh, one of the things I wanted to bring up while we're out here is there's what there's upgrades like pi upgrade and Flint. There was one of them that does set up PI upgrade which upgrades setup.pi to set up that CFG I'd really like someone to figure out how to take all of your setup stuff and create either pipe project, Tom oh five.

00:20:01 Yes. That'd be yes. That would be excellent. Anyway, cool stuff set up, set up pipe. Tom alert something. Yeah, that'd be cool. Not pie. Okay, cool. Yeah, this looks really, it's a really nice taxonomy of ways to clean up your code and prove your code, modernize your code. Okay, cool. All right, let's go talk some web for a minute. cero, who I know listen to the show, because sometimes drops into the live chat and gives some advice or feedback created this thing called socket to phi.pi. So socket, FYI, I suppose the name is inspired by trying to do web sockets really well, but it's a little more general web framework and server as far as I can tell. So the tagline or whatever is bringing WebSockets it should P S, high performance servers for pi pi three, that's the JIT version of Python, Python three, as well as C Python. So the website save wars. So it's pretty interesting. It's if you look through here, you'll see, I guess, some of the features that has WebSocket support with Pub Sub fast HTTPS, I think that's probably the biggest thing that people care about, it runs on all the versions. So you know, think kind of micro whiskey, or UV corn or something like that with a little bit of flask type of stuff on top of it. Okay. It has URL routing, sync and async function. So it's kind of a mix of like a web server that is also a web framework. Fast TLS. What else we got here, this one's interesting for the async story is max backpressure Max payload. And timeouts. One of the problems that can happen if you have async code is your async code will just accept the request and it'll forward it on through an await to some database call or wait some microservice, other API call. And it could just way pile up on your server and then like slam the database, and you might say like, we only want to have, you know, 20 database queries in flight at a time, right. So you can limit how much pressure the web servers putting onto the database and kind of slow it down and say, instead of accepting more requests, or doing more of this work, just queue up the response like a non async web server would do. It has async support as gi Web Server support, with extensions for Falcon, which is one of the web frameworks as well as whiskey Ws, gi one and some new features coming. But the real selling point, the reason people might care to check this out is the performance. So Falcon is pretty fast. Unicorn is pretty fast. But if you look at socket fi, I talked to siru in there using the tech Empower benchmarks. I'll pull those up in a second vector Osvaldo. Now. So over here on Macedon says, follow up, we break a new record for Python. No other web frameworks able to reach 6.2 million requests per second in the tech Empower benchmarks, as puts Python in the same ballpark as going rust and C++. We pull this up, what do we get? We get waiting. Ironic, isn't it? Wait. But look at this, you've got socket fi at 6.2 million requests per second on the Tekken power benchmark. And then five orange of Bronto. And what's really interesting is like down here at 10, we have 360,000 for you via corn, but follow me down here, there's a couple of interesting ones pyramid, go pyramid, I love pyramid by them by stock, Python or pyramid, the moment at a quarter million, we make our way down, down, down, down, down, down, down, down async flask is that 57,000 Straight flask is at 8000. And let's see we've got tornado at 40,000. Here's another 150 1000. For tornado turbo gears at 70. Another one at 90. There's some variations on like, some of the internal like is at pi pi versus C Python versus whatever. There's a bunch of variations in here. But there's a some surprises there. Hmm. Yeah. So here's the trade off, you gotta make you got to decide right? Like this, this framework is cool. It's quite new with 230,000 stars, but it looks also quite promising. So you for most people, you might not need something like this. It's kind of a low level, lower level programming. And say, your standard flask, right. And it doesn't have as many extensions, but it also it has some, I mean, if you get that kind of performance, and you need it, right, here's a pretty cool option you could try out so anyway, I I encourage people to have a look at it. It looks pretty interesting. It's also quite new, last commit six, six days ago. So that's, that's encouraging. Right? Yeah. And

00:24:42 also one of the things I like about projects like this, the you know, are assuming they're doing something different to make things faster than you know, let's think outside the box to do something a little bit different than everybody else is doing. Other people pay attention. So the people that are there, you know, these other frameworks So paying attention to what's going on here and, and everybody learns from each other. So having a speed up in one area, maybe maybe we can have somebody that take this and and make the interface as easy to work with as like fast API or flask or something. And absolutely, and or get some of the learnings from here and build those into the other frameworks as well. So yeah, maybe not for everything you're doing. But if if you have like some project, that's that's some part or some part of your project that needs to be super high speed. It's a good thing to take a look at.

00:25:35 Yeah, absolutely. I agree. So put it in the interesting category. And congrats, hero. Some pretty high in performance there. Yeah. Nice. Well, I think that's it for all of our items, isn't it? Our main ones?

00:25:47 Yeah.

00:25:49 Yeah. Oh, man.

00:25:51 Yeah, so it's, um, I was, I was actually going to cover this, but I think it's a little early. So it's a project called mouse Bender, from Brett cannon. And the ideas, I think, is around producing and consuming. It says producing consumed dependency lock files for Python. And there's some goals for the project about this project, it hopes to eventually provide a way to create reproducible instant installations for virtual in a virtual environment from a lock file. And so there's a lot of stuff going on here. But it's a little early in the project. So I'm, I just want to point this out. And I, if people really care about packaging, maybe watch this, I'm going to be what I care about it. So I'm going to be watching this project and see if there's anywhere where I can contribute possibly. Anyway, mouse bender. looks interesting. I don't think it's ready to use for anything yet. But But yeah, that sounds it looks a little interesting.

00:26:49 Yeah, that's nice work, Brett.

00:26:51 Um, I think I got this from Brett too. But I can't remember. There's a there's there's a page called at Dev guide.python.org versions, we've got status of Python versions and a graphic for all the release cycles. That's so

00:27:08 cool. And we'll need to see this graphic. This is cool. Yeah. And

00:27:11 it's neat, because it shows you all the old end of life ones, and how long they've been, you know, end of life for 2.6 was back in 2013. So what are you guys doing if there's

00:27:25 like a skull and crossbones on the T cell phone or something.

00:27:29 But so you've got a whole bunch of end of life, you got some in the security zone, which means if there's security fixes, they'll add those. And then, but then they get like, you only got like six months left of three, seven. So if you're still using three, seven, it might be a good time to upgrade, but shows all the you know, the only one that with feature is 312 right now, because that's one that's being worked on. And it's kind of a neat visual, this page is pretty simple, too. And at the bottom, you've got more specifics of when things are end of life, but at the bottom a description of what all these means. So what does feature versus end of life mean things? Good thing date?

00:28:09 Yeah, that's cool. I switched our website run through 11, by the way, nice. Yeah, like a week ago, and it's still running. So that's good.

00:28:16 Yeah, I switched some of our test code at work to flip to 311. And, and one of my team members says, I wonder if we're ready. And I'm like, oh, yeah, we've already switched. So

00:28:29 we've had a fee. It's been doing it for a while. So

00:28:33 give me extras,

00:28:34 of course. So I thought this would be the only thing that I would refer back to my website for but then that right up I did on kaegi, I'm going to try to do a video version of that Kagyu, live with that thing. But I ended up realizing that that was going to take way more time than I have this week. So I just wrote it up. But another one I wrote up, people can just check this out as sometimes you should build it yourself. Embracing you're not, you're not built here, maybe we should just build it. I know we could buy it. Let's build it. So we're just talking about some of the things I did a talk Python as well as Python bytes. And like how sometimes you sort of get into this cascade of things where new possibilities arise, right so for example, one of the parts that says integrations abound. So for our live stream, right we have our live stream here on YouTube at the moment and that becomes the podcast says because the way we put all this stuff together is not only do we do our live stream but I push a button on the stream deck that announced this on Twitter and else that I'm asinine I'm acid on puts the website into live stream mode but then that platform will pay them bytes will take the the YouTube live stream grab it's carefully crafted thumbnail pull that down to actually become the social share image. So if somebody shares the episode on Mastodon or Twitter all the way back to the thing we did with a live stream is actually already producing the, the image and so it just talks about like notes sometimes, because I always have had this tendency like don't build it yourself, find something that works fine, something's out there. And you have to break down and build yourself. And like, you know what, there's actually some really cool stuff that we've been able to accomplish, because we built it ourselves. So here's a kind of a, an essay on that, I would say, Nice. So people can check that out. Also, back to the live with it side of things. I'm, I'm trying to support smaller companies and be less just integrated into like one big tech giant. So for my personal email, I've got a domain. And Kennedy got tech. So what I went with, which redirects to my other one for my blog, but then that was hosted on Gmail on like a paid $6 a month, email, Docs, whatever. And I just got really tired of trying to juggle two Gmail accounts to Google Drive accounts to Google calendars, all you know, all these things. I'm like, why am I doing this? Why don't I get a dedicated cool place? That is like even a little more on the privacy side as well. So I'm trying to try and go all in on proton? Do you have a proton account do use this, it don't? Well, for a long time, it was just email and like, you could have like a proton.me, or a proton.com, or whatever. But I realized recently that they have other features, where if you pay $7 a month, you get access to all of their things like their calendar, and drive and VPN. But that didn't matter to me. But you get three custom domains and 15 email addresses plus catch all email addresses and hide my email aliases. So I can have all of my different domains all have email addresses, and that all basically resolve back to my personal email. Hmm, cool. Isn't that cool? And so I was at Google, and I just changed the MX records. And now I'm at proton. And if I like it, I'll stay here. If not, I'll change my MX records again, and I'll be somewhere else but you know, kind of tried to take control of the email. So it's my thing, not something@gmail.com No matter what you think about it, right? Yeah. Anyway, people can check that out. I just wanted to mostly point out, put it on looks like it has more to offer than it used to. And how about like

00:32:04 support? Can you just use your I mean to like, use your normal email client to access all this stuff.

00:32:11 So proton is like end to end encryption, which is a little tricky, but they have what is it? It's called proton bridge. So let's go to the mail thing. So this is it. So what you can do is you can run this thing on Mac or Windows or Linux. And it's like a little you connect to basically localhost for your email client or your email server, and it talks to proton with the end to end encryption, and then it just does IMAP. And the last few days, I don't know, it's not even not even the last step of the network, right? It's just it's a loopback. And so yes, you can connect your your usual things to with that. Okay. All right. Another quick one, there was a court in Germany that stay on the kind of same theme that decided that Google Fonts usage of Google Fonts, if you look at a lot of web pages, they'll internally have slash slash fonts, google.com, some, like open, whatever, write some, some font name, and like the weights of it that exchanges a bunch of cookies and tells Google about the visitors. Yay. And of course it does, because even the YouTube thumbnail picture does, why wouldn't it? So? Bunny bunny.net, which is the awesome CDN that we were I talked about a couple times ago, a couple episodes ago, they released this thing called bunny fonts. So bunny font is epic. They've been talking about like this, this court ruling and GDPR stuff. But the idea is it's a bunny fonts is a drop in placement for Google. Google Fonts. For Google Fonts. Yeah. So whatever URL you would put into your website to get the fonts from Google, you just change the word Google to bunny. Wow,

00:33:50 that's really a drop in.

00:33:51 Yeah. And it's the same API as yours. You change the word and you get like super fast CD and backed zero privacy, leaking fonts. So you just it's super easy to adopt. Right? It's pretty cool. So

00:34:04 not zero privacy hyper. Yeah, hyper

00:34:07 zero privacy elite. Yeah, zero privacy, RAID offset, or whatever it was there. Here we go. Here's their fonts. But anyway, that's cool. And that cool. Yeah. So

00:34:19 funny. I mean, you

00:34:20 don't even have to have an account. And as a cute bunny, I mean, their bunny, their iconography is really, really good. So there's a place where you go pick the font. So you come over here and say, I'm interested in Houma or whatever, you don't even know a font. Let's see you interested in this one. And you can just like say, I want to add it, and it gives you like the little the little euro, which is just fahnestock bunny instead of instead of the Google one. So yeah, it's pretty cool. Anyway, that's all I got for my extras.

00:34:47 Well, that's great. Yeah, good stuff.

00:34:50 All right. I have a joke for you. Oh, let's do a joke. Yeah, you ready? Yeah. You've heard of shad? GPT. I'm sure I'm trying to learn about it. I know I I logged out so I could specifically show the homepage, I gotta get back anyway chats up. I'm trying to not hear about it as well. My brother actually shared this with me, him and his son, my nephew, were playing with it doing some coding stuff. Somehow they ran across this example. So this is a tweet from someone else that he shared with me, Riley, the tweet is not my brother says open AI is new chat. GPT explains the worst case timing complexity of the bubble sort algorithm. Okay, so what you can do is you can say, give me a step by step analysis of the worst case time complexity of the bubble sort algorithm with Python code examples, right? So that that's not a joke, right? That's helpful. It could tell you, here's the situation. And it could like show you with Python code examples. But the next part makes it awesome. Give me the explanation with Python code examples. But right every sentence in the speaking style of a fast talking wise guy from the 1940s gigs 1940s gangster movie.

00:35:58 This is getting ready. Yeah. Okay. All right, Powell. Listen up the bubble sort algorithm. She's a real simple one. But the worst case time complexity, that's a whole different story. You see, the worst case, every element in the list gotta be swapped. So the time complexity is going to be proportional to the square the LinkedIn, let's get it. Here's the five I'm going to help you out. See, if you follow up with comments either way. See, in the worst case, the while loop is going to keep looping until the eighth no more. So obviously, you need in a loop. It's gonna go through every element in the list. So the time complexity is going to be proportional to square the list. Get it? What do you think?

00:36:34 This is good. It's pretty fun, right? Yeah.

00:36:36 So Alright, anyway. Oh,

00:36:38 I don't know. Open the chat

00:36:40 up stuff is it's interesting. It's kind of scary, but it's it's also funny,

00:36:44 but does it does the algorithm work on I haven't read it but I think so. It looks like the right kind of looks first glance it looks right. But

00:36:54 I didn't know I could always go and copy the code and try to run it. What do you think

00:37:03 the intent the intent is

00:37:04 off. That's yeah, I'll you know, I'll run it and report report for next time. See if the the wiseguys code is actually any good.

00:37:12 Yeah. I'm always up for volunteering you for work.

00:37:18 Nice. Yeah. Anyway, thanks. Yeah, that was funny. Yeah, it was alright. See you later. Bye.

