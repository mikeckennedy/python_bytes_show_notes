00:00:00 Hello and welcome to Python Bytes, where we deliver Python news directly to your earbuds.

00:00:04 This is episode 90, recorded August 2nd, 2018.

00:00:08 I'm Michael Kennedy.

00:00:09 And I'm Brian Okken.

00:00:10 Hey, Brian.

00:00:10 Good to be with you again.

00:00:11 It's good to talk to you again.

00:00:12 Yeah.

00:00:13 And it's also good to have DigitalOcean sponsoring this episode.

00:00:16 So thank you to DigitalOcean.

00:00:18 We're both customers and their sponsors of ours.

00:00:21 So it's kind of this weird mix of everybody loving it.

00:00:24 So pythonbytes.fm/DigitalOcean will get you $100 credit for your servers.

00:00:29 If you're a new customer.

00:00:30 So check that out.

00:00:31 In the meantime, we should probably talk about some data analysis.

00:00:34 We should.

00:00:35 And who better to talk about data analysis than Jake Vanderplass?

00:00:39 I honestly don't know.

00:00:40 He does awesome work over there at the eScience Institute.

00:00:43 And I love listening to his talks.

00:00:45 So there's a set of videos that he has on.

00:00:49 This is actually from last year, but I didn't count.

00:00:52 There's 11 videos and it's called Reproducible Data Analysis in Jupyter.

00:00:57 But they're, I mean, each of the videos is like five or six minutes.

00:01:00 So they go pretty fast.

00:01:02 This is a really cool thing.

00:01:03 I think everybody should check these out anyway is because they're, he goes through a problem

00:01:08 of, or just a data set that's, that the bikes cross, the bike crossings at a particular

00:01:14 bridge in Seattle, I think.

00:01:17 But it really doesn't matter the data, how the data gets in there.

00:01:20 But he's using, doing all this stuff live.

00:01:23 He's doing a Jupyter notebook and pulling data in.

00:01:27 And sometimes the tables like the table that he ends up with doesn't look quite right.

00:01:32 So he uses a different, different column to, as the index or the, for instance, I'm one

00:01:38 of the, in the first video, he puts a graph up and all the data is sort of packed together.

00:01:43 So he changes the sample rate into just weekly data.

00:01:47 And all that stuff, I didn't even know you could do those things.

00:01:50 So it's not necessarily a complete, it's kind of a full pass through all of, using all the

00:01:57 tools you can use to do exploratory data analysis with, Jupyter and doing it live and watching

00:02:04 a pro do it.

00:02:04 It's a thing of beauty.

00:02:06 And he's, like I said, each particular tool that he use, uses, it's not an in-depth

00:02:11 study on exactly how to use that to its completeness, but you just get a glimpse at all the

00:02:16 power that you can do with all these things.

00:02:18 Yeah.

00:02:18 I really like it.

00:02:19 And I think this sort of view into exploring data is super interesting.

00:02:22 It really shows the power of Jupyter Notebooks.

00:02:25 Like when I first saw them, I thought, oh, well, there's like a simplified programming environment

00:02:28 for people that aren't like real programmers and don't want to work with different files

00:02:32 and stuff like that.

00:02:33 But the more I saw people using it and interacted with it, I realized it's just for people solving

00:02:38 problems entirely differently than the type of problems I solve.

00:02:41 And it's really great for that.

00:02:43 Yeah.

00:02:43 And, and, working with data, when you're throwing up a graph or, or a plot of the data,

00:02:50 sometimes you might be plotting it wrong.

00:02:53 You're like, well, maybe I could see something if I plot it this way.

00:02:56 And the, it's not interesting.

00:02:58 It's just a bunch of points everywhere.

00:02:59 But if you plot it a little different with a different axis, maybe, or, or a different

00:03:04 type of plot, it might show you interesting information.

00:03:07 And this is actually fascinating to me, this, this notion of people using large data sets

00:03:13 and then trying to figure out like in real time how to use it well.

00:03:18 And then once you've, once you've already figured that out, if you want to put some program together

00:03:22 using some of those tools to monitor those things, that's a great idea.

00:03:26 But that, the ability to just use a notebook to, to just explore stuff is pretty fascinating.

00:03:32 Yeah.

00:03:32 And, you know, there's some really interesting use cases.

00:03:34 Like suppose you want to go hit a bunch of APIs and download some data and then graph it.

00:03:39 If you did that in like a script, every time you want to view it slightly differently, you're

00:03:44 rerunning that down.

00:03:45 You're getting or computing the data, however you do that.

00:03:47 Right.

00:03:48 Whereas in notebooks, you can just rerun one cell at a time, change that cell, run it again,

00:03:52 and you don't have to recompute or reacquire the data.

00:03:54 So it's really, there's a lot of interesting aspects to it.

00:03:57 Yeah.

00:03:57 And when, well, that's another thing he starts out with showing how to, within the notebook,

00:04:01 grab a URL of data and, put it in a CSV file or some local file.

00:04:07 So you don't have to, so you don't have to do that network all the time.

00:04:10 Yeah.

00:04:10 Nice.

00:04:11 But anyway.

00:04:12 Yeah, that's a good one.

00:04:12 I really liked the series and I'm glad you, you, you brought it up.

00:04:15 Another thing I want to bring up was something we haven't covered very much.

00:04:19 Have we talked about GUIs and Python yet?

00:04:21 You know, I think you're important.

00:04:22 We probably should start talking about it.

00:04:24 Yes.

00:04:24 So because we were on our kick, of course, people said, you know, said, Oh, have you heard about

00:04:31 this?

00:04:31 Have you tried that?

00:04:32 And here's another, here's another one.

00:04:34 This one comes from Mike Barnett.

00:04:35 he sent me a couple emails, sort of charting the progress of this project that he

00:04:40 built.

00:04:41 the name pretty much says it all.

00:04:42 Py simple GUI.

00:04:44 So it's for simple Python GUIs.

00:04:47 And it's just another really simple way to take what would have been like a command line

00:04:51 program and make it a lot better.

00:04:54 So, you know, bonus points to Mike, because this not only has a screenshot, this has many

00:05:00 screenshots and many examples.

00:05:02 So as all the Python GUI libraries out there should have, if you want people to use them

00:05:08 screenshots.

00:05:09 So check it out.

00:05:10 It's pretty cool.

00:05:11 What you do is you work more or less in a hundred percent Python language API, and you

00:05:17 don't work down at the GUI toolkit layer, which is cool.

00:05:21 I think.

00:05:21 So you define the UI and it has this sort of auto layout mechanism and it has things like

00:05:26 slide bars and text boxes and buttons and it works in all the things.

00:05:30 So that's pretty nice.

00:05:31 It works on like a, it says one of the examples is, do you have a raspberry pie with a touchscreen?

00:05:36 Well, you know, why don't you just write this one screen full of GUI code and you've got

00:05:42 your touchscreen GUI working.

00:05:43 Isn't that cool?

00:05:45 How neat.

00:05:46 Yeah.

00:05:46 So for better or worse, it's based on Tkinter, which is good because it comes with Python.

00:05:52 There's no dependencies.

00:05:53 So literally you just pip install py simple GUI, or if you want, there's a single Python

00:05:57 file you can include with your code.

00:05:59 So there's not even the, the pip install package stuff.

00:06:02 You can literally just go, here's the file, py simple GUI.py put next to my, my program.

00:06:08 And that's all it needs.

00:06:09 So that's cool.

00:06:10 But I honestly, I think Tkinter looks a little dated, right?

00:06:15 Like it looks like it belongs a little more in like war games than it does in 2018.

00:06:19 But anyway, it's still pretty nice as it is.

00:06:24 And one of the upcoming things that he lists on sort of the upcoming goals, or if anybody

00:06:30 wants to help out is port this to other graphics engines, because you don't work in the toolkit

00:06:35 API directly, but this is like a translation layer.

00:06:38 You could hook this up to say WX Python or Python for QT, QT for Python, things like that.

00:06:45 So you could get one of these modern looking UIs just by, if somebody's willing to do that

00:06:50 translation.

00:06:50 That's a neat idea.

00:06:51 I'd like to see people working on that.

00:06:53 Yeah.

00:06:53 Wouldn't that be sweet?

00:06:54 Then it could actually detect if you even have them and it wouldn't even, oh, do you have

00:06:57 WX?

00:06:58 Okay, great.

00:06:58 We'll go with that.

00:06:59 Oh, you have QT.

00:07:00 Let's just run that version.

00:07:01 Don't have to get a dependency installed.

00:07:03 That'd be best.

00:07:04 Yeah.

00:07:04 And yeah, you're right that the TK stuff looks dated, but there's a lot of use cases where

00:07:11 you can use a GUI that doesn't have to be pretty.

00:07:14 Yeah.

00:07:14 Well, you know what else can look dated is the command line to a lot of people.

00:07:17 So maybe this is a lot better interaction for non-technical people, even if it does have

00:07:23 a little bit funky shading on the buttons or something.

00:07:25 Yeah.

00:07:25 I mean, I don't get it, but I do have, I fight that battle every once in a while.

00:07:30 I'll tell people this, just run this command line thing.

00:07:32 What do you mean run the command line thing?

00:07:34 Oh dear.

00:07:35 They're like, I studied accounting.

00:07:36 I don't know where the terminal is on my Mac.

00:07:40 Okay.

00:07:41 Okay.

00:07:41 Then click this.

00:07:43 Yeah.

00:07:44 One other thing to call out for, I think that's interesting.

00:07:46 This is Python three only.

00:07:49 So no Python two for PySimple GUI.

00:07:52 And more and more, again, we're seeing things where it used to be, well, I can't switch to

00:07:57 Python three because this isn't supported.

00:07:58 Now it's like, if you don't switch to Python three, you don't get these cool libraries.

00:08:02 And here's just one more example.

00:08:03 Yeah.

00:08:03 Great.

00:08:07 Well, I, we've got a, got a team that is migrating to get.

00:08:12 And so this isn't directly Python related, but I ran across this article called useful tricks.

00:08:18 You might not know about get stash and get stashes.

00:08:22 The stash command is something that I actually did.

00:08:25 It took me a while to run across because it's not, it's not something you have to use, but a

00:08:31 stash is a way to sit to, so let's say you've got a, a, a repository where you've, you've

00:08:37 cloned it.

00:08:38 Now you've made some changes on it and you're not ready to do anything with your changes,

00:08:42 but you need to like maybe pull down a new version or you branched at the wrong point or

00:08:47 whatever.

00:08:48 stash is a way to save off all of your changes, all the dirty stuff in your directory, save

00:08:54 it away and just like hide it somewhere.

00:08:56 And then you can reapply those changes later after you, you know, update or pull or something.

00:09:01 And I'm still working through how to integrate stash into a good workflow, but I wanted to

00:09:08 highlight this article useful tricks, useful tricks.

00:09:11 You might not know about get stash because I'm, I'm learning it and, I wanted other people

00:09:16 to know about it also.

00:09:18 Yeah, that's cool.

00:09:18 One of the ideas that seems like it might be relevant here is suppose you've got some

00:09:23 branch checked out and you're doing some work, you know, like halfway through it.

00:09:26 And somebody comes along and says, Hey, I'm on the same branch as you and we have this bug.

00:09:30 Could you just like fix this really quick or make this quick change so that I can carry on?

00:09:35 And you're like, Oh, but this work I have here is like half done.

00:09:39 It won't be done until tomorrow.

00:09:40 So you could like stash that away, get the latest, do some work, push that in and then reapply

00:09:46 that stash to like get your work back without actually committing it and messing up that

00:09:51 whole branch.

00:09:51 Yeah, definitely.

00:09:52 And the, the, the, the use case and then the use case we often use is, like, like

00:09:58 the test team is working on different, different tests around.

00:10:01 but we're sharing in utility libraries and fixtures and stuff.

00:10:06 And, somebody updates, a crucial fixture or a utility communication utility.

00:10:12 And, so you want to use that, but you're, you're in the middle of writing your test or

00:10:17 writing, changing something new.

00:10:19 These aren't merge conflicts at all, but get doesn't let you like pull in the new stuff on

00:10:26 top of your old stuff.

00:10:27 I mean, you can do a merge, right?

00:10:28 But you still have to commit it to your local repo before you can do a pull, which you might

00:10:32 not want to do yet.

00:10:33 And if you're just starting out or whatever, you might not want to do that.

00:10:36 Or if you just want to look at stuff.

00:10:37 So that's the case where a lot of, we're playing with this workflow is to just stash

00:10:42 away your changes to a pull.

00:10:44 And again, people can correct me if I'm, if I'm using the term pull wrong, because I'm

00:10:49 still learning at the, the right times to do pulls and fetches and merges and all that

00:10:55 stuff.

00:10:55 So yeah, nice.

00:10:56 Yeah.

00:10:56 This is really cool.

00:10:57 Two things that you call it here that I thought were pretty cool.

00:11:00 Well, I guess three.

00:11:01 One is you can label your stashes.

00:11:02 So like, you know what they mean?

00:11:03 They're not just hashes.

00:11:05 So that's good.

00:11:06 Also, I didn't know you can do a dash you to include untracked files.

00:11:11 That's pretty cool.

00:11:12 That's pretty cool.

00:11:13 I didn't know that either before I read the article.

00:11:15 And the other one that the last one that I didn't, I totally didn't know you could do

00:11:19 is once you have your stash saved, you could say, well, I probably shouldn't have done it

00:11:26 as a stash.

00:11:26 I probably should have just put that on a branch.

00:11:28 There's a way to say, get stash branch and then a name, and then you can specify which stash.

00:11:35 And it just takes all those files that you've, all those changes and creates a branch.

00:11:40 That's cool.

00:11:42 Yeah.

00:11:42 I really like that one.

00:11:43 Like, oh, I stash it.

00:11:44 And actually, what I want to do is more work and sort of parallel, like break it off, split

00:11:48 off my work without committing it to sort of convert the stash to a branch.

00:11:51 That's cool.

00:11:52 Yeah.

00:11:52 Yeah.

00:11:52 Very nice.

00:11:53 I like it.

00:11:53 So let me tell you about this new thing that DigitalOcean has.

00:11:57 So they have virtual machines and floating IPs, and they have spaces and load balances and

00:12:03 all these sorts of things, even domains and DNSs.

00:12:06 And if you have a lot of stuff going on at DigitalOcean, well, you might have like 20 virtual

00:12:11 machines, and some of them are for some project.

00:12:13 Another one is for another project.

00:12:15 Like, how do you know which one is for which?

00:12:17 And is that one safe to delete?

00:12:19 I think we're done with it, but I'm not sure.

00:12:20 I actually don't really know what it belongs to.

00:12:22 So they came up with this new feature called Projects, where you can group droplets, load

00:12:27 balancers, domains, IP addresses, all that kind of stuff into one, two different projects.

00:12:32 So you can say, this one is, say, for the training site.

00:12:34 These three parts all fit together there.

00:12:36 This one is for the Python Bytes podcast.

00:12:38 And these two servers and spaces all fit together over there.

00:12:42 So pretty cool.

00:12:43 Check that out.

00:12:44 It's just one more way to make your hosting life easier.

00:12:47 Yeah.

00:12:48 And be sure to visit pythonbytes.fm/DigitalOcean.

00:12:51 If you're a new user, you get $100 credit.

00:12:53 So that makes it even nicer.

00:12:54 So one of the things I'd like to see, Brian, is more async stuff.

00:12:58 And I think the place where it's most beneficial is around the web, actually.

00:13:02 Well, yes.

00:13:03 Last week, I said, because we can have, like, a bunch of different worker processes, it's not really necessary.

00:13:08 Right?

00:13:09 You can get, like, if you've got an eight-core server, you could have, say, 16 little micro WSGI worker processes.

00:13:14 And each one can sort of computationally chew up its stuff, like one core, and it sort of gets shared by the OS.

00:13:21 But really, there's some limit where you don't want to create more because you run out of memory.

00:13:26 Right?

00:13:27 Like, I think the 16 on the training site probably take, like, two gigs of RAM.

00:13:33 So you can't have many of them, or you'll run out of RAM unless you have a lot of room there.

00:13:38 At some point, you maybe are waiting on a database call.

00:13:42 Right?

00:13:42 You do a request.

00:13:43 The request says, well, in order to process this request, I need to have, like, hit this database.

00:13:48 And actually, this is a query that takes 500 milliseconds to return.

00:13:51 That thread is really doing nothing but just waiting on a socket to return something from, say, Postgres or MongoDB.

00:13:58 And just as well could be doing other work if it could let go, but, you know, maybe it doesn't.

00:14:04 Right?

00:14:04 So if we can build this so that we could build it with async and await, any time our code is waiting, it immediately gives up its thread, and it will go on to do more processing.

00:14:14 And so, like, for example, this is one of the ways, this is basically the fundamental process concept of how, like, Node.js can do hundreds of thousands of requests on one server.

00:14:23 All right?

00:14:24 Concurrent.

00:14:24 Because most of those are waiting on a database or something else.

00:14:28 Right?

00:14:29 However, the problem is many of the Python, popular Python frameworks don't support this concept of async.

00:14:36 We have new frameworks, Sanic, Jepranto, others that do support it, but those are not the old frameworks.

00:14:44 Right?

00:14:44 So there's, like, these new ones that are exciting and fast, and there's the old ones that everybody knows how to work with and have deployed.

00:14:50 But bridging that gap is a challenge.

00:14:53 So Andrew Godwin, the guy who worked on Django channels, works on Django channels, he came up with a Django async roadmap.

00:15:01 And it's pretty interesting and pretty thorough.

00:15:04 And it talks about, like, the time frame and how they might make Django support this sort of world where you can have async methods.

00:15:13 Yeah, that's actually really cool because, I mean, if Django and Flask have to get there, or especially Django, or it's going to, something else will take over.

00:15:24 Right, exactly.

00:15:25 I mean, this is one of the times you hear people say, I'm switching to Go because it does better concurrency than Python.

00:15:29 Well, if Django and the other frameworks just had it baked in, like, that whole argument would largely go away.

00:15:37 So anyway, this is really cool, and I really like how he's put it together.

00:15:40 He said he thinks it's time, the time has come to start seriously talking about bringing async functionality to Django.

00:15:46 And he's shared it previously with some people internally, but this is him kind of coming out and saying, I'm opening it up for public feedback.

00:15:53 So he has some interesting goals.

00:15:56 He says, the goal is to make Django a world-class example of what async can enable for HTTP requests.

00:16:02 And that means various things at different parts of the stack.

00:16:06 So doing ORM requests in parallel, right, just waiting on the database.

00:16:10 Instead of waiting the 500 milliseconds, you just continue doing processing and then get back to it when the ORM responds.

00:16:16 Allowing views to query external APIs without blocking.

00:16:20 So, you know, we talked about the retry stuff.

00:16:22 If you're calling, like, a credit card or other sort of external API, right, then, you know, that would go away faster.

00:16:29 You could do, like, slow response, long polling, super easy.

00:16:34 It's like a sort of WebSocket stand-in.

00:16:35 All sorts of performance improvements.

00:16:38 So it's imperative that they keep Django backwards compatible.

00:16:41 And to make sure that when people come to the project, this is an option they can turn on, not something they have to learn.

00:16:49 So, like, part of the beauty of these frameworks is they've been really easy to get started with.

00:16:53 Let's not throw this at people at the very first thing they ever do.

00:16:56 Yeah.

00:16:57 Yeah.

00:16:57 There's a place for it and sometimes not a place for it.

00:17:02 Yeah, yeah, exactly.

00:17:02 All right.

00:17:04 So I said, why now?

00:17:05 Well, Django 2.1 will be the first release to support Python 3 and above and not the previous ones.

00:17:13 And Python 3.5 and above, this is where async and await the language syntax.

00:17:18 And, like, it truly has become properly supported.

00:17:20 So that's why I think now is the time to start working on this.

00:17:24 Yeah, and then sort of the timeline is broken out into different Django releases and which ones, what sort of goals might be for each one.

00:17:32 That's nice.

00:17:33 Yeah, it's pretty cool.

00:17:34 Like, it doesn't make any sense to parallelize the web methods necessarily without parallelizing, say, the data access.

00:17:39 So maybe start with the ORM, actually.

00:17:41 Things like that.

00:17:42 Yeah.

00:17:43 I love this.

00:17:43 I think that it's also good also talking about people.

00:17:47 Like, it's not just individual developers, but companies that have applications.

00:17:52 They might want to think about concurrency, but they don't necessarily – they don't need to do it right now, but they know that they're going to eventually do it to see this roadmap.

00:18:01 And maybe that will help people.

00:18:04 In the article also, it talks about funding.

00:18:07 So if a lot of companies are relying on this or looking forward to it in the future, maybe kicking in some dollars to help it go faster is a good thing.

00:18:16 Yeah.

00:18:16 It blows my mind how many huge companies are basically built on Python infrastructure.

00:18:22 But contribute zero to it.

00:18:23 Yeah.

00:18:23 And that's something that we're, as a society, and not just the Python community, but the web-using community, we've got to tackle that.

00:18:32 But part of this is, I guess, just also things like this to say, hey, this is where we're going.

00:18:37 And some of these problems need people focused on it, not just volunteer time.

00:18:42 So some direct money to hire somebody for six months or a year would be a good idea.

00:18:47 Yeah.

00:18:47 A lot can get done with just like a few months of focus time.

00:18:50 Yeah, definitely.

00:18:50 Yeah.

00:18:51 I mean, that's how the new PipeEye got launched.

00:18:53 So this is all the way up to, it looks like, a mostly async Django by Django 3.2.

00:19:00 Yeah, that's awesome.

00:19:00 That's a way – it's pretty conservative.

00:19:02 It's not too wild.

00:19:04 And I really think it's a well-thought-out plan.

00:19:06 So I'm happy to see Andrew put it out there.

00:19:08 Nice.

00:19:09 Yeah, nice.

00:19:09 So you got some music you're going to play for us?

00:19:13 We both actually end up processing a ton of audio files, don't we?

00:19:17 We do, and I usually don't do it in Python.

00:19:20 But this PyDub, plus what a great name, PyDub.

00:19:24 But it makes me think that maybe a little bit of audio processing within Python might make sense.

00:19:30 PyDub, the tagline is manipulate audio with a simple and easy high-level interface.

00:19:35 But it's really actually pretty cool with just a single line.

00:19:40 Like, for instance, from MP3, you can pull in an MP3 file into a variable.

00:19:46 And then once you've got it there, you can do things like use the bracket operators to get the first 10 seconds.

00:19:52 It's crazy.

00:19:53 You can use the slice on it, and you can use indexing operators.

00:19:56 It's crazy.

00:19:57 And then adding or subtracting integers changes the volume by that number of decibels.

00:20:03 The use of operators is pretty cool.

00:20:06 Plus, you know, so slicing and chopping, but you can do crossfade and repeat and fade.

00:20:12 And I'm not quite sure what the difference between crossfade and fade are.

00:20:15 But anyway, changing formats from, like, say, WAV to MP3 or something.

00:20:21 Adding meta tags.

00:20:22 That's pretty cool.

00:20:23 That's the one that got my attention.

00:20:25 I'm like, oh, oh.

00:20:26 This might help on some production stuff I'm doing.

00:20:30 Making sure of a specific bit rates or MP3 has a quality level.

00:20:35 You can pass all that stuff in for saving.

00:20:37 Anyway, it's just like a really, we'll include a code snippet of a few things you can do.

00:20:43 But it's pretty easy to maintain code once you've got it in place, I think.

00:20:46 Yeah, this looks really interesting.

00:20:47 If you do anything with audio, people should check this out.

00:20:50 I did talk about, like, this tradeoff and how Django solving its async problem within itself would be great.

00:20:58 But I still think there's room for exploration on the web in the Python world.

00:21:02 And so this next one is pretty much that.

00:21:04 It actually describes itself as an experimental framework.

00:21:07 But it's called Molten, a modern API framework.

00:21:10 Have you heard of this, Brian?

00:21:11 No.

00:21:11 So it's a minimal, fast web framework specifically for building APIs with Python.

00:21:19 So I don't even know if it has, like, a template language for HTML.

00:21:22 It's all about just building APIs.

00:21:25 But it looks pretty awesome, actually.

00:21:27 Yeah, and pretty terse and small.

00:21:30 Yeah, one of the things that I like that it does is it uses type annotations for a whole bunch of cool things.

00:21:38 So the other framework I saw do this was API star, but I don't think it quite used it as much.

00:21:44 So, for example, you can have an API function that has a name, which is a string, and an age, which is an integer.

00:21:52 And it will automatically pass that data over to you, as you call it, which is pretty awesome.

00:21:58 It also does request validation.

00:22:00 So you can create a class, which looks very much like a data annotation or looks like a data annotation class.

00:22:07 And you give it a decorator and say, this is a schema.

00:22:10 And what happens is if you say my API function takes this class as an argument.

00:22:16 So their example has a to-do class.

00:22:19 So if you say the input is colon to-do, right, you annotate it as a to-do.

00:22:25 Then it will actually parse all the things like the ID and the description and all the various pieces out of the input and verify that, you know, the ID is a string.

00:22:37 The ID is an integer.

00:22:38 The description is a string.

00:22:40 All that kind of stuff just by using type annotations.

00:22:44 That's pretty cool.

00:22:45 Yeah, yeah.

00:22:46 It's pretty sweet.

00:22:47 Here, I'll throw out the next one and see what you think about this.

00:22:50 They also support dependency injection for allowing you to pass, like, different data access layers and stuff like that.

00:22:58 So if you want to test it, you could pass in, like, a mocked-out data layer.

00:23:02 Whereas by default, you just sort of register at AppStartup and it'll create all the different pieces of infrastructure and pass them to the methods automatically.

00:23:10 Okay.

00:23:11 Some people like that.

00:23:12 Yeah, you know, I don't see that very often in the Python space.

00:23:14 I have mixed emotions.

00:23:15 Sometimes it's nice.

00:23:16 Sometimes it's not.

00:23:17 But anyway, it supports that.

00:23:18 You don't have to use it, right?

00:23:19 But I do think the validation and the schema and the auto-mapping of your sort of JSON documents to and from just strong classes with Python-based declarative requirements and stuff is really cool.

00:23:31 Yeah, I think the extra thing that they're adding, this idea of using annotations as a schema, it's pretty cool.

00:23:38 That's neat.

00:23:39 Yeah, I really like it, too.

00:23:40 And the other one that I looked at, sorry if I get this a little bit wrong, but there's some other framework that also used annotations that I thought was really cool.

00:23:47 But it used them in a way that Python itself didn't make a lot of sense of.

00:23:53 So, like, you could say, like, I'm getting an API key passed to me.

00:23:57 And you would say colon header to say this API key is coming out of the header.

00:24:02 But when you actually work with it, it's not actually a header.

00:24:05 It's a string.

00:24:05 It just came from the header.

00:24:07 And so things like PyTarm and stuff would freak and go, that doesn't have this method.

00:24:11 You're like, no, I know it's a string, even though I just actually said it's a header.

00:24:14 Like, this is cool because the thing you say it is actually is what it is.

00:24:18 The framework is consistent sort of with the programming model.

00:24:21 I like that a lot.

00:24:22 Yep.

00:24:23 Anyway, pretty cool.

00:24:24 And people can check that out if they're building APIs.

00:24:28 Remember, it's in the experimental stage.

00:24:29 But, you know, you can play with it, see if it fits your needs or make it better.

00:24:33 Definitely.

00:24:34 Nice.

00:24:35 Yeah, pretty cool.

00:24:35 All right.

00:24:36 Anything else you want to share with us, Brian?

00:24:37 No, I can't believe we're already done.

00:24:38 I know.

00:24:39 Same for me.

00:24:40 I covered it all last week.

00:24:41 So just always fun to share this stuff with you.

00:24:44 Thanks for being here.

00:24:45 Definitely fun.

00:24:45 And everybody keep on sending us things that we should check out.

00:24:48 I love getting tips from people.

00:24:49 Absolutely.

00:24:50 Same here.

00:24:51 See you later.

00:24:51 Bye.

00:24:52 Thank you for listening to Python Bytes.

00:24:54 Follow the show on Twitter via at Python Bytes.

00:24:57 That's Python Bytes as in B-Y-T-E-S.

00:25:00 And get the full show notes at Pythonbytes.fm.

00:25:03 If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:25:08 We're always on the lookout for sharing something cool.

00:25:10 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:25:14 Thank you for listening and sharing this podcast with your friends and colleagues.

