
00:00:00.000 --> 00:00:05.280
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.280 --> 00:00:11.920
This is episode 198, recorded August 31st, 2020. I am Brian Okken.


00:00:11.920 --> 00:00:12.880
I'm Michael Kennedy.


00:00:12.880 --> 00:00:15.520
And we're joined by a guest. We have Annalena Popkis.


00:00:15.520 --> 00:00:17.920
Yes, that's very correct.


00:00:17.920 --> 00:00:22.320
Wonderful. She's been on Michael's Talk Python podcast a couple times.


00:00:22.320 --> 00:00:22.800
Absolutely.


00:00:22.800 --> 00:00:23.600
And or at least once.


00:00:23.600 --> 00:00:28.560
It depends how far out in the future. I think in the future twice. We've already recorded a couple


00:00:28.560 --> 00:00:33.920
shows together, but it's, you know, we've got quite a buffer there. So this one will be out before. So one and two times and


00:00:33.920 --> 00:00:39.360
Welcome to this show. Nice to see you. Yeah, thanks for having me. I'll kick it off with the first topic


00:00:39.360 --> 00:00:41.920
Give us something easy. Don't make it hard brian. Come on


00:00:41.920 --> 00:00:44.880
Yeah, actually so when I remember


00:00:44.880 --> 00:00:50.800
It's been a while since I shifted of thinking about python as a scripting language to as a full-blown


00:00:50.800 --> 00:00:54.320
Language to do like everything big applications and stuff


00:00:54.720 --> 00:01:01.280
Of course, I still do both. I use it for a quick scripting language, but also more meaty things.


00:01:01.280 --> 00:01:07.600
But back in the day when I was using Bash, if I wanted to have a little script to do with arguments,


00:01:07.600 --> 00:01:12.000
I'd have like an example Bash file that I would just keep copying from.


00:01:12.000 --> 00:01:16.560
And I was thinking about that because I would never remember how to do arguments and stuff


00:01:16.560 --> 00:01:21.920
and parameter passing through into a little script. And the same is true for Python with arg parse,


00:01:21.920 --> 00:01:25.480
But we have Google now to find that information out.


00:01:25.480 --> 00:01:29.920
But I was thinking about that when I saw this comment on Twitter.


00:01:29.920 --> 00:01:32.320
It's from Joshua Schreiber.


00:01:32.320 --> 00:01:35.000
And he said, "Every time I write a Python script,


00:01:35.000 --> 00:01:37.640
I have to go back to an old script of mine


00:01:37.640 --> 00:01:39.640
to remember how to set up argpars.


00:01:39.640 --> 00:01:42.480
For some reason, it just doesn't stick in my mind at all."


00:01:42.480 --> 00:01:44.840
And then Ken Yones Clark,


00:01:44.840 --> 00:01:48.120
and I think he's been on your show, hasn't he, Michael?


00:01:48.120 --> 00:01:49.120
No, I don't think so.


00:01:49.120 --> 00:01:49.520
Okay.


00:01:49.520 --> 00:01:51.520
Probably should be, but hasn't.


00:01:51.520 --> 00:01:56.520
He commented and he said, I've got this little utility called the new.py.


00:01:56.520 --> 00:01:58.520
So I went and checked it out.


00:01:58.520 --> 00:02:01.860
And I'm pretty happy with it. It's not something you can pip install.


00:02:01.860 --> 00:02:05.760
We're going to link to it in the show notes. It's just part of it. He's got a repo for it.


00:02:05.760 --> 00:02:08.560
And I think he uses it in a book that he wrote.


00:02:08.560 --> 00:02:13.520
But basically what it does is you run it and give it a file name and it


00:02:13.520 --> 00:02:15.520
gives you a little starter script


00:02:15.520 --> 00:02:18.360
with all our stuff with examples.


00:02:18.360 --> 00:02:21.300
You've got an example positional argument, a string argument,


00:02:21.300 --> 00:02:24.660
integer argument, file argument, and a boolean flag.


00:02:24.660 --> 00:02:28.660
So you don't have to look that stuff up. They're already there as dummy ones.


00:02:28.660 --> 00:02:31.660
And then you can, you know, add to it and whatever,


00:02:31.660 --> 00:02:33.300
delete the stuff you don't want.


00:02:33.300 --> 00:02:36.940
So just in, if you've got this around, you can use it to


00:02:36.940 --> 00:02:39.940
spin up a new script really easily.


00:02:39.940 --> 00:02:44.240
And he also just recently added test code for it. So if you


00:02:44.240 --> 00:02:47.360
pass it a -t, it'll generate a little


00:02:47.360 --> 00:02:51.360
stub test file so you can test your script with it too.


00:02:51.360 --> 00:02:55.160
Anyway, if you're using Python for scripting, I think this is a good thing to look at.


00:02:55.160 --> 00:02:57.760
I love that. I have the same problem every time.


00:02:57.760 --> 00:03:00.560
I always copy it from an old script every time.


00:03:00.560 --> 00:03:03.160
I was thinking the same thing.


00:03:03.160 --> 00:03:06.160
What is one of the big differences between beginners and experts?


00:03:06.160 --> 00:03:09.160
Experts have a whole bunch of these old things they can go and copy from.


00:03:09.160 --> 00:03:13.660
Well, I often use, so I'm usually using Click or


00:03:13.660 --> 00:03:14.860
what's the other one that's...


00:03:14.860 --> 00:03:15.560
Typer.


00:03:15.560 --> 00:03:16.560
Typer.


00:03:16.560 --> 00:03:20.820
Yeah, so I'm usually using those for larger applications,


00:03:20.820 --> 00:03:22.820
but there's a lot of times where you're passing,


00:03:22.820 --> 00:03:25.760
you have a shared script that you don't really want to have


00:03:25.760 --> 00:03:27.360
install anything extra.


00:03:27.360 --> 00:03:29.360
So arc parse is still


00:03:29.360 --> 00:03:30.960
something to use for a lot of stuff.


00:03:30.960 --> 00:03:31.960
Yeah, very cool.


00:03:31.960 --> 00:03:35.660
Yeah, if you don't want arguments, sorry, dependencies, this is a great


00:03:35.660 --> 00:03:39.360
example there. Because if your script could literally run without a pip install


00:03:39.360 --> 00:03:41.560
or without a virtual environment, except for that,


00:03:41.560 --> 00:03:44.460
you know, I probably would just have a slightly more cumbersome


00:03:44.460 --> 00:04:14.340
bit of code and have it easy, easy to run, you know, I've been thinking about how I should really be building more CLI based applications. And I have an insane number of these little what I would really call scripts. They're not applications. They're like, little tools that I just use to run all the stuff around my company. So for example, one that I wrote last week was, I had a company that did transcripts for the video courses, and then they stopped doing that. It's fine.


00:04:14.340 --> 00:04:16.180
and they moved on to doing other things,


00:04:16.180 --> 00:04:17.540
but all of a sudden I had to figure out,


00:04:17.540 --> 00:04:19.380
well, how do I get transcripts again?


00:04:19.380 --> 00:04:21.180
So I wrote a little script that would go


00:04:21.180 --> 00:04:23.940
find all of the videos in a course,


00:04:23.940 --> 00:04:25.660
see if it was missing transcripts,


00:04:25.660 --> 00:04:28.380
go and use AWS transcribe,


00:04:28.380 --> 00:04:31.780
and just say the videos in AWS S3,


00:04:31.780 --> 00:04:32.820
do this and then download it


00:04:32.820 --> 00:04:36.020
and turn it into sentences and subtitles and video.


00:04:36.020 --> 00:04:37.700
So there's like 50 of these,


00:04:37.700 --> 00:04:39.540
and I'm at the point where I almost think


00:04:39.540 --> 00:04:42.060
I might just make one command line option


00:04:42.060 --> 00:04:44.420
to run every one of those scripts, right?


00:04:44.420 --> 00:04:46.300
Like kind of like Git with sub commands,


00:04:46.300 --> 00:04:51.020
like TP space transcripts, TP space video and code, right?


00:04:51.020 --> 00:04:53.900
Like I'm almost ready to build this huge CLI thing.


00:04:53.900 --> 00:04:55.540
And I probably won't use ArcPars though,


00:04:55.540 --> 00:04:56.380
I'll probably use Typer.


00:04:56.380 --> 00:04:57.820
- Yeah. - Sounds like a good idea.


00:04:57.820 --> 00:04:58.660
- Yeah, exactly.


00:04:58.660 --> 00:05:00.200
'Cause I always forget, I'm like, did I write that?


00:05:00.200 --> 00:05:01.040
What's it called?


00:05:01.040 --> 00:05:02.220
How do I run it again?


00:05:02.220 --> 00:05:03.440
To track it down.


00:05:03.440 --> 00:05:06.740
So this next one comes to us from a listener,


00:05:06.740 --> 00:05:10.260
Exuma is the username, didn't get a first last name.


00:05:10.260 --> 00:05:12.500
So thanks for sending that over.


00:05:12.500 --> 00:05:16.500
And it's called dbeaver,


00:05:16.500 --> 00:05:18.740
dbeaver, something like that.


00:05:18.740 --> 00:05:21.460
So it's for databases and has to do with beavers.


00:05:21.460 --> 00:05:24.820
So dbeaver, database UI tool.


00:05:24.820 --> 00:05:26.740
And something about working with databases


00:05:26.740 --> 00:05:31.740
inspires people to use animal names or creature names.


00:05:31.740 --> 00:05:34.620
So this is dbeaver.


00:05:34.620 --> 00:05:36.740
And the one that I mentioned that started,


00:05:36.740 --> 00:05:38.980
got Exuma saying, hey, this is cool,


00:05:38.980 --> 00:05:40.780
but you should also check this other one out,


00:05:40.780 --> 00:05:43.540
is I mentioned Beekeeper at beekeeper.io,


00:05:43.540 --> 00:05:45.340
which is really, really cool.


00:05:45.340 --> 00:05:50.340
So here's another cool free open source database GUI tool.


00:05:50.340 --> 00:05:52.540
So if you got to work with databases,


00:05:52.540 --> 00:05:53.780
this looks like a really nice one.


00:05:53.780 --> 00:05:54.620
- Yeah, it looks pretty cool.


00:05:54.620 --> 00:05:58.740
- Yeah, you know, it doesn't have the full on marketing,


00:05:58.740 --> 00:05:59.660
beautiful page.


00:05:59.660 --> 00:06:03.860
Like if you go to Beekeeper Studio, sorry, beekeeperstudio.io,


00:06:03.860 --> 00:06:06.620
man, that thing looks like it could be a VC funded startup,


00:06:06.620 --> 00:06:08.060
like landing page, right?


00:06:08.060 --> 00:06:12.560
Whereas the beaver is nice, but it doesn't look like ultra polished,


00:06:12.560 --> 00:06:16.660
but it's based on Eclipse, and it supports 80 different database types.


00:06:16.660 --> 00:06:22.740
So obviously the popular ones like MySQL, Postgres, SQLite, Microsoft SQL Server,


00:06:22.740 --> 00:06:25.860
and so on, but a whole bunch of other ones as well.


00:06:25.860 --> 00:06:30.760
So yeah, if you got to work with databases, and you want some kind of UI tool,


00:06:30.760 --> 00:06:32.360
this looks like a pretty good option.


00:06:32.360 --> 00:06:34.260
Do you have an idea why they called it beaver?


00:06:34.260 --> 00:06:36.400
I have no idea why they called it beaver.


00:06:36.400 --> 00:06:43.900
It's funny sometimes since in machine learning, they had a trend that they named the models like Sesame Street. Do you say Sesame Street?


00:06:43.900 --> 00:06:44.800
Yeah, yeah, yeah, yeah.


00:06:44.800 --> 00:06:47.000
And they started calling them Bird.


00:06:47.000 --> 00:06:49.800
Like Grover and Big Bird and all this kind of stuff.


00:06:49.800 --> 00:06:58.300
Yeah, and someone started it and then the others just continued naming the models like that. It was a lot of fun.


00:06:58.300 --> 00:07:03.700
Yeah, it's really fun. Last episode, which isn't out yet, so there's no way you would have heard this.


00:07:04.100 --> 00:07:07.460
But we were talking about something on Debian.


00:07:07.460 --> 00:07:10.020
It was going through the Python Docker script


00:07:10.020 --> 00:07:15.060
and understanding what it means to create a bare-bones Python system.


00:07:15.060 --> 00:07:21.460
And found out that Debian names their releases after Toy Story characters.


00:07:21.460 --> 00:07:23.540
I like that.


00:07:23.540 --> 00:07:25.060
Yeah, that's nice.


00:07:25.060 --> 00:07:29.700
And of course, you are doing all of your stuff with 100 Days of Code and Harry Potter, right?


00:07:29.700 --> 00:07:31.220
Which is also pretty awesome.


00:07:31.220 --> 00:07:33.060
But there's not really releases for that, is there?


00:07:33.060 --> 00:07:35.060
Nope.


00:07:35.060 --> 00:07:38.060
So let's see, so a couple more things that are interesting about dBeaver


00:07:38.060 --> 00:07:41.060
is it's got a nice GUI interface,


00:07:41.060 --> 00:07:43.060
it has dark mode, light mode, and whatnot.


00:07:43.060 --> 00:07:45.060
It has support for cloud data sources,


00:07:45.060 --> 00:07:47.060
so if you're going to connect to, I'm presuming,


00:07:47.060 --> 00:07:49.060
things like hosted databases,


00:07:49.060 --> 00:07:51.060
like SQL, Azure, or something like that.


00:07:51.060 --> 00:07:54.060
But it also has extensions that allow you to work


00:07:54.060 --> 00:07:56.060
directly between databases and Excel,


00:07:56.060 --> 00:07:58.060
or databases and Git,


00:07:58.060 --> 00:08:00.060
which I think is pretty cool.


00:08:00.060 --> 00:08:05.100
will build UML entity diagrams, like show me the relationships of this table,


00:08:05.100 --> 00:08:09.180
you know, where the foreign keys go and all of the things like that visually,


00:08:09.180 --> 00:08:12.620
which pretty nice if you're just like given a project, here's the database.


00:08:12.620 --> 00:08:14.620
Oh, what the heck did I just get?


00:08:14.620 --> 00:08:16.620
Right, you could open it up in something like this.


00:08:16.620 --> 00:08:19.860
You know, PyCharm Pro has something along those lines as well,


00:08:19.860 --> 00:08:22.020
but this is free and open source. So that's pretty cool.


00:08:22.020 --> 00:08:25.700
Yeah, I use the one for PyCharm Pro for in the diagramming


00:08:25.700 --> 00:08:29.580
helps a lot to be able to visualize what your data is doing.


00:08:29.580 --> 00:08:31.580
Totally agree. I use it all the time. Yeah.


00:08:31.580 --> 00:08:34.020
All right. Well, that's it for DeepWeaver. I think it's cool.


00:08:34.020 --> 00:08:36.620
People can check it out and compare it with Beekeeper Studio.


00:08:36.620 --> 00:08:40.320
Great. So I want to talk about PDB++.


00:08:40.320 --> 00:08:45.280
So I was always using the IPython debugger when debugging,


00:08:45.280 --> 00:08:50.240
but I recently switched from using IPDB to PDB++.


00:08:50.240 --> 00:08:52.980
So PDB is the Python debugger,


00:08:52.980 --> 00:08:56.440
like the normal one that's part of the standard library.


00:08:56.440 --> 00:08:59.520
And PDB++ is an extension of that.


00:08:59.520 --> 00:09:01.760
So it's fully compatible with PDB.


00:09:01.760 --> 00:09:04.400
But it has some pretty nice features.


00:09:04.400 --> 00:09:08.760
And I think they improved the debugging experience quite a bit.


00:09:08.760 --> 00:09:10.840
It's very easy to install.


00:09:10.840 --> 00:09:14.120
So you just type pip install PDBPP,


00:09:14.120 --> 00:09:18.400
since PDB++ is not a valid package name.


00:09:18.400 --> 00:09:24.320
And I have two favorites, like it has quite a few additional commands


00:09:24.320 --> 00:09:31.840
and features compared to PDB, but it has all the usual commands that are also part of IPDB,


00:09:31.840 --> 00:09:36.320
so it's very easy to switch. But there is the sticky mode, which I like a lot.


00:09:36.320 --> 00:09:42.320
So the official description is that when you're in the sticky mode, every time you change the


00:09:42.320 --> 00:09:48.320
current position, the screen is repainted and then the whole function is shown. So when doing


00:09:48.320 --> 00:09:54.160
step-by-step debugging, it's very easy to follow the flow of execution. And I constantly use that


00:09:54.160 --> 00:09:59.920
feature, since I find it very annoying to always type L or double L to see the code.


00:09:59.920 --> 00:10:06.720
And with a sticky mode, you can just always follow along with the code and the flow of


00:10:06.720 --> 00:10:11.520
execution. I like that a lot. And then there is smart command parsing, which I also like.


00:10:11.520 --> 00:10:20.080
So if you have or if you're using PDB, it always tries to interpret the commands you enter as one


00:10:20.080 --> 00:10:24.160
of the build and commands, which can be quite inconvenient in some situations.


00:10:24.160 --> 00:10:31.120
For example, if you want to print the value of a local variable and that one happens to have the


00:10:31.120 --> 00:10:34.560
same name as one of the commands, for example, you can... Oh no.


00:10:34.560 --> 00:10:39.600
Yeah, that could... And I had that quite a few times. So, for example, if you call something


00:10:39.600 --> 00:10:47.280
P or C and then you want to print the value of that variable, but it is interpreted as the


00:10:47.280 --> 00:10:51.360
command continue, which is C is short for continue.


00:10:51.360 --> 00:10:55.440
And I think PDB++ has quite a nice solution for that.


00:10:55.440 --> 00:11:01.920
So when there is ambiguity, so if you have a variable with the same name in the


00:11:01.920 --> 00:11:04.800
current scope, then that variable is preferred.


00:11:04.800 --> 00:11:09.640
And if you still want to run the command, you can just prefix it with two


00:11:09.640 --> 00:11:11.040
exclamation marks.


00:11:11.040 --> 00:11:15.160
But if you don't have any ambiguity and you type C, then it will always be


00:11:15.160 --> 00:11:15.760
continue.


00:11:16.280 --> 00:11:18.080
And I find that very convenient.


00:11:18.080 --> 00:11:20.080
Oh, yeah, that seems like a great little feature.


00:11:20.080 --> 00:11:23.080
And it just runs in the terminal, right?


00:11:23.080 --> 00:11:27.780
So you can run it anywhere that you have SSH access to or something to that effect.


00:11:27.780 --> 00:11:30.280
Yeah, I think it's a very nice package.


00:11:30.280 --> 00:11:35.480
Maybe this is a dense question, but why use this over an IDE?


00:11:35.480 --> 00:11:37.480
Oh, I just always use Vim.


00:11:37.480 --> 00:11:44.080
And that's why I got so used to using Vim that I find it very convenient


00:11:44.480 --> 00:11:48.640
to use PDB or IPDB or now PDB++.


00:11:48.640 --> 00:11:53.040
I guess I would have to start using an IDE properly


00:11:53.040 --> 00:11:57.520
to really be able to appreciate it.


00:11:57.520 --> 00:12:01.600
But it's hard if you got so used to using your keyboard


00:12:01.600 --> 00:12:03.200
and you have your keyboard shortcuts.


00:12:03.200 --> 00:12:08.080
And yeah, I don't think I can switch back to an IDE for a while.


00:12:08.080 --> 00:12:08.480
Okay.


00:12:08.480 --> 00:12:11.120
Yeah, it has some cool features as well down here.


00:12:11.120 --> 00:12:15.280
Like one of the things is if there's an exception,


00:12:15.280 --> 00:12:19.520
you can ask it for a post-mortem report,


00:12:19.520 --> 00:12:24.280
and it'll give you like extra details in there.


00:12:24.280 --> 00:12:28.080
You can also do stuff like break on set attribute.


00:12:28.080 --> 00:12:30.520
So if some kind of attribute is set,


00:12:30.520 --> 00:12:33.400
which is, I guess, a little bit like a conditional breakpoint


00:12:33.400 --> 00:12:35.200
and say an IDE or whatever,


00:12:35.200 --> 00:12:36.520
but yeah, it looks pretty cool.


00:12:36.520 --> 00:12:40.160
I like the fact that it has syntax highlighting and color and all that.


00:12:40.560 --> 00:12:41.480
Yeah, autocomplete.


00:12:41.480 --> 00:12:44.240
I know that it can be quite nice in an IDE too.


00:12:44.240 --> 00:12:46.440
I think on the last Talk Python episode,


00:12:46.440 --> 00:12:49.560
it was on the Python...


00:12:49.560 --> 00:12:51.000
How was that episode called?


00:12:51.000 --> 00:12:54.360
It was called the Modern Python Developers Toolkit


00:12:54.360 --> 00:12:55.960
by Sebastian Witwoski.


00:12:55.960 --> 00:12:58.520
And you talked about Visual Studio.


00:12:58.520 --> 00:13:03.760
And yeah, I know that it has quite a few features as well.


00:13:03.760 --> 00:13:05.960
But when you're used to something like IPDB,


00:13:05.960 --> 00:13:07.400
this is a very nice addition.


00:13:07.400 --> 00:13:08.640
Yeah, yeah, absolutely.


00:13:09.200 --> 00:13:12.920
And you can also, what's the double exclamation point thing?


00:13:12.920 --> 00:13:16.200
So you mean what I just mentioned with the command?


00:13:16.200 --> 00:13:17.920
Yeah. Yeah. Like when would I run that?


00:13:17.920 --> 00:13:22.920
So if you have like a variable C and that has some value, so it's a local


00:13:22.920 --> 00:13:28.200
variable, but you want to run continue in this case, then you would have two


00:13:28.200 --> 00:13:29.960
exclamation marks and the C.


00:13:29.960 --> 00:13:31.800
Yeah. So that's why it's, it skips it.


00:13:31.800 --> 00:13:32.360
Okay. Got it.


00:13:32.360 --> 00:13:32.920
Understand now.


00:13:32.920 --> 00:13:33.960
Cool. Cool.


00:13:33.960 --> 00:13:34.400
All right.


00:13:34.400 --> 00:13:34.560
Yeah.


00:13:34.560 --> 00:13:38.160
This, you know, I live largely in the IDE world,


00:13:38.160 --> 00:13:41.860
but if I needed to do some debugging outside of it,


00:13:41.860 --> 00:13:43.860
this is a really nice option, I think.


00:13:43.860 --> 00:13:46.760
Like maybe in a Docker container,


00:13:46.760 --> 00:13:49.460
and I don't want to set up like remote debugging and all that kind of stuff.


00:13:49.460 --> 00:13:50.960
I just, you want to run it?


00:13:50.960 --> 00:13:52.060
What's it doing? Yeah, that's cool.


00:13:52.060 --> 00:13:52.660
Nice.


00:13:52.660 --> 00:13:53.560
Oh, yes.


00:13:53.560 --> 00:13:56.260
Today's sponsor is us.


00:13:56.260 --> 00:13:57.660
So thank you, us.


00:13:57.660 --> 00:14:00.460
Thanks, us.


00:14:00.460 --> 00:14:03.060
We'll probably have to edit that section.


00:14:03.060 --> 00:14:09.060
Today's sponsor is both Talk Python Training and Test&Code podcast as well.


00:14:09.060 --> 00:14:15.540
I wanted to highlight, I had some, I think last episode I mentioned that Adam Johnson,


00:14:15.540 --> 00:14:20.980
which hadn't actually, he hadn't actually been on our show yet, but the last episode of Test&Code


00:14:20.980 --> 00:14:26.820
128, I did have Adam Johnson on. He is the maintainer of pytest Randomly. And so we talk


00:14:26.820 --> 00:14:32.180
about what the importance of randomizing your tests to make sure that you have order dependent,


00:14:32.180 --> 00:14:33.940
order independent tests.


00:14:33.940 --> 00:14:35.740
So that's a good episode.


00:14:35.740 --> 00:14:39.820
But we talk about all sorts of stuff on testing code including things like


00:14:39.820 --> 00:14:43.380
tips for working from home. That was on episode 127.


00:14:43.380 --> 00:14:43.940
Check it out.


00:14:43.940 --> 00:14:47.220
I think people are doing that more than they used to for some reason. I'm not really sure why.


00:14:47.220 --> 00:14:48.100
Working from home?


00:14:48.100 --> 00:14:48.820
Yeah.


00:14:48.820 --> 00:14:50.260
Definitely.


00:14:50.260 --> 00:14:51.260
Yeah, that sounds great.


00:14:51.260 --> 00:14:52.940
And Talk Python Training.


00:14:52.940 --> 00:14:54.940
Yeah, we just released a brand new course.


00:14:54.940 --> 00:14:57.340
Move from Excel to Python and Pandas.


00:14:57.340 --> 00:14:59.580
So if you have been trying to


00:14:59.580 --> 00:15:04.860
overdo all the stuff that you do with around data with Excel or people you work with are.


00:15:04.860 --> 00:15:09.580
We created a course written by Chris Moffitt from Practical Business Python


00:15:09.580 --> 00:15:16.140
to basically go through all the main use cases of Excel and show how much easier it is to do that in Jupyter and Pandas.


00:15:16.140 --> 00:15:20.060
And I think it'll help a lot of people get their foot in the door in the Python world.


00:15:20.060 --> 00:15:23.980
I think that's really cool. I always wanted to learn Excel,


00:15:23.980 --> 00:15:27.980
but it's so much nicer with Python that I never got around to doing it.


00:15:27.980 --> 00:15:31.660
Yeah, that's perfect. That's the good side to be on, not the other side.


00:15:31.660 --> 00:15:32.160
Yes.


00:15:32.160 --> 00:15:36.620
Awesome. So Brian, tell us about Markdown.


00:15:36.620 --> 00:15:42.780
I really like Markdown. I use it for a whole bunch of stuff. And when I mean, so much so


00:15:42.780 --> 00:15:48.060
that I just kind of assume everybody's using Markdown now. But sometimes people have trouble


00:15:48.060 --> 00:15:53.660
getting up to speed or you want to share something. Anyway, I came across, I was actually having a


00:15:53.660 --> 00:16:00.820
a Twitter discussion with somebody and they brought up this HackMD.io tool and HackMD,


00:16:00.820 --> 00:16:02.460
I've never heard of that.


00:16:02.460 --> 00:16:05.520
So I went to check it out and I'm pretty impressed with it.


00:16:05.520 --> 00:16:06.520
It's pretty cool.


00:16:06.520 --> 00:16:09.020
It is a paid service, but there's a free option too.


00:16:09.020 --> 00:16:11.020
So of course I'm on the free option.


00:16:11.020 --> 00:16:16.660
But the idea is this sort of, you've got the similar, there's a lot of tools that do this.


00:16:16.660 --> 00:16:21.060
You've got a two panel system where you, on the left, you're marked down and on the right


00:16:21.060 --> 00:16:23.560
it shows up, then you can hide one or the other.


00:16:23.560 --> 00:16:28.060
But what I really like is some of the stuff that I always forget,


00:16:28.060 --> 00:16:31.560
like how to insert a picture or do a table of contents


00:16:31.560 --> 00:16:35.560
or put reference links in or footnotes.


00:16:35.560 --> 00:16:38.560
Those things are just sort of in there with menu items.


00:16:38.560 --> 00:16:41.560
So I don't have to remember what all those markdown codes are.


00:16:41.560 --> 00:16:45.060
They just added, apparently you can collaborate and have multiple people


00:16:45.060 --> 00:16:47.560
editing a document with this. So that's pretty cool.


00:16:47.560 --> 00:16:52.900
There's some fancy extra things like UML diagrams that you can add in.


00:16:52.900 --> 00:16:55.240
And I'm not sure if you're exporting it,


00:16:55.240 --> 00:17:00.200
you'll have to try to figure out what sort of extra tools you need to actually generate those.


00:17:00.200 --> 00:17:01.440
But it's pretty fun.


00:17:01.440 --> 00:17:07.140
The thing that I like that they just added recently, apparently, is you can sync with GitHub.


00:17:07.140 --> 00:17:10.180
So you can keep all your markdown documents in GitHub


00:17:10.180 --> 00:17:13.060
and edit them with HackMD.


00:17:13.060 --> 00:17:14.320
That's pretty fun.


00:17:14.320 --> 00:17:15.220
That's awesome.


00:17:15.220 --> 00:17:19.060
The other thing I found was this thing called Markdown Guide.


00:17:19.060 --> 00:17:23.160
And it is just a really good, clean reference for Markdown.


00:17:23.160 --> 00:17:24.420
So I'm going to--


00:17:24.420 --> 00:17:27.220
I had a handful of different references that I was using,


00:17:27.220 --> 00:17:29.580
but I think I'm going to switch to this one because there's


00:17:29.580 --> 00:17:33.740
tabs that have a getting started page that I can send people to.


00:17:33.740 --> 00:17:36.300
And a couple of cheat sheets, one of them


00:17:36.300 --> 00:17:37.700
is the most common things.


00:17:37.700 --> 00:17:40.740
And I think it's pretty indicative of common things


00:17:40.740 --> 00:17:41.660
you'll use.


00:17:41.660 --> 00:17:44.260
And then an extended syntax page with--


00:17:44.260 --> 00:17:45.780
and then a bunch of tools you can use.


00:17:45.780 --> 00:17:48.780
So a couple of Markdown references for people.


00:17:48.780 --> 00:17:50.300
Have you ever used Pandoc?


00:17:50.300 --> 00:17:51.460
Oh, yeah, I love Pandoc.


00:17:51.460 --> 00:17:56.460
Yes, since I recently started using it and I'm preparing my presentations now


00:17:56.460 --> 00:17:58.860
with Pandoc every time and I love it.


00:17:58.860 --> 00:18:00.780
It's just great. Great tool.


00:18:00.780 --> 00:18:05.700
I love about Pandoc is it's not just from Markdown to to HTML,


00:18:05.700 --> 00:18:10.220
but you can convert to MediaWiki or lots of or I use it


00:18:11.140 --> 00:18:16.840
A lot of times to format my emails correctly in the Microsoft Office,


00:18:16.840 --> 00:18:19.140
I will write them in Markdown and then use


00:18:19.140 --> 00:18:23.540
hand doc to generate the Word doc version,


00:18:23.540 --> 00:18:26.140
and then copy and paste into an email.


00:18:26.140 --> 00:18:29.900
I know it's backwards, lots of steps, but it works for me.


00:18:29.900 --> 00:18:32.040
Yeah, you know, it'd be nice to have just an


00:18:32.040 --> 00:18:35.900
email editor that just takes straight Markdown. Wouldn't that be cool?


00:18:35.900 --> 00:18:37.100
Yeah, that would be cool.


00:18:37.100 --> 00:18:41.100
And I really like an extension to Microsoft Outlook


00:18:41.100 --> 00:18:44.300
that had them key bindings.


00:18:44.300 --> 00:18:46.300
That would be awesome.


00:18:46.300 --> 00:18:48.300
The programmers are invading Outlook.


00:18:48.300 --> 00:18:50.600
You have some other cool stuff about Markdown,


00:18:50.600 --> 00:18:53.300
or Hack Markdown, Hack to MD,


00:18:53.300 --> 00:18:55.900
is it has a VS Code extension.


00:18:55.900 --> 00:18:57.900
And like you said, the GitHub integration is cool.


00:18:57.900 --> 00:18:59.100
It has a browser extension.


00:18:59.100 --> 00:19:01.300
You could turn your notes into a slide deck.


00:19:01.300 --> 00:19:03.500
You can turn it into like a research project,


00:19:03.500 --> 00:19:05.300
into like what they call book mode.


00:19:05.300 --> 00:19:06.600
Yeah, it looks pretty interesting.


00:19:06.600 --> 00:19:11.200
and the collaboration is definitely needed around Markdown these days.


00:19:11.200 --> 00:19:14.640
There's not really a great collaborative place that I know of,


00:19:14.640 --> 00:19:17.400
although I'm sure listeners are going to send us five examples, which is awesome,


00:19:17.400 --> 00:19:19.000
because they always do.


00:19:19.000 --> 00:19:20.880
But for example,


00:19:20.880 --> 00:19:22.880
- like we use paper which lets us... - You can do slides with this?


00:19:22.880 --> 00:19:27.640
Yes, you can export paper from Dropbox paper,


00:19:27.640 --> 00:19:29.320
paper.dropbox.com,


00:19:29.320 --> 00:19:32.680
as Markdown, but it's not full fidelity. It's like


00:19:32.680 --> 00:19:35.400
85% that you can edit what you get,


00:19:35.400 --> 00:19:37.400
But it's still, it's better than nothing.


00:19:37.400 --> 00:19:38.200
But yeah, this looks cool.


00:19:38.200 --> 00:19:39.560
- Nice. - You know what's not cool?


00:19:39.560 --> 00:19:40.840
Python malware.


00:19:40.840 --> 00:19:42.280
That's not a thing, is it?


00:19:42.280 --> 00:19:44.040
Apparently, it is now a thing.


00:19:44.040 --> 00:19:46.680
So, Connor Fester,


00:19:46.680 --> 00:19:47.880
Fester, sorry,


00:19:47.880 --> 00:19:50.840
sent in this interesting article,


00:19:50.840 --> 00:19:52.440
which was done,


00:19:52.440 --> 00:19:53.560
what was this done by?


00:19:53.560 --> 00:19:55.320
It was, one second,


00:19:55.320 --> 00:19:57.160
Cyborg Security.


00:19:57.160 --> 00:19:58.920
So these guys wrote a pretty cool article


00:19:58.920 --> 00:20:03.320
about how Python malware is starting to show up.


00:20:03.320 --> 00:20:08.920
Now you may have heard articles or mentions of certain package management stores


00:20:08.920 --> 00:20:10.920
getting infected with malware.


00:20:10.920 --> 00:20:14.920
Like we talked about some researchers putting some kind of malware onto PyPI.


00:20:14.920 --> 00:20:16.920
JavaScript had this at NPM.


00:20:16.920 --> 00:20:18.920
Ruby had this with their gem store.


00:20:18.920 --> 00:20:21.920
So that's not what I'm talking about here.


00:20:21.920 --> 00:20:23.920
That's an issue, but that is not this.


00:20:23.920 --> 00:20:29.920
This is about what are people doing to create the runtime environment,


00:20:29.920 --> 00:20:32.920
just the viruses basically with Python.


00:20:32.920 --> 00:20:36.720
So traditionally, this has been like a C, C++ type of thing,


00:20:36.720 --> 00:20:40.220
but there's some interesting parallels just to go through here.


00:20:40.220 --> 00:20:41.960
I don't want to encourage anyone to do this,


00:20:41.960 --> 00:20:46.520
but I want to put it on people's radar to be aware that it could be being done, you know?


00:20:46.520 --> 00:20:50.800
So for example, one of the challenges of you build a C++ app,


00:20:50.800 --> 00:20:52.800
you can just send a binary around and run it.


00:20:52.800 --> 00:20:56.080
Not so easy with Python, the standard library has to be there,


00:20:56.080 --> 00:20:57.480
or CPython has to be there.


00:20:57.480 --> 00:21:02.160
But they talk about, well, people are using py2exe and py2app


00:21:02.160 --> 00:21:06.000
to package up their Python viruses and send them around.


00:21:06.000 --> 00:21:06.800
Isn't that weird?


00:21:06.800 --> 00:21:08.800
I mean, I guess.


00:21:08.800 --> 00:21:10.800
People will do weird things.


00:21:10.800 --> 00:21:15.680
Yeah, so there's an example of Python malware called cduke that was used against the


00:21:15.680 --> 00:21:19.520
Democratic National Committee back in 2015 and 16.


00:21:19.520 --> 00:21:22.640
There's other tools that might be just generally useful to people


00:21:22.640 --> 00:21:26.160
regardless of whether it's in this context or not like


00:21:26.160 --> 00:21:28.160
uncompile6.


00:21:28.160 --> 00:21:30.800
This is the successor to decompile,


00:21:30.800 --> 00:21:33.400
uncompile in uncompile 2.


00:21:33.400 --> 00:21:36.400
I don't know where 3, 4, 5 went, but


00:21:36.400 --> 00:21:38.600
uncompile 6 is a


00:21:38.600 --> 00:21:42.800
native Python cross-version, a Python version, I guess, decompiler


00:21:42.800 --> 00:21:46.000
and fragment decompiler. So what it'll let you do is it'll take


00:21:46.000 --> 00:21:48.400
Python bytecode and turn it back into source code.


00:21:48.400 --> 00:21:51.800
So, instead of taking a Python file and turning it into a pyc,


00:21:51.800 --> 00:21:53.600
take a pyc and turn it into a Python file.


00:21:53.600 --> 00:21:54.200
Interesting.


00:21:54.200 --> 00:21:54.700
Yeah.


00:21:54.700 --> 00:21:58.000
Some people have been shipping pyc files alone, right?


00:21:58.000 --> 00:21:59.000
And just knowing that


00:21:59.000 --> 00:22:02.880
Those can literally be turned back into source code and like one line of


00:22:02.880 --> 00:22:05.960
commands should be something on your radar, right?


00:22:05.960 --> 00:22:08.960
Because it looks safe, but it's not that safe.


00:22:08.960 --> 00:22:13.340
There's also a PyInstaller extractor.


00:22:13.340 --> 00:22:20.260
So if you were to ship a library or application as a PyInstaller thing,


00:22:20.260 --> 00:22:24.600
you can turn it back into a bunch of source files you can open up and stuff.


00:22:24.600 --> 00:22:27.760
And then they also talk about if you're given an executable,


00:22:27.760 --> 00:22:31.020
how to understand whether or not it was built with PyInstaller


00:22:31.020 --> 00:22:33.020
or if it was built to Py2xe


00:22:33.020 --> 00:22:35.020
or any of those tools.


00:22:35.020 --> 00:22:37.020
Given an arbitrary executable,


00:22:37.020 --> 00:22:39.860
is this a Python packaged up thing? Yes or no?


00:22:39.860 --> 00:22:41.860
That's cool. These are great tools.


00:22:41.860 --> 00:22:44.900
The article looks really interesting. I never thought about


00:22:44.900 --> 00:22:46.900
malware and Python before.


00:22:46.900 --> 00:22:49.700
Yeah, there's a lot of interesting details and concrete examples of


00:22:49.700 --> 00:22:52.700
here's how they did this with this one thing or that.


00:22:52.700 --> 00:22:54.700
I think it's an interesting read.


00:22:54.700 --> 00:22:56.700
Again, not trying to encourage people to do these things,


00:22:56.700 --> 00:23:05.980
just raise awareness, like what the role of Python is in this, you know, less popularized space, right? People always want to hide what they're doing in this world.


00:23:05.980 --> 00:23:20.340
There's another application for some of these. Sometimes businesses have, they'll be afraid or like not want to pass around Python files because of the problems with, you know, knowing what the interpreter is or something.


00:23:20.340 --> 00:23:26.140
So they use PyDXE or something to make an executable for a tool for the company.


00:23:26.140 --> 00:23:28.860
And then somebody, and then that gets passed around,


00:23:28.860 --> 00:23:31.260
and somebody loses the source,


00:23:31.260 --> 00:23:34.300
or you don't know who has it or something.


00:23:34.300 --> 00:23:39.820
So using some of these reverse engineering techniques to get some source back,


00:23:39.820 --> 00:23:42.260
that'd be kind of cool to use for that purpose as well.


00:23:42.260 --> 00:23:43.620
I have an example of that.


00:23:43.620 --> 00:23:46.820
So one time, there was this program we built.


00:23:46.820 --> 00:23:49.980
And this was early in my career.


00:23:49.980 --> 00:23:52.780
I must have been like not so good about checking in stuff.


00:23:52.780 --> 00:23:56.140
And somehow the thing that I was working on


00:23:56.140 --> 00:23:59.020
had a file that somehow didn't get added to,


00:23:59.020 --> 00:24:01.700
it was SVN at the time.


00:24:01.700 --> 00:24:03.620
So I had pushed all the changes,


00:24:03.620 --> 00:24:05.980
but I forgot to add this one file.


00:24:05.980 --> 00:24:07.500
And then my computer died.


00:24:07.500 --> 00:24:10.580
And the problem was, it was like my hard drive died.


00:24:10.580 --> 00:24:13.080
And so like, there was some part of the application


00:24:13.080 --> 00:24:15.900
that in the middle of the app used this library.


00:24:15.900 --> 00:24:18.780
And then there was the rest of the app that was kind of below that.


00:24:18.780 --> 00:24:23.500
And so it was really hard to figure out how to rewrite just that middle piece,


00:24:23.500 --> 00:24:26.780
because it was like a weird jigsaw puzzle that had to fit together.


00:24:26.780 --> 00:24:29.660
So I just went and disassembled the application,


00:24:29.660 --> 00:24:31.940
found the few files I needed.


00:24:31.940 --> 00:24:35.740
They were named weirdly, but I just renamed them in a way that worked.


00:24:35.740 --> 00:24:38.180
And then off it was, I checked it into Git and we were good to go,


00:24:38.180 --> 00:24:39.660
or just SPN and we're good to go.


00:24:39.660 --> 00:24:42.300
And you probably never forgot to check in your files again.


00:24:42.300 --> 00:24:45.500
No, I'm very obsessive about it now, that's right.


00:24:45.500 --> 00:24:50.220
Yeah, absolutely. Anyway, that's all I got for this one. It's an interesting article,


00:24:50.220 --> 00:24:51.820
though. It's well done with some nice examples.


00:24:51.820 --> 00:24:54.780
Yeah. So I'm going to go on with, do you call it Etters?


00:24:54.780 --> 00:24:56.460
I call it Etters. Brian, what do you think?


00:24:56.460 --> 00:25:02.060
Etters. Etters. That's really like American English. I would probably say Etters,


00:25:02.060 --> 00:25:10.540
like often and not often. Okay. Anyway, so what is Etters? So I only, I think I saw it a few


00:25:10.540 --> 00:25:15.080
times before but I never actually looked into the package.


00:25:15.080 --> 00:25:19.740
But now a few weeks back I've started using it for the first time.


00:25:19.740 --> 00:25:20.740
So what is Ethers?


00:25:20.740 --> 00:25:26.260
It's a Python package that simplifies writing classes so it creates a lot of the Dunder


00:25:26.260 --> 00:25:27.260
methods automatically.


00:25:27.260 --> 00:25:28.260
Yeah, that's cool.


00:25:28.260 --> 00:25:34.460
Yeah, and when I first saw it I thought we have data classes so why do we need Ethers?


00:25:34.460 --> 00:25:39.820
And only then I realized that Ethers is much older than data classes.


00:25:39.820 --> 00:25:49.740
So PEP 557 added data classes to Python 3.7, and they do resemble Etters in many ways.


00:25:49.740 --> 00:25:56.360
So when I started reading a bit on the documentation page of Etters, I found out that the PEP was


00:25:56.360 --> 00:26:02.420
actually inspired by Etters, and it was the result of the wish of the community to have


00:26:02.420 --> 00:26:08.760
a simplified way to write classes without having to deal with the problems that named


00:26:08.760 --> 00:26:15.800
tuples have. And I think the main difference between Etters and data classes is that data


00:26:15.800 --> 00:26:21.920
classes are strictly less powerful, and that certain features were sacrificed for the sake


00:26:21.920 --> 00:26:28.560
of simplicity. So it's very easy to use data classes, they are part of, I think, 3.7. With


00:26:28.560 --> 00:26:33.840
3.7, they come automatically. But if you have 3.6, you have to pip install them, but you


00:26:33.840 --> 00:26:38.280
don't have to get a new package for them. And it's very easy to use them, especially


00:26:38.280 --> 00:26:40.680
if you have classes with many attributes.


00:26:40.680 --> 00:26:44.280
But with Etters, you have quite a few additional features.


00:26:44.280 --> 00:26:50.840
For example, you have validators that you can use when you have your initializer in the class


00:26:50.840 --> 00:26:55.800
and you want to perform some kind of validation of the input arguments,


00:26:55.800 --> 00:27:01.240
like checking that they are an integer or some other type or more fancy stuff,


00:27:01.240 --> 00:27:04.600
then you can do that very easily with Etters.


00:27:04.600 --> 00:27:06.920
And it's a very powerful library.


00:27:06.920 --> 00:27:14.040
So I think I need a lot more weeks to really get into the details and all its possibilities.


00:27:14.040 --> 00:27:20.040
Yeah, this is a good one. There's a lot of subtleties around creating classes that can be a little bit annoying.


00:27:20.040 --> 00:27:27.640
Like, wouldn't it be great if you could have it print out something other than just the name of the class at some memory address automatically?


00:27:27.640 --> 00:27:29.080
That would be nice.


00:27:29.080 --> 00:27:33.080
If you create a dunder equal, dunder eq method,


00:27:33.080 --> 00:27:35.360
Well, you got to remember to create the not equals.


00:27:35.360 --> 00:27:37.240
That is the opposite of that.


00:27:37.240 --> 00:27:48.840
And oh, if you create equals, maybe you also have to implement hash as well, because all of a sudden, if two things are equal, you put them in the dictionary, but then they're not the same thing. That's going to be all sorts of crazy.


00:27:48.840 --> 00:27:55.520
It just starts to cascade. You're like, wait a minute, doing this right, it's not so easy. And so I think that's the kind of the Zen of the adders.


00:27:55.560 --> 00:28:01.300
Yeah, I found it a bit confusing in the beginning with the syntax, how it looks like if you


00:28:01.300 --> 00:28:06.400
declare an attribute, like it's a decorator, etters, but then for the attributes of the


00:28:06.400 --> 00:28:12.640
class, you have this, is it etters.s or something.


00:28:12.640 --> 00:28:19.120
And I found that a bit confusing in the beginning, since data classes are, I think, more beautiful


00:28:19.120 --> 00:28:22.960
when you write them and you don't need this extra bit.


00:28:22.960 --> 00:28:27.200
But once you get used to the syntax, it's very nice and easy to use.


00:28:27.200 --> 00:28:28.200
I have to agree.


00:28:28.200 --> 00:28:30.800
I like the data class syntax better.


00:28:30.800 --> 00:28:37.000
The dotness of the address syntax is cute, but bugs me a little bit.


00:28:37.000 --> 00:28:43.360
Like attrib, the attributes are attr.ib.


00:28:43.360 --> 00:28:48.200
And it's not something I really enjoy, but it's not difficult either.


00:28:48.200 --> 00:28:52.520
The main switch for me, I think, is now that data classes are here, I use data classes


00:28:52.520 --> 00:28:59.940
all the time. But when I need a validator, the validation mechanism in adders is pretty


00:28:59.940 --> 00:29:04.920
darn cool. So if you want data validation, adders is still a great thing to pull up.


00:29:04.920 --> 00:29:05.920
I agree.


00:29:05.920 --> 00:29:11.580
I really wish that validators were in, or at least maybe we could have an extra package


00:29:11.580 --> 00:29:17.900
that we could pip install or something that would make data classes have validators, hopefully.


00:29:17.900 --> 00:29:22.640
I know there's other things that you can do to validate schemas and stuff like that.


00:29:22.640 --> 00:29:25.140
Yeah, I feel like there's a little bit of a paradox of choice.


00:29:25.140 --> 00:29:28.840
Like you look at all these things and you want all of the features


00:29:28.840 --> 00:29:31.940
that like kind of in this impossible combined way.


00:29:31.940 --> 00:29:33.040
So adders is cool.


00:29:33.040 --> 00:29:35.040
They've got things like you can say that


00:29:35.040 --> 00:29:38.900
these attributes can only be set as keyword arguments in the initializer


00:29:38.900 --> 00:29:40.900
and not as positional arguments and


00:29:40.900 --> 00:29:44.640
just kw only equals true, stuff like that, which is pretty cool.


00:29:44.640 --> 00:29:47.140
And then you've got the PyDandic models,


00:29:47.140 --> 00:29:51.740
which have built-in validation for all sorts of types, which is cool.


00:29:51.740 --> 00:29:55.340
You've got data classes. Those can be frozen, which is kind of nice.


00:29:55.340 --> 00:29:59.340
There's a lot of stuff going around here, and I feel like I'm under-utilizing all of it.


00:29:59.340 --> 00:30:01.840
Grab what you need. It's good.


00:30:01.840 --> 00:30:04.240
Throw some tests around it and switch later.


00:30:04.240 --> 00:30:07.340
For me, it's sometimes just easy to forget what's out there,


00:30:07.340 --> 00:30:09.540
since there are so many nice packages.


00:30:09.540 --> 00:30:13.240
And I sometimes hear, like I listen to a podcast,


00:30:13.240 --> 00:30:19.160
and then I think, "Oh, that package sounds cool, but I don't have an application for it right away."


00:30:19.160 --> 00:30:23.640
So I forget about it again, and then in some context, I hear about it again, and I think,


00:30:23.640 --> 00:30:28.120
"Oh, yes, you always wanted to try that." But I think at least with Etters now,


00:30:28.120 --> 00:30:31.640
I will use it again quite a few times. Yeah, I have that same problem. I get


00:30:31.640 --> 00:30:35.720
excited about all these things, but I don't have a chance to use them, and then I forget.


00:30:35.720 --> 00:30:39.640
Then I'll rediscover it, like, "Oh, yes, that's why I thought it was cool in the first place."


00:30:39.640 --> 00:30:43.000
You should create a Harry Potter style project yourself.


00:30:43.000 --> 00:30:45.400
I'm trying out all these things.


00:30:45.400 --> 00:30:46.520
That's right. Like awesome.


00:30:46.520 --> 00:30:49.320
Harry Python, Harry Potter, Python.


00:30:49.320 --> 00:30:52.680
I would work on the naming.


00:30:52.680 --> 00:30:53.720
I like Harry Python.


00:30:53.720 --> 00:30:57.960
It might invoke images that are not exactly the same.


00:30:57.960 --> 00:30:59.080
What you're thinking.


00:30:59.080 --> 00:31:00.120
Oh, yeah. Okay.


00:31:00.120 --> 00:31:00.760
Nevermind.


00:31:00.760 --> 00:31:01.000
Yeah.


00:31:01.000 --> 00:31:03.560
All right. Well, you guys got anything extra?


00:31:03.560 --> 00:31:03.960
I don't.


00:31:03.960 --> 00:31:05.720
Brian, no extras?


00:31:05.720 --> 00:31:06.120
No.


00:31:06.120 --> 00:31:06.440
No.


00:31:06.440 --> 00:31:06.920
I'm with you.


00:31:06.920 --> 00:31:10.600
And Elena, maybe take a moment and just tell folks what you're up to.


00:31:10.600 --> 00:31:14.280
We didn't give you a really introduction on the kind of work and stuff you're doing.


00:31:14.280 --> 00:31:18.680
Yes. So I think the first time Michael and I talked on Talk Python to me,


00:31:18.680 --> 00:31:22.360
I was still an AI resident at Microsoft Research in Cambridge.


00:31:22.360 --> 00:31:25.400
So I was doing a lot of machine learning research,


00:31:25.400 --> 00:31:29.880
so working in the middle between a full researcher and a full software engineer.


00:31:29.880 --> 00:31:35.640
And now I'm a machine learning engineer here in Germany in a company called Innovex,


00:31:36.200 --> 00:31:43.480
where I do, like I apply machine learning to projects, proper real world problems, which is also very interesting.


00:31:43.480 --> 00:31:51.040
And I do all kinds of stuff now, data engineering. So yeah, I'm always learning new things every day, which is really nice.


00:31:51.040 --> 00:32:05.120
Yeah, that's very cool. I've got a couple of things really quick to share. I was on a cool podcast, TV like show called tech NATO, which was a cool experience. It's a little bit like Python bytes, but for the IT space.


00:32:05.120 --> 00:32:07.120
So that was a lot of fun to be on there.


00:32:07.120 --> 00:32:13.040
And, on YouTube, you can check it out and we play the game Python, Python,


00:32:13.040 --> 00:32:17.720
Python, where we would get partial words out of a headline and we'd have to


00:32:17.720 --> 00:32:21.400
decide, is it Python, the snake Monty Python or Python, the programming


00:32:21.400 --> 00:32:22.720
language that the article is about.


00:32:22.720 --> 00:32:23.320
And that was pretty fun.


00:32:23.320 --> 00:32:24.680
So you could check that out over there.


00:32:24.680 --> 00:32:26.800
Sorry.


00:32:26.800 --> 00:32:28.040
So did you win?


00:32:28.040 --> 00:32:29.460
I completely got crushed.


00:32:29.460 --> 00:32:32.960
I think I got last because I wanted everything to be about Monty Python


00:32:32.960 --> 00:32:34.360
and they're like, no, that's about a snake.


00:32:34.360 --> 00:32:38.100
I'm like, "Oh, come on, that would have been so funny if that was about Monty Python."


00:32:38.100 --> 00:32:39.100
But no.


00:32:39.100 --> 00:32:43.700
Yeah, I let my hopes and dreams get ahead of me.


00:32:43.700 --> 00:32:44.700
Maybe next time.


00:32:44.700 --> 00:32:45.700
Exactly.


00:32:45.700 --> 00:32:47.820
I'll come back for the championship later.


00:32:47.820 --> 00:32:49.860
All right, Brian, what do you think about this joke?


00:32:49.860 --> 00:32:51.220
I haven't looked at it.


00:32:51.220 --> 00:32:52.220
Oh, perfect.


00:32:52.220 --> 00:32:54.060
Then you got to open it up, Annelena, as well.


00:32:54.060 --> 00:32:58.500
This one is, as per usual for us, a visual joke in an audio format, but I think it's


00:32:58.500 --> 00:32:59.820
going to work great.


00:32:59.820 --> 00:33:04.820
So this one is called the only valid measurement of code quality.


00:33:04.820 --> 00:33:09.340
And I know Brian, you're very passionate about high quality code and testing and stuff like


00:33:09.340 --> 00:33:10.340
that.


00:33:10.340 --> 00:33:13.260
Have you seen this metric built into any of the software you've used?


00:33:13.260 --> 00:33:15.220
Well, you can.


00:33:15.220 --> 00:33:20.940
Maybe with some voice recognition and some AI and Elena could put something together


00:33:20.940 --> 00:33:24.420
for us like starting the code review now.


00:33:24.420 --> 00:33:25.420
It looks so funny.


00:33:25.420 --> 00:33:26.420
I love that.


00:33:26.420 --> 00:33:31.420
So this is the only valid measurement of code quality is WTFs per minute.


00:33:31.420 --> 00:33:35.420
I'll try to keep this without the explicit tag, but WTF.


00:33:35.420 --> 00:33:37.420
So there's a comparison here.


00:33:37.420 --> 00:33:40.420
On one hand, we've got the good code review,


00:33:40.420 --> 00:33:43.420
which is still, it's like a door that's closed,


00:33:43.420 --> 00:33:46.420
and you can just see statements of what people's going on.


00:33:46.420 --> 00:33:50.420
It's going on the side, you hear this, "WTF, WTF, what is this?"


00:33:50.420 --> 00:33:51.420
That's the good code.


00:33:51.420 --> 00:33:53.420
The bad code is just full of them.


00:33:53.420 --> 00:33:57.040
It's like WTF, what the WTF is this?


00:33:57.040 --> 00:34:00.460
A dude WTF, WTF.


00:34:00.460 --> 00:34:03.000
I think this really captures code review pretty well.


00:34:03.000 --> 00:34:03.840
- It does.


00:34:03.840 --> 00:34:07.740
- Anyway, the only valid of measurement of code quality,


00:34:07.740 --> 00:34:09.740
WTFs per minute.


00:34:09.740 --> 00:34:10.580
- Definitely.


00:34:10.580 --> 00:34:13.460
All right, well, that wraps it up for this week.


00:34:13.460 --> 00:34:14.500
- All right, thanks Brian.


00:34:14.500 --> 00:34:15.420
Thanks Annalena for being here.


00:34:15.420 --> 00:34:16.820
- Thanks, it was a lot of fun.


00:34:16.820 --> 00:34:17.780
- Yeah, Yvette, bye bye.


00:34:17.780 --> 00:34:18.620
- Bye.


00:34:18.620 --> 00:34:20.020
- Thank you for listening to Python Bytes.


00:34:20.020 --> 00:34:22.500
Follow the show on Twitter @PythonBytes.


00:34:22.500 --> 00:34:25.560
That's Python Bytes, as in B-Y-T-E-S.


00:34:25.560 --> 00:34:28.480
And get the full show notes at pythonbytes.fm.


00:34:28.480 --> 00:34:30.680
If you have a news item you want featured,


00:34:30.680 --> 00:34:33.440
just visit pythonbytes.fm and send it our way.


00:34:33.440 --> 00:34:35.560
We're always on the lookout for sharing something cool.


00:34:35.560 --> 00:34:36.640
This is Brian Okken,


00:34:36.640 --> 00:34:38.720
and on behalf of myself and Michael Kennedy,


00:34:38.720 --> 00:34:40.800
thank you for listening and sharing this podcast


00:34:40.800 --> 00:34:42.440
with your friends and colleagues.

