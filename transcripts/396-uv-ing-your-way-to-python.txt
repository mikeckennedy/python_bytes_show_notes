00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 396, recorded August 13, 2024.

00:00:11 I'm Michael Kennedy.

00:00:12 And I'm Brian Okken.

00:00:13 And this episode is brought to you by Scout APM.

00:00:17 Thank you to Scout for their continued support of the show.

00:00:21 Check out their link in the show notes.

00:00:23 We'll tell you more about them later.

00:00:24 If you want to follow us on the socials, you can find us all over on Mastodon.

00:00:28 Links at the top of the show notes.

00:00:31 And we are on X, although less active than we are on Mastodon, I would say.

00:00:36 When we catch the live show, you can do that at pythonbytes.fm/live.

00:00:41 And it takes you either to the old ones or lets you know about the new one if it's running right there.

00:00:46 So we appreciate when people are there, but audio always, always works as well.

00:00:50 Brian, how are you doing?

00:00:52 I'm good.

00:00:53 Yeah?

00:00:54 I didn't know we were still on X.

00:00:56 Well.

00:00:57 You're on X.

00:00:59 Here's the thing.

00:01:00 Oh, see, you're not on X anymore, okay?

00:01:02 Did you actually delete your account?

00:01:04 I have an account, but I check it like every other month or something like that.

00:01:08 So.

00:01:08 I still get notifications if people will at mention me.

00:01:11 Oh, okay.

00:01:12 I'll see it.

00:01:13 I don't like drop in and cruise through there as much.

00:01:17 I'd be happy on Mastodon, but there's just, I would say 75% of the people that follow us,

00:01:23 interact with us, at least through the show account, probably didn't make the transition.

00:01:28 Okay.

00:01:29 I should pay attention more.

00:01:30 So apologies.

00:01:31 Still there for them.

00:01:32 Yeah.

00:01:33 We're still there for them.

00:01:34 Okay.

00:01:34 Good.

00:01:35 That's all I meant by it.

00:01:37 Okay.

00:01:37 All right.

00:01:38 Well, let's kick it off with your first item.

00:01:39 Okay.

00:01:40 I want to talk, I think I already, I covered UV, a UV article yesterday, a lot yesterday.

00:01:45 Yeah.

00:01:46 Last week.

00:01:46 Well, it's the summertime.

00:01:47 You got to be real careful about your UV index and put it on your, oh, wait, no, not that.

00:01:51 I love UV.

00:01:52 Oh my God.

00:01:52 We could put together a UV index.

00:01:54 It'd be like the, that would be awesome.

00:01:58 Anyway.

00:01:59 So I saw this article, Python packaging is great now.

00:02:03 UV is all you need.

00:02:05 And I'm like, I don't know.

00:02:08 It seems like a little silver bullet dish for me.

00:02:11 But I took a look at it anyway.

00:02:13 This is from Juan Luis Cano Rodriguez.

00:02:17 Awesome name and cool profile picture.

00:02:20 Anyway.

00:02:20 So UV, what is, we like to bash on packaging, but it's just continually getting better.

00:02:28 And especially with people like Brett Cannon trying to continue to make it better.

00:02:34 It's going to, and people at UV at Astral making UV better.

00:02:39 But what, so what is this about?

00:02:41 This article, I didn't really want to completely cover the article, but there's some pretty cool

00:02:46 stuff here.

00:02:47 So bootstrapping, getting a project started is difficult sometimes or knowing what to do.

00:02:54 And, and I've been using a UV for making virtual environments, but, and it's really fast at that.

00:03:00 But I took another look at it.

00:03:03 There's been some updates that I didn't know it did some, some cool stuff.

00:03:07 So one of the highlights here is UV Python.

00:03:11 It manages Python versions.

00:03:13 And I'm like, what it does what?

00:03:15 So I went and checked it out.

00:03:18 And you can, so you don't even have to, so you can go down and say UV Python install and

00:03:25 it installs Python versions for you.

00:03:27 And it's really fast, but you don't have to.

00:03:30 And I'll tell you why in just a sec.

00:03:32 You can, you can install it like that, but you can also say UV Python list and it lists

00:03:38 all the Python versions that it can find on your system.

00:03:41 But if you say UV, V, E, and V, so creating a virtual environment, you can give it a Python

00:03:48 flag with a, with a number.

00:03:50 So you can do list to edit time.

00:03:52 And it tells you not only what versions are there, but also what versions it has available.

00:03:57 So you can, you can say like, if you don't have 3.11 on your system, you can,

00:04:02 you can say 3.11 anyway, and it'll install it.

00:04:05 I'm like, does that really work?

00:04:07 So I checked it out.

00:04:08 I tried it.

00:04:09 I personally, it, it said that it would just do it automatically if it wasn't there.

00:04:15 But I had to add the Python.

00:04:18 There's a flag called Python preference managed, and it's listed here somewhere.

00:04:23 Anyway, Python preference managed.

00:04:26 Dash to ask Python preference.

00:04:28 And then you can say UV managed.

00:04:30 Yeah.

00:04:31 Only managed or managed system or only system.

00:04:33 Gotcha.

00:04:34 Awesome.

00:04:34 Yeah.

00:04:35 Yeah.

00:04:35 Python preference.

00:04:37 But if you say managed, which is supposedly the default, but I had to pass it in anyway,

00:04:42 it just does it.

00:04:43 So I'm like, this is cool.

00:04:45 And I installed like six versions of Python on my Mac yesterday in seconds.

00:04:50 And just, just to have fun to create virtual environments.

00:04:54 And, and it's just neat.

00:04:56 So I only really need a Python with, I usually use Python within virtual environments.

00:05:02 So being able to just install one into a virtual environment is cool.

00:05:07 So what else can we do?

00:05:09 So the, there's other things that UV can do that, like it can initialize a pyproject.toml

00:05:16 for you.

00:05:17 And it sets up, if you do a knit, it sets up pyproject.toml and a readme and a source layout.

00:05:23 It doesn't do a lot, but it gets you started.

00:05:25 The, the thing that I thought was neat is add.

00:05:29 So you can add dependencies to your pyproject.toml with UV add.

00:05:34 And so you don't have to look up the syntax for it.

00:05:36 The other cool thing about it is you can give it the dev flag.

00:05:40 You can say UV add --dev.

00:05:43 Like you can say --dev py test.

00:05:45 And it'll add py test to your development dependencies, which is neat.

00:05:50 So I guess I was going to say packaging is not solved with UV.

00:05:55 But maybe, maybe it is.

00:05:57 There's some pretty cool stuff.

00:05:58 This is awesome.

00:06:00 Yeah.

00:06:00 If you look up, if you say UV help, there's a whole bunch of experimental, experimental items

00:06:07 through here.

00:06:08 So there's run, a knit add.

00:06:10 A lot of these are experimental features.

00:06:12 Tree is cool.

00:06:13 You can do a project dependency tree using UV.

00:06:17 So there's a lot of stuff that I used to use other tools for that UV is doing.

00:06:22 So kind of cool.

00:06:23 Locking, creating lockout.

00:06:25 Self.

00:06:25 I like it.

00:06:26 What does Self do?

00:06:27 Manage the UV executable itself.

00:06:29 Oh, yeah.

00:06:30 Okay.

00:06:31 So there was a lot of drama, honestly.

00:06:34 Not on our show, but on the mailing lists when this was announced.

00:06:38 With UV Python?

00:06:39 Or UV?

00:06:40 No.

00:06:40 With UV pip.

00:06:42 UV pip.

00:06:42 Yeah.

00:06:43 Yeah.

00:06:44 Yeah.

00:06:44 Yeah.

00:06:44 Yeah.

00:06:44 Yeah.

00:06:44 Yeah.

00:06:44 Yeah.

00:06:44 And so the reason that Charlie and team chose UV pip as part of the CLI interface as a sub-command

00:06:53 was so that they had space to do all these other things.

00:06:56 So if you just said UV install, well, is that install the Python thing?

00:07:00 Is that install a package?

00:07:01 Oh, yeah.

00:07:02 Yeah.

00:07:02 Right.

00:07:03 Right.

00:07:03 And so they put that in there as almost like a namespace for all their commands and stuff.

00:07:08 And how much new stuff is under these experimental sections?

00:07:12 Starting to feel like, okay, this is what they had in mind, right?

00:07:16 Yeah.

00:07:16 Yeah.

00:07:17 So the experimental part makes me nervous to put it into my normal everyday workflow a

00:07:23 little bit.

00:07:24 But for personal workflow stuff, why not play with it?

00:07:26 Yeah.

00:07:27 As you're going through this and seeing this title, Python Packaging is great.

00:07:32 UV is all you need.

00:07:33 I think it's all I use these days.

00:07:34 I don't think I use anything else.

00:07:36 There are some systems that the whole, especially with certain firewalls, that I know you can get

00:07:42 around it with UV, but there are some systems that I work on where I have trouble working

00:07:46 with UV, but pip works fine.

00:07:48 Oh, interesting.

00:07:50 Okay.

00:07:50 Yeah.

00:07:51 I have basically three or four, maybe four or five aliases that are just like two or three

00:07:57 letters that will do all the combination, like the full commands with this and that.

00:08:01 So those used to be pip commands.

00:08:04 Now they're UV pip with the different parameters and stuff.

00:08:06 Yeah.

00:08:07 So when UV pip started, came, I tried to alias pip to UV pip and same with virtual environment,

00:08:15 but I realized that I kind of like control.

00:08:18 I like to be able to use both.

00:08:20 So I just sort of taught myself these UV commands.

00:08:23 Yeah.

00:08:24 Yeah.

00:08:24 Sounds good.

00:08:25 Not too hard, is it?

00:08:27 All right.

00:08:27 Well, I have a set of bookends around Python versions to start and end the show here.

00:08:35 So let's start with Python 312.5 was out just last week.

00:08:41 Came out right after the show was released, I think.

00:08:44 So we didn't cover it, but yeah, here we have a brand new version of the most recent version,

00:08:50 Python.

00:08:50 And I just checked, by the way.

00:08:52 What?

00:08:52 Yeah.

00:08:53 And I just checked with the UV Python list.

00:08:57 And I think 312.4 is the latest there, just to give you a sense that like one week into

00:09:03 it, apparently we don't have the latest.

00:09:05 I was kind of hoping like that thing would be super cutting edge on top of it.

00:09:09 So, but I wonder if I, you know what?

00:09:12 It's possible that my UV is over a week out of date and it doesn't know, right?

00:09:17 Something like that.

00:09:17 I don't know.

00:09:18 Anyway, 312.5 is out.

00:09:20 And if you scroll through, I'm linking to the release notes.

00:09:24 Sometimes it's hard to find like what is actually changed in say 312.4 to 312.5.

00:09:31 Because if you go to the, if you go to python.org and click on downloads, a lot of times it'll

00:09:36 just show like, well, here's what's new for 312.

00:09:38 You're like, great.

00:09:39 And from the last one that I had to this, what was that?

00:09:42 But if you go and you can find the release notes, which I'm linking to.

00:09:46 And so there are a lot of releases and changes in just this minor point release.

00:09:52 So we've got a bunch of tests that are fixed.

00:09:55 How about that, Brian?

00:09:56 That's great.

00:09:57 Yeah.

00:09:57 Two different security improvements, patches, I guess.

00:10:01 You know, they're not, don't think they have CVEs.

00:10:04 So there must not be too bad.

00:10:05 Like audit, like missing audit events around certain behaviors.

00:10:09 Like, okay, so you couldn't audit it properly, but it's not, it's not a, you know, all your

00:10:13 bases are belong to us sort of thing.

00:10:15 A bunch of stuff in the library.

00:10:17 So for example, a new version of pip.

00:10:19 So for just a moment, just briefly, when you create a virtual environment, I won't say your

00:10:24 pip is out of date.

00:10:25 But this, things like this, fix crash when importing SSL after the main interpreter starts.

00:10:31 Hmm.

00:10:31 Might want to have that not happen.

00:10:33 Handle value errors raised by os.stat.

00:10:36 Fix some error messages in pickle.

00:10:38 Here's one that's worth paying attention to.

00:10:40 Fix a seg fault in async io.taskit coroutine.

00:10:44 Okay.

00:10:45 You know, a lot of times you think of, at least I think one of the really huge advantages of

00:10:50 Python is when stuff goes wrong, your program doesn't just go poof and go away.

00:10:54 It, it reports the error.

00:10:56 It gives you a chance to catch it.

00:10:57 Right.

00:10:58 You like this Python itself doesn't die.

00:11:00 It knows it's something's gone terribly wrong and it shuts down.

00:11:04 Right.

00:11:04 But the Python, cpython seg faults, then it just goes poof and goes away.

00:11:07 So there's a ton of stuff like this.

00:11:09 So I just wanted to call, call people's attention to all the changes here.

00:11:12 And there's even some that look like performance.

00:11:15 For example, what was it?

00:11:18 f-strings.

00:11:18 If you have an F string that has just one entry into it, it, I think it used to create an abstract

00:11:25 syntax tree to try to build it up.

00:11:27 And they're like, not really needed all that stuff for a single F string.

00:11:31 Our F string was single, entry in it.

00:11:34 So, yeah, that's, that's going to be a nice performance improvement as well.

00:11:39 Is it a dash?

00:11:40 How do they F string it?

00:11:41 Yeah.

00:11:41 So anyway, these are all good things.

00:11:43 Yeah, definitely.

00:11:44 Yeah.

00:11:45 f-strings are getting, getting, getting more secure, more fast, more faster, better.

00:11:49 Faster, better, stronger.

00:11:50 We have the technology.

00:11:51 We can rebuild it.

00:11:52 Okay.

00:11:52 Can you even imagine going back to the time before f-strings?

00:11:55 It was a dark time.

00:11:57 It was a dark time.

00:11:59 My percent, my percent key still has no, no, characters on it.

00:12:04 No, just kidding.

00:12:04 Yeah.

00:12:06 Yeah.

00:12:06 Indeed.

00:12:07 Okay.

00:12:07 And before we go on to the next one, you were probably going to give us some really awesome

00:12:12 segue there, but let's talk about, Scott APM before we move on.

00:12:17 Okay.

00:12:17 Let me tell you real quick about doubt APM.

00:12:21 They're big supporters of Python bytes.

00:12:23 So we appreciate that very much.

00:12:25 So if you are tired of spending hours trying to find the root cause of issues impacting your

00:12:31 performance, then you owe it to yourself to check out scout APM.

00:12:34 They're a leading Python application performance monitoring tool, APM, that helps you identify

00:12:40 and solve performance abnormalities faster and easier.

00:12:43 Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs,

00:12:49 and the dreaded N plus one queries that you can end up.

00:12:51 If you do lazy loading in your ORM, then you say, Oh no, why is it so slow?

00:12:56 Why are you doing 200 database queries for what should be one?

00:12:59 So you can find out things like that.

00:13:00 And it links it back directly to source code.

00:13:02 So you can spend less time in the debugger and healing logs and just finding the problems

00:13:07 and moving on.

00:13:07 And you'll love it because it's built for developers by developers.

00:13:10 It makes it easy to get set up.

00:13:12 Seriously, you can do it in less than four minutes.

00:13:15 So that's awesome.

00:13:15 And the best part is the pricing is straightforward.

00:13:19 You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:13:24 And I just learned this, Brian.

00:13:27 They also have, they provide the pro version for free to all open source projects.

00:13:32 So if you're an open source maintainer and you want to have Scout APM for that project,

00:13:36 just shoot them a message or something on their pricing page about that.

00:13:39 So you can start your free trial and get instant insights today.

00:13:43 Visit pythonbytes.fm/Scout.

00:13:46 The link is in your podcast player show notes as well.

00:13:48 And please use that link.

00:13:49 Don't just search for them because otherwise they don't think you came from us.

00:13:53 And then they'd stop supporting the show.

00:13:55 So please use our link pythonbytes.fm/Scout.

00:13:57 Check them out.

00:13:58 It really supports the show.

00:14:00 Over to you, Brian.

00:14:01 All righty.

00:14:02 I want to talk about Tox a little bit.

00:14:04 We haven't talked, actually brought up Tox for a while, I don't think.

00:14:08 But there's an article on Victor Reimark's blog about compile and use dependencies for multiple

00:14:17 Python versions with Tox.

00:14:19 And it's kind of a neat idea.

00:14:22 I use Tox for incorporating it with GitHub Actions a lot to be able to, well, and just locally to be able to test multiple Python versions and multiple versions of different libraries, how they work together.

00:14:36 Tox is great for things like that.

00:14:38 But one of the things that I didn't think about was doing pinning, like compiling pinned list or lock lists for dependencies for multiple Python versions.

00:14:49 And so this article walks you through kind of why you would want to do that, but then also how to.

00:14:55 And the little trick here, which I think is cool, is that Tox uses an environment name called the env name.

00:15:03 And so there is a way to be able to specify, use that to look at different, the Tox environment that it created, because it creates a little virtual environments when it's running.

00:15:17 But the neat thing about that is you can use it other places.

00:15:20 And the idea around this was to go ahead and use this article uses pip-tools, but really, I think you could use anything.

00:15:29 But to target a compile, like a pip-tools compile and, and send it to using pip compile and using pyproject.tomla as the base file, and then outputting to a requirements in env name, which is, or a env.text or a, like a env-dev.text.

00:15:52 So you could do like a requirements with a requirements file, essentially with, with your environment specified in it.

00:16:00 You could, in this example, it's using a directory, pumping them all into a requirements folder with a directory, but you could also do, you could also do a directory.

00:16:10 And then also, I also like to have a requirements dash whatever.

00:16:15 So even if I had them all filed into a directory, I usually put something like requirements dash 312.txt or something like that.

00:16:23 But having that be able to specify it from the project allows you, allows the little trick to be able to say, oh, here's an example of with the requirements dash.

00:16:34 I like that a little bit better.

00:16:36 But to, to have a requirements target within Tox, so that you can use that to compile your project, compile those.

00:16:47 And while they're running, you're, instead of like in CI or something, can grab those.

00:16:52 And instead of generating a, just whatever it can find, it's a pinned or a locked set of, set of dependencies.

00:17:01 It might be a little bit more consistent.

00:17:04 So, so that locally, the, and the idea would be then locally you, when you're testing yourself, you can say, hey, I'm ready to update my dependencies.

00:17:12 And then it regenerate the, all of the, all of the dev files and then, or all the lock files.

00:17:19 And then later when you're, when CI is running, it doesn't look up dependencies.

00:17:25 It just like knows the fixed links or the fixed versions.

00:17:29 So kind of a neat idea.

00:17:30 I wanted to highlight that.

00:17:32 I also wanted to highlight this because I want to, I like this idea, but I want to do it with UV.

00:17:38 And I want to, I'd like to be, I think I'll play with this.

00:17:42 But if anybody else has time to play with this and see if they can get it working with UV, I'd love to see the outcome.

00:17:48 So.

00:17:48 Yeah, that's awesome.

00:17:49 I imagine you can, because if it was using pip-tools, you know, it's got the pip compile behaviors.

00:17:56 It shouldn't be that hard.

00:17:58 Yeah.

00:17:58 Yeah.

00:17:58 It's awesome.

00:17:58 Yeah.

00:17:59 This looks great.

00:17:59 I love it.

00:18:00 What do you got for us?

00:18:01 You let's, let's close it out with dark.

00:18:05 I did tell you it was the 13th, didn't I?

00:18:07 Yeah.

00:18:09 So I present to you a, this is not exactly a Python thing, but I feel like this is a, anyone who builds web apps or other types of apps and interacts with, you know, users sort of thing.

00:18:20 So superset, if you will, I present to you a catalog of dark patterns for software.

00:18:26 Dun, dun, dun.

00:18:27 Dun, dun, dun.

00:18:28 It says discover a variety of dark pattern examples sorted by category to help you better understand deceptive design practices.

00:18:37 So there's some that you probably would know like bait and switch.

00:18:41 And each one of these has at least one concrete, like case study of evil, badness of darkness, let's say.

00:18:49 So the bait and switch one, which says this tactic lures users with an enticing offer only to change the terms unexpectedly.

00:18:57 So they've got a lift 60% off.

00:19:00 Wouldn't you like 60% off of your next ride?

00:19:02 Just click here and sign up, right?

00:19:04 And then once actually your next two rides, it says right here.

00:19:07 Yeah.

00:19:08 But then actually, as you try to apply it, it turns out it only counts towards 60% off the first $10.

00:19:14 So if you like went to the airport, it was 50 bucks.

00:19:17 It's like, well, you know, it's still 44.

00:19:19 Yeah.

00:19:20 Perfect.

00:19:21 so that's not ideal.

00:19:24 No.

00:19:24 To me, the classic bait switch is the cable companies for internet or, or anything like,

00:19:29 don't you want to add like a home phone, like digital phone?

00:19:33 And then you can add like the sports package and it's only $5 more for the first, you know,

00:19:39 for the first, six months.

00:19:41 And then it's like $150 more.

00:19:43 So I had one just like yesterday.

00:19:45 I had an email from my cell phone provider that said, since you've been here, like so many numbers

00:19:52 of years, we're going to give you 10% off.

00:19:54 I'm like, that's cool.

00:19:55 And I clicked on it and it was 10% off any of your case pair purchases.

00:20:00 Like, so shady.

00:20:03 So shady.

00:20:05 So that, I mean, people probably know that one, but there's other ones that are, interesting.

00:20:09 Like one that I really like is the roach motel.

00:20:13 Okay.

00:20:14 So, you know, what is that?

00:20:16 Oh, it's this dark pattern usually used for subscriptions, making it easy to sign up, but

00:20:21 nearly impossible to cancel.

00:20:23 So there's, you know, you can't, there's not like a just unsubscribe us button.

00:20:27 You've got to call somebody and they try to talk you out of it.

00:20:30 Like I'm a hat, hat tip.

00:20:32 The cable companies again on this.

00:20:34 Yeah.

00:20:35 Right.

00:20:35 But yeah.

00:20:36 There's one, there's one click subscribe.

00:20:38 All right.

00:20:40 Canceled.

00:20:40 So please come down to our office during hours of four and three.

00:20:43 Exactly.

00:20:44 Exactly.

00:20:45 Exactly.

00:20:46 And if you don't get through the line of people backed up trying to get out of it, then,

00:20:49 you'll, you'll, do bad.

00:20:51 Try again the next week.

00:20:52 So there's a bunch of these.

00:20:53 I'll do one more just that people go play with them.

00:20:56 Disguised ads.

00:20:58 Oh, I thought it was disgusting ads.

00:21:00 Disguised ads.

00:21:01 Okay.

00:21:01 Disguised ads, which are themselves disgusting, but the pattern is disguised.

00:21:07 So Microsoft edge, for example, and I feel like Google, this is towards Google Chrome, like

00:21:14 a thing towards, I feel like it's also kind of reverse a lot of like Google does that as

00:21:19 well.

00:21:19 Like, wouldn't you rather use this instead when you search for something?

00:21:23 Anyway, I'll give you the example that's on the page.

00:21:25 So you may encounter not one, but two dark pattern patterns when attempting to get Google

00:21:32 Chrome onto your computer.

00:21:33 When you have Microsoft edge, this happens when you have a empty install of windows.

00:21:37 Because you have edge installed, but not Chrome.

00:21:39 And, or, I mean, I feel like installing Chrome itself is a dark pattern that you should just

00:21:44 avoid use of all the brave Firefox, something else.

00:21:48 But anyway, that's not the point.

00:21:50 There's, there's two here.

00:21:51 And the first one is disguised ads.

00:21:53 The second one is confirm shaming.

00:21:55 And so this is like a good case here.

00:21:57 So if you go over to google.com/chrome in edge and you go to the down, you go to the,

00:22:05 like the, where you get to download it.

00:22:07 It literally has a built into the browser popup that comes out of the menu bar.

00:22:12 No, that dress bar rather says, I hate saving money.

00:22:16 Said no one ever.

00:22:17 Microsoft edge is the best browser for online shopping.

00:22:24 Just by literally visiting the Chrome page, you get this popup.

00:22:28 It's like integrated, not into the HTML, but into the UI of the browser.

00:22:32 That's so funny.

00:22:33 Yeah.

00:22:34 So that's, that's shady.

00:22:35 That's one.

00:22:36 I kind of love the boldness of that though, actually.

00:22:38 But I know.

00:22:40 And then if you go to, go to Bing, I believe this, which is the default search engine and

00:22:46 you just search for Chrome, you get some results.

00:22:50 And then there's like this other part.

00:22:51 Oh no, this is actually in the start, the start menu.

00:22:55 This is in the start menu.

00:22:57 So if you type Chrome, you like try to run Chrome.

00:23:00 Oh dear.

00:23:01 Half of the whole start menu says, try Bing wallpaper.

00:23:04 Switch to the browser recommended by Microsoft.

00:23:07 Download edge.

00:23:08 Yeah.

00:23:09 Oh my God.

00:23:10 Yeah.

00:23:11 So what's cool is it says, look here, like it kind of highlights the various patterns

00:23:16 that are here.

00:23:17 And then like other companies that do similar patterns.

00:23:20 Anyway, I think this is interesting reading.

00:23:22 I think figuring out, like just being aware of this stuff.

00:23:25 So if you're involved in building these things, you're like, Hey guys, people are going to not

00:23:29 like us.

00:23:30 Could we do this a little bit differently?

00:23:32 You know, sometimes marketing will win.

00:23:33 Sometimes developers will win, but.

00:23:35 So are these dark patterns or, or maybe growth hacking?

00:23:41 Yes.

00:23:42 Is this our yacht or is this a dark pattern?

00:23:46 Could it be both?

00:23:47 Hmm.

00:23:48 What could I incorporate these into?

00:23:50 No.

00:23:51 Yeah.

00:23:52 Hashtag you win if you can get like all dark patterns.

00:23:55 Oh, that'd be fun to try to.

00:23:57 It'd be good growth act.

00:23:58 Cause then you could appear under every category.

00:24:00 That'd be like some like link.

00:24:02 Pre-advertising.

00:24:03 Exactly.

00:24:04 Yeah.

00:24:05 Anyway.

00:24:06 Yeah.

00:24:07 This is what I got for you.

00:24:08 Kind of interesting.

00:24:09 Nice.

00:24:10 Extras.

00:24:11 You got any extras you want to share?

00:24:12 The extra I wanted to shout out was, was just, I've been, I've been, I think I have my

00:24:18 recording done for, for HelloPiTest.

00:24:20 The only thing left to record is the summary at the end.

00:24:23 The, I want, well I have the, there's a few things I want to like one extra video and

00:24:28 record, but I want to edit everything first.

00:24:30 I'm in the process of editing and keeping track of everything so that at the end I can go, Hey,

00:24:35 we went through all these things.

00:24:36 So I want to make sure.

00:24:39 Actually the thing that I have left is I want to review all of the command line flags that

00:24:44 I use in the course.

00:24:46 I don't remember all the ones I've used.

00:24:47 So I'm writing down as I'm editing.

00:24:50 So nice.

00:24:51 That's awesome.

00:24:52 But I'm on track for August 19th.

00:24:54 A few people have ordered already.

00:24:55 Thank you so much.

00:24:57 Everyone that's ordered so far.

00:24:59 So love you.

00:25:00 My wife loves you.

00:25:01 We went out to got coffee or off of money we got from this.

00:25:05 So beautiful.

00:25:06 Yeah.

00:25:07 Available for pre-order now.

00:25:08 Yeah.

00:25:09 what you got?

00:25:10 I have just a couple of things.

00:25:13 Django 5.1 released though.

00:25:17 Big deal here is easier guardrails for authentication.

00:25:20 Cause having people access stuff that was supposed to be authenticated, but isn't as bad.

00:25:26 They didn't say that that's my words.

00:25:28 The new and shiny login required middleware is available, which enforces authentication for

00:25:33 all views.

00:25:34 Yeah.

00:25:35 better screen reader support, better HTML semantics.

00:25:40 The second oldest ticket is now fixed with a long awaited query string template tag.

00:25:46 So these things are all good.

00:25:48 And let's see.

00:25:50 What's there now?

00:25:51 I thought there might've been a CVE or something in here, but I don't think so.

00:25:55 I saw Django CVE not too long ago, security deal, but it doesn't seem like it's addressed

00:26:01 with this one.

00:26:02 So it must've been fixed previously.

00:26:03 All right.

00:26:04 So that, and then here's the bookend.

00:26:05 We started with a 312.5 being available.

00:26:08 Well, how about Python 313 looking forward with release candidate one is out.

00:26:14 So this happened a little bit ago, but if you're out there and they say, please test,

00:26:21 you have a package, especially a popular one, please test it with Python 313 ahead of time.

00:26:28 So we can do stuff about it.

00:26:29 And you're like, oh, it's betas.

00:26:31 I'm not going to take the trouble.

00:26:32 I'm not going to worry about it.

00:26:33 Well, it's now officially stable in terms of features, right?

00:26:37 They're not going to add or remove things ideally unless they absolutely have to.

00:26:41 So you should be able to properly start putting energy into testing and playing with this one.

00:26:46 And this one is a big deal because this is the first free threaded Python, which is going

00:26:51 to have significant effects on runtime behavior.

00:26:55 not just the API still work, right?

00:26:57 So it's going to be worth testing with this one.

00:26:59 All those other versions of Python, you have to pay for threading.

00:27:02 This one's free threading.

00:27:03 Yeah, it's awesome.

00:27:05 Finally, finally, it's free.

00:27:07 You just have, yeah, you have to pay by buying other machines and running copies on them to get parallels.

00:27:13 No, I, so I was hoping that UV Python would have 313 there, but it doesn't yet.

00:27:19 So yeah, that would, all right.

00:27:21 UV team out there listening.

00:27:23 Astral, come on Astral.

00:27:24 What are you doing?

00:27:25 Exactly.

00:27:26 Let's, let's get, let's turn UV Python into like, this is how I get the freshest Python, which is actually one of the things that's a little tricky.

00:27:33 Like homebrew, it takes a week for that stuff to show up and other stuff.

00:27:36 Yeah.

00:27:37 A week.

00:27:38 Yeah.

00:27:39 Who wants week old coffee?

00:27:40 No, no.

00:27:41 Your threads are totally stale, but.

00:27:44 It's a, it's a goofy episode, man.

00:27:47 It is.

00:27:48 All right.

00:27:49 I know you got the joke for us this week.

00:27:50 So.

00:27:51 Okay.

00:27:52 Well, actually, before we get onto this, I was just thinking because you, you wanted, when

00:27:56 you were talking about Django, I thought of a new, of a, a dorky joke.

00:28:02 So what do you call a 17 year old insect?

00:28:05 A minor, a minor bug.

00:28:06 Oh, that's pretty good.

00:28:09 okay.

00:28:10 So, I saw this artist technical, a, is it ours or ARS?

00:28:14 I don't know.

00:28:15 ARS technica.

00:28:16 I say ours, but I know now you say that I'm not sure I've ever heard anyone pronounce it.

00:28:21 So.

00:28:22 Okay.

00:28:22 We're going with ours.

00:28:23 Cause it's lowercase.

00:28:24 Ars technica, had an article parody site.

00:28:27 Clown strike refuses to bow down to cloud strikes, bogus DMCA takedown.

00:28:32 so there's an article here.

00:28:34 I wanted to check it out myself.

00:28:36 so if you go to, clown strike dot LOL.

00:28:41 and we'll refresh it.

00:28:43 see if it, it starts out looking like crowd strike, but it has a little goofy hat on

00:28:49 it.

00:28:50 and then if you put, I'm not going to play the music now, but, if you play music,

00:28:55 it's got like some, some goofy little music that goes along with it.

00:28:57 And there's a clown.

00:28:58 That's it.

00:28:59 That's just, it's just funny.

00:29:00 but, now if you click on the left, it tells you about all this.

00:29:06 Well, it tells you the, the ARS technica article, but it also talks about this story about how

00:29:11 they had these takedown, crowd strike tried to take them down and it's just silly.

00:29:17 there's some other stuff here too, that I think it's just hilarious.

00:29:20 Like, the what scam advisor lists clown strike, LOL as a highly trusted might be safe.

00:29:29 It's like nothing there except for just this goofy little picture.

00:29:34 And, but, but there are some, some, some other stuff in it.

00:29:38 You can read the whole story and all the letters about, or all the emails, the back and forth

00:29:42 about the takedowns.

00:29:43 And actually, there, I was surprised to find out that they had to like cloud for cloud

00:29:49 flare was, was, was hosting this, but it, it like accepted the takedown at first.

00:29:57 and eventually back down, but even after, but after it got moved, but I'm surprised that,

00:30:03 I'm surprised that it got taken down so fast because obviously this is a parody site.

00:30:09 and parody is protected.

00:30:11 There's no way like even a cursory look at this.

00:30:13 Anybody would think this is a realistic, yeah.

00:30:17 It's not trying to impersonate it or anything like that.

00:30:20 Yeah.

00:30:21 Just making fun of the situation.

00:30:22 And, and I think that they just probably, I mean, they really should have just ignored

00:30:26 it.

00:30:27 And now clown strike is known and we're talking about it.

00:30:30 And ours technique is talking about it.

00:30:31 Anyway.

00:30:32 exactly.

00:30:33 So it's the barber strain stand effect.

00:30:34 Right?

00:30:35 Yeah.

00:30:36 So, oh boy.

00:30:37 So, oh boy.

00:30:38 Anyway.

00:30:39 Yeah.

00:30:39 I mean, I'm somewhat sympathetic to crowd strike, but this is, this is a bad look.

00:30:43 You know, if you've got a right native code that runs in the kernel, the smallest mistake.

00:30:49 And it has to be like updated within hours of you learning new information.

00:30:53 I don't know.

00:30:54 It's, it's tough.

00:30:55 It's apparently it's one of the, the best antivirus systems out there that actually works.

00:31:00 And isn't just, you know, you wouldn't talk dark patterns.

00:31:02 Like a lot of this antivirus clean your computer stuff is really shit shady, but boy, did they

00:31:08 cause a problem that I would not want to be in their shoes.

00:31:11 No.

00:31:12 Well, I don't know.

00:31:13 I mean, a couple of weeks of shame over you get billions of dollars to pay for that shame.

00:31:18 So, yeah, I think they're going to get a lot of lawsuits from a lot of angry fortune 500

00:31:23 companies.

00:31:24 And even if they win defending them, it's going to, going to hurt them bad.

00:31:27 If it doesn't kill them, it's going to hurt them bad.

00:31:29 So.

00:31:30 Okay.

00:31:31 So yeah.

00:31:31 Sympathies out there for somebody.

00:31:33 Some, a little bit, a little bit, a little bit, but I feel like they've certainly earned

00:31:40 this website and wow.

00:31:41 I didn't know.

00:31:42 LOL was a top level domain.

00:31:43 Yeah.

00:31:44 It's funny.

00:31:45 It makes me laugh.

00:31:46 Yeah.

00:31:47 What's that stand?

00:31:48 What is it?

00:31:49 What is it?

00:31:50 Is it like a country?

00:31:51 Is it literally lol?

00:31:52 Like laugh out loud?

00:31:53 Or is it because they're like dot pizza is a top level domain as well, which just seems

00:31:58 wrong.

00:31:59 Oh, that does seem wrong.

00:32:01 Really?

00:32:02 I think so.

00:32:03 I'll have to check that out.

00:32:04 Like pepperoni dot pizza and like, you know, Hawaiian.

00:32:06 Honestly.

00:32:07 Yeah.

00:32:08 Pineapple.

00:32:09 Maybe we need to get some domains.

00:32:10 Yeah.

00:32:11 Anyway.

00:32:12 Okay.

00:32:13 Awesome.

00:32:14 Great.

00:32:15 All right.

00:32:15 Thanks for being here like always.

00:32:16 Thank you.

