
00:00:00.000 --> 00:00:03.000
Hello and welcome to Python Bytes.


00:00:03.000 --> 00:00:05.920
This is episode 20 where we are delivering


00:00:05.920 --> 00:00:09.280
Python news and headlines directly to your earbuds.


00:00:09.280 --> 00:00:10.560
I'm Michael Kennedy.


00:00:10.560 --> 00:00:11.640
I'm Brian Ockett.


00:00:11.640 --> 00:00:14.000
We've got a bunch of stuff lined up for you today.


00:00:14.000 --> 00:00:16.920
I'm really excited to share especially this first article,


00:00:16.920 --> 00:00:18.880
which is so clever that you chose Brian.


00:00:18.880 --> 00:00:20.840
Before we do, I want to say thank you.


00:00:20.840 --> 00:00:25.520
Thank you to Rollbar who's back to sponsor a bunch more Python bytes.


00:00:25.520 --> 00:00:28.240
We'll talk more about Rollbar later, but thanks Rollbar.


00:00:28.240 --> 00:00:28.800
That's awesome.


00:00:28.800 --> 00:00:31.000
- Yep, so we were just talking about pictures,


00:00:31.000 --> 00:00:34.000
like I have many gigabytes of pictures,


00:00:34.000 --> 00:00:37.400
and if you ran a website that accepted uploads


00:00:37.400 --> 00:00:39.920
in large numbers of pictures,


00:00:39.920 --> 00:00:41.640
how do you deal with all that data,


00:00:41.640 --> 00:00:44.240
especially there's probably a lot of duplicate data, right?


00:00:44.240 --> 00:00:47.240
- I'm not sure, and so this is an interesting article.


00:00:47.240 --> 00:00:50.240
There's an article from JetSetter.com,


00:00:50.240 --> 00:00:53.840
and they're an invitation-only travel community,


00:00:53.840 --> 00:00:56.360
but the article is duplicate image detection


00:00:56.360 --> 00:00:59.800
with perceptual hashing in Python.


00:00:59.800 --> 00:01:01.800
And that actually sounds more--


00:01:01.800 --> 00:01:03.760
- Perceptual hashing, that's awesome.


00:01:03.760 --> 00:01:06.440
- Perceptual hashing, it's awesome.


00:01:06.440 --> 00:01:08.800
And the idea is they've got, I mean,


00:01:08.800 --> 00:01:10.600
the site's got a bunch of pictures


00:01:10.600 --> 00:01:12.600
of different places around the world,


00:01:12.600 --> 00:01:14.680
and they don't want pictures


00:01:14.680 --> 00:01:17.160
that are mostly close to each other.


00:01:17.160 --> 00:01:19.320
I mean, for family photos, you got a ton


00:01:19.320 --> 00:01:20.160
that are close to each other,


00:01:20.160 --> 00:01:22.720
but I get for like, there's a lot of cases


00:01:22.720 --> 00:01:24.880
where you don't want things that are almost the same.


00:01:24.880 --> 00:01:31.380
Right, like pictures of hotels or pictures of a marina to say here's the view out of the hotel.


00:01:31.380 --> 00:01:36.280
Like if they're going to have a listing on like some location, some hotel, and they ask people to upload them,


00:01:36.280 --> 00:01:38.880
they don't need like a hundred ones from this one view.


00:01:38.880 --> 00:01:43.380
And if you check out JetSetter.com, it is an intensely photo-heavy site.


00:01:43.380 --> 00:01:46.480
Like I'm pretty impressed with the number of photos on that page.


00:01:46.480 --> 00:01:50.680
With the idea of perceptual hashing, I was definitely interested in reading about this,


00:01:50.680 --> 00:01:54.320
And I expected it to be a fairly complicated algorithm,


00:01:54.320 --> 00:01:56.600
but it's actually ingenious.


00:01:56.600 --> 00:02:01.560
And they use Python and transfer the image down


00:02:01.560 --> 00:02:06.080
to just a 9 by 9 square of gray values, even.


00:02:06.080 --> 00:02:07.880
I don't get how that's enough information,


00:02:07.880 --> 00:02:12.560
but it is apparently enough to determine whether or not


00:02:12.560 --> 00:02:14.960
an image is close to another image.


00:02:14.960 --> 00:02:17.040
And they do a delta.


00:02:17.040 --> 00:02:19.320
I'm not going to be able to-- can you explain that much


00:02:19.320 --> 00:02:19.820
better?


00:02:19.820 --> 00:02:20.360
I can try.


00:02:20.360 --> 00:02:25.360
I mean, when I read, we take a five megapixel image


00:02:25.360 --> 00:02:30.160
and we generate 128 bit hash, and that means a thing.


00:02:30.160 --> 00:02:33.000
Like that means uniqueness, or actually it means similarity,


00:02:33.000 --> 00:02:34.720
which is actually more important.


00:02:34.720 --> 00:02:36.680
I was like, okay, I have to figure this out.


00:02:36.680 --> 00:02:39.880
And I guess what they do is they take a large image


00:02:39.880 --> 00:02:42.560
and they like average it down to a nine by nine,


00:02:42.560 --> 00:02:46.580
or they say for larger images, like a 17 by 17 image.


00:02:46.580 --> 00:02:49.000
And to determine the similarity,


00:02:49.000 --> 00:02:51.200
maybe somebody's off by five feet to one side


00:02:51.200 --> 00:02:53.040
or the other to take a picture of a hotel


00:02:53.040 --> 00:02:56.440
or a view or something, but if you like kind of


00:02:56.440 --> 00:02:59.240
average it down to that nine by nine,


00:02:59.240 --> 00:03:01.040
that's where the similarities kind of collapse


00:03:01.040 --> 00:03:03.040
into those grids, and then they run an algorithm


00:03:03.040 --> 00:03:05.200
on that grayscale grid, right?


00:03:05.200 --> 00:03:08.360
- Yeah, and then the interesting thing is


00:03:08.360 --> 00:03:10.640
that of course it's clear to me that you could come up


00:03:10.640 --> 00:03:13.200
with a hash algorithm for an image,


00:03:13.200 --> 00:03:17.720
but the difference in the hashes is enough


00:03:17.720 --> 00:03:19.600
to tell you how close the image is.


00:03:19.600 --> 00:03:20.760
- Yeah, and it's actually the opposite


00:03:20.760 --> 00:03:22.520
that really blows me away is like,


00:03:22.520 --> 00:03:26.040
two similar images that are not the same


00:03:26.040 --> 00:03:27.360
generate the same hash.


00:03:27.360 --> 00:03:28.560
That's what's the magic.


00:03:28.560 --> 00:03:29.920
Like, that totally blows my mind.


00:03:29.920 --> 00:03:31.200
I could see like, well, obviously,


00:03:31.200 --> 00:03:32.600
hashes are different, images are different,


00:03:32.600 --> 00:03:35.080
but images are similar, not the same,


00:03:35.080 --> 00:03:37.040
hash the same, that blows me away.


00:03:37.040 --> 00:03:40.160
- Yeah, and I like it that it's not that complicated


00:03:40.160 --> 00:03:42.240
of an algorithm, and it's a fun read.


00:03:42.240 --> 00:03:44.440
- Yeah, that's, you know, so I think,


00:03:44.440 --> 00:03:46.400
there's a couple levels of interesting


00:03:46.400 --> 00:03:47.780
that you brought up this article.


00:03:47.780 --> 00:03:49.580
And one of them I think is really interesting


00:03:49.580 --> 00:03:51.040
is when I first heard that, I thought,


00:03:51.040 --> 00:03:54.360
okay, one, this is gonna be super hard, super computational.


00:03:54.360 --> 00:03:57.360
Two, maybe this is like machine learning


00:03:57.360 --> 00:03:59.000
or something like that, like two machines,


00:03:59.000 --> 00:04:01.040
like two images given to an AI,


00:04:01.040 --> 00:04:02.960
like a deep learning neural network or something.


00:04:02.960 --> 00:04:04.960
So yeah, these are sufficiently similar


00:04:04.960 --> 00:04:06.240
in ways that I don't really,


00:04:06.240 --> 00:04:07.280
people don't really understand,


00:04:07.280 --> 00:04:11.000
but magic on GPUs and lots of neurons,


00:04:11.000 --> 00:04:12.280
it works out somehow.


00:04:12.280 --> 00:04:15.360
But the fact that it's really, really a simple algorithm


00:04:15.360 --> 00:04:18.720
is what's I think kind of special about it, right?


00:04:18.720 --> 00:04:21.740
It's like, hey, there's still lots of places to be clever


00:04:21.740 --> 00:04:24.760
and not just throw AI plus GPUs at a thing.


00:04:24.760 --> 00:04:26.120
- Yes, definitely, yeah.


00:04:26.120 --> 00:04:29.280
- And not only that, you get to take it with you, right?


00:04:29.280 --> 00:04:30.480
It's available on GitHub.


00:04:30.480 --> 00:04:31.960
- Yeah, they do have it.


00:04:31.960 --> 00:04:34.960
It's a, what is it, pybktree?


00:04:34.960 --> 00:04:37.240
- Pybktree, whatever that means.


00:04:37.240 --> 00:04:38.520
Okay, awesome.


00:04:38.520 --> 00:04:40.160
I'm sure it's part of the algorithm.


00:04:40.160 --> 00:04:43.320
Excellent, so keeping with open source projects


00:04:43.320 --> 00:04:46.240
that you can go find and just grab and do cool things with.


00:04:46.240 --> 00:04:51.000
One of the listeners pointed me towards, pointed us towards Google Open Source.


00:04:51.000 --> 00:04:56.760
In fact, it was the guy from Google Fire, Python Fire, which we'll talk more about later.


00:04:56.760 --> 00:04:59.120
But he has one of the projects there.


00:04:59.120 --> 00:05:04.680
And on Google Open Source, they've basically created like a listing directory of all of


00:05:04.680 --> 00:05:05.680
the open source projects.


00:05:05.680 --> 00:05:08.320
Now, many of the projects still live on GitHub.


00:05:08.320 --> 00:05:12.960
But this is like a place where you can go search and analyze and discover projects from


00:05:12.960 --> 00:05:16.920
Google. And what's cool is you can sort by language. So show me the Python


00:05:16.920 --> 00:05:20.680
projects, show me the C++ projects, whatever. So I grabbed six or seven


00:05:20.680 --> 00:05:24.560
interesting projects. I just wanted to run them down for you, Brian. Okay. Yeah, so


00:05:24.560 --> 00:05:29.800
one of them is Subprocess32, a reliable subprocess module for Python 2.


00:05:29.800 --> 00:05:35.160
Apparently subprocess that built in is not reliable for Python 2. I don't know.


00:05:35.160 --> 00:05:39.760
But I didn't know that either. That's partly why it's interesting to me.


00:05:39.760 --> 00:05:41.720
but also, you know, there it is, that's cool.


00:05:41.720 --> 00:05:43.600
Grumpy, we've talked about Grumpy before.


00:05:43.600 --> 00:05:46.940
Grumpy is Python on Go instead of Python on CPython.


00:05:46.940 --> 00:05:47.780
- Yeah. - Yeah, that's a good one.


00:05:47.780 --> 00:05:49.960
- There's Python Fire, of course.


00:05:49.960 --> 00:05:51.680
- Python Fire, of course, like I pointed out.


00:05:51.680 --> 00:05:54.520
That's a way to take any Python object or module


00:05:54.520 --> 00:05:56.800
and turn it into a command line interface.


00:05:56.800 --> 00:05:59.920
There's a Python client for Google Maps services.


00:05:59.920 --> 00:06:03.760
So if you wanna consume Google Maps from Python, do it.


00:06:03.760 --> 00:06:08.080
There's Hue, H-Y-O-U, a Python interface


00:06:08.080 --> 00:06:10.940
for manipulating Google Spreadsheets.


00:06:10.940 --> 00:06:11.780
That's cool, right?


00:06:11.780 --> 00:06:13.780
- Okay, I'm gonna have to try that out, that's me.


00:06:13.780 --> 00:06:15.260
- Yeah, I mean, I've seen the stuff


00:06:15.260 --> 00:06:19.620
for working with docxlsx files, the Microsoft Office ones,


00:06:19.620 --> 00:06:21.180
but I didn't know about the Google Spreadsheets,


00:06:21.180 --> 00:06:22.420
so this is cool.


00:06:22.420 --> 00:06:24.220
Another thing that's always tricky for me


00:06:24.220 --> 00:06:26.020
is working with OAuth, right?


00:06:26.020 --> 00:06:28.060
There's always this, like, I've got some app,


00:06:28.060 --> 00:06:30.140
the app needs to go, like, open a browser window,


00:06:30.140 --> 00:06:33.020
and there's some sort of funky callback, and things happen.


00:06:33.020 --> 00:06:36.720
And so one of the places that's especially challenging,


00:06:36.720 --> 00:06:39.480
I think is over a command line interface.


00:06:39.480 --> 00:06:43.500
Well, there's OAuth 2 L, I think it's L.


00:06:43.500 --> 00:06:45.740
And what that is, is it's a way,


00:06:45.740 --> 00:06:48.780
a command line tool to get an OAuth token.


00:06:48.780 --> 00:06:50.180
Just let that sink in for you.


00:06:50.180 --> 00:06:51.020
- Okay.


00:06:51.020 --> 00:06:51.840
- So I wanna log in as Google,


00:06:51.840 --> 00:06:53.800
I can do that like through my app.


00:06:53.800 --> 00:06:56.320
Like I could basically create a shell script


00:06:56.320 --> 00:06:59.560
that through the CLI gets an OAuth token from the user.


00:06:59.560 --> 00:07:01.440
That's pretty interesting.


00:07:01.440 --> 00:07:04.440
Okay, and also I talked about the Google Maps API.


00:07:04.440 --> 00:07:08.420
Like that sounds like that's something that's really hard to like unit test or


00:07:08.420 --> 00:07:10.820
test at all without actually going to Google.


00:07:10.820 --> 00:07:12.880
So there's a mock maps API.


00:07:12.880 --> 00:07:16.780
So a small little app engine app for testing, like basically


00:07:16.780 --> 00:07:18.380
mocking out Google maps API.


00:07:18.380 --> 00:07:22.700
And last but not least TensorFlow, the amazing deep


00:07:22.700 --> 00:07:24.720
learning machine learning stuff.


00:07:24.720 --> 00:07:31.340
That's about 50% Python, 50% C++ and a lot of GPUs in action there.


00:07:31.420 --> 00:07:39.180
And I don't know where I read this, but I think that this Google open source location is not just all projects.


00:07:39.180 --> 00:07:41.980
It's projects that they consider still active.


00:07:41.980 --> 00:07:43.500
Okay. Yeah, that's cool.


00:07:43.500 --> 00:07:45.740
I mean, obviously you don't want just like a dumping ground, right?


00:07:45.740 --> 00:07:47.180
Yeah, cool.


00:07:47.180 --> 00:07:49.260
I mean, everything in here looked pretty neat and fresh.


00:07:49.260 --> 00:07:49.980
So it's good.


00:07:49.980 --> 00:07:54.140
It's a fairly neat interface too, with, I guess, with panels and stuff.


00:07:54.140 --> 00:07:55.300
Yeah, it's worth checking out.


00:07:55.300 --> 00:07:56.780
Okay, what do we got next?


00:07:56.780 --> 00:07:57.660
Oh, next is me.


00:07:57.660 --> 00:08:00.260
Yeah, more machine learning type stuff.


00:08:00.300 --> 00:08:04.700
Yeah, so there's a article from Jason Brownlee called,


00:08:04.700 --> 00:08:06.260
and I just clicked away,


00:08:06.260 --> 00:08:08.940
"How to Handle Missing Data with Python."


00:08:08.940 --> 00:08:11.820
And this is something that I definitely deal with,


00:08:11.820 --> 00:08:13.900
measurement values that deal with at work,


00:08:13.900 --> 00:08:15.820
but there's, the gist of it is,


00:08:15.820 --> 00:08:17.740
is a lot of times you're dealing with a lot,


00:08:17.740 --> 00:08:19.660
large or small data sets,


00:08:19.660 --> 00:08:22.540
and some of the values are missing.


00:08:22.540 --> 00:08:24.300
And there's a whole bunch of different ways


00:08:24.300 --> 00:08:25.900
you can deal with missing data,


00:08:25.900 --> 00:08:28.300
but there are a few of them that he talks about


00:08:28.300 --> 00:08:32.260
are replacing, you have to know what the magic number is


00:08:32.260 --> 00:08:34.660
that some data collection will fill in a zero,


00:08:34.660 --> 00:08:38.800
maybe if there's no data, or some other known number,


00:08:38.800 --> 00:08:41.320
but all your math is gonna get messed up


00:08:41.320 --> 00:08:44.140
if you actually just leave that there.


00:08:44.140 --> 00:08:46.060
So there's a couple ways to get around it.


00:08:46.060 --> 00:08:51.060
One of the ways he lists is using magic not a number values,


00:08:51.060 --> 00:08:54.480
and I think pandas can deal with that correctly


00:08:54.480 --> 00:08:55.740
and not average those in.


00:08:55.740 --> 00:08:57.220
- Yeah, what I think is really nice about it


00:08:57.220 --> 00:09:00.140
is like I could be given a CSV file


00:09:00.140 --> 00:09:02.660
or some sort of data thing, set of data,


00:09:02.660 --> 00:09:05.900
and I could like work my way through it


00:09:05.900 --> 00:09:08.980
and maybe find the bad data and fill it in potentially,


00:09:08.980 --> 00:09:12.020
but his fix are like you run this one line in Pandas


00:09:12.020 --> 00:09:14.220
and magic happens and it's better, right?


00:09:14.220 --> 00:09:16.020
It's like the fix is so much better


00:09:16.020 --> 00:09:17.780
than the fixes that I would come up with.


00:09:17.780 --> 00:09:20.200
- Yeah, and I do like that he's talking about


00:09:20.200 --> 00:09:22.340
different ways to deal with it with NumPy


00:09:22.340 --> 00:09:24.100
even without Pandas also


00:09:24.100 --> 00:09:26.380
because he might not be using Pandas,


00:09:26.380 --> 00:09:29.920
But one of the ways you would do it with any math package


00:09:29.920 --> 00:09:33.680
really would be to, oh, I guess I don't know how to do that.


00:09:33.680 --> 00:09:35.300
Actually, never mind.


00:09:35.300 --> 00:09:37.600
Filling in the, you'd somehow have to find


00:09:37.600 --> 00:09:41.300
all of the values anyway and fill them in with,


00:09:41.300 --> 00:09:44.620
like one of the ways is if you're calculating an average,


00:09:44.620 --> 00:09:47.320
calculate the average of everything else


00:09:47.320 --> 00:09:50.020
and then fill in the blanks with the average number.


00:09:50.020 --> 00:09:51.780
- Right, I guess it depends on what you're gonna do.


00:09:51.780 --> 00:09:53.300
Are you gonna average it or are you gonna max it,


00:09:53.300 --> 00:09:54.140
are you gonna min it?


00:09:54.140 --> 00:09:55.420
You could like push that through, right?


00:09:55.420 --> 00:09:56.420
- Yeah. - Yeah, interesting.


00:09:56.420 --> 00:09:59.580
- The best solution definitely I think is using the


00:09:59.580 --> 00:10:02.940
not a number and letting the libraries


00:10:02.940 --> 00:10:03.900
take care of it for you.


00:10:03.900 --> 00:10:07.140
But I wanted to bring this up partly because


00:10:07.140 --> 00:10:09.340
anybody that's working with data collection


00:10:09.340 --> 00:10:13.240
or doing math with that has to deal with the fact


00:10:13.240 --> 00:10:15.240
that sometimes there's not numbers there


00:10:15.240 --> 00:10:16.500
and you have to deal with it.


00:10:16.500 --> 00:10:18.100
- Okay, awesome.


00:10:18.100 --> 00:10:20.980
He's from machinelearningmastery.com I think.


00:10:20.980 --> 00:10:23.980
And he's got just a ton of cool stuff


00:10:23.980 --> 00:10:25.480
going on over there, right?


00:10:25.480 --> 00:10:27.860
It's not just this one article, right?


00:10:27.860 --> 00:10:29.940
So if you're into these kinds of things, definitely check it out.


00:10:29.940 --> 00:10:31.780
Yeah, it looks good.


00:10:31.780 --> 00:10:37.460
Okay, so what's up next is the HugRest framework.


00:10:37.460 --> 00:10:40.780
But before we get to them, I want to give Rollbar a hug.


00:10:40.780 --> 00:10:41.780
Rollbar is awesome.


00:10:41.780 --> 00:10:45.460
I've been, as people know, I've been using them for a long time on the websites and the


00:10:45.460 --> 00:10:48.020
websites are getting more and more traffic.


00:10:48.020 --> 00:10:52.720
And I recently, I'm not sure whether it was a wise decision or not, because I'm really


00:10:52.720 --> 00:10:57.360
busy with other stuff, but I just got really frustrated with the way my servers are working,


00:10:57.360 --> 00:11:00.880
the way I could sort of move them around and performance and stuff.


00:11:00.880 --> 00:11:01.880
So I said, that's it.


00:11:01.880 --> 00:11:05.960
One day I just woke up, said, that's it, converting it all to MongoDB.


00:11:05.960 --> 00:11:07.920
And so last, that was last week.


00:11:07.920 --> 00:11:12.720
And that took like three days of rewriting all my sites to Mongo, which I really think


00:11:12.720 --> 00:11:13.720
Mongo is the right choice.


00:11:13.720 --> 00:11:16.460
And I'm just loving the way it's working now.


00:11:16.460 --> 00:11:21.800
But that was a pretty serious, like take the guts out of all my web apps and stick in a


00:11:21.800 --> 00:11:26.240
new set of guts that are similar but not entirely compatible.


00:11:26.240 --> 00:11:31.360
I spent a little time with roll bar, and they they they helped me out and find a few problems


00:11:31.360 --> 00:11:36.120
like where maybe types used to be strings, I compare them where one was no longer a string


00:11:36.120 --> 00:11:37.160
and they didn't compare the same.


00:11:37.160 --> 00:11:40.500
So I got weird errors, but roll bar made it super easy to track that down.


00:11:40.500 --> 00:11:47.680
So if you want to have reliability, and most importantly, awareness of the state of your


00:11:47.680 --> 00:11:52.240
apps, plug in Rollbar to your web apps. You can use it in Pyramid, Flask, Django,


00:11:52.240 --> 00:11:57.080
whatever. Just plug it in and you'll get notifications right away. So be sure to


00:11:57.080 --> 00:12:01.680
visit rollbar.com/pythonbytes and you'll get a special offer to get


00:12:01.680 --> 00:12:06.040
started there. And I bet that you definitely noticed those messages but I


00:12:06.040 --> 00:12:09.800
didn't even notice you were mucking with things and I'm pretty sure that nobody


00:12:09.800 --> 00:12:13.400
else did or very few people did either. Yeah that's true and thank you for


00:12:13.400 --> 00:12:17.600
saying that but I actually know how many people ran into problems right? There


00:12:17.600 --> 00:12:21.440
was a couple, but I got an email from a couple people saying,


00:12:21.440 --> 00:12:23.240
hey, I had this problem with your app.


00:12:23.240 --> 00:12:26.120
I'm like, I know, but I didn't know your email address.


00:12:26.120 --> 00:12:28.920
But I know what your problem was, and it's already fixed.


00:12:28.920 --> 00:12:31.360
I just couldn't contact them, because they hadn't actually


00:12:31.360 --> 00:12:32.800
created an account yet.


00:12:32.800 --> 00:12:35.160
So it was really nice to be able to just say, yeah,


00:12:35.160 --> 00:12:37.540
actually, the problem you're telling me is already fixed.


00:12:37.540 --> 00:12:38.800
I just couldn't communicate that back to you.


00:12:38.800 --> 00:12:40.120
Really sorry about that.


00:12:40.120 --> 00:12:40.800
It's awesome.


00:12:40.800 --> 00:12:43.440
You seem like a big team then because of that.


00:12:43.440 --> 00:12:45.320
Oh, yeah, definitely.


00:12:45.320 --> 00:12:47.820
All the folks here in the cubicle farm, we're busy.


00:12:47.820 --> 00:12:49.200
(both laughing)


00:12:49.200 --> 00:12:51.920
You know, one of the next things that I wanna do


00:12:51.920 --> 00:12:54.280
is build some nice APIs.


00:12:54.280 --> 00:12:57.240
And I think it's really an interesting time


00:12:57.240 --> 00:12:58.740
for the web in Python.


00:12:58.740 --> 00:13:01.680
There's a lot of flowers blooming, if you will.


00:13:01.680 --> 00:13:03.920
Right, we've got Pyramid, Django, Flask,


00:13:03.920 --> 00:13:06.280
those guys are all doing super stuff,


00:13:06.280 --> 00:13:08.120
and like most of my stuff's Pyramid.


00:13:08.120 --> 00:13:10.560
But we've got to Pronto coming along, Sanic,


00:13:10.560 --> 00:13:14.520
and another one that I just learned about is called Hug.


00:13:14.520 --> 00:13:15.880
at hug.rest.


00:13:15.880 --> 00:13:18.000
How's that for a name and a domain?


00:13:18.000 --> 00:13:19.180
- Yeah, actually it is.


00:13:19.180 --> 00:13:21.160
It's www.hug.rest.


00:13:21.160 --> 00:13:22.560
- Hug.rest, that's beautiful.


00:13:22.560 --> 00:13:26.200
So Hug is a Python web framework


00:13:26.200 --> 00:13:29.800
just specifically for building restful,


00:13:29.800 --> 00:13:33.840
documented, documentable, versionable APIs.


00:13:33.840 --> 00:13:37.440
And it's built both for like super simplicity


00:13:37.440 --> 00:13:39.280
and flexibility as well as performance.


00:13:39.280 --> 00:13:41.140
So I started looking this up.


00:13:41.140 --> 00:13:43.160
Wow, this is quite interesting.


00:13:43.160 --> 00:13:48.880
Okay, so the idea is you can create an API once and you can consume it in all these different


00:13:48.880 --> 00:13:49.880
ways.


00:13:49.880 --> 00:13:55.280
So you can import it as a module or a package into your project and use the API that way.


00:13:55.280 --> 00:14:01.560
You can communicate it obviously over HTTP is like a restful API, or it also has a CLI


00:14:01.560 --> 00:14:03.800
command line interface way to expose that.


00:14:03.800 --> 00:14:07.200
So if you write like some kind of web app, or functionality, you want to expose over


00:14:07.200 --> 00:14:10.280
an API, but you also want to call it locally.


00:14:10.280 --> 00:14:12.160
It's like the same code.


00:14:12.160 --> 00:14:13.160
It's interesting.


00:14:13.160 --> 00:14:15.360
It's also written in Python 3.


00:14:15.360 --> 00:14:18.400
It's uses Cython all over the place.


00:14:18.400 --> 00:14:20.100
So it's like super fast.


00:14:20.100 --> 00:14:24.020
It's one of the fastest web frameworks out there for these kinds of things.


00:14:24.020 --> 00:14:27.280
At least the non async version, let's say.


00:14:27.280 --> 00:14:29.080
If you compare those, it's pretty cool.


00:14:29.080 --> 00:14:30.400
It's got a decorator model.


00:14:30.400 --> 00:14:31.640
So the code looks really clean.


00:14:31.640 --> 00:14:35.720
Yeah, and the decorator model is cool because the decorator model will do like version management,


00:14:35.720 --> 00:14:39.320
you can have like version one and version two of the API that have like different data


00:14:39.320 --> 00:14:44.840
formats and they can just coexist. You get automatic documentation based on


00:14:44.840 --> 00:14:48.680
that like it'll do type annotations and then like use the type annotations as


00:14:48.680 --> 00:14:52.480
part of the documentation and things like that. It's a pretty cool simple


00:14:52.480 --> 00:14:55.880
little framework so you know hug for those guys nice job.


00:14:55.880 --> 00:14:59.440
Definitely. Speaking of CLIs. Yeah speaking of CLIs I was I'm actually


00:14:59.440 --> 00:15:04.920
working on I had an example I wanted to do that I'm running with the pytest


00:15:04.920 --> 00:15:11.000
book that I'm working on. And for the front end of it, I was punting before and not using


00:15:11.000 --> 00:15:15.320
actually putting a front end on the application, but I wanted to at least put a command line


00:15:15.320 --> 00:15:22.120
interface in. And my first attempt was to go down ArgParse and the particular quirks


00:15:22.120 --> 00:15:27.760
of this application, I needed subcommands. Actually, just the tutorials I found were


00:15:27.760 --> 00:15:33.080
out of date, didn't work, and I was having a little bit of difficulty. So I went ahead


00:15:33.080 --> 00:15:39.520
and tried Click. I'd heard of Click before and hadn't tried it. And man, a tutorial from


00:15:39.520 --> 00:15:45.960
like three years ago was about what I needed and it works right off the, right away. I've


00:15:45.960 --> 00:15:50.200
got like half a page of code and my interface, my command line interface is done.


00:15:50.200 --> 00:15:53.000
That's really cool. It's also decorator heavy, right?


00:15:53.000 --> 00:15:57.880
Yeah. In my Sublime Editor, it's colored nicely and my wife walked by and said, "That's such


00:15:57.880 --> 00:15:58.880
beautiful code."


00:15:58.880 --> 00:16:00.400
>> Oh, lovely.


00:16:00.400 --> 00:16:01.120
>> Lovely.


00:16:01.120 --> 00:16:02.880
>> Let's take that on many, many levels, right?


00:16:02.880 --> 00:16:04.840
That's awesome. Yeah, that's by Armin Roenker,


00:16:04.840 --> 00:16:05.880
the guy from Flask.


00:16:05.880 --> 00:16:07.120
So definitely.


00:16:07.120 --> 00:16:08.120
>> Oh, did he do click?


00:16:08.120 --> 00:16:09.880
>> I think so, yeah. I believe so.


00:16:09.880 --> 00:16:11.640
Yeah, nice. Click is cool.


00:16:11.640 --> 00:16:13.280
I've done a little bit of work with it,


00:16:13.280 --> 00:16:14.680
and I've liked what I've seen.


00:16:14.680 --> 00:16:16.600
>> But I also want to,


00:16:16.600 --> 00:16:17.880
yeah, we'll talk about it later,


00:16:17.880 --> 00:16:19.240
but I might want to try adding


00:16:19.240 --> 00:16:21.200
a different CLI interface to it as well.


00:16:21.200 --> 00:16:26.420
>> Yeah, cool. So the last one that I chose for us is a refresher,


00:16:26.420 --> 00:16:27.960
back to the fundamentals type things.


00:16:27.960 --> 00:16:35.160
So Python inheritance class and our instance class and static methods demystified.


00:16:35.160 --> 00:16:37.360
So this one is on real python.com.


00:16:37.360 --> 00:16:39.040
And I went over there and checked it out.


00:16:39.040 --> 00:16:40.760
And I said, Okay, real python.com.


00:16:40.760 --> 00:16:41.760
That's cool.


00:16:41.760 --> 00:16:43.000
And then I realized this is actually from Dan Bader.


00:16:43.000 --> 00:16:45.920
And we seem to be covering a lot of Dan's stuff over here.


00:16:45.920 --> 00:16:48.260
And actually have more to say about Dan later still.


00:16:48.260 --> 00:16:52.060
So this was a guest post Dan did for that, although I didn't realize that until I started


00:16:52.060 --> 00:16:53.640
getting into it.


00:16:53.640 --> 00:16:58.540
And idea was to like demystify what's behind class methods, static methods and regular


00:16:58.540 --> 00:17:00.420
instance methods.


00:17:00.420 --> 00:17:05.040
If you learn Python classes, if you learn classes and inheritance and object oriented


00:17:05.040 --> 00:17:10.120
programming only through Python, this will be like, obvious to you.


00:17:10.120 --> 00:17:16.040
But if you come from other languages like c++ or Java or C# or JavaScript, there's


00:17:16.040 --> 00:17:20.040
differences to the way Python classes and inheritance works.


00:17:20.040 --> 00:17:22.980
And it's worth kind of a compare and contrast.


00:17:22.980 --> 00:17:27.060
So he comes up with a class, and it's got like a regular method, a class method, so


00:17:27.060 --> 00:17:32.100
an at class method decorator, and takes a CLS parameter and a static method with an


00:17:32.100 --> 00:17:36.740
at static method decorator and nothing, and basically compares and contrasts how they


00:17:36.740 --> 00:17:37.740
work.


00:17:37.740 --> 00:17:41.380
And so some of the things that I think are not obvious when you're first getting started


00:17:41.380 --> 00:17:44.780
is like instance classes, those are pretty straightforward.


00:17:44.780 --> 00:17:51.020
Like you call them on instances like all other languages, but the fact that I can call static


00:17:51.020 --> 00:17:54.280
methods or class methods on instances.


00:17:54.280 --> 00:17:55.280
That's a little bit funky.


00:17:55.280 --> 00:17:56.280
Right?


00:17:56.280 --> 00:17:57.360
Yeah, that seems a little weird.


00:17:57.360 --> 00:18:00.360
And then the other one, the main one, I think is like, what's the different?


00:18:00.360 --> 00:18:02.560
Why are there two things like static method and class method?


00:18:02.560 --> 00:18:03.560
They seem the same.


00:18:03.560 --> 00:18:07.600
Why are there two and then like, when would I use one versus the other?


00:18:07.600 --> 00:18:13.080
Right, the class method takes a CLS method, which is literally the type that is on.


00:18:13.080 --> 00:18:14.560
And the static method just doesn't.


00:18:14.560 --> 00:18:16.120
But other than that, they seem the same, right.


00:18:16.120 --> 00:18:21.560
So if you're going to say, like interact with the class, like during the class method, if


00:18:21.560 --> 00:18:27.120
you're going to create an instance of the class, you can use the CLS parameter to support


00:18:27.120 --> 00:18:28.840
like inheritance and stuff.


00:18:28.840 --> 00:18:36.280
So I got like, let's say a vehicle class and a car like a Tesla car class, that static


00:18:36.280 --> 00:18:39.680
method could say like allocate a CLS, whatever that is.


00:18:39.680 --> 00:18:44.760
And if you call it on a Tesla static ish function class method, it would actually create a Tesla


00:18:44.760 --> 00:18:47.400
I would change like the thing, the type that it knows it is,


00:18:47.400 --> 00:18:49.920
where the static method is just like a grouping.


00:18:49.920 --> 00:18:51.480
So I thought that was interesting.


00:18:51.480 --> 00:18:54.940
- Does the class method follow then the hierarchy then?


00:18:54.940 --> 00:18:58.360
So if I declare a class method on a base class,


00:18:58.360 --> 00:19:01.560
is it available to the subclass?


00:19:01.560 --> 00:19:02.400
- Yes, always.


00:19:02.400 --> 00:19:03.800
And that's always true for static methods,


00:19:03.800 --> 00:19:06.640
but the difference is the static method


00:19:06.640 --> 00:19:08.920
doesn't really know what type it's being called on.


00:19:08.920 --> 00:19:09.760
- Oh, okay.


00:19:09.760 --> 00:19:12.080
- Whereas the class method, it's given the type.


00:19:12.080 --> 00:19:13.840
So if there's like, you call it farther down


00:19:13.840 --> 00:19:16.600
and the inheritance chain, that whatever level you're at,


00:19:16.600 --> 00:19:20.760
that instant or that type actually is communicated to it.


00:19:20.760 --> 00:19:22.840
And so you're kind of, you're told where you are


00:19:22.840 --> 00:19:24.000
in the hierarchy in a class method,


00:19:24.000 --> 00:19:26.720
where in static it's just like, it's just a method.


00:19:26.720 --> 00:19:27.540
Go for it.


00:19:27.540 --> 00:19:28.380
- Okay. - Yeah.


00:19:28.380 --> 00:19:29.320
- I don't think I've ever used static methods


00:19:29.320 --> 00:19:30.160
for anything.


00:19:30.160 --> 00:19:31.520
- Yeah, well, they're out there hanging out


00:19:31.520 --> 00:19:33.520
with their friend in class methods.


00:19:33.520 --> 00:19:34.640
(laughing)


00:19:34.640 --> 00:19:35.680
- Interesting. - Indeed.


00:19:35.680 --> 00:19:37.440
So I have a quick follow-up from the last show.


00:19:37.440 --> 00:19:39.360
David Beaver from Google,


00:19:39.360 --> 00:19:42.120
and he, the guy who works on Python Fire, sent us a note.


00:19:42.120 --> 00:19:46.940
And you said something to the effect of, look, Python fire is awesome.


00:19:46.940 --> 00:19:49.880
But I Python is a serious dependency to take.


00:19:49.880 --> 00:19:51.380
If I just want to CLI, right.


00:19:51.380 --> 00:19:52.560
And I think that's fair.


00:19:52.560 --> 00:19:54.040
That's fair.


00:19:54.040 --> 00:19:59.760
But he said, Hey, you know what, one of our primary plans is to remove IPython as a dependency,


00:19:59.760 --> 00:20:00.760
we're just not there yet.


00:20:00.760 --> 00:20:05.000
So if anybody in the audience wants to help those guys move forward, they're totally working


00:20:05.000 --> 00:20:06.000
on that.


00:20:06.000 --> 00:20:12.560
So Google Fire or Python Fire from Google is definitely getting some interesting thinning


00:20:12.560 --> 00:20:14.400
out and will be very nice.


00:20:14.400 --> 00:20:19.160
And actually, I like to hear that, that they're working on eventually getting rid of that


00:20:19.160 --> 00:20:20.640
dependency.


00:20:20.640 --> 00:20:22.520
And it's pretty cool.


00:20:22.520 --> 00:20:27.800
Also that it's something I had mentioned when we talked about Python Fire that your development


00:20:27.800 --> 00:20:29.200
time is important too.


00:20:29.200 --> 00:20:32.820
And putting an interface together with that is pretty fast.


00:20:32.820 --> 00:20:33.820
So keep that in mind.


00:20:33.820 --> 00:20:36.460
It's not always about optimizing for the machines.


00:20:36.460 --> 00:20:37.460
Definitely.


00:20:37.460 --> 00:20:47.700
Hey, one more follow up is we did cover PDR2 or PDR a couple episodes ago with the DR colors


00:20:47.700 --> 00:20:49.140
prints out.


00:20:49.140 --> 00:20:54.780
One of the complaints I had was that it didn't look that great on my black terminal.


00:20:54.780 --> 00:20:55.960
I had the same problem.


00:20:55.960 --> 00:20:58.460
I like darker stuff and I'm like, wait, where's all the words?


00:20:58.460 --> 00:21:03.460
They just updated it and I guess yesterday I think.


00:21:03.460 --> 00:21:05.900
And it does have color configuration now.


00:21:05.900 --> 00:21:10.900
So you can drop a Peter2 config file in your home directory


00:21:10.900 --> 00:21:14.380
and I set my background color to magenta


00:21:14.380 --> 00:21:17.200
so that it was visible for docs,


00:21:17.200 --> 00:21:18.860
for visible on both black and white.


00:21:18.860 --> 00:21:19.700
Now it looks great.


00:21:19.700 --> 00:21:20.700
- Oh nice.


00:21:20.700 --> 00:21:22.760
Peter2 now has themes, love it.


00:21:22.760 --> 00:21:26.340
All right, how's the book coming?


00:21:26.340 --> 00:21:28.260
I heard there's a spotting.


00:21:28.260 --> 00:21:30.540
- Yeah, so on Twitter the other day,


00:21:30.540 --> 00:21:34.540
somebody, a guy named Jacob Jaros, I think that's right,


00:21:34.540 --> 00:21:36.300
noticed that it was listed


00:21:36.300 --> 00:21:40.300
on the Pragmatic Publishers website, so it's out there.


00:21:40.300 --> 00:21:41.980
- That's awesome, I love the cover.


00:21:41.980 --> 00:21:43.220
The rocket is cool.


00:21:43.220 --> 00:21:45.500
- Yeah, a '50s sci-fi nerd, so.


00:21:45.500 --> 00:21:48.060
- Yeah, and it's perfect, like,


00:21:48.060 --> 00:21:51.340
it's '50s, '60s vintage rocket.


00:21:51.340 --> 00:21:52.160
- So how about you?


00:21:52.160 --> 00:21:55.460
- Well, it has been a super busy couple of weeks.


00:21:55.460 --> 00:21:58.180
I've been working on a couple of classes.


00:21:58.180 --> 00:22:00.620
one of them I'm about to release.


00:22:00.620 --> 00:22:05.300
By the time this recording comes out, it will be out so tomorrow basically, a course called


00:22:05.300 --> 00:22:08.160
using and mastering cookie cutter.


00:22:08.160 --> 00:22:11.040
So really deep dive into what is cookie cutter?


00:22:11.040 --> 00:22:13.540
How do you create and manage projects with cookie cutter?


00:22:13.540 --> 00:22:16.540
I think it's going to be a really fun course.


00:22:16.540 --> 00:22:22.940
And also just a few hours ago launched managing Python dependencies with pip and virtual environments,


00:22:22.940 --> 00:22:28.340
which Dan Bader, speaking of Dan Bader, came over to join me to write a class for us over


00:22:28.340 --> 00:22:30.700
here and we're shipping that as well.


00:22:30.700 --> 00:22:34.060
So in that I took that course and I actually learned quite a bit from it.


00:22:34.060 --> 00:22:36.540
It's not just like pip install done.


00:22:36.540 --> 00:22:41.480
It's how do you what is the process that you use to manage your dependencies?


00:22:41.480 --> 00:22:47.060
How do you like what is the thinking and workflow used to evaluate whether a package is worth


00:22:47.060 --> 00:22:51.360
taking a dependency on and all sorts of cool stuff like that bunch of best practices, launch


00:22:51.360 --> 00:22:56.600
both of those and I just started selling course bundles on Talk Python Training as well to


00:22:56.600 --> 00:22:57.720
sort of go along with us.


00:22:57.720 --> 00:22:58.720
So lots of stuff.


00:22:58.720 --> 00:22:59.720
>> That's pretty exciting.


00:22:59.720 --> 00:23:01.520
I got to check out the cookie cutter thing.


00:23:01.520 --> 00:23:02.520
>> Yeah, thanks, Ed.


00:23:02.520 --> 00:23:03.760
It'll be out tomorrow morning.


00:23:03.760 --> 00:23:05.680
For everyone listening, that's today.


00:23:05.680 --> 00:23:08.760
But for you, Brian, that's tomorrow morning.


00:23:08.760 --> 00:23:11.280
The magic of time travel.


00:23:11.280 --> 00:23:13.800
Thanks so much for finding all these great items.


00:23:13.800 --> 00:23:15.480
That was fun as always, Brian.


00:23:15.480 --> 00:23:17.040
>> It was fun for me too.


00:23:17.040 --> 00:23:19.480
And thanks to everybody for all your feedback that you send in.


00:23:19.480 --> 00:23:20.480
>> Yep.


00:23:20.480 --> 00:23:48.200
one, and thank you, Roel Bar, for supporting the show.

