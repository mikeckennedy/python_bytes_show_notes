
00:00:00.000 --> 00:00:07.400
Hello and welcome to Python bites where we deliver Python news and headlines directly to your buds. It's episode 91 recorded August 8th


00:00:07.400 --> 00:00:12.440
2018 I'm Michael Kennedy and I'm Brian. Okay. Hey Brian, how you doing? I'm doing great. Awesome


00:00:12.440 --> 00:00:18.760
Well as always the Python news cycle has not let us down has it no it's it's a keeping up


00:00:18.760 --> 00:00:22.200
It's good. It's definitely we got a lot of good stuff to cover before we do though


00:00:22.200 --> 00:00:26.960
Another thing not letting us down is data dog. They're definitely helping us prop up


00:00:26.960 --> 00:00:31.220
So thank you data dog for sponsoring this episode check them out at Python by Fm slash data dog


00:00:31.220 --> 00:00:36.740
They actually have some cool new announcements, which I'll get to later. But let's talk about what makes Python cool, huh?


00:00:36.740 --> 00:00:39.840
There's a lot of stuff that makes Python cool, but there's a there was an article


00:00:39.840 --> 00:00:43.300
That came up. I think it's on medium


00:00:43.300 --> 00:00:49.440
Hacker noon, that's right. Sorry hacker noon that I thought you were medium for a second by Shankar jaw and


00:00:49.440 --> 00:00:52.560
And I probably mispronounced his last name apologies


00:00:52.560 --> 00:00:55.560
but an article called "What makes Python cool?"


00:00:55.560 --> 00:01:00.060
And my first reaction is like, "Oh, yet another rah-rah, Python is awesome."


00:01:00.060 --> 00:01:04.060
But it is actually kind of a neat article because it talks about


00:01:04.060 --> 00:01:07.060
some of the things that a lot of people that are just starting out


00:01:07.060 --> 00:01:10.060
or starting to learn Python, or they have to,


00:01:10.060 --> 00:01:14.060
might not stumble around, they might not run into for a while,


00:01:14.060 --> 00:01:15.560
and they're good things to note.


00:01:15.560 --> 00:01:20.060
So, he starts off with the zen of Python, with "Import this,"


00:01:20.060 --> 00:01:22.980
And that's a good thing for people to look at.


00:01:22.980 --> 00:01:25.900
And then of course, if you're looking at cool imports,


00:01:25.900 --> 00:01:29.660
import anti-gravity that redirects you to XKCD is cool.


00:01:29.660 --> 00:01:34.420
Yeah, if people have never typed import anti-gravity in their REPL in Python,


00:01:34.420 --> 00:01:35.500
they should definitely do that.


00:01:35.500 --> 00:01:39.260
And those two things actually make it, they're not just jokes,


00:01:39.260 --> 00:01:43.500
they're, it kind of indoctrinates you into the fact that


00:01:43.500 --> 00:01:47.220
the Python community doesn't take itself too awfully seriously.


00:01:47.220 --> 00:01:52.580
It's all serious work and we do a lot of important things, but there's it's a good fun thing to have there


00:01:52.580 --> 00:01:54.500
So I hope they never take those out


00:01:54.500 --> 00:02:00.420
Yeah, I agree and then things that that he starts off right the right off the bat after that with like how to swap


00:02:00.420 --> 00:02:07.060
two variables in one line of you know in like a comma b equals b comma a


00:02:07.060 --> 00:02:09.300
We're just used to that now


00:02:09.300 --> 00:02:15.540
But when you first see this or a lot of people don't think they can do that because you can't do that in c


00:02:15.780 --> 00:02:24.660
I don't think, didn't used to be able to at least. I don't think so. And it's a fun extra thing. How fast you can spin up a web server just with one line.


00:02:24.660 --> 00:02:32.340
A reminder to take a look at the collections and the inner tools modules or packages because there are a whole bunch of good stuff in there.


00:02:32.340 --> 00:02:38.660
Enumerate with the enumerate keyword is or built in whatever that is.


00:02:38.660 --> 00:02:44.500
It's a really cool thing and it keeps people from keeping track of their own indices when they're


00:02:44.500 --> 00:02:49.780
going through lists. Do you know what I learned from Bob Beldervost from PyBytes with a I not a Y


00:02:49.780 --> 00:02:54.820
not Python bytes about enumerate is it takes an extra parameter that'll let the index start at


00:02:54.820 --> 00:02:58.900
one or anything you specify because I've always had like it go at zero then I'll have like index


00:02:58.900 --> 00:03:03.220
plus one all over the place well you can just say start at one two three that's a parameter in there


00:03:03.220 --> 00:03:07.940
it's nice. Yeah and that's a brilliant thing because yeah I've seen that a lot of people


00:03:07.940 --> 00:03:11.220
adding one, just start at one, and then it's in the right order.


00:03:11.220 --> 00:03:15.620
Easily reverse a list, doing zip, a couple zip tricks,


00:03:15.620 --> 00:03:18.500
how cool comprehensions and dictionaries are,


00:03:18.500 --> 00:03:22.180
and pretty print with pprint. Anyway, it's a good article.


00:03:22.180 --> 00:03:25.700
Yeah, absolutely. I really, I think it covers a lot of nice stuff. And


00:03:25.700 --> 00:03:28.740
if you're kind of new to Python, there are some cool things in here that


00:03:28.740 --> 00:03:31.380
you're like, "Oh, I didn't know when I was working in the


00:03:31.380 --> 00:03:36.580
REPL that if I forgot to assign some computation to a variable, I can still


00:03:36.580 --> 00:03:40.140
access it one time quickly as an underscore.


00:03:40.140 --> 00:03:41.140
So that's pretty cool.


00:03:41.140 --> 00:03:42.460
Yeah, I actually forget that all the time.


00:03:42.460 --> 00:03:46.300
So I'm glad that people keep putting that down, because I forget about it.


00:03:46.300 --> 00:03:47.740
And it saves time.


00:03:47.740 --> 00:03:50.020
The many uses and meanings of underscore.


00:03:50.020 --> 00:03:53.100
Yeah, and we're not even in Perl.


00:03:53.100 --> 00:03:54.500
Yeah, exactly.


00:03:54.500 --> 00:03:57.980
So if I were a Django person, I'm not.


00:03:57.980 --> 00:04:01.400
My sites are based on pyramid and flask and things like that.


00:04:01.400 --> 00:04:05.300
But if I were a Django person, I'd be doing a bit of a backflip right now because there's


00:04:05.300 --> 00:04:10.880
a brand new major Django release. And this is the first major release after Django kicked


00:04:10.880 --> 00:04:15.420
legacy Python out the door. So Django 2.1 is out. Pretty cool, huh? Yeah. What do we


00:04:15.420 --> 00:04:19.920
got in 2.1? Well, there's actually a ton of features. I think the one that the team highlights


00:04:19.920 --> 00:04:25.400
the most is this thing called model view permissions. So Django comes with its ORM, right, its own


00:04:25.400 --> 00:04:30.800
ORM. And in there, you have models that map to the database. And now you can set it up.


00:04:30.800 --> 00:04:35.720
So you have view only permissions on models, which is pretty cool.


00:04:35.720 --> 00:04:40.360
And they said Django two has reached the end of mainstream support, they just released


00:04:40.360 --> 00:04:44.840
208, which is the final version you're ever going to see except for possible security


00:04:44.840 --> 00:04:47.880
fixes until April of 2019.


00:04:47.880 --> 00:04:52.520
After that, there's going to be no more Django two, so be sure to look about upgrading.


00:04:52.520 --> 00:04:57.200
And in terms of features, we have the model view feature, we also have the ability to


00:04:57.200 --> 00:04:59.560
customize how deletes happen.


00:04:59.560 --> 00:05:02.040
So there's like a delete query set option.


00:05:02.040 --> 00:05:04.520
So you can delete select objects and customize that.


00:05:04.520 --> 00:05:06.540
There's a way to override the default admin site.


00:05:06.540 --> 00:05:08.160
There's tons of ORM features.


00:05:08.160 --> 00:05:10.780
I highlighted one, but there's actually a whole bunch.


00:05:10.780 --> 00:05:12.200
Caching is pretty cool.


00:05:12.200 --> 00:05:15.280
So caching used to kind of like store items


00:05:15.280 --> 00:05:16.120
and when it got full,


00:05:16.120 --> 00:05:18.320
it would just randomly start throwing stuff out.


00:05:18.320 --> 00:05:21.760
And now it uses LRU, last recently used to call.


00:05:21.760 --> 00:05:24.280
So like a better sort of the hot stuff stays in the cache,


00:05:24.280 --> 00:05:25.280
which is good.


00:05:25.280 --> 00:05:29.280
Migrations can now be run from PYC, so compiled files.


00:05:29.280 --> 00:05:32.540
So in frozen environments that just have the binary bytecode,


00:05:32.540 --> 00:05:34.240
you can still run migrations and tons more.


00:05:34.240 --> 00:05:35.940
Wow, that's actually pretty cool.


00:05:35.940 --> 00:05:37.040
Yeah, there's a lot of stuff in there.


00:05:37.040 --> 00:05:40.140
Like, there's pages and pages of changes from Django 2,


00:05:40.140 --> 00:05:41.180
which is pretty awesome.


00:05:41.180 --> 00:05:44.180
Yeah, actually, if I was gonna go look at Django,


00:05:44.180 --> 00:05:45.740
which is on my to-do list,


00:05:45.740 --> 00:05:48.240
the ability to overwrite the default admin site,


00:05:48.240 --> 00:05:49.580
that sounds kind of neat,


00:05:49.580 --> 00:05:52.840
because I'm not really a fan of the look


00:05:52.840 --> 00:05:54.840
of the default admin site.


00:05:54.840 --> 00:05:56.000
- Yeah, it's pretty cool. - Great.


00:05:56.000 --> 00:05:58.960
- So you've got one that's a little playful, right?


00:05:58.960 --> 00:06:01.760
- Yeah, so this is actually pretty awesome.


00:06:01.760 --> 00:06:05.200
It's actually a GitHub repo,


00:06:05.200 --> 00:06:07.320
and I'm gonna look this person up.


00:06:07.320 --> 00:06:10.120
It's Annalena Popkiss, which actually,


00:06:10.120 --> 00:06:13.500
I might have actually got that last name right, who knows?


00:06:13.500 --> 00:06:16.920
But she's a computer science graduate student,


00:06:16.920 --> 00:06:19.360
or computer science graduate.


00:06:19.360 --> 00:06:22.980
She's working as an intern right now, according to her blog.


00:06:22.980 --> 00:06:26.140
But it's like the whole 100 days of code thing,


00:06:26.140 --> 00:06:29.300
but she's doing it all in the open


00:06:29.300 --> 00:06:32.220
and all in Harry Potter themes.


00:06:32.220 --> 00:06:34.300
And it's really fun.


00:06:34.300 --> 00:06:37.900
So far it's up to day 18.


00:06:37.900 --> 00:06:39.540
So she's still working on it


00:06:39.540 --> 00:06:42.300
and hopefully we'll continue it all with it.


00:06:42.300 --> 00:06:44.580
But this is just some really fun stuff.


00:06:44.580 --> 00:06:47.700
And I like the idea of using a theme


00:06:47.700 --> 00:06:50.720
for going through 100 days of code system.


00:06:50.720 --> 00:06:52.060
So it's kind of fun.


00:06:52.060 --> 00:06:54.500
- Yeah, so to give people an idea of what you're describing


00:06:54.500 --> 00:06:57.100
and what she's doing is like, for example,


00:06:57.100 --> 00:07:00.620
on days 16, 17, 18, she worked with data classes.


00:07:00.620 --> 00:07:03.180
Data classes are a cool 3-7 thing that are awesome.


00:07:03.180 --> 00:07:05.380
And she's modeling a house, right?


00:07:05.380 --> 00:07:09.460
When the young wizard students go off to the wizard school,


00:07:09.460 --> 00:07:12.220
they go into like Gryffindor and Slytherin


00:07:12.220 --> 00:07:13.060
and the different houses.


00:07:13.060 --> 00:07:15.900
And so like her whole example of exploring data classes


00:07:15.900 --> 00:07:16.720
is about that.


00:07:16.720 --> 00:07:18.680
What also I think is actually gonna pay off


00:07:18.680 --> 00:07:21.700
pretty big time for her is every one of these,


00:07:21.700 --> 00:07:25.980
She's not just writing the code and putting it in a separate section in GitHub, but she's


00:07:25.980 --> 00:07:29.980
also doing a full-on explanatory blog post.


00:07:29.980 --> 00:07:34.700
This one is probably six pages of writing about it, and that's got to help understand


00:07:34.700 --> 00:07:36.140
it really well and make it stick.


00:07:36.140 --> 00:07:42.260
Yeah, and then it's also 100 days of writing, practice writing about tech stuff.


00:07:42.260 --> 00:07:44.340
So yeah, it'll definitely help.


00:07:44.340 --> 00:07:45.340
It's a good idea.


00:07:45.340 --> 00:07:46.340
Yeah, I love it.


00:07:46.340 --> 00:07:47.340
I'm glad you brought that one in.


00:07:47.340 --> 00:07:48.340
I saw that come up.


00:07:48.340 --> 00:07:49.860
I'm like, "Oh, that's pretty clever."


00:07:49.860 --> 00:07:50.860
Well done, Anna.


00:07:50.860 --> 00:07:56.060
All right, before we move on to the next one, let me tell you about a new feature from Datadog.


00:07:56.060 --> 00:08:00.060
So we talked about Datadog and their monitoring and stuff before.


00:08:00.060 --> 00:08:05.620
So Brian, we've talked a little bit about machine learning and AI taking over the world,


00:08:05.620 --> 00:08:06.620
right?


00:08:06.620 --> 00:08:07.620
Yes.


00:08:07.620 --> 00:08:08.620
Yeah.


00:08:08.620 --> 00:08:09.860
So here's a little bit more of it in a good way.


00:08:09.860 --> 00:08:15.820
So Datadog has their APM application performance monitoring stuff, has a new watchdog auto


00:08:15.820 --> 00:08:21.820
detection engine that uses machine learning to alert you about performance anomalies in your application.


00:08:21.820 --> 00:08:22.820
That's cool, right?


00:08:22.820 --> 00:08:23.820
That is really cool.


00:08:23.820 --> 00:08:25.820
So it learns how your app normally works.


00:08:25.820 --> 00:08:29.820
It's like, "Whoa, you know, it's pinned this thing at 100% CPU for some reason.


00:08:29.820 --> 00:08:30.820
Something must have gone wrong."


00:08:30.820 --> 00:08:32.820
Or maybe it's totally flat.


00:08:32.820 --> 00:08:33.820
You're processing no traffic.


00:08:33.820 --> 00:08:35.820
Either way, you probably want to know.


00:08:35.820 --> 00:08:40.820
So with Datadog's new Watchdog thing, you can explore and analyze all your app performance data,


00:08:40.820 --> 00:08:43.820
navigate between correlated metrics, traces, logs,


00:08:43.820 --> 00:08:45.780
all that kind of stuff in real time.


00:08:45.780 --> 00:08:48.380
So if you want to start optimizing your Python apps


00:08:48.380 --> 00:08:51.860
with machine learning, you can get a 14 day free trial


00:08:51.860 --> 00:08:53.620
and Datadog will send you a free t-shirt


00:08:53.620 --> 00:08:56.180
at pythonbytes.fm/datadog.


00:08:56.180 --> 00:08:58.500
So that's pretty awesome, I'd like to check that out.


00:08:58.500 --> 00:08:59.700
- Yeah, definitely cool.


00:08:59.700 --> 00:09:02.820
- Yeah, we've talked about deployment once or twice, right?


00:09:02.820 --> 00:09:03.660
- I think so.


00:09:03.660 --> 00:09:06.500
- Along with our GUI kick.


00:09:06.500 --> 00:09:08.220
So here's an interesting take on it.


00:09:08.220 --> 00:09:13.120
So one of the things I think is challenging about distributing a Python application is


00:09:13.120 --> 00:09:15.880
you have to distribute your source code.


00:09:15.880 --> 00:09:21.120
Now, maybe you distribute the PYC files so you can distribute like a bytecode version,


00:09:21.120 --> 00:09:24.240
but it's pretty easy to unbytecode that, right.


00:09:24.240 --> 00:09:27.600
But there's not a lot of great ways to distribute your code.


00:09:27.600 --> 00:09:31.080
If you're concerned that maybe someone will mess with it, like you could put it on to


00:09:31.080 --> 00:09:35.040
say a web server, but if somebody breaks into the web server, and they find your code, well,


00:09:35.040 --> 00:09:39.020
could change simple things like your stripe ID.


00:09:39.020 --> 00:09:42.700
So all of a sudden, all your purchases start deposited into their bank account instead


00:09:42.700 --> 00:09:44.800
of yours or things like this, right.


00:09:44.800 --> 00:09:48.980
So if you want to deploy your apps and protect them, that can be tricky.


00:09:48.980 --> 00:09:51.340
And it's extra tricky in Python.


00:09:51.340 --> 00:09:55.820
Because if we're deploying c++, or go or even dotnet, there's like compiled binaries, and


00:09:55.820 --> 00:10:00.500
you can sign those so that they don't get they can't run, basically, if they're not


00:10:00.500 --> 00:10:01.860
properly signed and things like that.


00:10:01.860 --> 00:10:04.700
But in Python, you distribute, generally source code.


00:10:04.700 --> 00:10:11.380
So this next thing is there's this like consulting group company and they wanted to come up with


00:10:11.380 --> 00:10:15.600
a way to protect Python code for the people they work for.


00:10:15.600 --> 00:10:19.720
So they wrote this article and created this thing called executing encrypted Python with


00:10:19.720 --> 00:10:22.360
no performance penalty.


00:10:22.360 --> 00:10:26.940
So you know we have the PYC which is the bytecode thing and that's just straight bytecode but


00:10:26.940 --> 00:10:34.060
what they've created is what they're calling a PYCE file and the PYCE file is an encrypted


00:10:34.060 --> 00:10:39.500
Python byte file, which, until you decrypt it can't be executed.


00:10:39.500 --> 00:10:40.500
So that's pretty cool, right?


00:10:40.500 --> 00:10:41.500
That's very cool.


00:10:41.500 --> 00:10:42.500
Yeah.


00:10:42.500 --> 00:10:45.980
And the way they make this work is they override the import statement.


00:10:45.980 --> 00:10:50.620
They basically import a library that changes what import means.


00:10:50.620 --> 00:10:55.540
So when you say import, it runs their custom code that says, oh, it's one of these encrypted


00:10:55.540 --> 00:10:56.540
files.


00:10:56.540 --> 00:10:58.720
Well, that means grab the decryption key decrypt it.


00:10:58.720 --> 00:11:00.140
Now we load that into memory.


00:11:00.140 --> 00:11:05.360
And the no performance part comes from the fact that once Python has loaded a module,


00:11:05.360 --> 00:11:06.560
it's just in memory.


00:11:06.560 --> 00:11:10.800
And so the decrypted versions in memory, you hit it again, and it's golden, right?


00:11:10.800 --> 00:11:12.220
It just keeps running.


00:11:12.220 --> 00:11:15.360
So basically, it maybe starts a tiny bit slower, but then it's the same.


00:11:15.360 --> 00:11:18.440
So if this is something you're interested in, check it out.


00:11:18.440 --> 00:11:19.440
It's pretty cool.


00:11:19.440 --> 00:11:20.440
So is this a commercial thing?


00:11:20.440 --> 00:11:21.680
Or is this something that...


00:11:21.680 --> 00:11:24.800
I think it's open source on GitHub, as far as I can tell.


00:11:24.800 --> 00:11:26.360
That's very cool.


00:11:26.360 --> 00:11:30.080
is from a commercial company, like a consulting company.


00:11:30.080 --> 00:11:33.120
But I think, let me see if I can find the license.


00:11:33.120 --> 00:11:33.960
Do they have a license?


00:11:33.960 --> 00:11:37.800
The license is, wait for it, actually wait for GitHub.


00:11:37.800 --> 00:11:38.760
Come on license.


00:11:38.760 --> 00:11:41.000
Apache 2.0.


00:11:41.000 --> 00:11:42.200
Yeah, permissive license.


00:11:42.200 --> 00:11:44.920
Yeah, so it's free for commercial use.


00:11:44.920 --> 00:11:46.280
- This is a very cool thing.


00:11:46.280 --> 00:11:47.320
I have to check that out.


00:11:47.320 --> 00:11:48.160
Yeah, nice.


00:11:48.160 --> 00:11:49.560
- Yeah, it's not being used by a lot of people,


00:11:49.560 --> 00:11:52.080
but it seems to me like the people who want this


00:11:52.080 --> 00:11:53.720
really want this, you know what I mean?


00:11:53.720 --> 00:11:55.460
And everybody else is like, why do you want that?


00:11:55.460 --> 00:11:56.580
I don't care about that.


00:11:56.580 --> 00:11:57.500
But if you really wanted it,


00:11:57.500 --> 00:11:58.620
it seems like it'd be pretty cool.


00:11:58.620 --> 00:12:00.500
So anyway, that's what I found for that one.


00:12:00.500 --> 00:12:01.460
That's great.


00:12:01.460 --> 00:12:02.280
- Nice.


00:12:02.280 --> 00:12:03.120
- Yep.


00:12:03.120 --> 00:12:04.180
What's this next one about?


00:12:04.180 --> 00:12:06.100
I don't even know what to make of your notes here.


00:12:06.100 --> 00:12:07.060
This is crazy.


00:12:07.060 --> 00:12:07.900
It's cool.


00:12:07.900 --> 00:12:09.100
(laughing)


00:12:09.100 --> 00:12:11.100
- Well, actually, I just saw,


00:12:11.100 --> 00:12:12.900
this actually came in just this morning.


00:12:12.900 --> 00:12:16.060
I saw a tweet from Harry Percival


00:12:16.060 --> 00:12:19.260
saying that he wrote a plugin for pytest


00:12:19.260 --> 00:12:21.540
called pytest-ICdiff.


00:12:21.540 --> 00:12:25.420
And it's a plugin that allows you to use


00:12:25.420 --> 00:12:30.420
I see diff for asserts that are equal comparisons in pytest.


00:12:30.420 --> 00:12:34.220
- Right, like a failure in say like,


00:12:34.220 --> 00:12:36.380
assert these are equal but then they're not.


00:12:36.380 --> 00:12:38.140
And it'll show you like a color diff


00:12:38.140 --> 00:12:40.020
instead of just no, they're different.


00:12:40.020 --> 00:12:40.980
- Yeah, that's pretty much it.


00:12:40.980 --> 00:12:41.820
- I love it.


00:12:41.820 --> 00:12:44.180
- And I never have never even heard of IC diff,


00:12:44.180 --> 00:12:47.100
but IC diff apparently is a different diff


00:12:47.100 --> 00:12:49.540
that you don't, isn't necessarily tied to pytest.


00:12:49.540 --> 00:12:53.540
You can use it just on the command line for better diff,


00:12:53.540 --> 00:12:54.540
the color diffs.


00:12:54.540 --> 00:12:58.620
Yeah, the IC stands for improved color diff, which is pretty cool.


00:12:58.620 --> 00:13:01.060
And it's it's a Python project in and of itself.


00:13:01.060 --> 00:13:04.580
And then it looks like Harry Percival's pytest defied it.


00:13:04.580 --> 00:13:08.420
Yeah, it's cool that having some color there, highlight things.


00:13:08.420 --> 00:13:12.260
I think it's great because so often when a test fails, you're like, Oh, what is going


00:13:12.260 --> 00:13:13.260
on?


00:13:13.260 --> 00:13:14.260
Like, you want to look at it?


00:13:14.260 --> 00:13:15.260
And you're like, what is that?


00:13:15.260 --> 00:13:18.620
Is that Oh, there's that dot there, you know, like some color would really help, right?


00:13:18.620 --> 00:13:21.300
Yeah, to highlight exactly which part of it's different.


00:13:21.300 --> 00:13:22.300
Yeah, exactly.


00:13:22.300 --> 00:13:26.540
That's a pretty short section, just a new tool that I thought was neat, I thought I'd


00:13:26.540 --> 00:13:27.540
share.


00:13:27.540 --> 00:13:30.140
Well, I don't know why you wouldn't use this if you're using pytest.


00:13:30.140 --> 00:13:35.620
Yeah, that won't help you for other types of asserts, but it's the equality of why is


00:13:35.620 --> 00:13:38.660
it not equal that really trips people up sometimes.


00:13:38.660 --> 00:13:39.660
Yeah, for sure.


00:13:39.660 --> 00:13:40.660
Yeah, it's great.


00:13:40.660 --> 00:13:43.020
Nice find there, and well done, Harry.


00:13:43.020 --> 00:13:48.100
All right, the last one is a bit of amusing, and this was sent to us by one of our listeners,


00:13:48.100 --> 00:13:50.300
so thank you for sending this in.


00:13:50.300 --> 00:13:54.200
And I wasn't sure whether we should cover it, but I kind of feel like we should.


00:13:54.200 --> 00:14:00.480
So what they sent into us is highlighting a dotnet project, C# dotnet.


00:14:00.480 --> 00:14:03.720
And you might think, Michael, why do we care about a dotnet project?


00:14:03.720 --> 00:14:08.860
We don't really but the parallels for what we could do in Python, this would make me


00:14:08.860 --> 00:14:09.860
do a backflip.


00:14:09.860 --> 00:14:10.860
I don't even know how to do it.


00:14:10.860 --> 00:14:12.720
But I'd give it a shot, even though it might hurt.


00:14:12.720 --> 00:14:17.160
So they said, Hey, there's this project called blazer by the dotnet guys.


00:14:17.160 --> 00:14:20.560
And it was created by this guy by the name of Steve Sanderson, who's a really brilliant


00:14:20.560 --> 00:14:21.560
web guy.


00:14:21.560 --> 00:14:26.280
So what they're doing is they're using WebAssembly.


00:14:26.280 --> 00:14:30.640
And if you're unfamiliar with that, it's a new, it's kind of like JavaScript, but in


00:14:30.640 --> 00:14:33.240
binary compiled form.


00:14:33.240 --> 00:14:39.160
So it's a binary instruction format for stack based VM that runs inside of web browsers.


00:14:39.160 --> 00:14:46.080
And it's designed as a portable target a compilation for high level languages like C, C++ and Rust.


00:14:46.080 --> 00:14:50.560
So instead of writing in JavaScript and then running that in, you know, JavaScript engine,


00:14:50.560 --> 00:14:56.160
like V8 or whatever, you compile something like rust or c++ or C into this web assembly


00:14:56.160 --> 00:15:00.520
stuff that is an executed more or less natively in Firefox, Edge, Safari and Chrome.


00:15:00.520 --> 00:15:03.360
So all the browsers that really matter.


00:15:03.360 --> 00:15:05.940
So coming back to this project blazer.


00:15:05.940 --> 00:15:10.860
So what this is, is the dotnet people and Steve Sanderson have found a way to take the


00:15:10.860 --> 00:15:19.500
the entire dotnet runtime, known as the CLR and compile it to WebAssembly. And, you know,


00:15:19.500 --> 00:15:23.220
what's interesting about that is it's written entirely in C and c++. You know what else


00:15:23.220 --> 00:15:28.380
is written entirely in C and c++? Yeah, CPython, CPython. So what they've done is


00:15:28.380 --> 00:15:33.780
they've taken this thing, which is a native OS compiled thing, and they've turned it into


00:15:33.780 --> 00:15:39.380
something that runs on the client side in the browser natively by using WebAssembly.


00:15:39.380 --> 00:15:46.880
That's awesome. And it even has what's called a head of time compile mode. So you can take your in their case dotnet


00:15:46.880 --> 00:15:51.140
My hope for the world Python code and pre compile that into WebAssembly


00:15:51.140 --> 00:15:56.500
binaries that you ship instead of JavaScript or source code or anything like that and even created like a


00:15:56.500 --> 00:16:02.500
Single page app front-end framework with routing and unit testing and all sorts of stuff


00:16:02.500 --> 00:16:06.720
So this is a really cool project that I think may inspire people to try it for Python


00:16:06.720 --> 00:16:12.080
So what I still don't kind of I hope people do try it for Python. I think that'd be great


00:16:12.080 --> 00:16:17.480
I'm trying to even blazer itself. I'm trying to understand the use model is it's not at that point


00:16:17.480 --> 00:16:19.480
You're not doing client server stuff with blazer


00:16:19.480 --> 00:16:23.280
I'm assuming or is it you could be doing client?


00:16:23.280 --> 00:16:28.040
So the real use of this is if you were thinking about using angularjs


00:16:28.040 --> 00:16:36.520
Vue JS react react native any of these like JavaScript front-end frameworks where most of your Apple lives on the client side


00:16:36.520 --> 00:16:41.960
in the browser like Gmail or Google Docs or Dropbox paper or something like that.


00:16:41.960 --> 00:16:45.440
Instead of writing that in tons of JavaScript and executing through a


00:16:45.440 --> 00:16:48.960
JavaScript engine, Blazor lets you write that in C# and execute it


00:16:48.960 --> 00:16:51.560
natively at a much higher performance.


00:16:51.560 --> 00:16:52.060
Oh, okay.


00:16:52.060 --> 00:16:55.920
Yeah, so that's being accomplished by them and it's already they have working


00:16:55.920 --> 00:17:00.920
models. It's not like a theory that's already working. So when we were at


00:17:00.920 --> 00:17:05.280
PyCon 2018 in Cleveland this year, one of the very first keynotes, a guy named Dan


00:17:05.280 --> 00:17:09.960
And Callahan, I believe, may have misremembered his last name,


00:17:09.960 --> 00:17:11.160
but worked for Mozilla.


00:17:11.160 --> 00:17:15.000
And they basically laid this path out for Python


00:17:15.000 --> 00:17:16.200
and called for this to exist.


00:17:16.200 --> 00:17:18.640
Said, look, there's WebAssembly.


00:17:18.640 --> 00:17:20.880
There's C code, CPython.


00:17:20.880 --> 00:17:24.160
We need CPython in the browser.


00:17:24.160 --> 00:17:26.840
Obviously, it can't do things like connect to databases


00:17:26.840 --> 00:17:29.040
or do other weird stuff that the browser won't allow.


00:17:29.040 --> 00:17:31.920
But a vast majority of what you want to do in Python


00:17:31.920 --> 00:17:35.080
or JavaScript could be done in Python, and faster and better.


00:17:35.080 --> 00:17:37.340
- Yeah, that'd be cool, okay.


00:17:37.340 --> 00:17:40.140
- So that's really cool, and I linked to his YouTube video


00:17:40.140 --> 00:17:42.300
that is the keynote where he lays this out.


00:17:42.300 --> 00:17:44.080
It's like a 45 minute talk.


00:17:44.080 --> 00:17:46.740
And the foundations of it, he actually references this


00:17:46.740 --> 00:17:48.660
in the video, a lot of the foundations


00:17:48.660 --> 00:17:53.420
for WebAssembly itself come from this thing called Asm.js,


00:17:53.420 --> 00:17:55.940
A-S-M as in assembly, dot J-S.


00:17:55.940 --> 00:17:57.900
That's an interesting project that preceded it


00:17:57.900 --> 00:18:00.280
that will let you take C code and run it in the browser


00:18:00.280 --> 00:18:02.560
by compiling it to JavaScript.


00:18:02.560 --> 00:18:06.380
So Gary Bernhardt has this amazing fictional presentation


00:18:06.380 --> 00:18:09.480
that is very educational and the tech part it teaches


00:18:09.480 --> 00:18:11.920
is real, but it has like a story around it


00:18:11.920 --> 00:18:14.520
called the birth and death of JavaScript.


00:18:14.520 --> 00:18:18.640
So that's the proper pronunciation in his fake world.


00:18:18.640 --> 00:18:20.280
And I linked to that video as well.


00:18:20.280 --> 00:18:23.480
And it's just, it's super insightful on how like


00:18:23.480 --> 00:18:27.920
asm.js and WebAssembly can bring things in to this.


00:18:27.920 --> 00:18:29.360
So like he has something insane,


00:18:29.360 --> 00:18:33.840
like a Mac OS running Firefox and in Firefox,


00:18:33.840 --> 00:18:36.700
there's Windows running,


00:18:36.700 --> 00:18:39.080
which is running Chrome or something super like


00:18:39.080 --> 00:18:41.240
Inception-like based on just as


00:18:41.240 --> 00:18:43.080
Asm.js and WebAssembly could go farther.


00:18:43.080 --> 00:18:43.920
So it's really cool.


00:18:43.920 --> 00:18:44.360
>> Nice.


00:18:44.360 --> 00:18:45.720
>> Yeah. Anyway, just wanted to give


00:18:45.720 --> 00:18:47.520
a highlight to that project.


00:18:47.520 --> 00:18:51.080
I think actually creating this myself is


00:18:51.080 --> 00:18:53.120
probably beyond my understanding of CPython,


00:18:53.120 --> 00:18:54.440
but I would love for this to exist.


00:18:54.440 --> 00:18:56.960
>> Yeah, and then we'll have to hit you up on that backslip.


00:18:56.960 --> 00:18:59.200
>> Yeah, exactly. I will do it maybe


00:18:59.200 --> 00:19:02.240
on something soft, maybe in a gymnastics place,


00:19:02.240 --> 00:19:03.160
but yeah, I'll definitely do it.


00:19:03.160 --> 00:19:04.100
All right.


00:19:04.100 --> 00:19:05.800
So very cool project.


00:19:05.800 --> 00:19:07.140
It's not directly relevant,


00:19:07.140 --> 00:19:09.960
but it has massive parallels in the Python space.


00:19:09.960 --> 00:19:10.860
So that'd be cool.


00:19:10.860 --> 00:19:12.160
Anything else you want to share with us, Brian,


00:19:12.160 --> 00:19:13.000
while we're all here?


00:19:13.000 --> 00:19:13.820
- No, I'm good.


00:19:13.820 --> 00:19:14.660
- Nice.


00:19:14.660 --> 00:19:15.500
- How about you?


00:19:15.500 --> 00:19:16.320
- I want to share two things.


00:19:16.320 --> 00:19:17.920
One, we talking before about my


00:19:17.920 --> 00:19:19.660
building data-driven web apps course


00:19:19.660 --> 00:19:20.680
that's being well-received.


00:19:20.680 --> 00:19:22.000
If you want to learn about building


00:19:22.000 --> 00:19:24.520
data-driven web apps in Python, check that out.


00:19:24.520 --> 00:19:25.760
Put the link at the bottom.


00:19:25.760 --> 00:19:29.360
Another one, someone sent in on Twitter to us,


00:19:29.360 --> 00:19:33.440
just highlighting Guido van Rossum's final presentation.


00:19:33.440 --> 00:19:35.440
At the time, I don't think that he knew


00:19:35.440 --> 00:19:37.440
that it was his final presentation,


00:19:37.440 --> 00:19:41.360
but he gave a sort of closing the conference talk


00:19:41.360 --> 00:19:45.280
at PyCascades called a Python 3 Retrospective.


00:19:45.280 --> 00:19:48.720
And so just highlighting like here's his last official


00:19:48.720 --> 00:19:52.360
as BDFL presentation might be interesting to some people.


00:19:52.360 --> 00:19:53.380
- Yeah. - Yeah, it was a good talk.


00:19:53.380 --> 00:19:54.220
I was there. - Okay.


00:19:54.220 --> 00:19:58.860
I'll just check that out. I haven't seen it. Yeah, it's pretty good. All right. Well, Brian,


00:19:58.860 --> 00:20:02.940
thanks for being here and sharing everything you have. Oh, yeah. Thank you. Yep. Bye. Bye.


00:20:02.940 --> 00:20:08.220
Thank you for listening to Python bites. Follow the show on Twitter via at Python bites. That's


00:20:08.220 --> 00:20:15.340
Python bites as in b y t s. And get the full show notes at pythonbytes.fm. If you have a news item


00:20:15.340 --> 00:20:20.140
you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for


00:20:20.140 --> 00:20:25.020
sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy.


00:20:25.020 --> 00:20:28.380
Thank you for listening and sharing this podcast with your friends and colleagues.

