
00:00:00.000 --> 00:00:04.640
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.640 --> 00:00:10.400
This is episode 187, recorded June 17th, 2020. I'm Michael Kennedy.


00:00:10.400 --> 00:00:11.680
And I am Brian Okken.


00:00:11.680 --> 00:00:13.600
And this episode is brought to you by us.


00:00:13.600 --> 00:00:17.120
There's a couple of things that we're offering that I think are going to be great for you.


00:00:17.120 --> 00:00:19.280
We'll talk more about that later.


00:00:19.280 --> 00:00:22.000
Right now, I want you to bring us back to our youth, Brian.


00:00:22.000 --> 00:00:24.080
Did you ever do the Lego Mindstorm thing?


00:00:24.080 --> 00:00:28.240
No, no. Lego was just bricks when I was a kid.


00:00:28.240 --> 00:00:34.360
Yeah, well, yeah, okay. I love Legos and I'm actually I've got like three kits halfway done right now


00:00:34.360 --> 00:00:39.440
One of them I've been working on for a long time. I should finish those anyway, cuz there's a new one


00:00:39.440 --> 00:00:44.560
I want to buy it's not out yet, but like I announced it Mindstorm robot inventor


00:00:44.560 --> 00:00:52.200
They've had different Mindstorm kits in the past for robotics and they started in 2006 or at least on the Mindstorm series


00:00:52.200 --> 00:00:54.120
There's NXT was in 2006


00:00:54.120 --> 00:00:59.480
They did an NXT 2.0 in 2009 and then the EV3 was in 2013


00:00:59.480 --> 00:01:06.140
And I was actually kind of disappointed with the EV3 because it was weird. It was like post-apocalyptic thing going on


00:01:06.140 --> 00:01:09.780
It was like punk rock robots or something. I don't know anyway


00:01:09.780 --> 00:01:14.580
So I think we've got an NXT somewhere in the house, but the new Mindstorm robot inventor


00:01:14.580 --> 00:01:20.640
they finally figured out that people are using these things to try to teach in STEM education and stuff and


00:01:21.280 --> 00:01:28.560
So the new one this is awesome drumroll. It supports scratch and Python. So that is super awesome


00:01:28.560 --> 00:01:34.780
it has instructions for five different robots that do lots of different kind of cool things like a


00:01:34.780 --> 00:01:40.300
car like robot and a upright like robot and and there's a bunch of sensors the


00:01:40.300 --> 00:01:45.880
Module that it has connects to six different input output ports for the sensors and motors


00:01:46.080 --> 00:01:52.400
There's even a six axis gyro and accelerometer a five by five LED matrix


00:01:52.400 --> 00:01:55.700
Five by five is not much but we could probably figure out we can hack more


00:01:55.700 --> 00:02:01.320
Color sensor and distance sensor, of course in Python. So one of the other neat things about it is


00:02:01.320 --> 00:02:06.200
The other one I'm not sure about the the older ones, but they were programmable


00:02:06.200 --> 00:02:08.420
of course with Windows or Mac


00:02:08.420 --> 00:02:13.440
but this one also has is going to have the ability to program it via an


00:02:14.040 --> 00:02:20.600
Android or iOS tablet or smartphone and even some FireOS. So like the Amazon


00:02:20.600 --> 00:02:24.840
Kindles some of them might be able to be used which is pretty awesome because


00:02:24.840 --> 00:02:29.120
even though this robot inventor is pretty expensive if a school is helping


00:02:29.120 --> 00:02:34.200
to support it or something and a kid has a you know a $50 tablet at home


00:02:34.200 --> 00:02:37.400
hopefully that'll work so that's neat. Yeah this is really cool and I think


00:02:37.400 --> 00:02:40.440
being able to program with a real programming language instead of a


00:02:40.440 --> 00:02:43.800
blocky type of programming language goes a long ways.


00:02:43.800 --> 00:02:50.120
I think people underestimate how much kids can do with some simple text versus, you know,


00:02:50.120 --> 00:02:54.680
like, well, it's got to be drag and droppy, so don't ever make syntax errors.


00:02:54.680 --> 00:03:00.560
And you know, if you look at things like CodeCombat.com, kids go through these dungeons and they solve


00:03:00.560 --> 00:03:06.320
like challenges to open the door, make it across the bridge or whatever with code, but


00:03:06.320 --> 00:03:08.440
it's all typing Python.


00:03:08.440 --> 00:03:13.440
But the editor is so insanely aggressive, in a good way,


00:03:13.440 --> 00:03:15.720
aggressive with auto-complete.


00:03:15.720 --> 00:03:19.680
Like if you type A, it'll try to auto-complete hero.attack


00:03:19.680 --> 00:03:21.080
and suggest arguments.


00:03:21.080 --> 00:03:22.840
I mean, it's like ridiculous.


00:03:22.840 --> 00:03:25.620
And in those sorts of scenarios, I feel like,


00:03:25.620 --> 00:03:26.600
you know, don't pull the punches.


00:03:26.600 --> 00:03:29.120
Like give the kids a real experience.


00:03:29.120 --> 00:03:30.520
They'll adapt pretty quickly.


00:03:30.520 --> 00:03:32.840
I think people underestimate with the right tooling


00:03:32.840 --> 00:03:35.400
what kids can do with a text language like Python.


00:03:35.400 --> 00:03:37.480
- Yeah, and I, so I really hope,


00:03:37.480 --> 00:03:38.480
I think so too.


00:03:38.480 --> 00:03:40.120
And so it's exciting to have it.


00:03:40.120 --> 00:03:45.200
I know you can't, there were ways to put control the EV3 with Python, but it was extra hacky


00:03:45.200 --> 00:03:47.000
ways and not obvious for people.


00:03:47.000 --> 00:03:51.920
And so hopefully having this supported, and I really hope that we get more of these sorts


00:03:51.920 --> 00:03:57.240
of robot inventor things coming out from Lego, not every seven years, could we update maybe


00:03:57.240 --> 00:03:58.240
every couple of years?


00:03:58.240 --> 00:03:59.240
That'd be awesome.


00:03:59.240 --> 00:04:00.360
Yeah, for sure.


00:04:00.360 --> 00:04:01.360
Technology changes fast.


00:04:01.360 --> 00:04:02.360
Yeah.


00:04:02.360 --> 00:04:06.360
And on a related note, I didn't do this as a full story, but I wanted to note, I also


00:04:06.360 --> 00:04:14.120
saw a project called Microscopy or Microscope Pi maybe. It's an IBM open


00:04:14.120 --> 00:04:20.960
source project to build your own modular microscope using Raspberry Pis and


00:04:20.960 --> 00:04:25.760
Lego bricks and a little bit of 3d printing and you can control it like a


00:04:25.760 --> 00:04:29.720
motorized microscope which is pretty awesome so that's neat too. Yeah yeah


00:04:29.720 --> 00:04:34.200
that's really cool. Alright well I have a theme that will become clear as I go


00:04:34.200 --> 00:04:35.700
through my items this week.


00:04:35.700 --> 00:04:39.240
I've somehow just landed, lined up with all the items


00:04:39.240 --> 00:04:41.300
I picked in the same general area.


00:04:41.300 --> 00:04:43.080
So I want to start off by talking about this article


00:04:43.080 --> 00:04:45.920
from Kevin Markham from dataskool.io.


00:04:45.920 --> 00:04:49.320
And he's been putting together lots of cool steps


00:04:49.320 --> 00:04:51.480
and guides to help people get into stuff.


00:04:51.480 --> 00:04:53.520
His area is mostly data science,


00:04:53.520 --> 00:04:54.920
but obviously on the Python side.


00:04:54.920 --> 00:04:57.720
So he created this thing called a step-by-step guide


00:04:57.720 --> 00:04:59.440
to contributing to GitHub.


00:04:59.440 --> 00:05:00.280
- Nice.


00:05:00.280 --> 00:05:03.740
- Yeah, so if you're new and you haven't actually yet


00:05:03.740 --> 00:05:05.280
contributed to an open source project,


00:05:05.280 --> 00:05:08.960
it's like, here are the 17 steps in order.


00:05:08.960 --> 00:05:10.220
And some of them are obvious,


00:05:10.220 --> 00:05:11.940
like you have to have a GitHub account,


00:05:11.940 --> 00:05:14.160
you have to fork the project.


00:05:14.160 --> 00:05:15.640
Others are not as obvious.


00:05:15.640 --> 00:05:18.280
Like I always, whenever I fork something,


00:05:18.280 --> 00:05:19.120
and I'm like, oh, you know,


00:05:19.120 --> 00:05:22.520
I really wanna get the changes from the thing I forked,


00:05:22.520 --> 00:05:25.420
merged, you know, sort of synchronize my fork


00:05:25.420 --> 00:05:26.400
with the remote fork.


00:05:26.400 --> 00:05:28.080
I'm always like, what is that command again


00:05:28.080 --> 00:05:30.440
about like remote origins and,


00:05:30.440 --> 00:05:32.520
or upstream, I gotta set, you know what I'm like.


00:05:32.520 --> 00:05:35.080
So having that stuff all laid out in a nice little


00:05:35.080 --> 00:05:37.680
do this, then this, then this guide is helpful


00:05:37.680 --> 00:05:39.380
even just for a couple of those steps


00:05:39.380 --> 00:05:40.820
if you've done it before.


00:05:40.820 --> 00:05:43.140
So I'll just run you through the steps really quick.


00:05:43.140 --> 00:05:45.780
People can go and see the pictures and the graphics


00:05:45.780 --> 00:05:47.240
and the explanation.


00:05:47.240 --> 00:05:48.700
So I want to contribute to something.


00:05:48.700 --> 00:05:50.860
I think he contributed something back to scikit-learn,


00:05:50.860 --> 00:05:52.780
but it could be any project, right?


00:05:52.780 --> 00:05:53.740
So you start by figuring out


00:05:53.740 --> 00:05:55.720
what project you want to contribute to.


00:05:55.720 --> 00:05:58.380
You fork it to your GitHub account,


00:05:58.380 --> 00:06:01.460
and then you check it out, you clone it locally,


00:06:01.460 --> 00:06:03.260
add loaded up, make some changes,


00:06:03.260 --> 00:06:04.920
and then you make sure you have your origin remote


00:06:04.920 --> 00:06:08.620
pointed back to the thing on GitHub.


00:06:08.620 --> 00:06:10.060
And then the part I was just talking about,


00:06:10.060 --> 00:06:12.300
you can add an upstream remote,


00:06:12.300 --> 00:06:13.700
which allows you to say,


00:06:13.700 --> 00:06:15.700
give me the changes from the source repository


00:06:15.700 --> 00:06:17.980
to my forked version.


00:06:17.980 --> 00:06:19.100
You always wanna get those,


00:06:19.100 --> 00:06:20.520
like maybe you forked it a while ago,


00:06:20.520 --> 00:06:21.660
but now you wanna make a change.


00:06:21.660 --> 00:06:24.460
So you wanna grab the changes from the upstream,


00:06:24.460 --> 00:06:26.780
the original repository and bring it over,


00:06:26.780 --> 00:06:28.860
create a new branch, a feature branch for your changes,


00:06:28.860 --> 00:06:31.060
'cause you're gonna use that for a PR.


00:06:31.060 --> 00:06:34.320
make changes, commit your changes, push it to your fork,


00:06:34.320 --> 00:06:37.420
create a PR by clicking the green create PR button,


00:06:37.420 --> 00:06:39.620
review the PR, have conversations around it,


00:06:39.620 --> 00:06:41.960
maybe make some more commits to your pull request.


00:06:41.960 --> 00:06:44.060
So it talks about like, if you submit a PR


00:06:44.060 --> 00:06:46.220
and they're like, that's great, but you need unit tests,


00:06:46.220 --> 00:06:47.400
how could you forget the unit test,


00:06:47.400 --> 00:06:48.640
please add those as well.


00:06:48.640 --> 00:06:50.700
How to do that, right?


00:06:50.700 --> 00:06:52.420
Common story, I'm sure.


00:06:52.420 --> 00:06:55.020
Discuss it, and then once it's merged,


00:06:55.020 --> 00:06:57.760
or I guess closed even, you could delete the branch,


00:06:57.760 --> 00:06:59.640
but especially if it's merged, you don't need it anymore.


00:06:59.640 --> 00:07:02.680
So delete your branch, synchronize again your fork


00:07:02.680 --> 00:07:04.960
with the original project repository


00:07:04.960 --> 00:07:06.800
through the upstream link,


00:07:06.800 --> 00:07:09.320
because once they've accepted your changes,


00:07:09.320 --> 00:07:12.840
your main branch will be out of sync with theirs.


00:07:12.840 --> 00:07:13.880
So you want to do that.


00:07:13.880 --> 00:07:16.000
And then also has a nice little tips


00:07:16.000 --> 00:07:17.880
for contributing code section as well


00:07:17.880 --> 00:07:19.880
with just some advice on how it goes.


00:07:19.880 --> 00:07:22.520
So the pictures and like here, type this for the step.


00:07:22.520 --> 00:07:24.200
I think this is pretty handy for a lot of folks.


00:07:24.200 --> 00:07:26.480
- Yeah, people just need to do it.


00:07:26.480 --> 00:07:28.480
It seems overwhelming when you start


00:07:28.480 --> 00:07:29.880
'cause it seems like, oh my gosh,


00:07:29.880 --> 00:07:32.040
this seems like so over the top.


00:07:32.040 --> 00:07:33.680
And actually, so at work,


00:07:33.680 --> 00:07:36.680
when we switched from a different version control system


00:07:36.680 --> 00:07:41.320
to Git, we started out with this sort of a model.


00:07:41.320 --> 00:07:43.560
This is not an uncommon model,


00:07:43.560 --> 00:07:46.880
even within not just open source, but other projects.


00:07:46.880 --> 00:07:49.340
Originally, I thought this is a lot of overkill.


00:07:49.340 --> 00:07:51.820
We don't really need forks and branches,


00:07:51.820 --> 00:07:54.160
but there's a lot of benefits to doing both


00:07:54.160 --> 00:07:56.320
and you can just kind of get used to it.


00:07:56.320 --> 00:07:58.480
and it ends up being not that big of a deal.


00:07:58.480 --> 00:08:01.080
- Yeah, one of the advantages for what you're talking about,


00:08:01.080 --> 00:08:04.140
like inside your company,


00:08:04.140 --> 00:08:06.320
obviously it's important for open source,


00:08:06.320 --> 00:08:08.280
mostly 'cause you don't have commit rights.


00:08:08.280 --> 00:08:09.560
So you make changes to your thing


00:08:09.560 --> 00:08:11.560
and you say, "Accept my changes," right?


00:08:11.560 --> 00:08:14.740
But inside a company, everyone has commit rights


00:08:14.740 --> 00:08:17.360
for the most part to their project they're working on.


00:08:17.360 --> 00:08:19.200
But it bundles it up in documents,


00:08:19.200 --> 00:08:21.520
like these are the changes to add this feature,


00:08:21.520 --> 00:08:23.200
these are the conversations around it,


00:08:23.200 --> 00:08:24.660
and here's how it got accepted, right?


00:08:24.660 --> 00:08:27.340
It's like a nice way to go beyond just like,


00:08:27.340 --> 00:08:30.340
here's a commit or a series of commits I did this week.


00:08:30.340 --> 00:08:32.460
I think some of them have to do with this scrum thing


00:08:32.460 --> 00:08:33.280
I said I would do.


00:08:33.280 --> 00:08:36.100
- Yeah, one of the main reasons we kept the fork model


00:08:36.100 --> 00:08:38.180
in places so that we can,


00:08:38.180 --> 00:08:41.940
if somebody accidentally pushes up a large executable


00:08:41.940 --> 00:08:44.100
or something that they shouldn't have committed


00:08:44.100 --> 00:08:48.100
in the first place, it's easier to kill a fork off


00:08:48.100 --> 00:08:51.100
than a branch of a project.


00:08:51.100 --> 00:08:54.140
- I see, it's like a layer of insulation of mistakes.


00:08:54.140 --> 00:08:55.460
- Yep, yep, definitely.


00:08:55.460 --> 00:08:56.360
- Yeah, cool.


00:08:56.360 --> 00:08:59.420
Well, before we get on to a new language,


00:08:59.420 --> 00:09:02.580
Python-inspired language, I just wanted to talk about


00:09:02.580 --> 00:09:04.420
a couple things you can do to support the show.


00:09:04.420 --> 00:09:07.580
Obviously, Brian and I are both doing things


00:09:07.580 --> 00:09:09.940
outside the podcast that we think contribute


00:09:09.940 --> 00:09:12.580
back to the community, that if you wanna support


00:09:12.580 --> 00:09:14.300
what we're doing, it would be great if you could


00:09:14.300 --> 00:09:15.780
check them out and consider them


00:09:15.780 --> 00:09:17.900
as you're learning Python things.


00:09:17.900 --> 00:09:20.640
So I have courses over at Talk Python Training.


00:09:20.640 --> 00:09:23.800
We have, I think, 170 hours of Python courses


00:09:23.800 --> 00:09:27.440
probably a couple hundred hours of exercises for people to do over there.


00:09:27.440 --> 00:09:31.080
So if you're looking for courses or to learn stuff with Python in general,


00:09:31.080 --> 00:09:34.360
check out talk by then training and Brian, you have some kind of book, I think.


00:09:34.360 --> 00:09:34.880
Yeah.


00:09:34.880 --> 00:09:38.520
So I think that anybody that wants to learn how to test better should pick up a


00:09:38.520 --> 00:09:40.720
copy of Python testing with Pytest.


00:09:40.720 --> 00:09:46.640
So book that I wrote about Pytest, it's not just, it kind of walks through all


00:09:46.640 --> 00:09:50.480
the different sorts of things you can do in the, with Pytest, but also around


00:09:50.480 --> 00:09:52.960
testing a package project.


00:09:53.480 --> 00:09:56.880
And I think a lot of these carry over, even like switching databases and stuff.


00:09:56.880 --> 00:10:00.200
These things carry over for all sorts of types of projects.


00:10:00.200 --> 00:10:04.680
And I've gotten a lot of great feedback and I think it's a good thing for people to read.


00:10:04.680 --> 00:10:05.320
Yeah, awesome.


00:10:05.320 --> 00:10:05.920
It's a great book.


00:10:05.920 --> 00:10:08.320
And both of those things are linked at the top of the show notes.


00:10:08.320 --> 00:10:10.040
So you all can just check it out in your podcast players.


00:10:10.040 --> 00:10:15.120
So I'm always fascinated with embedded Python and things like micro Python and


00:10:15.120 --> 00:10:16.040
circuit Python.


00:10:16.040 --> 00:10:18.600
And you've got something along these lines, right?


00:10:18.600 --> 00:10:19.120
Yes.


00:10:19.160 --> 00:10:23.920
I ran across this, a language called SNEK, or SNEK, I think.


00:10:23.920 --> 00:10:24.420
SNEK.


00:10:24.420 --> 00:10:25.520
S-N-E-K.


00:10:25.520 --> 00:10:29.480
So it's at sneklang.org.


00:10:29.480 --> 00:10:33.040
And it's a Python-inspired language for embedded devices.


00:10:33.040 --> 00:10:36.520
But my first reaction is probably going to be yours is also,


00:10:36.520 --> 00:10:37.640
don't we already have that?


00:10:37.640 --> 00:10:39.000
Don't we already have MicroPython?


00:10:39.000 --> 00:10:39.960
We already have two.


00:10:39.960 --> 00:10:41.240
I'm confused why we have two.


00:10:41.240 --> 00:10:42.920
Yes, and CircuitPython.


00:10:42.920 --> 00:10:44.880
Well, actually, yeah, we've got lots.


00:10:44.880 --> 00:10:49.180
MicroPython, CircuitPython are the ones that we think about a lot.


00:10:49.180 --> 00:10:52.420
CircuitPython, of course, is focused around Adafruit,


00:10:52.420 --> 00:10:55.120
but also runs on lots of different other boards as well.


00:10:55.120 --> 00:10:57.080
But what about really small things?


00:10:57.080 --> 00:11:00.560
Even those, they run on these small chips,


00:11:00.560 --> 00:11:04.180
but there's smaller chips that you might want also.


00:11:04.180 --> 00:11:07.780
So if you only have a few kilobytes of flash and RAM


00:11:07.780 --> 00:11:09.780
and you still want to run something,


00:11:09.780 --> 00:11:11.080
can you run Python?


00:11:11.080 --> 00:11:13.580
And that's where SNAC comes in.


00:11:13.620 --> 00:11:19.620
So it's I mean it really runs on small processors even one of the things it supports is the Lego


00:11:19.620 --> 00:11:26.660
EV3. So if you don't want to wait for the new robot inventor you can run SNEC on your current


00:11:26.660 --> 00:11:34.820
EV3. So that's neat. But the smallness, its goal is it's not Python. So most SNEC programs will run


00:11:34.820 --> 00:11:40.820
in Python but not the other way around. You can't run most Python in it. So it's got a limited


00:11:40.820 --> 00:11:44.260
language, but part of that is an educational purpose.


00:11:44.260 --> 00:11:49.780
So a smaller language footprint as Python's adding more and more new features,


00:11:49.780 --> 00:11:53.060
it may be overwhelming for some people when they're just starting out.


00:11:53.060 --> 00:11:55.620
So having a smaller language is kind of a neat thing.


00:11:55.620 --> 00:11:59.860
But all of that learning can go towards your, if you're learning SNAC,


00:11:59.860 --> 00:12:03.860
you can transfer that to Python projects later.


00:12:03.860 --> 00:12:08.580
- Right, it's easy to level up to Python because it's like going from C to C++.


00:12:08.580 --> 00:12:10.740
There's stuff to learn, but it'll kind of work.


00:12:10.740 --> 00:12:11.580
- Yeah.


00:12:11.580 --> 00:12:13.660
Yep, there's even like a dedicated,


00:12:13.660 --> 00:12:16.540
a new board called the SNEC board that you can,


00:12:16.540 --> 00:12:17.780
that is available.


00:12:17.780 --> 00:12:20.780
It was through a crowdfunding process,


00:12:20.780 --> 00:12:23.740
but it runs both CircuitPython and SNEC.


00:12:23.740 --> 00:12:26.140
So yeah, one more thing to be able to run


00:12:26.140 --> 00:12:29.780
little small chips with Python-like language.


00:12:29.780 --> 00:12:30.620
So this is neat.


00:12:30.620 --> 00:12:31.460
- Yeah, it's really cool.


00:12:31.460 --> 00:12:33.700
And the very, very small devices,


00:12:33.700 --> 00:12:35.460
I think it's gonna mean, you know,


00:12:35.460 --> 00:12:37.700
Python can appear in more places, right?


00:12:37.700 --> 00:12:39.900
on incredibly small IoT things and whatnot.


00:12:39.900 --> 00:12:41.940
- Like even if you have larger though,


00:12:41.940 --> 00:12:44.100
I like the idea of people saying,


00:12:44.100 --> 00:12:47.140
Python's just kind of a great syntax


00:12:47.140 --> 00:12:51.100
if we strip some of the things out that full Python has.


00:12:51.100 --> 00:12:54.160
It's still a usable language with a lot of it stripped out.


00:12:54.160 --> 00:12:55.540
So I think it's a good thing.


00:12:55.540 --> 00:12:56.980
- Well, that whole idea,


00:12:56.980 --> 00:12:58.460
I mean, we could go on and on about that,


00:12:58.460 --> 00:12:59.820
but the whole idea is pretty interesting


00:12:59.820 --> 00:13:03.740
because as we see things like Python moving to WebAssembly


00:13:03.740 --> 00:13:05.740
and running on the front end


00:13:05.740 --> 00:13:09.500
and talking about maybe having a Python on mobile,


00:13:09.500 --> 00:13:12.300
as well as the traditional CPython that we know


00:13:12.300 --> 00:13:13.260
and Python on chips,


00:13:13.260 --> 00:13:17.980
like having this concept of a smaller focused subset


00:13:17.980 --> 00:13:19.900
of Python that is universal.


00:13:19.900 --> 00:13:21.100
That's pretty interesting anyway.


00:13:21.100 --> 00:13:22.300
And it sounds like that's a little bit


00:13:22.300 --> 00:13:23.300
of the philosophy here.


00:13:23.300 --> 00:13:25.100
- Yeah, it is interesting.


00:13:25.100 --> 00:13:27.620
What other things we see like this coming up in the future?


00:13:27.620 --> 00:13:28.500
- That's right.


00:13:28.500 --> 00:13:31.880
So we spoke about Git before and Forks


00:13:31.880 --> 00:13:33.620
and using Forks as installation,


00:13:33.620 --> 00:13:35.340
but have you ever made a mistake with Git?


00:13:35.340 --> 00:13:36.860
- Like every day, yeah.


00:13:36.860 --> 00:13:37.700
- Yeah.


00:13:37.700 --> 00:13:38.520
(laughs)


00:13:38.520 --> 00:13:40.980
You're like, "Why did that thing get checked in?


00:13:40.980 --> 00:13:43.860
"I told it to ignore it and now it's in there, right?"


00:13:43.860 --> 00:13:45.060
Yeah, stuff like that.


00:13:45.060 --> 00:13:50.060
So Andrew Simon sent over a link and recommended a Zine,


00:13:50.060 --> 00:13:52.620
a little small book.


00:13:52.620 --> 00:13:53.560
- Zine.


00:13:53.560 --> 00:13:56.820
- A Zine, yeah, a Zine by Julia Evans.


00:13:56.820 --> 00:14:00.900
She has a bunch in the programming and DevOps space.


00:14:00.900 --> 00:14:04.980
And she created one called Oh Shit Git.


00:14:04.980 --> 00:14:08.900
And it's like, I'm learning Git and oh my gosh,


00:14:08.900 --> 00:14:11.580
something's gone wrong, what have I done?


00:14:11.580 --> 00:14:12.420
It's cool, right?


00:14:12.420 --> 00:14:13.500
- This is great.


00:14:13.500 --> 00:14:15.340
- Yeah, so I wanna be clear, this is a paid thing,


00:14:15.340 --> 00:14:18.060
it costs $10, we have no affiliation with it,


00:14:18.060 --> 00:14:19.300
but I just like the idea of it,


00:14:19.300 --> 00:14:20.820
so I thought I would feature it.


00:14:20.820 --> 00:14:25.820
So basically it's this really short little zine book thing


00:14:25.820 --> 00:14:28.540
that explains Git fundamentals, like what's a SHA


00:14:28.540 --> 00:14:31.540
and why don't you call it an SHA, I don't know.


00:14:31.540 --> 00:14:32.900
Stuff like that, right?


00:14:32.900 --> 00:14:34.900
And then it goes into a bunch of,


00:14:34.900 --> 00:14:36.340
how do I fix common mistakes?


00:14:36.340 --> 00:14:38.620
Like I committed to the wrong branch


00:14:38.620 --> 00:14:39.940
and other fundamental problems,


00:14:39.940 --> 00:14:43.020
or I have a merge conflict,


00:14:43.020 --> 00:14:45.340
or I committed the wrong file,


00:14:45.340 --> 00:14:47.840
or I ignored a file, you know,


00:14:47.840 --> 00:14:49.400
and going back in time, right?


00:14:49.400 --> 00:14:52.140
Like we wrote the wrong code,


00:14:52.140 --> 00:14:53.460
the server is down,


00:14:53.460 --> 00:14:55.100
everyone is yelling at me.


00:14:55.100 --> 00:14:56.540
I know it worked yesterday.


00:14:56.540 --> 00:15:00.140
How do I get the server or something to go back and say,


00:15:00.140 --> 00:15:01.180
just go back to the way it was


00:15:01.180 --> 00:15:02.640
and we'll deal with it in a minute.


00:15:02.640 --> 00:15:03.560
when things calm down.


00:15:03.560 --> 00:15:04.980
So like all those kinds of stuff.


00:15:04.980 --> 00:15:06.400
So I thought this was kind of a cool one


00:15:06.400 --> 00:15:09.320
and people who are like getting started with Git,


00:15:09.320 --> 00:15:11.720
but they're, you know, they run into these things


00:15:11.720 --> 00:15:12.560
and it's a big deal.


00:15:12.560 --> 00:15:14.160
It's like, oh no, it's a merge conflict.


00:15:14.160 --> 00:15:14.980
Now what?


00:15:14.980 --> 00:15:16.020
I'm stuck, right?


00:15:16.020 --> 00:15:18.440
Or like I said, committed to the wrong file


00:15:18.440 --> 00:15:20.880
or to the wrong branch or whatnot.


00:15:20.880 --> 00:15:22.440
I think this would be pretty helpful for folks.


00:15:22.440 --> 00:15:25.560
- I love that the titles of the different sections


00:15:25.560 --> 00:15:27.680
are the thing that went wrong.


00:15:27.680 --> 00:15:30.460
Like I committed to the wrong branch.


00:15:30.460 --> 00:15:31.560
- Exactly.


00:15:31.560 --> 00:15:33.500
- Yeah, I tried to run a diff and nothing happened.


00:15:33.500 --> 00:15:34.880
I have a merge conflict.


00:15:34.880 --> 00:15:36.740
I want to split my commit into two commits.


00:15:36.740 --> 00:15:39.400
I want to undo something five commits ago and so on.


00:15:39.400 --> 00:15:42.460
- I got to make sure that this isn't a violation


00:15:42.460 --> 00:15:46.420
of my human resources things to buy this


00:15:46.420 --> 00:15:50.440
for all of my employees because I think everybody needs this.


00:15:50.440 --> 00:15:51.380
These things are great.


00:15:51.380 --> 00:15:54.260
- Yeah, just put a little bit of black electrical tape


00:15:54.260 --> 00:15:56.900
on top of that middle word and then you can hand it out.


00:15:56.900 --> 00:15:58.060
- It's a PDF.


00:15:58.060 --> 00:16:01.900
Maybe I get, buy five licenses and printed it five times.


00:16:01.900 --> 00:16:04.060
- Yeah, no, it's pretty good.


00:16:04.060 --> 00:16:06.100
It's like, I did something terribly wrong.


00:16:06.100 --> 00:16:08.000
Does Git have a time machine?


00:16:08.000 --> 00:16:10.180
Yeah, so it sounds interesting.


00:16:10.180 --> 00:16:11.540
Thanks, Andrew, for recommending it,


00:16:11.540 --> 00:16:14.300
and Julia, cool work on the creative way


00:16:14.300 --> 00:16:16.140
to address Git issues.


00:16:16.140 --> 00:16:17.140
- Yeah, definitely.


00:16:17.140 --> 00:16:19.780
- So what's the story with versioning?


00:16:19.780 --> 00:16:21.180
You guys got a beef with it?


00:16:21.180 --> 00:16:24.900
- Well, I've kind of always had a beef with it,


00:16:24.900 --> 00:16:26.820
but I didn't really think about it.


00:16:26.820 --> 00:16:29.680
So Brett Cannon actually asked a question on,


00:16:29.680 --> 00:16:31.620
it was interesting.


00:16:31.620 --> 00:16:33.620
He wrote an article that I read recently


00:16:33.620 --> 00:16:36.380
called "Why I Don't Like SemVer Anymore."


00:16:36.380 --> 00:16:38.700
SemVer being semantic versioning.


00:16:38.700 --> 00:16:42.740
- That's the 2.1.0 style.


00:16:42.740 --> 00:16:46.380
- Yeah, and like as opposed to calendar versioning


00:16:46.380 --> 00:16:50.860
or what we were, we talked about this earlier of zero-ver.


00:16:50.860 --> 00:16:53.660
- Zero-ver is like an even more negative version


00:16:53.660 --> 00:16:54.860
of sem-ver.


00:16:54.860 --> 00:16:57.540
- Yeah, so the interesting question is,


00:16:57.540 --> 00:16:59.540
it's not straightforward as to what,


00:16:59.540 --> 00:17:01.900
so often it's like the first digit,


00:17:01.900 --> 00:17:04.580
like if we say x.y.z,


00:17:04.580 --> 00:17:06.420
x is some major thing,


00:17:06.420 --> 00:17:08.680
so like some crazy new feature.


00:17:08.680 --> 00:17:09.900
It's either a crazy new feature


00:17:09.900 --> 00:17:12.320
or it's a incompatibility with the old one,


00:17:12.320 --> 00:17:13.780
like we're gonna change the interface.


00:17:13.780 --> 00:17:16.400
- Right, when Django went from one dot something to two dot o,


00:17:16.400 --> 00:17:18.580
they dropped support for Python 2, for example,


00:17:18.580 --> 00:17:20.220
and that was indicated partly there.


00:17:20.220 --> 00:17:21.780
- Yeah, exactly.


00:17:21.780 --> 00:17:25.340
So what constitutes an interface break?


00:17:25.340 --> 00:17:27.320
And that's what a lot of people think about.


00:17:27.320 --> 00:17:31.160
Well, what about if you add a deprecation warning


00:17:31.160 --> 00:17:34.860
to something that you're planning on taking out


00:17:34.860 --> 00:17:36.640
in the next version?


00:17:36.640 --> 00:17:38.800
Is that adding an extra warning,


00:17:38.800 --> 00:17:42.940
is that a major thing or a bug fix or a minor thing?


00:17:42.940 --> 00:17:45.080
And that's part of the discussion of,


00:17:45.080 --> 00:17:47.660
most of us I think would think that maybe that's a,


00:17:47.660 --> 00:17:49.880
either that's just a bug fix or a minor thing,


00:17:49.880 --> 00:17:51.300
that's not a major thing.


00:17:51.300 --> 00:17:53.900
- Right, to me it makes like no different,


00:17:53.900 --> 00:17:56.780
there's no new functionality, nothing stopped working.


00:17:56.780 --> 00:17:59.060
That seems like a super minor,


00:17:59.060 --> 00:18:01.500
like it should change the very last number,


00:18:01.500 --> 00:18:04.940
because it doesn't even add or change a functionality.


00:18:04.940 --> 00:18:06.100
- But it is adding a warning.


00:18:06.100 --> 00:18:10.820
So if I'm running Python with the flag


00:18:10.820 --> 00:18:13.440
that turns all warnings into errors,


00:18:13.440 --> 00:18:15.860
or if I'm running my tests such that,


00:18:15.860 --> 00:18:17.740
and that's like normal with running tests


00:18:17.740 --> 00:18:20.620
is you turn all your warnings into failures


00:18:20.620 --> 00:18:22.220
so that you find them.


00:18:22.220 --> 00:18:25.220
Now you really did change the interface


00:18:25.220 --> 00:18:28.260
because to get rid of that warning I have to go


00:18:28.260 --> 00:18:33.260
and either I need to not look at that warning


00:18:33.260 --> 00:18:36.860
or I need to change my use of that thing.


00:18:36.860 --> 00:18:38.540
So it is kind of an interface break.


00:18:38.540 --> 00:18:39.380
- Yeah, for sure.


00:18:39.380 --> 00:18:41.020
- So that's part of this discussion


00:18:41.020 --> 00:18:43.500
is that it's not really straightforward to say


00:18:43.500 --> 00:18:46.780
that what is a major, minor, or micro change,


00:18:46.780 --> 00:18:47.700
what that really is.


00:18:47.700 --> 00:18:49.140
It's a gray area.


00:18:49.140 --> 00:18:50.060
There's discussion.


00:18:50.060 --> 00:18:53.140
And then also really what the observation


00:18:53.140 --> 00:18:57.060
that the three digits kind of makes sense


00:18:57.060 --> 00:19:00.060
if you are maintaining three or more branches.


00:19:00.060 --> 00:19:02.500
So if you're maintaining a current branch


00:19:02.500 --> 00:19:05.220
plus the features you're working on the next one,


00:19:05.220 --> 00:19:08.300
that's another branch, plus you're doing bug fixes


00:19:08.300 --> 00:19:10.620
to the current production one.


00:19:10.620 --> 00:19:14.100
So you've got like development going on in one branch


00:19:14.100 --> 00:19:16.380
and fixes in the other one.


00:19:16.380 --> 00:19:18.420
And then, you know, minor things going on.


00:19:18.420 --> 00:19:23.860
You might have like even more branches that you're maintaining at once for a large project with lots of people on it


00:19:23.860 --> 00:19:30.700
That totally makes sense for small projects and side projects and things where you're really you're not maintaining a bunch of stuff


00:19:30.700 --> 00:19:32.860
You it's one branch and you fix bugs


00:19:32.860 --> 00:19:37.940
You're not planning on adding new features or if you are, you know, I don't know


00:19:37.940 --> 00:19:39.940
It's so infrequent that does it matter?


00:19:39.940 --> 00:19:43.820
Maybe two digits is enough just X dot Y or maybe just one digit


00:19:44.220 --> 00:19:47.740
Because there's a whole one of the reasons why a whole bunch of people are at zero for is


00:19:47.740 --> 00:19:51.620
they're trying to not be backwards incompatible and they're and


00:19:51.620 --> 00:19:58.660
They're not gonna add any major new features. It's a simple tool or something. The other thing Brett brings up is


00:19:58.660 --> 00:20:04.660
Basically, you shouldn't depend on this stuff because it's nebulous and wishy-washy


00:20:04.660 --> 00:20:12.740
You shouldn't depend on the numbering semantic versioning to see whether or not what versions of a new of a dependent


00:20:12.860 --> 00:20:18.860
project you're using, you should rely on continuous integration and testing. So do a minimum version


00:20:18.860 --> 00:20:24.620
for the project you're using, but don't do a max, and use your testing to find out if there's any


00:20:24.620 --> 00:20:29.580
problems. Always do the latest one, and the version doesn't really matter. You're going to


00:20:29.580 --> 00:20:36.460
keep ahead, and if your CI breaks, then you might have to pin your dependency to earlier one. But


00:20:36.460 --> 00:20:41.980
also, you should always pin your dependencies to specific versions and just use your CI and testing


00:20:41.980 --> 00:20:45.580
system to see if you can move forward. Yeah, absolutely. And if you use something like


00:20:45.580 --> 00:20:50.220
Dependabot or PyUp or something like that, it'll automatically look at your repository,


00:20:50.220 --> 00:20:56.620
increment those versions, run some CI if you have it set up, and you'll know if it's acceptable or


00:20:56.620 --> 00:21:00.860
not. So you can get the system to tell you, "Hey, you should update this pinned version


00:21:00.860 --> 00:21:06.300
and click here to allow it." Yeah, I love systems like that. And it totally makes it so you can


00:21:06.300 --> 00:21:08.300
review it and go, "Yeah, that's good."


00:21:08.300 --> 00:21:10.300
And let the... often those


00:21:10.300 --> 00:21:12.300
just show up as a merge request that you just


00:21:12.300 --> 00:21:14.300
accept, right? - That's right. Yeah, very nice.


00:21:14.300 --> 00:21:16.300
- Yeah. So, good discussion about


00:21:16.300 --> 00:21:18.300
thinking about whether semantic versioning


00:21:18.300 --> 00:21:20.300
really is appropriate for your


00:21:20.300 --> 00:21:22.300
project. - Yeah, so, do you remember what


00:21:22.300 --> 00:21:24.300
the recommendation was? I scanned it and I didn't see like a


00:21:24.300 --> 00:21:26.300
super clear, like, "Do this instead."


00:21:26.300 --> 00:21:28.300
- No, the end, there's


00:21:28.300 --> 00:21:30.300
a kind of a summary that I kind of


00:21:30.300 --> 00:21:32.300
like, cribbed and put


00:21:32.300 --> 00:21:34.300
in our show notes. Essentially, it's


00:21:34.300 --> 00:21:37.300
Try to pin the lowest version,


00:21:37.300 --> 00:21:39.300
or pin your versions, of course,


00:21:39.300 --> 00:21:43.300
but have a low end, but don't have an upper end, and just test.


00:21:43.300 --> 00:21:45.300
As for using dependencies,


00:21:45.300 --> 00:21:47.300
for your own version,


00:21:47.300 --> 00:21:50.300
it really was, it should match your branching strategy, really.


00:21:50.300 --> 00:21:53.300
So if you're really not supporting three branches,


00:21:53.300 --> 00:21:57.300
three-digit semantic versioning doesn't make sense.


00:21:57.300 --> 00:21:59.300
You can do two-digit or one-digit versioning.


00:21:59.300 --> 00:22:01.300
Yeah, pretty cool.


00:22:01.300 --> 00:22:03.300
All right, carrying on with my theme,


00:22:03.300 --> 00:22:05.060
You want to talk about Git?


00:22:05.060 --> 00:22:06.500
- Oh, we haven't covered Git for a while,


00:22:06.500 --> 00:22:07.500
so that'd be good.


00:22:07.500 --> 00:22:08.840
- Yeah, for sure.


00:22:08.840 --> 00:22:12.620
So there's famous, like, you know,


00:22:12.620 --> 00:22:17.340
rock star famous, Julia Roberts, movie star famous.


00:22:17.340 --> 00:22:20.140
There's like maybe a step down, but still pretty cool.


00:22:20.140 --> 00:22:21.620
There's geek famous, right?


00:22:21.620 --> 00:22:23.720
Like on the regular street, nobody would recognize you,


00:22:23.720 --> 00:22:25.100
but at a conference, you're kind of cool.


00:22:25.100 --> 00:22:26.700
I think probably Guido van Rossum


00:22:26.700 --> 00:22:28.900
definitely fits geek famous, right?


00:22:28.900 --> 00:22:29.740
- Yeah.


00:22:29.740 --> 00:22:31.180
- And then apparently there's Git famous.


00:22:31.180 --> 00:22:35.020
- Oh, is that when you have like your pixelated face


00:22:35.020 --> 00:22:36.340
as your git history?


00:22:36.340 --> 00:22:38.520
- It's really complicated, but if you time it just right,


00:22:38.520 --> 00:22:39.760
you can, yeah.


00:22:39.760 --> 00:22:42.680
No, so there's this project, Bjorn Olsen sent this over,


00:22:42.680 --> 00:22:43.640
said, "Hey, you should check this out.


00:22:43.640 --> 00:22:46.080
"It's quick and fun and kind of useful."


00:22:46.080 --> 00:22:49.560
If you want to go to a project and answer the question,


00:22:49.560 --> 00:22:52.640
who kind of created this or who mostly worked on this?


00:22:52.640 --> 00:22:55.440
And I have this all the time when I go look


00:22:55.440 --> 00:22:58.480
at these projects that we're researching and covering.


00:22:58.480 --> 00:22:59.760
Maybe I want to talk to the person


00:22:59.760 --> 00:23:00.800
about a question or something.


00:23:00.800 --> 00:23:03.960
I'm like, all right, well, if I can go to the contribution thing in GitHub, maybe it'll


00:23:03.960 --> 00:23:08.280
show me but that's more of a over time and who's recently worked on it and stuff.


00:23:08.280 --> 00:23:09.280
So it's not super good.


00:23:09.280 --> 00:23:12.360
And if you're not on GitHub, then obviously it doesn't help.


00:23:12.360 --> 00:23:16.880
So there's this thing called Git fame, which is a Python library.


00:23:16.880 --> 00:23:21.360
And the idea is you pip install Git fame, and then associate it with Git, you have a


00:23:21.360 --> 00:23:26.040
new command, you say Git space fame, and it will go through and it'll like look at all


00:23:26.040 --> 00:23:29.080
to commit on all the people and how many lines of code


00:23:29.080 --> 00:23:31.840
were changed and files and whatnot by everyone.


00:23:31.840 --> 00:23:34.120
And then it'll give you a ranking of these are all


00:23:34.120 --> 00:23:37.240
the people who contributed and here's how many files


00:23:37.240 --> 00:23:40.520
they've changed, how many lines of code they've changed


00:23:40.520 --> 00:23:41.340
and so on.


00:23:41.340 --> 00:23:43.640
It's pretty cool and it sorts them by most popular,


00:23:43.640 --> 00:23:45.960
most largest contribution downward.


00:23:45.960 --> 00:23:46.800
- That's cool.


00:23:46.800 --> 00:23:48.420
- Yeah, and it's super easy.


00:23:48.420 --> 00:23:49.260
It's super easy.


00:23:49.260 --> 00:23:53.760
Like, pip install, git fame, git config and set an alias


00:23:53.760 --> 00:23:55.800
to fame to run the Python command.


00:23:55.800 --> 00:23:57.920
and then you just type git fame and it just goes grr.


00:23:57.920 --> 00:23:59.960
And it uses the TQDM,


00:23:59.960 --> 00:24:02.280
I think that might be the right order,


00:24:02.280 --> 00:24:04.840
progress bar, you know, to show you its progress.


00:24:04.840 --> 00:24:07.520
I ran it on a somewhat large,


00:24:07.520 --> 00:24:09.640
somewhat large project,


00:24:09.640 --> 00:24:11.360
small to medium project, I guess,


00:24:11.360 --> 00:24:12.840
in terms of regular software.


00:24:12.840 --> 00:24:17.080
And it found 596 commits and it took seven seconds to do that


00:24:17.080 --> 00:24:19.960
and processed 76 files a second.


00:24:19.960 --> 00:24:20.800
That was pretty good.


00:24:20.800 --> 00:24:22.640
- Yeah, I totally like the idea,


00:24:22.640 --> 00:24:25.000
especially, Brenda, very useful for us


00:24:25.000 --> 00:24:26.540
and we want to talk to one of the people


00:24:26.540 --> 00:24:27.820
that's really involved with it.


00:24:27.820 --> 00:24:28.780
- Yeah, exactly.


00:24:28.780 --> 00:24:30.440
- Yeah, and like you said,


00:24:30.440 --> 00:24:33.800
often some of the most recent ones are valued, of course,


00:24:33.800 --> 00:24:36.460
but not major changes to the library or something.


00:24:36.460 --> 00:24:37.300
- Right, exactly.


00:24:37.300 --> 00:24:38.580
So it's a little bit hard to know.


00:24:38.580 --> 00:24:40.260
So this kind of gives you the historical view


00:24:40.260 --> 00:24:42.940
of who's really contributed to this project


00:24:42.940 --> 00:24:44.820
and how many lines of code have they changed and so on,


00:24:44.820 --> 00:24:46.420
which is not always a great measure,


00:24:46.420 --> 00:24:48.420
but it's still interesting.


00:24:48.420 --> 00:24:50.700
- Yeah, I totally missed my guess.


00:24:50.700 --> 00:24:54.460
My guess was it was an alias to rewrite getBlame


00:24:54.460 --> 00:24:57.820
because Blame is so, I don't know why they named it that.


00:24:57.820 --> 00:25:00.380
- I know, Credit, maybe GetCredit.


00:25:00.380 --> 00:25:02.180
It should be called Credit.


00:25:02.180 --> 00:25:03.000
- Yeah. - There's positive


00:25:03.000 --> 00:25:04.140
and negative credit, right?


00:25:04.140 --> 00:25:05.380
- Yeah.


00:25:05.380 --> 00:25:07.940
- Yeah, so it basically runs GetBlame


00:25:07.940 --> 00:25:10.060
over and over and over on each file


00:25:10.060 --> 00:25:13.020
and then analyzes the file, the result of GetBlame


00:25:13.020 --> 00:25:15.460
and then builds out this history based on that.


00:25:15.460 --> 00:25:16.280
- That's pretty cool. - Yeah.


00:25:16.280 --> 00:25:17.120
- Neat. - Yeah, pretty cool.


00:25:17.120 --> 00:25:19.140
Super easy to use if you're into it.


00:25:19.140 --> 00:25:22.140
And that wraps up all of our items, Brian.


00:25:22.140 --> 00:25:23.600
Got any extras you wanna share with folks?


00:25:23.600 --> 00:25:26.320
I wanted to thank everybody that's supporting the show


00:25:26.320 --> 00:25:29.960
through Patreon because I went in and took a peek today


00:25:29.960 --> 00:25:31.760
and we have 26 supporters.


00:25:31.760 --> 00:25:34.320
And if you wanna, we have links in the show notes


00:25:34.320 --> 00:25:35.560
and also links on our site,


00:25:35.560 --> 00:25:38.720
if you wanna to help out the show through Patreon,


00:25:38.720 --> 00:25:42.320
but you can also go to patreon.com/pythonbytes


00:25:42.320 --> 00:25:44.480
and many people donate a dollar a month


00:25:44.480 --> 00:25:46.160
and that is awesome, thank you.


00:25:46.160 --> 00:25:48.240
And if you go above and beyond


00:25:48.240 --> 00:25:49.520
and contribute a little bit more,


00:25:49.520 --> 00:25:52.640
so I wanted to do a special shout out to those


00:25:52.640 --> 00:25:55.100
that are contributing more than a buck.


00:25:55.100 --> 00:25:59.060
So thank you Brent Kintzer, Brian Cochran,


00:25:59.060 --> 00:26:02.020
Bert Raymakers, Richard Stonehouse,


00:26:02.020 --> 00:26:04.900
and Jeff Kiefer all donating more than a dollar.


00:26:04.900 --> 00:26:06.140
So thank you very much.


00:26:06.140 --> 00:26:07.060
- Awesome, yeah, thank you guys.


00:26:07.060 --> 00:26:10.900
That really does help support cover things like editing


00:26:10.900 --> 00:26:13.660
and transcripts and all that kind of stuff.


00:26:13.660 --> 00:26:16.640
Now I have a quick follow up for last time


00:26:16.640 --> 00:26:21.340
we spoke about DunderPi packages and things like that


00:26:21.340 --> 00:26:25.860
where you could set up, I think it was PyFlow we were speaking of, where if you interact


00:26:25.860 --> 00:26:32.620
with Python through PyFlow, basically it will use this Node.js-like behavior that is really


00:26:32.620 --> 00:26:36.260
still coming, hopefully, in PEP 582.


00:26:36.260 --> 00:26:40.460
So after that, someone, it was Paul Everett, who sent over a message and said, "Hey, did


00:26:40.460 --> 00:26:45.820
you know Kushal Das, who is one of the folks, core developers, working on this whole idea,


00:26:45.820 --> 00:26:49.120
as a little Python example, just a single Python file


00:26:49.120 --> 00:26:52.340
that you can use to basically implement this.


00:26:52.340 --> 00:26:53.820
And it says this would probably be really great


00:26:53.820 --> 00:26:56.980
for like trainers and students and teachers


00:26:56.980 --> 00:26:59.780
and stuff like that to kind of sidestep


00:26:59.780 --> 00:27:01.580
the whole virtual environment story.


00:27:01.580 --> 00:27:02.920
- Okay, that's cool.


00:27:02.920 --> 00:27:03.820
I gotta try this out.


00:27:03.820 --> 00:27:06.780
- Yeah, so a quick little link to a working version


00:27:06.780 --> 00:27:09.380
that's not just a whole overhaul like PyFlow


00:27:09.380 --> 00:27:10.940
but a simpler thing.


00:27:10.940 --> 00:27:13.620
All right, now this last one, Brian, this joke here,


00:27:13.620 --> 00:27:15.660
and I'll wrap it up with a joke as always.


00:27:15.660 --> 00:27:17.940
You've got to open it up because it's an animated GIF.


00:27:17.940 --> 00:27:20.980
First, let me ask you what shell do you use on your Mac?


00:27:20.980 --> 00:27:22.100
- Bash. - Bash, okay.


00:27:22.100 --> 00:27:24.660
So I'm a oh my Z shell kind of guy


00:27:24.660 --> 00:27:26.220
because I love the history


00:27:26.220 --> 00:27:29.100
and it keeps a really good track of all the stuff I've done.


00:27:29.100 --> 00:27:30.940
And sometimes I'll type one or two letters


00:27:30.940 --> 00:27:31.980
and I'll try to go back and I'm like,


00:27:31.980 --> 00:27:32.960
no, no, that's not,


00:27:32.960 --> 00:27:34.620
instead of just typing out the stupid thing,


00:27:34.620 --> 00:27:35.980
I'll just go back and back.


00:27:35.980 --> 00:27:40.540
And so here's this clear super bearded guy


00:27:40.540 --> 00:27:44.660
who's some kind of sysadmin Linux exaggerated person,


00:27:44.660 --> 00:27:45.500
I guess you would say.


00:27:45.500 --> 00:27:46.780
And it's an animated GIF, right?


00:27:46.780 --> 00:27:48.100
The guy's just clicking his finger,


00:27:48.100 --> 00:27:50.200
clicking his finger up, up, up, up, up, up, up.


00:27:50.200 --> 00:27:52.520
Shows him doing that, doing it some more.


00:27:52.520 --> 00:27:54.020
Now he's got a drink, he's clicking on,


00:27:54.020 --> 00:27:56.180
he's drinking his drink, clicking up.


00:27:56.180 --> 00:27:59.160
And then finally, he's so excited, he's, "Oh, finally!"


00:27:59.160 --> 00:28:00.220
What does he say?


00:28:00.220 --> 00:28:03.500
- I knew I had that LS somewhere in my history.


00:28:03.500 --> 00:28:05.780
- And eventually he just says, yeah, LS, right?


00:28:05.780 --> 00:28:08.300
He's up arrowed until like forever to just,


00:28:08.300 --> 00:28:10.020
so he didn't have to type LS.


00:28:10.020 --> 00:28:10.860
- Oh, man.


00:28:10.860 --> 00:28:11.680
- Have you ever been there?


00:28:11.680 --> 00:28:13.620
- No, 'cause I, what kind of key binding?


00:28:13.620 --> 00:28:15.100
Do you use VI key bindings?


00:28:15.100 --> 00:28:17.660
- Okay. - Do you like a backward search or something like that?


00:28:17.660 --> 00:28:21.100
- Yeah, you can just search through your history to find them.


00:28:21.100 --> 00:28:23.660
- But then you have to press more than just the up arrow.


00:28:23.660 --> 00:28:25.340
- (laughs)


00:28:25.340 --> 00:28:31.260
- Anyway, people, this has got a cool little animation cartoon thing. So I just linked over


00:28:31.260 --> 00:28:36.140
to comicstrip.com where the title is "Definitely Not Lazy."


00:28:36.140 --> 00:28:40.780
- (laughs) Yeah, definitely. You know, I was thinking about it. I don't even remember the


00:28:40.780 --> 00:28:44.300
the key sequence to do the searching, I would have to do it.


00:28:44.300 --> 00:28:46.860
I just, it's one of those built-in muscle memory things now.


00:28:46.860 --> 00:28:49.860
>> That's right. Yeah. I was trying to remember it today and I couldn't remember it.


00:28:49.860 --> 00:28:51.700
I'm like, "Oh, whatever. Up arrow, up arrow, up arrow."


00:28:51.700 --> 00:28:55.020
So yeah. Pretty funny.


00:28:55.020 --> 00:28:58.380
All right. Well, thanks for bringing all these items and sharing with everyone.


00:28:58.380 --> 00:28:59.460
Great to chat with you as always.


00:28:59.460 --> 00:28:59.900
>> Thank you.


00:28:59.900 --> 00:29:00.620
>> Yeah. Bye.


00:29:00.620 --> 00:29:02.660
>> Thank you for listening to Python Bytes.


00:29:02.660 --> 00:29:05.100
Follow the show on Twitter via @PythonBytes.


00:29:05.100 --> 00:29:08.180
That's Python Bytes as in B-Y-T-E-S.


00:29:08.180 --> 00:29:11.400
and get the full show notes at pythonbytes.fm.


00:29:11.400 --> 00:29:13.000
If you have a news item you want featured,


00:29:13.000 --> 00:29:15.440
just visit pythonbytes.fm and send it our way.


00:29:15.440 --> 00:29:18.320
We're always on the lookout for sharing something cool.


00:29:18.320 --> 00:29:20.160
On behalf of myself and Brian Okken,


00:29:20.160 --> 00:29:21.480
this is Michael Kennedy.


00:29:21.480 --> 00:29:23.500
Thank you for listening and sharing this podcast


00:29:23.500 --> 00:29:25.160
with your friends and colleagues.

