WEBVTT

00:00:00.000 --> 00:00:03.440
Hello and welcome to Python Bytes where we deliver Python news and


00:00:03.440 --> 00:00:06.200
headlines directly to your earbuds.


00:00:06.200 --> 00:00:12.920
This is episode 354 recorded September 26th, 2023.


00:00:12.920 --> 00:00:13.800
I'm Michael Kennedy.


00:00:13.800 --> 00:00:14.840
And I'm Brian Okken.


00:00:14.840 --> 00:00:16.080
I am good.


00:00:16.080 --> 00:00:18.240
It's been a busy week and it's only Tuesday.


00:00:18.240 --> 00:00:19.080
I know.


00:00:19.080 --> 00:00:21.160
And it's, it's starting, starting strong.


00:00:21.160 --> 00:00:23.480
If you want to follow the show, stay in touch with us.


00:00:23.480 --> 00:00:27.040
Um, be sure to check out Bastadon over on Mastadon.


00:00:27.040 --> 00:00:29.240
We've got all the links for that in the show notes.


00:00:29.440 --> 00:00:35.760
I was just thinking today, I just booked a couple of episodes through Mastodon for Talk Python.


00:00:35.760 --> 00:00:41.440
I just was working on another video presentation thing on Mastodon.


00:00:41.440 --> 00:00:43.520
How much work gets actually done on Mastodon?


00:00:43.520 --> 00:00:46.000
So people should be there with us, Brian.


00:00:46.000 --> 00:00:47.040
Yeah, I think so.


00:00:47.040 --> 00:00:47.760
Yeah, for sure.


00:00:47.760 --> 00:00:50.080
It's the place where all the cool kids are.


00:00:50.080 --> 00:00:51.360
Indeed, indeed.


00:00:51.360 --> 00:00:54.880
So hopefully you'll connect with us over there as well.


00:00:54.880 --> 00:00:56.160
Very exciting stuff.


00:00:56.160 --> 00:00:57.760
See some people in the audience here.


00:00:57.760 --> 00:00:59.420
you're going to have to give them a shout out later,


00:00:59.420 --> 00:01:02.660
because some things that we're sharing.


00:01:02.660 --> 00:01:04.180
And so that's going to be very exciting.


00:01:04.180 --> 00:01:05.820
So speaking of exciting,


00:01:05.820 --> 00:01:07.380
what's the first thing you got for us?


00:01:07.380 --> 00:01:10.340
- I, I'm actually really excited.


00:01:10.340 --> 00:01:12.140
I may be jumping the gun on this,


00:01:12.140 --> 00:01:16.060
but Log Merger is from Paul McGuire


00:01:16.060 --> 00:01:20.740
and it's a project he's working on and it's pretty fun.


00:01:20.740 --> 00:01:24.300
It's a, so I don't know, maybe I'm not,


00:01:24.300 --> 00:01:27.100
I think more people, a lot of people deal with log files


00:01:27.100 --> 00:01:28.700
but they have to deal with more than one.


00:01:28.700 --> 00:01:31.220
So you have maybe two processes or three


00:01:31.220 --> 00:01:33.700
that are all timestamping and saving.


00:01:33.700 --> 00:01:38.700
Well, so this is a project that is a textual-based project,


00:01:38.700 --> 00:01:43.720
but it combines them all and sorts the multiple logs


00:01:43.720 --> 00:01:46.420
based on timestamp.


00:01:46.420 --> 00:01:49.900
So you've got, maybe you've got a timestamp


00:01:49.900 --> 00:01:51.980
and then content, and it splits it out


00:01:51.980 --> 00:01:55.620
and shows you the timestamp on the left


00:01:55.620 --> 00:01:59.580
and then the different log files in columns.


00:01:59.580 --> 00:02:01.420
The example just shows two,


00:02:01.420 --> 00:02:03.980
but I think you can pass it more than two.


00:02:03.980 --> 00:02:05.940
I think you can do multiples.


00:02:05.940 --> 00:02:07.780
It's called log merger,


00:02:07.780 --> 00:02:11.140
but I don't know if it actually merges them,


00:02:11.140 --> 00:02:14.220
but it makes this combined output thing and it's really fun.


00:02:14.220 --> 00:02:16.940
>> It's more look at them in what a merge view


00:02:16.940 --> 00:02:19.300
with timestamps would look like rather than


00:02:19.300 --> 00:02:22.780
actually about trying to unify them or something.


00:02:22.780 --> 00:02:25.220
>> I had some concerns right away,


00:02:25.220 --> 00:02:28.100
and they were already like, I downloaded it


00:02:28.100 --> 00:02:29.940
and I'm trying this out.


00:02:29.940 --> 00:02:32.600
The, you can pipe the output to standard output


00:02:32.600 --> 00:02:34.380
or you can use the textual thing.


00:02:34.380 --> 00:02:36.100
So you can do either one.


00:02:36.100 --> 00:02:38.260
So the output is nice, but sometimes, you know,


00:02:38.260 --> 00:02:40.900
log files can be huge and you only want to look


00:02:40.900 --> 00:02:41.860
at a part of it.


00:02:41.860 --> 00:02:44.420
So there's a cool, there's some nice flags


00:02:44.420 --> 00:02:45.500
that they're included.


00:02:45.500 --> 00:02:47.700
There's a start and end timestamp.


00:02:47.700 --> 00:02:50.580
So where you can say, yeah, start here and then go to here


00:02:50.580 --> 00:02:52.160
and don't do the rest of it.


00:02:53.340 --> 00:02:55.940
There's an interactive mode, which is I think the default.


00:02:55.940 --> 00:02:58.660
Yeah, that shows you the little TUI


00:02:58.660 --> 00:03:00.940
and you can do error boxes and stuff.


00:03:00.940 --> 00:03:02.420
You can save them to a CSV.


00:03:02.420 --> 00:03:04.360
I don't, I think that'd be great


00:03:04.360 --> 00:03:06.620
if you want to throw it in Excel or something like that.


00:03:06.620 --> 00:03:09.880
And then multiple timestamp formats are supported.


00:03:09.880 --> 00:03:13.620
So you've got like, there's a handful


00:03:13.620 --> 00:03:15.900
that I think this is pretty good.


00:03:15.900 --> 00:03:17.820
This is the standard ones.


00:03:17.820 --> 00:03:20.020
I didn't even pass in a timestamp when I tried it out


00:03:20.020 --> 00:03:21.980
and it just worked fine.


00:03:21.980 --> 00:03:23.900
So I'm gonna be using this a lot.


00:03:23.900 --> 00:03:27.640
I'm excited about some of the upcoming work.


00:03:27.640 --> 00:03:30.400
So there's possibly,


00:03:30.400 --> 00:03:32.800
oh, maybe it's not here, but somewhere else.


00:03:32.800 --> 00:03:35.680
There's a possibility of using PCAP files.


00:03:35.680 --> 00:03:37.600
I think that's in working on,


00:03:37.600 --> 00:03:40.680
those are, I don't even remember what that stands for,


00:03:40.680 --> 00:03:43.860
but I deal with them for protocol analysis.


00:03:43.860 --> 00:03:47.700
But I maybe jumped the gun


00:03:47.700 --> 00:03:49.640
because you can't pip install it yet.


00:03:49.640 --> 00:03:52.920
You have to, right now you download the code,


00:03:52.920 --> 00:03:55.120
but it's totally usable and runnable.


00:03:55.120 --> 00:03:57.600
So I think it's worth checking out, but it's,


00:03:57.600 --> 00:03:58.440
oh gosh, it's new.


00:03:58.440 --> 00:03:59.280
It's like--


00:03:59.280 --> 00:04:01.480
- You probably could pip install with the git flag.


00:04:01.480 --> 00:04:04.160
- Oh yeah, with the git plus, exactly.


00:04:04.160 --> 00:04:06.040
- Yeah, with the git plus, exactly.


00:04:06.040 --> 00:04:07.000
- I forgot about that.


00:04:07.000 --> 00:04:08.220
So you can do, yeah.


00:04:08.220 --> 00:04:12.280
So I guess, Paul, people are using this,


00:04:12.280 --> 00:04:13.300
at least I am already.


00:04:13.300 --> 00:04:15.080
So maybe like a little,


00:04:15.080 --> 00:04:17.120
maybe I'll do a merge request to add the readme


00:04:17.120 --> 00:04:19.280
to say how to install it for now.


00:04:19.280 --> 00:04:20.120
So cool fun.


00:04:20.120 --> 00:04:21.280
>> Yeah, nice.


00:04:21.280 --> 00:04:23.480
Prior guest on the show,


00:04:23.480 --> 00:04:26.960
Seth Michael Larson says, "Whoa, packet capture files."


00:04:26.960 --> 00:04:28.120
Is that the accentuating for it?


00:04:28.120 --> 00:04:29.520
That's awesome. I need to check that out.


00:04:29.520 --> 00:04:30.240
>> Yeah.


00:04:30.240 --> 00:04:32.520
>> Jeff out in the audience says,


00:04:32.520 --> 00:04:34.720
"Does it support time zones?"


00:04:34.720 --> 00:04:37.760
It does have a time zone display feature,


00:04:37.760 --> 00:04:41.880
but I don't know if the sort considers time zones or not.


00:04:41.880 --> 00:04:46.620
>> Well, my thing is going to be that they're going to be a little off anyway,


00:04:46.620 --> 00:04:49.700
because sometimes the different,


00:04:49.700 --> 00:04:53.060
I've got log files getting generated by multiple computers


00:04:53.060 --> 00:04:55.780
that are the timestamps off by a little bit.


00:04:55.780 --> 00:04:56.940
But it's close.


00:04:56.940 --> 00:04:58.820
It's usually close enough to line them up.


00:04:58.820 --> 00:05:00.260
- Yeah, close enough.


00:05:00.260 --> 00:05:02.740
Yeah, I do stuff like this as well,


00:05:02.740 --> 00:05:06.860
like for all the talk Python web properties.


00:05:06.860 --> 00:05:10.500
You get lots of requests and the Nginx files


00:05:10.500 --> 00:05:12.700
have like a two week rolling average.


00:05:12.700 --> 00:05:15.980
The most recent one is a straight log file,


00:05:15.980 --> 00:05:18.580
what the rest are g-zipped by day.


00:05:18.580 --> 00:05:19.420
God.


00:05:19.420 --> 00:05:19.900
Okay.


00:05:19.900 --> 00:05:25.200
So I have a Python script that downloads all of those unzips, the ones that are


00:05:25.200 --> 00:05:29.180
zipped, put some altogether, then loads all of those files, sorts them by timestamp,


00:05:29.180 --> 00:05:34.400
and then like creates one super log file, maybe a pending onto a previous one.


00:05:34.400 --> 00:05:38.260
So I have like single log text log files that are the full month, month by month


00:05:38.260 --> 00:05:42.340
for analytics, because you know, we turned off Google analytics and all the sorts of


00:05:42.340 --> 00:05:43.980
other things because those are evil.


00:05:43.980 --> 00:05:44.380
Yeah.


00:05:44.420 --> 00:05:48.100
But you still want to know like, well, how many requests were there to this page


00:05:48.100 --> 00:05:52.340
or to this episode page or like where, you know, stuff like that.


00:05:52.340 --> 00:05:52.520
Right.


00:05:52.520 --> 00:05:54.340
Those, those kinds of things are relevant.


00:05:54.340 --> 00:05:56.900
So yeah, this is, this looks interesting.


00:05:56.900 --> 00:05:59.600
I had to write a bunch of code to do similar stuff.


00:05:59.600 --> 00:06:02.960
Although for 14 log files, you wouldn't try to visualize them.


00:06:02.960 --> 00:06:07.720
You want to, I just want to turn them into one mega log file so that


00:06:07.720 --> 00:06:09.420
I can run analytics across them.


00:06:09.420 --> 00:06:13.080
It's not on this readme, but I think when I was looking at it, I think


00:06:13.080 --> 00:06:14.720
there's recent stuff being done.


00:06:14.720 --> 00:06:17.200
And I think that you can pass it gzip files.


00:06:17.200 --> 00:06:19.200
I think it pulls them out.


00:06:19.200 --> 00:06:20.020
- It seems reasonable.


00:06:20.020 --> 00:06:23.040
Those are frequent formats, I suppose.


00:06:23.040 --> 00:06:23.880
- Anyway.


00:06:23.880 --> 00:06:24.720
- All right.


00:06:24.720 --> 00:06:25.540
- Cool.


00:06:25.540 --> 00:06:26.380
- Good find, a very interesting one.


00:06:26.380 --> 00:06:27.520
People in the audience like it as well.


00:06:27.520 --> 00:06:31.160
This next one comes to us from Hugo VK,


00:06:31.160 --> 00:06:34.480
and not sent in, I just discovered it, I believe.


00:06:34.480 --> 00:06:36.680
It says, "Hello, Python library maintainers.


00:06:36.680 --> 00:06:39.760
"So if you have a PyPI thing,


00:06:39.760 --> 00:06:44.640
If you twine or what upload those types of things, you probably want to pay


00:06:44.640 --> 00:06:48.700
attention because I said, because everyone was so good at finding bugs last time


00:06:48.700 --> 00:06:52.200
in the Python 3.11 release candidate.


00:06:52.200 --> 00:06:55.240
The third and final release candidate is now out.


00:06:55.240 --> 00:06:56.320
Please give it a spin.


00:06:56.320 --> 00:07:01.060
It's your last chance to find, significant problems, right?


00:07:01.060 --> 00:07:01.760
Critical problems.


00:07:01.760 --> 00:07:06.920
And goes on to point out here is a nice article on how to test it, how you can


00:07:06.920 --> 00:07:08.280
and get the release candidate.


00:07:08.280 --> 00:07:12.000
And basically, how do you test your libraries with this?


00:07:12.000 --> 00:07:14.840
And it goes through, like, how do you set up a GitHub action


00:07:14.840 --> 00:07:19.160
so that it will use the 3.12 prerelease, right?


00:07:19.160 --> 00:07:20.440
How do you do it from Dead Snakes?


00:07:20.440 --> 00:07:23.680
How do you do it for Travis CI or other CIs


00:07:23.680 --> 00:07:24.760
and different things in here?


00:07:24.760 --> 00:07:25.720
So that's cool.


00:07:25.720 --> 00:07:28.440
That'll help some people set it up into their CI.


00:07:28.440 --> 00:07:31.020
There's also a big, long discussion here.


00:07:31.020 --> 00:07:34.440
So Thomas Worters points out that release candidate 3


00:07:34.440 --> 00:07:39.800
here as a reminder until the final release of 3.12.0,


00:07:39.800 --> 00:07:41.980
the release 3.12.0 branch is set up so


00:07:41.980 --> 00:07:45.040
the release manager has to merge the changes.


00:07:45.040 --> 00:07:48.880
Reach out at this point unless something critical comes up,


00:07:48.880 --> 00:07:51.240
it should really only be documentation.


00:07:51.240 --> 00:07:54.080
Other changes will be pushed to 3.12.1.


00:07:54.080 --> 00:07:58.360
Somewhere in here, there is the intent.


00:07:58.360 --> 00:08:02.400
This is exciting. The intent is for the final release of 3.12.0


00:08:02.400 --> 00:08:05.160
scheduled for Monday, October 2nd.


00:08:05.160 --> 00:08:07.160
That is like the coming Monday.


00:08:07.160 --> 00:08:07.800
Yeah.


00:08:07.800 --> 00:08:12.240
Unless you, if you're on top of your Python bytes playlist, don't let that


00:08:12.240 --> 00:08:17.160
thing fall behind then the coming Monday, October 2nd is going to be when


00:08:17.160 --> 00:08:18.040
this thing releases.


00:08:18.040 --> 00:08:19.200
So that's pretty excellent.


00:08:19.200 --> 00:08:23.460
I guess bringing back to the first part, this is basically, you have a couple


00:08:23.460 --> 00:08:29.240
days to make sure that your library will have no hiccups when Python 3.11 ships.


00:08:29.280 --> 00:08:32.280
So, or C312, kind of gets used to saying 312.


00:08:32.280 --> 00:08:34.180
When that ships in a week,


00:08:34.180 --> 00:08:36.480
you want to make sure that your stuff just works.


00:08:36.480 --> 00:08:39.320
So here's your chance and a few steps on how to do that.


00:08:39.320 --> 00:08:42.080
- Yeah, because you know how nice people are in GitHub.


00:08:42.080 --> 00:08:43.480
You'll get issues right away.


00:08:43.480 --> 00:08:45.480
Hey, your stuff doesn't work on 312.


00:08:45.480 --> 00:08:47.360
(Lyle laughs)


00:08:47.360 --> 00:08:51.040
- You might even get like some hot October amazingness,


00:08:51.040 --> 00:08:53.560
like, "Hey, you were using the wrong preposition here.


00:08:53.560 --> 00:08:54.400
I changed it."


00:08:54.400 --> 00:08:56.040
Like, "Well, that was not wrong,


00:08:56.040 --> 00:08:58.560
but this is not a real commit."


00:08:58.560 --> 00:09:02.400
Seth is back to say, "Highly recommend the setup Python allow pre-releases feature.


00:09:02.400 --> 00:09:09.120
That lets you set up a forever pre-release testing job if you use Python version 3.x."


00:09:09.120 --> 00:09:11.120
That's pretty good advice there.


00:09:11.120 --> 00:09:11.760
Yeah, cool.


00:09:11.760 --> 00:09:14.480
>> Neat. I don't think I use that. I'll have to check it out.


00:09:14.480 --> 00:09:16.400
>> Well, now you know you can.


00:09:16.400 --> 00:09:17.360
>> All right.


00:09:17.360 --> 00:09:19.280
>> All right. What else you got that is exciting for us?


00:09:19.280 --> 00:09:19.600
>> Okay.


00:09:19.600 --> 00:09:20.880
>> What other good advice do you have?


00:09:20.880 --> 00:09:25.440
>> What do I got? I got, oh, good advice.


00:09:26.240 --> 00:09:34.880
I think I have questionable advice, but I like this pattern. So I'm linking to James Coffee Blog with


00:09:34.880 --> 00:09:40.960
the Python dictionary dispatch pattern. And I just like this because I don't know if it's not


00:09:40.960 --> 00:09:46.880
discussed much in like beginning teaching Python stuff as to, but you know, if you're a C programmer,


00:09:46.880 --> 00:09:52.400
use jump tables, or maybe you shouldn't use jump tables, but jump tables are fun in C. And you can


00:09:52.400 --> 00:09:58.720
kind of use them in Python too, but they're a little bit easier to use. You just have dictionaries.


00:09:58.720 --> 00:10:05.600
Dictionaries can store anything and they can include functions. So he has an example of just


00:10:05.600 --> 00:10:09.760
add, subtract, and multiply, which you wouldn't really use for that, but it's just an example.


00:10:09.760 --> 00:10:15.760
And I kind of forget that you can throw lambdas in because you can assign the lambdas have a value,


00:10:15.760 --> 00:10:18.160
so you can put a lambda in as a function.


00:10:18.160 --> 00:10:21.920
But you can use a function also.


00:10:21.920 --> 00:10:24.400
And then you can call them later.


00:10:24.400 --> 00:10:27.120
So you could just dereference the--


00:10:27.120 --> 00:10:29.280
or dereference-- we're going to call it like that.


00:10:29.280 --> 00:10:32.960
You look up the element in the dictionary


00:10:32.960 --> 00:10:34.880
and then actually just call it with parameters.


00:10:34.880 --> 00:10:35.760
And it works.


00:10:35.760 --> 00:10:38.320
So kind of a fun thing to do in Python.


00:10:38.320 --> 00:10:39.840
Here's a little bit of a--


00:10:39.840 --> 00:10:45.360
he said, as part of a VisionScript programming language


00:10:45.360 --> 00:10:57.720
does that interesting, but I mean, there's, there's a lot, there are times where you just have lots of things that you're switching on. And an easy way to do the switch is just to have a dictionary lookup. So


00:10:57.720 --> 00:11:15.120
yeah, exactly. That's it is pretty interesting. It's a traditionally it has been a way to do switch statements, which at the time, it was pretty much all you had to work with, right? Since then, we've had the match statement added to the language, right, which is a little


00:11:15.120 --> 00:11:20.800
bit better. So not switch but match because it's this whole parser mechanism on top of


00:11:20.800 --> 00:11:24.240
just the switch statement. But people used to traditionally say, okay, well, we'll just


00:11:24.240 --> 00:11:28.940
make a dictionary and then like your case is the key. And then what you do is the function


00:11:28.940 --> 00:11:34.640
that gets returned from that. One thing that's really missing from that pattern, that dictionary


00:11:34.640 --> 00:11:41.460
dispatch pattern is that the default case gets clunky looking, right? Like if, if none


00:11:41.460 --> 00:11:43.060
of the cases match, then what happens?


00:11:43.060 --> 00:11:47.300
Like you just get none and exception, like none type is not callable


00:11:47.300 --> 00:11:48.340
or some weird thing like that.


00:11:48.340 --> 00:11:48.540
Right?


00:11:48.540 --> 00:11:49.420
Oh yeah, you do.


00:11:49.420 --> 00:11:49.820
Yes.


00:11:49.820 --> 00:11:51.820
So you could, you could upgrade it.


00:11:51.820 --> 00:11:54.980
You could upgrade it with a default dict where the default dict


00:11:54.980 --> 00:11:57.220
returns the default case.


00:11:57.220 --> 00:11:57.620
Right.


00:11:57.620 --> 00:12:01.900
Um, I, for a while, I don't remember when I added this, but I added switch


00:12:01.900 --> 00:12:07.500
Lang, which was fun and switch Lang, uses context managers to simulate a


00:12:07.500 --> 00:12:10.300
switch with a default case sort of thing.


00:12:10.300 --> 00:12:10.900
Yeah.


00:12:10.940 --> 00:12:16.700
Or Seth is pointing out, if you use get instead of a dictionary lookup,


00:12:16.700 --> 00:12:19.700
you can give it a default to return.


00:12:19.700 --> 00:12:23.940
>> You can, but you got to give it the default every time you use it,


00:12:23.940 --> 00:12:26.700
which is you can, but it is a little bit weird.


00:12:26.700 --> 00:12:29.580
That's why the default dict makes it a little clear,


00:12:29.580 --> 00:12:31.420
because if you're going to use it more than once, I don't know.


00:12:31.420 --> 00:12:33.900
You use it more than once, it gets janky.


00:12:33.900 --> 00:12:38.540
>> I've used this and I don't put a fall through.


00:12:38.540 --> 00:12:41.260
But the reason is because it's all my code.


00:12:41.260 --> 00:12:44.140
It's all, I don't, it isn't something


00:12:44.140 --> 00:12:46.940
that's coming in from the outside world.


00:12:46.940 --> 00:12:49.900
And I have test cases around all paths.


00:12:49.900 --> 00:12:51.160
So--


00:12:51.160 --> 00:12:53.380
- Right, so you know there's not gonna be a missing case.


00:12:53.380 --> 00:12:54.220
- Yeah. - And if you do,


00:12:54.220 --> 00:12:55.660
an exception's probably a good idea.


00:12:55.660 --> 00:12:58.220
- It's not something you like, ask a user,


00:12:58.220 --> 00:12:59.820
which function would you like to call?


00:12:59.820 --> 00:13:02.340
And then, you know, pass it through.


00:13:02.340 --> 00:13:04.340
- Indeed. - Yeah, don't do that.


00:13:04.340 --> 00:13:07.500
Anyway, oh, reason why I wanted to bring it up.


00:13:07.500 --> 00:13:10.540
Not just because I didn't want to bring this up


00:13:10.540 --> 00:13:13.860
because I wanted more people to use Dictionary Dispatch.


00:13:13.860 --> 00:13:14.860
You don't have to do that.


00:13:14.860 --> 00:13:15.900
What I brought it up for,


00:13:15.900 --> 00:13:17.900
which is, it's still kind of cool to reference


00:13:17.900 --> 00:13:20.100
just to let people know you can do it,


00:13:20.100 --> 00:13:22.540
but this guy's got a blog roll.


00:13:22.540 --> 00:13:24.020
How cool is that?


00:13:24.020 --> 00:13:25.620
When's the last time you've seen a blog roll?


00:13:25.620 --> 00:13:27.580
- Dude, a blog roll.


00:13:27.580 --> 00:13:28.460
Yes.


00:13:28.460 --> 00:13:30.220
- Should we bring blog rolls back?


00:13:30.220 --> 00:13:31.940
I don't know. - Maybe.


00:13:31.940 --> 00:13:33.140
- Maybe. - I don't know.


00:13:33.140 --> 00:13:35.380
- Anyway.


00:13:35.380 --> 00:13:36.220
- That was when your blog was


00:13:36.220 --> 00:13:37.980
- You're a little home on the internet.


00:13:37.980 --> 00:13:38.820
- Yeah.


00:13:38.820 --> 00:13:41.100
- Yeah, yeah, how interesting.


00:13:41.100 --> 00:13:44.860
- There's no like hit counter though, so you know.


00:13:44.860 --> 00:13:46.780
- Oh, does it have a little dig?


00:13:46.780 --> 00:13:48.620
Like a little digging, this part is under construction,


00:13:48.620 --> 00:13:49.460
Digger.


00:13:49.460 --> 00:13:50.300
- That'd be cool.


00:13:50.300 --> 00:13:52.140
No, sorry James, if you're listening,


00:13:52.140 --> 00:13:53.660
we're not dissing you, it's just fun to see.


00:13:53.660 --> 00:13:56.820
- No, no, no, it's awesome, it's nostalgia is what it is.


00:13:56.820 --> 00:13:58.140
It is.


00:13:58.140 --> 00:13:59.740
- So anyway.


00:13:59.740 --> 00:14:04.140
- All right, back to the Seth Michael Larson show.


00:14:04.140 --> 00:14:04.980
- Yeah.


00:14:04.980 --> 00:14:11.680
His article is very timely that he just put out a little couple weeks ago,


00:14:11.680 --> 00:14:13.980
but I finally got around to featuring it now,


00:14:13.980 --> 00:14:15.520
given everything that's coming together,


00:14:15.520 --> 00:14:18.940
called Visualizing the CPython Release Process.


00:14:18.940 --> 00:14:20.380
So it was awesome.


00:14:20.380 --> 00:14:24.860
He's the Python Security Manager,


00:14:24.860 --> 00:14:28.540
Security Dev, as opposed to Mike Fiedler,


00:14:28.540 --> 00:14:32.100
who is the PyPI on both of these roles are somewhat new,


00:14:32.100 --> 00:14:33.340
which are awesome.


00:14:33.340 --> 00:14:37.300
This one is made possible by funding from OpenSSF,


00:14:37.300 --> 00:14:39.580
Alpha Omega Project, so very, very cool.


00:14:39.580 --> 00:14:42.140
And Seth is pointing out,


00:14:42.140 --> 00:14:45.140
Security Developer in Residence is the official title.


00:14:45.140 --> 00:14:46.940
Yes, right there.


00:14:46.940 --> 00:14:48.900
And then we also have the Developer in Residence,


00:14:48.900 --> 00:14:49.740
which is Lukas Schlenker.


00:14:49.740 --> 00:14:51.700
So anyway, they planned out,


00:14:51.700 --> 00:14:53.780
or he went down and wrote out


00:14:53.780 --> 00:14:56.340
what it actually looks like to release Python.


00:14:56.340 --> 00:14:59.140
And boy, oh boy, this is more than just


00:14:59.140 --> 00:15:02.100
some build CI at GitHub


00:15:02.100 --> 00:15:05.060
to make sure that the wheels or the binaries get built.


00:15:05.060 --> 00:15:07.220
So here's the process.


00:15:07.220 --> 00:15:08.340
See how close I can get this right.


00:15:08.340 --> 00:15:12.700
And also Seth is gonna be on Talk Python on Thursday


00:15:12.700 --> 00:15:13.940
in terms of live stream.


00:15:13.940 --> 00:15:16.140
And then a little bit later to talk about,


00:15:16.140 --> 00:15:19.260
we'll talk about this and a bunch of other security things.


00:15:19.260 --> 00:15:22.520
Anyway, so start out, freeze the release branch,


00:15:22.520 --> 00:15:27.100
and then the CPython upstream repo goes along


00:15:27.100 --> 00:15:31.420
and the release manager forks the repo, takes that,


00:15:31.420 --> 00:15:34.300
feeds it into the release tool manually.


00:15:34.300 --> 00:15:35.220
All these things have,


00:15:35.220 --> 00:15:36.740
there's a bunch of colors in this diagram.


00:15:36.740 --> 00:15:38.820
So each color, there's a legend,


00:15:38.820 --> 00:15:42.120
like the yellow ones are human tasks,


00:15:42.120 --> 00:15:44.660
the blue ones are release artifacts.


00:15:44.660 --> 00:15:46.820
Interesting from a security perspective,


00:15:46.820 --> 00:15:51.020
there's a source of risk is red and so on.


00:15:51.020 --> 00:15:52.800
All right, so the release tool goes along


00:15:52.800 --> 00:15:55.580
and git commit, git tags things


00:15:55.580 --> 00:16:00.460
to set the tag to version 3.12.0.


00:16:00.460 --> 00:16:04.020
Also, it creates the source ball, the tarballs from that.


00:16:04.020 --> 00:16:05.460
And where are we going now?


00:16:05.460 --> 00:16:08.380
We go over here to Azure Pipelines for the Windows people.


00:16:08.380 --> 00:16:10.940
The Azure Pipeline, there's a Windows Release Manager.


00:16:10.940 --> 00:16:13.160
The Azure Pipeline over there


00:16:13.160 --> 00:16:15.740
builds out the Windows embeddable packages,


00:16:15.740 --> 00:16:18.980
the Windows installers, updates NuGet, Windows Store,


00:16:18.980 --> 00:16:21.380
maybe even WinGet, I don't know about that.


00:16:21.380 --> 00:16:24.540
There's also an equivalent for the macOS Release Manager


00:16:24.540 --> 00:16:27.060
who does the Mac build and Mac installer.


00:16:27.060 --> 00:16:32.340
And all of these things come back into testing artifacts and creates the,


00:16:32.340 --> 00:16:37.740
they all get a GPG signature and then we get everything signed and ready to go.


00:16:37.740 --> 00:16:40.100
That gets dropped on python.org.


00:16:40.100 --> 00:16:40.900
Pretty cool, huh?


00:16:40.900 --> 00:16:42.660
That is wow.


00:16:42.660 --> 00:16:43.100
Yeah.


00:16:43.100 --> 00:16:43.900
It's a lot.


00:16:43.900 --> 00:16:49.220
Last year they live streamed this and all the people involved were on zoom.


00:16:49.220 --> 00:16:51.540
I think it was, I'm not sure it was live streamed to YouTube though.


00:16:51.540 --> 00:16:54.060
And you could actually see step by step.


00:16:54.180 --> 00:16:57.660
So, but I don't know how well people really knew what was happening.


00:16:57.660 --> 00:17:00.100
Or you can be like, all right, we're on step five, everyone.


00:17:00.100 --> 00:17:01.100
Let's go, let's go.


00:17:01.100 --> 00:17:04.560
So I think, you know, if you're going to watch that live stream, if it exists, I'm


00:17:04.560 --> 00:17:05.480
not sure it does.


00:17:05.480 --> 00:17:09.280
Um, people in the audience, if they know it's going to be live streamed, shoot


00:17:09.280 --> 00:17:10.020
out a message.


00:17:10.020 --> 00:17:11.040
Um, yeah.


00:17:11.040 --> 00:17:11.340
Okay.


00:17:11.340 --> 00:17:15.900
So too early to, I don't want to slow down the release this year, but maybe next


00:17:15.900 --> 00:17:20.900
year we can have this graph, but like animated with like little things, what's


00:17:20.900 --> 00:17:21.460
going on.


00:17:21.480 --> 00:17:21.600
Yeah.


00:17:21.600 --> 00:17:25.880
I have like little, little, video cutouts of people in the different


00:17:25.880 --> 00:17:27.160
sections and they're talking.


00:17:27.160 --> 00:17:27.280
Yeah.


00:17:27.280 --> 00:17:27.800
That'd be fun.


00:17:27.800 --> 00:17:28.680
Why not?


00:17:28.680 --> 00:17:29.240
Why not?


00:17:29.240 --> 00:17:30.080
No, this is cool.


00:17:30.080 --> 00:17:33.840
And then there's more about, there's like a more of a description below


00:17:33.840 --> 00:17:38.760
that Seth put together as well as the sources of supply chain risk and examples


00:17:38.760 --> 00:17:41.400
of that happening outside of Python primarily.


00:17:41.400 --> 00:17:43.040
Um, so pretty cool.


00:17:43.040 --> 00:17:46.000
Uh, thanks for the, the visualization, Seth.


00:17:46.000 --> 00:17:46.560
This is great.


00:17:46.560 --> 00:17:47.680
Yeah, this is cool.


00:17:47.680 --> 00:17:48.240
Nice.


00:17:48.240 --> 00:17:48.920
Yep.


00:17:48.920 --> 00:17:49.400
Over to you.


00:17:49.400 --> 00:17:51.000
Uh, no, wait, that's it for.


00:17:51.080 --> 00:17:52.440
I'll read for extras.


00:17:52.440 --> 00:17:53.920
We are in extras.


00:17:53.920 --> 00:17:55.600
Do you want to do your extras first or?


00:17:55.600 --> 00:17:56.600
Yeah, sure.


00:17:56.600 --> 00:17:57.120
They're easy.


00:17:57.120 --> 00:18:01.320
I'm going to be at PI bay over in San Francisco, October 8th.


00:18:01.320 --> 00:18:04.200
So all I want to say is if you're around, come say hi.


00:18:04.200 --> 00:18:04.500
Right.


00:18:04.500 --> 00:18:07.440
That's like primarily the reason that I go to conferences.


00:18:07.440 --> 00:18:11.120
I don't go to that many talks or that many other things, but these kind of like


00:18:11.120 --> 00:18:13.760
get to know people in open spaces and so on.


00:18:13.760 --> 00:18:18.080
So this is all one giant open space, this PI bay thing.


00:18:18.080 --> 00:18:18.440
Yeah.


00:18:18.440 --> 00:18:19.000
I went last year.


00:18:19.000 --> 00:18:19.520
It was fun.


00:18:19.560 --> 00:18:21.820
Maybe we should just bounce back and forth and do every other.


00:18:21.820 --> 00:18:22.820
Yeah, absolutely.


00:18:22.820 --> 00:18:27.100
Uh, the HTMX plus Django course is going really well.


00:18:27.100 --> 00:18:28.000
People are loving it.


00:18:28.000 --> 00:18:33.380
So if you want to do HTMX with your Django code, it will make it so much better.


00:18:33.380 --> 00:18:36.780
Like you don't have to do front end frameworks unless you really, really want to.


00:18:36.780 --> 00:18:39.060
Um, so HTMX is awesome.


00:18:39.060 --> 00:18:40.460
This is how I use it with Django.


00:18:40.460 --> 00:18:41.900
Each framework has its kind of own thing.


00:18:41.900 --> 00:18:47.020
The reason I bring this up is we're closing in at the end of the early bird discount.


00:18:47.020 --> 00:18:51.180
So if you think you're going to get it anyway, you've got until September 29th


00:18:51.180 --> 00:18:53.380
until the price goes up.


00:18:53.380 --> 00:18:54.020
A few more days.


00:18:54.020 --> 00:18:54.700
So check that out.


00:18:54.700 --> 00:18:55.180
Yeah.


00:18:55.180 --> 00:18:56.300
That's it for my extras.


00:18:56.300 --> 00:18:56.860
Nice.


00:18:56.860 --> 00:19:01.140
Um, I'll try to go through mine a little quickly.


00:19:01.140 --> 00:19:01.740
Anyway.


00:19:01.740 --> 00:19:08.540
Um, of course the complete PI test course, I did just updated, part three


00:19:08.540 --> 00:19:09.340
is started.


00:19:09.340 --> 00:19:13.620
It's, not part three, part two, I've started with chapter seven, testing


00:19:13.620 --> 00:19:14.140
strategy.


00:19:14.140 --> 00:19:15.740
So that's going along strong.


00:19:15.940 --> 00:19:20.100
I wanted to mention some podcast names.


00:19:20.100 --> 00:19:24.100
So of course, you're here with Python Bytes, that's us.


00:19:24.100 --> 00:19:26.680
My other one, a couple others,


00:19:26.680 --> 00:19:31.440
Python People, I've got a lot of great interviews coming up.


00:19:31.440 --> 00:19:34.560
Then Test & Code is now Python Test.


00:19:34.560 --> 00:19:36.060
So you get that just here,


00:19:36.060 --> 00:19:38.560
we have Python Bytes, Python People, and Python Test.


00:19:38.560 --> 00:19:41.540
Then now, Talk Python to Me is the odd man out,


00:19:41.540 --> 00:19:42.780
so we have to get Michael.


00:19:42.780 --> 00:19:44.900
You got to change your name to Python Talk.


00:19:44.900 --> 00:19:45.700
Python talk.


00:19:45.700 --> 00:19:46.060
Yeah.


00:19:46.060 --> 00:19:46.780
Python talk.


00:19:46.780 --> 00:19:49.400
Anyway, I could do that.


00:19:49.400 --> 00:19:50.420
I could change it.


00:19:50.420 --> 00:19:51.620
I can change whatever I want.


00:19:51.620 --> 00:19:52.940
It's, it's working great.


00:19:52.940 --> 00:19:53.620
Don't change it.


00:19:53.620 --> 00:19:55.660
If it's not broken, don't fix it.


00:19:55.660 --> 00:19:57.580
No, it's going pretty good.


00:19:57.580 --> 00:20:00.940
Speaking of broken, let's talk about the final thing.


00:20:00.940 --> 00:20:01.740
A joke here.


00:20:01.740 --> 00:20:02.220
Okay.


00:20:02.220 --> 00:20:03.500
Maybe this has happened to you.


00:20:03.500 --> 00:20:09.780
Here's a, a woman developer trying to sleep, but her mind is running and she's


00:20:09.780 --> 00:20:11.220
like, okay, mine stop.


00:20:11.220 --> 00:20:11.820
I need to sleep.


00:20:11.820 --> 00:20:12.300
Leave me alone.


00:20:12.740 --> 00:20:16.420
There's like a little conversation, brain woman in bed, right?


00:20:16.420 --> 00:20:18.140
It says, Hey, are you sleeping?


00:20:18.140 --> 00:20:18.580
Yes.


00:20:18.580 --> 00:20:19.220
Now shut up.


00:20:19.220 --> 00:20:22.740
She says to her brain, the brain says, I know how to fix the bug online.


00:20:22.740 --> 00:20:23.720
255.


00:20:23.720 --> 00:20:24.260
Boom.


00:20:24.260 --> 00:20:25.220
Eyes wide open.


00:20:25.220 --> 00:20:26.020
No more sleep.


00:20:26.020 --> 00:20:27.780
I can't sleep.


00:20:27.780 --> 00:20:30.040
We probably all been there, right?


00:20:30.040 --> 00:20:31.040
You're just like somewhere else.


00:20:31.040 --> 00:20:32.760
You're like, I know what it is.


00:20:32.760 --> 00:20:33.900
I know what it is.


00:20:33.900 --> 00:20:34.340
Yeah.


00:20:34.340 --> 00:20:36.020
So this one, I've got the database index.


00:20:36.020 --> 00:20:39.980
No, it's one of the downsides, but also one of the upsides of working, being,


00:20:40.000 --> 00:20:44.680
having a setup for working from home so that you can just run in and actually


00:20:44.680 --> 00:20:45.960
fix it and then go back to sleep.


00:20:45.960 --> 00:20:46.320
Right.


00:20:46.320 --> 00:20:47.520
Or you can sleep at your desk.


00:20:47.520 --> 00:20:48.940
And then when this happens, you just wake back up.


00:20:48.940 --> 00:20:49.720
It's keep typing.


00:20:49.720 --> 00:20:52.000
Okay.


00:20:52.000 --> 00:20:52.440
There we go.


00:20:52.440 --> 00:20:55.280
Awesome.


00:20:55.280 --> 00:20:57.280
Well, I mean, I have a standing desk.


00:20:57.280 --> 00:20:58.000
Why not?


00:20:58.000 --> 00:20:59.920
A like a sleeping desk though?


00:20:59.920 --> 00:21:00.720
Yeah.


00:21:00.720 --> 00:21:01.000
Why?


00:21:01.000 --> 00:21:04.880
You know, it goes, they go from sitting to standing and it could just go one more


00:21:04.880 --> 00:21:08.600
level and you're like a lazy boy just drops you into like sleeping position.


00:21:08.600 --> 00:21:08.880
Yeah.


00:21:08.880 --> 00:21:09.680
with the lazy boy.


00:21:09.680 --> 00:21:10.220
That'd be awesome.


00:21:10.220 --> 00:21:12.740
Noise kicks in as it gets below a certain height.


00:21:12.740 --> 00:21:13.300
Yeah.


00:21:13.300 --> 00:21:14.900
Monitor goes up to the ceiling.


00:21:14.900 --> 00:21:16.260
Exactly.


00:21:16.260 --> 00:21:16.420
Yeah.


00:21:16.420 --> 00:21:17.500
Be good anyway.


00:21:17.500 --> 00:21:17.880
All right.


00:21:17.880 --> 00:21:20.620
Um, well, awesome podcast again, Michael.


00:21:20.620 --> 00:21:21.180
I think.


00:21:21.180 --> 00:21:21.780
Thank you.


00:21:21.780 --> 00:21:22.620
Thank you as always.


00:21:22.620 --> 00:21:25.860
And thanks everyone for listening and some of you for attending.

