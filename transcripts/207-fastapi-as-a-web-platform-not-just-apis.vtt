
00:00:00.000 --> 00:00:04.560
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.560 --> 00:00:08.860
This is episode 207 recorded November 4th, 2020.


00:00:08.860 --> 00:00:09.700
I'm Michael Kennedy.


00:00:09.700 --> 00:00:10.560
And I'm Brian Okken.


00:00:10.560 --> 00:00:12.660
And this episode is brought to you by us.


00:00:12.660 --> 00:00:14.960
We'll tell you more about that later.


00:00:14.960 --> 00:00:15.760
Brian, how you been?


00:00:15.760 --> 00:00:17.460
I am excellent today.


00:00:17.460 --> 00:00:18.300
A little tired.


00:00:18.300 --> 00:00:18.800
How about you?


00:00:18.800 --> 00:00:20.200
Yeah, quite tired, actually.


00:00:20.200 --> 00:00:22.560
Quite tired, but I'm doing all right.


00:00:22.560 --> 00:00:27.800
Life goes on, and we continue to work from home and all those things.


00:00:27.800 --> 00:00:32.160
and you know, luckily our industry and our tools were built for that world.


00:00:32.160 --> 00:00:33.960
Yes, I'm very fortunate.


00:00:33.960 --> 00:00:35.840
Yeah, absolutely.


00:00:35.840 --> 00:00:38.440
So speaking of fortunate, I think we're fortunate that


00:00:38.440 --> 00:00:40.680
Sebastian Ramirez created FastAPI


00:00:40.680 --> 00:00:43.400
because we've talked about FastAPI before, it's super neat.


00:00:43.400 --> 00:00:45.840
We've talked about Pydantic before,


00:00:45.840 --> 00:00:49.440
which is a really cool way to take data class-like things


00:00:49.440 --> 00:00:52.680
and automatically bind them with automatic conversion,


00:00:52.680 --> 00:00:55.440
validation and whatnot for data


00:00:55.440 --> 00:00:57.600
that just comes from a JSON dictionary somewhere


00:00:57.600 --> 00:00:59.280
or just a Python dictionary,


00:00:59.280 --> 00:01:03.400
but it often is JSON being submitted to a web,


00:01:03.400 --> 00:01:04.640
some sort of web API.


00:01:04.640 --> 00:01:06.040
The reason I bring up FastAPI


00:01:06.040 --> 00:01:07.480
is I've been doing a lot of stuff with it,


00:01:07.480 --> 00:01:09.640
actually working on a series of courses


00:01:09.640 --> 00:01:12.120
around FastAPI as well, which is super exciting,


00:01:12.120 --> 00:01:15.040
and maybe I'll mention that briefly later.


00:01:15.040 --> 00:01:19.560
But one of the things that bugs me about FastAPI


00:01:19.560 --> 00:01:22.240
is it's so API-oriented


00:01:22.240 --> 00:01:24.600
that it's tricky to know what to do


00:01:24.600 --> 00:01:29.600
when you just say, I just want to create a website that has like a couple of


00:01:29.600 --> 00:01:31.560
pages and then some API.


00:01:31.560 --> 00:01:36.240
So for example, if you just create a couple of APIs now and they're like, say


00:01:36.240 --> 00:01:40.880
it's about weather, it'd be like slash API slash weather slash report API slash


00:01:40.880 --> 00:01:42.880
weather slash latest or whatever.


00:01:42.880 --> 00:01:43.160
Right.


00:01:43.160 --> 00:01:47.360
Well, if you just click the, you know, you run it, you just click the little


00:01:47.360 --> 00:01:51.920
link in your IDE or VS code or whatever and open it, what do you get?


00:01:51.960 --> 00:01:58.520
404. Probably not the best response that you could imagine. Is that like the default behavior


00:01:58.520 --> 00:02:03.480
is just to like open up the site and it says not found. So you got to like type in this stuff.


00:02:03.480 --> 00:02:09.560
Anyway, it supports Jinja in like a sort of manual way, the same way that Flask does, I guess,


00:02:09.560 --> 00:02:19.640
more or less. But I wanted a better way to have HTML pages inside of my fast API app.


00:02:19.640 --> 00:02:24.940
Because if you're going to build an API, there's a very good chance there's like two or three pages that you need.


00:02:24.940 --> 00:02:26.140
Right? Yeah.


00:02:26.140 --> 00:02:29.240
So I wanted to have a couple of things.


00:02:29.240 --> 00:02:31.540
I would like to be able to have a simple function


00:02:31.540 --> 00:02:34.840
that is a view method.


00:02:34.840 --> 00:02:40.340
Could be something that is like a HTTP endpoint for an API, but more likely it's going to be one of these pages.


00:02:40.340 --> 00:02:43.840
And I want to just be able to have it return dictionaries


00:02:43.840 --> 00:02:47.240
and say that it takes some kind of template.


00:02:49.240 --> 00:02:52.240
put a little decorator and say this one has a template home


00:02:52.240 --> 00:02:56.240
slash index dot html and it's automatically going to take that dictionary


00:02:56.240 --> 00:03:00.240
send it over to whatever template engine you choose, turn it into html and send it back.


00:03:00.240 --> 00:03:04.240
You know, set the content type to be html, all of those things


00:03:04.240 --> 00:03:07.240
because by default it's JSON. Okay, so you'd like it to be


00:03:07.240 --> 00:03:10.240
the JSON data but have it be formatted like html.


00:03:10.240 --> 00:03:13.240
Well, often with these templates what you need to do is like


00:03:13.240 --> 00:03:16.240
suppose you got a bookstore and you want to say here's the categories


00:03:16.240 --> 00:03:21.240
You have to somehow pass data over to like categories.html


00:03:21.240 --> 00:03:24.020
and it'll get like a list of categories


00:03:24.020 --> 00:03:26.340
and then you'll iterate over them and generate the HTML.


00:03:26.340 --> 00:03:27.980
So that dictionary being passed over,


00:03:27.980 --> 00:03:30.400
that's the data that you're basically providing


00:03:30.400 --> 00:03:32.300
to the dynamic HTML, right?


00:03:32.300 --> 00:03:34.260
So what I did is I went and I created this thing


00:03:34.260 --> 00:03:36.660
called fastAPI-chameleon.


00:03:36.660 --> 00:03:37.500
- Oh, nice.


00:03:37.500 --> 00:03:38.820
- So if you wanna use the chameleon template language,


00:03:38.820 --> 00:03:42.620
which previously was not really in any direct way supported,


00:03:42.620 --> 00:03:43.940
you could import all the libraries


00:03:43.940 --> 00:03:45.340
and just make it do it yourself,


00:03:45.340 --> 00:03:46.940
that's kind of painful.


00:03:46.940 --> 00:03:48.740
Now you can just put a decorator,


00:03:48.740 --> 00:03:51.460
you know, from fast API underscore chameleon import template


00:03:51.460 --> 00:03:53.920
and just say at template and point some file at it


00:03:53.920 --> 00:03:56.180
and boom, you return a dictionary.


00:03:56.180 --> 00:03:58.500
Now you have chameleon as your template language.


00:03:58.500 --> 00:03:59.660
That's neat, right?


00:03:59.660 --> 00:04:02.180
And also I found a way to write a decorator


00:04:02.180 --> 00:04:06.280
that will automatically adapt whether it's an asynchronous


00:04:06.280 --> 00:04:08.780
or a non asynchronous method, right?


00:04:08.780 --> 00:04:10.400
Because normally the decorator, what it does


00:04:10.400 --> 00:04:12.140
is it has like a wraps and has an inner


00:04:12.140 --> 00:04:14.560
and then like the inner function does stuff


00:04:14.560 --> 00:04:17.760
and then calls the actual thing it's decorating.


00:04:17.760 --> 00:04:19.640
Well, if the thing it's decorating is async,


00:04:19.640 --> 00:04:20.560
you gotta do one thing.


00:04:20.560 --> 00:04:22.640
If it's not async, you gotta do another thing.


00:04:22.640 --> 00:04:23.480
So how do you tell?


00:04:23.480 --> 00:04:25.440
There's a cool library called inspect,


00:04:25.440 --> 00:04:27.280
which will let you actually look,


00:04:27.280 --> 00:04:29.960
even if it has a little wraps decorator


00:04:29.960 --> 00:04:31.760
that tries to lie to you about what it is,


00:04:31.760 --> 00:04:34.680
it'll show you whether or not it's a coroutine,


00:04:34.680 --> 00:04:35.520
which is pretty cool.


00:04:35.520 --> 00:04:36.340
- Oh, nice.


00:04:36.340 --> 00:04:39.120
- Yeah, so on top of this, Mark Brooks saw this


00:04:39.120 --> 00:04:41.720
and said, "That's awesome, but I don't really like,


00:04:41.720 --> 00:04:43.840
"I don't use Chameleon, I like Jinja."


00:04:43.840 --> 00:04:47.840
So he forked my repo and created a fast API dash Jinja.


00:04:47.840 --> 00:04:50.600
So now you can do exactly the same thing if you like Jinja.


00:04:50.600 --> 00:04:51.440
And guess what?


00:04:51.440 --> 00:04:52.260
If there's someone out there that really,


00:04:52.260 --> 00:04:54.280
really wants to use, I don't know,


00:04:54.280 --> 00:04:57.920
Django templates or Mako or whatever, right?


00:04:57.920 --> 00:05:01.720
That's like five lines of code away from doing that as well.


00:05:01.720 --> 00:05:03.080
And the reason I think it's important


00:05:03.080 --> 00:05:05.240
to add these other template languages,


00:05:05.240 --> 00:05:08.340
not just say, well, it supports a Jinja, so you're good.


00:05:08.340 --> 00:05:09.600
The reason I think it's important is


00:05:09.600 --> 00:05:13.520
if you've got some web application that has APIs,


00:05:13.520 --> 00:05:15.960
it already has chameleon templates,


00:05:15.960 --> 00:05:17.760
or in the other example that doesn't exist yet,


00:05:17.760 --> 00:05:19.800
some Django thing and you want to convert it


00:05:19.800 --> 00:05:22.480
to use mostly FastAPI, but you don't want to rewrite


00:05:22.480 --> 00:05:25.280
all the HTML, CSS, and JavaScript.


00:05:25.280 --> 00:05:27.560
If you can make it render those templates,


00:05:27.560 --> 00:05:30.880
then it's so much easier to move from some other


00:05:30.880 --> 00:05:33.520
web framework over to FastAPI.


00:05:33.520 --> 00:05:35.000
'Cause you don't have to touch the HTML,


00:05:35.000 --> 00:05:35.840
you don't have to touch the CSS,


00:05:35.840 --> 00:05:37.160
you don't have to touch the JavaScript,


00:05:37.160 --> 00:05:39.620
there's just that middle part where you handle the request,


00:05:39.620 --> 00:05:41.200
and that's actually pretty limited.


00:05:41.200 --> 00:05:43.560
So that was my idea for creating this,


00:05:43.560 --> 00:05:46.000
was hopefully to make it possible for people


00:05:46.000 --> 00:05:48.560
who have other stuff written in Chameleon


00:05:48.560 --> 00:05:50.220
to move to FastAPI really easily,


00:05:50.220 --> 00:05:52.040
and then also just to sort of inspire


00:05:52.040 --> 00:05:53.360
a cleaner programming model.


00:05:53.360 --> 00:05:55.160
- Yeah, I actually was gonna ask you


00:05:55.160 --> 00:05:57.320
if it was possible to do something like that with Jinja,


00:05:57.320 --> 00:05:58.480
and you already answered that.


00:05:58.480 --> 00:06:00.480
- Yeah, yeah, actually it's built in,


00:06:00.480 --> 00:06:02.120
but the way it's built into FastAPI


00:06:02.120 --> 00:06:05.120
is not with a template decorator.


00:06:05.120 --> 00:06:08.840
It's, you actually go in and you say the actual file name,


00:06:08.840 --> 00:06:09.840
and then you pass a bunch of,


00:06:09.840 --> 00:06:11.840
It's like, it's not super clean.


00:06:11.840 --> 00:06:15.080
So it is quite clean the other way around, which is cool.


00:06:15.080 --> 00:06:16.560
- Yeah, nice, cool.


00:06:16.560 --> 00:06:18.760
- Carrying on about APIs.


00:06:18.760 --> 00:06:21.280
- Yeah, maybe a little less clean of a way.


00:06:21.280 --> 00:06:23.960
So yeah, we've been very excited


00:06:23.960 --> 00:06:27.060
about FastAPI recently for APIs.


00:06:27.060 --> 00:06:28.320
And in the Django world,


00:06:28.320 --> 00:06:32.400
there's the Django REST framework is quite popular.


00:06:32.400 --> 00:06:35.440
But what if you just want to use vanilla Django


00:06:35.440 --> 00:06:37.080
and write a REST API?


00:06:37.080 --> 00:06:39.280
Adam Johnson took that on and said,


00:06:39.280 --> 00:06:40.400
Yeah, of course you can do it,


00:06:40.400 --> 00:06:42.200
but you can also do it in one file.


00:06:42.200 --> 00:06:44.680
So we're gonna link to a little article


00:06:44.680 --> 00:06:48.600
where he has a simple REST API


00:06:48.600 --> 00:06:51.980
completely written in one file as a one file application.


00:06:51.980 --> 00:06:56.480
It's a little API that gives you information


00:06:56.480 --> 00:06:58.360
on the characters from Rick and Morty,


00:06:58.360 --> 00:07:01.160
specifically just Rick and Morty, and that's it.


00:07:01.160 --> 00:07:02.640
But it's a good example.


00:07:02.640 --> 00:07:03.480
I like it.


00:07:03.480 --> 00:07:06.880
It shows you how you can do redirects.


00:07:06.880 --> 00:07:10.160
And so like for instance, the endpoint,


00:07:10.160 --> 00:07:12.100
one of his endpoints is characters.


00:07:12.100 --> 00:07:15.860
So if you type your application slash characters


00:07:15.860 --> 00:07:20.560
with a slash at the end, it should return a JSON data


00:07:20.560 --> 00:07:22.980
with the information about Rick and Morty.


00:07:22.980 --> 00:07:25.220
Now, what if you just don't put anything?


00:07:25.220 --> 00:07:27.020
If you put characters without the slash


00:07:27.020 --> 00:07:30.180
or don't put characters at all, like your homepage thing,


00:07:30.180 --> 00:07:31.460
he shows you how to do redirect


00:07:31.460 --> 00:07:33.840
so you can redirect to characters.


00:07:33.840 --> 00:07:35.620
And, you know, it's a pretty simple example,


00:07:35.620 --> 00:07:40.120
but it is kind of neat that you can do it off the shelf JSON or off the shelf Django.


00:07:40.120 --> 00:07:45.120
He also shows, he's got some hard-coded data classes within the application,


00:07:45.120 --> 00:07:50.120
but it's easy, you know, not that difficult to imagine you can extend that to something


00:07:50.120 --> 00:07:53.120
that reads it out of a database or some other part of your system.


00:07:53.120 --> 00:07:59.120
Yeah, absolutely. And it's like 63 lines of code, which is not too much for a non-trivial little example API.


00:07:59.120 --> 00:08:03.120
You know, I'm not necessarily on board of putting this in one file,


00:08:03.120 --> 00:08:06.840
But I am on board with this idea of like these simplified things.


00:08:06.840 --> 00:08:11.760
You know, when you hear about Django, you always say, okay, if I want an API,


00:08:11.760 --> 00:08:14.980
I'm going to have to add Django rest framework and all these other things to


00:08:14.980 --> 00:08:15.180
it.


00:08:15.180 --> 00:08:18.960
If say you're in flask and you want to work with users, like, well, I've got to


00:08:18.960 --> 00:08:21.160
add the flask SQL alchemy add in.


00:08:21.160 --> 00:08:24.040
I've got to add the flask users add in as an extension.


00:08:24.040 --> 00:08:25.400
And maybe I want session.


00:08:25.400 --> 00:08:26.680
So I got to add flask session.


00:08:26.680 --> 00:08:31.000
Like none of those things are necessary per se, especially on the, on the flask


00:08:31.000 --> 00:08:32.080
side, like there's so much of it.


00:08:32.080 --> 00:08:35.080
It adds like one or two lines of code that you don't have to write.


00:08:35.080 --> 00:08:39.080
And now you have all the overhead of depending on making sure that that thing works right.


00:08:39.080 --> 00:08:41.080
And the way you work with it is the way you want.


00:08:41.080 --> 00:08:45.080
And so having just a, here's the bare bones view and you can add in stuff if you like.


00:08:45.080 --> 00:08:46.080
I'm a fan of that.


00:08:46.080 --> 00:08:50.080
Yeah, I'm also thinking like, let's say you have a Django application already.


00:08:50.080 --> 00:08:54.080
And you built it not intending anybody to use it as an API.


00:08:54.080 --> 00:08:58.080
And somebody says, like maybe an internal application in your business or something.


00:08:58.080 --> 00:09:01.080
And somebody says, oh, this data here where this graph is.


00:09:01.080 --> 00:09:05.080
Can we get that as an API so that we can use it in something else?


00:09:05.080 --> 00:09:10.080
And this would be a good example to be able to just add.


00:09:10.080 --> 00:09:12.080
You can use Django REST framework, of course,


00:09:12.080 --> 00:09:15.080
but if there's just something simple you need to add as an API,


00:09:15.080 --> 00:09:16.080
this is a way to do it.


00:09:16.080 --> 00:09:17.080
Yeah, no, it's cool.


00:09:17.080 --> 00:09:21.080
And I do feel like these add-ons and these extra layers that you add,


00:09:21.080 --> 00:09:23.080
they better add a ton of value


00:09:23.080 --> 00:09:26.080
because they're also adding overhead and dependencies


00:09:26.080 --> 00:09:28.080
and breaking changes and all that.


00:09:28.080 --> 00:09:30.080
So if you've got something working


00:09:30.080 --> 00:09:32.960
You want to just add a little bit of, you know, here's a few JSON endpoints.


00:09:32.960 --> 00:09:33.520
Let's do that.


00:09:33.520 --> 00:09:33.840
Yeah.


00:09:33.840 --> 00:09:38.080
And for people that really enjoy this article and want to hear more from Adam,


00:09:38.080 --> 00:09:40.240
I've had him on Test and Code a couple of times.


00:09:40.240 --> 00:09:42.960
So we'll drop links to those episodes in the show notes.


00:09:42.960 --> 00:09:47.440
Now, before we get to the next one, which is a pretty big item,


00:09:47.440 --> 00:09:50.960
I just want to say this episode is brought to you by us.


00:09:50.960 --> 00:09:55.360
Of course, it's over at Talk Python Training, Test and Code Podcasts,


00:09:55.360 --> 00:09:56.640
and something to do with PyTest.


00:09:56.640 --> 00:09:59.440
Do you do anything with, I heard that PyTest is a thing that people use.


00:09:59.440 --> 00:10:00.440
Do you do anything with that?


00:10:00.440 --> 00:10:01.440
Yeah.


00:10:01.440 --> 00:10:02.440
So, yep.


00:10:02.440 --> 00:10:03.440
Wrote a book on PyTest.


00:10:03.440 --> 00:10:09.120
I still think, and I still get callouts on Twitter saying it's the best book they've


00:10:09.120 --> 00:10:14.000
read to get started with testing, and they got excited about testing with reading Python


00:10:14.000 --> 00:10:15.000
testing with PyTest.


00:10:15.000 --> 00:10:16.440
So, it's a good book.


00:10:16.440 --> 00:10:17.440
Yeah.


00:10:17.440 --> 00:10:18.440
Awesome.


00:10:18.440 --> 00:10:21.880
Yeah, and over at Talk Python Training, I'm now working on a three-part series, so like


00:10:21.880 --> 00:10:28.720
three, four-hour sections or so, on building fast API APIs and also like testing them and


00:10:28.720 --> 00:10:30.560
and put it in production and fun stuff like that.


00:10:30.560 --> 00:10:32.000
- Oh, that's exciting.


00:10:32.000 --> 00:10:33.120
Can't wait to watch that. - Yeah, that'll be fun.


00:10:33.120 --> 00:10:34.400
Yeah, yeah, it'll be super fun.


00:10:34.400 --> 00:10:35.720
So anyway, that's coming.


00:10:35.720 --> 00:10:39.800
People can go over there to training.python.fm,


00:10:39.800 --> 00:10:42.560
sign up to get notified and visit Testing Code


00:10:42.560 --> 00:10:43.880
and listen over there as well.


00:10:43.880 --> 00:10:44.920
We also have Patreon, right?


00:10:44.920 --> 00:10:48.760
- Oh yeah, so had somebody reach out to us for the Patreon


00:10:48.760 --> 00:10:50.600
and say, "Hey, you guys mentioned


00:10:50.600 --> 00:10:52.020
"that a whole bunch of people sponsor you


00:10:52.020 --> 00:10:53.560
"for a buck a month,"


00:10:53.560 --> 00:10:56.480
but they said, "That's the only tier you have."


00:10:56.480 --> 00:10:58.680
And so Michael and I are definitely gonna talk about


00:10:58.680 --> 00:11:01.520
in the future, whether we should add some more tiers.


00:11:01.520 --> 00:11:02.840
However, there is an option,


00:11:02.840 --> 00:11:05.240
even if you sign up for a dollar a month,


00:11:05.240 --> 00:11:06.960
if you want to send us more,


00:11:06.960 --> 00:11:10.160
you can change that within the Patreon thing.


00:11:10.160 --> 00:11:11.640
So we'd appreciate it.


00:11:11.640 --> 00:11:13.760
- Yeah, much appreciated to everyone who supports us


00:11:13.760 --> 00:11:14.580
in all the ways.


00:11:14.580 --> 00:11:16.680
Every way is valuable and appreciated.


00:11:16.680 --> 00:11:18.080
Speaking of valuable and appreciated,


00:11:18.080 --> 00:11:21.120
we often talk about the Stack Overflow Developer Survey.


00:11:21.120 --> 00:11:23.800
I mean, in my mind, there's two major surveys


00:11:23.800 --> 00:11:26.080
that take the pulse of the developer community.


00:11:26.080 --> 00:11:28.180
One is the Stack Overflow Developer Survey.


00:11:28.180 --> 00:11:30.660
The other is the PSF survey, which by the way,


00:11:30.660 --> 00:11:33.900
just got extended to three more days.


00:11:33.900 --> 00:11:36.780
By the time this comes out, that'll be already in the past.


00:11:36.780 --> 00:11:38.940
But you know, that's hopefully people have taken that.


00:11:38.940 --> 00:11:40.740
We've talked about it before.


00:11:40.740 --> 00:11:44.100
And we talked about the 2020 Stack Overflow survey


00:11:44.100 --> 00:11:46.100
coming out, I believe, and I told folks to go take it,


00:11:46.100 --> 00:11:50.060
or you did, and then we just didn't follow up, right?


00:11:50.060 --> 00:11:51.220
But the survey results are out,


00:11:51.220 --> 00:11:52.100
so I thought it might be fun


00:11:52.100 --> 00:11:53.660
to run through the survey results.


00:11:53.660 --> 00:11:54.500
- Yeah.


00:11:54.500 --> 00:11:55.740
- Yeah, and I just want to be clear,


00:11:55.740 --> 00:11:57.980
like I kind of lost track of this.


00:11:57.980 --> 00:12:00.180
I don't know exactly when this came out,


00:12:00.180 --> 00:12:01.980
but it's not brand new.


00:12:01.980 --> 00:12:05.040
It's like four, five, six months ago.


00:12:05.040 --> 00:12:07.700
But I just, you know, we didn't talk about the results.


00:12:07.700 --> 00:12:09.120
We just talked about the survey.


00:12:09.120 --> 00:12:11.300
So let's run through some of the things that are here.


00:12:11.300 --> 00:12:15.260
Now, the 2020 Stack Overflow survey


00:12:15.260 --> 00:12:18.480
is focused a lot on demographics and background


00:12:18.480 --> 00:12:20.660
and education and all those sorts of things.


00:12:20.660 --> 00:12:21.740
And if you're interested in that,


00:12:21.740 --> 00:12:23.300
definitely go check it out.


00:12:23.300 --> 00:12:24.540
There's a lot to see there.


00:12:24.540 --> 00:12:25.460
Just because of the format.


00:12:25.460 --> 00:12:27.700
I'm gonna focus mostly on the tech side


00:12:27.700 --> 00:12:29.040
that they covered here, okay?


00:12:29.040 --> 00:12:31.400
So not whether we have a full-time job,


00:12:31.400 --> 00:12:33.180
how many of us work from home, none of that.


00:12:33.180 --> 00:12:35.700
So some of the most popular technologies,


00:12:35.700 --> 00:12:37.060
and I just want to point out,


00:12:37.060 --> 00:12:39.780
I think the PSF survey and the JetBrains folks


00:12:39.780 --> 00:12:41.340
who worked with them to put that together


00:12:41.340 --> 00:12:42.460
is in a much better place.


00:12:42.460 --> 00:12:45.360
This is a wacky, wacky, wacky survey,


00:12:45.360 --> 00:12:47.700
but it does have some good questions.


00:12:47.700 --> 00:12:49.380
- Yeah.


00:12:49.380 --> 00:12:50.500
- I'll expand on the wacky a sec.


00:12:50.500 --> 00:12:53.340
But if we look at the most popular languages,


00:12:53.340 --> 00:12:55.540
most popular technologies, web frameworks,


00:12:55.540 --> 00:12:57.360
database and so on, certain languages.


00:12:57.360 --> 00:13:04.120
We have JavaScript, Python, and Java and JavaScript has 68%.


00:13:04.120 --> 00:13:05.360
Python has 44%.


00:13:05.360 --> 00:13:06.800
Java has 40%.


00:13:06.800 --> 00:13:07.920
That's good.


00:13:07.920 --> 00:13:08.080
Right?


00:13:08.080 --> 00:13:10.180
I mean, like everyone knows JavaScript is pretty popular.


00:13:10.180 --> 00:13:12.320
So what's, what's wacky here?


00:13:12.320 --> 00:13:13.420
Why is this weird?


00:13:13.420 --> 00:13:18.120
And I'm not necessarily saying there's not 68% of the people doing node JS.


00:13:18.120 --> 00:13:22.680
They may well be, but do you know what language is between JavaScript and Python?


00:13:22.680 --> 00:13:23.800
CSS.


00:13:24.420 --> 00:13:28.640
Dude, I know no application that is shipped running on CSS.


00:13:28.640 --> 00:13:30.420
I can't even compile CSS.


00:13:30.420 --> 00:13:32.780
I could probably compile SAS or less over to it, but I can't


00:13:32.780 --> 00:13:34.740
compile CSS to a running application.


00:13:34.740 --> 00:13:36.020
It's not a programming language.


00:13:36.020 --> 00:13:39.420
And SQL perhaps is true and complete, but yeah.


00:13:39.420 --> 00:13:41.980
And SQL, SQL is a thing you use within a language.


00:13:41.980 --> 00:13:45.180
It is not a programming language that builds things.


00:13:45.180 --> 00:13:45.540
Right.


00:13:45.540 --> 00:13:48.380
So they have this, this is what I was talking about where it's wacky


00:13:48.380 --> 00:13:49.940
and JavaScript is in this world.


00:13:49.940 --> 00:13:50.220
Right.


00:13:50.620 --> 00:13:56.300
They needed to ask very, very clearly, do you work exclusively in JavaScript


00:13:56.300 --> 00:14:02.180
as a Node.js developer or a pure front-end developer, or did you check,


00:14:02.180 --> 00:14:08.220
I also use JavaScript and CSS and Python, or I also use JavaScript and CSS and Java.


00:14:08.220 --> 00:14:08.920
Right.


00:14:08.920 --> 00:14:11.940
And so the JavaScript one has like bundled up all these.


00:14:11.940 --> 00:14:17.320
I do anything in the web on any language plus the Node.js developers.


00:14:17.320 --> 00:14:17.620
Right.


00:14:18.100 --> 00:14:24.020
I think the contention there is a little bit closer, but it still wouldn't surprise me if JavaScript was actually in the lead.


00:14:24.020 --> 00:14:24.820
I don't know.


00:14:24.820 --> 00:14:30.300
I feel like I'm all hyped up on like percentages and trajectories given all this election talk that we just went through.


00:14:30.300 --> 00:14:35.060
Well, I remember checking the box for JavaScript once and like, yes, I use JavaScript.


00:14:35.060 --> 00:14:35.460
Yeah, exactly.


00:14:35.460 --> 00:14:36.340
What does that mean?


00:14:36.340 --> 00:14:41.300
I have an app that does use a little bit of JavaScript and I looked at the code once.


00:14:41.300 --> 00:14:41.580
Right.


00:14:41.580 --> 00:14:43.900
Did you do dollar document dot ready?


00:14:43.900 --> 00:14:45.220
Okay.


00:14:45.220 --> 00:14:46.380
You're a JavaScript developer.


00:14:46.380 --> 00:14:47.180
Like not really.


00:14:47.180 --> 00:14:47.820
Yeah.


00:14:47.900 --> 00:14:51.620
So yeah, on the other hand, if you built an app with Vue.js or Angular,


00:14:51.620 --> 00:14:52.740
you're a JavaScript developer.


00:14:52.740 --> 00:14:55.180
If you built something with Express and note, you're a JavaScript developer.


00:14:55.180 --> 00:14:58.820
So I think it's a little bit weird that they didn't like really clearly.


00:14:58.820 --> 00:15:04.380
Make that distinction because you can't put two buckets and add up those


00:15:04.380 --> 00:15:07.140
numbers next to other buckets and make that make sense, right?


00:15:07.140 --> 00:15:08.340
CSS is the same thing.


00:15:08.340 --> 00:15:09.860
Like no one would check it.


00:15:09.860 --> 00:15:14.860
If you said I primarily code in CSS to build apps and ship on the CSS platform.


00:15:14.860 --> 00:15:15.500
Anyway.


00:15:15.500 --> 00:15:15.660
Okay.


00:15:15.660 --> 00:15:17.140
So web web frameworks.


00:15:17.460 --> 00:15:19.620
You know what the most popular web framework is?


00:15:19.620 --> 00:15:21.020
Well, I do now that I just looked.


00:15:21.020 --> 00:15:21.780
Do you believe it?


00:15:21.780 --> 00:15:22.820
I wouldn't have guessed this.


00:15:22.820 --> 00:15:23.940
Do you believe it?


00:15:23.940 --> 00:15:24.380
No.


00:15:24.380 --> 00:15:25.940
It's jQuery.


00:15:25.940 --> 00:15:27.220
Nobody--


00:15:27.220 --> 00:15:30.140
How could jQuery be in the same category as like Django?


00:15:30.140 --> 00:15:30.940
Yeah, yeah, yeah.


00:15:30.940 --> 00:15:35.140
It's even on the front end side of the JavaScript front end framework.


00:15:35.140 --> 00:15:35.980
There's Vue, there's Angular.


00:15:35.980 --> 00:15:37.820
All those are really legitimate things.


00:15:37.820 --> 00:15:42.340
jQuery is not the primary way in which people write web applications.


00:15:42.340 --> 00:15:43.700
But a lot of people use it, so it's in there.


00:15:43.700 --> 00:15:45.900
All right, so anyway, those two are a little bit weird.


00:15:45.900 --> 00:15:49.980
I take away Python is really quite popular and up there, the Python web


00:15:49.980 --> 00:15:53.220
frameworks, I think there's just so many, they don't filter very high to


00:15:53.220 --> 00:15:54.620
the top individually.


00:15:54.620 --> 00:15:56.180
Databases is much clearer.


00:15:56.180 --> 00:15:58.660
You know, you don't have to talk about other funky stuff.


00:15:58.660 --> 00:16:03.580
So for the most popular ones, we have my SQL at 56%.


00:16:03.580 --> 00:16:10.260
Postgres SQL at 36%, Microsoft SQL server at 33% and MongoDB at 26%, which


00:16:10.260 --> 00:16:12.700
is actually pretty high in my understanding in the world, but that's,


00:16:12.740 --> 00:16:16.360
That's pretty cool for platforms as a developer.


00:16:16.360 --> 00:16:17.840
I work on not.


00:16:17.840 --> 00:16:19.360
I deploy my code too.


00:16:19.360 --> 00:16:24.380
We have windows at 46% macOS at 28 and Linux at 27.


00:16:24.380 --> 00:16:27.900
So again, most common platform for development is windows.


00:16:27.900 --> 00:16:30.800
So we can't forget them when we build our packages and whatnot.


00:16:30.800 --> 00:16:31.040
Right.


00:16:31.040 --> 00:16:33.100
Steve Dower goes on and on about that.


00:16:33.100 --> 00:16:33.720
Yeah, it's good.


00:16:33.720 --> 00:16:37.580
My favorite part of this, these surveys though, that these are legitimately


00:16:37.580 --> 00:16:41.420
good is the most loved and the most dreaded, the most wanted section.


00:16:42.400 --> 00:16:47.320
So the most loved languages are Rust, TypeScript and Python.


00:16:47.320 --> 00:16:51.460
Those are TypeScript personally drives me a little bit crazy because it's like so


00:16:51.460 --> 00:16:55.500
picky, it's like the type annotations, but you don't get it exactly right.


00:16:55.500 --> 00:16:56.300
You're just not going to work.


00:16:56.300 --> 00:16:58.000
Anyway, it's still pretty neat.


00:16:58.000 --> 00:16:59.380
Rust I would like to learn Python.


00:16:59.380 --> 00:17:03.140
I know something about the most wanted languages I think is also interesting.


00:17:03.140 --> 00:17:06.460
So most loved is I work with it and I love it versus I dread it.


00:17:06.460 --> 00:17:08.900
Or I don't get to work with it very often.


00:17:08.900 --> 00:17:13.180
I'd like to do more is the number one, Python, number two, JavaScript, number


00:17:13.180 --> 00:17:14.700
three, go, go figure.


00:17:14.700 --> 00:17:14.980
Nice.


00:17:14.980 --> 00:17:15.300
Yeah.


00:17:15.300 --> 00:17:18.660
Most dreaded VBA and objective C.


00:17:18.660 --> 00:17:21.140
Does that surprise you?


00:17:21.140 --> 00:17:25.060
Well, in pearls, number three is still interesting.


00:17:25.060 --> 00:17:26.300
It still brings dread.


00:17:26.300 --> 00:17:27.260
So that's the languages.


00:17:27.260 --> 00:17:32.660
And then the databases most loved Redis, Postgres, Elasticsearch.


00:17:32.660 --> 00:17:34.820
Again, Elasticsearch is like CSS a little bit to me.


00:17:34.820 --> 00:17:36.060
Is that really a database anyway?


00:17:36.060 --> 00:17:37.300
And MongoDB.


00:17:37.780 --> 00:17:40.580
So those are all quite high.


00:17:40.580 --> 00:17:43.300
Most wanted database is MongoDB and Postgres


00:17:43.300 --> 00:17:44.580
are neck and neck at the top.


00:17:44.580 --> 00:17:46.580
- Okay, and you still do both,


00:17:46.580 --> 00:17:47.860
you do a lot of Mongo, right?


00:17:47.860 --> 00:17:49.020
- Oh yeah, I love Mongo.


00:17:49.020 --> 00:17:49.860
That thing's sweet.


00:17:49.860 --> 00:17:52.060
It's so clean and easy to work with.


00:17:52.060 --> 00:17:53.460
It's been years since I've had to do


00:17:53.460 --> 00:17:55.300
a database migration in production.


00:17:55.300 --> 00:17:56.120
I love it.


00:17:56.120 --> 00:17:57.460
As in, like I change my schema,


00:17:57.460 --> 00:17:59.900
now the app won't run unless I apply the script.


00:17:59.900 --> 00:18:02.260
Yeah, so anyway, rounded out,


00:18:02.260 --> 00:18:05.300
most dreaded database, IBM DB2.


00:18:05.300 --> 00:18:07.020
Doesn't surprise at all.


00:18:07.020 --> 00:18:08.420
Anyway, that's the survey.


00:18:08.420 --> 00:18:11.720
I just want to give a shout out or like a call to the community.


00:18:11.720 --> 00:18:15.720
If you're, if you have any influence on this, find a way to separate.


00:18:15.720 --> 00:18:18.540
Things that are unequal, right?


00:18:18.540 --> 00:18:23.140
Don't put just, I do some JavaScript from, I do some C plus plus those are not


00:18:23.140 --> 00:18:28.940
equivalent, or I do some J query and angular and I do Django.


00:18:28.940 --> 00:18:31.260
Those are just not even in the same category.


00:18:31.260 --> 00:18:33.660
And it really drives me crazy that they're put this way.


00:18:33.660 --> 00:18:36.700
And it just makes me appreciate the Python software foundation survey more.


00:18:36.700 --> 00:18:38.500
because it had less of this weirdness.


00:18:38.500 --> 00:18:39.000
Yeah.


00:18:39.000 --> 00:18:39.500
Yeah.


00:18:39.500 --> 00:18:42.100
There's some weird things that get bucketed together.


00:18:42.100 --> 00:18:42.600
Yeah.


00:18:42.600 --> 00:18:43.100
Interesting.


00:18:43.100 --> 00:18:46.400
I would say the PSF one is more regular, wouldn't you say?


00:18:46.400 --> 00:18:47.200
More regular.


00:18:47.200 --> 00:18:47.900
Oh, yeah.


00:18:47.900 --> 00:18:49.200
Nice transition.


00:18:49.200 --> 00:18:50.200
Thank you.


00:18:50.200 --> 00:18:53.200
But before we move on, there was another...


00:18:53.200 --> 00:18:55.200
and nobody else will care about this but me,


00:18:55.200 --> 00:18:58.500
but what was the other survey that is closing in a couple days?


00:18:58.500 --> 00:19:00.000
The PSF survey.


00:19:00.000 --> 00:19:02.900
The one at python.org, I believe.


00:19:02.900 --> 00:19:04.400
Let's see if it's still up there.


00:19:04.400 --> 00:19:05.700
I don't know where it went.


00:19:05.700 --> 00:19:07.760
But yeah, yeah, it's right there the in the middle


00:19:07.760 --> 00:19:11.420
Can I mail in my ballot and get it as long as it's postmarked in time?


00:19:11.420 --> 00:19:14.840
Well, if you postmark it at the right time, yeah


00:19:14.840 --> 00:19:18.780
Sorry couldn't resist so regular expressions


00:19:18.780 --> 00:19:25.460
So I'm sure we've talked about regular expressions before but they occasionally crop up in my work. I always forget them


00:19:25.460 --> 00:19:29.800
I learn them and then I forget them. I have to learn them all over again. So this is gonna be helpful


00:19:29.800 --> 00:19:34.780
yeah, so Amit Chaudhry, I think wrote a visual guide to regular expressions and


00:19:35.420 --> 00:19:40.580
And this came out recently and this is kind of a very nice gentle introduction to regular


00:19:40.580 --> 00:19:44.900
expressions by building up, and I think it helps you build up a correct mental model


00:19:44.900 --> 00:19:51.620
of how they work by, he utilizes visual highlighting as if he kind of went through with a highlighter


00:19:51.620 --> 00:19:54.980
pen and highlighted the different things that could be matched.


00:19:54.980 --> 00:19:56.820
So it goes through a whole bunch of stuff.


00:19:56.820 --> 00:19:58.560
Starts with just a specific character.


00:19:58.560 --> 00:20:05.180
So like if you have a string and you're matching the character A or something like that, what


00:20:05.180 --> 00:20:09.980
would it hit? And then moves on to white space and digits and word characters.


00:20:09.980 --> 00:20:14.780
And a lot of these gentle introduction type things come to go through some of


00:20:14.780 --> 00:20:19.740
the basics and then sort of stop there. And what I really love about this is he


00:20:19.740 --> 00:20:24.100
talks about some of the more advanced things like pattern negations so like


00:20:24.100 --> 00:20:28.740
the and why they're why they're weird like /D is digits


00:20:28.740 --> 00:20:34.340
/D is everything that's not a digit and some of these exclusions


00:20:34.340 --> 00:20:39.620
talking about anchors like beginning and the end of the line, character sets with brackets,


00:20:39.620 --> 00:20:45.460
and then ranges with a dash within the ranges. You're talking about repetition, and this is


00:20:45.460 --> 00:20:50.460
kind of something that threw me off when I first learned about them. Using curly brackets, I was


00:20:50.460 --> 00:20:56.220
used to using star for zero or more items and plus for one or more item. I think, or maybe it's the


00:20:56.220 --> 00:21:01.780
other way around. Yeah, that's right. And then, but you can use a question mark for it only can


00:21:01.780 --> 00:21:04.580
be one, but it can be there or it doesn't have to be.


00:21:04.580 --> 00:21:07.380
And then if it has to be a certain number of times,


00:21:07.380 --> 00:21:09.700
you can use curly brackets for saying it needs to be


00:21:09.700 --> 00:21:11.880
two of these or something like that.


00:21:11.880 --> 00:21:14.120
And then it goes on and says, okay,


00:21:14.120 --> 00:21:15.780
well now you've learned all this stuff.


00:21:15.780 --> 00:21:17.820
How do you put it in place with Python?


00:21:17.820 --> 00:21:22.460
And with Python, you use one of the ways is the RE module


00:21:22.460 --> 00:21:24.060
for regular expressions.


00:21:24.060 --> 00:21:26.580
So it goes through a quick example of using


00:21:26.580 --> 00:21:29.380
find all, match and match group and search.


00:21:29.380 --> 00:21:31.660
So if you're a Python developer and you have to deal


00:21:31.660 --> 00:21:32.980
with some regular expressions,


00:21:32.980 --> 00:21:34.740
I think this is definitely something to check out.


00:21:34.740 --> 00:21:36.020
- Yeah, it's really nice,


00:21:36.020 --> 00:21:38.560
and it's a very gentle introduction,


00:21:38.560 --> 00:21:41.820
so people can just go through and the coloring and stuff.


00:21:41.820 --> 00:21:46.180
Yeah, 'cause normally a lot of these presentations


00:21:46.180 --> 00:21:50.140
of regular expressions, man, it's like write only.


00:21:50.140 --> 00:21:51.840
You know, you look at it, like, whoa, that is a mess,


00:21:51.840 --> 00:21:54.060
and then, you know, then it's gone.


00:21:54.060 --> 00:21:54.900
Like you could write it,


00:21:54.900 --> 00:21:57.500
but you couldn't go back and read it again type of thing.


00:21:57.500 --> 00:21:59.220
- Yeah. - Yeah.


00:21:59.220 --> 00:22:00.860
Yeah, so this is nice, this is good.


00:22:00.860 --> 00:22:01.900
- Yeah, cool, nice one.


00:22:01.900 --> 00:22:04.420
- Yeah, I can't take credit for that one though.


00:22:04.420 --> 00:22:05.260
Somebody else wrote it.


00:22:05.260 --> 00:22:07.860
- You probably shouldn't take credit for it.


00:22:07.860 --> 00:22:08.700
Did you create it?


00:22:08.700 --> 00:22:09.940
I mean, you probably shouldn't.


00:22:09.940 --> 00:22:10.980
- No, I just brought it up.


00:22:10.980 --> 00:22:14.180
- So I don't really know the whole story with this next one,


00:22:14.180 --> 00:22:16.980
but I entitled it Taking Credit.


00:22:16.980 --> 00:22:19.940
And this was based on a GitHub project


00:22:19.940 --> 00:22:21.980
and a tweet by Tim Nolet.


00:22:21.980 --> 00:22:24.100
Tim Nolet, I'm not entirely sure how to say his name.


00:22:24.100 --> 00:22:26.100
Hopefully one of those works.


00:22:26.100 --> 00:22:29.780
And he created this project, which is called,


00:22:29.780 --> 00:22:34.260
check it out, Headless Recorder over a Playwright, I believe.


00:22:34.260 --> 00:22:35.020
Let's see.


00:22:35.020 --> 00:22:36.260
It is.


00:22:36.260 --> 00:22:37.940
Yeah, it's called Headless Recorder.


00:22:37.940 --> 00:22:41.220
And so what it does is it allows-- it's a Chrome extension that


00:22:41.220 --> 00:22:46.100
allows you to create scripts that interact with either Puppeteer or Playwright


00:22:46.100 --> 00:22:48.060
that do just like web automation.


00:22:48.060 --> 00:22:54.020
A little bit like non-programmatic Selenium or those types of things, right?


00:22:54.020 --> 00:22:54.380
Yeah.


00:22:54.380 --> 00:22:54.700
Fine.


00:22:54.700 --> 00:22:55.180
That's all cool.


00:22:55.180 --> 00:22:57.300
So there's a bunch of JavaScript that you write in there


00:22:57.300 --> 00:22:58.820
that's pretty interesting.


00:22:58.820 --> 00:23:02.860
And the tweet says, I'll just read the tweet and then we'll go from there.


00:23:02.860 --> 00:23:07.900
It says, "Oh, AWS Cloud, I really do love you, but next time you fork my open source project


00:23:07.900 --> 00:23:11.900
and present it as your new service, please give the maintainers a short, nice,


00:23:11.900 --> 00:23:13.660
good job, kids or something.


00:23:13.660 --> 00:23:17.620
I mean, it doesn't necessarily have to follow the APL version 2 license and stuff,


00:23:17.620 --> 00:23:19.620
but at least a little credit would be great."


00:23:19.620 --> 00:23:20.100
Wow.


00:23:20.100 --> 00:23:26.980
So, there's also a linked announcement about this thing called AWS CloudWatch Synthetics


00:23:26.980 --> 00:23:31.860
launches a recorder to generate user flow scripts for canaries, which is, you look at


00:23:31.860 --> 00:23:37.620
the syntax in the examples, it does now say credits based on headless recorder at the


00:23:37.620 --> 00:23:38.620
bottom.


00:23:38.620 --> 00:23:40.820
But I'm pretty certain that it didn't say that in the beginning.


00:23:40.820 --> 00:23:46.100
I mean, I don't have like a diff of the web page, but it would not be surprising.


00:23:46.100 --> 00:23:48.860
I wouldn't think he would put that up there if at the bottom it said that.


00:23:48.860 --> 00:23:49.860
So now it does.


00:23:49.860 --> 00:23:54.500
Anyway, this is not relevant to this project really at all.


00:23:54.500 --> 00:23:59.020
It's more just a conversation about what do you do when big companies adopt your open


00:23:59.020 --> 00:24:01.460
source project but don't give you credit.


00:24:01.460 --> 00:24:02.460
I think that's lame.


00:24:02.460 --> 00:24:04.900
Well, I think it should be even more than that.


00:24:04.900 --> 00:24:10.380
I mean, I think anybody that personally, if somebody else, if I had, like let's say I


00:24:10.380 --> 00:24:14.340
have got a couple of small projects that I don't really do much with and if somebody


00:24:14.340 --> 00:24:19.040
else took that and forked it and then like did something big with it and started making


00:24:19.040 --> 00:24:22.740
a startup or some money with it, fine, good for them.


00:24:22.740 --> 00:24:25.260
But if it's a big company like Amazon.


00:24:25.260 --> 00:24:29.540
- It's a Google, Microsoft, Apple, AWS sort of thing.


00:24:29.540 --> 00:24:31.700
- Anytime I think credit is due.


00:24:31.700 --> 00:24:33.220
If you're not the one that came up with it,


00:24:33.220 --> 00:24:34.980
if you just forked it and ran with it,


00:24:34.980 --> 00:24:36.980
I think giving some, and that's typical.


00:24:36.980 --> 00:24:38.980
I mean, we often give credit to say,


00:24:38.980 --> 00:24:41.740
"Hey, I ran with it, it started here,


00:24:41.740 --> 00:24:42.940
but I did a whole bunch."


00:24:42.940 --> 00:24:43.920
That's fine.


00:24:43.920 --> 00:24:46.780
But a big company, I think they should both give credit


00:24:46.780 --> 00:24:50.940
and I think some cash should go to the original idea starter.


00:24:50.940 --> 00:24:51.780
So.


00:24:51.780 --> 00:24:53.220
- Yeah, I hear you.


00:24:53.220 --> 00:24:56.220
If it's not cash, which, you know,


00:24:56.220 --> 00:24:58.100
that might be a hard sell,


00:24:58.100 --> 00:25:00.660
how about as we maintain this project,


00:25:00.660 --> 00:25:02.520
we sort of forked from your stuff,


00:25:02.520 --> 00:25:05.300
we'll push changes back to make yours better, right?


00:25:05.300 --> 00:25:09.220
At least some sort of, hey, we've based this on your thing,


00:25:09.220 --> 00:25:12.180
but by doing so, we're gonna make that thing better


00:25:12.180 --> 00:25:15.020
because we've made a commitment to at least, you know,


00:25:15.020 --> 00:25:18.320
do a little bit of give back PRs improvements, right?


00:25:19.420 --> 00:25:22.840
And also, I don't know, like, I don't know this guy,


00:25:22.840 --> 00:25:25.400
but at the AWS reInvent conference,


00:25:25.400 --> 00:25:26.760
when they announced this, if they said,


00:25:26.760 --> 00:25:29.080
"Hey, this is based on this cool project by Tim,"


00:25:29.080 --> 00:25:30.700
you know, that would raise his profile,


00:25:30.700 --> 00:25:33.120
and I'm sure he would really appreciate it.


00:25:33.120 --> 00:25:34.760
Personally, a lot of my stuff's under MIT,


00:25:34.760 --> 00:25:36.720
and so people don't have to mention me,


00:25:36.720 --> 00:25:38.480
do anything, say anything, whatever.


00:25:38.480 --> 00:25:41.080
A few things are not, but it's, you know,


00:25:41.080 --> 00:25:42.560
a lot of it's just example code,


00:25:42.560 --> 00:25:44.200
and people are like, "Well, can I use this example


00:25:44.200 --> 00:25:45.360
"in my commercial application?"


00:25:45.360 --> 00:25:46.560
I'm like, "Yes, I really don't care


00:25:46.560 --> 00:25:50.080
if you like recreate my random sample in your project, that's fine, right?


00:25:50.080 --> 00:25:53.920
I don't want anybody to have those feelings, but if I was building something useful,


00:25:53.920 --> 00:25:56.600
I'd at least want, you know, a shout out.


00:25:56.600 --> 00:25:58.280
I guess that's all he's asking for as well.


00:25:58.280 --> 00:25:58.600
Yeah.


00:25:58.600 --> 00:25:58.960
Anyway.


00:25:58.960 --> 00:26:00.000
And they did it.


00:26:00.000 --> 00:26:00.640
So that's good.


00:26:00.640 --> 00:26:01.720
They did come around and do it.


00:26:01.720 --> 00:26:02.440
Yeah, they did.


00:26:02.440 --> 00:26:06.240
I had pretty sure that was not the beginning situation, but now it is.


00:26:06.240 --> 00:26:08.040
And so that's, that's quite good.


00:26:08.040 --> 00:26:12.240
And just given the amount of people who are in the Python space, who listen to


00:26:12.240 --> 00:26:13.440
podcasts, they do open source.


00:26:13.440 --> 00:26:15.920
I thought this story would be interesting, even though it's technically


00:26:16.040 --> 00:26:20.600
JavaScript. Yeah. Yeah. I bet you could even write that JavaScript on a Raspberry Pi, Brian.


00:26:20.600 --> 00:26:26.040
Maybe. So I was just curious, what was the first computer you programmed on?


00:26:26.040 --> 00:26:32.840
So the first computer that I programmed on was one of those Apple IIe's that was beige and had


00:26:32.840 --> 00:26:36.040
a green screen, I believe. Okay. You started on a IIe as well.


00:26:36.040 --> 00:26:43.000
Yeah, but that was like in middle school or now maybe even elementary school, where it was just,


00:26:43.000 --> 00:26:47.400
you know, something I went for class. The very first thing that I actually, actually got to


00:26:47.400 --> 00:26:53.080
sort of sit down and program on, my brother had a Commodore 64, but I didn't really use it for


00:26:53.080 --> 00:27:00.360
anything constructive. I would say a 286, IBM 286. Okay. I programmed a 2E, Apple 2E at school,


00:27:00.360 --> 00:27:07.960
but I wasn't, it was confusing enough to me that I didn't run with it right away. I kind of dropped


00:27:07.960 --> 00:27:14.560
Programming after that but but anyway, I bring this up because I there's a new computer out and it reminded me of this


00:27:14.560 --> 00:27:20.200
About the those early computers. So are the Commodore 64 is kind of the same category


00:27:20.200 --> 00:27:24.900
So Apple to II was kind of like cool was yeah, it was at higher end


00:27:24.900 --> 00:27:29.400
I had to our Commodore 64 was a little bit lower than 2e


00:27:29.400 --> 00:27:34.860
I guess I would think and then below that is the TRS-80 from Radio Shack. That's what I had


00:27:34.860 --> 00:27:40.880
I had my but anyway, so the the Raspberry Pi 400 is out now or it's


00:27:40.880 --> 00:27:44.240
Announced and it's going to be out by the holidays apparently


00:27:44.240 --> 00:27:51.460
It's really cool. It's like it kind of reminds me of these Apple to ease because it's the it's the computer in the keyboard


00:27:51.460 --> 00:27:54.580
so the the keyboard is the computer and


00:27:54.580 --> 00:28:01.300
You can even hook up two large monitors to it because it does it could supports two displays 4k video


00:28:01.300 --> 00:28:05.180
It'll do two 4k monitors out of your keyboard. Yeah, and


00:28:05.180 --> 00:28:08.580
That's cool. This one's got four gigabytes of RAM


00:28:08.580 --> 00:28:15.800
You both do Wi-Fi and lands as a hard landline entry point, which is good for core 64-bit processor


00:28:15.800 --> 00:28:19.740
It just looks fun. They're telling us as a whole kit for like a hundred bucks


00:28:19.740 --> 00:28:22.380
So you get like you can start somebody up on a computer


00:28:22.380 --> 00:28:25.500
I'm covering this cuz yeah, that's super neat


00:28:25.500 --> 00:28:29.000
I was thinking geez do I want to get this for my kid or do I want to get it for me?


00:28:29.460 --> 00:28:35.800
Yeah, exactly and it comes with a beginner's guide and shows you how to get started and even includes getting people a little bit


00:28:35.800 --> 00:28:42.520
Started on Python and apparently so that's good. Yeah, it seems super neat and the processor is pretty good


00:28:42.520 --> 00:28:47.380
Actually four core four gigs of RAM and it looks like just one of these little, you know


00:28:47.380 --> 00:28:52.580
Wi-Fi USB like over the little RF or radio frequency dongle thing


00:28:52.580 --> 00:28:54.960
Keyboards that you would get


00:28:54.960 --> 00:29:01.700
But that's the whole computer on the back of the keyboard. It's got the HDMI ports. It's got the other ports the power everything


00:29:01.700 --> 00:29:03.780
Yeah, so you gotta get your own monitor, of course


00:29:03.780 --> 00:29:09.580
But plug it in and you can get started and there's videos on the on the Raspberry Pi site that are


00:29:09.580 --> 00:29:17.620
Amazing watching this thing go it's it's powering two big monitors and it just feels looks like it's a zip as a normal computer


00:29:17.620 --> 00:29:19.620
so I think it'd be helpful for


00:29:20.500 --> 00:29:23.060
educational use and lots of uses.


00:29:23.060 --> 00:29:24.820
So it's pretty nice.


00:29:24.820 --> 00:29:26.540
- Even for just a travel computer.


00:29:26.540 --> 00:29:27.820
- A travel computer, yeah.


00:29:27.820 --> 00:29:28.820
- Right, imagine when,


00:29:28.820 --> 00:29:30.460
remember when people left their house?


00:29:30.460 --> 00:29:32.480
So imagine it were like that again,


00:29:32.480 --> 00:29:33.520
and then you could go places.


00:29:33.520 --> 00:29:34.700
But if you were just going on a trip


00:29:34.700 --> 00:29:36.460
and you're like, "Ah, maybe I'll just like,


00:29:36.460 --> 00:29:37.820
"need a computer I wanna plug in."


00:29:37.820 --> 00:29:39.500
And they'll bring you a HDMI cord,


00:29:39.500 --> 00:29:42.220
plug it into the TV at the hotel,


00:29:42.220 --> 00:29:44.420
plug it into some sort of monitor


00:29:44.420 --> 00:29:46.300
at like some office you're dropping in on.


00:29:46.300 --> 00:29:47.980
You could just take that and have,


00:29:47.980 --> 00:29:50.300
You know, do presentations and stuff out of it.


00:29:50.300 --> 00:29:51.140
It's cool.


00:29:51.140 --> 00:29:53.140
- Yeah, 'cause, well like, that's true,


00:29:53.140 --> 00:29:55.860
'cause the HDMI output, it's a lot of TVs


00:29:55.860 --> 00:29:57.140
just take that now too, so.


00:29:57.140 --> 00:29:59.460
- Yeah, exactly, just bring a little short HDMI cable


00:29:59.460 --> 00:30:00.900
with you if you need to, and then you're good.


00:30:00.900 --> 00:30:04.020
- I'm including a, linking to a video from Leigh Moore Freed


00:30:04.020 --> 00:30:06.620
from Agerfruit, in there she says that it reminds her


00:30:06.620 --> 00:30:07.820
of the Apple IIe as well.


00:30:07.820 --> 00:30:09.140
- Nice, I'll check that out.


00:30:09.140 --> 00:30:09.980
Super cool.


00:30:09.980 --> 00:30:11.860
So, that's our main items.


00:30:11.860 --> 00:30:12.900
That's quite an adventure.


00:30:12.900 --> 00:30:15.940
Brian, you got any other things you wanna just throw out


00:30:15.940 --> 00:30:16.780
there real quick?


00:30:16.780 --> 00:30:21.860
quick thing I got reminded of ran across this a while ago and I somebody


00:30:21.860 --> 00:30:26.020
reminded me of it on Twitter recently is a Vim Adventures it's Vim dash


00:30:26.020 --> 00:30:32.180
adventures dot-com remember the dash but it's a kind of like this adventure game


00:30:32.180 --> 00:30:35.620
like these old going through a dungeon sort of thing and picking up treasure


00:30:35.620 --> 00:30:41.220
and things like that and you just is to help you practice your Vim key bindings


00:30:41.220 --> 00:30:44.660
while playing an adventure game so if you're having trouble getting learning


00:30:44.660 --> 00:30:46.660
Maybe try this.


00:30:46.660 --> 00:30:48.660
Yeah, that looks quite cool actually.


00:30:48.660 --> 00:30:50.660
It's a neat little adventure game.


00:30:50.660 --> 00:30:52.660
Now, I just want to throw out something


00:30:52.660 --> 00:30:54.660
I got from Tyler Pettersen


00:30:54.660 --> 00:30:56.660
just a little bit ago.


00:30:56.660 --> 00:30:58.660
And this kind of comes back to the language talk


00:30:58.660 --> 00:31:00.660
around Stack Overflow


00:31:00.660 --> 00:31:02.660
that I mentioned. And this is an


00:31:02.660 --> 00:31:04.660
update for the TIOBE index.


00:31:04.660 --> 00:31:06.660
T-I-O-B-E index for November 2020.


00:31:06.660 --> 00:31:08.660
And


00:31:08.660 --> 00:31:10.660
my


00:31:10.660 --> 00:31:12.660
feeling and my theory is that


00:31:12.660 --> 00:31:17.420
Things like stack overflow and whatnot.


00:31:17.420 --> 00:31:21.020
Those places are often measuring


00:31:21.020 --> 00:31:23.380
like the pulse of the industry right now.


00:31:23.380 --> 00:31:25.900
Whereas TIOBE seems to have a little bit of a latency.


00:31:25.900 --> 00:31:28.140
Like how many legacy apps of this style


00:31:28.140 --> 00:31:30.500
are you working on and this technology and whatnot, right?


00:31:30.500 --> 00:31:34.380
So it's a little bit of a longer term moving average.


00:31:34.380 --> 00:31:35.780
Well, anyway, the headline is,


00:31:35.780 --> 00:31:37.900
November headline, Python is unstoppable


00:31:37.900 --> 00:31:39.740
and surpasses Java.


00:31:39.740 --> 00:31:42.360
For the first time since the start of the TIOBE index,


00:31:42.360 --> 00:31:45.760
nearly 20 years, Java and C don't make up the top two positions.


00:31:45.760 --> 00:31:46.260
Okay.


00:31:46.260 --> 00:31:47.260
In 20 years.


00:31:47.260 --> 00:31:47.760
Wow.


00:31:47.760 --> 00:31:50.760
So, Python's not on top, but it's right below C.


00:31:50.760 --> 00:31:54.760
It's right below C. And it's, you know, it's been a long time coming, right?


00:31:54.760 --> 00:31:57.260
So, anyway, I think this is pretty neat.


00:31:57.260 --> 00:31:59.360
And, Tyler, thanks for sending that along.


00:31:59.360 --> 00:32:00.260
People can check it out.


00:32:00.260 --> 00:32:00.760
Yeah.


00:32:00.760 --> 00:32:01.260
Cool.


00:32:01.260 --> 00:32:02.060
Ain't no joke.


00:32:02.060 --> 00:32:03.760
But how about a joke?


00:32:03.760 --> 00:32:04.660
A joke would be great.


00:32:04.660 --> 00:32:04.960
All right.


00:32:04.960 --> 00:32:07.760
So, we've got a cartoon, but this one is, super simple.


00:32:07.760 --> 00:32:09.760
And I think just the, the words will do it.


00:32:09.760 --> 00:32:13.520
So this is from geek and poke, which has some fun things.


00:32:13.520 --> 00:32:16.480
And the title is you build it, you run it.


00:32:16.480 --> 00:32:18.040
It's all about microservices.


00:32:18.040 --> 00:32:18.400
Okay.


00:32:18.400 --> 00:32:22.240
So there's a woman developer and a guy developer just kind of staring at each


00:32:22.240 --> 00:32:27.440
other and it says, when we decide to create a new microservice, we just need


00:32:27.440 --> 00:32:31.440
30 seconds to get a blank microservice running in that Kubernetes cluster.


00:32:31.440 --> 00:32:32.520
So amazing.


00:32:32.520 --> 00:32:35.920
And they kind of stared each other for blankly for a minute.


00:32:35.920 --> 00:32:39.400
Then the woman says, and what you just need a, another,


00:32:39.400 --> 00:32:44.200
week to come up for with a funny name for it two weeks two weeks as the guy


00:32:44.200 --> 00:32:53.340
Yeah, yeah anyway, I thought people were running funky named microservices would definitely appreciate that one


00:32:53.340 --> 00:32:56.400
Yeah, name is the hardest thing in programming. That's right. It sure is


00:32:56.400 --> 00:33:01.400
All right, but not this podcast. That was a lot of fun. Thanks for being here. It was yeah. Thank you


00:33:01.400 --> 00:33:07.200
Yeah, you bet. Bye. Bye. Thank you for listening to Python bites follow the show on Twitter via at Python bites


00:33:07.200 --> 00:33:13.400
That's Python bytes as in B Y T E S and get the full show notes at Python bytes dot FM


00:33:13.400 --> 00:33:17.420
If you have a news item you want featured just visit Python bytes dot FM and send it our way


00:33:17.420 --> 00:33:23.520
We're always on the lookout for sharing something cool on behalf of myself and Brian Okken. This is Michael Kennedy


00:33:23.520 --> 00:33:26.920
Thank you for listening and sharing this podcast with your friends and colleagues

