
00:00:00.000 --> 00:00:01.920
- Hello and welcome to Python Bytes,


00:00:01.920 --> 00:00:03.840
where we deliver Python news and headlines


00:00:03.840 --> 00:00:06.120
directly to your earbuds.


00:00:06.120 --> 00:00:10.800
This is episode 304, recorded October 5th, 2022.


00:00:10.800 --> 00:00:12.120
I'm Michael Kennedy.


00:00:12.120 --> 00:00:13.960
- I'm Brian Okken.


00:00:13.960 --> 00:00:14.800
- Hey Brian.


00:00:14.800 --> 00:00:17.520
- Hey, you like threw me for a wrench


00:00:17.520 --> 00:00:19.080
with the whole date thing, so.


00:00:19.080 --> 00:00:21.320
- I know, well in our notes it has yesterday,


00:00:21.320 --> 00:00:22.560
but then we had to move it.


00:00:22.560 --> 00:00:23.400
- Yeah, 'cause I mean.


00:00:23.400 --> 00:00:25.160
- Some of us have meetings.


00:00:25.160 --> 00:00:26.800
Yeah, that's right, I had to move plenty for me.


00:00:26.800 --> 00:00:28.000
Plenty of moving.


00:00:28.000 --> 00:00:28.840
Yeah, very cool.


00:00:28.840 --> 00:00:29.660
Well, great to be back with you.


00:00:29.660 --> 00:00:32.300
Also, we have a sponsor that sponsored before,


00:00:32.300 --> 00:00:34.700
but hasn't been a while, a compiler from Red Hat.


00:00:34.700 --> 00:00:36.940
Excellent show, tell you more about that later.


00:00:36.940 --> 00:00:39.700
For now, Brian, I'm kind of hungry.


00:00:39.700 --> 00:00:41.380
What can you do for me here?


00:00:41.380 --> 00:00:45.420
- I've got tasty ingredients for, let's see, add to stream.


00:00:45.420 --> 00:00:47.720
Tasty ingredients for a delicious pull request.


00:00:47.720 --> 00:00:51.340
So it's October now, so that means Hacktoberfest


00:00:51.340 --> 00:00:53.140
for some people, right?


00:00:53.140 --> 00:00:56.860
So, and actually, I didn't really wanna


00:00:56.860 --> 00:00:58.380
just highlight Hacktoberfest.


00:00:58.380 --> 00:00:59.760
what I really like about this.


00:00:59.760 --> 00:01:00.900
So this is an article,


00:01:00.900 --> 00:01:03.380
10 tasty ingredients for a delicious pull request.


00:01:03.380 --> 00:01:07.740
It's on the Wagtail blog and from LB on the Wagtail


00:01:07.740 --> 00:01:08.940
core team member.


00:01:08.940 --> 00:01:09.980
So thanks LB.


00:01:09.980 --> 00:01:13.100
But this, it's kind of neat because there's,


00:01:13.100 --> 00:01:15.340
it's not, yeah, it's kind of click baby,


00:01:15.340 --> 00:01:18.860
but also it's just, it's actually nice information.


00:01:18.860 --> 00:01:21.380
So whether you're starting open source project


00:01:21.380 --> 00:01:23.180
or starting, wanna start helping out


00:01:23.180 --> 00:01:24.560
with an open source project,


00:01:24.560 --> 00:01:26.500
or I think these tips are great,


00:01:26.500 --> 00:01:31.620
or at least majority of them are great even for people that are used to


00:01:31.620 --> 00:01:37.940
developing solo and are moving into developing with a team of people or a group of people.


00:01:37.940 --> 00:01:41.300
I've had questions about that even from companies of like,


00:01:41.300 --> 00:01:44.500
"Yeah, we want to work better as a team. How do we do that?"


00:01:44.500 --> 00:01:46.400
I'm going to run through these quickly.


00:01:46.400 --> 00:01:47.660
There's 10 of them.


00:01:47.660 --> 00:01:49.700
First one is great.


00:01:49.700 --> 00:01:53.260
It's read the documentation or read the development instruction.


00:01:53.260 --> 00:01:56.020
A lot of projects have contributing guidelines.


00:01:56.020 --> 00:01:58.180
So actually read those and understand them.


00:01:58.180 --> 00:02:02.100
When we're used to it, it's just a, hey, fork it and go.


00:02:02.100 --> 00:02:04.580
But that's not trivial for some people.


00:02:04.580 --> 00:02:05.460
So,


00:02:05.460 --> 00:02:05.700
Right.


00:02:05.700 --> 00:02:08.660
Well, you may have, an non-obvious details.


00:02:08.660 --> 00:02:11.060
Like for example, maybe you just fork the repo.


00:02:11.060 --> 00:02:13.140
You do your work there and you contribute,


00:02:13.140 --> 00:02:16.900
but well, you should obviously treat a branch in your repo


00:02:16.900 --> 00:02:18.900
so that if they decide to not take it,


00:02:18.900 --> 00:02:20.340
then how do you stay in sync?


00:02:20.340 --> 00:02:20.580
Right.


00:02:20.580 --> 00:02:21.780
That's one of them.


00:02:21.780 --> 00:02:22.580
Another one as well.


00:02:22.580 --> 00:02:24.340
Maybe when you do the PR,


00:02:24.340 --> 00:02:26.240
it doesn't go back to the main branch,


00:02:26.240 --> 00:02:28.680
it goes to some other like dev branch or something, right?


00:02:28.680 --> 00:02:31.280
Like you need to know, here's where you put the PR back to you.


00:02:31.280 --> 00:02:33.580
And just like those kind of details for, hey, we're a team.


00:02:33.580 --> 00:02:36.680
>> Yeah, and then also there's details like how do you run the tests?


00:02:36.680 --> 00:02:40.780
And are there extra stuff that you have to install or any settings?


00:02:40.780 --> 00:02:43.980
Or for a lot of projects, it's just, you know,


00:02:43.980 --> 00:02:46.040
do a virtual environment and clone it and go.


00:02:46.040 --> 00:02:49.980
But there's some that have like extra bits that you have to set up.


00:02:49.980 --> 00:02:51.980
So good to read the instructions.


00:02:51.980 --> 00:02:55.620
But then we're going into things like read the issues and comments.


00:02:55.620 --> 00:02:57.020
So if you want to help out,


00:02:57.020 --> 00:02:59.220
this is a great way is to read the issues,


00:02:59.220 --> 00:03:02.880
but don't just jump in and try to solve it right away.


00:03:02.880 --> 00:03:04.920
Read the comments around the issue,


00:03:04.920 --> 00:03:08.500
also PRs that are related to the issue if there's any PRs linked,


00:03:08.500 --> 00:03:12.320
because there's somebody that might be started on a fix and you


00:03:12.320 --> 00:03:17.300
want to either help them get unstuck or just help out.


00:03:17.300 --> 00:03:18.980
You don't want to just take over and say, "Oh,


00:03:18.980 --> 00:03:21.860
I could solve this if somebody else is working on it already."


00:03:21.860 --> 00:03:24.800
But maybe you do. There's different ways,


00:03:24.800 --> 00:03:26.700
but pay attention to that. So that's good.


00:03:26.700 --> 00:03:30.520
Create a fresh branch for your contribution like you mentioned.


00:03:30.520 --> 00:03:33.640
It isn't always obvious because I'm already forking,


00:03:33.640 --> 00:03:34.740
what do we need a branch for?


00:03:34.740 --> 00:03:36.720
But it does help with


00:03:36.720 --> 00:03:40.680
the branch model when it comes back in, it just looks better.


00:03:40.680 --> 00:03:45.700
>> It's not necessary until your change is not accepted,


00:03:45.700 --> 00:03:48.620
or you want to make two changes.


00:03:48.620 --> 00:03:50.840
If you ever want to get back in sync with


00:03:50.840 --> 00:03:53.480
the main repo you need to do somewhere else.


00:03:53.480 --> 00:03:55.760
- And it might be very much a possibility


00:03:55.760 --> 00:03:57.120
that you want to make several changes.


00:03:57.120 --> 00:03:58.880
You're really excited about a project


00:03:58.880 --> 00:04:00.360
and you're making several.


00:04:00.360 --> 00:04:02.840
And like you said, there might be a lot of discussion


00:04:02.840 --> 00:04:05.240
around some and some of them are trivial things


00:04:05.240 --> 00:04:07.040
like fix and read me or something.


00:04:07.040 --> 00:04:12.040
And so yeah, do a branch so that you've got multiple names.


00:04:12.040 --> 00:04:14.840
And that's where we come to the next tip for


00:04:14.840 --> 00:04:16.400
is keep the change focused.


00:04:16.400 --> 00:04:18.960
So if a project would much rather have


00:04:18.960 --> 00:04:23.840
several focused pull requests than a single pull request with


00:04:23.840 --> 00:04:27.000
like four different changes in it that are completely unrelated.


00:04:27.000 --> 00:04:28.640
So keep them focused.


00:04:28.640 --> 00:04:33.180
This is great for closed source projects too.


00:04:33.180 --> 00:04:36.220
It just makes the code review easier.


00:04:36.220 --> 00:04:39.420
When you get in the habit of doing focused changes,


00:04:39.420 --> 00:04:41.420
it's not harder,


00:04:41.420 --> 00:04:44.240
it's just a workflow you got to get used to.


00:04:44.240 --> 00:04:46.100
Next is write unit tests.


00:04:46.100 --> 00:04:48.420
Definitely for the changes,


00:04:48.420 --> 00:04:52.500
but one of the comments that I loved in this as a bonus tip is,


00:04:52.500 --> 00:04:58.660
there might be some either untested features in the project or under-tested,


00:04:58.660 --> 00:05:02.140
and adding tests around those features that you care


00:05:02.140 --> 00:05:06.940
about is a great way to contribute to a code base. Keep that in mind.


00:05:06.940 --> 00:05:08.860
>> That's a really good point because people often think,


00:05:08.860 --> 00:05:10.300
well, what can I do to contribute?


00:05:10.300 --> 00:05:11.540
I'm not an expert.


00:05:11.540 --> 00:05:15.500
Well, if it's missing tests, that's pretty easy.


00:05:15.500 --> 00:05:18.940
So there's an idea of like testing is documentation.


00:05:18.940 --> 00:05:22.460
Some tests work well like that and some tests do not.


00:05:22.460 --> 00:05:25.380
A great way also just to walk through,


00:05:25.380 --> 00:05:29.400
make tests around the onboarding documentation,


00:05:29.400 --> 00:05:30.540
like the getting starting guide,


00:05:30.540 --> 00:05:32.000
making sure that those features are


00:05:32.000 --> 00:05:34.260
tested is a good thing to throw in there.


00:05:34.260 --> 00:05:39.260
Give your pull request a name with context.


00:05:39.260 --> 00:05:41.100
So naming well is good.


00:05:41.100 --> 00:05:44.100
Don't be surprised if your pull request name gets


00:05:44.100 --> 00:05:48.080
changed by one of the core contributors.


00:05:48.080 --> 00:05:52.580
It's just so that everybody can track what's going on inside better.


00:05:52.580 --> 00:05:54.200
So just learn from that.


00:05:54.200 --> 00:05:56.920
>> If mine is associated with an issue,


00:05:56.920 --> 00:06:00.260
I try to put the issue number as part of the branch.


00:06:00.260 --> 00:06:00.940
>> Yes.


00:06:00.940 --> 00:06:03.680
>> That I'd like, it'd be like add such and such.


00:06:03.680 --> 00:06:07.640
If that add such and such is actually to fix issue 221,


00:06:07.640 --> 00:06:13.300
it'd be like the branch should be add such and such 221 or whatever for the branch name.


00:06:13.300 --> 00:06:14.800
just so you're like, "Where the heck did this come from?


00:06:14.800 --> 00:06:16.940
Why is it here? Oh, yeah, that's right. I can go find it."


00:06:16.940 --> 00:06:21.460
>> Yeah. Reference the issue being fixed or resolved in the pull request.


00:06:21.460 --> 00:06:24.020
Referencing the issue in a way that,


00:06:24.020 --> 00:06:27.740
and you got to get used to this with GitHub or GitLab or other things.


00:06:27.740 --> 00:06:29.540
They'll link to the thing.


00:06:29.540 --> 00:06:32.100
It links things up if you name it correctly.


00:06:32.100 --> 00:06:35.620
So just play with that.


00:06:35.620 --> 00:06:40.980
Again, and then hopefully there's CI going on and tests.


00:06:40.980 --> 00:06:46.100
So if your pull request has a break, the test fail, address those.


00:06:46.100 --> 00:06:50.540
This is nothing more frustrating than a fairly decent pull request coming in,


00:06:50.540 --> 00:06:53.820
but the test fail or the coverage fails or something,


00:06:53.820 --> 00:06:57.100
and the person that issued the pull request doesn't deal with it.


00:06:57.100 --> 00:06:59.820
They just leave it for you, and that's not cool.


00:06:59.820 --> 00:07:01.420
So address those.


00:07:01.420 --> 00:07:03.140
Only a couple more.


00:07:03.140 --> 00:07:06.540
Push to the same branch with fixes and do not open a new pull request.


00:07:06.540 --> 00:07:09.540
So if the CI breaks, just push to the same branch again.


00:07:09.540 --> 00:07:10.540
It'll work.


00:07:10.540 --> 00:07:13.540
And then the lastly is be patient.


00:07:13.540 --> 00:07:16.540
I know that you've worked really hard on a change


00:07:16.540 --> 00:07:19.540
and you want to see it go into the main project right away,


00:07:19.540 --> 00:07:21.540
but these are volunteer projects mostly.


00:07:21.540 --> 00:07:24.540
So it might take a while to review it


00:07:24.540 --> 00:07:26.540
and be comfortable with the changes.


00:07:26.540 --> 00:07:28.540
- Yeah, that's a bit of a balance.


00:07:28.540 --> 00:07:29.540
- Yeah.


00:07:29.540 --> 00:07:31.540
- It's frustrating when you work on a project.


00:07:31.540 --> 00:07:33.540
You try to enhance some project


00:07:33.540 --> 00:07:35.540
and then you put something out there


00:07:35.540 --> 00:07:37.540
and there's not even a response.


00:07:37.540 --> 00:07:41.060
After, you know, like two weeks, you're like, well, I guess, I don't know.


00:07:41.060 --> 00:07:45.140
I don't know what to do with that, you know, but at the same time, it's absolutely volunteer.


00:07:45.140 --> 00:07:46.500
So there you go.


00:07:46.500 --> 00:07:46.740
All right.


00:07:46.740 --> 00:07:49.540
Let me tell you about something pretty cool for this next one, Brian.


00:07:49.540 --> 00:07:51.300
I learned about this from Rhett Turnbull.


00:07:51.300 --> 00:07:55.620
He and I had a chat over on Talk Python about building native Mac apps in Python.


00:07:55.620 --> 00:08:00.820
Recall, we talked about TechSniper and he built a Python only equivalent.


00:08:00.820 --> 00:08:04.340
And we actually covered on the show a little bit, but during our conversation there,


00:08:04.340 --> 00:08:07.660
this is one of the recommendations he had for something really cool.


00:08:07.660 --> 00:08:09.820
So imagine somebody comes to you and says,


00:08:09.820 --> 00:08:15.040
"Hey, Michael, I have a Raspberry Pi or Arduino thing in my lab,


00:08:15.040 --> 00:08:18.060
and it controls, let's say this is a biology lab,


00:08:18.060 --> 00:08:23.180
it controls experiments and you can build up something with a UI or whatever.


00:08:23.180 --> 00:08:24.560
But if people want to script it,


00:08:24.560 --> 00:08:30.380
wouldn't it be cool if there's a way to express in some form of syntax?


00:08:30.380 --> 00:08:33.900
Here's how somebody who is just a biologist can make it go.


00:08:33.900 --> 00:08:36.980
It could just be like, fill pipette seven,


00:08:36.980 --> 00:08:40.820
mix pipette seven and 10,


00:08:40.820 --> 00:08:44.180
wait 10 minutes, heat to such and such.


00:08:44.180 --> 00:08:46.780
Sure, you could come up with a programming language for them.


00:08:46.780 --> 00:08:48.420
You say, "Well, here's your language.


00:08:48.420 --> 00:08:50.980
We're going to give you C++, good luck."


00:08:50.980 --> 00:08:54.340
More ideally, maybe Python or oftentimes JavaScript,


00:08:54.340 --> 00:08:56.940
which feels like a real bad example or a choice


00:08:56.940 --> 00:09:00.020
because it's a complicated syntactical language,


00:09:00.020 --> 00:09:02.060
even though it's easy to execute.


00:09:02.060 --> 00:09:05.780
It's easy to make a mistake and forget a semicolon or something weird.


00:09:05.780 --> 00:09:10.700
Anyway, what if you could come up with the words that I used to introduce this idea?


00:09:10.700 --> 00:09:13.740
You just have lines like fill pipette seven,


00:09:13.740 --> 00:09:16.860
mix pipette seven and eight or whatever.


00:09:16.860 --> 00:09:20.060
This thing I'm talking about here is called TextX.


00:09:20.060 --> 00:09:24.740
TextX is a Python library that allows you to build these grammars


00:09:24.740 --> 00:09:28.220
and map them Python implementations in a super easy way.


00:09:28.220 --> 00:09:29.700
>> Wow. Okay.


00:09:29.700 --> 00:09:36.580
So, let's see, it's a meta-language for building domain-specific languages, DSLs, in Python.


00:09:36.580 --> 00:09:40.300
Basically, it'll help you build a textual language in an easy way,


00:09:40.300 --> 00:09:44.740
and you can invent your own language, as I said, or build support for an existing format.


00:09:44.740 --> 00:09:46.540
So, they have an example here.


00:09:46.540 --> 00:09:51.180
So, they have this grammar, and this is about moving things around,


00:09:51.180 --> 00:09:54.420
and basically drawing something in a language.


00:09:54.420 --> 00:09:56.220
So, you come up with a grammar, you'd say,


00:09:56.220 --> 00:10:00.660
There's a shape command which is just a line to a circle.


00:10:00.660 --> 00:10:03.380
There's a move command which is move to or move by.


00:10:03.380 --> 00:10:08.740
And then you just have these words move and then to that runs the move to command.


00:10:08.740 --> 00:10:12.140
If the word the line is move space by,


00:10:12.140 --> 00:10:13.380
that's the move by command.


00:10:13.380 --> 00:10:17.020
And then you map to the additional information to these classes.


00:10:17.020 --> 00:10:18.900
So these are all Python classes, right?


00:10:18.900 --> 00:10:21.300
So you just come up this is what is this 10 lines,


00:10:21.300 --> 00:10:25.300
eight lines, and then you create the class which is a point.


00:10:25.300 --> 00:10:28.660
and the other pieces and you just say meta model from string,


00:10:28.660 --> 00:10:30.780
give it the grammar and the classes involved.


00:10:30.780 --> 00:10:33.400
Then here's the new language we just created.


00:10:33.400 --> 00:10:35.380
Move space to 5, 10,


00:10:35.380 --> 00:10:38.580
line 2, 10, 10. How cool is that?


00:10:38.580 --> 00:10:40.220
>> That's pretty interesting actually.


00:10:40.220 --> 00:10:44.920
>> Yeah, you just create the model from there and then you can just basically parse it.


00:10:44.920 --> 00:10:46.780
For command in the model,


00:10:46.780 --> 00:10:48.120
start doing the things.


00:10:48.120 --> 00:10:50.420
If the commands move to or move by,


00:10:50.420 --> 00:10:51.860
it's already done the parsing,


00:10:51.860 --> 00:10:56.860
it has the command elements like the vector or the point already parsed and validated,


00:10:56.860 --> 00:10:58.520
and it just executes Python.


00:10:58.520 --> 00:10:59.020
>> Okay.


00:10:59.020 --> 00:10:59.420
>> What do you think?


00:10:59.420 --> 00:11:00.660
>> Well, so how do you use it?


00:11:00.660 --> 00:11:04.220
So do you put all these commands in a,


00:11:04.220 --> 00:11:07.740
somebody that put all these move things in a file and then run?


00:11:07.740 --> 00:11:11.740
>> Yeah, exactly. So you would implement the code that defines the grammar,


00:11:11.740 --> 00:11:13.940
you would implement the grammar classes,


00:11:13.940 --> 00:11:17.700
so like point and vector and those sorts of things,


00:11:17.700 --> 00:11:20.160
and then somebody would write the grammar.


00:11:20.160 --> 00:11:22.440
So move space to five comma 10.


00:11:22.440 --> 00:11:25.640
And then they probably have either a CLI or they save it in a file in


00:11:25.640 --> 00:11:29.120
some location and like you auto discover it or however it runs.


00:11:29.120 --> 00:11:32.240
So basically from an external perspective,


00:11:32.240 --> 00:11:35.080
you now allow people to just program in this simple way.


00:11:35.080 --> 00:11:36.640
Like another way you could do it is like you could


00:11:36.640 --> 00:11:39.440
write like a text adventure game, right?


00:11:39.440 --> 00:11:41.160
You could like look around,


00:11:41.160 --> 00:11:43.640
look at move right,


00:11:43.640 --> 00:11:45.760
move east, west, north, right?


00:11:45.760 --> 00:11:47.160
Attack creature, run,


00:11:47.160 --> 00:11:49.800
like you could really easily in Python build


00:11:49.800 --> 00:11:52.460
like a pretty interesting text adventure game


00:11:52.460 --> 00:11:53.620
based on this, I would imagine.


00:11:53.620 --> 00:11:54.880
Probably it already exists.


00:11:54.880 --> 00:11:57.080
>> Yeah. Well, yeah.


00:11:57.080 --> 00:11:58.620
So it adventures around,


00:11:58.620 --> 00:12:01.740
so we could probably re-implement it with this.


00:12:01.740 --> 00:12:02.260
>> Yeah.


00:12:02.260 --> 00:12:02.700
>> Might be fun.


00:12:02.700 --> 00:12:03.380
>> Yeah, that'd be fun.


00:12:03.380 --> 00:12:09.420
>> But this or a complete way to burn up a summer.


00:12:09.420 --> 00:12:11.900
This looks cool though.


00:12:11.900 --> 00:12:14.800
There's a whole bunch of cases where DSL is appropriate,


00:12:14.800 --> 00:12:16.500
especially when you're interacting


00:12:16.500 --> 00:12:18.680
with non-programmer type people.


00:12:18.680 --> 00:12:23.480
>> Exactly. You want to give them some kind of text ability to interact with what you've created,


00:12:23.480 --> 00:12:27.140
but you don't want to force them to do full-on super precise programming.


00:12:27.140 --> 00:12:32.220
>> Yeah. Or maybe it is programmers and it's just easier to think about stuff in this manner.


00:12:32.220 --> 00:12:32.600
>> Yeah.


00:12:32.600 --> 00:12:33.060
>> Neat.


00:12:33.060 --> 00:12:35.620
>> Yeah, you just have a real high-level way to talk about what you want.


00:12:35.620 --> 00:12:36.040
>> Yeah.


00:12:36.040 --> 00:12:37.960
>> Indeed. Cool. Anyway, so TextX,


00:12:37.960 --> 00:12:38.960
people can check it out.


00:12:38.960 --> 00:12:40.440
Another thing that's pretty awesome,


00:12:40.440 --> 00:12:42.900
Compiler from Red Hat, our sponsor this week.


00:12:42.900 --> 00:12:45.320
Yeah, let me tell folks about that before we move on.


00:12:45.320 --> 00:12:48.960
So this episode, as I said, is sponsored by Compiler.


00:12:48.960 --> 00:12:51.460
Just like you, Brian and I are fans of podcasts,


00:12:51.460 --> 00:12:54.760
and I'm happy to share this new, highly respected one


00:12:54.760 --> 00:12:56.680
from an open source company I'm sure you know,


00:12:56.680 --> 00:12:59.260
Compiler, an original podcast from Red Hat.


00:12:59.260 --> 00:13:00.960
And if you want to stay on top of tech


00:13:00.960 --> 00:13:03.020
without dedicating tons of time to it,


00:13:03.020 --> 00:13:06.020
Compiler presents perspectives, topics, and insights


00:13:06.020 --> 00:13:08.860
from the tech industry free of jargon and judgment.


00:13:08.860 --> 00:13:11.060
They want to discover where technology is headed


00:13:11.060 --> 00:13:12.560
beyond the headlines and create a place


00:13:12.560 --> 00:13:15.400
for new IT professionals to learn, grow, and thrive.


00:13:15.400 --> 00:13:17.640
Compile helps people break through barriers and challenges,


00:13:17.640 --> 00:13:20.680
turning code into community at all levels of the enterprise.


00:13:20.680 --> 00:13:22.940
One recent interesting episode is there,


00:13:22.940 --> 00:13:25.100
the Great Stack Debate episode.


00:13:25.100 --> 00:13:26.600
I love, love, love talking to people


00:13:26.600 --> 00:13:28.480
about how they architect their code,


00:13:28.480 --> 00:13:30.480
the trade-offs and conventions they chose,


00:13:30.480 --> 00:13:32.900
and the costs, challenges, and smiles that result.


00:13:32.900 --> 00:13:34.440
This one is like that,


00:13:34.440 --> 00:13:37.100
this Great Stack Debate episode.


00:13:37.100 --> 00:13:39.860
Check it out and see if software is more like an onion


00:13:39.860 --> 00:13:40.940
or more like lasagna,


00:13:40.940 --> 00:13:42.940
or maybe it's more complicated than food.


00:13:42.940 --> 00:13:45.680
This is actually the first episode


00:13:45.680 --> 00:13:48.020
in Compiler's Software Stack series,


00:13:48.020 --> 00:13:49.520
and I think it'll be pretty interesting.


00:13:49.520 --> 00:13:50.660
So check that one out.


00:13:50.660 --> 00:13:53.960
Learn more about Compiler at pythonbytes.fm/compiler.


00:13:53.960 --> 00:13:55.820
The link is in your podcast player show notes.


00:13:55.820 --> 00:13:58.600
Yes, I know you can open up your podcast player


00:13:58.600 --> 00:13:59.800
and just search for Compiler,


00:13:59.800 --> 00:14:02.440
but please visit pythonbytes.fm/compiler


00:14:02.440 --> 00:14:05.160
and click on your podcast player's icon.


00:14:05.160 --> 00:14:07.100
That way they know it came from us.


00:14:07.100 --> 00:14:10.900
Our thanks to Compiler for keeping our podcast going strong.


00:14:10.900 --> 00:14:12.500
>> Nice. Yeah, very cool.


00:14:12.500 --> 00:14:14.260
>> Yeah. All right. What's next, Brian?


00:14:14.260 --> 00:14:21.260
>> Well, I want to talk about locks and semaphores and analogies and stuff.


00:14:21.260 --> 00:14:24.300
>> I've been thinking about them so much lately, actually.


00:14:24.300 --> 00:14:24.980
>> Have you?


00:14:24.980 --> 00:14:27.180
>> Yes, I have. Tell me more.


00:14:27.180 --> 00:14:30.940
>> Well, this is a blog post by Guido van Rossum.


00:14:30.940 --> 00:14:32.220
He doesn't blog often,


00:14:32.220 --> 00:14:35.500
but there's usually some interesting bits when he wants to.


00:14:35.500 --> 00:14:40.760
So this is a post called Reasoning about AsyncIO Semaphore.


00:14:40.760 --> 00:14:45.560
So it starts off with a story about a restaurant.


00:14:45.560 --> 00:14:48.660
So there's an analogy here about,


00:14:48.660 --> 00:14:50.320
so you got a restaurant,


00:14:50.320 --> 00:14:51.360
it's a fast food place,


00:14:51.360 --> 00:14:55.040
but it only has one table and there's a line waiting for it.


00:14:55.040 --> 00:14:56.920
But you don't want to just wait in line,


00:14:56.920 --> 00:14:59.840
so there's a way for you to get a buzzer.


00:14:59.840 --> 00:15:02.260
So somebody hands you a buzzer and you go wait.


00:15:02.260 --> 00:15:03.420
When the table's open,


00:15:03.420 --> 00:15:07.600
your buzzer rings and you go get seated and you can eat.


00:15:07.600 --> 00:15:09.760
This sort of analogy,


00:15:09.760 --> 00:15:13.160
he talks about this as a lock.


00:15:13.160 --> 00:15:15.560
With concurrent programming,


00:15:15.560 --> 00:15:17.960
so only one person can eat at a time.


00:15:17.960 --> 00:15:20.760
But then if you've got multiple tables,


00:15:20.760 --> 00:15:22.660
things get a little more interesting.


00:15:22.660 --> 00:15:24.660
That's where semaphores come in.


00:15:24.660 --> 00:15:27.720
I love this mind shift.


00:15:27.720 --> 00:15:30.280
This is often difficult for people when


00:15:30.280 --> 00:15:32.680
they're doing asynchronous programming,


00:15:32.680 --> 00:16:01.480
to have this like lock makes sense. You know, you're either a thread or some code is using a resource and it can and nobody else can, but at, but then, then you unlock it and somebody else can grab it. But what if there's like, like three people can at a time? Those are some of the different some a little bit of a mind shift. So I love this idea of three table restaurant as a way to think about this analogy. And so he goes through the analogy, but then talks about


00:16:01.480 --> 00:16:04.360
locks and semaphores.


00:16:04.360 --> 00:16:07.760
And this is apparently to help himself even with


00:16:07.760 --> 00:16:12.160
the implementation of the semaphore in the new ACIO code.


00:16:12.160 --> 00:16:16.160
So, and making sure that things like work correctly


00:16:16.160 --> 00:16:19.500
and using an analogy to try to figure out


00:16:19.500 --> 00:16:23.420
how things are supposed to work and like an error.


00:16:23.420 --> 00:16:26.780
So if you've got an exception happening,


00:16:26.780 --> 00:16:30.300
one of the problems can be, it's like somebody gets,


00:16:30.300 --> 00:16:32.920
but they're waiting and they decide


00:16:32.920 --> 00:16:33.820
they don't wanna wait anymore,


00:16:33.820 --> 00:16:35.820
so they go turn their buzzer in.


00:16:35.820 --> 00:16:37.860
Well, what happens if while they're,


00:16:37.860 --> 00:16:40.660
when they're just as they've decided to turn it in,


00:16:40.660 --> 00:16:42.740
but it's their turn and they get buzzed


00:16:42.740 --> 00:16:44.300
and they, but they turned it in anyway


00:16:44.300 --> 00:16:45.460
and they don't wanna run.


00:16:45.460 --> 00:16:48.180
So they're never going to call the release code.


00:16:48.180 --> 00:16:51.380
And so with the common,


00:16:51.380 --> 00:16:56.380
the interaction between cancel and release is difficult.


00:16:56.380 --> 00:17:00.000
So there's all this stuff.


00:17:00.000 --> 00:17:02.920
And it's so cool to think about this in terms of a restaurant


00:17:02.920 --> 00:17:04.400
because it's easy to visualize.


00:17:04.400 --> 00:17:06.000
So any great article.


00:17:06.000 --> 00:17:10.440
And then at the end, he actually links to the code


00:17:10.440 --> 00:17:12.000
that he's finished writing.


00:17:12.000 --> 00:17:14.480
So he links it to, yeah, current code.


00:17:14.480 --> 00:17:15.600
So that's pretty cool.


00:17:15.600 --> 00:17:16.440
- Right on.


00:17:16.440 --> 00:17:18.440
Yeah, semaphores are, I would say,


00:17:18.440 --> 00:17:21.520
these are the things that many people don't really,


00:17:21.520 --> 00:17:24.000
they don't really think to grab and use,


00:17:24.000 --> 00:17:25.680
but they're so incredibly useful.


00:17:25.680 --> 00:17:27.840
Like, so one example,


00:17:27.840 --> 00:17:31.820
Like let's imagine your job is to go scan a bunch of URLs


00:17:31.820 --> 00:17:33.480
and ingest a bunch of data,


00:17:33.480 --> 00:17:35.520
and you're gonna run that like 8 a.m. every day


00:17:35.520 --> 00:17:36.400
or you know, whatever.


00:17:36.400 --> 00:17:38.620
If you've got 10,000 URLs,


00:17:38.620 --> 00:17:42.200
it would be way, way, way faster to use asyncio


00:17:42.200 --> 00:17:44.360
and HTTPS to kick off those requests.


00:17:44.360 --> 00:17:47.400
But if you just say for URL in URLs,


00:17:47.400 --> 00:17:50.260
start a task, got 10,000 pending requests


00:17:50.260 --> 00:17:51.960
and all that data is coming back into memory


00:17:51.960 --> 00:17:54.000
and it's gonna, you're gonna have a bad time, right?


00:17:54.000 --> 00:17:54.840
- Yeah.


00:17:54.840 --> 00:17:56.880
- So one thing you could do is you could create a semaphore


00:17:56.880 --> 00:18:00.400
and say, you know, I only want to allow 10, 20, 100


00:18:00.400 --> 00:18:02.000
in-flight requests at a time.


00:18:02.000 --> 00:18:03.800
And you just create a semaphore of 100


00:18:03.800 --> 00:18:05.480
and you just pass it off to every task


00:18:05.480 --> 00:18:06.920
and they just have to start at the beginning


00:18:06.920 --> 00:18:08.320
and you know, acquire it and release it.


00:18:08.320 --> 00:18:09.160
Boom, you're done.


00:18:09.160 --> 00:18:10.600
You've now created like a, I only,


00:18:10.600 --> 00:18:14.080
I'm going through 10,000 with a straight for loop


00:18:14.080 --> 00:18:17.400
and I'm doing nothing more than 100 at a time guaranteed.


00:18:17.400 --> 00:18:18.720
- Yeah. - Beautiful, right?


00:18:18.720 --> 00:18:19.920
- That's a really good analogy.


00:18:19.920 --> 00:18:22.200
I was trying to think of a good one where,


00:18:22.200 --> 00:18:25.360
'cause I was actually even looking through the Python code


00:18:25.360 --> 00:18:28.520
of any cases where they use more than one.


00:18:28.520 --> 00:18:32.560
Like a semaphore with one is just like a lock.


00:18:32.560 --> 00:18:34.680
But if you can allow more than that,


00:18:34.680 --> 00:18:36.640
then it gets interesting.


00:18:36.640 --> 00:18:37.640
- Yeah, absolutely.


00:18:37.640 --> 00:18:41.760
You can think about similar things for databases


00:18:41.760 --> 00:18:43.960
if it really can't handle a ton of requests.


00:18:43.960 --> 00:18:45.720
One thing, now that you point this out,


00:18:45.720 --> 00:18:48.120
I wanna just give a quick shout out to Any.io.


00:18:48.120 --> 00:18:51.040
I interviewed Alex, I believe it was Alex from there,


00:18:51.040 --> 00:18:55.060
who worked on it, and it's got a really cool idea.


00:18:55.060 --> 00:18:57.380
It's similar to the task groups and stuff that you talked about.


00:18:57.380 --> 00:19:00.740
And it has this thing called a capacity limiter,


00:19:00.740 --> 00:19:02.900
which is much like a,


00:19:02.900 --> 00:19:04.380
it's very much like a semaphore,


00:19:04.380 --> 00:19:06.420
but a little more async native.


00:19:06.420 --> 00:19:09.900
Because you can use it in async context manager,


00:19:09.900 --> 00:19:11.260
like a with block, async with.


00:19:11.260 --> 00:19:13.300
So here I have created just a capacity limiter of,


00:19:13.300 --> 00:19:14.460
like my example is 100.


00:19:14.460 --> 00:19:17.020
And you just say, async with create a group


00:19:17.020 --> 00:19:18.620
for all the items,


00:19:18.620 --> 00:19:20.140
you know, task start, soon pass limiter,


00:19:20.140 --> 00:19:23.060
and all the tasks just do like async with this limiter,


00:19:23.060 --> 00:19:24.300
do whatever you're going to do.


00:19:24.300 --> 00:19:26.940
And boom, now you only get, you know, end of them running at a time.


00:19:26.940 --> 00:19:27.500
Super easy.


00:19:27.500 --> 00:19:28.280
Very cool.


00:19:28.280 --> 00:19:28.580
Cool.


00:19:28.580 --> 00:19:28.980
Okay.


00:19:28.980 --> 00:19:30.460
That's not actually what I wanted to cover though.


00:19:30.460 --> 00:19:35.180
I want to talk about some annoying stuff that got slightly less annoying.


00:19:35.180 --> 00:19:40.980
Um, security and preventing people from doing just bad stuff to your,


00:19:40.980 --> 00:19:42.660
your things online, right?


00:19:42.660 --> 00:19:44.360
Web apps and mostly web apps.


00:19:44.360 --> 00:19:46.340
Um, you know, think about a forum.


00:19:46.340 --> 00:19:50.020
People come in there just like bots come in and start posting junk.


00:19:50.020 --> 00:19:53.420
Like, I don't know why YouTube can't fix it, but I would say about one out of


00:19:53.420 --> 00:19:57.460
every three shows get some sort of like disgusting,


00:19:57.460 --> 00:20:00.380
"Come see the ladies over here," sort of post


00:20:00.380 --> 00:20:02.140
with clearly text that was like,


00:20:02.140 --> 00:20:03.820
"Why is this still allowed?"


00:20:03.820 --> 00:20:05.460
And if you run a website,


00:20:05.460 --> 00:20:07.540
you're gonna run into those kind of problems.


00:20:07.540 --> 00:20:10.300
So like we had big problems at TalkByThon Training


00:20:10.300 --> 00:20:13.020
with a bunch of bots creating free accounts.


00:20:13.020 --> 00:20:14.780
And they're just free,


00:20:14.780 --> 00:20:16.140
you don't get anything by creating an account.


00:20:16.140 --> 00:20:18.540
I don't know why they were doing it, but they were.


00:20:18.540 --> 00:20:21.100
And so, but they were doing it from hundreds


00:20:21.100 --> 00:20:22.380
or thousands of different IPs.


00:20:22.380 --> 00:20:23.380
It was super annoying.


00:20:23.380 --> 00:20:25.580
So we ended up having to put a reCAPTCHA on there.


00:20:25.580 --> 00:20:28.120
And every time I go to the site and I've got to sign in,


00:20:28.120 --> 00:20:30.960
I'm like, oh gosh, here come the crosswalks


00:20:30.960 --> 00:20:33.380
and the stoplights and that's not a bus.


00:20:33.380 --> 00:20:34.220
There's no buses.


00:20:34.220 --> 00:20:35.040
What do you want me to do?


00:20:35.040 --> 00:20:36.140
You know, like how frustrating this is.


00:20:36.140 --> 00:20:38.620
So Cloudflare, they're doing a bunch of interesting


00:20:38.620 --> 00:20:40.620
branching out of just being a CDN.


00:20:40.620 --> 00:20:43.120
And they've announced this thing called Turnstile,


00:20:43.120 --> 00:20:46.840
a user-friendly privacy preserving alternative


00:20:46.840 --> 00:20:48.460
to CAPTCHA or reCAPTCHA.


00:20:48.460 --> 00:20:50.380
Like reCAPTCHA is owned by Google


00:20:50.380 --> 00:20:52.300
and like a lot of the stuff that you do there


00:20:52.300 --> 00:20:55.020
it gets sent back over there and it's not ideal.


00:20:55.020 --> 00:20:58.440
So also finding all the crosswalks, not ideal.


00:20:58.440 --> 00:21:00.680
So this thing is something they announced


00:21:00.680 --> 00:21:02.140
and it's free to use,


00:21:02.140 --> 00:21:05.600
even if you don't have some kind of other reCAPTCHA thing,


00:21:05.600 --> 00:21:06.640
like you're not a customer,


00:21:06.640 --> 00:21:08.180
you should create an account for free,


00:21:08.180 --> 00:21:10.180
get an API key for this and use it.


00:21:10.180 --> 00:21:12.140
So here, if you go to the page


00:21:12.140 --> 00:21:15.260
that I'm linking to the blog.cloudflare.com,


00:21:15.260 --> 00:21:16.420
all that happens is you go there


00:21:16.420 --> 00:21:17.980
and it just spins for a second.


00:21:17.980 --> 00:21:19.720
It does the work and the magic


00:21:19.720 --> 00:21:21.680
that CloudFlare's already using to verify


00:21:21.680 --> 00:21:24.120
that you're a human and you're a real machine


00:21:24.120 --> 00:21:26.400
and you know, maybe do some sort of like cost,


00:21:26.400 --> 00:21:28.960
make you run like a tight loop for a second or whatever,


00:21:28.960 --> 00:21:30.200
and then you're verified.


00:21:30.200 --> 00:21:31.920
And if it doesn't work, then you can click a little button


00:21:31.920 --> 00:21:34.800
and verify you're human, hopefully.


00:21:34.800 --> 00:21:36.560
But yeah, so this is pretty cool.


00:21:36.560 --> 00:21:39.880
You can now replace your reCAPTCHA with that.


00:21:39.880 --> 00:21:41.160
And it's pretty straightforward.


00:21:41.160 --> 00:21:44.320
Basically, you drop some JavaScript onto the page


00:21:44.320 --> 00:21:45.640
and a little widget,


00:21:45.640 --> 00:21:47.000
and then you put the widget in your form.


00:21:47.000 --> 00:21:49.720
If somebody submits it, it comes with that validation,


00:21:49.720 --> 00:21:54.680
like some sort of validation code that was created by Cloudflare on the server


00:21:54.680 --> 00:21:58.600
side, you want to verify that because its presence isn't enough because anybody


00:21:58.600 --> 00:22:02.760
could just send like garbage with the right form ID, right? So there's a


00:22:02.760 --> 00:22:07.360
server side API, you've got to call to validate that and make sure that yeah,


00:22:07.360 --> 00:22:11.280
this is actually it came from your domain, it just was created, it is a real


00:22:11.280 --> 00:22:13.400
one, it's a unique one and all those things.


00:22:13.400 --> 00:22:13.960
Oh, cool.


00:22:13.960 --> 00:22:18.440
Yeah. So anyway, if people want to use this, it seems pretty awesome. Over on


00:22:18.440 --> 00:22:20.640
in talk by thon I switched the things over to it


00:22:20.640 --> 00:22:21.680
and we'll see how it goes.


00:22:21.680 --> 00:22:24.000
So for example, if you wanna get notified


00:22:24.000 --> 00:22:26.880
about our mailing list, now you've got to wait


00:22:26.880 --> 00:22:28.720
about three quarters of a second


00:22:28.720 --> 00:22:30.520
before typing in your email address,


00:22:30.520 --> 00:22:31.680
unless you're like some kind of beast


00:22:31.680 --> 00:22:33.560
and you could type it in, like select the form,


00:22:33.560 --> 00:22:35.480
type your email address and hit subscribe


00:22:35.480 --> 00:22:37.540
before like a second is up, right?


00:22:37.540 --> 00:22:38.700
But that's pretty much it.


00:22:38.700 --> 00:22:43.000
You hit submit and then it runs some magic on the server.


00:22:43.000 --> 00:22:46.680
But I'm doing this live, I'm gonna check out pypi.org


00:22:46.680 --> 00:22:51.240
check out turn style. There's a bunch of stuff up here. There's like rate limiting things


00:22:51.240 --> 00:22:56.760
and other stuff, but nothing about Cloudflare. So I created for the moment a GitHub gist


00:22:56.760 --> 00:23:00.880
that has the server side implementation for anybody who wants to do this in Python, modern


00:23:00.880 --> 00:23:01.880
Python anyway.


00:23:01.880 --> 00:23:02.880
- Nice.


00:23:02.880 --> 00:23:08.040
- Cool, right? So over here, you just need this one file, this one module you can use


00:23:08.040 --> 00:23:13.840
here. This one's synchronous, but you could just as well use HTTPX and async if you're


00:23:13.840 --> 00:23:16.240
want to do this validation in like an async view.


00:23:16.240 --> 00:23:18.200
So it has a Pydantic models,


00:23:18.200 --> 00:23:20.080
like here's what you got to send over,


00:23:20.080 --> 00:23:24.360
and here's what you'll expect to get back from the API endpoints,


00:23:24.360 --> 00:23:27.320
little examples, and then just has one function called validate.


00:23:27.320 --> 00:23:30.560
Given the thing they submitted in the form and their user IP,


00:23:30.560 --> 00:23:33.420
just so you have that as part of your information of what happened,


00:23:33.420 --> 00:23:35.040
they need to know that, and that's it.


00:23:35.040 --> 00:23:38.000
It's a cool example of seeing how to do request response


00:23:38.000 --> 00:23:40.720
with Pydantic to APIs as well.


00:23:40.720 --> 00:23:42.240
>> That's pretty cool. Nice.


00:23:42.240 --> 00:23:45.280
Awesome. Well, that's a really good stuff.


00:23:45.280 --> 00:23:47.520
So here's the thing, right now it's not a package.


00:23:47.520 --> 00:23:49.760
I'm not sure I need more open source projects to manage.


00:23:49.760 --> 00:23:51.040
However, let's say if-


00:23:51.040 --> 00:23:53.680
>> I was curious why you didn't make a package out of that.


00:23:53.680 --> 00:23:56.120
>> Well, because I only did this like Monday, right?


00:23:56.120 --> 00:23:58.480
So it's only, I wanted to stabilize a little.


00:23:58.480 --> 00:24:01.900
If sufficiently many people shoot me a text on Twitter,


00:24:01.900 --> 00:24:04.160
like a @mention, M. Kennedy,


00:24:04.160 --> 00:24:06.640
says, "Hey, please make this a package so I can use it too,


00:24:06.640 --> 00:24:08.640
more directly or we could all contribute."


00:24:08.640 --> 00:24:10.880
Now, if people do that, I'll turn it into a package.


00:24:10.880 --> 00:24:12.960
But I just haven't had the time because I've been playing with other stuff that


00:24:12.960 --> 00:24:13.700
I'll talk about in a minute.


00:24:13.700 --> 00:24:15.380
You can only have so many projects, you know?


00:24:15.380 --> 00:24:16.260
Yeah.


00:24:16.260 --> 00:24:16.800
Yeah.


00:24:16.800 --> 00:24:17.180
All right.


00:24:17.180 --> 00:24:20.020
Well, that, that brings us to all of our main items, right?


00:24:20.020 --> 00:24:20.580
Yeah.


00:24:20.580 --> 00:24:26.100
Um, so one of the things, for extras, I wanted to pop up just to


00:24:26.100 --> 00:24:32.100
briefly, I was looking at a, so I was looking at, Oh, let's go years too.


00:24:32.100 --> 00:24:32.860
Do you have any extras?


00:24:32.860 --> 00:24:34.380
I do have some extras.


00:24:34.380 --> 00:24:35.660
So you go first though.


00:24:35.660 --> 00:24:36.200
I have a ton.


00:24:36.200 --> 00:24:36.780
Okay.


00:24:36.780 --> 00:24:37.780
So I got it.


00:24:37.780 --> 00:24:38.660
I just have a couple.


00:24:38.820 --> 00:24:43.580
So this article says it's from testdriven.io.


00:24:43.580 --> 00:24:46.660
Heroku alternatives for Python-based applications.


00:24:46.660 --> 00:24:50.500
And to be fair, it's pretty fair to Heroku also.


00:24:50.500 --> 00:24:54.020
So really, it isn't don't use Heroku.


00:24:54.020 --> 00:24:57.940
It's kind of like, what are all the things you can use?


00:24:57.940 --> 00:25:01.540
So it goes through Heroku, of course,


00:25:01.540 --> 00:25:03.540
but then it also goes through,


00:25:03.540 --> 00:25:06.340
does some description and pros and cons


00:25:06.340 --> 00:25:10.580
for DigitalOcean app platform and render and fly.io.


00:25:10.580 --> 00:25:14.100
And even some that we don't hear too much about,


00:25:14.100 --> 00:25:18.980
like Engine Yard, Railway.app.


00:25:18.980 --> 00:25:20.540
Railway looks pretty cool.


00:25:20.540 --> 00:25:22.340
>> Yeah, Railway does look cool.


00:25:22.340 --> 00:25:24.940
>> So really having one person compare,


00:25:24.940 --> 00:25:26.740
look at all of these and compare them,


00:25:26.740 --> 00:25:28.900
it's just kind of a nice thing to just hear


00:25:28.900 --> 00:25:31.460
what somebody has to say about all these different platforms


00:25:31.460 --> 00:25:33.100
that you might want to try out.


00:25:33.100 --> 00:25:35.680
>> Yeah, that's a ton of, that's a lot of reviews.


00:25:35.680 --> 00:25:37.240
- Yeah, it's pretty neat.


00:25:37.240 --> 00:25:40.900
- And these are all in the platform as a service equivalent,


00:25:40.900 --> 00:25:41.740
it looks like.


00:25:41.740 --> 00:25:42.560
- Yeah.


00:25:42.560 --> 00:25:44.640
- It's not like just, here's where you run VMs.


00:25:44.640 --> 00:25:45.580
Like, well, okay, that's great,


00:25:45.580 --> 00:25:47.320
but that's not what Heroku was helping me with.


00:25:47.320 --> 00:25:50.440
- Yeah, and that's actually one of the fair comments.


00:25:50.440 --> 00:25:52.120
It says, like, for instance, Heroku,


00:25:52.120 --> 00:25:55.480
one of the things it says is the price can go up as you,


00:25:55.480 --> 00:25:57.140
it's not too bad at the start,


00:25:57.140 --> 00:25:59.080
but it can go up as you grow.


00:25:59.080 --> 00:26:00.960
And same with all of these, really.


00:26:00.960 --> 00:26:05.500
But the, and it's how many times more


00:26:05.500 --> 00:26:08.340
than running it just directly on AWS.


00:26:08.340 --> 00:26:11.900
But it's a be careful because that's not a,


00:26:11.900 --> 00:26:15.220
a platform as a service is not a fair comparison


00:26:15.220 --> 00:26:17.140
to just running it all yourself


00:26:17.140 --> 00:26:20.060
because then you have to do it all yourself.


00:26:20.060 --> 00:26:20.900
- Exactly.


00:26:20.900 --> 00:26:21.740
- Kind of paying the service


00:26:21.740 --> 00:26:23.940
instead of paying somebody to monitor it for you.


00:26:23.940 --> 00:26:25.520
So I think it's reasonable.


00:26:25.520 --> 00:26:28.460
So the other thing I wanted to bring up was


00:26:28.460 --> 00:26:29.820
we brought it up last time


00:26:29.820 --> 00:26:33.660
and maybe the time before the pytest course is going well.


00:26:33.660 --> 00:26:36.880
So I'm glad people are getting use out of the pytest course.


00:26:36.880 --> 00:26:39.160
But I wanted, I've been kicking around the idea


00:26:39.160 --> 00:26:41.880
of doing a cohort based thing,


00:26:41.880 --> 00:26:43.920
something like the pytest course,


00:26:43.920 --> 00:26:47.360
not the exact same content, but similar sort of things.


00:26:47.360 --> 00:26:49.680
Get people up to speed and do it as a cohort.


00:26:49.680 --> 00:26:51.240
And I'd like people to get in touch with me


00:26:51.240 --> 00:26:52.720
if they think that's a good idea.


00:26:52.720 --> 00:26:55.020
I'm thinking about maybe doing it in December,


00:26:55.020 --> 00:26:56.640
but I'm not sure, December or January.


00:26:56.640 --> 00:26:58.160
So hit me up on Twitter,


00:26:58.160 --> 00:27:02.600
or you can get to my contact form on Test&Code as well.


00:27:02.600 --> 00:27:04.280
it'll get to me. So yeah, let me know.


00:27:04.280 --> 00:27:06.280
>> Those live events are really nice.


00:27:06.280 --> 00:27:08.040
It's a cool experience.


00:27:08.040 --> 00:27:09.760
So hopefully that goes off.


00:27:09.760 --> 00:27:10.800
>> Yeah, that'd be neat.


00:27:10.800 --> 00:27:12.600
>> Indeed. All right.


00:27:12.600 --> 00:27:15.960
Would you believe that just last night I was writing some C code?


00:27:15.960 --> 00:27:16.600
>> No.


00:27:16.600 --> 00:27:18.360
>> I typically do. Come on,


00:27:18.360 --> 00:27:20.480
another semicolon I forgot, are you kidding me?


00:27:20.480 --> 00:27:22.120
Been a while. But I actually did


00:27:22.120 --> 00:27:24.480
a pretty good job without pulling up any references or anything.


00:27:24.480 --> 00:27:25.880
So more on that later.


00:27:25.880 --> 00:27:28.200
But I just want to give a quick shout out to


00:27:28.200 --> 00:27:31.780
this project called CPP Front from Herb Sutter.


00:27:31.780 --> 00:27:36.480
It's an experimental compiler for an alternative syntax to C++.


00:27:36.480 --> 00:27:40.480
It would make the language 10 times simpler, safer, and more coolable.


00:27:40.480 --> 00:27:44.280
I think it basically is, as the name would say, like CPP front,


00:27:44.280 --> 00:27:47.480
it's like a slightly different language that compiles to C++.


00:27:47.480 --> 00:27:50.080
So it has an interoperability and whatnot.


00:27:50.080 --> 00:27:55.180
People do a lot of C++, like, you know, for low-level integration with Python and things,


00:27:55.180 --> 00:27:56.380
might find this interesting.


00:27:56.380 --> 00:28:00.980
So you can jump over to the GitHub repo and they have got some examples in here.


00:28:00.980 --> 00:28:05.900
Let me see if I find a, I think you've got to maybe go check out the test or something like that.


00:28:05.900 --> 00:28:08.380
They don't have great documentation.


00:28:08.380 --> 00:28:10.060
Uh, CP2.


00:28:10.060 --> 00:28:11.460
It's just text.


00:28:11.460 --> 00:28:12.260
Show it to me.


00:28:12.260 --> 00:28:12.940
Oh, wait, no, it's not.


00:28:12.940 --> 00:28:14.380
It's 4 megs, but it's okay.


00:28:14.380 --> 00:28:21.380
Anyway, it's got some pretty funky syntax, but it also looks pretty fun.


00:28:21.380 --> 00:28:22.260
People can check that out.


00:28:22.260 --> 00:28:24.860
So if that's interesting, then go for it.


00:28:24.860 --> 00:28:30.020
I don't know where I saw the full examples or something, but, well, they had some in here.


00:28:30.020 --> 00:28:31.420
>> What's different about this?


00:28:31.420 --> 00:28:32.820
Yeah, I find them.


00:28:32.820 --> 00:28:34.740
Oh, well, you can look through the notes here.


00:28:34.740 --> 00:28:38.220
The language, it hardly looks like C++,


00:28:38.220 --> 00:28:39.980
but it's still as the same thing.


00:28:39.980 --> 00:28:42.220
What do you think about this, Brian? You do some C.


00:28:42.220 --> 00:28:44.740
>> Well, I've been doing it for so long that I


00:28:44.740 --> 00:28:47.820
don't know if it's that hard to do C++.


00:28:47.820 --> 00:28:49.620
I mean, it's hard to get it right,


00:28:49.620 --> 00:28:54.100
but we have a lot of help now with


00:28:54.100 --> 00:28:57.540
the modern compilers and linters and everything.


00:28:57.540 --> 00:29:03.220
But yeah, but I thought I always think it's a neat idea if it's really easier.


00:29:03.220 --> 00:29:05.780
That little snippet you showed me didn't look easier, but.


00:29:05.780 --> 00:29:06.820
Here you go.


00:29:06.820 --> 00:29:08.180
Here's an example.


00:29:08.180 --> 00:29:10.700
If you check out this little graphic on the readme called,


00:29:10.700 --> 00:29:13.300
it says cat hello dot cpp2.


00:29:13.300 --> 00:29:13.900
Okay.


00:29:13.900 --> 00:29:16.420
It looks a little bit like Python type hence, doesn't it?


00:29:16.420 --> 00:29:19.060
Like the way you specify the return value and stuff.


00:29:19.060 --> 00:29:19.580
Yeah.


00:29:19.580 --> 00:29:21.300
Yeah. Anyway, it could be fun.


00:29:21.300 --> 00:29:22.420
We'll see if it goes anywhere.


00:29:22.420 --> 00:29:23.740
All right. A few other things.


00:29:23.740 --> 00:29:27.020
TypeScript is definitely something that's going somewhere.


00:29:27.020 --> 00:29:31.020
Matt Kramer pointed out that Jeff Glass


00:29:31.020 --> 00:29:34.060
has been doing a bunch of things with iScript lately.


00:29:34.060 --> 00:29:35.580
So I wanna highlight one thing


00:29:35.580 --> 00:29:38.740
and then I'm gonna dive into it more next week.


00:29:38.740 --> 00:29:40.240
I just wanna put this on people's radar.


00:29:40.240 --> 00:29:44.280
So PyScript September edition


00:29:44.280 --> 00:29:46.500
is out with lots of changes on it.


00:29:46.500 --> 00:29:49.100
So probably the easiest way to see that


00:29:49.100 --> 00:29:51.280
is to click on this blog post they got down there.


00:29:51.280 --> 00:29:53.060
So if you've been doing any PyScript,


00:29:53.060 --> 00:29:54.180
you're gonna wanna know about this


00:29:54.180 --> 00:29:56.380
'cause it's like super breaking changes.


00:29:56.380 --> 00:29:59.100
So for example, you used to have to say,


00:29:59.100 --> 00:30:01.820
use this thing pyenv for configuring


00:30:01.820 --> 00:30:05.300
what libraries you would use and how you execute it.


00:30:05.300 --> 00:30:06.480
That thing's gone.


00:30:06.480 --> 00:30:08.100
Now you've got a package section of


00:30:08.100 --> 00:30:10.980
a pyconfig and a path section for files.


00:30:10.980 --> 00:30:13.260
Bunch of other things, better logging,


00:30:13.260 --> 00:30:18.220
multiple runtimes, upgraded pyodied and whatnot.


00:30:18.220 --> 00:30:20.600
But check that out if you're doing PyScript.


00:30:20.600 --> 00:30:23.140
>> Nice. They're not even zero-very yet.


00:30:23.140 --> 00:30:24.140
>> Yeah.


00:30:24.140 --> 00:30:25.820
>> They're Cal-very.


00:30:25.820 --> 00:30:29.820
We're going to need some kind of like new calendar event or something.


00:30:29.820 --> 00:30:31.520
Yeah, because they're Calvary.


00:30:31.520 --> 00:30:32.220
Yeah, cool.


00:30:32.220 --> 00:30:33.220
All right, follow up.


00:30:33.220 --> 00:30:36.020
I talked about NextDNS last time.


00:30:36.020 --> 00:30:39.020
That's like basically like for people do pie holes.


00:30:39.020 --> 00:30:40.620
It's like pie hole, but it's on the internet.


00:30:40.620 --> 00:30:41.720
You don't have to manage it.


00:30:41.720 --> 00:30:45.320
I said I didn't really try it out that much last time.


00:30:45.320 --> 00:30:50.120
So I went in and I did an interesting experiment on the family, including myself.


00:30:50.120 --> 00:30:53.820
I went to the router and I just changed it to use this blocking,


00:30:53.820 --> 00:30:57.980
ad blocking, malware blocking, DNS as like for all the network,


00:30:57.980 --> 00:31:02.460
which is good because like my TV can no longer do bad things that it was doing.


00:31:02.460 --> 00:31:07.580
Uh, you know, my kid gets, ad blocking without knowing it, even visitors, I suppose.


00:31:07.580 --> 00:31:11.260
Right. And I was like, all right, well, let's see what breaks. Who goes, Michael,


00:31:11.260 --> 00:31:16.380
I can't do this anymore. Like nothing broke, which is great. So, I'm super psyched about that.


00:31:16.380 --> 00:31:21.100
And, if you create it, actually you can create a free, what I've learned is you get a free account


00:31:21.100 --> 00:31:25.260
for up to 300,000 DNS requirements a month.


00:31:25.260 --> 00:31:27.900
And if what happens after that is it just falls back to like


00:31:27.900 --> 00:31:30.460
standard DNS with no blocking, just pretty awesome.


00:31:30.460 --> 00:31:31.820
And there's like $2.


00:31:31.820 --> 00:31:32.860
There's not an ad for them.


00:31:32.860 --> 00:31:34.140
Just I think it's pretty awesome.


00:31:34.140 --> 00:31:39.260
So I went and ran, I went to adblock-tester.com


00:31:39.260 --> 00:31:39.900
Okay.


00:31:39.900 --> 00:31:43.260
With Vivaldi, with its max blocking, no plugins,


00:31:43.260 --> 00:31:46.460
no extensions for ad blocking, just the built-in one


00:31:46.460 --> 00:31:48.700
because I don't want to install more extensions.


00:31:48.700 --> 00:31:53.180
But with that turned on and the next DNS, private DNS,


00:31:53.180 --> 00:31:56.220
I get 96 out of 100 on AdBlockTester.


00:31:56.220 --> 00:31:58.740
With Brave, I got 100 out of 100, which is pretty awesome.


00:31:58.740 --> 00:32:02.740
But even if I turn all the blocking off on Vivaldi,


00:32:02.740 --> 00:32:05.780
I still get 80 out of 100 just using that DNS.


00:32:05.780 --> 00:32:06.780
That's pretty awesome, right?


00:32:06.780 --> 00:32:09.420
It's like 80% everything is just killed


00:32:09.420 --> 00:32:10.780
before it ever gets through the network.


00:32:10.780 --> 00:32:12.780
- I was curious what the number was.


00:32:12.780 --> 00:32:15.580
So it's not 80 get through, it's 80 get blocked?


00:32:15.580 --> 00:32:17.060
- It's 80 blocked.


00:32:17.060 --> 00:32:18.380
So you can actually scroll through it.


00:32:18.380 --> 00:32:22.460
I'll show you like, the, the wild cat Giphy wasn't blocked.


00:32:22.460 --> 00:32:25.500
The static image wasn't blocked basically, but you know, pretty much


00:32:25.500 --> 00:32:28.120
everything else, was, was blocked.


00:32:28.120 --> 00:32:29.060
So, okay.


00:32:29.060 --> 00:32:29.500
Yeah.


00:32:29.500 --> 00:32:30.100
Pretty awesome.


00:32:30.100 --> 00:32:30.540
Yeah.


00:32:30.540 --> 00:32:30.900
Yeah.


00:32:30.900 --> 00:32:35.060
And last thing here, one of the things you got to do to make this work, this


00:32:35.060 --> 00:32:38.220
is like a new extra, but it is like one flows into another, one of the things


00:32:38.220 --> 00:32:42.460
you got to do to make this work is if your IP address changes and you have a


00:32:42.460 --> 00:32:46.380
crap router, I have like an insanely good router that has crap configuration.


00:32:46.400 --> 00:32:49.100
let's put it that way, where I can't do,


00:32:49.100 --> 00:32:53.100
I can't do IP over, sorry, DNS over HTTPS,


00:32:53.100 --> 00:32:54.600
or set up any details.


00:32:54.600 --> 00:32:58.300
I can just say, here's the four numbers for the DNS server.


00:32:58.300 --> 00:32:58.660
>> Yeah.


00:32:58.660 --> 00:33:00.340
>> Right? Just the IP address.


00:33:00.340 --> 00:33:01.960
Well, if that's the way you do it,


00:33:01.960 --> 00:33:03.740
and you have some account that does blocking,


00:33:03.740 --> 00:33:06.980
you've got to go into your DNS account and


00:33:06.980 --> 00:33:09.240
associate your IP address with


00:33:09.240 --> 00:33:13.560
your account by just clicking a button or calling an API endpoint.


00:33:13.560 --> 00:33:15.540
But what do you do when your IP address changes?


00:33:15.540 --> 00:33:22.800
How do you remember like all your ad blocking stops every time, you know, maybe the power goes out and you got like your things come back on and they get a new IP address.


00:33:22.800 --> 00:33:28.140
So I was like, well, what can I do? I've always wanted to have like a little circuit Python project that would be fun.


00:33:28.140 --> 00:33:33.520
So originally I wanted to get a Raspberry Pi. Those are unattainable. It turns out. Have you tried to get a Raspberry Pi, Brian?


00:33:33.520 --> 00:33:36.140
Not recently, years ago, but...


00:33:36.140 --> 00:33:40.860
Yeah, I think they're like 35, 40 bucks for a new nice one, but they're all sold out.


00:33:40.860 --> 00:33:43.360
And you can find them on Amazon for like $200.


00:33:43.360 --> 00:33:46.320
People have bought them up and then are scalping them back to you on Amazon,


00:33:46.320 --> 00:33:47.820
which is super frustrating.


00:33:47.820 --> 00:33:48.620
Lame.


00:33:48.620 --> 00:33:52.500
You can find it for about $100 on eBay.


00:33:52.500 --> 00:33:53.800
Right? Anyway, they're hard to get.


00:33:53.800 --> 00:33:57.040
And then if you get them, they're way marked up and it's kind of frustrating.


00:33:57.040 --> 00:33:58.220
Well, what else could I use?


00:33:58.220 --> 00:33:59.300
So check this thing out.


00:33:59.300 --> 00:34:00.500
See what I got on the screen here?


00:34:00.500 --> 00:34:04.840
This Adafruit ESP32-S2 Feather


00:34:04.840 --> 00:34:09.680
is a full blown CircuitPython and Arduino, basically.


00:34:09.680 --> 00:34:12.180
for $17.50 and it's in stock.


00:34:12.180 --> 00:34:14.300
- Nice.


00:34:14.300 --> 00:34:15.980
- So I got that yesterday.


00:34:15.980 --> 00:34:17.320
And just to give you a sense of how small it is,


00:34:17.320 --> 00:34:19.120
like if you put it in your hand,


00:34:19.120 --> 00:34:21.380
it's probably 2/3 the size of your hand.


00:34:21.380 --> 00:34:24.660
And it's a full 240 megahertz computer,


00:34:24.660 --> 00:34:28.740
four megs of RAM, Wi-Fi, Bluetooth, temperature,


00:34:28.740 --> 00:34:32.900
but the most important thing is Wi-Fi, make no doubt.


00:34:32.900 --> 00:34:35.060
And I see Paul Cutler out there, yes, thank you Paul.


00:34:35.060 --> 00:34:36.500
I was actually thinking of you last night


00:34:36.500 --> 00:34:37.540
when I was working on this.


00:34:37.540 --> 00:34:38.820
It took a bit of time to set up


00:34:38.820 --> 00:34:41.620
it was a little bit painful getting it configured from,


00:34:41.620 --> 00:34:43.420
originally it was Arduino, which is C,


00:34:43.420 --> 00:34:45.580
so I was writing, I tried to do all this stuff in C,


00:34:45.580 --> 00:34:48.180
which basically, I had to call that endpoint


00:34:48.180 --> 00:34:50.380
and pull out my IP address, and everything seemed fine,


00:34:50.380 --> 00:34:54.100
except for nothing I could find supports HTTPS in C.


00:34:54.100 --> 00:34:56.400
It only, all the REST frameworks


00:34:56.400 --> 00:34:59.180
only supported HTTP unencrypted.


00:34:59.180 --> 00:35:01.300
I'm like, what endpoint is unencrypted these days?


00:35:01.300 --> 00:35:02.620
What is this madness?


00:35:02.620 --> 00:35:03.460
Give me some requests.


00:35:03.460 --> 00:35:05.700
So I got a CircuitPython going on it,


00:35:05.700 --> 00:35:08.500
and now it's happily sitting over there in the corner,


00:35:08.500 --> 00:35:10.600
sending me little reports through like,


00:35:10.600 --> 00:35:12.820
sort of like Morse code through its LED.


00:35:12.820 --> 00:35:14.100
And then, yeah, it's beautiful.


00:35:14.100 --> 00:35:16.780
I just plug it into the power and it just goes constantly,


00:35:16.780 --> 00:35:19.340
checks my IP address, updates that DNS setting


00:35:19.340 --> 00:35:20.920
periodically with an API.


00:35:20.920 --> 00:35:22.460
- Okay, so it's monitoring,


00:35:22.460 --> 00:35:26.500
and if your IP address changes, it uploads it?


00:35:26.500 --> 00:35:28.660
- Yeah, basically it just has to call the API


00:35:28.660 --> 00:35:30.620
from the network and that'll like go,


00:35:30.620 --> 00:35:31.540
well, wherever you're coming from,


00:35:31.540 --> 00:35:33.980
that's where we're gonna treat you as being from.


00:35:33.980 --> 00:35:34.860
- Okay, nice.


00:35:34.860 --> 00:35:36.460
- Yeah, you might say, well, why don't you just run


00:35:36.460 --> 00:35:37.900
that Python code on your computer?


00:35:37.900 --> 00:35:39.940
my computer is running a VPN,


00:35:39.940 --> 00:35:41.980
which is not the right IP address.


00:35:41.980 --> 00:35:44.580
So I can't, all my devices I can't run it on,


00:35:44.580 --> 00:35:46.040
and I don't wanna run a whole computer for it.


00:35:46.040 --> 00:35:49.940
So like this thing is incredibly small and cheap,


00:35:49.940 --> 00:35:51.260
and it was just a fun project, so.


00:35:51.260 --> 00:35:52.820
- Nice use of that, cool.


00:35:52.820 --> 00:35:54.880
- Yeah, yeah, so that was a lot of fun.


00:35:54.880 --> 00:35:57.340
A lot of learning, a lot of differences with CircuitPython,


00:35:57.340 --> 00:36:00.460
like similar, but then, wait, why doesn't that work?


00:36:00.460 --> 00:36:02.140
Like, oh, I wanna find out, you know,


00:36:02.140 --> 00:36:04.260
the relative path is, oh, there's no pathlib, sorry.


00:36:04.260 --> 00:36:05.620
Oh, well, let me try again.


00:36:05.620 --> 00:36:07.660
Let me find some other way to answer that question.


00:36:07.660 --> 00:36:09.300
>> Oh, yeah. >> It's still fine. Yeah. All right.


00:36:09.300 --> 00:36:10.440
Well, those are all my items.


00:36:10.440 --> 00:36:12.340
I know I had a bunch of extras, but there they are.


00:36:12.340 --> 00:36:14.260
>> That's all right. Do we have a joke?


00:36:14.260 --> 00:36:17.100
>> You know that we do. So following on,


00:36:17.100 --> 00:36:18.780
one of the things I had last night, I was like, "God,


00:36:18.780 --> 00:36:22.380
why can I get CircuitPython installed in this?"


00:36:22.380 --> 00:36:24.700
When it came out of the box from Adafruit,


00:36:24.700 --> 00:36:28.320
maybe I'm missing something, but it didn't show up as a drive.


00:36:28.320 --> 00:36:32.060
It only could be communicated with over the serial port.


00:36:32.060 --> 00:36:35.180
The way that you normally install CircuitPython is you


00:36:35.180 --> 00:36:39.740
drag this bootloader just over the drive and it just restarts and off it goes.


00:36:39.740 --> 00:36:41.300
I'm like, well, how do I get this on it?


00:36:41.300 --> 00:36:42.900
Wouldn't work, wouldn't work.


00:36:42.900 --> 00:36:45.540
I'm trying all these things and eventually I figured there's like


00:36:45.540 --> 00:36:48.300
a sequence of little clicks I got to do on


00:36:48.300 --> 00:36:51.180
like some of the buttons to put it into a mode then I could do it.


00:36:51.180 --> 00:36:55.060
I could use some help. So this woman Annie here,


00:36:55.060 --> 00:36:56.340
she's got it figured out.


00:36:56.340 --> 00:37:00.620
If I just went on to Stack Overflow or to Reddit or whatever and post that,


00:37:00.620 --> 00:37:01.660
people are just going to ignore it.


00:37:01.660 --> 00:37:02.940
They're going to go, "Whatever, newbie.


00:37:02.940 --> 00:37:04.820
He doesn't know what he's doing. Just go away."


00:37:04.820 --> 00:37:06.860
However, Annie has another idea.


00:37:06.860 --> 00:37:08.900
She says, "Every time I have a programming question


00:37:08.900 --> 00:37:11.020
and I really need help, I post it on Reddit,


00:37:11.020 --> 00:37:13.700
and then I log in with another account to reply to it


00:37:13.700 --> 00:37:15.700
with an obscenely incorrect answer.


00:37:15.700 --> 00:37:17.340
People don't care about helping each other,


00:37:17.340 --> 00:37:19.420
but they love correcting others.


00:37:19.420 --> 00:37:21.300
This works 100% of the time."


00:37:21.300 --> 00:37:23.020
[LAUGHTER]


00:37:23.020 --> 00:37:23.860
That's pretty funny.


00:37:23.860 --> 00:37:24.180
What do you think?


00:37:24.180 --> 00:37:24.940
Yeah, I like it.


00:37:24.940 --> 00:37:26.300
I bet it works too.


00:37:26.300 --> 00:37:26.900
Yeah.


00:37:26.900 --> 00:37:27.260
Right?


00:37:27.260 --> 00:37:28.980
If you went in there, what you need to do


00:37:28.980 --> 00:37:32.820
is just type rm-rf on forward slash.


00:37:32.820 --> 00:37:34.820
No, no, no, don't do that.


00:37:34.820 --> 00:37:37.820
Yeah, it's a different take on it.


00:37:37.820 --> 00:37:43.820
So I used to do a similar thing of just post a blog post with the wrong answer,


00:37:43.820 --> 00:37:47.820
or a bad tutorial, and leave comments on,


00:37:47.820 --> 00:37:51.820
and then let people tell me how much of an idiot I am,


00:37:51.820 --> 00:37:53.820
and then delete that and write the real post.


00:37:53.820 --> 00:37:57.820
Thank you. I incorporated your changes. I really appreciate it.


00:37:57.820 --> 00:37:59.820
I try to give people credit, of course.


00:37:59.820 --> 00:38:01.820
Of course. Awesome.


00:38:01.820 --> 00:38:02.220
Awesome.


00:38:02.220 --> 00:38:03.960
Well, here's a tip.


00:38:03.960 --> 00:38:06.980
If people need help, you just got to have that secondary Reddit account


00:38:06.980 --> 00:38:08.660
to get in there and stir the pot.


00:38:08.660 --> 00:38:09.600
Or a friend.


00:38:09.600 --> 00:38:11.420
So you ask a friend, that's right.


00:38:11.420 --> 00:38:13.340
Hey, could you just come answer this really?


00:38:13.340 --> 00:38:14.500
Like with this bad answer?


00:38:14.500 --> 00:38:16.760
Good idea.


00:38:16.760 --> 00:38:18.100
All right.


00:38:18.100 --> 00:38:20.260
Well, thanks again for a wonderful episode.


00:38:20.260 --> 00:38:20.860
You bet.


00:38:20.860 --> 00:38:21.500
Lots of fun.


00:38:21.500 --> 00:38:22.180
Thanks for being here.


00:38:22.180 --> 00:38:23.100
See you later, everyone.


00:38:23.100 --> 00:38:23.620
Bye.

