
00:00:00.000 --> 00:00:04.160
This is Python Bytes, Python headlines and news delivered directly to your earbuds.


00:00:04.160 --> 00:00:07.280
It's episode 6, recorded Monday, December 12th.


00:00:07.280 --> 00:00:09.400
This episode is brought to you by Rollbar.


00:00:09.400 --> 00:00:11.040
They help take the pain out of errors.


00:00:11.040 --> 00:00:13.360
Thank you so much Rollbar for sponsoring the show.


00:00:13.360 --> 00:00:15.160
And this is Michael Kennedy, one of your hosts.


00:00:15.160 --> 00:00:17.880
I'm here with Brian Okken, my co-host.


00:00:17.880 --> 00:00:19.280
Hello, Brian. How's it going, man?


00:00:19.280 --> 00:00:20.600
Hello. It's going really good.


00:00:20.600 --> 00:00:24.320
Good, good. This year has gone by quickly, hasn't it?


00:00:24.320 --> 00:00:26.240
It's gone super fast.


00:00:26.240 --> 00:00:29.800
Yeah, I feel like everyone was fixated on the election


00:00:29.800 --> 00:00:34.240
because it was so unique and then kind of nobody knows what to do with the rest of the year.


00:00:34.240 --> 00:00:35.880
So I'm going to go on vacation.


00:00:35.880 --> 00:00:36.320
How about you?


00:00:36.320 --> 00:00:39.040
I'm going to start writing.


00:00:39.040 --> 00:00:41.680
So yeah, you got a book to finish, man.


00:00:41.680 --> 00:00:42.400
Anyway.


00:00:42.400 --> 00:00:45.640
So the point is, this is actually our last episode of the year.


00:00:45.640 --> 00:00:51.680
So I want to say thanks to everybody who subscribed and listened and shared this, this podcast with their friends.


00:00:51.680 --> 00:00:56.280
We're taking a break and we will be back first thing in January.


00:00:56.280 --> 00:00:56.840
First week.


00:00:56.840 --> 00:00:58.920
We'll have even more news to share, won't we?


00:00:58.920 --> 00:00:59.520
Yeah.


00:00:59.520 --> 00:01:02.520
that'll be like three weeks of stuff to catch up on.


00:01:02.520 --> 00:01:04.520
Yeah, hopefully no drama.


00:01:04.520 --> 00:01:07.520
Okay, so what's the first item you want to share with everyone?


00:01:07.520 --> 00:01:08.520
What did you find?


00:01:08.520 --> 00:01:10.520
Well, there's an article by Dan Bader,


00:01:10.520 --> 00:01:14.520
"Make your Python code more readable with custom exception classes."


00:01:14.520 --> 00:01:15.520
This is great.


00:01:15.520 --> 00:01:19.520
He wrote up a little tutorial along with a five-minute video


00:01:19.520 --> 00:01:21.520
where he walks through stuff.


00:01:21.520 --> 00:01:24.520
He talks about including your own exception classes


00:01:24.520 --> 00:01:27.520
can make your errors more readable within your code


00:01:27.520 --> 00:01:32.320
and also communicate to the users of your functions or whatever your intent


00:01:32.320 --> 00:01:36.480
and what the errors are and also you can add more context. I like it because it's


00:01:36.480 --> 00:01:40.760
one of those things that I was afraid to add custom exceptions and it's really


00:01:40.760 --> 00:01:45.600
just pretty darn easy. The main points I think is to remember to derive from


00:01:45.600 --> 00:01:49.240
either exception or one of the other built-in Python exceptions. Like value


00:01:49.240 --> 00:01:54.520
error or something like that right? Yeah whatever sort of makes sense and and


00:01:54.520 --> 00:01:59.640
it's a good one. I also wanted to add that if you are, there's extra things you


00:01:59.640 --> 00:02:04.640
should do if you're releasing a package and or even within your


00:02:04.640 --> 00:02:09.460
company. I think it's good to derive from your own, create a custom exception and


00:02:09.460 --> 00:02:13.280
then derive all your other exceptions from that one. And I got that tip from


00:02:13.280 --> 00:02:17.960
another article that we'll link to in the show notes by Julian D'Anju.


00:02:17.960 --> 00:02:22.040
Yeah, yeah, yeah. That's a really great point actually because it would be great to do


00:02:22.040 --> 00:02:26.660
try accept all the errors from this package like whatever is happening in


00:02:26.660 --> 00:02:31.420
here I want to start by handling those and maybe get more specific ones maybe


00:02:31.420 --> 00:02:36.620
not but yeah I hadn't really thought about that the make your own special


00:02:36.620 --> 00:02:42.420
base exception even the reverse try to do specific first and then and then do a


00:02:42.420 --> 00:02:47.180
catch all of those and then that if it isn't one of your package ones then you


00:02:47.180 --> 00:02:49.980
can also still catch the general exception and do something different


00:02:49.980 --> 00:02:52.820
there. Yeah, that's cool. There's two, there's a couple things about this


00:02:52.820 --> 00:02:56.840
article I like. One, Dan Bader's doing a bunch of cool videos on YouTube. He


00:02:56.840 --> 00:03:00.160
really seems to be putting a lot of effort to frequently get those out. And


00:03:00.160 --> 00:03:03.600
so here's an article that takes like five minutes to read, but there's also a


00:03:03.600 --> 00:03:07.520
five-minute video screencast to go along with it. So well done on that, Dan. And


00:03:07.520 --> 00:03:13.440
then more generally, this idea here makes it easier for one of my favorite


00:03:13.440 --> 00:03:18.000
programming patterns, which is also quite Pythonic, is in that it's, the pattern is


00:03:18.000 --> 00:03:23.280
it's easier to ask for forgiveness than permission. As opposed to like the C++


00:03:23.280 --> 00:03:26.000
style look before you leap programming model where you test the heck out of


00:03:26.000 --> 00:03:29.280
everything and then you try a thing you just here you just do it if it throws an


00:03:29.280 --> 00:03:33.720
exception you know you catch it and then accept block and it's all good. Yeah


00:03:33.720 --> 00:03:38.960
definitely like a high level like for instance if I were as an example if I


00:03:38.960 --> 00:03:43.320
were using requests I could have a special handler that dealt with


00:03:43.320 --> 00:03:47.720
exceptions from requests and know that that I because I understand what part of


00:03:47.720 --> 00:03:51.480
systems dealing with that, I could handle it in one place.


00:03:51.480 --> 00:03:52.480
Right, absolutely.


00:03:52.480 --> 00:03:53.480
Yeah.


00:03:53.480 --> 00:03:57.720
Could not contact server, the web server seems to be down something like this, right?


00:03:57.720 --> 00:03:58.720
Beautiful.


00:03:58.720 --> 00:04:03.920
Wouldn't it be awesome if artificial intelligence could just sit there and just help you code?


00:04:03.920 --> 00:04:09.680
I mean, we all know of AI for Siri and silly things like that, but I feel like actually


00:04:09.680 --> 00:04:15.800
2016 is a little bit where the future kind of intersected with now.


00:04:15.800 --> 00:04:16.800
The future came to us.


00:04:16.800 --> 00:04:19.200
There are so many things with AI that are really awesome.


00:04:19.200 --> 00:04:24.040
Like there was several AIs that actually on their own invented encryption.


00:04:24.040 --> 00:04:26.600
But what I want is an AI to help me as a developer.


00:04:26.600 --> 00:04:27.600
How about you?


00:04:27.600 --> 00:04:28.600
Sounds great.


00:04:28.600 --> 00:04:29.600
Yeah, that'd be super cool.


00:04:29.600 --> 00:04:32.140
So, so I actually ran across this thing.


00:04:32.140 --> 00:04:36.680
One of the listeners, Gilberto Diaz, was nice enough to send me a link and an email say,


00:04:36.680 --> 00:04:39.720
hey, there's this thing that is so cool, you must check it out.


00:04:39.720 --> 00:04:44.880
It's not technically built in Python, but it really supports Python developers in a


00:04:44.880 --> 00:04:45.880
crazy good way.


00:04:45.880 --> 00:04:47.980
There's this thing called Kite at kite.com,


00:04:47.980 --> 00:04:49.540
and it's in private beta.


00:04:49.540 --> 00:04:51.820
We were lucky enough to get some early access to it.


00:04:51.820 --> 00:04:54.340
And what it is, is you install it in your OS,


00:04:54.340 --> 00:04:56.740
and it sits in kind of like a sidebar.


00:04:56.740 --> 00:04:59.020
It takes up maybe like, I don't know, a fifth of your screen.


00:04:59.020 --> 00:05:01.740
If you have two screens, then stick it on the other one.


00:05:01.740 --> 00:05:03.760
And it watches what you do


00:05:03.760 --> 00:05:06.700
in all sorts of different programming environments,


00:05:06.700 --> 00:05:10.460
in Sublime Text, in Visual Studio Code, in PyCharm,


00:05:10.460 --> 00:05:13.260
even Vim or Emacs, there's many, many plugins.


00:05:13.260 --> 00:05:16.340
as you type, it helps you.


00:05:16.340 --> 00:05:19.500
All right, so if you're writing Python code


00:05:19.500 --> 00:05:21.740
and you type import space,


00:05:21.740 --> 00:05:23.980
it'll show you the list of the most popular packages.


00:05:23.980 --> 00:05:25.900
If you type R, it'll show you the list


00:05:25.900 --> 00:05:27.920
of the most popular packages that start with R,


00:05:27.920 --> 00:05:29.340
like request right at the top.


00:05:29.340 --> 00:05:31.500
Yeah, and then once you import a thing,


00:05:31.500 --> 00:05:33.300
it'll start showing you documentation about it.


00:05:33.300 --> 00:05:34.680
Here's some examples on how to use


00:05:34.680 --> 00:05:36.060
that thing you just imported.


00:05:36.060 --> 00:05:37.940
As you start to like, you know, interact with it,


00:05:37.940 --> 00:05:39.140
like request dot, it'll say,


00:05:39.140 --> 00:05:41.380
well, the most commonly called function here is get.


00:05:41.380 --> 00:05:45.480
You want to see some examples how to use request.get or like the documentation.


00:05:45.480 --> 00:05:50.600
And it just, it just really is quite cool how much it knows.


00:05:50.600 --> 00:05:52.980
And you know, it does auto completion.


00:05:52.980 --> 00:05:56.540
Like many editors do, it'll it'll like show you on the left, like, here's the things you


00:05:56.540 --> 00:05:57.540
can complete.


00:05:57.540 --> 00:06:02.300
But what I like about it is it uses like crowdsourcing for popularity.


00:06:02.300 --> 00:06:06.140
So there's like, you know, 10,000 developers working on this.


00:06:06.140 --> 00:06:11.300
And you'll say, well, this is the most popular completion in this situation here.


00:06:11.300 --> 00:06:14.980
just alphabetical or something. So I think it's cool. There's a great video you have


00:06:14.980 --> 00:06:18.780
to watch if you go check this out at kite.com. It's like right there on the homepage.


00:06:18.780 --> 00:06:25.380
I'm looking forward to playing with it. Yeah, you'd mentioned it seems like AI pair programming


00:06:25.380 --> 00:06:27.740
and does sure sound like that.


00:06:27.740 --> 00:06:31.860
It's quite interesting. I feel like it's more like an artificial intelligence mentor rather


00:06:31.860 --> 00:06:35.860
than paired programmer. Like it's going, "Oh, by the way, did you know that you actually


00:06:35.860 --> 00:06:38.960
can call this function? Oh, that package is really cool because it has this thing you


00:06:38.960 --> 00:06:43.040
might not know about it's kind of like the wiser version rather than like


00:06:43.040 --> 00:06:45.440
you know pair programming but I think it's great.


00:06:45.440 --> 00:06:50.000
I'm definitely looking forward to trying that. Yeah for sure. I hate it when my data gets


00:06:50.000 --> 00:06:56.240
messy. Yeah definitely. So there's an article by I'm gonna even try this


00:06:56.240 --> 00:07:01.560
Jean-Nicolas Hold I think, "Tidy Data in Python". This article is pretty


00:07:01.560 --> 00:07:05.840
interesting it caught my attention because I often have data that's in a


00:07:05.840 --> 00:07:10.040
format that I can't use right away and I need to transform it into something else.


00:07:10.040 --> 00:07:15.680
And I didn't ever think of it like changing tables around and completely


00:07:15.680 --> 00:07:20.160
changing things automatically. Anyway this article gives some some attributes


00:07:20.160 --> 00:07:25.320
of what problems to look at in datasets. He based it on a paper named "Tidy Data"


00:07:25.320 --> 00:07:32.860
by Hadley Wickham. He takes the idea of the paper and then transfers it to into


00:07:32.860 --> 00:07:36.860
Python and how to utilize it in Python with the pandas library.


00:07:36.860 --> 00:07:44.380
And like so this seems very abstract right now but he has some examples of data that's


00:07:44.380 --> 00:07:49.420
that's really data is in the column headers. He has some attributes to look for like each


00:07:49.420 --> 00:07:57.180
variable forms a column and contains a value and each observation forms a row and the type


00:07:57.180 --> 00:08:03.200
of observation units form a table. And it still sounds kind of complex or kind of


00:08:03.200 --> 00:08:07.440
abstract but the examples really are pretty easy to follow and it's just a


00:08:07.440 --> 00:08:12.780
neat idea of taking a look at your data and making it more useful. I had never


00:08:12.780 --> 00:08:17.280
really thought about data in this sense but it seems to me like this talks about


00:08:17.280 --> 00:08:21.420
how you put your data together so that you'll be it's most natural to take


00:08:21.420 --> 00:08:27.300
advantage of it with things like pandas and the various data science tools and


00:08:27.300 --> 00:08:31.520
all sorts of languages but he's focused on Python which is extra cool.


00:08:31.520 --> 00:08:35.600
And so he's had several examples on on you know do things this way not that way


00:08:35.600 --> 00:08:39.560
and your life will be much easier and I just never thought of systemizing that I


00:08:39.560 --> 00:08:40.560
guess.


00:08:40.560 --> 00:08:45.420
Yeah, I also I'm looking at the different comparison of before and after tables.


00:08:45.420 --> 00:08:49.320
You can definitely see how it's definitely the the converted table is


00:08:49.320 --> 00:08:57.580
easier programmatically, but the FROM table, the dirty one, is more broken up like how


00:08:57.580 --> 00:08:59.040
people look at stuff.


00:08:59.040 --> 00:09:05.720
I didn't think there would be a difference, but it does appear to be it's easier to visualize


00:09:05.720 --> 00:09:10.320
smaller tables as people, but as computers we need things a little bit more broken down.


00:09:10.320 --> 00:09:11.320
Yeah, it's cool.


00:09:11.320 --> 00:09:15.040
So if you've got a lot of data, especially in tabular form, check that out.


00:09:15.040 --> 00:09:16.040
We're going on break.


00:09:16.040 --> 00:09:21.920
I'm actually heading out on vacation somewhere away from home and I'm still taking my laptop


00:09:21.920 --> 00:09:23.760
with me because that would be kind of insane.


00:09:23.760 --> 00:09:28.680
But our sponsor, Rollbar, they were going to let me just chill out and not worry about


00:09:28.680 --> 00:09:31.640
whether the web app is working and not check it all the time.


00:09:31.640 --> 00:09:37.080
I might not use my computer for a few days unless I get notifications on my phone or


00:09:37.080 --> 00:09:40.400
text messages or Slack or something like that saying, "Hey, your website's down.


00:09:40.400 --> 00:09:41.400
There's this problem."


00:09:41.400 --> 00:09:42.480
Things are going to be good.


00:09:42.480 --> 00:09:43.560
I'm not going to worry about it.


00:09:43.560 --> 00:09:47.000
That's because I got Rollbar integrated with all the Talk Python stuff, which is really


00:09:47.000 --> 00:09:48.000
cool.


00:09:48.000 --> 00:09:52.160
If there's a problem, I can just read what the error is and probably fix it pretty easily.


00:09:52.160 --> 00:09:54.560
All the Python Byte listeners, they can have the same peace of mind.


00:09:54.560 --> 00:09:58.360
They just have to go to rollbar.com/pythonbytes and sign up for the free tier.


00:09:58.360 --> 00:09:59.360
Sounds cool, huh?


00:09:59.360 --> 00:10:00.360
Sounds very good.


00:10:00.360 --> 00:10:01.360
Yeah.


00:10:01.360 --> 00:10:04.760
It's good to be on vacation and not worry about things working.


00:10:04.760 --> 00:10:08.320
Just set up the error notifications and you're all good.


00:10:08.320 --> 00:10:12.120
I'm really excited that there's a new version of Python.


00:10:12.120 --> 00:10:15.740
I think people are starting to move on from legacy Python and there's just, end of this


00:10:15.740 --> 00:10:18.900
week there's going to be one more reason to do so.


00:10:18.900 --> 00:10:23.940
We actually have as our next item a video, a conference presentation at PyCon Canada


00:10:23.940 --> 00:10:26.260
2016 by Brett Cannon.


00:10:26.260 --> 00:10:30.700
He did a talk called "What's New in Python 3?"


00:10:30.700 --> 00:10:32.340
I think it's interesting.


00:10:32.340 --> 00:10:35.660
You look at all the peps and all the stuff that's coming and you think, "Well, okay,


00:10:35.660 --> 00:10:36.740
they're doing little tweaks here.


00:10:36.740 --> 00:10:38.720
I guess it has new string formatting, whatever."


00:10:38.720 --> 00:10:42.920
It turns out there are over 16 peps in Python 3.6.


00:10:42.920 --> 00:10:47.840
And that's more than any peps that have been in Python 3, other than the actual creation


00:10:47.840 --> 00:10:49.680
of Python 3.0 itself.


00:10:49.680 --> 00:10:50.920
That's pretty cool, right?


00:10:50.920 --> 00:10:56.280
Maybe we should have had another role before now then, but I'm excited for all these.


00:10:56.280 --> 00:10:57.520
Yeah, it's gonna be great.


00:10:57.520 --> 00:10:58.620
It's gonna be great.


00:10:58.620 --> 00:11:03.440
The reason I like this video and I want to point it out is we could all go to, you know,


00:11:03.440 --> 00:11:06.960
what's new in Python 3, and we can read the list like, okay, well, here dictionaries will


00:11:06.960 --> 00:11:08.280
be ordered.


00:11:08.280 --> 00:11:12.960
now a private identifier or a conversioning number on dictionaries like, "Okay, whatever,


00:11:12.960 --> 00:11:13.960
who cares?"


00:11:13.960 --> 00:11:18.040
This gives you the story behind all the changes coming to Python 3.6.


00:11:18.040 --> 00:11:23.200
Why did the core developers of which Brett is one think that this is a good idea?


00:11:23.200 --> 00:11:25.040
How does it help?


00:11:25.040 --> 00:11:30.240
What problem are they really trying to solve deep down when they made this change?


00:11:30.240 --> 00:11:34.640
It really is a cool look inside what's coming with Python 3.6.


00:11:34.640 --> 00:11:35.640
That sounds great.


00:11:35.640 --> 00:11:37.280
I think it's good.


00:11:37.280 --> 00:11:40.840
Python 3.6 release candidate is available right now if you want to download it, but


00:11:40.840 --> 00:11:45.440
you know if you can wait like five days you should have the final version of Python 3.6.


00:11:45.440 --> 00:11:47.440
They did something with virtual environments, right?


00:11:47.440 --> 00:11:51.280
Yeah, this is one of the things I stumbled across.


00:11:51.280 --> 00:11:53.520
I think it was in a Reddit line somewhere.


00:11:53.520 --> 00:11:59.520
The command line command of pyvenv, which I can't remember which version that came in


00:11:59.520 --> 00:12:03.480
on one of the 3.0s, that's being deprecated.


00:12:03.480 --> 00:12:12.440
the reason and they want people to use the -mvenv instead and that's so that you specifically tell


00:12:12.440 --> 00:12:18.920
the virtual environment system which python to use and it makes the programmer know need to know


00:12:18.920 --> 00:12:23.720
how to get to python first before they create a virtual environment. I think that it totally makes


00:12:23.720 --> 00:12:28.760
sense it's just something to point out. I think it's important it i'm going to have to actually


00:12:28.760 --> 00:12:35.160
edit my book because of this because I think I recommended PyV and V in mine.


00:12:35.160 --> 00:12:36.160
Time to un-recommend it.


00:12:36.160 --> 00:12:37.160
Yeah.


00:12:37.160 --> 00:12:38.160
That's cool.


00:12:38.160 --> 00:12:39.160
No, I do think it is good.


00:12:39.160 --> 00:12:43.220
I mean, you can say Python 3 --version, you'll see what that is.


00:12:43.220 --> 00:12:47.120
And then you can say Python 3 --V and V and then that's the thing you're going to get,


00:12:47.120 --> 00:12:48.120
right?


00:12:48.120 --> 00:12:49.120
So it is a little more clear, I guess.


00:12:49.120 --> 00:12:50.120
Very cool.


00:12:50.120 --> 00:12:51.120
Yeah.


00:12:51.120 --> 00:12:54.720
It wouldn't be a week in Python without some form of testing or code coverage, right?


00:12:54.720 --> 00:12:55.720
Yeah, definitely.


00:12:55.720 --> 00:13:01.960
And Ned Batchelder, who we all owe some gratitude for, for coming up with, or for taking over


00:13:01.960 --> 00:13:03.840
the coverage package.


00:13:03.840 --> 00:13:08.720
He's, I interviewed him about that on episode 12 of Testing Code.


00:13:08.720 --> 00:13:16.040
But he's planning a new feature for coverage.py, which will tell us which, so when you run


00:13:16.040 --> 00:13:22.340
a coverage report, also what functions caused this, or how did you get this stuff covered.


00:13:22.340 --> 00:13:30.820
He covers it in an article. He taught he titled who tests what this is a discussion about kind of how I like the discussion


00:13:30.820 --> 00:13:38.140
Because those those people new to coverage can kind of peek inside and see you the different stages of how coverage works


00:13:38.140 --> 00:13:44.760
It goes through measurement and storing the data and then combining the data and reporting because you can't have multiple tests


00:13:44.760 --> 00:13:49.340
most multiple runs and combine them into it to one report this idea of


00:13:49.820 --> 00:13:54.820
Trying to figure out which code was covered by which tests is how it started


00:13:54.820 --> 00:14:01.600
but he comes up with some some reasons why there may be more more uses than just in testing and


00:14:01.600 --> 00:14:03.900
It's it's a good discussion


00:14:03.900 --> 00:14:09.140
But part of one of the things he why he wrote this article is is to try to get some help


00:14:09.140 --> 00:14:10.140
He wants some feedback


00:14:10.140 --> 00:14:11.940
so some of the questions are


00:14:11.940 --> 00:14:18.420
He discusses the memory memory usage and in the data model and he wants to know if there's something we need more


00:14:19.260 --> 00:14:26.500
sophisticated problem solving on this or should we be more conservative with memory and then the output the output right now is


00:14:26.500 --> 00:14:32.540
Intended to be in JSON, but he wants to know if somebody could use a different data format. I like the direction


00:14:32.540 --> 00:14:33.220
He's going with it


00:14:33.220 --> 00:14:35.220
And I think I'll use it and I encourage


00:14:35.220 --> 00:14:41.340
Anybody that has sort of a non-standard usage of coverage to take a look at this article and give Ned some feedback


00:14:41.340 --> 00:14:48.500
Yeah, I really like it as well because a lot of times unless you're actually a contributor to the project already feel like


00:14:49.140 --> 00:14:52.540
the fate of the thing is already determined but this was much more like


00:14:52.540 --> 00:14:54.540
look we have this challenging problem


00:14:54.540 --> 00:14:57.040
these are the ways and the trade-offs we're


00:14:57.040 --> 00:15:00.540
thinking about the ways we're thinking about solving the trade-offs we're contemplating


00:15:00.540 --> 00:15:02.540
we're not sure where to go if you want to help


00:15:02.540 --> 00:15:06.540
here's how to help if you want to give us feedback before we jump in and go the wrong direction


00:15:06.540 --> 00:15:09.540
do it so this is a really cool article just


00:15:09.540 --> 00:15:10.540
on philosophy as well


00:15:10.540 --> 00:15:11.940
yeah I think it's great


00:15:11.940 --> 00:15:14.140
and being able to know which tests actually


00:15:14.140 --> 00:15:17.040
triggered the covered line when you run a thousand tests


00:15:17.040 --> 00:15:19.040
well, what's these three? Like, that's pretty interesting.


00:15:19.040 --> 00:15:22.960
Yeah, and you know, before I talked to him, I didn't realize that there was, there


00:15:22.960 --> 00:15:25.920
were so many features of coverage that I didn't realize, like, being able to have


00:15:25.920 --> 00:15:30.600
multiple test runs and combine that data and HTML output and things like that.


00:15:30.600 --> 00:15:34.360
It's pretty cool. Yeah, yeah, quite cool, quite cool. So what do you got for us, Michael?


00:15:34.360 --> 00:15:40.040
Alright, I've got one, one final glorious topic for the rest of the year to round


00:15:40.040 --> 00:15:45.160
out 2016. So here it is, threaded asynchronous magic and how to wield it.


00:15:45.160 --> 00:15:49.600
So this is a really cool article by Christian Medina.


00:15:49.600 --> 00:15:54.040
You know, we had talked about the, I don't remember exactly the title, but that async.io


00:15:54.040 --> 00:15:59.440
tutorial that was like the G event tutorial remade for async.io and Python 3.4.


00:15:59.440 --> 00:16:02.960
And we're like, "Oh, wouldn't it be cool if there's a great one on async and await?"


00:16:02.960 --> 00:16:08.760
Like the really, the truly new cool features of Python for threading and parallelism.


00:16:08.760 --> 00:16:11.560
Well, Christian Medina wrote it.


00:16:11.560 --> 00:16:15.720
He wrote a really nice one and it has a bunch of bite-sized examples.


00:16:15.720 --> 00:16:20.820
You can, you know, they're not too large, but they don't seem entirely fake.


00:16:20.820 --> 00:16:25.920
So he has one example of like sending email notifications sort of asynchronously, but


00:16:25.920 --> 00:16:30.400
it's like, you know, but you realize there's no awaitable asynchronous like way to send


00:16:30.400 --> 00:16:31.480
mail in Python.


00:16:31.480 --> 00:16:36.080
So well, we're just going to block, but at least we can use this async IO loop for that.


00:16:36.080 --> 00:16:37.080
That's cool.


00:16:37.080 --> 00:16:43.280
talked about the AIO HTTP library, which is an HTTP client server for async IO,


00:16:43.280 --> 00:16:47.440
and how to do a bunch of parallel web requests. So we often think about


00:16:47.440 --> 00:16:53.120
requests being the primary way that we do programming against web services and


00:16:53.120 --> 00:16:57.720
generally HTTP, but this is another option that's really simple that fits


00:16:57.720 --> 00:17:02.640
exactly into the async IO so you can easily block on the network calls which


00:17:02.640 --> 00:17:05.400
will then free up the thread to go do other stuff because it knows it's


00:17:05.400 --> 00:17:08.800
waiting on the network. That sounds cool. Yeah, it's really cool. It covers things


00:17:08.800 --> 00:17:13.000
like tasks, scheduling tasks, scatter/gather styles of programming, and


00:17:13.000 --> 00:17:17.640
then even moving the async I/O loop to a background thread so you don't block up


00:17:17.640 --> 00:17:20.760
your main thread, but you kind of have a place to put all the asynchronous work


00:17:20.760 --> 00:17:25.400
and let it run on that other one thread, which is pretty cool. So yeah, so thanks


00:17:25.400 --> 00:17:30.200
Christian for doing that. Got to meet him at PyCon last year and so that was


00:17:30.200 --> 00:17:34.400
fun and hopefully everyone else is going to PyCon. If you don't have your tickets


00:17:34.400 --> 00:17:36.400
yet. You need to be getting it, right, Brian?


00:17:36.400 --> 00:17:38.400
Definitely. I missed out last year.


00:17:38.400 --> 00:17:40.040
So don't be sad.


00:17:40.040 --> 00:17:43.680
Get tickets before they sell out because this I'm sure it will sell out.


00:17:43.680 --> 00:17:44.920
It sold out early last year.


00:17:44.920 --> 00:17:47.240
And plus it's in Portland and Portland rocks.


00:17:47.240 --> 00:17:48.560
Portland definitely rocks.


00:17:48.560 --> 00:17:49.560
It's going to be weird.


00:17:49.560 --> 00:17:50.840
They're going to be keeping it weird.


00:17:50.840 --> 00:17:52.840
All right.


00:17:52.840 --> 00:17:54.440
Well, that's it for me.


00:17:54.440 --> 00:17:56.920
I don't really have a whole lot of news to share other than just saying thanks to


00:17:56.920 --> 00:18:00.200
everyone for listening, you know, for our new podcast.


00:18:00.200 --> 00:18:03.120
It's been fun to do for you and I appreciate all the feedback.


00:18:03.120 --> 00:18:04.200
I appreciate it too.


00:18:04.200 --> 00:18:08.500
Speaking of feedback, we did get one person. I think it's Harry J


00:18:08.500 --> 00:18:13.480
I hope I didn't pronounce that wrong on Twitter said that he listened to episode 3 and


00:18:13.480 --> 00:18:19.240
I had mentioned that a library called Pionini that don't know if I'm pronouncing that right, but I


00:18:19.240 --> 00:18:26.760
Assumed that these were that maybe it was named after the Knights who say knee we thought that would be fun. Anyway, yeah


00:18:26.760 --> 00:18:28.000
Yeah, definitely


00:18:28.000 --> 00:18:29.680
but Harry J


00:18:29.680 --> 00:18:36.780
Tells me that this is not true. It's named after a Sanskrit grammarian with a PA. I don't know how to pronounce that either


00:18:36.780 --> 00:18:44.660
It's PA and I and I anyway, thanks. I like fact-checking. That's great to have fact checkers. I'll see. I'm still gonna call it piney


00:18:44.660 --> 00:18:48.040
knee knee knee


00:18:48.040 --> 00:18:54.580
Just know it has a different origin. Okay. Well, thank you Brian. Thank you everyone for listening


00:18:54.580 --> 00:18:58.940
Thank you roll bar for sponsoring the show. We will see you all in January until then, you know


00:18:58.940 --> 00:19:03.260
Enjoy the winter wonderland, unless you're down in Australia, then have a nice summer.


00:19:03.260 --> 00:19:05.140
Yeah, definitely. See you next year.


00:19:05.140 --> 00:19:06.380
Yeah, see you next year. Bye everyone.


00:19:06.380 --> 00:19:06.780
Bye.


00:19:06.780 --> 00:19:32.860
Bye.

