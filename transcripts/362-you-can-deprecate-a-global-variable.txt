00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 362, recorded November 28th, 2023.

00:00:10 I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 And this episode is brought to you by Scout APM.

00:00:16 We will tell you more about them later, but please check out what they're offering.

00:00:19 It really helps support the show.

00:00:20 And if you want to connect with us on the socials, the place we're all hanging out at is Mastodon, fosstodon.org specifically.

00:00:28 I'm Adam Kennedy.

00:00:30 Brian is at Brian Okken.

00:00:31 And the show is at Python Bytes.

00:00:33 fosstodon.org is invite only.

00:00:35 Of course, you can follow us from any place on Mastodon.

00:00:37 But if you want to be part of it, just shoot one of us a message.

00:00:41 We can send you an invite.

00:00:42 Help you get over there to hang out a little bit closer to home for us.

00:00:45 And finally, if you want to be part of the live stream and see how the show is made, see what we're doing, even the real mistakes that we might edit out.

00:00:53 Check that out at pythonbytes.fm/live.

00:00:56 Usually Tuesdays at 11 p.m.

00:00:58 And older videos are there as well.

00:00:59 Let's kick it off.

00:01:00 What do you got?

00:01:01 This is a gentle ease back into the show.

00:01:05 Over the Thanksgiving break, I was thinking a lot about kind of what I wanted to do for the next year.

00:01:11 Starting to think about plans for how to, where do I want to focus my time?

00:01:16 And I ran across this great post by Vadim, let's just say Vadim, Habits of Great Software Engineers.

00:01:26 And it's kind of, there's a lot of great stuff here.

00:01:32 So also, nice index on the right, which is cool.

00:01:35 So focusing beyond the code.

00:01:38 So I'm not going to go through all these.

00:01:40 I'm going to go through, there's like 12 or 13 listed, but I'll go through a few of them.

00:01:45 Focus on the code.

00:01:46 So I don't know if I buy this, but he says, as a developer, you will code 20% of your time.

00:01:51 You should excel at coding nonetheless, but it won't be enough to be great.

00:01:56 I think I code more than 20% of the time.

00:01:58 I would say too.

00:01:59 Well, define code, right?

00:02:00 Okay.

00:02:01 So is coding, is that reading code?

00:02:04 Is that thinking about code?

00:02:05 Is that...

00:02:06 Oh, the design part.

00:02:07 Right.

00:02:08 Or is it actually, I'm hitting keys on keyboard.

00:02:11 You know what I mean?

00:02:11 Yeah, that's true.

00:02:12 Right.

00:02:13 Because people say you code as read way more than it's written and stuff.

00:02:16 But I think for me, coding is like the act of being in the code and adding features or evolving it,

00:02:23 even if like I'm not keystroking it at that moment.

00:02:25 So unclear, but if that encompasses all, then 20% is way too low.

00:02:30 Agreed.

00:02:31 Okay.

00:02:31 Well, I guess the point of this, regardless of the percentage, is focusing on the other parts of your job also.

00:02:38 And focusing on, you know, not just being a better software engineer, but also...

00:02:43 Well, being a better software engineer encompasses more than just coding well and knowing Python details and things like that.

00:02:50 Like communication skills and all that.

00:02:52 Design skills, learning other...

00:02:54 Learning to read other people's code, things like that.

00:02:56 Helping unblock your teammates who are having a challenge.

00:02:59 Instead of writing code yourself, like I'm going to help them get that problem fixed or something, right?

00:03:03 Like...

00:03:04 Yeah.

00:03:04 Yep.

00:03:05 All those things.

00:03:05 Well, and...

00:03:06 Okay.

00:03:06 So number two was efficiency and anti-fragility.

00:03:11 I'm not really a fan of the anti-fragile word.

00:03:14 I don't even really know what it means, but I guess...

00:03:16 I think it originally comes from Nassim Taleb and that whole philosophy, although I haven't read a whole lot of that either.

00:03:23 Anyway.

00:03:23 It's kind of about things that get better the more they kind of get abused, right?

00:03:29 Like they sort of build up a resilience.

00:03:31 Well...

00:03:32 I think it originally comes out of economics.

00:03:34 Okay.

00:03:35 Well, the next one is one I really agree with is the joy...

00:03:39 Number three is the joy of tinkering.

00:03:41 Build projects, try out frameworks, build stuff on the side.

00:03:44 Keeps the spark alive.

00:03:46 And this is one I couldn't agree more.

00:03:49 It doesn't...

00:03:51 I...

00:03:51 For a while, I was often thinking about, like, what could I build that I could actually release or that I'd be proud of?

00:03:58 That's great.

00:03:59 You could try to at least do a side project that tries to make money or something.

00:04:03 But if you just want to try out FastAPI, for instance, just build something with FastAPI.

00:04:08 Just come up with a toy project and build it and learn it.

00:04:11 And it's fun.

00:04:12 Even if you never apply it to other stuff.

00:04:14 I've had so many times in my career where I've had something that I tinkered with just as a toy that suddenly, like, I could use.

00:04:22 I'm like, oh, yeah, I've built wikis before and stuff like that.

00:04:25 I can go ahead and do that for a project or, you know, I've done a flask app on the side.

00:04:32 So if I need a flask app at work, it's going to be pretty easy.

00:04:35 Things like that.

00:04:36 Tink, playing with toy projects.

00:04:38 I say, put that on top of your list for 2024.

00:04:40 More toy projects.

00:04:42 I'll go through the rest of these pretty quick.

00:04:45 Number four is knowing the why.

00:04:46 Number five, thinking and systems.

00:04:49 Number six, tech detox.

00:04:51 Recharging away for the monitor.

00:04:54 This makes you a better programmer.

00:04:56 Couldn't agree more.

00:04:57 The art of approximation.

00:04:59 I don't really know what this is about.

00:05:00 I didn't read this part.

00:05:02 Knowing important tech numbers.

00:05:04 Anyway.

00:05:05 I will.

00:05:05 I actually have one.

00:05:06 I want to cover that as one of our items.

00:05:09 Okay.

00:05:10 In the future.

00:05:10 There's a couple of hosts or charts or whatever that somebody put up that I think would be really interesting.

00:05:17 So this is like, what is the relative speed of L2 cache versus RAM?

00:05:21 RAM versus disk?

00:05:23 What is the cost of like a CPU core or a database operation on the cloud?

00:05:27 Et cetera, et cetera.

00:05:28 But I don't like some of the numbers there.

00:05:31 I think they're way, way skewed.

00:05:33 So I want to come up with my own table and then put them both forward.

00:05:36 So that's why I haven't covered it yet.

00:05:37 But that's what this is about, I think.

00:05:39 Okay.

00:05:39 Well, what's funny is that like the teaser at the beginning of this post says there's only eight, but there's more if you read it.

00:05:48 But there's a table of contents on the right.

00:05:50 So you can just look at the table of contents.

00:05:51 The last one I think is the most important for me is strong opinions loosely held.

00:05:59 And for me, this means that I'm going to have a default approach to test for a lot of problems and a default way to do things.

00:06:09 It just speeds things up.

00:06:10 It's like, if I don't care about it, just do it quickly.

00:06:13 You've got an opinion on how things are done.

00:06:15 However, be open-minded enough to when somebody approaches you and says, hey, there's a better way to do this.

00:06:20 Or keeping your eyes open with the tinkering, trying new ways to do things.

00:06:26 Be willing to abandon your old strong opinion and go, oh, there's a better way.

00:06:30 Cool.

00:06:31 My new opinion is this now.

00:06:32 That pretty much sums up our podcast.

00:06:35 Yeah, exactly.

00:06:36 Yes.

00:06:36 So, yeah.

00:06:39 Nice.

00:06:39 Nice post.

00:06:40 Just thinking about, you know, kind of planning for your time allotment for the upcoming year.

00:06:47 Yeah.

00:06:47 Lots of feedback on this one.

00:06:49 Jeff out there says, tech numbers like LEET1337.

00:06:53 So, excuse me.

00:06:55 Yes.

00:06:55 Those are the important tech numbers.

00:06:56 Those are the important ones.

00:06:58 Yeah.

00:06:58 LEET, NOB, all those things.

00:07:00 And then Grant, following up on the anti-fragile, says this.

00:07:04 Number two speaks more to reactive principles that came about with the cloud.

00:07:07 It could be summed up as build with the expectation that your K8 pods can be nuked mid-task at any point.

00:07:13 Yeah, exactly.

00:07:14 That you might just use one VM, but it could die.

00:07:17 But if you like know that it's always getting abused, you would build like failover and those types of things into it, making it hence less fragile.

00:07:25 I think that's kind of that principle there.

00:07:26 Yeah.

00:07:27 Okay.

00:07:27 But also, if it's a side project, if it's down once in a while, it's fine.

00:07:33 Yeah.

00:07:34 This is not a side project.

00:07:35 Yeah.

00:07:35 Maybe a habit of great software engineers.

00:07:38 I don't know.

00:07:38 I wonder how many blogs run on Kubernetes.

00:07:41 I don't know what the answer is, but I bet too many.

00:07:43 The answer is too many.

00:07:44 Too many.

00:07:45 Too many run on Kubernetes.

00:07:47 Okay.

00:07:48 Okay.

00:07:48 What do you got for us?

00:07:49 All right.

00:07:49 I got eight nines uptime on my blog.

00:07:53 Okay.

00:07:53 Although we probably do, Brian, because ours runs on a CDN as a static file.

00:07:59 Okay.

00:07:59 That's pretty good uptime, right?

00:08:01 Yeah.

00:08:01 Then the database doesn't need to be migrated for that business, does it?

00:08:05 All right.

00:08:05 Moving on.

00:08:06 We've covered this enough.

00:08:07 Let's talk about a new version of Flask.

00:08:09 So Flask obviously is a super important web framework.

00:08:12 Like everyone has heard of Flask.

00:08:14 It's kind of one of the two main pillars that I would think of, like the old guard pillars, right?

00:08:19 There's Flask and Django.

00:08:20 And the debate for so many years has been like, do you use Flask or do you use Django?

00:08:24 What kind of web developer are you?

00:08:26 Well, Flask 3.0 was released just a little while ago.

00:08:30 Is that three weeks ago?

00:08:32 Something like that.

00:08:32 There's also a 301 that is only unreleased, but has like very, very minor changes.

00:08:38 So anyway, the changes for a two to three release are not that huge.

00:08:42 Although I think the numbering probably comes from this removed, previously deprecated code there.

00:08:49 That's probably what pushed it from a two to three rather than some mega new feature.

00:08:53 Yeah.

00:08:53 Right.

00:08:54 Because it's like, hey, it's not backwards compatible.

00:08:57 Miguel Grinberg actually wrote an interesting but controversial piece on that.

00:09:01 I'm not going to link to it, but y'all can check that out.

00:09:04 I just want to cover the release here.

00:09:05 But a lot of this, actually this first line, there's a lot of discussion about it, let's say.

00:09:10 Neutral there.

00:09:11 So some of the things that are interesting here though, Brian, are not so much interesting because

00:09:15 they're Flask.

00:09:15 They're just like, wait, what?

00:09:17 You could do that?

00:09:17 So deprecated the Dunder version attribute.

00:09:22 So frequently people will go to their Dunder init.py for their package and put a Dunder version global variable and set it to a string.

00:09:30 And then you can say, well, what version is the thing?

00:09:33 Well, it's Flask.Dunder version is the version.

00:09:36 And that's just a string, right?

00:09:37 Yeah.

00:09:38 So the idea is that's deprecated.

00:09:41 And now the way you're supposed to get the version of Flask is using feature detection or with import lib.metadata.version of, quote, Flask.

00:09:51 Okay.

00:09:52 Which I had not, like, okay, so cool that that might work.

00:09:57 But how in the world do you make it possible for a package that that comes out of it?

00:10:03 If I wrote a package and I wanted to say dot version of my package in import lib, how do I put a number in there that makes it the version, right?

00:10:11 So do I have it here?

00:10:13 Yeah.

00:10:13 Basically, you have to go, if you use a pyproject.toml, at least one way is, and you just set the metadata category, set the version to something.

00:10:21 And now that's that.

00:10:22 Yeah.

00:10:23 Okay.

00:10:23 Yeah.

00:10:23 Pretty cool.

00:10:24 And so that's where that value comes from when you say import lib.metadata.version.

00:10:29 Pretty cool.

00:10:30 What's more interesting is deprecated a global variable.

00:10:33 How do you deprecate a global variable?

00:10:35 I know how to deprecate a method, a class, but a variable?

00:10:39 But just delete it.

00:10:41 No, that's removing it.

00:10:43 You wanted to give a warning when you access the variable.

00:10:46 Hmm.

00:10:46 Okay.

00:10:47 And the variable's value is a string.

00:10:49 Like, okay, what?

00:10:51 So I'm like, I got to see it.

00:10:53 So I went and I tracked down the changelog.

00:10:54 I checked down the PR that made this happen.

00:10:58 I'm like, I got to see the code.

00:10:59 What is this?

00:11:00 So it says it deprecated Dunder version.

00:11:02 And here you can see somewhere, you can just see they literally, like you said, they deleted the Dunder version variable, but they added a function to the module called Dunder get adder.

00:11:15 For some reason, I thought that only applied to classes, but no, apparently modules.

00:11:18 And given that it comes in and it asks for the version, it says no, there's a warning.

00:11:25 And then it calls the import lib.version thing on itself.

00:11:28 Interesting, huh?

00:11:29 Yeah.

00:11:30 Actually, this is a handy thing to keep around.

00:11:32 Yes, exactly.

00:11:34 If you're asking for Dunder version, it warns and then it does the new thing.

00:11:38 Otherwise, it just says, no, we don't have one of them.

00:11:40 But yeah, that's wild, right?

00:11:41 Yeah.

00:11:42 Huh.

00:11:43 I love how dynamic Python is.

00:11:45 It was a global variable.

00:11:47 Now it's a function.

00:11:49 Now it's a function call to a Dunder get adder method on the module.

00:11:53 Wow.

00:11:53 Yeah.

00:11:54 I think I'm going to replace all of my global like function declarations as get adder.

00:11:59 Exactly.

00:12:00 It's going to write all.

00:12:01 Yeah.

00:12:01 The whole function is just a bunch of dispatch to get adder.

00:12:04 It's going to be awesome.

00:12:05 Yeah.

00:12:06 We structured the code such that the Flask app and blueprint classes have sans IO bases.

00:12:13 I don't know what sans IO bases are.

00:12:15 But that moves things like a request and response over to wrapper sections and out of the app itself.

00:12:20 Things like that.

00:12:20 Requires a new version of Vexoic.

00:12:24 And that's pretty much it.

00:12:26 So interesting.

00:12:27 So it's interesting that 3.0 is out.

00:12:29 Way to go.

00:12:29 Palette's team.

00:12:30 But it's this deprecate version attribute.

00:12:32 This is interesting to me.

00:12:34 Yeah.

00:12:35 And so the meta.

00:12:37 I haven't played with it.

00:12:38 But that import lib metadata version.

00:12:41 You showed it working with like a static version metadata.

00:12:45 But it probably works with dynamic versions in PyProject Toml based projects also.

00:12:51 Yes, probably.

00:12:52 Yeah.

00:12:52 It's just my lack of experience with that kind of stuff to talk about it.

00:12:56 No.

00:12:56 Interesting.

00:12:58 Cool.

00:12:58 Mm-hmm.

00:12:59 All right.

00:12:59 You know what else is cool?

00:13:01 Our sponsor this week.

00:13:02 Let me take a moment and tell everyone about them.

00:13:06 Once I find where I put my notes.

00:13:08 Okay.

00:13:08 So this episode, as a couple of recent ones, have been brought to you by Scout APM,

00:13:13 Application Performance Monitoring.

00:13:15 Definitely a cool, cool service.

00:13:17 You know, there's a lot of profiling and stuff you can do, Brian.

00:13:20 And it's great to run your code in the profiler.

00:13:23 There's a bit of a Heisenberg type of thing.

00:13:26 As you observe it, it changes the behavior of the performance.

00:13:29 But you still get a sense.

00:13:31 But it's nothing like my app is running in production.

00:13:34 Let's see how it did during Black Friday.

00:13:36 Oh, this was the part that was slow.

00:13:38 We could, like, save a ton of money, run fewer servers or Kubernetes pods or whatever it is you're doing.

00:13:43 If we change it this way, right?

00:13:45 So having that data is awesome.

00:13:46 So if you're tired of spending an hour trying to find the root cause of issues impacting your performance, then you need to check out Scout APM.

00:13:53 It's a leading Python application performance monitoring tool that helps you identify and solve performance abnormalities faster and easier.

00:14:02 It ties bottlenecks such as memory leaks, slow database queries and background jobs.

00:14:06 And of course, the dreaded N plus one quorum query problem and more directly to source code so that you can spend less time debugging and more time building.

00:14:15 I don't know where that fits in the 20% of your code example, but I think this kind of stuff counts too.

00:14:21 You'll love Scout because it's built for developers by developers.

00:14:24 It makes it easy to get set up and deliver insights in less than four minutes.

00:14:27 Seriously, you could be done by the time you're done listening to this episode or live stream.

00:14:31 So start your free trial and get instant insights today.

00:14:34 Visit pythonbytes.fm/scout.

00:14:37 Please use our link because it really does support the show, right?

00:14:40 If they don't know you're coming from us, then they might not sponsor us anymore.

00:14:44 So please, pythonbytes.fm/scout to check it out.

00:14:47 Thank you to Scout APM for supporting Python Bytes.

00:14:50 Off to you, Brian.

00:14:50 What's next?

00:14:51 Well, next we've got something fun.

00:14:54 On real Python, there's a post, build Conway's game of life with Python from Leodonis Ramos.

00:15:04 And I just couldn't resist because I think I have a feeling that maybe there's some new,

00:15:08 like younger software folks that maybe aren't familiar with game of life.

00:15:12 Maybe I've got to live a while to know about the game of life.

00:15:15 Well, I hope everybody knows about it, but it's a it's kind of fun.

00:15:19 And so this is just a fairly good walkthrough of if you were going to build game of life.

00:15:25 And it's one of the cool things about it is building on the command line.

00:15:30 It's using art parse, but also curses.

00:15:33 And you've got a curses version in the terminal of game of life.

00:15:37 And how cool is that?

00:15:38 It's pretty, just pretty fun.

00:15:39 Looking through, I've seen some rather awful implementations of game of life over the years.

00:15:46 Like a little bit of Pearl golf going on sometimes.

00:15:49 But the this one looks pretty good.

00:15:53 It walks through setting up an entire project using PyProject.toml, which is great.

00:16:00 And then talking about the different splitting up the implementation into like a grid in one module,

00:16:06 the patterns in another, different views, and then the CLI in another.

00:16:11 Just the split up looks good for modularizing the application.

00:16:18 And kind of if you're a lot of times people want to play like build games or something.

00:16:23 And this is kind of a game that you don't actually have to play.

00:16:26 It just plays itself.

00:16:27 So it's a I just wanted to highlight it.

00:16:30 It's just a fun, fun walkthrough of implementing game of life.

00:16:34 Yeah, that's, you know, you already talked about these little projects in your first thing, right?

00:16:38 Here's a cool little project that you can play around with.

00:16:41 And I think games are a good way to get into coding.

00:16:43 Not, you know, Doom, Half-Life, whatever.

00:16:47 I've been playing a ton of Small Lands, by the way.

00:16:49 Also not a good way to get into programming.

00:16:50 Seems like something that would take forever.

00:16:52 Well, Small Lands is awesome.

00:16:54 However, I think this is like little games.

00:16:55 You know, they're easy.

00:16:56 You don't have to have a huge amount of domain knowledge.

00:16:59 You don't have to know about like databases and connection strings.

00:17:02 And like, how do I embed the password?

00:17:04 How do I make it run?

00:17:05 All that.

00:17:05 Like, just have fun.

00:17:06 Yeah.

00:17:07 And so one of the fun things about this is like the hiding of, so it has like a life grid.

00:17:13 So one of the, of this project, almost all of the project is going to be transferable to other stuff,

00:17:18 except for the curses part.

00:17:20 Like, I'm probably not going to write a whole bunch of curses applications.

00:17:23 But that's the same thing with like most, a lot of games.

00:17:26 Unless you become a game developer, a lot of the game development, it's using some sort of, you know, user interface stuff that you're probably not going to use

00:17:34 for a lot of projects.

00:17:35 Unless you go into using game, writing more games, which is great.

00:17:38 But having that isolated off to one little part was actually, it's pretty kind of nice to be able to set that.

00:17:45 Anyway.

00:17:46 Good.

00:17:47 Yeah.

00:17:48 It's really cool.

00:17:48 It is cool to see how you might create that little UI as, as well.

00:17:51 I mean, usually people are doing Unreal Engine, Unity, Pi Game, Arcade.

00:17:57 One of these is like quite, you quite deep down in those frameworks.

00:18:00 Yeah.

00:18:00 And it's just a little bit.

00:18:02 One of the things I wasn't sure about, and I, so I didn't see any disclaimer at the top.

00:18:07 I did not run through this, but was if I didn't know that you could use curses on Windows, for instance.

00:18:13 So is this a, maybe somebody in the, in the audience knows if you could.

00:18:17 Yeah.

00:18:17 Maybe someone knows.

00:18:18 It might be because of Windows terminal versus command prompt.

00:18:21 Oh, okay.

00:18:21 Yeah.

00:18:22 Yeah.

00:18:22 Possibly.

00:18:23 But I have, that's a guess.

00:18:25 Zero knowledge.

00:18:26 All right.

00:18:26 All right.

00:18:26 Enough of this fun, Brian.

00:18:27 Let's get down to business.

00:18:29 Okay.

00:18:29 Polars business, that is.

00:18:31 This comes from Marco Gorelli.

00:18:32 And this is just a simple plugin for Polars.

00:18:36 Now, if you don't know Polars, Polars is like Pandas with two major differences.

00:18:41 It has a lazy, fluent API.

00:18:43 So you can kind of chain commands together and it doesn't actually execute until you kind of work

00:18:49 through them kind of like generators and those sorts of things.

00:18:51 And it's written in Rust to be super, super fast.

00:18:53 So this is a plugin for Polars.

00:18:56 And the idea is it lets you answer questions like how many business days between now and then.

00:19:02 So if like my, my payment system says you get paid net 30, well, or you get paid after 10 business days.

00:19:10 But one of those days is the 4th of July.

00:19:12 And then there's the weekend.

00:19:14 And then there's like how many days, you know, calendar math is already gnarly.

00:19:19 If you want to like throw in skipping weekends, skipping holidays, even worse, right?

00:19:24 So super simple.

00:19:25 This thing, the extension itself is written in Rust.

00:19:28 So it's kind of compatible with Polars.

00:19:30 I believe Polars has actually a Rust API as well as a Python API.

00:19:34 So maybe this is available there.

00:19:36 I have zero information about that.

00:19:38 All you do is you can even define your own holidays and weekends.

00:19:42 Like every Wednesday, I'm taking it off, whatever.

00:19:44 So the way it works is you just go import Polars and then Polars business.

00:19:52 Somewhere down here, you can go to grab a column, say offset by and just say 5 BD.

00:20:00 And it'll skip by, you know, it'll go through all the columns, figure out what their dates are.

00:20:05 And using vector math, convert those to five days ahead by however they offset, like each one individually.

00:20:12 That's pretty awesome, right?

00:20:12 Yeah.

00:20:13 Fun.

00:20:14 Yeah, I don't know how that works.

00:20:15 That sounds complicated.

00:20:17 But yeah, so you can put in like, what are your weekend days?

00:20:20 What are your others?

00:20:22 You know, obviously Saturday and Sunday is pretty standard, but like we have restaurants around here that are closed on Sunday and Monday.

00:20:28 They're open on Friday and Saturday.

00:20:30 So if you're trying to like do business math around like that kind of schedule, like you could just say Sunday, Monday for your weekend and you're good to go.

00:20:39 Nice.

00:20:39 Yeah.

00:20:40 Well, like one of the things I was thinking about, it was like education wise, schools often have like tons of.

00:20:46 So many times, so much time off.

00:20:49 Yeah.

00:20:49 Like in like teacher non-work days, which or whatever, it's the teachers are still working.

00:20:56 It's just the students aren't working.

00:20:57 They should call it student non-work days.

00:21:00 They should.

00:21:01 Yeah.

00:21:02 Like my daughter is like, oh, I don't have school this week.

00:21:04 I don't have school this week.

00:21:05 Why?

00:21:05 Like, oh, it's parent teacher conference.

00:21:06 Oh, my.

00:21:08 Okay.

00:21:09 Yeah.

00:21:09 My daughter even calls, they call it, her friends call it like no school November.

00:21:15 Yes, exactly.

00:21:16 Exactly.

00:21:17 Anyway.

00:21:18 All right.

00:21:19 So that would be good for that.

00:21:20 Or lots of other businesses have wacky holidays.

00:21:23 So people can check this out.

00:21:25 It's, you know, easy to understand, easy to adopt if it's relevant to you, but it seems pretty cool.

00:21:30 Yeah.

00:21:31 All right, Brian.

00:21:31 How extra do you feel today?

00:21:33 I just have one extra.

00:21:35 And that is last week you get what I got convinced that to do a Black Friday sale for the complete

00:21:42 pie test course.

00:21:43 And it is one word, Black Friday, all caps, just that.

00:21:48 And you get 50% off the course.

00:21:51 So check it out.

00:21:53 And over the break, I did a whole bunch on it.

00:21:56 So I've up to, what, chapter 13.

00:21:59 Oh, chapter 13 was great.

00:22:00 I wanted to talk about that a little bit.

00:22:02 Chapter 13 was on debugging.

00:22:04 And instead of just, like, artificially adding errors to the code, I decided to do a, like, a test-driven development little thing of writing a couple tests first, doing the implementation, and resisting the urge to refactor during the implementation.

00:22:19 And then once everything was green, going back and doing a refactoring.

00:22:23 And then explored, I enjoyed learning this anyway.

00:22:29 So it was exploring testing or debugging using pytest plus PDB for the Python debugger.

00:22:36 One of the cool things about learning PDB is you can use it with talks.

00:22:40 So you can debug an individual environment if maybe your code's only failing on 3.8 or 3.9 or something.

00:22:47 So anyway, that's still up.

00:22:49 And that's my extra.

00:22:51 How about you?

00:22:52 Very cool.

00:22:52 Yeah, congrats on getting chapter 13 up.

00:22:55 And I think debugging 13, I think stuff could go, that's perfect.

00:22:59 As long as you didn't release the chapter on Friday the 13th, everything will be fine.

00:23:02 Right.

00:23:03 I got a few things.

00:23:05 First, there was, like, a really heartfelt message from Kenneth Wrights that he posted on X Twitter.

00:23:10 And so I thought maybe I'd just read that because it's, you know, just kind of remind everyone of, you know, how nice the community is and why we all like to be here.

00:23:19 You up for that, Brian?

00:23:19 Yeah.

00:23:20 All right.

00:23:20 Kenneth, who's done things like requests and many other projects, says, dear Python community, I hope this letter finds you well and thriving in your various endeavors.

00:23:28 Python, my name is Kenneth Wrights.

00:23:30 I've been part of this vibrant community for quite some time, contributing to projects like Quest, Pip, Envy, and among others.

00:23:35 Today, I write to you not just as a fellow Python enthusiast, but as someone who, like many of you, have faced moments of uncertainty and feared my journey with programming.

00:23:44 It's a path that, while rewarding, is often fraught with challenges and moments of self-doubt.

00:23:49 I'm reaching out to share these feelings because I believe in the power of our community to support and uplift each other.

00:23:54 In recent times, I've found myself grappling with a sense of fear, fear of not living up to expectations, fear of the unknown or ever-involving field, and perhaps fear of not being able to contribute as significantly as I have in the past.

00:24:04 These are feelings I'm sure many can relate to.

00:24:06 But in these times of vulnerability, that I'm reminded of the strength and compassion of the Python community, that we're a group that not only shares a love for programming, but also cares for the well-being of its members.

00:24:19 Your support, encouragement, and willingness to share knowledge and experiences have always been a source of strength for me.

00:24:25 So, reaching out to ask for your understanding and continued support, not just for me, but for everyone in the community facing similar challenges.

00:24:31 It goes on. I'll let people read it. I'll link to it in the show notes.

00:24:33 But I just think that's kind of a nice message, and I wanted to amplify it a bit for Kenneth.

00:24:37 Yeah.

00:24:38 I mean, obviously, he's someone who I know many people look up to as like, wow, look how much he's accomplished.

00:24:43 And so, if you're feeling uncertain or like you're not contributing enough or whatever, like if Kenneth also feels that way, like, you know, maybe these are just feelings people have and not so much things that should stop you.

00:24:54 All right, so that's one.

00:24:55 Remember last time I talked about Python 3.13.0 alpha 1 being out?

00:25:01 Well, this time, since it was so close to when 3.2 or alpha 2 was coming out, alpha 2 is here as well.

00:25:07 So, I just wanted to link over to that.

00:25:08 Really, many of the features that they talk about, what's coming in 3.13 really just has to do with like deprecations and very concrete stuff.

00:25:17 But I know there's the faster CPython initiative making a lot of changes, although they're not even at all mentioned here.

00:25:23 It's like we remove many deprecated things and many of the dead batteries that we talked about, like Telnet Lib.

00:25:28 Go find another way to implement your Telnet client instead of the standard library and so on.

00:25:32 So, alpha 3 will be scheduled for December 19th.

00:25:37 So, we can round out our year with a third Python 3.13 alpha release.

00:25:42 So, that's nice and quick.

00:25:43 And finally, as you touched on as well, thank you to all the people who participated in the Black Friday thing.

00:25:50 And just, we raised a bunch of money for charity, which is awesome.

00:25:54 So, really happy to have done that.

00:25:57 So, just a bit of a heartfelt thanks on my end for people who participated.

00:26:00 All right, ready for a joke?

00:26:01 Yeah.

00:26:02 The joke is called Select Star, and I think we can all relate to it.

00:26:06 Okay.

00:26:06 So, Select Star being theoretically a bad thing.

00:26:09 Can I get this image all the way over?

00:26:11 No, not really.

00:26:12 Okay.

00:26:12 So, the question here says, it's a person.

00:26:16 I think this is Will Smith from iRobot kind of type of thing.

00:26:20 Anyway, it doesn't really matter.

00:26:21 The developer says, can an AI really write efficient SQL queries?

00:26:25 And the AI looks back at the developer and goes, can you?

00:26:27 The developer goes, hmm.

00:26:29 Maybe not.

00:26:31 And, of course, the title is Select Star, which is like barring joins and other crazy group buy stuff.

00:26:38 Like, pretty much the worst thing you can do for performance.

00:26:40 Like, give me everything.

00:26:41 I don't care if I use it.

00:26:42 Right.

00:26:42 I know there's like a 10 kilobyte per row description.

00:26:45 I don't need that.

00:26:47 Just give it to me anyway.

00:26:48 I think this is like the ideal use case for using an AI is optimizing SQL queries.

00:26:54 Yeah.

00:26:55 Yeah.

00:26:56 Anyway.

00:26:56 I wouldn't trust.

00:26:58 I don't trust myself with production SQL.

00:27:01 Can an AI really write efficient SQL queries?

00:27:05 Can you?

00:27:06 Okay.

00:27:06 Okay.

00:27:07 Well, I see some agreement in the audience out there as well.

00:27:10 Very nice.

00:27:10 I want to add a just a funny thing that my wife shared with me yesterday.

00:27:16 And as many of you know, or maybe you don't know, I used to have short hair and over the pandemic,

00:27:23 grew it out.

00:27:24 And now I have longish hair.

00:27:26 I would say that counts as long.

00:27:28 And so often it's pulled back, but it's often not also.

00:27:34 So I wanted to share this, this funny thing that my, my wife shared said, I admire those

00:27:40 with hairstyles.

00:27:40 I don't have a hairstyle.

00:27:42 I have hair.

00:27:42 Most are most days.

00:27:44 It has zero caterpillars in it.

00:27:46 That's as good as it gets.

00:27:47 So a girl, woman with like long flowing air.

00:27:52 I just, honestly, the length is about the same as yours right now.

00:27:55 So that's pretty awesome.

00:27:56 And apparently this was, that came up by Tom Cox.

00:28:00 So that's funny.

00:28:01 Anyway.

00:28:02 Yeah.

00:28:02 Very good.

00:28:03 Well, also a very good episode.

00:28:05 Good to be back with you and with everyone.

00:28:07 Yeah.

00:28:07 Thank you.

00:28:08 Yeah.

00:28:08 You bet.

00:28:08 Thanks everyone for listening.

