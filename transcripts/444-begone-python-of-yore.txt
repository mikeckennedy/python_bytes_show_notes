00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04 your earbuds. This is episode 444, recorded August 11th, 2025. I am Michael Kennedy.

00:00:13 And I'm Brian Okken.

00:00:14 And this episode is brought to you by DigitalOcean and their generative AI features and tools,

00:00:22 and DigitalOcean more generally, but specifically by their gen AI tools,

00:00:26 which we're going to talk about. Brian's going to tell you about them.

00:00:28 So check that out at pythonbytes.fm/digitalocean-gen-ai and use the code DO4bytes, all caps, and get a $200 credit.

00:00:38 So if you're looking to try out Digital Ocean, you might as well use our code and get plenty of credits.

00:00:43 Also connect with us on the socials, Mastodon, Bluesky, YouTube, all of those things.

00:00:49 Links are in the show notes at the top.

00:00:51 And I highly recommend that you subscribe to our newsletter, which Brian sends out a really nice email pretty soon after the show.

00:00:58 is out. Diving further into the stuff that we talked about, maybe some additional resources

00:01:03 and links and insights and tools and all that. It's not just a email version of the show notes.

00:01:07 It's really cool. I enjoy getting it as well. Thanks, Ryan. I enjoy putting it together.

00:01:11 I enjoy hearing about whatever you've got to cover first. So let's, yeah, let's jump in there.

00:01:18 Speaking of coverage, let's talk about coverage. Ned Batchelder released,

00:01:24 I guess this was in July, but just recently, a blog post called coverage.py regex pragmas.

00:01:32 So that seems like a mouthful.

00:01:35 And probably, please don't run away because this is powerful.

00:01:39 I know that pragmas and regex isn't everybody's favorite topic.

00:01:43 I'm feeling like C++ is back again.

00:01:47 So what does pragma mean?

00:01:49 It's the pound thing.

00:01:50 So let's say if you say like pragma exclude or something like that to say or no cov to say, hey, for coverage for this particular line of code, don't worry about measuring the coverage on that.

00:02:04 However, so this is a great article and I did not realize I've been using coverage for years and I did not realize it was this powerful.

00:02:11 So, coverage uses regexes to define pragma syntax.

00:02:16 And you don't really have to care about it if you just want to just for each individual thing you want to pop in.

00:02:22 And there is a way to say particular files, just ignore the whole file.

00:02:28 However, this is pretty cool.

00:02:29 So, what is he talking about?

00:02:30 He's talking about a couple things around it that allow you can extend it using regular expressions.

00:02:38 And you don't necessarily have to figure this out.

00:02:40 other people have figured it out for you. For instance, there are plugins for coverage that do

00:02:46 a lot of this. So there's cov defaults. And this one's brought to us by, oh, Anthony Satili. Cool.

00:02:54 So Anthony has cov defaults. And so there's a whole bunch of defaults already in there to do

00:03:01 things like exclude your dundermain.py file. Because if you're distributing a package,

00:03:07 that might be just so you can test things.

00:03:09 You're probably not going, it's okay if coverage doesn't hit it.

00:03:13 A lot of stuff like that.

00:03:14 And then a whole bunch of regular expressions for things like type relating,

00:03:19 typing relating code and excluding that.

00:03:21 That's pretty cool.

00:03:21 I didn't know that was there.

00:03:22 That's neat.

00:03:23 Another one is coverage conditional plugin, which does things like if you've got certain,

00:03:30 what does it do?

00:03:31 He talks about it.

00:03:32 It gives you a way to create common syntaxes for entire files or entire packages,

00:03:38 whether a package is installed or different operating systems, things like that.

00:03:42 That's pretty neat also.

00:03:43 But a change happened apparently recently, this was, well, recently for me, last year,

00:03:50 but a change to coverage that allowed multi-line, and this was contributed by Daniel Diniz,

00:03:57 multi-line fragments or multi-line regular expressions so that it like compares it for the whole file.

00:04:04 So one of the neat things about this is you can do things like, with this regular expression that you can put in your no coverage stuff,

00:04:14 you can pop in pragma exclude file and define a file there.

00:04:20 Instead of trying to figure out how to find the file in your directory structure,

00:04:24 you can just pop this in and say, this particular file, I don't want to delete it yet,

00:04:28 but don't worry about this for testing.

00:04:31 That's pretty cool.

00:04:32 Right. My boss has been on me about getting that code coverage percentage up.

00:04:36 So I wouldn't do it for that.

00:04:40 And that's not what it's for. Okay. No, I like that. I'm just teasing. I like the idea.

00:04:44 I actually like, I mean, I've heard a lot of people say hitting a hundred percent isn't,

00:04:50 isn't worthwhile, but I think it is because coverage is so powerful. You can, with all of

00:04:55 this stuff, you can say, I want to hit a hundred percent of the code that I care about, not the

00:05:01 stuff I don't care about but the things that the problem area is you can define this so that you

00:05:06 can just focus on the files and areas where you really want coverage and that needs to be 100%

00:05:12 so that's where that's where that's my caveat for why I like 100% a couple other cool pragmas

00:05:18 start and stop so you can just say at the start and stop like add a comment to the top of

00:05:23 a code block to say yeah this junk we're not I'm leaving it in here but it's not it's not running

00:05:30 during testing so don't cover it um so really powerful i really love a couple all of these um

00:05:37 they're pretty great oh this is a neat one so have you ever had like um these uh uh default like a

00:05:43 placeholder method where you just uh use three dots or something i'm using three dots a lot better

00:05:49 more than pass because um it kind of does the same thing um and you can just say yeah this is here

00:05:56 because it has to for some structural reason, but it's never going to run.

00:06:01 So don't worry about trying to cover it.

00:06:03 So that's pretty neat.

00:06:04 Yeah, that's cool.

00:06:04 Yeah, very cool.

00:06:05 Anyway, thanks, Ned, for teaching us how to use regular expressions for coverage.

00:06:11 Yeah, that's very neat.

00:06:13 All right.

00:06:14 I want to take you back to the times of knights, maidens, to the land of yore.

00:06:20 No, this is totally different.

00:06:21 This comes to us from Matthias.

00:06:22 It is a package called yore, however.

00:06:24 Okay.

00:06:24 It's quite new.

00:06:27 It's like an undiscovered gem sort of thing.

00:06:29 So when I first saw this, I'm like, huh, do I care about this?

00:06:32 I don't know if I care about this.

00:06:34 And then I looked more carefully.

00:06:35 That is kind of interesting.

00:06:36 It starts with a quote from ChatGPT, the sage, which is always good.

00:06:40 But it's more productive to just jump down to some examples.

00:06:43 So basically what this is, is it is a tool a little bit like Ruff or Flint

00:06:48 or one of those things that works on--

00:06:51 basically, it looks at your code, tells you if there are issues.

00:06:54 But this one is focused specifically on have you previously supported unsupported versions of Python by doing stuff the old way, you know, be that typing or example is the abstract, the ASTune parser.

00:07:12 I don't know what that is.

00:07:13 Or the AST parser.

00:07:14 Yeah, abstracts and text tree.

00:07:16 If you want to use that and you're using 3.8 or before, you had to use the astune parse, I guess, from unparse.

00:07:24 Or if you're in 3.9 or above, you can use AST from unparse.

00:07:29 So, right, you probably have this comment, like, if the version of Python that I'm running on is less than this, I'm going to do this one thing.

00:07:35 Otherwise, I'm going to do the other.

00:07:37 And so what you do here is you still write that code because that's how it is.

00:07:41 However, you put a comment kind of like, you know, PyCharm and VS Code, if you put a capital

00:07:49 to-do colon as a comment, I don't know if you've noticed this, but probably.

00:07:53 If you say capital to-do colon and you write something, that shows up in a separate window,

00:07:58 at least in PyCharm, you say, show me my to-dos.

00:08:00 And when you try to do a commit, it'll say, hey, you added some new to-dos that are not

00:08:03 done.

00:08:04 You sure you want to commit?

00:08:05 There's a whole integration with the tooling like that.

00:08:07 So this is the same type of deal.

00:08:09 So you say, put a comment that is capital your colon, and then you say EOL, in this case, EOL 3.8, and you put a comment.

00:08:17 Oh.

00:08:18 And then a thing like replace block with line four.

00:08:22 Okay.

00:08:23 Okay.

00:08:23 So you say, once 3.8 is gone and we stop supporting it, just do the straight import.

00:08:29 We don't have to do this test.

00:08:30 We don't have to do anything.

00:08:31 And then later, you can run in your code, you say, your check EOL within five months.

00:08:37 And it says, whenever you run it at the right time, Python 3, it will reach its end of life approximately four months.

00:08:42 So it uses the comments to say, you've got sections of your code that depend,

00:08:47 are complicated because of Python versioning breaking changes.

00:08:51 Oh, cool.

00:08:51 Here they are, right?

00:08:52 And you can look for them much like you can use rough check to say, show me issues with my code.

00:08:57 But what's even better, rough check has a --fix.

00:09:00 And so does yours.

00:09:01 You can say your fix, EOL, within five months, It'll actually rewrite that code and replace the block with line four and just go back to the straight import.

00:09:10 Remove the your comment, remove the version checks, all that.

00:09:14 Hmm.

00:09:15 What do you think?

00:09:15 Okay, I like it.

00:09:16 For such a simple idea, I like it too.

00:09:19 Now, I'll have to play with this a little bit because it totally makes sense for Python deprecating Python versions and stuff.

00:09:30 And the reason one of the cool things about like looking into the future is you might be working on a you might be working on a release that you're not planning on releasing for another month.

00:09:39 So you're getting started cleaning those up.

00:09:42 But that might be your own stuff.

00:09:44 You might be like you might be deprecating your own features.

00:09:47 So you might I'm wondering if you can put like your for your own features or is it just a Python EOL thing?

00:09:55 Yeah, that's what I've been thinking about as well.

00:09:57 I was like, I would like it not just necessarily for my features, but hey,

00:10:00 Pydantic went from V1 to V2 and that had super big deprecations for certain really common functions, right?

00:10:07 Like dumping to JSON and so on.

00:10:09 Yeah.

00:10:10 Is it just the Python release cycle?

00:10:13 I don't know, I'll have to look into that.

00:10:14 Yeah, I think it's just Python version itself, but who knows?

00:10:18 Okay.

00:10:19 Neat, yeah, very, very neat.

00:10:21 All right, also neat is DigitalOcean.

00:10:25 Yeah, let me tell you about DigitalOcean.

00:10:27 This episode of Python Bytes is brought to you by DigitalOcean.

00:10:30 DigitalOcean is a comprehensive cloud infrastructure that's simple to spin up even for the most complex workloads.

00:10:36 And it's a way better value than most cloud providers.

00:10:40 At DigitalOcean, companies can save up to 30% off their cloud bill.

00:10:44 DigitalOcean boasts 99.99% uptime SLAs and industry-leading pricing on bandwidth.

00:10:51 It's built to be the cloud backbone of businesses small and large.

00:10:56 And with GPU-powered virtual machines plus storage databases and network capabilities

00:11:02 all in one platform, AI developers can confidently create apps using a platform that the users love.

00:11:10 Devs have access to the complete set of infrastructure tools they need for both training and inference

00:11:17 so they can build anything they dream up.

00:11:19 DigitalOcean provides full-service cloud infrastructure that's simple to use, reliable, no matter the use case, scalable for any size business, and affordable at any budget.

00:11:29 VMs start at just $4 a month and GPUs under $1 per hour.

00:11:33 Wow.

00:11:34 Easy to spin up infrastructure built to simplify even the most intense business demands.

00:11:39 That's DigitalOcean.

00:11:40 And if you use DO4bytes, DO the number four and BYTES, you get $200 in free credit to get started.

00:11:50 DigitalOcean is the cloud that's got you covered.

00:11:53 Please use our link when checking out their offer.

00:11:56 You'll find it in the podcast player show notes.

00:11:59 And it's a clickable chapter URL as you're hearing this segment.

00:12:03 And it's also at the top of the episode page in pythonbytes.fm.

00:12:06 And why wouldn't you?

00:12:07 It's $200 credit.

00:12:09 Thank you to DigitalOcean for supporting Python Bytes.

00:12:12 Indeed, indeed.

00:12:13 Thank you.

00:12:14 Over to you.

00:12:14 What's next?

00:12:15 Wait, no, over to me.

00:12:16 Over to me.

00:12:17 Sorry, I'm retracting that statement.

00:12:19 I got the order wrong, Brian.

00:12:21 So we've talked about Nox before, right?

00:12:24 Yeah.

00:12:24 You're a fan of Nox, aren't you?

00:12:25 Yeah.

00:12:25 So Nox is a command line tool like pytest or Tox that allows you to test against multiple

00:12:32 versions of Python, right?

00:12:34 So super cool.

00:12:35 You can run it.

00:12:36 You can say like this might depend on whatever particular version of Python or whatever, right?

00:12:42 So the thing I want to tell you about is something called uv.

00:12:47 No, sorry, Knox-UV.

00:12:49 And this comes to us from John Hagen.

00:12:51 And this facilitates Knox integration with uv for Python projects.

00:12:56 So remember, uv is awesome at installing different versions of Python rapidly.

00:13:02 Like you can install, go to a machine that has no Python whatsoever, and you can pick your version of Python and have it installed and ready to use in under two seconds versus PyMV, which builds it and takes minutes or downloading the installer and making sure you have all the versions you're going to test with or whatever.

00:13:19 Right.

00:13:19 Yeah.

00:13:19 So that's really awesome.

00:13:21 And then also installing the dependencies for these different versions of Python, uv is ultra fast at that as well.

00:13:27 So there's huge advantages to speeding up testing and CI with uv.

00:13:32 And if you're using Knox to create a combinatorial matrix of all the different versions of Python you might work with,

00:13:39 well, then uv speed is only going to multiply across that, right?

00:13:42 Yeah.

00:13:42 Yeah, so super cool.

00:13:43 So you can just say uv add group Knox and Knox uv, and it'll add that in there.

00:13:48 And then within your Knox file, you import the session.

00:13:51 Instead of from Knox, you do it from Knox uv, set the backend to be uv.

00:13:55 And then for your session, you specify which versions of Python, which groups, et cetera.

00:14:00 Off it goes.

00:14:01 I feel like this should be your topic, honestly, Brian.

00:14:03 I think I stole it from you somehow, effectively.

00:14:06 Why is that?

00:14:07 Just because you're so into testing.

00:14:09 And this is like right at the heart of it.

00:14:11 Okay.

00:14:12 What do you think?

00:14:12 Cool?

00:14:13 I think this is neat.

00:14:14 Yeah, I'm using like uv almost everywhere now.

00:14:16 And I actually, I used to recommend people like just average folks that are just starting Python

00:14:23 or they just need it for work, I would recommend them just go to python.org and download it.

00:14:30 And I'm still kind of doing that, but I'm leaning towards trying to teach people

00:14:34 how to use uv in virtual environments because it's not going to be that long

00:14:39 after they start using Python that they're going to want to use that anyway.

00:14:42 So, yeah.

00:14:44 Yeah, and recently we just covered this, that one of the main things uv did

00:14:48 is now there's a Python version in your path if you install a Python via uv,

00:14:54 which it used to just be in like some obscure place hidden in like your user profile sort of thing.

00:14:59 It was hard to run it outside of a virtual environment.

00:15:02 Yeah.

00:15:02 Yeah.

00:15:04 Yeah.

00:15:04 Anyway.

00:15:05 Okay.

00:15:05 Cool.

00:15:05 Yeah.

00:15:06 Very cool.

00:15:06 Thanks, John, for sending that in.

00:15:08 Now over to you, Brian.

00:15:09 All right.

00:15:10 So let's take a look.

00:15:12 I've got a couple short-ish Django items.

00:15:16 So I thought I'd cover them together.

00:15:18 So the first comes from Johnny Metz.

00:15:22 And it's stop using Django's squash migrations.

00:15:26 There's a better way.

00:15:27 And actually, I didn't know about squash migrations.

00:15:29 I'm kind of new to Django, the Django world, new-ish.

00:15:33 But I like this article because I watched a pro, kind of an old hat, when I was doing a session with somebody that knows Django way better than I do.

00:15:45 And I had a whole bunch of migrations because I was fiddling with the database structure and everything.

00:15:53 And I was going back and forth, changing things.

00:15:54 And I had a bunch of migrations.

00:15:56 And he said, wait a second, just a second.

00:15:59 Let me do something.

00:16:00 And he just like, he did this.

00:16:01 So what am I doing?

00:16:02 What am I talking about?

00:16:05 So this is Johnny Metz.

00:16:07 He was recommending doing a clean reset.

00:16:10 So you fully migrate all your environments, make sure everything's running well.

00:16:14 And then you delete all your migration files.

00:16:17 Seems crazy.

00:16:18 but you delete them all and generate a fresh migrations.

00:16:22 And then you've got just a new one.

00:16:26 So this creates a new 0001 initial for each app, and then some apps might get a 002 or higher.

00:16:37 So you do this on different, it's going to do it on different apps.

00:16:41 But then you, so, okay, I'll just walk through it.

00:16:44 Fully migrate all your environments, delete all your migrations, generate fresh migrations, then add data migrations,

00:16:53 temporarily disable automatic migrations during deployment, reset migrations.

00:16:58 Okay, so it's not trivial.

00:16:59 Then re-enable automatic migrations.

00:17:01 So why would you do all of this?

00:17:04 This seems more complicated.

00:17:06 However, you end up with a really clean set.

00:17:11 So you've got a very clean migrations set at the end.

00:17:15 And I think, I don't know if this is, I'm not a Django pro, but so I'm not, I'm not sure if this is appropriate later on, but especially after you've like hashed through the initial development, this is a great time to start clean and then, and then work from there.

00:17:31 So interesting Django article.

00:17:33 It is an interesting idea.

00:17:35 And certainly, I think if you've not pushed it to production, you know, you just like,

00:17:40 instead of having the 100 migrations you may have built over time as you built up the app

00:17:44 before you push it out live, like just get that down to a single migration, get the database

00:17:49 up and running, go from there.

00:17:50 Yeah.

00:17:52 I'm not sure if it mentions it in here too, but I have been, guess, yeah, I think it sets

00:17:57 it up in here, but having migrations per application.

00:18:00 Anyway.

00:18:02 The other one is this comes from Adam Hill is DJ light.

00:18:06 And this is a fairly new project.

00:18:09 And it is how to use SQLite in production with Django.

00:18:15 So yes, you can use SQLite with Django, but there's some tricks.

00:18:19 So he wrote an article called the definitive guide to using Django with SQLite in production.

00:18:27 And then he decided to go ahead and he's still recommending that, but there's this plugin to make it easier.

00:18:35 So with this plugin, you got a couple settings that you can change, and it just runs with it.

00:18:41 So it's way easier setup if you want to use SQLite with Django.

00:18:47 And this little blurb here at the top says that simplify deploying and maintaining production Django websites

00:18:56 using SQLite in production.

00:18:57 DJ Lite helps enable the best performance for SQLite for small to medium-sized projects.

00:19:03 It requires Django 5.1 or above, but I think SQLite is appropriate for a lot of Django.

00:19:12 A lot of people just start with Postgres, but anyway.

00:19:15 Yeah, definitely.

00:19:17 I think there's certainly defaults you can change or behaviors you can change about SQLite to make it way more high performance,

00:19:24 especially with concurrent read-write sort of things.

00:19:27 Yeah.

00:19:27 So, yeah, very cool.

00:19:29 And following up on the squash migrations, Pat Decker says, sounds like a similar familiar to Git Rebase maybe.

00:19:36 Yeah, it does to me for sure.

00:19:38 Yeah.

00:19:38 Squashing.

00:19:39 Yeah, very similar.

00:19:40 Okay.

00:19:41 While you have the stage, how extra do you feel?

00:19:43 I got a couple extras, so we can just cover them.

00:19:46 So the first up is I've got a testing code episode in the queue.

00:19:52 It's in draft mode currently.

00:19:53 FastAPI cloud with Sebastian Ramirez.

00:19:57 and it was a real fun talk with Sebastian.

00:19:59 This was recorded.

00:20:00 I can't even remember when it was recorded.

00:20:01 Maybe it was a few weeks ago at least.

00:20:04 I feel bad getting so slow to get it out.

00:20:06 But a really interesting article about FastAPI and about FastAPI Cloud.

00:20:12 And Sebastian's just a joy to talk with.

00:20:14 So that'll be out later today.

00:20:16 I only have to rerecord the ad for it, but not much left to do.

00:20:21 And then next up, pythontest.com, a couple things.

00:20:26 I released a, I had a fixture.

00:20:29 When was this?

00:20:30 2013 that I started.

00:20:32 So this is what, over 10 years ago?

00:20:34 That I wrote a four-part series on pytest fixtures.

00:20:38 And I had been talking that I was looking at analytics.

00:20:44 And some of this stuff is still getting hit.

00:20:46 So I went and reviewed it.

00:20:48 And this series was a mess.

00:20:50 And I went ahead and like re, I didn't rewrite it, But I went through everything and split it up into a more multi-part series.

00:21:00 A lot of these are really short.

00:21:01 I just wanted to keep one topic per blog post and make sure that it runs.

00:21:06 A lot of the stuff didn't even run on current pytest and current Python.

00:21:10 Now it all runs with current pytest and Python.

00:21:12 So there's a nice fixture tutorial there.

00:21:15 The other thing I wanted to bring up with Python Test is there is a bunch of stuff.

00:21:21 So 2013 up through this year, there was a bunch of stuff that was like formatted badly.

00:21:26 And I have gone through and made sure everything is mostly correct.

00:21:31 So if you see any, I think everything's working now.

00:21:33 So if you see anything weird, let me know.

00:21:35 I just, as I was reviewing this morning, I realized that in this particular post, I

00:21:40 refer to a fixture as fixture B and it's really resource B.

00:21:45 So I'll have to fix that.

00:21:46 But, you know, things like that shouldn't be too bad.

00:21:48 Anyway, that's all up to date.

00:21:50 Do you have any updates?

00:21:51 I have three extras, and I think they're really exciting.

00:21:54 They're going to be really cool for people.

00:21:56 So let me tell you about it.

00:21:57 First, brand new course over at Talk Python.

00:21:59 I'm really excited about this one.

00:22:01 Some of the most impactful courses that we create there are ones that take people from

00:22:06 like zero to one or one and 1.5 to two, like the first sort of steps, right?

00:22:12 And so this new course is called Just Enough Python for Data Scientists.

00:22:16 Oh, nice.

00:22:16 Python is kind of a stand-in for software engineering with Python, right?

00:22:20 So the idea of this course is if you've done work in Jupyter notebooks, but you kind of feel like, well, I just learned notebooks and a little bit of Python because I was at this research lab or in this course I took.

00:22:33 But I don't really know Git very well.

00:22:36 I don't know refactoring super well.

00:22:38 Reproducibility is still an issue.

00:22:40 Those kinds of things.

00:22:41 So it covers like what do you need to pay attention to in the dev world or the software world?

00:22:47 And what can you safely ignore?

00:22:49 Right.

00:22:49 Like don't try to boil the ocean when you're getting started.

00:22:52 What can you just not pay attention to?

00:22:54 How do you write functions?

00:22:56 Create importable modules and packages to split up notebooks from like one large notebook cell into a bunch of usable, testable, more readable pieces.

00:23:06 Debugging, reproducibility with like Docker and uv, and even a little bit of agentic AI for like data analysis to like jumpstart your work.

00:23:13 So if people are interested in this, I highly recommend it.

00:23:16 It's an awesome course that I wrote over the last three or four weeks.

00:23:20 and I'm really happy to have it out.

00:23:21 That's pretty exciting.

00:23:22 I like the topic.

00:23:23 Yeah, thanks.

00:23:24 Yeah.

00:23:25 All right.

00:23:26 Speaking of uv, I was just on with Will Vincent from Django Chat.

00:23:30 When was this?

00:23:31 This was live streamed four days ago.

00:23:34 And we did a whole one hour paired presenting sort of thing on uv, why people might use it, compatibility, what's new.

00:23:44 I even did a thing like how to make your Docker builds five times faster sort of thing,

00:23:47 or 30 times faster, depending on what you're using.

00:23:49 If you're using pip, it'll be 30 times faster.

00:23:52 So super neat, super neat stuff that people can check out.

00:23:55 And that's just on YouTube.

00:23:56 So I'm going to link to that.

00:23:57 And then last is I'm a fan of cursor when I'm doing like super heavy AI programming.

00:24:04 Obviously a big fan of PyCharm when I'm doing like focused development work, right?

00:24:07 But if I'm just like, I just need some heavy duty AI tools, cursor and Claude Code has been getting a lot of traction lately

00:24:14 because it's like this terminal based thing.

00:24:16 You can use it anywhere.

00:24:17 Well, Cursor just came out with a Cursor CLI that you could set up.

00:24:22 That's pretty neat.

00:24:23 So use it in your IDE or any terminal.

00:24:25 Cursor, JetBrains, Android Studio, Xcode, whatever.

00:24:29 So pretty neat.

00:24:31 If you kind of like Cursor, but you also kind of prefer the terminal side of things, check this out.

00:24:36 It's in beta, but so far it seems pretty neat.

00:24:39 If you have a subscription, it just integrates with that.

00:24:41 Neat.

00:24:42 Yeah, those are my extras.

00:24:43 I have a joke for us as well.

00:24:45 Oh, good.

00:24:45 Yes.

00:24:46 And I think this AI thing I just gave a shout out to perfectly, perfectly blends into this.

00:24:51 Okay.

00:24:52 Control C, Control V remains eternal.

00:24:54 But what kind of dev are you?

00:24:56 This means something different, Brian.

00:24:58 If you're a new school developer, you copy and paste from ChatGPT.

00:25:01 If you're old school, you copy and paste from Stack Overflow.

00:25:06 And if you're ancient like you and me, you copy and paste from the documentation.

00:25:11 Wait, how do I copy and paste from a book?

00:25:14 Okay, I guess I'm so ancient that I'm not even on the chart.

00:25:17 Oh, that one takes a while because that's when you remember people talk about,

00:25:20 oh, I saw that code in the magazine that I typed it in.

00:25:24 Yeah, that was me.

00:25:26 That's how you do it.

00:25:27 That's how you do it.

00:25:28 You copy and paste with the fingers one character at a time.

00:25:32 Yeah.

00:25:32 Yeah.

00:25:33 Anyway, copy, control Z, control V, still important, but changing over time.

00:25:37 Yeah.

00:25:38 All right.

00:25:39 Well, thanks for the episode.

00:25:41 Thanks for being here.

00:25:41 And thanks everyone else for listening.

00:25:43 Thanks.

00:25:43 Bye.

