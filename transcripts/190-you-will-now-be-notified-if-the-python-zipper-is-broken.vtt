
00:00:00.000 --> 00:00:05.120
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.120 --> 00:00:14.320
This is episode 190 recorded July 8, 2020. At least it's the 8th here. I'm not sure what it is in Australia. Is it tomorrow already?


00:00:14.320 --> 00:00:15.120
It's the 9th.


00:00:15.120 --> 00:00:19.520
Oh my god, you're from the future. Anthony Shaw is here and he is from the future.


00:00:19.520 --> 00:00:20.960
That's awesome.


00:00:20.960 --> 00:00:26.320
I'm Michael, as everyone knows. And Anthony, thank you for joining the two of us here on the show. Happy to have you.


00:00:26.320 --> 00:00:27.160
Yeah, I'm glad to be here.


00:00:27.160 --> 00:00:30.340
I want to kick this off with a, I think an interesting article.


00:00:30.340 --> 00:00:34.240
It's a, by Tom Christie titled Python async frameworks


00:00:34.240 --> 00:00:36.620
beyond developer tribalism.


00:00:36.620 --> 00:00:41.380
And I think it's a, and Tom Christie, if you don't know who he is, he's done


00:00:41.380 --> 00:00:45.440
some things like the Django rest framework and HTTPX, of course, other


00:00:45.440 --> 00:00:50.280
people are on those projects as well, but right guy, and I think it's in part to


00:00:50.280 --> 00:00:55.140
a reaction, we didn't cover this article, but we noticed it prior article called


00:00:55.140 --> 00:00:57.740
"Async Python is not faster."


00:00:57.740 --> 00:01:01.020
But all of us had some issues with the article itself.


00:01:01.020 --> 00:01:03.380
And so this isn't a direct rebuttal,


00:01:03.380 --> 00:01:05.900
but it's an interesting read.


00:01:05.900 --> 00:01:08.980
One of the things Tom Christie's pointing out


00:01:08.980 --> 00:01:11.940
is just that I think that we need to move


00:01:11.940 --> 00:01:14.820
the Python community beyond polarizing discussions.


00:01:14.820 --> 00:01:17.540
And I think that "Async Python is not faster"


00:01:17.540 --> 00:01:22.280
was not a helpful discussion, but it's part of it anyway.


00:01:22.280 --> 00:01:23.460
A little bit of a quote,


00:01:23.460 --> 00:01:26.100
we could probably benefit from a bit more recognition


00:01:26.100 --> 00:01:28.400
of where there is shared ground


00:01:28.400 --> 00:01:30.840
and in the areas where there's less clarity,


00:01:30.840 --> 00:01:33.500
have constructive conversations around those.


00:01:33.500 --> 00:01:36.600
And so some of the shared ground Tom points out


00:01:36.600 --> 00:01:39.700
is kind of one of the things is you really shouldn't


00:01:39.700 --> 00:01:41.620
really care about performance too much


00:01:41.620 --> 00:01:43.020
when you start a project.


00:01:43.020 --> 00:01:44.940
The success of a project is more related


00:01:44.940 --> 00:01:47.780
to developer experience and the strengths


00:01:47.780 --> 00:01:51.340
surrounding the ecosystem of the framework you're using,


00:01:51.340 --> 00:01:53.700
not just whether or not it's faster.


00:01:53.700 --> 00:01:56.540
And you should care, but we as the Python community


00:01:56.540 --> 00:01:59.260
do need to care about web performance,


00:01:59.260 --> 00:02:02.100
partly because new projects starting off


00:02:02.100 --> 00:02:05.420
might decide to go with non-Python solution


00:02:05.420 --> 00:02:07.460
because they fear Python might be too slow.


00:02:07.460 --> 00:02:09.740
- And Anthony, how often have either of you heard,


00:02:09.740 --> 00:02:11.940
oh, we decided to rewrite that in Go,


00:02:11.940 --> 00:02:13.280
so we have proper async,


00:02:13.280 --> 00:02:15.580
or we decided to use JavaScript here


00:02:15.580 --> 00:02:18.620
because it supports async through Node


00:02:18.620 --> 00:02:19.460
or something like that.


00:02:19.460 --> 00:02:20.660
Like I've heard that a lot.


00:02:20.660 --> 00:02:22.340
- Yeah, definitely. Lots of projects.


00:02:22.340 --> 00:02:24.460
- Yeah. And I'm not sure,


00:02:24.460 --> 00:02:26.600
I don't know anything about those other languages though.


00:02:26.600 --> 00:02:29.340
So at least I haven't used them,


00:02:29.340 --> 00:02:32.900
but for me, it would be a mistake because I know Python.


00:02:32.900 --> 00:02:34.500
I don't know those other ones.


00:02:34.500 --> 00:02:35.820
Okay. So that's one of the points


00:02:35.820 --> 00:02:38.020
that maybe we should care a little bit,


00:02:38.020 --> 00:02:40.740
but also we should be careful about the word performance


00:02:40.740 --> 00:02:43.140
because if you measure performance


00:02:43.140 --> 00:02:47.300
of just a single async function calls


00:02:47.300 --> 00:02:50.060
with our single function call,


00:02:50.060 --> 00:02:52.300
An async call is going to be slightly slower


00:02:52.300 --> 00:02:55.340
because there's a little bit of async overhead.


00:02:55.340 --> 00:02:56.800
But we don't use async


00:02:56.800 --> 00:03:00.600
because we want single threaded applications to be faster.


00:03:00.600 --> 00:03:05.020
We use it because especially IO bound concurrent tasks


00:03:05.020 --> 00:03:08.180
are, they scale better with async.


00:03:08.180 --> 00:03:11.260
The other aspect we wanted to talk about was


00:03:11.260 --> 00:03:12.300
there's just really,


00:03:12.300 --> 00:03:14.980
you have to be careful with looking at benchmark data


00:03:14.980 --> 00:03:18.180
because benchmarks are often geared


00:03:18.180 --> 00:03:21.980
to select it to tell the story that the person


00:03:21.980 --> 00:03:23.980
writing the article wants to


00:03:23.980 --> 00:03:26.580
convey. Or the situation that they're trying to solve, right?


00:03:26.580 --> 00:03:28.860
They're like, oh, I thought this would help. I tried to solve with this.


00:03:28.860 --> 00:03:30.860
Turns out it doesn't. It must be bad.


00:03:30.860 --> 00:03:32.860
Yeah. Right. Okay. So there's some things that


00:03:32.860 --> 00:03:34.860
they're just reasonable statements.


00:03:34.860 --> 00:03:36.860
And there are some valid


00:03:36.860 --> 00:03:38.860
differences, like for instance,


00:03:38.860 --> 00:03:41.660
should web frameworks, the web frameworks we have now,


00:03:41.660 --> 00:03:44.260
should they start converting to


00:03:44.260 --> 00:03:47.180
async or should we just leave them as they are and


00:03:47.180 --> 00:03:51.500
develop new frameworks that are async


00:03:51.500 --> 00:03:53.020
native. Those are some differences.


00:03:53.020 --> 00:03:54.620
There's also different approaches which


00:03:54.620 --> 00:03:55.660
is part of the confusion and part of the


00:03:55.660 --> 00:03:58.220
discussion is


00:03:58.220 --> 00:03:59.820
there's async io, there's also trio and


00:03:59.820 --> 00:04:02.780
twisted and curio,


00:04:02.780 --> 00:04:04.220
and you know how to decide which one.


00:04:04.220 --> 00:04:05.580
There is some confusion there and I think


00:04:05.580 --> 00:04:07.340
that's valid. So


00:04:07.340 --> 00:04:09.340
the discourse and the discussion is


00:04:09.340 --> 00:04:12.220
important, but I think it's important


00:04:12.220 --> 00:04:14.140
Tom points out to say basically


00:04:14.140 --> 00:04:16.540
we need to keep it the benefits of


00:04:14.140 --> 00:04:17.600
of adopting genuine collaborative mindset are good


00:04:17.600 --> 00:04:19.780
rather than a competitive mindset.


00:04:19.780 --> 00:04:21.420
So let's not fight with each other.


00:04:21.420 --> 00:04:24.640
There may be different or everybody's working


00:04:24.640 --> 00:04:26.780
on different little corners of the landscape,


00:04:26.780 --> 00:04:29.420
but we're still trying to appreciate,


00:04:29.420 --> 00:04:33.260
move the move async and move web forward for Python.


00:04:33.260 --> 00:04:35.320
So stay positive, be happy.


00:04:35.320 --> 00:04:37.540
- Be happy man.


00:04:37.540 --> 00:04:40.460
Well, I didn't want to just call this other article out


00:04:40.460 --> 00:04:41.540
and criticize it.


00:04:41.540 --> 00:04:43.460
'Cause I don't think that adds a lot of value.


00:04:43.460 --> 00:04:45.780
I don't think we want to cover items just to criticize them,


00:04:45.780 --> 00:04:50.060
except for their rare moments where it's getting a ton of attention.


00:04:50.060 --> 00:04:52.900
And if you think there's an inaccuracy, you probably should call it.


00:04:52.900 --> 00:04:55.540
I'm glad Tom wrote this article. I think Tom wrote it, right?


00:04:55.540 --> 00:04:59.500
I mean, it's not attributed, but it's from basically his organization.


00:04:59.500 --> 00:05:00.660
So I'm pretty sure.


00:05:00.660 --> 00:05:04.460
Yeah, I had to go look at the GitHub repo to see who did the push


00:05:04.460 --> 00:05:07.260
that commits for this article. So, yep, it was Tom.


00:05:07.260 --> 00:05:10.660
What an interesting way to attribute it. Very cool.


00:05:10.660 --> 00:05:13.780
I honestly believe that other article which you're linking to


00:05:13.780 --> 00:05:16.780
is inaccurate. I think it's trying to apply async


00:05:16.780 --> 00:05:20.740
to a situation where it's not very warranted. It's like,


00:05:20.740 --> 00:05:23.780
this hammer is really bad at unscrewing this nail, or this,


00:05:23.780 --> 00:05:25.140
unscrewing this screw,


00:05:25.140 --> 00:05:27.620
hammers are bad, right? Well, hammers aren't for that.


00:05:27.620 --> 00:05:29.620
Async stuff is for scaling


00:05:29.620 --> 00:05:33.540
when there is a waiting period, when you're, there's a latency when you're waiting on something.


00:05:33.540 --> 00:05:35.300
And the setup there was,


00:05:35.300 --> 00:05:37.540
the DB was 100% maxed out,


00:05:37.540 --> 00:05:41.500
So there was no way to like push that waiting and get more out of the database.


00:05:41.500 --> 00:05:44.620
And there was almost no waiting, like a few milliseconds anyway.


00:05:44.620 --> 00:05:47.020
And so the overhead didn't make any sense.


00:05:47.020 --> 00:05:49.180
Somebody wrote me and said, Michael, please,


00:05:49.180 --> 00:05:50.380
I don't know your thoughts on this.


00:05:50.380 --> 00:05:53.500
So I went ahead and did a little quick test.


00:05:53.500 --> 00:05:57.460
I've got my async course, I've got some stuff where we go and talk to things on the internet,


00:05:57.460 --> 00:05:59.980
where there's like ping time latency and stuff.


00:05:59.980 --> 00:06:03.180
And it goes and gets 10 items off a web server,


00:06:03.180 --> 00:06:05.340
ping times like 100 milliseconds or something.


00:06:05.340 --> 00:06:11.040
it was 750% faster to use the async version than not the async version.


00:06:11.040 --> 00:06:13.380
I changed that number to get 100 of them,


00:06:13.380 --> 00:06:18.940
and it went from 50 seconds, almost one minute down to two and a half seconds.


00:06:18.940 --> 00:06:21.940
1750% faster.


00:06:21.940 --> 00:06:24.440
Async is about scaling the waiting part.


00:06:24.440 --> 00:06:25.440
If there's no waiting,


00:06:25.440 --> 00:06:27.140
there's no benefit, there's just overhead.


00:06:27.140 --> 00:06:30.440
The one thing I have to, I guess I'm gonna be on the other side a little bit.


00:06:30.440 --> 00:06:32.940
The async is not faster article.


00:06:32.940 --> 00:06:37.340
One of the things you did point out was a lot of the async framework benchmarks


00:06:37.340 --> 00:06:41.980
and the benchmark numbers are not really that fair because there


00:06:41.980 --> 00:06:46.480
there's other ways you can speed up the other platforms by, for instance,


00:06:46.480 --> 00:06:49.140
adding processors or CPUs,


00:06:49.140 --> 00:06:52.540
adding more cores to different applications,


00:06:52.540 --> 00:06:56.880
and that maybe the original application was just misconfigured.


00:06:56.880 --> 00:07:00.740
I think that's valid, but it doesn't mean that async is bad.


00:07:00.740 --> 00:07:02.900
- Yeah, I think... - It definitely adds some complexity. Go ahead, Nat.


00:07:02.900 --> 00:07:06.500
If you're comparing it with multi-threading, I think that's the comparison.


00:07:06.500 --> 00:07:12.100
I think if you're just looking at, "I've got single sequential code, does adding async make it faster?"


00:07:12.100 --> 00:07:14.740
If it's something that's IO-bound, yes, is the answer.


00:07:14.740 --> 00:07:19.940
But if you're comparing it to multi-threading, so using the threading module to spawn threads,


00:07:19.940 --> 00:07:22.260
then I think that's where you see the performance improvement.


00:07:22.260 --> 00:07:27.860
So I've got some micro-benchmarks doing TCP port scanning


00:07:27.860 --> 00:07:31.540
across all the different ways you can do concurrency and parallelism in Python.


00:07:31.540 --> 00:07:38.180
And async was the fastest of all those options. And it cuts down a lot of the overhead from


00:07:38.180 --> 00:07:43.300
threading because the way that threads work in Python, they've kind of got this bootstrap


00:07:43.300 --> 00:07:47.380
module that kind of has to load some of the stuff that it needs for context.


00:07:47.380 --> 00:07:53.220
And whereas async doesn't need that. So it kind of cuts down a lot of that overhead. I think


00:07:53.220 --> 00:07:58.420
what are the challenges I've had with async in the earlier versions where it got released was the amount of


00:07:58.420 --> 00:08:00.660
boilerplate code and


00:08:00.660 --> 00:08:05.060
kind of like infrastructure you needed to put in just to do something really simple, which is like


00:08:05.060 --> 00:08:07.540
I want to run this function asynchronously


00:08:07.540 --> 00:08:11.460
Like I don't care about what how the event loops and all that kind of stuff


00:08:11.460 --> 00:08:14.660
Like i've used other languages. I want to kick it off and forget it


00:08:14.660 --> 00:08:18.420
It's like why can't I just call this function and let it go? What is all this stuff i'm doing?


00:08:18.500 --> 00:08:24.580
Yeah, exactly. So I've used other languages where the async is a bit more fluent. I've been using


00:08:24.580 --> 00:08:33.300
the Kotlin async last week and I've used .NET, C#, the task API, which is really, really nice to


00:08:33.300 --> 00:08:39.220
use. The other challenge is which bit of code owns the event loop. And that's like an anti-pattern


00:08:39.220 --> 00:08:44.020
where you end up with a God class that's kind of doing everything. And you've kind of then got to


00:08:44.020 --> 00:08:49.220
think about how you factor the application so that, okay, which bit owns the event loop?


00:08:49.220 --> 00:08:54.580
How do I construct that? Where does it end? We were helped on the real Python community


00:08:54.580 --> 00:08:59.780
group. Somebody was asking some questions. They'd async or is it multi-threading into their code?


00:08:59.780 --> 00:09:03.060
And we were just trying to get them to refactor it to take all the logic out of the


00:09:03.060 --> 00:09:09.060
function that was being multi-threaded and put it into the master and just put the minimal amount


00:09:09.060 --> 00:09:13.300
of code in the threaded function. I think there's still a whole bunch of stuff like that, which


00:09:13.300 --> 00:09:17.340
people need some good learning on and they need to get used to.


00:09:17.340 --> 00:09:19.140
It's like a different way of writing code.


00:09:19.140 --> 00:09:24.260
It's not just something that you can sprinkle on top and it suddenly makes your code faster.


00:09:24.260 --> 00:09:26.580
I think that's the, that's part of the misunderstanding.


00:09:26.580 --> 00:09:26.800
Yeah.


00:09:26.800 --> 00:09:32.220
Especially in Python, where it takes that extra step of you got to manage the loop and then you've got to run it.


00:09:32.220 --> 00:09:36.300
And it's not like kind of, I've kicked off a bunch of stuff and now it's all just happening.


00:09:36.300 --> 00:09:36.640
Yeah.


00:09:36.640 --> 00:09:39.540
They made that simpler in 3.7 and 3.8.


00:09:40.040 --> 00:09:43.040
They've kind of got some shortcut modules that...


00:09:43.040 --> 00:09:47.340
So I think it's now like one or two lines of extra code you need as boilerplate


00:09:47.340 --> 00:09:50.240
just to get Async.io up and running.


00:09:50.240 --> 00:09:52.540
So it's a lot better than it was in the earlier versions.


00:09:52.540 --> 00:09:55.140
But even if it's not a lot of extra code,


00:09:55.140 --> 00:09:57.540
and Tom Christie points this out,


00:09:57.540 --> 00:10:01.740
multithreading and Async are more complicated than not.


00:10:01.740 --> 00:10:03.440
So that's just a reality.


00:10:03.440 --> 00:10:06.740
Whether or not the code's too much more complicated,


00:10:06.740 --> 00:10:08.840
the entire design is different.


00:10:08.840 --> 00:10:12.240
And it's a reality that isn't to say,


00:10:12.240 --> 00:10:14.680
don't do async or don't do multithreading.


00:10:14.680 --> 00:10:16.680
It's just, you don't get it for free.


00:10:16.680 --> 00:10:19.080
I think almost the opposite, in a sense.


00:10:19.080 --> 00:10:22.080
I think the code is not complicated enough.


00:10:22.080 --> 00:10:26.080
On the other hand, like it looks close enough that people don't


00:10:26.080 --> 00:10:30.080
realize they have to change their mindset and like approach it in an entirely different way.


00:10:30.080 --> 00:10:31.580
And they feel like, oh, I just call it this way now.


00:10:31.580 --> 00:10:33.780
But then they run into these issues.


00:10:33.780 --> 00:10:35.780
They're like, oh, this is broken. Like, why is it not working?


00:10:35.780 --> 00:10:36.780
Or, you know, like,


00:10:36.780 --> 00:10:41.020
You think you can just do it one way, but you really, if you don't have a little deeper understanding,


00:10:41.020 --> 00:10:43.020
you can just go down the wrong path also.


00:10:43.020 --> 00:10:43.520
Yeah.


00:10:43.520 --> 00:10:45.180
Alright, well, that was interesting.


00:10:45.180 --> 00:10:47.420
Thanks for bringing that up, and thanks, Tom, for writing that.


00:10:47.420 --> 00:10:50.780
Anthony, I'm glad you're here to have another opinion as well.


00:10:50.780 --> 00:10:54.380
I agree that the C# async and await stuff is like the gold standard.


00:10:54.380 --> 00:10:55.820
It's really, really well done.


00:10:55.820 --> 00:10:59.180
So let's talk about something way simpler.


00:10:59.180 --> 00:11:02.460
You want to be a good citizen of your GitHub projects, right?


00:11:02.460 --> 00:11:02.960
Sure.


00:11:02.960 --> 00:11:04.960
You want to have good commit messages.


00:11:04.960 --> 00:11:07.720
There's a major change, you want to bump the version,


00:11:07.720 --> 00:11:09.460
all those kinds of things, right?


00:11:09.460 --> 00:11:11.560
So you should use Comitizen.


00:11:11.560 --> 00:11:16.560
Comitizen is a command line interface,


00:11:16.560 --> 00:11:19.860
basically, that wraps around Git,


00:11:19.860 --> 00:11:23.040
but it has a menu option for different things,


00:11:23.040 --> 00:11:25.920
and it guides you through doing them a little bit better.


00:11:25.920 --> 00:11:30.180
So you can say, "CZ," and it'll drop down a list.


00:11:30.180 --> 00:11:32.460
You can pick commit or whatever,


00:11:32.460 --> 00:11:34.020
and then it'll ask you questions like,


00:11:34.020 --> 00:11:35.260
"Okay, well, what are you trying to do?


00:11:35.260 --> 00:11:36.500
Are you trying to add a feature?


00:11:36.500 --> 00:11:38.300
Are you trying to do a bug fix?


00:11:38.300 --> 00:11:39.140
Is it a PR?"


00:11:39.140 --> 00:11:40.620
And it'll ask you a couple of questions


00:11:40.620 --> 00:11:43.060
and it'll generate interesting things like,


00:11:43.060 --> 00:11:45.140
"Hey, is this a breaking change?


00:11:45.140 --> 00:11:48.780
Would you like me to increment the major version


00:11:48.780 --> 00:11:50.740
as part of this?" and so on.


00:11:50.740 --> 00:11:52.740
So it does all sorts of interesting things


00:11:52.740 --> 00:11:55.900
around kind of structuring your interaction with Git.


00:11:55.900 --> 00:11:59.180
So rules for projects, auto-bumping versions,


00:11:59.180 --> 00:12:01.420
auto-change log generation, all that kind of stuff.


00:12:01.420 --> 00:12:02.900
And it's really meant for teams


00:12:02.900 --> 00:12:05.540
So they all interact with Git in a consistent way.


00:12:05.540 --> 00:12:06.380
- This is cool.


00:12:06.380 --> 00:12:07.400
- Yeah, neat, right?


00:12:07.400 --> 00:12:08.640
Yeah, and if you go to it,


00:12:08.640 --> 00:12:10.240
it has a beautiful animated GIF


00:12:10.240 --> 00:12:13.180
showing how it works right on the GitHub repo.


00:12:13.180 --> 00:12:14.020
Gotta love that.


00:12:14.020 --> 00:12:15.580
- So do you, I was just curious,


00:12:15.580 --> 00:12:17.660
do you normally commit through command line


00:12:17.660 --> 00:12:19.060
or through something else?


00:12:19.060 --> 00:12:22.260
- No, no, I commit either through PyCharm or SourceTree,


00:12:22.260 --> 00:12:23.180
depending on what I'm doing.


00:12:23.180 --> 00:12:24.340
- Yeah, I do both.


00:12:24.340 --> 00:12:25.180
- Yeah.


00:12:25.180 --> 00:12:26.740
- If I'm in PyCharm in a project,


00:12:26.740 --> 00:12:28.060
then I'll do it through there.


00:12:28.060 --> 00:12:30.580
If I'm doing something else,


00:12:30.580 --> 00:12:33.460
So like sometimes it's like little hacks or scripts


00:12:33.460 --> 00:12:35.340
and stuff like that, then I'll do it on the command line.


00:12:35.340 --> 00:12:38.640
- Like a presentation that's in say PowerPoint or something.


00:12:38.640 --> 00:12:41.340
- Yeah, yeah, I'm committing my PowerPoint presentation in.


00:12:41.340 --> 00:12:43.460
(laughing)


00:12:43.460 --> 00:12:44.620
Then I'd use the command line,


00:12:44.620 --> 00:12:46.780
but I've got a whole bunch of aliases to do


00:12:46.780 --> 00:12:48.540
'cause you should always sign your commits


00:12:48.540 --> 00:12:49.380
and stuff like that.


00:12:49.380 --> 00:12:51.420
So put some aliases and something else


00:12:51.420 --> 00:12:53.740
would be really helpful that a lot of people don't know


00:12:53.740 --> 00:12:55.580
is that you know how if you do git commit


00:12:55.580 --> 00:12:58.740
on the command line, it uses Vim as the message editor


00:12:58.740 --> 00:12:59.580
by default.


00:12:59.580 --> 00:13:05.380
actually change that. So if you wanted to use another editor, like Emacs or notepad


00:13:05.380 --> 00:13:11.020
plus plus or maybe even Microsoft Word, then you can change the configuration. And in the


00:13:11.020 --> 00:13:13.260
command line, you never have to use them ever again.


00:13:13.260 --> 00:13:21.980
I like that. I think a great prank that people said, I'll do it. Don't maybe not all sneak


00:13:21.980 --> 00:13:25.740
into your co workers computer if they run away for lunch and don't lock it and set word


00:13:25.740 --> 00:13:27.380
as the editor.


00:13:27.380 --> 00:13:29.380
So next time you go to do something


00:13:29.380 --> 00:13:30.620
and there's a merge error,


00:13:30.620 --> 00:13:31.620
like it pops up word,


00:13:31.620 --> 00:13:33.180
you're like, "What in the world is going on here?"


00:13:33.180 --> 00:13:34.900
- But your commit messages are going to be like


00:13:34.900 --> 00:13:36.780
10,000 lines of XML.


00:13:36.780 --> 00:13:38.460
(laughing)


00:13:38.460 --> 00:13:40.340
- Exactly, exactly.


00:13:40.340 --> 00:13:41.820
Now that's cool.


00:13:41.820 --> 00:13:43.220
This thing, this commitizen


00:13:43.220 --> 00:13:45.260
also comes with a get pre-commit hook.


00:13:45.260 --> 00:13:47.940
So you can set it up there as well.


00:13:47.940 --> 00:13:49.660
And you can ask it for things like,


00:13:49.660 --> 00:13:53.260
you just say, run the bump or generate the change log


00:13:53.260 --> 00:13:55.500
or validate the schema of a message


00:13:55.500 --> 00:13:57.500
or whatever. So pretty cool.


00:13:57.500 --> 00:13:59.860
It generates a changelog. I've been


00:13:59.860 --> 00:14:01.860
looking for something to do that for ages.


00:14:01.860 --> 00:14:04.540
I've got projects in Git and when I make a release,


00:14:04.540 --> 00:14:08.740
I have to remember what got merged, which PRs got merged,


00:14:08.740 --> 00:14:11.300
who did them, so you can attribute them.


00:14:11.300 --> 00:14:14.260
I don't know what the output is, but it says


00:14:14.260 --> 00:14:19.860
you know, CZ space changelog or CH for the shortness


00:14:19.860 --> 00:14:22.500
is what it will do. And it says generates changelog


00:14:22.500 --> 00:14:25.100
by overwriting an existing file if it's already there.


00:14:25.100 --> 00:14:28.140
I don't know how it knows how far back to go.


00:14:28.140 --> 00:14:32.240
Maybe from like a major version bump or something like that.


00:14:32.240 --> 00:14:35.400
But anyway, give it a try and give us a report.


00:14:35.400 --> 00:14:37.400
We'll find out if it's actually useful for you.


00:14:37.400 --> 00:14:39.400
All right, well, that's it for commitizen.


00:14:39.400 --> 00:14:41.400
It seems like a cool little shortcut.


00:14:41.400 --> 00:14:44.200
I don't know if I'll use it or not because I don't work in


00:14:44.200 --> 00:14:46.200
large teams that really need this very much.


00:14:46.200 --> 00:14:47.840
So it's just like one more thing.


00:14:47.840 --> 00:14:49.540
But if I did, it would be cool.


00:14:49.540 --> 00:14:52.200
Next up, I've got around PyCon.


00:14:52.200 --> 00:14:55.000
Weren't we supposed to meet at PyCon in Pittsburgh and share a beer?


00:14:55.000 --> 00:14:58.080
the three of us and like, no, didn't happen.


00:14:58.080 --> 00:14:59.080
It didn't happen.


00:14:59.080 --> 00:15:00.360
It was touch and go as well.


00:15:00.360 --> 00:15:05.360
Like I remember a few weeks before whether or not I was going to happen.


00:15:05.360 --> 00:15:07.960
I mean, I think canceling it was definitely the right decision.


00:15:07.960 --> 00:15:09.720
Oh, and it wasn't really canceled.


00:15:09.720 --> 00:15:11.000
I mean, it was moved online.


00:15:11.000 --> 00:15:15.080
And that's what I wanted to talk about was, you know, with all the pycons


00:15:15.080 --> 00:15:18.760
happening all around the world, like I've been looking at which ones


00:15:18.760 --> 00:15:20.440
have made the move to go online.


00:15:20.440 --> 00:15:23.800
I mean, there's I guess there's like pros and cons to this.


00:15:24.000 --> 00:15:28.720
I know some people miss out on meeting people and chatting to people on the hallway track.


00:15:28.720 --> 00:15:32.320
You're never going to replace that with an online conference. And I think,


00:15:32.320 --> 00:15:39.520
set your expectations low when it comes to interaction with other people. But the one


00:15:39.520 --> 00:15:47.680
big upside is that I think it makes the talks more accessible. So if I go to a big PyCon,


00:15:47.680 --> 00:15:53.440
I probably say I watch maybe like 10 talks over the PyCon, and there's probably like 100.


00:15:53.440 --> 00:15:56.800
that I could have watched if I just sat in the talk rooms.


00:15:56.800 --> 00:15:58.600
But like, that's not half the reason I'm there


00:15:58.600 --> 00:15:59.660
is not to watch the talks.


00:15:59.660 --> 00:16:01.780
Like I watch a lot of them afterwards.


00:16:01.780 --> 00:16:05.280
So I think what's been happening is quite a few PyCons


00:16:05.280 --> 00:16:06.600
have just canceled altogether.


00:16:06.600 --> 00:16:11.600
PyCon Israel, Odessa in Ukraine, EuroCyPy Brazil,


00:16:11.600 --> 00:16:14.680
PyCon UK, PyCon Thailand, PyCon Spain,


00:16:14.680 --> 00:16:18.240
DragonPy, which is Slovenia, PyLatam,


00:16:18.240 --> 00:16:21.080
PyCon DE, which is Germany, and PyCon CZ,


00:16:21.080 --> 00:16:23.360
which I assume is the Czech Republic.


00:16:23.360 --> 00:16:26.020
They've all been canceled altogether.


00:16:26.020 --> 00:16:28.160
And then a number of PyCon conferences have said,


00:16:28.160 --> 00:16:29.760
we're going to go online.


00:16:29.760 --> 00:16:32.800
And the cool thing about these is that anywhere in the world


00:16:32.800 --> 00:16:34.600
you can go and watch the talks.


00:16:34.600 --> 00:16:36.640
And I think something that's kind of happened


00:16:36.640 --> 00:16:40.280
as part of this is that some of the big PyCons like US


00:16:40.280 --> 00:16:45.180
and like Europe, they had like video crews


00:16:45.180 --> 00:16:48.520
to film the talks and like, you know,


00:16:48.520 --> 00:16:52.160
write all the subtitles and figure out how all the AV


00:16:52.160 --> 00:16:54.320
to get the sound nice and stuff like that.


00:16:54.320 --> 00:16:56.480
But other than the really big conferences,


00:16:56.480 --> 00:16:58.320
the smaller ones couldn't really figure that out.


00:16:58.320 --> 00:17:00.720
So some of them had the talks online,


00:17:00.720 --> 00:17:03.600
but like the quality was really not watchable.


00:17:03.600 --> 00:17:05.960
But a big change with moving all the talks online


00:17:05.960 --> 00:17:10.040
is that people are recording at home in lockdown


00:17:10.040 --> 00:17:12.200
and the quality tends to be a lot better.


00:17:12.200 --> 00:17:14.080
Like you can hear what they're saying


00:17:14.080 --> 00:17:15.360
and the audio is better.


00:17:16.560 --> 00:17:21.720
And so there's more focus on getting the online experience better.


00:17:21.720 --> 00:17:28.960
And as an added bonus, just as a Python enthusiast, even, or a PyCon enthusiast,


00:17:28.960 --> 00:17:34.400
you can just sit and watch PyCon talks from all over the world in your slippers, or in your


00:17:34.400 --> 00:17:35.480
Ugg boots if you're in Australia.


00:17:35.480 --> 00:17:41.440
And it's great, like I, you know, beam it onto the TV using Google Chromecast.


00:17:41.800 --> 00:17:46.760
And you can just sit in your living room and watch like PyCon talks from us watching some from Japan,


00:17:46.760 --> 00:17:53.400
some from like the some of the US conferences, some of the European conferences, and there's some really good talks


00:17:53.400 --> 00:18:00.200
that would have made great talks, you know, the bigger conferences that are in the smaller regional ones that are in


00:18:00.200 --> 00:18:06.440
there. So some of the ones that I found, which are online, like on us, obviously, the Python web conference,


00:18:07.000 --> 00:18:14.760
Flask on SciPy and PyHEP, which is high energy physics, I think, will be online.


00:18:14.760 --> 00:18:20.680
EuroPython will be online. PyCon Japan, they released a whole bunch of talks this week.


00:18:20.680 --> 00:18:26.600
PyCon AU will be online. And I've submitted a talk for that, fingers crossed. PyCon Bolivia


00:18:26.600 --> 00:18:32.200
will be online. PyCon ZERE, which is South Africa, will be online. PyCon APAC in Malaysia


00:18:32.200 --> 00:18:39.080
will be online, Hong Kong, Paibei, which is in the US and California and Paikon Africa will all be


00:18:39.080 --> 00:18:46.200
online. So there's at least, from what I could find, at least 15 Paikons around the world. So


00:18:46.200 --> 00:18:49.800
let's say each one has like 50 talks. That's like a lot of talks.


00:18:49.800 --> 00:18:55.240
That is a ton of talks. And you can just drop into some of these places that you might have a really


00:18:55.240 --> 00:19:00.680
hard time visiting, like, maybe Malaysia is far away, or Africa is far away, but you would love


00:19:00.680 --> 00:19:04.240
to experience what the community is like there. Yeah, a lot of great stuff.


00:19:04.240 --> 00:19:09.940
There are actually a few PyCons that from what I can tell are happening in person. Around


00:19:09.940 --> 00:19:14.600
the world, I guess the lockdown situation is very different depending on the country.


00:19:14.600 --> 00:19:21.840
So PyCon Taiwan, PyCon Italia and PyCon Russia from what I can tell are still happening.


00:19:21.840 --> 00:19:27.040
So yeah, I know the situation in Taiwan is much better. Italy, I think is late in the


00:19:27.040 --> 00:19:31.120
year. So they're probably hoping that that's going to calm down in Russia. I don't know


00:19:31.120 --> 00:19:34.080
what's going on there. But I picked out a few talks as well that I really liked


00:19:34.080 --> 00:19:40.960
from some of the regional conferences. Deceptive Security Using Python by Kajendra Deshpande.


00:19:40.960 --> 00:19:48.720
If Statements are a Codesmell by Ali from Chippy. That was the PyCon US talk. Stop Using Mocks


00:19:48.720 --> 00:19:54.800
by Harry Percival. That's a great talk. This one is in Japanese, and there are no subtitles. But


00:19:54.800 --> 00:19:58.960
But if you speak Japanese, network analysis and text PEP in analysis,


00:19:58.960 --> 00:20:03.600
which is like an analysis of all the peps by Tomoko Furuki,


00:20:03.600 --> 00:20:07.680
using Python to detect vulnerabilities and binaries by Terry Oda.


00:20:07.680 --> 00:20:12.160
That was a good talk and optimize Python and Django with Postgres


00:20:12.160 --> 00:20:15.720
superpowers by Louise Gagnon,


00:20:15.720 --> 00:20:18.120
which was a PyCon US talk. So yeah,


00:20:18.120 --> 00:20:21.560
I've made a little playlist of stuff that I really enjoyed from some of the


00:20:21.560 --> 00:20:24.520
regional conferences and the links will be in the show notes.


00:20:24.600 --> 00:20:25.680
- Nice. - These are all great.


00:20:25.680 --> 00:20:27.160
Yeah, love it.


00:20:27.160 --> 00:20:30.200
And you talked about the smaller conferences


00:20:30.200 --> 00:20:32.280
not necessarily having the AV set up,


00:20:32.280 --> 00:20:33.780
put things online properly.


00:20:33.780 --> 00:20:35.920
Now all these talks that went online,


00:20:35.920 --> 00:20:38.620
they were made digitally native, right?


00:20:38.620 --> 00:20:40.960
They were made first for this experience, right?


00:20:40.960 --> 00:20:43.200
They weren't like, oh, there's a camera way back there


00:20:43.200 --> 00:20:45.120
and we'll just zoom in and we'll try to show it, right?


00:20:45.120 --> 00:20:47.800
It was like yours, you had sort of an introduction.


00:20:47.800 --> 00:20:50.040
It was like the video we got here,


00:20:50.040 --> 00:20:52.000
you taking back and talking,


00:20:52.000 --> 00:20:55.040
then it would just focus in on the screen and whatnot.


00:20:55.040 --> 00:20:56.120
So a little bit different there.


00:20:56.120 --> 00:20:56.960
- Yeah, definitely.


00:20:56.960 --> 00:20:59.760
And you should definitely watch Brian's talk


00:20:59.760 --> 00:21:00.680
from PyCon US.


00:21:00.680 --> 00:21:01.720
I did watch your talk, Brian,


00:21:01.720 --> 00:21:04.260
and you should watch mine as well if you're interested,


00:21:04.260 --> 00:21:06.480
which is on the Wise Python Sloan.


00:21:06.480 --> 00:21:08.280
Brian's was on parameter,


00:21:08.280 --> 00:21:09.440
it was on testing, wasn't it, Brian?


00:21:09.440 --> 00:21:10.840
- Parameterized testing.


00:21:10.840 --> 00:21:12.400
- Yeah, parameterized testing.


00:21:12.400 --> 00:21:13.240
- Absolutely.


00:21:13.240 --> 00:21:14.080
- That was a good talk.


00:21:14.080 --> 00:21:15.160
- And I was surprised to hear my name


00:21:15.160 --> 00:21:16.800
mentioned in Harry's talk,


00:21:16.800 --> 00:21:18.480
which is, it was cool.


00:21:18.480 --> 00:21:19.320
- Oh yeah.


00:21:19.320 --> 00:21:20.140
(laughing)


00:21:20.140 --> 00:21:21.020
- That's cool.


00:21:21.020 --> 00:21:21.860
- Yeah, very nice.


00:21:21.860 --> 00:21:24.900
And it's a bummer to not go to these conferences,


00:21:24.900 --> 00:21:26.360
but at the same time,


00:21:26.360 --> 00:21:28.980
there are a bunch of people who now can experience


00:21:28.980 --> 00:21:30.780
those presentations who otherwise


00:21:30.780 --> 00:21:31.620
wouldn't have been able to.


00:21:31.620 --> 00:21:32.980
- Yeah, this is a huge benefit.


00:21:32.980 --> 00:21:34.940
- And I'm really excited to see, like you said,


00:21:34.940 --> 00:21:38.260
there's conferences that either had bad video


00:21:38.260 --> 00:21:42.500
or just couldn't afford a great AV crew or didn't.


00:21:42.500 --> 00:21:44.100
And some of the conferences will just do


00:21:44.100 --> 00:21:47.700
like the entire day video and you have to pick it out


00:21:47.700 --> 00:21:48.540
and that's more difficult.


00:21:48.540 --> 00:21:50.340
- I'm four hours and 17 minutes into it.


00:21:50.340 --> 00:21:51.180
- Oh, okay.


00:21:51.180 --> 00:21:52.000
- Yeah.


00:21:52.000 --> 00:21:52.840
- That's discoverable.


00:21:52.840 --> 00:21:54.240
- I'm really excited to be able to see


00:21:54.240 --> 00:21:56.040
all these videos from all over.


00:21:56.040 --> 00:21:58.400
Although I won't be able to, I only speak English.


00:21:58.400 --> 00:22:01.240
So how many languages do you speak, Antony?


00:22:01.240 --> 00:22:03.720
- Oh me, oh, I'm learning Japanese.


00:22:03.720 --> 00:22:06.520
So I was watching the PyCon JP talk


00:22:06.520 --> 00:22:09.520
and catching every 10th word.


00:22:09.520 --> 00:22:10.360
- Okay.


00:22:10.360 --> 00:22:12.120
- And the slides definitely help.


00:22:12.120 --> 00:22:14.000
And I speak Pidgin French as well.


00:22:14.000 --> 00:22:14.840
- Okay.


00:22:14.840 --> 00:22:17.120
I was impressed that you were watching the Japanese videos.


00:22:17.120 --> 00:22:18.480
- Oh, that's how I discovered as well


00:22:18.480 --> 00:22:21.920
your Python testing with pytest book in Japanese.


00:22:21.920 --> 00:22:25.280
It was like part of the, it was on the slide and I was like,


00:22:25.280 --> 00:22:29.920
it just said lots of stuff on the cover in Japanese and then you saw the word Brian Okken.


00:22:29.920 --> 00:22:31.120
I was like, oh, I know that guy.


00:22:31.120 --> 00:22:35.040
Yeah, I got to try to get somebody that travels to Japan


00:22:35.040 --> 00:22:38.080
when things open up to pick up a copy for me.


00:22:38.080 --> 00:22:38.720
Yeah, definitely.


00:22:38.720 --> 00:22:38.960
See.


00:22:38.960 --> 00:22:39.920
Yeah, that's cool.


00:22:39.920 --> 00:22:41.360
Also cool, speaking of your book,


00:22:41.360 --> 00:22:43.280
people want to support the show, they could get your book.


00:22:43.280 --> 00:22:44.320
Yeah, that'd be great.


00:22:44.320 --> 00:22:46.240
I wanted to do something special.


00:22:46.240 --> 00:22:50.640
I was looking at the reviews online on Amazon, but I know there's reviews other places,


00:22:50.640 --> 00:22:55.840
but this was really kind of cool. I'm going to do an excerpt from Patrick Kennedy's review.


00:22:55.840 --> 00:23:00.560
"This book provides a gentle introduction to what the pytest framework is, how to use it,


00:23:00.560 --> 00:23:06.320
and how to develop tests using pytest. I had never understood what fixtures in pytest were


00:23:06.320 --> 00:23:10.720
prior to this book, but now they make complete sense to me. Excellent book, and I highly


00:23:10.720 --> 00:23:13.920
they recommend it to anyone wanting to learn about pytest.


00:23:13.920 --> 00:23:16.560
So thanks, Patrick, that's a cool review.


00:23:16.560 --> 00:23:18.220
And I went and looked at the numbers.


00:23:18.220 --> 00:23:20.540
There's thousands of people that have read the book,


00:23:20.540 --> 00:23:22.380
and I know many of the listeners have,


00:23:22.380 --> 00:23:24.080
so I would love to hear more reviews.


00:23:24.080 --> 00:23:26.120
So if you have a review somewhere,


00:23:26.120 --> 00:23:28.680
either on Amazon or Goodreads or somewhere else,


00:23:28.680 --> 00:23:30.040
let me know where the review is,


00:23:30.040 --> 00:23:32.040
and I'd love to hear what you think.


00:23:32.040 --> 00:23:33.520
That'd be cool. - Awesome.


00:23:33.520 --> 00:23:37.100
I think the timing for this will still work out, fairly.


00:23:37.100 --> 00:23:38.680
Some of our courses are offered


00:23:38.680 --> 00:23:40.640
in the Humble Bundle right now.


00:23:40.640 --> 00:23:43.200
So there's a special Python Humble Bundle going on.


00:23:43.200 --> 00:23:45.920
This episode will be out in a week, so it should be wrapping up,


00:23:45.920 --> 00:23:48.400
but it should still be going if you listened soon enough.


00:23:48.400 --> 00:23:50.640
I think it ends July 22nd.


00:23:50.640 --> 00:23:55.120
So before then, if you want to get a whole bunch of Python goodies,


00:23:55.120 --> 00:23:57.760
including free courses from Talk Python,


00:23:57.760 --> 00:23:58.760
go there and check it out.


00:23:58.760 --> 00:24:01.400
And of course, check out all of our courses as well.


00:24:01.400 --> 00:24:03.760
You get a lot for your value, even without the bundle.


00:24:03.760 --> 00:24:05.280
- Yeah, for sure. - It's good.


00:24:05.280 --> 00:24:06.120
Thanks.


00:24:06.120 --> 00:24:06.960
You know what?


00:24:06.960 --> 00:24:09.360
What happens if you try to zip stuff together,


00:24:09.360 --> 00:24:13.360
as an inner tool zip. And they, they don't match just like the


00:24:13.360 --> 00:24:15.960
zipper stick at the end. Does it go all the way to the end and


00:24:15.960 --> 00:24:19.040
then come off? Like is it when you're sleeping bag comes apart


00:24:19.040 --> 00:24:21.040
in the middle and you're like, I'm gonna be really cold tonight.


00:24:21.040 --> 00:24:22.720
I can't fix this. What happens?


00:24:22.720 --> 00:24:28.600
Whatever doesn't fit just gets cut off. So brutal. Yeah, so I


00:24:28.600 --> 00:24:33.320
wanted to highlight PEP 618. So I have actually run into this a


00:24:33.320 --> 00:24:36.840
lot. So in the normal circumstances, so zip's a cool


00:24:36.840 --> 00:24:41.480
thing if you haven't I'm sure everybody's used it but if you haven't used it before it just takes


00:24:41.480 --> 00:24:47.480
two two intervals or more more than one it's often two in my case but you can do more than two


00:24:47.480 --> 00:24:54.280
intervals and then makes a new iterable with pairwise tuples of whatever's in there so if


00:24:54.280 --> 00:24:59.800
you've got a list with one two three and abc and another list you can zip them up and your your


00:24:59.800 --> 00:25:05.160
elements of your new list will be 1a, 2b, 3c, that sort of thing.


00:25:05.160 --> 00:25:10.680
So, often they're used where you just kind of know that all the links are supposed to be the same


00:25:10.680 --> 00:25:13.480
because if they're not the same, it chops them off.


00:25:13.480 --> 00:25:17.880
It does it, you get a list of the shortest, shortest common list.


00:25:17.880 --> 00:25:21.640
And that's surprising and sometimes.


00:25:21.640 --> 00:25:25.640
It might be okay, but it's probably indicative of like bad data.


00:25:25.640 --> 00:25:29.540
And who knows if it's off by the end or off by the beginning, or


00:25:29.540 --> 00:25:31.840
they shouldn't go together, it's not a good sign.


00:25:31.840 --> 00:25:35.440
When I'm using it and it's a kind of a mission critical sort of thing,


00:25:35.440 --> 00:25:39.640
I'm definitely checking the links first, and it annoys me that I have to.


00:25:39.640 --> 00:25:43.140
So the change is in PEP618, it's not,


00:25:43.140 --> 00:25:45.540
you know, it has been accepted for 3.10.


00:25:45.540 --> 00:25:47.840
So it will go into Python 3.10,


00:25:47.840 --> 00:25:51.140
and the change is really there's a new keyword, so


00:25:51.140 --> 00:25:53.840
in zip you can add strict equals true,


00:25:53.840 --> 00:25:59.280
And that will, if the links are not the same, it'll raise a value error.


00:25:59.280 --> 00:26:02.760
So you'll get an exception if the links are not the same.


00:26:02.760 --> 00:26:05.760
So you can just instead of, I think it's a good thing.


00:26:05.760 --> 00:26:07.520
It'll simplify a lot of my code.


00:26:07.520 --> 00:26:08.520
Yeah, Anthony, what do you think?


00:26:08.520 --> 00:26:09.680
I never use zip.


00:26:09.680 --> 00:26:12.720
I only use it in the answer to a Stack Overflow question,


00:26:12.720 --> 00:26:16.160
where that's the solution and I copy and paste it into my code.


00:26:16.160 --> 00:26:19.680
Normally about like, how do I merge two dictionaries? I think that's like,


00:26:20.360 --> 00:26:24.840
And it's like, oh, you just do star star list star star zip star star something.


00:26:24.840 --> 00:26:28.040
Okay, I don't understand how that works.


00:26:28.040 --> 00:26:30.200
You're like star star, maybe more explicit.


00:26:30.200 --> 00:26:33.960
So let's just stick it in and see if it works.


00:26:33.960 --> 00:26:36.520
Yeah, I never use zip. So that sounds useful.


00:26:36.520 --> 00:26:44.680
I did stumble across 3.9 has a some new functions on the strings, remove suffix and remove.


00:26:44.680 --> 00:26:45.160
Yes.


00:26:45.160 --> 00:26:49.640
Yeah. So we talked about that last time, which I don't think we've released. So you wouldn't know.


00:26:49.640 --> 00:26:51.000
- Oh.


00:26:51.000 --> 00:26:53.320
- But it's so confusing because string.


00:26:53.320 --> 00:26:55.880
Like if you have the word first, the number one,


00:26:55.880 --> 00:26:58.920
then st and you said strip st,


00:26:58.920 --> 00:27:00.640
it's not necessarily taking away the st.


00:27:00.640 --> 00:27:03.240
It will, but it might also take an s or a t


00:27:03.240 --> 00:27:05.160
off the front as well, right?


00:27:05.160 --> 00:27:07.860
It's take away all the characters that are in this list


00:27:07.860 --> 00:27:12.120
no matter what, not this exact substring, right?


00:27:12.120 --> 00:27:13.760
And so yeah, that's super valuable.


00:27:13.760 --> 00:27:14.860
I'm really excited to have that


00:27:14.860 --> 00:27:16.520
because it should have been there before.


00:27:16.520 --> 00:27:18.800
I think they should have come up with a more fun exception


00:27:18.800 --> 00:27:21.360
than a value error. Like it could derive from value error,


00:27:21.360 --> 00:27:27.080
but it should be like, you know, the zipper broke exception error or like,


00:27:27.080 --> 00:27:31.720
come on, opportunity missed. All right, let's stick with the standard library.


00:27:31.720 --> 00:27:36.560
This was really interesting to me. I've had Paul Gensel on talk by thon recently.


00:27:36.560 --> 00:27:39.680
I don't know if you guys have listened to it. So you might not be able to ask


00:27:39.680 --> 00:27:43.880
you the question with you, you actually knowing, but this always frustrated me


00:27:43.880 --> 00:27:46.760
when I go to a time delta,


00:27:46.760 --> 00:27:50.720
I do some math, like subtracting one day time from another,


00:27:50.720 --> 00:27:52.680
I get it back, I'm like, cool,


00:27:52.680 --> 00:27:54.320
it has a certain number of seconds.


00:27:54.320 --> 00:27:58.000
It also has days and other things on it as well,


00:27:58.000 --> 00:27:59.320
but those aren't like total days.


00:27:59.320 --> 00:28:03.200
It's not like 7.2 days, it's like eight days


00:28:03.200 --> 00:28:05.640
and then some negative seconds or something weird,


00:28:05.640 --> 00:28:08.640
right, really weird, like negative and positive time.


00:28:08.640 --> 00:28:11.280
So those are more for like internal computation,


00:28:11.280 --> 00:28:13.000
or as I can tell, they probably should be hidden.


00:28:13.000 --> 00:28:17.500
But anyway, if I want to know, say, how many hours has it been?


00:28:17.500 --> 00:28:18.700
How do I do that?


00:28:18.700 --> 00:28:21.000
I would go dt.totalSeconds.


00:28:21.000 --> 00:28:23.300
Okay, well, there's 60 seconds, so I divide by 60,


00:28:23.300 --> 00:28:25.500
and I want to know, that's minutes, and I want to know hours,


00:28:25.500 --> 00:28:26.900
so I divide by 60 again.


00:28:26.900 --> 00:28:28.100
And I never put it together.


00:28:28.100 --> 00:28:29.600
I don't divide by, like, 3,600.


00:28:29.600 --> 00:28:31.500
I divide by 60 and then divide by 60.


00:28:31.500 --> 00:28:34.500
So it's clear I'm trying to take away the, you know,


00:28:34.500 --> 00:28:36.300
get to minutes and then to hours.


00:28:36.300 --> 00:28:38.000
Is there a better way?


00:28:38.000 --> 00:28:41.000
Right, why is there not a total hours, a total weeks,


00:28:41.000 --> 00:28:43.680
a total months, whatever, on there.


00:28:43.680 --> 00:28:45.440
Like, why do I have to always do math


00:28:45.440 --> 00:28:46.760
whenever I want to know simple things,


00:28:46.760 --> 00:28:48.160
like how many hours have passed?


00:28:48.160 --> 00:28:49.040
- Okay. - Well, okay,


00:28:49.040 --> 00:28:50.520
so the people who built Daytime,


00:28:50.520 --> 00:28:52.480
or sorry, Time Delta specifically,


00:28:52.480 --> 00:28:54.160
they didn't intend you to do math.


00:28:54.160 --> 00:28:58.160
They just didn't make it obvious or very discoverable


00:28:58.160 --> 00:29:01.520
because time deltas can be divided by time deltas.


00:29:01.520 --> 00:29:03.520
So if I want to know how many hours it has been,


00:29:03.520 --> 00:29:05.520
I can say, like, take the total time delta


00:29:05.520 --> 00:29:08.440
and divide it by time delta where hours equals one.


00:29:08.440 --> 00:29:10.280
Or if I want blocks of six hours,


00:29:10.280 --> 00:29:11.840
that could divide it by hours equals six.


00:29:11.840 --> 00:29:13.880
If I want to know how many weeks,


00:29:13.880 --> 00:29:15.960
I would take the total time delta


00:29:15.960 --> 00:29:18.440
and divide it by time delta days equals seven.


00:29:18.440 --> 00:29:19.940
And that'll tell me how many weeks.


00:29:19.940 --> 00:29:20.840
- That's pretty awesome.


00:29:20.840 --> 00:29:22.360
I had no idea that it did that.


00:29:22.360 --> 00:29:23.800
- I had no idea either.


00:29:23.800 --> 00:29:25.400
And I was complaining to Paul Gansel,


00:29:25.400 --> 00:29:26.760
who works on this stuff, like,


00:29:26.760 --> 00:29:28.840
dude, give us something more than seconds.


00:29:28.840 --> 00:29:30.880
Why are we only getting seconds?


00:29:30.880 --> 00:29:32.600
I want total hours, I want total days.


00:29:32.600 --> 00:29:33.800
He's like, just divide it.


00:29:33.800 --> 00:29:35.520
Just set the days to be one and divide it.


00:29:35.520 --> 00:29:36.560
I'm like, what?


00:29:36.560 --> 00:29:37.520
You can do that?


00:29:37.520 --> 00:29:40.200
Why didn't anybody tell anybody this?


00:29:40.200 --> 00:29:41.280
Anthony, did you know this?


00:29:41.280 --> 00:29:45.520
No, but this is a podcast, so you probably could see I had my head in my hands for that explanation.


00:29:45.520 --> 00:29:50.440
But Division Operator would be like, the last thing I'd ever try.


00:29:50.440 --> 00:29:52.080
I know. Yeah, me too.


00:29:52.080 --> 00:29:55.400
I really thought I'm just like, this is the official.


00:29:55.400 --> 00:29:56.800
This is really the way. Yeah.


00:29:56.800 --> 00:29:58.960
I mean, yeah, this is the way.


00:29:58.960 --> 00:30:05.160
But after this episode came out, Jeff went to I don't know his last name, but on the comment, he said his name was Jeff.


00:30:05.160 --> 00:30:07.160
So Jeff went to the episode page and said,


00:30:07.160 --> 00:30:10.960
"Learning you can divide a time delta by a time delta to come up with days, weeks, etc.


00:30:10.960 --> 00:30:12.960
is like the Python tip of the year."


00:30:12.960 --> 00:30:16.460
It's certainly going to save me a lot of pain going,


00:30:16.460 --> 00:30:23.560
"Wait, there's two 60s. I divide by 60 twice. Sorry, that was actually hours, not days or whatever,


00:30:23.560 --> 00:30:29.360
like weird 60th of what I wanted or 60 times as many days as I meant."


00:30:29.360 --> 00:30:34.360
So, yeah, you can divide a time delta by some arbitrary time delta.


00:30:34.360 --> 00:30:39.400
like days equal five and you'll get how many blocks of five days would have been in there as a number.


00:30:39.400 --> 00:30:41.760
I'm not saying this is how it should be.


00:30:41.760 --> 00:30:46.600
But I'm telling you, this is the way to figure out time ranges


00:30:46.600 --> 00:30:49.960
in Python standard library without doing math.


00:30:49.960 --> 00:30:53.320
Well, so I looked it up. It isn't obvious that, I mean,


00:30:53.320 --> 00:30:55.800
it does say that you can do division.


00:30:55.800 --> 00:30:58.600
But there's all sorts of other stuff too. You can do like,


00:30:58.600 --> 00:31:01.960
you can do floor division, you can do modulo.


00:31:01.960 --> 00:31:04.260
- And... - Modulo? How interesting.


00:31:04.260 --> 00:31:07.460
- I mean, it makes sense, I guess, but wow. - And multiplication and...


00:31:07.460 --> 00:31:09.460
- Modulo by seven days. - Yeah.


00:31:09.460 --> 00:31:11.460
[LAUGHTER]


00:31:11.460 --> 00:31:15.960
Like, crazy. I had no idea all this math was available for time deltas.


00:31:15.960 --> 00:31:18.260
Can you use the matrix multiplication operator?


00:31:18.260 --> 00:31:19.960
[LAUGHTER]


00:31:19.960 --> 00:31:21.960
I wouldn't do that. It'll shoot you into the future.


00:31:21.960 --> 00:31:23.960
Oh, wait. Anthony's already in the future.


00:31:23.960 --> 00:31:25.460
I don't know. It's worth trying.


00:31:25.460 --> 00:31:28.960
- Is it like @* or something? Like, ridiculous? - Yeah, yeah, yeah.


00:31:28.960 --> 00:31:30.960
- Power operator. - Yeah, yeah.


00:31:30.960 --> 00:31:34.920
Anyway, I thought probably if I was as surprised about this and the other listeners were as


00:31:34.920 --> 00:31:39.080
well and it sounds like you guys also didn't know about this, like we should at least mention


00:31:39.080 --> 00:31:40.640
apparently this is a thing.


00:31:40.640 --> 00:31:42.200
Total tip of the year.


00:31:42.200 --> 00:31:43.200
Yeah.


00:31:43.200 --> 00:31:44.200
Yeah.


00:31:44.200 --> 00:31:45.200
Well, totally.


00:31:45.200 --> 00:31:47.520
If you want to make a really tricky job interview, please don't do it.


00:31:47.520 --> 00:31:48.520
Yeah.


00:31:48.520 --> 00:31:51.720
I remember my kids recently asked me because we were talking about like weeks and these


00:31:51.720 --> 00:31:55.720
numbers came up and they were like, why do you know how many seconds are in a week and


00:31:55.720 --> 00:31:59.200
how many seconds are in a day and stuff like that?


00:31:59.200 --> 00:32:04.500
I'm like, because I've memorized those numbers, because I've been programming in languages


00:32:04.500 --> 00:32:08.260
that make you memorize how many seconds are in a week.


00:32:08.260 --> 00:32:11.620
Because there's not a total hours, there's only a total seconds and I need to know how


00:32:11.620 --> 00:32:12.940
many hours this is.


00:32:12.940 --> 00:32:13.940
Exactly.


00:32:13.940 --> 00:32:14.940
Nice.


00:32:14.940 --> 00:32:15.940
So here you go.


00:32:15.940 --> 00:32:16.940
Here you go.


00:32:16.940 --> 00:32:17.940
Pretty cool.


00:32:17.940 --> 00:32:21.460
So Anthony, are you a fan of multi Python?


00:32:21.460 --> 00:32:22.460
Multi Python?


00:32:22.460 --> 00:32:23.460
Yes.


00:32:23.460 --> 00:32:24.460
Yeah.


00:32:24.460 --> 00:32:25.460
So apparently Microsoft is as well.


00:32:25.460 --> 00:32:26.460
Yeah.


00:32:26.460 --> 00:32:31.020
to figure out the connection, but it was in the release notes. So they've released a new extension


00:32:31.020 --> 00:32:37.260
for VS Code, and I'll explain why. But it's called PyLance, and it's named after Lancelot


00:32:37.260 --> 00:32:41.260
from Monty Python and the Holy Grail, who was... Sir Lancelot? It was, wasn't it?


00:32:41.260 --> 00:32:45.100
Yeah, he was the first one to get across the bridge with the hard questions.


00:32:45.100 --> 00:32:51.900
So yeah, this is an extension for VS Code. So if you're already using VS Code,


00:32:51.900 --> 00:32:57.100
you should download this and check it out. It's designed to be used with the existing Python


00:32:57.100 --> 00:33:02.380
extensions. It's not a replacement for the Python extension for VS Code. And I think something about


00:33:02.380 --> 00:33:08.140
the Python extension is that if you're doing type checking, you're like type hints and stuff like


00:33:08.140 --> 00:33:14.620
that, or you're using a linter, if you use the Python extension, you can turn on a linter and


00:33:14.620 --> 00:33:18.220
and it will use one of the Python linters


00:33:18.220 --> 00:33:21.620
from the extension by spawning like a process


00:33:21.620 --> 00:33:24.460
every time you edit the code and running the linter again.


00:33:24.460 --> 00:33:27.940
There's also something called the Python language server,


00:33:27.940 --> 00:33:31.100
which is written in .NET for some reason.


00:33:31.100 --> 00:33:35.220
And that is then communicated with by the BS code


00:33:35.220 --> 00:33:36.740
to figure out like the Python code


00:33:36.740 --> 00:33:39.000
and look at the AST and stuff.


00:33:39.000 --> 00:33:41.940
And that gives some errors and code like highlights


00:33:41.940 --> 00:33:43.820
when you make mistakes in Python.


00:33:43.820 --> 00:33:46.980
So this Pylance is an extension


00:33:46.980 --> 00:33:50.960
that basically provides type hints


00:33:50.960 --> 00:33:53.980
and then it does a whole bunch of like extra little features


00:33:53.980 --> 00:33:55.620
like docstring automation.


00:33:55.620 --> 00:33:58.020
It helps you on function signatures.


00:33:58.020 --> 00:34:00.220
It does like type of heads.


00:34:00.220 --> 00:34:03.020
You could hover over a function call


00:34:03.020 --> 00:34:05.020
and it'll tell you the method signature


00:34:05.020 --> 00:34:08.220
and it will extract that from the library that you're using.


00:34:08.220 --> 00:34:09.900
So if you're using VS Code,


00:34:09.900 --> 00:34:12.620
absolutely recommend that you download this


00:34:12.620 --> 00:34:13.460
and check it out.


00:34:13.460 --> 00:34:18.420
There's some cool features that I found, like it does code completion, it suggests parameters


00:34:18.420 --> 00:34:19.700
for you.


00:34:19.700 --> 00:34:26.100
So if you're using a lot of libraries like Flask or Django or any kind of popular framework


00:34:26.100 --> 00:34:31.340
that's got type stubs, then this will basically make your life a lot easier because it's going


00:34:31.340 --> 00:34:34.560
to fill in the gaps for you.


00:34:34.560 --> 00:34:39.060
And as you're typing, you can just press tab and just keep doing auto completion.


00:34:39.060 --> 00:34:40.760
It supports auto imports as well.


00:34:40.760 --> 00:34:46.160
So if you started using a function from a namespace in the standard library or from


00:34:46.160 --> 00:34:48.960
somewhere else, it'll be like, oh, you probably want to import that.


00:34:48.960 --> 00:34:51.120
It will add the import statement for you.


00:34:51.120 --> 00:34:57.560
It's also got go to reference and go to implementation, which if you've used the VS code extensions


00:34:57.560 --> 00:35:03.320
in other languages like JavaScript or TypeScript, or you can right click on a function and go


00:35:03.320 --> 00:35:08.420
to go to reference or go to implementation and it will jump to where that function is


00:35:08.420 --> 00:35:09.420
actually implemented.


00:35:09.420 --> 00:35:14.560
I know you get that with Python, but this, it uses, I don't know how up to date everyone


00:35:14.560 --> 00:35:21.220
is on type checkers, but basically there's mypy, which is now part of the Python GitHub


00:35:21.220 --> 00:35:22.580
organization.


00:35:22.580 --> 00:35:25.700
And then all the big tech companies have written their own.


00:35:25.700 --> 00:35:28.980
Don't know why, but I guess there was like, we have to write our own.


00:35:28.980 --> 00:35:30.060
It's like a rite of passage.


00:35:30.060 --> 00:35:36.720
So Facebook has Pyer, Google has PyType and Microsoft has PyWrite.


00:35:36.720 --> 00:35:39.900
They all more or less do the same thing, but in different ways.


00:35:39.900 --> 00:35:44.360
And this one uses the PyRite type checker.


00:35:44.360 --> 00:35:47.240
But the confusing thing is that PyRite was already an extension.


00:35:47.240 --> 00:35:51.600
So if you had that installed, uninstall it first, otherwise it causes issues.


00:35:51.600 --> 00:35:53.840
And then install PyLance.


00:35:53.840 --> 00:35:57.840
And a couple of other things I called out in the show notes is that there's some non-default


00:35:57.840 --> 00:36:01.960
settings which you should change to make the plugin a lot more useful.


00:36:01.960 --> 00:36:08.060
So there's diagnostic mode, change that to workspace so that I'll inspect all files,


00:36:08.060 --> 00:36:13.600
not just the ones that you happen to have open and change type checkings off by default,


00:36:13.600 --> 00:36:16.200
changes to basic and it will give you more information.


00:36:16.200 --> 00:36:19.680
And yeah, I've been using it and playing around and stuff like that.


00:36:19.680 --> 00:36:25.300
I think there's a few bugs I still need to iron out, but this is a new release.


00:36:25.300 --> 00:36:28.720
It's not open source, so you can't contribute it.


00:36:28.720 --> 00:36:31.140
But I don't know if they'll change that in the future.


00:36:31.140 --> 00:36:34.540
And I think it's because they're planning on using it for some commercial product.


00:36:34.540 --> 00:36:35.900
But we'll see what the news is.


00:36:35.900 --> 00:36:38.060
But yeah, you should download it and check it out if you use VS code.


00:36:38.060 --> 00:36:42.020
Yeah, it looks like it takes the Python extension and just powers it up a little.


00:36:42.020 --> 00:36:43.020
Yeah.


00:36:43.020 --> 00:36:47.780
So I'm guessing you don't, Anthony, you don't run the Vim plugin for VS code?


00:36:47.780 --> 00:36:50.540
No, no, I don't.


00:36:50.540 --> 00:36:51.540
I use this.


00:36:51.540 --> 00:36:52.540
This is the Microsoft Word one.


00:36:52.540 --> 00:36:53.540
I use this.


00:36:53.540 --> 00:36:54.540
It's called a mouse.


00:36:54.540 --> 00:36:57.340
Oh, that's really interesting.


00:36:57.340 --> 00:36:59.580
Does it live in a cage or how do you keep it?


00:36:59.580 --> 00:37:01.420
Do you have to feed it?


00:37:01.420 --> 00:37:02.700
- No, I don't think so. - I was talking to


00:37:02.700 --> 00:37:05.260
Julian Seker from PyBytes yesterday


00:37:05.260 --> 00:37:06.860
and he was telling me how much he loves Vim.


00:37:06.860 --> 00:37:09.500
And I said, "So you edit on production then?"


00:37:09.500 --> 00:37:11.300
And he was like, "How did you know?"


00:37:11.300 --> 00:37:15.340
- Actually, I'm pretty impressed with the Vim plugin


00:37:15.340 --> 00:37:17.700
for VS Code, it's really well done.


00:37:17.700 --> 00:37:18.860
- Well, this looks like a cool project.


00:37:18.860 --> 00:37:20.780
And thanks for pointing out the stuff that's off,


00:37:20.780 --> 00:37:23.200
like the type checking and the diagnostics


00:37:23.200 --> 00:37:25.780
for being just file-based instead of workspace-based


00:37:25.780 --> 00:37:26.620
and whatnot.


00:37:26.620 --> 00:37:29.460
I think this adds is multi-route workspaces.


00:37:29.460 --> 00:37:32.460
So a lot of these things come are already in PyCharm, right?


00:37:32.460 --> 00:37:34.580
But like I've got a, I've opened a big directory


00:37:34.580 --> 00:37:37.260
and I want like two little directories to refer


00:37:37.260 --> 00:37:39.860
sort of within themselves, right?


00:37:39.860 --> 00:37:42.180
Treat those at the top level for code within each.


00:37:42.180 --> 00:37:44.980
And I don't think that was possible previously, but now it is.


00:37:44.980 --> 00:37:48.460
It also says it's IntelliCode compatible,


00:37:48.460 --> 00:37:50.780
which I don't know how many people played with IntelliCode.


00:37:50.780 --> 00:37:53.660
I really haven't very much because I mostly stick with PyCharm,


00:37:53.660 --> 00:37:56.220
even though I had VS Code open while we were talking.


00:37:56.220 --> 00:37:58.220
it uses AI to predict


00:37:58.220 --> 00:38:00.220
what you're going to type and need.


00:38:00.220 --> 00:38:02.220
So instead of just showing an alphabetical list,


00:38:02.220 --> 00:38:04.220
it'll say, "Oh, you're doing request dot,


00:38:04.220 --> 00:38:06.220
you should probably do get."


00:38:06.220 --> 00:38:08.220
We all just do get, don't we?


00:38:08.220 --> 00:38:10.220
Things like that. So apparently, it's


00:38:10.220 --> 00:38:11.220
compatible with that as well.


00:38:11.220 --> 00:38:13.220
Yeah, I'm not a fan of IntelliCode,


00:38:13.220 --> 00:38:15.220
but I've used it a lot in JavaScript,


00:38:15.220 --> 00:38:17.220
and it kind of like


00:38:17.220 --> 00:38:19.220
guesses what the variable or the function is,


00:38:19.220 --> 00:38:21.220
but it gets it wrong.


00:38:21.220 --> 00:38:23.220
Or at least it did the last time I used it,


00:38:23.220 --> 00:38:25.220
which was a few years ago, but it gets it.


00:38:25.220 --> 00:38:29.460
If one library made a typo or like suggest that,


00:38:29.460 --> 00:38:33.220
it's like, "Oh, you wanted to do get Getty or something."


00:38:33.220 --> 00:38:33.940
And it's like, "Oh, no."


00:38:33.940 --> 00:38:36.500
Yeah, yeah, yeah. Because it scans the GitHub repos,


00:38:36.500 --> 00:38:39.140
and then it uses that to predict what it's going to suggest for you.


00:38:39.140 --> 00:38:42.100
Yeah, so half the suggestions are normally invalid.


00:38:42.100 --> 00:38:45.700
With a really dynamically typed language like Python or JavaScript,


00:38:45.700 --> 00:38:51.300
it needs to really import everything and properly understand


00:38:51.300 --> 00:38:55.220
the modules and how they're constructed to make sensible suggestions.


00:38:55.220 --> 00:38:59.220
Would this be a theoretical suggestion I could actually make? Let's find out.


00:38:59.220 --> 00:39:04.900
Yeah. And I think that's what PyLance kind of gives you is that it uses the type into the,


00:39:04.900 --> 00:39:11.620
to figure out, and this is why PyCharm is so powerful. It has its own typing system. So it


00:39:11.620 --> 00:39:17.940
indexes all your code, indexes all your dependencies, and it figures out what the


00:39:17.940 --> 00:39:23.620
types of responses are, even if they don't have type annotations. And that's how it knows to


00:39:23.620 --> 00:39:28.020
what's the suggest, like which functions are available, which properties are there and stuff


00:39:28.020 --> 00:39:32.180
like that. So I think this is basically a step towards that. Yeah, and it's good to see and it


00:39:32.180 --> 00:39:36.020
will be very powerful. Yeah, very cool. And it has a Monty Python reference.


00:39:36.020 --> 00:39:39.940
Yeah. Well, that's our six. Has anybody got any extra news?


00:39:39.940 --> 00:39:45.140
I have some, but I'll let Anthony go first. Yeah, my book is out in early release. So see


00:39:45.140 --> 00:39:50.820
Python internals and I got an email from somebody called Guido asking if-


00:39:50.820 --> 00:39:52.900
Oh, I've heard of that guy. I think he does Python.


00:39:52.900 --> 00:39:56.580
I don't know if this is even supposed to be sharing this, but he was like, "Oh, I heard


00:39:56.580 --> 00:40:02.260
you read this book. Can I have a copy? Because I want to review it and that sort of thing."


00:40:02.260 --> 00:40:06.820
And I was going to reply as a joke and say, "It's quite advanced how much Python experience


00:40:06.820 --> 00:40:14.340
you have." But I thought, "I don't know." I know he has a sense of humor, but yeah, my kind of


00:40:14.340 --> 00:40:18.100
of English sense of humor doesn't work on everybody.


00:40:18.100 --> 00:40:21.900
So no, he's reviewing it and he did send back a comment


00:40:21.900 --> 00:40:24.420
saying he's gonna recommend it to people


00:40:24.420 --> 00:40:26.540
who wanna become core developers, which is awesome.


00:40:26.540 --> 00:40:27.380
So yeah. - Oh, that's cool.


00:40:27.380 --> 00:40:29.660
And that's kinda why you put it together a little bit,


00:40:29.660 --> 00:40:30.500
right? - Yeah, yeah,


00:40:30.500 --> 00:40:31.620
that was definitely the reason.


00:40:31.620 --> 00:40:32.540
- What's the name of it again?


00:40:32.540 --> 00:40:34.340
- CPython internals.


00:40:34.340 --> 00:40:37.860
And I'm updating it for the PEG parser


00:40:37.860 --> 00:40:40.200
'cause that got merged in the middle


00:40:40.200 --> 00:40:42.460
of the initial release. (laughs)


00:40:42.460 --> 00:40:46.400
So I do have some updates for that.


00:40:46.400 --> 00:40:48.220
So yeah, 'cause a whole bunch of the chapters


00:40:48.220 --> 00:40:50.140
like show you how the puzzle works and stuff like that.


00:40:50.140 --> 00:40:52.100
So I've been redoing those.


00:40:52.100 --> 00:40:52.940
- Yeah, super cool.


00:40:52.940 --> 00:40:55.260
And you were on a Talk Python 265.


00:40:55.260 --> 00:40:57.220
So pretty recently back in May,


00:40:57.220 --> 00:40:58.160
talk about that as well.


00:40:58.160 --> 00:41:00.500
So people can dig into that as well.


00:41:00.500 --> 00:41:01.340
Brian, how about you?


00:41:01.340 --> 00:41:03.700
- Just staying out of trouble and working at a nice work.


00:41:03.700 --> 00:41:04.540
- Awesome.


00:41:04.540 --> 00:41:05.540
Yeah, yeah, me too.


00:41:05.540 --> 00:41:07.420
Got to go out and do fireworks with the kids.


00:41:07.420 --> 00:41:08.260
That was fun.


00:41:08.260 --> 00:41:10.200
So for me, I already mentioned the Humble Bundle,


00:41:10.200 --> 00:41:15.080
but talkpython.fm/humble2020 is all you got to know.


00:41:15.080 --> 00:41:18.840
$1,400 worth of Python stuff for 25 bucks.


00:41:18.840 --> 00:41:20.640
It's probably worth the risk.


00:41:20.640 --> 00:41:22.960
- So it's way better than the reverse.


00:41:22.960 --> 00:41:25.560
$25 worth of stuff for a thousand would be terrible.


00:41:25.560 --> 00:41:27.560
- So people will try to sell that, but yeah, for sure.


00:41:27.560 --> 00:41:29.480
Speaking of Python 3.9, Peg Parsers,


00:41:29.480 --> 00:41:33.440
Python 3.9 beta 4 is out and ready for testing.


00:41:33.440 --> 00:41:35.560
So if that's a thing that you do.


00:41:35.560 --> 00:41:37.360
Anthony, you're probably running that in production already


00:41:37.360 --> 00:41:39.440
given how much you're on top of it.


00:41:39.440 --> 00:41:41.080
- And I'm a 310 alpha one.


00:41:41.080 --> 00:41:42.280
(laughing)


00:41:42.280 --> 00:41:43.960
- Of course, of course.


00:41:43.960 --> 00:41:46.600
Also, we have a cool course coming


00:41:46.600 --> 00:41:49.340
at Talk Python Training called Excel to Python.


00:41:49.340 --> 00:41:51.080
So if you've been doing a bunch of stuff with Excel


00:41:51.080 --> 00:41:54.480
and wanna get into the data science tools instead


00:41:54.480 --> 00:41:56.000
and do Excel-like things,


00:41:56.000 --> 00:41:57.280
partner it up with Chris Moffitt.


00:41:57.280 --> 00:41:58.440
We're doing really cool stuff there.


00:41:58.440 --> 00:42:01.400
So people can go get notified about when that course is out,


00:42:01.400 --> 00:42:02.520
maybe in a month or so.


00:42:02.520 --> 00:42:04.920
All right, are you all ready for a joke?


00:42:04.920 --> 00:42:05.920
- Yes.


00:42:05.920 --> 00:42:09.280
- Anthony, I usually make Brian play the other half of this.


00:42:09.280 --> 00:42:11.440
So you're going to have to do it.


00:42:11.440 --> 00:42:12.280
All right.


00:42:12.280 --> 00:42:13.600
So this is a cartoon.


00:42:13.600 --> 00:42:15.240
The picture is going to be in the show notes.


00:42:15.240 --> 00:42:17.000
You can even view it in your podcast player.


00:42:17.000 --> 00:42:19.600
If you allow it to show images from Scott Hilburn.


00:42:19.600 --> 00:42:22.120
I couldn't find the original place to link to.


00:42:22.120 --> 00:42:25.960
So I just put a, an image up here and it's two computers, a laptop


00:42:25.960 --> 00:42:27.320
and a desktop looking at each other.


00:42:27.320 --> 00:42:32.760
There's a baseball cap on top of the laptop and he's got a little like


00:42:32.760 --> 00:42:34.880
computer arms up and he's like sweat.


00:42:34.880 --> 00:42:38.760
He's like, I can't get it off.


00:42:38.760 --> 00:42:40.460
Anthony, what's the problem?


00:42:40.460 --> 00:42:41.740
- And the other computer says,


00:42:41.740 --> 00:42:44.520
"Dude, that's because your caps lock is on."


00:42:44.520 --> 00:42:46.300
- Ah, it's locked on.


00:42:46.300 --> 00:42:47.980
- Get it off.


00:42:47.980 --> 00:42:50.580
Yeah, okay, anyway, so I thought that,


00:42:50.580 --> 00:42:52.460
that one made me laugh, especially the picture.


00:42:52.460 --> 00:42:53.940
So check it out, Jim Podcast Player.


00:42:53.940 --> 00:42:56.180
- Yeah, I can tell why he's trying to get it off too.


00:42:56.180 --> 00:42:57.100
It looks like a red hat.


00:42:57.100 --> 00:42:58.980
- It definitely, yeah.


00:42:58.980 --> 00:43:00.620
Yeah, that's probably like Windows Vista,


00:43:00.620 --> 00:43:02.580
got red hat on it and can't get it off.


00:43:02.580 --> 00:43:05.940
- Cool, well, thanks a lot guys.


00:43:05.940 --> 00:43:06.780
- All right. - Yeah.


00:43:06.780 --> 00:43:08.380
- Thanks. - Great to be here, thanks.


00:43:08.380 --> 00:43:09.860
Thanks as always, bye everyone.


00:43:09.860 --> 00:43:11.620
- Thank you for listening to Python Bytes.


00:43:11.620 --> 00:43:14.060
Follow the show on Twitter @pythonbytes.


00:43:14.060 --> 00:43:17.140
That's Python Bytes as in B-Y-T-E-S.


00:43:17.140 --> 00:43:20.060
And get the full show notes at pythonbytes.fm.


00:43:20.060 --> 00:43:22.260
If you have a news item you want featured,


00:43:22.260 --> 00:43:25.020
just visit pythonbytes.fm and send it our way.


00:43:25.020 --> 00:43:27.140
We're always on the lookout for sharing something cool.


00:43:27.140 --> 00:43:28.220
This is Brian Okken,


00:43:28.220 --> 00:43:30.300
and on behalf of myself and Michael Kennedy,


00:43:30.300 --> 00:43:32.380
thank you for listening and sharing this podcast


00:43:32.380 --> 00:43:33.980
with your friends and colleagues.

