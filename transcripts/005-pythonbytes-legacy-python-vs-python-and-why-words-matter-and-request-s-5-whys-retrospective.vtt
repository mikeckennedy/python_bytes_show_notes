
00:00:00.000 --> 00:00:04.320
This is Python Bytes, Python headlines and news delivered directly to your earbuds.


00:00:04.320 --> 00:00:08.320
It's episode 5, recorded December 5th, 2016.


00:00:08.320 --> 00:00:12.320
This episode is brought to you by Rollbar. They take the pain out of errors.


00:00:12.320 --> 00:00:16.320
This is Michael Kennedy, your co-host, along with Brian Okken.


00:00:16.320 --> 00:00:17.320
Hey Brian, how's it going?


00:00:17.320 --> 00:00:18.820
It's going really good today.


00:00:18.820 --> 00:00:22.320
Yeah, it's another week of exciting news in the Python world.


00:00:22.320 --> 00:00:25.320
Yeah, well let's get started right off the bat.


00:00:25.320 --> 00:00:26.820
Alright, tell me why.


00:00:26.820 --> 00:00:29.320
Tell me why, awesome.


00:00:29.320 --> 00:00:39.320
There was an article, the 5 Whys of Request 2.12, 2.12, and I thought this was a great


00:00:39.320 --> 00:00:47.640
article because it apparently in version 2.12 that came out November 15th, they're already


00:00:47.640 --> 00:00:52.640
up to 2.12.3 now on December 1st.


00:00:52.640 --> 00:00:56.100
But there's a, I think that they broke some people.


00:00:56.100 --> 00:01:02.400
There were some corner cases, the non-standard ways to use requests that was supported before.


00:01:02.400 --> 00:01:04.420
There's some reasons why they needed to change it.


00:01:04.420 --> 00:01:06.460
And this is a good article.


00:01:06.460 --> 00:01:11.060
I think it's put up to try to limit people from getting mad first so that they try to


00:01:11.060 --> 00:01:15.940
understand from the library supporter point of view why they made the changes.


00:01:15.940 --> 00:01:17.780
And it was just really well written.


00:01:17.780 --> 00:01:18.780
It is well written.


00:01:18.780 --> 00:01:24.180
And it gives you a look inside of how challenging it can be to write software at this scale.


00:01:24.180 --> 00:01:28.460
I mean, Request itself is not a huge piece of software, right?


00:01:28.460 --> 00:01:33.540
Not like Django or something like this or OpenStack, one of these really big, big projects,


00:01:33.540 --> 00:01:38.620
but it's used so incredibly widely.


00:01:38.620 --> 00:01:42.140
Request is downloaded 7 million times a month.


00:01:42.140 --> 00:01:43.140
Think about that.


00:01:43.140 --> 00:01:48.180
Yeah, and it may be one of the largest because of how it's being used by everybody.


00:01:48.180 --> 00:01:50.180
I mean, not large in size, but large in...


00:01:50.180 --> 00:01:51.180
Huge footprint.


00:01:51.180 --> 00:01:52.180
Yeah.


00:01:52.180 --> 00:01:53.180
Yeah, absolutely.


00:01:53.180 --> 00:01:59.500
Because the current release of requests, that is the 2.12 version, breaks anyone who uses


00:01:59.500 --> 00:02:06.500
a URL scheme, that's the little part before the colon, that is not HTTP or HTTPS, where


00:02:06.500 --> 00:02:09.540
it used to sometimes sort of work.


00:02:09.540 --> 00:02:12.340
So people were kind of tweaking that.


00:02:12.340 --> 00:02:14.780
And it has to do with a bunch of stuff internally, right?


00:02:14.780 --> 00:02:19.660
They're moving to different like domain resolution things inside and so on.


00:02:19.660 --> 00:02:20.660
Huh, okay.


00:02:20.660 --> 00:02:21.660
Yeah.


00:02:21.660 --> 00:02:27.100
It's basically the article talks about how hard it is to maintain software.


00:02:27.100 --> 00:02:30.940
Like if you have software that's used as widely as requests, there's like no part of it being


00:02:30.940 --> 00:02:31.940
touched.


00:02:31.940 --> 00:02:36.660
And I think the takeaway was more or less two things.


00:02:36.660 --> 00:02:44.700
One, make sure that your validation and error checks are a little extra picky.


00:02:44.700 --> 00:02:49.820
Like they said, the root of the problem is that they kind of didn't check strongly enough


00:02:49.820 --> 00:02:50.820
for these things initially.


00:02:50.820 --> 00:02:53.020
And so stuff was able to work through.


00:02:53.020 --> 00:02:58.060
They said, if you make your checks really rigid, it's easy to roll them back, but it's


00:02:58.060 --> 00:03:00.260
very problematic to put them forward.


00:03:00.260 --> 00:03:04.020
And the other takeaway was find a maintainer of your open source project that you love


00:03:04.020 --> 00:03:06.020
and give them a hug.


00:03:06.020 --> 00:03:07.420
Definitely.


00:03:07.420 --> 00:03:08.420
It's not an easy job.


00:03:08.420 --> 00:03:09.900
No, it's not an easy job.


00:03:09.900 --> 00:03:14.300
But you know, speaking of people that I want to hug, there's a guy that I had on the show


00:03:14.300 --> 00:03:17.140
on Talk Python a while ago, Matias Bosogne.


00:03:17.140 --> 00:03:19.460
I'm probably messing his name up a little bit.


00:03:19.460 --> 00:03:20.460
Sorry, Matias.


00:03:20.460 --> 00:03:25.820
the Jupyter project at UC Berkeley's Institute for Data Science and he works


00:03:25.820 --> 00:03:31.460
on Jupyter and IPython notebooks things like that and this article is not super


00:03:31.460 --> 00:03:34.700
new but I haven't talked about before and I really thought it was kind of


00:03:34.700 --> 00:03:39.180
timely again you know the it came back to be relevant and I think it's going to


00:03:39.180 --> 00:03:44.460
continue to be relevant over the next few years it's more about a mental shift


00:03:44.460 --> 00:03:47.740
than it is about anything else in the article that I want to talk about is


00:03:47.740 --> 00:03:50.660
called planning an early death for Python 2.


00:03:50.660 --> 00:03:51.660
Okay.


00:03:51.660 --> 00:03:52.660
Yeah.


00:03:52.660 --> 00:03:53.660
Yeah.


00:03:53.660 --> 00:03:58.380
So, you know, we've had this whole Python 2, Python 3 deal over Thanksgiving break.


00:03:58.380 --> 00:04:00.440
That was last week and we talked about that and so on.


00:04:00.440 --> 00:04:05.320
But this is not so much about whether or not we should be teaching people new things.


00:04:05.320 --> 00:04:10.380
It's about how we perceive and talk about Python 2 versus Python 3.


00:04:10.380 --> 00:04:13.620
So I'll just read you a little introduction here, just paragraphs.


00:04:13.620 --> 00:04:14.620
Out of the discussion.


00:04:14.620 --> 00:04:18.340
This is a group, a workshop that they met at the Berkeley Institute for Data Science,


00:04:18.340 --> 00:04:20.300
a bunch of data science folks.


00:04:20.300 --> 00:04:21.300
So they're coming at it from that angle.


00:04:21.300 --> 00:04:25.340
So it's out of the discussion arose a topic that's long plagued the Python community at


00:04:25.340 --> 00:04:26.340
large.


00:04:26.340 --> 00:04:30.220
Code that requires legacy Python 2.7 is holding back the development of data science tool


00:04:30.220 --> 00:04:34.620
sets and by extension the progress of data science as a whole.


00:04:34.620 --> 00:04:38.940
They convened this small working group to plan an early death to Python 2, or they call


00:04:38.940 --> 00:04:39.940
it legacy Python.


00:04:39.940 --> 00:04:43.980
And so they came up with a few things concretely that they can do.


00:04:43.980 --> 00:04:48.560
And I think the most important message here is to choose your words carefully.


00:04:48.560 --> 00:04:55.060
So instead of talking about Python 2 versus Python 3, talk about Python versus legacy


00:04:55.060 --> 00:04:56.060
Python.


00:04:56.060 --> 00:04:57.060
Oh, nice.


00:04:57.060 --> 00:04:59.700
So when you talk about when you say Python, say, well, I mean, Python 3, like, what would


00:04:59.700 --> 00:05:00.700
you be talking about?


00:05:00.700 --> 00:05:01.700
Right?


00:05:01.700 --> 00:05:03.460
And when you talk about Python 2, it's legacy Python.


00:05:03.460 --> 00:05:09.180
Refer to legacy Python in the past tense to reinforce its old and deprecated state.


00:05:09.180 --> 00:05:10.180
Let's see.


00:05:10.180 --> 00:05:13.960
your examples and your documentation Python 3 only.


00:05:13.960 --> 00:05:19.580
So if you're doing something with like asynchrony, you know, use async and await keywords, right?


00:05:19.580 --> 00:05:20.760
Things like this.


00:05:20.760 --> 00:05:25.340
If a user sends you a bug to a library, ask them to reproduce it on an up to date version


00:05:25.340 --> 00:05:26.740
of Python.


00:05:26.740 --> 00:05:30.320
And make sure that of course, you know, when you have continuous integration, your tests


00:05:30.320 --> 00:05:32.420
run on Python 3 as well.


00:05:32.420 --> 00:05:34.760
So I really found this article interesting.


00:05:34.760 --> 00:05:37.860
And it's about the mentality of it, right?


00:05:37.860 --> 00:05:42.700
If people at conferences and people who write and maintain libraries start referring to


00:05:42.700 --> 00:05:49.660
Python 2 as "legacy Python" and they start calling Python 3 just "Python" and they assume


00:05:49.660 --> 00:05:55.140
that's the way the documentation is written, I think it would have a tremendous effect


00:05:55.140 --> 00:05:59.540
on the adoption of Python 3 over a couple of years as people come into Python, as they


00:05:59.540 --> 00:06:01.260
come into these new libraries.


00:06:01.260 --> 00:06:04.420
If you start to hear, "Oh, this thing I'm using is called 'legacy'."


00:06:04.420 --> 00:06:05.740
Well, wait a minute.


00:06:05.740 --> 00:06:07.620
Maybe I should stop using it, right?


00:06:07.620 --> 00:06:12.660
Yeah, and one of the things, I don't know if they touch on this, but one of the reasons why,


00:06:12.660 --> 00:06:18.260
if you start out supporting Python 3 and you, if you are start up current Python,


00:06:18.260 --> 00:06:28.260
and wanted to try to help support older versions, it doesn't add to the clarity to your code. I mean,


00:06:28.260 --> 00:06:35.620
you'll have to not use some features that are like new and awesome. And that is problematic


00:06:35.620 --> 00:06:39.140
to try to support old libraries or old versions of Python.


00:06:39.140 --> 00:06:40.780
You can't use some of the new stuff.


00:06:40.780 --> 00:06:42.260
- Yeah, I totally agree.


00:06:42.260 --> 00:06:44.020
It's a really well-written article


00:06:44.020 --> 00:06:45.740
and I'm probably not doing it justice,


00:06:45.740 --> 00:06:48.420
but I love the mental shift of we have Python


00:06:48.420 --> 00:06:49.860
and we have legacy Python.


00:06:49.860 --> 00:06:52.300
- Yeah, and I even, I kind of even like the idea


00:06:52.300 --> 00:06:54.940
of like it's totally okay to have some stuff


00:06:54.940 --> 00:06:57.540
that doesn't support Python 2.7.


00:06:57.540 --> 00:07:00.340
If you don't want to support it, it's up to you.


00:07:00.340 --> 00:07:01.500
- Yeah, well, for example,


00:07:01.500 --> 00:07:04.860
the B-Ware project coming along, that's a good example.


00:07:04.860 --> 00:07:07.180
- Oh, okay. So they're only on Python 3?


00:07:07.180 --> 00:07:09.020
- Yeah, they're just doing Python 3 for their code.


00:07:09.020 --> 00:07:10.620
And Beware is doing amazing stuff.


00:07:10.620 --> 00:07:12.340
- Interesting article called


00:07:12.340 --> 00:07:16.900
"Simplifying Complex Business Logic with Python's KenRen."


00:07:16.900 --> 00:07:18.540
- That sounds cool. What's KenRen?


00:07:18.540 --> 00:07:21.120
- I had never heard of it before I read this article.


00:07:21.120 --> 00:07:26.120
And it's a library that helps with some logic coding.


00:07:26.120 --> 00:07:28.340
And I still am having a hard...


00:07:28.340 --> 00:07:29.580
I'm going to have to play with it a bit


00:07:29.580 --> 00:07:31.740
because I'm having a hard time getting my head around it.


00:07:31.740 --> 00:07:33.940
However, it looks like a lot of stuff


00:07:33.940 --> 00:07:39.820
that some people use, I mean traditionally people use spreadsheets for or some of the


00:07:39.820 --> 00:07:45.980
data analysis stuff, but it's for people that are using, it's written such that I think


00:07:45.980 --> 00:07:48.580
it's more readable than some of the data analysis stuff.


00:07:48.580 --> 00:07:50.820
It's written more business friendly I guess.


00:07:50.820 --> 00:07:51.820
I see.


00:07:51.820 --> 00:07:58.020
And like they have an example in the article that actually I love that it's a Simpsons


00:07:58.020 --> 00:08:03.700
example, if you give a whole bunch of a data set with whose parent is who in the


00:08:03.700 --> 00:08:07.620
Simpsons, then you can relate and you call it a relation. It has a whole bunch


00:08:07.620 --> 00:08:12.260
of different things that you can say. This piece of data has a relation


00:08:12.260 --> 00:08:17.740
or a fact or there's a couple things. You can just have sets of sets of data and


00:08:17.740 --> 00:08:23.420
ask questions about the data like who's a person that has two children in the


00:08:23.420 --> 00:08:27.300
Simpsons and or things like that. Basically a different way to ask


00:08:27.300 --> 00:08:31.080
questions about your data, as far as I can tell, a way to ask questions about


00:08:31.080 --> 00:08:35.360
your data that's different than some of the other methods I've seen before.


00:08:35.360 --> 00:08:40.120
I like different ways to cut at different problems.


00:08:40.120 --> 00:08:44.680
Yeah, it looks really cool and it looks almost like a knowledge base.


00:08:44.680 --> 00:08:47.880
You set up all these facts and relationships between them and then you


00:08:47.880 --> 00:08:51.640
can ask it all kinds of questions and I think it's pretty awesome.


00:08:51.640 --> 00:08:58.040
Yeah, and I don't know what type of problem I'd need it for, but yeah, another tool in


00:08:58.040 --> 00:08:59.040
your tool belt.


00:08:59.040 --> 00:09:01.000
Yeah, yeah, tools, tools are good.


00:09:01.000 --> 00:09:02.000
Tools are good.


00:09:02.000 --> 00:09:05.480
You know, before we talk about the next set of tools, actually, let me tell you about


00:09:05.480 --> 00:09:07.360
our sponsor, Rollbar.


00:09:07.360 --> 00:09:08.520
Thank you, Rollbar.


00:09:08.520 --> 00:09:10.320
We're really happy to have you guys on board.


00:09:10.320 --> 00:09:11.320
Thank you.


00:09:11.320 --> 00:09:15.520
The Talk Python websites handle almost 2 million dynamic HTTP requests per month and transfer


00:09:15.520 --> 00:09:18.040
four or five terabytes of data.


00:09:18.040 --> 00:09:20.440
And yet I deploy them frequently.


00:09:20.440 --> 00:09:22.760
I don't worry about whether or not they're up and running.


00:09:22.760 --> 00:09:24.720
I have some basic server monitoring.


00:09:24.720 --> 00:09:27.120
And if anything goes wrong with the app,


00:09:27.120 --> 00:09:29.440
Rollbar is gonna send me detailed information


00:09:29.440 --> 00:09:32.240
to my Slack, my email, all sorts of things.


00:09:32.240 --> 00:09:34.520
And it comes with all sorts of info already there.


00:09:34.520 --> 00:09:36.340
So you can probably fix the problem


00:09:36.340 --> 00:09:38.280
before you even like have to debug it or something.


00:09:38.280 --> 00:09:39.600
So it's great.


00:09:39.600 --> 00:09:41.040
If you guys wanna check out Rollbar,


00:09:41.040 --> 00:09:43.440
please go to rollbar.com/pythonbytes


00:09:43.440 --> 00:09:44.720
and sign up for the free tier.


00:09:44.720 --> 00:09:46.300
You can plug it in in a few minutes.


00:09:46.300 --> 00:09:47.140
- Sounds awesome.


00:09:47.140 --> 00:09:48.080
- Yeah, it's awesome.


00:09:48.080 --> 00:09:50.100
Okay, I don't hope you have errors,


00:09:50.100 --> 00:09:54.420
But you know, you want to be sure that when you do, it's easy to solve them, right?


00:09:54.420 --> 00:10:01.220
Alright, so speaking of web apps running that are pretty cool, one of the larger implementations


00:10:01.220 --> 00:10:04.540
deployments of Python is Reddit itself.


00:10:04.540 --> 00:10:09.460
So Reddit, you know, often referred to as the front page of the internet, maybe that's


00:10:09.460 --> 00:10:10.860
Facebook these days, I don't know.


00:10:10.860 --> 00:10:14.340
But Reddit is definitely got a lot of traffic, that's for sure.


00:10:14.340 --> 00:10:18.040
And it's built on some of the older Python technologies.


00:10:18.040 --> 00:10:22.240
So pylons, Mako templates, a custom non-OR version.


00:10:22.240 --> 00:10:25.040
So the core part of SQL alchemy.


00:10:25.040 --> 00:10:26.040
Right.


00:10:26.040 --> 00:10:29.000
And I'm sure there's tons of other stuff going on there as well.


00:10:29.000 --> 00:10:32.460
So there was this question or discussion on Reddit says, if Reddit were written from


00:10:32.460 --> 00:10:36.520
scratch today, which Python web framework would it use and why?


00:10:36.520 --> 00:10:37.520
I don't know.


00:10:37.520 --> 00:10:42.480
I just I feel like the sense that I when I talk to people and I listen to what people


00:10:42.480 --> 00:10:46.880
are doing web frameworks, it's either Flask or Django, Flask or Django, Flask or Django.


00:10:46.880 --> 00:10:48.520
My stuff's built on Pyramid.


00:10:48.520 --> 00:10:49.760
I really like Pyramid.


00:10:49.760 --> 00:10:54.120
I think it's kind of a nice Goldilocks framework between the two that I was mentioning.


00:10:54.120 --> 00:10:58.120
And I thought it was interesting that a bunch of people came out and said, "Well, obviously


00:10:58.120 --> 00:10:59.600
Pyramid's the right choice for this."


00:10:59.600 --> 00:11:02.600
All right, so I'll give you a few sentences from what people said.


00:11:02.600 --> 00:11:05.400
So I would say the most sane option would be Pyramid.


00:11:05.400 --> 00:11:08.640
It's faster than Django and TAS, and it doesn't repeat the mistakes with thread locals that


00:11:08.640 --> 00:11:10.400
Flask or Pylons did in the past.


00:11:10.400 --> 00:11:15.560
I did some both small and medium to big, say 20 million plus user web apps, and it just


00:11:15.560 --> 00:11:16.560
feels right.


00:11:16.560 --> 00:11:19.840
It doesn't get in your way and it will give you magical solutions to your problems.


00:11:19.840 --> 00:11:23.880
Another guy said, "Assuming you're talking about Reddit at its current scale, not Flask,


00:11:23.880 --> 00:11:28.280
too many global variables, not ThreadSafe for async, not Django, too opinionated, everything's


00:11:28.280 --> 00:11:30.840
in-house for scaling reasons, my guess is Pyramid.


00:11:30.840 --> 00:11:34.520
In fact, that's what Reddit's current services are built, and they link to a GitHub thing


00:11:34.520 --> 00:11:36.840
that is a foundation of their services."


00:11:36.840 --> 00:11:41.240
The takeaway was basically around this discussion that the web frameworks cause a lot of strong


00:11:41.240 --> 00:11:43.680
subjective split in opinion.


00:11:43.680 --> 00:11:49.440
I just thought it was really interesting to see a lot of people coming out with this pyramid


00:11:49.440 --> 00:11:53.200
recommendation because I hear Flask versus Django so often.


00:11:53.200 --> 00:11:56.840
Yeah, and that's often what I hear too.


00:11:56.840 --> 00:12:01.560
And I saw this and it was surprising to me, but I enjoyed reading about it.


00:12:01.560 --> 00:12:07.480
And it also prompted me to try to find some time to go through your course because don't


00:12:07.480 --> 00:12:08.480
you teach Pyramid in your course?


00:12:08.480 --> 00:12:09.480
Yeah, I do.


00:12:09.480 --> 00:12:11.680
My Python for Entrepreneurs course is definitely Pyramid.


00:12:11.680 --> 00:12:12.680
Cool.


00:12:12.680 --> 00:12:13.680
It's pretty cool.


00:12:13.680 --> 00:12:14.680
Yeah, thanks.


00:12:14.680 --> 00:12:17.040
Next up, I've got, actually, I'm going to bundle these.


00:12:17.040 --> 00:12:20.120
I've got two testing-related articles.


00:12:20.120 --> 00:12:25.440
And I was tempted to just have these be two different articles on this, but I didn't want


00:12:25.440 --> 00:12:27.840
to take over the entire podcast or testing.


00:12:27.840 --> 00:12:34.040
But there's a "Getting Started with PyTest" that's from, I'm going to get his name wrong,


00:12:34.040 --> 00:12:39.440
but it goes by Jacobian, who's, Jacob Kaplan-Moss, that's it.


00:12:39.440 --> 00:12:47.120
One of the things I like is it's not a silly, he does, it's a simple example but it's also


00:12:47.120 --> 00:12:54.660
a real example using some things that are hard to just visually tell whether something's


00:12:54.660 --> 00:12:55.660
right or wrong.


00:12:55.660 --> 00:13:02.540
It also goes through and uses, looks at test parameterization, which is very useful if


00:13:02.540 --> 00:13:03.820
you're into testing.


00:13:03.820 --> 00:13:09.220
The second article is the best new feature of unit, in unit tests you didn't know you


00:13:09.220 --> 00:13:10.220
needed.


00:13:10.220 --> 00:13:14.580
The feature that isn't highlighted in the title is subtest.


00:13:14.580 --> 00:13:20.700
And subtest was added in Python 3.4, but I haven't seen very many people blog about it


00:13:20.700 --> 00:13:21.940
or talk about it.


00:13:21.940 --> 00:13:26.560
Like if you have a list of things that you're testing within a test, like a whole bunch


00:13:26.560 --> 00:13:32.660
of data points you're checking for, normally if you just iterate through them, the first


00:13:32.660 --> 00:13:35.140
one that fails will stop your test.


00:13:35.140 --> 00:13:40.460
But subtest is a way to say, "I want all of these to be checked," or everything within


00:13:40.460 --> 00:13:41.460
this loop.


00:13:41.460 --> 00:13:45.540
Oh, that is really cool, because sometimes you create a unit test and you're like, "Well,


00:13:45.540 --> 00:13:46.540
there's so much.


00:13:46.540 --> 00:13:50.660
I've sort of got it ready, but there's actually three separate sort of things I need to verify


00:13:50.660 --> 00:13:54.500
I'd actually verify this case and I could use subtests for those, right?


00:13:54.500 --> 00:13:55.500
Yeah.


00:13:55.500 --> 00:13:56.500
Okay.


00:13:56.500 --> 00:14:01.580
Using it, you can fail a part of it and that part of it will skip out and not continue,


00:14:01.580 --> 00:14:04.140
but it'll go on to the next subtest.


00:14:04.140 --> 00:14:05.500
And it's a pretty cool thing.


00:14:05.500 --> 00:14:12.180
I know since I'm a PyTest fan, you can run unit tests with PyTest.


00:14:12.180 --> 00:14:14.620
Unit tests, written tests with PyTest.


00:14:14.620 --> 00:14:22.620
PyTest will run subtests, but it doesn't highlight out the individual failures as subtest does.


00:14:22.620 --> 00:14:27.500
So that is one of the breaking, if you're writing unit tests that you want to run with


00:14:27.500 --> 00:14:32.000
a PyTest runner, subtest might be something you might want to avoid.


00:14:32.000 --> 00:14:38.060
If you're running in PyTest, you'd probably use parameterization anyway for the same problem.


00:14:38.060 --> 00:14:41.760
So the last one here I have for us is just a fun one, right?


00:14:41.760 --> 00:14:48.040
So imagine you're running a meetup or a conference or some kind of hackathon and you want to


00:14:48.040 --> 00:14:52.000
have some music playing because I don't know about you, but the right kind of music along


00:14:52.000 --> 00:14:54.560
with coding, it's like the perfect mix.


00:14:54.560 --> 00:14:57.680
So there's this jukebox type thing called Pytone.


00:14:57.680 --> 00:15:02.080
Now by no means is Pytone new, but I haven't talked about it.


00:15:02.080 --> 00:15:03.280
People recommended it to me.


00:15:03.280 --> 00:15:09.560
So KidPixo, who runs the Geek Cookies Italian developer podcast, sent this over and said,


00:15:09.560 --> 00:15:11.840
I said hey you guys should check this out, this is fun.


00:15:11.840 --> 00:15:18.920
This, let me just give you a quick little summary of what this screenshot here, and


00:15:18.920 --> 00:15:23.880
you pull it up, I'm going to ask, have you describe it to me, I'm going to set the stage.


00:15:23.880 --> 00:15:29.520
Under the screenshot here it says, "This is how PyTone 197 looks in action in the 80x25


00:15:29.520 --> 00:15:30.520
terminal."


00:15:30.520 --> 00:15:33.680
So this is a terminal based iTunes type of thing.


00:15:33.680 --> 00:15:35.600
Brian, what do you think of this?


00:15:35.600 --> 00:15:38.000
Um, actually I kind of like it a lot.


00:15:38.000 --> 00:15:39.000
It's neat.


00:15:39.000 --> 00:15:43.240
right? Like imagine you could project this up on the screen during breaks while you have music


00:15:43.240 --> 00:15:48.840
playing and it's really a terminal base with progress bars and playlists, everything,


00:15:48.840 --> 00:15:57.480
little music players. Cool. Yeah. And it looks nerdy. So there's that. Exactly. Well, that's


00:15:57.480 --> 00:16:00.920
why I said you should do it at like a Geek Conference, right? It would be perfect for that.


00:16:02.200 --> 00:16:08.840
Yeah, also I think it's neat to see a maintained Cursus project.


00:16:08.840 --> 00:16:12.360
Yeah, it's an interesting use of Cursus as well.


00:16:12.360 --> 00:16:16.840
If you want to build an interesting, kind of more interactive GUI, terminal-based GUI,


00:16:16.840 --> 00:16:17.880
I guess, it's cool.


00:16:17.880 --> 00:16:19.480
All right, that's it.


00:16:19.480 --> 00:16:22.120
That's it for our headlines this week.


00:16:22.120 --> 00:16:28.760
It's been slightly less interesting than last week, but nonetheless, a lot of cool stuff


00:16:28.760 --> 00:16:31.400
coming along, a lot of good news to share with you.


00:16:31.400 --> 00:16:33.640
Brian, you got anything going on you want to tell everyone about?


00:16:33.640 --> 00:16:41.000
Well, I've put out, last week I was trying to get two episodes out of testing code and did.


00:16:41.000 --> 00:16:48.760
So I got a episode 25 talking about Selenium with Dave Hunt, and also PyTest and working at Mozilla.


00:16:48.760 --> 00:16:49.960
Yeah, that was a good one.


00:16:49.960 --> 00:16:56.760
And then 26 was a new tool called, that I hadn't heard of before, called PyREST Test,


00:16:57.400 --> 00:17:00.800
and got the developer on to talk about that.


00:17:00.800 --> 00:17:03.400
And it's a REST API testing framework


00:17:03.400 --> 00:17:07.680
that uses YAML to describe the tests.


00:17:07.680 --> 00:17:08.640
It's pretty cool.


00:17:08.640 --> 00:17:09.520
Oh, very cool.


00:17:09.520 --> 00:17:10.920
Yeah, I'll definitely have to check that out.


00:17:10.920 --> 00:17:13.120
YAML seems to be coming along for all sorts of things


00:17:13.120 --> 00:17:13.760
around REST.


00:17:13.760 --> 00:17:18.960
We've got it for Swagger for automatic API documentation


00:17:18.960 --> 00:17:21.960
generation and testing as well, it sounds like.


00:17:21.960 --> 00:17:22.840
That's cool.


00:17:22.840 --> 00:17:25.160
Yeah, my first reaction to YAML stuff


00:17:25.160 --> 00:17:26.520
is why do we need something else?


00:17:26.520 --> 00:17:29.640
but it seems like it's more human readable


00:17:29.640 --> 00:17:31.560
than some of the other options.


00:17:31.560 --> 00:17:34.720
- Yeah, well, long as we stay away from XML, I'm happy.


00:17:34.720 --> 00:17:37.200
- How about you, what's going on with you?


00:17:37.200 --> 00:17:39.440
- Yeah, not so much, just working on


00:17:39.440 --> 00:17:42.000
like the Entrepreneurs' Course that you talked about.


00:17:42.000 --> 00:17:44.440
I'm gonna ship a couple hours of new content there


00:17:44.440 --> 00:17:47.320
after we hang up here and I can get a chance to upload it


00:17:47.320 --> 00:17:49.120
and organize it and all that.


00:17:49.120 --> 00:17:51.400
So I'm just, you know, life's good.


00:17:51.400 --> 00:17:53.920
Love working on all the Python projects I got going on.


00:17:53.920 --> 00:17:54.940
- Wonderful.


00:17:54.940 --> 00:17:55.800
- Yeah, absolutely.


00:17:55.800 --> 00:17:57.960
All right, well, everyone, thank you for listening.


00:17:57.960 --> 00:18:00.800
Brian, thanks for sharing the headlines with me.


00:18:00.800 --> 00:18:01.920
It's been fun.


00:18:01.920 --> 00:18:02.920
- Thank you, it has been fun.


00:18:02.920 --> 00:18:03.920
- Yeah, bye everyone.


00:18:03.920 --> 00:18:06.680
Thank you for listening to Python Bytes.


00:18:06.680 --> 00:18:09.200
Follow the show on Twitter via @PythonBytes.


00:18:09.200 --> 00:18:12.400
That's Python Bytes as in B-Y-T-E-S.


00:18:12.400 --> 00:18:15.760
And get the full show notes at PythonBytes.fm.


00:18:15.760 --> 00:18:17.360
If you have a news item you want featured,


00:18:17.360 --> 00:18:19.840
just visit PythonBytes.fm and send it our way.


00:18:19.840 --> 00:18:23.000
We're always on the lookout for sharing something cool.


00:18:23.000 --> 00:18:24.840
On behalf of myself and Brian Okken,


00:18:24.840 --> 00:18:26.360
This is Michael Kennedy.


00:18:26.360 --> 00:18:28.360
Thank you for listening and sharing this podcast


00:18:28.360 --> 00:18:30.000
with your friends and colleagues.

