WEBVTT

00:00:00.000 --> 00:00:05.600
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.600 --> 00:00:12.000
This is episode 331 recorded April 11th, 2023. And I'm Brian Okken.


00:00:12.000 --> 00:00:13.440
And I'm Michael Kennedy.


00:00:13.440 --> 00:00:18.480
So I want to thank everybody that's showing up on the live stream and watches it on YouTube as well.


00:00:18.480 --> 00:00:22.720
I know a lot of people just listening to the audio, which is great. Thank you.


00:00:22.720 --> 00:00:27.120
But sometimes it's nice to pop over and join the chat.


00:00:27.760 --> 00:00:30.480
We usually record it Tuesday at 11s,


00:00:30.480 --> 00:00:33.480
Tuesdays at 11 Pacific time.


00:00:33.480 --> 00:00:34.980
So if you can catch it, great.


00:00:34.980 --> 00:00:38.080
If not, we enjoy your presence anyway.


00:00:38.080 --> 00:00:41.920
Also want to thank InfluxDB for sponsoring this episode.


00:00:41.920 --> 00:00:44.200
We'll hear more about them later in the show.


00:00:44.200 --> 00:00:47.080
But first, what do you got for us, Michael?


00:00:47.080 --> 00:00:48.880
>> How about we make an application?


00:00:48.880 --> 00:00:50.160
>> Yeah.


00:00:50.160 --> 00:00:52.120
>> Yeah, let's do it.


00:00:52.120 --> 00:01:00.600
So this one was actually thrown out just in passing over on Talk Python.


00:01:00.600 --> 00:01:07.040
When I had that panel about the direction of packaging in Python in general,


00:01:07.040 --> 00:01:09.480
like we've got all these different choices,


00:01:09.480 --> 00:01:11.400
we've got poetry, we've got pipdmv,


00:01:11.400 --> 00:01:14.480
we've got hatch, we've got straight pip, we've got pipduals.


00:01:14.480 --> 00:01:16.840
So I had a bunch of folks on the show to talk about that.


00:01:16.840 --> 00:01:18.520
Paul mentioned like, "Oh,


00:01:18.520 --> 00:01:21.040
make app is something that I'm really dreaming about right now.


00:01:21.040 --> 00:01:25.040
that might be a nice way to think about how we work with packages.


00:01:25.040 --> 00:01:31.460
So Felix Ingram noticed this maybe more than even that I did while we were watching,


00:01:31.460 --> 00:01:34.100
or while he's listening, and thought,


00:01:34.100 --> 00:01:36.260
"Maybe I should talk a bit more about this."


00:01:36.260 --> 00:01:40.040
So I wasn't really aware of this before I dug into it,


00:01:40.040 --> 00:01:46.040
but Make App, it's a little bit like Cookie Cutter and those kinds of things,


00:01:46.040 --> 00:01:49.640
but it'll guide you through creating your application as well as


00:01:49.640 --> 00:01:54.120
helping you test certain things like, for example,


00:01:54.120 --> 00:01:57.280
if I wanna create some Python package


00:01:57.280 --> 00:01:59.840
having to do with secure, I can't call it secure


00:01:59.840 --> 00:02:00.680
because guess what?


00:02:00.680 --> 00:02:03.160
That's already taken on PyPI as a package.


00:02:03.160 --> 00:02:05.600
So I'm never gonna be able to publish that.


00:02:05.600 --> 00:02:06.640
I'm gonna have to rename it.


00:02:06.640 --> 00:02:09.160
I might find that out later along the way.


00:02:09.160 --> 00:02:10.960
So make app will do things like check


00:02:10.960 --> 00:02:13.000
to see that the thing you're trying to create


00:02:13.000 --> 00:02:17.440
could be uploaded to PyPI if you later chose to do so, right?


00:02:17.440 --> 00:02:21.040
And also worth a quick pointing out,


00:02:21.040 --> 00:02:23.840
Felix said, "Hey, look, here's where you can link to it


00:02:23.840 --> 00:02:27.120
"over onto the Talk Python transcript page.


00:02:27.120 --> 00:02:31.020
"And it has every paragraph, I guess, more or less,


00:02:31.020 --> 00:02:33.220
"has its own little link that you can link to


00:02:33.220 --> 00:02:35.240
"and play and hear what it's talking about."


00:02:35.240 --> 00:02:37.280
And I don't think we have that on ours


00:02:37.280 --> 00:02:38.760
and I'm wondering how much people care.


00:02:38.760 --> 00:02:40.640
Like that's work that Michael has to do,


00:02:40.640 --> 00:02:42.240
but a bunch of people are like, "Yes, please."


00:02:42.240 --> 00:02:43.520
Then let me know.


00:02:43.520 --> 00:02:45.160
Anyway, that's how they shared it with me


00:02:45.160 --> 00:02:46.380
and I figured out what we're talking about.


00:02:46.380 --> 00:02:51.380
So this is an app that simplifies creating applications,


00:02:51.380 --> 00:02:53.460
rolling them out, and publishing them.


00:02:53.460 --> 00:02:56.060
And what it does is it will make a skeleton


00:02:56.060 --> 00:02:58.340
for your new application in one command.


00:02:58.340 --> 00:03:00.220
That's kind of the cookie cutter equivalent,


00:03:00.220 --> 00:03:03.080
although there's absolutely fewer templates


00:03:03.080 --> 00:03:04.660
or project types, right?


00:03:04.660 --> 00:03:06.380
There's like five or six project types


00:03:06.380 --> 00:03:08.780
instead of five or 6,000 for a cookie cutter,


00:03:08.780 --> 00:03:10.700
so that's a consideration there.


00:03:10.700 --> 00:03:14.820
But then it'll automatically create a Git repository for you.


00:03:14.820 --> 00:03:18.980
guessing just locally and you've got to link it to GitHub or wherever.


00:03:18.980 --> 00:03:23.340
As I said, it'll check whether the application name is available on PyPI.


00:03:23.340 --> 00:03:29.740
You pick your layout and then it also allows you to manage your app over time.


00:03:29.740 --> 00:03:32.940
So you can easily add entries like here's


00:03:32.940 --> 00:03:36.500
a new item or here's a breaking change to your change log.


00:03:36.500 --> 00:03:37.260
>> Cool.


00:03:37.260 --> 00:03:39.660
>> Publish your application,


00:03:39.660 --> 00:03:41.380
push to source control,


00:03:41.380 --> 00:03:44.580
push to PyPI, and those things in a single command.


00:03:44.580 --> 00:03:45.420
I don't know if I'd use that.


00:03:45.420 --> 00:03:48.380
I think I kind of just am always pushing to GitHub.


00:03:48.380 --> 00:03:51.340
I don't really wait until I'm ready to publish something.


00:03:51.340 --> 00:03:53.500
Like I'm pushing like stuff.


00:03:53.500 --> 00:03:54.640
I always kind of feel bad.


00:03:54.640 --> 00:03:55.720
I think GitHub, probably like,


00:03:55.720 --> 00:03:57.960
why does this person commit so often?


00:03:57.960 --> 00:03:59.140
But it's just like, you know what?


00:03:59.140 --> 00:04:00.520
I'm done with this little thing.


00:04:00.520 --> 00:04:01.360
I want to save it.


00:04:01.360 --> 00:04:02.440
What if I'm on my other computer?


00:04:02.440 --> 00:04:05.100
I don't want to have to try to remember how to get it back.


00:04:05.100 --> 00:04:06.700
Anyway, that's a cool feature.


00:04:06.700 --> 00:04:07.740
I'm not sure I would use.


00:04:07.740 --> 00:04:10.240
So when you create a new one, you say make app new,


00:04:10.240 --> 00:04:12.200
and you give it a name, you give a location,


00:04:12.200 --> 00:04:14.040
and other things like, what is the name?


00:04:14.040 --> 00:04:15.080
and it was the author.


00:04:15.080 --> 00:04:17.820
And you can also take things like the author,


00:04:17.820 --> 00:04:19.120
which you would put on the CLI,


00:04:19.120 --> 00:04:21.360
you can put that into a config file and say,


00:04:21.360 --> 00:04:23.480
you know what, it's me, it's always me.


00:04:23.480 --> 00:04:25.580
When I'm logged into this user profile,


00:04:25.580 --> 00:04:28.540
my name is still the same as it was before, right?


00:04:28.540 --> 00:04:29.980
So don't ask me about that, right?


00:04:29.980 --> 00:04:32.180
So that's kind of cool that you can do that.


00:04:32.180 --> 00:04:37.180
It'll create templates for things like a click powered app,


00:04:37.180 --> 00:04:39.300
something based on pytest.


00:04:39.300 --> 00:04:42.220
It'll, Brian, let you create a pytest plugin project.


00:04:42.220 --> 00:04:43.060
- Nice.


00:04:43.060 --> 00:04:44.600
that's intended to be a pytest thing,


00:04:44.600 --> 00:04:47.060
a Django web app, or this thing called Web Scaf,


00:04:47.060 --> 00:04:49.660
which is also a scaffolding thing for web apps.


00:04:49.660 --> 00:04:51.660
Then when you're ready to publish it,


00:04:51.660 --> 00:04:54.640
you say make app release, and that'll bump a version,


00:04:54.640 --> 00:04:56.620
or you can say make app release,


00:04:56.620 --> 00:04:58.060
increment the major version,


00:04:58.060 --> 00:05:00.700
like that's a major change that you wanna make, right?


00:05:00.700 --> 00:05:02.580
So this will automatically bump the version number,


00:05:02.580 --> 00:05:04.420
tag it in source control,


00:05:04.420 --> 00:05:08.780
push the source and the tag up to GitHub or GitLab


00:05:08.780 --> 00:05:11.060
or wherever you're acting on,


00:05:11.060 --> 00:05:14.500
and publish it to PyPI all in one fail swoop.


00:05:14.500 --> 00:05:15.720
Then again, if you wanna make changes,


00:05:15.720 --> 00:05:17.180
you can say make app change,


00:05:17.180 --> 00:05:19.720
and then you put the text of that change,


00:05:19.720 --> 00:05:22.840
and it'll put that into change log in the right place.


00:05:22.840 --> 00:05:24.620
So you put like quote like here,


00:05:24.620 --> 00:05:28.540
it's plus new change command implemented or whatever.


00:05:28.540 --> 00:05:30.880
And it has certain prefixes like plus


00:05:30.880 --> 00:05:31.940
for a new feature edition,


00:05:31.940 --> 00:05:33.940
exclamation mark for important change,


00:05:33.940 --> 00:05:38.540
minus for a deprecation or star for some minor change.


00:05:38.540 --> 00:05:39.380
Pretty cool.


00:05:39.380 --> 00:05:43.980
On top of that, it comes with auto-complete in your shell.


00:05:43.980 --> 00:05:46.540
So if you're using Bash or OhMyZShell


00:05:46.540 --> 00:05:48.420
or something like that and you wanna hit tab


00:05:48.420 --> 00:05:50.700
and have it know about make app,


00:05:50.700 --> 00:05:52.780
what are its commands right after that,


00:05:52.780 --> 00:05:54.740
then you can put something into your profile,


00:05:54.740 --> 00:05:58.660
your RC file, and it will activate the auto-complete,


00:05:58.660 --> 00:05:59.540
which is cool.


00:05:59.540 --> 00:06:00.380
- That's cool.


00:06:00.380 --> 00:06:02.380
- Yeah, anyway, so people can check this out.


00:06:02.380 --> 00:06:06.540
Comes lightly recommended from that episode,


00:06:06.540 --> 00:06:07.740
but yeah, pretty cool.


00:06:07.740 --> 00:06:09.260
It looks interesting, worth all the money.


00:06:09.260 --> 00:06:10.460
- Nice.


00:06:10.460 --> 00:06:14.100
Well, one of the things I've been thinking about


00:06:14.100 --> 00:06:19.100
and looking forward to is Python 3.12 actually.


00:06:19.100 --> 00:06:25.340
So 3.12 is not here yet, but it is kind of here, right?


00:06:25.340 --> 00:06:30.580
So it's a yearly development cycle, Python's on.


00:06:30.580 --> 00:06:31.900
Where are we at right now?


00:06:31.900 --> 00:06:36.020
Well, we just had, so we just passed Alpha 7.


00:06:36.020 --> 00:06:40.860
So Alpha 7 was released recently.


00:06:40.860 --> 00:06:41.700
I don't think it was right on the--


00:06:41.700 --> 00:06:42.740
- That many days ago, yeah.


00:06:42.740 --> 00:06:45.180
- Yeah, but yeah.


00:06:45.180 --> 00:06:50.180
So 3.12 Alpha 7, and it's nice that they've published


00:06:50.180 --> 00:06:53.440
the schedule, the expected schedule.


00:06:53.440 --> 00:06:56.080
So we've got up through a couple more months


00:06:56.080 --> 00:06:59.660
of four or five months, four months, bad at math,


00:06:59.660 --> 00:07:02.980
in this early in the morning, of betas,


00:07:02.980 --> 00:07:04.740
and then candidate releases,


00:07:04.740 --> 00:07:08.380
and then the final in October, which is awesome.


00:07:08.380 --> 00:07:12.080
So why am I bringing this up?


00:07:12.080 --> 00:07:13.500
I'm bringing it up because a couple things


00:07:13.500 --> 00:07:14.420
happened recently.


00:07:14.420 --> 00:07:17.680
So the Alpha 7, if we took a look at the release notes,


00:07:17.680 --> 00:07:20.940
there's some fun stuff in here.


00:07:20.940 --> 00:07:22.620
I'm not sure when this came in,


00:07:22.620 --> 00:07:27.040
but the thing that I really am looking forward to in 3.12


00:07:27.040 --> 00:07:29.000
is, well, there's some stuff


00:07:29.000 --> 00:07:30.200
that isn't really mentioned here,


00:07:30.200 --> 00:07:32.400
but I think we're gonna get more speed improvements,


00:07:32.400 --> 00:07:34.660
which I'm pretty excited about.


00:07:34.660 --> 00:07:37.500
But there's some cool stuff with,


00:07:37.500 --> 00:07:42.260
oh, this is just the major new features.


00:07:42.260 --> 00:07:44.540
We've got even more improved error messages,


00:07:44.540 --> 00:07:45.380
which are great.


00:07:45.380 --> 00:07:47.140
And that's one of the things I wanted to talk about.


00:07:47.140 --> 00:07:49.100
A whole bunch of great stuff,


00:07:49.100 --> 00:07:52.220
but these are pretty cool.


00:07:52.220 --> 00:07:55.420
Also invalid backslash escape sequences


00:07:55.420 --> 00:07:58.060
now worn for syntax warning and deprecation warning.


00:07:58.060 --> 00:07:59.900
That's kind of neat.


00:07:59.900 --> 00:08:04.900
So in the what's new article for 3.12,


00:08:04.900 --> 00:08:08.040
this does have some examples of the new error messages.


00:08:08.040 --> 00:08:10.240
So these are really kind of neat things.


00:08:10.240 --> 00:08:13.500
Like if you just kind of use sys version info,


00:08:13.500 --> 00:08:15.520
but if you forgot to import it,


00:08:15.520 --> 00:08:18.660
there's some new error logs of,


00:08:18.660 --> 00:08:20.620
did you forget to import sys?


00:08:20.620 --> 00:08:22.820
So did you forget to import?


00:08:22.820 --> 00:08:24.300
Those are nice error messages.


00:08:24.300 --> 00:08:27.180
There's another one from like,


00:08:27.180 --> 00:08:32.180
if you're using a variable within a class


00:08:32.180 --> 00:08:35.660
that's not around, maybe it's a self variable


00:08:35.660 --> 00:08:37.460
that you forgot or self member variable.


00:08:37.460 --> 00:08:40.740
So there's a, did you mean self.bleh?


00:08:40.740 --> 00:08:43.360
Nice example.


00:08:43.360 --> 00:08:47.740
Syntax error from, and I've done this a lot


00:08:47.740 --> 00:08:50.940
of import from and messing this up.


00:08:50.940 --> 00:08:53.920
So it's import something from this other thing.


00:08:53.920 --> 00:08:57.080
It's not that, you're supposed to say from something,


00:08:57.080 --> 00:09:00.860
import something and the syntax error now says,


00:09:00.860 --> 00:09:02.840
did you mean to use this instead?


00:09:02.840 --> 00:09:07.120
Which also, I don't know, to me begs the question of,


00:09:07.120 --> 00:09:10.120
like, can't you just figure it out if you know what I meant?


00:09:10.120 --> 00:09:14.960
But anyway, yeah, some other, like import error messages,


00:09:14.960 --> 00:09:19.960
some cleanup, more specific error messages, always exciting.


00:09:19.960 --> 00:09:23.640
The other, there's always new exciting things


00:09:23.640 --> 00:09:24.600
in new versions.


00:09:24.600 --> 00:09:25.440
One of the--


00:09:25.440 --> 00:09:29.440
Off of that bit, I just want to bring a little audience feedback.


00:09:29.440 --> 00:09:32.680
Sean Tibor from Teaching Python out there says,


00:09:32.680 --> 00:09:34.680
"Hooray for better error messages."


00:09:34.680 --> 00:09:36.480
And Pamela Fox says,


00:09:36.480 --> 00:09:39.760
"Yay, I've already been benefiting from 3.11 error message improvements,


00:09:39.760 --> 00:09:44.200
some of which I requested myself in the Python forum.


00:09:44.200 --> 00:09:45.600
Tell Pablo what you need."


00:09:45.600 --> 00:09:47.040
Yes, I think this is really great.


00:09:47.040 --> 00:09:49.760
It's certainly getting nice to have those,


00:09:49.760 --> 00:09:53.400
especially for people getting started in Python to be less confused.


00:09:53.400 --> 00:09:55.560
>> Yeah, and I'm finding myself,


00:09:55.560 --> 00:09:58.680
just I'm in a hurry more often than I guess I'm


00:09:58.680 --> 00:10:01.440
always in more of a hurry getting stuff done.


00:10:01.440 --> 00:10:05.020
If the error message can help me solve something quicker,


00:10:05.020 --> 00:10:07.320
that's a nice win.


00:10:07.320 --> 00:10:10.120
Just one of the announcements that came out recently.


00:10:10.120 --> 00:10:12.160
This is tight schedule.


00:10:12.160 --> 00:10:14.000
We're on Alpha 7,


00:10:14.000 --> 00:10:16.320
we've got no more Alphas,


00:10:16.320 --> 00:10:17.620
we've got some Betas coming,


00:10:17.620 --> 00:10:24.100
but I thought we were no new features beyond the Beta 1.


00:10:24.100 --> 00:10:27.140
One of the new features that I don't see so far,


00:10:27.140 --> 00:10:29.500
but it's supposedly coming in,


00:10:29.500 --> 00:10:34.140
is this per-interpreter gill,


00:10:34.140 --> 00:10:37.980
PEP 684, it's good for 3.12.


00:10:37.980 --> 00:10:40.220
It just got approved.


00:10:40.220 --> 00:10:43.620
I think I'm excited about it. I'm not sure.


00:10:43.620 --> 00:10:45.820
I don't know if you know much about it, Michael.


00:10:45.820 --> 00:10:48.540
but it says here, okay, so I'm just gonna


00:10:48.540 --> 00:10:50.500
quickly summarize the abstract.


00:10:50.500 --> 00:10:54.980
So CPython users can run multiple interpreters


00:10:54.980 --> 00:10:56.780
in the same process.


00:10:56.780 --> 00:10:58.940
However, interpreters in the same process


00:10:58.940 --> 00:11:01.980
always shared the same global state.


00:11:01.980 --> 00:11:03.020
So one gil.


00:11:03.020 --> 00:11:05.820
It is a source of bugs.


00:11:05.820 --> 00:11:08.020
So, and with a growing impact


00:11:08.020 --> 00:11:10.100
as more people use the feature.


00:11:10.100 --> 00:11:13.300
Furthermore, sufficient isolation would facilitate


00:11:13.300 --> 00:11:15.500
true multi-core parallelism.


00:11:15.500 --> 00:11:18.260
Ooh, I like multi-corporalism.


00:11:18.260 --> 00:11:20.900
So I think we want this.


00:11:20.900 --> 00:11:23.500
And so there's outlines in the proposal.


00:11:23.500 --> 00:11:27.020
So we're gonna have, they're moving the data


00:11:27.020 --> 00:11:31.740
surrounding the GIL into the per interpreter data.


00:11:31.740 --> 00:11:33.860
And I think I'm excited about it,


00:11:33.860 --> 00:11:36.020
but then later on it does say,


00:11:36.020 --> 00:11:39.980
there's a reference like for how do we teach this?


00:11:39.980 --> 00:11:44.460
And it mentions, oh, I think I've lost the link.


00:11:44.460 --> 00:11:47.100
Oh, this is an advanced feature meant


00:11:47.100 --> 00:11:50.020
for a narrow set of users of the C API.


00:11:50.020 --> 00:11:53.740
So I'm not sure how this will affect normal people


00:11:53.740 --> 00:11:55.900
in the future, but I still think it's a good thing.


00:11:55.900 --> 00:11:57.260
Do you have any idea, Michael?


00:11:57.260 --> 00:11:58.080
- I have no idea.


00:11:58.080 --> 00:11:59.440
Yeah, I think that the trick is


00:11:59.440 --> 00:12:01.700
how do you start a new interpreter?


00:12:01.700 --> 00:12:05.140
And what I would imagine might come out of this


00:12:05.140 --> 00:12:07.740
is there might be, right now in Python,


00:12:07.740 --> 00:12:10.340
we can create threads and we can create multiprocessing


00:12:10.340 --> 00:12:12.060
and we can do async I/O, right?


00:12:12.060 --> 00:12:12.900
- Yeah.


00:12:12.900 --> 00:12:14.660
I think I/O, it's just one thread.


00:12:14.660 --> 00:12:16.540
It doesn't do any of that.


00:12:16.540 --> 00:12:18.260
So kind of put that to a side.


00:12:18.260 --> 00:12:21.260
It doesn't really fall into the same realm.


00:12:21.260 --> 00:12:24.380
But with threading versus multiprocessing,


00:12:24.380 --> 00:12:26.660
it's always been this trade-off of, well,


00:12:26.660 --> 00:12:29.580
I really just want to run more than one thing at a time.


00:12:29.580 --> 00:12:32.040
And I've got 32 cores.


00:12:32.040 --> 00:12:33.300
Why can I only use one of them?


00:12:33.300 --> 00:12:35.380
I have this work I want to do.


00:12:35.380 --> 00:12:40.180
And this might be interesting for you as a data scientist


00:12:40.180 --> 00:12:43.260
or a scientist or somebody doing computational work,


00:12:43.260 --> 00:12:46.420
say on like hardware devices, a lot of,


00:12:46.420 --> 00:12:49.860
but then it also could be interesting for web consumer,


00:12:49.860 --> 00:12:52.620
web developers and APIs and stuff, right?


00:12:52.620 --> 00:12:54.900
Like those threads might be, you know,


00:12:54.900 --> 00:12:58.220
you're still blocked on the gill on the server side


00:12:58.220 --> 00:12:59.700
for each process that you spin off.


00:12:59.700 --> 00:13:02.060
And that's why we have a bunch of worker processes


00:13:02.060 --> 00:13:04.300
that run like you have eight worker processes


00:13:04.300 --> 00:13:06.660
already in a copy of your entire app


00:13:06.660 --> 00:13:08.660
consuming all that memory, right?


00:13:08.660 --> 00:13:10.060
That's, why do you do that?


00:13:10.060 --> 00:13:12.500
Well, because you don't want to be subjected to the gill,


00:13:12.500 --> 00:13:15.460
for among other reasons, but that's a primary reason.


00:13:15.460 --> 00:13:17.020
'Cause you can't really do it in parallel,


00:13:17.020 --> 00:13:19.220
but if you had a bunch of processes that are independent.


00:13:19.220 --> 00:13:22.260
So I can certainly see there might be some kind of API


00:13:22.260 --> 00:13:24.460
or something in the future where when you create a thread,


00:13:24.460 --> 00:13:28.820
you can say, and this thread lives inside this process,


00:13:28.820 --> 00:13:31.100
but I want more isolation.


00:13:31.100 --> 00:13:33.740
Like, interpreter isolation equals true


00:13:33.740 --> 00:13:35.220
when you create the thread or whatever.


00:13:35.220 --> 00:13:37.740
And then when you run that work,


00:13:37.740 --> 00:13:38.820
there's two things that happen.


00:13:38.820 --> 00:13:41.940
One, it should run in true parallel form,


00:13:41.940 --> 00:13:43.700
but let the OS, it'll be an OS thread,


00:13:43.700 --> 00:13:46.260
the OS will schedule that on its own course.


00:13:46.260 --> 00:13:49.080
But then you also will have to actually care about lock.


00:13:49.080 --> 00:13:52.520
Like other languages like C and C# and stuff,


00:13:52.520 --> 00:13:54.100
you do parallelism, you're all about,


00:13:54.100 --> 00:13:54.940
okay, when do I lock this?


00:13:54.940 --> 00:13:55.760
How do I lock that?


00:13:55.760 --> 00:13:56.600
How do I unlock it?


00:13:56.600 --> 00:13:57.420
What about a deadlock?


00:13:57.420 --> 00:13:59.980
And in Python, eh, kind of the gill will help us a lot.


00:13:59.980 --> 00:14:01.100
Like that's gone, right?


00:14:01.100 --> 00:14:04.940
And so it kind of levels up the difficulty of thread safety


00:14:04.940 --> 00:14:06.200
because there's more of a chance


00:14:06.200 --> 00:14:07.500
that these things run in parallel.


00:14:07.500 --> 00:14:10.420
So anyway, that's my thoughts.


00:14:10.420 --> 00:14:13.900
>> I think the gist around it is there were a lot of people that were--


00:14:13.900 --> 00:14:17.620
there are some people that are trying to utilize the multi-interpreter


00:14:17.620 --> 00:14:19.540
or sub-interpreter systems,


00:14:19.540 --> 00:14:22.940
and they were running into problems because of this,


00:14:22.940 --> 00:14:26.580
the GILs global sort of a thing.


00:14:26.580 --> 00:14:29.940
And so it's not just the GIL,


00:14:29.940 --> 00:14:32.140
but there's other things involved with this PEP


00:14:32.140 --> 00:14:36.900
that push more of the data around the per-interpreter thing into isolation.


00:14:36.900 --> 00:14:39.780
So it's increased isolation of the per interpreter stuff,


00:14:39.780 --> 00:14:40.860
including the GIL.


00:14:40.860 --> 00:14:44.780
And those kind of people, like it says,


00:14:44.780 --> 00:14:46.700
maintainers of any extension module


00:14:46.700 --> 00:14:50.500
that created isolated interpreters,


00:14:50.500 --> 00:14:52.980
they'll now be able to utilize this better.


00:14:52.980 --> 00:14:55.460
So there's some people making some cool things


00:14:55.460 --> 00:14:56.300
that'll continue.


00:14:56.300 --> 00:14:57.140
So, yay.


00:14:57.140 --> 00:14:58.100
Anyway.


00:14:58.100 --> 00:14:59.220
- I'm very excited for this.


00:14:59.220 --> 00:15:00.460
I'm excited for this.


00:15:00.460 --> 00:15:01.860
I'm excited for the no-GIL Python.


00:15:01.860 --> 00:15:04.460
I think it's one of these sort of chicken and egg


00:15:04.460 --> 00:15:05.300
type issues.


00:15:05.300 --> 00:15:07.700
"Ah, I don't really need the threading stuff.


00:15:07.700 --> 00:15:08.540
"I don't really use it."


00:15:08.540 --> 00:15:10.540
Because it's Python, a lot of people are like,


00:15:10.540 --> 00:15:12.300
"Well, there's no point in trying it."


00:15:12.300 --> 00:15:15.180
So there's just not a culture of really leveraging


00:15:15.180 --> 00:15:18.300
the hardware outside of these very specialized C APIs


00:15:18.300 --> 00:15:20.020
or certain Rust scenarios.


00:15:20.020 --> 00:15:20.980
But then when you do see them, you're like,


00:15:20.980 --> 00:15:22.540
"Oh, it's like 50 times faster."


00:15:22.540 --> 00:15:24.060
Like, "Hmm, wouldn't it be kind of nice


00:15:24.060 --> 00:15:27.180
"to go 50 times faster sometimes if you might need it?"


00:15:27.180 --> 00:15:30.700
Or use half as much RAM on a server


00:15:30.700 --> 00:15:33.020
'cause you don't need to scale out as much for the gill.


00:15:33.020 --> 00:15:34.620
- Like you said, in other languages,


00:15:34.620 --> 00:15:37.480
we have to like freak out about like locks


00:15:37.480 --> 00:15:40.260
or using a message queue system


00:15:40.260 --> 00:15:42.220
for different processes instead


00:15:42.220 --> 00:15:44.100
and we don't have to deal with that now.


00:15:44.100 --> 00:15:46.700
But so I think it's good


00:15:46.700 --> 00:15:48.700
that we're taking slow steps towards it.


00:15:48.700 --> 00:15:49.580
So it's good.


00:15:49.580 --> 00:15:50.680
Anyway.


00:15:50.680 --> 00:15:52.900
- Yeah, no, I think this is good.


00:15:52.900 --> 00:15:54.860
I talked to Eric Snow about it long ago.


00:15:54.860 --> 00:15:58.260
It sounds like it's created better data isolation


00:15:58.260 --> 00:16:00.300
within the CPython source code anyway.


00:16:00.300 --> 00:16:01.940
There's a bunch of global shared variables


00:16:01.940 --> 00:16:04.060
that weren't really meant to be shared,


00:16:04.060 --> 00:16:06.500
but they were, 'cause there's really only one thing.


00:16:06.500 --> 00:16:08.780
And this refactoring, I think,


00:16:08.780 --> 00:16:11.180
has also made it a little bit better inside.


00:16:11.180 --> 00:16:12.540
- Yeah, okay, cool.


00:16:12.540 --> 00:16:15.860
Do you know what else is cool?


00:16:15.860 --> 00:16:16.860
- Databases.


00:16:16.860 --> 00:16:18.740
- Yeah, databases are great.


00:16:18.740 --> 00:16:23.100
And we wanna thank InfluxDB for sponsoring this episode.


00:16:23.100 --> 00:16:25.620
InfluxDB is a database purpose-built


00:16:25.620 --> 00:16:27.540
for handling time series data


00:16:27.540 --> 00:16:31.060
at massive scale for real-time analytics.


00:16:31.060 --> 00:16:32.900
Dell developers can ingest, store,


00:16:32.900 --> 00:16:36.020
and analyze all types of time series data, metrics,


00:16:36.020 --> 00:16:38.580
events, traces in a single platform.


00:16:38.580 --> 00:16:41.020
So dear listener, let me ask you a question.


00:16:41.020 --> 00:16:43.040
How would boundless cardinality


00:16:43.040 --> 00:16:44.780
and lightning fast SQL queries


00:16:44.780 --> 00:16:47.860
impact the way you develop real-time applications?


00:16:47.860 --> 00:16:50.980
InfluxDB processes large time series data sets


00:16:50.980 --> 00:16:53.500
and provides low latency SQL queries,


00:16:53.500 --> 00:16:55.700
making it a go-to choice for developers


00:16:55.700 --> 00:16:59.540
building real-time applications and seeking crucial insights.


00:16:59.540 --> 00:17:01.140
For developer efficiency,


00:17:01.140 --> 00:17:04.860
InfluxDB helps you create IoT, analytics,


00:17:04.860 --> 00:17:07.740
and cloud applications using timestamped data


00:17:07.740 --> 00:17:10.060
rapidly and at scale.


00:17:10.060 --> 00:17:13.300
It's designed to ingest billions of data points


00:17:13.300 --> 00:17:16.220
in real time with unlimited cardinality.


00:17:16.220 --> 00:17:19.220
InfluxDB streamlines building once


00:17:19.220 --> 00:17:21.780
and deploying across various products and environments


00:17:21.780 --> 00:17:24.900
from the edge, on-premise, and to the cloud.


00:17:24.900 --> 00:17:28.940
Try it for free at pythonbytes.fm/influxdb.


00:17:28.940 --> 00:17:30.980
The link is also in your show notes.


00:17:30.980 --> 00:17:33.100
Thanks, NFlux, for supporting the show.


00:17:33.100 --> 00:17:35.260
- Very, very awesome, thank you for supporting the show.


00:17:35.260 --> 00:17:39.060
Now, Brian, you live in the future


00:17:39.060 --> 00:17:42.180
in this world of Python 3.12.


00:17:42.180 --> 00:17:43.020
- Yeah.


00:17:43.020 --> 00:17:46.420
- I live in the present, as in just a few days ago,


00:17:46.420 --> 00:17:50.060
Python 3.11.3 was released, how about that?


00:17:50.060 --> 00:17:51.180
- Oh, cool, yeah.


00:17:51.180 --> 00:17:52.340
- I don't know, my feeling's a lot of times


00:17:52.340 --> 00:17:54.820
when it's one of these point releases,


00:17:54.820 --> 00:17:56.140
maybe it's worth upgrading.


00:17:56.140 --> 00:17:59.700
Sometimes there's something cool in there, sometimes not.


00:17:59.700 --> 00:18:02.380
This one, you probably want to get in there and check it out


00:18:02.380 --> 00:18:04.140
because number one,


00:18:04.140 --> 00:18:06.860
and this is not very common in the Python world,


00:18:06.860 --> 00:18:09.460
that there's a security update.


00:18:09.460 --> 00:18:13.720
So they updated the underlying open SSL version


00:18:13.720 --> 00:18:18.200
for Windows and Mac OS to 1.1.1 T.


00:18:18.200 --> 00:18:20.260
And we talked about like semantic version


00:18:20.260 --> 00:18:21.100
and calendar version.


00:18:21.100 --> 00:18:25.380
This one's the T versioning style to address,


00:18:25.380 --> 00:18:29.300
let's see, one, two, and three CVEs.


00:18:29.300 --> 00:18:31.580
And if you go pop over there to read a bit about that,


00:18:31.580 --> 00:18:33.220
it says severity high.


00:18:33.220 --> 00:18:34.060
(chuckles)


00:18:34.060 --> 00:18:36.980
Okay, that doesn't sound absolutely incredible.


00:18:36.980 --> 00:18:38.580
Another one is moderate,


00:18:38.580 --> 00:18:40.540
and another one is moderate, right?


00:18:40.540 --> 00:18:43.620
So those are probably worth paying attention to then.


00:18:43.620 --> 00:18:47.500
So that's, I just realized like 20 minutes ago


00:18:47.500 --> 00:18:49.380
that actually I know it came out last week,


00:18:49.380 --> 00:18:51.500
but I just noticed it this little bit ago.


00:18:51.500 --> 00:18:52.740
And because of the security stuff,


00:18:52.740 --> 00:18:54.940
I decided I'm kicking out something


00:18:54.940 --> 00:18:55.980
I wasn't gonna cover before,


00:18:55.980 --> 00:18:56.980
I'm putting this one in here.


00:18:56.980 --> 00:18:57.820
So.


00:18:57.820 --> 00:18:58.660
- That's pretty important.


00:18:58.660 --> 00:19:01.140
Yeah, I just wanna be a little timely on that.


00:19:01.140 --> 00:19:02.460
So there's also some other things,


00:19:02.460 --> 00:19:04.260
you know, there's always a few things like,


00:19:04.260 --> 00:19:07.180
I wonder if that might be causing a problem.


00:19:07.180 --> 00:19:11.660
For example, stack top value on tracing entries


00:19:11.660 --> 00:19:13.940
to avoid corruption on the garbage collection.


00:19:13.940 --> 00:19:16.300
Like, I don't know that I do that,


00:19:16.300 --> 00:19:18.380
but maybe things that I use do that.


00:19:18.380 --> 00:19:20.980
And I don't want a corrupted garbage collector, right?


00:19:20.980 --> 00:19:21.980
That would be bad.


00:19:21.980 --> 00:19:24.940
Who knows if it leaks data, that's bad.


00:19:24.940 --> 00:19:27.260
But if it goes and collects something that's not bad,


00:19:27.260 --> 00:19:29.780
that's really gonna be a problem.


00:19:29.780 --> 00:19:33.060
Overflow when creating very large dictionaries,


00:19:33.060 --> 00:19:36.620
causes a crash when deallocating nested filter objects,


00:19:36.620 --> 00:19:39.740
segfault from a race condition during garbage collection.


00:19:39.740 --> 00:19:40.900
All right, so there's enough stuff in here


00:19:40.900 --> 00:19:41.900
that I'm like, you know what?


00:19:41.900 --> 00:19:43.420
This thing's getting an update.


00:19:43.420 --> 00:19:45.540
All right, so those are the cores and built in,


00:19:45.540 --> 00:19:46.940
and then there's a bunch of things,


00:19:46.940 --> 00:19:49.700
a bunch of improvements to the standard library


00:19:49.700 --> 00:19:51.900
people can check out, right?


00:19:51.900 --> 00:19:55.300
So it's just always interesting how much,


00:19:55.300 --> 00:19:57.220
how many things get changed,


00:19:57.220 --> 00:19:58.220
even though you think like,


00:19:58.220 --> 00:20:00.540
"Eh, standard library is kind of static and fixed,"


00:20:00.540 --> 00:20:03.700
but like, "Fixed Dundra WeakRef descriptor generation


00:20:03.700 --> 00:20:05.300
for custom data classes."


00:20:05.300 --> 00:20:07.180
And you know, for binary mode,


00:20:07.180 --> 00:20:10.320
file hook compressed doesn't set the encoding


00:20:10.320 --> 00:20:13.460
even if the value is none and so on.


00:20:13.460 --> 00:20:15.620
So just a bunch of little things getting fixed.


00:20:15.620 --> 00:20:18.500
But the reason I put it to the top of the list


00:20:18.500 --> 00:20:20.020
is the security stuff.


00:20:20.020 --> 00:20:21.340
- Yeah, one of the security things


00:20:21.340 --> 00:20:24.180
that's interesting to me, I haven't looked into that yet,


00:20:24.180 --> 00:20:27.060
is that subprocess, popen thing.


00:20:27.060 --> 00:20:31.900
is a lot of people use Python to coordinate other activities


00:20:31.900 --> 00:20:36.580
on, you know, like DevOps and systems admin


00:20:36.580 --> 00:20:38.060
and stuff like that.


00:20:38.060 --> 00:20:40.740
So security patches around that,


00:20:40.740 --> 00:20:42.420
you probably should pay attention to.


00:20:42.420 --> 00:20:44.420
So that's pretty interesting.


00:20:44.420 --> 00:20:45.780
- Absolutely.


00:20:45.780 --> 00:20:48.060
Yeah, specifically for Windows users, right?


00:20:48.060 --> 00:20:51.900
So now this is a safer approach to find CMD.exe


00:20:51.900 --> 00:20:54.780
when launching with shell equals true.


00:20:54.780 --> 00:20:56.500
- Yeah, and I can't imagine like,


00:20:56.500 --> 00:20:59.300
I didn't even think that if you found the wrong command,


00:20:59.300 --> 00:21:03.380
you'd be passing all your stuff to the wrong, like, you know.


00:21:03.380 --> 00:21:04.860
- Some evil CMD?


00:21:04.860 --> 00:21:06.180
- Yeah.


00:21:06.180 --> 00:21:07.020
Yikes.


00:21:07.020 --> 00:21:08.300
- Yeah, I do.


00:21:08.300 --> 00:21:09.140
Cool.


00:21:09.140 --> 00:21:10.340
All right, well, that's that one.


00:21:10.340 --> 00:21:11.180
What's your last?


00:21:11.180 --> 00:21:13.620
- I want to do something fun


00:21:13.620 --> 00:21:17.900
'cause I'm looking forward to PyCon coming up, right?


00:21:17.900 --> 00:21:18.740
Pretty soon.


00:21:18.740 --> 00:21:20.340
Are you pretty excited about that?


00:21:20.340 --> 00:21:22.220
- I am excited.


00:21:22.220 --> 00:21:23.740
I think it's approaching faster


00:21:23.740 --> 00:21:27.420
then I'm ready to prepare for being there for all that time


00:21:27.420 --> 00:21:28.700
and getting the most out of it.


00:21:28.700 --> 00:21:29.980
But yeah, I'm excited.


00:21:29.980 --> 00:21:33.500
- Yeah, so there's an article, who's this by?


00:21:33.500 --> 00:21:37.780
Sebastian Witowski, "How to Make a Great Conference Talk."


00:21:37.780 --> 00:21:39.940
And I kind of like this.


00:21:39.940 --> 00:21:42.060
There's some really great advice in here.


00:21:42.060 --> 00:21:44.260
So I know it's kind of late.


00:21:44.260 --> 00:21:46.180
A lot of people that are speaking,


00:21:46.180 --> 00:21:48.220
people speak at all sorts of conferences though,


00:21:48.220 --> 00:21:49.180
so it's good.


00:21:49.180 --> 00:21:51.300
But if you're speaking at PyCon,


00:21:51.300 --> 00:21:53.180
there's a couple of things I want to highlight.


00:21:53.180 --> 00:21:56.460
You probably already have your slides set up, hopefully.


00:21:56.460 --> 00:21:58.220
And know you've already been accepted,


00:21:58.220 --> 00:22:00.340
so you don't need to worry.


00:22:00.340 --> 00:22:04.500
You can maybe skip the benefits of speaking at a conference,


00:22:04.500 --> 00:22:07.300
but I highly recommend people try.


00:22:07.300 --> 00:22:09.940
I think there's benefits of even submitting


00:22:09.940 --> 00:22:12.220
and trying to get an idea together,


00:22:12.220 --> 00:22:15.560
even if you don't present it, 'cause it's nice.


00:22:15.560 --> 00:22:20.180
Anyway, then there's call for proposals,


00:22:20.180 --> 00:22:22.100
research preparation slides.


00:22:22.100 --> 00:22:23.640
There's a whole bunch of stuff in here that's great.


00:22:23.640 --> 00:22:25.540
I wanna skip to the end.


00:22:25.540 --> 00:22:30.080
So you're in the middle of maybe trying to do rehearsing.


00:22:30.080 --> 00:22:34.420
So I say skip to this part, the live demos part


00:22:34.420 --> 00:22:37.300
and rehearsing and what to do on the day of the presentation


00:22:37.300 --> 00:22:40.020
and make sure you review these, 'cause these are great.


00:22:40.020 --> 00:22:43.620
And the greatest advice I've ever seen for live demos


00:22:43.620 --> 00:22:45.760
is do you really need a demo?


00:22:45.760 --> 00:22:50.940
We've probably all, I don't know if anybody's,


00:22:50.940 --> 00:22:52.860
Anybody that's tried to do a live demo


00:22:52.860 --> 00:22:55.440
has had one not go as they expected.


00:22:55.440 --> 00:22:58.400
Even if it turned out okay, it's a stressful thing.


00:22:58.400 --> 00:23:02.360
So especially if you are new to presenting,


00:23:02.360 --> 00:23:04.280
I would say skip the live demo.


00:23:04.280 --> 00:23:06.880
It's cool when it works, when it doesn't,


00:23:06.880 --> 00:23:11.380
and the other thing is, if you're gonna do it anyway


00:23:11.380 --> 00:23:15.280
and something goes wrong, the Python people in the audience


00:23:15.280 --> 00:23:17.700
are not gonna like heckle you or anything like that.


00:23:17.700 --> 00:23:19.120
We're a nice bunch of people


00:23:19.120 --> 00:23:20.920
And we've all had it happen to us.


00:23:20.920 --> 00:23:24.920
So you shouldn't feel too embarrassed.


00:23:24.920 --> 00:23:27.000
But prepare for it.


00:23:27.000 --> 00:23:28.960
What are you going to do if the Wi-Fi goes out?


00:23:28.960 --> 00:23:31.560
Things like that.


00:23:31.560 --> 00:23:35.000
And also, I just don't do them anymore,


00:23:35.000 --> 00:23:37.160
because they've always gone wrong for me.


00:23:37.160 --> 00:23:38.760
OK, moving on.


00:23:38.760 --> 00:23:40.880
At the very least, practice them.


00:23:40.880 --> 00:23:41.760
Rehearsing.


00:23:41.760 --> 00:23:44.640
I see a lot of people-- and I used to be like this--


00:23:44.640 --> 00:23:46.200
to forget to rehearse.


00:23:46.200 --> 00:23:49.360
The rehearsing is the most important part.


00:23:49.360 --> 00:23:52.060
And I can't remember where it is in here,


00:23:52.060 --> 00:23:55.520
but it's good advice of taking,


00:23:55.520 --> 00:23:57.160
practicing the first five minutes,


00:23:57.160 --> 00:24:00.200
making sure you've got the first five minutes,


00:24:00.200 --> 00:24:02.080
the last five minutes memorized.


00:24:02.080 --> 00:24:05.680
You can, you know exactly what you're gonna say.


00:24:05.680 --> 00:24:08.560
Because it's hard if you think you kinda know


00:24:08.560 --> 00:24:09.620
what you're gonna say.


00:24:09.620 --> 00:24:11.400
When you get up there, it's blank page.


00:24:11.400 --> 00:24:12.960
You have to, how do you start?


00:24:12.960 --> 00:24:15.120
So knowing how to start and knowing how to finish


00:24:15.120 --> 00:24:16.280
is a good thing.


00:24:16.280 --> 00:24:19.660
So practice, and I also see,


00:24:19.660 --> 00:24:21.980
I've seen people practice quietly,


00:24:21.980 --> 00:24:23.940
and I've done this before, in your head.


00:24:23.940 --> 00:24:25.680
Practicing in your head doesn't count.


00:24:25.680 --> 00:24:26.740
Do it out loud.


00:24:26.740 --> 00:24:27.840
And do it standing.


00:24:27.840 --> 00:24:29.220
You're gonna be standing at a conference,


00:24:29.220 --> 00:24:30.780
so don't sit and practice it.


00:24:30.780 --> 00:24:32.620
Stand up and practice it.


00:24:32.620 --> 00:24:36.900
I was at Pi Cascades, I was in the hotel room,


00:24:36.900 --> 00:24:38.900
and what did I use for a standing desk?


00:24:38.900 --> 00:24:40.080
The ironing board.


00:24:40.080 --> 00:24:42.240
The ironing board works great in a hotel


00:24:42.240 --> 00:24:44.240
for your standing desk to practice it.


00:24:44.240 --> 00:24:46.020
Anyway, practice your talk.


00:24:46.020 --> 00:24:47.900
And I take one of these.


00:24:47.900 --> 00:24:50.160
So I'm gonna have a link in this,


00:24:50.160 --> 00:24:52.280
I'm gonna take a look at this in a second,


00:24:52.280 --> 00:24:54.820
but one of these time timers.


00:24:54.820 --> 00:24:58.740
So it's 36 bucks for a little tiny timer.


00:24:58.740 --> 00:25:00.420
So what's the big deal?


00:25:00.420 --> 00:25:02.700
You can visually see what's going on.


00:25:02.700 --> 00:25:03.700
And I love these things.


00:25:03.700 --> 00:25:06.340
And that's what I used to practice with.


00:25:06.340 --> 00:25:10.440
And the other comment in here is to pay attention


00:25:10.440 --> 00:25:12.660
to where you are in your slides at different points,


00:25:12.660 --> 00:25:13.780
which is a great idea.


00:25:13.780 --> 00:25:17.660
like at 15 minutes, or 10 minutes, 20 minutes, whatever,


00:25:17.660 --> 00:25:19.900
where are you approximately in your slides?


00:25:19.900 --> 00:25:22.820
The reason for that is while you're doing your presentation,


00:25:22.820 --> 00:25:25.100
if you're at the 10 minute mark


00:25:25.100 --> 00:25:27.640
and you're already halfway through your talk,


00:25:27.640 --> 00:25:28.800
slow down a little bit.


00:25:28.800 --> 00:25:30.020
If you're at the 10 minute mark


00:25:30.020 --> 00:25:32.100
and you've only gone through the first three slides,


00:25:32.100 --> 00:25:33.420
you're gonna have to speed up a little bit


00:25:33.420 --> 00:25:34.900
or else you're not gonna get into it.


00:25:34.900 --> 00:25:36.100
- Or skip something.


00:25:36.100 --> 00:25:38.500
- Or, yeah, or skip something.


00:25:38.500 --> 00:25:41.060
Know what you're gonna skip, but practice it.


00:25:41.060 --> 00:25:44.100
And then some great advice for day of the presentation.


00:25:44.100 --> 00:25:46.320
Don't drink too much water or coffee.


00:25:46.320 --> 00:25:48.180
You're gonna want to, but don't.


00:25:48.180 --> 00:25:50.840
Because, but drink some, make sure you're hydrated,


00:25:50.840 --> 00:25:52.820
but not too hydrated, 'cause you know.


00:25:52.820 --> 00:25:56.100
So anyway, some great advice here,


00:25:56.100 --> 00:25:59.100
packing checklist, make sure you have extra chargers.


00:25:59.100 --> 00:26:01.400
I've got like the little dongle thing,


00:26:01.400 --> 00:26:03.100
'cause conferences usually have


00:26:03.100 --> 00:26:05.580
whatever you need to hook up to, but I don't trust that.


00:26:05.580 --> 00:26:09.420
So I make sure that my laptop can get to HDMI,


00:26:09.420 --> 00:26:14.420
can get to, yeah, whatever it needs to.


00:26:14.420 --> 00:26:16.120
Extra charger if you've got one.


00:26:16.120 --> 00:26:17.340
So just prepare.


00:26:17.340 --> 00:26:18.900
- Yeah, it's a good article.


00:26:18.900 --> 00:26:20.780
Sebastian's a great presenter, so.


00:26:20.780 --> 00:26:21.620
- Yeah.


00:26:21.620 --> 00:26:22.440
- He's done a bunch.


00:26:22.440 --> 00:26:25.260
I also have some thoughts.


00:26:25.260 --> 00:26:28.280
I would say regarding the live demo part,


00:26:28.280 --> 00:26:30.020
I'm on board with Marco.


00:26:30.020 --> 00:26:33.280
Like I think, not that one, this one,


00:26:33.280 --> 00:26:37.100
that I find talks of live demos, he says more exciting.


00:26:37.100 --> 00:26:39.000
I say more real, right?


00:26:39.000 --> 00:26:43.320
Like if, and I think it applies in an important role,


00:26:43.320 --> 00:26:45.360
like there's certain things you show picture, picture,


00:26:45.360 --> 00:26:46.960
picture, you're like, oh, that's cool,


00:26:46.960 --> 00:26:48.780
but I bet that's really hard.


00:26:48.780 --> 00:26:50.760
But if you show, actually there's these three lines


00:26:50.760 --> 00:26:53.220
that I wrote in a minute in front of you,


00:26:53.220 --> 00:26:54.780
and now the thing happens, like,


00:26:54.780 --> 00:26:56.480
oh, that's totally approachable, I could do it.


00:26:56.480 --> 00:26:58.920
And I think it just sets a different tone.


00:26:58.920 --> 00:27:00.520
Don't think every talk has to have it.


00:27:00.520 --> 00:27:04.800
Like there's storytelling talks and like big picture talks


00:27:04.800 --> 00:27:05.880
and like those don't need it.


00:27:05.880 --> 00:27:08.800
But if you're trying to talk about a focused technology,


00:27:08.800 --> 00:27:11.320
I think it's almost table stakes.


00:27:11.320 --> 00:27:13.880
So I disagree a bit with Sebastian on that.


00:27:13.880 --> 00:27:15.440
- Okay, yeah. - However,


00:27:15.440 --> 00:27:19.840
that said, you can go into it with a blank file


00:27:19.840 --> 00:27:22.820
and get confused, you can get distracted,


00:27:22.820 --> 00:27:24.980
you can make mistakes, you can forget things.


00:27:24.980 --> 00:27:28.520
So two things, leave, if you do do it,


00:27:28.520 --> 00:27:29.680
leave lots of breadcrumbs.


00:27:29.680 --> 00:27:31.360
Like maybe put a comment, like,


00:27:31.360 --> 00:27:33.440
here I want to create a flask app.


00:27:33.440 --> 00:27:37.440
Here I wanna make a view that responds to this URL.


00:27:37.440 --> 00:27:39.920
And like, it might be hard to remember, do all the steps.


00:27:39.920 --> 00:27:42.040
But if you see, make the flask app,


00:27:42.040 --> 00:27:44.240
you're like, "Oh, I remember how to do that."


00:27:44.240 --> 00:27:46.880
Create a view that call it response to this URL


00:27:46.880 --> 00:27:49.560
with like the actual variable passing thing.


00:27:49.560 --> 00:27:51.120
And oh, okay, well, that's easy.


00:27:51.120 --> 00:27:51.960
We'll drop that, right?


00:27:51.960 --> 00:27:54.900
Like you can make it hard on yourself or easy on yourself.


00:27:54.900 --> 00:27:58.520
And then second, have a backup.


00:27:58.520 --> 00:28:01.000
Benful says at his research lab,


00:28:01.000 --> 00:28:03.000
they were actually saying keep a spare laptop.


00:28:03.000 --> 00:28:04.340
I didn't know necessarily about that,


00:28:04.340 --> 00:28:07.160
but I would at least have a finished version


00:28:07.160 --> 00:28:08.480
and then you're like, oh my gosh, well,


00:28:08.480 --> 00:28:09.600
let me pull this up and show you,


00:28:09.600 --> 00:28:11.980
then we'll talk, like some kind of fallback, right?


00:28:11.980 --> 00:28:14.920
There's like levels of live demo.


00:28:14.920 --> 00:28:17.860
Do I say file new project and we write a thousand lines,


00:28:17.860 --> 00:28:20.720
or do I strategically highlight the important bits


00:28:20.720 --> 00:28:23.680
and not distract people with like boilerplate,


00:28:23.680 --> 00:28:24.960
and get potentially lost, right?


00:28:24.960 --> 00:28:26.480
I don't know, so I think that's kind of


00:28:26.480 --> 00:28:27.480
what I was traveling on this stuff.


00:28:27.480 --> 00:28:30.520
- One of the halfway betweens is to script your demo,


00:28:30.520 --> 00:28:34.600
and there's a tool that Sebastian links to


00:28:34.600 --> 00:28:40.760
called Demo Magic and what you do with this is basically you have these commands of PEI


00:28:40.760 --> 00:28:45.800
or PE and other things and wait for prompts and whatever.


00:28:45.800 --> 00:28:49.720
What happens is it looks like you're demoing,


00:28:49.720 --> 00:28:53.640
but all you're doing is hitting "Enter" to go to the next thing.


00:28:53.640 --> 00:28:57.640
Then people can see in real-time what it looks like,


00:28:57.640 --> 00:28:59.400
but they don't have to wait for you to type.


00:28:59.400 --> 00:29:00.560
It just looks like it's typing.


00:29:00.560 --> 00:29:02.760
>> Yeah. It types it out as if it's doing.


00:29:02.760 --> 00:29:05.120
- Yeah, absolutely. - Yeah, so this is kinda nice.


00:29:05.120 --> 00:29:09.200
I also, one of the things, of all conference advice,


00:29:09.200 --> 00:29:11.700
Sebastian does talk about this, but keep it in mind,


00:29:11.700 --> 00:29:13.260
this is what works for him.


00:29:13.260 --> 00:29:14.740
I disagree with some of it,


00:29:14.740 --> 00:29:16.660
and you disagree with some of it,


00:29:16.660 --> 00:29:18.980
and it's okay if you disagree with it,


00:29:18.980 --> 00:29:21.380
'cause it works different for everybody.


00:29:21.380 --> 00:29:25.900
Like one of his pieces of advice also is to


00:29:25.900 --> 00:29:28.900
write out your talk before you write your slides.


00:29:28.900 --> 00:29:31.780
I never do that, because I'm writing my slides


00:29:31.780 --> 00:29:37.700
markdown, I'm thinking about what I'm going to show while I'm talking and while I'm thinking


00:29:37.700 --> 00:29:39.000
about the topic.


00:29:39.000 --> 00:29:46.300
So my slides really are kind of outliny to begin with, and then I can put junk in there


00:29:46.300 --> 00:29:48.400
and cut it out, whatever.


00:29:48.400 --> 00:29:53.300
Also a code I don't know how to do, and it says you should be able to do your talk without


00:29:53.300 --> 00:29:54.300
slides.


00:29:54.300 --> 00:29:57.140
I just don't think that's true.


00:29:57.140 --> 00:30:01.380
For the kind of demo or the kind of stuff I'm doing, there's a lot of code I'm showing.


00:30:01.380 --> 00:30:04.720
I'm not gonna describe that code if the slides don't work.


00:30:04.720 --> 00:30:06.820
I don't know what I would do if my slides didn't work.


00:30:06.820 --> 00:30:08.020
But anyway.


00:30:08.020 --> 00:30:12.500
- Yeah, one other piece of advice that I wanna emphasize


00:30:12.500 --> 00:30:13.620
is Sean out there says,


00:30:13.620 --> 00:30:16.240
"I always take three slow breaths before I start talking.


00:30:16.240 --> 00:30:18.660
"Try to talk slow and smooth for the first minute."


00:30:18.660 --> 00:30:19.780
That's really good advice.


00:30:19.780 --> 00:30:24.640
And you know, your body reacts to stressful situations


00:30:24.640 --> 00:30:26.020
like this in weird ways, right?


00:30:26.020 --> 00:30:27.780
Like you think, your body's like,


00:30:27.780 --> 00:30:30.220
you're gonna be eaten by a bear if you say something wrong.


00:30:30.220 --> 00:30:31.740
Like, no, you won't be eaten by a bear.


00:30:31.740 --> 00:30:34.660
But, you know, your heart does race.


00:30:34.660 --> 00:30:36.460
And a lot of times, especially when you're new,


00:30:36.460 --> 00:30:37.780
it's easy to perceive that as like,


00:30:37.780 --> 00:30:40.140
oh my gosh, I'm so nervous, I hope I don't screw up.


00:30:40.140 --> 00:30:44.420
But an equal interpretation, viable interpretation


00:30:44.420 --> 00:30:46.220
of that would be, I'm really excited.


00:30:46.220 --> 00:30:48.660
Like, my body's going, like really,


00:30:48.660 --> 00:30:50.320
those butterflies in my stomach are like,


00:30:50.320 --> 00:30:52.020
I am psyched to do this.


00:30:52.020 --> 00:30:54.580
And so I just convinced myself, rightly or wrongly,


00:30:54.580 --> 00:30:56.820
kind of lied to myself, like, well, if you feel nervous,


00:30:56.820 --> 00:30:58.700
that's because you're getting excited


00:30:58.700 --> 00:31:00.340
and you're just about to do something awesome,


00:31:00.340 --> 00:31:01.920
so get ready for it, right?


00:31:01.920 --> 00:31:03.540
Rather than, oh my gosh, I'm nervous,


00:31:03.540 --> 00:31:04.460
I'm gonna make a mistake.


00:31:04.460 --> 00:31:07.860
So I think it's okay to lie to yourself in that regard.


00:31:07.860 --> 00:31:12.260
- I also, I've been, like, I don't wanna go over.


00:31:12.260 --> 00:31:14.620
I don't think anybody's gonna be mad if you go under.


00:31:14.620 --> 00:31:18.260
So I personally, if it's a 25 minute talk,


00:31:18.260 --> 00:31:20.100
I practice it in 20 minutes.


00:31:20.100 --> 00:31:20.980
- Absolutely.


00:31:20.980 --> 00:31:23.980
It's easy to expand, it's hard to shrink in real time.


00:31:23.980 --> 00:31:25.880
- And also, if you're done early,


00:31:25.880 --> 00:31:28.060
nobody's gonna complain about that.


00:31:28.060 --> 00:31:30.960
But also, if something goes wrong at the beginning


00:31:30.960 --> 00:31:34.120
and you have trouble with the video setup,


00:31:34.120 --> 00:31:36.380
you still have enough time to finish it.


00:31:36.380 --> 00:31:38.260
So I think that's cool.


00:31:38.260 --> 00:31:42.100
The other thing is pauses within.


00:31:42.100 --> 00:31:46.360
I just talk constantly and I have to remind myself


00:31:46.360 --> 00:31:49.400
if I'm showing something that I think is gonna be shocking,


00:31:49.400 --> 00:31:51.640
let people take a second to be shocked by it.


00:31:51.640 --> 00:31:57.080
And if people laugh, take a moment and let 'em laugh


00:31:57.080 --> 00:31:59.160
before you move on to the next thing.


00:31:59.160 --> 00:32:00.600
- Yeah, I embrace it.


00:32:00.600 --> 00:32:01.640
Absolutely, very good.


00:32:01.640 --> 00:32:02.480
- Cool.


00:32:02.480 --> 00:32:03.300
- And good article, Sebastian.


00:32:03.300 --> 00:32:04.140
Okay, well.


00:32:04.140 --> 00:32:05.680
- Those are our topics.


00:32:05.680 --> 00:32:07.300
Do you have anything extra for us?


00:32:07.300 --> 00:32:08.440
- I sure do.


00:32:08.440 --> 00:32:09.800
I got a few things.


00:32:09.800 --> 00:32:12.960
I finally got that CDN Python web apps


00:32:12.960 --> 00:32:16.120
that fly with CDNs course published and online.


00:32:16.120 --> 00:32:19.040
Like I said that I would, but now I officially have it up


00:32:19.040 --> 00:32:20.320
so people can go check that out.


00:32:20.320 --> 00:32:21.240
It's super fun.


00:32:21.240 --> 00:32:25.600
Speaking of releases, Django 4.2 was released last week also


00:32:25.600 --> 00:32:27.900
one day before Python 3.11.3.


00:32:27.900 --> 00:32:32.100
Major highlights include Psycho PG,


00:32:32.100 --> 00:32:35.120
version three support, comments on columns and tables,


00:32:35.120 --> 00:32:37.380
support for asynchronous streaming responses


00:32:37.380 --> 00:32:40.500
and async interfaces related to managers and models.


00:32:40.500 --> 00:32:44.420
So you can go check that out if you're doing the Django.


00:32:44.420 --> 00:32:47.660
- Also, it's a LTS release, so.


00:32:47.660 --> 00:32:49.380
- Oh yeah, that's important.


00:32:49.380 --> 00:32:52.740
It has been designated a long-term support LTS release,


00:32:52.740 --> 00:32:54.560
which means it will be around for three years.


00:32:54.560 --> 00:32:56.240
All right, that's it for my extras.


00:32:56.240 --> 00:32:57.080
You?


00:32:57.080 --> 00:32:58.400
- No, no extras this time.


00:32:58.400 --> 00:33:01.160
Oh, I forgot, I realized that I forgot,


00:33:01.160 --> 00:33:03.920
there's a lamp in the background, that's new.


00:33:03.920 --> 00:33:08.920
I had a big Easter party and the lamp got moved in here


00:33:08.920 --> 00:33:11.320
to save space in the rest of the house.


00:33:11.320 --> 00:33:12.240
I forgot to move that.


00:33:12.240 --> 00:33:14.640
- 'Cause why wouldn't you cram it into your office?


00:33:14.640 --> 00:33:15.480
- Yeah, why not?


00:33:15.480 --> 00:33:18.960
- I had a lovely experience where we had to remodel


00:33:18.960 --> 00:33:20.880
the inside of our garage, basically do a bunch


00:33:20.880 --> 00:33:22.920
of drywall and stuff, so everything had to come out.


00:33:22.920 --> 00:33:25.320
So pretty much the entire garage moved up into my office


00:33:25.320 --> 00:33:26.720
into a mountain of junk behind me.


00:33:26.720 --> 00:33:28.080
It was awesome for a while.


00:33:28.080 --> 00:33:29.600
I'm very glad to have that mostly gone.


00:33:29.600 --> 00:33:30.920
Yeah.


00:33:30.920 --> 00:33:32.880
Well, how about a joke?


00:33:32.880 --> 00:33:33.720
- Yeah.


00:33:33.720 --> 00:33:34.540
- All right then.


00:33:34.540 --> 00:33:36.640
This one comes from Programming Humor.


00:33:36.640 --> 00:33:39.840
And we are in this time of a thousand flowers


00:33:39.840 --> 00:33:43.040
blooming AI revolution.


00:33:43.040 --> 00:33:44.400
See where it goes.


00:33:44.400 --> 00:33:46.520
You know, we've got ChatGPT,


00:33:46.520 --> 00:33:49.200
got mid journey, got stable diffusion.


00:33:49.200 --> 00:33:52.840
And it seems like everyone is plugging AI


00:33:52.840 --> 00:33:56.840
into their tools and email, copywriting, all those,


00:33:56.840 --> 00:33:58.960
there's a bunch of things like Notion, for example,


00:33:58.960 --> 00:34:03.520
you can get an AI plugged in to help you write your app.


00:34:03.520 --> 00:34:06.040
And so here, this is like two views,


00:34:06.040 --> 00:34:07.600
people sending email to each other,


00:34:07.600 --> 00:34:10.800
couple of coworkers on one side, a couple on the other,


00:34:10.800 --> 00:34:12.320
and they don't know about each other.


00:34:12.320 --> 00:34:15.360
The one on the first one is just one bullet point


00:34:15.360 --> 00:34:17.360
that you could see like a dot and a line.


00:34:17.360 --> 00:34:18.800
There's like one line,


00:34:18.800 --> 00:34:21.080
and this person's bragging to their coworker,


00:34:21.080 --> 00:34:24.060
AI turns a single bullet point into a long email


00:34:24.060 --> 00:34:25.380
so I can pretend I wrote it.


00:34:25.380 --> 00:34:26.660
Boom, send.


00:34:26.660 --> 00:34:29.120
The person who receives it is talking happily


00:34:29.120 --> 00:34:30.100
to their coworker, says,


00:34:30.100 --> 00:34:32.880
AI makes a single bullet point out of this long email


00:34:32.880 --> 00:34:34.280
so I can pretend I read it.


00:34:34.280 --> 00:34:36.320
(laughing)


00:34:36.320 --> 00:34:38.620
Oh, here we are.


00:34:38.620 --> 00:34:39.460
- Yeah.


00:34:39.460 --> 00:34:40.820
- When you talk about stuff getting sent over,


00:34:40.820 --> 00:34:41.660
how does that work?


00:34:41.660 --> 00:34:45.380
Well, first you connect over TCP and then there's DNS


00:34:45.380 --> 00:34:48.560
and then there's TLS and then there's the HTTP layer.


00:34:48.560 --> 00:34:51.240
And now there's like this AI translation layer


00:34:51.240 --> 00:34:54.360
that rewrites it to be sent.


00:34:54.360 --> 00:34:56.240
But it's kind of the opposite of efficiency.


00:34:56.240 --> 00:34:57.920
Instead of sending the single bullet point,


00:34:57.920 --> 00:35:01.160
it expands it to a whole paragraph,


00:35:01.160 --> 00:35:03.120
sends it, and then shrinks it back down.


00:35:03.120 --> 00:35:04.800
It's the opposite of compression.


00:35:04.800 --> 00:35:06.240
- AI's kind of freaking me out.


00:35:06.240 --> 00:35:09.640
I hope that I still have a job five years from now.


00:35:09.640 --> 00:35:11.480
But anyway.


00:35:11.480 --> 00:35:15.160
- Well, we'll ask ChatGPT about that later.


00:35:15.160 --> 00:35:17.320
- Yeah, at some point.


00:35:17.320 --> 00:35:18.720
And you know more about this than I do.


00:35:18.720 --> 00:35:21.120
So at some point you're gonna be like,


00:35:21.120 --> 00:35:26.120
like, can I get an AI Brian to host the podcast with me?


00:35:26.120 --> 00:35:29.120
- Yeah, I'm already digging my bunker


00:35:29.120 --> 00:35:31.640
for when Skynet activates as Sean says.


00:35:31.640 --> 00:35:36.280
- Yeah, anyway, start growing carrots.


00:35:36.280 --> 00:35:38.360
- Yeah, exactly, find some goats.


00:35:38.360 --> 00:35:43.000
No, actually I'm gonna go back to writing Python code.


00:35:43.000 --> 00:35:46.140
- ChatGPT, make me a goat.


00:35:46.140 --> 00:35:47.440
(laughing)


00:35:47.440 --> 00:35:50.020
How do I start a goat farm and live off grid?


00:35:50.020 --> 00:35:51.100
(laughing)


00:35:51.100 --> 00:35:53.420
Fantastic, all right, well Brian, thanks as always.


00:35:53.420 --> 00:35:55.300
- Thanks, talk to you later, bye.


00:35:55.300 --> 00:35:56.880
- Bye, and thanks to everyone out in the audience,

