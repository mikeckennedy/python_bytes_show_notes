WEBVTT

00:00:00.001 --> 00:00:04.140
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.140 --> 00:00:10.060
earbuds. This is episode 141, recorded July 24th, 2019. I'm Michael Kennedy.

00:00:10.060 --> 00:00:10.920
And I'm Brian Okken.

00:00:10.920 --> 00:00:15.320
And this episode is brought to you by Datadog. Thank you, Datadog, for supporting the show.

00:00:15.320 --> 00:00:17.780
Tell you more about them later. Brian, how you been?

00:00:17.780 --> 00:00:19.980
I'm good. Really good. Quite busy. How about you?

00:00:19.980 --> 00:00:24.900
Always busy. I feel like life always supplies a little bit more friction to me these days. You

00:00:24.900 --> 00:00:29.000
know, a little bit more email, a little bit more paperwork, but you know, that's the world I

00:00:29.000 --> 00:00:31.040
inhabit these days. So it's all right. It's all good.

00:00:31.040 --> 00:00:38.180
Last time we spoke about Flint and Flint being a library or a little utility running as your

00:00:38.180 --> 00:00:42.880
Python code and rewrite your expressions into f-strings. And f-strings are pretty awesome.

00:00:42.880 --> 00:00:47.680
Actually, that was maybe two times ago. But you know, Flint's been updated a lot. There's been

00:00:47.680 --> 00:00:51.900
like five releases since we talked about it. You're going to kick us off here with some more F

00:00:51.900 --> 00:00:53.920
string goodness, not to do with Flint, but just f-strings.

00:00:53.920 --> 00:00:58.980
You and I are both fans of f-strings. I use them all the time now. So now I consider 3.3.

00:00:58.980 --> 00:01:04.380
the bottom of the versions. One of the things that's coming in that we, I don't think we've

00:01:04.380 --> 00:01:09.180
talked about, we've talked about 3.8 stuff, but mostly there's been a lot of attention around

00:01:09.180 --> 00:01:14.080
the walrus operator, but there's some extra debugging stuff that's coming along with F

00:01:14.080 --> 00:01:19.420
strings that are pretty darn cool. The one I'll be using all the time is, man, I always like

00:01:19.420 --> 00:01:24.100
throw, it's frequent for me to throw it in a print statement for a variable just to see

00:01:24.100 --> 00:01:30.200
as it changes what the value is. And it's like, you know, it's print, the variable name equals,

00:01:30.200 --> 00:01:34.180
and then the variable name in curly brackets for the F string.

00:01:34.180 --> 00:01:34.620
The value.

00:01:34.620 --> 00:01:34.940
The value.

00:01:34.940 --> 00:01:40.940
Yeah. So there's like a little equal sign decorator, or it's a little extra thing right before the

00:01:40.940 --> 00:01:45.600
last bracket that you can do. And it'll do that automatically in Python 3.8.

00:01:45.660 --> 00:01:50.800
Yeah. So in Python 3.8, if I type, I have an F string and I type curly brace foo equals

00:01:50.800 --> 00:01:56.780
close curly brace, the output will be foo equals whatever the value of foo is.

00:01:56.780 --> 00:01:58.820
Yeah. Huge time saver. It's cool.

00:01:58.820 --> 00:02:03.160
Yeah. That's super cool. I feel like you might've been doing some like low grade debugging,

00:02:03.160 --> 00:02:05.280
given all the items you're talking about this week.

00:02:06.440 --> 00:02:12.760
I'm always doing low grade debugging, but along with that, we're linking to the, some Python docs,

00:02:12.760 --> 00:02:18.340
but there's also a couple other things associated with that. You can normally with f-strings, you,

00:02:18.340 --> 00:02:25.280
you get the, the wrapper value of an object, but you can have an S decorator on it with a bang or

00:02:25.280 --> 00:02:32.020
bang S. It'll do the string operator instead. And then for floating point numbers, you're a lot,

00:02:32.120 --> 00:02:37.400
you're going to be allowed to do modifiers. So if you just want like two or three decimal places or

00:02:37.400 --> 00:02:38.140
something, you can do that.

00:02:38.140 --> 00:02:42.340
That's really cool. So you can use this little equals thing. And then like at the end stick,

00:02:42.340 --> 00:02:47.480
like a formatting instruction, like colon dot two F or colon comma or something like that.

00:02:47.480 --> 00:02:51.200
Yeah. It's like, finally, I think, Python's getting to a point where it's

00:02:51.200 --> 00:02:58.820
the just printing, debugging with print F I'm a C guy. So debugging with print statements is usable now.

00:02:58.820 --> 00:02:59.700
So great.

00:02:59.820 --> 00:03:04.860
Yeah. That's really cool. There was some comment on the F string episode, the 139 that I talked

00:03:04.860 --> 00:03:08.620
about at the beginning here. I can't remember the guy's name, but bottom of the show page,

00:03:08.620 --> 00:03:13.820
he put a comment saying, look, I'm a old C guy. So I had said like, I love to use f-strings,

00:03:13.820 --> 00:03:17.920
but I always find myself like halfway into the string and like, Oh, the F goes at the front. I mean,

00:03:17.920 --> 00:03:21.720
this one, I actually need to do some sort of format. So I'd have to go back and do it. And

00:03:21.720 --> 00:03:25.480
it's a hassle. He says, well, because I'm a C guy and you just mentioned as well,

00:03:25.480 --> 00:03:30.520
like, I think print F parenthesis. So I just move the parenthesis up a little bit.

00:03:30.520 --> 00:03:32.900
That's a good mnemonic. Yeah, exactly. I like it.

00:03:32.900 --> 00:03:34.240
Split this print F. Yeah, exactly.

00:03:34.240 --> 00:03:39.620
So a lot of my team is jumping on board with the f-strings as well. So much so that often

00:03:39.620 --> 00:03:45.780
strings will be f-strings and there's nothing in it being formatted. It's just, they're just using F

00:03:45.780 --> 00:03:52.520
by default. And I don't know if it's slower or not, but the Python part of our code isn't the slow part.

00:03:52.520 --> 00:03:53.880
So that's all right.

00:03:53.880 --> 00:03:59.380
It's sort of irrelevant. Yeah. Interesting. Super cool. So I got a question for you. Do you feel like

00:03:59.380 --> 00:04:05.620
you are a real software developer? Yes. When I'm not being a manager? Yes. That's a different type of

00:04:05.620 --> 00:04:11.380
issue. Maybe like other end of the spectrum. So I guess the answer to the question for myself. Yeah,

00:04:11.380 --> 00:04:17.180
definitely. But you know, it's, it's interesting because I did kind of like a smallish minor in

00:04:17.180 --> 00:04:22.020
computer science at best. Right. So I don't have a CS degree. I was mostly self-taught. I studied math,

00:04:22.020 --> 00:04:25.100
right? What? You don't have a CS degree. What am I doing this podcast with you for?

00:04:25.100 --> 00:04:29.940
I know. Well, it's, it's a really a fake one. I meant to tell you, like, we'll talk about that

00:04:29.940 --> 00:04:34.420
later. Okay. So do I feel like a real software developer? I remember getting my first software

00:04:34.420 --> 00:04:38.780
development job thinking like, Oh, I'm not sure I can do this. Like, what do they expect from me?

00:04:38.780 --> 00:04:43.500
Like maybe the expectations will be really different from my, what I can do. And I don't feel that way

00:04:43.500 --> 00:04:47.920
anymore, obviously doing programming for 20 years, but there's an interesting article called,

00:04:47.920 --> 00:04:56.960
am I real software developer yet by Sun Lee Betye. And, he's one of those folks kind of like me

00:04:56.960 --> 00:05:03.480
that changed careers along the way. Didn't totally love what he was doing. So did something else and

00:05:03.480 --> 00:05:09.700
then came in through this sort of self-taught direction. And there's just all these layers of

00:05:09.700 --> 00:05:15.440
like, Hey, do I belong? Like, can I call myself a software engineer or things like that? Right. So

00:05:15.440 --> 00:05:20.660
it's a really interesting article, kind of a journaling and charting his path through there.

00:05:20.660 --> 00:05:24.740
So it's pretty interesting. It says, look, there's a lot of folks who don't have these CS

00:05:24.740 --> 00:05:30.700
degrees who feel like it's not quite appropriate to call themselves software developers or software

00:05:30.700 --> 00:05:36.660
engineers. It's the term he uses a lot in the article. And sometimes this comes up as imposter

00:05:36.660 --> 00:05:41.260
syndrome. And sometimes just people just think they're not a software developer. So it's pretty

00:05:41.260 --> 00:05:46.560
interesting. He talks to how he went through like, really started working on HTML and CSS and

00:05:46.560 --> 00:05:51.420
JavaScript. And it wasn't really sure how to get, you know, had done some stuff, but wasn't really sure

00:05:51.420 --> 00:05:56.760
how to basically have anything to show for it. Right. Like it's one thing to study CSS, but like

00:05:56.760 --> 00:06:01.400
to be a developer, you really got to create things and have stuff to show off. Right. One of the things I

00:06:01.400 --> 00:06:05.620
thought that was cool from this article is he talks about how he built a portfolio site for his wife,

00:06:05.620 --> 00:06:09.100
who's a product designer. Oh yeah. Cause I don't, do people often ask you like, Hey,

00:06:09.100 --> 00:06:13.280
how do I get better at programming? Like I get this question all the time, but often enough,

00:06:13.280 --> 00:06:18.780
I don't get it enough. Yeah. Yeah. I mean, people are like, Hey, I want to become a developer. Like

00:06:18.780 --> 00:06:23.320
I've taken this course, I've read that book, but what I really need to do, I think one of the key

00:06:23.320 --> 00:06:28.360
things that people can do both to have something to show in job interviews and also to just build their

00:06:28.360 --> 00:06:34.800
skills is to just create something, even if it's kind of like not really that important for the world.

00:06:34.800 --> 00:06:42.060
like there's this example I heard a long time ago, somebody who was friends with someone who built,

00:06:42.060 --> 00:06:46.120
like did these pumpkin competitions, you know, where you grow like the thousand pound pumpkins.

00:06:46.120 --> 00:06:52.700
Yeah. And apparently that, that community had no website, no online place to live. I mean,

00:06:52.700 --> 00:06:57.040
maybe today it would just be Facebook, but there wasn't like really a place for that. So they decided,

00:06:57.040 --> 00:07:01.580
Hey, I want to learn web development. So I'm building a website and a community and a portal for

00:07:01.580 --> 00:07:05.560
pumpkin competitions. They didn't even care about pumpkins, but they did it so they could have a

00:07:05.560 --> 00:07:11.080
project. Right. And it turned out to be really good. So suddenly he talks about basically like

00:07:11.080 --> 00:07:16.720
immersing himself in podcasts and YouTube videos and all that stuff. And so, okay, after that release,

00:07:16.720 --> 00:07:20.680
can I call myself a software engineer? And then the, he found out on the web that people on like

00:07:20.680 --> 00:07:24.320
Reddit and stuff said, well, web development isn't real programming. It's just JavaScript, CSS,

00:07:24.320 --> 00:07:31.600
HTML. So then he spent 18 months studying software development full time and went so far as to quit

00:07:31.600 --> 00:07:37.220
his job and move in with his in-laws, which is pretty brave. Wow. And then, then after a while I said,

00:07:37.220 --> 00:07:42.520
okay, after I'm now a software engineer, after, you know, I've got a job and I've been working for a

00:07:42.520 --> 00:07:46.840
couple of years and internet says, eh, not really. You can't really be an engineer after like a year or

00:07:46.840 --> 00:07:52.400
two. So, yeah, there's a bunch of mean people. he's just, he's hanging out in the wrong places.

00:07:52.400 --> 00:07:56.500
Yeah. I think it's Reddit. So basically he said, look, I went and I talked to a bunch of coworkers

00:07:56.500 --> 00:07:59.580
and stuff and just finally said, look, I'm really insecure about this stuff. Like, how do you guys

00:07:59.580 --> 00:08:03.640
feel? How do you feel this way? How do you deal with it? And found out that it's, you know, not that

00:08:03.640 --> 00:08:07.840
rare. I think, you know, anyone who's kind of in this stage, like asking themselves the question,

00:08:07.840 --> 00:08:12.900
am I a real software developer yet? They should check this out. I think it's pretty, it would

00:08:12.900 --> 00:08:16.880
probably help a lot. Yeah. And brave of him to put it all together. So congrats. It's cool. I got to

00:08:16.880 --> 00:08:22.020
check this out. I guess at the conclusion, he says, well, am I a real software engineer yet? And said,

00:08:22.020 --> 00:08:27.420
I don't know. I think so. Some people might say no, they can call me whatever you want. I don't

00:08:27.420 --> 00:08:32.600
care. I write code today. I solve awesome problems with it and I'm really good at it. So I'm having

00:08:32.600 --> 00:08:37.040
fun and that's that, right? Like call me what you want. Oh, and by the way, he also is a software

00:08:37.040 --> 00:08:40.960
developer at DigitalOcean. So that's pretty cool. If you get paid for it, man, you're a software

00:08:40.960 --> 00:08:46.660
engineer. So the engineer part is I'd ever got the software part cause I was, you know, I had a

00:08:46.660 --> 00:08:53.680
master's in CS, but my first job, it was, it was doing software, but it was, I was surrounded

00:08:53.680 --> 00:08:59.560
by electrical engineers and mechanical engineers and people that engineer was part of their degree

00:08:59.560 --> 00:09:06.360
title. And I didn't have any engineer quote engineer in my, in my education. It was science,

00:09:06.360 --> 00:09:10.720
computer science. And there wasn't much science in that either. Right. Exactly. So it's the engineer

00:09:10.720 --> 00:09:16.500
part that I felt like an imposter for a long time. And until, I, it was a couple of years in,

00:09:16.500 --> 00:09:23.080
I was sitting down with a mechanical engineer and told him about my, like, you know, this, I don't,

00:09:23.080 --> 00:09:28.120
I don't know if I'm comfortable with this engineer title. And he said, well, I'm a mechanical engineer.

00:09:28.120 --> 00:09:35.180
So I'm, I solve mechanical problems using the tool set that I learned. What do you do? You solve

00:09:35.180 --> 00:09:42.020
problems using software. You're an engineer. Get over it. So that's pretty interesting. Yeah. Yeah.

00:09:42.020 --> 00:09:46.900
I, you know, I also, the engineering term is cool. Like software engineer is definitely a pretty cool

00:09:46.900 --> 00:09:53.480
title, but I think, I don't know if someone asked me to give myself a title at that point in my career,

00:09:53.480 --> 00:09:59.420
I wouldn't necessarily choose engineer. I don't think to me, like engineering is applying like these

00:09:59.420 --> 00:10:05.040
practices and techniques for building stuff. That's like really well tested most of the time.

00:10:05.080 --> 00:10:11.160
Right. Like if I'm going to build like a, a power factory, like there's a bunch of like well-known

00:10:11.160 --> 00:10:15.280
examples of building factories and I could do that. Or if I'm going to build a bridge,

00:10:15.280 --> 00:10:19.720
the reason I build the bridge is because like the other bridges that were built are on that river.

00:10:19.720 --> 00:10:24.480
And I need to put one on this river, but for software, like that's not very often done.

00:10:24.480 --> 00:10:29.180
If there's already thing that exactly solves that problem, you just make a copy of it and solve it

00:10:29.180 --> 00:10:34.700
with that. You know what I mean? Like you just, because software is replicable, we don't recreate

00:10:34.980 --> 00:10:42.500
the same thing as often. So it's more of a creation process than it is applying the same steps to me.

00:10:42.500 --> 00:10:46.020
That's like, that's kind of a distinction that, that I find in there, but that's also a bit of a

00:10:46.020 --> 00:10:46.620
diversion.

00:10:46.620 --> 00:10:51.440
With building, what you described was a contractor, not an engineer.

00:10:51.440 --> 00:10:52.460
Yeah. Okay. Fair enough.

00:10:52.460 --> 00:10:56.580
Engineering in lots of different fields means lots of different things like civil engineering and,

00:10:56.580 --> 00:11:02.280
and all sorts of other kinds of engineering is, it isn't taking one thing and making seven of them.

00:11:02.500 --> 00:11:07.080
And even with bridges for that matter, you don't build the same bridge in the same place.

00:11:07.080 --> 00:11:12.320
You build a similar bridge in a different place with different wind characteristics and all that.

00:11:12.320 --> 00:11:13.180
Yeah. All right. Fair point.

00:11:13.180 --> 00:11:13.400
Okay.

00:11:13.400 --> 00:11:14.440
All right. Let's go back to debugging.

00:11:14.440 --> 00:11:22.040
Yeah. I guess in a debugging kick. So, ran across this, a little package called Snoop and plus

00:11:22.040 --> 00:11:27.700
it's just got a fun name, but it's a set of debugging tools, but it's like the print def debugging sort of stuff.

00:11:27.700 --> 00:11:35.500
It does a lot of stuff actually to help with the debugging, but it's kind of like, if you want to be the debugging without opening the debugger.

00:11:35.860 --> 00:11:42.020
And one of the things that does really well is just, you slap a decorator called Snoop on a function.

00:11:42.020 --> 00:11:53.020
And now when you run that function, run your code, whenever that function runs, the lines that get run and the local variable values get printed to standard air.

00:11:53.440 --> 00:12:01.440
So you can just sort of, run and if you've got standard air pipe somewhere where you can see, you can just kind of watch your code run with this.

00:12:01.440 --> 00:12:05.180
And then there's a bunch of, little extra things you can do.

00:12:05.180 --> 00:12:14.100
Like you can, if you don't want to see the whole function, you can, focus in on just some values or a block of it with a, with a width decorator.

00:12:14.100 --> 00:12:16.460
It is modifying your code to do that.

00:12:16.460 --> 00:12:22.180
But sometimes if the alternative was you're going to throw a bunch of print statements in, this might save you some time.

00:12:22.180 --> 00:12:23.560
And it's kind of a neat tool.

00:12:23.560 --> 00:12:24.860
Yeah, this is super cool.

00:12:24.860 --> 00:12:29.520
I hadn't heard of this before and I started looking through it and yeah, it's really nice.

00:12:29.520 --> 00:12:31.880
It's, it's a little bit funky.

00:12:31.880 --> 00:12:36.580
And I think for people to get a good sense of it, they should just jump over to the GitHub repo, which we're linking to obviously.

00:12:36.580 --> 00:12:38.840
And just look at some of the pictures, right?

00:12:38.840 --> 00:12:42.760
Like you have nice color coded bits of your, your code.

00:12:42.760 --> 00:12:49.600
And then like, as it runs, the values are like, kind of like grade into where your code is.

00:12:49.640 --> 00:12:53.680
So it's like, you're looking at your code, but then actually the values of that execution are in there.

00:12:53.680 --> 00:12:56.400
And like, there's an example where it loops over something a couple of times.

00:12:56.400 --> 00:13:01.800
And then like that loop is just replicated as if you wrote it a bunch of times, but, different values.

00:13:01.800 --> 00:13:02.300
It's pretty cool.

00:13:02.300 --> 00:13:02.620
Yeah.

00:13:02.620 --> 00:13:15.080
And for instance, I think a cool thing would be if you've had, especially for, for situations where you actually have tried to debug it with a debugger and, and you're running with a multi-threaded system or something.

00:13:15.080 --> 00:13:18.420
And it's, you just can't capture the time where you're seeing the error.

00:13:18.500 --> 00:13:26.060
So you can possibly turn this on and, and throw it into your, continuous integration and pipe the output somewhere and be able to capture it.

00:13:26.060 --> 00:13:26.560
Yeah, exactly.

00:13:26.560 --> 00:13:30.600
And there's just times where attaching a debugger doesn't make a ton of sense, right?

00:13:30.600 --> 00:13:34.200
Maybe it's embedded Python, like a circuit Python or something.

00:13:34.200 --> 00:13:40.600
And that doesn't, you know, you can't reasonably attach a debugger there because it's running on some device.

00:13:40.600 --> 00:13:49.660
The best you get is like serial output or it's some kind of Docker thing where it's a little bit hard to set up or maybe it's even some kind of production thing.

00:13:49.660 --> 00:13:52.680
Although I wouldn't put this in production actually, but yeah.

00:13:52.680 --> 00:13:54.780
But you could throw it in a staging environment though.

00:13:54.780 --> 00:13:56.100
So yeah, yeah, yeah, exactly.

00:13:56.100 --> 00:14:04.800
Places where you don't have super easy access to setting up, you know, like you might have PyCharm installed, but it, or Visual Studio Code, but it's not super easy to like get it all put together.

00:14:04.800 --> 00:14:06.520
Just throw this on there and see what happens.

00:14:06.520 --> 00:14:07.040
It's pretty cool.

00:14:07.040 --> 00:14:08.940
Also works in like Jupyter, which is kind of nice.

00:14:08.940 --> 00:14:09.380
Oh, cool.

00:14:09.380 --> 00:14:09.560
Yeah.

00:14:09.560 --> 00:14:10.420
This is definitely a good one.

00:14:10.420 --> 00:14:11.760
I'm happy you covered it.

00:14:11.760 --> 00:14:14.100
I'm going to keep it in mind for the next thing I got to do.

00:14:14.100 --> 00:14:15.100
All right.

00:14:15.100 --> 00:14:20.400
So before we move on to this next one, which is very, very interesting, it's quite the controversial thing.

00:14:20.400 --> 00:14:22.660
I want to tell you all about Datadog.

00:14:22.660 --> 00:14:23.980
That's not nearly as controversial.

00:14:23.980 --> 00:14:26.940
They're supporting Python bytes and they've done so for a long time.

00:14:26.940 --> 00:14:32.060
So they're a cloud scale monitoring platform built by engineers for engineers, Brian.

00:14:32.060 --> 00:14:40.240
They're tracing stuff automatically instruments like Django, Flask, Postgres, AsyncIO, and lets you visualize your application.

00:14:40.240 --> 00:14:54.000
And a whole bunch of other things like Hadoop and Redis to allow you to watch traces across your servers to kind of put it all together into like one view, not just what your web app is doing or what this background service is doing.

00:14:54.000 --> 00:14:54.640
Things like that.

00:14:54.640 --> 00:15:00.020
Check them out at pythonbytes.fm/Datadog and you'll get a cool t-shirt.

00:15:00.020 --> 00:15:00.440
Nice.

00:15:00.600 --> 00:15:00.720
Yeah.

00:15:00.720 --> 00:15:04.460
So have you heard of this guy named Kenneth Wright?

00:15:04.460 --> 00:15:06.740
Yeah, we've covered it a few times, him a few times.

00:15:06.740 --> 00:15:09.540
He's created a couple of libraries that are, some people use them.

00:15:09.540 --> 00:15:10.840
I heard they're, I heard they're interesting.

00:15:10.840 --> 00:15:16.900
Now actually, you know, Kenneth's been on the show and he's done a ton of cool work, right?

00:15:17.040 --> 00:15:19.000
Like, requests is amazing.

00:15:19.000 --> 00:15:22.520
He's got a bunch of other things going on as well.

00:15:22.520 --> 00:15:24.440
You know, records, responder, and so on.

00:15:24.440 --> 00:15:26.760
So definitely, definitely cool.

00:15:27.420 --> 00:15:32.460
However, he recently posted this comment about a week ago.

00:15:32.460 --> 00:15:37.920
In the spirit of transparency, I'd like to publicly find a new home for all of my repositories.

00:15:37.920 --> 00:15:43.420
I wouldn't be able to make some contribution to them, but I'm kind of done with being the owner and being a fellow of these things.

00:15:43.420 --> 00:15:46.940
So that's kind of a pretty big statement.

00:15:46.940 --> 00:15:54.120
Like, hey, Kenneth, who's in charge of all these things, kind of just said I'm done with them, which is, you know, not the end of them, obviously.

00:15:54.120 --> 00:15:57.980
But that's a pretty big deal that somebody should probably address, right?

00:15:57.980 --> 00:15:58.780
Yeah, definitely.

00:15:58.780 --> 00:16:01.340
Actually, a lot of these projects, it's interesting.

00:16:01.340 --> 00:16:09.240
If there were any, the communities around them, because they're not just one person, the communities around them have built up, especially with things like requests.

00:16:09.240 --> 00:16:11.800
There's a lot of people working with it and working on it.

00:16:11.800 --> 00:16:23.280
Some of these are projects that have reached a size that most projects have already moved off of, moved into a group repo setting instead of staying with one owner setting.

00:16:23.280 --> 00:16:24.980
Like pallets and flask, for example.

00:16:24.980 --> 00:16:26.020
Yeah, exactly.

00:16:26.020 --> 00:16:28.220
I think it's a good thing.

00:16:28.220 --> 00:16:30.640
I don't see the controversy.

00:16:30.640 --> 00:16:40.760
Well, there was like some of the controversy a little bit was if you go and look at that, you'll see like a bunch of people who may be super involved in Python.

00:16:40.760 --> 00:16:45.660
Some people who are not very involved in Python at all are like, hey, I'll take over this or I'll take requests.

00:16:45.660 --> 00:16:46.120
Oh, yeah.

00:16:46.120 --> 00:16:46.620
Give that to me.

00:16:46.980 --> 00:16:48.300
It's like, wait, wait, wait a minute.

00:16:49.340 --> 00:16:55.860
Shouldn't like some of these really important pieces go like to like have some careful thought about where they go?

00:16:55.860 --> 00:16:57.740
So there was a lot of back and forth.

00:16:57.740 --> 00:17:01.540
And some of these smaller ones people picked up and they're taking over and so on.

00:17:01.900 --> 00:17:12.680
But Ernest Durbin jumped in and said, hey, you know, the Python Software Foundation would like to accept transfer of these repositories into the PSF GitHub organization.

00:17:12.680 --> 00:17:14.320
Apparently, this is a new thing.

00:17:14.320 --> 00:17:17.200
The organization recently acquired the Python Software Foundation.

00:17:18.200 --> 00:17:25.480
The GitHub organization was acquired by the PSF so they can control it rather than just some other random thing.

00:17:25.480 --> 00:17:26.160
Oh, yeah.

00:17:26.160 --> 00:17:31.160
And the idea is that this is to provide an administrative backstop for projects in the ecosystem.

00:17:31.160 --> 00:17:37.040
Existing maintainers will still remain and the PSF staff will be able to help take care of things.

00:17:37.040 --> 00:17:37.940
Okay, nice.

00:17:37.940 --> 00:17:39.040
That's a pretty good outcome, right?

00:17:39.040 --> 00:17:40.260
And I think that's a good thing.

00:17:40.260 --> 00:17:45.480
I was just saying, like, I wouldn't want these projects to go into just somebody else's name.

00:17:45.480 --> 00:17:46.120
Yes, exactly.

00:17:46.340 --> 00:17:48.760
They should go into some group or something.

00:17:48.760 --> 00:17:49.660
So, yeah.

00:17:49.660 --> 00:17:49.860
Yeah.

00:17:49.860 --> 00:17:56.880
And, you know, I think the biggest news here is not that the request is moving somewhere, but that, hey, the PSF has a GitHub organization.

00:17:56.880 --> 00:17:59.080
Whose job it is to take over projects like this?

00:17:59.080 --> 00:17:59.900
That's pretty cool.

00:17:59.900 --> 00:18:00.200
Yeah.

00:18:00.200 --> 00:18:02.640
I think more stuff should go in there then.

00:18:02.640 --> 00:18:03.180
Yeah, exactly.

00:18:03.180 --> 00:18:03.600
Yeah.

00:18:03.600 --> 00:18:04.560
We should let people know about it.

00:18:04.560 --> 00:18:10.560
So I get the question also every now and then, like, I have this project.

00:18:10.560 --> 00:18:14.440
It's open source, but I'd kind of like to make it more of my job.

00:18:14.540 --> 00:18:23.000
How can I somehow keep with the spirit of open source and yet somehow have a commercial license or commercial something for my project?

00:18:23.000 --> 00:18:26.540
And this one that you pulled up here, this is pretty darn interesting.

00:18:26.540 --> 00:18:27.760
I think it's interesting.

00:18:27.760 --> 00:18:30.320
My first, I didn't know what to make of it at first.

00:18:30.320 --> 00:18:31.260
That's how I felt as well.

00:18:31.260 --> 00:18:33.580
I was like, what is, like, is this even real?

00:18:33.580 --> 00:18:34.060
Is this a joke?

00:18:34.060 --> 00:18:34.600
What is this?

00:18:35.280 --> 00:18:41.520
So the idea, this is from Aaron Hammer, and he's an open source developer and has created lots of things.

00:18:41.520 --> 00:18:43.140
I didn't know about him before this article.

00:18:43.140 --> 00:18:46.460
But the article is called The Backwards Commercial License.

00:18:47.120 --> 00:18:54.580
And he's saying that there's a lot of, well, some widely used projects will go kind of through three phases.

00:18:54.580 --> 00:19:01.100
First phase being it's just, it's got one project or one company using it.

00:19:01.100 --> 00:19:04.360
So that company or the individual person is using the use case.

00:19:04.360 --> 00:19:06.260
They're the one developing it, of course.

00:19:06.460 --> 00:19:14.880
But as things grow, if it becomes popular, it'll go through a stage where you have active community members contributing features.

00:19:14.880 --> 00:19:17.720
There's a growing audience, and a lot of people are using it.

00:19:17.720 --> 00:19:22.440
And then later, a lot of the people, the third stage is a lot of people kind of think it's done.

00:19:22.440 --> 00:19:28.080
And there's, you know, a few security fixes or bug fixes or minor features added.

00:19:28.080 --> 00:19:31.380
But for the most part, what's working is working.

00:19:31.380 --> 00:19:35.660
You know, like, you can use a nine-year-old version of KShell, and it works just fine.

00:19:36.120 --> 00:19:37.180
That sort of thing.

00:19:37.180 --> 00:19:44.240
At that point, that's when it's not really that exciting to work on it, but a lot of people depend on it.

00:19:44.240 --> 00:19:45.880
So how do you pay for that maintenance?

00:19:45.880 --> 00:19:53.300
And Aaron's thought is, at that done phase, basically don't support old versions.

00:19:53.300 --> 00:20:02.640
Only support the latest and greatest, but have another name for something that's identical under a commercial license for maintain older versions.

00:20:02.640 --> 00:20:04.140
I think I kind of got that right.

00:20:04.140 --> 00:20:05.080
It sounds about right, yeah.

00:20:05.260 --> 00:20:06.220
I understood it the same way.

00:20:06.220 --> 00:20:07.680
I think it's an interesting idea.

00:20:07.680 --> 00:20:16.100
And I'm not sure how the licensing would work, because you essentially have code developed by lots of people under an open source model.

00:20:16.100 --> 00:20:26.500
You'd have to have a different open source license to allow this, because all of the code would then be transferred into a commercial license for a maintenance phase or something.

00:20:26.600 --> 00:20:28.960
Yeah, I mean, the logistics would be a little bit tricky, right?

00:20:28.960 --> 00:20:30.660
Like, let's just say Django, right?

00:20:30.660 --> 00:20:35.200
Like, somebody has Django 0.5, and it's on 2 now.

00:20:35.200 --> 00:20:42.220
And they don't want to upgrade their code, but they want some change done to it, or there's a security fix or something.

00:20:42.220 --> 00:20:51.820
They're like, we'd rather pay you $1,000 a year so if a security problem is found in it, it just gets fixed, rather than us having to do that migration to Django 2.

00:20:51.820 --> 00:20:52.800
Something like that, right?

00:20:52.800 --> 00:20:53.160
Yeah.

00:20:53.260 --> 00:21:00.960
You'd have to, like, somehow fork that into a private repo and then have some other channel for releasing that, right?

00:21:00.960 --> 00:21:04.920
Like, some private authenticated thing that people can log into.

00:21:04.920 --> 00:21:06.320
I don't know exactly how it would work.

00:21:06.320 --> 00:21:06.720
I don't know.

00:21:06.720 --> 00:21:07.360
How do you feel about it?

00:21:07.360 --> 00:21:14.320
I think it seems like a reasonable way, if you set up the license ahead of time, so people, for new projects, people knew about it.

00:21:14.320 --> 00:21:15.440
They know what's going to happen.

00:21:15.800 --> 00:21:24.360
And they know if you want to keep the current one and make sure that it always works with your code and keep testing it, you can do that for free.

00:21:24.360 --> 00:21:30.500
But if you want to be able to set and forget and say, no, it's doing enough for me.

00:21:30.500 --> 00:21:31.560
I'll just use it now.

00:21:31.560 --> 00:21:33.900
And I don't want to deal with new stuff.

00:21:33.900 --> 00:21:36.060
Yeah, maybe you should have to pay for that.

00:21:36.060 --> 00:21:36.660
It's pretty interesting.

00:21:36.660 --> 00:21:42.300
My first thought was it was kind of weird, but the more I think about it, I'm not really super against it.

00:21:42.300 --> 00:21:44.240
This isn't his first idea, though, also.

00:21:44.400 --> 00:21:53.620
In the article, he talks about how he used to, a lot of the projects were paid for by corporate sponsors, but it wasn't very many of them.

00:21:53.620 --> 00:21:59.380
It was a handful of companies paying for something and then hundreds of companies getting it for free.

00:21:59.380 --> 00:22:06.920
And then as more and more of those companies move into it's good enough for us now, their support drops off.

00:22:06.920 --> 00:22:16.000
Yeah, I definitely feel like companies out there just get way more benefit from these types of projects than they're willing to give back.

00:22:16.720 --> 00:22:29.320
Even if that company, say, hires and employs some core developer of a project, but they're like, let's just say a bank, and this powers their trading engine that does $100 billion of revenue.

00:22:29.320 --> 00:22:29.760
Yeah.

00:22:29.760 --> 00:22:29.980
Right?

00:22:29.980 --> 00:22:33.800
Surely more than $100,000 should go back to that project.

00:22:33.940 --> 00:22:39.680
Surely some kind of larger contribution is reasonable to keep the ecosystem going.

00:22:39.680 --> 00:22:40.220
So I don't know.

00:22:40.220 --> 00:22:47.120
I feel like stuff that sets up a framework for companies to pay money legitimately to help keep open source going.

00:22:47.120 --> 00:22:49.560
I don't see a lot of great setups like that.

00:22:49.560 --> 00:22:51.720
So this is something down that path that's worth considering.

00:22:51.720 --> 00:22:52.660
Yeah, I think so.

00:22:52.660 --> 00:22:53.220
Interesting.

00:22:53.220 --> 00:22:53.420
Cool.

00:22:53.560 --> 00:22:59.520
Well, also interesting is this next article that comes from us from Guy B on Twitter, I think it is.

00:22:59.520 --> 00:23:04.780
And did you know that Guy Van Rossum had a Medium account, and he's blogging there now?

00:23:04.780 --> 00:23:05.840
No.

00:23:05.840 --> 00:23:07.900
Well, just with this one.

00:23:07.900 --> 00:23:08.200
Yeah.

00:23:08.200 --> 00:23:09.200
Well, now that it's here, right?

00:23:09.200 --> 00:23:10.060
So I don't know.

00:23:10.060 --> 00:23:14.420
Actually, I didn't look at his other posts to see how long he's been doing this, but this is the first I know about it.

00:23:14.420 --> 00:23:19.020
So he wrote an article called something – it's not the title I put here.

00:23:19.020 --> 00:23:22.860
It was Peg Parsers, P-E-G Parsers.

00:23:23.480 --> 00:23:36.300
And he talks about how the parser that actually parses syntax in Python and .py files, that code is some of the very first code that he wrote for Python 30 years ago.

00:23:36.300 --> 00:23:36.740
Interesting.

00:23:36.740 --> 00:23:37.320
Okay.

00:23:37.320 --> 00:23:37.680
Yeah.

00:23:37.680 --> 00:23:49.660
And it uses this LL1 parsing mechanism, which is the right thing probably for 20 years – 30 years ago, but probably not the best thing now.

00:23:49.660 --> 00:23:57.780
And so the one moniker there implies that, like, as you're going through the tokens and parsing them in the syntax, you're looking ahead only one of them at a time.

00:23:57.780 --> 00:24:05.220
And so this actually limits the grammar rules that Python is allowed to have because the parsing is actually really limited.

00:24:05.520 --> 00:24:08.240
So he didn't say this in the article, but let me give you an example.

00:24:08.240 --> 00:24:23.400
Like, in the C Sharp language, they have the exact same concept as we have with yield, but their mechanism, their syntax to say, I want to yield – something is to say yield return the value.

00:24:23.940 --> 00:24:40.140
So yield is still a valid word in C Sharp, but yield return, those two combinations as separate statements, actually mean something different because, like, it can more complicate – like, in this context, this is a keyword, but in a different context, it's not.

00:24:40.140 --> 00:24:40.760
Oh, weird.

00:24:40.860 --> 00:24:48.180
Yeah, so I think things like that are just not around in Python partly because the parsing just didn't deal with it that way.

00:24:48.180 --> 00:24:48.380
Okay.

00:24:48.380 --> 00:24:58.700
So anyway, he talks about the history of the parser and this idea of using this thing called a peg parser, which is more like a depth-first parsing thing that has an infinite look-ahead buffer.

00:24:59.100 --> 00:25:01.880
And it goes through and it, like, basically parses the entire file.

00:25:01.880 --> 00:25:07.640
Well, it reads through the entire file, understands it, and then goes and does the parsing.

00:25:07.640 --> 00:25:09.120
So you can have, like, infinite look-ahead.

00:25:09.120 --> 00:25:14.420
You can go back as far as you want and so on using something called pack-rap parsing, which is kind of interesting.

00:25:14.420 --> 00:25:22.680
So basically before, like, when memory was really cheap, like, this was really expensive, really limited, this was a problem.

00:25:22.680 --> 00:25:30.700
Like, the decimal module, like decimal.py or underscore decimal.py, whatever it's called, is, like, 220K.

00:25:30.700 --> 00:25:38.400
And actually loading that entire Python file to parse it turned out to be some kind of issue in the early days.

00:25:38.400 --> 00:25:41.280
Whereas, like, who cares about loading 200K now?

00:25:41.280 --> 00:25:41.580
Yeah.

00:25:41.580 --> 00:25:51.480
Yeah, so I'm basically saying, like, look, it might be time to replace this super old but really polished limited parser that they call pgen

00:25:51.480 --> 00:25:54.220
with something using peg and pack-rap parsing.

00:25:54.220 --> 00:26:00.080
And the way it works with the abstract syntax tree might be able to have some interesting optimizations that actually make it use less memory anyway.

00:26:00.080 --> 00:26:00.640
Oh, yeah.

00:26:00.640 --> 00:26:01.340
That'd be interesting.

00:26:01.340 --> 00:26:02.940
Yeah, so this article is kind of interesting.

00:26:02.940 --> 00:26:04.380
It's interesting in a couple ways.

00:26:04.380 --> 00:26:10.420
It's interesting just, like, hearing Gita think about, like, the history and, like, where it's come.

00:26:10.420 --> 00:26:15.480
And you get a real good look at, like, his thought process of, like, should we change the language?

00:26:15.480 --> 00:26:16.080
Should we not?

00:26:16.080 --> 00:26:17.320
Why did it come this way?

00:26:17.320 --> 00:26:18.720
How did we get to where we are?

00:26:18.720 --> 00:26:20.620
And also, it's just, it's cool that he's blogging.

00:26:20.900 --> 00:26:22.480
Yeah, definitely.

00:26:22.480 --> 00:26:25.240
One of the benefits of him not having to do everything.

00:26:25.240 --> 00:26:25.940
Yeah, exactly.

00:26:25.940 --> 00:26:26.620
For sure.

00:26:26.620 --> 00:26:27.900
All right.

00:26:27.900 --> 00:26:28.920
Well, that's it for our main items.

00:26:28.920 --> 00:26:29.500
What else we got?

00:26:29.500 --> 00:26:35.560
One of the things I wanted to bring up, sometimes we have a couple quick things that we didn't have huge topics on.

00:26:35.640 --> 00:26:38.560
But Philip Bauer works on Plone.

00:26:38.560 --> 00:26:42.000
And he contacted us and said, hey, Plone 5.2 is out.

00:26:42.000 --> 00:26:45.300
And I'm like, okay, I don't use Plone.

00:26:45.300 --> 00:26:46.600
But yeah, maybe we cover it.

00:26:46.600 --> 00:26:48.500
No, this is a big deal.

00:26:48.660 --> 00:26:51.620
So it's 5.2 is a multi-year effort.

00:26:51.620 --> 00:26:53.880
It was a really huge amount of work.

00:26:53.880 --> 00:27:01.000
And Plone is a content management system built on top of Zope, which is a web application server framework.

00:27:01.000 --> 00:27:06.420
And a lot of this was early, in the early days, targeting, like, newspapers and things like that.

00:27:06.800 --> 00:27:08.980
But there's still a lot of people using it.

00:27:08.980 --> 00:27:15.020
And 5.2 now supports all of the 3s, at least 3.6, 7, and 8, which is super cool.

00:27:15.020 --> 00:27:18.420
And Zope 4 apparently supports Python 3.

00:27:18.420 --> 00:27:20.640
And it's all up to date now.

00:27:20.640 --> 00:27:30.180
And then if you want to read all about it, we've got a link to the release note, the release announcement, and also an interview with Philip about some of the transitions.

00:27:30.180 --> 00:27:31.980
Multi-year effort.

00:27:31.980 --> 00:27:32.800
That's pretty intense.

00:27:33.360 --> 00:27:38.000
So another major project comes along and now is Python 3 only.

00:27:38.000 --> 00:27:38.460
That's awesome.

00:27:38.460 --> 00:27:38.800
Yeah.

00:27:38.800 --> 00:27:43.880
Do you think it's interesting that so many of these CMSs came from newspapers, right?

00:27:43.880 --> 00:27:49.420
Like, Django also came from, like, a newspaper in Lawrence, Kansas, which, by the way, it's where I went to college.

00:27:49.420 --> 00:27:52.960
So just, you know, who knows where I'm from.

00:27:52.960 --> 00:27:53.420
Name dropping.

00:27:53.420 --> 00:27:58.500
Well, Lawrence, Kansas is not a big place, so not a big name.

00:27:58.500 --> 00:28:01.180
But yeah, I had no idea until recently that it was from there.

00:28:01.420 --> 00:28:05.960
But yeah, it's just interesting that, like, these Python web frameworks are coming from newspapers.

00:28:05.960 --> 00:28:07.280
Yeah, it is interesting.

00:28:07.280 --> 00:28:11.720
Well, I guess it makes sense that you got a lot of people writing, adding content to stuff.

00:28:11.720 --> 00:28:16.240
So CMSs, probably all the CMSs came from, like, newspaper stuff.

00:28:16.240 --> 00:28:17.080
Yeah, that's probably true.

00:28:17.680 --> 00:28:19.160
All right, well, I have another one for you.

00:28:19.160 --> 00:28:20.560
This one is way less serious.

00:28:20.560 --> 00:28:26.400
And about a year and a half ago, this probably would have been, like, all just super cool, hip stuff.

00:28:26.400 --> 00:28:30.560
Now it's a little bit out, a little bit dated in some of the actions.

00:28:30.560 --> 00:28:35.780
But there's this project called Building Dab and T-Pose Controlled Light.

00:28:35.780 --> 00:28:37.540
And Dab is like this.

00:28:37.600 --> 00:28:38.940
This is pretty interesting, though.

00:28:38.940 --> 00:28:45.480
I mean, yeah, dab might be the, not might be the current dance move of the day.

00:28:45.480 --> 00:28:49.220
But controlling your lights with dance moves, that's pretty neat.

00:28:49.220 --> 00:28:51.960
Someone built this thing with Python.

00:28:51.960 --> 00:28:53.420
This thing called Make Art with Python.

00:28:53.420 --> 00:28:56.740
And you come in and you do a dab move, which if you don't know what it is, just click the link.

00:28:56.740 --> 00:28:57.980
It's like a little animated video.

00:28:57.980 --> 00:28:59.100
You'll totally see it right away.

00:28:59.100 --> 00:29:00.160
You do a dab.

00:29:00.240 --> 00:29:01.320
That turns off the lights.

00:29:01.320 --> 00:29:03.840
And then whenever you want to turn them on, you do, like, a T.

00:29:03.840 --> 00:29:05.740
Like, just put your arms straight out and hold still for a second.

00:29:05.740 --> 00:29:06.740
And boom, the lights are on.

00:29:06.740 --> 00:29:12.540
What I find super interesting about the article is the amount of effort that went into this.

00:29:12.540 --> 00:29:13.920
I mean, not by this person.

00:29:13.920 --> 00:29:19.680
He's utilizing a database of people movement and all that stuff.

00:29:19.680 --> 00:29:23.420
So this is like standing on the shoulders of giants to change a light bulb.

00:29:23.420 --> 00:29:24.400
Yes, exactly.

00:29:24.400 --> 00:29:29.660
How many computer vision specialists does it take to change a light bulb?

00:29:29.660 --> 00:29:30.040
I don't know.

00:29:30.040 --> 00:29:31.320
It could be a joke of some sort.

00:29:31.320 --> 00:29:32.940
But anyway, this is pretty funny.

00:29:32.940 --> 00:29:35.700
People thinking of what they can do with, like, Python and computer vision.

00:29:35.700 --> 00:29:37.300
And yeah, it's...

00:29:37.300 --> 00:29:38.040
Yeah, check it out.

00:29:38.040 --> 00:29:38.900
Yeah, cool.

00:29:38.900 --> 00:29:39.500
All right.

00:29:39.500 --> 00:29:41.200
So I got a couple of jokes for you.

00:29:41.200 --> 00:29:41.860
These are quick ones.

00:29:41.860 --> 00:29:42.700
So I put two in here.

00:29:42.700 --> 00:29:43.380
And they're related.

00:29:43.380 --> 00:29:43.880
Okay.

00:29:43.880 --> 00:29:44.220
All right.

00:29:44.220 --> 00:29:45.280
So the first one we talked...

00:29:45.280 --> 00:29:46.840
We'll talk a little bit about C and whatnot.

00:29:46.840 --> 00:29:49.400
What is a whale's favorite programming language?

00:29:49.400 --> 00:29:52.900
C, but you just gave away the answer at the beginning of the...

00:29:52.900 --> 00:29:55.340
All right.

00:29:55.340 --> 00:29:58.200
Well, then, tell me, why do pythons live on land?

00:29:58.200 --> 00:29:59.180
Why?

00:29:59.540 --> 00:30:00.600
Because it's above C level.

00:30:00.600 --> 00:30:02.440
Yeah.

00:30:02.440 --> 00:30:02.720
Okay.

00:30:02.720 --> 00:30:03.120
Yeah.

00:30:03.120 --> 00:30:04.860
Well, the first one comes to us from Eric Nelson.

00:30:04.860 --> 00:30:06.620
The second one from Jesper Sorensen.

00:30:06.620 --> 00:30:08.360
So thank you guys for sending those in.

00:30:08.360 --> 00:30:09.340
Yeah.

00:30:09.340 --> 00:30:09.820
That's where...

00:30:09.820 --> 00:30:10.060
Nice.

00:30:10.060 --> 00:30:11.400
Let's say amusing.

00:30:11.400 --> 00:30:13.660
I'm not sure I'm going to go as far as saying funny, but amusing.

00:30:13.660 --> 00:30:14.100
Yeah.

00:30:14.100 --> 00:30:15.100
Some levity.

00:30:15.100 --> 00:30:15.400
Cool.

00:30:15.400 --> 00:30:16.200
Yep.

00:30:16.260 --> 00:30:16.580
Exactly.

00:30:16.580 --> 00:30:17.040
All right.

00:30:17.040 --> 00:30:19.400
Well, good chat with you as always.

00:30:19.400 --> 00:30:19.840
Thanks.

00:30:19.840 --> 00:30:20.380
Bye.

00:30:20.380 --> 00:30:20.700
Yep.

00:30:20.700 --> 00:30:21.080
See ya.

00:30:21.580 --> 00:30:23.180
Thank you for listening to Python Bytes.

00:30:23.180 --> 00:30:25.720
Follow the show on Twitter via at Python Bytes.

00:30:25.720 --> 00:30:28.560
That's Python Bytes as in B-Y-T-E-S.

00:30:28.560 --> 00:30:31.800
And get the full show notes at pythonbytes.fm.

00:30:31.800 --> 00:30:36.020
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:30:36.020 --> 00:30:38.720
We're always on the lookout for sharing something cool.

00:30:38.720 --> 00:30:41.820
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:30:41.820 --> 00:30:45.260
Thank you for listening and sharing this podcast with your friends and colleagues.

