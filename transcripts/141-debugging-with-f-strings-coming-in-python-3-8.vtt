
00:00:00.000 --> 00:00:04.500
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your buds.


00:00:04.500 --> 00:00:09.200
This is episode 141 recorded July 24th, 2019.


00:00:09.200 --> 00:00:10.100
I'm Michael Kennedy.


00:00:10.100 --> 00:00:10.900
And I'm Brian Okken.


00:00:10.900 --> 00:00:13.500
And this episode is brought to you by Datadog.


00:00:13.500 --> 00:00:15.300
Thank you Datadog for supporting the show.


00:00:15.300 --> 00:00:16.900
Tell you more about them later.


00:00:16.900 --> 00:00:17.700
Brian, how you been?


00:00:17.700 --> 00:00:18.400
I'm good.


00:00:18.400 --> 00:00:18.900
Really good.


00:00:18.900 --> 00:00:19.500
Quite busy.


00:00:19.500 --> 00:00:20.000
How about you?


00:00:20.000 --> 00:00:20.800
Always busy.


00:00:20.800 --> 00:00:24.700
I feel like life always supplies a little bit more friction to me these days.


00:00:24.700 --> 00:00:27.300
You know, a little bit more email, a little bit more paperwork.


00:00:27.300 --> 00:00:30.300
but that's the world I inhabit these days.


00:00:30.300 --> 00:00:31.300
So it's all right, it's all good.


00:00:31.300 --> 00:00:33.300
Last time we spoke about Flint,


00:00:33.300 --> 00:00:38.300
and Flint being a library or a little utility running as your Python code


00:00:38.300 --> 00:00:41.300
and will rewrite your expressions into f-strings,


00:00:41.300 --> 00:00:43.300
and f-strings are pretty awesome.


00:00:43.300 --> 00:00:45.300
Actually, that was maybe two times ago,


00:00:45.300 --> 00:00:47.300
but Flint's been updated a lot.


00:00:47.300 --> 00:00:50.300
There's been like five releases since we talked about it.


00:00:50.300 --> 00:00:52.300
You're going to kick us off here with some more F string goodness,


00:00:52.300 --> 00:00:54.300
not to do with Flint, but just f-strings.


00:00:54.300 --> 00:01:00.060
and I are both fans of f-strings. I use them all the time now, so now I consider 3.6 the bottom of


00:01:00.060 --> 00:01:04.860
the versions. One of the things that's coming in that we, I don't think we've talked about,


00:01:04.860 --> 00:01:10.220
we've talked about 3.8 stuff, but mostly there's been a lot of attention around the walrus operator,


00:01:10.220 --> 00:01:15.260
but there's some extra debugging stuff that's coming along with f-strings that are pretty darn


00:01:15.260 --> 00:01:21.420
cool. The one I'll be using all the time is, man, I always like throw, it's frequent for me to throw


00:01:21.420 --> 00:01:24.420
in a print statement for a variable just to see


00:01:24.420 --> 00:01:26.420
as it changes what the value is.


00:01:26.420 --> 00:01:28.420
And it's like, you know, it's print,


00:01:28.420 --> 00:01:32.420
the variable name equals, and then the variable name


00:01:32.420 --> 00:01:34.420
in curly brackets for the f-string.


00:01:34.420 --> 00:01:35.420
- For the value, right. - Yeah.


00:01:35.420 --> 00:01:38.420
So there's like a little equal sign decorator


00:01:38.420 --> 00:01:41.420
or it's a little extra thing right before the last bracket


00:01:41.420 --> 00:01:44.420
that you can do, and it'll do that automatically


00:01:44.420 --> 00:01:45.420
in Python 3.8.


00:01:45.420 --> 00:01:47.420
- Yeah, so in Python 3.8, if I type,


00:01:47.420 --> 00:01:50.420
I have an f-string and I type curly brace foo equals


00:01:50.420 --> 00:01:52.940
equals closed curly brace, the output


00:01:52.940 --> 00:01:56.900
will be foo equals whatever the value of foo is.


00:01:56.900 --> 00:01:58.380
Yeah, huge time saver.


00:01:58.380 --> 00:01:58.900
It's cool.


00:01:58.900 --> 00:01:59.940
Yeah, that's super cool.


00:01:59.940 --> 00:02:03.300
I feel like you might have been doing some low-grade debugging,


00:02:03.300 --> 00:02:06.580
given all the items you're talking about this week.


00:02:06.580 --> 00:02:08.740
I'm always doing low-grade debugging.


00:02:08.740 --> 00:02:13.060
But along with that, we're linking to some Python docs.


00:02:13.060 --> 00:02:14.740
But there's also a couple of other things


00:02:14.740 --> 00:02:15.620
associated with that.


00:02:15.620 --> 00:02:18.700
You can normally, with fstrings, you


00:02:18.700 --> 00:02:22.060
get the wrapper value of an object.


00:02:22.060 --> 00:02:26.700
But you can have an s decorator on it with a bang or bang s.


00:02:26.700 --> 00:02:29.660
It'll do the string operator instead.


00:02:29.660 --> 00:02:31.660
And then for floating point numbers,


00:02:31.660 --> 00:02:34.940
you're going to be allowed to do modifiers.


00:02:34.940 --> 00:02:37.620
So if you just want two or three decimal places or something,


00:02:37.620 --> 00:02:38.180
you can do that.


00:02:38.180 --> 00:02:39.020
That's really cool.


00:02:39.020 --> 00:02:40.640
So you can use this little equals thing


00:02:40.640 --> 00:02:44.180
and then at the end stick a formatting instruction


00:02:44.180 --> 00:02:47.540
like colon dot 2f or colon comma or something like that.


00:02:47.540 --> 00:02:50.420
- Yeah, it's like finally I think Python's getting


00:02:50.420 --> 00:02:53.380
to a point where it's just printing,


00:02:53.380 --> 00:02:55.900
debugging with printf, I'm a C guy.


00:02:55.900 --> 00:02:59.780
So debugging with print statements is usable now, so great.


00:02:59.780 --> 00:03:01.060
- Yeah, that's really cool.


00:03:01.060 --> 00:03:03.540
There was some comment on the fstring episode,


00:03:03.540 --> 00:03:06.260
the 139 that I talked about at the beginning here.


00:03:06.260 --> 00:03:07.300
I can't remember the guy's name,


00:03:07.300 --> 00:03:08.660
but at the bottom of the show page,


00:03:08.660 --> 00:03:11.860
he put a comment saying, "Look, I'm a old C guy."


00:03:11.860 --> 00:03:13.900
So I had said I love to use fstrings,


00:03:13.900 --> 00:03:16.180
but I always find myself halfway into the string,


00:03:16.180 --> 00:03:18.340
and like, oh, the F goes at the front.


00:03:18.340 --> 00:03:20.180
This one I actually need to do some sort of formatting,


00:03:20.180 --> 00:03:21.580
so I have to go back and do it.


00:03:21.580 --> 00:03:22.900
And it's a hassle.


00:03:22.900 --> 00:03:25.460
He says, well, because I'm a C guy-- and you just mentioned it


00:03:25.460 --> 00:03:28.500
as well-- I think print F, parentheses.


00:03:28.500 --> 00:03:30.540
So I just move the parentheses up a little bit.


00:03:30.540 --> 00:03:31.620
That's a good mnemonic.


00:03:31.620 --> 00:03:31.980
Yeah.


00:03:31.980 --> 00:03:32.480
Exactly.


00:03:32.480 --> 00:03:32.980
I like it.


00:03:32.980 --> 00:03:34.540
Split this-- print F. Yeah, exactly.


00:03:34.540 --> 00:03:37.140
So a lot of my team is jumping on board with the f-strings


00:03:37.140 --> 00:03:41.660
as well, so much so that often strings will be f-strings,


00:03:41.660 --> 00:03:44.300
and there's nothing in it being formatted.


00:03:44.300 --> 00:03:46.820
It's just they're just using F by default.


00:03:46.820 --> 00:03:49.500
And I don't know if it's slower or not,


00:03:49.500 --> 00:03:52.580
but the Python part of our code isn't the slow part.


00:03:52.580 --> 00:03:53.900
So that's all right.


00:03:53.900 --> 00:03:54.940
- It's sort of irrelevant.


00:03:54.940 --> 00:03:56.300
Yeah, interesting.


00:03:56.300 --> 00:03:57.580
Super cool.


00:03:57.580 --> 00:03:58.780
So I got a question for you.


00:03:58.780 --> 00:04:01.220
Do you feel like you're a real software developer?


00:04:01.220 --> 00:04:02.260
(laughing)


00:04:02.260 --> 00:04:03.080
- Yes.


00:04:03.080 --> 00:04:04.580
When I'm not being a manager, yes.


00:04:04.580 --> 00:04:06.280
- That's a different type of issue.


00:04:06.280 --> 00:04:08.940
Maybe like other end of the spectrum.


00:04:08.940 --> 00:04:11.140
So I guess to answer that question for myself,


00:04:11.140 --> 00:04:11.980
yeah, definitely.


00:04:11.980 --> 00:04:16.460
But it's interesting, because I did kind of like a smallish


00:04:16.460 --> 00:04:18.860
minor in computer science at best.


00:04:18.860 --> 00:04:20.020
So I don't have a CS degree.


00:04:20.020 --> 00:04:21.140
I mostly self-taught.


00:04:21.140 --> 00:04:22.180
I studied math.


00:04:22.180 --> 00:04:22.680
What?


00:04:22.680 --> 00:04:23.620
You don't have a CS degree?


00:04:23.620 --> 00:04:25.380
What am I doing this podcast with you for?


00:04:25.380 --> 00:04:25.880
I know.


00:04:25.880 --> 00:04:27.700
Well, it's really a fake one.


00:04:27.700 --> 00:04:29.220
I meant to tell you.


00:04:29.220 --> 00:04:30.580
We'll talk about that later.


00:04:30.580 --> 00:04:33.140
So do I feel like a real software developer?


00:04:33.140 --> 00:04:35.260
I remember getting my first software development job


00:04:35.260 --> 00:04:37.620
thinking like, oh, I'm not sure I can do this.


00:04:37.620 --> 00:04:38.980
What do they expect from me?


00:04:38.980 --> 00:04:41.360
Maybe the expectations will be really different from what


00:04:41.360 --> 00:04:45.020
I can do. And I don't feel that way anymore, obviously doing programming for


00:04:45.020 --> 00:04:49.680
20 years. But there's an interesting article called, "Am I a Real Software


00:04:49.680 --> 00:04:57.140
Developer Yet?" by Sun Li Betye. And he's one of those folks kind of like me that


00:04:57.140 --> 00:05:01.680
changed careers along the way, didn't totally love what he was doing, so did


00:05:01.680 --> 00:05:06.980
something else and then came in through this sort of self-taught direction. And


00:05:06.980 --> 00:05:10.020
And there's just all these layers of like,


00:05:10.020 --> 00:05:11.100
hey, do I belong?


00:05:11.100 --> 00:05:13.620
Like, can I call myself a software engineer


00:05:13.620 --> 00:05:15.220
or things like that, right?


00:05:15.220 --> 00:05:17.260
So it's a really interesting article,


00:05:17.260 --> 00:05:21.260
kind of a journaling and charting his path through there.


00:05:21.260 --> 00:05:22.460
So it's pretty interesting.


00:05:22.460 --> 00:05:23.540
It says, look, there's a lot of folks


00:05:23.540 --> 00:05:26.200
who don't have these CS degrees


00:05:26.200 --> 00:05:28.540
who feel like it's not quite appropriate


00:05:28.540 --> 00:05:30.340
to call themselves software developers


00:05:30.340 --> 00:05:31.380
or software engineers.


00:05:31.380 --> 00:05:34.460
It's the term he uses a lot in the article.


00:05:34.460 --> 00:05:37.300
And sometimes this comes up as imposter syndrome,


00:05:37.300 --> 00:05:39.820
and sometimes people just think they're not a software


00:05:39.820 --> 00:05:40.340
developer.


00:05:40.340 --> 00:05:41.540
So it's pretty interesting.


00:05:41.540 --> 00:05:44.020
He talks about how he went through--


00:05:44.020 --> 00:05:47.940
really started working on HTML and CSS and JavaScript,


00:05:47.940 --> 00:05:49.620
and wasn't really sure how to get--


00:05:49.620 --> 00:05:51.260
had done some stuff, but wasn't really


00:05:51.260 --> 00:05:54.940
sure how to basically have anything to show for it.


00:05:54.940 --> 00:05:57.460
It's one thing to study CSS, but to be a developer,


00:05:57.460 --> 00:06:00.020
you really got to create things and have stuff to show off.


00:06:00.020 --> 00:06:02.260
One of the things I thought was cool from this article


00:06:02.260 --> 00:06:05.460
he talks about how he built a portfolio site for his wife,


00:06:05.460 --> 00:06:06.660
who's a product designer.


00:06:06.660 --> 00:06:07.500
- Oh yeah.


00:06:07.500 --> 00:06:08.620
- 'Cause I know, do people often ask you like,


00:06:08.620 --> 00:06:10.260
"Hey, how do I get better at programming?"


00:06:10.260 --> 00:06:13.100
Like I get this question all the time, but often enough.


00:06:13.100 --> 00:06:14.900
- I don't get it enough.


00:06:14.900 --> 00:06:16.020
- Yeah.


00:06:16.020 --> 00:06:16.860
Yeah, I mean, people are like,


00:06:16.860 --> 00:06:18.180
"Hey, I wanna become a developer.


00:06:18.180 --> 00:06:20.300
"Like I've taken this course, I've read that book,


00:06:20.300 --> 00:06:21.620
"but what I really need to do."


00:06:21.620 --> 00:06:25.020
I think one of the key things that people can do,


00:06:25.020 --> 00:06:27.140
both to have something to show in job interviews,


00:06:27.140 --> 00:06:28.380
and also to just build their skills,


00:06:28.380 --> 00:06:29.860
is to just create something.


00:06:29.860 --> 00:06:34.020
even if it's kind of like not really that important


00:06:34.020 --> 00:06:34.860
for the world.


00:06:34.860 --> 00:06:37.620
Like there's this example I heard a long time ago,


00:06:37.620 --> 00:06:41.140
somebody who was friends with someone


00:06:41.140 --> 00:06:43.900
who like did these pumpkin competitions,


00:06:43.900 --> 00:06:45.940
you know, where you grow like the thousand pound pumpkins.


00:06:45.940 --> 00:06:49.420
And apparently that community had no website,


00:06:49.420 --> 00:06:52.100
no online place to live.


00:06:52.100 --> 00:06:53.660
I mean, maybe today it would just be Facebook,


00:06:53.660 --> 00:06:56.100
but there wasn't like really a place for that.


00:06:56.100 --> 00:06:57.860
So they decided, hey, I wanna learn web development.


00:06:57.860 --> 00:07:00.580
development, so I'm building a website and a community


00:07:00.580 --> 00:07:03.000
and a portal for pumpkin competitions.


00:07:03.000 --> 00:07:04.540
They didn't even care about pumpkins,


00:07:04.540 --> 00:07:06.180
but they did it so they could have a project, right?


00:07:06.180 --> 00:07:07.940
And it turned out to be really good.


00:07:07.940 --> 00:07:11.100
So suddenly he talks about basically


00:07:11.100 --> 00:07:14.260
immersing himself in podcasts and YouTube videos


00:07:14.260 --> 00:07:15.100
and all that stuff.


00:07:15.100 --> 00:07:16.940
And so, OK, after that release, can I


00:07:16.940 --> 00:07:18.260
call myself a software engineer?


00:07:18.260 --> 00:07:21.180
And then he found out on the web that people on Reddit and stuff


00:07:21.180 --> 00:07:23.260
said, well, web development isn't real programming.


00:07:23.260 --> 00:07:25.940
It's just JavaScript, CSS, and HTML.


00:07:25.940 --> 00:07:28.580
So then he spent 18 months studying software development


00:07:28.580 --> 00:07:32.060
full time and went so far as to quit his job


00:07:32.060 --> 00:07:35.100
and move in with his in-laws, which is pretty brave.


00:07:35.100 --> 00:07:35.940
- Wow.


00:07:35.940 --> 00:07:37.220
- And then after a while, I said,


00:07:37.220 --> 00:07:39.860
okay, after I'm now a software engineer,


00:07:39.860 --> 00:07:43.220
after I got a job and I've been working for a couple years,


00:07:43.220 --> 00:07:44.820
internet says, "Eh, not really.


00:07:44.820 --> 00:07:47.660
"You can't really be an engineer after a year or two."


00:07:47.660 --> 00:07:48.940
So--


00:07:48.940 --> 00:07:50.700
- Yeah, there's a bunch of mean people.


00:07:50.700 --> 00:07:52.500
He's hanging out in the wrong places.


00:07:52.500 --> 00:07:53.780
- Yeah, I think it's Reddit.


00:07:53.780 --> 00:07:55.800
So basically he said, "Look, I went and I talked to


00:07:55.800 --> 00:07:57.720
bunch of coworkers and stuff, and just finally said,


00:07:57.720 --> 00:07:59.000
look, I'm really insecure about this stuff.


00:07:59.000 --> 00:08:00.000
Like, how do you guys feel?


00:08:00.000 --> 00:08:00.840
Do you feel this way?


00:08:00.840 --> 00:08:02.040
How do you deal with it?


00:08:02.040 --> 00:08:04.000
And found out that it's not that rare.


00:08:04.000 --> 00:08:06.400
I think anyone who's kind of in this stage,


00:08:06.400 --> 00:08:07.880
like asking themselves the question,


00:08:07.880 --> 00:08:09.600
am I a real software developer yet?


00:08:09.600 --> 00:08:10.800
They should check this out.


00:08:10.800 --> 00:08:12.400
I think it's pretty--


00:08:12.400 --> 00:08:13.600
it would probably help a lot.


00:08:13.600 --> 00:08:15.520
Yeah, and brave of him to put it all together.


00:08:15.520 --> 00:08:16.200
So congrats.


00:08:16.200 --> 00:08:16.560
It's cool.


00:08:16.560 --> 00:08:17.440
I got to check this out.


00:08:17.440 --> 00:08:19.160
I guess at the conclusion, he says, well,


00:08:19.160 --> 00:08:21.520
am I a real software engineer yet?


00:08:21.520 --> 00:08:24.080
And said, I don't know.


00:08:24.080 --> 00:08:24.960
I think so.


00:08:24.960 --> 00:08:27.340
Some people might say no, then comment whatever you want.


00:08:27.340 --> 00:08:28.220
I don't care.


00:08:28.220 --> 00:08:29.340
I write code today.


00:08:29.340 --> 00:08:31.880
I solve awesome problems with it, and I'm really good at it.


00:08:31.880 --> 00:08:33.960
So I'm having fun, and that's that.


00:08:33.960 --> 00:08:35.260
Call me what you want.


00:08:35.260 --> 00:08:37.420
Oh, and by the way, he also is a software developer


00:08:37.420 --> 00:08:38.180
at DigitalOcean.


00:08:38.180 --> 00:08:39.140
So that's pretty cool.


00:08:39.140 --> 00:08:41.780
If you paid for it, man, you're a software engineer.


00:08:41.780 --> 00:08:43.560
So the engineer part is--


00:08:43.560 --> 00:08:48.300
I never got the software part because I had a master's in CS.


00:08:48.300 --> 00:08:51.500
But my first job, it was doing software.


00:08:51.500 --> 00:08:55.020
But I was surrounded by electrical engineers


00:08:55.020 --> 00:08:58.100
and mechanical engineers and people that engineer


00:08:58.100 --> 00:09:00.380
was part of their degree title.


00:09:00.380 --> 00:09:05.580
And I didn't have any "engineer" in my education.


00:09:05.580 --> 00:09:07.140
It was computer science.


00:09:07.140 --> 00:09:09.020
And there wasn't much science in that either.


00:09:09.020 --> 00:09:09.640
Right, exactly.


00:09:09.640 --> 00:09:12.340
So it's the engineer part that I felt like an imposter


00:09:12.340 --> 00:09:13.700
for a long time.


00:09:13.700 --> 00:09:16.900
And until a couple of years in, I


00:09:16.900 --> 00:09:19.580
was sitting down with a mechanical engineer


00:09:19.580 --> 00:09:24.220
and told him about my, I don't know if I'm comfortable


00:09:24.220 --> 00:09:25.360
with this engineer title.


00:09:25.360 --> 00:09:28.300
And he said, well, I'm a mechanical engineer,


00:09:28.300 --> 00:09:32.020
so I solve mechanical problems using the tool set


00:09:32.020 --> 00:09:33.300
that I learned.


00:09:33.300 --> 00:09:34.260
What do you do?


00:09:34.260 --> 00:09:37.220
You solve problems using software.


00:09:37.220 --> 00:09:38.260
You're an engineer.


00:09:38.260 --> 00:09:40.140
Get over it.


00:09:40.140 --> 00:09:40.640
So--


00:09:40.640 --> 00:09:41.780
That's pretty interesting.


00:09:41.780 --> 00:09:43.660
Yeah, yeah.


00:09:43.660 --> 00:09:45.020
The engineering term is cool.


00:09:45.020 --> 00:09:47.980
Software engineer is definitely a pretty cool title.


00:09:47.980 --> 00:09:50.180
But I think-- I don't know.


00:09:50.180 --> 00:09:52.900
If someone asked me to give myself a title at that point


00:09:52.900 --> 00:09:55.620
in my career, I wouldn't necessarily choose engineer,


00:09:55.620 --> 00:09:56.860
I don't think.


00:09:56.860 --> 00:10:01.460
To me, engineering is applying these practices and techniques


00:10:01.460 --> 00:10:05.980
for building stuff that's really well tested most of the time.


00:10:05.980 --> 00:10:09.380
If I'm going to build a power factory,


00:10:09.380 --> 00:10:13.020
there's a bunch of well-known examples of building factories,


00:10:13.020 --> 00:10:14.020
and I could do that.


00:10:14.020 --> 00:10:16.020
Or if I'm going to build a bridge,


00:10:16.020 --> 00:10:19.100
The reason I build the bridge is because like the other bridges that were built


00:10:19.100 --> 00:10:22.840
are on that river and I need to put one on this river, but for software, like


00:10:22.840 --> 00:10:24.540
that's not very often done.


00:10:24.540 --> 00:10:27.920
If there's already thing that exactly solves that problem, you just make a


00:10:27.920 --> 00:10:29.540
copy of it and solve it with that.


00:10:29.540 --> 00:10:30.460
You know what I mean?


00:10:30.460 --> 00:10:35.300
Like you just, because software is replicable, we don't recreate the same


00:10:35.300 --> 00:10:36.740
thing as often.


00:10:36.740 --> 00:10:42.440
So it's more of a creation process than it is applying the same steps to me.


00:10:42.440 --> 00:10:45.240
That's like, that's kind of a distinction that, that I find in there, but that's


00:10:45.240 --> 00:10:46.920
That's also a bit of a diversion.


00:10:46.920 --> 00:10:51.720
With building, what you described was a contractor, not an engineer.


00:10:51.720 --> 00:10:52.980
Yeah, okay, fair enough.


00:10:52.980 --> 00:10:55.520
Engineering in lots of different fields means lots of different things.


00:10:55.520 --> 00:11:00.100
Like civil engineering and all sorts of other kinds of engineering, it isn't taking one


00:11:00.100 --> 00:11:03.000
thing and making seven of them.


00:11:03.000 --> 00:11:07.660
And even with bridges, for that matter, you don't build the same bridge in the same place.


00:11:07.660 --> 00:11:11.800
You build a similar bridge in a different place with different wind characteristics


00:11:11.800 --> 00:11:12.800
and all that.


00:11:12.800 --> 00:11:13.800
Yeah, all right, fair point.


00:11:13.800 --> 00:11:14.800
All right, let's go back to debugging.


00:11:14.800 --> 00:11:22.080
I guess in a debugging kick. So I ran across this a little package called Snoop. And plus,


00:11:22.080 --> 00:11:27.040
it's just got a fun name. But it's a set of debugging tools. But it's like the printf debugging


00:11:27.040 --> 00:11:32.880
sort of stuff. It does a lot of stuff actually, to help with debugging. But it's kind of like if you


00:11:32.880 --> 00:11:38.400
want to be debugging without opening the debugger. And one of the things that does really well is


00:11:38.400 --> 00:11:44.160
just you slap a decorator called Snoop on a function. And now when you run that function,


00:11:44.160 --> 00:11:47.520
run your code, whenever that function runs,


00:11:47.520 --> 00:11:51.480
the lines that get run and the local variable values


00:11:51.480 --> 00:11:53.560
get printed to standard error.


00:11:53.560 --> 00:11:56.120
So you can just sort of run, and if you've


00:11:56.120 --> 00:11:58.400
got standard error pipe somewhere where you can see,


00:11:58.400 --> 00:12:01.480
you can just kind of watch your code run with this.


00:12:01.480 --> 00:12:04.600
And then there's a bunch of little extra things


00:12:04.600 --> 00:12:05.160
you can do.


00:12:05.160 --> 00:12:07.760
Like you can, if you don't want to see the whole function,


00:12:07.760 --> 00:12:12.160
you can focus in on just some values or a block of it


00:12:12.160 --> 00:12:14.600
with a width decorator.


00:12:14.600 --> 00:12:16.480
It is modifying your code to do that,


00:12:16.480 --> 00:12:18.840
but sometimes if the alternative was


00:12:18.840 --> 00:12:20.880
you were going to throw a bunch of print statements in,


00:12:20.880 --> 00:12:22.320
this might save you some time.


00:12:22.320 --> 00:12:23.600
And it's kind of a neat tool.


00:12:23.600 --> 00:12:24.920
- Yeah, this is super cool.


00:12:24.920 --> 00:12:26.240
I hadn't heard of this before,


00:12:26.240 --> 00:12:27.500
and I started looking through it,


00:12:27.500 --> 00:12:29.560
and yeah, it's really nice.


00:12:29.560 --> 00:12:31.920
It's a little bit funky,


00:12:31.920 --> 00:12:33.600
and I think for people to get a good sense of it,


00:12:33.600 --> 00:12:35.520
they should just jump over to the GitHub repo,


00:12:35.520 --> 00:12:36.960
which we're linking to, obviously,


00:12:36.960 --> 00:12:38.880
and just look at some of the pictures, right?


00:12:38.880 --> 00:12:42.840
Like you have nice color coded bits of your code.


00:12:42.840 --> 00:12:47.680
And then as it runs, the values are kind of like grayed


00:12:47.680 --> 00:12:49.320
into where your code is.


00:12:49.320 --> 00:12:51.040
So it's like you're looking at your code,


00:12:51.040 --> 00:12:53.680
but then actually the values of that execution are in there.


00:12:53.680 --> 00:12:55.600
And there's an example where it loops over something


00:12:55.600 --> 00:12:56.480
a couple of times.


00:12:56.480 --> 00:12:58.880
And then that loop is just replicated


00:12:58.880 --> 00:13:01.720
as if you wrote it a bunch of times, but different values.


00:13:01.720 --> 00:13:02.440
It's pretty cool.


00:13:02.440 --> 00:13:02.940
Yeah.


00:13:02.940 --> 00:13:07.320
And for instance, I think a cool thing would be if you've had--


00:13:07.320 --> 00:13:10.560
especially for situations where you actually have tried


00:13:10.560 --> 00:13:13.000
to debug it with a debugger and you're


00:13:13.000 --> 00:13:15.120
running with a multi-threaded system or something,


00:13:15.120 --> 00:13:17.560
and you just can't capture the time where


00:13:17.560 --> 00:13:18.760
you're seeing the error.


00:13:18.760 --> 00:13:21.240
So you can possibly turn this on and throw it


00:13:21.240 --> 00:13:24.960
into your continuous integration and pipe the output somewhere


00:13:24.960 --> 00:13:26.040
and be able to capture it.


00:13:26.040 --> 00:13:26.640
Yeah, exactly.


00:13:26.640 --> 00:13:28.720
And there's just times where attaching a debugger


00:13:28.720 --> 00:13:30.640
doesn't make a ton of sense.


00:13:30.640 --> 00:13:34.240
Maybe it's embedded Python, like CircuitPython or something,


00:13:34.240 --> 00:13:39.160
And you can't reasonably attach a debugger there


00:13:39.160 --> 00:13:40.660
because it's running on some device.


00:13:40.660 --> 00:13:42.300
The best you get is like serial output.


00:13:42.300 --> 00:13:45.620
Or it's some kind of Docker thing


00:13:45.620 --> 00:13:47.240
where it's a little bit hard to set up.


00:13:47.240 --> 00:13:49.660
Or maybe it's even some kind of production thing.


00:13:49.660 --> 00:13:52.500
Although I wouldn't put this in production, actually.


00:13:52.500 --> 00:13:55.120
-Yeah, but you could throw it in a staging environment, though.


00:13:55.120 --> 00:13:56.200
-Yeah, yeah, yeah, exactly.


00:13:56.200 --> 00:13:59.420
Places where you don't have super easy access to setting up.


00:13:59.420 --> 00:14:01.280
Like you might have PyCharm installed,


00:14:01.280 --> 00:14:02.480
or Visual Studio Code.


00:14:02.480 --> 00:14:04.880
but it's not super easy to get it all put together.


00:14:04.880 --> 00:14:06.560
Just throw this on there and see what happens.


00:14:06.560 --> 00:14:07.060
It's pretty cool.


00:14:07.060 --> 00:14:09.040
Also works in like Jupyter, which is kind of nice.


00:14:09.040 --> 00:14:09.440
Oh, cool.


00:14:09.440 --> 00:14:10.940
Yeah, this is definitely a good one.


00:14:10.940 --> 00:14:12.400
I'm happy you covered it.


00:14:12.400 --> 00:14:14.880
Keep it in mind for the next thing I've got to do.


00:14:14.880 --> 00:14:17.880
All right, so before we move on to this next one, which


00:14:17.880 --> 00:14:19.080
is very, very interesting.


00:14:19.080 --> 00:14:21.000
It's quite the controversial thing.


00:14:21.000 --> 00:14:22.720
I want to tell you all about Datadog.


00:14:22.720 --> 00:14:24.240
That's not nearly as controversial.


00:14:24.240 --> 00:14:26.040
They're supporting Python bytes, and they've


00:14:26.040 --> 00:14:27.040
done so for a long time.


00:14:27.040 --> 00:14:29.400
So they're a cloud scale monitoring platform


00:14:29.400 --> 00:14:32.580
built by engineers for engineers, Brian.


00:14:32.580 --> 00:14:35.240
They're tracing stuff automatically,


00:14:35.240 --> 00:14:38.920
instruments like Django, Flask, Postgres, AsyncIO,


00:14:38.920 --> 00:14:41.640
lets you visualize your application architecture


00:14:41.640 --> 00:14:44.120
and a whole bunch of other things like Hadoop and Redis


00:14:44.120 --> 00:14:47.700
to allow you to watch traces across your servers


00:14:47.700 --> 00:14:50.200
to kind of put it all together into like one view,


00:14:50.200 --> 00:14:52.000
not just what your web app is doing


00:14:52.000 --> 00:14:55.200
or what this background service is doing, things like that.


00:14:55.200 --> 00:14:57.800
Check them out at pythonbytes.fm/datadog


00:14:57.800 --> 00:15:00.160
and you'll get a cool t-shirt.


00:15:00.160 --> 00:15:01.580
- Nice. - Yeah.


00:15:01.580 --> 00:15:04.600
So have you heard of this guy named Kenneth Wright?


00:15:04.600 --> 00:15:06.840
- Yeah, we've covered him a few times.


00:15:06.840 --> 00:15:08.720
- He's created a couple of libraries that are,


00:15:08.720 --> 00:15:10.960
some people use them, I heard they're interesting.


00:15:10.960 --> 00:15:14.320
Now actually, you know, Kenneth's been on the show,


00:15:14.320 --> 00:15:17.000
and he's done a ton of cool work, right?


00:15:17.000 --> 00:15:19.520
Like, requests is amazing,


00:15:19.520 --> 00:15:22.800
he's got a bunch of other things going on as well,


00:15:22.800 --> 00:15:25.120
you know, records, responder, and so on.


00:15:25.120 --> 00:15:27.460
So definitely, definitely cool.


00:15:27.460 --> 00:15:32.460
However, he recently posted this comment about a week ago.


00:15:32.460 --> 00:15:34.300
"In the spirit of transparency,


00:15:34.300 --> 00:15:36.020
"I'd like to publicly find a new home


00:15:36.020 --> 00:15:38.780
"for all of my repositories.


00:15:38.780 --> 00:15:40.420
"I wouldn't be able to make some contribution to them,


00:15:40.420 --> 00:15:42.240
"but I'm kind of done with being the owner


00:15:42.240 --> 00:15:44.020
"and BDFL of these things."


00:15:44.020 --> 00:15:47.060
So that's kind of a pretty big statement,


00:15:47.060 --> 00:15:50.380
like, hey, Kenneth who's in charge of all these things


00:15:50.380 --> 00:15:51.740
kind of just said, I'm done with them,


00:15:51.740 --> 00:15:54.220
which is not the end of them, obviously,


00:15:54.220 --> 00:15:55.820
but that's a pretty big deal


00:15:55.820 --> 00:15:58.260
that somebody should probably address, right?


00:15:58.260 --> 00:15:59.180
- Yeah, definitely.


00:15:59.180 --> 00:16:01.640
Actually, a lot of these projects, it's interesting,


00:16:01.640 --> 00:16:04.020
if they were any, the communities around them,


00:16:04.020 --> 00:16:05.820
because they're not just one person,


00:16:05.820 --> 00:16:07.560
the communities around them have built up,


00:16:07.560 --> 00:16:09.820
especially with things like requests.


00:16:09.820 --> 00:16:12.340
There's a lot of people working with it and working on it.


00:16:12.340 --> 00:16:15.180
Some of these are projects that have reached a size


00:16:15.180 --> 00:16:18.220
that most projects have already moved off of,


00:16:18.220 --> 00:16:20.720
moved into a group repo setting


00:16:20.720 --> 00:16:23.420
instead of staying with one owner setting.


00:16:23.420 --> 00:16:25.220
- Like pallets and flask, for example.


00:16:25.220 --> 00:16:26.700
- Yeah, exactly.


00:16:26.700 --> 00:16:28.480
I think it's a good thing.


00:16:28.480 --> 00:16:30.900
I don't see the controversy.


00:16:30.900 --> 00:16:33.220
- Well, there was some of the controversy a little bit


00:16:33.220 --> 00:16:35.120
was if you go and look at that,


00:16:35.120 --> 00:16:37.660
you'll see a bunch of people


00:16:37.660 --> 00:16:40.980
who may be super involved in Python,


00:16:40.980 --> 00:16:43.380
some people who are not very involved in Python at all


00:16:43.380 --> 00:16:44.580
are like, "Hey, I'll take over this,"


00:16:44.580 --> 00:16:47.100
or, "I'll take requests, give that to me."


00:16:47.100 --> 00:16:49.380
It's like, wait, wait, wait, wait a minute.


00:16:49.380 --> 00:16:51.660
Shouldn't some of these really important pieces


00:16:51.660 --> 00:16:56.420
to have some careful thought about where they go.


00:16:56.420 --> 00:16:57.820
So there was a lot of back and forth,


00:16:57.820 --> 00:16:59.220
and some of these smaller ones,


00:16:59.220 --> 00:17:02.020
people picked up and they're taking over and so on.


00:17:02.020 --> 00:17:04.660
But Ernest Durbin jumped in and said,


00:17:04.660 --> 00:17:07.400
"Hey, you know, the Python Software Foundation


00:17:07.400 --> 00:17:10.100
"would like to accept transfer of these repositories


00:17:10.100 --> 00:17:13.420
"into the PSF GitHub organization."


00:17:13.420 --> 00:17:14.360
Apparently this is a new thing.


00:17:14.360 --> 00:17:15.860
The organization recently acquired


00:17:15.860 --> 00:17:18.060
the Python Software Foundation.


00:17:18.060 --> 00:17:19.700
The GitHub, or let me get this right,


00:17:19.700 --> 00:17:22.700
that GitHub organization was acquired by the PSF,


00:17:22.700 --> 00:17:25.860
so they can control it, rather than just some other random thing.


00:17:25.860 --> 00:17:28.460
>> Yeah. >> And the idea is that this is to provide


00:17:28.460 --> 00:17:31.700
an administrative backstop for projects in the ecosystem.


00:17:31.700 --> 00:17:34.780
Existing maintainers will still remain, and


00:17:34.780 --> 00:17:37.180
the PSF staff will be able to help take care of things.


00:17:37.180 --> 00:17:38.020
>> Okay, nice.


00:17:38.020 --> 00:17:39.140
>> That's a pretty good outcome, right?


00:17:39.140 --> 00:17:40.300
>> And I think that's a good thing.


00:17:40.300 --> 00:17:45.140
I was just saying, I wouldn't want these projects to go into just somebody else's


00:17:45.140 --> 00:17:46.340
name. >> Yes, exactly.


00:17:46.340 --> 00:17:48.980
they should go into some group or something.


00:17:48.980 --> 00:17:49.820
So, yeah.


00:17:49.820 --> 00:17:51.580
- Yeah, and I think the biggest news here


00:17:51.580 --> 00:17:54.420
is not that the request is moving somewhere,


00:17:54.420 --> 00:17:57.140
but that, hey, the PSF has a GitHub organization


00:17:57.140 --> 00:17:59.180
whose job it is to take over projects like this.


00:17:59.180 --> 00:18:00.940
- That's pretty cool, yeah.


00:18:00.940 --> 00:18:02.700
I think more stuff should go in there than--


00:18:02.700 --> 00:18:03.540
- Yeah, exactly.


00:18:03.540 --> 00:18:05.100
Yeah, we should let people know about it.


00:18:05.100 --> 00:18:07.860
So, I get the question also every now and then,


00:18:07.860 --> 00:18:12.440
like, I have this project, it's open source,


00:18:12.440 --> 00:18:14.500
but I'd kind of like to make it more of my job.


00:18:14.500 --> 00:18:17.940
how can I somehow keep with the spirit of open source


00:18:17.940 --> 00:18:21.040
and yet somehow have a commercial license


00:18:21.040 --> 00:18:23.260
or commercial something for my project?


00:18:23.260 --> 00:18:25.020
And this one that you pulled up here,


00:18:25.020 --> 00:18:26.820
this is pretty darn interesting.


00:18:26.820 --> 00:18:28.140
- I think it's interesting.


00:18:28.140 --> 00:18:30.380
My first, I didn't know what to make of it at first.


00:18:30.380 --> 00:18:31.300
- That's how I felt as well.


00:18:31.300 --> 00:18:33.580
I was like, what is, like, is this even real?


00:18:33.580 --> 00:18:34.420
Is this a joke?


00:18:34.420 --> 00:18:35.380
What is this?


00:18:35.380 --> 00:18:37.860
- So the idea, this is from Aaron Hammer,


00:18:37.860 --> 00:18:39.780
and he's an open source developer


00:18:39.780 --> 00:18:41.620
and has created lots of things.


00:18:41.620 --> 00:18:43.620
I didn't know about him before this article,


00:18:43.620 --> 00:18:47.100
But the article is called the Backwards Commercial License.


00:18:47.100 --> 00:18:50.220
And he's saying that there's a lot of--


00:18:50.220 --> 00:18:52.900
well, some widely used projects will


00:18:52.900 --> 00:18:55.140
go kind of through three phases.


00:18:55.140 --> 00:18:57.620
First phase being it's just--


00:18:57.620 --> 00:19:01.180
it's got one project or one company using it.


00:19:01.180 --> 00:19:03.180
So that company or the individual person


00:19:03.180 --> 00:19:04.740
is using the use case.


00:19:04.740 --> 00:19:06.820
They're the one developing it, of course.


00:19:06.820 --> 00:19:10.380
But as things grow, if it becomes popular,


00:19:10.380 --> 00:19:13.580
it'll go through a stage where you have active community


00:19:13.580 --> 00:19:16.500
members contributing features, there's a growing audience,


00:19:16.500 --> 00:19:18.140
and a lot of people are using it.


00:19:18.140 --> 00:19:20.660
And then later, a lot of the people-- the third stage


00:19:20.660 --> 00:19:22.940
is a lot of people kind of think it's done,


00:19:22.940 --> 00:19:27.860
and there's a few security fixes or bug fixes or minor features


00:19:27.860 --> 00:19:28.500
added.


00:19:28.500 --> 00:19:32.660
But for the most part, what's working is working.


00:19:32.660 --> 00:19:34.860
You can use a nine-year-old version of KShell,


00:19:34.860 --> 00:19:36.220
and it works just fine.


00:19:36.220 --> 00:19:38.500
That sort of thing, at that point,


00:19:38.500 --> 00:19:41.980
that's when it's not really that exciting to work on it,


00:19:41.980 --> 00:19:44.300
but a lot of people depend on it.


00:19:44.300 --> 00:19:46.660
So how do you pay for that maintenance?


00:19:46.660 --> 00:19:51.060
And Aaron's thought is at that done phase,


00:19:51.060 --> 00:19:53.460
basically don't support old versions,


00:19:53.460 --> 00:19:55.680
only support the latest and greatest,


00:19:55.680 --> 00:19:59.500
but have another name for something that's identical


00:19:59.500 --> 00:20:02.860
under a commercial license for maintain older versions.


00:20:02.860 --> 00:20:04.300
I think I got that right.


00:20:04.300 --> 00:20:05.300
- It sounds about right, yeah.


00:20:05.300 --> 00:20:06.340
I understood it the same way.


00:20:06.340 --> 00:20:07.900
- I think it's an interesting idea.


00:20:07.900 --> 00:20:10.980
And I'm not sure how the licensing would work


00:20:10.980 --> 00:20:17.100
you essentially have code developed by lots of people under an open source model, you'd


00:20:17.100 --> 00:20:21.260
have to have a different open source license to allow this, because all of the code would


00:20:21.260 --> 00:20:26.500
then be transferred to a, into a commercial license for a maintenance phase or something.


00:20:26.500 --> 00:20:30.700
Yeah, I mean, the logistics would be a little bit tricky, right? Like, let's just say Django,


00:20:30.700 --> 00:20:36.220
right? You like, somebody has Django 0.5. And it's on two now. And they don't want to


00:20:36.220 --> 00:20:40.580
upgrade their code, but they want some change done to it,


00:20:40.580 --> 00:20:42.380
or there's a security fix or something,


00:20:42.380 --> 00:20:45.620
they're like, we'd rather pay you $1,000 a year


00:20:45.620 --> 00:20:47.940
so if a security problem is found in it,


00:20:47.940 --> 00:20:50.460
it just gets fixed rather than us having to


00:20:50.460 --> 00:20:52.100
do that migration to Django 2.


00:20:52.100 --> 00:20:52.940
Something like that, right?


00:20:52.940 --> 00:20:53.780
- Yeah.


00:20:53.780 --> 00:20:57.240
- You'd have to like somehow fork that into a private repo


00:20:57.240 --> 00:21:01.020
and then have some other channel for releasing that, right?


00:21:01.020 --> 00:21:04.060
Like some private authenticated thing


00:21:04.060 --> 00:21:05.000
that people can log into.


00:21:05.000 --> 00:21:06.500
I don't know exactly how it worked.


00:21:06.500 --> 00:21:06.740
I don't know.


00:21:06.740 --> 00:21:07.740
How do you feel about it?


00:21:07.740 --> 00:21:09.580
I think it seems like a reasonable way,


00:21:09.580 --> 00:21:12.100
if you set up the license at a time, so people--


00:21:12.100 --> 00:21:14.340
for new projects, people knew about it.


00:21:14.340 --> 00:21:16.060
They know what's going to happen.


00:21:16.060 --> 00:21:19.380
And they know if you want to keep the current one


00:21:19.380 --> 00:21:21.980
and make sure that it always works with your code


00:21:21.980 --> 00:21:24.900
and keep testing it, you can do that for free.


00:21:24.900 --> 00:21:28.420
But if you want to be able to set and forget and say,


00:21:28.420 --> 00:21:30.540
no, this is-- it's doing enough for me.


00:21:30.540 --> 00:21:32.220
I'll just use it now.


00:21:32.220 --> 00:21:34.500
And I don't want to deal with new stuff.


00:21:34.500 --> 00:21:36.140
- Yeah, maybe you should have to pay for that.


00:21:36.140 --> 00:21:37.340
- It's pretty interesting.


00:21:37.340 --> 00:21:38.840
My first thought was it was kind of weird,


00:21:38.840 --> 00:21:40.060
but the more I think about it,


00:21:40.060 --> 00:21:42.420
I'm not really super against it.


00:21:42.420 --> 00:21:44.020
- This isn't his first idea, though.


00:21:44.020 --> 00:21:47.340
Also, in the article, he talks about how he used to,


00:21:47.340 --> 00:21:52.320
a lot of the projects were paid for by corporate sponsors,


00:21:52.320 --> 00:21:53.700
but it wasn't very many of them.


00:21:53.700 --> 00:21:56.620
It was a handful of companies paying for something


00:21:56.620 --> 00:22:00.100
and then hundreds of companies getting it for free.


00:22:00.100 --> 00:22:03.820
And then as more and more of those companies move into


00:22:03.820 --> 00:22:07.060
it's good enough for us now, their support drops off.


00:22:07.060 --> 00:22:10.580
- Yeah, I definitely feel like companies out there


00:22:10.580 --> 00:22:14.620
just get way more benefit from these types of projects


00:22:14.620 --> 00:22:16.960
than they're willing to give back.


00:22:16.960 --> 00:22:20.300
Even if that company, say, hires and employs


00:22:20.300 --> 00:22:22.220
some core developer of a project,


00:22:22.220 --> 00:22:26.060
but they're like, let's just say a bank,


00:22:26.060 --> 00:22:27.620
and this powers their trading engine


00:22:27.620 --> 00:22:30.100
that does $100 billion of revenue,


00:22:30.100 --> 00:22:32.900
surely more than $100,000


00:22:32.900 --> 00:22:34.620
should go back to that product.


00:22:34.620 --> 00:22:37.160
Surely some kind of larger contribution


00:22:37.160 --> 00:22:39.740
is reasonable to keep the ecosystem going.


00:22:39.740 --> 00:22:40.580
So I don't know.


00:22:40.580 --> 00:22:42.900
I feel like stuff that sets up a framework


00:22:42.900 --> 00:22:45.500
for companies to pay money legitimately


00:22:45.500 --> 00:22:47.640
to help keep open source going,


00:22:47.640 --> 00:22:49.600
I don't see a lot of great setups like that.


00:22:49.600 --> 00:22:50.980
So this is something down that path


00:22:50.980 --> 00:22:51.940
that's worth considering.


00:22:51.940 --> 00:22:52.900
- Yeah, I think so.


00:22:52.900 --> 00:22:53.740
Interesting.


00:22:53.740 --> 00:22:56.100
- Cool, well, also interesting is this next article


00:22:56.100 --> 00:23:00.220
that comes from us from Gibi on Twitter, I think it is.


00:23:00.220 --> 00:23:02.500
And did you know that Gita Van Rossum


00:23:02.500 --> 00:23:05.580
had a Medium account, and he's blogging there now?


00:23:05.580 --> 00:23:08.060
- No, well, just with this one.


00:23:08.060 --> 00:23:09.460
- Yeah, well, now that it's here, right?


00:23:09.460 --> 00:23:12.460
So I don't know, actually, I didn't look at those other posts


00:23:12.460 --> 00:23:13.420
to see how long he's been doing this,


00:23:13.420 --> 00:23:14.760
but this is the first I know about it.


00:23:14.760 --> 00:23:17.500
So he wrote an article called something,


00:23:17.500 --> 00:23:21.660
it's not the title I put here, it was PEG parsers,


00:23:21.660 --> 00:23:26.660
P-E-G parsers, and he talks about how the parser


00:23:26.660 --> 00:23:32.060
that actually parses syntax in Python and .py files,


00:23:32.060 --> 00:23:34.220
That code is some of the very first code


00:23:34.220 --> 00:23:36.380
that he wrote for Python 30 years ago.


00:23:36.380 --> 00:23:37.420
- Interesting, okay.


00:23:37.420 --> 00:23:41.740
- Yeah, and it uses this LL1 parsing mechanism,


00:23:41.740 --> 00:23:46.740
which is the right thing probably for 20 years,


00:23:46.740 --> 00:23:49.740
30 years ago, but probably not the best thing now.


00:23:49.740 --> 00:23:52.620
And so the one moniker there implies that,


00:23:52.620 --> 00:23:54.260
like, as you're going through the tokens


00:23:54.260 --> 00:23:55.580
and parsing them in the syntax,


00:23:55.580 --> 00:23:58.420
you're looking at only one of them at a time.


00:23:58.420 --> 00:24:00.980
And so this actually limits the grammar rules


00:24:00.980 --> 00:24:05.300
that Python is allowed to have because the parsing is actually really limited.


00:24:05.300 --> 00:24:08.300
So he didn't say this in his article, but let me give you an example.


00:24:08.300 --> 00:24:15.660
Like in the C# language, they have the exact same concept as we have with Yield,


00:24:15.660 --> 00:24:20.780
but their mechanism, their syntax to say, "I want to yield"


00:24:20.780 --> 00:24:23.500
something is to say "yield return the value."


00:24:23.500 --> 00:24:27.820
So "yield" is still a valid word in C#,


00:24:27.820 --> 00:24:31.820
but yield return, those two combinations


00:24:31.820 --> 00:24:34.000
of separate statements actually mean something different


00:24:34.000 --> 00:24:35.820
because it can more complicate,


00:24:35.820 --> 00:24:38.660
like in this context, this is a keyword,


00:24:38.660 --> 00:24:40.340
but in a different context, it's not.


00:24:40.340 --> 00:24:41.180
- Oh, weird.


00:24:41.180 --> 00:24:42.540
- Yeah, so I think things like that


00:24:42.540 --> 00:24:44.240
are just not around in Python,


00:24:44.240 --> 00:24:48.420
partly because the parsing just didn't deal with it.


00:24:48.420 --> 00:24:50.420
So anyway, he talks about the history of the parser


00:24:50.420 --> 00:24:53.340
and this idea of using this thing called a peg parser,


00:24:53.340 --> 00:24:56.940
which is more like a depth first parsing thing


00:24:56.940 --> 00:24:59.040
that has an infinite lookahead buffer.


00:24:59.040 --> 00:25:02.700
And it goes through and it basically parses the entire file.


00:25:02.700 --> 00:25:04.900
Well, it reads through the entire file,


00:25:04.900 --> 00:25:07.680
understands it, and then goes and does the parsing.


00:25:07.680 --> 00:25:09.200
So you can have infinite lookahead,


00:25:09.200 --> 00:25:11.920
you can go back as far as you want, and so on,


00:25:11.920 --> 00:25:13.680
using something called pack-wrap parsing,


00:25:13.680 --> 00:25:15.240
which is kind of interesting.


00:25:15.240 --> 00:25:19.080
So basically before, when memory was really cheap,


00:25:19.080 --> 00:25:21.940
like this was really expensive, really limited,


00:25:21.940 --> 00:25:22.760
this was a problem.


00:25:22.760 --> 00:25:24.940
Like the decimal module,


00:25:24.940 --> 00:25:27.820
like decimal.py or underscore decimal.py,


00:25:27.820 --> 00:25:31.500
whatever it's called, is like 220K.


00:25:31.500 --> 00:25:35.180
And actually loading that entire Python file to parse it


00:25:35.180 --> 00:25:38.820
turned out to be some kind of issue in the early days.


00:25:38.820 --> 00:25:41.380
Whereas, who cares about loading 200K now?


00:25:41.380 --> 00:25:42.220
- Yeah.


00:25:42.220 --> 00:25:43.420
- Yeah, so I'm basically saying,


00:25:43.420 --> 00:25:47.420
look, it might be time to replace this super old


00:25:47.420 --> 00:25:51.880
but really polished, limited parser that they called PGEN


00:25:51.880 --> 00:25:54.300
with something using PEG and PacREC parsing


00:25:54.300 --> 00:25:56.260
the way it works with the abstract syntax tree


00:25:56.260 --> 00:25:58.700
might have some interesting optimizations that actually


00:25:58.700 --> 00:26:00.220
make it use less memory anyway.


00:26:00.220 --> 00:26:00.720
Oh, yeah.


00:26:00.720 --> 00:26:01.500
That'd be interesting.


00:26:01.500 --> 00:26:03.060
Yeah, so this article is kind of interesting.


00:26:03.060 --> 00:26:04.600
It's interesting in a couple of ways.


00:26:04.600 --> 00:26:07.340
It's interesting just hearing Guido


00:26:07.340 --> 00:26:10.500
think about the history and where it's come.


00:26:10.500 --> 00:26:14.260
And you get a real good look at his thought process of,


00:26:14.260 --> 00:26:15.540
should we change the language?


00:26:15.540 --> 00:26:16.140
Should we not?


00:26:16.140 --> 00:26:17.660
Why did it come this way?


00:26:17.660 --> 00:26:19.140
How did we get to where we are?


00:26:19.140 --> 00:26:21.420
Also, it's just cool that he's blogging.


00:26:21.420 --> 00:26:23.020
Yeah, definitely.


00:26:23.020 --> 00:26:25.340
- One of the benefits of him not having to do everything.


00:26:25.340 --> 00:26:27.700
- Yeah, exactly, for sure.


00:26:27.700 --> 00:26:28.980
All right, well, that's it for our main items.


00:26:28.980 --> 00:26:30.060
What else we got?


00:26:30.060 --> 00:26:31.300
- One of the things I wanted to bring up,


00:26:31.300 --> 00:26:33.060
sometimes we have a couple of quick things


00:26:33.060 --> 00:26:36.020
that we didn't have huge topics on,


00:26:36.020 --> 00:26:38.940
but Philip Bauer works on Plone,


00:26:38.940 --> 00:26:42.500
and he contacted us and said, "Hey, Plone 5.2 is out."


00:26:42.500 --> 00:26:45.340
And I'm like, "Okay, I don't use Plone,


00:26:45.340 --> 00:26:47.440
"but yeah, maybe we cover it."


00:26:47.440 --> 00:26:48.560
No, this is a big deal.


00:26:48.560 --> 00:26:52.040
So it's 5.2 is a multi-year effort.


00:26:52.040 --> 00:26:54.040
It was a really huge amount of work.


00:26:54.040 --> 00:26:57.120
And Cologne is a content management system


00:26:57.120 --> 00:26:58.620
built on top of Zope,


00:26:58.620 --> 00:27:01.640
which is a web application server framework.


00:27:01.640 --> 00:27:03.960
And a lot of this was in the early days


00:27:03.960 --> 00:27:07.060
targeting like newspapers and things like that.


00:27:07.060 --> 00:27:09.360
But there's still a lot of people using it.


00:27:09.360 --> 00:27:12.280
And 5.2 now supports all of the threes,


00:27:12.280 --> 00:27:15.200
at least 3.6, 7, and 8, which is super cool.


00:27:15.200 --> 00:27:18.920
And Zope 4 apparently supports Python 3,


00:27:18.920 --> 00:27:20.740
and it's all up to date now.


00:27:20.740 --> 00:27:22.620
And then if you want to read all about it,


00:27:22.620 --> 00:27:26.740
we've got a link to the release announcement


00:27:26.740 --> 00:27:28.620
and also an interview with Philip


00:27:28.620 --> 00:27:30.460
about some of the transitions.


00:27:30.460 --> 00:27:33.300
- Multi-year effort, that's pretty intense.


00:27:33.300 --> 00:27:36.180
So another major project comes along


00:27:36.180 --> 00:27:38.620
and now is Python 3 only, that's awesome.


00:27:38.620 --> 00:27:39.440
- Yeah.


00:27:39.440 --> 00:27:42.300
- Do you think it's interesting that so many of these CMSs


00:27:42.300 --> 00:27:43.940
came from newspapers, right?


00:27:43.940 --> 00:27:46.820
Like Django also came from like a newspaper


00:27:46.820 --> 00:27:48.220
in Lawrence, Kansas, which by the way,


00:27:48.220 --> 00:27:50.220
it's where I went to college.


00:27:50.220 --> 00:27:53.020
So just, you know, who knows where that's coming from.


00:27:53.020 --> 00:27:53.860
- Name dropping.


00:27:53.860 --> 00:27:55.620
(laughing)


00:27:55.620 --> 00:27:57.100
- Well, Lawrence, Kansas is not a big place,


00:27:57.100 --> 00:27:59.140
so not a big name, but yeah.


00:27:59.140 --> 00:28:01.320
I had no idea until recently that it was from there.


00:28:01.320 --> 00:28:03.500
But yeah, it's just interesting that


00:28:03.500 --> 00:28:06.260
these Python web frameworks are coming from newspapers.


00:28:06.260 --> 00:28:07.460
- Yeah, it is interesting.


00:28:07.460 --> 00:28:09.900
Well, I guess it makes sense that you got a lot of people


00:28:09.900 --> 00:28:13.700
writing, adding content to stuff, so CMSs,


00:28:13.700 --> 00:28:16.340
probably all the CMSs came from newspaper stuff.


00:28:16.340 --> 00:28:17.740
- Yeah, that's probably true.


00:28:17.740 --> 00:28:19.220
All right, well, I have another one for you.


00:28:19.220 --> 00:28:20.780
This one is way less serious.


00:28:20.780 --> 00:28:22.100
And about a year and a half ago,


00:28:22.100 --> 00:28:23.780
this probably would have been like all


00:28:23.780 --> 00:28:26.460
just super cool hip stuff.


00:28:26.460 --> 00:28:30.780
Now it's a little bit dated in some of the actions,


00:28:30.780 --> 00:28:32.820
but there's this project called


00:28:32.820 --> 00:28:36.420
Building Dab and T-Pose Controlled Light.


00:28:36.420 --> 00:28:37.620
And dab is like this--


00:28:37.620 --> 00:28:39.060
- This is pretty interesting though.


00:28:39.060 --> 00:28:42.100
I mean, yeah, dab might be the,


00:28:42.100 --> 00:28:45.580
not might be the current dance move of the day,


00:28:45.580 --> 00:28:48.500
but controlling your lights with dance moves,


00:28:48.500 --> 00:28:49.340
That's pretty neat.


00:28:49.340 --> 00:28:51.960
Someone built this thing with Python,


00:28:51.960 --> 00:28:53.580
this thing called Make Art with Python.


00:28:53.580 --> 00:28:55.780
And you come in and you do a dab move, which if you don't know


00:28:55.780 --> 00:28:56.780
what it is, just click the link.


00:28:56.780 --> 00:28:58.100
There's a little animated video.


00:28:58.100 --> 00:28:59.580
You'll totally see it right away.


00:28:59.580 --> 00:29:00.220
You do a dab.


00:29:00.220 --> 00:29:01.780
That turns off the lights.


00:29:01.780 --> 00:29:03.940
And then whenever you want to turn them on, you do a T.


00:29:03.940 --> 00:29:05.820
Just put your arm straight out and hold still for a second,


00:29:05.820 --> 00:29:06.980
and boom, the lights are on.


00:29:06.980 --> 00:29:09.500
What I find super interesting about the article


00:29:09.500 --> 00:29:12.820
is the amount of effort that went into this.


00:29:12.820 --> 00:29:14.660
I mean, not by this person.


00:29:14.660 --> 00:29:18.780
He's utilizing a database of people movement


00:29:18.780 --> 00:29:19.740
and all that stuff.


00:29:19.740 --> 00:29:22.500
So this is like standing on the shoulders of giants


00:29:22.500 --> 00:29:23.780
to change a light bulb.


00:29:23.780 --> 00:29:24.620
- Yes, exactly.


00:29:24.620 --> 00:29:27.860
How many computer vision specialists


00:29:27.860 --> 00:29:29.740
does it take to change a light bulb?


00:29:29.740 --> 00:29:30.560
I don't know.


00:29:30.560 --> 00:29:31.400
Could be a joke of some sort.


00:29:31.400 --> 00:29:33.060
But anyway, this is pretty funny.


00:29:33.060 --> 00:29:34.300
People thinking of what they can do


00:29:34.300 --> 00:29:35.820
with like Python and computer vision.


00:29:35.820 --> 00:29:38.140
And yeah, check it out.


00:29:38.140 --> 00:29:39.100
- Yeah, cool.


00:29:39.100 --> 00:29:41.220
- All right, so I got a couple of jokes for you.


00:29:41.220 --> 00:29:42.740
These are quick ones, so I put two in here


00:29:42.740 --> 00:29:43.660
and they're related.


00:29:43.660 --> 00:29:44.500
- Okay.


00:29:44.500 --> 00:29:48.580
when we talked, we talked a little bit about C and whatnot. What is a whale's favorite


00:29:48.580 --> 00:29:52.820
programming language? C, but you just gave away the answer at the beginning of the...


00:29:52.820 --> 00:29:58.100
All right. Well then, tell me why do pythons live on land?


00:29:58.100 --> 00:30:00.500
Why? Because it's above sea level.


00:30:00.500 --> 00:30:06.100
Yeah. Okay. Yeah. Well, the first one comes to us from Eric Nelson, the second one from Jesper


00:30:06.100 --> 00:30:09.700
Sorensen. So thank you guys for sending those in. Yeah, that's where...


00:30:09.700 --> 00:30:13.780
Nice. Let's say amusing. I'm not sure I'm going to go as far as saying funny, but amusing.


00:30:13.780 --> 00:30:15.140
Yeah, some levity.


00:30:15.140 --> 00:30:15.860
Cool.


00:30:15.860 --> 00:30:19.460
Yep, exactly. All right. Well, good chat with you as always.


00:30:19.460 --> 00:30:20.420
Thanks. Bye.


00:30:20.420 --> 00:30:21.460
Yep. See ya.


00:30:21.460 --> 00:30:25.700
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes.


00:30:25.700 --> 00:30:31.940
That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm.


00:30:31.940 --> 00:30:36.020
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.


00:30:36.020 --> 00:30:38.820
We're always on the lookout for sharing something cool.


00:30:38.820 --> 00:30:42.020
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:30:42.020 --> 00:30:45.380
Thank you for listening and sharing this podcast with your friends and colleagues.

