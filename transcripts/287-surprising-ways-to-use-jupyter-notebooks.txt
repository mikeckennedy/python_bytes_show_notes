00:00:00 Hello, and welcome to python bytes where we deliver by thought news and headlines directly to your earbuds. This is episode 287. Recorded June 7, and I am Brian knockin. Michael Kennedy. Good to talk to you, Michael.

00:00:12 Yeah. Good to see you again. Brian. Yeah, again, we've got our wardrobe matching our background, which is fantastic. Yeah,

00:00:19 we like, you know, texted each other in the morning to make sure it's

00:00:23 feeling purple. I'm gonna get a new shirt. It's great. Good to see you, as always. Lots of fun Python things to talk about here.

00:00:30 Yeah, yeah, well, let's jump into the first one. The first thing

00:00:33 that I want to talk about here is distributing Python applications. Now, this is a little bit in the Python gooeys side of thing, something you just can't get enough of in terms of like, hey, could we have more ways to do this that are like, awesome, how about if we had ways that were automatic? Yeah. So So I want to talk about this thing by Brent bola regrets called Auto pi to exe. And it's basically does what it says right in the name there, converts a.py file to a dot exe using a simple graphical interface. Now, this GitHub description is a bit of windows bias, because it will also create it to Mac apps as well to dot app files. So there's not just a Windows thing, cool. It's pretty popular as 2000 Stars 400 Forex, and what it is, is a a UI on top of things like pi to app or PI installer, specifically, pi installer. So what you do is you fire this thing up, and out pops this user interface that if you're watching the YouTube stream, you can see there's a user interface here. And it just says, Pick the starting Python file for your application. And you can say, What do you want the output to be one file or one directory? Okay, I think we all want it to be one file, probably genuinely, but maybe a directory, I don't know what else you're gonna get. Maybe you want to do some other things there. But what I did is I tried this against my URL file little appy thing, which let me pull that up. This is something I built a while ago with rumps just fantastic, ridiculously uncomplicated menu bar apps or something like that. For Mac, and all it is, is a little thing that goes up in your Mac bar. And it has like, you know, slugga phi tax or trim it or lowercase is just, I'm constantly taking names of like file names and turning them into something I could put as a URL or like a title of a video or something and turn it into something that would be a good URL. So that's what this whole app is for. But here's the thing is, it's a Python app that runs in the minibar, my Mac with no terminal view, and I wanted to be able to distribute it to people. And so the way you get it, is you just download a zip file, which is just the zipped up dot app executable, right? So I had done a bunch of stuff with the setup, and all those kinds of things with PI installer to build this. So my test case was, well let me take this auto pi to exe thing and just point it at that and see what happens. And what happened was good things that was really interesting. There's the an app.pi, but there's dependent Python files that uses me, I'm not a beast, I don't write my entire application in one file. Like there's other things broken apart in there. And that gets bundled up. And it's somehow discovered that hold those all in. So I just picked the top level file, and it found the dependencies, the the requirements, dot txt type dependencies, and so on. And it created a dot app file that, as far as I could tell, ran just fine. That's cool. And that cool. Yeah, I like it, you can decide if it's a window based application. So hide the console, which is what I said, because I want it to run in the menu bar. But if it was a console based app, but you just wanted to distribute it as a single thing with no Python, no Python requirements, you could create a console based app, you set the icon, you can add in additional file. So if there's like JSON configuration files, or Yamo files, or images or something like that, you need to take along, you can configure that there. And then there's an advanced section that expands out to be like pages of stuff that I don't remember, same thing for settings. And then you just click the big convert to pi to exe button. And you get ironically, not an exe, but a dot app file. And there you go. That's cool. Isn't that cool? So for people who are playing around with this, I think they you know, they even have a must be listening to us here. They even have a little animated GIF of how this all works. Right on GitHub. That's pretty easy. If you want to see how it works. I guess there's not a whole lot but you browse for the icon, you go in there and check off some things. And then you just hit build. And it takes a little while but you know that's pi to exe. That's how it goes. And it just sits there and it cranks away for a while. Bundles it all up and got a little executable. So if this is something you want to play with, but you're like, ah it's kind of a real pain. In to go and figure out, you know, all the setup pi commands in order to get it to do the PI installer commands and whatnot, then, you know, you can definitely give this a shot. I think it's pretty neat. I think with mine, I didn't use PI, two installer. I think I use PI two app. Yeah, that's what I used. So pretty neat. Yeah, check that out. I think people will find it helpful for ways to distribute Python apps.

00:05:24 Yeah. And I liked it. It looks pretty professional looking. And then also, especially, I mean, especially with internal like internal company stuff, there's that happens a lot where you want to share some something. Yeah, around

00:05:35 AI, like, just download this and run it. Please don't ask me how to set up a path so that your Python that's not python three, three, or whatever right

00:05:44 is the one that runs it. Nobody needs to know that it's Python underneath. So

00:05:47 yeah, exactly. So I really like it. Oh, one other thing, by the way, it's a GUI application itself written in Python. So you may wonder, what what is it doing? Right? Maybe it's bundled itself? Obviously, that'd be very meta, right? Like if Auto pi to exe could deliver an auto pi to exe itself. That's obviously lovely. It reminded me that I have Chrome installed when I tried when I ran it. So what it does is it it runs something in the background, then it fires up Chrome, which becomes the UI in this kind of windows looking Chrome window as this. It's not quite an electron app, but it's electron in a style. So anyway, it's it's an interesting little UI app itself. I'm not sure what it's doing. But okay, it works.

00:06:34 Nice. All right. Well, I'd like to talk about Jupiter. So Jupiter Notebooks. Oh, yeah. So this is how do you use it? How do you use it? So like, I was just fascinated by the clickbait Enos of this, but it's okay, eight surprising ways to eight surprising ways how to use Jupyter Notebooks. And I gotta say, I didn't know you could do some of the stuff that's up here. So it's pretty cool. So the first one package development, why would you? I don't know why. But you know, some people that are more comfortable in Jupiter than they are an IDE or something. Maybe it's good. So there's a package called the MB dev that you can use to. And it's by a company called fast AI, that, that you can use to help help with package development, including, you know, trying to get your CI working in your nope, the your tests all in one place, and demos and documentation and stuff. So that's kind of neat. like that idea. I definitely should try to play with that to see how that works. Apparently, there's a there's a video, somebody gave a talk around it, I guess. Yeah. Build a web app. So building your web app with, with with Jupiter. I think that's that's actually a pretty cool idea. There's several suggestions using Well, I think we covered that.

00:07:53 I think yeah, we've covered that before. But the other one, I don't think we have i pi widgets.

00:07:57 I I'm not sure what that one is. So I haven't looked at the widgets thing. But you know, more widgets within your window. Sure. Why not? Why other Nope, it's a widgets thing. You think there'd be images on the readme. But anyway, and then a framework called mercury, and this shows up several times in this. So Mercury is, is does a lot of stuff around Jupyter notebooks and doing extra things. So this shows up several times in this list. So for one for creating a for grading web app, which is kind of neat, especially if you're you know, sharing data and have interactive stuff that you might have. Doing stuff with with a web application be cool. slide deck. Gotta love it. I bet definitely didn't want to try this out because the using NB convert, or mercury, apparently remember, Mercury does that too. It uses reveal js. I think a lot of people have tried reveal js before for slides. But having building it within notebooks, building your slide decks within notebooks. And then and then to having that just run. That's cool. Building a book. This is something else that sounds pretty interesting. I'd like to try doing some code to a notebook. A book like thing. Now I don't have I'm curious about this. So the book, you build a website that looks like a book, but that's not a book. So it says it can be exported to a PDF file. But I don't see anywhere you're exporting to an ePub or mobi so you know I call BS on whether that this is a book. This is a website that holds book contents as far as I could tell. Still cool though. Running a blog. This is something I had no idea Nicola could do so Nicola, Nicola, I don't know how to pronounce that. Veronica across her before I'm not sure what we we've we've covered it, but it's a static site generator. And it apparently can take notebooks files. and just run notebooks as a blog. So

00:10:03 that's pretty cool on notebooks is a blog? Oh, that's interesting. Well, yeah, especially

00:10:07 if you're gonna write about, like some Python technique or something, you just do a little demo of it, and then publish that as a text thing, or I don't know, if it outputs, I didn't read it close enough, outputs the exports every notebook to an HTML file, and then publish all the files that are static website. That's pretty neat. Doing reports and dashboards, that's kind of like Jupiter would rock at that. And I think we've covered stuff like this before. But one of the things in the dashboard section that I thought was neat was this mercury tool has a schedule option. So once you set up the report, you can schedule it to execute, you know, like once a day, or, or every hour or something like that. And that's, that's pretty neat. To to not have to do constantly. But update, you know, update your dashboard at a time

00:10:54 like that. That's really cool. So you could have some kind of dashboard instead of creating an the full web app. You just published this, but obviously you want it to refresh, right?

00:11:03 Yeah. Yep. So anyway, that Oh, last one REST API. This is this. This is interesting. I wouldn't have thought to build the REST API with Jupiter. So I guess you can do all this stuff. Whether or not you should I guess it's up to you.

00:11:20 But anyway, yeah, for sure. Anthony on the audience says Nicola works well as a static blog generator preferred over pelican. Let's,

00:11:30 let's send something nice. That is.

00:11:33 Yeah. Right. Wouldn't be good to know which ones are like more popular, which ones maybe you should depend upon? Yeah. All right. Well, I'll turn it over. Let's all right. So this one is from let me get right here. This will be from 10 Kala are shock. And they wrote this one, this thing called PIP trends. It's modeled a little bit after NPM trends. And it just lets you compare the popularity of packages based on their GitHub statistics. So GitHub statistics, you know, that's one metric of popularity, but let's give it a bit of a run. So what about if we type flask says, it immediately pulls up a nice little autocomplete that says flask, a simple web framework for building complex web applications. But then all the other ones like flask to postman, and so on. It's kind of interesting. I didn't really didn't really know about flask, the postman maybe that we'll talk about that next time. But let's pick flask and then immediately, immediately says, Well, what else might you consider along with this? Like, Well, how about fast API and Django? And what do we have? It also suggested bottle for a little while. So we'll throw a bottle in there, maybe, and let's do a search. And it comes up with a graph that honestly surprised me a fair amount. There's different levels of popularity. But that's not the first thing that surprised me. The first thing that surprised me is the regular cycles that all of these packages seem to go through. Does that seem strange to you?

00:13:00 Well, I've, I've noticed it before and I don't really know what's going on. Is that the weekends?

00:13:05 Yes, very good. So four or five was the weekend 6465. And those, that's where the dip is. So people download stuff less on the weekends, because there's less, create a new environment, create a new project, check it out, set it up, all that kind of stuff, which is healthy, where there's still a decent number of downloads going on the weekend there. Yeah, I

00:13:23 kind of wish the like to see us like a seven day moving window, moving average from IPA.

00:13:29 But yeah, like a different window, averaging or projected function. Anyway, what we get here, as we see that flask, sorry, fast API, and Django are super similar, like, almost tied, according to GitHub statistics. And these are downloads, I don't think you get downloads from GitHub, I think this is probably from pi pi, or BigQuery, or something. I'm not sure where those numbers are coming from, because I don't know where those are on. These, like time series, download numbers are on GitHub. So they're probably coming from somewhere else. But yeah, you can throw different projects in here and say, Ah, this one's relatively popular compared to that or, or whatever. What do you think?

00:14:08 I think this is kind of neat, especially with comparing I mean, I've used there's other ways to get the stats, but haven't been able to grab a few related ones. Having suggestions is kind of neat, too.

00:14:18 Yeah. So it looks it also has some more information about the package like you go to flask. It's 12 years old, it has 45 versions. Its last release was one month ago. It's def status, it's stable. It requires python three, seven, gives the license and who it's intended for. And you see similarly for fast API for Django and bottle. So cool. Also Johanna GitHub stack stats, you can see, like flask, there's 59,000 stars, for Django, there's 64,000 stars, number of open PRs, how fast the API is a lot of open PRs and issues. That's crazy, when it was last updated, and so on. So yeah, and it also gives you more comparisons down here. Like, well, that was fun. What about flask versus Django versus FastAPI? I wish what we did, but or NumPy versus pandas, for example, you can see them. And so that's pretty neat. I like it. Yeah, yeah. So Pip trends.com, you can check it out.

00:15:13 So um, I want to talk about raw to talk about class being classy, actually, been callable. So Trey Hunter put this blog post out called, is it a? Is it a class or a function? It's a callable. And this is actually something that I guess I realized, I just sort of got used to with Python, it's a lot more. It's, if you call something like Les as if you would call a function. It might not be a function. It might be a class, it might be an object. That's callable. It might be a class object, it all sorts of stuff you could do like for it, just to be clear, we were talking about, or he talks about, classes are callable. So in like some in like JavaScript, or C plus, plus, you'd have to say, new something. So you'd have to say, like, a new date, Object Object or something. But in Python, you just call date time with some parameters, and you get back a date time object. That's neat. But, um, so it's just, I guess, it's a good article to go through just to realize that you don't really have to care. There's a whole bunch of stuff that act like functions, and it's okay, if they're not functions. You just have to know if it's callable. And it talks a little bit about using using an init, Dunder init to make something callable that works. Properties are like decorators are a thing that are a callable item. There's some is just a good discussion about about all of this, is I thought this was a fascinating article, and I'm not sure I ever really thought about partials before, like a partial function is a is a, like a function that creates a almost creates an object and then you call it with some more stuff, and then it creates it. The rest of it are Creason. Anyway, maybe got that interesting.

00:17:08 Yeah, from functionals. I'd never used partial before. Okay, yeah.

00:17:13 And then there's a there's a call decorator or a call Dunder method that you can use that is helps out with making partials and, and talks about iterators and decorators, and all sorts of stuff like that, that actually act like call bowls, but they're not. They're like objects. The thing that I don't know where this is, but the thing, there's a statement in here that I thought was amazing. So there's a there's a page on the pipe API documentation of the built in functions within Python. And, and Trey points out that of the 69, there's 69 listed built in functions. within Python, only 42 are actually implemented as functions. 26 of them are While 26 are classes. And in one is a instance of a callable class. So like, in some of them, in Python, two, there were more and some of the some of them got converted, like map and filter, and range and zip used to be functions and now their objects or classes or something. The len function, they use that all the time, right? It's not a function. Alright, so callable class, okay, zip, the, like reversed, enumerate range filter, use those all the time. They're not functions, but they're callable. So anyway, I just thought that was an interesting take on Python is different than other languages.

00:18:43 It's different. Yeah, a lot of a lot of languages, you would never have that ambiguity, right? But it's the kind of ambiguity that you don't need to know or be aware of so.

00:18:52 So maybe ignore this article. But

00:18:55 no, no, no. I mean, it's interesting to know, I'm just saying like, it's not necessarily a problem that it's not super clear whether it's a class or function, because you call it and it does the thing you want it to do. So you're good to go.

00:19:05 Yeah, like Sam, Sam Morley pointed out here. Partial is useful, I think. I think it can be pickled, Unlike typical closures that can't might be wrong. But it just made me think about we in other languages, they really do talk about closures a lot and things like that. And we just don't have to. It just works. I don't know it just worked

00:19:26 out. Very nice. Very nice. Well, we're at the Brian, we've, we flew through those,

00:19:31 we did fly through them. So and we forgot to plug our stuff. So we did instead of a sponsor today. We've got work guys sponsored by us. So I want to make sure that everybody that is thinking about trying to learn something new in Python, first check out talk Python training because Michael has a whole bunch of awesome courses. And and you can I'm sure you can learn something for just a few bucks. So good prices.

00:19:58 And the new book very Listen to listen to

00:20:01 Yeah, man, a lot of good a lot of good feedback I love one of the things I love is getting pictures. I don't know why. But having somebody take a picture either of themselves holding the Python testing with PI tests, Second Edition, EQ, you can do the first edition too, if that's what you got, but either holding it somewhere unique like out in a park or at, you know, near a monument or something that would be so cool. I love it when people send me pictures. So yeah, that's awesome. Kenny extra

00:20:27 mattress? Yes, you know that I do. Alright, so this first one here, let's let's check this out. So this is interesting. This comes by way of Dan Bader, and it's the Orion browser. Just when you thought there was no more room for new browsers, here's a new browser. This one is different. So you can see I'm running Vivaldi these days 11 that other people are using brave, right. And so all of those browsers take the Chromium engine, strip off the Google stuff, and then put their own shell many, many times more private privacy protecting, and so on around them, right. And we've got Firefox, which is awesome. It's got its own engine, it doesn't do that. But almost every other browser is let's take Chrome and Chromium and wrap it up in our own flavor of our thing with our own philosophy on how the web should be. So this Orion browser is that but for Safari, Okay, interesting. So if you're into Safari, you know, it has things like on your Mac, it has better battery life, and so on. But think of it as like, I think Brave is probably the closest analogy. It's like brave for Safari without the crypto but it's, you know, got built in ad blocking. It's got built in tracker block blocking, and all that. One of the big drawbacks of Safari is you don't get access to the Firefox or the Chrome extensions. Right. You just get the safari ones. But this one has compatibility both for Firefox and Chrome extensions. Wow. In there. So you in that cool? So you can run this privacy protecting anti tracker safari with Chrome extensions. So it's just out in beta? I believe it's not yet it's out in beta right now. So I'm not sure where it is or where it's gonna go. But it's a pretty interesting take, isn't it?

00:22:18 Yeah. It's certified, snappy, certified, snappy.

00:22:21 I like indeed. And it's, I really like its privacy aspect. So I think

00:22:29 they say the privacy space and you brought this up the privacy space is, is there's convenience and their speed. But I think that's a place where people can we can open up the browser wars again. Yes, because in a good way to try to limit limit some of the privacy concerns or minimize them. So yeah,

00:22:51 nobody at Mozilla asked me, but I'll give it you know, Firefox is having trouble sort of keeping its market share. I think if it could triple down as the browser that you cannot be tracked with the browser that will absolutely preserve your privacy and then add services around that. I think that would be great. The big challenges. Well guess, you know, they're 99 90%, funded by Google and ad company who doesn't want that? So there's this, this interesting tension. But I think, you know, that's a path that I think Firefox should be taking as well. But

00:23:24 I guess I forgot about that. That note that Google was so such a big stick in Firefox.

00:23:30 Right. I think that limits their their playbook. I think they can't do things like we're going to make it so we're invisible if you use Firefox, basically, because their biggest supporter would not totally love that with that. So anyway, this is a zero temerity, Brad, telemetry, bat browser and whatnot. And you can go and download apparently works on Apple, silicon, and Intel, but obviously, being a safari wrapper, I believe it only works on iOS, I think, Mac I think and iOS things, I think iOS, iPad and Mac OS. But if you're on those, it's a pretty interesting take. And just from the browser wars in general, I think it's pretty interesting to track.

00:24:11 Yeah, definitely. It's cool. All right,

00:24:13 one more quick, extra, and then off to you. So last year, we all did the PSF plus JetBrains developer survey, which is supported by and analyzed by JetBrains. But it's really a PSF survey. And we had 23,000, Python developers and enthusiast participate. Well, the results are out so people can go check those out. Now, I've got a whole lot more analysis that I'd like to do before I talk about it. But they're, they're already out. So people started looking around there. And I'll give you more details next week.

00:24:46 Yeah, cool. Yeah, we should definitely cover it next week. That'd be fun.

00:24:49 Absolutely. All right. How about you?

00:24:51 I've got a small thing. Dot shirred kid really needed an entire section but Ned Batchelder did it What's in which Python? So, it's a page that has, basically it's everything from from, what did he have from 2.1 to three point 11? All just a hand, not like everything that's in every version, but some of the big hitters that you might, you know, you might know. So like 310 has union types and structural pattern matching and what what do you get with 311? Well, we know it's faster. But do we get like how much and it's 10 to 60%? Faster than 310? That's amazing. And then Exactly,

00:25:35 and that's a really amazing that after 30 years, they're like, oh, you know, this year, we're gonna make it 50% faster. Like that's, that's incredible. I'm glad that's happening. Yeah. And

00:25:43 then new module Tama lib is coming. So like, which is interesting that we've got pipe Project automall. And it's, it wasn't part of the standard library yet. So, but a whole bunch of things. Like if you can't remember like, if for some reason you forgot F strings came in then what was it? Three, six? Apparently, I forgot. So they came in in three, six, because it's on the list. Unless, unless Ned got it wrong, which probably didn't.

00:26:11 So now, I think three, six, I think that's the biggest mover for three six there.

00:26:15 Yeah. Yep. And data classes and three, seven. Yeah. So lots of cool stuff.

00:26:21 Fantastic. Henry Shriner out, the audience says it's the top features from each of the versions since 3.0. So not everything, not extensive, but like sort of the big hitters?

00:26:31 Yeah, I wasn't gonna say top because you know, they'll there's a lot of people that worked on a whole bunch of other stuff that are on the list, and I appreciate them as well.

00:26:39 But yeah, absolutely. It's some of it's just setting the groundwork for the next amazing thing.

00:26:44 Yeah. Well, let's, um, let's wrap up the show with something funny.

00:26:48 All right. Ready for a joke. All right. This is a joke by Jen gentleman, but called to our attention by Luke Morley. And it says, Jen says a programmer had a problem. He thought I know I'll solve it with async has problems now. period two, he got the race conditions, of course.

00:27:06 Yeah. Like

00:27:09 I get to so quick and simple. But yeah, there's a lot of variations on that joke, and they're all good. Yeah, most of them are good, I guess.

00:27:16 Anyway. Well, thanks again, Michael, for joining me today. And it's a great episode.

00:27:20 Yeah, as always.

