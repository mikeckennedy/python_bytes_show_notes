WEBVTT

00:00:00.001 --> 00:00:05.040
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.040 --> 00:00:09.680
This is episode 63, recorded January 31st, 2018.

00:00:09.680 --> 00:00:10.600
I'm Michael Kennedy.

00:00:10.600 --> 00:00:11.480
And I'm Brian Okken.

00:00:11.480 --> 00:00:13.720
And as always, we've got a bunch of stuff lined up for you.

00:00:13.720 --> 00:00:18.060
Before we get to it, let's just say quickly thank you to DigitalOcean for making this show possible.

00:00:18.060 --> 00:00:18.940
Thank you, DigitalOcean.

00:00:18.940 --> 00:00:22.420
You want to check out what they're offering, do.co slash Python.

00:00:22.420 --> 00:00:23.620
I'll tell you more about them later.

00:00:23.620 --> 00:00:26.860
Right now, I want to hear a little bit about what's coming in Python, Brian.

00:00:26.860 --> 00:00:31.540
We've already talked about data classes coming up in Python 3.7 already.

00:00:31.540 --> 00:00:38.520
And I was curious about, you know, exactly what that means to how it'll be to work with them and stuff.

00:00:38.520 --> 00:00:43.400
And Anthony Shaw put together a tour of how they work.

00:00:43.400 --> 00:00:48.680
And it's a pretty quick read, but it's a pretty good thorough understanding of it.

00:00:48.680 --> 00:00:52.320
I guess it's called A Brief Tour of Python 3.7 Data Classes.

00:00:52.320 --> 00:00:54.400
And there's some exciting things.

00:00:54.400 --> 00:01:03.660
Like, one of the things is there's a lot of the default magic methods that I'll put in place are like init and represent or repr.

00:01:03.660 --> 00:01:05.000
I don't know how you say that.

00:01:05.000 --> 00:01:08.420
And the dunder stir and dunder equal.

00:01:08.420 --> 00:01:15.280
The equal one is the thing that I think is really kind of cool is that it's going to compare all the attributes in order.

00:01:15.280 --> 00:01:24.420
So if all of the elements of your data class are equal to another object with the same elements, they will be equal.

00:01:24.420 --> 00:01:28.280
And that's not something that's normal by default.

00:01:28.280 --> 00:01:29.600
So that's good.

00:01:29.800 --> 00:01:31.680
Yeah, actually, that's really cool.

00:01:31.680 --> 00:01:36.640
And I wonder, I don't know, there's a couple things that are interesting to me here.

00:01:36.640 --> 00:01:47.900
One is the default value stuff, the way that you can configure the fields, the fact that there's type annotations coming as basically, are those required?

00:01:47.900 --> 00:01:50.400
It looks like they might be required, not just optional.

00:01:50.400 --> 00:01:58.500
They are required, but if you don't know what a type will be, there still is the, in the types, there's an any type that you can use?

00:01:58.500 --> 00:02:00.860
Yeah, so basically, that's like the void star or whatever.

00:02:00.860 --> 00:02:01.980
Like, I have no idea what this is.

00:02:01.980 --> 00:02:02.700
Just, it's a thing.

00:02:02.700 --> 00:02:04.300
I mean, this is Python.

00:02:04.300 --> 00:02:06.760
So a lot of times you want it to be generic.

00:02:06.760 --> 00:02:08.100
You don't know what the type's going to be.

00:02:08.100 --> 00:02:08.860
Yeah, yeah, that's right.

00:02:08.860 --> 00:02:09.300
That's right.

00:02:09.300 --> 00:02:10.100
It's pretty interesting.

00:02:10.240 --> 00:02:11.340
So I do like these.

00:02:11.340 --> 00:02:20.460
The other thought I had about these, looking through this, is I wonder if this means the name tuple is less cool these days.

00:02:20.460 --> 00:02:21.020
What do you mean?

00:02:21.020 --> 00:02:32.680
Well, one of the things I think that's nice about the name tuple is you can basically create a type, and you say it has these fields, and then you have sort of typed access to it.

00:02:32.680 --> 00:02:37.260
In the editors, you hit dot, and you get a dropdown of all the available elements of that thing.

00:02:37.720 --> 00:02:40.680
You can make it read-only, which is potentially nice.

00:02:40.680 --> 00:02:41.760
What else?

00:02:41.760 --> 00:02:43.780
It has a nice string representation.

00:02:43.780 --> 00:02:46.380
It has a nice hash and equals operator, right?

00:02:46.380 --> 00:02:47.320
All those types of things.

00:02:47.320 --> 00:02:49.400
Every one of those comes in data classes.

00:02:49.400 --> 00:02:56.240
And if you put a frozen on the data class attribute to say, actually, this is read-only, then it also implements the hashing.

00:02:56.240 --> 00:02:58.360
It has the immutability feature.

00:02:58.360 --> 00:03:04.960
Like, once it is created, it looks like it is the sort of equivalent of a name tuple.

00:03:05.400 --> 00:03:09.320
But it's richer in the sense that you can have, like, default-generated values.

00:03:09.320 --> 00:03:11.060
It has...

00:03:11.060 --> 00:03:15.400
It just seems a little richer than a name tuple, but its usage is pretty much the same.

00:03:15.400 --> 00:03:18.340
I think in my case, I probably will use it.

00:03:18.340 --> 00:03:20.980
I'll try to use it more to see how I like it.

00:03:20.980 --> 00:03:24.460
But, I mean, right now, I use name tuples quite a bit, and they're...

00:03:24.460 --> 00:03:25.500
Yeah, they're very...

00:03:25.500 --> 00:03:26.600
They're very terse.

00:03:26.600 --> 00:03:29.240
There's, you know, a couple lines of code, and you've got a new type.

00:03:29.340 --> 00:03:36.040
Yeah, the one thing I do see here is, like, with name tuples, you can literally, on one line, have a type that takes six arguments.

00:03:36.040 --> 00:03:39.420
Whereas this one, you know, it's certainly more verbose.

00:03:39.420 --> 00:03:47.160
But once it's defined, I feel like, basically, the use case is, like, this is a super set of name tuples, unless I'm missing something.

00:03:47.320 --> 00:03:53.560
Yeah, I definitely think in the use case, a lot of places where name tuples are being used, data classes will be used instead.

00:03:53.560 --> 00:03:58.520
It'd be interesting to see if there's any different performance for data classes versus regular classes.

00:03:58.520 --> 00:04:00.220
I think you can say use slots.

00:04:00.220 --> 00:04:01.000
Is that possible?

00:04:01.000 --> 00:04:02.660
I think that might be a thing.

00:04:02.660 --> 00:04:03.440
That, I'm not sure.

00:04:03.440 --> 00:04:10.060
Anyway, if you can do that, that would actually have a really interesting impact as well, because that would probably use less memory than name tuples.

00:04:10.060 --> 00:04:12.280
At least my testing has shown that it does.

00:04:12.280 --> 00:04:16.780
Well, I'm sure that there will be somebody that goes out and does some performance analysis.

00:04:17.160 --> 00:04:17.580
Of course.

00:04:17.580 --> 00:04:18.420
Give us that answer.

00:04:18.420 --> 00:04:21.560
Yeah, it's a call to the audience, indeed.

00:04:21.560 --> 00:04:22.600
Very, very cool.

00:04:22.600 --> 00:04:24.520
So these are coming, and that's pretty neat.

00:04:24.520 --> 00:04:27.000
I have another piece of news for you related to this.

00:04:27.000 --> 00:04:27.320
Okay.

00:04:27.320 --> 00:04:37.220
So Python 3.7, development on it is, like, sort of frozen in the sense that it's now out for testing and for usage, but no new features are being added to it.

00:04:37.220 --> 00:04:38.240
So it's kind of frozen.

00:04:38.240 --> 00:04:40.540
And Python 3.8 development started yesterday.

00:04:40.540 --> 00:04:40.900
Wow.

00:04:40.900 --> 00:04:46.040
Yeah, so I haven't started testing with 3.7 yet, or doing any of that.

00:04:46.300 --> 00:04:47.900
Have you used it at all yet?

00:04:47.900 --> 00:04:50.460
No, I've thought about it, but I haven't done it now.

00:04:50.460 --> 00:04:58.240
Yeah, definitely something I want to get started on here pretty soon, because I think it's due to drop in, like, June or something like that.

00:04:58.300 --> 00:05:04.000
Yeah, it's in, like, a trial period to make sure the world doesn't break when it gets released, because could you imagine the pressure?

00:05:04.000 --> 00:05:11.000
But, yeah, it's supposed to officially come out in June, but it's kind of gone into its testing mode, which is pretty cool.

00:05:11.460 --> 00:05:17.920
So if I ask you, what was the most popular database in terms of deployments, what database would you guess?

00:05:17.920 --> 00:05:19.860
Oh, I've fallen for this before.

00:05:19.860 --> 00:05:21.480
I'm going to answer Excel.

00:05:21.480 --> 00:05:22.020
Excel.

00:05:22.020 --> 00:05:23.800
Is that actually, you know, I don't know.

00:05:23.800 --> 00:05:28.120
This one that I'm about to say, it was very likely to give even Excel a run for the money.

00:05:28.360 --> 00:05:31.440
So everybody who has Python has SQLite, right?

00:05:31.440 --> 00:05:32.460
It's baked in.

00:05:32.460 --> 00:05:36.080
There's a whole bunch of things that are interesting about SQLite.

00:05:36.080 --> 00:05:38.380
So it's like an in-process database.

00:05:38.380 --> 00:05:50.240
If you want to do something relational, say, with, like, SQLAlchemy or something, but you just want to ship some, a little app, you don't want to deal with, like, a client-server model, SQLite is so super nice for that, right?

00:05:50.240 --> 00:05:51.460
You just have, like, a little data file.

00:05:51.460 --> 00:06:05.260
And I think we maybe talked about this a little bit before in a couple shows back, but one of the listeners sent in this thing, this series from Carnegie Mellon University called the Databasology Lectures.

00:06:05.900 --> 00:06:10.960
So there's a bunch of databases covered there, and there are actually quite a few interesting ones.

00:06:10.960 --> 00:06:20.020
And the idea is these are, like, hour, hour and a half long academic lectures by the creators of various databases about the internals of how they work.

00:06:20.020 --> 00:06:25.840
And I think it's more or less like a CS sort of either speaker series or actually a course.

00:06:25.840 --> 00:06:29.780
I'm not sure, but they got a bunch of luminary folks to come and speak about it.

00:06:29.780 --> 00:06:31.260
And it's pretty cool.

00:06:31.260 --> 00:06:32.940
So they have, like, the guy.

00:06:32.940 --> 00:06:35.300
That sounds like an exciting date night.

00:06:35.300 --> 00:06:35.840
Oh, yeah.

00:06:36.080 --> 00:06:38.620
Yeah, my wife was pretty excited when I suggested that.

00:06:38.620 --> 00:06:38.820
No.

00:06:38.820 --> 00:06:44.800
So there's WiredTiger, which became the foundation of the storage engine of MongoDB.

00:06:44.800 --> 00:06:47.180
They had that before it became part of Mongo.

00:06:47.180 --> 00:06:47.700
Okay.

00:06:47.800 --> 00:06:53.180
The one that I wanted to call out is the one by Richard Hipp, who is the creator of SQLite.

00:06:53.180 --> 00:06:58.080
And it's like this deep look inside the architecture and tradeoffs and design decisions of SQLite.

00:06:58.080 --> 00:07:06.580
And so if you're interested in databases, you're interested in how SQLite works, there's a bunch of optimizations and tradeoffs you can make around, like, durability versus performance.

00:07:06.940 --> 00:07:09.500
There's a bunch of sort of deep dive stuff into here.

00:07:09.720 --> 00:07:11.760
So I thought that was pretty cool to highlight.

00:07:11.760 --> 00:07:13.060
I'll definitely check that out.

00:07:13.060 --> 00:07:16.640
I also noticed that they've got even SAP in Oracle.

00:07:16.640 --> 00:07:17.640
That'd be interesting.

00:07:17.640 --> 00:07:18.060
Yeah.

00:07:18.060 --> 00:07:19.760
Something to do with Berkeley DB in there as well.

00:07:19.760 --> 00:07:20.860
So, yeah, it's quite cool.

00:07:21.960 --> 00:07:25.360
Yeah, but there's just so much I'm not really sure I want to try to cover it.

00:07:25.360 --> 00:07:40.200
But if you want to look inside of, like, how do the B-trees map to disk and how do they deal with, like, power failure, transactional durability, and all that kind of stuff, you want to see a deep look inside of that for databases in general, SQLite in particular, you check it out there.

00:07:40.200 --> 00:07:48.140
I guess one, just as a teaser, one interesting fact that came out of there is SQLite is shipped as a single C file.

00:07:48.140 --> 00:07:49.660
Yeah, that's cool.

00:07:49.660 --> 00:07:51.340
I don't know how, like, two million lines?

00:07:51.420 --> 00:07:53.700
I don't know, like, some insane number of lines.

00:07:53.700 --> 00:07:55.660
They don't develop it as a single.

00:07:55.660 --> 00:07:56.440
No.

00:07:56.440 --> 00:08:08.040
No, there's some process, some mechanism that, like, detangles all the, you know, include statements and the various compile orders and all of that stuff.

00:08:08.040 --> 00:08:11.380
And it, like, generates this one huge file with, like, no dependencies.

00:08:11.380 --> 00:08:15.160
But it's pretty wild to think of such a program as created that way.

00:08:15.160 --> 00:08:18.340
It's interesting that it's intentionally no dependencies.

00:08:18.340 --> 00:08:21.320
The whole thing is a little bit unusual.

00:08:21.320 --> 00:08:24.240
The way that the guy has created it and run it.

00:08:24.240 --> 00:08:27.340
Like, instead of, he was like, well, open source is good.

00:08:27.340 --> 00:08:30.480
But actually, I just want to make it like nobody.

00:08:30.480 --> 00:08:33.300
This is a thing that just is the world.

00:08:33.300 --> 00:08:37.880
And so he made it, put it out there under common domain or what's that called?

00:08:38.000 --> 00:08:38.320
Anyway.

00:08:38.320 --> 00:08:40.580
Where you just say, like, it belongs to the world.

00:08:40.580 --> 00:08:42.980
I relinquish all ownership of this thing.

00:08:42.980 --> 00:08:44.520
It is just now public domain.

00:08:44.520 --> 00:08:45.380
Public domain.

00:08:45.380 --> 00:08:46.000
Yeah.

00:08:46.000 --> 00:08:47.220
So it's pretty interesting.

00:08:47.220 --> 00:08:47.880
Yeah, it is.

00:08:47.880 --> 00:08:49.540
Do you know what else is interesting?

00:08:49.540 --> 00:08:51.780
Testing your code before you take down the system?

00:08:51.780 --> 00:08:54.460
Or you charge a credit card and you didn't want to?

00:08:54.800 --> 00:08:55.160
Yeah.

00:08:55.160 --> 00:08:57.480
Did we get this from a listener?

00:08:57.480 --> 00:08:58.440
I can't remember.

00:08:58.440 --> 00:08:59.940
Yeah, this definitely came from a listener.

00:08:59.940 --> 00:09:01.340
I can't remember who.

00:09:01.340 --> 00:09:04.180
Maybe I'll pull that up while you're having a look.

00:09:04.180 --> 00:09:04.540
Okay.

00:09:04.540 --> 00:09:08.580
Well, this is a project called Dryable.

00:09:08.580 --> 00:09:11.480
A useful dry run decorator for Python.

00:09:12.300 --> 00:09:21.420
And the idea is that there's some times where you want to run your entire application, but there's pieces of it that you don't want to run all the time.

00:09:21.420 --> 00:09:33.500
Like in their example, they've got, if you're accessing an outside database with requests or something like that, you can turn that off during your dry runs.

00:09:33.500 --> 00:09:36.080
And I really like how generic this is.

00:09:36.280 --> 00:09:42.680
Basically, you put a decorator, it's a dryable decorator you put on top of a function.

00:09:42.680 --> 00:09:52.400
And then when you set the dryable state to true in your code, those functions just don't do anything.

00:09:52.400 --> 00:09:57.920
And then they also have the option of specifying a default return value.

00:09:57.920 --> 00:10:07.560
So during your dry runs, if the function that you're turning off is supposed to return something or else the rest of your code is just going to break, you can specify that there.

00:10:07.560 --> 00:10:13.140
And for testing certain systems, I think this is an awesome idea.

00:10:13.140 --> 00:10:14.160
And it's pretty cool.

00:10:14.160 --> 00:10:15.200
It's pretty easy to start.

00:10:15.200 --> 00:10:27.120
It's almost like if I wanted to set up the mocking story for my code by using decorators, and I could run it just even outside of a test framework, like what would that look like?

00:10:27.120 --> 00:10:28.680
It looks like this dryable thing, right?

00:10:28.680 --> 00:10:32.140
The intent, I think, is to be able to just leave this stuff in your code.

00:10:32.140 --> 00:10:34.600
So it's a very minimal impact.

00:10:34.600 --> 00:10:40.540
And then you can just, if you want, you can just leave it there so you can always be able to do dry runs or something.

00:10:40.540 --> 00:10:40.800
Yeah.

00:10:40.800 --> 00:10:44.040
In your test code, you just say dryable.set true.

00:10:44.040 --> 00:10:46.180
And then it just goes in the hood.

00:10:46.180 --> 00:10:51.780
So one of the things I was wondering about when I saw this, I agree that it's cool and I definitely like it.

00:10:51.780 --> 00:10:57.060
But one of the things that I was wondering is like, we have mocking stuff.

00:10:57.060 --> 00:10:59.780
And these other mechanisms for stubbing out stuff.

00:10:59.780 --> 00:11:03.920
Like, where do you see this fitting in versus not?

00:11:04.260 --> 00:11:13.020
A lot of times people, and I agree, mocking and monkey patching is often used for testing stuff.

00:11:13.020 --> 00:11:21.060
But like, I don't know, for example, you could put together, we were doing different GUI applications we were showing the other day.

00:11:21.060 --> 00:11:32.400
If you wanted to attach a GUI to a database system, you could have a mocked up database set to just let people play with user interface.

00:11:32.400 --> 00:11:34.440
And that's not really a testing thing.

00:11:34.440 --> 00:11:38.980
It's you're just using something with some dummy data in the back end.

00:11:38.980 --> 00:11:40.220
Something like that would work.

00:11:40.260 --> 00:11:47.640
I see like maybe some, if you're trying to build out the UI and you don't have the data yet, it would be really nice to just go and here's some data to work with until we get there.

00:11:47.640 --> 00:11:48.980
Yeah, yeah, definitely.

00:11:48.980 --> 00:11:49.580
Yeah, okay.

00:11:49.580 --> 00:11:50.640
That's pretty cool.

00:11:50.640 --> 00:11:53.680
So I told you about DigitalOcean at the top of the show.

00:11:53.680 --> 00:11:55.900
And I'll give you a little more details.

00:11:55.900 --> 00:11:58.560
They actually have some super exciting news.

00:11:58.560 --> 00:12:01.160
Maybe a week, week and a half ago, two weeks ago, I can't remember.

00:12:01.540 --> 00:12:07.060
But I actually spent a lot of time upgrading a bunch of servers because DigitalOcean is awesome.

00:12:07.060 --> 00:12:08.600
They actually went and said, you know what?

00:12:08.600 --> 00:12:13.180
All that money that you're paying for the servers, we're just going to double all the things.

00:12:13.180 --> 00:12:17.620
You have one gig of RAM and you're paying us $10 a month.

00:12:17.620 --> 00:12:19.720
All right, now you get two gigs of RAM.

00:12:19.720 --> 00:12:22.780
You have one CPU and you're paying a certain amount.

00:12:22.780 --> 00:12:24.720
Now you get two CPUs or two to four.

00:12:24.720 --> 00:12:30.780
So they basically, not everything, CPUs not quite as much, but certainly, you know, disk size with SSDs,

00:12:31.480 --> 00:12:36.340
the RAM, to some extent, the CPUs, they're basically doubling everything they offer.

00:12:36.340 --> 00:12:41.600
So now you can get like a server with a gig of RAM and a CPU and 30 gigs, 50?

00:12:41.600 --> 00:12:44.820
I don't know, 50 gigs of SSD for $5 a month.

00:12:44.820 --> 00:12:45.520
How insane is that?

00:12:45.520 --> 00:12:45.820
Wow.

00:12:45.820 --> 00:12:47.340
Yeah, exactly.

00:12:47.340 --> 00:12:52.140
So anyway, it's really cool that the new pricing that they put out.

00:12:52.140 --> 00:12:56.340
So definitely drop over do.co slash Python and check that out.

00:12:56.340 --> 00:13:01.080
Because if you thought it was good before, like literally they doubled most of the things for most of the tiers.

00:13:01.300 --> 00:13:01.660
That's great.

00:13:01.660 --> 00:13:01.960
Yeah.

00:13:01.960 --> 00:13:02.720
So really nice.

00:13:02.720 --> 00:13:09.820
And Python Bytes now delivers itself just a tiny bit faster and has, you know, a few more gigs of RAM to do it with.

00:13:09.820 --> 00:13:12.040
Well, that's good because our listeners are going up.

00:13:12.040 --> 00:13:12.340
Right.

00:13:12.340 --> 00:13:13.540
We got to keep up with the demand.

00:13:13.540 --> 00:13:14.220
Thank you, everyone.

00:13:15.660 --> 00:13:19.640
Speaking of demand, we got actually a lot of listener feedback for the show.

00:13:19.640 --> 00:13:21.080
And I think that that was really great.

00:13:21.080 --> 00:13:24.680
Like, please keep the recommendations coming on Twitter and email and so on.

00:13:24.680 --> 00:13:27.480
Have you noticed I've been on this gooey kick lately, Brian?

00:13:27.480 --> 00:13:29.120
We kind of knew this was going to happen.

00:13:29.120 --> 00:13:31.840
We claimed that there weren't any good solutions.

00:13:31.840 --> 00:13:33.380
And then people told us.

00:13:33.380 --> 00:13:33.760
Yeah.

00:13:33.760 --> 00:13:37.320
And I still mostly stand by that.

00:13:37.320 --> 00:13:39.740
But there are people doing really cool things.

00:13:39.740 --> 00:13:41.920
And I just want to highlight them.

00:13:42.060 --> 00:13:46.060
So a guy named Victor Domingos said, hey, look, I'm not really much of a programmer.

00:13:46.060 --> 00:13:48.320
I kind of like an engineer or something.

00:13:48.320 --> 00:13:51.680
You know, he was doing something else, but he needed to do some program to build this thing.

00:13:51.680 --> 00:13:51.900
Right.

00:13:51.900 --> 00:13:53.000
But I disagree with that.

00:13:53.000 --> 00:13:55.140
Steve, I think he's quite a programmer building these things.

00:13:55.500 --> 00:14:01.620
So he sent us three examples of some apps that he built in Python.

00:14:01.620 --> 00:14:02.620
And I don't know.

00:14:02.620 --> 00:14:04.260
Do you click those and pull them up, Brian?

00:14:04.260 --> 00:14:04.980
See the pictures?

00:14:04.980 --> 00:14:06.520
I'm trying to pull up one now.

00:14:06.520 --> 00:14:06.860
Yeah.

00:14:06.860 --> 00:14:09.180
So what's really nice is, like, it's all screenshots.

00:14:09.180 --> 00:14:13.080
Which, by the way, if you have a UI framework and you want people to admire your UI framework,

00:14:13.080 --> 00:14:13.720
screenshots.

00:14:13.720 --> 00:14:14.380
Yes.

00:14:14.380 --> 00:14:15.520
Pictures, please.

00:14:15.520 --> 00:14:19.320
Just describing how awesome it is in text doesn't actually make it awesome.

00:14:19.320 --> 00:14:23.320
But these look like rich, interesting applications.

00:14:23.540 --> 00:14:29.420
And I definitely think what he's doing here is quite neat, especially the first and the

00:14:29.420 --> 00:14:30.280
second one that we've linked.

00:14:30.280 --> 00:14:31.100
So he linked to three.

00:14:31.100 --> 00:14:32.060
This is crazy.

00:14:32.060 --> 00:14:33.460
PT Tracking is both.

00:14:33.460 --> 00:14:36.820
It's got both the desktop application, which looks nice.

00:14:36.820 --> 00:14:37.800
And an iPhone version.

00:14:37.800 --> 00:14:38.980
And an iPhone version.

00:14:38.980 --> 00:14:41.960
Yeah, it's pretty interesting.

00:14:41.960 --> 00:14:45.460
I mean, like I said, this guy built some really powerful stuff, right?

00:14:45.460 --> 00:14:45.860
Yeah.

00:14:45.860 --> 00:14:46.960
Looks great.

00:14:46.960 --> 00:14:48.980
What's even better is it's open source, right?

00:14:48.980 --> 00:14:50.680
This is TK Enter code.

00:14:50.680 --> 00:14:53.000
And he's like, look, you're giving TK Enter a bad rap.

00:14:53.000 --> 00:14:57.640
This is actually could be more nice looking if it's built the right way.

00:14:57.640 --> 00:15:02.460
And by the way, here's three open source apps I built that you can check out with screenshots,

00:15:02.460 --> 00:15:04.200
by the way, which is very nice.

00:15:04.200 --> 00:15:06.320
So I just want to highlight that.

00:15:06.320 --> 00:15:07.980
Say thank you, Victor, for sending these in.

00:15:07.980 --> 00:15:10.560
Share the links he sent because they are pretty inspiring.

00:15:10.560 --> 00:15:12.080
And they're working examples.

00:15:12.080 --> 00:15:15.780
I did not know you could make an iPhone app with TK Enter.

00:15:15.780 --> 00:15:17.140
I still don't even know how that works.

00:15:17.140 --> 00:15:17.720
I don't either.

00:15:17.720 --> 00:15:18.680
Maybe I'll try this out.

00:15:18.800 --> 00:15:20.180
Maybe there's some kind of PEP for it.

00:15:20.180 --> 00:15:21.060
Like a pep.

00:15:21.060 --> 00:15:22.140
What is that?

00:15:22.140 --> 00:15:24.580
Pep 7.225.

00:15:24.580 --> 00:15:28.880
Make Python build desktop or mobile apps on iPhone.

00:15:28.880 --> 00:15:29.500
Is that what it is?

00:15:29.500 --> 00:15:32.460
What if there's like a way you could figure this out that we could settle this debate?

00:15:32.640 --> 00:15:33.580
There's Pep Explorer.

00:15:33.580 --> 00:15:37.260
And it is by Anthony again.

00:15:37.260 --> 00:15:41.560
Anthony Shah that we gave him credit on the first article that we talked about.

00:15:41.560 --> 00:15:43.220
But Pep Explorer.

00:15:43.220 --> 00:15:47.820
Explore Python enhancements with a web interface.

00:15:47.820 --> 00:15:49.000
It's got a search function.

00:15:49.000 --> 00:15:51.140
And you can look at all sorts of stuff.

00:15:51.260 --> 00:15:52.840
There's even in the status.

00:15:52.840 --> 00:15:54.720
I don't quite get all the status ones.

00:15:54.720 --> 00:15:57.400
But there's an April Fool status, which I didn't know about.

00:15:57.400 --> 00:15:58.480
That's pretty awesome.

00:15:58.480 --> 00:16:02.320
In 2009, they pretended that BDFL was retiring.

00:16:02.320 --> 00:16:04.140
It probably just scared people, actually.

00:16:04.140 --> 00:16:05.040
That's really what happened.

00:16:05.040 --> 00:16:05.720
Yeah.

00:16:05.720 --> 00:16:09.440
So not only do you find the peps that were accepted, but you can search and say, show me

00:16:09.440 --> 00:16:12.020
the ones that were either deferred or rejected.

00:16:12.020 --> 00:16:15.820
You probably will learn a lot of interesting stuff by seeing what is rejected and why.

00:16:15.820 --> 00:16:16.340
Yeah.

00:16:16.880 --> 00:16:19.660
And then the ones that are still in draft form and everything.

00:16:19.660 --> 00:16:21.700
One of the things I want to...

00:16:21.700 --> 00:16:23.780
I had already picked this, and then I was playing with it.

00:16:23.780 --> 00:16:30.460
Because the data classes that we talked about earlier, I cannot find on this little cool

00:16:30.460 --> 00:16:31.100
tool here.

00:16:31.100 --> 00:16:34.920
So I'm not sure what's going on with the 3.7 stuff.

00:16:34.920 --> 00:16:36.640
Maybe 3.7 just isn't in here yet.

00:16:36.640 --> 00:16:37.140
Yeah, maybe.

00:16:37.140 --> 00:16:41.000
And this is a search engine sort of thing with data backed on GitHub, right?

00:16:41.000 --> 00:16:45.260
And so if anybody wants to say, oh, you're missing this one, PR.

00:16:45.540 --> 00:16:45.700
Yeah.

00:16:45.700 --> 00:16:48.960
So nice people do fix it and do a PR.

00:16:48.960 --> 00:16:53.240
I just am going to call them out on Python bytes and say it's broken.

00:16:53.240 --> 00:16:54.480
This one doesn't work.

00:16:54.480 --> 00:16:55.100
It's not there.

00:16:55.100 --> 00:16:57.980
And I can't do a PR right now because I'm recording a podcast.

00:16:57.980 --> 00:16:58.920
Yeah, definitely.

00:16:58.920 --> 00:16:59.520
Yeah.

00:16:59.520 --> 00:16:59.720
Yeah.

00:16:59.720 --> 00:17:00.420
Nice work, Anthony.

00:17:00.420 --> 00:17:02.680
You know, enough to get a double feature.

00:17:02.680 --> 00:17:03.380
Very, very cool.

00:17:03.380 --> 00:17:07.560
So I want to round this out with just a little bit more UI stuff.

00:17:07.560 --> 00:17:12.400
If I'm going to show you all those pictures of cool apps that Victor built, the other thing

00:17:12.400 --> 00:17:16.280
I want to sort of pair with that is a TK Enter tutorial from this.

00:17:16.280 --> 00:17:19.460
We got on Twitter as well from at like geeks.

00:17:20.140 --> 00:17:23.960
And it's basically here's how you go through TK Enter and create your first GUI application.

00:17:23.960 --> 00:17:27.440
You don't really build anything too complicated or too advanced.

00:17:27.440 --> 00:17:32.000
It's more like let's put some labels and buttons and combo boxes and progress bars on and see

00:17:32.000 --> 00:17:32.820
what that looks like.

00:17:32.820 --> 00:17:33.000
Right.

00:17:33.000 --> 00:17:35.660
It's still like a decent distance from what Victor had built.

00:17:36.220 --> 00:17:41.620
But if you are inspired by topic four, maybe topic six can help you take some steps in

00:17:41.620 --> 00:17:42.080
that direction.

00:17:42.080 --> 00:17:42.400
Yeah.

00:17:42.400 --> 00:17:43.100
Okay.

00:17:43.100 --> 00:17:43.440
Yeah.

00:17:43.440 --> 00:17:44.580
It's pretty, pretty comprehensive.

00:17:44.580 --> 00:17:48.520
Like it really covers most of the widgets and how to use them and stuff like that in Python.

00:17:48.520 --> 00:17:50.160
So yeah, pretty cool.

00:17:50.160 --> 00:17:55.380
This may, may be the final thing we say about it, or maybe my own news actually will cover

00:17:55.380 --> 00:17:56.200
one more GUI thing.

00:17:56.200 --> 00:17:56.520
Yeah.

00:17:56.520 --> 00:18:00.880
I think that we have, we'll probably hear some more GUI things coming up in the future.

00:18:00.880 --> 00:18:01.240
Yeah.

00:18:01.240 --> 00:18:01.480
Yeah.

00:18:01.480 --> 00:18:02.340
I'm okay with that.

00:18:02.340 --> 00:18:02.820
I am too.

00:18:02.820 --> 00:18:03.760
And I think this is great.

00:18:03.860 --> 00:18:07.340
Like I think the other area that's looking really strong, the more that I talk to people

00:18:07.340 --> 00:18:09.200
about this is WX Python.

00:18:09.200 --> 00:18:09.800
Yeah.

00:18:09.800 --> 00:18:15.440
What I didn't realize is WX Python has a project called WX Python Phoenix, where it was reborn

00:18:15.440 --> 00:18:17.340
from the ashes of WX Python.

00:18:17.340 --> 00:18:19.320
And there's like two versions of it, sort of.

00:18:19.320 --> 00:18:23.660
So there's like a more modern version that I like conflated with the older version.

00:18:23.660 --> 00:18:24.200
Okay.

00:18:24.200 --> 00:18:25.360
Didn't know about that.

00:18:25.360 --> 00:18:26.040
Yeah, I didn't either.

00:18:26.040 --> 00:18:29.620
But the thing I'll tell you about in a second, dude, how about you?

00:18:29.620 --> 00:18:32.260
Any other personal news you got going on?

00:18:32.260 --> 00:18:32.820
Anything cool?

00:18:32.820 --> 00:18:33.560
Not right now.

00:18:33.740 --> 00:18:34.000
Nice.

00:18:34.000 --> 00:18:38.760
For me, this is like the week of the recording, the recording.

00:18:38.760 --> 00:18:43.880
So I'm recording six podcasts, talk Python, Python bytes.

00:18:43.880 --> 00:18:47.520
I was a guest on a podcast and also a webcast.

00:18:47.520 --> 00:18:54.280
So I did like an hour and a half webcast where I rebuilt PyPI in MongoDB, which was really fun.

00:18:54.280 --> 00:18:55.720
Wow.

00:18:55.840 --> 00:18:57.460
So it was really, really cool.

00:18:57.460 --> 00:19:02.920
And I even created this fake database with like, you know, hundreds of thousands of records to make it act real.

00:19:02.920 --> 00:19:06.780
It took like 15 minutes for the program to actually generate the database, but that was okay.

00:19:06.780 --> 00:19:07.720
It was still good.

00:19:08.680 --> 00:19:10.020
Anyway, so that was fun.

00:19:10.020 --> 00:19:10.860
I'll put a link in there.

00:19:10.860 --> 00:19:17.660
This weekend, some friends were over and they're like, hey, I'm trying to build this little script and it's almost working.

00:19:17.660 --> 00:19:18.300
Can you help me?

00:19:18.380 --> 00:19:20.180
And I'm like, oh, this is a cool little CLI.

00:19:20.180 --> 00:19:22.220
But do you know what would be better is if it was a GUI.

00:19:24.000 --> 00:19:25.020
It's like, yeah, I know.

00:19:25.020 --> 00:19:26.600
You can't do that in Python, Kane.

00:19:26.600 --> 00:19:27.060
You're like, yeah.

00:19:27.060 --> 00:19:28.040
Hold on.

00:19:28.040 --> 00:19:31.660
Like, let's pip install GUI, G-O-O-E-Y, the thing we already talked about.

00:19:31.660 --> 00:19:33.240
And that thing is slick.

00:19:33.240 --> 00:19:34.220
Let me tell you.

00:19:34.220 --> 00:19:38.000
Basically, you create one of these argument parser things from GUI.

00:19:38.000 --> 00:19:41.560
You say it takes these parameters and then you say get the parameters.

00:19:41.560 --> 00:19:46.160
And that actually shows the UI with all the widgets filled out and the names and the types.

00:19:46.160 --> 00:19:47.320
Like this one is a combo box.

00:19:47.320 --> 00:19:48.200
It has these three items.

00:19:48.200 --> 00:19:49.280
Like that's your argument.

00:19:49.280 --> 00:19:50.700
Then it becomes just a combo box.

00:19:50.700 --> 00:19:52.740
It really is like just a few lines of code.

00:19:52.740 --> 00:19:53.160
It's awesome.

00:19:53.340 --> 00:19:57.160
We've been getting a lot of people that have been using GUI show us their screenshots of

00:19:57.160 --> 00:19:59.880
something they made with it in just a few minutes.

00:19:59.880 --> 00:20:00.940
And that's pretty awesome.

00:20:00.940 --> 00:20:04.400
I really think the bang for the buck is quite high on GUI right now.

00:20:04.400 --> 00:20:05.820
And that's WX Python, by the way.

00:20:05.820 --> 00:20:09.480
Also, a quick announcement on the courses.

00:20:09.480 --> 00:20:13.320
I have a bunch of courses coming up and more of them are getting planned all the time.

00:20:13.320 --> 00:20:13.940
It's really fun.

00:20:13.940 --> 00:20:19.620
But I just launched a sort of business option team purchase page.

00:20:19.620 --> 00:20:22.860
All the bundles and the courses and stuff at Talk Python Training.

00:20:23.180 --> 00:20:24.860
Now have a buy this for your team.

00:20:24.860 --> 00:20:31.340
And if you pick like however many people are on your team, it'll automatically apply like enterprise discounts and all that kind of stuff.

00:20:31.340 --> 00:20:35.300
So if you want to go in there and say buy this for 10 people, it's all totally self-service now.

00:20:35.300 --> 00:20:36.020
Wow, that's great.

00:20:36.020 --> 00:20:36.280
Yeah.

00:20:36.360 --> 00:20:40.140
So trying to make it easy for people to get more of that Python knowledge.

00:20:40.140 --> 00:20:40.700
Yeah.

00:20:40.700 --> 00:20:42.120
All right.

00:20:42.120 --> 00:20:44.820
Well, thanks, Brian, for finding all these things and sharing with me.

00:20:44.820 --> 00:20:45.080
Yeah.

00:20:45.080 --> 00:20:45.460
Thank you.

00:20:45.460 --> 00:20:45.760
Yeah.

00:20:45.760 --> 00:20:46.100
Bye.

00:20:47.420 --> 00:20:49.140
Thank you for listening to Python Bytes.

00:20:49.140 --> 00:20:51.720
Follow the show on Twitter via at Python Bytes.

00:20:51.720 --> 00:20:54.600
That's Python Bytes as in B-Y-T-E-S.

00:20:54.600 --> 00:20:58.040
And get the full show notes at pythonbytes.fm.

00:20:58.040 --> 00:21:02.360
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:21:02.360 --> 00:21:05.060
We're always on the lookout for sharing something cool.

00:21:05.060 --> 00:21:08.460
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:21:08.700 --> 00:21:12.080
Thank you for listening and sharing this podcast with your friends and colleagues.

