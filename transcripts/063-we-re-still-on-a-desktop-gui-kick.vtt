
00:00:00.000 --> 00:00:19.280
Hello and welcome to python bites where we deliver python news and headlines directly to your earbuds. This is episode 63 recorded january 31st 2018 i'm michael kennedy and i'm brian and as always we got a bunch of stuff lined up for you before we get to it let's just say quickly thank you to digital ocean for making this show possible thank you to joshua


00:00:19.200 --> 00:00:22.620
I wanna check out what they're offering, do.co/python.


00:00:22.620 --> 00:00:23.800
I'll tell you more about them later.


00:00:23.800 --> 00:00:25.640
Right now, I wanna hear a little bit


00:00:25.640 --> 00:00:27.080
about what's coming in Python, Brian.


00:00:27.080 --> 00:00:29.200
- We've already talked about data classes


00:00:29.200 --> 00:00:32.300
coming up in Python 3.7 already.


00:00:32.300 --> 00:00:35.840
And I was curious about exactly what that means


00:00:35.840 --> 00:00:38.600
to how it'll be to work with them and stuff.


00:00:38.600 --> 00:00:43.480
And Anthony Shaw put together a tour of how they work,


00:00:43.480 --> 00:00:45.120
and it's a pretty quick read,


00:00:45.120 --> 00:00:49.000
but it's a pretty good thorough understanding of it.


00:00:49.000 --> 00:00:53.200
I guess it's called a brief tour of Python 3.7 data classes.


00:00:53.200 --> 00:00:54.500
And there's some exciting things.


00:00:54.500 --> 00:00:57.700
Like one of the things is there's a lot


00:00:57.700 --> 00:01:00.800
of the default magic methods I'll put in place


00:01:00.800 --> 00:01:04.200
are like init and represent or repper.


00:01:04.200 --> 00:01:05.400
I don't know how you say that.


00:01:05.400 --> 00:01:09.020
And the dunder stir and dunder equal.


00:01:09.020 --> 00:01:11.160
The equal one is the thing that I think


00:01:11.160 --> 00:01:13.840
is really kind of cool is that it's gonna compare


00:01:13.840 --> 00:01:15.440
all the attributes in order.


00:01:15.440 --> 00:01:19.440
So if all of the elements of your data class


00:01:19.440 --> 00:01:23.640
are equal to another object with the same elements,


00:01:23.640 --> 00:01:24.600
they will be equal.


00:01:24.600 --> 00:01:28.920
And that's not something that's normal by default.


00:01:28.920 --> 00:01:29.760
So that's good.


00:01:29.760 --> 00:01:31.960
- Yeah, actually, that's really cool.


00:01:31.960 --> 00:01:35.000
And I wonder, I don't know,


00:01:35.000 --> 00:01:36.760
there's a couple things that are interesting to me here.


00:01:36.760 --> 00:01:40.580
One is the default value stuff,


00:01:40.580 --> 00:01:42.640
the way that you configure the fields,


00:01:42.640 --> 00:01:47.040
The fact that there's type annotations coming as basically,


00:01:47.040 --> 00:01:48.240
are those required?


00:01:48.240 --> 00:01:50.680
It looks like they might be required, not just optional.


00:01:50.680 --> 00:01:52.880
- They are required, but if you don't know


00:01:52.880 --> 00:01:55.360
what a type will be, there still is the,


00:01:55.360 --> 00:01:58.680
in the types, there's an any type that you can use.


00:01:58.680 --> 00:02:00.560
- Yeah, so basically, that's like the void star,


00:02:00.560 --> 00:02:02.080
or whatever, like I have no idea what this is,


00:02:02.080 --> 00:02:03.440
just it's a thing.


00:02:03.440 --> 00:02:04.460
- Yeah, I mean, this is Python,


00:02:04.460 --> 00:02:07.040
so a lot of times you want it to be generic.


00:02:07.040 --> 00:02:08.200
You don't know what the type's gonna be.


00:02:08.200 --> 00:02:09.480
- Yeah, yeah, that's right, that's right.


00:02:09.480 --> 00:02:10.320
It's pretty interesting.


00:02:10.320 --> 00:02:11.400
So I do like these.


00:02:11.400 --> 00:02:14.440
The other thought I had about these, looking through this,


00:02:14.440 --> 00:02:17.700
is I wonder if this means the name tuple


00:02:17.700 --> 00:02:20.660
is less cool these days.


00:02:20.660 --> 00:02:21.500
- What do you mean?


00:02:21.500 --> 00:02:22.680
- Well, one of the things I think that's nice


00:02:22.680 --> 00:02:27.200
about the name tuple is you can basically create a type


00:02:27.200 --> 00:02:29.360
and you say it has these fields,


00:02:29.360 --> 00:02:32.760
and then you have sort of typed access to it.


00:02:32.760 --> 00:02:34.960
In the editors, you hit dot and you get a dropdown


00:02:34.960 --> 00:02:37.960
of all the available elements of that thing.


00:02:37.960 --> 00:02:41.360
You can make it read-only, which is potentially nice.


00:02:41.360 --> 00:02:45.440
what else? It has a nice string representation, has a nice hash and equals


00:02:45.440 --> 00:02:49.040
operator, right? All those types of things. Every one of those comes in data


00:02:49.040 --> 00:02:53.200
classes. And if you put a frozen on the data class attribute to say, actually,


00:02:53.200 --> 00:02:57.120
this is read only, then it also implements the hashing. It has the


00:02:57.120 --> 00:03:02.200
immutability feature like it. Once it is created, it looks like it is the sort of


00:03:02.200 --> 00:03:07.840
equivalent of a name tuple, but it's richer in the sense that you can have


00:03:07.840 --> 00:03:13.040
like default generated values, it has, it just seems a little richer than a named tuple,


00:03:13.040 --> 00:03:15.520
but it's the usage is pretty much the same.


00:03:15.520 --> 00:03:18.720
I think in my case, I probably will use it.


00:03:18.720 --> 00:03:21.160
I'll try to use it more to see how I like it.


00:03:21.160 --> 00:03:24.080
But I mean, right now I use named tuples quite a bit.


00:03:24.080 --> 00:03:26.800
And they're, yeah, they're very, they're very terse.


00:03:26.800 --> 00:03:29.320
There's, you know, a couple lines of code, and you've got a new type.


00:03:29.320 --> 00:03:33.400
Yeah, the one thing I do see here is like with named tuples, you can literally on one


00:03:33.400 --> 00:03:37.520
line have a type that it takes six arguments. Whereas this one,


00:03:37.520 --> 00:03:42.080
you know, it's certainly more verbose. But once it's defined,


00:03:42.080 --> 00:03:45.460
I feel like basically the use case is like this is a super


00:03:45.460 --> 00:03:47.200
set of named tuples unless I'm missing something.


00:03:47.200 --> 00:03:50.520
Yeah, definitely think in the use case, a lot of places where


00:03:50.520 --> 00:03:53.200
named tuples are being used, data classes will be used


00:03:53.200 --> 00:03:53.640
instead.


00:03:53.640 --> 00:03:55.880
It'd be interesting to see if there's any different


00:03:55.880 --> 00:03:59.120
performance for data classes versus regular classes. I think


00:03:59.120 --> 00:04:02.320
you can say use slots. Is that possible? I think that might be


00:04:02.320 --> 00:04:02.680
a thing.


00:04:02.720 --> 00:04:03.520
That I'm not sure.


00:04:03.520 --> 00:04:04.640
Anyway, if you can do that,


00:04:04.640 --> 00:04:07.280
that would actually have a real interesting impact as well,


00:04:07.280 --> 00:04:10.240
because that would probably use less memory than named tuples.


00:04:10.240 --> 00:04:12.360
At least my testing has shown that it does.


00:04:12.360 --> 00:04:14.840
Well, I'm sure that there will be somebody that goes out


00:04:14.840 --> 00:04:18.520
and does some performance analysis to give us that answer.


00:04:18.520 --> 00:04:21.680
Yeah, it's a call to the audience, indeed.


00:04:21.680 --> 00:04:24.560
Very cool. So these are coming, and that's pretty neat.


00:04:24.560 --> 00:04:27.040
I have another piece of news for you related to this.


00:04:27.040 --> 00:04:27.440
Okay.


00:04:27.440 --> 00:04:31.040
So Python 3.7, development on it is sort of frozen


00:04:31.040 --> 00:04:35.440
in the sense that it's now out for testing and for usage,


00:04:35.440 --> 00:04:37.200
but no new features are being added to it.


00:04:37.200 --> 00:04:38.320
So it's kind of frozen.


00:04:38.320 --> 00:04:40.640
And Python 3.8 development started yesterday.


00:04:40.640 --> 00:04:41.440
Wow.


00:04:41.440 --> 00:04:44.560
Yeah, so I haven't started testing with 3.7 yet,


00:04:44.560 --> 00:04:46.160
or doing any of that.


00:04:46.160 --> 00:04:48.000
Have you used it at all yet?


00:04:48.000 --> 00:04:50.720
No, I've thought about it, but I haven't done it now.


00:04:50.720 --> 00:04:54.400
Yeah, definitely something I want to get started on here pretty soon,


00:04:54.400 --> 00:04:58.240
because I think it's due to drop in June or something like that.


00:04:58.240 --> 00:05:02.440
Yeah, it's in like a trial period to make sure the world doesn't break when it gets released.


00:05:02.440 --> 00:05:04.440
Because could you imagine the pressure?


00:05:04.440 --> 00:05:07.840
But yeah, it's supposed to officially come out in June.


00:05:07.840 --> 00:05:11.240
But it's kind of, it got into its testing mode, which is pretty cool.


00:05:11.240 --> 00:05:16.440
So if I ask you what was the most popular database in terms of deployments,


00:05:16.440 --> 00:05:18.040
what database would you guess?


00:05:18.040 --> 00:05:21.540
Oh, I've fallen for this before. I'm going to answer Excel.


00:05:21.540 --> 00:05:25.140
Excel. Is that actually, you know, I don't know, this one that I'm about to say,


00:05:25.140 --> 00:05:28.260
it was very likely to give even Excel a run for the money.


00:05:28.260 --> 00:05:31.500
So everybody who has Python has SQLite, right?


00:05:31.500 --> 00:05:33.100
It's baked in.


00:05:33.100 --> 00:05:34.220
There's a whole bunch of things


00:05:34.220 --> 00:05:36.140
that are interesting about SQLite.


00:05:36.140 --> 00:05:38.600
So it's like an in-process database.


00:05:38.600 --> 00:05:40.180
If you want to do something relational,


00:05:40.180 --> 00:05:42.020
say with like SQLAlchemy or something,


00:05:42.020 --> 00:05:45.300
but you just want to ship a little app,


00:05:45.300 --> 00:05:47.420
you don't want to deal with like a client server model,


00:05:47.420 --> 00:05:50.260
SQLite is so super nice for that, right?


00:05:50.260 --> 00:05:52.380
You just have like a little data file.


00:05:52.380 --> 00:05:55.340
And I think we maybe talked about this a little bit before


00:05:55.340 --> 00:05:56.500
on a couple shows back,


00:05:56.500 --> 00:05:58.740
but one of the listeners sent in this thing,


00:05:58.740 --> 00:06:02.620
this series from Carnegie Mellon University


00:06:02.620 --> 00:06:06.120
called the Databaseology Lectures.


00:06:06.120 --> 00:06:08.180
So there's a bunch of databases covered there


00:06:08.180 --> 00:06:11.020
and there are actually quite a few interesting ones.


00:06:11.020 --> 00:06:12.700
And the idea is these are like hour,


00:06:12.700 --> 00:06:14.900
hour and a half long academic lectures


00:06:14.900 --> 00:06:18.260
by the creators of various databases


00:06:18.260 --> 00:06:20.100
about the internals of how they work.


00:06:20.100 --> 00:06:25.900
And I think it's more or less like a CS sort of either speaker series or actually a course.


00:06:25.900 --> 00:06:29.900
I'm not sure, but they got a bunch of luminary folks to come and speak about it.


00:06:29.900 --> 00:06:33.100
And it's pretty cool. So they have like the guy...


00:06:33.100 --> 00:06:35.300
That sounds like an exciting date night.


00:06:35.300 --> 00:06:39.100
Oh, yeah. Yeah, my wife was pretty excited when I suggested that. No.


00:06:39.100 --> 00:06:45.000
So there's Wired Tiger, which became the foundation of the storage engine of MongoDB.


00:06:45.000 --> 00:06:47.300
They had that before it became part of Mongo.


00:06:47.300 --> 00:06:47.800
Okay.


00:06:47.800 --> 00:06:50.800
The one that I wanted to call out is the one by Richard Hipp,


00:06:50.800 --> 00:06:53.300
who is the creator of SQLite.


00:06:53.300 --> 00:06:56.560
And it's like this deep look inside the architecture and trade-offs


00:06:56.560 --> 00:06:58.140
and design decisions of SQLite.


00:06:58.140 --> 00:07:00.860
And so if you're interested in databases,


00:07:00.860 --> 00:07:02.440
you're interested in how SQLite works,


00:07:02.440 --> 00:07:05.160
there's a bunch of optimizations and trade-offs you can make around


00:07:05.160 --> 00:07:06.860
like durability versus performance.


00:07:06.860 --> 00:07:09.580
There's a bunch of sort of deep dive stuff into here.


00:07:09.580 --> 00:07:11.920
So I thought that was pretty cool to highlight.


00:07:11.920 --> 00:07:13.080
I'll definitely check that out.


00:07:13.080 --> 00:07:16.920
I also noticed that they've got even SAP in Oracle.


00:07:16.920 --> 00:07:17.760
That'd be interesting.


00:07:17.760 --> 00:07:19.760
Yeah, something to do with Berkeley DB in there as well.


00:07:19.760 --> 00:07:21.760
So yeah, it's quite cool.


00:07:21.760 --> 00:07:25.300
Yeah, but there's so much I'm not really sure I want to try to cover.


00:07:25.300 --> 00:07:29.560
But if you want to look inside of like, how do the B-trees map disk


00:07:29.560 --> 00:07:33.480
and how do they deal with like power failure, transactional durability


00:07:33.480 --> 00:07:34.680
and all that kind of stuff,


00:07:34.680 --> 00:07:37.880
you want to see a deep look inside of that for databases in general,


00:07:37.880 --> 00:07:40.220
SQLite in particular, you check it out there.


00:07:40.220 --> 00:07:45.180
I guess one, just as a teaser, one interesting fact that came out of there is


00:07:45.180 --> 00:07:48.280
SQLite is shipped as a single C file.


00:07:48.280 --> 00:07:49.680
Yeah, that's cool.


00:07:49.680 --> 00:07:53.780
I don't know how, like, two million lines? I don't know, like some insane number of lines.


00:07:53.780 --> 00:07:55.980
They don't develop it as a single.


00:07:55.980 --> 00:08:04.480
No, no, there's some process, some mechanism that detangles all the include statements


00:08:04.480 --> 00:08:07.980
and the various compile orders and all of that stuff,


00:08:07.980 --> 00:08:11.780
and it generates this one huge file with no dependencies.


00:08:11.780 --> 00:08:18.460
But it's pretty wild to think of such a such a program is created that way. It's interesting that it's a intentionally no dependencies


00:08:18.460 --> 00:08:20.460
The whole thing is a little bit


00:08:20.460 --> 00:08:27.180
Unusual the way that the guy has created it and run it like instead of he was like well open source is good


00:08:27.180 --> 00:08:29.180
but actually I just want to make it like


00:08:29.180 --> 00:08:35.320
Nobody, this is a thing that just is the world and so he made it put it out there under


00:08:35.320 --> 00:08:40.460
Common domain or what's that called? Anyway, where you just say like it belongs to the world


00:08:40.460 --> 00:08:45.500
I relinquish all ownership of this thing. It is just now public domain, public domain.


00:08:45.500 --> 00:08:47.260
Yeah, so it's pretty interesting.


00:08:47.260 --> 00:08:49.660
Yeah, it is. Do you know what else is interesting?


00:08:49.660 --> 00:08:52.220
Testing your code before you take down the system,


00:08:52.220 --> 00:08:54.780
or you charge a credit card and you didn't want to.


00:08:54.780 --> 00:08:58.460
Yeah. Did we get this from a listener? I can't remember.


00:08:58.460 --> 00:09:01.260
Yeah, this definitely came from a listener. I can't remember who.


00:09:01.260 --> 00:09:04.140
Maybe I'll pull that up while you're having a look.


00:09:04.140 --> 00:09:33.600
Okay, well, this is a project called dryable, a useful dry run decorator for Python. And the idea is that there's sometimes where you want to, you want to run your entire application, but there's pieces of it that you don't want to run all the time. Like, in their example, they've got, if you're accessing an outside database with requests, or you can or something like that, you can turn that off during your dry runs.


00:09:33.600 --> 00:09:36.100
And I really like how generic this is.


00:09:36.100 --> 00:09:39.440
So basically, you put a decorator,


00:09:39.440 --> 00:09:43.040
it's a dryable decorator you put on top of a function.


00:09:43.040 --> 00:09:50.080
And then when you set the dryable state to true in your code,


00:09:50.080 --> 00:09:52.760
those functions just don't do anything.


00:09:52.760 --> 00:09:57.960
And then they also have the option of specifying a default return value.


00:09:57.960 --> 00:10:00.120
So during your dry runs,


00:10:00.120 --> 00:10:03.400
if the function that you're turning off is supposed to return something,


00:10:03.400 --> 00:10:05.800
or else the rest of your code is just going to break.


00:10:05.800 --> 00:10:08.400
You can specify that there.


00:10:08.400 --> 00:10:11.400
For testing certain systems,


00:10:11.400 --> 00:10:13.400
I think this is an awesome idea.


00:10:13.400 --> 00:10:15.300
It's pretty cool. It's pretty easy to start.


00:10:15.300 --> 00:10:18.040
>> It's almost like if I wanted to set up


00:10:18.040 --> 00:10:20.800
the mocking story for my code by using


00:10:20.800 --> 00:10:25.880
decorators and I could run it just even outside of a test framework,


00:10:25.880 --> 00:10:27.160
what would that look like?


00:10:27.160 --> 00:10:28.780
It looks like this drivable thing, right?


00:10:28.780 --> 00:10:32.240
>> The intent, I think, is to be able to just leave this stuff in your code.


00:10:32.240 --> 00:10:34.740
So it's a very minimal impact.


00:10:34.740 --> 00:10:37.120
And then you can just, if you want,


00:10:37.120 --> 00:10:38.000
you can just leave it there


00:10:38.000 --> 00:10:40.680
so you can always be able to do dry runs or something.


00:10:40.680 --> 00:10:44.480
- Yeah, in your test code, you just say dryable.set true.


00:10:44.480 --> 00:10:46.520
And then it just goes in this way.


00:10:46.520 --> 00:10:49.400
So one of the things I was wondering about when I saw this,


00:10:49.400 --> 00:10:51.840
I agree that it's cool and I definitely like it,


00:10:51.840 --> 00:10:55.520
but one of the things that I was wondering is like,


00:10:55.520 --> 00:10:58.640
we have mocking and these other mechanisms


00:10:58.640 --> 00:11:00.760
for stubbing out stuff.


00:11:00.760 --> 00:11:04.440
Like, where do you see this fitting in versus not?


00:11:04.440 --> 00:11:08.080
>> A lot of times people, and I agree, mocking is definitely,


00:11:08.080 --> 00:11:11.080
mocking and monkey patching is often used


00:11:11.080 --> 00:11:13.660
for definitely for testing stuff.


00:11:13.660 --> 00:11:17.680
But like, I don't know, for example, you could put together,


00:11:17.680 --> 00:11:19.640
we were doing different GUI applications


00:11:19.640 --> 00:11:21.520
we were showing the other day.


00:11:21.520 --> 00:11:26.000
If you wanted to attach a GUI to a database system,


00:11:26.000 --> 00:11:30.000
you could have a mocked up database set


00:11:30.000 --> 00:11:32.640
to just let people play with user interface.


00:11:32.640 --> 00:11:34.520
And that's not really a testing thing.


00:11:34.520 --> 00:11:36.760
It's you're just using something


00:11:36.760 --> 00:11:39.520
with some dummy data in the backend.


00:11:39.520 --> 00:11:40.360
Something like that would work.


00:11:40.360 --> 00:11:41.580
- I see, like maybe some,


00:11:41.580 --> 00:11:42.760
if you're trying to build out the UI


00:11:42.760 --> 00:11:43.920
and you don't have the data yet,


00:11:43.920 --> 00:11:45.600
it would be really nice to just go,


00:11:45.600 --> 00:11:47.840
and here's some data to work with until we get there.


00:11:47.840 --> 00:11:49.240
- Yeah, yeah, definitely.


00:11:49.240 --> 00:11:50.120
- Yeah, okay.


00:11:50.120 --> 00:11:51.200
That's pretty cool.


00:11:51.200 --> 00:11:53.840
So I told you about DigitalOcean at the top of the show,


00:11:53.840 --> 00:11:56.040
and I'll give you a little more details.


00:11:56.040 --> 00:11:58.840
They actually have some super exciting news.


00:11:58.840 --> 00:12:00.760
maybe a week, week and a half ago, two weeks ago,


00:12:00.760 --> 00:12:03.280
I can't remember, but I actually spent a lot of time


00:12:03.280 --> 00:12:05.280
upgrading a bunch of servers


00:12:05.280 --> 00:12:07.240
because DigitalOcean is awesome.


00:12:07.240 --> 00:12:09.280
They actually went and said, you know what,


00:12:09.280 --> 00:12:11.320
all that money that you're paying for the servers,


00:12:11.320 --> 00:12:13.560
we're just going to double all the things.


00:12:13.560 --> 00:12:17.720
You have one gig of RAM and you're paying us $10 a month,


00:12:17.720 --> 00:12:19.840
all right, now you get two gigs of RAM.


00:12:19.840 --> 00:12:23.080
You have one CPU and you're paying a certain amount,


00:12:23.080 --> 00:12:24.820
now you get two CPUs or two to four.


00:12:24.820 --> 00:12:27.080
So they basically, not everything,


00:12:27.080 --> 00:12:29.320
CPUs not quite as much, but certainly,


00:12:29.320 --> 00:12:33.480
you know, disk size with SSDs, the RAM,


00:12:33.480 --> 00:12:34.600
to some extent the CPUs,


00:12:34.600 --> 00:12:36.440
they're basically doubling everything they offer.


00:12:36.440 --> 00:12:39.440
So now you can get like a server with a gig of RAM


00:12:39.440 --> 00:12:41.920
and a CPU and 30 gigs, 50?


00:12:41.920 --> 00:12:44.880
I don't know, 50 gigs of SSD for $5 a month.


00:12:44.880 --> 00:12:45.720
How insane is that?


00:12:45.720 --> 00:12:46.640
- Wow.


00:12:46.640 --> 00:12:47.920
- Yeah, exactly.


00:12:47.920 --> 00:12:51.520
So anyway, it's really cool that the new pricing


00:12:51.520 --> 00:12:53.720
that they put out, so definitely drop over


00:12:53.720 --> 00:12:56.360
do.co/python and check that out,


00:12:56.360 --> 00:12:57.640
because if you thought it was good before,


00:12:57.640 --> 00:13:00.120
like literally they doubled most of the things


00:13:00.120 --> 00:13:01.280
for most of the tiers.


00:13:01.280 --> 00:13:02.100
- That's great.


00:13:02.100 --> 00:13:02.940
- Yeah, so really nice.


00:13:02.940 --> 00:13:05.040
And Python Bytes now delivers itself


00:13:05.040 --> 00:13:06.320
just a tiny bit faster


00:13:06.320 --> 00:13:10.100
and has a few more gigs of RAM to do it with.


00:13:10.100 --> 00:13:12.160
- Well, that's good 'cause our listeners are going up.


00:13:12.160 --> 00:13:13.680
- Right, we gotta keep up with the demand.


00:13:13.680 --> 00:13:14.600
Thank you, everyone.


00:13:14.600 --> 00:13:15.820
(laughing)


00:13:15.820 --> 00:13:17.000
Speaking of demand,


00:13:17.000 --> 00:13:19.700
we got actually a lot of listener feedback for this show.


00:13:19.700 --> 00:13:21.160
And I think that that was really great.


00:13:21.160 --> 00:13:23.440
Like, please keep the recommendations coming


00:13:23.440 --> 00:13:25.140
on Twitter and email and so on.


00:13:25.140 --> 00:13:27.700
Have you noticed I've been on this gooey kick lately, Brian?


00:13:27.700 --> 00:13:29.260
- We kind of knew this was going to happen.


00:13:29.260 --> 00:13:32.100
We claimed that there weren't any good solutions


00:13:32.100 --> 00:13:33.500
and then people told us.


00:13:33.500 --> 00:13:37.420
- Yeah, I still mostly stand by that,


00:13:37.420 --> 00:13:39.880
but there are people doing really cool things


00:13:39.880 --> 00:13:41.980
and I just want to highlight them.


00:13:41.980 --> 00:13:44.420
So a guy named Victor Domingos said,


00:13:44.420 --> 00:13:46.280
hey look, I'm not really much of a programmer.


00:13:46.280 --> 00:13:48.540
I kind of, like an engineer or something,


00:13:48.540 --> 00:13:49.760
you know, he was doing something else


00:13:49.760 --> 00:13:52.020
but he needed to do some program to build this thing, right?


00:13:52.020 --> 00:13:53.260
But I disagree with that statement.


00:13:53.260 --> 00:13:55.260
I think he's quite a programmer building these things.


00:13:55.260 --> 00:13:57.860
So he sent us three examples


00:13:57.860 --> 00:14:00.860
of some apps that he built


00:14:00.860 --> 00:14:05.160
in Python. And I don't know, do you click those and pull them up, Brian, and see the pictures?


00:14:05.160 --> 00:14:06.560
I'm trying to pull up one now.


00:14:06.560 --> 00:14:09.360
Yeah, so what's really nice is, like, it's all screenshots.


00:14:09.360 --> 00:14:13.160
Which, by the way, if you have a UI framework and you want people to admire your UI framework,


00:14:13.160 --> 00:14:15.660
screenshots. Pictures, please.


00:14:15.660 --> 00:14:17.960
Just describing how awesome it is in text


00:14:17.960 --> 00:14:19.560
doesn't actually make it awesome.


00:14:19.560 --> 00:14:23.720
So, but these look like rich, interesting applications.


00:14:23.720 --> 00:14:27.720
And I definitely think what he's doing here is quite neat.


00:14:27.720 --> 00:14:30.280
Especially the first and the second one that we've linked.


00:14:30.280 --> 00:14:31.280
So we've linked to three.


00:14:31.280 --> 00:14:32.120
This is crazy.


00:14:32.120 --> 00:14:36.000
PT Tracking is both, it's got both the desktop application,


00:14:36.000 --> 00:14:36.880
which looks nice.


00:14:36.880 --> 00:14:37.960
And an iPhone version.


00:14:37.960 --> 00:14:39.040
And an iPhone version.


00:14:39.040 --> 00:14:40.040
[laughs]


00:14:40.040 --> 00:14:40.760
Wow.


00:14:40.760 --> 00:14:42.000
Yeah, it's pretty interesting.


00:14:42.000 --> 00:14:45.560
I mean, like I said, this guy built some really powerful stuff, right?


00:14:45.560 --> 00:14:46.080
Yeah.


00:14:46.080 --> 00:14:47.080
Looks great.


00:14:47.080 --> 00:14:49.000
What's even better is it's open source, right?


00:14:49.000 --> 00:14:50.940
This is TKinter code.


00:14:50.940 --> 00:14:53.040
He's like, "Look, you're giving TKinter a bad rap.


00:14:53.040 --> 00:14:56.400
This is actually could be more nice looking


00:14:56.400 --> 00:14:57.700
if it's built the right way."


00:14:57.700 --> 00:15:00.480
And by the way, here's three open source apps I built


00:15:00.480 --> 00:15:03.440
that you can check out with screenshots, by the way,


00:15:03.440 --> 00:15:04.820
which is very nice.


00:15:04.820 --> 00:15:06.340
So I just want to highlight that,


00:15:06.340 --> 00:15:08.280
say thank you, Victor, for sending these in,


00:15:08.280 --> 00:15:09.240
share the links he sent,


00:15:09.240 --> 00:15:10.680
because they are pretty inspiring


00:15:10.680 --> 00:15:12.240
and they're working examples.


00:15:12.240 --> 00:15:15.920
- I did not know you could make an iPhone app with TKinter.


00:15:15.920 --> 00:15:17.360
- I still don't even know how that works.


00:15:17.360 --> 00:15:18.740
- I don't either, maybe I'll try this out.


00:15:18.740 --> 00:15:20.240
Maybe there's some kind of PEP for it.


00:15:20.240 --> 00:15:22.580
Like a PEP, what is that?


00:15:22.580 --> 00:15:27.220
PEP 7225, make Python build desktop


00:15:27.220 --> 00:15:29.660
or mobile apps on iPhone, is that what it is?


00:15:29.660 --> 00:15:31.340
What if there's like a way you could figure this out


00:15:31.340 --> 00:15:32.620
that we could settle this debate?


00:15:32.620 --> 00:15:37.420
- There's PEP Explorer and it is by Anthony again,


00:15:37.420 --> 00:15:39.800
Anthony Shah that we gave him credit


00:15:39.800 --> 00:15:42.100
on the first article that we talked about.


00:15:42.100 --> 00:15:45.740
But PEP Explorer, explore Python enhancements


00:15:46.760 --> 00:15:47.920
with a web interface.


00:15:47.920 --> 00:15:49.120
It's got a search function


00:15:49.120 --> 00:15:51.200
and you can look at all sorts of stuff.


00:15:51.200 --> 00:15:52.980
There's even, in the status,


00:15:52.980 --> 00:15:54.820
I don't quite get all the status ones,


00:15:54.820 --> 00:15:56.480
but there's an April Fool's status,


00:15:56.480 --> 00:15:57.840
which I didn't know about.


00:15:57.840 --> 00:15:58.680
- That's pretty awesome.


00:15:58.680 --> 00:16:02.640
- In 2009, they pretended that BDFL was retiring.


00:16:02.640 --> 00:16:04.360
- We probably just scared people, actually,


00:16:04.360 --> 00:16:05.520
is really what happened.


00:16:05.520 --> 00:16:08.040
Yeah, so not only do you find the PEPs that were accepted,


00:16:08.040 --> 00:16:09.120
but you can search and say,


00:16:09.120 --> 00:16:12.360
show me the ones that were either deferred or rejected.


00:16:12.360 --> 00:16:14.020
You probably will learn a lot of interesting stuff


00:16:14.020 --> 00:16:16.040
by seeing what is rejected and why.


00:16:16.040 --> 00:16:18.920
- Yeah, and then the ones that are still in draft form


00:16:18.920 --> 00:16:20.160
and everything.


00:16:20.160 --> 00:16:22.820
One of the things I wanna, I had already picked this


00:16:22.820 --> 00:16:23.840
and then I was playing with it,


00:16:23.840 --> 00:16:27.320
'cause the data classes that we talked about earlier,


00:16:27.320 --> 00:16:31.240
I cannot find on this little cool tool here.


00:16:31.240 --> 00:16:35.000
So I'm not sure what's going on with the 3.7 stuff.


00:16:35.000 --> 00:16:36.800
Maybe 3.7 just isn't in here yet.


00:16:36.800 --> 00:16:39.320
- Yeah, maybe, and this is a search engine sort of thing


00:16:39.320 --> 00:16:41.200
with data backed on GitHub, right?


00:16:41.200 --> 00:16:43.560
And so if anybody wants to say,


00:16:43.560 --> 00:16:45.520
oh, you're missing this one, PR.


00:16:45.520 --> 00:16:49.160
- Yeah, so nice people do fix it and do a PR.


00:16:49.160 --> 00:16:52.800
I just am gonna call them out on Python Bytes and say,


00:16:52.800 --> 00:16:53.800
it's broken.


00:16:53.800 --> 00:16:55.840
- This one doesn't work, it's not there.


00:16:55.840 --> 00:16:57.120
And I can't do a PR right now


00:16:57.120 --> 00:16:58.320
'cause I'm recording a podcast.


00:16:58.320 --> 00:16:59.360
- Yeah, definitely.


00:16:59.360 --> 00:17:01.000
- Yeah, yeah, nice work, Anthony.


00:17:01.000 --> 00:17:03.960
You know, enough to get a double feature, very, very cool.


00:17:03.960 --> 00:17:04.960
So I wanna round this out


00:17:04.960 --> 00:17:07.720
with just a little bit more UI stuff.


00:17:07.720 --> 00:17:09.680
If I'm gonna show you all those pictures


00:17:09.680 --> 00:17:12.000
of cool apps that Victor built,


00:17:12.000 --> 00:17:13.580
the other thing I wanna sort of pair with that


00:17:13.580 --> 00:17:16.660
is a TKinter tutorial from this,


00:17:16.660 --> 00:17:20.340
we got on Twitter as well from @likegeeks.


00:17:20.340 --> 00:17:22.660
And it's basically, here's how you go through TKinter


00:17:22.660 --> 00:17:24.740
and create your first GUI application.


00:17:24.740 --> 00:17:26.900
You don't really build anything too complicated


00:17:26.900 --> 00:17:27.740
or too advanced.


00:17:27.740 --> 00:17:29.900
It's more like, let's put some labels and buttons


00:17:29.900 --> 00:17:31.780
and combo boxes and progress bars on


00:17:31.780 --> 00:17:33.060
and see what that looks like, right?


00:17:33.060 --> 00:17:34.700
It's still like a decent distance


00:17:34.700 --> 00:17:36.380
from what Victor had built.


00:17:36.380 --> 00:17:39.460
But if you were inspired by topic four,


00:17:39.460 --> 00:17:41.540
maybe topic six can help you take some steps


00:17:41.540 --> 00:17:42.380
in that direction.


00:17:42.380 --> 00:17:43.260
- Yeah, okay.


00:17:43.260 --> 00:17:44.820
Yeah, it's pretty comprehensive.


00:17:44.820 --> 00:17:46.480
Like it really covers most of the widgets


00:17:46.480 --> 00:17:48.640
and how to use them and stuff like that in Python.


00:17:48.640 --> 00:17:50.300
So yeah, pretty cool.


00:17:50.300 --> 00:17:53.340
This may be the final thing we say about it,


00:17:53.340 --> 00:17:56.340
or maybe my own news actually will cover one more gooey thing.


00:17:56.340 --> 00:17:58.680
Yeah, I think that we'll probably hear


00:17:58.680 --> 00:18:01.060
some more gooey things coming up in the future.


00:18:01.060 --> 00:18:01.900
Yeah, yeah.


00:18:01.900 --> 00:18:02.720
I'm okay with that.


00:18:02.720 --> 00:18:03.860
I am too, and I think this is great.


00:18:03.860 --> 00:18:06.220
Like I think the other area that's looking really strong,


00:18:06.220 --> 00:18:09.540
the more that I talk to people about this, is WXPython.


00:18:09.540 --> 00:18:10.380
Yeah.


00:18:10.380 --> 00:18:12.300
What I didn't realize is WXPython has a project


00:18:12.300 --> 00:18:15.680
called WX Python Phoenix, where it was reborn


00:18:15.680 --> 00:18:17.520
from the ashes of WX Python.


00:18:17.520 --> 00:18:19.400
And there's like two versions of it, sort of.


00:18:19.400 --> 00:18:20.920
So there's like a more modern version


00:18:20.920 --> 00:18:23.920
that I like conflated with the older version.


00:18:23.920 --> 00:18:25.480
- Okay, didn't know about that.


00:18:25.480 --> 00:18:26.560
- Yeah, I didn't either.


00:18:26.560 --> 00:18:28.760
But the thing I'll tell you about in a second,


00:18:28.760 --> 00:18:29.680
did, how about you?


00:18:29.680 --> 00:18:32.320
Any other personal news you got going on?


00:18:32.320 --> 00:18:33.160
Anything cool?


00:18:33.160 --> 00:18:33.980
- Not right now.


00:18:33.980 --> 00:18:34.820
- Nice.


00:18:34.820 --> 00:18:38.280
For me, this is like the week of the recording.


00:18:38.280 --> 00:18:39.120
The recording.


00:18:39.120 --> 00:18:42.260
So I'm recording six podcasts,


00:18:42.260 --> 00:18:45.720
talk Python, Python Bytes, I was a guest on a podcast,


00:18:45.720 --> 00:18:47.580
and also a webcast.


00:18:47.580 --> 00:18:49.460
So I did like an hour and a half webcast


00:18:49.460 --> 00:18:54.460
where I rebuilt PyPI in MongoDB, which was really fun.


00:18:54.460 --> 00:18:56.380
- Wow.


00:18:56.380 --> 00:18:57.580
- So it was really, really cool.


00:18:57.580 --> 00:18:59.180
And I even created this fake database


00:18:59.180 --> 00:19:01.600
with like, you know, hundreds of thousands of records


00:19:01.600 --> 00:19:03.220
to like make it act real.


00:19:03.220 --> 00:19:04.940
It took like 15 minutes for the program


00:19:04.940 --> 00:19:07.220
to actually generate the database, but that was okay.


00:19:07.220 --> 00:19:08.700
It was still good.


00:19:08.700 --> 00:19:11.080
Anyway, so that was fun, I'll put a link in there.


00:19:11.080 --> 00:19:13.180
This weekend, some friends were over,


00:19:13.180 --> 00:19:15.780
and they're like, "Hey, I'm trying to build


00:19:15.780 --> 00:19:17.680
"this little script, and it's almost working.


00:19:17.680 --> 00:19:18.520
"Can you help me?"


00:19:18.520 --> 00:19:20.180
And I'm like, "Oh, this is a cool little CLI,


00:19:20.180 --> 00:19:22.780
"but do you know what would be better is if it was a GUI?"


00:19:22.780 --> 00:19:24.260
(laughing)


00:19:24.260 --> 00:19:26.020
It's like, "Yeah, I know, but you can't do that


00:19:26.020 --> 00:19:26.860
"in Python, Cade."


00:19:26.860 --> 00:19:29.480
And you're like, "Yeah, hold on, let's pip install GUI,


00:19:29.480 --> 00:19:32.060
"G-O-O-U-I, that thing we already talked about."


00:19:32.060 --> 00:19:34.580
And that thing is slick, let me tell you.


00:19:34.580 --> 00:19:37.720
Basically, you create one of these argument parser things


00:19:37.720 --> 00:19:39.720
from GUI, you say it takes these parameters,


00:19:39.720 --> 00:19:41.720
and then you say, get the parameters,


00:19:41.720 --> 00:19:43.720
and that actually shows the UI


00:19:43.720 --> 00:19:45.720
with all the widgets filled out, and the names,


00:19:45.720 --> 00:19:47.720
and the types, like this one is a combo box, it has


00:19:47.720 --> 00:19:49.720
these three items, like that's your argument, then it


00:19:49.720 --> 00:19:51.720
becomes just a combo box. It really is


00:19:51.720 --> 00:19:53.720
like just a few lines of code, it's awesome.


00:19:53.720 --> 00:19:55.720
We've been getting a lot of people that have been using GUI


00:19:55.720 --> 00:19:57.720
show us their screenshots of something they


00:19:57.720 --> 00:19:59.720
made with it in just a few minutes,


00:19:59.720 --> 00:20:01.720
and that's pretty awesome. I really think


00:20:01.720 --> 00:20:03.720
the bang for the buck is quite high


00:20:03.720 --> 00:20:05.720
on GUI right now, and that's WXPython by the way.


00:20:05.720 --> 00:20:10.000
Also, a quick announcement on the courses.


00:20:10.000 --> 00:20:11.480
I have a bunch of courses coming up


00:20:11.480 --> 00:20:13.400
and more of them are getting planned all the time.


00:20:13.400 --> 00:20:14.220
It's really fun.


00:20:14.220 --> 00:20:18.760
But I just launched a sort of business option


00:20:18.760 --> 00:20:19.680
team purchase page.


00:20:19.680 --> 00:20:22.040
So all the bundles and the courses and stuff


00:20:22.040 --> 00:20:25.400
at Talk Python Training now have a buy this for your team.


00:20:25.400 --> 00:20:28.080
And if you pick like a however many people are on your team,


00:20:28.080 --> 00:20:30.680
it'll automatically apply like enterprise discounts


00:20:30.680 --> 00:20:31.500
and all that kind of stuff.


00:20:31.500 --> 00:20:33.560
So if you wanna go in there and say buy this for 10 people,


00:20:33.560 --> 00:20:35.400
it's all totally self-service now.


00:20:35.400 --> 00:20:36.240
- Wow, that's great.


00:20:36.240 --> 00:20:37.680
- Yeah, so trying to make it easy


00:20:37.680 --> 00:20:40.520
for people to get more of that Python knowledge.


00:20:40.520 --> 00:20:41.360
- Neat.


00:20:41.360 --> 00:20:42.180
- Yeah.


00:20:42.180 --> 00:20:43.240
All right, well, thanks, Brian,


00:20:43.240 --> 00:20:44.920
for finding all these things and sharing them with me.


00:20:44.920 --> 00:20:45.760
- Yeah, thank you.


00:20:45.760 --> 00:20:46.580
- Yeah, bye.


00:20:46.580 --> 00:20:49.320
Thank you for listening to Python Bytes.


00:20:49.320 --> 00:20:51.820
Follow the show on Twitter via @PythonBytes.


00:20:51.820 --> 00:20:55.000
That's Python Bytes as in B-Y-T-E-S.


00:20:55.000 --> 00:20:58.380
And get the full show notes at PythonBytes.fm.


00:20:58.380 --> 00:21:00.000
If you have a news item you want featured,


00:21:00.000 --> 00:21:02.440
just visit PythonBytes.fm and send it our way.


00:21:02.440 --> 00:21:05.600
we're always on the lookout for sharing something cool.


00:21:05.600 --> 00:21:07.440
On behalf of myself and Brian Aukin,


00:21:07.440 --> 00:21:08.960
this is Michael Kennedy.


00:21:08.960 --> 00:21:10.960
Thank you for listening and sharing this podcast


00:21:10.960 --> 00:21:12.600
with your friends and colleagues.

