
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.460
to you by us over at Talk Python Training, and Brian through his pytest book.


00:00:10.460 --> 00:00:15.560
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.560 --> 00:00:17.600
over at Talk Python Training.


00:00:17.600 --> 00:00:21.400
Visit them via pythonbytes.fm/courses.


00:00:21.400 --> 00:00:25.760
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.760 --> 00:00:28.920
at pythonbytes.fm/pytest.


00:00:28.920 --> 00:00:30.000
- Enjoy the episode.


00:00:30.000 --> 00:00:31.640
- Hello and welcome to Python Bytes,


00:00:31.640 --> 00:00:33.520
where we deliver Python news and headlines


00:00:33.520 --> 00:00:34.960
directly to your earbuds.


00:00:34.960 --> 00:00:37.600
This is episode 267,


00:00:37.600 --> 00:00:41.400
recorded January 19th, 2022.


00:00:41.400 --> 00:00:42.280
That's it.


00:00:42.280 --> 00:00:43.440
I'm Brian Okken.


00:00:43.440 --> 00:00:44.780
- I'm Michael Kennedy.


00:00:44.780 --> 00:00:45.620
- We've got kind of a,


00:00:45.620 --> 00:00:48.080
I've got a cool green screen today.


00:00:48.080 --> 00:00:50.400
- I know some days we have cool stuff to talk about


00:00:50.400 --> 00:00:52.040
and cool things to share,


00:00:52.040 --> 00:00:53.840
but you're taking it to the next level.


00:00:53.840 --> 00:00:56.720
You are live streaming and recording


00:00:56.720 --> 00:00:58.280
right from the beach in Hawaii.


00:00:58.280 --> 00:01:00.080
So yeah, I'm looking at it.


00:01:00.080 --> 00:01:01.400
I'm so jealous right now.


00:01:01.400 --> 00:01:02.360
So it's nice.


00:01:02.360 --> 00:01:06.040
It's you could probably handle doing it more than one week, right?


00:01:06.040 --> 00:01:07.280
You could just do this for a while.


00:01:07.280 --> 00:01:10.640
Yeah, we should, I should move here about a month every year.


00:01:10.640 --> 00:01:11.240
That'd be great.


00:01:11.240 --> 00:01:14.720
But anyway, let's move on to our topics.


00:01:14.720 --> 00:01:17.320
Uh, Michael, you want to talk about boxes?


00:01:17.320 --> 00:01:19.360
I really do want to talk about boxes.


00:01:19.360 --> 00:01:23.320
This is such a cool library that I found.


00:01:23.320 --> 00:01:24.280
So here's the thing.


00:01:24.280 --> 00:01:27.840
We have Python classes and we have dictionaries.


00:01:28.240 --> 00:01:31.000
Where's all the data stored for most classes?


00:01:31.000 --> 00:01:33.260
In the dunder dict, right?


00:01:33.260 --> 00:01:36.080
Which is a dictionary of what is your field?


00:01:36.080 --> 00:01:38.120
Here's its value, each instance of the class,


00:01:38.120 --> 00:01:41.920
each object gets its own instance of that dictionary, right?


00:01:41.920 --> 00:01:42.760
- Yeah.


00:01:42.760 --> 00:01:44.040
- And yet when we have a dictionary,


00:01:44.040 --> 00:01:47.400
we can't treat it, we can't get the values


00:01:47.400 --> 00:01:50.360
of the dictionary in the same way that we do of a class.


00:01:50.360 --> 00:01:53.160
A class you say thing.field.


00:01:53.160 --> 00:01:55.880
Well, wouldn't it be nice if you could go to your dictionary


00:01:55.880 --> 00:01:57.280
and say it has a key.name,


00:01:57.280 --> 00:02:00.700
So just d.name to access it.


00:02:00.700 --> 00:02:04.880
That's the basic idea behind this thing called Box by C.D. Griffith.


00:02:04.880 --> 00:02:09.580
And that was enough to get me interested and think, all right,


00:02:09.580 --> 00:02:13.360
this is a cool idea that I would love to play with,


00:02:13.360 --> 00:02:14.620
and maybe I should use it more.


00:02:14.620 --> 00:02:17.160
But then I started to look a little bit further.


00:02:17.160 --> 00:02:22.040
So if you go down here, it says, all right, well, sometimes these keys,


00:02:22.040 --> 00:02:26.780
they have a structure that won't allow you to treat them that way.


00:02:26.780 --> 00:02:31.240
like a space or a colon in the example of spaces and colon.


00:02:31.240 --> 00:02:31.600
>> Yeah.


00:02:31.600 --> 00:02:34.300
>> So for example, they have a key that is the name of


00:02:34.300 --> 00:02:37.440
a movie and then data about that movie.


00:02:37.440 --> 00:02:39.420
So Robin Hood spaces,


00:02:39.420 --> 00:02:42.060
colon men in tights with spaces.


00:02:42.060 --> 00:02:46.300
By default, it'll actually convert that into something that you can


00:02:46.300 --> 00:02:48.980
use by just replacing spaces with


00:02:48.980 --> 00:02:51.940
underscores and colons just go away and stuff like that.


00:02:51.940 --> 00:02:52.980
>> That's awesome.


00:02:52.980 --> 00:02:55.200
>> You can still do that, which is cool.


00:02:55.200 --> 00:03:24.600
But there's a lot more stuff it says, check out the box GitHub wiki, which is right on the homepage, the GitHub that I linked to. And there's all sorts of things. So they show start by showing just the basic stuff like here's a box and you just you can create it through keyword values or pass it a dictionary that'll initialize out of that. So they've got like funny movie equals something and you just say my box dot funny movie, just like it was a class. And that was like I described the first thing. However, there's more that you can do with it.


00:03:24.760 --> 00:03:33.320
So if you go over to the types of boxes, they have conversion box, default boxes, box dots, camel killer box, which is awesome.


00:03:33.320 --> 00:03:38.840
Frozen boxes, converters, so not just only will it work in all these ways, which I'm about to describe,


00:03:38.840 --> 00:03:45.720
it will convert to and from dictionaries, to and from JSON, to and from YAML, to and from message pack and CSV.


00:03:45.720 --> 00:03:49.280
Oh, okay, so let's go to the types of boxes and check this out.


00:03:49.280 --> 00:03:52.200
So by default, you get the conversion box,


00:03:52.200 --> 00:03:54.640
which is what I described where there's a space,


00:03:54.640 --> 00:03:55.960
it'll put an underscore.


00:03:55.960 --> 00:03:56.520
>> Yeah.


00:03:56.520 --> 00:03:58.560
>> All of them you can access in this key value way.


00:03:58.560 --> 00:04:00.520
It's just a matter of what happens to


00:04:00.520 --> 00:04:02.800
the keys if there's a way to make them more accessible.


00:04:02.800 --> 00:04:06.440
But you can turn that off. You can have a default dictionary,


00:04:06.440 --> 00:04:10.000
where if the thing is not there instead of throwing a key,


00:04:10.000 --> 00:04:12.480
or it'll create whatever you say the default is like,


00:04:12.480 --> 00:04:14.880
create a list because I want to add up things or create,


00:04:14.880 --> 00:04:17.360
start with number zero because we're trying to count


00:04:17.360 --> 00:04:20.280
each one of those as we build it up or something like that.


00:04:20.280 --> 00:04:24.980
So it can also be a default dictionary, they call that a default box, which is cool.


00:04:24.980 --> 00:04:29.580
It can also do what it calls box dots.


00:04:29.580 --> 00:04:34.280
So in a string, you can traverse the hierarchy


00:04:34.280 --> 00:04:36.280
of the stuff contained in the box


00:04:36.280 --> 00:04:39.080
through the dot notation. So you could say,


00:04:39.080 --> 00:04:43.680
you know, my box dot a dot b dot c, and it has this fluent interface where the


00:04:43.680 --> 00:04:48.280
thing that it returns from each level is either a primitive thing like a number, but if it's


00:04:48.280 --> 00:04:52.520
a sub dictionary, it'll return a sub box, I guess, right?


00:04:52.520 --> 00:04:53.760
So you can keep going on it.


00:04:53.760 --> 00:04:57.040
You can also then just say, quote, a.b.c


00:04:57.040 --> 00:04:59.040
to traverse that hierarchy as a string


00:04:59.040 --> 00:05:00.440
if that's more programmable.


00:05:00.440 --> 00:05:01.560
This one is great.


00:05:01.560 --> 00:05:05.680
Are you working against an API or some data source


00:05:05.680 --> 00:05:08.020
that is written in a different language style?


00:05:08.020 --> 00:05:10.480
So especially I'm thinking C# here


00:05:10.480 --> 00:05:13.960
where it's not lowercase and underscores as a separator


00:05:13.960 --> 00:05:16.120
but it's capitalization, camel case.


00:05:16.120 --> 00:05:19.920
Like the example they have is pesky and annoying keys,


00:05:19.920 --> 00:05:23.920
which is capital P, capital A, capital A, capital K,


00:05:23.920 --> 00:05:24.760
all one thing.


00:05:24.760 --> 00:05:26.800
And like, if you're gonna say dot the thing,


00:05:26.800 --> 00:05:27.640
well, guess what?


00:05:27.640 --> 00:05:30.120
You're gonna have to write that in your code, right?


00:05:30.120 --> 00:05:30.960
- Yeah.


00:05:30.960 --> 00:05:32.840
- Unless you make it a camel killer box


00:05:32.840 --> 00:05:35.000
and then it converts it to snake case,


00:05:35.000 --> 00:05:39.080
pesky underscore and underscore and annoying and keys.


00:05:39.080 --> 00:05:40.480
So if you program against an API


00:05:40.480 --> 00:05:41.720
that's written in another language,


00:05:41.720 --> 00:05:43.360
you can still do this Pythonic code,


00:05:43.360 --> 00:05:44.640
which is, that's amazing, right?


00:05:44.640 --> 00:05:45.880
- Yeah, I like that.


00:05:45.880 --> 00:05:46.880
That's great.


00:05:46.880 --> 00:05:50.000
- I know, it's a good name.


00:05:50.000 --> 00:05:50.840
- I mean, kinda.


00:05:50.840 --> 00:05:51.680
- Frozen box.


00:05:51.680 --> 00:05:53.840
- I would, it's a fun thing.


00:05:53.840 --> 00:05:55.000
I personally wouldn't recommend it


00:05:55.000 --> 00:05:57.920
because then your code, it's hard to look up


00:05:57.920 --> 00:06:01.160
the documentation 'cause it'll be wrong, things like that.


00:06:01.160 --> 00:06:02.760
- Yeah, maybe something more in the affirmative


00:06:02.760 --> 00:06:06.640
like snake case converted or I don't know, whatever.


00:06:06.640 --> 00:06:10.120
They have a frozen box, so it's un-mutable and hashable,


00:06:10.120 --> 00:06:11.200
which is pretty cool.


00:06:11.200 --> 00:06:12.440
- Yeah.


00:06:12.440 --> 00:06:16.360
a recast, so if you put in strings to this key


00:06:16.360 --> 00:06:17.680
and you want it to be numbers,


00:06:17.680 --> 00:06:20.720
it'll always convert it to a float or whatever.


00:06:20.720 --> 00:06:22.480
So those are all pretty awesome.


00:06:22.480 --> 00:06:25.320
And then it'll even do things like put a prefix


00:06:25.320 --> 00:06:30.320
for stuff that couldn't be valid, non-quoted symbols.


00:06:30.320 --> 00:06:35.640
You can say .name, but you can't say .327 name.


00:06:35.640 --> 00:06:39.840
So you can say put an X, so it's X317 or whatever.


00:06:39.840 --> 00:06:41.880
All those things are pretty awesome.


00:06:41.880 --> 00:06:44.960
Let me go back here. The other thing is just the converters.


00:06:44.960 --> 00:06:48.120
There's all the converters you might go to dictionary,


00:06:48.120 --> 00:06:50.280
to YAML, to TOML,


00:06:50.280 --> 00:06:52.360
and also from all those things,


00:06:52.360 --> 00:06:53.960
which I think is pretty neat.


00:06:53.960 --> 00:06:55.320
What do you think? Like it?


00:06:55.320 --> 00:06:59.640
>> Yeah, I do. There's times where I've really wanted


00:06:59.640 --> 00:07:02.980
to conveniently just create something with a dictionary,


00:07:02.980 --> 00:07:05.240
but I wanted to use dot notation,


00:07:05.240 --> 00:07:08.720
so I've used like a name tuple or something like that.


00:07:08.720 --> 00:07:12.040
And this is actually, this does it for you.


00:07:12.040 --> 00:07:13.200
So nice.


00:07:13.200 --> 00:07:15.440
>> It's really nice. And I've done stuff like that as well.


00:07:15.440 --> 00:07:16.920
Where I'm like, all right, I'm going to create


00:07:16.920 --> 00:07:20.340
a new class that derives from dictionary and just give it a set adder,


00:07:20.340 --> 00:07:23.060
get adder so you can do the dot thing on it.


00:07:23.060 --> 00:07:26.320
But this seems to have just so many more other features on top of it


00:07:26.320 --> 00:07:27.840
that I don't think I'll ever do that again.


00:07:27.840 --> 00:07:29.340
I'm just going to use this box thing.


00:07:29.340 --> 00:07:30.280
It seems so much better.


00:07:30.280 --> 00:07:31.760
>> Nice. It's cool.


00:07:31.760 --> 00:07:35.240
>> So I think there's just a few comments that I got to bring in.


00:07:35.240 --> 00:07:35.920
>> Yeah.


00:07:35.920 --> 00:07:42.280
Roman Wright other points out that the setting default box is not the default setting, which is pretty awesome.


00:07:42.280 --> 00:07:43.280
Yeah.


00:07:43.280 --> 00:07:50.320
Chris May points out that for this, someone needs to think outside this package to get something outside the box, right?


00:07:50.320 --> 00:07:52.320
To get something really amazing.


00:07:52.320 --> 00:07:57.240
And just, you know, Brandon Brainer is a little bit jealous of your green screen.


00:07:57.240 --> 00:08:03.080
Hey, that Brandon was the one I had as a guest for testing code recently.


00:08:03.080 --> 00:08:05.080
- Hi, Brandon. - Right on. Yeah, very cool.


00:08:05.080 --> 00:08:07.080
So, all right.


00:08:07.080 --> 00:08:09.080
What's next?


00:08:09.080 --> 00:08:11.080
What's next is mocking,


00:08:11.080 --> 00:08:13.080
sort of mocking. So, Adam Johnson


00:08:13.080 --> 00:08:15.080
has an article called


00:08:15.080 --> 00:08:17.080
Making Simple Mocks with Simple


00:08:17.080 --> 00:08:19.080
Making Simple Mocks with Simple Namespace


00:08:19.080 --> 00:08:21.080
and I had never heard of this


00:08:21.080 --> 00:08:23.080
so I'm really glad he wrote this article. It's really


00:08:23.080 --> 00:08:25.080
pretty great.


00:08:25.080 --> 00:08:27.080
Do I have the wrong? Yeah, let's just cover


00:08:27.080 --> 00:08:29.080
this one. I need my notes. Never mind.


00:08:29.080 --> 00:08:31.080
So, Adam's actually been


00:08:31.080 --> 00:08:33.080
crushing it lately. He's got a lot of recent


00:08:33.080 --> 00:08:35.480
blog posts. So good job, Adam.


00:08:35.480 --> 00:08:39.380
The simple namespace is pretty neat.


00:08:39.380 --> 00:08:42.880
It comes from the type standard library, so it's not an extra package you have to


00:08:42.880 --> 00:08:46.880
bring in, which that's cool. But one of the things,


00:08:46.880 --> 00:08:49.880
it's like normally we use unit test mock,


00:08:49.880 --> 00:08:52.880
or you can to mock something.


00:08:52.880 --> 00:08:56.480
But one of the problems with mocks is by default,


00:08:56.480 --> 00:08:58.480
if you misspell something,


00:08:58.480 --> 00:09:00.280
it's going to be fine.


00:09:00.280 --> 00:09:03.640
mock just lets you do whatever attribute access you want.


00:09:03.640 --> 00:09:06.120
And that's usually not something you want.


00:09:06.120 --> 00:09:07.640
>> Right. Usually the mock is like,


00:09:07.640 --> 00:09:12.040
let me just get in the way and just let things keep working no matter what.


00:09:12.040 --> 00:09:13.800
Right? And just don't do anything unless you


00:09:13.800 --> 00:09:16.200
say return this value for this function call or something.


00:09:16.200 --> 00:09:18.640
>> Right. You can pass in specs.


00:09:18.640 --> 00:09:22.560
And if you have a known object that you're mocking,


00:09:22.560 --> 00:09:24.560
you use specs and that works.


00:09:24.560 --> 00:09:28.080
But sometimes you don't need that much of stuff.


00:09:28.080 --> 00:09:32.640
So simple namespace is a thing that just lets you fill in attributes.


00:09:32.640 --> 00:09:34.640
And then it works to access them.


00:09:34.640 --> 00:09:39.640
It works kind of like a name tuple or something like that, but the usage of it is super simple.


00:09:39.640 --> 00:09:42.240
And then, and then you can pass this around.


00:09:42.240 --> 00:09:51.060
And so in the, in the parlance of, of like testing, this would be for a fake or a stub, not really a mock cause you don't interrogate it.


00:09:51.320 --> 00:09:53.760
But if you just need to fill it, have something that,


00:09:53.760 --> 00:09:56.760
that, you know, walks like a duck and quacks like a duck,


00:09:56.760 --> 00:09:59.480
you can use one of these to create a duck


00:09:59.480 --> 00:10:00.760
and have it get passed in.


00:10:00.760 --> 00:10:01.600
It's pretty cool.


00:10:01.600 --> 00:10:03.360
And super simple and really easy.


00:10:03.360 --> 00:10:04.200
Love it.


00:10:04.200 --> 00:10:06.240
- Yeah, it seems a lot like just what people


00:10:06.240 --> 00:10:09.000
would have expected Mox to do if you described it.


00:10:09.000 --> 00:10:09.840
- Yeah.


00:10:09.840 --> 00:10:13.360
So, he has a great quote.


00:10:13.360 --> 00:10:15.720
It's as simple as possible with no faff around


00:10:15.720 --> 00:10:18.400
being callable or tracking usage or something.


00:10:18.400 --> 00:10:23.280
So in a lot of sometimes with mocks, you try to interrogate.


00:10:23.280 --> 00:10:25.760
So you have a function call and you interrogate the marks to say,


00:10:25.760 --> 00:10:27.440
did it get called by my code?


00:10:27.440 --> 00:10:28.680
These don't do that.


00:10:28.680 --> 00:10:32.940
You can't do that, but it, as long as, but you set it up with the attributes


00:10:32.940 --> 00:10:37.080
you want passed through, and it's pretty, just pretty neat.


00:10:37.080 --> 00:10:38.400
I'm going to use these all the time now.


00:10:38.400 --> 00:10:40.120
So yeah, it looks fantastic.


00:10:40.120 --> 00:10:41.100
Very nice.


00:10:41.100 --> 00:10:41.600
Find.


00:10:41.600 --> 00:10:42.320
All right.


00:10:42.320 --> 00:10:47.520
For the next one that I want to talk about, let's go to space, space,


00:10:48.000 --> 00:10:49.720
and embedded things in space.


00:10:49.720 --> 00:10:51.100
So this is pretty fun.


00:10:51.100 --> 00:10:56.360
This is an article on ZDNet talking about Raspberry Pis.


00:10:56.360 --> 00:11:00.080
So apparently the European Space Agency


00:11:00.080 --> 00:11:04.000
has uploaded and installed and configured


00:11:04.000 --> 00:11:09.600
two new Raspberry Pis, and not just any Raspberry Pis.


00:11:09.600 --> 00:11:12.680
They're these, what is it, Astro Pi?


00:11:12.680 --> 00:11:13.580
That's what it is.


00:11:13.580 --> 00:11:17.240
These are regular Raspberry Pi 4 boards,


00:11:17.240 --> 00:11:21.300
model Bs with eight gigs of memory that have been hardened for space.


00:11:21.300 --> 00:11:22.140
Okay.


00:11:22.140 --> 00:11:22.520
Wow.


00:11:22.520 --> 00:11:22.880
Okay.


00:11:22.880 --> 00:11:28.580
And the whole goal of having them up here is so that students and kids can write


00:11:28.580 --> 00:11:33.540
code and run experiments and just play with automation, but literally using the


00:11:33.540 --> 00:11:38.440
sensors of the international space station and actually writing Python code and


00:11:38.440 --> 00:11:41.820
machine learning stuff that runs up there in space.


00:11:41.820 --> 00:11:42.460
Isn't that cool?


00:11:42.460 --> 00:11:43.580
That's incredible.


00:11:43.580 --> 00:11:44.620
Yeah.


00:11:44.620 --> 00:11:45.060
Yeah.


00:11:45.700 --> 00:11:50.340
So apparently there's 500 student programming teams in Europe who are all


00:11:50.340 --> 00:11:55.340
participating in this thing called the European Astro pie challenge, which is


00:11:55.340 --> 00:11:59.780
like an education focused, competition or startup or whatever.


00:11:59.780 --> 00:12:00.460
Okay.


00:12:00.460 --> 00:12:01.100
Yeah.


00:12:01.100 --> 00:12:01.580
Very good.


00:12:01.580 --> 00:12:03.780
So out of this world, it's out of this world.


00:12:03.780 --> 00:12:04.300
Absolutely.


00:12:04.300 --> 00:12:06.340
It's really cool to see Python in space.


00:12:06.340 --> 00:12:06.740
Right.


00:12:06.740 --> 00:12:08.820
And, here's just more of it, right?


00:12:08.820 --> 00:12:13.060
So raspberry pies, you can, you can practice your stuff at home and


00:12:13.060 --> 00:12:14.980
then have it go up there.


00:12:14.980 --> 00:12:15.300
Neat.


00:12:15.500 --> 00:12:16.880
- Yeah, very cool.


00:12:16.880 --> 00:12:19.560
So you have things like the humidity reading


00:12:19.560 --> 00:12:23.620
and board the ISS and the various sensors


00:12:23.620 --> 00:12:25.620
and things on there that you can work with


00:12:25.620 --> 00:12:28.060
and then just do science-y things.


00:12:28.060 --> 00:12:32.240
I mean, when I was a kid, the science fair was like,


00:12:32.240 --> 00:12:34.280
well, let's make a little volcano that erupts


00:12:34.280 --> 00:12:36.320
and like oozes stuff out of paper mache.


00:12:36.320 --> 00:12:37.980
And you know, these kids get to write code


00:12:37.980 --> 00:12:38.820
that runs in space.


00:12:38.820 --> 00:12:40.340
That's next level.


00:12:40.340 --> 00:12:42.220
- Yeah, I admit that I've never done


00:12:42.220 --> 00:12:43.660
the volcano thing though.


00:12:43.660 --> 00:12:45.180
I kind of, I should do that.


00:12:45.180 --> 00:12:46.740
>> Yeah, I haven't either very much.


00:12:46.740 --> 00:12:49.300
I mean, I did some paper mache thing and I think I had


00:12:49.300 --> 00:12:51.980
a failed volcano once but that's about it.


00:12:51.980 --> 00:12:56.980
Anyway, I just think this is really cool and it's a neat use of Raspberry Pis.


00:12:56.980 --> 00:13:01.440
It's a cool way to take a semi-modern computing environment,


00:13:01.440 --> 00:13:03.660
put it somewhere neat where it has access to


00:13:03.660 --> 00:13:08.700
the real world and let kids and other researchers write code on it without going,


00:13:08.700 --> 00:13:11.420
"Yeah, we're not going to install your program on the ISS."


00:13:11.420 --> 00:13:12.620
No thanks to that.


00:13:12.620 --> 00:13:15.020
>> This is so neat. I'm just blown away.


00:13:15.020 --> 00:13:16.660
I would have never thought that something like this


00:13:16.660 --> 00:13:18.100
was gonna happen in my lifetime.


00:13:18.100 --> 00:13:18.940
It's nice.


00:13:18.940 --> 00:13:20.540
- Yeah, yeah, so many neat things.


00:13:20.540 --> 00:13:22.300
All right, well, that's all I gotta say about that,


00:13:22.300 --> 00:13:23.320
but definitely fun.


00:13:23.320 --> 00:13:29.420
- So one of the things that new coders have to deal with,


00:13:29.420 --> 00:13:33.820
and unfortunately it's hard to tell them ahead of time


00:13:33.820 --> 00:13:36.100
how to deal with it, is tracebacks.


00:13:36.100 --> 00:13:41.100
So tracebacks are, they're just part of life with coding.


00:13:41.100 --> 00:13:43.140
And Trey Hunter has an article called


00:13:43.140 --> 00:13:44.980
"Reading Tracebacks in Python."


00:13:44.980 --> 00:13:47.500
And it's a really great, simple introduction.


00:13:47.500 --> 00:13:48.340
I love it.


00:13:48.340 --> 00:13:51.700
One of the things I want to comment on is


00:13:51.700 --> 00:13:55.100
just the order in which we teach people things.


00:13:55.100 --> 00:13:57.660
And teaching people how to do tracebacks


00:13:57.660 --> 00:13:59.980
is something that it really needs to be early.


00:13:59.980 --> 00:14:02.180
Maybe like right before testing,


00:14:02.180 --> 00:14:04.140
and right after the hello world.


00:14:04.140 --> 00:14:07.420
But seriously, tracebacks happen so fast


00:14:07.420 --> 00:14:09.740
and when you start coding,


00:14:09.740 --> 00:14:12.100
an assertion happens that you don't catch


00:14:12.100 --> 00:14:13.480
and you get a traceback.


00:14:13.480 --> 00:14:16.640
and people panic and go, "Oh my God, I suck as a programmer."


00:14:16.640 --> 00:14:18.940
And you don't, it's not overwhelming,


00:14:18.940 --> 00:14:20.900
just kind of walk through it simply.


00:14:20.900 --> 00:14:22.260
And that's what this article's about,


00:14:22.260 --> 00:14:23.860
is how to walk through it simply.


00:14:23.860 --> 00:14:26.180
And so we're gonna, it's,


00:14:26.180 --> 00:14:30.000
if people are new to Python listening to this,


00:14:30.000 --> 00:14:31.700
or how to teach people,


00:14:31.700 --> 00:14:33.260
just teach people to start at the bottom.


00:14:33.260 --> 00:14:34.500
You read the last line first.


00:14:34.500 --> 00:14:37.780
So the last line in a traceback is the error message.


00:14:37.780 --> 00:14:40.380
Let's scroll to one on here.


00:14:40.380 --> 00:14:42.060
- Which is good to know, because that's not true


00:14:42.060 --> 00:14:43.820
for other programming languages,


00:14:43.820 --> 00:14:46.460
the error's at the top and it's kind of inverted.


00:14:46.460 --> 00:14:47.300
- Oh, really?


00:14:47.300 --> 00:14:48.120
- Yeah.


00:14:48.120 --> 00:14:49.860
- I forget, but yeah.


00:14:49.860 --> 00:14:52.420
So the last line is the exception


00:14:52.420 --> 00:14:56.780
and then also the message for the exception if it's there.


00:14:56.780 --> 00:14:58.540
And then you read up.


00:14:58.540 --> 00:15:01.340
And the next two lines up are,


00:15:01.340 --> 00:15:03.700
you've got a file name and a line number


00:15:03.700 --> 00:15:07.140
and then a copy of what the line is.


00:15:07.140 --> 00:15:10.700
And that's the place where the exception actually happened.


00:15:10.700 --> 00:15:12.940
And these two double things, these two lines,


00:15:12.940 --> 00:15:15.940
the line is called, what do you call it?


00:15:15.940 --> 00:15:19.300
They're the stack trace, the stack, whatever.


00:15:19.300 --> 00:15:20.900
- Yeah, call stack?


00:15:20.900 --> 00:15:22.740
- Yeah, this is the call stack.


00:15:22.740 --> 00:15:24.800
And that's--


00:15:24.800 --> 00:15:26.760
- Even more so, 'cause you get lines within functions,


00:15:26.760 --> 00:15:27.740
right, not just the--


00:15:27.740 --> 00:15:28.740
- Yeah. - Yeah.


00:15:28.740 --> 00:15:32.060
- And then if you don't understand


00:15:32.060 --> 00:15:34.340
why you have an exception there, you just keep going up.


00:15:34.340 --> 00:15:37.500
You keep going up to, and sometimes the exception


00:15:37.500 --> 00:15:42.780
happen not in your code, but in some library call that you went called.


00:15:42.780 --> 00:15:44.660
So you're not going to debug that.


00:15:44.660 --> 00:15:46.820
So you have to debug your code.


00:15:46.820 --> 00:15:50.260
So it's good to go up enough to where it's in your code.


00:15:50.260 --> 00:15:52.940
And then if you can't figure it out, you just keep going up.


00:15:52.940 --> 00:15:57.560
And this example is actually not obvious to me what was going on.


00:15:57.560 --> 00:15:59.040
So I'm glad he walks through it.


00:15:59.040 --> 00:16:05.380
So Trey walks through how to read this and it goes up to the fact that, so this


00:16:05.380 --> 00:16:11.300
the example has a type error because you can't concatenate a string to an integer.


00:16:11.300 --> 00:16:17.140
And that's weird because it doesn't look like it's trying to do that. But then he walks up


00:16:17.140 --> 00:16:24.980
to find out that the function is actually taking the standard input and passing it in as a number


00:16:24.980 --> 00:16:30.660
and one of the argvs and you have to convert it to an int first. But so that's a something I'm


00:16:30.660 --> 00:16:36.100
I'm glad you used that example because people new to command line interface coding often


00:16:36.100 --> 00:16:41.180
forget that, that the input is usually a string, even though if you pass in a five, it's still


00:16:41.180 --> 00:16:43.100
going to be a string with a five in it.


00:16:43.100 --> 00:16:44.100
>> Right.


00:16:44.100 --> 00:16:45.660
It looks like a number, but it's not a number.


00:16:45.660 --> 00:16:46.660
>> Yeah.


00:16:46.660 --> 00:16:48.380
So you have to convert those.


00:16:48.380 --> 00:16:51.980
And a reminder here, this is user input, even in...


00:16:51.980 --> 00:16:56.420
So in this case, it's not going to be harmful just to convert it to an int, but even command


00:16:56.420 --> 00:17:01.420
input is input from a user, so you have to sanitize it if you need,


00:17:01.420 --> 00:17:04.020
if you're doing anything like with a database or something.


00:17:04.020 --> 00:17:09.420
- Absolutely. That's great. I think definitely that's the kind of thing you need to start with


00:17:09.420 --> 00:17:13.620
when you're teaching people Python. Like almost before you teach them to code,


00:17:13.620 --> 00:17:18.820
like how to, if you run into an error, here's how you understand it a little bit,


00:17:18.820 --> 00:17:22.220
and here's how you Google it or go about finding some way to fix it.


00:17:22.220 --> 00:17:25.220
- Yeah, and if you start, especially if you start at the top, it's going to be a mess,


00:17:25.220 --> 00:17:28.060
because if you've got a call stack like 50 functions deep,


00:17:28.060 --> 00:17:31.220
hopefully not, it's going to be a really big trace back.


00:17:31.220 --> 00:17:34.060
You don't want to try to untangle all of it,


00:17:34.060 --> 00:17:35.220
just start at the bottom.


00:17:35.220 --> 00:17:39.420
>> Yeah, absolutely. Dean out in the live stream says,


00:17:39.420 --> 00:17:42.160
"You know, when you use some Python wrapper on top of


00:17:42.160 --> 00:17:45.060
a Java microservice and you get a 500 line exception,


00:17:45.060 --> 00:17:47.020
you're like, what have I done wrong to deserve this?"


00:17:47.020 --> 00:17:49.220
Yeah, that's like the advanced version of this.


00:17:49.220 --> 00:17:49.820
>> Yeah.


00:17:49.820 --> 00:17:52.220
>> Speaking of advanced, how about some intrigue?


00:17:52.220 --> 00:17:53.940
>> Ooh, nice picture.


00:17:53.940 --> 00:17:55.440
- Ooh, yes.


00:17:55.440 --> 00:18:00.440
So, you and the listeners may have heard of this person


00:18:00.440 --> 00:18:04.680
who turned out to go a little bit bonkers


00:18:04.680 --> 00:18:07.800
on their open source code, luckily in NPM and not Python,


00:18:07.800 --> 00:18:10.000
so JavaScript space.


00:18:10.000 --> 00:18:11.680
So there's colors and JS,


00:18:11.680 --> 00:18:14.440
which are two widely used, no padding margin,


00:18:14.440 --> 00:18:17.960
NPM libraries used for JavaScript and Node.js.


00:18:17.960 --> 00:18:20.680
Well, this developer, Marak Squires,


00:18:21.600 --> 00:18:25.480
First they thought it was a supply chain vulnerability and somebody hacked the account.


00:18:25.480 --> 00:18:30.520
But it turns out, no, no, no, Marek intentionally corrupted both of his libraries.


00:18:30.520 --> 00:18:37.320
So they ran an endless loop spitting out random political messages while it would loop around


00:18:37.320 --> 00:18:39.400
and just fill the screen with garbage.


00:18:39.400 --> 00:18:43.960
So initially thought to be a hack, but political and personal messages included in the code


00:18:43.960 --> 00:18:49.000
and on his related websites indicate that it may be the work of a disgruntled lashing


00:18:49.000 --> 00:18:50.000
out developer.


00:18:50.000 --> 00:18:51.000
>> Wacky.


00:18:51.000 --> 00:18:51.840
- Wacky.


00:18:51.840 --> 00:18:52.660
- Wacky, okay.


00:18:52.660 --> 00:18:55.140
So that's not, I was not gonna cover that.


00:18:55.140 --> 00:18:58.060
I saw that and I thought that that was pretty interesting.


00:18:58.060 --> 00:19:01.720
And then Mike LaFontaine points out,


00:19:01.720 --> 00:19:04.300
oh, Brian Krebs, the security guy.


00:19:04.300 --> 00:19:06.580
I just noticed that this Myrax Squires


00:19:06.580 --> 00:19:09.460
seems to be the same fellow who's sabotaged


00:19:09.460 --> 00:19:12.180
two of his own popular open source libraries next week.


00:19:12.180 --> 00:19:15.420
And he links to an article in my post,


00:19:15.420 --> 00:19:18.260
residents of Queen home


00:19:18.260 --> 00:19:21.500
with suspected bomb making materials charged


00:19:21.500 --> 00:19:26.500
for some sort of like terrorism type of thing.


00:19:26.500 --> 00:19:32.300
So the same person who sabotaged their NPM packages


00:19:32.300 --> 00:19:34.640
then was like in the process of making bombs


00:19:34.640 --> 00:19:39.140
and it just kind of shows you an interesting spectrum


00:19:39.140 --> 00:19:40.300
of where all this stuff lands.


00:19:40.300 --> 00:19:41.940
That's crazy, huh?


00:19:41.940 --> 00:19:43.020
- Yeah, weird.


00:19:43.020 --> 00:19:44.500
- Yeah, yeah, very weird.


00:19:44.500 --> 00:19:45.660
Oh, I also forgot to point out,


00:19:45.660 --> 00:19:48.140
this is an extra, extra, extra section.


00:19:48.140 --> 00:19:50.820
So, short, I got more stuff.


00:19:50.820 --> 00:19:52.980
But the first one is, the guy that went


00:19:52.980 --> 00:19:54.940
and messed up all the stuff on NPM


00:19:54.940 --> 00:19:57.340
and everybody's dependencies recently


00:19:57.340 --> 00:19:59.780
has now been charged with creating bombs


00:19:59.780 --> 00:20:01.180
in Queens, New York.


00:20:01.180 --> 00:20:03.460
So, yeah, there's that.


00:20:03.460 --> 00:20:04.300
- Okay.


00:20:04.300 --> 00:20:05.740
- Here's one that's really positive.


00:20:05.740 --> 00:20:07.860
Andy Griffiths, don't know this person,


00:20:07.860 --> 00:20:10.920
but they posted something incredibly simple


00:20:10.920 --> 00:20:12.980
that is super helpful when you're building websites


00:20:12.980 --> 00:20:14.380
and trying to design them.


00:20:14.380 --> 00:20:16.020
You know, you can go to inspect element


00:20:16.020 --> 00:20:19.480
and you can like hover over different parts of your page


00:20:19.480 --> 00:20:20.620
and highlight and it'll show,


00:20:20.620 --> 00:20:22.820
okay, this is actually the div here


00:20:22.820 --> 00:20:25.300
that is containing this and it has a margin


00:20:25.300 --> 00:20:27.320
and so that's why it looks like that.


00:20:27.320 --> 00:20:28.160
- Yeah.


00:20:28.160 --> 00:20:30.740
- This guy posted, "Hey, struggling with layout?


00:20:30.740 --> 00:20:34.020
"Turn on CSS outlines, it's a superpower."


00:20:34.020 --> 00:20:38.260
And all you have to do is write this incredibly simple CSS.


00:20:38.260 --> 00:20:43.060
Star is the CSS selector, outline colon 1px solid red.


00:20:43.060 --> 00:20:46.980
And what you get is your entire site now highlights


00:20:46.980 --> 00:20:48.220
all the elements on the page


00:20:48.220 --> 00:20:49.860
so you can figure out how to style them.


00:20:49.860 --> 00:20:51.140
- Oh, that's pretty cool.


00:20:51.140 --> 00:20:54.220
- Given the amount of work, isn't that amazing?


00:20:54.220 --> 00:20:56.300
- Yeah, yeah.


00:20:56.300 --> 00:20:58.380
- So I definitely think this is something


00:20:58.380 --> 00:21:01.780
I'm gonna try to use when I'm working on design and stuff


00:21:01.780 --> 00:21:04.660
'cause it's just so much easier than trying to like


00:21:04.660 --> 00:21:07.340
hunt around with like the debug tools


00:21:07.340 --> 00:21:10.300
and then you reload the page and it changes and all that.


00:21:10.300 --> 00:21:12.960
So quick tip for people there who do web stuff,


00:21:12.960 --> 00:21:16.960
Python 3.10.2 is out and there's actually a decent amount


00:21:16.960 --> 00:21:18.920
of stuff shipped in it.


00:21:18.920 --> 00:21:20.760
If I do some quick scrolly-scrolly,


00:21:20.760 --> 00:21:24.240
I would say that's like 30, 40 changes


00:21:24.240 --> 00:21:26.120
and bug fixes and so on.


00:21:26.120 --> 00:21:26.960
- Wow.


00:21:26.960 --> 00:21:30.760
- So things like fix hang in run test underscore MP


00:21:30.760 --> 00:21:34.280
due to race condition or fix this thing in documentation


00:21:34.280 --> 00:21:37.640
or fixed hash lib used for security option


00:21:37.640 --> 00:21:41.240
to work correctly with the new version of OpenSSL,


00:21:41.240 --> 00:21:44.240
fix memory leak in pyval.evalcodex.


00:21:44.240 --> 00:21:46.800
That sounds like it might be used a lot of places


00:21:46.800 --> 00:21:49.920
and used in conjunction with the word memory leak.


00:21:49.920 --> 00:21:51.720
That might be good to fix.


00:21:51.720 --> 00:21:54.060
Anyway, I already installed this on all my servers


00:21:54.060 --> 00:21:55.080
and have it running production


00:21:55.080 --> 00:21:57.940
and nothing seemed to catch fire, so that's good.


00:21:57.940 --> 00:21:59.240
- Yeah, very good.


00:21:59.240 --> 00:22:02.960
- Yeah, so Python 3.10.2 is out, that's cool.


00:22:02.960 --> 00:22:04.400
Ooh, all right.


00:22:04.400 --> 00:22:06.560
One, I think one more thing.


00:22:06.560 --> 00:22:08.240
Two more things.


00:22:08.240 --> 00:22:10.560
Related, I'm doing a YouTube series


00:22:10.560 --> 00:22:12.780
on a bunch of little short Python lessons


00:22:12.780 --> 00:22:15.520
and I've got about a hundred videos I wanna make


00:22:15.520 --> 00:22:17.140
and I've made five of them


00:22:17.140 --> 00:22:20.640
and published or scheduled them to go out already.


00:22:20.640 --> 00:22:24.400
So I've got a list, don't do this thing.


00:22:24.400 --> 00:22:26.680
Anyway, a bunch of little tips


00:22:26.680 --> 00:22:28.020
like parsing data with PyDandic


00:22:28.020 --> 00:22:30.520
or counting the number of occurrences of items in a list


00:22:30.520 --> 00:22:32.240
or you've got foreign loops,


00:22:32.240 --> 00:22:33.560
convert them to list comprehensions.


00:22:33.560 --> 00:22:35.640
These are all like four minute videos


00:22:35.640 --> 00:22:37.280
that just teach you something really quick in Python.


00:22:37.280 --> 00:22:38.600
So if people are interested in that,


00:22:38.600 --> 00:22:40.240
they can click the link and then subscribe


00:22:40.240 --> 00:22:43.560
to my personal channel, not the Python Bytes YouTube channel,


00:22:43.560 --> 00:22:46.080
which is awesome, but doesn't have this content,


00:22:46.080 --> 00:22:46.920
to get more of those.


00:22:46.920 --> 00:22:48.520
So that's fun.


00:22:48.520 --> 00:22:49.360
- Cool.


00:22:49.360 --> 00:22:52.240
How do you find time for all this stuff, Michael?


00:22:52.240 --> 00:22:53.400
You're like everywhere.


00:22:53.400 --> 00:22:54.760
(Michael laughs)


00:22:54.760 --> 00:22:57.560
- I've been wanting to do some of these YouTube videos


00:22:57.560 --> 00:22:59.320
and just try and explore some of the ways


00:22:59.320 --> 00:23:02.040
in which people are presenting and teaching coding


00:23:02.040 --> 00:23:04.640
for like six months, and I've just decided


00:23:04.640 --> 00:23:06.880
I'm just gonna take two days and just gonna do it


00:23:06.880 --> 00:23:09.920
because I've been putting off for like months.


00:23:09.920 --> 00:23:11.320
So there's that.


00:23:11.320 --> 00:23:15.240
Speaking of time, I also am controlling our stream


00:23:15.240 --> 00:23:16.560
and doing all sorts of fun stuff


00:23:16.560 --> 00:23:19.240
with like this device called a Stream Deck,


00:23:19.240 --> 00:23:20.840
which you may have heard of.


00:23:20.840 --> 00:23:22.800
The Stream Deck, you have one too, right?


00:23:22.800 --> 00:23:24.720
But just not in Hawaii.


00:23:24.720 --> 00:23:26.760
Stream Deck is this little device here


00:23:26.760 --> 00:23:29.640
that lets you basically set up a bunch of buttons


00:23:29.640 --> 00:23:31.720
and control things, which is super fun.


00:23:31.720 --> 00:23:34.060
And it's built for streamers and whatnot.


00:23:34.060 --> 00:23:36.200
I decided to see what you could do


00:23:36.200 --> 00:23:40.480
if, let's see, I pulled up the wrong link.


00:23:40.480 --> 00:23:44.320
I decided to see what you could do around the Stream Deck


00:23:44.320 --> 00:23:45.920
and software development.


00:23:45.920 --> 00:23:47.960
So, so far I have two profiles,


00:23:47.960 --> 00:23:49.800
one for PyCharm where you can control


00:23:49.800 --> 00:23:51.600
all sorts of things like click a button


00:23:51.600 --> 00:23:53.940
on your little device and it'll show your PRs


00:23:53.940 --> 00:23:55.960
or switch the select modes.


00:23:55.960 --> 00:23:57.680
You can write and call it multi-columns


00:23:57.680 --> 00:23:58.560
and all sorts of stuff.


00:23:58.560 --> 00:24:01.320
And then also one for Jupyter that'll like launch Jupyter


00:24:01.320 --> 00:24:03.720
and insert your standard imports


00:24:03.720 --> 00:24:05.720
and add cells above and below and rerun them


00:24:05.720 --> 00:24:08.520
or show me the command palette and stuff.


00:24:08.520 --> 00:24:09.360
- Neat.


00:24:09.360 --> 00:24:12.280
- So yeah, that also has a video on it as well.


00:24:12.280 --> 00:24:13.120
And people can check that out,


00:24:13.120 --> 00:24:16.460
but I've got this YouTube profile, not YouTube,


00:24:16.460 --> 00:24:22.180
GitHub profile repository where it has all the profiles


00:24:22.180 --> 00:24:24.160
for the Stream Deck.


00:24:24.160 --> 00:24:26.600
So if you want to download it, play with it, customize it,


00:24:26.600 --> 00:24:27.800
those are up there as well.


00:24:27.800 --> 00:24:31.080
All right, that's it for all of my extras.


00:24:31.080 --> 00:24:32.520
You got any yourself?


00:24:32.520 --> 00:24:34.400
- Yeah, so I wanted to talk about,


00:24:34.400 --> 00:24:38.160
So this is a cool article by David Amos.


00:24:38.160 --> 00:24:39.600
So David's awesome.


00:24:39.600 --> 00:24:42.520
He's one of the gang, the people at RealPython.


00:24:42.520 --> 00:24:46.760
But the article's three things you might not know


00:24:46.760 --> 00:24:49.680
about numbers in Python.


00:24:49.680 --> 00:24:51.960
And I don't know where the line is.


00:24:51.960 --> 00:24:53.020
Oh, it's near the top.


00:24:53.020 --> 00:24:53.920
It's so awesome.


00:24:53.920 --> 00:24:55.600
He's got a line that says,


00:24:55.600 --> 00:25:00.840
there's a good chance that you've used a number


00:25:00.840 --> 00:25:02.200
in one of your programs.


00:25:02.200 --> 00:25:03.840
Yeah, I think so.


00:25:03.840 --> 00:25:05.840
I could get behind that statement.


00:25:05.840 --> 00:25:07.840
Yeah, so one of the things


00:25:07.840 --> 00:25:09.840
that like strings have


00:25:09.840 --> 00:25:11.840
functions attached


00:25:11.840 --> 00:25:13.840
to them. They've got methods.


00:25:13.840 --> 00:25:15.840
And you know, we know that


00:25:15.840 --> 00:25:17.840
it's kind of different than other languages.


00:25:17.840 --> 00:25:19.840
But numbers do too.


00:25:19.840 --> 00:25:21.840
And this is something actually


00:25:21.840 --> 00:25:23.840
didn't occur to me.


00:25:23.840 --> 00:25:25.840
That you can do like two bytes and stuff.


00:25:25.840 --> 00:25:27.840
So there's functions that you can


00:25:27.840 --> 00:25:29.840
call on a number.


00:25:29.840 --> 00:25:31.840
There's a trick though. You can't do


00:25:31.840 --> 00:25:39.480
like 255.toBytes, you have to put it in a variable name so that it doesn't think it's a decimal point.


00:25:39.480 --> 00:25:46.620
And you also, or you can put parentheses around it. So you can do 255 with parentheses around it and then call


00:25:46.620 --> 00:25:53.320
toBytes or something like that. So there's, integers have two bytes, so you can convert it to bytes.


00:25:53.320 --> 00:25:56.920
You can use the class method from bytes.


00:25:56.920 --> 00:26:04.520
And you can also do like bit length and a bunch of other functions that are pretty cool around integers, which is neat.


00:26:04.520 --> 00:26:06.720
And then floats have their own methods.


00:26:06.720 --> 00:26:11.160
Floats have like is an integer or is integer ratio,


00:26:11.160 --> 00:26:15.320
or as integer ratio, so it'll convert it to an integer ratio. That's pretty cool.


00:26:15.320 --> 00:26:20.200
Oh, wow. Like some sort of approximation in rational numbers like...


00:26:20.200 --> 00:26:25.160
Yeah. So, yeah, I don't have that example pulled up.


00:26:25.160 --> 00:26:26.200
No, but that's cool.


00:26:26.200 --> 00:26:27.200
There's some, I'm there.


00:26:27.200 --> 00:26:28.320
No idea about this stuff.


00:26:28.320 --> 00:26:29.480
Yeah, I've got a bunch.


00:26:29.480 --> 00:26:30.720
There's a there's a.


00:26:30.720 --> 00:26:34.720
There'll be some links in the show notes to the Python documentation for these.


00:26:34.720 --> 00:26:36.920
It's pretty nice.


00:26:36.920 --> 00:26:46.560
The the OK, so that's the first thing that you should know about numbers is there's methods there, so look him up in the documentation and I'll will have links to the documentation.


00:26:46.560 --> 00:26:49.720
And then the second thing you should know about numbers.


00:26:49.720 --> 00:26:55.720
Second of the third is numbers have hierarchy, so there's there's four.


00:26:55.720 --> 00:26:59.000
For abstract types in Python for numbers,


00:26:59.000 --> 00:27:02.600
there's complex, real, rational, and integral.


00:27:02.600 --> 00:27:05.300
So complex is the complex.


00:27:05.300 --> 00:27:07.600
Most of them only have one type in it.


00:27:07.600 --> 00:27:12.160
Complex, the abstract type of complex has complex.


00:27:12.160 --> 00:27:13.240
Real has float.


00:27:13.240 --> 00:27:14.760
Rational has fraction,


00:27:14.760 --> 00:27:17.160
but integral has both int and bool.


00:27:17.160 --> 00:27:18.760
So that's neat.


00:27:18.760 --> 00:27:21.200
Their bool and ints are related.


00:27:21.200 --> 00:27:25.160
And then, but then we also have these decimals.


00:27:25.160 --> 00:27:29.420
Um, yeah, so there's, I wanted to find his stuff on decimal.


00:27:29.420 --> 00:27:30.820
Decimals don't fit.


00:27:30.820 --> 00:27:35.520
So decimals have their, they're not really part of this hierarchy at all,


00:27:35.520 --> 00:27:37.820
but they're, they're their own decimal class.


00:27:37.820 --> 00:27:41.100
So there's not, there's not an abstract class, but that's okay.


00:27:41.100 --> 00:27:42.060
Decimals are great.


00:27:42.060 --> 00:27:46.780
And people should remember decimal is around if you have, if you're working


00:27:46.780 --> 00:27:48.100
with money or something like that,


00:27:48.260 --> 00:27:50.180
Use super precise science.


00:27:50.180 --> 00:27:52.220
Um, so yeah, these are good.


00:27:52.220 --> 00:27:58.340
Uh, also, because these are just normal types, numbers are extensible.


00:27:58.340 --> 00:27:58.860
Oh yeah.


00:27:58.860 --> 00:28:00.680
A comment about floats are weird.


00:28:00.680 --> 00:28:01.020
Yeah.


00:28:01.020 --> 00:28:02.740
Um, those are always weird.


00:28:02.740 --> 00:28:03.500
Floats are weird.


00:28:03.500 --> 00:28:04.140
Yeah.


00:28:04.140 --> 00:28:07.860
The numbers are extensible since these are classes, you can,


00:28:07.860 --> 00:28:09.540
you can derive from them.


00:28:09.540 --> 00:28:12.220
Uh, but he comments, which is good.


00:28:12.220 --> 00:28:17.000
You have to be really careful because if you, want to extend a class, there's


00:28:17.000 --> 00:28:20.200
a whole bunch of dunder methods that you have to make sure work right.


00:28:20.200 --> 00:28:22.840
So maybe you don't want to extend it,


00:28:22.840 --> 00:28:25.000
but you can, you can make your own numeric types.


00:28:25.000 --> 00:28:27.320
So this is the third thing.


00:28:27.320 --> 00:28:28.960
Anyway, kind of a neat article.


00:28:28.960 --> 00:28:32.560
>> I'm trying to wonder what you might actually create those for.


00:28:32.560 --> 00:28:33.920
I mean, maybe you might, well,


00:28:33.920 --> 00:28:36.040
maybe we'll create an integer that has


00:28:36.040 --> 00:28:39.520
a bounds and is an error if you try to make one too large or something.


00:28:39.520 --> 00:28:41.440
>> Yeah, I'm not sure.


00:28:41.440 --> 00:28:43.640
>> I'm thinking on the spot here.


00:28:43.640 --> 00:28:44.880
>> Yeah.


00:28:44.880 --> 00:28:50.000
Another thing that's amazing is a complex numbers are natively built into Python.


00:28:50.000 --> 00:28:52.340
>> Yeah, and that's really great.


00:28:52.340 --> 00:28:59.240
That's essential for a lot of scientific and measurement work and stuff is to have complex numbers around.


00:28:59.240 --> 00:29:01.040
>> They're truly amazing.


00:29:01.040 --> 00:29:04.480
All right. Well, I think that's all.


00:29:04.480 --> 00:29:05.960
I mean, I already did my extras.


00:29:05.960 --> 00:29:07.520
I skipped your set here,


00:29:07.520 --> 00:29:09.080
your articles to ask you about your extras.


00:29:09.080 --> 00:29:10.760
Do you have any actual extras you want to cover?


00:29:10.760 --> 00:29:12.680
>> I don't have any actual extras.


00:29:12.680 --> 00:29:15.400
- Have you had any dangerous encounters with like,


00:29:15.400 --> 00:29:18.220
warm water, have you maybe stubbed your toe on a rock,


00:29:18.220 --> 00:29:20.400
or was there a turtle that came by,


00:29:20.400 --> 00:29:22.600
or you could run into like an eel,


00:29:22.600 --> 00:29:25.000
there are eels in the reefs there


00:29:25.000 --> 00:29:26.360
that you might wanna stay with.


00:29:26.360 --> 00:29:28.140
- I've only been here a couple days so far,


00:29:28.140 --> 00:29:30.060
we've been, I've been swimming a couple times,


00:29:30.060 --> 00:29:32.460
right out, right, like, you can,


00:29:32.460 --> 00:29:34.300
you have to look down, not across,


00:29:34.300 --> 00:29:37.040
to see the beach from where I'm staying.


00:29:37.040 --> 00:29:39.240
And so I went swimming right here,


00:29:39.240 --> 00:29:41.740
it's kinda fun because it drops off right away,


00:29:41.740 --> 00:29:45.220
So there's a little beach and then it drops, it drops deeper right away.


00:29:45.220 --> 00:29:47.740
And that's, but it's not like a big current.


00:29:47.740 --> 00:29:51.580
So you can swim really with only going out a few feet, which is nice.


00:29:51.580 --> 00:29:54.940
And then we went to another beach that was like shallow for a long


00:29:54.940 --> 00:29:56.760
time, but then it had coral and stuff.


00:29:56.760 --> 00:30:01.700
And that was really fun to scuba dive or to not scuba, but, snorkel over.


00:30:01.700 --> 00:30:03.100
Uh, and look around.


00:30:03.100 --> 00:30:09.580
But if you're just wanting to walk out, that corals like tough to walk on and it hurts.


00:30:09.580 --> 00:30:10.340
Yeah.


00:30:10.340 --> 00:30:11.620
That stuff's super sharp.


00:30:11.620 --> 00:30:12.380
>> Yeah.


00:30:12.380 --> 00:30:13.140
>> Beautiful.


00:30:13.140 --> 00:30:14.600
>> But having a lot of fun.


00:30:14.600 --> 00:30:16.900
>> Awesome. Good to hear. Well, I think we


00:30:16.900 --> 00:30:19.420
should round it out with one or two things here.


00:30:19.420 --> 00:30:21.260
We got some jokes.


00:30:21.260 --> 00:30:24.180
Now, I saw Josh out in the audience and he sent in some jokes,


00:30:24.180 --> 00:30:25.940
which we'll make part of this soon,


00:30:25.940 --> 00:30:27.860
but I didn't have time for this episode.


00:30:27.860 --> 00:30:31.520
We got four O'Reilly book covers.


00:30:31.520 --> 00:30:32.500
>> I love these.


00:30:32.500 --> 00:30:34.280
>> Not the O'Reilly,


00:30:34.280 --> 00:30:35.500
because the O'Reilly books,


00:30:35.500 --> 00:30:39.180
they always have an animal and a title and whatnot.


00:30:39.180 --> 00:30:43.780
So O'Reilly art takes that kind of puts a funny spin on it.


00:30:43.780 --> 00:30:44.820
I'll do this first one.


00:30:44.820 --> 00:30:46.380
We got 40, maybe we could do two each.


00:30:46.380 --> 00:30:48.900
So the first one here has a platypus on the screen.


00:30:48.900 --> 00:30:51.420
It says, the little subtitle is,


00:30:51.420 --> 00:30:54.260
the quote is, "The original developer isn't here


00:30:54.260 --> 00:30:55.300
for a reason."


00:30:55.300 --> 00:30:57.460
And the title is, "Losing your will to live,


00:30:57.460 --> 00:30:58.860
a code maintenance guide."


00:30:58.860 --> 00:31:00.700
- Yes.


00:31:00.700 --> 00:31:03.260
- Written by the intern.


00:31:03.260 --> 00:31:04.100
- The intern.


00:31:04.100 --> 00:31:07.820
- You wanna take this one?


00:31:07.820 --> 00:31:13.020
So the title is "Expert Vague Understanding of Computer Science.


00:31:13.020 --> 00:31:17.020
Probably be able to explain a sorting algorithm if it ever comes up."


00:31:17.020 --> 00:31:20.780
By the practical dev?


00:31:20.780 --> 00:31:23.420
Yeah, by the practical dev. Very good. Very good. Okay.


00:31:23.420 --> 00:31:28.380
The next one is an elephant. Very proud speaking out loudly.


00:31:28.380 --> 00:31:34.220
"It depends, the definitive guide. The answer to every programming question ever conceived."


00:31:34.220 --> 00:31:36.300
It's a short book.


00:31:37.180 --> 00:31:39.460
- Exactly. (laughs)


00:31:39.460 --> 00:31:42.700
All right, bring us home with this last one.


00:31:42.700 --> 00:31:45.620
- Okay, so, "Works on my machine,"


00:31:45.620 --> 00:31:48.620
"The Definitive Guide," "How to Convince Your Manager."


00:31:48.620 --> 00:31:50.380
Yeah.


00:31:50.380 --> 00:31:51.220
- I love it.


00:31:51.220 --> 00:31:54.140
Very good, very good.


00:31:54.140 --> 00:31:57.540
Well, Brian, everyone listening,


00:31:57.540 --> 00:31:58.820
almost everyone is jealous.


00:31:58.820 --> 00:32:00.140
I'm sure there's some people in Hawaii like,


00:32:00.140 --> 00:32:01.860
"Yeah, I just go there every day."


00:32:01.860 --> 00:32:04.160
But most of the people are probably jealous


00:32:04.160 --> 00:32:06.180
where you get the record from today.


00:32:06.180 --> 00:32:07.460
So thanks for making the time.


00:32:07.460 --> 00:32:08.620
- Thank you.


00:32:08.620 --> 00:32:12.060
It's fun, always fun to be here with the Python Bytes people.


00:32:12.060 --> 00:32:13.900
- Thanks for listening to Python Bytes.


00:32:13.900 --> 00:32:16.820
Follow the show on Twitter via @PythonBytes.


00:32:16.820 --> 00:32:19.980
That's Python Bytes as in B-Y-T-E-S.


00:32:19.980 --> 00:32:23.060
Get the full show notes over at pythonbytes.fm.


00:32:23.060 --> 00:32:24.940
If you have a news item we should cover,


00:32:24.940 --> 00:32:28.180
just visit pythonbytes.fm and click submit in the nav bar.


00:32:28.180 --> 00:32:30.700
We're always on the lookout for sharing something cool.


00:32:30.700 --> 00:32:32.700
If you wanna join us for the live recording,


00:32:32.700 --> 00:32:34.980
just visit the website and click live stream


00:32:34.980 --> 00:32:38.360
to get notified of when our next episode goes live.


00:32:38.360 --> 00:32:41.740
That's usually happening at noon Pacific on Wednesdays


00:32:41.740 --> 00:32:42.820
over at YouTube.


00:32:42.820 --> 00:32:44.900
On behalf of myself and Brian Aukin,


00:32:44.900 --> 00:32:46.220
this is Michael Kennedy.


00:32:46.220 --> 00:32:48.420
Thank you for listening and sharing this podcast


00:32:48.420 --> 00:32:50.060
with your friends and colleagues.

