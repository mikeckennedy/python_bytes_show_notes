WEBVTT

00:00:00.001 --> 00:00:03.900
Hey there, thanks for listening. Before we jump into this episode, I just want to remind you

00:00:03.900 --> 00:00:09.780
that this episode is brought to you by us over at Talk Python Training and Brian through his pytest

00:00:09.780 --> 00:00:15.060
book. So if you want to get hands-on and learn something with Python, be sure to consider our

00:00:15.060 --> 00:00:22.100
courses over at Talk Python Training. Visit them via pythonbytes.fm/courses. And if you're

00:00:22.100 --> 00:00:27.700
looking to do testing and get better with pytest, check out Brian's book at pythonbytes.fm slash

00:00:27.700 --> 00:00:33.000
pytest. Enjoy the episode. Hello and welcome to Python Bytes, where we deliver Python news and

00:00:33.000 --> 00:00:42.440
headlines directly to your earbuds. This is episode 267, recorded January 19th, 2022. That's it. I'm

00:00:42.440 --> 00:00:49.400
Brian Okken. I'm Michael Kennedy. I've got a cool green screen today. I know some days we have cool

00:00:49.400 --> 00:00:55.180
stuff to talk about and cool things to share, but you're taking the next level. You are live streaming

00:00:55.180 --> 00:01:01.660
and recording right from the beach in Hawaii. So yeah, I'm looking out at surfers right now. So

00:01:01.660 --> 00:01:06.840
it's nice. It's, you could probably handle doing it more than one week, right? You could just do this

00:01:06.840 --> 00:01:12.020
for a while. Yeah, we should, I should move here about a month every year. That'd be great. But anyway,

00:01:12.020 --> 00:01:19.000
let's move on to our topics. Michael, you want to talk about boxes? I really do want to talk about

00:01:19.000 --> 00:01:26.840
boxes. This is such a cool library that I found. So here's the thing. We have Python classes and we

00:01:26.840 --> 00:01:33.800
have dictionaries. Where's all the data stored for most classes? In the dunder dict, right? Which is a

00:01:33.800 --> 00:01:39.620
dictionary of what is your field? Here's its value. Each instance of the class, each object gets its own

00:01:39.620 --> 00:01:45.140
instance of that dictionary, right? Yeah. And yet when we have a dictionary, we can't treat it,

00:01:45.140 --> 00:01:51.060
we can't get the values of the dictionary in the same way that we do have a class, a class, you say

00:01:51.060 --> 00:01:56.920
thing dot field. Well, wouldn't it be nice if you could go to your dictionary and say it has a key dot

00:01:56.920 --> 00:02:04.020
name. So just D dot name to access it. That's the basic idea behind this thing called box by CD

00:02:04.020 --> 00:02:10.380
Griffith. And that enough, that was enough to get me interested and think, all right, this is a cool

00:02:10.380 --> 00:02:16.100
idea that I would love to play with and maybe I should use it more. But then I started to look a

00:02:16.100 --> 00:02:23.520
little bit further. So if you go down here, it says, all right, well, sometimes these keys, they have a

00:02:23.520 --> 00:02:30.800
structure that won't allow you to treat them that way, like a space or a colon in the example, spaces and

00:02:30.800 --> 00:02:37.120
colon. Yeah. So for example, they have a key that is the name of a movie and then data about that

00:02:37.120 --> 00:02:44.040
movie. So Robin hood spaces, colon men in tights with spaces. And by default, it'll actually convert

00:02:44.040 --> 00:02:50.340
that into something that you can use by just, you know, replacing spaces with underscores and colons

00:02:50.340 --> 00:02:55.960
just go away and stuff like that. Oh, that's awesome. You can still do that, which is cool. But there's a lot

00:02:55.960 --> 00:03:01.560
more stuff. It says, check out the box GitHub wiki, which is right on the homepage, the GitHub that I

00:03:01.560 --> 00:03:07.400
linked to. And there's all sorts of things. So they show, start by showing just the basic stuff, like

00:03:07.400 --> 00:03:12.240
here's a box and you just, you can create it through keyword values or pass it a dictionary. It'll

00:03:12.240 --> 00:03:16.200
initialize out of that. So they've got like funny movie equals something. And you just say

00:03:16.200 --> 00:03:20.780
my box dot funny movie, just like it was a class. And that was like, I described the first thing.

00:03:21.420 --> 00:03:26.780
However, there's more that you can do with it. So if you go over to the types of boxes,

00:03:26.780 --> 00:03:33.220
they have conversion box, default boxes, box dots, camel killer box, which is awesome.

00:03:33.220 --> 00:03:38.580
Frozen boxes, converters. So not just only will it work in all these ways, which I'm about to describe,

00:03:38.580 --> 00:03:44.640
it will convert to and from dictionaries, to and from JSON, to and from YAML, to and from message pack

00:03:44.640 --> 00:03:50.100
and CSV. Okay. So let's go to the types of boxes and check this out. So by default,

00:03:50.100 --> 00:03:55.480
you get the conversion box, which is what I described where there's a space that'll put an underscore.

00:03:55.480 --> 00:03:56.340
Yeah.

00:03:56.340 --> 00:04:01.040
All of them you can access in this key value way. It's just a matter of what happens to the keys,

00:04:01.040 --> 00:04:03.700
if there's a way to make them more accessible, but you can turn that off.

00:04:03.700 --> 00:04:09.380
You can have, you know, a default dictionary, right? Where if the thing is not there, instead of

00:04:09.380 --> 00:04:14.020
throwing a key or it'll create whatever you say the default is like create a list. Cause I want to add up

00:04:14.020 --> 00:04:18.640
things or create, start with the number zero. Cause we're trying to count each one of those as we

00:04:18.640 --> 00:04:23.020
build it up or something like that. Right? So it can also be a default dictionary. They call that a

00:04:23.020 --> 00:04:32.860
default box, which is cool. And it can also do what it calls a box dots. So in a string, you can traverse

00:04:32.860 --> 00:04:39.560
the hierarchy of the stuff contained in the box through the dot notation. So you could say, you know,

00:04:39.620 --> 00:04:44.780
my box dot a dot B dot C, and it has this fluent interface where the thing that it returns from

00:04:44.780 --> 00:04:50.400
each level is either a primitive thing, like a number, but if it's a sub dictionary, it'll return

00:04:50.400 --> 00:04:56.540
a sub box, I guess. Right. So you can keep going on it. You can also then just say, quote, a dot B dot C

00:04:56.540 --> 00:05:02.260
to traverse that hierarchy as a string. If that's more programmable, this one is great. Are you working

00:05:02.260 --> 00:05:09.480
against an API or some data source that is written in a different language style? So especially I'm

00:05:09.480 --> 00:05:15.040
thinking C# here where it's not lowercase and underscores as a separator, but it's capitalization

00:05:15.040 --> 00:05:22.060
camel case. Like the example they have is pesky and annoying keys, which is capital P, capital A,

00:05:22.060 --> 00:05:27.560
capital A, capital K, all one thing. And like, if you're going to say dot the thing, well, guess what?

00:05:27.600 --> 00:05:32.720
You're going to have to write that in your code, right? Yeah. Unless you make it a camel killer box

00:05:32.720 --> 00:05:38.620
and then it converts it to snake case pesky underscore and underscore and annoying and keys.

00:05:38.620 --> 00:05:43.020
So if you program against an API that's written in another language, you can still do this Pythonic

00:05:43.020 --> 00:05:47.720
code, which is that's amazing, right? Yeah. I like that. That's great. I know it's a good,

00:05:47.820 --> 00:05:55.400
a good name. I mean, I would, it's, it's a fun thing. I personally wouldn't recommend it because

00:05:55.400 --> 00:05:59.760
then your code, you're, it's hard to look up the documentation because it'll be wrong.

00:05:59.760 --> 00:06:05.300
Things like that. Yeah. Yeah. Maybe something more in the affirmative, like snake case converted or I

00:06:05.300 --> 00:06:10.780
don't know, whatever. They have a frozen box, so it's unmutable and hashable, which is pretty cool.

00:06:11.120 --> 00:06:17.560
Yeah. A recast. So you, if you put in strings to this key and that you want it to be numbers,

00:06:17.560 --> 00:06:23.460
it'll always convert it to a float or whatever. So those are all pretty awesome. And then it'll even

00:06:23.460 --> 00:06:30.500
do things like put a prefix for stuff that couldn't be valid, non quoted symbols, right? You could,

00:06:30.500 --> 00:06:36.960
you can say dot name, but you can't say dot three 27 name, right? So you can say, put an X.

00:06:36.960 --> 00:06:42.200
So it's X three, one, seven or whatever. all those things are pretty awesome. let's,

00:06:42.200 --> 00:06:46.640
let me go back here. The other thing is just the converters, right? So there's all the converters

00:06:46.640 --> 00:06:53.400
you might go to dictionary to YAML to Toml, and also from all those things, which I think is pretty

00:06:53.400 --> 00:06:58.820
neat. So what do you think? Like it? Yeah, I do. And there's, there's times where I've really had

00:06:58.820 --> 00:07:04.960
wanted to conveniently just create something with a dictionary, but I wanted to use dot notation.

00:07:04.960 --> 00:07:10.900
So I've used like a name tuple or something like that. And, and this, this is actually,

00:07:10.900 --> 00:07:15.440
this does it for you. So nice. It's really nice. And I've done stuff like that as well,

00:07:15.440 --> 00:07:19.240
where I'm like, all right, I'm going to create an old class. It derives from dictionary and just give

00:07:19.240 --> 00:07:24.500
it a set adder, get adder. So you can do the dot thing on it. But this seems to have just so many

00:07:24.500 --> 00:07:28.580
more other features on top of it that I don't think I'll ever do that again. I'm just going to use

00:07:28.580 --> 00:07:33.400
this box thing. It seems so much better. Nice. It's cool. Yeah. So I think there's just a few

00:07:33.400 --> 00:07:39.740
comments that I got to bring in. Yeah. Roman Wright out there points out that the setting default box

00:07:39.740 --> 00:07:45.480
is not the default setting, which is pretty awesome. Yeah. Chris May points out that, that for this,

00:07:45.480 --> 00:07:51.440
someone needs to think outside this package to get something outside the box, right? To get something

00:07:51.440 --> 00:07:56.420
really, really amazing. and, just, you know, Brandon brainers a little bit jealous of

00:07:56.420 --> 00:08:02.720
your green screen. Hey, that Brandon's the one I had, I had on as a guest for testing code recently.

00:08:02.720 --> 00:08:10.040
So hi Brandon. Right on. Yeah. Very cool. So, all right. well, what's next? What's next is a

00:08:10.040 --> 00:08:16.800
mocking sort of mocking. So Adam Johnson has an article called, making simple mocks with simple,

00:08:16.800 --> 00:08:21.840
making simple mocks with simple namespace. And I had never heard of this. So I'm really glad he

00:08:21.840 --> 00:08:27.240
wrote this article. It's really pretty great. Oh, do I have the wrong? Oh yeah. Let's just cover

00:08:27.240 --> 00:08:32.920
this one. Need my notes. Nevermind. so Adam's actually been crushing it lately. He's got a lot of

00:08:32.920 --> 00:08:39.960
recent blog posts. So good job, Adam. the, the simple namespace is pretty neat. It comes from

00:08:39.960 --> 00:08:45.400
the type standard library. So it's not an extra package you have to have to bring in, which that's

00:08:45.400 --> 00:08:51.680
cool. But one of the things that, so it's like, normally we use unit test mock, or you can

00:08:51.680 --> 00:08:58.300
to mock something. But one of the problems with mocks is by default, if you misspell something,

00:08:58.300 --> 00:09:04.280
it's going to be fine. It mock just lets you do whatever attribute access you want. And that's

00:09:04.280 --> 00:09:08.940
usually not something you want. So, right. Usually the mock is like, let me just get in the way

00:09:08.940 --> 00:09:14.100
and just let things keep working no matter what. Right. And just don't do anything unless you say,

00:09:14.100 --> 00:09:18.840
return this value for this function call or something. Right. You can pass in specs.

00:09:18.840 --> 00:09:24.860
and, and if you have a known object that you're mocking, you use specs and that, that works, but

00:09:24.860 --> 00:09:31.460
sometimes you don't need that much of stuff. So simple namespace is a thing that just lets you

00:09:31.460 --> 00:09:36.920
fill in attributes and then it works to access them. It works kind of like a name tuple or something

00:09:36.920 --> 00:09:42.160
like that, but the usage of it is super simple. And then, and then you can pass this around.

00:09:42.380 --> 00:09:48.480
And so in the, in the parlance of, of like testing, this would be for a fake or a stub,

00:09:48.480 --> 00:09:53.340
uh, not really a mock cause you don't interrogate it. But if you just need to fill it, have something

00:09:53.340 --> 00:09:57.840
that, that, you know, walks like a duck and quacks like a duck, you can use one of these to

00:09:57.840 --> 00:10:03.020
create a duck, and have it get passed in. It's pretty cool and super simple and really easy.

00:10:03.020 --> 00:10:03.680
Love it.

00:10:03.680 --> 00:10:08.680
Yeah. It seems a lot like just what people would have expected mocks to do if you described it.

00:10:09.080 --> 00:10:15.060
Yeah. like it, so, when he has a, it's a great quote, it's as simple as possible with no

00:10:15.060 --> 00:10:20.680
faff around being callable or tracking usage or something. So, in, in a lot of, sometimes

00:10:20.680 --> 00:10:25.400
with mocks, you, try to interrogate. So you have a function call and you interrogate the mocks

00:10:25.400 --> 00:10:31.060
to say, did it get called by my code? These don't do that. You can't do that, but it, it, as long as,

00:10:31.060 --> 00:10:35.980
but you set it up with the attributes you want passed through. and it's pretty,

00:10:36.040 --> 00:10:40.060
just pretty neat. I'm going to use these all the time now. So yeah, it looks fantastic.

00:10:40.060 --> 00:10:46.140
Very nice find. All right. For the next one that I want to talk about, let's go to space.

00:10:46.140 --> 00:10:47.380
Space.

00:10:47.380 --> 00:10:54.540
And embedded things in space. So this is pretty fun. this is an article on CD net talking about,

00:10:54.540 --> 00:11:03.820
uh, raspberry PI. So apparently the European space agency has uploaded and installed and configured

00:11:03.820 --> 00:11:12.900
two new raspberry PI's and not just any raspberry PI's there. These, what is it? Astro PI. That's

00:11:12.900 --> 00:11:18.920
what it is. These are, regular, raspberry PI four boards, model B's with eight gigs of memory

00:11:18.920 --> 00:11:24.820
that have been hardened for space. Okay. Wow. Okay. And the whole goal of having them up here

00:11:24.820 --> 00:11:31.480
is so that students and kids can write code and run experiments and just play with automation,

00:11:31.480 --> 00:11:38.460
but literally using the sensors of the international space station and actually writing Python code and

00:11:38.460 --> 00:11:42.440
machine learning stuff that runs up there in space. Isn't that cool?

00:11:42.440 --> 00:11:43.380
That's incredible.

00:11:43.380 --> 00:11:51.040
Yeah. Yeah. So apparently there's 500 student programming teams in Europe who are all participating

00:11:51.040 --> 00:11:58.280
in this thing called the European astro PI challenge, which is like an education focused, competition

00:11:58.280 --> 00:12:04.160
or startup or whatever. Okay. Yeah. So out of this world, it's out of this world. Absolutely.

00:12:04.160 --> 00:12:09.460
It's really cool to see Python in space. Right. And, here's just more of it. Right. So raspberry

00:12:09.460 --> 00:12:15.740
pies, because you can, you can practice your stuff at home and then have it go up there. Neat. Yeah.

00:12:15.740 --> 00:12:22.900
Very cool. So you have things like the humidity reading and board the ISS and, the various

00:12:22.900 --> 00:12:28.500
sensors and things on there that you can work with and then just do sciencey things. I mean,

00:12:28.500 --> 00:12:34.700
when I was a kid, the science fair was like, well, let's make a little volcano that erupts and like,

00:12:34.700 --> 00:12:39.120
it was this stuff out of paper mache. And you know, these kids get a right code that runs in space. That's,

00:12:39.120 --> 00:12:43.340
that's the next level. Yeah. I admit that I've never done the volcano thing though.

00:12:43.340 --> 00:12:47.020
I kind of, I should do that. Yeah. I haven't either very much. I mean,

00:12:47.020 --> 00:12:51.740
I did some paper mache thing and I think I had a failed volcano once, but that's about it.

00:12:51.740 --> 00:12:58.120
Anyway, I just think this is really cool. And it's a neat use of raspberry pies. It's a cool way to

00:12:58.120 --> 00:13:03.580
take like a semi-modern computing environment, put it somewhere neat where it has access to real,

00:13:03.580 --> 00:13:08.460
the real world and let kids and other researchers write code on it without going,

00:13:08.460 --> 00:13:12.420
yeah, we're not going to install your program on the ISS. No, no thanks to that.

00:13:12.580 --> 00:13:16.880
This is so neat. I'm blown away. I would have never thought that something like this was going

00:13:16.880 --> 00:13:20.840
to happen in my lifetime. It's nice. Yeah. Yeah. So many neat things. All right. Well,

00:13:20.840 --> 00:13:23.080
that's, that's all I got to say about that, but definitely fun.

00:13:23.080 --> 00:13:31.680
So one of the things that new, new coders have to deal with it. And unfortunately it's,

00:13:31.680 --> 00:13:37.200
it's hard to tell them ahead of time how to deal with it is tracebacks. So tracebacks are,

00:13:37.200 --> 00:13:44.120
they're just part of life with coding and Trey Hunter has a article called reading tracebacks in

00:13:44.120 --> 00:13:50.740
Python. And it's a really great, simple introduction. I love it. One of the things I want to comment on

00:13:50.740 --> 00:13:57.000
is just, just the, the order in which we teach people things and it teaching people how to do

00:13:57.000 --> 00:14:02.420
tracebacks is something that it really needs to be early, maybe like right before testing and right

00:14:02.420 --> 00:14:09.280
after the hello world. But seriously, tracebacks happen so fast. And, and when you start coding,

00:14:09.280 --> 00:14:14.800
uh, an assertion happens that you don't catch and you get a traceback and people panic and go,

00:14:14.900 --> 00:14:20.020
oh my God, I suck as a programmer and you don't, it's not overwhelming. Just kind of walk through

00:14:20.020 --> 00:14:24.620
it simply. And that's what this article is about is how to walk through it simply. And so we're going

00:14:24.620 --> 00:14:31.840
to, it's, if it, if people are new to Python listening to this or how to teach people, you just

00:14:31.840 --> 00:14:35.880
teach people to start at the bottom. You read the last line first. So the last line in traceback

00:14:35.880 --> 00:14:41.500
is the, error message. Let's, scroll to one on here, which is good to know because that's

00:14:41.500 --> 00:14:46.180
not true for other programming languages, the errors at the top and it, it's kind of inverted.

00:14:46.180 --> 00:14:54.220
Oh, really? I forget, but yeah. So the last line is the, the exception and then, and then also the

00:14:54.220 --> 00:14:59.520
message for the exception, if it's, if it's there and then, and then you read up and the, the next two

00:14:59.520 --> 00:15:06.680
lines up are, you've got a file name and a line number and, and then a copy of what the line is.

00:15:06.680 --> 00:15:11.640
Um, and if, and that's, that's the place where the exception actually happened. And these two double

00:15:11.640 --> 00:15:18.000
things, those two lines, the line is called, what do you call it? They're the, stack trace,

00:15:18.000 --> 00:15:25.120
the stack, whatever. Yeah. Call stack. Yeah. It's, this is the call stack. and that's even more so

00:15:25.120 --> 00:15:30.640
because you get lines within functions, right? Not just the, yeah. Yeah. And then, and then

00:15:30.640 --> 00:15:35.040
if you don't understand why you have an exception there, you just keep going up, you keep going up

00:15:35.040 --> 00:15:40.620
to, and sometimes the, the, the exception happened, not in your code, but in some, some third library

00:15:40.620 --> 00:15:46.820
call that you went called. So you're not going to debug that. So you have to debug your, your code.

00:15:46.820 --> 00:15:52.040
So you, it's good to go up enough to where it's in your code. And then if you can't figure it out,

00:15:52.040 --> 00:15:57.540
you just keep going up. and this, this example is actually not obvious to me what was going on.

00:15:57.540 --> 00:16:04.280
So I'm glad he walks through it. So Trey walks through how to read this and it goes up to,

00:16:04.280 --> 00:16:10.440
the fact that, so this is the, the example has a type error because you can't, can't Nate a string

00:16:10.440 --> 00:16:16.260
to an integer. and that's weird because it doesn't look like it's trying to do that. But,

00:16:16.260 --> 00:16:22.000
then he walks up to find out that the, the function is actually taking the standard input,

00:16:22.000 --> 00:16:28.600
um, and passing it in as a number and one of the arc Vs and you have to convert it to an int first.

00:16:28.600 --> 00:16:34.300
But so that's a, I'm glad to use that example because people new to command line interface,

00:16:34.300 --> 00:16:40.840
uh, coding often forget that, that the input is usually a string, even though you pass in a five,

00:16:40.840 --> 00:16:44.540
it's still going to be a string with a five in it. right. It looks like a number,

00:16:44.540 --> 00:16:49.180
but it's not a number. Yeah. So you have to convert those. and a reminder here,

00:16:49.180 --> 00:16:54.680
this is user input even in, so in this case, it's not going to be harmful just to convert it to an

00:16:54.680 --> 00:17:01.140
int, but, even command line in inner input is input from a user. So you have to sanitize it if

00:17:01.140 --> 00:17:03.880
you need, if you're doing anything like with a database or something. So.

00:17:03.880 --> 00:17:08.580
Absolutely. Oh, that's, that's great. I think definitely that's the kind of thing you need

00:17:08.580 --> 00:17:13.940
to start with when you're teaching people Python, like almost before you teach them to code, like

00:17:13.940 --> 00:17:19.480
how to, if you run into an error, here's how you understand it a little bit. And here's how you

00:17:19.480 --> 00:17:24.180
Google it or go about finding some way to fix it. Yeah. And if you start, especially if you start at

00:17:24.180 --> 00:17:27.880
the top, it's going to be a mess because if you've got a call stack, like 50 functions deep,

00:17:28.240 --> 00:17:32.800
hopefully not, it's going to be a really big trace back and you don't want to try to

00:17:32.800 --> 00:17:39.000
untangle all of it. Just start at the bottom. Yeah, absolutely. And Dean out in the live stream

00:17:39.000 --> 00:17:44.520
says, you know, when you use some Python wrapper on top of a Java microservice and you get a 500 line

00:17:44.520 --> 00:17:48.080
exception, you're like, what have I done wrong to deserve this? Yeah. That's like the advanced

00:17:48.080 --> 00:17:57.180
version of this. Yeah. Speaking of advanced, how about some intrigue? Ooh, yes. So you and the

00:17:57.180 --> 00:18:05.420
listeners may have heard of this person who turned out to go a little bit bonkers on their open source

00:18:05.420 --> 00:18:12.280
code, luckily in NPM and not Python. So JavaScript space. So there's colors and JS, which are two

00:18:12.280 --> 00:18:19.200
widely used, no padding margin NPM libraries used for JavaScript and no JS. Well, this developer,

00:18:19.200 --> 00:18:25.120
Marak Squires, in first, they thought it was a supply chain vulnerability and somebody hacked the

00:18:25.120 --> 00:18:30.360
account. But it turns out, no, no, no. Marak intentionally corrupted both of his libraries.

00:18:30.360 --> 00:18:37.380
So they ran in an endless loop, spitting out random political messages while it would loop around and

00:18:37.380 --> 00:18:42.160
just fill the screen with garbage. So initially thought it'd be a hack, but political and personal

00:18:42.160 --> 00:18:47.780
messages included in the code and on his related websites indicate that it may be the work of a

00:18:47.780 --> 00:18:55.040
disgruntled, lashing out developer. Wacky. Wacky. Okay. So that's not, I was not going to cover that.

00:18:55.040 --> 00:19:01.280
I saw that and I thought that that was pretty interesting. And then Mike LaFontaine points out,

00:19:01.280 --> 00:19:07.920
oh, Brian Krebs, the security guy. I just noticed that this Marak Squires seems to be the same fellow

00:19:08.020 --> 00:19:14.180
who sabotaged two of his own popular open source libraries next week. And he links to an article on,

00:19:14.180 --> 00:19:23.320
in my post, residents of Queen Holmes with suspected bomb making materials charged for some sort of like

00:19:23.320 --> 00:19:33.840
terrorism type of thing. So the same person who sabotaged their, their NPM packages, then was like in the process of

00:19:33.840 --> 00:19:40.180
making bombs and it just kind of shows you an interesting spectrum of where all this stuff lands.

00:19:40.180 --> 00:19:41.000
That's crazy, huh?

00:19:41.000 --> 00:19:42.900
Oh yeah. Weird.

00:19:42.900 --> 00:19:48.340
Yeah. Yeah. Very weird. Oh, I also forgot to point out, this is a, an extra, extra, extra section. So

00:19:48.340 --> 00:19:54.600
short, I got, I got more stuff, but the first one is the guy that went and messed up all the stuff on NPM

00:19:54.600 --> 00:20:02.340
and everybody's dependencies recently has now been charged with creating bombs in Queens, New York. So yeah,

00:20:02.440 --> 00:20:08.360
there's that. Okay. Here's one that's really positive. Andy Griffiths, don't know this person, but they posted

00:20:08.360 --> 00:20:13.940
something incredibly simple that is super helpful when you're building a websites and trying to design them.

00:20:13.940 --> 00:20:20.280
You know, you can go to inspect element and you can like hover over different parts of your page and highlight and

00:20:20.280 --> 00:20:26.520
it'll show, okay, this is actually the div here that is containing this and it has a margin. And so that's why it looks

00:20:26.520 --> 00:20:32.440
like that. Yeah. This guy posted, Hey, struggling with layout, turn on CSS outlines.

00:20:32.440 --> 00:20:40.600
It's a superpower. And all you have to do is write this incredibly simple CSS star is the CSS selector

00:20:40.600 --> 00:20:47.780
outline colon one PX solid red. And what you get is your entire site now highlights all the elements on

00:20:47.780 --> 00:20:50.680
the page. So you can figure out how to style them. Oh, that's pretty cool.

00:20:51.080 --> 00:20:55.160
Given the amount of work. Isn't that amazing? Yeah. Yeah.

00:20:55.160 --> 00:21:01.640
So I definitely think this is something I'm going to try to use when I'm working on design and stuff,

00:21:01.640 --> 00:21:07.560
because it's just so, so much easier than trying to like hunt around with like the debug tools. And then,

00:21:07.560 --> 00:21:11.720
you know, you know, you reload the page and it changes and all that. So quick tip for people there

00:21:11.720 --> 00:21:18.440
who do web stuff, Python 3 10.2 is out and there's actually a decent amount of stuff shipped in it.

00:21:18.440 --> 00:21:25.640
Uh, if I do some quick scrolly, scrolly, I would say that's like 30, 40 changes and bug fixes and so on.

00:21:25.640 --> 00:21:26.280
Wow.

00:21:26.280 --> 00:21:33.400
So things like fix hang in run test underscore impede due to race condition or fix this thing in

00:21:33.400 --> 00:21:39.400
documentation or, fixed hash lib used for security option to work correctly with the new version of

00:21:39.400 --> 00:21:46.200
open SSL, fixed memory leak in pyval.eval code EX. That sounds like it might be used a lot of places

00:21:46.200 --> 00:21:52.520
and using the conjunction with the word memory leak, that might be good to fix. Anyway, I already installed

00:21:52.520 --> 00:21:57.320
this on all my servers and have it run in production and it, nothing seemed to catch fire. So that's good.

00:21:57.320 --> 00:21:58.680
Yeah. Very good.

00:21:58.680 --> 00:22:06.840
Yeah. So, Python 3 10.2 is out. That's cool. All right. one, I think one more thing, two more,

00:22:06.840 --> 00:22:12.680
two more things related. I'm doing a YouTube series on a bunch of little short Python lessons,

00:22:12.680 --> 00:22:18.440
and I've got about a hundred videos I want to make and I've made five of them and published or scheduled

00:22:18.440 --> 00:22:26.360
them to go out already. So, I've got a list. Don't do this thing. Anyway, a bunch of little

00:22:26.360 --> 00:22:31.080
tips like parsing data with Pydantic or counting the number of occurrences of items in a list, or

00:22:31.080 --> 00:22:34.520
you've got foreign loops, convert them to list comprehensions. These are all like

00:22:34.520 --> 00:22:38.200
four minute videos that just teach you something really quick and Python. So if people are interested

00:22:38.200 --> 00:22:42.840
in that, they can click the link and then subscribe to my personal channel, not the Python bytes

00:22:42.840 --> 00:22:46.680
YouTube channel, which is awesome, but doesn't have this content, to get more of those.

00:22:46.680 --> 00:22:52.840
So that that's fun. Cool. How do you find time for all this stuff, Michael? You're like everywhere.

00:22:52.840 --> 00:22:58.840
I've been, I've been wanting to do some of these YouTube videos and just try and explore some of

00:22:58.840 --> 00:23:03.640
the ways in which people are like presenting and teaching coding for like six months. And I've just

00:23:03.640 --> 00:23:09.480
decided I'm just going to take two days and just going to do it because I've been putting off for like

00:23:09.480 --> 00:23:12.920
months. So there's that speaking of time. I also,

00:23:13.720 --> 00:23:18.760
I am controlling our stream and doing all sorts of fun stuff with like this device called a stream deck,

00:23:18.760 --> 00:23:23.400
which you may have heard of the stream deck. You have one too, right? But just not Hawaii.

00:23:23.400 --> 00:23:29.640
Stream deck is this little device here that, lets you basically set up a bunch of buttons and

00:23:29.640 --> 00:23:35.160
control things, which is super fun. And it's built for streamers and whatnot. I decided to see what you

00:23:35.160 --> 00:23:41.880
could do if, let's see, hold up the wrong link. I decided to see what you could do around,

00:23:41.880 --> 00:23:49.000
um, the stream deck and software development. So, so far I have two profiles, one for PyCharm,

00:23:49.000 --> 00:23:52.840
where you can control all sorts of things like click a button on your little device and it'll show your

00:23:52.840 --> 00:23:58.600
PRs or switch the select modes. You can write and call it multi columns and all sorts of stuff. And then

00:23:58.600 --> 00:24:03.880
also one for Jupyter that are like launch Jupyter and insert, insert your standard imports and add

00:24:03.880 --> 00:24:08.040
cells above and below and rerun them or show me the command command palette and stuff.

00:24:08.040 --> 00:24:08.600
- Neat.

00:24:08.600 --> 00:24:13.880
- So yeah, that also has a video on it as well. And people can check that out, but I've,

00:24:13.880 --> 00:24:21.480
I've got this YouTube profile, I'm not YouTube, GitHub profile, repository where it has all the

00:24:21.480 --> 00:24:26.360
profiles for, the stream deck. So if you want to download it, play with it, customize it,

00:24:26.360 --> 00:24:31.720
those are up there as well. All right. That's it for all of my extras. You got any yourself?

00:24:31.720 --> 00:24:38.760
- yeah. So I wanted to talk about, so this is a cool article by David Amos. so David's

00:24:38.760 --> 00:24:44.760
awesome. He's one of the, one of the gang, the people at real Python, but, it's the articles,

00:24:44.760 --> 00:24:51.080
three things you might not know about numbers and in Python. And, one of the, I don't know where

00:24:51.080 --> 00:24:56.440
the line is. Oh, it's near the top. It's so awesome. He's got a line that says,

00:24:56.440 --> 00:25:03.400
there's a good chance that you've used a number in one of your programs. Yeah, I think so.

00:25:03.400 --> 00:25:05.560
- This is, I, I was, I can get behind that statement.

00:25:05.560 --> 00:25:11.640
- Yeah. So one of the things that like strings have, strings have bug, like functions

00:25:11.640 --> 00:25:17.320
attached to them. They've got methods. and I, you know, we know that it's kind of different than other

00:25:17.320 --> 00:25:23.160
languages, but numbers do too. And, this is something actually I didn't, didn't occur to me

00:25:23.160 --> 00:25:28.840
that, that you can do like two bytes and stuff. So there's, there's functions that you can call on a

00:25:28.840 --> 00:25:36.840
number. There's a trick though. You can't do like 255 dot two bytes. You have to put it in a variable

00:25:36.840 --> 00:25:43.480
name so that it doesn't think it's a decimal point. and you also, or you can put parentheses around it.

00:25:43.480 --> 00:25:48.520
So you can do 255 with parentheses around it and then call, to bytes or something like that.

00:25:48.520 --> 00:25:55.000
So there's, integers have two bytes. so you can convert it to bytes. You can use the class,

00:25:55.000 --> 00:26:01.560
uh, class method from bytes, and you can also do like bit length and a bunch of other functions

00:26:01.560 --> 00:26:07.160
that are pretty cool around integers, which is neat. And then floats have their own methods. Floats have,

00:26:07.160 --> 00:26:13.400
uh, like, is an integer or is integer ratio, which era as integer ratio. So it'll convert

00:26:13.400 --> 00:26:18.360
it to an integer ratio. That's pretty cool. Oh, wow. Like the, some sort of approximation

00:26:18.360 --> 00:26:25.080
and rational numbers. Like, yeah. So, yeah, I don't have, I don't have that example pulled up,

00:26:25.080 --> 00:26:30.120
but no, but that's cool. There's some, I'm no idea about this stuff. Yeah. I've got a bunch. There's a,

00:26:30.120 --> 00:26:34.920
there's a, there'll be some links in the show notes to the, the Python documentation for these.

00:26:34.920 --> 00:26:40.760
Um, it's pretty nice. the, the, okay. So that's the first thing that you should know about

00:26:40.760 --> 00:26:45.480
numbers is there's methods there. So look them up in the documentation. and I'll, we'll have links

00:26:45.480 --> 00:26:50.440
to the documentation. And then the second thing you should know about numbers, second over the third,

00:26:50.440 --> 00:26:58.280
is numbers have hierarchy. So, there's, there's four, four abstract types in, in Python

00:26:58.280 --> 00:27:05.880
for numbers. There's complex, real, rational, and integral. So complex is the complex that most of them

00:27:05.880 --> 00:27:13.080
only have one type in it. Complex, the, abstract type of complex has complex. Real has float.

00:27:13.080 --> 00:27:20.280
Rational has fraction, but integral has both int and bool. So that's neat. their bool and ints are

00:27:20.280 --> 00:27:27.400
related. And then, but then we also have these, decimals. yeah. So there's, I wanted to find

00:27:27.400 --> 00:27:34.840
his stuff on decimal. Decimals don't fit. So decimals have their, they're not really part of this hierarchy

00:27:34.840 --> 00:27:40.420
at all, but they're, they're their own decimal class. So there's not, there's not an abstract class,

00:27:40.420 --> 00:27:45.540
but that's okay. Decimals are great. And people should remember decimal is around if you have,

00:27:45.540 --> 00:27:51.620
um, if you're working with money or something like that, use super precise science. so yeah,

00:27:51.620 --> 00:27:58.580
these are good. also, because these are just normal types, numbers are extensible. Oh,

00:27:58.580 --> 00:28:03.940
yeah. A comment about floats are weird. Yeah. those are always weird. Those are weird. Yeah.

00:28:03.940 --> 00:28:09.940
The numbers are extensible since these are class classes. You can, you can derive from them.

00:28:09.940 --> 00:28:16.100
but he comments, which is good. You have to be really careful because if you, want to extend

00:28:16.100 --> 00:28:21.860
a class, there's a whole bunch of dunder methods that you have to make sure work right. So maybe you

00:28:21.860 --> 00:28:27.300
don't want to extend it, but you can, you can make your own numeric types. So just the third thing.

00:28:27.300 --> 00:28:32.740
Anyway, kind of a neat article. I'm trying to wonder what you might actually create those for. I mean,

00:28:32.740 --> 00:28:37.940
maybe you might, well, maybe we'll create an integer that has a bounds and is an error if you try to make

00:28:37.940 --> 00:28:42.100
one too large or something. Yeah. I'm not sure. But there's cases.

00:28:42.100 --> 00:28:48.100
I'm thinking on the spot here. Yeah. Yeah. another thing that's amazing is a complex numbers

00:28:48.100 --> 00:28:53.700
are natively built into Python. Yeah. And that's, that's really great. And that's essential for a

00:28:53.700 --> 00:28:58.900
lot of scientific and, and you know, measurement work and stuff is to have complex numbers around.

00:28:58.900 --> 00:29:06.260
They're truly amazing. All right. Well, I think that's all. I mean, I already did my extras. I

00:29:06.260 --> 00:29:10.100
skipped your set here, your articles to ask you about your extras. Do you have any actual extras you

00:29:10.100 --> 00:29:14.820
want to cover? I don't have any actual extras. Have you had any dangerous encounters with like

00:29:14.820 --> 00:29:20.420
warm water? Have you maybe stubbed your toe on a rock or was there a turtle that came by or

00:29:21.060 --> 00:29:25.300
well, so they run into it like an eel. There are eels in the core in the, the reefs there that you

00:29:25.300 --> 00:29:29.220
might want to stay. So I've, I've only been here a couple of days so far. We've been, I've been swimming

00:29:29.220 --> 00:29:35.220
a couple of times right out, right. Like you can, you have to look down, not across to see the beach from,

00:29:35.220 --> 00:29:40.420
from where I'm staying. and so I went swimming right here. it's got, it's kind of fun because

00:29:40.420 --> 00:29:45.060
it drops off right away. So there's a little beach and then it drops, it drops deeper right away.

00:29:45.060 --> 00:29:50.900
And that's, but it's not like a big current. So you can swim really with only going out a few feet,

00:29:50.900 --> 00:29:55.220
which is nice. And then we went to another beach that was like shallow for a long time,

00:29:55.220 --> 00:30:00.820
but then it had coral and stuff. And that was really fun to scuba diet or to not scuba, but,

00:30:00.820 --> 00:30:05.540
snorkel over, and look around. But if you're just wanting to walk out,

00:30:05.540 --> 00:30:12.420
that coral is like tough to walk on and it hurts. Yeah. That stuff's super sharp. Yeah. But

00:30:12.420 --> 00:30:18.180
having, having a lot of fun. Awesome. Good to hear. Well, I think we should round it out with,

00:30:18.180 --> 00:30:23.620
uh, one or two things here. We got, some jokes. Now I saw Josh out in the audience and he sent in

00:30:23.620 --> 00:30:28.340
some jokes, which we'll make part of this soon, but, I didn't have time for this episode. So we got

00:30:28.340 --> 00:30:35.460
four. Oh, really? Book covers. I love these. Not the O'Reilly. Cause you know, the O'Reilly books,

00:30:35.460 --> 00:30:41.700
they always have an animal and a title and whatnot. So, oh, really are takes that kind of,

00:30:41.700 --> 00:30:46.500
puts a funny spin on it. I'll do this first one. We got 40. Maybe we could do two each. So the

00:30:46.500 --> 00:30:53.220
first one here has a platypus on the screen. It says the little subtitle is the quote is the original

00:30:53.220 --> 00:30:58.580
developer isn't here for a reason. And the title is losing your will to live a code maintenance guide.

00:30:58.580 --> 00:31:02.980
Yes. Written, written by the intern.

00:31:02.980 --> 00:31:10.980
The intern. All right. You want to take this one? so the, the title is, expert vague

00:31:10.980 --> 00:31:17.060
understanding of computer science, probably be able to explain a sorting algorithm if it ever comes up.

00:31:17.060 --> 00:31:24.180
Uh, by the practical dev. Yeah. By the practical dev. Very good. Very good. Okay. The next one

00:31:24.180 --> 00:31:32.340
is an elephant. Very proud speaking out loudly. It depends. The definitive guide, the answer to

00:31:32.340 --> 00:31:40.900
every programming question ever conceived. It's a short book. Exactly. All right. bring it,

00:31:40.900 --> 00:31:46.900
bring us home with this last one. Okay. So, works on my machine, the definitive guide,

00:31:46.900 --> 00:31:54.340
how to convince your manager. yeah, I love it. Very good. Very good. Yeah. Well,

00:31:55.620 --> 00:31:59.860
Brian, everyone listening, almost everyone is jealous. I'm sure there's some people in Hawaii,

00:31:59.860 --> 00:32:04.020
like, yeah, I just go there every day, but most other people are probably jealous,

00:32:04.020 --> 00:32:09.060
where you get the record from today. So thanks for making the time. Thank you. it's fun.

00:32:09.060 --> 00:32:14.100
Always fun to be here with a Python bytes people. Thanks for listening to Python bytes. Follow the

00:32:14.100 --> 00:32:21.300
show on Twitter via at Python bytes. That's Python bytes as in B Y T E S. Get the full show notes over at

00:32:21.300 --> 00:32:27.220
Python bytes. If you have a news item we should cover, just visit Python bytes.fm and click submit

00:32:27.220 --> 00:32:31.460
in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for

00:32:31.460 --> 00:32:37.140
the live recording, just visit the website and click live stream to get notified of when our next episode

00:32:37.140 --> 00:32:44.020
goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and

00:32:44.020 --> 00:32:49.140
Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and

