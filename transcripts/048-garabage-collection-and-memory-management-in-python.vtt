WEBVTT

00:00:00.001 --> 00:00:05.540
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.540 --> 00:00:09.180
This is episode 48, recorded October 18th, 2017.

00:00:09.180 --> 00:00:10.700
I'm Michael Kennedy.

00:00:10.700 --> 00:00:11.600
And I'm Brian Okken.

00:00:11.600 --> 00:00:14.640
And we've got a bunch of awesome stuff lined up for you.

00:00:14.640 --> 00:00:16.700
We're both dialing in from Portland, Oregon.

00:00:16.700 --> 00:00:20.540
We've scoured the internet, and we're going to start with some graphs.

00:00:20.540 --> 00:00:23.320
But before we do, let's just say really quick a thanks to DigitalOcean.

00:00:23.320 --> 00:00:25.020
A big thanks to DigitalOcean. Thanks.

00:00:25.020 --> 00:00:29.220
Yeah, they totally blew S3 out of the water, and they've got an awesome thing called Spaces.

00:00:29.360 --> 00:00:30.260
We'll tell you more about it later.

00:00:30.260 --> 00:00:32.040
Right now, I want to hear about cool graphs.

00:00:32.040 --> 00:00:40.020
Well, I came across this last week a website called Python-graph-gallery, the Python Graph Gallery.

00:00:40.020 --> 00:00:42.480
And it is cool.

00:00:42.480 --> 00:00:49.720
I was describing it as graph examples times your head explodes with options.

00:00:49.720 --> 00:00:53.820
But you've got a whole bunch of different types of graphs you want to do.

00:00:53.820 --> 00:00:57.940
There are all sorts of different types of graphs that you see around the internet.

00:00:58.720 --> 00:01:00.360
Basically, to help you visualize your data.

00:01:00.360 --> 00:01:04.100
You've got kind of the standard ones, like histogram and stuff, or box plot.

00:01:04.100 --> 00:01:12.480
But then you also have really cool ones like 2D density plots, or bubble plots, or connected graphs, or core-logram.

00:01:12.480 --> 00:01:14.200
Yeah, there's amazing stuff here.

00:01:14.200 --> 00:01:18.780
And they all come with iPython little scripts, right?

00:01:18.780 --> 00:01:20.500
If you click on them, they get the details.

00:01:20.620 --> 00:01:23.160
You dive down into exactly what you want to do.

00:01:23.160 --> 00:01:31.680
And then you can go in, and it shows you exactly how to make those plots within Matplotlib and, I think, in iPython.

00:01:31.680 --> 00:01:33.200
But that's the same thing, right?

00:01:33.200 --> 00:01:39.340
But then also, some of them have, like, they'll explain how to do something, and then they have alternates.

00:01:39.340 --> 00:01:41.060
And there's some opinion there.

00:01:41.160 --> 00:01:42.840
Some of the graphs they don't really like.

00:01:42.840 --> 00:01:46.820
And they'll tell you why they don't like them and what some good alternatives are.

00:01:46.820 --> 00:01:47.040
Yeah.

00:01:47.040 --> 00:01:49.540
Another thing that's cool about it is you go to one graph.

00:01:49.540 --> 00:01:52.560
You're like, huh, I think I need a bar chart or something like that.

00:01:52.560 --> 00:01:53.020
And they pull it up.

00:01:53.020 --> 00:01:54.480
It says, these are the related ones?

00:01:54.480 --> 00:01:55.820
And you're like, oh, this one is way cooler.

00:01:55.820 --> 00:01:56.760
I didn't even know about it.

00:01:56.800 --> 00:02:02.660
Maybe I haven't read the Tough Day Visualizing Information book, and I don't know of all the options, right?

00:02:02.660 --> 00:02:03.560
And you can discover them.

00:02:03.560 --> 00:02:04.020
I like that.

00:02:04.020 --> 00:02:04.340
Yeah.

00:02:04.340 --> 00:02:06.860
And then, like, it includes some of the extensions.

00:02:06.860 --> 00:02:10.500
Like, I just dove into seeing how to do a vertical histogram.

00:02:10.500 --> 00:02:16.800
And it mentions that you need to have the Seaborn library and use it for these.

00:02:16.800 --> 00:02:17.720
Yeah.

00:02:17.720 --> 00:02:18.480
It looks pretty cool.

00:02:18.480 --> 00:02:18.920
It's great.

00:02:18.920 --> 00:02:19.160
Yeah.

00:02:19.160 --> 00:02:25.420
And I guess there's also some R ones out there, like an R part that's sort of tied to it somehow as well if you do R.

00:02:25.540 --> 00:02:31.020
But, yeah, I've been thinking a lot about doing some stuff recently that would require some really cool interactive graphs.

00:02:31.020 --> 00:02:33.300
So this definitely catches my interest.

00:02:33.300 --> 00:02:33.580
Yeah.

00:02:33.580 --> 00:02:33.920
All right.

00:02:33.920 --> 00:02:36.040
So check out the Python graph gallery.

00:02:36.040 --> 00:02:36.480
That's cool.

00:02:36.480 --> 00:02:38.020
Moving on to the next one.

00:02:38.020 --> 00:02:40.260
Brian, do you know what Kinesis streams are?

00:02:40.260 --> 00:02:40.800
I don't.

00:02:40.800 --> 00:02:43.780
I do have a Kinesis keyboard, but I don't think that's related at all.

00:02:43.780 --> 00:02:45.460
Kinesis keyboards are wild, man.

00:02:45.460 --> 00:02:48.960
I have the Sculpt Economic mini thing from Microsoft.

00:02:48.960 --> 00:02:49.960
I used to have one of those.

00:02:49.960 --> 00:02:53.400
But Kinesis streams are these things that AWS released.

00:02:53.520 --> 00:03:03.100
And the idea is you can, like, stream tons of real-time data through it and apply filters and transformations and get additional sort of real-time insights.

00:03:03.100 --> 00:03:16.460
So, like, under the description, it'll say things like, you can continuously capture and store terabytes of data per hour from hundreds of thousands of sources, such as web click streams, financial transactions, social media feeds, et cetera, et cetera.

00:03:17.180 --> 00:03:18.900
So this sounds like a really cool service.

00:03:18.900 --> 00:03:20.000
You can go sign up for it, AWS.

00:03:20.000 --> 00:03:27.440
It looks like, at least the folks that sent in this recommendation say, look, it really requires Java right now for the API to do it.

00:03:27.760 --> 00:03:29.500
So they felt that that was wrong.

00:03:29.500 --> 00:03:35.200
And they created this thing called Kinesis for Python APIs talking to Kinesis streams.

00:03:35.200 --> 00:03:35.700
How about that?

00:03:35.700 --> 00:03:36.300
That's great.

00:03:36.300 --> 00:03:36.560
Yeah.

00:03:36.560 --> 00:03:44.980
So if you're out there and you've got tons of data streaming in, and especially if you're already an AWS customer, you already have an account, you already work there, maybe your apps run there, then it's really cool.

00:03:45.140 --> 00:03:47.880
So this library does some cool stuff.

00:03:47.880 --> 00:03:50.120
It's worked for 2.7 and 3.6.

00:03:50.120 --> 00:03:52.360
It has a Django extension helper.

00:03:52.360 --> 00:03:55.960
It automatically detects shard changes.

00:03:55.960 --> 00:03:57.340
So, like, this thing can do sharding.

00:03:57.340 --> 00:03:58.840
It'll, like, adjust for that.

00:03:58.840 --> 00:04:00.260
It'll create checkpoints.

00:04:00.260 --> 00:04:04.360
And even has a dummy Kinesis implementation for testing.

00:04:04.360 --> 00:04:04.840
How about that?

00:04:04.840 --> 00:04:05.380
That's great.

00:04:05.380 --> 00:04:05.920
That's cool.

00:04:05.920 --> 00:04:06.360
Yeah.

00:04:06.360 --> 00:04:08.840
And this is an open source project, too.

00:04:08.840 --> 00:04:11.260
So you can extend on it if you need to.

00:04:11.260 --> 00:04:11.740
Right on.

00:04:11.740 --> 00:04:12.560
Yeah, it's pretty new.

00:04:12.700 --> 00:04:15.640
But check it out, and thanks for recommending Kinesis.

00:04:15.640 --> 00:04:18.320
I forgot the guy who sent it in over Twitter, but, yeah, thank you.

00:04:18.320 --> 00:04:18.700
It's awesome.

00:04:18.700 --> 00:04:27.880
So one of the more mysterious things, I think, in Python, relative to, say, other languages, like C, for example, is how memory works, right?

00:04:27.880 --> 00:04:30.940
Like, in C, I call malloc or I call free.

00:04:30.940 --> 00:04:34.540
In Python, I just do stuff and, like, I never run out of memory.

00:04:34.540 --> 00:04:35.200
That's kind of cool.

00:04:35.200 --> 00:04:36.460
Yeah, it is cool.

00:04:36.460 --> 00:04:39.360
But it has some downsides, a little bit, I guess.

00:04:39.360 --> 00:04:40.240
Not really.

00:04:40.240 --> 00:04:41.560
At least some complexity, right?

00:04:41.560 --> 00:04:42.020
Yeah.

00:04:42.220 --> 00:04:44.220
Well, and it hides that complexity from the users.

00:04:44.220 --> 00:04:57.260
But there's, especially when you have an application or a service or something that's a long-running Python application, you kind of have to care about what's going on and make sure that you don't continually grow in memory.

00:04:57.260 --> 00:05:02.660
There's an article that we're going to link to called Things You Need to Know About Garbage Collection in Python.

00:05:03.240 --> 00:05:04.240
And it just came out recently.

00:05:04.240 --> 00:05:09.460
And I sat down with a cup of coffee this morning and really read it and tried to grok it.

00:05:09.460 --> 00:05:12.860
And I think it helped me a lot to understand how Python does.

00:05:12.860 --> 00:05:14.940
There's two levels of garbage collection.

00:05:14.940 --> 00:05:21.080
There's the automatic stuff that's just, if an object goes out of scope, it disappears.

00:05:21.080 --> 00:05:24.120
And then Python can reclaim that memory.

00:05:24.580 --> 00:05:31.240
And there's something about, like, it treats small objects, like under 512 bytes, a little different to save time.

00:05:31.240 --> 00:05:32.760
And that's cool.

00:05:32.760 --> 00:05:37.540
But then there's this other thing to detect loops and other dead memory.

00:05:37.540 --> 00:05:44.660
Because reference counting, you can have objects point to each other and you can get these loops of memory that just sit around forever.

00:05:45.260 --> 00:05:54.000
And so there's this other system, the generational garbage collector that goes through and looks for all of these dead items and cleans them out.

00:05:54.000 --> 00:05:55.900
And that runs periodically.

00:05:55.900 --> 00:05:59.460
But that one you can control if you need to.

00:05:59.460 --> 00:06:06.340
If you really can't handle it going off and doing its own thing, you can turn it off and call it yourself once in a while if you need to.

00:06:06.340 --> 00:06:15.860
What's really interesting about this is one of the benefits of, like, C or C++ really is you get total deterministic behavior.

00:06:15.860 --> 00:06:18.340
But the drawback is you've got to manage it manually.

00:06:18.340 --> 00:06:23.600
With reference counting, you get also totally deterministic behavior, right?

00:06:23.600 --> 00:06:26.160
You run it many times, it's going to behave the same way exactly.

00:06:26.160 --> 00:06:28.980
So if you're doing something as timing that really matters, that's cool.

00:06:28.980 --> 00:06:34.140
The reference counting GCs or reference counting algorithm has the problem of cycles.

00:06:34.140 --> 00:06:41.280
So if I have, like, a parent-child relationship, they're always going to have at least one reference because parent knows a child, child knows a parent.

00:06:41.280 --> 00:06:43.160
So that thing's never going to go to zero and will leak.

00:06:43.160 --> 00:06:46.720
So you have this secondary, like, mark-and-sweep garbage collector type thing that comes in.

00:06:46.720 --> 00:06:51.640
And I think it's really interesting how they've chosen, like, this combination.

00:06:51.640 --> 00:06:57.580
And the mark-and-sweep garbage collector is similar to, like, .NET or Java, which is that's all they have over there, right?

00:06:57.580 --> 00:06:58.200
I didn't know.

00:06:58.200 --> 00:06:58.640
Yeah, yeah.

00:06:58.640 --> 00:07:02.620
Those two basically work in this generational garbage collector way, very similar.

00:07:02.800 --> 00:07:05.820
I don't know that it's exactly the same, but it's similar for Java and .NET.

00:07:05.820 --> 00:07:08.920
But that's not the main way it works.

00:07:08.920 --> 00:07:10.980
So I think that that's actually pretty interesting.

00:07:10.980 --> 00:07:15.920
I mean, the article here doesn't go into too much depth, but deep enough to where you can understand it.

00:07:15.920 --> 00:07:23.580
And it's really, I thought, you know, I knew that you could mess around with stopping the garbage collector and – or the generational one.

00:07:23.580 --> 00:07:26.080
And controlling that yourself.

00:07:26.080 --> 00:07:27.340
But I didn't know how to do it.

00:07:27.400 --> 00:07:28.600
And it's really not that complicated.

00:07:28.600 --> 00:07:29.840
It's a few lines of code is all.

00:07:29.840 --> 00:07:30.120
Yeah.

00:07:30.120 --> 00:07:32.180
There's a couple of neat things about this article.

00:07:32.180 --> 00:07:42.980
One is there are some very nice specifics, like, did you know the objects that are equal to or smaller than 512 bytes have a different allocator and mechanism, right?

00:07:42.980 --> 00:07:49.080
Like, knowing that cutoff and those sorts of things and knowing when the GC kicks in and when to turn it off.

00:07:49.140 --> 00:07:50.620
Like, there's also a lot of references.

00:07:50.620 --> 00:07:52.860
Like, if you don't know more about this, read about this section.

00:07:52.860 --> 00:07:54.880
If you don't know more about this, read about this section.

00:07:54.880 --> 00:07:57.380
So I think this is a great place to start this exploration.

00:07:57.380 --> 00:08:01.460
And then at the end, it talks about how to find these – you know, these cycles are bad.

00:08:01.460 --> 00:08:05.180
And you kind of want to get those out of your code if you really want to care about this a lot.

00:08:05.180 --> 00:08:13.880
And it talks about how to do – how to go about looking for that stuff and visualizing it so you can try to find these cycles in your code and get rid of them.

00:08:13.880 --> 00:08:14.720
That's cool.

00:08:14.720 --> 00:08:25.240
Yeah, and the other thing to consider when you're thinking about stuff, especially if it kicks into the actual mark and sweep cycle, garbage collector type thing, is algorithms and data structures.

00:08:25.240 --> 00:08:30.040
So you can have a data structure that is, like, many, many objects that point at each other.

00:08:30.040 --> 00:08:31.980
Think of, like, linked list type of things.

00:08:31.980 --> 00:08:36.820
There's tons of work to process those if you've got ginormous ones.

00:08:36.820 --> 00:08:40.180
It's tons of work to process and determine if that's garbage, right?

00:08:40.260 --> 00:08:48.460
You might be able to, like, use a sparse array or something that uses almost new pointers but stores the same data and, you know, is more efficient.

00:08:48.460 --> 00:08:51.120
So there's a lot of interesting follow-on things to explore here.

00:08:51.120 --> 00:08:56.780
And again, yeah, and this is mostly a concern with people that have long-running Python applications.

00:08:56.780 --> 00:09:00.160
For short-running things, it's not a problem.

00:09:00.160 --> 00:09:01.500
So you don't really have to care about it.

00:09:01.500 --> 00:09:01.760
Yep.

00:09:01.960 --> 00:09:05.260
Also, another final thought is you said you can turn off the garbage collector.

00:09:05.260 --> 00:09:08.600
I think, was it Instagram that turned off the garbage collector?

00:09:08.600 --> 00:09:16.120
In their system, it was either, I feel like it was Instagram or Quora, one of those people, one of those companies turned off the garbage collector.

00:09:16.120 --> 00:09:25.200
And they found they were able to get much better memory reuse on Linux across the processes and actually was better off by just letting the cycles leak.

00:09:25.200 --> 00:09:27.860
In this article, you can determine it yourself.

00:09:27.860 --> 00:09:31.360
You can have predetermined times where you're going to go out and let it run.

00:09:31.480 --> 00:09:31.640
Yep.

00:09:31.640 --> 00:09:32.340
Pretty interesting.

00:09:32.340 --> 00:09:33.940
You know what else is interesting?

00:09:33.940 --> 00:09:35.060
Spaces.

00:09:35.060 --> 00:09:36.560
Yeah, it is.

00:09:36.560 --> 00:09:37.580
Spaces is pretty awesome.

00:09:37.580 --> 00:09:37.740
Yeah.

00:09:37.740 --> 00:09:41.840
So like this audio you guys all are listening to came over DigitalOcean Spaces.

00:09:41.840 --> 00:09:44.720
And if you're familiar with S3, this is like S3 but way better.

00:09:44.720 --> 00:09:47.500
So very deterministic pricing.

00:09:47.500 --> 00:09:52.400
You pay $5 a month for a terabyte of outbound traffic, no inbound traffic.

00:09:52.400 --> 00:09:59.020
And beyond that, it's like one-ninth the price of bandwidth and traffic for S3.

00:09:59.200 --> 00:10:02.780
So if you're using S3 now, definitely consider DigitalOcean Spaces.

00:10:02.780 --> 00:10:04.460
They're doing really cool stuff there.

00:10:04.460 --> 00:10:10.200
All the APIs, the libraries, and the tools that work against S3 also work against Spaces.

00:10:10.200 --> 00:10:12.580
They've made that sort of a compatibility layer for them.

00:10:13.040 --> 00:10:14.400
So I've been using it.

00:10:14.400 --> 00:10:15.380
I really, really like it.

00:10:15.380 --> 00:10:19.720
And I definitely encourage you to check it out at do.co slash Python.

00:10:19.720 --> 00:10:20.940
It helps support the show.

00:10:20.940 --> 00:10:23.020
And like I said, I think it's pretty awesome.

00:10:23.580 --> 00:10:25.620
So let's talk about the web for a little bit.

00:10:25.620 --> 00:10:34.440
We've, you know, many times we've touched on asynchronous programming of one variety, another threads, multiprocessing, asyncio type of things.

00:10:34.780 --> 00:10:45.500
But the truth is that on the web, almost all of the things, all the frameworks are built in a way that cannot take advantage of that at all.

00:10:45.500 --> 00:10:47.180
Or very, very rarely, I guess.

00:10:47.180 --> 00:10:51.500
Because they're built upon WSGI, the web service gateway interface.

00:10:51.500 --> 00:10:56.240
And that basically has a single serial function call for each request.

00:10:56.240 --> 00:10:57.520
And that's that.

00:10:57.520 --> 00:11:04.000
There's really not much of a way to expand or to change how the web processing works.

00:11:04.000 --> 00:11:12.780
So like if you want to do maybe some async and await on like database calls or against web services, like requests, you could do that with requests, for example.

00:11:12.780 --> 00:11:19.620
That's basically not going to have any effects that's still going to be blocking somewhere along in this WSGI request.

00:11:19.740 --> 00:11:22.600
There's no way for the server to take advantage of that.

00:11:22.600 --> 00:11:27.700
Some of the servers use threads, like micro-WSGI, but still, it's not nearly the same level of benefit.

00:11:27.700 --> 00:11:35.400
So there's this article I want, or series, I guess, that's starting to come out here called WSGI is not enough anymore.

00:11:35.400 --> 00:11:38.940
I'm referencing part one and part two, and part one really lays out the problem.

00:11:38.940 --> 00:11:40.780
Basically, there are two problems.

00:11:40.780 --> 00:11:44.340
One is concurrency, right, which I just described.

00:11:44.340 --> 00:11:47.920
The other problem really is that HTTP isn't the only protocol anymore.

00:11:48.460 --> 00:11:55.940
So things like web sockets and other multi-bidirectional communication and binary stuff is happening.

00:11:55.940 --> 00:11:58.240
That's also not supported by WSGI, right?

00:11:58.240 --> 00:12:06.780
So this article and series sort of explores how do we solve this with event-driven programming, and they're not quite done.

00:12:06.780 --> 00:12:08.960
They're still working on it, but I thought it was a cool thing.

00:12:09.060 --> 00:12:16.780
So the next session, the next thing that's coming out is talking about libraries to solve the concurrency problem in Python and then onward to the other things.

00:12:16.780 --> 00:12:17.700
So pretty cool.

00:12:17.700 --> 00:12:19.100
Yeah, that's very interesting.

00:12:19.100 --> 00:12:28.260
I can't wait for the day when these things really unlock because we talk about things like async and await, and they're pretty cool, but they're really hard to make practical use of.

00:12:28.260 --> 00:12:35.900
Once the web server requests themselves can participate in these async event loops, then it's on, right?

00:12:35.900 --> 00:12:38.660
It just breaks open, and all sorts of amazing stuff can happen.

00:12:38.660 --> 00:12:47.220
So I guess I didn't realize that these frameworks couldn't take advantage of web sockets, or can they with add-on libraries or something?

00:12:47.480 --> 00:12:53.120
Yeah, you've got to set up some kind of separate server, and I can't remember what it's called, unfortunately.

00:12:53.120 --> 00:13:01.360
But they can send it over, say, you know, we're going to upgrade this to a socket, so send it over to this separate process, like the separate server type of thing.

00:13:01.360 --> 00:13:04.640
There's a lot of work to juggle these different protocols right now.

00:13:04.640 --> 00:13:07.040
So yeah, it'll be nice when that's more seamless.

00:13:07.040 --> 00:13:08.700
Well, I'll have to follow along with these.

00:13:08.700 --> 00:13:09.180
This is great.

00:13:09.180 --> 00:13:09.460
Yeah.

00:13:09.460 --> 00:13:15.520
And for now, we can use things like queues even for a little asynchronous concurrency, drop off a little job and pick it back up.

00:13:15.680 --> 00:13:20.040
I was in the looking for a queue, a last-in, first-out queue.

00:13:20.040 --> 00:13:22.560
I needed that for a project I was working on.

00:13:22.560 --> 00:13:24.800
I just needed it as a data structure.

00:13:24.800 --> 00:13:27.340
I didn't have different producers and consumers.

00:13:27.340 --> 00:13:34.580
I just had one part of the program where I was collecting stuff and another part where I had to get it out last-in, first-out.

00:13:34.580 --> 00:13:41.660
So I was looking around, and there was an article from Dan Bader, and it's called Queues in Python.

00:13:41.660 --> 00:13:44.960
And it's a decent – I guess I'd just forgotten about a lot of this stuff.

00:13:45.620 --> 00:13:54.160
And it kind of goes over lists using how to use queues in Python and how to use them, how to use a list, how to use the queue library.

00:13:54.160 --> 00:13:56.380
There's actually a queue built-in library.

00:13:56.380 --> 00:14:01.080
And the collections deck also is something you can use.

00:14:01.080 --> 00:14:03.320
The deck is a doubly-linked list.

00:14:03.920 --> 00:14:06.060
And then it talks about pretty much how to use them.

00:14:06.060 --> 00:14:07.740
And it's a pretty good article.

00:14:07.740 --> 00:14:13.880
And it mentions that you can use all of these for last-in, first-out, but I didn't quite know how to use those.

00:14:13.880 --> 00:14:25.220
So I went ahead and explored all the different ways to use these three as – or just a way to use these three as a last-in, first-out queue and threw it in the show notes.

00:14:25.580 --> 00:14:27.000
Yeah, it's really cool, really simple.

00:14:27.000 --> 00:14:32.420
I think knowing about data structures and especially knowing about the built-in ones is really valuable.

00:14:32.420 --> 00:14:37.640
And I feel like we've been doing Python for a long time, but I still continuously learn about these things.

00:14:37.880 --> 00:14:43.180
It's good to come back when you start using the data structures you're just using all the time and you need something else.

00:14:43.180 --> 00:14:45.720
Going ahead and looking what's around is neat.

00:14:45.720 --> 00:14:48.640
I was also curious about timing.

00:14:48.640 --> 00:14:58.640
So I went ahead on a sample program and timed all these to see with, like, some huge objects I was throwing in there to see if any of them were faster or slower.

00:14:58.640 --> 00:15:02.400
And with small objects, they're all kind of about the same.

00:15:03.020 --> 00:15:09.320
And with large objects, it looks like the collections deck is a tad bit faster for my use.

00:15:09.320 --> 00:15:12.620
But none of them are really out of the ballpark slower.

00:15:12.620 --> 00:15:19.420
So to me, the deck has the best – just the best interface because you can just iterate over it when it looks cleaner.

00:15:19.420 --> 00:15:21.200
But that was my opinion.

00:15:21.200 --> 00:15:22.180
Yeah, that's really cool.

00:15:22.180 --> 00:15:23.840
Thanks for pointing that out.

00:15:23.840 --> 00:15:25.160
All right.

00:15:25.160 --> 00:15:28.260
I want to sort of close this out with something kind of meta.

00:15:28.260 --> 00:15:32.580
So on our podcast, I want to talk about a new podcast.

00:15:32.580 --> 00:15:40.120
So a guy named Mark Weiss created a podcast called Using Reflection, a podcast about humans and engineering.

00:15:40.120 --> 00:15:47.680
So he started out interviewing Jesse Davis from MongoDB, one of the main Python guys in the space.

00:15:47.680 --> 00:15:50.700
So there's a really cool interview about him.

00:15:50.700 --> 00:15:57.980
And if you're thinking about – you want to look at these notable people on how they've become leaders within their companies or within their industry,

00:15:57.980 --> 00:16:01.060
and you want to sort of explore that journey with them, it's a pretty cool podcast.

00:16:01.060 --> 00:16:02.820
So I thought I'd give a shout-out to it.

00:16:02.820 --> 00:16:09.460
I listened to a couple episodes, and I like his interview style, and it's very conversational and laid back.

00:16:09.460 --> 00:16:09.980
It's cool.

00:16:09.980 --> 00:16:14.520
Yeah, it's like you just kick back, grab a coffee with the two guys, and you just don't say anything because they can't hear you.

00:16:14.520 --> 00:16:14.740
Yeah.

00:16:14.740 --> 00:16:16.760
You can say stuff, but they still don't hear you.

00:16:16.760 --> 00:16:18.760
Yeah.

00:16:18.760 --> 00:16:19.180
Yeah, who knows?

00:16:19.180 --> 00:16:20.200
That's awesome.

00:16:20.200 --> 00:16:20.840
All right.

00:16:20.840 --> 00:16:21.960
So, yeah, check out Using Reflection.

00:16:22.120 --> 00:16:23.420
It's a cool podcast.

00:16:23.420 --> 00:16:24.220
All right.

00:16:24.220 --> 00:16:25.900
So I guess that's it for our news this week, Brian.

00:16:25.900 --> 00:16:27.940
Anything else you got you want to share with the people?

00:16:27.940 --> 00:16:29.360
I got nothing this week.

00:16:29.360 --> 00:16:31.820
No more book writing, just hanging out at the zoo now, huh?

00:16:31.820 --> 00:16:32.540
That was fun.

00:16:32.540 --> 00:16:38.400
If, you know, your idea of fun is trying to herd six eight-year-olds around a zoo for a day, then it was fun.

00:16:38.400 --> 00:16:39.560
Oh, give me a tricky bug.

00:16:39.560 --> 00:16:40.480
I'll take that instead.

00:16:42.360 --> 00:16:50.880
Yeah, so, you know, last week I talked about, I announced my free MongoDB course at freemongodbcourse.com, and that thing has been going super well.

00:16:50.880 --> 00:16:53.420
Like, over 5,000 people have taken that course in a week.

00:16:53.420 --> 00:16:54.300
That's pretty amazing.

00:16:54.300 --> 00:17:01.640
I have to admit that I was doing your longer Mongo course, and I thought I'd watch this first.

00:17:01.640 --> 00:17:03.460
So I've started it myself.

00:17:03.460 --> 00:17:04.960
I'm one of those signups.

00:17:04.960 --> 00:17:05.680
Oh, cool.

00:17:05.680 --> 00:17:08.500
You're like, I don't know what that person is.

00:17:08.500 --> 00:17:10.600
Cool.

00:17:10.600 --> 00:17:11.100
Very nice.

00:17:11.100 --> 00:17:12.340
Yeah, people seem to be enjoying it.

00:17:12.340 --> 00:17:14.680
So I'm glad everyone could take advantage of it.

00:17:14.680 --> 00:17:15.900
I'm glad you put that out there.

00:17:15.900 --> 00:17:17.740
It's really cool, and people should check it out.

00:17:17.740 --> 00:17:18.240
Yeah, thanks.

00:17:18.240 --> 00:17:21.160
All right, well, I guess until next week, Brian.

00:17:21.160 --> 00:17:22.640
Yeah, talk to you next week.

00:17:22.640 --> 00:17:23.460
All right, talk to you next week.

00:17:23.460 --> 00:17:26.940
Thank you for listening to Python Bytes.

00:17:26.940 --> 00:17:29.520
Follow the show on Twitter via at Python Bytes.

00:17:29.520 --> 00:17:32.400
That's Python Bytes as in B-Y-T-E-S.

00:17:32.400 --> 00:17:35.840
And get the full show notes at pythonbytes.fm.

00:17:35.840 --> 00:17:40.160
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:17:40.300 --> 00:17:42.880
We're always on the lookout for sharing something cool.

00:17:42.880 --> 00:17:46.260
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:17:46.260 --> 00:17:49.880
Thank you for listening and sharing this podcast with your friends and colleagues.

