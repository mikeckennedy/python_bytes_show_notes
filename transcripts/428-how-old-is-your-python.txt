00:00:00 Hey, Brian. Hey, everyone.

00:00:01 Hey.

00:00:01 Happy summer.

00:00:02 It's lovely. Been working in the garden.

00:00:04 I know. Me too.

00:00:05 I have six bags of leaves I've piled up outside.

00:00:09 It's only a tiny corner of my yard that I...

00:00:12 Yeah, there's a lot of leaves.

00:00:13 Welcome to Oregon.

00:00:14 Okay.

00:00:15 Let's do it. Let's kick off the show.

00:00:17 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:22 This is episode 428, recorded April 14th, 2025.

00:00:28 I'm Michael Kennedy.

00:00:29 And I am Brian Okken.

00:00:30 This episode is brought to you by Posit and Posit Connect.

00:00:34 Thank you to Posit for supporting the show.

00:00:35 We will tell you more about them later.

00:00:38 If you're a social type and you want to connect with us socially, you can do so on Mastodon and Blue Sky.

00:00:46 You can join us on YouTube at pythonbytes.fm/live, usually on Monday at 10, today a few minutes later, but generally around there.

00:00:54 You can also catch the older episodes.

00:00:55 Every episode page has YouTube trailer or poster you can click.

00:00:59 And finally, if you want our increasingly cool artisanal handcrafted digest of what is going on, put together by the one and only Brian Okken, join our friends of the show mailing list, go to the website, click newsletter, sign up.

00:01:13 More and more people are writing in Brian and say they like the newsletter.

00:01:16 That's great.

00:01:16 Yeah, I think it's really good.

00:01:17 I like it.

00:01:18 I do too.

00:01:18 I'm glad we're doing it.

00:01:19 I wish maybe other people might learn how to write Git commit messages better.

00:01:23 Well, honestly.

00:01:24 I'm trying.

00:01:25 I'm learning.

00:01:25 but let's get going uh so i'm going to cover a something by chris beams um how to write a get commit message and oh man i probably write like a dozen get commits commit messages a day maybe you know from one to a dozen um and uh so i was interested to see how to do it better so uh the there's an xkcd at the top which is you know just gibberish the first commit message is created main loop and timing control is pretty good.

00:01:58 And then by the end, like the most recent is like, hey, hands, just something.

00:02:03 Here I have code, more code.

00:02:05 Ah, my hands are typing words.

00:02:08 And one of the things that, this isn't part of the article, but one of the things I enjoy is being able to be fun with my commit messages when I'm just doing, when I'm doing it on a branch, that I'm just doing it for local saves essentially.

00:02:21 And then I squash it into a main branch and I really want the squashed commit message because that's the one that'll stay there to be really good.

00:02:28 So when you want to write a good commit message, here's what you have.

00:02:32 And there's like seven tips or seven rules, but I was intrigued by like the first one.

00:02:37 So like, for example, at the top, there's an example of kind of a run-on commit message that you have to kind of like scroll to the right to see all of it, huge commit message, not good.

00:02:49 And then some better ones that are shorter.

00:02:51 So how do we get that?

00:02:54 And having included, have like good information.

00:02:57 Well, one of the things that I didn't really, I didn't know about, and I learned from reading this is that if you separate the subject and body with a blank line, so the top line is get will, or get and a lot of get tools recognize everything up to the first blank line as the title of your commit message.

00:03:19 So in the example, there's an example with like just one line, the short line, and then a blank line, and then the rest of it, that your log and everything will just show that one line.

00:03:31 And then it doesn't show the rest of it unless you should like click for details or something.

00:03:36 Really cool.

00:03:36 I didn't know this did this.

00:03:37 So that's great.

00:03:39 So separate the subject and body with a blank line.

00:03:42 Limit subject line to 50 characters.

00:03:45 I think that's just to keep it because you're a lot.

00:03:48 We kind of do like the 80 character thing sometimes.

00:03:51 And like a bunch of the characters are used for the actual like the timestamp and stuff like that.

00:03:58 So or the hash, like the first few digits of the hash.

00:04:01 So we want to leave some space for that.

00:04:04 So 50 characters, subject, capitalize the subject line.

00:04:07 Don't worry about a period because, you know, that's one of your characters.

00:04:11 So don't worry about it.

00:04:13 Use imperative mood in the subject line.

00:04:15 And if you don't know or don't remember what imperative mood is, which I didn't.

00:04:20 So I'm glad there's a discussion later.

00:04:22 There's a discussion about all of these in the article.

00:04:25 Wrap the body at 72 characters.

00:04:28 That was an interesting thing that I, it just is interesting.

00:04:33 So I use tools that wrap it automatically, but a lot of people are using tools that don't.

00:04:38 And so to store it in approximately 72 characters.

00:04:43 And I just think of this as keep lines short-ish and actually use new lines and don't depend on wrapping.

00:04:50 And then the most important is number seven.

00:04:52 I think this is the most important.

00:04:54 Use the body to explain what and why and not how.

00:04:59 The code changes how you did the change.

00:05:02 So the commit message is what did you do and why did you do it?

00:05:07 And I really kind of actually just focus on why.

00:05:10 I don't even really do the what too much.

00:05:13 So good information about commit messages.

00:05:16 I also love, there's a lot of people that have talked about this before.

00:05:19 So he references a handful of this.

00:05:22 It says, keep this in mind.

00:05:23 This has all been said before.

00:05:24 And each one of these words is like this and has are all different links to different articles.

00:05:30 It's kind of a fun way to reference other people's work.

00:05:33 So good job.

00:05:33 Yeah, that's really interesting.

00:05:35 And I not too long ago learned the thing about one sentence and then a paragraph or two being extra.

00:05:40 And I learned it from the JetBrains AI in PyCharm.

00:05:45 Oh, really?

00:05:46 Yeah, because it's actually really quite good at writing a commit message if you just press the AI summarize what I did.

00:05:52 Okay.

00:05:53 Provided that what you're doing is focused.

00:05:55 So if what you did was run pip compile and update 20 dependencies and then you ran rough and reformatted it, never click that button.

00:06:04 But if you legitimately did something, you know, that is like a focus thing that it can look at and go not like you remove 700 spaces in these locations.

00:06:13 And then it comes out really good.

00:06:14 And it does that.

00:06:15 It'll put like one sentence and then it'll summarize in detail what it's discovered below.

00:06:20 Yeah.

00:06:21 Yeah.

00:06:21 So very cool.

00:06:22 That's it.

00:06:22 I don't use it that much.

00:06:23 I probably should use it more, but sometimes end up in hands just work.

00:06:30 But usually for me, when I end up writing commit messages like that, I am frantically trying to fix something I just broke in production.

00:06:38 And I'm like, oh, I got to put it back.

00:06:40 Just take this.

00:06:41 I just need you to be able to get pull on the server again and try again before it disrupts too much.

00:06:47 You know what I mean?

00:06:48 Yeah.

00:06:48 Well, I just realized that there's another thing that I do frequently as well is if I commit and then push everything and then CI breaks for some reason, like because I forgot something, like I forgot to add, like I added a file and I forgot to add it and push that.

00:07:04 I will, the second commit, I will try to have that, the message be identical to the first one so that when people are looking at, it will show up as a different commit, but then it makes it obvious that it's part of that same commit.

00:07:18 It is intended to be together.

00:07:20 Yeah, that makes sense.

00:07:20 I agree with that.

00:07:21 This looks really useful.

00:07:22 Cool.

00:07:22 Who knew writing a single sentence would be so interesting.

00:07:27 Hands.

00:07:29 All right. Let's talk about Caddy.

00:07:33 Brian, are you familiar with Caddy?

00:07:34 Just Caddy people?

00:07:36 I mean, it's Caddy Shack.

00:07:37 What is that?

00:07:38 Yeah, but this is not that.

00:07:39 This is Caddy, the ultimate server, ultimate web server.

00:07:42 So if people are thinking about how do I host my web apps with Python, there are a few now that the thing that runs your Python code could theoretically also be the thing that serves, that talks to the web browsers.

00:07:55 But typically and certainly traditionally, there's been an interesting divide there.

00:07:59 We've got static web servers and proxies and firewall type things.

00:08:04 That's like Nginx and others.

00:08:06 Yeah.

00:08:07 And then you've got the stuff that actually runs your Python code, probably scaled out to be like four of them or something in a web farm with UVicorn, Gunicorn, uWSGI, which don't use uWSGI anymore.

00:08:21 We covered that, but, you know, Gradient, all those types of things, right?

00:08:24 So this one I want to cover, this thing I want to cover today called Caddy is actually sort of a parallel of Nginx. So this comes to us from Frederick L. Storm. And Storm, thank you so much for sending this in. But it's something I've been tracking as well. And I've wanted to switch over, but my world is just so complicated. I have every line of Nginx, you know, you've got to put like a little configuration YAML JSON-like combo file together, I have 2,200 lines of JSON or whatever, Nginx config files.

00:09:01 That's a problem.

00:09:02 And I don't really want to mess with trying to move that, so it's going to stay.

00:09:05 But if I were starting over, I believe I would be probably choosing Caddy.

00:09:09 It's a super, super simple way to create web apps that you can run.

00:09:15 It comes with automatic, internal, no action on your fault, your behalf, HTTPS through Let's Encrypt.

00:09:23 So for example, you set up a website, you say my website is like michaildeploys.com or whatever, and you don't have an SSL certificate, you start it up, and as long as it's running on the server that actually that domain resolves to, it will just automatically get you a Let's Encrypt certificate and keep it up to date.

00:09:42 Oh, wow.

00:09:42 That's really cool, right?

00:09:44 It has 63,000 stars on GitHub.

00:09:47 That's pretty awesome.

00:09:49 If you want to do development, sometimes you need to have HTTPS, and it will automatically do a local trusted certificate for you.

00:09:57 If you want to run on localhost, it'll just do, like even localhost is over HTTPS, does clusters.

00:10:02 It has a little test.

00:10:04 You can test it out for yourself, like put your domain to this location or whatever and try it out.

00:10:10 Let's see if I can find the config.

00:10:11 The config is super, super simple.

00:10:13 We just write a couple of lines.

00:10:15 If you've ever worked with HTTP files from PyCharm, It looks a little tiny bit like that.

00:10:20 But yeah, it's like real simple.

00:10:21 You just say handle slash blog slash star and put the details out of there.

00:10:26 That's just how that processes that.

00:10:28 But it can reverse proxy slash API, which actually goes over to another server.

00:10:33 And it can reverse proxy another one, which actually does like a round robin load balancing to yet another cluster of servers.

00:10:42 Isn't that cool?

00:10:42 Just like all that stuff so simple.

00:10:45 Yeah, it's really cool.

00:10:47 It still doesn't look simple to me.

00:10:49 Well, you know, try the alternative, right?

00:10:52 So people can check this out.

00:10:53 I think it's really neat.

00:10:55 The caddy files are super easy to work with here.

00:10:58 What was I showing?

00:10:58 I think, yeah.

00:11:00 Anyway, there's a bunch of different examples.

00:11:02 Some of them are simpler than others like this.

00:11:06 No, this is cool.

00:11:07 Yeah, but one of the other things that's cool is if you're coming from somewhere else, like I was complaining that I have all this Nginx config, you can actually just pass it an Nginx configuration file and go, I'm not ready to rewrite this in your world, Caddy.

00:11:20 Just run this Nginx configuration, but you'd be our server for that.

00:11:23 So you could slowly migrate over into that.

00:11:26 Yeah.

00:11:27 Anyway, you can even use apparently a MySQL database as a source of definition of your front end web server, which

00:11:36 sounds kind of wild.

00:11:37 But then again, you can write code and APIs and stuff to control it then, right?

00:11:40 Just change the database and then you change the web server.

00:11:43 So all pretty cool.

00:11:44 Anyway, I think people, if they're thinking about Nginx or something like that, should maybe give this a look.

00:11:49 I don't remember what it's getting.

00:11:50 Oh, it's written in Go.

00:11:51 That's what it's written in.

00:11:52 So it's pretty high performance.

00:11:53 It does HTTP 1, 2, and 3.

00:11:55 So the 2 is most important, but 3 is also interesting.

00:11:58 Anyway, 98% Go, 2% HTML.

00:12:01 Nice.

00:12:03 Indeed.

00:12:04 So if you ever got stuff to host and you're not doing platform as a service, there you go.

00:12:08 Cool.

00:12:09 Speaking of which, let's talk about, before we move on, Let's talk about our sponsor, huh?

00:12:15 Yeah.

00:12:16 Yeah, so a couple weeks ago, Brian, you told people about Posit Connect.

00:12:20 And I want to talk about it again, but for a slightly different reason.

00:12:24 So you talked about how easy it was to use.

00:12:26 I want to talk about how you can use it to share your data science projects and how you can do that securely with things like single sign-on and so on.

00:12:34 So this episode is definitely brought to you by the folks at Posit.

00:12:39 They've made a huge investment in Python, originally known as being an R shop, making RStudio and others, they've been putting maybe the majority, certainly a ton of effort, into things for Python people these days.

00:12:50 So if the mentions of words like HIPAA, GDPR, or other privacy policies make the hair on your neck stand up, you'll know you want a trusted partner to help your data become shareable, but also follow those safety rules that we all have to live by.

00:13:05 So Posit Connect can help.

00:13:07 And Posit Connect lets you securely develop, deploy, and share what you build with Python.

00:13:12 If you build it with Streamlit, Dash, Plotly, Bokeh, FastAPI, Shiny, Flask, Quarto, and other APIs.

00:13:19 So here's how it works.

00:13:20 You or your team set up Posit Connect on a secure server within your org or behind some VPN in the cloud amongst your cloud servers and using your existing authentication system.

00:13:33 Then when you publish a piece of content, Posit Connect lets you set user level permissions for that content, making it visible to some users, not others.

00:13:41 But what's even more interesting, I think here, is that you can set credentials on a per user basis.

00:13:47 So imagine you write code that then goes talks to a database that then accesses a bunch of data.

00:13:53 And depending on who is doing that, they can see some of the data, but not all of it are different things and so on, different team reports or whatever.

00:13:59 so in Posit Connect you can actually per user set how they can access other things like your database or your APIs or external APIs or whatever that's pretty cool so if you work on a data science team where security matters you owe it to you and your org to check out Posit Connect do that by going to pythonbytes.fm/connect today and get a three-month trial to see if it's a good fit that's pythonbytes.fm/connect the links in your podcast player show notes and yes we all know you can just Google AI, Bing, whatever, Posit Connect, but please use our link so they know that it came from us.

00:14:33 That way they will continue to support the show.

00:14:35 Thanks to Posit for supporting Python Bytes.

00:14:38 Yeah.

00:14:39 All right, back to you.

00:14:41 What's your third item?

00:14:42 Well, not third item, your second item.

00:14:44 I am going to talk about, let's see, I'm going to talk about peps.

00:14:48 So we've got actually a couple of peps coming in.

00:14:52 That's good because I need a PEP talk.

00:14:54 Sorry, go ahead.

00:14:56 So a couple of peps that just recently got accepted.

00:15:00 So one of the peps is for packaging and one is for Python 3.14.

00:15:08 So let's do the packaging topic first.

00:15:12 PEP 770 is improving measurability of Python packages with software bill of materials.

00:15:19 And that's a mouthful, but it's about SBOMs.

00:15:22 And if you don't know about SBOMs, you probably ought to know a little bit.

00:15:26 So this is a good thing to read.

00:15:28 And if you do know about SBOMs, they're stressing you out, probably.

00:15:32 So this is something that we're in the corporate world.

00:15:36 A lot of people are trying to think about.

00:15:39 And SBOMs, I'm probably going to massacre this definition, but generally are a way for us to, because we're using a lot of open source projects and third-party libraries.

00:15:48 And like a Python package isn't just the Python code.

00:15:51 It's also possibly some Fortran code in it or whatever, and some other things inside or Rust that you want to try to track all those dependencies.

00:16:00 And the SBOM system is a way to get that right so that you can make sure that you know where all of the code's coming from.

00:16:08 And this was, there were some different ideas about how to do this within Python.

00:16:14 This 770 came from Seth Larson, sponsored by Brett Cannon.

00:16:18 Really kind of a neat way to look at, Seth has looked at the different ways that we're already specifying a lot of this stuff with our packaging metadata.

00:16:28 So how do we use that to try to fill out a lot of the SPOM fields automatically?

00:16:34 And this is just really some great work.

00:16:38 So I'm glad this is going in.

00:16:41 Again, since it's part of packaging, it doesn't really attach to a release.

00:16:47 So I'm not sure when we'll get like, I didn't look through if this is something that's already implemented or not, but it's just accepted.

00:16:55 So, and if, even if we did do get it, we'll get it through tools and stuff.

00:16:58 We won't get it through the Python release versions.

00:17:02 So next one that I'm, I'm also a little confused about, but excited about is PEP 750 template strings.

00:17:11 So we've got f-strings.

00:17:13 These are like f-strings on steroids.

00:17:15 The T strings will replace the, when you do a template string, you won't say F string, you'll say T string.

00:17:22 And so it builds, so like, for example, if you had hello name with the name in curly braces with an F string, that would fill in the name with whatever variable.

00:17:31 But we want it to be like, just to, to just hold that thought and we'll fill in the name later, sort of a thing.

00:17:38 And I still like, I'm just sort of getting into this.

00:17:41 don't know really how to use these, but I'm really excited that a lot of this has been thought out.

00:17:46 Now there's a whole bunch of authors, Jim Baker, Greedan Van Rossum, Paul Everett, three other people, Dave Peck, Lissandro Nicolau, and Caudiano, I'm sorry about massacring your name, I'm sure, but a lot of people working on this. Really well thought out also some really cool stuff about being able to combine. They thought about like with fstrings, you can do math on it or, you know, sort of like adding and concatenating and stuff like that.

00:18:18 All that stuff's been thought out. How do we deal with like displaying them, using them, the whole shebang? This is going into Python 3.14 with 3.14. So that's just, you know,

00:18:30 right around the corner. So really, really excited about this one.

00:18:33 So many pi jokes are coming in that version.

00:18:35 I think this is really interesting. I talked to Paul a few times about this, and I know he's really excited from a web developer's perspective. So think about Jinja templates, Django templates, Chameleon templates, like that kind of thing.

00:18:49 Yeah.

00:18:49 But with more flexibility, and they're being supported by the Python runtime itself, not a third-party library that parses and processes it separately.

00:19:00 Well, that's what I was thinking. Like, would we need, with this in place, would you need Jinja templates, or could you just implement your stuff with this?

00:19:07 I think you can just deal with this.

00:19:08 I mean, I think it's somewhat inspired by components and stuff from the JavaScript libraries where you've got your JavaScript, but then there's a string in there, like some weird HTML fragment in there that's actually the template that you would use.

00:19:24 And they're just kind of interwoven so they can have a little bit more locality of behavior with each other.

00:19:30 I think that is a part of the motivation here, I do believe.

00:19:34 Yeah.

00:19:34 I'll probably have to have Paul and maybe some of the other folks on Talk Python to talk about it.

00:19:38 Yeah, I'm sure we're going to have lots of articles about it and everything.

00:19:42 So we will talk about it more for sure.

00:19:45 Indeed.

00:19:45 Awesome.

00:19:46 Indeed.

00:19:46 All right.

00:19:46 Well, let's round things out with a little data science.

00:19:51 Have we spoken about uv before?

00:19:53 People out there, do you know UV?

00:19:55 Have you heard of this?

00:19:55 It's a library for managing dependencies and projects.

00:19:59 Actually, I'm probably going to get my jacket signed by Charlie Marsh when I go to PyCon because that's how much we talk about it.

00:20:05 No, definitely fanboy of uv.

00:20:07 And I want to talk about a pretty new project called, you want to pronounce it as Juv, J-U-V, but I think it's J-U-V is probably the way to say it because it's based on uv.

00:20:18 And what this is, this is a toolkit for notebooks where the virtual environments and the dependencies and such of it are managed by UV, which is pretty cool.

00:20:29 So what can you do?

00:20:30 Hey, by the way, this is a pretty new project, 222 stars.

00:20:33 it's only been created six months ago, and it's not too well known, but I want to shine a light on it. You can create, manage, and run Jupyter Notebooks along with their dependencies, which is cool. You can pin the dependencies with the PEP 723 inline script metadata, which has been accepted. It must be, right? Yes, final. You can launch ephemeral sessions for multiple front ends like JupyterLab or Notebook or MB Classic, okay?

00:21:04 And it's all powered by uv.

00:21:05 So pretty cool.

00:21:06 You can, as you would expect, uv tool install JUV, or you can also pipx install it.

00:21:12 And then once you've done that, you can just say UVX JUV and it'll run.

00:21:17 But more importantly, if you look at the different things you can do to it, you can say things like JUV init some notebook, or you can init a notebook with Python 3 and give it a name, which is cool.

00:21:28 You can go to that notebook and you can add a dependency for pandas and numpy to it.

00:21:34 That's not something you can normally do to notebooks, right?

00:21:36 Or you can say I have a requirements.txt file I've created with pin versions using uvpip compile.

00:21:44 Then I can say juv add --requirements and give it a full on requirements file.

00:21:50 So in case you have a ton of requirements with versions and stuff, you want to manage separately.

00:21:53 You don't have to keep typing them out.

00:21:56 You can also do interesting things like put a time stamp for reproducibility onto your dependency so i can say jv stamp this thing and then it won't get dependencies that are released after now which is pretty cool i think all right i don't know of anything else like that like i want to just have it whatever the latest of everything i'm using is as right now that's what i want they ship something new i don't want it until i change my mind that's pretty cool

00:22:20 but now here or now there anyway time yeah i know time zones, it'll make you want to cry.

00:22:28 You can also say run --with, and it'll run those even if you don't want to put them in as a particular dependency. And you can lock it to create a lock file, right? All sorts of the uv types of things, but you can have it run there. You can also say run notebook with like Jupyter Notebook rather than Jupyter Lab and give it a notebook, give it a version. Like there's a lot of different things you can do. So I think I've been talking enough, but there's like quite a bit more.

00:22:55 You can go on here.

00:22:56 So this is a pretty comprehensive project for being six months old.

00:23:00 Anyway, if you notebook and you like UV, consider giving JUV a look.

00:23:06 It looks pretty cool.

00:23:07 What else you got that's cool, Brian?

00:23:08 That's it for our main items.

00:23:09 I just have a couple extras and I have a feeling we've covered this, but I don't remember.

00:23:14 So I'm going to go ahead and cover it anyway.

00:23:16 So I'm going to take a look at the status of Python versions.

00:23:20 So this is on the Python Developers Guide, devguide.python.org. And I just, there was within the last couple of months, there was a reformatting of this, I think. This is my memory. So the big list is at the bottom with like the full chart of all of the, all the different versions and what's left. And what we see about the full chart is most of them are end of life because it starts at 2.6, 2.7, 3.0. And so that's not really that interesting. So the new format highlights the ones you might be caring about right now. So the last few end of life's, there's a two sevens end of life, but then three, six, seven, eight are all end of life. So hopefully you're not using Python 3.8 anymore. But one of the interesting things, so there's a couple of interesting things about here. So highlighting there's, there's where we're at with, so currently three nines is still getting security updates, three, nine, 10 and 11 are, and then like right now, as of, it looks like right, the, the, it's, it's a hairy, it's hard to tell where the green and yellow start with the blue line.

00:24:20 So there is, there's dates around, but there's a link to in here for endoflife.date.date slash Python.

00:24:30 And so I took a look at that.

00:24:31 And that is like very clear as to what the timeline, what we got left.

00:24:35 So 3.13, the active support.

00:24:40 So it was released six months ago.

00:24:42 And it's all, so these relative times are really nice.

00:24:45 It was released six months ago.

00:24:47 We have a year and five months left in active support and then security updates for four more years, four years and six months.

00:24:55 So this, the timeline is really nice.

00:24:57 This also highlights the, so in the first graph, we just had like this difference between green and yellow.

00:25:03 So we got bug fix and security.

00:25:04 Doesn't seem like that big of a deal, but when you look at it with the reality of it It is 3.12, which I'm using a lot of lately.

00:25:15 That active support ended a week ago.

00:25:18 We're not like right on the edge.

00:25:20 We're past it.

00:25:21 So active support ended for 3.12.

00:25:23 We still have security supports.

00:25:27 So there's security problems.

00:25:28 We still get three years of security.

00:25:30 But we're not going to get like bug fixes and stuff.

00:25:33 Like minor bug fixes are not going to go into 3.12.

00:25:36 So 3.13 is where you probably ought to be.

00:25:38 Anyway, so I like both these graphs.

00:25:40 And these are really great graphs to pull out if you want to help convince your management chain that you can switch to a different version sort of thing.

00:25:49 If you need that.

00:25:49 Actually, the second one that you linked to here, the end of life, date slash Python is really good for that sort of motivation.

00:25:57 Yeah.

00:25:57 Look, we've got one year and six months.

00:26:01 How do you feel about that?

00:26:02 Maybe we should change.

00:26:03 In the part where if you pull up 2.7, it just goes, what are you reading this for?

00:26:08 Stop right now and go back to migrating.

00:26:10 And then 2.8 just says never.

00:26:13 No, I'm just making it up.

00:26:13 Really?

00:26:14 It should say that.

00:26:15 No, it should say that.

00:26:16 I've never done it.

00:26:16 Oh, okay.

00:26:18 It should though.

00:26:19 Yeah, it should.

00:26:20 Just go, stop, what are you doing?

00:26:21 Stop.

00:26:22 No, it has all the unsupported versions from 3.7 and older just collapsed saying like unsupported, go

00:26:28 away.

00:26:28 Yeah.

00:26:29 Well, you can expand it, but it's collapsed.

00:26:32 But having the relative time is really nice.

00:26:35 How much time you have left?

00:26:36 Yeah, I agree.

00:26:36 I think that's very powerful as a mental model.

00:26:39 Yeah.

00:26:39 Anyway.

00:26:40 cool cool well let's carry on with that theme because i just want to point out that 3.13.3 is out and some of the changes don't matter too much to you oh if you use the mac installer this happens like okay well i install with ev so next and then windows has things like updated ssls tests have been updated a little bit but it's got a few security fixes here which is none of them are like run for your life sort of thing but avoid unbounded buffering that sounds like you want to avoid that and so on. If you don't see the word CVE, you're probably safe, but still it's good to have it fixed. And then a bunch of changes to the library thing is getting better. And so might as well upgrade, right? Might as well upgrade to the new one. I just have to rebuild our base Docker container and uv will find the new one, download it, and then all the websites, including Python Bytes, they'll be off to the races. I think I'm most excited about the update to TCLTK. I know.

00:27:34 All right, a couple, one more really quick.

00:27:38 Siam Yalamarti, thank you so much for sending this in because somebody, I think in the comments mentioned, oh, just use.get-blame-ignore-revs

00:27:48 for the Ruff format.

00:27:51 And we were somehow complaining like, you're looking at diffs and bases, especially looking at blame.

00:27:57 Whoever ran Ruff format, and you said, Brian, don't run format on this because you're going to own it then.

00:28:01 What you can do is you can create this.get blame ignore revs, put probably the SHA of the commit, the hash, and then that will not show up.

00:28:09 And you're like, okay, that's, we're not going to consider that when we compute the blame.

00:28:14 Oh, okay.

00:28:15 So that's, you can use, in that file, you can do a list of revisions to not part of the import.

00:28:21 That makes sense now.

00:28:22 Yeah, and they also pointed out that get blame has a flag, dash, dash, ignore revs file if you want to pass another one.

00:28:29 Pass a different file.

00:28:30 Oh, it's not automatic.

00:28:31 Okay.

00:28:31 Or use, yeah, I guess you got to use it with that probably.

00:28:34 Maybe not automatically, but you can.

00:28:36 So anyway, I am learning about this.

00:28:39 This is all news to me.

00:28:40 Yeah, interesting.

00:28:41 Cool.

00:28:42 Indeed.

00:28:43 Thanks for sending that in.

00:28:43 That's always appreciated.

00:28:45 All right, so let's close this out with a joke.

00:28:47 Brian, you've heard about BC and AD and sometimes referred to as BCE before the common era and Western calendars, you know, so we don't have negative numbers because

00:28:58 negative is hard in calendars, apparently.

00:29:00 I never really thought, why don't we just have like negative 400, but whatever.

00:29:05 BCE.

00:29:06 So I want to introduce you to a different calendar.

00:29:11 It's such an important epoch, a different thing here.

00:29:13 There's BGPT and AGPT.

00:29:17 So before GPT, ChatGPT, and after ChatGPT.

00:29:21 So before, if you're debugging a problem, the developers probably sitting there for two hours, working really hard and going, oh, okay, how's this going to work?

00:29:29 they finally think it's working and then hands to the face six hours of debugging yeah that's before that's b gpt a gpt is chat gpt generates code in five minutes 24 hours debugging even more tears

00:29:44 yeah what do you think yeah well so 24 hours if you're if you're being good with your body and working three only

00:29:52 eight hour days that's three days so yeah see it saves you time this is how we save time with it.

00:29:58 Yeah.

00:29:58 No, I've both saved time and lost time with this so far.

00:30:02 Yeah.

00:30:03 I feel like that's more vibe coding than it is just like I asked GPT for a little help with a function.

00:30:09 You know what I mean?

00:30:09 It's like...

00:30:10 I still haven't jumped on the vibe bandway and I haven't tried that yet.

00:30:13 So I'll try that out.

00:30:14 Neither have I.

00:30:15 It's both amazing and terrifying all at the same time.

00:30:18 But I haven't done it either.

00:30:19 Yeah, it's like jumping off a cliff.

00:30:20 Just do it.

00:30:21 It'll be fun for a while.

00:30:23 Yeah, and Ro out in the audience asks, where's the Stack Overflow step?

00:30:27 oh yeah yeah that's got to be in there somewhere probably you're like i'm sorry i left you chat stack overflow i will not stray from you again i will go back and maybe you can help me get out of this probably not you just find the same answer generated by chat gpt over there as well

00:30:40 well stack overflow is changing their name right they're gonna go by uh training data no

00:30:47 training under flow okay okay you know what doesn't waste your time though what this show and us in a good way yeah so let's get out of here thanks everyone for listening thanks Brian for being here as always

