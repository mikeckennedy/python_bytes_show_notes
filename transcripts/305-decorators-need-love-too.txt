00:00:00 Hello and welcome to pay them bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 305, recorded October 1020 22. And I am Brian rock. And I'm Michael Kennedy. We got a whole bunch of stuff. That's great. We also want to thank Microsoft for startups founders hub for sponsoring this episode. We'll hear more about them later. But do you want to start us off with some something exciting?

00:00:24 Let's kick it off. I have a theme this week, Brian. Okay, before we before we get to it, if my voice sounds a little bit scratchy, I just want to apologize. It's not that I'm sick. It's that I was rocking out to the scorpions last night. They were here in Portland. And even if they're 70, they still rock it was amazing. I don't know how they are. But they probably are up there.

00:00:41 I don't know, maybe being sick may have been a better excuse.

00:00:44 I can't maybe. All right. I do have a theme, though, for the week. And let's kick it off with that theme. This first one both of these are recommendations. The first one came to us from Matt Kramer, thank you for that. And Jeff glass. Remember last time I said they announced pi script that is Python compiled to web assembly running on top of pi iodide and web browser, which is amazing. So many cool things had so much potential. There, I pointed out that that was released and there were some breaking changes. And it was like last minute that I got that. So I just threw it in as an extra. But now I had a chance to look at it. So there's a bunch of changes. And I just want to highlight some of the things for people. So they're using semantic versioning. And I don't fully understand this, I guess it's just like month based, right? So it's 20 22.0 9.1. That doesn't mean September 1 That was released on September 30. So about 11 days ago, 10 days ago. And they just reiterate, this project is undergoing a lots of changes. It's in its super early stages, calendar versioning doesn't really indicate that it's like 0.1, or whatever type of level, but there's a lot of breaking changes. So if you've worked out with it before, just you want to read through this and figure out where things are going, it doesn't look like anything's majorly broken in like, you've got to rewrite a ton of stuff. But it also there are parts that will stop working, but they seem pretty easy fix. So first of all, like many Python programs, you need to express your dependencies, you would do that through a pipe project automall or requirements dot txt, unless you're on the web run in the browser, then Nope, don't do that. Instead, what you would do is you'd use this pi dash E and V section to express I depend on these packages, either just a URL to a wheel, a Python wheel or something that can be pip installed using micro PIP that's gone. It's now deprecated and will be taken away. So now that's folded into the PI config section. And there's a way to just say packages are a list of packages and files that we're using is a list of paths. And it's in these kinds of places where you indicate what Python files you might write and import, because while you can write Python in HTML, just like JavaScript, you should do that very sparingly. And you shouldn't just write your 1000 lines of Python like in line, that's not a great idea. So you would link over to a set of Python files that you can run one of them and import others from that. Alright, so pi envy going away folded into pi config. This is one of the things that's easy to fix, but like I said, will stop working. They've also changed the syntax of some events. So you might have seen people on HTML elements like a paragraph or a div or button and say mouse over equals in some JavaScript function name, like a function call either inline function, or function you've written in PI script, there's a PI dash event. So there's a PI dash mouse over and a PI dash click type of thing. And in here, you can just write arbitrary Python. And unlike JavaScript, you can actually write arbitrary Python separate multi line Python separated by semicolons. Like that, sending colons they made it to Python, you can write arbitrary Python, it doesn't have to be a single function call. Pretty cool, right?

00:04:10 It is pretty cool. We're starting to turn into JavaScript that is changing all the time.

00:04:15 Exactly. Well, that's why the breaking changes. Now just kidding, that's the new project. But don't let it become JavaScript. I'm very excited that maybe it could supplant JavaScript to some degree. There's some stuff about HTML escaping, so you could do like print a string, and that will show up in the browser sometimes, or you can get it to go to the console. But if you put like, one is less than two, and that shows up in the browser, you know that that might get interpreted as an opening bracket instead of just a less than symbol. Alright, so there's some fixes there some stuff for logging, the ability to run multiple runtimes. So there's, when people usually do pi script, they point at just a CD and version of PI script To which points at a CD and version of PI erudite iodide, but you can and easily can do, you can like download that, customize it and put it in your static files and run it out of there. You could possibly not even use PI paradigm itself, you could use say, like micro Python potentially. Or you could actually have maybe different versions of PI, PI died running in different sections of your site, if you want it to different PI script blocks, presumably even on the same page. So a lot of flexibility about managing multiple runtimes. Let's see a few other things. There's also some major releases the power died, that's coming along. And because it's built on top of pineapple runs on top of Pydantic patch web does, obviously the changes there are super important. So some of the changes are that they broke that used to be kind of like one huge namespace and they broke that up into a bunch of pieces. So you got to know about that. But probably the most relevant for people is you used to have to do this thing where you would import from JavaScript, some event and do like a proxy type thing to like hook an event, which wasn't terrible, but it was kind of like, Well, are you still doing Python? I don't know. Right? So they they've written a bunch of event handlers or event sources and Pio died, FFI dot wrappers. So like, add event listener, remove event listener, set timeout, set interval, clear enroll. And so now you can just import say, like add event listener have a function Python function, and then you just say add event listener on a tag on an event? And here's your Python function. That's awesome. Right? That is awesome. Yeah, yeah. So they've they've added these event handler, sources that are straight Python and not interoperating. With JavaScript more directly. There's a bunch of things behind the scenes that will make it better like that we don't necessarily its users care about but like in scripting is getting better. They've got a whole testing scheme. You might be interested in this, Brian, for your show. They do integration tests with pyrite. They do type script tests, because a lot of the interaction bits are in TypeScript. And they do that with jest. And then Python, the Python code gets tested with PI test. That's an interesting mix.

00:07:11 I guess just pointed out, we said pi, right. It's playwright

00:07:15 but yeah, I'm sorry. I'm too much on the PI right now. Yes, plenty. Right. Thank you for taking me on.

00:07:20 Yeah, but but I'll do, I'll do a famous pull request on them to try to get that pi test case. all lowercase. That'd

00:07:27 be good. Yeah, that's I can, I'm not going to use this project until like it's fixed. So some stuff on infrastructure, there's new CI, things that they're working on to make it better. They're using type annotations, and they're trying to synchronize type script and py scripts type annotations to kind of keep the end to end across JavaScript across Python, angry, a bunch of stuff that's coming. In particular, a lot of rethinking how async works, because JavaScript is already like super asynchronous, but it just has one loop. And if you hook your async Python into that, then like, is it really async? It's a little bit complicated. You can check out what they said there. But otherwise, very exciting stuff. And if you're doing pi script, definitely check this out, because it's going to affect you.

00:08:14 Yeah, that's cool. Well, I'll give it let's give your voice a little bit of a break. And yeah, I

00:08:18 mean, too much. Too much Rocky, like a hurricane stuff.

00:08:23 Yeah. Well, I want to talk about decorators a little bit. So I was actually only I said in Boston, the Python, Boston Meetup group. They, they're still, it's kind of funny, they're still doing online. So it's not really Boston, it's anybody can can jump in and have fun there. But we're talking about pi tests. And the and Ned Batchelder was there and talking about coverage also. And he was showing us some of the test code was kind of it was really fun, because we were he was showing us some of the test code within the coverage, the test code that tests coverage by the coverage.pi. And, and he was showing some things that that and then about using a decorator shortcuts. And then I was like, that's really cool if I always forget to do that. And so he wrote up this, I don't know if it's just for me, but he wrote up a blog post called decorator shortcuts. And, and especially, I mean, I guess for a lot of stuff we use decorators a lot in Python now. And in PI tests also uses a lot of decorators things like pi test Mark parameterize, or pi test, Mark, Skip, or x fail. Those are all decorators built in part of pi test. And so that the thing he wanted to show us is like as an example, he's got some tests that have to that are either skipped or x failed on certain Python versions. So he's got a way to test that piece of code that only works on say like, only, it doesn't work on pi pi, or it doesn't work on like, python three, eight or before or something like that. And, and so he has these fairly complex version like, X fail decorator sequences that he, he can take and instead of saying and let's say he's actually filed, maybe there's an issue, he's actually filed an issue against pi pi, for instance. But he's his tests are still failing. He had an example where instead of just this whole big X fail blob with the environment, checking the environment version, and using having a reason and a link to the defect, he just shortcutted that to just like a single variable name, or single name that says X fail pi pi 3749, as an example, just a single thing. And then, and then when you're using it, instead of this whole big blob, you can just write at x fail, instead of like, extra instead of saying like, Bitez, Mark x, well, you can have this specific X fail, and then you get the, the reason print out and everything. Now this example, yeah, especially I like it for this is there's, we were talking about how we don't like to leave x fails in for a long time. But sometimes you're dependent on a different different piece of software, that you're not one of the maintainers in which case, what do you do with the failing test, one of the things you can do is you can X fail it and and link it to a defect report. So you can keep watch of it. But yeah, having a way to just mark different different tests with the same thing. This is pretty cool. And then this really kind of relates to really a lot of things. So there's a lot of wait places where we use long, long complex decorators that you can just assign to a variable and then use it later.

00:11:56 So yeah, to put this decorator on a test function, you have to have you specify a whole bunch of conditionals around the version. And then the reason is a big long string. And if you if that's affecting 10 tests, you put that on 10 tests, it's it's all over the place. You know, one of the things that you hear from people sometimes like well, I don't like unit testing, because it's hard to maintain. And I find that when people say that a lot, they they kind of go into like this sort of this mode, where when they're writing test code, they forget about things like trying to isolate change to one place, and you would never write the same code 10 times in a real part of your app. Why should you write it 10 times duplicate in a test? Write? Well, it's hard to maintain, it will be hard to maintain. If you did that in your regular code. Do just don't do it there. So don't do it. Here is the technique to accomplish that. Yeah.

00:12:45 Yeah, definitely. And this and this is this part of it isn't. It's also great, because it's consistent, it keeps, it'd be terrible, if you were, you know, referencing this issue in three different places, but only sometimes including the link and, you know, having some consistency is good. So and there was some concerns, Larry Hastings put up a concern about possibly not doing this for code that can that is that generates a single use object like iterator or something like that. But just don't do that. But Larry has a workaround, if you can do it a different way if you have something that acts like that. So

00:13:30 I see. Interesting, yeah, there's a lot of turtles all the way down, like decorators are functions that return functions. And so what we do is wrap that in a function to alleviate the capture the closure. Yeah, yeah.

00:13:43 But anyway, so

00:13:47 excellent stuff. Yeah. Next up,

00:13:50 our sponsor. Now, we have a sponsor. Our sponsor this week is Microsoft for startups, a founders hub. So Microsoft for starters, founders hub provides all founders at any stage with free resources to help solve startup challenges. The platform provides technology benefits, access to expert guidance and skilled resources, mentorship, networking connections, and a whole bunch more. And unlike others in the industry, Microsoft for startup founders hubs does not require the startup to be investor backed or third party validated or able to relocate to San Francisco for a short time. So founders hub is truly open to all so what do you get? You get free access to GitHub and Microsoft Cloud with the ability to unlock credits over time. They've also partnered with other companies like open AI to provide services and discounts. And Microsoft through the Microsoft for startup founders hub, becoming a founder is no longer about who you know, you'll have access to their mentorship network, giving you access to a pool of hundreds of mentors across a range of disciplines across areas like idea validation, fundraising, management, coaching, sales and market doing, maybe even testing, who knows? You'll be able to book a one on one meeting with the mentors, many of whom are former founders themselves. So make your ideas a reality today with the critical support you'll get from Microsoft for startups founders hub, and to join or just check it out visit Python bytes.fm/ founder's hub 2022. The link is in the show notes. And I know you can find this stuff on your own with Google or something. But if you if you go through our link, it helps them know that you you've heard about them here. So thanks.

00:15:34 Yeah, thanks, Microsoft for supporting the show. Brian, before we move on, audience feedback from Henry shiner for that exact example talking about pi tests and decorators. I'm not fond of making the test directory and portable unless I have to add a mark might be better. We think

00:15:49 a mark might be better. I mean, their marks. So the marks are decorators. Yeah.

00:15:55 Okay, cool. What is next, another continuation of my theme here. So Mark Matson sent over a recommendation to talk about this, unrelated to the previous announcement, only in timing or origin. So panel, people probably have heard of Hall of is and panel is related to that project. It's an open source Python library that lets you create custom interactive web apps and dashboards by connecting widgets, plots, images. So people have heard of streamlet, they've heard of h2o Wave, if they've heard of Plotly dash, it's like in that category, right? So you can put together a lot of interactive, fun pieces. So for example, here, if you go to the main website, for panel, you can see that there's like this graph as you hover over it. It's very interactive, but you also have widgets to let you reevaluate how you compare all these things and just play with it live. Right, kind of like it's a notebook, but it's not a snake, right? Yeah. So traditionally, this has run in Jupyter Notebooks, or you can run it on like the flask back end type of that you can host it on your own server. The news is not that this has been around for a while the news is that handle now comes to Wesam via PIO, Pio died, and has pi script integration. That's pretty awesome. That is pretty cool. So in order to host it before, you either have a running notebook server, or you had to set up your own separate web server and maintain that thing, and all that goes with and now you can just put a little pi dash config in there and boom, when they interact with your data, and they run it, it just happens client side, no servers needed. So let's talk about some of the things here. You can automatically convert panel applications to a higher died, version, couple flavors, reasons I'll explain in a minute, or you can convert to a PI script based app, which is pretty epic. So like you could embed a panel inside your sphinx documentation, just as HTML, which is pretty nuts. So there's this convert command panel space convert on the CLI. And you can tell it the to format from your regular pipe panel code to convert it to a Pio died. This one is good. If you want to have a single HTML file that you say here's my HTML file, off it goes. It's just no dependencies, and then it runs there. That's not as good as creating a Pio died worker, which creates a JavaScript and HTML file that you got to serve over more of a server. Or you can even output a PI script version where you can write additional postscript code. It's pretty epic. And here you can see a little example of this looks like standard x g boost SK learn code right here. It does all its things. Except for the end, you just say P and NOT column. And here's your your output right there. And you put your little pipeline you created and like maybe a head of a data frame to show up. And I guess. So in order to run this, you would say panel convert the script to a pipeline worker output pipeline. And then you just run a server locally so that you can get to it, you can pull in the JavaScript, open it up, and you get something that looks like this. That's super interactive. You have machine learning in the browser. That's simple. That's pretty cool.

00:19:22 A browser is JavaScript will take over the world, it'll like Get Smart, and then take off. So a couple cool trips that tips and tricks they recommend as you can do dash dash auto reload. So if you make changes to the file, it will auto reload the browser. So just as you edit, you can also add a panel dot convert dash dash will watch. So if the source files change, it will regenerate the script and then the script will get reloaded to like new chain those together I believe. Then there's a section on format that actually describes what is the point of the different outputs like our diverse product worker, so the worker wants as it generates an HTML file In JavaScript that runs better, this is the most in a separate thread. This is the most performant option, but it has to be running out of a server instead of just a file. Worth noting here, that py script generates an HTML file leveraging py script to produce a standalone HTML files containing pi E and V and py script tags with the dependencies. It's basically a py script for veering to the PIO died one. Well guess what? This might need a little update and coming soon, pi dash, the DMV is not there anymore. So they can check that out. I'm sure that they're I'm sure they're on top of it. Yeah. Final thing to note here. That's pretty dope is progressive web apps. So this comes with a dash dash PWA option, which turns your, I'm pretty sure this is going to require the power dyed worker variant because you need these worker things for progressive web apps. But this means that you can install your your app into say, an iPad, or install it like a desktop app and run it with cached offline data. So for example, let's see if I go to YouTube here. I signed in, no, good. So like in Vivaldi. I can right click on this, and it'll say install YouTube there. So if you did that option for your panel app, you could right click and say install panel. And you might think, Oh, well, that's silly. Like, who cares about that? Let's see if this is let me do it, though here. Oh, this is live. If you go to a lot of these needs a video and really curious. A lot of these you can come in and actually click download, I guess you gotta be signed in. But if if you're like a premium account, you can click download. And that's only possible for YouTube installed as a PWA. Because I think a lot of people feel like, oh, it just gives me an icon on my homepage. But like, there's actually different behaviors. So you can get like, offline videos on the PWA. YouTube, where's the web? One you can't, and so on. So anyway, that's the kind of benefits you would get if you would do your panels a PWA, which is just a command line option. Interesting. Cool. Anyway, people check it out. If they're interested in building dashboards. They're interested in PI script and running in the browser using web assembly. Here's a pretty awesome Asha option. Thanks, Mark for sending this in.

00:22:09 Yeah, thanks a lot. Did you know that python three 311 is coming right up?

00:22:16 It's gotta be soon. It's October. There's not much October left.

00:22:20 Yeah, but it was three, eight when we got the walrus Operator, do you realize it's been that long?

00:22:25 It seems like the walrus operator is still new, but that's a long time. Yeah. But yeah, so. Um, so an adolescent Walters. Walrus now not even a baby walrus?

00:22:35 Yeah, exactly. So I think I think it's time for people to embrace it, embrace the walrus. And so one of the things you can do is you can install Marco girlies. Auto walrus, and it'll convert your code for you in places where you really shouldn't use the walrus operator. So, and this is good for your support, if you're supporting three and above. And, golly, I hope you're already up to three, nine or 310 by now. So there's a this auto walrus checked it out. It's pretty, it's pretty simple. But it can run as a pre commit hook too. So that which is nice. But you can you can run it on the command line, which that's what I did when I tried it a pip install auto dash walrus. So it's one word, but with that dash in the middle, and then you have this application, you can run it on a file. And, and like we've said, you can run it as a pre commit hook as well. And it'll run on everything, but you can. And it just converts stuff. So if you have things like here's a simple example of n equals 10, and then if n is greater than three, do something. And that converts the Ottawa hours, we'll convert that to the walrus operator of if, you know, in colon equal 10 is greater than three. So and I kind of like this being separate from other tools, because some people just honestly haven't been haven't came on board with this already. You know, embrace the walrus sort of thing. But it's a fun way to just try it out on your code and do a diff. git diff and see what have changed and maybe you like it, maybe it's a thing to do as, as like a group code review thing to just talk to your team and find out if you want to change it this way or not. Yeah, and then this reminded me of something I'm like, we we had something like this before, right and back in episode 82. Wow, that was in 2018. We we talked about Anthony Sicilies pi upgrade. So and that's it's been a while so it's but that's like four years ago. So I want to I went and took a look again. And I would like people to try to check out pi upgrade two because there's a whole lot it's it's moved on so it's not just we recommended pi upgrade for things like upgrading to from two to three sort of thing.

00:25:00 Was that back in the controversial legacy Python days? Yeah.

00:25:03 So there's, there's always times to go and revisit old scripts and old applications that you're still maintaining. And going well, we don't really want to support the old Python, but our code serves looks like the old Python. So let's take a look at some of this stuff. And it'll do things like, you know, the set literal some of the some of the old things of and, and doing comprehensions for you, and better cut branches or cleaner looking. And then, but there's also like different print styles. But one of the things I wanted to point out is if you go to the readme, got it scrolled all the way down, or at least halfway down, and you get things like the three, six plus. So there's these plus options. So you can say, if you're running in three, six or above, run that. But you also want to do like, let's just go all the way down to like three, seven plus. And there was a kind of a new way to run sub process, for instance, but you're I mean, it just find some of these things and just changes it for you. So it's kind of cool. And some of the things you may not have remembered the three in three, eight plus the LRU cache, you used to have to do the LRU cache and call it as a function for your, for your decorator, but now you don't have to do the prints. So just some some cleanup like that. It's just nice. I tried to run this every once in a while. And yeah, I guess public service announcement for, for this, this cool little project.

00:26:32 That is a cool project and going through this huge long readme and looking at like as it gets later, and later, Python versions is kind of like, here, just a bunch of examples of how Python has changed over the last few years. Yeah.

00:26:44 Oh, neat. It has a like 604 type rewrites, it'll rewrite union, the union operator to the bar operator that's in 310. Plus, that's nice.

00:26:55 Yeah. We got 311 Plus coming soon.

00:26:59 Yeah, that'll be fun. So awesome.

00:27:03 Well, that's all right. All right. Got any extras?

00:27:06 Um, you know, I was gonna have an extra but I'm gonna save that for later. So no, I don't do you have any extras?

00:27:13 No extras. But I have a joke. I do a quick follow up to this, though. This is a hint of what's coming next week. I'm gonna talk I think it's next week, we're gonna cover this refurb Have you seen refurb? I don't refurb is a similar one that like will go through and give you recommendations of here's the most modern way to do your thing. So like, if you said, if value is in bracket XYZ, it's like that's a little less efficient than, like, why make a mutable lists, when you could make it a tuple. So little more efficient just to create the tuple Su, nice. If value is in parentheses, it'll suggest you change the parentheses or suggest using some path lib operations instead of with open operations, like instead of a context manager with open do a bunch of stuff, you can just do path of thing dot read text, you don't need to do the context manager, just bam, there it is. A bunch of cool stuff like that. So anyway, that one more and then also Flint, I've talked about Flint, I love Flint, super straightforward. It brings one of the most beloved things you can do for upgrading your Python is convert all your variation of string format into F strings, just across a whole directory of Python files. Cool. A lot of different things to be running together. But are you ready for our joke? I am. You had the comment about bringing back the wall roster. So I feel like that could be a cool t shirt. Right? Yeah, yeah, absolutely. So I came across this place a little while ago. I don't even have any particular one to recommend here but this place that has like funny geeky T shirts, so I thought I'd just pull a couple of these up and see what you think about them. So

00:28:53 like the first one the Mordor

00:28:56 the Mordor Fun Run One does not simply walk into Middle Earth. You have some of our data science friends out there it has a graph of two things that are very similar. One is shark attacks. The other is ice cream cone sales and it says correlation does not imply causation. Apparently ice cream sales and shark attacks are course that closely correlated because it's warm you go in the water it probably doesn't cause shark attacks. It might it might if if you are more into math you have the distance wrapped or divided by time Raptors the Velociraptor but there's some really good programming ones in here as well like this one for example. Check this out. Go outside the graphics are amazing. And the picture of the shirt is like super low bit rate like graphics here's a good one. Some some lab person pouring like beakers of clearly poisonous green stuff. It says forget lab safety. I want superpowers Oh boy, what about the what do you think this one Brian here the forecast for Alderaan. Remember Alderaan is the home of Princess Leia that was blown up by the Death Star and Star Wars and it says five day forecasts older on Monday. 72 and cloudy Tuesday separately for Wednesday. 15,000 degrees. No Thursday or Friday. Kind of mean, but it's also got awesome. Yeah. Yeah, I mean, he's doing fine. One more. One more programming one. Oh, yeah. Let's see. Here's some. Here's some good ones. One it has a floppy disk. It says kids today have no idea what this is. And then this one here, Brian. This is the last one. It's a somebody holding a CD going into a drive and it just says never forget. Never forget the CDs.

00:30:55 Yeah, see CD drive. I still I still love that old joke of person calls into it. Help Desk and says I need I need some help. Because my cupholders broken.

00:31:09 Yeah, just went in and spilled his drink all over me. Come on, man. You guys gotta get this. Yeah, so you could spend a lot of time on this page. I'm not necessarily suggesting you get a shirt here or anything, but it's pretty. It's pretty awesome.

00:31:24 Well, it makes me miss Think Geek. I think he should have never Yes. But we have we have other people coming up with good humorous shirts. So that's

00:31:33 good. Yeah. Houston, we have dibs putting a flag on the moon.

00:31:40 devs on the moon.

00:31:42 Got it. So, a more serious couple quick is a follow up here. Marco Grilley. From the project that you talked about the auto RS says yeah, I love pie upgrade. And we'll McGugan Hey, guys, we could use the pie upgrade. Because Rich is dropping support for three, six. So just clean it up.

00:32:03 Yeah. And then I want to follow up with the with the the first thing I was talking about, about the decorators. So Henry Shriner said, I think I got the wrong one. But for that exact exam example, I'm not fond of making the test directory in portable unless I have to a mark might be better. And and I guess I brushed that off too quickly. I think I still not sure how I would use this. If I were to, if I were to put a bunch of these. Like if I had a project wide decorators that I wanted to use. I don't know what the best way to do that would be it might be a non test file that I would import off to play with it. So thanks for Henry for bringing that up. I'm not quite sure how to deal with that problem. So indeed. All right. Well, should we call it a week? Let's call it. Alright. Thanks, everybody, for showing up. We'll talk to you next week. Bye bye.

