00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 400.

00:00:08 Woo.

00:00:09 How about that?

00:00:10 Yeah.

00:00:11 I'm Michael Kennedy.

00:00:12 I'm Brian Okken.

00:00:13 And this episode is brought to you by Scout APM.

00:00:16 Check them out.

00:00:17 Links in the podcast player show notes are on the website and we'll tell you more about them later.

00:00:21 Connect with us over on Mastodon.

00:00:23 Links in the show notes.

00:00:24 And hopefully you're watching us live now on Mondays.

00:00:28 Usually you can find out by going to pythonbytes.fm/live and usually we have the next one scheduled and you can get notified about that.

00:00:35 And for those of you who would like, even if you missed the show, a quick digest,

00:00:40 an artisanal handcrafted digest of all the things we talked about for the week.

00:00:46 Just become a friend of the show.

00:00:47 Sign up for the newsletter.

00:00:48 Pythonbytes.fm.

00:00:49 Click on newsletter.

00:00:50 Well, before we get into the topics officially, Brian, I think we got to

00:00:55 say a little bit, something about 400.

00:00:56 Yeah.

00:00:57 It's quite a big number.

00:00:59 So big that you are an amazing hat with the butterfly.

00:01:01 Yeah.

00:01:01 That's a cool hat.

00:01:04 Well, I honestly, I want to start by saying one, thanks to you.

00:01:07 Two, thanks to the thousands and thousands of people who listen every week.

00:01:12 Make this possible, honestly.

00:01:14 And I really, really appreciate it.

00:01:15 Yeah.

00:01:15 I want, thanks to you too.

00:01:17 I'm whatever year it was when we started, you reached out to me and said, Hey, what

00:01:21 would you feel like doing a podcast together?

00:01:23 And I really wouldn't have thought we would have been at 400 episodes.

00:01:27 It's pretty cool.

00:01:27 I know it's, it's incredible.

00:01:29 And I thought, well, we don't have really any guests or a lot of like, you know,

00:01:33 forum stuff, so let's celebrate this.

00:01:35 I asked ChatGPT to say, I said, look, there's this big milestone.

00:01:39 Could you just give us a quick celebration sort of thing?

00:01:42 And I think there's a few things that are notable before I read this off.

00:01:45 It's pretty short.

00:01:46 So, but I think it's notable that it knows about you, knows about me, knows

00:01:50 about the show, knows about what the show is about and the topics we've covered.

00:01:54 So anyway, here we go.

00:01:55 This is ChatGPT celebrates episode 400 of Python bites.

00:01:58 Welcome to the big four zero zero Pythonistas.

00:02:01 It's hard to believe we're celebrating the 400th episode of Python bites from the

00:02:05 early days of bite-sized Python news to becoming the source of all things Python.

00:02:09 It's been a wild ride.

00:02:10 We've laughed over the quirks, gasp at new libraries and said farewell to the GIL together.

00:02:15 Whether you're a seasoned developer, a curious learner, or just here for the

00:02:19 witty banter, you've been an essential part of this journey to Michael and Brian.

00:02:22 You've built a community that turns import this and more than just Zen.

00:02:27 It's a family of passionate Pythonistas.

00:02:30 Your dedication, insight, and humor makes this show more than just tech news.

00:02:33 It's a weekly celebration of what we love about Python and why we keep coming back for more.

00:02:37 Here's to the next 400 episodes.

00:02:39 May your code be bug-free, your test pass on the first run, and your Python

00:02:44 version always be up to date, rocket snake emoji.

00:02:47 Oh, that's pretty good.

00:02:48 Isn't it?

00:02:48 Actually?

00:02:49 Yeah.

00:02:49 Yeah.

00:02:49 I'm touched.

00:02:50 Chat GPT, I didn't know you loved me that much.

00:02:53 I know.

00:02:53 Thank you.

00:02:53 Chat GPT.

00:02:54 And Michael, that's, that's just touching.

00:02:56 It is.

00:02:58 It's pretty cool actually.

00:02:59 I like that.

00:03:00 Turn your, turn, turns import this into more than just Zen.

00:03:03 Indeed.

00:03:04 I see some thank you out in the audience and thank you all you guys out there.

00:03:09 With that, shall we talk about whatever you want to talk about first?

00:03:12 Sure.

00:03:13 As we've done 399 other times, apparently.

00:03:16 Yeah.

00:03:17 let's talk about Python.

00:03:19 specifically Python 313.

00:03:22 It's just right around the corner.

00:03:24 the official release is scheduled for, the 313.0 is supposed to come out in October on October 1st.

00:03:32 That's just right around the corner.

00:03:33 That's hard to believe.

00:03:34 So 313.0 candidate release or RC2 is out.

00:03:40 so that was released September 6th, a few days ago.

00:03:44 And, I'm linking to a, oh, I didn't link to the right thing, but, there is, oh, well, I'll just talk about it here.

00:03:52 Anyway.

00:03:53 it comes out October 1st, Lucas Lange, which we will link to his post, has a post to talk about it as well.

00:04:00 Also talks about, three, a few other releases.

00:04:05 There's, there's, security releases for 312, 311, 310, 3, 9, and 3, 8.

00:04:11 it's a lot of releases.

00:04:13 And, and the interesting thing about the older releases, I'll cover those first.

00:04:17 is that three, let's see, 312 has a, has a Mac release.

00:04:23 It has binary releases and the Mac release is only for 10.13 or newer.

00:04:29 If you've kept up to date, like fairly recently, it should be fine.

00:04:33 Cause I looked at mine and it was way past that.

00:04:35 but there, there is a limited, there are limits to the Mac iOS, binary version and all of the, all the others like 311 through 3, 8, they don't,

00:04:45 they're not, they don't have binary distributions built, which is interesting.

00:04:49 but anyway, so, so those, what we're really excited about is 313.

00:04:55 Of course, it's coming out right around the corner.

00:04:57 There's a call to action here.

00:04:58 that is a strong encouragement for third party Python projects and maintainers of third party projects to prepare your projects because people

00:05:07 will be upgrading in October cause all the last upgrades have been so easy.

00:05:11 people are going to upgrade.

00:05:13 So make sure your, your projects are ready.

00:05:15 go ahead and start testing on them.

00:05:18 And, and if there's any issues, submit to the bug tracker.

00:05:23 and then also please keep in mind that this is a, the RC2 is a preview release.

00:05:29 So it's close to the final release, but it's not recommended for production environments.

00:05:34 So yes, test with it.

00:05:35 Don't run in production yet.

00:05:37 So that's cool.

00:05:38 The one thing that I thought was interesting.

00:05:39 So I, I, I've kind of migrated.

00:05:42 We talked about this recently is, is upgrading your local Python with UV Python.

00:05:49 You can't use that for 313.

00:05:51 So you still have to use, python.org or some other mechanism to install 313.

00:05:56 You can't do that through UV Python yet.

00:05:58 So yeah, actually one of my items touches on that.

00:06:02 So we'll talk about that shortly.

00:06:03 Okay.

00:06:04 So yeah, I'm excited.

00:06:06 Yay.

00:06:06 Henry's running around the audience says we're also going to have to change

00:06:10 building wheels with 312 to be, 10 plus 13, 10 dot 13 plus and see how build wheels interesting that, you know, you think about the cascading

00:06:18 effects of all these requirements, you know, and 10, 13 being the macOS version.

00:06:23 Yeah.

00:06:24 Is that, was that when they split and did like the Intel versus whatever the other thing is, or

00:06:29 it may have been, but the current version does support the Intel ones.

00:06:35 I'm pretty sure it's just, well, as of today, they're supposed to announce a lot of that apples,

00:06:39 Apple intelligence, their AI.

00:06:41 boy.

00:06:42 So that I believe is going to be one of the hard splits as well.

00:06:46 It's like that stuff.

00:06:47 I don't think it's going to work on Intel, but we'll see what they say.

00:06:49 Okay.

00:06:50 I think that's literally going on right now as we speak, the Apple keynote thing,

00:06:54 which is a weird one hour ad that people look forward to, okay.

00:06:57 Such as a world we live in.

00:06:59 All right, let's carry on with a, a pretty sweet transition from UV to talking more

00:07:05 UV here.

00:07:06 So I wrote up, you know, we've been talking about UV recently and I, a couple

00:07:11 of different, this is kind of a little mini extra, extra, extra all around one

00:07:14 topic.

00:07:15 So I wrote up an article about how I'm using the UV Python thing that you just

00:07:21 mentioned, Brian, using that to basically dramatically improve how we build Docker

00:07:27 images.

00:07:27 One of which runs or several of which I guess run Python bytes, Python bytes out

00:07:33 of M gives you the RSS feed, the files, all that kind of stuff.

00:07:36 Right?

00:07:36 Yeah.

00:07:36 So people can check that out, but the short and long of it is if you get down to

00:07:40 the bottom one, it comes with an example, a little flask app, multi multi TOL,

00:07:44 multi image, not multi tier flask app that shows how to go from basic Ubuntu

00:07:49 image to having whatever version of Python you want with the virtual environment

00:07:53 set up on it, including setting up your dependencies and a web server and all of

00:07:59 that in seven seconds from nothing like a dash dash, no cache style, a build.

00:08:04 And that gives you a base image.

00:08:05 You can just kind of keep chilling.

00:08:07 And then if you depend, you take an app and you build it on top of that, like a

00:08:10 flask app or some other kind of Python app, I got it building around seven to

00:08:13 eight, 700 to 800 milliseconds.

00:08:16 So less than a second, which is awesome.

00:08:19 Hey, so, you know, we talked about this back on three 96 and three 98, and we've

00:08:25 been kind of hitting a lot, but I just recently had Shirley Marsh from Astral on.

00:08:30 And we talked about this and I asked him things like, so I see you don't have the,

00:08:36 it didn't have the latest three 12 for a couple of days.

00:08:39 And, I noticed that you don't have a three 13 and basically his thinking.

00:08:45 I, if I remember it correctly is more or less, we plan on supporting a version before it becomes final, before it becomes stable and gets released.

00:08:55 So by the time three 13 gold, gold master, right, whatever it comes after

00:09:00 the official three 13 zero release, I guess, comes out, it should be available

00:09:05 in UV, but I'm not sure how much before then.

00:09:07 Yeah.

00:09:08 Well, and we also heard from, so Henry Schreiner says three 13 just got merged in, in the same place, which is, which is that Python build standalone.

00:09:17 Also the three 13 T is now in a PR.

00:09:20 So it, Oh, interesting.

00:09:21 We should free threaded version.

00:09:22 Yeah.

00:09:23 So hopefully, yeah, I think, and that was my final thing to point out is if

00:09:27 people are like, well, okay, when I say UV Python or what I actually, I don't

00:09:32 say UV Python necessarily, what I do is I create a virtual environment with UV and

00:09:37 I just, I want it, I tell it, I want it this version of Python.

00:09:40 Oh, okay.

00:09:41 Right.

00:09:41 And it goes, Oh, you want that version of Python?

00:09:43 Either we've already cached it, or if we don't, we'll just download it from

00:09:46 Python build standalone and then put it there for you.

00:09:49 So if your common working artifact is a virtual environment, then you don't have to necessarily have, it doesn't even matter if you have system

00:09:57 Python, like literally you could not have Python on your machine and this

00:10:00 would still get you a virtual environment with the right version of Python that you

00:10:03 ask.

00:10:04 But the source of all of this also, I learned about this from talking to Charlie

00:10:08 last week is, Python build standalone.

00:10:12 If you look at the releases, like, let's see, for example, on the latest release,

00:10:18 there are 773 different builds or something.

00:10:22 Wow.

00:10:22 Look at that.

00:10:23 So you can see here, there's CPython 3, 10, 14 with something on x86, 64, four PCs

00:10:30 on windows with this thing, you know, there's just so many variations.

00:10:34 So basically when you say UV, create me a virtual environment with this Python,

00:10:37 it's going to go through those 773, find the one that's the right fit and just

00:10:41 download it and put it there if it's not already cached.

00:10:44 So anyway, that's the whole story.

00:10:45 Okay.

00:10:46 Okay.

00:10:47 So that thing has that, that one thing has, has a 313.

00:10:51 It just hasn't been released yet then.

00:10:53 So, or I guess we're waiting on that release.

00:10:55 Yeah.

00:10:55 So, so thank you, Henry.

00:10:57 That, that, gives us some more information.

00:10:59 I imagine that it's really down to just what Python build standalone is doing.

00:11:03 And then UV just give me the list of options and let me find things that, you

00:11:08 know, match this operating system.

00:11:09 Something like that.

00:11:10 It sounds like both of us went down the same rabbit hole, but it is kind of

00:11:13 neat to find out where the source of this is so that I know that it wasn't that

00:11:18 hidden, but it did take a little bit of looking to figure out.

00:11:21 Yeah.

00:11:21 Well, they could have been building it themselves.

00:11:23 You don't know right now.

00:11:24 Like you don't know what setting there's all sorts of stuff that's interesting.

00:11:28 And there's also, I recall correctly, Charlie said there are different build

00:11:33 optimization settings for Python build standalone than say what you get off of

00:11:37 python.org or at a homebrew.

00:11:39 It's, it's interesting.

00:11:41 For example, like profile guided optimizations and things like that.

00:11:45 And I don't remember which had, which, which is better, but I feel like the

00:11:48 build standalone came out pretty strong there.

00:11:50 Yeah.

00:11:50 Before we move on, Brian, let me tell you real quick about Scout APM.

00:11:55 They're big supporters of Python bites.

00:11:57 So we appreciate that very much.

00:11:59 So if you are tired of spending hours trying to find the root cause of issues

00:12:04 impacting your performance, then you owe it to yourself to check out Scout APM.

00:12:08 They're a leading Python application performance monitoring tool, APM, that

00:12:13 helps you identify and solve performance abnormalities faster and easier.

00:12:17 Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs, and the dreaded N plus one queries that you can end up if you do

00:12:26 lazy loading in your ORM, then you say, Oh no, why is it so slow?

00:12:30 Why are you doing 200 database queries for what should be one?

00:12:33 So you can find out things like that.

00:12:34 And it links it back directly to the source code.

00:12:36 So you can spend less time in the debugger and healing logs and just finding the problems and moving on.

00:12:42 And you'll love it because it's built for developers by developers.

00:12:45 It makes it easy to get set up.

00:12:46 Seriously.

00:12:47 You can do it in less than four minutes.

00:12:49 So that's awesome.

00:12:50 And the best part is the pricing is straightforward.

00:12:53 You only pay for the data that used with no hidden overage fees or per seat pricing.

00:12:58 And I just learned this, Brian.

00:13:01 They also have, they provide the pro version for free to all open source projects.

00:13:06 So if you're an open source maintainer and you want to have Scout APM for that

00:13:10 project, just shoot them a message or something on their pricing page about that.

00:13:13 So you can start your free trial and get instant insights today.

00:13:17 Visit by them, by set of him slash Scout.

00:13:20 The link is in your podcast player show notes as well.

00:13:22 And please use that link.

00:13:23 Don't just search for them because otherwise they don't think you came from us.

00:13:27 And then they'd stop supporting the show.

00:13:29 So please use our link by them, by set of him slash Scout, check them out.

00:13:32 It really supports the show.

00:13:34 All right, over to you.

00:13:36 Cool.

00:13:36 Cool.

00:13:36 I wanted to talk about read the docs for a little bit.

00:13:40 So, it just seems like, you know, read the docs been around forever, right?

00:13:44 Apparently have.

00:13:45 Yeah.

00:13:46 So, so there's an article by Eric Holscher, 10 years of sustainable open

00:13:52 source, and it's a, it's a little bit of some, some cool history here.

00:13:56 so one, I, we totally rely on, read the docs, and, and the, all the tools around it.

00:14:05 So read the docs apparently started in a, with a 40 hour, 48 hour open source sprint

00:14:12 in 2010, 48 hours.

00:14:14 Well, so two days, I guess, and it grew to become a successful part of the

00:14:19 Python, Python ecosystem and other, open source projects.

00:14:23 And, yeah, obviously it's just been around 2010.

00:14:27 but I guess that's, that's about the time that I really started jumping in and

00:14:32 being part of the Python community and not just part of just a user of Python,

00:14:35 but, but part of the community.

00:14:37 So, so that's why it looks like it seems like it's been there forever for me.

00:14:41 and in 2014, they created read.

00:14:45 So read the docs.org is the open source thing.

00:14:48 Read the docs.com was the, is in 2014.

00:14:53 And there's links to the announcements from 2010 for announcing read the docs

00:14:58 and the announcement for, read, read the docs for business, the.com.

00:15:03 So this is kind of an interesting story about how to make a, a, a service

00:15:09 that, that helps, open source communities all over the place.

00:15:12 and how to make that sustainable.

00:15:14 So there's still sustainable, which is cool.

00:15:17 So what is the sustainability model?

00:15:19 How do they do that?

00:15:20 Because there's, there's four full-time people working on this, which is not that

00:15:24 big, I mean, four people, there's probably a lot of, volunteer, volunteers on the open source side also.

00:15:30 but for full-time people, that's pretty cool.

00:15:33 Anyway, there's, the.org side has, single non-tracking ads.

00:15:38 And I think they were one of the first that I was aware of that did, did

00:15:43 like a single, just like ethic ad ethical ads or something that just had ads, but

00:15:48 it wasn't tracking you at all, which is how ads should be, I think.

00:15:51 and I I'm totally okay with that to help them sustain their model.

00:15:56 And then the.com is a paid service.

00:15:58 It helps companies for private repos and additional, they have other benefits

00:16:02 also, but sort of read the docs for companies.

00:16:05 and then it also talks about things that didn't work, which I love this.

00:16:10 I love the discussing the parts that didn't work.

00:16:12 I'd like, have you tried this?

00:16:14 one of the things was, just trying on trying, donations and other optional support.

00:16:19 And it just didn't work at all.

00:16:21 And it left people with, mental health issues and burnout.

00:16:24 This is that's terrible.

00:16:26 the other thing was, consulting services where you think about that, like maybe offer services for people that to pay, but, the

00:16:34 bad downside of that was it took away from a time that they wanted to work on the main project.

00:16:40 they experimented with grant funding and that was cool.

00:16:43 Cause they got some, like a blob of money at a time, but it's a one-time

00:16:46 thing and it's not that easy to keep going and getting more grants.

00:16:50 So the current model is the paid service plus the advertising.

00:16:54 And, that's cool.

00:16:55 talk about some lessons learned, which is neat.

00:16:58 basically, you don't get extra points for being bootstrapped.

00:17:02 people will compare you to VC funded companies anyway, which is it's, it's

00:17:07 cool that they call it out because that's obvious, but also sometimes not obvious.

00:17:11 even if you're community driven bootstrapped, you don't get any points for that, but we, we still expect you to be perfect.

00:17:18 the other thing was, that keeping trust in the community was the most important thing.

00:17:24 and, yeah, it, they said it it's cliche, but trust is hard to earn and easy to lose.

00:17:30 definitely.

00:17:31 and they can't, can't maximize profits.

00:17:34 unless you keep trust in the, with the community, which, definitely, support that.

00:17:40 the, the one part that I thought was one of the reasons why I highlighted

00:17:44 this is because this is a lesson I think that can go, not just for people trying

00:17:49 to sustain a funding model, but just eat lots of open source projects can, can

00:17:54 listen to this and the lesson is contribution is easier in less complex parts of the code base.

00:18:00 So they've noticed that they've got, they've got their core stuff, the read the docs.org repo.

00:18:05 the core stuff that is.

00:18:07 Got some complex stuff in it and it's hard to get people to help out, but

00:18:11 there's other things like contributions to the Sphinx theme or extensions or

00:18:16 small Python or JavaScript projects that are work alongside of it that are easier

00:18:22 to get people to contribute to.

00:18:23 Cause they're, they're smaller, less, I guess, less complicated bits of code.

00:18:28 I think a lot of open source projects probably could do something like that of separating out where the code is and say, if you'd like to

00:18:36 contribute, maybe don't touch this part.

00:18:38 Cause it's kind of hairy and you might, it takes a while to get into.

00:18:41 You can, but it's going to be difficult.

00:18:43 and, I've noticed that with lots of projects.

00:18:47 So anyway, congratulations to all of them for 10 years.

00:18:51 That's awesome.

00:18:52 And, and then I was reading something and I found, I learned something is that

00:18:57 there's, there's, I kind of associate read the docs with Sphinx only, but that's not

00:19:02 true.

00:19:02 there is now, there was a, effort to separate some of the customization and they have a different build process going on now.

00:19:10 And you can, the Sphinx or the read the docs build system now supports any

00:19:15 documentation tool or it should, which I didn't know about.

00:19:19 So that's.

00:19:19 Yeah.

00:19:20 That's cool.

00:19:20 Almost like a general static site platform probably.

00:19:23 Yeah.

00:19:24 Yeah.

00:19:24 Anyway, congratulations.

00:19:26 It's a pretty important section of the Python community and also got some cool

00:19:31 Python, support Lint ties as well, which is cool.

00:19:33 Yeah.

00:19:34 Yeah.

00:19:34 Really helps humanize the Python space.

00:19:38 Wouldn't you say Brian?

00:19:39 Yeah.

00:19:40 Which is what I want to talk about next.

00:19:41 This project by Hugo.

00:19:44 I know you've pointed this out before Brian, I believe I can actually get to him.

00:19:48 There we go.

00:19:49 Hugo van Kinnamande, CPython core developer and many, many project maintainer.

00:19:55 One of the projects is humanize.

00:19:58 And I recently, when I've written this code for, you know, small scale before,

00:20:04 because I kind of needed it.

00:20:05 And if I knew about this, it just wouldn't.

00:20:07 But also I recently just started using it and it's super simple, super easy to adopt.

00:20:13 You see examples of it right here on the GitHub screen.

00:20:16 If you visit their GitHub repo and see where it says seven months ago, last

00:20:20 week, last year, that kind of stuff.

00:20:22 Instead of just putting a date.

00:20:24 Yeah.

00:20:24 It's that kind of stuff that humanize does, but for different things.

00:20:28 So if I go over to, I love all these ties from falling off from you from read the

00:20:32 docs, if I go over to read the docs for them and I wait, apparently, and it comes

00:20:36 up, okay, so then they basically have four areas that are relevant.

00:20:41 It works in different languages, many, many different languages, which is cool.

00:20:44 It mostly works in numbers, but as I pointed out, it also works on time.

00:20:48 So we look at time.

00:20:49 It has a natural date.

00:20:51 some of these don't have great examples.

00:20:54 For example, the time and file size could have really nice, dates.

00:20:59 So the one I mentioned with the GitHub is natural Delta.

00:21:02 It would say things like a year ago or two years ago, or in 13 seconds, stuff like that.

00:21:08 It has a similar natural time and precise Deltas if you want those kinds of things.

00:21:15 Also as for file size.

00:21:16 So it'll say things like 300 bytes, 3.0 megabytes, 2.9 kilobytes or whatever.

00:21:23 Right.

00:21:23 So you can just give it a number and tell it, you know, here's how many bytes it is.

00:21:27 Make this friendly and it'll kind of figure out the right scale is a megabyte

00:21:32 kilobyte that you don't want 0.00, zero megabytes.

00:21:35 You just want, you know, switch that to kilobytes or bytes.

00:21:38 Right.

00:21:39 So file size is cool, but the one that has tons of stuff going on is number.

00:21:43 So you can have an associated press style number.

00:21:47 I guess it's must be the way they're a convention when you're writing articles on how to speak about numbers.

00:21:53 So if it's a small number, use, written out words like F I V E for five.

00:21:58 But if it's, you know, one zero zero one, two, one seven, you don't, you

00:22:03 don't write that out as a huge long thing.

00:22:04 You just put the straight number.

00:22:05 Right.

00:22:06 So I think the cutoff is 10, which is pretty cool.

00:22:09 it has clamp.

00:22:10 And so you can talk about percentiles.

00:22:12 For example, if you say a really, really small number and you say the floor is 0.01

00:22:18 percent, it'll, or just that number as a ratio, it'll say the number that you have

00:22:23 for this, the value is less than 0.01.

00:22:25 Oh, nice.

00:22:27 Or you can do it as a percent here and you can say this one, this particular

00:22:30 value is greater than 99% or it's in the top 10% or you can just say like under

00:22:35 1 million, which is pretty awesome.

00:22:38 Right?

00:22:38 Yeah.

00:22:39 So what else have we got here?

00:22:40 Fractional.

00:22:41 So this just takes, you know, floating point numbers and puts them into fractions, like one and three 10s or one and a third or something like that.

00:22:47 Into comma, this one I would just do with formatting, but you can have it put commas in for separators.

00:22:53 Into word.

00:22:54 This one is really nice.

00:22:56 So if I have one with seven zeros, it'll say 1.0 million, or if you put in 1.2

00:23:02 billion, but as like integers, it'll just say 1.2 billion or all kinds of things.

00:23:07 You can give it precisions, et cetera.

00:23:09 Nice.

00:23:10 Right?

00:23:10 It's very cool.

00:23:11 I like that.

00:23:12 The scientific stuff.

00:23:13 The scientific is good.

00:23:14 The metric.

00:23:15 This is really nice.

00:23:16 If you give it a base measurement, like Watts or grams or something, and then

00:23:23 you say, give me this number in that unit system, so for example, if you

00:23:27 say 1500 in terms of volts, it'll give you 1.5 kilovolts.

00:23:32 That's pretty fancy.

00:23:33 Yeah.

00:23:34 Or Watts.

00:23:34 And you give it some huge number, say this many megawatts or really, really

00:23:38 small one micro, I don't know what F is in metric because to me that's Fahrenheit, so whatever.

00:23:43 and the micro stuff is cool.

00:23:46 Cause I always have to hunt it down.

00:23:48 I have no idea how to type a micro symbol.

00:23:50 Yeah.

00:23:51 So, click to the scientific one or the, the 10 to the powers are pretty cool.

00:23:56 the 10 to the minus one, the, with the little superscript that's.

00:24:01 Yeah.

00:24:01 Yeah.

00:24:02 Instead of having 10 E three, it actually has 10 superscript three.

00:24:06 So a thousand is one times 10 to the three with actual the three, like you

00:24:11 would write it, not the way computers have to write it.

00:24:13 So yeah, it's really nice.

00:24:14 Anyway, it's just, if you need this kind of stuff, really easy to adopt and

00:24:18 understand, if not, then, you know, still interesting.

00:24:21 However, if someone is out there looking to contribute to this project, I would

00:24:25 say more examples, the numbers have awesome examples and all the other ones

00:24:29 are kind of, you may or may not even know what it's going to do.

00:24:32 So, Hey, let's get there.

00:24:34 Some examples as a PR and shipping over to you guys.

00:24:36 That'd be cool.

00:24:37 And, you know, documentation contributions are usually very welcome.

00:24:41 So yes, indeed.

00:24:42 All right.

00:24:43 Extras, Brian.

00:24:44 I just have one extra.

00:24:45 I wanted that to shut out.

00:24:47 So I talked about that.

00:24:48 I thought test podcast is going to go back to testing code, even though.

00:24:52 So it is.

00:24:53 So I finally finished that migration and actually put out an episode.

00:24:57 So, 222 is the 222 is the second episode of a two part series that started in June.

00:25:05 Sorry, serious cliffhanger, serious cliffhanger.

00:25:09 So, yeah.

00:25:10 So that's there.

00:25:13 And then I got a question.

00:25:14 I sent out an email and said, Hey, finally have another episode out.

00:25:17 And somebody said, you should do transcripts.

00:25:20 And I guess I hadn't announced that, but transcripts are there.

00:25:23 I've had transcripts in the last, I don't know, like the last 30 episodes or something.

00:25:28 So transcripts are AI generated.

00:25:31 So they're not perfect.

00:25:32 Like this is great.

00:25:33 I gotta find one of these, a DB dot PI that's fine, but there's like some, some

00:25:38 dot pies that show up as dot P I and some dot E I E is some a dot DB, like actually

00:25:45 spelling out the D O T this is terrible.

00:25:48 Oh, API dot P I E is hilarious.

00:25:51 So, I could go through and try to fix this stuff, but I'm going to probably

00:25:55 try to hire my kid to go do it for me.

00:25:57 But anyway, so they're there.

00:25:59 That's all I wanted to say is it's in it.

00:26:02 I'm not doing this weekly.

00:26:03 I actually talked to, to a friend of mine, Michael Kennedy.

00:26:07 and he said, he said it'd be kind of cool to, to do seasons.

00:26:12 And so I'm kicking around the idea of doing seasons.

00:26:15 Yeah.

00:26:15 Well, themes.

00:26:16 I like it.

00:26:16 I think it'd be great.

00:26:17 Yeah.

00:26:17 Anyway, that's just my extra.

00:26:20 Awesome.

00:26:20 I have a couple of quick, code in the castle event is almost over.

00:26:24 It's almost, booked and happening.

00:26:27 So if you want to be part of it, I'll put a link in there.

00:26:29 Please.

00:26:29 last kind of last call.

00:26:31 So check that out.

00:26:32 Yeah, I know.

00:26:33 All right.

00:26:33 We got some interesting email.

00:26:36 That's it.

00:26:36 I think I covered the Anaconda code plugin for Excel, how it runs locally.

00:26:42 It runs on.

00:26:43 PyScript, all these good things gives you other features.

00:26:45 Well, look who sent this in.

00:26:48 I want to make sure I give some credits.

00:26:50 This was by Ruud van der Ham.

00:26:52 Thank you for sending this in.

00:26:53 This is a project created and basically, and when you have these Excel, I thought

00:27:00 in bits of code, you have to write all the code in one function and things like that.

00:27:04 And there's other limitations as well.

00:27:06 So basically he made it so you can have a lot more, formatting variability.

00:27:12 I suppose.

00:27:13 And then you just have this bit of code that will just run a whole set of

00:27:17 different bits of code that you can have into your workbook, which is kind of

00:27:21 interesting.

00:27:21 So as a follow-up to that, people are interested.

00:27:24 They can check that out.

00:27:25 And just a quick out shout out to iStats menu.

00:27:28 Do you iStats menu, Brian, for your Mac?

00:27:30 No.

00:27:31 If you want more real time stats for what your Mac is up to as they just released a

00:27:36 new version, looks super cool.

00:27:38 I'm just starting to play with it.

00:27:39 So obvious things like CPU and stuff, but if you hover over them, it'll give you

00:27:43 tons of detail.

00:27:44 Like macOS is kind of hard to get a lot of these pieces of information, but it'll

00:27:48 have uptime.

00:27:49 It'll have, like how much power your CPU is pulling out of, or your computer's

00:27:54 pulling out of the wall, which is kind of interesting as a, you know, how hard is it

00:27:57 working?

00:27:58 Like how many Watts is it pulling?

00:27:59 And so anyway, that's cool.

00:28:01 That's cool.

00:28:02 Yeah.

00:28:02 People can check it out.

00:28:03 It's pretty nice.

00:28:04 Nice.

00:28:05 Yeah.

00:28:05 That is it.

00:28:06 And you want to close it out with a joke, our big episode 400?

00:28:10 Definitely.

00:28:11 All right.

00:28:12 This come, this is sort of in the theme of I'm learning new programming languages,

00:28:16 right?

00:28:17 Mostly as beginners says, comes from DevHumor says, beginner programmers, when

00:28:21 they learn a new programming language, just a shock.

00:28:24 Is this Morty?

00:28:24 I don't know.

00:28:25 I think so.

00:28:25 Anyway.

00:28:26 Well, that just sounds like Python with extra steps.

00:28:28 Yeah.

00:28:30 Yeah, exactly.

00:28:32 Exactly.

00:28:33 That's cool.

00:28:34 But, why all the stuff there?

00:28:36 Anyway, thanks for episode 400.

00:28:39 Thank you everyone for listening.

00:28:40 Thank you, Scott APM for supporting the show.

00:28:42 Check them out as well.

00:28:43 Thank you.

00:28:44 Yep.

00:28:44 See you, Brian.

