00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly

00:00:04 to your earbuds. This is episode 400. How about that?

00:00:10 I'm Michael Kennedy.

00:00:13 I'm Brian Okken.

00:00:14 And this episode is brought to you by Scout APM. Check them out. Links to the podcast players,

00:00:19 show notes are on the website, and we'll tell you more about them later. Connect with us over on

00:00:24 Mastodon. Links in the show notes. And hopefully you're watching us live now on Mondays. Usually

00:00:30 you can find out by going to pythonbytes.fm/live and usually we have the next one scheduled and

00:00:36 you can get notified about that. And for those of you who would like, even if you missed the show, a

00:00:42 quick digest, an artisanal handcrafted digest of all the things we talked about for the week,

00:00:51 just become a friend of the show, sign up for the newsletter, Python Bytes.fm, click on newsletter.

00:00:55 Well, before we get into the topics, officially, Brian, I think we got to say a little bit

00:01:02 something about 400. Yeah, it's quite a big number. So big that you wore an amazing hat

00:01:08 with a butterfly. Yeah. That's a cool hat. Well, I honestly, I want to start by saying one,

00:01:16 thanks to you. Two, thanks to the thousands and thousands of people who listen every week,

00:01:23 make this possible, honestly. And I really, really appreciate it. Yeah. Thanks to you too.

00:01:28 Whatever year it was when we started, you reached out to me and said, "Hey,

00:01:33 what do you feel like doing a podcast together?" And I really wouldn't have thought we would have

00:01:38 been at 400 episodes. It's pretty cool. I know. It's incredible. And I thought,

00:01:43 well, we don't have really any guests or a lot of like, you know, forum stuff. So

00:01:48 let's celebrate this. I asked ChatGPT to say, I said, look, there's this big milestone.

00:01:54 Could you just give us a quick celebration sort of thing? And I think there's a few things that

00:01:58 are notable before I read this off. It's pretty short. So, okay. But I think it's notable that it

00:02:04 knows about you, knows about me, knows about the show, knows about what the show is about

00:02:08 and the topics we've covered. So anyway, here we go. This is ChatGPT celebrates episode 400

00:02:13 of Python Bytes. Welcome to the big four zero zero Pythonistas. It's hard to believe we're

00:02:19 celebrating the 400th episode of Python Bytes. From the early days of byte-sized Python news

00:02:24 to becoming the source of all things Python, it's been a wild ride. We've laughed over the quirks,

00:02:29 gasped at new libraries and said farewell to the GIL together. Whether you're a seasoned

00:02:34 developer, a curious learner, or just here for the witty banter, you've been an essential part

00:02:38 of this journey. To Michael and Brian, you've built a community that turns import this and

00:02:43 more than just Zen. It's a family of passionate Pythonistas. Your dedication, insight and humor

00:02:49 makes this show more than just tech news. It's a weekly celebration of what we love about Python

00:02:53 and why we keep coming back for more. Here's to the next 400 episodes. May your code be bug-free,

00:03:00 your test pass on the first run, and your Python version always be up to date. Rocket snake emoji.

00:03:05 That's pretty good, isn't it? Actually.

00:03:08 Yeah. Yeah. I'm touched. Chat GPT, I didn't know you loved me that much.

00:03:12 I know. Thank you, ChatGPT.

00:03:13 And Michael, that's just touching.

00:03:14 It is.

00:03:17 It's pretty cool, actually. I like that. Turns import this into more than just Zen.

00:03:23 Indeed. I see some thank you out in the audience. And thank you, all you guys out there.

00:03:30 With that, shall we talk about whatever you want to talk about first?

00:03:34 Sure.

00:03:35 As we've done 399 other times, apparently.

00:03:38 Yeah. Let's talk about Python. Specifically Python 3.13. It's just right around the corner.

00:03:45 The official release is scheduled for the 3.13.0. It was supposed to come out on October 1st. That's

00:03:54 October 1st. That's just right around the corner. That's hard to believe. So 3.13.0 candidate release

00:04:01 or RC2 is out. So that was released September 6th, a few days ago. And I'm linking to a...

00:04:10 Oh, I didn't link to the right thing. But there is... Oh, well. I'll just talk about it here.

00:04:18 Anyway, it comes out October 1st. Lucas Lange, which we will link to his post,

00:04:24 has a post to talk about it as well. Also talks about a few other releases. There's security

00:04:34 releases for 3.12, 3.11, 3.10, 3.9, and 3.8. That's a lot of releases. And an interesting

00:04:41 thing about the older releases, I'll cover those first, is that 3... Let's see. 3.12 has a

00:04:49 Mac release. It has binary releases. And the Mac release is only for 10.13 or newer.

00:04:57 If you've kept up to date fairly recently, it should be fine. Because I looked at mine and it

00:05:02 was way past that. But there is a limited... There are limits to the macOS binary version.

00:05:10 And all of the others, like 3.11 through 3.8, they don't have binary distributions built.

00:05:18 Which is interesting. But anyway... So, those... What we're really excited about is 3.13,

00:05:26 of course. It's coming out right around the corner. There's a call to action here.

00:05:29 That is a strong encouragement for third party Python projects and maintainers of third party

00:05:36 projects to prepare your projects. Because people will be upgrading in October. Because all the last

00:05:42 upgrades have been so easy, people are gonna upgrade. So, make sure your projects are ready.

00:05:47 Go ahead and start testing on them. And if there's any issues, submit to the bug tracker.

00:05:56 And then also, please keep in mind that this is... The RC2 is a preview release. So,

00:06:03 it's close to the final release. But it's not recommended for production environments. So,

00:06:08 yes, test with it. Don't run in production yet. So, that's cool. The one thing that I thought

00:06:14 was interesting... So, I've kind of migrated... We talked about this recently. Is upgrading your

00:06:22 local Python with uvPython. You can't use that for 3.13. So, you still have to use Python.org or

00:06:29 some other mechanism to install 3.13. You can't do that through uvPython yet.

00:06:34 >> Yet. Yeah. Actually, one of my items touches on that. So, we'll talk about that shortly.

00:06:40 >> Okay. So, yeah. I'm excited. >> Yay. Henry, he's running around in the audience, says, "We're also gonna have to change building wheels with 3.12 to be

00:06:51 10.13+. And see how build wheels?" Interesting. You know, you think about the cascading effects

00:06:58 of all these requirements. And 10.13 being the macOS version.

00:07:03 >> Yeah. Was that when they split and did the Intel versus whatever the other thing is?

00:07:10 >> I think it may have been. But the current version does support the Intel ones. I'm pretty

00:07:18 sure. It's just... Well, as of today, they're supposed to announce a lot of that Apple

00:07:23 intelligence, their AI. Boy. So, that, I believe, is gonna be one of the hard splits as well. It's

00:07:30 like that stuff I don't think is gonna work on Intel. But we'll see what they say.

00:07:33 >> Okay. >> I think that's literally going on right now as we speak. The Apple keynote thing. Which is a weird one-hour ad that people look

00:07:43 forward to. Yeah. Okay. Such is the world we live in. All right. Let's carry on with a pretty sweet

00:07:50 transition from UV to talking more UV here. So, I wrote up... We've been talking about UV recently.

00:07:59 And a couple of different... This is kind of a little mini extra, extra, extra all around one

00:08:04 topic. So, I wrote up an article about how I'm using the UV Python thing that you just mentioned,

00:08:12 Brian. Using that to basically dramatically improve how we build Docker images. One of which

00:08:20 runs, or several of which, I guess, run Python bytes. Python bytes out of M, gives you the RSS

00:08:26 feed, the files, all that kind of stuff. Right? >> Yeah.

00:08:29 >> So, people can check that out. But the short and long of it is, if you get down to the bottom

00:08:34 one, it comes with an example, a little Flask app, multi, multi-tier, well, multi-image, not

00:08:38 multi-tier. Flask app that shows how to go from basic Ubuntu image to having whatever version of

00:08:45 Python you want with a virtual environment set up on it. Including setting up your dependencies

00:08:51 and a web server and all of that in seven seconds from nothing, like a dash, dash, no cache style

00:08:59 of build. And that gives you a base image. You can just kind of keep chilling. And then if you

00:09:03 take an app and you build it on top of that, like a Flask app or some other kind of Python app,

00:09:09 I got it building around 700 to 800 milliseconds. So, less than a second, which is awesome. Hey.

00:09:17 So, you know, we talked about this back on 396 and 398, and we've been kind of hitting a lot.

00:09:25 But I just recently had Charlie Marsh from Astral on, and we talked about this.

00:09:32 And I asked him things like, so, I see you don't have the, it didn't have the latest 3.12 for a

00:09:41 couple of days. And I noticed that you don't have a 3.13. And basically, his thinking, if I remember

00:09:50 it correctly, is more or less, we plan on supporting a version before it becomes final, before it

00:09:59 becomes stable and gets released. So, by the time 3.13, gold master, right, whatever it comes after,

00:10:07 the official 3.13.0 release, I guess, comes out, it should be available in UV. But I'm not sure

00:10:15 how much before then. Yeah. Well, and we also heard from, so, Henry Schreiner says 3.13 just

00:10:20 got merged in the same place, which is that Python build standalone. Also, the 3.13T is now in a PR.

00:10:28 So, it. Oh, interesting. We should. A free threaded version. Yeah. So, hopefully.

00:10:32 Yeah, I think, and that was my final thing to point out is, if people are like, well, okay,

00:10:39 when I say UV Python, or what I actually, I don't say UV Python necessarily. What I do

00:10:45 is I create a virtual environment with UV, and I just, I want it, I tell it I want it this version

00:10:51 of Python. Oh, okay. Right. And it goes, oh, you want that version of Python? Either we've already

00:10:56 cached it, or if we don't, we'll just download it from Python build standalone, and then put it

00:11:03 there for you. So, if your common working artifact is a virtual environment, then you don't have to

00:11:09 necessarily have, it doesn't even matter if you have system Python. Like, literally, you could

00:11:13 not have Python on your machine, and this would still get you a virtual environment with the

00:11:18 right version of Python that you ask. But the source of all this, also, I learned about this

00:11:23 from talking to Charlie last week, is Python build standalone. If you look at the releases,

00:11:31 like, let's see, for example, on the latest release, there are 773 different builds,

00:11:43 or something. Wow. Look at that. So, you can see here, there's CPython 3.10.14 with something on

00:11:50 x86-64, four PCs on Windows, with this thing, you know, there's just so many variations. So,

00:11:57 basically, when you say UV, create me a virtual environment with this Python, it's going to go

00:12:01 hot through those 773, find the one that's the right fit, and just download it and put it there,

00:12:05 if it's not already cached. So, anyway, that's the whole story. Okay. Okay. So, that thing has,

00:12:13 that one thing has a 3.13, it just hasn't been released yet, then. So, I guess we're waiting on

00:12:20 that release. Yeah. So, thank you, Henry, that gives us some more information. I imagine that

00:12:27 it's really down to just what Python build standalone is doing, and then UV just give me

00:12:34 the list of options and let me find things that, you know, match this operating system, something

00:12:38 like that. Well, it sounds like both of us went down the same rabbit hole, but it is kind of neat

00:12:42 to find out where the source of this is, so that I know that wasn't that hidden, but it did take a

00:12:48 little bit of looking to figure out. Yeah. Well, they could have been building it themselves,

00:12:53 you don't know right now, like, you don't know what setting, there's all sorts of stuff that's

00:12:56 interesting. And there's also, I recall correctly, Charlie said there are different

00:13:02 build optimization settings for Python build standalone than, say, what you get off of

00:13:08 python.org or out of homebrew. It's interesting. For example, like profile guided optimizations

00:13:16 and things like that. And I don't remember which had which, which is better, but I feel like the

00:13:21 build standalone came out pretty strong there. Yeah. Before we move on, Brian, let me tell you

00:13:27 real quick about Scout APM. They're big supporters of Python Bytes, so we appreciate that very much.

00:13:35 So, if you are tired of spending hours trying to find the root cause of issues

00:13:40 impacting your performance, then you owe it to yourself to check out Scout APM. They're a leading

00:13:46 Python application performance monitoring tool, APM, that helps you identify and solve performance

00:13:52 abnormalities faster and easier. Scout APM ties bottlenecks such as memory leaks, slow database

00:13:58 queries, background jobs, and the dreaded N plus one queries that you can end up if you do lazy

00:14:03 loading in your ORM, then you say, oh, no, why is it so slow? Why are you doing 200 database queries

00:14:09 for what should be one? So, you can find out things like that. And it links it back directly

00:14:14 to source code, so you can spend less time in the debugger and healing logs and just finding the

00:14:20 problems and moving on. And you'll love it because it's built for developers by developers. It makes

00:14:25 it easy to get set up. Seriously, you can do it in less than four minutes, so that's awesome. And

00:14:29 the best part is the pricing is straightforward. You only pay for the data that you use with no

00:14:35 hidden overage fees or per seat pricing. And I just learned this, Brian, they also have,

00:14:41 they provide the pro version for free to all open source projects. So, if you're an open source

00:14:47 maintainer and you want to have Scout APM for that project, just shoot them a message or something on

00:14:53 their pricing page about that. So, you can start your free trial and get instant insights today.

00:14:59 Visit pythonbytes.fm/scout. The link is in your podcast player show notes as well.

00:15:04 And please use that link. Don't just search for them because otherwise they don't think you came

00:15:09 from us. And then they'd stop supporting the show. So, please use our link pythonbytes.fm/scout.

00:15:14 Check them out. It really supports the show. All right, over to you.

00:15:19 >> Cool, cool. I wanted to talk about read the docs for a little bit. So, it just seems like,

00:15:27 you know, read the docs been around forever, right? Apparently.

00:15:30 >> They have. >> Yeah. So, there's an article by Eric Hulsher, 10 years of sustainable open source. And it's a little bit of some cool history here. So,

00:15:44 one, we totally rely on read the docs and all the tools around it. So, read the docs apparently

00:15:54 started with a 48 hour open source sprint in 2010. 48 hours, wow. So, two days, I guess. And it grew

00:16:05 to become a successful part of the Python ecosystem and other open source projects. And,

00:16:12 yeah, obviously, it's just been around, 2010. But I guess that's about the time that I really

00:16:19 started jumping in and being part of the Python community and not just part of, just a user of

00:16:24 Python, but part of the community. So, that's why it looks like, it seems like it's been there

00:16:30 forever for me. And in 2014, they created read, so, read the docs.org is the open source thing.

00:16:38 Read the docs.com was the, is in 2014. And there's links to the announcements from 2010

00:16:47 for announcing read the docs and the announcement for read the docs for business, the.com.

00:16:54 So, this is kind of an interesting story about how to make a service that helps open source

00:17:03 communities all over the place and how to make that sustainable. So, they're still sustainable,

00:17:09 which is cool. So, what is the sustainability model? How do they do that? Because there's

00:17:14 four full-time people working on this, which is not that big. I mean, four people, there's probably

00:17:19 a lot of volunteer volunteers on the open source side also, but for full-time people, that's pretty

00:17:27 cool. Anyway, there's the.org side has single non-tracking ads. And I think they were one of

00:17:35 the first that I was aware of that did like a single, just like ethical ads or something that

00:17:42 just had ads, but it wasn't tracking you at all, which is how ads should be, I think.

00:17:47 And I'm totally okay with that to help them sustain their model. And then the.com is a

00:17:54 paid service that helps companies for private repos and additional, they have other benefits

00:18:00 also, but sort of read the docs for companies. And then it also talks about things that didn't

00:18:07 work, which I love this. I love discussing the parts that didn't work. I'm like, have you tried

00:18:12 this? One of the things was just trying donations and other optional support. And it just didn't

00:18:20 work at all. And it left people with mental health issues and burnout. That's terrible.

00:18:25 The other thing was consulting services where you think about that, like maybe offer services

00:18:32 for people to pay. But the bad downside of that was it took away from time that they wanted to

00:18:39 work on the main project. They experimented with grant funding and that was cool. Cause they got

00:18:44 some like a blob of money at a time, but it's a one-time thing and it's not that easy to keep

00:18:49 going and getting more grants. So the current model is the paid service plus the advertising.

00:18:55 And that's cool. Talk about some lessons learned, which is neat. Basically you don't get extra

00:19:02 points for being bootstrapped. People compare you to VC funded companies anyway, which is,

00:19:08 it's cool that they call it out because that's obvious, but also sometimes not obvious. Even if

00:19:15 you're community driven bootstrapped, you don't get any points for that. We still expect you to

00:19:20 be perfect. The other thing was that keeping trust in the community was the most important thing.

00:19:27 And yeah, they said that it's cliche, but trust is hard to earn and easy to lose. Definitely.

00:19:36 And they can't maximize profits unless you keep trust with the community, which definitely

00:19:46 support that. The one part that I thought was one of the reasons why I highlighted this is because

00:19:52 this is a lesson I think that can go not just for people trying to sustain a funding model,

00:19:59 but just lots of open source projects can listen to this. And the lesson is contribution is easier

00:20:06 in less complex parts of the code base. So they've noticed that they've got their core stuff,

00:20:12 the readthedocs.org repo, the core stuff that is got some complex stuff in it and it's hard to get

00:20:19 people to help out. But there's other things like contributions to the Sphinx theme or extensions

00:20:26 or small Python or JavaScript projects that work alongside of it that are easier to get people to

00:20:33 contribute to because they're smaller, less, I guess, less complicated bits of code. I think a

00:20:40 lot of open source projects probably could do something like that of separating out where the

00:20:45 code is and say, if you'd like to contribute, maybe don't touch this part because it's kind

00:20:50 of hairy and it takes a while to get into. You can, but it's going to be difficult. And I've

00:20:57 noticed that with lots of projects. So anyway, congratulations to all of them for 10 years.

00:21:03 That's awesome. And then I was reading something and I found, I learned something

00:21:08 is that there's, I kind of associate read the docs with Sphinx only, but that's not true.

00:21:16 There is now, there was a effort to separate some of the customization and they have a different

00:21:23 build process going on now and you can, the Sphinx or the read the docs build system now

00:21:29 supports any documentation tool or it should, which I didn't know about. So that's.

00:21:35 Yeah, that's cool. Almost like a general static site platform probably.

00:21:40 Yeah.

00:21:40 Yeah.

00:21:41 Anyway.

00:21:42 Congratulations. It's a pretty important section of the Python community and also got some cool

00:21:49 Python support Lint ties as well, which is cool. Yeah. Yeah. Really helps humanize the Python

00:21:59 space. Wouldn't you say Brian? Yeah. Which is what I want to talk about next. This project by Hugo.

00:22:07 I know you've pointed this out before Brian, I believe I can actually get to him. There we go.

00:22:12 Hugo van Kinnemonde, CPython core developer and mini project maintainer. One of the projects is

00:22:24 humanize. And I recently, when I've written this codes for, you know, small scale before,

00:22:31 because I kind of needed it. And if I knew about this, I just wouldn't. But also I recently just

00:22:38 started using it and it's super simple, super easy to adopt. You see examples of it right here on the

00:22:45 GitHub screen. If you visit their GitHub repo, right. And see where it says seven months ago,

00:22:49 last week, last year, that kind of stuff, instead of just putting a date.

00:22:55 Yeah.

00:22:56 It's that kind of stuff that humanize does, but for different things. So if I go over to,

00:23:00 I love all these ties from falling off from you from read the docs. If I go over to read the docs

00:23:05 for them, and I wait, apparently, and it comes up, okay. So then they basically have four areas

00:23:16 that are relevant. It works in different languages, many, many different languages,

00:23:20 which is cool. It mostly works in numbers, but as I pointed out, it also works on time.

00:23:24 So we look at time, it has a natural date. Some of these don't have great examples. For example,

00:23:31 the time and file size could have really nice dates. So the one I mentioned with the GitHub

00:23:40 is natural Delta. It would say things like a year ago or two years ago, or in 13 seconds,

00:23:48 stuff like that. It has a similar natural time and precise Deltas if you want, those kinds of

00:23:57 things. Also as for file size. So it'll say things like 300 bytes, 3.0 megabytes, 2.9 kilobytes or

00:24:06 whatever. So you can just give it a number and tell it, here's how many bytes it is,

00:24:14 make this friendly. And it'll kind of figure out the right scale is a megabyte kilobyte.

00:24:20 You don't want 0.000 megabytes. You just want to switch that to kilobytes or bytes.

00:24:26 Right. So file size is cool, but the one that has tons of stuff going on is number. So you can have

00:24:34 an associated press style number. I guess it must be the way they're, the convention when you're

00:24:40 writing articles on how to speak about numbers. So if it's a small number, use written out words,

00:24:48 like F I V E for five. But if it's, you know, one zero zero one, two, one seven, you don't,

00:24:54 you don't write that out as a huge, long thing. You just put the straight number. Right.

00:24:57 So I think the cutoff is 10, which is pretty cool. It has clamp. And so you can talk about

00:25:05 percentiles. For example, if you say a really, really small number and you say the floor is 0.01

00:25:13 percent, it'll, or just that number as a ratio, it'll say the number that you have for this,

00:25:19 the value is less than 0.01. Oh, nice.

00:25:22 Or you can do it as a percent here. And you can say this one, this particular value is greater

00:25:27 than 99% or it's in the top 10%. Or you can just say like under 1 million, which is pretty awesome.

00:25:35 Right. Yeah. Yeah. So what else have we got here? Fractional. So this just takes, you know,

00:25:42 floating point numbers and puts them into fractions like one and three tenths or one

00:25:45 and a third or something like that into comma. This one I would just do with formatting,

00:25:51 but you can have it put commas in for separators into word. This one is really nice. So if I have

00:25:59 one with seven zeros, it'll say 1.0 million, or if you put in 1.2 billion, but as like integers,

00:26:08 it'll just say 1.2 billion or all kinds of things. You can give it precisions, et cetera. Nice,

00:26:14 right? It's very cool. I like that. The scientific stuff. The scientific is good. The metric.

00:26:20 This is really nice. If you give it a base measurement, like Watts or grams or something,

00:26:29 and then you say, give me this number in that unit system. So for example, if you say 1500

00:26:36 in terms of volts, it'll give you 1.5 kilovolts. That's pretty fancy. Yeah. Or Watts. And you give

00:26:43 it some huge number, say this many megawatts or really, really small one micro. I don't know what

00:26:49 F is in metric because to me that's Fahrenheit. So whatever. And the micro stuff is cool because

00:26:58 I always have to hunt it down. I have no idea how to type a micro symbol. Yeah. So click to

00:27:05 the scientific one or the, the 10 to the, the powers are pretty cool. The 10 to the minus one

00:27:12 with the little superscript. That's neat. Yeah. Yeah. Instead of having 10E3, it actually has

00:27:18 10 superscript three. So a thousand is one times 10 to the three with actual three, like you would

00:27:25 write it, not the way computers have to write it. So yeah, it's really nice. Anyway, it's just,

00:27:30 if you need this kind of stuff, really easy to adopt and understand. If not, then, you know,

00:27:36 still interesting. However, if someone is out there looking to contribute to this project,

00:27:42 I would say more examples, the numbers have awesome examples and all the other ones are

00:27:47 kind of, you may or may not even know what it's going to do. So, Hey, let's get there. Some

00:27:51 examples as a PR and ship them over to you guys. That'd be cool. And you know, documentation

00:27:59 contributions are usually very welcome. So yes, indeed. All right. Extras Brian.

00:28:05 I just have one extra. I wanted to shout out. So I talked about that. I thought test podcast is

00:28:12 going to go back to testing code, even though. So it is. So I finally finished that migration

00:28:17 and actually put out an episode. So 222 is these 222 is the second episode of a two part series

00:28:26 that started in June. Sorry. Serious cliffhanger. Serious cliffhanger. So yeah. So that's there.

00:28:36 And then I got a question I sent out an email and said, Hey, finally have another episode out.

00:28:41 And somebody said, you should do transcripts. And I guess I hadn't announced that, but

00:28:46 transcripts are there. I've had transcripts in the last, I don't know, like the last 30 episodes or

00:28:52 something. So transcripts are AI generated. So they're not perfect. Like, this is great. I got

00:28:58 to find one of these DB dot PI. That's fine. But there's like some, some dot pies that show up as

00:29:05 dot P I and some dot E I E is some dot DB, like actually spilling out the D O T. This is terrible.

00:29:14 Oh, API dot P I E is hilarious. So I could go through and try to fix this stuff, but I'm going

00:29:21 to probably try to hire my kid to go do it for me. But anyway, so they're there. That's all I wanted

00:29:27 to say is it's in it. I'm not doing this weekly. I actually talked to a friend of mine, Michael

00:29:34 Kennedy. And he said he said it'd be kind of cool to, to do seasons. And so I'm kicking around the

00:29:42 idea of doing seasons. Yeah. Well, themes. I like it. I think it'd be great. Yeah. So anyway, that's

00:29:48 just my extra. Awesome. I have a couple of quick code in the castle event is almost over. It's

00:29:55 almost booked and happening. So if you want to be part of it, I'll put a link in there, please.

00:30:01 Last kind of last call. So check that out. Yeah, I know. All right. We got some interesting email.

00:30:07 That's it. I think I covered the Anaconda code plugin for Excel, how it runs locally. It runs on

00:30:16 Pyscript, all these good things gives you other features. Well, look who sent this in. I want to

00:30:23 make sure I give some credits. This was by Rude Vanderham. Thank you for sending this in. This

00:30:29 is a project created and basically, when you have these Excel, Python bits of code, you have to

00:30:39 write all the code in one function and things like that. And there's other limitations as well. So

00:30:45 basically he made it so you can have a lot more. Or matting variability, I suppose, and then you

00:30:55 just have this bit of code that will just run a whole set of different bits of code that you can

00:31:01 have into your workbook, which is kind of interesting. So as a follow up to that, people

00:31:06 are interested. They can check that out. And just a quick out shout out to I stats menu. Do you I

00:31:11 stats menu, Brian, for your Mac? No. If you want real time stats for what your Mac is up to, as

00:31:20 they just released a new version, looks super cool. I'm just starting to play with it. So

00:31:24 obvious things like CPU and stuff. But if you hover over them, it'll give you

00:31:29 tons of detail. Like macOS is kind of hard to get a lot of these pieces of information,

00:31:33 but it'll have uptime. It'll have like how much power your CPU is pulling out of or your computer

00:31:41 is pulling out of the wall, which is kind of interesting as a how hard is it working? Like

00:31:45 how many watts is it pulling? And so anyway, that's cool. That's cool. Yeah. People can check

00:31:51 it out. It's pretty nice. Nice. Yeah. That is it. And you want to close it out with a joke,

00:32:01 our big episode 400. Definitely. All right. This is sort of in the theme of I'm learning

00:32:08 new programming languages, right? Mostly as beginners. DevHumor says, beginner programmers,

00:32:15 when they learn a new programming language, just a shock. Is this Morty? I don't know. I think so.

00:32:20 Anyway. Well, that just sounds like Python with extra steps. Yeah, yeah, exactly. Exactly. That's

00:32:30 cool. But why all the stuff there? Anyway, thanks for episode 400. Thank you everyone for listening.

00:32:38 Thank you, Scott APM for supporting the show. Check them out as well. Thank you. Yep. See you, Brian.

00:32:44 Bye.

