WEBVTT

00:00:00.001 --> 00:00:04.920
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.920 --> 00:00:10.420
This is episode 78, recorded May 17th, 2018. I'm Michael Kennedy.

00:00:10.420 --> 00:00:11.200
And I'm Brian Okken.

00:00:11.200 --> 00:00:13.260
And we have a special guest with us here, don't we, Brian?

00:00:13.260 --> 00:00:13.780
Yeah.

00:00:13.780 --> 00:00:14.640
Yeah, hey, Kojo.

00:00:14.640 --> 00:00:15.300
Hello, hello.

00:00:15.300 --> 00:00:20.180
Yeah, we have Kojo Iterisa here on the show. Thank you for coming and joining us.

00:00:20.180 --> 00:00:21.560
No problem. Thank you for having me.

00:00:21.560 --> 00:00:26.060
Yeah, it's really great. All three of us got to have a wonderful time at PyCon, didn't we?

00:00:26.060 --> 00:00:26.680
Yes, we did.

00:00:26.840 --> 00:00:30.380
Oh my goodness. So I'm totally going to recap on that first.

00:00:30.380 --> 00:00:33.760
But let's just say thanks to Datadog. This episode is brought to you by Datadog.

00:00:33.760 --> 00:00:36.560
Check them out at pythonbytes.fm/Datadog.

00:00:36.560 --> 00:00:40.280
They were at PyCon. And so we're all we, all of us.

00:00:40.280 --> 00:00:44.720
In fact, Kojo, you and I, we kind of jumped into the deep end, like right at the beginning.

00:00:44.720 --> 00:00:53.560
I was sort of standing around outside and you were, you walked in this room and, you know, just, it was like, hey, we don't have enough people to,

00:00:53.560 --> 00:00:56.480
or enough room to give this welcome speech to all the newcomers.

00:00:56.640 --> 00:00:59.640
So you and I ended up giving the welcome speech, right, to a second group.

00:00:59.640 --> 00:01:03.980
Yep. You and I and Trey Hunter ended up sort of as the impromptu host of that.

00:01:03.980 --> 00:01:05.660
Yeah. At first it was Trey Hunter.

00:01:05.660 --> 00:01:06.480
I mean, I saw you walking.

00:01:06.480 --> 00:01:08.980
I'm like, hey, you need to come up to the front and be part of this.

00:01:08.980 --> 00:01:09.720
So that was really awesome.

00:01:09.720 --> 00:01:11.220
Thanks for doing that with me.

00:01:11.220 --> 00:01:12.740
Brian, what was your favorite thing about PyCon?

00:01:12.940 --> 00:01:21.120
I guess seeing everybody that I only know from their little tiny circle icon on Twitter and being able to see them in person and chat.

00:01:21.120 --> 00:01:26.540
I was actually often surprised because I didn't recognize somebody, even though I see their little picture all the time.

00:01:27.100 --> 00:01:30.020
Well, you know, how many tiny pixels?

00:01:30.020 --> 00:01:33.440
It's like a 64 by 64 sort of thing, right?

00:01:33.440 --> 00:01:34.280
Yeah.

00:01:34.280 --> 00:01:34.660
Yeah.

00:01:34.660 --> 00:01:35.280
Pretty funny.

00:01:35.280 --> 00:01:36.080
Pretty funny.

00:01:36.080 --> 00:01:37.420
So, Kojo, how about you?

00:01:37.420 --> 00:01:38.520
Favorite thing at PyCon?

00:01:38.660 --> 00:01:43.680
I think for me, my favorite thing about PyCon was maybe just getting a chance to get caught up with folks.

00:01:43.680 --> 00:01:46.860
Getting a chance to get caught up with people that I already know.

00:01:46.860 --> 00:01:48.940
Then also getting a chance to meet new people.

00:01:48.940 --> 00:01:56.640
And I think the sort of the impromptu leading of the new intenti session was nice because it made it easier to meet new people.

00:01:56.640 --> 00:02:02.080
Yeah, that was really nice because the people felt more comfortable coming up and speaking to you and me after that.

00:02:02.080 --> 00:02:05.180
I think my favorite thing was actually the live Python bytes recording.

00:02:05.180 --> 00:02:06.260
That was fun, right, Brian?

00:02:06.260 --> 00:02:07.580
Oh, that was a blast.

00:02:07.720 --> 00:02:08.640
Yeah, it was really good.

00:02:08.640 --> 00:02:09.640
We need to do that every year.

00:02:09.640 --> 00:02:12.420
I think I'm definitely planning on doing that again every year.

00:02:12.420 --> 00:02:14.740
I'm thinking about trying to actually propose that.

00:02:14.740 --> 00:02:21.900
It's like an official part, an official activity that is part of some of these conferences like PyCascades or maybe PyCon or something.

00:02:21.900 --> 00:02:24.820
But if nothing else, certainly the open session was awesome.

00:02:24.820 --> 00:02:27.240
And we'll talk more about that later.

00:02:27.240 --> 00:02:28.640
But let's get to your first item, Brian.

00:02:28.640 --> 00:02:30.260
Somebody forgot an else statement.

00:02:30.260 --> 00:02:30.760
Is that what happened?

00:02:30.760 --> 00:02:35.920
Yeah, well, there's more else statements in Python that you might not know about.

00:02:36.280 --> 00:02:39.120
I read this and I'm like, oh, yeah, I forgot about these.

00:02:39.120 --> 00:02:44.220
Anyway, so both for, I mean, you can use else clauses for if statements.

00:02:44.220 --> 00:02:45.180
Everybody knows that.

00:02:45.180 --> 00:02:49.860
But for and while loops also have if statement or else clauses.

00:02:49.860 --> 00:02:52.580
They're while and for loops are loops.

00:02:52.840 --> 00:02:57.260
And if they complete all the way through, then the else clause gets run.

00:02:57.260 --> 00:03:04.700
And there's a little article to describe that that we've linked to called the forgotten optional else in Python loops.

00:03:04.940 --> 00:03:08.620
But I wanted to highlight it because often I forget about it.

00:03:08.620 --> 00:03:20.220
The thinking around this is if you're using a loop to search for something or search for different things and you want to bail out if you find something, one of the ways is to mark a flag to say, hey, I found this thing.

00:03:20.220 --> 00:03:24.240
But you don't need a flag if you take advantage of the else clause.

00:03:24.600 --> 00:03:27.080
So I just wanted to highlight that and remind everybody.

00:03:27.080 --> 00:03:27.480
Yeah.

00:03:27.480 --> 00:03:29.140
So both the for and while loops.

00:03:29.140 --> 00:03:34.080
And these definitely seemed a little bit funky to me when I learned about it.

00:03:34.080 --> 00:03:36.480
I'm like, wait, the while loop has an else clause?

00:03:36.480 --> 00:03:37.720
My mind is melting.

00:03:37.720 --> 00:03:39.960
Kojo, did you interact with these?

00:03:39.960 --> 00:03:41.820
Have you ever used an else clause on a loop?

00:03:41.820 --> 00:03:42.800
On a for loop?

00:03:42.800 --> 00:03:44.040
I don't know that I have, actually.

00:03:44.360 --> 00:03:48.400
Yeah, I always look at them and wonder why they're there.

00:03:48.400 --> 00:03:50.040
I mean, it's pretty cool to know about them.

00:03:50.040 --> 00:03:55.480
I feel like this is one of those things that you could get asked in a job interview, right?

00:03:55.480 --> 00:03:56.980
Like, oh, what does the else clause do?

00:03:56.980 --> 00:03:58.100
Like, wait, there's an else clause?

00:03:58.100 --> 00:03:58.820
How interesting.

00:03:58.820 --> 00:04:04.640
So this is, I would say this is one of the less used part, major pieces of syntax in the language, for sure.

00:04:04.640 --> 00:04:13.880
I would definitely, since I know a lot of people don't know about them, if I was going to use them, I'd probably add a comment there to say, hey, if we don't find the things, then we do this stuff.

00:04:14.020 --> 00:04:14.540
It's interesting.

00:04:14.540 --> 00:04:19.440
It's definitely like one of these sort of Pythonic things that is not necessarily obvious, right?

00:04:19.440 --> 00:04:22.080
It's kind of like self-contradictory in that sense.

00:04:22.080 --> 00:04:23.240
Yeah, yeah, pretty interesting.

00:04:23.240 --> 00:04:28.920
All right, Kojo, you found some pretty cool stuff with some libraries and dependencies, right?

00:04:28.920 --> 00:04:29.880
Tell us about those.

00:04:29.880 --> 00:04:32.760
I got exposed to this, really, I think on the last day of PyCon.

00:04:32.760 --> 00:04:35.200
There's a website called libraries.io.

00:04:35.200 --> 00:04:42.100
And what it does is it lets you not only find different packages, so like PyPy will let you find a number of different packages.

00:04:42.440 --> 00:04:47.880
But what libraries.io does is it will let you find dependencies based on packages.

00:04:47.880 --> 00:04:55.900
So you go to libraries.io and you search for a certain package, and then you can see what other packages that that package depends on.

00:04:55.900 --> 00:05:02.420
And so it's an interesting way to sort of see, to find out, like if you're building a project, what things are you depending on?

00:05:02.420 --> 00:05:06.100
And then maybe what things are those things depending on that you might not have been aware of?

00:05:06.440 --> 00:05:08.860
And it will also point out, like, versions and that sort of thing.

00:05:08.860 --> 00:05:10.760
So you can drill down fairly deep into it.

00:05:10.760 --> 00:05:19.280
I think the person who introduced it to me was pointing out that I can't remember the package now, but there's a certain package that depends on Twine, which is the packaging tool.

00:05:19.280 --> 00:05:21.780
But it depends on an older version of Twine.

00:05:21.780 --> 00:05:25.320
And so on a version of Twine that's, like, say, maybe like a year or so old.

00:05:25.600 --> 00:05:27.760
And so you can find that kind of information.

00:05:27.760 --> 00:05:29.040
And so I thought that was interesting.

00:05:29.040 --> 00:05:39.720
And then along with that, libraries.io is run by a site that is called Tidelift that is looking to try to help bring some financial support into open source software.

00:05:40.020 --> 00:05:43.880
I haven't had a chance to look into that in great detail, but it's interesting how the two are connected.

00:05:43.880 --> 00:05:45.040
That's pretty interesting.

00:05:45.040 --> 00:05:54.400
So it's almost like you can get consulting support agreements for a package that you might want to use.

00:05:54.400 --> 00:05:55.520
It's kind of what it sounds like.

00:05:55.520 --> 00:05:56.680
Yeah, it seems that way.

00:05:56.680 --> 00:05:59.040
Like I said, I haven't had a chance to dig into it in a lot of detail.

00:05:59.040 --> 00:06:01.520
So I focus a little more on libraries.io.

00:06:01.520 --> 00:06:10.020
But I think with libraries.io, you can help determine, okay, well, what packages might I need or want consulting support on?

00:06:10.020 --> 00:06:17.680
So what are the packages that my project depends on heavily and at the same time might not be getting as much support as I might want?

00:06:17.680 --> 00:06:22.020
And so maybe I want to focus my support dollars on that particular package.

00:06:22.020 --> 00:06:25.280
Just maybe two or three levels down in the stack.

00:06:25.280 --> 00:06:26.300
Yeah, how interesting.

00:06:26.300 --> 00:06:36.020
So it says they give maintainers and core teams a platform and marketplace for building sustainable business around the project.

00:06:36.020 --> 00:06:39.460
I bet that resonates with a lot of folks who are out there listening to the show.

00:06:39.460 --> 00:06:41.020
I know there's been a lot of work done.

00:06:41.020 --> 00:06:47.680
A lot of people who have been looking into how do we make open source projects sustainable instead of just having to depend on volunteer work.

00:06:47.680 --> 00:06:56.280
I think the most straightforward way that this has worked traditionally is either a very small amount of donations or consulting.

00:06:56.280 --> 00:07:03.560
If I work on, say, Flask, then maybe I could consult on help people out who are doing large Flask things.

00:07:03.560 --> 00:07:06.860
But this looks like a nicer sort of more formal arrangement.

00:07:06.860 --> 00:07:09.100
So, yeah, I really hopefully that that takes off.

00:07:09.100 --> 00:07:09.900
That'd be great for people.

00:07:10.000 --> 00:07:23.900
I think one of the things I was just playing with it, one of the fun things about libraries.io is to look up a, if you're trying to use a new package that you haven't used before, new library, you can look to see who else is using it.

00:07:23.900 --> 00:07:27.140
So you can maybe look at their source code and see how they're using it.

00:07:27.140 --> 00:07:27.460
It's true.

00:07:27.460 --> 00:07:27.940
That's interesting.

00:07:27.940 --> 00:07:28.400
Oh, I see.

00:07:28.400 --> 00:07:29.460
Other projects, right?

00:07:29.460 --> 00:07:30.500
Like, here's some library.

00:07:30.500 --> 00:07:31.140
Who else uses it?

00:07:31.140 --> 00:07:31.620
Oh, look.

00:07:31.620 --> 00:07:32.980
Request uses it.

00:07:32.980 --> 00:07:35.040
So that must mean it's pretty stable or something like that.

00:07:35.040 --> 00:07:39.100
Or even just to look at code examples of how they're using it.

00:07:39.100 --> 00:07:39.680
Yeah, very cool.

00:07:39.760 --> 00:07:40.720
That's a good find, Joe.

00:07:40.720 --> 00:07:41.040
Thanks.

00:07:41.040 --> 00:07:46.640
So either of you guys out there, are you using type annotations and typends in your Python code?

00:07:46.640 --> 00:07:47.460
I am not.

00:07:47.460 --> 00:07:51.700
But I had a brief discussion about them when I was in Chicago a couple of weeks ago.

00:07:51.700 --> 00:07:52.060
So.

00:07:52.060 --> 00:07:52.480
Yeah.

00:07:52.480 --> 00:07:52.820
Okay.

00:07:52.820 --> 00:07:53.260
Brian?

00:07:53.260 --> 00:07:54.080
Yeah, I'm starting to.

00:07:54.080 --> 00:07:54.340
Yeah.

00:07:54.340 --> 00:07:55.240
I think it's interesting.

00:07:55.240 --> 00:07:59.120
Like, I certainly don't go type crazy on the code that I write.

00:07:59.120 --> 00:08:02.660
There's some obvious benefits for like really large organizations.

00:08:02.660 --> 00:08:08.420
And there's a great article I want to link to called The Other Great Benefit of Python Type Annotations.

00:08:08.520 --> 00:08:11.040
So they talk about things that are fairly straightforward.

00:08:11.040 --> 00:08:15.600
You know, it's like we've had these type annotations for a while, but maybe it's a little unclear when to use them.

00:08:17.060 --> 00:08:19.740
It's good if you have some big project.

00:08:19.740 --> 00:08:22.460
You want to somehow verify that things are working.

00:08:22.460 --> 00:08:22.900
Right.

00:08:22.980 --> 00:08:25.500
So you can employ like static code analysis, right?

00:08:25.500 --> 00:08:27.720
With like mypy or a lot of things.

00:08:27.720 --> 00:08:35.200
We've talked about some of the tooling previously, Brian, that you could run across your code and will like generate these and then you can decide to incorporate them.

00:08:35.720 --> 00:08:43.280
One idea I really like is sort of a twist on an Uncle Bob quote who's sort of a software architect guy.

00:08:43.280 --> 00:08:48.600
It says cleaner code or the code that is self-documented is really great.

00:08:48.600 --> 00:08:55.060
And traditionally people said, well, we don't need a comment when you can use a function or a variable that's like well named.

00:08:55.320 --> 00:09:03.240
So maybe another way to look at it, another thing to say is like we don't need a comment when you can specify to talk about the types when you could say specify type annotation.

00:09:03.240 --> 00:09:11.040
So instead of having a comment saying, hey, this variable is such and such like a type annotation makes that sort of readability super, super easy.

00:09:11.240 --> 00:09:11.960
That's great.

00:09:11.960 --> 00:09:14.700
And then obviously they're sort of optional, right?

00:09:14.700 --> 00:09:19.640
This whole progressive typing or gradual typing thing that they're doing is great.

00:09:19.640 --> 00:09:22.620
So you can add it and won't break your code, but it also won't make it any faster.

00:09:22.620 --> 00:09:23.320
Right.

00:09:23.320 --> 00:09:24.900
Just use it where it's useful for you.

00:09:24.900 --> 00:09:30.580
But this article says the final sort of straw that was like the massive benefit for this guy.

00:09:30.580 --> 00:09:35.300
And I agree with him, which is why I brought this in is around code completion.

00:09:35.300 --> 00:09:36.140
Yeah, definitely.

00:09:36.140 --> 00:09:36.580
Right.

00:09:36.580 --> 00:09:44.020
So like I've got some big application and I typically put this sort of stuff on the boundaries of one layer talking to another layer.

00:09:44.020 --> 00:09:44.780
So I have the web app.

00:09:44.780 --> 00:09:50.460
The web app consumes some sort of data access layer, logic layer that deals with services and data.

00:09:50.460 --> 00:10:00.780
Like if you annotate just the stuff that is like public from that data layer, it just flows through the rest of your application and makes it super, super obvious, which I think that's pretty nice.

00:10:00.780 --> 00:10:19.580
I was actually looking at an example of this last week of, for instance, like if you've got a class that's like a new data class that has type annotations and you assign that to a variable and then you try to access elements of the variable, like PyCharm can like help you, for instance, other editors as well.

00:10:19.580 --> 00:10:25.620
But PyCharm does those hints and will tell you the types of the different elements that you have access to.

00:10:25.620 --> 00:10:31.340
Right. Or if you were to return some object from a method, it might just have no completion because who knows what that could be.

00:10:31.340 --> 00:10:34.620
But if you annotate the return type, all of a sudden it like comes back to life.

00:10:34.620 --> 00:10:34.880
Yeah.

00:10:34.880 --> 00:10:35.940
What editor do you use?

00:10:35.940 --> 00:10:42.320
Primarily Sublime, but my coworkers, I've got some coworkers who use Sublime and some who use PyCharm.

00:10:42.320 --> 00:10:45.580
So I've started using PyCharm more on the QA team where I work.

00:10:45.580 --> 00:10:49.080
And so the other QA person tends to use PyCharm.

00:10:49.220 --> 00:10:56.100
So I sort of go back and forth between the two, like on my personal machines, I've got Sublime and then on my work machine, I've got both.

00:10:56.100 --> 00:10:58.260
And so I use them both in slightly different ways.

00:10:58.260 --> 00:11:00.040
You're getting sucked into the PyCharm.

00:11:00.040 --> 00:11:00.580
Exactly.

00:11:00.580 --> 00:11:01.120
Orbit.

00:11:01.120 --> 00:11:04.260
And I remember, I've also good things about it.

00:11:04.260 --> 00:11:08.560
I also remember reading an article that you wrote about the benefit, I think what the nine benefits of PyCharm.

00:11:08.560 --> 00:11:08.860
So.

00:11:08.860 --> 00:11:10.160
Yeah, that was quite a while.

00:11:10.160 --> 00:11:11.240
That really lays it out.

00:11:11.240 --> 00:11:11.380
Right.

00:11:11.380 --> 00:11:16.580
And this code completion to one of them and these type annotations makes that better, which I think is pretty awesome.

00:11:17.240 --> 00:11:18.760
So, yeah, I just wanted to throw that out there.

00:11:18.760 --> 00:11:23.660
Like there's a whole sort of static code analysis stuff, but this code completion, pretty, pretty major.

00:11:23.660 --> 00:11:24.700
All right.

00:11:24.700 --> 00:11:31.240
Before we get to the next one, let me tell you all about Datadog because they are major supporters of the show and they really are helping keep it going.

00:11:31.240 --> 00:11:32.620
So be sure to check them out.

00:11:32.620 --> 00:11:38.500
So it's a monitoring solution that provides deep visibility into distributed applications.

00:11:38.800 --> 00:11:47.860
So you're maybe you've got some microservices or got different Python applications and you want to see how the database and the Python app and Linux itself are interacting.

00:11:47.860 --> 00:11:49.220
Go check out Datadog.

00:11:49.220 --> 00:11:54.920
So just a few minutes, you can investigate some bottlenecks in your code, figure out where it's slow and make it better.

00:11:54.920 --> 00:11:56.200
Just reading a few dashboards.

00:11:56.200 --> 00:11:56.860
So pretty cool.

00:11:56.860 --> 00:11:58.920
So visualize your Python performance today.

00:11:58.920 --> 00:12:04.620
Get started with a free trial of Datadog and they'll send you a cool Datadog t-shirt, which is awesome.

00:12:04.620 --> 00:12:07.440
So just go to pythonbytes.fm/Datadog.

00:12:07.440 --> 00:12:13.360
Brian, when people create open source projects, like they usually do it because it's something that they love.

00:12:13.580 --> 00:12:20.280
But then people start to depend on these projects and that can create some sort of animosity, right?

00:12:20.280 --> 00:12:23.240
There's a lot of burnout in the open source space because of it, I think.

00:12:23.240 --> 00:12:23.560
Definitely.

00:12:23.560 --> 00:12:38.920
We've seen a lot in the last couple of years of people, you know, even taking a month off or six months off to try to get away from some of it or dropping projects, trying to find other maintainers because maintenance is kind of a hard problem.

00:12:39.440 --> 00:12:47.740
This was something that was brought up and you said that from Brett Cannon, I saw this talk Sunday morning for the Sunday morning keynote at PyCon.

00:12:47.740 --> 00:12:51.500
And you said that he also gave it at PyCascades.

00:12:51.500 --> 00:12:54.480
I don't know if it's exactly the same, but this general message, yes.

00:12:54.480 --> 00:12:54.980
Yeah.

00:12:54.980 --> 00:12:59.480
So the talk was called Setting Expectations for Open Source Participation.

00:12:59.480 --> 00:13:04.580
But it really is a discussion about kindness and paying for open source with kindness.

00:13:05.360 --> 00:13:15.000
And he really talked about some, he gave some examples of basically every communication you have with an open source project, even like a bug report.

00:13:15.000 --> 00:13:24.500
You need to realize that you're taking somebody else's time out of their free time, the free time they could be spending with their, on their own projects or with their family.

00:13:25.000 --> 00:13:27.400
And so be aware of that.

00:13:27.400 --> 00:13:31.660
And he gave some examples of some good interactions and some bad interactions.

00:13:31.660 --> 00:13:36.040
And then also some guidelines for how to communicate online.

00:13:36.040 --> 00:13:37.160
It was pretty good.

00:13:37.160 --> 00:13:44.800
I think the major, sort of the main takeaway was most of these interactions are you asking for a favor.

00:13:45.440 --> 00:13:47.080
And it sometimes doesn't seem that way, right?

00:13:47.080 --> 00:13:50.000
Like, so if I go to a project and say, here's a pull request.

00:13:50.000 --> 00:13:51.280
It's super small.

00:13:51.280 --> 00:13:53.140
All it does is add this one feature.

00:13:53.140 --> 00:13:54.480
It's like 10 lines.

00:13:54.480 --> 00:13:56.400
You can just read that and it's no problem.

00:13:56.400 --> 00:13:59.760
But if the person decides to accept that, right?

00:13:59.760 --> 00:14:01.020
They're not you.

00:14:01.020 --> 00:14:09.160
They are responsible now for maintaining it, but also documenting it, potentially testing it, evolving it.

00:14:09.160 --> 00:14:09.580
Right?

00:14:09.640 --> 00:14:10.900
There's just so many layers.

00:14:10.900 --> 00:14:13.640
It's like, hey, I did you such a nice favor.

00:14:13.640 --> 00:14:14.440
Here's a puppy.

00:14:14.440 --> 00:14:15.540
I got you a puppy.

00:14:15.540 --> 00:14:17.200
And then, you know, the person doesn't like it.

00:14:17.200 --> 00:14:18.420
It's like, why don't they like the puppy?

00:14:18.420 --> 00:14:18.860
I got them.

00:14:18.860 --> 00:14:20.600
That's so nice to give a puppy.

00:14:20.600 --> 00:14:21.320
Right?

00:14:21.320 --> 00:14:29.020
But you're really giving this thing that you have to care for for a long time, even if it's something as helpful as actually here's a pull request.

00:14:29.020 --> 00:14:29.460
Yeah.

00:14:29.460 --> 00:14:32.300
It's you're asking for work for somebody else's work.

00:14:32.300 --> 00:14:39.520
And we forget about that because we're used to like products where we can like complain about the Apple laptop keyboards.

00:14:39.520 --> 00:14:40.680
And it's just OK.

00:14:40.680 --> 00:14:43.020
But we probably ought to be nicer about that.

00:14:43.020 --> 00:14:56.560
But when you like even complain about or tweet a negative thing about an open source project or have a bug report where it's just like I needed this to do this thing and it's broken.

00:14:56.560 --> 00:14:59.120
You're really hitting somebody.

00:14:59.120 --> 00:15:02.020
This is somebody's like somebody's passion.

00:15:02.020 --> 00:15:06.520
Somebody's spent a lot of time on and you're saying to them, this is garbage.

00:15:06.520 --> 00:15:10.880
So, yes, do bug reports, but do it in it's open source.

00:15:10.880 --> 00:15:11.960
It's volunteer effort.

00:15:11.960 --> 00:15:13.200
So do it kindly.

00:15:13.200 --> 00:15:16.480
Do it like you were asking your mother to do it or something like that.

00:15:16.480 --> 00:15:25.120
And he presented it so well that I think this sort of topic needs to be talked about more, even even within groups.

00:15:25.120 --> 00:15:33.940
Like I realized after watching, listening to this and watching it, that I think it will help me even interact with my own team at work when it isn't volunteer.

00:15:33.940 --> 00:15:35.200
It's people getting paid.

00:15:35.200 --> 00:15:37.180
But you still need to be respectful and considerate.

00:15:37.180 --> 00:15:40.620
It's still basically a zero sum game for their time and energy.

00:15:40.620 --> 00:15:45.720
So by doing something, you were sort of taking a slice of that that, you know, maybe they didn't ask you to take.

00:15:45.720 --> 00:15:45.960
Right.

00:15:45.960 --> 00:15:46.200
Yeah.

00:15:46.280 --> 00:15:47.100
Yeah, yeah, for sure.

00:15:47.100 --> 00:15:52.000
Kojo, did you get to see this talk either in Vancouver or at the conference?

00:15:52.000 --> 00:15:58.460
No, I saw there was a similar talk at PyCon Canada in Montreal, but I saw it in Vancouver.

00:15:58.460 --> 00:15:58.920
Yeah.

00:15:58.920 --> 00:16:06.060
So have you had any interactions with folks where you see people like giving up on open source projects or other folks being unkind?

00:16:06.060 --> 00:16:08.360
I've seen a little bit of that, maybe a little more than I would like.

00:16:08.400 --> 00:16:18.440
I have seen people sort of complaining about open source projects, maybe not meeting their standards or not being updated as quickly or as well as they would like.

00:16:18.440 --> 00:16:24.540
I tend to be a little bit prickly about that kind of thing because I think so I'm relatively new to software engineering.

00:16:24.540 --> 00:16:32.420
And a lot of my exposure to software engineering practices have been through the open source community and through some of the larger open source projects.

00:16:32.420 --> 00:16:40.280
And so I have an understanding that a lot of these things that people depend on are being built by volunteers who are doing it in their spare time.

00:16:40.280 --> 00:16:43.680
And I've been fortunate enough to meet a number of these people.

00:16:43.680 --> 00:16:46.000
And so, you know, I know some of these people personally.

00:16:46.000 --> 00:16:49.860
And so, yeah, I guess it sort of helps humanize it for me a little more.

00:16:49.860 --> 00:16:53.100
So I try to sort of push back on those things like, hey, you know what?

00:16:53.100 --> 00:16:55.980
How much did you pay for this or how much are you paying for this?

00:16:55.980 --> 00:17:04.820
And also, you know, you can if you want a problem fixed, there is a well-documented process for you to make a contribution to help fix some of the problems for yourself.

00:17:04.820 --> 00:17:08.800
And if you're someone who's a more experienced developer, it's not that difficult for you to do.

00:17:08.800 --> 00:17:10.040
I think that's a really good point.

00:17:10.040 --> 00:17:13.180
I guess the thing is don't take it out on people.

00:17:13.180 --> 00:17:14.700
Just vote with your feet.

00:17:14.700 --> 00:17:19.920
If you see a project that has 100 unresponded to PRs, maybe that's not a real healthy project.

00:17:19.920 --> 00:17:30.440
And your choices are don't be part of it or become a contributor, but don't abuse the person who's already overwhelmed and already has too much going on, right?

00:17:30.440 --> 00:17:31.100
Exactly.

00:17:31.100 --> 00:17:32.000
Yeah, yeah.

00:17:32.000 --> 00:17:32.980
All right.

00:17:32.980 --> 00:17:34.860
So what's your next pick, Kojo?

00:17:34.860 --> 00:17:39.760
My pick sort of ties into that, the idea of, you know, you've got these expectations for open source participation.

00:17:39.760 --> 00:17:43.500
My thing is sort of focusing on different Python community events.

00:17:43.500 --> 00:17:49.240
And so, of course, you know, we all just came from PyCon and one of the nice things about it, so there's PyCon itself.

00:17:49.240 --> 00:17:54.800
But then for me, one of the nice things about it was a chance to meet some of my, say, get back together with some of my friends from the Python community.

00:17:54.800 --> 00:18:06.300
Of course, we started off with, you know, actually spending some time with you and with Trey to help sort of welcome the first time attendees to PyCon, sort of welcoming them into more active participation in the Python community.

00:18:06.300 --> 00:18:07.120
Yeah, that was fun.

00:18:07.120 --> 00:18:09.380
So let me ask you really quick about that while you're on the topic.

00:18:09.380 --> 00:18:15.720
Give me three really quick things people should know to have, like, a better experience at PyCon or local ones, maybe.

00:18:15.720 --> 00:18:19.380
So I would say, one, try to have some idea of why you're there.

00:18:19.380 --> 00:18:21.320
Like, why are you attending PyCon?

00:18:21.320 --> 00:18:22.600
Are you looking for a job?

00:18:22.600 --> 00:18:23.740
Are you looking to hire people?

00:18:23.740 --> 00:18:25.340
Are you looking to learn new things?

00:18:25.340 --> 00:18:26.500
Are you looking to meet new folks?

00:18:26.500 --> 00:18:27.120
That sort of thing.

00:18:27.120 --> 00:18:32.320
And I think whether it's PyCon or your local Python meetup, it's sort of the same thing.

00:18:32.320 --> 00:18:38.880
Like, you know, what are you going for just to learn or just to meet other developers who work in Python just like you do that kind of thing?

00:18:38.880 --> 00:18:40.500
I think that's sort of the big thing.

00:18:40.500 --> 00:18:46.800
And the other thing is to maybe with something like PyCon, try to manage your energy because there are a lot of people at PyCon.

00:18:46.800 --> 00:18:48.000
There's a lot going on.

00:18:48.000 --> 00:18:51.420
You probably won't be able to go to every talk.

00:18:51.420 --> 00:18:54.300
There's a temptation to try to consume as much information as you can.

00:18:54.300 --> 00:19:01.100
And then I think along with that managing your energy, something that we pointed out to people is to try to sort of – it's something like PyCon.

00:19:01.160 --> 00:19:08.540
Try to optimize for the human interactions like the open spaces and sort of the hallway track because the talks are awesome, but they're all going to be recorded.

00:19:08.540 --> 00:19:11.200
And then the videos will be available fairly quickly.

00:19:11.200 --> 00:19:18.200
But the people that you meet and the human interactions that you have or the cool things that happen in the open spaces, those aren't going to be recorded.

00:19:18.680 --> 00:19:23.800
So one of the things that I did at PyCon, one of the open spaces I was in was hosted by Adafruit.

00:19:23.800 --> 00:19:32.520
And so we got to sit down with some of the circuit boards that were in our swag bags and write some code and make LEDs light up and that sort of thing and sit with people.

00:19:32.520 --> 00:19:36.340
And so that's the thing that's – I can't watch a video of that later.

00:19:36.340 --> 00:19:37.400
I can't do that again later.

00:19:37.820 --> 00:19:41.320
So I actually had that sort of direct interaction with people.

00:19:41.320 --> 00:19:44.880
So I think those would be sort of three things to help guide people.

00:19:44.880 --> 00:19:47.780
I really like to manage the energy because I was done at the end.

00:19:47.780 --> 00:19:48.660
Brian, how about you?

00:19:48.660 --> 00:19:49.760
Wiped out at the end of PyCon?

00:19:49.760 --> 00:19:51.100
Very wiped out, yeah.

00:19:51.100 --> 00:19:57.480
And I think that contributed to some of my – kind of my funk and tiredness in the last few days.

00:19:57.480 --> 00:19:59.080
I'm still feeling it as well.

00:19:59.080 --> 00:20:01.800
I'm still – it was totally worth it, but I am wiped out.

00:20:01.800 --> 00:20:02.060
All right.

00:20:02.200 --> 00:20:07.900
So the last one, I want to share a personal story with you because we find all these things on the internet, and I think they're great.

00:20:07.900 --> 00:20:16.000
But like every now and then, it's like I just found this thing, and it so helped me with this problem that I was running into, and I think it'll help a lot of people out there.

00:20:16.000 --> 00:20:21.020
So I want to tell everyone about Ngrok, N-G-R-O-K.

00:20:21.020 --> 00:20:35.440
And that is a free with a premium upgrade sort of thing service that you can go and basically ignoring all firewalls and all sorts of stuff, expose basically local ports or local servers on your computer.

00:20:35.440 --> 00:20:46.940
So if I have, say, like a mobile device, and I have an app running on the mobile device, and I want to test the services, but I'm like developing it, maybe I want to even debug like how that's working.

00:20:47.020 --> 00:20:50.000
I could actually open – I could run this Ngrok command.

00:20:50.000 --> 00:20:55.980
It'll do an SSH tunnel that exposes, say, my local dev port back to port 80 on the internet.

00:20:55.980 --> 00:21:04.020
Then I go to that URL and hit something on my phone app maybe, and it like – I can step through it in PyCharm on my local machine.

00:21:04.020 --> 00:21:07.460
I think that that is pretty darn awesome.

00:21:07.460 --> 00:21:16.000
Or if you want to make, say, give access to your Raspberry Pi so you can get into it and call operations on it, test your chatbot.

00:21:16.000 --> 00:21:26.060
The reason I was using it is I'm building a set of applications, like proper compiled applications that are offline for my courses.

00:21:26.060 --> 00:21:33.300
So people can basically have offline access to the videos and like sync up their account and then not depend upon being on the web or on the internet, right?

00:21:33.300 --> 00:21:35.420
So that's what I've been doing since I got back from PyCon.

00:21:35.420 --> 00:21:36.540
It's building that.

00:21:36.540 --> 00:21:40.200
And I had been deploying stuff out to the internet, and I'd connect to it and test.

00:21:40.200 --> 00:21:41.800
I'm like, oh, that service isn't quite working.

00:21:41.800 --> 00:21:43.180
And it was getting a little painful.

00:21:43.180 --> 00:21:44.360
I'm like, why am I doing this?

00:21:44.360 --> 00:21:48.400
Because one is on the Windows machine and one is on my Mac, and it was easier to just do that, right?

00:21:48.400 --> 00:21:49.980
Instead of – it wasn't on the same machine.

00:21:50.600 --> 00:21:54.660
And so I'm like, I'm just going to fire up Ngrok, and then I can actually do the same thing I told you about.

00:21:54.660 --> 00:22:02.960
I can actually step through as the Windows app is interacting with the service that ultimately makes its way back over HTTPS onto my local machine.

00:22:02.960 --> 00:22:03.480
Isn't that cool?

00:22:03.480 --> 00:22:04.240
Yeah, that's very cool.

00:22:04.240 --> 00:22:09.680
I got exposed to Ngrok by a coworker, and I hadn't seen it before, and I was like, oh, well, that's pretty awesome.

00:22:09.680 --> 00:22:14.460
Yeah, the thing that I think is most useful is so often – like, I work in the web world, right?

00:22:14.540 --> 00:22:23.220
So traditionally, I had maybe made some changes to the web app, and then we might have like a scrum meeting or like a quick sync-up meeting.

00:22:23.220 --> 00:22:24.200
Like, hey, how's everybody doing?

00:22:24.200 --> 00:22:29.780
And I'm not ready to publish what I've done to the internet, to staging and mess everyone else up.

00:22:29.780 --> 00:22:32.980
But I would still like to show people and let them interact with it.

00:22:32.980 --> 00:22:42.840
Instead of just doing like a screen share, you can go, well, just go to this URL, and you can run it on my machine, which is incredible for a quick iteration of design and development.

00:22:43.020 --> 00:22:44.940
I just saw an interesting application for Ngrok.

00:22:44.940 --> 00:22:53.040
Maybe like the weekend right before PyCon, some friends who run a group here in town called Girls Coding Club, they were doing sort of a tutorial session.

00:22:53.040 --> 00:22:56.220
And so you've got people sort of learning how to build basic web applications.

00:22:56.220 --> 00:22:57.340
I think they were using Rails.

00:22:57.340 --> 00:23:08.220
But then you can use Ngrok and then expose that to the wider internet so that other people in the – so people in the class can sort of – can see each other's applications, or you can send a link to a friend or what have you.

00:23:08.220 --> 00:23:10.620
So it's also really good for tutorials, yeah.

00:23:10.620 --> 00:23:11.260
That is awesome.

00:23:11.340 --> 00:23:13.120
Yeah, for – right, for classes, right?

00:23:13.120 --> 00:23:14.720
So I've got a Slack channel for that group.

00:23:14.720 --> 00:23:17.460
Everybody could Ngrok their stuff and throw it in.

00:23:17.460 --> 00:23:21.420
Say, hey, mine's at, you know, randomaddress.ngrok.io.

00:23:21.420 --> 00:23:22.580
Click on it and have a look.

00:23:22.580 --> 00:23:26.760
And you could like – without having to like reconfigure that on different people's servers.

00:23:26.760 --> 00:23:27.860
I love it.

00:23:27.860 --> 00:23:30.860
And there's like a totally reasonable free tier, which is pretty awesome.

00:23:30.860 --> 00:23:31.400
All right.

00:23:31.400 --> 00:23:33.340
Well, that's it for our items this week.

00:23:33.340 --> 00:23:35.400
I just have a few extra things I want to share.

00:23:35.400 --> 00:23:36.900
Brian, anything else you want to throw out there?

00:23:36.900 --> 00:23:43.180
I did on the plane coming back from PyCon, I finally finished editing the interview with Trey Hunter.

00:23:43.180 --> 00:23:48.660
So soon there will be a Test and Code podcast with interview with Trey Hunter.

00:23:48.660 --> 00:23:49.840
So that should be out soon.

00:23:49.840 --> 00:23:53.120
I saw that you're starting to publish a little more frequently, which is great.

00:23:53.240 --> 00:23:53.540
Thank you.

00:23:53.540 --> 00:23:54.380
Yeah, I'm glad you're doing that.

00:23:54.380 --> 00:23:58.820
So one of our listeners out there, Stephen, Stephen Howell.

00:23:58.820 --> 00:23:59.760
Hello, Stephen.

00:23:59.760 --> 00:24:08.820
Was kind enough to actually be live streaming our live, well, semi-live, in-audience recording of Python Bytes last week.

00:24:08.820 --> 00:24:10.020
That's pretty cool, right, Brian?

00:24:10.020 --> 00:24:10.680
That is neat.

00:24:10.680 --> 00:24:11.360
Have you watched it?

00:24:11.360 --> 00:24:11.700
No.

00:24:11.700 --> 00:24:12.500
Well, I watched some of it.

00:24:12.500 --> 00:24:18.500
So he actually took the video and it starts a little bit of a ways in, but he put it up on the internet on YouTube.

00:24:18.680 --> 00:24:23.260
So if you guys were listening to the live episode last week and you're like, well, what was that actually like?

00:24:23.260 --> 00:24:27.980
Well, click the link at the bottom and you'll be able to watch a pretty high quality version of it, actually.

00:24:27.980 --> 00:24:28.980
So that's pretty cool.

00:24:28.980 --> 00:24:40.320
And then, you know, another thing I'd like to come back to just really quick is, remember when we talked about how easy it is to have a systemd daemon as a Python application?

00:24:40.320 --> 00:24:43.700
To basically implement a systemd daemon in Python?

00:24:43.700 --> 00:24:45.280
We talked about that in episode 54.

00:24:45.540 --> 00:24:46.140
Oh, yeah, totally.

00:24:46.140 --> 00:24:47.240
No, I don't remember that.

00:24:47.240 --> 00:24:53.600
So it turns out you basically have like six or seven lines of configuration and then just an app with like a while true loop.

00:24:53.600 --> 00:24:54.220
It's insane.

00:24:54.220 --> 00:25:00.440
And that's all you have to do to create like a system start run forever sort of application in Python.

00:25:00.440 --> 00:25:01.240
And it's really beautiful.

00:25:01.480 --> 00:25:15.260
So I recently used that technique from episode 54 to build a global series of video servers throughout the world to do like geolocated video serving for all my courses to make that really much nicer.

00:25:15.260 --> 00:25:19.220
So added one in Japan, Sao Paulo and Mumbai this week.

00:25:19.220 --> 00:25:22.520
So that'll make it a little better for people out there listening.

00:25:22.520 --> 00:25:25.780
But it's also a cool application of what we talked about in episode 54.

00:25:25.780 --> 00:25:26.280
Nice.

00:25:26.280 --> 00:25:26.980
Very interesting.

00:25:26.980 --> 00:25:27.940
Yeah, very interesting.

00:25:27.940 --> 00:25:28.820
Incredibly simple.

00:25:28.820 --> 00:25:32.040
I think more people probably would want to do it if they knew how easy it was.

00:25:32.040 --> 00:25:32.860
All right, guys.

00:25:32.860 --> 00:25:33.940
Well, that's all I got.

00:25:33.940 --> 00:25:35.820
Thank you, Kojo, for being here.

00:25:35.820 --> 00:25:38.060
And Brian, thank you as always for making the show happen.

00:25:38.060 --> 00:25:38.500
Thank you.

00:25:38.500 --> 00:25:39.640
Thank you for inviting me.

00:25:39.700 --> 00:25:40.260
Yep, you bet.

00:25:40.260 --> 00:25:40.680
Bye, guys.

00:25:40.680 --> 00:25:44.220
Thank you for listening to Python Bytes.

00:25:44.220 --> 00:25:46.780
Follow the show on Twitter via at Python Bytes.

00:25:46.780 --> 00:25:49.680
That's Python Bytes as in B-Y-T-E-S.

00:25:49.680 --> 00:25:53.120
And get the full show notes at pythonbytes.fm.

00:25:53.120 --> 00:25:57.440
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:25:57.440 --> 00:26:00.140
We're always on the lookout for sharing something cool.

00:26:00.140 --> 00:26:03.540
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:03.540 --> 00:26:07.160
Thank you for listening and sharing this podcast with your friends and colleagues.

