00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 384, recorded May 21st, 2024.

00:00:13 I'm Michael Kennedy.

00:00:14 And I'm Brian Okken.

00:00:16 This episode is sponsored by Mailtrap.

00:00:19 Better email sending APIs.

00:00:21 Check them out at pythonbytes.fm/mailtrap.

00:00:23 Tell you more about them later.

00:00:25 And you can connect with us over on Fostadon.

00:00:29 We're all Mastodon in general, but we're all over on Fostadon.

00:00:32 So find us there.

00:00:33 And if you want to X, then you can connect to us over on X as well.

00:00:38 Brian, I'm not going to call it Twitter anymore.

00:00:40 Do you know why?

00:00:41 Why?

00:00:41 When you go there, it now redirects Twitter to X instead of X to Twitter.

00:00:45 Oh, really?

00:00:46 They've accepted their fate.

00:00:49 They've accepted their fate.

00:00:50 So at least for the time being.

00:00:52 I just had a friend of mine get mad at me for unfollowing him on Twitter.

00:00:58 It wasn't just you, man.

00:01:00 I don't follow anybody on Twitter.

00:01:02 Don't take it personally.

00:01:04 Yeah.

00:01:05 So people can find us there as well, although more conversations on Mastodon.

00:01:09 And check out the live show.

00:01:10 If you would like pythonbytes.fm flash live, usually Tuesdays at 10 a.m. Pacific time.

00:01:15 And if you want an artisanal, handcrafted, specialized, personal summary of what we talked about on the show, just head on over to pythonbytes.fm.

00:01:25 Click newsletter right in the middle of the hero section at the top and put your email address there.

00:01:31 We won't share it.

00:01:32 It's just so that we can talk to you about things that we're up to.

00:01:35 So if that sounds awesome, do that.

00:01:37 But Brian, we're not going to be forceful about that.

00:01:41 We're not going to overdo it, are we?

00:01:44 I'm going to start by talking about Git force, actually.

00:01:47 Adam Johnson wrote a blog post about Git.

00:01:51 This isn't specifically Python related, but I'm guessing a lot of you guys use Git.

00:01:56 So I've seen a few people who do Python who use Git also.

00:01:59 That's true.

00:02:00 So one of the things that happens is when you're using Git and you've got your local repo that's not quite in sync with the remote one.

00:02:11 And if it's just you and it's somehow when you push and it doesn't work right, you do a push force with a --force.

00:02:19 And it just says, no, I mean it.

00:02:21 Take it.

00:02:21 That's not always what you want to do.

00:02:25 So Adam Johnson wrote a post called Force Push Safely with Force with Lease and Force If Includes.

00:02:33 Wow, these are verbose.

00:02:35 I did not know about either of these things.

00:02:37 So I'm really glad that he wrote this up.

00:02:39 The idea is I don't know what I don't know what that means.

00:02:44 I don't know what with lease or if includes means.

00:02:48 But the gist of it is, is one of them will make sure that you have.

00:02:52 Oh, let's just look at what he said.

00:02:54 So if you try and sometimes you get an error message that said a note about fast forwards and failed push because you're the tip of your current branch is behind its remote counterpart.

00:03:07 So you're not up to date.

00:03:08 So wait, before you ignore this because you think, oh, I only use my own repos and I don't.

00:03:15 I'm never going to be in conflict.

00:03:16 I'm finding this more and more with my own repositories and I'm the only one developing.

00:03:22 Why is that?

00:03:23 It's because I've got CI tools that do things like update things for me.

00:03:28 And and if it passes, it goes through.

00:03:31 And so therefore, my local branch is not up to date with my remote because there's stuff in CI doing things for me.

00:03:38 That's a good thing.

00:03:39 But it causes this problem sometimes.

00:03:41 And what we want to do is to make sure that we pull or fetch all of the branches that we're going to be pushing to and make sure that our local changes are merged correctly.

00:03:50 And if we don't do that, get push will fail.

00:03:53 So this you can force it, but forcing will just overwrite your version with the one up there.

00:03:59 It's not really what you want to do.

00:04:00 So the the so one of these one of these flags will make sure that you have at least fetched the the branching question.

00:04:09 So all in all the commits that you've that you've fetched all of the commits that are involved so that it assumes that you've looked at them.

00:04:16 And then one of them makes sure that you have actually you've actually checked it out.

00:04:21 So if you done you did a get checkout and actually so that and that would mean that would, I guess, assume that you have looked at actually looked at it, not just that it's on your computer.

00:04:32 This fetch will pull everything down.

00:04:34 So it's on your computer.

00:04:35 But committing or checking it out will mean that you've actually had it in there and you had at least the opportunity to look at it.

00:04:43 So I'm definitely going to.

00:04:46 And there was some comments to this blog post saying that I usually have a a shortcut assigned to this.

00:04:53 And I'm not sure what the normal shortcut is for this, but I'm definitely going to set this up to see if I can get this to happen automatically or something.

00:05:01 Yeah, this is interesting.

00:05:02 It's new to me as well.

00:05:03 And I'm certainly going to check it out.

00:05:05 So anyway, some get safety concerns.

00:05:10 So, yes, speaking of safety, how was your flight?

00:05:14 Oh, yeah.

00:05:14 Was your flight safe back from PyCon?

00:05:16 My flight, my flight was great, actually.

00:05:19 Worked out pretty good.

00:05:20 All the flights were full.

00:05:21 So it was like rubbing shoulders with strangers.

00:05:23 I even got the bonus of being in the middle seat one time.

00:05:27 That was amazing.

00:05:28 That was the flight that was delayed for an hour and a half and waited on the tarmac instead of the terminal.

00:05:34 So I got an extra time there with people.

00:05:35 But yeah, no, it was great.

00:05:37 And yeah, let's let's talk a little bit about PyCon.

00:05:39 So PyCon, PyCon is awesome.

00:05:42 You know, there's a ton of people that I got to see again.

00:05:45 And that was really special.

00:05:46 A bunch of people I met.

00:05:48 And that was also amazing.

00:05:50 Just I just spent my time going around networking, learning what folks are up to, both through the expo floor and just from talking to others.

00:05:59 And, you know, I say this all the time, but to me, it's basically my geek holiday.

00:06:04 So we missed you, though, Brian.

00:06:06 We missed you this year.

00:06:07 I missed you guys.

00:06:09 Yeah.

00:06:09 A bunch of people asked about you, by the way.

00:06:11 They're like, hey, too bad he's not here.

00:06:12 All right.

00:06:13 Well, I did do a live Talk Python episode with Jody Birchall and some other data science ladies there at the JetBrains booth.

00:06:23 So thanks to them for all the AV setup.

00:06:25 And I'll post that in a couple of weeks.

00:06:27 And also, the talks look really good.

00:06:29 I'm not always inspired by the PyCon talks and some of the Python more regional conference talks.

00:06:34 But this year, they looked quite good.

00:06:36 So I'm really looking forward to the YouTube version of them coming out whenever that happens.

00:06:40 I think last year was like three months or something.

00:06:42 Pretty quick.

00:06:43 No, just kidding.

00:06:44 But eventually, whenever they do come out, they'll be really good.

00:06:47 So we'll talk more about that here when they land, right?

00:06:50 Yeah.

00:06:50 All right.

00:06:51 Let's wrap this up with a rant, though.

00:06:53 I highly recommend people go.

00:06:55 If you've never gone and you think that you might, you should definitely go.

00:06:58 If you're thinking that I'm not good enough at Python to go, you should definitely go.

00:07:03 You'll make connections.

00:07:04 You'll get better at Python.

00:07:04 People are super welcoming.

00:07:06 But do you know what was not welcome?

00:07:08 The stupid mask policy, Brian.

00:07:09 It was universally disliked.

00:07:12 And I'm sure there's one person out of several thousand.

00:07:15 They're like, Michael, the only reason I would come because of this.

00:07:17 Yes, I know.

00:07:18 But I'll tell you, I spoke to tons of people, spoke to vendors.

00:07:22 Everyone was there complaining about the mask.

00:07:24 They're like, can we go outside and just take this thing off for a minute so we can talk?

00:07:27 Or I lost my voice after the first day and so I had to do the podcast.

00:07:31 Because it would be like, what?

00:07:33 You know, like it was just a loud.

00:07:37 Everybody had masks on and it was like loud din because everyone was trying to yell through them.

00:07:41 I don't know.

00:07:41 It was just a tremendous mistake.

00:07:43 The only reason I bring this up, not to rant because I've already done this rant.

00:07:48 Hopefully, people listening for next year, people interested in going next year, speak to people in charge and say, okay, the world is not like that anymore.

00:07:57 Can we please just have a more coherent policy?

00:08:01 Anyway.

00:08:01 I mean, that's what my hope is.

00:08:04 We can do somewhere in the middle.

00:08:06 Like, if you feel like you might have a cough or something, please try to keep your mask on.

00:08:11 But yeah.

00:08:12 Yeah.

00:08:13 Yeah.

00:08:13 100%.

00:08:14 Well, I mean, I said this before and just for people who didn't catch it.

00:08:17 I'm not anti-mask.

00:08:19 Not anti-science.

00:08:20 Whatever.

00:08:21 When I went on a trip recently, long trip, maybe I was getting sick.

00:08:26 I wore my mask the whole time, even though like no one around me did.

00:08:29 Like a super long flight and the airport and everything because I wanted to be considerate.

00:08:34 And I don't care if other people want to wear a mask.

00:08:37 That's great.

00:08:37 But like, don't force this weird policy onto everybody who generally doesn't think that they'd rather.

00:08:44 Right.

00:08:45 It undermines the networking aspect, both for the sponsors and expo trying to talk to people and each other.

00:08:52 All right.

00:08:53 Rant over.

00:08:54 But please, here's fingers crossed for next year.

00:08:57 And if you're out there and you agree with me, please let the folks know.

00:09:01 And you don't have to email me.

00:09:03 I've already had this conversation a lot, but it's just closing the loop in the past.

00:09:07 I feel like what I said before is, you know, pretty much was how it was.

00:09:10 But you know what, though?

00:09:12 It's quite awesome, Brian.

00:09:14 I hinted at the top of the show.

00:09:15 Not that.

00:09:16 That's later.

00:09:16 Mailtrap.

00:09:17 Let's talk about Mailtrap real quick.

00:09:18 Okay.

00:09:18 This episode is sponsored by Mailtrap, an email delivery platform that developers love.

00:09:23 An email sending solution with industry-best analytics, SMTP, and email API, as well as SDKs

00:09:31 for major programming languages and 24-7 human support.

00:09:35 Try for free at mailtrap.io.

00:09:38 Indeed.

00:09:38 Thank you, Mailtrap.

00:09:39 All right.

00:09:40 Over to you, Brian.

00:09:40 What you got?

00:09:40 I'm going to talk about Git some more, actually.

00:09:44 Let's get it on.

00:09:45 So I'm thinking about forking a project because you remember how projects used to have like

00:09:53 fork me on GitHub little things on the top corner.

00:09:56 They don't really do that anymore.

00:09:58 But we often think of, I mean, actually, I often think of contributing to an open source project just in the sense of forking it just so that I can make modifications to contribute back to the project.

00:10:10 That's often how you create a fork.

00:10:13 You create a branch on your own fork.

00:10:15 And then you contribute back to the project.

00:10:17 That's how we do contributions.

00:10:20 But what if you want to have a long running fork of a project?

00:10:24 And that's what I'm considering.

00:10:25 And I was thinking about strategies, how to do that because I don't know.

00:10:29 And so I ran across this a couple blog posts from the Git folks.

00:10:35 It's actually from Leslie Dennington.

00:10:39 Cool.

00:10:39 There's a couple of posts called being friendly.

00:10:42 So there's being friendly, friendly forks 101.

00:10:44 And there's being friendly strategies for friendly fork management.

00:10:49 And I think these are interesting because there's a lot of stuff going on here.

00:10:54 And there's, but not really.

00:10:57 We'll go through them relatively quickly.

00:10:59 They picked some examples to think about.

00:11:03 And I was thinking I would really like to know like from an example project.

00:11:07 And Git itself is a lovely example project.

00:11:11 Because Git has several forks.

00:11:13 And they have different policies.

00:11:15 So there's a Git slash Git, which is the main weight.

00:11:22 There's Git for Windows, for instance.

00:11:24 So there's Git Git, the base one.

00:11:26 There's Git for Windows Git.

00:11:28 There's Microsoft Git.

00:11:29 And there's GitHub Git.

00:11:31 So there's four different friendly forks off of that.

00:11:34 Actually, it's not.

00:11:35 It's actually not like that.

00:11:37 There's the main Git Git.

00:11:40 And then there's Git for Windows that's based off of that.

00:11:43 And then there's Microsoft Git, which is a fork of the Git for Windows.

00:11:48 And then there's GitHub Git, which is completely, it's a separate branch fork.

00:11:53 Anyway.

00:11:55 Three forks on it.

00:11:56 And they have different policies.

00:11:57 And it's interesting to look at them.

00:12:00 And then so if you talk about, look about the different needs.

00:12:03 So the first article talks about the different needs for the forks.

00:12:06 And then the second article talks about merging strategy.

00:12:10 That's really where I wanted to understand it.

00:12:12 Because here's the idea.

00:12:13 I'm going to fork a project.

00:12:15 And then I want to regularly get updates from the parent project.

00:12:21 Because I want to like maybe, and this happens like for internal companies a lot.

00:12:24 If I want to add on extra features that are not there, they like, maybe I tried to contribute

00:12:31 to them and they got rejected.

00:12:32 But I still need them.

00:12:33 So I can have a friendly fork.

00:12:35 But I want to keep up to date with all the changes.

00:12:37 So how do you keep up to date?

00:12:38 So one of the ways is from a, you take a, what they call a merging rebase, which is what

00:12:47 Git for Windows does.

00:12:48 And the, I guess I'm not going to try to find all the diagrams, but there's diagrams in here

00:12:54 too.

00:12:54 But there's a merging rebase is where you take, you kind of do like a fake merge where you say

00:13:03 I'm going to merge, but I'm actually only going to take my changes.

00:13:07 And then you, so that isolates just your changes.

00:13:10 And then you rebase so that you can just take the new, the new space on the, on the upstream

00:13:17 one, and then just apply all of your changes to it.

00:13:20 It's a way to just do that.

00:13:21 The second way is a new branch.

00:13:23 And, and that, that'll allow you to just take like the, the, the Microsoft Git one does a

00:13:30 new branch.

00:13:31 So for each upstream new version, you just create a new branch for that.

00:13:36 Like complete, completely do a new branch.

00:13:39 And then, then you copy over your changes from, from past changes onto the new changes.

00:13:45 So you like start the branch over again every time, almost.

00:13:49 And then the other, the third one is just a traditional merge.

00:13:53 Like Git, Git uses a traditional merge, but there's, there's a lot of noise in that.

00:13:57 And so they say that that works.

00:13:58 Okay.

00:13:59 Takes a lot of people and a lot of testing though.

00:14:01 And they often delay.

00:14:02 So let's say I picked, I don't know, any, any project and for a major release, I'd maybe

00:14:10 wait till like, wait a couple of months or something or wait, whatever the dot releases to make sure

00:14:14 the, the, a couple of the bug fixes releases after the new features came out and then merge

00:14:20 then.

00:14:20 So, and then at the end, which is great.

00:14:23 I know this is a lot of detail, but the great articles.

00:14:26 Oh, there's a, there's a cool picture of the, the creating a new branch, completely new branch

00:14:32 and then merging your changes over.

00:14:34 So there are some great pictures in here.

00:14:35 So the, and then the, they also talked about like proactive versus cautious, like how frequently

00:14:42 you're going to merge.

00:14:43 And this was just a really good discussion of, this is a lot of work guys.

00:14:47 If you're really going to like maintain a fork of a project, you just, just take it slow,

00:14:53 make sure you know what you're doing and know how many people you are there.

00:14:56 So it talks about the different scenarios and when, when you might or might want, not want

00:15:01 to use different versions.

00:15:03 And I think like the, the final one says, if you're new to the fork game and want to

00:15:08 keep it simple, just do just do merges and do it, be considerate.

00:15:13 Maybe that's, that might be the easiest.

00:15:14 And I think I think I might go with this one to start with because, but I am intrigued by

00:15:19 the whole, like the, the merging rebase thing.

00:15:22 That sounds neat too.

00:15:23 Actually, they all sound cool.

00:15:24 I might try all of them just to see how it goes, but it's just me.

00:15:28 So that's a, I might be crazy, but I, I bring this up because I'm a, one,

00:15:33 because other people might be considering like forking something for their own company

00:15:37 use or, or just wanting to possibly start a sister project for something.

00:15:41 Have it be a slightly different.

00:15:43 How do you go about that?

00:15:45 So these are great articles, but also if I'm missing something, if this is not a great reference

00:15:50 for this and the other people have other tools around, let me know.

00:15:54 By the way, the whole forking rebase thing, there was a script involved here.

00:15:59 So they have, they like shared the script that they use for doing this and then talked about

00:16:04 some cool merging like diffs.

00:16:08 And there's a diff merge tool that they used for code reviews and stuff.

00:16:12 Yeah.

00:16:14 Very cool.

00:16:15 This is some advanced get stuff right here, but you can easily get yourself in trouble if

00:16:21 you fork a repo.

00:16:23 And even if you intend to make changes back and you change the branch, the branch that is

00:16:27 being updated on the remote or the original repository, you can end up with merge conflicts.

00:16:33 It's almost always seems like a good idea to have kind of a separate branch where you work

00:16:38 and something that syncs with, with the project.

00:16:40 Right.

00:16:41 And so that's kind of like that.

00:16:43 Plus like, then what do you do to like kind of keep it in sync?

00:16:47 Cause you're definitely going to end up with conflicts if your intention is not to keep it

00:16:50 in sync by pushing your changes back to it.

00:16:53 Right.

00:16:53 Yeah.

00:16:53 The other thing that I want to point out that wasn't in this article is tags are completely

00:16:59 separate.

00:17:00 I know that tags are part of the get repository, but they don't come automatically.

00:17:05 So, and that's often be, I don't know the reason it's convenient that they don't come.

00:17:11 It's both convenient and painful because the new project will have its own versioning scheme

00:17:16 possibly.

00:17:16 But if you want the same versioning scheme, you have to auto, you have to do that separately.

00:17:20 You need to make sure that you're pulling the tags as well.

00:17:22 So yeah.

00:17:23 Yeah.

00:17:23 A lot to consider.

00:17:24 Yeah.

00:17:25 All right.

00:17:25 Let's talk about tack.

00:17:28 Not a super popular project yet, but pretty awesome.

00:17:32 Let's see.

00:17:33 It's about a month old.

00:17:35 I would say, no, four months old is how old it is.

00:17:37 So this is a project that lets you understand the architecture and actually not just understand,

00:17:44 let you specify the architecture of your application and enforce it through a linting sort of thing.

00:17:51 Okay.

00:17:52 So let's see what they say here.

00:17:54 Python tool to enforce modular design.

00:17:57 So maybe the best way, Brian, would be to like, look at this little thing as people are watching.

00:18:02 You can see there's a little video demo, which is great.

00:18:05 So what it will do is it will show you, you set up some config files and you say, I have

00:18:12 these parts of my application, right?

00:18:15 These modules are these packages.

00:18:17 And I want to control how they interact with each other.

00:18:21 So if I say this stuff makes up a data layer here and this stuff makes up an API layer,

00:18:26 you might say that the API layer and the data layer are not allowed to talk to each other.

00:18:30 Only stuff that consumes either of them can coordinate across them, right?

00:18:34 So for example, something in the API section shouldn't import something from the data section

00:18:39 and vice versa.

00:18:40 You want them to be independent so that potentially, you know, they're easier to test.

00:18:44 They're easier to change, you know, if I change this part, it's only going to affect,

00:18:48 you know, the thing itself and the stuff that I explicitly understand to be using it.

00:18:53 And it doesn't like become sort of a spider web of everything's connected to everything

00:18:58 as much as it can in Python because, you know, circular dependencies are an issue, right?

00:19:02 But still, that's kind of the idea.

00:19:04 Okay.

00:19:04 Okay.

00:19:05 So you just install it and you have to like add a package and it'll let you like take

00:19:11 through and specify that.

00:19:12 Or you can just come up with a YAML file, a package.yaml.

00:19:16 And then you give it a tag, like this one is a core and this one is a DB and this one is

00:19:20 utils.

00:19:21 And then at the root, you come up with a tack.yaml that says the core depends upon DB and

00:19:27 utils.

00:19:27 So the core can import from DB and utils, but not vice versa.

00:19:31 The DB depends on utils and utils shouldn't be importing from other places in your application.

00:19:36 And then you can run it against a CLI tool against your app, like tack check.

00:19:40 And it tells you that there's some import that's breaking the rules that you've laid out.

00:19:44 So the other thing, yeah, go ahead.

00:19:46 The other thing that's interesting is it allows you to define a public API.

00:19:50 You can say these things I would like you to be able to use when you use my package, but

00:19:55 this other stuff is internal stuff.

00:19:57 And I make zero promises about it.

00:19:59 So please don't use it.

00:20:00 I know you could because of Python, but don't.

00:20:02 And it'll enforce that as well.

00:20:05 It'll say like, you're trying to use something that I'm explicitly trying to say, don't use.

00:20:09 So I don't think this is useful for every app.

00:20:12 But if you've got different people working on it and you want to be real careful about your

00:20:16 architecture, you know, it's worth checking out.

00:20:18 I think this is, I am going to check this out.

00:20:20 It's not just like, you know, bad architecture or something.

00:20:24 Just you might bring some new people onto a team or it might, it might help people get

00:20:31 used to a project and the rules around it easier if you weren't, if you aren't allowed to do

00:20:36 stuff.

00:20:36 Yeah, that's a pretty good point.

00:20:37 So how does it stop it?

00:20:39 Does it, does it, is it?

00:20:40 Oh, it just, it just prints a warning.

00:20:42 It just prints a warning.

00:20:43 It's like a linter would, the linter would fail.

00:20:46 So it's like a linter error, but I mean, it doesn't actually, there's no runtime checks.

00:20:51 So no, no runtime checks.

00:20:53 Okay.

00:20:54 Yeah.

00:20:54 All right.

00:20:54 Cool.

00:20:55 Yeah.

00:20:55 But you can set it up as a pre-commit hook, in which case I guess you couldn't commit if

00:20:59 you wanted.

00:21:00 But yeah, I kind of like the idea of the public API.

00:21:03 Like I know it looks like you should use that, but there's actually this other thing that does

00:21:06 more checks and brings in some other stuff and adds versioning.

00:21:09 And you should use that function to make this change.

00:21:11 Don't like directly, I don't know, whatever, interact with something, right?

00:21:13 Yeah.

00:21:14 Cool.

00:21:14 All right.

00:21:15 Extra time.

00:21:15 What do you got?

00:21:16 I got, I guess one extra.

00:21:19 I noticed that the pedantic guys.

00:21:23 Pedantic people, I should say, have something they're trying to sell now.

00:21:30 So being a company, you have to make some money somehow, which is good.

00:21:34 But they came up with a tool called Logfire and it just looks fun.

00:21:39 So it's advertised as uncomplicated observability from the team behind Pedantic.

00:21:45 They have an observability platform to look at like logging and other things.

00:21:50 And it's actually, I haven't dug into it too much, but looks pretty slick.

00:21:56 Anyway, right now the pricing model is free for everybody, but they're going to eventually charge

00:22:04 people.

00:22:06 You could know how much they're going to charge you if you had, you know how much they're

00:22:10 going to charge you if you had some of that like cool, fake, futuristic image capabilities.

00:22:16 Zoom, enhance, zoom, enhance, because they have the blurry, blurry pricing.

00:22:20 Yeah.

00:22:20 Well, the website's just beautiful.

00:22:22 Oh, it's $9.99.

00:22:24 I don't know.

00:22:24 I don't know what it is, but yeah.

00:22:25 Yeah, it does look good.

00:22:27 Do you have any extras?

00:22:27 Well, just a quick comment on this.

00:22:29 What I think is interesting about Logfire, and again, congrats to Samuel and team over there.

00:22:36 I saw those folks at PyCon as well.

00:22:38 There's a lot of observability platforms that you can add to different Python stacks and other

00:22:44 stacks as well.

00:22:45 But what's kind of interesting about this is it's super focused on specific frameworks to

00:22:51 add more observability than normal to them, I guess.

00:22:54 So for example, you'd say logfire.instrumentPsychoPG or logfire.instrumentPsychoPG, and it gets like

00:23:02 really deep understanding of what that thing is doing.

00:23:05 And it gives you reports around it rather than just, oh, I saw a web request or I saw you talk

00:23:10 to a file or an API or something, you know?

00:23:12 Yeah.

00:23:12 Yeah.

00:23:12 I do have a couple of extras.

00:23:14 Let's see.

00:23:15 The Getting Started with NLP and Spacey course by Vincent Vomerdam.

00:23:20 He is, he and I decided we're going to do 10% on the course for the month of May, 10% off.

00:23:28 So if you would like to take this course and save a little bit, you've got nine, 10 days

00:23:35 to do so if you listen to this right away, right?

00:23:37 Basically during May 2024, you can save 10%.

00:23:41 So put the link in the show notes.

00:23:43 Check out Getting Started with NLP and Spacey.

00:23:45 Super cool.

00:23:46 Super cool one.

00:23:47 And I feel like I might have had another, I'm going to go with no.

00:23:51 That's my only, only my, my only extra.

00:23:53 Okay.

00:23:54 And I saw we both put a joke in, but let's, let's do your joke next week.

00:23:59 I'll do this joke this week.

00:24:00 Okay.

00:24:00 Okay.

00:24:00 So, so do my joke next?

00:24:03 Yeah.

00:24:03 All right.

00:24:04 So I was actually, listening to a book, called Company of One from, Paul Jarvis.

00:24:11 Excellent book.

00:24:12 I'm actually listening to it the second time now.

00:24:14 I'm really enjoying it.

00:24:15 anyway, he talked about one of the, one of the people he talked about was, somebody

00:24:20 that runs, actually Tom Fishbourne runs a company called Marketunist.

00:24:24 And here's a, cartoon from Marketunist that I actually really love.

00:24:29 It's the evolution.

00:24:30 One sec.

00:24:31 I don't see your screen anymore.

00:24:32 You don't see it?

00:24:33 No.

00:24:34 Okay.

00:24:34 Well, I'm usually got to tell it to us.

00:24:36 Most people listen anyway.

00:24:37 Okay.

00:24:38 evolution of smart products.

00:24:40 If I were to buy a toaster, first there's the toaster.

00:24:44 It makes toasts.

00:24:45 I mean, you've got wifi enabled makes toast after making you wait for a firmware update.

00:24:50 Data driven toaster makes toast by, by watching how you like toast.

00:24:56 So it watches you toast as a service makes toast for 599 a month.

00:25:00 Ad supported toaster makes toast and lets you know that Smuckers is on sale.

00:25:05 And then there's the AI toaster toast.

00:25:07 I'm afraid I can't do that.

00:25:09 Dave.

00:25:09 Afraid I can't do that.

00:25:11 Dave.

00:25:12 Ooh, you do it.

00:25:12 Good.

00:25:13 How?

00:25:14 Let me in.

00:25:15 Goodbye, Dave.

00:25:16 Goodbye, Dave.

00:25:18 I love it.

00:25:19 I love it.

00:25:20 Yeah.

00:25:20 That's a really good one.

00:25:21 Anyway.

00:25:21 the, market is, I'm not really, it's, he's got a great company.

00:25:27 There's a couple, a couple other ones.

00:25:28 The one I really, one of them I really related to.

00:25:31 anyway, there's a lot of thoughts I related to and, enjoyed his stuff.

00:25:35 So.

00:25:36 Awesome.

00:25:36 Yeah.

00:25:37 Very funny one.

00:25:38 good stuff over there.

00:25:39 So nice find.

00:25:40 All right.

00:25:41 Well, I think that is it for the week.

00:25:45 Brian.

00:25:45 Thank you.

00:25:46 Thank you.

00:25:47 Thank you.

00:25:47 Yeah.

00:25:47 Thanks everyone for listening.

00:25:49 See y'all later.

