
00:00:00.000 --> 00:00:03.680
Hey everyone, 2020 has been quite the year, hasn't it?


00:00:03.680 --> 00:00:05.920
Definitely one of those for the history books.


00:00:05.920 --> 00:00:07.840
So over on Talk Python to me,


00:00:07.840 --> 00:00:09.880
I did a year in review show,


00:00:09.880 --> 00:00:12.440
and it actually had me and Brian on there,


00:00:12.440 --> 00:00:15.120
along with a bunch of other really great guests


00:00:15.120 --> 00:00:18.320
who have been on this show and on Talk Python before.


00:00:18.320 --> 00:00:21.040
So I thought what we could do for our year in review here


00:00:21.040 --> 00:00:22.680
is to bring you that same show,


00:00:22.680 --> 00:00:24.560
to bring you that same conversation.


00:00:24.560 --> 00:00:27.120
In fact, it was more in the style of Python Bytes


00:00:27.120 --> 00:00:28.720
than it was Talk Python, to be honest.


00:00:28.720 --> 00:00:30.000
So I think it belongs here.


00:00:30.000 --> 00:00:36.040
So without further ado, let's join that conversation where we look back on 2020


00:00:36.040 --> 00:00:40.320
with Cecil Phillip, Enos Montani, Jay Miller, Paul Everett, Reuben Lerner, Matt


00:00:40.320 --> 00:00:42.640
Harrison, Brian Auken, and me.


00:00:42.640 --> 00:00:46.760
Enjoy the show and thank you so much for listening to Python Bytes this year.


00:00:46.760 --> 00:00:48.160
We'll see you in 2021.


00:00:48.160 --> 00:00:51.800
So let's go ahead and just kick off this episode.


00:00:51.800 --> 00:00:53.920
This one is a little bit different than the standard show.


00:00:53.920 --> 00:00:58.440
Everyone here has been a guest and a great guest, and some of you even repeat guests.


00:00:58.600 --> 00:01:02.200
Some of you are repeat guests and scheduled for more episodes, even hint and Enos,


00:01:02.200 --> 00:01:04.040
but let's go ahead and kick it off.


00:01:04.040 --> 00:01:05.840
So this is going to be a year in review.


00:01:05.840 --> 00:01:08.160
There's a bunch of us here, seven or eight of us.


00:01:08.160 --> 00:01:10.400
And I'll just do a quick introduction.


00:01:10.400 --> 00:01:12.540
Let me just welcome you individually on.


00:01:12.540 --> 00:01:15.440
You could say, you know, a couple of sentences about who you are and whatnot.


00:01:15.440 --> 00:01:19.320
So people know, and then we're just going to get into what you thought was the most


00:01:19.320 --> 00:01:21.360
interesting, impactful thing of the year.


00:01:21.360 --> 00:01:23.100
And I have some software to help me do this.


00:01:23.100 --> 00:01:24.200
So let me run it here.


00:01:24.200 --> 00:01:24.760
Darn it.


00:01:24.760 --> 00:01:25.480
It's me.


00:01:25.480 --> 00:01:25.880
All right.


00:01:25.880 --> 00:01:26.520
We'll go back to that.


00:01:26.680 --> 00:01:28.360
Well, let me welcome you all.


00:01:28.360 --> 00:01:29.000
Then we'll go through this.


00:01:29.000 --> 00:01:32.520
So Jay, Jay Miller, welcome to talk by the name again.


00:01:32.520 --> 00:01:33.360
Happy to be here.


00:01:33.360 --> 00:01:35.200
I haven't been a guest in like three years.


00:01:35.200 --> 00:01:39.120
So I know, but your episode was so popular, like over a hundred


00:01:39.120 --> 00:01:40.420
thousand people listened to your episode.


00:01:40.420 --> 00:01:40.980
Can you believe that?


00:01:40.980 --> 00:01:42.020
That's so insane.


00:01:42.020 --> 00:01:43.540
I'm shutting down my podcast.


00:01:43.540 --> 00:01:44.720
I don't get those kinds of lessons.


00:01:44.720 --> 00:01:47.080
Tell people about yourself.


00:01:47.080 --> 00:01:48.700
Sure.


00:01:48.700 --> 00:01:49.600
Jay Miller.


00:01:49.600 --> 00:01:54.280
I'm a podcaster developer now developer advocate for elastic, you


00:01:54.280 --> 00:01:55.800
you know, the people that do search.


00:01:55.800 --> 00:01:59.440
And we are database shots again, Michael.


00:01:59.440 --> 00:02:02.600
But yeah, I'm just happy to be here.


00:02:02.600 --> 00:02:03.560
Yeah, that's it.


00:02:03.560 --> 00:02:04.800
- Awesome, welcome.


00:02:04.800 --> 00:02:06.600
Ruven Lerner, welcome back.


00:02:06.600 --> 00:02:07.440
Good to see you, man.


00:02:07.440 --> 00:02:08.320
- Hey there, nice to be here.


00:02:08.320 --> 00:02:09.560
- How early is it?


00:02:09.560 --> 00:02:11.280
- It's not that early, it's only 5.30.


00:02:11.280 --> 00:02:14.320
- Oh, okay, well thank you so much for waking up early.


00:02:14.320 --> 00:02:16.040
Yeah, we have people from basically


00:02:16.040 --> 00:02:18.200
every corner of the world, so yeah.


00:02:18.200 --> 00:02:19.080
Tell people about yourself,


00:02:19.080 --> 00:02:20.640
again, if they haven't heard the episodes.


00:02:20.640 --> 00:02:23.200
- Sure, so I'm a Python trainer.


00:02:23.200 --> 00:02:25.800
So most days I'm in different companies


00:02:25.800 --> 00:02:27.240
doing on-site training.


00:02:27.240 --> 00:02:29.960
Nowadays a little less on-site for some strange reason.


00:02:29.960 --> 00:02:31.740
And so I normally do corporate training,


00:02:31.740 --> 00:02:34.160
everything from intro to Python for non-programmers


00:02:34.160 --> 00:02:36.000
all the way up to advanced Python workshops.


00:02:36.000 --> 00:02:38.440
And I also sell a whole bunch of courses online


00:02:38.440 --> 00:02:39.560
to individuals.


00:02:39.560 --> 00:02:42.000
Oh, and I have my book, my book, Python Workout.


00:02:42.000 --> 00:02:42.840
Yay, Python Workout.


00:02:42.840 --> 00:02:45.040
- Yeah, and we're streaming live with video,


00:02:45.040 --> 00:02:46.560
so you can hold it up, yeah, that's awesome.


00:02:46.560 --> 00:02:48.600
- Oh, I can hold it up.


00:02:48.600 --> 00:02:49.440
- Python Workout, awesome.


00:02:49.440 --> 00:02:51.080
- And this is a picture of me on the cover, of course.


00:02:51.080 --> 00:02:51.960
- Of course, yeah.


00:02:51.960 --> 00:02:52.880
- That was when you were working out,


00:02:52.880 --> 00:02:54.040
preparing for the Olympics?


00:02:54.040 --> 00:02:54.880
- Precisely, precisely.


00:02:54.880 --> 00:02:55.700
- Yeah, exactly.


00:02:55.700 --> 00:02:57.360
So we'll be sure to link to your book


00:02:57.360 --> 00:02:58.960
and some of your courses as well.


00:02:58.960 --> 00:03:02.280
Ines, welcome from the other side of the world.


00:03:02.280 --> 00:03:04.000
- Yeah, I'm currently in Australia,


00:03:04.000 --> 00:03:07.120
escaped the EU lockdowns and now I'm here.


00:03:07.120 --> 00:03:08.240
Yeah, happy to be back.


00:03:08.240 --> 00:03:10.000
I think I've been on a few of your podcasts,


00:03:10.000 --> 00:03:11.400
but it's always my favorite podcasts.


00:03:11.400 --> 00:03:12.320
- Oh, thank you.


00:03:12.320 --> 00:03:14.560
Yeah, it's awesome to have you here.


00:03:14.560 --> 00:03:16.600
And I have definitely dreamed about,


00:03:16.600 --> 00:03:19.600
well, my daughter goes to school online.


00:03:19.600 --> 00:03:20.700
I always work online.


00:03:20.700 --> 00:03:22.380
Maybe we should just go somewhere by a beach,


00:03:22.380 --> 00:03:23.480
away from people.


00:03:23.480 --> 00:03:25.080
How could we do that where it's warm, right?


00:03:25.080 --> 00:03:26.460
And it seems like you pulled it off.


00:03:26.460 --> 00:03:27.300
Beautiful.


00:03:27.300 --> 00:03:28.740
All right, Paul Everett, welcome.


00:03:28.740 --> 00:03:30.700
- I just saw Anthony Shaw talking,


00:03:30.700 --> 00:03:33.000
so if you want to talk about converting your life


00:03:33.000 --> 00:03:34.060
to work at the beach,


00:03:34.060 --> 00:03:37.220
just subscribe to his damn Twitter account.


00:03:37.220 --> 00:03:38.060
- Welcome, Anthony Shaw.


00:03:38.060 --> 00:03:39.740
- Anthony, I'm raging against you.


00:03:39.740 --> 00:03:41.300
- Oh my gosh, also from Australia.


00:03:41.300 --> 00:03:42.140
Hey, Anthony.


00:03:42.140 --> 00:03:44.340
And Andrew from PyCharm is here,


00:03:44.340 --> 00:03:45.340
a bunch of folks.


00:03:45.340 --> 00:03:46.240
Mark, awesome.


00:03:46.240 --> 00:03:47.380
Paul, introduce yourself.


00:03:47.380 --> 00:03:48.220
- Sure.


00:03:48.220 --> 00:03:51.860
I'm an advocate at JetBrains for Python stuff and web stuff.


00:03:51.860 --> 00:03:55.020
Most known for giving the Python 1994 talk.


00:03:55.020 --> 00:03:58.460
My purpose on this panel is to increase the median age


00:03:58.460 --> 00:04:01.300
so that we all qualify for the discount at the buffet.


00:04:01.300 --> 00:04:03.060
Hey man, I'm right there with you.


00:04:03.060 --> 00:04:04.060
Right there with you, awesome.


00:04:04.060 --> 00:04:05.060
Nice to have you, Paul.


00:04:05.060 --> 00:04:07.060
Brian, we've met before, right?


00:04:07.060 --> 00:04:08.060
Yeah.


00:04:08.060 --> 00:04:11.340
Brian Aukin, he and I co-host Python Bytes Together.


00:04:11.340 --> 00:04:13.340
And you've been on the show quite a few times as well.


00:04:13.340 --> 00:04:15.980
Last time, I think we covered 30 pytest plugins.


00:04:15.980 --> 00:04:17.260
That was quite the whirlwind tour.


00:04:17.260 --> 00:04:20.860
Yeah, so I highly recommend this book to anybody that wants to learn pytest.


00:04:20.860 --> 00:04:22.700
Awesome. Matt Harrison, welcome back.


00:04:22.700 --> 00:04:28.460
Thanks. Good to be here. I guess I'm similar to Reuben. I do corporate training and consulting


00:04:28.460 --> 00:04:33.660
in Python and data science. And I guess since we're flaunting books, I'll flaunt my latest book.


00:04:33.660 --> 00:04:35.900
Wait, wait, the tiny Python 3 notebook.


00:04:35.900 --> 00:04:38.620
Tiny Python notebook. It's very small. Anyway.


00:04:38.620 --> 00:04:41.900
It is tiny. Well, what I was going to say, Matt, is like, you're going to need to be like,


00:04:41.900 --> 00:04:46.140
basically an octopus to hold up all your books. Like multiple books on each tentacle.


00:04:46.140 --> 00:04:49.340
I've got a few here. So yeah, it's good to be here. Thanks for having me on.


00:04:49.340 --> 00:04:52.220
Yeah, you were just recently on about learning how to learn.


00:04:52.220 --> 00:04:52.780
Yeah.


00:04:52.780 --> 00:04:55.260
Does it count if I have everyone else's book?


00:04:55.260 --> 00:04:58.380
Yes, it does. But it will also be hard to hold them all up, especially if you got all of them.


00:04:58.380 --> 00:05:02.140
Cecil, hello, man. Hello. Good to see you, friend.


00:05:02.140 --> 00:05:05.100
Hey, thanks for having me on. I don't have any books to share.


00:05:05.100 --> 00:05:08.940
But because I hate writing, so I don't write anything. I do do some video.


00:05:08.940 --> 00:05:13.980
So if you're interested, I do do a weekly Python stream on Wednesdays.


00:05:13.980 --> 00:05:16.220
So if you folks want to check it out, it's on Twitch


00:05:16.220 --> 00:05:17.740
on the Microsoft developer account.


00:05:17.740 --> 00:05:21.020
And we do very beginner friendly conversations


00:05:21.020 --> 00:05:22.460
about Python and stuff like that.


00:05:22.460 --> 00:05:24.300
And Michael, you were just on the other day too, right?


00:05:24.300 --> 00:05:25.580
- Yeah, it was so fun to be on there with you.


00:05:25.580 --> 00:05:27.340
We got to play around with FastAPI


00:05:27.340 --> 00:05:28.860
and man, that's a cool framework.


00:05:28.860 --> 00:05:29.980
- So it's Coding From The Beach.


00:05:29.980 --> 00:05:31.020
What's the name of the show?


00:05:31.020 --> 00:05:32.300
- That's a good name, actually.


00:05:32.300 --> 00:05:33.420
Maybe I should coin that one.


00:05:33.420 --> 00:05:36.140
No, so we do PyWeekly.


00:05:36.140 --> 00:05:39.340
So it's me and my co-worker, Brian Clark.


00:05:39.340 --> 00:05:41.500
And we kind of approach Python


00:05:41.500 --> 00:05:43.100
from the perspective of beginners,


00:05:43.100 --> 00:05:45.900
but also from two people that don't necessarily


00:05:45.900 --> 00:05:47.560
know Python very well.


00:05:47.560 --> 00:05:49.280
So, you know, Brian is a JavaScript guy,


00:05:49.280 --> 00:05:51.200
I'm a .NET guy, but we're both,


00:05:51.200 --> 00:05:53.280
I like to call it Py-curious, you know what I mean?


00:05:53.280 --> 00:05:54.640
Like we're Python curious.


00:05:54.640 --> 00:05:57.240
And, you know, we definitely want to show people


00:05:57.240 --> 00:05:59.160
like the different perspectives of learning


00:05:59.160 --> 00:06:00.240
like new languages.


00:06:00.240 --> 00:06:01.240
- Yeah, it's super interesting.


00:06:01.240 --> 00:06:02.160
And it is really low-key.


00:06:02.160 --> 00:06:05.480
It's like you said, it's this Twitch


00:06:05.480 --> 00:06:07.500
sort of exploration style of code,


00:06:07.500 --> 00:06:09.120
not polished presentation style.


00:06:09.120 --> 00:06:10.680
So you just guys sit down,


00:06:10.680 --> 00:06:12.360
take feedback from the audiences,


00:06:12.360 --> 00:06:13.440
and go with it.


00:06:13.440 --> 00:06:15.960
- Yeah, I love this show, 'cause I'm never prepared.


00:06:15.960 --> 00:06:18.120
Like, I kinda just show up and talk about stuff,


00:06:18.120 --> 00:06:21.640
and people love it, and it's great.


00:06:21.640 --> 00:06:23.200
I don't have to do notes or anything like that.


00:06:23.200 --> 00:06:24.040
We just kinda be like,


00:06:24.040 --> 00:06:25.560
"Hey, what do we wanna learn about today?"


00:06:25.560 --> 00:06:26.760
Right, well, let's go ahead and do it.


00:06:26.760 --> 00:06:28.240
- Yeah, fantastic.


00:06:28.240 --> 00:06:30.640
All right, well, given how many of us there are,


00:06:30.640 --> 00:06:31.960
let's go ahead and just jump in,


00:06:31.960 --> 00:06:33.720
and we're gonna do our year in review.


00:06:33.720 --> 00:06:36.200
And so I've written a small piece of Python software


00:06:36.200 --> 00:06:37.040
here in the REPL.


00:06:37.040 --> 00:06:37.880
It's very advanced.


00:06:37.880 --> 00:06:39.880
It's at least four lines of code, I gotta tell you.


00:06:39.880 --> 00:06:41.600
And what it's gonna do is it's gonna pick one of you,


00:06:41.600 --> 00:06:45.140
And then we're going to have you talk about what you felt was the most


00:06:45.140 --> 00:06:49.320
significant or impactful thing that you saw happening in the Python space.


00:06:49.320 --> 00:06:53.560
So round one, Cecil, you're on screen and it pulled you up.


00:06:53.560 --> 00:06:54.120
Go for it.


00:06:54.120 --> 00:06:54.840
Wow, I got lucky.


00:06:54.840 --> 00:06:55.280
Okay.


00:06:55.280 --> 00:07:00.400
So the most exciting thing that, that I think happened in the world of Python


00:07:00.400 --> 00:07:04.640
on one that I have a little bit of a close relationship to is the fact that


00:07:04.640 --> 00:07:08.520
Guido van Rossum joined Microsoft just a couple of weeks ago.


00:07:08.520 --> 00:07:11.160
So I didn't mention this before, but I do work at Microsoft as a


00:07:11.160 --> 00:07:16.340
developer advocate. And I think for me, it's been a really interesting to kind of see how


00:07:16.340 --> 00:07:21.080
the company has, you know, been embracing open source and working with a lot of the


00:07:21.080 --> 00:07:25.720
creators and now seeing a lot of the leaders of the industry kind of joined the company.


00:07:25.720 --> 00:07:29.400
You know what I mean? It kind of, you know, it's a kind of, it's like a different world.


00:07:29.400 --> 00:07:33.280
I mean, I don't know how else to explain it or, or talk about it. It's been really great


00:07:33.280 --> 00:07:38.400
to have him here. I had the opportunity actually to interview him. And we did like an internal


00:07:38.400 --> 00:07:42.400
interview just talking about like, well, what made you decide to come on a retirement?


00:07:42.400 --> 00:07:46.320
That's awesome. Was this on channel nine? Is it public or is it?


00:07:46.320 --> 00:07:49.840
No, it was internal. It was an internal interview. I don't know what his, his,


00:07:49.840 --> 00:07:53.200
I know I'm sure he will do some other ones, but it was an internal one.


00:07:53.200 --> 00:07:54.640
Did you make him whiteboard?


00:07:54.640 --> 00:07:58.320
No, we didn't do him any whiteboarding. We did ask him what some of his favorite shows were. So


00:07:58.320 --> 00:08:02.720
that was, that was pretty interesting. We asked him like the Star Trek versus Star Wars conversation


00:08:02.720 --> 00:08:03.360
too.


00:08:03.360 --> 00:08:04.960
I couldn't, I couldn't handle that pressure.


00:08:05.760 --> 00:08:08.160
It's hard, man. It's a tough crowd.


00:08:08.160 --> 00:08:11.760
I think it's definitely amazing to be able to see folks from the industry


00:08:11.760 --> 00:08:19.200
embracing these different companies and us really supporting open source in a very authentic way.


00:08:19.200 --> 00:08:20.880
Yeah, it's such a big change.


00:08:20.880 --> 00:08:23.920
Reuven, you were just talking before we started streaming, I think,


00:08:23.920 --> 00:08:26.560
about 10 years ago, how this was really different.


00:08:26.560 --> 00:08:29.280
Oh, yeah. I mean, even more. But yeah, even 10 years ago,


00:08:29.280 --> 00:08:34.080
the notion that Microsoft would be so involved in the open source space,


00:08:34.080 --> 00:08:43.400
and specifically the Python space was basically unthinkable. I mean, I think it was Steve Ballmer who said that, you know, Microsoft, not Microsoft, like the Linux and open source were a cancer on the industry.


00:08:43.400 --> 00:08:49.120
And they were definitely seen, you know, Microsoft was seen as an enemy of the open source world.


00:08:49.120 --> 00:08:55.080
And it's been truly amazing to see them just embrace it. I mean, you see the booth at Python, you see the VS code investment.


00:08:55.080 --> 00:08:58.680
It's very, very impressive. And it demonstrates, and he says, we'll say this earlier, like,


00:08:58.680 --> 00:09:03.360
how much leadership at the top really can change the direction and the attitude of a company,


00:09:03.360 --> 00:09:07.800
and that filters through to even the lower level people and the decisions made there.


00:09:07.800 --> 00:09:11.000
Yeah, that's a lot of hard work, right? Because if you think about it,


00:09:11.000 --> 00:09:14.840
we've had different leadership for a very long time. And so for some of us,


00:09:14.840 --> 00:09:19.680
some of this change that people are still recognizing, I mean, we've been doing it for a very long time.


00:09:19.680 --> 00:09:24.800
You know what I mean? Like we didn't just in 2020 decide, oh, hey, let's adopt and support open source.


00:09:24.800 --> 00:09:29.040
It's been one of those things that have been building very much over time.


00:09:29.040 --> 00:09:33.360
But the fact of the matter is, you still have those old stigmas that we still have to shake,


00:09:33.360 --> 00:09:38.080
and we still have a lot of folks that we have to help convince that we're not the Death Star,


00:09:38.080 --> 00:09:40.400
and we won't destroy the world kind of thing.


00:09:40.400 --> 00:09:47.200
But I think it's a good responsibility to take on, because there's also a lot to fuck up.


00:09:47.200 --> 00:09:50.720
And if you commit to doing something, like GitHub acquisition,


00:09:51.280 --> 00:09:53.720
and say, "Okay, we're doing that and we're running it."


00:09:53.720 --> 00:09:55.040
You know, we're good sign forward


00:09:55.040 --> 00:09:57.680
because every misstep can have like,


00:09:57.680 --> 00:09:59.400
you know, a really big impact.


00:09:59.400 --> 00:10:00.240
- Yeah.


00:10:00.240 --> 00:10:01.880
- You know, if Microsoft starts doing bad things again,


00:10:01.880 --> 00:10:02.920
people are not gonna be, you know,


00:10:02.920 --> 00:10:03.960
they forgiving at all.


00:10:03.960 --> 00:10:04.800
So.


00:10:04.800 --> 00:10:06.400
- I think that was the most sensitive,


00:10:06.400 --> 00:10:08.120
one of them all is the GitHub acquisition


00:10:08.120 --> 00:10:10.960
because what they do to Azure is kind of their story.


00:10:10.960 --> 00:10:12.400
What they do to Windows is their story,


00:10:12.400 --> 00:10:14.240
but what they do to GitHub, that's everyone's story.


00:10:14.240 --> 00:10:16.600
And all of a sudden, that was a big deal.


00:10:16.600 --> 00:10:17.440
- Yeah.


00:10:17.440 --> 00:10:18.280
- And on top of that, you had the ability


00:10:18.280 --> 00:10:22.080
to give GitHub a little bit more power in the space.


00:10:22.080 --> 00:10:24.820
Like, I mean, we've all been kind of watching what's happening


00:10:24.820 --> 00:10:27.080
with like YouTube DL and stuff like that.


00:10:27.080 --> 00:10:31.520
And just seeing the support, it's not just GitHub anymore now.


00:10:31.520 --> 00:10:36.720
It's like, OK, what does one of the the wealthiest companies in the world,


00:10:36.720 --> 00:10:41.360
you know, say about this particular position that YouTubers have a problem


00:10:41.360 --> 00:10:45.660
with, that people in tech have a problem with, like a lot of abusive behavior?


00:10:45.660 --> 00:10:48.960
And on top of that, you're providing support for things like NPM.


00:10:48.960 --> 00:10:50.160
It's one of those questions.


00:10:50.160 --> 00:10:54.460
We all want to contribute to open source, but none of us have the financial


00:10:54.460 --> 00:10:58.060
ability to contribute like a company like Microsoft can.


00:10:58.060 --> 00:11:01.560
So I'm not just saying we're going to be a part of it, but saying, no, we're


00:11:01.560 --> 00:11:03.960
really going to be a part of it is like a huge deal.


00:11:03.960 --> 00:11:04.760
Yeah.


00:11:04.760 --> 00:11:07.960
The million dollar defense fund that they just announced is a big deal.


00:11:07.960 --> 00:11:08.920
Yeah, for sure.


00:11:08.920 --> 00:11:10.660
And when you think about GitHub, right?


00:11:10.660 --> 00:11:13.980
Like you think about like developer culture, that's what


00:11:13.980 --> 00:11:15.460
GitHub kind of represents to me.


00:11:15.460 --> 00:11:18.960
is the new, you know, the future of developer culture.


00:11:18.960 --> 00:11:21.160
Like, how do we collaborate? How do we work with each other?


00:11:21.160 --> 00:11:23.960
How do we share not just source code, but like,


00:11:23.960 --> 00:11:27.960
experiences and knowledge, right, through, like, something that we can all connect together with?


00:11:27.960 --> 00:11:29.060
That's code, right?


00:11:29.060 --> 00:11:31.760
And then kind of circling it back around to Guido,


00:11:31.760 --> 00:11:37.060
being able to, again, see these leaders of these really large open source projects


00:11:37.060 --> 00:11:38.860
put their faith in the company,


00:11:38.860 --> 00:11:42.560
and even considering what the past of the company was to what it is today,


00:11:42.560 --> 00:11:48.000
I think hopefully like the rest of the open source world would start to realize that we are serious about


00:11:48.000 --> 00:11:51.680
being good open source citizens and supporting the culture in the community.


00:11:51.680 --> 00:11:55.200
I mean, me personally, I'm just really excited to see what he's going to do what he's going to work on.


00:11:55.200 --> 00:11:56.400
The future is bright, man.


00:11:56.400 --> 00:11:57.040
Yeah, absolutely.


00:11:57.040 --> 00:12:04.000
I think someone on on Twitter had said, so now we actually hire folks that contributes to,


00:12:04.000 --> 00:12:09.680
you know, obviously C# and F sharp and dotnet stuff, but also folks that contribute to Java,


00:12:09.680 --> 00:12:15.120
Rust, C++, and now obviously Python, right? So we have a whole host of language folks


00:12:15.120 --> 00:12:19.840
underneath the umbrella of the company. And so now being able to have that space of collaboration,


00:12:19.840 --> 00:12:23.600
like underneath the umbrella of one company, I think is going to be really interesting to see


00:12:23.600 --> 00:12:26.480
what the next couple of years looks like. Yeah, you have to come back in six months


00:12:26.480 --> 00:12:30.240
and give us an update on all the Python changes. I'll give you a six month update on it.


00:12:30.240 --> 00:12:36.480
This episode is brought to you by Linode. Simplify your infrastructure and cut your


00:12:36.480 --> 00:12:41.120
cloud builds in half with Linode's Linux virtual machines. Develop, deploy, and scale your modern


00:12:41.120 --> 00:12:46.080
applications faster and easier. Whether you're developing a personal project or managing larger


00:12:46.080 --> 00:12:50.720
workloads, you deserve simple, affordable, and accessible cloud computing solutions.


00:12:50.720 --> 00:12:56.560
As listeners of PythonBytes, you'll get $100 free credit. You can find all the details at


00:12:56.560 --> 00:13:02.640
pythonbytes.fm/linode. Linode has data centers all around the world with the same simple and


00:13:02.640 --> 00:13:05.480
and consistent pricing regardless of location.


00:13:05.480 --> 00:13:08.780
Choose the data center that's nearest to you and your users.


00:13:08.780 --> 00:13:12.120
You'll receive 24/7/365 human support


00:13:12.120 --> 00:13:15.780
with no tiers or handoffs regardless of your plan size.


00:13:15.780 --> 00:13:18.700
You can choose shared or dedicated compute instances,


00:13:18.700 --> 00:13:20.500
or you can use your $100 in credit


00:13:20.500 --> 00:13:23.200
on the S3 compatible object storage,


00:13:23.200 --> 00:13:25.960
managed Kubernetes clusters, and more.


00:13:25.960 --> 00:13:28.340
If it runs on Linux, it runs on Linode.


00:13:28.340 --> 00:13:30.920
Visit pythonbytes.fm/linode


00:13:30.920 --> 00:13:33.720
and click that create free account button to get started.


00:13:33.720 --> 00:13:36.920
All right, I'm going to run the chooser.


00:13:36.920 --> 00:13:38.620
Paul, it has chosen you.


00:13:38.620 --> 00:13:40.520
Not sure about your chooser algorithm here.


00:13:40.520 --> 00:13:42.220
It doesn't seem to be...


00:13:42.220 --> 00:13:45.820
Random dot choice, I'm telling you.


00:13:45.820 --> 00:13:50.620
This time it's not a good time to talk about election strategies.


00:13:50.620 --> 00:13:52.720
And it's seen as how it chose you first.


00:13:52.720 --> 00:13:54.020
It could be flawed.


00:13:54.020 --> 00:13:57.220
Are you changing the random seat on every...


00:13:57.220 --> 00:14:00.020
Exactly.


00:14:00.020 --> 00:14:02.020
Yeah, I should be. I'm not.


00:14:02.020 --> 00:14:04.660
My topic is "Things change, nothing changes."


00:14:04.660 --> 00:14:07.300
And I think I'm maybe stealing someone else's topic,


00:14:07.300 --> 00:14:10.340
so I appreciate your random algorithm choosing me first.


00:14:10.340 --> 00:14:13.620
And it's kind of along the lines, I'm kind of interested in open source communities


00:14:13.620 --> 00:14:17.220
over the years and decades and why one works, why one doesn't.


00:14:17.220 --> 00:14:20.740
In particular, a lot of open source projects that get successful


00:14:20.740 --> 00:14:23.540
kind of founder when the founder leaves.


00:14:23.540 --> 00:14:27.780
And over the last couple of years, you've seen Guido transition out,


00:14:27.780 --> 00:14:33.180
Stepping out as BDFL and kind of a new language governance model that he didn't even decide on.


00:14:33.180 --> 00:14:34.380
He let it emerge.


00:14:34.380 --> 00:14:39.680
And then new release managers, new PSF directors, all happening this year.


00:14:39.680 --> 00:14:43.580
A pandemic, which kind of destroyed the big fundraiser,


00:14:43.580 --> 00:14:46.080
an organizing event called PyCon,


00:14:46.080 --> 00:14:48.580
Python 2.7 end of life,


00:14:48.580 --> 00:14:52.180
which I guess a lot of us thought would never effing happen,


00:14:52.180 --> 00:14:53.280
and it effing happened.


00:14:53.280 --> 00:15:00.740
And it threw all of this change for a project that was like reaching mega escape velocity and popularity


00:15:00.740 --> 00:15:09.040
Nothing changed. Everyone's like who cares python just kept on doing the doing its business releases kept cranking out peps kept cranking out


00:15:09.040 --> 00:15:12.480
Elections well python elections kept cranking out


00:15:12.480 --> 00:15:15.540
Michael and brian kept cranking out podcasts


00:15:15.540 --> 00:15:18.420
Hallelujah something good happened in 2020


00:15:18.880 --> 00:15:23.520
And so it's interesting to me, healthy projects are those with a healthy bench,


00:15:23.520 --> 00:15:24.960
kind of a middle management.


00:15:24.960 --> 00:15:28.000
Python has a hell of a middle management now. It's awesome.


00:15:28.000 --> 00:15:30.960
And it's like middle management in every vector now.


00:15:30.960 --> 00:15:33.920
It's got language leadership, middle management,


00:15:33.920 --> 00:15:36.960
foundation leadership, middle management,


00:15:36.960 --> 00:15:41.040
conferences, all the regional conferences are kicking ass, even online.


00:15:41.040 --> 00:15:45.200
So it's really good for me to see a balance between some of the old heroes


00:15:45.200 --> 00:15:47.840
like Brett Cannon who gave this awesome keynote


00:15:47.840 --> 00:15:49.600
two or three or four years ago


00:15:49.600 --> 00:15:51.600
at PyCon about open source.


00:15:51.600 --> 00:15:54.740
And then some of the new heroes like Marlene Mangami.


00:15:54.740 --> 00:15:56.740
When I give the Python 1994 talk,


00:15:56.740 --> 00:15:58.080
sometimes I give it with Barry.


00:15:58.080 --> 00:15:58.940
And it's like,


00:15:58.940 --> 00:16:01.640
"Well, did you ever know back then that it was gonna..."


00:16:01.640 --> 00:16:03.080
Hell no, we didn't know.


00:16:03.080 --> 00:16:05.080
And so seeing all of this happen,


00:16:05.080 --> 00:16:07.420
seeing generation after generation come in,


00:16:07.420 --> 00:16:09.280
do their thing, raise the next generation,


00:16:09.280 --> 00:16:10.120
is pretty cool to see.


00:16:10.120 --> 00:16:11.420
Yeah, it's fantastic.


00:16:11.420 --> 00:16:13.420
And I know there was a lot of uncertainty


00:16:13.420 --> 00:16:15.980
when Guido stepped down about,


00:16:15.980 --> 00:16:17.460
oh my gosh, what's going to happen?


00:16:17.460 --> 00:16:20.060
But it's kind of been a non-issue, which is good.


00:16:20.060 --> 00:16:21.260
Non-issue in a good way.


00:16:21.260 --> 00:16:22.100
- Indeed.


00:16:22.100 --> 00:16:22.940
- Yeah.


00:16:22.940 --> 00:16:23.760
- Yeah, I think it's really nice to also have,


00:16:23.760 --> 00:16:25.740
you know, some stability, even, you know,


00:16:25.740 --> 00:16:28.340
especially nowadays that's quite rare.


00:16:28.340 --> 00:16:31.260
And just to see, you know, stuff just works.


00:16:31.260 --> 00:16:33.820
Nothing goes wrong, no drama, no, you know,


00:16:33.820 --> 00:16:36.340
nothing terrible, just drums, almost boring.


00:16:36.340 --> 00:16:38.020
- Yeah, boring's good these days.


00:16:38.020 --> 00:16:40.180
One of the things that really surprises me,


00:16:40.180 --> 00:16:42.540
Paul, as you mentioned, the escape velocity.


00:16:42.540 --> 00:16:48.940
What's weird to me is how Python went like 20 years on medium, like simmer popularity,


00:16:48.940 --> 00:16:51.660
and then it hit the afterburners and took off.


00:16:51.660 --> 00:16:55.580
Right? It seems just, I think there's going to be some interesting studies done about


00:16:55.580 --> 00:16:59.420
why or how did a language that had kind of been around for 20 years all of a sudden


00:16:59.420 --> 00:17:01.900
really dramatically improve in popularity.


00:17:01.900 --> 00:17:05.820
I have some ideas, but I just think that that's an interesting aspect of what you're talking about here.


00:17:05.820 --> 00:17:11.580
Yeah, it's also the whole aspect of the, you know, the previous like Microsoft and Java


00:17:11.580 --> 00:17:17.900
and sort of, I guess, big money behind those sorts of languages and like the early 2000s pushing them.


00:17:17.900 --> 00:17:24.700
And then I think community and to the point of like developer gave developers what they wanted,


00:17:24.700 --> 00:17:28.140
rather than maybe say enterprise-y languages.


00:17:28.140 --> 00:17:32.060
And then I think there's a whole confluence of other things that happened as well.


00:17:32.060 --> 00:17:38.220
But it is kind of crazy, right? That like one of the top, if not the top languages right now,


00:17:38.220 --> 00:17:40.780
They're almost 30 years old.


00:17:40.780 --> 00:17:43.040
And it's got issues, it's got warts and whatnot,


00:17:43.040 --> 00:17:45.360
but it's a thriving language.


00:17:45.360 --> 00:17:49.660
And without significant big companies behind it,


00:17:49.660 --> 00:17:51.440
that it's competing with companies


00:17:51.440 --> 00:17:52.680
that have thrown millions of dollars


00:17:52.680 --> 00:17:54.660
into development of these things.


00:17:54.660 --> 00:17:55.540
- Yeah, absolutely.


00:17:55.540 --> 00:17:58.820
And Matt and Enos, you two are on the data science side.


00:17:58.820 --> 00:18:01.780
And I think the data science and computational folks


00:18:01.780 --> 00:18:04.420
are the ones that poured the gas on the fire


00:18:04.420 --> 00:18:05.460
and really made it take off.


00:18:05.460 --> 00:18:07.700
And that's not where the growth necessarily completely is,


00:18:07.700 --> 00:18:09.500
but I think that gave it a serious kick.


00:18:09.500 --> 00:18:12.100
- Yeah, no, actually, because I get asked about this a lot,


00:18:12.100 --> 00:18:14.700
like, oh, what do you think made Python the language


00:18:14.700 --> 00:18:16.120
for machine learning data science?


00:18:16.120 --> 00:18:18.580
And my theory is actually that,


00:18:18.580 --> 00:18:20.140
A, Python, of course, was lucky


00:18:20.140 --> 00:18:22.020
that it was in the right place at the right time,


00:18:22.020 --> 00:18:23.380
but I think actually it won


00:18:23.380 --> 00:18:25.060
because it's a general purpose language.


00:18:25.060 --> 00:18:27.580
People can come from other fields of Python


00:18:27.580 --> 00:18:30.020
into machine learning data science, for example.


00:18:30.020 --> 00:18:31.500
Like, what did people do before?


00:18:31.500 --> 00:18:33.380
If you look at kind of these surveys


00:18:33.380 --> 00:18:34.420
of what to use Python for,


00:18:34.420 --> 00:18:35.740
before it's a lot of web stuff.


00:18:35.740 --> 00:18:38.600
You can build kind of anything in Python.


00:18:38.600 --> 00:18:42.100
And I think that's what makes it so appealing and much more appealing than, let's say,


00:18:42.100 --> 00:18:43.100
like an AI language.


00:18:43.100 --> 00:18:47.100
And that's also, in my opinion, why a lot of these attempts at making an AI language


00:18:47.100 --> 00:18:48.100
haven't taken off.


00:18:48.100 --> 00:18:51.140
And people are like, "No, Python's great."


00:18:51.140 --> 00:18:52.140
It's fast enough.


00:18:52.140 --> 00:18:53.380
It's usable enough.


00:18:53.380 --> 00:18:57.660
But I think the general purpose is really what kind of got it over the edge there.


00:18:57.660 --> 00:19:03.380
And a lot of people that I'm teaching or training are people who don't want to be programmers.


00:19:03.380 --> 00:19:05.100
They want to use Python as a tool.


00:19:05.100 --> 00:19:06.540
It's like Excel to them.


00:19:06.540 --> 00:19:07.780
They don't want to be programmers.


00:19:07.780 --> 00:19:12.620
And so something that they can pick up and it just sort of works and they can go to Stack


00:19:12.620 --> 00:19:14.900
Overflow and copy something.


00:19:14.900 --> 00:19:18.900
And as long as they get the indentation right, it sort of works as long as they're using


00:19:18.900 --> 00:19:20.300
the right version or whatever.


00:19:20.300 --> 00:19:21.620
There's no compiling.


00:19:21.620 --> 00:19:22.620
There's no linking.


00:19:22.620 --> 00:19:23.620
Yeah.


00:19:23.620 --> 00:19:24.620
Weirdness.


00:19:24.620 --> 00:19:28.020
And then you have things like Google Colab or whatever, where you have an environment


00:19:28.020 --> 00:19:30.700
that's all set up and you can just sort of go right.


00:19:30.700 --> 00:19:36.040
And so that is really empowering for people who don't want to be programmers, but view


00:19:36.040 --> 00:19:39.900
Python as a tool, a necessary tool that they need to leverage.


00:19:39.900 --> 00:19:45.480
And in addition, there's over a quarter of a million packages on PyPI, right?


00:19:45.480 --> 00:19:48.740
And that's like literally standing on the shoulders of giants.


00:19:48.740 --> 00:19:54.020
You can go there and pick out something that you want to do, and you're a pip install away


00:19:54.020 --> 00:19:55.020
from it.


00:19:55.020 --> 00:19:57.360
And that's super powerful, right?


00:19:57.360 --> 00:20:00.120
You don't have to set up a huge environment.


00:20:00.120 --> 00:20:03.600
Yeah, it just really simplifies life for a lot of these people


00:20:03.600 --> 00:20:08.200
who don't want to be programmers but want to leverage these really cool, bleeding-edge...


00:20:08.200 --> 00:20:12.360
But at the same time, you do have very strong support for C extensions.


00:20:12.360 --> 00:20:16.080
So if you're looking at the top packages people download from PyPy,


00:20:16.080 --> 00:20:20.800
most of them are written in C, Cython, whatever.


00:20:20.800 --> 00:20:22.120
That's what makes them so powerful.


00:20:22.120 --> 00:20:26.600
So we have that while also being able to provide a pretty good developer experience.


00:20:26.600 --> 00:20:27.800
Yeah, absolutely.


00:20:27.800 --> 00:20:31.560
I think it was Seymour Papper who talked about a good language having,


00:20:31.560 --> 00:20:34.440
he was talking about Logo, but it's even more appropriate for Python,


00:20:34.440 --> 00:20:36.680
having low floors and high ceiling.


00:20:36.680 --> 00:20:39.640
That's really easy to get in and do simple stuff,


00:20:39.640 --> 00:20:42.080
but when you want to do complex stuff, you're not limited.


00:20:42.080 --> 00:20:44.720
And so just yesterday I was doing a workshop with people,


00:20:44.720 --> 00:20:47.240
and someone who had just started with Python,


00:20:47.240 --> 00:20:51.560
I said, "Oh, but look what we can do if we extend it several layers."


00:20:51.560 --> 00:20:54.240
And he was amazed how complex you can get


00:20:54.240 --> 00:20:57.120
and how sophisticated you can get just in a few lines of code.


00:20:57.120 --> 00:21:00.720
It's really a testament to the elegance of the design of the language, I think.


00:21:00.720 --> 00:21:07.440
Andre Vlasovsky in the chat makes a good point that many folks say Python is their second favorite language.


00:21:07.440 --> 00:21:10.480
And there's something to be said for that.


00:21:10.480 --> 00:21:12.720
Dierks, sorry, should be there first.


00:21:12.720 --> 00:21:14.400
I'm with you.


00:21:14.400 --> 00:21:19.120
Well, to that point, I mean, it's also been said that Python is the second best language for doing things right.


00:21:19.120 --> 00:21:21.120
So you might have a language that's better.


00:21:21.120 --> 00:21:23.120
That's actually his quote, I got it right.


00:21:23.120 --> 00:21:25.120
or you might have a language that's better for web apps,


00:21:25.120 --> 00:21:28.120
you might have a language that's better for system admin,


00:21:28.120 --> 00:21:33.120
but there's probably not a language that's going to get you all three of those, right?


00:21:33.120 --> 00:21:37.120
And Python is sort of that Venn diagram that gets you in the middle


00:21:37.120 --> 00:21:40.120
and is good enough to do a lot of what you want to do.


00:21:40.120 --> 00:21:43.120
Absolutely. Random by choice, chooses Brian Auken.


00:21:43.120 --> 00:21:46.120
Well, hey, cool. Let me pull up my notes.


00:21:46.120 --> 00:21:48.120
It was interesting, we were talking about Microsoft,


00:21:48.120 --> 00:21:52.120
and I didn't choose this, but I'm going to mention it anyway.


00:21:52.120 --> 00:21:55.560
tons of projects switched over to GitHub Actions in 2020.


00:21:55.560 --> 00:21:57.960
And I mean, because it just


00:21:57.960 --> 00:22:00.520
kind of hit the area right


00:22:00.520 --> 00:22:02.280
like at the end of 2019.


00:22:02.280 --> 00:22:05.480
So I saw a lot of projects migrating to GitHub Actions.


00:22:05.480 --> 00:22:07.480
Anyway, I wanted to talk about packaging,


00:22:07.480 --> 00:22:08.840
which is sort of related.


00:22:08.840 --> 00:22:11.400
There's a couple things, I know I was supposed to pick one.


00:22:11.400 --> 00:22:14.360
The exciting thing happened today, pip20.3


00:22:14.360 --> 00:22:19.000
was released and the dependency resolver is now the default.


00:22:19.000 --> 00:22:23.160
The dependencies resolver is already angry at me for trying to deploy some dependabot changes.


00:22:23.160 --> 00:22:30.040
I'm excited about this and it's bit me already too. I've had requirements.txt files


00:22:30.040 --> 00:22:35.160
that have broken dependencies. So I have to go look at those and see which, you know, I have to pay attention to it.


00:22:35.160 --> 00:22:41.160
So there's a little bit of pain for some people, but it was such a long struggle.


00:22:41.160 --> 00:22:46.520
I look back and the request for a dependency resolver came in 2013.


00:22:46.520 --> 00:22:48.120
So, 7 years later.


00:22:48.120 --> 00:22:50.620
But something magical happened in 2019,


00:22:50.620 --> 00:22:53.020
and that was some money from Mozilla


00:22:53.020 --> 00:22:56.420
came through and they threw some of that money at the dependency resolver.


00:22:56.420 --> 00:22:57.320
That was pretty cool.


00:22:57.320 --> 00:22:59.320
Yeah, that's a big deal that money was


00:22:59.320 --> 00:23:00.920
there's been a couple of these


00:23:00.920 --> 00:23:06.120
experiences where money was given to Python specifically to hire a team to


00:23:06.120 --> 00:23:10.820
improve something. PyPI, the rewrite of pypi.org was one and this is another.


00:23:10.820 --> 00:23:14.220
Yeah, and they rolled it out in several versions. So we had our version early


00:23:14.220 --> 00:23:15.420
early in the year.


00:23:15.420 --> 00:23:19.660
And then around July, we had another version that had a different flag that you could try it out with


00:23:19.660 --> 00:23:23.180
to try to get some of the early adopters to try it out to make sure it's working.


00:23:23.180 --> 00:23:26.940
And then today, it's rolled out for good. And I'm pretty excited about it.


00:23:26.940 --> 00:23:31.340
I kind of want to tie this in with the packaging. I've seen a lot of progress on


00:23:31.340 --> 00:23:38.300
and a lot of adoption of the PyProject.toml, kind of taking over more packages and more uses.


00:23:38.300 --> 00:23:43.660
So we saw flit used to have its own any file now only uses PyProject.toml.


00:23:43.660 --> 00:23:50.300
There's been additions to the metadata definition that hopefully will take hold.


00:23:50.300 --> 00:23:55.700
And even pytest now, you can throw your configuration in a pyproject.toml.


00:23:55.700 --> 00:24:00.020
And I've seen more and more projects saying, getting pressure from their users to say,


00:24:00.020 --> 00:24:04.660
"I don't want another any file. I want to put my settings in the pyproject.toml."


00:24:04.660 --> 00:24:05.940
So that's a good thing.


00:24:05.940 --> 00:24:06.940
Yeah, absolutely.


00:24:06.940 --> 00:24:10.140
You know, a couple of things on that. You talked about two things when you talked about packaging,


00:24:10.140 --> 00:24:15.980
you talked about GitHub. I mean, the fact that now you can actually do some package work within GitHub


00:24:15.980 --> 00:24:22.620
itself, I built a lot of small little tools, not things that I would want to go on PyPI. No, we


00:24:22.620 --> 00:24:27.980
don't need to clutter that up anymore with my garbage. But it's great when I can just say like,


00:24:27.980 --> 00:24:33.420
hey, here's a link. And if you're really, you know, concerned on how to add it, you can just


00:24:33.420 --> 00:24:36.780
hip install but point to this GitHub, you know, and that that works.


00:24:36.780 --> 00:24:41.480
Yeah, and also the stuff about finding security vulnerabilities automatically


00:24:41.480 --> 00:24:43.480
and doing PRs for you that GitHub does


00:24:43.480 --> 00:24:46.380
against like your various package definitions.


00:24:46.380 --> 00:24:47.380
I think that's great as well.


00:24:47.380 --> 00:24:51.380
Hey, has anybody ever put a JavaScript package


00:24:51.380 --> 00:24:53.980
on the GitHub package.json?


00:24:53.980 --> 00:24:55.980
Probably, but not me.


00:24:55.980 --> 00:24:57.980
I have.


00:24:57.980 --> 00:24:59.980
You know this is a Python podcast, right?


00:24:59.980 --> 00:25:06.980
It's Gatsby, so I basically put 500,000 JavaScript packages into my repo.


00:25:06.980 --> 00:25:07.980
Yeah.


00:25:07.980 --> 00:25:11.980
And I'm saying, that is something I appreciate about Python a lot, that like, I actually,


00:25:11.980 --> 00:25:14.980
I never thought I'd say this, but like, I do prefer also that you don't get...


00:25:14.980 --> 00:25:20.980
I can't resolve the Dependabot security mega warnings fast enough.


00:25:20.980 --> 00:25:21.980
It's just incredible.


00:25:21.980 --> 00:25:22.980
I know.


00:25:22.980 --> 00:25:23.980
And I just turn them off, right?


00:25:23.980 --> 00:25:25.980
Like, you just don't.


00:25:25.980 --> 00:25:27.980
That totally fixes it.


00:25:27.980 --> 00:25:30.900
- That is one way to do it, yes.


00:25:30.900 --> 00:25:33.060
- It's like, I've always said that's a problem


00:25:33.060 --> 00:25:34.260
with writing tests, right?


00:25:34.260 --> 00:25:36.700
Like when I started programming, I was all like,


00:25:36.700 --> 00:25:37.940
kind of hate writing these tests


00:25:37.940 --> 00:25:39.940
because they keep pointing out shit that's kind of wrong


00:25:39.940 --> 00:25:41.020
and then I have to fix that.


00:25:41.020 --> 00:25:42.380
But I don't have tests.


00:25:42.380 --> 00:25:44.060
It all works fine and then I'm happy.


00:25:44.060 --> 00:25:45.420
Same with, I don't know, TypeScript.


00:25:45.420 --> 00:25:46.260
- Exactly.


00:25:46.260 --> 00:25:48.100
- Or actually even TypePens to some,


00:25:48.100 --> 00:25:49.980
fuck yeah, I know that's kind of wrong.


00:25:49.980 --> 00:25:51.740
So now I actually have to fix it.


00:25:51.740 --> 00:25:53.060
So, you know, just don't.


00:25:53.060 --> 00:25:56.180
- So we should not let you speak at our high school.


00:25:56.180 --> 00:25:58.180
It's the see no evil, hear no evil.


00:25:58.180 --> 00:26:02.180
I do think that the Dependabot stuff,


00:26:02.180 --> 00:26:04.180
there is something about turning it off.


00:26:04.180 --> 00:26:06.180
It drives me crazy. I really value it.


00:26:06.180 --> 00:26:08.180
But at the same time, the reason I had this conflict


00:26:08.180 --> 00:26:10.180
with the dependency resolver is


00:26:10.180 --> 00:26:12.180
it told me I should, it gave me a PR


00:26:12.180 --> 00:26:14.180
to upgrade one thing, but not one of the dependencies


00:26:14.180 --> 00:26:16.180
for which the newer version was required


00:26:16.180 --> 00:26:18.180
or it would break the resolver.


00:26:18.180 --> 00:26:20.180
It's just like, "Ah, what is this thing doing?"


00:26:20.180 --> 00:26:22.180
Alright, very good, Brian.


00:26:22.180 --> 00:26:24.180
The chooser is all choosing.


00:26:24.180 --> 00:26:26.620
- You need a batch dependency resolver.


00:26:26.620 --> 00:26:27.460
- Yes.


00:26:27.460 --> 00:26:28.620
- One that resolves everything at once


00:26:28.620 --> 00:26:31.660
and then makes sure you've got a working state at the end.


00:26:31.660 --> 00:26:33.980
- Well, the thing is, the PIMP is fine.


00:26:33.980 --> 00:26:34.980
It was right.


00:26:34.980 --> 00:26:37.100
It's that Dependabot, if you have 100,


00:26:37.100 --> 00:26:39.780
not 100, I probably had 20 dependencies in this thing,


00:26:39.780 --> 00:26:42.780
it gives you one PR for each line.


00:26:42.780 --> 00:26:44.900
It sometimes just like lags a day on the other one.


00:26:44.900 --> 00:26:46.020
And if it gets it out of order,


00:26:46.020 --> 00:26:49.820
then the resolver, anyway, long story, frustrating.


00:26:49.820 --> 00:26:52.220
- I mean, to be fair, speaking of dependency resolving


00:26:52.220 --> 00:26:54.300
from the perspective of a library developer.


00:26:54.300 --> 00:26:57.740
It is hard, and you do want to use versioning properly.


00:26:57.740 --> 00:27:00.380
And I do feel like there's this eternal conflict between,


00:27:00.380 --> 00:27:02.940
how do we manage dependencies properly for users,


00:27:02.940 --> 00:27:06.380
and how can we make sure that we can define


00:27:06.380 --> 00:27:08.420
how our packages depend on each other


00:27:08.420 --> 00:27:10.180
in a way that's reasonable?


00:27:10.180 --> 00:27:12.300
Because not-- and use semantic versioning.


00:27:12.300 --> 00:27:14.340
Not everything is a major release.


00:27:14.340 --> 00:27:15.880
Not everything is a breaking release.


00:27:15.880 --> 00:27:17.620
But stuff just depends on each other,


00:27:17.620 --> 00:27:18.700
and you don't want to lock people in.


00:27:18.700 --> 00:27:20.420
There's always this-- the idea is,


00:27:20.420 --> 00:27:23.640
you should be able to pick up your project a year later


00:27:23.640 --> 00:27:25.960
with its requirements and it should run.


00:27:25.960 --> 00:27:28.200
And that's really, really, really hard.


00:27:28.200 --> 00:27:29.200
- Yeah, and if it gets wrong,


00:27:29.200 --> 00:27:30.760
then you probably get a lot of email


00:27:30.760 --> 00:27:32.000
or a lot of GitHub issues.


00:27:32.000 --> 00:27:34.660
- Hey, Brian, on your topic of PyProject TOML,


00:27:34.660 --> 00:27:37.300
what's the latest, greatest, oneditable installs?


00:27:37.300 --> 00:27:40.880
- I don't think it's completely working for all the same.


00:27:40.880 --> 00:27:43.880
So I'd like to be able to say pip install -e,


00:27:43.880 --> 00:27:44.720
is it -e?


00:27:44.720 --> 00:27:46.360
And just a project.


00:27:46.360 --> 00:27:49.880
You can say pip install just a directory,


00:27:49.880 --> 00:27:52.680
no matter what kind of packager it has.


00:27:52.680 --> 00:27:53.960
So that works now.


00:27:53.960 --> 00:27:56.400
So you can, even if you use flit or something,


00:27:56.400 --> 00:27:59.440
you can't do -e, but flit itself, for instance,


00:27:59.440 --> 00:28:02.040
has its own editable install thing.


00:28:02.040 --> 00:28:03.880
And I don't know what poetry does.


00:28:03.880 --> 00:28:04.800
I don't use poetry.


00:28:04.800 --> 00:28:06.280
So it's a different command.


00:28:06.280 --> 00:28:08.640
I'm annoyed that it doesn't just convert it.


00:28:08.640 --> 00:28:09.720
I wish it would plug it in,


00:28:09.720 --> 00:28:13.880
but I think that'll be coming in maybe in 2020 or 20,


00:28:13.880 --> 00:28:16.600
probably not this year, maybe next year, hopefully.


00:28:16.600 --> 00:28:17.680
- Yeah.


00:28:17.680 --> 00:28:19.600
Bad Wolf says in the chats,


00:28:19.600 --> 00:28:22.400
what is a quick solution for getting pip version updated?


00:28:22.400 --> 00:28:23.760
The first thing you create a virtual environment.


00:28:23.760 --> 00:28:25.520
This is another thing that drives me crazy about PIP


00:28:25.520 --> 00:28:28.000
and if that could get changed, I would love it.


00:28:28.000 --> 00:28:29.300
When you create a new virtual environment,


00:28:29.300 --> 00:28:32.760
basically for about a week, you have the latest PIP.


00:28:32.760 --> 00:28:35.720
And then afterwards, soon as you pip install something,


00:28:35.720 --> 00:28:37.320
it says, warning, your pip is out of date.


00:28:37.320 --> 00:28:38.480
Soon as you create a virtual environment,


00:28:38.480 --> 00:28:39.960
it's like, well, why didn't you just update it?


00:28:39.960 --> 00:28:42.400
I want, if you're gonna tell me it's wrong, just fix it.


00:28:42.400 --> 00:28:43.680
- You can use virtual environment.


00:28:43.680 --> 00:28:45.600
Instead of VNV, use virtual environment


00:28:45.600 --> 00:28:47.240
because then you can update your PIP


00:28:47.240 --> 00:28:48.880
and you can update the global one


00:28:48.880 --> 00:28:51.120
and install it in all your environments.


00:28:51.120 --> 00:28:52.120
- Interesting.


00:28:52.120 --> 00:28:53.760
Yeah, I just wrote an alias


00:28:53.760 --> 00:28:55.680
that will create the virtual environment,


00:28:55.680 --> 00:28:56.840
upgrade pip and set up tools,


00:28:56.840 --> 00:28:57.720
and then activate it.


00:28:57.720 --> 00:29:00.160
Other way around, activate it, then upgrade.


00:29:00.160 --> 00:29:02.520
- Yeah, it's funny, I have a shortcut like that too.


00:29:02.520 --> 00:29:03.480
- Yeah, awesome.


00:29:03.480 --> 00:29:05.560
- And then you can also have it install everything you need,


00:29:05.560 --> 00:29:07.080
you know, in the same command,


00:29:07.080 --> 00:29:08.400
automatically create once,


00:29:08.400 --> 00:29:10.520
which I shared my script somewhere,


00:29:10.520 --> 00:29:12.320
I think on Twitter, if anyone's interested.


00:29:12.320 --> 00:29:13.640
- Nice, yeah, mine's just v and v.


00:29:13.640 --> 00:29:15.640
I just type v and v and magic happens.


00:29:15.640 --> 00:29:16.720
I don't think of it anymore.


00:29:16.720 --> 00:29:19.000
- Well, when I finally switched to virtual Linv,


00:29:19.000 --> 00:29:21.600
it's like, I make so many virtual environments,


00:29:21.600 --> 00:29:23.200
it's so much faster.


00:29:23.200 --> 00:29:25.580
And just that, even just a few seconds,


00:29:25.580 --> 00:29:27.840
several times a day, it's worth it for me.


00:29:27.840 --> 00:29:29.520
So, I like it.


00:29:29.520 --> 00:29:30.340
- Awesome.


00:29:30.340 --> 00:29:31.320
All right, I've chosen next,


00:29:31.320 --> 00:29:33.800
and there's a dependency in the chooser,


00:29:33.800 --> 00:29:35.080
so it's worked correctly.


00:29:35.080 --> 00:29:36.160
So it's chosen me actually,


00:29:36.160 --> 00:29:37.480
to talk about the next thing.


00:29:37.480 --> 00:29:39.400
And Paul touched on this,


00:29:39.400 --> 00:29:41.200
but I think this is a really important one.


00:29:41.200 --> 00:29:45.800
Like this is the year that Python 2 actually went away.


00:29:45.800 --> 00:29:50.120
And it's, I just spent so long having to justify


00:29:50.120 --> 00:29:52.080
why Python 3 is the right thing,


00:29:52.080 --> 00:29:54.560
or more often teaching people,


00:29:54.560 --> 00:29:57.100
no, no, no, you can't type Python, please don't do that.


00:29:57.100 --> 00:29:58.440
Unless you're on Windows, then you have to do that.


00:29:58.440 --> 00:30:00.380
But if you're not on Windows, then you better not do that.


00:30:00.380 --> 00:30:02.680
So you gotta, you know, it's just like this drag,


00:30:02.680 --> 00:30:05.920
it always felt like things like Django or Flask


00:30:05.920 --> 00:30:07.820
and whatnot were being held back.


00:30:07.820 --> 00:30:09.760
All these libraries were being held back


00:30:09.760 --> 00:30:11.560
by Python 2 support.


00:30:11.560 --> 00:30:13.300
And last year they started dropping it,


00:30:13.300 --> 00:30:15.880
and then Python 2 itself actually went away.


00:30:15.880 --> 00:30:18.780
Brian and I tried to create the right nomenclature


00:30:18.780 --> 00:30:19.840
around this, I guess.


00:30:19.840 --> 00:30:22.500
I was calling it legacy Python and modern Python


00:30:22.500 --> 00:30:24.960
rather than two and three, and that was fun.


00:30:24.960 --> 00:30:26.740
People started to quote it and use that terminology,


00:30:26.740 --> 00:30:27.580
which was kind of cool.


00:30:27.580 --> 00:30:28.560
I don't know how well it worked,


00:30:28.560 --> 00:30:31.360
but it's really nice that Python 2


00:30:31.360 --> 00:30:33.200
is finally officially gone.


00:30:33.200 --> 00:30:34.860
And I thought there'd be a bunch of people


00:30:34.860 --> 00:30:36.720
would freak out for Python


00:30:36.720 --> 00:30:39.400
and start creating alternate old versions.


00:30:39.400 --> 00:30:42.320
And I haven't, besides some commercial support stuff,


00:30:42.320 --> 00:30:43.400
I really seen that happening.


00:30:43.400 --> 00:30:45.540
So it's pretty interesting, I think.


00:30:45.540 --> 00:30:48.240
- Yeah, I think we should have brought like horns and stuff


00:30:48.240 --> 00:30:50.740
and like, you know, waving.


00:30:50.740 --> 00:30:53.840
- Some of those pop, like bottle-looking


00:30:53.840 --> 00:30:54.680
- Yeah, yeah.


00:30:54.680 --> 00:30:56.620
- stuff on New Year's, absolutely.


00:30:56.620 --> 00:30:58.080
Yeah, I mean, we really didn't get the party


00:30:58.080 --> 00:30:59.040
we were hoping for, right?


00:30:59.040 --> 00:31:01.920
Like PyCon was supposed to be this big send off


00:31:01.920 --> 00:31:05.400
for Python 2, but no, there was not so much of a PyCon.


00:31:05.400 --> 00:31:07.560
Not really, I mean, there's online, but it wasn't the same.


00:31:07.560 --> 00:31:10.400
- Now we just gotta wait until we have all of the articles


00:31:10.400 --> 00:31:15.400
about the companies that finally decided to switch


00:31:15.400 --> 00:31:18.600
and the steps that they took


00:31:18.600 --> 00:31:20.600
that they avoided for the last decade


00:31:20.600 --> 00:31:22.600
to make this a reality.


00:31:22.600 --> 00:31:24.880
One of my biggest corporate training clients,


00:31:24.880 --> 00:31:27.440
they have been using Python 2 for years and years


00:31:27.440 --> 00:31:30.560
and they do all sorts of testing of hardware using Windows


00:31:30.560 --> 00:31:35.160
with all sorts of custom C extensions.


00:31:35.160 --> 00:31:37.640
So I've been saying to them for years,


00:31:37.640 --> 00:31:39.780
every time I do training, "Look, you should really think


00:31:36.400 --> 00:31:40.320
Python 3 and you should realize you should move in that direction." And their attitude was basically,


00:31:40.320 --> 00:31:45.120
"No, no, no. We've got so much invested in what we've done. We're not really going to upgrade."


00:31:45.120 --> 00:31:49.760
And finally, about, I guess, a year ago, they realized, "Huh, we're going to be stuck on our


00:31:49.760 --> 00:31:54.880
own maintaining everything, including all these packages of the API. Maybe it's time to start


00:31:54.880 --> 00:31:59.120
talking about it." And so I'm actually doing some training for them now. And I asked a group,


00:31:59.120 --> 00:32:03.600
"Should we do Python 2 or should we do Python 3?" And the majority actually said, "It's okay


00:32:03.600 --> 00:32:05.760
can use three because our group has switched.


00:32:05.760 --> 00:32:09.200
So if they are moving, it's clear that even sort of the


00:32:09.200 --> 00:32:12.640
dragiest of the draggiest companies are doing it.


00:32:12.640 --> 00:32:15.240
- Yeah, I was just gonna echo what Ruben said that,


00:32:15.240 --> 00:32:18.360
you know, when you have success and you get enterprises


00:32:18.360 --> 00:32:22.120
using your stuff and enterprises are slow to move.


00:32:22.120 --> 00:32:25.800
And I don't wanna like criticize Python three too much,


00:32:25.800 --> 00:32:28.240
but I think if they would have put f-strings in 3.0,


00:32:28.240 --> 00:32:29.680
then they wouldn't have had this problem.


00:32:29.680 --> 00:32:32.080
But because they waited to put f-strings in,


00:32:32.080 --> 00:32:33.640
then they had people dragging their feet.


00:32:33.640 --> 00:32:37.240
It's so weird how that drag, that was one of the most popular features for sure.


00:32:37.240 --> 00:32:40.520
So you're saying the walrus operator was what finally did it?


00:32:40.520 --> 00:32:42.520
[laughter]


00:32:42.520 --> 00:32:44.520
I'm not gonna go there.


00:32:44.520 --> 00:32:46.920
You know, I was not super excited about the walrus operator.


00:32:46.920 --> 00:32:48.920
I've found myself using it all the time, I like it.


00:32:48.920 --> 00:32:49.680
It's neat.


00:32:49.680 --> 00:32:51.680
Oh, it's cool, I think it definitely solves a problem.


00:32:51.680 --> 00:32:54.040
I just, wait, that's 3.8, right? The walrus?


00:32:54.040 --> 00:32:55.280
I believe so.


00:32:55.280 --> 00:32:57.920
Yeah, I'm still, I mean, I feel like I'm now back at like,


00:32:57.920 --> 00:33:01.720
okay, we finally dropped support for 2 from all of our libraries that we're developing,


00:33:01.720 --> 00:33:03.840
and now we're on 3.6, because--


00:33:03.840 --> 00:33:05.440
- Yeah, yeah. - No, no, no.


00:33:05.440 --> 00:33:09.120
3.9 is current, 3.8 is now the new legacy Python.


00:33:09.120 --> 00:33:11.360
(laughing)


00:33:11.360 --> 00:33:15.040
- Ines, how was it for you, like, as a library developer?


00:33:15.040 --> 00:33:16.280
- Yeah, I mean, for a lot,


00:33:16.280 --> 00:33:19.560
I feel like I only really got to use Python 3 this year.


00:33:19.560 --> 00:33:21.680
I mean, of course, I've been using it privately


00:33:21.680 --> 00:33:23.560
for much longer, but I would say,


00:33:23.560 --> 00:33:25.640
in mid this year, I was finally like, cool,


00:33:25.640 --> 00:33:27.920
I just use type hints, I use fstrings


00:33:27.920 --> 00:33:29.760
across all of our projects, because before,


00:33:29.760 --> 00:33:31.760
our dependencies had to support people on two.


00:33:31.760 --> 00:33:33.400
And our old version of spaCy had to support


00:33:33.400 --> 00:33:34.600
people who wanted to use two.


00:33:34.600 --> 00:33:36.720
So that kind of becomes the baseline.


00:33:36.720 --> 00:33:38.880
And now we've moved that up to 3.6.


00:33:38.880 --> 00:33:41.560
And so until 3.6 is dead,


00:33:41.560 --> 00:33:42.960
there's still always new features


00:33:42.960 --> 00:33:45.040
that we can't just ship.


00:33:45.040 --> 00:33:47.920
- Yeah, but that step from two to 3.6


00:33:47.920 --> 00:33:51.120
is gonna be way bigger than 3.6 to seven, right?


00:33:51.120 --> 00:33:52.400
That's a very small step,


00:33:52.400 --> 00:33:54.800
the 3.6 to 3.7 or 3.7 to 3.8.


00:33:54.800 --> 00:33:56.120
So you've done the big step.


00:33:56.120 --> 00:33:58.800
- Yeah, and some of the new features,


00:33:58.800 --> 00:34:02.300
It's like, yeah, whatever I can, you know, live without writing those in my code base


00:34:02.300 --> 00:34:04.280
and people can still use them in their code bases.


00:34:04.280 --> 00:34:08.960
But yeah, all the new versions we've got to publish like spacey three that's coming soon.


00:34:08.960 --> 00:34:13.320
We'll use Python three in the code base and we'll only work with Python three.


00:34:13.320 --> 00:34:18.040
We want distribute wheels for Python two, which we might have not even done for a while


00:34:18.040 --> 00:34:22.640
because it's really, really a pain for some of our more abstract and complex dependencies


00:34:22.640 --> 00:34:23.640
that we're also building.


00:34:23.640 --> 00:34:25.280
So far people haven't really complained.


00:34:25.280 --> 00:34:28.360
Like I was, I was expecting people to complain a bit more, but like, no.


00:34:28.360 --> 00:34:31.440
- Well, if you look at the PSF JetBrains survey,


00:34:31.440 --> 00:34:33.760
the data science folks that side of the house


00:34:33.760 --> 00:34:36.420
have definitely moved to Python 3 quicker and bigger


00:34:36.420 --> 00:34:37.960
than the web team.


00:34:37.960 --> 00:34:40.120
- I'm actually surprised how quickly people move up.


00:34:40.120 --> 00:34:42.400
Like, you know, I don't know, even after 3.9 came out,


00:34:42.400 --> 00:34:43.680
we've had people questing like,


00:34:43.680 --> 00:34:47.800
"Oh my God, why does your annotation tool not work on 3.9?


00:34:47.800 --> 00:34:48.840
"Or why does this not work?"


00:34:48.840 --> 00:34:51.040
And it's like, "Nothing works on 3.9."


00:34:51.040 --> 00:34:53.900
Or it's like, "LCI doesn't do 3.9 yet.


00:34:53.900 --> 00:34:55.480
"Like, I can't build anything.


00:34:55.480 --> 00:34:57.620
"None of our other packages run.


00:34:57.620 --> 00:34:58.420
Like, sorry.


00:34:58.420 --> 00:35:03.080
I felt like a big person developer for like the first time ever when I actually


00:35:03.080 --> 00:35:07.760
got my first issue with running the latest and greatest Python, it was


00:35:07.760 --> 00:35:10.740
because I was running GCP and I kept running into an error, running into an


00:35:10.740 --> 00:35:11.780
error and I was like, you know what?


00:35:11.780 --> 00:35:13.180
It used to work.


00:35:13.180 --> 00:35:15.880
Let me just try it on three, eight, five, and then sure enough, it worked


00:35:15.880 --> 00:35:17.760
perfectly and I was like, I've done it.


00:35:17.760 --> 00:35:19.280
I've reached the new achievement.


00:35:19.280 --> 00:35:21.040
Nice.


00:35:21.040 --> 00:35:21.160
Yeah.


00:35:21.160 --> 00:35:24.060
I've taken down the talk by then training website by shipping the


00:35:24.060 --> 00:35:26.060
the walrus operator accidentally.


00:35:26.060 --> 00:35:28.060
At the time, Ubuntu didn't support it.


00:35:28.060 --> 00:35:30.060
A quick question or comment from


00:35:30.060 --> 00:35:32.060
Zach in the comments


00:35:32.060 --> 00:35:34.060
about when we can actually


00:35:34.060 --> 00:35:36.060
say legacy Python's gone when the OS vendors


00:35:36.060 --> 00:35:38.060
stop supporting it. Well, I think Python


00:35:38.060 --> 00:35:40.060
2 is no longer shipping with the new Mac OS


00:35:40.060 --> 00:35:42.060
and Canonical is starting to make


00:35:42.060 --> 00:35:44.060
Python 3.8 the default.


00:35:44.060 --> 00:35:46.060
So I think we're getting there.


00:35:46.060 --> 00:35:48.060
I thought they were removing Python in general


00:35:48.060 --> 00:35:50.060
from Mac OS and just making you


00:35:50.060 --> 00:35:52.060
install it yourself.


00:35:52.060 --> 00:35:54.500
I think there might be some internal system thing.


00:35:54.500 --> 00:35:56.900
I saw people talking about the system Python 3.8,


00:35:56.900 --> 00:35:59.200
even though I agree I heard the same thing you said.


00:35:59.200 --> 00:36:00.040
But I don't have a fresh install.


00:36:00.040 --> 00:36:02.580
- I think it's not actually such a bad idea.


00:36:02.580 --> 00:36:04.520
Like I think, you know, for most things you do,


00:36:04.520 --> 00:36:06.440
you have to install some extra stuff anyway.


00:36:06.440 --> 00:36:09.420
So making it a more explicit install


00:36:09.420 --> 00:36:12.100
from a user's perspective, I think, isn't even so terrible.


00:36:12.100 --> 00:36:12.940
- Yeah.


00:36:12.940 --> 00:36:14.420
- Because otherwise, you know, if you just type in Python,


00:36:14.420 --> 00:36:17.380
you just run into all kinds of potential issues anyway.


00:36:17.380 --> 00:36:18.460
So yeah.


00:36:18.460 --> 00:36:20.060
- Yeah, especially when it's super out of date.


00:36:20.060 --> 00:36:20.900
All right.


00:36:20.900 --> 00:36:23.060
I end up telling people in my courses,


00:36:23.060 --> 00:36:24.560
oh, you're using a Mac?


00:36:24.560 --> 00:36:26.320
Yeah, ignore the Python that's installed.


00:36:26.320 --> 00:36:28.020
I know this is a Python course.


00:36:28.020 --> 00:36:29.260
Ignore the ones installed.


00:36:29.260 --> 00:36:31.260
And here are ways that you can install it on your own


00:36:31.260 --> 00:36:32.600
so it'll be up to date.


00:36:32.600 --> 00:36:34.460
And here's how you can make sure it doesn't conflict


00:36:34.460 --> 00:36:35.660
with what's already installed.


00:36:35.660 --> 00:36:37.580
So maybe removing it all together


00:36:37.580 --> 00:36:39.020
is not such a terrible thing.


00:36:39.020 --> 00:36:39.980
- Yeah, for sure.


00:36:39.980 --> 00:36:41.300
Homebrew, homebrew.


00:36:41.300 --> 00:36:44.260
All right, Ines, the voting system has chosen you next.


00:36:44.260 --> 00:36:45.660
- Unmute myself and look at my notes.


00:36:45.660 --> 00:36:48.580
Yeah, so I think I've already mentioned the topic


00:36:48.580 --> 00:36:52.200
I was going to talk about about five times so far,


00:36:52.200 --> 00:36:54.880
but yeah, I think in 2020,


00:36:54.880 --> 00:36:58.020
we really saw the ecosystem around type hints,


00:36:58.020 --> 00:37:01.020
static type checking, types in general mature


00:37:01.020 --> 00:37:02.440
and like really be widely adopted.


00:37:02.440 --> 00:37:03.860
And I do think a part of that


00:37:03.860 --> 00:37:06.540
is the more widespread adoption of Python 3


00:37:06.540 --> 00:37:08.540
because before that, to be fair,


00:37:08.540 --> 00:37:11.140
you could use type hints before Python 3


00:37:11.140 --> 00:37:12.220
just for completeness,


00:37:12.220 --> 00:37:14.060
but like that's not what people did


00:37:14.060 --> 00:37:15.260
and it looked very, very different.


00:37:15.260 --> 00:37:17.840
So yeah, now, and actually even I couldn't really


00:37:17.840 --> 00:37:20.560
Imagine writing code without type-ins anymore.


00:37:20.560 --> 00:37:23.800
Like if I write something and I'm not adding any types,


00:37:23.800 --> 00:37:25.920
it feels kind of naked and it feels kind of wrong


00:37:25.920 --> 00:37:27.660
and I actually feel like, oh my God,


00:37:27.660 --> 00:37:30.000
I might be missing some issues here,


00:37:30.000 --> 00:37:31.240
maybe I'm not catching some bugs.


00:37:31.240 --> 00:37:33.680
So yeah, which is quite surprising,


00:37:33.680 --> 00:37:36.200
but it says something considering I only just recently


00:37:36.200 --> 00:37:39.240
was able to really embrace all the new Python 3 stuff.


00:37:39.240 --> 00:37:41.240
- Yeah, that's a pretty quick transition.


00:37:41.240 --> 00:37:42.800
Find it, yeah.


00:37:42.800 --> 00:37:43.840
I depend on this thing now


00:37:43.840 --> 00:37:46.080
that previously you had to stay away from.


00:37:46.080 --> 00:37:51.080
Yeah, and I have static type checking enabled in Visual Studio Code.


00:37:51.080 --> 00:37:54.080
It underlines things if you pass in the wrong types.


00:37:54.080 --> 00:37:58.580
It gives you all these nice autocomplete prompts or previews if you want to.


00:37:58.580 --> 00:38:02.080
That's also something I've gotten really, really used to over a really short period of time.


00:38:02.080 --> 00:38:05.580
What about you, everyone? Do you use type pins?


00:38:05.580 --> 00:38:07.580
Can we have an opinion, Paul?


00:38:07.580 --> 00:38:10.080
Just raise the hand and then we summarize it for people who just--


00:38:10.080 --> 00:38:14.580
- Everybody. - I might have to do it slowly.


00:38:14.580 --> 00:38:19.580
I'm slowly starting to use them more and more as I see the advantages.


00:38:19.580 --> 00:38:21.940
And in part, as I mentioned before, we started recording, like,


00:38:21.940 --> 00:38:24.980
because my students are encouraging me to use it more and more because they want it,


00:38:24.980 --> 00:38:28.100
because they come from languages where there's no such thing as optional type hints.


00:38:28.100 --> 00:38:30.700
It's, you must do this or the program does not run.


00:38:30.700 --> 00:38:33.060
So what do you know? They can actually be useful.


00:38:33.060 --> 00:38:38.620
Yeah, I think that's one of the biggest benefits that I like about the type hinting system is that it's optional.


00:38:38.620 --> 00:38:40.100
So you could choose to use it.


00:38:40.100 --> 00:38:42.540
And then if you don't need it, and we could just take it out.


00:38:42.540 --> 00:38:45.700
Because for me, I believe in being a lazy developer.


00:38:45.700 --> 00:38:50.260
And stuff like type hints just make certain things a little bit more discoverable.


00:38:50.260 --> 00:38:54.580
And kind of like what we were saying before, it just improves your tooling


00:38:54.580 --> 00:38:57.460
to be able to discover more of your code for you.


00:38:57.460 --> 00:39:02.060
I like to use it for APIs, especially for package interfaces,


00:39:02.060 --> 00:39:08.340
so that people using a package can use the editor tools and stuff like that for the hints.


00:39:08.340 --> 00:39:10.700
And also just wherever it makes sense.


00:39:10.700 --> 00:39:15.260
I mean, if it looks like it actually distracts from readability,


00:39:15.260 --> 00:39:18.060
then I take it out. Readability is above all for me.


00:39:18.060 --> 00:39:20.300
So if it's usable and readable, it helps.


00:39:20.300 --> 00:39:23.820
I mean, I wouldn't advocate any, like, I don't know,


00:39:23.820 --> 00:39:27.820
if you have a function that takes several arguments and then returns, like, a callback


00:39:27.820 --> 00:39:30.860
that gives you this kind of typing, I wouldn't advocate for that necessarily.


00:39:30.860 --> 00:39:31.740
But yeah.


00:39:31.740 --> 00:39:35.340
And I feel like they're working on some of that confusion as well,


00:39:35.340 --> 00:39:36.940
and some of that, like, clutter and bloat.


00:39:36.940 --> 00:39:39.900
I mean, that was, I talk about that 3.9 story.


00:39:39.900 --> 00:39:44.700
It was because I was tired of typing, typing dot list or typing dot dict.


00:39:44.700 --> 00:39:46.700
And it was like, Oh, you mean I can just do this now?


00:39:46.700 --> 00:39:51.980
Like, and then sure enough, you know, stuff crashes and it's like, well, guess not maybe later, but


00:39:51.980 --> 00:39:59.500
it's great that for people who are looking at Python as a tool that they're using,


00:39:59.500 --> 00:40:04.940
not the language that they're writing on a day to day, but just flat out the tool that they're using.


00:40:04.940 --> 00:40:09.820
They don't know what we're talking about half the time, but they can kind of look at something


00:40:09.820 --> 00:40:12.220
and go, "STR, hmm.


00:40:12.220 --> 00:40:15.300
Someone mentioned a string that one time. Maybe that's what that is."


00:40:15.300 --> 00:40:18.180
You know, it's a lot easier than just looking at the code


00:40:18.180 --> 00:40:19.420
and trying to figure it out.


00:40:19.420 --> 00:40:22.020
Yeah, and speaking of tools, I think type-ins,


00:40:22.020 --> 00:40:23.780
they're not only that syntax feature.


00:40:23.780 --> 00:40:27.540
They've really enabled this whole new ecosystem of tools


00:40:27.540 --> 00:40:31.980
that use type-ins to accomplish something else or in a creative way.


00:40:31.980 --> 00:40:35.260
And I think many of them have been covered on this podcast previously.


00:40:35.260 --> 00:40:38.180
For example, there's Pydantic, which uses type-ins


00:40:38.260 --> 00:40:41.780
in actually one of my favorite creative ways for data validation, settings management.


00:40:41.780 --> 00:40:44.660
It's actually a library we've adopted across a lot of our projects.


00:40:44.660 --> 00:40:48.020
You just quickly, you know, you define this interface. Here's what I expect.


00:40:48.020 --> 00:40:51.220
You get like, you know, kind of like JSON schema just with type hints.


00:40:51.220 --> 00:40:54.660
- Identic is so wonderful. Yeah, you're right. It's really nice.


00:40:54.660 --> 00:40:59.940
- Yeah, I would say it's one of my favorite recent discoveries in terms of Python developer tools.


00:40:59.940 --> 00:41:04.660
And then of course, there's FastAPI and Typer developed by my colleague Sebastian,


00:41:04.660 --> 00:41:08.260
which probably has been discussed a lot on this and related podcasts.


00:41:08.260 --> 00:41:11.140
Yeah, he was on the show long ago, like 10 shows ago or so.


00:41:11.140 --> 00:41:13.620
And yeah, that's a fantastic framework, too.


00:41:13.620 --> 00:41:19.300
Yeah. So that's, I think it's also partly what really popular, popular, popularized,


00:41:19.300 --> 00:41:27.940
great word, type hints in as a bot, I don't know, as a tool for, yeah, developing applications and


00:41:27.940 --> 00:41:33.620
so on, I think also, also actually Pydantic. And yeah, we've also in 2020, I think, released our


00:41:33.620 --> 00:41:38.580
So machine learning library think, which kind of functions more like an interface layer


00:41:38.580 --> 00:41:43.020
and lets you write neural networks, combine layers written in different frameworks like


00:41:43.020 --> 00:41:48.500
PyTorch, TensorFlow, and we've included custom types for arrays and all that stuff that passes


00:41:48.500 --> 00:41:49.500
through the network.


00:41:49.500 --> 00:41:53.340
Because if you're doing machine learning, a lot of it is really abstract.


00:41:53.340 --> 00:41:58.500
You have this multidimensional array as in 300 dimensions, and then that goes through,


00:41:58.500 --> 00:42:01.140
and then it gets transformed, and then that goes all the way back.


00:42:01.140 --> 00:42:02.940
And at the end, you're hoping to get something out.


00:42:02.940 --> 00:42:04.100
And there's a lot that can go wrong.


00:42:04.100 --> 00:42:07.260
And it's not even about like, "Oh, how experienced are you as a programmer?"


00:42:07.260 --> 00:42:09.300
It's like, that shit's just abstract.


00:42:09.300 --> 00:42:14.180
And we can make it a bit less abstract, even by just providing custom types that you can


00:42:14.180 --> 00:42:15.560
declare.


00:42:15.560 --> 00:42:19.140
So it's easier to see what goes in, what comes out.


00:42:19.140 --> 00:42:20.900
Do these layers fit together?


00:42:20.900 --> 00:42:21.900
Do they not?


00:42:21.900 --> 00:42:26.420
Because otherwise, yeah, you easily end up with these very hard to debug NumPy errors


00:42:26.420 --> 00:42:31.140
triggered by like five layers deep that tell you that you can't broadcast that shape into


00:42:31.140 --> 00:42:32.140
this other shape.


00:42:32.140 --> 00:42:33.980
and you're like, yeah, that's gonna be fun.


00:42:33.980 --> 00:42:35.900
- This doesn't help me, I have no idea.


00:42:35.900 --> 00:42:38.380
Yeah, I think there's also things like mypyC,


00:42:38.380 --> 00:42:41.340
which will compile stuff that has types,


00:42:41.340 --> 00:42:44.140
and there's Cython, which will use the new Python type hints


00:42:44.140 --> 00:42:45.860
to compile to much faster code.


00:42:45.860 --> 00:42:47.700
So there's a lot of neat things coming out of it.


00:42:47.700 --> 00:42:50.060
- Yeah, and I think especially also for abstract stuff


00:42:50.060 --> 00:42:52.100
like machine learning, there are lots of use cases


00:42:52.100 --> 00:42:54.980
that web type hints and type-based validation


00:42:54.980 --> 00:42:56.700
is really promising, because we can also take something


00:42:56.700 --> 00:42:59.480
a developer already knows, like typing your functions,


00:42:59.480 --> 00:43:01.520
typing your layers, and it will just work


00:43:01.520 --> 00:43:03.440
do some extra stuff if you wanted to.


00:43:03.440 --> 00:43:06.160
Watching mypy evolve is really cool.


00:43:06.160 --> 00:43:12.200
And for Think, we've briefly dabbled in my custom mypy plugins for a bit.


00:43:12.200 --> 00:43:16.840
Like we have a plugin that checks if two layers you're chaining together


00:43:16.840 --> 00:43:18.200
return the correct types.


00:43:18.200 --> 00:43:20.920
Like, you know, if you have one layer that returns a two dimensional array of


00:43:20.920 --> 00:43:25.480
floats and the other layer expects a two dimensional array of integers or four


00:43:25.480 --> 00:43:29.800
dimensions, whatever, you can actually see that underlined in your editor done by


00:43:29.800 --> 00:43:31.940
by mypy as you type the code.


00:43:31.940 --> 00:43:35.860
So you can prevent a bug before you even make it,


00:43:35.860 --> 00:43:37.180
like type it and introduce it.


00:43:37.180 --> 00:43:38.020
So that's cool.


00:43:38.020 --> 00:43:40.580
And I think that's all very actively developing.


00:43:40.580 --> 00:43:43.340
So I think there's so much potential for custom plugins.


00:43:43.340 --> 00:43:45.680
Like imagine more libraries just coming


00:43:45.680 --> 00:43:48.540
with their own mypy plugins that help the developers


00:43:48.540 --> 00:43:49.780
use those libraries better.


00:43:49.780 --> 00:43:51.580
I think, yeah, that's all super cool.


00:43:51.580 --> 00:43:53.940
- Yeah, it's early days and there's a bunch of great tools.


00:43:53.940 --> 00:43:56.020
Cecil, let me round this out with,


00:43:56.020 --> 00:43:57.140
coming back to one thing you said.


00:43:57.140 --> 00:43:59.220
You talked about how it was optional.


00:43:59.220 --> 00:44:02.300
- The closest analogy that I think we have to this


00:44:02.300 --> 00:44:04.580
in other languages has got to be TypeScript,


00:44:04.580 --> 00:44:06.180
which is like JavaScript plus types


00:44:06.180 --> 00:44:07.820
and a little transpiling thing.


00:44:07.820 --> 00:44:10.160
And it's all cool, but all my interactions with TypeScript


00:44:10.160 --> 00:44:11.800
are like, oh, you haven't declared this thing right.


00:44:11.800 --> 00:44:16.500
This thing's, it's like, it's as picky as C++ or C# or Java,


00:44:16.500 --> 00:44:20.440
but it's not as like built from the start.


00:44:20.440 --> 00:44:22.720
Like the tools aren't necessarily all there


00:44:22.720 --> 00:44:23.980
to make that fit together.


00:44:23.980 --> 00:44:26.500
So I always feel like I'm kind of stumbling over the things.


00:44:26.500 --> 00:44:28.300
Like 80% of the time it's helped me


00:44:28.300 --> 00:44:30.100
20% of the time that frustrates me.


00:44:30.100 --> 00:44:32.760
Whereas like here, you can just kind of, you can leave it off, take it or


00:44:32.760 --> 00:44:34.060
leave it if it's good, not good.


00:44:34.060 --> 00:44:34.620
Yeah.


00:44:34.620 --> 00:44:35.060
Yeah.


00:44:35.060 --> 00:44:39.180
I think TypeScript definitely helped with some learnings about how developers


00:44:39.180 --> 00:44:41.100
want to interact with typing.


00:44:41.100 --> 00:44:44.980
I think the thing with TypeScript is it is very, like there's a lot of features


00:44:44.980 --> 00:44:49.320
in there and it's very customizable, but you know, it's kind of like you have


00:44:49.320 --> 00:44:50.560
like a nail, right?


00:44:50.560 --> 00:44:51.700
And I gave you a jackhammer.


00:44:51.700 --> 00:44:53.140
You really don't need the jackhammer.


00:44:53.140 --> 00:44:54.540
Exactly.


00:44:54.540 --> 00:44:56.980
So finishing hammer would be nice.


00:44:56.980 --> 00:44:57.460
Yeah.


00:44:57.620 --> 00:44:59.620
There's a lot of different things that you can customize.


00:44:59.620 --> 00:45:00.620
And some people need that.


00:45:00.620 --> 00:45:03.620
But I think for 90% of folks,


00:45:03.620 --> 00:45:05.620
I'm making up that number, that's not a real number.


00:45:05.620 --> 00:45:06.620
But for a lot of folks,


00:45:06.620 --> 00:45:11.620
you probably don't need a lot of those knobs to turn and options to set.


00:45:11.620 --> 00:45:12.620
Yeah, absolutely.


00:45:12.620 --> 00:45:14.620
There was like a two-year period with TypeScript


00:45:14.620 --> 00:45:16.620
where I'd read the roadmap.


00:45:16.620 --> 00:45:18.620
They do a great job of running their project.


00:45:18.620 --> 00:45:19.620
Great job.


00:45:19.620 --> 00:45:23.620
But they put a feature in using words I didn't know from type theory.


00:45:23.620 --> 00:45:25.620
And my answer was,


00:45:25.620 --> 00:45:30.620
Oh, that's for Angular. Oh, that's for Angular. Oh, Angular is the only one having that problem.


00:45:30.620 --> 00:45:33.620
There's some serious machinery.


00:45:33.620 --> 00:45:38.620
Yeah, there is. All right. Final thought on this from the chat is Eric O'Shaughnessy says,


00:45:38.620 --> 00:45:45.620
I love how typing solidifies the author's intent. Yeah. All right. Let's have the chooser choose again.


00:45:45.620 --> 00:45:46.620
Jay.


00:45:46.620 --> 00:45:52.620
All right. So I totally didn't peanut butter on this. But as y'all were talking, like, I just got some wonderful ideas.


00:45:52.620 --> 00:45:57.620
And I immediately started thinking about just the doubling down of some of the technologies


00:45:57.620 --> 00:46:02.820
that we've seen kind of pop up over the last couple of years, but then truly evolve.


00:46:02.820 --> 00:46:07.100
And like one of the biggest examples of that, and I know I'm like five years, day, late,


00:46:07.100 --> 00:46:12.420
dollar short here, but like Jupyter, anything Jupyter notebook related, like it's not just


00:46:12.420 --> 00:46:18.820
for the solo data scientist anymore, like collaborative Jupyter notebooks, like to me


00:46:18.820 --> 00:46:23.780
that I know people that just have dreams about that. And they're like the best dreams ever.


00:46:23.780 --> 00:46:30.820
And, you know, I know, Mike, you just did a podcast episode a few weeks back about that.


00:46:30.820 --> 00:46:34.580
And we were talking about it on Python Bytes a little bit. They're like, it's not just one


00:46:34.580 --> 00:46:39.380
option anymore. It's, you know, there's Coke out there's PyBinder, there's DeepNote. Apparently,


00:46:39.380 --> 00:46:41.540
I'm a DeepNote influencer, and I didn't even know it.


00:46:41.540 --> 00:46:44.100
But that's awesome. You are bringing it up again.


00:46:46.100 --> 00:46:52.900
But not just in like Jupyter land, we have like crazy ideas, like what if we could do Python on


00:46:52.900 --> 00:46:58.420
the front end with anvil? And like now anvil is saying like, hey, we're going to open source some


00:46:58.420 --> 00:47:03.860
of our server technology so that you can take this technology and do it yourself. And I think that


00:47:03.860 --> 00:47:08.260
that's just like with type hints, we're coming up with these ideas, and we're taking them a step


00:47:08.260 --> 00:47:14.820
further. I think that this is what, in my opinion, has kept me in the Python ecosystem as long as it


00:47:14.820 --> 00:47:21.540
has is because I'm constantly learning about like brand new ways to do a thing


00:47:21.540 --> 00:47:24.740
in Python. And I have to talk about this because I told people in my Slack


00:47:24.740 --> 00:47:28.140
channel that I would, but like we just thought, you know, at Elastic, we just


00:47:28.140 --> 00:47:31.740
launched a brand new tool called Elon and it's in beta. And the whole idea is


00:47:31.740 --> 00:47:35.940
it's like a panda's data frame, but instead of storing all of your data in


00:47:35.940 --> 00:47:38.780
memory, you can store it in an Elasticsearch, you know, data store.


00:47:38.780 --> 00:47:39.940
Oh, that's an interesting idea.


00:47:39.980 --> 00:47:44.860
So now instead of being limited to what your RAM can hold,


00:47:44.860 --> 00:47:47.740
you're limited to how much space you got.


00:47:47.740 --> 00:47:50.540
And you can run queries on it,


00:47:50.540 --> 00:47:52.820
you can tie it into things like,


00:47:52.820 --> 00:47:55.140
scikit-learn and TensorFlow and do machine,


00:47:55.140 --> 00:47:56.860
any type of machine learning on it.


00:47:56.860 --> 00:47:58.260
And at the end of the day,


00:47:58.260 --> 00:48:00.820
you're doing transforms on the data


00:48:00.820 --> 00:48:02.220
as it's in the data store.


00:48:02.220 --> 00:48:04.420
So there's no more downloading a bunch of data,


00:48:04.420 --> 00:48:06.500
working on it and trying to re-upload it.


00:48:06.500 --> 00:48:10.900
And it's off of the backs of crazy ideas


00:48:10.900 --> 00:48:13.580
from people crazier than I am that are just like,


00:48:13.580 --> 00:48:15.060
"Hey, what if we could do this?"


00:48:15.060 --> 00:48:18.140
And to me, that's all I wanted to do with Python


00:48:18.140 --> 00:48:21.300
is just make up goofy stuff and see if it would work.


00:48:21.300 --> 00:48:22.420
- I think that's an interesting idea.


00:48:22.420 --> 00:48:25.100
You could start using things like lots of data


00:48:25.100 --> 00:48:26.580
and things like serverless,


00:48:26.580 --> 00:48:28.780
where you get really short execution times


00:48:28.780 --> 00:48:30.060
and not much power.


00:48:30.060 --> 00:48:32.200
But if it's already in something like Elastic,


00:48:32.200 --> 00:48:33.900
you could do pandas against it,


00:48:33.900 --> 00:48:36.380
like quote pandas, like the API against it.


00:48:36.380 --> 00:48:39.260
without really suffering a lot of trying to download


00:48:39.260 --> 00:48:42.260
a sheer little Docker Lambda callback thing


00:48:42.260 --> 00:48:44.460
before it runs out of time to execute and whatnot.


00:48:44.460 --> 00:48:45.940
- Yeah, I've actually, I think I've seen some people


00:48:45.940 --> 00:48:48.700
do some cool stuff with spaCy and Elastic as well,


00:48:48.700 --> 00:48:50.380
you know, processing all of, you know,


00:48:50.380 --> 00:48:51.700
they're huge volumes of text,


00:48:51.700 --> 00:48:53.720
which also I think is such an interesting part


00:48:53.720 --> 00:48:55.620
of our application of data science.


00:48:55.620 --> 00:48:56.900
Like, you know, you wanna have,


00:48:56.900 --> 00:48:58.740
you have so much text that, you know,


00:48:58.740 --> 00:49:00.340
you can't even, nobody can read it.


00:49:00.340 --> 00:49:03.860
You can barely store it, but you can still analyze it


00:49:03.860 --> 00:49:06.020
and process it and find something out about it


00:49:06.020 --> 00:49:13.940
Otherwise, so yeah, that's not that actually sounds quite cool. I mean the problems I was I was having initially was just this amazing problem of like


00:49:13.940 --> 00:49:20.020
I've got a million lines of data that I need to do something with and I've got this little Mac mini here


00:49:20.020 --> 00:49:25.480
That's just chugging along trying its best and everyone's like well, why don't you just use the Google API and it's like, okay


00:49:25.480 --> 00:49:30.740
Well, I did the math. I'm gonna need $20,000 and it's like, okay, so we can't use the Google API


00:49:30.740 --> 00:49:34.820
We can't solve it with that problem. What else do we got and now it's like, oh wait


00:49:34.820 --> 00:49:38.260
you mean I can just store all this data because I'm it's only a few gigs,


00:49:38.260 --> 00:49:43.780
but then I can just hit my local server as many times as I want, let, you know, search store or


00:49:43.780 --> 00:49:48.980
any type of data store that's good at retrieving the data as I want it as I need it and then let


00:49:48.980 --> 00:49:56.020
it do its thing. Like that solved a $20,000 problem. I mean, even even aside from the cash,


00:49:56.020 --> 00:49:58.740
do you want to send all your data to Google? Probably not. Yeah.


00:50:03.780 --> 00:50:05.780
You can also send it to Facebook while you're at it.


00:50:05.780 --> 00:50:08.580
I don't know. I was working with police call records,


00:50:08.580 --> 00:50:10.980
so I don't want to send that data anywhere.


00:50:10.980 --> 00:50:12.580
I don't want to be on a watch list.


00:50:12.580 --> 00:50:15.180
No, exactly. I think those are like really,


00:50:15.180 --> 00:50:17.780
a lot of these really important applications of the technology


00:50:17.780 --> 00:50:20.580
in the health domain, people are doing good and useful stuff,


00:50:20.580 --> 00:50:23.980
but they should not do that stuff at that type of cost,


00:50:23.980 --> 00:50:27.580
which means sharing all of their sensitive data with companies


00:50:27.580 --> 00:50:29.580
that will, you know, want it for some other reason.


00:50:29.580 --> 00:50:30.580
Yeah, absolutely.


00:50:30.580 --> 00:50:32.380
Matt, Ruven, you guys do training.


00:50:32.380 --> 00:50:34.060
What's the Jupyter story around there?


00:50:34.060 --> 00:50:36.380
- I did a class with, not Jupyter,


00:50:36.380 --> 00:50:38.380
but it was all Colab based this morning.


00:50:38.380 --> 00:50:40.140
So yeah, I use it a lot.


00:50:40.140 --> 00:50:42.220
I think it's great for beginners.


00:50:42.220 --> 00:50:45.020
Like I said, for a lot of people


00:50:45.020 --> 00:50:47.100
who are scientists or engineers,


00:50:47.100 --> 00:50:49.420
that's what they sort of consider Excel.


00:50:49.420 --> 00:50:53.420
And so a lot of them sort of want to sit in Jupyter all day.


00:50:53.420 --> 00:50:57.980
They don't even want to like think about modules or code


00:50:57.980 --> 00:50:59.900
or even software engineering, right?


00:50:59.900 --> 00:51:04.860
And so it's somewhat of a challenge for me to sort of say, okay, let's talk about some


00:51:04.860 --> 00:51:09.980
engineering skills and some good best practices for Python projects. And I'm like, I don't want


00:51:09.980 --> 00:51:14.140
to leave Jupiter, right? Can I do this all in Jupiter? I'm like, well, you could, but you kind


00:51:14.140 --> 00:51:19.980
of don't want to per se. But yeah, definitely cool. I think what I'd love to see is Inez's


00:51:19.980 --> 00:51:25.980
fancy mypy checker hooked up with pandas on Jupiter, that would make my day, because that's


00:51:25.980 --> 00:51:28.860
That's one of the things that I find confuses people


00:51:28.860 --> 00:51:31.580
just with pandas having 50 ways to do things


00:51:31.580 --> 00:51:34.740
and then objects returning five different types


00:51:34.740 --> 00:51:37.940
or methods that return five different types.


00:51:37.940 --> 00:51:39.600
You don't get any tab completion


00:51:39.600 --> 00:51:41.780
or any of that good stuff in Jupyter


00:51:41.780 --> 00:51:43.900
when you're doing a lot of the machine learning stuff.


00:51:43.900 --> 00:51:46.620
- Yeah, and a bunch of grown-up engineering stuff


00:51:46.620 --> 00:51:47.800
is coming to Jupyter, right?


00:51:47.800 --> 00:51:51.740
Like NBDev, NBQA, some of these other stuff


00:51:51.740 --> 00:51:52.980
that's coming there is making it


00:51:52.980 --> 00:51:54.780
way more interesting for that regard.


00:51:54.780 --> 00:52:09.380
Yeah, the MV dev stuff is interesting. Just coming. I mean, that's sort of taking it to that sort of literate style of programming where we're going to stay in Jupiter all day and do everything from that. And then, you know, Netflix has their stuff where they're deploying Jupiter notebooks to production.


00:52:09.380 --> 00:52:12.900
Yeah, it was paper mill. Yeah. Reuben, how about you? And then I'm gonna run the chooser.


00:52:12.900 --> 00:52:17.820
I use Jupyter every day for my training.


00:52:17.820 --> 00:52:19.980
I don't use slides, I just do live coding.


00:52:19.980 --> 00:52:23.060
I find that's a great way to show them,


00:52:23.060 --> 00:52:24.620
not just the answer,


00:52:24.620 --> 00:52:25.940
this is how you code something,


00:52:25.940 --> 00:52:29.020
but this is the process you use to get to the solution.


00:52:29.020 --> 00:52:31.460
Because teaching people that process is really important.


00:52:31.460 --> 00:52:32.940
It also means I can share with them


00:52:32.940 --> 00:52:35.800
everything that I typed during the day really, really easily.


00:52:35.800 --> 00:52:37.860
People are a little resistant to using it first,


00:52:37.860 --> 00:52:39.260
especially experienced developers.


00:52:39.260 --> 00:52:40.460
They're like, "Wait, what is this thing?


00:52:40.460 --> 00:52:42.220
Why are you not using a normal IDE?"


00:52:42.220 --> 00:52:45.560
I've actually forced myself in the last year to remember, "Oh yeah, we should do a few


00:52:45.560 --> 00:52:50.320
exercises and tell them to use the IDE so they won't think that everything is done in


00:52:50.320 --> 00:52:51.320
Jupyter."


00:52:51.320 --> 00:52:54.000
That's a great environment, but there are other ways to develop software.


00:52:54.000 --> 00:52:57.040
Why does Python only run in this weird web browser thing?


00:52:57.040 --> 00:52:58.040
Right, right, exactly.


00:52:58.040 --> 00:53:03.720
Speaking of this, I think this is another reason why Python has taken off so much, just


00:53:03.720 --> 00:53:05.640
that you want stuff to be dynamic.


00:53:05.640 --> 00:53:11.520
If you're doing the sort of data science-y type of work, you want to run your code that


00:53:11.520 --> 00:53:13.920
even if you're running it in an IDE in a more traditional way.


00:53:13.920 --> 00:53:15.200
But I think Jupyter has especially...


00:53:15.200 --> 00:53:18.720
Not just like, "Oh, you want to have these little notebook cells in your browser,"


00:53:18.720 --> 00:53:21.520
but more like, "This is the type of way you want to interact with code.


00:53:21.520 --> 00:53:24.080
Run something, change a line, run again, run that part."


00:53:24.080 --> 00:53:25.600
Well, that's where they're coming from, too.


00:53:25.600 --> 00:53:27.680
They're coming from notebook environments.


00:53:27.680 --> 00:53:30.800
And so this makes sense for a lot of these people.


00:53:30.800 --> 00:53:34.080
And being able to just explain it on the same...


00:53:34.080 --> 00:53:35.840
Just in one look.


00:53:35.840 --> 00:53:40.080
Like, instead of going, "Here's five slides explaining what I'm about to do,"


00:53:40.160 --> 00:53:42.480
or here's just the code.


00:53:42.480 --> 00:53:44.120
Now let me sit here and explain it to you.


00:53:44.120 --> 00:53:46.480
I can literally break it down line by line.


00:53:46.480 --> 00:53:48.000
Okay, this is what's about to happen now.


00:53:48.000 --> 00:53:51.020
Let's run this and watch it happening as we go.


00:53:51.020 --> 00:53:53.400
For people who don't write Python full-time,


00:53:53.400 --> 00:53:55.880
again, it's amazing because for them,


00:53:55.880 --> 00:53:58.400
they can see it piece by piece, just like, you know,


00:53:58.400 --> 00:54:00.680
my daughter, I'm just trying to teach her how to read early


00:54:00.680 --> 00:54:03.200
and it's just like, break it up piece by piece.


00:54:03.200 --> 00:54:05.400
And like, you can do that when you're training


00:54:05.400 --> 00:54:09.520
young experience-wise Pythonistas and just say,


00:54:09.520 --> 00:54:12.440
like, hey, let's just look at what this does.


00:54:12.440 --> 00:54:13.960
And if we want to dig into it,


00:54:13.960 --> 00:54:16.640
it's almost like having a debugger in your presentation


00:54:16.640 --> 00:54:18.720
and just being able to like stop at any point in time


00:54:18.720 --> 00:54:21.120
and go, all right, let's jump in, let's go deeper,


00:54:21.120 --> 00:54:22.360
let's really talk about this.


00:54:22.360 --> 00:54:24.280
- Yeah, or be able to step back two lines


00:54:24.280 --> 00:54:25.520
of in your execution.


00:54:25.520 --> 00:54:26.480
- True.


00:54:26.480 --> 00:54:27.320
- All right, just for the time being.


00:54:27.320 --> 00:54:28.320
- I started using.


00:54:28.320 --> 00:54:29.800
- Go ahead, last thought, Reuven,


00:54:29.800 --> 00:54:30.800
you get the final thought on this one.


00:54:30.800 --> 00:54:32.480
- I started using more and more markup


00:54:32.480 --> 00:54:34.360
in my notebooks as well to like,


00:54:34.360 --> 00:54:37.000
sort of document what I'm doing explicitly


00:54:37.000 --> 00:54:41.020
and sort of instead of just using hashtags and comments.


00:54:41.020 --> 00:54:43.200
So it becomes much more obvious with bullet points.


00:54:43.200 --> 00:54:45.520
I think people are enjoying that as well.


00:54:45.520 --> 00:54:46.360
- Yeah, that's great.


00:54:46.360 --> 00:54:48.200
And that's, I mean, that's part of the Zen of notebooks.


00:54:48.200 --> 00:54:49.040
All right.


00:54:49.040 --> 00:54:52.520
And you're up next, the random match choices selected you.


00:54:52.520 --> 00:54:56.880
- Okay, so my big story for this year is very small story,


00:54:56.880 --> 00:54:58.340
a Microsoft story.


00:54:58.340 --> 00:55:00.240
It's COVID, it's the coronavirus,


00:55:00.240 --> 00:55:03.180
which I think for the first time ever,


00:55:03.180 --> 00:55:05.920
it's the topic that everyone is speaking about


00:55:05.920 --> 00:55:08.060
in every country, every walk of life.


00:55:08.060 --> 00:55:10.320
Like whoever I talk to, wherever they are,


00:55:10.320 --> 00:55:12.020
this is the only thing people talk about


00:55:12.020 --> 00:55:13.880
because it is such a profound effect


00:55:13.880 --> 00:55:15.120
on everything we've done.


00:55:15.120 --> 00:55:16.780
Now, you know, this is a Python show,


00:55:16.780 --> 00:55:18.480
so we'll talk about the Python aspect of it.


00:55:18.480 --> 00:55:20.120
And I'm not trying to minimize at all


00:55:20.120 --> 00:55:23.280
the extraordinary pain that people are going through


00:55:23.280 --> 00:55:26.920
physically, medically, emotionally, financially,


00:55:26.920 --> 00:55:27.920
on, on, and on.


00:55:27.920 --> 00:55:31.440
But Python has continued sort of chugging along


00:55:31.440 --> 00:55:33.160
throughout this crisis.


00:55:33.160 --> 00:55:35.040
In fact, we've seen that big companies,


00:55:35.040 --> 00:55:38.040
high-tech companies are actually among the winners in this


00:55:38.040 --> 00:55:39.720
as the whole world has gone digital.


00:55:39.720 --> 00:55:42.440
And companies are hiring Python developers.


00:55:42.440 --> 00:55:44.280
They're increasingly desperate for Python developers.


00:55:44.280 --> 00:55:46.960
The number of people in my corporate training classes,


00:55:46.960 --> 00:55:49.000
who when we go around and everyone introduces themselves,


00:55:49.000 --> 00:55:52.280
who were hired in the last six months, is amazing to me.


00:55:52.280 --> 00:55:54.140
Like, these are people who are working from home,


00:55:54.140 --> 00:55:56.180
were interviewed from home, hired from home,


00:55:56.180 --> 00:55:58.000
and are now doing training from home


00:55:58.000 --> 00:56:00.160
as their companies sort of grow in interest


00:56:00.160 --> 00:56:01.160
and power and everything.


00:56:01.160 --> 00:56:04.060
So people who have Python skills


00:56:04.060 --> 00:56:08.260
have continued to be, I would even say, are increasingly in demand, which is amazing.


00:56:08.260 --> 00:56:12.940
The bad news, or among the bad news, is, of course, so I mentioned this before, PyCon,


00:56:12.940 --> 00:56:17.860
and all the other meetings and meetups and gatherings have suffered as a result.


00:56:17.860 --> 00:56:21.620
The good news on this front is I've been able to speak at many more conferences than I would have been able to


00:56:21.620 --> 00:56:26.660
because, hey, I can attend the conference from my home office. I don't need to fly anywhere, go anywhere.


00:56:26.660 --> 00:56:32.260
But you know what? All of these conferences, these online solutions are still really lacking.


00:56:32.260 --> 00:56:34.460
At the end of the day, as much as we want to say,


00:56:34.460 --> 00:56:36.940
we're virtual, we're online, we communicate this way.


00:56:36.940 --> 00:56:38.740
And that is an important part of things,


00:56:38.740 --> 00:56:39.900
that face-to-face contact,


00:56:39.900 --> 00:56:42.060
that personal contact is really missing.


00:56:42.060 --> 00:56:43.220
And I'm really feeling it.


00:56:43.220 --> 00:56:45.260
I've only been going to conferences for a few years now,


00:56:45.260 --> 00:56:47.060
and boy, I really miss being in the same room


00:56:47.060 --> 00:56:48.980
as other people and talking to them and chatting


00:56:48.980 --> 00:56:50.860
and just sort of randomly bumping into people.


00:56:50.860 --> 00:56:53.540
And then you also have the financial aspect of it


00:56:53.540 --> 00:56:55.940
that someone was mentioning earlier, the PSF,


00:56:55.940 --> 00:56:57.820
their big fundraiser each year is Python.


00:56:57.820 --> 00:56:59.260
And I'm sure it was a hit for them,


00:56:59.260 --> 00:57:00.660
not just not to have it this year,


00:57:00.660 --> 00:57:02.540
but to have to cancel the venue.


00:57:02.540 --> 00:57:05.580
And I am extremely skeptical that's going to happen in person.


00:57:05.580 --> 00:57:08.260
I know EuroPython already said it's not happening in 2021.


00:57:08.260 --> 00:57:13.500
And we'll have to see exactly how this affects the community going forward.


00:57:13.500 --> 00:57:15.380
I'd say so far we're doing okay,


00:57:15.380 --> 00:57:17.820
but here's an opportunity for something to figure out


00:57:17.820 --> 00:57:22.580
how can we do conferences online that are effective in a closer way


00:57:22.580 --> 00:57:24.100
to what we've been doing so far.


00:57:24.100 --> 00:57:26.900
The news is, I would say, on balance good for Python


00:57:26.900 --> 00:57:28.340
and for people who know Python,


00:57:28.340 --> 00:57:30.780
but still pretty bad overall.


00:57:30.780 --> 00:57:34.900
And I'll also add that these vaccines, I mean, boy, oh, boy.


00:57:34.900 --> 00:57:37.300
If they work, this is going to be like--


00:57:37.300 --> 00:57:39.180
not as a biologist or anything, but I'm


00:57:39.180 --> 00:57:43.220
so amazingly impressed with all the science and the work


00:57:43.220 --> 00:57:44.940
that people have been doing on this front.


00:57:44.940 --> 00:57:47.100
And I think this has a chance also


00:57:47.100 --> 00:57:49.780
to affect their lives moving forward, how they develop them.


00:57:49.780 --> 00:57:51.740
They just need to make a PyCon bubble.


00:57:51.740 --> 00:57:54.260
So in the United States, the NBA was


00:57:54.260 --> 00:57:56.780
continuing to play because they had a bubble where


00:57:56.780 --> 00:58:00.380
they isolated all the players for however long, right?


00:58:00.380 --> 00:58:05.380
So we just all go to somewhere and bubble up for however long.


00:58:05.380 --> 00:58:06.820
- Then we can have our conference.


00:58:06.820 --> 00:58:08.740
- I'll isolate with you guys for a month, absolutely.


00:58:08.740 --> 00:58:11.020
- I don't know if my family will let me do that.


00:58:11.020 --> 00:58:12.460
- Jay, we'll just do it in San Diego, man.


00:58:12.460 --> 00:58:13.300
It's nice there.


00:58:13.300 --> 00:58:14.120
- Okay, I'm all for it.


00:58:14.120 --> 00:58:15.900
- Coronado Island, we'll just get a section of it, okay?


00:58:15.900 --> 00:58:16.740
- Yeah.


00:58:16.740 --> 00:58:20.540
- But no, mandatory quarantine for like conferences.


00:58:20.540 --> 00:58:22.220
I just did two week quarantine here


00:58:22.220 --> 00:58:23.660
to be able to enter Australia.


00:58:23.660 --> 00:58:24.500
- Yeah, just put an Australian.


00:58:24.500 --> 00:58:25.340
- And I can just chill around in the hotel room


00:58:25.340 --> 00:58:26.740
for two weeks and then you're free.


00:58:26.740 --> 00:58:28.340
- Icon in Australia.


00:58:28.340 --> 00:58:29.180
- That sounds okay to me.


00:58:29.180 --> 00:58:30.020
- Problem solved.


00:58:30.020 --> 00:58:32.700
- Well, I mean, to be fair, it's expensive.


00:58:32.700 --> 00:58:35.260
So I wouldn't, you know, it's like, you know,


00:58:35.260 --> 00:58:36.700
would you want to pay like, you know,


00:58:36.700 --> 00:58:39.220
your conference plus two weeks at a hotel


00:58:39.220 --> 00:58:40.300
in order to do that?


00:58:40.300 --> 00:58:43.260
I don't think that'd be even less inclusive


00:58:43.260 --> 00:58:45.580
than a lot of these conferences already are, so.


00:58:45.580 --> 00:58:47.100
- I don't want to take all of his thunder,


00:58:47.100 --> 00:58:51.660
but one of the first conferences that I watched was,


00:58:51.660 --> 00:58:53.660
Cecil, please remind me now, 'cause I'm blanking.


00:58:53.660 --> 00:58:55.280
That's how long of a year it's been.


00:58:55.280 --> 00:58:58.720
the conference that you helped put on and the Juneteenth.


00:58:58.720 --> 00:58:59.720
Yeah.


00:58:59.720 --> 00:59:05.280
And, and with that, I mean, one great conference, I'm sorry, I screwed up on remembering the


00:59:05.280 --> 00:59:06.280
name.


00:59:06.280 --> 00:59:07.340
That's my fault, not yours.


00:59:07.340 --> 00:59:14.480
But also the sheer fact that that conference was organized in two weeks, and it was an


00:59:14.480 --> 00:59:16.480
amazing conference, like the ability.


00:59:16.480 --> 00:59:19.360
That could never have been done if it was in person, right?


00:59:19.360 --> 00:59:20.360
Yes.


00:59:20.360 --> 00:59:25.180
So like the accessibility that you're providing to new speakers, people that normally would


00:59:25.180 --> 00:59:30.620
not be able to get up and give a presentation. I've had that conversation so many times of, like,


00:59:30.620 --> 00:59:34.780
the type of talks that I like to create are not the type of talks you see at PyCon,


00:59:34.780 --> 00:59:39.100
and there's a reason why. And it's not a bad thing. It's just it is what it is.


00:59:39.100 --> 00:59:44.300
And I think when you're able to say, you know what, let's do a conference. Let's make this


00:59:44.300 --> 00:59:49.660
happen. Let's just get up. We can have fun with it. I've seen some conference talks that were


00:59:49.660 --> 00:59:55.340
literally small budget films. They had multiple casts. I've done transcriptions on conference


00:59:55.340 --> 01:00:00.140
talks that literally had... They gave me the script and said, "All right, here you go."


01:00:00.140 --> 01:00:06.540
So when you can actually do things like that and think outside the box and use this time


01:00:06.540 --> 01:00:14.140
to readjust the needle... There was a good podcast episode on More Than Just Code, I believe. Not


01:00:14.140 --> 01:00:16.540
More Than Just Code. I don't remember what it is. I'll find it. Greater Than Code. That's what it


01:00:16.540 --> 01:00:23.660
was. And they said, "If we haven't taken this time to do something better when things are different,


01:00:23.660 --> 01:00:29.100
when things have improved, then shame on all of us because yes, this sucked, but it caused us to


01:00:29.100 --> 01:00:34.620
think so much outside the box that we should be able to take all that knowledge with us when we


01:00:34.620 --> 01:00:40.300
can get back in the box and just have a ton of fun with it." Yeah, I think a lot of opportunities


01:00:40.300 --> 01:00:45.260
have been made available for people to attend conferences and for people to get jobs where


01:00:45.260 --> 01:00:50.060
companies would previously say, no, you have to move to San Francisco or to Omaha or whatever.


01:00:50.060 --> 01:00:53.340
It's like, well, you know what? No one's going in the office. Let's try hiring from the best


01:00:53.340 --> 01:00:55.980
in the world instead of the best in Nebraska or whatever.


01:00:55.980 --> 01:01:01.300
I think that might be the biggest fallout of this, Michael, is just the change in everything


01:01:01.300 --> 01:01:03.620
being centrally located in Silicon Valley.


01:01:03.620 --> 01:01:08.660
Yeah. I've heard of a lot of people like that actually just have jobs in the valley that


01:01:08.660 --> 01:01:14.100
have moved back to where their parents are because it's like 10 times cheaper or something


01:01:14.100 --> 01:01:17.300
like that and they're not going to want to move back.


01:01:17.300 --> 01:01:21.140
Have you heard that some companies have been readjusting their salaries?


01:01:21.140 --> 01:01:25.700
They're saying, "Well, if you live outside of the Bay Area, then it's cheaper, so we're


01:01:25.700 --> 01:01:27.420
going to cut your salary as a result."


01:01:27.420 --> 01:01:30.220
Yeah, but people have always been doing that.


01:01:30.220 --> 01:01:33.300
That's like, unfortunately, not new.


01:01:33.300 --> 01:01:36.860
So if you're listening and this happens, you can say, "Well, you no longer have to pay


01:01:36.860 --> 01:01:42.540
$18 million for my office area, so let's call it an even swap."


01:01:42.540 --> 01:01:45.460
(laughing)


01:01:45.460 --> 01:01:49.060
- Just keep a virtual address in the Bay Area.


01:01:49.060 --> 01:01:51.500
- Exactly, my PO box is right down on Fifth Street.


01:01:51.500 --> 01:01:54.340
All right, last one, this random choice was easy


01:01:54.340 --> 01:01:56.580
'cause we're down to our final excellent guest.


01:01:56.580 --> 01:01:58.140
Matt Harrison, what do you got for us?


01:01:58.140 --> 01:02:01.620
- Okay, my thought was just on sort of the hardware aspect


01:02:01.620 --> 01:02:02.980
of things this year.


01:02:02.980 --> 01:02:06.860
So I have a daughter who started college this year


01:02:06.860 --> 01:02:07.680
for better or for worse,


01:02:07.680 --> 01:02:11.300
and she's learning both C++ and Python right now,


01:02:11.300 --> 01:02:14.740
her linear algebra class as a Python lab, which I think is awesome.


01:02:14.740 --> 01:02:15.840
I wish I had that.


01:02:15.840 --> 01:02:19.540
But I was actually helping her with some homework.


01:02:19.540 --> 01:02:22.500
I wasn't doing it, but she was like, "I can't figure this out."


01:02:22.500 --> 01:02:24.980
So I was her rubber duck the other night.


01:02:24.980 --> 01:02:27.940
And her issue was allocating memory, right?


01:02:27.940 --> 01:02:31.740
And so one of the things that's nice about Python


01:02:31.740 --> 01:02:34.180
is you don't have to worry about allocating memory.


01:02:34.180 --> 01:02:38.540
She got all the output, but she was just double freeing a pointer here,


01:02:38.540 --> 01:02:40.540
which they checked on submission.


01:02:40.600 --> 01:02:47.160
So pythons now now we're seeing python and i'll just tie this like I have a client who wants


01:02:47.160 --> 01:02:50.360
Next year wants me to do a training on gpus with python


01:02:50.360 --> 01:02:58.300
Which just goes to show like my clients tend to be big companies and so big companies are now leveraging like specialized technology


01:02:58.300 --> 01:03:05.480
To do things very quickly, right? And if you have a gpu you can get ten hundred thousand times performance


01:03:05.640 --> 01:03:08.200
that you get out of a CPU.


01:03:08.200 --> 01:03:10.000
So I think that's super exciting.


01:03:10.000 --> 01:03:11.480
There's the Rapids project,


01:03:11.480 --> 01:03:14.840
which is heavily sponsored by Nvidia.


01:03:14.840 --> 01:03:17.360
And I'm super impressed with that.


01:03:17.360 --> 01:03:21.080
They're basically like taking well-known APIs


01:03:21.080 --> 01:03:22.080
and basically saying,


01:03:22.080 --> 01:03:24.800
hey, your code basically change an import


01:03:24.800 --> 01:03:28.400
or with the change of an import and this hardware,


01:03:28.400 --> 01:03:31.040
your code will run X times faster or whatever.


01:03:31.040 --> 01:03:33.520
And so I think that's super compelling and exciting,


01:03:33.520 --> 01:03:36.400
Not that necessarily everyone will have access to those sorts of things,


01:03:36.400 --> 01:03:40.480
but it's now getting to the point where it's becoming more common.


01:03:40.480 --> 01:03:43.040
On the note of hardware, I think another thing that was really


01:03:43.040 --> 01:03:46.840
interesting this year was the Apple M1 chip coming out.


01:03:46.840 --> 01:03:52.160
I actually bought a beefy PC this year, having run a MacBook for 15 years,


01:03:52.160 --> 01:03:57.200
just because due to Corona and whatnot, I needed something beefy to start doing


01:03:57.200 --> 01:04:01.560
virtual sharing and presentation like this, and my MacBook just wasn't cutting it.


01:04:02.040 --> 01:04:07.040
But the thing I don't like about my PC is that it has,


01:04:07.040 --> 01:04:08.400
it sounds like it's gonna take off


01:04:08.400 --> 01:04:10.400
every time I start doing something, right?


01:04:10.400 --> 01:04:14.880
Like modern Intel chips can take us to Mars if they want to.


01:04:14.880 --> 01:04:17.500
We just need to like make a huge drone out of them.


01:04:17.500 --> 01:04:20.140
And so I'm super excited to see,


01:04:20.140 --> 01:04:23.920
like if you can get a silent MacBook that, you know,


01:04:23.920 --> 01:04:27.280
is super powerful, runs faster than Intel chips,


01:04:27.280 --> 01:04:28.320
that's super compelling,


01:04:28.320 --> 01:04:30.920
especially if they allow you to get a little bit more RAM,


01:04:30.920 --> 01:04:34.400
which from the machine learning side is interesting to me.


01:04:34.400 --> 01:04:37.720
But I'm also excited about the competition factor of that.


01:04:37.720 --> 01:04:41.240
I think like Intel and the chip set is sort of stagnated


01:04:41.240 --> 01:04:42.300
for the past couple of years,


01:04:42.300 --> 01:04:46.000
we've sort of run out of the end of Moore's law per se.


01:04:46.000 --> 01:04:49.160
So I think both the GPU and the M1,


01:04:49.160 --> 01:04:52.340
it'll be interesting to see what the competition is


01:04:52.340 --> 01:04:54.360
from the PC manufacturers,


01:04:54.360 --> 01:04:58.360
if they're going to do a similar everything on a chip thing


01:04:58.360 --> 01:05:01.320
just sort of go with what they've been going with.


01:05:01.320 --> 01:05:02.840
I think competition is good.


01:05:02.840 --> 01:05:07.000
And so I'm excited that Apple did this, even though there's going to be some growing pains


01:05:07.000 --> 01:05:11.640
and Python might have some issues at first, but I think in the end, new technologies,


01:05:11.640 --> 01:05:16.120
new hardware that allow us to write at high levels and not have to worry about freeing


01:05:16.120 --> 01:05:19.960
and allocating memory, which again, a lot of people are using Python, don't care about


01:05:19.960 --> 01:05:20.120
that.


01:05:20.120 --> 01:05:21.400
They don't want to be programmers.


01:05:21.400 --> 01:05:26.200
They want to leverage great code, stand on the shoulders of giants and the latest and


01:05:26.200 --> 01:05:29.600
and greatest software and hardware and have it be fast.


01:05:29.600 --> 01:05:32.320
So I'm super excited about the future with them.


01:05:32.320 --> 01:05:34.260
Yeah, I'm really excited about both these things.


01:05:34.260 --> 01:05:37.060
Like the whole GPU revolution is incredible.


01:05:37.060 --> 01:05:40.260
And the Apple M1 stuff is going to be really, really interesting.


01:05:40.260 --> 01:05:45.260
Like, like you, I, I bought it maxed out Mac mini actually had already


01:05:45.260 --> 01:05:49.580
ordered a top of the line MacBook pro 16 inch, and then that came out.


01:05:49.580 --> 01:05:50.520
I started seeing the reviews.


01:05:50.520 --> 01:05:51.100
I'm like, you know what?


01:05:51.100 --> 01:05:51.500
Forget it.


01:05:51.500 --> 01:05:53.100
I'm not getting that thing.


01:05:53.100 --> 01:05:54.540
I'm getting this new one to try it out.


01:05:54.540 --> 01:05:56.260
And he does have some drawbacks,


01:05:56.260 --> 01:05:58.100
like Docker doesn't work right away.


01:05:58.100 --> 01:05:59.180
Maybe it will, maybe it won't.


01:05:59.180 --> 01:06:02.480
But I have a 2018 MacBook Pro that's pretty good.


01:06:02.480 --> 01:06:06.940
I have a SimRacing 16 core machine over there.


01:06:06.940 --> 01:06:08.980
Like, I've got plenty of Intel stuff to work.


01:06:08.980 --> 01:06:10.140
So I'm gonna try to jump on this.


01:06:10.140 --> 01:06:12.420
And I think the interesting Python angle here,


01:06:12.420 --> 01:06:14.180
besides just having stuff to run our code in,


01:06:14.180 --> 01:06:16.060
is, you know, Enos talked about like,


01:06:16.060 --> 01:06:18.580
her CI didn't support 3.9 right away.


01:06:18.580 --> 01:06:20.180
Well, whose CI is gonna build wheels


01:06:20.180 --> 01:06:23.020
for Apple M1 straight away and things like that?


01:06:23.020 --> 01:06:25.700
There's going to be some interesting growing pains, especially on the data


01:06:25.700 --> 01:06:27.820
science side, as this true platform.


01:06:27.820 --> 01:06:28.780
Yeah.


01:06:28.780 --> 01:06:29.440
It's fun.


01:06:29.440 --> 01:06:31.740
You mentioned that because actually, yeah, when this came out, we were also


01:06:31.740 --> 01:06:34.020
thinking like, ah, maybe we should get one of these, you know, we want to make


01:06:34.020 --> 01:06:37.860
sure spacey compiles properly on it and we can really, you know, optimize for that.


01:06:37.860 --> 01:06:39.020
And did you guys go on?


01:06:39.020 --> 01:06:41.820
Yeah, because someone has to do it or so, you know, not yet.


01:06:41.820 --> 01:06:42.320
No.


01:06:42.320 --> 01:06:45.180
Also it's a bit difficult with the traveling, but like, yeah, that's kind of.


01:06:45.180 --> 01:06:48.960
When we have other priorities too, this is not, I wouldn't put this like at the


01:06:48.960 --> 01:06:52.060
very top, but like, it's definitely something you want to do, but at the same


01:06:52.060 --> 01:06:54.260
At the same time, we also want to keep optimizing for CPU.


01:06:54.260 --> 01:06:55.260
Like, that's the other thing.


01:06:55.260 --> 01:06:58.260
Of course, you know, even all these new NLP models,


01:06:58.260 --> 01:07:01.060
all of that stuff obviously runs great on a GPU,


01:07:01.060 --> 01:07:02.460
and we'll see a lot of improvements,


01:07:02.460 --> 01:07:04.960
and we also see this become much more available


01:07:04.960 --> 01:07:06.560
and cheaper for people to use.


01:07:06.560 --> 01:07:08.760
But at the same time, we're still optimizing


01:07:08.760 --> 01:07:10.560
our tools and libraries for CPU.


01:07:10.560 --> 01:07:12.960
Like, you can run it on your random laptop,


01:07:12.960 --> 01:07:14.460
and also it's still, for a long time,


01:07:14.460 --> 01:07:15.660
it will be cheaper still.


01:07:15.660 --> 01:07:17.860
If you just, you know, you want to run lots of machines,


01:07:17.860 --> 01:07:20.660
and you can get those, you know, much cheaper in the cloud.


01:07:20.660 --> 01:07:26.660
And if you can parallelize, you can train your models very efficiently on CPU, if you can get it to work.


01:07:26.660 --> 01:07:29.380
That will always be cheaper for a long time.


01:07:29.380 --> 01:07:34.420
There's a lot to say about just the overall cost of computing as a whole.


01:07:34.420 --> 01:07:37.380
I mean, this is great. This is $10.


01:07:37.380 --> 01:07:39.940
And I mean, I can run a lot of stuff on that.


01:07:39.940 --> 01:07:44.420
You're holding up a circuit, an Adafruit thing just for the people who are not on the video.


01:07:44.420 --> 01:07:47.780
Oh, yeah, sorry. I'm holding a Raspberry Pi Zero W.


01:07:47.780 --> 01:07:53.900
So it's like, you know, four gigs of RAM, like enough, you can buy a 64 gig, like


01:07:53.900 --> 01:07:57.260
flash drive for $3 now, like it's amazing.


01:07:57.260 --> 01:08:00.840
Like just the overall cost of compute has dropped so much.


01:08:00.840 --> 01:08:01.500
I mean, what was it?


01:08:01.500 --> 01:08:03.340
The, what is the Raspberry Pi?


01:08:03.340 --> 01:08:06.460
400 where it's, it's just, it looks like a keyboard, but it's


01:08:06.460 --> 01:08:07.300
actually a whole computer.


01:08:07.300 --> 01:08:07.780
Yeah.


01:08:07.780 --> 01:08:13.220
So it's like, as we continue to do more and more, we're doing it with less and


01:08:13.220 --> 01:08:19.140
less and it's cheaper and cheaper and cheaper. And most of us are coming from some place where


01:08:19.140 --> 01:08:25.140
the cost of living is too damn high. And we're able to say that we can afford to buy a $15 Pi


01:08:25.140 --> 01:08:29.300
Zero and not think about it too hard. But the fact that we're getting to that point where you


01:08:29.300 --> 01:08:34.820
can have people all over the world where the question isn't anymore, how do I get a computing


01:08:34.820 --> 01:08:39.620
device in my hands? It's like, okay, now I have some choices and they're all affordable. Like to


01:08:39.620 --> 01:08:44.340
me that's we're going to see a lot of things come where Brian Okken is right now where VS


01:08:44.340 --> 01:08:49.300
2103 is in the future. There's gonna be a lot of great things coming. Yes, I'm looking at chat.


01:08:49.300 --> 01:08:55.380
I have my kids to have one of those one laptop per child in their bedroom over there, right,


01:08:55.380 --> 01:09:01.620
which I think that the Raspberry Pi 400 is sort of, it's the next gen of that. It's actually


01:09:01.620 --> 01:09:08.420
something that makes sense. Everyone has a TV, right? And you can just plug it in and you're


01:09:08.420 --> 01:09:10.660
You're not in some weird, I mean, you're in Linux,


01:09:10.660 --> 01:09:13.500
so yeah, you're in a weird environment, but you can run--


01:09:13.500 --> 01:09:16.460
- Is that one of the laptops with the hand crank on it?


01:09:16.460 --> 01:09:17.700
- Well, it has the little wings.


01:09:17.700 --> 01:09:19.340
Mine didn't have the hand crank, but--


01:09:19.340 --> 01:09:20.180
- Okay.


01:09:20.180 --> 01:09:22.820
- I actually, like, I kept hearing about Raspberry Pi,


01:09:22.820 --> 01:09:24.700
and so I decided to order one recently,


01:09:24.700 --> 01:09:25.900
and I haven't done anything with it.


01:09:25.900 --> 01:09:27.780
It just came a few days ago.


01:09:27.780 --> 01:09:29.100
But I'm looking at this thing, I'm like,


01:09:29.100 --> 01:09:31.300
oh my God, this little card here


01:09:31.300 --> 01:09:34.620
that cost me less than $100, a lot less than that,


01:09:34.620 --> 01:09:36.260
is more powerful than the computer I use


01:09:36.260 --> 01:09:38.300
to run my entire business for years,


01:09:38.300 --> 01:09:39.380
and years and years.


01:09:39.380 --> 01:09:41.180
It's just astonishing to me.


01:09:41.180 --> 01:09:43.140
- Yeah, so I think that's probably a good place


01:09:43.140 --> 01:09:44.220
to round out the show.


01:09:44.220 --> 01:09:46.220
Like, the future is so exciting,


01:09:46.220 --> 01:09:48.860
and in some ways we're kind of living there, right?


01:09:48.860 --> 01:09:50.660
Some of these things that are coming out are so amazing.


01:09:50.660 --> 01:09:52.860
And I just want to say thank you all,


01:09:52.860 --> 01:09:53.700
to you all for being here.


01:09:53.700 --> 01:09:55.140
You're all doing such amazing work,


01:09:55.140 --> 01:09:56.340
and it's really humbling.


01:09:56.340 --> 01:09:58.540
You all took time from crazy schedules,


01:09:58.540 --> 01:10:00.060
from traveling, from weird locations,


01:10:00.060 --> 01:10:03.120
to just be here and make this whole event happen.


01:10:03.120 --> 01:10:04.900
Thank you for listening to Python Bytes.


01:10:04.900 --> 01:10:07.380
Follow the show on Twitter via @PythonBytes.


01:10:07.380 --> 01:10:10.580
that's Python Bytes as in B-Y-T-E-S.


01:10:10.580 --> 01:10:13.940
And get the full show notes at pythonbytes.fm.


01:10:13.940 --> 01:10:15.540
If you have a news item you want featured,


01:10:15.540 --> 01:10:18.000
just visit pythonbytes.fm and send it our way.


01:10:18.000 --> 01:10:21.160
We're always on the lookout for sharing something cool.


01:10:21.160 --> 01:10:23.020
On behalf of myself and Brian Aukin,


01:10:23.020 --> 01:10:24.520
this is Michael Kennedy.


01:10:24.520 --> 01:10:26.540
Thank you for listening and sharing this podcast


01:10:26.540 --> 01:10:28.180
with your friends and colleagues.

