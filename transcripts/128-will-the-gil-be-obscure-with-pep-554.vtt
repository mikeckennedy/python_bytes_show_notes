
00:00:00.000 --> 00:00:05.920
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.920 --> 00:00:11.760
This is episode 128, recorded April 30th, 2019. I'm Michael Kennedy.


00:00:11.760 --> 00:00:12.640
And I'm Brian Okken.


00:00:12.640 --> 00:00:16.240
And this episode is brought to you by DigitalOcean. They're great supporters of the show.


00:00:16.240 --> 00:00:20.400
Please check them out at pythonbytes.fm/digitalocean. Get $100 free credit.


00:00:20.400 --> 00:00:22.560
Brian, I am super excited.


00:00:22.560 --> 00:00:23.680
Are you? What about?


00:00:23.680 --> 00:00:26.560
We are on PyCon Eve.


00:00:26.560 --> 00:00:29.360
Yeah, but when is this going to go out though?


00:00:29.360 --> 00:00:33.200
I mean, I think this is going out before PyCon.


00:00:33.200 --> 00:00:34.880
At least it'll be out during PyCon.


00:00:34.880 --> 00:00:36.320
If nothing else, we're going to rush.


00:00:36.320 --> 00:00:40.560
Yeah, I'm excited that I don't have to pack the, my banner thing this time.


00:00:40.560 --> 00:00:44.240
I know we're going to be at the JetBrains booth and they're going to have all that


00:00:44.240 --> 00:00:45.600
stuff set up for us.


00:00:45.600 --> 00:00:50.080
We can just roll in like a normal attendee with a relatively small amount of gear and


00:00:50.080 --> 00:00:50.320
tow.


00:00:50.320 --> 00:00:50.720
It'll be great.


00:00:50.720 --> 00:00:50.960
Yeah.


00:00:50.960 --> 00:00:55.040
And I want people to show up at the 630 at the Thursday night thing, because I'm going


00:00:55.040 --> 00:00:58.040
I'm going to be recording at 630 live, so stop by there.


00:00:58.040 --> 00:01:00.240
- Awesome, yeah, I feel like with the JetBrains stuff


00:01:00.240 --> 00:01:01.520
and just independent of that,


00:01:01.520 --> 00:01:03.940
we're going to be doing a lot of live recording there


00:01:03.940 --> 00:01:06.680
for test and code, for Talk Python, and for Python Bytes.


00:01:06.680 --> 00:01:08.680
And we'll try to get the word out about that,


00:01:08.680 --> 00:01:09.720
but it's going to be a lot of fun.


00:01:09.720 --> 00:01:11.160
- Yeah, yep. - For sure.


00:01:11.160 --> 00:01:13.440
So let's just jump right in the first one here.


00:01:13.440 --> 00:01:15.640
I see this one as well within your wheelhouse.


00:01:15.640 --> 00:01:17.240
- Yeah, I forgot about the order.


00:01:17.240 --> 00:01:19.640
Yes, there's an article from Adam Johnson


00:01:19.640 --> 00:01:24.080
called "Solving Algorithmic Problems in Python with PyTest."


00:01:24.080 --> 00:01:26.400
And yes, PyTest is definitely my wheelhouse.


00:01:26.400 --> 00:01:28.280
I like the highlighting of this.


00:01:28.280 --> 00:01:29.120
Here's the idea.


00:01:29.120 --> 00:01:30.960
You've got coding challenges,


00:01:30.960 --> 00:01:33.560
especially algorithmic ones like Project Euler


00:01:33.560 --> 00:01:35.680
or Advent of Code or other,


00:01:35.680 --> 00:01:38.240
there's lots of coding challenges projects.


00:01:38.240 --> 00:01:41.120
And doing those goes through one example


00:01:41.120 --> 00:01:44.900
and shows how to translate the project description,


00:01:44.900 --> 00:01:48.080
the problem description and the specification


00:01:48.080 --> 00:01:50.160
into some quick little tests.


00:01:50.160 --> 00:01:53.440
And they're like showing it how small tests can be.


00:01:53.440 --> 00:01:56.440
just testing one aspect of the answer.


00:01:56.440 --> 00:01:58.760
So the example goes through basically,


00:01:58.760 --> 00:02:01.060
yeah, it's a little bit of a TDD practice thing


00:02:01.060 --> 00:02:03.920
of coming up with some tests to test the test case,


00:02:03.920 --> 00:02:05.000
going through an exercise,


00:02:05.000 --> 00:02:08.000
translating all the specification into tests,


00:02:08.000 --> 00:02:09.240
and then just working through it,


00:02:09.240 --> 00:02:11.520
looking at all the failures, failure cases,


00:02:11.520 --> 00:02:13.680
especially, so one of his example


00:02:13.680 --> 00:02:15.680
was to just create a stub answer,


00:02:15.680 --> 00:02:18.520
just the function you're trying to actually write,


00:02:18.520 --> 00:02:21.240
just have it return some constant,


00:02:21.240 --> 00:02:22.240
and then build that up.


00:02:22.240 --> 00:02:24.620
and it's a little bit of a TDD practice,


00:02:24.620 --> 00:02:27.100
but also just practice writing tests


00:02:27.100 --> 00:02:28.480
to do these sort of projects.


00:02:28.480 --> 00:02:31.320
And it's a short article and I really liked it.


00:02:31.320 --> 00:02:33.880
- Yeah, it's a cool way to explore solving some problems


00:02:33.880 --> 00:02:35.360
with the whole Project Healer thing.


00:02:35.360 --> 00:02:38.680
And it's also a cool way to get some experience


00:02:38.680 --> 00:02:40.760
working with PyTest.


00:02:40.760 --> 00:02:43.220
And I feel like these types of problems


00:02:43.220 --> 00:02:46.920
are pretty good entry-level PyTest-type problems.


00:02:46.920 --> 00:02:48.560
It's not, well, we have the website


00:02:48.560 --> 00:02:50.440
and we want to make sure the user can register.


00:02:50.440 --> 00:02:52.760
and like, okay, well, how do I mock out the database call


00:02:52.760 --> 00:02:55.440
and then like stub out the email service,


00:02:55.440 --> 00:02:57.160
you know, like all that complicated stuff, right?


00:02:57.160 --> 00:03:00.240
Where here it's like a pretty constrained problem, right?


00:03:00.240 --> 00:03:03.960
Like find the minimum path, you know, amongst these bridges


00:03:03.960 --> 00:03:05.360
or, you know, whatever the problem is,


00:03:05.360 --> 00:03:07.400
like these sort of mathematical algorithmic ones.


00:03:07.400 --> 00:03:09.640
- Yeah, and his example is like super easy.


00:03:09.640 --> 00:03:12.160
It's just returning the minimum value in a list


00:03:12.160 --> 00:03:13.400
as long as it's positive.


00:03:13.400 --> 00:03:14.220
- Nice.


00:03:14.220 --> 00:03:15.780
- And it's easy to get your head around.


00:03:15.780 --> 00:03:18.960
And actually I love doing little practice things like that.


00:03:18.960 --> 00:03:19.840
Cool.


00:03:19.840 --> 00:03:22.240
Yeah, I do too, and I'm a fan of Project Healer,


00:03:22.240 --> 00:03:24.160
so quite cool.


00:03:24.160 --> 00:03:25.720
Now, this next one that I have,


00:03:25.720 --> 00:03:28.900
I feel like maybe we haven't really discussed it enough,


00:03:28.900 --> 00:03:30.980
but it has to do with Python packaging.


00:03:30.980 --> 00:03:31.820
Do you think?


00:03:31.820 --> 00:03:33.600
- Oh yeah, we haven't covered packaging much.


00:03:33.600 --> 00:03:36.540
- No, so it's good that it's finally coming up on the show.


00:03:36.540 --> 00:03:38.680
This one is interesting because it's kind of like


00:03:38.680 --> 00:03:41.680
a meta packaging tool.


00:03:41.680 --> 00:03:44.040
So we've talked about the pyproject.toml,


00:03:44.040 --> 00:03:46.560
we've talked about the pipfile.lockfile,


00:03:46.560 --> 00:03:49.780
requirements.txt, poetry, all these things, right?


00:03:49.780 --> 00:03:51.380
Well, this one that I found,


00:03:51.380 --> 00:03:55.780
or was actually sent to us by Dr. Igelby on Twitter,


00:03:55.780 --> 00:03:59.300
it's called DepHel, as in dependency hell.


00:03:59.300 --> 00:04:01.460
So it just comes out and it says it, right?


00:04:01.460 --> 00:04:03.940
Like there's flames on the logo, come on.


00:04:03.940 --> 00:04:06.980
So the idea is that it will let you work


00:04:06.980 --> 00:04:07.980
in these different modes


00:04:07.980 --> 00:04:10.980
and even automatically translate between them.


00:04:10.980 --> 00:04:15.180
So one of them is like, hey, we have a setup.py


00:04:15.180 --> 00:04:17.500
for managing this particular project,


00:04:17.500 --> 00:04:21.040
I would rather have a pyproject.toml file


00:04:21.040 --> 00:04:22.760
that expresses the same thing,


00:04:22.760 --> 00:04:26.720
and you just run a command line against that project,


00:04:26.720 --> 00:04:30.360
and it'll generate the pyproject.toml


00:04:30.360 --> 00:04:32.840
based on the current setup in your project.


00:04:32.840 --> 00:04:33.680
- Oh, nice.


00:04:33.680 --> 00:04:35.840
- Yeah, so if you wanna say switch it to Poetry,


00:04:35.840 --> 00:04:37.640
you can run a command, it'll switch it to Poetry.


00:04:37.640 --> 00:04:40.160
If you wanna switch it over to pipenv,


00:04:40.160 --> 00:04:41.560
fine, you run that, and it'll do it.


00:04:41.560 --> 00:04:43.880
So that's one of the things it does.


00:04:43.880 --> 00:04:47.300
It's pretty cool in that it'll let you use all these different things.


00:04:47.300 --> 00:04:50.940
It doesn't really try to replace them, but it more tries to tie them together.


00:04:50.940 --> 00:04:51.140
Right?


00:04:51.140 --> 00:04:55.700
Like I've grabbed a project, but maybe it's not in the tooling that I like.


00:04:55.700 --> 00:04:57.300
It's pretty easy to extend.


00:04:57.300 --> 00:04:58.500
It's really quite nice.


00:04:58.500 --> 00:05:00.840
I like this ability to translate between them.


00:05:00.840 --> 00:05:05.340
It also has some of the features of like pipenv, so it'll create like a shell.


00:05:05.340 --> 00:05:11.320
It'll install your command line utilities into their own isolated virtual


00:05:11.320 --> 00:05:15.100
environment like PyTest could be in its own environment that has nothing to do


00:05:15.100 --> 00:05:19.360
with your project, but is available to run against your project, things like that.


00:05:19.360 --> 00:05:20.200
Yeah.


00:05:20.200 --> 00:05:20.640
Nice.


00:05:20.640 --> 00:05:20.880
Yeah.


00:05:20.880 --> 00:05:25.200
So yeah, not too much else to say, I guess it's based on async I/O.


00:05:25.200 --> 00:05:27.280
So that means it only supports modern Python.


00:05:27.280 --> 00:05:28.160
That's pretty awesome.


00:05:28.160 --> 00:05:30.760
So it's super fast.


00:05:30.760 --> 00:05:35.520
All of its network calls and stuff are made asynchronously and yeah, it's pretty good.


00:05:35.520 --> 00:05:38.880
I think something like this would be great for like a project that has,


00:05:39.520 --> 00:05:42.760
as a maintainer that doesn't care about PIPenv or something


00:05:42.760 --> 00:05:46.200
is fine with requirements or whatever they're using.


00:05:46.200 --> 00:05:49.160
But there's a couple of maintainers that really like PIPenv


00:05:49.160 --> 00:05:52.680
and wanna have the pip file around and the lock file.


00:05:52.680 --> 00:05:53.560
- Yeah, that's interesting.


00:05:53.560 --> 00:05:56.640
Like you could have one of them that's the source of truth


00:05:56.640 --> 00:05:59.320
and then use this tool to generate the others


00:05:59.320 --> 00:06:01.400
if you'd rather work that way, right?


00:06:01.400 --> 00:06:04.120
Yeah, you could even do it as part of a automated build,


00:06:04.120 --> 00:06:07.260
right, delete the pip file and then recreate it


00:06:07.260 --> 00:06:08.800
as part of the build and then check that back in.


00:06:08.800 --> 00:06:09.300
Yeah.


00:06:09.300 --> 00:06:09.800
Okay.


00:06:09.800 --> 00:06:10.300
Cool.


00:06:10.300 --> 00:06:10.800
Yeah.


00:06:10.800 --> 00:06:11.300
Yeah.


00:06:11.300 --> 00:06:11.800
Pretty cool.


00:06:11.800 --> 00:06:13.800
This next one that you found is a bit of a rant, huh?


00:06:13.800 --> 00:06:14.800
Yes, definitely.


00:06:14.800 --> 00:06:17.800
Mike Croucher, which I'm not sure what he does.


00:06:17.800 --> 00:06:18.800
I think he works.


00:06:18.800 --> 00:06:22.300
He writes a lot of great articles and come across his name every once in a while.


00:06:22.300 --> 00:06:23.300
So thanks, Mike.


00:06:23.300 --> 00:06:29.300
This rant is, he even says it in the name, Python rant from foo import star is bad.


00:06:29.300 --> 00:06:31.800
But basically just import stars bad.


00:06:31.800 --> 00:06:36.300
And I thought this was just done that nobody did this anymore.


00:06:36.300 --> 00:06:40.700
but I actually see quite a bit of code that still has this in it and


00:06:40.700 --> 00:06:44.900
I was actually in looking for different blog posts


00:06:44.900 --> 00:06:50.900
there's some blog posts that have great advice in Python, but the example code has import star and


00:06:50.900 --> 00:06:58.260
I'm not going to point people to that because it's just a bad practice and his example is for instance is


00:06:58.260 --> 00:07:03.980
the square root function sqrt if you just have like result equals


00:07:04.620 --> 00:07:07.260
square root of minus one. What does that mean?


00:07:07.260 --> 00:07:10.860
You don't know what it means because you don't know where that came from and


00:07:10.860 --> 00:07:16.940
There's some really confusing examples that he's showing how it may have been from the math library


00:07:16.940 --> 00:07:20.460
It may have been from numpy or cmath or scipy or sympy


00:07:20.460 --> 00:07:25.060
All of them have the same function name and we like namespaces


00:07:25.060 --> 00:07:32.220
But when you use import star you throw away the namespace ability you just import everything into your current namespace


00:07:32.380 --> 00:07:38.400
So don't do that. Yeah, I like the hat tip to a full metal jacket. This is my rant on import star


00:07:38.400 --> 00:07:40.400
There are many like it, but this one is mine


00:07:40.400 --> 00:07:44.920
This one is my own. You know, I've I totally like this as well


00:07:44.920 --> 00:07:52.320
I'm a big fan of having like super explicit name spaces to like really tell where something comes from. In fact, I


00:07:52.320 --> 00:08:00.120
Typically try to shy away from from thing import something. Yeah, not just import star just even that


00:08:00.520 --> 00:08:06.300
It's more like import this module than module dot function module dot class, you know


00:08:06.300 --> 00:08:13.500
Sometimes if it's like deeply nested I might do import thing as like just the last part of that name or but you know something


00:08:13.500 --> 00:08:15.600
To give you a hint like where the heck did this come from?


00:08:15.600 --> 00:08:20.720
right and like for instance the numpy is the convention is to import numpy as


00:08:20.720 --> 00:08:23.280
NP if numpy is really long at a time. I


00:08:23.280 --> 00:08:28.600
Know however, you're using a ton of it. And so yes


00:08:28.600 --> 00:08:33.100
Yeah, there are conventions and if you notice the conventions, you follow those.


00:08:33.100 --> 00:08:33.900
Yeah, absolutely.


00:08:33.900 --> 00:08:38.400
I'm with it too. So sometimes when I'm refactoring some code or trying to understand it,


00:08:38.400 --> 00:08:44.400
it's frustrating when somebody has a bunch of from library import, like five different functions.


00:08:44.400 --> 00:08:49.900
Yeah. And you know, it's not terrible if you've got something like Visual Studio Code, or you've got PyCharm,


00:08:49.900 --> 00:08:53.500
and you can like go to definition or you hover over it and it'll say more.


00:08:53.700 --> 00:09:03.300
But if you see it in a blog post or you see it printed or you see it in like a gist or somewhere that doesn't have like understanding of the environment, then you're like, okay, what is that?


00:09:03.300 --> 00:09:03.620
Right?


00:09:03.620 --> 00:09:04.980
Like, so just, you know, think about it.


00:09:04.980 --> 00:09:08.540
Yeah, I actually kind of wish they deprecated, but that's probably never gonna happen.


00:09:08.540 --> 00:09:09.780
Yeah, probably not.


00:09:09.780 --> 00:09:12.260
I talked about digital ocean at the top.


00:09:12.260 --> 00:09:14.900
Let me just tell you about something that's new and cool.


00:09:14.900 --> 00:09:16.980
Brian, are you familiar with GitHub actions?


00:09:16.980 --> 00:09:19.100
I just heard a little bit about them.


00:09:19.100 --> 00:09:19.820
Yeah, same.


00:09:19.820 --> 00:09:21.520
I haven't really done anything with them,


00:09:21.520 --> 00:09:25.180
but it's basically GitHub Actions are like a series of workflows


00:09:25.180 --> 00:09:29.100
that can be triggered when you do a push to a repository.


00:09:29.100 --> 00:09:31.580
You create a release or you create an issue,


00:09:31.580 --> 00:09:35.900
and it runs a series of actions that then can kick off CI


00:09:35.900 --> 00:09:37.460
or do other sorts of tests.


00:09:37.460 --> 00:09:40.980
Well, DigitalOcean has come out with GitHub Actions


00:09:40.980 --> 00:09:42.540
for DigitalOcean.


00:09:42.540 --> 00:09:44.540
So you can do really cool things like,


00:09:44.540 --> 00:09:49.620
I would like to upgrade my Kubernetes cluster anytime


00:09:49.620 --> 00:09:52.780
my push to the release branch or the master branch


00:09:52.780 --> 00:09:55.900
and my GitHub repo and just bake that straight into GitHub.


00:09:55.900 --> 00:09:57.860
Right, just the fact of you doing a commit


00:09:57.860 --> 00:10:01.140
or like the integration test passing or whatever.


00:10:01.140 --> 00:10:02.780
You know, whatever you wanna do with the GitHub actions,


00:10:02.780 --> 00:10:03.600
you can set that up.


00:10:03.600 --> 00:10:06.340
So there's special GitHub actions for DigitalOcean


00:10:06.340 --> 00:10:09.140
and yeah, check them out, really cool stuff.


00:10:09.140 --> 00:10:10.460
They have on their blog post,


00:10:10.460 --> 00:10:12.540
they have something about working


00:10:12.540 --> 00:10:14.780
with the Kubernetes service there


00:10:14.780 --> 00:10:16.220
and then using the GitHub actions


00:10:16.220 --> 00:10:17.620
to sort of keep it always up to date.


00:10:17.620 --> 00:10:20.900
So check them out at pythonbytes.fm/digitalocean.


00:10:20.900 --> 00:10:23.240
Get $100 free credit for new users.


00:10:23.240 --> 00:10:25.780
And I feel like GitHub actions are something I just want to learn in general.


00:10:25.780 --> 00:10:26.780
How about you?


00:10:26.780 --> 00:10:27.780
Definitely.


00:10:27.780 --> 00:10:28.780
Yeah.


00:10:28.780 --> 00:10:29.780
It seems like something that could help out with workflows.


00:10:29.780 --> 00:10:30.780
Yeah, absolutely.


00:10:30.780 --> 00:10:31.780
Cool.


00:10:31.780 --> 00:10:36.100
Well, this next one that I want to talk about is not super new, but I don't know how we've


00:10:36.100 --> 00:10:38.540
gone this long really without talking about it.


00:10:38.540 --> 00:10:39.540
So Dask.


00:10:39.540 --> 00:10:43.860
So Dask is a way to natively scale Python.


00:10:43.860 --> 00:10:47.060
And when I first thought about it, I first heard about it, I thought, "Okay, well, Dask


00:10:47.060 --> 00:10:52.600
is like this thing that takes data science workloads and runs them on clusters."


00:10:52.600 --> 00:10:55.260
And the reason I didn't get super excited was like, "Well, I don't do that much data


00:10:55.260 --> 00:10:58.540
science and I don't have enough that require clusters to run."


00:10:58.540 --> 00:11:02.180
Now, they're usually pretty small, little graphy things or something if I'm doing any


00:11:02.180 --> 00:11:03.180
data science.


00:11:03.180 --> 00:11:09.260
However, I recently had Matthew Rocklin, who's behind Dask, on TalkByThon at episode 207,


00:11:09.260 --> 00:11:10.260
and we talked a lot about it.


00:11:10.260 --> 00:11:12.460
And there's actually some really cool stuff.


00:11:12.460 --> 00:11:15.780
And I think more applicability to more people than I first realized.


00:11:15.780 --> 00:11:23.020
So basically, the idea is like, Dask will take the NumPy, SciPy sort of stack and scale


00:11:23.020 --> 00:11:24.020
it out.


00:11:24.020 --> 00:11:28.460
Alright, so you have NumPy, you have pandas, you have scikit-learn code, all that.


00:11:28.460 --> 00:11:33.620
So there's Dask versions of like NumPy arrays, and panda data frames.


00:11:33.620 --> 00:11:35.100
So there's like Dask data frames.


00:11:35.100 --> 00:11:39.700
And what you can do is just work with those, basically the same API, but instead of working


00:11:39.700 --> 00:11:42.340
just locally, it will work with them on the cluster.


00:11:42.340 --> 00:11:45.020
So suppose you have like three terabytes of data


00:11:45.020 --> 00:11:47.440
you need to process and it can't fit into RAM,


00:11:47.440 --> 00:11:49.680
so you can't just load it up into a NumPy array


00:11:49.680 --> 00:11:52.700
or a Panda DataFrame, but you can tell Dask to process


00:11:52.700 --> 00:11:54.480
and it'll share it across the cluster


00:11:54.480 --> 00:11:56.540
and do all the work and the computation


00:11:56.540 --> 00:11:58.980
and the cross-server communication that you need.


00:11:58.980 --> 00:11:59.820
Isn't that cool?


00:11:59.820 --> 00:12:00.640
- That is neat.


00:12:00.640 --> 00:12:01.540
- So it sounds really neat and that workload,


00:12:01.540 --> 00:12:03.340
like to me, doesn't really help that much


00:12:03.340 --> 00:12:04.980
'cause I don't have to do a whole lot with that.


00:12:04.980 --> 00:12:07.140
I know some people that'll be super valuable for,


00:12:07.140 --> 00:12:10.460
but you can also just run Dask locally on your machine


00:12:10.460 --> 00:12:13.820
And it'll create a little mini cluster that runs locally.


00:12:13.820 --> 00:12:17.220
And it'll use threads and processes and whatnot.


00:12:17.220 --> 00:12:19.420
And it'll even let you process more data locally


00:12:19.420 --> 00:12:22.940
than will fit into RAM and do lazy loading and all sorts


00:12:22.940 --> 00:12:24.220
of interesting stuff there.


00:12:24.220 --> 00:12:25.660
So pretty cool.


00:12:25.660 --> 00:12:27.940
It even lets you escape the gill.


00:12:27.940 --> 00:12:31.260
So you get better parallels even on your own computer.


00:12:31.260 --> 00:12:35.180
And it runs arbitrary Python code, not just NumPy and Pandas,


00:12:35.180 --> 00:12:36.820
even though that's its main use.


00:12:36.820 --> 00:12:38.220
That's actually pretty darn cool.


00:12:38.220 --> 00:12:39.020
Yeah, that's what I thought.


00:12:39.020 --> 00:12:41.620
So I decided to make it one of our topics for today.


00:12:41.620 --> 00:12:43.720
>>Yeah, the large file stuff,


00:12:43.720 --> 00:12:45.740
I definitely hit that occasionally.


00:12:45.740 --> 00:12:47.980
And I don't really want to think about it


00:12:47.980 --> 00:12:49.620
just for special cases,


00:12:49.620 --> 00:12:52.260
but being able to use running it under Dask


00:12:52.260 --> 00:12:53.540
might just speed it up.


00:12:53.540 --> 00:12:56.060
>>Yeah, you basically just create a Dask client


00:12:56.060 --> 00:12:58.420
or something and it'll locally create a little server


00:12:58.420 --> 00:12:59.740
cluster that'll process it all.


00:12:59.740 --> 00:13:00.700
It's pretty cool.


00:13:00.700 --> 00:13:03.060
Or run on a thread pool, something like that.


00:13:03.060 --> 00:13:04.820
Last thing I thought that was kind of interesting,


00:13:04.820 --> 00:13:05.660
maybe do this for me.


00:13:05.660 --> 00:13:07.980
Click on the Dask thing to open it up


00:13:07.980 --> 00:13:09.380
and just go to the bottom.


00:13:09.380 --> 00:13:10.780
Notice the supported by there?


00:13:10.780 --> 00:13:11.620
- Wow.


00:13:11.620 --> 00:13:12.440
- Isn't that cool?


00:13:12.440 --> 00:13:14.860
Supported by the NSF, supported by NVIDIA,


00:13:14.860 --> 00:13:18.260
supported by DARPA, Anaconda Inc., things like that.


00:13:18.260 --> 00:13:20.300
So here's a really interesting example


00:13:20.300 --> 00:13:22.880
of not just a project that's cool,


00:13:22.880 --> 00:13:26.380
but an open source project that's really supported


00:13:26.380 --> 00:13:30.380
by some neat companies or organizations.


00:13:30.380 --> 00:13:32.940
So anyway, I just kind of thought that was a cool thing


00:13:32.940 --> 00:13:36.380
that jumped at me as well as the proper support


00:13:36.380 --> 00:13:37.420
this project's getting.


00:13:37.420 --> 00:13:44.700
I definitely need to check this out. Yeah. Yeah, pretty cool. It might tie in with graphing. Yeah, actually there's some pretty graphs on the


00:13:44.700 --> 00:13:49.760
Yeah, the desk website. Yeah, but if you don't want to I don't know how they're using it


00:13:49.760 --> 00:13:55.900
But it's possible to do animations even within matplotlib nice and I'm highlighting an article by


00:13:55.900 --> 00:14:01.700
Carol Pandy, sorry if I'm getting that name wrong called animations in matplotlib


00:14:01.700 --> 00:14:04.180
I thought we'd already covered this but we haven't yet


00:14:04.380 --> 00:14:18.560
Just the fact that you can do animations and I guess I hadn't realized when I first started working with plots in Python that Matt Plotlib did it and you can do some lots of different ways you can simulate or do animations within.


00:14:18.560 --> 00:14:24.180
Matt Plotlib in the picture is just is this of the article.


00:14:24.180 --> 00:14:27.280
Is this a raindrop simulation.


00:14:27.460 --> 00:14:29.860
And I could just sit and watch this for like an hour.


00:14:29.860 --> 00:14:34.460
I was thinking the same thing. It's like the equivalent of white noise but visual.


00:14:34.460 --> 00:14:40.060
It's just like, yeah, it really does look like raindrops hitting a little pond or a puddle or something. It's quite cool.


00:14:40.060 --> 00:14:45.260
Right. So it has these random circles that appear dark and then as they get bigger,


00:14:45.260 --> 00:14:50.560
they get lighter and then they eventually disappear and that just happens all over the page.


00:14:50.560 --> 00:14:52.060
And it's pretty neat.


00:14:52.060 --> 00:14:54.860
But that's all using Matplotlib animations.


00:14:54.860 --> 00:14:57.860
And there is a link to the source code for that.


00:14:57.860 --> 00:15:00.860
But the tutorial goes through and talks about,


00:15:00.860 --> 00:15:02.860
there's a couple different ways to do animations,


00:15:02.860 --> 00:15:05.860
and the author prefers funk animation,


00:15:05.860 --> 00:15:08.860
and has a tutorial for animating a sine wave.


00:15:08.860 --> 00:15:10.860
The confusing part of that, to me,


00:15:10.860 --> 00:15:13.860
was that the x-axis doesn't really mean anything at that point,


00:15:13.860 --> 00:15:15.860
because the sine wave keeps moving.


00:15:15.860 --> 00:15:19.860
But it's a pretty small, concise example of how animations work.


00:15:19.860 --> 00:15:21.860
Yeah, it's super easy.


00:15:21.860 --> 00:15:25.120
you create a figure, set it up in Matplotlib,


00:15:25.120 --> 00:15:27.700
you create an initialized function that sets the data


00:15:27.700 --> 00:15:29.880
however it's gonna be, and then you have an animate function


00:15:29.880 --> 00:15:33.440
that's given a frame and it just computes the change


00:15:33.440 --> 00:15:35.640
and sets it again, yeah, it's quite nice.


00:15:35.640 --> 00:15:37.340
- Yeah, just a few lines of code.


00:15:37.340 --> 00:15:39.240
She goes on to, I think it's a she,


00:15:39.240 --> 00:15:41.600
goes on to talk about live updates,


00:15:41.600 --> 00:15:43.540
so if you've got a graph or a plot


00:15:43.540 --> 00:15:46.440
that is using data that is changing,


00:15:46.440 --> 00:15:48.640
you can live update those.


00:15:48.640 --> 00:15:52.080
animating turning a 3D plot and that's really pretty.


00:15:52.080 --> 00:15:53.960
>> Yeah. There's a bunch of cool graphs here.


00:15:53.960 --> 00:15:57.040
I could see if I had stuff to graph, I would be all over this.


00:15:57.040 --> 00:15:59.320
>> I guess there's a third party package called celluloid


00:15:59.320 --> 00:16:02.560
that makes some of the animations a little bit more concise.


00:16:02.560 --> 00:16:04.920
So she gives some examples of that too.


00:16:04.920 --> 00:16:06.200
>> Cool. Yeah, that's a good one.


00:16:06.200 --> 00:16:10.480
The last one here for us is PEP554,


00:16:10.480 --> 00:16:14.720
multiple interpreters or sub-interpreters in the standard lib.


00:16:14.720 --> 00:16:15.200
>> Oh, wow.


00:16:15.200 --> 00:16:18.280
>> So this is meta and interesting,


00:16:18.280 --> 00:16:22.280
possible so this I don't believe is approved yet this is potentially


00:16:22.280 --> 00:16:28.280
possibly coming so I don't think it's out yeah proposed in Python 3 9 and


00:16:28.280 --> 00:16:31.280
we'll just see if it's I don't see whether it's approved or not but you


00:16:31.280 --> 00:16:37.280
may be probably in 3 9 coming as this have 5 5 4 which allows for multiple


00:16:37.280 --> 00:16:41.280
sub interpreters in the standard lip so apparently see Python already had this


00:16:41.280 --> 00:16:47.280
capability to have multiple sub interpreters run but it was never exposed


00:16:47.280 --> 00:16:50.640
So deep, deep down there's some module you could use,


00:16:50.640 --> 00:16:53.040
and here's a public API on top of that.


00:16:53.040 --> 00:16:54.880
So why do you care about it?


00:16:54.880 --> 00:16:59.720
Well, it says the proposal introduces the standard lib interpreters module,


00:16:59.720 --> 00:17:03.880
like import interpreters, and currently it's provisional.


00:17:03.880 --> 00:17:07.040
And it basically exposes this core functionality


00:17:07.040 --> 00:17:10.040
of sub-interpreters already provided by the C API,


00:17:10.040 --> 00:17:11.400
along with new functionality.


00:17:11.400 --> 00:17:15.240
Here's the most important part for sharing data between interpreters.


00:17:15.240 --> 00:17:18.840
So the idea is you're going to set up some kind of channel, which is like a queue


00:17:18.840 --> 00:17:21.680
or a name pipe or something like that to pass data back.


00:17:21.680 --> 00:17:25.960
Like I can't take an object I've created in one part of my program and share it


00:17:25.960 --> 00:17:27.160
with one of these sub interpreters.


00:17:27.160 --> 00:17:30.920
I've got to like JSON serialize it or pickle it and then bring it back.


00:17:30.920 --> 00:17:34.720
Or like, there's no data sharing, which is really interesting for isolation.


00:17:34.720 --> 00:17:38.280
So the main use cases of this are well, one running code in isolation.


00:17:38.280 --> 00:17:42.240
Like if you want to work within your process and you don't want to kick off


00:17:42.280 --> 00:17:45.200
another process, say with multi-processing or something,


00:17:45.200 --> 00:17:48.740
you can still run code that you don't necessarily trust


00:17:48.740 --> 00:17:52.000
with some restrictions here because it won't have access


00:17:52.000 --> 00:17:54.580
to your memory structures or anything like that.


00:17:54.580 --> 00:17:57.020
It'll just be like a little isolated Python,


00:17:57.020 --> 00:17:59.740
but you don't have to result to multi-processing.


00:17:59.740 --> 00:18:00.580
- Oh, that's cool.


00:18:00.580 --> 00:18:01.960
- So it's kind of cool, maybe plug-in systems


00:18:01.960 --> 00:18:05.300
or something like that, or maybe even incompatible versions


00:18:05.300 --> 00:18:08.760
of modules, like maybe, you know, I've run into this


00:18:08.760 --> 00:18:10.700
with DocOpt all the time for some reason,


00:18:10.700 --> 00:18:13.220
Like MailChimp will only use this version,


00:18:13.220 --> 00:18:15.260
but something else requires another version,


00:18:15.260 --> 00:18:16.860
like one's less than something,


00:18:16.860 --> 00:18:18.900
and some other has to be greater than that.


00:18:18.900 --> 00:18:19.780
You know what I mean?


00:18:19.780 --> 00:18:22.940
So maybe you could run like that part of the code


00:18:22.940 --> 00:18:24.220
in one of these sub-interpreters


00:18:24.220 --> 00:18:26.500
and have it run on a different version.


00:18:26.500 --> 00:18:28.260
I'm not sure, that might take a little bit of juggling.


00:18:28.260 --> 00:18:30.100
But another one, the one that stood out to me,


00:18:30.100 --> 00:18:31.900
I think is pretty interesting here,


00:18:31.900 --> 00:18:35.400
is the GIL, the Global Interpreter Lock,


00:18:35.400 --> 00:18:37.460
is there because, you know,


00:18:37.460 --> 00:18:39.780
basically the way people perceive it is,


00:18:39.780 --> 00:18:42.260
is it blocks parallelism.


00:18:42.260 --> 00:18:43.860
But the reason it blocks parallelism


00:18:43.860 --> 00:18:46.100
is around memory management of shared objects, right?


00:18:46.100 --> 00:18:48.040
So any Pi object you have, it has


00:18:48.040 --> 00:18:49.660
to have reference counting and whatnot


00:18:49.660 --> 00:18:51.940
to keep its memory managed.


00:18:51.940 --> 00:18:54.840
Well, these sub-interpreters don't share objects,


00:18:54.840 --> 00:18:56.780
so they don't share the GIL, which


00:18:56.780 --> 00:19:01.100
means you could have true computational parallelism


00:19:01.100 --> 00:19:02.020
in your code.


00:19:02.020 --> 00:19:04.140
So they all have their own GIL?


00:19:04.140 --> 00:19:05.020
Effectively, yes.


00:19:05.020 --> 00:19:05.620
Yeah, OK.


00:19:05.620 --> 00:19:06.180
Exactly.


00:19:06.180 --> 00:19:08.420
So it's still the GIL, but if you have a bunch of them,


00:19:08.420 --> 00:19:09.340
then it doesn't really matter.


00:19:09.340 --> 00:19:12.220
and you don't have the overhead of multiple processes


00:19:12.220 --> 00:19:14.460
or passing data from multiple processes or all that.


00:19:14.460 --> 00:19:16.180
- The case that I'm thinking about is people


00:19:16.180 --> 00:19:19.180
that have tried to write their own little IDE


00:19:19.180 --> 00:19:23.340
or even a big IDE in Python to run Python.


00:19:23.340 --> 00:19:27.020
That you've got this issue that you still only have one GIL


00:19:27.020 --> 00:19:29.300
so you gotta launch another thread,


00:19:29.300 --> 00:19:31.140
you have to have another task or something.


00:19:31.140 --> 00:19:34.140
And this would allow something like that to be easier.


00:19:34.140 --> 00:19:35.780
- Yeah, so I don't actually, yeah, I agree.


00:19:35.780 --> 00:19:37.700
I don't know what actually would come out of this,


00:19:37.700 --> 00:19:40.660
but it looks like it has some interesting potential.


00:19:40.660 --> 00:19:42.260
And it's also interesting that it basically


00:19:42.260 --> 00:19:44.300
just formalizes what was already there.


00:19:44.300 --> 00:19:45.300
So that's pretty cool too.


00:19:45.300 --> 00:19:46.140
- Yeah.


00:19:46.140 --> 00:19:46.960
- Awesome.


00:19:46.960 --> 00:19:48.580
All right, well that's it for our main topics.


00:19:48.580 --> 00:19:50.700
You got any extra stuff you want to throw out there?


00:19:50.700 --> 00:19:52.700
- Other than I'm just super excited about PyCon.


00:19:52.700 --> 00:19:55.160
- Yes, it's PyCon Eve, I'm so excited.


00:19:55.160 --> 00:19:56.580
It's gonna be good, I'm looking forward


00:19:56.580 --> 00:19:59.040
to seeing you and everyone in Cleveland.


00:19:59.040 --> 00:20:00.140
- When are we gonna be around?


00:20:00.140 --> 00:20:02.180
Do you remember our times?


00:20:02.180 --> 00:20:04.100
- Middle of the day-ish.


00:20:04.100 --> 00:20:06.420
- Yeah, after lunch.


00:20:06.420 --> 00:20:07.660
So come try to find us out.


00:20:07.660 --> 00:20:09.620
- Yeah, we won't be at the booth all the time.


00:20:09.620 --> 00:20:12.020
We're gonna be doing other events like open spaces


00:20:12.020 --> 00:20:13.700
and live recordings in other places


00:20:13.700 --> 00:20:16.020
and maybe even attend a talk, who knows.


00:20:16.020 --> 00:20:17.380
The times that we will be there


00:20:17.380 --> 00:20:19.260
should be posted on the booth.


00:20:19.260 --> 00:20:21.580
So there'll be at least three hours each day


00:20:21.580 --> 00:20:23.100
that we're doing something interesting there


00:20:23.100 --> 00:20:23.940
that you can come by and see us.


00:20:23.940 --> 00:20:25.260
- Yep, and get stickers.


00:20:25.260 --> 00:20:26.100
- And stickers.


00:20:26.100 --> 00:20:27.180
Definitely find us at PyCon.


00:20:27.180 --> 00:20:28.020
- How about you?


00:20:28.020 --> 00:20:29.420
You've got some big news.


00:20:29.420 --> 00:20:30.700
- Yeah, I got some big news.


00:20:30.700 --> 00:20:34.260
The big news is my iOS app is finally out


00:20:34.260 --> 00:20:36.820
after negotiating, let's call it,


00:20:36.820 --> 00:20:38.940
with the App Store folks,


00:20:38.940 --> 00:20:40.100
who were better than Google Play,


00:20:40.100 --> 00:20:43.300
but still, it was quite the back and forth


00:20:43.300 --> 00:20:44.500
to get everything right.


00:20:44.500 --> 00:20:47.340
So finally, the Talk Python Training iOS app is out.


00:20:47.340 --> 00:20:50.300
Check it out at training.talkpython.fm/apps.


00:20:50.300 --> 00:20:53.660
If you install it, log in, you can get two free courses


00:20:53.660 --> 00:20:55.280
in addition to the ones you might already have.


00:20:55.280 --> 00:20:56.120
So that's pretty cool.


00:20:56.120 --> 00:20:57.940
- Yep, I installed it this morning.


00:20:57.940 --> 00:20:59.380
- You did, you're already on top of it?


00:20:59.380 --> 00:21:00.860
- Yeah, yeah, it looks great.


00:21:00.860 --> 00:21:01.900
- Right on, thanks.


00:21:01.900 --> 00:21:02.860
That's very cool.


00:21:02.860 --> 00:21:05.780
And then lastly, like I've said, our listeners are awesome.


00:21:05.780 --> 00:21:07.780
Anytime we say, here's something that's kind of unique,


00:21:07.780 --> 00:21:10.100
they're like, and the five other amazing ones.


00:21:10.100 --> 00:21:12.380
So here's one called Blessings.


00:21:12.380 --> 00:21:15.620
We talked about bullet, and we talked about cooked input.


00:21:15.620 --> 00:21:18.340
And Blessings is kind of in that realm


00:21:18.340 --> 00:21:20.700
of making terminal input nicer.


00:21:20.700 --> 00:21:22.020
And this is also output.


00:21:22.020 --> 00:21:23.180
It's not exactly the same.


00:21:23.180 --> 00:21:26.700
But Blessings lets you do things like bold your terminal output


00:21:26.700 --> 00:21:29.540
and move the cursor around and do all sorts of cool stuff.


00:21:29.540 --> 00:21:33.180
So this is from Eric Rose and Preston Daniel sent this over and said,


00:21:33.180 --> 00:21:35.420
"Hey, you should check this out in addition to the ones you're talking about."


00:21:35.420 --> 00:21:36.260
So here it is.


00:21:36.260 --> 00:21:36.860
It looks pretty cool.


00:21:36.860 --> 00:21:39.300
>> Ooh, I have the exact use case for this in mind.


00:21:39.300 --> 00:21:40.020
So yay.


00:21:40.020 --> 00:21:41.020
>> Nice. What are you going to do with it?


00:21:41.020 --> 00:21:45.740
>> I want to do, like I just got finished with reading the TDD by example.


00:21:45.740 --> 00:21:49.220
Yeah, I know. You would have thought I would have learned that beforehand.


00:21:49.220 --> 00:21:51.020
But yeah, I finally read it.


00:21:51.020 --> 00:21:57.300
One of the things is a to-do list that is bold for stuff you're working on and not.


00:21:57.300 --> 00:21:58.100
>> Nice.


00:21:58.100 --> 00:22:00.020
So anyway, he uses that.


00:22:00.020 --> 00:22:01.660
- Super cool, yeah, there it is.


00:22:01.660 --> 00:22:03.900
Awesome, all right, we have a joke coming in


00:22:03.900 --> 00:22:05.420
from Topher Chung.


00:22:05.420 --> 00:22:06.740
Do you wanna do it or should I do it?


00:22:06.740 --> 00:22:08.420
- Oh, you do it. - All right.


00:22:08.420 --> 00:22:09.860
Knock, knock, race condition.


00:22:09.860 --> 00:22:12.260
- Who's there? (laughs)


00:22:12.260 --> 00:22:16.580
- All right, knock, knock, race condition, who's there?


00:22:16.580 --> 00:22:17.860
Perfect, all right, well--


00:22:17.860 --> 00:22:19.060
- Man, these never get old.


00:22:19.060 --> 00:22:21.100
We could do-- (laughs)


00:22:21.100 --> 00:22:23.460
- I am starting to notice that the pie joke well


00:22:23.460 --> 00:22:25.580
is starting to run a little dry.


00:22:25.580 --> 00:22:27.100
We've been emptying it a lot,


00:22:27.100 --> 00:22:28.600
People have to start sending in their jokes.


00:22:28.600 --> 00:22:29.260
That was a good one.


00:22:29.260 --> 00:22:29.800
Thank you, Topher.


00:22:29.800 --> 00:22:30.640
Yeah, thanks.


00:22:30.640 --> 00:22:31.100
All right.


00:22:31.100 --> 00:22:33.800
Well, Brian, we shall reconvene in Cleveland.


00:22:33.800 --> 00:22:34.680
Yeah.


00:22:34.680 --> 00:22:35.340
Talk to you there.


00:22:35.340 --> 00:22:35.640
All right.


00:22:35.640 --> 00:22:36.300
See you, everyone there.


00:22:36.300 --> 00:22:36.720
See you, Brian.


00:22:36.720 --> 00:22:36.980
Bye.


00:22:36.980 --> 00:22:38.860
Thank you for listening to Python Bytes.


00:22:38.860 --> 00:22:41.320
Follow the show on Twitter via @PythonBytes.


00:22:41.320 --> 00:22:44.200
That's Python Bytes as in B-Y-T-E-S.


00:22:44.200 --> 00:22:47.440
And get the full show notes at PythonBytes.FM.


00:22:47.440 --> 00:22:50.660
If you have a news item you want featured, just visit PythonBytes.FM


00:22:50.660 --> 00:22:51.660
and send it our way.


00:22:51.660 --> 00:22:54.360
We're always on the lookout for sharing something cool.


00:22:54.500 --> 00:22:57.700
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:22:57.700 --> 00:23:01.060
Thank you for listening and sharing this podcast with your friends and colleagues.

