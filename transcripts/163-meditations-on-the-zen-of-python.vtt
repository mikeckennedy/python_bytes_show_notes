
00:00:00.000 --> 00:00:04.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:04.000 --> 00:00:11.040
to your earbuds. This is episode 163, recorded live on location here at the Portland West


00:00:11.040 --> 00:00:19.840
Python Meetup. Hello, everyone. And it was recorded January 7th, 2020. Brian, it's 2020.


00:00:19.840 --> 00:00:21.280
Yeah. Was that difficult to remember?


00:00:21.280 --> 00:00:25.920
It's, you know, I'm really not used to it. I just got used to 2019, so we're having problems,


00:00:25.920 --> 00:00:29.520
but we'll get there. Yeah. Well, it's really great to be here with everyone. This is the


00:00:29.520 --> 00:00:33.440
the first time we've done a live recording in a while. We do this at PyCon a lot, but PyCon's


00:00:33.440 --> 00:00:36.880
not that frequent. So here we are in Portland. It's great. - Yeah, thanks. And thanks for


00:00:36.880 --> 00:00:40.400
everybody for coming out. This is wonderful. - Yeah, absolutely. - I've got the first one,


00:00:40.400 --> 00:00:46.240
right? - You've got the first item. So some zen. I think it's a new year. It's a new decade.


00:00:46.240 --> 00:00:50.080
Let's kick it off with a little zen. - Yeah, a little zen. So we're gonna take 20 minutes and


00:00:50.080 --> 00:00:54.400
just meditate. Now, the first one I wanna talk about, there's probably gonna get this name wrong.


00:00:54.400 --> 00:00:59.120
Why did I pick this? Mosh Zadka. It's a pretty cool name though. I wrote an article called


00:00:59.120 --> 00:01:04.960
Meditations on the Zen of Python. And if you don't know about the Zen of Python, hopefully you do,


00:01:04.960 --> 00:01:09.840
we're going to put a link in the show notes, but there's also in any REPL, you can say import this


00:01:09.840 --> 00:01:15.920
and it will show you a whole bunch of little cones, little snippets of the Zen of Python.


00:01:15.920 --> 00:01:19.600
- One of the cooler things you can do in Python, second only to import antigravity.


00:01:19.600 --> 00:01:25.560
Yeah, that's good. So Moshe says that this is a, the Zen of Python is not the rules of


00:01:25.560 --> 00:01:30.280
Python or the guidelines of Python. It is full of contradictions and illusions. It is


00:01:30.280 --> 00:01:36.320
not intended to be followed. It is intended to be meditated upon. So you can read these


00:01:36.320 --> 00:01:40.640
and think about your code. And actually I kind of like it, like that idea because when


00:01:40.640 --> 00:01:44.280
I've read through them, there are some that contradict each other. I want to bring out


00:01:44.280 --> 00:01:50.200
a few of them that he points out. The first is beautiful is better than ugly. And one of his


00:01:50.200 --> 00:01:55.400
comments is that consistency helps. So things like black and flake aid and pylint are very useful in


00:01:55.400 --> 00:01:59.720
making consistent looking code. Right. But those are only table stakes, right? It's just not ugly.


00:01:59.720 --> 00:02:04.360
It's not beautiful because of that. Right. So even more important, only humans can judge what


00:02:04.360 --> 00:02:09.080
humans find beautiful. So code reviews and collaboration and a collaborative approach


00:02:09.080 --> 00:02:14.520
to writing code are the only realistic way to build beautiful code. So listening to other


00:02:14.520 --> 00:02:19.800
people is an important skill in software development and also just looking at code and seeing if you


00:02:19.800 --> 00:02:25.240
think it looks nice. I think it's good. So a couple more. Complex is better than complicated


00:02:25.240 --> 00:02:32.360
and that one always like threw me. I wasn't sure why that was in there. Mosh says when solving a


00:02:32.360 --> 00:02:37.880
hard problem it's often a case that no simple solution will do. In that case the most Pythonic


00:02:37.880 --> 00:02:43.960
strategy is to go from the bottom up, build simple tools and combine them to solve the problem.


00:02:43.960 --> 00:02:49.000
That's kind of a Unix style. So is that how you view the complex is better than complicated?


00:02:49.000 --> 00:02:52.120
I don't know if I've ever thought of it in these terms. And I do like this article because it did


00:02:52.120 --> 00:02:55.880
make me think like that. But I certainly think about software that way. I feel like so many


00:02:55.880 --> 00:02:59.160
people get caught trying to overthink it. And they're like, "Oh, I can't get started. I'm trying


00:02:59.160 --> 00:03:03.320
to like get the right, the exact right thing before I can write my first line of code." And


00:03:03.320 --> 00:03:07.640
And it's like, no, you're never going to know until you work on it for two days.


00:03:07.640 --> 00:03:08.800
Then you're like, oh, I should have done this.


00:03:08.800 --> 00:03:10.880
But well, you didn't know what you knew now.


00:03:10.880 --> 00:03:11.560
So what are you going to do?


00:03:11.560 --> 00:03:12.280
Just get started.


00:03:12.280 --> 00:03:12.720
Yeah.


00:03:12.720 --> 00:03:12.840
Right.


00:03:12.840 --> 00:03:13.520
It's my philosophy.


00:03:13.520 --> 00:03:16.000
And the last one I want to talk about is readability counts.


00:03:16.000 --> 00:03:20.720
So in the face of immense pressure to throw readability to the side and just solve a


00:03:20.720 --> 00:03:24.800
problem, the Zen to Python reminds us that readability counts writing code.


00:03:24.800 --> 00:03:28.560
So it can be read is a form of compassion for yourself and others.


00:03:28.560 --> 00:03:31.700
And one of the reasons why I highlighted this is we're going to talk about


00:03:31.700 --> 00:03:33.980
optimization and speed later on.


00:03:33.980 --> 00:03:37.900
And speed is great, but making sure that your program


00:03:37.900 --> 00:03:39.780
is readable and maintainable is very important.


00:03:39.780 --> 00:03:41.580
- I really like this article, well done,


00:03:41.580 --> 00:03:43.820
because we've all heard about the Zen and Python,


00:03:43.820 --> 00:03:45.900
we've probably all typed import this,


00:03:45.900 --> 00:03:47.900
but it's a little vague.


00:03:47.900 --> 00:03:50.020
And this is not, here's what it means,


00:03:50.020 --> 00:03:52.980
this is here's me trying to think about it


00:03:52.980 --> 00:03:55.380
sort of philosophically, and I've never seen anyone


00:03:55.380 --> 00:03:56.700
write that way about it before,


00:03:56.700 --> 00:03:57.820
and I thought it was really cool.


00:03:57.820 --> 00:03:59.880
- I'd love to have other people to come up


00:03:59.880 --> 00:04:01.380
with their ideas about it, so that'd be cool.


00:04:01.380 --> 00:04:02.420
- Yeah, absolutely.


00:04:02.420 --> 00:04:05.980
So Python and the web doesn't usually have


00:04:05.980 --> 00:04:09.900
like a James Bond sort of places getting raided


00:04:09.900 --> 00:04:14.900
by the police, secret service, international angle to it,


00:04:14.900 --> 00:04:17.340
but this next item does.


00:04:17.340 --> 00:04:18.160
- Really?


00:04:18.160 --> 00:04:19.000
- Yeah, it does.


00:04:19.000 --> 00:04:22.060
So you know what the most popular web server is in the world?


00:04:22.060 --> 00:04:24.140
Used to be Apache, now it's Nginx.


00:04:24.140 --> 00:04:26.160
Our stuff runs on Nginx, for example.


00:04:26.160 --> 00:04:28.980
However, there was some news a few weeks ago.


00:04:28.980 --> 00:04:33.980
The Nginx offices in Russia


00:04:33.980 --> 00:04:36.860
were raided by the Russian police


00:04:36.860 --> 00:04:39.180
and some of the core developers were detained.


00:04:39.180 --> 00:04:42.020
And the reason is,


00:04:42.020 --> 00:04:43.300
this is not as interesting as I made it out to be,


00:04:43.300 --> 00:04:45.380
I don't really think,


00:04:45.380 --> 00:04:46.420
but the reason was the guy who created it,


00:04:46.420 --> 00:04:49.220
I have his name here,


00:04:49.220 --> 00:04:50.940
Sisyov, he created it and at the time


00:04:50.940 --> 00:04:53.300
he was working for Rambler.ru.


00:04:53.300 --> 00:04:55.460
And Rambler.ru is like a Google Yandex type of company,


00:04:55.140 --> 00:04:57.460
search engine in Russia, and he worked on this


00:04:57.460 --> 00:04:59.580
in his spare time, and he open sourced Nginx,


00:04:59.580 --> 00:05:01.700
and then later turned it into a company.


00:05:01.700 --> 00:05:03.620
Well, Rambler came along and said,


00:05:03.620 --> 00:05:06.040
"Hey, you know what, you worked on that


00:05:06.040 --> 00:05:08.220
"while we were employing you.


00:05:08.220 --> 00:05:10.800
"Nginx is ours, we're taking it over."


00:05:10.800 --> 00:05:13.020
Meanwhile, Nginx has been bought by F5,


00:05:13.020 --> 00:05:15.580
an American company, and they own it,


00:05:15.580 --> 00:05:18.860
and so there's all this intrigue around it,


00:05:18.860 --> 00:05:20.700
and yeah, so that happened.


00:05:20.700 --> 00:05:23.460
- So a bunch of my friends from Spokane,


00:05:23.460 --> 00:05:25.920
when Agilent closed down there, went to work for F5,


00:05:25.920 --> 00:05:27.720
and I'd never even heard of them before,


00:05:27.720 --> 00:05:29.660
and then they show up in this news article.


00:05:29.660 --> 00:05:30.500
- Yeah. - It's pretty interesting.


00:05:30.500 --> 00:05:31.540
- Yeah, they're all about the networks,


00:05:31.540 --> 00:05:32.900
but apparently servers.


00:05:32.900 --> 00:05:37.560
So I received an update in email from Nginx a few days later,


00:05:37.560 --> 00:05:39.440
and I'll just read it so I get it right.


00:05:39.440 --> 00:05:41.340
They said, "Promptly following this event


00:05:41.340 --> 00:05:43.200
"that I just described, we took measures


00:05:43.200 --> 00:05:46.040
"to ensure the security of our master software builds


00:05:46.040 --> 00:05:50.960
"for Nginx, Nginx Plus, Nginx WAF, and Nginx Unit,


00:05:50.960 --> 00:05:54.640
all of which are stored on servers outside of Russia.


00:05:54.640 --> 00:05:56.720
No other products are developed in Russia.


00:05:56.720 --> 00:06:00.840
F5 remains committed to innovating with Nginx, Nginx Plus, etc.


00:06:00.840 --> 00:06:02.320
etc. all the products.


00:06:02.320 --> 00:06:05.680
And we continue to provide the best in class support.


00:06:05.680 --> 00:06:07.160
You can expect that to come.


00:06:07.160 --> 00:06:09.120
So, who knows where this is going to go.


00:06:09.120 --> 00:06:09.920
That's pretty interesting.


00:06:09.920 --> 00:06:13.040
If you use Nginx, should you worry about this?


00:06:13.040 --> 00:06:14.680
That was why I brought it up.


00:06:14.680 --> 00:06:17.440
Because if it's the most popular web server in the world,


00:06:17.440 --> 00:06:19.600
some folks, their ears are going to perk up and say,


00:06:19.600 --> 00:06:21.560
wait a minute, what?


00:06:21.560 --> 00:06:23.920
I mean, I don't think this is like a Russia


00:06:23.920 --> 00:06:26.320
trying to impose its will on the world.


00:06:26.320 --> 00:06:28.480
I think this is just a dispute between a Russian company


00:06:28.480 --> 00:06:32.000
and some Russian folks who created Nginx,


00:06:32.000 --> 00:06:34.280
but it could have knock-on effects quite far.


00:06:34.280 --> 00:06:36.040
So yeah, it's pretty interesting.


00:06:36.040 --> 00:06:38.000
I think just keep an eye on it, really.


00:06:38.000 --> 00:06:41.120
This episode is brought to you by, well, us.


00:06:41.120 --> 00:06:41.960
- Really?


00:06:41.960 --> 00:06:43.160
- Yeah, normally it's brought to you by other companies,


00:06:43.160 --> 00:06:45.640
but this time, you know, we both have interesting things


00:06:45.640 --> 00:06:47.560
to talk about and we have a gap,


00:06:47.560 --> 00:06:49.480
so I just want to tell you about some of our stuff.


00:06:49.480 --> 00:06:57.280
So if you want to check out the courses that I'm creating or, you know, set up the business stuff, just visit pythonbytes.fm/biz.


00:06:57.280 --> 00:07:02.400
And here, there's something about testing over at pythonbytes.fm/pytest.


00:07:02.400 --> 00:07:04.080
And people can check that out there as well.


00:07:04.080 --> 00:07:04.300
Cool.


00:07:04.300 --> 00:07:07.800
Did you set up a URL redirect from there?


00:07:07.800 --> 00:07:10.840
I don't want to say the whole name of the whole domain name and URL.


00:07:10.840 --> 00:07:11.640
So yeah, that's yours.


00:07:11.640 --> 00:07:19.460
It points to Python testing with PyTest, which I was published in 2017, but I still think is the very best way to get up to speed.


00:07:19.460 --> 00:07:20.460
very quickly on Python.


00:07:20.460 --> 00:07:21.460
Yeah, absolutely.


00:07:21.460 --> 00:07:23.460
And we also have a Patreon that you set up at


00:07:23.460 --> 00:07:25.460
patreon.com/pythonbytes.


00:07:25.460 --> 00:07:27.460
So, I have some thoughts on this next one,


00:07:27.460 --> 00:07:29.460
but why don't you kick it off?


00:07:29.460 --> 00:07:31.460
This one's from TheCreatorOfFlask,


00:07:31.460 --> 00:07:33.460
but not TheCurrentMaintainerOfFlask.


00:07:33.460 --> 00:07:35.460
Oh, that's true. Right.


00:07:35.460 --> 00:07:37.460
I brought this up because I was curious


00:07:37.460 --> 00:07:38.460
what your thoughts were.


00:07:38.460 --> 00:07:42.460
So, the next one is from Armin Roneker.


00:07:42.460 --> 00:07:43.460
Armin Roneker, thank you.


00:07:43.460 --> 00:07:44.460
He wrote an article called,


00:07:44.460 --> 00:07:47.460
"I'm Not Feeling the Async Pressure."


00:07:47.460 --> 00:07:49.600
The idea is like async is all the rage.


00:07:49.600 --> 00:07:52.960
We've actually talked about async quite a bit on the podcast.


00:07:52.960 --> 00:07:55.360
And I think a lot of people are concerned about it.


00:07:55.360 --> 00:07:58.100
And it's one of the reasons why it's going in places


00:07:58.100 --> 00:08:02.760
because I think there's some pressure of people to leave Python to go to Go or other things.


00:08:02.760 --> 00:08:04.760
Node.js was an early example of that.


00:08:04.760 --> 00:08:07.940
Yeah, but before you go towards async,


00:08:07.940 --> 00:08:12.360
Armin is warning people to make sure you understand flow control and back pressure.


00:08:12.360 --> 00:08:16.940
And I had never heard of back pressure, but back pressure is the resistance


00:08:17.340 --> 00:08:20.020
that opposes the flow of data through a system.


00:08:20.020 --> 00:08:22.320
Back pressure sounds quite negative,


00:08:22.320 --> 00:08:25.020
but is here to save your day.


00:08:25.020 --> 00:08:26.620
If parts of your system are async,


00:08:26.620 --> 00:08:29.980
you have to make sure the entire flow through the system


00:08:29.980 --> 00:08:32.100
doesn't have overflow points.


00:08:32.100 --> 00:08:34.020
And then Armin goes through an example


00:08:34.020 --> 00:08:35.740
with a reader and writer,


00:08:35.740 --> 00:08:37.140
and it seemed like simple code,


00:08:37.140 --> 00:08:40.160
but it really got hairy really kind of fast.


00:08:40.160 --> 00:08:44.060
And the example, yeah, got hairier than I expected.


00:08:44.060 --> 00:08:47.760
And he says, "Async brings you new foot guns.


00:08:47.760 --> 00:08:49.860
"Async and await are great ways to encourage


00:08:49.860 --> 00:08:52.260
"writing stuff that will behave catastrophically


00:08:52.260 --> 00:08:53.700
"when overloaded.


00:08:53.700 --> 00:08:55.480
"For you developers of Async libraries,


00:08:55.480 --> 00:08:57.600
"here's a New Year's resolution for you.


00:08:57.600 --> 00:08:59.180
"Give back pressure and flow control


00:08:59.180 --> 00:09:03.300
"the importance they deserve in documentation and API."


00:09:03.300 --> 00:09:06.100
And there's just some hidden things


00:09:06.100 --> 00:09:08.580
within buffers and things like that.


00:09:08.580 --> 00:09:10.820
- Yeah, well, this is a pretty nuanced article,


00:09:10.820 --> 00:09:12.020
and it's pretty interesting.


00:09:12.020 --> 00:09:13.620
It comes from someone who knows a thing or two


00:09:13.620 --> 00:09:15.500
about the network programming,


00:09:15.500 --> 00:09:18.260
Armin being the original creator of Flask.


00:09:18.260 --> 00:09:22.780
That said, my reaction to reading it,


00:09:22.780 --> 00:09:25.660
my reaction was there were a lot of examples of,


00:09:25.660 --> 00:09:27.740
and here's if you overpressure the system


00:09:27.740 --> 00:09:31.020
when you write an async system, it will fall down, right?


00:09:31.020 --> 00:09:33.700
Imagine you only allow 50 database connections


00:09:33.700 --> 00:09:35.920
and suddenly you get 10,000.


00:09:35.920 --> 00:09:37.700
My sort of reaction to this was,


00:09:37.700 --> 00:09:40.140
well, what is the response of the system gonna be


00:09:40.140 --> 00:09:41.380
when it's single threaded


00:09:41.380 --> 00:09:43.420
and you give it 10,000 connections?


00:09:43.420 --> 00:09:45.900
requests, they're all going to time out except for a call.


00:09:45.900 --> 00:09:46.940
It's just going to crash.


00:09:46.940 --> 00:09:51.340
So is it crashing in an async world, or is it crashing in a non-async world?


00:09:51.340 --> 00:09:53.540
With enough traffic, yes.


00:09:53.540 --> 00:09:57.100
But at the same time, if you can write basically the same code, put async and


00:09:57.100 --> 00:10:01.340
a wait in front of a few bits, and you can get 10 or 100 times the amount of


00:10:01.340 --> 00:10:05.380
performance out of a given piece of hardware before it crashes, that seems


00:10:05.380 --> 00:10:06.220
better to me.


00:10:06.220 --> 00:10:11.260
So I mean, I'm sympathetic to the problem, but at the same time, it's always like,


00:10:11.260 --> 00:10:13.560
well, if we give it way too much pressure,


00:10:13.560 --> 00:10:14.400
it's gonna crash.


00:10:14.400 --> 00:10:16.960
Well, if it wasn't parallel, it would crash before then.


00:10:16.960 --> 00:10:19.040
- My thoughts were like, can you,


00:10:19.040 --> 00:10:20.520
are there ways to throttle?


00:10:20.520 --> 00:10:23.240
I don't know enough about all the way to do network stuff.


00:10:23.240 --> 00:10:25.520
So if I'm setting up a web service, for instance,


00:10:25.520 --> 00:10:28.440
can I throttle the input to say,


00:10:28.440 --> 00:10:30.120
to not allow 10,000 connections


00:10:30.120 --> 00:10:32.160
and just allow 5,000 or something?


00:10:32.160 --> 00:10:33.680
- Right, right, potentially.


00:10:33.680 --> 00:10:35.720
So maybe with something like Uviacorn


00:10:35.720 --> 00:10:37.040
or something, you could set that up.


00:10:37.040 --> 00:10:38.840
I honestly don't know.


00:10:38.840 --> 00:10:44.200
It seems to me the danger that he's addressing is when the system itself is generating the input.


00:10:44.200 --> 00:10:47.240
Like we had this example of a guy who sent us a message and said,


00:10:47.240 --> 00:10:50.760
"Hey, I had this web scraping thing. It was really slow.


00:10:50.760 --> 00:10:54.680
We turned async loose on it and it crashed the server because it ran out of memory


00:10:54.680 --> 00:10:56.160
because it processed it too quickly."


00:10:56.160 --> 00:10:58.840
Right? Like there you need to find a way to slow it down.


00:10:58.840 --> 00:11:02.240
But when you're running a web server, you don't control how many people want to get to it.


00:11:02.240 --> 00:11:05.040
There's just people want to get to it and they either can or they can't.


00:11:05.040 --> 00:11:08.320
And with async, more of them would be able to than otherwise.


00:11:08.320 --> 00:11:09.160
That's my thoughts.


00:11:09.160 --> 00:11:12.920
- Okay, and I guess that my thoughts would be


00:11:12.920 --> 00:11:15.080
if you're gonna throw async at a problem,


00:11:15.080 --> 00:11:18.480
make sure that you do capacity testing on it as well.


00:11:18.480 --> 00:11:20.940
- Yeah, well, it's gonna fail somewhere else, right?


00:11:20.940 --> 00:11:24.080
And so you're gonna, maybe your database isn't set up for it.


00:11:24.080 --> 00:11:25.960
Maybe your microservices can't handle all the traffic.


00:11:25.960 --> 00:11:27.440
Like, there's gonna be something, right?


00:11:27.440 --> 00:11:28.840
It's just gonna show up somewhere else.


00:11:28.840 --> 00:11:31.640
But in general, I think you're gonna get better scalability


00:11:31.640 --> 00:11:32.680
with it than without it.


00:11:32.680 --> 00:11:35.320
So if you're not generating that pressure,


00:11:35.320 --> 00:11:36.400
if you're not generating the traffic,


00:11:36.400 --> 00:11:38.120
then I don't know what choice you have.


00:11:38.120 --> 00:11:38.960
- That's my thought.


00:11:38.960 --> 00:11:39.900
- It was an interesting read.


00:11:39.900 --> 00:11:41.680
- Yeah, it definitely was, it definitely was.


00:11:41.680 --> 00:11:43.880
Let's go for something a lot simpler


00:11:43.880 --> 00:11:47.720
than like a deep thing on streaming and buffers and async.


00:11:47.720 --> 00:11:49.960
How about a new way to time your code?


00:11:49.960 --> 00:11:50.800
- Yeah, that sounds good.


00:11:50.800 --> 00:11:52.840
- Yeah, so this one comes to us from Doug Farrell,


00:11:52.840 --> 00:11:55.180
who works on the RealPython team,


00:11:55.180 --> 00:11:56.800
and as part of their work,


00:11:56.800 --> 00:11:59.640
they've gotta time all sorts of things for their articles.


00:11:59.640 --> 00:12:01.980
You know, Dan Bader and crew over there.


00:12:01.980 --> 00:12:03.800
And so they came up with this thing,


00:12:03.800 --> 00:12:06.940
either they came out of RealPython, I think,


00:12:06.940 --> 00:12:09.900
or possibly they were just using it a lot.


00:12:09.900 --> 00:12:12.620
But this thing called code timing.


00:12:12.620 --> 00:12:13.740
So if you've got some code


00:12:13.740 --> 00:12:15.500
and you wanna know how long it takes to run,


00:12:15.500 --> 00:12:17.180
you could say, you know,


00:12:17.180 --> 00:12:19.660
create a time, like capture the date time,


00:12:19.660 --> 00:12:23.540
do some work, capture dot now again and do a delta,


00:12:23.540 --> 00:12:26.360
or you could even use performance counters and other things,


00:12:26.360 --> 00:12:27.580
but you can use this library.


00:12:27.580 --> 00:12:29.940
You just, there's a bunch of different things you can do.


00:12:29.940 --> 00:12:31.860
You create a timer class, you can call start,


00:12:31.860 --> 00:12:34.940
do some work, stop, and out comes the time.


00:12:34.940 --> 00:12:38.020
Or you can put it in a context manager, like a width block.


00:12:38.020 --> 00:12:40.860
Soon as it goes through the width block, when it's done, that bit is timed.


00:12:40.860 --> 00:12:42.740
Or you can use it as a decorator.


00:12:42.740 --> 00:12:45.300
And you can also wire up a logger, which is kind of cool.


00:12:45.300 --> 00:12:49.780
So you can see, it'll just output standard Python logging with time


00:12:49.780 --> 00:12:52.300
information of when it's doing bits of its thing.


00:12:52.300 --> 00:12:53.860
Give it a name and it'll tell you how long it took.


00:12:53.860 --> 00:12:55.740
>> Cool, well, they should add statistics too, so


00:12:55.740 --> 00:12:58.260
I can get min, max, and average, and standard deviation.


00:12:58.260 --> 00:12:59.500
>> Yeah, that would actually be cool.


00:12:59.500 --> 00:13:02.060
Well, it's open source, I bet they accept PRs.


00:13:02.060 --> 00:13:02.560
>> Yeah. >> Actually,


00:13:02.560 --> 00:13:04.420
there's a bunch of features I want to add to it.


00:13:04.420 --> 00:13:08.660
I started messing around with and I'm like, put it down.


00:13:08.660 --> 00:13:10.180
I have other things to do.


00:13:10.180 --> 00:13:11.180
I'm already too busy.


00:13:11.180 --> 00:13:12.180
I don't need this.


00:13:12.180 --> 00:13:13.180
I'm going to leave it alone.


00:13:13.180 --> 00:13:14.660
But yeah, it's a pretty cool little timer class.


00:13:14.660 --> 00:13:15.660
I'm going to probably use that.


00:13:15.660 --> 00:13:16.660
I like it.


00:13:16.660 --> 00:13:17.660
Yeah.


00:13:17.660 --> 00:13:22.580
I thought this nice follow on for this, the timer would be an article called making Python


00:13:22.580 --> 00:13:24.700
programs blazingly fast.


00:13:24.700 --> 00:13:25.700
That sounds good.


00:13:25.700 --> 00:13:26.700
We all want that.


00:13:26.700 --> 00:13:27.700
You need to time stuff.


00:13:27.700 --> 00:13:32.060
You should never, I mean, hopefully we've all learned that pre premature optimization


00:13:32.060 --> 00:13:34.300
is one of the most horrible things you can do as a programmer.


00:13:34.300 --> 00:13:38.340
>> What I've learned is it's incredibly hard to guess where something is slow.


00:13:38.340 --> 00:13:39.980
Even if you know this takes a second,


00:13:39.980 --> 00:13:41.860
you look at the code, I bet it's there.


00:13:41.860 --> 00:13:44.340
Like no, no, no, that's like five percent, it's over here.


00:13:44.340 --> 00:13:46.960
>> Yeah, because you're throwing


00:13:46.960 --> 00:13:50.860
the first version of the rough draft of your code down,


00:13:50.860 --> 00:13:52.560
and you write something down, you go like,


00:13:52.560 --> 00:13:53.900
I know I can do this better,


00:13:53.900 --> 00:13:56.220
but I'm going to just make it work here.


00:13:56.220 --> 00:13:58.060
You know you're going to have to optimize that,


00:13:58.060 --> 00:13:59.660
and it turns out to not be the slow part.


00:13:59.660 --> 00:14:00.380
>> Right, exactly.


00:14:00.380 --> 00:14:02.740
- Yeah, so you need to find out where the slow part is.


00:14:02.740 --> 00:14:06.460
So this article called "Making Python Programs Blazingly Fast"


00:14:06.460 --> 00:14:09.060
by Martin Hines goes through a few things.


00:14:09.060 --> 00:14:11.060
He doesn't cover this timer,


00:14:11.060 --> 00:14:12.900
but there's a few other ways you can time it.


00:14:12.900 --> 00:14:15.820
There's a, you can use the command line time function


00:14:15.820 --> 00:14:17.940
to just time how long something runs.


00:14:17.940 --> 00:14:18.780
- That might work.


00:14:18.780 --> 00:14:20.340
You might just go, I made a change.


00:14:20.340 --> 00:14:21.260
It was five seconds.


00:14:21.260 --> 00:14:22.300
Is it more or less?


00:14:22.300 --> 00:14:23.140
- Yeah, exactly.


00:14:23.140 --> 00:14:23.960
- That'll tell you.


00:14:23.960 --> 00:14:27.060
- Python-MC profile can tell you a whole bunch


00:14:27.060 --> 00:14:28.540
about your program, about some-


00:14:28.540 --> 00:14:29.740
- Do you see profile much?


00:14:29.740 --> 00:14:30.580
- I don't really.


00:14:30.580 --> 00:14:31.540
- Yeah, I've used it some.


00:14:31.540 --> 00:14:33.140
It's pretty awesome actually.


00:14:33.140 --> 00:14:34.780
- Yeah, and then he goes through an example


00:14:34.780 --> 00:14:37.060
of writing a wrapper function for a timer,


00:14:37.060 --> 00:14:40.800
which is similar to what this last article was.


00:14:40.800 --> 00:14:42.940
- It's one facet of GoTimer.


00:14:42.940 --> 00:14:44.620
- One of the things that he doesn't cover


00:14:44.620 --> 00:14:46.560
is the time it function within,


00:14:46.560 --> 00:14:47.700
that's built into Python,


00:14:47.700 --> 00:14:50.620
which allows you to just run a single function


00:14:50.620 --> 00:14:51.580
a whole bunch of times,


00:14:51.580 --> 00:14:54.020
and then tells you how long that takes.


00:14:54.020 --> 00:14:55.300
- Yeah, then you get your average


00:14:55.300 --> 00:14:56.420
and your deviation and all that.


00:14:56.420 --> 00:14:57.980
- But then the article goes through


00:14:57.980 --> 00:15:00.160
how to make things faster.


00:15:00.160 --> 00:15:02.380
So once you've found the slow parts,


00:15:02.380 --> 00:15:03.900
how do you make it faster?


00:15:03.900 --> 00:15:06.080
And these are some good suggestions.


00:15:06.080 --> 00:15:08.640
Use built-in types over custom types.


00:15:08.640 --> 00:15:12.420
Use caching and memoization through LRU cache,


00:15:12.420 --> 00:15:15.140
which is a built-in thing into Python.


00:15:15.140 --> 00:15:19.440
Local variables and local aliases when looping.


00:15:19.440 --> 00:15:20.780
This is something I didn't expect.


00:15:20.780 --> 00:15:23.940
This is something like if you've got multiple dot,


00:15:23.940 --> 00:15:25.760
dot, dot, dot, something,


00:15:25.760 --> 00:15:29.040
even to a function call, creating a local copy of that


00:15:29.040 --> 00:15:30.400
makes things run faster.


00:15:30.400 --> 00:15:33.160
- Every traversal of that dot is expensive in Python,


00:15:33.160 --> 00:15:35.600
whereas like C++, not so much.


00:15:35.600 --> 00:15:37.660
- Yeah, especially if it's in a loop.


00:15:37.660 --> 00:15:41.520
So, I use functions, I don't understand why this was there,


00:15:41.520 --> 00:15:43.200
kinda duh, but you know.


00:15:43.200 --> 00:15:47.900
- Well, apparently the variable lookup in a function scope


00:15:47.900 --> 00:15:50.000
is faster than a global variable lookup,


00:15:50.000 --> 00:15:52.360
or something like that that he was talking about.


00:15:52.360 --> 00:15:55.520
So by forcing all the variables into the function scope,


00:15:55.520 --> 00:15:56.520
they actually come out faster.


00:15:56.520 --> 00:15:58.400
So there's all these little weird edge cases.


00:15:58.400 --> 00:16:01.480
>> Yeah, I don't have any code that's not in a function.


00:16:01.480 --> 00:16:04.400
Don't repeatedly access attributes in loops.


00:16:04.400 --> 00:16:06.120
Okay, there's a similar sort of thing.


00:16:06.120 --> 00:16:07.520
One of the things I didn't realize is that


00:16:07.520 --> 00:16:09.600
F strings have been tuned to be very fast.


00:16:09.600 --> 00:16:11.360
So if you're doing string formatting,


00:16:11.360 --> 00:16:12.960
use F strings over other things.


00:16:12.960 --> 00:16:15.400
>> How many of you out there are using F strings these days?


00:16:15.400 --> 00:16:18.240
Right on, like that's five, 10 times faster.


00:16:18.240 --> 00:16:20.880
I don't know, there was a thing by Raymond Henninger


00:16:20.880 --> 00:16:22.000
that's mentioned in that article.


00:16:22.000 --> 00:16:23.720
>> Yeah. >> Yeah, so it's way, way faster


00:16:23.720 --> 00:16:25.320
than the other ways that it was awesome.


00:16:25.320 --> 00:16:29.320
And then use generators because I added at least experiment with generators


00:16:29.320 --> 00:16:32.680
because generators are really about saving memory.


00:16:32.680 --> 00:16:35.680
But if you're really dealing with some large data,


00:16:35.680 --> 00:16:37.600
memory saving could result in speedup.


00:16:37.600 --> 00:16:40.280
So I would say throw those in and see if it's faster.


00:16:40.280 --> 00:16:42.400
- As soon as you start hitting that page file, you're done.


00:16:42.400 --> 00:16:45.560
- I love generators. I throw them everywhere.


00:16:45.560 --> 00:16:46.320
- I do too.


00:16:46.320 --> 00:16:50.560
- Anyway, I think this was an interesting article on speeding up Python.


00:16:50.560 --> 00:16:54.520
And I warn people against premature optimization though, so, but it's fun.


00:16:54.520 --> 00:16:56.240
- Perfect, yeah, this is a really good one, I like it.


00:16:56.240 --> 00:16:58.700
And it's a good follow on to the other ones we have.


00:16:58.700 --> 00:16:59.820
Brian, yeah, you're here.


00:16:59.820 --> 00:17:03.300
So you spoke about CDK,


00:17:03.300 --> 00:17:06.540
the Cloud Development Kit from AWS.


00:17:06.540 --> 00:17:10.500
One of the big gives I have with working with the cloud is


00:17:10.500 --> 00:17:12.760
I work from home, I wanna go work in a coffee shop,


00:17:12.760 --> 00:17:14.900
maybe I'm traveling, I wanna work from the hotel


00:17:14.900 --> 00:17:15.800
and the internet's bad,


00:17:15.800 --> 00:17:18.020
I still wanna be able to work on my code


00:17:18.020 --> 00:17:20.460
and know the internet is not available.


00:17:20.460 --> 00:17:23.820
Whoops, I guess my app won't run anymore, right?


00:17:23.820 --> 00:17:28.820
Well, that is a problem,


00:17:28.820 --> 00:17:30.860
which I mostly solve by avoiding the cloud directly.


00:17:30.860 --> 00:17:33.340
But there's another cool project called LocalStack.


00:17:33.340 --> 00:17:37.500
Talked about Modo before,


00:17:37.500 --> 00:17:39.140
which is a way to mock out AWS.


00:17:39.140 --> 00:17:42.420
This is actually built on Modo,


00:17:42.420 --> 00:17:43.700
but it actually does quite a bit more.


00:17:43.700 --> 00:17:45.140
This comes to us from Graham Williamson and Jan Gazda.


00:17:45.140 --> 00:17:49.300
So thank you both for sending this in.


00:17:49.300 --> 00:17:50.780
And basically what it is,


00:17:50.780 --> 00:17:52.020
it's like a local AWS.


00:17:49.220 --> 00:17:52.860
Not just a little bit, like a lot of local AWS.


00:17:52.860 --> 00:17:57.860
It has S3, it has SES for simple email, it has EC2,


00:17:57.860 --> 00:18:01.220
it has DynamoDB, it has Lambda, it has Elasticsearch,


00:18:01.220 --> 00:18:03.020
all of that stuff locally.


00:18:03.020 --> 00:18:06.020
- He showed us like tons of huge list though.


00:18:06.020 --> 00:18:06.860
Does it have all that stuff?


00:18:06.860 --> 00:18:09.220
- It has a bunch, I don't know how many it has,


00:18:09.220 --> 00:18:11.740
but I would say it's somewhere on the order of,


00:18:11.740 --> 00:18:14.380
I don't know, 20, 25 different services.


00:18:14.380 --> 00:18:15.300
- Probably the most common ones.


00:18:15.300 --> 00:18:16.460
- Yeah, probably the most common ones.


00:18:16.460 --> 00:18:19.100
And then apparently there's also like some kind of pro


00:18:19.100 --> 00:18:21.100
I've not used, but then you get more services


00:18:21.100 --> 00:18:23.100
if you buy the pro version,


00:18:23.100 --> 00:18:25.100
but the lesser one I guess is open source,


00:18:25.100 --> 00:18:27.100
which is pretty cool. - That's neat, that's great.


00:18:27.100 --> 00:18:29.100
Like if you're on an airplane or something.


00:18:29.100 --> 00:18:31.100
- Yeah, or you just want to have a little local dev environment.


00:18:31.100 --> 00:18:33.100
- You don't have to pay for that, even though it's


00:18:33.100 --> 00:18:35.100
less than pennies. - It depends


00:18:35.100 --> 00:18:37.100
what you're doing I guess.


00:18:37.100 --> 00:18:39.100
Basically it brings together some of these tools,


00:18:39.100 --> 00:18:41.100
it brings together Modo, it brings together this thing called


00:18:41.100 --> 00:18:43.100
DynaLite,


00:18:43.100 --> 00:18:45.100
and puts sort of a unifying layer on top of it.


00:18:45.100 --> 00:18:47.100
It's pretty cool, a lot of it runs in Docker,


00:18:47.100 --> 00:18:50.940
or it helps to kind of get a repeatable experience there.


00:18:50.940 --> 00:18:52.700
- That sounds neat. - Yeah, absolutely.


00:18:52.700 --> 00:18:55.540
All right, well, that's it for our main items, everyone.


00:18:55.540 --> 00:18:56.740
Got any extras you want to share with folks?


00:18:56.740 --> 00:18:58.860
- Well, I just, I don't know if we've covered this before.


00:18:58.860 --> 00:19:03.860
I saw an advert for the Python job board on python.org.


00:19:03.860 --> 00:19:06.540
- Yeah, yeah, I saw that.


00:19:06.540 --> 00:19:07.740
I hadn't seen it before, but yeah,


00:19:07.740 --> 00:19:11.080
apparently there's the, there's now,


00:19:11.080 --> 00:19:14.340
yeah, we're joking around, we're laughing


00:19:14.340 --> 00:19:15.820
because the internet's not quite cooperating.


00:19:15.820 --> 00:19:16.820
That's fine, we don't need it.


00:19:16.820 --> 00:19:17.820
Who needs the internet?


00:19:17.820 --> 00:19:18.940
What did I say about the cloud?


00:19:18.940 --> 00:19:21.020
What did I just say, Ryan?


00:19:21.020 --> 00:19:23.140
You better hope you're not trying to test something right now.


00:19:23.140 --> 00:19:24.460
Anyway, carry on.


00:19:24.460 --> 00:19:25.700
Yeah, so the job board is cool, right?


00:19:25.700 --> 00:19:28.020
I hadn't noticed it either, but it's on python.org.


00:19:28.020 --> 00:19:29.420
- I don't know if you have to pay for stuff,


00:19:29.420 --> 00:19:31.660
but you can just list jobs, so that's cool.


00:19:31.660 --> 00:19:33.900
- Yeah, and Python's in demand.


00:19:33.900 --> 00:19:36.620
People want to have jobs writing code in Python, right?


00:19:36.620 --> 00:19:37.460
Like, you know.


00:19:37.460 --> 00:19:38.700
- Do you have any extras for us?


00:19:38.700 --> 00:19:40.300
- I do have a couple.


00:19:40.300 --> 00:19:42.420
Let me pull these up here for the audience as well.


00:19:42.420 --> 00:19:43.260
So I have pictures,


00:19:43.260 --> 00:19:45.420
'cause some of these are very, very graphical.


00:19:45.420 --> 00:19:46.940
So there's this really cool one.


00:19:46.940 --> 00:19:48.300
You'd have asked him, probably heard of the guy


00:19:48.300 --> 00:19:49.460
who created Python.


00:19:49.460 --> 00:19:50.820
So he was interviewed, he's Dutch.


00:19:50.820 --> 00:19:53.440
He was interviewed by this Dutch newspaper


00:19:53.440 --> 00:19:56.220
about programming and the title,


00:19:56.220 --> 00:19:57.340
my Dutch is a little off,


00:19:57.340 --> 00:19:59.820
but it's like Python is half my life, right?


00:19:59.820 --> 00:20:01.460
So I worked on Python for half my life


00:20:01.460 --> 00:20:02.460
or something like this.


00:20:02.460 --> 00:20:04.900
And they said, this is like a developer thing.


00:20:04.900 --> 00:20:07.260
Let's put some code and show some Python.


00:20:07.260 --> 00:20:08.340
- Yeah.


00:20:08.340 --> 00:20:09.460
- What code do we see there?


00:20:09.460 --> 00:20:10.620
- I don't know, is it JavaScript?


00:20:10.620 --> 00:20:12.420
- Document.getElementById.


00:20:12.420 --> 00:20:14.260
Yeah, not so much.


00:20:14.260 --> 00:20:15.600
- Not so much.


00:20:15.600 --> 00:20:17.320
That was a pretty interesting little thing


00:20:17.320 --> 00:20:18.720
that actually happened.


00:20:18.720 --> 00:20:20.680
The next one that's pretty interesting,


00:20:20.680 --> 00:20:22.200
I don't have a picture for it,


00:20:22.200 --> 00:20:24.160
it would just be like a bar that's rusting or something.


00:20:24.160 --> 00:20:25.320
But no, it's pretty cool.


00:20:25.320 --> 00:20:28.400
So Microsoft, they're all about C and C++, right?


00:20:28.400 --> 00:20:31.080
Like Windows is based on C and C++.


00:20:31.080 --> 00:20:33.880
They are actually been doing experimentations with Rust,


00:20:33.880 --> 00:20:36.480
and they're coming out with a Rust-based programming


00:20:36.480 --> 00:20:40.880
language for rewriting things like Windows in Rust.


00:20:40.880 --> 00:20:43.440
That's a pretty big jump for Rust.


00:20:43.440 --> 00:20:49.320
And the reason is Rust is especially good at memory management and memory ownership.


00:20:49.320 --> 00:20:53.920
So things like buffer overflow, vulnerabilities and stuff just go away in Rust.


00:20:53.920 --> 00:20:59.180
And which is like, you know, every first Tuesday, here's the seven buffer overflows.


00:20:59.180 --> 00:21:02.400
They're going to like lose all your data if you don't patch by the next two days.


00:21:02.400 --> 00:21:04.960
That you get in, like, they're trying to avoid that, I'm guessing.


00:21:04.960 --> 00:21:05.840
So that sounds interesting.


00:21:05.840 --> 00:21:06.560
You know, Rust yet?


00:21:06.560 --> 00:21:07.240
I've looked at Rust.


00:21:07.240 --> 00:21:08.000
It looked like C.


00:21:08.000 --> 00:21:09.360
I said, I'm going to go back to Python.


00:21:09.360 --> 00:21:12.520
I mean, not exactly, but it looked like C-ish.


00:21:12.960 --> 00:21:14.080
Maybe I should take a look at it.


00:21:14.080 --> 00:21:15.240
- Yeah, it's pretty interesting.


00:21:15.240 --> 00:21:16.160
Two more quick things.


00:21:16.160 --> 00:21:19.720
So I'm doing a webcast of Python for the .NET developer,


00:21:19.720 --> 00:21:22.400
kind of interactive one hour thing at Crowdcast


00:21:22.400 --> 00:21:23.440
on the Crowdcast platform.


00:21:23.440 --> 00:21:24.280
I think that'll be fun.


00:21:24.280 --> 00:21:25.280
So links in there.


00:21:25.280 --> 00:21:26.880
It's free to sign up, people can check that out.


00:21:26.880 --> 00:21:30.120
And then Reuben Lerner was talking to him today


00:21:30.120 --> 00:21:32.400
and he has a new free course that he released


00:21:32.400 --> 00:21:34.960
called Ace Python Interviews.


00:21:34.960 --> 00:21:37.720
So people out there looking for a Python job,


00:21:37.720 --> 00:21:41.560
here's like 50 little exercises and questions


00:21:41.560 --> 00:21:47.400
answered live and like live coding responses to 50 interview questions that are explained.


00:21:47.400 --> 00:21:50.600
Rubin's a really cool guy. So I think that'd be cool to look at.


00:21:50.600 --> 00:21:53.480
Yeah, yeah, absolutely. It looks really good. And that was also free. So no harm,


00:21:53.480 --> 00:21:54.680
no foul there. People want to check that out.


00:21:54.680 --> 00:22:00.440
And I've got a job opening. So if anybody's looking, I'm mostly last time I interviewed


00:22:00.440 --> 00:22:05.240
was for Python person. So I'm probably just going to take some of these things and convert them to


00:22:05.240 --> 00:22:08.120
C++. And so, you know,


00:22:08.120 --> 00:22:11.840
So if you want to pass Brian's interview, it may be a good idea to take this course.


00:22:11.840 --> 00:22:12.680
Don't tell my boss.


00:22:12.680 --> 00:22:13.160
Yeah.


00:22:13.160 --> 00:22:13.360
All right.


00:22:13.360 --> 00:22:14.680
So are we ready for a joke?


00:22:14.680 --> 00:22:16.120
We always see in our podcasts with a joke.


00:22:16.120 --> 00:22:17.280
Yeah, this one's very visual.


00:22:17.280 --> 00:22:19.440
So I'm going to put this up on the screen for you as well.


00:22:19.440 --> 00:22:21.960
And this is really like a sort of infographic.


00:22:21.960 --> 00:22:25.760
I'm a fan of infographics and this one helps you understand like the different


00:22:25.760 --> 00:22:29.200
types of jobs in software development, which can be very tricky, right?


00:22:29.200 --> 00:22:32.520
Like what is a difference between a lead developer and a full stack


00:22:32.520 --> 00:22:33.280
developer and a coder?


00:22:33.280 --> 00:22:34.080
Well, here we go.


00:22:34.080 --> 00:22:36.280
So it says, there's this person,


00:22:36.280 --> 00:22:38.320
and pretty much it's the same looking person


00:22:38.320 --> 00:22:40.660
for every job description.


00:22:40.660 --> 00:22:41.920
And it says there's a coder,


00:22:41.920 --> 00:22:43.500
and there's a little caption that says,


00:22:43.500 --> 00:22:46.700
"He writes, software engineer, he writes code.


00:22:46.700 --> 00:22:49.260
"Lead developer, he writes code.


00:22:49.260 --> 00:22:51.460
"DevOps, well, he writes code.


00:22:51.460 --> 00:22:53.260
"Infrastructure is code, right?


00:22:53.260 --> 00:22:56.200
"Data engineer, actually, what does he do?"


00:22:56.200 --> 00:22:57.700
- He writes code. - He writes code.


00:22:57.700 --> 00:22:59.840
"Full stack developer, he writes code alone.


00:22:59.840 --> 00:23:01.900
(laughter)


00:23:01.900 --> 00:23:04.160
computer programmer, he writes code too,


00:23:04.160 --> 00:23:06.080
sysadmin, he writes,


00:23:06.080 --> 00:23:07.880
this is actually a guy eating donuts


00:23:07.880 --> 00:23:10.200
with a big beard and looking very disheveled.


00:23:10.200 --> 00:23:11.160
He says he writes,


00:23:11.160 --> 00:23:13.200
in fact, we don't really know what he does.


00:23:13.200 --> 00:23:14.420
(laughing)


00:23:14.420 --> 00:23:16.360
All right, well, that's the joke for today.


00:23:16.360 --> 00:23:18.160
I guess that's the podcast for today as well.


00:23:18.160 --> 00:23:19.000
- So thanks a lot.


00:23:19.000 --> 00:23:20.400
- Yeah, thanks a bunch and thank you everyone.


00:23:20.400 --> 00:23:23.560
(audience applauding)


00:23:23.560 --> 00:23:25.400
Bye.


00:23:25.400 --> 00:23:27.120
Thank you for listening to Python Bytes.


00:23:27.120 --> 00:23:29.600
Follow the show on Twitter via @PythonBytes.


00:23:29.600 --> 00:23:32.800
And that's Python Bytes as in B-Y-T-E-S.


00:23:32.800 --> 00:23:35.940
And get the full show notes at PythonBytes.fm.


00:23:35.940 --> 00:23:39.640
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:23:39.640 --> 00:23:40.640
way.


00:23:40.640 --> 00:23:42.840
We're always on the lookout for sharing something cool.


00:23:42.840 --> 00:23:46.120
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:23:46.120 --> 00:23:49.160
Thank you for listening and sharing this podcast with your friends and colleagues.

