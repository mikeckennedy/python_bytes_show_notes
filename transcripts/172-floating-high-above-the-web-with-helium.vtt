
00:00:00.000 --> 00:00:05.700
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.700 --> 00:00:11.400
This is episode 172, recorded March 4th, 2020.


00:00:11.400 --> 00:00:12.500
And I am Brian Okken.


00:00:12.500 --> 00:00:13.400
And I'm Michael Kennedy.


00:00:13.400 --> 00:00:16.500
And this episode is brought to you by DigitalOcean.


00:00:16.500 --> 00:00:20.300
And they've got all sorts of cool stuff we'll hear about later.


00:00:20.300 --> 00:00:21.900
Who's going first? I always forget.


00:00:21.900 --> 00:00:25.900
You know, I guess I'm going to jump in on this one, because I've got some cool stuff from Hank.


00:00:25.900 --> 00:00:29.200
Hank! He even messed his name up worse than I do.


00:00:29.200 --> 00:00:30.200
Heniek?


00:00:30.200 --> 00:00:31.200
Okay, cool.


00:00:31.200 --> 00:00:32.200
All right.


00:00:32.200 --> 00:00:33.200
Sorry, Heniek.


00:00:33.200 --> 00:00:35.200
I have to give you a bad time because he gives me a bad time all the time.


00:00:35.200 --> 00:00:39.800
Yeah, well, it's a cool but unusual name, which is probably going to result in some


00:00:39.800 --> 00:00:41.440
mispronunciation.


00:00:41.440 --> 00:00:47.600
He's got a cool article he tweeted about a little while ago, a week or two ago, and I


00:00:47.600 --> 00:00:49.040
just thought it was really interesting.


00:00:49.040 --> 00:00:55.040
And basically, it's his thoughts on running Python in production.


00:00:55.040 --> 00:01:01.520
So it's kind of a look back on some places he heard interesting discussions on people


00:01:01.520 --> 00:01:09.440
running Python in production, as well as maybe got some nice little call outs on things that


00:01:09.440 --> 00:01:12.680
seem solved but aren't solved that are interesting to talk about and whatnot.


00:01:12.680 --> 00:01:14.920
So I just thought I'd maybe talk about that a little bit.


00:01:14.920 --> 00:01:15.920
Yeah.


00:01:15.920 --> 00:01:16.920
Yeah.


00:01:16.920 --> 00:01:19.560
I mean, I definitely relate to this being someone who runs Python in production.


00:01:19.560 --> 00:01:24.560
So in order to keep the two podcasts, the courses,


00:01:24.560 --> 00:01:26.760
and various other things, other services running,


00:01:26.760 --> 00:01:28.680
there's like eight servers and whatnot.


00:01:28.680 --> 00:01:33.120
So there's a non-trivial amount of devopsy production


00:01:33.120 --> 00:01:34.060
architecture stuff.


00:01:34.060 --> 00:01:36.840
It's not anywhere near Facebook, Google, or whatever,


00:01:36.840 --> 00:01:39.840
but it's way more than a $5 host running


00:01:39.840 --> 00:01:41.080
some WordPress thing.


00:01:41.080 --> 00:01:43.480
So it's meaningful, I guess.


00:01:43.480 --> 00:01:46.560
So anyway, his article, basically the premise is


00:01:46.560 --> 00:01:50.980
that he's missing a key part of the public Python discourse


00:01:50.980 --> 00:01:53.400
in that it seems like people really aren't talking


00:01:53.400 --> 00:01:55.540
about running Python in production,


00:01:55.540 --> 00:01:58.700
although maybe the exception of Instagram or Spotify.


00:01:58.700 --> 00:01:59.540
Right? - Yeah.


00:01:59.540 --> 00:02:00.360
- That's pretty interesting.


00:02:00.360 --> 00:02:01.860
And he listened to this podcast episode,


00:02:01.860 --> 00:02:04.460
or recommended, or I guess listened to this podcast episode


00:02:04.460 --> 00:02:06.900
sort of kicked him off down this path of thinking about it.


00:02:06.900 --> 00:02:08.520
Like there was this podcast,


00:02:08.520 --> 00:02:10.500
and I'm trying to remember what was it called,


00:02:10.500 --> 00:02:11.340
and here I'll pull it up.


00:02:11.340 --> 00:02:13.740
It's called, well, "Running in Production."


00:02:13.740 --> 00:02:16.220
Actually, it's a pretty interesting one


00:02:16.220 --> 00:02:21.220
by Nick Gentakis, probably mispronounced that name as well,


00:02:21.220 --> 00:02:22.660
but Nick's got an interesting thing


00:02:22.660 --> 00:02:23.500
where he talks to people


00:02:23.500 --> 00:02:26.100
from all sorts of different technology backgrounds,


00:02:26.100 --> 00:02:30.900
JavaScript or Ruby or Python or whatever.


00:02:30.900 --> 00:02:35.260
And he interviewed this guy named Gareth Thomas from the UK


00:02:35.260 --> 00:02:40.260
where they have some Plone, I believe it's Plone app,


00:02:40.260 --> 00:02:44.380
that is actually running like 10% of,


00:02:44.380 --> 00:02:48.220
getting like her afflict from 10% of the UK schools or something really interesting in this.


00:02:48.220 --> 00:02:53.980
But it was more interesting to just think about listening to that episode, looking at


00:02:53.980 --> 00:02:58.940
Hank's article and saying, when do I agree with them?


00:02:58.940 --> 00:03:00.300
When do I disagree?


00:03:00.300 --> 00:03:03.060
And he said, look, I disagree with a lot of their choices.


00:03:03.060 --> 00:03:06.020
Actually, I think they're using microservices a bunch.


00:03:06.020 --> 00:03:08.140
And he was like, thank goodness there are no mark.


00:03:08.140 --> 00:03:10.660
I'm not doing microservices basically.


00:03:11.140 --> 00:03:13.660
And it's really interesting, even if you disagree,


00:03:13.660 --> 00:03:15.600
to think about the trade-offs that people made.


00:03:15.600 --> 00:03:18.700
Because while you might make different trade-offs,


00:03:18.700 --> 00:03:20.620
that might be because you have different goals


00:03:20.620 --> 00:03:22.060
or different things you're optimizing


00:03:22.060 --> 00:03:25.420
or different experiences or things


00:03:25.420 --> 00:03:27.740
that you need over what they need.


00:03:27.740 --> 00:03:29.300
So I just think this idea of exploring


00:03:29.300 --> 00:03:31.260
how people are running Python in production,


00:03:31.260 --> 00:03:33.180
how they're solving problems, it's pretty interesting.


00:03:33.180 --> 00:03:34.660
- Yeah, I also kind of have to agree


00:03:34.660 --> 00:03:38.780
that I like the idea of hearing more about the pathway


00:03:38.780 --> 00:03:40.940
of why people are where they're at,


00:03:40.940 --> 00:03:43.380
what decisions they made and what things they faced


00:03:43.380 --> 00:03:45.820
and why they made those choices.


00:03:45.820 --> 00:03:48.540
Because that's, it's almost more interesting


00:03:48.540 --> 00:03:51.740
than what end product they came up with,


00:03:51.740 --> 00:03:53.260
is what the path they took to it.


00:03:53.260 --> 00:03:55.460
I mean, like Lord of the Rings would be nothing


00:03:55.460 --> 00:03:57.660
without the path to the end, right?


00:03:57.660 --> 00:03:58.700
- Exactly.


00:03:58.700 --> 00:04:00.060
Oh yeah, and they get the ring back.


00:04:00.060 --> 00:04:00.900
(laughing)


00:04:00.900 --> 00:04:01.740
- Yeah.


00:04:01.740 --> 00:04:05.420
- Yeah, so his article, like all good complaints,


00:04:05.420 --> 00:04:06.620
comes with a suggestion.


00:04:06.620 --> 00:04:08.700
And he says, at the end,


00:04:08.700 --> 00:04:11.400
Here's a bunch of things that could get discussed more.


00:04:11.400 --> 00:04:13.240
And so here's an offer.


00:04:13.240 --> 00:04:15.840
I would love to encourage people doing interesting stuff


00:04:15.840 --> 00:04:19.600
with Python, running websites or APIs and whatnot


00:04:19.600 --> 00:04:23.140
to tell them basically to do talks at PyCon,


00:04:23.140 --> 00:04:25.100
at meetups and in blogs.


00:04:25.100 --> 00:04:27.560
And I think he even offered to help mentor people


00:04:27.560 --> 00:04:30.320
to get those kinds of talks accepted more frequently


00:04:30.320 --> 00:04:31.160
at conferences.


00:04:31.160 --> 00:04:32.040
- I think that's a great idea.


00:04:32.040 --> 00:04:32.880
- I think it's a great idea.


00:04:32.880 --> 00:04:37.880
And maybe we should do that at the PDX Python West meetup.


00:04:38.280 --> 00:04:39.120
- That'd be fun. - Yeah.


00:04:39.120 --> 00:04:39.960
- Yeah.


00:04:39.960 --> 00:04:40.780
We think about that, but yeah,


00:04:40.780 --> 00:04:43.900
I definitely like this idea because on one hand,


00:04:43.900 --> 00:04:45.720
if it's kind of always the same story,


00:04:45.720 --> 00:04:46.680
it's not that interesting,


00:04:46.680 --> 00:04:48.520
but I do think there's a lot of trade-offs


00:04:48.520 --> 00:04:50.020
that people are making.


00:04:50.020 --> 00:04:52.760
And I think it's pretty fun to see what's working.


00:04:52.760 --> 00:04:54.320
- And it's clearly going on.


00:04:54.320 --> 00:04:56.520
We're just not talking about it because we're,


00:04:56.520 --> 00:04:59.660
I mean, you and I have noticed that there's a lot of people


00:04:59.660 --> 00:05:02.680
in the Python community that are in the website,


00:05:02.680 --> 00:05:05.240
or the website of the Python community.


00:05:05.240 --> 00:05:08.000
And it's way more than just the Instagrams


00:05:08.000 --> 00:05:10.360
and Dropboxes of the world.


00:05:10.360 --> 00:05:12.520
- Yeah, absolutely, absolutely.


00:05:12.520 --> 00:05:14.400
Yeah, it's really cool, and there's a bunch of more stuff


00:05:14.400 --> 00:05:15.660
that I'm not covering in this article,


00:05:15.660 --> 00:05:19.560
but I mostly covered it because I love his offer of like,


00:05:19.560 --> 00:05:22.320
hey, let's get more of this conversation out there.


00:05:22.320 --> 00:05:25.140
We could do open spaces, we could do Python,


00:05:25.140 --> 00:05:29.880
PyCon talks, suggestions, proposals, things like that.


00:05:29.880 --> 00:05:32.120
I guess one final thing to throw out there is Dan Bader


00:05:32.120 --> 00:05:35.360
and I did have this conversation for Talk Python


00:05:35.360 --> 00:05:37.840
and the training and Python Bytes and whatnot


00:05:37.840 --> 00:05:42.840
as well as for real Python over on Talk Python episode 215


00:05:42.840 --> 00:05:46.220
at the last PyCon, we recorded that one.


00:05:46.220 --> 00:05:49.340
So we'll see what happens with this PyCon,


00:05:49.340 --> 00:05:51.900
but that's a small contribution towards that,


00:05:51.900 --> 00:05:54.220
and that was a really popular episode,


00:05:54.220 --> 00:05:56.140
but I definitely wanna encourage people


00:05:56.140 --> 00:06:00.860
to take Henek up on this, up on his offer here,


00:06:00.860 --> 00:06:02.980
and get the word out a little bit more.


00:06:02.980 --> 00:06:05.060
- All right, yeah. - Yeah.


00:06:05.060 --> 00:06:07.320
So Brian, when I think about tests and whatnot,


00:06:07.320 --> 00:06:09.480
I feel like you should really be honest


00:06:09.480 --> 00:06:11.280
and like testing to tell a true story


00:06:11.280 --> 00:06:14.040
and you should never like cheat with testing, should you?


00:06:14.040 --> 00:06:16.360
- Yeah, only, yes, you should definitely cheat.


00:06:16.360 --> 00:06:18.040
Cheat as much as you can.


00:06:18.040 --> 00:06:19.200
- Tell us about this next one.


00:06:19.200 --> 00:06:22.720
- So this comes from, I think it's Simon Willison.


00:06:22.720 --> 00:06:23.760
The article is called


00:06:23.760 --> 00:06:27.360
How to Cheat at Unit Tests with PyTest and Black.


00:06:27.360 --> 00:06:29.120
It's got all of my favorite things,


00:06:29.120 --> 00:06:32.740
testing, PyTest, Black, and well,


00:06:32.740 --> 00:06:35.640
I'm not a fan of the unit part, but we'll get there.


00:06:35.640 --> 00:06:38.440
So the premise is, I'm going to quote this,


00:06:38.440 --> 00:06:41.680
"In pure test-driven development, you write a test first


00:06:41.680 --> 00:06:43.480
and you don't start on the implementation


00:06:43.480 --> 00:06:46.480
until you've watched a test fail."


00:06:46.480 --> 00:06:50.760
Okay, so the idea is it's the red-green refactor thing.


00:06:50.760 --> 00:06:53.460
So you write a failing test, you write code to make it pass,


00:06:53.460 --> 00:06:55.440
and then you refactor it so you're happy with it.


00:06:55.440 --> 00:06:56.800
- And if I don't do that, I'm cheating?


00:06:56.800 --> 00:06:57.640
- Yeah, apparently.


00:06:57.640 --> 00:07:00.040
- I think I might've cheated accidentally recently.


00:07:00.040 --> 00:07:01.760
- Okay, well, yeah.


00:07:01.760 --> 00:07:07.280
My thoughts partly on that is there is no such thing as pure test-driven development.


00:07:07.280 --> 00:07:13.520
Even Kemp Beck himself says he didn't make this stuff up. He rediscovered it from previous best


00:07:13.520 --> 00:07:18.720
practices. So there's no pure in test-driven development. We can't even agree on like


00:07:18.720 --> 00:07:23.360
whether mocks are good or evil or what a unit is. So whatever works for you, man.


00:07:23.360 --> 00:07:29.600
So Simon's process really was to cheat on this and the way, and I think this is just clever


00:07:29.600 --> 00:07:35.120
pragmatism. His cheat method was to write a pytest test that calls a function that


00:07:35.120 --> 00:07:39.520
he's so he's been working on a function and he thinks it's he's happy with it


00:07:39.520 --> 00:07:45.240
and he writes a test that calls it but then compares the output to you know


00:07:45.240 --> 00:07:50.000
something he knows won't pass like just the output equals false or something and


00:07:50.000 --> 00:07:54.880
you know that asserts gonna fail. So you run the test and when it fails you take


00:07:54.880 --> 00:07:58.960
a look at the output and if you're happy with the output you just copy that just


00:07:58.960 --> 00:08:03.420
highlight it, copy and paste it into your test, and now your test should pass. So


00:08:03.420 --> 00:08:09.160
this feels like cheating, but it's really just taking a manual test and


00:08:09.160 --> 00:08:13.120
turning it into an automated regression test. Especially when you're exploring


00:08:13.120 --> 00:08:16.920
stuff, I think this is a great way to build up some of your test coverage.


00:08:16.920 --> 00:08:22.460
The bit about Black is that the output might be this big long blob something,


00:08:22.460 --> 00:08:27.100
like a dictionary or a big list or something, and it might not be formatted


00:08:27.100 --> 00:08:31.300
well and that's where he just turns black on his test code and reformat it


00:08:31.300 --> 00:08:35.740
nicely and make sure it still passes. So I think this is a good time saver.


00:08:35.740 --> 00:08:41.100
This is interesting. I was working on some tests recently where I had a big chunk of


00:08:41.100 --> 00:08:45.020
test data that I wanted to compare against something kind of like he's


00:08:45.020 --> 00:08:49.420
describing here and I was really torn. I'd love to hear your thoughts on this.


00:08:49.420 --> 00:08:54.500
You know I put this at the top of my test file so I could reference it right.


00:08:54.500 --> 00:08:56.860
I didn't put it in the test, I put it kind of separate


00:08:56.860 --> 00:08:57.900
'cause I'm like, well this thing is,


00:08:57.900 --> 00:08:59.500
you know, it basically fills the screen.


00:08:59.500 --> 00:09:01.940
So I didn't want it to generate a huge test.


00:09:01.940 --> 00:09:04.580
I wanna say compare against that thing, right?


00:09:04.580 --> 00:09:07.260
And one of the thoughts I had was creating like a,


00:09:07.260 --> 00:09:09.060
I don't know, a test data module


00:09:09.060 --> 00:09:10.420
where I could pull those things out,


00:09:10.420 --> 00:09:13.140
like put it completely into a different file


00:09:13.140 --> 00:09:14.060
and pull it back.


00:09:14.060 --> 00:09:17.220
And it sounds like that might also be a nice way


00:09:17.220 --> 00:09:19.500
to organize things here, but at the same time,


00:09:19.500 --> 00:09:22.840
it takes what you would see as I'm comparing against this


00:09:22.840 --> 00:09:25.400
and it hides it away behind a label


00:09:25.400 --> 00:09:27.240
of whatever that test module is.


00:09:27.240 --> 00:09:28.220
What are your thoughts on that?


00:09:28.220 --> 00:09:29.480
Good, bad, indifferent?


00:09:29.480 --> 00:09:31.480
- I think there's lots of times where that,


00:09:31.480 --> 00:09:35.000
if that is a good thing, especially like you said,


00:09:35.000 --> 00:09:37.680
it's a data, a big structure or something


00:09:37.680 --> 00:09:39.660
that you're comparing against.


00:09:39.660 --> 00:09:41.720
One common method to do something like that


00:09:41.720 --> 00:09:44.080
is if there's like, for instance,


00:09:44.080 --> 00:09:45.760
it isn't really what you're asking,


00:09:45.760 --> 00:09:47.560
but if there's, instead of comparing


00:09:47.560 --> 00:09:49.720
a whole bunch of different fields or something,


00:09:49.720 --> 00:09:51.160
to actually compare structures.


00:09:51.160 --> 00:09:54.520
So to create the expected data structure,


00:09:54.520 --> 00:09:57.400
especially with data classes, it makes it pretty easy.


00:09:57.400 --> 00:10:00.220
You can just say, this is my expected object.


00:10:00.220 --> 00:10:04.000
And what I got back was this thing and compare those two.


00:10:04.000 --> 00:10:07.120
Now, if that thing, if all the data is huge


00:10:07.120 --> 00:10:10.600
and it makes it more clean to work with your tests,


00:10:10.600 --> 00:10:12.580
to stick it in a different file, then go for it.


00:10:12.580 --> 00:10:14.120
I think that's fine.


00:10:14.120 --> 00:10:17.040
There's a method of regression testing,


00:10:17.040 --> 00:10:20.960
which is kind of the model of, I know it works now


00:10:20.960 --> 00:10:23.920
and I'm gonna modify the code for some reason.


00:10:23.920 --> 00:10:26.760
So instead of trying to come up with


00:10:26.760 --> 00:10:28.440
thorough tests for everything,


00:10:28.440 --> 00:10:30.480
just running it with a bunch of logging and stuff


00:10:30.480 --> 00:10:31.600
and capturing all that.


00:10:31.600 --> 00:10:32.520
- Yeah, absolutely.


00:10:32.520 --> 00:10:34.240
- And then running it again and make sure


00:10:34.240 --> 00:10:36.900
all of your output and logging is the same


00:10:36.900 --> 00:10:38.760
and just comparing against that.


00:10:38.760 --> 00:10:41.140
It's yucky to work with in the long run,


00:10:41.140 --> 00:10:42.560
but in the short term,


00:10:42.560 --> 00:10:44.280
it's a pretty handy quick thing to do.


00:10:44.280 --> 00:10:46.400
- Yeah, instead of changing your entire architecture


00:10:46.400 --> 00:10:47.720
so you can mock out everything,


00:10:47.720 --> 00:10:49.200
and then who knows if you get that right,


00:10:49.200 --> 00:10:50.040
you're just like,


00:10:50.040 --> 00:10:54.160
I don't want it to change. Let's just start from like keep it where it is and


00:10:54.160 --> 00:10:58.920
if it breaks then we'll figure out if that's some a change we wanted right but


00:10:58.920 --> 00:11:01.560
just to know that it didn't change is really helpful and that's a quick easy


00:11:01.560 --> 00:11:05.480
way I like it. Right and I mean change detector tests are a smell that you need


00:11:05.480 --> 00:11:08.920
to be aware of because they're not you want to be able to to change your


00:11:08.920 --> 00:11:12.960
architecture as long as you can make sure that you're checking for you don't


00:11:12.960 --> 00:11:17.320
want the behavior to change sometimes those are good things. Yep I agree. Be a


00:11:17.320 --> 00:11:21.480
pragmatist. For sure, good advice. You know what else is good advice? To work with DigitalOcean.


00:11:21.480 --> 00:11:25.400
Yeah, definitely. We've been working with DigitalOcean and we've got a lot of our infrastructure


00:11:25.400 --> 00:11:30.680
there and we've been really happy with it. And so one of the things they've got, they've got


00:11:30.680 --> 00:11:35.480
Kubernetes clusters and all sorts of stuff. So however, getting started with hosting and running


00:11:35.480 --> 00:11:42.280
Linux servers or Kubernetes clusters and all that stuff can be a little tricky and getting into that,


00:11:42.280 --> 00:11:46.680
going from just building on your own computer to dealing with all of this, some people might not


00:11:46.680 --> 00:11:50.920
know how to do that. And so that's one of the reasons why DigitalOcean launched their new


00:11:50.920 --> 00:11:56.200
support center. So the support center makes it easier to find the answers to your questions


00:11:56.200 --> 00:12:00.840
and to get help that you need right when you need it. You can search across product docs or


00:12:00.840 --> 00:12:05.640
community tutorials and forums and it's all in one place and you can get all your answers.


00:12:05.640 --> 00:12:10.520
So I'm sure that's going to help a lot of people really a lot. So you check this out you can visit


00:12:10.520 --> 00:12:17.400
pythonbytes.fm/dosupport to see their tutorials and of course you can use


00:12:17.400 --> 00:12:22.640
pythonbytes.fm/digitalocean to get $100 credit for new users.


00:12:22.640 --> 00:12:28.120
Their tutorials are pretty awesome and I just want to tell people like how


00:12:28.120 --> 00:12:32.120
helpful they have been. So typically you know especially when I was getting


00:12:32.120 --> 00:12:36.520
started I'm like man how come this microWSGI thing won't start? It seems


00:12:36.520 --> 00:12:39.600
like it should work when I run it but it won't. It's probably something like the


00:12:39.600 --> 00:12:43.360
logging file didn't have permission to write to or something weird like that.


00:12:43.360 --> 00:12:47.320
You go search for that and it's very likely that one of these tutorials is


00:12:47.320 --> 00:12:51.080
gonna come up but you know I just went and put microWSGI into their tutorial


00:12:51.080 --> 00:12:55.260
thing here and it comes up how to serve a flask app with microWSGI and nginx on


00:12:55.260 --> 00:13:00.920
Ubuntu 1804 but then it has a drop-down oh would you like to do that on 1604 or


00:13:00.920 --> 00:13:06.360
1404 or maybe on CentOS 7 or whatever and you can actually change the


00:13:06.360 --> 00:13:09.240
operating system it's running on and the tutorial will adapt.


00:13:09.240 --> 00:13:12.040
I mean, it's ridiculous how involved it is.


00:13:12.040 --> 00:13:14.160
>> Yeah. They've really done a lot to help


00:13:14.160 --> 00:13:18.120
novice users come up to speed to get things running well.


00:13:18.120 --> 00:13:20.000
>> Yeah. I just remember how helpful that stuff was for me.


00:13:20.000 --> 00:13:22.940
So yeah, check them out at Pythonbytes.fm/digitalocean,


00:13:22.940 --> 00:13:24.240
get that credit, but then use


00:13:24.240 --> 00:13:26.280
their support center to actually get going.


00:13:26.280 --> 00:13:28.320
You know what I'm glad I don't have to support?


00:13:28.320 --> 00:13:30.600
Hundreds of microservices.


00:13:30.600 --> 00:13:32.320
>> Yeah, me too.


00:13:32.320 --> 00:13:37.320
So I think I found this from Mahenyak's article


00:13:37.320 --> 00:13:40.320
where he was talking about how people were running in production


00:13:40.320 --> 00:13:42.320
and whether or not they should have microservices or not.


00:13:42.320 --> 00:13:46.320
And that podcast I told you about, I believe those people were using microservices.


00:13:46.320 --> 00:13:48.320
He's like, "Yeah, no way. No, thank you."


00:13:48.320 --> 00:13:52.320
And referred to this article by Alexandra Noonan


00:13:52.320 --> 00:13:56.320
who works for a company called Segment.


00:13:56.320 --> 00:13:59.320
And this is like a retrospective on their experience.


00:13:59.320 --> 00:14:01.320
So they had started out with a monolith app.


00:14:01.320 --> 00:14:30.320
app. I believe they're doing JavaScript, but it doesn't really matter. Basically, it's like package managers and maintaining versions that talk to API. It's the same story for Python, you can just switch the code samples or whatever. And they're not really relevant. So there's this article called Goodbye microservices from 100 problem children to one superstar. And it talks about how segment was founded during the height of microservices as the architecture du jour, right?


00:14:30.320 --> 00:14:35.560
architecture of the day and how to sort of decided that was going to solve all their


00:14:35.560 --> 00:14:41.520
problems and at first it did but as they grew and grew and grew it turned out to be such


00:14:41.520 --> 00:14:43.680
a huge headache.


00:14:43.680 --> 00:14:48.160
They had three software developers and eventually they said basically their three software developers


00:14:48.160 --> 00:14:53.680
were spending almost all their time tracking down broken tests across these hundreds of


00:14:53.680 --> 00:14:59.880
different variations of microservices and all sorts of stuff and they were just going


00:14:59.880 --> 00:15:06.040
nowhere. So it talks about how like all the benefits that microservices should have like


00:15:06.040 --> 00:15:11.560
improved modularity, reduced testing burden, better functional composition, isolation,


00:15:11.560 --> 00:15:16.040
team autonomy, and all that. And how many of those things turned around to actually become like


00:15:16.040 --> 00:15:21.800
molasses in their world and slowed them down instead of letting them work faster. So basically,


00:15:21.800 --> 00:15:27.240
it's a really concrete story about how they took a step back from microservices, how they actually


00:15:27.240 --> 00:15:31.480
made that step backwards because with 100 microservices into one app, that's kind of


00:15:31.480 --> 00:15:37.440
a beast to pull off and how it helped them basically get everything under control again.


00:15:37.440 --> 00:15:42.200
What's really interesting is basically the places where things broke down.


00:15:42.200 --> 00:15:47.840
For example, each microservice was talking to a similar but slightly different API, like


00:15:47.840 --> 00:15:51.580
customer integrations and stuff.


00:15:51.580 --> 00:15:53.620
They had slight different needs.


00:15:53.620 --> 00:16:00.500
Over time, some of the core bits of those libraries were slightly different across the


00:16:00.500 --> 00:16:02.540
different APIs.


00:16:02.540 --> 00:16:07.180
It became, instead of having things you manage separately for each endpoint, you actually


00:16:07.180 --> 00:16:10.460
ended up with 100 different services, all of which you had to manage.


00:16:10.460 --> 00:16:14.280
If you're going to make a big change, you got to test it against all these variations.


00:16:14.280 --> 00:16:16.360
Their tests were super slow to run.


00:16:16.360 --> 00:16:18.100
There's just a lot of things.


00:16:18.100 --> 00:16:23.100
Also dependencies, as in requirements.txt type dependencies,


00:16:23.100 --> 00:16:26.600
they wouldn't upgrade all of them at the same time


00:16:26.600 --> 00:16:29.600
because they wanted to make sure that they had to test it and whatnot.


00:16:29.600 --> 00:16:33.100
If you're going to be running on, say,


00:16:33.100 --> 00:16:37.100
requests 2.1 over here and 2.2 over there,


00:16:37.100 --> 00:16:40.100
are you sure if there's a problem with that,


00:16:40.100 --> 00:16:42.100
how do you deal with that?


00:16:42.100 --> 00:16:46.100
Now, I'm a big fan of the big monolith type apps


00:16:46.100 --> 00:16:49.220
and keeping a little more control over it that way.


00:16:49.220 --> 00:16:51.180
So I'm all behind this sentiment,


00:16:51.180 --> 00:16:53.940
but I do feel like they could have actually done a lot of work


00:16:53.940 --> 00:16:57.380
on the DevOps side to make this dramatically better,


00:16:57.380 --> 00:17:00.020
and maybe, who knows, maybe they would have never switched.


00:17:00.020 --> 00:17:04.020
Yeah. Did somewhere I catch that there was a limited number of developers?


00:17:04.020 --> 00:17:05.540
I think there was like three or something.


00:17:05.540 --> 00:17:08.700
At one point there was three working on all these things.


00:17:08.700 --> 00:17:13.500
And you know, microservices are often touted as being really great ways


00:17:13.500 --> 00:17:15.580
for dev teams to have autonomy.


00:17:15.580 --> 00:17:17.860
but when your dev team consists of three,


00:17:17.860 --> 00:17:19.860
you don't really need autonomy.


00:17:19.860 --> 00:17:20.860
You're already autonomous.


00:17:20.860 --> 00:17:21.860
Yeah, exactly.


00:17:21.860 --> 00:17:22.860
That's one team.


00:17:22.860 --> 00:17:24.860
It doesn't need more than one thing to be autonomous, right?


00:17:24.860 --> 00:17:26.860
Basically speaking.


00:17:26.860 --> 00:17:29.860
But let me just take a step back and say,


00:17:29.860 --> 00:17:31.860
for example, one of the big problems I said is,


00:17:31.860 --> 00:17:33.860
we've got a hundred different services


00:17:33.860 --> 00:17:35.860
that behave similar but not the same


00:17:35.860 --> 00:17:37.860
with slightly different integrations


00:17:37.860 --> 00:17:39.860
against different API endpoints.


00:17:39.860 --> 00:17:41.860
And we're feathering out or fanning out


00:17:41.860 --> 00:17:43.860
requests to those services based on


00:17:43.860 --> 00:17:46.520
on which thing they're kind of integrated with.


00:17:46.520 --> 00:17:48.160
And the big problem was the dependencies.


00:17:48.160 --> 00:17:51.940
Well, if they had used something like Docker and Kubernetes,


00:17:51.940 --> 00:17:54.380
and they forced them all to say,


00:17:54.380 --> 00:17:56.940
we're going to install the same runtime environment


00:17:56.940 --> 00:17:59.820
with the dependencies pre-configured,


00:17:59.820 --> 00:18:01.760
and the only way you get to release a new version


00:18:01.760 --> 00:18:05.680
is you get your little thing to work with the latest image


00:18:05.680 --> 00:18:10.320
that has a uniform set of dependencies across the board.


00:18:10.320 --> 00:18:12.240
Well, that sounds like that would have completely


00:18:12.240 --> 00:18:14.520
taking out one of these problems to me, right?


00:18:14.520 --> 00:18:16.160
I mean, sure, you might have to do a little work


00:18:16.160 --> 00:18:18.680
to replace a new version of some thing,


00:18:18.680 --> 00:18:20.480
but you're keeping it in sync, right?


00:18:20.480 --> 00:18:22.480
So it seems like there's a couple of things like that


00:18:22.480 --> 00:18:23.760
that they could have done.


00:18:23.760 --> 00:18:25.600
There's other issues on the testing side


00:18:25.600 --> 00:18:27.920
that were caused by these variations.


00:18:27.920 --> 00:18:29.280
And I feel like there could have been


00:18:29.280 --> 00:18:32.520
some uniformity stuff done, especially around Docker,


00:18:32.520 --> 00:18:35.440
that could have made this a lot better, but still.


00:18:35.440 --> 00:18:37.120
I think there's a lot of interesting lessons there.


00:18:37.120 --> 00:18:39.120
- Yeah, I think I'm looking forward to reading this


00:18:39.120 --> 00:18:40.640
'cause that sounds like an interesting story.


00:18:40.640 --> 00:18:41.940
- Yeah, yeah, it's pretty good.


00:18:41.940 --> 00:18:43.100
Well done, has nice pictures.


00:18:43.100 --> 00:18:44.080
- Yeah, neat.


00:18:44.080 --> 00:18:45.220
Oh, I like pictures.


00:18:45.220 --> 00:18:47.260
- Speaking of tests and running them on the web.


00:18:47.260 --> 00:18:50.860
- Yeah, so one of the workhorses of front-end web testing


00:18:50.860 --> 00:18:52.700
is often Selenium.


00:18:52.700 --> 00:18:56.860
And Selenium's awesome, but it can be abused.


00:18:56.860 --> 00:18:59.500
And also it takes a little bit of knowledge.


00:18:59.500 --> 00:19:01.460
So there, I think we've covered others.


00:19:01.460 --> 00:19:04.120
There are some higher level APIs


00:19:04.120 --> 00:19:05.720
that use Selenium under the hood,


00:19:05.720 --> 00:19:07.380
but have a different interface.


00:19:07.380 --> 00:19:10.460
And I'm a fan of a lot of this sort of stuff


00:19:10.460 --> 00:19:14.500
because if it simplifies your life, go for it.


00:19:14.500 --> 00:19:17.180
One of the things we're gonna cover today is Helium.


00:19:17.180 --> 00:19:19.660
It's a newer, oh, it's very much newer.


00:19:19.660 --> 00:19:21.940
It's only a few months old Python library


00:19:21.940 --> 00:19:23.660
for automating web browsers.


00:19:23.660 --> 00:19:27.340
It's a project that's built on top of Selenium,


00:19:27.340 --> 00:19:29.460
and even though it's fairly new,


00:19:29.460 --> 00:19:33.340
it's already got over 1,000 stars on GitHub.


00:19:33.340 --> 00:19:34.700
That's cool.


00:19:34.700 --> 00:19:38.580
The claim is Selenium Python, 50% easier.


00:19:38.580 --> 00:19:42.140
Helium is the best Python library for web automation.


00:19:42.140 --> 00:19:44.060
Well, of course, it's saying that to itself,


00:19:44.060 --> 00:19:45.460
but it does look pretty clean.


00:19:45.460 --> 00:19:48.200
There's some pretty clean drivers


00:19:48.200 --> 00:19:51.480
to be able to control Chrome, control your browser,


00:19:51.480 --> 00:19:53.220
and navigate some stuff.


00:19:53.220 --> 00:19:54.660
So it looks good.


00:19:54.660 --> 00:19:55.620
- Yeah, I really like this.


00:19:55.620 --> 00:19:58.940
I think Michael Herrmann did a interesting job on this.


00:19:58.940 --> 00:20:01.720
And the reason that I think this is neat


00:20:01.720 --> 00:20:06.720
is it takes you away from working at the structure level.


00:20:07.660 --> 00:20:10.580
So for example, just like selecting,


00:20:10.580 --> 00:20:13.020
you say I'm going to open up this website, right?


00:20:13.020 --> 00:20:16.220
So you say start chrome, github.com/login,


00:20:16.220 --> 00:20:19.460
but instead of doing some kind of CSS selector


00:20:19.460 --> 00:20:23.020
to find the text box, you just say write,


00:20:23.020 --> 00:20:25.020
if you wanna like set something to a text box,


00:20:25.020 --> 00:20:28.020
you say write this text into,


00:20:28.020 --> 00:20:30.400
and you just give it like a short bit of text,


00:20:30.400 --> 00:20:32.540
like the label that is right before,


00:20:32.540 --> 00:20:34.780
immediately before the text box, right?


00:20:34.780 --> 00:20:37.620
So write something into username,


00:20:37.620 --> 00:20:39.100
and that'll just fill out the username thing,


00:20:39.100 --> 00:20:41.360
then write something into password,


00:20:41.360 --> 00:20:42.580
and that'll type in the password,


00:20:42.580 --> 00:20:43.900
and then click the button,


00:20:43.900 --> 00:20:46.080
they say click sign in,


00:20:46.080 --> 00:20:48.020
and it just finds the button with the text sign in.


00:20:48.020 --> 00:20:51.980
What is nice is like what a human sees about the page


00:20:51.980 --> 00:20:54.420
is how the code interacts with it.


00:20:54.420 --> 00:20:56.060
And you might say, well, that's unstable, right?


00:20:56.060 --> 00:20:57.460
What if somebody changes the text?


00:20:57.460 --> 00:20:59.980
Well, if you've ever had to work with CSS selectors,


00:20:59.980 --> 00:21:01.780
and then somebody redesigned the site,


00:21:01.780 --> 00:21:03.900
and your automation stopped working,


00:21:03.900 --> 00:21:05.080
it's not a whole lot better.


00:21:05.080 --> 00:21:07.680
So, might as well make it easy for humans


00:21:07.680 --> 00:21:08.920
as far as I see it.


00:21:08.920 --> 00:21:12.960
- Yeah, and the API is so clean and short.


00:21:12.960 --> 00:21:17.000
So you've got function calls like click,


00:21:17.000 --> 00:21:19.640
and you just give it the tag of thing,


00:21:19.640 --> 00:21:22.500
the button tag that you're gonna click on.


00:21:22.500 --> 00:21:24.840
So, man, it's pretty sweet.


00:21:24.840 --> 00:21:27.200
And to fill in a username, for instance,


00:21:27.200 --> 00:21:30.680
in a username field, it just is write,


00:21:30.680 --> 00:21:32.100
and then you give it two parameters,


00:21:32.100 --> 00:21:34.960
the name of the field that you're gonna write into,


00:21:34.960 --> 00:21:36.700
and then what you're gonna write in there.


00:21:36.700 --> 00:21:38.940
So this is pretty slick, I like it.


00:21:38.940 --> 00:21:39.780
- Yep, for sure.


00:21:39.780 --> 00:21:42.740
Too many things get the for humans tag in Python,


00:21:42.740 --> 00:21:43.980
but this one kinda could get that.


00:21:43.980 --> 00:21:45.700
- Yeah, and so since this is new,


00:21:45.700 --> 00:21:49.420
I'll be curious, and there's a lot of web testing going on,


00:21:49.420 --> 00:21:52.140
I'll be curious to see where this goes.


00:21:52.140 --> 00:21:52.980
Keep an eye on it.


00:21:52.980 --> 00:21:53.800
- Yeah, absolutely.


00:21:53.800 --> 00:21:55.580
And the easiest way, if you wanna get a sense


00:21:55.580 --> 00:21:58.420
of whether or not this is interesting for you,


00:21:58.420 --> 00:22:02.180
is just go watch the, there's a little GIF, animated GIF.


00:22:02.180 --> 00:22:03.780
Just watch that for 10 seconds,


00:22:03.780 --> 00:22:05.900
and you'll have a quick idea what you can work with there.


00:22:05.900 --> 00:22:07.420
- We've said this before,


00:22:07.420 --> 00:22:10.300
animated GIFs of how things work are a good thing


00:22:10.300 --> 00:22:12.920
to get people excited about a project.


00:22:12.920 --> 00:22:14.940
This project also includes a cheat sheet


00:22:14.940 --> 00:22:17.620
of some of the common things you might wanna do.


00:22:17.620 --> 00:22:20.460
Single page with a whole bunch of stuff.


00:22:20.460 --> 00:22:21.820
It's kinda like an FAQ,


00:22:21.820 --> 00:22:26.180
but just sort of no questions, just answers.


00:22:26.180 --> 00:22:27.020
- Yeah.


00:22:27.020 --> 00:22:28.960
So I'm pretty certain that's a good idea,


00:22:28.960 --> 00:22:31.380
but sometimes you're not certain.


00:22:31.380 --> 00:22:32.300
- Yeah, lots of times.


00:22:32.300 --> 00:22:35.660
So I remember, I don't know where I learned more about this.


00:22:35.660 --> 00:22:41.620
Either this was in physics or this was in statistics or something.


00:22:41.620 --> 00:22:44.020
I think it was one of my science classes in college.


00:22:44.020 --> 00:22:45.240
I've promptly forgotten it.


00:22:45.240 --> 00:22:50.160
So there's no way I could work with uncertainties in measurements really well.


00:22:50.160 --> 00:22:51.160
Maybe it was even engineering.


00:22:51.160 --> 00:22:54.940
I'll tell you a quick example and then I'll ask you a question.


00:22:54.940 --> 00:22:58.920
You can't look ahead and don't cheat because I have to answer the notes further down.


00:22:58.920 --> 00:23:02.680
So imagine we're back in school or you're solving a real problem.


00:23:02.680 --> 00:23:06.000
Jane, she needs to calculate the volume of her pool so she knows how much water it'll


00:23:06.000 --> 00:23:07.000
take, right?


00:23:07.000 --> 00:23:10.280
So she measures the length, the width, and the height.


00:23:10.280 --> 00:23:14.440
Now of course you can't measure it ultra precisely and also there's probably some variation in


00:23:14.440 --> 00:23:15.440
there.


00:23:15.440 --> 00:23:21.000
So she determines the length is 5.56 meters plus or minus 2.5%.


00:23:21.000 --> 00:23:23.040
Like that's her guess on the inaccuracy.


00:23:23.040 --> 00:23:26.260
And the width, 3 meters plus or minus 2.6%.


00:23:26.260 --> 00:23:31.080
And the depth, three meters, plus or minus 3.7%.


00:23:31.080 --> 00:23:33.800
So what is the uncertainty, right?


00:23:33.800 --> 00:23:35.520
That plus or minus little bit, that uncertainty.


00:23:35.520 --> 00:23:38.040
What is the uncertainty in the volume?


00:23:38.040 --> 00:23:40.760
Which is the length times the width times the depth.


00:23:40.760 --> 00:23:42.400
- Oh, I can't even remember.


00:23:42.400 --> 00:23:44.480
Is it, do you multiply them together?


00:23:44.480 --> 00:23:46.520
- Yeah, do you multiply them?


00:23:46.520 --> 00:23:47.520
Do you add them?


00:23:47.520 --> 00:23:48.560
Do you average them?


00:23:48.560 --> 00:23:49.560
Like what the heck?


00:23:49.560 --> 00:23:50.880
Do you take the max?


00:23:50.880 --> 00:23:51.880
I don't know.


00:23:51.880 --> 00:23:55.360
Well, there's actually very strict rules about how you do it.


00:23:55.360 --> 00:24:00.000
So when you multiply things, apparently, I didn't remember this but I've looked it up,


00:24:00.000 --> 00:24:04.640
apparently you add the uncertainties when you multiply things.


00:24:04.640 --> 00:24:10.640
So in this case, it's 2.5 plus 2.6 plus 2.7 is 8.8% uncertainty.


00:24:10.640 --> 00:24:12.080
That is super tricky.


00:24:12.080 --> 00:24:17.840
And these kinds of calculations are the kind that ends up with spacecrafts burrowing into


00:24:17.840 --> 00:24:23.400
like a desert or into a moon because they're like, "Oh, did we get that wrong?


00:24:23.400 --> 00:24:24.400
Whoops."


00:24:24.400 --> 00:24:28.400
did we use the wrong units or did we get the wrong uncertainty or whatever, right?


00:24:28.400 --> 00:24:32.400
So there's this really cool library called uncertainty.


00:24:32.400 --> 00:24:36.400
And it comes with all these different math operations like it has values


00:24:36.400 --> 00:24:40.400
like a float and it has a sine, right?


00:24:40.400 --> 00:24:44.400
Which is like sine, cosine, tangent sort of thing. So you can do


00:24:44.400 --> 00:24:48.400
mathematical computation but instead of having a regular float it has


00:24:48.400 --> 00:24:52.400
an uncertain float, a u-float. So you create like x would say like


00:24:52.400 --> 00:24:57.200
ufloat of one is the value and then comma point one is the uncertainty.


00:24:57.200 --> 00:25:01.200
And then if you were to do math with it and print it out,


00:25:01.200 --> 00:25:06.160
it'll say like if two times x would be two plus or minus 0.2.


00:25:06.160 --> 00:25:08.080
And so it always carries its uncertainty.


00:25:08.080 --> 00:25:12.760
And then as you take like the sign of it or you multiply or you square it,


00:25:12.760 --> 00:25:16.360
it will actually integrate and consider all those different uncertainties to


00:25:16.360 --> 00:25:18.800
give you a final uncertainty in your output.


00:25:18.800 --> 00:25:19.400
Isn't that awesome?


00:25:19.400 --> 00:25:20.880
>> That's very cool.


00:25:20.880 --> 00:25:23.160
- Yeah, this is useful in lots of fields.


00:25:23.160 --> 00:25:26.300
- Yeah, if you ever have to compute with uncertainty,


00:25:26.300 --> 00:25:30.260
this seems so glorious, this and Pint, right?


00:25:30.260 --> 00:25:33.280
If you could put this and Pint together, then it's on.


00:25:33.280 --> 00:25:35.700
'Cause Pint lets you work with different units


00:25:35.700 --> 00:25:38.600
of measurement and then add and multiply and divide them.


00:25:38.600 --> 00:25:40.520
And then you throw the uncertainty on top of that,


00:25:40.520 --> 00:25:41.360
boom, you're golden.


00:25:41.360 --> 00:25:43.820
- Yeah, yeah, that'd be cool.


00:25:43.820 --> 00:25:46.300
We had worked with once with a measurement value


00:25:46.300 --> 00:25:48.940
that it was a power level for a cell phone,


00:25:48.940 --> 00:25:52.640
and the uncertainty ended up being plus or minus


00:25:52.640 --> 00:25:56.940
like the amount of power that the sun produces.


00:25:56.940 --> 00:25:59.980
So it's like we essentially don't know the answer


00:25:59.980 --> 00:26:01.320
if that's the uncertainty.


00:26:01.320 --> 00:26:02.900
- Right, right, right.


00:26:02.900 --> 00:26:05.240
It could take a double A battery or it could melt the earth.


00:26:05.240 --> 00:26:06.500
We're not really sure which.


00:26:06.500 --> 00:26:08.140
- We're not sure which, yeah.


00:26:08.140 --> 00:26:10.580
Not ready for shipment yet.


00:26:10.580 --> 00:26:13.040
- Exactly, maybe we gotta like get a little


00:26:13.040 --> 00:26:14.400
more accuracy there.


00:26:14.400 --> 00:26:16.220
Anyway, this comes from Tim Head


00:26:16.220 --> 00:26:18.260
who mentioned it on Talk Python


00:26:18.260 --> 00:26:20.360
where we recently did an episode on Binder,


00:26:20.360 --> 00:26:22.720
which is super interesting, but not yet released.


00:26:22.720 --> 00:26:24.480
So eventually we'll talk more about that there as well.


00:26:24.480 --> 00:26:26.980
Anyway, Uncertainty, cool little library


00:26:26.980 --> 00:26:28.860
if you gotta do any sort of computation


00:26:28.860 --> 00:26:29.700
with this kind of stuff.


00:26:29.700 --> 00:26:31.700
- Yeah, I think it's cool, but I'm not sure about it yet.


00:26:31.700 --> 00:26:33.480
- Yeah, well, can you ever be?


00:26:33.480 --> 00:26:34.320
- No.


00:26:34.320 --> 00:26:35.900
- But you can be sure about the level


00:26:35.900 --> 00:26:38.040
at which you can't be sure using it.


00:26:38.040 --> 00:26:38.880
- Yes.


00:26:38.880 --> 00:26:40.360
- Awesome.


00:26:40.360 --> 00:26:44.180
I'm pretty sure that I wish my Python prompt was cooler.


00:26:44.180 --> 00:26:47.560
- Well, I'm okay with my Python prompt, but--


00:26:47.560 --> 00:26:49.560
I don't know. I mean, come on.


00:26:49.560 --> 00:26:50.800
But think of all the options.


00:26:50.800 --> 00:26:53.120
- You could do anything you wanted.


00:26:53.120 --> 00:26:55.560
And I never thought to do that.


00:26:55.560 --> 00:26:58.840
I mean, I do it with my, like a bash prompt and stuff.


00:26:58.840 --> 00:27:02.320
You know, we put our virtual environment name in there.


00:27:02.320 --> 00:27:03.280
It's stuff like that.


00:27:03.280 --> 00:27:05.160
- Get status, get branch, all that kind of stuff.


00:27:05.160 --> 00:27:06.760
- Yeah, definitely.


00:27:06.760 --> 00:27:08.240
So you can change those things.


00:27:08.240 --> 00:27:09.120
So why not?


00:27:09.120 --> 00:27:12.880
This article comes from, I think, Arpit Bajani.


00:27:12.880 --> 00:27:15.660
And it's called "Personalize Your Python Prompt."


00:27:15.660 --> 00:27:17.800
Those three right angle, right, what is it?


00:27:17.800 --> 00:27:20.160
The right, greater than signs?


00:27:20.160 --> 00:27:23.200
That are together when you're doing interactive Python.


00:27:23.200 --> 00:27:25.120
Apparently you can muck with those.


00:27:25.120 --> 00:27:28.400
There's a sys.ps1 variable that if you sign to that,


00:27:28.400 --> 00:27:30.620
you can change it to whatever you want.


00:27:30.620 --> 00:27:34.600
And of course, the author didn't stop there,


00:27:34.600 --> 00:27:37.440
said, oh, it can be dynamic also,


00:27:37.440 --> 00:27:42.360
but you have to have a non-string object to make it dynamic.


00:27:42.360 --> 00:27:44.880
So he gives a little example to where you can,


00:27:44.880 --> 00:27:46.820
And the way you do that is you have an object


00:27:46.820 --> 00:27:49.960
that has a Dunderster method.


00:27:49.960 --> 00:27:53.340
If that has dynamic action, that gets called every time.


00:27:53.340 --> 00:27:55.920
So for every prompt, so this is pretty neat.


00:27:55.920 --> 00:27:57.840
And he has an example of doing some stuff,


00:27:57.840 --> 00:28:00.140
but I wanted, I didn't have time to do it this morning,


00:28:00.140 --> 00:28:01.560
but I was working on it.


00:28:01.560 --> 00:28:04.880
I was trying to get a prompt that would mimic


00:28:04.880 --> 00:28:08.000
the Windows command prompt,


00:28:08.000 --> 00:28:10.720
because apparently I want that on my Mac,


00:28:10.720 --> 00:28:11.920
'cause that would be fun.


00:28:11.920 --> 00:28:14.800
- You just wanna confuse people, like, what are you doing?


00:28:14.800 --> 00:28:16.240
- This is insane.


00:28:16.240 --> 00:28:20.760
- I mean, C colon backslash greater than was easy,


00:28:20.760 --> 00:28:24.820
but I wanted to also put the path in there


00:28:24.820 --> 00:28:28.360
and flip the direction of the slashes and stuff like that.


00:28:28.360 --> 00:28:30.240
- Yeah, yeah, that's really cool.


00:28:30.240 --> 00:28:33.620
And I didn't, one, didn't know that you could just set


00:28:33.620 --> 00:28:37.320
that import sys, sys.ps1 equals something,


00:28:37.320 --> 00:28:38.880
and that now is your prompt.


00:28:38.880 --> 00:28:42.640
But I didn't really think that it could be a dynamic object


00:28:42.640 --> 00:28:45.880
that has a str, dunder str, it's pretty cool.


00:28:45.880 --> 00:28:46.720
- Yeah, that is neat.


00:28:46.720 --> 00:28:49.920
- You could easily set up something like the Jupyter,


00:28:49.920 --> 00:28:51.880
you know how in Jupyter notebooks you have bracket one,


00:28:51.880 --> 00:28:54.200
bracket two, bracket three for your various calculations?


00:28:54.200 --> 00:28:56.860
Like five lines, you got that in your Python prompt


00:28:56.860 --> 00:28:57.960
if you want it.


00:28:57.960 --> 00:28:59.160
It doesn't have very much value


00:28:59.160 --> 00:29:00.320
'cause you can't change the order,


00:29:00.320 --> 00:29:02.200
but still, it's pretty interesting, I think.


00:29:02.200 --> 00:29:03.660
- Yeah, yeah, that's cool.


00:29:03.660 --> 00:29:04.500
- Yeah, quite cool.


00:29:04.500 --> 00:29:06.040
All right, well, that's a good little find,


00:29:06.040 --> 00:29:07.320
a quick and easy to play with.


00:29:07.320 --> 00:29:09.280
- Well, do you have any extra stuff for us?


00:29:09.280 --> 00:29:10.160
- Oh, not really.


00:29:10.160 --> 00:29:11.600
I'll go and throw one thing out for you.


00:29:11.600 --> 00:29:14.600
So I finished my Python for absolute beginners course.


00:29:14.600 --> 00:29:21.600
And so now I'm starting a new course, which is like adding a CMS to a proper data driven


00:29:21.600 --> 00:29:22.600
web app.


00:29:22.600 --> 00:29:26.840
So if you've got a flask app or pyramid or Django or something like that, and you want


00:29:26.840 --> 00:29:31.360
to let other people write part of the site, and the rest is more like Amazon would be


00:29:31.360 --> 00:29:35.160
with you know, here's the categories, here's the products, here's the product page, and


00:29:35.160 --> 00:29:37.680
here's a review page, like, you know, very structured, but you want to just let them


00:29:37.680 --> 00:29:39.260
like write free form stuff.


00:29:39.260 --> 00:29:44.180
So I'm working on a course that lets you kind of add that to existing sites.


00:29:44.180 --> 00:29:45.180
So that'll be fun.


00:29:45.180 --> 00:29:46.180
I'm having a lot of fun working on that.


00:29:46.180 --> 00:29:47.180
- Okay, interesting.


00:29:47.180 --> 00:29:48.180
- Yeah, yeah.


00:29:48.180 --> 00:29:52.140
- Is this kind of where the Markdown work that you were working on comes in play?


00:29:52.140 --> 00:29:53.140
- Yes, exactly.


00:29:53.140 --> 00:29:59.100
So I decided the work that I did for Talk by Don Training to build out the landing pages


00:29:59.100 --> 00:30:06.020
and the interesting stuff to basically make a whole section of that site just driven by


00:30:06.020 --> 00:30:09.180
Markdown and just editors and whatnot.


00:30:09.180 --> 00:30:13.060
I'm going to take that, extract it, and sort of take it to the next level,


00:30:13.060 --> 00:30:17.120
like with rich Markdown editors and, you know, database backends and stuff like that.


00:30:17.120 --> 00:30:17.580
It'd be fun.


00:30:17.580 --> 00:30:17.940
Nice.


00:30:17.940 --> 00:30:18.500
Okay.


00:30:18.500 --> 00:30:18.780
Cool.


00:30:18.780 --> 00:30:20.500
Shall we close it out with a limerick?


00:30:20.500 --> 00:30:21.460
Sure.


00:30:21.460 --> 00:30:26.340
I'm not very good at limericks, so I'll give this a shot, but this


00:30:26.340 --> 00:30:27.860
comes to us from Alexander A.


00:30:27.860 --> 00:30:30.620
He sent this over, he had written it.


00:30:30.620 --> 00:30:32.420
This is his, he wrote it recently.


00:30:32.420 --> 00:30:36.580
And this is submitted, apparently there's some kind of limerick contest at Manning.


00:30:37.460 --> 00:30:44.740
you win free content like books and whatnot if you submit a winning programming limerick.


00:30:44.740 --> 00:30:47.780
All right, so here goes coding environments in three parts.


00:30:47.780 --> 00:30:51.860
To this day, some prefer bbedit. VS Code is now getting some credit.


00:30:51.860 --> 00:30:57.460
Vim and Emacs are fine, so are Atom and Sublime. But it doesn't matter much if you don't let it.


00:30:57.460 --> 00:31:02.100
But wait, let's not forget IDEs. Using PyCharm sure is a breeze.


00:31:02.100 --> 00:31:04.700
Komodo, Eclipse, and Idea,


00:31:04.700 --> 00:31:06.460
Clion is my panacea,


00:31:06.460 --> 00:31:08.620
and Xcode leaves me at ease.


00:31:08.620 --> 00:31:11.460
But Jupyter Notebook is also legit.


00:31:11.460 --> 00:31:13.600
Data scientists must prefer it.


00:31:13.600 --> 00:31:15.100
In the browser you code,


00:31:15.100 --> 00:31:16.700
results are then showed.


00:31:16.700 --> 00:31:20.100
But good luck when you try to use Git.


00:31:20.100 --> 00:31:22.940
I love it. It's good, right?


00:31:22.940 --> 00:31:24.340
>> This is great. Yeah.


00:31:24.340 --> 00:31:26.180
>> Oh my God, it's so good.


00:31:26.180 --> 00:31:28.980
Especially that last line. I love it.


00:31:28.980 --> 00:31:31.060
>> Definitely makes the whole thing worth it.


00:31:31.060 --> 00:31:32.060
Yeah.


00:31:32.060 --> 00:31:33.060
Yes, indeed.


00:31:33.060 --> 00:31:34.060
So, well done, Alexander.


00:31:34.060 --> 00:31:37.060
Thanks for sharing that and letting us use it on the show.


00:31:37.060 --> 00:31:38.060
That's great.


00:31:38.060 --> 00:31:39.060
All right.


00:31:39.060 --> 00:31:40.060
Anything else?


00:31:40.060 --> 00:31:41.060
Do you got anything you want to share with folks?


00:31:41.060 --> 00:31:44.060
I guess I jumped ahead of you and did my limerick.


00:31:44.060 --> 00:31:45.060
No, no.


00:31:45.060 --> 00:31:46.060
No, it's good.


00:31:46.060 --> 00:31:50.060
We've got a whole bunch of great feedback from the most recent testing code episodes.


00:31:50.060 --> 00:31:52.060
So, it's been good.


00:31:52.060 --> 00:31:53.060
Yeah.


00:31:53.060 --> 00:31:54.060
What are some of the ones?


00:31:54.060 --> 00:31:56.060
I know you just did one with Anthony Shaw.


00:31:56.060 --> 00:31:57.060
Yeah, we did.


00:31:57.060 --> 00:31:58.060
And his plugin.


00:31:58.060 --> 00:31:59.060
Yeah.


00:31:59.060 --> 00:32:00.060
So, we talked about security.


00:32:00.060 --> 00:32:07.340
about Django recently and just the most recent one is talking about the most


00:32:07.340 --> 00:32:14.100
downloaded pytest plugins. So Anthony Sotile and I talked about 28 of the top


00:32:14.100 --> 00:32:18.240
plugins. That sounds like the perfect show, that's really great. Yeah, really


00:32:18.240 --> 00:32:21.340
geeked out on a lot of stuff. I found some super interesting ones I'm gonna


00:32:21.340 --> 00:32:25.660
talk about the next show but we'll leave it at that. Awesome, thanks. Cool, all right.


00:32:25.660 --> 00:32:29.340
Yeah, well, thank you as well. Happy to be here with you, like every week. Bye.


00:32:29.340 --> 00:32:29.980
Bye.


00:32:29.980 --> 00:32:34.140
Thank you for listening to Python Bytes. Follow the show on Twitter @PythonBytes,


00:32:34.140 --> 00:32:40.140
that's Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.fm.


00:32:40.140 --> 00:32:45.020
If you have a news item you want featured, just visit PythonBytes.fm and send it our way.


00:32:45.020 --> 00:32:48.300
We're always on the lookout for sharing something cool. This is Brian Okken,


00:32:48.300 --> 00:32:50.380
and on behalf of myself and Michael Kennedy,


00:32:50.380 --> 00:32:53.740
thank you for listening and sharing this podcast with your friends and colleagues.

