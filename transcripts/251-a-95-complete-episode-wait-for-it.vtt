WEBVTT

00:00:00.001 --> 00:00:03.880
Hey there, thanks for listening. Before we jump into this episode, I just want to remind you

00:00:03.880 --> 00:00:09.660
that this episode is brought to you by us over at Talk Python Training and Brian through his pytest

00:00:09.660 --> 00:00:14.940
book. So if you want to get hands-on and learn something with Python, be sure to consider our

00:00:14.940 --> 00:00:21.680
courses over at Talk Python Training. Visit them via pythonbytes.fm/courses. And if you're

00:00:21.680 --> 00:00:27.280
looking to do testing and get better with pytest, check out Brian's book at pythonbytes.fm slash

00:00:27.280 --> 00:00:32.240
pytest. Enjoy the episode. Hello and welcome to Python Bytes, where we deliver Python news and

00:00:32.240 --> 00:00:40.380
headlines directly to your earbuds. This is episode 251, recorded September 22nd? Wow. 2021. I am

00:00:40.380 --> 00:00:45.960
Brian Okken. I'm Michael Kennedy. And I'm Brett Cannon. So do we need to introduce Brett? I mean,

00:00:45.960 --> 00:00:50.860
thanks for being on the show, Brett. Welcome back. We can introduce my cat, Gidget, for all those on

00:00:50.860 --> 00:00:54.780
the live stream, because she's in frame at the moment, just lounging around on a nice, comfy

00:00:54.780 --> 00:01:02.740
blanket. Actually from Google, from when I won an open source peer bonus. You won your way

00:01:02.740 --> 00:01:07.000
more information than anyone probably cared, but there you go. Nice. Yeah, my dog is around

00:01:07.000 --> 00:01:12.020
here somewhere, but probably won't show up and screen. Well, let's just get started. I think

00:01:12.020 --> 00:01:19.960
if people don't know Brett, they need to get out from under a rock. So yeah, absolutely. Live chat

00:01:19.960 --> 00:01:25.960
real quick. Brandon, Brainerd, thanks. They gave you a cat? No. Yeah. There's a long story

00:01:25.960 --> 00:01:33.380
about how he got Gidget, but no. Cat did not come with a blanket. Nice. So the first thing that I want

00:01:33.380 --> 00:01:39.760
to talk about comes to us from, this is both recommended and created by Dan Lutik. So Dan,

00:01:39.760 --> 00:01:46.160
nice work. I love these little tools that you can run against your code that will just reformat them to

00:01:46.160 --> 00:01:50.640
be better. You know, one of the, probably the most popular and well-known one is black, right? We've

00:01:50.640 --> 00:01:58.160
all heard of black, which is great. But there's other ones like Flint, F-L-Y-N-T is one of my favorites

00:01:58.160 --> 00:02:03.480
that converts all the various string formattings to F-strings, which is great. So here's another one

00:02:03.480 --> 00:02:09.600
around typing called auto-optional. And Brett, I think people maybe are using optional a little bit

00:02:09.600 --> 00:02:14.360
wrong in the typing space in Python. What do you think? Or just not using it when they should be.

00:02:14.360 --> 00:02:21.560
Yeah. That's definitely a thing that was actually, I think, discussed early on about, do we even need

00:02:21.560 --> 00:02:26.900
to have the concept of optional to represent, Hey, this thing can be whatever the type is or none.

00:02:26.900 --> 00:02:32.840
And what was the thinking there? Because, you know, languages like C-sharp, Java, C++, you can have a

00:02:32.840 --> 00:02:37.540
thing and then it can be null. And C-sharp, there's value types, but generally most things are pointers and

00:02:37.540 --> 00:02:41.960
they can be set to null. And you don't have to have some kind of a special type to say it's

00:02:41.960 --> 00:02:45.720
either a user or it's null. You just say it's a user because it could be a reference type,

00:02:45.720 --> 00:02:51.100
but also it could be null or nil or whatever. But Swift and Python have this concept of you must

00:02:51.100 --> 00:02:54.040
explicitly say that it could not have a value.

00:02:54.040 --> 00:03:00.740
Oh, so explicit is better than implicit, as we all know. The other thing is obviously

00:03:00.740 --> 00:03:06.420
having none accidentally sneak in when you don't want it. As you mentioned, Michael, Swift specifically

00:03:06.420 --> 00:03:12.180
does not let you have null. You can't have null references. You have to either declare that it

00:03:12.180 --> 00:03:16.700
will accept null and you have to check or it won't take it at all. And it's a similar thing here. No one

00:03:16.700 --> 00:03:20.600
likes it when they actually find out, oh, the null type's not callable because you accidentally pass

00:03:20.600 --> 00:03:20.900
null.

00:03:20.900 --> 00:03:28.540
What's the most common exception type is attribute or type attribute. None has no attribute, whatever the

00:03:28.540 --> 00:03:30.180
thing is you're trying to access, right? That thing?

00:03:30.180 --> 00:03:34.260
Yeah, I'm willing to bet. Yeah, that attribute error alone, it probably makes up like a huge portion of

00:03:34.260 --> 00:03:39.940
people's exceptions. So that's why you have to be explicit. Like you need if you're going to be running a type checker,

00:03:39.940 --> 00:03:42.380
let's be very explicit about what you do and don't expect.

00:03:42.380 --> 00:03:47.540
Yeah, cool. I agree with that. I think it's nice. It did surprise me at first, but then I'm like, oh, okay, well,

00:03:47.540 --> 00:03:53.580
that's a that's an interesting choice. But now that I know, I should use optional. So here's a case of a function.

00:03:53.820 --> 00:04:00.900
And it's just some food bar example, but they have a bar parameter and they say colon stir equals none.

00:04:00.900 --> 00:04:07.880
So they're giving it a default value and saying it can be a string. Well, obviously that is like in three,

00:04:07.880 --> 00:04:12.700
three words patently wrong, right? It can't both be a string and be set to be none because it,

00:04:12.700 --> 00:04:17.160
you know, strings and type system can't be none. They have to, that has to be optional. Right.

00:04:17.460 --> 00:04:21.240
And so that, except for all of us know what that means. I know we all know that. Well,

00:04:21.240 --> 00:04:26.540
so funny enough, you know what it means, but if you didn't write that, do you know what they actually

00:04:26.540 --> 00:04:31.200
meant? Right. Like if Michael typed that and you saw it, would you go, Michael meant for that to

00:04:31.200 --> 00:04:37.280
actually be optional and that's nullable in terms of what, how other languages write it or was that on

00:04:37.280 --> 00:04:43.180
purpose? And that's why that's not allowed is because you don't know who screwed up. If anyone,

00:04:43.180 --> 00:04:48.240
was that accidentally written that way and it weirdly was meant to be optional or was it on

00:04:48.240 --> 00:04:53.120
purpose? And thus it's listed that way because you don't know intent of someone else who wrote it.

00:04:53.120 --> 00:04:57.060
This is why we went with the explicit where you have to label something as optional.

00:04:57.060 --> 00:04:59.620
And this is why it's awesome to have core developers on the show.

00:04:59.620 --> 00:05:06.780
So, so the idea of this is it's a thing you install, but then you pip install it, but then

00:05:06.780 --> 00:05:11.340
you just run it on the CLI like Flint and you just point it at a directory and it will go through

00:05:11.340 --> 00:05:15.400
and it'll find all of these default values that are none, but don't have optional in their type

00:05:15.400 --> 00:05:20.600
information. And then it'll just add optional, which is pretty straightforward, but you know,

00:05:20.600 --> 00:05:25.780
it's so easy to use, right? It's like, Oh, I have this 20,000 lines of Python code. And I really wish

00:05:25.780 --> 00:05:31.000
they were f-strings like Flint, that folder it's done. So same thing here, right? It's I've,

00:05:31.000 --> 00:05:35.680
I've got this huge bunch of code and nobody really thought about optional. Let's just quick fix that.

00:05:35.680 --> 00:05:41.800
It doesn't fix it everywhere. Right? Like I could say a thing takes a string without a default value

00:05:41.800 --> 00:05:46.340
for the parameter. And then maybe it's somewhere else that's getting a none. And it's not like that

00:05:46.340 --> 00:05:50.380
advanced. It just looks, if you're having default values that don't match the type, make them match.

00:05:50.380 --> 00:05:57.420
Yeah. so I like it. one of the questions I have is, so if I do optional string equals none,

00:05:57.420 --> 00:06:04.440
does that mean I still can pass none to the, to the function? Yes. Cause it's no different.

00:06:04.440 --> 00:06:09.860
That is normal. Okay. But wouldn't that be the same as saying that I can pass stir or none?

00:06:09.860 --> 00:06:16.420
Yes. Yes. And also that's what, on the live stream, Will McGuggan, Hey, Will says,

00:06:16.420 --> 00:06:23.120
do you need optional now that we can have foo pipe none as a, an alternative to optional of foo?

00:06:23.480 --> 00:06:27.660
No, but this is sort of more backwards compatible, right? Like Brett, when did that come out? Is

00:06:27.660 --> 00:06:32.140
that three, nine? three, 10, I think three, 10. Yeah. So, so it's not even out yet officially

00:06:32.140 --> 00:06:38.980
next month. Yeah. So give it, give it a little over a week. Right on. That's exciting. But you know,

00:06:38.980 --> 00:06:43.720
how, how much backwards compatibility do you want? Right. So I think soon, but maybe I don't know if I

00:06:43.720 --> 00:06:48.520
would go yet. And then Chris may says, oops, opening PyCharm to add optional to my last project.

00:06:48.840 --> 00:06:53.820
Uh, before you go to the work to write it, just run this against it on the CLI, on the command

00:06:53.820 --> 00:07:00.500
line and just see how it works. Right. So yeah. So it also works in VS Code. Although Zdocs does say

00:07:00.500 --> 00:07:05.780
back in three seven, you can use from Dunder future import annotations and then get that to work. I

00:07:05.780 --> 00:07:12.180
don't know about that personally, Brett. So what Zdocs is suggesting here is if you use the from Dunder

00:07:12.180 --> 00:07:17.120
future import annotations, what that does is it turns all your annotations technically into strings

00:07:17.120 --> 00:07:21.580
to Python. And so it's actually not executed because before that, what actually happened was,

00:07:21.580 --> 00:07:29.340
is that code in your annotation actually got run and the resulting object cut bound to the code object.

00:07:29.340 --> 00:07:34.380
What that future import does is just says, no, no, we don't want to pay that overhead, on your

00:07:34.380 --> 00:07:39.120
import. You might have performance reasons. Don't do that. And it'll actually just become a string.

00:07:39.120 --> 00:07:44.820
And then we have some stuff, to try to resolve that at runtime. This is the whole thing that came up

00:07:44.820 --> 00:07:50.860
in Python 310 that, you all covered in a previous episode of Pydantic going, Oh God,

00:07:50.860 --> 00:07:54.240
there's a change coming in 310 that might break us. And there's a whole kerfuffle. And anyway,

00:07:54.240 --> 00:08:00.580
that's what that's all resolving. So technically you're right that you could write it back,

00:08:00.580 --> 00:08:06.560
but it would break complete expectations of everyone who ever tried to use your code when you tried to run

00:08:06.560 --> 00:08:11.440
that somewhere else. So I would advise against it unless you know, you're going to be working against

00:08:11.440 --> 00:08:18.180
310 because for instance, someone might write code for Python 3.7 or 3.8, tell my pie it's Python 3.8.

00:08:18.180 --> 00:08:21.740
And then it would error out saying, well, that like that syntax makes no sense.

00:08:21.740 --> 00:08:25.240
Right. Okay. Interesting. All right. Well, yeah, pretty good one.

00:08:25.240 --> 00:08:30.620
Pretty good one. super easy to use, not a whole lot to it, but I think it's because it's so easy to adopt.

00:08:30.620 --> 00:08:37.500
It's kind of a nice one. yeah. Well, I want to talk about something that's not easy. It's not easy to write good documentation.

00:08:37.500 --> 00:08:47.640
So there's an article, from Daniel Stenberg and this doesn't apply to just, Python stuff. This applies to every software, all software stuff.

00:08:47.640 --> 00:08:55.220
Uh, there's an article called making world-class docs takes effort. And I think it's an understatement. It takes a lot of effort.

00:08:55.220 --> 00:09:06.400
Uh, but there's, this is a nice little doc, project or article talks about, he's, he's got some gold, gold things that he looks for to get a gold star.

00:09:06.520 --> 00:09:23.000
You must have these six items in your documentation. So let's just talk about what, what he's looking for. first of all, the documentation should be in the repositories, the code. I've got mixed feelings about this, but in general, I'm on the side of, this is a good idea just to keep the code and the docs together.

00:09:23.000 --> 00:09:39.000
The only reason why I sometimes find it difficult is when is I'm updating my documentation possibly way more than I'm updating my code. And it looks like there's a lot of turn on the code when there's not. So I don't know. but generally I think that's a good idea.

00:09:39.000 --> 00:09:48.580
Yeah. Most, most projects have the reverse, right? Like the documentations were edited that was edited two years ago, but there's been changes continuously. Right. Like, I don't even know if they still apply, but.

00:09:48.920 --> 00:10:18.300
Yeah. Yeah. But it is good to try to keep these together. Also, you can make a pull request or a merge request be with both the documentation and the code together. And, and so that's a good reason for that. next up is that your docs are not extracted from code. And I know there's a lot of tools out there that can try to do this, but the comment is just think about your favorite project documentation. Is any of it generated from code and odds are not. So, yeah, I, I agree with this.

00:10:18.300 --> 00:10:25.920
Yeah. You can usually spot it because it'll be like method login user. And then the, the method, the, the comment will be logs in user.

00:10:25.920 --> 00:10:36.960
And you're like, honestly, I've seen the reverse too, where people have doc strings that are extremely verbose and take up pages in your terminal just to scroll through.

00:10:37.300 --> 00:10:44.940
And because they just use that to spit out your docs, in which case it's not as convenient as when you just run help from a ripple to just go like, I was this do again.

00:10:44.940 --> 00:10:53.840
What are the arguments? Like, I need a really clear point pointed thing directly at a developer who's just trying to double check something versus a whole ex exposition of here.

00:10:53.840 --> 00:10:58.080
All the examples of how to use this thing. It's like, I don't need that level of detail. I just need to remember one little thing.

00:10:58.080 --> 00:11:03.240
Right. Right. Right. Yeah. It's, it's a range. Is it inclusive or exclusive of the bound? Like something like that. Right.

00:11:03.380 --> 00:11:13.180
One thing's the one place where I'm, I'm working on, I've got a project to try to use auto-generated documentation is I've got a really large test suite on a project.

00:11:13.180 --> 00:11:16.000
I'm shocked. Absolutely shocked, Brian.

00:11:16.000 --> 00:11:25.440
That I would really like to have doc strings, the encouraged developers to put doc strings in there for the reason why the test exists and what feature it's really testing.

00:11:25.680 --> 00:11:33.420
And to be able to have an auto-generated light, like website with just all of our tests, that'd be cool, but I'm not there yet.

00:11:33.420 --> 00:11:34.480
That makes sense.

00:11:34.480 --> 00:11:38.080
The next thing is your docs feature examples.

00:11:38.080 --> 00:11:42.160
And I love this because that's what people want to know.

00:11:42.160 --> 00:11:44.340
If I, if I want to do this, how do I do it?

00:11:44.340 --> 00:11:48.220
And so the comment is really just use examples.

00:11:48.220 --> 00:11:49.920
If you already have examples, add more.

00:11:49.920 --> 00:11:52.100
You probably can't have too many examples.

00:11:52.100 --> 00:11:53.820
And test them.

00:11:54.740 --> 00:11:55.440
Oh yeah.

00:11:55.440 --> 00:11:56.340
Test the examples.

00:11:56.340 --> 00:12:03.560
We covered a tool called make doc test that you could use to test your code within your documentation.

00:12:03.560 --> 00:12:04.240
Use that.

00:12:04.240 --> 00:12:09.500
Next is your doc, your document, document every API call you provide.

00:12:09.500 --> 00:12:12.880
This one's a tough one to keep up on, but it's really important.

00:12:12.880 --> 00:12:21.860
Even some great projects like typer and stuff that I've used not to, not to bash typer, but I think all projects have this problem.

00:12:21.860 --> 00:12:23.640
They'll add a new cool feature and it's cool.

00:12:23.700 --> 00:12:25.660
I want to use it and it's not in the docs yet.

00:12:25.660 --> 00:12:29.840
So that's a tough one to keep up on, but please do.

00:12:29.840 --> 00:12:33.820
One thing I'll say that is actually hard for Python is because it's so dynamic.

00:12:33.820 --> 00:12:36.660
It's hard to actually get a static list of all the API points.

00:12:37.200 --> 00:12:42.720
But one thing I'll say because Paul Everett says I have to bring more Rust to this podcast.

00:12:42.720 --> 00:12:52.340
Docs.rs, which is auto-generated documentation for anything uploaded to crates.io for Rust tools, will actually give you a percentage of covered public APIs.

00:12:53.080 --> 00:12:56.560
So you can actually see how much coverage you have in your documentation.

00:12:56.560 --> 00:13:00.840
So that's an interesting definition of code coverage.

00:13:01.220 --> 00:13:01.960
Yeah, it is, right?

00:13:01.960 --> 00:13:03.240
But it's like I didn't even know about it.

00:13:03.240 --> 00:13:09.620
And then I found it when I was just double-checking that everything built okay for a project I will mention later in my extras, extras, extras.

00:13:10.460 --> 00:13:11.880
And I noticed it was 100%.

00:13:11.880 --> 00:13:12.980
I was like, I thought I covered everything.

00:13:12.980 --> 00:13:13.540
And I went back.

00:13:13.540 --> 00:13:18.060
I was like, nope, there were actually a couple enum values that I didn't document.

00:13:18.060 --> 00:13:21.800
And so I was able to go back, do that, and make sure I had full 100% coverage of my stuff.

00:13:21.800 --> 00:13:22.960
It can be handy.

00:13:23.220 --> 00:13:25.080
But yeah, it's tricky in Python, right?

00:13:25.080 --> 00:13:30.020
Where it's like I could auto-gen my whole API and no way to know whether I covered it or not.

00:13:30.020 --> 00:13:31.960
At runtime and never have it hit disk, yeah.

00:13:31.960 --> 00:13:32.480
Yeah.

00:13:32.480 --> 00:13:34.280
Last couple things.

00:13:34.280 --> 00:13:38.360
Docs should be easily accessible and browsed.

00:13:38.360 --> 00:13:44.040
And hopefully a search feature or something, even if you attach Google search.

00:13:44.040 --> 00:13:44.620
That's cool.

00:13:44.620 --> 00:13:52.080
But there was a comment in the text also to say, preferably be able to have that online.

00:13:52.340 --> 00:13:55.080
So offline is what the comment is.

00:13:55.080 --> 00:13:58.480
So if it's, and I'm on the fence on that.

00:13:58.480 --> 00:14:00.820
I'm usually attached to the internet.

00:14:00.820 --> 00:14:02.840
So looking stuff up isn't a bad thing.

00:14:02.840 --> 00:14:05.180
And easy to contribute to, the lastly.

00:14:05.180 --> 00:14:08.700
So yeah, documentation stuff.

00:14:08.700 --> 00:14:10.360
There's a lot of stuff.

00:14:10.360 --> 00:14:11.280
It's hard to get it right.

00:14:11.280 --> 00:14:14.900
There's a lot of stuff I'd add if I was being more verbose.

00:14:14.900 --> 00:14:20.820
But the last thing I really want to add to this is don't slam projects that don't have good documentation.

00:14:20.820 --> 00:14:21.820
Because it's hard.

00:14:21.820 --> 00:14:24.820
If you want to have it be better, then contribute.

00:14:24.820 --> 00:14:25.680
Fix it yourself.

00:14:25.680 --> 00:14:26.180
Yeah.

00:14:26.180 --> 00:14:29.260
Brian, you're kind of blowing up the audience out here with the comments.

00:14:29.260 --> 00:14:30.780
So I'll throw a few out that seem interesting.

00:14:30.780 --> 00:14:35.320
Sam out there says, pro tip, keep on top of your documentation, even if it's just a cursory

00:14:35.320 --> 00:14:35.820
doc string.

00:14:35.820 --> 00:14:36.440
Some notes.

00:14:36.440 --> 00:14:37.860
Otherwise, it quickly gets out of hand.

00:14:38.000 --> 00:14:41.820
Yeah, it's definitely one of those things that if you had to sit down and write it all at

00:14:41.820 --> 00:14:42.840
once, it would be dreadful.

00:14:42.840 --> 00:14:45.960
But if you can kind of do little bits as you go, then for sure.

00:14:45.960 --> 00:14:46.400
Right.

00:14:46.400 --> 00:14:51.220
Brandon Brainer says your documentation update should be part of the ticket or even better,

00:14:51.220 --> 00:14:53.040
your definition of done for the ticket.

00:14:53.040 --> 00:14:53.520
Right.

00:14:53.520 --> 00:14:56.320
Like when you estimate how much work in your sprint or something.

00:14:56.320 --> 00:14:58.560
And then Chris has a great one.

00:14:58.560 --> 00:14:59.840
Bonus documentation.

00:14:59.840 --> 00:15:04.240
If a bonus, if your documentation includes animated gifts or emojis.

00:15:04.240 --> 00:15:04.860
Yes.

00:15:06.520 --> 00:15:07.520
Yeah, those are awesome.

00:15:07.520 --> 00:15:08.580
We'll probably leave it there for that one.

00:15:08.580 --> 00:15:09.100
But that's great.

00:15:09.100 --> 00:15:09.420
All right.

00:15:09.420 --> 00:15:15.120
So one interesting thing you could actually do is if you really want to push this is if

00:15:15.120 --> 00:15:18.460
you keep your documentation in the same repository as your code, you could.

00:15:18.460 --> 00:15:20.560
I'm going to use this from GitHub.

00:15:20.560 --> 00:15:22.180
I'm sure GitHub has equivalents.

00:15:22.180 --> 00:15:24.320
But you could probably set up a GitHub action.

00:15:24.320 --> 00:15:28.880
Actually, I know you can because I've written the GitHub action to do this to actually have

00:15:28.880 --> 00:15:35.120
your checks, your status checks on your PR fail if there are no touch docs and have

00:15:35.120 --> 00:15:37.320
to have to opt out of that check.

00:15:37.320 --> 00:15:37.740
Right.

00:15:37.740 --> 00:15:42.480
I actually have a GitHub action I wrote called check for change files.

00:15:42.480 --> 00:15:48.420
And you could write a requirement saying if you change any .py file, an equivalent .rst

00:15:48.420 --> 00:15:51.120
or .md file must be changed somewhere in the PR.

00:15:51.120 --> 00:15:56.240
And if it's not, have to add like a skip docs labeled to make it pass and otherwise let people

00:15:56.240 --> 00:15:57.400
know very explicitly.

00:15:57.400 --> 00:15:59.340
OK, we care about our docs.

00:15:59.340 --> 00:16:00.960
You can't just opt out of it.

00:16:00.960 --> 00:16:02.660
Please make sure everything's up to date.

00:16:03.020 --> 00:16:06.440
There are ways to really push this pretty far if you really want to go for it.

00:16:06.440 --> 00:16:06.860
Yeah.

00:16:06.860 --> 00:16:12.720
Have robots be mean and say, no, you haven't finished your PR yet rather than the maintainers.

00:16:12.720 --> 00:16:12.880
Yeah.

00:16:12.880 --> 00:16:13.520
All right.

00:16:13.520 --> 00:16:15.480
Tell us about this next one, Brett.

00:16:15.480 --> 00:16:16.040
Yeah.

00:16:16.040 --> 00:16:19.340
So once again, more rust on this podcast due to Paul Everett demanding it.

00:16:20.020 --> 00:16:24.500
And I've noticed there's been a slight theme the last couple episodes of talking about ways

00:16:24.500 --> 00:16:28.360
to kind of improve your shell and your general development flow, as it were.

00:16:28.360 --> 00:16:33.680
And one thing I use here, and partially because Michael's mentioned Oh My Posh multiple times,

00:16:33.680 --> 00:16:35.740
I believe Brian's now mentioned Oh My Zeesh.

00:16:35.740 --> 00:16:39.360
I thought I'd just mention what I use for All My Prompts, which is Starship.

00:16:39.360 --> 00:16:43.080
The thing I love about this is it's actually cross shell.

00:16:43.260 --> 00:16:51.700
So what you do is basically you define, it comes with a lot of basically plugins for configuring

00:16:51.700 --> 00:16:52.240
built in.

00:16:52.240 --> 00:16:56.420
And what you do is you basically turn them on and off, configuring one way or the other.

00:16:56.420 --> 00:17:00.480
And then there's a one line activation you just put in your code.

00:17:00.480 --> 00:17:01.440
And that's it.

00:17:01.440 --> 00:17:04.920
Configuration is done by a TML file, Starship.TML.

00:17:05.180 --> 00:17:06.920
And then it just works.

00:17:06.920 --> 00:17:08.640
There's no mucking about.

00:17:08.640 --> 00:17:11.100
It doesn't matter what shell you're on.

00:17:11.100 --> 00:17:13.060
And it just does its thing.

00:17:13.060 --> 00:17:16.760
And the reason I really appreciate that is I'm one of these people who likes to play with

00:17:16.760 --> 00:17:17.840
tools, right?

00:17:17.840 --> 00:17:20.340
Which leads to me playing with different shells, right?

00:17:20.340 --> 00:17:24.300
Probably by the time Paul Everett tries out fish, I'll be trying out new shell.

00:17:24.300 --> 00:17:29.100
So because of that, I want to make sure that I can bring my shell with me very easily.

00:17:29.100 --> 00:17:33.620
And Starship, for instance, has support for fish and Zeesh and Bash and all of them and new

00:17:33.620 --> 00:17:33.820
shell.

00:17:33.820 --> 00:17:39.000
So I can very easily try out a different shell and not feel like I'm in a foreign country

00:17:39.000 --> 00:17:42.000
where the prompting is gibberish, right?

00:17:42.000 --> 00:17:42.860
Like I always hate it.

00:17:42.860 --> 00:17:48.660
It seems like, oh, my Z shell go on to Z shell and oh, my posh go on to posh.

00:17:48.660 --> 00:17:51.440
And like you're stuck on that specific one, right?

00:17:51.440 --> 00:17:52.220
Exactly.

00:17:52.220 --> 00:17:53.260
And there's oh, my fish.

00:17:53.260 --> 00:17:56.940
Like pretty much every shell has an oh, my something or other to tweak it out.

00:17:56.940 --> 00:18:00.760
But with this, at least for my prompt, which is actually what I see the most, right?

00:18:00.760 --> 00:18:03.760
Like I don't know about the rest of you, but my prompt is what I interact with.

00:18:03.760 --> 00:18:06.800
More than anything in my shell, not the extra fancy stuff I put in.

00:18:06.800 --> 00:18:07.760
It's this.

00:18:07.760 --> 00:18:10.680
And so this is why I really appreciate this project.

00:18:10.680 --> 00:18:11.940
I will also.

00:18:11.940 --> 00:18:12.860
Yeah, go ahead.

00:18:12.860 --> 00:18:13.700
I did.

00:18:13.700 --> 00:18:14.440
Go for it.

00:18:14.440 --> 00:18:14.920
It's just.

00:18:14.920 --> 00:18:17.100
Well, what I like is we're seeing on the screen here.

00:18:17.100 --> 00:18:22.260
If you go to the starship.rs site, you can see like a little animated GIF and props to

00:18:22.260 --> 00:18:23.660
them for putting that on there.

00:18:23.660 --> 00:18:24.720
That is fantastic.

00:18:24.940 --> 00:18:26.540
As we just learned, it's good documentation.

00:18:26.540 --> 00:18:27.320
Yes.

00:18:27.320 --> 00:18:34.160
There's a lot of stuff about if you're in a GitHub branch and what branch you're on and

00:18:34.160 --> 00:18:35.500
versioning and things.

00:18:35.500 --> 00:18:40.020
Does it have specific stuff for Python and Python virtual environments and versioning like that?

00:18:40.500 --> 00:18:44.500
Yes, because I don't use it, but there's built in PyPI support.

00:18:44.500 --> 00:18:49.540
But if you use the Python launcher, I actually have an entry on it in the FAQ for the Python

00:18:49.540 --> 00:18:54.380
launcher to tell how to use the Python launcher to automatically tell you what version of Python

00:18:54.380 --> 00:18:54.960
is being used.

00:18:54.960 --> 00:19:00.260
And then you can configure the Python configuration to say, what should I trigger on for it to be

00:19:00.260 --> 00:19:01.720
considered a Python project?

00:19:01.980 --> 00:19:06.500
And it has a default list that's pretty good, like pyproject.tom, setup.py, setup.cfg.

00:19:06.500 --> 00:19:13.340
The things you would expect any repo or workspace or whatever to have to be a clear marker that

00:19:13.340 --> 00:19:15.000
there is Python that I care about here.

00:19:15.000 --> 00:19:21.440
And then the other thing is, is there's also a way that if you use PY, you can also have it set up to

00:19:21.440 --> 00:19:26.380
auto trigger as long as you just have like a .vemv directory, for instance, that contains your

00:19:26.380 --> 00:19:27.000
virtual environment.

00:19:27.000 --> 00:19:32.260
And then if you happen to use the Python launcher to be the way to query for what version of Python

00:19:32.260 --> 00:19:36.100
it is, it all magically just tells you what version your virtual environment is in.

00:19:36.100 --> 00:19:40.560
And so I actually use this with the Python launcher because it will always tell me exactly what will

00:19:40.560 --> 00:19:41.740
happen if I just type py.

00:19:41.740 --> 00:19:43.040
Oh, nice.

00:19:43.040 --> 00:19:43.600
Yeah.

00:19:43.600 --> 00:19:44.540
Yeah, that's awesome.

00:19:44.540 --> 00:19:48.740
And I know nerd fonts have been mentioned previously on this podcast.

00:19:48.740 --> 00:19:51.840
You'll notice that it has nerd font support.

00:19:51.840 --> 00:19:54.820
So if you get that installed, there's extra little fancy bits to it.

00:19:54.820 --> 00:20:00.020
You don't have to have it installed while those things will either turn into Mojibake or you can

00:20:00.020 --> 00:20:00.800
just turn them off.

00:20:00.800 --> 00:20:01.320
Yeah.

00:20:01.320 --> 00:20:03.520
But there's all sorts of stuff that this thing does.

00:20:03.520 --> 00:20:05.720
There's even real nice little subtle details.

00:20:05.720 --> 00:20:10.540
Like if you use Starship and if you're watching the live stream, you'll notice that the prompt

00:20:10.540 --> 00:20:13.960
is green when the last command succeeded.

00:20:13.960 --> 00:20:15.900
But if it fails, it turns red.

00:20:15.900 --> 00:20:19.500
Like there's real nice little subtle touches of this tool that I really appreciate.

00:20:19.500 --> 00:20:20.100
Yeah.

00:20:20.100 --> 00:20:21.060
I really like it too.

00:20:21.060 --> 00:20:21.640
It looks great.

00:20:21.960 --> 00:20:26.080
I'm going to try to check this out because I'm I'm always using I got some tools that

00:20:26.080 --> 00:20:28.980
I have to run from the command prompt.

00:20:28.980 --> 00:20:32.060
And but most of the time I'm in bash or something else.

00:20:32.060 --> 00:20:32.840
So, yeah.

00:20:32.840 --> 00:20:33.300
Yeah.

00:20:33.300 --> 00:20:33.780
Very nice.

00:20:33.780 --> 00:20:41.500
Zdocs says using multiline shell prompts and FZF are two of the better productivity improvements

00:20:41.500 --> 00:20:42.200
I've ever done.

00:20:42.200 --> 00:20:47.820
I I wanted I've highlighted that specifically because I really like these multiline prompts

00:20:47.820 --> 00:20:50.120
that has all the details and then the prompt is below it.

00:20:50.120 --> 00:20:52.140
But I can't bring myself to use them yet.

00:20:52.140 --> 00:20:57.360
I don't know why I've just it's I'd rather have it more densely packed on one line.

00:20:57.360 --> 00:20:59.020
Where do you stand on this?

00:20:59.400 --> 00:21:00.320
I used to be that way.

00:21:00.320 --> 00:21:05.100
Actually, I I used to be a Z user before I became a fish user.

00:21:05.100 --> 00:21:08.580
And even before this, I used to use left prompt and right prompt.

00:21:08.580 --> 00:21:13.920
And I had a consistent left prompt, which was basically just the greater than symbol.

00:21:13.920 --> 00:21:18.840
And then I had my current working directory as my right prompt so that at least the cursor

00:21:18.840 --> 00:21:20.020
position never shifted.

00:21:20.140 --> 00:21:22.940
Like, I don't know about the rest of you, but I always find that that they're joking

00:21:22.940 --> 00:21:23.420
nuts.

00:21:23.420 --> 00:21:26.280
Like, where's the start of my prompt now after I changed my directory?

00:21:26.280 --> 00:21:28.520
So having that as the right side was great.

00:21:28.520 --> 00:21:34.440
But then I saw this and I was like, OK, I've never loved this, but this is so nice and set

00:21:34.440 --> 00:21:42.180
up across the board for everything that I consistently use, like Rust, Python, NPM, whatever.

00:21:42.180 --> 00:21:43.940
I was like, OK, I'm going to give it a shot.

00:21:43.940 --> 00:21:46.500
And I did it and I've stuck with it and I continue to like it.

00:21:46.500 --> 00:21:49.060
So I totally hear where you're coming from in terms of the density level.

00:21:49.640 --> 00:21:55.460
But it's just turned out to be way too nice with Starship for me to care about going back.

00:21:55.460 --> 00:22:01.220
Now, if I do go back, right, and I don't have it set up for this, I actually have like my

00:22:01.220 --> 00:22:05.640
.files set up so that my default basher, so you know that if I end up on a random machine,

00:22:05.640 --> 00:22:08.320
at least has that kind of prompting.

00:22:08.320 --> 00:22:13.040
But as soon as I'm on any machine where I know I'm going to be a fully set up environment,

00:22:13.040 --> 00:22:14.620
I just kick on Starship.

00:22:14.620 --> 00:22:15.240
I just don't care.

00:22:15.240 --> 00:22:17.640
I basically I get it.

00:22:17.640 --> 00:22:20.140
But this was just too many benefits and I just let it go.

00:22:20.140 --> 00:22:21.700
And now I just don't notice it.

00:22:21.700 --> 00:22:22.320
Yeah.

00:22:22.320 --> 00:22:23.460
And now you're used to it.

00:22:23.460 --> 00:22:23.700
Right.

00:22:23.700 --> 00:22:25.240
I think I'm going to try to embrace it.

00:22:25.240 --> 00:22:26.920
Just just run with it.

00:22:26.920 --> 00:22:31.080
And honestly, the resolution on all our screens are so high now compared to what it used to

00:22:31.080 --> 00:22:35.960
be back when I picked up that habit that the lack of vertical density, maybe it's because

00:22:35.960 --> 00:22:38.140
I'm a black user doesn't bother me so much anymore.

00:22:38.140 --> 00:22:39.160
Yeah, that's true.

00:22:39.200 --> 00:22:43.120
I do have a 4K monitor, I suppose that like a 32 inch 4K monitor.

00:22:43.120 --> 00:22:44.740
I could probably fit the terminal on it.

00:22:44.740 --> 00:22:46.140
I suspect so.

00:22:46.140 --> 00:22:53.300
It's actually kind of nice to have the those like color stuff in your in the multi line prompt

00:22:53.300 --> 00:22:59.120
to be able to kind of scroll up and see where the beginning of your line, your command started

00:22:59.120 --> 00:22:59.960
because it's easier.

00:23:00.300 --> 00:23:02.540
It's like an HR horizontal rule.

00:23:02.540 --> 00:23:03.420
Yeah, exactly.

00:23:03.420 --> 00:23:04.560
Or yeah.

00:23:04.560 --> 00:23:08.720
Final thing, Jeremiah Page out there in live stream says Starship is great, but I think

00:23:08.720 --> 00:23:10.240
you need nerd fonts for some of the plugins.

00:23:10.240 --> 00:23:10.920
Hold that thought.

00:23:10.920 --> 00:23:13.020
We'll be back to more nerd fonts later.

00:23:13.020 --> 00:23:14.100
But that is correct.

00:23:14.100 --> 00:23:18.220
Some of the things like if you're watching the live stream, there's a nice little symbol

00:23:18.220 --> 00:23:20.680
for like a branch next to the get stuff.

00:23:20.680 --> 00:23:24.680
If you have the power monitoring one that tells you like your battery is low, it uses nerd fonts

00:23:24.680 --> 00:23:25.260
to show that.

00:23:25.420 --> 00:23:27.880
But Michael's foreshadowing something coming later.

00:23:27.880 --> 00:23:28.640
Yes, indeed.

00:23:28.640 --> 00:23:29.800
All right.

00:23:29.800 --> 00:23:32.100
Let's talk about James Path.

00:23:32.100 --> 00:23:36.820
Now, Brian, one of the challenges we always have on the show is we have these acronyms for

00:23:36.820 --> 00:23:39.580
packages and then we have to speak them.

00:23:39.580 --> 00:23:43.080
And we've never spoken to the person who creates it or named it.

00:23:43.080 --> 00:23:46.540
And so we always I'm sure we wreck the names of so many packages.

00:23:46.540 --> 00:23:48.620
And let's just do a blanket apology.

00:23:48.620 --> 00:23:50.840
But this one is called James Path.

00:23:50.840 --> 00:23:59.180
And I know because it says J-M-E-S-P-A-T-H pronounced James Path allows you to like, yes,

00:23:59.180 --> 00:24:04.340
this is another new thing I'm starting to really like allows you to declare to declaratively

00:24:04.340 --> 00:24:07.000
specify how to extract elements from a JSON document.

00:24:07.000 --> 00:24:13.320
So instead of going through and sort of going, you know, parsing up something as JSON, turning

00:24:13.320 --> 00:24:18.480
to a dictionary and then traversing it with indexes and keys and such, there's a whole lot

00:24:18.480 --> 00:24:22.140
of interesting things you can do to quickly get at elements.

00:24:22.140 --> 00:24:29.740
So, for example, you can just if you had the dictionary that had key foo and then inside

00:24:29.740 --> 00:24:34.760
there, there was another dictionary that had a key bar and then that had a value baz, you

00:24:34.760 --> 00:24:38.120
could just say foo dot bar and it'll give you baz, which is kind of nice.

00:24:38.120 --> 00:24:43.880
You can also do that with with arrays, although this is actually not doing anything.

00:24:43.880 --> 00:24:47.840
It's just giving you back the list and then you're indexing into it.

00:24:47.840 --> 00:24:48.540
So whatever.

00:24:48.540 --> 00:24:50.980
But you can do things like star on it.

00:24:50.980 --> 00:24:56.900
So, for example, if you had foo bar and then bar was an array, you can say like foo dot bar

00:24:56.900 --> 00:25:03.960
a bracket star dot name and it'll give you all the names out of the sub thing, the sub dictionaries

00:25:03.960 --> 00:25:06.320
in the list that bar points at.

00:25:06.320 --> 00:25:09.400
So there's like these cool, like almost like SQL like things.

00:25:09.520 --> 00:25:13.340
You can also do negative indexing into it, which is pretty nice.

00:25:13.340 --> 00:25:22.140
You can do star like foo dot star dot name for hashes to get the values out kind of like

00:25:22.140 --> 00:25:22.700
a set or something.

00:25:22.700 --> 00:25:23.500
So that's pretty nice.

00:25:23.500 --> 00:25:25.340
And yeah, it's pretty interesting.

00:25:25.340 --> 00:25:29.100
This one comes to us from Josh Thurston.

00:25:29.100 --> 00:25:30.700
So thanks for that.

00:25:31.060 --> 00:25:35.060
He said he was working with all these sort of arbitrary nested JSON documents.

00:25:35.060 --> 00:25:36.860
And it was really handy for that.

00:25:36.860 --> 00:25:40.840
So, you know, you look at this code and I'm sure, Brett, you're thinking that's not Python, right?

00:25:40.840 --> 00:25:45.500
No, actually, I'm wondering if the query syntax is the same as JQ.

00:25:45.500 --> 00:25:47.200
And do people know what JQ is?

00:25:47.200 --> 00:25:48.520
I don't know what JQ is.

00:25:48.520 --> 00:25:48.800
Yeah.

00:25:48.800 --> 00:25:49.280
Interesting.

00:25:49.280 --> 00:25:53.080
So JQ is a command line tool.

00:25:53.080 --> 00:26:01.180
So literally, it's just JQ, Juliet, Quebec, that is designed to actually take in JSON,

00:26:01.180 --> 00:26:07.120
more or less use the same kind of syntax as the query selector and the browser for CSS selectors

00:26:07.120 --> 00:26:08.960
and query your JSON.

00:26:08.960 --> 00:26:14.500
I think it's meant a lot for like tools if you're using like HTTPY or curl or whatever to query

00:26:14.500 --> 00:26:18.600
some like REST API that's going to give you back JSON and then to try to find something out of it.

00:26:18.600 --> 00:26:20.520
And it looks pretty similar.

00:26:20.720 --> 00:26:25.760
So I'm thinking that this is maybe kind of just a Python packaging approach to the same syntax,

00:26:25.760 --> 00:26:28.740
which is neat because it means if you know one tool, hopefully it'll work for you.

00:26:28.740 --> 00:26:29.180
Yeah, right.

00:26:29.180 --> 00:26:30.020
Yeah, it could be.

00:26:30.020 --> 00:26:36.100
So you should think of it not as syntax that you write, but more almost like a regular expression.

00:26:36.100 --> 00:26:40.540
So you would import JamesPath and then you say expression equals JamesPath compile.

00:26:40.540 --> 00:26:43.360
And then you give it a string, which is these things I've been describing.

00:26:43.360 --> 00:26:48.200
And then you can tell it to like search or execute queries against things.

00:26:48.200 --> 00:26:50.560
So a lot of neat stuff you can do there.

00:26:50.640 --> 00:26:55.260
You can even add custom functions that can become part of this query syntax.

00:26:55.260 --> 00:26:59.860
So if you create a class that derives from functions that comes out of that library,

00:26:59.860 --> 00:27:01.820
you can have things like unique letters.

00:27:01.820 --> 00:27:07.060
And what you could do in there is say, given a string, I would like to do a set on the string

00:27:07.060 --> 00:27:08.380
and then turn it back into a string.

00:27:08.480 --> 00:27:14.200
So it only shows you the letters involved, not necessarily, you know, with duplication.

00:27:14.200 --> 00:27:14.400
Right.

00:27:14.400 --> 00:27:21.520
And so then if you create that, then you can do things like when you do your search, you can do food out bar pipe, unique letters,

00:27:21.700 --> 00:27:23.280
and you pass the parameters over.

00:27:23.280 --> 00:27:29.020
And it'll give you, you know, basically the result of those values, but then applying these transforms and stuff to it.

00:27:29.020 --> 00:27:29.420
Cool.

00:27:29.420 --> 00:27:30.920
So, yeah, pretty neat.

00:27:31.660 --> 00:27:37.480
You got a lot of traversing dictionaries and stuff like that, and you kind of want to treat them like SQL.

00:27:37.480 --> 00:27:40.600
I feel like this is sort of along those lines.

00:27:40.600 --> 00:27:41.500
People can check that out.

00:27:41.500 --> 00:27:41.980
All right.

00:27:41.980 --> 00:27:43.080
Brian, over to you.

00:27:43.080 --> 00:27:44.080
Yeah.

00:27:44.480 --> 00:27:48.860
I wanted to cover, this was announced last week, I think.

00:27:48.860 --> 00:27:50.920
There's a tool called Pedalboard.

00:27:50.920 --> 00:27:59.360
This is a library that comes from Spotify, and it's for manipulating audio files.

00:27:59.360 --> 00:28:07.480
But in the introductory article, it says the power and speed and sound of a DAW.

00:28:07.480 --> 00:28:09.120
I never knew how to pronounce that one either.

00:28:09.120 --> 00:28:11.180
Digital, what is that?

00:28:11.180 --> 00:28:13.040
Digital audio something.

00:28:13.040 --> 00:28:13.700
Workstation.

00:28:13.980 --> 00:28:15.000
Yeah, digital audio workstation.

00:28:15.000 --> 00:28:16.240
A DAW, I think.

00:28:16.240 --> 00:28:16.980
Maybe a DAW.

00:28:16.980 --> 00:28:17.300
DAW.

00:28:17.300 --> 00:28:18.340
I don't know.

00:28:18.340 --> 00:28:19.360
So what do you use?

00:28:19.360 --> 00:28:21.980
I use Logic Pro usually.

00:28:21.980 --> 00:28:24.400
So something like that would be a DAW.

00:28:24.400 --> 00:28:25.480
Yeah, I use Adobe Audition.

00:28:25.480 --> 00:28:25.900
Yeah.

00:28:25.900 --> 00:28:32.100
So there's a lot of stuff you can do that are just common things that you're going to do to all files.

00:28:32.100 --> 00:28:33.720
So it'd be kind of neat to automate that.

00:28:33.720 --> 00:28:38.500
So things I'm thinking about are things like a compressor, a high-pass filter, a low-pass filter.

00:28:38.500 --> 00:28:43.480
But this thing has a whole bunch of other transforms you can do, like convolutions

00:28:43.480 --> 00:28:48.440
and chorus and some distortions and gain if you want to make it louder.

00:28:48.440 --> 00:28:50.880
Some reverb, a high-pass filter.

00:28:50.880 --> 00:28:52.000
And then stuff.

00:28:52.000 --> 00:28:53.080
I don't even know what it is.

00:28:53.080 --> 00:28:53.760
A ladder filter.

00:28:53.760 --> 00:28:54.640
I don't know what that is.

00:28:54.640 --> 00:28:55.180
Phaser?

00:28:55.180 --> 00:28:55.900
Phaser.

00:28:55.900 --> 00:28:56.640
That sounds neat.

00:28:56.640 --> 00:28:57.680
Yeah, it does.

00:28:58.680 --> 00:28:59.760
Oh, shit, Scotty.

00:28:59.760 --> 00:29:03.920
So I definitely want to try that out.

00:29:03.920 --> 00:29:08.080
And if you're working with audio files, I think it would be kind of a fun thing.

00:29:08.080 --> 00:29:13.460
We've linked to the GitHub repo for it, which is nice.

00:29:13.460 --> 00:29:14.600
It's completely open source.

00:29:15.240 --> 00:29:23.080
It says it also has some cool things like plugins for VST3 and audio unit, which I have no idea what those are.

00:29:24.120 --> 00:29:26.120
But also, there's some...

00:29:26.120 --> 00:29:29.040
One of the things with audio is it takes a while.

00:29:29.040 --> 00:29:32.040
So there are speed enhancements in this.

00:29:32.040 --> 00:29:35.100
So it says it really doesn't take that long to use it.

00:29:35.100 --> 00:29:38.380
It takes advantage of your CPU cores, which is neat.

00:29:38.640 --> 00:29:40.780
Also linking to an article to introduce it.

00:29:40.780 --> 00:29:42.280
And I got to warn people.

00:29:42.280 --> 00:29:48.400
There's an image at the top, which totally messed with my head.

00:29:48.400 --> 00:29:52.800
Because, I mean, it just triggers me with all the different flashing colors.

00:29:52.800 --> 00:29:54.140
So be careful with that.

00:29:54.140 --> 00:29:55.620
Scroll past that quick.

00:29:55.620 --> 00:29:58.900
But other than that, it's a good article on what it is.

00:29:58.900 --> 00:29:59.980
Some graphics.

00:29:59.980 --> 00:30:01.700
And I don't quite get...

00:30:01.700 --> 00:30:03.980
There's some graphics on how it works.

00:30:03.980 --> 00:30:06.720
And I don't quite get what the graphics mean.

00:30:07.180 --> 00:30:09.320
Like the noise gate really doesn't tell me much.

00:30:09.320 --> 00:30:10.820
I love the noise gate.

00:30:10.820 --> 00:30:13.620
That's one of the biggest tricks to sound good, actually.

00:30:13.620 --> 00:30:14.340
Yeah.

00:30:14.340 --> 00:30:19.760
So important enough for me that I've got a hardware noise gate in my studio.

00:30:19.760 --> 00:30:20.560
Nice.

00:30:20.560 --> 00:30:23.000
Anyway, cool library.

00:30:23.000 --> 00:30:23.800
Check it out.

00:30:23.800 --> 00:30:24.300
Yeah.

00:30:24.300 --> 00:30:25.600
So if you want to do audio transformation.

00:30:25.600 --> 00:30:30.840
If you want to basically write Python code that does like Audition or the one you said, Brian.

00:30:30.840 --> 00:30:33.040
Well, I mean, and especially with automation.

00:30:33.040 --> 00:30:36.200
So if you've got like a whole bunch of files you're dealing with

00:30:36.200 --> 00:30:38.540
and you want to make sure that they're all kind of the same level,

00:30:38.540 --> 00:30:42.300
you definitely want to automate that and not try to...

00:30:42.300 --> 00:30:46.400
And I know there's ways to automate with some of your other tools too,

00:30:46.400 --> 00:30:48.240
but it's kind of cool to have this.

00:30:48.240 --> 00:30:49.140
Yeah, definitely.

00:30:49.140 --> 00:30:56.020
The only thing I have to contribute is going back to Brian's previous link about good documentation.

00:30:56.020 --> 00:31:00.800
While you two were talking, I just submitted a PR to fix the trailing triple backticks

00:31:00.800 --> 00:31:02.020
accidentally left in their readme.

00:31:02.020 --> 00:31:07.340
So just to give feedback to people, trying to fix documentation is always appreciated.

00:31:07.340 --> 00:31:13.580
And it's usually something you can do pretty quick, especially with either the pencil editor in GitHub

00:31:13.580 --> 00:31:19.640
or just hitting the dot to use GitHub.dev if you want, if you need a little bit fancier support and just send that PR.

00:31:19.640 --> 00:31:22.160
And I mean, most maintainers would appreciate it.

00:31:22.160 --> 00:31:24.780
As we all know, it's hard to keep going straight.

00:31:25.260 --> 00:31:31.600
If you submit an issue or send an email and say, this part of your docs needs this misspelling fixed

00:31:31.600 --> 00:31:36.100
or this link has an extra trailing slash that makes it not work, that's work.

00:31:36.100 --> 00:31:38.980
If you submit a PR, that's joy, right?

00:31:38.980 --> 00:31:40.400
You just say, I accept.

00:31:40.400 --> 00:31:41.500
Okay, you fixed it.

00:31:41.500 --> 00:31:41.840
Thank you.

00:31:41.840 --> 00:31:42.840
I'll just carry on, right?

00:31:42.840 --> 00:31:44.500
Rather, oh, geez, I got another thing to do.

00:31:44.500 --> 00:31:45.600
So yeah, that's great.

00:31:45.600 --> 00:31:46.400
Nice catch.

00:31:46.600 --> 00:31:47.860
It took me well to see that.

00:31:47.860 --> 00:31:48.880
Yeah.

00:31:48.880 --> 00:31:53.480
Well, I mean, some people ask me, like, how do you have so many contributions to so many repositories?

00:31:53.480 --> 00:31:54.480
That's how.

00:31:54.480 --> 00:32:00.180
Literally, if you just read docs, anytime you find anything a little off, just take the time to just submit that PR.

00:32:00.180 --> 00:32:01.800
And most of them get in.

00:32:01.800 --> 00:32:02.440
Not all of them do.

00:32:02.440 --> 00:32:05.060
But honestly, that's enough to just kind of help out.

00:32:05.060 --> 00:32:10.940
And honestly, you just suddenly end up contributing to, I think I'm up to 160 something repos on GitHub at this point.

00:32:10.940 --> 00:32:11.480
Wow.

00:32:11.480 --> 00:32:12.120
That's awesome.

00:32:12.120 --> 00:32:12.460
Thanks.

00:32:14.000 --> 00:32:18.340
Okay, so Michael said it was nice sometimes to have core devs.

00:32:18.340 --> 00:32:21.820
We'll see if this doesn't cause you to regret having core devs on the podcast.

00:32:21.820 --> 00:32:28.220
So I'm going to use this as story time and just kind of explain how processes work in terms of packaging peps.

00:32:28.220 --> 00:32:35.680
Starting about six months ago, I took it upon myself to try to come up with a lock file format for Python.

00:32:35.680 --> 00:32:41.060
It seemed like it was kind of a gap we had where multiple tools were trying to solve the same problem.

00:32:41.280 --> 00:32:44.560
And that felt like something that we should try to avoid if possible.

00:32:44.560 --> 00:32:56.460
Coming from speaking as the dev manager for the Python extension for VS Code, having each bespoke tool such as pipin, poetry, requirements.txt files, even through pip-tools, right?

00:32:56.460 --> 00:33:00.560
Having to support each of those tools individually is a drag, right?

00:33:00.560 --> 00:33:04.740
Like it takes a lot of time and effort to figure out what to do for each tool.

00:33:04.740 --> 00:33:06.720
If the tools update, suddenly we break.

00:33:06.720 --> 00:33:08.160
So it's a bit tricky.

00:33:08.160 --> 00:33:18.160
Making calls through CLI is kind of an annoyance too because we got to make sure that they're, you know, how to use their API, what they report out is consistent, that they don't change it.

00:33:18.160 --> 00:33:23.080
Because not all tools consider their output or their CLI part of their stable API that they maintain.

00:33:23.080 --> 00:33:24.660
Anyway, there's a lot of drawbacks.

00:33:24.660 --> 00:33:31.980
So I tried to decide to be silly and take it upon myself to see if I can come up with a way to get all the tools to kind of rally around something.

00:33:31.980 --> 00:33:34.520
There's also needs for like cloud, right?

00:33:34.520 --> 00:33:41.120
Like if you upload something to Azure Functions, they want to do the install for you, but you need to be able to tell them what you want installed.

00:33:41.120 --> 00:33:43.300
So lock files, good thing, right?

00:33:43.300 --> 00:33:44.080
Just in general.

00:33:44.080 --> 00:33:47.860
So I spent six months talking behind the scenes with various people.

00:33:47.860 --> 00:33:52.180
Originally it was me, Pratune, and Zuping from Pip.

00:33:52.180 --> 00:33:54.660
We came up with a lock file spec.

00:33:54.660 --> 00:34:02.400
And then we invited Sebastian and Frost from Poetry and PDM, respectively.

00:34:03.000 --> 00:34:05.880
And they said, that's not going to work for us.

00:34:05.880 --> 00:34:07.220
And we said, why?

00:34:07.220 --> 00:34:11.360
And it's like, well, your lock file was defined very specifically for a certain platform, right?

00:34:11.360 --> 00:34:12.460
Like think of wheel tags, right?

00:34:12.460 --> 00:34:17.240
It says, well, Python version, what ABI do you support, and what OS are you on, right?

00:34:17.240 --> 00:34:19.340
That's the platform from what I'm speaking from.

00:34:19.340 --> 00:34:24.020
It's like, that's great, but we want platform agnostic lock files, right?

00:34:24.020 --> 00:34:29.440
Like if you ever crack open the lock files that Poetry spits out, they actually work no matter what OS you're on.

00:34:29.440 --> 00:34:30.560
And it was by design.

00:34:30.560 --> 00:34:32.980
Sebastian wanted to make it so that it didn't matter.

00:34:32.980 --> 00:34:38.600
And actually, I've heard a good example from Pratune where it's like, let's say you're doing Pi Week, right?

00:34:38.600 --> 00:34:40.080
And you're doing a game.

00:34:40.080 --> 00:34:47.080
You might be developing on Linux, but if you want to give it to your teammate who you're working with during Pi Week and they're on Mac,

00:34:47.080 --> 00:34:49.740
you want a way to be consistent on what you work on.

00:34:49.740 --> 00:34:54.680
And then if the judges are on Linux, you're on a whole other place or Windows or whatever, right?

00:34:54.680 --> 00:34:58.120
So there is a use case there for platform agnostic lock files.

00:34:58.460 --> 00:35:00.340
So we tried to add that back in.

00:35:00.340 --> 00:35:05.780
We took this public to discuss stuff at Python.org where all the packaging discussions happened.

00:35:05.780 --> 00:35:11.120
And it led to 152 comments on a thread starting July 29th.

00:35:11.120 --> 00:35:14.420
So actually, it's more like, oh God, eight months ago.

00:35:15.220 --> 00:35:17.580
So this led to a whole other discussion, right?

00:35:17.580 --> 00:35:19.400
About people going like, okay, the clarification.

00:35:19.400 --> 00:35:20.600
And it ranged, right?

00:35:20.600 --> 00:35:25.160
All the way from the title's not clear enough to like real nitty gritty details.

00:35:25.160 --> 00:35:36.380
And it's now led to us going back, having discussions with the same people plus some other people who participated here who made good comments

00:35:36.380 --> 00:35:44.360
to try to come back with another approach that's a bit more from the ground up covering everything versus what we had before where it was just a platform specific lock file.

00:35:44.360 --> 00:35:48.300
And then we kind of bolted on the agnostic bit and try and design it from scratch.

00:35:48.300 --> 00:35:54.000
But the key point here I want to make is you hear people sometimes go on about, oh, I really want lock files, right?

00:35:54.000 --> 00:36:03.640
Like I've talked about this publicly and I think I talked about this PyCascades, maybe I mentioned it during the steering council keynote or maybe it was PyCon.

00:36:03.640 --> 00:36:11.880
And my wife, Andrea, who said she might actually be in the live stream, said, oh my God, all the comments about when you mentioned lock files were so, so positive.

00:36:11.880 --> 00:36:12.660
Like, okay, cool.

00:36:12.660 --> 00:36:14.940
It's surprisingly hard to make this stuff work, right?

00:36:14.940 --> 00:36:16.820
Like everyone thinks it's a snap your finger.

00:36:16.820 --> 00:36:18.040
Someone has an idea.

00:36:18.040 --> 00:36:19.420
Do you just get it done?

00:36:19.420 --> 00:36:21.600
But there's a lot of use cases here, right?

00:36:21.600 --> 00:36:23.980
And especially with packaging, you constantly hear people go like,

00:36:23.980 --> 00:36:25.680
Oh, packaging in Python is so bad.

00:36:25.680 --> 00:36:27.700
Well, first of all, most people are out of date.

00:36:27.700 --> 00:36:36.200
Like Brian's been really great about having me and other people come on testing code, for instance, directly, specifically to talk about this past packaging stuff to keep people up to date.

00:36:36.200 --> 00:36:41.080
So there's a lot going on, but if you need to try to keep up.

00:36:41.080 --> 00:36:45.920
But on top of that, it's just hard to make any changes because there's so much legacy out there.

00:36:45.920 --> 00:36:48.180
Everyone's got their own workflow at this point, right?

00:36:48.180 --> 00:36:53.900
Like 30, 30 year old language that's had some form of packaging for like over 20 of it.

00:36:54.080 --> 00:36:55.460
Everyone's got the way they want to work.

00:36:55.460 --> 00:36:57.900
And no one likes to have it changed on them.

00:36:57.900 --> 00:36:59.800
Especially your workflow, right?

00:36:59.800 --> 00:37:04.740
Like try telling someone who's using VS Code, like, yeah, we don't think you're doing it the right way.

00:37:04.740 --> 00:37:06.240
Does not fly, right?

00:37:06.240 --> 00:37:07.220
It just does not work.

00:37:07.220 --> 00:37:09.480
Everyone wants to work the way they want to work, which is totally fine.

00:37:09.620 --> 00:37:12.260
But it also makes trying to come up with a standard really hard.

00:37:12.260 --> 00:37:16.900
So the point I'm trying to make here is try to be understanding when you work with packaging Python.

00:37:16.900 --> 00:37:26.320
Not only is Python challenging it on its own due to the amount of C code, Fortran code, all the crazy stuff that people used thanks to us being the glue code, the glue language of the world.

00:37:26.520 --> 00:37:28.440
But on top of that, there's a lot of legacy.

00:37:28.440 --> 00:37:30.680
Everyone has something they ask for.

00:37:30.680 --> 00:37:34.520
And people are working very diligently to continue to try to improve it.

00:37:34.520 --> 00:37:37.900
But do understand that there's a lot of work going on to try to make it better.

00:37:37.900 --> 00:37:42.200
So please try to be understanding on Twitter or wherever else you're going.

00:37:42.200 --> 00:37:42.740
Oh, my God.

00:37:42.740 --> 00:37:44.060
Packaging Python is so bad.

00:37:44.200 --> 00:37:46.600
The places where outrage must be expressed.

00:37:46.600 --> 00:37:47.920
Yeah, yeah.

00:37:47.920 --> 00:37:49.380
So that's what really here.

00:37:49.380 --> 00:37:51.380
So A, lock files are hopefully coming.

00:37:51.380 --> 00:37:53.220
I am working on a V2 of this PEP.

00:37:53.220 --> 00:37:56.060
Probably go public with that.

00:37:56.060 --> 00:37:57.500
I'm going to guess sometime next month.

00:37:57.500 --> 00:38:03.540
And these will be independent of things like poetry and pip-inf and just pip and stuff like that?

00:38:03.540 --> 00:38:04.880
If we're lucky, right?

00:38:04.880 --> 00:38:09.180
Like the key point here is we can't require this.

00:38:09.180 --> 00:38:13.740
But the hope is whatever solution we come up with will be good enough for those tools to rally behind.

00:38:14.000 --> 00:38:19.440
None of this is like an edict from on high to say like all packaging tools must use this.

00:38:19.440 --> 00:38:23.060
The idea with all this has to be what's the carrot for the tools, right?

00:38:23.060 --> 00:38:26.020
How are we making things better both for the community but for the tools themselves?

00:38:26.020 --> 00:38:30.680
Now, it can be we make it so great from the community that the tools feel pressure to support it.

00:38:30.680 --> 00:38:34.860
But when you're talking from this perspective, the first thing you're dealing with is the tools.

00:38:34.860 --> 00:38:38.660
So it's trying to make the tools happy because then eventually the users also become happy.

00:38:38.660 --> 00:38:40.080
So we'll have something.

00:38:40.080 --> 00:38:43.860
At worst, my suspicion is at absolute worst, we'll have platform-specific.

00:38:43.860 --> 00:38:45.660
Specific lock files come out with this path.

00:38:45.660 --> 00:38:52.780
But my hope is we can get platform agnostic and get all the other tools on board so that everyone gets what they want and need and we can service everyone's needs.

00:38:52.780 --> 00:38:53.400
Nice.

00:38:53.760 --> 00:38:56.300
But the key point here is it's being worked on.

00:38:56.300 --> 00:38:57.740
It's taken a long time.

00:38:57.740 --> 00:38:58.820
It's going to take even longer.

00:38:58.820 --> 00:39:03.100
So understand that when people say, oh, why can't packaging get better faster?

00:39:03.100 --> 00:39:05.320
It takes a long time, right?

00:39:05.320 --> 00:39:11.060
Like literally, I've been working on packaging as my focus for Python stuff for years now, right?

00:39:11.100 --> 00:39:15.380
It's not a fast process because there's a lot of people involved, a lot of projects.

00:39:15.380 --> 00:39:16.460
Everyone has their needs.

00:39:16.460 --> 00:39:18.380
So people just need to be patient.

00:39:18.380 --> 00:39:20.180
But do understand things are getting better consistently.

00:39:20.180 --> 00:39:23.200
That ends my rant to hopefully not make you all regret having me on.

00:39:23.200 --> 00:39:24.320
No, that's great.

00:39:24.320 --> 00:39:25.120
I love the insight.

00:39:25.120 --> 00:39:30.080
The only thing with packaging that I want to bring up is I wish it didn't change all the time.

00:39:30.080 --> 00:39:34.140
Sorry.

00:39:34.140 --> 00:39:35.360
I couldn't resist.

00:39:35.360 --> 00:39:39.380
No, I think things are getting better and I like the direction.

00:39:39.380 --> 00:39:41.300
So, but cool.

00:39:41.300 --> 00:39:41.840
Yeah.

00:39:41.840 --> 00:39:49.240
I mean, my grand unified goal when I got involved with packaging really was to try to drive everything towards standards and specs, right?

00:39:49.240 --> 00:39:55.780
Like I have a project called Mouse Bender after the clerk from the cheese sketch, right?

00:39:55.780 --> 00:40:05.680
If you don't know the Monty Python sketch, it's when one of them walks in and just starts to ask for every cheese they can think of and they don't have any in the cheese monger shop.

00:40:05.680 --> 00:40:14.360
So, anyway, I created an outline of what does it take to go from I want to install Django 3.2.7 down to actually getting files on desk.

00:40:14.360 --> 00:40:19.320
And I figured out where there was a spec and where there was a library back in that spec and where the gaps were.

00:40:19.320 --> 00:40:20.600
And I've just been trying to plug it.

00:40:20.600 --> 00:40:22.080
And this is probably the last one, right?

00:40:22.080 --> 00:40:31.580
Because more or less this takes care of the pip-tools, pip m poetry kind of give me a set of locked things and let me be able to reproduce my environment.

00:40:31.580 --> 00:40:36.580
After this, I think I'm more or less kind of I'm personally probably going to be done with packaging.

00:40:36.580 --> 00:40:41.120
After this is moving on to WebAssembly, which hopefully make Michael happy.

00:40:41.120 --> 00:40:41.720
Oh, yeah.

00:40:41.720 --> 00:40:53.460
And then probably that'll lead into is there a way to potentially start distributing like a self-contained binary for Python or just try to help with Python as a Python, CPython interpreter distribution kind of solution.

00:40:53.460 --> 00:40:57.200
So is the new PEP going to be 666 or is that already taken?

00:40:57.200 --> 00:41:02.980
No, actually 666 is taken.

00:41:02.980 --> 00:41:03.640
Okay.

00:41:03.640 --> 00:41:05.140
It's been taken for over a decade.

00:41:05.620 --> 00:41:10.260
It was purposely done to be immediately rejected because it said you should be able to allow mixed tabs and spaces.

00:41:10.260 --> 00:41:14.080
So that was written to make people stop asking for that and it got rejected immediately.

00:41:14.080 --> 00:41:14.740
Okay.

00:41:14.740 --> 00:41:15.100
Okay.

00:41:15.100 --> 00:41:20.840
But no, I'll just since this didn't get accepted, I'm just going to rewrite it in place.

00:41:20.840 --> 00:41:22.300
The goals are the same.

00:41:22.300 --> 00:41:24.380
There's no need to have to do yet another PEP.

00:41:24.380 --> 00:41:28.080
So since this draft, I'm just going to basically just gut it and redo it.

00:41:28.080 --> 00:41:31.380
And since the goal is the same, I'm just going to reduce the number.

00:41:31.380 --> 00:41:31.860
Okay.

00:41:32.220 --> 00:41:32.420
Nice.

00:41:32.420 --> 00:41:35.080
Well, thanks for working on this because it definitely is important.

00:41:35.080 --> 00:41:35.600
Yeah.

00:41:35.600 --> 00:41:36.300
You're welcome.

00:41:36.300 --> 00:41:37.600
Hopefully it'll lead to something.

00:41:37.600 --> 00:41:41.560
Otherwise, I've had a lot of interesting conversations about how people do and don't want to lock things.

00:41:41.560 --> 00:41:43.320
Brian, back to you.

00:41:43.320 --> 00:41:44.160
Back to me?

00:41:44.160 --> 00:41:44.760
Yeah.

00:41:44.760 --> 00:41:45.800
For extras.

00:41:45.800 --> 00:41:47.000
For extras.

00:41:47.000 --> 00:41:48.060
You got any extras?

00:41:48.060 --> 00:41:49.880
Yeah.

00:41:49.880 --> 00:41:50.920
So I've got one.

00:41:50.920 --> 00:41:51.960
I'll throw it up.

00:41:51.960 --> 00:41:56.380
So it looks like Python's popular.

00:41:56.380 --> 00:41:57.200
I've heard that.

00:41:57.200 --> 00:42:01.100
I bet it would be popular enough to have a podcast about it.

00:42:01.420 --> 00:42:02.260
With lots of pop-ups.

00:42:02.260 --> 00:42:03.280
Or three, even.

00:42:03.280 --> 00:42:04.400
Exactly.

00:42:04.400 --> 00:42:07.880
So there's an article on ZDNet.

00:42:07.880 --> 00:42:11.660
Python is on the verge of another big step forward.

00:42:11.660 --> 00:42:15.620
And the big step forward, apparently, is the Ti...

00:42:15.620 --> 00:42:17.080
I'm going to get this wrong.

00:42:17.080 --> 00:42:18.040
Tiobi Index.

00:42:18.040 --> 00:42:21.000
List C is the number one language.

00:42:21.000 --> 00:42:28.500
But Python only needs 0.16% more to become the number one language, according to this index.

00:42:29.060 --> 00:42:33.660
So are they arguing that if we got to the top of Tiobi, that would cause another spike in usage?

00:42:33.660 --> 00:42:35.180
I have no idea.

00:42:35.180 --> 00:42:39.180
No, another spike in usage would cause this to happen, maybe.

00:42:39.180 --> 00:42:39.600
I don't know.

00:42:39.600 --> 00:42:40.480
Oh, I don't know.

00:42:40.480 --> 00:42:40.980
Yeah.

00:42:40.980 --> 00:42:41.660
Yeah.

00:42:41.660 --> 00:42:45.900
So I think, historically, only C and Java have ever had that designation.

00:42:45.900 --> 00:42:47.780
And so it's kind of big news.

00:42:47.780 --> 00:42:49.200
JavaScript's never gotten up there?

00:42:49.200 --> 00:42:50.260
I don't think so.

00:42:50.260 --> 00:42:50.780
Oh.

00:42:50.780 --> 00:42:51.060
Okay.

00:42:51.440 --> 00:42:52.320
One more thing.

00:42:52.320 --> 00:42:56.140
Brett mentioned the cheese sketch.

00:42:56.140 --> 00:43:01.900
And if you go to PyPI.org and type, like, anything that's silly, you'll probably get a 404.

00:43:01.900 --> 00:43:05.400
And the 404 has the cheese sketch embedded in it.

00:43:05.400 --> 00:43:05.840
Yes.

00:43:05.840 --> 00:43:07.020
The G-shop sketch is at the bottom.

00:43:07.020 --> 00:43:08.620
And a piece of history.

00:43:08.620 --> 00:43:11.520
PyPI was originally supposed to be named the G-shop.

00:43:11.620 --> 00:43:15.180
It was actually originally supposed to be, it was actually originally cheese shop.python.org.

00:43:15.180 --> 00:43:21.820
But people were too concerned that managers wouldn't take Python seriously if the package index was named after a mighty Python sketch.

00:43:21.820 --> 00:43:24.500
So it got its name changed.

00:43:24.500 --> 00:43:25.020
Yeah.

00:43:25.020 --> 00:43:26.660
Cool.

00:43:26.660 --> 00:43:28.360
Brett, looks like you got some extras as well.

00:43:28.360 --> 00:43:29.480
Yeah.

00:43:29.480 --> 00:43:31.080
Well, I mean, this is Python Bytes.

00:43:31.080 --> 00:43:33.320
So we couldn't go an episode without mentioning Will.

00:43:33.320 --> 00:43:34.880
Although I think Will's out in the live stream.

00:43:34.880 --> 00:43:40.620
So this is also more of the Paul love fest on here.

00:43:41.080 --> 00:43:48.420
So Paul had Will go on to an episode to talk all about textual and rich and how it's all textured, mainly textual.

00:43:48.420 --> 00:43:51.280
I believe Will tweeted that he got a haircut for this and everything.

00:43:51.280 --> 00:43:53.100
I actually haven't watched it.

00:43:53.100 --> 00:43:55.760
But as I said, it's not Python Bytes that Will doesn't get mentioned.

00:43:55.760 --> 00:43:57.440
So I just want to make sure Will got called out.

00:43:57.440 --> 00:44:05.160
I will also say that it has been 30 episodes since I was last on, which I thought was kind of a nice round number.

00:44:05.160 --> 00:44:09.120
But on that episode, I mentioned that I was working on the Python launcher for Unix.

00:44:09.600 --> 00:44:14.860
And since over the last 30 episodes, I've actually wanted to mention that I had launched version one.

00:44:14.860 --> 00:44:19.180
And thanks to Brian and Michael for feedback because actually one of their feature requests got into it.

00:44:19.180 --> 00:44:26.320
The one thing I did want to call out that actually did happen recently is the launcher is now actually in Fedora.

00:44:26.860 --> 00:44:30.820
So one of the first things that ever got contributed was someone actually put Arch.

00:44:30.820 --> 00:44:35.280
It was actually Burnout Gabor of Tox fame.

00:44:35.280 --> 00:44:38.160
Got it into Arch via AUR.

00:44:38.160 --> 00:44:40.200
I don't know how Arch does community versus not.

00:44:40.200 --> 00:44:40.920
There's a whole thing.

00:44:40.920 --> 00:44:43.120
But you can install it via Arch.

00:44:43.240 --> 00:44:50.460
But just the other week managed some very nice folks from Fedora were nice enough to get it in.

00:44:50.460 --> 00:44:53.840
So you can actually now use DNF to install the launcher on Fedora.

00:44:53.840 --> 00:44:57.260
And then all the previous tarballs are all there as well.

00:44:57.260 --> 00:44:58.620
So it's still available.

00:44:58.620 --> 00:45:01.160
But yeah, version one, no bugs so far.

00:45:01.160 --> 00:45:04.520
So it seems nice and stable and meeting people's needs pretty much.

00:45:04.520 --> 00:45:04.940
Awesome.

00:45:04.940 --> 00:45:05.860
Congratulations.

00:45:05.860 --> 00:45:06.640
Thank you.

00:45:06.780 --> 00:45:11.300
I'm pulling on Michael extra, extra, extra, extra at the end.

00:45:11.300 --> 00:45:16.120
I will say that my Syntactic Sugar series is still going on.

00:45:16.120 --> 00:45:19.300
When it's done, I'll probably have a wrap up thing.

00:45:19.300 --> 00:45:21.940
And this is probably going to be what my next set of talks will be all about.

00:45:21.940 --> 00:45:23.440
But they're still happening.

00:45:23.440 --> 00:45:24.940
One interesting thing.

00:45:24.940 --> 00:45:28.080
I actually just did two just in the last two days.

00:45:28.080 --> 00:45:29.320
They were short.

00:45:29.320 --> 00:45:30.100
Actually.

00:45:30.100 --> 00:45:30.460
Oh, God.

00:45:30.460 --> 00:45:30.960
I didn't really.

00:45:30.960 --> 00:45:31.980
They published three in a week.

00:45:31.980 --> 00:45:33.340
That's a lot for me.

00:45:33.340 --> 00:45:35.480
I did have one that didn't work.

00:45:35.740 --> 00:45:38.660
So if anyone's curious, what happens when I can't unravel a piece of syntax?

00:45:38.660 --> 00:45:41.860
You can read that blog post to see how I put in all the effort to do it.

00:45:41.860 --> 00:45:43.100
And then realize the day after.

00:45:43.100 --> 00:45:44.000
Oh, yeah.

00:45:44.000 --> 00:45:45.240
That's not going to work.

00:45:45.240 --> 00:45:47.080
I did enjoy that.

00:45:47.080 --> 00:45:47.840
Oh, good.

00:45:47.840 --> 00:45:48.180
Yeah.

00:45:48.180 --> 00:45:48.460
Yeah.

00:45:48.460 --> 00:45:52.360
Assignment expressions continuously break me in various ways.

00:45:52.360 --> 00:45:54.820
So there's a bunch of syntax I can never undo because of assignment expressions.

00:45:54.820 --> 00:45:55.760
They're handy, by the way.

00:45:55.760 --> 00:45:58.600
I've used them since the month after we approved them.

00:45:58.600 --> 00:46:01.120
But they do make unraveling our stuff hard.

00:46:01.420 --> 00:46:07.460
And then for Brian, I just wanted to call out that in our last release for the Python

00:46:07.460 --> 00:46:12.060
extension for VS Code, we completely redid our UI.

00:46:12.060 --> 00:46:18.120
VS Code now actually launches with a built-in UI for testing.

00:46:18.120 --> 00:46:21.080
And we integrated directly into it.

00:46:21.340 --> 00:46:23.840
So now you have consistent UI for testing.

00:46:23.840 --> 00:46:27.460
Like a test tree result type of navigation thing.

00:46:27.460 --> 00:46:28.300
Yeah.

00:46:28.300 --> 00:46:31.900
Well, and we had that before, actually, but it was bespoke to our extension.

00:46:31.900 --> 00:46:34.440
And so there was some wonkiness to it and all that.

00:46:34.520 --> 00:46:40.480
But now that this is actually built into VS Code, if all the language, I suspect, will eventually

00:46:40.480 --> 00:46:41.320
move over to this.

00:46:41.320 --> 00:46:45.840
So by having that, learning it for one tool, one language means it'll work for another language.

00:46:45.840 --> 00:46:51.580
And there's some extra niceties to it as well in terms of updates and all that.

00:46:51.580 --> 00:46:52.520
It's really snappy.

00:46:52.520 --> 00:46:59.020
We'll probably, we are also going to rewrite all the code behind this and how it runs to

00:46:59.020 --> 00:47:01.200
make it a bit more performant, more stable and all that.

00:47:01.200 --> 00:47:06.000
So if you've had UI problems before with testing with VS Code for Python, please give

00:47:06.000 --> 00:47:06.500
another try.

00:47:06.500 --> 00:47:09.900
If you've had more discovery run problems, we are going to be working on that.

00:47:09.900 --> 00:47:11.460
So that's coming up as well.

00:47:11.460 --> 00:47:15.980
And then when that's all done, we'll be bugging Brian about this to make sure he gets the Brian

00:47:15.980 --> 00:47:17.500
Okkens stamp of approval.

00:47:17.500 --> 00:47:19.420
Yeah.

00:47:19.420 --> 00:47:20.840
You know, I charge for that.

00:47:20.840 --> 00:47:21.700
But no.

00:47:21.700 --> 00:47:24.140
I thought that was just coming on the podcast was the fee.

00:47:24.140 --> 00:47:30.400
No, I definitely, I tried this out and I like the changes.

00:47:30.400 --> 00:47:33.280
And I'm excited to see the discovery changes as well.

00:47:33.280 --> 00:47:33.880
Yeah.

00:47:33.880 --> 00:47:38.320
Well, we reached out to the pytest team directly actually and asked them like, what would you

00:47:38.320 --> 00:47:39.040
want us to do?

00:47:39.040 --> 00:47:42.900
And they gave us some feedback of how they think it should be done and all that.

00:47:42.900 --> 00:47:46.480
So we're hoping to incorporate that and use that as the basis of how we do pytest and then

00:47:46.480 --> 00:47:46.980
UnitTest.

00:47:46.980 --> 00:47:48.200
UnitTest is UnitTest.

00:47:48.200 --> 00:47:52.720
Unfortunately, we had to break, we had to drop no support due to this, but honestly, it was

00:47:52.720 --> 00:47:54.620
extremely low used anyway.

00:47:55.320 --> 00:47:58.360
But we did have a lot of gum, but we still have UnitTest by Test support.

00:47:58.360 --> 00:47:59.700
People shouldn't use it anyway.

00:47:59.700 --> 00:48:01.720
You heard it from Brian.

00:48:01.720 --> 00:48:03.880
Don't send me the hate mail.

00:48:03.880 --> 00:48:05.300
But yeah, that's it.

00:48:05.300 --> 00:48:05.840
Nice.

00:48:05.840 --> 00:48:06.640
Those are all great ones.

00:48:06.640 --> 00:48:07.280
All right.

00:48:07.280 --> 00:48:09.900
I now have banners to separate my sections.

00:48:09.900 --> 00:48:11.000
Oh, that's awesome.

00:48:11.000 --> 00:48:12.580
Nice.

00:48:12.760 --> 00:48:12.960
All right.

00:48:12.960 --> 00:48:14.860
I'll be quick, but I do have a couple of things.

00:48:14.860 --> 00:48:19.560
I just want to go back and sort of talk more about NerdFonts a little bit at nerdfonts.com.

00:48:19.560 --> 00:48:20.540
People can check this out.

00:48:20.540 --> 00:48:24.360
So it takes all these different things and puts them together like a bunch of font, awesome

00:48:24.360 --> 00:48:29.140
fonts, dev icons, weather icons, and to a bunch of things.

00:48:29.140 --> 00:48:34.340
And then the ones that I really like is the developer fonts, right?

00:48:34.340 --> 00:48:36.020
So you go over and check these out.

00:48:36.020 --> 00:48:38.360
A lot of them have font ligatures.

00:48:38.360 --> 00:48:42.280
Brett, I don't know how you feel about font ligatures, but I'm actually a fan.

00:48:42.500 --> 00:48:44.020
Although they freaked me out when I first saw them.

00:48:44.020 --> 00:48:46.040
I'm definitely a fan.

00:48:46.040 --> 00:48:49.280
I'm actually a fear of code.

00:48:49.280 --> 00:48:50.420
Yeah, exactly.

00:48:50.420 --> 00:48:50.840
Yep.

00:48:50.840 --> 00:48:58.640
Although the new ligature support for infinite arrow length throws me a bit sometimes to the

00:48:58.640 --> 00:49:03.100
point that I actually have turned it off and I use Cascadia code, the NerdFont version

00:49:03.100 --> 00:49:04.760
for Starship in my terminal.

00:49:04.760 --> 00:49:07.960
So I actually have a separate font for terminals in here.

00:49:07.960 --> 00:49:08.160
Yeah.

00:49:08.160 --> 00:49:09.100
Cascadia right there.

00:49:09.100 --> 00:49:10.760
Cascadia Cove here.

00:49:11.620 --> 00:49:14.260
It's Cascadia code on the official.

00:49:14.260 --> 00:49:15.800
Gotcha.

00:49:15.800 --> 00:49:23.440
So yeah, I use Cascadia for my terminal and then I use Fira code for my editing.

00:49:23.440 --> 00:49:31.380
Although I'm contemplating actually buying a font called Mono Lisa, M-O-N-O-L-I-S-A and

00:49:31.380 --> 00:49:31.920
using that.

00:49:31.920 --> 00:49:33.260
But I haven't pulled the trigger yet.

00:49:33.260 --> 00:49:35.180
I'm not against buying fonts if they're amazing.

00:49:35.180 --> 00:49:35.700
Yeah.

00:49:35.700 --> 00:49:36.200
Neither am I.

00:49:36.200 --> 00:49:36.580
It's $100.

00:49:37.780 --> 00:49:39.280
Armin Roenacker actually uses it.

00:49:39.280 --> 00:49:41.880
That's partially how I came across it.

00:49:41.880 --> 00:49:43.180
And someone else recommended it somewhere.

00:49:43.180 --> 00:49:44.060
Kuchel Doss.

00:49:44.060 --> 00:49:44.940
Yeah.

00:49:44.940 --> 00:49:48.120
Paced on me tweeting about it, bought it and actually thanked me for using it.

00:49:48.120 --> 00:49:50.920
So multiple people I know use it and actually appreciate it.

00:49:50.920 --> 00:49:51.180
Yeah.

00:49:51.180 --> 00:49:52.340
And it does have ligature support.

00:49:52.340 --> 00:49:52.820
Good.

00:49:52.820 --> 00:49:53.200
Yeah.

00:49:53.200 --> 00:49:53.500
All right.

00:49:53.500 --> 00:49:54.740
So one more shell thing.

00:49:54.840 --> 00:50:00.780
So here is my power, my Microsoft terminal running Oh My Posh on my computer.

00:50:00.780 --> 00:50:02.080
Look how dreadful that looks, right?

00:50:02.080 --> 00:50:05.500
That's because I, that's because I'm not using nerd fonts.

00:50:05.500 --> 00:50:10.240
If people are just listening, there's just tons of squares where there should be, where there

00:50:10.240 --> 00:50:11.480
should be symbols and stuff.

00:50:11.480 --> 00:50:16.520
And it says like, you know, username, square, square, folder name, square, square, get information.

00:50:17.180 --> 00:50:22.100
But if you go and install the nerd fonts, pretty much any of them, the terminal or Oh My Posh,

00:50:22.100 --> 00:50:26.360
actually, I guess is what it is, is, is tested against all the nerd fonts to work.

00:50:26.360 --> 00:50:30.660
So if you install that, then you end up with beautiful terminal, right?

00:50:30.660 --> 00:50:34.180
So definitely something nice to look into.

00:50:34.180 --> 00:50:37.600
If you're just a, yeah, just use whatever mono thing is built in.

00:50:38.240 --> 00:50:38.600
Yeah.

00:50:38.600 --> 00:50:39.740
The nerd fonts are cool.

00:50:39.740 --> 00:50:40.400
All right.

00:50:40.400 --> 00:50:41.620
Let's see what's next.

00:50:41.620 --> 00:50:44.460
Oh, did a article interview.

00:50:44.460 --> 00:50:48.280
This company in Russia interviewed me and people are interested.

00:50:48.280 --> 00:50:50.220
I want to give a quick shout out to that.

00:50:50.220 --> 00:50:53.820
It was kind of fun to talk about some of the history of the podcast and stuff over there.

00:50:53.820 --> 00:51:03.100
More shell Henry Schreiner third said, shared with us, here's my setup process for setting

00:51:03.100 --> 00:51:03.980
up a new Mac.

00:51:03.980 --> 00:51:07.800
And there's all these cool scripts and brew setups and all sorts of things,

00:51:07.880 --> 00:51:13.340
including all the fish shell and Vim setups that you might need.

00:51:13.340 --> 00:51:16.540
So if you want to follow up, we talked a little bit about that last time.

00:51:16.540 --> 00:51:17.460
People can follow up with that.

00:51:17.460 --> 00:51:23.140
I'll also say one convenient thing about committing all of your dot files, at least on GitHub is

00:51:23.140 --> 00:51:28.860
if you use code spaces, GitHub, and you check a box, code spaces will automatically clone your

00:51:28.860 --> 00:51:32.300
dot files repo and load them up into your code spaces.

00:51:32.300 --> 00:51:33.320
Ooh, that's nice.

00:51:33.320 --> 00:51:33.960
Yeah.

00:51:33.960 --> 00:51:34.380
That's very nice.

00:51:34.380 --> 00:51:39.340
And so I've actually published my dot files and done somewhat of a similar thing.

00:51:39.340 --> 00:51:43.920
The other nice thing is obviously when your machine, I don't know if I ever told the story

00:51:43.920 --> 00:51:48.480
in this podcast, but when your laptop accidentally gets grabbed by someone else and ends up in

00:51:48.480 --> 00:51:54.420
Dubai and it gets shipped to you to a core dev sprint in London later and you feel the need

00:51:54.420 --> 00:51:55.600
to wipe it for security purposes.

00:51:55.600 --> 00:51:59.680
It's very convenient to have all your stuff in the cloud and have your dot files in a repo.

00:51:59.900 --> 00:52:01.440
So it's just a clone run and you're done.

00:52:01.440 --> 00:52:02.080
Yeah.

00:52:02.080 --> 00:52:03.380
I would want to wipe it too.

00:52:03.380 --> 00:52:07.280
Someone had physical possession of your laptop for a while.

00:52:07.280 --> 00:52:08.780
Yeah.

00:52:08.780 --> 00:52:09.480
All right.

00:52:09.480 --> 00:52:10.460
A couple other things, Brian.

00:52:10.460 --> 00:52:15.360
Last time I said I was using the editor to just jump between projects and stuff.

00:52:15.360 --> 00:52:19.780
And one thing I didn't point out is like I'm on the terminal all the time as well, but I basically,

00:52:20.020 --> 00:52:24.080
everything that I have some kind of terminal command for is I've almost entirely set up some

00:52:24.080 --> 00:52:25.180
kind of bash alias.

00:52:25.180 --> 00:52:31.780
So that actually uses the specific virtual environment as part of the command in the alias.

00:52:31.780 --> 00:52:35.660
So it doesn't matter what I have activated or where I am or anything like that.

00:52:35.660 --> 00:52:37.440
So anyway, just a quick follow up on that.

00:52:37.440 --> 00:52:37.860
Cool.

00:52:37.860 --> 00:52:38.660
All right.

00:52:38.660 --> 00:52:40.820
Well, I think that's it for extras.

00:52:40.820 --> 00:52:43.080
Do you have a separator for our joke also?

00:52:43.080 --> 00:52:44.260
I have a laughs.

00:52:44.260 --> 00:52:45.580
I have a separator for our laughs.

00:52:45.580 --> 00:52:46.460
Yes, of course.

00:52:48.060 --> 00:52:48.460
Nice.

00:52:48.460 --> 00:52:52.780
I hope this is not as funny as the joke, but you all, you all will be the judge.

00:52:52.780 --> 00:52:53.040
Okay.

00:52:53.040 --> 00:52:53.660
Okay.

00:52:53.660 --> 00:52:54.220
All right.

00:52:54.220 --> 00:52:56.900
So this is going back to a solid, solid place.

00:52:56.900 --> 00:53:00.540
Geek and poke over at geek dash and dash poke.com.

00:53:00.540 --> 00:53:02.400
This one is called the last 5%.

00:53:02.400 --> 00:53:08.300
And Brett, your comment was perfect about setting up a new computer or reinstalling everything.

00:53:08.300 --> 00:53:08.560
Right.

00:53:08.560 --> 00:53:09.540
So this is the last 5%.

00:53:09.540 --> 00:53:10.460
I know where this is going.

00:53:10.460 --> 00:53:12.740
Or corporate IT made easy.

00:53:12.740 --> 00:53:17.220
Make sure that the new developers, notebooks or computers aren't only 95%

00:53:17.220 --> 00:53:18.440
provisioned.

00:53:18.440 --> 00:53:24.320
So there's a senior woman developer helping a new one who can't seem to compile the project

00:53:24.320 --> 00:53:29.040
or run it or something that says, I had the same problem, but I barely remember somewhere

00:53:29.040 --> 00:53:32.960
in a wiki or on a file server, there was a certificate or something like that.

00:53:32.960 --> 00:53:35.780
And I had to copy it to some folder on my machine.

00:53:35.780 --> 00:53:38.480
And it's just entitled the last 5%.

00:53:38.480 --> 00:53:42.180
It's like anytime someone onboards onto your team right at work.

00:53:42.180 --> 00:53:43.040
Yes, exactly.

00:53:43.040 --> 00:53:43.320
Oh yeah.

00:53:43.320 --> 00:53:47.320
Go read with the last person five years ago or two years ago or how often you get a new

00:53:47.320 --> 00:53:48.000
person come on.

00:53:48.000 --> 00:53:48.180
Yeah.

00:53:48.180 --> 00:53:48.800
Did it.

00:53:48.800 --> 00:53:50.480
And by the way, the processes have all changed.

00:53:50.480 --> 00:53:52.500
So yeah, chances of it does not work.

00:53:52.500 --> 00:53:52.700
Yeah.

00:53:52.700 --> 00:53:56.660
Just scroll back two years in Slack or Teams and find that message where we talked about

00:53:56.660 --> 00:53:56.800
it.

00:53:56.800 --> 00:53:57.320
Yeah.

00:53:57.420 --> 00:54:00.760
You just have to hire people more often.

00:54:00.760 --> 00:54:03.640
So they update the wiki at least every few years.

00:54:03.640 --> 00:54:04.340
Yeah.

00:54:04.340 --> 00:54:07.500
But the question then becomes, is it because your headcount's growing or because your turnover

00:54:07.500 --> 00:54:11.100
is so high in this, you're just a bad manager in this, everyone just keeps quitting your

00:54:11.100 --> 00:54:11.360
team.

00:54:11.360 --> 00:54:12.620
Yeah.

00:54:12.700 --> 00:54:15.640
I'd rather just have the stable number of people who, by the way, told me they were

00:54:15.640 --> 00:54:19.040
going to be on the live stream and I didn't see Michael let any of the comments by.

00:54:19.040 --> 00:54:20.360
So I wonder if they actually showed up.

00:54:20.360 --> 00:54:22.940
So hello to my team if they showed up.

00:54:22.940 --> 00:54:25.020
And Andrew and my wife, if she did.

00:54:25.020 --> 00:54:25.860
Yeah, I hope they did.

00:54:25.860 --> 00:54:29.040
And Chris May has a final parting thought for us.

00:54:29.040 --> 00:54:32.620
This comic hits too close to home or work or work from home.

00:54:32.620 --> 00:54:34.960
Yeah, definitely.

00:54:34.960 --> 00:54:35.580
Definitely.

00:54:35.580 --> 00:54:36.280
Cool.

00:54:36.280 --> 00:54:37.780
Well, that's it.

00:54:37.780 --> 00:54:39.540
So thanks a lot, Brett, for showing up.

00:54:39.540 --> 00:54:40.120
Of course.

00:54:40.120 --> 00:54:40.760
It was a joy to have you.

00:54:40.840 --> 00:54:44.960
Thank you to my cat for taking a nap during the entire podcast and let's not distract

00:54:44.960 --> 00:54:45.760
me in the middle of it.

00:54:45.760 --> 00:54:49.920
We'll put it on our calendar to make sure to invite you about every 30 episodes then.

00:54:49.920 --> 00:54:50.660
Perfect.

00:54:50.660 --> 00:54:52.900
Yeah, it's great to have you here.

00:54:52.900 --> 00:54:53.240
Yeah.

00:54:53.240 --> 00:54:53.840
Thanks.

00:54:53.840 --> 00:54:54.400
Thanks, everyone.

00:54:54.400 --> 00:54:55.060
Thanks, Brian.

00:54:55.060 --> 00:54:56.140
Thanks, guys.

00:54:56.140 --> 00:54:57.980
Thanks for listening to Python Bytes.

00:54:57.980 --> 00:55:00.800
Follow the show on Twitter via at Python Bytes.

00:55:00.800 --> 00:55:03.920
That's Python Bytes as in B-Y-T-E-S.

00:55:03.920 --> 00:55:06.760
Get the full show notes over at Pythonbytes.fm.

00:55:06.760 --> 00:55:10.440
If you have a news item we should cover, just visit Pythonbytes.fm.

00:55:10.440 --> 00:55:12.100
and click Submit in the nav bar.

00:55:12.100 --> 00:55:14.220
We're always on the lookout for sharing something cool.

00:55:14.220 --> 00:55:18.720
If you want to join us for the live recording, just visit the website and click Livestream

00:55:18.720 --> 00:55:21.620
to get notified of when our next episode goes live.

00:55:21.620 --> 00:55:26.000
That's usually happening at noon Pacific on Wednesdays over at YouTube.

00:55:26.000 --> 00:55:29.380
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:55:29.380 --> 00:55:33.100
Thank you for listening and sharing this podcast with your friends and colleagues.

