00:00:00 Hello, and welcome to python bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 303, recorded September 27 2022. And I am Brian knockin. And I'm Michael Kennedy. We've got a lot of great stuff to talk about today. And it's a wonderful September day, it's finally kind of not feeling like the blazing summer, but it's still too hot.

00:00:22 But it's that lovely fall before it rains for 120 days straight, like

00:00:27 the pre faithful. Yeah.

00:00:31 All right, well, Python news still flows in the fall. Yes, all sorts of good stuff. Yeah, what I got on deck for us is a bit of a follow up. So I got this message from Miko on Kala, who sent over this repo that he put together, says you spoke about humor, humor, humor, Hu MRA, and said, you know, what, there's, there's a bunch of these projects, I'd really like to kind of get my head around them. And so he would do all the trouble to like, do a whole research project, and a categorization or a taxonomy of these different libraries, which is really fantastic. So I'm linking to his GitHub repository that is basically a readme, I mean, get ups kind of the new blog for code analysis. And it says already for humans, Reg, regular expressions for humans, and it says, there's a bunch of different options, this list could be useful to help you decide if you're looking for a tool, you'll just know what's out there. And you'll get a quick look and feel of how each libraries API is. Or if you're thinking about building a tool, you can check out the alternative approaches and either contribute to an existing package or see if your thing is truly unique. And if you're building a tool already have one, you can communicate your differences compared to the other libraries. Okay, so there's a bunch of packages listed here with some code examples. So the first one, Miko calls flow style regular expression generators, I would call them fluent style, but where you say, you know function called dot function, call dot function, call that function call basically, the result of working with a library or calling a function, it returns the same thing again and again. And you can kind of build it up like Oh, RMS, or a lot like this, you know, you'd say like, objects dot filter dot order by dot limit dot sort, like that kind of model. Okay, so these include Python, verbal expressions at AFI, M Ra, regularize and Ari underscore patterns. And they all are similar, but not the same. So I'll just I'll read something off the top one, the Python, verbal expressions, you would say, ver X for version expression dot anything dot then space dot then left bracket.or, parentheses, so square bracket or opening square bracket, open parentheses, then dot anything. And that'll generate a regular expression that would then go and you know, match, basically like star and then space and then either square bracket or parentheses open. What do you think?

00:03:14 I don't know if we're getting better than actual regular expressions at this point.

00:03:19 All right, well, let's go to the next category. Then the, these are categorized as plus style regular expression generators. I would call them ones that like overload operators, right? They use the override what plus means and pipe. What that means. And that's a little bit like what pathlab does for Ford slash, more time, time delta, right? Yeah. So here, I could say, you know, this includes the humor, and that's the one from Al Swaggart. So this the let's see, which one of these do I think that I like the best, I'll probably go with this, this first one here. So you can say capture one or more of anything uppercase, plus the empty string, or the string with a space rather, plus either the open parenthesis or the open square bracket? That one do you like this style better?

00:04:09 Well, I'm probably a bad one to ask because I actually don't have a problem with regular expressions. So

00:04:14 sure, well, neither of these two are my favorite style either. I actually think I would use the format strings. And the reason which is the third category, and the reason I say that is it's really different than regular expressions where these are kind of like a semantic wrapper on regular expressions. Yeah, no, yeah, there's like a way like I call functions, I give a name to the thing instead of just the symbol like plus versus, you know, plus, r star, dot star, that could be anything or you could say, you know, anything like also

00:04:45 with, with all of these, they have a special syntax that they use. So you don't have to learn regular expressions. Exactly. But you still have to learn their syntax.

00:04:54 Yeah, that's true. So when I might use one of these libraries is when it's like not Not enough to go do full on regular expressions, but you know, find is not sufficient, or index, things like that. And that's these string format styles. So if you knew I had like a log file or something, and it said power a colon, some number, present a string, and then a temperature than another number, you could just say, power, this is the scan F library, power colon, percent, F bracket, percent, percent s, comma, and then Tim. So you have basically, the, the format string you would use to generate this thing can now be used to parse it in reverse. And so it'll say you have to have the word power colon, and then a floating point number, and then and so on. That's the older that's, that's the python two style, I suppose. Then you have Pars, and simple match, which are both much more F string style. So you so they have,

00:06:00 these are great. So like, I'm looking at parse, and that looks, the least I

00:06:04 could use. So here, yeah, parse the it says, here's the regular expression, pattern thing you would make, you would say, just as a string to get curly bracket, amount, colon D, item, colon, W, comma, meet me at curly time, right. And it just goes and finds the amount, the time and the item, as a beautiful, you know, it just like is basically it's a reverse F string is what it is. So you can express what you're looking for as an F string, then all of a sudden, you get it back. And so for those kinds of matches, I think this is really, this is it's pretty different than a regular expression. It

00:06:40 is. But it's it's especially those ones where you're You're not just trying to match a string, but you're trying to pull data out, yes, where the regular expressions really get ugly.

00:06:50 So you got like, I got to have a capture group and all this stuff. And yeah, like, Ah, she's like, how do I do that again?

00:06:56 Exactly. And then the Capture Groups, and it's guaranteed to confuse somebody on your team, but something like this. I think it's pretty neat.

00:07:03 Yeah, it does mean the data has to be more structured. But if it's highly unstructured, go crazy with regular expressions, if you just need more than, like I said, a little more than find your index. This is pretty cool. Yeah, yeah,

00:07:14 there's some wacky things that really, you need to jump into regular expressions or, or the, the the other kinds,

00:07:22 indeed, all right, well, Miko put his thoughts on which ones to pick and when, and then a little bit more diving into each of these, and some, some comparisons and whatnot. So you can check this out, it's really good work, if you know of other ones maybe contribute to them or add some more explanations. But there you have it really nice. Yeah, this is real nice. I'm going to start I looks like I may have already started. So let's get thanks for sending that in and creating,

00:07:51 well, what do I got, I got just some sort of news ish sort of things. So I've been used playing with Pydantic, and fast API and a lot. And with that, you've got types. So you're, you're intentionally adding types, not just because you want my PI to pass, but you're adding types because it helps you, you kind of have to fast API and stuff and Pydantic. So one of the things I one of the things I was curious about is the whole the optional part, because somebody actually caught me on this, I have this, I tend to just say like, int x equals none, or no x of type int equals none. And that means it's supposed to be an integer, or is it supposed to be a string or something? But it doesn't have anything yet. So the default value is none. But none is obviously not a string or an integer. So right, what do you do? And so there's like a bunch of options. One, you could just say, well, the language allows it, so I'm gonna do it anyway. But I don't recommend that the other. The other is one option is to use optional, but there's some issues with that, we'll talk about those in a sec. And then another is just to union or in so you can either use like int or into bar none or union event and then and then the sign it and then and, and so I read for a while, like when I, I I'm like the language allows it just go fine. Because what I really mean my intent is I expect somebody to pass in, in this case an integer. But if if the if nobody passes, if they don't pass anything in I want to I want the the function to handle that case also. And so that's what the nun is for. The union is a little weird because it says you can pass in and none. And, and I that would be weird for somebody to pass in. But that's what our languages also it like, that's the default. So I put that As I put out a little survey, the recommendation that of the 630 votes, the was either use the union or optional. People are kind of on the fence about with that. But so Adam Johnson says reply to just the other day said, Well, my pie just released and they, they don't deprecate this yet, but there's going to be a future deprecation of implicit optional types. So you kind of can't use the old style, if you're using my PI. Also, you should

00:10:32 know old style being int equals none. Yeah.

00:10:36 of just like, ignore the type for the default value. So my PI, the my pi 0.9 0.981. I don't know why we're not where it's zero version still, but whatever. But it has it talks about implicit optional type. So this Yeah, of saying it's a string. But if the default value is none, that's, that's bad. We don't want that anymore. What we want is optional, we'll say we'll work and it'll say, you know, what, then this is the weird part. So the weird part is optional isn't optional. So what what I'd like to use as optional like in in, in fast API, it looks nice to say this, this variable is optional. But it what really optional means is, is just that optional, just translates to the type or none. That's it. Those are the types. It doesn't say it's actually optional. It's only optional if you if you have a default value. Default Value makes a

00:11:41 right option. You can have a thing that explicitly says this type is optional, but it's a required parameter, which is a little odd, right?

00:11:48 Yeah. What's up with that? Yeah, so require an optional. So anyway,

00:11:54 the third parameter names such and such of this type is required, like, but it's literally of type optional. Yeah, I hear you. Okay.

00:12:02 So, the basic gist is you have to pick you got to pick either optional, use of optional and then assign it to none, or use, use a union. But another, you know, another option is just to actually assign something other than none. So if it's a string, you could have a flag value to say like Sentinel. Yeah, that means like an empty string, like a great one for a string is empty string. The problem was with numbers like floating point or an integer number, there are dissenters sentinels. I mean, I guess you could use Nan, not a number, but that's weird. Anyway, wanted to reference typing. So just to say, my proof that optionals really just the union of the type or not, doesn't say anything. And there and they they explicitly say in the Python documentation that you can, you basically you don't have to use option, the the keyword option, or you could just put a default value that makes it optional. But yeah, it's only a type anyway. But the other thing, the last bit I wanted to talk about with this is the best introduction, this if you're confused, like I still am apparently, about this, the best discussion that I've found is in the fast API docs, and go to there's a Python types intro. And, like at the top, partway down, it says possibly none. And it discusses all of this. And the first API recommendation is, is to use union instead optional. And I think I've finally gotten there that I think I prefer just the either union or if you're in the bar thing. So you can say type or like type bar none. And that that's if you're only if you're Python 310 That works. But if you're the and the others would use union. So

00:13:55 that's it, there's a bit of a voting in the audience of RSS, int or none, which is a voting for that one. Anthony says I prefer optional of n equals none myself. I also concur with Anthony but I still very much would love to see some language syntax, that's a little bit cleaner, like in C Sharp, in Swift, they just have question mark, at the end to say it's either can be none, or it can be its value. And it's just such a common thing to set something to none. And then or alternatively have as value that I would just I would love to see some kind of simpler syntax there then then we see now but

00:14:39 yeah, or some other, some other Sentinel that like like SQL doesn't SQL have like no or something like that. That's just that's not a legitimate value for anything.

00:14:51 Yeah, and also if we use by the way, one more reason, I think people would want the question mark or something I think it'd be cool is, is it gives you This tonal inflection, right? Like this function takes an int, boom, hard, hard stop. Like that means it has to be an int, or it's like an int. Well, then you're not sure it's optional. Or you're

00:15:11 not sure what type it is. Yeah. It's an int.

00:15:16 In question, Mark, come on, it's, it's in a lot of the other languages that have this, like, things that can't be knowable unless you express their knowledge you say they can possibly take on the value or not. Anyway, I know this has been discussed and and shot down. But yeah, please make it happen.

00:15:33 And I was pretty sure you could do this. Thank you. Alberto mentioned that you can use you can use from future import annotations to use the bar for everything on three, eight and above. So that that's good. And but like, like for, like, if I'm doing a fast API, the optional is really what I mean. And that that, I mean, it's optional. But it's frustrating that the type optional doesn't actually fill in anything.

00:15:58 Yeah. Yeah. So a bit of a mismatch there.

00:16:04 That's enough. That is

00:16:05 enough. Enough on that. It's, it is so good, though. Good stuff that those types of there. Brian, you want to tell us about our sponsor for the week?

00:16:13 Sure. So Microsoft start Microsoft for startups, founders hub, it's, it's very cool. So Microsoft, this episode of Python bytes is brought to you for micro by Microsoft for startups. And the Microsoft for startups, founders hub provides all founders at any stage with free resources to help you solve startup challenges, challenges. In it, it's a platform. The platform provides technology benefits, access to expert guidance and skill, resources, mentorship, and networking connections and so much more. And those those skilled resources, and the one on ones and then the networking, it's so valuable. So unlike others in the industry, Microsoft, for startup founders hub doesn't require startups to be investor backed or third party validated to participate. It's truly open and you don't have to live in San Francisco. So what do you get, you get free access to GitHub and Microsoft Cloud with the ability to unlock credits over time. And they also have partnered with innovative companies like open AI, a global leader in AI research, and deployment to provide exclusive benefits and discounts through the founders hub, becoming a founder is no longer about who you know, you'll have access to their MIT mentorship network, giving you access to a pool of hundreds of mentors across a range of disciplines, across areas like validation, fundraising, management, and coaching, sales and marketing, as well as specific technical stress points, and you know that there's at least one or two of those fields that you need help it you'll be able to book a one on one meeting with the mentors, many of whom were former founders themselves. Make your ideas a reality today, with the critical support you get from the founders hub to join the program, visit Python bytes.fm/founders hub 2022. And of course, the link is in our show notes.

00:18:07 Absolutely. Thank you, Microsoft. Alright, let's talk about linters. I know you're a fan of linting code and making it look good as am I. But if you did scythe on you might not be able to get great information about it. So Marco Garelli sent in this project that he's just getting started called Cython. Lint. So if you've done much Cython I know you do C and you do Python, but you live in this weird middle ground.

00:18:35 I don't but I want to, or maybe I don't, I don't know, it's,

00:18:39 I think it's pretty neat. You know, there's, there's a bit of a built like a bit of a build step you got to go through to get code that will run but the ability to say I wrote Python, it has type and it's like, oh, let's just do a little bit different code. And now it runs at C speed for just like a functional view. I think that's a pretty appealing idea. And you know, Cython is definitely a good way to do that. So Cython lint will go through and you know, you can just pip install it and then run it as a command line, give it your files, or you can even install it as a pre commit hook. And then you know, it'll just whenever you commit it'll obviously run as well. Just like the the no QA and flake eight there's a hash new Cython lint to turn off the lines and right now both mostly checks things around variables, but he's working on more and hopefully other people out there are interested in this and can add some ideas to

00:19:32 this is really cool. Um, I hope that he does get people helping out and adding to this. It's definitely it was something needed. Yeah, he

00:19:41 said he ran it on pandas, NumPy, scikit learn and q pi and found ways in which all those libraries can be cleaned up. So pretty neat. And all those libraries are notable because they're really highly, highly used and have been around for a long time. So if this is finding issues with them, then yeah, Maybe it points out that something like this should exist. Yeah, definitely. Yeah. Cool. So not a whole lot more to say about it. You know, Scythe on is cool. Having some more tools to support it also

00:20:09 cool. Yeah. I've got another sort of possibly short topic, I found out about this cool diff tool called diff tastic. Have you seen this before? Diff tastic?

00:20:20 I don't think so. So I'm always looking for a better diff to I'm never really content with my diff tools, I use one called beyond compare, it looks like it's cutting edge out of the early 90s.

00:20:33 But boy, so I'm finding that also. So I use diff a lot, but I also use it a lot within it with with respect, like within with Git. So I do, you know, you're doing a git diff of, of older versions or something. So diff tastic, is the what's what how it stands out against other diff tools is it's not line based. So it's a, it's a structural diff tool that understands syntax. So what it does is it evaluates the language and tries to determine what language the file is in. And then, if it like, and it's got a ton of languages, and if you if figures out, like it's Python, for instance, or any other language, it creates an abstract abstract syntax tree of the files, and then checks the differences of those. So in the past, like one of the things that messes things up is just spacing problems. Like in in in something like C or C++, where spacing doesn't matter, you can just say, well ignore whitespace. But in Python, you really can't say ignore whitespace. Because whitespace is significant. But with the diff tastic, the diffs will, will know you can, if it's significant whitespace. It'll tell you so I tried this out this morning. And it's it's pretty amazing. So I tried it. So the thing I tried was replacing with the diff tool, so there's a with Git. So in Git, you can you can say, I just tried this single line thing, to just temporarily say I want to try git diff it has is diff T instead of instead of git diff. So what this does is it does a diff and there's ways on in the in the documentation that where you can permanently turn it on. But it's colorized. So you've got like syntax highlighted files side by side. And it'll show you what's different. And it highlights the difference. Well, I got a little bit confused. Because the syntax, there's syntax highlighting and highlighting to show you the difference. So there's a flag and I'm not sure where it is in the documentation. But basically, you just turn off you say, dash test syntax, highlight equals off, turn, it turns off the file syntax, but it shows so all the highlights are just diffs. And so like if you normally say git diff, just without anything, it'll say, what's different about my, my file versus the last version, or the working directory or whatever, like, what it's usually does the right thing. And, and then, but it's like on top of each other, it's not side by side. So having it side by side, it's cool and having a highlight. So I had a some code where I changed stuff. And I've been working on a month ago or so. And I forgot what I did. And git diff showed me just tons of changes. But diff tastic showed me that I was just changing some, some minor things like adding types, a couple types here and there, or changing double quotes, or single quotes or double quotes. So I apparently ran black on it at one point and, and there was like, oh, since ASD wise, there's really nothing different. So I can just commit this and be done with it. So it's really helpful.

00:23:52 It's a pretty interesting idea, right? Sometimes you really care about those little formatting differences, and you want to make sure they get merged and committed. And other times you want to know what is the essence of the change? And the sounds like that'll answer that. That's pretty cool.

00:24:05 And it showed me a bunch of stuff that Git says change. There were file changes, but Git, but diff tastic said, there's no there's no syntax change. So I apparently had changed some, you know, light, some formatting or something or red black on it, but there was nothing significant change. So interesting on that is it apparently this was a huge pain in the butt to make. And, and there's a we're going to link to a Blogger blog article called diff tastic, the fantastic diff by Wilfred Hughes, who wrote it that basically said he thought this was gonna be sort of a minor thing to build, and it was a big thing to build.

00:24:46 So six months later,

00:24:49 yeah, I'm not sure how long he spent on it. But yeah, but yeah, and here's a here's an image of the little different highlighting the colors of changes and stuff. So anyway, it's nice.

00:24:59 Yeah, look It's a great tool. I've never heard of it. Thanks for Thanks for finding it. I borrow out there says code dash dash diff guessing that's VS code diff. I've never ever done anything with it use

00:25:11 that command line was, let's try that.

00:25:13 Perhaps. Okay. Also one that I've been looking at, I haven't gone into uses this one called Kaleidoscope. That's just for Mac only. But it looks, it looks pretty interesting. It's supposed to work on code, but also on like, directories, but you know, images and other documents as well. So maybe someday, the only challenge it looks beautiful. The only problem as on prom. It's the thing that has held me back. It's it's $150. So it better be darn good. Please do there's a free trial. Maybe I'll try it someday.

00:25:45 I volunteer you to try it out and get back to it.

00:25:49 Exactly. Let me know how that goes. Yeah. All right. Well, that's our items. Right? I got I got an extra few ready? Yeah, well, let's go to extras. So this is not a Python thing. But a thing that developers may be interested in. Have you heard of next DNS? No, to one of the things that's a big hassle is spyware tracking, you know, all sorts of trackers like finger printers, and you know, Facebook cookies, and all these different things that are trackers, which is not lovely. But also malware as well. And a lot of those are being served off of third party domains. And so there's this product called next DNS, and I'd never heard of it. But apparently, it more or less acts like a firewall by not allowing malicious or unwanted things to resolve over DNS. Wow. So what you do is you just you set it up, you just set your DNS server to be you know, 1724, or whatever their DNS server number is. And then it goes, everything goes through there. And if it says, Hey, we're trying to go to double click, you know, like, No, we don't know what double click is, it's not on the internet, I'm sorry. And just there's no more apt. So it blocks a lot of the ads and trackers. And because it's a DNS service, and not like an ad blocker in your browser. It works on whole devices. So you could set it up on say, your router, and then everything, including your television, and the mobile apps and everything on they would all get this blocking, which I think is pretty cool. Pretty interesting.

00:27:25 Yeah, I'm definitely gonna check this out. I'm

00:27:28 not quite ready to set it up on my my router yet. Because every now and then you, you basically are forced to turn off your ad blocker for some small, weird website, or do I want to impose this on my wife? Maybe? Maybe not. Do I want the text afford the bike? So I'm on the fence, but I think it's a neat idea. And I might play with it as well. You could always get it and just set it on your your computer, right? But if you wanted to like every device, I have automatically gets malware and ad tracker blocking to put it on your router.

00:28:03 Yeah, so. So one of the things. Oh, do you have any other extras? Now? That's it. Okay, so one of the things I've been trying to block ads and stuff is I found out about this VPN called Malda mullvad. And even know how to pronounce Yeah. But it's pretty, it's been pretty good. It blocks a whole bunch of stuff. Of course, switching to Vivaldi helps, you can turn you're gonna have ivaldi Block stuff, but mullvad is so. So like, into security, that it doesn't even ask for a password or, or email account or anything. So what you do is when you sign up, it gives you an account number, and you just have to write that down and use that. And to pay for things you can use their they encourage you to use cryptocurrency or something, but you can use cards or whatever. But that potentially could tie you to them, right. So they also allow you to just put money in a, you know, envelope with your account number and just mail it to them. And that's awesome. They'll add money to your account. So anyway, that's pretty neat.

00:29:12 I've been a massive amount of research on VPN, and there's a really a whole bunch of shady ones out there. But mullvad and Nord VPN, those two come out really, really good. And so I've heard of great stuff from all that I use Nord VPN and the reason I'm not using Nex DNS or something like it is I just run Nord VPN and everything and check the block all the ads over that as well. So it's very, very similar. So yeah, this I've I think this is a great solution and basically do the same thing.

00:29:41 I also wanted to remind everybody that the current is a little bit old news, but the current Python 311 is Python 311 zero or C two. Definitely worth people trying out and definitely, if you've got a module that you're it should have been doing this already. Shame on you. But if you've got a package out there and peipsi and people are using it, you should be updating your testing to make sure this testing the latest Python 311. To make sure it continues to work. The last extra I wanted to bring up is I saw this day called Oh my get. And so this ends up being what it is, is it's a little game. And it's a little weird. But I tried it out, download it and try it out. And so you've got most of it's that like this sort of a view. And so you got to like, there's a workspace area in the middle, there's cards at the bottom, and the cards or skills that you get. But in the in on the right, there's a description of what you want to do. And you have to like learn the git commands to do something like rebasing or merging or whatever. And the I started out at the trying out in the very beginning, the basic stuff, and it actually was the introduction was pretty cool. And then, but what I really like is that you can just go to the course the the available, available lessons, you don't have to do it in order, you can jump out of order, and just hop ahead to something else that you're having problems with and sort of have a visual introduction to to get. So it's kind of neat.

00:31:21 That's weird and kind of wonderful.

00:31:25 It is a little weird to Yeah,

00:31:27 but wonderful. Yeah, very cool. All right. One more quick follow up. Wagon race out there says, I know what we don't want ads. But ads are the reason most stuff is free? Or do you want to make a donate? Or do you make donations to sites that you block ads from? I just wanted to comment on that real quick. I understand that there's a lot of services that do need support. I mean, I was listening to an interview with guys from the verge, they have 100 person team at the verge working on stuff. And yet, there is so much like collection and triangulation triangulation of who you are, and what you are, by these ad networks through like data brokers and behind the scenes stuff that is just it is a plague on society. I mean, think about the 2016 election. And the the Facebook stuff was the name of that company. You remember Brian? But don't. But yeah, so they were using all those things to basically, that kind of information collected from those ad networks to target and manipulate people. So it's not just about like, do I not really want to see this ad for a new program programming book where it's, it's not it's the fact that they're using these terrible third party networks to deliver it. So for example, Brian, check this out by Tom bytes.fm. Right, we go here, and we go to our episodes. And let's just pick one here. I gotta zoom it back out a little bit. There we go. This one right here. It has an ad. That's been there's an ad blocker on my VPN on the network. And there's an ad blocker blocker in my browser. And right here we have an ad with no blocking it shows up just fine. Do you know why? Because we're not using an evil. There's third party network. There's no tracking. There's no retargeting. We show you things from people who support us, we say we asked you to please check them out, at least consider it to support our show. And yet there's as much ad blocking here as there is on somewhere like CNN, or you know, you pick your spot. These places have like 3040 different tracking networks on you, triangulating stuff and reselling it and it is a plague on society. And if CNN wanted to show you ads, they could do just what we do. I'm sure they have better relationships with advertisers. No, we do. So. Cambridge Analytica, thank you for letting me know. Yeah. So I'm not against ads. I mean, to a large degree, we are ad supported. I'm against people building behind the scenes information and using it to manipulate society. Bit of a rant Sorry, sorry, right, if I went too far there.

00:34:02 And people, some people just don't realize that that the ads are not just there's a product that we think that you might like, based on the content of this page. That totally makes sense like this. The people that are listening to Python bytes, they might be interested in Python, or Microsoft, for starters, fenders up, something. Magazines used to be like this all the time, right? So you buy a magazine, it's not tracking you that whether or not you looked at something or looked up somebody's website because of a magazine ad. There's it. There's just stuff collected about you that I don't think is necessary. And I think like for instance, read the docs has like the ethical ads that they don't do. Yeah, they don't do tracking. So.

00:34:44 Yeah, exactly. And neither do we, on purpose. Probably if we've had to turn down sponsors, people said, we want to sponsor you, but we need you to install this tracking thing for your mp3 downloads. We do install this Facebook pixel and these other things like you know, we don't want your money Be like, no. We're happy to sell your product because it's relevant. But we're not going to spy on our users. So thanks for no thanks. All right, and wagon is just a quick follow up says thanks for the explanation. I do understand you better. And I'm glad you guys are big enough to direct to have direct sponsors without trackers. So are we thank you. Okay, with all that, let's flip the table and make something close out with a joke. Why do you think brain?

00:35:26 Yeah, I'm ready for something funny.

00:35:28 Alright, so this one comes from somebody's going to go through this online, multiple choice, prove to me, you know, JavaScript test to be hired. Okay. And it says, so I got this wrong, because the person who typed in the question made a mistake. So here, check this out. The it's one of these multi choice question things, it says what is the result of the function call shown below. And it's just super simple JavaScript. It's creating one of these little Lambda expressions here, and it has the equivalent of an F string and interpolated string, as really the essence of it, and it says console dot log, open parenthesis, this is important as you would open for the C quote, Hi, my name is no dollar curly, first name, close off the curly. And then it closes out. console log instead of with a closing parenthesis with a closing curly brace. And so the options are like, Hi, my name is John. I'm logged into the console. Hi, my name is undefined. I'm logged into the console. And this was the machine that was the correct answer is Hi, my name is John Jr. I haven't because that's the name of the variable, the value of variable. I'm logged in the console. And they you answered uncaught syntax errors log the console. Like no wrong, it was supposed to say John Jr. No. Wrong, you typed it in wrong. Wouldn't that be frustrating if you're trying to apply for a job? And they put syntax errors in there? And you're like, Nope, because they may be checking whether or not you're finding that closing curly brace. Right? That's a legitimate test, I guess. But yeah,

00:37:09 it I think it's fine that you don't get to work for them, because they're probably not someplace you want to work for. They've got syntax errors in their onboarding. Exactly. In their application process. But exactly.

00:37:21 Oh, well. Anyway, I thought that was pretty funny. And I'm sure people who have been through the like, there's all these sorts of weird, go home and write this test or take this thing to prove you know, how to write code sort of things I'm sure people have been through so they'll probably get a laugh out of this.

00:37:39 Yeah, that's pretty funny. So we wrap it up. Let's cool. Well, thanks, everybody for coming and watching the show. And also everybody that listens, we love all of you. And thanks, Michael. And indeed,

00:37:53 thank you, everyone. Thank you, Brian. Yeah, see you next week.

