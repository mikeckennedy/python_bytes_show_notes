
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.360
to you by us over at TalkBython Training and Brian through his PyTest book.


00:00:10.360 --> 00:00:15.460
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.460 --> 00:00:17.320
over at TalkBython Training.


00:00:17.320 --> 00:00:21.040
Visit them via pythonbytes.fm/courses.


00:00:21.040 --> 00:00:25.400
And if you're looking to do testing and get better with PyTest, check out Brian's book


00:00:25.400 --> 00:00:28.440
at pythonbytes.fm/pytest.


00:00:28.440 --> 00:00:29.440
Enjoy the episode.


00:00:29.440 --> 00:00:30.680
- Hello and welcome to Python Bytes


00:00:30.680 --> 00:00:32.440
where we deliver Python news and headlines


00:00:32.440 --> 00:00:33.600
directly to your earbuds.


00:00:33.600 --> 00:00:38.600
This is episode 252, recorded September 29th, 2021.


00:00:38.600 --> 00:00:40.240
I'm Michael Kennedy.


00:00:40.240 --> 00:00:41.520
- And I'm Brian Ockett.


00:00:41.520 --> 00:00:42.920
- And I'm Ethan Swan.


00:00:42.920 --> 00:00:45.360
- Ethan, welcome to Python Bytes.


00:00:45.360 --> 00:00:46.760
You've been over on Talk Python


00:00:46.760 --> 00:00:49.480
where you talked about some really cool data science stuff


00:00:49.480 --> 00:00:50.960
and now you're over here.


00:00:50.960 --> 00:00:52.000
So thanks for being here.


00:00:52.000 --> 00:00:53.360
Tell people a bit about yourself.


00:00:53.360 --> 00:00:56.200
- Yeah, I was on Talk Python 236.


00:00:56.200 --> 00:00:57.780
So it was a while ago, but that was really cool.


00:00:57.780 --> 00:00:59.860
I work for a company called 8451.


00:00:59.860 --> 00:01:02.640
It's the data science subsidiary of Kroger.


00:01:02.640 --> 00:01:03.940
And I'm a data scientist,


00:01:03.940 --> 00:01:05.900
but basically what I do is build tools,


00:01:05.900 --> 00:01:08.960
mostly which are in Python for our data science department.


00:01:08.960 --> 00:01:11.420
So we have like 250 data scientists,


00:01:11.420 --> 00:01:12.900
pretty large department.


00:01:12.900 --> 00:01:15.900
And I build like packages and some dashboard sort of things,


00:01:15.900 --> 00:01:18.900
just like various technology helper stuff for data science.


00:01:18.900 --> 00:01:20.100
- Yeah, it sounds really fun.


00:01:20.100 --> 00:01:21.500
And you all run,


00:01:21.500 --> 00:01:23.340
what we were talking about before we hit record,


00:01:23.340 --> 00:01:24.940
one of the, probably one of the larger


00:01:24.940 --> 00:01:27.080
data science groups out there, right?


00:01:27.080 --> 00:01:28.520
I think of data science as being like,


00:01:28.520 --> 00:01:30.280
there's a couple of folks that are embedded


00:01:30.280 --> 00:01:32.400
with like a marketing team or a product team


00:01:32.400 --> 00:01:34.200
or the software development team a lot of times,


00:01:34.200 --> 00:01:38.240
but you are a properly large group of data scientists.


00:01:38.240 --> 00:01:40.520
- I mean, in theory, that's what the whole company does.


00:01:40.520 --> 00:01:42.080
So it's a very cool experience.


00:01:42.080 --> 00:01:45.100
And often I think that's nice for the team I'm on


00:01:45.100 --> 00:01:47.080
because you don't usually get so many customers


00:01:47.080 --> 00:01:48.320
on internal tools.


00:01:48.320 --> 00:01:51.160
We're building stuff for literally hundreds of people to use


00:01:51.160 --> 00:01:53.780
and it's a little bit like releasing software externally.


00:01:53.780 --> 00:01:55.560
So it's, yeah, it's a lot of fun.


00:01:55.560 --> 00:01:56.400
- Yeah. - Interesting.


00:01:56.400 --> 00:01:56.960
Fantastic.


00:01:56.960 --> 00:01:57.240
All right.


00:01:57.240 --> 00:02:01.000
Well, we're definitely looking forward to having your insights here for the show.


00:02:01.000 --> 00:02:03.120
Now, Brian, I do want to start off here.


00:02:03.120 --> 00:02:05.680
Um, I want to talk about some deck staining.


00:02:05.680 --> 00:02:06.440
Thanks.


00:02:06.440 --> 00:02:06.720
Yeah.


00:02:06.720 --> 00:02:12.760
So, because those of us who are very attentive on Twitter saw that Brian


00:02:12.760 --> 00:02:16.600
kindly responded to somebody who sent us a message and said, Oh, I see


00:02:16.600 --> 00:02:17.840
you were talking about pallets.


00:02:17.840 --> 00:02:22.360
We should also talk about deck stain and other DIY project resources.


00:02:22.360 --> 00:02:25.240
And maybe you could put that stupid article on your blog.


00:02:25.240 --> 00:02:26.920
You're like, we're not a blog.


00:02:26.920 --> 00:02:28.760
We talk about palettes because it's on Flask.


00:02:28.760 --> 00:02:33.560
And then in Twitter decided, oh, you are now classified under the home improvement category.


00:02:33.560 --> 00:02:35.080
So are we changing our theme or what?


00:02:35.080 --> 00:02:37.160
>> Apparently just me.


00:02:37.160 --> 00:02:38.240
That's most people.


00:02:38.240 --> 00:02:40.480
I've got a few new followers now.


00:02:40.480 --> 00:02:43.640
And most of them are people that like to make things.


00:02:43.640 --> 00:02:44.480
So.


00:02:44.480 --> 00:02:46.440
>> Well, it's fun to make things as well.


00:02:46.440 --> 00:02:49.320
But maybe we'll talk more about SQL and stuff like that.


00:02:49.320 --> 00:02:50.120
What do you think?


00:02:50.120 --> 00:02:50.440
>> Yeah.


00:02:50.440 --> 00:02:54.040
So this was sent to us by Dave Cochessa.


00:02:54.040 --> 00:02:54.760
Thanks, Dave.


00:02:54.760 --> 00:02:57.840
I want to talk about SQL Fluff.


00:02:57.840 --> 00:02:59.720
I had never heard of this,


00:02:59.720 --> 00:03:01.240
but it looks pretty cool.


00:03:01.240 --> 00:03:05.440
SQL Fluff is a Python package


00:03:05.440 --> 00:03:09.120
that is basically a linter for SQL.


00:03:09.120 --> 00:03:11.240
>> How interesting. I haven't really thought about


00:03:11.240 --> 00:03:14.160
linting SQL code, but it makes perfect sense.


00:03:14.160 --> 00:03:19.660
>> Yeah. I don't really think about it too much either,


00:03:19.660 --> 00:03:21.900
but there's things like should you capitalize


00:03:21.900 --> 00:03:24.520
all the keywords and some people just like it like that.


00:03:24.520 --> 00:03:29.440
There's both style guides around SQL,


00:03:29.440 --> 00:03:31.320
I assume there's style guides,


00:03:31.320 --> 00:03:34.440
and this helps you enforce it.


00:03:34.440 --> 00:03:35.760
Not just style guides,


00:03:35.760 --> 00:03:39.120
but just looking for mistakes and things.


00:03:39.120 --> 00:03:42.000
The page looks really slick.


00:03:42.000 --> 00:03:44.880
I like the logo, the fluff logo.


00:03:44.880 --> 00:03:48.240
One of the things that's great about it is the documentation.


00:03:48.240 --> 00:03:50.880
The documentation looks wonderful.


00:03:51.360 --> 00:03:56.700
One of the neat things about this is there's different rules or


00:03:56.700 --> 00:03:59.140
different dialects set up so that it


00:03:59.140 --> 00:04:03.940
treats different things like ANSI and Postgres and MySQL different.


00:04:03.940 --> 00:04:11.920
I'm not sure if these are style differences or what they're doing different,


00:04:11.920 --> 00:04:16.200
but it's interesting that there is a difference there.


00:04:16.200 --> 00:04:18.460
>> Well, one of the things that comes to mind for me,


00:04:18.460 --> 00:04:19.620
if this reports errors,


00:04:19.620 --> 00:04:21.180
and I suspect it probably does,


00:04:21.180 --> 00:04:29.460
One of the things that comes to mind for me is if using like Microsoft SQL Server and you're using a parameterized query because you don't want little Bobby tables in your school.


00:04:29.460 --> 00:04:31.860
You would say at parameter name.


00:04:31.860 --> 00:04:38.940
Whereas in with like MySQL or Oracle it'd be like a question mark right and I think one is illegal in the other syntax.


00:04:38.940 --> 00:04:43.140
So at least in that regard I think I don't know for sure it's illegal but I'm pretty sure like


00:04:43.140 --> 00:04:45.780
it may be and it could be that you've got to say


00:04:45.780 --> 00:04:49.580
what type of parameterized specifications and other extensions are valid.


00:04:49.580 --> 00:04:51.760
>> I think there's some keywords.


00:04:51.760 --> 00:04:54.000
Are there some different keywords in some cases?


00:04:54.000 --> 00:04:56.320
It would make sense to have to know the dialect.


00:04:56.320 --> 00:04:58.560
>> Yeah. Also, like you were saying,


00:04:58.560 --> 00:05:02.280
if there really are big differences or even minor differences,


00:05:02.280 --> 00:05:05.340
there might be some queries that you don't run all the time,


00:05:05.340 --> 00:05:08.160
and so you're not sure if you switch databases,


00:05:08.160 --> 00:05:10.440
that they might be broken if you're trying to port.


00:05:10.440 --> 00:05:14.880
Kind of cool. It has rules like a lot of linters,


00:05:14.880 --> 00:05:17.240
rules for failure, and I like the rules page


00:05:17.240 --> 00:05:19.240
because it talks about the rules,


00:05:19.240 --> 00:05:23.420
but also shows you the anti-pattern and best practice.


00:05:23.420 --> 00:05:24.800
I like that style.


00:05:24.800 --> 00:05:28.140
I don't know if I like the terms anti-pattern,


00:05:28.140 --> 00:05:30.220
and I really don't like the term best practice.


00:05:30.220 --> 00:05:34.820
But nonetheless, what it's looking for and what you should do


00:05:34.820 --> 00:05:38.780
different is a good thing to have in the documentation. It's pretty cool.


00:05:38.780 --> 00:05:41.120
>> I do like the anti-pattern aspect.


00:05:41.120 --> 00:05:43.300
Maybe pattern? You can have an anti-pattern,


00:05:43.300 --> 00:05:44.260
you should have the pattern. I don't know.


00:05:44.260 --> 00:05:47.540
>> I'm not sure. One of the things that's in the documentation,


00:05:47.540 --> 00:05:51.180
I can't remember where there is that people should be aware of.


00:05:51.180 --> 00:05:55.380
Supposedly, this even though it has 1982,


00:05:55.380 --> 00:06:00.700
that's interesting stars, it's still in alpha phase.


00:06:00.700 --> 00:06:04.980
There's a note here that says expect significant changes.


00:06:04.980 --> 00:06:06.260
Just be aware of that.


00:06:06.260 --> 00:06:08.380
>> Cool. It doesn't seem major because you're


00:06:08.380 --> 00:06:10.700
not doing a runtime behavior on it.


00:06:10.700 --> 00:06:12.140
It's a thing you run against your code


00:06:12.140 --> 00:06:13.580
and then you look at the output.


00:06:13.580 --> 00:06:16.260
>> I mean, maybe it's in your CI system or something.


00:06:16.260 --> 00:06:19.460
Yeah, but it's not in production, right?


00:06:19.460 --> 00:06:22.960
So like you want, you won't get called on a weekend


00:06:22.960 --> 00:06:24.920
because the site went down


00:06:24.920 --> 00:06:28.560
because this thing got automatically updated or something to that effect.


00:06:28.560 --> 00:06:32.160
I guess it could have broken your queries, but you know, whatever.


00:06:32.160 --> 00:06:37.960
And it's good to have an audience because we did have Paul from the chat


00:06:37.960 --> 00:06:39.160
say Ethan's correct.


00:06:39.160 --> 00:06:41.960
There are different keywords between different SQL dialects.


00:06:41.960 --> 00:06:44.260
Yeah, we use a, oh, sorry, Michael.


00:06:44.260 --> 00:06:44.860
No, go ahead.


00:06:44.860 --> 00:06:48.860
Great. We use a lot of SQL as I would assume most data science shops do.


00:06:48.860 --> 00:06:53.600
But one what this made me think of was one contentious topic


00:06:53.600 --> 00:06:56.400
in people who write a lot of SQL, especially when you have a bunch of column names


00:06:56.400 --> 00:07:00.220
and you're selecting regularly, you know, five to ten columns.


00:07:00.220 --> 00:07:01.820
The comma first.


00:07:01.820 --> 00:07:05.620
I don't know if you've seen the approach where you do a new line, comma, column,


00:07:05.620 --> 00:07:06.420
comma, column.


00:07:06.420 --> 00:07:09.320
So it lines up really nicely and it makes it easier to delete things.


00:07:09.320 --> 00:07:13.400
That's a very common thing that people feel strongly about.


00:07:13.400 --> 00:07:19.080
So I could imagine linter is being very handy to at least enforce one style throughout the company because you know, we don't have that


00:07:19.080 --> 00:07:20.760
Yeah, nice


00:07:20.760 --> 00:07:23.080
and then I was going to add that pantheroy on the


00:07:23.080 --> 00:07:28.200
Audience says it would be uh cool if there was a plugin for d beaver and sam morley


00:07:28.200 --> 00:07:31.400
Asks, I wonder if it checks if inputs are sanitized


00:07:31.400 --> 00:07:38.120
I don't know if it should but paul also asks if it validates for syntactical correctness beyond just style


00:07:38.120 --> 00:07:42.840
He does say that it catches errors in bad sql before it hits your database. So i'm going to go with yes


00:07:43.240 --> 00:07:44.140
That's pretty cool.


00:07:44.140 --> 00:07:44.740
Yeah.


00:07:44.740 --> 00:07:47.240
Ethan, I was thinking as I was watching Brian present this,


00:07:47.240 --> 00:07:50.740
that you probably do way more SQL than I do,


00:07:50.740 --> 00:07:55.540
even though I run and production websites that are backed by databases,


00:07:55.540 --> 00:07:56.640
not just because there's no SQL,


00:07:56.640 --> 00:08:00.240
but because I use ORMs and the data structure doesn't change.


00:08:00.240 --> 00:08:02.440
But for data science,


00:08:02.440 --> 00:08:04.540
you're kind of in a more exploratory mode, right?


00:08:04.540 --> 00:08:07.340
Yeah, I think it's pretty interesting because,


00:08:07.340 --> 00:08:08.840
you know, like listening to this podcast,


00:08:08.840 --> 00:08:10.440
people talk about using ORMs a lot,


00:08:10.440 --> 00:08:15.120
But in data science, you don't really think of data in that relational model as much.


00:08:15.120 --> 00:08:20.000
I mean, you can, but like thinking of as of rows as objects is really not common.


00:08:20.000 --> 00:08:22.760
So I feel like my relationship with databases is totally different.


00:08:22.760 --> 00:08:27.640
My first couple years, I was mostly writing SQL, but it was it was literally just asking


00:08:27.640 --> 00:08:31.360
questions for analyses, which is such a different use case than what people use it for for web


00:08:31.360 --> 00:08:32.360
development.


00:08:32.360 --> 00:08:33.360
Right?


00:08:33.360 --> 00:08:34.360
Yeah, absolutely.


00:08:34.360 --> 00:08:35.400
It's super different, super different.


00:08:35.400 --> 00:08:41.040
But if you were to explore data, wouldn't it be nice to have a desktop application instead


00:08:41.040 --> 00:08:43.360
of a web browser for doing so?


00:08:43.360 --> 00:08:47.520
So Jupyter, JupyterLab have got to be the most popular way that people interact with


00:08:47.520 --> 00:08:49.000
data on the data science side.


00:08:49.000 --> 00:08:51.320
It's certainly an exploration stage anyway.


00:08:51.320 --> 00:08:55.800
So super big news that is old news is new again, but better.


00:08:55.800 --> 00:08:58.360
JupyterLab desktop app is a thing.


00:08:58.360 --> 00:09:00.320
Like I can download JupyterLab.


00:09:00.320 --> 00:09:03.920
It's an icon on my dock or on my taskbar.


00:09:03.920 --> 00:09:06.560
I click it, it runs like an app,


00:09:06.560 --> 00:09:08.000
but inside of it is Jupyter Notebook,


00:09:08.000 --> 00:09:10.500
like the whole JupyterLab with terminal


00:09:10.500 --> 00:09:13.800
and Python consoles and kernels and all those things.


00:09:13.800 --> 00:09:14.640
- That's cool.


00:09:14.640 --> 00:09:15.720
- That's very nice.


00:09:15.720 --> 00:09:17.960
- Yeah, have you played with this yet, Ethan?


00:09:17.960 --> 00:09:21.000
- No, so I don't know how common this is,


00:09:21.000 --> 00:09:22.960
but I think for us at least,


00:09:22.960 --> 00:09:25.040
mostly people aren't working on their local machines.


00:09:25.040 --> 00:09:28.400
They're really connecting to a session of Python


00:09:28.400 --> 00:09:29.480
on a remote server.


00:09:29.480 --> 00:09:31.640
So mostly what we do is we fire up Jupyter


00:09:31.640 --> 00:09:34.240
on a remote server and then from our laptops,


00:09:34.240 --> 00:09:36.720
we hit that URL to actually look at the notebook.


00:09:36.720 --> 00:09:39.440
So I'm not sure a desktop app would work as well for us,


00:09:39.440 --> 00:09:41.160
although maybe, it's definitely interesting.


00:09:41.160 --> 00:09:43.680
And I wonder if there's some native features


00:09:43.680 --> 00:09:45.320
of desktop apps that are available


00:09:45.320 --> 00:09:47.220
that are gonna be a reason to switch.


00:09:47.220 --> 00:09:48.520
- Well, what I would say right now


00:09:48.520 --> 00:09:52.640
is it's a really nice self-contained thing.


00:09:52.640 --> 00:09:54.960
So I'll just read the description real quick.


00:09:54.960 --> 00:09:57.600
JupyterLab app is a cross-platform,


00:09:57.600 --> 00:10:00.680
standalone application distribution of JupyterLab.


00:10:00.680 --> 00:10:02.640
is a self-contained desktop application


00:10:02.640 --> 00:10:05.180
which bundles the Python environment


00:10:05.180 --> 00:10:07.580
and several popular libraries to use


00:10:07.580 --> 00:10:10.520
in scientific computing like surely pandas and NumPy


00:10:10.520 --> 00:10:11.760
and those kinds of things.


00:10:11.760 --> 00:10:13.480
So what you get is you get just an app


00:10:13.480 --> 00:10:16.920
that's ready to go that you could just have somebody install


00:10:16.920 --> 00:10:19.040
and you can say here, open this notebook and run it.


00:10:19.040 --> 00:10:21.600
And long as you're using core libraries and stuff like that,


00:10:21.600 --> 00:10:24.520
you don't have to think, okay, go to the terminal,


00:10:24.520 --> 00:10:28.600
you know, set up the environment and then type JupyterLab.


00:10:28.600 --> 00:10:31.760
you need to activate the kernel and you got to do this and that.


00:10:31.760 --> 00:10:33.960
It's just like it's a real simple,


00:10:33.960 --> 00:10:37.160
here's the thing, no nonsense type of app.


00:10:37.160 --> 00:10:40.680
>> Yes, and you lost a whole bunch of people with just open the command line.


00:10:40.680 --> 00:10:42.160
>> Yeah, that's so true.


00:10:42.160 --> 00:10:43.600
>> Yeah. So you don't have to hear it.


00:10:43.600 --> 00:10:46.280
It's on your dock, you click it just like you would with


00:10:46.280 --> 00:10:49.640
Word or Firefox or whatever and you're there.


00:10:49.640 --> 00:10:53.160
It starts and manages the Jupyter server in the background.


00:10:53.160 --> 00:10:58.520
There may be a whole host of command line arguments you can give it to say,


00:10:58.520 --> 00:11:03.160
like run, but use that server and other things along those lines or run and use


00:11:03.160 --> 00:11:04.640
this conda environment.


00:11:04.640 --> 00:11:06.080
I didn't see any of those.


00:11:06.080 --> 00:11:11.040
And so from what I can tell is it's kind of a local version of Jupiter.


00:11:11.040 --> 00:11:14.120
So it might be super interesting for you all in your workflow.


00:11:14.120 --> 00:11:18.280
One place where I think this would be really handy is, teaching beginners.


00:11:18.280 --> 00:11:22.280
So I actually teach some Python, especially for data science classes


00:11:22.280 --> 00:11:23.480
at the university of Cincinnati.


00:11:23.480 --> 00:11:26.720
And one thing that regularly is really confusing to people is that you can't


00:11:26.720 --> 00:11:28.840
double-click on a notebook file and have it open?


00:11:28.840 --> 00:11:31.480
Because that's such a typical experience of files on a computer.


00:11:31.480 --> 00:11:34.560
You double-click and there's an application that opens that file.


00:11:34.560 --> 00:11:35.760
>> Interesting.


00:11:35.760 --> 00:11:37.280
>> There are workarounds.


00:11:37.280 --> 00:11:38.680
If you have Anaconda Navigator,


00:11:38.680 --> 00:11:42.100
it works, although it's a little hitchy.


00:11:42.100 --> 00:11:44.920
But I would assume that if you have a desktop app,


00:11:44.920 --> 00:11:46.880
you'd be able to register that with the operating system,


00:11:46.880 --> 00:11:48.440
whatever that process is to say,


00:11:48.440 --> 00:11:51.800
like when I click on.ipynb, open it.


00:11:51.800 --> 00:11:53.800
Because I find I have to teach students,


00:11:53.800 --> 00:11:55.480
no, start up Jupyter,


00:11:55.480 --> 00:11:58.680
Open your browser, navigate to that file in the browser.


00:11:58.680 --> 00:12:00.720
- Were you in the wrong folder in the terminal


00:12:00.720 --> 00:12:01.880
when you ran JupyterLab?


00:12:01.880 --> 00:12:04.240
Well, sorry, you're now locked out of that tree,


00:12:04.240 --> 00:12:06.040
that part of the tree of the folders.


00:12:06.040 --> 00:12:08.280
- And then suddenly you're having a conversation about paths.


00:12:08.280 --> 00:12:09.280
Yeah, you go down.


00:12:09.280 --> 00:12:11.500
It really is like something I don't like to deal with.


00:12:11.500 --> 00:12:13.840
So maybe this is what I should recommend for people


00:12:13.840 --> 00:12:14.680
when I teach.


00:12:14.680 --> 00:12:17.000
- What I would recommend is just check it out and try.


00:12:17.000 --> 00:12:20.120
So I do have a bit of a comment here from Dean


00:12:20.120 --> 00:12:21.120
out in the audience.


00:12:21.120 --> 00:12:23.160
I like the concept of JupyterLab app,


00:12:23.160 --> 00:12:25.560
but I'm afraid it will be a VENV,


00:12:25.560 --> 00:12:27.040
virtual environment nightmare.


00:12:27.040 --> 00:12:31.480
So what I found interesting is it's discovered,


00:12:31.480 --> 00:12:35.120
you know, when you're creating kernels for Jupyter,


00:12:35.120 --> 00:12:37.600
you have to run a command, I always forget it,


00:12:37.600 --> 00:12:40.680
and always have to duck, duck, go or search this


00:12:40.680 --> 00:12:42.040
to figure out how to do it again.


00:12:42.040 --> 00:12:44.240
But I have to get the command to say,


00:12:44.240 --> 00:12:46.920
create this environment and then register that


00:12:46.920 --> 00:12:50.120
as so Jupyter finds that content environment,


00:12:50.120 --> 00:12:51.960
that VENV, right?


00:12:51.960 --> 00:12:53.780
It's ipykernel install.


00:12:53.780 --> 00:12:55.160
I have to do this all the time.


00:12:55.160 --> 00:12:56.100
- Yes, exactly.


00:12:56.100 --> 00:12:57.900
And I know that it's basically that,


00:12:57.900 --> 00:12:59.780
but the exact command, I always forget.


00:12:59.780 --> 00:13:03.180
So that command, it seems like it picked up the ones


00:13:03.180 --> 00:13:07.820
that I had run previously for standalone terminal JupyterLab.


00:13:07.820 --> 00:13:10.980
So the virtual environment story


00:13:10.980 --> 00:13:13.340
is the same as Jupyter itself without that.


00:13:13.340 --> 00:13:14.820
I think all we're getting here


00:13:14.820 --> 00:13:17.820
is we're getting the libraries plus Python,


00:13:17.820 --> 00:13:20.900
plus the server starting all bundled together.


00:13:20.900 --> 00:13:23.420
And it's basically the same as if you just run it


00:13:23.420 --> 00:13:24.580
on the command prompt.


00:13:24.580 --> 00:13:26.620
- I think as long as, was it Dean?


00:13:26.620 --> 00:13:29.540
As long as Dean doesn't wanna be starting Jupyter


00:13:29.540 --> 00:13:31.420
from the virtual environment, it should be fine.


00:13:31.420 --> 00:13:32.980
Like when you said, Michael, about the kernels,


00:13:32.980 --> 00:13:35.180
that's the much more, I recommend people do it that way.


00:13:35.180 --> 00:13:37.420
'Cause some people do like to just install Jupyter


00:13:37.420 --> 00:13:40.060
in whatever environment they work in and launch it there.


00:13:40.060 --> 00:13:41.700
But I have a hard time imagining


00:13:41.700 --> 00:13:43.080
how that would work in this case.


00:13:43.080 --> 00:13:44.360
- Yeah, I do as well.


00:13:44.360 --> 00:13:46.700
And Dean makes the point that once you have to go


00:13:46.700 --> 00:13:49.060
and register all that kind of stuff,


00:13:49.060 --> 00:13:50.580
like when you're down in the terminal doing this,


00:13:50.580 --> 00:13:51.900
you've kind of lost those same people


00:13:51.900 --> 00:13:53.660
and that may well be the case.


00:13:53.660 --> 00:13:55.860
But I can see, you know, this is sort of a


00:13:55.860 --> 00:13:57.620
first version of this.


00:13:57.620 --> 00:13:59.540
I can see that those are some of the desktop things


00:13:59.540 --> 00:14:00.740
it could add, right?


00:14:00.740 --> 00:14:03.700
It could add a setting section where you have a dialogue


00:14:03.700 --> 00:14:06.640
for managing these things and creating new ones and so on.


00:14:06.640 --> 00:14:08.100
So, could be pretty neat.


00:14:08.100 --> 00:14:09.460
- Yeah. - Definitely something to watch.


00:14:09.460 --> 00:14:10.700
- All right, before we move on,


00:14:10.700 --> 00:14:13.900
Paul out in the audience has a quick question for you,


00:14:13.900 --> 00:14:15.840
Ethan, a tangential one.


00:14:15.840 --> 00:14:20.300
Python has some really great SAST tools, like Bandit,


00:14:20.300 --> 00:14:22.780
but I'm not able to find good options for R.


00:14:22.780 --> 00:14:24.260
And I know that you live in a world


00:14:24.260 --> 00:14:26.580
that does both R and Python.


00:14:26.580 --> 00:14:27.420
- Yeah.


00:14:27.420 --> 00:14:28.240
- Do you have any thoughts on this?


00:14:28.240 --> 00:14:29.080
I have no ideas.


00:14:29.080 --> 00:14:30.700
- I'm gonna come off as a fraud,


00:14:30.700 --> 00:14:33.060
but I don't know what SAST is.


00:14:33.060 --> 00:14:37.420
I have to admit, like what I do,


00:14:37.420 --> 00:14:39.220
I know I said I'm a data scientist,


00:14:39.220 --> 00:14:40.860
but in some ways that's nominal.


00:14:40.860 --> 00:14:42.860
Like really a lot of what I do is software development


00:14:42.860 --> 00:14:44.460
for the data scientists.


00:14:44.460 --> 00:14:46.660
- Data scientists are your customer in a sense,


00:14:46.660 --> 00:14:48.380
or your target user, yeah.


00:14:48.380 --> 00:14:51.100
- Yeah, so I think a lot of what I hear from users


00:14:51.100 --> 00:14:52.940
is that there are certain measurement tools


00:14:52.940 --> 00:14:55.180
and certain statistical tools that are available in R


00:14:55.180 --> 00:14:56.860
that take longer to get to Python.


00:14:56.860 --> 00:14:57.820
So I wouldn't be surprised


00:14:57.820 --> 00:14:59.140
if that really is what's happening here,


00:14:59.140 --> 00:15:01.380
but I don't personally have any suggestions.


00:15:01.380 --> 00:15:02.260
- Yeah, okay.


00:15:02.260 --> 00:15:05.340
Yeah, so Bandit is like a tool


00:15:05.340 --> 00:15:07.980
that will scan for known security vulnerabilities,


00:15:07.980 --> 00:15:10.260
like leaving debug settings on in Django.


00:15:10.260 --> 00:15:12.420
- Oh, see, I was wondering if that was, okay.


00:15:12.420 --> 00:15:13.860
Then that, I also don't know.


00:15:13.860 --> 00:15:16.860
That's a little different than what I was imagining.


00:15:16.860 --> 00:15:18.340
- Yeah, awesome.


00:15:18.340 --> 00:15:20.980
All right, well, since you got the floor,


00:15:20.980 --> 00:15:22.260
tell us about your first item.


00:15:22.260 --> 00:15:27.260
- Sure, so I found this requests cache package


00:15:27.260 --> 00:15:29.180
in a newsletter recently.


00:15:29.180 --> 00:15:30.740
And this might be a little bit of a shorter one


00:15:30.740 --> 00:15:33.500
'cause unfortunately I haven't had a reason to use it yet.


00:15:33.500 --> 00:15:36.660
But basically what this does, scrolling down here,


00:15:36.660 --> 00:15:39.860
is you can instantiate sessions just like you would


00:15:39.860 --> 00:15:41.820
with the traditional requests library.


00:15:41.820 --> 00:15:45.820
So probably request is one of the most commonly used


00:15:45.820 --> 00:15:47.260
Python packages, I would guess.


00:15:47.260 --> 00:15:48.620
For anybody who's not familiar,


00:15:48.620 --> 00:15:50.580
you use it to make HTTP requests,


00:15:50.580 --> 00:15:52.540
which is basically to bring anything back.


00:15:52.540 --> 00:15:55.460
The tagline, I think, is HTTP for humans.


00:15:55.460 --> 00:15:57.060
But it's just known for being easy to


00:15:57.060 --> 00:15:58.980
use and you can access the Internet.


00:15:58.980 --> 00:16:01.260
But one thing that I have found is that,


00:16:01.260 --> 00:16:04.800
especially if I'm testing something in an interactive way,


00:16:04.800 --> 00:16:06.240
not mocking, but I really want to


00:16:06.240 --> 00:16:08.620
see if my code pulls back what I expect.


00:16:08.620 --> 00:16:11.340
Sometimes I rerun the same request over and over,


00:16:11.340 --> 00:16:12.580
and I say, "Go get this,


00:16:12.580 --> 00:16:13.740
go get this, go get this."


00:16:13.740 --> 00:16:15.220
Often the same data,


00:16:15.220 --> 00:16:17.020
and sometimes that data is large.


00:16:17.020 --> 00:16:18.620
And that takes a really long time.


00:16:18.620 --> 00:16:23.020
So requests cache is a way of creating a session object that looks and acts the same.


00:16:23.020 --> 00:16:29.120
But when you call a GET or a POST request on the same URL,


00:16:29.120 --> 00:16:34.020
with the same data, what you get back is actually just the cached version of that data.


00:16:34.020 --> 00:16:36.020
So you're not waiting every time.


00:16:36.020 --> 00:16:38.220
The first time you incur the network latency,


00:16:38.220 --> 00:16:41.720
and if the server has to do anything to compute the data,


00:16:41.720 --> 00:16:45.020
or if it's enough data that it takes some time to get to you, you wait for that.


00:16:45.020 --> 00:16:46.980
but the second time everything runs instantly,


00:16:46.980 --> 00:16:48.540
which is really a big advantage.


00:16:48.540 --> 00:16:53.060
I've done some things with web scraping where I'm building some kind of,


00:16:53.060 --> 00:16:55.140
I want to build a function that pulls some things down


00:16:55.140 --> 00:16:57.860
and makes or pull some things out of that.


00:16:57.860 --> 00:17:00.620
But just waiting every time to run the function for it to pull from


00:17:00.620 --> 00:17:04.360
several different pages and do some computation on that,


00:17:04.360 --> 00:17:05.620
actually makes it pretty slow.


00:17:05.620 --> 00:17:08.180
But if you were able to cache it like this, that'd be a lot faster.


00:17:08.180 --> 00:17:10.340
>> Yeah, this is nice. I love the fact that it's just


00:17:10.340 --> 00:17:13.660
a stand-in replacement for the request session itself.


00:17:13.660 --> 00:17:15.860
>> Yeah. If you scroll down a little more,


00:17:15.860 --> 00:17:17.560
it actually shows a way to do that


00:17:17.560 --> 00:17:19.360
with the regular requests library.


00:17:19.360 --> 00:17:20.880
This actually scares me a little bit.


00:17:20.880 --> 00:17:23.480
This is magical. What's going on here?


00:17:23.480 --> 00:17:25.960
You just run a one-liner with requests cache,


00:17:25.960 --> 00:17:28.920
and then suddenly the requests library itself works differently.


00:17:28.920 --> 00:17:31.440
I wonder if that's a monkey patching or what's going on there.


00:17:31.440 --> 00:17:32.480
>> It probably is.


00:17:32.480 --> 00:17:34.720
>> But it is really slick.


00:17:34.720 --> 00:17:37.580
I would imagine I'll have a reason to use this soon,


00:17:37.580 --> 00:17:39.000
but I haven't tested that yet.


00:17:39.000 --> 00:17:41.120
It does offer a lot of configuration options.


00:17:41.120 --> 00:17:46.560
One thing I thought was a good idea to look at is an expiration date.


00:17:46.560 --> 00:17:50.600
That's like when should you invalidate the cache and actually pull again,


00:17:50.600 --> 00:17:52.080
because you maybe should trust that the website


00:17:52.080 --> 00:17:53.540
is sending you all the same stuff today.


00:17:53.540 --> 00:17:55.160
But if you rerun your code in a week,


00:17:55.160 --> 00:17:57.380
make sure that it still responds the same way.


00:17:57.380 --> 00:17:59.000
It's got some nice options like that.


00:17:59.000 --> 00:17:59.520
>> I really like this.


00:17:59.520 --> 00:18:02.480
>> That's interesting. You could use it not even just for testing,


00:18:02.480 --> 00:18:04.800
it could be for actual data,


00:18:04.800 --> 00:18:07.600
but you know it's not getting updated very often.


00:18:07.600 --> 00:18:10.480
>> Yeah, for large data is what I was imagining.


00:18:10.480 --> 00:18:14.040
Yeah, like I said, there's been some times where I've pulled things from APIs where they


00:18:14.040 --> 00:18:17.560
send back a lot of data and you don't want to be waiting for that.


00:18:17.560 --> 00:18:21.920
Or even you just want to make sure that multiple calls to it are getting the same data, even


00:18:21.920 --> 00:18:22.920
if it does change.


00:18:22.920 --> 00:18:23.920
That's true.


00:18:23.920 --> 00:18:24.920
Yeah.


00:18:24.920 --> 00:18:25.920
So keep consistency.


00:18:25.920 --> 00:18:26.920
Interesting.


00:18:26.920 --> 00:18:31.440
This reminded me a little bit of the, I don't know if people are familiar with the @cache


00:18:31.440 --> 00:18:32.440
or LRU cache.


00:18:32.440 --> 00:18:37.440
It used to be another new one just called @cache in the FuncTools module built in Python.


00:18:37.440 --> 00:18:40.360
that's very, very handy once you know it's there.


00:18:40.360 --> 00:18:41.480
'Cause often you have a function


00:18:41.480 --> 00:18:43.360
that you don't wanna recompute the work for.


00:18:43.360 --> 00:18:45.480
And this is almost like somebody rewrote requests


00:18:45.480 --> 00:18:47.280
with cache in it, which is pretty cool.


00:18:47.280 --> 00:18:49.280
- Yeah, it's got a lot of nice features.


00:18:49.280 --> 00:18:52.080
You know, I think a question from a handful out


00:18:52.080 --> 00:18:54.120
in the audience, can it cache to Redis?


00:18:54.120 --> 00:18:57.800
Because production in memory production caching,


00:18:57.800 --> 00:18:59.080
you could blow it up, right?


00:18:59.080 --> 00:18:59.960
Blow up the memory.


00:18:59.960 --> 00:19:01.800
So a couple of things that stood out to me


00:19:01.800 --> 00:19:03.480
that were interesting there was,


00:19:03.480 --> 00:19:07.320
yeah, you could throw a Functools LRU cache decorator


00:19:07.320 --> 00:19:10.120
onto an expensive thing, which is fine,


00:19:10.120 --> 00:19:11.520
but that's in memory, right?


00:19:11.520 --> 00:19:13.520
And plus things have to be hashable and whatnot,


00:19:13.520 --> 00:19:16.420
but you could do that, but it's in memory.


00:19:16.420 --> 00:19:18.720
And a lot of times if you have scale out


00:19:18.720 --> 00:19:20.640
as you do on web apps, like in production,


00:19:20.640 --> 00:19:23.480
as in Brian was talking about,


00:19:23.480 --> 00:19:27.000
you have web farms, like five or 10 copies


00:19:27.000 --> 00:19:28.960
of Microwizky or something running.


00:19:28.960 --> 00:19:30.960
So then there's still five times you got to do it


00:19:30.960 --> 00:19:32.440
before it really gets cached.


00:19:32.440 --> 00:19:35.640
And then also it goes to SQLite.


00:19:35.640 --> 00:19:37.900
So it gets stored to disk, right?


00:19:37.900 --> 00:19:39.880
So it's not even in memory, it's on disk.


00:19:39.880 --> 00:19:42.000
So like you said, there's other backends as well,


00:19:42.000 --> 00:19:44.220
but I think having just by default,


00:19:44.220 --> 00:19:47.340
going to a SQLite file with an possible expiration


00:19:47.340 --> 00:19:49.080
means you could just turn this on and leave it.


00:19:49.080 --> 00:19:50.900
Expire after a day, go.


00:19:50.900 --> 00:19:51.740
Tell us about the backends.


00:19:51.740 --> 00:19:53.340
There's more than just SQLite.


00:19:53.340 --> 00:19:54.920
- Yeah, it does seem like you have some options.


00:19:54.920 --> 00:19:57.300
I mean, like I said, I haven't had a reason to use this,


00:19:57.300 --> 00:19:58.540
so I haven't toyed around with all these,


00:19:58.540 --> 00:20:01.540
but the way this is documented leads me to believe


00:20:01.540 --> 00:20:03.640
that it really is just a drop-in replacement


00:20:03.640 --> 00:20:05.880
that you can configure what you want to use as your backend.


00:20:05.880 --> 00:20:08.040
And I do wonder, so yeah, what you were saying, Michael,


00:20:08.040 --> 00:20:09.240
about having multiple instances,


00:20:09.240 --> 00:20:10.600
I do wonder how that would work.


00:20:10.600 --> 00:20:12.800
Would it check to see if any of the instances


00:20:12.800 --> 00:20:14.400
had cached this yet?


00:20:14.400 --> 00:20:16.520
Would it like proactively go reach out to the cache?


00:20:16.520 --> 00:20:17.360
Or would it assume--


00:20:17.360 --> 00:20:18.920
- Yeah, well, I think if you have the memory one,


00:20:18.920 --> 00:20:19.980
it's gonna be a hassle, right?


00:20:19.980 --> 00:20:22.200
Like one of the options is memory,


00:20:22.200 --> 00:20:23.920
but all the other ones, file system,


00:20:23.920 --> 00:20:27.720
GridFS, Redis, SQLite, those are all support,


00:20:27.720 --> 00:20:29.080
you know, concurrency, they support.


00:20:29.080 --> 00:20:30.000
- Yeah, exactly.


00:20:30.000 --> 00:20:33.200
- So then it will scale across process seamlessly.


00:20:33.200 --> 00:20:35.680
Yeah, so that could be actually really helpful


00:20:35.680 --> 00:20:36.560
for something like that,


00:20:36.560 --> 00:20:38.920
where you have a distributed set of workers, yeah.


00:20:38.920 --> 00:20:39.760
- Yeah, for sure.


00:20:39.760 --> 00:20:43.840
Let's see some fun stuff about your monkey patching comment.


00:20:43.840 --> 00:20:45.840
Dean says, "Monkey patching is like having a real monkey.


00:20:45.840 --> 00:20:47.680
"It's very cool when other people have it,


00:20:47.680 --> 00:20:49.800
"but having it in my house is scary."


00:20:49.800 --> 00:20:53.640
And yeah, Sam just has too much experience at the zoo,


00:20:53.640 --> 00:20:55.320
I think, with that as well.


00:20:55.320 --> 00:20:58.320
So yeah, monkey patching's a little sketch.


00:20:58.320 --> 00:20:59.960
- Nice.


00:20:59.960 --> 00:21:01.680
- All right, Brian, you're up next.


00:21:01.680 --> 00:21:09.260
>> What do we got next? I did something dumb the other day.


00:21:09.260 --> 00:21:15.840
I went ahead and I pushed a new package out on PyPI.


00:21:15.840 --> 00:21:20.720
Really, I was just trying to remember the whole process


00:21:20.720 --> 00:21:24.500
because I wanted to just remind myself of if I have something new,


00:21:24.500 --> 00:21:26.140
something cool I wanted to share,


00:21:26.140 --> 00:21:28.240
how do I get it out there to PyPI?


00:21:28.240 --> 00:21:31.520
I was walking through that process and I was doing it for a plugin.


00:21:31.520 --> 00:21:33.200
- Your own typo squatting.


00:21:33.200 --> 00:21:34.440
- Apparently.


00:21:34.440 --> 00:21:38.800
So I published PyTest Slow,


00:21:38.800 --> 00:21:43.000
and then, who was it, Brian Skin said,


00:21:43.000 --> 00:21:46.480
"Cool, but maybe PyTest Skip Slow would be better."


00:21:46.480 --> 00:21:48.680
And I'm like, oh man, that is a better name.


00:21:48.680 --> 00:21:50.400
'Cause that's what it does.


00:21:50.400 --> 00:21:52.280
It skips the slow tests by default.


00:21:52.280 --> 00:21:54.480
So, and this is totally lifted


00:21:54.480 --> 00:21:57.240
from the PyTest documentation about,


00:21:57.240 --> 00:21:59.760
they have this example, but nobody's written a plugin for it.


00:21:59.760 --> 00:22:02.180
I did this, it's a little tiny thing.


00:22:02.180 --> 00:22:05.700
I renamed it, but how do you rename it?


00:22:05.700 --> 00:22:07.420
I went out and searched, so how do you


00:22:07.420 --> 00:22:09.700
rename something in PyPI? You can't really do it.


00:22:09.700 --> 00:22:12.500
But you can create another one.


00:22:12.500 --> 00:22:15.820
This is nice. Well, who was it?


00:22:15.820 --> 00:22:18.120
Simon Willison wrote this up.


00:22:18.120 --> 00:22:21.540
It's a PyPI renamed cookie cutter template.


00:22:21.540 --> 00:22:23.520
I didn't actually use the template,


00:22:23.520 --> 00:22:25.820
but I did use these steps.


00:22:25.820 --> 00:22:27.380
The steps really are create


00:22:27.380 --> 00:22:29.880
a renamed version of the package, which I did,


00:22:29.880 --> 00:22:33.520
then publish it to PyPI under the new name and create


00:22:33.520 --> 00:22:36.780
a final release for the old name that points to the new one


00:22:36.780 --> 00:22:40.360
and depends on it and have dependencies.


00:22:40.360 --> 00:22:42.260
There's somebody installed the old one,


00:22:42.260 --> 00:22:43.760
they'll really get the new one.


00:22:43.760 --> 00:22:45.880
It sounds more complicated than it is.


00:22:45.880 --> 00:22:47.080
It's just a few steps,


00:22:47.080 --> 00:22:49.640
but there's a cookie cutter you can use.


00:22:49.640 --> 00:22:53.440
The cookie cutter uses setup tools and I didn't want to do that.


00:22:54.160 --> 00:22:58.640
I just basically copied the entire thing.


00:22:58.640 --> 00:23:00.280
Then he's got a demo,


00:23:00.280 --> 00:23:01.680
so if you look at it,


00:23:01.680 --> 00:23:04.040
so if you go to the old version,


00:23:04.040 --> 00:23:06.000
it'll just have a thing that says,


00:23:06.000 --> 00:23:08.840
"Hey, I'm going to the new one now."


00:23:08.840 --> 00:23:11.800
I did that and it was neat.


00:23:11.800 --> 00:23:16.280
I really appreciate the steps and it's all good.


00:23:16.280 --> 00:23:19.040
>> Yeah, that's cool. You can also use it for aliases.


00:23:19.040 --> 00:23:22.600
You can install BS4 or BeautifulSoup4,


00:23:22.600 --> 00:23:24.040
Right. And it's kind of the same.


00:23:24.040 --> 00:23:26.480
Oh, is that, is that how they do that?


00:23:26.480 --> 00:23:29.720
I I'm guessing, I don't know, but it sounds like the same.


00:23:29.720 --> 00:23:30.160
I didn't know that.


00:23:30.160 --> 00:23:36.680
So now, so now when I go to Python, if you go to the old one, it just shows it's now a new name.


00:23:36.680 --> 00:23:37.720
Go to the other one instead.


00:23:37.720 --> 00:23:41.200
So, but if I install the old one, it, it kind of just pulls in the new one.


00:23:41.200 --> 00:23:41.920
Yes.


00:23:41.920 --> 00:23:42.400
Yeah.


00:23:42.400 --> 00:23:43.080
Yeah.


00:23:43.080 --> 00:23:43.440
Very cool.


00:23:43.440 --> 00:23:43.640
Yeah.


00:23:43.640 --> 00:23:49.960
Um, Brian, you were, you were refreshing on PyPI, but I actually just pushed my first ever package to PyPI a couple of weeks ago.


00:23:49.960 --> 00:23:51.720
and so that was a bit of a trial,


00:23:51.720 --> 00:23:53.880
but I was amazed at how straightforward it is.


00:23:53.880 --> 00:23:55.320
The documentation is excellent.


00:23:55.320 --> 00:23:57.080
It really is pretty seamless


00:23:57.080 --> 00:23:58.840
actually for somebody who's never done it before.


00:23:58.840 --> 00:24:00.780
Who knows? Hopefully, I don't make any mistakes on


00:24:00.780 --> 00:24:02.960
the one package I have and need to read it.


00:24:02.960 --> 00:24:06.280
>> The immutability of it is a little scary, but yeah.


00:24:06.280 --> 00:24:08.240
>> For me, the hard part was


00:24:08.240 --> 00:24:11.120
just understanding that it really was pretty simple.


00:24:11.120 --> 00:24:14.320
Then also getting the hashes right.


00:24:14.320 --> 00:24:18.120
You have to get signatures and stuff


00:24:18.120 --> 00:24:21.760
to make sure that you can push to the PyPI correctly.


00:24:21.760 --> 00:24:23.680
- Yeah, but even the documentation there,


00:24:23.680 --> 00:24:24.520
it's a little intimidating,


00:24:24.520 --> 00:24:27.240
but it actually turned out to be only a few minutes of work.


00:24:27.240 --> 00:24:29.280
So that was pretty nice, good for them.


00:24:29.280 --> 00:24:32.000
I guess PyPI is the people to praise for that.


00:24:32.000 --> 00:24:33.700
- Yeah, so what was your package?


00:24:33.700 --> 00:24:36.360
- Oh, it's called Premark.


00:24:36.360 --> 00:24:41.360
It's a spinoff of a JavaScript library for making slides.


00:24:41.360 --> 00:24:43.880
And I just make a lot of slides for teaching.


00:24:43.880 --> 00:24:47.480
And I actually found an existing package by,


00:24:47.480 --> 00:24:49.400
Man, I want to.


00:24:49.400 --> 00:24:50.320
Yeah, here it is.


00:24:50.320 --> 00:24:51.360
It is not ready.


00:24:51.360 --> 00:24:53.080
That's why it's a release candidate.


00:24:53.080 --> 00:24:54.440
OK, but I I yeah,


00:24:54.440 --> 00:24:56.240
I based it on this existing package


00:24:56.240 --> 00:24:58.400
by at Tyler Dave on GitHub and talk


00:24:58.400 --> 00:25:00.240
to him a little bit about it.


00:25:00.240 --> 00:25:02.000
He had already built a really lightweight


00:25:02.000 --> 00:25:03.800
tool and I just expanded on it.


00:25:03.800 --> 00:25:06.160
But I like to write my slides in markdown,


00:25:06.160 --> 00:25:08.000
which is really what this is for.


00:25:08.000 --> 00:25:09.520
You write your slides and markdown


00:25:09.520 --> 00:25:11.200
in a bunch of different files.


00:25:11.200 --> 00:25:12.760
It stitches them together and creates


00:25:12.760 --> 00:25:14.480
a what's called remark JS presentation.


00:25:14.480 --> 00:25:16.480
So I use this for my own teaching.


00:25:16.480 --> 00:25:22.000
But it really is largely a sample project to just like learn how to use PyPI and things like that.


00:25:22.000 --> 00:25:22.500
Okay.


00:25:22.500 --> 00:25:28.400
Yeah, very cool. All right. Up next, we have caching. Oh, wait, we just talked about caching.


00:25:28.400 --> 00:25:35.120
No, I have more caching. So Django, I have two pieces of news on Django. This one comes from


00:25:35.120 --> 00:25:42.320
Carlton Gibson, one of the Django guys, and also one of the hosts at Django Chat, the podcast.


00:25:42.320 --> 00:25:47.320
So they are adding a Redis cache backend to Django.


00:25:47.320 --> 00:25:51.840
So traditionally, Django has shipped with memcache,


00:25:51.840 --> 00:25:54.920
memcache D, that cache backend


00:25:54.920 --> 00:25:57.280
with multiple implementations, I think even.


00:25:57.280 --> 00:25:59.240
So you can go there like Django has an ORM,


00:25:59.240 --> 00:26:00.100
it can talk to stuff.


00:26:00.100 --> 00:26:02.240
So it has a cache backend as well.


00:26:02.240 --> 00:26:03.840
And it could talk to memcache,


00:26:03.840 --> 00:26:06.140
but it couldn't talk to Redis.


00:26:06.140 --> 00:26:08.340
And they found that the vast majority of people


00:26:08.340 --> 00:26:09.260
are using Redis.


00:26:09.260 --> 00:26:11.000
And they said, well, why don't we have a backend for it?


00:26:11.000 --> 00:26:12.100
Well, guess what?


00:26:12.100 --> 00:26:13.060
it's going to.


00:26:13.060 --> 00:26:16.060
So this was merged and this whole conversation here


00:26:16.060 --> 00:26:18.940
around the PR and the issue is pretty interesting.


00:26:18.940 --> 00:26:20.300
So it starts out and says,


00:26:20.300 --> 00:26:24.140
this PR aims to add support for Redis


00:26:24.140 --> 00:26:26.740
to be used as a caching backend with Django


00:26:26.740 --> 00:26:29.100
as Redis is the most popular caching backend,


00:26:29.100 --> 00:26:33.180
adding it to Django.core.cache module


00:26:33.180 --> 00:26:34.980
would be a great addition for developers


00:26:34.980 --> 00:26:38.140
who previously had to rely on third-party packages.


00:26:38.140 --> 00:26:40.060
And check out how they've got this little checklist


00:26:40.060 --> 00:26:41.100
and progress.


00:26:41.100 --> 00:26:44.460
These are the things for this PR to come along and work.


00:26:44.460 --> 00:26:46.660
So create the Redis cache class,


00:26:46.660 --> 00:26:48.700
do a pickle serializer, et cetera, et cetera.


00:26:48.700 --> 00:26:50.460
Waiting for this other task,


00:26:50.460 --> 00:26:52.620
here's some open-ended documentation.


00:26:52.620 --> 00:26:54.820
So I don't think I've seen this really before,


00:26:54.820 --> 00:26:58.100
like this project tracking in the PR.


00:26:58.100 --> 00:26:59.140
- I liked it. - It's really cool.


00:26:59.140 --> 00:27:00.060
- Yeah, I do too.


00:27:00.060 --> 00:27:02.780
The other thing to note that this came in on May 23rd


00:27:02.780 --> 00:27:04.940
and there's a large conversation.


00:27:04.940 --> 00:27:09.020
If you go there, there's 30 pages of conversation about it


00:27:09.020 --> 00:27:10.300
and you can see it evolving.


00:27:10.300 --> 00:27:13.280
Like, okay, we finally got the test pass and we finally got it implemented.


00:27:13.280 --> 00:27:16.060
Now let's move on to the documentation now, et cetera, et cetera.


00:27:16.060 --> 00:27:20.580
And then finally, boom, September 15th, that's three, three and a half


00:27:20.580 --> 00:27:21.380
months, something like that.


00:27:21.380 --> 00:27:22.260
It's closed.


00:27:22.260 --> 00:27:26.660
So you can actually sort of track what the Django team is doing for adding


00:27:26.660 --> 00:27:29.420
features, like core important features to Django.


00:27:29.420 --> 00:27:32.700
It's, it's always so interesting to watch open source communities like this,


00:27:32.700 --> 00:27:35.960
especially on somewhat contentious issues where people disagree and


00:27:35.960 --> 00:27:37.300
how they manage these things.


00:27:37.340 --> 00:27:40.240
I think it's really impressive because a lot of teams


00:27:40.240 --> 00:27:43.160
that even meet in person regularly in our small teams


00:27:43.160 --> 00:27:44.520
still struggle with that kind of stuff,


00:27:44.520 --> 00:27:47.080
but these huge open source projects manage it.


00:27:47.080 --> 00:27:48.960
Somehow they implemented the feature at the end.


00:27:48.960 --> 00:27:50.200
So pretty impressive.


00:27:50.200 --> 00:27:51.040
- Yeah, absolutely.


00:27:51.040 --> 00:27:51.920
It's very impressive.


00:27:51.920 --> 00:27:53.680
Also, I said this was from Carlton.


00:27:53.680 --> 00:27:54.640
He participated a lot.


00:27:54.640 --> 00:27:57.760
I'm not a hundred percent sure that he was the originator.


00:27:57.760 --> 00:28:02.760
This might be Daniel Abassi.


00:28:02.760 --> 00:28:05.840
So sorry if I misattributed credit there,


00:28:05.840 --> 00:28:08.440
But for whoever did this, the original issue,


00:28:08.440 --> 00:28:09.800
I think Carlton had put up.


00:28:09.800 --> 00:28:12.440
So I'm not sure who was really sort of the initiator there.


00:28:12.440 --> 00:28:13.560
But I think it's cool.


00:28:13.560 --> 00:28:17.160
And it's also neat how out in the open this whole thing is.


00:28:17.160 --> 00:28:18.000
- Yeah.


00:28:18.000 --> 00:28:20.040
- Putting the open in open source.


00:28:20.040 --> 00:28:20.880
- That's right.


00:28:20.880 --> 00:28:22.080
Hi, Brian, what you got?


00:28:22.080 --> 00:28:22.920
- It's me again.


00:28:22.920 --> 00:28:26.800
Are we done with our things?


00:28:26.800 --> 00:28:27.640
So we were gonna do-


00:28:27.640 --> 00:28:29.040
- Oh wait, no, I think I got one more.


00:28:29.040 --> 00:28:29.880
- Oh, no, sorry.


00:28:29.880 --> 00:28:31.760
I totally, I was for some reason in wrong order.


00:28:31.760 --> 00:28:33.080
Yes, Ethan, you're up next, sorry.


00:28:33.080 --> 00:28:34.280
- Totally fine.


00:28:34.280 --> 00:28:38.740
So yeah, so I wanted to highlight PEP 612.


00:28:38.740 --> 00:28:41.020
So I happened upon this, I forget,


00:28:41.020 --> 00:28:42.580
there was some other PEP I was looking at


00:28:42.580 --> 00:28:44.560
and they'd linked off to this one.


00:28:44.560 --> 00:28:46.140
But a little bit of background,


00:28:46.140 --> 00:28:48.080
a PEP is a Python Enhancement Proposal.


00:28:48.080 --> 00:28:50.700
It's basically like how ideas are proposed


00:28:50.700 --> 00:28:52.140
in terms of what to do with Python


00:28:52.140 --> 00:28:54.520
as a community or as a language.


00:28:54.520 --> 00:28:57.100
And I recently have been really kind of diving


00:28:57.100 --> 00:28:59.660
into type hinting Python.


00:28:59.660 --> 00:29:01.940
So there's a surprising number of PEPs about type hinting.


00:29:01.940 --> 00:29:03.760
And what this one does is something,


00:29:03.760 --> 00:29:05.340
I guess I didn't really realize I needed.


00:29:05.340 --> 00:29:06.780
It was a bit of an annoyance,


00:29:06.780 --> 00:29:08.720
but I didn't realize there was a fix coming.


00:29:08.720 --> 00:29:12.180
Basically, what it comes down to is quite often


00:29:12.180 --> 00:29:13.700
you write functions that take


00:29:13.700 --> 00:29:16.340
in a function and return another function.


00:29:16.340 --> 00:29:19.260
There's this example.


00:29:19.260 --> 00:29:22.340
Where's the first case where they use it?


00:29:22.340 --> 00:29:24.900
Think here, param spec.


00:29:24.900 --> 00:29:27.180
I'll find it while I talk about this.


00:29:27.180 --> 00:29:29.700
>> A lot of decorator time.


00:29:29.700 --> 00:29:32.460
>> Yeah. What you do with decorator is you write


00:29:32.460 --> 00:29:37.180
functions that take in other functions and return a function that has the same signature,


00:29:37.180 --> 00:29:39.060
which is to say it takes in the same parameters of


00:29:39.060 --> 00:29:42.340
the same types and returns the same return type.


00:29:42.340 --> 00:29:44.380
It may have some other modifications of the function,


00:29:44.380 --> 00:29:45.900
but that's very frequent.


00:29:45.900 --> 00:29:49.100
Sometimes what you want to say is my decorator,


00:29:49.100 --> 00:29:50.620
if I want to type the decorator,


00:29:50.620 --> 00:29:52.060
say what types of things it takes in,


00:29:52.060 --> 00:29:55.980
it takes in something that is essentially a generic function type.


00:29:55.980 --> 00:29:58.500
Any kind of function is fine that takes in


00:29:58.500 --> 00:30:00.940
any parameters and returns any return type,


00:30:00.940 --> 00:30:04.780
as long as it returns the same thing. So it's like generics, which you would do with type vars.


00:30:04.780 --> 00:30:13.500
But in this case, you create something called a param spec, and then you pass that as the...


00:30:13.500 --> 00:30:20.300
Oh man, I lost it where it is in here. Oh, here we go. This is what I wanted. So you pass it as


00:30:20.300 --> 00:30:25.260
the type of callable when you type the function that's taken in, and then you say you're returning


00:30:25.260 --> 00:30:30.860
a callable with the same parameter specification. This p is a parameter specification. And you may


00:30:30.860 --> 00:30:35.980
make essentially your callables generic on both this parameter


00:30:35.980 --> 00:30:38.620
specification and on the return value.


00:30:38.620 --> 00:30:40.420
So I know there's a lot to that.


00:30:40.420 --> 00:30:43.660
And I think for people who are typing everything every day,


00:30:43.660 --> 00:30:46.620
maybe this doesn't seem terribly pertinent.


00:30:46.620 --> 00:30:49.140
What I do, I said I write a lot of Python packages


00:30:49.140 --> 00:30:49.940
for people to use.


00:30:49.940 --> 00:30:51.780
And it's important both for quality control


00:30:51.780 --> 00:30:55.060
and so people know what the return values are


00:30:55.060 --> 00:30:56.740
and what they should pass into functions


00:30:56.740 --> 00:30:57.740
to have a lot of typing.


00:30:57.740 --> 00:31:00.300
But really, what this got me thinking about a little bit


00:31:00.300 --> 00:31:03.020
is just that the Python typing ecosystem


00:31:03.020 --> 00:31:04.180
is still really evolving.


00:31:04.180 --> 00:31:07.260
Like for somebody who's not super close to following it,


00:31:07.260 --> 00:31:09.980
it appears that like this is how Python works now


00:31:09.980 --> 00:31:12.380
and maybe it's always been this way, but it really hasn't.


00:31:12.380 --> 00:31:14.120
And there's a lot of holes in how it works.


00:31:14.120 --> 00:31:15.640
There was no way to do this before


00:31:15.640 --> 00:31:16.860
and this isn't finished yet.


00:31:16.860 --> 00:31:19.340
This is a pep, but it isn't implemented.


00:31:19.340 --> 00:31:21.540
And so right now you don't have a way to do typing


00:31:21.540 --> 00:31:23.040
for this particular feature.


00:31:23.040 --> 00:31:23.980
And that-- - Yeah,


00:31:23.980 --> 00:31:27.140
flowing type information through different things.


00:31:27.140 --> 00:31:29.740
That is something we haven't done a lot of in Python.


00:31:29.740 --> 00:31:31.940
- But as you called out generics and templates,


00:31:31.940 --> 00:31:33.140
that's like all you do.


00:31:33.140 --> 00:31:35.060
That's the bread and butter of those things.


00:31:35.060 --> 00:31:36.380
- Yeah, and it's the same idea,


00:31:36.380 --> 00:31:37.820
but features that aren't there yet.


00:31:37.820 --> 00:31:39.580
So it's just kind of interesting to remember


00:31:39.580 --> 00:31:41.540
that this stuff is still being added.


00:31:41.540 --> 00:31:43.700
Like keeping an eye on when this stuff comes in,


00:31:43.700 --> 00:31:45.420
it can really make things easier.


00:31:45.420 --> 00:31:48.300
And in the meantime, don't lose too much sleep


00:31:48.300 --> 00:31:49.820
not being able to type certain things.


00:31:49.820 --> 00:31:52.260
If you can't type it perfectly, that's okay.


00:31:52.260 --> 00:31:55.220
I've actually been reading Luciano Romalho's book,


00:31:55.220 --> 00:31:57.860
"Fluent Python," and he makes that point really well,


00:31:57.860 --> 00:32:00.340
that Python isn't a statically typed language


00:32:00.340 --> 00:32:02.020
and you shouldn't get too carried away


00:32:02.020 --> 00:32:02.900
trying to type things.


00:32:02.900 --> 00:32:05.260
As much as is possible and helps you is worth it,


00:32:05.260 --> 00:32:07.100
but you shouldn't be religious about it.


00:32:07.100 --> 00:32:08.860
- Right, but if you are building tools


00:32:08.860 --> 00:32:11.620
and you put this into there eventually,


00:32:11.620 --> 00:32:14.460
it might help other people who consume your libraries,


00:32:14.460 --> 00:32:17.380
it might help the editors give better auto-complete


00:32:17.380 --> 00:32:18.720
and error checking and stuff.


00:32:18.720 --> 00:32:20.060
- And we catch bugs all the time.


00:32:20.060 --> 00:32:23.300
So as much as is feasible, I think it's totally worth it.


00:32:23.300 --> 00:32:24.540
And actually there's a couple other peps


00:32:24.540 --> 00:32:26.340
on that note of things still changing.


00:32:26.340 --> 00:32:28.740
There's a couple other peps that are worth looking at.


00:32:28.740 --> 00:32:32.220
There's a new, more convenient way to write optional types.


00:32:32.220 --> 00:32:34.340
So right now you can say, I know.


00:32:34.340 --> 00:32:37.620
- Oh my gosh, I've wanted this for so long, yes.


00:32:37.620 --> 00:32:40.460
- Yeah, so you have to say optional left bracket


00:32:40.460 --> 00:32:42.420
then the thing that is optional and then right bracket.


00:32:42.420 --> 00:32:43.660
- Like optional bracket string


00:32:43.660 --> 00:32:45.500
or optional bracket user or whatever, yeah.


00:32:45.500 --> 00:32:47.580
And you got to import optional, don't forget that, yeah.


00:32:47.580 --> 00:32:49.060
- That's true, you got to import it too.


00:32:49.060 --> 00:32:51.460
And so now there's a pep proposing


00:32:51.460 --> 00:32:52.580
that you could just put a question mark,


00:32:52.580 --> 00:32:54.260
which I guess isn't a problem for the parser,


00:32:54.260 --> 00:32:55.740
which is pretty nice.


00:32:55.740 --> 00:32:58.160
This one also is in process.


00:32:58.160 --> 00:32:59.740
- Maybe this was something that was needed,


00:32:59.740 --> 00:33:01.860
the peg parser, which recently went into,


00:33:01.860 --> 00:33:03.220
- Oh, maybe. - Was that 3.9, right?


00:33:03.220 --> 00:33:04.760
Where it couldn't do it before,


00:33:04.760 --> 00:33:06.220
but maybe it can now. - Yeah, that's a good point.


00:33:06.220 --> 00:33:08.660
- But yeah, you know, they have that in C#


00:33:08.660 --> 00:33:09.500
and they have that in Swift,


00:33:09.500 --> 00:33:12.760
and I just love like this thing question mark, right?


00:33:12.760 --> 00:33:15.260
Rather than a null check or specifying,


00:33:15.260 --> 00:33:18.300
into question mark rather than optional bracket of int.


00:33:18.300 --> 00:33:19.220
It's just clear. - I didn't know


00:33:19.220 --> 00:33:20.180
that was in other languages.


00:33:20.180 --> 00:33:21.700
That, okay, that makes a lot more sense.


00:33:21.700 --> 00:33:23.180
- And it's phonetic, right?


00:33:23.180 --> 00:33:25.660
Like if it's an int, you just say int.


00:33:25.660 --> 00:33:27.660
if it's an int question mark, it's int.


00:33:27.660 --> 00:33:29.620
- Right, so you can even just like speak it out really well.


00:33:29.620 --> 00:33:31.420
Like int, maybe, okay, that could be null.


00:33:31.420 --> 00:33:32.740
- Maybe. - Could be none.


00:33:32.740 --> 00:33:35.060
- Yeah, it's not obvious to me.


00:33:35.060 --> 00:33:35.940
- Really, oh, interesting.


00:33:35.940 --> 00:33:38.300
I feel like that's a nice syntax, but maybe it isn't.


00:33:38.300 --> 00:33:40.140
Who knows, maybe that won't get approved.


00:33:40.140 --> 00:33:43.220
- Yeah, I think it may not, but I do hope it does.


00:33:43.220 --> 00:33:44.320
I mean, it's the question mark.


00:33:44.320 --> 00:33:45.980
There's an int or is there, right?


00:33:45.980 --> 00:33:46.940
It's like, is it there?


00:33:46.940 --> 00:33:47.780
You're not sure.


00:33:47.780 --> 00:33:50.420
There's some subtle symbolism there.


00:33:50.420 --> 00:33:53.080
- See, I prefer the int or none.


00:33:54.340 --> 00:33:55.460
I like that as well.


00:33:55.460 --> 00:33:56.300
I agree.


00:33:56.300 --> 00:33:57.120
- Yeah, that's not bad.


00:33:57.120 --> 00:33:57.960
- Now that that's more convenient to write,


00:33:57.960 --> 00:33:58.800
but that's what that's all about.


00:33:58.800 --> 00:34:00.340
- And the other languages that support this,


00:34:00.340 --> 00:34:02.740
and I don't know, I didn't read that pep well enough to know


00:34:02.740 --> 00:34:04.640
there's a runtime behavior,


00:34:04.640 --> 00:34:06.820
not just a type specification behavior.


00:34:06.820 --> 00:34:11.820
So I could say x equals like user question mark dot name.


00:34:11.820 --> 00:34:15.600
It'll either, if the user is none, the name is none,


00:34:15.600 --> 00:34:17.840
or it'll follow down that path and say,


00:34:17.840 --> 00:34:20.180
okay, user is not none, so then I'll say dot name.


00:34:20.180 --> 00:34:22.260
- Oh, that avoids the none type has no attribute.


00:34:22.260 --> 00:34:23.100
- Yeah, yeah, exactly.


00:34:23.100 --> 00:34:23.940
- That's really nice.


00:34:23.940 --> 00:34:24.780
- Yeah.


00:34:24.780 --> 00:34:25.620
- Wow, very cool.


00:34:25.620 --> 00:34:29.940
- So Will is in the chat and he's got,


00:34:29.940 --> 00:34:32.140
oh, I did the wrong one.


00:34:32.140 --> 00:34:32.980
I love that.


00:34:32.980 --> 00:34:35.540
(laughing)


00:34:35.540 --> 00:34:36.380
- Hey, Will.


00:34:36.380 --> 00:34:38.380
- That was pretty good.


00:34:38.380 --> 00:34:39.220
- All right, and then Ethan,


00:34:39.220 --> 00:34:41.300
you wanna tell us about one more before we wrap it up?


00:34:41.300 --> 00:34:42.820
- Oh, just another pep, yeah.


00:34:42.820 --> 00:34:45.140
Just another thing that is potentially changed


00:34:45.140 --> 00:34:46.340
how typing works.


00:34:46.340 --> 00:34:47.940
Right now there's no way to specify


00:34:47.940 --> 00:34:49.220
if you've used a type dict,


00:34:49.220 --> 00:34:50.980
which is to say a dictionary


00:34:50.980 --> 00:34:54.380
with some keys having certain types,


00:34:54.380 --> 00:34:58.740
there was no way to specify what keys were optional


00:34:58.740 --> 00:34:59.580
and which ones weren't.


00:34:59.580 --> 00:35:00.660
You could either say they were all optional


00:35:00.660 --> 00:35:02.740
or they were all required and there's nothing in between.


00:35:02.740 --> 00:35:04.580
But there's also a pep to do that.


00:35:04.580 --> 00:35:06.380
So just there's a lot of stuff on the horizon


00:35:06.380 --> 00:35:07.460
to keep an eye out for.


00:35:07.460 --> 00:35:10.140
And these three peps I think are a good reminder of that.


00:35:10.140 --> 00:35:11.220
- Yeah. - Yeah.


00:35:11.220 --> 00:35:12.060
Yeah, very cool.


00:35:12.060 --> 00:35:14.220
All right, now, can we throw it to you, Brian?


00:35:14.220 --> 00:35:18.940
- Yeah, now, so this was a suggestion by John Hagan


00:35:18.940 --> 00:35:24.020
I just thought I'd throw it in as an extra, just one extra.


00:35:24.020 --> 00:35:27.640
We've talked about the effort at Microsoft and Guido and


00:35:27.640 --> 00:35:30.840
others to make Python faster.


00:35:30.840 --> 00:35:38.560
There's a whole bunch of ideas up in the faster CPython ideas.


00:35:38.560 --> 00:35:41.400
This links to a couple of slide decks


00:35:41.400 --> 00:35:45.800
talking about making Python faster.


00:35:45.800 --> 00:35:49.520
One of the things is a slide deck from Guido.


00:35:49.520 --> 00:35:53.440
In it, he mentions various other optimizations


00:35:53.440 --> 00:35:56.120
like maybe zero overhead exception handling.


00:35:56.120 --> 00:36:00.160
Well, that's neat because that's already in 3.11.


00:36:00.160 --> 00:36:07.400
In 3.11, we have Mark Shannon implementing zero-cost exceptions.


00:36:07.400 --> 00:36:11.680
If you have a try statement that doesn't catch anything,


00:36:11.680 --> 00:36:13.840
there's no cost to it.


00:36:13.840 --> 00:36:16.680
>> That is very cool. I did a little playing around with this idea,


00:36:16.680 --> 00:36:20.820
and I wrote a program here that calls string upper,


00:36:20.820 --> 00:36:22.660
like a 100 million times in a loop,


00:36:22.660 --> 00:36:27.000
and it does that also in a try-except block with no errors.


00:36:27.000 --> 00:36:30.580
So my understanding of this was that it will make


00:36:30.580 --> 00:36:34.420
entering the try block in the case there's not an exception cheaper,


00:36:34.420 --> 00:36:36.760
and I ran it a 100 million times,


00:36:36.760 --> 00:36:39.240
and I got not exactly the same,


00:36:39.240 --> 00:36:40.740
but it's really similar.


00:36:40.740 --> 00:36:42.900
But one of the other things which I'm not doing in


00:36:42.900 --> 00:36:46.060
my example here, this is a gist, I'll put it in the show notes.


00:36:46.060 --> 00:36:52.060
The looking into this comment, Brian, is they talk about the number of


00:36:52.060 --> 00:36:55.940
basically the size of the call stack and some of the other things


00:36:55.940 --> 00:36:59.100
that happen in there about not pushing the exception


00:36:59.100 --> 00:37:01.900
onto the call stack or something unless it actually happens


00:37:01.900 --> 00:37:04.580
and those kinds of things. So it's supposed to make function calls


00:37:04.580 --> 00:37:06.980
faster as well. So even if my little example


00:37:06.980 --> 00:37:09.980
wasn't necessarily faster, maybe something else.


00:37:09.980 --> 00:37:12.780
There's maybe other situations where it is nice.


00:37:12.780 --> 00:37:14.620
- Cool. - Yeah.


00:37:14.620 --> 00:37:16.180
Ethan, anything else you wanna just throw out there


00:37:16.180 --> 00:37:17.180
for people?


00:37:17.180 --> 00:37:19.100
- Well, one thing I did wanna mention real fast


00:37:19.100 --> 00:37:21.860
about the zero cost exception handling is,


00:37:21.860 --> 00:37:23.260
I think it's always tough to teach people


00:37:23.260 --> 00:37:25.300
about try except blocks and then introduce to them


00:37:25.300 --> 00:37:27.180
that they're actually pretty slow,


00:37:27.180 --> 00:37:28.580
especially if you use them in a function


00:37:28.580 --> 00:37:29.700
that gets called many times.


00:37:29.700 --> 00:37:31.140
And to be honest, I don't know the reasons


00:37:31.140 --> 00:37:33.100
for the internals being like that.


00:37:33.100 --> 00:37:34.100
So it's really nice to feel like


00:37:34.100 --> 00:37:35.220
that might not be true anymore,


00:37:35.220 --> 00:37:36.980
because they're a good practice to have


00:37:36.980 --> 00:37:39.500
to be able to say like, be careful when you write code,


00:37:39.500 --> 00:37:41.380
especially for people like data scientists


00:37:41.380 --> 00:37:43.420
who aren't day-to-day programmers to say like,


00:37:43.420 --> 00:37:44.500
"Oh, it's good practice to use these


00:37:44.500 --> 00:37:45.980
and you shouldn't have to worry about performance."


00:37:45.980 --> 00:37:47.340
So glad to see that.


00:37:47.340 --> 00:37:48.180
- Yeah, absolutely.


00:37:48.180 --> 00:37:51.060
And just following up on that real quick.


00:37:51.060 --> 00:37:55.380
If you look at the issue underlying this,


00:37:55.380 --> 00:37:56.200
where was it?


00:37:56.200 --> 00:37:57.040
Is this the right one?


00:37:57.040 --> 00:37:59.280
Yeah, there's an issue that's linked in the show notes


00:37:59.280 --> 00:38:03.060
and it actually shows you the disassembly into bytecode


00:38:03.060 --> 00:38:06.660
of what it currently is and what it's going to be.


00:38:06.660 --> 00:38:09.220
And it's really, really similar.


00:38:09.220 --> 00:38:10.740
So you can see currently it does like,


00:38:10.740 --> 00:38:12.980
The first thing he does is set up a finally


00:38:12.980 --> 00:38:15.260
and then stuff right at the beginning.


00:38:15.260 --> 00:38:17.660
But now just do like a no op


00:38:17.660 --> 00:38:19.800
and then do a return value in the good case.


00:38:19.800 --> 00:38:21.500
Otherwise it'll do a push exception


00:38:21.500 --> 00:38:23.680
and then work with it and so on.


00:38:23.680 --> 00:38:27.340
So it pushes off some of the bytecode operations


00:38:27.340 --> 00:38:29.140
that add like to the call stack,


00:38:29.140 --> 00:38:30.900
like pushing things onto it and so on


00:38:30.900 --> 00:38:34.740
at the c of al.c level of CPython.


00:38:34.740 --> 00:38:36.380
- Yeah, oh, that's very cool.


00:38:36.380 --> 00:38:37.200
- Yeah.


00:38:37.200 --> 00:38:39.380
- Well, the one thing I wanted to mention,


00:38:39.380 --> 00:38:41.940
- Well, I don't know if people have heard of pedal board.


00:38:41.940 --> 00:38:43.820
I think Spotify just announced this recently.


00:38:43.820 --> 00:38:46.260
It's basically a Python package that lets you do some things


00:38:46.260 --> 00:38:48.700
you might usually do using an audio editing tool.


00:38:48.700 --> 00:38:52.860
And it's cool on its own, but I had just listened to,


00:38:52.860 --> 00:38:55.400
I forget if it was last week or the weeks before episode


00:38:55.400 --> 00:38:58.100
where Brett Cannon was on, on Python Bytes.


00:38:58.100 --> 00:39:00.020
And he talked about how, you know,


00:39:00.020 --> 00:39:02.100
anytime you see an issue with documentation,


00:39:02.100 --> 00:39:03.300
just put in a pull request.


00:39:03.300 --> 00:39:04.620
Most of the time it'll get accepted.


00:39:04.620 --> 00:39:06.980
And he said he's contributed


00:39:06.980 --> 00:39:09.500
like 200 or 300 repositories that way.


00:39:09.500 --> 00:39:11.660
So I found this last week, and then in this week,


00:39:11.660 --> 00:39:13.100
I was thinking about what I wanted to talk about


00:39:13.100 --> 00:39:15.100
on the show, so I went back to this link,


00:39:15.100 --> 00:39:18.860
and lo and behold, the last commit was made by Brett Cannon,


00:39:18.860 --> 00:39:21.860
and it's removing a stray back tick in the readme.


00:39:21.860 --> 00:39:23.980
So he really practices what he preaches.


00:39:23.980 --> 00:39:25.140
So he seems to be very active.


00:39:25.140 --> 00:39:28.020
He's one of only nine contributors to this,


00:39:28.020 --> 00:39:29.820
and probably the rest work at Spotify.


00:39:29.820 --> 00:39:31.540
So, good for him.


00:39:31.540 --> 00:39:32.780
- Nice. - Yeah, that's fantastic.


00:39:32.780 --> 00:39:35.660
Nice for that little bit of real-time follow-up.


00:39:35.660 --> 00:39:36.500
- Fantastic. - Yeah.


00:39:36.500 --> 00:39:38.340
- All right, so I have a few extras,


00:39:38.340 --> 00:39:42.060
and again, I have my banner for extras, extras, extras.


00:39:42.060 --> 00:39:43.980
So a couple of things here.


00:39:43.980 --> 00:39:48.100
Let's talk about something that Kelly Schuster-Perez


00:39:48.100 --> 00:39:49.180
talked about, you know,


00:39:49.180 --> 00:39:53.500
she and Sean doing the Teaching Python podcast,


00:39:53.500 --> 00:39:54.940
and they're doing great work over there.


00:39:54.940 --> 00:39:58.520
So one of the things that she found for teaching


00:39:58.520 --> 00:40:00.660
is this thing called Ear Sketch.


00:40:00.660 --> 00:40:02.660
You probably haven't heard of this, I'm guessing.


00:40:02.660 --> 00:40:05.660
So Ear Sketch is a project from Georgia Tech


00:40:05.660 --> 00:40:11.300
that teaches coding, but through like a DJ type of experience.


00:40:11.300 --> 00:40:14.900
She's got a cool video up there that says five minutes and four lines of code.


00:40:14.900 --> 00:40:16.500
And I got this up there going.


00:40:16.500 --> 00:40:18.660
So yeah, thanks, Tony, for pointing that out.


00:40:18.660 --> 00:40:21.340
So here, I'll just play what she created for everyone real quick.


00:40:21.340 --> 00:40:23.820
[MUSIC - EAR SKETCH, "FIVE MINUTES AND FOUR LINES OF CODE"]


00:40:23.820 --> 00:40:25.780
I can see the look that's written on your face.


00:40:25.780 --> 00:40:27.700
Wonder how I still fit this crown.


00:40:27.700 --> 00:40:29.660
I can see the look that's written on your face.


00:40:29.660 --> 00:40:31.900
Wonder how I still fit this crown.


00:40:31.900 --> 00:40:33.740
I can see the look that's written on your face.


00:40:33.740 --> 00:40:35.140
- People are teaching,


00:40:35.140 --> 00:40:37.220
wanna get folks involved through music and Python.


00:40:37.220 --> 00:40:39.140
That's a real cool project that Ear Sketch.


00:40:39.140 --> 00:40:41.980
And I told you good stuff about Django before.


00:40:41.980 --> 00:40:43.540
Let me tell you some bad stuff.


00:40:43.540 --> 00:40:44.380
- Oh no.


00:40:44.380 --> 00:40:49.140
- You might meet little Bobby Tables in the Django ORM.


00:40:49.140 --> 00:40:54.040
If you're running query set, order by,


00:40:54.040 --> 00:40:56.980
and passing some piece of user input


00:40:56.980 --> 00:40:58.780
into what you might be ordering by,


00:40:58.780 --> 00:41:00.620
you might be ordering by backtick,


00:41:00.620 --> 00:41:03.900
semicolon, drop table, dash dash,


00:41:03.900 --> 00:41:05.860
or something like that, which you wouldn't want to.


00:41:05.860 --> 00:41:09.620
So basically there's a SQL injection vulnerability in Django.


00:41:09.620 --> 00:41:10.460
What is it?


00:41:10.460 --> 00:41:14.620
320 up to 325,


00:41:14.620 --> 00:41:17.620
and 300 up to 313,


00:41:17.620 --> 00:41:20.460
but yeah, less than that, right?


00:41:20.460 --> 00:41:23.940
Less than 325 and less than 313.


00:41:23.940 --> 00:41:25.780
So if you have those,


00:41:25.780 --> 00:41:27.540
you definitely want to patch it straight away.


00:41:27.540 --> 00:41:29.220
that's a critical vulnerability.


00:41:29.220 --> 00:41:30.620
So check that out.


00:41:30.620 --> 00:41:32.740
- That's on untrusted input.


00:41:32.740 --> 00:41:33.580
So.


00:41:33.580 --> 00:41:35.100
- Yes, that is untrusted input.


00:41:35.100 --> 00:41:37.140
Don't freak if you're not taking,


00:41:37.140 --> 00:41:38.300
what would you like to sort by?


00:41:38.300 --> 00:41:39.340
Please type here.


00:41:39.340 --> 00:41:43.860
But still, you know, it's easy enough


00:41:43.860 --> 00:41:46.380
to just do a GitHub update,


00:41:46.380 --> 00:41:47.580
just an update to the requirements.


00:41:47.580 --> 00:41:49.900
Now, if you're on, your code is on GitHub


00:41:49.900 --> 00:41:53.220
and this is the requirement, you pinned your version,


00:41:53.220 --> 00:41:55.340
you probably have already gotten this


00:41:55.340 --> 00:41:58.740
as a security announcement and an email sent to you.


00:41:58.740 --> 00:42:00.140
- Yeah, that's such a nice feature.


00:42:00.140 --> 00:42:01.180
- It is such a nice feature.


00:42:01.180 --> 00:42:02.340
But if you don't pin your version,


00:42:02.340 --> 00:42:03.460
they're like, well, you're on the latest version.


00:42:03.460 --> 00:42:04.460
You're good, right?


00:42:04.460 --> 00:42:05.280
You won't know.


00:42:05.280 --> 00:42:06.940
So it still may slip through.


00:42:06.940 --> 00:42:07.780
All right.


00:42:07.780 --> 00:42:09.580
Yeah, and Chris May on the live stream


00:42:09.580 --> 00:42:11.300
has some philosophical thoughts for us.


00:42:11.300 --> 00:42:14.020
He says sometimes he doesn't even trust his own input.


00:42:14.020 --> 00:42:16.140
Yes, we've all been there.


00:42:16.140 --> 00:42:17.740
- Chris, don't inject yourself.


00:42:17.740 --> 00:42:22.340
- All right, shall we wrap this up with some laughs?


00:42:22.340 --> 00:42:23.160
- Yes.


00:42:23.160 --> 00:42:25.360
Brian, this is gonna take some role playing again,


00:42:25.360 --> 00:42:26.840
a nice little cartoon for us.


00:42:26.840 --> 00:42:28.600
This is QA 101.


00:42:28.600 --> 00:42:31.080
Speaking of the CVE I just spoke about,


00:42:31.080 --> 00:42:33.640
and you know, if you fix a minor bug,


00:42:33.640 --> 00:42:35.440
you might get credit, like whatever.


00:42:35.440 --> 00:42:36.860
We fixed a little tiny bug, right?


00:42:36.860 --> 00:42:38.360
Formatted in a log file.


00:42:38.360 --> 00:42:41.160
You fix a critical bug, like wow, that seems super important.


00:42:41.160 --> 00:42:42.640
You've been doing good work this week, right?


00:42:42.640 --> 00:42:46.680
So here's two developers in a open office sort of space.


00:42:46.680 --> 00:42:49.080
Brian, you be the guy, I'll be the woman developer.


00:42:49.080 --> 00:42:51.880
- Okay, which priority should I give this bug?


00:42:51.880 --> 00:42:53.420
Is it easy to fix?


00:42:53.420 --> 00:42:56.180
- Yep, I'll fix it immediately.


00:42:56.180 --> 00:42:58.580
- Critical, critical.


00:42:58.580 --> 00:43:01.140
Finding the correct bug priority is key, they say.


00:43:01.140 --> 00:43:03.340
So very nice, I'll link to that little cartoon


00:43:03.340 --> 00:43:04.380
in the show notes.


00:43:04.380 --> 00:43:05.780
- Oh, get it.


00:43:05.780 --> 00:43:06.980
- Because you're gonna get more credit


00:43:06.980 --> 00:43:08.060
for fixing critical bugs.


00:43:08.060 --> 00:43:09.660
And if you can fix it right away.


00:43:09.660 --> 00:43:11.100
- Yeah, it looks like you did way more work.


00:43:11.100 --> 00:43:12.660
- You did so much more work.


00:43:12.660 --> 00:43:16.260
Brian over there only fixed like medium bugs.


00:43:16.260 --> 00:43:17.820
Ethan and I took out the critical ones.


00:43:17.820 --> 00:43:20.500
- Exactly, you do your T-shirt sizing after you finish.


00:43:20.500 --> 00:43:23.500
After you take all the work, you assume everything you took was a large.


00:43:23.500 --> 00:43:25.500
Yeah.


00:43:25.500 --> 00:43:27.500
Exactly.


00:43:27.500 --> 00:43:30.500
I keep asking people, "So what are the points equal in hours?"


00:43:30.500 --> 00:43:32.500
No, we can't talk about that.


00:43:32.500 --> 00:43:34.500
Okay.


00:43:34.500 --> 00:43:36.500
Do I use powers of two?


00:43:36.500 --> 00:43:38.500
What do I do?


00:43:38.500 --> 00:43:40.500
Cool. Well, thanks, Ethan, for coming on the show.


00:43:40.500 --> 00:43:41.500
It was fun.


00:43:41.500 --> 00:43:42.500
Yeah, this was great. Thanks for having me.


00:43:42.500 --> 00:43:44.500
Yeah, it's been fantastic to have you here.


00:43:44.500 --> 00:43:45.500
Thanks for being here.


00:43:45.500 --> 00:43:46.500
Brian, thanks as always.


00:43:46.500 --> 00:43:47.500
Thanks.


00:43:47.500 --> 00:43:48.500
Bye, everyone.


00:43:48.500 --> 00:43:54.820
to Python bytes, follow the show on Twitter via at Python bytes, that's Python bytes as in b y t


00:43:54.820 --> 00:44:00.500
s, get the full show notes over at Python bytes.fm. If you have a news item we should cover, just


00:44:00.500 --> 00:44:04.980
visit Python bytes.fm and click Submit in the navbar. We're always on the lookout for sharing


00:44:04.980 --> 00:44:09.460
something cool. If you want to join us for the live recording, just visit the website and click


00:44:09.460 --> 00:44:14.660
live stream to get notified of when our next episode goes live. That's usually happening at


00:44:14.660 --> 00:44:17.780
noon Pacific on Wednesdays over at YouTube.


00:44:17.780 --> 00:44:19.860
On behalf of myself and Brian Aukin,


00:44:19.860 --> 00:44:21.180
this is Michael Kennedy.


00:44:21.180 --> 00:44:23.400
Thank you for listening and sharing this podcast


00:44:23.400 --> 00:44:25.060
with your friends and colleagues.

