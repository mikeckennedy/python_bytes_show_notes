00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04 your earbuds. This is episode 199, almost 200, Brian. Almost. Almost. Recorded September 9th,

00:00:12 2020. I'm Michael Kennedy. And I'm Brian Okken. And this episode is brought to you by us. We'll

00:00:17 tell you more about the things that we're doing and what we have to offer later. But for now,

00:00:22 I want to talk about not any huge announcement, but a very, very small announcement that it's

00:00:29 also kind of huge. Very cool. Yeah. So micro, you might say. You might say it's microscopic,

00:00:33 but it's a big deal. So MicroPython has just had a new release. And this is significant because the

00:00:39 last release from MicroPython was December 19th of last year. So it's been, you know, what is that?

00:00:47 Almost 10 months since the last release. So if you care about MicroPython, this is like a pretty big

00:00:51 deal. So version 113 is out. And one of the major things is it has improved asyncio,

00:00:58 async and await support. And it has cool Bluetooth improvements. And it even comes with the PEP 526,

00:01:06 that walrus operator. Oh, nice. Yeah. So there's a lot of stuff going on here. They basically,

00:01:11 MicroPython, as you can imagine, comes with a micro asyncio module. I'm guessing the U is really a MU.

00:01:19 U asyncio module that's supposed to be more compatible with CPython's asyncio. So the main idea is that the

00:01:28 task object, you can use a task object for each coroutine, which allows you to have like unbounded

00:01:34 queues of work and stuff like that. Whereas previously, I think you had to pre-allocate it for some reason.

00:01:39 I never tried to do asyncio on MicroPython, but apparently it was a little bit wonky. And so now it's more

00:01:45 consistent. Another thing that I thought was interesting about this release, Brian, was they went through and

00:01:52 auto-formatted all the code in the entire repository. And if you look at their repo, there is Python and MicroPython,

00:01:59 but a lot like CPython, it's a lot of C as well. Right? I think it's like 80% C or something.

00:02:05 Okay.

00:02:06 And so they auto-formatted the Python code with black, and that probably won't surprise too many people,

00:02:10 but they auto-formatted C with that community's equivalent of black, and get ready for the name,

00:02:18 Uncrustify. They uncrustified the C code.

00:02:22 Okay.

00:02:22 Do you know about this?

00:02:23 No, actually, I'm writing it down because I'd like to check this out.

00:02:26 Isn't that great? So you can basically configure how it formats your C code. And it's like black. It's

00:02:30 like, you know, it just runs automatically and fixes your C code. And boy, if you thought Python

00:02:35 code needed some fixing, I'll bet you the C code. And there's more variety in there, right?

00:02:40 Yeah. I've seen some ugly C code in my day.

00:02:43 Yeah, for sure. For sure. Because with the curly braces and semicolons, you have a lot more flexibility

00:02:48 in how you format stuff, whereas Python forces some of that structure upon you.

00:02:53 All right. They also added Blue Kitchen. Apparently Blue Kitchen is a Bluetooth stack. And so they added a

00:03:00 micro Mew Bluetooth module as an alternative to the Nimble stack as well. And there's a Unix port,

00:03:09 and you can build the Unix port with the Bluetooth support for either of these bindings. That's pretty

00:03:14 cool. That comes with new events. So if you're doing like Bluetooth discovery and things like that,

00:03:20 you can like scan for Bluetooth stuff more easily. It also came with a big memory leak fix for ARM

00:03:27 chips, which is big in the small space, ironically. So apparently, there was certain memory that was

00:03:35 not reclaimed by the garbage collector and other types of things. So if you've, you know, and at the

00:03:38 same time on these very small devices, you care a lot about not wasting memory, right? It's not like

00:03:43 you got 32 gigs like my laptop does. So like whatever, right? It's going to matter if you lose memory on

00:03:48 like a little micro Python chip. And also they set it up so you can run parallel tests against multiple

00:03:56 micro Python targets. So I'm guessing like different chips and different devices, you can just say go test

00:04:01 them, run it synchronized across two or more micro Python targets. I don't know if that's to speed it

00:04:07 up or to like, test the whole thing on different platforms in parallel or whatever. But it sounds like a

00:04:12 good improvement. And it does come with a few breaking changes. So people can check that out.

00:04:16 Anyway, if you care about micro Python, and I'm guessing this may make its way over to CircuitPython

00:04:22 as well at some point, knowing that those projects are really close. So anyway, this looks really good

00:04:27 if you're doing big stuff on small things.

00:04:29 Yeah, it's good to see this going forward.

00:04:31 And thanks to Matt Trentini for sharing this and bringing it to our attention.

00:04:35 I wish I was better at remembering names, but somebody I had on testing code brought up

00:04:40 respx and or respix. I should stop. R-E-S-P-X. It's a utility for mocking out the Python HTTPX library.

00:04:49 So that somebody brought that up and I had never heard of it before. So I figured we'd bring it up

00:04:54 here. So with requests, if you want to mock it, there's a whole library called responses and cleverly

00:05:02 named a bit hard to search for. And then with HTTPX, if you want to mock it, there is respx.

00:05:08 I'm going to name it response X, but we just the other part, you just don't write it.

00:05:12 It's like the opposite of a silent E. It's it's not written.

00:05:15 Maybe.

00:05:17 Sorry, keep going. It sounds like a great idea.

00:05:21 Well, interestingly enough, when you write the two imports out, they're the same number of characters.

00:05:25 Maybe that's part of the reason why they did that. Anyway, that quick start is like shows it's really quick.

00:05:32 You just it's a really just a few lines of code to mock out a request response call or response call.

00:05:39 You can do things like things that you would expect, like an assert that something was actually called

00:05:44 and what the status code was and things like that.

00:05:48 But you can also have custom content and you can return JSON content.

00:05:53 of course, there's some examples. What I like is the documentation is pretty nice.

00:05:57 There's some examples on how to use it with both pytest and UnitTest, including how to set up like a mocked API fixture for pytest.

00:06:05 You can have multiple tests using the same mocked endpoint.

00:06:09 And there's a bunch of nice things about it.

00:06:12 Like, for instance, if you want to mock out a whole bunch of different URLs,

00:06:16 you can use some regular expressions to set what URLs you want to catch with that.

00:06:22 and then also the content that you return from your mocked object, your mocked request is you can have a callback that can generate that on the fly based on what you pass in it.

00:06:35 If you have a HTTPX based application, you definitely need to know about this for testing.

00:06:40 Yeah, absolutely.

00:06:41 And one of the things that's challenging about testing the HTTPX is the async stuff, right?

00:06:47 And so this is a really cool way to get in there and just make it work, right?

00:06:52 Yeah.

00:06:52 Just put a decorator there and it just mocks it out for you like you would expect.

00:06:57 Looks very clean.

00:06:58 Yeah, pretty easy.

00:06:59 And there's a lot of magic going on under the hood to make that a clean interface, but I think they did a good job.

00:07:05 Yeah.

00:07:06 So HTTPX comes from sort of an async derivative of requests, which I think is a really fantastic library.

00:07:14 And I've done some cool stuff with HTTPX.

00:07:16 So yeah, I'm a fan of this.

00:07:18 It's great.

00:07:18 Now, before we move on, let's talk about a couple of things that we got going on that people can check out that will definitely help support the show.

00:07:27 And they might find interesting.

00:07:28 I know that you've got some updates for your book.

00:07:31 Is that right?

00:07:32 Yeah.

00:07:32 The Python testing with pytestBook, just a minor, the book itself has a minor update.

00:07:38 So there's, it wasn't a big enough change to change the hardback version, but the ebook will be updated.

00:07:44 I don't think the hardback is going to be updated, but it's a couple lines of code in a couple of code examples in chapter five.

00:07:53 So it's a very minor thing.

00:07:56 But the big difference is the code download.

00:07:59 So we've updated the code download.

00:08:01 So even if you're working with the hardback book or using the old version and don't update the ebook, please redownload the code.

00:08:09 It'll make your learning experience better.

00:08:11 And the main change is that I've pinned the dependencies in the target project or the example project so that everything works better.

00:08:20 Good.

00:08:20 There was a tiny DB is a database that I use in the project.

00:08:25 And it had some incompatible changes.

00:08:28 And instead of trying to update everything to use the new, the new tiny DB, I just pinned it to an old version.

00:08:35 Yeah, that makes sense.

00:08:35 I mean, it's not like you're trying to teach people tiny DB.

00:08:39 You're like, here's a dependency.

00:08:40 We're trying to get around to something.

00:08:42 Yeah.

00:08:42 So that's not important to the content of teaching people how to write tests.

00:08:46 Yeah, that's the problem of creating content.

00:08:49 The world moves on and they're not always compatible with what you did.

00:08:52 How about that?

00:08:53 Yeah.

00:08:53 Over at Talk Python, we've got a whole bunch of stuff coming.

00:08:57 And so what I'd like to encourage people to do is just to go to talkpython.fm or training.talkpython.fm.

00:09:04 And right there you can, at the front of the training site, you can just enter your email.

00:09:08 So if you get a bunch of announcements, because I believe we are working on five or six courses right now are under active development.

00:09:14 We've got all sorts of great stuff.

00:09:16 And rather going through it, just sign up to get notified when those come out.

00:09:18 Very cool.

00:09:19 Indeed, indeed.

00:09:20 So a while ago, I went on this Twitter journey, let's say.

00:09:26 I don't know how to really explain it.

00:09:27 It was like I posted a quick question that led to a ton of feedback.

00:09:32 And then, wow, so many pieces of information and ideas and variations were sent around.

00:09:39 What I was trying to say, like, I'd like a dictionary that contains objects that I can access, say, with different keys.

00:09:45 Like, I'd like to put a bunch of users and access them by ID, but maybe also by email or by city.

00:09:52 And that would come with a bunch.

00:09:52 So it was like this sort of exploration there.

00:09:55 And one of the recommendations that came over sort of around that is like, hey, you should check out this thing called GetPy.

00:10:02 Okay.

00:10:02 I don't know where the name comes from, but it doesn't tell a lot about what it is.

00:10:06 But it's a vectorized Python dictionary and set implementation.

00:10:10 And vectorized as in it matches up perfectly with NumPy and so pandas and all the things that are built upon NumPy to plug straight into them.

00:10:20 So imagine I want to have a dictionary that has data in NumPy, but lets me treat it like a regular Python dictionary or a set and things like that.

00:10:31 So that's what this is.

00:10:33 It basically brings a super high performance Python dictionary and set implementation that automatically integrates into the Python scientific ecosystem, which I think is pretty cool.

00:10:43 Yeah.

00:10:43 Yeah.

00:10:44 And it's built upon this thing called parallel hash map.

00:10:47 So parallel hash map is apparently the current state of the art unordered map set with minimal memory overhead and super fast runtime.

00:10:55 So like a C binding.

00:10:58 And so this is just a Python wrapper on top of the C library.

00:11:02 That's a super fast dictionary and set.

00:11:05 So that's pretty awesome.

00:11:06 And here's another one for you, Brian, for your C++ adventures.

00:11:11 The integration between getpy and parallel hash map is this thing called pybind11.

00:11:18 So pybind11 is a compatibility layer between C++11 and Python.

00:11:25 So if you want to write like modern C++ and then plug it in easily to Python, here you go.

00:11:32 Nice.

00:11:32 Yeah.

00:11:33 So that's pretty cool.

00:11:34 Okay.

00:11:34 There's two classes, GP, so getpy, gp.dict and gp.set.

00:11:39 And they're designed to be basically similar to the standard dictionaries and sets from Python.

00:11:44 But there's a few differences.

00:11:45 So check out the docs.

00:11:46 And then I threw in a quick little example here that has two numpy arrays.

00:11:51 And you can say, here are the keys, here are the values, put them together.

00:11:55 And then you can just access different values.

00:11:58 And it's also typed, which I think is kind of interesting, right?

00:12:01 Like it has like an unsigned 8-bit integer or something like that.

00:12:06 Much like numpy is.

00:12:08 But it's more like a Python array where you specify the numerical type than it is just an unbounded list.

00:12:16 Right.

00:12:17 So there's some interesting stuff going on here.

00:12:18 Does it solve your problem that you were looking for?

00:12:20 No, not at all.

00:12:21 But it's very interesting.

00:12:23 But it's still neat.

00:12:24 Yeah.

00:12:24 Yeah, it's still neat.

00:12:25 Speaking of neat, we already talked about black once, but it's pretty neat.

00:12:28 Let's talk about it again.

00:12:29 Yeah, this was sent in by John Hagen.

00:12:31 And he mentioned that, I mean, I'm pretty sure we've mentioned ISORT before.

00:12:36 I know we've mentioned black.

00:12:37 But a lot of projects use both.

00:12:40 So ISORT will sort your imports so you don't have to.

00:12:45 And then just so they're consistent and they're alphabetically sorted.

00:12:50 And then there's some other.

00:12:51 Right.

00:12:51 And there's PEP 8 recommendations about that, I believe, about like grouping stuff that comes from the library, from standard library versus externals and whatnot.

00:12:58 Yeah.

00:12:59 Yeah.

00:12:59 And so you don't have to think about it.

00:13:00 You can just use ISORT.

00:13:01 Black also is becoming more and more popular, I think.

00:13:05 Or it's just constantly very popular.

00:13:08 Reform, it's all of your code, but it includes the import statements as well.

00:13:12 So there was this issue that some projects wanted to use both ISORT and black.

00:13:17 And there is, and they kind of fight with each other right out of the box.

00:13:22 If you run ISORT, you'll have one answer and black will do something different in some cases.

00:13:28 So what do you do?

00:13:29 Well, there's black had a configuration page, and we'll link to this in the show notes, that has documents what settings you have to set for ISORT so that it's compatible with black.

00:13:40 They also do that for FLAKE 8 and PILINT, which is nice.

00:13:44 But FLAKE 8 and PILINT are not that complicated.

00:13:47 It's the ISORT that's, there's like six settings you have to change.

00:13:50 But ISORT 5 just came out.

00:13:53 And ISORT 5 has what they call profiles.

00:13:56 And so if you run ISORT with Profile Black, black is one of the built-in profiles, it will sort the imports such that they're compatible with black.

00:14:07 Nice.

00:14:08 So now if you use ISORT with the black profile and black, also they won't fight with each other anymore.

00:14:16 That's very cool.

00:14:18 Black also came out with some new changes.

00:14:21 So if you're interested in black, check those out.

00:14:24 They're not huge changes, but some minor fixes.

00:14:27 The profile feature is pretty cool.

00:14:29 And even if you don't care about black, I think you should check it out.

00:14:33 They do, apparently, Django, PyCharm, Google, OpenStack, Clone, Adders, and Hug are other profiles that are included.

00:14:41 And also, they're just good examples so that you can look at how different projects are configuring their ISORT.

00:14:47 You can configure yours if you want.

00:14:49 Yeah, I really like it.

00:14:50 That's super cool.

00:14:52 And it is nice to have the top of your files nice and clean and organized in some certain way.

00:14:59 It's interesting.

00:14:59 There's a lot of people do different linters or code reformatters.

00:15:04 But this combination of ISORT plus black is something that's becoming more and more common in a lot of projects.

00:15:11 Yeah.

00:15:11 Yeah.

00:15:12 Very cool.

00:15:13 So I have something interesting for you.

00:15:15 If you were to think of the influence of Microsoft Excel relative to the influence of, like, all of human genetics and the genome science of the world, and they got into a fight, who would win?

00:15:28 Like a superhero.

00:15:30 You seem like apples and oranges.

00:15:32 I have no idea.

00:15:33 Well, they did get into a fight, and Excel won.

00:15:35 So here's the story.

00:15:36 There's an article that was sent over by Chris Moffitt.

00:15:39 He's the guy who wrote the Moving from Excel to Python and Pandas course over at Talk Python.

00:15:44 So we did a bunch of research into, like, all these funny things and weird things around Excel.

00:15:48 So he sent this one over, and I thought I'd cover it because it's fun.

00:15:51 So on The Verge, there's an article that talks about how scientists have renamed human genes to stop Excel from misreading them as dates.

00:16:00 Okay.

00:16:02 Is that crazy?

00:16:03 Yeah.

00:16:04 Yeah.

00:16:04 So you think it was just, like, formatting and stuff like that.

00:16:08 So there's, like, tens of thousands of genes in the human genome, and each gene is given a name and a numerical code, and then you used to talk about it.

00:16:17 So, like, this one controls, like, what color of hair you have or whatever, right?

00:16:22 So over the past year or so, 27 human genes have been renamed all because Excel kept rereading them as symbols.

00:16:31 They're symbols as dates.

00:16:32 Okay.

00:16:32 Well, the examples are important.

00:16:34 Yeah.

00:16:35 So, like, March 1.

00:16:37 No spaces.

00:16:39 March 1 is one of the genes, right?

00:16:42 But it gets converted to 03 slash 01 slash the year, or if you're in Europe, 01 slash 03 slash the year, right?

00:16:50 Either way, that's not what you wanted.

00:16:52 So March 1 actually stands for membrane-associated ring CH-type finger 1, which, of course, is the first of March.

00:17:03 Now, it sounds funny, and, like, we're making fun of, like, ah, whatever.

00:17:06 There was a study in 2016 that examined the genetic data shared alongside 3,600 published papers and found that one-fifth of them, which, what is that?

00:17:20 That's, like, 700 papers were affected by Excel errors.

00:17:24 Oh, man, yeah.

00:17:25 Isn't that messed up?

00:17:26 So, there's a scientific body in charge of naming genes called Hugo Gene Nomenclature Committee.

00:17:33 Who knew?

00:17:34 There's a committee for naming genes, but apparently.

00:17:36 So, they published new guidelines for naming genes, and they said, you have to consider what happens if you type into Excel.

00:17:43 If it gets reformatted, that's not okay.

00:17:45 Got to pick a new name.

00:17:48 So, they put, like, weird suffixes and stuff on these things to make them work, like, March 1 is now, like, March 1 N1 or something like that.

00:17:55 Anyway, so, why do I bring this up on the Python show?

00:17:57 You know, so much of this work that people are doing there can totally be solved by Pandas and Jupyter Notebook and stuff.

00:18:06 And so, you know, the guy who was quoted in there was like, hey, I made these mistakes when I was in grad school because all I knew how to use was Excel.

00:18:14 So, here's a bit of an example along with a plea to help folks who are overusing Excel to take a step forward and use, you know, something like Pandas and Jupyter.

00:18:28 And, you know, you're going to be able to do a lot more cool processing anyway, which I think is great.

00:18:33 Yeah.

00:18:33 Also, one other thing, if you think that geneticists have an exclusive right to these mistakes, there's a really cool article, blog post over on Oracle's blog, actually, called The 10 Costliest Spreadsheet Boo-Boos in History.

00:18:50 And they're really hilarious.

00:18:52 And, like, thank God this didn't happen to me.

00:18:54 Well, and just, like, awesome stock photo that they have for this, too.

00:18:58 Yeah, it's so bad.

00:19:00 Yeah, it's, like, perfect.

00:19:01 It could just come out of Excel.

00:19:03 Yeah.

00:19:03 Yeah.

00:19:03 So, some of them are fairly mundane, but others, like MI5, the British Intelligence Agency, bugged over 1,000 wrong phone numbers because the 000 and the last three digits of the number got, you know, misstated.

00:19:20 Oh, no.

00:19:21 Yeah.

00:19:21 Yeah.

00:19:21 Yeah.

00:19:21 Yeah.

00:19:22 Or Eastman Kodak was forced to reinstate financial results for two quarters by from 2 million and 13 million respectively due to a spreadsheet mistake.

00:19:33 Yeah, there's just all these crazy examples of stuff just going wrong.

00:19:37 Like, oh, sorry, that was a billion dollar mistake because we were off by some random thing.

00:19:42 Anyway, there's a bunch of errors like this.

00:19:44 And it's really interesting to think how you might use the Python tools to not have these errors.

00:19:48 Yeah.

00:19:49 I think Excel has too much influence over the world.

00:19:52 It does.

00:19:52 But if you were going to use Python and you had a Jupyter Notebook, would you run it in your downloads folder?

00:19:57 No.

00:19:58 No, definitely not.

00:20:01 Yeah, so this is another just kind of an interesting and shocking, wherever you think about it before.

00:20:07 But Glyph has written an article called Never Run Python in Your Downloads Folder.

00:20:12 It's not just about that.

00:20:15 Okay, so there's your advice.

00:20:16 Don't run Python in your downloads folder.

00:20:18 But I think it's a good article to spread around and read because it's a nice short tutorial on how syspath works and how it's populated.

00:20:26 So Python has this thing called syspath that is, that's where it looks up.

00:20:32 So if you say import something or mostly that, where it's importing things, also the dash M or something.

00:20:39 If you say dash M and then some module, where does it find that?

00:20:44 And it finds it in lots of places.

00:20:45 One is the normal system include directory or the system packages.

00:20:51 But there's other places too.

00:20:53 And one of the places where Python uses is the location you're in when you run Python.

00:20:59 So a little example, he talks about a lot of people are now using, instead of running pip directly, they run python-m pip, which I also am including that in my advice usually, because I'm tired of trying to fix people's errors when their Python and their pip are pointing to two different places.

00:21:20 That's frustrating.

00:21:21 So what happens if you run python-m pip install something, some wheel in your downloads directory?

00:21:31 Well, normally, everything's fine.

00:21:34 Except if there's a malicious fake pip.py in your downloads directory that happens to have gotten there because somebody wrote some malicious JavaScript code, stick it there.

00:21:45 It's possible.

00:21:47 I don't know if it would happen, but it's possible.

00:21:49 It's more likely now.

00:21:50 Yeah, especially now.

00:21:52 Thanks, Cliff.

00:21:53 But then it's going to run that instead of the pip that you expect it to run, which is bothersome.

00:21:59 So this is hidden.

00:22:00 There's some extra advice in here.

00:22:02 I encourage everybody to read the whole article.

00:22:04 Understanding how the Python path variable works as well, because sometimes other applications will, and if the installer of an application can change things and change your Python path.

00:22:18 It shouldn't, but sometimes they'll do that out of convenience.

00:22:21 So occasionally look at your Python path and make sure that there's nothing weird in there, and maybe contact application developers or if they're doing something odd.

00:22:32 If you are mucking with Python path, the recommendation is put absolute paths.

00:22:36 Don't put anything relative in there.

00:22:38 You want to be able to have complete control over that.

00:22:41 The problem with the downloads folder is not that the downloads folder has weird permissions or higher permissions or anything of that nature.

00:22:49 It's just that web virus maliciousness might, it's most likely to drop the payload there, and the Python path plus that operation or that aspect is what is likely to lead to trouble.

00:23:03 Yeah.

00:23:03 Right.

00:23:04 Like you wouldn't say don't run it in your documents folder unless you copy virus Python files in there.

00:23:10 Yeah.

00:23:10 And the example was real of like sometimes, like let's say you're behind a firewall or something like that, and pip install just doesn't work, and you haven't figured out how to do proxies yet, and you really just need some package.

00:23:22 You might just download the wheel somewhere.

00:23:24 Okay.

00:23:25 You might have that, and the wheel might be fine, but put it somewhere else.

00:23:29 Don't leave it in your downloads directory.

00:23:31 Put it someplace else.

00:23:32 And please use virtual environments.

00:23:34 That'll help things as well.

00:23:35 Yeah.

00:23:36 Absolutely.

00:23:36 Good advice, and definitely another thing to be aware of.

00:23:40 That internet, it's a scary place.

00:23:42 Yes, but we love it.

00:23:45 It's also a good place.

00:23:46 It goes both ways, because we do love it.

00:23:47 That's it for our main topics, but I do want to share two quick things, and they both have to do with the internet.

00:23:52 Number one is we just passed 5 million downloads, Brian.

00:23:57 Wow.

00:23:57 That's awesome.

00:23:58 That's awesome.

00:23:58 Yeah, and we're in the top 150 or so of all tech podcasts in the world.

00:24:04 So I just want to say thank you, everyone, that's helped to make that happen, because that's kind of a milestone.

00:24:08 So that's really cool.

00:24:09 Yes, thank you.

00:24:10 Indeed.

00:24:10 Also, I recently finally broke down and got a Wi-Fi mesh router.

00:24:17 Routers?

00:24:18 Can you say singular router?

00:24:19 It's got to be plural, right?

00:24:20 So one of those routers where it has a bunch of different stations, and they all work together.

00:24:25 But because of the way it works, you don't actually have to connect to different ones at different places.

00:24:31 It's just all one Wi-Fi.

00:24:32 Okay.

00:24:33 And man, I got this Linksys Wi-Fi 6 mesh router, which is quite pricey, but man, it is so, so awesome.

00:24:42 So if people are suffering from being home all the time, they're like, gosh, I got to get better internet.

00:24:46 My internet was actually pretty good here, but we started getting a ton of radio interference from different sources, and it would degrade it and stuff.

00:24:54 So I have my recording area office above my garage.

00:24:58 It's like a little studio apartment thing we built above the garage, which is a separate building across from the house.

00:25:04 And over here, if I go speed test, I get 400 megabit measured off my Wi-Fi now.

00:25:10 That is solid.

00:25:11 Okay, so how far away are the mesh nodes?

00:25:14 It's probably 50 feet, but it goes through several outside walls, through a couple inside walls.

00:25:21 There's layers it's got to go through.

00:25:23 But now with the mesh, I could put one of the nodes much closer to the wall that I'm close to that spans that gap between houses.

00:25:30 Okay.

00:25:30 And how are they talking to each other?

00:25:32 They have their own channel, and they do some kind of back channel Wi-Fi 6 thing.

00:25:38 So anyway, super good recommendation.

00:25:40 Yes.

00:25:40 How about you?

00:25:41 Any extra stuff you want to share with the world?

00:25:43 No.

00:25:43 Just that I'm sort of sick of it and fires and all that sort of stuff.

00:25:48 Yeah, man.

00:25:49 It's looking a little smoky outside.

00:25:51 And yeah, the whole West Coast.

00:25:53 And my sympathies go out to the folks in Northern California.

00:25:55 I just had a meeting with someone, and oh my gosh, is it smoky there.

00:26:00 It looked like night in the daytime.

00:26:02 In the background, I could see their window, and it was dark, as if they were in a different time zone.

00:26:07 But they weren't.

00:26:08 Not good.

00:26:09 So hopefully that'll end soon.

00:26:12 But before we end this episode, I got a question, Brian, for you.

00:26:17 Are you a real programmer?

00:26:19 Like a real one?

00:26:20 Like a hardcore?

00:26:21 I mean, you do C++, so that puts you a little closer.

00:26:24 Oh my God.

00:26:24 Imposter syndrome flares every time I get that question.

00:26:28 So I don't think so.

00:26:30 Let's go to XKCD and answer it.

00:26:32 Okay?

00:26:32 Okay.

00:26:32 So XKCD has this cartoon called Real Programmers.

00:26:35 And it starts with two people debating about what kind of editor they're using, right?

00:26:42 It says there's somebody working.

00:26:44 They're using Nano, the editor.

00:26:46 And the person, come on, Nano?

00:26:48 For real?

00:26:49 Real programmers use Emacs.

00:26:51 And then Brian walks in.

00:26:53 Hey, real programmers use Vim.

00:26:55 Come on.

00:26:55 Oh yeah, well, real programmers use Ed.

00:26:58 No, no, real programmers use Cat and just stick it on the end.

00:27:01 Real programmers use a magnetized needle in a steady hand.

00:27:05 Excuse me, but real programmers use butterflies.

00:27:09 Everyone turns and looks at the person.

00:27:11 They open their hands and they let the delicate wings flap once.

00:27:15 The disturbance ripples outward, changing the flow of the eddy currents in the upper atmosphere,

00:27:20 which acts as a lens that deflects incoming cosmic rays, focus them to strike the derived platter

00:27:25 and flip the desired bit.

00:27:27 Nice.

00:27:28 Of course, there's an Emacs command to do that.

00:27:31 Oh yeah?

00:27:32 Yeah.

00:27:33 Command X, Command M, Command Butterfly.

00:27:39 Nice.

00:27:39 Yeah.

00:27:40 Yeah, yeah.

00:27:41 CXCMCM Butterfly.

00:27:45 Indeed.

00:27:45 Damn it, Emacs, they say.

00:27:47 Does anybody use Emacs?

00:27:50 Yeah.

00:27:50 Well, I don't know, but I'm not a real programmer because I don't use butterflies.

00:27:53 I'm sorry.

00:27:54 No, I don't use butterflies.

00:27:55 Okay.

00:27:56 Well, we're in the joke section.

00:27:57 I got to share a terrible joke that my wife came up with.

00:28:00 You wait.

00:28:01 Okay.

00:28:01 99 bottles of beer on the wall.

00:28:03 99 bottles of beer.

00:28:04 Take one down.

00:28:05 Pass it around.

00:28:06 Now everybody's infected.

00:28:08 Morons.

00:28:09 Hey, that sounds like college here in the US.

00:28:15 I think that's what they're doing.

00:28:16 I'm going to tell from all the news I'm watching.

00:28:18 Oh my gosh.

00:28:18 Jeez.

00:28:19 Sorry.

00:28:20 Yeah.

00:28:20 These jokes are the 2020 jokes.

00:28:23 Oh yeah.

00:28:23 So this won't make sense in the future.

00:28:25 Yeah.

00:28:26 Yeah.

00:28:26 Yeah.

00:28:26 So in the future, when you speak to a historian and you say, oh, you're a historian.

00:28:32 What do you study?

00:28:33 Oh, I actually study the year 2020.

00:28:37 Like that won't be enough.

00:28:38 You have to say, well, which part do you study?

00:28:40 Like the beginning?

00:28:42 Do you study the financial crash?

00:28:45 Do you study this crazy election?

00:28:47 Do you study the pandemic?

00:28:48 Like you got to be like 20, that year is not enough to say what your specialty is.

00:28:52 You got to pick one.

00:28:53 Pick a quarter.

00:28:54 Yeah.

00:28:55 It's a crazy time, right?

00:28:56 I study the flyers.

00:28:58 Oh boy.

00:28:59 Anyway.

00:28:59 Well, good talking with you as always.

00:29:02 You as well.

00:29:03 Catch you later.

00:29:03 Thank you for listening to Python Bytes.

00:29:05 Follow the show on Twitter via at Python Bytes.

00:29:07 That's Python Bytes as in B-Y-T-E-S.

00:29:10 And get the full show notes at pythonbytes.fm.

00:29:14 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:29:18 We're always on the lookout for sharing something cool.

00:29:20 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:29:24 Thank you for listening and sharing this podcast with your friends and colleagues.

