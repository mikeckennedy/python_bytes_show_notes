
00:00:00.000 --> 00:00:06.800
Hello and welcome to Python Bytes, Python news and headlines delivered directly to your earbuds.


00:00:06.800 --> 00:00:13.440
This time it's episode 29 and we recorded on June 6 2017. I'm Michael Kennedy and I'm Brian Okken


00:00:13.440 --> 00:00:16.880
and we're here to share some really cool stuff that we found with you. But before we do, Brian,


00:00:16.880 --> 00:00:21.840
let's say thanks. Yes, let's. All right. Thank you to Rollbar. So Rollbar sponsoring this show


00:00:21.840 --> 00:00:26.720
as they have many other ones. Rollbar is a great friend and supporter of the show. So be sure to


00:00:26.720 --> 00:00:29.620
to check out what they're offering at rollbar.com/pythonbytes.


00:00:29.620 --> 00:00:31.240
We'll talk about that more later.


00:00:31.240 --> 00:00:33.920
Right now I want to talk about charts and stuff that are responsive.


00:00:33.920 --> 00:00:40.000
There's an article on the full stack Python website by Matt McKay called responsive bar


00:00:40.000 --> 00:00:43.720
charts with Boca, Flask, and Python 3.


00:00:43.720 --> 00:00:49.760
And I thought that was a great excuse to play with it because I've used, what's that other


00:00:49.760 --> 00:00:52.120
one, the other chart thing, Matplotlib.


00:00:52.120 --> 00:00:53.680
I've used Matplotlib a lot.


00:00:53.680 --> 00:00:56.260
I haven't used Boca and I've wanted to,


00:00:56.260 --> 00:00:58.880
and this was a really great walkthrough.


00:00:58.880 --> 00:01:00.880
So I went ahead and went through it,


00:01:00.880 --> 00:01:04.300
and it walks, I did the little tutorial,


00:01:04.300 --> 00:01:07.880
and it walks you through writing a Flask app from the start


00:01:07.880 --> 00:01:10.920
and explains kind of what you're doing.


00:01:10.920 --> 00:01:13.160
Goes through a little bit of the Boca,


00:01:13.160 --> 00:01:15.440
just you're just creating a bar chart,


00:01:15.440 --> 00:01:18.080
and it fills it with random data,


00:01:18.080 --> 00:01:20.760
but it also shows you how to do like tool tips


00:01:20.760 --> 00:01:24.560
and how to fill those in with a function callback.


00:01:24.560 --> 00:01:27.460
And now I've got a little Boca flask app


00:01:27.460 --> 00:01:28.640
running on my laptop.


00:01:28.640 --> 00:01:30.360
- Yeah, that's really cool.


00:01:30.360 --> 00:01:34.000
Yeah, Matt is really good at writing these articles


00:01:34.000 --> 00:01:36.720
that are focused, you know, they're not too short,


00:01:36.720 --> 00:01:38.640
so they're all fluffy, but they're also not like,


00:01:38.640 --> 00:01:39.460
they don't drag on, right?


00:01:39.460 --> 00:01:41.080
You can get down to it pretty quickly.


00:01:41.080 --> 00:01:43.600
- Yeah, and there's a lot of detail missing, I'm sure,


00:01:43.600 --> 00:01:47.160
to really get into it, but having like a top to bottom


00:01:47.160 --> 00:01:49.180
full example running very quickly,


00:01:49.180 --> 00:01:51.520
and then you can dive into playing with different bits


00:01:51.520 --> 00:01:52.440
and pieces of it.


00:01:52.440 --> 00:01:53.600
It was very helpful.


00:01:53.600 --> 00:01:54.440
I liked it.


00:01:54.440 --> 00:01:55.280
- Yeah, it's pretty cool.


00:01:55.280 --> 00:01:58.820
So the way Bokeh works is it kind of integrates


00:01:58.820 --> 00:02:03.060
the Python backend with the visualization


00:02:03.060 --> 00:02:05.620
JavaScript front end and lets you really wire data


00:02:05.620 --> 00:02:08.440
all the way from like your Python app down to JavaScript.


00:02:08.440 --> 00:02:11.160
You don't have to like become a JavaScript developer


00:02:11.160 --> 00:02:13.340
and in an extreme way, which I think is cool.


00:02:13.340 --> 00:02:16.760
- So it's using, I guess it's sort of like a template thing


00:02:16.760 --> 00:02:20.040
to fill out the data that ends up going in


00:02:20.040 --> 00:02:21.600
that JavaScript is drawing.


00:02:21.600 --> 00:02:23.640
So the drawing happens on the JavaScript side,


00:02:23.640 --> 00:02:24.480
is that right?


00:02:24.480 --> 00:02:26.520
- Yeah, which makes it nice and interactive, right?


00:02:26.520 --> 00:02:27.960
As opposed to say, matplotlib,


00:02:27.960 --> 00:02:29.640
which you can generate like a PNG,


00:02:29.640 --> 00:02:31.600
but good luck for hovering over it


00:02:31.600 --> 00:02:33.440
and interacting with it and stuff, right?


00:02:33.440 --> 00:02:34.720
That's what's cool about Bokeh.


00:02:34.720 --> 00:02:35.540
- Yeah.


00:02:35.540 --> 00:02:36.840
We've got an application at work


00:02:36.840 --> 00:02:37.720
where we definitely wanna,


00:02:37.720 --> 00:02:38.920
it's actually similar to this,


00:02:38.920 --> 00:02:42.140
the bugs found over so many days.


00:02:42.140 --> 00:02:45.040
Not exactly this, but similar enough to where


00:02:45.040 --> 00:02:48.980
we need to have a little small application at work


00:02:48.980 --> 00:02:53.280
to generate some data around the test data


00:02:53.280 --> 00:02:56.880
that I'd like to be able to have an interactive chart with.


00:02:56.880 --> 00:02:58.080
- You should definitely check this out.


00:02:58.080 --> 00:02:58.960
Yeah, that'd be really cool.


00:02:58.960 --> 00:03:03.000
And Flask is super simple and it sounds all nice and easy.


00:03:03.000 --> 00:03:04.560
Speaking of nice and easy,


00:03:04.560 --> 00:03:07.240
one of the things people ask for a lot,


00:03:07.240 --> 00:03:09.760
it's easy to get started with say Pyramid or Flask


00:03:09.760 --> 00:03:11.300
or something like that.


00:03:11.300 --> 00:03:12.880
And you get it running and playing around,


00:03:12.880 --> 00:03:13.720
then you're like, all right,


00:03:13.720 --> 00:03:18.740
this on a production server and I want to set up load balancing and scaling and redundancy


00:03:18.740 --> 00:03:22.940
and like SSL and like, oh my god, this is a skill I didn't realize I needed but don't


00:03:22.940 --> 00:03:25.860
have right, it's like huge amounts of work.


00:03:25.860 --> 00:03:30.020
So there's a project that I want to highlight and I don't think we've covered it on the


00:03:30.020 --> 00:03:31.100
show let me know.


00:03:31.100 --> 00:03:35.580
It's called Zappa and the idea is to take AWS Lambda.


00:03:35.580 --> 00:03:36.580
Do you know AWS Lambda?


00:03:36.580 --> 00:03:37.580
Yes.


00:03:37.580 --> 00:03:38.580
Yeah.


00:03:38.580 --> 00:03:43.700
So the idea is AWS Lambda is basically here's a function, a Python function, run it please.


00:03:43.700 --> 00:03:50.820
And then you can set that function to be run on AWS events like hey, this file on s3 changed.


00:03:50.820 --> 00:03:56.740
But there's also something called the API gateway, which lets you map your domain SSL


00:03:56.740 --> 00:04:02.620
certificates, all that URL into a particular function, very much like flask routes or things


00:04:02.620 --> 00:04:03.900
like this.


00:04:03.900 --> 00:04:09.900
So you can kind of set up web endpoints in AWS, right in Lambda.


00:04:09.900 --> 00:04:16.180
So what this is, is these guys built this thing called Zappa, and the subtitle is serverless


00:04:16.180 --> 00:04:22.860
Python web services, which I love the clash within the short name, they're serverless


00:04:22.860 --> 00:04:24.420
services.


00:04:24.420 --> 00:04:32.500
Anyway, what it is, is basically it is a Python WSGI application, which could be Flask, could


00:04:32.500 --> 00:04:36.900
be Pyramid, could be Django, whatever, could be its own thing.


00:04:36.900 --> 00:04:42.100
And you write this normal application that looks like a normal web app, but then you


00:04:42.100 --> 00:04:45.120
can deploy it to AWS Lambda.


00:04:45.120 --> 00:04:51.020
So every request comes in runs in its own little container on Lambda.


00:04:51.020 --> 00:04:52.020
That's pretty wild, right?


00:04:52.020 --> 00:04:53.020
Yeah.


00:04:53.020 --> 00:04:54.020
So what's the deal?


00:04:54.020 --> 00:04:55.020
Like, why is this a good thing?


00:04:55.020 --> 00:04:57.780
There's drawbacks as well, which I'll maybe touch on.


00:04:57.780 --> 00:05:04.580
But Lambda, the way you pay for it is you pay in terms of CPU used, right?


00:05:04.580 --> 00:05:11.120
As opposed to if you get some virtual private server like Ubuntu or something like this,


00:05:11.120 --> 00:05:13.340
that you have to pay for because it's turned on.


00:05:13.340 --> 00:05:15.700
Whereas here you only pay for per request.


00:05:15.700 --> 00:05:21.540
So if you have something that only takes, you know, say 10,000 requests a day, like


00:05:21.540 --> 00:05:24.500
it could be a really small amount of time you're actually paying for.


00:05:24.500 --> 00:05:28.540
Because how long does it take to serve those requests, assuming you know, it's pretty quick


00:05:28.540 --> 00:05:29.540
app.


00:05:29.540 --> 00:05:30.540
I have no idea.


00:05:30.540 --> 00:05:31.540
You're the web guy.


00:05:31.540 --> 00:05:32.540
Exactly.


00:05:32.540 --> 00:05:33.540
But it's pretty cool.


00:05:33.540 --> 00:05:38.140
You know, you can handle a ton of traffic for, you know, just paying for a few milliseconds


00:05:38.140 --> 00:05:39.140
of server time.


00:05:39.140 --> 00:05:40.140
It's pretty cool.


00:05:40.140 --> 00:05:42.580
And you can even do async stuff, which is pretty cool.


00:05:42.580 --> 00:05:47.260
So you can say, they've got an example in there where you can call an API and the API


00:05:47.260 --> 00:05:53.820
can actually kick off another AWS lambda function, but not in its own execution, but in another


00:05:53.820 --> 00:05:54.820
one.


00:05:54.820 --> 00:05:58.740
And if you need like 100 little Docker container type things to run this, like, that's all


00:05:58.740 --> 00:06:01.780
transparent at the lambda side, you don't even care.


00:06:01.780 --> 00:06:03.380
Just say here, go run this.


00:06:03.380 --> 00:06:08.260
so on. So it's a really interesting way to look at building web applications,


00:06:08.260 --> 00:06:12.240
mostly to deploying web applications. Yeah, the example they're deploying is a


00:06:12.240 --> 00:06:17.820
Flask app, by the way. So every endpoint, like in my path, is going to end up


00:06:17.820 --> 00:06:21.860
calling a different function and be a different Lambda server? Yes, and actually


00:06:21.860 --> 00:06:25.860
probably be in its own container that only exists for 40 milliseconds and then


00:06:25.860 --> 00:06:30.500
goes away. So like there's sort of a new instance of the thing created for every


00:06:30.500 --> 00:06:31.500
single request.


00:06:31.500 --> 00:06:32.500
Different, right?


00:06:32.500 --> 00:06:33.500
Very, very different.


00:06:33.500 --> 00:06:37.660
It'd be kind of neat to see an application built like traditionally and then like with


00:06:37.660 --> 00:06:41.060
this and to compare them and see if you can even tell the difference.


00:06:41.060 --> 00:06:42.060
Yeah, it sure would.


00:06:42.060 --> 00:06:46.740
So they actually have not a ton of like really popular ones, but they do have at the bottom


00:06:46.740 --> 00:06:48.500
like a couple of apps.


00:06:48.500 --> 00:06:54.180
And some of them are like the small business registration for Virginia website or something


00:06:54.180 --> 00:06:56.780
like this, like some sort of governmental app.


00:06:56.780 --> 00:07:00.680
And the thing that I've noticed about these is there's just a little bit more latency


00:07:00.680 --> 00:07:02.240
than makes me happy.


00:07:02.240 --> 00:07:08.200
Because every request kind of like starts up the whole web server process.


00:07:08.200 --> 00:07:12.200
And there's a little bit of latency and API gateway and AWS Lambda because it starts up


00:07:12.200 --> 00:07:14.040
a new container, I think.


00:07:14.040 --> 00:07:19.320
And so like, you're sort of guaranteed a baseline of, you know, a couple hundred milliseconds


00:07:19.320 --> 00:07:20.320
response time.


00:07:20.320 --> 00:07:23.560
If I understand this right, maybe it's not that low.


00:07:23.560 --> 00:07:24.560
I'm not sure.


00:07:24.560 --> 00:07:26.100
But yeah, not that high.


00:07:26.100 --> 00:07:32.060
But there's some extra latency that you pay for the way Lambda works here, but it's still


00:07:32.060 --> 00:07:33.060
quite interesting.


00:07:33.060 --> 00:07:36.540
Yeah, actually, I was looking down at some of the bottom and one of the examples was


00:07:36.540 --> 00:07:42.620
like a MailChimp signup utility, a little microservice and that actually that totally


00:07:42.620 --> 00:07:46.900
makes sense to have, like you have a static website, but there's something that's a little


00:07:46.900 --> 00:07:48.700
bit dynamic and has to run.


00:07:48.700 --> 00:07:49.700
Yes.


00:07:49.700 --> 00:07:51.380
Aside, something like that would would make sense.


00:07:51.380 --> 00:07:55.420
Yeah, if you have mostly a static site, you just want a little interactivity, you can


00:07:55.420 --> 00:07:58.860
take that little interactivity and make it an API or make it a separate thing


00:07:58.860 --> 00:08:00.300
that runs. Yeah, it's really cool.


00:08:00.300 --> 00:08:01.340
Yeah, okay, cool.


00:08:01.340 --> 00:08:05.300
All right, speaking of serverless server stuff, what if PyPI wasn't accessible?


00:08:05.300 --> 00:08:11.140
Yeah, exactly. One of the things we covered in episode 24 was the notion


00:08:11.140 --> 00:08:18.340
that of creating your own local package store and kind of doing that with the


00:08:18.340 --> 00:08:23.580
built-in pip. And I was contacted by, and I'm going to forget his name right


00:08:23.580 --> 00:08:29.100
now, sorry, somebody that wrote a little blog post, and actually this is an older


00:08:29.100 --> 00:08:34.560
one about the same topic, called "Using a Local Cache for pip Packages" and the


00:08:34.560 --> 00:08:39.060
reason why I'm highlighting it today is that it, I like that it's a couple


00:08:39.060 --> 00:08:42.820
aliases that didn't occur to me before. So it's it's pretty much the same thing


00:08:42.820 --> 00:08:48.220
using pip install --download to download packages into a specific place,


00:08:48.220 --> 00:08:54.220
and then how to install locally, but aliasing them to a couple names, one


00:08:54.220 --> 00:08:57.700
called pipcache and one called pip install. Of course you can call them


00:08:57.700 --> 00:09:02.340
whatever you want. Actually that's a pretty clever and I probably will just


00:09:02.340 --> 00:09:06.820
take his names because I'll remember it. And anyway... Exactly, he's already written


00:09:06.820 --> 00:09:11.020
the documentation. Yeah. It is a cool idea like you can basically say pip install


00:09:11.020 --> 00:09:16.500
--download some location and then when you want to actually install from


00:09:16.500 --> 00:09:19.860
you can say pip install --noindex --find,


00:09:19.860 --> 00:09:20.900
and you give it this link,


00:09:20.900 --> 00:09:22.900
and it's a complete pain to remember that stuff.


00:09:22.900 --> 00:09:24.740
But if you just type pip cache,


00:09:24.740 --> 00:09:26.440
as if you had typed pip install,


00:09:26.440 --> 00:09:29.780
and pip install as if you had typed pip install,


00:09:29.780 --> 00:09:32.180
and instead it goes out of this local directory,


00:09:32.180 --> 00:09:33.080
that's pretty awesome.


00:09:33.080 --> 00:09:34.580
Yeah, and like you said,


00:09:34.580 --> 00:09:37.080
or we were talking about before the show,


00:09:37.080 --> 00:09:38.280
it'd need to just take,


00:09:38.280 --> 00:09:40.080
if you had a whole bunch that you knew of,


00:09:40.080 --> 00:09:41.280
like you're teaching a class,


00:09:41.280 --> 00:09:44.380
or you're going to get on a plane or something,


00:09:44.380 --> 00:09:49.100
You wanted to grab a bunch of stuff to work with just having something like that.


00:09:49.100 --> 00:09:53.260
And he does highlight also this works fine for a requirements.txt file.


00:09:53.260 --> 00:09:57.420
So you could just have a big requirements.txt file and write them all.


00:09:57.420 --> 00:09:58.420
Yeah, that's cool.


00:09:58.420 --> 00:09:59.420
pip cache -r requirements.txt.


00:09:59.420 --> 00:10:01.420
Boom, you've got them all.


00:10:01.420 --> 00:10:02.660
Yeah, I think that's really cool.


00:10:02.660 --> 00:10:06.580
And like my idea was, it would be great if you could say there's somehow tie this together


00:10:06.580 --> 00:10:11.100
with a data source that says here's the top 500 packages you might ask for.


00:10:11.100 --> 00:10:15.380
So you kind of preload your cache with a bunch of local stuff.


00:10:15.380 --> 00:10:19.420
So very likely if you want requests, if you want beautiful soup, whatever, you just got


00:10:19.420 --> 00:10:20.420
it right.


00:10:20.420 --> 00:10:21.700
I think that would be pretty, pretty sweet.


00:10:21.700 --> 00:10:22.700
Yeah, definitely.


00:10:22.700 --> 00:10:23.700
Yeah, very cool.


00:10:23.700 --> 00:10:24.700
I love this one.


00:10:24.700 --> 00:10:25.700
Thanks.


00:10:25.700 --> 00:10:29.260
It's nice and simple, but you know, you could start using it like today without much effort.


00:10:29.260 --> 00:10:30.260
Yes.


00:10:30.260 --> 00:10:31.260
Right.


00:10:31.260 --> 00:10:32.340
You know what else is not much effort?


00:10:32.340 --> 00:10:34.600
Tracking down errors with Rollbar.


00:10:34.600 --> 00:10:37.700
So Rollbar has been helping me out with my website a lot.


00:10:37.700 --> 00:10:41.380
And actually, it's you know, I've run into like an issue or two here.


00:10:41.380 --> 00:10:45.740
The idea is you basically add just a couple of lines.


00:10:45.740 --> 00:10:48.620
And if you're doing pyramid, you put it in your config file.


00:10:48.620 --> 00:10:52.780
Similarly, with flask or Django, you can add in there and even works with other stuff like


00:10:52.780 --> 00:10:53.780
node j s.


00:10:53.780 --> 00:10:55.940
But I don't do node j s because I don't like it.


00:10:55.940 --> 00:11:01.260
Anyway, for my Python web apps, you can just put in there super easy, and it will actually


00:11:01.260 --> 00:11:05.420
capture all the errors and send them back with details like what was the call stack?


00:11:05.420 --> 00:11:06.700
What were the local variables?


00:11:06.700 --> 00:11:10.320
And they add to this other cool thing that I'm wanting to play with, I haven't got it


00:11:10.320 --> 00:11:12.240
working yet is people tracking.


00:11:12.240 --> 00:11:16.400
So like right now, everyone who listens to the podcast knows if they find a way to crash


00:11:16.400 --> 00:11:18.400
my site, I know about it.


00:11:18.400 --> 00:11:20.040
But I have no idea who did that.


00:11:20.040 --> 00:11:24.600
I have no idea how to like tell them, "Hey, sorry, the thing that broke, you here, you


00:11:24.600 --> 00:11:26.180
could try it, I fixed it."


00:11:26.180 --> 00:11:29.280
So periodically, I'll get emails from people and they say, "Hey, sorry, this didn't work."


00:11:29.280 --> 00:11:30.280
Like, "Yeah, I know.


00:11:30.280 --> 00:11:33.140
I just didn't know how to tell you that I know, I'm working on it."


00:11:33.140 --> 00:11:35.840
So there's a new thing called people tracking that you can actually add, like if you have


00:11:35.840 --> 00:11:39.520
a logged in user, like who caused that error and it'll check that for you as well.


00:11:39.520 --> 00:11:40.520
It's pretty cool.


00:11:40.520 --> 00:11:41.520
So check them out at rollbar.com/pythonbytes.


00:11:41.520 --> 00:11:47.840
The logged in user, that would be very effective for like your courses then, since somebody's


00:11:47.840 --> 00:11:48.840
were...


00:11:48.840 --> 00:11:51.000
Exactly, because they already have to have an account, they're already logged in.


00:11:51.000 --> 00:11:56.560
So if something crashed for like a registered user, then I can actually contact them back


00:11:56.560 --> 00:11:58.720
and say, "Sorry, here's what happened.


00:11:58.720 --> 00:11:59.720
Here's how I fixed it."


00:11:59.720 --> 00:12:00.720
Things like that.


00:12:00.720 --> 00:12:03.920
Especially for something, a service like that, where people are paying for it, being able


00:12:03.920 --> 00:12:06.920
to tell them I saw that you had trouble and I fixed it.


00:12:06.920 --> 00:12:07.920
That's cool.


00:12:07.920 --> 00:12:08.920
That's great.


00:12:08.920 --> 00:12:09.920
Anyway, thanks, Robar.


00:12:09.920 --> 00:12:10.920
Yeah, I think that takes the sting out of it.


00:12:10.920 --> 00:12:12.080
Yeah, thanks, Robar.


00:12:12.080 --> 00:12:14.360
Very much appreciate the support for the show.


00:12:14.360 --> 00:12:15.520
So PyCon was fun, right?


00:12:15.520 --> 00:12:16.680
Oh, it was really fun.


00:12:16.680 --> 00:12:17.680
Yeah.


00:12:17.680 --> 00:12:18.680
Yeah.


00:12:18.680 --> 00:12:20.720
And one of the things that was cool that I mean, all these, there are all these booths


00:12:20.720 --> 00:12:22.120
and people had set up so many things.


00:12:22.120 --> 00:12:23.120
The talks were fun.


00:12:23.120 --> 00:12:24.120
The people I met was fun.


00:12:24.120 --> 00:12:25.120
We're fun.


00:12:25.120 --> 00:12:30.560
I felt a little bit bad that I didn't actually get to escape from my booth very far, our


00:12:30.560 --> 00:12:33.240
booth, because people were excited to come talk to us.


00:12:33.240 --> 00:12:37.920
And that was great, but one of the things I did get to go see was the active Python


00:12:37.920 --> 00:12:39.600
folks.


00:12:39.600 --> 00:12:40.920
And they talked about you a little bit as well.


00:12:40.920 --> 00:12:43.440
So I think that you went over there and saw them, you must have.


00:12:43.440 --> 00:12:48.760
And what they had built is like a simple little game in Python using Pygame.


00:12:48.760 --> 00:12:57.120
And it was like a scroller, like imagine like 1980s, 1990s, like Space Invader type of standard


00:12:57.120 --> 00:12:59.080
2D scroller game.


00:12:59.080 --> 00:13:05.920
But the thing that was cool was they actually used TensorFlow, Kerares, Intel, the math


00:13:05.920 --> 00:13:11.200
kernel library, and ActivePython to actually derive the AI of the game.


00:13:11.200 --> 00:13:12.200
Wow.


00:13:12.200 --> 00:13:13.200
Isn't that cool?


00:13:13.200 --> 00:13:14.200
So you could go over there and they had two screens.


00:13:14.200 --> 00:13:15.680
It was pretty sweet.


00:13:15.680 --> 00:13:20.560
And on one was the game, the Pygame game, scroller thing.


00:13:20.560 --> 00:13:22.160
It's out there in play.


00:13:22.160 --> 00:13:27.080
But on the other was actually the neural network doing like visually doing its thinking while


00:13:27.080 --> 00:13:28.080
it was fighting you.


00:13:28.080 --> 00:13:29.080
pretty cool.


00:13:29.080 --> 00:13:33.620
I thought that was that was pretty trick and basically the AI would figure out when to


00:13:33.620 --> 00:13:36.880
shoot you whether or not to shoot you where to aim things like that and that was all a


00:13:36.880 --> 00:13:38.000
neural network.


00:13:38.000 --> 00:13:41.640
So the guys over there, Peter, sorry, Peter, I don't remember your last name.


00:13:41.640 --> 00:13:47.080
Peter wrote this up with some of the lessons they learned how they basically use Pygame.


00:13:47.080 --> 00:13:51.080
It's going to be open source, they tell me but it's not yet available.


00:13:51.080 --> 00:13:53.280
They're still getting the code ready to be put up on GitHub.


00:13:53.280 --> 00:13:56.920
So maybe if we're lucky, we can link to the GitHub repo.


00:13:56.920 --> 00:14:00.620
But if it's really interesting to you, just send the guy a message on Twitter and I'm


00:14:00.620 --> 00:14:01.620
sure he'll hook you up.


00:14:01.620 --> 00:14:06.000
>> Well, if you have a link to their blog post, I'm sure they'll link it up there, hopefully.


00:14:06.000 --> 00:14:08.080
>> Yeah, I'm sure they'll update it.


00:14:08.080 --> 00:14:14.520
So they had a few lessons learned writing a game that is driven by TensorFlow.


00:14:14.520 --> 00:14:20.120
So they said, choosing the right data to train your network is super important.


00:14:20.120 --> 00:14:25.120
Prepping your data is key and just experiment with the network topology.


00:14:25.120 --> 00:14:30.520
And actually the last thing I talked about, the looking at the neural network think, do


00:14:30.520 --> 00:14:31.520
its magic.


00:14:31.520 --> 00:14:36.000
So visualization is really important for like understanding what it is you built.


00:14:36.000 --> 00:14:37.920
On a side note, yeah, so this is a great thing.


00:14:37.920 --> 00:14:38.920
Check it out.


00:14:38.920 --> 00:14:40.560
Like they've got a pretty detailed write up on it.


00:14:40.560 --> 00:14:44.620
But on a side note, Brian, do you think we're going to get to a place with all this machine


00:14:44.620 --> 00:14:50.860
learning and AI and stuff where the world is powered by programs that nobody understands


00:14:50.860 --> 00:14:51.860
how they work.


00:14:51.860 --> 00:14:54.420
Do you think we're not already there?


00:14:54.420 --> 00:14:56.660
I think we're, that's a great response.


00:14:56.660 --> 00:15:02.020
I think we're there from a complexity and just like there's too much crap and too many


00:15:02.020 --> 00:15:06.940
layers, but theoretically applying effort, you'll be able to go through and like stack


00:15:06.940 --> 00:15:07.940
trace it.


00:15:07.940 --> 00:15:08.940
Right.


00:15:08.940 --> 00:15:11.700
when it's just like a bunch of neural networks


00:15:11.700 --> 00:15:13.820
working in like orchestration.


00:15:13.820 --> 00:15:15.820
Like why did it decide that?


00:15:15.820 --> 00:15:16.820
I don't know.


00:15:16.820 --> 00:15:18.900
It decided that, you know?


00:15:18.900 --> 00:15:19.740
It's crazy.


00:15:19.740 --> 00:15:22.260
- Yeah, I think possibly, but at that point,


00:15:22.260 --> 00:15:24.340
I mean, there's also, I just don't know enough


00:15:24.340 --> 00:15:25.940
about AI and neural networks.


00:15:25.940 --> 00:15:28.100
And so it looks like magic to me.


00:15:28.100 --> 00:15:29.660
Somebody that knows a lot about it


00:15:29.660 --> 00:15:32.260
possibly doesn't look so much like magic


00:15:32.260 --> 00:15:35.900
and it's more obvious how answers could be derived,


00:15:35.900 --> 00:15:36.980
but I don't know.


00:15:36.980 --> 00:15:38.900
- Yeah, the craziest example I can think of


00:15:38.900 --> 00:15:41.700
is where Google got two of their AIs


00:15:41.700 --> 00:15:45.020
to invent an encryption language


00:15:45.020 --> 00:15:48.060
and a third one to try to break the encryption language.


00:15:48.060 --> 00:15:51.160
And the AIs actually invented their own encryption


00:15:51.160 --> 00:15:52.320
that nobody had ever seen.


00:15:52.320 --> 00:15:53.860
And then the other AI would break it,


00:15:53.860 --> 00:15:55.180
then their encryption would get harder


00:15:55.180 --> 00:15:56.980
and it just went on and on like that


00:15:56.980 --> 00:15:58.300
and nobody knows what happened.


00:15:58.300 --> 00:15:59.380
- Yeah, that's pretty cool.


00:15:59.380 --> 00:16:00.920
Yeah, and I think some of those things


00:16:00.920 --> 00:16:02.220
are definitely possible.


00:16:02.220 --> 00:16:03.940
And those are, like you said,


00:16:03.940 --> 00:16:06.540
they're complexity building on complexity.


00:16:06.540 --> 00:16:09.220
But I think this, I just wanna like,


00:16:09.220 --> 00:16:12.300
to me, I don't think there's a fear of a singularity thing.


00:16:12.300 --> 00:16:15.460
I'm kind of a skeptic on the computer's


00:16:15.460 --> 00:16:17.380
gonna take over the world scenario.


00:16:17.380 --> 00:16:19.060
- I'm with you, I'm certainly with you.


00:16:19.060 --> 00:16:21.880
I'm not a skeptic on these types of things


00:16:21.880 --> 00:16:25.180
disrupting careers and jobs in society.


00:16:25.180 --> 00:16:26.100
- Yeah, definitely.


00:16:26.100 --> 00:16:28.820
- I don't think like, we're gonna see Skynet right away.


00:16:28.820 --> 00:16:30.640
- Yeah, hopefully not.


00:16:30.640 --> 00:16:32.940
Or we won't see it coming, right?


00:16:32.940 --> 00:16:33.780
- Exactly.


00:16:33.780 --> 00:16:34.660
What's that noise?


00:16:34.660 --> 00:16:35.900
Oh, wait.


00:16:35.900 --> 00:16:39.060
- Yeah, so speaking of things that you want to try


00:16:39.060 --> 00:16:40.620
to understand with a debugger.


00:16:40.620 --> 00:16:42.580
- Yeah, this is an older article.


00:16:42.580 --> 00:16:45.060
It's from Rafael Pierzina.


00:16:45.060 --> 00:16:48.500
It's Debug Test Failures with PDB.


00:16:48.500 --> 00:16:52.580
And Rafael's works, he does a lot of stuff with pytest


00:16:52.580 --> 00:16:54.500
and that's how I know him.


00:16:54.500 --> 00:16:56.060
He also works with Cookie Cutter.


00:16:56.060 --> 00:16:56.900
- Yeah, he's a busy guy.


00:16:56.900 --> 00:16:59.500
- I'm linking this up because it's pretty clever.


00:16:59.500 --> 00:17:04.500
I had legitimate error in the demo code I use on the book


00:17:04.740 --> 00:17:08.180
And I left it in there because I wanted to be able to use--


00:17:08.180 --> 00:17:11.900
I wanted to show a legitimate error in some code.


00:17:11.900 --> 00:17:14.180
I also show the fixed version, of course.


00:17:14.180 --> 00:17:16.220
I used the debugger to understand what


00:17:16.220 --> 00:17:17.900
was going on with my code.


00:17:17.900 --> 00:17:21.060
And one of the cool things about pytest


00:17:21.060 --> 00:17:24.500
is PDB is not like the best-- I mean,


00:17:24.500 --> 00:17:26.540
I grew up on things like Visual Studio,


00:17:26.540 --> 00:17:29.260
and PDB is definitely not Visual Studio-like.


00:17:29.260 --> 00:17:29.760
But it's--


00:17:29.760 --> 00:17:31.060
It's not exactly the same, no.


00:17:31.060 --> 00:17:31.580
No.


00:17:31.580 --> 00:17:34.500
But you can do quite a bit of powerful things with it.


00:17:34.500 --> 00:17:37.320
and like show different variables


00:17:37.320 --> 00:17:39.880
and show your listing and exactly where it is.


00:17:39.880 --> 00:17:42.700
But often you have to like stick a break point


00:17:42.700 --> 00:17:44.720
in your code in order to use it.


00:17:44.720 --> 00:17:48.880
But pytest has a --pdb option,


00:17:48.880 --> 00:17:51.340
which just sticks you right in the debugger,


00:17:51.340 --> 00:17:52.580
right at the assert.


00:17:52.580 --> 00:17:53.420
- Oh, that's cool.


00:17:53.420 --> 00:17:55.580
- So right where your test failed,


00:17:55.580 --> 00:17:58.260
you'll be right there and you can examine all the variables


00:17:58.260 --> 00:18:01.920
and whatever, even set up an interactive terminal


00:18:01.920 --> 00:18:03.820
with all of the local variables there.


00:18:03.820 --> 00:18:05.180
so you can play with them.


00:18:05.180 --> 00:18:08.100
And that's listed in this page, but there's also


00:18:08.100 --> 00:18:10.720
some of the other features that are great for debugging


00:18:10.720 --> 00:18:15.720
with pytest, like being able to run just the last fails,


00:18:15.720 --> 00:18:17.220
last failures, and things like that


00:18:17.220 --> 00:18:18.380
are listed in this article.


00:18:18.380 --> 00:18:21.140
So I wanted to highlight that from Rafael.


00:18:21.140 --> 00:18:22.460
- Yeah, nice work, Rafael.


00:18:22.460 --> 00:18:24.460
So if you were sitting at home, Brian,


00:18:24.460 --> 00:18:25.300
let me put this in a different way.


00:18:25.300 --> 00:18:27.820
If you were at work and you wanted to know


00:18:27.820 --> 00:18:32.820
if your phone, your Voice over IP, Cisco phone,


00:18:32.900 --> 00:18:35.460
was not working at your house.


00:18:35.460 --> 00:18:36.300
How would you do that?


00:18:36.300 --> 00:18:37.220
Suppose you have one.


00:18:37.220 --> 00:18:41.020
- Amazon Pod or whatever the latest thing is.


00:18:41.020 --> 00:18:45.420
- Your HomePod, your HomePod from Apple.


00:18:45.420 --> 00:18:46.580
You would say something like,


00:18:46.580 --> 00:18:48.460
hey HomePod, is my phone working?


00:18:48.460 --> 00:18:49.540
And it would say,


00:18:49.540 --> 00:18:51.380
here's what I found on the internet for you.


00:18:51.380 --> 00:18:53.540
Oh my gosh, hopefully that thing works someday.


00:18:53.540 --> 00:18:56.840
Anyway, there's a really cool article


00:18:56.840 --> 00:19:01.180
called Monitoring My VoIP Provider with Home Assistant.


00:19:01.180 --> 00:19:02.580
So I wanted to bring this up


00:19:02.580 --> 00:19:06.020
not because the programming is super intense or anything, but it's just like, here's a


00:19:06.020 --> 00:19:08.300
little fun thing that you can do without a lot of work.


00:19:08.300 --> 00:19:17.100
So this guy has a Cisco ATA sort of home voice over IP phone with two lines.


00:19:17.100 --> 00:19:21.500
And his home is set up with home automation in a automated bunch of things using something


00:19:21.500 --> 00:19:24.540
called home assistant, home dash assistant.io.


00:19:24.540 --> 00:19:25.540
Have you seen this thing?


00:19:25.540 --> 00:19:26.540
I think we talked about it before.


00:19:26.540 --> 00:19:27.540
Yeah.


00:19:27.540 --> 00:19:34.580
a full on Python central hub for your home, which is really cool.


00:19:34.580 --> 00:19:39.780
And so what he did was he plugged in some new code wrote some new modules for home assistant


00:19:39.780 --> 00:19:46.460
that would look at his Cisco phone, and then watch it and let him know if it ever went


00:19:46.460 --> 00:19:48.660
down for whatever reason.


00:19:48.660 --> 00:19:54.760
And he's got a new open source package, pi Cisco, PA, I guess I'm not sure the PA stands


00:19:54.760 --> 00:19:57.640
for and you can use that now if you want to.


00:19:57.640 --> 00:20:02.600
But it also does cool like push notifications to your mobile phone, right, which is pretty


00:20:02.600 --> 00:20:03.600
cool.


00:20:03.600 --> 00:20:07.400
So it's not so much that I think people necessarily need to monitor their home phone because I


00:20:07.400 --> 00:20:09.360
don't know about you, but I don't even have a home phone.


00:20:09.360 --> 00:20:11.840
I have a lot of phones in my home, but they're not home phone.


00:20:11.840 --> 00:20:14.660
They all go when people take them.


00:20:14.660 --> 00:20:19.120
But this sort of integration story of here's a thing, it wasn't integrated with Home Assistant,


00:20:19.120 --> 00:20:21.360
here's a little bit of Python code and magic happens.


00:20:21.360 --> 00:20:22.920
And that's really what I wanted to cover here.


00:20:22.920 --> 00:20:24.280
That's pretty nice.


00:20:24.280 --> 00:20:29.460
And actually I'm about to get a home phone so I might be able to use this.


00:20:29.460 --> 00:20:31.440
You will totally know if it goes offline.


00:20:31.440 --> 00:20:36.900
Yeah, so it looks like the SPA is based on because it's an SPA ATA device.


00:20:36.900 --> 00:20:38.400
So whatever that means.


00:20:38.400 --> 00:20:39.400
Yeah, Cisco SPA.


00:20:39.400 --> 00:20:41.840
Yeah, it's a whatever the hardware is.


00:20:41.840 --> 00:20:42.840
Okay, cool.


00:20:42.840 --> 00:20:45.080
So yeah, that's a fun little thing.


00:20:45.080 --> 00:20:48.920
It shows you how to basically extend Home Assistant, which if I had a smart home, I


00:20:48.920 --> 00:20:50.780
would be doing all sorts of stuff.


00:20:50.780 --> 00:20:53.980
Or I'll just get a HomePod and just ask it questions and it can tell me to go look on


00:20:53.980 --> 00:20:54.980
the internet.


00:20:54.980 --> 00:20:56.300
Yeah, but I wouldn't be home to ask it though.


00:20:56.300 --> 00:20:58.180
So you need to have two, I guess.


00:20:58.180 --> 00:21:03.620
Like HomePod, ask my HomePod at home.


00:21:03.620 --> 00:21:05.620
Mobile HomePod, ask home HomePod.


00:21:05.620 --> 00:21:10.020
All right, man, how's the book?


00:21:10.020 --> 00:21:11.340
Are you still working on it?


00:21:11.340 --> 00:21:12.340
Yeah.


00:21:12.340 --> 00:21:13.500
Is it beta or is it like published?


00:21:13.500 --> 00:21:14.500
It's been up.


00:21:14.500 --> 00:21:18.380
We've had a lot of sales so far and a lot of feedback.


00:21:18.380 --> 00:21:24.180
I'm really glad that people are reading it and nobody's finding things too bad with it so far.


00:21:24.180 --> 00:21:25.880
A couple of typos here and there.


00:21:25.880 --> 00:21:29.380
The chapter on configuration is coming out next week.


00:21:29.380 --> 00:21:31.780
And so we're doing the beta is out.


00:21:31.780 --> 00:21:37.580
It was out right before PyCon and we're doing a chapter every couple weeks,


00:21:37.580 --> 00:21:40.580
but there's only a couple chapters left and it'll be done.


00:21:40.580 --> 00:21:41.280
So that's cool.


00:21:41.280 --> 00:21:42.980
It must feel great to be wrapping that up.


00:21:42.980 --> 00:21:43.880
Yeah, definitely.


00:21:43.880 --> 00:21:46.380
And having some early sales is good.


00:21:46.380 --> 00:21:47.880
It's good motivator to finish it.


00:21:47.880 --> 00:21:48.720
- Very, very good.


00:21:48.720 --> 00:21:51.500
Well, I'm just on a podcast recording


00:21:51.500 --> 00:21:53.460
and course recording bender.


00:21:53.460 --> 00:21:55.900
Like I've recorded almost two months worth


00:21:55.900 --> 00:21:58.640
of Talk Python episodes in the last week and a half,


00:21:58.640 --> 00:22:00.940
and I'm getting the next month the rest of this week.


00:22:00.940 --> 00:22:03.940
So things are gonna be all laid out for the summer


00:22:03.940 --> 00:22:05.660
and there's a ton of exciting things coming,


00:22:05.660 --> 00:22:08.380
including some stuff on serverless AWS Lambda.


00:22:08.380 --> 00:22:09.220
- Oh really, neat.


00:22:09.220 --> 00:22:10.040
- Yeah, yeah, it'll be cool.


00:22:10.040 --> 00:22:12.280
- You're gonna probably try to get me to record


00:22:12.280 --> 00:22:15.380
like 18 episodes ahead of time on this or something,


00:22:15.380 --> 00:22:17.260
and I don't know how that's gonna work


00:22:17.260 --> 00:22:18.900
being that it's news.


00:22:18.900 --> 00:22:22.380
- Well, we're gonna use our AI and our machine learning


00:22:22.380 --> 00:22:24.620
to predict the future, and then we'll totally knock it out.


00:22:24.620 --> 00:22:25.460
It's gonna be awesome.


00:22:25.460 --> 00:22:27.580
- Hey, can we get like AIs to mimic our voices


00:22:27.580 --> 00:22:29.540
and then we don't even have to do the podcast anymore?


00:22:29.540 --> 00:22:31.700
- Yeah, it can just like give us the cleft nose later.


00:22:31.700 --> 00:22:32.540
That'd be great.


00:22:32.540 --> 00:22:33.900
- Yeah, no, probably not.


00:22:33.900 --> 00:22:36.060
- All right, until then, everybody,


00:22:36.060 --> 00:22:36.900
thank you for listening.


00:22:36.900 --> 00:22:38.180
Brian, thanks for sharing all the news, man.


00:22:38.180 --> 00:22:39.680
- Thank you.


00:22:39.680 --> 00:22:41.420
- Thank you for listening to Python Bytes.


00:22:41.420 --> 00:22:43.940
Follow the show on Twitter via @PythonBytes.


00:22:43.940 --> 00:22:47.140
That's Python Bytes as in B-Y-T-E-S.


00:22:47.140 --> 00:22:50.540
and get the full show notes at pythonbytes.fm.


00:22:50.540 --> 00:22:52.140
If you have a news item you want featured,


00:22:52.140 --> 00:22:54.620
just visit pythonbytes.fm and send it our way.


00:22:54.620 --> 00:22:57.760
We're always on the lookout for sharing something cool.


00:22:57.760 --> 00:22:59.620
On behalf of myself and Brian Aukin,


00:22:59.620 --> 00:23:01.120
this is Michael Kennedy.


00:23:01.120 --> 00:23:03.140
Thank you for listening and sharing this podcast


00:23:03.140 --> 00:23:04.780
with your friends and colleagues.

