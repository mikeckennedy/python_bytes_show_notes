
00:00:00.000 --> 00:00:05.500
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.500 --> 00:00:10.000
This is episode 121, recorded March 13th, 2019.


00:00:10.000 --> 00:00:10.800
I'm Michael Kennedy.


00:00:10.800 --> 00:00:11.500
And I'm Brian Okken.


00:00:11.500 --> 00:00:13.500
And this episode is brought to you by Datadog.


00:00:13.500 --> 00:00:16.200
Check them out at pythonbytes.fm/datadog.


00:00:16.200 --> 00:00:17.200
More on that later.


00:00:17.200 --> 00:00:18.300
Brian, how you been?


00:00:18.300 --> 00:00:22.600
I'm... well, actually I had a rough week last week, but I think I'm getting back to it.


00:00:22.600 --> 00:00:24.000
What, did you get in a fight with a dentist?


00:00:24.000 --> 00:00:28.400
Yeah, I went to like two dentists and two doctors just to fix one tooth.


00:00:28.400 --> 00:00:29.900
But yeah, it's all done now.


00:00:29.900 --> 00:00:32.900
- Well, glad to hear you're doing better at least.


00:00:32.900 --> 00:00:34.980
You know, I would say the future is looking bright.


00:00:34.980 --> 00:00:35.820
What do you think?


00:00:35.820 --> 00:00:38.180
- Yeah, especially with Python 3 coming everywhere.


00:00:38.180 --> 00:00:39.380
- Yeah, absolutely.


00:00:39.380 --> 00:00:40.660
All right, so what's your first item here?


00:00:40.660 --> 00:00:43.160
- Well, the first item is, oh yeah,


00:00:43.160 --> 00:00:45.820
you were doing like a whole transition thing.


00:00:45.820 --> 00:00:47.900
So yeah, I get it now.


00:00:47.900 --> 00:00:50.180
Futurize and auto-futurize.


00:00:50.180 --> 00:00:55.180
So, Futurize is, there's a website called pythonfuture.org,


00:00:55.180 --> 00:00:57.780
and they have this thing called Futurize


00:00:57.780 --> 00:00:59.940
that you can turn it on in stages.


00:00:59.940 --> 00:01:02.460
So it has a whole bunch of different modular switches.


00:01:02.460 --> 00:01:05.380
And the idea is to automate your conversion


00:01:05.380 --> 00:01:06.860
from Python 2 to Python 3.


00:01:06.860 --> 00:01:08.780
- So like one thing you can do is like


00:01:08.780 --> 00:01:11.060
fix the print statement, but nothing else,


00:01:11.060 --> 00:01:11.900
things like that?


00:01:11.900 --> 00:01:12.780
Is that the idea? - Yeah.


00:01:12.780 --> 00:01:13.900
There's a whole bunch of different


00:01:13.900 --> 00:01:15.900
little modular things you can do.


00:01:15.900 --> 00:01:18.020
And I don't, I actually didn't dig into it enough


00:01:18.020 --> 00:01:20.980
to know if you can really, really go really small


00:01:20.980 --> 00:01:23.500
and granular and only change a few things at once.


00:01:23.500 --> 00:01:26.600
But one of the things they do have is a staged conversion.


00:01:26.600 --> 00:01:31.820
So they have split up a bunch of their stuff into relatively safe fixes.


00:01:31.820 --> 00:01:36.320
Things like changing the exception syntax using print function.


00:01:36.320 --> 00:01:38.580
So the print function is easy to change.


00:01:38.580 --> 00:01:42.020
Making sure that your classes have an object-based class.


00:01:42.020 --> 00:01:47.020
And apparently the iterator syntax changed, but I didn't realize that.


00:01:47.020 --> 00:01:50.300
And a handful of other things that are really safe to just change.


00:01:50.300 --> 00:01:53.700
So there's a stage one that just changes all that stuff.


00:01:53.700 --> 00:01:59.380
and then the stage 2 where there's some more risky items possibly


00:01:59.380 --> 00:02:05.100
they do more, kind of wrap some of the Python 2 style stuff with Python 3 style code


00:02:05.100 --> 00:02:11.540
and you know of course all of this would only be for large projects because small projects, just go do it yourself man


00:02:11.540 --> 00:02:15.100
anyway, if you're going to try to do all these modular things


00:02:15.100 --> 00:02:19.580
it'd be kind of neat if you could test between hand and save all your changes


00:02:19.580 --> 00:02:26.860
Timothy Hopper put together something called auto-futurize that is a shell script that uses


00:02:26.860 --> 00:02:32.940
git to save all your changes and then talks to run your is assuming you're using talks to check


00:02:32.940 --> 00:02:40.300
your code and it it goes and go ahead because it does all of these changes to your code and


00:02:40.300 --> 00:02:46.060
test it in between and if it does a little bit of a change and your tests pass it does the rest of


00:02:46.060 --> 00:02:48.380
and then it doesn't check in things that don't work.


00:02:48.380 --> 00:02:52.260
So this is kind of fun and it'd be fun to try on a project.


00:02:52.260 --> 00:02:53.820
- Yeah, I like the idea of both of these.


00:02:53.820 --> 00:02:56.460
I can totally envision some high paid consultants


00:02:56.460 --> 00:03:00.220
sitting down to do the Python 2 conversion


00:03:00.220 --> 00:03:02.500
for the companies that put their head in the sand


00:03:02.500 --> 00:03:05.900
until January and then they come in


00:03:05.900 --> 00:03:08.100
and they just run this for the morning,


00:03:08.100 --> 00:03:10.940
go have a long lunch, come back.


00:03:10.940 --> 00:03:13.900
Everyone will be super happy how quickly they did it


00:03:13.900 --> 00:03:15.180
and it'll be great.


00:03:15.180 --> 00:03:16.700
The machine will do all the conversion.


00:03:16.700 --> 00:03:18.640
- Yeah, there'll be like two files


00:03:18.640 --> 00:03:20.700
that they have to hand edit to fix.


00:03:20.700 --> 00:03:21.980
- Exactly.


00:03:21.980 --> 00:03:22.900
It's gonna take a few weeks,


00:03:22.900 --> 00:03:24.020
but we'll see if we can get it done


00:03:24.020 --> 00:03:25.300
without too much of a problem.


00:03:25.300 --> 00:03:26.300
(laughing)


00:03:26.300 --> 00:03:28.180
- Hey, that's a new business idea.


00:03:28.180 --> 00:03:30.220
Maybe I should start another side business.


00:03:30.220 --> 00:03:33.140
- It's a little shady, but you know, it's all right.


00:03:33.140 --> 00:03:36.060
- So thanks, Tim, for Christmas money for next year.


00:03:36.060 --> 00:03:36.900
- Yeah, thank you, Tim.


00:03:36.900 --> 00:03:38.820
And that's a cool, actually, in all seriousness,


00:03:38.820 --> 00:03:39.660
it's a cool project,


00:03:39.660 --> 00:03:41.100
and I think it's gonna help a lot of folks.


00:03:41.100 --> 00:03:42.220
Speaking of helping folks,


00:03:42.220 --> 00:03:44.280
Anthony Shaw, he's putting a lot of content out there


00:03:44.280 --> 00:03:45.520
for everyone.


00:03:45.520 --> 00:03:47.640
And the reason we talk about him so often


00:03:47.640 --> 00:03:51.240
is often he's doing some kind of blog post,


00:03:51.240 --> 00:03:53.280
or he's written some kind of cool article.


00:03:53.280 --> 00:03:57.600
And he went kind of meta recently and did a live stream,


00:03:57.600 --> 00:03:58.920
I think it was on YouTube,


00:03:58.920 --> 00:04:01.680
of how he goes about writing these posts,


00:04:01.680 --> 00:04:02.520
how he does research,


00:04:02.520 --> 00:04:04.440
how he thinks about the different formats,


00:04:04.440 --> 00:04:05.280
all that kind of stuff.


00:04:05.280 --> 00:04:08.120
- Yeah, so I was just, it's still on my to-do list to watch.


00:04:08.120 --> 00:04:09.440
So you watched it and it was pretty good?


00:04:09.440 --> 00:04:10.920
- I watched, yeah, about 20 minutes of it.


00:04:10.920 --> 00:04:12.260
I didn't have a chance to watch the whole thing,


00:04:12.260 --> 00:04:14.100
but it was good.


00:04:14.100 --> 00:04:16.500
Him just writing a post and you just watch him write it.


00:04:16.500 --> 00:04:17.860
He goes through and talks about


00:04:17.860 --> 00:04:19.640
the different posts he's written,


00:04:19.640 --> 00:04:21.900
some of the trade-offs and how he works


00:04:21.900 --> 00:04:22.800
and things like that.


00:04:22.800 --> 00:04:24.740
So he talks about one of his posts


00:04:24.740 --> 00:04:27.040
called "Modifying the Python Language in Six Minutes,"


00:04:27.040 --> 00:04:29.800
which is like a deep code-focused article.


00:04:29.800 --> 00:04:31.440
He talks about listicles.


00:04:31.440 --> 00:04:33.820
And so he talks about five easy coding projects


00:04:33.820 --> 00:04:35.380
he did with kids he did.


00:04:35.380 --> 00:04:37.220
He talks about what is popular


00:04:37.220 --> 00:04:38.820
and why those are popular,


00:04:38.820 --> 00:04:40.380
which is pretty interesting.


00:04:40.380 --> 00:04:42.920
He says one type of article he likes to write


00:04:42.920 --> 00:04:44.100
is like question articles.


00:04:44.100 --> 00:04:46.000
So why is Python slow, for example,


00:04:46.000 --> 00:04:48.260
and of course to disprove that or whatever.


00:04:48.260 --> 00:04:49.600
And then also the tourist,


00:04:49.600 --> 00:04:51.100
like I'm gonna take you on a tour or something.


00:04:51.100 --> 00:04:53.280
So tourist guide to the CPython source code.


00:04:53.280 --> 00:04:55.460
So if you're looking to up your writing game


00:04:55.460 --> 00:04:57.200
or get inspired, if you sit down and you're like,


00:04:57.200 --> 00:04:58.920
oh, I gotta write about something, what am I gonna do?


00:04:58.920 --> 00:05:00.260
Well, here's a bunch of ideas like,


00:05:00.260 --> 00:05:01.240
do I wanna write a listicle?


00:05:01.240 --> 00:05:02.340
Do I wanna write a tour?


00:05:02.340 --> 00:05:03.500
Do I wanna write a question?


00:05:03.500 --> 00:05:05.480
And so it really helps focus the mind


00:05:05.480 --> 00:05:06.320
and get you going, I think.


00:05:06.320 --> 00:05:08.020
- Yeah, definitely gonna check this out


00:05:08.020 --> 00:05:09.500
'cause he's pretty much crushing it


00:05:09.500 --> 00:05:12.660
and I'd like to kind of learn from that technique.


00:05:12.660 --> 00:05:14.460
- Yeah, very well done.


00:05:14.460 --> 00:05:15.820
Nice job, Anthony.


00:05:15.820 --> 00:05:18.980
I feel like you've chosen a very controversial topic


00:05:18.980 --> 00:05:20.160
for the next one.


00:05:20.160 --> 00:05:22.780
Not so much, but pretty interesting.


00:05:22.780 --> 00:05:24.420
- Yeah, I guess I just totally forgot


00:05:24.420 --> 00:05:25.780
that it was controversial.


00:05:25.780 --> 00:05:28.440
And I know it was like big thing at the time,


00:05:28.440 --> 00:05:32.140
but it's the walrus operator or PEPS 572.


00:05:32.140 --> 00:05:34.220
And I kind of love the walrus operator


00:05:34.220 --> 00:05:39.220
because it's the what, semicolon with the equal sign.


00:05:39.220 --> 00:05:45.020
and it's basically an excitement expression that's coming in Python 3.8.


00:05:45.020 --> 00:05:48.120
It's kind of hard to describe on audio, but it's a...


00:05:48.120 --> 00:05:50.520
So a lot of times if you were to say,


00:05:50.520 --> 00:05:56.420
I do a lot with dictionaries or if I'm looking into some database or something, I want to find out


00:05:56.420 --> 00:05:59.820
if an element is there, and if it is there, I want the value.


00:05:59.820 --> 00:06:01.820
And it's always this two-stage thing,


00:06:01.820 --> 00:06:06.920
and it'd be great, and pattern matching is another one, regular expressions. If there is a match,


00:06:06.920 --> 00:06:17.620
then search for it and get the stuff otherwise don't do something and being able to do this is one assignment expression is going to help out quite a bit anyway


00:06:17.620 --> 00:06:23.160
you can play with it now so that that's the whole point of this is alexander holder holder yes


00:06:23.160 --> 00:06:28.880
Wrote an article saying that now that the alphas some of the alpha releases for Python 3 8 are out


00:06:28.880 --> 00:06:31.340
You can try these out and he wrote a post


00:06:31.340 --> 00:06:37.580
demonstrating exactly what I was talking about getting elements out of a dick iterating through dictionaries and


00:06:37.580 --> 00:06:44.120
grabbing keys out of their elements if they if they exist he used pie e and V and


00:06:44.120 --> 00:06:50.400
To grab the new releases. I don't know why but I'm just one that I like to just download this stuff


00:06:50.400 --> 00:06:55.360
So I've added the links to the two, three, eight alphas available so far.


00:06:55.360 --> 00:06:57.360
People want to try it out.


00:06:57.360 --> 00:07:00.760
Yeah, the one that I really like here is the list expression,


00:07:00.760 --> 00:07:04.240
which could be a generator or it could be set expression or whatever,


00:07:04.240 --> 00:07:08.440
but a list comprehension because those have to be one line.


00:07:08.440 --> 00:07:12.080
And if you want to assign a variable and then test it and do other stuff with it,


00:07:12.080 --> 00:07:15.360
you can't really do that.


00:07:15.360 --> 00:07:19.160
And without the walrus operator, if you're going to like apply like a function


00:07:19.160 --> 00:07:23.640
to the elements that you're looping over and then you want to use those, you have to basically


00:07:23.640 --> 00:07:29.480
get access or compute that twice for each element and the walrus lets you do it all in one. So these


00:07:29.480 --> 00:07:34.440
little expressions are kind of like the lambda has the you know the colon and then the body type of


00:07:34.440 --> 00:07:38.520
syntax. It's a little bit like that kind of in line and that definitely seems nice to me. Yeah


00:07:38.520 --> 00:07:43.720
that's a pretty cool use. I hadn't really seen that before this article. I guess I didn't pay


00:07:43.720 --> 00:07:49.080
much attention but using it as a in a comprehension is pretty cool. Yeah cool yeah also you're


00:07:49.080 --> 00:07:52.080
little nested for loop if test.


00:07:52.080 --> 00:07:53.080
It's pretty nice.


00:07:53.080 --> 00:07:56.080
You know, I guess I'm coming around to the walrus operator, honestly.


00:07:56.080 --> 00:07:59.080
Yeah, I mean, once I start using 3.8, I'll be using it all the time.


00:07:59.080 --> 00:08:02.080
It'll be like using f strings, I think, to say,


00:08:02.080 --> 00:08:06.080
"Okay, well, now it's 3.8 and above because I don't want to use anything else."


00:08:06.080 --> 00:08:08.080
I'm not there yet, but...


00:08:08.080 --> 00:08:09.080
Awesome.


00:08:09.080 --> 00:08:12.080
All right, well, before we get on to the next one,


00:08:12.080 --> 00:08:15.080
which I'm pretty thrilled about because it's simple and amazing,


00:08:15.080 --> 00:08:17.080
I just want to tell you quickly about Datadog.


00:08:17.080 --> 00:08:18.640
So they're sponsoring this episode.


00:08:18.640 --> 00:08:21.640
Of course, Datadog is a monitoring and analytics service


00:08:21.640 --> 00:08:23.480
that brings all your metrics and logs


00:08:23.480 --> 00:08:25.480
and distributed traces together.


00:08:25.480 --> 00:08:28.640
And their client automatically instruments


00:08:28.640 --> 00:08:32.040
things like async host libraries, such as async I/O


00:08:32.040 --> 00:08:34.040
and popular frameworks like Django or Tornado


00:08:34.040 --> 00:08:36.360
to help you visualize your performance.


00:08:36.360 --> 00:08:37.480
If you want to trace your requests


00:08:37.480 --> 00:08:39.080
across service boundaries and figure out


00:08:39.080 --> 00:08:41.000
where your app is slow or find errors,


00:08:41.000 --> 00:08:43.480
you know, go over to pythonbytes.fm/datadog.


00:08:43.480 --> 00:08:44.920
Got a cool free trial there


00:08:44.920 --> 00:08:47.820
and you get a nice little Datadog t-shirt too.


00:08:47.820 --> 00:08:50.560
So check them out, it helps support the show.


00:08:50.560 --> 00:08:53.200
Now, to the awesome thing.


00:08:53.200 --> 00:08:56.360
We talked about Qlik and we talked recently about argpars


00:08:56.360 --> 00:09:00.000
and other cool ways to build command line applications.


00:09:00.000 --> 00:09:03.140
And there's of course the tried and true input.


00:09:03.140 --> 00:09:07.120
You got input, what is your question?


00:09:07.120 --> 00:09:10.160
And you set the value and then you maybe have to test it,


00:09:10.160 --> 00:09:11.280
see whether it's an integer.


00:09:11.280 --> 00:09:13.400
And then if there's an error, you say, no, there's an error.


00:09:13.400 --> 00:09:15.160
you can't say that, you gotta say an integer,


00:09:15.160 --> 00:09:16.840
and there's all these challenges, right?


00:09:16.840 --> 00:09:19.060
So maybe I've got a list of things I'd like them


00:09:19.060 --> 00:09:21.520
to pick from, like what kind of,


00:09:21.520 --> 00:09:23.680
maybe you're building a site and like through a generator,


00:09:23.680 --> 00:09:25.260
it says, well, what kind of data backend do you want?


00:09:25.260 --> 00:09:27.000
I want Django ORM, I want SQLAlchemy,


00:09:27.000 --> 00:09:29.280
I want raw SQLite, whatever.


00:09:29.280 --> 00:09:30.380
You might give them a list and say,


00:09:30.380 --> 00:09:32.840
well, pick one, two, three, or four, right?


00:09:32.840 --> 00:09:34.100
Which box do you want?


00:09:34.100 --> 00:09:35.920
Well, with Bullet, have you seen Bullet?


00:09:35.920 --> 00:09:38.240
- I'm just looking at it right now and it's pretty exciting.


00:09:38.240 --> 00:09:39.080
- It's incredible, right?


00:09:39.080 --> 00:09:42.720
So what you get is, imagine like a dropdown combo box,


00:09:42.720 --> 00:09:44.020
like you would have on the web,


00:09:44.020 --> 00:09:45.800
that is the list and you can click,


00:09:45.800 --> 00:09:48.620
but in the command line, as a command line argument.


00:09:48.620 --> 00:09:51.200
So it says choose something, and you can arrow through it,


00:09:51.200 --> 00:09:54.000
it has like a little indicator of which one you're on.


00:09:54.000 --> 00:09:55.320
Oh man, it is slick.


00:09:55.320 --> 00:09:58.080
- It supports colors and emojis and--


00:09:58.080 --> 00:09:59.340
- It has a scroll bar.


00:09:59.340 --> 00:10:02.040
It has a scroll bar.


00:10:02.040 --> 00:10:03.840
You can like even scroll through them


00:10:03.840 --> 00:10:05.840
if there's too many choices to fit on the screen.


00:10:05.840 --> 00:10:09.760
Yeah, it's pretty cool and it's easy to use, so that's nice.


00:10:09.760 --> 00:10:11.280
There's also other types of inputs,


00:10:11.280 --> 00:10:12.400
like you can have a password,


00:10:12.400 --> 00:10:14.100
It says enter your password or what is the password,


00:10:14.100 --> 00:10:15.740
and it does the star marking.


00:10:15.740 --> 00:10:16.580
- Wow, okay.


00:10:16.580 --> 00:10:17.400
- Which is cool.


00:10:17.400 --> 00:10:19.440
It has yes/no questions, numbers,


00:10:19.440 --> 00:10:21.160
it'll only, you know, a number input.


00:10:21.160 --> 00:10:23.320
You can only enter numbers.


00:10:23.320 --> 00:10:26.200
It won't accept, you know, junk that won't parse,


00:10:26.200 --> 00:10:28.860
so you don't have to go through all those steps.


00:10:28.860 --> 00:10:31.000
It's pretty incredible, right?


00:10:31.000 --> 00:10:32.640
- Yeah, so we need somebody to write


00:10:32.640 --> 00:10:35.440
cookie cutter with bullet prompts.


00:10:35.440 --> 00:10:37.360
- Exactly, I was thinking of cookie cutter, exactly,


00:10:37.360 --> 00:10:39.120
'cause cookie cutter asks all those types


00:10:39.120 --> 00:10:41.160
of questions all the time.


00:10:41.160 --> 00:10:43.360
It would be beautiful to have Bullet


00:10:43.360 --> 00:10:45.480
just beautifying all these things.


00:10:45.480 --> 00:10:47.720
So there's one idea if people want to contribute


00:10:47.720 --> 00:10:48.540
to open source.


00:10:48.540 --> 00:10:50.840
Another one is right here on Bullet,


00:10:50.840 --> 00:10:52.480
there's probably other types of input


00:10:52.480 --> 00:10:55.480
besides passwords, yes, no, and numbers,


00:10:55.480 --> 00:10:57.560
like maybe multi-select, I don't know.


00:10:57.560 --> 00:10:59.760
But also looking for Windows support.


00:10:59.760 --> 00:11:01.680
I think right now this does not work on Windows


00:11:01.680 --> 00:11:03.500
'cause the way the terminal works


00:11:03.500 --> 00:11:05.500
versus on a POSIX system.


00:11:05.500 --> 00:11:07.080
So pretty cool though.


00:11:07.080 --> 00:11:08.960
Still digging it.


00:11:08.960 --> 00:11:09.800
So go Bullet.


00:11:09.800 --> 00:11:10.640
- Go Bullet.


00:11:10.640 --> 00:11:14.440
So we actually have a couple items to do with pip and packages and installing.


00:11:14.440 --> 00:11:15.040
You go first.


00:11:15.040 --> 00:11:18.240
Okay. Well, last week, I think it was last week, maybe it was the week before,


00:11:18.240 --> 00:11:24.840
we talked a little bit about maybe you want to try something different than Travis for your pipelines,


00:11:24.840 --> 00:11:27.440
for your continuous integration.


00:11:27.440 --> 00:11:30.740
The Exodus after all the layoffs and all that business, huh?


00:11:30.740 --> 00:11:37.140
Yeah, well, I mean, or just maybe you just want to try Azure anyway, or Azure just because it looks neat.


00:11:37.140 --> 00:11:40.340
There's an article that I thought was super cool that was


00:11:40.340 --> 00:11:45.940
hosting private pip packages using Azure artifacts.


00:11:45.940 --> 00:11:48.460
The idea of the article is,


00:11:48.460 --> 00:11:53.140
let's say if I'm using Azure pipelines to do actually a data pipeline,


00:11:53.140 --> 00:11:54.700
doing a whole bunch of different stages of


00:11:54.700 --> 00:11:56.600
manipulating changing the data or whatever,


00:11:56.600 --> 00:11:58.380
whatever you do with data pipelines.


00:11:58.380 --> 00:12:01.100
Some of the work can be packaged up and used


00:12:01.100 --> 00:12:04.940
in later stages with just like a pip install, that'd be cool.


00:12:04.940 --> 00:12:06.340
Then how do you do that?


00:12:06.340 --> 00:12:09.260
There's a few gotchas that they get through.


00:12:09.260 --> 00:12:11.260
And they, for instance, in one part,


00:12:11.260 --> 00:12:15.060
you can't just use the normal pipelines just by itself,


00:12:15.060 --> 00:12:20.060
but you can use the CI pipelines from Azure DevOps tool


00:12:20.060 --> 00:12:23.300
to get the packages into an artifact form.


00:12:23.300 --> 00:12:25.860
And basically, it's all the hacks that you need to do


00:12:25.860 --> 00:12:27.220
to make this work.


00:12:27.220 --> 00:12:28.340
I just thought that was cool.


00:12:28.340 --> 00:12:29.180
Isn't it?


00:12:29.180 --> 00:12:30.460
- Yeah, I think that sounds really cool as well.


00:12:30.460 --> 00:12:33.460
And, you know, go ahead and leverage those artifacts


00:12:33.460 --> 00:12:35.100
to make your pipelines, which is cool.


00:12:35.100 --> 00:12:36.800
I don't think you can make these public.


00:12:36.800 --> 00:12:40.300
They're mostly, you know, you're using it for your own stuff.


00:12:40.300 --> 00:12:41.500
So they're a little bit private,


00:12:41.500 --> 00:12:44.700
like they're talking about using credentials,


00:12:44.700 --> 00:12:45.860
hooking up your credentials


00:12:45.860 --> 00:12:48.920
so that pip install can get those correctly.


00:12:48.920 --> 00:12:50.140
And then I also wanted,


00:12:50.140 --> 00:12:52.340
one of the things we did talk about last week


00:12:52.340 --> 00:12:57.340
was Anthony Shaw's pytest Azure Pipelines, pytest plugin.


00:12:57.340 --> 00:12:59.440
We've already covered that last week,


00:12:59.440 --> 00:13:02.300
but one of the things that's cool that happened since then


00:13:02.300 --> 00:13:06.300
is that plugin is now part of the recommended


00:13:06.300 --> 00:13:09.700
pipeline, recommended setup for Microsoft itself.


00:13:09.700 --> 00:13:11.060
- Yeah, that's pretty cool.


00:13:11.060 --> 00:13:12.660
Well done, so it's definitely gonna be


00:13:12.660 --> 00:13:15.060
sort of the de facto way over there now.


00:13:15.060 --> 00:13:17.020
So I wanna talk about something pretty unique.


00:13:17.020 --> 00:13:18.180
Maybe we haven't touched on this before.


00:13:18.180 --> 00:13:19.560
It has to do with GUIs.


00:13:19.560 --> 00:13:26.980
So last week we spoke about mixing in the async IO,


00:13:26.980 --> 00:13:28.220
I know this was two weeks ago,


00:13:28.220 --> 00:13:31.420
the async IO pipeline sort of event loop


00:13:31.420 --> 00:13:34.100
and mixing that in with Qt.


00:13:34.100 --> 00:13:36.980
So Qt for Python and PyQt and things like that.


00:13:36.980 --> 00:13:39.100
So all GUIs have event loops, right?


00:13:39.100 --> 00:13:40.380
They're always just going around and around,


00:13:40.380 --> 00:13:41.820
going, did something happen?


00:13:41.820 --> 00:13:42.660
Did they click a button?


00:13:42.660 --> 00:13:44.620
I'm looking for, you know, like mouse move.


00:13:44.620 --> 00:13:47.920
I'm looking for key down, resize events,


00:13:47.920 --> 00:13:49.620
and it just, you know, passes it on


00:13:49.620 --> 00:13:51.760
to like the various event handlers.


00:13:51.760 --> 00:13:53.780
Well, asyncIO is another loop


00:13:53.780 --> 00:13:54.740
that kind of goes around and around,


00:13:54.740 --> 00:13:57.820
process things, but like, how do we put those together?


00:13:57.820 --> 00:14:00.380
So a guy named Annie Bolka sent us a message


00:14:00.380 --> 00:14:03.820
after hearing the first conversation about,


00:14:03.820 --> 00:14:07.220
what was it, I think it was AsyncQt,


00:14:07.220 --> 00:14:08.760
Qt was the name of the project.


00:14:08.760 --> 00:14:09.700
After hearing about that, he's like,


00:14:09.700 --> 00:14:11.980
"Hey, I work on WXPython,


00:14:11.980 --> 00:14:15.920
"and there's a cool thing called WXAsync as well,


00:14:15.920 --> 00:14:17.540
"and it does a really similar thing,


00:14:17.540 --> 00:14:20.340
"and it basically merges those two event loops


00:14:20.340 --> 00:14:22.640
"into one thing, which is pretty cool."


00:14:22.640 --> 00:14:26.620
So he wrote a really nice, in-depth, medium article


00:14:26.620 --> 00:14:29.060
about it called Async and Await for WXPython.


00:14:29.060 --> 00:14:30.340
- Oh, very nice.


00:14:30.340 --> 00:14:31.180
- Yeah, yeah.


00:14:31.180 --> 00:14:33.900
So one of the challenges with WX Python,


00:14:33.900 --> 00:14:36.540
apparently, is doing background work, right?


00:14:36.540 --> 00:14:38.060
So you try to like call a service,


00:14:38.060 --> 00:14:38.900
or you try to do something,


00:14:38.900 --> 00:14:41.180
and then, you know, if you don't take extra measures,


00:14:41.180 --> 00:14:44.220
it's going to block up that event loop


00:14:44.220 --> 00:14:45.540
that is the GUI thread,


00:14:45.540 --> 00:14:47.460
and it's just like your app's gonna freeze


00:14:47.460 --> 00:14:50.380
and not respond and do all sorts of bad stuff


00:14:50.380 --> 00:14:52.820
that you're not supposed to do in desktop apps.


00:14:52.820 --> 00:14:55.420
So with this, you can have async handlers


00:14:55.420 --> 00:14:56.620
that, you know, run in the background.


00:14:56.620 --> 00:14:59.040
So if you're like waiting on a call to go to the service,


00:14:59.040 --> 00:15:02.340
you just await that and like the event loop keeps on chugging.


00:15:02.340 --> 00:15:03.620
So it's pretty cool.


00:15:03.620 --> 00:15:06.780
Obviously you can do threading and multiprocessing and that kind of stuff,


00:15:06.780 --> 00:15:09.060
but this is a little bit cleaner if you want to use async and await.


00:15:09.060 --> 00:15:14.520
The other thing that he talks about in his article is about this sort of viral


00:15:14.520 --> 00:15:17.020
nature of using async and await.


00:15:17.020 --> 00:15:21.900
So if I define a function, I say async def something, the function that's going


00:15:21.900 --> 00:15:26.780
to call it may well have to itself be async so it can await it.


00:15:26.780 --> 00:15:31.320
and then like the things that call that have to become a sync of ID and so on.


00:15:31.320 --> 00:15:36.020
It creates this kind of like from the bottom up spread of a sink,


00:15:36.020 --> 00:15:39.980
like invading all of your code, which that can be a challenge.


00:15:39.980 --> 00:15:43.940
And it talks a little bit about that, but I would just want to throw a shout out,


00:15:43.940 --> 00:15:46.220
which is something I think we've spoken about before.


00:15:46.220 --> 00:15:50.900
If I haven't, we should definitely make it a full featured item later, but unsync.


00:15:50.900 --> 00:15:52.620
Have I mentioned unsync on the show?


00:15:52.620 --> 00:15:53.780
I don't remember.


00:15:53.780 --> 00:15:53.980
All right.


00:15:53.980 --> 00:15:55.860
Well, that's probably going to be a new thing if we haven't.


00:15:55.860 --> 00:16:00.780
I'll double check, but Unsync is a super simple library


00:16:00.780 --> 00:16:03.940
that puts a unifying API on multiprocessing,


00:16:03.940 --> 00:16:06.580
threading, and asynchronous methods.


00:16:06.580 --> 00:16:09.340
And it manages its own little background queue


00:16:09.340 --> 00:16:11.300
running somewhere else on another thread.


00:16:11.300 --> 00:16:13.100
It allows you to do a lot of things


00:16:13.100 --> 00:16:17.500
like just blocking on those running sub-method calls


00:16:17.500 --> 00:16:18.700
to get the result,


00:16:18.700 --> 00:16:21.140
so that you don't actually have the problem.


00:16:21.140 --> 00:16:24.860
You can sort of use it to stop this async spread


00:16:24.860 --> 00:16:25.700
of these methods.


00:16:25.700 --> 00:16:27.760
Anyway, it's an interesting article,


00:16:27.760 --> 00:16:28.740
it's interesting it covers that,


00:16:28.740 --> 00:16:30.100
and I wanted to throw it out there


00:16:30.100 --> 00:16:32.420
as one of the cool solutions for it.


00:16:32.420 --> 00:16:34.460
- Yeah, that's a good thing to bring up.


00:16:34.460 --> 00:16:36.300
I kind of didn't think about that.


00:16:36.300 --> 00:16:39.180
I mean, I'm used to it in C++ world


00:16:39.180 --> 00:16:40.980
that if you're running multithreaded,


00:16:40.980 --> 00:16:42.700
everything's gotta be multithreadable.


00:16:42.700 --> 00:16:43.900
- Yeah, it starts to go crazy,


00:16:43.900 --> 00:16:45.500
and it's just like, yeah, similarly.


00:16:45.500 --> 00:16:46.700
- Yeah, anyway, okay.


00:16:46.700 --> 00:16:47.540
- Pretty cool.


00:16:47.540 --> 00:16:49.180
All right, well, that's it for our main items.


00:16:49.180 --> 00:16:50.540
I have a couple of follow-up ones,


00:16:50.540 --> 00:16:53.060
and I have a set of jokes for you.


00:16:53.060 --> 00:16:54.820
I have a joke generator for you, even.


00:16:54.820 --> 00:16:55.660
How's that?


00:16:55.660 --> 00:16:56.500
- That's great, yeah.


00:16:56.500 --> 00:16:58.540
- All right, you got anything you wanna let people know about?


00:16:58.540 --> 00:16:59.380
- No.


00:16:59.380 --> 00:17:01.740
- So you just released a new testing code episode.


00:17:01.740 --> 00:17:05.100
- Yeah, that released an episode talking about


00:17:05.100 --> 00:17:10.100
a fun alternative to, or version of TDD that's called TCR,


00:17:10.100 --> 00:17:14.820
test, commit, revert, with the idea of what happens


00:17:14.820 --> 00:17:18.180
if every time your tests fail, you just throw away


00:17:18.180 --> 00:17:19.580
all your code that you've changed


00:17:19.580 --> 00:17:21.300
since the last good commit.


00:17:21.300 --> 00:17:22.820
And it seems absolutely crazy,


00:17:22.820 --> 00:17:24.220
but it's a fun thing to talk about.


00:17:24.220 --> 00:17:25.700
- Yeah, it does seem a little crazy,


00:17:25.700 --> 00:17:27.400
but also, yeah, it seems fun.


00:17:27.400 --> 00:17:28.400
- Yeah, and then there are a whole bunch


00:17:28.400 --> 00:17:29.420
of cool people lined up.


00:17:29.420 --> 00:17:30.980
I've got like six interviews lined up,


00:17:30.980 --> 00:17:34.220
so there's gonna be lots of good content coming up soon.


00:17:34.220 --> 00:17:35.780
- Yeah, sweet, sweet.


00:17:35.780 --> 00:17:37.360
All right, well, I have a couple of things.


00:17:37.360 --> 00:17:41.380
A correction, some self-aware acknowledgments,


00:17:41.380 --> 00:17:42.320
and then a joke.


00:17:42.320 --> 00:17:45.580
So correction, we spoke about the MongoDB licensing


00:17:45.580 --> 00:17:49.500
and the AWS kerfuffle, where AWS said,


00:17:49.500 --> 00:17:50.700
well, you're gonna change your license,


00:17:50.700 --> 00:17:52.940
so we can't use MongoDB as our own service?


00:17:52.940 --> 00:17:59.820
well fine we'll rewrite a new implementation that has nothing to do with you but is you know wire protocol identical and things like that.


00:17:59.820 --> 00:18:07.980
Well mostly I got that right however will s sent me a message said hey actually posted a message on the comment section of that episode.


00:18:07.980 --> 00:18:18.460
And said hey you said they switch to the AGPL they actually had already been on the AGPL what they switched to is something called the SS PL server side license.


00:18:19.020 --> 00:18:23.980
And it turns out that the OSI Open Source Initiative


00:18:23.980 --> 00:18:28.520
doesn't even recognize SSPL as an open source license


00:18:28.520 --> 00:18:31.160
because of the way, some of its conditions.


00:18:31.160 --> 00:18:33.480
And so it's interesting in some sense


00:18:33.480 --> 00:18:36.040
that like MongoDB might not even be open source anymore


00:18:36.040 --> 00:18:38.300
based on its license, not in the traditional


00:18:38.300 --> 00:18:40.540
what does its license mean sense anyway.


00:18:40.540 --> 00:18:42.820
- Right, I took the perspective of,


00:18:42.820 --> 00:18:44.520
let's say I've got a service out there,


00:18:44.520 --> 00:18:46.900
I'm just like to have a side project


00:18:46.900 --> 00:18:47.940
where I've got a service out there


00:18:47.940 --> 00:18:51.260
where I just run my own instance of Mongo


00:18:51.260 --> 00:18:53.340
and I'm using that.


00:18:53.340 --> 00:18:55.300
Do I have to worry about this license change?


00:18:55.300 --> 00:18:56.580
And the answer is no.


00:18:56.580 --> 00:18:57.980
- Yeah, that's what I saw as well.


00:18:57.980 --> 00:18:59.580
It's like, but if you wanna be a cloud provider


00:18:59.580 --> 00:19:02.820
and you wanna offer the service to others, then you do.


00:19:02.820 --> 00:19:05.980
- Right, but if the service you're offering isn't Mongo,


00:19:05.980 --> 00:19:08.900
it's just some other service that happens to use Mongo,


00:19:08.900 --> 00:19:09.740
yeah, you're good.


00:19:09.740 --> 00:19:12.620
- Yeah, like businessinsider.com or whatever.


00:19:12.620 --> 00:19:13.460
- Yeah.


00:19:13.460 --> 00:19:17.540
- Yep, okay, so MongoDB license, sorry, it's SSPL.


00:19:17.540 --> 00:19:19.460
That's the change, it was already a GPL.


00:19:19.460 --> 00:19:21.060
Thank you, Will, for that.


00:19:21.060 --> 00:19:25.500
So Brian, do you know that legacy Python is self-aware


00:19:25.500 --> 00:19:27.860
and has actually entered the fifth stage of grief?


00:19:27.860 --> 00:19:28.820
(Brian laughs)


00:19:28.820 --> 00:19:29.660
- No.


00:19:29.660 --> 00:19:30.820
- So people out there can try this.


00:19:30.820 --> 00:19:35.180
So if you type Python2-M and you run any module,


00:19:35.180 --> 00:19:40.180
so like Python2-M pip list, that's a meaningless command,


00:19:40.180 --> 00:19:42.180
you'll get the output that says,


00:19:42.180 --> 00:19:45.100
deprecation Python 2.7 will reach its end of life


00:19:45.100 --> 00:19:47.100
on January 1st, 2020.


00:19:47.100 --> 00:19:50.540
please upgrade your Python as Python 2.7


00:19:50.540 --> 00:19:52.440
won't be maintained after that date.


00:19:52.440 --> 00:19:55.700
Moreover, my word, a future version of pip


00:19:55.700 --> 00:19:57.700
will drop support for Python 2.7.


00:19:57.700 --> 00:20:00.220
- Oh wow, yeah, well that makes sense.


00:20:00.220 --> 00:20:02.460
- I mean, I feel like that's acceptance, right?


00:20:02.460 --> 00:20:04.300
It's like, yeah, I'm going away, sorry.


00:20:04.300 --> 00:20:05.980
(laughing)


00:20:05.980 --> 00:20:08.020
Here, there's a funny Twitter thread as well


00:20:08.020 --> 00:20:09.880
that I threw out when I first saw that going by,


00:20:09.880 --> 00:20:10.720
so that's cool.


00:20:10.720 --> 00:20:12.940
And then finally, we talked about pip and packaging


00:20:12.940 --> 00:20:14.820
and stuff, there's this thing that Dan Bader


00:20:14.820 --> 00:20:17.260
from real python shot me over and said,


00:20:17.260 --> 00:20:18.100
hey, have you seen this?


00:20:18.100 --> 00:20:19.780
This is kind of cool, called Pydist.


00:20:19.780 --> 00:20:22.580
So this is a thing, a service, I guess,


00:20:22.580 --> 00:20:24.120
that is in beta.


00:20:24.120 --> 00:20:29.120
And the idea is you can use it as your package source,


00:20:29.120 --> 00:20:32.740
right, for pip and whatnot,


00:20:32.740 --> 00:20:35.940
and you can have public and private dependencies there.


00:20:35.940 --> 00:20:38.560
It'll mirror the public ones and keep a copy of them


00:20:38.560 --> 00:20:40.220
and never ever delete them,


00:20:40.220 --> 00:20:43.500
even if they were deleted from pip, PyPI,


00:20:43.500 --> 00:20:45.700
so that you always have them there stable.


00:20:45.700 --> 00:20:46.540
It's pretty cool.


00:20:46.540 --> 00:20:47.800
It's supposed to do a bunch of other stuff,


00:20:47.800 --> 00:20:49.500
like show you, like if you use this package,


00:20:49.500 --> 00:20:51.600
here are all the packages that depend upon it


00:20:51.600 --> 00:20:52.580
and what you're going to get,


00:20:52.580 --> 00:20:54.700
which is not really available right now,


00:20:54.700 --> 00:20:55.940
and things like that.


00:20:55.940 --> 00:20:58.140
But it looks like it may be,


00:20:58.140 --> 00:20:59.540
at some point, become a paid service.


00:20:59.540 --> 00:21:00.380
I don't know.


00:21:00.380 --> 00:21:01.200
It's in free beta.


00:21:01.200 --> 00:21:02.040
They don't say one way or the other.


00:21:02.040 --> 00:21:04.580
So anyway, maybe that's helpful to people out there.


00:21:04.580 --> 00:21:05.420
- Interesting though.


00:21:05.420 --> 00:21:06.260
Cool.


00:21:06.260 --> 00:21:07.080
- All right, you ready for a joke?


00:21:07.080 --> 00:21:07.920
- Definitely.


00:21:07.920 --> 00:21:08.760
- This is super hilarious.


00:21:08.760 --> 00:21:10.060
All right, let's do this.


00:21:10.060 --> 00:21:12.380
Pip install --user pyjokes.


00:21:12.380 --> 00:21:13.220
- Okay.


00:21:13.220 --> 00:21:14.500
- All right, you gotta do it.


00:21:14.500 --> 00:21:17.020
Or better, I'm super loving PipX,


00:21:17.020 --> 00:21:19.420
so PipX install PyJokes if you got that,


00:21:19.420 --> 00:21:21.780
because that is the business these days.


00:21:21.780 --> 00:21:23.140
PipX is awesome.


00:21:23.140 --> 00:21:25.820
It's like homebrew, but for Python executables.


00:21:25.820 --> 00:21:26.940
- Okay, this is gonna take too long.


00:21:26.940 --> 00:21:28.260
- All right, I'll do a couple,


00:21:28.260 --> 00:21:29.520
then you can give me one at the end.


00:21:29.520 --> 00:21:32.220
So what this is, this is a package that you can install


00:21:32.220 --> 00:21:34.860
that gives you a command line access to developer jokes.


00:21:34.860 --> 00:21:35.940
- Really? - Yeah, okay.


00:21:35.940 --> 00:21:37.900
So once you install, I'm gonna type PyJoke.


00:21:37.900 --> 00:21:40.240
There are two ways to write error-free programs.


00:21:40.240 --> 00:21:42.140
Only the third one works.


00:21:42.140 --> 00:21:43.140
Let's see what else we got.


00:21:43.140 --> 00:21:44.820
This one, I think you'll like this one.


00:21:44.820 --> 00:21:50.740
A QA engineer walks into a bar, runs into a bar, crawls into a bar, dances into a bar,


00:21:50.740 --> 00:21:54.580
tiptoes into a bar, rams a bar, jumps into a bar.


00:21:54.580 --> 00:21:55.580
Okay.


00:21:55.580 --> 00:21:56.580
That's it.


00:21:56.580 --> 00:21:59.660
How many programmers does it take to change a light bulb?


00:21:59.660 --> 00:22:00.660
None.


00:22:00.660 --> 00:22:03.180
They just make darkness a standard.


00:22:03.180 --> 00:22:05.180
Let's see.


00:22:05.180 --> 00:22:11.140
A good programmer is someone who always looks both ways before crossing a one-way street.


00:22:11.140 --> 00:22:12.480
(laughing)


00:22:12.480 --> 00:22:15.600
See, these are, like, once you install PIPX


00:22:15.600 --> 00:22:17.360
and sell PyJokes, these are at your hand.


00:22:17.360 --> 00:22:18.680
And you're like, I'm feeling a little down,


00:22:18.680 --> 00:22:19.600
what are we gonna do?


00:22:19.600 --> 00:22:21.600
Why do Java programmers wear sunglasses?


00:22:21.600 --> 00:22:23.680
Because they can't see sharp, huh?


00:22:23.680 --> 00:22:26.460
So, like, it just doesn't stop, apparently.


00:22:26.460 --> 00:22:28.680
(laughing)


00:22:28.680 --> 00:22:30.560
- Well, we don't even have to have anybody


00:22:30.560 --> 00:22:32.040
submit any jokes for us anymore,


00:22:32.040 --> 00:22:33.300
we can just use these.


00:22:33.300 --> 00:22:35.320
- We have the fountain of, the endless fountain of jokes.


00:22:35.320 --> 00:22:36.800
Although I'm sure there is some limit


00:22:36.800 --> 00:22:38.180
to how many jokes are in there.


00:22:38.180 --> 00:22:40.240
You can go to their website and actually submit a joke


00:22:40.240 --> 00:22:41.740
to be included in the app.


00:22:41.740 --> 00:22:42.580
- Oh, okay.


00:22:42.580 --> 00:22:43.400
- Which is all good.


00:22:43.400 --> 00:22:45.320
- So I have to make sure I update it every once in a while.


00:22:45.320 --> 00:22:46.320
- Yeah, that's why you need pipx,


00:22:46.320 --> 00:22:48.040
'cause then you have to do pipx update all,


00:22:48.040 --> 00:22:49.160
and it does it.


00:22:49.160 --> 00:22:50.280
- Okay, cool.


00:22:50.280 --> 00:22:52.480
- Sweet, anyway, that's our joke.


00:22:52.480 --> 00:22:55.040
If people can go out there and install PyJokes,


00:22:55.040 --> 00:22:56.800
the package, and run it.


00:22:56.800 --> 00:22:58.880
Although they might not need us anymore, Brian.


00:22:58.880 --> 00:23:02.240
- Yeah, they will, 'cause they'll need


00:23:02.240 --> 00:23:04.800
our wonderful transitions from one thing to another.


00:23:04.800 --> 00:23:05.720
- That's right, that's right.


00:23:05.720 --> 00:23:07.760
All right, well, a lot of fun as always,


00:23:07.760 --> 00:23:09.160
and I'll chat with you later.


00:23:09.160 --> 00:23:10.000
- Okay, bye.


00:23:10.000 --> 00:23:11.560
Thank you for listening to Python Bytes.


00:23:11.560 --> 00:23:14.280
Follow the show on Twitter via @PythonBytes.


00:23:14.280 --> 00:23:17.240
That's Python Bytes as in B-Y-T-E-S.


00:23:17.240 --> 00:23:20.380
And get the full show notes at PythonBytes.fm.


00:23:20.380 --> 00:23:24.080
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:23:24.080 --> 00:23:25.080
way.


00:23:25.080 --> 00:23:27.300
We're always on the lookout for sharing something cool.


00:23:27.300 --> 00:23:30.580
On behalf of myself and Brian Auken, this is Michael Kennedy.


00:23:30.580 --> 00:23:33.600
Thank you for listening and sharing this podcast with your friends and colleagues.

