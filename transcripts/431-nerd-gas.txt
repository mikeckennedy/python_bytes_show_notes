00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 431, recorded May 5th, 2025.

00:00:10 And I am Brian Okken.

00:00:11 And I am Michael Kennedy.

00:00:12 And this episode is sponsored by NordLayer.

00:00:15 Listen to their spot later in the show.

00:00:17 And if you'd like to connect with us, you can, or suggest topics, please feel free to send us an email or head on over to either Mastodon or BlueSky and the links to both of us and the show are in the show notes.

00:00:32 And you can join this episode live or join it live usually Mondays at 10, but sometimes other times.

00:00:39 But head on over to pythonbytes.fm/live to sign up and see the schedule for the next one.

00:00:45 But also you can, that's on YouTube, so you can watch them later if you'd like.

00:00:50 And I'd also like to encourage people to sign up for the newsletter.

00:00:53 We send out a weekly email with all the links from the show.

00:00:57 plus background information.

00:00:58 It's a lot of fun.

00:00:59 So check that out.

00:01:00 Also, I think it'd be cool to have a cool first topic, Michael.

00:01:04 What you got?

00:01:06 This was a nice, easy one, easy to adopt, easy to appreciate, I think.

00:01:11 So you and I, we spend a lot of time talking about, here's the new things for this, and here's the new thing for Python, and here's the new features, the next version, and test the alpha, test the beta.

00:01:20 And we also talk about when they go out of support, but I don't know how you feel.

00:01:24 I often, that sneaks up on me.

00:01:27 I mean, the fact that 3.8 is out of support seems wrong.

00:01:30 But it is, you know what I mean?

00:01:32 Yeah.

00:01:32 And so you might be sitting at your terminal just going, what's that status again?

00:01:36 And so I present to you Pyrel, P-I-R-E-L.

00:01:41 And what it is, is it's the release cycle of Python at your fingertips.

00:01:45 Ooh, cool.

00:01:46 Yeah, so there's a little graphic here, I suppose.

00:01:49 I could open up the image full size, perhaps.

00:01:52 And you just type whatever, doesn't matter how you have Python active.

00:01:56 if it's the system one or if it's a virtual environment one, you can write Pyrelle check and it'll give you a nice summary of what's going on here.

00:02:06 You can say you're using Python 3.13, which is actively maintained, and it will be this good for this long.

00:02:13 You can say Pyrelle list and it'll give you a list of all of the last 10 or so versions when they came and when they went.

00:02:23 So it's pretty cool.

00:02:24 I mean, that's more or less what it does, but it tells you that you can get, you know, go get a new Python version if yours is getting older.

00:02:31 And the status as well, is it still getting feature updates?

00:02:34 Is it in bug fix level?

00:02:36 Is it security fixes or is it YOLO?

00:02:38 I just can't be bothered.

00:02:41 Anyway, that's what this is.

00:02:43 What do you think?

00:02:43 I think that's pretty fun.

00:02:45 Yeah.

00:02:45 Also, yeah.

00:02:46 Yeah.

00:02:47 And it uses the rocket emoji, which will make a reappearance, right?

00:02:51 Yeah.

00:02:52 I do like the rocket emoji.

00:02:54 Indeed.

00:02:54 So there's a little bit else you can do with it, though it does not particularly interest me as a tool, nonetheless.

00:03:03 You can also type Pyroguess, and it will do things like give you various trivia about the release history of Python.

00:03:12 So, for example, it might ask, when was Python 3.11 released?

00:03:15 Or who is the release manager for 3.6?

00:03:18 And it gives you a multi-choice select, and you can pick, and it'll tell you if you're right or wrong.

00:03:22 So if you like Python release history and seeing the details, you can do that.

00:03:27 But I think the payroll list and the payroll check is pretty cool.

00:03:31 Yeah, I like it.

00:03:32 Neat.

00:03:32 Yeah, that's it.

00:03:33 All right.

00:03:34 Well, I want to cover something that we've covered before, kind of.

00:03:39 Back to the future.

00:03:41 Back to, we're going to go back in time.

00:03:43 This is episode 123, which, when was that?

00:03:46 That was like in May 26, 2019.

00:03:50 We recorded it and it came out on the 29th.

00:03:53 Right.

00:03:53 And we had no idea.

00:03:55 Things were different back then, 2019.

00:03:57 2019, different world.

00:03:59 But one of the things that started in that was when we announced, well, we didn't announce it, but we covered it on the show way back in 2019.

00:04:09 The introduction of FastAPI.

00:04:12 So we talked about it.

00:04:13 This new cool web framework called FastAPI.

00:04:16 Well, FastAPI has been growing and it's now the number one web framework, not just across Python, but across everything.

00:04:24 So it's been an incredible thing to watch and some great work out there.

00:04:29 Well, today, Sebastian Ramirez, the dude that created FastAPI in the first place, he announced that he is forming FastAPI Labs, a new company, and that they are, the FastAPI Labs is a new company and they're building a fast api cloud so we're going to take a look what does this mean it kind of means that you just get to build your fast if you do this the promise is you build a fast api application and you can just deploy it with um fast api deploy just a single line and and then they'll they'll host it on their um like a subdomain of the fast api cloud.dev so um kind of interesting. I'm intrigued. So I've definitely joined the wait list. There is an announcement blog post of by the same team behind FastAPI. So this is, this is kind of an incredible, he's built FastAPI up and it's not just, not just Sebastian. Now there's other people working on it.

00:05:30 It's built on top of Pydantic and a couple of cool things that I can't remember. But, But the team is, the blog post talks about the problems of deploying to the cloud.

00:05:43 Now, there is documentation on the FastAPI.

00:05:47 We've often commented that the FastAPI documentation is excellent.

00:05:51 They've done a great job with documentation.

00:05:53 But it is not trivial to really deploy anything anymore, aside from maybe a static site.

00:06:01 But you have to get concerned with a lot of stuff, especially if you start growing with security.

00:06:07 And so they are looking at that security bit.

00:06:11 So it's so far, it looks like Patrick Armino, Alejandro Sanchez, Sophie Van Langen, sorry, and Sebastian.

00:06:25 And probably more.

00:06:27 I'm not sure if that's part of the team or if that's just anyway.

00:06:30 They might be, I don't know how many people are in the company right now, but he's promising to keep FastAPI open source.

00:06:37 And to also, interesting in this is that he doesn't want to have vendor lock-in.

00:06:44 So whatever processes they build up, it won't make it so that you're stuck with FastAPI with their hosting.

00:06:53 So essentially this is hosting for FastAPI.

00:06:55 So kind of neat.

00:06:56 Yeah, congratulations, Sebastian and crew.

00:06:59 That's awesome.

00:07:00 Yeah.

00:07:00 It is a hassle to deploy things.

00:07:02 And presumably these folks know the best way to host FastAPI.

00:07:07 FastAPI might be tuned for the infrastructure that they choose over time.

00:07:12 You know, I'll have to look more into this.

00:07:13 Like how do you host a database and things like that.

00:07:16 But presumably you can do things like use a CNAME for your app at fastapicloud.com and you'll get your own domain name and all that sort of stuff.

00:07:26 But very interesting.

00:07:28 Yeah, it is.

00:07:29 Also, like for, interestingly, that was the first thing I thought is like, well, I probably don't want to use their domain.

00:07:35 But for, you know, for an API endpoint for some internal tools and stuff, I might not care.

00:07:42 So I think some people.

00:07:43 That's a good point.

00:07:44 You would care a whole lot less, right?

00:07:46 If it's just an API and it's not like your landing page or whatever.

00:07:51 Yeah.

00:07:52 Yeah.

00:07:52 Anyway.

00:07:53 Cool.

00:07:53 Cool stuff.

00:07:54 Absolutely.

00:07:55 Well, what else is cool, Brian?

00:07:57 What?

00:07:57 NordLayer. Let me tell everyone about our sponsor and NordLayer here. So NordLayer is actually a pretty neat product. And this episode of Python Bytes is brought to you by NordLayer. So it's a toggle ready network security platform for modern businesses and combines VPNs like you would expect, of course, from the parent company, Nord. However, it's also access control, threat protection, visibility into what's happening in case you spot some sort of malware. All of those in one easy use platform. There's no hardware, no complex setup, just secure connections and full control in less than 10 minutes. So it's easy to start with quick deployment, step-by-step onboarding 24-7 support. It's easy to combine. It works with existing setups in all major platforms.

00:08:44 And NordLater is easy to scale. Just add users, features, servers in a few clicks. SSO and provisioning included. If you want zero trust network access, you got it. It provides those network zero trust solutions. It adds threat protection to keep malware, ransomware, and phishing from reaching your endpoints, including servers. How cool is that? Increases your threat intelligence to spot threats before they escalate and helps businesses achieve like HIPAA compliance and stuff. So if you're responsible for security of your software or data science team, you should definitely give NordLayer a look. As Python Bytes listeners, you get an exclusive offer of up to 22% off NordLayer yearly plans plus 10% off the top with a coupon. And that coupon is Python Bytes dash 10. If you visit the link in your show notes, there's a landing page and it gives you the code right there. So Python Bytes dash 10. Try NordLayer risk-free with their 14-day money-back guarantee.

00:09:44 Visit pythonbytes.fm/nordlayer to get started.

00:09:48 Link is in your podcast player show notes.

00:09:49 Thank you to Nordlayer for supporting the show.

00:09:51 All right.

00:09:52 Next, we, you know, going back in time, a little less in time.

00:09:58 This is just a couple episodes ago in episode 428.

00:10:02 We covered t-strings.

00:10:04 So t-strings are going to come in 3.14 in the Py release.

00:10:09 So there is one of the authors, Dave Beck, or Dave Peck, sorry, Dave.

00:10:14 wrote an article about the Python's new t-strings.

00:10:18 And I'm kind of excited about it because when we talked about it on the show, I'm excited about them, but I also, they're like template strings.

00:10:25 But how are they different than f-strings?

00:10:28 When would I use one over the other?

00:10:30 And I got all these answers in this blog post.

00:10:35 So he talks about what's the big idea of t-strings.

00:10:39 And interestingly enough, We've loved f-strings so much that they're used inappropriately.

00:10:46 And I didn't really realize that there's security problems.

00:10:49 So there's like comments on using f-strings to take user data, user input, and fill in like maybe a SQL statement.

00:11:00 Don't do that.

00:11:02 You want to clean your user input first.

00:11:06 So people have been using it and or possibly to use it to generate a web page.

00:11:12 So you've got a possibility of somebody inserting cross-site scripting or other bad things that you don't expect by just sticking user data into HTML.

00:11:24 So misusing f-strings is one of the reasons why t-strings are kind of a cool thing.

00:11:29 So the template strings are a generalization of f-strings, and they keep things separate.

00:11:35 So f strings actually create a string, but t strings don't create, when you create a t string, you don't get a t string, you get a, or a string, you get a template object.

00:11:46 And this template object has these two separate things.

00:11:49 You've got, it's got a, I'm going to scroll down, it's got a strings section and a values.

00:11:57 And so it keeps, they're both tuples of things, of what's inside of it.

00:12:04 And you can iterate through them.

00:12:05 There's all sorts of cool stuff you can do with templates, these template strings.

00:12:09 But this is a nice, really good walkthrough of kind of what's inside and why they're different than f-strings.

00:12:15 They're very different now.

00:12:16 And but talking about there's inside, there's a what's the value?

00:12:23 There's a interpolations are a thing that's in there.

00:12:26 So you might have it might be a string.

00:12:29 It might be other.

00:12:30 It might be something else.

00:12:32 And the interpolations have all the pieces in place.

00:12:35 And you can even dive really deep into it and have things like what's the value of the variable that you passed in, the expression name, the conversion, the format specifier, even if you've got format specifiers on it.

00:12:51 And this is all sorts of nitty gritty detail.

00:12:54 But the gist I'm taking away is they're just really kept separate.

00:12:58 So you've got like the template and the things you're passing into the template as completely separate things.

00:13:04 Why is that great?

00:13:05 Well, one of the great things about that is you can, like in the example of SQL or HTML, you can take the user data and check all of that and run things over it.

00:13:17 So if you've got user data and you expected a string, you expected people to not be nefarious about it.

00:13:24 You can do like a safe HTML or something, convert like the brackets into something else, strip out SQL statements so that they're not, it's not a, you know, escape things, escaping things and making them cleaner.

00:13:39 One fun example in this, I love this.

00:13:42 A fun example is how to create PigLatin using template strings.

00:13:48 And so there's like this PigLatin converter that takes a template and returns a string.

00:13:53 So you're able to have like a hello world and then you run PigLatin on the template and it converts the template into, we've got these converter functions.

00:14:04 You can convert into actual string.

00:14:07 And I kind of, okay, I went down a rabbit hole on this because this example says to convert, I kind of forgot the rules of PigLatin because it's been a while since I've been a kid.

00:14:18 But it says essentially if the first character is a vowel, if the words in the word, the first character is a vowel, then you append yay on the end.

00:14:30 But if it's not a vowel, you take the rest of the word and take the first character and put it at the end and say a.

00:14:38 And I don't think that's correct.

00:14:40 Or I think it might be correct, but I forgot the rules.

00:14:43 So I looked it up.

00:14:45 And Pig Latin, sorry about this, but Pig Latin, it says that it's not just the first constant, but it's the first constant cluster.

00:14:53 So I don't think this is the correct implementation.

00:14:57 Well, it might be one that fits on one screen.

00:15:00 Yeah.

00:15:01 So Brian would translate into Ian Bray, not Ryan Bay.

00:15:07 You know, anyway.

00:15:08 Okay.

00:15:09 The diversion.

00:15:10 But anyway.

00:15:11 So there's some great ideas for when we finally have t-strings and we ship Python 3.14, we can do things like possibly having everything more safer and more flexible.

00:15:25 One of the things that's coming up possibly is, oh, where'd it go?

00:15:30 787.

00:15:31 So there's a proposal for safer subprocess usage with like Schlex and Subpros, which I love Schlex.

00:15:39 But you could use a, if those could be implemented with t-strings, they'd be a lot safer.

00:15:45 So there are some security vulnerabilities in these things.

00:15:49 So it could simplify the implementation.

00:15:51 You don't want to ampersand, ampersand, do other thing as part of your command, right?

00:15:55 Yeah.

00:15:56 So this, and then, so having a lot of things that to take user input and create other things, Having them use t-strings might, and having like some quick, safe conversions, instead of having to convert user data ahead of time, you just grab the user data and stick it in a template string.

00:16:15 And then later in your pipeline, clean up the user data.

00:16:18 Those are pretty cool things.

00:16:20 So there's also some attribute things.

00:16:23 There's other ways you can, since they're separate, all the way until you do the conversion, you can do like some cool attribute things that he covers in the article too.

00:16:31 So anyway.

00:16:32 Yeah, looks like a great article.

00:16:33 Thanks, Dave.

00:16:34 Ryan.

00:16:35 I'm going to have Paul Everett on Talk Python, not this week, next week, to talk about t-strings.

00:16:42 Oh, perfect.

00:16:43 Yeah.

00:16:43 We're going to be diving into it some more.

00:16:44 Yeah, it should be fun.

00:16:45 Nice.

00:16:46 Indeed.

00:16:47 Let's go back to the terminal.

00:16:49 And this one, I think, is also pretty interesting, especially if you're learning the terminal or you're just like, how do I do that again?

00:16:57 Zev.

00:16:57 Have you heard of Zev?

00:16:58 No.

00:16:59 It's a simple CLI tool that helps you remember terminal commands.

00:17:03 So if you're sitting here and you're like, you know, I don't really know what I'm doing with this stuff.

00:17:09 I can type Zev and it says, what do you want to do?

00:17:11 It says, show all files in this directory with human readable sizes.

00:17:15 And it says, okay, great.

00:17:16 Here are a couple of things you could do.

00:17:18 And it gives you a select list like ls-lh or I think it was find is one of the options.

00:17:25 But basically it gives you a bunch of options to do those types of things.

00:17:28 And up it goes.

00:17:30 Pretty cool, right?

00:17:30 Yeah.

00:17:31 Yeah.

00:17:32 So this project runs on top of LLM APIs like OpenAI, Google Gemini, or local Olama.

00:17:41 So basically it sends that command over and then it looks at all the responses.

00:17:45 But it probably does a bunch of work to format it for you.

00:17:48 But more importantly, it puts it right there in your terminal where you can just select the answer and hit enter.

00:17:53 You don't have to go to chat, copy it, move it back over, run it.

00:17:57 You know, like that sort of round tripping.

00:17:59 Yeah.

00:18:00 Okay.

00:18:01 Yeah, so suggestions that you might use are like show all running Python processes, find all Python files modified in the last 24 hours, show disk usage for the current directory, check if google.com is reachable, etc, etc.

00:18:15 So yeah, pretty neat.

00:18:17 It does say everything's generated by LLMs, so careful.

00:18:23 Because you know how it goes, right?

00:18:25 It could be delete all files like this in this directory, and in this directory part gets forgotten.

00:18:32 rm-rf star, okay.

00:18:36 Slash star, slash star.

00:18:39 Anyway, super simple, but you set up an LLM provider.

00:18:41 I recently wrote a really cool program that I'm, program, utility, simple tool, that I use that I'm thinking of making public somehow, but I also don't need another thing to babysit.

00:18:52 But basically, if you're in a Git repository, you can just hit a command and it will look at all the new files, the change files, and then correlate that with a local LLM, coding-based LLM.

00:19:04 It says, create me a Git summary of everything, like the header, and then actually a detailed summary, and what happened if you forgot all the things you did.

00:19:13 A little bit like this, but that's not out yet.

00:19:15 But this is cool.

00:19:15 I like to see this.

00:19:16 Like, what did I do on Friday to run on Monday?

00:19:19 Yeah, exactly.

00:19:20 You could totally do it.

00:19:21 And it improves it in this way.

00:19:23 You're like, oh, gosh, I did improve it in that way.

00:19:25 Look at this show.

00:19:25 Aren't I smart?

00:19:29 And before we carry on looping back to your topic, the t-strings, Henry Schreiner writes, I've been wondering if this could be supported in the logging module.

00:19:39 Since it's an actual type, it could be detected.

00:19:41 Yeah.

00:19:42 That would be cool, right?

00:19:43 maybe have a slightly different output with more information about the parts of the string.

00:19:48 Yeah.

00:19:49 Indeed.

00:19:49 All right.

00:19:50 Well, we're back to extras.

00:19:53 I really should have put up.

00:19:55 So one of the things I didn't cover about the t-strings, we'll get to my extra first or second, but in the T-string article, there is a link to a whole bunch of examples of other non-silly examples of t-strings.

00:20:12 So he does Pig Latin in the article, but there's a bunch of others too.

00:20:16 And one of them is a treatment of logging with t-strings.

00:20:20 So check that out.

00:20:22 My extra really is I kind of went – speaking of rabbit holes, found out Monty Python and the Holy Grail turns 50 this year.

00:20:32 So 50 years ago, Monty Python.

00:20:34 I can't believe that.

00:20:35 Bring out the holy hand grenade.

00:20:39 But one of the comments in here, which is, this is, I'm linking to an Ars Technica article.

00:20:46 And I learned a new word today because there were, it says they were, Monty Python and the Holy Grail were nerd gassing before it was cool.

00:20:54 So they were talking about nerd gassing.

00:20:57 And one of the wonderful discussions in the movie is using coconuts.

00:21:05 Because they're supposedly riding horses.

00:21:07 They don't have, yeah.

00:21:09 Yeah, there's just some guy banging coconuts.

00:21:11 And somebody stops and says, like, where did you get the coconuts?

00:21:14 Oh, we found them.

00:21:16 No, you couldn't have found them because, like, they're not native to England.

00:21:19 They're tropical.

00:21:21 So great discussion about coconuts.

00:21:23 And apparently that is nerd gassing.

00:21:25 I didn't know the term.

00:21:27 So I looked that up.

00:21:28 Nerd gassing was coined in 2008 by John Scalzi, a sci-fi author and blogger.

00:21:38 And nerd gassing is the venting nerd, venting, the venting that nerds emit when some often minor detail of a book or movie or TV show, comic book, et cetera, either conflicts with canon or hand waves through some suspect science.

00:21:56 And so I was totally nerd gassing in the, in one of our topics when I went off on what the correct rules for pig Latin

00:22:03 are.

00:22:04 So, yes, that's, you were.

00:22:07 And I do the same thing when people mess up that quote from Captain Picard about may the force be with you.

00:22:14 Okay, so let's go on to the next.

00:22:17 Nice.

00:22:18 Okay.

00:22:18 Please write us and tell me that that's wrong.

00:22:20 All right.

00:22:21 This is it for your extras?

00:22:22 Yeah.

00:22:23 I would like to also point out for those as a follow-up who don't know, because Python, the community has done a poor job of this.

00:22:30 All the logos for Python are snakes, but the name Python came from Monty Python, which is why it's relevant on this show.

00:22:37 yes yes and that's why we have wheels because they're wheels of cheese because

00:22:42 they used to the cheese shop for pipey and yeah the cheese skit i mean if you haven't seen the cheese skit from monty python you have to go watch the cheese skit because it's

00:22:51 awesome the rabbit part is my favorite by far okay here's a quote this is not the joke this is actually a real thing so it has a picture of firefox and it says you either die a hero or you live long enough to see yourself become a villain. And underneath it, it shows the preferences in Firefox for website advertising.

00:23:10 Allow websites to perform privacy preserving ad measurement. This helps the site understand how their ads perform, et cetera, et cetera. Like this is built into Firefox now. And there was like some terms and use changes about how the stuff you submit in Firefox is now being used and being shared and so on and oh right firefox was like one of the last bastions of privacy like real privacy the antithesis of chrome which is you know tracking and correlating and reselling everything

00:23:44 so both you brian and me we care about these things and for example brian use vivaldi i use vivaldi quite a bit but i also started using zen zen browser that's what's actually on the screen right now. And I love Zen Browser because of it's such a clean, nice little layout. And it's based on Firefox as well. So when this stuff got announced 10 months ago or whenever it was, there was over on the Zen Browser GitHub repo, there was like, so what is Zen going to do about this? And at the time there wasn't a lot of clarity, but now Zen 1.2.1 is out and it's got some features. One of the things it says, if you go read the full release notes, it's got some new But in response to recent privacy concerns, bracket about Firefox, we've significantly strengthened Zen's privacy measures.

00:24:37 Previously, we only disabled telemetry, but other things were being done.

00:24:41 Now Firefox telemetry has been completely stripped out of this.

00:24:45 Basically, they've, much like Vivaldi de-Google-ifies Chrome, Zen has had to go to the step of actually de-Mozilla-fying.

00:24:56 I don't know, whatever, what is the term here?

00:24:58 Extracting evil.

00:25:00 Extracting the in poopification of, yeah.

00:25:06 And I don't necessarily blame Firefox.

00:25:09 They are in a tough spot.

00:25:10 They've squandered their position quite badly for quite a long time, such that if the ruling against Google goes through, they lose 90% of their revenue overnight.

00:25:21 That's a problem.

00:25:21 But they're also doing good things like starting to create like docs alternatives that we've covered before.

00:25:27 But, you know, I guess things must be, people must be resold and ads must be put upon people.

00:25:33 And that's the way it seems to be.

00:25:35 I don't know.

00:25:35 I don't agree with it, but that's how it is.

00:25:37 Anyway, I'm happy to see Zen Browser do this.

00:25:39 Yeah.

00:25:39 There's also a ton of cool, well, there are a handful, at least, of cool pytest plugins that I use that started in Mozilla.

00:25:50 So, yeah.

00:25:51 There's lots of great people that have worked there over the years.

00:25:54 And I'm sure still do.

00:25:55 A lot of people do.

00:25:56 And I'm...

00:25:57 suspect not all of them are super psyched about turning on all the ad stuff, right?

00:26:01 Just like I'm sure there's people that still work at Google that don't think they should have removed don't be evil from their tagline.

00:26:08 Yeah, but those people are evil.

00:26:09 Okay, let's keep going.

00:26:11 Just kidding.

00:26:12 Just kidding.

00:26:13 Please don't email me.

00:26:13 Yeah, email him.

00:26:15 It's Michael at...

00:26:20 Testandcode.com.

00:26:21 Okay.

00:26:23 Next, or you go to jail.

00:26:24 That was such a fun episode that we did last week.

00:26:28 Yeah.

00:26:28 But I pulled up this episode, not because I care about that, but I've changed the way that transcripts work.

00:26:35 So previously we had transcripts are every word spoken for 30 minutes or however long the show is.

00:26:42 And I thought, well, that should go on its own page.

00:26:44 You can go and check it out.

00:26:45 But I'd like you to be able to come to the page and hit Command-F and let you know what we said about, I don't know, AI or...

00:26:53 We'll just pick the sponsor because it doesn't show up too many times.

00:26:56 But now the transcripts show up on the main page just as a section farther down.

00:27:02 You can collapse them if you like.

00:27:04 But it lets you click on the time link anywhere and play it back as you go.

00:27:08 So if you find something in the transcript and you're like, I just want to hear it, you just click right there and boom, off it goes.

00:27:14 Put tons of effort into making these transcripts accurate and good.

00:27:18 They're not perfect.

00:27:19 Please, again, don't email me.

00:27:20 There is an imperfection.

00:27:22 I have discovered you were wrong.

00:27:24 But we make a lot of effort to say things like PyPI are spelled correctly.

00:27:29 And other words are correct in here so that when you search for them, they show up.

00:27:33 It also powers our search engine that you can just search and even add to your browser that we've talked about before.

00:27:39 But transcripts are slightly better.

00:27:41 And the pages are slightly more useful.

00:27:42 So visit the website.

00:27:43 Yeah.

00:27:44 And that helps us track every part of your life because we know we don't do that.

00:27:50 just we need just one cookie to get it started no just kidding we have no cookies okay that's it for my extras joke yeah this is a this is a re-envisioning a re-envisioning of an old joke i think it's pretty good there's this person running a china shop and there's a big sign that says china shop and then above it my code base and there's a character here holding a giant angry looking bull by a nose ring. And the person holding it says, mind my friend comes in with me and the bull is labeled cursor. Welcome to the error of AI, huh? Just add that one feature.

00:28:29 Sure. We only need 27 changes. You don't mind if we do, do we?

00:28:34 Interesting. That's funny.

00:28:35 So why is this a flashback? This joke actually comes from, this is the original one from when George W. Bush was president in the US and the China shop was not code-based. The China shop was social security.

00:28:48 Okay.

00:28:48 Yeah.

00:28:49 Something like that.

00:28:50 That's, I don't know, somewhere down here in this thread people talk about stuff.

00:28:53 I don't know.

00:28:53 Anyway, I think it's a pretty appropriate joke.

00:28:55 It's pretty good.

00:28:56 Yeah.

00:28:56 Yeah.

00:28:57 It's funny.

00:28:58 Good, good, good point.

00:28:59 Yeah.

00:28:59 Indeed.

00:29:00 Indeed.

00:29:01 All right.

00:29:01 Well, that's what I had for our joke.

00:29:03 Not absolutely hilarious, but amusing, I think.

00:29:06 If you want hilarious, you got to go back to 430, episode 430 last week.

00:29:09 Yeah.

00:29:10 Yeah.

00:29:10 Yeah.

00:29:11 And if you haven't listened to that, you have to watch that video because it's excellent.

00:29:13 That's right.

00:29:14 That's right.

00:29:15 or you go to jail.

00:29:17 Or you go to jail.

00:29:18 Listen to it or you go to jail.

00:29:22 Well, once again, wonderful episode.

00:29:24 Thanks everybody for listening and we'll see everybody next week.

