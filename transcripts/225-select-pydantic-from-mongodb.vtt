
00:00:00.000 --> 00:00:02.000
- Hello and welcome to Python Bytes,


00:00:02.000 --> 00:00:03.940
where we deliver Python news and headlines


00:00:03.940 --> 00:00:05.400
directly to your earbuds.


00:00:05.400 --> 00:00:10.280
This is episode 225, recorded March 17th.


00:00:10.280 --> 00:00:11.280
I'm Brian Okken.


00:00:11.280 --> 00:00:12.240
- I'm Michael Kennedy.


00:00:12.240 --> 00:00:13.640
- And I'm Sebastian Pitofsky.


00:00:13.640 --> 00:00:14.880
- Yay, we have a special guest.


00:00:14.880 --> 00:00:15.720
- Yay.


00:00:15.720 --> 00:00:16.540
- Welcome, Sebastian.


00:00:16.540 --> 00:00:17.840
- Thanks, I'm excited to be here.


00:00:17.840 --> 00:00:19.040
Huge fan of the show.


00:00:19.040 --> 00:00:20.200
- Thank you, thanks so much.


00:00:20.200 --> 00:00:21.200
- Should we kick it off?


00:00:21.200 --> 00:00:22.040
- Yeah, yeah.


00:00:22.040 --> 00:00:23.280
Also, I wanna say thanks to Linode


00:00:23.280 --> 00:00:24.340
for sponsoring this episode.


00:00:24.340 --> 00:00:26.720
And Brian, I've heard of people getting


00:00:26.720 --> 00:00:28.520
like smaller computers, Raspberry Pis,


00:00:28.520 --> 00:00:29.360
and things like that.


00:00:29.360 --> 00:00:31.820
but you've got, you're taking it to some crazy extreme here.


00:00:31.820 --> 00:00:32.720
Is that what's happening?


00:00:32.720 --> 00:00:33.760
- Yeah. - What's going on here?


00:00:33.760 --> 00:00:34.600
What is this thing?


00:00:34.600 --> 00:00:35.440
- The Pico.


00:00:35.440 --> 00:00:39.480
So actually this, I saw this announcement on Twitter.


00:00:39.480 --> 00:00:41.180
It's actually came out in January,


00:00:41.180 --> 00:00:43.200
but we haven't covered it yet.


00:00:43.200 --> 00:00:44.480
It's kind of exciting.


00:00:44.480 --> 00:00:47.680
The Pico is four bucks for,


00:00:47.680 --> 00:00:50.680
and I know they have a $5 little chip also,


00:00:50.680 --> 00:00:51.680
or a little controller,


00:00:51.680 --> 00:00:54.100
but this is really like in microcontroller land,


00:00:54.100 --> 00:00:56.620
which is, it's really pretty cool.


00:00:57.600 --> 00:01:00.600
It doesn't have a lot, like there's no wifi on it.


00:01:00.600 --> 00:01:04.800
There's not a lot on it, but there's also not a lot on it.


00:01:04.800 --> 00:01:06.680
So it's very low powered.


00:01:06.680 --> 00:01:08.680
So really microcontroller size.


00:01:08.680 --> 00:01:10.440
One of the exciting things about this is this is,


00:01:10.440 --> 00:01:13.900
I think this is the first Raspberry Pi


00:01:13.900 --> 00:01:16.960
with a chip designed by Raspberry Pi.


00:01:16.960 --> 00:01:20.080
So this is a custom Raspberry Pi chip.


00:01:20.080 --> 00:01:21.320
And what do they call it?


00:01:21.320 --> 00:01:23.080
Oh, I can't remember.


00:01:23.080 --> 00:01:26.360
RP2040 is the chip that goes in.


00:01:26.360 --> 00:01:28.040
It means anything to anybody.


00:01:28.040 --> 00:01:32.440
But the low power thing is what I think is fascinating.


00:01:32.440 --> 00:01:37.840
And it's because there's some things that you can even--


00:01:37.840 --> 00:01:41.760
you can power LED lights and stuff with it, even.


00:01:41.760 --> 00:01:46.000
And there is enough power to do quite a bit with peripherals.


00:01:46.000 --> 00:01:49.320
But you also can-- since it's so low power,


00:01:49.320 --> 00:01:52.720
this will be good for things like temperature sensors


00:01:52.720 --> 00:01:55.900
and other sensors that you leave alone someplace.


00:01:55.900 --> 00:01:59.960
And a microcontroller that you can like leave somewhere


00:01:59.960 --> 00:02:01.300
and then come pick up later,


00:02:01.300 --> 00:02:06.180
and that you can control with Python is something new.


00:02:06.180 --> 00:02:07.680
And that's pretty exciting.


00:02:07.680 --> 00:02:08.520
- Yeah, that's super cool.


00:02:08.520 --> 00:02:10.920
And apparently it's coming soon also


00:02:10.920 --> 00:02:13.820
is the Arduino Nano Connect,


00:02:13.820 --> 00:02:18.820
which comes with a nine axis IMU and a microphone,


00:02:18.820 --> 00:02:22.700
a powerful wifi and Bluetooth module.


00:02:22.700 --> 00:02:24.700
and a crypto chip and stuff like that.


00:02:24.700 --> 00:02:26.500
So that'd be kind of cool as well, right?


00:02:26.500 --> 00:02:28.360
Like put this thing on wifi and whatnot.


00:02:28.360 --> 00:02:30.300
- Yeah, and one of the other things I forgot to mention,


00:02:30.300 --> 00:02:33.740
this is the first Raspberry Pi product


00:02:33.740 --> 00:02:35.500
that has an ADC on it.


00:02:35.500 --> 00:02:40.500
So with that, you can do, it isn't just like,


00:02:40.500 --> 00:02:44.220
you can do analog input, so you can, you know,


00:02:44.220 --> 00:02:47.220
more accurately hook up a temperature sensor or something.


00:02:47.220 --> 00:02:48.060
- Oh, right.


00:02:48.060 --> 00:02:50.540
So if you're working with, like, this is your IoT thing


00:02:50.540 --> 00:02:53.300
and you want to just work with like plug in a voltage meter


00:02:53.300 --> 00:02:54.220
or whatever, right?


00:02:54.220 --> 00:02:55.260
Yeah, okay, super cool.


00:02:55.260 --> 00:02:56.740
- Yeah, so that's pretty exciting.


00:02:56.740 --> 00:02:59.700
And anything that drives people working


00:02:59.700 --> 00:03:03.300
with a combination of hardware and software together


00:03:03.300 --> 00:03:07.840
in a nice language like Python, very much appreciated.


00:03:07.840 --> 00:03:10.820
This is an exciting part of the Python world.


00:03:10.820 --> 00:03:15.700
I also want to mention the editor Mew


00:03:15.700 --> 00:03:17.620
that can be found at CodeWithMew.


00:03:17.620 --> 00:03:19.380
And I don't have this up here,


00:03:19.380 --> 00:03:24.000
But they released, they're working on the 1.1 version


00:03:24.000 --> 00:03:25.220
and the beta two is out.


00:03:25.220 --> 00:03:28.140
And one of the things that supports is this Pica board


00:03:28.140 --> 00:03:31.540
along with some of the Lego spike products


00:03:31.540 --> 00:03:33.080
and a whole bunch of new fixes.


00:03:33.080 --> 00:03:36.660
So, especially when we're working with microcontrollers


00:03:36.660 --> 00:03:39.540
and students, that's a nice thing to have.


00:03:39.540 --> 00:03:41.620
- Did you mention the price?


00:03:41.620 --> 00:03:42.940
- That is $4.


00:03:42.940 --> 00:03:44.900
- Yes. - Yeah, that's amazing.


00:03:44.900 --> 00:03:46.180
- That is so awesome, right?


00:03:46.180 --> 00:03:49.460
So yeah, later on in the announcement,


00:03:49.460 --> 00:03:51.060
they've got like this picture of them,


00:03:51.060 --> 00:03:54.380
like wrapped up, like a whole, like a reel of these.


00:03:54.380 --> 00:03:55.820
I think they're trying to encourage people


00:03:55.820 --> 00:03:58.100
to buy like a whole bunch of them at a time.


00:03:58.100 --> 00:04:01.220
- It's like a candy wrapper, but you get a computer instead.


00:04:01.220 --> 00:04:03.300
- Yeah, that's pretty great.


00:04:03.300 --> 00:04:04.500
- Really good, I love it.


00:04:04.500 --> 00:04:05.820
That's as good as our jokes.


00:04:05.820 --> 00:04:08.140
Sebastian, what do you think of this thing?


00:04:08.140 --> 00:04:10.220
- I never actually got into Raspberry Pi


00:04:10.220 --> 00:04:13.260
and all this programming hardware.


00:04:13.260 --> 00:04:15.860
I actually bought Raspberry Pi like years ago


00:04:15.860 --> 00:04:18.740
and it was in my drawer until one day I decided to put


00:04:18.740 --> 00:04:21.060
a pie hole on it to get rid of the ads.


00:04:21.060 --> 00:04:23.540
And it's been working flawlessly since then.


00:04:23.540 --> 00:04:25.540
So I have raspberry pie somewhere there,


00:04:25.540 --> 00:04:28.500
but I'm impressed to see how they are dropping the price.


00:04:28.500 --> 00:04:31.420
Like $4, it's like extremely affordable.


00:04:31.420 --> 00:04:33.900
- Yeah, that's really, really wild, that thing.


00:04:33.900 --> 00:04:34.720
- Pretty awesome.


00:04:34.720 --> 00:04:35.620
Also, Brian, a comment.


00:04:35.620 --> 00:04:37.220
Paul Sanders in live stream says,


00:04:37.220 --> 00:04:40.260
"Can you use Ubuntu on Pico like a regular,


00:04:40.260 --> 00:04:42.740
regular raspberry pie, or is it like its own thing?"


00:04:42.740 --> 00:04:44.460
- I'm pretty sure it's its own thing.


00:04:44.460 --> 00:04:46.880
I don't think it has a full operating system on it.


00:04:46.880 --> 00:04:49.520
- Yeah, it describes itself as a microcontroller, right?


00:04:49.520 --> 00:04:50.360
- Yeah.


00:04:50.360 --> 00:04:52.880
- So it's like more like MicroPython,


00:04:52.880 --> 00:04:55.080
Adafruit, AdaCircuit Python, so on.


00:04:55.080 --> 00:04:56.920
Yeah, it would be cool, but yeah, I don't know.


00:04:56.920 --> 00:04:58.680
It's pretty small, $4.


00:04:58.680 --> 00:05:00.520
- Yeah, I think it is running MicroPython,


00:05:00.520 --> 00:05:01.480
but I'm not sure.


00:05:01.480 --> 00:05:02.760
- Yeah, yeah, yeah, very cool.


00:05:02.760 --> 00:05:04.800
All right, well, I wanna talk about something brand new


00:05:04.800 --> 00:05:07.780
for the next item here, and that is Beanie.


00:05:07.780 --> 00:05:08.920
So I came across this yesterday,


00:05:08.920 --> 00:05:11.040
and actually I had some other thing I was gonna cover.


00:05:11.040 --> 00:05:12.240
I'm like, no, no, no, Beanie's cool.


00:05:12.240 --> 00:05:13.840
I wanna talk about Beanie.


00:05:13.840 --> 00:05:16.400
I'm pretty excited about it because I was recently talking


00:05:16.400 --> 00:05:17.560
with a friend of mine about,


00:05:17.560 --> 00:05:21.440
oh, what would you use with FastAPI and MongoDB?


00:05:21.440 --> 00:05:25.040
Well, the traditional ORMs, ODMs,


00:05:25.040 --> 00:05:27.200
they don't call them ORMs in Mongo


00:05:27.200 --> 00:05:29.560
because they don't map relations, they map documents.


00:05:29.560 --> 00:05:31.800
So they call them ODMs, object document mappers,


00:05:31.800 --> 00:05:32.680
but same idea.


00:05:32.680 --> 00:05:34.120
I was talking with him and saying,


00:05:34.120 --> 00:05:36.400
you know, it's like, well, what would you use with FastAPI?


00:05:36.400 --> 00:05:37.840
'Cause you really wanna leverage the async


00:05:37.840 --> 00:05:40.040
and await nature of the views,


00:05:40.040 --> 00:05:42.240
which is so easy to do there and whatnot.


00:05:42.240 --> 00:05:45.720
But I started looking all the old standbys that I like,


00:05:45.720 --> 00:05:47.760
Mongo engine and some of the others,


00:05:47.760 --> 00:05:52.560
the ORM, ODM side don't seem to be really supporting


00:05:52.560 --> 00:05:54.480
the async and await world.


00:05:54.480 --> 00:05:56.040
You start looking around, well, there's motor,


00:05:56.040 --> 00:05:59.960
which is the official async library from MongoDB,


00:05:59.960 --> 00:06:02.380
the company, the organization to support this.


00:06:02.380 --> 00:06:05.400
But the way you program there is I run a query


00:06:05.400 --> 00:06:07.720
as sort of almost like SQL syntax


00:06:07.720 --> 00:06:10.240
and I get back a Python dictionary, which is okay,


00:06:10.240 --> 00:06:12.460
but I don't really like that style.


00:06:12.460 --> 00:06:14.060
Really like getting a class back,


00:06:14.060 --> 00:06:15.500
be able to do queries with the class,


00:06:15.500 --> 00:06:18.660
have the class have like types and constraints and whatnot.


00:06:18.660 --> 00:06:20.100
'Cause if you're just working with dictionaries,


00:06:20.100 --> 00:06:21.980
it's so easy to like forget to set it.


00:06:21.980 --> 00:06:24.200
I know a field you didn't remember existed


00:06:24.200 --> 00:06:26.500
or something weird like that and get inconsistent data.


00:06:26.500 --> 00:06:28.500
So I ran across this thing called Beanie,


00:06:28.500 --> 00:06:32.860
which is an async friendly ODM for MongoDB.


00:06:32.860 --> 00:06:35.460
And we've talked a lot about Pydantic.


00:06:35.460 --> 00:06:36.620
Pydantic's awesome, right?


00:06:36.620 --> 00:06:37.460
- Yeah. - Yeah.


00:06:37.460 --> 00:06:41.860
So with Beanie, it basically takes and uses Pydantic models


00:06:41.860 --> 00:06:44.820
as the classes that map to the database.


00:06:44.820 --> 00:06:46.460
And I think that's just super cool.


00:06:46.460 --> 00:06:47.300
- Very cool.


00:06:47.300 --> 00:06:50.520
- Yeah, so let me see if I can pull up some examples here.


00:06:50.520 --> 00:06:53.460
So the idea is that with the document databases,


00:06:53.460 --> 00:06:54.680
you can embed stuff.


00:06:54.680 --> 00:06:58.360
So I might have one class that's containing a list


00:06:58.360 --> 00:06:59.980
of other classes I define,


00:06:59.980 --> 00:07:01.860
and that just is a record in the database.


00:07:01.860 --> 00:07:04.980
So the way it works with Beanie is you create anything


00:07:04.980 --> 00:07:06.180
that derives from base model.


00:07:06.180 --> 00:07:09.440
that means it's a Pydantic model with all the validation


00:07:09.440 --> 00:07:11.520
and loading and stuff that you get from that world.


00:07:11.520 --> 00:07:13.640
And then you have a top level document


00:07:13.640 --> 00:07:15.640
that derives from this beanie.document,


00:07:15.640 --> 00:07:18.500
which is really just a specialization of a Pydantic model.


00:07:18.500 --> 00:07:20.760
So everything you do with Pydantic happens here.


00:07:20.760 --> 00:07:23.840
And then you actually just work with the motor async driver,


00:07:23.840 --> 00:07:26.840
which is the official in quotes way to talk


00:07:26.840 --> 00:07:29.120
to MongoDB asynchronously from Python.


00:07:29.120 --> 00:07:32.040
And then you can create a class, embed your objects,


00:07:32.040 --> 00:07:36.240
hit save, you can go and just go to your document


00:07:36.240 --> 00:07:39.160
and just say insert one as a class, insert many,


00:07:39.160 --> 00:07:42.360
you can do filters, you can do like get by ID,


00:07:42.360 --> 00:07:45.780
or you can say do a find query or something like that.


00:07:45.780 --> 00:07:47.600
So yeah, I think it's pretty neat


00:07:47.600 --> 00:07:50.760
that it allows you to take this sort of blended,


00:07:50.760 --> 00:07:54.360
it's like half ORM, ODM, and half sort of just working


00:07:54.360 --> 00:07:56.700
directly with the MongoDB API.


00:07:56.700 --> 00:07:58.120
And yeah, it's pretty neat.


00:07:58.120 --> 00:08:00.480
One of the big notable things that I feel like


00:08:00.480 --> 00:08:03.640
gets kind of missing is it doesn't support


00:08:03.640 --> 00:08:07.200
creating and managing indexes through this object model.


00:08:07.200 --> 00:08:09.480
But I was talking to the guy who created it,


00:08:09.480 --> 00:08:11.560
Roman Wright, on GitHub, and he's like,


00:08:11.560 --> 00:08:12.400
"Yeah, that's a good idea.


00:08:12.400 --> 00:08:14.200
"It's like one of the next things I'm thinking about."


00:08:14.200 --> 00:08:15.480
So pretty cool.


00:08:15.480 --> 00:08:17.080
If you're doing stuff with MongoDB


00:08:17.080 --> 00:08:20.720
and you like Pydantic, here's an exciting new project


00:08:20.720 --> 00:08:21.640
that people can check out.


00:08:21.640 --> 00:08:24.580
It even has capabilities for the aggregation model,


00:08:24.580 --> 00:08:27.280
which is like map, reduce, plus sort of


00:08:27.280 --> 00:08:30.280
that kind of processing, which often doesn't show up


00:08:30.280 --> 00:08:31.240
in these ODMs.


00:08:31.240 --> 00:08:32.480
So people can check it out.


00:08:32.480 --> 00:08:33.960
It's growing.


00:08:33.960 --> 00:08:35.520
It was almost brand new yesterday,


00:08:35.520 --> 00:08:36.880
and now it's up to 25 stars.


00:08:36.880 --> 00:08:38.640
So it's not super, super popular,


00:08:38.640 --> 00:08:41.640
but it's like 25 times more popular than it was yesterday.


00:08:41.640 --> 00:08:43.160
So that's pretty cool.


00:08:43.160 --> 00:08:44.440
It's on a good track.


00:08:44.440 --> 00:08:45.680
- I got a question about indexes.


00:08:45.680 --> 00:08:48.240
So if you, even if it didn't support it,


00:08:48.240 --> 00:08:50.880
could you go around and just request them anyway?


00:08:50.880 --> 00:08:51.720
- Yeah, no problem.


00:08:51.720 --> 00:08:54.080
You could go to like Motor and do it in Python.


00:08:54.080 --> 00:08:55.440
Say create index at this, you know,


00:08:55.440 --> 00:08:57.380
like it's not create, it's ensure index,


00:08:57.380 --> 00:08:59.840
like create if does not exist index


00:08:59.840 --> 00:09:02.360
during app startup, or you just literally could go


00:09:02.360 --> 00:09:05.120
to the database and actually use some management tool


00:09:05.120 --> 00:09:06.120
and create the indexes there.


00:09:06.120 --> 00:09:08.300
So it's not like you can't use indexes.


00:09:08.300 --> 00:09:10.960
It's just like, if you're defining the whole model,


00:09:10.960 --> 00:09:12.960
it would be cool if it could just happen


00:09:12.960 --> 00:09:14.400
as part of the class definition.


00:09:14.400 --> 00:09:17.600
As many things do, like SQLAlchemy does that,


00:09:17.600 --> 00:09:18.760
Mongo engine does that, right?


00:09:18.760 --> 00:09:20.800
It's a pretty standard paradigm here.


00:09:20.800 --> 00:09:21.720
So I don't know.


00:09:21.720 --> 00:09:22.560
What do you guys think?


00:09:22.560 --> 00:09:26.220
- I kind of really like the idea of having an ODMB,


00:09:26.220 --> 00:09:27.960
like this hybrid model of like,


00:09:27.960 --> 00:09:31.040
it's not really taking over, hiding Mongo


00:09:31.040 --> 00:09:33.640
because Mongo's actually not that hard to deal with anyway.


00:09:33.640 --> 00:09:36.400
It's adding some of these class wrappers


00:09:36.400 --> 00:09:39.520
and giving you a lot of the power of Mongo at the same time.


00:09:39.520 --> 00:09:40.340
- Yeah, for sure.


00:09:40.340 --> 00:09:42.280
And you can see like actually the document


00:09:42.280 --> 00:09:43.880
or the blog post that announces this


00:09:43.880 --> 00:09:46.040
rather than the GitHub repo has a few examples


00:09:46.040 --> 00:09:47.060
and they're all FastAPI.


00:09:47.060 --> 00:09:50.320
Like you have an asynchronous API endpoint


00:09:50.320 --> 00:09:54.120
and then you await note.create, which saves it.


00:09:54.120 --> 00:09:57.000
Or you can await like a query.


00:09:57.000 --> 00:09:58.000
Let me see if, yeah.


00:09:58.000 --> 00:10:00.480
Anyway, you can await queries and things like that,


00:10:00.480 --> 00:10:02.080
which is the really cool thing.


00:10:02.080 --> 00:10:04.720
So pedantic plus async and await, pretty neat.


00:10:04.720 --> 00:10:06.080
- Yeah, that's pretty cool.


00:10:06.080 --> 00:10:07.720
Especially the list of features that you show,


00:10:07.720 --> 00:10:10.360
it's pretty impressive for such a new project.


00:10:10.360 --> 00:10:12.040
- Yeah, yeah, this guy Roman,


00:10:12.040 --> 00:10:14.200
apparently he comments in here,


00:10:14.200 --> 00:10:16.240
like this is something I've been using for myself


00:10:16.240 --> 00:10:17.760
for a while and it's really awesome.


00:10:17.760 --> 00:10:19.080
So now I'm just sort of putting it out there.


00:10:19.080 --> 00:10:20.280
Hopefully it grows from that.


00:10:20.280 --> 00:10:21.480
So that's pretty cool.


00:10:21.480 --> 00:10:24.800
- So you work with async more than I have.


00:10:24.800 --> 00:10:27.160
Is this something that I could, if you want,


00:10:27.160 --> 00:10:29.040
like to start playing with it,


00:10:29.040 --> 00:10:31.000
would you have to jump into the async world


00:10:31.000 --> 00:10:33.680
or could you use Beanie without async stuff?


00:10:33.680 --> 00:10:35.280
- You know, I hadn't really thought about it.


00:10:35.280 --> 00:10:39.520
Looking at it, it looks like it has to be async.


00:10:39.520 --> 00:10:41.920
Right, because the queries, like the find one,


00:10:41.920 --> 00:10:44.440
create and so on, they all are awaitable.


00:10:44.440 --> 00:10:46.280
They're all being awaited.


00:10:46.280 --> 00:10:49.760
And I don't see a way, just quickly glancing at it,


00:10:49.760 --> 00:10:51.480
to say, don't be that, you know what I mean?


00:10:51.480 --> 00:10:53.400
Like I don't see how it's both at the same time.


00:10:53.400 --> 00:10:56.160
And if it is, you probably have to use it.


00:10:56.160 --> 00:11:01.040
So I'm guessing actually you do have to use it as NSAsync,


00:11:01.040 --> 00:11:02.080
but I don't know for sure.


00:11:02.080 --> 00:11:04.040
I haven't tried it well enough.


00:11:04.040 --> 00:11:05.000
It's a good question.


00:11:05.000 --> 00:11:06.960
All right, well, speaking of good stuff,


00:11:06.960 --> 00:11:09.480
something I've talked about on Python,


00:11:09.480 --> 00:11:11.320
but not on Python Bytes.


00:11:11.320 --> 00:11:13.200
So Sebastian is gonna tell you guys


00:11:13.200 --> 00:11:15.280
about something over there, right?


00:11:15.280 --> 00:11:16.240
That we talked about over there.


00:11:16.240 --> 00:11:18.520
- Yeah, so I wanted to talk about a tool


00:11:18.520 --> 00:11:19.920
that I have been using for a long time.


00:11:19.920 --> 00:11:22.720
And I know that you, Michael, are familiar with it


00:11:22.720 --> 00:11:25.720
because you already covered-- - I'm a huge fan of code quality,


00:11:25.720 --> 00:11:27.720
refactoring, all that kind of stuff.


00:11:27.720 --> 00:11:29.720
Having your editor tell you, "This could be better.


00:11:29.720 --> 00:11:31.720
Press this button to make it happen."


00:11:31.720 --> 00:11:34.720
- Yeah, exactly. That's why I absolutely love this tool


00:11:34.720 --> 00:11:38.720
because it's one level above, let's say, linters.


00:11:38.720 --> 00:11:42.720
When you're using PyLint or Flake 8, you get some warning saying,


00:11:42.720 --> 00:11:44.720
"Look, this is wrong." And then there is Sorcery


00:11:44.720 --> 00:11:47.720
that tries to make your code better.


00:11:47.720 --> 00:11:50.720
It gives you refactoring tooltips just as you type.


00:11:50.720 --> 00:11:53.020
So for example, if you scroll a bit down there,


00:11:53.020 --> 00:11:55.300
there is some GIF showing what it can do.


00:11:55.300 --> 00:11:58.460
And for example, if you have like an if statement


00:11:58.460 --> 00:12:01.980
and both branches have the same statement,


00:12:01.980 --> 00:12:03.700
you will get a pop-up saying that,


00:12:03.700 --> 00:12:05.500
look, this can be moved outside.


00:12:05.500 --> 00:12:07.660
Or for example, when you have like a for loop,


00:12:07.660 --> 00:12:09.980
you will get a recommendation saying,


00:12:09.980 --> 00:12:12.160
hey, this can be turned into a list comprehension.


00:12:12.160 --> 00:12:14.380
So I really like it.


00:12:14.380 --> 00:12:17.880
And it integrates, I think, with PyCharm and VS Code.


00:12:17.880 --> 00:12:19.900
So I don't know about Vim.


00:12:19.900 --> 00:12:22.780
I don't think there is any support right now for stuff like that.


00:12:22.780 --> 00:12:25.980
And it's super easy to use because you just got a pop-up


00:12:25.980 --> 00:12:28.860
and you can click, "Yes, I want to have this refactoring."


00:12:28.860 --> 00:12:33.980
You can see the diff of how it will look after the refactoring.


00:12:33.980 --> 00:12:39.620
And yeah, also, it's free to use, at least in the code editor.


00:12:39.620 --> 00:12:43.020
I think they have the pricing tab, but I think you can pay


00:12:43.020 --> 00:12:46.900
to have analytics for your project


00:12:46.900 --> 00:12:50.100
and set it up with like continuous integration servers and stuff like that.


00:12:50.100 --> 00:12:53.380
But for like VS Code and PyCharm, it's free to use.


00:12:53.380 --> 00:12:57.940
Yeah, it looks like you get a couple of extra refactorings


00:12:57.940 --> 00:12:59.940
and whole project analysis for money.


00:12:59.940 --> 00:13:03.860
Yeah, but like the basic refactorings that can already help you a lot,


00:13:03.860 --> 00:13:04.900
they are there for free.


00:13:04.900 --> 00:13:08.740
And at least for me, I just keep getting constant pop-ups


00:13:08.740 --> 00:13:10.740
saying like this code can be refactored.


00:13:10.740 --> 00:13:13.300
So I mean, maybe I'm a terrible programmer,


00:13:13.300 --> 00:13:15.620
but sometimes I'm like tired and I don't see something.


00:13:15.620 --> 00:13:20.820
So it's nice to just click one thing and have like three lines of code turn into one line.


00:13:20.820 --> 00:13:24.580
So that's pretty awesome. I don't know. Yeah. Brian, have you used it? Because I know that


00:13:24.580 --> 00:13:28.580
Michael had. I haven't used it yet, but I'm pretty excited. It looks pretty fun.


00:13:28.580 --> 00:13:32.260
Yeah, it looks really neat. And like I said, I did interview the guys over there on the show


00:13:32.260 --> 00:13:36.580
about what they're doing. And I believe that all the like one of the things that some people have


00:13:36.580 --> 00:13:40.580
worried about is these kinds of tools sometimes, you know, especially the ones that try to use


00:13:40.580 --> 00:13:45.460
like AI ML to help you. I don't think that this is one of those. They'll end up sending


00:13:45.460 --> 00:13:49.180
and I think this is all just local stuff, which is nice.


00:13:49.180 --> 00:13:51.420
- Yeah, I guess that was one of my questions.


00:13:51.420 --> 00:13:54.700
I often run, you know, I often do a lot of coding


00:13:54.700 --> 00:13:58.060
on my laptop with it, with no wifi connection or anything.


00:13:58.060 --> 00:14:00.140
Can I, does this help at all?


00:14:00.140 --> 00:14:01.620
- I'm pretty sure, I don't think it makes any,


00:14:01.620 --> 00:14:03.980
I don't think it uses the internet to do its magic.


00:14:03.980 --> 00:14:05.540
So I think it's all just in the editor


00:14:05.540 --> 00:14:06.940
and PyCharm or RPS code.


00:14:06.940 --> 00:14:08.380
Yeah, I'm pretty sure that's the case.


00:14:08.380 --> 00:14:11.140
But the one thing, so I used this for a while


00:14:11.140 --> 00:14:11.960
and I liked it.


00:14:11.960 --> 00:14:13.300
The one thing that drove me crazy


00:14:13.300 --> 00:14:15.060
and possibly it's been fixed,


00:14:15.060 --> 00:14:17.680
is there's one or two recommendations.


00:14:17.680 --> 00:14:20.060
Like a lot of the recommendations it makes are great,


00:14:20.060 --> 00:14:22.220
but there's one or two that I really didn't like.


00:14:22.220 --> 00:14:25.960
I think, for example, I was using a guarding clause.


00:14:25.960 --> 00:14:27.340
So I would say, coming in method,


00:14:27.340 --> 00:14:28.180
the very first thing is like,


00:14:28.180 --> 00:14:30.620
if something's wrong, return and there's an error,


00:14:30.620 --> 00:14:32.480
and then go do the thing I was really wanting to do.


00:14:32.480 --> 00:14:33.740
So it's not indented.


00:14:33.740 --> 00:14:35.020
I really like that style.


00:14:35.020 --> 00:14:37.660
And it was suggesting that I like include,


00:14:37.660 --> 00:14:40.380
like I reverse that if, so I don't have as many,


00:14:40.380 --> 00:14:44.340
as much cycle, not cycle, as many decision points, right?


00:14:44.340 --> 00:14:47.180
there's not as many branches as going on there.


00:14:47.180 --> 00:14:49.300
And that's fine, I just don't have to accept it,


00:14:49.300 --> 00:14:50.520
it doesn't automatically do it.


00:14:50.520 --> 00:14:52.940
But it constantly was highlighting that with like squiggles


00:14:52.940 --> 00:14:54.620
as if something was wrong in my editor.


00:14:54.620 --> 00:14:56.940
And other tools like PyCharm do that.


00:14:56.940 --> 00:14:58.400
You could just say, you know what, for this thing,


00:14:58.400 --> 00:15:00.060
please don't tell me that this is the fix


00:15:00.060 --> 00:15:03.420
'cause I really want this to be here for reason X, Y, and Z.


00:15:03.420 --> 00:15:06.180
I couldn't find a way to do that in Sorcery


00:15:06.180 --> 00:15:07.860
and it was driving me crazy.


00:15:07.860 --> 00:15:09.500
I'm like, no, this is not wrong,


00:15:09.500 --> 00:15:11.740
please like stop telling me it's wrong.


00:15:11.740 --> 00:15:13.700
So I really hope, you know, if they're listening,


00:15:13.700 --> 00:15:17.660
Maybe you could hint and add like a hash ignore sorcery line


00:15:17.660 --> 00:15:20.540
type of thing like all the other editors have.


00:15:20.540 --> 00:15:22.980
But yeah, no, I do think it's a cool tool


00:15:22.980 --> 00:15:25.380
and people should check it out if it sounds interesting.


00:15:25.380 --> 00:15:27.380
- Yeah, it'll be nice to have this configurable,


00:15:27.380 --> 00:15:30.300
stop complaining about this refactoring.


00:15:30.300 --> 00:15:32.900
- Right, or either I would even be happy to just say,


00:15:32.900 --> 00:15:34.340
please don't tell me about,


00:15:34.340 --> 00:15:36.340
'cause it was like very specific,


00:15:36.340 --> 00:15:38.300
like one very small suggestion,


00:15:38.300 --> 00:15:40.140
like just don't suggest that to me ever.


00:15:40.140 --> 00:15:41.460
Like I don't ever want that.


00:15:41.460 --> 00:15:43.500
But everything else you do, I love you, thank you.


00:15:43.500 --> 00:15:45.080
(laughing)


00:15:45.080 --> 00:15:46.620
- Nice, yeah.


00:15:46.620 --> 00:15:48.780
John Sheehan has a comment.


00:15:48.780 --> 00:15:50.620
Some code efficiency improvements


00:15:50.620 --> 00:15:52.620
could end up obfuscating intent.


00:15:52.620 --> 00:15:54.740
Absolutely, for sure, they definitely could.


00:15:54.740 --> 00:15:56.260
I feel like a lot of what it's suggesting


00:15:56.260 --> 00:15:58.540
actually is a clarifying change.


00:15:58.540 --> 00:16:00.060
It's like, look, you're duplicating this code


00:16:00.060 --> 00:16:01.700
or this is overly indented.


00:16:01.700 --> 00:16:02.940
Here's how you change it so it's not.


00:16:02.940 --> 00:16:04.540
So I feel like on that regard,


00:16:04.540 --> 00:16:05.500
Sourcery is really good.


00:16:05.500 --> 00:16:07.180
- Yeah, same, I have the same feeling.


00:16:07.180 --> 00:16:08.860
Like it doesn't try to give you


00:16:08.860 --> 00:16:11.360
like very quirky refactorings.


00:16:11.360 --> 00:16:14.120
it's actually tries to make your code easier


00:16:14.120 --> 00:16:17.480
by like removing redundant lines and stuff like that.


00:16:17.480 --> 00:16:19.200
- Yeah. - Very good point.


00:16:19.200 --> 00:16:22.760
- But a tool like this that could make it more obfuscated.


00:16:22.760 --> 00:16:23.600
Now there's something that we can find.


00:16:23.600 --> 00:16:25.480
- There's job security right there, baby.


00:16:25.480 --> 00:16:26.320
- Yeah, yeah.


00:16:26.320 --> 00:16:28.360
- Command + Alt + L, reformat for.


00:16:28.360 --> 00:16:31.080
- Reformat for Brian. - Exactly.


00:16:31.080 --> 00:16:34.600
I know we can work on this project, but so and so.


00:16:34.600 --> 00:16:36.120
Quickly reformat it to viewable,


00:16:36.120 --> 00:16:37.560
work on it and re-encode it.


00:16:37.560 --> 00:16:39.560
Perfect. - Yeah, that'd be cool.


00:16:39.560 --> 00:16:40.400
- Yeah.


00:16:41.240 --> 00:16:43.520
Something else that's awesome is Linode.


00:16:43.520 --> 00:16:44.520
- Thank you, Linode.


00:16:44.520 --> 00:16:46.480
- Thank you for sponsoring the episode.


00:16:46.480 --> 00:16:48.560
Simplify your infrastructure and cut your cloud bills


00:16:48.560 --> 00:16:51.280
in half with Linode's Linux virtual machines.


00:16:51.280 --> 00:16:53.680
Develop, deploy, and scale your modern applications


00:16:53.680 --> 00:16:54.880
faster and easier.


00:16:54.880 --> 00:16:56.620
Whether you're developing a personal project


00:16:56.620 --> 00:16:58.440
or managing larger workloads,


00:16:58.440 --> 00:16:59.960
you deserve simple, affordable,


00:16:59.960 --> 00:17:02.780
and accessible cloud computing solutions.


00:17:02.780 --> 00:17:04.480
As a listener of Python Bytes,


00:17:04.480 --> 00:17:06.480
you'll get a $100 free credit.


00:17:06.480 --> 00:17:10.600
You can find all the details at pythonbytes.fm/linode.


00:17:10.600 --> 00:17:15.200
Linode has data centers around the world with the same simple and consistent pricing regardless


00:17:15.200 --> 00:17:16.200
of location.


00:17:16.200 --> 00:17:17.200
That's cool.


00:17:17.200 --> 00:17:19.600
Choose the data center nearest to your users.


00:17:19.600 --> 00:17:25.520
You also receive 24/7/365 human support with no tiers or handoffs regardless of your plan


00:17:25.520 --> 00:17:26.520
size.


00:17:26.520 --> 00:17:30.760
You can choose shared or dedicated compute instances, or you can use your $100 credit


00:17:30.760 --> 00:17:35.600
on an S3 compatible object storage, manage Kubernetes, and more.


00:17:35.600 --> 00:17:37.960
If it runs on Linux, it runs on Linode.


00:17:37.960 --> 00:17:43.080
pythonbytes.fm/linode and click on the create free account button to get started.


00:17:43.080 --> 00:17:46.520
Absolutely. You know what I like about Linode? It's like straightforward and simple.


00:17:46.520 --> 00:17:51.320
I go to places like AWS, I'm like, what is all this stuff? And why am I like so deep in the


00:17:51.320 --> 00:17:56.280
permissions of AIMs in order to send an email over here to connect? Like, it's just, ah, like,


00:17:56.280 --> 00:17:58.680
I just want to create a server, make it go. Let's do that.


00:17:58.680 --> 00:18:01.320
Nice. Are we there?


00:18:01.320 --> 00:18:01.960
We're there.


00:18:01.960 --> 00:18:02.600
We're there.


00:18:02.600 --> 00:18:03.320
We're there.


00:18:03.320 --> 00:18:03.720
Okay.


00:18:03.720 --> 00:18:06.040
We're on to your next item, I believe. Wait.


00:18:06.040 --> 00:18:07.960
No, we're not, we're, I'm jumping ahead.


00:18:07.960 --> 00:18:08.960
We're on to my next item.


00:18:08.960 --> 00:18:10.840
So I'm going to feel back that.


00:18:10.840 --> 00:18:14.240
So I'm on a database kick for some reason this week.


00:18:14.240 --> 00:18:16.800
I mean, I love databases, which is weird because when I first learned them, they


00:18:16.800 --> 00:18:20.320
seemed so challenging and odd and I'd struggled with them, but I don't know.


00:18:20.320 --> 00:18:23.160
I just really enjoy thinking about databases because they, they're like


00:18:23.160 --> 00:18:24.920
the magic of your application, right?


00:18:24.920 --> 00:18:26.560
A really slow clunky database.


00:18:26.560 --> 00:18:27.640
We'll just like bring it down.


00:18:27.640 --> 00:18:31.360
But a really nice polished one is like, how is that so fast and smooth?


00:18:31.360 --> 00:18:32.760
Like I really like working with this site.


00:18:32.920 --> 00:18:35.120
So one that I haven't spoken much about,


00:18:35.120 --> 00:18:36.920
and honestly don't have a ton of experience with,


00:18:36.920 --> 00:18:38.920
but I do think is an interesting consideration,


00:18:38.920 --> 00:18:43.920
is another branch of the NoSQL world in graph databases.


00:18:43.920 --> 00:18:46.760
So instead of modeling columns,


00:18:46.760 --> 00:18:49.720
you're really modeling entities and then their relationships.


00:18:49.720 --> 00:18:52.240
Like the relationship thing is first class thing.


00:18:52.240 --> 00:18:54.280
You can query by relationships,


00:18:54.280 --> 00:18:56.840
instead of querying by data and then like joining and so on.


00:18:56.840 --> 00:19:00.120
So a popular one for this is Neo4j,


00:19:00.120 --> 00:19:02.760
and there's some nice ways to talk to it


00:19:02.760 --> 00:19:05.360
from Python and there's this, I don't even know what to call it.


00:19:05.360 --> 00:19:06.680
Oh GM, I guess is the right.


00:19:06.680 --> 00:19:09.360
And so I said, Oh, DM for object document mapper.


00:19:09.360 --> 00:19:12.600
So in the graph world, it's O GM for object graph map.


00:19:12.600 --> 00:19:15.400
So there's an object graph mapper called Neo model.


00:19:15.400 --> 00:19:18.260
And I ran across this and I'm just like, Oh, this is super cool.


00:19:18.260 --> 00:19:21.920
So the idea is that you can basically create these classes.


00:19:21.920 --> 00:19:25.560
And if you look at how you do it, it's if you've ever used Django or


00:19:25.560 --> 00:19:29.160
RM or Mongo engine or something like that, it's literally the same thing.


00:19:29.160 --> 00:19:32.360
So if you know, if you know Django or RM, you basically can do this.


00:19:32.560 --> 00:19:36.040
which is powerful because it gives you a whole different way to work with data


00:19:36.040 --> 00:19:38.660
and a whole different option without rethinking the world.


00:19:38.660 --> 00:19:42.220
So I could create, say, for example, a country, which is derived from


00:19:42.220 --> 00:19:45.760
structured node, and then just like Django, you would say code equals


00:19:45.760 --> 00:19:49.640
instead of string column, you would say string property, and it has a, an


00:19:49.640 --> 00:19:52.500
index, the index is uniqueness, the field is required, boom, that's it.


00:19:52.500 --> 00:19:54.900
Like one line field and it's defined.


00:19:54.900 --> 00:19:58.760
Then a person person might have a relationship back to a country and so


00:19:58.760 --> 00:20:02.200
on, and really, really neat the way you just sort of define this, and then


00:20:02.200 --> 00:20:04.640
you can do interesting queries on it.


00:20:04.640 --> 00:20:09.000
You can ask like, give me the nodes where,


00:20:09.000 --> 00:20:10.960
the person nodes where the name is Jim.


00:20:10.960 --> 00:20:12.280
And that's pretty simple.


00:20:12.280 --> 00:20:13.400
Or you can say, give me the nodes


00:20:13.400 --> 00:20:15.780
where the age is greater than three or whatever.


00:20:15.780 --> 00:20:19.720
But also you can ask things like, give me the country.


00:20:19.720 --> 00:20:21.440
So go Jim.country.


00:20:21.440 --> 00:20:22.600
Is that connected to Germany?


00:20:22.600 --> 00:20:23.420
Yes or no.


00:20:23.420 --> 00:20:25.360
If it is, then Jim is from Germany.


00:20:25.360 --> 00:20:27.400
Or you can go to Germany and say,


00:20:27.400 --> 00:20:28.840
give me all the inhabitants.


00:20:28.840 --> 00:20:30.800
And it'll tell you all the people in there.


00:20:30.800 --> 00:20:32.280
And you can even say things like,


00:20:32.280 --> 00:20:35.280
I would like all the people in Germany whose name is Jim.


00:20:35.280 --> 00:20:37.960
So Germany.inhabitant.search name equals Jim.


00:20:37.960 --> 00:20:40.320
Like an incredibly simple programming model


00:20:40.320 --> 00:20:42.920
to work with these graph databases.


00:20:42.920 --> 00:20:45.760
So if you've got like really structured related data,


00:20:45.760 --> 00:20:47.880
but you wanna like follow those relationships around,


00:20:47.880 --> 00:20:50.760
you know, maybe Postgres is not the best option


00:20:50.760 --> 00:20:51.600
for that kind of data.


00:20:51.600 --> 00:20:52.880
And this would be a good one.


00:20:52.880 --> 00:20:53.720
Cool, huh?


00:20:53.720 --> 00:20:56.200
Takes a bit of a mind bending getting used to it,


00:20:56.200 --> 00:20:57.160
but pretty neat.


00:20:57.160 --> 00:20:58.000
- Yeah.


00:20:58.000 --> 00:20:59.280
- Yeah, Sebastian, have you ever had to do anything


00:20:59.280 --> 00:21:00.720
with graph databases?


00:21:00.720 --> 00:21:03.720
- No, but when I was looking at your code examples,


00:21:03.720 --> 00:21:05.480
I was thinking why there is Django code,


00:21:05.480 --> 00:21:06.400
and then you started saying,


00:21:06.400 --> 00:21:07.600
yeah, it looks similar to Django,


00:21:07.600 --> 00:21:09.160
and I was like, okay.


00:21:09.160 --> 00:21:10.560
- Yeah, exactly, why is there Django code


00:21:10.560 --> 00:21:12.540
in my graph database?


00:21:12.540 --> 00:21:14.400
But I think that's a huge benefit


00:21:14.400 --> 00:21:15.520
for the Python world, right?


00:21:15.520 --> 00:21:18.640
Like a lot of people know the Django ORM model,


00:21:18.640 --> 00:21:20.440
or it's also the same as Mongo engine,


00:21:20.440 --> 00:21:23.520
which obviously is also inspired by Django's ORM.


00:21:23.520 --> 00:21:25.880
And so a really straightforward way,


00:21:25.880 --> 00:21:28.240
like I think you could get up to speed in an hour


00:21:28.240 --> 00:21:29.840
if you knew Django, working with this thing.


00:21:29.840 --> 00:21:31.080
It seems real straightforward.


00:21:31.080 --> 00:21:37.480
>> So it might be cool to see somebody do an example where they did the toy example


00:21:37.480 --> 00:21:46.880
in a graph database relational in a document to see what the trade-offs and benefits and things that are.


00:21:46.880 --> 00:21:51.800
>> Right. We've got that silly to-do app that everyone has used for


00:21:51.800 --> 00:21:54.040
JavaScript front-end frameworks to show like,


00:21:54.040 --> 00:21:57.240
here's how you build to-do in VueJS,


00:21:57.240 --> 00:21:58.320
here's how you build it in React.


00:21:58.320 --> 00:22:01.000
I think having like this canonical database represent it


00:22:01.000 --> 00:22:03.560
like side by side, like here's the Postgres version,


00:22:03.560 --> 00:22:05.860
here's the Neo4j version, all in Python,


00:22:05.860 --> 00:22:06.960
that would be an awesome article.


00:22:06.960 --> 00:22:09.800
Somebody had a bunch of time and desire.


00:22:09.800 --> 00:22:10.640
- Yeah.


00:22:10.640 --> 00:22:11.800
- Yeah, pretty cool, pretty cool.


00:22:11.800 --> 00:22:13.760
Now you can talk about your item.


00:22:13.760 --> 00:22:16.600
I didn't mean to shoot you too far ahead there.


00:22:16.600 --> 00:22:20.440
- No, so I lost my window.


00:22:20.440 --> 00:22:21.640
There it is.


00:22:21.640 --> 00:22:25.280
So I've been thinking about, I don't mock much.


00:22:25.280 --> 00:22:29.460
I, when I test, I try to test everything whenever I can,


00:22:29.460 --> 00:22:31.480
but I've been learning about mocks a little bit


00:22:31.480 --> 00:22:35.200
and mocking just because in some cases you kind of want to.


00:22:35.200 --> 00:22:38.960
So as I got into it, I didn't get very far


00:22:38.960 --> 00:22:41.520
before I realized that specking was like,


00:22:41.520 --> 00:22:43.960
like something that people found out about later,


00:22:43.960 --> 00:22:47.480
but sounds sort of magical and I wanted to know more.


00:22:47.480 --> 00:22:50.440
And I, and so I asked the Twitterverse,


00:22:50.440 --> 00:22:52.140
whoever follows me and stuff,


00:22:52.960 --> 00:22:55.800
If speccing is something that you should do always


00:22:55.800 --> 00:22:58.020
or avoid it, is there downsides?


00:22:58.020 --> 00:23:00.960
And then one of the things that I got back


00:23:00.960 --> 00:23:04.720
was a Stargirlflowers article called


00:23:04.720 --> 00:23:07.400
my Python Testing Style Guide,


00:23:07.400 --> 00:23:10.760
which includes this incredible section on mocking.


00:23:10.760 --> 00:23:13.960
And her section is, the section is called


00:23:13.960 --> 00:23:15.840
a mock must always have a spec.


00:23:15.840 --> 00:23:20.400
And it's just a really, if you've ever wondered about this,


00:23:20.400 --> 00:23:23.980
It's a really good discussion about mocking


00:23:23.980 --> 00:23:26.020
because it's not their evil,


00:23:26.020 --> 00:23:28.940
and it's also not go run out and use them.


00:23:28.940 --> 00:23:31.820
The recommendations really are use real objects


00:23:31.820 --> 00:23:34.420
for collaborators whenever possible.


00:23:34.420 --> 00:23:37.540
But if you must mock, always use auto spec.


00:23:37.540 --> 00:23:40.220
And so the idea around speccing or not speccing


00:23:40.220 --> 00:23:43.820
is if I create a mock object, it can be anything.


00:23:43.820 --> 00:23:45.980
I can ask it for the date,


00:23:45.980 --> 00:23:48.940
I can ask it for the temperature of my coffee,


00:23:48.940 --> 00:23:51.420
I can ask it for anything or I can pass it anything


00:23:51.420 --> 00:23:52.340
and it'll accept it.


00:23:52.340 --> 00:23:53.860
That's kind of what mocks do.


00:23:53.860 --> 00:23:56.500
But if you say auto spec, you say,


00:23:56.500 --> 00:23:59.680
I want this thing to mock this other class


00:23:59.680 --> 00:24:01.500
and have auto spec be true.


00:24:01.500 --> 00:24:04.020
It means I can't do anything to that class,


00:24:04.020 --> 00:24:07.620
that mocked class that I couldn't do to the real thing.


00:24:07.620 --> 00:24:10.180
So all the interface is identical.


00:24:10.180 --> 00:24:12.860
You can't do functions that aren't there.


00:24:12.860 --> 00:24:14.820
And that's where I thought, well, that seems like a good


00:24:14.820 --> 00:24:17.420
thing and apparently it is.


00:24:17.420 --> 00:24:19.580
- I think it's a good thing because you would like


00:24:19.580 --> 00:24:22.420
your test to at least require a thing behaves


00:24:22.420 --> 00:24:23.540
like the real thing, right?


00:24:23.540 --> 00:24:24.940
It might not give the real data back,


00:24:24.940 --> 00:24:26.780
but you shouldn't be able to call functions


00:24:26.780 --> 00:24:29.740
that don't exist or access fields that don't exist and so on.


00:24:29.740 --> 00:24:32.140
- And more importantly, one of the things


00:24:32.140 --> 00:24:34.700
that's highlighted in this article is,


00:24:34.700 --> 00:24:37.260
even if you could manually get it just right,


00:24:37.260 --> 00:24:39.300
later you might change the interface.


00:24:39.300 --> 00:24:41.940
You might change the API call, add a function


00:24:41.940 --> 00:24:44.060
or add a parameter that's required


00:24:44.060 --> 00:24:46.900
or remove a parameter that's not needed anymore.


00:24:46.900 --> 00:24:50.620
And your tests that use the mock that are custom built


00:24:50.620 --> 00:24:53.740
are still passing, but they shouldn't be.


00:24:53.740 --> 00:24:58.740
And with AutoSpec, your test will fail at that point


00:24:58.740 --> 00:25:02.340
when the interface's break happens.


00:25:02.340 --> 00:25:04.340
- Wait, you run your tests more than once?


00:25:04.340 --> 00:25:05.300
(laughing)


00:25:05.300 --> 00:25:09.020
No, of course, obviously, this is why you,


00:25:09.020 --> 00:25:11.540
one of the main values is this thing is locked down,


00:25:11.540 --> 00:25:13.980
I wanna be able to make dramatic changes to it


00:25:13.980 --> 00:25:15.220
and see that it hangs together.


00:25:15.220 --> 00:25:17.620
And if things like rename a function


00:25:17.620 --> 00:25:20.340
has no effect on the test path, that's not so good.


00:25:20.340 --> 00:25:22.580
- Yeah, and then there's a whole bunch of other great advice


00:25:22.580 --> 00:25:25.680
that she gives around mocking, talks about,


00:25:25.680 --> 00:25:27.460
consider using stubs and fakes,


00:25:27.460 --> 00:25:29.940
and even gives an example of what those are.


00:25:29.940 --> 00:25:33.060
And basically it's like writing your own little tiny thing


00:25:33.060 --> 00:25:36.180
to substitute for the real thing.


00:25:36.180 --> 00:25:37.620
And spies, which are cool,


00:25:37.620 --> 00:25:40.180
spies are like a mock wrapper around a real object.


00:25:40.180 --> 00:25:42.180
So it behaves the same as it always did,


00:25:42.180 --> 00:25:44.700
but you can interrogate like how it was called.


00:25:44.700 --> 00:25:46.500
That's kind of a neat thing.


00:25:46.500 --> 00:25:48.940
And some advice that I didn't really consider before


00:25:48.940 --> 00:25:51.880
is to, the code, test code is way cleaner


00:25:51.880 --> 00:25:54.780
if you don't give the mocks special names.


00:25:54.780 --> 00:25:56.900
Like a lot of people, if I wanted to mock Foo,


00:25:56.900 --> 00:25:59.740
I might kind of title it mock Foo.


00:25:59.740 --> 00:26:01.620
And she says, don't do that.


00:26:01.620 --> 00:26:04.300
Just name it Foo, then your code looks a lot cleaner.


00:26:04.300 --> 00:26:06.300
And I tried it out and it does really great.


00:26:06.300 --> 00:26:07.700
- Nice. - It does help out.


00:26:07.700 --> 00:26:09.420
Anyway, great advice on mocking.


00:26:09.420 --> 00:26:11.980
So if you're considering mocking, go read that.


00:26:11.980 --> 00:26:13.460
- And if you're doing unit testing


00:26:13.460 --> 00:26:16.120
and you want to not test all of your dependencies,


00:26:16.120 --> 00:26:17.860
basically, if you don't want to do integration tests,


00:26:17.860 --> 00:26:19.460
you probably should be doing something like this.


00:26:19.460 --> 00:26:21.260
- Yeah, I mean, I hardly ever use them.


00:26:21.260 --> 00:26:24.860
I do things like rerouting my code through,


00:26:24.860 --> 00:26:26.940
like any, I kind of design it into my code


00:26:26.940 --> 00:26:28.700
if I have a chance.


00:26:28.700 --> 00:26:31.480
Like for instance, if I need to have a,


00:26:31.480 --> 00:26:34.100
I know anything with a database,


00:26:34.100 --> 00:26:35.900
I know I'm gonna have to redirect the database


00:26:35.900 --> 00:26:38.340
during testing, so that's just built into the design


00:26:38.340 --> 00:26:40.980
of the system to be able to reroute that somewhere.


00:26:40.980 --> 00:26:42.340
- Yeah, Sebastian, what do you think?


00:26:42.340 --> 00:26:44.500
- Yeah, that's a bunch of good advice.


00:26:44.500 --> 00:26:47.100
So that's a very good article.


00:26:47.100 --> 00:26:48.900
And I kind of agree with you.


00:26:48.900 --> 00:26:51.140
Like I also prefer to kind of like


00:26:51.140 --> 00:26:53.660
mock a specific method of a real object,


00:26:53.660 --> 00:26:56.700
not to create a mock and then add stuff around.


00:26:56.700 --> 00:26:58.560
Although I think it's a different word


00:26:58.560 --> 00:26:59.900
for mocking a method.


00:26:59.900 --> 00:27:01.680
It's a stab or one of those words.


00:27:01.680 --> 00:27:04.580
I could never remember which one is which.


00:27:04.580 --> 00:27:05.660
- Yeah, yeah, for sure.


00:27:05.660 --> 00:27:09.700
And then Robert Robertson is getting philosophical here.


00:27:09.700 --> 00:27:12.060
Says a mock must always have a spec.


00:27:12.060 --> 00:27:13.780
Will they add that to the Zen of Python?


00:27:13.780 --> 00:27:14.620
I don't know.


00:27:14.620 --> 00:27:16.140
- In Python 4.0.


00:27:16.140 --> 00:27:16.960
- Yeah, exactly.


00:27:16.960 --> 00:27:19.340
These are two things that are very unlikely.


00:27:19.340 --> 00:27:22.060
- Zen is not extensible.


00:27:22.060 --> 00:27:23.380
- Yeah, possibly.


00:27:23.380 --> 00:27:26.260
Oh, also Dean was asking if the episode started,


00:27:26.260 --> 00:27:27.940
the live stream started early today.


00:27:27.940 --> 00:27:31.940
Hey Dean, daylight savings mismatched by a few weeks


00:27:31.940 --> 00:27:34.420
with the rest of the world, at least with Europe.


00:27:34.420 --> 00:27:35.620
Yeah, exactly.


00:27:35.620 --> 00:27:36.700
That's the story.


00:27:36.700 --> 00:27:39.500
All right, speaking of time zones


00:27:39.500 --> 00:27:40.660
and stuff that's challenging,


00:27:40.660 --> 00:27:43.060
Speaking at conferences can be tricky


00:27:43.060 --> 00:27:44.780
'cause it's virtual, you're not actually there.


00:27:44.780 --> 00:27:46.000
So when does it really start?


00:27:46.000 --> 00:27:48.020
Well, maybe at least we can know which ones are out there


00:27:48.020 --> 00:27:50.420
and when the call for proposals are done, huh, Sebastian?


00:27:50.420 --> 00:27:53.060
- Yeah, so yeah, as you said,


00:27:53.060 --> 00:27:57.420
since the PyCon call for proposal acceptance emails


00:27:57.420 --> 00:27:59.820
will be sent this week, I was thinking about conferences.


00:27:59.820 --> 00:28:04.180
And since it's 2021, most conferences are moving online,


00:28:04.180 --> 00:28:07.660
which is really cool 'cause, well, they are cheaper.


00:28:07.660 --> 00:28:09.260
Well, first of all, tickets are cheaper.


00:28:09.260 --> 00:28:11.900
A lot of them are free, then you don't have to pay for the accommodation,


00:28:11.900 --> 00:28:14.940
you don't have to pay for the ticket, you don't have to fly,


00:28:14.940 --> 00:28:16.140
so you don't have to take holidays.


00:28:16.140 --> 00:28:18.460
So a lot of benefits.


00:28:18.460 --> 00:28:22.900
And I was wondering, how do you find conferences to attend?


00:28:22.900 --> 00:28:27.660
There is this list at python.org that lists some conferences,


00:28:27.660 --> 00:28:30.660
but it doesn't have the smaller local events,


00:28:30.660 --> 00:28:32.460
and you also don't have dates.


00:28:32.460 --> 00:28:37.060
So you only have links to all the global, countrywide conferences,


00:28:37.060 --> 00:28:38.540
but you don't know when they are starting.


00:28:38.540 --> 00:28:41.300
So I found this tool called Conference Radar,


00:28:41.300 --> 00:28:44.880
and it's a PyPI package that you can install,


00:28:44.880 --> 00:28:47.880
and then you get a command line tool that you can run


00:28:47.880 --> 00:28:49.740
to get a list of upcoming conferences,


00:28:49.740 --> 00:28:51.640
which is pretty cool,


00:28:51.640 --> 00:28:54.480
especially that you can have some parameters,


00:28:54.480 --> 00:28:57.820
like you can get a list of conferences


00:28:57.820 --> 00:28:59.660
that have opened the call for proposals.


00:28:59.660 --> 00:29:01.580
So if you want to submit a talk,


00:29:01.580 --> 00:29:04.420
you can see which conferences are accepting those.


00:29:04.420 --> 00:29:07.500
And I really like it that you get this nice ASCII table


00:29:07.500 --> 00:29:10.120
in the terminal, since I love CLI tools,


00:29:10.120 --> 00:29:12.420
this is really cool for me to use.


00:29:12.420 --> 00:29:13.340
- Yeah, yeah.


00:29:13.340 --> 00:29:14.980
I think these integrate some rich,


00:29:14.980 --> 00:29:17.580
even like fancier tables, but yeah, it's really nice.


00:29:17.580 --> 00:29:20.820
- Yeah, but the downside is that they don't have


00:29:20.820 --> 00:29:22.980
that many conferences because it's using


00:29:22.980 --> 00:29:24.340
only a few data sources.


00:29:24.340 --> 00:29:26.220
So when I was running it today,


00:29:26.220 --> 00:29:28.260
I couldn't find that many conferences.


00:29:28.260 --> 00:29:31.620
And actually there was no call for proposal open,


00:29:31.620 --> 00:29:33.260
like no date was there.


00:29:33.260 --> 00:29:37.200
So I hope it will improve, but so far this is my best tool


00:29:37.200 --> 00:29:39.240
to like find the upcoming conferences.


00:29:39.240 --> 00:29:40.680
- Yeah, and if people are out there listening,


00:29:40.680 --> 00:29:41.500
they have a conference,


00:29:41.500 --> 00:29:42.520
they wanna get the word out about it,


00:29:42.520 --> 00:29:45.720
you know, might as well go add it to the data source


00:29:45.720 --> 00:29:46.680
that these things are using.


00:29:46.680 --> 00:29:47.960
- Yeah, that would be awesome.


00:29:47.960 --> 00:29:49.020
- Yeah, this thing's cool.


00:29:49.020 --> 00:29:49.860
I checked it out.


00:29:49.860 --> 00:29:51.360
One bit of confusion for me is


00:29:51.360 --> 00:29:52.780
if you look at the description,


00:29:52.780 --> 00:29:53.960
it says installation,


00:29:53.960 --> 00:29:56.360
you can simply use pip to install Conrad


00:29:56.360 --> 00:29:58.000
for conference radar.


00:29:58.000 --> 00:30:01.140
So you can use pip to install Conrad,


00:30:01.140 --> 00:30:03.280
but you cannot pip install Conrad.


00:30:03.280 --> 00:30:04.280
That will not work.


00:30:04.280 --> 00:30:05.100
It may work.


00:30:05.100 --> 00:30:06.640
If it does, you should maybe be concerned


00:30:06.640 --> 00:30:09.160
because someone heard the show and put something in.


00:30:09.160 --> 00:30:11.960
You have to pip install conference-radar.


00:30:11.960 --> 00:30:14.400
So I don't know, maybe just a little clarification


00:30:14.400 --> 00:30:15.720
for people who want to check this out.


00:30:15.720 --> 00:30:19.240
But the command, the CLI is Conrad show,


00:30:19.240 --> 00:30:22.720
Conrad refresh, Conrad call for proposals, things like that.


00:30:22.720 --> 00:30:24.160
You can even set reminders, right?


00:30:24.160 --> 00:30:26.800
It'll like remind you when the call for proposal is closing.


00:30:26.800 --> 00:30:28.080
- Oh, cool. I didn't see that.


00:30:28.080 --> 00:30:28.920
That's nice.


00:30:28.920 --> 00:30:30.200
- I think there's a remind feature in here.


00:30:30.200 --> 00:30:32.040
I can't remember exactly how it works,


00:30:32.040 --> 00:30:33.760
but yeah, yeah, pretty cool.


00:30:33.760 --> 00:30:35.040
- I'm glad that you mentioned that


00:30:35.040 --> 00:30:36.880
'cause I just tried to pip install Conrad


00:30:36.880 --> 00:30:38.540
and I'm like, it didn't work, man.


00:30:38.540 --> 00:30:40.520
- It's broken, what is this thing?


00:30:40.520 --> 00:30:42.920
Yeah, I just think the documentation's a little unclear


00:30:42.920 --> 00:30:45.280
'cause the CLI and the package name are not the same.


00:30:45.280 --> 00:30:47.400
- At least you didn't get some malicious package.


00:30:47.400 --> 00:30:48.320
- Exactly.


00:30:48.320 --> 00:30:50.240
- Mining bitcoins right now.


00:30:50.240 --> 00:30:52.560
- Exactly, why is my computer hot?


00:30:52.560 --> 00:30:53.400
That's weird.


00:30:53.400 --> 00:30:54.240
Oh well.


00:30:54.240 --> 00:30:56.600
- Suddenly my camera turned on.


00:30:56.600 --> 00:30:58.560
Oh no, we're doing a live stream, that's why.


00:30:58.560 --> 00:30:59.600
- Yep, yep.


00:30:59.600 --> 00:31:01.960
Oh, and also Dean has a quick comment for you there,


00:31:01.960 --> 00:31:03.360
Sebastian, oh, this is perfect


00:31:03.360 --> 00:31:06.300
and I think I maintain a Google calendar for conferences.


00:31:06.300 --> 00:31:07.140
- Oh, cool.


00:31:07.140 --> 00:31:09.700
- Yeah, that's a good idea.


00:31:09.700 --> 00:31:11.940
- Yeah, I was looking for different sources


00:31:11.940 --> 00:31:14.020
where to get the conference information.


00:31:14.020 --> 00:31:17.620
And so far the most reliable one is my friend Miro


00:31:17.620 --> 00:31:19.700
on Twitter who is submitting and speaking


00:31:19.700 --> 00:31:20.940
at a lot of conferences.


00:31:20.940 --> 00:31:24.420
So I'm just following him and he's always speaking.


00:31:24.420 --> 00:31:25.620
He's always tweeting.


00:31:25.620 --> 00:31:27.760
So that's my best bet so far.


00:31:27.760 --> 00:31:29.580
- I met him at PyCon Slovakia.


00:31:29.580 --> 00:31:31.740
So yeah, I know he's at conferences often.


00:31:31.740 --> 00:31:32.580
- Yeah.


00:31:32.580 --> 00:31:33.420
Brian, is that it?


00:31:33.420 --> 00:31:34.820
- That's it for me.


00:31:34.820 --> 00:31:36.480
Do you have anything you want to share?


00:31:36.480 --> 00:31:38.760
- Oh yeah, I almost have an extra, extra, extra, extra


00:31:38.760 --> 00:31:41.160
here all about it section to share, but not quite.


00:31:41.160 --> 00:31:43.760
So I'll keep it a little bit quick here,


00:31:43.760 --> 00:31:44.600
but I'll go through some things.


00:31:44.600 --> 00:31:46.440
First of all, quick announcement,


00:31:46.440 --> 00:31:49.780
Sebastian and I have been working for, as he hinted at,


00:31:49.780 --> 00:31:51.040
I don't know if this was on the recording


00:31:51.040 --> 00:31:52.560
or before we started, but for like six months


00:31:52.560 --> 00:31:54.840
on a project called Modern Python Projects,


00:31:54.840 --> 00:31:57.680
which is a follow-on sort of course version


00:31:57.680 --> 00:32:00.480
of the Modern Python Developers Toolkit thing


00:32:00.480 --> 00:32:03.560
we did over at Talk Python episode 279, I think.


00:32:03.560 --> 00:32:06.240
So we've got this awesome course out at


00:32:06.240 --> 00:32:09.800
talkpython.fm/modern-python-projects


00:32:09.800 --> 00:32:11.240
or just click the link in the show notes


00:32:11.240 --> 00:32:12.080
and you can check it out.


00:32:12.080 --> 00:32:14.760
That's been out for an hour and 10 minutes.


00:32:14.760 --> 00:32:15.600
So not very long.


00:32:15.600 --> 00:32:16.720
- This looks really cool.


00:32:16.720 --> 00:32:17.640
I am excited about this.


00:32:17.640 --> 00:32:19.160
- Yeah, a lot of neat stuff that Sebastian,


00:32:19.160 --> 00:32:21.600
this is all Sebastian's work that he put into it here.


00:32:21.600 --> 00:32:23.720
So it's really cool. - Oh, you helped a lot as well.


00:32:23.720 --> 00:32:24.560
- Thanks.


00:32:24.560 --> 00:32:27.240
What would you like to, maybe, what do you think,


00:32:27.240 --> 00:32:29.080
quick thing to share, tell people about this course


00:32:29.080 --> 00:32:30.320
that you built.


00:32:30.320 --> 00:32:36.640
Yeah, so basically my idea was to give you an overview of everything you need to know,


00:32:36.640 --> 00:32:40.960
even if you don't have Python installed on your computer, all the way up to actually


00:32:40.960 --> 00:32:44.160
building and publishing your project.


00:32:44.160 --> 00:32:46.120
So basically we start by installing Python.


00:32:46.120 --> 00:32:48.200
I show you how to manage dependencies.


00:32:48.200 --> 00:32:51.880
I also show you how to set up VS Code for programming with Python.


00:32:51.880 --> 00:32:57.240
Then we add test, then we add tools like linters, formatters, some static code analysis.


00:32:57.240 --> 00:32:59.600
and we add the test documentation, obviously.


00:32:59.600 --> 00:33:02.520
We talk about continuous integration.


00:33:02.520 --> 00:33:04.160
There are like three sections


00:33:04.160 --> 00:33:05.520
where we build different projects


00:33:05.520 --> 00:33:08.880
and actually each of them is done in a different manner.


00:33:08.880 --> 00:33:10.320
So for one, I use Poetry,


00:33:10.320 --> 00:33:11.760
for the other one, I don't use Poetry,


00:33:11.760 --> 00:33:12.960
so we have a comparison.


00:33:12.960 --> 00:33:14.680
And all the way up to deploying,


00:33:14.680 --> 00:33:16.800
where I show you how to deploy, for example, to Heroku


00:33:16.800 --> 00:33:18.520
and how to create a Docker image.


00:33:18.520 --> 00:33:20.580
And yeah, all spectrum.


00:33:20.580 --> 00:33:21.420
- Yeah, that's cool.


00:33:21.420 --> 00:33:22.240
I definitely like it.


00:33:22.240 --> 00:33:23.080
So people can check that out.


00:33:23.080 --> 00:33:24.200
That's a quick item there,


00:33:24.200 --> 00:33:26.240
just that we launched that recently.


00:33:26.240 --> 00:33:30.240
And also Brian, our PythonBytes.fm looks very bright right now.


00:33:30.240 --> 00:33:31.080
What do you think?


00:33:31.080 --> 00:33:32.580
- Yeah, neat.


00:33:32.580 --> 00:33:33.880
- So one thing I wanted to do,


00:33:33.880 --> 00:33:36.220
people have been contacting us and saying,


00:33:36.220 --> 00:33:37.680
"Hey, I heard you mentioned like,


00:33:37.680 --> 00:33:39.720
"oh, we just mentioned Dean's name on the live stream.


00:33:39.720 --> 00:33:40.600
"What is this live stream?


00:33:40.600 --> 00:33:41.440
"When is it?


00:33:41.440 --> 00:33:42.260
"How do I find it?"


00:33:42.260 --> 00:33:44.560
So what I've done is I've updated the PythonBytes website


00:33:44.560 --> 00:33:46.560
and Talk Python for its live stream.


00:33:46.560 --> 00:33:49.180
But for PythonBytes, if you go to PythonBytes.fm,


00:33:49.180 --> 00:33:51.380
if we're live streaming at that very moment,


00:33:51.380 --> 00:33:53.120
there's like a big red banner across the top.


00:33:53.120 --> 00:33:54.200
Like we're live streaming right now,


00:33:54.200 --> 00:33:55.280
come be part of the show.


00:33:55.280 --> 00:33:57.580
And then there's also a live stream menu item


00:33:57.580 --> 00:33:59.260
that'll take you over and show you


00:33:59.260 --> 00:34:01.160
like the live stuff that's happening.


00:34:01.160 --> 00:34:03.280
And it'll basically show you the live playing stream


00:34:03.280 --> 00:34:04.680
but you can open that up on YouTube


00:34:04.680 --> 00:34:06.340
to be part of the live chat and so on.


00:34:06.340 --> 00:34:08.600
So live stream now on the podcast page,


00:34:08.600 --> 00:34:10.260
if it's a podcast site, if you visit it


00:34:10.260 --> 00:34:11.880
and it's called Bright, you know, and you got a moment,


00:34:11.880 --> 00:34:12.820
go check out the live stream.


00:34:12.820 --> 00:34:17.460
- Yeah, and then also if Michael's up to date on it,


00:34:17.460 --> 00:34:20.160
which he does all the work on this, I appreciate that.


00:34:20.160 --> 00:34:23.380
We announced when the next one's gonna be.


00:34:23.380 --> 00:34:26.060
So if you're not sure, you can just check it out anyway.


00:34:26.060 --> 00:34:28.780
And there should be a link there to say when.


00:34:28.780 --> 00:34:29.600
- Yeah, that's right.


00:34:29.600 --> 00:34:32.380
So normally what I try to do is schedule the next one


00:34:32.380 --> 00:34:33.300
when we're done with this one.


00:34:33.300 --> 00:34:35.060
So if people go there, they'll see the,


00:34:35.060 --> 00:34:36.300
like here's the next live streaming


00:34:36.300 --> 00:34:37.380
and YouTube has a button to say,


00:34:37.380 --> 00:34:39.460
set a reminder, tell me when this is happening.


00:34:39.460 --> 00:34:41.340
Last time, I think I said,


00:34:41.340 --> 00:34:43.340
is Python on Mars?


00:34:43.340 --> 00:34:47.420
Because that F plane, that flight overview system,


00:34:47.420 --> 00:34:49.060
it was using Python to train the models,


00:34:49.060 --> 00:34:51.980
but I think it's using C++ to fly the little helicopter thing.


00:34:51.980 --> 00:34:55.180
And I just mentioned, if anybody knows Python's on Mars,


00:34:55.180 --> 00:34:57.620
that would be awesome because this is really cool


00:34:57.620 --> 00:34:59.980
and related, but it's not the same as Python on Mars.


00:34:59.980 --> 00:35:04.420
So Bojack Norseman sent a tweet over and said,


00:35:04.420 --> 00:35:06.300
"Hey, Python Bytes, you guys asked for a confirmation.


00:35:06.300 --> 00:35:08.860
"Linux Unplugged," the Linux podcast,


00:35:08.860 --> 00:35:12.240
has an interview with Tim Canham at JPL,


00:35:12.240 --> 00:35:14.860
where he talks about running various machines


00:35:14.860 --> 00:35:15.880
and mentions Python.


00:35:15.880 --> 00:35:18.980
So the thing that he talked about is,


00:35:18.980 --> 00:35:21.040
remember when the thing was landing


00:35:21.040 --> 00:35:24.340
and there was the sky crane that like lowered perseverance


00:35:24.340 --> 00:35:25.760
and there were all these different camera views.


00:35:25.760 --> 00:35:27.180
You could see the bottom flying away.


00:35:27.180 --> 00:35:29.260
You could see it like shooting up dust and coming down.


00:35:29.260 --> 00:35:31.740
There's all these views, like these onboard cameras.


00:35:31.740 --> 00:35:33.900
Apparently all those were controlled and collected


00:35:33.900 --> 00:35:35.900
and like processed with Python on Mars.


00:35:35.900 --> 00:35:37.300
So yes, Python is on Mars.


00:35:37.300 --> 00:35:38.820
- Sweet.


00:35:38.820 --> 00:35:40.260
- Following up on your item,


00:35:40.260 --> 00:35:42.980
Sebastian Gidevan Rassam has sent out,


00:35:42.980 --> 00:35:45.340
said that signups for the Python Language Summit


00:35:45.340 --> 00:35:47.420
at PyCon online only are now open.


00:35:47.420 --> 00:35:50.020
If you represent a third party package


00:35:50.020 --> 00:35:52.360
want to have a say in Python's future, please sign up.


00:35:52.360 --> 00:35:55.680
So if you have a third party package and you want to be part of this, please sign


00:35:55.680 --> 00:35:56.880
up, I'll put the link in the show notes.


00:35:56.880 --> 00:35:57.460
Oh, wait.


00:35:57.460 --> 00:36:00.880
Does a single pack, there's a single developer package


00:36:00.880 --> 00:36:02.480
qualifies a third party package.


00:36:02.480 --> 00:36:05.480
Do you, do you want to have a say in Python's future?


00:36:05.480 --> 00:36:06.900
They might not listen to you.


00:36:06.900 --> 00:36:09.040
They're like, well, I'm going to talk to the guys that do flask and Jenga.


00:36:09.040 --> 00:36:10.420
You can go get a seat in the court.


00:36:10.420 --> 00:36:12.460
And I don't think people should listen to me.


00:36:12.460 --> 00:36:16.500
Um, Robert Robertson has a very nice, meme.


00:36:16.500 --> 00:36:19.080
The snake has landed instead of the Eagle, right?


00:36:19.240 --> 00:36:21.440
The snake has landed. Beautiful for the Python thing.


00:36:21.440 --> 00:36:23.600
All right, Sebastian, anything else you want to throw out there real quick?


00:36:23.600 --> 00:36:26.040
Yeah, I have a kind of a curiosity


00:36:26.040 --> 00:36:29.480
because I started using VS Code in a browser recently.


00:36:29.480 --> 00:36:33.320
I started a new project and everyone on the team is using VS Code in the browser.


00:36:33.320 --> 00:36:37.000
And it's working surprisingly well.


00:36:37.000 --> 00:36:40.000
I would never try to use a code editor in a browser,


00:36:40.000 --> 00:36:42.000
like out of myself, never,


00:36:42.000 --> 00:36:44.400
because I need to have everything installed locally.


00:36:44.400 --> 00:36:46.880
But now that I have to use it, I'm like super impressed.


00:36:46.880 --> 00:36:49.760
Everything works smoothly and my experience is amazing.


00:36:49.760 --> 00:36:53.880
So it made me think like, well, is this the future of programming?


00:36:53.880 --> 00:36:57.140
It's definitely nice to have everything on the same page


00:36:57.140 --> 00:36:59.840
because it's like super easy to set up the same plugins,


00:36:59.840 --> 00:37:01.440
the same configuration for the whole team.


00:37:01.440 --> 00:37:03.020
People don't have to install anything.


00:37:03.020 --> 00:37:06.680
So, yeah, I'm wondering to see in which direction it will go.


00:37:06.680 --> 00:37:07.780
Yeah, it's super interesting.


00:37:07.780 --> 00:37:10.820
You know, I haven't done a lot of it, but it's probably using that thing


00:37:10.820 --> 00:37:13.240
where they said, well, this is an Electron app.


00:37:13.240 --> 00:37:16.480
Let's take the UI bit and just move the back end farther away


00:37:16.480 --> 00:37:19.240
and put that in a Docker container or something.


00:37:19.240 --> 00:37:20.480
I'm guessing that's how it ran, right?


00:37:20.480 --> 00:37:22.240
It wasn't pure all JavaScript.


00:37:22.240 --> 00:37:23.080
- Yeah, I think so.


00:37:23.080 --> 00:37:25.880
But I was expecting some latency and nothing like that.


00:37:25.880 --> 00:37:28.280
I mean, my only concern is that the browser


00:37:28.280 --> 00:37:30.400
is interrupting some keyboard shortcuts.


00:37:30.400 --> 00:37:33.040
So whenever I want to close a tab in the VS Code,


00:37:33.040 --> 00:37:34.840
I'm closing the browser window


00:37:34.840 --> 00:37:36.560
because that's the same combination.


00:37:36.560 --> 00:37:39.760
- That drives me crazy about the browser editors.


00:37:39.760 --> 00:37:40.880
It's like, I'm editing, I'm editing,


00:37:40.880 --> 00:37:42.160
I wanna make this tab go away.


00:37:42.160 --> 00:37:44.360
Oh, why is the whole thing gone again?


00:37:44.360 --> 00:37:45.200
- Yeah.


00:37:45.200 --> 00:37:46.020
- Yeah, I didn't know what to do about that.


00:37:46.020 --> 00:37:47.220
- Yeah, I know that that's really cool.


00:37:47.220 --> 00:37:48.820
And you know, it's really applicable for,


00:37:48.820 --> 00:37:50.820
like if you've got a class full of students


00:37:50.820 --> 00:37:51.780
and they have Chromebooks,


00:37:51.780 --> 00:37:54.580
and they can't install Python and VS Code on their Chromebook


00:37:54.580 --> 00:37:56.300
but they have Chrome, they're good.


00:37:56.300 --> 00:37:57.580
They're good to go, right?


00:37:57.580 --> 00:38:00.180
Or things like that, or an iPad that doesn't allow it.


00:38:00.180 --> 00:38:02.980
So really neat possibilities there.


00:38:02.980 --> 00:38:04.540
- Exactly, we have some custom libraries


00:38:04.540 --> 00:38:05.660
and they are already available


00:38:05.660 --> 00:38:07.300
on those virtual machines with VS Code.


00:38:07.300 --> 00:38:09.180
So that's super easy to use.


00:38:09.180 --> 00:38:10.180
- Yep, absolutely.


00:38:10.180 --> 00:38:12.380
So Brian, I put together a joke for us,


00:38:12.380 --> 00:38:14.700
but we'll have to clean it up just a little bit for the air.


00:38:14.700 --> 00:38:16.740
- Okay, I'm not reading it.


00:38:16.740 --> 00:38:18.600
- I'll read it, I'll read it, I'll read it.


00:38:18.600 --> 00:38:20.140
So I'll put it up here.


00:38:20.140 --> 00:38:23.740
So it's a picture of some birds on a power line, right?


00:38:23.740 --> 00:38:26.940
And they sort of often sit together in little groups,


00:38:26.940 --> 00:38:29.020
like I don't know why, they're hanging out on the power line,


00:38:29.020 --> 00:38:30.260
they've got incredible balance,


00:38:30.260 --> 00:38:31.460
and they're all just sitting there.


00:38:31.460 --> 00:38:34.660
And there's one bird that's outside of the power line,


00:38:34.660 --> 00:38:36.460
it's like where the power line stops and goes down,


00:38:36.460 --> 00:38:38.740
the bird's just sitting there floating in midair.


00:38:38.740 --> 00:38:40.060
And the other birds are looking,


00:38:40.060 --> 00:38:41.340
and they're like, how is he just,


00:38:41.340 --> 00:38:42.300
his wings aren't flapping,


00:38:42.300 --> 00:38:43.660
how is he just sitting there in midair,


00:38:43.660 --> 00:38:45.140
And they go, oh, he has a wifi.


00:38:45.140 --> 00:38:48.340
But then the bird comes crashing down


00:38:48.340 --> 00:38:50.460
and he goes, the falling bird screams,


00:38:50.460 --> 00:38:51.900
oh, darn router.


00:38:51.900 --> 00:38:54.180
I love it, I thought it was good.


00:38:54.180 --> 00:38:56.500
It might not be totally safe for it, but it's good.


00:38:56.500 --> 00:38:57.460
- Yeah, there's a lot of routers


00:38:57.460 --> 00:39:00.580
that aren't properly tested with Rogen Shorts equipment.


00:39:00.580 --> 00:39:03.260
- Yeah, yeah, I mean, if you were floating suspended


00:39:03.260 --> 00:39:05.300
in midair by your wifi, then it stops.


00:39:05.300 --> 00:39:06.380
That's a little risky.


00:39:06.380 --> 00:39:08.140
- That's good.


00:39:08.140 --> 00:39:09.820
Well, thanks Sebastian for stopping by


00:39:09.820 --> 00:39:10.980
and doing the show with us.


00:39:10.980 --> 00:39:11.820
- Thank you for having me.


00:39:11.820 --> 00:39:12.940
- It was quite a lot of fun.


00:39:12.940 --> 00:39:13.940
Yeah, it was fun.


00:39:13.940 --> 00:39:14.940
Thanks for coming.


00:39:14.940 --> 00:39:15.940
Thanks, Brian.


00:39:15.940 --> 00:39:16.940
Thanks for being here.


00:39:16.940 --> 00:39:17.940
Thank you.

