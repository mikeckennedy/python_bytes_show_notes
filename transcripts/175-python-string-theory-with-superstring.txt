00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 175, recorded March 26, 2020.

00:00:10 I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 Brian, we have a special guest.

00:00:13 Welcome, Matt Harrison. How are you doing, man? Glad to have you here.

00:00:16 Good. Good. Thanks for coming. Come on.

00:00:19 Yeah. It's always nice to have you on the show.

00:00:22 Before we get into it, let me just tell you this episode is sponsored by Datadog.

00:00:25 Check them out at pythonbytes.fm.

00:00:28 Datadog. I'll tell you more stuff about them later.

00:00:30 First, I want to just throw this out to both of you guys.

00:00:33 The world is, I don't know, is it turned upside down or is it locked down or what has gone on with the world? It's crazy.

00:00:39 We're kind of software people, and I know we're all kind of in different boats.

00:00:43 I am definitely grateful that I'm a software person.

00:00:46 I have a lot of friends that are not, that are in the retail industry or the selling stuff to people sort of industry or self-employed.

00:00:56 And those people, they're really hurting.

00:00:58 I've got a lot of people I know that if they're self-employed, you don't qualify for unemployment insurance and stuff.

00:01:05 So there's a lot of people hurting.

00:01:07 How are you guys?

00:01:08 It's crazy.

00:01:09 Yeah.

00:01:09 Matt, how about you?

00:01:10 I just found out this morning that my largest client just dropped all my trainings for the rest of the year.

00:01:15 That's not your favorite phone call or email to receive, is it?

00:01:19 Not the best news, but the thought that I have on that is like past couple of years have been very good, right?

00:01:26 And people have said like the bubble will burst.

00:01:29 And I don't know that we thought that a virus would do this, but I mean, it looks like winter came for better, for worse.

00:01:36 And so people are going to have to adapt.

00:01:39 And now if you can weather the storm, it's going to be tough though.

00:01:43 I mean, I was even talking with some friends who are in the medical industry and they're like, we're worried about our jobs, right?

00:01:50 And these are like doctors and people who work at the hospital.

00:01:53 So it's interesting to see what's going on.

00:01:57 And I've worked from home for the good portion of the last 15 years.

00:02:01 And right now it's scary to see that there's a lot of upheaval and we'll see what happens.

00:02:07 How are things going for you, Michael?

00:02:08 Well, you know what?

00:02:10 It's really interesting.

00:02:12 If you'd asked me this question like six years ago when I was doing mostly in-person training, it would have been like somebody just cut the light switch off and said, you know, we're all leaving.

00:02:23 Yeah.

00:02:23 Lock the door on your way out, right?

00:02:25 It would have been purely traumatic.

00:02:27 Luckily now, like online courses are great still.

00:02:31 Podcasting is great.

00:02:33 Like what's ironic is my work life is literally unchanged, but the rest of my life is scrambled, right?

00:02:39 Like my daughter is home from school because they closed school.

00:02:42 Like Oregon's now on full lockdown.

00:02:44 Like it's hard to go out to dinner.

00:02:46 So everything is changed in some ways, but ironically, not my work life really.

00:02:50 I'm sure it'll have some effect eventually, but nothing immediate.

00:02:53 I guess one more thing before we move off.

00:02:55 I'm just curious.

00:02:56 Like what are your plans around training?

00:02:57 Like are you going to be teaching over Zoom or is it just focus on other stuff until it comes back?

00:03:01 Yeah, I think both of that.

00:03:03 I do have some clients who are moving to virtual training and I already do a bunch of virtual training anyway.

00:03:09 So, I mean, it's sad that some of them aren't able to or can't due to circumstances or whatnot, but try and see if other people want virtual training and just work on other products that people are interested in as well.

00:03:23 Yeah, absolutely.

00:03:24 Well, hang tough.

00:03:26 You guys and everyone out there, it's going to be a wild ride and hopefully the software side of the world is a little bit less bumpy, but it's still, it's crazy.

00:03:34 All right, well, let's talk a little bit about the future, Brian.

00:03:38 Like we can't predict when the COVID stuff is going to be better, but you could probably predict some stuff about the Python in the future.

00:03:44 I'm just still getting excited, used to being able to have Python 3.8 everywhere.

00:03:48 And, but we've got Python 3.9 right around the corner and in October is the scheduled release.

00:03:55 I don't know if that'll change due to the virus or not, but that's where it is.

00:04:00 And one of the cool things that I noticed from a blog article is that there's union operators coming for dictionaries in Python 3.9.

00:04:09 And this is a PEP 584.

00:04:11 And there's a article called a dictionary merging and updating in Python 3.9 by not, I think young qui.

00:04:20 And there's a couple new operators.

00:04:22 One of them, it's just the bar or the bar equals or the pipe operator, whatever.

00:04:28 It looks normal for if you're used to, I guess that's the math or operator.

00:04:32 It's like a bitwise or, yeah.

00:04:36 I'm kind of excited about it.

00:04:37 So you can combine two dictionaries by just doing like a dictionary one or dictionary two or something like that.

00:04:45 And then the equivalent assignment operator as well, which is really an update operator and a merge.

00:04:51 The article spent a little bit of time talking about the other older methods that you can use to combine dictionaries now.

00:04:59 And I know people have covered those in a lot of places.

00:05:02 The one thing, the article actually spent a lot of time on it.

00:05:05 And I just think it's something to watch out for and be aware of is when you're combining dictionaries, usually the,

00:05:11 if there's overlapping values, like if there's a value with the same key in both dictionaries,

00:05:17 you'll get the second one will take precedence.

00:05:20 It's just something to be aware of.

00:05:22 Yeah.

00:05:22 Yeah.

00:05:22 And that's the way it works in the, like the current operators as well, right?

00:05:26 The star star sort of combine stuff and whatnot.

00:05:29 Yeah.

00:05:29 As long as you're aware of it, it's good to know, but this is clean.

00:05:32 It's actually something that now that I see it, I'm surprised that we don't already have a,

00:05:36 an operator already in to combine dictionaries because it's something I kind of do a lot of.

00:05:41 So.

00:05:42 Yeah.

00:05:42 And if you look at the syntax there for the pipe, I mean, the pipe is already in the set operator.

00:05:47 And prior to sets existing, when people used to use dictionaries to emulate sets, I mean,

00:05:53 they wouldn't do the or operator, but, but it's, it's interesting that it's sort of coming around

00:05:57 circle now that we originally had dictionaries.

00:05:59 People started using dictionaries as a simple replacement for sets.

00:06:04 And we got sets, which had the pipe operator and now the pipe is coming back to the dictionary.

00:06:08 Interesting.

00:06:09 So why do you guys think they didn't use plus?

00:06:11 Like you want to combine two things like two lists.

00:06:15 You don't use a pipe to put them together.

00:06:17 You use a plus for strings.

00:06:18 Use a plus.

00:06:19 Plus already existed.

00:06:20 I think it's because of the union operator already being used for sets.

00:06:25 Yeah.

00:06:25 You think so?

00:06:26 Yeah.

00:06:26 All right.

00:06:26 Cool.

00:06:27 Well, yeah, it's good to see some nice shorthands coming there, but if we can have a pipe equals

00:06:32 operator, give me the plus plus.

00:06:35 Come on.

00:06:35 I just want the plus plus.

00:06:36 I want the double pipe.

00:06:39 Yeah.

00:06:40 Double pipe.

00:06:41 What does that mean?

00:06:42 All right, Matt, you got the next one.

00:06:44 This one is short and sweet, but it looks pretty cool if you got the use case for it.

00:06:48 Yeah.

00:06:49 Yeah.

00:06:49 So there is this super string library, which is a new library that's a replacement of, well,

00:06:59 not a replacement, but it's a new string library for holding sequences of characters.

00:07:02 It's built on this rope data structure, and apparently it's pretty optimized.

00:07:07 It uses a 20th the amount of memory and a fifth the speed, so operates five times faster for

00:07:15 a lot of operations.

00:07:16 I think this could be super useful for people who are manipulating data.

00:07:23 So it'd be interesting to look at if the people who are doing NLP could take advantage of this.

00:07:28 Definitely the memory constraints, using a 20th the amount of memory would be awesome, even

00:07:36 in places like Pandas, NLP as well, natural language processing.

00:07:41 The API is pretty basic right now.

00:07:44 It's got concatenation, getting to the length, doing some indexing and slicing and stripping

00:07:49 and uppercasing and lowercasing.

00:07:50 So that could be a good, with the speed and memory performance they're showing, that could

00:07:56 be a good enough limited set of capabilities.

00:08:00 Sort of for me, the elephant in the room is the F string.

00:08:04 For me, that's the best feature of Python 3.

00:08:06 I know.

00:08:09 Implement that, and let's use it.

00:08:11 Yeah, the other thing that's missing is negative indexes, but that can't be hard to add, honestly.

00:08:17 Maybe it's hard to add quickly, but it can't be hard to add negative indexing.

00:08:21 That's a good point.

00:08:22 I mean, they don't make any reference to whether they support Unicode.

00:08:25 So that's, I guess, another question, right?

00:08:28 If they do support the Unicode capabilities, the Python supporting, I mean, Unicode can make

00:08:34 indexing a little bit more complicated, but that might be what's going on there.

00:08:38 But this will be interesting to watch, interesting library to watch.

00:08:43 What do you think, Brian?

00:08:44 I'm just not in a place where the strings are the memory or the bottleneck in any of my applications.

00:08:50 Yeah.

00:08:52 Yeah, but to give you an example, like a real world example, like I've been playing with

00:08:55 some Markdown stuff for like the sort of CMS side of things that I'm writing in Markdown.

00:09:00 And if you've got something that's maybe 10, 20 pages of Markdown, it takes half a second

00:09:07 to convert that from Markdown to HTML.

00:09:10 I don't know how much of that is like the actual string juggling and how much of that is just

00:09:15 converting it to Markdown is slow.

00:09:16 But that's a non-trivial amount of processing that's like sort of around the corner.

00:09:22 I mean, you would never do it manually.

00:09:23 You would use a library, right?

00:09:24 But still, you can benefit from that.

00:09:26 On that, you can think of all the people who are using static libraries, right?

00:09:30 For web pages who, you know, once you get, they all complain about once you get X number

00:09:35 of pages in there, they start getting slow.

00:09:37 And the rebuild takes five seconds instead of a half a second or whatever, right?

00:09:41 And so something like this could help there as well.

00:09:44 Right.

00:09:45 Theoretically.

00:09:45 So this is not a super popular library, but I'm glad you put it on here because I think

00:09:49 it's pretty cool.

00:09:50 I guess two thoughts.

00:09:51 One, it'd be interesting to look at what they're doing and if there's any easy low-hanging fruit

00:09:58 to bring back to CPython because it would be better if just Python strings were faster.

00:10:02 And they're like, why would you make this?

00:10:03 It's the same speed.

00:10:03 You know what I mean?

00:10:04 Then the other, Brian, you may have noticed, there's no tests.

00:10:08 Yeah, it looks like it's recent.

00:10:10 It's like, I don't know if it's even been around for more than a week.

00:10:14 Yeah, I think it's pretty new.

00:10:16 So if somebody's like, oh, this is cool, let me try it out.

00:10:18 Like maybe a way you could participate is like write some tests just to verify things, right?

00:10:22 But yeah, pretty cool.

00:10:23 It's just imaginary.

00:10:24 If there's no test, it's like no picture, no proof, man.

00:10:27 If it continuously deployed in the woods and there were no tests to hear it, did it actually

00:10:33 happen?

00:10:33 Something like that?

00:10:34 Yeah, yeah, exactly.

00:10:35 Sure.

00:10:36 That's the saying, I think, the historical version.

00:10:39 I thought your new testing strategy is if it doesn't have tests and you don't commit

00:10:45 it.

00:10:46 Didn't you say you're using something like that?

00:10:47 Yeah, that's good.

00:10:50 Yeah, that's a good way for sure.

00:10:52 All right.

00:10:52 So this next one is going to affect everybody who works with Python.

00:10:56 This is a big deal.

00:10:58 Hopefully it's not a bumpy deal, but it's a big deal.

00:11:00 So the Python Packaging Authority folks, the PSF subgroup, they recently got funding to

00:11:08 hire some developers to make pip better.

00:11:10 So pip is awesome.

00:11:12 We all pip things.

00:11:14 And even if you don't pip things, if you pip them or you poetry them, you really pip them

00:11:18 down below, right?

00:11:19 So they got a bunch of funding to make that better.

00:11:22 And one of the challenges, one of the first challenges that they're tackling is that pip

00:11:27 will, it's not, it doesn't take into account all the stuff you're trying to do.

00:11:32 It just says, I see a requirements file.

00:11:34 Let me just go from top to bottom, just start hitting it, right?

00:11:37 Install the first one.

00:11:38 Install the second one.

00:11:39 So they're rolling out a new pip resolver at the end of the year.

00:11:43 That's pretty cool, huh?

00:11:45 Yeah.

00:11:45 This is neat.

00:11:46 Yeah.

00:11:46 So the idea is basically, it's going to go and it's going to look at the dependencies of

00:11:51 the various packages and try to install something that is consistent across all of them.

00:11:56 Like maybe the first package in your requirements files requires, I don't know, docutils 16.

00:12:02 And the second one requires docutils 15.

00:12:05 Or maybe the first one doesn't even specify and 16 is just the latest.

00:12:09 If you pip install dash R that you're going to get 16 and then it's going to complain that

00:12:13 you have 16 and not 15.

00:12:14 You know what I mean?

00:12:15 It's like, it just doesn't even factor in the larger system that these two things have

00:12:20 to coexist.

00:12:20 So that's one of the things they're working on.

00:12:22 So to reduce inconsistency, it'll no longer install a combination of packages that's mutually

00:12:27 inconsistent and it will be no pushover.

00:12:30 It can be strict.

00:12:31 If you ask it to install two packages with incompatible requirements, it will say no.

00:12:38 It will not do it.

00:12:39 Yeah.

00:12:40 And then it just doesn't install anything, I think.

00:12:41 Yeah.

00:12:42 Yeah.

00:12:42 It just says, no, I can't install it.

00:12:43 That might cause some problems, right?

00:12:46 Yeah, it might.

00:12:47 Or make people's processes work differently.

00:12:53 Because I mean, right now I know there's a bunch of library top of each other and I can sort

00:13:00 of just install them over on top of it.

00:13:02 I have my libraries and some of them sort of work and some of it doesn't refuse to install

00:13:07 them.

00:13:08 So this might be a speed bump in the road for a lot of people.

00:13:12 And maybe in the end it works out better, but might cause some consternation in the short

00:13:18 term.

00:13:19 Yeah, that was my first thought exactly.

00:13:21 It's like, oh, there's going to be a bunch of stuff that just won't install anymore.

00:13:24 Yeah.

00:13:25 Maybe a library itself can't install because two of its base libraries dependencies like

00:13:29 themselves are inconsistent.

00:13:31 Well, how are they working now then?

00:13:32 You just get a warning and it just still works.

00:13:34 It's not that they're necessarily truly inconsistent.

00:13:38 One says, I require library less than equal to this version.

00:13:41 Another one says, I require library greater than equal to that version.

00:13:44 That doesn't necessarily mean the one that requires the lower one wouldn't work with the

00:13:49 newer one.

00:13:50 It's just that's what the requirements state.

00:13:52 You know what I mean?

00:13:52 Like, for example, Boto3, which is the Python 3 library if we're talking to AWS and its underlying

00:13:59 library, BotoCore, at one point we're having different dependency, like inconsistent dependency

00:14:06 statements or something weird like that that I was running into.

00:14:10 But it didn't matter.

00:14:11 It still ran.

00:14:12 I'm just like, oh, I better run the unit test.

00:14:14 It says these aren't going to work together.

00:14:15 Let's see if they, you know, like maybe there's some corner of that thing that doesn't work,

00:14:19 but I don't use that corner.

00:14:20 So like, I don't care.

00:14:21 Yeah.

00:14:22 Or you have like in the machine learning side, you have like this library depends on some

00:14:27 old version of TensorFlow, but it doesn't.

00:14:29 You're not using TensorFlow.

00:14:31 You're using some utility library in it, but it also has support for TensorFlow, but you're

00:14:36 not using it.

00:14:37 So if you had a different version of TensorFlow on it, it wouldn't really affect you because

00:14:42 you weren't using that portion of it.

00:14:43 Right.

00:14:44 But it sounds like pip will say, no, I can't install these things.

00:14:47 They make statements about two things that they can't coexist.

00:14:50 But you're like, I don't really care that they're working.

00:14:52 You know what I mean?

00:14:53 So I think this is good.

00:14:55 I think it makes things more predictable.

00:14:56 But you're right, Matt.

00:14:58 It's definitely going to cause some challenges.

00:15:01 And maybe it'll get people to update things like the base library statements that they

00:15:06 depend upon more carefully.

00:15:08 Yeah.

00:15:09 One of the things I'd like to see for talking about pip is that I'd really like to see Python

00:15:14 come out with dot releases that if there's a new version of pip that all the latest versions

00:15:22 of Python have the latest version of Pip.

00:15:24 I'm just really tired of installing Python places and immediately having pip out of date.

00:15:30 Yeah.

00:15:30 I actually have an alias that when I create a virtual environment, then immediately does

00:15:35 a pip dash install --upgrade pip and set up tools.

00:15:39 Because why doesn't it just do that for me?

00:15:40 Yeah.

00:15:41 Anyway.

00:15:41 Can I just update the top level one so that all my new virtual environments get the newest

00:15:46 one?

00:15:46 Yeah.

00:15:46 Anyway.

00:15:47 This is coming.

00:15:48 They blogged about it.

00:15:49 I linked to the blog post from the PSF.

00:15:50 They said there's a couple of things you can do to help first and most fundamentally help

00:15:55 them understand how you're using Pip.

00:15:58 They have some user experience research going on.

00:16:00 There's a link to go do part of that.

00:16:01 You can check right now if this is going to be a problem for you.

00:16:05 Go to your project, your virtual environment, activate it and type pip check.

00:16:09 And it will tell you if you are in this inconsistent state.

00:16:11 I had one website that was, a couple that weren't.

00:16:14 I hacked around until I fixed them up and everything was good.

00:16:17 Make sure you test the new version of Pip.

00:16:19 It'll probably be out in May.

00:16:21 Help spread the word.

00:16:22 All three of us are doing that.

00:16:23 Ta-da.

00:16:24 Awesome.

00:16:24 And if you develop a tool like Poetry or something that lives on top of this, make

00:16:29 sure that you test integration with the thing coming out in beta in May.

00:16:33 All right.

00:16:34 Really quickly before we move on, let me tell you all about Datadog.

00:16:38 This episode is brought to them, brought to you by them.

00:16:41 So let me ask you a question.

00:16:43 Do you have an app in production that's slower than you'd like?

00:16:46 Is its performance all over the place?

00:16:47 Maybe fast, sometimes slow, others?

00:16:49 Here's the important question.

00:16:51 Do you know why it's slow or inconsistent?

00:16:54 With Datadog, you will.

00:16:55 You can troubleshoot your app's performance with Datadog's end-to-end tracing.

00:16:59 Use the detailed frame graphs to identify bottlenecks and latency in that finicky app of yours.

00:17:04 Be the hero that got the app back on track at your company.

00:17:07 Get started with a free trial today at pythonbytes.fm/Datadog.

00:17:11 Use a cool product.

00:17:12 Help support the show.

00:17:14 Matt, I think this next topic you got here, this pretty much is on everyone's mind right now.

00:17:19 And maybe you're trying to not think about it, but there's some useful stuff going on here.

00:17:23 Yeah.

00:17:24 Just with the whole coronavirus, COVID-19, I've been thinking, you know, what can I do as an

00:17:31 individual to help?

00:17:32 And I think a lot of people are trying to flatten the curve or limit the growth.

00:17:37 And I think a lot of people, at least in our community, understand the importance of that,

00:17:41 but maybe not the general populace as well.

00:17:45 So one of the things that I thought that I could do is just, you know, spread among my local community

00:17:50 through my local social media.

00:17:52 Like, what is the growth locally here where I'm based?

00:17:54 I'm based out of Salt Lake in Utah.

00:17:57 And so I had a problem actually getting the data.

00:18:01 I mean, there aren't any repositories that have local Utah data.

00:18:06 The local Department of Health is reporting on it, but their data, there's not a source of data that you can cleanly pull.

00:18:13 So I've been pulling, making my own data source.

00:18:17 And then I've been just posting those on Twitter and LinkedIn just with my local data to sort of track what that growth looks like and sort of put that in people's minds to sort of,

00:18:27 hey, think about what's going on locally and see what changes you can make.

00:18:31 And I did some basic modeling to sort of predict what's going on because I've been reading other people's models about, you know,

00:18:37 this is an exponential growth weight, blah, blah, blah, what that looks like.

00:18:42 And so I did some basic models using machine learning.

00:18:45 But it's also in the Twittersphere and elsewhere, people are saying all these data scientists are coming and just throwing machine learning at this,

00:18:53 and that's not the right thing to do.

00:18:54 The right thing to do is read the literature and see, you know, what epidemiologists and others have done.

00:19:00 And so I just want to point to some things that might be interesting.

00:19:05 I've got a link to a Kaggle project that shows making some basic machine learning models,

00:19:10 but it also points to a library that's found in SciPy that probably a lot of people don't know about.

00:19:17 I know about it because I teach about it.

00:19:18 And that's in SciPy, there's an ODEINT function, which is a solver for what's called ordinary differential equations.

00:19:26 And so this is probably a math class that you may have taken in college.

00:19:30 I took one in college, and it was purely theoretical, and I've basically forgot everything since then.

00:19:37 But there's what's called an SIR model.

00:19:40 And that stands for you have people who are susceptible to being sick, you have people who are infected, and you have people who are recovered.

00:19:50 And so typically, these flatten the curves are looking at the infected part, the infected growth of that.

00:19:56 But there's a relationship between all these three different groups, and they're more complex models.

00:20:00 But if you use ordinary differential equations, that is the tool that epidemiologists and statisticians use to plot these and determine what's going on here,

00:20:11 rather than just throwing it at linear regression or trying to do a machine learning model that way.

00:20:18 So I just want to point people at this Kaggle project has got an example of doing this SIR model.

00:20:24 It's also got some basic machine learning models as well.

00:20:27 But be aware that, you know, a lot of these things that we learn about, that in theory, you think, oh, that doesn't make sense.

00:20:35 This is actually a case where ordinary differential equations are the right or one of the right tools to look at this data and understand what's going on there.

00:20:44 Yeah, this is a cool project.

00:20:45 Yeah, definitely a cool project.

00:20:47 I'm sure there's a ton of data science going on around all of this.

00:20:51 There's a lot of data.

00:20:53 It's coming from different places, like live dashboards and stuff.

00:20:57 And I think this is really cool.

00:20:59 I didn't know about the SIR model.

00:21:00 That's cool.

00:21:01 There are a bunch of other Python libraries as well that epidemiologists have created and whatnot that implement these SIR models.

00:21:08 And there's another one, S-I-E-R.

00:21:11 And so check those out if you're interested in sort of digging with the data.

00:21:14 But a plea to people to think about what you can do for your local community.

00:21:18 You know, if you've got skills to help out, what can you do locally to help out and help others?

00:21:24 Yeah, absolutely.

00:21:26 Also, random side point here, looking through this code on Kaggle, I'd never realized that you could unpack a tuple in a nested way.

00:21:34 Like thing, comma, tuple unpacking thing, right?

00:21:39 So where you can layer these in deeper and deeper.

00:21:41 That's pretty awesome, actually.

00:21:43 Yeah.

00:21:43 Your data structure is nested, right?

00:21:45 Not necessarily going to make your code easy to read, but you can have fun there.

00:21:50 It can definitely make it shorter.

00:21:52 All right, cool.

00:21:54 That's a nice one.

00:21:54 Brian, you're getting all philosophical on this with this next one.

00:21:58 What's up?

00:21:58 Okay, so this is totally, we're going from serious to definitely not serious.

00:22:04 So I noticed this also.

00:22:05 So there's a Reddit thread that's now, or I don't know if it was Reddit or Stack Overflow, but it got taken down.

00:22:14 But essentially the question was, why does all return true if the iterable is empty?

00:22:19 So there's an all keyword in Python that I guess actually a lot of people don't know about.

00:22:25 That takes an iterable and it returns true if all of the elements of the iterable are true.

00:22:32 Or evaluate to true in a Boolean context.

00:22:35 That's really helpful for a lot of things.

00:22:37 The interesting aspect is, what should it do if the iterable is empty?

00:22:43 And because, you know, actually the person asking the question said, shouldn't it be false?

00:22:50 Just like, you know, you can say if list, and if it's an empty list, it's false.

00:22:55 Why would all be true if it's empty?

00:22:58 And I enjoyed the conversation.

00:23:00 And somebody wrote an article called, about this, why is, why does all return true?

00:23:05 The end lesson is, it doesn't matter why, because the core team decided it, and you just need to know it.

00:23:11 And work around it.

00:23:12 It's been thusly decreed to be true, so therefore it is true.

00:23:15 Yeah, and then one of the things I wanted to point out from this discussion is the statement, all unicorns are blue.

00:23:21 I just love that.

00:23:22 You can't tell me, it is definitely true, because there are no unicorns.

00:23:27 So therefore it's true for me to say all unicorns are blue.

00:23:30 Yeah.

00:23:30 And so I like that.

00:23:33 And I guess I'm glad that my daughter doesn't listen to this to hear me say that there are no unicorns.

00:23:38 Sorry, honey.

00:23:39 Don't break her heart.

00:23:40 Next, you can talk about no Santa or what's going on here.

00:23:43 Like the tooth fairy is not real?

00:23:46 Come on.

00:23:46 But the person writing this article, Carl Johnson, is actually also a philosopher and a programmer.

00:23:51 So he talks about this 2,500-year-old debate in philosophy about whether or not all unicorns are blue, should be true or false.

00:24:00 And also we get talk about predicate logic and Socrates and Aristotle and syllogisms and things like that.

00:24:08 Actually, we never, at the end, I still don't know why the core team chose that that is true.

00:24:15 But it's a fun thing to look into.

00:24:16 That's fun.

00:24:17 So looking at it from the outside, I envision it working like this.

00:24:22 The way all works to be efficient is it says for thing in collection, if not thing, return false.

00:24:30 Go all the way in, return true.

00:24:32 And it just never goes into that loop, so return true.

00:24:34 Probably, yeah.

00:24:35 But I probably got to go and open up the CPython source code to find out.

00:24:40 Matt, what do you think?

00:24:41 I don't know.

00:24:42 I'm looking at the Unicode symbol, the Unicode emoji in my Python REPL right now.

00:24:49 And that's hex code point 1F984.

00:24:53 And it doesn't look blue.

00:24:55 It looks pink.

00:24:55 So something's got a pile of...

00:24:57 We definitely got to put...

00:25:02 Somebody's going to have to put a comment on that blog post.

00:25:04 Yeah.

00:25:05 Yeah, that's not true.

00:25:06 All unicorns are pink.

00:25:07 It's interesting that they did make it true to your point, like in a Boolean context, right?

00:25:12 Anything empty in Python is false.

00:25:14 So...

00:25:15 Yeah, yeah.

00:25:15 I mean, another option would have been to raise an exception so you can't ask for the truthiness of nothing.

00:25:20 The main reason why I wanted to bring it up and the main reason I enjoy reading this article is now I will never forget that all of nothing is true.

00:25:30 I'm also thinking, have I ever used all in an if statement?

00:25:35 I don't know that I have used all in an if statement.

00:25:38 Where do you use it?

00:25:39 Hey, yeah, I guess I have.

00:25:41 Yeah, I've used it.

00:25:42 Usually I'll put like a set...

00:25:44 Not a set...

00:25:45 Some kind of generator expression in there.

00:25:47 Because I don't usually want to test all the things are actually true.

00:25:51 I want to test like the dates are greater than today for all of them or something, right?

00:25:55 So put a little comprehension in there and then ask all of that.

00:25:58 Yeah, I guess it returns a Boolean, so you would put it in an if statement.

00:26:02 I guess so.

00:26:04 I don't use it a ton either, but every now and then I'm happy with it.

00:26:08 If I put it in an if statement, am I going to loop over the contents of all, right?

00:26:13 I don't know that I have it in an if statement.

00:26:16 I loop over...

00:26:17 No, no.

00:26:17 It would be to avoid a loop, right?

00:26:19 It would be like one line of loop, basically.

00:26:21 Yeah.

00:26:21 Cool.

00:26:22 Yeah, I won't forget either now.

00:26:23 I didn't realize it was so philosophical, but apparently here it is.

00:26:26 All right, last one.

00:26:28 This was really quick.

00:26:29 This is a project written by Jean-Sebastien Douai.

00:26:33 Did I close it right?

00:26:34 Called pytest Monitor.

00:26:36 And the idea of pytest Monitor...

00:26:38 Brian, are you familiar with this one already?

00:26:40 I looked it up quickly, yeah.

00:26:41 But I haven't used it before.

00:26:42 Yeah, but okay, cool.

00:26:43 Basically, you pip install this and then anytime you run a pytest test, it's going to automatically collect some data for you.

00:26:52 It'll analyze memory consumption, timing, CPU usage, stuff like that.

00:26:57 And it'll put it into a little local SQLite database file, and you can look at it over time and whatnot.

00:27:03 So it's pretty cool, right?

00:27:05 If you want to say, well, how long does this code take to run on the production machine

00:27:10 versus on our laptops, right?

00:27:12 You actually get tracking and whatnot from that.

00:27:15 So not a huge addition, but it's kind of cool.

00:27:18 It's built on a couple of libraries.

00:27:20 PSutil and memory profiler, which let it basically go and ask all these questions on a per test basis.

00:27:28 It's cool.

00:27:29 And then obviously it just runs in pytest.

00:27:31 That's cool.

00:27:31 I could see where you might want to have a report where you just want to run,

00:27:36 limit what that's running on.

00:27:38 I don't know that I would want that necessarily on everything, but you might have some hotspots or whatever where you want to monitor that and report on that.

00:27:47 Having it on everything seems like...

00:27:50 I don't know what the performance implications are of all that monitoring.

00:27:55 I think it'd be cool to see...

00:27:58 This is one of the parts where I'd like to actually see the reporting of this project

00:28:01 have some reporting that's nicer around it, because that's some really cool information,

00:28:07 but I think some reporting would help it.

00:28:09 Yeah, it doesn't look...

00:28:10 It's not beautiful, is it?

00:28:11 It is in the SQLite database.

00:28:13 You could grab it and do what you want, but then you've got to write that.

00:28:15 It's like coverage.

00:28:17 One of the wonderful things about coverage is the reporting part of it.

00:28:20 Yeah, absolutely.

00:28:21 All right.

00:28:22 Well, if that's something you guys care about, go install that and check it out.

00:28:27 All right.

00:28:27 Well, that's it for all of our major items.

00:28:29 Brian, Matt, you guys got anything you want to throw out there extra before we get to our joke?

00:28:33 Stay safe.

00:28:34 Yeah, absolutely.

00:28:35 I've got nothing extra.

00:28:36 How about you, Michael?

00:28:37 Well, I took two of my projects that I've been kind of fiddling with for

00:28:40 either a short time or a long time, depending on which one, and put them both up on PyPI as things you can now pip install.

00:28:47 So that's kind of cool.

00:28:49 So the switch laying, my little extension to add switch to the Python language,

00:28:53 you can pip install that now.

00:28:54 I still love that thing.

00:28:55 I use it all the time.

00:28:56 And then my markdown subtemplates.

00:28:58 Oh, what's that, Matt?

00:28:59 You use that in production.

00:29:00 Oh, yeah.

00:29:02 All the time.

00:29:02 Awesome.

00:29:04 Yeah, there's like a couple of places where it would be like this huge if statement or some other weird lookup.

00:29:09 And it does cool stuff to say like, oh, you already tested for this case.

00:29:12 Or you're like, have the same case in two places.

00:29:15 And you would miss one, the second one, because it'd be caught by the first and so on.

00:29:19 Cool.

00:29:19 Yep.

00:29:20 And then the second one, the markdown subtemplate thing, which we talked about before,

00:29:23 but it was not then pip installable.

00:29:26 So now it is.

00:29:27 People can check those out.

00:29:28 Do you have tests on these, man?

00:29:29 Of course we got tests on those.

00:29:30 Okay.

00:29:31 I don't have pytest monitor on it, but we got tests going.

00:29:34 I have tests in there.

00:29:36 So they do exist.

00:29:37 The code does exist as tests.

00:29:38 It does.

00:29:38 Yes, we can speak of it.

00:29:41 Yes.

00:29:41 Are you all ready for a joke?

00:29:43 Yes.

00:29:43 This one is, it's not really that funny.

00:29:45 It's more like...

00:29:47 As opposed to the rest of our jokes.

00:29:49 Dude, I think I've done that.

00:29:50 Well, some of them are like meant to be straight out funny.

00:29:54 This one's like funny, ironic, because yeah, I did that too at one point or something like that,

00:29:59 right?

00:30:00 So this guy on Twitter sent a message, sarcastic pharmacist, sent it over and said,

00:30:06 I was listening to a discussion on TalkByThon about rebooting a server instead of chasing bugs

00:30:11 and thought you should check out xkcd.com 1495.

00:30:16 And there's just a picture and it has like a trade office.

00:30:21 It says, okay, why is everything broken in my life?

00:30:24 Here's the deal.

00:30:25 like I could spend one to 10 hours figuring out why my server keeps running out of swap space and crashing.

00:30:32 Or I could spend five minutes plugging it into a light timer that reboots it every 24 hours.

00:30:37 That takes five minutes.

00:30:38 Let's do that.

00:30:39 Yeah.

00:30:40 So true.

00:30:41 Yeah.

00:30:43 That's actually an interesting thing.

00:30:45 We just ordered a bunch of web programmable power strips.

00:30:51 Yeah.

00:30:51 Because one of the things you do when working with electronics is sometimes power cycle the things.

00:30:57 Ain't no way to go and do that when I'm working from home.

00:31:00 So.

00:31:00 How interesting.

00:31:01 So you built that into like the CI, CD, hey, with the tests, like let's do that.

00:31:08 Sleep.

00:31:08 Most of the time, these aren't problematic, but there is the occasional in development instrument where,

00:31:14 or in development operating system portions or something like that, where it gets into flaky situations and rebooting is a good,

00:31:21 is a good thing to do from the start.

00:31:23 Because as a software developer, I can get things into really wacky states.

00:31:27 It doesn't happen a lot, but it happens enough to where it's good to know that,

00:31:32 yeah, that you can buy these web power switches.

00:31:34 We're getting industrial ones, which are kind of expensive because you can stick them in instrument racks,

00:31:40 but they're just a normal power strip, but you've, they've got a web address and a rest or on a rest like API that you can put them in strips.

00:31:47 And if you, yeah, if you want to use them in a CI, CD pipeline, you can call them that way too,

00:31:52 if you want.

00:31:53 But normally we just have them as a backup so that we, we can log in and reboot them if we need to.

00:31:59 You don't have them connected to Alexa.

00:32:00 Alexa, reboot my computer.

00:32:04 No.

00:32:05 Yeah.

00:32:05 My test won't pass.

00:32:07 Help.

00:32:08 Shall I reboot again?

00:32:09 Yes, please.

00:32:10 Awesome.

00:32:13 All right.

00:32:13 Well, Brian, thank you as always.

00:32:15 And Matt, thanks for being here today.

00:32:16 It's fun to chat with you.

00:32:17 Yeah.

00:32:17 Thank you.

00:32:18 Yeah.

00:32:18 Thank you for listening to Python Bytes.

00:32:20 Follow the show on Twitter via at Python Bytes.

00:32:23 That's Python Bytes as in B-Y-T-E-S.

00:32:26 And get the full show notes at pythonbytes.fm.

00:32:29 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:32:33 We're always on the lookout for sharing something cool.

00:32:36 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:32:39 Thank you for listening and sharing this podcast with your friends and colleagues.

