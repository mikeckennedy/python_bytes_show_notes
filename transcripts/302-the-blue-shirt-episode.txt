00:00:00 >> Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:06 This is episode 302, recorded September 20th, 2022. I'm Michael Kennedy.

00:00:13 >> I'm Brian Okken.

00:00:14 >> Hey Brian, how are you doing?

00:00:15 >> I'm great. It's a nice day.

00:00:17 >> Yeah, it is a lovely fall day here in the Pacific Northwest.

00:00:21 Dry as can be, I just had a very nice walk with my dog.

00:00:24 >> Nice.

00:00:25 >> It's going to be hard to go back to work after this podcast looking out the window.

00:00:29 I give myself 50-50 chances of making it.

00:00:31 >> Yeah, I got to go back to the other screen.

00:00:34 >> That's right. I was going to be looking that way.

00:00:37 Awesome. Well, before we kick off the show, I also want to say thank you once again to Microsoft for startups.

00:00:43 They're sponsoring this episode again and huge supporters of the show, tell you more about that later.

00:00:48 Brian, could you just whisper to me about your next project here?

00:00:53 >> Code whisperer.

00:00:54 So we've talked about, I think we've talked about GitHub Copilot before.

00:00:59 And I'm not sure if we talked about Amazon's Code Whisperer yet, but--

00:01:03 - I don't think so.

00:01:04 - Okay, so Code Whisperer is a similar kind of thing, I think, I haven't tried it myself actually.

00:01:10 But there's an article by Brian Tarbox that says, "Can Amazon's Code Whisperer write better Python than you?" And it's interesting, I brought this up 'cause I've been thinking about it a lot, about these AI Copilot sort of things and stuff.

00:01:24 So Amazon's offering, looks like it's almost, I don't know if it's a similar sort of model in this example that he's giving.

00:01:34 He has a bunch of examples.

00:01:36 He's going through, you write a descript, he's writing a description.

00:01:41 I don't know if this is the only way, but basically describe the function you want, like function to open an S3 file, and it writes one for you and even titles it.

00:01:50 So you give it a code comment and it like pops out some code.

00:01:55 Now for, this is kind of an interesting thing around, especially around Amazon services, 'cause there's a lot of Amazon services and you do a lot of API lookups and stuff.

00:02:04 So some help directly around APIs, actually, I think that that area makes kind of some sense.

00:02:12 Although if you need an AI to figure out the API, maybe the API is a little complicated, just saying.

00:02:17 - Exactly.

00:02:19 But the discussion is an interesting one through here about basically about the code that it gets out.

00:02:26 And it's really not talking about the morals of it or anything, it's just really talking about using it and how good it is.

00:02:34 The punchline at the end, so the author admits that the title was intended to be clickbaity, which is cool, I'm glad that--

00:02:48 >> Because it's the Internet.

00:02:49 >> Yeah. But despite that, he in walking through it, he thinks that it's actually, it's just making him a little bit better because it's more efficient.

00:03:01 I'd like to quote a little bit.

00:03:03 Despite the click-baity title, whether Code Whisperer's code is better or worse than mine, is at the margins and not really important.

00:03:13 What is significant is that it has potential to save me a ton of time and mental space to focus on improving refactoring and testing.

00:03:21 It makes me a better programmer by taking on some of the undifferentiated heavy lifting.

00:03:26 And I kind of like that idea of it kind of takes away the blank cave canvas situation of like, you know, it might show you how it might one way to do it and you can look at it and go, oh no, I wouldn't do it that way. And then you can change it. But you've, now you're on your second draft already.

00:03:44 Instead of, so it's letting the AI do the first draft.

00:03:48 It's kind of a neat idea.

00:03:49 I was looking, he did this data class one, for instance.

00:03:52 This kind of blew me away.

00:03:54 He's got an inventory item and it's already, and he writes a description for a function that returns whether or not an item costs more than $10.

00:04:05 And it returns, it writes a function called expensive.

00:04:11 Like he didn't say expensive in the title at all, but in the description, it said expensive, and then it returns whether or not the unit price is greater than 10.

00:04:20 - And it realized it was within a class, and so it used self.unitPrice, and not just some unassociated function that returns greater than 10.

00:04:29 - Yeah, so it is interesting.

00:04:33 Yeah, anyway, interesting discussion, and then also interesting looking at the code.

00:04:37 He tried it against test code.

00:04:39 You said, I want to function the test the inventory class.

00:04:42 Well, one, I think it was probably, maybe this was a prompting problem.

00:04:46 You shouldn't have one function to test an entire class.

00:04:49 My druthers.

00:04:51 But it did a decent job of at least giving you a first start of one of the things to test is you need to test the expensive thing, you need to function, you need to test the total cost.

00:05:01 It just did it all in one function though.

00:05:03 I guess that's what he asked for.

00:05:04 >> Coming up with the total cost which is computed, that's interesting.

00:05:08 Yeah, yeah, that is interesting.

00:05:10 Yeah, and it's the base item.

00:05:12 There's a unit price of $10 and there's five of them.

00:05:15 And so in the test it asserted the total cost is 50.

00:05:18 Yeah, definitely interesting.

00:05:20 Interesting to definitely look at and good and it might help you think about other test cases around it.

00:05:25 So so I guess cool.

00:05:27 I wanted to point out while I'm thinking about it.

00:05:29 One of the reasons why I brought this up is I just listened to a changelog episode with Simon Willison called stable diffusion breaks the Internet And this is focused on AI driven artwork, which is definitely interesting and an interesting conversation. But in it, they talk, since these are all programmers, they talk about how this, the same sort of argument applies around, around code generation of the morality of it. And, and then aside, morals aside, and legal stuff aside, it's happening. So how do you, Simon brings up the term of basically just you need to be one level of abstraction above the AI system.

00:06:11 So just to make sure that you were still adding value. And the original author of this article talked about this as well of it's not about really not thinking, it's about freeing up some of your brain space to do other things. So interesting. >> Yeah, it is interesting. I mean, there's There's certain things that you probably don't, just don't need to remember.

00:06:33 I'm thinking of, do I really need to remember all the steps in the connection string schema for connecting to SQLAlchemy?

00:06:41 Probably not.

00:06:42 I could just say, connect SQLAlchemy to a Postgres database and, boom, it gives me, create the metadata base class, and then create an engine, and create a connection, and bind the engine, all those steps, right?

00:06:58 like if you could just kick that stuff out, that's something you want for a project and you just never do.

00:07:03 It's not like, "Boy, I'm sure I'm not good at connecting to SQLAlchemy.

00:07:07 I'm just not a good programmer, I guess." You look it up, you put it in there and you go.

00:07:11 If you didn't have to take the step of looking up, that's cool.

00:07:13 >> Yeah. I also like that.

00:07:15 I didn't think about this before and I think GitHub actually intended you to think about it like this with naming it Copilot.

00:07:21 It's not intended to take over your work, but it's like sitting down with somebody that knows what they're doing and pair programming with them.

00:07:29 You can't turn off your brain, but maybe you can ease up a little bit.

00:07:34 >> Wait, before you close this, scroll down to this black and white code editor.

00:07:38 Boy, look at that.

00:07:39 If you check out this article, there is a, I don't even know what to make of it, because to me it looks like a super retro early Mac OS, like Mac OS 1 type of UI, but then the file is C colon backslash CD.

00:07:52 It's just a mix of beautiful retro.

00:07:55 >> Yeah. Well, he was talking about the first recorded code completion appears in the Pascal editor called Alice in 1985.

00:08:05 >> Yeah. I guess that's it.

00:08:07 Well, that's a heck of an editor. Super cool.

00:08:10 All right. On to the next one?

00:08:12 >> Yeah.

00:08:13 >> Two things real quick. I just want to point out, to make a comment, it's not point out.

00:08:18 This morning I had to make a new API because one thing I've learned about writing courses that depend on other people's APIs, These other people suck at keeping their APIs running.

00:08:27 (laughs)

00:08:28 They either decide, you know what, this is costing me $10,000 a month and I'm gonna have to charge for it, boo hoo.

00:08:33 No, just kidding.

00:08:34 That's a reasonable reason to change, but it changes like with the open weather API or like this one for this Twilio course I was using.

00:08:41 So I spent the morning, a little bit of yesterday and this morning, just doing a complete from scratch fast API, and what a ton of fun it is to just work with fast API and get to build out all sorts of neat little things.

00:08:55 And so I just want to shout out, if you're building something with FastAPI, or you're building an API, definitely give FastAPI a look.

00:09:02 There's a lot of neat things you can do to put together.

00:09:05 Like here's a whole little website.

00:09:06 It even does CSS and images and sort of chameleon templates.

00:09:10 I mean, it's basically static.

00:09:12 But anyway, fun stuff and continues to be fun.

00:09:14 - And so which course is this for?

00:09:17 - This is for the Python-powered chat apps with Twilio and SendGrid, which is actually a free course, but it sets up a chat bot that you order from like a bakery type thing over WhatsApp.

00:09:29 And the problem is if you go to the APIs that the WhatsApp thing was using, they just 500 or four or four, one of those two things, neither of which is super useful for the course.

00:09:39 So I recreated it in fast API this morning, which is cool.

00:09:42 Now it lives on the internet, but that's not what I want to talk about as super as that is.

00:09:47 I want to talk about Apache super set.

00:09:49 Okay.

00:09:50 Have you heard of super set?

00:09:51 >> No. Well, the word I know.

00:09:53 >> Well, of course. But Apache Superset is a modern data exploration and visualization platform.

00:09:58 I came across that the other day and I'm like, what the heck is this? I haven't even heard of this.

00:10:02 It has almost 50,000 GitHub stars.

00:10:05 That's insane and is put together by Max Bushman, also the creator of Apache Airflow, which is pretty cool. This turns out to be a really interesting program and it's written in Python and TypeScript.

00:10:22 It's like really front end heavy because it has a lot of visualizations and stuff.

00:10:25 Right.

00:10:25 But all the backend stuff, it's all the things that you would know it's Flask, it's Redis, Celery, many of the, you know, pandas and data science tools you would know, but it's not exactly a tool for developers like Jupyter.

00:10:38 So Jupyter would be a way that data scientists who know Python would sit down and leverage their Python skills to check out data and explore things.

00:10:46 This one is really almost meant for people who would say, I'm going to fire up Excel and see what's going on, or I'm going to fire up some BI tool like Tableau and I want to look at it a little bit and see what's going on.

00:10:59 It's also open source and written in Python, which means it has APIs and extensions and plugins in Python, which is pretty excellent.

00:11:07 It has a way to explore your data.

00:11:09 Like Brian, look at this picture. What do you think?

00:11:11 >> I don't know what it is, but it's pretty.

00:11:13 >> It's glorious, right? It's a fantastic way to visualize, here's 25 contributors to a stream over time.

00:11:20 You can sort of see like the growth of their contributions or not.

00:11:23 And so the way you generate this is you just connect it to a database.

00:11:27 It gives you the table.

00:11:28 You say, make a chart out of this database and you draggy droppy the pieces over and boom, there it goes.

00:11:34 And it doesn't have to just be the data in the database.

00:11:37 It can be a computed field.

00:11:39 So you could say, I want to graph the sum of this join onto like the orders of each customer or I want to see the max order for each customer, things like that. That's pretty cool.

00:11:50 You can explore data like that.

00:11:52 You can create these dashboards, these live dashboards to see what's the state of our business today.

00:11:58 It even comes with a SQL IDE.

00:12:01 All of this in the browser are very Jupyter-esque. Pretty cool.

00:12:04 >> This is pretty neat.

00:12:06 >> Very, very neat. It connects to, I told you it's Python, it connects to all of its databases using SQLAlchemy.

00:12:14 And so any database that can be a data source for SQLAlchemy, you know, obviously Microsoft SQL Server, Postgres, MySQL, but you know, things you might not think of like Vertica or Druid or Amazon Redshift or Google BigQuery, all of these different data sources, Databricks are available as a data source because SQLAlchemy knows how to talk to it and this just leverages SQLAlchemy.

00:12:37 - Yeah.

00:12:38 Hey, hold it there for a sec.

00:12:39 One of the things I learned recently, which I don't know why I never got this before, But look at the SQLite logo.

00:12:45 - Yes.

00:12:46 - It's got a quill in it.

00:12:47 Did you know that before, that it's a quill for SQLite?

00:12:51 - Oh, quill.

00:12:53 I did not put that together, no.

00:12:54 Ha, how funny.

00:12:55 Now we know.

00:12:57 Cool, so anyway, yeah, people can check this out.

00:12:59 It's kind of a little bit intense to run.

00:13:03 You can pip install it, but probably the better way to do it, if you wanna just try it out, is to install it locally with Docker.

00:13:11 For me, for example, I just put in the GitHub repo and then went in there and said, "Docker compose," gave it the YAML file and said, "Pull," and then up and off it goes.

00:13:20 >> This is not a service.

00:13:21 This is just something you can download and you run then?

00:13:24 >> It's something you can download and run, but it has a lot of infrastructure bits clicking together.

00:13:29 >> Okay.

00:13:29 >> So when I interviewed Max Bushman, he actually is now the CEO and founder of Preset, which is SuperSET as a service.

00:13:40 So if you want to have someone else host it for you, you can go check it out with them.

00:13:44 But it's also a thing you can just run yourself.

00:13:47 But look how popular it is, almost 50,000 GitHub stars, 10,000 forks, and I just learned of it. That's nuts.

00:13:52 >> Well, I mean, go figure.

00:13:54 People actually want to know what's in their data.

00:13:56 >> I know.

00:13:57 >> Weirdos.

00:13:59 >> Yeah, it's so weird. What I think is cool about it is it lets you connect into your live operational data, not just like, "Oh, I downloaded a CSV, and now I can ask questions." You can just, whatever the current data is, Let's get that and build a dashboard around it.

00:14:11 >> Pretty awesome. Yeah.

00:14:13 >> Yeah. All right. Well, Superset, if people need an alternative to Excel or BI or Tableau or whatever, check out Superset. It's very, very Python friendly and looks pretty nice.

00:14:23 >> You know what else is nice?

00:14:24 >> Tell me.

00:14:25 >> Microsoft for Startups.

00:14:27 >> They are. They are very nice.

00:14:30 Yes, it's time to tell everyone about our sponsor, isn't it, Brian?

00:14:34 >> Yeah.

00:14:34 >> Let me tell you all about Microsoft for Startups.

00:14:36 They created Microsoft for Startups Founders Hubs to help give early stage startups the support that they need to be successful.

00:14:44 So if you are dreaming of or in the stages of an early stage startup, you should go apply.

00:14:51 And the link at the bottom in the share notes is buythembuy.fm/foundershub2022, all one word.

00:14:59 Go over there and apply.

00:15:00 It's completely free to apply.

00:15:02 You don't have to be third party verified.

00:15:04 You don't have to be VC funded.

00:15:06 If they think your startup has merit, you're in the program, program comes with many thousands of dollars of cloud credits.

00:15:14 You can, you get some to start and as you make your way through different stages of your life cycle, you get a bunch more, but what's maybe even more important is access to their mentorship network. So there's a reason that Silicon Valley is the heart of so many startups. And it's not just, you know, the nice weather, if anything, that'll encourage people to go outside and not on their projects, right?

00:15:37 It's the network and it's the connections.

00:15:40 And if you live somewhere else, or if you're not in that space, it's very hard to get connected with the right people to make the right steps, right?

00:15:49 So this program will get you set up there.

00:15:52 So in addition to all the cloud credits and so on, you have access to this founders network where you can book one-on-one meetings with hundreds of different mentors, many of whom are founders themselves.

00:16:02 There are experts in areas such as idea validation, fundraising, management and coaching, sales and marketing.

00:16:10 That's the one that's the toughest, I think.

00:16:12 If you can nail that, you're golden.

00:16:14 So make your idea a reality today with the critical support from Microsoft for Startups, Founders Hub, check them out at pythonbio.fm/foundershub2022.

00:16:24 Thanks again to Microsoft for supporting our show.

00:16:27 - Yeah, thank you.

00:16:28 - Yeah, indeed.

00:16:28 All right, Brian, now what you got?

00:16:31 Well, I want to share something that Jeremy Page from the chat says.

00:16:35 I thought SQL, I always thought the SQLite logo was an homage to TCL and I've got the logo for TCL.

00:16:41 So maybe, I don't know.

00:16:43 Oh, perhaps.

00:16:44 Interesting.

00:16:45 So, but I wanted to talk about recipes from Pyth, SQLite again, recipes from Python SQLite docs.

00:16:54 So this is kind of a, there's a, this is an article by, I wrote it down.

00:16:59 I promise I did.

00:17:01 Redouane Delaware, cool name.

00:17:04 So this, he was going through the SQLite 3 docs on the Python docs, and there's a lot of examples, but some of them don't have actual examples.

00:17:14 It just talks about the API.

00:17:15 And so he decided to write out some of the examples, his little code snippets.

00:17:21 And I really like this.

00:17:22 If you're learning SQLite or just wanna learn not SQLite in particular, but databases, These are concepts that apply to a lot of things.

00:17:31 So he's got, of course, whether or not you can execute individual statements or batch statements.

00:17:36 So he's got little examples for that.

00:17:39 Goes into, this is interesting, I thought, was user-defined callbacks.

00:17:43 I thought this was really cool.

00:17:45 For instance, a scalar function.

00:17:47 He defined a, and I knew that like you could put user-defined functions in databases, but I haven't ever done that really.

00:17:54 He has a hash function, SHA-256, that creates a hash for passwords.

00:18:00 Then he shows how to use that when he passes in username and password into the database, how it turns it into a hash, hashes it before it stores it.

00:18:10 >> That's cool. I never knew you could do that.

00:18:12 Here's a Python function passed over to SQLite, and then the SQL statements can call it. That's real cool.

00:18:21 >> Yeah. There's a special syntax.

00:18:23 That's good that there's these examples of insert into user's values and then this question mark and SHA-256 question mark.

00:18:32 >> Also, that's fantastic that that's being shown because that's the parameterized, the anti little Bobby Tables version.

00:18:40 >> Okay.

00:18:41 >> Which is the best practice.

00:18:43 The alternative is something worse.

00:18:46 >> Yeah. Then aggregate functions which got lost here.

00:18:52 But there's a whole bunch of really cool examples of using SQLite and they're really tiny examples.

00:18:59 One of the other reasons I wanted to share this article is, I think this is a really great way to learn an API or learn a service is to write these little example things in little code snippets and try it out.

00:19:14 Try it out with a table that you're creating that only has two or three elements in it so that you can play with it.

00:19:21 You can get your head around what you think the answer should be and what it does. The only thing I think I'd probably add, of course, is if you're going to do little code snippets, these all have to be in separate files, right? Unless you just write test functions.

00:19:35 So this is a great use for pytest. I use it all the time.

00:19:38 If I'm learning something, I just do these little code snippets, but I do them within a test function.

00:19:43 And then it can be, it's not really testing anything except my own knowledge, but I can run them just by right clicking on them or clicking on the little arrow that the editor has for each little function.

00:19:53 Just rerun the failed test until I understand.

00:19:56 >> Until I understand it. Yeah.

00:19:58 >> Yeah. Very cool.

00:19:59 >> Anyway.

00:20:00 >> All right. How about something we don't understand?

00:20:02 >> Okay.

00:20:03 >> Let me take you over to a weird world of cascading consequences.

00:20:07 There's this guy who is an assistant professor at NYU Tandon, security and reverse engineering person named Brandon Dolan-Gavit.

00:20:19 There's this tweet here over to his blog post saying, a new blog post in which I download four terabytes of Python packages containing native x86 libraries, you know, something that's done some C++ thing like G-Event or Pandas, one of those, NumPy, that then bundles it into a wheel.

00:20:39 And apparently there's a bug in one of the C compilers that if you pass -f fast -math, it will potentially alter the floating point behavior of your program if you compile it with All right, so we're in Python, we don't compile things that often, what do we care?

00:20:56 Well, what this does is it reconfigures how the process uses like some low level registers, but some feature of the CPU on how it does floating point math.

00:21:08 And because when the library is loaded, it changes that feature, well, it changes it for the entire program, aka your program.

00:21:15 That doesn't sound great, does it?

00:21:17 - No.

00:21:18 - So let's dive in this.

00:21:20 So the article's called, someone's been messing with my subnormals, subnormals, I suppose, being an aspect of floating-point computations.

00:21:27 So here he is in Python 3.8, and he says, "From transformers, import codegen for causallm." And that's all he wanted.

00:21:37 This is in the IPython terminal.

00:21:39 And it starts bumping out all these warnings.

00:21:41 "Numpy core get limits.

00:21:43 User warning, the value of the smallest subnormal for class numpy.float32 type is zero." over and over and over these start popping out.

00:21:51 It's like, "Hmm, well, warnings about floating point numbers sounds bad." What do you think?

00:21:56 >> Yeah.

00:21:57 >> It turns out that something, not NumPy, but something that is in this library was compiled with this -ffmath-fast flag when it got imported, it changed how NumPy was working.

00:22:13 It says, "What were the problems?" It says, "Well, it changes the floating point a unit behavior that's on the CPU, the actual FPU.

00:22:21 I remember when, by the way, CPUs didn't come with that.

00:22:24 Like I was trying to decide with my first computer to get a 486 SX or DX, and I got the DX because it came with a floating point unit on the CPU.

00:22:33 Anyway, that thing gets messed with and says for some algorithms that depend on the behavior and will fail to converge if it's set to treat this as different.

00:22:44 So it uses the FTZ, DAZ flags in the MX CSR register.

00:22:49 That's part of the part that I don't understand.

00:22:51 I don't work that low level.

00:22:54 But it turns out it's not ideal.

00:22:56 So I said, well, what is actually going on here?

00:22:59 And apparently there's a way, there's a whole bunch of stuff, how you can search through Linux and whatnot to figure out what processes are doing this weird stuff.

00:23:08 And also apparently if you compile with the dash OFAST, it also cascades over to having the same behavior.

00:23:15 So there's some explorations, like you wrote some C code and then imported it into Python.

00:23:22 It seemed about fine.

00:23:23 And then did the same thing with OFaS and able to get all these warnings.

00:23:26 I've never seen this warning, so I guess that's good.

00:23:28 But it turns out the culprit was GEvent of all things, which is a event-based async IO networking library.

00:23:37 But somehow something was using it.

00:23:40 And when it got imported, it freaked everything out.

00:23:42 But then the question becomes, well, if G event can be causing these problems because somebody thought it was awesome to compile the fast version, not the slow version, what else is out there?

00:23:52 So Brandon went through and decided to download four terabytes of wheels for all the things that might have some kind of x86 binary in them.

00:24:02 And then there's a ton of analysis of trying to figure out like, well, how do you actually look for and find whether or not this program has this feature or not.

00:24:11 It turned out to be pretty tricky.

00:24:13 So there's a bunch of stuff about going through to just check to see like what, how do you test it for this many packages?

00:24:20 'Cause the test he was using before was super slow.

00:24:23 So anyway, it's not ideal.

00:24:27 I think there was something like 49 different packages.

00:24:30 Let's see, I wrote it down up here.

00:24:32 I'll get this number right.

00:24:33 Yeah, there's 49 packages on PyPI that were built with this flag.

00:24:39 However, thousands of packages use those libraries and hence were also subject to that behavior with 10 million downloads in the last 30 days.

00:24:48 So that's pretty nuts, huh?

00:24:50 - Well, I mean, you're kind of scaring me.

00:24:52 So how do I know if I need to care, I guess?

00:24:56 - You know, are you doing iterative floating point math that goes down to like very small things?

00:25:01 Probably, probably not.

00:25:03 I don't think I need to care.

00:25:04 I'm doing like, I need, I didn't need to know what 33 percent of 69 is.

00:25:09 Should be fine. But if you're doing-

00:25:12 >> Well, you got to test your code and I guess we have to test our math as well.

00:25:17 I just trust that a lot of that works.

00:25:19 >> Yeah. I suppose you would see those warnings about the floating point.

00:25:24 >> Okay.

00:25:24 >> Subnormal coming in.

00:25:26 >> Okay.

00:25:26 >> Yeah. There's a great long list of here of packages.

00:25:31 Let's see. I'll just read some out.

00:25:33 people might know. So for example, G-Event, G-Event, G-Event HTTP client, Flask, Socket.io, Dagster, which is used in data science a lot for like data engineering, WebSocket, G-Event WebSocket, Locust for testing, Interpret, High Kafka, and on and on, Locust plugins, Parallel SSH, right? So it doesn't matter if you're using that library for the math.

00:25:58 Just if it gets imported, it changes all the math of the program. So anyway, there, there it is, people can check it out.

00:26:05 The comments are pretty glowing about this research.

00:26:08 Matthew Adams, for example, says crazy, awesome work, bro.

00:26:12 You should be knighted for this.

00:26:13 in our chat, Alvaro says, run your, run your test with a dash W error, which you should be anyway.

00:26:21 So cool.

00:26:21 So warnings treated as errors basically.

00:26:24 Yeah.

00:26:24 Yeah.

00:26:25 Or set that particular one to be a warning.

00:26:28 All right.

00:26:28 Well, I guess that's it for our four items that we're covering today.

00:26:31 I'm right.

00:26:32 >> Yeah, I was giggling during part of that because the subnormal just cracking me up.

00:26:38 Why does Brian talk like that?

00:26:41 I don't understand most of his words.

00:26:42 Oh, don't worry about him, he's subnormal.

00:26:45 I don't know.

00:26:48 >> I also like the title of the overall blog, Push the Red Button.

00:26:53 >> Push the Red Button.

00:26:54 >> For research malware, reverse engineering, pen testing, and blog.

00:26:58 >> Yeah.

00:26:59 >> Nice.

00:27:00 >> Nice.

00:27:00 >> All right. Well, how about some extras you got for us?

00:27:03 >> I don't have anything I want to show, but I was just going to say a couple of things I've been up to.

00:27:09 I've been thinking about changelogs a lot and on test and code, instead of doing one episode on changelogs, I thought I would talk to several people and do an NPR style combining a whole bunch of stuff.

00:27:22 >> Yeah, that's awesome.

00:27:22 >> It might end up being a series of episodes that I'll release together or one long episode, I'm not sure yet.

00:27:28 but basically I'm thinking about change logs a lot.

00:27:31 The other thing I've been doing is thinking about, so we had that pytest course out last week.

00:27:37 >> We did.

00:27:38 >> It's awesome on Python training.

00:27:42 It's cool. Anyway, Talk Python Training, I always get to it by just remembering that I switched that and just say training.talkpython.fm and you can get there.

00:27:53 But I've had some requests to take some of the content and change it for individual teams.

00:28:01 This is an interesting thing to me to think about.

00:28:04 Because in this course, we do a database and a command line interface, but we're mostly testing through the API, so API with the database application.

00:28:12 We're doing the layered things.

00:28:15 But some people are like, "Well, I don't use a database, so maybe we could swap that out with an example that uses one of the resources we have." More of our example, we don't do the API, we do these little, we're testing something else.

00:28:28 So like, okay, we can cover the concept.

00:28:30 So it's a neat idea to try to focus that towards people.

00:28:33 So I guess if you're interested in doing that, check out pythontest.com and under training, check me out.

00:28:40 - Yeah, awesome.

00:28:41 Yeah, there's a lot of ideas in that course that can be applied to different industries.

00:28:45 - Different ways, yeah.

00:28:46 - Yeah, different ways for sure.

00:28:47 Awesome, yeah, so the pytest course is going super strong.

00:28:50 People really love it.

00:28:52 Great work on that, Brian.

00:28:53 I have another course to announce because it's been a week.

00:28:56 - It's been a week.

00:28:57 - It's been a week.

00:28:58 Python data visualization.

00:29:00 So this is a course by Chris Moffett over at Talk Python Training.

00:29:04 And the idea is there's all these different choices.

00:29:07 I mean, we just talked about superset today and throw that in as another thing in the pile of general visualization tools, right?

00:29:14 So you might do matplotlib or maybe you wanna use something new like Altair.

00:29:18 So this course goes through and shows you what it's like to do visualizations in these different frameworks like Matplotlib, Seaborn, even Pandas and Plotly and Streamlet.

00:29:29 Then you can build out these different scenarios and say, well, in this case, it might make more sense to use Matplotlib or I might choose Altair.

00:29:37 It'll help you choose a visualization framework, but also it'll show you how to use all of them.

00:29:41 So it's a nice broad exposure to all these different frameworks.

00:29:44 So people can check that out, talkaboutthem.fm, click on "Courses".

00:29:48 >> This is definitely useful.

00:29:49 I got a project that I need this for.

00:29:51 >> Yeah, this is going to be a good one.

00:29:52 It is a good one, I've already seen it.

00:29:54 I've seen it several times actually, but it's good.

00:29:56 (laughs)

00:29:57 Let me see, do I have any more extras I wanna give a shout out to?

00:30:01 No, just those two things.

00:30:02 And then I have, I have two jokes for you this week because one is not enough.

00:30:05 - No, yeah.

00:30:07 - The first one here has to do with people who maybe learned a different language, maybe are hating a little on Python.

00:30:14 So here's somebody says, me laughing at all the Python hate on this sub Reddit as I study C#, silly language, come on.

00:30:24 We all know C# is better.

00:30:25 And then, as a like a smiling, laughing person, and then a more seriously, somewhat concerned, starting a new job and realizing on the job board, 95% of them are asking for Python.

00:30:35 (laughing)

00:30:36 Oops, that's very fun.

00:30:37 - Well, now I wanna go over to the C# subreddit and see if I can find some anti-Python jokes.

00:30:45 - I know, wouldn't that be good?

00:30:46 (laughing)

00:30:47 All right, well, that one's pretty good.

00:30:48 And then were you affected by the recent, for people who are not in our area in Pacific Northwest, there was a massive windstorm, like 30, 40 mile an hour wind, 25% humidity, 100 degrees.

00:31:02 It was like if somebody threw a cigarette out the window, the entire Pacific Northwest would just go, it instantly catch fire.

00:31:08 It was like, it was insanely bad.

00:31:09 And so we had our power turned off in the West Hills here because the trees were so likely to fall over and cause a fire from knocking over.

00:31:19 So they just cut the power for like a little bit.

00:31:22 They also did that in California.

00:31:23 There's like a big, it's a bit of an irony.

00:31:25 Like one day they said, we're gonna only allow the sale of electric cars after 30, 35 or something, or whatever the date is.

00:31:33 I mean, I'm in support of that.

00:31:34 I'm a fan of electric cars and all, but like the next week they said, oh, we're gonna turn off your power 'cause, actually I think the electric cars might help balance it out.

00:31:42 But anyway, a bit of an irony.

00:31:44 So this next joke has to do with that.

00:31:46 So I got a hold of this from Kylie Codes and she highlighted this tweet that says, "The governor has declared," this is for California, "The governor has declared a state of emergency "and asked all Californians not to run NPM install "between 4 p.m. and 9 p.m. today "in an effort to save energy "and fight this wildfire danger." - That's awesome.

00:32:06 - Isn't that good?

00:32:07 - Yeah.

00:32:08 (laughing)

00:32:09 - Yeah, I love it.

00:32:10 So that's the two jokes I got for you.

00:32:13 - Yeah.

00:32:14 - Nothing too deep.

00:32:15 >> Well, then also you may have missed one.

00:32:17 There was the build on of that.

00:32:20 >> The build. All right, tell us about it.

00:32:22 >> Okay. Governor declares a state of emergency and asked all Californians to not run WasmPack build between 4 PM and 9 PM.

00:32:30 >> Exactly.

00:32:31 >> Nice.

00:32:31 >> Cool. John Sheehan says, "It's funny because it's true." Didn't you just talk about the other day about rough and having our Python tools faster, like the JavaScript community is being concerned about faster tools.

00:32:48 Maybe not everywhere. Maybe not 100 percent.

00:32:50 >> Yeah.

00:32:51 >> Awesome. All right. Well, good episode as always. Thank you.

00:32:56 >> Thank you. We'll talk to you next week.

00:32:58 >> Yeah. See you next week. Thanks everyone for listening. Bye.

