
00:00:00.000 --> 00:00:04.700
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.700 --> 00:00:09.200
This is episode 71, recorded March 22nd, 2018.


00:00:09.200 --> 00:00:13.600
I'm Michael Kennedy, and normally I would introduce Brian, but Brian is not here this week.


00:00:13.600 --> 00:00:16.800
So I'm here with Trey Hunter. Trey, hello, and welcome to the show.


00:00:16.800 --> 00:00:18.300
Hi, thanks, Michael. How are you doing?


00:00:18.300 --> 00:00:19.800
I'm doing great, doing great.


00:00:19.800 --> 00:00:21.100
Thanks for dropping in.


00:00:21.100 --> 00:00:25.400
There's a bit of a shuffle with the whole Spring Break travel chaos going on,


00:00:25.400 --> 00:00:28.600
and so it's really great that you're here to record with us,


00:00:28.600 --> 00:00:31.640
and Brian will be back with me next week.


00:00:31.640 --> 00:00:34.280
So, you know, probably a lot of people out there in the audience know you,


00:00:34.280 --> 00:00:37.320
but maybe a really quick introduction just so people know who you are.


00:00:37.320 --> 00:00:40.440
Yeah, I am super happy to be here because I'm a big listener of the show.


00:00:40.440 --> 00:00:42.680
I do on-site Python training for teams,


00:00:42.680 --> 00:00:45.720
and I help folks learn Python on the internet through weekly things,


00:00:45.720 --> 00:00:46.680
and I tweet a whole bunch.


00:00:46.680 --> 00:00:49.320
So folks have probably seen me on the internet, if anywhere.


00:00:49.320 --> 00:00:51.480
You work on the internet. That's awesome.


00:00:51.480 --> 00:00:52.040
Yes.


00:00:52.040 --> 00:00:53.960
And do things on that internet. All right, awesome.


00:00:53.960 --> 00:00:56.040
So before we get to the first item that you picked,


00:00:56.040 --> 00:00:58.360
I just want to say thank you to Digital Ocean.


00:00:58.360 --> 00:01:00.360
They're sponsoring this episode like they do many.


00:01:00.360 --> 00:01:03.160
Check them out at do.co/python.


00:01:03.160 --> 00:01:04.520
Trey, what do you got for us this week?


00:01:04.520 --> 00:01:08.360
So my first pick is kind of related to a talk I'm doing at PyCon.


00:01:08.360 --> 00:01:10.040
I've been researching this stuff a whole bunch.


00:01:10.040 --> 00:01:12.760
It's the conservative Python 3 porting guide.


00:01:12.760 --> 00:01:15.960
This was written by a whole bunch of folks at Red Hat.


00:01:15.960 --> 00:01:18.920
And it's pretty much the best porting guide I've seen


00:01:18.920 --> 00:01:22.520
for how to take your code from Python 2 and switch it to Python 3.


00:01:22.520 --> 00:01:25.160
It's not perfect, but none of the guides out there really are.


00:01:25.160 --> 00:01:28.360
Yeah, this is something that there's really not as much


00:01:28.360 --> 00:01:30.360
material on as I


00:01:30.360 --> 00:01:34.120
kind of would expect there to be. I mean, there are tools, we have six, we have


00:01:34.120 --> 00:01:36.600
two to three, we have Anthony Shaw's


00:01:36.600 --> 00:01:39.800
Pluralsight course that he just launched, which is really a good course.


00:01:39.800 --> 00:01:41.240
But, you know, that's brand new.


00:01:41.240 --> 00:01:42.280
And


00:01:42.280 --> 00:01:46.840
Guido just recently made a statement, which I thought was great, that


00:01:46.840 --> 00:01:50.200
really solidified the date. Because for a long time it's like, well,


00:01:50.200 --> 00:01:53.000
Python 2 is going to go out of


00:01:53.000 --> 00:01:55.560
out of support, out of security patches and all that stuff


00:01:55.560 --> 00:01:58.960
in 2020. And like, that's a whole year, right?


00:01:58.960 --> 00:02:01.560
We need a more time frame than a year, right?


00:02:01.560 --> 00:02:02.680
So when is it actually going out?


00:02:02.680 --> 00:02:06.200
It's January 1st, 2020. So it is less than two years away now.


00:02:06.200 --> 00:02:10.240
So people should probably start paying attention to this if they're ever going to.


00:02:10.240 --> 00:02:12.120
Yeah, this is a really big deal.


00:02:12.120 --> 00:02:14.800
A lot of my clients use Python 2


00:02:14.800 --> 00:02:18.120
and switching to Python 3 is going to be a really big headache.


00:02:18.120 --> 00:02:20.640
I do wish this guy'd used the Future library,


00:02:20.640 --> 00:02:26.520
which I know Anthony uses in his courses at Pluralsight or his one course there on switching from Python 2 to 3,


00:02:26.520 --> 00:02:28.360
instead of the modernized library.


00:02:28.360 --> 00:02:30.280
But I mean, none of these guides is perfect.


00:02:30.280 --> 00:02:31.720
Some of them are a little bit older than others.


00:02:31.720 --> 00:02:33.560
This is just one of the best ones I found out there.


00:02:33.560 --> 00:02:34.480
Yeah, that's really awesome.


00:02:34.480 --> 00:02:35.320
I really like it.


00:02:35.320 --> 00:02:38.240
It's called the conservative Python 3 porting guide.


00:02:38.240 --> 00:02:39.680
Why conservative?


00:02:39.680 --> 00:02:45.240
Conservative because they don't try to get you using Python, new fancy Python 3 features.


00:02:45.240 --> 00:02:49.960
They're just trying to get your code working on Python 3, even if in a kind of begrudging way.


00:02:49.960 --> 00:02:53.800
If you don't want to switch, you have to out of necessity, this is a conservative guide.


00:02:53.800 --> 00:02:56.680
I see. So it's not like, oh, and while you're here,


00:02:56.680 --> 00:02:59.080
wouldn't it be awesome to throw a little async and await in there?


00:02:59.080 --> 00:02:59.800
Exactly.


00:02:59.800 --> 00:03:04.440
And maybe some stars to force some keyword arguments and off you go.


00:03:04.440 --> 00:03:08.600
No, this is just like, you need to get it to your older code,


00:03:08.600 --> 00:03:11.080
your legacy code to run on modern Python.


00:03:11.080 --> 00:03:13.640
And that's it. No changes.


00:03:13.640 --> 00:03:15.880
Absolutely. Yeah, this is you just need to get running.


00:03:15.880 --> 00:03:18.120
Yeah, I think that's a really good way to do it because


00:03:19.000 --> 00:03:23.260
On one hand, I'm sure it's super tempting, you're in there, you want to make all these changes, but on the other,


00:03:23.260 --> 00:03:27.560
you don't want to conflate the making it run on Python with adding new features,


00:03:27.560 --> 00:03:31.860
re-architecting your code, and so on, right? Maybe that's a second project.


00:03:31.860 --> 00:03:32.860
Absolutely.


00:03:32.860 --> 00:03:34.660
So I have a question for you.


00:03:34.660 --> 00:03:35.160
Okay.


00:03:35.160 --> 00:03:36.760
Which companies use Python?


00:03:36.760 --> 00:03:39.960
Well, there are a ton of them, actually.


00:03:39.960 --> 00:03:43.960
Some of the best companies on the web that you know of definitely use it.


00:03:43.960 --> 00:03:48.500
So there's a really cool article on realpython.com by Jason Reynolds,


00:03:48.500 --> 00:03:52.900
And I think a lot of people come to Python.


00:03:52.900 --> 00:03:54.500
I don't know, you give me your opinion on this.


00:03:54.500 --> 00:03:55.700
I feel like they come and they're like,


00:03:55.700 --> 00:03:59.600
"Oh, I write a few scripts and I kind of like tinker with Python,


00:03:59.600 --> 00:04:01.400
but I don't write apps in Python."


00:04:01.400 --> 00:04:02.400
Like, that's a different thing.


00:04:02.400 --> 00:04:03.400
Do you get this experience?


00:04:03.400 --> 00:04:06.700
Absolutely. This is a big thing with a lot of my clients is we use Python,


00:04:06.700 --> 00:04:09.800
we don't use it for making deployable software our clients use.


00:04:09.800 --> 00:04:10.900
It's just for scripts.


00:04:10.900 --> 00:04:11.800
Right, exactly.


00:04:11.800 --> 00:04:14.600
And so, obviously, that's possible with Python,


00:04:14.600 --> 00:04:15.900
but there's so much more that you can do.


00:04:15.900 --> 00:04:22.200
So I just wanted to pull this article up as some examples for how people might use Python.


00:04:22.200 --> 00:04:26.160
And if you're thinking of using Python at your company and they're like, "No, no, we use C#."


00:04:26.160 --> 00:04:29.000
That compiles. That's something we can use in large projects.


00:04:29.000 --> 00:04:30.500
We can't use a toy language, right?


00:04:30.500 --> 00:04:32.040
Like, think about what these companies are doing.


00:04:32.040 --> 00:04:39.040
So the first one, Industrial Light & Magic, they do all the special effects from any of the sci-fi movies and so on.


00:04:39.040 --> 00:04:44.000
And they use Python to track and audit pipeline functionality,


00:04:44.000 --> 00:04:49.640
maintain databases and basically move items and assets through like a pipeline.


00:04:49.640 --> 00:04:50.640
That's pretty awesome.


00:04:50.640 --> 00:04:51.640
We have Google.


00:04:51.640 --> 00:04:55.880
So in the beginning, of course, right, of course, Guido worked there.


00:04:55.880 --> 00:04:59.500
Many of the luminaries in the Python space have or do.


00:04:59.500 --> 00:05:04.880
And they said, the founder said, we're going to use Python where we can and C++ where we


00:05:04.880 --> 00:05:05.880
must.


00:05:05.880 --> 00:05:06.880
That's pretty cool, right?


00:05:06.880 --> 00:05:07.880
That is really cool.


00:05:07.880 --> 00:05:08.880
I love that phrase.


00:05:08.880 --> 00:05:13.960
And of course, Python powers YouTube still to this day, handling millions of requests,


00:05:13.960 --> 00:05:16.760
per second, that's a pretty insane number, right?


00:05:16.760 --> 00:05:19.280
- That's a ton of stuff to be putting through Python there.


00:05:19.280 --> 00:05:21.320
- I know, that's quite a bit.


00:05:21.320 --> 00:05:23.600
It's really impressive how much is going on there.


00:05:23.600 --> 00:05:27.080
And actually, there's some really interesting comparisons.


00:05:27.080 --> 00:05:29.400
Like there used to be Google Video,


00:05:29.400 --> 00:05:31.680
which was a competitor to YouTube


00:05:31.680 --> 00:05:32.840
when YouTube was a startup.


00:05:32.840 --> 00:05:36.240
And they were doing all their work in C++ at Google Video.


00:05:36.240 --> 00:05:38.440
And the people, many fewer,


00:05:38.440 --> 00:05:41.840
like 20 versus hundreds of engineers were writing Python


00:05:41.840 --> 00:05:43.820
and just like running circles around Google Video.


00:05:43.820 --> 00:05:46.060
So Google solved it by buying YouTube.


00:05:46.060 --> 00:05:47.140
It's a pretty interesting history.


00:05:47.140 --> 00:05:48.060
- I never knew that.


00:05:48.060 --> 00:05:50.220
I mean, I knew they acquired YouTube while having video.


00:05:50.220 --> 00:05:53.400
I didn't know that Python was a deciding factor there.


00:05:53.400 --> 00:05:55.160
- Yeah, it was one of the deciding factors


00:05:55.160 --> 00:05:57.620
that let like the small team outperform Google


00:05:57.620 --> 00:06:00.860
'cause Google is using C++ for their video service.


00:06:00.860 --> 00:06:03.420
All right, so speaking of large services, Facebook.


00:06:03.420 --> 00:06:05.460
They use this mostly on the infrastructure side,


00:06:05.460 --> 00:06:06.860
but Facebook is really interesting


00:06:06.860 --> 00:06:09.460
in that they have did a really interesting thing


00:06:09.460 --> 00:06:12.420
moving from Python 2 to Python 3


00:06:12.420 --> 00:06:15.540
as sort of like changing the engineering culture.


00:06:15.540 --> 00:06:17.620
Jason Freed did this really awesome talk on that


00:06:17.620 --> 00:06:20.140
and the whole steps in which they took


00:06:20.140 --> 00:06:21.940
to make this happen are pretty amazing.


00:06:21.940 --> 00:06:22.780
Did you happen to see that talk?


00:06:22.780 --> 00:06:24.760
- I did, you know, I think he's given a similar talk


00:06:24.760 --> 00:06:26.100
at PyCon actually this year.


00:06:26.100 --> 00:06:27.740
- Oh, that'd be awesome, I'm definitely going.


00:06:27.740 --> 00:06:28.660
Definitely going.


00:06:28.660 --> 00:06:32.060
Closely related is Instagram because kind of like YouTube,


00:06:32.060 --> 00:06:33.700
Instagram was its own thing


00:06:33.700 --> 00:06:36.700
and now it is like engulfed into Facebook.


00:06:36.700 --> 00:06:39.620
But they run the largest deployment


00:06:39.620 --> 00:06:41.720
of Django web framework in the world.


00:06:41.720 --> 00:06:45.620
and they have like 800 million active users.


00:06:45.620 --> 00:06:50.820
I think maybe the most notable thing was Instagram's keynote at the 2017 PyCon


00:06:50.820 --> 00:06:53.420
with Lisa Guo and Hui Ding,


00:06:53.420 --> 00:06:56.420
who gave like the most inspiring talk,


00:06:56.420 --> 00:06:59.620
how they migrated from old version Django to new version Django


00:06:59.620 --> 00:07:04.120
and Python 2 to Python 3 without branching and continuing to ship features.


00:07:04.120 --> 00:07:06.420
Yeah, that was amazing. I really liked that talk


00:07:06.420 --> 00:07:09.320
because in the beginning they started with, here's how we did it at a high level


00:07:09.320 --> 00:07:13.960
and towards the end, they dove right into the code that they use and the difficulties they encountered.


00:07:13.960 --> 00:07:16.760
And, you know, if you are afraid of encountering difficulties,


00:07:16.760 --> 00:07:20.600
look at the ones that Instagram encounter because they've got a big code base.


00:07:20.600 --> 00:07:24.440
Yeah, they have like millions and millions of lines or something. It's insane.


00:07:24.440 --> 00:07:26.440
But the way they did it was truly inspiring.


00:07:26.440 --> 00:07:30.600
And I felt like that was actually like a really clear playbook of, hey, we could do the same thing.


00:07:30.600 --> 00:07:31.080
Absolutely.


00:07:31.080 --> 00:07:34.600
We also have Spotify, they're doing a bunch of stuff with Python,


00:07:34.600 --> 00:07:37.480
primarily as back-end services and data analysis.


00:07:37.480 --> 00:07:40.320
Quora, I think Quora is the best Q&A place on the internet.


00:07:40.320 --> 00:07:43.820
It always seems to have such like super thoughtful questions and answers.


00:07:43.820 --> 00:07:48.020
You know, I don't use Quora much, mostly because whenever I go, it asks me to sign up


00:07:48.020 --> 00:07:50.880
or sign in, so I mostly go to the other ones for that reason.


00:07:50.880 --> 00:07:53.180
But I have actually found a lot of useful stuff in Quora before.


00:07:53.180 --> 00:07:57.720
Yeah, I'm just surprised how much time and energy people are willing to put into answers there.


00:07:57.720 --> 00:07:58.620
Absolutely.


00:07:58.620 --> 00:08:01.780
It's interesting because that runs on Python, of course, and they were thinking


00:08:01.780 --> 00:08:06.880
about maybe C#, maybe Java, maybe Python, maybe C++ and so on.


00:08:06.880 --> 00:08:09.440
And in the end, they ended up kind of doing what Google did,


00:08:09.440 --> 00:08:12.360
is Python where they can, C++ where they must.


00:08:12.360 --> 00:08:14.960
Netflix, obviously Netflix is insane.


00:08:14.960 --> 00:08:17.000
They do, like, in the evenings,


00:08:17.000 --> 00:08:18.880
they account for one third of the bandwidth


00:08:18.880 --> 00:08:19.960
in the United States.


00:08:19.960 --> 00:08:20.800
- Wow.


00:08:20.800 --> 00:08:22.360
- Yeah, and they run all their infrastructure


00:08:22.360 --> 00:08:24.520
and management and operations stuff over Python.


00:08:24.520 --> 00:08:26.520
I actually talked to those guys over at Talk Python


00:08:26.520 --> 00:08:28.960
on episode 16 way back in the day.


00:08:28.960 --> 00:08:31.000
Really interesting stuff they're doing.


00:08:31.000 --> 00:08:34.120
Dropbox, when I think of the center of the universe


00:08:34.120 --> 00:08:35.520
of Python, I think Dropbox.


00:08:35.520 --> 00:08:36.360
What do you think?


00:08:36.360 --> 00:08:38.500
- Well, Guido works there.


00:08:38.500 --> 00:08:39.380
- That's a big reason.


00:08:39.380 --> 00:08:41.840
- It seems to be one of the companies that like,


00:08:41.840 --> 00:08:45.280
is one of these major, major sort of technology companies


00:08:45.280 --> 00:08:47.320
that is all in on Python, right?


00:08:47.320 --> 00:08:50.240
Like even their little widget thing that ships


00:08:50.240 --> 00:08:55.000
as a client app that is in your tray or your menu bar,


00:08:55.000 --> 00:08:55.920
that's even Python.


00:08:55.920 --> 00:08:58.560
- Yeah, they definitely got a ton of deployed Python code


00:08:58.560 --> 00:09:01.460
on desktop computers that they don't have control over,


00:09:01.460 --> 00:09:02.320
which is pretty amazing.


00:09:02.320 --> 00:09:04.080
I think they also have some open source packages


00:09:04.080 --> 00:09:05.440
up on GitHub, their Python.


00:09:05.440 --> 00:09:06.700
- Yeah, I think they do have a lot of


00:09:06.700 --> 00:09:07.660
really interesting stuff.


00:09:07.660 --> 00:09:09.040
And they've had some stuff that they put out


00:09:09.040 --> 00:09:11.000
that's kind of like left to go as experiments.


00:09:11.000 --> 00:09:12.200
Very, very interesting.


00:09:12.200 --> 00:09:14.720
So last one I'll leave you with, Reddit.


00:09:14.720 --> 00:09:17.560
So they have half a billion visitors a month.


00:09:17.560 --> 00:09:22.280
They had, let's see, it was the fourth most visited site


00:09:22.280 --> 00:09:24.760
in the United States and seventh in the world.


00:09:24.760 --> 00:09:28.760
And I guess in 2015, they said they had 82 billion


00:09:28.760 --> 00:09:31.160
page views, which is kind of insane.


00:09:31.160 --> 00:09:33.640
And of course, that's all driven on Python,


00:09:33.640 --> 00:09:35.320
SQLAlchemy, all sorts of goodness.


00:09:35.320 --> 00:09:36.160
- That's pretty incredible.


00:09:36.160 --> 00:09:37.160
- Yeah, awesome.


00:09:37.160 --> 00:09:39.720
Those are the companies that I kind of wanted to highlight


00:09:39.720 --> 00:09:40.920
out of that article and just thought,


00:09:40.920 --> 00:09:42.680
like, these are really great examples.


00:09:42.680 --> 00:09:43.520
And if people are saying,


00:09:43.520 --> 00:09:45.800
"Oh, but we have like 100,000 users.


00:09:45.800 --> 00:09:46.780
"We can't use Python.


00:09:46.780 --> 00:09:47.640
"It's not gonna scale."


00:09:47.640 --> 00:09:51.480
Like, well, yeah, probably not the real problem.


00:09:51.480 --> 00:09:52.680
There's probably some kind of architecture


00:09:52.680 --> 00:09:54.640
or infrastructure thing that is actually


00:09:54.640 --> 00:09:55.920
gonna make this work easily.


00:09:55.920 --> 00:09:56.740
- For sure.


00:09:56.740 --> 00:09:57.580
- Yeah, nice.


00:09:57.580 --> 00:10:00.400
So do you think we should stop writing classes, Trey?


00:10:00.400 --> 00:10:01.720
- Maybe.


00:10:01.720 --> 00:10:03.760
I don't know if we should stop writing classes entirely,


00:10:03.760 --> 00:10:07.000
But my favorite, well, one of my favorite PyCon talks,


00:10:07.000 --> 00:10:08.700
I tend to tell people it's my favorite


00:10:08.700 --> 00:10:10.000
because I recommend it so much,


00:10:10.000 --> 00:10:14.000
is "Stop Writing Classes" by Jack Diedrich.


00:10:14.000 --> 00:10:17.800
This is from PyCon 2012, so it's kind of an old talk,


00:10:17.800 --> 00:10:20.680
but it is definitely the days of Python 2,


00:10:20.680 --> 00:10:23.480
but all the code in it, all the advice in it


00:10:23.480 --> 00:10:25.520
is still really applicable today.


00:10:25.520 --> 00:10:27.160
- Yeah, that's really awesome.


00:10:27.160 --> 00:10:29.600
So give us the main takeaway from it.


00:10:29.600 --> 00:10:31.840
- One of the biggest bits of advice in it


00:10:31.840 --> 00:10:35.480
that I tend to tell people is if you have a class that only has two methods,


00:10:35.480 --> 00:10:37.720
one of those is your dunder and knit method,


00:10:37.720 --> 00:10:40.120
and the other one is some other method,


00:10:40.120 --> 00:10:41.800
especially if it's called call,


00:10:41.800 --> 00:10:44.280
you probably need a function instead of a class.


00:10:44.280 --> 00:10:49.400
So this is something I recommend a lot to folks moving to Python from Java and C++


00:10:49.400 --> 00:10:51.880
because I teach a lot of folks who are moving programming languages


00:10:51.880 --> 00:10:54.120
and you know, Python is just different from the other languages.


00:10:54.120 --> 00:10:57.560
Especially if what you're going to have is effectively a static class,


00:10:57.560 --> 00:11:00.560
right? Like, there's just one copy of the variables.


00:11:00.560 --> 00:11:04.280
it's very likely that you could get away, and you're not doing any inheritance,


00:11:04.280 --> 00:11:07.400
you're not doing any of that kind of stuff, you probably could just have a set of functions


00:11:07.400 --> 00:11:11.680
and module level variables, and you get effectively the same output.


00:11:11.680 --> 00:11:13.920
Yeah, absolutely, and that's something I see a lot in code.


00:11:13.920 --> 00:11:16.560
On the flip side of things, though, one of the great things about this talk is


00:11:16.560 --> 00:11:18.560
it doesn't just show you when not to write classes,


00:11:18.560 --> 00:11:21.760
it does show you a couple examples of when classes are really handy in Python.


00:11:21.760 --> 00:11:25.160
Yeah, that's cool. I'm still a big fan of object-oriented programming.


00:11:25.160 --> 00:11:27.160
I think there's still, you know, people,


00:11:27.160 --> 00:11:30.960
it fades in and out of popularity. I still think it's a really great way to model stuff.


00:11:30.960 --> 00:11:33.760
But when you're creating more than one of the things typically, right?


00:11:33.760 --> 00:11:36.960
Absolutely. Yeah, it's when you need to make more than one of them,


00:11:36.960 --> 00:11:40.100
when you need to use it more than once, that's the time where classes need.


00:11:40.100 --> 00:11:41.420
They really can be abused.


00:11:41.420 --> 00:11:42.420
Yeah, absolutely.


00:11:42.420 --> 00:11:44.960
So what's up with PyPI, Michael?


00:11:44.960 --> 00:11:48.620
I'm going to tell you about PyPI. I'm super excited. But before I do, I want to tell you about


00:11:48.620 --> 00:11:53.500
DigitalOcean. So there's this thing coming up where I might need a whole lot more


00:11:53.500 --> 00:11:54.960
power for my web server,


00:11:54.960 --> 00:11:56.040
'cause there's some big promotion


00:11:56.040 --> 00:11:58.360
and it could kind of end up overwhelming my servers,


00:11:58.360 --> 00:12:00.480
which so far they've never had an issue.


00:12:00.480 --> 00:12:02.640
Like you log in, it's like three, 4% CPU.


00:12:02.640 --> 00:12:05.080
But one of the things that's really cool about DigitalOcean


00:12:05.080 --> 00:12:06.640
is if you have one of their servers,


00:12:06.640 --> 00:12:08.560
you can go over there and you can flip a switch


00:12:08.560 --> 00:12:10.040
and within just a couple minutes,


00:12:10.040 --> 00:12:11.840
it will take it offline for a second,


00:12:11.840 --> 00:12:16.640
resize, re-whatever, however you change the infrastructure.


00:12:16.640 --> 00:12:19.800
Say I want four CPUs and eight gigs of RAM,


00:12:19.800 --> 00:12:20.640
change it to that.


00:12:20.640 --> 00:12:22.400
And you could do that for like one day


00:12:22.400 --> 00:12:24.240
and then go, no, no, back to the one gig,


00:12:24.240 --> 00:12:25.860
one CPU the next day, right?


00:12:25.860 --> 00:12:28.600
Spend five bucks and get like some super huge server


00:12:28.600 --> 00:12:30.360
to handle some spike that you know is coming.


00:12:30.360 --> 00:12:32.200
So pretty cool.


00:12:32.200 --> 00:12:34.000
A lot of the stuff that I do on the web


00:12:34.000 --> 00:12:35.200
is running through DigitalOcean,


00:12:35.200 --> 00:12:37.180
so definitely recommend them.


00:12:37.180 --> 00:12:40.440
Check them out at do.co/python.


00:12:40.440 --> 00:12:42.340
They help make the show possible.


00:12:42.340 --> 00:12:43.880
So another thing that I think is doing


00:12:43.880 --> 00:12:45.560
really awesome stuff on the web,


00:12:45.560 --> 00:12:49.840
finally, is the new PyPI.


00:12:49.840 --> 00:12:54.840
Do you remember back when there's pypi.python.org/pypi


00:12:54.840 --> 00:12:57.920
because it's better if it ends up on both ends of the URL.


00:12:57.920 --> 00:13:01.080
That's the original gray that's been around forever.


00:13:01.080 --> 00:13:06.640
And then for a while there was a pypi.io,


00:13:06.640 --> 00:13:07.640
which was like the new one.


00:13:07.640 --> 00:13:11.200
Then there's a pypi.org, which they redirected to.


00:13:11.200 --> 00:13:12.040
I think that's the same site.


00:13:12.040 --> 00:13:13.280
- It's getting confusing here.


00:13:13.280 --> 00:13:14.120
- I know.


00:13:14.120 --> 00:13:17.280
And so there's been a really,


00:13:17.280 --> 00:13:25.180
almost a big problem with the old PyPI in that it was based on just super custom hand-rolled socket processing.


00:13:25.180 --> 00:13:31.680
And like the entire PyPI was running out of like a handful, two, three Python files,


00:13:31.680 --> 00:13:35.480
thousands of lines long, purely custom socket code.


00:13:35.480 --> 00:13:38.880
You know, no, it's not based on Flask or Pyramid or any of those things.


00:13:38.880 --> 00:13:41.980
It's just like, yeah, we're just going to start like at the lowest level.


00:13:41.980 --> 00:13:46.780
I think it was more or less a prototype and it just became what PyPI was for many years.


00:13:46.780 --> 00:13:49.320
And that was actually a big problem because


00:13:49.320 --> 00:13:52.120
people will come on, "Hey, I got this cool idea, I want to add a feature,


00:13:52.120 --> 00:13:54.120
like, can I just plug that in as an extension?"


00:13:54.120 --> 00:13:58.380
Or, "Oh my God, what is that? I'm not going to contribute to this project, I'm out of here."


00:13:58.380 --> 00:14:00.380
And so finally, finally,


00:14:00.380 --> 00:14:02.540
Donald Stuft and crew have


00:14:02.540 --> 00:14:04.880
released PyPI.org


00:14:04.880 --> 00:14:06.880
as an official thing.


00:14:06.880 --> 00:14:10.040
You still have that red bar up there, like, "Warning, this is like a testing area."


00:14:10.040 --> 00:14:13.980
It's no longer a red bar, like, you go there and it's properly a website.


00:14:13.980 --> 00:14:15.480
I'm going there right now to make sure.


00:14:15.480 --> 00:14:18.140
Oh, wait, it's back again. It was gone earlier.


00:14:18.140 --> 00:14:21.580
There is it. So there is a red bar. I think you can close it.


00:14:21.580 --> 00:14:25.900
However, this I love that this is officially it's coming up


00:14:25.900 --> 00:14:27.660
here, which is super exciting.


00:14:27.660 --> 00:14:31.580
Yeah. So the big news is not the website itself, although that's


00:14:31.580 --> 00:14:34.900
sort of the portal to it. The big news is when you pip install


00:14:34.900 --> 00:14:36.960
the thing, it now goes through pypi.org.


00:14:36.960 --> 00:14:39.140
Oh, that's really exciting. So this actually is not only the


00:14:39.140 --> 00:14:42.420
future, it is the present of using pip with Python.


00:14:42.460 --> 00:14:44.980
- Yes, that is where we are.


00:14:44.980 --> 00:14:47.420
So there's a really cool tweet.


00:14:47.420 --> 00:14:48.980
Sorry, I forget the guy's name who sent it out.


00:14:48.980 --> 00:14:50.900
It has like graphs of the analytics


00:14:50.900 --> 00:14:54.220
of sort of the number of requests per second


00:14:54.220 --> 00:14:56.940
and errors per second and memory usage and latency,


00:14:56.940 --> 00:14:59.300
all that for the new pypi.org


00:14:59.300 --> 00:15:01.260
handling the pip install requests.


00:15:01.260 --> 00:15:02.100
- That's exciting.


00:15:02.100 --> 00:15:03.020
- Yeah, so I'm really glad to see that.


00:15:03.020 --> 00:15:05.540
I guess I did just close that X and it stayed closed.


00:15:05.540 --> 00:15:07.820
You're right, so I opened it in like an incognito window.


00:15:07.820 --> 00:15:10.500
It's still there, but it's almost gone, almost gone.


00:15:10.500 --> 00:15:12.220
- All right, it's good that at least cookie you.


00:15:12.220 --> 00:15:14.220
That's all right, it is good.


00:15:14.220 --> 00:15:18.460
So one of the biggest challenges, you opened this whole section with


00:15:18.460 --> 00:15:23.260
getting started and converting from Python 2 to Python 3, and I would say the biggest


00:15:23.260 --> 00:15:27.580
thing that people complain about, saying this is really hard to get this transition over,


00:15:27.580 --> 00:15:32.300
is the old strings, byte strings, Unicode


00:15:32.300 --> 00:15:36.380
bytes array madness around that, right?


00:15:36.380 --> 00:15:39.340
Yeah, absolutely. This is one of the biggest challenges,


00:15:39.340 --> 00:15:42.540
is figuring out what is text and what is data


00:15:42.540 --> 00:15:45.420
and separating those because Python 2 didn't make a distinction,


00:15:45.420 --> 00:15:47.660
Python 3 forces you to make that distinction.


00:15:47.660 --> 00:15:51.020
So there's a nice talk by Ned Batchelder, right, that you pulled up for us?


00:15:51.020 --> 00:15:53.100
Yeah, absolutely. It's called "Pragmatic Unicode."


00:15:53.100 --> 00:15:57.180
I think it's "Pragmatic Unicode" or "How Do I Stop the Pain?" is the full talk title.


00:15:57.180 --> 00:16:00.460
It's counterintuitively, this is from PyCon 2012,


00:16:00.460 --> 00:16:02.460
and it is mostly Python 2 code.


00:16:02.460 --> 00:16:05.820
And so if you're switching to Python 3, this might seem odd to watch this talk.


00:16:05.820 --> 00:16:09.820
But the reason this is still relevant today is Unicode hasn't changed.


00:16:09.820 --> 00:16:14.060
The default way we see Unicode in Python 2 versus 3 has changed.


00:16:14.060 --> 00:16:16.860
And there's a big analogy in this talk that I really like,


00:16:16.860 --> 00:16:19.740
a metaphor that Ned uses, the Unicode sandwich,


00:16:19.740 --> 00:16:22.140
which I'll let you go watch the talk to figure out what that is.


00:16:22.140 --> 00:16:26.700
But this really helps shape your mental model of how text works


00:16:26.700 --> 00:16:30.140
versus how bytes work in the Python interpreter.


00:16:30.140 --> 00:16:31.580
And I think this is really important,


00:16:31.580 --> 00:16:33.500
especially if you're not familiar with Unicode,


00:16:33.500 --> 00:16:35.100
and you're going to switch to Python 3


00:16:35.100 --> 00:16:38.360
or to start using Unicode, you've got to understand a little bit about how it works.


00:16:38.360 --> 00:16:40.360
Yeah, this is really, really interesting.


00:16:40.360 --> 00:16:42.360
And Unicode is definitely one of those tricky things.


00:16:42.360 --> 00:16:45.360
And I think growing up in the United States


00:16:45.360 --> 00:16:50.860
definitely at least puts, I felt like put me at a disadvantage of appreciating Unicode.


00:16:50.860 --> 00:16:54.360
You know, because it's like, well, ANSI, what's wrong with ANSI?


00:16:54.360 --> 00:16:55.660
I don't know, it seems fine.


00:16:55.660 --> 00:17:00.660
Yeah, absolutely. And I feel like the big thing that's making the change here for a lot of people


00:17:00.660 --> 00:17:05.160
is emoji, which is being used even by people who are in English-speaking countries.


00:17:05.160 --> 00:17:09.160
So the rest of the world is finally going, "Yay, everyone cares about Unicode now,"


00:17:09.160 --> 00:17:12.060
all because of these emoji characters, which is sort of sad in a way,


00:17:12.060 --> 00:17:16.060
but also sort of good because it means we're actually caring about adopting this universally.


00:17:16.060 --> 00:17:20.060
It's really interesting because like, it's a bit of a sad commentary on the world,


00:17:20.060 --> 00:17:21.860
like that's what pushes us forward.


00:17:21.860 --> 00:17:24.760
At the same time, it is good that it's being pushed forward, right?


00:17:24.760 --> 00:17:25.860
Absolutely, yeah.


00:17:25.860 --> 00:17:26.360
Nice.


00:17:26.360 --> 00:17:31.780
Alright, so this last one that I want to cover really has to do with thinking about alternate


00:17:31.780 --> 00:17:34.780
implementations or run times


00:17:34.780 --> 00:17:38.280
of Python, right? It's easy to say, well, there's CPython


00:17:38.280 --> 00:17:42.120
and, you know, there's just Python, right? I type Python and it runs, but


00:17:42.120 --> 00:17:45.220
there are actually many different run times. And


00:17:45.220 --> 00:17:49.620
I say run times because some of them are called interpreters, but only some of them interpret.


00:17:49.620 --> 00:17:52.620
Right? So, like, we have


00:17:52.620 --> 00:17:56.020
IronPython, Python.net, Jython,


00:17:56.020 --> 00:18:01.920
Cython, a whole bunch of other ones that are like a little more niche.


00:18:01.920 --> 00:18:06.420
And I'd say probably the most popular alternative one is PyPy.


00:18:06.420 --> 00:18:07.420
P-Y-P-Y.


00:18:07.420 --> 00:18:08.560
Have you done anything with this?


00:18:08.560 --> 00:18:11.160
I have not done anything with, well, I played with PyPy,


00:18:11.160 --> 00:18:13.320
but only in one of those kind of like, maybe I'll pip it,


00:18:13.320 --> 00:18:15.720
or maybe I'll apt to get install it and see what happens.


00:18:15.720 --> 00:18:16.960
Yeah, exactly.


00:18:16.960 --> 00:18:21.760
Yeah, so PyPy is a JIT compiling


00:18:21.760 --> 00:18:24.420
implementation of CPython.


00:18:24.420 --> 00:18:27.220
So the way CPython works, even though it's written in C,


00:18:27.220 --> 00:18:30.920
when you first hit your code, it all gets compiled to bytecode,


00:18:30.920 --> 00:18:33.780
but then those bytecodes don't get further compiled to machine instructions.


00:18:33.780 --> 00:18:37.520
They just get interpreted in like this massive switch statement,


00:18:37.520 --> 00:18:40.120
while true loop.


00:18:40.120 --> 00:18:44.160
And it just looks at things and it just interprets them as bytecode at runtime.


00:18:44.160 --> 00:18:47.920
But that's not the same as compiling down to machine instructions, right?


00:18:47.920 --> 00:18:52.520
So PyPy, surprisingly, does the same thing that CPython does


00:18:52.580 --> 00:18:56.740
until it finds a slow spot and then it switches it to a JIT compiled version,


00:18:56.740 --> 00:18:57.780
which is interesting.


00:18:57.780 --> 00:18:58.980
Wow, that's really clever.


00:18:58.980 --> 00:19:00.740
Yeah, it just finds the slow spots and go,


00:19:00.740 --> 00:19:02.500
"Did you call this a thousand times and it's slow?"


00:19:02.500 --> 00:19:04.420
All right, we're going to make that fast. We'll fix you up.


00:19:04.420 --> 00:19:06.820
So there's a little bit of a slow startup.


00:19:06.820 --> 00:19:10.500
So if this was like a script, it runs for half a second and it goes away,


00:19:10.500 --> 00:19:13.540
there might be no benefit or less benefit, maybe even a drawback.


00:19:13.540 --> 00:19:17.060
I don't know. But if you use a web app that's going to be up for six hours


00:19:17.060 --> 00:19:19.540
and maybe get recycled or it's a game, say,


00:19:19.540 --> 00:19:21.540
but we're game that we're running,


00:19:21.540 --> 00:19:23.100
then that stuff would get jet compiled


00:19:23.100 --> 00:19:25.580
and be sort of warmed up, if you will.


00:19:25.580 --> 00:19:27.340
- Yeah, so you're sure here,


00:19:27.340 --> 00:19:29.340
I think we're talking about games specifically, right?


00:19:29.340 --> 00:19:32.020
Why would it be a game that this is nice for?


00:19:32.020 --> 00:19:33.500
- Yeah, so there's a,


00:19:33.500 --> 00:19:37.420
one of the nice ways to make games is with Pygame, right?


00:19:37.420 --> 00:19:40.380
And this guy, Rene Dunfield,


00:19:40.380 --> 00:19:45.100
he was at the PyPy Sprints in Switzerland,


00:19:45.100 --> 00:19:47.880
which were like in the Alps at some beautiful resort.


00:19:47.880 --> 00:19:50.720
I'm like, man, I need to go to a sprint up here.


00:19:50.720 --> 00:19:52.760
Anyway, they were working on it,


00:19:52.760 --> 00:19:54.440
and one of the things they got running is


00:19:54.440 --> 00:19:57.760
they got the new PyPy running PyGame perfectly well.


00:19:57.760 --> 00:19:59.400
Apparently there were issues with it before,


00:19:59.400 --> 00:20:00.880
and they said on some of the games


00:20:00.880 --> 00:20:03.120
they got up to a 30-time speedup


00:20:03.120 --> 00:20:05.240
by just simply typing something different


00:20:05.240 --> 00:20:06.200
to start your game.


00:20:06.200 --> 00:20:07.960
- Wow, so they got a 30-time speedup


00:20:07.960 --> 00:20:09.320
by instead of typing Python,


00:20:09.320 --> 00:20:11.400
they type just run it in PyPy,


00:20:11.400 --> 00:20:12.920
and they get 30 times faster.


00:20:12.920 --> 00:20:13.760
That's amazing.


00:20:13.760 --> 00:20:15.360
- Yeah, it's the same PyGame,


00:20:15.360 --> 00:20:18.960
same code that runs on, you know, CPython and so on.


00:20:18.960 --> 00:20:23.120
So PyBi has a different way to implement C extensions


00:20:23.120 --> 00:20:25.440
and different APIs, so this is really nice, right?


00:20:25.440 --> 00:20:28.440
It has this new way to do extensions for C


00:20:28.440 --> 00:20:29.680
or assembly language.


00:20:29.680 --> 00:20:33.160
It's the CPyExt is getting faster,


00:20:33.160 --> 00:20:34.680
which apparently was important for the game,


00:20:34.680 --> 00:20:36.580
it should run quicker and so on.


00:20:36.580 --> 00:20:38.160
So basically, the people are saying,


00:20:38.160 --> 00:20:40.320
like, it's really nice to have one code base


00:20:40.320 --> 00:20:41.360
that I don't have to try to, like,


00:20:41.360 --> 00:20:43.000
split across these different runtimes.


00:20:43.000 --> 00:20:44.760
It just runs in both places.


00:20:44.760 --> 00:20:47.760
Apparently, there's a few types of operations that are slower


00:20:47.760 --> 00:20:51.060
because transitioning into and out of PyPy


00:20:51.060 --> 00:20:53.060
down into the C level and back


00:20:53.060 --> 00:20:56.060
is slower than regular CPython, apparently.


00:20:56.060 --> 00:20:57.060
But still, pretty cool.


00:20:57.060 --> 00:20:58.060
- That is, that's very cool,


00:20:58.060 --> 00:20:59.060
especially if you're using PyGame.


00:20:59.060 --> 00:21:00.060
This is exciting news.


00:21:00.060 --> 00:21:01.060
- Yeah, for sure.


00:21:01.060 --> 00:21:03.060
Like, who wouldn't want their game to run?


00:21:03.060 --> 00:21:07.060
You think of how much people optimize video games to shave,


00:21:07.060 --> 00:21:10.060
get a few frames per second here or there.


00:21:10.060 --> 00:21:11.060
- Absolutely.


00:21:11.060 --> 00:21:12.060
- And this is massive.


00:21:12.060 --> 00:21:14.060
One example they gave is ray tracing,


00:21:14.060 --> 00:21:17.260
and they had run it on Python 2.7.


00:21:17.260 --> 00:21:19.380
It took nine and a half minutes,


00:21:19.380 --> 00:21:22.340
and then they ran it on PyPy, and it took 18 seconds.


00:21:22.340 --> 00:21:23.820
So that's a pretty good speed up.


00:21:23.820 --> 00:21:25.060
- That's not just a pretty good speed up,


00:21:25.060 --> 00:21:26.180
that's an incredible speed up.


00:21:26.180 --> 00:21:28.220
If my tests took 10 minutes to run,


00:21:28.220 --> 00:21:29.540
and then they went down to seconds,


00:21:29.540 --> 00:21:30.740
I would be pretty amazed.


00:21:30.740 --> 00:21:32.580
- Yeah, that would be so awesome.


00:21:32.580 --> 00:21:35.300
So if you're playing with PyGame,


00:21:35.300 --> 00:21:37.380
or even if you're doing stuff on the web,


00:21:37.380 --> 00:21:39.140
or whatever, check out PyPy.


00:21:39.140 --> 00:21:40.740
It could make a huge difference.


00:21:40.740 --> 00:21:41.580
- Awesome.


00:21:41.580 --> 00:21:43.500
- Yeah, it's good to see that project continuing to grow.


00:21:43.500 --> 00:21:46.640
That's it for our items. You got any extra news or things you want to share with people?


00:21:46.640 --> 00:21:48.640
Ooh, it's tough to decide what's new.


00:21:48.640 --> 00:21:51.960
Going to, you know, conferences, going to


00:21:51.960 --> 00:21:54.620
find new things on the internet, making new things on the internet.


00:21:54.620 --> 00:21:56.620
The one thing I think I'd want to share is


00:21:56.620 --> 00:22:00.900
I launched a thing a couple months ago, kind of quietly, and I've been slowly


00:22:00.900 --> 00:22:05.200
kind of testing it out with folks called Python Morsels, where I send an exercise out every week.


00:22:05.200 --> 00:22:07.500
And this is my way of trying to


00:22:07.500 --> 00:22:12.080
serve the folks who are at my local study group and other people that I meet on the internet


00:22:12.080 --> 00:22:18.960
who want to learn Python and you know, they don't have a company that they're working in that does Python that could bring me in for training because I love teaching.


00:22:18.960 --> 00:22:21.120
And I really want to serve individuals. So


00:22:21.120 --> 00:22:22.520
folks could check that out. It's


00:22:22.520 --> 00:22:25.160
pretty fun service. Nice. That's just python morsels.com.


00:22:25.160 --> 00:22:30.560
Yes, yeah, python morsels.com and it redirects right now. But you know, one day in the future, it'll have its own domain that doesn't redirect.


00:22:30.560 --> 00:22:32.200
It'll be all grown up on the internet.


00:22:32.200 --> 00:22:33.200
Exactly.


00:22:33.200 --> 00:22:35.640
Yeah, that's awesome. Yeah, so I'll put that in the show notes.


00:22:35.640 --> 00:22:38.560
Yeah, I just have one piece of news to share. I've launched


00:22:38.560 --> 00:22:41.660
I kind of talked about this last week, but now it's in full swing.


00:22:41.660 --> 00:22:45.660
I launched my 100 Days of Code course with the PyBytes,


00:22:45.660 --> 00:22:48.660
unrelated to this podcast, but similar name, PyBytesGuys,


00:22:48.660 --> 00:22:50.660
Bob Belderbose and Julian Securia.


00:22:50.660 --> 00:22:52.660
So, really happy to have this course out.


00:22:52.660 --> 00:22:56.660
It's an 18-hour course that guides people day by day


00:22:56.660 --> 00:22:59.360
through 100 days of Python. So, that's pretty epic.


00:22:59.360 --> 00:23:02.360
Yeah, I scrolled through the page for it. It is a long page.


00:23:02.360 --> 00:23:05.560
There's a lot in that course. It's super exciting to see that.


00:23:05.560 --> 00:23:07.960
It gave us a chance to play with stuff that's really


00:23:07.960 --> 00:23:10.600
pretty far out there and really fun like


00:23:10.600 --> 00:23:14.560
building GUIs in Python or different ways to consume APIs


00:23:14.560 --> 00:23:17.560
and just lots of really interesting stuff that we got to play with.


00:23:17.560 --> 00:23:22.000
So people can check it out at talkpython.fm/100days, 100 days.


00:23:22.000 --> 00:23:23.040
Put that in the show notes as well.


00:23:23.040 --> 00:23:23.540
Nice.


00:23:23.540 --> 00:23:24.040
Yeah.


00:23:24.040 --> 00:23:28.680
All right, Trey. Well, thank you so much for jumping in and being a co-host for this week.


00:23:28.680 --> 00:23:30.180
It was fun to share these items with you.


00:23:30.180 --> 00:23:33.180
Yeah, thanks for having me. This was super exciting. I hope to be back one day.


00:23:33.180 --> 00:23:35.180
We'll have you back for sure. Thanks. Bye.


00:23:35.180 --> 00:23:39.220
Thank you for listening to Python Bytes.


00:23:39.220 --> 00:23:44.860
Follow the show on Twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S.


00:23:44.860 --> 00:23:48.140
And get the full show notes at pythonbytes.fm.


00:23:48.140 --> 00:23:51.860
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:23:51.860 --> 00:23:52.860
way.


00:23:52.860 --> 00:23:55.360
We're always on the lookout for sharing something cool.


00:23:55.360 --> 00:23:58.820
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:23:58.820 --> 00:24:01.860
Thank you for listening and sharing this podcast with your friends and colleagues.

