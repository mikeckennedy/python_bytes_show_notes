WEBVTT

00:00:00.001 --> 00:00:04.180
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.180 --> 00:00:10.460
your earbuds. This is episode 71, recorded March 22nd, 2018. I'm Michael Kennedy, and

00:00:10.460 --> 00:00:14.880
normally I would introduce Brian, but Brian is not here this week, so I'm here with Trey Hunter.

00:00:14.880 --> 00:00:18.220
Trey, hello, welcome to the show. Hi, thanks, Michael. How are you doing?

00:00:18.220 --> 00:00:23.260
I'm doing great, doing great. Thanks for dropping in. There's a bit of a shuffle with the whole

00:00:23.260 --> 00:00:28.720
spring break travel chaos going on, and so it's really great that you're here to record with us,

00:00:28.720 --> 00:00:33.860
and Brian will be back with me next week. So, you know, probably a lot of people out there in the

00:00:33.860 --> 00:00:37.320
audience know you, but maybe a really quick introduction just so people know who you are.

00:00:37.320 --> 00:00:42.060
Yeah, I am super happy to be here because I'm a big listener to the show. I do on-site Python

00:00:42.060 --> 00:00:46.260
training for teams, and I help folks learn Python on the internet through weekly things, and I tweet

00:00:46.260 --> 00:00:51.000
a whole bunch. So folks have probably seen me on the internet, if anywhere. You work on the internet,

00:00:51.000 --> 00:00:55.200
that's awesome. Yes. And do things on that internet. All right, awesome. So before we get to the first

00:00:55.200 --> 00:00:59.620
item that you picked, I just want to say thank you to DigitalOcean. They're sponsoring this episode

00:00:59.620 --> 00:01:04.520
like they do many. Check them out at do.co slash Python. Trey, what do you got for us this week?

00:01:04.520 --> 00:01:09.800
So my first pick is kind of related to a talk I'm doing at PyCon. I've been researching this stuff a

00:01:09.800 --> 00:01:14.340
whole bunch. It's the conservative Python 3 porting guide. This was written by a whole bunch of folks

00:01:14.340 --> 00:01:20.340
at Red Hat. And it's pretty much the best porting guide I've seen for how to take your code from

00:01:20.340 --> 00:01:24.680
Python 2 and switch it to Python 3. It's not perfect, but none of the guides out there really

00:01:24.680 --> 00:01:31.460
are. Yeah, this is something that there's really not as much material on as I kind of would expect

00:01:31.460 --> 00:01:36.580
there to be. I mean, there are tools. We have six. We have two to three. We have Anthony Shaw's

00:01:36.580 --> 00:01:40.400
Pluralsight course that he just launched, which is really a good course. Well, you know,

00:01:40.400 --> 00:01:46.100
that's brand new. And Guido just recently made a statement, which I thought was great,

00:01:46.100 --> 00:01:51.600
that really solidified the date. Because for a long time, it's like, well, Python 2 is going to go

00:01:51.600 --> 00:01:58.400
out of support, out of security patches and all that stuff in 2020. And that's a whole year, right?

00:01:58.400 --> 00:02:02.660
We need a more time frame than a year, right? So when is it actually going out?

00:02:02.660 --> 00:02:06.160
It's January 1st, 2020. So it is less than two years away now.

00:02:06.160 --> 00:02:10.180
So people should probably start paying attention to this if they're ever going to.

00:02:10.360 --> 00:02:16.060
Yeah, this is a really big deal. A lot of my clients use Python 2 and switching to Python 3

00:02:16.060 --> 00:02:20.600
is going to be a really big headache. I do wish this guide used the future library,

00:02:20.600 --> 00:02:25.140
which I know Anthony uses in his courses at Pluralsight or his one course there on switching

00:02:25.140 --> 00:02:29.860
from Python 2 to 3 instead of the modernized library. But I mean, none of these guides is

00:02:29.860 --> 00:02:33.020
perfect. Some of them are a little bit older than others. This is just one of the best ones I've

00:02:33.020 --> 00:02:33.560
found out there.

00:02:33.560 --> 00:02:38.060
Yeah, that's really awesome. I really like it. It's called the conservative Python 3 porting guide.

00:02:38.060 --> 00:02:39.380
Why conservative?

00:02:40.320 --> 00:02:46.140
Because they don't try to get you using Python, new fancy Python 3 features. They're just trying

00:02:46.140 --> 00:02:50.500
to get your code working on Python 3, even if in a kind of begrudging way. You know, if you don't

00:02:50.500 --> 00:02:53.840
want to switch, you have to out of necessity. This is a conservative guide.

00:02:53.840 --> 00:02:57.980
I see. So it's not like, oh, and while you're here, wouldn't it be awesome to throw a little

00:02:57.980 --> 00:02:59.160
async and await in there?

00:02:59.160 --> 00:02:59.640
Exactly.

00:03:00.100 --> 00:03:05.460
You know, maybe some stars to force some keyword arguments and off you go. No, this is just like,

00:03:05.460 --> 00:03:12.900
you need to get it to your older code, your legacy code to run on modern Python. And that's it. No

00:03:12.900 --> 00:03:13.520
changes.

00:03:13.520 --> 00:03:15.800
Absolutely. Yeah. This is, you just need to get running.

00:03:16.040 --> 00:03:20.660
Yeah, I think that's a really good way to do it. Because on one hand, I'm sure it's super tempting.

00:03:20.660 --> 00:03:24.880
You're in there, you want to make all these changes. But on the other, you don't want to conflate the

00:03:24.880 --> 00:03:29.900
making it run on Python with adding new features, re-architecting your code and so on, right? Maybe

00:03:29.900 --> 00:03:31.580
that's a second project.

00:03:31.580 --> 00:03:32.420
Absolutely.

00:03:33.120 --> 00:03:34.580
So I have a question for you.

00:03:34.580 --> 00:03:34.960
Okay.

00:03:34.960 --> 00:03:36.360
Which companies use Python?

00:03:36.360 --> 00:03:42.660
Well, there are a ton of them, actually. Some of the best companies on the web that you know of

00:03:42.660 --> 00:03:48.260
definitely, definitely use it. So there's a really cool article on realpython.com by Jason Reynolds.

00:03:48.260 --> 00:03:54.780
And I think a lot of people come to Python. I don't know, you give me your opinion on this. I feel

00:03:54.780 --> 00:03:59.520
like they come and they're like, oh, I write a few scripts and I kind of like tinker with Python,

00:03:59.520 --> 00:04:02.960
but I don't write apps in Python. Like that's a different thing. Do you get this

00:04:02.960 --> 00:04:03.360
experience?

00:04:03.360 --> 00:04:07.560
Absolutely. This is a big thing with a lot of my clients is we use Python. We don't use it for

00:04:07.560 --> 00:04:10.780
making deployable software clients use. It's just for scripts.

00:04:10.780 --> 00:04:15.820
Right. Exactly. And so obviously that's possible with Python, but there's so much more that you can

00:04:15.820 --> 00:04:22.400
do. So I just wanted to pull this article up as some examples for how people might use Python. And

00:04:22.400 --> 00:04:26.400
if you're thinking of using Python at your company and they're like, no, no, we use C#. That

00:04:26.400 --> 00:04:30.760
compiles. That's something we can use in large projects. We can't use a toy language, right? Like

00:04:30.760 --> 00:04:32.860
think about what these companies are doing. So the first one,

00:04:32.860 --> 00:04:37.040
industrial light and magic, they do all the special effects from any of the sci-fi

00:04:37.040 --> 00:04:44.920
movies and so on. And they use Python to track and audit pipeline functionality, maintain databases,

00:04:44.920 --> 00:04:50.260
and basically move items and assets through like a pipeline. That's pretty awesome.

00:04:50.460 --> 00:05:06.420
We have Google. So in the beginning, of course, right? Of course, Guido worked there. Many of the luminaries in the Python space have or do. And they said, the founder said, we're going to use Python where we can and C++ where we must. That's pretty cool, right?

00:05:06.560 --> 00:05:07.560
That is really cool.

00:05:07.560 --> 00:05:16.440
I love that phrase. And of course, Python powers YouTube still to this day, handling millions of requests per second. That's a pretty insane number, right?

00:05:16.620 --> 00:05:18.720
That's a ton of stuff to be putting through Python there.

00:05:18.720 --> 00:05:45.680
I know. That's quite a bit. It's really impressive how much is going on there. And actually, there's some really interesting comparisons. Like there used to be Google Video, which was a competitor to YouTube when YouTube was a startup. And they were doing all their work in C++ at Google Video. And the people, many fewer, like 20 versus hundreds of engineers were writing Python and just like running circles around Google Video. So Google solved it by buying YouTube.

00:05:45.680 --> 00:05:47.020
It's a pretty interesting history.

00:05:47.020 --> 00:05:53.280
I never knew that. I mean, I knew they acquired YouTube while having video. I didn't know that Python was a deciding factor there.

00:05:53.280 --> 00:06:00.520
Yeah, it was one of the deciding factors that let like the small team outperform Google because Google is using C++ for their video service.

00:06:00.520 --> 00:06:14.900
All right. So speaking of large services, Facebook, they use this mostly on the infrastructure side. But Facebook is really interesting in that they have did a really interesting thing moving from Python 2 to Python 3 as sort of like changing the engineering

00:06:14.900 --> 00:06:22.720
culture. Jason Fried did this really awesome talk on that. And the whole steps in which they took to make this happen are pretty amazing. Did you happen to see that talk?

00:06:22.720 --> 00:06:26.000
I did. You know, I think he's given a similar talk at PyCon actually this year.

00:06:26.000 --> 00:06:28.160
Oh, that'd be awesome. I'm definitely going. Definitely going.

00:06:28.600 --> 00:06:35.840
Closely related is Instagram because kind of like YouTube, Instagram was its own thing and now it is like engulfed into Facebook.

00:06:36.480 --> 00:06:41.500
But they run the largest deployment of Django web framework in the world.

00:06:41.500 --> 00:06:45.520
And they have like 800 million active users.

00:06:45.520 --> 00:06:56.300
I think maybe the most notable thing was Instagram's keynote at the 2017 PyCon with Lisa Guo and Hui Ding, who gave like the most inspiring talk,

00:06:56.460 --> 00:07:04.040
how they migrated from old version Django to new version Django and Python 2 to Python 3 without branching and continuing to ship features.

00:07:04.040 --> 00:07:05.180
Yeah, that was amazing.

00:07:05.180 --> 00:07:09.300
I really like that talk because in the beginning they started with, here's how we did at a high level.

00:07:09.300 --> 00:07:13.640
And towards the end, they dove right into the code that they used and the difficulties they encountered.

00:07:13.640 --> 00:07:19.840
And, you know, if you are afraid of encountering difficulties, look at the ones that Instagram encounter because they've got a big code base.

00:07:20.840 --> 00:07:24.160
Yeah, they have like millions, millions of lines or something. It's insane.

00:07:24.160 --> 00:07:26.480
But the way they did it was truly inspiring.

00:07:26.480 --> 00:07:30.660
And I felt like that was actually like a really clear playbook of, hey, we could do the same thing.

00:07:30.660 --> 00:07:30.980
Absolutely.

00:07:30.980 --> 00:07:37.160
We also have Spotify. They're doing a bunch of stuff with Python and primarily as backend services and data analysis.

00:07:37.160 --> 00:07:40.300
Quora. I think Quora is the best Q&A place on the internet.

00:07:40.300 --> 00:07:43.720
It always seemed to have such like super thoughtful questions and answers.

00:07:43.720 --> 00:07:48.960
You know, I don't use Quora much mostly because whenever I go, it asks me to sign up or sign in.

00:07:49.140 --> 00:07:50.860
So I mostly go to the other ones for that reason.

00:07:50.860 --> 00:07:53.120
But I have actually found a lot of useful stuff in Quora before.

00:07:53.120 --> 00:07:57.680
Yeah, I'm just surprised how much time and energy people are willing to put in the answers there.

00:07:57.680 --> 00:07:58.240
Absolutely.

00:07:58.240 --> 00:08:00.520
It's interesting because that runs on Python, of course.

00:08:00.520 --> 00:08:06.900
And they were thinking about maybe C#, maybe Java, maybe Python, maybe C++ and so on.

00:08:06.900 --> 00:08:11.740
And in the end, they ended up kind of doing what Google did is Python where they can, C++ where they must.

00:08:11.740 --> 00:08:14.880
Netflix, obviously Netflix is insane.

00:08:14.880 --> 00:08:19.800
They do like in the evenings, they account for one third of the bandwidth in the United States.

00:08:19.800 --> 00:08:20.240
Wow.

00:08:20.240 --> 00:08:20.680
Yeah.

00:08:20.680 --> 00:08:24.420
And they run all their infrastructure management and operation stuff over Python.

00:08:24.420 --> 00:08:28.600
I actually talked to those guys over at Talk Python on episode 16 way back in the day.

00:08:28.600 --> 00:08:30.420
Really interesting stuff they're doing.

00:08:30.420 --> 00:08:31.600
Dropbox.

00:08:31.600 --> 00:08:35.500
When I think of the center of the universe of Python, I think Dropbox.

00:08:35.500 --> 00:08:35.960
What do you think?

00:08:35.960 --> 00:08:36.560
Why is that?

00:08:36.560 --> 00:08:38.120
Well, Guido works there.

00:08:38.120 --> 00:08:39.200
That's a big reason.

00:08:39.200 --> 00:08:47.220
It seems to be one of the companies that is one of these major, major sort of technology companies that is all in on Python, right?

00:08:47.220 --> 00:08:55.720
Like even their little widget thing that ships as a client app that is in your tray or your menu bar, that's even Python.

00:08:55.720 --> 00:08:56.020
Yeah.

00:08:56.020 --> 00:09:02.180
They definitely got a ton of deployed Python code on desktop computers that they don't have control over, which is pretty amazing.

00:09:02.180 --> 00:09:05.160
I think they also have some open source packages up on GitHub there, Python.

00:09:05.160 --> 00:09:05.600
Yeah.

00:09:05.640 --> 00:09:10.880
I think they do have a lot of really interesting stuff and they've had some stuff that they put out and it's kind of like left to go as experiments.

00:09:10.880 --> 00:09:11.660
Very, very interesting.

00:09:11.660 --> 00:09:13.520
So last one I'll leave you with Reddit.

00:09:13.520 --> 00:09:17.180
So they have half a billion visitors a month.

00:09:17.180 --> 00:09:24.360
They had, let's see, it was the fourth most visited site in the United States and seventh in the world.

00:09:24.360 --> 00:09:30.460
And I guess in 2015, they said they had 82 billion page views, which is kind of insane.

00:09:30.460 --> 00:09:35.060
And of course, that's all driven on Python, SQLAlchemy, all sorts of goodness.

00:09:35.060 --> 00:09:35.980
That's pretty incredible.

00:09:35.980 --> 00:09:36.340
Yeah.

00:09:36.340 --> 00:09:36.660
Awesome.

00:09:36.660 --> 00:09:42.120
Those are the companies that I kind of wanted to highlight out of that article and just thought like, these are really great examples.

00:09:42.120 --> 00:09:46.760
And if people are saying, oh, well, we have like 100,000 users, we can't use Python.

00:09:46.760 --> 00:09:47.620
It's not going to scale.

00:09:47.620 --> 00:09:51.460
Like, well, yeah, probably not, probably not the real problem.

00:09:51.460 --> 00:09:55.800
There's probably some kind of architecture, infrastructure thing that is actually going to make this work easily.

00:09:55.800 --> 00:09:56.280
For sure.

00:09:56.280 --> 00:09:56.700
Yeah.

00:09:56.700 --> 00:09:57.040
Nice.

00:09:57.320 --> 00:10:00.160
So do you think we should stop writing classes, Trey?

00:10:00.160 --> 00:10:00.820
Maybe.

00:10:00.820 --> 00:10:13.420
I don't know if we should stop writing classes entirely, but my favorite, well, one of my favorite PyCon talks, I tend to tell people it's my favorite because I recommend it so much, is Stop Writing Classes by Jack Diedrich.

00:10:13.940 --> 00:10:16.300
This is from PyCon 2012.

00:10:16.660 --> 00:10:20.320
So it's kind of an old talk, but it is definitely the days of Python 2.

00:10:20.320 --> 00:10:25.360
But all the code in it, all the advice in it is still really applicable today.

00:10:25.360 --> 00:10:25.660
Yeah.

00:10:25.660 --> 00:10:26.380
That's really awesome.

00:10:26.980 --> 00:10:29.540
So give us the main takeaway from it.

00:10:29.540 --> 00:10:43.960
One of the biggest bits of advice in it that I tend to tell people is if you have a class that only has two methods, one of those is your dunder init method, and the other one is some other method, especially if it's called call, you probably need a function instead of a class.

00:10:43.960 --> 00:10:51.720
So this is something I recommend a lot to folks move into Python from Java and C++, because I teach a lot of folks who are moving programming languages.

00:10:51.720 --> 00:10:53.940
And, you know, Python is just different from the other languages.

00:10:54.220 --> 00:10:58.320
Especially if what you're going to have is effectively a static class, right?

00:10:58.320 --> 00:11:00.160
Like there's just one copy of the variables.

00:11:00.160 --> 00:11:02.880
It's very likely that you could get away.

00:11:02.880 --> 00:11:04.140
And you're not doing any inheritance.

00:11:04.140 --> 00:11:05.700
You're not doing any of that kind of stuff.

00:11:05.700 --> 00:11:11.580
You probably could just have a set of functions and module level variables, and you get effectively the same output.

00:11:11.580 --> 00:11:12.340
Yeah, absolutely.

00:11:12.340 --> 00:11:13.900
And that's something I see a lot in code.

00:11:13.900 --> 00:11:18.500
On the flip side of things, though, one of the great things about this talk is it doesn't just show you when not to write classes.

00:11:18.500 --> 00:11:21.640
It does show you a couple examples of when classes are really handy in Python.

00:11:21.640 --> 00:11:22.540
Yeah, that's cool.

00:11:22.540 --> 00:11:25.080
I'm a big fan of object-oriented programming.

00:11:25.080 --> 00:11:28.600
I think there's still, you know, people, it fades in and out of popularity.

00:11:28.600 --> 00:11:30.540
I still think it's a really great way to model stuff.

00:11:30.540 --> 00:11:33.660
But when you're creating more than one of the things typically, right?

00:11:33.660 --> 00:11:34.280
Absolutely.

00:11:34.280 --> 00:11:40.120
Yeah, it's when you need to make more than one of them, when you need to use it more than once, that's the time where classes need it.

00:11:40.120 --> 00:11:41.260
They really can be abused.

00:11:41.260 --> 00:11:42.100
Yeah, absolutely.

00:11:42.580 --> 00:11:44.860
So what's up with PyPI, Michael?

00:11:44.860 --> 00:11:46.000
I'm going to tell you about PyPI.

00:11:46.000 --> 00:11:46.660
I'm super excited.

00:11:46.660 --> 00:11:49.300
But before I do, I want to tell you about DigitalOcean.

00:11:49.640 --> 00:12:00.440
So there's this thing coming up where I might need a whole lot more power for my web server because there's some big promotion and it could kind of end up overwhelming my servers, which so far they've never had an issue.

00:12:00.440 --> 00:12:02.560
Like you log in, it's like 3%, 4% CPU.

00:12:02.700 --> 00:12:08.320
But one of the things that's really cool about DigitalOcean, if you have one of their servers, you can go over there and you can flip a switch.

00:12:08.320 --> 00:12:16.520
And within just a couple minutes, it will take it offline for a second, resize, re-whatever, however you change the infrastructure.

00:12:16.520 --> 00:12:19.500
Say, I want four CPUs and eight gigs of RAM.

00:12:19.500 --> 00:12:20.460
Change it to that.

00:12:20.460 --> 00:12:25.780
And you could do that for like one day and then go, no, no, back to the one gig, one CPU the next day, right?

00:12:25.780 --> 00:12:30.260
Spend five bucks and get like some super huge server to handle some spike that you know is coming.

00:12:30.260 --> 00:12:31.640
So pretty cool.

00:12:31.940 --> 00:12:35.040
A lot of the stuff that I do on the web is running through DigitalOcean.

00:12:35.040 --> 00:12:36.880
So definitely recommend them.

00:12:36.880 --> 00:12:39.980
Check them out at do.co slash Python.

00:12:39.980 --> 00:12:40.400
All right.

00:12:40.400 --> 00:12:41.640
They help make the show possible.

00:12:41.640 --> 00:12:48.680
So another thing that I think is doing really awesome stuff on the web finally is the new PyPI.

00:12:48.680 --> 00:12:57.840
Do you remember back when there's pypi.python.org slash PyPI because it's better if it ends up on both ends of the URL.

00:12:57.840 --> 00:13:00.700
That's the original gray that's been around forever.

00:13:01.180 --> 00:13:02.900
What the PyPI has been.

00:13:02.900 --> 00:13:05.820
And then for a while there was a pypi.io.

00:13:05.820 --> 00:13:06.600
Yep.

00:13:06.600 --> 00:13:07.580
Which was like the new one.

00:13:07.580 --> 00:13:10.860
Then there's a pypi.org, which they redirected to.

00:13:10.860 --> 00:13:12.320
I think that's the same site.

00:13:12.320 --> 00:13:12.960
It's getting confusing here.

00:13:12.960 --> 00:13:13.840
I know.

00:13:14.220 --> 00:13:24.800
And so there's been there's been a really almost a big problem with the old PyPI in that it was based on just super custom hand rolled socket processing.

00:13:24.800 --> 00:13:35.140
And like the entire PyPI was running out of like a handful, two, three Python files, thousands of lines long, purely custom socket code.

00:13:35.440 --> 00:13:38.720
You know, no, it's not based on flask or pyramid or any of those things.

00:13:38.720 --> 00:13:41.740
It's just like, yeah, we're just going to start like at the lowest level.

00:13:41.940 --> 00:13:43.600
I think it was more or less a prototype.

00:13:43.600 --> 00:13:46.460
And it just became what PyPI was for many years.

00:13:47.200 --> 00:13:50.280
And that was actually a big problem because people will come on.

00:13:50.280 --> 00:13:51.280
Hey, I got this cool idea.

00:13:51.280 --> 00:13:52.020
I want to add a feature.

00:13:52.020 --> 00:13:55.540
Like, can I just plug that in as an extension or oh, my God, what is that?

00:13:55.540 --> 00:13:57.380
I'm not going to contribute to this project.

00:13:57.380 --> 00:13:57.980
I'm out of here.

00:13:57.980 --> 00:13:58.200
Right.

00:13:58.680 --> 00:14:06.500
And so finally, finally, Donald Stuffed and crew have released PyPI.org as an official thing.

00:14:06.500 --> 00:14:08.220
It used to have that red bar up there.

00:14:08.220 --> 00:14:09.900
Like, warning, this is like a testing area.

00:14:09.900 --> 00:14:11.540
It's no longer a red bar.

00:14:11.540 --> 00:14:13.920
Like, you go there and it's properly a website.

00:14:13.920 --> 00:14:15.320
I'm going there right now to make sure.

00:14:15.320 --> 00:14:15.940
Oh, wait.

00:14:15.940 --> 00:14:17.080
It's back again.

00:14:17.080 --> 00:14:18.100
It was gone earlier.

00:14:18.100 --> 00:14:18.520
There is.

00:14:18.520 --> 00:14:20.200
So there is a red bar.

00:14:20.200 --> 00:14:21.540
I think you can close it.

00:14:21.540 --> 00:14:27.520
However, this I love that this is officially it's coming up here, which is super exciting.

00:14:27.520 --> 00:14:27.920
Yeah.

00:14:27.920 --> 00:14:32.640
So the big news is not the website itself, although that's sort of the portal to it.

00:14:32.640 --> 00:14:36.940
The big news is when you pip install a thing, it now goes through PyPI.org.

00:14:36.940 --> 00:14:37.720
Oh, that's really exciting.

00:14:37.720 --> 00:14:39.520
So this actually is not only the future.

00:14:39.520 --> 00:14:42.300
It is the present of using pip with Python.

00:14:42.300 --> 00:14:44.920
Yes, that is where we are.

00:14:44.920 --> 00:14:46.660
So there's a really cool tweet.

00:14:46.660 --> 00:14:47.640
I'm sorry.

00:14:47.640 --> 00:14:48.420
I forget the guy's name.

00:14:48.420 --> 00:14:48.920
I sent it out.

00:14:48.920 --> 00:14:54.940
It has like graphs of the analytics of sort of the number of requests per second and errors

00:14:54.940 --> 00:14:56.780
per second and memory usage and latency.

00:14:56.780 --> 00:15:01.120
All that for the new PyPI.org handling the pip install requests.

00:15:01.120 --> 00:15:01.780
That's exciting.

00:15:01.780 --> 00:15:02.080
Yeah.

00:15:02.080 --> 00:15:03.000
So I'm really glad to see that.

00:15:03.000 --> 00:15:05.460
I guess I did just close that X and it stayed closed.

00:15:05.460 --> 00:15:05.780
You're right.

00:15:05.780 --> 00:15:07.460
So I opened it in like an incognito window.

00:15:07.460 --> 00:15:09.860
It's still there, but it's almost gone.

00:15:09.860 --> 00:15:10.460
Almost gone.

00:15:10.460 --> 00:15:10.660
All right.

00:15:10.660 --> 00:15:10.900
It's good.

00:15:10.900 --> 00:15:11.740
They at least cookie you.

00:15:12.900 --> 00:15:13.400
That's right.

00:15:13.400 --> 00:15:13.900
It is good.

00:15:13.900 --> 00:15:19.100
So one of the biggest challenges, you opened this whole section with like getting started

00:15:19.100 --> 00:15:21.240
and converting from Python 2 to Python 3.

00:15:21.240 --> 00:15:26.380
And I would say the biggest thing that people complain about saying this is really hard to

00:15:26.380 --> 00:15:35.820
get this transition over is the old strings, byte strings, Unicode, bytes array madness around that,

00:15:35.820 --> 00:15:36.080
right?

00:15:36.080 --> 00:15:37.400
Yeah, absolutely.

00:15:37.400 --> 00:15:43.480
This is one of the biggest challenges is figuring out what is text and what is data and separating

00:15:43.480 --> 00:15:45.320
those because Python 2 didn't make a distinction.

00:15:45.560 --> 00:15:47.440
Python 3 forces you to make that distinction.

00:15:47.440 --> 00:15:50.120
So there's a nice talk by Ned Batchelder, right?

00:15:50.120 --> 00:15:50.920
That you pulled up for us.

00:15:50.920 --> 00:15:51.760
Yeah, absolutely.

00:15:51.760 --> 00:15:53.160
It's called Pragmatic Unicode.

00:15:53.160 --> 00:15:56.820
I think it's Pragmatic Unicode or How Do I Stop the Pain is the full talk title.

00:15:56.820 --> 00:15:58.400
It's counterintuitively.

00:15:58.400 --> 00:16:02.400
This is from PyCon 2012 and it is mostly Python 2 code.

00:16:02.400 --> 00:16:05.880
And so if you're switching to Python 3, this might seem odd to watch this talk.

00:16:05.880 --> 00:16:09.600
But the reason this is still relevant today is Unicode hasn't changed.

00:16:09.600 --> 00:16:13.820
The default way we see Unicode in Python 2 versus 3 has changed.

00:16:14.320 --> 00:16:18.260
And there's a big analogy in this talk that I really like, a metaphor that Ned uses, the

00:16:18.260 --> 00:16:22.220
Unicode sandwich, which I'll let you go watch the talk to figure out what that is.

00:16:22.220 --> 00:16:28.840
But this really helps shape your mental model of how text works versus how bytes work in

00:16:28.840 --> 00:16:29.740
the Python interpreter.

00:16:29.740 --> 00:16:33.780
And I think this is really important, especially if you're not familiar with Unicode and you're

00:16:33.780 --> 00:16:36.240
going to switch to Python 3 or to start using Unicode.

00:16:36.240 --> 00:16:38.260
You've got to understand a little bit about how it works.

00:16:38.260 --> 00:16:40.280
Yeah, this is really, really interesting.

00:16:40.280 --> 00:16:42.440
And Unicode is definitely one of those tricky things.

00:16:42.660 --> 00:16:47.820
And I think growing up in the United States definitely at least puts, I felt like, put

00:16:47.820 --> 00:16:50.500
me at a disadvantage of appreciating Unicode.

00:16:50.500 --> 00:16:51.780
You know?

00:16:51.780 --> 00:16:53.220
Because it's like, well, ANSI?

00:16:53.220 --> 00:16:54.160
What's wrong with ANSI?

00:16:54.160 --> 00:16:54.980
I don't know.

00:16:54.980 --> 00:16:55.600
It seems fine.

00:16:55.600 --> 00:16:56.260
Yeah, absolutely.

00:16:56.260 --> 00:17:01.500
And I feel like the big thing that's making the change here for a lot of people is emoji,

00:17:01.500 --> 00:17:05.000
which is being used even by people who are in English-speaking countries.

00:17:05.000 --> 00:17:09.560
So the rest of the world is finally going, yay, everyone cares about Unicode now, all because

00:17:09.560 --> 00:17:13.240
of these emoji characters, which is sort of sad in a way, but also sort of good because

00:17:13.240 --> 00:17:15.940
it means we're actually caring about adopting this universally.

00:17:15.940 --> 00:17:20.540
It's really interesting because it's a bit of a sad commentary on the world that that's

00:17:20.540 --> 00:17:21.660
what pushes us forward.

00:17:21.660 --> 00:17:24.620
At the same time, it is good that it's being pushed forward, right?

00:17:24.620 --> 00:17:25.280
Absolutely.

00:17:25.280 --> 00:17:25.840
Yeah.

00:17:25.940 --> 00:17:26.220
Nice.

00:17:26.220 --> 00:17:27.100
All right.

00:17:27.100 --> 00:17:33.160
So this last one that I want to cover really has to do with thinking about alternate implementations

00:17:33.160 --> 00:17:36.180
or runtimes of Python, right?

00:17:36.180 --> 00:17:40.600
It's easy to say, well, there's CPython and, you know, there's just Python, right?

00:17:40.600 --> 00:17:44.900
I type Python and it runs, but there are actually many different runtimes.

00:17:44.900 --> 00:17:49.180
And I say runtimes because sometimes they're called interpreters, but only some of them interpret.

00:17:49.180 --> 00:17:50.280
Right.

00:17:50.280 --> 00:17:59.700
So like, we have IronPython, Python.net, Jython, Cython, a whole bunch of other ones

00:17:59.700 --> 00:18:01.620
that are like a little more niche.

00:18:01.620 --> 00:18:07.180
And I'd say probably the most popular alternative one is PyPy, P-Y-P-Y.

00:18:07.180 --> 00:18:08.480
Have you done anything with this?

00:18:08.480 --> 00:18:12.440
I have not done anything with, well, I played with PyPy, but only, only in one of those kind

00:18:12.440 --> 00:18:15.460
of like, maybe I'll pip it or maybe I'll apt to get install it and see what happens.

00:18:15.460 --> 00:18:16.560
Yeah, exactly.

00:18:16.560 --> 00:18:16.720
Yeah.

00:18:16.720 --> 00:18:24.360
So PyPy is a JIT compiling implementation of CPython.

00:18:24.360 --> 00:18:28.740
So the way CPython works, even though it's written in C, when you first hit your code, it all

00:18:28.740 --> 00:18:30.900
gets compiled to bytecode.

00:18:30.900 --> 00:18:33.720
But then those bytecodes don't get further compiled to machine instructions.

00:18:33.720 --> 00:18:38.780
They just get interpreted in like this massive switch statement while true loop.

00:18:38.780 --> 00:18:44.120
And it just looks at things and it just interprets them as bytecode at runtime.

00:18:44.120 --> 00:18:47.560
But that's not the same as compiling down to machine instructions, right?

00:18:47.560 --> 00:18:54.160
So PyPy surprisingly does the same thing that CPython does until it finds a slow spot and

00:18:54.160 --> 00:18:57.620
then it switches it to a JIT compiled version, which is interesting.

00:18:57.620 --> 00:18:58.020
Wow.

00:18:58.020 --> 00:18:58.800
That's really clever.

00:18:58.800 --> 00:18:59.300
Yeah.

00:18:59.300 --> 00:19:02.580
It just finds the slow spots and go, did you call this a thousand times and it's slow?

00:19:02.580 --> 00:19:02.780
All right.

00:19:02.780 --> 00:19:03.560
We're going to make that fast.

00:19:03.560 --> 00:19:04.200
We'll fix you up.

00:19:04.200 --> 00:19:06.560
So there's a little bit of a slow startup.

00:19:06.980 --> 00:19:10.960
So if this was like a script, it runs for half a second and it goes away, there might

00:19:10.960 --> 00:19:13.620
be no benefit or less benefit, maybe even a drawback.

00:19:13.620 --> 00:19:13.960
I don't know.

00:19:13.960 --> 00:19:18.780
But if you use a web app that's going to be up for six hours and maybe get recycled or it's

00:19:18.780 --> 00:19:23.740
a game, say, or a game that we're running, then that stuff would get JIT compiled and be

00:19:23.740 --> 00:19:25.460
sort of warmed up, if you will.

00:19:25.460 --> 00:19:25.840
Yeah.

00:19:25.840 --> 00:19:29.260
So your share here, I think we're talking about games specifically, right?

00:19:29.260 --> 00:19:29.600
Yeah.

00:19:29.820 --> 00:19:31.860
Why would it be a game that this is nice for?

00:19:31.860 --> 00:19:32.240
Yeah.

00:19:32.240 --> 00:19:37.320
So there's a, one of the nice ways to make games is with Pi Game, right?

00:19:37.320 --> 00:19:45.460
And this, this guy, Renee Dunfield, he was at the pypy Sprints in Switzerland, which were

00:19:45.460 --> 00:19:47.780
like in the Alps at some beautiful resort.

00:19:47.780 --> 00:19:50.140
I'm like, man, I need to go to a sprint up here.

00:19:50.140 --> 00:19:52.760
Anyway, they were working on it.

00:19:52.760 --> 00:19:57.480
And one of the things they got running is they got the new pypy running Pi Game perfectly

00:19:57.480 --> 00:19:57.700
well.

00:19:57.700 --> 00:19:59.260
Apparently there were issues with it before.

00:19:59.440 --> 00:20:03.920
And they said on some of the games, they got up to a 30 time speed up by just simply

00:20:03.920 --> 00:20:06.020
typing something different to start your game.

00:20:06.020 --> 00:20:06.580
Wow.

00:20:06.580 --> 00:20:10.780
So they got a 30 time speed up by instead of typing Python, they type Pi, just run it in

00:20:10.780 --> 00:20:12.700
pypy and they get 30 times faster.

00:20:12.700 --> 00:20:13.400
That's amazing.

00:20:13.400 --> 00:20:13.680
Yeah.

00:20:13.680 --> 00:20:18.560
It's the same, same Pi game, same code that runs on, you know, CPython and so on.

00:20:18.560 --> 00:20:23.880
So pypy has a different way to implement C extensions and different APIs.

00:20:23.880 --> 00:20:25.380
So this is really nice, right?

00:20:25.380 --> 00:20:29.360
It has this new way to do extensions for C or assembly language.

00:20:29.360 --> 00:20:36.120
It's the CPy EXC is getting faster, which apparently was important for the game to run quicker and

00:20:36.120 --> 00:20:36.580
so on.

00:20:36.580 --> 00:20:42.960
So basically the people are saying like, it's really nice to have one code base that I don't have to try to like split across these different run times.

00:20:42.960 --> 00:20:44.260
It just runs in both places.

00:20:44.840 --> 00:20:55.420
Apparently there's a few types of operations that are slower because transitioning into and out of pypy down into the C level and back is slower than regular CPython, apparently.

00:20:55.420 --> 00:20:56.920
But still pretty cool.

00:20:56.920 --> 00:20:57.380
That is.

00:20:57.380 --> 00:20:58.120
That's very cool.

00:20:58.120 --> 00:20:59.260
Especially if you're using Pi game.

00:20:59.260 --> 00:21:00.120
This is exciting news.

00:21:00.120 --> 00:21:00.740
Yeah, for sure.

00:21:00.740 --> 00:21:02.600
Like who wouldn't want their game to run?

00:21:02.600 --> 00:21:09.260
Like you think of like how much people optimize video games to shave, like get a few frames per second here or there.

00:21:09.260 --> 00:21:09.980
All right.

00:21:09.980 --> 00:21:11.720
So one example, and this is massive.

00:21:11.720 --> 00:21:17.180
Like one example they gave is like ray tracing and they had run it on Python 2.7.

00:21:17.180 --> 00:21:22.060
It took nine and a half minutes and then they ran it on pypy and it took 18 seconds.

00:21:22.060 --> 00:21:23.700
So that's a pretty good speed up.

00:21:23.700 --> 00:21:25.040
That's not just a pretty good speed up.

00:21:25.040 --> 00:21:26.180
That's an incredible speed up.

00:21:26.180 --> 00:21:30.540
If my tests took 10 minutes to run and then they went down to seconds, I would be pretty amazed.

00:21:30.820 --> 00:21:31.780
Yeah, that would be so awesome.

00:21:31.780 --> 00:21:39.040
So if you're playing with Pi game or even if you're like doing stuff on the web or whatever, check out pypy.

00:21:39.040 --> 00:21:40.540
It could make a huge difference.

00:21:40.540 --> 00:21:41.020
Awesome.

00:21:41.020 --> 00:21:43.060
Yeah, it's good to see that project continuing to grow.

00:21:43.060 --> 00:21:44.240
That's it for our items.

00:21:44.240 --> 00:21:46.400
You got any extra news or things you want to share with people?

00:21:46.400 --> 00:21:48.540
Ooh, it's tough to decide what's new.

00:21:48.540 --> 00:21:54.480
Going to, you know, conferences, going to find new things on the internet, making new things on the internet.

00:21:54.480 --> 00:21:59.580
The one thing I think I'd want to share is I launched a thing a couple months ago, kind of quietly,

00:21:59.760 --> 00:22:04.900
and I've been slowly kind of testing it out with folks called Python Morsels, where I send an exercise out every week.

00:22:04.900 --> 00:22:13.100
And this is my way of trying to serve the folks who are at my local study group and other people that I meet on the internet who want to learn Python.

00:22:13.100 --> 00:22:20.480
And, you know, they don't have a company that they're working in that does Python that could bring me in for training because I love teaching and I really want to serve individuals.

00:22:20.480 --> 00:22:22.160
So folks could check that out.

00:22:22.160 --> 00:22:23.380
It's a pretty fun service.

00:22:23.380 --> 00:22:23.720
Nice.

00:22:23.720 --> 00:22:25.040
That's just PythonMorsels.com?

00:22:25.220 --> 00:22:25.480
Yes.

00:22:25.480 --> 00:22:25.680
Yeah.

00:22:25.680 --> 00:22:26.600
PythonMorsels.com.

00:22:26.600 --> 00:22:27.620
And it redirects right now.

00:22:27.620 --> 00:22:30.340
But, you know, one day in the future, it'll have its own domain that doesn't redirect.

00:22:30.340 --> 00:22:32.020
It'll be all grown up on the internet.

00:22:32.020 --> 00:22:32.840
Exactly.

00:22:32.840 --> 00:22:33.540
Yeah.

00:22:33.540 --> 00:22:34.140
That's awesome.

00:22:34.140 --> 00:22:34.440
Yeah.

00:22:34.440 --> 00:22:35.460
So I'll put that in the show notes.

00:22:35.460 --> 00:22:35.920
Yeah.

00:22:35.920 --> 00:22:37.240
I just have one piece of news to share.

00:22:37.360 --> 00:22:41.580
I've launched, well, I kind of talked about this last week, but now it's in full swing.

00:22:41.580 --> 00:22:47.460
Launched my 100 Days of Code course with the PyBytes, unrelated to this podcast, but similar name.

00:22:47.460 --> 00:22:50.120
PyBytes guys, Bob Belderbos and Julian Secrea.

00:22:50.120 --> 00:22:52.500
So really happy to have this course out.

00:22:52.500 --> 00:22:57.740
It's an 18-hour course that guides people day by day through 100 Days of Python.

00:22:57.740 --> 00:22:59.240
So that's pretty epic.

00:22:59.240 --> 00:22:59.560
Yeah.

00:22:59.560 --> 00:23:01.140
I scrolled through the page for it.

00:23:01.140 --> 00:23:02.240
It is a long page.

00:23:02.240 --> 00:23:03.840
There's a lot in that course.

00:23:03.840 --> 00:23:05.400
It's super exciting to see that.

00:23:05.400 --> 00:23:09.900
It gave us a chance to play with stuff that's really pretty far out there and really fun,

00:23:09.900 --> 00:23:15.660
like building GUIs in Python or different ways to consume APIs and just lots of really

00:23:15.660 --> 00:23:17.580
interesting stuff that we got to play with.

00:23:17.580 --> 00:23:21.820
So people can check it out at talkpython.fm/100 days, 100 days.

00:23:21.820 --> 00:23:23.060
Put that in the show notes as well.

00:23:23.060 --> 00:23:23.420
Nice.

00:23:23.420 --> 00:23:23.860
Yeah.

00:23:23.860 --> 00:23:24.460
All right, Trey.

00:23:24.460 --> 00:23:28.720
Well, thank you so much for jumping in and being a co-host for this week.

00:23:28.720 --> 00:23:30.120
It was fun to share these items with you.

00:23:30.120 --> 00:23:30.480
Yeah.

00:23:30.480 --> 00:23:31.260
Thanks for having me.

00:23:31.260 --> 00:23:32.180
This was super exciting.

00:23:32.180 --> 00:23:33.180
I hope to be back one day.

00:23:33.180 --> 00:23:34.340
We'll have you back for sure.

00:23:34.340 --> 00:23:34.700
Thanks.

00:23:34.700 --> 00:23:34.960
Bye.

00:23:34.960 --> 00:23:38.800
Thank you for listening to Python Bytes.

00:23:38.800 --> 00:23:41.380
Follow the show on Twitter via at Python Bytes.

00:23:41.380 --> 00:23:44.260
That's Python Bytes as in B-Y-T-E-S.

00:23:44.260 --> 00:23:47.700
And get the full show notes at pythonbytes.fm.

00:23:47.700 --> 00:23:52.020
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:23:52.020 --> 00:23:54.720
We're always on the lookout for sharing something cool.

00:23:54.720 --> 00:23:58.120
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:23:58.120 --> 00:24:01.740
Thank you for listening and sharing this podcast with your friends and colleagues.

