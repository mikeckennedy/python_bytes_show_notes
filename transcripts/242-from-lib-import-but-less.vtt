
00:00:00.000 --> 00:00:04.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.880 --> 00:00:11.280
This is episode 242, recorded July 14th, 2021. I'm Michael Kennedy.


00:00:11.280 --> 00:00:12.320
And I'm Brian Arquette.


00:00:12.320 --> 00:00:13.600
Hi, and I'm Al Swigert.


00:00:13.600 --> 00:00:17.600
Hey, Al. Welcome. Welcome. Before we get to introduction with you, I just want to say this


00:00:17.600 --> 00:00:24.560
is brought to you by our courses over at Talk Python Training and Brian's book. But first,


00:00:24.560 --> 00:00:27.920
let's just hear about you, Al. Tell people who you are if they don't know.


00:00:27.920 --> 00:00:32.960
Hey, I'm Al Sweigart. I'm mostly known as the author of Automate the Boring Stuff with Python


00:00:32.960 --> 00:00:39.360
and a bunch of other Python and programming books for beginners. So all my books are released under


00:00:39.360 --> 00:00:43.280
a Creative Commons license, so it's free to download and share them. You can get them at


00:00:43.280 --> 00:00:48.960
inventwithpython.com. Nice. Yeah, yeah, fantastic. I would say the Automate the Boring Stuff has


00:00:48.960 --> 00:00:54.640
certainly been well received. Yeah, definitely. I hear it quoted a lot, for sure. Brian,


00:00:54.640 --> 00:00:56.360
- Yeah. - You just wanna get us started or what?


00:00:56.360 --> 00:00:58.200
- Yeah, I'll just get us started.


00:00:58.200 --> 00:01:03.200
So, no, so just, I saw a tweet by Jeff Triplett


00:01:03.200 --> 00:01:07.320
that mentioned just, and as a replacement for make.


00:01:07.320 --> 00:01:09.280
So I needed to check it out.


00:01:09.280 --> 00:01:10.120
So, and it's like super cool.


00:01:10.120 --> 00:01:11.600
- Make for the people who don't know


00:01:11.600 --> 00:01:14.640
is a thing that you can type, basically you type make,


00:01:14.640 --> 00:01:16.680
and then it automates a bunch of commands.


00:01:16.680 --> 00:01:19.560
Like if you've got a seriously complicated build link process


00:01:19.560 --> 00:01:21.400
it could be embedded into a make file,


00:01:21.400 --> 00:01:23.480
and then you just type make and that happens, right?


00:01:23.480 --> 00:01:27.700
>> Right. I don't know what the history of Make really is,


00:01:27.700 --> 00:01:29.060
but I used it a long time.


00:01:29.060 --> 00:01:31.140
I've been using it for decades.


00:01:31.140 --> 00:01:34.380
One of the things it does well is convert.


00:01:34.380 --> 00:01:37.740
If you've got, take all your.c files and


00:01:37.740 --> 00:01:41.220
convert them to.o files and then combine your.o files,


00:01:41.220 --> 00:01:44.700
all the build process for the C toolchain.


00:01:44.700 --> 00:01:47.540
But you can really do it with any language.


00:01:47.540 --> 00:01:49.820
But people have abused it and so have I,


00:01:49.820 --> 00:01:53.340
even Python projects that often use Make files.


00:01:53.340 --> 00:01:57.780
because make is often around on Unix-like environments.


00:01:57.780 --> 00:02:00.200
Having makefile around,


00:02:00.200 --> 00:02:03.140
you can use it just to automate some of your common tasks,


00:02:03.140 --> 00:02:04.840
like make release or something,


00:02:04.840 --> 00:02:07.700
to do all the commands you need to do


00:02:07.700 --> 00:02:10.620
to do a new release of a project or something.


00:02:10.620 --> 00:02:12.620
But there's problems with it.


00:02:12.620 --> 00:02:16.820
Just is a replacement for it.


00:02:16.820 --> 00:02:19.880
It's written in Rust,


00:02:19.880 --> 00:02:22.080
so it's pretty fast and clean.


00:02:22.080 --> 00:02:23.960
Well, actually, I don't know if it's clean.


00:02:23.960 --> 00:02:25.120
I haven't looked at the source code,


00:02:25.120 --> 00:02:27.400
but it's really easy to use.


00:02:27.400 --> 00:02:29.140
>> It's not C, it's got to be better.


00:02:29.140 --> 00:02:32.320
>> It's kind of looks like main files.


00:02:32.320 --> 00:02:37.420
I went ahead and installed it both on a Mac and Windows today to try it out.


00:02:37.420 --> 00:02:40.400
One of the things I really love about it is,


00:02:40.400 --> 00:02:44.100
it's not the main part of it is to try to automate commands.


00:02:44.100 --> 00:02:46.840
It's not about, you can build,


00:02:46.840 --> 00:02:50.240
you can use it to build things and have


00:02:50.240 --> 00:02:54.400
recipes to make all your .c files into .o files if you want.


00:02:54.400 --> 00:02:58.160
But the real power is to use it in the way we've been abusing


00:02:58.160 --> 00:03:01.600
make before because you can do some cool things.


00:03:01.600 --> 00:03:04.440
One of the problems with make always has been


00:03:04.440 --> 00:03:12.140
the recipes have to be defined on the left column,


00:03:12.140 --> 00:03:17.600
leftmost column, and then you have to have a tab for the commands.


00:03:17.600 --> 00:03:21.880
>> Well, I mean, often I have my editor set up,


00:03:21.880 --> 00:03:25.300
except for make files to replace tabs with spaces,


00:03:25.300 --> 00:03:29.560
just works just fine with spaces. I love that.


00:03:29.560 --> 00:03:33.760
Also, you can pass arguments to commands,


00:03:33.760 --> 00:03:35.280
command lines, stuff like that.


00:03:35.280 --> 00:03:36.500
>> That's cool.


00:03:36.500 --> 00:03:38.920
>> It's super cool. One of the neat things,


00:03:38.920 --> 00:03:42.840
I don't know where it is in the documentation here.


00:03:42.840 --> 00:03:45.040
You can use arbitrary languages.


00:03:45.040 --> 00:03:50.240
You can even do like a Python command within the just file.


00:03:50.240 --> 00:03:51.560
>> That's cool.


00:03:51.560 --> 00:03:53.800
>> You can do some neat things.


00:03:53.800 --> 00:03:58.000
>> For people listening, you basically declare the languages you want to use,


00:03:58.000 --> 00:04:04.320
and then you can implement code like print or console.log for JavaScript or whatever.


00:04:04.320 --> 00:04:07.200
>> Right. This actually seems like a bad example because it's actually


00:04:07.200 --> 00:04:10.840
listing the recipe name as the language name,


00:04:10.840 --> 00:04:11.960
and you don't have to do that.


00:04:11.960 --> 00:04:14.320
This Python here could just be foo or something.


00:04:14.320 --> 00:04:15.040
Oh, I see.


00:04:15.040 --> 00:04:18.040
So the thing that's important is the shebang.


00:04:18.040 --> 00:04:18.560
Yep.


00:04:18.560 --> 00:04:23.720
The shebang, tells, tells, just which language to use.


00:04:23.720 --> 00:04:25.040
So this is pretty neat.


00:04:25.040 --> 00:04:27.840
I I've started using it right away and I'm going to, I think


00:04:27.840 --> 00:04:28.800
I'm going to keep using it.


00:04:28.800 --> 00:04:29.360
It's great.


00:04:29.360 --> 00:04:31.640
Well, one thing that I got out of this, that's interesting.


00:04:31.640 --> 00:04:33.800
Scroll down to where it has like the, how to get it.


00:04:33.800 --> 00:04:35.600
You'll see like a whole bunch of links.


00:04:35.600 --> 00:04:38.800
If you go down that page a little more, a little more, keep going.


00:04:38.800 --> 00:04:40.960
Yeah, I think so.


00:04:40.960 --> 00:04:41.960
There's a section.


00:04:41.960 --> 00:04:42.560
Oh no.


00:04:42.560 --> 00:04:43.080
Yeah, there you go.


00:04:43.080 --> 00:04:47.320
There's a bunch of, it shows you all these different package managers that'll give it to you.


00:04:47.320 --> 00:04:51.880
So if you want to get it from Rust, you can use Cargo or a Mac OS, there's Homebrew and Mac ports.


00:04:51.880 --> 00:04:56.600
You want it on Windows, they interestingly recommend Scoop, which I've never used.


00:04:56.600 --> 00:04:57.800
I've only used Proclity.


00:04:57.800 --> 00:04:59.080
So I don't know.


00:04:59.080 --> 00:05:02.480
I feel like there's like ice cream theme, just something for the Windows world.


00:05:02.480 --> 00:05:04.040
But yeah, those are pretty interesting.


00:05:04.040 --> 00:05:08.360
I was going to be snarky and say, do you require make to install just?


00:05:08.360 --> 00:05:10.980
Yeah.


00:05:11.280 --> 00:05:15.280
So I got no problem using brew install for my Mac,


00:05:15.280 --> 00:05:18.280
but I'm not going to install scoop for Windows.


00:05:18.280 --> 00:05:20.580
I don't have any other need for it.


00:05:20.580 --> 00:05:22.780
So there is pre-built binaries.


00:05:22.780 --> 00:05:25.280
So I just use the pre-built binary for Windows.


00:05:25.280 --> 00:05:26.280
It worked fine.


00:05:26.280 --> 00:05:28.780
Yeah, this looks really great because


00:05:28.780 --> 00:05:31.580
my experience with make has been to just run


00:05:31.580 --> 00:05:33.780
the basic make command to build something.


00:05:33.780 --> 00:05:35.080
And if it works, that's great.


00:05:35.080 --> 00:05:38.280
And if it doesn't, I have no idea what to do because


00:05:38.280 --> 00:05:40.780
I feel like my knowledge of make is sort of like


00:05:40.780 --> 00:05:43.220
my knowledge of CSS where it's just been built up


00:05:43.220 --> 00:05:45.700
from little bits of knowledge over the years


00:05:45.700 --> 00:05:47.940
and I've never formally sat down


00:05:47.940 --> 00:05:49.900
and read through all the documentation.


00:05:49.900 --> 00:05:53.420
- 100% JIT learning, like just enough


00:05:53.420 --> 00:05:54.980
time that you needed.


00:05:54.980 --> 00:05:56.340
- Yeah, exactly.


00:05:56.340 --> 00:05:58.780
- Yeah, like I actually have never really understood


00:05:58.780 --> 00:06:01.860
why phony targets were needed.


00:06:01.860 --> 00:06:05.260
And this discussion in the readme of this,


00:06:05.260 --> 00:06:08.540
of Just actually talks about why phony is needed


00:06:08.540 --> 00:06:10.620
in the first place for make files.


00:06:10.620 --> 00:06:13.020
and why you don't need them for just.


00:06:13.020 --> 00:06:14.840
So it's kind of interesting.


00:06:14.840 --> 00:06:17.020
- Yeah, very cool, very cool.


00:06:17.020 --> 00:06:18.740
We'll move on to the next item.


00:06:18.740 --> 00:06:20.820
Couple of comments for Al out there.


00:06:20.820 --> 00:06:22.340
Teddy, hey, Teddy in the live stream says,


00:06:22.340 --> 00:06:24.540
"Love to automate the boring stuff.


00:06:24.540 --> 00:06:25.900
"How I learned Python."


00:06:25.900 --> 00:06:28.700
Dean says, "Always recommend it to get started."


00:06:28.700 --> 00:06:30.660
Great fan, so yeah, that's pretty cool.


00:06:30.660 --> 00:06:32.220
- Awesome, hey, thanks.


00:06:32.220 --> 00:06:33.700
I always love hearing that.


00:06:33.700 --> 00:06:35.440
- You bet.


00:06:35.440 --> 00:06:38.820
All right, I love to hear from our fans of the show.


00:06:38.820 --> 00:06:43.040
And so Roman Wright, who worked on Beanie,


00:06:43.040 --> 00:06:48.040
the, I believe, pedantic-based model query for ODM


00:06:48.040 --> 00:06:51.800
for MongoDB, recommended something else this time.


00:06:51.800 --> 00:06:53.700
We already covered Beanie.


00:06:53.700 --> 00:06:55.740
Something called strong typing.


00:06:55.740 --> 00:06:59.180
So this is a decorator, this is from Felix Lassie.


00:06:59.180 --> 00:07:01.440
It's a decorator which checks whether a function


00:07:01.440 --> 00:07:03.700
is called with the correct arguments.


00:07:03.700 --> 00:07:08.380
So if somebody goes and puts type annotations on their code,


00:07:08.380 --> 00:07:12.780
That's cool, the editors like PyCharm will say,


00:07:12.780 --> 00:07:14.420
you're doing it wrong when you're doing it wrong,


00:07:14.420 --> 00:07:15.780
or they'll give you autocomplete


00:07:15.780 --> 00:07:17.900
and information on the arguments and so on.


00:07:17.900 --> 00:07:21.460
But Python, that's like a hint, right?


00:07:21.460 --> 00:07:22.780
Called type hints often.


00:07:22.780 --> 00:07:25.380
Because it's a hint, it is not a requirement.


00:07:25.380 --> 00:07:27.460
And so if you want to make sure


00:07:27.460 --> 00:07:31.020
that certain types match up basically,


00:07:31.020 --> 00:07:32.300
you can use this decorator.


00:07:32.300 --> 00:07:34.260
And there's not a lot to this one,


00:07:34.260 --> 00:07:36.540
but go over to the read the docs.


00:07:36.540 --> 00:07:39.220
There's a stay strong little character there.


00:07:39.220 --> 00:07:42.660
But the idea is if you had this thing that was like a multiplier,


00:07:42.660 --> 00:07:45.860
took an A int and a B int, you could pass other stuff.


00:07:45.860 --> 00:07:49.860
But if you pass, like if you could pass like three or four to multiply, but


00:07:49.860 --> 00:07:53.540
if you pass like, hello world, it's just going to try string times string,


00:07:53.540 --> 00:07:58.380
which there's probably a cool Watt outcome that we could get there, but


00:07:58.380 --> 00:07:59.500
that's not what happens in Python.


00:07:59.500 --> 00:08:00.900
We get a type error, right?


00:08:00.900 --> 00:08:05.500
If you do a string times a number, you get a pretty interesting outcome.


00:08:05.500 --> 00:08:06.880
And this is something of a WAP.


00:08:06.880 --> 00:08:08.640
If you do like hello times four,


00:08:08.640 --> 00:08:10.940
you get hello, hello, hello, hello four times,


00:08:10.940 --> 00:08:12.160
which has always been weird.


00:08:12.160 --> 00:08:13.540
When I learned you can multiply strings,


00:08:13.540 --> 00:08:14.560
it kind of freaked me out,


00:08:14.560 --> 00:08:16.180
but I've come to find it useful.


00:08:16.180 --> 00:08:17.320
So what do people do?


00:08:17.320 --> 00:08:19.380
Well, they're like, well, this won't stand.


00:08:19.380 --> 00:08:21.020
We need to check the type.


00:08:21.020 --> 00:08:23.520
So we're gonna say, if is instance,


00:08:23.520 --> 00:08:25.060
the first parameter and an int,


00:08:25.060 --> 00:08:27.840
and is instance the second one, we can do it.


00:08:27.840 --> 00:08:29.440
Otherwise we're gonna report an error.


00:08:29.440 --> 00:08:30.280
Don't do that.


00:08:30.280 --> 00:08:33.920
Instead, what you can do is you can use this


00:08:33.920 --> 00:08:35.160
match typing decorator.


00:08:35.160 --> 00:08:37.200
you could just say @match typing,


00:08:37.200 --> 00:08:40.100
and it's going to take the arguments


00:08:40.100 --> 00:08:42.540
based on the type hints and validate them.


00:08:42.540 --> 00:08:44.440
So if you pass in the right one, great,


00:08:44.440 --> 00:08:45.580
it'll give you an answer.


00:08:45.580 --> 00:08:48.320
If you pass in something that does not match


00:08:48.320 --> 00:08:50.480
the type annotations described,


00:08:50.480 --> 00:08:53.620
it'll say, it'll raise a type mismatch exception.


00:08:53.620 --> 00:08:55.000
And this can be nested down.


00:08:55.000 --> 00:08:59.120
So for example, one of the examples is it takes a list


00:08:59.120 --> 00:09:01.680
and let's see, it takes a list,


00:09:01.680 --> 00:09:04.840
which is a union of strings, ints and tuples.


00:09:04.840 --> 00:09:08.180
So if you give it a list that has either a string,


00:09:08.180 --> 00:09:12.040
int or a tuple mixed heterogeneously into the arguments,


00:09:12.040 --> 00:09:13.300
it'll take that just fine.


00:09:13.300 --> 00:09:15.280
But if you give it some other type like


00:09:15.280 --> 00:09:18.480
a list that happens to contain one of the elements as a date time,


00:09:18.480 --> 00:09:19.580
it'll give you this exception.


00:09:19.580 --> 00:09:20.880
So it's not just, "Oh,


00:09:20.880 --> 00:09:27.360
it took a list." It has the transitive property of analyzing the types is validated there.


00:09:27.360 --> 00:09:29.160
So pretty interesting. What do you two think?


00:09:29.160 --> 00:09:33.120
>> Yeah. So the difference between this and something like MyPy is that


00:09:33.120 --> 00:09:35.660
this operates at runtime, right?


00:09:35.660 --> 00:09:36.660
>> Right, exactly.


00:09:36.660 --> 00:09:38.460
Because you could do all the MyPy stuff you want,


00:09:38.460 --> 00:09:39.500
and if people don't run it,


00:09:39.500 --> 00:09:42.160
well, you're not going to get any information out of it, right?


00:09:42.160 --> 00:09:44.020
>> Yeah, that was something that I was really surprised to


00:09:44.020 --> 00:09:46.120
learn when I first learned type hinting was that,


00:09:46.120 --> 00:09:48.980
really, Python's type hints don't


00:09:48.980 --> 00:09:52.480
really affect the runtime code at all.


00:09:52.480 --> 00:09:56.460
It's just set up for static source code checkers like MyPy.


00:09:56.460 --> 00:09:59.220
So it doesn't turn Python magically


00:09:59.220 --> 00:10:01.340
into a statically typed language.


00:10:01.340 --> 00:10:04.820
It's just for these static source tools.


00:10:04.820 --> 00:10:06.740
>> Yeah, exactly. That's MyPy is.


00:10:06.740 --> 00:10:09.220
This is the other side of that.


00:10:09.220 --> 00:10:11.380
This is the one-time one.


00:10:11.380 --> 00:10:13.660
Maybe you would use this in the case where you're building


00:10:13.660 --> 00:10:17.440
a package or library and you've done everything correctly,


00:10:17.440 --> 00:10:20.380
but someone else is consuming it potentially incorrectly,


00:10:20.380 --> 00:10:23.820
and you can't control whether the world uses MyPy or not.


00:10:23.820 --> 00:10:25.900
You just wrote a library.


00:10:25.900 --> 00:10:29.100
You could use this on say the boundary of your library,


00:10:29.100 --> 00:10:31.140
not everywhere, just on the boundary


00:10:31.140 --> 00:10:33.780
to make sure the stuff that goes in and out is valid.


00:10:33.780 --> 00:10:36.100
>> This would be really helpful for stuff that I work on


00:10:36.100 --> 00:10:38.980
because usually I'm just writing code ad hoc


00:10:38.980 --> 00:10:41.180
that does this runtime checking.


00:10:41.180 --> 00:10:43.260
But it's really nice that I could just throw in


00:10:43.260 --> 00:10:46.700
a function decorator and just add that capability,


00:10:46.700 --> 00:10:48.620
and that's all I have to do.


00:10:48.620 --> 00:10:49.820
>> Yeah, absolutely.


00:10:49.820 --> 00:10:51.540
>> Yeah, this is great.


00:10:51.540 --> 00:10:55.580
>> So clearly this is adding code, your code.


00:10:55.580 --> 00:10:59.060
So yeah, I'm curious about the performance.


00:10:59.060 --> 00:11:01.180
- Yeah, so Teddy, he out there in live stream asked,


00:11:01.180 --> 00:11:03.860
do you know if there's any potential loss performance


00:11:03.860 --> 00:11:05.580
since it's running at runtime?


00:11:05.580 --> 00:11:09.860
I'm gonna say, I am certain there is a loss performance.


00:11:09.860 --> 00:11:12.920
Unfortunately in Python, calling a function


00:11:12.920 --> 00:11:15.740
is a relatively slow operation


00:11:15.740 --> 00:11:18.700
and doing a decorator is effectively calling a function.


00:11:18.700 --> 00:11:19.920
So it's got to be slower.


00:11:19.920 --> 00:11:22.900
That's why I would say put it just on the boundaries,


00:11:22.900 --> 00:11:24.180
you know, something like that.


00:11:24.180 --> 00:11:26.260
But I mean, the alternative is if you actually


00:11:26.260 --> 00:11:27.140
wanna do these tests,


00:11:27.140 --> 00:11:29.400
if you actually wanna do that validation,


00:11:29.400 --> 00:11:33.780
it's an if statement and multiple is instance ofs


00:11:33.780 --> 00:11:34.660
all over the play, right?


00:11:34.660 --> 00:11:36.460
So if you're gonna do that validation anyway,


00:11:36.460 --> 00:11:38.500
you're already calling, it's just not on the outside,


00:11:38.500 --> 00:11:39.820
it's on the inside, right?


00:11:39.820 --> 00:11:42.380
So good question, I don't know.


00:11:42.380 --> 00:11:44.900
- Yeah, another question from Ben Lindsey,


00:11:44.900 --> 00:11:46.180
do you know how this compares


00:11:46.180 --> 00:11:49.140
with Pydantic's validate arguments decorator?


00:11:49.140 --> 00:11:50.940
- I don't know, but I'm a big fan of Pydantic


00:11:50.940 --> 00:11:52.820
and the validate arguments decorator


00:11:52.820 --> 00:11:56.300
is exactly the same type of thing that we're talking about.


00:11:56.300 --> 00:11:59.900
So for example, like you just put the @validate arguments.


00:11:59.900 --> 00:12:03.100
The thing is that I did notice somewhere


00:12:03.100 --> 00:12:03.940
that yeah, here it is.


00:12:03.940 --> 00:12:06.620
Like this validate arguments decorator is in beta


00:12:06.620 --> 00:12:08.580
for whatever that means.


00:12:08.580 --> 00:12:12.020
It won't be concrete until V2, identic.


00:12:12.020 --> 00:12:15.940
But that may well be more concrete


00:12:15.940 --> 00:12:18.780
and more formalized than this one, right?


00:12:18.780 --> 00:12:20.500
Although this is more standalone, right?


00:12:20.500 --> 00:12:22.060
So you don't necessarily,


00:12:22.060 --> 00:12:24.720
It feels like a little tiny thing that you just plug in on there.


00:12:24.720 --> 00:12:26.240
Pydantic is doing a lot.


00:12:26.240 --> 00:12:27.420
I'm a fan of Pydantic.


00:12:27.420 --> 00:12:29.160
So yeah, good question, Ben.


00:12:29.160 --> 00:12:31.280
All right, Al, you got the next one, right?


00:12:31.280 --> 00:12:34.700
>> Yeah. So I have a new book out.


00:12:34.700 --> 00:12:36.640
It just came out at the end of June.


00:12:36.640 --> 00:12:39.940
It's called The Big Book of Small Python Projects.


00:12:39.940 --> 00:12:45.120
So a lot of my books have been for people who are total beginners or


00:12:45.120 --> 00:12:48.740
relatively new to not just Python but to programming in general.


00:12:48.740 --> 00:12:50.460
>> Generally people who have boring stuff?


00:12:50.460 --> 00:12:54.460
Yes, oh man, so much boring stuff.


00:12:54.460 --> 00:12:58.220
Actually, you have books on games and things as well.


00:12:58.220 --> 00:13:03.340
Yeah, yeah, that's the two approaches I have to tricking people into learning how to program is


00:13:03.340 --> 00:13:07.420
getting away from Excel and then also learning how to make video games.


00:13:07.420 --> 00:13:11.660
Seems to be really common pathways into programming.


00:13:11.660 --> 00:13:17.740
So I've also noticed that with a lot of beginner tutorials, people learn the syntax and they learn


00:13:17.740 --> 00:13:22.780
all the concepts like loops and variables and things like that. But when it comes to actually


00:13:22.780 --> 00:13:27.660
working on their own projects, they're sort of stuck and they're just left staring at a blank


00:13:27.660 --> 00:13:32.380
editor and not really knowing how to proceed from there. And a lot of people will give them,


00:13:32.380 --> 00:13:37.820
usually the two bits of advice that people get are, oh, you should work on open source projects,


00:13:37.820 --> 00:13:42.380
or just read the code for open source projects, which is actually pretty terrible advice for


00:13:42.380 --> 00:13:45.600
for beginners because a lot of open source projects


00:13:45.600 --> 00:13:47.700
might not be well documented.


00:13:47.700 --> 00:13:51.200
They're written for professional software engineers.


00:13:51.200 --> 00:13:52.440
There's a lot of concepts.


00:13:52.440 --> 00:13:54.460
- Yeah, there's a huge difference between something


00:13:54.460 --> 00:13:57.480
that is absolutely polished and meant to be used


00:13:57.480 --> 00:13:59.240
in many situations in the real world.


00:13:59.240 --> 00:14:01.960
Like you might learn a lot by working, looking at Django,


00:14:01.960 --> 00:14:04.040
but most of the time you'll probably just be confused.


00:14:04.040 --> 00:14:05.520
You're like, why is this so complicated?


00:14:05.520 --> 00:14:07.800
Oh, it's so complicated because, you know,


00:14:07.800 --> 00:14:10.040
a million websites use it in weird ways


00:14:10.040 --> 00:14:11.540
and that's why it's complicated.


00:14:11.540 --> 00:14:13.680
That's not a good learning tool per se.


00:14:13.680 --> 00:14:15.780
- Yeah, especially for someone who just learned about,


00:14:15.780 --> 00:14:18.560
you know, how to call functions and how to create classes


00:14:18.560 --> 00:14:20.100
and pretty basic things like that.


00:14:20.100 --> 00:14:24.780
So I spent, I think, I think I was working on this


00:14:24.780 --> 00:14:27.260
on and off again for about two or three years,


00:14:27.260 --> 00:14:29.220
but I wanted to create a collection


00:14:29.220 --> 00:14:33.380
of small little programs, mostly like games or puzzles


00:14:33.380 --> 00:14:36.080
or little simulations or things like that,


00:14:36.080 --> 00:14:38.820
where they were all just really simple and easy


00:14:38.820 --> 00:14:40.140
for beginners to read through,


00:14:40.140 --> 00:14:44.660
and then they can understand, oh, this is how all of these concepts I learned get applied


00:14:44.660 --> 00:14:48.580
to an actual program that does something. So these aren't code snippets. They're not


00:14:48.580 --> 00:14:53.180
just like tiny little functions or things like this. This is programs that you can actually


00:14:53.180 --> 00:15:00.300
copy the code yourself and then figure out how they work. So I have about 81 of these


00:15:00.300 --> 00:15:06.260
projects all together. They're all under I set a limit of of 256 lines of code just as


00:15:06.260 --> 00:15:12.140
an arbitrary power of eight to set it to. And they are all text based games. So they're


00:15:12.140 --> 00:15:17.420
fairly old school looking, like a lot of the games that people were programming in basic


00:15:17.420 --> 00:15:25.320
in the 1980s and 90s. But the plus side of that is that all of the games are really simple


00:15:25.320 --> 00:15:31.180
and you don't have to install additional libraries or modules or things like that. You can pretty


00:15:31.180 --> 00:15:38.140
much just type the code in and it just uses the Python standard library for all of this.


00:15:38.140 --> 00:15:42.380
I have a few of these programs that use a few other modules as well, but for the most


00:15:42.380 --> 00:15:47.340
part you can get pretty far with just text and just ASCII art.


00:15:47.340 --> 00:15:52.460
And also, even if you already know Python, these programs are great just for ideas of


00:15:52.460 --> 00:15:56.380
if you want to learn another programming language and just get used to how things work in that.


00:15:56.380 --> 00:16:03.980
could find the idea for a blackjack game from this collection of programs, or this birthday


00:16:03.980 --> 00:16:10.540
paradox calculator, and all sorts of these little projects right here. And of course,


00:16:10.540 --> 00:16:17.340
this book is also freely available online at inventwithpython.com/bigbookpython. I'm


00:16:17.340 --> 00:16:21.420
starting to get reviews coming in on Amazon, and they seem to be pretty positive. So I'm


00:16:21.420 --> 00:16:24.640
I'm really hopeful about people just being able to take


00:16:24.640 --> 00:16:27.980
the next step in learning to code with this book.


00:16:27.980 --> 00:16:28.820
- Yeah, cool.


00:16:28.820 --> 00:16:29.640
- Cool.


00:16:29.640 --> 00:16:31.580
- Yeah, and then the other book that I had


00:16:31.580 --> 00:16:34.980
that came out in November is


00:16:34.980 --> 00:16:36.540
"Beyond the Basic Stuff with Python,"


00:16:36.540 --> 00:16:38.660
which is sort of the follow-up book


00:16:38.660 --> 00:16:40.960
to "Automate the Boring Stuff with Python."


00:16:40.960 --> 00:16:42.860
I had a lot of people who were asking me,


00:16:42.860 --> 00:16:44.340
"Oh, I really like to automate.


00:16:44.340 --> 00:16:45.980
What should I read next?"


00:16:45.980 --> 00:16:49.820
And I had some things that I would tell them,


00:16:49.820 --> 00:16:52.460
like Fluent Python is a really great book,


00:16:52.460 --> 00:16:56.740
but it's also like 800 pages or 800 pounds or something.


00:16:56.740 --> 00:17:00.680
It's a really huge book and the information in it is great,


00:17:00.680 --> 00:17:03.820
but it's really intimidating to take this book


00:17:03.820 --> 00:17:06.260
and it's like, okay, read this one next.


00:17:06.260 --> 00:17:08.980
So I wanted to cover a book that had


00:17:08.980 --> 00:17:11.620
sort of the best practices


00:17:11.620 --> 00:17:14.220
for a lot of like software engineers.


00:17:14.220 --> 00:17:18.020
So there's sections on like how to name your variables


00:17:18.020 --> 00:17:19.740
or how to do code formatting.


00:17:19.740 --> 00:17:25.660
I talk about the black code formatting tool. I talk about type hints and how to write documentation.


00:17:25.660 --> 00:17:33.500
I have a very superficial coverage of Git and GitHub and how to use version control. And


00:17:33.500 --> 00:17:38.060
just you know, and I even dive into like, what exactly does Pythonic mean?


00:17:38.060 --> 00:17:45.180
Spoiler alert, Pythonic basically means anything the person you're talking to wants it to mean at


00:17:45.180 --> 00:17:50.060
at the time. But yeah, just sort of a lot of the things that you don't really get in


00:17:50.060 --> 00:17:55.200
your typical Hello World tutorial. These are the sort of tidbits that you would pick up


00:17:55.200 --> 00:18:00.340
with experience over over years of experience, I guess. But I just wanted to collect all


00:18:00.340 --> 00:18:05.880
of that advice and information and best practices into a single book. So yeah, that's also available


00:18:05.880 --> 00:18:10.140
online at the invent with Python.com website. Cool.


00:18:10.140 --> 00:18:14.720
Couple comments from the live stream. John, the hand says beyond the basic stuff was great


00:18:14.720 --> 00:18:16.980
for learning to do things Python way.


00:18:16.980 --> 00:18:19.440
And wow, great to see you Mr. Swigert.


00:18:19.440 --> 00:18:21.600
Seems like only yesterday I was promoting your last book


00:18:21.600 --> 00:18:23.320
at Bay Piggies from--


00:18:23.320 --> 00:18:25.520
- Oh, hey Neil, how's it going?


00:18:25.520 --> 00:18:26.440
- Cool.


00:18:26.440 --> 00:18:27.720
- Yeah, very cool.


00:18:27.720 --> 00:18:29.640
Congrats on the books.


00:18:29.640 --> 00:18:31.520
Brian, let's talk about something


00:18:31.520 --> 00:18:33.120
completely different than books.


00:18:33.120 --> 00:18:37.640
- Like notebooks, yes.


00:18:37.640 --> 00:18:38.840
Let's talk about notebooks.


00:18:38.840 --> 00:18:40.720
Thanks for popping that up.


00:18:40.720 --> 00:18:43.560
Yeah, so this was another suggestion.


00:18:43.560 --> 00:18:45.900
this suggestion came from David Nicholson.


00:18:45.900 --> 00:18:49.740
Thanks, David. I thought we'd covered this already,


00:18:49.740 --> 00:18:51.020
but then I looked in,


00:18:51.020 --> 00:18:52.880
but we haven't, and I looked into it,


00:18:52.880 --> 00:18:55.760
and I obviously haven't played with it yet.


00:18:55.760 --> 00:18:58.760
But okay, so Testbook is very cool.


00:18:58.760 --> 00:19:02.540
Testbook, the idea is to test your Jupyter Notebooks.


00:19:02.540 --> 00:19:05.520
I think we've covered a couple of ways to do that,


00:19:05.520 --> 00:19:07.720
but this is a neat perspective.


00:19:07.720 --> 00:19:12.900
The perspective of this is you've got a notebook with maybe,


00:19:12.900 --> 00:19:16.040
let's say functions in it, and you want to check those.


00:19:16.040 --> 00:19:19.280
You want to make sure that you want to write tests against those functions.


00:19:19.280 --> 00:19:22.720
Instead of putting the tests in your notebook,


00:19:22.720 --> 00:19:25.120
put them in just a test file


00:19:25.120 --> 00:19:29.560
and run it with PyTest or unit test or something.


00:19:29.560 --> 00:19:35.660
To do that though, let's say I want to run a function foo,


00:19:35.660 --> 00:19:38.120
and I want to do it from another file,


00:19:38.120 --> 00:19:41.600
I've got to get that definition of foo into my test code.


00:19:41.600 --> 00:19:51.600
So what TestBook does is it has a decorator that you can either put it on your test or a fixture that goes ahead and runs the,


00:19:51.600 --> 00:19:55.600
one of the things you can do is run your notebook before the test runs.


00:19:55.600 --> 00:19:57.600
Oh yeah, this is really cool.


00:19:57.600 --> 00:20:03.600
So you have a decorator which has a path to the IPYNB file and execute equals true.


00:20:03.600 --> 00:20:06.600
And by the time it gets to your code, it's already going to run that.


00:20:06.600 --> 00:20:12.040
things defined like a function or variables defined within the notebook will just be accessible through


00:20:12.040 --> 00:20:13.800
the input parameter there.


00:20:13.800 --> 00:20:20.920
Yep, and the test gets a fix, you can have a fixture to be able to grab values, references.


00:20:20.920 --> 00:20:26.600
So the example we're showing right now shows pulling a function in, but I imagine you can


00:20:26.600 --> 00:20:31.560
pull in really anything, any name that exists within the notebook to be able to test it.


00:20:33.160 --> 00:20:36.320
Some of the neat things that it includes right off the bat is,


00:20:36.320 --> 00:20:39.240
it's nice that it isn't just PyTest.


00:20:39.240 --> 00:20:40.600
You can use it with unit test.


00:20:40.600 --> 00:20:43.720
Apparently also with Nose, but don't do that.


00:20:43.720 --> 00:20:46.800
One of the things you can do also is,


00:20:46.800 --> 00:20:49.780
in the original example of decorating a test,


00:20:49.780 --> 00:20:54.020
it's going to run that notebook for every test it's decorated.


00:20:54.020 --> 00:20:55.600
You might not want that.


00:20:55.600 --> 00:20:58.900
You might, but if you want to run it all just once,


00:20:58.900 --> 00:21:02.060
you can put it in a fixture and then return the fixture.


00:21:02.060 --> 00:21:03.460
That's a cool thing.


00:21:03.460 --> 00:21:06.940
One reason why you might want to run it multiple times is


00:21:06.940 --> 00:21:10.060
if there are interactions between the different parts,


00:21:10.060 --> 00:21:12.500
and you want to completely isolate those tests.


00:21:12.500 --> 00:21:15.020
Another thing that's built into it is patching.


00:21:15.020 --> 00:21:16.620
You don't have to import mock,


00:21:16.620 --> 00:21:18.660
you can patch different parts of


00:21:18.660 --> 00:21:25.180
your Python notebook code like mock.


00:21:25.180 --> 00:21:28.480
You can patch it right through this. That's pretty neat.


00:21:28.480 --> 00:21:30.100
>> Yeah, that's pretty neat. I like it.


00:21:30.100 --> 00:21:31.020
Al, what do you think?


00:21:31.020 --> 00:21:32.180
- Nice, yeah.


00:21:32.180 --> 00:21:34.380
I haven't had a lot of experience with Jupyter Notebooks,


00:21:34.380 --> 00:21:36.940
but it's sort of becoming the main way


00:21:36.940 --> 00:21:38.860
that a lot of people are being introduced to Python,


00:21:38.860 --> 00:21:42.260
especially if they're coming from the sciences or academia.


00:21:42.260 --> 00:21:43.100
- Yep. - Yeah.


00:21:43.100 --> 00:21:45.220
And so getting sort of a lot of


00:21:45.220 --> 00:21:48.620
informally trained software engineers up to speed


00:21:48.620 --> 00:21:51.300
with unit testing and other practices like that,


00:21:51.300 --> 00:21:53.500
it's definitely something I can get behind.


00:21:53.500 --> 00:21:54.340
- Yeah, that's cool.


00:21:54.340 --> 00:21:57.300
And getting the ability to call those pieces


00:21:57.300 --> 00:21:59.820
or interact with those pieces outside the notebook


00:21:59.820 --> 00:22:02.780
is quite tricky so this is a neat way to do it.


00:22:02.780 --> 00:22:03.700
I mean, we've got paper mail,


00:22:03.700 --> 00:22:06.180
but I'm not sure exactly how that folds into testing


00:22:06.180 --> 00:22:07.420
and stuff like that, right?


00:22:07.420 --> 00:22:09.020
- Right, actually-- - Yeah.


00:22:09.020 --> 00:22:09.860
- Yeah, I don't think so.


00:22:09.860 --> 00:22:12.580
- I think it's more like inputs and outputs


00:22:12.580 --> 00:22:13.860
as a whole notebook, not like,


00:22:13.860 --> 00:22:16.960
let me get a hold of the function in the cell seven


00:22:16.960 --> 00:22:18.020
and try to call that.


00:22:18.020 --> 00:22:21.660
- Yeah, also the target audience is different.


00:22:21.660 --> 00:22:25.220
So the target audience for your notebook itself


00:22:25.220 --> 00:22:27.820
is different than you trying to test your code.


00:22:27.820 --> 00:22:31.860
So keeping the test code out of the notebook,


00:22:31.860 --> 00:22:34.780
I think is a nice thing to keep it clean.


00:22:34.780 --> 00:22:36.660
- Yeah, I totally agree.


00:22:36.660 --> 00:22:38.100
Taking a step back real quick,


00:22:38.100 --> 00:22:41.420
Neil also asks, are the small programs in your book, Al,


00:22:41.420 --> 00:22:44.180
compatible with MicroPython or CircuitPython?


00:22:44.180 --> 00:22:46.000
- Probably not.


00:22:46.000 --> 00:22:49.300
I don't know, I haven't taken too much


00:22:49.300 --> 00:22:51.640
of a look at MicroPython,


00:22:51.640 --> 00:22:55.260
but I do try to keep all the source code


00:22:55.260 --> 00:22:58.460
as simple as possible and not really rely on


00:22:58.460 --> 00:23:01.420
like the file system or making network connections.


00:23:01.420 --> 00:23:06.420
Mostly it's just standard IO input output streams for text.


00:23:06.420 --> 00:23:09.540
So, you know, if it can run print and input


00:23:09.540 --> 00:23:12.700
then likely it can run these programs.


00:23:12.700 --> 00:23:14.780
- Yeah, maybe you just have to make the little lights blink


00:23:14.780 --> 00:23:16.340
and some sort of Morse code.


00:23:16.340 --> 00:23:18.340
- Yeah, perfect.


00:23:18.340 --> 00:23:19.180
- Nice.


00:23:19.180 --> 00:23:20.000
All right.


00:23:20.000 --> 00:23:21.540
Something that is a little bit mysterious


00:23:21.540 --> 00:23:23.220
to a lot of folks I think,


00:23:23.220 --> 00:23:26.580
partly because it's somewhat discouraged, but not always,


00:23:26.580 --> 00:23:30.740
is from package import star, right?


00:23:30.740 --> 00:23:33.940
While sometimes discouraged, 'cause you probably shouldn't,


00:23:33.940 --> 00:23:36.460
there probably are situations where you wanna do that.


00:23:36.460 --> 00:23:38.420
Like if I've got three sub-modules


00:23:38.420 --> 00:23:39.940
and I wanna take the elements in them


00:23:39.940 --> 00:23:43.740
and then drop them into the top-level dunder init


00:23:43.740 --> 00:23:46.700
for a package so that I can just say package name.items,


00:23:46.700 --> 00:23:49.480
but not organize them into one giant file, for example.


00:23:49.480 --> 00:23:50.860
That might be reasonable.


00:23:50.860 --> 00:23:55.860
The way that you control that is you work on the dunder all


00:23:55.860 --> 00:23:58.600
definition at the top of your package, right?


00:23:58.600 --> 00:23:59.640
And in there you can say,


00:23:59.640 --> 00:24:01.040
oh, here are the names of the things


00:24:01.040 --> 00:24:02.740
that I would like to export.


00:24:02.740 --> 00:24:05.800
If you import star rather than everything,


00:24:05.800 --> 00:24:07.640
give them these, right?


00:24:07.640 --> 00:24:11.200
Maybe you define some weird thing called Django


00:24:11.200 --> 00:24:12.720
and it's not meant to override Django


00:24:12.720 --> 00:24:13.960
or something like that, right?


00:24:13.960 --> 00:24:15.320
You wanna leave that out.


00:24:15.320 --> 00:24:17.680
So how do you manage that?


00:24:17.680 --> 00:24:22.580
Well, there's this project over on GitHub called AutoAll,


00:24:22.580 --> 00:24:26.640
auto-all, and the idea is it somewhat automagically


00:24:26.640 --> 00:24:30.080
manages the dunderall variable for Python modules.


00:24:30.080 --> 00:24:32.640
So there's a couple of ways in which you can do it.


00:24:32.640 --> 00:24:36.240
You can exclude certain things,


00:24:36.240 --> 00:24:39.340
you can clearly differentiate what's meant to be treated


00:24:39.340 --> 00:24:41.560
as an external item and what's meant to be treated


00:24:41.560 --> 00:24:43.040
as an internal item.


00:24:43.040 --> 00:24:46.360
You don't have to worry about continuing to update


00:24:46.360 --> 00:24:48.240
the dunder all and so on.


00:24:48.240 --> 00:24:50.160
So you just pip install it.


00:24:50.160 --> 00:24:52.320
And then the most,


00:24:52.320 --> 00:24:54.600
it seems like the recommended way I guess,


00:24:54.600 --> 00:24:57.480
is you would fall somewhere in your script


00:24:57.480 --> 00:24:58.320
at the top level,


00:24:58.320 --> 00:25:00.560
like at the function or class level, right?


00:25:00.560 --> 00:25:03.480
No tab space, no spaces, no indentation.


00:25:03.480 --> 00:25:04.440
You say start all,


00:25:04.440 --> 00:25:07.440
then you write a bunch of code functions and so on.


00:25:07.440 --> 00:25:08.280
And then you say--


00:25:08.280 --> 00:25:10.480
- You mean auto all dot start all?


00:25:10.480 --> 00:25:11.320
- Yeah, yeah.


00:25:11.320 --> 00:25:13.640
If you, yeah, if you, exactly.


00:25:13.640 --> 00:25:14.840
If you import it from there, right?


00:25:14.840 --> 00:25:16.600
I guess you could even import star from there,


00:25:16.600 --> 00:25:17.820
but you say start all,


00:25:17.820 --> 00:25:19.000
and then you write a bunch of code,


00:25:19.000 --> 00:25:20.000
and you say end all,


00:25:20.000 --> 00:25:22.520
and then basically between those two markers,


00:25:22.520 --> 00:25:26.020
those are the things that go into your done all variable.


00:25:26.020 --> 00:25:28.280
There's something about classes,


00:25:28.280 --> 00:25:31.480
it will not work for classes or variables as,


00:25:31.480 --> 00:25:32.320
sorry, take it back.


00:25:32.320 --> 00:25:34.160
It will with the start all, end all,


00:25:34.160 --> 00:25:35.280
but there's also another way


00:25:35.280 --> 00:25:37.960
that only works on function,


00:25:37.960 --> 00:25:40.640
and that is to put a decorator onto the function,


00:25:40.640 --> 00:25:42.440
which I think, I like this a lot,


00:25:42.440 --> 00:25:44.520
but the fact that it doesn't work with classes,


00:25:44.520 --> 00:25:46.920
It sounds like that should actually be a PR folks.


00:25:46.920 --> 00:25:47.760
- Yeah.


00:25:47.760 --> 00:25:48.600
- A little thing that,


00:25:48.600 --> 00:25:51.240
an extra one like public class or I don't know, whatever.


00:25:51.240 --> 00:25:52.080
But that seems pretty cool.


00:25:52.080 --> 00:25:54.760
So you just say @public on a function


00:25:54.760 --> 00:25:57.040
and then that will add it to the dunderall.


00:25:57.040 --> 00:25:59.080
So if you wanna export three functions from your module,


00:25:59.080 --> 00:26:00.360
you just put @public on those.


00:26:00.360 --> 00:26:01.760
And that way when you're looking at it,


00:26:01.760 --> 00:26:02.580
it's like really clear.


00:26:02.580 --> 00:26:04.560
These are the public functions and the rest aren't.


00:26:04.560 --> 00:26:07.960
I mean, you could still from module import name,


00:26:07.960 --> 00:26:10.280
but not through the all, right?


00:26:10.280 --> 00:26:11.120
- Yeah.


00:26:11.120 --> 00:26:13.120
- Okay, anyway, it looks pretty cool, right?


00:26:13.120 --> 00:26:15.920
- Yeah, that is actually a really nice way


00:26:15.920 --> 00:26:18.640
to just have this automatically taken care of.


00:26:18.640 --> 00:26:21.560
I mean, ideally you're not really doing


00:26:21.560 --> 00:26:24.600
the from module import star all too often,


00:26:24.600 --> 00:26:28.000
or rather, ideally, I'm the only person in the entire world


00:26:28.000 --> 00:26:29.240
that should be allowed to do that,


00:26:29.240 --> 00:26:32.240
and everybody else will have to do it the proper way.


00:26:32.240 --> 00:26:33.720
- It's a bad idea, don't do it.


00:26:33.720 --> 00:26:35.060
But it's very handy, no.


00:26:35.060 --> 00:26:36.600
- Yeah, this is really handy.


00:26:36.600 --> 00:26:38.400
- Yeah, Dean out there in the live stream says,


00:26:38.400 --> 00:26:40.120
this should work with a context manager.


00:26:40.120 --> 00:26:41.560
Yeah, it probably should.


00:26:41.560 --> 00:26:44.840
I think the challenge would be then you'd have like all of your implementation


00:26:44.840 --> 00:26:46.360
indented, but still pretty cool.


00:26:46.360 --> 00:26:47.160
Yeah.


00:26:47.160 --> 00:26:52.600
So actually I'm reminded of one of the places I do do, I do do import all or


00:26:52.600 --> 00:26:57.680
import star is, is in, Dunder and it files for packages.


00:26:57.680 --> 00:26:58.680
Yes, exactly.


00:26:58.680 --> 00:27:03.320
In those cases, I often do only in, I've got a couple of modules that have my


00:27:03.320 --> 00:27:05.560
interface and I pull everything in from there.


00:27:05.560 --> 00:27:11.000
Um, so, those are, those are cases where that isn't, that is something that


00:27:11.000 --> 00:27:13.400
happens and then you're faced with,


00:27:13.400 --> 00:27:15.080
"Well, what if I want to put another function that


00:27:15.080 --> 00:27:16.480
isn't part of my public interface?"


00:27:16.480 --> 00:27:17.800
Then you have to jump through hoops.


00:27:17.800 --> 00:27:20.160
I'd probably use it in those cases.


00:27:20.160 --> 00:27:22.200
>> Yeah. I don't think it's broadly applicable,


00:27:22.200 --> 00:27:23.800
but for the people who are really trying to


00:27:23.800 --> 00:27:25.920
carefully manage their Thunderall,


00:27:25.920 --> 00:27:28.040
seems nice, straightforward, simple.


00:27:28.040 --> 00:27:29.000
>> Yeah.


00:27:29.000 --> 00:27:33.040
>> Yeah. All right. Al, I think you got the last one, right?


00:27:33.040 --> 00:27:37.200
>> Yeah. I am working on another book.


00:27:37.200 --> 00:27:39.680
I have a really bad book writing problem.


00:27:39.680 --> 00:27:46.080
I keep thinking that this will be the last one and then I have ideas for 10 or 20 more.


00:27:46.080 --> 00:27:50.200
But the book that I'm currently working on and I'm down to the drafts of the last two


00:27:50.200 --> 00:27:56.280
chapters is a book on recursion. So this is currently my untitled recursion book. But


00:27:56.280 --> 00:28:03.600
yeah, I gave a talk at North Bay Python, I believe in 2018 or 2019. That was an introduction


00:28:03.600 --> 00:28:09.160
to recursion. And recursion is one of those things where a lot of people find it very


00:28:09.160 --> 00:28:15.280
intimidating, or even just outright magical. And it's, it's this thing that seems to be


00:28:15.280 --> 00:28:20.440
like only for advanced programmers or something like that. But I started taking a look at


00:28:20.440 --> 00:28:21.440
it.


00:28:21.440 --> 00:28:22.440
Programmers who make a mistake.


00:28:22.440 --> 00:28:23.440
Right, exactly.


00:28:23.440 --> 00:28:24.440
Accidentally.


00:28:24.440 --> 00:28:30.600
Yeah, just just for some general background. recursion is when you have a function that


00:28:30.600 --> 00:28:37.000
calls itself. And this is, it sounds like it won't work. And oftentimes it won't, you'll,


00:28:37.000 --> 00:28:41.880
get a sort of an infinite loop of recursive function calls and then it crashes your program.


00:28:41.880 --> 00:28:48.360
But there are recursive algorithms where this is a really handy technique and allows you to do


00:28:48.360 --> 00:28:53.080
really sophisticated things in in not that much code. However, a lot of people find it really


00:28:53.080 --> 00:28:58.840
confusing. But more than anything, I found that it's just poorly taught. Most people will probably


00:28:58.840 --> 00:29:05.000
learn this from a computer science professor, or they'll be studying it as a way to prepare for job


00:29:05.000 --> 00:29:08.920
interviews for the coding section. You know, there's a lot of times where people will be


00:29:08.920 --> 00:29:13.720
writing out an algorithm on a whiteboard and their interviewer will say like, okay, and now can you do


00:29:13.720 --> 00:29:21.080
the recursive version of this algorithm as a quick gotcha. But yeah, there's the short of it is I


00:29:21.080 --> 00:29:27.320
realized that a lot of times people don't really teach the concept of the call stack. And without


00:29:27.320 --> 00:29:32.840
explicitly knowing about what a call stack is and how it works. A lot of what recursion does kind of


00:29:32.840 --> 00:29:35.320
it just seems magical because you're missing this huge piece.


00:29:35.320 --> 00:29:38.120
I found out so many other things about this.


00:29:38.120 --> 00:29:41.640
I thought, "Hey, I could write a quick little tutorial on


00:29:41.640 --> 00:29:44.800
recursive functions and make a talk,"


00:29:44.800 --> 00:29:48.120
and then that just ballooned into a giant book now.


00:29:48.120 --> 00:29:50.020
>> That's how I end up with courses.


00:29:50.020 --> 00:29:52.320
I'm like, "Oh, that'd be neat little thing to play around with.


00:29:52.320 --> 00:29:54.360
Why have I spent the last month doing this?"


00:29:54.360 --> 00:29:59.640
>> Yes. I'm hoping to have this book probably done


00:29:59.640 --> 00:30:07.480
either at the end of this year or early next year in 2022. But yeah, so a book that just covers


00:30:07.480 --> 00:30:13.080
recursive algorithms, and and why people find recursion to be so intimidating and how it


00:30:13.080 --> 00:30:19.560
really isn't. And even how oftentimes, it's actually not the best technique to use. You just


00:30:19.560 --> 00:30:24.600
want to write straightforward, simple code. But if you really want to show off how smart you are,


00:30:25.320 --> 00:30:27.640
and annoy your coworkers that way.


00:30:27.640 --> 00:30:29.760
Recursions also really create for that.


00:30:29.760 --> 00:30:32.760
>> What I like about it is if you have hierarchical data,


00:30:32.760 --> 00:30:34.960
it matches that really cleanly.


00:30:34.960 --> 00:30:35.320
>> Yes.


00:30:35.320 --> 00:30:36.600
>> You want to traverse a tree,


00:30:36.600 --> 00:30:38.040
but in a real simple way,


00:30:38.040 --> 00:30:41.960
you want to work with an algorithm that is iterative in the sense,


00:30:41.960 --> 00:30:44.240
the previous step naturally,


00:30:44.240 --> 00:30:45.720
the answer that leads to the next one,


00:30:45.720 --> 00:30:46.900
those types of things.


00:30:46.900 --> 00:30:48.920
It's a super elegant answer.


00:30:48.920 --> 00:30:52.620
>> Yeah. I found that recursive algorithms are really great when


00:30:52.620 --> 00:30:58.140
your problem has a tree-like structure and also involves backtracking.


00:30:58.140 --> 00:31:04.020
Otherwise, there's probably, you probably just need a loop or some iterative way of


00:31:04.020 --> 00:31:05.020
solving it.


00:31:05.020 --> 00:31:09.920
You can also come up with a cool joke like the one we had on episode 236.


00:31:09.920 --> 00:31:12.340
There are so many recursive jokes.


00:31:12.340 --> 00:31:17.100
I actually opened up my talk at North Bay Python with just like, okay, we just got to


00:31:17.100 --> 00:31:21.860
get that out of our systems, do the whole, you know, in order to learn about recursion,


00:31:21.860 --> 00:31:24.020
we first have to learn about recursion,


00:31:24.020 --> 00:31:27.140
these jokes that we've heard like millions of times.


00:31:27.140 --> 00:31:30.180
- Yeah, people can check out the little cartoon graphic


00:31:30.180 --> 00:31:32.220
thing on episode 236.


00:31:32.220 --> 00:31:33.580
- Yeah, I was gonna ask you if you're--


00:31:33.580 --> 00:31:35.420
- Brian, you got anything you wanna just throw out there


00:31:35.420 --> 00:31:36.300
at the end?


00:31:36.300 --> 00:31:39.860
- No, I've just been working a lot.


00:31:39.860 --> 00:31:42.420
I was just, one question, I was just gonna think


00:31:42.420 --> 00:31:44.780
that maybe Al's book was about how to write a book


00:31:44.780 --> 00:31:45.620
about recursion.


00:31:45.620 --> 00:31:46.740
(laughing)


00:31:46.740 --> 00:31:49.540
- The Making of is something that I've also been thinking


00:31:49.540 --> 00:31:50.620
of after I've published it.


00:31:50.620 --> 00:31:54.940
I feel like a book on meta classes and meta programming might be very relevant.


00:31:54.940 --> 00:31:56.900
And that's all right.


00:31:56.900 --> 00:31:58.900
I got a couple of things to cover from my extras.


00:31:58.900 --> 00:31:59.300
Okay.


00:31:59.300 --> 00:32:02.100
First I had talked about, Oh my posh.


00:32:02.100 --> 00:32:08.980
Oh my posh, which I think is a really cool, like, Oh my Z shell type of thing, but for.


00:32:08.980 --> 00:32:10.060
PowerShell.


00:32:10.060 --> 00:32:13.060
And if you use the new windows terminal and you get the new PowerShell


00:32:13.060 --> 00:32:17.060
seven and set that to be the default, then you get these really beautiful,


00:32:17.060 --> 00:32:20.460
nice prompts and auto-complete and all those kinds of things.


00:32:20.460 --> 00:32:21.820
So those are really neat.


00:32:21.820 --> 00:32:25.400
People can check that out for all the posh shell stuff.


00:32:25.400 --> 00:32:30.440
But someone was asking for something that would do a thing that is really cool.


00:32:30.440 --> 00:32:33.440
Like what if when I,


00:32:33.440 --> 00:32:36.040
and by the way, because we gave it a shout out,


00:32:36.040 --> 00:32:40.200
I was dreaming of something that would automatically activate


00:32:40.200 --> 00:32:43.700
virtual environments when I CD'd into a structure


00:32:43.700 --> 00:32:48.260
that contained in the tree somewhere a virtual environment, which is cool.


00:32:48.260 --> 00:32:50.700
So they dug around and said,


00:32:50.700 --> 00:32:54.780
I found this thing called posh-direnv, which does that.


00:32:54.780 --> 00:32:57.520
So as you change into the directory,


00:32:57.520 --> 00:33:01.620
it will automatically activate virtual environments.


00:33:01.620 --> 00:33:02.220
>> Nice.


00:33:02.220 --> 00:33:03.300
>> Nice.


00:33:03.300 --> 00:33:05.060
>> Yeah. So that's pretty neat.


00:33:05.060 --> 00:33:07.300
So people can check that out as a follow-up.


00:33:07.300 --> 00:33:09.860
Another thing, one of our listeners,


00:33:09.860 --> 00:33:12.740
Einstein Vincent, I believe,


00:33:12.740 --> 00:33:14.180
was the one who sent it over. Thank you for that.


00:33:14.180 --> 00:33:15.500
Just said, "Hey, quick shout out.


00:33:15.500 --> 00:33:17.580
Your show has been super helpful to us.


00:33:17.580 --> 00:33:20.300
that's been inspiring a bunch of us scientists.


00:33:20.300 --> 00:33:23.180
We're here in Iceland, and I believe also at Harvard,


00:33:23.180 --> 00:33:24.340
if I recall correctly.


00:33:24.340 --> 00:33:28.700
And they now published an article using Python,


00:33:28.700 --> 00:33:32.380
a scalable method of determining physiological endotypes


00:33:32.380 --> 00:33:35.340
for basically a sleep apnea study


00:33:35.340 --> 00:33:37.300
of trying to turn this into more of a continuum


00:33:37.300 --> 00:33:39.060
rather than yes or no, you have,


00:33:39.060 --> 00:33:41.860
yes or no, you yes, do, or don't have sleep apnea.


00:33:41.860 --> 00:33:44.180
So really cool just to see listeners listening to the show,


00:33:44.180 --> 00:33:45.180
using some of the packages


00:33:45.180 --> 00:33:47.020
and doing cool stuff that help people.


00:33:47.020 --> 00:33:48.500
- Yeah, that's good.


00:33:48.500 --> 00:33:51.060
- One more follow-up, two, three more follow-ups actually,


00:33:51.060 --> 00:33:52.700
but next one, really quickly,


00:33:52.700 --> 00:33:57.060
I've been having such a challenge with email for two years


00:33:57.060 --> 00:34:01.500
and I have finally, I think, solved it, the beast,


00:34:01.500 --> 00:34:02.580
I believe.


00:34:02.580 --> 00:34:06.060
I have had hundreds of emails from years ago


00:34:06.060 --> 00:34:09.020
that needed action and finally I've gotten back


00:34:09.020 --> 00:34:11.840
to almost everybody down to just a handful of emails


00:34:11.840 --> 00:34:12.680
and I'll have them all done.


00:34:12.680 --> 00:34:14.620
But anyway, I wanna recommend two email clients,


00:34:14.620 --> 00:34:16.520
one for the Mac is Newton, pretty cool,


00:34:16.520 --> 00:34:18.760
And then I'm gonna give superhuman a try,


00:34:18.760 --> 00:34:21.780
but it takes a while to get set up on that.


00:34:21.780 --> 00:34:23.780
If you're out there struggling with email, check those out.


00:34:23.780 --> 00:34:26.880
And so we've heard about cloud computing.


00:34:26.880 --> 00:34:28.780
That's where you might run your program in the cloud.


00:34:28.780 --> 00:34:30.440
You've heard about virtual environment,


00:34:30.440 --> 00:34:31.620
or sorry, virtual machines.


00:34:31.620 --> 00:34:33.060
That's where you might fire up a computer


00:34:33.060 --> 00:34:36.860
that runs in a container or a virtual hypervisor.


00:34:36.860 --> 00:34:38.180
And then you can interact with that


00:34:38.180 --> 00:34:39.560
in like its own little way.


00:34:39.560 --> 00:34:40.620
But Microsoft, apparently,


00:34:40.620 --> 00:34:42.740
I was just reading like 15 minutes before we started.


00:34:42.740 --> 00:34:43.860
I thought I'd throw this in there.


00:34:43.860 --> 00:34:46.100
They just revealed not just Windows 11,


00:34:46.100 --> 00:34:51.000
but Windows 365, which is basically you buy Windows


00:34:51.000 --> 00:34:52.440
and the thing hosted in the cloud,


00:34:52.440 --> 00:34:53.520
so you just like, I don't know,


00:34:53.520 --> 00:34:54.800
web browser to it or something,


00:34:54.800 --> 00:34:56.900
and then you have a computer with all your files


00:34:56.900 --> 00:34:57.860
that's instantly on.


00:34:57.860 --> 00:34:59.580
So, I don't know, I thought that was kind of interesting,


00:34:59.580 --> 00:35:00.420
throw that out there.


00:35:00.420 --> 00:35:01.920
- Yeah, it's like Office 365


00:35:01.920 --> 00:35:03.920
except the entire operating system.


00:35:03.920 --> 00:35:06.440
- The entire computer with all your files saved there,


00:35:06.440 --> 00:35:07.320
yeah, exactly.


00:35:07.320 --> 00:35:09.100
Probably expensive, I have no idea.


00:35:09.100 --> 00:35:13.200
Last thing, we talked about Flock No, right?


00:35:13.200 --> 00:35:15.380
We talked about Flock and the vanishing


00:35:15.380 --> 00:35:18.260
third-party cookies and the stuff that Google is trying to do.


00:35:18.260 --> 00:35:21.500
And then remember that brand new point that they received significant feedback


00:35:21.500 --> 00:35:23.580
that was not totally positive for them.


00:35:23.580 --> 00:35:24.360
Yeah.


00:35:24.360 --> 00:35:28.500
So, you know, parallel to that, I think is really interesting is that


00:35:28.500 --> 00:35:32.140
Apple also had their do not track thing that they put on their phone, which.


00:35:32.140 --> 00:35:35.580
Is fine, but I think it, it just needs to be way more than that, but yeah.


00:35:35.580 --> 00:35:36.340
So they have that.


00:35:36.340 --> 00:35:40.580
And would you be surprised that only 25% of the people said, yes, please track me.


00:35:40.580 --> 00:35:43.940
I'm actually surprised that 25% of the people said yes.


00:35:44.060 --> 00:35:47.400
Like, if it's over 5%, it's blowing my mind, right?


00:35:47.400 --> 00:35:48.240
Like, yeah, please.


00:35:48.240 --> 00:35:49.820
- Who's saying yes?


00:35:49.820 --> 00:35:51.000
It's, uh.


00:35:51.000 --> 00:35:51.840
- Exactly.


00:35:51.840 --> 00:35:52.840
So here's an article.


00:35:52.840 --> 00:35:56.080
Facebook and its advertisers are panicking


00:35:56.080 --> 00:35:58.640
as the majority of iPhone users opt out of tracking.


00:35:58.640 --> 00:36:02.280
And I saw that 20% of ad spend is now moved away from iPhone


00:36:02.280 --> 00:36:04.600
and towards Android because Android doesn't,


00:36:04.600 --> 00:36:06.000
you know, they're happy to track you.


00:36:06.000 --> 00:36:06.840
That's Google.


00:36:06.840 --> 00:36:07.660
- Yeah.


00:36:07.660 --> 00:36:09.960
- But also, just, I think it's very meta and funny.


00:36:09.960 --> 00:36:13.720
So I have my VPN that has a ad blocker plus cyber,


00:36:13.720 --> 00:36:17.280
like basically virus malware detector at the network layer.


00:36:17.280 --> 00:36:18.720
Notice there's a big gap in me


00:36:18.720 --> 00:36:20.120
showing you this article up here.


00:36:20.120 --> 00:36:22.920
That's, I was trying to show me the ad


00:36:22.920 --> 00:36:24.840
about the advertisers and my network,


00:36:24.840 --> 00:36:27.440
my VPN is blocking it, which I just love it.


00:36:27.440 --> 00:36:29.600
So anyway, those are all the things


00:36:29.600 --> 00:36:31.280
that I had to share there.


00:36:31.280 --> 00:36:32.600
Al, you got anything else you wanna throw out there


00:36:32.600 --> 00:36:33.440
for everyone?


00:36:33.440 --> 00:36:36.080
- Yeah, outside of the books,


00:36:36.080 --> 00:36:38.360
I'm also working on my open source project


00:36:38.360 --> 00:36:39.680
called PyAutoGUI.


00:36:39.680 --> 00:36:42.480
This is a GUI automation module for Python


00:36:42.480 --> 00:36:45.000
where it's a module that lets your Python scripts


00:36:45.000 --> 00:36:46.480
control the mouse and keyboard.


00:36:46.480 --> 00:36:49.080
So if you have some software that you want to automatically


00:36:49.080 --> 00:36:50.920
click and type things into,


00:36:50.920 --> 00:36:53.680
you can write a script using PyAutoGUI to do that.


00:36:53.680 --> 00:36:55.840
It works on Python 2 and 3,


00:36:55.840 --> 00:36:59.440
and also on Windows, Mac OS, and Linux.


00:36:59.440 --> 00:37:01.240
I feel like I've been neglecting this project


00:37:01.240 --> 00:37:02.380
for the longest time,


00:37:02.380 --> 00:37:04.120
but more and more people are using it.


00:37:04.120 --> 00:37:07.480
So I really want to start adding more and more features


00:37:07.480 --> 00:37:10.160
to bring it up to speed with a lot of other


00:37:10.160 --> 00:37:12.520
GUI automation libraries that are out there.


00:37:12.520 --> 00:37:15.120
So if anybody is interested in contributing,


00:37:15.120 --> 00:37:19.320
I have the GitHub link and you can also just Google


00:37:19.320 --> 00:37:22.880
for PyAutoGUI to find more information about that.


00:37:22.880 --> 00:37:24.560
- That's cool, I found out by DuckDuck,


00:37:24.560 --> 00:37:25.920
Googling with DuckDuckGo.


00:37:25.920 --> 00:37:27.200
- Yes.


00:37:27.200 --> 00:37:31.080
- I still have a problem saying Google as the verb.


00:37:31.080 --> 00:37:32.520
- No, I do too, all the time.


00:37:32.520 --> 00:37:36.120
- I finally got over using guys as a general neutral pronoun


00:37:36.120 --> 00:37:38.680
but now I still have problems saying Google all the time.


00:37:38.680 --> 00:37:40.640
>> Yeah, it's all hard.


00:37:40.640 --> 00:37:42.400
By the way, notice over here.


00:37:42.400 --> 00:37:45.600
>> I still have trouble not telling people the MapQuest something.


00:37:45.600 --> 00:37:49.320
>> Yeah, I know. It's good except those little arrows to


00:37:49.320 --> 00:37:51.240
move each around on the map,


00:37:51.240 --> 00:37:54.040
the little bars on each side are so clunky.


00:37:54.040 --> 00:37:55.200
You got to print the thing out for


00:37:55.200 --> 00:37:57.600
like five pages and follow the pictures.


00:37:57.600 --> 00:37:59.960
Now, but so one thing I do want to give a quick shout out to


00:37:59.960 --> 00:38:02.720
the guys that read the docs, Eric and crew over there.


00:38:02.720 --> 00:38:05.080
They have an ad right here and it says,


00:38:05.080 --> 00:38:07.400
"Sponsored ads serve ethically."


00:38:07.400 --> 00:38:10.260
You know what that's based on not tracking and retargeting.


00:38:10.260 --> 00:38:13.740
That's just, hey, there's something to do with this Python project.


00:38:13.740 --> 00:38:17.000
So this ad has to do with the context of what is here.


00:38:17.000 --> 00:38:19.840
It's just it's relevant to the content I'm already looking at.


00:38:19.840 --> 00:38:21.340
Good old fashioned.


00:38:21.340 --> 00:38:22.340
Astounding.


00:38:22.340 --> 00:38:25.040
Just like magazines and newspapers and stuff like that.


00:38:25.040 --> 00:38:28.100
And it's not about finding hot singles in my local area.


00:38:28.100 --> 00:38:30.800
That's great.


00:38:30.800 --> 00:38:32.240
Exactly.


00:38:32.240 --> 00:38:33.000
All right.


00:38:33.000 --> 00:38:33.700
Cool.


00:38:33.700 --> 00:38:35.240
Yeah. Cool. Thanks.


00:38:35.240 --> 00:38:39.720
Thanks, Al, for joining us today. And Brian, as always, thanks for having me.


00:38:39.720 --> 00:38:41.640
Yeah, you bet. Thanks, everyone, for listening.


00:38:41.640 --> 00:38:46.280
Thanks for listening to Python Bytes. Follow the show on Twitter via @PythonBytes.


00:38:46.280 --> 00:38:52.200
That's Python Bytes as in B-Y-T-E-S. Get the full show notes over at PythonBytes.fm.


00:38:52.200 --> 00:38:57.320
If you have a news item we should cover, just visit PythonBytes.fm and click submit in the navbar.


00:38:57.320 --> 00:39:01.560
We're always on the lookout for sharing something cool. If you want to join us for the live recording,


00:39:01.560 --> 00:39:06.920
just visit the website and click "Livestream" to get notified of when our next episode goes live.


00:39:06.920 --> 00:39:11.240
That's usually happening at noon Pacific on Wednesdays over at YouTube.


00:39:11.240 --> 00:39:15.560
On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening


00:39:15.560 --> 00:39:18.440
and sharing this podcast with your friends and colleagues.

