
00:00:00.000 --> 00:00:04.500
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.500 --> 00:00:09.300
This is episode 151 recorded October 2nd, 2019.


00:00:09.300 --> 00:00:10.100
I'm Michael Kennedy.


00:00:10.100 --> 00:00:11.000
And I'm Brian Okken.


00:00:11.000 --> 00:00:13.300
And this episode is brought to you by DigitalOcean.


00:00:13.300 --> 00:00:15.600
Check them out at pythonbytes.fm/digitalocean.


00:00:15.600 --> 00:00:17.800
Get $50 credit for new users.


00:00:17.800 --> 00:00:18.800
More on that later.


00:00:18.800 --> 00:00:19.600
Brian, how are you doing?


00:00:19.600 --> 00:00:20.600
I'm really good.


00:00:20.600 --> 00:00:26.500
Super. We are on PDX Python Meetup West.


00:00:26.500 --> 00:00:28.800
PDX West Python Meetup, whatever you're calling it.


00:00:28.800 --> 00:00:29.700
Eve, aren't we?


00:00:29.700 --> 00:00:31.700
- Yeah, it's like just right around the corner.


00:00:31.700 --> 00:00:32.200
- Yeah.


00:00:32.200 --> 00:00:35.700
- Although it'll probably already have happened by the time this comes out.


00:00:35.700 --> 00:00:40.200
- Yeah, it may. It's going to be tight. So, well, I'm sure it went wonderfully.


00:00:40.200 --> 00:00:43.700
So, you got all the speakers lined up and everything.


00:00:43.700 --> 00:00:47.700
I'm really excited to have that as part of our community around here.


00:00:47.700 --> 00:00:51.700
Who knows? Maybe we can put it online somehow, but no plans for that, it sounds like.


00:00:51.700 --> 00:00:54.700
You know, I hear a lot about containers.


00:00:54.700 --> 00:00:58.140
And when I first heard of Docker and things like that,


00:00:58.140 --> 00:01:01.220
I thought Docker was,


00:01:01.220 --> 00:01:03.140
I thought they had created containers, right?


00:01:03.140 --> 00:01:04.660
Like they had come up with this idea


00:01:04.660 --> 00:01:06.180
of this other kind of isolation


00:01:06.180 --> 00:01:07.740
relative to say a virtual machine.


00:01:07.740 --> 00:01:09.340
And looking into it, it turns out


00:01:09.340 --> 00:01:10.460
that's not the only option.


00:01:10.460 --> 00:01:12.220
And they actually didn't even come up with it, right?


00:01:12.220 --> 00:01:14.340
They just bundled it up and packaged it nicely.


00:01:14.340 --> 00:01:16.760
- I think what Docker has done is very cool,


00:01:16.760 --> 00:01:20.900
but I have yet to find a use case where I needed it so far.


00:01:20.900 --> 00:01:23.140
And there are other options.


00:01:23.140 --> 00:01:26.460
and one of our friends of the show, Matt Lehman,


00:01:26.460 --> 00:01:31.100
has written an article called "Python Alternative to Docker."


00:01:31.100 --> 00:01:34.820
The article uses a tool called Shiv from LinkedIn,


00:01:34.820 --> 00:01:36.660
which is a hilarious name.


00:01:36.660 --> 00:01:40.300
We actually did mention it briefly on episode 114,


00:01:40.300 --> 00:01:41.860
but I didn't know much about it.


00:01:41.860 --> 00:01:44.060
And so this is kind of a neat article.


00:01:44.060 --> 00:01:47.660
It talks about that Shiv uses a zip app.


00:01:47.660 --> 00:01:49.380
And I think we've talked about that before,


00:01:49.380 --> 00:01:51.620
that you can, and I think there's a few tools


00:01:51.620 --> 00:01:52.700
that utilize that.


00:01:52.700 --> 00:01:54.420
- Right, things like pex and stuff, yeah.


00:01:54.420 --> 00:01:56.900
- Yeah, you can zip up a Python application


00:01:56.900 --> 00:01:58.660
with all its dependencies.


00:01:58.660 --> 00:02:01.780
And I don't think that at that point


00:02:01.780 --> 00:02:03.900
it includes Python, does it?


00:02:03.900 --> 00:02:04.780
- I don't think so.


00:02:04.780 --> 00:02:06.900
And that was actually super disappointing to me


00:02:06.900 --> 00:02:08.980
that it didn't just deliver a thing that ran.


00:02:08.980 --> 00:02:10.260
You still have to have Python,


00:02:10.260 --> 00:02:13.060
but it's like you don't have to install the app.


00:02:13.060 --> 00:02:13.900
As long as you have Python,


00:02:13.900 --> 00:02:15.100
you can run it was my understanding.


00:02:15.100 --> 00:02:16.860
- This article is talking about,


00:02:16.860 --> 00:02:18.040
and this totally makes sense.


00:02:18.040 --> 00:02:21.480
You've got a continuous integration build pipeline


00:02:21.480 --> 00:02:23.380
where you're making changes


00:02:23.380 --> 00:02:25.740
and maybe you're updating dependencies,


00:02:25.740 --> 00:02:30.200
but on the deployment machine, you're not deploying,


00:02:30.200 --> 00:02:32.460
you don't have to update Python all the time.


00:02:32.460 --> 00:02:34.680
You're just updating the thing that you package.


00:02:34.680 --> 00:02:36.860
And that's kind of a neat thing about Shiv


00:02:36.860 --> 00:02:38.360
is all your dependencies,


00:02:38.360 --> 00:02:39.560
maybe you're updating dependencies


00:02:39.560 --> 00:02:41.620
or maybe you're updating your own application


00:02:41.620 --> 00:02:43.400
or fixing bugs or whatever,


00:02:43.400 --> 00:02:45.780
that can all be put together


00:02:45.780 --> 00:02:48.540
and tested as one deliverable unit.


00:02:48.540 --> 00:02:52.940
and then just that can be updated to a server machine.


00:02:52.940 --> 00:02:54.380
But then all the steps of like,


00:02:54.380 --> 00:02:57.040
okay, that sounds in concept, that sounds great,


00:02:57.040 --> 00:02:58.980
but what are all the steps I have to go through


00:02:58.980 --> 00:03:00.420
to actually get that done?


00:03:00.420 --> 00:03:01.460
And Matt has done that.


00:03:01.460 --> 00:03:03.300
He just basically walked through all the steps


00:03:03.300 --> 00:03:04.820
to try to get that done.


00:03:04.820 --> 00:03:06.620
And I thought it was really great.


00:03:06.620 --> 00:03:08.600
He does talk about packaging a little bit


00:03:08.600 --> 00:03:11.680
because you kind of have to talk about packaging


00:03:11.680 --> 00:03:13.700
when you're talking about deployment.


00:03:13.700 --> 00:03:14.980
So this is kind of fun.


00:03:14.980 --> 00:03:16.600
He does do a shout out to,


00:03:16.600 --> 00:03:19.720
If you didn't use Shiv or Docker, what would you do?


00:03:19.720 --> 00:03:22.760
What are all the little steps you'd have to do?


00:03:22.760 --> 00:03:24.960
Which just makes it sound like something


00:03:24.960 --> 00:03:26.960
that you'd either hire somebody else to do.


00:03:26.960 --> 00:03:28.280
(laughing)


00:03:28.280 --> 00:03:29.520
- I'm not doing that.


00:03:29.520 --> 00:03:30.960
- Yeah, but he also does shout out


00:03:30.960 --> 00:03:33.740
to Platform as a Service, things like Heroku


00:03:33.740 --> 00:03:35.080
and Python Anywhere.


00:03:35.080 --> 00:03:37.600
And I think that's cool that there's other options.


00:03:37.600 --> 00:03:39.440
Like if you wanted to throw money at it,


00:03:39.440 --> 00:03:40.960
you just use one of these.


00:03:40.960 --> 00:03:43.160
And these actually aren't that expensive.


00:03:43.160 --> 00:03:46.840
If you're trying to just save time, that's a fine trade-off.


00:03:46.840 --> 00:03:49.720
But if you want to do this, this is a neat idea.


00:03:49.720 --> 00:03:51.940
Also, Docker's a big hammer.


00:03:51.940 --> 00:03:55.880
I mean, a lot of people love it and that's great,


00:03:55.880 --> 00:03:57.600
but bring up with a lot of people


00:03:57.600 --> 00:04:00.280
that you want to try to put Docker, deploy with Docker.


00:04:00.280 --> 00:04:01.920
And if it's a thing like this,


00:04:01.920 --> 00:04:03.600
like you're just deploying an application,


00:04:03.600 --> 00:04:04.600
that might be overkill.


00:04:04.600 --> 00:04:06.320
- It seems like it's a middle ground, right?


00:04:06.320 --> 00:04:08.840
Like I'm packing up not just my Python code,


00:04:08.840 --> 00:04:10.440
but my Python dependencies


00:04:10.440 --> 00:04:12.440
and a lot of the setup around that.


00:04:12.440 --> 00:04:14.720
You still have to have Python there, but beyond that, right,


00:04:14.720 --> 00:04:17.080
it's like not really much to it.


00:04:17.080 --> 00:04:18.640
If you need to depend on other things,


00:04:18.640 --> 00:04:20.600
like I need Redis running on this port


00:04:20.600 --> 00:04:23.160
and I need Postgres like that,


00:04:23.160 --> 00:04:25.960
and I also want this other thing in Linux doing something,


00:04:25.960 --> 00:04:29.320
like all of a sudden, then you've outgrown


00:04:29.320 --> 00:04:31.880
bundling Python more cleverly,


00:04:31.880 --> 00:04:32.720
but if you don't need that,


00:04:32.720 --> 00:04:34.360
it sounds like a pretty cool way to do it.


00:04:34.360 --> 00:04:35.880
- Yeah, like in this example,


00:04:35.880 --> 00:04:39.560
the example that Matt gives is a Django application


00:04:39.560 --> 00:04:42.920
that uses a Gunicorn or G-Unicorn.


00:04:42.920 --> 00:04:45.880
So that all those dependencies are bundled together.


00:04:45.880 --> 00:04:48.000
It's not like a special kind of Django app


00:04:48.000 --> 00:04:50.440
with a huge backend that's necessary.


00:04:50.440 --> 00:04:52.960
But although, I mean, Django uses a database,


00:04:52.960 --> 00:04:53.800
so I'm not sure.


00:04:53.800 --> 00:04:55.520
- Yeah, yeah, interesting.


00:04:55.520 --> 00:04:57.200
While you're talking about Docker,


00:04:57.200 --> 00:04:59.320
I'm a fan of Docker in general,


00:04:59.320 --> 00:05:02.440
but kind of like you, I don't do a ton with it day to day.


00:05:02.440 --> 00:05:05.400
I just, the stuff I do is just not that complicated.


00:05:05.400 --> 00:05:07.880
But I recently read an article in ZDNet,


00:05:07.880 --> 00:05:12.880
that site actually still exists, apparently.


00:05:12.880 --> 00:05:15.080
And it actually says,


00:05:15.080 --> 00:05:17.480
this is surprising to me,


00:05:17.480 --> 00:05:18.760
sort of like I was surprised when GitHub got acquired.


00:05:18.760 --> 00:05:21.840
I realized afterwards,


00:05:21.840 --> 00:05:23.200
like, "Oh, they're actually financially in deep trouble,


00:05:23.200 --> 00:05:25.520
and maybe this is good rather than just going away."


00:05:25.520 --> 00:05:28.080
The article says, "Docker is in deep trouble.


00:05:28.080 --> 00:05:30.160
A leaked internal memo,


00:05:30.160 --> 00:05:31.480
the Docker CEO reveals


00:05:31.480 --> 00:05:32.800
that the troubled company is looking for more money."


00:05:32.800 --> 00:05:35.760
And they talk about pushing through with perseverance


00:05:34.000 --> 00:05:38.140
despite lack of clarity on the future and stuff like that.


00:05:38.140 --> 00:05:40.320
So anyway, just something to think about.


00:05:40.320 --> 00:05:41.880
- Definitely, and I read that


00:05:41.880 --> 00:05:43.960
and I forgot that Docker was a company.


00:05:43.960 --> 00:05:45.120
- Yeah, exactly.


00:05:45.120 --> 00:05:46.520
And I don't even know if it matters


00:05:46.520 --> 00:05:48.360
if Docker as a company goes away.


00:05:48.360 --> 00:05:50.640
I mean, there are parts of Docker that are important,


00:05:50.640 --> 00:05:52.860
like the registry and stuff like that,


00:05:52.860 --> 00:05:54.120
but you could totally use Docker


00:05:54.120 --> 00:05:56.160
if you just had the tools, but still,


00:05:56.160 --> 00:05:58.780
it's, I don't know, it's just always interesting


00:05:58.780 --> 00:06:00.960
to see how this is playing out


00:06:00.960 --> 00:06:02.000
and something you want to consider


00:06:02.000 --> 00:06:04.080
if you're gonna bet your project on it, right?


00:06:04.080 --> 00:06:04.920
- Yeah, definitely.


00:06:04.920 --> 00:06:08.640
- So I have a bit of a theme for this week as well,


00:06:08.640 --> 00:06:11.380
and it has to do with helping scientists


00:06:11.380 --> 00:06:13.920
do Python stuff a little bit better.


00:06:13.920 --> 00:06:15.560
So this first thing I wanna talk about


00:06:15.560 --> 00:06:18.560
is an article that's kind of a how-to


00:06:18.560 --> 00:06:21.840
from this woman named Anna Nowogrodzki.


00:06:21.840 --> 00:06:22.760
I'm gonna go with that.


00:06:22.760 --> 00:06:24.520
Sorry if I messed up your name, Anna.


00:06:24.520 --> 00:06:26.760
And it comes to us by a recommendation


00:06:26.760 --> 00:06:28.380
from a listener named Jason Thomas.


00:06:28.380 --> 00:06:29.560
Thanks, Jason.


00:06:29.560 --> 00:06:33.120
And the title is, "How to Support Open Source Software


00:06:33.120 --> 00:06:34.400
and Stay Sane."


00:06:34.400 --> 00:06:35.240
- Nice.


00:06:35.240 --> 00:06:37.480
- And this is referring to scientists


00:06:37.480 --> 00:06:40.920
who develop libraries like NumPy


00:06:40.920 --> 00:06:43.180
or some form of Scikit-Learn or something like that,


00:06:43.180 --> 00:06:44.920
and then they release it to the world,


00:06:44.920 --> 00:06:46.200
and then all of a sudden,


00:06:46.200 --> 00:06:48.300
they've got all this software development work


00:06:48.300 --> 00:06:51.480
and 100 GitHub issues, they got a review,


00:06:51.480 --> 00:06:53.440
and they're like, "I was just trying to give back


00:06:53.440 --> 00:06:55.560
"a little bit, what just happened?"


00:06:55.560 --> 00:06:58.640
So the article has some interesting quotes.


00:06:58.640 --> 00:07:00.300
So I'm going to do a little bit of quoting from it,


00:07:00.300 --> 00:07:02.280
because I think it's pretty revealing.


00:07:02.280 --> 00:07:04.320
Anyway, it says, "The premise of the idol


00:07:04.320 --> 00:07:06.840
is that releasing lab-built, open-source software


00:07:06.840 --> 00:07:09.960
involves mountains of unforeseen work for the developers."


00:07:09.960 --> 00:07:10.480
Right?


00:07:10.480 --> 00:07:11.820
You think you're done when you release it,


00:07:11.820 --> 00:07:13.000
and it kind of starts.


00:07:13.000 --> 00:07:16.560
But it opens up saying, "On the 10th of April,


00:07:16.560 --> 00:07:18.520
astrophysicists announced that they


00:07:18.520 --> 00:07:21.240
had captured the first ever image of a black hole.


00:07:21.240 --> 00:07:25.000
This was exhilarating news, but none of the Giddy headlines,


00:07:25.000 --> 00:07:27.040
other than us, mentioned that the image would not


00:07:27.040 --> 00:07:29.240
have been possible without open source software.


00:07:29.240 --> 00:07:31.680
And the image was created by Matt Plotlib,


00:07:31.680 --> 00:07:33.720
a Python library for graphing data,


00:07:33.720 --> 00:07:35.400
as well as other components


00:07:35.400 --> 00:07:37.760
of the open source Python ecosystem.


00:07:37.760 --> 00:07:38.920
Here's where it gets interesting.


00:07:38.920 --> 00:07:40.080
Just five days later,


00:07:40.080 --> 00:07:42.920
the US National Science Foundation, the NSF,


00:07:42.920 --> 00:07:45.960
rejected a grant proposal to support that ecosystem,


00:07:45.960 --> 00:07:48.840
saying that the software lacked sufficient impact.


00:07:48.840 --> 00:07:50.840
(laughing)


00:07:50.840 --> 00:07:52.480
- What even?


00:07:52.480 --> 00:07:53.320
- What even, right?


00:07:53.320 --> 00:07:55.200
So like I said, it's kind of a how-to.


00:07:55.200 --> 00:07:57.420
It talks about where you're as a scientist,


00:07:57.420 --> 00:08:00.820
if you're creating software like Matplotlib or something,


00:08:00.820 --> 00:08:02.140
where do you go to get funding?


00:08:02.140 --> 00:08:03.740
Where have people been turned down?


00:08:03.740 --> 00:08:04.460
What has worked?


00:08:04.460 --> 00:08:05.100
And so on.


00:08:05.100 --> 00:08:08.900
It also talks a lot about using some software development,


00:08:08.900 --> 00:08:13.260
software engineering techniques for having successful open


00:08:13.260 --> 00:08:16.500
source projects that grow without killing you.


00:08:16.500 --> 00:08:17.180
It's pretty good.


00:08:17.180 --> 00:08:20.420
It talks about the challenges of not knowing, as a scientist,


00:08:20.420 --> 00:08:24.140
how you might not have fluency with Git.


00:08:24.140 --> 00:08:26.260
you might not have a continuous integration.


00:08:26.260 --> 00:08:27.860
Unit testing might not be a thing


00:08:27.860 --> 00:08:30.220
that you are super skilled in.


00:08:30.220 --> 00:08:34.100
And it mentions places like the eScience Institute


00:08:34.100 --> 00:08:35.660
at the University of Washington,


00:08:35.660 --> 00:08:37.300
the software carpentry workshops,


00:08:37.300 --> 00:08:40.700
places like that where folks can go get that training.


00:08:40.700 --> 00:08:43.420
And then also talks a little bit about


00:08:43.420 --> 00:08:44.980
when do you keep your software going


00:08:44.980 --> 00:08:46.740
and when do you decide like,


00:08:46.740 --> 00:08:48.900
it's obsolete, we're not gonna work on it anymore,


00:08:48.900 --> 00:08:50.220
what else are we gonna go build?


00:08:50.220 --> 00:08:51.740
So if you're a scientist out there


00:08:51.740 --> 00:08:54.260
or you work with scientists, you wanna help them


00:08:54.260 --> 00:08:57.520
get rolling with Python and releasing their projects


00:08:57.520 --> 00:08:59.260
in a way that they'll stay sane,


00:08:59.260 --> 00:09:00.540
check that out, I think it's pretty good.


00:09:00.540 --> 00:09:01.900
- It's a continuous problem.


00:09:01.900 --> 00:09:03.640
- Yeah, it is, and some of the recommendations


00:09:03.640 --> 00:09:06.260
are things like make sure you have continuous integration,


00:09:06.260 --> 00:09:07.460
make sure you have version control,


00:09:07.460 --> 00:09:08.660
make sure you have testing,


00:09:08.660 --> 00:09:11.860
and one that I really liked was that you should focus


00:09:11.860 --> 00:09:14.620
on code readability over peak performance.


00:09:14.620 --> 00:09:15.700
- Oh, definitely, always.


00:09:15.700 --> 00:09:17.420
- Right, yeah, 'cause you're gonna have to fix bugs.


00:09:17.420 --> 00:09:20.620
And I had a friend who, so I have a friend,


00:09:20.620 --> 00:09:22.660
who had this saying that was really interesting,


00:09:22.660 --> 00:09:27.180
that debugging software is harder than writing software,


00:09:27.180 --> 00:09:28.580
generally speaking.


00:09:28.580 --> 00:09:31.300
So if you write software at the edge of the complexity


00:09:31.300 --> 00:09:34.380
that you can handle, you probably can't debug it.


00:09:34.380 --> 00:09:36.500
So you need to step it back a notch,


00:09:36.500 --> 00:09:38.780
take it a little bit simpler, and then when it goes wrong,


00:09:38.780 --> 00:09:40.020
you could still deal with it.


00:09:40.020 --> 00:09:40.960
I like that saying.


00:09:40.960 --> 00:09:42.620
So before we get to the next one, though,


00:09:42.620 --> 00:09:44.540
let me tell you about DigitalOcean.


00:09:44.540 --> 00:09:47.500
So DigitalOcean, all of our infrastructure


00:09:47.500 --> 00:09:49.780
runs there when you get your MP3s,


00:09:49.780 --> 00:09:51.540
that you hear our voices on,


00:09:51.540 --> 00:09:54.020
those came through a whole bunch of stuff


00:09:54.020 --> 00:09:55.660
that's happening over at DigitalOcean.


00:09:55.660 --> 00:09:57.940
And they have two new services


00:09:57.940 --> 00:09:59.380
that I've been telling you all about for a little while,


00:09:59.380 --> 00:10:00.500
but I'm gonna keep telling you about it


00:10:00.500 --> 00:10:01.340
because they're good.


00:10:01.340 --> 00:10:03.820
If you wanna use MySQL or Redis,


00:10:03.820 --> 00:10:06.500
they now have those as a service right there.


00:10:06.500 --> 00:10:08.020
Just go flip a switch and turn them on.


00:10:08.020 --> 00:10:11.540
That's in addition to Postgres as a service as well.


00:10:11.540 --> 00:10:12.740
So definitely coming along,


00:10:12.740 --> 00:10:14.220
speaking of the software as a service


00:10:14.220 --> 00:10:16.000
over at the DigitalOcean side,


00:10:16.000 --> 00:10:18.580
I'm still a fan of fire me up a VM


00:10:18.580 --> 00:10:20.340
and install some stuff and let it roar,


00:10:20.340 --> 00:10:21.860
but that's all good.


00:10:21.860 --> 00:10:24.540
Check them out at pythonbytes.fm/digitalocean,


00:10:24.540 --> 00:10:26.420
get $50 credit for a new user,


00:10:26.420 --> 00:10:28.620
and they're doing good work, so we can recommend them.


00:10:28.620 --> 00:10:29.460
- Nice.


00:10:29.460 --> 00:10:33.140
- So you found another license in addition to MIT or GNU?


00:10:33.140 --> 00:10:33.980
- Yes.


00:10:33.980 --> 00:10:34.800
- GPL?


00:10:34.800 --> 00:10:35.640
- I don't know what to make of this,


00:10:35.640 --> 00:10:38.740
so I wanted to bring it up just to hear your thoughts as well.


00:10:38.740 --> 00:10:40.740
So there's a license,


00:10:40.740 --> 00:10:42.780
and I can't remember where I ran across it,


00:10:42.780 --> 00:10:45.420
but I think probably Twitter or something.


00:10:45.420 --> 00:10:47.340
I spend way too much time on Twitter.


00:10:47.340 --> 00:10:49.780
It's a license called the Hippocratic license,


00:10:49.780 --> 00:10:52.220
like the doctors have the Hippocratic oath of--


00:10:52.220 --> 00:10:54.300
- First promise to do no harm, things like that.


00:10:54.300 --> 00:10:56.740
- Yeah, I mean, I know it's way more than that,


00:10:56.740 --> 00:11:00.400
but that's all average people remember, like me.


00:11:00.400 --> 00:11:01.980
So this is interesting.


00:11:01.980 --> 00:11:06.460
It derives from the MIT license, and it adds a restriction.


00:11:06.460 --> 00:11:08.500
And the restriction reads,


00:11:08.500 --> 00:11:10.660
the software may not be used by individuals,


00:11:10.660 --> 00:11:12.620
corporations, governments, or other groups


00:11:12.620 --> 00:11:15.420
for systems or activities that actively


00:11:15.420 --> 00:11:20.100
knowingly endanger harm or otherwise threaten the physical mental economic or


00:11:20.100 --> 00:11:25.020
general well-being of individuals or groups in violation to the United


00:11:25.020 --> 00:11:29.780
Nations Universal Declaration of Human Rights." Interesting. Yeah. That's an


00:11:29.780 --> 00:11:33.580
interesting thing and I like I kind of like it. My first reaction is, "Wow that's


00:11:33.580 --> 00:11:38.300
great. You can say I'm gonna let everybody use my use this software but I


00:11:38.300 --> 00:11:43.100
don't want it to be used to harm people." Completely fair. But I don't know if


00:11:43.100 --> 00:11:47.340
anybody the people that are like intentionally arming people they don't


00:11:47.340 --> 00:11:51.900
care yeah do you really think people that are in this are really gonna go oh


00:11:51.900 --> 00:11:57.740
yeah we really can't use this software to guide our like you know does this


00:11:57.740 --> 00:12:02.580
cover military I don't know also a lot of this has to do with the human


00:12:02.580 --> 00:12:07.220
well-being that's up for debate and like a perspective right like what we had to


00:12:07.220 --> 00:12:11.060
start the war to help people or you know but obviously if you're on the other


00:12:11.060 --> 00:12:13.060
on the other side of that, you're not helping us.


00:12:13.060 --> 00:12:16.160
This is not helping, thank you for blowing us up.


00:12:16.160 --> 00:12:18.520
It's really hard to interpret, and I think you're right


00:12:18.520 --> 00:12:20.640
that it is very challenging because the folks


00:12:20.640 --> 00:12:22.920
who are most likely to abuse it, it's like the hackers


00:12:22.920 --> 00:12:25.560
are like, yeah, well, I was gonna steal that $10 million


00:12:25.560 --> 00:12:27.920
from the bank, but it's got the wrong license.


00:12:27.920 --> 00:12:31.000
It does still send a message that the person


00:12:31.000 --> 00:12:34.000
who works on the project cares, and it's not necessarily


00:12:34.000 --> 00:12:37.240
a negative, even if it's not super enforceable.


00:12:37.240 --> 00:12:40.520
I mean, I'm sure that things about the MIT license,


00:12:40.520 --> 00:12:44.040
people break. I don't even know what you've got to do to break it, but you probably could.


00:12:44.040 --> 00:12:48.560
I actually think it's an interesting thing to have around. I could definitely see people coming


00:12:48.560 --> 00:12:56.080
up with like different sorts of alternatives to the MIT license also, like not necessarily


00:12:56.080 --> 00:13:03.320
maybe this plus other stuff. I know people that intentionally would never work for the military,


00:13:03.320 --> 00:13:09.200
or work for a government or a military contractor because they don't want to. And I think it'd be


00:13:09.200 --> 00:13:13.520
completely legitimate for somebody to say, to have a license that said, "My open


00:13:13.520 --> 00:13:16.760
source software doesn't want to, I don't want that to work for these people


00:13:16.760 --> 00:13:22.520
either." So, but I haven't seen that. -Yeah, not putting any judgment on those things


00:13:22.520 --> 00:13:28.160
like working for Boeing or whatever. If you wanted a license like that, I think


00:13:28.160 --> 00:13:31.320
you could, you'd have to be more explicit. -It's a slippery slope, but the things


00:13:31.320 --> 00:13:34.840
that I kind of agree with, I'm like, "Oh yeah, well that's completely reasonable."


00:13:34.840 --> 00:13:35.680
- Yes, I know.


00:13:35.680 --> 00:13:38.440
- What if people like released software that said,


00:13:38.440 --> 00:13:40.780
this is okay as long as you don't live in Oregon


00:13:40.780 --> 00:13:42.480
because I don't like Oregonians.


00:13:42.480 --> 00:13:44.760
That would be lame, but people can do that.


00:13:44.760 --> 00:13:45.920
- It would definitely be lame.


00:13:45.920 --> 00:13:46.740
- Yeah.


00:13:46.740 --> 00:13:48.240
- That's why you set up a server in California


00:13:48.240 --> 00:13:49.840
and you just remote it.


00:13:49.840 --> 00:13:52.840
(laughing)


00:13:52.840 --> 00:13:55.680
- I'm vacationing permanently in Oregon.


00:13:55.680 --> 00:13:57.020
- Exactly, exactly.


00:13:57.020 --> 00:13:58.120
It's an interesting find.


00:13:58.120 --> 00:13:59.860
Yeah, so the next one, like I said,


00:13:59.860 --> 00:14:01.340
I'm on a bit of a theme here,


00:14:01.340 --> 00:14:05.940
And this next one is also about helping scientists do more,


00:14:05.940 --> 00:14:07.740
but more computational people.


00:14:07.740 --> 00:14:10.940
So this one is a real Python how-to


00:14:10.940 --> 00:14:15.380
on why and how to make the switch from MATLAB to Python.


00:14:15.380 --> 00:14:16.260
- Oh, this is great.


00:14:16.260 --> 00:14:18.820
- Yeah, it's really, really detailed,


00:14:18.820 --> 00:14:22.380
like standard real Python stuff.


00:14:22.380 --> 00:14:24.460
I'm not entirely sure how many pages it is,


00:14:24.460 --> 00:14:26.500
but it's quite a few.


00:14:26.500 --> 00:14:28.380
So it's a good thorough,


00:14:28.380 --> 00:14:30.140
it's almost like a mini book on this,


00:14:30.140 --> 00:14:33.980
as Dan and his crew are used to doing.


00:14:33.980 --> 00:14:36.360
So it basically compares the philosophy


00:14:36.360 --> 00:14:40.400
of MATLAB to Python, closed source to open source,


00:14:40.400 --> 00:14:41.600
things like that.


00:14:41.600 --> 00:14:44.920
Then it walks people through how to set up Python


00:14:44.920 --> 00:14:48.760
and then just, you use these computational libraries


00:14:48.760 --> 00:14:50.720
in MATLAB, here's your Python ones.


00:14:50.720 --> 00:14:53.400
You did these operations like graphing,


00:14:53.400 --> 00:14:54.680
here's how you do it in Python.


00:14:54.680 --> 00:14:57.160
And so if you're out there working on a team


00:14:57.160 --> 00:14:59.840
that uses MATLAB, and I know there are a ton of them


00:14:59.840 --> 00:15:05.440
I've worked with some even around here, a great team who was moving from MATLAB to Python,


00:15:05.440 --> 00:15:10.760
who I worked with for a few days, helping to speed that transition and things like that.


00:15:10.760 --> 00:15:16.040
There's a ton of these science-like groups, data science, not quite maybe data science,


00:15:16.040 --> 00:15:20.600
but on their way to that world, who I think would really benefit from that.


00:15:20.600 --> 00:15:26.000
I long ago even used MATLAB for a little bit of work at this research lab that spun off


00:15:26.000 --> 00:15:29.700
off into a company and did like wavelet decomposition


00:15:29.700 --> 00:15:31.940
of real time eye measurements.


00:15:31.940 --> 00:15:35.240
250 hertz per, you know, 250 samples a second,


00:15:35.240 --> 00:15:38.340
like wavelet decomposition is like a way harder


00:15:38.340 --> 00:15:42.020
Fourier transform, but it's funky stuff.


00:15:42.020 --> 00:15:45.380
Anyway, to do that, it was fine,


00:15:45.380 --> 00:15:48.060
but the little toolbox, I think it's called,


00:15:48.060 --> 00:15:50.140
the wavelet toolbox that you got,


00:15:50.140 --> 00:15:52.820
was $2,000 per user.


00:15:52.820 --> 00:15:56.180
That's a lot of money when you can pip install.


00:15:56.180 --> 00:15:57.620
Something that also does that.


00:15:57.620 --> 00:16:00.740
- So there's, MATLAB used a lot in our company as well,


00:16:00.740 --> 00:16:01.940
or there used to be.


00:16:01.940 --> 00:16:03.740
I don't know what it is now.


00:16:03.740 --> 00:16:05.020
But similar sorts of things.


00:16:05.020 --> 00:16:06.660
There's engineering.


00:16:06.660 --> 00:16:10.100
I'm more familiar with communication algorithms


00:16:10.100 --> 00:16:14.580
using FFTs and other communication transforms


00:16:14.580 --> 00:16:16.540
being mocked up in MATLAB


00:16:16.540 --> 00:16:19.760
before they go to like ASICs or something.


00:16:19.760 --> 00:16:20.980
Yeah, this is very common.


00:16:20.980 --> 00:16:23.620
And I'm really glad to see more and more people


00:16:23.620 --> 00:16:25.780
moving to Python from MATLAB.


00:16:25.780 --> 00:16:26.620
- Yeah, absolutely.


00:16:26.620 --> 00:16:28.500
I think it's just another one of those slices


00:16:28.500 --> 00:16:31.140
of the technology ecosystem where tons of people


00:16:31.140 --> 00:16:33.420
are leaving that space and coming over to Python


00:16:33.420 --> 00:16:36.220
because the great computational support that's developing.


00:16:36.220 --> 00:16:39.660
Things like JupyterLab and all the NumPy, SciPy


00:16:39.660 --> 00:16:40.500
type of things.


00:16:40.500 --> 00:16:42.500
Also in this article I learned that there apparently


00:16:42.500 --> 00:16:44.660
is this thing called GNU Octave,


00:16:44.660 --> 00:16:46.860
which is a free and open source clone of MATLAB


00:16:46.860 --> 00:16:48.180
that looks pretty good actually.


00:16:48.180 --> 00:16:49.020
- Oh, interesting.


00:16:49.020 --> 00:16:50.260
- Yeah, not that we want to encourage people


00:16:50.260 --> 00:16:54.740
go do that. They should come do Python. But this is still pretty interesting. I didn't know that


00:16:54.740 --> 00:16:56.020
exists. - Yeah, definitely.


00:16:56.020 --> 00:16:59.860
- Have we spoken about GUIs? I feel like we should actually cover that sometime.


00:16:59.860 --> 00:17:07.620
- Yeah. So, I was almost felt guilty about covering this, but it came up in episode 143 already.


00:17:07.620 --> 00:17:13.620
But Nicholas Tollervee has got a project called PiperCard. I mean, I remember HyperCard.


00:17:14.580 --> 00:17:20.420
I never really used it. Back in the day, the Dark Ages, but PiperCard is kind of this neat


00:17:20.420 --> 00:17:22.500
little thing. And did you use PiperCard ever?


00:17:22.500 --> 00:17:24.740
No, I have some friends who did, but I've never used it.


00:17:24.740 --> 00:17:27.940
It was a Mac only thing, and it was this thing where you kind of have a whole...


00:17:27.940 --> 00:17:34.100
It's designed as if there's a whole bunch of different cards, and a GUI window was just a


00:17:34.100 --> 00:17:39.700
card idea. And then you could print whatever you wanted on the card, and then there would


00:17:39.700 --> 00:17:45.940
possibly be buttons or something on the card and if you push one of the buttons you go to a different


00:17:45.940 --> 00:17:52.180
card. And so you can think of an application as a deck of cards or a choose your own adventure type


00:17:52.180 --> 00:17:57.220
game. And that's where a lot of really complicated choose your own adventure games were made


00:17:57.220 --> 00:18:04.740
on HyperCard. And so HyperCard is a similar thing just in Python and it started out with Adafruit


00:18:04.740 --> 00:18:11.060
but it's now gone. Nicholas has made it. You can just run it on your anywhere and you can just pip install it.


00:18:11.060 --> 00:18:15.200
And I was playing with it the other day and at first I dismissed it


00:18:15.200 --> 00:18:21.360
but when I had him on testing code on episode 89 and we talked about a little bit and I didn't realize this.


00:18:21.360 --> 00:18:24.000
So one of the ideas is you have basically a


00:18:24.000 --> 00:18:32.500
simple list of what's in the card and then what card to go to next with different buttons and inputs and stuff like that.


00:18:32.840 --> 00:18:37.400
But if you instead of saying which card to go to you give it a function to go to


00:18:37.400 --> 00:18:44.860
You can run any Python code as long as that function returns a string to tell you which card to go to next


00:18:44.860 --> 00:18:49.480
So that makes it actually pretty powerful to build up some fairly complex


00:18:49.480 --> 00:18:57.080
Logic very simply anyway, it's fun to work with I can even think I was even thinking of some work business uses that I could


00:18:57.080 --> 00:19:02.000
Use this for and get it mocked up really quick. That's cool. It looks interesting. It feels a little bit like a


00:19:02.720 --> 00:19:05.600
visual workflow executor, right?


00:19:05.600 --> 00:19:07.400
Like I go down this step, then I do this step,


00:19:07.400 --> 00:19:09.160
then there's a decision, and then I do this step


00:19:09.160 --> 00:19:11.520
or that step, and it's all represented by these cards.


00:19:11.520 --> 00:19:12.360
It's pretty cool.


00:19:12.360 --> 00:19:16.600
- He has an example of a Celsius to Fahrenheit converter,


00:19:16.600 --> 00:19:20.840
but also, I mean, there's a lot of simple conversion,


00:19:20.840 --> 00:19:23.560
math stuff, applications in businesses


00:19:23.560 --> 00:19:25.040
that would be a good use for it.


00:19:25.040 --> 00:19:28.600
And it also uses that user interface thing


00:19:28.600 --> 00:19:30.640
that I always forget, but it was like,


00:19:30.640 --> 00:19:32.600
nevermind, I can't remember what it is.


00:19:32.600 --> 00:19:34.800
It's one that you don't see very many examples of.


00:19:34.800 --> 00:19:35.300
Cool, yeah.


00:19:35.300 --> 00:19:36.720
And it looks like a nice project.


00:19:36.720 --> 00:19:36.960
Cool.


00:19:36.960 --> 00:19:39.220
You know, something we don't talk a whole lot about on this show


00:19:39.220 --> 00:19:40.000
is Node.js.


00:19:40.000 --> 00:19:41.440
I don't know if we ever have.


00:19:41.440 --> 00:19:41.940
Have we?


00:19:41.940 --> 00:19:44.640
You know, I think the extent to which we talked about Node.js


00:19:44.640 --> 00:19:47.440
was maybe some security issue in like NPM


00:19:47.440 --> 00:19:51.080
and how it is an analogous thing over at a PyPI.


00:19:51.080 --> 00:19:51.600
Maybe.


00:19:51.600 --> 00:19:52.600
Like, that's the extent of it.


00:19:52.600 --> 00:19:53.100
OK.


00:19:53.100 --> 00:19:56.120
So Node.js, obviously, is a pretty big server-side


00:19:56.120 --> 00:19:59.200
framework for running JavaScript code on the server, right?


00:19:59.200 --> 00:20:01.000
And the story is like, hey, if I've


00:20:01.000 --> 00:20:02.600
I gotta write JavaScript on the front end,


00:20:02.600 --> 00:20:04.360
I might as well write it on the back end.


00:20:04.360 --> 00:20:05.320
That's not my philosophy.


00:20:05.320 --> 00:20:07.680
Mine is more like, how do I minimize


00:20:07.680 --> 00:20:09.880
the amount of JavaScript I write?


00:20:09.880 --> 00:20:11.560
Let's not also do that on the back end.


00:20:11.560 --> 00:20:12.920
I mean, not that I hate JavaScript,


00:20:12.920 --> 00:20:14.880
but I don't want to overdo it.


00:20:14.880 --> 00:20:19.880
Anyway, there's a cool project that brings


00:20:19.880 --> 00:20:23.460
some integration between Python and Node.


00:20:23.460 --> 00:20:26.040
So imagine you're working on some project,


00:20:26.040 --> 00:20:28.160
or you're on some team, and they're like,


00:20:28.160 --> 00:20:30.880
we've chosen Node, you're like, sigh, sad face.


00:20:30.880 --> 00:20:35.880
But you still want to use some Python, or maybe you want to use some kind of Python library,


00:20:35.880 --> 00:20:41.880
like NumPy, TensorFlow, or whatever, something that doesn't have a JavaScript equivalent.


00:20:41.880 --> 00:20:47.880
So you can use this thing called PyNode, and what it does is it's a bridge between Node.js and Python


00:20:47.880 --> 00:20:52.880
that allows you to call Python code directly from JavaScript.


00:20:52.880 --> 00:20:54.880
So this is on the server, right?


00:20:54.880 --> 00:20:58.880
If it was on the client side, then who knows, we'd have to use something like Sculpt or Brython,


00:20:58.880 --> 00:21:02.240
to Python and then it would convert the Python to JavaScript.


00:21:02.240 --> 00:21:03.240
That's a different thing.


00:21:03.240 --> 00:21:09.840
This is the CPython interpreter with everything that Python can do on the server, but you


00:21:09.840 --> 00:21:16.260
can interact with it, call it, and get return values from those functions in Node.js.


00:21:16.260 --> 00:21:18.240
You call into Python and you get your answer back.


00:21:18.240 --> 00:21:19.240
That's pretty cool.


00:21:19.240 --> 00:21:21.720
The API for working with it is not too bad.


00:21:21.720 --> 00:21:26.480
You have to basically, in Node.js, you require stuff to load it up.


00:21:26.480 --> 00:21:30.320
require pynode and then you go to get your pynode you can say start the


00:21:30.320 --> 00:21:35.440
interpreter which will I'm guessing embed CPython into the node process and


00:21:35.440 --> 00:21:39.320
then you just call functions the way you directly call them is kind of crummy you


00:21:39.320 --> 00:21:45.840
say like pynode.call and you would say quote add comma 1 comma 2 to call the


00:21:45.840 --> 00:21:50.360
function add by passing 1 and 2 to it and then you get a callback from that I


00:21:50.360 --> 00:21:54.480
think you could do some interesting stuff by wrapping this up into a


00:21:54.480 --> 00:21:56.800
a JavaScript class.


00:21:56.800 --> 00:22:01.020
So you just say, create it, and then you just start working.


00:22:01.020 --> 00:22:03.280
It has a .add that takes a one and a two.


00:22:03.280 --> 00:22:07.800
You could put a facade that makes this much simpler, do a little async and a wait to get


00:22:07.800 --> 00:22:09.960
rid of the callback potentially, things like that.


00:22:09.960 --> 00:22:13.000
But yeah, it's definitely got some potential there.


00:22:13.000 --> 00:22:17.160
If you're working in Node.js space, you're like, "I really wish I had Python."


00:22:17.160 --> 00:22:18.320
Well, PyNode.


00:22:18.320 --> 00:22:19.320
It's great.


00:22:19.320 --> 00:22:22.560
I mean, there's more and more projects where there really aren't one language.


00:22:22.560 --> 00:22:24.160
of trying to do lots of different things


00:22:24.160 --> 00:22:27.120
or you're trying to migrate from one thing to another,


00:22:27.120 --> 00:22:29.680
use the language that works the best for wherever you're at.


00:22:29.680 --> 00:22:31.640
- Yeah, and similar to the last one that I covered,


00:22:31.640 --> 00:22:33.600
not trying to send people away to that thing,


00:22:33.600 --> 00:22:36.160
not to Node or to Octave or whatever,


00:22:36.160 --> 00:22:39.360
but just to acknowledge, right, just what you said,


00:22:39.360 --> 00:22:40.960
that there are these environments


00:22:40.960 --> 00:22:43.280
where you don't always get to pick Python.


00:22:43.280 --> 00:22:44.280
Here's another environment


00:22:44.280 --> 00:22:45.800
where you can now blend these together.


00:22:45.800 --> 00:22:47.920
- Yeah, there's lots of languages that are good.


00:22:47.920 --> 00:22:50.920
None of them are as good as Python, but just saying.


00:22:51.840 --> 00:22:53.840
- That's right, well those are the major topics


00:22:53.840 --> 00:22:55.240
that we're covering for the week.


00:22:55.240 --> 00:22:56.360
Do you have anything extra to cover?


00:22:56.360 --> 00:22:59.120
- No, although like putting together a meetup


00:22:59.120 --> 00:23:01.000
is more work than I expected.


00:23:01.000 --> 00:23:03.000
- I appreciate you doing that, I'm sure that it is.


00:23:03.000 --> 00:23:05.880
- I did submit, there's like call for proposals out


00:23:05.880 --> 00:23:08.840
and I did submit to a couple of conferences, so we'll see.


00:23:08.840 --> 00:23:10.160
- Awesome, good luck on that.


00:23:10.160 --> 00:23:12.360
The call for proposals for PyCascades, right?


00:23:12.360 --> 00:23:14.120
And also I think main PyCon, right?


00:23:14.120 --> 00:23:16.520
- Yeah, PyCon's open, Tennessee's open,


00:23:16.520 --> 00:23:17.840
a couple others are open.


00:23:17.840 --> 00:23:20.480
- Super, I actually have nothing extra to share,


00:23:20.480 --> 00:23:21.440
except for I have a joke.


00:23:21.440 --> 00:23:22.960
- Oh good, I didn't bring a joke.


00:23:22.960 --> 00:23:24.720
- It's not exactly a joke,


00:23:24.720 --> 00:23:26.560
but it's definitely something that's very funny.


00:23:26.560 --> 00:23:30.000
So have you ever heard the excuse that,


00:23:30.000 --> 00:23:31.520
man, this works on my machine.


00:23:31.520 --> 00:23:34.840
- Yeah, it's closing a defect with cannot reproduce.


00:23:34.840 --> 00:23:36.360
- Exactly, like, dude, this is working.


00:23:36.360 --> 00:23:37.600
Like, why does this not work for you?


00:23:37.600 --> 00:23:38.960
I just, who knows what it is.


00:23:38.960 --> 00:23:41.240
It could be the version of some library that's installed.


00:23:41.240 --> 00:23:43.100
It could be like permissions, who knows.


00:23:43.100 --> 00:23:47.440
But there is a, it works on my machine certification program


00:23:47.440 --> 00:23:49.720
that I want to tell you about, okay?


00:23:49.720 --> 00:23:50.560
- Okay.


00:23:50.560 --> 00:23:52.240
It has like an honors badge.


00:23:52.240 --> 00:23:53.400
It says, "Works on my machine."


00:23:53.400 --> 00:23:54.440
It's kind of golden.


00:23:54.440 --> 00:23:58.040
You can put that on your wall when you get certified.


00:23:58.040 --> 00:23:59.440
And there are real steps.


00:23:59.440 --> 00:24:00.400
This is not new.


00:24:00.400 --> 00:24:02.720
This is a pretty old certification,


00:24:02.720 --> 00:24:03.640
but I thought it'd be fun.


00:24:03.640 --> 00:24:05.040
We haven't talked about it before.


00:24:05.040 --> 00:24:08.520
So there's some specific steps that you gotta follow.


00:24:08.520 --> 00:24:11.160
And the steps here are talking about a compiled language.


00:24:11.160 --> 00:24:14.200
So maybe it slightly varies with Python,


00:24:14.200 --> 00:24:16.060
but still, I think it's funny.


00:24:16.060 --> 00:24:19.200
So step one is you have to compile your application.


00:24:19.200 --> 00:24:22.980
Getting the latest version or any recent changes


00:24:22.980 --> 00:24:24.820
from other developers is purely optional


00:24:24.820 --> 00:24:27.340
and not required for certification, okay?


00:24:27.340 --> 00:24:28.180
(laughing)


00:24:28.180 --> 00:24:32.120
Step two is you launch the application or website


00:24:32.120 --> 00:24:33.700
that's just been compiled.


00:24:33.700 --> 00:24:35.600
Step three is you cause, you're gonna like this part


00:24:35.600 --> 00:24:38.880
as a person who's into pytest and stuff.


00:24:38.880 --> 00:24:41.140
You cause one code path in the code


00:24:41.140 --> 00:24:42.740
that you're checking to be executed.


00:24:42.740 --> 00:24:46.200
The preferred way to do this is with ad hoc manual testing


00:24:46.200 --> 00:24:47.720
of the simplest possible case


00:24:47.720 --> 00:24:49.200
or the feature in question.


00:24:49.200 --> 00:24:51.720
You may omit this step if the code change


00:24:51.720 --> 00:24:52.880
was less than five lines,


00:24:52.880 --> 00:24:55.240
or if in the developer's professional opinion,


00:24:55.240 --> 00:24:57.980
the code change could not possibly result in an error.


00:24:57.980 --> 00:24:58.820
- Yeah.


00:24:58.820 --> 00:25:01.800
- And finally, you now check your code into version control.


00:25:01.800 --> 00:25:04.280
Congratulations, you're certified.


00:25:04.280 --> 00:25:05.120
It's nice, right?


00:25:05.120 --> 00:25:05.940
- Yeah.


00:25:05.940 --> 00:25:07.120
- There's probably a lot of certified people.


00:25:07.120 --> 00:25:08.520
They just need to like claim credit.


00:25:08.520 --> 00:25:09.560
They've done this, I'm sure.


00:25:09.560 --> 00:25:11.000
- Yeah, they just don't know.


00:25:11.000 --> 00:25:14.920
- Well, they can now get the star and put it on their wall.


00:25:14.920 --> 00:25:16.360
- Yeah.


00:25:16.360 --> 00:25:18.480
All right, well, thanks for being here as always, Brian,


00:25:18.480 --> 00:25:20.720
and sharing all this news with everyone.


00:25:20.720 --> 00:25:21.560
- Well, thank you.


00:25:21.560 --> 00:25:22.400
Bye. - You bet.


00:25:22.400 --> 00:25:23.220
Bye.


00:25:23.220 --> 00:25:24.760
- Thank you for listening to Python Bytes.


00:25:24.760 --> 00:25:27.200
Follow the show on Twitter via @PythonBytes.


00:25:27.200 --> 00:25:30.240
That's Python Bytes as in B-Y-T-E-S.


00:25:30.240 --> 00:25:33.440
And get the full show notes at pythonbytes.fm.


00:25:33.440 --> 00:25:35.040
If you have a news item you want featured,


00:25:35.040 --> 00:25:37.520
just visit pythonbytes.fm and send it our way.


00:25:37.520 --> 00:25:40.400
We're always on the lookout for sharing something cool.


00:25:40.400 --> 00:25:42.240
On behalf of myself and Brian Aukin,


00:25:42.240 --> 00:25:43.560
this is Michael Kennedy.


00:25:43.560 --> 00:25:45.560
Thank you for listening and sharing this podcast


00:25:45.560 --> 00:25:47.160
with your friends and colleagues.

