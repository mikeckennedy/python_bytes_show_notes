WEBVTT

00:00:00.001 --> 00:00:04.060
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.060 --> 00:00:10.080
your earbuds. This is episode 151, recorded October 2nd, 2019. I'm Michael Kennedy.

00:00:10.080 --> 00:00:10.980
And I'm Brian Okken.

00:00:10.980 --> 00:00:13.960
And this episode is brought to you by DigitalOcean. Check them out at

00:00:13.960 --> 00:00:18.680
pythonbytes.fm/digitalocean. Get $50 credit for new users. More on that later.

00:00:18.680 --> 00:00:19.640
Brian, how are you doing?

00:00:19.640 --> 00:00:20.660
I'm really good.

00:00:20.660 --> 00:00:28.660
Super. We are on PDX Python Meetup West, PDX West Python Meetup, whatever you're calling it.

00:00:28.660 --> 00:00:29.640
It's Eve, aren't we?

00:00:29.640 --> 00:00:31.680
Yeah, it's like just right around the corner.

00:00:31.680 --> 00:00:32.040
Yeah.

00:00:32.040 --> 00:00:35.720
Although it'll probably already have happened by the time this comes out.

00:00:35.720 --> 00:00:40.900
Yeah, it may. It's going to be tight. So, well, I'm sure it went wonderfully. So,

00:00:40.900 --> 00:00:46.180
got all the speakers lined up and everything. I'm really excited to have that as part of our

00:00:46.180 --> 00:00:50.620
community around here. Who knows? Maybe we can put it online somehow, but no plans for that,

00:00:50.620 --> 00:00:56.640
it sounds like. You know, I hear a lot about containers. And when I first heard of Docker

00:00:56.640 --> 00:01:02.840
Docker and things like that, I thought Docker was, I thought they had created containers,

00:01:02.840 --> 00:01:06.680
right? Like they had come up with this idea of this other kind of isolation relative to,

00:01:06.680 --> 00:01:10.600
say, a virtual machine. And looking into it, it turns out that's not the only option. And they

00:01:10.600 --> 00:01:14.100
actually didn't even come up with it, right? They just bundled it up and packaged it nicely.

00:01:14.100 --> 00:01:19.620
I think what Docker has done is very cool, but I have yet to find a use case where I needed it

00:01:19.620 --> 00:01:25.780
so far. And there are other options. And one of our friends of the show, Matt Lehman,

00:01:25.780 --> 00:01:32.980
has written an article called Python Alternative to Docker. The article uses a tool called Shiv

00:01:32.980 --> 00:01:39.500
from LinkedIn, which is a hilarious name. We actually did mention it briefly on episode 114,

00:01:39.500 --> 00:01:44.700
but I didn't know much about it. And so this is kind of a neat, neat article. It talks about

00:01:44.700 --> 00:01:49.840
that Shiv uses a zip app. And I think we've talked about that before that you can,

00:01:49.840 --> 00:01:52.460
and I think there's a few tools that utilize that.

00:01:52.460 --> 00:01:54.240
Right. Things like pecs and stuff. Yeah.

00:01:54.240 --> 00:01:57.880
Yeah. You can zip up a Python application with all its dependencies.

00:01:57.880 --> 00:02:03.780
And I don't think that at that point it includes Python, does it?

00:02:03.780 --> 00:02:07.900
I don't think so. And that was actually super disappointing to me that it didn't just deliver

00:02:07.900 --> 00:02:12.980
a thing that ran. You still have to have Python, but it's like, you don't have to install the app.

00:02:12.980 --> 00:02:14.900
As long as you have Python, you can run it, was my understanding.

00:02:14.900 --> 00:02:20.020
This article is talking about, and this totally makes sense. You've got a continuous integration

00:02:20.020 --> 00:02:26.680
build pipeline where you're making changes and maybe you're updating dependencies, but on the

00:02:26.680 --> 00:02:32.080
deployment machine, you're not deploying, you don't have to update Python all the time.

00:02:32.080 --> 00:02:36.740
You're just updating the thing that you package. And that's, it's kind of a neat thing about Shiv

00:02:36.740 --> 00:02:40.200
is you're, all your dependencies, maybe you're updating dependencies, or maybe you're updating

00:02:40.200 --> 00:02:46.980
your own application or fixing bugs or whatever that can all be put together and tested as one

00:02:46.980 --> 00:02:53.600
deliverable unit. And then that just that can be updated to a server machine, but then all the

00:02:53.600 --> 00:02:58.440
steps of like, okay, that sounds in concept. That sounds great. But what are all the steps I have

00:02:58.440 --> 00:03:02.060
to go through to actually get that done? And Matt has done that. He just basically,

00:03:02.060 --> 00:03:06.220
walked through all the steps to try to get that done. And I thought it was really great.

00:03:06.220 --> 00:03:11.460
He does talk about packaging a little bit because you kind of have to have to talk about packaging

00:03:11.460 --> 00:03:16.220
when you're talking about deployment. So this is kind of fun. He does do a shout out to,

00:03:16.220 --> 00:03:21.600
if you didn't use Shiv or Docker, what would you do? What were, what are all the little steps

00:03:21.600 --> 00:03:26.180
you'd have to do, which just makes it sound like something that you'd either hire somebody else

00:03:26.180 --> 00:03:32.180
to do? Like that's not, I'm not doing that. Yeah. But he also does shout out to platform as a service,

00:03:32.180 --> 00:03:38.020
things like Heroku and Python anywhere. And I think that's cool that there's other options. Like if you

00:03:38.020 --> 00:03:42.600
want to just throw money at it, you just use one of these. Yeah. And these actually aren't that expensive.

00:03:42.600 --> 00:03:47.920
If you're trying to just save time, that's a fine trade-off. But if you want to do this,

00:03:47.920 --> 00:03:55.740
this is a neat idea. Also Docker is a big hammer. I mean, a lot of people love it and that's great,

00:03:55.740 --> 00:04:01.180
but bring up with a lot of people that you want to try to put Docker, deploy with Docker. And if it's

00:04:01.180 --> 00:04:04.480
a thing like this, like you're just deploying an application, that might be overkill.

00:04:04.480 --> 00:04:08.680
It seems like it's a middle ground, right? Like I'm packaging up not just my Python code,

00:04:08.680 --> 00:04:13.640
but my Python dependencies and a lot of the setup around that. You still have to have Python there,

00:04:13.640 --> 00:04:18.580
but beyond that, right? It's like not really much to it. Yeah. If you need to depend on other things,

00:04:18.580 --> 00:04:24.360
like I need Redis running on this port and I need Postgres like that. And then I also want this other

00:04:24.360 --> 00:04:29.080
thing in Linux doing something like all of a sudden, then you're like, you've outgrown,

00:04:29.080 --> 00:04:34.100
you know, bundling Python more cleverly. But if you don't need that, it sounds like a pretty cool way to

00:04:34.100 --> 00:04:40.140
do it. Yeah. Like in this example, the example that Matt gives is a Django application that uses

00:04:40.140 --> 00:04:46.300
a Gunicorn or G Unicorn so that all those dependencies are bundled together. It's not

00:04:46.300 --> 00:04:51.600
like a special kind of Django app with a huge backend that's necessary. But although, I mean,

00:04:51.600 --> 00:04:56.860
Django uses a database, so I'm not sure. Yeah. Yeah. Interesting. While you're talking about Docker,

00:04:56.860 --> 00:05:02.660
I'm a fan of Docker in general, but kind of like you, I don't do a ton with it day to day. I just,

00:05:02.660 --> 00:05:07.680
the stuff I do is just not that complicated. But I recently read an article in ZDNet,

00:05:07.680 --> 00:05:13.660
that site actually still exists apparently. And it actually says, this is surprising to me,

00:05:13.660 --> 00:05:18.420
sort of kind of like I was surprised when GitHub got acquired. I realized afterwards, like, oh,

00:05:18.420 --> 00:05:22.760
they're actually financially in deep trouble. And maybe this is good rather than just going away.

00:05:22.760 --> 00:05:28.320
The article says Docker is in deep trouble. A leaked internal memo, the Docker CEO reveals that the

00:05:28.320 --> 00:05:33.200
troubled company is looking for more money. And they talk about like pushing through with

00:05:33.200 --> 00:05:39.820
perseverance despite lack of clarity on the future and stuff like that. So anyway, just something to

00:05:39.820 --> 00:05:43.820
think about. Definitely. And I read that and I forgot that Docker was a company.

00:05:43.820 --> 00:05:48.540
Yeah, exactly. And I don't even know if it matters if Docker as a company goes away. I mean,

00:05:48.540 --> 00:05:53.200
there are parts of Docker that are important, like the registry and stuff like that. But you could

00:05:53.200 --> 00:05:58.260
totally use Docker if you just had the tools. But still, it's, I don't know, it's just always

00:05:58.260 --> 00:06:02.280
interesting to see these, how this is playing out and something you want to consider if you're going

00:06:02.280 --> 00:06:08.540
to bet your project on it, right? Yeah, definitely. So I have a bit of a theme for this week as well.

00:06:08.540 --> 00:06:14.880
And it has to do with helping scientists do Python stuff a little bit better. So this first thing I want

00:06:14.880 --> 00:06:22.080
to talk about is an article that's kind of a how-to from this woman named Anna Noagrodsky. I'm going to

00:06:22.080 --> 00:06:27.160
go with that. Sorry if I messed up your name, Anna. And it comes to us by a recommendation from a listener

00:06:27.160 --> 00:06:34.100
named Jason Thomas. Thanks, Jason. And the title is How to Support Open Source Software and Stay Sane.

00:06:34.100 --> 00:06:34.680
Nice.

00:06:34.680 --> 00:06:42.600
And this is referring to scientists who develop libraries like NumPy, or some form of Scikit-learn or

00:06:42.600 --> 00:06:47.180
something like that. And then they release it to the world. And then all of a sudden, they've got all this

00:06:47.180 --> 00:06:52.060
software development work and, you know, 100 GitHub issues. They got a review and they're like, I was

00:06:52.060 --> 00:06:57.700
just trying to give back a little bit. What just happened, right? So the article has some interesting

00:06:57.700 --> 00:07:01.720
quotes. So I'm going to do a little bit of quoting from it because it's, I think it's, it's pretty

00:07:01.720 --> 00:07:06.740
revealing. Anyway, it says, the premise of the idol is that releasing lab-built open source software

00:07:06.740 --> 00:07:11.400
involves mountains of unforeseen work for the developers, right? Like you think you're done when you

00:07:11.400 --> 00:07:17.640
release it and it kind of starts. But it opens up saying, on the 10th of April, astrophysicists

00:07:17.640 --> 00:07:22.520
announced that they had captured the first ever image of a black hole. This was exhilarating news,

00:07:22.520 --> 00:07:27.220
but none of the giddy headlines other than us mentioned that the image would not have been

00:07:27.220 --> 00:07:33.000
possible without open source software. And the image was created by Matplotlib, a Python library for

00:07:33.000 --> 00:07:38.340
graphing data, as well as other components of the open source Python ecosystem. Here's where it gets

00:07:38.340 --> 00:07:44.020
interesting. Just five days later, the US National Science Foundation, the NSF, rejected a grant

00:07:44.020 --> 00:07:48.660
proposal to support that ecosystem, saying that the software lacked sufficient impact.

00:07:48.660 --> 00:07:51.540
What even?

00:07:51.540 --> 00:07:57.200
What even, right? So like I said, it's kind of a how-to. It talks about where you're, as a scientist,

00:07:57.200 --> 00:08:02.360
if you're creating software like Matplotlib or something, where do you go to get funding? Where

00:08:02.360 --> 00:08:08.100
have people been turned down? What has worked? And so on. It also talks a lot about using some software

00:08:08.100 --> 00:08:13.600
software development, software engineering techniques for having successful open source

00:08:13.600 --> 00:08:19.380
projects that grow without killing you. It's pretty good. It talks about the challenges of not knowing,

00:08:19.380 --> 00:08:25.800
as a scientist, how you might not have fluency with Git. You might not have a continuous integration.

00:08:25.800 --> 00:08:32.440
Unit testing might not be a thing that you are super skilled in. And it mentions places like

00:08:32.440 --> 00:08:37.920
the eScience Institute, the University of Washington, the software carpentry workshops, places like that,

00:08:37.920 --> 00:08:44.280
where folks can go get that training. And then also talks a little bit about when do you keep your

00:08:44.280 --> 00:08:48.660
software going? And when do you decide like, it's obsolete, we're not going to work on it anymore?

00:08:48.660 --> 00:08:52.820
What else are we going to go build? So if you're a scientist out there, or you work with scientists,

00:08:52.900 --> 00:08:58.280
you want to help them get rolling with Python and releasing their projects in a way that they'll

00:08:58.280 --> 00:09:00.440
stay sane, you know, check that out. I think it's pretty good.

00:09:00.440 --> 00:09:01.760
It's a continuous problem.

00:09:01.760 --> 00:09:05.240
Yeah, it is. And some of the recommendations are things like, make sure you have continuous

00:09:05.240 --> 00:09:09.680
integration, make sure you have version control, make sure you have testing. And one that I really

00:09:09.680 --> 00:09:14.440
liked was that you should focus on code readability over peak performance.

00:09:14.640 --> 00:09:15.540
No, definitely. Always.

00:09:15.540 --> 00:09:21.920
Right. Yeah. Because you're gonna have to fix bugs. And you had a friend who had this saying that was

00:09:21.920 --> 00:09:29.060
really interesting that debugging software is harder than writing software, generally speaking. So if you

00:09:29.060 --> 00:09:34.900
write software at the edge of the complexity that you can handle, you probably can debug it. So you need

00:09:34.900 --> 00:09:39.420
to step it back a notch, take it a little bit simpler. And then when it goes wrong, you could still deal

00:09:39.420 --> 00:09:43.500
with it. Yeah, I like that saying. So before we get to the next one, though, let me tell you about

00:09:43.500 --> 00:09:48.900
DigitalOcean. So DigitalOcean, all of our infrastructure runs there. When you get your

00:09:48.900 --> 00:09:54.500
MP3s that you hear our voices on, those came through a whole bunch of stuff that's happening

00:09:54.500 --> 00:09:59.100
over at DigitalOcean. And they have two new services that I've been telling you all about for a little

00:09:59.100 --> 00:10:03.660
while. But when I keep telling you about it, because they're good. If you want to use MySQL or Redis,

00:10:03.660 --> 00:10:08.660
they now have those as a service, right? There's go flip a switch and turn them on. That's in addition

00:10:08.660 --> 00:10:13.400
to Postgres as a service as well. So definitely coming along. Speaking of the software,

00:10:13.400 --> 00:10:19.420
as a service over at the DigitalOcean side, I'm still a fan of fire me up a VM and install some

00:10:19.420 --> 00:10:23.840
stuff and let it roar. But you know, that's all good. Check them out at pythonbytes.fm slash

00:10:23.840 --> 00:10:28.500
DigitalOcean, get $50 credit for a new user. And they're doing good work. So we can recommend them.

00:10:28.500 --> 00:10:28.840
Nice.

00:10:28.840 --> 00:10:32.960
So you found another license in addition to MIT or GNU?

00:10:32.960 --> 00:10:33.680
Yes.

00:10:33.880 --> 00:10:38.200
I don't know what to make of this. So I wanted to bring it up just to hear your thoughts as well.

00:10:38.200 --> 00:10:44.860
So there's a license. I can't remember where I ran across it. But some I think probably Twitter or

00:10:44.860 --> 00:10:49.540
something. I spend way too much time on Twitter. It's a license called the Hippocratic license,

00:10:49.540 --> 00:10:51.420
like the doctors have the Hippocratic.

00:10:51.420 --> 00:10:54.100
Right, right. First promise to do no harm, things like that.

00:10:54.280 --> 00:10:58.820
Yeah. I mean, I know it's way more than that, but that's all average people remember,

00:10:58.820 --> 00:11:05.800
like me. So this is interesting. It derives from the MIT license and it adds a restriction.

00:11:05.800 --> 00:11:08.000
And the restriction reads,

00:11:08.280 --> 00:11:29.120
Interesting. Yeah.

00:11:29.280 --> 00:11:33.220
That's an interesting thing. And I like, I kind of like it. My first reaction is,

00:11:33.220 --> 00:11:38.020
wow, that's great. You can say, I'm going to let everybody use my, use this software,

00:11:38.020 --> 00:11:43.580
but I don't want it to be used to harm people. Completely fair. But I don't know if anybody,

00:11:43.580 --> 00:11:47.680
the people that are like intentionally harming people, they don't care.

00:11:47.680 --> 00:11:48.020
Yeah.

00:11:48.020 --> 00:11:51.940
Do you really think people that are in this are really going to go, oh,

00:11:51.940 --> 00:11:58.640
yeah, we really can't use this software to guide our, like, you know, does this cover military?

00:11:58.640 --> 00:11:59.420
I don't know.

00:11:59.420 --> 00:12:05.640
Also, a lot of this has to do with the human wellbeing. That's up for debate and like a

00:12:05.640 --> 00:12:10.500
perspective, right? Like, well, we had to start the war to help people or, you know, but obviously,

00:12:10.500 --> 00:12:14.060
if you're on the other side of that, like that, you're not helping us. This is not helping. Thank

00:12:14.060 --> 00:12:18.880
you for not, for blowing us up. It's really hard to interpret. And I think you're right that it is

00:12:18.880 --> 00:12:23.220
very challenging because the folks who are most likely to abuse it, it's like the hackers are like,

00:12:23.220 --> 00:12:26.860
yeah, well, I was going to steal that, steal that $10 million from the bank, but it's got the wrong

00:12:26.860 --> 00:12:32.500
license. Yeah. It does still send a message that the person who works in the project cares and it's

00:12:32.500 --> 00:12:38.240
not necessarily a negative, even if it's not super enforceable. It's enforceable, right? I mean,

00:12:38.240 --> 00:12:42.400
I was sure that things about like the MIT license people break. I don't even know what you've got to

00:12:42.400 --> 00:12:44.040
do to break it, but you probably could.

00:12:44.180 --> 00:12:48.820
I actually think it's an interesting thing to have around. I could definitely see people coming up

00:12:48.820 --> 00:12:56.000
with like different sorts of alternatives to the MIT license also, like, like not necessarily

00:12:56.000 --> 00:13:01.860
maybe this plus other stuff. Like I know people that intentionally would never work for a military,

00:13:01.860 --> 00:13:07.640
work for the military or work for a government or a military contractor because of they don't want

00:13:07.640 --> 00:13:13.020
to. And I think it'd be completely legitimate for somebody to say, to have a license that said,

00:13:13.020 --> 00:13:17.420
my open source software doesn't want to, I don't want that to work for these people either. So,

00:13:17.420 --> 00:13:18.560
but I haven't seen that.

00:13:18.560 --> 00:13:26.740
Yeah. Not putting any judgment on those things like working for Boeing or whatever. If you wanted

00:13:26.740 --> 00:13:29.700
a license like that, I think you could, you'd have to be more explicit.

00:13:29.700 --> 00:13:33.800
It's a slippery slope, but the things that I kind of agree with, I'm like, oh yeah, well,

00:13:33.800 --> 00:13:34.760
that's completely reasonable.

00:13:34.760 --> 00:13:35.340
Yes, I know.

00:13:35.460 --> 00:13:40.180
What if people like release software that said, this is okay as long as you don't live

00:13:40.180 --> 00:13:44.680
in Oregon because I don't like Oregonians. That would be lame, but people can do that.

00:13:44.680 --> 00:13:45.720
It would definitely be lame.

00:13:45.720 --> 00:13:46.100
Yeah.

00:13:46.100 --> 00:13:49.180
That's why you set up a server in California and you just remote in.

00:13:49.180 --> 00:13:54.700
I'm vacationing permanently in Oregon.

00:13:55.100 --> 00:14:00.780
Exactly. Exactly. It's an interesting find. Yeah. So the next one, like I said, I'm on a bit of a theme

00:14:00.780 --> 00:14:07.200
here. And this next one is also about helping scientists do more, but more computational people.

00:14:07.420 --> 00:14:15.160
So this one is a real Python how to on why and how to make the switch from MATLAB to Python.

00:14:15.160 --> 00:14:16.160
Oh, this is great.

00:14:16.160 --> 00:14:23.660
Yeah. It's really, really detailed, like standard real Python stuff. I'm not entirely sure how many

00:14:23.660 --> 00:14:29.600
pages it is, but it's, it's quite a few. So it's a good thorough, it's almost like a mini book

00:14:29.600 --> 00:14:37.320
on this as Dan and his crew are used to doing. So it basically compares the philosophy of MATLAB

00:14:37.320 --> 00:14:43.520
to Python, closed source to open source, things like that. Then it walks people through how to set

00:14:43.520 --> 00:14:50.420
up Python. And then just, you use these computational libraries in MATLAB. Here's your Python ones.

00:14:50.420 --> 00:14:55.800
You did these operations like graphing. Here's how you do it in Python. And so if you're out there

00:14:55.800 --> 00:15:00.660
working on a team that uses MATLAB, and I know there are a ton of them out there. I've worked with

00:15:00.660 --> 00:15:06.560
some even around here, a great team who was moving from MATLAB to Python, who I worked with for a few

00:15:06.560 --> 00:15:11.460
days, like helping, helping to speed that transition and things like that. There's a ton of these

00:15:11.460 --> 00:15:17.840
science like groups, data science, not quite maybe data science, but on their way to that world,

00:15:17.840 --> 00:15:24.060
who I think would really benefit from that. Like I long ago even use MATLAB for a little bit of work

00:15:24.060 --> 00:15:30.780
at this research lab that spun off into a company and did like wavelet decomposition of real time eye

00:15:30.780 --> 00:15:36.820
measurements. 250 hertz per second, you know, 250 samples a second. Like wavelet decomposition is

00:15:36.820 --> 00:15:41.340
like a way harder Fourier transform, but it's funky stuff.

00:15:41.340 --> 00:15:48.880
Anyway, to do that, it was fine. But the little toolbox, I think it's called, the wavelet toolbox

00:15:48.880 --> 00:15:52.240
that you got was $2,000 per user.

00:15:52.240 --> 00:15:52.660
Yeah.

00:15:52.760 --> 00:15:57.480
That's a lot of money when you can pip install something that also does that.

00:15:57.480 --> 00:16:02.940
So there's MATLAB used a lot in our company as well, or there used to be. I don't know what it is

00:16:02.940 --> 00:16:09.860
now, but similar sorts of things. There's engineering. I'm more familiar with communication algorithms

00:16:09.860 --> 00:16:18.320
using FFTs and other communication transforms being mocked up in MATLAB before they go to like

00:16:18.320 --> 00:16:23.540
ASICs or something. Yeah, this is very common. And I'm really glad to see more and more people

00:16:23.540 --> 00:16:25.660
moving to Python from MATLAB.

00:16:25.660 --> 00:16:30.360
Yeah, absolutely. I think it's just another one of those slices of the technology ecosystem where

00:16:30.360 --> 00:16:34.480
tons of people are leaving that space and coming over to Python because the great computational

00:16:34.480 --> 00:16:40.140
support that's developing things like JupyterLab and all the NumPy, SciPy type things.

00:16:40.140 --> 00:16:43.960
Also in this article, I learned that there apparently is this thing called GNU Octave,

00:16:43.960 --> 00:16:47.920
which is a free and open source clone of MATLAB that looks pretty good, actually.

00:16:47.920 --> 00:16:48.680
Oh, interesting.

00:16:48.680 --> 00:16:51.640
Yeah. Not that we want to encourage people to just go do that. They should come do Python,

00:16:51.640 --> 00:16:55.180
but this is still pretty interesting. I didn't know that exists.

00:16:55.180 --> 00:16:56.100
Yeah, definitely.

00:16:56.100 --> 00:16:57.460
Have we spoken about GUIs?

00:16:57.460 --> 00:16:58.540
Yeah, quite a bit.

00:16:58.540 --> 00:16:59.880
I feel like we should actually cover that sometime.

00:16:59.880 --> 00:17:07.160
Yeah. So I almost felt guilty about covering this, but it came up in episode 143 already.

00:17:07.160 --> 00:17:13.760
But Nicholas Tollerby has got a project called PiperCard. I mean, I remember HyperCard.

00:17:14.680 --> 00:17:20.460
I never really used it back in the day, the dark ages. But PiperCard is kind of this neat

00:17:20.460 --> 00:17:22.440
little thing. And did you use HyperCard ever?

00:17:22.440 --> 00:17:24.780
No. I have some friends who did, but I've never used it.

00:17:24.780 --> 00:17:28.040
It was a Mac only thing. And it was this thing where you kind of have a whole,

00:17:28.240 --> 00:17:34.020
it's designed as if there's a whole bunch of different cards and a GUI window was just a

00:17:34.020 --> 00:17:39.700
card idea. And then you could print whatever you wanted on the card. And then there would

00:17:39.700 --> 00:17:45.820
possibly be buttons or something on the card. And if you push one of the buttons, you go to a

00:17:45.820 --> 00:17:51.920
different card. And so you can think of an application as a deck of cards or a choose your own adventure

00:17:51.920 --> 00:17:56.560
type game. And that's where a lot of a lot of really complicated choose your own adventure games

00:17:56.560 --> 00:18:03.920
were made on HyperCard. And so PiperCard is a similar thing just in Python. And it started out

00:18:03.920 --> 00:18:10.100
with Adafruit, but it's now gone. Nicholas has made it. You can just run it on your anywhere and you can

00:18:10.100 --> 00:18:15.720
just pip install it. And I was playing with it the other day. And at first I dismissed it. But when

00:18:15.720 --> 00:18:21.140
I had him on testing code on episode 89, and we talked about a little bit and I didn't realize

00:18:21.140 --> 00:18:28.400
this. So one of the ideas is you have basically a simple list of what's in the card and then what

00:18:28.400 --> 00:18:34.980
card to go to next with different buttons and inputs and stuff like that. But if you, instead of saying

00:18:34.980 --> 00:18:41.420
which card to go to, you give it a function to go to, you can run any Python code as long as that

00:18:41.420 --> 00:18:46.680
function returns a string to tell you which card to go to next. So that makes it actually pretty

00:18:46.680 --> 00:18:53.920
powerful to build up some fairly complex logic very simply. Anyway, it's fun to work with. I can even

00:18:53.920 --> 00:18:59.200
think, I was even thinking of some work business uses that I could use this for and get it mocked up

00:18:59.200 --> 00:18:59.720
really quick.

00:18:59.720 --> 00:19:06.000
That's cool. It looks interesting. It feels a little bit like a visual workflow executor, right? Like I go

00:19:06.000 --> 00:19:09.700
down this step, then I do this step, then there's a decision, and then I do this step or that step,

00:19:09.700 --> 00:19:12.180
and it's all represented by these cards. It's pretty cool.

00:19:12.180 --> 00:19:18.320
He has an example of a Celsius to Fahrenheit converter, but also like, I mean, there's a lot

00:19:18.320 --> 00:19:24.720
of little simple conversion math stuff applications in businesses that would be a good use for it.

00:19:24.720 --> 00:19:31.080
And it's also uses that user interface thing that I always forget, but it was like, nevermind,

00:19:31.080 --> 00:19:34.800
I can't remember what it is. It's one that you don't see very many examples of.

00:19:34.800 --> 00:19:36.940
Cool. Yeah. And it looks like a nice project. Cool.

00:19:36.940 --> 00:19:39.860
You know, something we don't talk a whole lot about on this show is Node.js.

00:19:39.860 --> 00:19:41.820
I don't know if we ever have. Have we?

00:19:41.820 --> 00:19:46.620
You know, I think the extent to which we talked about Node.js was maybe some security issue in

00:19:46.620 --> 00:19:52.600
like NPM and how it is an analogous thing over at PyPI. Maybe. Like that's the extent of it.

00:19:52.600 --> 00:19:52.860
Okay.

00:19:52.980 --> 00:19:58.600
So Node.js obviously is a pretty big server side framework for running JavaScript code on the

00:19:58.600 --> 00:20:02.540
server. Right. And you know, the story is like, Hey, if I got to write JavaScript on the front end,

00:20:02.540 --> 00:20:06.120
I might as well write it in the back end. That's not my philosophy. Mine is more like,

00:20:06.120 --> 00:20:11.800
how do I minimize the amount of JavaScript I write? Let's not also do that on the back end. I mean,

00:20:11.800 --> 00:20:19.400
not that I hate JavaScript, but I don't want to overdo it. Anyway, there's a cool project that brings

00:20:19.400 --> 00:20:25.400
some integration between Python and Node. So imagine you're working on some project,

00:20:25.400 --> 00:20:32.360
or you're on some team, and they're like, we've chosen Node. You're like, sigh, sad face. But you

00:20:32.360 --> 00:20:37.160
still want to use some Python, or maybe you want to use some kind of Python library, like, I don't know,

00:20:37.160 --> 00:20:41.820
NumPy, TensorFlow, whatever, something that doesn't have a JavaScript equivalent, right?

00:20:42.020 --> 00:20:47.100
Yeah. So you can use this thing called PyNode. And what it does is it's a bridge between Node.js

00:20:47.100 --> 00:20:54.500
and Python that allows you to call Python code directly from JavaScript. Oh, wow. So this is on

00:20:54.500 --> 00:20:58.320
the server, right? Like if it was on the client side, then who knows, we'd have to use something

00:20:58.320 --> 00:21:02.820
like Sculpt or Brython, and then it would convert the Python to JavaScript. Like that's a different

00:21:02.820 --> 00:21:10.120
thing. This is the CPython interpreter with everything that Python can do on the server. But you can

00:21:10.120 --> 00:21:16.980
interact with it, call it and get return values from those functions in Node.js. You call into Python

00:21:16.980 --> 00:21:21.600
and you get your answer back. Nice. So that's pretty cool. And the API for working with it's not too bad.

00:21:21.600 --> 00:21:27.600
You have to basically, you know, in Node.js, you require stuff to load it up. So you require PyNode.

00:21:27.600 --> 00:21:32.000
And then you go to get your PyNode, you can say start the interpreter, which will, I'm guessing,

00:21:32.000 --> 00:21:38.680
embed CPython into the node process. And then you just call functions. The way you directly call them

00:21:38.680 --> 00:21:45.740
is kind of crummy, you say like PyNode.call, and you would say quote add, comma one, comma two to call

00:21:45.740 --> 00:21:51.360
the function add by passing one and two to it. And then you get a callback from that. I think you

00:21:51.360 --> 00:21:57.980
could do some interesting stuff by wrapping this up into a JavaScript class. So you just say, you know,

00:21:57.980 --> 00:22:03.120
create it. And then you just start working. You just it has a dot add that takes a one and a two.

00:22:03.180 --> 00:22:07.820
And you could put like a facade that makes this much simpler. Do a little async and await to get

00:22:07.820 --> 00:22:12.200
rid of the callback potentially things like that. But yeah, it's, it's definitely got some potential

00:22:12.200 --> 00:22:17.180
there. And if you're working in Node.js space, you're like, I really wish I had Python. Well,

00:22:17.180 --> 00:22:22.340
PyNode. It's great. I mean, there's more and more projects where they really aren't one language,

00:22:22.340 --> 00:22:26.540
you're trying to do lots of different things, or you're trying to migrate from one thing to another,

00:22:26.540 --> 00:22:29.620
use the language that works the best for wherever you're at.

00:22:29.620 --> 00:22:33.580
And similar to the last one that I covered, not trying to send people away to that thing,

00:22:33.580 --> 00:22:39.020
not to Node or to Octave or whatever. But, you know, just acknowledging, right? Like just what

00:22:39.020 --> 00:22:43.800
you said that there are these environments where you don't always get to pick Python. Here's another

00:22:43.800 --> 00:22:45.620
environment where you can now blend these together.

00:22:45.620 --> 00:22:50.680
Yeah, there's lots of languages that are good. None of them are as good as Python, but just saying.

00:22:50.680 --> 00:22:55.140
That's right. All right. Well, those are the major topics that we're covering for the week.

00:22:55.140 --> 00:22:56.200
Do you have anything extra to cover?

00:22:56.200 --> 00:23:00.840
No. Although like putting together a meetup is more work than I expected.

00:23:00.840 --> 00:23:02.920
I appreciate you doing that. I'm sure that it is.

00:23:02.920 --> 00:23:08.560
I did submit. There's like call for proposals out and I did submit to a couple of conferences. So we'll

00:23:08.560 --> 00:23:08.740
see.

00:23:08.740 --> 00:23:13.740
Awesome. Good luck on that. The call for proposals for PyCascades, right? And also I think main PyCon,

00:23:13.740 --> 00:23:14.000
right?

00:23:14.000 --> 00:23:17.720
Yeah. PyCon's open. Tennessee's open. A couple others are open.

00:23:17.720 --> 00:23:21.260
Super. I actually have nothing extra to share except for I have a joke.

00:23:21.260 --> 00:23:22.840
Oh, good. I didn't bring a joke.

00:23:22.840 --> 00:23:27.300
It's not exactly a joke, but it's definitely something that's very funny. So have you ever

00:23:27.300 --> 00:23:31.220
heard the excuse that, man, this works on my machine?

00:23:31.220 --> 00:23:34.620
Yeah. It's closing a defect with cannot reproduce.

00:23:34.620 --> 00:23:38.720
Exactly. Like, dude, this is working. Like, why does this not work for you? I just, who knows what

00:23:38.720 --> 00:23:42.280
it is? It could be the version of some library that's installed. It could be like permissions.

00:23:42.480 --> 00:23:48.520
Who knows? But there is a, it works on my machine certification program that I want to tell you

00:23:48.520 --> 00:23:49.020
about. Okay.

00:23:49.020 --> 00:23:49.980
Okay.

00:23:49.980 --> 00:23:53.660
This is a real program and it has like an honors badge. It says works on my machine. It's kind

00:23:53.660 --> 00:23:59.020
of golden. You can put that on like your wall when you get certified and there are like real

00:23:59.020 --> 00:24:03.320
steps. This is not new. This front, this is a pretty old certification, but I thought it'd

00:24:03.320 --> 00:24:08.160
be fun. We haven't talked about it before. So there's some specific steps that you got to

00:24:08.160 --> 00:24:12.000
follow. And the steps here are talking about like a compiled language. So maybe like it

00:24:12.000 --> 00:24:17.640
slightly varies with Python, but it's still, I think it's funny. So step one is you have

00:24:17.640 --> 00:24:22.780
to compile your application, getting the latest version from any recent or any recent changes

00:24:22.780 --> 00:24:28.480
from other developers is purely optional and not required for certification. Okay. Step two

00:24:28.480 --> 00:24:34.820
is you launch the application or website that's just been compiled. Step three is you cause,

00:24:34.820 --> 00:24:39.900
you're going to like this part as a person who's into pie tests and stuff. You cause one

00:24:39.900 --> 00:24:44.120
code path in the code that you're checking to be executed. The preferred way to do this

00:24:44.120 --> 00:24:48.700
is with ad hoc manual testing of the simplest possible case for the feature in question.

00:24:48.700 --> 00:24:54.220
You may omit this stuff if the code change was less than five lines, or if in the developer's

00:24:54.220 --> 00:24:57.460
professional opinion, the code change could not possibly result in an error.

00:24:57.460 --> 00:24:58.180
Yeah.

00:24:58.180 --> 00:25:03.320
And finally, you now check your code into version control. Congratulations. You're certified.

00:25:03.980 --> 00:25:04.760
That's nice, right?

00:25:04.760 --> 00:25:04.920
Yeah.

00:25:04.920 --> 00:25:08.800
There's probably a lot of certified people. They just need to like claim credit. They've done

00:25:08.800 --> 00:25:09.320
this. I'm sure.

00:25:09.320 --> 00:25:10.660
Yeah. They just don't know.

00:25:10.660 --> 00:25:14.580
Well, they can now get the star and put it on their wall.

00:25:14.580 --> 00:25:15.100
Yeah.

00:25:15.100 --> 00:25:20.460
All right. Well, thanks for being here as always, Brian, and sharing all this news with everyone.

00:25:20.460 --> 00:25:21.680
Well, thank you. Bye.

00:25:21.680 --> 00:25:22.440
You bet. Bye.

00:25:22.800 --> 00:25:27.480
Thank you for listening to Python Bytes. Follow the show on Twitter via at Python Bytes. That's

00:25:27.480 --> 00:25:33.820
Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have

00:25:33.820 --> 00:25:38.620
a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout

00:25:38.620 --> 00:25:43.740
for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank

00:25:43.740 --> 00:25:46.620
you for listening and sharing this podcast with your friends and colleagues.

