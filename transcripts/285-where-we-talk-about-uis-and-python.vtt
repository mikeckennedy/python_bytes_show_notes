
00:00:00.000 --> 00:00:02.240
>> Hello and welcome to Python Bytes where we


00:00:02.240 --> 00:00:05.500
deliver Python news and headlines directly to your earbuds.


00:00:05.500 --> 00:00:10.720
This is Episode 285 recorded May 24th, and I'm Brian Okken.


00:00:10.720 --> 00:00:11.960
>> I'm Michael Kennedy.


00:00:11.960 --> 00:00:13.080
>> I'm Mark Little.


00:00:13.080 --> 00:00:14.120
>> I'm Ben Cosby.


00:00:14.120 --> 00:00:16.320
>> Nice. Welcome, Ben. Welcome, Mark.


00:00:16.320 --> 00:00:20.480
Michael, you have this story of why you brought Mark and Ben on.


00:00:20.480 --> 00:00:22.280
>> Yeah, I did bring Mark and Ben on.


00:00:22.280 --> 00:00:24.240
Mark and I have been really good friends for a long time,


00:00:24.240 --> 00:00:25.680
but that's not why he's here.


00:00:25.680 --> 00:00:27.440
He's here because he's been sharing


00:00:27.440 --> 00:00:31.600
this Python journey that he and Van have both been on.


00:00:31.600 --> 00:00:35.400
They come from law, like being lawyers and bankers and stuff,


00:00:35.400 --> 00:00:38.100
and they've found their way over to writing software in Python.


00:00:38.100 --> 00:00:40.360
It's been so fun to watch you guys come along.


00:00:40.360 --> 00:00:44.360
And you recently showed me the release of one of your SaaS products


00:00:44.360 --> 00:00:46.480
built with Python and Pyramid and other things.


00:00:46.480 --> 00:00:49.440
And I thought it was just super cool, so I thought you could maybe share


00:00:49.440 --> 00:00:51.860
just a little bit of that before we kick off the main topics


00:00:51.860 --> 00:00:56.520
to kind of inspire people who are not, you know, traditional CS folks.


00:00:56.520 --> 00:00:57.960
and they can still build amazing things.


00:00:57.960 --> 00:01:01.640
You want to tell us a bit about yourself and then tell us a bit about your thing?


00:01:01.640 --> 00:01:04.680
I'll say first that I'm strictly the hobbyist.


00:01:04.680 --> 00:01:10.320
So we it's definitely been a collaboration and quite a journey.


00:01:10.320 --> 00:01:13.320
And then I'll talk a little bit about how we got started, because you played an


00:01:13.320 --> 00:01:14.560
instrumental role in that, Michael.


00:01:14.560 --> 00:01:18.480
But so we released this product called LexChart that builds corporate


00:01:18.480 --> 00:01:20.480
organizational structures automatically.


00:01:20.480 --> 00:01:22.760
And these charts are kind of weird.


00:01:22.760 --> 00:01:27.080
They're sort of like human resources, organizational charts,


00:01:27.080 --> 00:01:30.440
except that for legal entities, they're much more complicated.


00:01:30.440 --> 00:01:35.120
And so we've built some automation in Python, principally,


00:01:35.120 --> 00:01:39.320
in the server side that generates these hierarchies automatically.


00:01:39.320 --> 00:01:40.920
And they can be quite elaborate.


00:01:40.920 --> 00:01:44.480
So for example, some of them we release publicly.


00:01:44.480 --> 00:01:47.760
And we've been building these things with our own app and releasing them.


00:01:47.760 --> 00:01:50.120
So here's one for Elon Musk, for example.


00:01:50.120 --> 00:01:54.360
This is before the early stages of his Twitter acquisition,


00:01:54.360 --> 00:01:58.720
but our app does a lot of this layering automatically.


00:01:58.720 --> 00:02:03.080
And those things can be quite stunningly complicated.


00:02:03.080 --> 00:02:07.320
So here's one, for example, with thousands of legal entities


00:02:07.320 --> 00:02:09.280
in the corporate structure of Blackstone.


00:02:09.280 --> 00:02:11.880
And so we've actually got some Python


00:02:11.880 --> 00:02:14.520
that sort of automates the presentation


00:02:14.520 --> 00:02:15.680
and structure of all that.


00:02:15.680 --> 00:02:19.520
And then, as you say, it's using Pyramid and Chameleon


00:02:19.520 --> 00:02:23.720
and SQLAlchemy, and then a lot of legal


00:02:23.720 --> 00:02:26.360
and business finance expertise as well.


00:02:26.360 --> 00:02:28.480
But it's been quite an exciting journey.


00:02:28.480 --> 00:02:31.360
And so we were excited to share this with you


00:02:31.360 --> 00:02:33.840
and look forward to sort of talking about


00:02:33.840 --> 00:02:35.840
some of the piece parts that are in the product


00:02:35.840 --> 00:02:38.600
that might be useful to the broader community as well.


00:02:38.600 --> 00:02:39.440
- Yeah, exactly.


00:02:39.440 --> 00:02:41.000
Some of the stuff you guys are gonna cover today


00:02:41.000 --> 00:02:43.000
as our main topic sort of were extracted


00:02:43.000 --> 00:02:44.760
out of the building of the SRA.


00:02:44.760 --> 00:02:45.600
- Yeah.


00:02:45.600 --> 00:02:46.640
- Ben, anything you wanna add to that


00:02:46.640 --> 00:02:48.440
and maybe just tell people about yourself real quick?


00:02:48.440 --> 00:02:52.480
As you pointed out, and Mark too, you know, whenever I'm trying to explain


00:02:52.480 --> 00:02:55.720
to somebody what I do now, I always say, well, I'm a reformed barbarian at the


00:02:55.720 --> 00:03:01.500
gate, I traded buyouts and IPOs and a suit on Wall Street or, you know, code


00:03:01.500 --> 00:03:05.420
and in my office at home and in my pajamas, kind of thing.


00:03:05.420 --> 00:03:08.700
And, but we've, as Mark talked about, we've kind of merged


00:03:08.700 --> 00:03:10.300
those couple of things together.


00:03:10.300 --> 00:03:14.240
And so these days I spend a lot of my time with Python on the front end and


00:03:14.240 --> 00:03:17.120
JavaScript, sorry, JavaScript on the front end and Python on the back end


00:03:17.240 --> 00:03:20.240
and DevOps and all sorts of things, you sort of have to do it all.


00:03:20.240 --> 00:03:24.140
But I also wanted to say, kind of as part of our journey for your listeners,


00:03:24.140 --> 00:03:26.740
I'd be remiss if I didn't, even though I didn't warn you beforehand,


00:03:26.740 --> 00:03:32.840
I was going to do this, but along this way of kind of going from suits and deals


00:03:32.840 --> 00:03:37.540
and IPOs and things like that, Michael's Talk Python training,


00:03:37.540 --> 00:03:40.140
I'm sure lots of people on this podcast are familiar, but if you're not,


00:03:40.140 --> 00:03:44.440
those courses were pretty instrumental for us and for those we've worked with


00:03:44.440 --> 00:03:48.360
in evolving and making Python.


00:03:48.360 --> 00:03:52.920
Python now is completely central to our business and what we do.


00:03:52.920 --> 00:03:54.760
So it's been fun to get here.


00:03:54.760 --> 00:03:57.720
Thanks for the shout out, Ben. I appreciate it.


00:03:57.720 --> 00:03:59.880
I would just say, too, we've been able to leverage that.


00:03:59.880 --> 00:04:05.880
And we've got some pretty complex math and graph theory in the core of our app.


00:04:05.880 --> 00:04:09.720
So we've been able to take Michael's classes


00:04:09.720 --> 00:04:13.560
and really leverage them in a much bigger way


00:04:13.560 --> 00:04:16.780
that I think a lot of people expect or imagine they can


00:04:16.780 --> 00:04:19.100
when they start some of these online classes.


00:04:19.100 --> 00:04:20.980
So, you know, your training in particular


00:04:20.980 --> 00:04:22.380
has been exceptional.


00:04:22.380 --> 00:04:23.220
- Thanks, Mark.


00:04:23.220 --> 00:04:24.180
I just think what you guys have built


00:04:24.180 --> 00:04:26.580
is looks so much more polished than somebody,


00:04:26.580 --> 00:04:28.420
couple of guys who taught themself programming


00:04:28.420 --> 00:04:30.020
a few years ago, and I just, I love it.


00:04:30.020 --> 00:04:31.820
So, super good work.


00:04:31.820 --> 00:04:33.700
Brian, should we kick it off?


00:04:33.700 --> 00:04:34.940
- Yeah, this is just great.


00:04:34.940 --> 00:04:36.860
I'm blown away.


00:04:36.860 --> 00:04:37.860
It looks awesome.


00:04:37.860 --> 00:04:39.460
So yeah, let's kick it off.


00:04:39.460 --> 00:04:40.500
- Yeah, I was too.


00:04:40.500 --> 00:04:42.420
And I think some of the stuff that we're gonna talk about


00:04:42.420 --> 00:04:45.460
is going to certainly be part of that.


00:04:45.460 --> 00:04:46.940
So let's talk, yeah.


00:04:46.940 --> 00:04:49.140
- Oh, whoop, nope, wrong one.


00:04:49.140 --> 00:04:50.380
- I'm up next, right Brian?


00:04:50.380 --> 00:04:51.500
- Yeah, sorry.


00:04:51.500 --> 00:04:54.620
- All right, I have a whole bunch of extras, folks.


00:04:54.620 --> 00:04:57.440
So let me just, I'm gonna start with like a quick one


00:04:57.440 --> 00:04:59.740
for one of our main topics here that maybe--


00:04:59.740 --> 00:05:01.940
- We may have to cut you off.


00:05:01.940 --> 00:05:03.340
- You might have to cut me off.


00:05:03.340 --> 00:05:04.380
So check this out, Brian.


00:05:04.380 --> 00:05:08.340
If I go to pypi.org and I go look for something like,


00:05:08.340 --> 00:05:10.900
let me look at Beanie, I don't know if I get that right.


00:05:10.900 --> 00:05:12.260
Actually, I don't think that's gonna help, right.


00:05:12.260 --> 00:05:17.380
Let me look for Switch Lang, which is my Switch implementation I added to Python, I don't


00:05:17.380 --> 00:05:18.660
know, a couple years ago.


00:05:18.660 --> 00:05:23.620
So if you look over here on the left, oh, I think it's being blocked, but over here,


00:05:23.620 --> 00:05:28.540
it says, here's your avatar from Gravatar for M. Kennedy.


00:05:28.540 --> 00:05:31.660
But my little, I don't know, my browser settings are blocking that or whatever.


00:05:31.660 --> 00:05:37.060
But so this is a thing you see a lot of the times, and like, where do you get these little


00:05:37.060 --> 00:05:38.060
Gravatar, right?


00:05:38.060 --> 00:05:41.620
So if you have users, you have users who have emails, you want to show something about


00:05:41.620 --> 00:05:46.260
there's a chance that over in Gravatar,


00:05:46.260 --> 00:05:49.740
there's going to be some profile for them,


00:05:49.740 --> 00:05:51.900
different images, things like that.


00:05:51.900 --> 00:05:54.500
If you're in Python and you want to add


00:05:54.500 --> 00:05:56.840
Gravatar features to your site,


00:05:56.840 --> 00:06:00.100
it is ridiculous using this thing called libGravatar.


00:06:00.100 --> 00:06:00.660
>> Oh, wow.


00:06:00.660 --> 00:06:03.860
>> All you got to do with libGravatar is you go and


00:06:03.860 --> 00:06:06.940
you create an instance of one of these objects, Gravatars.


00:06:06.940 --> 00:06:08.620
You pass in an e-mail and you can say,


00:06:08.620 --> 00:06:10.360
get image, you give it a size,


00:06:10.360 --> 00:06:15.240
and potentially a file extension if you want to control that or anything,


00:06:15.240 --> 00:06:16.640
whether or not you want to use SSL.


00:06:16.640 --> 00:06:20.480
And then it gives you back this non-reversible URL


00:06:20.480 --> 00:06:24.840
that is the image of that person based on the size you asked for,


00:06:24.840 --> 00:06:26.040
who they are, and so on.


00:06:26.040 --> 00:06:29.280
And if they don't exist, you get the standard Gravatar logo,


00:06:29.280 --> 00:06:30.960
just like a little circle type thing.


00:06:30.960 --> 00:06:33.880
And so this is some kind of hash algorithm that you have to follow


00:06:33.880 --> 00:06:36.680
based on their email address to pull them back and so on.


00:06:36.680 --> 00:06:39.920
But if you want to add that kind of Gravatar look and feel,


00:06:39.920 --> 00:06:42.540
then literally, Gravatar object,


00:06:42.540 --> 00:06:44.600
give it the email address, dot get image.


00:06:44.600 --> 00:06:46.360
That's pretty neat. It goes from one to


00:06:46.360 --> 00:06:49.200
248 pixels on the image size.


00:06:49.200 --> 00:06:50.800
I'm not sure one's super useful,


00:06:50.800 --> 00:06:52.660
like you get one dot,


00:06:52.660 --> 00:06:55.780
but maybe you want it to be a particular,


00:06:55.780 --> 00:06:58.960
like a shade of the person is all you're going to get, I guess.


00:06:58.960 --> 00:07:01.320
>> I feel like a five by five would be fun,


00:07:01.320 --> 00:07:03.080
just a few pixels.


00:07:03.080 --> 00:07:05.420
>> It would. You can do a get profile,


00:07:05.420 --> 00:07:07.360
which will then give you access to the user and see


00:07:07.360 --> 00:07:08.600
all of their email addresses,


00:07:08.600 --> 00:07:10.780
all of their information about them and so on.


00:07:10.780 --> 00:07:11.620
So there's a little bit more that you can actually--


00:07:11.620 --> 00:07:13.100
- Gravatar is for social security.


00:07:13.100 --> 00:07:15.200
- Oh yeah, yeah, there's this whole shadow profile


00:07:15.200 --> 00:07:18.140
that's built up by the surveillance ad tech industry.


00:07:18.140 --> 00:07:20.220
It's only five bucks a use, no, just kidding.


00:07:20.220 --> 00:07:22.140
But you can get more details about them


00:07:22.140 --> 00:07:23.620
through their profile if you really want.


00:07:23.620 --> 00:07:25.340
But basically the main use case is,


00:07:25.340 --> 00:07:27.100
given an email, can I get a picture


00:07:27.100 --> 00:07:29.460
without hassling this person to upload a picture?


00:07:29.460 --> 00:07:30.300
Maybe.


00:07:30.300 --> 00:07:32.620
- And just, if anybody's not familiar with Gravatar,


00:07:32.620 --> 00:07:35.500
it's owned by Automatic, who does WordPress.


00:07:35.500 --> 00:07:37.740
So all the WordPress people use it.


00:07:37.740 --> 00:07:39.900
And that's why it's like well supported


00:07:39.900 --> 00:07:42.260
and it's not too evil or anything like that.


00:07:42.260 --> 00:07:44.420
- Yeah, and like I said, PyPI.org uses it.


00:07:44.420 --> 00:07:45.860
So that's a start.


00:07:45.860 --> 00:07:46.920
Mark, Ben, what do you guys think?


00:07:46.920 --> 00:07:49.140
Do you have user pictures in your app?


00:07:49.140 --> 00:07:50.420
Are you worried about this kind of stuff?


00:07:50.420 --> 00:07:51.940
- We don't.


00:07:51.940 --> 00:07:53.980
- We don't at Let's Chart, but it's funny


00:07:53.980 --> 00:07:57.860
because at the very beginning of our journey,


00:07:57.860 --> 00:07:59.740
we implemented a little question and answer app


00:07:59.740 --> 00:08:02.880
as like a demo to make sure that we could like justify


00:08:02.880 --> 00:08:05.500
going down to Python and I use Gravatar in there.


00:08:05.500 --> 00:08:07.820
This actually is a pretty cool library


00:08:07.820 --> 00:08:08.780
because I remember in that app,


00:08:08.780 --> 00:08:10.460
I really was just focused on Python,


00:08:10.460 --> 00:08:12.700
but I had to fall back on some JavaScript


00:08:12.700 --> 00:08:15.940
in order to put the Gravatar icons in there.


00:08:15.940 --> 00:08:18.340
But it is a great, Gravatar is really useful.


00:08:18.340 --> 00:08:20.260
I'd encourage your listeners,


00:08:20.260 --> 00:08:21.100
if you're looking for something,


00:08:21.100 --> 00:08:22.180
'cause the nice thing, as you said,


00:08:22.180 --> 00:08:24.980
is it'll just generate this automatic little drawing,


00:08:24.980 --> 00:08:25.940
even if they don't have an image,


00:08:25.940 --> 00:08:28.620
so you can kind of create a nice look and feel


00:08:28.620 --> 00:08:30.020
for your site, for your user profiles,


00:08:30.020 --> 00:08:32.040
where everybody gets some sort of a graphic,


00:08:32.040 --> 00:08:33.380
even if they haven't uploaded anything.


00:08:33.380 --> 00:08:35.680
It's kind of a nice little tool.


00:08:35.680 --> 00:08:36.900
- Yeah, absolutely.


00:08:36.900 --> 00:08:38.560
Kim Van Wick out in the audience says,


00:08:38.560 --> 00:08:41.060
when pixel Gravitars might be useful for building images


00:08:41.060 --> 00:08:43.620
like displaying contributors and stuff.


00:08:43.620 --> 00:08:45.700
Maybe not one, but you could do like 10 by 10


00:08:45.700 --> 00:08:48.780
and you could build up to a montage of all the people


00:08:48.780 --> 00:08:49.620
or something that'd be cool.


00:08:49.620 --> 00:08:54.220
And you also, Ben, you also have some cheering folks


00:08:54.220 --> 00:08:55.460
in the audience, which is lovely.


00:08:55.460 --> 00:08:57.180
(all laughing)


00:08:57.180 --> 00:08:59.100
So go Ben, great to have you here.


00:08:59.100 --> 00:09:02.340
All right, Brian, over to you.


00:09:02.340 --> 00:09:03.560
I'm very excited about it.


00:09:03.560 --> 00:09:04.400
When I first saw this, I'm like,


00:09:04.400 --> 00:09:05.980
"Oh, you don't really need that."


00:09:05.980 --> 00:09:08.600
Pydantic does this on, oh wait, no, this is amazing.


00:09:08.600 --> 00:09:09.440
Tell them, tell them.


00:09:09.440 --> 00:09:11.580
- So this is so cool.


00:09:11.580 --> 00:09:15.100
It's a little thing that was suggested by Chun Li.


00:09:15.100 --> 00:09:17.300
It's JSON to Pydantic converter.


00:09:17.300 --> 00:09:23.100
And Chun said, "This awesome JSON to Pydantic is so useful.


00:09:23.100 --> 00:09:26.500
"It literally saves me days of work


00:09:26.500 --> 00:09:29.380
"with complex nested JSON schema."


00:09:29.380 --> 00:09:30.680
So the idea is you've got,


00:09:30.680 --> 00:09:36.080
basically it's just this website with a JSON side and a Pydantic side.


00:09:36.080 --> 00:09:37.760
I've got one prepared.


00:09:37.760 --> 00:09:40.160
I went and copied one from somewhere.


00:09:40.160 --> 00:09:44.600
If we go over and just replace the simple one with a more complex one,


00:09:44.600 --> 00:09:49.080
paste it in there, and then it just generates the Pydantic model,


00:09:49.080 --> 00:09:51.520
and it's pretty awesome.


00:09:51.520 --> 00:09:53.040
There's a couple of options.


00:09:53.040 --> 00:09:54.160
>> For people who are listening,


00:09:54.160 --> 00:09:57.280
it's not that it converts JSON to Pydantic,


00:09:57.280 --> 00:09:59.800
it converts JSON to Pydantic code.


00:09:59.800 --> 00:10:00.160
>> Yeah.


00:10:00.160 --> 00:10:02.320
>> Writes the code that you would have to write for


00:10:02.320 --> 00:10:04.640
the Pydantic to understand what you put.


00:10:04.640 --> 00:10:06.220
It's amazing. I love it.


00:10:06.220 --> 00:10:08.840
>> Right. Then some of the options are cool.


00:10:08.840 --> 00:10:10.320
You might not use it for everything,


00:10:10.320 --> 00:10:12.240
but just knowing the syntax for it.


00:10:12.240 --> 00:10:15.320
If you give them optional,


00:10:15.320 --> 00:10:17.240
it'll tell you where to put


00:10:17.240 --> 00:10:19.680
optional in your model to make it all work right.


00:10:19.680 --> 00:10:23.000
This one's only just showing up at the bottom.


00:10:23.000 --> 00:10:27.440
Then the last one is aliasing camel case.


00:10:27.440 --> 00:10:28.740
I didn't know you could do this.


00:10:28.740 --> 00:10:30.980
aliasing camel case for snake case.


00:10:30.980 --> 00:10:32.900
So if you're using,


00:10:32.900 --> 00:10:35.100
I guess both camel case and snake case,


00:10:35.100 --> 00:10:36.220
you can have them work. I don't know.


00:10:36.220 --> 00:10:37.620
>> A lot of times if you're consuming


00:10:37.620 --> 00:10:40.740
a JSON API that's written in another language,


00:10:40.740 --> 00:10:43.900
the variable names are idiomatic to that language.


00:10:43.900 --> 00:10:47.180
So like C# or JavaScript


00:10:47.180 --> 00:10:50.020
would represent this one where you've got the camel casing,


00:10:50.020 --> 00:10:52.540
but that would not be how you would want to call it in Python.


00:10:52.540 --> 00:10:54.380
So you can say, well, give me the Python version,


00:10:54.380 --> 00:10:56.780
but allow Pythonic to find the other size.


00:10:56.780 --> 00:11:01.580
>> Okay, cool. One of the neat things about this that


00:11:01.580 --> 00:11:04.300
I really love is it's an open-source project.


00:11:04.300 --> 00:11:06.300
At the bottom, there's a link.


00:11:06.300 --> 00:11:10.420
It takes you to just the open-source page.


00:11:10.420 --> 00:11:14.780
This is built with FastAPI and Create React app,


00:11:14.780 --> 00:11:18.540
which is pretty cool, and then a data model code generator.


00:11:18.540 --> 00:11:20.620
That's doing the most of the work.


00:11:20.620 --> 00:11:24.940
If you want to do this yourself somewhere else,


00:11:24.940 --> 00:11:27.540
embed it within your tool chain or something like that,


00:11:27.540 --> 00:11:28.820
you can do this.


00:11:28.820 --> 00:11:31.860
I don't know why you'd regenerate it all the time though,


00:11:31.860 --> 00:11:35.620
but it's just super fun to just drop


00:11:35.620 --> 00:11:39.700
some adjacent example of good one in there and drop it in.


00:11:39.700 --> 00:11:42.820
>> It's fantastic. If you're going to consume an API and you say,


00:11:42.820 --> 00:11:45.500
here's a specification of what I'm going to get back, boom,


00:11:45.500 --> 00:11:47.700
you're halfway there or you're a consultant,


00:11:47.700 --> 00:11:49.300
you pick up somebody else's code and you're like,


00:11:49.300 --> 00:11:51.360
I want to use PyNanic here, this is great.


00:11:51.360 --> 00:11:53.060
Anthony, the artist, says, "Oh,


00:11:53.060 --> 00:11:55.060
"Oh, come on, I could have used this last week."


00:11:55.060 --> 00:11:57.300
(laughing)


00:11:57.300 --> 00:11:59.420
Guys, what do you think of this?


00:11:59.420 --> 00:12:00.260
- That's really cool.


00:12:00.260 --> 00:12:02.580
We have a project where we're looking at migrating


00:12:02.580 --> 00:12:05.180
from a different tech stack to Python.


00:12:05.180 --> 00:12:07.740
And one of our output sources there is JSON.


00:12:07.740 --> 00:12:09.940
So I'm looking at this and wondering,


00:12:09.940 --> 00:12:11.380
Ben, this might be an opportunity for us


00:12:11.380 --> 00:12:16.380
to get there a little quicker for some of that data.


00:12:16.380 --> 00:12:19.100
- That is cool, especially for prototyping or something


00:12:19.100 --> 00:12:22.620
where you just wanna see and you wanna spend three days


00:12:22.620 --> 00:12:24.940
seeing what it's going to look like.


00:12:24.940 --> 00:12:26.100
This is pretty cool.


00:12:26.100 --> 00:12:26.940
- Yeah.


00:12:26.940 --> 00:12:27.780
- Yeah.


00:12:27.780 --> 00:12:28.600
- Yeah.


00:12:28.600 --> 00:12:29.440
It's very cool.


00:12:29.440 --> 00:12:31.860
- Also another, I mean, we get this all the time,


00:12:31.860 --> 00:12:32.940
but I just want to remind people,


00:12:32.940 --> 00:12:35.060
this was a suggestion from a listener.


00:12:35.060 --> 00:12:37.220
And that's one of the neat things about the podcast


00:12:37.220 --> 00:12:39.580
is people can find cool things and send them in


00:12:39.580 --> 00:12:41.100
and then we can share it with everybody.


00:12:41.100 --> 00:12:42.340
It's nice.


00:12:42.340 --> 00:12:43.200
- Absolutely.


00:12:43.200 --> 00:12:45.620
That's like half of our topics are that, right?


00:12:45.620 --> 00:12:47.740
All right, Mark, you're up with the next one.


00:12:47.740 --> 00:12:48.580
- Awesome.


00:12:48.580 --> 00:12:51.180
So this is not a Python library


00:12:51.180 --> 00:12:53.880
and it's probably well known to most of your listeners,


00:12:53.880 --> 00:12:58.820
but I wanted to just talk about a few Tailwind CSS things


00:12:58.820 --> 00:13:01.200
that people, if you're only sort of casually aware


00:13:01.200 --> 00:13:04.460
of Tailwind, might help you jumpstart.


00:13:04.460 --> 00:13:07.780
We are an aggressive user of Tailwind


00:13:07.780 --> 00:13:10.220
and some of the components.


00:13:10.220 --> 00:13:12.500
The other piece I want to talk about is Tailwind UI,


00:13:12.500 --> 00:13:14.420
which is not open source.


00:13:14.420 --> 00:13:18.780
So Tailwind CSS is completely free from Tailwind Labs,


00:13:18.780 --> 00:13:23.780
But Tailwind UI is behind a paywall,


00:13:23.780 --> 00:13:25.800
but these are pre-built components


00:13:25.800 --> 00:13:27.320
by the creators of Tailwind.


00:13:27.320 --> 00:13:29.040
So there are lots of people building components


00:13:29.040 --> 00:13:31.560
for Tailwind, but Tailwind UI is specifically built


00:13:31.560 --> 00:13:35.480
by the people who created Tailwind in the first instance.


00:13:35.480 --> 00:13:37.040
And it's interesting to me,


00:13:37.040 --> 00:13:39.320
I know that both of you have a lot of interest


00:13:39.320 --> 00:13:43.480
in user interface design around Python and web apps


00:13:43.480 --> 00:13:46.280
and Tailwind certainly is a part of that theme.


00:13:46.280 --> 00:13:49.500
And it's also interesting for the business model piece


00:13:49.500 --> 00:13:51.520
about how to turn sort of open source


00:13:51.520 --> 00:13:53.540
into sort of a revenue generating model.


00:13:53.540 --> 00:13:56.640
So you can use Tailwind and never need Tailwind UI,


00:13:56.640 --> 00:13:59.520
but if you need examples or references,


00:13:59.520 --> 00:14:03.120
Tailwind UI is a fantastic resource.


00:14:03.120 --> 00:14:05.560
And so I thought I would just show,


00:14:05.560 --> 00:14:08.440
they've got widgets, basically prebuilt components


00:14:08.440 --> 00:14:10.280
around marketing or app UIs


00:14:10.280 --> 00:14:12.480
and then a new sort of e-commerce section.


00:14:12.480 --> 00:14:13.320
And to give you an example,


00:14:13.320 --> 00:14:15.480
there's really low level granular stuff.


00:14:15.480 --> 00:14:18.680
Like if you want a little stats component,


00:14:18.680 --> 00:14:20.800
you can come in here, they'll show you what it looks like.


00:14:20.800 --> 00:14:23.740
They've designed several options.


00:14:23.740 --> 00:14:26.240
You can see what they are like responsively,


00:14:26.240 --> 00:14:28.120
and then you can actually see the code


00:14:28.120 --> 00:14:32.720
and they'll give you the code in raw HTML, React or Vue.


00:14:32.720 --> 00:14:35.760
And some of them need JavaScript as well.


00:14:35.760 --> 00:14:38.520
They'll give you hints around what to do with the JavaScript


00:14:38.520 --> 00:14:39.780
if that's necessary.


00:14:39.780 --> 00:14:42.920
But this is an example of that little stats widget


00:14:42.920 --> 00:14:46.180
with all of the sort of Tailwind classes built in there


00:14:46.180 --> 00:14:49.060
that you can grab and reuse.


00:14:49.060 --> 00:14:51.900
And we have found it really useful


00:14:51.900 --> 00:14:54.380
for creating this sort of really professional


00:14:54.380 --> 00:14:56.260
sort of user interface experience.


00:14:56.260 --> 00:14:59.340
And our app, so for example,


00:14:59.340 --> 00:15:01.540
if I just quickly create one,


00:15:01.540 --> 00:15:04.660
like our toolbar here is a couple of chameleon templates


00:15:04.660 --> 00:15:07.980
with Tailwind running around each of these buttons


00:15:07.980 --> 00:15:09.100
to keep them consistent,


00:15:09.100 --> 00:15:12.220
which also means that at different resolutions,


00:15:12.220 --> 00:15:13.560
the buttons will look different.


00:15:13.560 --> 00:15:15.300
So if I'm on a larger screen,


00:15:15.300 --> 00:15:16.460
there will actually be help text


00:15:16.460 --> 00:15:17.860
underneath each of these buttons.


00:15:17.860 --> 00:15:18.700
They get smaller.


00:15:18.700 --> 00:15:20.900
All that's done really nicely in Tailwind.


00:15:20.900 --> 00:15:21.720
And then we can,


00:15:21.720 --> 00:15:22.820
because it's a chameleon template


00:15:22.820 --> 00:15:24.820
running in our Python stack,


00:15:24.820 --> 00:15:28.540
we can use those toolbars in a variety of circumstances


00:15:28.540 --> 00:15:31.940
and have really granular, nice, intuitive control of them.


00:15:31.940 --> 00:15:35.740
So, you know, between Tailwind CSS and Tailwind UI,


00:15:35.740 --> 00:15:38.040
these are sort of great resources to get familiar


00:15:38.040 --> 00:15:39.300
and up and running with it.


00:15:39.300 --> 00:15:40.460
There have been a few people--


00:15:40.460 --> 00:15:42.060
- This is so, Mark, this is so nice.


00:15:42.060 --> 00:15:45.500
Just to give people a sense of like some of the size of the building blocks is


00:15:45.500 --> 00:15:49.740
we've all gone to the websites where you click pricing, for example, and it's got like the three


00:15:49.740 --> 00:15:53.500
columns and one's a little bigger and it says this is the most common or whatever.


00:15:53.500 --> 00:15:59.980
Yeah, that is just a drop in element here. And it's so beautiful, right?


00:15:59.980 --> 00:16:04.460
Yeah. And what's this is the best thing about Tailwind from my perspective is it's built


00:16:04.460 --> 00:16:11.740
principally by Adam Wathen and Steve Schroeger. And Adam, I'm probably grossly oversimplifying


00:16:11.740 --> 00:16:14.600
would be the technical component of this,


00:16:14.600 --> 00:16:16.120
and Steve is the design element.


00:16:16.120 --> 00:16:17.600
And they have some great resources.


00:16:17.600 --> 00:16:20.040
If you just, Steve's over has some wonderful videos


00:16:20.040 --> 00:16:23.000
where he sort of recomposes user interfaces


00:16:23.000 --> 00:16:26.800
and he's got a book out on refactoring UI


00:16:26.800 --> 00:16:28.280
that I think you can add to the show notes.


00:16:28.280 --> 00:16:30.600
But you're basically standing on the shoulders


00:16:30.600 --> 00:16:32.020
of these giants, right?


00:16:32.020 --> 00:16:34.240
These are fantastic design principles.


00:16:34.240 --> 00:16:36.800
Yes, I'm sure there are people that are better than me


00:16:36.800 --> 00:16:39.160
at doing this, but I know that Steve and Adam


00:16:39.160 --> 00:16:41.480
have done a fantastic job in using these components.


00:16:41.480 --> 00:16:44.000
even if I need to tweak them, I learn a lot.


00:16:44.000 --> 00:16:45.440
There are a lot of comments that people will learn


00:16:45.440 --> 00:16:48.240
a lot about CSS just watching them work


00:16:48.240 --> 00:16:51.060
and seeing how these components are built.


00:16:51.060 --> 00:16:54.120
Tailwind automatically handles lots of cool edge cases


00:16:54.120 --> 00:16:57.120
and you see that when you look at these components.


00:16:57.120 --> 00:16:58.800
And they're, you know, everything is built


00:16:58.800 --> 00:17:00.600
to be responsive from the beginning


00:17:00.600 --> 00:17:02.480
and they're just lovely to work with.


00:17:02.480 --> 00:17:04.160
- Yeah, yeah.


00:17:04.160 --> 00:17:06.520
- It's also super fast, so they're a bunch of components.


00:17:06.520 --> 00:17:08.200
Their latest release has made their


00:17:08.200 --> 00:17:11.840
just-in-time compiler native, so it's built in.


00:17:11.840 --> 00:17:15.180
It does generate a lot of CSS,


00:17:15.180 --> 00:17:18.800
but it will only do that if you're actually using,


00:17:18.800 --> 00:17:21.460
you know, certain classes or components.


00:17:21.460 --> 00:17:23.960
And so it's just been fantastic to work with.


00:17:23.960 --> 00:17:27.020
I will also say, we used this in a recent project.


00:17:27.020 --> 00:17:30.680
You can actually drop Tailwind into an existing project


00:17:30.680 --> 00:17:33.360
and avoid conflicts with existing CSS.


00:17:33.360 --> 00:17:35.480
There's a way to have a custom prefix


00:17:35.480 --> 00:17:37.320
on all the Tailwind classes,


00:17:37.320 --> 00:17:41.560
And both PyCharm and VS Code, their Tailwind plugins


00:17:41.560 --> 00:17:43.760
will adapt to that prefixing.


00:17:43.760 --> 00:17:47.400
So for example, instead of it, if you need padding,


00:17:47.400 --> 00:17:52.400
you just append or prepend TW hyphen to the classes,


00:17:52.400 --> 00:17:56.440
to the Tailwind classes, and VS Code and PyCharm


00:17:56.440 --> 00:17:58.440
will pick up that prefix.


00:17:58.440 --> 00:18:00.080
They'll still give you all the helps and prompts


00:18:00.080 --> 00:18:02.440
for Tailwind, and you'll avoid all the conflicts


00:18:02.440 --> 00:18:03.980
with your existing CSS.


00:18:03.980 --> 00:18:05.160
- Yeah, it's amazing.


00:18:05.160 --> 00:18:06.240
- And then finally, I'd say it's just,


00:18:06.240 --> 00:18:08.420
It's great with template languages.


00:18:08.420 --> 00:18:12.520
So whether it's Chameleon or Jinja or Mako,


00:18:12.520 --> 00:18:14.200
it's really nice because you're just looking


00:18:14.200 --> 00:18:16.680
at that little bit of HTML in those templates


00:18:16.680 --> 00:18:19.840
and you can just put the classes right there in the HTML


00:18:19.840 --> 00:18:22.400
and have a high confidence


00:18:22.400 --> 00:18:23.560
in what that's going to look like.


00:18:23.560 --> 00:18:25.560
- Ryan, have you played with this any?


00:18:25.560 --> 00:18:30.200
- No, but one of the things I was having a,


00:18:30.200 --> 00:18:33.080
did a little consult with somebody


00:18:33.080 --> 00:18:34.800
trying to get a startup off the ground.


00:18:34.800 --> 00:18:36.840
And I was looking at their site and I was like,


00:18:36.840 --> 00:18:38.040
man, your site looks awesome.


00:18:38.040 --> 00:18:39.200
Did you hire somebody?


00:18:39.200 --> 00:18:41.800
And they said, no, I'd use Tailwind UI.


00:18:41.800 --> 00:18:45.880
And actually, so that's the thing,


00:18:45.880 --> 00:18:47.320
the sweet spot I think,


00:18:47.320 --> 00:18:49.280
is somebody that like maybe took


00:18:49.280 --> 00:18:52.680
the Michael's entrepreneurial course or something,


00:18:52.680 --> 00:18:54.200
just like one or two people


00:18:54.200 --> 00:18:56.080
that are trying to get a business off the ground.


00:18:56.080 --> 00:18:58.920
You don't have any money, you can't hire somebody.


00:18:58.920 --> 00:19:01.480
Or maybe you do, but often you don't.


00:19:01.480 --> 00:19:03.120
So having this-- - Or it might just be


00:19:03.120 --> 00:19:05.120
- Too early to worry about that, right?


00:19:05.120 --> 00:19:07.080
- Yeah, so starting off the ground


00:19:07.080 --> 00:19:08.840
with a professional looking site,


00:19:08.840 --> 00:19:11.920
I think that's a great way to start.


00:19:11.920 --> 00:19:13.440
So, and yes, it's not free,


00:19:13.440 --> 00:19:17.120
but it's also not out of the realm of a small startup.


00:19:17.120 --> 00:19:19.840
- Yeah, I would add, we've used a lot of frameworks.


00:19:19.840 --> 00:19:22.780
We've used Bootstrap, of course, Semantic.


00:19:22.780 --> 00:19:24.280
We've used a lot of these things.


00:19:24.280 --> 00:19:26.760
And what Tailwind is nice, particularly Tailwind UI,


00:19:26.760 --> 00:19:29.040
Tailwind in general, but Tailwind UI as well,


00:19:29.040 --> 00:19:31.520
is they will give you full page references.


00:19:31.520 --> 00:19:34.600
So if I scroll down here, you'll see, for example,


00:19:34.600 --> 00:19:35.920
there's this page example.


00:19:35.920 --> 00:19:38.040
So if you need a landing page, they


00:19:38.040 --> 00:19:41.120
will show you what an entire landing page looks like.


00:19:41.120 --> 00:19:44.320
But you don't have to take the entire page.


00:19:44.320 --> 00:19:47.540
If you want to assemble these components individually


00:19:47.540 --> 00:19:51.000
into your own page structure, you can certainly do that.


00:19:51.000 --> 00:19:53.520
So here's a Feature section.


00:19:53.520 --> 00:19:55.280
It doesn't include any of the other stuff.


00:19:55.280 --> 00:19:57.600
But if you like this feature presentation,


00:19:57.600 --> 00:20:00.140
you can go grab just this bit and mix and match it.


00:20:00.140 --> 00:20:02.940
So unlike a lot of the theme kind of frameworks


00:20:02.940 --> 00:20:05.060
where you have this entire three in theme


00:20:05.060 --> 00:20:07.600
that just sort of stomps all over your design,


00:20:07.600 --> 00:20:11.380
you can actually get a custom looking output


00:20:11.380 --> 00:20:13.380
with Tailwind that's still consistent.


00:20:13.380 --> 00:20:15.700
So it's a nice balance between, you know,


00:20:15.700 --> 00:20:17.300
pretty modular granular control,


00:20:17.300 --> 00:20:20.500
but still a consistent look of the entire app or website.


00:20:20.500 --> 00:20:23.420
- And I have no doubt that like the stuff behind it,


00:20:23.420 --> 00:20:25.860
like how much CSS is there, the size,


00:20:25.860 --> 00:20:27.780
it's probably gonna be a heavier site


00:20:27.780 --> 00:20:30.820
than having somebody custom write all this stuff,


00:20:30.820 --> 00:20:32.940
but it's also gonna be cheaper, so.


00:20:32.940 --> 00:20:34.960
- Yeah, and that is true.


00:20:34.960 --> 00:20:37.400
What they have done, they have a just-in-time compiler


00:20:37.400 --> 00:20:40.160
that really minimizes the amount of CSS they produce.


00:20:40.160 --> 00:20:41.600
And then of course you can do,


00:20:41.600 --> 00:20:44.140
they recommend using PostCSS and a number of other things


00:20:44.140 --> 00:20:48.200
like CSS Nano to sort of reduce the size of those files.


00:20:48.200 --> 00:20:49.800
We still get very high performance.


00:20:49.800 --> 00:20:51.600
So keep in mind sort of our app


00:20:51.600 --> 00:20:52.800
is built entirely with Tailwind,


00:20:52.800 --> 00:20:55.880
plus we're doing a lot of math on the server side


00:20:55.880 --> 00:21:00.880
And we get very small sub-second returns on our pages


00:21:00.880 --> 00:21:03.340
as a result, even with all that stuff.


00:21:03.340 --> 00:21:04.900
- Yeah, that's cool.


00:21:04.900 --> 00:21:06.160
You've definitely inspired me, Mark,


00:21:06.160 --> 00:21:09.940
to think about rewriting a lot of what I've been doing


00:21:09.940 --> 00:21:11.360
in Tailwind, and it'll get there.


00:21:11.360 --> 00:21:12.240
I'm just not there yet.


00:21:12.240 --> 00:21:14.580
I've got other stuff to work on first.


00:21:14.580 --> 00:21:17.460
All right, before we move on, Brian,


00:21:17.460 --> 00:21:19.900
can I take a moment to tell you all about our sponsor?


00:21:19.900 --> 00:21:20.740
- Yes.


00:21:20.740 --> 00:21:23.000
- Yeah, so this week, the show is brought to you


00:21:23.000 --> 00:21:26.120
by Compiler, the Compiler podcast from Red Hat.


00:21:26.120 --> 00:21:29.280
Just like everyone on the show and everyone listening,


00:21:29.280 --> 00:21:31.040
Brian and I are fans of podcasts,


00:21:31.040 --> 00:21:33.560
and I'm super happy to share Compiler with you.


00:21:33.560 --> 00:21:35.480
Comes to you from Red Hat,


00:21:35.480 --> 00:21:37.520
a well-respected open-source company


00:21:37.520 --> 00:21:39.400
we all know of, I'm sure.


00:21:39.400 --> 00:21:41.540
So with more and more of us working from home,


00:21:41.540 --> 00:21:43.640
it's important to keep our human connection


00:21:43.640 --> 00:21:47.920
with technology, and Compiler unravels industry topics


00:21:47.920 --> 00:21:50.240
and trends, things you've always wanted to know about


00:21:50.240 --> 00:21:53.240
from tech all the way up to interviews


00:21:53.240 --> 00:21:54.400
with people who know it best.


00:21:54.400 --> 00:21:57.240
So on Compiler, you'll hear a course of perspectives


00:21:57.240 --> 00:21:59.780
from diverse communities behind the code.


00:21:59.780 --> 00:22:01.580
Conversations include questions like,


00:22:01.580 --> 00:22:02.700
what is technical debt,


00:22:02.700 --> 00:22:05.440
or what are tech managers actually looking for,


00:22:05.440 --> 00:22:08.620
and do you have to know how to code to get an open source?


00:22:08.620 --> 00:22:11.500
I was actually a guest on Red Hat's previous podcast,


00:22:11.500 --> 00:22:12.380
Command Line Heroes,


00:22:12.380 --> 00:22:15.200
and Compiler is following along in that same tradition


00:22:15.200 --> 00:22:17.660
of being an excellent, produced, and polished show.


00:22:17.660 --> 00:22:20.340
So actually the show that they just released,


00:22:20.340 --> 00:22:21.940
When Should Data Die?


00:22:21.940 --> 00:22:25.900
I think is one of those cool sort of philosophical questions


00:22:25.900 --> 00:22:28.540
of should data have a lifetime?


00:22:28.540 --> 00:22:30.180
Should your data be able to outlive you?


00:22:30.180 --> 00:22:31.660
All those kinds of things are pretty interesting.


00:22:31.660 --> 00:22:33.620
So I recommend people check it out.


00:22:33.620 --> 00:22:36.020
Just visit pythonbytes.fm/compiler.


00:22:36.020 --> 00:22:38.500
The link is in your podcast show notes.


00:22:38.500 --> 00:22:41.340
I know we're all smart developers who are listening.


00:22:41.340 --> 00:22:43.180
You can just search for compiler in your podcast player,


00:22:43.180 --> 00:22:44.940
but please sign up by clicking that link


00:22:44.940 --> 00:22:46.380
and then clicking your podcast player.


00:22:46.380 --> 00:22:47.820
it'll help them know it came from us.


00:22:47.820 --> 00:22:50.340
So thank you to Red Hat and Compiler


00:22:50.340 --> 00:22:51.780
for supporting the show.


00:22:51.780 --> 00:22:53.580
All right, I guess I'm still up, huh, Brian?


00:22:53.580 --> 00:22:55.380
So let's talk peps.


00:22:55.380 --> 00:22:57.260
This PEP is pretty interesting.


00:22:57.260 --> 00:22:59.340
This comes to us from Ijmar.


00:22:59.340 --> 00:23:02.740
It's by Jermaine Bravo and Carl Meyer,


00:23:02.740 --> 00:23:03.900
sponsored by Barry Warsaw.


00:23:03.900 --> 00:23:07.180
And it's something, honestly, I'm surprised


00:23:07.180 --> 00:23:09.940
it hasn't been covered or addressed yet.


00:23:09.940 --> 00:23:13.860
I think this comes out of Meta's Cinder project,


00:23:13.860 --> 00:23:15.860
where they're trying to do a whole bunch


00:23:15.860 --> 00:23:18.660
of performance improvements, but I'm not 100% sure,


00:23:18.660 --> 00:23:20.460
so take that with a grain of salt.


00:23:20.460 --> 00:23:23.020
Basically, the idea is, right now,


00:23:23.020 --> 00:23:25.140
what happens when I write some Python code


00:23:25.140 --> 00:23:27.420
outright at the top, import requests,


00:23:27.420 --> 00:23:30.180
import Beanie, import FastAPI.


00:23:30.180 --> 00:23:31.740
What happens when I import Beanie?


00:23:31.740 --> 00:23:34.620
Well, inside Beanie, it says import motor,


00:23:34.620 --> 00:23:36.020
import Pydantic.


00:23:36.020 --> 00:23:37.380
What happens inside motor?


00:23:37.380 --> 00:23:40.820
It says import, it's just this transitive closure


00:23:40.820 --> 00:23:42.700
of at the top of all of these projects,


00:23:42.700 --> 00:23:44.740
each one of them is importing something


00:23:44.740 --> 00:23:47.460
and like parsing and compiling the Python code


00:23:47.460 --> 00:23:50.860
as in, you know, into abstract syntax trees


00:23:50.860 --> 00:23:52.380
into memory and stuff like that.


00:23:52.380 --> 00:23:55.020
All of that happens when I write one import line, right?


00:23:55.020 --> 00:23:56.540
That's a lot.


00:23:56.540 --> 00:23:59.500
But what if there's different paths in my code


00:23:59.500 --> 00:24:02.380
and only some of the time, maybe I'm using Pydantic


00:24:02.380 --> 00:24:06.020
or only later in the app am I actually using FastAPI


00:24:06.020 --> 00:24:07.260
but not right away.


00:24:07.260 --> 00:24:09.980
And sometimes you might not use them at all, right?


00:24:09.980 --> 00:24:12.400
I could do a bunch of data science imports


00:24:12.400 --> 00:24:15.020
but only if a certain function runs do I care.


00:24:15.020 --> 00:24:19.940
So this pep, this pep-9-690 says,


00:24:19.940 --> 00:24:21.440
well, let's not do that.


00:24:21.440 --> 00:24:26.240
Let's not preload every possible path that you might run


00:24:26.240 --> 00:24:27.600
when you're gonna use a library.


00:24:27.600 --> 00:24:28.800
Let's wait until you use it.


00:24:28.800 --> 00:24:32.040
So that import fastAPI kind of just hangs there


00:24:32.040 --> 00:24:34.460
until I say fastAPI.


00:24:34.460 --> 00:24:36.680
And soon as that first line of code runs there,


00:24:36.680 --> 00:24:37.840
then the import happens.


00:24:37.840 --> 00:24:40.080
So you don't have this transitive closure


00:24:40.080 --> 00:24:43.920
all these imports if you're not actually going to use them.


00:24:43.920 --> 00:24:47.580
So it helps with startup time and it also maybe helps with


00:24:47.580 --> 00:24:50.420
overall performance if not every bit of code runs.


00:24:50.420 --> 00:24:52.460
>> I want this.


00:24:52.460 --> 00:24:55.660
>> It looks cool, right?


00:24:55.660 --> 00:24:56.660
>> One of the things-


00:24:56.660 --> 00:24:57.860
>> You can save a lot of time in startup


00:24:57.860 --> 00:24:59.620
just because of all the import statements.


00:24:59.620 --> 00:25:01.920
>> Yeah. One of the things that I face


00:25:01.920 --> 00:25:05.260
a lot with helping people is with pytest.


00:25:05.260 --> 00:25:07.580
So pytest imports your code.


00:25:07.580 --> 00:25:11.480
So it does it when it when it's well, it imports your tests,


00:25:11.480 --> 00:25:14.460
and then the tests and will import your code to run your


00:25:14.460 --> 00:25:17.840
code. But if you're running, if you're going to like, for


00:25:17.840 --> 00:25:21.520
instance, Ray, stop on the first failure, you're not going to hit


00:25:21.520 --> 00:25:26.000
a whole bunch of that code. And so avoiding, avoiding those and


00:25:26.000 --> 00:25:29.720
getting to start earlier, it would help help that. And, you


00:25:29.720 --> 00:25:33.440
know, that's just one example of startup time being helped. Now,


00:25:33.500 --> 00:25:40.900
I'm curious about how it helped, if it'll affect runtime early on, otherwise, you know,


00:25:40.900 --> 00:25:41.900
at post startup.


00:25:41.900 --> 00:25:45.220
There's some conversations about compatibility.


00:25:45.220 --> 00:25:50.180
So what could happen is there could be side effects that happen because of the import,


00:25:50.180 --> 00:25:51.180
right?


00:25:51.180 --> 00:25:55.180
You're not supposed to make changes to the system, but that's arbitrary code writing


00:25:55.180 --> 00:25:56.540
during your import statement, right?


00:25:56.540 --> 00:25:59.260
So it could have an effect.


00:25:59.260 --> 00:26:01.860
So theoretically, this could change things.


00:26:01.860 --> 00:26:05.860
And they refer to the not the lazy ones as eager imports.


00:26:05.860 --> 00:26:10.700
But they do talk about how some of these, you'll have to pass a runtime flag to the


00:26:10.700 --> 00:26:14.900
Python interpreter or set an environment variable for this to happen by default.


00:26:14.900 --> 00:26:16.180
It won't happen by default.


00:26:16.180 --> 00:26:18.140
It's off by default.


00:26:18.140 --> 00:26:20.840
So for better or worse, maybe someday that'll change.


00:26:20.840 --> 00:26:21.840
But right now,


00:26:21.840 --> 00:26:22.840
That's pretty cool.


00:26:22.840 --> 00:26:23.840
I like it.


00:26:23.840 --> 00:26:24.840
Yeah.


00:26:24.840 --> 00:26:25.840
Yep, indeed.


00:26:25.840 --> 00:26:27.940
Ben, Mark, you guys have thoughts on this?


00:26:27.940 --> 00:26:28.940
Yeah, I agree.


00:26:28.940 --> 00:26:33.940
I think this is really interesting from the front-end world, where I spend a lot of time, too.


00:26:33.940 --> 00:26:38.940
There's a billion analogs for this. We do all kinds of jumping through hoops from the old days,


00:26:38.940 --> 00:26:43.940
code splitting in the old days, and all kinds of webpack and a million other roll-up


00:26:43.940 --> 00:26:48.940
and all sorts of ways of trying to take advantage of this on the client side because of the browser.


00:26:48.940 --> 00:26:55.940
But I can actually imagine a lot of situations using Python where what in one app,


00:26:55.940 --> 00:26:58.980
maybe it is just limited to that moment of startup.


00:26:58.980 --> 00:27:03.940
But I can imagine a lot of situations where the way that your app or your service is being used is


00:27:03.940 --> 00:27:14.100
causing that initial run event to be an experience that the user is having on a more frequent basis,


00:27:14.100 --> 00:27:15.940
based on what you're doing or what you've constructed.


00:27:15.940 --> 00:27:17.700
So that's actually really cool.


00:27:17.700 --> 00:27:20.340
And I haven't thought much about this, but I kind of agree with you.


00:27:20.340 --> 00:27:21.700
Sort of surprised now that I see it.


00:27:21.700 --> 00:27:24.020
>> I should have always done this, right?


00:27:24.020 --> 00:27:26.100
- I've heard that conversation before.


00:27:26.100 --> 00:27:27.140
- Yeah, absolutely.


00:27:27.140 --> 00:27:31.340
And I also wonder if it allows you to have code


00:27:31.340 --> 00:27:35.540
that can be less, have more optional dependencies installed.


00:27:35.540 --> 00:27:39.260
So like, for example, I think it was a FastAPI.


00:27:39.260 --> 00:27:43.060
There's some support for form stuff you have to install


00:27:43.060 --> 00:27:44.880
as a separate pip dependency.


00:27:44.880 --> 00:27:46.980
And here you could just write that code


00:27:46.980 --> 00:27:48.500
and unless you actually run it,


00:27:48.500 --> 00:27:50.260
it doesn't matter if you have import that thing


00:27:50.260 --> 00:27:53.700
that's missing because not until does it try to use it,


00:27:53.700 --> 00:27:54.540
Is it gonna be a problem?


00:27:54.540 --> 00:27:56.460
So it might allow you to write simpler code.


00:27:56.460 --> 00:27:57.580
Let's see, out in the audience,


00:27:57.580 --> 00:27:58.860
Eddie Bergman says,


00:27:58.860 --> 00:28:00.300
I feel like with it opt-in,


00:28:00.300 --> 00:28:01.780
many people won't know to use it,


00:28:01.780 --> 00:28:04.580
but making it opt-out could break so many systems


00:28:04.580 --> 00:28:05.460
depending on the behavior.


00:28:05.460 --> 00:28:08.380
So yeah, it's, I don't know what the right choice is,


00:28:08.380 --> 00:28:10.420
so I guess the safe one is to just opt-out,


00:28:10.420 --> 00:28:11.940
or to make people opt-in.


00:28:11.940 --> 00:28:12.780
- Yeah.


00:28:12.780 --> 00:28:15.180
- And Beanie, the author of,


00:28:15.180 --> 00:28:17.300
sorry, Roman Wright, the author of Beanie,


00:28:17.300 --> 00:28:19.540
gives it definitely a thumbs up for this idea as well.


00:28:19.540 --> 00:28:21.260
So support for some framework,


00:28:21.260 --> 00:28:22.260
author's there as well.


00:28:22.260 --> 00:28:25.020
All right, Brian, what do you got for your last one here?


00:28:25.020 --> 00:28:26.940
Hope it's something rich for us.


00:28:26.940 --> 00:28:28.580
- Well, I've got a couple of things that,


00:28:28.580 --> 00:28:29.620
a couple of these are small,


00:28:29.620 --> 00:28:32.940
so it's sort of a multi-grab bag.


00:28:32.940 --> 00:28:37.700
pytest Rich, so this is a plugin for pytest that uses Rich.


00:28:37.700 --> 00:28:39.780
Not much more to say other than it's kind of cool


00:28:39.780 --> 00:28:42.860
to use Rich to have some nice output.


00:28:42.860 --> 00:28:47.140
This was done by Bruno Oliveira,


00:28:47.140 --> 00:28:49.660
who is one of the core people on pytest,


00:28:49.660 --> 00:28:53.020
And also the only other person on the planet that I know of


00:28:53.020 --> 00:28:55.820
that has written a book focused on pytest.


00:28:55.820 --> 00:28:56.740
But cool guy.


00:28:56.740 --> 00:29:00.560
He said this is a proof of concept


00:29:00.560 --> 00:29:02.900
and he'd love for somebody else to take it over.


00:29:02.900 --> 00:29:05.420
But it doesn't look like it's dead or anything.


00:29:05.420 --> 00:29:06.740
It's got some activity.


00:29:06.740 --> 00:29:09.020
So anyway, I think this is fun.


00:29:09.020 --> 00:29:13.500
So cool opportunity for people to jump in if they want to.


00:29:13.500 --> 00:29:14.660
- Nice.


00:29:14.660 --> 00:29:15.860
Question from the audience, Ryan.


00:29:15.860 --> 00:29:17.620
How's it compared to pytest Sugar?


00:29:17.620 --> 00:29:18.460
- I haven't.


00:29:18.460 --> 00:29:19.300
- I'll borrow.


00:29:19.300 --> 00:29:22.020
- I've used Sugar for a really long time,


00:29:22.020 --> 00:29:23.580
but you can look at the image.


00:29:23.580 --> 00:29:26.180
So it looks like a similar to Sugar,


00:29:26.180 --> 00:29:29.820
but Sugar doesn't have these cool rich trace backs in it.


00:29:29.820 --> 00:29:32.160
So there's that.


00:29:32.160 --> 00:29:33.660
So the next thing I wanted to talk about


00:29:33.660 --> 00:29:35.580
before we move on to somebody else


00:29:35.580 --> 00:29:37.940
is a short little thing.


00:29:37.940 --> 00:29:41.780
This was a recommended by actually the Pytest Rich


00:29:41.780 --> 00:29:43.180
was recommended by Brian Skin.


00:29:43.180 --> 00:29:44.020
Thanks, Brian.


00:29:44.020 --> 00:29:47.660
And then this is recommended by Henrik Finnsberg


00:29:47.660 --> 00:29:52.660
is a video by Anthony Sotile on how to get images


00:29:52.660 --> 00:29:54.620
in readmes.


00:29:54.620 --> 00:29:55.940
And I guess I didn't know how to do this.


00:29:55.940 --> 00:29:58.280
We encourage, and I wanted to bring this up


00:29:58.280 --> 00:30:00.520
'cause we encourage everybody to put pictures


00:30:00.520 --> 00:30:03.180
and animated GIFs and all that sort of stuff in your readme


00:30:03.180 --> 00:30:07.060
so that when we re-review stuff, we can see what it does.


00:30:07.060 --> 00:30:09.680
It helps, but it's not hard.


00:30:09.680 --> 00:30:12.700
So Anthony goes through this whole thing of like,


00:30:12.700 --> 00:30:15.480
you don't have to put the image in your repo.


00:30:15.480 --> 00:30:18.520
you just have to drop it into a comment field


00:30:18.520 --> 00:30:20.800
or in a repo edit field,


00:30:20.800 --> 00:30:25.800
and then GitHub will just put it on a CDN somewhere.


00:30:25.800 --> 00:30:27.160
So the image is just there.


00:30:27.160 --> 00:30:29.000
So some magic there.


00:30:29.000 --> 00:30:31.160
- Kind of trick GitHub into uploading it


00:30:31.160 --> 00:30:32.840
and then not actually.


00:30:32.840 --> 00:30:35.960
- Well, I mean, since the README supports it,


00:30:35.960 --> 00:30:36.800
it's interesting.


00:30:36.800 --> 00:30:41.800
Anthony talks about using a comment field of your issues


00:30:44.720 --> 00:30:48.480
to drop a picture in and then you get the URL from that.


00:30:48.480 --> 00:30:50.480
But if you just go into your readme


00:30:50.480 --> 00:30:55.160
within GitHub on the web interface and edit there,


00:30:55.160 --> 00:30:59.160
you can also drop it there and it just works fine.


00:30:59.160 --> 00:31:00.760
I guess maybe he's thinking that you're probably


00:31:00.760 --> 00:31:02.920
not gonna edit your readme directly,


00:31:02.920 --> 00:31:05.400
you'll probably edit it locally and push it in,


00:31:05.400 --> 00:31:06.520
you can still do that.


00:31:06.520 --> 00:31:08.600
It's neat.


00:31:08.600 --> 00:31:10.160
- Yeah, very nice.


00:31:10.160 --> 00:31:12.000
Yeah, people should definitely have pictures


00:31:12.000 --> 00:31:15.200
and explanations and charts and all sorts of stuff


00:31:15.200 --> 00:31:17.440
in their readme, so this is great.


00:31:17.440 --> 00:31:19.320
- I would just add more generally,


00:31:19.320 --> 00:31:24.320
docs and tutorials can be a strategic asset when done well.


00:31:24.320 --> 00:31:26.160
Tailwind does this amazingly well,


00:31:26.160 --> 00:31:27.440
EdgeDB does it really well,


00:31:27.440 --> 00:31:30.620
DigitalOcean is off the chart in the comprehensiveness


00:31:30.620 --> 00:31:31.800
and thoroughness of there.


00:31:31.800 --> 00:31:33.640
And those things become an asset for the business


00:31:33.640 --> 00:31:35.560
instead of an annoyance that you have to do,


00:31:35.560 --> 00:31:37.400
the docs actually become valuable


00:31:37.400 --> 00:31:39.280
for the project or the business.


00:31:39.280 --> 00:31:40.120
- Do you want to be there


00:31:40.120 --> 00:31:43.000
Or do you regret that you have to go there, right?


00:31:43.000 --> 00:31:44.340
- Right, exactly.


00:31:44.340 --> 00:31:47.020
- All right, Ben, you wanna take us out of here


00:31:47.020 --> 00:31:48.360
with your final main topic?


00:31:48.360 --> 00:31:52.000
- Yeah, so as you mentioned,


00:31:52.000 --> 00:31:55.720
part of our latest project, LexChart,


00:31:55.720 --> 00:31:57.400
that Mark's talked a little bit about,


00:31:57.400 --> 00:31:58.520
one of the things that we had to do,


00:31:58.520 --> 00:32:01.720
despite the fact that as we were getting close to it,


00:32:01.720 --> 00:32:04.240
I realized you can use LexChart for a lot of things


00:32:04.240 --> 00:32:06.320
that maybe we didn't think about


00:32:06.320 --> 00:32:09.320
when my 12-year-old daughter sent me,


00:32:09.320 --> 00:32:12.020
I spun her up an account so she could tinker with it,


00:32:12.020 --> 00:32:15.220
so I could get an interesting test case out of somebody


00:32:15.220 --> 00:32:17.220
that has no connection to what we're doing.


00:32:17.220 --> 00:32:20.520
And she sent me a little organization chart


00:32:20.520 --> 00:32:23.860
of Encanto characters and their family tree


00:32:23.860 --> 00:32:25.760
from the movie Encanto.


00:32:25.760 --> 00:32:31.520
So I wasn't expecting, but she's not really our typical user.


00:32:31.520 --> 00:32:35.880
And with our target audience, who looks a lot like I


00:32:35.880 --> 00:32:39.300
did in my former life, security is a big, big deal.


00:32:39.300 --> 00:32:43.520
with our clients. And so one of the things we obviously had to look at is,


00:32:43.520 --> 00:32:48.300
you know, we need to implement some multi-factor authentication. And, you know,


00:32:48.300 --> 00:32:52.860
initially my knee-jerk reaction to that was, "Okay, yeah, we'll just do what


00:32:52.860 --> 00:32:57.480
everybody does and, you know, we'll set it up and you'll get an SMS message on


00:32:57.480 --> 00:33:02.200
your phone," and all that kind of stuff. But as I looked at that more and


00:33:02.200 --> 00:33:07.480
thought about some of the conversations we'd had with clients of some of our


00:33:07.480 --> 00:33:12.480
other software, you know, I wondered how long is that really going to last?


00:33:12.480 --> 00:33:18.680
Because there's a number of kind of real security issues with, with SMS, not


00:33:18.680 --> 00:33:21.380
least of which is, you know, just the way voice networks are built, everything


00:33:21.380 --> 00:33:25.840
sent in, in clear text, it's actually really not that hard to, yeah.


00:33:25.840 --> 00:33:28.740
It works, but people do look down upon it a little bit.


00:33:28.740 --> 00:33:31.580
They're like, this is not quite real security.


00:33:31.580 --> 00:33:33.700
This is better than nothing, but right.


00:33:33.700 --> 00:33:34.760
Yeah, exactly.


00:33:34.760 --> 00:33:34.980
Right.


00:33:34.980 --> 00:33:39.580
And it's not to say, you know, you make me a point, it's everywhere.


00:33:39.580 --> 00:33:40.580
Everyone's using it.


00:33:40.580 --> 00:33:43.460
And, you know, by the way, yeah, absolutely.


00:33:43.460 --> 00:33:48.120
You know, password plus MFA, even with SMS, is great.


00:33:48.120 --> 00:33:51.200
It's so much better than the password only from a security standpoint.


00:33:51.200 --> 00:33:52.700
So it's not a knock on it.


00:33:52.700 --> 00:33:56.200
You know, I just thought, well, maybe we need to step one more step forward here


00:33:56.200 --> 00:33:58.300
and see if there's some other things.


00:33:58.300 --> 00:34:02.040
And so, you know, I was looking for a library that could help us with one-time


00:34:02.040 --> 00:34:05.640
password stuff and specifically one that can help us with time-based,


00:34:05.640 --> 00:34:10.180
uh, one-time password implementations, which is something that I think Google


00:34:10.180 --> 00:34:13.140
really ultimately started, this way back.


00:34:13.140 --> 00:34:17.140
And that's why a lot of people associate this with the Google authenticator app.


00:34:17.140 --> 00:34:19.580
Um, but there's actually a lot of authenticators.


00:34:19.580 --> 00:34:20.620
It's an open standard.


00:34:20.620 --> 00:34:24.820
Um, and it really is closely connected to what's happening when you do it.


00:34:24.820 --> 00:34:28.780
With SMS or with email, both of those are similar in that, you


00:34:28.780 --> 00:34:30.320
know, both of these approaches.


00:34:30.340 --> 00:34:33.940
they just lean on a moving factor.


00:34:33.940 --> 00:34:35.660
So in the case of your SMS,


00:34:35.660 --> 00:34:38.580
that moving factor is just usually like a counter in the database,


00:34:38.580 --> 00:34:40.540
just clicking forward and whatever,


00:34:40.540 --> 00:34:43.940
and that's along with all the other secret sauces,


00:34:43.940 --> 00:34:48.760
generating these temporary codes, if you will.


00:34:48.760 --> 00:34:51.100
In Timebase, the moving factor is time.


00:34:51.100 --> 00:34:53.780
What that allows you to do is have


00:34:53.780 --> 00:34:55.820
an authenticator app where you don't


00:34:55.820 --> 00:34:58.460
actually have to communicate with that at all,


00:34:58.460 --> 00:35:00.800
But based on a shared secret,


00:35:00.800 --> 00:35:03.460
again, same as how you do with SMS.


00:35:03.460 --> 00:35:08.060
You're able to sync up these passwords and then they have,


00:35:08.060 --> 00:35:10.100
they explode if you will,


00:35:10.100 --> 00:35:13.660
so they last for 30 seconds and all that thing.


00:35:13.660 --> 00:35:17.140
>> Yeah, the library you're highlighting here is PyOTP,


00:35:17.140 --> 00:35:19.300
which I guess lets you do this really easy in Python.


00:35:19.300 --> 00:35:21.100
>> It does. Yeah, it makes it really,


00:35:21.100 --> 00:35:23.060
really straightforward.


00:35:23.060 --> 00:35:26.780
I've in the notes,


00:35:26.780 --> 00:35:33.100
people will be able to see. I put a couple of representative functions that you could use to


00:35:33.100 --> 00:35:37.980
do this, but it's a very small amount of code. Basically, you generate a secret, you store it


00:35:37.980 --> 00:35:45.740
with your user credentials, then when you're actually verifying somebody, they come in,


00:35:45.740 --> 00:35:52.060
you have the shared secret in there, they pull up their little authenticator app on their phone.


00:35:54.140 --> 00:35:59.500
I think most people know what this looks like, but we'll do this there.


00:35:59.500 --> 00:36:02.220
So that's the Google Authenticator app.


00:36:02.220 --> 00:36:08.620
And so it gives you a little code and you can see it ticking down and all that kind of stuff.


00:36:08.620 --> 00:36:11.980
And so instead of getting your SMS, you just pull up your code, you hit your app,


00:36:11.980 --> 00:36:14.940
you type it in, and then your users are putting that.


00:36:14.940 --> 00:36:17.020
And then you're just running that through the verifier.


00:36:17.020 --> 00:36:20.140
And based on this share secret, it says, yeah, you're the real guy.


00:36:20.140 --> 00:36:20.540
Great.


00:36:20.540 --> 00:36:22.140
And every 30 seconds, those go away.


00:36:22.140 --> 00:36:25.980
So even if somebody just looked at mine for my Google Authenticator,


00:36:25.980 --> 00:36:28.540
you've got 30 seconds to figure out my password.


00:36:28.540 --> 00:36:29.840
Exactly.


00:36:29.840 --> 00:36:34.140
If you can get into that test account that I'm showing you that for.


00:36:34.140 --> 00:36:37.580
But yeah, it's super, super simple to implement.


00:36:37.580 --> 00:36:44.140
The only thing for the Python crowd here is that it is helpful from a setup standpoint


00:36:44.140 --> 00:36:45.660
to do a little bit of front-end work,


00:36:45.660 --> 00:36:50.700
because the easiest way for users to set this up is to scan a QR code.


00:36:51.500 --> 00:36:55.340
And so we have that implement on the front end


00:36:55.340 --> 00:37:00.540
where you can see that QR code and scan it from a setup.


00:37:00.540 --> 00:37:03.260
But those little functions I put in the show notes,


00:37:03.260 --> 00:37:05.820
you just spin up a little URI.


00:37:05.820 --> 00:37:08.660
You can put that into any kind of QR code generator,


00:37:08.660 --> 00:37:10.860
including Python-based generators,


00:37:10.860 --> 00:37:12.900
if you actually want to do that, store the image on the server


00:37:12.900 --> 00:37:13.940
and then serve it up.


00:37:13.940 --> 00:37:16.420
In our case, I actually do that on the JavaScript side.


00:37:16.420 --> 00:37:18.620
And I put a little link to QR code.


00:37:18.620 --> 00:37:21.180
which is kind of one of the most widely used,


00:37:21.180 --> 00:37:24.740
you know, NPM packages for that purpose.


00:37:24.740 --> 00:37:26.140
Display that to user, they scan it,


00:37:26.140 --> 00:37:27.780
they set it up, they pair that first time,


00:37:27.780 --> 00:37:28.980
and then, you know,


00:37:28.980 --> 00:37:30.540
takes a little getting used to for the user.


00:37:30.540 --> 00:37:31.740
I think, you know, at the end of the day,


00:37:31.740 --> 00:37:34.220
SMS is a little more user-friendly,


00:37:34.220 --> 00:37:36.180
just 'cause people are a little bit more familiar with it.


00:37:36.180 --> 00:37:37.980
This isn't a big leap.


00:37:37.980 --> 00:37:40.740
So we went here instead of something like WebAuthn,


00:37:40.740 --> 00:37:43.060
which is, you know, even probably better


00:37:43.060 --> 00:37:44.280
from a security standpoint,


00:37:44.280 --> 00:37:46.420
but I think a bigger leap for users.


00:37:46.420 --> 00:37:48.460
So we just think it's a cool little library.


00:37:48.460 --> 00:37:50.260
It's easy, it's purpose-built.


00:37:50.260 --> 00:37:52.260
Literally those few lines of code that Sean puts,


00:37:52.260 --> 00:37:54.120
it's almost everything that you would need


00:37:54.120 --> 00:37:55.460
to implement this on the backend.


00:37:55.460 --> 00:37:57.220
There really isn't anything else.


00:37:57.220 --> 00:37:58.040
- It's amazing.


00:37:58.040 --> 00:37:59.220
I've always avoided doing this


00:37:59.220 --> 00:38:01.300
because I'm like, ah, it's probably kind of complicated.


00:38:01.300 --> 00:38:02.980
I don't want to screw it up and unlock people out,


00:38:02.980 --> 00:38:05.860
but it looks really simple and fantastic


00:38:05.860 --> 00:38:06.860
and straightforward.


00:38:06.860 --> 00:38:09.100
So yeah, this is a great suggestion for people.


00:38:09.100 --> 00:38:10.180
- Yeah, cool.


00:38:10.180 --> 00:38:12.740
- Brian, have you had to do any of this?


00:38:12.740 --> 00:38:16.740
- No, but I do have like a Sass app in the works


00:38:16.740 --> 00:38:19.340
that I don't think I'll get that complicated.


00:38:19.340 --> 00:38:22.220
'Cause I think for somebody like with GitHub,


00:38:22.220 --> 00:38:25.220
we have to use it, like something like that for GitHub now,


00:38:25.220 --> 00:38:27.440
or you can, and I have set it up.


00:38:27.440 --> 00:38:32.380
But some people, for some kind of apps,


00:38:32.380 --> 00:38:33.500
it depends on your audience.


00:38:33.500 --> 00:38:35.500
Some audiences aren't really gonna want that.


00:38:35.500 --> 00:38:36.660
- Sure.


00:38:36.660 --> 00:38:38.820
It also depends on what you're protecting.


00:38:38.820 --> 00:38:39.640
- Yeah, exactly.


00:38:39.640 --> 00:38:42.380
Most of our clients are B2B large corporations


00:38:42.380 --> 00:38:43.460
sort of all over the world,


00:38:43.460 --> 00:38:45.940
and many of them already have these authenticator apps.


00:38:45.940 --> 00:38:48.980
And the nice thing about this solution is it works with any of them.


00:38:48.980 --> 00:38:54.860
So you don't have to as a business, you don't have to direct your clients to use a particular authenticator app.


00:38:54.860 --> 00:39:02.660
So if you're using Microsoft or Google or Twilio's Authy or any others, you know, you can just plug this in and just use it.


00:39:02.660 --> 00:39:07.780
You know, we test and validate on those three, but it'll likely work on any of them.


00:39:07.780 --> 00:39:10.980
And so it's really nice in that corporate environment to just to slide in.


00:39:11.220 --> 00:39:17.760
Yeah, and I should have emphasized for this audience, one of the great things about this is SMS is not expensive, but this is free.


00:39:17.760 --> 00:39:21.400
It's free for you from a developer standpoint, and it's free for your users.


00:39:21.400 --> 00:39:23.580
These Authenticator apps are free downloads.


00:39:23.580 --> 00:39:30.220
This isn't, you know, you're not imposing any friction on your users from that standpoint, just a tiny bit of a learning curve for them.


00:39:30.220 --> 00:39:40.460
But I think what you find, like you said, GitHub, you can link an Authenticator app to GitHub if you want to add MFA to your GitHub login, which, you know, I would say most of your listeners probably are familiar with.


00:39:40.460 --> 00:39:43.300
And so, you know, if you're wondering about it, I'd encourage you to just try that.


00:39:43.300 --> 00:39:46.780
Download Google Authenticator, Microsoft Authenticator, implement their MFA.


00:39:46.780 --> 00:39:48.180
You'll see what the experience is like.


00:39:48.180 --> 00:39:52.780
And you'll probably find that not really probably a big hard sell with your clients.


00:39:52.780 --> 00:39:56.380
If in fact MFA is something you need, as you say, you don't need it, you don't need it.


00:39:56.380 --> 00:39:57.940
But if you do, you know you do.


00:39:57.940 --> 00:40:05.900
And, you know, this is a solution I think people should consider because I think SMS, you know, is fine and great.


00:40:05.900 --> 00:40:08.220
But obviously, the more widespread it becomes,


00:40:08.220 --> 00:40:11.620
the more likely people are to attack it.


00:40:11.620 --> 00:40:13.600
And the hacks on this are not hard.


00:40:13.600 --> 00:40:17.100
My favorite one is using a cell signal booster, which


00:40:17.100 --> 00:40:19.560
some of you have heard of, especially some of your listeners


00:40:19.560 --> 00:40:21.220
that don't live in urban areas and whatever.


00:40:21.220 --> 00:40:25.260
And I'm not encouraging this, but if you poke around just


00:40:25.260 --> 00:40:27.300
a little bit, it's not going to be very hard for you to figure out


00:40:27.300 --> 00:40:28.900
how to hack a cell signal booster.


00:40:28.900 --> 00:40:30.660
And people don't even know they're attached to it.


00:40:30.660 --> 00:40:33.780
And you can listen to everything and record all their texts and all that.


00:40:33.780 --> 00:40:37.680
So that's a nervous getting ideas.


00:40:37.680 --> 00:40:40.780
I got to go guys.


00:40:40.780 --> 00:40:43.740
I, I, I love having this.


00:40:43.740 --> 00:40:48.180
I use Authy and I just checked my Authy has 45 different accounts doing two


00:40:48.180 --> 00:40:50.660
FA MFA, which is fantastic.


00:40:50.660 --> 00:40:50.940
Yeah.


00:40:50.940 --> 00:40:51.900
I like Authy as well.


00:40:51.900 --> 00:40:52.500
Yeah.


00:40:52.500 --> 00:40:54.580
Brian, what else we got?


00:40:54.580 --> 00:40:56.860
Uh, well, I've got a few extras.


00:40:56.860 --> 00:40:58.340
Uh, do you have any extras?


00:40:58.340 --> 00:40:59.980
Um, you know, I do.


00:40:59.980 --> 00:41:00.260
All right.


00:41:00.260 --> 00:41:00.700
Yeah.


00:41:00.700 --> 00:41:02.220
I'll, I'll, I'll do my first.


00:41:02.500 --> 00:41:04.900
So let's start with some real quick ones.


00:41:04.900 --> 00:41:11.640
First of all, Mac Rumors points out that the machine learning framework PyTorch,


00:41:11.640 --> 00:41:15.040
traditionally these have been like mainstream GPU,


00:41:15.040 --> 00:41:17.540
these machine learning training frameworks,


00:41:17.540 --> 00:41:20.440
and especially focused on NVIDIA,


00:41:20.440 --> 00:41:23.300
which if you're on a Mac is a problem because you don't have NVIDIA,


00:41:23.300 --> 00:41:28.400
not even before the M1 stuff, you had Radeon chips and stuff.


00:41:28.400 --> 00:41:32.480
So doing hardware-based machine acceleration was really tricky.


00:41:32.480 --> 00:41:35.040
They are now supporting Metal on Apple,


00:41:35.040 --> 00:41:37.380
which means you get GPU accelerated training


00:41:37.380 --> 00:41:39.180
on the new Apple Silicon Macs,


00:41:39.180 --> 00:41:41.640
including the M1 Ultra and all that stuff.


00:41:41.640 --> 00:41:45.140
So if people are on M1, they may check that out.


00:41:45.140 --> 00:41:46.180
That sounds good.


00:41:46.180 --> 00:41:47.180
Let's see.


00:41:47.180 --> 00:41:49.940
I got a message from Harry.


00:41:49.940 --> 00:41:52.980
This is a 15-year-old kid who said,


00:41:52.980 --> 00:41:54.780
"Hey, I built this learning platform


00:41:54.780 --> 00:41:58.180
"and a bunch of tutorials with my cousin, Anna, who's 14."


00:41:58.180 --> 00:42:00.380
And they built this app, which I'll link into,


00:42:00.380 --> 00:42:02.240
called Mission Encodable, and you come in


00:42:02.240 --> 00:42:06.540
that you can do little tutorials and you've got like little lessons and


00:42:06.540 --> 00:42:08.500
achievements to do after and stuff.


00:42:08.500 --> 00:42:11.800
So anyway, I just thought I'd give him a shout out because it's really cool that


00:42:11.800 --> 00:42:14.100
a 15 and a 14 year old put this together for people.


00:42:14.100 --> 00:42:14.720
Yeah.


00:42:14.720 --> 00:42:15.300
Very cool.


00:42:15.300 --> 00:42:15.780
Yeah.


00:42:15.780 --> 00:42:16.380
All right.


00:42:16.380 --> 00:42:18.260
Uh, two real quick things as well.


00:42:18.260 --> 00:42:21.900
I use Calendly, Calendly, not misstating that.


00:42:21.900 --> 00:42:22.620
That's how it's supposed to be.


00:42:22.620 --> 00:42:27.040
Calendly.com, which is great for like sharing your available free time.


00:42:27.040 --> 00:42:29.060
People can sign up and book slots with you.


00:42:29.260 --> 00:42:33.340
I recently learned about cal.com, which is an open source.


00:42:33.340 --> 00:42:36.380
Parallel or equivalent to calendly.com.


00:42:36.380 --> 00:42:40.460
So if you can self host it, or you have a free version, you can even have them


00:42:40.460 --> 00:42:43.180
host it for more pro things if you want.


00:42:43.180 --> 00:42:44.660
But I just thought it was kind of cool.


00:42:44.660 --> 00:42:47.460
There's an open source cal.com, which is Calendly.


00:42:47.460 --> 00:42:51.700
And on the same vein, if you've heard about Firebase, which is kind of like the


00:42:51.700 --> 00:42:57.320
backend platform for so many mobile apps and stuff, so you don't have to have a


00:42:57.320 --> 00:42:59.840
a website and an API and a database and users,


00:42:59.840 --> 00:43:03.040
like this would handle all of those things for Firebase.


00:43:03.040 --> 00:43:05.560
There's, I also heard about Supabase,


00:43:05.560 --> 00:43:07.960
like super but without the R, Supabase,


00:43:07.960 --> 00:43:10.080
which is the open source equivalent of that,


00:43:10.080 --> 00:43:13.340
so you can have sort of like the back end cloud for free


00:43:13.340 --> 00:43:16.460
for your, an open source for your mobile things,


00:43:16.460 --> 00:43:17.840
if you care about that.


00:43:17.840 --> 00:43:21.160
And yeah, so those are my,


00:43:21.160 --> 00:43:24.200
oh, I have one more actually I wanna share with you.


00:43:24.200 --> 00:43:28.040
So we've all heard about PyScript, right?


00:43:28.040 --> 00:43:29.040
PyScript is awesome.


00:43:29.040 --> 00:43:30.600
This comes from Anaconda.


00:43:30.600 --> 00:43:34.520
It takes the CPython runtime and turns it into WebAssembly


00:43:34.520 --> 00:43:36.300
and then runs it in your browser.


00:43:36.300 --> 00:43:40.240
And I've been looking at the PyScript.net website


00:43:40.240 --> 00:43:41.980
and they've got all sorts of cool stuff in there.


00:43:41.980 --> 00:43:44.880
And if you go to PyScript/examples,


00:43:44.880 --> 00:43:47.040
there's actually a bunch of examples.


00:43:47.040 --> 00:43:49.240
You showed the one, you covered this last time.


00:43:49.240 --> 00:43:51.160
I think it was last time or time before.


00:43:51.160 --> 00:43:53.040
You covered the anti-gravity one


00:43:53.040 --> 00:43:54.320
and those kinds of things, right?


00:43:54.320 --> 00:43:56.280
What's lacking from here is anything that looks like


00:43:56.280 --> 00:43:59.000
a regular application, right?


00:43:59.000 --> 00:43:59.840
- Yeah.


00:43:59.840 --> 00:44:01.160
- So I said, well--


00:44:01.160 --> 00:44:02.680
- What's the to-do app?


00:44:02.680 --> 00:44:05.920
- The to-do app is not a regular, you gotta, come on now.


00:44:05.920 --> 00:44:07.840
(laughing)


00:44:07.840 --> 00:44:08.940
No, no, it's, you're right though,


00:44:08.940 --> 00:44:10.920
that is the absolute closest by far.


00:44:10.920 --> 00:44:14.160
But everything here says, data science, data science,


00:44:14.160 --> 00:44:16.880
I want Jupyter in the browser,


00:44:16.880 --> 00:44:18.960
but not with a server, run it in the browser.


00:44:18.960 --> 00:44:21.800
And that's fine, but that comes, I think,


00:44:21.800 --> 00:44:23.400
far short of the potential.


00:44:23.400 --> 00:44:23.960
Okay.


00:44:23.960 --> 00:44:28.160
So I, this weekend, I'm like, I'm going to fix this.


00:44:28.160 --> 00:44:32.200
And the way I'm fixing it is with this project in a video that I was working


00:44:32.200 --> 00:44:35.260
on right before we jumped on, I'll publish it later today called


00:44:35.260 --> 00:44:38.720
the PI script PWA weather app.


00:44:38.720 --> 00:44:39.800
So check this out.


00:44:39.800 --> 00:44:41.120
See this thing here on the screen.


00:44:41.120 --> 00:44:45.440
This is an application that installs in your doc offline.


00:44:45.440 --> 00:44:46.640
It installs in your doc.


00:44:46.640 --> 00:44:51.440
It's written in Python and PI script and with Python on the front end and has no


00:44:51.440 --> 00:44:54.240
back in stuff locally, felt like electron or something like that.


00:44:54.240 --> 00:44:55.940
It's a progressive web app.


00:44:55.940 --> 00:45:00.240
It downloads all the files, including the 15 megabytes of the


00:45:00.240 --> 00:45:01.880
Pio died runtime and PI script.


00:45:01.880 --> 00:45:02.920
Puts it offline.


00:45:02.920 --> 00:45:06.160
And when you run it, it just starts instantly.


00:45:06.160 --> 00:45:10.880
So from a cold launch until you have this thing up and running, it's about two


00:45:10.880 --> 00:45:15.920
seconds and it goes out and it talks to an API and gets this cool weather here.


00:45:15.920 --> 00:45:17.360
And like, you can have a little button.


00:45:17.360 --> 00:45:18.480
You press this refresh button.


00:45:18.480 --> 00:45:19.960
It goes pop, pop, pop, refresh.


00:45:20.200 --> 00:45:23.080
It's as you click it, it's instantaneous,


00:45:23.080 --> 00:45:24.440
the way it sort of interacts with it.


00:45:24.440 --> 00:45:26.840
And all of it is written on the front end


00:45:26.840 --> 00:45:28.920
using stuff that you would recognize,


00:45:28.920 --> 00:45:32.600
stuff that looks like requests and JSON and Python classes


00:45:32.600 --> 00:45:35.160
and try, accept and everything.


00:45:35.160 --> 00:45:36.160
- That's pretty cool.


00:45:36.160 --> 00:45:37.940
- It is, here let me actually pull up a little bit of code


00:45:37.940 --> 00:45:39.560
really quick just to show you all.


00:45:39.560 --> 00:45:41.440
So check it out, we've got our regular code,


00:45:41.440 --> 00:45:43.400
here's our Flask bit, but if I go to static,


00:45:43.400 --> 00:45:45.880
there's now a Python folder in static


00:45:45.880 --> 00:45:48.320
and you can go to the weather API


00:45:48.320 --> 00:45:50.440
And let me make that bigger for the screen.


00:45:50.440 --> 00:45:51.740
See this code right here?


00:45:51.740 --> 00:45:54.820
It's download a report, type in, it goes to report.


00:45:54.820 --> 00:45:58.160
Has this thing that comes back from calling this URL,


00:45:58.160 --> 00:45:59.960
turns into JSON, does the--


00:45:59.960 --> 00:46:01.240
- It's hardly any code.


00:46:01.240 --> 00:46:02.660
- That. - Nice.


00:46:02.660 --> 00:46:04.540
- That is running in the browser,


00:46:04.540 --> 00:46:07.240
in the CPython runtime, all of it locally


00:46:07.240 --> 00:46:09.420
with no download and no slow startup.


00:46:09.420 --> 00:46:10.260
So. - That's pretty cool.


00:46:10.260 --> 00:46:12.080
- Anyway, I'm gonna do a video on that.


00:46:12.080 --> 00:46:13.460
Yeah, what do you guys think?


00:46:13.460 --> 00:46:14.380
Neat, huh?


00:46:14.380 --> 00:46:17.060
- Yeah, PyScript is, and that's cool what you've done too.


00:46:17.060 --> 00:46:18.460
- PyScript's interesting to me.


00:46:18.460 --> 00:46:21.360
I'm interested to see how that evolves.


00:46:21.360 --> 00:46:24.300
I'm sure, like you said, I think most people are using it


00:46:24.300 --> 00:46:25.700
maybe from a data science standpoint


00:46:25.700 --> 00:46:27.780
or waiting for it to mature or whatever,


00:46:27.780 --> 00:46:30.600
but there's some kind of odd analogs


00:46:30.600 --> 00:46:33.940
between how React and some of those things got started here.


00:46:33.940 --> 00:46:36.260
Obviously, angled at a different audience,


00:46:36.260 --> 00:46:38.900
but I think there's some really cool things


00:46:38.900 --> 00:46:42.780
that could be done with this as you evolve.


00:46:42.780 --> 00:46:45.660
And interesting that you mentioned this on the show today,


00:46:45.660 --> 00:46:49.300
'cause if you look in the repo for PyScript,


00:46:49.300 --> 00:46:52.420
Tailwind is one of their core dependencies.


00:46:52.420 --> 00:46:53.540
- Oh nice, how interesting.


00:46:53.540 --> 00:46:55.940
Yeah, it's all coming together.


00:46:55.940 --> 00:46:58.300
So I'll talk more about it when I release the video later,


00:46:58.300 --> 00:47:00.700
but I think that this, and the source code is out,


00:47:00.700 --> 00:47:02.700
it's linking to GitHub, people can check it out


00:47:02.700 --> 00:47:03.900
and install it.


00:47:03.900 --> 00:47:06.380
It's really neat, and I think it opens the door.


00:47:06.380 --> 00:47:08.780
I can see people writing like a Vue.js wrapper,


00:47:08.780 --> 00:47:11.700
so you create a Python class that sort of parallels Vue


00:47:11.700 --> 00:47:12.940
or React or something like that,


00:47:12.940 --> 00:47:15.000
and you could create really neat stuff


00:47:15.000 --> 00:47:17.600
in this offline sort of progressive web app mode.


00:47:17.600 --> 00:47:19.040
So we'll see.


00:47:19.040 --> 00:47:20.840
All right, that's it for my extras.


00:47:20.840 --> 00:47:22.880
- Okay, I've got a few.


00:47:22.880 --> 00:47:27.880
The videos for PyCon US 2022 are up.


00:47:27.880 --> 00:47:29.660
So yay, you can watch them now.


00:47:29.660 --> 00:47:31.560
I'll have a link to the show notes,


00:47:31.560 --> 00:47:33.120
but you can also just look on YouTube


00:47:33.120 --> 00:47:35.160
and search for PyCon US.


00:47:35.160 --> 00:47:37.600
Yeah, so I'm looking forward to,


00:47:37.600 --> 00:47:40.080
I've got a whole stack of ones I wanna watch.


00:47:40.080 --> 00:47:42.460
I unfortunately didn't get a chance to make it this year.


00:47:42.460 --> 00:47:46.060
So I'm looking forward to participating in this way.


00:47:46.060 --> 00:47:49.300
Second thing I wanted to bring up is another podcast.


00:47:49.300 --> 00:47:50.860
So there's another Python podcast out there


00:47:50.860 --> 00:47:52.940
called the Sad Python Girls Club.


00:47:52.940 --> 00:47:56.300
So far they have two episodes.


00:47:56.300 --> 00:47:58.460
The second episode, they interviewed Brett Cannon


00:47:58.460 --> 00:47:59.580
and it's good.


00:47:59.580 --> 00:48:01.840
They're not actually sad.


00:48:01.840 --> 00:48:05.620
The sad comes from that they used to be emo people


00:48:05.620 --> 00:48:06.620
when they were young.


00:48:06.620 --> 00:48:08.580
So I thought that was interesting.


00:48:08.580 --> 00:48:10.060
(laughing)


00:48:10.060 --> 00:48:11.960
I listened to a lot of the same music.


00:48:11.960 --> 00:48:14.400
- Nice, all right, congrats to them for starting that.


00:48:14.400 --> 00:48:15.240
That's cool.


00:48:15.240 --> 00:48:16.080
- Yeah.


00:48:16.080 --> 00:48:18.560
Third thing was, is I'm gonna do this publicly


00:48:18.560 --> 00:48:20.940
to try to get me motivated to finish it,


00:48:20.940 --> 00:48:22.380
the pytest course.


00:48:22.380 --> 00:48:26.620
So yes, I've started work on the pytest course


00:48:26.620 --> 00:48:31.260
and it will be through the Talk Python Michael Kennedy thing


00:48:31.260 --> 00:48:33.260
unless it's really terrible


00:48:33.260 --> 00:48:34.860
and then he probably won't want to do it.


00:48:34.860 --> 00:48:36.580
(laughing)


00:48:36.580 --> 00:48:37.620
- No, it'll be great, Brian.


00:48:37.620 --> 00:48:39.700
I'm looking forward to it.


00:48:39.700 --> 00:48:43.680
- Yeah, so, man, a couple days ago,


00:48:43.680 --> 00:48:47.660
I recorded like 20 minutes for the video with the mic off.


00:48:47.660 --> 00:48:50.700
(laughing)


00:48:50.700 --> 00:48:53.420
- I've done that, or two mics on where there's a weird echo,


00:48:53.420 --> 00:48:56.180
it's offset by 20 milliseconds, and no.


00:48:56.180 --> 00:48:57.420
- Oh, wow.


00:48:57.420 --> 00:48:59.260
- But I'm looking forward to getting that out,


00:48:59.260 --> 00:49:00.700
'cause a lot of people have asked for it,


00:49:00.700 --> 00:49:02.780
so that's in the works.


00:49:02.780 --> 00:49:03.620
- Fantastic.


00:49:03.620 --> 00:49:05.340
- I think that's cool, Brian, you need to finish it.


00:49:05.340 --> 00:49:09.100
We're all a little, none of us write enough tests.


00:49:09.100 --> 00:49:11.700
We need more. We could use the course.


00:49:11.700 --> 00:49:15.400
That's all for me.


00:49:15.400 --> 00:49:18.500
Either of you guys, you got anything else you want to give a shout out to before we wrap it up?


00:49:18.500 --> 00:49:20.000
I guess I better shout out.


00:49:20.000 --> 00:49:25.000
I said I better shout out since you highlighted the cheerleaders earlier.


00:49:25.000 --> 00:49:29.300
I'm pretty sure that was my daughter, Isabel, and a friend, Olivia, and Jess, listening.


00:49:29.300 --> 00:49:33.800
So if they've hung with us this long through Python podcasts, then I better shout out to them.


00:49:33.800 --> 00:49:34.800
Thanks.


00:49:34.800 --> 00:49:35.800
That's cool.


00:49:36.600 --> 00:49:39.720
And I would just say if you're interested in any sort of public company,


00:49:39.720 --> 00:49:43.720
complicated organizational structures like Tesla or Apple or anything,


00:49:43.720 --> 00:49:46.040
we have some of them on our website on LexChart.


00:49:46.040 --> 00:49:50.200
And if you want others, just drop us a line and we'll build them.


00:49:50.200 --> 00:49:51.640
Nice. Yeah, that's very cool.


00:49:51.640 --> 00:49:52.120
Yep.


00:49:52.120 --> 00:49:54.040
All right. So we close out with a joke, Brian.


00:49:54.040 --> 00:49:55.400
Yes.


00:49:55.400 --> 00:49:59.880
I wanted to come up with something that I felt was a little bit associated with learning to code


00:49:59.880 --> 00:50:03.720
and being somewhat beginner, even though what these guys built is not at all beginner,


00:50:03.720 --> 00:50:05.720
but I know that they've been on that path recently.


00:50:05.720 --> 00:50:07.020
So here we go.


00:50:07.020 --> 00:50:11.020
So this one is an animated GIF of a very frustrated person


00:50:11.020 --> 00:50:14.020
carrying their computer out, throwing it in the dumpster in the back.


00:50:14.020 --> 00:50:19.020
It says, "Programmers, when they finally fix all their syntax errors in their code


00:50:19.020 --> 00:50:21.020
just to be confronted with a bug."


00:50:21.020 --> 00:50:24.020
I don't know about you, but I remember when I was learning C++


00:50:24.020 --> 00:50:27.020
I was so happy when I got my complicated code to compile


00:50:27.020 --> 00:50:31.020
and then I realized, no, that's just the beginning of the hair-pulling part.


00:50:31.020 --> 00:50:32.180
- Yeah.


00:50:32.180 --> 00:50:34.120
- Yeah, it's Ron Swanson.


00:50:34.120 --> 00:50:36.380
(laughing)


00:50:36.380 --> 00:50:40.940
- Yeah, yeah, absolutely.


00:50:40.940 --> 00:50:42.020
All right.


00:50:42.020 --> 00:50:42.860
- Thanks a lot.


00:50:42.860 --> 00:50:43.700
- That's all I got, Brian.


00:50:43.700 --> 00:50:45.420
- Excellent, that was fun.


00:50:45.420 --> 00:50:47.420
- Thanks Ben and Mark for showing up


00:50:47.420 --> 00:50:49.140
and thanks Michael as always.


00:50:49.140 --> 00:50:49.980
It's been fun.


00:50:49.980 --> 00:50:50.800
- Thank you guys.


00:50:50.800 --> 00:50:51.640
- You bet.


00:50:51.640 --> 00:50:52.580
- Bye everyone. - Bye.


00:50:52.580 --> 00:50:53.420
- Cheers. - Bye.

