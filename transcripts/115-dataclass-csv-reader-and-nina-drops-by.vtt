
00:00:00.000 --> 00:00:04.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:04.880 --> 00:00:12.240
to your earbuds. This is episode 115, recorded January 29th, 2019. I'm Michael Kennedy.


00:00:12.240 --> 00:00:13.200
And I'm Brian Okken.


00:00:13.200 --> 00:00:14.960
And Brian, we got a special guest, don't we?


00:00:14.960 --> 00:00:15.440
Yeah.


00:00:15.440 --> 00:00:18.560
Nina Zankarinko. Say hello, Nina. How you doing?


00:00:18.560 --> 00:00:22.480
Hey, everyone. I'm very proud of you for pronouncing my last name correctly.


00:00:22.480 --> 00:00:27.840
Thank you. Brian and I, we specialize in mangling people's last names on this show,


00:00:27.840 --> 00:00:29.520
but we try.


00:00:29.520 --> 00:00:31.280
- Well, this time you nailed it.


00:00:31.280 --> 00:00:32.120
- Thank you.


00:00:32.120 --> 00:00:32.940
- For those who don't know me,


00:00:32.940 --> 00:00:35.640
I'm a senior cloud developer advocate at Microsoft


00:00:35.640 --> 00:00:38.000
and my focus is on Python.


00:00:38.000 --> 00:00:40.820
You can find me on Twitter @nnja.


00:00:40.820 --> 00:00:42.560
That's like ninja, but without the I.


00:00:42.560 --> 00:00:44.420
- Yeah, that's a pretty cool Twitter handle.


00:00:44.420 --> 00:00:47.160
Awesome, and also this episode is brought to you by Datadog.


00:00:47.160 --> 00:00:49.320
Check them out at pythonbytes.fm/datadog.


00:00:49.320 --> 00:00:50.860
Tell you more about that.


00:00:50.860 --> 00:00:54.360
You know, Brian, I expect quite a bit of stuff


00:00:54.360 --> 00:00:55.200
out of Datadog.


00:00:55.200 --> 00:00:57.040
I would say I have great expectations


00:00:57.040 --> 00:00:58.160
when I go use their stuff.


00:00:58.160 --> 00:00:59.000
What do you think?


00:00:59.000 --> 00:00:59.840
How about you?


00:00:59.840 --> 00:01:01.560
- Yeah, yeah, I do too, yes.


00:01:01.560 --> 00:01:05.320
For our first item, we have great expectations.


00:01:05.320 --> 00:01:09.200
And it is a package that was shared by a listener,


00:01:09.200 --> 00:01:10.240
and I don't know the listener


00:01:10.240 --> 00:01:11.640
'cause they shared it with you, Michael,


00:01:11.640 --> 00:01:12.840
and you didn't tell me who it was.


00:01:12.840 --> 00:01:14.680
- I just sent you over the link and I forgot,


00:01:14.680 --> 00:01:15.880
but thank you for sending it in.


00:01:15.880 --> 00:01:17.200
Next time we'll do a better job.


00:01:17.200 --> 00:01:19.200
- Well, we're just also trying to make it


00:01:19.200 --> 00:01:22.200
so that sharing information with everybody else


00:01:22.200 --> 00:01:24.760
is not an ego-boosting exercise


00:01:24.760 --> 00:01:26.520
because we won't remember your name.


00:01:26.520 --> 00:01:27.360
- Or we'll mispronounce it.


00:01:27.360 --> 00:01:29.360
Unless it's important to you, then let us know.


00:01:29.360 --> 00:01:30.360
Yeah.


00:01:30.360 --> 00:01:31.360
Now, great expectations.


00:01:31.360 --> 00:01:32.360
It's kind of cool.


00:01:32.360 --> 00:01:39.360
It's this idea that we have a lot of tools out, for instance, pytest, to test your code,


00:01:39.360 --> 00:01:45.760
but there's in a lot of stuff, the data that you're running your code through, like data


00:01:45.760 --> 00:01:51.560
science or a lot of data pipelines, the data is important too, and being able to check


00:01:51.560 --> 00:01:56.740
to make sure your data fits what you expect it to fit, what it looks like is important.


00:01:56.740 --> 00:02:00.820
So these are some really cool expect calls.


00:02:00.820 --> 00:02:03.860
They're a bunch of functions that start with expect.


00:02:03.860 --> 00:02:05.580
They aren't assertions, so they aren't


00:02:05.580 --> 00:02:07.980
going to throw an exception.


00:02:07.980 --> 00:02:09.420
But what happens is you--


00:02:09.420 --> 00:02:12.620
like, maybe on some of them, you pass them a data frame.


00:02:12.620 --> 00:02:14.500
Like, I'll just give one as an example.


00:02:14.500 --> 00:02:16.940
You expect a column to exist.


00:02:16.940 --> 00:02:20.140
So you give it a data frame, and you give it a specific column,


00:02:20.140 --> 00:02:22.300
and you want that column to actually be there.


00:02:22.300 --> 00:02:23.740
And if it's not, you get--


00:02:23.740 --> 00:02:26.100
actually, regardless of whether the answer,


00:02:26.100 --> 00:02:29.340
It comes back in the form of a JSON object,


00:02:29.340 --> 00:02:31.820
and it has a valid--


00:02:31.820 --> 00:02:33.580
and you can say whether or not--


00:02:33.580 --> 00:02:35.500
if it failed or passed the test.


00:02:35.500 --> 00:02:37.740
But it also shows you the parts where it didn't.


00:02:37.740 --> 00:02:39.900
So this is-- there's a little video, actually,


00:02:39.900 --> 00:02:42.860
demo video that they have, where you can see it in action


00:02:42.860 --> 00:02:44.740
using a Jupyter Notebook.


00:02:44.740 --> 00:02:45.900
And it's kind of cool.


00:02:45.900 --> 00:02:48.220
It shows you exactly where it's failing.


00:02:48.220 --> 00:02:51.060
So I imagine doing this interactively


00:02:51.060 --> 00:02:53.060
to look at your data would be helpful.


00:02:53.060 --> 00:02:55.820
But also, you could probably put this in place in some data


00:02:55.820 --> 00:02:58.620
cleaning steps to make sure things are around,


00:02:58.620 --> 00:03:01.620
like making sure there aren't any nulls in a column.


00:03:01.620 --> 00:03:03.980
There's a whole bunch of different things you can assert on


00:03:03.980 --> 00:03:05.740
or expect on your data.


00:03:05.740 --> 00:03:06.580
It's pretty fun.


00:03:06.580 --> 00:03:07.400
- Yeah, it's pretty cool.


00:03:07.400 --> 00:03:08.580
Some of them are totally straightforward,


00:03:08.580 --> 00:03:11.020
like expect these values to be in the set.


00:03:11.020 --> 00:03:14.460
Others, a little more data science, mathematical focused,


00:03:14.460 --> 00:03:17.940
like expect the chi-squared test P value


00:03:17.940 --> 00:03:20.900
to be greater than such and such, right?


00:03:20.900 --> 00:03:22.380
(both laughing)


00:03:22.380 --> 00:03:24.180
I honestly haven't done a lot of chi-squared lately,


00:03:24.180 --> 00:03:26.680
but I don't do that much data science on the web.


00:03:26.680 --> 00:03:30.060
It's more we use addition and stuff like that.


00:03:30.060 --> 00:03:32.980
- Yeah, but some of the fun things,


00:03:32.980 --> 00:03:37.100
like it was in the video example,


00:03:37.100 --> 00:03:39.540
he expected some data to be in,


00:03:39.540 --> 00:03:42.200
or data from a column to be in a particular set,


00:03:42.200 --> 00:03:44.940
and it was either male or female.


00:03:44.940 --> 00:03:47.940
And first off, like how binary of this?


00:03:47.940 --> 00:03:49.900
But anyway, the males,


00:03:49.900 --> 00:03:51.860
a lot of them came back with spaces in them.


00:03:51.860 --> 00:03:54.540
So doing some of this exploratory thing


00:03:54.540 --> 00:03:57.020
might tell you where you need to add some cleaning steps


00:03:57.020 --> 00:03:59.860
or dealing with nulls or things like that.


00:03:59.860 --> 00:04:02.380
The follow-up, I'd like to hear how people


00:04:02.380 --> 00:04:06.180
might be able to use this, how it's used exploratory-wise,


00:04:06.180 --> 00:04:08.540
but how I'd like to see somebody using it


00:04:08.540 --> 00:04:12.940
in their pipeline stages and how that works.


00:04:12.940 --> 00:04:15.100
I guess I imagine if you had it in production,


00:04:15.100 --> 00:04:17.340
you'd have some code that would,


00:04:17.340 --> 00:04:19.060
if it failed an expectation,


00:04:19.060 --> 00:04:21.300
you'd write a log entry or something,


00:04:21.300 --> 00:04:22.660
or I don't know what you'd do.


00:04:22.660 --> 00:04:23.980
- Yeah, or maybe return,


00:04:23.980 --> 00:04:26.780
if you were accepting data over a web method, right?


00:04:26.780 --> 00:04:28.700
Somebody's doing ETL and they're like,


00:04:28.700 --> 00:04:31.120
"Here, we're submitting this new set of data."


00:04:31.120 --> 00:04:33.860
You could return like 400 bad requests to indicate,


00:04:33.860 --> 00:04:35.900
"No, no, something's wrong with the data you sent me."


00:04:35.900 --> 00:04:36.940
Things like that, possible.


00:04:36.940 --> 00:04:37.780
- Yeah.


00:04:37.780 --> 00:04:38.600
- Nina, what do you think about this?


00:04:38.600 --> 00:04:40.180
- I think it's very cool


00:04:40.180 --> 00:04:42.380
and is probably gonna be pretty helpful.


00:04:42.380 --> 00:04:43.220
- I like it as well.


00:04:43.220 --> 00:04:44.900
What I like about it is it lets you take


00:04:44.900 --> 00:04:47.900
what would be a little algorithm you'd have to write


00:04:47.900 --> 00:04:51.420
to say go through and test all, say the chi-square values


00:04:51.420 --> 00:04:52.980
and then compare them and then assert on that.


00:04:52.980 --> 00:04:54.740
Now you just do one line and it does it


00:04:54.740 --> 00:04:56.180
on the whole data set, the whole data frame.


00:04:56.180 --> 00:04:57.020
That's pretty sweet.


00:04:57.020 --> 00:04:59.220
- Yeah, I'm gonna be watching the video demo after the show.


00:04:59.220 --> 00:05:00.820
- Yeah, right on.


00:05:00.820 --> 00:05:03.500
So the thing that you are gonna cover next,


00:05:03.500 --> 00:05:04.860
the timing is incredible, Nina.


00:05:04.860 --> 00:05:07.140
I literally got a notification


00:05:07.140 --> 00:05:08.860
that I had ordered one of these


00:05:08.860 --> 00:05:11.300
and it shipped today and it's on its way to my house.


00:05:11.300 --> 00:05:12.340
So I'm very excited.


00:05:12.340 --> 00:05:14.360
Tell people what is on its way.


00:05:15.780 --> 00:05:18.300
- Would that be the Circuit Playground Express?


00:05:18.300 --> 00:05:19.460
- It would be, yeah.


00:05:19.460 --> 00:05:20.420
- Awesome.


00:05:20.420 --> 00:05:22.300
Yeah, so I wanted to chat a little bit


00:05:22.300 --> 00:05:25.060
about using CircuitPython and MicroPython


00:05:25.060 --> 00:05:27.540
to write Python for wearable electronics


00:05:27.540 --> 00:05:29.660
and embedded platforms.


00:05:29.660 --> 00:05:32.100
I've been playing with electronics projects as a hobby


00:05:32.100 --> 00:05:34.500
for probably about the past two years now.


00:05:34.500 --> 00:05:37.500
In the past few months, I've been focusing my attention


00:05:37.500 --> 00:05:39.340
on Python for microcontrollers.


00:05:39.340 --> 00:05:40.700
- Right on, what kind of little things


00:05:40.700 --> 00:05:42.540
are you making with your projects?


00:05:42.540 --> 00:05:48.620
My last one was Python-powered LED earrings, and I dropped a link to the repo for the code


00:05:48.620 --> 00:05:50.780
as well as the photo, so you can see that.


00:05:50.780 --> 00:05:51.780
Awesome.


00:05:51.780 --> 00:05:55.680
Okay, so what I know, I've heard of MicroPython, and I think I've heard of CircuitPython.


00:05:55.680 --> 00:05:56.680
Are they the same?


00:05:56.680 --> 00:05:57.680
Are they different?


00:05:57.680 --> 00:05:58.680
Tell everyone about it.


00:05:58.680 --> 00:06:00.760
Yeah, there's definitely a little bit of confusion about that.


00:06:00.760 --> 00:06:03.660
So MicroPython is the original.


00:06:03.660 --> 00:06:08.180
It's a lean and efficient implementation of Python 3 that can run on these tiny little


00:06:08.180 --> 00:06:09.860
microcontrollers.


00:06:09.860 --> 00:06:13.340
And all it needs is 256 kilobytes of code space


00:06:13.340 --> 00:06:15.540
and 16 kilobytes of RAM.


00:06:15.540 --> 00:06:16.380
It's incredible.


00:06:16.380 --> 00:06:17.580
- It's truly awesome.


00:06:17.580 --> 00:06:20.380
Yeah, it's so super low level too, yeah?


00:06:20.380 --> 00:06:24.060
- And CircuitPython is a port of MicroPython


00:06:24.060 --> 00:06:26.500
and it's optimized for Adafruit devices.


00:06:26.500 --> 00:06:27.360
- Cool.


00:06:27.360 --> 00:06:30.020
So I guess that's the one I'm gonna be learning about, yeah.


00:06:30.020 --> 00:06:30.940
- Yeah.


00:06:30.940 --> 00:06:33.340
And some of these, the devices that Adafruit sells,


00:06:33.340 --> 00:06:35.180
they're as small as a quarter.


00:06:35.180 --> 00:06:36.800
That would be the Trinket.


00:06:36.800 --> 00:06:39.580
But of course, my favorite Python hardware platform


00:06:39.580 --> 00:06:43.660
for beginners is that the Adafruit Circuit Playground Express.


00:06:43.660 --> 00:06:47.660
It has everything you need to get started with programming hardware without even needing


00:06:47.660 --> 00:06:49.380
to learn how to solder.


00:06:49.380 --> 00:06:54.140
All you need is some alligator clips for the conductive pads, and the board has a ring


00:06:54.140 --> 00:06:56.180
of NeoPixel LEDs.


00:06:56.180 --> 00:07:02.620
It has buttons, switches, temperature sensors, motion detectors, sound sensors, a tiny little


00:07:02.620 --> 00:07:05.420
speaker, and a lot more stuff.


00:07:05.420 --> 00:07:07.740
You can even use it to control servos,


00:07:07.740 --> 00:07:09.720
which are those tiny little motor arms.


00:07:09.720 --> 00:07:11.320
- Wow, that's really awesome.


00:07:11.320 --> 00:07:13.180
- Yeah, it's a tiny little thing.


00:07:13.180 --> 00:07:14.480
- Yeah, what I really like about this,


00:07:14.480 --> 00:07:16.540
and the reason that I ordered it was,


00:07:16.540 --> 00:07:18.660
I can go to Adafruit and look around,


00:07:18.660 --> 00:07:20.940
and I'm just like, this is too low level for me.


00:07:20.940 --> 00:07:22.460
I don't really know what I need,


00:07:22.460 --> 00:07:24.420
and I don't even know if I have a power supply,


00:07:24.420 --> 00:07:25.980
if I get this little chip or that,


00:07:25.980 --> 00:07:27.380
like how to put together.


00:07:27.380 --> 00:07:29.460
I'm like, okay, give me like one thing


00:07:29.460 --> 00:07:31.340
that has all the stuff to do little projects


00:07:31.340 --> 00:07:33.440
like you're describing, and I think it's awesome.


00:07:33.440 --> 00:07:35.600
And doing it in Python is super cool.


00:07:35.600 --> 00:07:37.240
- It only costs $25.


00:07:37.240 --> 00:07:38.360
- Yeah, it's not too expensive.


00:07:38.360 --> 00:07:39.520
- No.


00:07:39.520 --> 00:07:43.360
And then if you don't wanna use Python to program this,


00:07:43.360 --> 00:07:46.540
there's a tool that you can use called Microsoft MakeCode,


00:07:46.540 --> 00:07:49.120
and it lets you program these little devices


00:07:49.120 --> 00:07:53.360
with a drag and drop style kind of scratch-like interface.


00:07:53.360 --> 00:07:55.000
So that's perfect for kids,


00:07:55.000 --> 00:07:57.160
and you'll find a lot of examples on their site.


00:07:57.160 --> 00:07:58.720
- Oh, that's awesome that you point that out


00:07:58.720 --> 00:08:00.820
because I might get my daughter to do


00:08:00.820 --> 00:08:02.600
some kind of little game, you know,


00:08:02.600 --> 00:08:04.800
like a Simon Says or something with the LEDs.


00:08:04.800 --> 00:08:05.880
Who knows, that'd be fun.


00:08:05.880 --> 00:08:06.720
- Yeah.


00:08:06.720 --> 00:08:09.440
- The Mew editor has some tutorials on using these as well.


00:08:09.440 --> 00:08:10.260
- Right.


00:08:10.260 --> 00:08:11.100
- That's awesome.


00:08:11.100 --> 00:08:11.920
- Super cool.


00:08:11.920 --> 00:08:13.160
All right, and I like you threw in the link,


00:08:13.160 --> 00:08:16.520
yeah, to your code so people can do the earrings as well.


00:08:16.520 --> 00:08:18.120
- Yeah, and like you said earlier,


00:08:18.120 --> 00:08:20.240
there are tons of guides for Python projects


00:08:20.240 --> 00:08:22.080
on the Adafruit website.


00:08:22.080 --> 00:08:25.440
Stuff from making your own synthesizers to jewelry


00:08:25.440 --> 00:08:27.040
to silly little robots.


00:08:27.040 --> 00:08:28.640
So definitely make sure to check that out.


00:08:28.640 --> 00:08:31.360
- Cool, yeah, well, I can almost recommend it.


00:08:31.360 --> 00:08:32.440
It looks really, really good.


00:08:32.440 --> 00:08:33.980
And when I get it, I'm going to play with it


00:08:33.980 --> 00:08:35.440
and let everyone know what I think.


00:08:35.440 --> 00:08:37.900
But yeah, it seems like a great little package


00:08:37.900 --> 00:08:39.260
that you can get at $25.


00:08:39.260 --> 00:08:41.700
It's like, as software developers,


00:08:41.700 --> 00:08:42.940
you could just try it, right?


00:08:42.940 --> 00:08:43.820
It's not that big of a risk.


00:08:43.820 --> 00:08:46.140
It's not like you're getting a new MacBook or something.


00:08:46.140 --> 00:08:47.300
[LAUGHTER]


00:08:47.300 --> 00:08:51.180
And Adafruit has a Python for microcontrollers mailing list.


00:08:51.180 --> 00:08:54.780
And they always drop kind of hot news and interesting new things.


00:08:54.780 --> 00:08:57.380
So there's a link to sign up for that in the show notes.


00:08:57.380 --> 00:08:57.880
Awesome.


00:08:57.880 --> 00:08:58.820
That's a great one.


00:08:58.820 --> 00:09:02.740
So this next one, I think, is a really interesting use


00:09:02.740 --> 00:09:04.900
of Python 3.7.


00:09:04.900 --> 00:09:08.940
So when you think of the main features of Python 3.7,


00:09:08.940 --> 00:09:11.240
certainly data classes has to be one of them.


00:09:11.240 --> 00:09:13.540
Have either of you found any use for data classes yet?


00:09:13.540 --> 00:09:14.620
Yeah, I just love them.


00:09:14.620 --> 00:09:15.940
I use them like named tuples.


00:09:15.940 --> 00:09:16.440
Yeah.


00:09:16.440 --> 00:09:17.900
Yeah, they're awesome.


00:09:17.900 --> 00:09:20.500
Trey Hunter has a great talk on data classes.


00:09:20.500 --> 00:09:21.280
Definitely.


00:09:21.280 --> 00:09:25.140
So this is a library that's derived from data classes,


00:09:25.140 --> 00:09:27.500
and it's a CSV file reader.


00:09:27.500 --> 00:09:29.900
Now Python comes with pretty good support for CSV readers.


00:09:29.900 --> 00:09:32.820
You import CSV and then you create a dict reader


00:09:32.820 --> 00:09:35.240
based on a file stream and it'll read the header


00:09:35.240 --> 00:09:36.860
and figure out the columns and then it gives you


00:09:36.860 --> 00:09:38.740
a little dictionaries based on the column names


00:09:38.740 --> 00:09:39.980
and that's pretty sweet.


00:09:39.980 --> 00:09:43.020
But what you get back is a whole bunch of strings


00:09:43.020 --> 00:09:45.460
corresponding to those values, right?


00:09:45.460 --> 00:09:48.060
And with this, what you can do is you can actually


00:09:48.060 --> 00:09:53.060
define a data class that maps the schema of your CSV file.


00:09:53.060 --> 00:09:56.780
So I can define a data class that maybe has an ID


00:09:56.780 --> 00:09:59.860
and a name and a value or price, right?


00:09:59.860 --> 00:10:00.860
Maybe it's like products.


00:10:00.860 --> 00:10:03.180
So like the ID could be an integer


00:10:03.180 --> 00:10:04.340
defined in the data class.


00:10:04.340 --> 00:10:06.420
The name could be a string and the value,


00:10:06.420 --> 00:10:07.940
the price could be say a float.


00:10:07.940 --> 00:10:11.140
And it'll actually do all those conversions for you


00:10:11.140 --> 00:10:12.660
and give you meaningful errors


00:10:12.660 --> 00:10:15.420
if like it's a non-parsable float or something like that.


00:10:15.420 --> 00:10:16.240
Ain't that nice?


00:10:16.240 --> 00:10:17.160
- That's incredible.


00:10:17.160 --> 00:10:19.900
Working with CSV is the bane of my existence.


00:10:19.900 --> 00:10:21.540
- Yeah, so you can just define these things.


00:10:21.540 --> 00:10:24.100
You get auto-complete in, you know,


00:10:24.100 --> 00:10:26.340
PyCharm or Visual Studio Code for your types,


00:10:26.340 --> 00:10:29.940
for your rows because they come back as these data classes.


00:10:29.940 --> 00:10:31.380
And you get validation.


00:10:31.380 --> 00:10:33.620
And on top of that, you can actually do cool stuff.


00:10:33.620 --> 00:10:35.900
You can say, with data classes, you


00:10:35.900 --> 00:10:40.300
can specify either just the type or the type and a value.


00:10:40.300 --> 00:10:42.100
And that value becomes the default value.


00:10:42.100 --> 00:10:44.100
So if only sometimes the price is there,


00:10:44.100 --> 00:10:46.100
you could put 0 or minus 1.


00:10:46.100 --> 00:10:48.420
And it'll just go through and substitute that value.


00:10:48.420 --> 00:10:50.220
So a lot of cool little nice touches here.


00:10:50.220 --> 00:10:50.500
Nice.


00:10:50.500 --> 00:10:50.700
Yeah.


00:10:50.700 --> 00:10:52.920
I'm definitely going to check this out the next time


00:10:52.920 --> 00:10:55.780
that I have to do some sort of CSV parsing, because it's


00:10:55.780 --> 00:10:58.400
way better to let this thing do the validation and the type


00:10:58.400 --> 00:11:00.840
conversion and all that and just not worry.


00:11:00.840 --> 00:11:02.840
I don't think I've been this excited about CSV


00:11:02.840 --> 00:11:03.840
files in a long time.


00:11:03.840 --> 00:11:04.340
I know.


00:11:04.340 --> 00:11:06.200
[LAUGHTER]


00:11:06.200 --> 00:11:08.200
They are pretty amazing.


00:11:08.200 --> 00:11:10.040
No, this really makes working with them nice,


00:11:10.040 --> 00:11:11.960
and I'm excited too.


00:11:11.960 --> 00:11:13.320
All right, speaking of excited, I


00:11:13.320 --> 00:11:14.520
do want to tell you about Datadog.


00:11:14.520 --> 00:11:16.200
They're helping make this show possible.


00:11:16.200 --> 00:11:18.960
So before we get to our next item, let me tell you about them.


00:11:18.960 --> 00:11:21.520
This show is brought to you by Datadog.


00:11:21.520 --> 00:11:23.440
They're a cloud scale monitoring platform


00:11:23.440 --> 00:11:25.120
that brings like metrics and logs,


00:11:25.120 --> 00:11:27.120
distributed traces all together.


00:11:27.120 --> 00:11:30.320
You can do auto instrumenting of frameworks


00:11:30.320 --> 00:11:32.400
like Django and Flask and PostgreSQL,


00:11:32.400 --> 00:11:34.360
which means you can track requests


00:11:34.360 --> 00:11:37.100
across service boundaries, across machines,


00:11:37.100 --> 00:11:38.400
things like that, which is awesome.


00:11:38.400 --> 00:11:39.600
It makes it really easy to troubleshoot


00:11:39.600 --> 00:11:43.000
your slow Python apps and figure out overall


00:11:43.000 --> 00:11:44.680
where the time is being spent.


00:11:44.680 --> 00:11:48.400
So you can get started for free at pythonbytes.fm/datadog


00:11:48.400 --> 00:11:50.720
and they'll also give you a cool t-shirt


00:11:50.720 --> 00:11:54.000
with a Datadog character on it, which is nice and cute.


00:11:54.000 --> 00:11:56.440
So check them out, it helps keep the show going.


00:11:56.440 --> 00:11:59.560
Now, Brian, I wanna come to a topic


00:11:59.560 --> 00:12:02.120
that we haven't really covered very much on the show,


00:12:02.120 --> 00:12:03.680
but maybe, I think a while ago,


00:12:03.680 --> 00:12:05.680
we did talk about packaging once, right?


00:12:05.680 --> 00:12:06.800
(Brian laughs)


00:12:06.800 --> 00:12:07.640
- Yeah.


00:12:07.640 --> 00:12:08.720
- You wanna catch us up on it?


00:12:08.720 --> 00:12:11.800
- I think it's only second to GUI's so far.


00:12:11.800 --> 00:12:12.640
- Let's try.


00:12:12.640 --> 00:12:14.280
- There's a fun article called


00:12:14.280 --> 00:12:18.240
"How to Rock Python Packaging with Poetry and Briefcase."


00:12:18.240 --> 00:12:21.220
Plus it has like the phrase how to rock something,


00:12:21.220 --> 00:12:22.840
and I'm a sucker for that.


00:12:22.840 --> 00:12:25.580
It's actually kind of a nice tutorial on packaging.


00:12:25.580 --> 00:12:28.680
So for those of you that just joined us


00:12:28.680 --> 00:12:31.460
and haven't learned all of our discussions on packaging,


00:12:31.460 --> 00:12:33.720
this is a nice introduction to packaging


00:12:33.720 --> 00:12:35.460
and how it fits in Python,


00:12:35.460 --> 00:12:39.040
and also kind of how the changing of things,


00:12:39.040 --> 00:12:40.320
it's changing of packaging,


00:12:40.320 --> 00:12:42.920
like where flit, pipenv, and poetry


00:12:42.920 --> 00:12:45.460
sort of fit in with all of this.


00:12:45.460 --> 00:12:47.320
It's kind of a nice run through of that.


00:12:47.320 --> 00:12:50.120
Poetry is one of those things for packaging,


00:12:50.120 --> 00:12:54.040
and it uses the pyproject.toml file.


00:12:54.040 --> 00:12:57.940
And of course, we talked about Poetry in episode 100.


00:12:57.940 --> 00:13:02.120
And the nitty gritty details of pyproject.toml


00:13:02.120 --> 00:13:05.340
was in testing code 52 with Brett Cannon.


00:13:05.340 --> 00:13:07.920
But one of the neat things, why I picked this,


00:13:07.920 --> 00:13:10.760
is it also talks about Briefcase.


00:13:10.760 --> 00:13:13.280
And we haven't talked about Briefcase yet.


00:13:13.280 --> 00:13:15.920
And Briefcase is one of those tools


00:13:15.920 --> 00:13:18.080
from the Beware project,


00:13:18.080 --> 00:13:19.800
and it's something that you can,


00:13:19.800 --> 00:13:23.300
it packages your, a Python application


00:13:23.300 --> 00:13:27.160
as a standalone native application for lots of stuff.


00:13:27.160 --> 00:13:30.800
It claims Mac, Windows, Linux, even iOS and Android,


00:13:30.800 --> 00:13:32.160
which is interesting.


00:13:32.160 --> 00:13:33.620
Haven't tried any of this.


00:13:33.620 --> 00:13:37.080
The tutorial talks about desktop distribution


00:13:37.080 --> 00:13:40.120
of code through briefcase, and it's kind of cool,


00:13:40.120 --> 00:13:42.200
and how to get that done with Poetry.


00:13:42.200 --> 00:13:44.040
- I think Poetry's definitely nice.


00:13:44.040 --> 00:13:47.720
It's sort of an alternative philosophy to pip-inf,


00:13:47.720 --> 00:13:50.680
which is, we talked about that as well.


00:13:50.680 --> 00:13:53.680
And Briefcase is part of that whole set


00:13:53.680 --> 00:13:56.080
of small independent tools from B-Ware,


00:13:56.080 --> 00:13:57.280
which also is pretty cool.


00:13:57.280 --> 00:13:58.840
And it's nice to see them working together.


00:13:58.840 --> 00:14:02.800
Also, we got Cookie Cutter doing some magic in here as well.


00:14:02.800 --> 00:14:04.520
- Definitely, and then one of the things


00:14:04.520 --> 00:14:06.200
that I like at the end of this,


00:14:06.200 --> 00:14:08.540
there's several tutorials on publishing,


00:14:08.540 --> 00:14:12.920
like how to push your new package to PyPI.


00:14:12.920 --> 00:14:16.040
But this one I really like because instead of telling you


00:14:16.040 --> 00:14:18.120
exactly how to push it to PyPI,


00:14:18.120 --> 00:14:20.500
they tell you how to push it to the test server.


00:14:20.500 --> 00:14:23.440
And I think that's an important step for people to do


00:14:23.440 --> 00:14:26.240
before you subject the world to your code,


00:14:26.240 --> 00:14:28.360
try it out at the test server first.


00:14:28.360 --> 00:14:29.480
So it's nice.


00:14:29.480 --> 00:14:30.560
- Of course.


00:14:30.560 --> 00:14:31.440
- Yeah, of course.


00:14:31.440 --> 00:14:33.000
Why don't more of them do that?


00:14:33.000 --> 00:14:36.940
- I don't know, but please everybody,


00:14:36.940 --> 00:14:39.600
like save the world and push it here first.


00:14:39.600 --> 00:14:42.400
- Yeah, the packages on PyPI cannot be changed


00:14:42.400 --> 00:14:44.360
are uploaded, you can only add newer ones.


00:14:44.360 --> 00:14:48.200
So, although you gotta admire the rate at which


00:14:48.200 --> 00:14:50.800
you'll increase your version of your package


00:14:50.800 --> 00:14:53.400
if you screw it up a few times trying to publish it.


00:14:53.400 --> 00:14:55.920
(laughing)


00:14:55.920 --> 00:14:56.760
- Yeah.


00:14:56.760 --> 00:14:57.580
- That's productivity, right?


00:14:57.580 --> 00:14:58.800
- That's right.


00:14:58.800 --> 00:15:01.560
So Nina, this next one that you found for us


00:15:01.560 --> 00:15:04.260
is one of these awesome lists.


00:15:04.260 --> 00:15:06.500
And I think these awesome lists are coming along


00:15:06.500 --> 00:15:08.520
really faster and faster these days, right?


00:15:08.520 --> 00:15:11.680
We got awesome Python, awesome Python applications.


00:15:11.680 --> 00:15:13.920
What's the next one that's in that category?


00:15:13.920 --> 00:15:15.560
- And this is a new one I came across


00:15:15.560 --> 00:15:18.000
called Awesome Python Security.


00:15:18.000 --> 00:15:20.960
It's a collection of tools, techniques, and resources


00:15:20.960 --> 00:15:22.520
to make your Python more secure.


00:15:22.520 --> 00:15:23.360
- Oh, that's cool.


00:15:23.360 --> 00:15:25.600
Yeah, and it's got a lot of stuff for web apps


00:15:25.600 --> 00:15:27.960
like the secure.py, which is awesome.


00:15:27.960 --> 00:15:30.760
We've covered that in the Flask, Flask-Tailsman,


00:15:30.760 --> 00:15:32.960
Django, Sessions, all kinds of stuff, right?


00:15:32.960 --> 00:15:35.440
But not just the web, there's a whole bunch of other ones.


00:15:35.440 --> 00:15:37.280
- I think, and hopefully all of you agree,


00:15:37.280 --> 00:15:39.680
that all of your production and client-facing code


00:15:39.680 --> 00:15:42.320
should be written with security in mind.


00:15:42.320 --> 00:15:44.720
And this list features a few resources


00:15:44.720 --> 00:15:46.040
that I'd come across before,


00:15:46.040 --> 00:15:48.080
like Anthony Shaw's excellent


00:15:48.080 --> 00:15:50.600
10 common security gotchas article


00:15:50.600 --> 00:15:52.880
that highlights problems like input ejection


00:15:52.880 --> 00:15:56.040
and depending on assert statements in production.


00:15:56.040 --> 00:15:58.680
And I also came across a few that were new to me.


00:15:58.680 --> 00:16:01.720
So the OWASP Python resources,


00:16:01.720 --> 00:16:05.720
OWASP stands for Open Web Application Security Project.


00:16:05.720 --> 00:16:08.480
And there's tons of OWASP resources out there.


00:16:08.480 --> 00:16:11.140
I didn't know that there was a Python specific one.


00:16:11.140 --> 00:16:14.040
You can find that one at pythonsecurity.org.


00:16:14.040 --> 00:16:15.420
I came across Bandit,


00:16:15.420 --> 00:16:18.860
which is a tool to find common security issues in Python.


00:16:18.860 --> 00:16:21.520
Now Bandit has a lot of really useful plugins


00:16:21.520 --> 00:16:23.300
that test for some issues like


00:16:23.300 --> 00:16:25.960
hard-coded password strings in production,


00:16:25.960 --> 00:16:28.980
leaving Flask debug on in production,


00:16:28.980 --> 00:16:31.980
using exec in your code, and a lot more.


00:16:31.980 --> 00:16:34.680
I linked to the full list in the show notes.


00:16:34.680 --> 00:16:37.400
And then a few other cool ones like Detect Secrets,


00:16:37.400 --> 00:16:39.880
which is a tool to detect secrets


00:16:39.880 --> 00:16:42.240
that were accidentally left in your Python code base.


00:16:42.240 --> 00:16:43.440
- That's cool. - Yeah.


00:16:43.440 --> 00:16:44.480
- Let's open source that.


00:16:44.480 --> 00:16:48.540
Oh wait, was our full access AWS or Azure key in there?


00:16:48.540 --> 00:16:49.380
Whoopsie.


00:16:49.380 --> 00:16:50.400
(laughing)


00:16:50.400 --> 00:16:51.960
- Oops, oops.


00:16:51.960 --> 00:16:52.800
Oopsie doops.


00:16:52.800 --> 00:16:54.560
- We'll just check it in again without that in there.


00:16:54.560 --> 00:16:55.480
I'm sure it'll be fine.


00:16:55.480 --> 00:16:56.320
There's no history.


00:16:56.320 --> 00:16:59.000
- And something I really like about this list in particular


00:16:59.000 --> 00:17:01.080
is it also includes resources


00:17:01.080 --> 00:17:03.960
for learning about security concepts like cryptography.


00:17:03.960 --> 00:17:06.640
- Yeah, you know, out of that cryptography section,


00:17:06.640 --> 00:17:09.220
they listed one of my all time favorite packages,


00:17:09.220 --> 00:17:10.380
which is passlib.


00:17:10.380 --> 00:17:14.240
So if you're gonna store user secrets


00:17:14.240 --> 00:17:15.260
and you want to hash them,


00:17:15.260 --> 00:17:17.220
like passwords are probably the most common,


00:17:17.220 --> 00:17:18.940
but there could be other things as well


00:17:18.940 --> 00:17:20.620
that you don't wanna store directly,


00:17:20.620 --> 00:17:23.540
but you wanna accept from user and see if you have it.


00:17:23.540 --> 00:17:26.300
All right, like you can hash it and that's a good idea,


00:17:26.300 --> 00:17:28.580
but what you really should do is like take that result,


00:17:28.580 --> 00:17:31.060
add some salt, then hash it again,


00:17:31.060 --> 00:17:33.780
take that, do it again, maybe a hundred thousand times.


00:17:33.780 --> 00:17:35.700
Right, passlib, that's like a one function,


00:17:35.700 --> 00:17:39.780
like dot encrypt rounds equal 150,000, 200,000, whatever.


00:17:39.780 --> 00:17:40.780
It's really nice.


00:17:40.780 --> 00:17:41.700
- That's awesome.


00:17:41.700 --> 00:17:43.540
To make sure your password doesn't end up on


00:17:43.540 --> 00:17:44.460
have I been pwned.


00:17:44.460 --> 00:17:45.980
- Exactly, exactly.


00:17:45.980 --> 00:17:48.300
So basically you can say I want it to take


00:17:48.300 --> 00:17:51.860
.2 seconds to determine, to brute force


00:17:51.860 --> 00:17:54.140
or to check each version of the password.


00:17:54.140 --> 00:17:56.060
And it automatically, because of that,


00:17:56.060 --> 00:17:58.020
will slow down dictionary attacks against your site.


00:17:58.020 --> 00:17:59.500
'Cause you can only do them, you know,


00:17:59.500 --> 00:18:01.580
it'd take only five per second, right?


00:18:01.580 --> 00:18:02.820
So, and then there's another one called


00:18:02.820 --> 00:18:04.540
let's be bad guys, that's interesting.


00:18:04.540 --> 00:18:06.260
So yeah, a lot of cool stuff here.


00:18:06.260 --> 00:18:07.260
(laughing)


00:18:07.260 --> 00:18:08.580
- That's a great project name.


00:18:08.580 --> 00:18:10.780
- I know, it's like a hacker playground.


00:18:10.780 --> 00:18:12.740
- Yeah, so check out the full list on GitHub


00:18:12.740 --> 00:18:14.980
and then if there's something missing


00:18:14.980 --> 00:18:17.220
that you think should be there, maybe open a pull request.


00:18:17.220 --> 00:18:18.060
- Yeah, absolutely.


00:18:18.060 --> 00:18:20.140
That's a cool one, I'm glad you found it.


00:18:20.140 --> 00:18:24.300
All right, the last official item I wanna cover is PyDBG,


00:18:24.300 --> 00:18:29.300
which is the implementation of a Rust macro called DBG.


00:18:29.300 --> 00:18:32.320
So just put the pi on the front.


00:18:32.320 --> 00:18:34.220
Now, I haven't done that much Rust.


00:18:34.220 --> 00:18:35.560
I've actually been wanting to learn Rust.


00:18:35.560 --> 00:18:37.660
It looks pretty interesting to me.


00:18:37.660 --> 00:18:40.460
But the basic idea of this dbg macro


00:18:40.460 --> 00:18:43.860
is instead of just printing out like,


00:18:43.860 --> 00:18:46.140
I'm here, I'm here, the value,


00:18:46.140 --> 00:18:47.960
printing X as the value,


00:18:47.960 --> 00:18:50.520
it'll actually give you a higher level statement


00:18:50.520 --> 00:18:51.660
without doing more work.


00:18:51.660 --> 00:18:52.960
So if you're trying to debug something


00:18:52.960 --> 00:18:54.780
through print statements and that kind of thing,


00:18:54.780 --> 00:18:56.340
this makes it a lot easier.


00:18:56.340 --> 00:18:57.980
So you can go and say,


00:18:57.980 --> 00:19:00.100
like I have A equals two, B equals three.


00:19:00.100 --> 00:19:02.980
If I could say dbg of A plus B,


00:19:02.980 --> 00:19:07.540
The output is the file of the line, A plus B equals five.


00:19:07.540 --> 00:19:08.680
Things like that.


00:19:08.680 --> 00:19:09.720
Really, really nice.


00:19:09.720 --> 00:19:11.760
It sort of shows you in your message


00:19:11.760 --> 00:19:13.120
where you are in the file,


00:19:13.120 --> 00:19:15.240
what thing is you're actually printing


00:19:15.240 --> 00:19:18.320
without having to come up with elaborate print statements.


00:19:18.320 --> 00:19:19.160
So pretty cool.


00:19:19.160 --> 00:19:21.360
- Oh man, I'm gonna use this like every day.


00:19:21.360 --> 00:19:23.440
(laughing)


00:19:23.440 --> 00:19:25.920
- Do you still use print statements to debug, Brian?


00:19:25.920 --> 00:19:26.760
- Yes, I do.


00:19:26.760 --> 00:19:28.000
I love print statements.


00:19:28.000 --> 00:19:29.200
(laughing)


00:19:29.200 --> 00:19:30.420
- I use the debugger a lot,


00:19:30.420 --> 00:19:32.360
but every now and then I'm just like,


00:19:32.360 --> 00:19:36.200
I just want to print this out and just see what is happening.


00:19:36.200 --> 00:19:38.480
I don't primarily use print statements for debugging,


00:19:38.480 --> 00:19:42.560
but sometimes I do when I'm kind of exploring.


00:19:42.560 --> 00:19:44.080
And I want it to run, but I kind of


00:19:44.080 --> 00:19:45.240
want to see what's happening.


00:19:45.240 --> 00:19:47.360
I'm like, oh, what am I getting back from that API?


00:19:47.360 --> 00:19:48.560
What is this value?


00:19:48.560 --> 00:19:49.360
Things like that.


00:19:49.360 --> 00:19:51.480
Have either of you used watch statements?


00:19:51.480 --> 00:19:52.360
No, tell us about it.


00:19:52.360 --> 00:19:55.680
You can just set up a variable or an expression to watch,


00:19:55.680 --> 00:19:58.720
and every time you hit a breakpoint, you're like, oh,


00:19:58.720 --> 00:19:59.720
I see what's in there.


00:19:59.720 --> 00:20:01.000
I don't have to type it again.


00:20:01.000 --> 00:20:02.280
With VS Code or PyCharm?


00:20:02.280 --> 00:20:06.600
I believe you can set up watches with PDB2, but I don't know.


00:20:06.600 --> 00:20:08.600
I usually do those in a graphical debugger.


00:20:08.600 --> 00:20:09.600
Yeah, me too.


00:20:09.600 --> 00:20:10.600
Yeah, I definitely have used those.


00:20:10.600 --> 00:20:12.400
I was thinking something different.


00:20:12.400 --> 00:20:18.240
But so where I'm going to use this DBG, PyDBG thing, is a lot of times I've got, we've


00:20:18.240 --> 00:20:24.120
got test code that generates huge amounts of data, like trace data.


00:20:24.120 --> 00:20:29.440
And these are stored and the test runs are really long.


00:20:29.440 --> 00:20:34.080
throwing a couple of these extra ones for intermediate values


00:20:34.080 --> 00:20:37.520
so that failing tests or failing test runs,


00:20:37.520 --> 00:20:40.880
we can take a look at those post-mortem, things like that.


00:20:40.880 --> 00:20:44.160
Just save-- it's an elegant way to have that be done.


00:20:44.160 --> 00:20:44.720
Yeah.


00:20:44.720 --> 00:20:45.400
It's pretty cool.


00:20:45.400 --> 00:20:47.320
What I like about it is it's so simple, right?


00:20:47.320 --> 00:20:48.840
You place the word print with DBG,


00:20:48.840 --> 00:20:50.840
and you've kind of got something going on here.


00:20:50.840 --> 00:20:52.720
I also kind of like that it's more explicit.


00:20:52.720 --> 00:20:55.380
You're like, this is not really supposed to be a print statement.


00:20:55.380 --> 00:20:57.920
This is just here till I figure out what's going on.


00:20:57.920 --> 00:20:59.360
And then we're going to stop this.


00:20:59.360 --> 00:21:01.400
But cool, people can check it out.


00:21:01.400 --> 00:21:03.060
Thanks for sending that in.


00:21:03.060 --> 00:21:06.240
To our listeners, all right, so I guess that's it


00:21:06.240 --> 00:21:07.480
for all of our main topics,


00:21:07.480 --> 00:21:09.480
but looking at our show notes here, Brian,


00:21:09.480 --> 00:21:12.200
we all kind of had a second round in the extras,


00:21:12.200 --> 00:21:14.300
so maybe we'll do a lightning round one more time.


00:21:14.300 --> 00:21:15.140
What do you got for us?


00:21:15.140 --> 00:21:18.280
- This is just a cookie that pytest has


00:21:18.280 --> 00:21:22.100
temporary directories and temperature factory fixtures


00:21:22.100 --> 00:21:24.500
for dealing with temporary files,


00:21:24.500 --> 00:21:28.140
but they've added, as of pytest 3.9,


00:21:28.140 --> 00:21:33.140
there's a path versions that return pathlib path objects.


00:21:33.140 --> 00:21:35.860
And those are just quite fun


00:21:35.860 --> 00:21:37.380
and I'll drop a link in the show notes.


00:21:37.380 --> 00:21:38.700
- Okay, that's great.


00:21:38.700 --> 00:21:41.340
So I want to bring your attention to something,


00:21:41.340 --> 00:21:44.740
let's say non-standard in terms of conference presentations.


00:21:44.740 --> 00:21:46.380
So this is something at PyCon US.


00:21:46.380 --> 00:21:50.420
So in May, Cleveland, 2019,


00:21:50.420 --> 00:21:53.460
there's a project called the Art of Python,


00:21:53.460 --> 00:21:55.860
which is a miniature arts festival


00:21:55.860 --> 00:21:58.600
focusing on narrative performance and visual art


00:21:58.600 --> 00:22:01.500
around programming and Python,


00:22:01.500 --> 00:22:04.700
and basically showcase novel art that helps us


00:22:04.700 --> 00:22:07.180
share our emotionally charged programming experiences,


00:22:07.180 --> 00:22:08.500
particularly to do with Python.


00:22:08.500 --> 00:22:10.940
So it's like five to 20 minute presentations


00:22:10.940 --> 00:22:12.260
in a separate little track,


00:22:12.260 --> 00:22:13.580
and the call for papers are open.


00:22:13.580 --> 00:22:17.540
So if you've always been a theater fan and you program,


00:22:17.540 --> 00:22:18.380
here you go.


00:22:18.380 --> 00:22:19.900
- Oh, this looks very cool.


00:22:19.900 --> 00:22:21.220
- Yeah, yeah, that's pretty interesting.


00:22:21.220 --> 00:22:23.540
So people can check that out if that connects with them.


00:22:23.540 --> 00:22:26.660
The other one is one of my favorite surveys


00:22:26.660 --> 00:22:28.460
and sort of put your finger on the pulse


00:22:28.460 --> 00:22:31.340
of the community items is the Stack Overflow Survey.


00:22:31.340 --> 00:22:34.380
Well, the 2019 one is open.


00:22:34.380 --> 00:22:36.760
So everyone should go out there and represent for Python


00:22:36.760 --> 00:22:39.840
and fill out the 2019 Stack Overflow Survey.


00:22:39.840 --> 00:22:40.700
So that's good.


00:22:40.700 --> 00:22:43.000
And then finally, this gets a little bit back


00:22:43.000 --> 00:22:44.740
to your pick, Nina.


00:22:44.740 --> 00:22:49.260
NumPy is awaiting a fix for a critical remote,


00:22:49.260 --> 00:22:51.960
remote code execution bug.


00:22:51.960 --> 00:22:53.400
That's bad.


00:22:53.400 --> 00:22:55.540
That doesn't sound super good.


00:22:55.540 --> 00:22:59.400
So yeah, I don't know if it has been entirely fixed yet.


00:22:59.400 --> 00:23:03.080
I don't, you know, this is a couple days ago, it was not.


00:23:03.080 --> 00:23:05.180
So the idea is basically there's a problem


00:23:05.180 --> 00:23:06.360
with the pickle module.


00:23:06.360 --> 00:23:08.640
Have you ever, could you imagine there'd be a problem


00:23:08.640 --> 00:23:12.040
with accepting user input straight in pickle form?


00:23:12.040 --> 00:23:13.720
I can't imagine.


00:23:13.720 --> 00:23:16.400
So the idea is there's some part of NumPy


00:23:16.400 --> 00:23:19.320
that you can load pickle data.


00:23:19.320 --> 00:23:20.840
And you know, for those of you who don't know,


00:23:20.840 --> 00:23:23.120
like part of the pickle statement is


00:23:23.120 --> 00:23:25.440
here's some Python code as a module


00:23:25.440 --> 00:23:27.100
and here's arbitrary code to run


00:23:27.100 --> 00:23:29.480
as part of deserializing that.


00:23:29.480 --> 00:23:30.480
So good luck.


00:23:30.480 --> 00:23:31.320
- Oh boy.


00:23:31.320 --> 00:23:33.480
- Yeah, yeah, that's not so good.


00:23:33.480 --> 00:23:38.360
So this goes up to at least version 1.10 through 1.16,


00:23:38.360 --> 00:23:40.720
which at least is January 14th, this hadn't been fixed.


00:23:40.720 --> 00:23:42.320
So hopefully it's been fixed,


00:23:42.320 --> 00:23:44.760
but more importantly, if you're using NumPy


00:23:44.760 --> 00:23:48.660
and you're accepting user input through the load function,


00:23:48.660 --> 00:23:50.640
you wanna upgrade and you wanna be a little careful


00:23:50.640 --> 00:23:51.760
around that.


00:23:51.760 --> 00:23:52.840
All right, then last one,


00:23:52.840 --> 00:23:53.840
I just wanna throw out there really quick.


00:23:53.840 --> 00:23:55.800
I ran across this and I've known about it for a long time,


00:23:55.800 --> 00:23:59.160
but it turns out to be more useful than I thought.


00:23:59.160 --> 00:24:01.520
So I use Google Docs a lot,


00:24:01.520 --> 00:24:03.400
and I have like sheets in there,


00:24:03.400 --> 00:24:07.280
and I've got Word, like documents and stuff.


00:24:07.280 --> 00:24:10.040
But the problem is if you use like Google Drive,


00:24:10.040 --> 00:24:11.200
what ends up on your hard drive


00:24:11.200 --> 00:24:13.440
is like a hyperlink back to the actual sheet, right?


00:24:13.440 --> 00:24:14.880
So how do you back that stuff up?


00:24:14.880 --> 00:24:19.520
It turns out if you go to takeout.google.com/studying/takeout,


00:24:19.520 --> 00:24:20.520
that's a lot of repetition.


00:24:20.520 --> 00:24:22.320
Anyway, you go there, you can say,


00:24:22.320 --> 00:24:24.400
give me all my document format, all my documents,


00:24:24.400 --> 00:24:26.520
and it'll give them to you in Microsoft Office format.


00:24:26.520 --> 00:24:28.680
Like it'll convert the sheets to Excel,


00:24:28.680 --> 00:24:30.320
it'll convert the docs to Word docs,


00:24:30.320 --> 00:24:31.160
and then let you download them


00:24:31.160 --> 00:24:33.640
so you have like a sort of permanent version.


00:24:33.640 --> 00:24:35.000
Anyway, I thought that was cool


00:24:35.000 --> 00:24:36.280
and people might find that useful too.


00:24:36.280 --> 00:24:37.360
- Cool. - Yeah.


00:24:37.360 --> 00:24:38.840
All right, Nina, you got some as well.


00:24:38.840 --> 00:24:40.700
You're teaching a class that looks really interesting.


00:24:40.700 --> 00:24:43.400
- That's right, yeah, I'm teaching a two-day introduction


00:24:43.400 --> 00:24:47.920
to an intermediate Python course on March 19th and 20th.


00:24:47.920 --> 00:24:50.600
And that class is gonna live stream for free


00:24:50.600 --> 00:24:53.080
at Front End Masters on each day.


00:24:53.080 --> 00:24:54.520
And all the course materials,


00:24:54.520 --> 00:24:55.920
I'm gonna release for free as well.


00:24:55.920 --> 00:24:56.760
- That's really excellent.


00:24:56.760 --> 00:24:59.440
And it has a in-person component if you happen to be,


00:24:59.440 --> 00:25:00.440
where is it, in Minneapolis?


00:25:00.440 --> 00:25:01.640
- In Minneapolis, that's right.


00:25:01.640 --> 00:25:02.680
You can come to the class.


00:25:02.680 --> 00:25:04.480
- Will Minneapolis be thawed out by then?


00:25:04.480 --> 00:25:06.440
- The class size is about 20 people.


00:25:06.440 --> 00:25:07.280
(laughs)


00:25:07.280 --> 00:25:08.620
That I cannot promise.


00:25:08.620 --> 00:25:10.720
Hopefully in March, it's a little warmer.


00:25:10.720 --> 00:25:12.840
- Yeah, so up to 20 people could drop in in person.


00:25:12.840 --> 00:25:13.680
That'd be really cool.


00:25:13.680 --> 00:25:16.720
- The next thing, I recently recorded a series of videos


00:25:16.720 --> 00:25:17.920
with Carlton Gibson.


00:25:17.920 --> 00:25:20.040
He's a Django maintainer, maintains


00:25:20.040 --> 00:25:23.080
a lot of other projects on developing Django web


00:25:23.080 --> 00:25:25.960
apps with VS Code, deploying them to Azure


00:25:25.960 --> 00:25:29.280
with just a few clicks, setting up continuous integration


00:25:29.280 --> 00:25:31.760
and continuous delivery, as well as creating


00:25:31.760 --> 00:25:33.640
serverless applications.


00:25:33.640 --> 00:25:38.480
You can watch that video series at aka.ms/python-videos.


00:25:38.480 --> 00:25:39.480
Yeah, that sounds cool.


00:25:39.480 --> 00:25:40.880
I definitely want to check that out, too.


00:25:40.880 --> 00:25:41.680
Yeah, it's great.


00:25:41.680 --> 00:25:45.120
We got to film in the Microsoft Channel 9 studio,


00:25:45.120 --> 00:25:47.960
and it's a very well done series.


00:25:47.960 --> 00:25:49.520
- All the bright lights and everything, huh?


00:25:49.520 --> 00:25:50.720
Not just screencasts.


00:25:50.720 --> 00:25:51.560
That's cool.


00:25:51.560 --> 00:25:53.680
- Yeah, we feel like newscasters.


00:25:53.680 --> 00:25:55.880
I'm also, I'm planning on being a mentor


00:25:55.880 --> 00:25:59.960
at a brand new hatchery event at PyCon US 2019.


00:25:59.960 --> 00:26:02.920
That's gonna be mentored sprints for diverse beginners


00:26:02.920 --> 00:26:05.360
organized by Tanya Allard.


00:26:05.360 --> 00:26:08.160
The goal is to help underrepresented folks at PyCon


00:26:08.160 --> 00:26:11.160
contribute to open source in a supportive environment.


00:26:11.160 --> 00:26:13.500
The details aren't out yet, but I dropped a link


00:26:13.500 --> 00:26:15.420
to where they'll be when they're finalized.


00:26:15.420 --> 00:26:16.300
- Oh, that's super cool.


00:26:16.300 --> 00:26:19.540
And there's also things like scholarships


00:26:19.540 --> 00:26:21.420
or something like that to help folks


00:26:21.420 --> 00:26:24.300
get actually physically to the event


00:26:24.300 --> 00:26:25.620
if they need some help as well, right?


00:26:25.620 --> 00:26:27.860
They can apply for that at the PyCon site.


00:26:27.860 --> 00:26:30.760
- Yeah, PyCon US offers a lot of financial aid.


00:26:30.760 --> 00:26:33.700
Lastly, if you're interested in Python for hardware,


00:26:33.700 --> 00:26:35.220
like we talked about earlier,


00:26:35.220 --> 00:26:38.500
you can catch my talk about electronics projects in Python


00:26:38.500 --> 00:26:42.740
with LEDs at PyCascades in Seattle on February 24th.


00:26:42.740 --> 00:26:44.780
Currently, tickets for that are still on sale.


00:26:44.780 --> 00:26:45.980
- Excellent, yeah, and Brian and I


00:26:45.980 --> 00:26:47.100
are definitely gonna be there.


00:26:47.100 --> 00:26:50.220
We're all going to PyCascade, so we're gonna catch it.


00:26:50.220 --> 00:26:51.380
Hopefully everyone else does as well.


00:26:51.380 --> 00:26:53.140
- Great, I'm excited to see you there.


00:26:53.140 --> 00:26:56.300
And I do have one last thing to sneak in,


00:26:56.300 --> 00:26:59.140
and that is if you haven't tried the Python extension


00:26:59.140 --> 00:27:02.180
for VS Code yet, now is a really good time.


00:27:02.180 --> 00:27:05.460
The December release included some really killer features


00:27:05.460 --> 00:27:07.220
like remote Jupyter support


00:27:07.220 --> 00:27:11.020
and exporting Python files as Jupyter notebooks.


00:27:11.020 --> 00:27:12.440
And if you're interested in keeping up


00:27:12.440 --> 00:27:14.440
with future releases, I dropped in a link


00:27:14.440 --> 00:27:16.160
to the Python at Microsoft blog.


00:27:16.160 --> 00:27:18.880
- Nice, and didn't you as a group,


00:27:18.880 --> 00:27:21.680
speaking to you as a Microsoft, as VS Code,


00:27:21.680 --> 00:27:25.360
didn't you guys just release like an AI-powered


00:27:25.360 --> 00:27:28.480
autocomplete backend for Python as well?


00:27:28.480 --> 00:27:30.360
- That's been around for a few months.


00:27:30.360 --> 00:27:32.800
I believe it's still in preview mode,


00:27:32.800 --> 00:27:34.600
but it works really well.


00:27:34.600 --> 00:27:37.840
The dataset was trained on a bunch of open source projects.


00:27:37.840 --> 00:27:38.840
- Yeah, it looks super cool,


00:27:38.840 --> 00:27:40.280
so I definitely want to check that out.


00:27:40.280 --> 00:27:41.800
I think I installed it just the other day,


00:27:41.800 --> 00:27:43.140
So it should be fun.


00:27:43.140 --> 00:27:44.340
- Yeah, try it.


00:27:44.340 --> 00:27:45.240
Let me know what you think.


00:27:45.240 --> 00:27:46.080
- Absolutely.


00:27:46.080 --> 00:27:47.700
Brian, we've come to our joke section, right?


00:27:47.700 --> 00:27:48.540
- Yeah.


00:27:48.540 --> 00:27:49.560
(laughing)


00:27:49.560 --> 00:27:50.980
- Nina, you wanna kick us off?


00:27:50.980 --> 00:27:54.320
- Yeah, I found a bunch of really cheesy snake jokes,


00:27:54.320 --> 00:27:55.960
so here they go.


00:27:55.960 --> 00:27:58.560
What do you call a snake that only eats dessert?


00:27:58.560 --> 00:27:59.400
- I don't know.


00:27:59.400 --> 00:28:01.040
- It's a pie-thon.


00:28:01.040 --> 00:28:02.720
(laughing)


00:28:02.720 --> 00:28:04.240
- Nice, I'll do the next one.


00:28:04.240 --> 00:28:06.200
How do you measure a python?


00:28:06.200 --> 00:28:07.840
In inches, they don't have any feet.


00:28:07.840 --> 00:28:09.680
(laughing)


00:28:09.680 --> 00:28:11.120
Brian, what's the last one?


00:28:11.120 --> 00:28:13.680
- What is Python's favorite subject?


00:28:13.680 --> 00:28:14.520
- I don't know, what is it?


00:28:14.520 --> 00:28:16.080
- History, that's bad.


00:28:16.080 --> 00:28:16.920
These are all bad.


00:28:16.920 --> 00:28:17.740
(laughing)


00:28:17.740 --> 00:28:18.580
- Lovely.


00:28:18.580 --> 00:28:21.440
- And I will not apologize.


00:28:21.440 --> 00:28:22.280
- No, those are great.


00:28:22.280 --> 00:28:23.680
Thank you for finding those, Nina.


00:28:23.680 --> 00:28:25.760
Or coming up with them, either way, they're great.


00:28:25.760 --> 00:28:28.120
All right, folks, well, thank you for listening.


00:28:28.120 --> 00:28:30.240
And Nina and Brian, thank you for being here today,


00:28:30.240 --> 00:28:31.080
of course.


00:28:31.080 --> 00:28:31.920
- Thank you.


00:28:31.920 --> 00:28:32.740
- Thanks for having me.


00:28:32.740 --> 00:28:33.580
- You bet, bye.


00:28:33.580 --> 00:28:34.420
- Bye. - Bye.


00:28:34.420 --> 00:28:35.320
- Thank you for listening to Python Bytes.


00:28:35.320 --> 00:28:37.800
Follow the show on Twitter via @pythonbytes.


00:28:37.800 --> 00:28:40.960
That's Python Bytes as in B-Y-T-E-S.


00:28:40.960 --> 00:28:45.760
get the full show notes at pythonbytes.fm. If you have a news item you want featured,


00:28:45.760 --> 00:28:50.640
just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something


00:28:50.640 --> 00:28:55.760
cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and


00:28:55.760 --> 00:28:58.000
sharing this podcast with your friends and colleagues.

