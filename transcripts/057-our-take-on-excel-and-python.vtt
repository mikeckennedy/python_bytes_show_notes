
00:00:00.000 --> 00:00:05.700
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.700 --> 00:00:11.000
This is episode 57 recorded December 19th, 2017. I'm Michael Kennedy.


00:00:11.000 --> 00:00:11.900
And I'm Brian Okken.


00:00:11.900 --> 00:00:17.700
And we have a bunch of really cool stuff to share with you. As always, we've been looking through all of the new sources


00:00:17.700 --> 00:00:22.600
and finding all the Python goodies for you. Brian, what's the first goodie that you found?


00:00:22.600 --> 00:00:25.400
Anthony Shaw, or I know him as Tony,


00:00:25.400 --> 00:00:27.600
has worked on GitHub.


00:00:27.600 --> 00:00:30.000
I like his handle, Tony Maloney.


00:00:30.000 --> 00:00:33.880
But he has been working on a tool called ReTOX.


00:00:33.880 --> 00:00:38.120
And this is a tool you can really run anything with it,


00:00:38.120 --> 00:00:42.320
but the original intent is to run your tests.


00:00:42.320 --> 00:00:47.640
What TOX does is a tool that will run your setup


00:00:47.640 --> 00:00:49.800
if you have packages, and you can turn that off


00:00:49.800 --> 00:00:52.400
if you don't want the setup to get tested.


00:00:52.400 --> 00:00:55.960
but it'll test your setup and then run it in different environments.


00:00:55.960 --> 00:00:59.800
And the typical example is running multiple Python versions,


00:00:59.800 --> 00:01:03.540
running all your tests in multiple Python or multiple library versions


00:01:03.540 --> 00:01:05.540
to make sure all your tests pass.


00:01:05.540 --> 00:01:09.140
And there is a detox version that is,


00:01:09.140 --> 00:01:12.200
can distribute that across processors,


00:01:12.200 --> 00:01:15.940
can speed it up two to three times or two to four times faster or more


00:01:15.940 --> 00:01:18.640
if you run it on distributed processors.


00:01:18.640 --> 00:01:23.880
Or if you spent like what $15,000 on a new iMac Pro and got 18 cores.


00:01:23.880 --> 00:01:28.280
Oh, yeah, yeah, you could be 18 times faster, or 16 or something.


00:01:28.280 --> 00:01:34.480
Anthony put together Retox, which does all this, but also does it with a nice GUI.


00:01:34.480 --> 00:01:39.080
So you can watch your tests run, which is really kind of cool.


00:01:39.080 --> 00:01:46.280
And he did it for Python 2 first, and then very quickly within a week, ported it to Python 3


00:01:46.280 --> 00:01:48.580
with some problems along the way,


00:01:48.580 --> 00:01:50.120
but he worked through them, which is nice.


00:01:50.120 --> 00:01:50.800
>> Yeah, well done.


00:01:50.800 --> 00:01:54.040
>> It also has the cool capability of watching a directory.


00:01:54.040 --> 00:01:58.400
So you can have this GUI sitting up on a monitor somewhere,


00:01:58.400 --> 00:01:59.740
if you've got a couple of monitors,


00:01:59.740 --> 00:02:01.340
or in the corner of your window,


00:02:01.340 --> 00:02:04.600
and then you can have it watch your source code.


00:02:04.600 --> 00:02:06.700
As you save changes,


00:02:06.700 --> 00:02:09.040
it tests everything on multiple versions of


00:02:09.040 --> 00:02:12.220
Python or multiple hardware or whatever you want to do.


00:02:12.220 --> 00:02:13.520
>> Yeah, that's really, really cool.


00:02:13.520 --> 00:02:14.160
>> Very cool.


00:02:14.160 --> 00:02:15.720
>> I'll just describe what it looks like.


00:02:15.720 --> 00:02:18.720
So you run it in terminal or command prompt,


00:02:18.720 --> 00:02:23.720
and you get like an ANSI art type of interactive thing.


00:02:23.720 --> 00:02:25.840
And it shows you different columns


00:02:25.840 --> 00:02:27.720
for the different tests that are all running


00:02:27.720 --> 00:02:31.600
like Python 2.7, Python 3.6, Lint, PyLint,


00:02:31.600 --> 00:02:33.960
all these things running in parallel and their status.


00:02:33.960 --> 00:02:34.800
It's pretty cool, right?


00:02:34.800 --> 00:02:36.720
- Yeah, and one of the things,


00:02:36.720 --> 00:02:38.080
I was trying to do this this morning,


00:02:38.080 --> 00:02:41.480
getting a chance to quite get it done with meetings and all,


00:02:41.480 --> 00:02:45.080
but instead of running Python 2 versus 3 and stuff,


00:02:45.080 --> 00:02:48.300
What I'm gonna use it for is running the same set of tests


00:02:48.300 --> 00:02:51.540
with the same Python, but against different instruments.


00:02:51.540 --> 00:02:54.940
So I can run across multiple hardware.


00:02:54.940 --> 00:02:55.780
- That's cool.


00:02:55.780 --> 00:02:59.280
So you're parallelizing the same code running,


00:02:59.280 --> 00:03:01.620
but you're parallelizing the hardware,


00:03:01.620 --> 00:03:03.180
not the versions of Python.


00:03:03.180 --> 00:03:04.020
- Yeah.


00:03:04.020 --> 00:03:04.840
- Yeah, that's pretty awesome.


00:03:04.840 --> 00:03:05.680
- That'll be good.


00:03:05.680 --> 00:03:06.520
- Yeah, that'll be good.


00:03:06.520 --> 00:03:07.540
So I thought this episode,


00:03:07.540 --> 00:03:09.740
I'd talk about some of the tools that I've been using


00:03:09.740 --> 00:03:12.300
for a little while that I really enjoy,


00:03:12.300 --> 00:03:14.420
but just haven't thought to bring up on the show.


00:03:14.420 --> 00:03:18.660
So the first one I want to talk about is a database management tool for MongoDB


00:03:18.660 --> 00:03:20.820
called, it used to be called RoboMongo.


00:03:20.820 --> 00:03:24.400
It got bought by a company, which is an interesting story in and of itself,


00:03:24.400 --> 00:03:25.700
by a company called 3T.


00:03:25.700 --> 00:03:29.840
So now it's Robo3T, but in my heart, it will always be RoboMongo.


00:03:29.840 --> 00:03:34.940
Anyway, what this thing is, is a shell for MongoDB that you type.


00:03:34.940 --> 00:03:37.320
So command line type of interaction with it,


00:03:37.320 --> 00:03:40.880
but all the results appear as a GUI result.


00:03:40.880 --> 00:03:43.360
So you have this kind of part where you type in


00:03:43.360 --> 00:03:46.620
and you run commands against Mongo, but all the results show up in


00:03:46.620 --> 00:03:50.160
maybe a tree view or you can right click and interact with them


00:03:50.160 --> 00:03:52.160
once the results come back and stuff. So it's


00:03:52.160 --> 00:03:55.260
really, really nice if you're doing anything with MongoDB


00:03:55.260 --> 00:03:57.860
runs on all the platforms, check it out, Robot3D.


00:03:57.860 --> 00:04:00.160
Nice way to visualize your database, that's cool.


00:04:00.160 --> 00:04:02.660
Yeah, it's one of the best like simple


00:04:02.660 --> 00:04:05.160
visual interactions with databases because


00:04:05.160 --> 00:04:07.760
the majority of what you do is still the CLI,


00:04:07.760 --> 00:04:12.160
it's still the straight interface for working with it, but all the results that come out of that interaction are


00:04:12.160 --> 00:04:14.160
GUI base, which I think is cool.


00:04:14.160 --> 00:04:17.040
It's also interesting in an open source way.


00:04:17.040 --> 00:04:19.440
On one hand, it's number 34,


00:04:19.440 --> 00:04:21.920
most popular repository on GitHub,


00:04:21.920 --> 00:04:23.040
which is cool.


00:04:23.040 --> 00:04:24.480
It's built with Qt,


00:04:24.480 --> 00:04:27.120
which makes it look like a really nice cross-platform app,


00:04:27.120 --> 00:04:29.440
which you could build out with PySide or PyQt,


00:04:29.440 --> 00:04:31.200
I think, and get the same looking app.


00:04:31.200 --> 00:04:33.240
So that's also a really interesting example.


00:04:33.240 --> 00:04:35.440
And it was an open source project


00:04:35.440 --> 00:04:37.760
that was started somewhere in Eastern Europe.


00:04:37.760 --> 00:04:39.040
I don't remember where.


00:04:39.040 --> 00:04:41.520
Became really successful and this other company bought it.


00:04:41.520 --> 00:04:46.520
And so here's also an interesting business model around open source stuff.


00:04:46.520 --> 00:04:47.020
Yeah.


00:04:47.020 --> 00:04:47.520
Cool.


00:04:47.520 --> 00:04:50.660
So anyway, if you're doing anything with MongoDB, check out RoboMongo.


00:04:50.660 --> 00:04:51.160
Cool.


00:04:51.160 --> 00:04:55.120
Sometimes, we talked about in the new version of Django,


00:04:55.120 --> 00:04:58.520
you don't have to do regular expressions anymore for...


00:04:58.520 --> 00:05:02.020
For the routes, right? For the route definitions, which I think is a positive thing, for sure.


00:05:02.020 --> 00:05:06.160
Yeah, definitely. But there's definitely sometimes where I've been using regular expressions


00:05:06.160 --> 00:05:08.160
for as long as I've been programming, almost.


00:05:08.160 --> 00:05:09.520
So programming's always been hard.


00:05:09.520 --> 00:05:14.400
Yeah, shortly into my CS program,


00:05:14.400 --> 00:05:19.200
I got thrown a Pearl book and said, "Learn this."


00:05:19.200 --> 00:05:23.040
Anyway, there's a couple of articles that came out recently that I thought were


00:05:23.040 --> 00:05:28.080
really good for people that need to get a handle on regular expressions quickly.


00:05:28.080 --> 00:05:31.960
One of them is Regular Expressions Practical Guide.


00:05:31.960 --> 00:05:35.600
It's a nice article that talks through using


00:05:35.600 --> 00:05:41.240
the re package to do things like parse email addresses and phone numbers and URLs.


00:05:41.240 --> 00:05:45.600
And those are good examples even if you don't have to do that.


00:05:45.600 --> 00:05:47.240
Everybody knows what those look like.


00:05:47.240 --> 00:05:51.480
So it's good to sort of learn some of the regular expressions with that.


00:05:51.480 --> 00:05:54.080
Yeah, I really like the example driven approach as well.


00:05:54.080 --> 00:05:57.640
Like here's how you match a bunch of different things you might want to.


00:05:57.640 --> 00:06:01.040
And also the fact that it's using the Python libraries and not just


00:06:01.040 --> 00:06:03.040
here's a random regular expression


00:06:03.040 --> 00:06:06.240
means it's really quick to just drop in directly, which is cool.


00:06:06.240 --> 00:06:12.520
And then there's another article called regular expressions for data scientists that do some of this, but then also


00:06:12.520 --> 00:06:17.040
it's mostly focused around parsing text,


00:06:17.040 --> 00:06:20.040
of course, with regular expressions, but


00:06:20.040 --> 00:06:24.560
it's also a good intro and it dives a little bit deeper into


00:06:24.560 --> 00:06:28.160
find all and search. And so I think check both those out


00:06:28.160 --> 00:06:30.320
if you want to beef up on regular expressions.


00:06:30.320 --> 00:06:36.160
Yeah, that's really cool. Nice. I like the motivational introduction for the data science one.


00:06:36.160 --> 00:06:41.040
Sometimes, you know, this might include searching massive corpus of text.


00:06:41.040 --> 00:06:46.640
For example, suppose you're asked to figure out who's been emailing whom in a scandal of the Panama Papers.


00:06:46.640 --> 00:06:50.880
That's 11.5 million documents. We need regular expressions. Let's go.


00:06:50.880 --> 00:06:52.000
Yeah, definitely.


00:06:52.000 --> 00:06:54.000
Yeah, very exciting. Very exciting.


00:06:54.000 --> 00:06:58.640
Cool. So before we go on, let me just tell you about the sponsor for this week's episode.


00:06:58.640 --> 00:07:03.440
That is DigitalOcean. Thank you, DigitalOcean, for sponsoring the show as they are,


00:07:03.440 --> 00:07:08.240
I would say, the major sponsor for the show. They definitely sponsor it more than anyone else and


00:07:08.240 --> 00:07:12.240
with good reason. They have really, really cool things going on over there.


00:07:12.240 --> 00:07:16.040
You know, there's a lot of places you can get your cloud computing resources, but


00:07:16.040 --> 00:07:20.640
a lot of them are overly complicated, overly expensive, and so on. With DigitalOcean,


00:07:20.640 --> 00:07:24.440
go over there, quickly set up a server, set up some storage,


00:07:24.440 --> 00:07:26.440
link them together, it's really wonderful.


00:07:26.440 --> 00:07:29.320
So, the sites, websites running on DigitalOcean,


00:07:29.320 --> 00:07:32.680
among a bunch of other things that I'm running as well.


00:07:32.680 --> 00:07:35.160
So, definitely a great place to check out.


00:07:35.160 --> 00:07:40.320
And you can get started by going to pythonbytes.fm/digitalocean.


00:07:40.320 --> 00:07:43.320
So, keeping with my theme of things that


00:07:43.320 --> 00:07:45.840
I want to talk about that I've been using and really enjoying,


00:07:45.840 --> 00:07:47.840
but haven't bothered to bring up on the show,


00:07:47.840 --> 00:07:53.440
to complement the other side of the story with the MongoDB thing is Mongo Engine.


00:07:53.440 --> 00:07:55.440
So you've heard of SQLAlchemy, right, Brian?


00:07:55.440 --> 00:07:56.240
Yeah, definitely.


00:07:56.240 --> 00:07:58.740
Yeah, so that's probably the most popular way


00:07:58.740 --> 00:08:01.440
in Python to talk to relational databases.


00:08:01.440 --> 00:08:04.240
Well, the MongoDB equivalent of SQLAlchemy


00:08:04.240 --> 00:08:06.240
is this thing called MongoEngine.


00:08:06.240 --> 00:08:08.240
There's a handful of these so-called


00:08:08.240 --> 00:08:10.740
document, object document mappers,


00:08:10.740 --> 00:08:12.740
because you don't have a relational,


00:08:12.740 --> 00:08:14.740
so it's not an ORM, it's an ODM.


00:08:14.740 --> 00:08:17.740
And anyway, there's a handful of these for MongoDB,


00:08:17.740 --> 00:08:20.940
but this one really is quite needed.


00:08:20.940 --> 00:08:23.480
lets you take a class derived from a base class


00:08:23.480 --> 00:08:24.940
and map it into MongoDB.


00:08:24.940 --> 00:08:28.280
And the way you work with it is very similar to Django's ORM, actually.


00:08:28.280 --> 00:08:31.020
You map a class, create an instance of it, you call save,


00:08:31.020 --> 00:08:32.940
you can do queries on it, all sorts of stuff.


00:08:32.940 --> 00:08:37.020
But leveraging the hierarchical document TV nature of MongoDB,


00:08:37.020 --> 00:08:41.940
it also adds new features like MongoDB doesn't really have schemas.


00:08:41.940 --> 00:08:44.380
In general, they're starting to add some of these features,


00:08:44.380 --> 00:08:46.420
but there's no schema definition.


00:08:46.420 --> 00:08:47.780
It's just whatever you put in there.


00:08:47.780 --> 00:08:50.940
Well, with Mongo Engine, you have a schema that matches your classes,


00:08:50.940 --> 00:08:53.580
so you have some reliable data structure.


00:08:53.580 --> 00:08:57.220
MongoDB has no concept of required fields or constraints,


00:08:57.220 --> 00:08:59.820
like this number must be between 10 and 1,000.


00:08:59.820 --> 00:09:03.320
But Mongo Engine does, relationships, all sorts of cool stuff.


00:09:03.320 --> 00:09:05.460
So it really provides a lot of nice structure


00:09:05.460 --> 00:09:08.300
around working with a NoSQL schema-less database.


00:09:08.300 --> 00:09:10.500
Oh, that's nice. Yeah, I'll definitely check that out.


00:09:10.500 --> 00:09:12.300
Yeah, so I've found this to be super helpful.


00:09:12.300 --> 00:09:14.400
Like, actually, a lot of my sites are implemented,


00:09:14.400 --> 00:09:16.400
including Python Bytes, for example.


00:09:16.400 --> 00:09:19.300
The one thing that's a little bit of a pain


00:09:19.300 --> 00:09:23.700
is the deserialization speed is not awesome.


00:09:23.700 --> 00:09:27.200
So if you retrieve 100,000 records from MongoDB,


00:09:27.200 --> 00:09:28.500
that's really fast probably,


00:09:28.500 --> 00:09:32.100
but then it'll drag on turning those into Mongo engine documents.


00:09:32.100 --> 00:09:34.700
But if you're getting 50 or 100, it's totally fine.


00:09:34.700 --> 00:09:37.500
For whatever reason, it's just not that fast deserializing stuff.


00:09:37.500 --> 00:09:40.200
And usually it's plenty fast, but if you do it 100,000 times,


00:09:40.200 --> 00:09:42.000
it turns out to like start to show up.


00:09:42.000 --> 00:09:42.700
Okay.


00:09:42.700 --> 00:09:44.000
What you got first next?


00:09:44.000 --> 00:09:45.200
Another pretty printer.


00:09:45.200 --> 00:09:48.540
So this is, I guess it's called pretty printer.


00:09:48.540 --> 00:09:50.000
Yeah, article called


00:09:50.000 --> 00:09:52.320
Introducing Pretty Printer for Python.


00:09:52.320 --> 00:09:55.000
I think it's an extensible one, which is kind of nice.


00:09:55.000 --> 00:09:58.120
So somebody took, it's 3.6, there's three, six


00:09:58.120 --> 00:10:00.760
and above only, but somebody was taking a look


00:10:00.760 --> 00:10:03.620
at all the different ways to pretty print their output


00:10:03.620 --> 00:10:06.720
for debugging your code and it wasn't really happy with them


00:10:06.720 --> 00:10:09.920
so added yet another, but this is kind of extensible


00:10:09.920 --> 00:10:13.960
and cool so you can add on if you have your particular way


00:10:13.960 --> 00:10:17.920
you want to print your classes or your calls to different functions,


00:10:17.920 --> 00:10:21.120
you can customize that and


00:10:21.120 --> 00:10:23.120
it's pretty simple interface and I like it.


00:10:23.120 --> 00:10:25.400
Yeah, it's really nice. So if you're in, say,


00:10:25.400 --> 00:10:29.760
the Python REPL, you can ask it to print out some stuff and it'll actually


00:10:29.760 --> 00:10:33.240
do things like format the dictionaries


00:10:33.240 --> 00:10:37.400
according to PEP 8 with line breaks and indentation, it'll colorize


00:10:37.400 --> 00:10:40.400
all the values, like the keys will be one color,


00:10:40.400 --> 00:10:43.920
the values will be another, things like that. So it


00:10:43.920 --> 00:10:45.920
It really does. It's really nice like that.


00:10:45.920 --> 00:10:48.160
The colorizing is very nice. That's pretty cool.


00:10:48.160 --> 00:10:51.160
Yeah, I would say that the colorizing and


00:10:51.160 --> 00:10:56.160
also the reformatting for human readable parts is quite nice as well.


00:10:56.160 --> 00:10:59.920
So it's very nice and has a nice declarative API as well.


00:10:59.920 --> 00:11:01.760
So you can even extend it, right?


00:11:01.760 --> 00:11:04.480
There's an example in there to be able to extend


00:11:04.480 --> 00:11:07.760
extend your call with comments even


00:11:07.760 --> 00:11:09.600
to have the comments pop out.


00:11:09.600 --> 00:11:11.360
So let me ask you a question.


00:11:11.360 --> 00:11:14.160
What do you think the most popular database in the world is?


00:11:14.160 --> 00:11:15.000
- MySQL.


00:11:15.000 --> 00:11:16.460
- MySQL is definitely a good one.


00:11:16.460 --> 00:11:17.740
I'm gonna say Excel.


00:11:17.740 --> 00:11:20.280
At least in terms of amount of data,


00:11:20.280 --> 00:11:23.600
number of people that like create new quote databases.


00:11:23.600 --> 00:11:26.480
Like Excel is this weird thing


00:11:26.480 --> 00:11:29.880
that people who don't quite know programming or technology


00:11:29.880 --> 00:11:32.600
use it to more or less play the same role, right?


00:11:32.600 --> 00:11:36.000
You've got relationships, you've got formulas and whatnot.


00:11:36.000 --> 00:11:38.240
So Excel is really super important


00:11:38.240 --> 00:11:41.280
in the business world all over the place.


00:11:41.280 --> 00:11:44.840
Well, it so happens that Microsoft is considering


00:11:44.840 --> 00:11:48.680
replacing the macro scripting language for Excel


00:11:48.680 --> 00:11:51.800
that is built into it, VBA, with Python.


00:11:51.800 --> 00:11:53.240
>> Yes, that would be very nice.


00:11:53.240 --> 00:11:54.520
>> On one hand, I'm like,


00:11:54.520 --> 00:11:56.760
"Whee, I don't really want to program Excel.


00:11:56.760 --> 00:11:59.140
It doesn't make me super excited or super happy."


00:11:59.140 --> 00:12:03.040
On the other, look at what the adoption


00:12:03.040 --> 00:12:07.120
of Python in the data science space has done for Python in general.


00:12:07.120 --> 00:12:10.320
It's really, really complemented it and made it a better place.


00:12:10.320 --> 00:12:15.120
I think that's what would happen if Python became the main scripting language of Excel as well.


00:12:15.120 --> 00:12:17.920
There's all these people who are not really working in this space now,


00:12:17.920 --> 00:12:21.020
and all of a sudden they'd be super interested and contributing things that


00:12:21.020 --> 00:12:22.520
who knows what they would actually come up with.


00:12:22.520 --> 00:12:25.520
I'm imagining, this is actually pretty cool,


00:12:25.520 --> 00:12:29.520
I'm imagining a manager working with a spreadsheet


00:12:29.520 --> 00:12:33.320
and wanting to add some macro capabilities


00:12:33.320 --> 00:12:37.320
and getting a little bit too deep into it and getting a little lost,


00:12:37.320 --> 00:12:40.580
grabbing a developer and saying, "Hey, can you help me with this?"


00:12:40.580 --> 00:12:43.780
And right now, if it was me, I'd say,


00:12:43.780 --> 00:12:46.120
"No, you're on your own. I don't want to do that."


00:12:46.120 --> 00:12:48.520
I would hide under a desk like, "No, Michael's busy.


00:12:48.520 --> 00:12:52.120
Michael can't talk right now. He's looking for someone to work on PVA. Stay away."


00:12:52.120 --> 00:12:55.580
But if it's a Python interface there, yeah, I'd help out.


00:12:55.580 --> 00:12:58.820
So I think the interaction between developers and managers


00:12:58.820 --> 00:13:02.020
would increase dramatically if Python was in Excel.


00:13:02.020 --> 00:13:03.400
Yeah, I think it would be super cool.


00:13:03.400 --> 00:13:06.120
Who knows what the chances of this actually happening are.


00:13:06.120 --> 00:13:10.960
I tried to get Python into Windows because you know, it doesn't ship with Windows.


00:13:10.960 --> 00:13:22.360
And they have so Microsoft has this place called user voice where you can like, but maybe it's not even a Microsoft thing, but they use user voice, which lets you vote on features and requests and things like that.


00:13:22.360 --> 00:13:29.380
So I actually got over 1000 people to vote for shipping Python three with Windows 10 before it actually came out, but no dice.


00:13:29.920 --> 00:13:33.220
However, they did put Python into SQL Server


00:13:33.220 --> 00:13:36.420
so you can do in-process machine learning against your data.


00:13:36.420 --> 00:13:38.520
So there's one example of them doing this,


00:13:38.520 --> 00:13:42.120
and if they'll do it for SQL Server, they may well do it for Excel, which would be awesome.


00:13:42.120 --> 00:13:45.620
So everyone listening can have a voice on this.


00:13:45.620 --> 00:13:47.620
If you go there, click the link,


00:13:47.620 --> 00:13:50.220
upvote the item,


00:13:50.220 --> 00:13:52.620
and there's a survey you can fill out and tell them,


00:13:52.620 --> 00:13:54.620
Python 3, please, we'll take more of that.


00:13:54.620 --> 00:13:55.520
That'd be awesome.


00:13:55.520 --> 00:13:56.020
Yeah.


00:13:56.020 --> 00:13:59.620
So if this sounds cool to you, be sure to go there at least to upvote it


00:13:59.620 --> 00:14:01.980
So that they know this is something we all want.


00:14:01.980 --> 00:14:03.020
And call your Congressman.


00:14:03.020 --> 00:14:03.700
That's right.


00:14:03.700 --> 00:14:08.340
No, that was net neutrality, which didn't really help so much, but this might,


00:14:08.340 --> 00:14:09.420
this might, so that's awesome.


00:14:09.420 --> 00:14:11.300
All right.


00:14:11.300 --> 00:14:12.580
Well, that's our items for this week.


00:14:12.580 --> 00:14:13.700
Uh, how about you?


00:14:13.700 --> 00:14:14.500
Any personal news?


00:14:14.500 --> 00:14:17.020
We've been getting over, still getting over being sick.


00:14:17.020 --> 00:14:20.180
So we've have a tree up now, but we haven't decorated it.


00:14:20.180 --> 00:14:22.420
So that's our, our decorating for Christmas.


00:14:22.420 --> 00:14:22.900
That's awesome.


00:14:22.900 --> 00:14:24.220
That'll be a fun, fun thing.


00:14:24.220 --> 00:14:25.540
Kids going to be home from school.


00:14:25.540 --> 00:14:26.460
Pretty soon.


00:14:26.460 --> 00:14:27.340
They're all home now.


00:14:27.340 --> 00:14:28.780
So, so that's fun.


00:14:28.820 --> 00:14:30.820
So work is super productive these days.


00:14:30.820 --> 00:14:33.820
Yeah, I can actually get to work at a decent time.


00:14:33.820 --> 00:14:34.820
So it's good.


00:14:34.820 --> 00:14:35.820
Cool.


00:14:35.820 --> 00:14:39.820
All right. Well, for me, I have a webcast that I'm doing.


00:14:39.820 --> 00:14:41.820
And I guess one more MongoDB thing.


00:14:41.820 --> 00:14:46.820
So I'm doing a webcast that I call "Let's Build Something in MongoDB and Python."


00:14:46.820 --> 00:14:47.820
I don't have to click the link.


00:14:47.820 --> 00:14:49.820
I don't remember when it is. I think it's February.


00:14:49.820 --> 00:14:51.820
It is February 22nd.


00:14:51.820 --> 00:14:54.820
So there's a link at the bottom of the show notes that if you're interested,


00:14:54.820 --> 00:14:56.820
you can come attend the webcast.


00:14:56.820 --> 00:14:58.820
and it's just free, it might be fun.


00:14:58.820 --> 00:15:00.120
- Oh, definitely, yeah.


00:15:00.120 --> 00:15:03.300
So do you have like an intro to Mongo also?


00:15:03.300 --> 00:15:05.700
- I do have an intro to Mongo, a free one actually.


00:15:05.700 --> 00:15:07.900
It's at freemongodbcourse.com.


00:15:07.900 --> 00:15:09.580
- Okay, I just thought I brought that.


00:15:09.580 --> 00:15:13.620
- Yeah, and it uses Mongo engine and it uses RoboMongo.


00:15:13.620 --> 00:15:14.460
How about that?


00:15:14.460 --> 00:15:15.280
- Nice.


00:15:15.280 --> 00:15:16.120
- But it doesn't use Excel.


00:15:16.120 --> 00:15:16.940
- Good.


00:15:16.940 --> 00:15:18.180
(both laughing)


00:15:18.180 --> 00:15:19.380
- All right, well, Brian, thanks so much


00:15:19.380 --> 00:15:22.060
for finding all these things and sharing with everyone.


00:15:22.060 --> 00:15:22.900
- Yeah, thanks.


00:15:22.900 --> 00:15:25.780
- Thank you for listening to Python Bytes.


00:15:25.780 --> 00:15:31.620
Follow the show on Twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S.


00:15:31.620 --> 00:15:34.920
And get the full show notes at PythonBytes.fm.


00:15:34.920 --> 00:15:38.620
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:15:38.620 --> 00:15:39.620
way.


00:15:39.620 --> 00:15:42.120
We're always on the lookout for sharing something cool.


00:15:42.120 --> 00:15:45.580
On behalf of myself and Brian Auchin, this is Michael Kennedy.


00:15:45.580 --> 00:15:48.620
Thank you for listening and sharing this podcast with your friends and colleagues.

