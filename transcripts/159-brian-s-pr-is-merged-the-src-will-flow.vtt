
00:00:00.000 --> 00:00:12.000
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 159 recorded November 26, 2019. I'm Brian Okken.


00:00:12.000 --> 00:00:13.000
And I'm Michael Kennedy.


00:00:13.000 --> 00:00:19.000
And this episode is brought to you by DigitalOcean. Thank you DigitalOcean. More about them later. Michael, what are we talking about right away?


00:00:19.000 --> 00:00:23.880
about right away. You know, I'm a big fan of type annotations. And I don't know how


00:00:23.880 --> 00:00:27.280
I missed this one. I can't remember what I was reading. It was something we covered on


00:00:27.280 --> 00:00:32.160
a show recently. And it was talking about the final type annotation. I'm like, wait


00:00:32.160 --> 00:00:37.520
a minute, what there's a final as in with object oriented programming. You know, there's


00:00:37.520 --> 00:00:43.240
like abstract methods, virtual methods that can be overridden protected types. And some


00:00:43.240 --> 00:00:47.360
of those things appear in Python, abstract meta, for example, but others don't, but such


00:00:47.360 --> 00:00:49.360
is protected or internal.


00:00:49.360 --> 00:00:54.640
Another thing that until very recently did not appear in Python is a final type saying


00:00:54.640 --> 00:01:01.520
this class cannot be overridden or this method cannot be overridden in a type hierarchy.


00:01:01.520 --> 00:01:02.520
But now you can.


00:01:02.520 --> 00:01:03.520
Oh cool.


00:01:03.520 --> 00:01:06.760
And this is actually already in Python 3.8 if I'm reading this right.


00:01:06.760 --> 00:01:10.000
So this is pep 591.


00:01:10.000 --> 00:01:12.940
Its status is accepted and its Python version is 3.8.


00:01:12.940 --> 00:01:16.900
So I have not actually had a chance to test this out.


00:01:16.900 --> 00:01:19.420
But yeah, it looks like it is part of it.


00:01:19.420 --> 00:01:25.180
And you know, because it has to do with typing, of course, Gita Von Rossum is the BDFL delegate,


00:01:25.180 --> 00:01:27.020
which is kind of interesting.


00:01:27.020 --> 00:01:31.220
He's his own delegate, in a sense, but now the steering council is there.


00:01:31.220 --> 00:01:32.220
It's a little bit different.


00:01:32.220 --> 00:01:35.500
But yeah, so he was part of this and it adds a final type.


00:01:35.500 --> 00:01:42.060
So I can say this class cannot be derived from this method should not be overridden.


00:01:42.060 --> 00:01:45.780
And those sound pretty straightforward, but as far as I can tell from the use cases they


00:01:45.780 --> 00:01:50.460
put in the pep, it's something that is very, very close to a constant value as well.


00:01:50.460 --> 00:01:51.460
What do you mean?


00:01:51.460 --> 00:01:56.820
So, one of the things I can do is I can put an @final decorator on a class, and then if


00:01:56.820 --> 00:02:01.880
I try to derive from it, the type decorator will give me an error saying you cannot inherit


00:02:01.880 --> 00:02:03.300
from final class, whatever, right?


00:02:03.300 --> 00:02:04.300
Yeah.


00:02:04.300 --> 00:02:08.620
If I put it on a method, and then I try to have a derive class that replaces that method


00:02:08.620 --> 00:02:11.220
effectively like implicitly overriding it.


00:02:11.220 --> 00:02:14.220
I'll get an error that says cannot override final method foo.


00:02:14.220 --> 00:02:15.060
Whatever, right?


00:02:15.060 --> 00:02:15.980
It was first defined.


00:02:15.980 --> 00:02:19.400
But I can also say that there's a variable called rate,


00:02:19.400 --> 00:02:22.420
which is final and it equals 3000.


00:02:22.420 --> 00:02:24.060
And if I try to set it to another value,


00:02:24.060 --> 00:02:27.300
like rate equals 300, the type checker will give me an error


00:02:27.300 --> 00:02:29.340
say cannot assign to a final attribute.


00:02:29.340 --> 00:02:30.180
- Okay.


00:02:30.180 --> 00:02:33.620
- Or I can go to a class and I can put that on a field.


00:02:33.620 --> 00:02:34.980
And if I try to change the field,


00:02:34.980 --> 00:02:37.860
like if I have a class called base and it has a default ID,


00:02:37.860 --> 00:02:42.180
if I say base.defaultId equals something other than what it was initially set to,


00:02:42.180 --> 00:02:44.460
error cannot override final attribute.


00:02:44.460 --> 00:02:48.020
So the error doesn't say this is a constant value, you cannot do this, but


00:02:48.020 --> 00:02:48.980
it's like a constant.


00:02:48.980 --> 00:02:51.020
>> Yeah, okay, that's nice.


00:02:51.020 --> 00:02:51.860
>> It's interesting, right?


00:02:51.860 --> 00:02:54.980
>> Well, I guess it totally makes sense because overriding,


00:02:54.980 --> 00:02:59.740
like deriving from a class or something is kind of similar.


00:02:59.740 --> 00:03:04.020
>> Certainly changing the name, like the redefining the method


00:03:04.020 --> 00:03:06.500
in a base class is like replacing the name of it.


00:03:06.500 --> 00:03:09.860
And so the implementation seems to just catch


00:03:09.860 --> 00:03:12.140
straight up attributes as well,


00:03:12.140 --> 00:03:15.620
just probably with not much extra work, if any.


00:03:15.620 --> 00:03:18.140
Yeah, so this is all the stuff that I'm telling you.


00:03:18.140 --> 00:03:20.220
This is all type checker magic.


00:03:20.220 --> 00:03:23.080
This is not real, right?


00:03:23.080 --> 00:03:25.300
This is not runtime behavior.


00:03:25.300 --> 00:03:30.040
But I suspect that tooling like PyCharm, for example,


00:03:30.040 --> 00:03:32.700
if you tried to set that, it would turn it yellowish


00:03:32.700 --> 00:03:35.140
and say, warning, this is a problem here.


00:03:35.140 --> 00:03:38.460
And already if your editor tells you not to do it,


00:03:38.460 --> 00:03:40.620
your continuous integration maybe checks these things.


00:03:40.620 --> 00:03:41.740
I think you're in a pretty good place.


00:03:41.740 --> 00:03:43.500
- And I think that more and more we're gonna see


00:03:43.500 --> 00:03:47.220
as the years come on, that people's workflow


00:03:47.220 --> 00:03:50.740
is just gonna include type checkers with their code,


00:03:50.740 --> 00:03:52.260
with large projects at least.


00:03:52.260 --> 00:03:54.320
- Yeah, at least with large projects, I agree.


00:03:54.320 --> 00:03:56.420
Cool, well, I'm pretty excited about this.


00:03:56.420 --> 00:03:59.020
I was really surprised to see that was in 3.8,


00:03:59.020 --> 00:04:02.500
but I'm happy to spread the news about PEP 591.


00:04:02.500 --> 00:04:03.340
How about you?


00:04:03.340 --> 00:04:05.520
- We've got some numbers that are incrementing as well, huh?


00:04:05.520 --> 00:04:09.720
- Yes, so Flit, have we talked about packaging?


00:04:09.720 --> 00:04:13.120
- No, I don't think we have.


00:04:13.120 --> 00:04:14.360
Enough, not enough.


00:04:14.360 --> 00:04:15.200
Let's keep going.


00:04:15.200 --> 00:04:17.360
- I'm almost positive we've covered Flit before.


00:04:17.360 --> 00:04:18.880
- Yeah, we certainly discussed it,


00:04:18.880 --> 00:04:20.900
if not made it its own pure topic.


00:04:20.900 --> 00:04:21.880
We've definitely talked about it.


00:04:21.880 --> 00:04:24.280
- Right, so one of the beefs I had with Flit,


00:04:24.280 --> 00:04:26.200
which was just a minor thing.


00:04:26.200 --> 00:04:28.600
So Flit makes it so easy so that you can,


00:04:28.600 --> 00:04:30.680
like super easy, so if you've got some code


00:04:30.680 --> 00:04:32.360
that you wanna share with somebody,


00:04:32.360 --> 00:04:37.160
just install flit and say flit init and essentially it does the right thing to


00:04:37.160 --> 00:04:40.960
create a package for you. You don't have to read up on setup tools or anything it


00:04:40.960 --> 00:04:45.760
just kind of works. Oh that's interesting it's like npm init sort of. Okay I don't


00:04:45.760 --> 00:04:49.280
know what that is but I'll believe you. That creates a good job of like an npm


00:04:49.280 --> 00:04:53.720
package yeah yeah. The news right now is flit 2 is here so when initially


00:04:53.720 --> 00:04:58.120
playing with flit I noticed a little a lot of quirks with it so you for


00:04:58.120 --> 00:05:01.320
instance you couldn't use a source directory to put your source code in it


00:05:01.320 --> 00:05:04.320
your package needed to be a top-level directory


00:05:04.320 --> 00:05:05.820
or just a module.


00:05:05.820 --> 00:05:08.420
That was actually a pull request that I did


00:05:08.420 --> 00:05:11.920
to try to get the source directory added to flit.


00:05:11.920 --> 00:05:13.920
And now it's in, so it's in too.


00:05:13.920 --> 00:05:15.920
- But it also wouldn't... - Sweet. That's awesome.


00:05:15.920 --> 00:05:18.420
Yeah. So when playing with it now also,


00:05:18.420 --> 00:05:20.420
it used to be that it really


00:05:20.420 --> 00:05:23.120
assumed you were going to be in a Git repository.


00:05:23.120 --> 00:05:25.820
That's fine, except for when you're just playing with stuff.


00:05:25.820 --> 00:05:28.120
Sometimes you're not. You're just trying...


00:05:28.120 --> 00:05:29.820
Yeah, I want to just try this out.


00:05:29.820 --> 00:05:31.660
I'm not committed yet to this even working.


00:05:31.660 --> 00:05:32.860
Let's just see what happens, right?


00:05:32.860 --> 00:05:33.700
- Right.


00:05:33.700 --> 00:05:36.180
Flit now does work without, if you're not in a Git,


00:05:36.180 --> 00:05:39.540
it determines what files to include in a package


00:05:39.540 --> 00:05:43.780
with Git stuff, with what's in Git and what's not in Git.


00:05:43.780 --> 00:05:45.100
And I don't know how it works


00:05:45.100 --> 00:05:46.360
when you're not in a Git repo,


00:05:46.360 --> 00:05:48.980
but right now it does work if you're just playing around,


00:05:48.980 --> 00:05:51.540
if you don't have anything checked in, it still works.


00:05:51.540 --> 00:05:52.860
And that's pretty handy.


00:05:52.860 --> 00:05:55.660
I mean, I definitely want everybody to use version control,


00:05:55.660 --> 00:05:58.220
but if you're just trying this out, you can now.


00:05:58.220 --> 00:05:59.300
And it's really cool.


00:05:59.300 --> 00:06:00.660
And there's a whole bunch of improvements.


00:06:00.660 --> 00:06:03.700
We're just, I'm linking to the release notes


00:06:03.700 --> 00:06:05.220
and the history.


00:06:05.220 --> 00:06:07.180
It's just sort of, if you've tried it before


00:06:07.180 --> 00:06:09.560
and were frustrated, try it again.


00:06:09.560 --> 00:06:11.860
The caveats I'd like to say is


00:06:11.860 --> 00:06:14.700
this kind of a lightweight packaging system,


00:06:14.700 --> 00:06:16.700
it does not work for compiled code.


00:06:16.700 --> 00:06:21.700
So it's not built yet to deal with compiled parts of it.


00:06:21.700 --> 00:06:24.780
- Right, if I had like some Cython bits or something,


00:06:24.780 --> 00:06:25.620
doesn't deal with that.


00:06:25.620 --> 00:06:28.740
- Doesn't, and then there's a couple other reasons


00:06:28.740 --> 00:06:30.800
why you might not wanna use this,


00:06:30.800 --> 00:06:33.320
but for I think the 80% case


00:06:33.320 --> 00:06:35.620
where people are just trying to share some Python code


00:06:35.620 --> 00:06:37.920
with each other, this is the way to go.


00:06:37.920 --> 00:06:39.240
- Okay, that sounds super cool.


00:06:39.240 --> 00:06:40.960
- Yeah, one of the other things that I love


00:06:40.960 --> 00:06:45.800
in the second version is your email address is optional now.


00:06:45.800 --> 00:06:49.120
It used to be required, but you're not required


00:06:49.120 --> 00:06:52.240
to put an email address in PyPI,


00:06:52.240 --> 00:06:55.200
so why require it for these tools?


00:06:55.200 --> 00:06:56.680
- Yeah, that makes a lot of sense.


00:06:56.680 --> 00:06:58.800
- Yay, so now my big beef with the


00:06:58.800 --> 00:07:01.840
let not supporting source is I'm done with that beef.


00:07:01.840 --> 00:07:04.280
- You know what, this is a super cool example as well, right?


00:07:04.280 --> 00:07:07.480
Like it's one thing to just complain and say,


00:07:07.480 --> 00:07:10.600
you know what, this thing is crappy


00:07:10.600 --> 00:07:12.740
or it doesn't work the way I want or something.


00:07:12.740 --> 00:07:14.460
It's another to say,


00:07:14.460 --> 00:07:16.120
and I'll help to make a difference, right?


00:07:16.120 --> 00:07:17.480
So like the reason it supports it


00:07:17.480 --> 00:07:19.420
is your PR was merged in, right?


00:07:19.420 --> 00:07:20.260
That's awesome.


00:07:20.260 --> 00:07:22.140
- Yeah, and it also, it doesn't add any,


00:07:22.140 --> 00:07:24.780
I didn't add any flags, didn't add anything.


00:07:24.780 --> 00:07:27.120
It's just within the init part of it.


00:07:27.120 --> 00:07:29.900
It detects that your code is in a source directory


00:07:29.900 --> 00:07:31.380
and it just uses that.


00:07:31.380 --> 00:07:32.300
- Yeah, super.


00:07:32.300 --> 00:07:33.140
Nice work.


00:07:33.140 --> 00:07:34.060
- You know what else is cool?


00:07:34.060 --> 00:07:34.880
- DigitalOcean.


00:07:34.880 --> 00:07:36.380
- DigitalOcean is very cool.


00:07:36.380 --> 00:07:39.540
DigitalOcean is making Kubernetes easier


00:07:39.540 --> 00:07:42.540
with their DigitalOcean container registry


00:07:42.540 --> 00:07:44.220
and one-click apps.


00:07:44.220 --> 00:07:46.980
After building your app into Docker containers,


00:07:46.980 --> 00:07:49.360
you'll often want to store container images


00:07:49.360 --> 00:07:53.180
in a centralized location called a container registry.


00:07:53.180 --> 00:07:59.900
From there, you can pull images into a Kubernetes cluster or a VM, whether it's a development,


00:07:59.900 --> 00:08:02.460
testing, staging, or production environment.


00:08:02.460 --> 00:08:07.380
While you can post your containers' images into the open internet freely using services


00:08:07.380 --> 00:08:12.740
like Docker Hub, clearly you don't want to do that with confidential software or your


00:08:12.740 --> 00:08:14.700
own private stuff.


00:08:14.700 --> 00:08:21.100
So DigitalOcean introduced a new managed service called DigitalOcean Container Registry, and


00:08:21.100 --> 00:08:24.540
It's now available in early access mode.


00:08:24.540 --> 00:08:26.780
So DigitalOcean Container Registry


00:08:26.780 --> 00:08:29.660
is simple, private, secure, and fast.


00:08:29.660 --> 00:08:31.180
And you can get started using it


00:08:31.180 --> 00:08:34.300
by going to pythonbytes.fm/digitalocean.


00:08:34.300 --> 00:08:35.820
- Cool.


00:08:35.820 --> 00:08:38.740
I feel like this next item that I want us to talk about,


00:08:38.740 --> 00:08:40.660
I feel like we talked about it before,


00:08:40.660 --> 00:08:41.940
but I went back and I searched


00:08:41.940 --> 00:08:42.940
and I couldn't find anything about it.


00:08:42.940 --> 00:08:45.500
So if we covered it like three years ago,


00:08:45.500 --> 00:08:46.640
we're gonna cover it again.


00:08:46.640 --> 00:08:48.300
Nonetheless, it deserves to be covered


00:08:48.300 --> 00:08:49.140
because it's really cool.


00:08:49.140 --> 00:08:55.440
comes to us from Andrew Simon and it's called pint. So how many cups is in a


00:08:55.440 --> 00:09:00.680
pint or do pints go into cups? Is there like how many gallons go in there and if


00:09:00.680 --> 00:09:04.980
I had to convert that to liters or milligrams like what would like I don't


00:09:04.980 --> 00:09:08.420
know all these questions are completely unknown to me without like some chart


00:09:08.420 --> 00:09:12.540
and a calculator or Google and I would suspect they are to a lot of folks.


00:09:12.540 --> 00:09:21.020
mixing some form of units, even if they're in the same system, like meters and millimeters,


00:09:21.020 --> 00:09:22.020
can be tricky.


00:09:22.020 --> 00:09:29.740
So this pint thing, its job is to basically apply units to numbers and calculations in


00:09:29.740 --> 00:09:30.740
Python.


00:09:30.740 --> 00:09:31.740
Okay.


00:09:31.740 --> 00:09:36.660
Okay, so I'm sure you took physics and in physics or maybe the chemistry, like your


00:09:36.660 --> 00:09:40.060
professor would tell you, you cannot just tell me the number is seven.


00:09:40.060 --> 00:09:41.380
You have to say seven what?


00:09:41.380 --> 00:09:43.620
You have to put units on this number


00:09:43.620 --> 00:09:45.560
or this number doesn't really tell us


00:09:45.560 --> 00:09:49.060
what the answer is or what we're working with, right?


00:09:49.060 --> 00:09:50.740
And so Pint lets you do that.


00:09:50.740 --> 00:09:53.140
It has all these different types of measurements.


00:09:53.140 --> 00:09:56.120
It has like energy and like joules


00:09:56.120 --> 00:09:58.620
and it has distance and weight


00:09:58.620 --> 00:10:01.460
and all these different types of things, even wavelength.


00:10:01.460 --> 00:10:03.860
It'll help you like convert wavelength types


00:10:03.860 --> 00:10:05.820
of measurements and stuff.


00:10:05.820 --> 00:10:09.080
So if you've got some numbers you need to add together,


00:10:09.080 --> 00:10:12.400
Like for example, it's super easy to add two meters and five inches and


00:10:12.400 --> 00:10:14.720
get the right answer in the units that you want.


00:10:14.720 --> 00:10:15.440
>> That's cool.


00:10:15.440 --> 00:10:16.240
>> Yeah, super cool, right?


00:10:16.240 --> 00:10:23.080
So I'm linking to basically a Python document that has a txt ending on GitHub.


00:10:23.080 --> 00:10:25.440
So read that however you want when you get to it.


00:10:25.440 --> 00:10:28.480
It's a little unformatted, but it shows you all the different units and


00:10:28.480 --> 00:10:31.160
types of units that you can work with, right?


00:10:31.160 --> 00:10:34.600
It knows what a deci gram or a deci meter is and


00:10:34.600 --> 00:10:36.480
all those different types of things.


00:10:36.480 --> 00:10:40.880
So I just want to share a quote that's on the homepage there that talks on the pint,


00:10:40.880 --> 00:10:42.440
read the docs.


00:10:42.440 --> 00:10:47.680
So it talks about the Mars Climate Orbiter.


00:10:47.680 --> 00:10:53.440
And it said the MCO has determined, this is an orbiter that went around Mars until it


00:10:53.440 --> 00:10:57.120
didn't go around Mars anymore and it hit Mars, I believe.


00:10:57.120 --> 00:10:59.720
It met Mars in an unfortunate way.


00:10:59.720 --> 00:11:06.360
It said the MCO Mission Investigation Board, MIB I'm guessing that's what that stands for,


00:11:06.360 --> 00:11:10.600
has determined the root cause for the loss of the MCO spacecraft was a failure to use


00:11:10.600 --> 00:11:15.760
metric units in the coding of the ground software file, Small Forces.


00:11:15.760 --> 00:11:20.800
Used in trajectory models, specifically the thruster performance data in English units


00:11:20.800 --> 00:11:26.760
instead of metric units was used in the software application titled SM_Forces.


00:11:26.760 --> 00:11:29.080
Hence, Orbiter Meet Planet.


00:11:29.080 --> 00:11:35.120
So yeah, you know, this is not the type of code I write a lot, so it's not directly useful


00:11:35.120 --> 00:11:39.760
for me but I've studied science a bunch and it seems if it is the kind of code you write,


00:11:39.760 --> 00:11:41.280
it's very simple and very powerful.


00:11:41.280 --> 00:11:46.320
- Yeah, one of the things I like about it is it's not that the unit's separate so that you


00:11:46.320 --> 00:11:52.480
can like look these up, it stores the values. It just has values with units associated with it


00:11:52.480 --> 00:11:57.760
and so you can pass them around and use them in other places and all the math operators work on it.


00:11:57.760 --> 00:12:02.320
I mean, if you really want, I mean, you kind of have to know the units anyway,


00:12:02.320 --> 00:12:09.220
One other way to do that people often use is like suffixing variable names with what the units are,


00:12:09.220 --> 00:12:14.220
but then that's there's nothing telling the software that it has to comply with that.


00:12:14.220 --> 00:12:17.020
It's just it's just convention at that point.


00:12:17.020 --> 00:12:21.820
But so if you're especially with mission-critical stuff, I think this is a really great idea.


00:12:21.820 --> 00:12:22.320
Absolutely.


00:12:22.320 --> 00:12:30.820
So the way you would create like three meters is you would create an instance of a unit registry and then you just take the number three times meter.


00:12:30.820 --> 00:12:31.320
Yeah.


00:12:31.320 --> 00:12:32.660
And now it's a three meter quantity.


00:12:32.660 --> 00:12:36.000
So they override what the multiplication thing means.


00:12:36.000 --> 00:12:37.560
And yeah, it's pretty cool.


00:12:37.560 --> 00:12:38.400
That's clear.


00:12:38.400 --> 00:12:39.720
- You can add different units together,


00:12:39.720 --> 00:12:41.440
like meters and centimeters together,


00:12:41.440 --> 00:12:43.000
and it just works right.


00:12:43.000 --> 00:12:43.920
And that's great.


00:12:43.920 --> 00:12:44.760
- Yep.


00:12:44.760 --> 00:12:45.580
Nice and simple.


00:12:45.580 --> 00:12:46.420
Speaking of simple.


00:12:46.420 --> 00:12:49.380
- I gotta say that the unit thing that you looked at,


00:12:49.380 --> 00:12:52.480
you were linked to, it has, I didn't know this,


00:12:52.480 --> 00:12:56.440
that yada is one times 10 to the 24th.


00:12:56.440 --> 00:12:59.480
So yada, yada, yada is a really big number.


00:12:59.480 --> 00:13:00.320
- I had no idea.


00:13:00.320 --> 00:13:01.320
That's a huge number.


00:13:01.320 --> 00:13:02.320
How interesting.


00:13:02.320 --> 00:13:03.320
What a cool piece of trivia.


00:13:03.320 --> 00:13:04.320
Yeah.


00:13:04.320 --> 00:13:05.320
OK.


00:13:05.320 --> 00:13:07.280
Speaking of a bunch of numbers and great things.


00:13:07.280 --> 00:13:11.040
We're going to take a look at some pytest plugins.


00:13:11.040 --> 00:13:16.040
So Jeff Triplett wrote an article called "8 Great pytest Plugins."


00:13:16.040 --> 00:13:18.960
And there is even some fun stuff for me.


00:13:18.960 --> 00:13:20.680
I'll just list them quickly.


00:13:20.680 --> 00:13:22.980
There's a couple that I'll highlight.


00:13:22.980 --> 00:13:24.240
So pytest Sugar.


00:13:24.240 --> 00:13:25.560
So sweet.


00:13:25.560 --> 00:13:28.900
It's just a fun one that changes the output.


00:13:28.900 --> 00:13:30.280
But it isn't just fun.


00:13:30.280 --> 00:13:33.620
changes the output so it looks kind of nice. You get green check marks and stuff


00:13:33.620 --> 00:13:38.800
instead of the progress bar. But it also shows failing tests


00:13:38.800 --> 00:13:43.880
instantly instead of waiting to the end or something. So that's nice. It's cool.


00:13:43.880 --> 00:13:48.960
pytest-cov hooks into the coverage so that you can, you know, more


00:13:48.960 --> 00:13:54.640
succinctly check your coverage on your code using pytest. I use that. It works


00:13:54.640 --> 00:13:59.440
great. The next one I want to, which I hadn't heard of before, is called


00:13:59.440 --> 00:14:07.120
pytest-picked and this is like a brilliant idea. So if you've ran your pytest code, you know,


00:14:07.120 --> 00:14:12.560
you think your stuff is good, but what this one does is you're working on your code and if you're


00:14:12.560 --> 00:14:19.760
using git, you've got modified and unstaged and uncommitted code within your repo. That's the


00:14:19.760 --> 00:14:25.760
stuff that probably the new bugs are in. So what pytest-picked does is it only it tests files that


00:14:26.320 --> 00:14:30.800
It runs tests that use the files that have been changed since your last commit.


00:14:30.800 --> 00:14:31.800
That is super cool.


00:14:31.800 --> 00:14:37.400
And it probably runs your test code that have been changed since your last commit.


00:14:37.400 --> 00:14:41.720
But what I would love to see, and maybe it does this, you tell me if you know, is if


00:14:41.720 --> 00:14:47.540
it would look at the coverage data and it would rerun the tests that were covered by


00:14:47.540 --> 00:14:51.920
your tests, the files that were covered by your tests but then changed, it would rerun


00:14:51.920 --> 00:14:53.360
those tests that covered it.


00:14:53.360 --> 00:14:54.600
Oh, did I get it wrong?


00:14:54.600 --> 00:14:55.600
Does it just run?


00:14:55.600 --> 00:14:58.600
I think it just straight up runs the files.


00:14:58.600 --> 00:15:02.020
It's just like if your tests have changed.


00:15:02.020 --> 00:15:03.800
Yeah, I'm pretty sure.


00:15:03.800 --> 00:15:07.120
- It says the tagline is runs the test related


00:15:07.120 --> 00:15:09.480
to the unstaged files.


00:15:09.480 --> 00:15:11.160
So, not sure.


00:15:11.160 --> 00:15:12.200
- Yeah, yeah, not sure.


00:15:12.200 --> 00:15:13.400
- I'll have to try that one out.


00:15:13.400 --> 00:15:14.240
Report back.


00:15:14.240 --> 00:15:15.360
- Yeah, we definitely gotta try it.


00:15:15.360 --> 00:15:17.600
My first impression from looking at it


00:15:17.600 --> 00:15:19.720
is it runs the tests that were changed,


00:15:19.720 --> 00:15:22.440
not the code that was changed, covered by the test.


00:15:22.440 --> 00:15:24.660
But yeah, we'll report back.


00:15:24.660 --> 00:15:26.140
- Both of them are interesting.


00:15:26.140 --> 00:15:27.640
- They're both very interesting, yes.


00:15:27.640 --> 00:15:30.220
They're like already, I think it is a super cool idea


00:15:30.220 --> 00:15:31.140
and I love it.


00:15:31.140 --> 00:15:32.740
If it does the second thing I said,


00:15:32.740 --> 00:15:34.100
then I'll love it even more.


00:15:34.100 --> 00:15:36.600
- Yeah, okay.


00:15:36.600 --> 00:15:38.980
The next one is pytest InstaFail.


00:15:38.980 --> 00:15:40.660
Modifies the default output


00:15:40.660 --> 00:15:43.780
so that failures show up immediately.


00:15:43.780 --> 00:15:45.580
Right now, if you run pytest,


00:15:45.580 --> 00:15:46.940
if you just run it with no options,


00:15:46.940 --> 00:15:48.980
you get a bunch of dots for all your passes.


00:15:48.980 --> 00:15:50.620
You will see the F for the fails,


00:15:50.620 --> 00:15:52.780
but you don't get the output right away,


00:15:52.780 --> 00:15:54.620
like what the traceback is.


00:15:54.620 --> 00:15:57.300
And so if you really want to like start debugging


00:15:57.300 --> 00:15:59.740
before your test suite is done,


00:15:59.740 --> 00:16:01.460
InstaFail might be the thing for you


00:16:01.460 --> 00:16:03.180
to show your failures right away,


00:16:03.180 --> 00:16:04.860
the details of your failures.


00:16:04.860 --> 00:16:07.100
Now for people that really think that pytest


00:16:07.100 --> 00:16:09.820
is already giving you too much information,


00:16:09.820 --> 00:16:14.740
pytest TLDR is hilarious, but it's actually quite useful


00:16:14.740 --> 00:16:17.940
and it will kind of remove some of the stuff


00:16:17.940 --> 00:16:19.620
from the pytest output,


00:16:19.620 --> 00:16:22.400
some of the boilerplate that comes at the top and bottom


00:16:22.400 --> 00:16:27.000
also just kind of reduces the output it's kind of nice and this is by by


00:16:27.000 --> 00:16:30.980
Freakboy. Kenneth I'm gonna get this wrong. Keith Russell McGee. Yeah that's it.


00:16:30.980 --> 00:16:36.640
Now next one is pytest XDist. A lot of people think of the XDist as the the way


00:16:36.640 --> 00:16:41.000
to run all your tests in parallel you can run them on multiple processors. The


00:16:41.000 --> 00:16:46.280
surprising thing is you can also run them on not just multiple processors but


00:16:46.280 --> 00:16:51.400
multiple instruments or multiple machines you can have them spawn into


00:16:51.400 --> 00:16:56.920
other computers to run tests, which is really cool. But you can also do things like loop


00:16:56.920 --> 00:17:01.880
on fail and just perpetually, you can just have this thing just keep running. So that's


00:17:01.880 --> 00:17:02.880
pretty cool.


00:17:02.880 --> 00:17:06.360
That is cool. Just periodically just say, "Tried it, tried it, tried it," until it turns


00:17:06.360 --> 00:17:07.360
green.


00:17:07.360 --> 00:17:11.000
Yeah, especially if you're actively working on a fix, why not just have that pop up whenever


00:17:11.000 --> 00:17:12.000
it's done.


00:17:12.000 --> 00:17:13.000
Nice.


00:17:13.000 --> 00:17:19.840
The last two are pytest Django and Django Test Plus are both things that will help you


00:17:19.840 --> 00:17:25.360
if you're testing Django, which is not surprising that this came from Jeff Triplett because


00:17:25.360 --> 00:17:26.360
he's a Django guy.


00:17:26.360 --> 00:17:27.360
Yeah, very cool ones.


00:17:27.360 --> 00:17:28.360
I like these.


00:17:28.360 --> 00:17:29.680
Although, I feel like you cheated, Brian.


00:17:29.680 --> 00:17:33.480
I mean, we're supposed to cover like six things each show and here you've covered eight.


00:17:33.480 --> 00:17:34.920
Eight great pytest plugins.


00:17:34.920 --> 00:17:35.920
Come on.


00:17:35.920 --> 00:17:36.920
Who would do that?


00:17:36.920 --> 00:17:39.840
You know, I told you I was a sucker for link bait articles.


00:17:39.840 --> 00:17:41.080
So, listicles.


00:17:41.080 --> 00:17:42.440
Yeah, for sure.


00:17:42.440 --> 00:17:44.640
Well, the next one I have is 11 new web frameworks.


00:17:44.640 --> 00:17:47.000
Oh, and you're giving me a bad time.


00:17:47.000 --> 00:17:48.000
Not for long, though.


00:17:48.000 --> 00:17:49.000
No, I think it's great.


00:17:49.000 --> 00:17:52.160
It's cool to touch on a bunch of those little things real quickly.


00:17:52.160 --> 00:17:57.120
Now people know that I do a bunch of web development and I'm a fan of web frameworks.


00:17:57.120 --> 00:18:03.060
And for a long time we had kind of the mainstays, Blast, Django and so on.


00:18:03.060 --> 00:18:09.840
But recently, and I feel like two things, both the type hints and the async capable


00:18:09.840 --> 00:18:14.040
ASGI servers, those two things have created just like a blossoming of all these different


00:18:14.040 --> 00:18:18.060
types because they're like, well, if we got to rewrite it so that it supports async and


00:18:18.060 --> 00:18:21.860
to wait, or if we're going to rewrite it so I can use type in, so like grab


00:18:21.860 --> 00:18:25.660
stuff out of the query string, let's just go crazy and create all these new


00:18:25.660 --> 00:18:29.040
frameworks and well, 11 new ones is what we get actually more than that.


00:18:29.040 --> 00:18:30.640
Cause there's, there's some that are not listed.


00:18:30.640 --> 00:18:34.320
Some we've spoken about some we haven't spoken about, but I've heard of


00:18:34.320 --> 00:18:35.500
and some I've not even heard of.


00:18:35.500 --> 00:18:36.740
So it's pretty cool.


00:18:36.740 --> 00:18:38.320
I'll just go down the list really quick.


00:18:38.320 --> 00:18:41.000
One of the things that's interesting, if you look at a lot of these frameworks,


00:18:41.000 --> 00:18:45.820
a lot of them are flask inspired and like, you know, the, you create an app


00:18:45.820 --> 00:18:50.540
and then you do app.route to define it and stuff like that.


00:18:50.540 --> 00:18:53.500
A lot of them have adopted the Flask API


00:18:53.500 --> 00:18:56.500
without actually being Flask or coming from Flask.


00:18:56.500 --> 00:18:59.180
So anyway, so the number one is Sanic,


00:18:59.180 --> 00:19:03.540
which is a web server framework meant to go fast.


00:19:03.540 --> 00:19:05.220
And this one is mostly focused around


00:19:05.220 --> 00:19:07.460
enabling async and await.


00:19:07.460 --> 00:19:08.420
That's pretty cool.


00:19:08.420 --> 00:19:12.320
Probably the most widely used,


00:19:12.320 --> 00:19:14.500
at least in terms of other projects,


00:19:14.500 --> 00:19:18.080
for the ASGI, the async type of frameworks is Starlet.


00:19:18.080 --> 00:19:21.280
So Starlet is cool, comes from, I believe,


00:19:21.280 --> 00:19:23.700
Tom Christie and folks who are involved


00:19:23.700 --> 00:19:24.980
with the Django REST framework,


00:19:24.980 --> 00:19:28.020
and it's a lightweight ASGI framework,


00:19:28.020 --> 00:19:30.060
which is great for high-performance async


00:19:30.060 --> 00:19:32.820
and await services, and you can either use it


00:19:32.820 --> 00:19:34.180
as its own web framework,


00:19:34.180 --> 00:19:36.420
or it's interesting as a foundation.


00:19:36.420 --> 00:19:39.420
For example, Responder is built to top it.


00:19:39.420 --> 00:19:41.740
I believe FastAPI may be as well.


00:19:41.740 --> 00:19:42.580
- Yeah, I think so.


00:19:42.580 --> 00:19:44.180
- Yeah, so there's a bunch of things


00:19:44.180 --> 00:19:45.980
that are derived from it, that's pretty cool.


00:19:45.980 --> 00:19:48.260
And both those first two are Flask-like.


00:19:48.260 --> 00:19:51.340
On Masonite, I had Joseph from the Masonite team


00:19:51.340 --> 00:19:54.260
on Talk Python not long ago, and it's interesting.


00:19:54.260 --> 00:19:57.600
This is not an async and await framework.


00:19:57.600 --> 00:19:59.980
It's like a standard framework like Flask or Django,


00:19:59.980 --> 00:20:01.080
at least at the moment.


00:20:01.080 --> 00:20:04.780
But what makes it unique is it has this command line tool


00:20:04.780 --> 00:20:08.540
that lets you do things to the project called craft.


00:20:08.540 --> 00:20:12.300
So the craft CLI is like what makes this kind of unique.


00:20:12.300 --> 00:20:14.660
That was a really good episode with that interview.


00:20:14.660 --> 00:20:19.160
And I liked the example of somebody bringing in good ideas


00:20:19.160 --> 00:20:21.700
from other languages and helping out


00:20:21.700 --> 00:20:22.980
the Python community with that.


00:20:22.980 --> 00:20:23.900
- Yeah, thanks, I agree.


00:20:23.900 --> 00:20:25.880
It was definitely fun to talk to Joseph.


00:20:25.880 --> 00:20:28.300
So for example, like with a lot of these projects,


00:20:28.300 --> 00:20:31.340
you create the project and then you're on your own, right?


00:20:31.340 --> 00:20:33.460
So, okay, well, I use maybe cookie cutter


00:20:33.460 --> 00:20:36.100
or some other technique to create the project.


00:20:36.100 --> 00:20:38.500
And now I've got to write every little bit.


00:20:38.500 --> 00:20:40.580
But with Masonite, you can actually go and say,


00:20:40.580 --> 00:20:45.760
and now add this model or go add, you know, these other things and it'll continue to like


00:20:45.760 --> 00:20:49.720
let you evolve it using these sort of starter cookie cutter type things.


00:20:49.720 --> 00:20:50.720
So it's cool.


00:20:50.720 --> 00:20:51.720
Fast API.


00:20:51.720 --> 00:20:56.680
If I was building an API these days, I would definitely definitely look at this fast modern


00:20:56.680 --> 00:21:01.280
framework for building APIs with Python three six based on type hints.


00:21:01.280 --> 00:21:02.280
That's cool.


00:21:02.280 --> 00:21:03.280
Responder.


00:21:03.280 --> 00:21:08.240
This is from Kenneth writes, it's based on starlet and its primary reason for existing


00:21:08.240 --> 00:21:13.400
to bring the niceties both from Flask and Falcon over into a single framework.


00:21:13.400 --> 00:21:13.840
That's cool.


00:21:13.840 --> 00:21:19.220
Molten, which is a minimal extensible fast framework for


00:21:19.220 --> 00:21:21.440
building HTTP APIs with Python.


00:21:21.440 --> 00:21:23.940
And it's sort of magic.


00:21:23.940 --> 00:21:26.660
One of its magic things is it can automatically validate


00:21:26.660 --> 00:21:28.640
requests according to schemas.


00:21:28.640 --> 00:21:31.080
So you're building an API, it takes a JSON document.


00:21:31.080 --> 00:21:34.980
It can validate that by saying, this is what this method takes.


00:21:34.980 --> 00:21:38.060
It takes an integer and it has this thing in the JSON document and so on.


00:21:38.060 --> 00:21:39.060
It's pretty cool.


00:21:39.060 --> 00:21:42.060
Jupronto, another one of the async and await frameworks.


00:21:42.060 --> 00:21:45.060
This one's based on UV loop and Pico HTTP parser,


00:21:45.060 --> 00:21:47.060
so it's super, super fast.


00:21:47.060 --> 00:21:49.060
Basically, its foundation is all C.


00:21:49.060 --> 00:21:51.060
Klein, have you ever heard of Klein?


00:21:51.060 --> 00:21:52.060
No.


00:21:52.060 --> 00:21:56.060
Me either, but apparently it's a micro framework for Python,


00:21:56.060 --> 00:22:01.060
and it's got an incredibly small API like Bottle or Flask.


00:22:01.060 --> 00:22:03.060
Speaking of Flask, there's Cort.


00:22:03.060 --> 00:22:07.060
This is the one that's closest to Flask because it is literally a superset of Flask.


00:22:07.060 --> 00:22:11.260
so compatible it even takes like Flask extensions and just runs those.


00:22:11.260 --> 00:22:15.260
But the difference here is it adds async and await to Flask.


00:22:15.260 --> 00:22:19.160
So if you have a Flask app, you do a find and replace the word Flask with court,


00:22:19.160 --> 00:22:21.160
and now you can use async and await in Flask.


00:22:21.160 --> 00:22:21.860
That's pretty cool.


00:22:21.860 --> 00:22:22.360
That's cool.


00:22:22.360 --> 00:22:24.460
Blacksheep, we talked a little bit about that.


00:22:24.460 --> 00:22:28.160
This one is inspired by Flask in ASP.NET Core.


00:22:28.160 --> 00:22:33.160
One of its bits of magic is it automatically supports binding request values


00:22:33.160 --> 00:22:37.720
into variables either by convention or type annotation.


00:22:37.720 --> 00:22:42.040
So I could have a view method and it takes a username


00:22:42.040 --> 00:22:44.440
and it takes a product ID and I could put a little decorator


00:22:44.440 --> 00:22:47.680
that says the username comes from, I don't know,


00:22:47.680 --> 00:22:51.160
a cookie or something and the product ID comes


00:22:51.160 --> 00:22:53.560
from the query string and it'll automatically go


00:22:53.560 --> 00:22:56.640
and pull those all together and just pass them as arguments.


00:22:56.640 --> 00:22:57.480
That's pretty cool.


00:22:57.480 --> 00:23:01.520
And finally, wrap this up, is Cyclone.


00:23:01.520 --> 00:23:02.800
Another one I have never heard of,


00:23:02.800 --> 00:23:05.840
but it's a framework that implements the Tornado API


00:23:05.840 --> 00:23:10.120
and the Twisted protocol to bridge Tornado's elegant API


00:23:10.120 --> 00:23:11.760
and Twisted's event loop,


00:23:11.760 --> 00:23:14.020
enabling a vast number of protocols.


00:23:14.020 --> 00:23:14.920
So very, very cool.


00:23:14.920 --> 00:23:16.880
- Yeah, so unlike my list,


00:23:16.880 --> 00:23:19.080
you should not use all of these at once.


00:23:19.080 --> 00:23:21.120
- No, yeah, your list would be great


00:23:21.120 --> 00:23:23.080
if you try to use all these at once.


00:23:23.080 --> 00:23:24.380
Yeah, you're just gonna mess things up.


00:23:24.380 --> 00:23:25.220
It's not good.


00:23:25.220 --> 00:23:26.840
Like pick one or maybe two.


00:23:26.840 --> 00:23:29.900
Maybe if you have APIs and you've got a web framework,


00:23:29.900 --> 00:23:31.440
but you probably don't even need to do that.


00:23:31.440 --> 00:23:32.680
just pick one.


00:23:32.680 --> 00:23:35.840
Or you could end up with like crashes and exceptions.


00:23:35.840 --> 00:23:36.960
All sorts of error messages.


00:23:36.960 --> 00:23:37.880
- Yeah, and one of the things,


00:23:37.880 --> 00:23:40.680
there's an application I'm thinking of doing


00:23:40.680 --> 00:23:42.640
that I assumed I would,


00:23:42.640 --> 00:23:45.320
I don't want to do go crazy with the micro,


00:23:45.320 --> 00:23:47.680
micro architecture, what are those things called?


00:23:47.680 --> 00:23:48.520
- Micro frameworks?


00:23:48.520 --> 00:23:49.440
- Not the micro frameworks,


00:23:49.440 --> 00:23:53.160
but like the whole bunch of microservices, that's it.


00:23:53.160 --> 00:23:54.000
- Oh yes.


00:23:54.000 --> 00:23:56.920
- However, things like fast API and stuff


00:23:56.920 --> 00:23:59.740
make it so easy to write the API part


00:23:59.740 --> 00:24:03.900
that I am thinking about doing a two-level thing


00:24:03.900 --> 00:24:08.620
of doing a fast API and then a web interface based on that.


00:24:08.620 --> 00:24:10.060
It's just two services.


00:24:10.060 --> 00:24:11.540
- It seems totally reasonable, yeah.


00:24:11.540 --> 00:24:12.700
It seems fine.


00:24:12.700 --> 00:24:13.800
And with Nginx and stuff,


00:24:13.800 --> 00:24:15.220
you can put it under the same domain


00:24:15.220 --> 00:24:18.140
and just put proxies to different parts of your app


00:24:18.140 --> 00:24:21.900
based on /api or not /api.


00:24:21.900 --> 00:24:23.540
Be really easy. - Oh, cool.


00:24:23.540 --> 00:24:24.700
- So the deployment's really easy.


00:24:24.700 --> 00:24:26.300
- Well, it's a good thing I have friends like you.


00:24:26.300 --> 00:24:27.780
Yeah. - Yeah, that's right.


00:24:27.780 --> 00:24:28.620
Happy to help.


00:24:28.620 --> 00:24:31.580
Next up, I want to talk about exceptions.


00:24:31.580 --> 00:24:33.700
Like I am exceptional and you're exceptional.


00:24:33.700 --> 00:24:35.060
We're all exceptional.


00:24:35.060 --> 00:24:37.060
- Everyone's special, we're all snowflakes.


00:24:37.060 --> 00:24:40.400
- Yes, this is a nice article that just came out


00:24:40.400 --> 00:24:43.940
this November called "Raise Better Exceptions in Python."


00:24:43.940 --> 00:24:46.740
So this is just sort of a, I guess,


00:24:46.740 --> 00:24:49.580
kind of like a public service announcement.


00:24:49.580 --> 00:24:51.460
Actually kind of a nice article though,


00:24:51.460 --> 00:24:53.620
about when you're raising exceptions,


00:24:53.620 --> 00:24:57.980
you know, you throw an assert in sometimes


00:24:57.980 --> 00:25:01.380
to be like, I should really never get here.


00:25:01.380 --> 00:25:04.720
But exceptions are not really unexpected things.


00:25:04.720 --> 00:25:07.960
They're, they should be, your software should handle it.


00:25:07.960 --> 00:25:11.380
It's really bad if your software's not handling exceptions


00:25:11.380 --> 00:25:12.640
at the top level.


00:25:12.640 --> 00:25:15.260
However, often exceptions will happen


00:25:15.260 --> 00:25:17.500
if like you're raising from a trial,


00:25:17.500 --> 00:25:20.860
you try some stuff, you grab a value error or something,


00:25:20.860 --> 00:25:24.460
and then you raise a more meaningful exception.


00:25:24.460 --> 00:25:26.740
That's a pattern that's often used.


00:25:26.740 --> 00:25:28.520
The article's really pointing at,


00:25:28.520 --> 00:25:32.680
just don't put like f-strings with value stuff


00:25:32.680 --> 00:25:36.820
within your, just all within one string as a value error


00:25:36.820 --> 00:25:39.660
or any sort of, don't just like try


00:25:39.660 --> 00:25:41.260
to bundle it all together.


00:25:41.260 --> 00:25:43.800
The point is, most exceptions,


00:25:43.800 --> 00:25:46.220
unless you've mucked something up in the init,


00:25:46.220 --> 00:25:49.820
most exceptions take a unlimited number of parameters.


00:25:49.820 --> 00:25:52.300
So if you want to raise an exception


00:25:52.300 --> 00:25:55.420
with a whole bunch of values for your exception handler


00:25:55.420 --> 00:25:58.540
to be able to introspect and use,


00:25:58.540 --> 00:26:01.420
just put them in more parameters in the list


00:26:01.420 --> 00:26:03.580
of the constructor to the exception.


00:26:03.580 --> 00:26:04.420
- That's super cool.


00:26:04.420 --> 00:26:06.260
And I honestly, I didn't know about this.


00:26:06.260 --> 00:26:09.140
This is great because, so the example is,


00:26:09.140 --> 00:26:11.740
if I raise a value error and the message is,


00:26:11.740 --> 00:26:13.900
the value is too small, it's like, okay, great.


00:26:13.900 --> 00:26:14.900
So now what?


00:26:14.900 --> 00:26:17.740
Maybe you can't even get back to like what the value was


00:26:17.740 --> 00:26:19.940
because the way it got passed around


00:26:19.940 --> 00:26:21.140
or it wasn't in a variable.


00:26:21.140 --> 00:26:23.460
So what can you like report on that value?


00:26:23.460 --> 00:26:25.920
could you log the value, whatever, right?


00:26:25.920 --> 00:26:27.960
But if you can just say, here's the message,


00:26:27.960 --> 00:26:30.800
comma, thing one, thing two, thing three, thing four,


00:26:30.800 --> 00:26:34.440
and it just appears in the exception.args later,


00:26:34.440 --> 00:26:36.240
and you can deal with it in your catch clause.


00:26:36.240 --> 00:26:37.080
It's great.


00:26:37.080 --> 00:26:39.580
- Right, and some people will realize that,


00:26:39.580 --> 00:26:42.040
but not realizing that you can put them as parameters,


00:26:42.040 --> 00:26:44.080
but realize that you want to know the value.


00:26:44.080 --> 00:26:47.880
So they'll try to put the value in a string,


00:26:47.880 --> 00:26:50.880
but that depends on the repper function


00:26:50.880 --> 00:26:54.400
or the stir function being valid.


00:26:54.400 --> 00:26:57.080
And maybe that's the thing that blew up in the first place.


00:26:57.080 --> 00:26:58.840
So, yeah. - Exactly.


00:26:58.840 --> 00:27:01.300
It's simple, but it's gonna be really handy.


00:27:01.300 --> 00:27:02.860
Yeah, love it.


00:27:02.860 --> 00:27:04.440
All right, well, that's it for our main items.


00:27:04.440 --> 00:27:06.720
You got anything extra you wanna chat about quick?


00:27:06.720 --> 00:27:07.560
- Yeah, I did.


00:27:07.560 --> 00:27:09.040
It showed up on your list,


00:27:09.040 --> 00:27:10.640
but I'm gonna bring it up anyway.


00:27:10.640 --> 00:27:13.480
- So I was reading around on realpython.com


00:27:13.480 --> 00:27:15.360
and I came across this thing.


00:27:15.360 --> 00:27:17.260
I don't know, there was this guy who was being interviewed.


00:27:17.260 --> 00:27:20.540
It said, "Python community interview with Brian Okken."


00:27:20.540 --> 00:27:23.060
- Yep, I did that thing.


00:27:23.060 --> 00:27:23.900
- Awesome, that's cool.


00:27:23.900 --> 00:27:25.020
Yeah, so if people want to learn more about you,


00:27:25.020 --> 00:27:27.640
they can go check out this interview on RealPython, right?


00:27:27.640 --> 00:27:29.520
- One of my favorite questions and answers


00:27:29.520 --> 00:27:33.360
is the question of how did you get into testing?


00:27:33.360 --> 00:27:36.160
And really, I never did.


00:27:36.160 --> 00:27:37.920
I've always been a software engineer,


00:27:37.920 --> 00:27:39.880
so that was a fun question to answer.


00:27:39.880 --> 00:27:40.720
- That's cool.


00:27:40.720 --> 00:27:41.540
- Anything else?


00:27:41.540 --> 00:27:43.200
- Yeah, I got two more things I want to talk about.


00:27:43.200 --> 00:27:46.800
One of them comes from Brett Cannon, sort of.


00:27:46.800 --> 00:27:51.700
It also had you appearing on this little list of mine that I've got.


00:27:51.700 --> 00:27:55.620
So Brett Cannon put out a poll, and the poll said, "If you typically keep your virtual


00:27:55.620 --> 00:28:00.660
environment locally with your code, as I do, like so, at the top level of your project


00:28:00.660 --> 00:28:02.720
folder, what do you call it?


00:28:02.720 --> 00:28:04.720
Is it venv?


00:28:04.720 --> 00:28:06.120
Is it .env?


00:28:06.120 --> 00:28:07.880
Is it .venv?


00:28:07.880 --> 00:28:09.280
Is it something else?"


00:28:09.280 --> 00:28:10.920
And so on.


00:28:10.920 --> 00:28:11.920
And that's pretty interesting.


00:28:11.920 --> 00:28:16.520
You can see the polls straight up, no .venv is what came up the most, and that's what


00:28:16.520 --> 00:28:19.540
what I've migrated towards these days,


00:28:19.540 --> 00:28:21.640
mostly 'cause some of the tooling works better


00:28:21.640 --> 00:28:24.600
than the hidden ones or .env.


00:28:24.600 --> 00:28:27.080
But you've got some replies in here and all sorts of stuff.


00:28:27.080 --> 00:28:29.640
But the one that caught my eye the most,


00:28:29.640 --> 00:28:31.280
and I think maybe you commented on it,


00:28:31.280 --> 00:28:35.080
was from Brian here, as in Brian Skin.


00:28:35.080 --> 00:28:37.800
And he said, "I actually use the ability


00:28:37.800 --> 00:28:40.360
"to change the prompt name."


00:28:40.360 --> 00:28:43.240
So normally when you activate that virtual environment,


00:28:43.240 --> 00:28:45.920
it would just say parenthesis V-E-N-V,


00:28:45.920 --> 00:28:47.880
and you're like, okay, super, so something,


00:28:47.880 --> 00:28:52.280
somewhere in my entire computer is different about Python,


00:28:52.280 --> 00:28:53.680
but which, right?


00:28:53.680 --> 00:28:55.940
But if you do dash dash prompt equals,


00:28:55.940 --> 00:28:59.460
you can give it a name so that when you activate it,


00:28:59.460 --> 00:29:02.320
it says, you know, like Python bytes web app,


00:29:02.320 --> 00:29:03.480
or whatever it is you want.


00:29:03.480 --> 00:29:04.520
- Yeah, I always use that.


00:29:04.520 --> 00:29:05.360
- You do?


00:29:05.360 --> 00:29:06.180
That's cool.


00:29:06.180 --> 00:29:08.640
- Yeah, because otherwise all my virtual environments


00:29:08.640 --> 00:29:11.120
are named V and V, and that's boring.


00:29:11.120 --> 00:29:11.960
- That's quite boring.


00:29:11.960 --> 00:29:14.040
So yeah, it's pretty cool, and you can even pair that


00:29:14.040 --> 00:29:16.920
with like the read command and then take that.


00:29:16.920 --> 00:29:18.680
So when you create the virtual environment,


00:29:18.680 --> 00:29:20.120
you could set up a script that'll ask,


00:29:20.120 --> 00:29:21.420
what do you want your prompt to be called?


00:29:21.420 --> 00:29:24.040
And then it'll just put it into the virtual environment.


00:29:24.040 --> 00:29:25.960
So when it activates it, it converts it over to that,


00:29:25.960 --> 00:29:26.800
which is pretty cool.


00:29:26.800 --> 00:29:30.480
- So my request is, I haven't actually requested this yet,


00:29:30.480 --> 00:29:34.120
but I would like it to be the name of the directory


00:29:34.120 --> 00:29:36.120
that the virtual environment is in,


00:29:36.120 --> 00:29:38.640
not the VENV one, but the parent directory.


00:29:38.640 --> 00:29:40.160
- Yes, that would actually almost always


00:29:40.160 --> 00:29:41.240
be the right answer, wouldn't it?


00:29:41.240 --> 00:29:43.560
- Yeah, it's usually my project name.


00:29:43.560 --> 00:29:45.060
That's what I want to know.


00:29:45.060 --> 00:29:46.520
So that's what I'd like.


00:29:46.520 --> 00:29:50.540
And then Al Swigert said, I use VENV.


00:29:50.540 --> 00:29:54.280
Al said he uses .VENV for the reason


00:29:54.280 --> 00:29:56.400
that you shouldn't muck with it.


00:29:56.400 --> 00:29:59.120
It's just there, but you shouldn't change it.


00:29:59.120 --> 00:30:01.420
And I'm frustrated that he's right.


00:30:01.420 --> 00:30:03.960
And I think I'm going to try using it with a dot


00:30:03.960 --> 00:30:06.200
from now on, or for at least a little while


00:30:06.200 --> 00:30:07.200
and see what I think.


00:30:07.200 --> 00:30:09.480
- Yeah, the reason I like not having the dot


00:30:09.480 --> 00:30:12.040
is that when I'm in the finder,


00:30:12.040 --> 00:30:14.160
If I go over there, I can see, okay,


00:30:14.160 --> 00:30:16.420
this one already has a virtual environment set up.


00:30:16.420 --> 00:30:17.540
I haven't been on this project.


00:30:17.540 --> 00:30:18.380
It was in GitHub.


00:30:18.380 --> 00:30:19.220
It's been like six months.


00:30:19.220 --> 00:30:20.480
I come back to it, like,


00:30:20.480 --> 00:30:22.120
do I need to create a virtual environment


00:30:22.120 --> 00:30:24.460
or is there already one here I just go activate?


00:30:24.460 --> 00:30:25.700
- In Finder?


00:30:25.700 --> 00:30:27.200
You can't see the dot files?


00:30:27.200 --> 00:30:28.440
- No, it hides them.


00:30:28.440 --> 00:30:29.280
That's hidden.


00:30:29.280 --> 00:30:31.680
- Oh, I guess they use command line more than anything else.


00:30:31.680 --> 00:30:32.520
- Yeah, yeah.


00:30:32.520 --> 00:30:33.480
So if you want to see them in Finder,


00:30:33.480 --> 00:30:34.960
you have to go into the dot folder


00:30:34.960 --> 00:30:37.640
and then you can say open dot or open that folder


00:30:37.640 --> 00:30:40.580
and then it'll like be half a grade out in Finder.


00:30:40.580 --> 00:30:42.960
But if you just browse to a project,


00:30:42.960 --> 00:30:45.640
you won't know whether or not it has a virtual environment


00:30:45.640 --> 00:30:47.560
if it's a dot something.


00:30:47.560 --> 00:30:48.400
- Okay. - Anyway,


00:30:48.400 --> 00:30:49.220
it's not a huge benefit,


00:30:49.220 --> 00:30:50.880
but that's why I kind of stopped using the dot,


00:30:50.880 --> 00:30:51.840
which I had been before.


00:30:51.840 --> 00:30:55.840
- So for the subset of people that are on Macs,


00:30:55.840 --> 00:30:57.660
but don't like a command line.


00:30:57.660 --> 00:31:00.440
- I also like the command line,


00:31:00.440 --> 00:31:02.480
but I don't exclusively use it, right?


00:31:02.480 --> 00:31:03.320
- Okay, okay.


00:31:03.320 --> 00:31:07.000
- Yeah, anyway, this is a whole long discussion about this,


00:31:07.000 --> 00:31:08.680
and I thought it was actually pretty interesting,


00:31:08.680 --> 00:31:09.920
all the threads there.


00:31:09.920 --> 00:31:11.140
- Yeah, pretty cool.


00:31:11.140 --> 00:31:11.980
All right, last thing,


00:31:11.980 --> 00:31:13.640
I told you about a new course last time, right?


00:31:13.640 --> 00:31:14.480
- Yeah.


00:31:14.480 --> 00:31:16.720
- Well, since then, I wrote another course and recorded it,


00:31:16.720 --> 00:31:18.040
and I think this one's gonna be really fun


00:31:18.040 --> 00:31:19.320
for people as well.


00:31:19.320 --> 00:31:23.280
I wanted to write a course for people who are team leads,


00:31:23.280 --> 00:31:26.320
who are decision makers at their company,


00:31:26.320 --> 00:31:27.560
and they're trying to decide,


00:31:27.560 --> 00:31:28.800
or they're working with their team to decide,


00:31:28.800 --> 00:31:30.160
like, should we adopt Python,


00:31:30.160 --> 00:31:33.000
or is Python the right thing for this project or not?


00:31:33.000 --> 00:31:34.640
So I wrote a course called


00:31:34.640 --> 00:31:36.960
Python for Decision Makers and Business Leaders.


00:31:36.960 --> 00:31:40.480
if you need ammunition to help sell Python


00:31:40.480 --> 00:31:42.920
in your organization, or if you want to know


00:31:42.920 --> 00:31:45.040
maybe when it's not the best choice.


00:31:45.040 --> 00:31:46.240
This talks to all those things.


00:31:46.240 --> 00:31:49.520
And it also looks at the job market and hiring developers


00:31:49.520 --> 00:31:50.880
and all kinds of random stuff


00:31:50.880 --> 00:31:52.680
that I think those groups would care about.


00:31:52.680 --> 00:31:54.880
So anyway, another course is coming shortly.


00:31:54.880 --> 00:31:55.720
- That's really cool.


00:31:55.720 --> 00:31:56.560
- Yeah, thanks.


00:31:56.560 --> 00:31:58.200
- I might want to do an alternate course


00:31:58.200 --> 00:32:00.600
of Python for indecisive cogs.


00:32:00.600 --> 00:32:02.840
(laughing)


00:32:02.840 --> 00:32:04.880
- You might want to work on the name.


00:32:04.880 --> 00:32:06.400
It might not attract.


00:32:06.400 --> 00:32:08.280
You know what, I am an indecisive cog.


00:32:08.280 --> 00:32:09.120
I will--


00:32:09.120 --> 00:32:10.320
(laughing)


00:32:10.320 --> 00:32:11.160
- Maybe.


00:32:11.160 --> 00:32:11.980
- Yeah, yeah, maybe, maybe.


00:32:11.980 --> 00:32:13.600
Anyway, it was a lot of fun to put together,


00:32:13.600 --> 00:32:15.600
and it'll be out pretty soon.


00:32:15.600 --> 00:32:17.000
- Okay, you got a joke for us?


00:32:17.000 --> 00:32:18.200
- I got something for you.


00:32:18.200 --> 00:32:19.280
You can tell me whether it's a joke.


00:32:19.280 --> 00:32:21.300
So this comes to us from Daniel Pope.


00:32:21.300 --> 00:32:23.200
He didn't send it in, I just found it on the internet,


00:32:23.200 --> 00:32:24.440
and it was his joke, so I'm gonna,


00:32:24.440 --> 00:32:27.760
at least it came through him, so I'm gonna share it.


00:32:27.760 --> 00:32:29.800
This one is about farm implements.


00:32:29.800 --> 00:32:31.080
- Okay. - Okay?


00:32:31.080 --> 00:32:34.520
What is a tractor's least favorite programming language?


00:32:34.520 --> 00:32:35.640
- I don't know, what?


00:32:35.640 --> 00:32:36.480
- Rust.


00:32:36.480 --> 00:32:38.240
(laughing)


00:32:38.240 --> 00:32:39.200
That's bad, right?


00:32:39.200 --> 00:32:41.120
- Definitely a groaner, yeah.


00:32:41.120 --> 00:32:43.280
But that reminds me, so how do you tell


00:32:43.280 --> 00:32:46.040
when a joke is a bad joke?


00:32:46.040 --> 00:32:47.320
When it's fully groan?


00:32:47.320 --> 00:32:49.360
- Oh, that's a good one.


00:32:49.360 --> 00:32:50.600
I like it.


00:32:50.600 --> 00:32:51.440
- Thanks a lot.


00:32:51.440 --> 00:32:52.640
- Yeah, yeah, thanks for being here, Brian, it was fun.


00:32:52.640 --> 00:32:53.840
- Bye. - Yeah, bye.


00:32:53.840 --> 00:32:55.560
- Thank you for listening to Python Bytes.


00:32:55.560 --> 00:32:58.040
Follow the show on Twitter @pythonbytes.


00:32:58.040 --> 00:33:01.120
That's Python Bytes as in B-Y-T-E-S.


00:33:01.120 --> 00:33:04.000
And get the full show notes at pythonbytes.fm.


00:33:04.000 --> 00:33:06.200
If you have a news item you want featured,


00:33:06.200 --> 00:33:08.960
just visit pythonbytes.fm and send it our way.


00:33:08.960 --> 00:33:11.080
We're always on the lookout for sharing something cool.


00:33:11.080 --> 00:33:12.160
This is Brian Okken,


00:33:12.160 --> 00:33:14.260
and on behalf of myself and Michael Kennedy,


00:33:14.260 --> 00:33:16.360
thank you for listening and sharing this podcast


00:33:16.360 --> 00:33:18.000
with your friends and colleagues.

