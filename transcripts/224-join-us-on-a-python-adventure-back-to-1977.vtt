
00:00:00.000 --> 00:00:01.880
- Hello and welcome to Python Bytes,


00:00:01.880 --> 00:00:03.480
where we deliver Python news and headlines


00:00:03.480 --> 00:00:04.800
directly to your earbuds.


00:00:04.800 --> 00:00:09.360
This is episode 224, recorded March 10th, 2021.


00:00:09.360 --> 00:00:10.400
I'm Michael Kennedy.


00:00:10.400 --> 00:00:11.240
- And I'm Brian Okken.


00:00:11.240 --> 00:00:12.940
- And I am Calvin Hendricks-Parker.


00:00:12.940 --> 00:00:14.480
- Hey, we have a special guest, Calvin.


00:00:14.480 --> 00:00:15.320
Welcome to the show.


00:00:15.320 --> 00:00:16.320
- Hey, thanks for having me.


00:00:16.320 --> 00:00:18.560
- Yeah, it's fantastic to have you here.


00:00:18.560 --> 00:00:20.320
Always great to have a fresh face.


00:00:20.320 --> 00:00:21.920
I believe it's been about a year


00:00:21.920 --> 00:00:23.840
since you were on the show previously, is that right?


00:00:23.840 --> 00:00:25.560
- I think almost exactly a year, yes.


00:00:25.560 --> 00:00:27.280
- Yeah, YouTube reminded me that it was one


00:00:27.280 --> 00:00:31.340
the first videos of this whole Python Bytes


00:00:31.340 --> 00:00:32.960
that we'd put up there before we were live streaming,


00:00:32.960 --> 00:00:34.560
we'd record it and then put it up.


00:00:34.560 --> 00:00:36.160
That was so last year.


00:00:36.160 --> 00:00:37.420
- I know, I mean, Python Bytes,


00:00:37.420 --> 00:00:38.600
you guys have really upped your game.


00:00:38.600 --> 00:00:39.680
I'm super proud of y'all.


00:00:39.680 --> 00:00:41.280
- Yeah, it's so 2020.


00:00:41.280 --> 00:00:42.100
- Yeah, yeah, yeah.


00:00:42.100 --> 00:00:44.280
We got our broadcast studio working right here


00:00:44.280 --> 00:00:45.480
in Portland, Oregon.


00:00:45.480 --> 00:00:46.840
Super, super nice.


00:00:46.840 --> 00:00:49.640
Speaking of nice, I want to do a follow-up.


00:00:49.640 --> 00:00:50.800
You know what's nice, Brian,


00:00:50.800 --> 00:00:54.480
so often our guests, they send us all these items


00:00:54.480 --> 00:00:56.720
and we'll mention something


00:00:56.720 --> 00:00:58.860
and will think this is like the first time I've heard of this


00:00:58.860 --> 00:01:00.840
and they're like, and here's the 10 other amazing things


00:01:00.840 --> 00:01:01.680
that you've never heard of.


00:01:01.680 --> 00:01:02.520
- Yes. - Right?


00:01:02.520 --> 00:01:04.980
And so this is a little bit of a followup along that.


00:01:04.980 --> 00:01:07.440
Before actually, I realized before I get into that though,


00:01:07.440 --> 00:01:09.180
Calvin, maybe you want to just do a quick,


00:01:09.180 --> 00:01:10.020
who are you?


00:01:10.020 --> 00:01:10.860
It has been a year.


00:01:10.860 --> 00:01:12.600
- It has been a year. - Everyone's gonna remember


00:01:12.600 --> 00:01:13.440
who you are.


00:01:13.440 --> 00:01:14.260
- Sure, sure.


00:01:14.260 --> 00:01:15.100
I'm Calvin Hendricks Parker,


00:01:15.100 --> 00:01:16.400
I'm co-founder and CTO of Six Feet Up


00:01:16.400 --> 00:01:19.640
and also the co-founder of the IndiePi group


00:01:19.640 --> 00:01:21.320
here in Indianapolis, the Python user group.


00:01:21.320 --> 00:01:23.880
And we are also the organizers of the Python web conference,


00:01:23.880 --> 00:01:25.040
which I'll talk about later.


00:01:25.040 --> 00:01:26.520
So that's kind of a quick rundown of me.


00:01:26.520 --> 00:01:28.400
- You're that company that hands out Python jersey shirts.


00:01:28.400 --> 00:01:30.480
- Oh yeah, we do some killer swag.


00:01:30.480 --> 00:01:31.320
- Yeah, yeah, for sure.


00:01:31.320 --> 00:01:32.640
That's a cool conference.


00:01:32.640 --> 00:01:34.120
Be fun to talk about that in a little bit.


00:01:34.120 --> 00:01:35.240
So the first thing though,


00:01:35.240 --> 00:01:39.420
that I do want to talk about over here is AWS Simple.


00:01:39.420 --> 00:01:43.120
We talked about Bodo type definitions, I think it was.


00:01:43.120 --> 00:01:45.440
And then someone mentioned that Bodo type definitions


00:01:45.440 --> 00:01:48.360
has kind of been deprecated, ignored and so on.


00:01:48.360 --> 00:01:52.160
And so they pointed us at this mypy live generated version


00:01:52.160 --> 00:01:53.440
that we talked about last week.


00:01:53.440 --> 00:01:57.080
And also we got a message from James Abel,


00:01:57.080 --> 00:02:02.080
who said, "Hey, I built this cool library called AWS Simple,


00:02:02.080 --> 00:02:03.760
"and I got it all flowed together


00:02:03.760 --> 00:02:06.240
"to get all the S's to fit in there, AWS Simple."


00:02:06.240 --> 00:02:10.680
And the idea is that it's a typed wrapper


00:02:10.680 --> 00:02:12.440
around the AWS API.


00:02:12.440 --> 00:02:16.120
And if you recall, I kind of was harsh on the Boto3 API,


00:02:16.120 --> 00:02:19.280
and I can buy that because there's just zero discoverability


00:02:19.280 --> 00:02:20.200
on how it works.


00:02:20.200 --> 00:02:22.960
There's like inconsistencies on how you pass parameters.


00:02:22.960 --> 00:02:24.400
Sometimes you pass them by name.


00:02:24.400 --> 00:02:26.080
Sometimes you pass them as dictionaries


00:02:26.080 --> 00:02:27.120
with names in the dictionary.


00:02:27.120 --> 00:02:28.720
Just a lot of stuff going on there.


00:02:28.720 --> 00:02:30.160
And it's really not discoverable.


00:02:30.160 --> 00:02:33.000
And so this one also is one of those libraries


00:02:33.000 --> 00:02:35.000
that's meant to help with that.


00:02:35.000 --> 00:02:39.840
So it's a simple API for basic services like S3, DynamoDB,


00:02:39.840 --> 00:02:42.280
their hosted NoSQL database,


00:02:42.280 --> 00:02:45.520
simple notification service, simple queuing service.


00:02:45.520 --> 00:02:47.200
I don't know if you guys have been to AWS lately,


00:02:47.200 --> 00:02:48.440
but you go to your console and it says,


00:02:48.440 --> 00:02:50.120
here's the two things you've recently visited.


00:02:50.120 --> 00:02:50.960
See the rest.


00:02:50.960 --> 00:02:53.460
Like it scrolls, there's a lot.


00:02:53.460 --> 00:02:55.360
So this is clearly not everything,


00:02:55.360 --> 00:02:58.100
but it is some common ones, especially around S3, I think.


00:02:58.100 --> 00:03:00.560
And it's also maybe the kernel of other things, right?


00:03:00.560 --> 00:03:01.720
People often ask me,


00:03:01.720 --> 00:03:03.320
"Hey, what project could I contribute to?"


00:03:03.320 --> 00:03:04.540
Well, I feel like I would really love


00:03:04.540 --> 00:03:06.800
to have simple email service integrated with this.


00:03:06.800 --> 00:03:08.980
Like, well, you know, it probably is easy


00:03:08.980 --> 00:03:10.560
to add like one more service.


00:03:10.560 --> 00:03:13.880
So some of the features include a nice object-oriented API


00:03:13.880 --> 00:03:17.240
on top of Boto3 with proper type definitions


00:03:17.240 --> 00:03:18.720
and classes and static things


00:03:18.720 --> 00:03:22.520
that all the static type checkers and the editors all know about and love.


00:03:22.520 --> 00:03:27.320
You can write really simple one-liners to do S3 read/write deletes.


00:03:27.320 --> 00:03:29.360
It has automatic retry for S3.


00:03:29.360 --> 00:03:30.360
It has caching.


00:03:30.360 --> 00:03:34.360
So for example, when you get a file or upload a file,


00:03:34.360 --> 00:03:36.240
it will hash that result.


00:03:36.240 --> 00:03:39.040
And basically, if you try to get it again,


00:03:39.040 --> 00:03:41.040
it'll say, "Let me check the e-tag."


00:03:41.040 --> 00:03:44.040
That's the way web browsers and servers exchange.


00:03:44.040 --> 00:03:47.240
Like, here's the sort of history or the version of the file,


00:03:47.240 --> 00:03:49.660
and it'll check has this thing changed or not.


00:03:49.660 --> 00:03:52.660
And so it'll not download the S3 file if it hasn't changed.


00:03:52.660 --> 00:03:54.940
And you ask, it'll just use like the last version it got


00:03:54.940 --> 00:03:56.440
since it touched it, things like that.


00:03:56.440 --> 00:03:59.200
Some DynamoDB full table scans,


00:03:59.200 --> 00:04:00.940
secondary indexes and pagination.


00:04:00.940 --> 00:04:04.620
So there's some simple examples like my S3 access


00:04:04.620 --> 00:04:07.820
and then maybe if you could do DynamoDB,


00:04:07.820 --> 00:04:10.740
create a DynamoDB access and just put an item


00:04:10.740 --> 00:04:12.500
or get an item and off it goes.


00:04:12.500 --> 00:04:14.040
Really, really simple, you know,


00:04:14.040 --> 00:04:15.460
as you would imagine something with a name


00:04:15.460 --> 00:04:16.780
like AWS Simple has.


00:04:16.780 --> 00:04:20.240
But it's just one more thing around AWS APIs


00:04:20.240 --> 00:04:21.320
that I think is pretty interesting.


00:04:21.320 --> 00:04:22.360
What do you guys think?


00:04:22.360 --> 00:04:23.920
- I kind of expected to pull it to bury in.


00:04:23.920 --> 00:04:26.380
They're saying AWS Simple is not simple


00:04:26.380 --> 00:04:28.320
because this is a massive undertaking


00:04:28.320 --> 00:04:29.800
to try and make something like this simple.


00:04:29.800 --> 00:04:30.640
- Yeah, absolutely.


00:04:30.640 --> 00:04:31.460
I totally agree with that.


00:04:31.460 --> 00:04:32.960
I mean, it's pretty neat.


00:04:32.960 --> 00:04:33.880
Over in their documentation,


00:04:33.880 --> 00:04:36.080
they've got a little more examples


00:04:36.080 --> 00:04:38.520
and a quick start guide and how to use it and so on.


00:04:38.520 --> 00:04:40.480
But yeah, it's pretty easy.


00:04:40.480 --> 00:04:42.360
You just do like S3, create bucket,


00:04:42.360 --> 00:04:44.440
S3, write string to this key, and so on.


00:04:44.440 --> 00:04:45.400
It's quite easy.


00:04:45.400 --> 00:04:49.280
So if you're struggling with the AWS APIs,


00:04:49.280 --> 00:04:50.240
this is a cool project.


00:04:50.240 --> 00:04:52.360
And again, I think it's pretty limited


00:04:52.360 --> 00:04:53.600
to just a couple of the services.


00:04:53.600 --> 00:04:55.960
So it's somewhere that if you got your favorite service


00:04:55.960 --> 00:04:57.520
and you want something like this for it,


00:04:57.520 --> 00:04:59.120
reach out James and add it.


00:04:59.120 --> 00:05:00.840
- Yeah, and all of the services could be added


00:05:00.840 --> 00:05:04.320
and then AWS Simple could be as complex as everything else.


00:05:04.320 --> 00:05:05.440
- Exactly.


00:05:05.440 --> 00:05:07.160
Like I can barely install this thing anymore.


00:05:07.160 --> 00:05:08.260
It's really legit.


00:05:08.260 --> 00:05:12.500
- Yeah, they're trying to become the AWS APIs for humans,


00:05:12.500 --> 00:05:15.240
kind of like requests for HTTP.


00:05:15.240 --> 00:05:16.080
- Yeah, maybe.


00:05:16.080 --> 00:05:18.040
I mean, Boto3 was kind of like that too, right?


00:05:18.040 --> 00:05:20.400
- Well, again, the S3 API is,


00:05:20.400 --> 00:05:22.400
they've changed names, they're inconsistent,


00:05:22.400 --> 00:05:24.640
it's really hard to parse sometimes as a human,


00:05:24.640 --> 00:05:27.480
like the uploading process of multi-part uploads.


00:05:27.480 --> 00:05:29.960
If you're not into the web, this could be really daunting.


00:05:29.960 --> 00:05:32.480
Sounds like this is a great way to enter this space


00:05:32.480 --> 00:05:34.200
and not have to learn all that stuff.


00:05:34.200 --> 00:05:35.280
- I can't just do this thing.


00:05:35.280 --> 00:05:37.680
I gotta create a waiter and I gotta wait on the thing


00:05:37.680 --> 00:05:39.480
and so on, yeah, absolutely.


00:05:39.480 --> 00:05:41.880
Dean Langston up there in the live stream said,


00:05:41.880 --> 00:05:42.800
out there in the live stream said,


00:05:42.800 --> 00:05:46.380
"It's amazing to me how many of the most accessed APIs


00:05:46.380 --> 00:05:48.100
in the world need third-party packaging


00:05:48.100 --> 00:05:48.940
to make them useful."


00:05:48.940 --> 00:05:50.820
Yeah, I mean, if it weren't such a small little


00:05:50.820 --> 00:05:52.620
rinky-dink company, if they could hire a bunch


00:05:52.620 --> 00:05:54.180
of developers to work on this, like,


00:05:54.180 --> 00:05:56.180
"Oh wait, no, it's Amazon."


00:05:56.180 --> 00:05:57.460
No, I totally agree with you, Dean.


00:05:57.460 --> 00:05:58.300
That's funny.


00:05:58.300 --> 00:06:00.260
All right, yeah, so AWS Symbol,


00:06:00.260 --> 00:06:01.660
check it out if that appeals to you.


00:06:01.660 --> 00:06:03.180
Brian, what you got for us?


00:06:03.180 --> 00:06:06.180
- Well, I was going to, how do we do this?


00:06:06.180 --> 00:06:07.020
Oh, yep.


00:06:07.020 --> 00:06:08.700
- We both clicked, sorry about that.


00:06:08.700 --> 00:06:09.540
It was a race car.


00:06:09.540 --> 00:06:11.900
(laughing)


00:06:11.900 --> 00:06:13.600
So I learned something new the other day


00:06:13.600 --> 00:06:15.860
and I learned something new about something old.


00:06:15.860 --> 00:06:20.600
So I've used a coverage.py a lot


00:06:20.600 --> 00:06:22.340
over the past several years.


00:06:22.340 --> 00:06:23.640
And I've even covered it a lot


00:06:23.640 --> 00:06:27.340
on the Testing Code Podcast a couple of times.


00:06:27.340 --> 00:06:29.260
Covered it on the podcast.


00:06:29.260 --> 00:06:31.380
Yep, that's a meta joke.


00:06:31.380 --> 00:06:33.980
Anyway, there's something I missed the whole time.


00:06:33.980 --> 00:06:36.460
So there's a source thing.


00:06:36.460 --> 00:06:38.820
So you can tell coverage where the source code is


00:06:38.820 --> 00:06:41.860
where the source is for whatever you're covering.


00:06:41.860 --> 00:06:48.300
Hidden in here is the source can be the sources,


00:06:48.300 --> 00:06:50.680
either directories or packages.


00:06:50.680 --> 00:06:53.620
It's the or packages I never saw before.


00:06:53.620 --> 00:06:54.660
>> That's cool.


00:06:54.660 --> 00:06:55.940
>> Why this is significant,


00:06:55.940 --> 00:06:59.140
and apparently this has been here the whole time and I just missed it,


00:06:59.140 --> 00:07:01.500
is there was a workaround.


00:07:01.500 --> 00:07:08.040
If I'm developing a package and I want to test it as an installed package,


00:07:08.040 --> 00:07:12.120
I install it and then I run the tests against the installed package.


00:07:12.120 --> 00:07:15.480
But how do I run coverage against that? And there was an old trick


00:07:15.480 --> 00:07:24.920
to, and it I guess it still is works, is to use the paths option within coverage to say


00:07:24.920 --> 00:07:29.960
these two paths are identical. So you could say the actual source code directory is identical


00:07:29.960 --> 00:07:35.880
to the site packages directory so that it it kind of lines everything up and then it reports


00:07:35.880 --> 00:07:38.740
even though it's measuring the coverage on the installed package,


00:07:38.740 --> 00:07:42.540
it reports it as if it was sitting in the source directory.


00:07:42.540 --> 00:07:44.420
I've been doing that in the past.


00:07:44.420 --> 00:07:48.080
That still is a good idea so that the output is readable,


00:07:48.080 --> 00:07:50.020
but it isn't required.


00:07:50.020 --> 00:07:54.260
You can just pass in the name of your package without the dot pi or anything,


00:07:54.260 --> 00:07:56.060
or if it's just a file,


00:07:56.060 --> 00:07:59.460
but just the name of the package and it just reports it.


00:07:59.460 --> 00:08:04.320
Anyway, I just figured that maybe some people out there have missed that also.


00:08:04.320 --> 00:08:05.420
It's very handy.


00:08:05.420 --> 00:08:08.180
Well, you might wonder like, why are you testing packages?


00:08:08.180 --> 00:08:10.740
I don't need the coverage of requests when I use it.


00:08:10.740 --> 00:08:12.500
I just know that I use it and we're all good.


00:08:12.500 --> 00:08:14.540
- Well, if you're developing requests,


00:08:14.540 --> 00:08:15.380
you might want to cover.


00:08:15.380 --> 00:08:16.820
- Yes, exactly.


00:08:16.820 --> 00:08:20.340
Or, you know, it may well be that you're building


00:08:20.340 --> 00:08:24.020
your application out of several packages that you control


00:08:24.020 --> 00:08:26.140
and you kind of want to keep them separate for reuse,


00:08:26.140 --> 00:08:27.620
but you might also want to know like,


00:08:27.620 --> 00:08:29.860
how much am I interacting with that one, right?


00:08:29.860 --> 00:08:32.060
- Oh, that's a cool use to say really,


00:08:32.060 --> 00:08:34.260
how much am I interacting with the package?


00:08:34.260 --> 00:08:35.780
you could run coverage on that.


00:08:35.780 --> 00:08:39.180
- Yeah, if it's zero, take it out of your requirements.


00:08:39.180 --> 00:08:41.020
- That would be super nice.


00:08:41.020 --> 00:08:42.660
- Yeah, that was really cool.


00:08:42.660 --> 00:08:45.940
- Yeah, also, I guess when one of the reasons


00:08:45.940 --> 00:08:48.620
why that might be handy is if they change,


00:08:48.620 --> 00:08:51.540
drastically change an API, like go to a new dot,


00:08:51.540 --> 00:08:55.100
you know, like a three dot something to four dot something,


00:08:55.100 --> 00:08:56.900
what does the API change?


00:08:56.900 --> 00:09:00.100
And you could check to see if you're even using that API


00:09:00.100 --> 00:09:01.700
or that entry point that might be good.


00:09:01.700 --> 00:09:02.540
- Oh, that's interesting.


00:09:02.540 --> 00:09:04.580
- Yeah, yeah, that part was like a break and change,


00:09:04.580 --> 00:09:05.420
but I don't care.


00:09:05.420 --> 00:09:06.260
- Yeah.


00:09:06.260 --> 00:09:07.080
- Okay.


00:09:07.080 --> 00:09:07.920
- Like, I can really see the,


00:09:07.920 --> 00:09:08.740
there's a huge use case here though,


00:09:08.740 --> 00:09:10.620
for old code bases where the developers


00:09:10.620 --> 00:09:11.500
aren't there anymore,


00:09:11.500 --> 00:09:13.100
and there's been dependencies brought in,


00:09:13.100 --> 00:09:14.740
and you don't know exactly what's being used.


00:09:14.740 --> 00:09:17.580
So this is like super nice to be able to do that.


00:09:17.580 --> 00:09:19.740
- Yeah, and of course, as a reminder,


00:09:19.740 --> 00:09:21.380
you can have as many of these as you want to.


00:09:21.380 --> 00:09:24.580
So if you're wanting to measure several packages,


00:09:24.580 --> 00:09:27.700
you can add multiple source flags.


00:09:27.700 --> 00:09:31.300
And if you're using pytest-cov, it's the cov flag.


00:09:31.300 --> 00:09:33.180
So you, which is identical.


00:09:33.180 --> 00:09:37.540
I'm not sure why they used coven dash coven instead of dash source, but there you go.


00:09:37.540 --> 00:09:38.020
Interesting.


00:09:38.020 --> 00:09:38.460
Okay.


00:09:38.460 --> 00:09:38.780
Yeah.


00:09:38.780 --> 00:09:39.020
Yeah.


00:09:39.020 --> 00:09:39.540
Super cool.


00:09:39.540 --> 00:09:40.100
Super cool.


00:09:40.100 --> 00:09:42.700
So Calvin, I didn't know that you were an artist.


00:09:42.700 --> 00:09:46.900
I wish, maybe more of a machine learners, artists, but machine learning


00:09:46.900 --> 00:09:51.620
artists, this, really interesting article came up on my newsfeed last week,


00:09:51.620 --> 00:09:54.220
which was finding Mona Lisa in the game of life with Jacks.


00:09:54.220 --> 00:09:57.820
And so there's three interesting things there, like Mona Lisa game of life.


00:09:57.820 --> 00:10:04.940
and in Jax, the author was attempting to find if he could start with a starting set of points


00:10:04.940 --> 00:10:09.060
on a game of life. If you're not familiar with Game of Life, there's whole Wikipedia


00:10:09.060 --> 00:10:14.860
articles about that. But if you could basically seed an initial game of life, and after so


00:10:14.860 --> 00:10:19.780
many generations, have it show you a picture. So he actually started with the Mona Lisa


00:10:19.780 --> 00:10:24.660
and kind of went through what it would take to go from a game of life running, all the


00:10:24.660 --> 00:10:26.300
what kind of constraints that happen in that.


00:10:26.300 --> 00:10:28.140
But this seems like a really interesting


00:10:28.140 --> 00:10:29.380
machine learning problem.


00:10:29.380 --> 00:10:30.220
- That's cool.


00:10:30.220 --> 00:10:34.060
So it like, it randomly runs the game of life,


00:10:34.060 --> 00:10:35.620
but then the ML says,


00:10:35.620 --> 00:10:38.420
oh, that's starting to look like Mona Lisa, more of that.


00:10:38.420 --> 00:10:40.100
- Well, it's more of,


00:10:40.100 --> 00:10:43.180
I'm gonna run a generation of game of life and then reset.


00:10:43.180 --> 00:10:45.660
I'm gonna invert some pixels again and go again


00:10:45.660 --> 00:10:48.840
until I can generate what is my target picture.


00:10:48.840 --> 00:10:50.540
And it took a lot of CPU cycles.


00:10:50.540 --> 00:10:52.820
So you basically wrote a simple single threaded version


00:10:52.820 --> 00:10:53.800
of this in Python.


00:10:53.800 --> 00:10:55.520
And there's Python notebooks included


00:10:55.520 --> 00:10:57.380
with the GitHub links in here,


00:10:57.380 --> 00:10:59.620
but it took days of CPU time


00:10:59.620 --> 00:11:01.900
for him to run the initial four generations


00:11:01.900 --> 00:11:04.700
to see if he could even make this be possible.


00:11:04.700 --> 00:11:05.540
And then kind of went,


00:11:05.540 --> 00:11:07.800
and with any machine learning project,


00:11:07.800 --> 00:11:09.120
it's really important to understand


00:11:09.120 --> 00:11:10.520
like the preparation of your data


00:11:10.520 --> 00:11:12.060
before you kind of go dive in.


00:11:12.060 --> 00:11:14.380
So what I also thought was interesting in here


00:11:14.380 --> 00:11:16.300
is he talks about the preparation of the data,


00:11:16.300 --> 00:11:17.840
kind of down here, pre-processing,


00:11:17.840 --> 00:11:22.100
using Pill to understand how to generate that target first,


00:11:22.100 --> 00:11:22.620
>> Yeah.


00:11:22.620 --> 00:11:26.440
>> Give the Game of Life algorithms a chance of getting it correct.


00:11:26.440 --> 00:11:29.100
Came into like really half tones would work better because there's


00:11:29.100 --> 00:11:32.540
some constraints around Game of Life that the whites can't be too


00:11:32.540 --> 00:11:36.500
contiguous because they'll kill each other and ends up being all black.


00:11:36.500 --> 00:11:41.060
But at the end, the goal of this was how fast can we now do it?


00:11:41.060 --> 00:11:45.900
Take the single threaded Python example which took hours or days of CPU,


00:11:45.900 --> 00:11:47.860
can we actually do it on a GPU?


00:11:47.860 --> 00:11:51.980
There's a Jax library which is a machine learning library in Python,


00:11:51.980 --> 00:11:54.980
allows you to actually super parallelize the problem.


00:11:54.980 --> 00:11:56.620
If you can actually slice the problem up,


00:11:56.620 --> 00:11:58.100
show this example here in pictures,


00:11:58.100 --> 00:12:01.260
which is nice for a person who doesn't do a lot of machine learning.


00:12:01.260 --> 00:12:05.980
They actually show you what the process looks like and hyper-parallelize this.


00:12:05.980 --> 00:12:09.260
Basically, he went from days of CPU time down to


00:12:09.260 --> 00:12:12.140
40 seconds to get through the first.


00:12:12.140 --> 00:12:13.700
>> What was the final time?


00:12:13.700 --> 00:12:15.020
>> Forty seconds.


00:12:15.020 --> 00:12:16.340
>> That's insane.


00:12:16.340 --> 00:12:18.780
>> Yeah, it was ridiculous. It's like a thousand iterations.


00:12:18.780 --> 00:12:22.180
So the first one was four generations, took days.


00:12:22.180 --> 00:12:23.980
The next one where he did it with Jax


00:12:23.980 --> 00:12:28.460
was 1,000 iterations, took 40 seconds on a Google Colab GPU.


00:12:28.460 --> 00:12:30.740
So Jax is basically a Python library.


00:12:30.740 --> 00:12:33.540
I've got a quick start over here.


00:12:33.540 --> 00:12:35.180
Neat library, but actually you kind of


00:12:35.180 --> 00:12:38.020
have to alter your brain a little bit to how you code


00:12:38.020 --> 00:12:40.540
so that you can code in a way that can be hyper-parallelized


00:12:40.540 --> 00:12:41.820
across all the GPUs.


00:12:41.820 --> 00:12:43.860
I mean, for people who aren't familiar with GPUs,


00:12:43.860 --> 00:12:46.520
which you may not be, because good luck getting a GPU right


00:12:46.520 --> 00:12:48.880
now they're unobtainium at this point.


00:12:48.880 --> 00:12:50.320
But if you did have a GPU,


00:12:50.320 --> 00:12:52.880
you can take advantage of those,


00:12:52.880 --> 00:12:54.880
how many cores are in some of these modern GPUs,


00:12:54.880 --> 00:12:57.440
like thousands in the new NVIDIA ones.


00:12:57.440 --> 00:12:59.220
>> Every time that I try to think about and try to


00:12:59.220 --> 00:13:01.840
conceptualize how fast and how much these things can do,


00:13:01.840 --> 00:13:03.600
I'm like, whatever that is, it's probably off by


00:13:03.600 --> 00:13:06.600
10 or many, many more factor of 10.


00:13:06.600 --> 00:13:08.200
Just ramp that up to


00:13:08.200 --> 00:13:10.040
beyond what you can think is reasonable.


00:13:10.040 --> 00:13:11.880
It's when you think of, we've got


00:13:11.880 --> 00:13:14.400
half a million polygons on the screen,


00:13:14.400 --> 00:13:15.320
and we're going to draw that.


00:13:15.320 --> 00:13:17.900
Oh, we're actually gonna do that 200 times a second.


00:13:17.900 --> 00:13:20.480
- Right, so what's interesting is if you are doing


00:13:20.480 --> 00:13:22.280
some machine learning experimentations,


00:13:22.280 --> 00:13:25.100
learning a tool like JAX may actually help you speed up


00:13:25.100 --> 00:13:26.480
your iteration so you actually can get


00:13:26.480 --> 00:13:27.480
some useful results out of it.


00:13:27.480 --> 00:13:29.440
Because a lot of machine learning is kind of picking out


00:13:29.440 --> 00:13:32.160
what your algorithm base algorithm is gonna be,


00:13:32.160 --> 00:13:34.040
but you have to run it enough to know


00:13:34.040 --> 00:13:35.480
whether your algorithm is getting you


00:13:35.480 --> 00:13:36.520
the results you expect.


00:13:36.520 --> 00:13:38.840
So being able to run through those algorithms quicker


00:13:38.840 --> 00:13:41.040
with a tool like JAX I think would be super beneficial.


00:13:41.040 --> 00:13:42.200
- Yeah, absolutely.


00:13:42.200 --> 00:13:43.440
That's super neat.


00:13:43.440 --> 00:13:46.480
And I think the biggest takeaway here is Jack's actually.


00:13:46.480 --> 00:13:49.200
- Yeah, that was, yeah, the end goal was like,


00:13:49.200 --> 00:13:50.160
yeah, can we talk about Jack's?


00:13:50.160 --> 00:13:51.680
'Cause that's a really cool library.


00:13:51.680 --> 00:13:53.480
- Well, and a cool logo, by the way.


00:13:53.480 --> 00:13:55.040
- Yeah. - Yeah.


00:13:55.040 --> 00:13:55.860
Yeah, I love it.


00:13:55.860 --> 00:13:57.400
The logo is super cool, actually, I like it.


00:13:57.400 --> 00:13:59.560
- Yeah, but definitely, and I think they have support


00:13:59.560 --> 00:14:02.800
for tensor processing units as well, so not only GPUs,


00:14:02.800 --> 00:14:05.320
but if you're doing like tensor flow stuff, tensor GPUs,


00:14:05.320 --> 00:14:06.560
or tensor processing units,


00:14:06.560 --> 00:14:08.000
so you can take advantage of those as well.


00:14:08.000 --> 00:14:09.920
- Yeah, okay, super neat, super neat.


00:14:09.920 --> 00:14:13.320
I wanna talk about something that's not as neat, maybe.


00:14:13.320 --> 00:14:15.240
It'll get you excited, but in the wrong way.


00:14:15.240 --> 00:14:17.280
This one was sent over by my friend, Mark Little,


00:14:17.280 --> 00:14:20.800
fellow Portlander, and a follow-up related one


00:14:20.800 --> 00:14:22.120
sent over by Tony.


00:14:22.120 --> 00:14:24.920
So link into a couple of articles here.


00:14:24.920 --> 00:14:27.840
And recall, we talked about Google coming on


00:14:27.840 --> 00:14:29.120
as the visionary sponsor.


00:14:29.120 --> 00:14:31.160
One of their primary goals that they wanted


00:14:31.160 --> 00:14:34.000
was to improve the package security.


00:14:34.000 --> 00:14:35.800
You think about, you know, you think about


00:14:35.800 --> 00:14:37.640
some of the things that have happened recently


00:14:37.640 --> 00:14:39.320
that are super scary.


00:14:39.320 --> 00:14:42.040
One, the Outlook catastrophe that, you know,


00:14:42.040 --> 00:14:44.320
60,000 companies have been like taken over.


00:14:44.320 --> 00:14:46.360
And then the SolarWinds one as well.


00:14:46.360 --> 00:14:49.360
And I think they're somewhat related, even though they're not the same


00:14:49.360 --> 00:14:50.840
origin or the same type of hack.


00:14:50.840 --> 00:14:54.120
The SolarWinds one is one of these supply chain vulnerabilities


00:14:54.120 --> 00:14:55.200
and these breaches, right?


00:14:55.200 --> 00:14:58.080
It's one thing to say, I'm going to protect against somebody


00:14:58.080 --> 00:14:59.280
breaking into my website.


00:14:59.280 --> 00:15:03.560
I'm going to run the proper firewalls, low privileges, everything's patched,


00:15:03.560 --> 00:15:07.080
et cetera, et cetera, that might still not be enough, but that's like a good start.


00:15:07.080 --> 00:15:11.400
But do you think about, well, next time you install the new version


00:15:11.440 --> 00:15:16.280
of package, whatever, what if it was influenced with some kind of negative


00:15:16.280 --> 00:15:19.940
package that had some vulnerability that then got into your servers and then went


00:15:19.940 --> 00:15:25.540
on, like the supply chain story around all of these package management places is,


00:15:25.540 --> 00:15:26.440
is scary.


00:15:26.440 --> 00:15:28.360
I think that's not what happened to solar winds.


00:15:28.360 --> 00:15:30.540
They just had the password solar winds one, two, three.


00:15:30.540 --> 00:15:33.440
That's a different, different type of problem, but it highlights


00:15:33.440 --> 00:15:34.240
those darn interns.


00:15:34.240 --> 00:15:35.160
Exactly.


00:15:35.160 --> 00:15:35.880
Exactly.


00:15:35.880 --> 00:15:41.200
But the problem that it might be untrustworthy to install all of our


00:15:41.200 --> 00:15:43.200
beautiful open source things.


00:15:43.200 --> 00:15:44.440
I don't know. It's very scary.


00:15:44.440 --> 00:15:45.640
Like, what do you guys think about this?


00:15:45.640 --> 00:15:47.500
>> It seemed like this went even a level deeper.


00:15:47.500 --> 00:15:50.460
There wasn't even scary to install the open source things.


00:15:50.460 --> 00:15:53.980
It was dangerous to install your own private package names if


00:15:53.980 --> 00:15:55.640
someone knew about them and had put them


00:15:55.640 --> 00:15:58.560
into a public repository with a newer version.


00:15:58.560 --> 00:16:02.360
>> Yeah. So let me read the titles here for people who are listening.


00:16:02.360 --> 00:16:04.160
The Python Package Index nukes


00:16:04.160 --> 00:16:07.200
3,653 malicious libraries uploaded


00:16:07.200 --> 00:16:10.480
soon after a security shortcoming is highlighted.


00:16:10.480 --> 00:16:14.720
And the other one is poison packages, supply chain risks,


00:16:14.720 --> 00:16:18.120
users hit Python community with 4,000 fake modules.


00:16:18.120 --> 00:16:19.800
And these are basically the same.


00:16:19.800 --> 00:16:21.640
I don't know if like one's rounding up or whatever,


00:16:21.640 --> 00:16:23.800
but or one's counting multiple incidents.


00:16:23.800 --> 00:16:26.920
But the idea is there's this form of type squatting


00:16:26.920 --> 00:16:28.280
that's pretty sketchy.


00:16:28.280 --> 00:16:31.460
So we've covered this before where if you have,


00:16:31.460 --> 00:16:35.080
maybe I want to use the audio library asteroid singular,


00:16:35.080 --> 00:16:39.040
but then somebody puts asteroids plural, that is a virus.


00:16:39.040 --> 00:16:41.160
And it could just as well have exactly the same code


00:16:41.160 --> 00:16:42.200
plus the virus.


00:16:42.200 --> 00:16:43.240
So it looks like it works.


00:16:43.240 --> 00:16:45.560
You wouldn't even know that it's not working, right?


00:16:45.560 --> 00:16:46.920
And that's quite the problem.


00:16:46.920 --> 00:16:50.160
But here the highlight is, what's it called?


00:16:50.160 --> 00:16:52.480
Like, I think one thing was calling it Evil Twin.


00:16:52.480 --> 00:16:56.680
Another, this is a research by Alex Pearson.


00:16:56.680 --> 00:16:58.840
And basically there's a lot of people


00:16:58.840 --> 00:17:02.680
who are using private package repositories, right?


00:17:02.680 --> 00:17:04.840
Like DevPi and things like that,


00:17:04.840 --> 00:17:06.800
artifactory where you have a local one,


00:17:06.800 --> 00:17:08.440
but if you ask for something public,


00:17:08.440 --> 00:17:12.160
you can just ask your local one and the local one will go out and ask the public one.


00:17:12.160 --> 00:17:15.080
So as you were handing that Calvin, the problem is,


00:17:15.080 --> 00:17:20.640
what if I just have like data layer or e-commerce or like some random thing


00:17:20.640 --> 00:17:22.640
that might be an internal package name.


00:17:22.640 --> 00:17:25.440
Maybe if it's what I think the real problem was,


00:17:25.440 --> 00:17:28.160
they were saying, if you don't secure your server right,


00:17:28.160 --> 00:17:33.760
you just post a higher version on the public one than on the local one.


00:17:33.760 --> 00:17:35.680
And it'll go, oh, well, there's a newer one over there.


00:17:35.680 --> 00:17:38.520
I better get that and we'll just go grab the virus.


00:17:38.520 --> 00:17:40.520
- I'm also surprised that folks aren't pending


00:17:40.520 --> 00:17:42.800
the versions of their internal packages as well.


00:17:42.800 --> 00:17:45.480
'Cause this would satisfy solving that problem


00:17:45.480 --> 00:17:48.200
is if you had, like we use pip tools,


00:17:48.200 --> 00:17:50.640
pip compile to make sure we got hashes


00:17:50.640 --> 00:17:53.840
and versions for every dependent package.


00:17:53.840 --> 00:17:54.920
But yeah, if you didn't do that,


00:17:54.920 --> 00:17:56.920
you were absolutely susceptible to this.


00:17:56.920 --> 00:17:59.800
- Yeah, so just people check this out.


00:17:59.800 --> 00:18:01.360
It looks a little scary.


00:18:01.360 --> 00:18:05.200
You guys, you too, tell me if you think I'm crazy.


00:18:05.200 --> 00:18:07.080
I'm getting to the point where I'm really freaked out


00:18:07.080 --> 00:18:08.920
about like these kinds of things.


00:18:08.920 --> 00:18:11.000
And especially, you know, people send us stuff.


00:18:11.000 --> 00:18:12.620
They're like, oh, check this out, here you go.


00:18:12.620 --> 00:18:14.920
Like, I'm not pip installing those things locally


00:18:14.920 --> 00:18:16.760
and trying them, no way, right?


00:18:16.760 --> 00:18:19.600
I'm gonna install them in some isolated environment.


00:18:19.600 --> 00:18:21.000
One thing I've been thinking about doing


00:18:21.000 --> 00:18:23.300
is setting up my own DevPi server,


00:18:23.300 --> 00:18:25.640
which is exactly the problem sort of


00:18:25.640 --> 00:18:26.540
that we're talking about.


00:18:26.540 --> 00:18:27.960
So that doesn't necessarily solve it.


00:18:27.960 --> 00:18:29.800
But what you can get with your DevPi server


00:18:29.800 --> 00:18:31.520
is you can get DevPi constrained,


00:18:31.520 --> 00:18:34.280
which will let you not blacklist stuff or exclude stuff,


00:18:34.280 --> 00:18:35.800
but you have to whitelist things.


00:18:35.800 --> 00:18:37.200
So you're like, all right, I'm gonna try to install,


00:18:37.200 --> 00:18:38.040
set up this project.


00:18:38.040 --> 00:18:39.280
And when it tells me I need these things


00:18:39.280 --> 00:18:41.520
and they're failing, I'll make sure they're good.


00:18:41.520 --> 00:18:42.400
Make sure they're used a lot.


00:18:42.400 --> 00:18:43.760
I'll put them in the whitelist


00:18:43.760 --> 00:18:46.560
and then I'll be happy to just pip install versions,


00:18:46.560 --> 00:18:48.040
no versions, whatever, right?


00:18:48.040 --> 00:18:50.340
But sort of being more protective about this.


00:18:50.340 --> 00:18:51.880
I don't know, maybe I'm just paranoid,


00:18:51.880 --> 00:18:54.320
but this stuff is, it's creeping me out.


00:18:54.320 --> 00:18:56.360
- I'm still just having it let me,


00:18:56.360 --> 00:18:57.480
I'm still sinking in.


00:18:57.480 --> 00:18:59.360
I'm not sure how I react to it.


00:18:59.360 --> 00:19:00.200
- Yeah.


00:19:00.200 --> 00:19:02.040
- My reaction is I think there's still more infrastructure


00:19:02.040 --> 00:19:04.340
security-wise that has to happen in the community.


00:19:04.340 --> 00:19:06.840
And there's efforts to do signed packages,


00:19:06.840 --> 00:19:08.920
there's support in the latest version of pip


00:19:08.920 --> 00:19:10.240
for signed packages.


00:19:10.240 --> 00:19:12.360
And there's also some good hygiene behaviors,


00:19:12.360 --> 00:19:14.220
but it's true, if you wanted to just try out a package


00:19:14.220 --> 00:19:16.400
and you just did pip install from your command line,


00:19:16.400 --> 00:19:19.200
you're typically not gonna specify a specific version


00:19:19.200 --> 00:19:20.720
and you're gonna get whatever just comes off


00:19:20.720 --> 00:19:22.080
of PyPi with it.


00:19:22.080 --> 00:19:24.360
Yeah, we've gone around and around about it internally


00:19:24.360 --> 00:19:26.760
as well, talking about this because we wanna make sure


00:19:26.760 --> 00:19:28.920
we're not susceptible to this kind of an attack.


00:19:28.920 --> 00:19:31.320
And I think good practices like the pip tools,


00:19:31.320 --> 00:19:33.880
you know, using that and having pin versions


00:19:33.880 --> 00:19:35.560
has pretty much given us a comfort level


00:19:35.560 --> 00:19:36.960
with we're pretty safe.


00:19:36.960 --> 00:19:38.760
I mean, no one's a hundred percent safe.


00:19:38.760 --> 00:19:41.440
That doesn't exist, but we're feeling pretty good


00:19:41.440 --> 00:19:42.600
because of the practices.


00:19:42.600 --> 00:19:43.440
- Yeah, yeah.


00:19:43.440 --> 00:19:44.260
I know that sounds good.


00:19:44.260 --> 00:19:45.320
I mean, there's only so much you can do,


00:19:45.320 --> 00:19:47.120
but layers, layers are good, right?


00:19:47.120 --> 00:19:47.960
Layers are good.


00:19:47.960 --> 00:19:49.520
Anyway, this, if you are running,


00:19:49.520 --> 00:19:50.560
I want to highlight this.


00:19:50.560 --> 00:19:52.320
The ultimate problem highlighted here


00:19:52.320 --> 00:19:54.480
is that if you have a private PyPI server,


00:19:54.480 --> 00:19:58.960
that there were ways to typo squat on your internal names,


00:19:58.960 --> 00:20:00.020
not on the public name.


00:20:00.020 --> 00:20:01.820
And there's no way for the public stuff to go,


00:20:01.820 --> 00:20:03.100
well, you can't have that,


00:20:03.100 --> 00:20:04.280
'cause it looks too close to this, right?


00:20:04.280 --> 00:20:05.760
It might not exist publicly.


00:20:05.760 --> 00:20:08.300
So just be really careful about the versions,


00:20:08.300 --> 00:20:10.780
be really careful about like whitelisting things


00:20:10.780 --> 00:20:12.620
if you're doing your own private PyPI.


00:20:12.620 --> 00:20:13.940
- And it's important to also note,


00:20:13.940 --> 00:20:15.720
this is not a Python specific problem.


00:20:15.720 --> 00:20:17.660
So I think some folks may have blown it up a portion,


00:20:17.660 --> 00:20:20.540
but like other packaging distribution tooling


00:20:20.540 --> 00:20:22.340
all have some similar problems.


00:20:22.340 --> 00:20:24.140
- Yeah, and I just saw a message,


00:20:24.140 --> 00:20:25.220
he was on Twitter or somewhere.


00:20:25.220 --> 00:20:28.160
Yeah, this, I mean, obviously NPM has this problem.


00:20:28.160 --> 00:20:30.920
RubyGems, all these places, NuGet, whatnot.


00:20:30.920 --> 00:20:33.600
Somebody who was involved in like diagnosing


00:20:33.600 --> 00:20:34.800
and solving these problems was like,


00:20:34.800 --> 00:20:37.800
"Please don't go post another 4,000 packages


00:20:37.800 --> 00:20:38.640
"to prove your point.


00:20:38.640 --> 00:20:40.160
"Just, we are already aware.


00:20:40.160 --> 00:20:41.660
"Just send us a message.


00:20:41.660 --> 00:20:44.800
"You're causing a lot of work that is like distracting us


00:20:44.800 --> 00:20:45.960
"from addressing this problem."


00:20:45.960 --> 00:20:47.720
So, you know, we don't need more examples.


00:20:47.720 --> 00:20:49.920
We need just maybe a notification.


00:20:49.920 --> 00:20:52.080
- Yeah, I guess one of the other things


00:20:52.080 --> 00:20:54.480
is that it is typo squatting.


00:20:54.480 --> 00:20:56.800
So we, in our organization,


00:20:56.800 --> 00:21:00.140
We try to minimize individuals having to install anything,


00:21:00.140 --> 00:21:00.980
really.


00:21:00.980 --> 00:21:04.700
They, we have all of our projects have requirements files


00:21:04.700 --> 00:21:05.840
with pinned versions.


00:21:05.840 --> 00:21:08.880
So they're not going to type the name of anything.


00:21:08.880 --> 00:21:11.280
It's going to have to be in a requirements file first.


00:21:11.280 --> 00:21:12.120
- Yeah. All right.


00:21:12.120 --> 00:21:12.960
Well, check out the articles.


00:21:12.960 --> 00:21:14.880
There's more details in both of them.


00:21:14.880 --> 00:21:16.480
Brian, what you got for us?


00:21:16.480 --> 00:21:17.440
- My turn again?


00:21:17.440 --> 00:21:18.800
Okay, cool.


00:21:18.800 --> 00:21:23.800
I wanted to talk about something new,


00:21:23.800 --> 00:21:26.080
text-based adventure games.


00:21:26.080 --> 00:21:26.920
- Have you heard of these?


00:21:26.920 --> 00:21:28.940
- I love, I used to play-- - I do love those.


00:21:28.940 --> 00:21:31.740
- I used to play MUDs when I was quite younger.


00:21:31.740 --> 00:21:32.940
Oh, those were so fun.


00:21:32.940 --> 00:21:35.540
They were so magical, even though they were just text.


00:21:35.540 --> 00:21:38.080
- So I actually never got into this,


00:21:38.080 --> 00:21:43.080
but I had entered adventure games, what was it called?


00:21:43.080 --> 00:21:45.780
The Dungeons of Dagorath was a game


00:21:45.780 --> 00:21:50.460
that I had on the TRS-80, and it wasn't text-based,


00:21:50.460 --> 00:21:52.340
but the graphics were just lines.


00:21:52.340 --> 00:21:56.100
So it was, we'll go through a cave and stuff like that.


00:21:56.100 --> 00:21:58.300
But anyway, a little bit before that,


00:21:58.300 --> 00:22:01.020
so we're talking in early seventies.


00:22:01.020 --> 00:22:05.180
So 75 to 77 was a game called Adventure


00:22:05.180 --> 00:22:07.720
and then there were Colossal Cave Adventure.


00:22:07.720 --> 00:22:10.520
So you can play Colossal Cave Adventure


00:22:10.520 --> 00:22:13.900
because Brandon Rhodes has Python Adventure.


00:22:13.900 --> 00:22:15.940
And this is just awesome.


00:22:15.940 --> 00:22:17.220
I played this the other day.


00:22:17.220 --> 00:22:21.740
It's so, well, I don't know, so fun maybe like overselling it


00:22:21.740 --> 00:22:23.420
but it's kind of neat.


00:22:23.420 --> 00:22:27.260
It's a faithful port of the adventure game to Python 3


00:22:27.260 --> 00:22:30.380
from the original 1977 Fortran code.


00:22:30.380 --> 00:22:31.220
- Wow.


00:22:31.220 --> 00:22:33.260
- Sounds awesome.


00:22:33.260 --> 00:22:34.780
So if I get distracted,


00:22:34.780 --> 00:22:36.460
it's because I've actually pip installed this


00:22:36.460 --> 00:22:38.420
and I'm playing it right now.


00:22:38.420 --> 00:22:40.420
- It's a lets you explore a colossal cave


00:22:40.420 --> 00:22:42.900
where others have found fortunes and treasure in gold.


00:22:42.900 --> 00:22:44.780
Though it is rumored that some who enter


00:22:44.780 --> 00:22:48.220
are never seen from again, like maybe Calvin.


00:22:48.220 --> 00:22:49.500
But one of the things that I loved


00:22:49.500 --> 00:22:50.580
is I played in both modes.


00:22:50.580 --> 00:22:53.900
So there's two modes you can play.


00:22:53.900 --> 00:22:56.820
In a Python console, you can just run it.


00:22:56.820 --> 00:22:58.620
But you can also--


00:22:58.620 --> 00:23:01.380
I'm going to show for the people watching


00:23:01.380 --> 00:23:02.780
what it looks like.


00:23:02.780 --> 00:23:05.580
You import Adventure, and then you say Adventure.play.


00:23:05.580 --> 00:23:08.060
And it gives you instructions, and you


00:23:08.060 --> 00:23:11.340
have to type things like east, west, get lamp,


00:23:11.340 --> 00:23:12.220
things like that.


00:23:12.220 --> 00:23:14.580
Oh, it's even function call style.


00:23:14.580 --> 00:23:16.660
Well, it's function call style if you


00:23:16.660 --> 00:23:18.780
do the import on the REPL.


00:23:18.780 --> 00:23:19.980
I see.


00:23:19.980 --> 00:23:22.540
If you go through the--


00:23:22.540 --> 00:23:24.140
- Oh, there's traditional mode, okay, got it.


00:23:24.140 --> 00:23:28.100
- The traditional mode is you do Python-M adventure,


00:23:28.100 --> 00:23:29.740
and then it's traditional mode.


00:23:29.740 --> 00:23:32.980
You say get lamp with a space between the get and the lamp.


00:23:32.980 --> 00:23:34.040
And that's how I played it.


00:23:34.040 --> 00:23:37.000
But the fun part about this, the traditional mode,


00:23:37.000 --> 00:23:38.740
it's a 1200 baud.


00:23:38.740 --> 00:23:43.140
So you have to wait for this to type its message to you.


00:23:43.140 --> 00:23:45.140
- You may have to explain that to some of our listeners.


00:23:45.140 --> 00:23:47.020
(both laughing)


00:23:47.020 --> 00:23:48.980
- I don't know if I can, it's slow.


00:23:48.980 --> 00:23:51.820
So it sort of ticker tapes out the message to you


00:23:51.820 --> 00:23:52.660
and you're waiting for it.


00:23:52.660 --> 00:23:54.500
- Yeah, wow, that's impressive.


00:23:54.500 --> 00:23:57.500
I used to be able to identify by sound


00:23:57.500 --> 00:23:59.820
the speed of the connection I would get.


00:23:59.820 --> 00:24:01.700
I could tell you is that 9,600,


00:24:01.700 --> 00:24:05.140
is it like 32, whatever, or is it 56?


00:24:05.140 --> 00:24:07.380
- And where the error correcting kicked in or not.


00:24:07.380 --> 00:24:08.220
- Yes, exactly.


00:24:08.220 --> 00:24:09.940
You hear it, (imitates beeping)


00:24:09.940 --> 00:24:12.380
but I don't think I even remember what that sounded like.


00:24:12.380 --> 00:24:14.060
That was some slow business.


00:24:14.060 --> 00:24:15.860
- One of the things, so, okay,


00:24:15.860 --> 00:24:19.420
So a little bit tie into my own personal nerdiness.


00:24:19.420 --> 00:24:22.700
I was curious how this related to Zork.


00:24:22.700 --> 00:24:26.300
So Zork, I never played either.


00:24:26.300 --> 00:24:28.380
It was a little bit after Adventure,


00:24:28.380 --> 00:24:32.420
but there was a TV show called Chuck that I really liked.


00:24:32.420 --> 00:24:35.460
And one of the premises is this Chuck and his buddy


00:24:35.460 --> 00:24:38.180
used to play this game and he met this other guy


00:24:38.180 --> 00:24:40.380
by both of them being Zork nerds.


00:24:40.380 --> 00:24:43.020
And they did their own port of Zork.


00:24:43.020 --> 00:24:45.340
And I'm like, is that a made up thing or real?


00:24:45.340 --> 00:24:46.740
And apparently it is real.


00:24:46.740 --> 00:24:51.740
The Zork was a follow on to Adventure from '77 to '79.


00:24:51.740 --> 00:24:55.240
So anyway, so I'm gonna ask Brandon.


00:24:55.240 --> 00:24:58.220
So Brandon, can we get a port of Zork also for Python?


00:24:58.220 --> 00:24:59.060
That'd be great.


00:24:59.060 --> 00:25:02.180
- And we'll get our little IoT devices


00:25:02.180 --> 00:25:04.380
that we can play these Adventure games on


00:25:04.380 --> 00:25:06.980
like a little Nintendo Switch, but super old school,


00:25:06.980 --> 00:25:08.660
like low baud rate, that'd be great.


00:25:08.660 --> 00:25:10.380
- Oh, I want this totally for my Oculus Quest


00:25:10.380 --> 00:25:13.020
so I can do a text adventure in full VR.


00:25:14.940 --> 00:25:18.940
- Well, the 1200 baud slowdown thing


00:25:18.940 --> 00:25:21.820
is entertaining for about 10 seconds.


00:25:21.820 --> 00:25:24.380
And then I'm like, can I get faster now?


00:25:24.380 --> 00:25:25.200
So.


00:25:25.200 --> 00:25:26.340
- Yeah, you had the true retro though.


00:25:26.340 --> 00:25:27.180
That was cool.


00:25:27.180 --> 00:25:28.260
Very nice. - That was cool.


00:25:28.260 --> 00:25:29.080
- Awesome.


00:25:29.080 --> 00:25:29.920
- All right.


00:25:29.920 --> 00:25:32.620
So for those of you who are Django nuts in the audience,


00:25:32.620 --> 00:25:35.780
there is a new long-term support release coming up


00:25:35.780 --> 00:25:37.940
for Django 3.2.


00:25:37.940 --> 00:25:40.340
- That's a big deal because long-term support ones


00:25:40.340 --> 00:25:41.340
are the ones you want.


00:25:41.340 --> 00:25:42.180
- Oh my gosh.


00:25:42.180 --> 00:25:43.660
And Django's community is really good


00:25:43.660 --> 00:25:48.140
that long-term support. I mean, and they have a very good security policy and release revision


00:25:48.140 --> 00:25:52.460
policy. It's very clear, very, very well documented. So the next one coming up, which is to be released


00:25:52.460 --> 00:25:57.980
here in April is going to be 3.2. This post specifically that I linked to is actually


00:25:57.980 --> 00:26:01.660
an overview of some highlights of interesting features that you may not have noticed. You can


00:26:01.660 --> 00:26:06.460
go read the main Django 3.2 release page and see kind of the overall new features are going to be


00:26:06.460 --> 00:26:10.940
coming in. But this post specifically covered some things that I thought were also interesting.


00:26:10.940 --> 00:26:14.400
A lot of them are performance and kind of protections


00:26:14.400 --> 00:26:16.820
against hurting yourself when you're programming.


00:26:16.820 --> 00:26:19.220
So things like covering indexes for Postgres,


00:26:19.220 --> 00:26:22.140
so you can actually avoid full table scans


00:26:22.140 --> 00:26:24.860
and do index scans and Postgres for kind of--


00:26:24.860 --> 00:26:25.940
- Indexes are magic.


00:26:25.940 --> 00:26:28.740
- Yeah, and so this is enabling even more


00:26:28.740 --> 00:26:31.780
of the nice magic of those indexes inside of Django.


00:26:31.780 --> 00:26:32.860
- Yeah, I think it's really cool


00:26:32.860 --> 00:26:35.860
that it's the LTS release, 3.2 is coming out.


00:26:35.860 --> 00:26:38.100
I think there's also some async and await stuff in here


00:26:38.100 --> 00:26:39.820
coming along, which is pretty exciting.


00:26:39.820 --> 00:26:44.620
I know that one of the areas that's still pending to get really the async and await stuff properly,


00:26:44.620 --> 00:26:47.420
like full stack is the ORM stuff.


00:26:47.420 --> 00:26:49.420
Yeah, because 3.2 was supposed to be...


00:26:49.420 --> 00:26:52.940
If you wait on the database, that's the thing you need async for more than anything else.


00:26:52.940 --> 00:26:56.540
Yeah, and that's kind of one of the notable missing items for me in 3.2.


00:26:56.540 --> 00:27:02.140
I mean, the team is doing an amazing job of implementing all the async features for Django.


00:27:02.140 --> 00:27:07.020
I mean, 3.0, 3.1, you started off with the routing, then you got the views.


00:27:07.020 --> 00:27:10.360
3.2 was supposed to be, I think, the ORM included,


00:27:10.360 --> 00:27:13.960
but maybe just due to the fact that we are talking about a long-term support release,


00:27:13.960 --> 00:27:17.060
that that was maybe too risky of a feature to get included here.


00:27:17.060 --> 00:27:20.200
But look for that coming soon, like in 3.3 or 3.4 for the ORM,


00:27:20.200 --> 00:27:21.840
which will be a big, big deal.


00:27:21.840 --> 00:27:24.240
The other things that are included in this 3.2 release,


00:27:24.240 --> 00:27:28.380
again, focusing on security and safety and performance,


00:27:28.380 --> 00:27:31.780
time zones, it's probably one of the two hardest things in programming


00:27:31.780 --> 00:27:35.120
is the time zones and character encoding and off-by-one errors.


00:27:35.120 --> 00:27:39.040
So there's going to be some trunk date stuff in here that actually helps you


00:27:39.040 --> 00:27:41.600
assign a default time zone in case you didn't put one.


00:27:41.600 --> 00:27:44.400
There's going to be some cool stuff for people who like unstructured data.


00:27:44.400 --> 00:27:48.720
The JSON object DB functions. So you'll actually be able to assign some DB functions that can


00:27:48.720 --> 00:27:55.840
produce JSON mapping type objects or key value pairs where you pass in database functions


00:27:55.840 --> 00:27:59.120
to operate on it. There's going to be some cool stuff around signals.


00:27:59.120 --> 00:28:04.480
There's a SYN robust which didn't log exceptions but now will, so you don't have to.


00:28:04.480 --> 00:28:06.720
- Are there themes for the admin section?


00:28:06.720 --> 00:28:07.880
Is that coming in this one?


00:28:07.880 --> 00:28:09.320
I know that's something they're working on.


00:28:09.320 --> 00:28:10.320
- I don't know on the themes,


00:28:10.320 --> 00:28:12.440
but I know for the admin section,


00:28:12.440 --> 00:28:14.400
and this is a common thing I've done in the admin,


00:28:14.400 --> 00:28:16.200
is sometimes you wanna put computed fields


00:28:16.200 --> 00:28:19.600
into the admin pages for like your objects.


00:28:19.600 --> 00:28:22.280
There's gonna be a new, what is it?


00:28:22.280 --> 00:28:24.160
There's a new value, not a value expression,


00:28:24.160 --> 00:28:25.600
of the display decorator.


00:28:25.600 --> 00:28:28.240
So you can actually make creating admin fields a lot cleaner.


00:28:28.240 --> 00:28:30.120
The kind of syntax for it previously


00:28:30.120 --> 00:28:33.040
was just a little convoluted if you were not used to it.


00:28:33.040 --> 00:28:35.920
And so as a new person, you may not have figured out how to do it very easily.


00:28:35.920 --> 00:28:38.880
So there's a new decorator that actually makes that super, super easy to do.


00:28:38.880 --> 00:28:42.000
There's some other performance things around the database with query sets with


00:28:42.000 --> 00:28:45.920
aliases. You can actually create reusable aliases for things that you're selecting


00:28:45.920 --> 00:28:49.800
against. So you can use them as like filters or like kind of combined statements.


00:28:49.800 --> 00:28:52.680
So it doesn't do two sub queries instead of just one.


00:28:52.680 --> 00:28:54.760
A lot of cool performance.


00:28:54.760 --> 00:28:58.800
And again, these were kind of the less notable but really kind of important features


00:28:58.800 --> 00:29:00.920
that are coming into Django 3.2.


00:29:02.200 --> 00:29:04.240
Yeah, and like so you can you can see all the other stuff.


00:29:04.240 --> 00:29:06.840
There's there's a zillion things coming up in three to these are just


00:29:06.840 --> 00:29:09.000
some of the small ones, but there's some important ones.


00:29:09.000 --> 00:29:11.340
That's yeah. When is this coming out?


00:29:11.340 --> 00:29:13.500
April. So we should see it next month. Very soon.


00:29:13.500 --> 00:29:15.440
Yeah. Awesome. That's great.


00:29:15.440 --> 00:29:17.540
If you're on Django, that sounds really like a big deal.


00:29:17.540 --> 00:29:19.540
It is. It is. It is. All right.


00:29:19.540 --> 00:29:23.040
Brian, anything else that you'd like to throw out?


00:29:23.040 --> 00:29:25.200
Those are all of our items. Anything extra?


00:29:25.200 --> 00:29:27.500
No, I don't have anything extra this week.


00:29:27.500 --> 00:29:28.080
How about you?


00:29:28.080 --> 00:29:30.680
Oh, I've got a couple of things I would like to touch on.


00:29:30.800 --> 00:29:32.080
I heard some amazing stuff.


00:29:32.080 --> 00:29:36.280
I heard that Python open source stuff is on Mars.


00:29:36.280 --> 00:29:36.880
>> Yeah.


00:29:36.880 --> 00:29:40.360
>> But what I want to say is, Python is on Mars?


00:29:40.360 --> 00:29:43.120
Because what I found is if you go look at,


00:29:43.120 --> 00:29:46.260
there's a thing called F prime that NASA open sourced.


00:29:46.260 --> 00:29:48.400
Awesome. If you go over here and you look at it,


00:29:48.400 --> 00:29:50.780
this is the flight control thing


00:29:50.780 --> 00:29:53.200
that is for embedded flying,


00:29:53.200 --> 00:29:54.560
including that little helicopter.


00:29:54.560 --> 00:29:59.880
Awesome. It has 16 percent Python and 44 percent C++.


00:29:59.880 --> 00:30:01.400
But if you look at the Python bits,


00:30:01.400 --> 00:30:04.760
so much of it seems to be around the,


00:30:04.760 --> 00:30:06.240
like the training pipeline.


00:30:06.240 --> 00:30:09.120
So my theory is, I didn't see any stuff


00:30:09.120 --> 00:30:11.120
in like the real, like running regular bits.


00:30:11.120 --> 00:30:14.480
I'm thinking maybe it's framed with Python locally


00:30:14.480 --> 00:30:16.160
and then the models are put on the helicopter


00:30:16.160 --> 00:30:17.800
and flown with C++.


00:30:17.800 --> 00:30:21.560
If somebody knows for sure that Python is on Mars,


00:30:21.560 --> 00:30:23.520
you know, with details, let me know.


00:30:23.520 --> 00:30:24.360
That'd be awesome.


00:30:24.360 --> 00:30:25.180
- Oh yeah.


00:30:25.180 --> 00:30:26.640
- I still think it's cool that Python's involved here.


00:30:26.640 --> 00:30:27.480
Yeah.


00:30:27.480 --> 00:30:28.300
All right, so that's one quick one.


00:30:28.300 --> 00:30:30.100
Number two, just released a new course.


00:30:30.100 --> 00:30:31.700
And this one is a little different.


00:30:31.700 --> 00:30:34.700
So it's a full web apps with fast API


00:30:34.700 --> 00:30:37.220
and fast API is awesome for building APIs,


00:30:37.220 --> 00:30:39.740
but there's like three or four features of fast API


00:30:39.740 --> 00:30:41.580
when put together in the right combination,


00:30:41.580 --> 00:30:44.340
make it sort of a equivalent framework


00:30:44.340 --> 00:30:45.660
to what you would get with Flask.


00:30:45.660 --> 00:30:46.500
So if you're thinking,


00:30:46.500 --> 00:30:48.940
I would love to use this beautiful API


00:30:48.940 --> 00:30:50.700
with really nice decorators,


00:30:50.700 --> 00:30:52.420
with really nice async support,


00:30:52.420 --> 00:30:55.100
with Pydantic and all those awesome things that it has,


00:30:55.100 --> 00:30:57.100
but I wanna build a web app with it.


00:30:57.100 --> 00:30:58.460
Well, we've launched a course on that


00:30:58.460 --> 00:30:59.300
that people can check that out.


00:30:59.300 --> 00:31:00.120
That's really awesome.


00:31:00.120 --> 00:31:02.700
Like basically, I've built some APIs with FastAPI


00:31:02.700 --> 00:31:04.700
and I need like four or five more pages


00:31:04.700 --> 00:31:05.780
to round out the app.


00:31:05.780 --> 00:31:09.580
Do I have to have a Django plus FastAPI multi-deploy thing?


00:31:09.580 --> 00:31:10.620
Like, no, actually.


00:31:10.620 --> 00:31:12.220
And this is all about how do you do that.


00:31:12.220 --> 00:31:13.380
So people can check that out.


00:31:13.380 --> 00:31:14.220
That's fun.


00:31:14.220 --> 00:31:15.040
- Super excited about that.


00:31:15.040 --> 00:31:15.880
That's cool.


00:31:15.880 --> 00:31:16.720
- Yeah, thanks.


00:31:16.720 --> 00:31:19.340
Over on Talk Python, I'm giving away five tickets to PyCon.


00:31:19.340 --> 00:31:20.980
One a week for five weeks.


00:31:20.980 --> 00:31:24.600
So if people want to win a free ticket to PyCon,


00:31:24.600 --> 00:31:26.580
this year it's virtual, so you can attend from anywhere.


00:31:26.580 --> 00:31:29.240
not the challenge of, well, I got the ticket, but I need the thousand dollars


00:31:29.240 --> 00:31:29.940
for the hotel, right?


00:31:29.940 --> 00:31:31.160
Like that's not a problem this year.


00:31:31.160 --> 00:31:32.340
So I think it's really cool.


00:31:32.340 --> 00:31:35.020
I did run a thing on a contest on that.


00:31:35.020 --> 00:31:36.180
The link is in the show notes.


00:31:36.180 --> 00:31:40.020
Uh, we got a couple of questions saying, Hey, we, we heard about this live stream


00:31:40.020 --> 00:31:41.180
cause we're listening to the podcast.


00:31:41.180 --> 00:31:42.480
How do we get to this live stream?


00:31:42.480 --> 00:31:43.160
This is awesome.


00:31:43.160 --> 00:31:44.060
I think it's fun, right?


00:31:44.060 --> 00:31:45.340
I'm enjoying doing the live stream.


00:31:45.340 --> 00:31:45.840
What do you think?


00:31:45.840 --> 00:31:47.160
Yeah, it makes it a lot more fun.


00:31:47.160 --> 00:31:47.600
Yeah.


00:31:47.600 --> 00:31:50.580
We get, we get our listeners who come in and give us comments


00:31:50.580 --> 00:31:51.360
and all this stuff is great.


00:31:51.360 --> 00:31:55.340
So if you just go to Python by set FM slash YouTube, right at the top, there'll


00:31:55.340 --> 00:31:59.300
be upcoming live streams, as you can say, click the button to remind me of it and so


00:31:59.300 --> 00:32:00.300
on.


00:32:00.300 --> 00:32:02.980
So that's how you do that last thing I was on.


00:32:02.980 --> 00:32:08.220
I got a chance to talk to the medical community and the medical research community around


00:32:08.220 --> 00:32:11.860
Python over on this podcast called the finding genius podcast.


00:32:11.860 --> 00:32:15.700
And it was just a lot of fun to speak about the advantages of Python for like medical


00:32:15.700 --> 00:32:18.140
researchers and folks like that.


00:32:18.140 --> 00:32:20.180
So I'll link to that podcast as well.


00:32:20.180 --> 00:32:21.180
Yeah.


00:32:21.180 --> 00:32:22.180
Calvin, anything else you want to throw out?


00:32:22.180 --> 00:32:23.180
I know you, I do.


00:32:23.180 --> 00:32:24.940
I wore your I wore my shirt.


00:32:24.940 --> 00:32:27.180
I know you're fully outfitted.


00:32:27.180 --> 00:32:28.780
So I've actually got two things.


00:32:28.780 --> 00:32:33.420
One before I get to Python web conference, the DjangoCon Europe 2021 call for papers is open


00:32:33.420 --> 00:32:34.860
until April 1st.


00:32:34.860 --> 00:32:39.260
So if you're interested in talking at DjangoCon Europe, it'll be a pretty worldwide conference.


00:32:39.260 --> 00:32:40.940
It was last year is a lot of fun.


00:32:40.940 --> 00:32:43.900
We actually did it on the same platform as we did the Python web conference, which is the


00:32:43.900 --> 00:32:46.220
other thing I wanted to mention in the extras.


00:32:46.220 --> 00:32:51.580
So Python web conf 2021 is coming up in about, well, it'll be a week or so after you probably


00:32:51.580 --> 00:32:54.840
I hear this March 22nd through the 26th.


00:32:54.840 --> 00:32:56.920
We've got an awesome lineup this year again,


00:32:56.920 --> 00:32:58.400
even better than last year.


00:32:58.400 --> 00:33:01.720
Michael's obviously back and be speaking at the conference.


00:33:01.720 --> 00:33:05.240
We've got about 60 speakers, almost 20% women.


00:33:05.240 --> 00:33:07.200
There's 43 new speakers this year.


00:33:07.200 --> 00:33:08.880
- It's like five, yeah, it's like four or five days


00:33:08.880 --> 00:33:10.360
or something, it's a big conference.


00:33:10.360 --> 00:33:12.200
- Yeah, it's five days, but we're doing half days.


00:33:12.200 --> 00:33:14.240
So you don't have to consume your whole day


00:33:14.240 --> 00:33:15.800
with being in a virtual conference.


00:33:15.800 --> 00:33:17.720
'Cause we understand that that is just hard.


00:33:17.720 --> 00:33:20.600
I think we're all adjusting to what virtual conferences


00:33:20.600 --> 00:33:21.760
really kind of should be.


00:33:21.760 --> 00:33:24.040
So this is a new experiment, which got four tracks.


00:33:24.040 --> 00:33:25.680
There's App Dev, PyData.


00:33:25.680 --> 00:33:27.160
It's an official PyData track.


00:33:27.160 --> 00:33:29.120
There's a Cloud track and a Culture track.


00:33:29.120 --> 00:33:31.240
So if there's nothing you're interested in,


00:33:31.240 --> 00:33:33.400
I would be hard pressed to believe that.


00:33:33.400 --> 00:33:36.080
There are tickets for $1.99 for professional, $1.99


00:33:36.080 --> 00:33:36.800
for student.


00:33:36.800 --> 00:33:39.760
And we do have our grant program back again this year.


00:33:39.760 --> 00:33:42.520
So we are doing offering up grants


00:33:42.520 --> 00:33:45.880
for those who-- we want anybody who wants to truly attend


00:33:45.880 --> 00:33:49.680
to be able to, no matter what the financial piece may be.


00:33:49.680 --> 00:33:52.880
So check out the grant program for everyone who buys tickets.


00:33:52.880 --> 00:33:55.040
We offer up grants for those who can't afford tickets.


00:33:55.040 --> 00:33:56.320
And I'm really excited about that.


00:33:56.320 --> 00:33:59.400
You can check that out at pythonwebconf.com.


00:33:59.400 --> 00:34:00.720
Yeah, it's gonna be a ton of fun.


00:34:00.720 --> 00:34:02.160
It was a lot of fun last year.


00:34:02.160 --> 00:34:03.920
We got a bunch of social events planned


00:34:03.920 --> 00:34:05.440
and some really awesome sponsors.


00:34:05.440 --> 00:34:07.320
And I'm just super excited about being able


00:34:07.320 --> 00:34:09.240
to produce something like this for the Python community.


00:34:09.240 --> 00:34:11.240
I feel like the web is an area


00:34:11.240 --> 00:34:12.880
that doesn't always get the attention it should


00:34:12.880 --> 00:34:13.980
in some other conferences,


00:34:13.980 --> 00:34:16.060
and we're hopefully fulfilling that.


00:34:16.060 --> 00:34:16.900
- Yeah, super cool.


00:34:16.900 --> 00:34:17.920
It was a good conference last year,


00:34:17.920 --> 00:34:19.840
So I'm looking forward to being part of this year.


00:34:19.840 --> 00:34:20.680
- Well, I appreciate that, yeah.


00:34:20.680 --> 00:34:22.400
- Yeah, Brian and I were just on a virtual conference


00:34:22.400 --> 00:34:25.400
at PyCascades, which was a lot of cool fun.


00:34:25.400 --> 00:34:27.240
We were on that panel about podcasting.


00:34:27.240 --> 00:34:28.060
- Yeah, that was great.


00:34:28.060 --> 00:34:30.520
You all might know a thing or two about that.


00:34:30.520 --> 00:34:32.400
- We've done it once or twice.


00:34:32.400 --> 00:34:34.000
I'm not sure I would laugh at it, but maybe a joke.


00:34:34.000 --> 00:34:34.840
We could laugh at a joke.


00:34:34.840 --> 00:34:35.660
What do you guys think?


00:34:35.660 --> 00:34:36.500
- Yeah. - Yeah.


00:34:36.500 --> 00:34:40.040
- All right, so I know we got like two rounds of jokes,


00:34:40.040 --> 00:34:44.400
but let's do another round of these comments.


00:34:44.400 --> 00:34:45.440
- I'm already laughing.


00:34:45.440 --> 00:34:46.520
- I know, they're so good.


00:34:46.520 --> 00:34:49.560
So I'll do the first one, Brian, you do the next one,


00:34:49.560 --> 00:34:50.400
Calvin, you do the next one,


00:34:50.400 --> 00:34:52.720
we'll just kinda, we got five or six, something like that.


00:34:52.720 --> 00:34:54.840
So it's important to comment your code.


00:34:54.840 --> 00:34:57.420
There's this code, I believe it's Java,


00:34:57.420 --> 00:35:00.620
and it's part of a class that says private logger,


00:35:00.620 --> 00:35:03.000
capital L class logger, variable name logger,


00:35:03.000 --> 00:35:06.440
equals logger class factory method dot get logger.


00:35:06.440 --> 00:35:09.200
So private logger logger equals logger dot get logger.


00:35:09.200 --> 00:35:10.600
What does the comment say?


00:35:10.600 --> 00:35:11.440
- Logger.


00:35:11.440 --> 00:35:12.880
- Quote, yeah, just logger.


00:35:12.880 --> 00:35:14.120
This is a logger.


00:35:14.120 --> 00:35:16.320
Fantastic, you've passed your code review.


00:35:16.320 --> 00:35:18.320
Yes, I guess you have comments.


00:35:18.320 --> 00:35:19.160
- Yeah.


00:35:19.160 --> 00:35:20.360
- All right, Brian, what's the next one?


00:35:20.360 --> 00:35:22.320
- Next one looks like C++ comments,


00:35:22.320 --> 00:35:25.120
but comment this block that says,


00:35:25.120 --> 00:35:28.680
this is black magic from some stack overflow link.


00:35:28.680 --> 00:35:30.520
Don't play with magic, it can bite.


00:35:30.520 --> 00:35:32.680
(both laughing)


00:35:32.680 --> 00:35:33.520
- Nice.


00:35:33.520 --> 00:35:35.000
All right, Calvin, what do we got next?


00:35:35.000 --> 00:35:38.360
- Well, this one obviously is a Python comment in the code.


00:35:38.360 --> 00:35:40.480
It says, "For the sins I am about to commit,


00:35:40.480 --> 00:35:42.400
"may Guido van Rossem forgive me."


00:35:42.400 --> 00:35:43.360
(Garrett laughing)


00:35:43.360 --> 00:35:44.560
- Yes. - I love it.


00:35:44.560 --> 00:35:45.940
- Which I would be hard pressed to know


00:35:45.940 --> 00:35:46.900
what they're getting ready to commit.


00:35:46.900 --> 00:35:48.460
If they read this in a Python,


00:35:48.460 --> 00:35:50.060
they really should know the guidance already.


00:35:50.060 --> 00:35:51.580
- Yeah. - Yeah, yeah.


00:35:51.580 --> 00:35:53.420
Maybe they put a semicolon in there, I don't know.


00:35:53.420 --> 00:35:55.940
(laughing)


00:35:55.940 --> 00:35:59.440
The next one is, remove this if you want to be fired.


00:35:59.440 --> 00:36:02.900
- Remove the comment or the code below it?


00:36:02.900 --> 00:36:03.900
We don't know.


00:36:03.900 --> 00:36:04.740
- We don't know. - We don't know this.


00:36:04.740 --> 00:36:05.900
- We don't know.


00:36:05.900 --> 00:36:10.700
- Next is a try except block or a catching exception


00:36:10.700 --> 00:36:11.980
with just a comment and it says,


00:36:11.980 --> 00:36:13.480
"Houston, we have a problem."


00:36:13.480 --> 00:36:15.580
There's no code there though,


00:36:15.580 --> 00:36:17.300
So you're just, yes, we do have a problem.


00:36:17.300 --> 00:36:18.900
You're just catching a raw exception.


00:36:18.900 --> 00:36:19.740
Don't do that.


00:36:19.740 --> 00:36:21.300
- Exactly, exactly.


00:36:21.300 --> 00:36:22.140
All right, what's the last one?


00:36:22.140 --> 00:36:26.060
- All right, the last one here is a definition


00:36:26.060 --> 00:36:28.180
of int get random number.


00:36:28.180 --> 00:36:31.900
And the body of the function is return four.


00:36:31.900 --> 00:36:33.100
And the comment says,


00:36:33.100 --> 00:36:36.380
chosen by fair dice roll guaranteed to be random.


00:36:36.380 --> 00:36:38.140
(both laughing)


00:36:38.140 --> 00:36:38.980
- If you want.


00:36:38.980 --> 00:36:40.300
- Was this a real code someplace?


00:36:40.300 --> 00:36:41.340
I mean, come on.


00:36:41.340 --> 00:36:43.340
- Yeah, oh, there's all sorts of good ones here.


00:36:43.340 --> 00:36:44.460
Yeah, they're beautiful.


00:36:44.460 --> 00:36:46.780
One of them that's not on the list,


00:36:46.780 --> 00:36:49.220
the comment is just, "I need to find a better job."


00:36:49.220 --> 00:36:50.340
(laughing)


00:36:50.340 --> 00:36:51.940
All right, one more.


00:36:51.940 --> 00:36:53.260
Who put this one in here?


00:36:53.260 --> 00:36:55.460
- I put that in there.


00:36:55.460 --> 00:36:57.220
- Okay, tell us about this one.


00:36:57.220 --> 00:36:59.100
- I'm kind of a card nut.


00:36:59.100 --> 00:37:01.260
So if you kind of exactly hover over


00:37:01.260 --> 00:37:03.020
just the first half of the picture,


00:37:03.020 --> 00:37:06.100
you see a guy in a Ferrari waving and says--


00:37:06.100 --> 00:37:07.780
- Yeah, maybe roll it in the Ferrari.


00:37:07.780 --> 00:37:09.980
- Says, "Using Linux," and then dot, dot, dot.


00:37:09.980 --> 00:37:12.900
"In Windows with WSL," and if you scroll down,


00:37:12.900 --> 00:37:15.660
you see that the Ferrari is actually on a tow truck


00:37:15.660 --> 00:37:18.440
flatbed being driven someplace.


00:37:18.440 --> 00:37:21.420
- And the guy's in it, yeah, like as if he's driving.


00:37:21.420 --> 00:37:22.260
That's right.


00:37:22.260 --> 00:37:23.080
- He's cool.


00:37:23.080 --> 00:37:24.380
- Very cool, very cool.


00:37:24.380 --> 00:37:25.220
- That's funny.


00:37:25.220 --> 00:37:28.060
- I'm glad ZDax that you guys like the jokes out there


00:37:28.060 --> 00:37:30.220
and Dean as well.


00:37:30.220 --> 00:37:33.220
- Yeah, I mean, I commented in the chat


00:37:33.220 --> 00:37:36.460
that you can increase your odds at winning the Picon tickets


00:37:36.460 --> 00:37:38.020
by laughing at the jokes.


00:37:38.020 --> 00:37:38.860
- Yeah, absolutely.


00:37:38.860 --> 00:37:41.500
We'll put you in there twice if you laugh last for sure.


00:37:41.500 --> 00:37:42.340
That's how it works.


00:37:42.340 --> 00:37:44.140
like the dad jokes of programming here.


00:37:44.140 --> 00:37:45.980
- Oh yeah. - Of course, yeah.


00:37:45.980 --> 00:37:47.100
- We're all dads. - That's like half our show.


00:37:47.100 --> 00:37:49.580
That's half our show. - Yeah, we all qualify.


00:37:49.580 --> 00:37:50.460
- For sure, for sure.


00:37:50.460 --> 00:37:53.300
All right, well, Brian, thanks for being here as always.


00:37:53.300 --> 00:37:55.140
And Calvin, thanks for joining us.


00:37:55.140 --> 00:37:56.380
- My pleasure, I really enjoyed it.


00:37:56.380 --> 00:37:57.380
- Yeah, good luck on your conference

