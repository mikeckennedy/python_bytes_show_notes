WEBVTT

00:00:00.001 --> 00:00:04.640
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.640 --> 00:00:08.900
This is episode 224, recorded March 10th, 2021.

00:00:08.900 --> 00:00:10.020
I'm Michael Kennedy.

00:00:10.020 --> 00:00:11.100
And I'm Brian Okken.

00:00:11.100 --> 00:00:12.640
And I'm Calvin Hendryx-Parker.

00:00:12.640 --> 00:00:15.100
Hey, we have a special guest, Calvin. Welcome to the show.

00:00:15.100 --> 00:00:16.080
Hey, thanks for having me.

00:00:16.080 --> 00:00:18.260
Yeah, it's fantastic to have you here.

00:00:18.260 --> 00:00:20.020
Always great to have a fresh face.

00:00:20.020 --> 00:00:23.180
I believe it's been about a year since you were on the show previously.

00:00:23.180 --> 00:00:23.600
Is that right?

00:00:23.600 --> 00:00:25.220
I think almost exactly a year, yes.

00:00:25.540 --> 00:00:31.960
Yeah, YouTube reminded me that it was one of the first videos of this whole Python Bytes that we put up there.

00:00:31.960 --> 00:00:34.180
Before we were live streaming, we'd record it and then put it up.

00:00:34.180 --> 00:00:35.840
That was so last year.

00:00:35.840 --> 00:00:38.360
I know. I mean, Python Bytes, you guys have really upped your game.

00:00:38.360 --> 00:00:39.620
I'm super proud of y'all.

00:00:39.620 --> 00:00:40.500
Yeah, it's so 2020.

00:00:40.500 --> 00:00:41.780
Yeah, yeah, yeah.

00:00:41.780 --> 00:00:45.200
We got our broadcast studio working right here in Portland, Oregon.

00:00:45.200 --> 00:00:46.540
Super, super nice.

00:00:46.540 --> 00:00:49.600
Speaking of nice, I want to do a follow-up.

00:00:49.600 --> 00:00:54.140
You know, what's nice, Brian, is so often our guests, they send us all these items.

00:00:54.640 --> 00:00:58.800
And, you know, we'll mention something and we'll think this is like the first time I've heard of this.

00:00:58.800 --> 00:01:01.640
And they're like, and here's the 10 other amazing things that you've never heard of.

00:01:01.640 --> 00:01:01.940
Yes.

00:01:01.940 --> 00:01:04.900
And so this is a little bit of a follow-up along that.

00:01:04.900 --> 00:01:09.600
Before actually, I realized before I get into that though, Calvin, maybe you want to just do a quick, who are you?

00:01:09.600 --> 00:01:10.500
It has been a year.

00:01:10.500 --> 00:01:11.420
It has been a year.

00:01:11.420 --> 00:01:13.100
Everyone's going to remember who you are.

00:01:13.100 --> 00:01:13.760
Sure, sure.

00:01:13.760 --> 00:01:14.620
I'm Calvin Hundix Parker.

00:01:14.620 --> 00:01:16.340
I'm co-founder and CTO of Six Feet Up.

00:01:16.340 --> 00:01:21.100
And I'm also the co-founder of the IndiePy group here in Indianapolis, the Python user group.

00:01:21.320 --> 00:01:24.660
And we are also the organizers of the Python web conference, which I'll talk about later.

00:01:24.660 --> 00:01:26.320
So that's kind of a quick rundown of me.

00:01:26.320 --> 00:01:28.300
You're that company that hands out Python jersey shirts.

00:01:28.300 --> 00:01:28.780
Oh, yeah.

00:01:28.780 --> 00:01:30.280
We do some killer swag.

00:01:30.280 --> 00:01:31.140
Yeah, yeah, for sure.

00:01:31.140 --> 00:01:32.160
That's a cool conference.

00:01:32.160 --> 00:01:34.100
Be fun to talk about that in a little bit.

00:01:34.100 --> 00:01:39.080
So the first thing, though, that I do want to talk about over here is AWS Simple.

00:01:39.080 --> 00:01:43.080
We talked about Boto-type definitions, I think it was.

00:01:43.080 --> 00:01:48.120
And then someone mentioned that Boto-type definitions has kind of been deprecated, ignored, and so on.

00:01:48.120 --> 00:01:53.280
And so they pointed us at this mypy live generated version that we talked about last week.

00:01:53.280 --> 00:02:02.100
And also, we got a message from James Abel, who said, hey, I built this cool library called AWS Simple.

00:02:02.100 --> 00:02:05.880
And I got it all flowed together to get all the S's to fit in there, AWS Simple.

00:02:05.920 --> 00:02:12.260
And the idea is that it's a typed wrapper around the AWS API.

00:02:12.260 --> 00:02:15.940
And if you recall, I kind of was harsh on the Boto 3 API.

00:02:15.940 --> 00:02:19.980
And I can buy that because there's just zero discoverability on how it works.

00:02:19.980 --> 00:02:22.800
There's like inconsistencies on how you pass parameters.

00:02:22.800 --> 00:02:24.320
Sometimes you pass them by name.

00:02:24.320 --> 00:02:27.020
Sometimes you pass them as dictionaries with names in the dictionary.

00:02:27.020 --> 00:02:28.700
Just a lot of stuff going on there.

00:02:28.700 --> 00:02:30.080
And it's really not discoverable.

00:02:30.080 --> 00:02:34.900
And so this one also is one of those libraries that's meant to help with that.

00:02:34.900 --> 00:02:45.200
So it's a simple API for basic services like S3, DynamoDB, their hosted NoSQL database, simple notification service, simple queuing service.

00:02:45.200 --> 00:02:49.880
I don't know if you guys have been to AWS lately, but you go to your console and it says, here's the two things you've recently visited.

00:02:49.880 --> 00:02:50.760
See the rest.

00:02:50.760 --> 00:02:52.640
And it like, it scrolls.

00:02:52.640 --> 00:02:53.420
There's a lot.

00:02:53.500 --> 00:02:58.020
So this is clearly not everything, but it is some common ones, especially around S3, I think.

00:02:58.020 --> 00:03:00.500
And it's also maybe the kernel of other things, right?

00:03:00.500 --> 00:03:03.280
People often ask me, hey, what project could I contribute to?

00:03:03.280 --> 00:03:06.780
Well, if you're like, I would really love to have simple email service integrated with this.

00:03:06.780 --> 00:03:10.320
Like, well, you know, it probably is easy to add like one more service.

00:03:10.320 --> 00:03:22.360
So some of the features include a nice object oriented API on top of Boto 3 with proper type definitions and classes and static things that all the static type checkers and the editors all know about and love.

00:03:22.360 --> 00:03:27.020
You can write a really simple, like one liners to do S3, read, write, deletes.

00:03:27.020 --> 00:03:29.280
It has automatic retry for S3.

00:03:29.280 --> 00:03:30.220
It has caching.

00:03:30.220 --> 00:03:36.000
So for example, it will, when you get a file or upload a file, it will hash that result.

00:03:36.000 --> 00:03:41.020
And basically if you try to get it again, it'll say, let me check the E tag.

00:03:41.020 --> 00:03:44.020
That's the way web browsers and servers exchange.

00:03:44.020 --> 00:03:47.020
Like here's the sort of history or the version of the file.

00:03:47.020 --> 00:03:49.540
And it'll check, has this thing changed or not?

00:03:49.540 --> 00:03:52.660
And so it'll not download the S3 file if it hasn't changed.

00:03:52.660 --> 00:03:55.700
And you ask, it'll just use like the last version that got since it touched it.

00:03:55.700 --> 00:03:56.440
Things like that.

00:03:56.440 --> 00:04:00.800
Some DynamoDB full table scans, secondary indexes and pagination.

00:04:01.040 --> 00:04:04.280
So there's some simple examples like my S3 access.

00:04:04.280 --> 00:04:11.500
And then maybe if you could do DynamoDB, create a DynamoDB access and just put an item or get an item.

00:04:11.500 --> 00:04:12.480
And off it goes.

00:04:12.480 --> 00:04:13.240
Really, really simple.

00:04:13.240 --> 00:04:16.620
You know, as you would imagine something with a name like AWS Simple has.

00:04:16.620 --> 00:04:21.200
But, you know, it's just one more thing around AWS APIs that I think is pretty interesting.

00:04:21.200 --> 00:04:21.820
What do you guys think?

00:04:21.820 --> 00:04:29.560
I kind of expected a bullet to bury in there saying AWS Simple is not simple because this is a massive undertaking to try and make something like this simple.

00:04:29.560 --> 00:04:30.360
Yeah, absolutely.

00:04:30.360 --> 00:04:31.440
I totally agree with that.

00:04:31.440 --> 00:04:32.940
I mean, it's pretty neat.

00:04:32.940 --> 00:04:38.500
Over in their documentation, they've got a little more examples and a quick start guide and how to use it and so on.

00:04:38.500 --> 00:04:40.380
But yeah, it's pretty easy.

00:04:40.380 --> 00:04:43.940
You just do like S3, create bucket, S3, write string to this key.

00:04:43.940 --> 00:04:44.440
Go on.

00:04:44.440 --> 00:04:45.260
It's quite easy.

00:04:45.260 --> 00:04:50.180
So if you're struggling with the AWS APIs, this is the cool project.

00:04:50.180 --> 00:04:53.500
And again, I think it's pretty limited to just a couple of the services.

00:04:53.500 --> 00:04:59.000
So it's somewhere that if you've got your favorite service and you want something like this for it, you know, reach out, James, and add it.

00:04:59.000 --> 00:05:00.780
Yeah, and all of the services could be added.

00:05:00.780 --> 00:05:03.940
And then AWS Simple could be as complex as everything else.

00:05:03.940 --> 00:05:04.840
Exactly.

00:05:04.840 --> 00:05:07.120
Like I can barely install this thing anymore.

00:05:07.120 --> 00:05:08.080
It's really legit.

00:05:09.080 --> 00:05:15.840
Yeah, they're trying to become the AWS APIs for humans, kind of like requests for HTTP, URLib.

00:05:15.840 --> 00:05:16.520
Yeah, maybe.

00:05:16.520 --> 00:05:18.820
I mean, Boto3 was kind of like that too, right?

00:05:18.820 --> 00:05:22.400
Well, again, the S3 APIs, they've changed names.

00:05:22.400 --> 00:05:23.080
They're inconsistent.

00:05:23.080 --> 00:05:24.400
It's really hard to like parse.

00:05:24.400 --> 00:05:28.020
Sometimes as a human, like the uploading process of like multi-part uploads.

00:05:28.020 --> 00:05:30.600
If you're not into the web, this could be really daunting.

00:05:30.600 --> 00:05:34.820
Sounds like this is a great way to enter this space and not have to learn all that stuff.

00:05:34.820 --> 00:05:36.140
I can't just do this thing.

00:05:36.140 --> 00:05:39.180
I got to create a waiter and I got to wait on the thing and so on.

00:05:39.180 --> 00:05:39.680
Yeah, absolutely.

00:05:39.680 --> 00:05:45.900
Dean Langsom up there in the live stream said, it's amazing to me how many of the most accessed

00:05:45.900 --> 00:05:48.720
APIs in the world need third-party packages to make them useful.

00:05:48.720 --> 00:05:49.120
Yeah.

00:05:49.120 --> 00:05:53.280
I mean, if it weren't such a small little rinky-dink company, if they could hire a bunch of developers

00:05:53.280 --> 00:05:55.380
to work on this, like, oh, wait, no, it's Amazon.

00:05:55.380 --> 00:05:57.260
No, I totally agree with you, Dean.

00:05:57.260 --> 00:05:57.900
That's funny.

00:05:57.900 --> 00:05:58.480
All right.

00:05:58.480 --> 00:05:59.340
Yeah.

00:05:59.340 --> 00:06:01.440
So AWS Simple, check it out if that appeals to you.

00:06:01.440 --> 00:06:02.980
Brian, what you got for us?

00:06:02.980 --> 00:06:06.120
Well, I was going to, how do we do this?

00:06:06.120 --> 00:06:06.800
Oh, yep.

00:06:06.800 --> 00:06:07.580
We both clicked.

00:06:07.580 --> 00:06:08.180
Sorry about that.

00:06:08.180 --> 00:06:09.420
It was a race car.

00:06:09.420 --> 00:06:13.380
So I learned something new the other day.

00:06:13.380 --> 00:06:15.660
And I learned something new about something old.

00:06:15.880 --> 00:06:22.040
So I've used coverage.py a lot over the past several years.

00:06:22.040 --> 00:06:26.780
And I've even covered it a lot on the Test and Code podcast a couple times.

00:06:26.780 --> 00:06:28.960
Covered it on the podcast.

00:06:28.960 --> 00:06:29.420
Yep.

00:06:29.420 --> 00:06:30.740
That's a meta joke.

00:06:30.740 --> 00:06:33.920
Anyway, there's something I missed the whole time.

00:06:33.920 --> 00:06:36.380
So there's a source thing.

00:06:36.380 --> 00:06:40.940
So you can tell coverage where the source code is, where the source is for your, whatever you're

00:06:40.940 --> 00:06:41.260
covering.

00:06:41.260 --> 00:06:50.320
And hidden in here is the source can be, the source is either directories or packages.

00:06:50.320 --> 00:06:53.140
It's the or packages I never saw before.

00:06:53.140 --> 00:06:54.480
Oh, that's cool.

00:06:54.480 --> 00:06:58.500
So why this is significant, and apparently this has been here the whole time, and I just missed

00:06:58.500 --> 00:07:01.200
it, is there was a workaround.

00:07:01.200 --> 00:07:06.200
So if I, if I'm testing, if I've got, if I'm developing a package and I want to test

00:07:06.200 --> 00:07:09.500
it as an installed package, I install it.

00:07:09.500 --> 00:07:12.020
And then I run the tests against the installed package.

00:07:12.020 --> 00:07:14.000
But how do I run coverage against that?

00:07:14.000 --> 00:07:22.860
And there was an old trick to, and it, I guess it still is works, is to use the paths option

00:07:22.860 --> 00:07:26.480
within coverage to say these two paths are identical.

00:07:26.480 --> 00:07:32.200
So you could say the actual source code directory is identical to the site packages directory

00:07:32.200 --> 00:07:36.840
so that it, it, it kind of lines everything up and then it reports, even though it's measuring

00:07:36.840 --> 00:07:42.220
the coverage on the installed package, it reports it as if it was sitting in the source directory.

00:07:42.220 --> 00:07:44.100
And so I've been doing that in the past.

00:07:44.100 --> 00:07:49.860
And that still is a good idea so that the output is readable, but it isn't required.

00:07:49.860 --> 00:07:55.360
You can just pass in the name of your package without the dot PI or anything, or if it's

00:07:55.360 --> 00:07:59.000
just a file, but just the name of the package and it just reports it.

00:07:59.000 --> 00:08:04.040
And yeah, anyway, I just figured that maybe some people out there have missed that also.

00:08:04.040 --> 00:08:05.300
It's very handy.

00:08:05.300 --> 00:08:07.680
Well, you might wonder like, why are you testing packages?

00:08:07.680 --> 00:08:10.700
I don't need the coverage of requests when I use it.

00:08:10.700 --> 00:08:12.260
I just know that I use it and we're all good.

00:08:12.260 --> 00:08:15.280
Well, if you're developing requests, you might want to come.

00:08:15.400 --> 00:08:16.560
Yes, exactly.

00:08:16.560 --> 00:08:23.260
Or, you know, it may well be that you're building your application out of several packages that

00:08:23.260 --> 00:08:26.920
you control and you kind of want to keep them separate for reuse, but you might also want

00:08:26.920 --> 00:08:29.580
to know like how much am I interacting with that one, right?

00:08:29.580 --> 00:08:34.160
Oh, that's a cool use to say really what, how, how much am I interacting with the package?

00:08:34.160 --> 00:08:35.740
You could run coverage on that.

00:08:35.740 --> 00:08:35.960
Yeah.

00:08:35.960 --> 00:08:38.180
If it's zero, take it out of your requirements.

00:08:38.180 --> 00:08:40.080
That would be super nice.

00:08:40.080 --> 00:08:41.260
Yeah.

00:08:41.260 --> 00:08:42.420
This is really cool.

00:08:42.420 --> 00:08:42.860
Yeah.

00:08:42.860 --> 00:08:47.980
Also, I guess when one of the reasons why that might be handy is if, if they change,

00:08:47.980 --> 00:08:53.880
drastically change an API, like go to a new dot, you know, like a three dot something to

00:08:53.880 --> 00:08:54.600
four dot something.

00:08:54.600 --> 00:08:56.520
What is the API change?

00:08:56.520 --> 00:09:01.160
And you could check to see if you're even using that API or that entry point.

00:09:01.160 --> 00:09:01.720
That might be good.

00:09:01.720 --> 00:09:02.240
Oh, that's interesting.

00:09:02.240 --> 00:09:02.620
Yeah.

00:09:02.620 --> 00:09:02.860
Yeah.

00:09:02.860 --> 00:09:05.160
That part was like a breaking change, but I don't care.

00:09:05.160 --> 00:09:05.620
Yeah.

00:09:05.620 --> 00:09:05.980
Okay.

00:09:05.980 --> 00:09:10.220
Like I can really see the, there's a huge use case here though, for old code bases where the

00:09:10.220 --> 00:09:13.460
developers aren't there anymore and there's been dependencies brought in and you don't

00:09:13.460 --> 00:09:14.700
know exactly what's being used.

00:09:14.700 --> 00:09:17.360
So this is like super nice to be able to do that.

00:09:17.360 --> 00:09:17.780
Yeah.

00:09:17.780 --> 00:09:21.360
And of course, as a reminder, you can have as many of these as you want to.

00:09:21.360 --> 00:09:27.400
So if you, if you're wanting to measure several packages, you can add multiple source flags.

00:09:27.400 --> 00:09:31.220
And if you're using pytest-cov, it's the cov flag.

00:09:31.220 --> 00:09:33.020
So you, which is identical.

00:09:33.020 --> 00:09:37.620
I'm not sure why they used cov and dash cov instead of dash source, but there you go.

00:09:37.620 --> 00:09:37.920
Interesting.

00:09:38.200 --> 00:09:38.400
Okay.

00:09:38.400 --> 00:09:38.720
Yeah.

00:09:38.720 --> 00:09:39.040
Yeah.

00:09:39.040 --> 00:09:39.520
Super cool.

00:09:39.520 --> 00:09:40.060
Super cool.

00:09:40.060 --> 00:09:42.640
So Calvin, I didn't know that you were an artist.

00:09:42.640 --> 00:09:47.200
I wish maybe more of a machine learning artist, but machine learning artists.

00:09:47.200 --> 00:09:52.320
This really interesting article came up on my like newsfeed last week, which was finding

00:09:52.320 --> 00:09:54.140
Mona Lisa in the game of life with Jax.

00:09:54.140 --> 00:09:58.100
And so there's kind of three interesting things there, like Mona Lisa, game of life, and then

00:09:58.100 --> 00:09:58.520
Jax.

00:09:58.520 --> 00:10:05.400
The author was attempting to find if he could start with a starting set of points on a game

00:10:05.400 --> 00:10:05.880
of life.

00:10:05.880 --> 00:10:10.020
If you're not familiar with game of life, there's whole Wikipedia articles about that.

00:10:10.020 --> 00:10:16.620
But if you could basically seed an initial game of life and after so many generations have

00:10:16.620 --> 00:10:17.320
it show you a picture.

00:10:17.320 --> 00:10:22.380
So he actually started with the Mona Lisa and kind of went through what it would take to go

00:10:22.380 --> 00:10:26.080
from, you know, a game of life running all the kinds of constraints that happen in that.

00:10:26.340 --> 00:10:29.060
But this seems like a really interesting machine learning problem.

00:10:29.060 --> 00:10:29.880
And that's cool.

00:10:29.880 --> 00:10:33.920
So it like our it randomly runs the game of life.

00:10:33.920 --> 00:10:37.440
But then the ML says, oh, that's starting to look like Mona Lisa.

00:10:37.440 --> 00:10:38.260
More of that.

00:10:38.260 --> 00:10:39.320
Well, it's more of that.

00:10:39.320 --> 00:10:42.900
I'm going to run a generation of game of life and then reset.

00:10:42.900 --> 00:10:48.100
I'm going to invert some pixels again and go again until I can generate what is my target

00:10:48.100 --> 00:10:48.500
picture.

00:10:48.500 --> 00:10:50.440
And it took a lot of CPU cycles.

00:10:50.440 --> 00:10:53.300
He basically wrote a simple single threaded version of this in Python.

00:10:53.520 --> 00:10:56.940
And there's a there's Python notebooks included with the GitHub links in here.

00:10:56.940 --> 00:11:02.960
But it took days of CPU time for him to run the initial four generations to see if he could

00:11:02.960 --> 00:11:04.340
even make this be possible.

00:11:04.340 --> 00:11:07.340
And then kind of went with any machine learning project.

00:11:07.340 --> 00:11:11.180
It's really important to understand like the preparation of your data before you kind of

00:11:11.180 --> 00:11:12.000
go dive in.

00:11:12.000 --> 00:11:15.820
So what I also thought was interesting in here is he talks about the preparation of the data

00:11:15.820 --> 00:11:20.600
kind of down here, pre-processing, you know, using pill to understand how to generate

00:11:20.600 --> 00:11:27.080
that target first, give the game of life algorithms a chance of getting it correct, came into like,

00:11:27.080 --> 00:11:29.980
you know, really half tones would work better because there's some constraints around game

00:11:29.980 --> 00:11:34.240
of life that the whites can't be contiguous to contiguous because they'll they'll kill

00:11:34.240 --> 00:11:36.020
each other and ends up being all black.

00:11:36.020 --> 00:11:40.940
And but at the end, the kind of goal of this was how fast can we now do it?

00:11:40.940 --> 00:11:45.540
Take the single threaded Python example, which took hours or days of CPU.

00:11:45.920 --> 00:11:47.260
Can we actually do it on a GPU?

00:11:47.260 --> 00:11:52.620
And so there's a JAX library, which is a machine learning library in Python that allows you

00:11:52.620 --> 00:11:54.900
to actually like super parallelize the problem.

00:11:54.900 --> 00:11:58.220
So if you can actually slice the problem up shows kind of example here in pictures, which

00:11:58.220 --> 00:12:00.820
is kind of nice for a person who doesn't do a lot of machine learning.

00:12:00.820 --> 00:12:05.780
Yeah, they actually kind of show you what the process looks like and hyper parallelize this

00:12:05.780 --> 00:12:07.180
basically in 40.

00:12:07.260 --> 00:12:12.780
He went from days of CPU time down to 40 seconds to get through the first camera.

00:12:12.780 --> 00:12:13.540
What was the final time?

00:12:13.540 --> 00:12:14.620
40 seconds.

00:12:14.620 --> 00:12:15.680
It was that.

00:12:15.680 --> 00:12:16.000
Yeah.

00:12:16.000 --> 00:12:17.040
Yeah, it was ridiculous.

00:12:17.040 --> 00:12:18.620
It's like so a thousand iterations.

00:12:18.620 --> 00:12:21.780
So the first one was for four generations took days.

00:12:21.780 --> 00:12:27.240
The next one where he did it with JAX was a thousand iterations took 40 seconds on a Google

00:12:27.240 --> 00:12:28.120
Colab GPU.

00:12:28.500 --> 00:12:30.420
So JAX is basically a Python library.

00:12:30.420 --> 00:12:32.980
I've got a quick little quick start over here.

00:12:32.980 --> 00:12:37.500
Neat library that actually you kind of have to alter your brain to a little bit to how you

00:12:37.500 --> 00:12:42.200
code so that you can code in a way that can be hyper parallelized across all the GPUs.

00:12:42.200 --> 00:12:45.360
I mean, for people who aren't familiar with GPUs, which you may not be because good luck

00:12:45.360 --> 00:12:46.900
getting a GPU right now.

00:12:46.900 --> 00:12:48.780
They're unobtainium at this point.

00:12:48.940 --> 00:12:54.020
But if you did have a GPU, you can take advantage of those, you know, how many cores are in some

00:12:54.020 --> 00:12:57.140
of these modern GPUs, like thousands in the new, like in video.

00:12:57.140 --> 00:13:01.140
Every time that I try to think about and try to conceptualize, like how fast and how much

00:13:01.140 --> 00:13:05.240
these things can do, I'm like, whatever that is, it's probably off by 10 or many, many more.

00:13:05.240 --> 00:13:05.760
Yeah.

00:13:05.760 --> 00:13:09.960
Factor of 10, just like ramp that up to beyond what you can think is reasonable.

00:13:09.960 --> 00:13:10.600
It's right.

00:13:10.600 --> 00:13:14.780
You think of we've got a, you know, half a million polygons on the screen and we're going to

00:13:14.780 --> 00:13:15.240
draw that.

00:13:15.240 --> 00:13:17.700
Oh, we're actually going to do that 200 times a second.

00:13:17.700 --> 00:13:18.120
Right.

00:13:18.260 --> 00:13:22.580
So what's interesting is if you are doing some machine learning experimentations, learning

00:13:22.580 --> 00:13:26.600
a tool like JAX may actually help you speed up your iteration so you actually can get some

00:13:26.600 --> 00:13:27.500
useful results out of it.

00:13:27.500 --> 00:13:31.360
Because a lot of machine learning is kind of picking out what your algorithm based algorithm

00:13:31.360 --> 00:13:31.920
is going to be.

00:13:31.920 --> 00:13:35.920
But you have to run it enough to know whether your algorithm is getting you the results

00:13:35.920 --> 00:13:36.420
you expect.

00:13:36.420 --> 00:13:39.940
So being able to run through those algorithms quicker with a tool like JAX, I think would

00:13:39.940 --> 00:13:40.700
be super beneficial.

00:13:40.700 --> 00:13:41.840
Yeah, absolutely.

00:13:41.840 --> 00:13:43.260
That's super neat.

00:13:43.260 --> 00:13:46.160
And I think the biggest takeaway here is JAX, actually.

00:13:46.160 --> 00:13:46.720
Yeah.

00:13:46.720 --> 00:13:47.460
That was.

00:13:47.580 --> 00:13:47.680
Yeah.

00:13:47.680 --> 00:13:50.120
The end goal was like, yeah, can we talk about JAX?

00:13:50.120 --> 00:13:51.260
Because that's a really cool library.

00:13:51.260 --> 00:13:53.260
Well, and a cool logo, by the way.

00:13:53.260 --> 00:13:53.760
Yeah.

00:13:53.760 --> 00:13:54.400
Yeah.

00:13:54.400 --> 00:13:55.160
Yeah.

00:13:55.160 --> 00:13:55.440
I love it.

00:13:55.440 --> 00:13:56.840
The logo is super cool, actually.

00:13:56.840 --> 00:13:57.260
I like it.

00:13:57.260 --> 00:13:57.600
Yeah.

00:13:57.600 --> 00:13:58.060
But definitely.

00:13:58.060 --> 00:14:01.860
And I think they have support for Tensor processing units as well.

00:14:01.860 --> 00:14:06.300
So not only GPUs, but if you're doing like TensorFlow stuff, Tensor GPUs or Tensor processing

00:14:06.300 --> 00:14:07.760
units, so you can take advantage of those as well.

00:14:07.760 --> 00:14:08.160
Yeah.

00:14:08.360 --> 00:14:08.600
Okay.

00:14:08.600 --> 00:14:09.200
Super neat.

00:14:09.200 --> 00:14:09.540
Super neat.

00:14:09.540 --> 00:14:09.620
Super neat.

00:14:09.620 --> 00:14:12.380
I want to talk about something that's not as neat.

00:14:12.380 --> 00:14:15.040
Maybe it'll get you excited, but in the wrong way.

00:14:15.040 --> 00:14:20.300
This one was sent over by my friend, Mark Little, fellow Portlander, and a follow-up related

00:14:20.300 --> 00:14:21.940
one sent over by Tony.

00:14:22.220 --> 00:14:24.680
So link into a couple of articles here.

00:14:24.680 --> 00:14:29.040
And recall, we talked about Google coming on as the visionary sponsor.

00:14:29.040 --> 00:14:33.680
One of their primary goals that they wanted was to improve the package security.

00:14:33.680 --> 00:14:38.700
You think about some of the things that have happened recently that are super scary.

00:14:38.700 --> 00:14:44.200
One, the Outlook catastrophe that 60,000 companies have been taken over.

00:14:44.200 --> 00:14:46.260
And then the SolarWinds one as well.

00:14:46.260 --> 00:14:50.460
And I think they're somewhat related, even though they're not the same origin or the same type

00:14:50.460 --> 00:14:50.800
of hack.

00:14:50.980 --> 00:14:55.180
The SolarWinds one is one of these supply chain vulnerabilities and these breaches, right?

00:14:55.180 --> 00:14:59.200
It's one thing to say, I'm going to protect against somebody breaking into my website.

00:14:59.200 --> 00:15:04.340
I'm going to run the proper firewalls, low privileges, everything's patched, et cetera, et cetera.

00:15:04.340 --> 00:15:07.060
That might still not be enough, but that's like a good start.

00:15:07.060 --> 00:15:13.040
But do you think about, well, next time you install the new version of package, whatever,

00:15:13.040 --> 00:15:18.080
what if it was influenced with some kind of negative package that had some vulnerability

00:15:18.080 --> 00:15:20.060
that then got into your servers and then went on?

00:15:20.100 --> 00:15:26.320
Like the supply chain story around all of these package management places is scary.

00:15:26.320 --> 00:15:28.320
I think that's not what happened to SolarWinds.

00:15:28.320 --> 00:15:30.440
They just had the password, SolarWinds123.

00:15:30.440 --> 00:15:32.500
That's a different type of problem.

00:15:32.500 --> 00:15:33.580
But it highlights-

00:15:33.580 --> 00:15:34.120
Those aren't interns.

00:15:34.120 --> 00:15:35.040
Exactly.

00:15:35.040 --> 00:15:35.740
Exactly.

00:15:35.740 --> 00:15:42.540
But the problem that it might be untrustworthy to install all of our beautiful open source

00:15:42.540 --> 00:15:43.000
things.

00:15:43.000 --> 00:15:43.640
I don't know.

00:15:43.640 --> 00:15:44.260
It's very scary.

00:15:44.580 --> 00:15:45.660
Like, what do you guys think about this?

00:15:45.660 --> 00:15:47.340
It seemed like this went even a level deeper.

00:15:47.340 --> 00:15:50.300
There wasn't even scary to install the open source things.

00:15:50.300 --> 00:15:55.180
It was dangerous to install your own private package names if someone knew about them and

00:15:55.180 --> 00:15:58.420
had put them into a public repository with a newer version.

00:15:58.420 --> 00:15:58.900
Yeah.

00:15:59.020 --> 00:16:02.340
So let me read the titles here for people who are listening.

00:16:02.340 --> 00:16:08.940
The Python package index nukes 3,653 malicious libraries uploaded soon after a security shortcoming

00:16:08.940 --> 00:16:09.820
is highlighted.

00:16:10.480 --> 00:16:16.560
And the other one is poison packages, supply chain risks, users hit Python community with

00:16:16.560 --> 00:16:18.040
4,000 fake modules.

00:16:18.040 --> 00:16:19.540
And these are basically the same.

00:16:19.540 --> 00:16:23.600
I don't know if like one's rounding up or whatever, but- or one's counting multiple incidents.

00:16:23.600 --> 00:16:28.100
But the idea is there's this form of type squatting that's pretty sketchy.

00:16:28.100 --> 00:16:34.120
So we've covered this before where if you have- maybe I want to use the audio library asteroid

00:16:34.120 --> 00:16:38.920
singular, but then somebody puts asteroids plural, that is a virus.

00:16:38.920 --> 00:16:41.920
And it could just as well have exactly the same code plus the virus.

00:16:41.920 --> 00:16:43.200
So it looks like it works.

00:16:43.200 --> 00:16:44.940
You wouldn't even know that it's not working, right?

00:16:44.940 --> 00:16:45.340
Yeah.

00:16:45.340 --> 00:16:46.880
And that's quite the problem.

00:16:46.880 --> 00:16:49.580
But here the highlight is what's it called?

00:16:49.580 --> 00:16:52.300
Like I think one thing was calling it evil twin.

00:16:52.300 --> 00:16:56.240
Another, this is a research by Alex Beerson.

00:16:56.240 --> 00:17:02.480
And basically there's a lot of people who are using private package repositories, right?

00:17:02.480 --> 00:17:06.760
Like DevPy and things like that, Artifactory, where you have a local one.

00:17:06.760 --> 00:17:10.640
But if you ask for something public, you can just ask your local one and the local one will

00:17:10.640 --> 00:17:12.180
go out and ask the public one.

00:17:12.180 --> 00:17:18.360
So as you were hinting at Calvin, the problem is what if I just have like data layer or e-commerce

00:17:18.360 --> 00:17:22.480
or like some random thing that might be an internal package name?

00:17:22.480 --> 00:17:27.420
Maybe if it's what I think the real problem was they were saying, if you don't secure your

00:17:27.420 --> 00:17:33.660
server right, you just post a higher version on the public one than on, on the local one.

00:17:33.660 --> 00:17:35.680
And it'll go, oh, well, there's a newer one over there.

00:17:35.680 --> 00:17:36.640
I better get that.

00:17:36.640 --> 00:17:38.380
And we'll just go grab the virus.

00:17:38.380 --> 00:17:42.760
I'm also surprised that folks aren't pinning the versions of their internal packages as well.

00:17:42.760 --> 00:17:47.520
Because I would, this would satisfy solving that problem is if you had like we use pip-tools,

00:17:47.520 --> 00:17:53.560
pip compile to make sure we got hashes and versions for every dependent package.

00:17:53.560 --> 00:17:56.660
But yeah, if you didn't do that, you were absolutely susceptible to this.

00:17:57.000 --> 00:17:57.120
Yeah.

00:17:57.120 --> 00:17:59.760
So just people check this out.

00:17:59.760 --> 00:18:01.100
It's, it looks a little scary.

00:18:01.100 --> 00:18:04.740
I, you guys, you too tell me if you think I'm crazy.

00:18:04.740 --> 00:18:08.620
I'm getting to the point where I'm really freaked out about like these kinds of things.

00:18:08.620 --> 00:18:10.960
And especially, you know, people send us stuff.

00:18:10.960 --> 00:18:11.880
They're like, oh, check this out.

00:18:11.880 --> 00:18:12.420
Here you go.

00:18:12.420 --> 00:18:15.420
Like I'm not pip installing those things locally and trying them.

00:18:15.420 --> 00:18:16.140
No way.

00:18:16.140 --> 00:18:16.680
Right.

00:18:16.680 --> 00:18:18.900
I'm going to install them in some isolated environment.

00:18:19.380 --> 00:18:24.340
One thing I've been thinking about doing is setting up my own DevPy server, which is exactly

00:18:24.340 --> 00:18:26.480
the problem sort of that we're talking about.

00:18:26.480 --> 00:18:27.920
So that doesn't necessarily solve it.

00:18:27.920 --> 00:18:31.820
But what you can get with your DevPy server is you can get DevPy constrained, which will

00:18:31.820 --> 00:18:35.740
let you not blacklist stuff or exclude stuff, but you have to whitelist things.

00:18:35.740 --> 00:18:37.940
So you're like, all right, I'm going to try to install, set up this project.

00:18:37.940 --> 00:18:41.320
And when it tells me I need these things and they're failing, I'll make sure they're good.

00:18:41.320 --> 00:18:42.320
Make sure they're used a lot.

00:18:42.320 --> 00:18:47.000
I'll put them in the whitelist and then I'll be happy to just pip install versions, no versions,

00:18:47.000 --> 00:18:47.400
whatever.

00:18:47.800 --> 00:18:47.940
Right.

00:18:47.940 --> 00:18:50.320
But, but sort of being more protective about this.

00:18:50.320 --> 00:18:50.660
I don't know.

00:18:50.660 --> 00:18:53.520
Maybe I'm just paranoid, but this stuff is, it's creeping me out.

00:18:53.520 --> 00:18:54.100
What do you guys think?

00:18:54.100 --> 00:18:55.340
I'm still just having it.

00:18:55.340 --> 00:18:57.400
Let me, I'm still sinking in.

00:18:57.400 --> 00:18:59.080
I don't, I'm not sure how I react to it.

00:18:59.080 --> 00:18:59.540
Yeah.

00:18:59.540 --> 00:19:04.080
My reaction is, I think there's still more infrastructure security wise that has to happen in the community.

00:19:04.080 --> 00:19:08.380
And there's, there's efforts to do signed packages or support in the latest version

00:19:08.380 --> 00:19:09.900
of pip for signed packages.

00:19:09.900 --> 00:19:12.760
And there's also some good hygiene behaviors, but it's true.

00:19:12.760 --> 00:19:16.140
If you want to just try out a package and you just did pip install from a command line,

00:19:16.220 --> 00:19:20.240
you're typically not going to specify a specific version and you're going to get whatever just

00:19:20.240 --> 00:19:21.900
comes off of a pipe with it.

00:19:21.900 --> 00:19:22.300
Yeah.

00:19:22.300 --> 00:19:24.720
We've gone around and around about it internally as well.

00:19:24.720 --> 00:19:28.140
Talking about this because we want to make sure we're not susceptible to this kind of

00:19:28.140 --> 00:19:28.640
an attack.

00:19:28.640 --> 00:19:33.540
And I think good practices like the pip-tools, you know, using that and having pin versions

00:19:33.540 --> 00:19:36.860
has pretty much given us a comfort level with we're pretty safe.

00:19:36.860 --> 00:19:38.520
I mean, no one's a hundred percent safe.

00:19:38.520 --> 00:19:39.420
That doesn't exist.

00:19:39.420 --> 00:19:42.200
But we're feeling pretty good because of the practices.

00:19:42.200 --> 00:19:42.740
Yeah.

00:19:42.740 --> 00:19:43.140
Yeah.

00:19:43.140 --> 00:19:43.880
I know that sounds good.

00:19:43.880 --> 00:19:46.980
I mean, there's only so much you can do, but layers, layers are good, right?

00:19:46.980 --> 00:19:47.520
Layers are good.

00:19:47.520 --> 00:19:50.140
Anyway, this, if you are running, I want to highlight this.

00:19:50.140 --> 00:19:54.740
The ultimate problem highlighted here is that if you have a private PyPI server, that

00:19:54.740 --> 00:19:59.880
there were ways to typosquat on your internal names, not on the public name.

00:19:59.880 --> 00:20:03.460
And there's no way for the public stuff to go, well, you can't have that because it looks

00:20:03.460 --> 00:20:04.200
too close to this, right?

00:20:04.200 --> 00:20:05.420
It might not exist publicly.

00:20:05.420 --> 00:20:08.140
So just be really careful about the versions.

00:20:08.140 --> 00:20:12.280
Be really careful about like whitelisting things if you're doing your own private PyPI.

00:20:12.280 --> 00:20:15.540
And it's important to also note, this is not a Python specific problem.

00:20:15.540 --> 00:20:19.740
So I think some folks may have blown out of proportion, but like other packaging distribution

00:20:19.740 --> 00:20:22.000
tooling all have some similar problems.

00:20:22.000 --> 00:20:22.440
Yeah.

00:20:22.440 --> 00:20:25.060
And I just saw a message on, he was on Twitter or somewhere.

00:20:25.060 --> 00:20:25.320
Yeah.

00:20:25.320 --> 00:20:30.600
This, I mean, obviously npm has this problem, Ruby gems, all these places, NuGet, whatnot.

00:20:30.600 --> 00:20:35.660
Somebody who was involved in like diagnosing and solving these problems was like, please don't

00:20:35.660 --> 00:20:38.560
go post another 4,000 packages to prove your point.

00:20:38.560 --> 00:20:39.920
Just, we are already aware.

00:20:39.920 --> 00:20:41.380
Just send us a message.

00:20:41.560 --> 00:20:45.860
You're causing a lot of work that is like distracting us from addressing this problem.

00:20:45.860 --> 00:20:47.580
So, you know, we don't need more examples.

00:20:47.580 --> 00:20:49.600
We need just maybe a notification.

00:20:49.600 --> 00:20:50.120
Yeah.

00:20:50.120 --> 00:20:54.460
I guess one of the other things is, is that it is typo squatting.

00:20:54.460 --> 00:21:00.360
So we, in our organization, we try to minimize individuals having to type install anything really.

00:21:00.360 --> 00:21:05.440
They, we have, all of our projects have requirements files with pinned versions.

00:21:05.440 --> 00:21:08.720
So they're not going to type the name of anything.

00:21:08.720 --> 00:21:11.060
It's going to have to be in a requirements file first.

00:21:11.060 --> 00:21:11.400
Yeah.

00:21:11.400 --> 00:21:11.840
All right.

00:21:11.840 --> 00:21:12.860
Well, check out the articles.

00:21:12.860 --> 00:21:14.720
There's more details in, in both of them.

00:21:14.720 --> 00:21:15.720
Brian, what you got for us?

00:21:15.720 --> 00:21:17.040
Oh, my turn again.

00:21:17.040 --> 00:21:17.620
Okay.

00:21:17.680 --> 00:21:17.880
It is.

00:21:17.880 --> 00:21:18.160
It is.

00:21:18.160 --> 00:21:23.500
I wanted to talk about something new.

00:21:23.500 --> 00:21:25.800
Adventure, text-based adventure games.

00:21:25.800 --> 00:21:26.500
Have you heard of these?

00:21:26.500 --> 00:21:31.360
I love, I used to play, I used to play Muds when I was quite younger.

00:21:31.360 --> 00:21:32.860
Oh, those were so fun.

00:21:32.860 --> 00:21:35.100
They were so magical, even though they were just text.

00:21:35.320 --> 00:21:37.660
So I actually never got into this.

00:21:37.660 --> 00:21:41.780
but I, I, my, I had entered adventure games.

00:21:41.780 --> 00:21:42.960
What was it called?

00:21:42.960 --> 00:21:47.840
The dungeons of Daggerath, was a game that I had on the, TRS 80.

00:21:47.840 --> 00:21:52.200
And it was, it wasn't, text-based, but the graphics were just lines.

00:21:52.200 --> 00:21:56.060
So it was, we'll go through a cave and, and stuff like that.

00:21:56.060 --> 00:21:58.200
But anyway, a little bit before that.

00:21:58.200 --> 00:22:04.240
So we're talking, in early seventies, so 75 to 77 was a game called adventure.

00:22:04.240 --> 00:22:07.360
and then our colossal cave adventure.

00:22:07.360 --> 00:22:13.360
So you can play colossal cave adventure because Brandon Rhodes has Python adventure.

00:22:13.360 --> 00:22:15.820
And this is just awesome.

00:22:15.820 --> 00:22:16.960
I played this the other day.

00:22:16.960 --> 00:22:20.880
It's so well, I don't know if so fun, maybe like overselling it.

00:22:20.880 --> 00:22:22.680
but it's kind of neat.

00:22:22.680 --> 00:22:27.900
it's a faithful port of the adventure game to Python three from the original

00:22:27.900 --> 00:22:30.300
1977 Fortran code.

00:22:30.300 --> 00:22:30.760
Wow.

00:22:30.760 --> 00:22:32.560
And that was awesome.

00:22:32.560 --> 00:22:36.780
So if I get distracted, it's because I've actually pip installed this and I'm playing

00:22:36.780 --> 00:22:37.240
it right now.

00:22:37.240 --> 00:22:42.360
It's a, lets you explore colossal cave where others have found fortunes and treasure and

00:22:42.360 --> 00:22:43.040
gold, though.

00:22:43.040 --> 00:22:47.240
It is rumored that some who enter never seen from again, like maybe Calvin.

00:22:47.240 --> 00:22:50.520
but one of the things that I loved is I played in both modes.

00:22:50.520 --> 00:22:52.380
So you can, there's two modes you can play.

00:22:52.380 --> 00:22:56.360
You can, in a Python console, you can just kind of run it.

00:22:56.360 --> 00:22:57.880
but you can also, you can also, you can,

00:22:57.880 --> 00:23:02.140
um, gonna show for the people watching kind of what it looks like.

00:23:02.140 --> 00:23:07.260
you import adventure and then you say adventure.play and, it has, gives you

00:23:07.260 --> 00:23:11.940
instructions and you have to type things like East, West, get lamp, things like that.

00:23:11.940 --> 00:23:14.280
Oh, it's even like function call style.

00:23:14.280 --> 00:23:15.900
Well, it's function call style.

00:23:15.900 --> 00:23:18.640
If you do the import on the repl.

00:23:18.840 --> 00:23:23.360
if you, if you go through the, there's traditional mode.

00:23:23.360 --> 00:23:23.540
Okay.

00:23:23.540 --> 00:23:24.000
Got it.

00:23:24.000 --> 00:23:27.600
The traditional mode is you do Python dash M adventure.

00:23:27.600 --> 00:23:29.660
And then it's traditional mode.

00:23:29.660 --> 00:23:32.760
You say get lamp with a space between the get and the lamp.

00:23:32.760 --> 00:23:33.940
And that's how I played it.

00:23:33.940 --> 00:23:38.180
But the fun part about this, the traditional mode, it's a 1200 bod.

00:23:38.580 --> 00:23:42.200
So you have to wait for this to type its message to you.

00:23:42.200 --> 00:23:44.860
you may have to explain that to some of our listeners.

00:23:44.860 --> 00:23:47.820
I don't know if I can.

00:23:47.820 --> 00:23:48.520
It's slow.

00:23:48.520 --> 00:23:52.700
So it's sort of ticker tapes out the message to you and you're waiting for it.

00:23:52.700 --> 00:23:53.020
Wow.

00:23:53.020 --> 00:23:53.820
That's impressive.

00:23:53.820 --> 00:23:59.560
I used to be able to identify by sound, the speed of the connection I would get.

00:23:59.560 --> 00:24:07.400
I could tell you is at 9,600 is like 32, whatever, or is it 56 and whether the, and whether the error correcting kicked in or not.

00:24:07.400 --> 00:24:08.000
Yes, exactly.

00:24:08.000 --> 00:24:08.400
You hear it.

00:24:08.400 --> 00:24:12.320
But I don't think I even remember what that sounded like.

00:24:12.320 --> 00:24:13.340
That was some slow business.

00:24:13.340 --> 00:24:14.700
One of the things.

00:24:14.700 --> 00:24:15.700
so, okay.

00:24:15.700 --> 00:24:19.100
So a little bit tie into the, my own personal nerdiness.

00:24:19.100 --> 00:24:22.440
I was curious how this related to Zork.

00:24:22.440 --> 00:24:26.080
So, Zork, I never played either.

00:24:26.080 --> 00:24:29.540
It was a little bit after adventure, but, there was a,

00:24:29.540 --> 00:24:32.120
TV show called Chuck, that I really liked.

00:24:32.120 --> 00:24:36.660
And one of the premises is this Chuck and his buddy used to play this game.

00:24:36.660 --> 00:24:40.140
And he met this other guy by both of them being Zork nerds.

00:24:40.140 --> 00:24:42.700
And they, they did their own port of Zork.

00:24:42.700 --> 00:24:45.180
And I'm like, is that a made up thing or real?

00:24:45.180 --> 00:24:46.640
And apparently it is real.

00:24:46.640 --> 00:24:51.660
Zork was a follow on to adventure, from 77 to 79.

00:24:51.660 --> 00:24:55.120
so anyway, so I'm, I'm going to ask Brandon.

00:24:55.120 --> 00:24:57.960
So Brandon, can we get a port of Zork also for Python?

00:24:57.960 --> 00:24:58.760
That'd be great.

00:24:58.760 --> 00:25:04.740
Then we'll get our little IOT devices that we can play these adventure games on like a

00:25:04.740 --> 00:25:07.900
little Nintendo switch, but super old school, like low baud rate.

00:25:07.900 --> 00:25:08.480
That'd be great.

00:25:08.480 --> 00:25:12.720
Oh, I want this totally for my Oculus quest so I can do a Texas venture in full VR.

00:25:12.720 --> 00:25:20.980
Well, the 1200 baud, the baud slow down thing is, is entertaining for about 10

00:25:20.980 --> 00:25:21.400
seconds.

00:25:21.400 --> 00:25:24.200
And then I'm like, can I get faster now?

00:25:24.200 --> 00:25:26.280
So yeah, you had the true retro though.

00:25:26.280 --> 00:25:26.720
That was cool.

00:25:26.720 --> 00:25:27.240
Very nice.

00:25:27.240 --> 00:25:27.620
That's cool.

00:25:27.620 --> 00:25:28.560
Awesome.

00:25:28.560 --> 00:25:29.260
All right.

00:25:29.260 --> 00:25:35.080
so for those of you who are Django nuts in the audience, there is a new long-term support

00:25:35.080 --> 00:25:37.420
release coming up for Django three tattoo.

00:25:37.420 --> 00:25:41.080
That's a big deal because long-term support ones are the ones you want.

00:25:41.080 --> 00:25:41.760
Oh my gosh.

00:25:41.760 --> 00:25:44.820
And Django's community is really good about that long-term support.

00:25:44.820 --> 00:25:48.660
I mean, and they have a very good security policy and release revision policy.

00:25:48.660 --> 00:25:50.420
It's very clear, very, very well documented.

00:25:50.420 --> 00:25:53.620
So the next one coming up, which is going to be released here in April is going to be

00:25:53.620 --> 00:25:54.120
3.2.

00:25:54.120 --> 00:25:59.800
this post specifically that I linked to is actually an overview of some highlights of

00:25:59.800 --> 00:26:01.460
interesting features that you may not have noticed.

00:26:01.460 --> 00:26:06.200
You can go read the main Django three, two release page and see kind of the overall new features

00:26:06.200 --> 00:26:07.060
are going to be coming in.

00:26:07.260 --> 00:26:10.460
But this post specifically covered some things that I thought were also interesting.

00:26:10.460 --> 00:26:15.600
a lot of them are performance and kind of, protections against, you know, hurting

00:26:15.600 --> 00:26:16.500
yourself when you're programming.

00:26:16.500 --> 00:26:19.060
So things like covering indexes for Postgres.

00:26:19.060 --> 00:26:24.560
So you can actually, avoid full table scans and do index scans and Postgres, for

00:26:24.560 --> 00:26:25.700
kind of indexes are magic.

00:26:25.700 --> 00:26:26.100
Yeah.

00:26:26.100 --> 00:26:31.400
And then, and so this is enabling even more of the nice magic of those indexes inside of Django.

00:26:31.400 --> 00:26:31.900
Yeah.

00:26:31.900 --> 00:26:35.740
I think it's really cool that it's the LTS release, three, two is coming out.

00:26:35.860 --> 00:26:39.020
I think there's also some async and await stuff in here coming along, which is pretty

00:26:39.020 --> 00:26:39.420
exciting.

00:26:39.420 --> 00:26:44.020
I know that one of the areas that's still pending to get really the async and await stuff

00:26:44.020 --> 00:26:46.860
properly, like full stack is the ORM stuff.

00:26:46.860 --> 00:26:47.360
ORM.

00:26:47.360 --> 00:26:47.760
Yeah.

00:26:47.760 --> 00:26:49.620
So three, two was supposed to be.

00:26:49.620 --> 00:26:52.960
If you wait on the database, that's the thing you need async for more than anything else.

00:26:52.960 --> 00:26:53.280
Yeah.

00:26:53.280 --> 00:26:56.420
And that's kind of one of the notable missing items for me in 3.2.

00:26:56.420 --> 00:27:02.180
I mean, the team is doing an amazing job of implementing all the async features for Django.

00:27:02.180 --> 00:27:05.520
I mean, 3.0, 3.1, you started off with the routing.

00:27:05.520 --> 00:27:06.760
Then you got the views.

00:27:06.760 --> 00:27:12.120
3.2 was supposed to be, I think the ORM included, but maybe just due to the fact that we are talking

00:27:12.120 --> 00:27:16.540
about a long-term support release that that was maybe too risky of a feature to get included

00:27:16.540 --> 00:27:16.840
here.

00:27:16.840 --> 00:27:21.720
But look for that coming soon, like in 3.3 or 3.4 for the ORM, which will be a big, big deal.

00:27:21.720 --> 00:27:26.500
the other things that are included in this 3.2 release, again, kind of focusing on security

00:27:26.500 --> 00:27:29.060
and safety and performance, time zones.

00:27:29.060 --> 00:27:32.900
You know, it's probably one of the two hardest things in programming is the time zones and

00:27:32.900 --> 00:27:34.960
character encoding and off by one, errors.

00:27:34.960 --> 00:27:38.420
so there are going to be some trunk date stuff in here that actually, you know, helps

00:27:38.420 --> 00:27:41.480
you, assign a default time zone in case you didn't put one.

00:27:41.580 --> 00:27:44.700
there's going to be some cool stuff for people who like unstructured data, the

00:27:44.700 --> 00:27:46.240
JSON object DB functions.

00:27:46.240 --> 00:27:50.200
So you'll actually be able to assign some DB functions that can produce, you know,

00:27:50.200 --> 00:27:56.320
JSON mapping type objects or key value pairs where you pass in database functions to operate

00:27:56.320 --> 00:27:56.640
on it.

00:27:56.860 --> 00:27:58.800
there's going to be some cool stuff around signals.

00:27:58.800 --> 00:28:03.540
there's a sin robust, which didn't, log exceptions, but now will.

00:28:03.540 --> 00:28:06.660
So you don't have to, log themes for the admin section.

00:28:06.660 --> 00:28:07.640
Is that coming to this one?

00:28:07.640 --> 00:28:09.160
I know that's something they're working on.

00:28:09.160 --> 00:28:13.140
I don't know on the themes, but I know for the admin section, and this is a common

00:28:13.140 --> 00:28:17.020
thing I've done in the admin is sometimes you want to put computed fields into the admin

00:28:17.020 --> 00:28:19.060
pages for like your, your objects.

00:28:19.060 --> 00:28:22.280
there's going to be a new, what is it?

00:28:22.280 --> 00:28:25.440
There's a new value, not a value expression of the display decorator.

00:28:25.440 --> 00:28:27.880
So you can actually make creating admin feels a lot cleaner.

00:28:27.880 --> 00:28:32.780
The, the kind of syntax for it previously was just a little convoluted if you were not used

00:28:32.780 --> 00:28:33.060
to it.

00:28:33.060 --> 00:28:35.820
And so as a new person, you may not have figured out how to do it very easily.

00:28:35.820 --> 00:28:38.840
So there's a new decorator that actually makes that super, super easy to do.

00:28:38.840 --> 00:28:42.420
there's some other performance things around the database with query sets, with aliases.

00:28:42.420 --> 00:28:46.240
So you can actually create like reusable aliases for things that you're selecting against.

00:28:46.240 --> 00:28:49.780
So you can use them as like filters or like kind of combined statements.

00:28:49.780 --> 00:28:54.020
So it doesn't do two sub queries instead of, it'll do just one, a lot, a lot of cool

00:28:54.020 --> 00:28:54.760
performance.

00:28:54.760 --> 00:28:58.900
And again, these were kind of the less notable, but really kind of important features that

00:28:58.900 --> 00:29:00.880
are coming into a Django three, two.

00:29:00.880 --> 00:29:02.400
Oh, yeah.

00:29:02.400 --> 00:29:04.260
And like, so you can, you can see all the other stuff.

00:29:04.260 --> 00:29:06.360
There's, there's a zillion things coming up in three, two.

00:29:06.360 --> 00:29:09.000
These are just some of the small ones, but there's some of the important ones.

00:29:09.000 --> 00:29:09.560
That's cool.

00:29:09.560 --> 00:29:09.700
Yeah.

00:29:09.700 --> 00:29:11.040
When, when is this coming out?

00:29:11.040 --> 00:29:11.660
April.

00:29:11.660 --> 00:29:12.800
So we should see it next month.

00:29:12.800 --> 00:29:13.480
very soon.

00:29:13.480 --> 00:29:13.940
Yeah.

00:29:13.940 --> 00:29:14.440
Awesome.

00:29:14.440 --> 00:29:15.120
That's great.

00:29:15.120 --> 00:29:17.540
if you're into Django, that sounds really like a big deal.

00:29:17.540 --> 00:29:18.100
It is.

00:29:18.100 --> 00:29:18.620
It is.

00:29:18.620 --> 00:29:18.960
It is.

00:29:18.960 --> 00:29:19.540
All right.

00:29:19.540 --> 00:29:23.140
Brian, anything else that you'd like to throw out?

00:29:23.140 --> 00:29:24.200
Those are all of our items.

00:29:24.200 --> 00:29:25.140
Anything extra?

00:29:25.560 --> 00:29:27.360
No, I don't have anything extra this week.

00:29:27.360 --> 00:29:27.900
How about you?

00:29:27.900 --> 00:29:30.660
Oh, I've got a couple of things I would like to touch on.

00:29:30.660 --> 00:29:32.100
I heard some amazing stuff.

00:29:32.100 --> 00:29:36.080
I heard that Python open source stuff is on Mars.

00:29:36.080 --> 00:29:36.660
Yeah.

00:29:37.020 --> 00:29:42.200
But what I want to say is Python is on Mars question mark, because what I found is if

00:29:42.200 --> 00:29:46.200
you go look at, there's this thing called F prime that NASA open sourced.

00:29:46.200 --> 00:29:46.660
Awesome.

00:29:46.660 --> 00:29:51.960
And if you go over here and you look at it, this is the flight control thing that is for

00:29:51.960 --> 00:29:54.340
embedded them flying, including that little helicopter.

00:29:54.340 --> 00:29:54.920
Awesome.

00:29:54.920 --> 00:29:59.820
it has 16% Python and 44% C++.

00:29:59.820 --> 00:30:05.480
But if you look at the Python bits, so much of it seems to be around the, like the training

00:30:05.480 --> 00:30:06.060
pipeline.

00:30:06.060 --> 00:30:11.100
So my theory is I didn't see any stuff in like the real, like running regular bits.

00:30:11.100 --> 00:30:14.440
I'm thinking maybe it's trained with Python locally.

00:30:14.440 --> 00:30:17.560
And then the models are put on the helicopter and flown with C++.

00:30:17.560 --> 00:30:23.340
If, if somebody knows for sure that Python is on Mars, you know, but details, let me know.

00:30:23.340 --> 00:30:24.020
That'd be awesome.

00:30:24.020 --> 00:30:26.480
I still think it's cool that Python's involved here.

00:30:26.480 --> 00:30:26.820
Yeah.

00:30:26.820 --> 00:30:27.180
All right.

00:30:27.180 --> 00:30:28.000
So that's one quick one.

00:30:28.000 --> 00:30:29.780
Number two, just released a new course.

00:30:29.780 --> 00:30:31.420
And this one is a little different.

00:30:31.420 --> 00:30:34.300
So it's a full web apps with FastAPI.

00:30:34.600 --> 00:30:38.920
And FastAPI is awesome for building APIs, but there's like three or four features of

00:30:38.920 --> 00:30:39.640
FastAPI.

00:30:39.640 --> 00:30:44.560
When put together in the right combination, make it sort of a equivalent framework to what

00:30:44.560 --> 00:30:45.400
you would get with flask.

00:30:45.400 --> 00:30:50.440
So if you're thinking, I would love to use this beautiful API with really nice decorators,

00:30:50.440 --> 00:30:55.020
with really nice async support with Pydantic and all those awesome things that it has.

00:30:55.020 --> 00:30:56.900
But I want to build a web app with it.

00:30:56.900 --> 00:30:58.380
Well, we launched a course on that.

00:30:58.380 --> 00:30:59.180
People can check that out.

00:30:59.180 --> 00:30:59.700
That's really awesome.

00:30:59.700 --> 00:31:04.340
Like basically, I've built some APIs with FastAPI and I need like four or five more pages

00:31:04.340 --> 00:31:05.600
to round out the app.

00:31:05.600 --> 00:31:09.480
Do I have to have a Django plus FastAPI multi deploy thing?

00:31:09.480 --> 00:31:10.480
Like, no, actually.

00:31:10.480 --> 00:31:12.160
And this is all about how do you do that?

00:31:12.160 --> 00:31:13.140
So people can check that out.

00:31:13.140 --> 00:31:13.620
That's fun.

00:31:13.620 --> 00:31:14.540
Super excited about that.

00:31:14.540 --> 00:31:15.040
That's cool.

00:31:15.040 --> 00:31:15.160
Yeah.

00:31:15.160 --> 00:31:15.680
Yeah.

00:31:15.680 --> 00:31:15.880
Thanks.

00:31:15.880 --> 00:31:20.660
Over on Talk Python, I'm giving away five tickets to PyCon, one a week for five weeks.

00:31:20.660 --> 00:31:25.280
So if people want to win a free ticket to PyCon, this year it's virtual.

00:31:25.280 --> 00:31:26.440
So you can attend from anywhere.

00:31:26.440 --> 00:31:29.360
There's not the challenge of, well, I got the ticket, but I need the thousand dollars for

00:31:29.360 --> 00:31:29.960
the hotel, right?

00:31:29.960 --> 00:31:31.200
Like that's not a problem this year.

00:31:31.200 --> 00:31:32.320
So I think it's really cool.

00:31:32.320 --> 00:31:35.020
I decided to run a contest on that.

00:31:35.020 --> 00:31:36.100
The link is in the show notes.

00:31:36.100 --> 00:31:40.500
We got a couple of questions saying, hey, we heard about this live stream because we're listening

00:31:40.500 --> 00:31:41.100
to the podcast.

00:31:41.100 --> 00:31:42.460
How do we get to this live stream?

00:31:42.460 --> 00:31:43.140
This is awesome.

00:31:43.140 --> 00:31:44.060
I think it's fun, Brian.

00:31:44.200 --> 00:31:45.360
I'm enjoying doing the live stream.

00:31:45.360 --> 00:31:45.880
What do you think?

00:31:45.880 --> 00:31:46.060
Yeah.

00:31:46.060 --> 00:31:47.140
It makes it a lot more fun.

00:31:47.140 --> 00:31:47.600
Yeah.

00:31:47.600 --> 00:31:51.140
We get, we get our, our listeners who come in and give us comments and all this stuff is

00:31:51.140 --> 00:31:51.360
great.

00:31:51.360 --> 00:31:56.220
So if you just go to pythonbytes.fm/YouTube right at the top, there'll be upcoming live

00:31:56.220 --> 00:31:56.500
streams.

00:31:56.500 --> 00:31:59.400
And you can say, click the button to remind me of it and so on.

00:31:59.400 --> 00:32:00.820
So that's how you do that.

00:32:00.820 --> 00:32:07.120
Last thing I was on, I got a chance to talk to the medical community and the medical research

00:32:07.120 --> 00:32:11.160
community around Python over on this podcast called the Finding Genius Podcast.

00:32:11.700 --> 00:32:16.180
And it was just a lot of fun to speak about the advantages of Python for like medical researchers

00:32:16.180 --> 00:32:18.060
and folks like that.

00:32:18.060 --> 00:32:20.000
So I'll link to that podcast as well.

00:32:20.000 --> 00:32:20.520
All right.

00:32:20.520 --> 00:32:20.680
Yeah.

00:32:20.680 --> 00:32:21.960
Calvin, anything else you want to throw out?

00:32:21.960 --> 00:32:22.400
I know you.

00:32:22.400 --> 00:32:23.200
I do.

00:32:23.360 --> 00:32:25.020
I wore your, I wore my shirt.

00:32:25.020 --> 00:32:27.160
I know you were fully outfitted.

00:32:27.160 --> 00:32:28.860
So I've actually got two things.

00:32:28.860 --> 00:32:33.280
One, before I get to Python web conference, the DjangoCon Europe 2021 call for papers is

00:32:33.280 --> 00:32:34.800
open until April 1st.

00:32:34.800 --> 00:32:39.140
So if you're interested in talking at DjangoCon Europe, it'll be a pretty worldwide conference.

00:32:39.140 --> 00:32:40.160
It was last year.

00:32:40.160 --> 00:32:40.800
It was a lot of fun.

00:32:40.800 --> 00:32:44.020
We actually did it on the same platform as we did the Python web conference, which is the

00:32:44.020 --> 00:32:45.940
other thing I wanted to mention in the extras.

00:32:46.180 --> 00:32:51.680
So Python web conf 2021 is coming up in about, well, it'll be a week or so after you probably

00:32:51.680 --> 00:32:52.280
hear this.

00:32:52.280 --> 00:32:54.640
March 22nd through the 26th.

00:32:54.640 --> 00:32:57.900
We've got an awesome lineup this year again, even better than last year.

00:32:57.900 --> 00:33:01.440
Michael's obviously back and be speaking at the conference.

00:33:01.440 --> 00:33:04.340
We've got about 60 speakers, almost 20% women.

00:33:05.080 --> 00:33:07.140
There's 43 new speakers this year.

00:33:07.140 --> 00:33:07.680
It's like five.

00:33:07.680 --> 00:33:09.080
Yeah, it's like four or five days or something.

00:33:09.080 --> 00:33:10.200
It's a big conference.

00:33:10.200 --> 00:33:12.160
Yeah, it's five days, but we're doing half days.

00:33:12.160 --> 00:33:16.340
So you don't have to consume your whole day with being in a virtual conference because we

00:33:16.340 --> 00:33:17.620
understand that that is just hard.

00:33:17.620 --> 00:33:21.520
And I think we're all adjusting to what virtual conferences really kind of should be.

00:33:21.520 --> 00:33:23.940
So this is a new experiment, which got four tracks.

00:33:23.940 --> 00:33:25.440
There's app dev, pi data.

00:33:25.440 --> 00:33:26.940
It's an official pi data track.

00:33:26.940 --> 00:33:28.900
There's a cloud track and a culture track.

00:33:28.900 --> 00:33:33.020
So if there's nothing you're interested in, I would be hard pressed to believe that.

00:33:33.020 --> 00:33:36.500
There are tickets for $1.99 for professional, $1.99 for student.

00:33:36.500 --> 00:33:39.580
And we do have our grant program back again this year.

00:33:39.580 --> 00:33:45.260
So we are offering up grants for those who, you know, we want anybody who wants to truly

00:33:45.260 --> 00:33:49.600
attend to be able to, no matter what the financial piece may be.

00:33:49.600 --> 00:33:52.820
So check out the grant program for everyone who buys tickets.

00:33:52.820 --> 00:33:54.820
We offer up grants for those who can't afford tickets.

00:33:54.820 --> 00:33:56.100
And I'm really excited about that.

00:33:56.100 --> 00:33:58.360
You can check that out at pythonwebconf.com.

00:33:58.360 --> 00:34:00.460
Yeah, it's gonna be a ton of fun.

00:34:00.460 --> 00:34:01.900
It was a lot of fun last year.

00:34:01.900 --> 00:34:05.080
We've got a bunch of social events planned and some really awesome sponsors.

00:34:05.080 --> 00:34:08.740
And I'm just super excited about being able to produce something like this for the Python

00:34:08.740 --> 00:34:09.120
community.

00:34:09.120 --> 00:34:13.260
I feel like the web is an area that doesn't always get the attention it should in some

00:34:13.260 --> 00:34:13.780
other conferences.

00:34:13.780 --> 00:34:15.840
And we're hopefully fulfilling that.

00:34:15.840 --> 00:34:16.780
Yeah, super cool.

00:34:16.780 --> 00:34:17.880
It was a good conference last year.

00:34:17.880 --> 00:34:19.640
So I'm looking forward to being part of this year.

00:34:19.640 --> 00:34:20.000
Yeah.

00:34:20.000 --> 00:34:20.420
Yeah.

00:34:20.420 --> 00:34:24.340
Brian and I were just on a virtual conference at PyCascades, which was a lot of cool,

00:34:24.340 --> 00:34:25.300
cool fun.

00:34:25.300 --> 00:34:27.120
We were on that panel about podcasting.

00:34:27.120 --> 00:34:27.780
Yeah, it was great.

00:34:27.780 --> 00:34:29.480
You all might know a thing or two about that.

00:34:30.480 --> 00:34:31.800
We've done it once or twice.

00:34:31.800 --> 00:34:33.940
I'm not sure I would laugh at it, but maybe a joke.

00:34:33.940 --> 00:34:34.680
We could laugh at a joke.

00:34:34.680 --> 00:34:35.140
What do you guys think?

00:34:35.140 --> 00:34:35.600
Yeah.

00:34:35.600 --> 00:34:36.140
Yeah.

00:34:36.140 --> 00:34:36.680
All right.

00:34:36.680 --> 00:34:43.240
So I know we got like two rounds of jokes, but let's do another round of these comments.

00:34:43.240 --> 00:34:45.080
I'm already laughing.

00:34:45.080 --> 00:34:45.700
I know.

00:34:45.700 --> 00:34:46.280
They're so good.

00:34:46.280 --> 00:34:48.420
So I'll do the first one.

00:34:48.420 --> 00:34:49.400
Brian can do the next one.

00:34:49.400 --> 00:34:50.360
Calvin can do the next one.

00:34:50.360 --> 00:34:52.520
We'll just kind of, we got five or six, something like that.

00:34:52.700 --> 00:34:54.580
So it's important to comment your code.

00:34:54.580 --> 00:34:55.680
There's this code.

00:34:55.680 --> 00:34:58.980
I believe it's Java and it is part of a class.

00:34:58.980 --> 00:35:05.220
It says private logger, capital L class logger, variable name logger equals logger class factory

00:35:05.220 --> 00:35:06.420
method dot get logger.

00:35:06.420 --> 00:35:08.940
So private logger logger equals logger dot get logger.

00:35:08.940 --> 00:35:10.160
What does the comment say?

00:35:10.160 --> 00:35:11.100
Logger.

00:35:11.100 --> 00:35:11.620
Quote.

00:35:11.620 --> 00:35:12.100
Yeah.

00:35:12.100 --> 00:35:12.880
Just logger.

00:35:12.880 --> 00:35:13.800
This is a logger.

00:35:13.800 --> 00:35:14.540
Fantastic.

00:35:14.540 --> 00:35:16.240
You passed your code review.

00:35:16.240 --> 00:35:16.560
Yes.

00:35:16.560 --> 00:35:17.520
I guess you have comments.

00:35:17.520 --> 00:35:18.360
Yeah.

00:35:18.780 --> 00:35:19.080
All right.

00:35:19.080 --> 00:35:19.880
Brian, what's the next one?

00:35:19.880 --> 00:35:26.140
Next one looks like C++ comments, but I'm at this block that says this is black magic

00:35:26.140 --> 00:35:28.480
from some stack overflow link.

00:35:28.480 --> 00:35:29.680
Don't play with magic.

00:35:29.680 --> 00:35:30.320
It can bite.

00:35:30.320 --> 00:35:33.020
All right.

00:35:33.020 --> 00:35:33.660
All right.

00:35:33.660 --> 00:35:33.960
Calvin.

00:35:33.960 --> 00:35:34.840
What do we got next?

00:35:34.840 --> 00:35:38.280
Well, this one obviously is a Python comment in the code.

00:35:38.280 --> 00:35:40.340
It says for the sins I am about to commit.

00:35:40.340 --> 00:35:42.120
May Guido Von Razum forgive me.

00:35:42.120 --> 00:35:43.620
Yes.

00:35:43.620 --> 00:35:44.380
I love it.

00:35:44.380 --> 00:35:46.800
Which I would be hard pressed to know what they're getting ready to commit.

00:35:46.800 --> 00:35:49.700
if they read the Zen of Python, they really should know the guidance already.

00:35:49.700 --> 00:35:50.260
Yeah.

00:35:50.260 --> 00:35:50.720
Yeah.

00:35:50.720 --> 00:35:51.180
Yeah.

00:35:51.180 --> 00:35:52.700
Maybe they put a semicolon in there.

00:35:52.700 --> 00:35:53.040
I don't know.

00:35:53.040 --> 00:35:54.860
All right.

00:35:54.860 --> 00:35:59.180
The next one is remove this if you want to be fired.

00:35:59.180 --> 00:36:02.720
Remove the comment or the code below it.

00:36:02.720 --> 00:36:03.400
We don't know.

00:36:03.400 --> 00:36:03.800
Yeah.

00:36:03.800 --> 00:36:04.340
We don't know.

00:36:04.340 --> 00:36:05.040
We don't know.

00:36:05.040 --> 00:36:11.540
Next is a try accept block or catching exception with just a comment.

00:36:11.540 --> 00:36:13.120
And it says, Houston, we have a problem.

00:36:13.120 --> 00:36:15.540
There's no code there, though.

00:36:15.540 --> 00:36:17.240
So you're just, yes, we do have a problem.

00:36:17.240 --> 00:36:18.660
You're just catching a raw exception.

00:36:18.660 --> 00:36:19.300
Don't do that.

00:36:19.300 --> 00:36:19.760
Exactly.

00:36:19.760 --> 00:36:20.480
Exactly.

00:36:20.480 --> 00:36:21.500
All right.

00:36:21.500 --> 00:36:22.140
What's the last one?

00:36:22.140 --> 00:36:22.540
All right.

00:36:22.540 --> 00:36:27.740
The last one here is a definition of int get random number.

00:36:27.740 --> 00:36:31.540
And the body of the function is return four.

00:36:31.540 --> 00:36:36.200
And the comment says chosen by fair dice roll guaranteed to be random.

00:36:36.200 --> 00:36:38.700
If he wants.

00:36:38.700 --> 00:36:40.140
Was this a real code someplace?

00:36:40.140 --> 00:36:40.840
I mean, come on.

00:36:40.840 --> 00:36:41.520
Yeah.

00:36:41.520 --> 00:36:43.080
Oh, there's all sorts of good ones here.

00:36:43.300 --> 00:36:43.460
Yeah.

00:36:43.460 --> 00:36:44.100
They're beautiful.

00:36:44.100 --> 00:36:48.940
One of them that's not on the list is the comment is just, I need to find a better job.

00:36:48.940 --> 00:36:50.560
All right.

00:36:50.560 --> 00:36:51.120
One more.

00:36:51.120 --> 00:36:52.820
Who put this one in here?

00:36:52.820 --> 00:36:55.140
I threw that in there.

00:36:55.140 --> 00:36:56.480
Tell us about this one.

00:36:57.020 --> 00:36:58.600
I'm kind of a card card nut.

00:36:58.600 --> 00:37:07.620
So if you if you kind of exactly like hover over just the first half of the picture, you see a guy in a Ferrari like waving and says, yeah, maybe rolling in the Ferrari.

00:37:07.620 --> 00:37:11.620
There's using Linux and then dot, dot, dot in Windows with WSL.

00:37:11.620 --> 00:37:18.080
And if you scroll down, you see that the Ferrari is actually on a tow truck flatbed being driven someplace.

00:37:19.080 --> 00:37:20.200
And the guy's in it.

00:37:20.200 --> 00:37:20.380
Yeah.

00:37:20.380 --> 00:37:21.760
Like he's driving the train.

00:37:21.760 --> 00:37:22.480
He's cool.

00:37:22.480 --> 00:37:23.360
Very cool.

00:37:23.360 --> 00:37:23.980
Very cool.

00:37:23.980 --> 00:37:24.820
That's funny.

00:37:24.820 --> 00:37:29.440
I'm glad ZDax that you guys like the jokes out there and Dean as well.

00:37:29.440 --> 00:37:30.420
Yeah.

00:37:30.420 --> 00:37:37.500
And just I mean, I commented in the in the chat that you can increase your odds at winning the pike on tickets by laughing at the jokes.

00:37:37.500 --> 00:37:38.420
Yeah, absolutely.

00:37:38.420 --> 00:37:39.860
We'll put you in there twice if you laugh.

00:37:39.860 --> 00:37:40.220
Yeah.

00:37:40.220 --> 00:37:40.960
For sure.

00:37:40.960 --> 00:37:41.900
That's how it works.

00:37:41.900 --> 00:37:43.880
Like the dad jokes of programming here.

00:37:43.880 --> 00:37:44.360
Oh, yeah.

00:37:44.360 --> 00:37:44.800
Of course.

00:37:44.800 --> 00:37:45.220
Yeah.

00:37:45.720 --> 00:37:46.280
We're all dead.

00:37:46.280 --> 00:37:47.040
That's like half our show.

00:37:47.040 --> 00:37:48.100
That's how we all qualify.

00:37:48.100 --> 00:37:49.860
For sure.

00:37:49.860 --> 00:37:50.280
For sure.

00:37:50.280 --> 00:37:50.760
All right.

00:37:50.760 --> 00:37:53.200
Well, Brian, thanks for being here as always.

00:37:53.200 --> 00:37:54.720
And Calvin, thanks for joining us.

00:37:54.720 --> 00:37:55.480
My pleasure.

00:37:55.480 --> 00:37:56.180
I really enjoyed it.

00:37:56.180 --> 00:37:56.480
Yeah.

00:37:56.480 --> 00:37:58.100
Good luck on your conference and catch you next time.

