
00:00:00.000 --> 00:00:05.400
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.400 --> 00:00:11.300
This is episode 282, recorded May 3rd, 2022.


00:00:11.300 --> 00:00:12.100
I'm Michael Kennedy.


00:00:12.100 --> 00:00:13.300
And I am Brian Okken.


00:00:13.300 --> 00:00:16.100
It's great to have you here, Brian. It's just us, just the two of us.


00:00:16.100 --> 00:00:18.300
Yeah, just like old times.


00:00:18.300 --> 00:00:22.400
I know, but we have our friends out in the audience, so we're not entirely alone.


00:00:22.400 --> 00:00:25.400
It's great. So let's kick it off.


00:00:25.400 --> 00:00:29.600
I know you have a particularly exciting announcement.


00:00:29.600 --> 00:00:33.680
- topic to cover here. So definitely let's, let's go do it.


00:00:33.680 --> 00:00:40.160
- Okay. So, PyScript. So this was an announcement at PyCon US by,


00:00:40.160 --> 00:00:45.920
Anaconda's CEO, Peter Wang, during a keynote. I wasn't there, but like everybody


00:00:45.920 --> 00:00:51.600
was tweeting about it. So it almost felt like I was, I was there. So, but,


00:00:51.600 --> 00:00:55.760
but I, I haven't seen the presentation, so I can't wait. Can't wait till that goes online.


00:00:55.760 --> 00:01:02.040
>> I know. I have not seen the videos for the presentations at PyCon out yet.


00:01:02.040 --> 00:01:03.440
Are they out yet? I just missed it.


00:01:03.440 --> 00:01:04.240
>> I haven't looked.


00:01:04.240 --> 00:01:05.240
>> Is my YouTube broken?


00:01:05.240 --> 00:01:06.760
[LAUGHTER]


00:01:06.760 --> 00:01:08.160
>> It should be full of this stuff.


00:01:08.160 --> 00:01:11.720
>> What's up with, is it supposed to be next day or something? I don't know.


00:01:11.720 --> 00:01:12.920
>> I know.


00:01:12.920 --> 00:01:13.520
>> Anyway.


00:01:13.520 --> 00:01:14.800
>> I would have loved to live stream it,


00:01:14.800 --> 00:01:16.360
but I didn't see an option.


00:01:16.360 --> 00:01:18.360
Anyway, I'm looking forward to watching this one in


00:01:18.360 --> 00:01:20.320
particular when it comes out because this is big news.


00:01:20.320 --> 00:01:23.160
>> PyScript is Python in the browser.


00:01:23.160 --> 00:01:26.360
So what does that mean? It is built on top of Pyodide,


00:01:26.360 --> 00:01:29.760
which is a port of CPython based on WebAssembly.


00:01:29.760 --> 00:01:32.400
I'm pretty sure we've covered Pyodide before.


00:01:32.400 --> 00:01:34.860
But so this is a pretty neat thing.


00:01:34.860 --> 00:01:36.280
And one of the things that this,


00:01:36.280 --> 00:01:38.720
so the PyScript.NET, you go to it,


00:01:38.720 --> 00:01:40.760
it's got a little, it's kind of actually,


00:01:40.760 --> 00:01:43.920
it's like hype and it sounds neat,


00:01:43.920 --> 00:01:45.280
and you can do Python in the browser.


00:01:45.280 --> 00:01:47.040
Neat with the PyScript tags.


00:01:47.040 --> 00:01:48.080
But what does that mean?


00:01:48.080 --> 00:01:50.680
So if you go down to the bottom,


00:01:50.680 --> 00:01:53.960
There's a GitHub repo that you can go look at.


00:01:53.960 --> 00:01:55.560
This is what I suggest.


00:01:55.560 --> 00:01:57.080
And this will talk about--


00:01:57.080 --> 00:01:59.160
there's a getting started guide.


00:01:59.160 --> 00:02:02.600
But what I did is just followed this.


00:02:02.600 --> 00:02:03.820
I cloned the repo.


00:02:03.820 --> 00:02:05.760
And then I went in and did the--


00:02:05.760 --> 00:02:07.760
into the JavaScript area.


00:02:07.760 --> 00:02:09.440
And then did npm install.


00:02:09.440 --> 00:02:12.600
And then did this dev run, run dev thing.


00:02:12.600 --> 00:02:15.800
So this only took me like five minutes to get this far.


00:02:15.800 --> 00:02:19.320
And what you have is you've got--


00:02:19.320 --> 00:02:22.040
One of the things that it has is it has an examples folder


00:02:22.040 --> 00:02:24.760
and you can just open this up now in your local,


00:02:24.760 --> 00:02:27.280
your local browser, local host.


00:02:27.280 --> 00:02:28.520
And there's all these cool demos.


00:02:28.520 --> 00:02:31.360
Like there's a REPL where you can just do,


00:02:31.360 --> 00:02:34.240
it's kind of like a Jupyter where you can say like


00:02:34.240 --> 00:02:36.720
X equals three, let's do this.


00:02:36.720 --> 00:02:40.480
And then X, and then if I do shift enter, it evaluates it.


00:02:40.480 --> 00:02:41.400
How neat is that?


00:02:41.400 --> 00:02:42.240
That's pretty neat.


00:02:42.240 --> 00:02:44.080
- That's awesome, yeah.


00:02:44.080 --> 00:02:45.360
- To do app here.


00:02:45.360 --> 00:02:47.920
So make sure you listen to our podcasts,


00:02:47.920 --> 00:02:51.760
by Python testing by test. We'll check that because we know you already bought that. So,


00:02:51.760 --> 00:02:59.760
and then there's an example with D3 graphics. This is neat. I don't think I've ever done this.


00:02:59.760 --> 00:03:04.640
There's an Altair example. And this is pretty fun because you click around and it changes the above.


00:03:04.640 --> 00:03:11.200
It's like an interactive thing. This is fun. We use Altair with a project at work. So this is neat.


00:03:11.200 --> 00:03:16.560
The Mandelbrot set. So there's some code. So all of this code is in the repo. So you can look at


00:03:16.560 --> 00:03:19.760
the examples and look exactly how the code is done. There's a


00:03:19.760 --> 00:03:23.760
HTML file and a Python file for all of these. So you can check


00:03:23.760 --> 00:03:27.040
it out. Actually, I don't know about the Python thing. It's


00:03:27.040 --> 00:03:31.200
HTML and Python within the HTML code embedded. So there isn't a


00:03:31.200 --> 00:03:34.480
separate file. But you can do imports and all this sort of


00:03:34.480 --> 00:03:38.160
stuff too. Oh, I went too far. But I wanted to bring up,


00:03:38.160 --> 00:03:40.000
there's also an article that we're going to link to in the


00:03:40.000 --> 00:03:44.640
show notes that is called PyScript, Unleash the Power of


00:03:44.640 --> 00:03:51.680
Python in your browser. This is by Eric Lewis Lewinson, and it runs through. It's a pretty


00:03:51.680 --> 00:03:57.240
interesting little quick read of what it is if you're not familiar with WebAssembly and


00:03:57.240 --> 00:04:01.120
Pyodide. So it's nice. What do you think, Michael?


00:04:01.120 --> 00:04:07.760
So excited. I am very excited. You know, there's been progress on the WebAssembly plus Python


00:04:07.760 --> 00:04:13.280
side on several occurrences that were, they give you a sense of what's possible, but they


00:04:13.280 --> 00:04:15.760
they didn't give you a thing to build with.


00:04:15.760 --> 00:04:16.600
You know what I mean?


00:04:16.600 --> 00:04:17.420
- Yeah.


00:04:17.420 --> 00:04:19.120
- So for example, Pyodite is awesome,


00:04:19.120 --> 00:04:20.400
but it's kind of like,


00:04:20.400 --> 00:04:23.960
well, if I want to sort of host Jupyter kernel in my browser,


00:04:23.960 --> 00:04:26.360
like I can kind of do that, right?


00:04:26.360 --> 00:04:28.440
The WebAssembly Python itself is great,


00:04:28.440 --> 00:04:33.440
but it doesn't specify a way to have a UI of your webpage


00:04:33.440 --> 00:04:34.440
interact with Python.


00:04:34.440 --> 00:04:37.000
It's just, oh, you could execute Python over here.


00:04:37.000 --> 00:04:38.040
Well, like, and then what?


00:04:38.040 --> 00:04:39.100
You know what I mean?


00:04:39.100 --> 00:04:40.280
Which is still good,


00:04:40.280 --> 00:04:42.240
but there's not something where,


00:04:42.240 --> 00:04:44.800
Like I can have a button on there


00:04:44.800 --> 00:04:46.800
that like wires up to this thing in Python


00:04:46.800 --> 00:04:50.540
and I can have this list that binds in that way and so on.


00:04:50.540 --> 00:04:53.280
And this looks like we might be there.


00:04:53.280 --> 00:04:56.060
Like one of the things they talk about on the page


00:04:56.060 --> 00:04:59.120
is not just running Python in the browser


00:04:59.120 --> 00:05:01.400
and the Python ecosystem as you pointed out,


00:05:01.400 --> 00:05:03.440
but really importantly, two more things,


00:05:03.440 --> 00:05:04.640
Python with JavaScript,


00:05:04.640 --> 00:05:06.800
bidirectional communication between Python


00:05:06.800 --> 00:05:08.560
and JavaScript objects.


00:05:08.560 --> 00:05:11.040
So you can wire into like events on the page


00:05:11.040 --> 00:05:13.440
and other DOM type of things.


00:05:13.440 --> 00:05:14.280
- Yes.


00:05:14.280 --> 00:05:16.760
- And then a visual application development


00:05:16.760 --> 00:05:19.320
ties in with that with use readily available


00:05:19.320 --> 00:05:21.320
curated UI components such as buttons,


00:05:21.320 --> 00:05:23.160
containers, text boxes, and more.


00:05:23.160 --> 00:05:24.000
Oh yeah.


00:05:24.000 --> 00:05:27.240
- Yeah, I mean like these are just a little quick examples


00:05:27.240 --> 00:05:29.960
but I'd love to see some bigger examples


00:05:29.960 --> 00:05:30.800
of things like that.


00:05:30.800 --> 00:05:35.260
Like being able to connect JavaScript interaction


00:05:35.260 --> 00:05:38.120
with stuff on the Python side.


00:05:38.120 --> 00:05:38.940
That'll be neat.


00:05:38.940 --> 00:05:42.860
>> Yeah, it's weird to see Python written just straight in the browser.


00:05:42.860 --> 00:05:43.500
You know?


00:05:43.500 --> 00:05:46.820
>> Yeah. >> Like here you have like angle bracket pi-script and


00:05:46.820 --> 00:05:49.780
just import antigravity, antigravity.fly.


00:05:49.780 --> 00:05:51.620
And like wait, what?


00:05:51.620 --> 00:05:53.700
>> Well, so this is a good example.


00:05:53.700 --> 00:05:57.340
I picked this example for one is because it does do an import.


00:05:57.340 --> 00:06:00.660
So there's like a path thing so you can set up.


00:06:00.660 --> 00:06:05.060
So you can put code, all your code doesn't have to be in HTML.


00:06:05.060 --> 00:06:07.420
It can be in a Python file.


00:06:07.420 --> 00:06:10.100
so you can debug it there, which that's where you want to debug it.


00:06:10.100 --> 00:06:12.740
And then you can import and call it within Python.


00:06:12.740 --> 00:06:15.620
This is probably more where I would use it,


00:06:15.620 --> 00:06:18.020
is putting most of my code somewhere else.


00:06:18.020 --> 00:06:20.060
>> Yeah, that's what I want to see.


00:06:20.060 --> 00:06:25.900
I would want to see just Python files and just effectively a script tag for it.


00:06:25.900 --> 00:06:28.820
I mean, maybe you can't do it directly as a script tag,


00:06:28.820 --> 00:06:30.580
but you could do bracket,


00:06:30.580 --> 00:06:33.100
PyScript and then just import and run, right?


00:06:33.100 --> 00:06:33.420
>> Yeah.


00:06:33.420 --> 00:06:34.380
>> From entry point basically.


00:06:34.380 --> 00:06:35.340
>> I haven't looked at this before.


00:06:35.340 --> 00:06:38.880
So the anti-gravity.py that is bringing in


00:06:38.880 --> 00:06:41.340
is bringing in some pyodied stuff


00:06:41.340 --> 00:06:44.320
and to be able to work it.


00:06:44.320 --> 00:06:48.140
- I'm seeing some from, this is Python code,


00:06:48.140 --> 00:06:51.820
from document, or sorry, from JS import document.


00:06:51.820 --> 00:06:53.240
- Yeah. - And set interval.


00:06:53.240 --> 00:06:56.100
Those are the things you do there.


00:06:56.100 --> 00:06:58.300
Let's see, are there any callbacks?


00:06:58.300 --> 00:07:00.180
I don't see any callbacks there.


00:07:00.180 --> 00:07:02.620
Oh yeah, yeah, this set interval has a callback,


00:07:02.620 --> 00:07:05.320
self.move when the JavaScript interval fires.


00:07:05.320 --> 00:07:09.700
So under fly, that is hooking into a timer there.


00:07:09.700 --> 00:07:10.140
>> Yeah.


00:07:10.140 --> 00:07:10.880
>> Timer callback.


00:07:10.880 --> 00:07:13.360
>> So we should check that out. So where's that?


00:07:13.360 --> 00:07:17.740
So I should have done this ahead of time.


00:07:17.740 --> 00:07:19.440
The anti-gravity is not linked to,


00:07:19.440 --> 00:07:21.580
but I'll just bring it up.


00:07:21.580 --> 00:07:25.720
>> Wow.


00:07:25.720 --> 00:07:27.560
>> Oh my gosh, this is so amazing.


00:07:27.560 --> 00:07:28.920
People have to do this.


00:07:28.920 --> 00:07:30.280
>> This is cool.


00:07:30.280 --> 00:07:32.620
>> We all know import anti-gravity,


00:07:32.620 --> 00:07:35.040
and we've got to know the XKCD that comes up.


00:07:35.040 --> 00:07:37.800
But yes, it's great.


00:07:37.800 --> 00:07:38.520
It's alive.


00:07:38.520 --> 00:07:41.160
It's not just as the person who says, how are you flying?


00:07:41.160 --> 00:07:42.920
The person says, I'm playing with Python.


00:07:42.920 --> 00:07:45.000
Like that thing is alive and cruising around.


00:07:45.000 --> 00:07:45.480
I love it.


00:07:45.480 --> 00:07:45.880
Yeah.


00:07:45.880 --> 00:07:47.400
And that's based on the callback, right?


00:07:47.400 --> 00:07:51.560
That's, that's calling Python based on the set interval, a timer callback in JavaScript.


00:07:51.560 --> 00:07:51.880
Yep.


00:07:51.880 --> 00:07:52.480
Yeah.


00:07:52.480 --> 00:07:55.160
And to me, that has been the missing piece.


00:07:55.160 --> 00:07:56.800
Like how do I wire up?


00:07:56.800 --> 00:08:00.960
It's like great if I can just execute Python and have, you know, like a number come out.


00:08:00.960 --> 00:08:03.600
But what I want is view in Python or react.


00:08:03.640 --> 00:08:11.240
I want to build the UI in Python and just not deal with JavaScript and be able to do so many more things on the front end.


00:08:11.240 --> 00:08:19.640
I mean, this opens up stuff like progressive web apps, which could be really amazing for the Python space, right?


00:08:19.640 --> 00:08:25.840
Like, I'm here in Vivaldi. If I go to my email client, just in the browser, I can right-click and install.


00:08:25.840 --> 00:08:30.840
It gets its own app that works offline. It like pulls its data down into local DB or whatever.


00:08:30.840 --> 00:08:32.320
Theoretically, you could do this, right?


00:08:32.320 --> 00:08:35.880
You could pull down the CPython WASM.


00:08:35.880 --> 00:08:40.040
You could pull down the 5k MyScript file,


00:08:40.040 --> 00:08:43.640
and then just somehow use JavaScript to Python to talk to local DBs.


00:08:43.640 --> 00:08:47.080
I mean, what if we get like ORMs in Python going,


00:08:47.080 --> 00:08:50.960
"Oh yeah, we have one of our backends is the web browser local DB."


00:08:50.960 --> 00:08:51.480
>> Yeah.


00:08:51.480 --> 00:08:53.560
>> Or something. I mean, this is great.


00:08:53.560 --> 00:08:56.520
I would love, I'm very excited for where this might go.


00:08:56.520 --> 00:08:57.920
>> Sky's the limit, right?


00:08:57.920 --> 00:09:01.340
That's what that little flying character is saying at least.


00:09:01.340 --> 00:09:02.240
>> Yeah.


00:09:02.240 --> 00:09:05.860
>> Okay. So well, good job, Anaconda folks.


00:09:05.860 --> 00:09:08.060
I believe this was Fabio and Cruz.


00:09:08.060 --> 00:09:10.360
So really, really nice. That was super psyched.


00:09:10.360 --> 00:09:13.180
How am I going to follow that one up, Brian? Come on.


00:09:13.180 --> 00:09:16.020
It's just, I'll give it a try.


00:09:16.020 --> 00:09:17.260
No, I've got some good items.


00:09:17.260 --> 00:09:21.860
They're just not flying around amazing Python in the browser, amazing.


00:09:21.860 --> 00:09:26.440
So Bloomberg has a lot of Python going on,


00:09:26.440 --> 00:09:30.440
And Bloomberg actually has a pretty cool like tech engineering blog where they


00:09:30.440 --> 00:09:33.060
talk about some of the stuff going on at Bloomberg, right?


00:09:33.060 --> 00:09:33.600
Yeah.


00:09:33.600 --> 00:09:38.080
Uh, one of the really good articles I read from this, from them was about


00:09:38.080 --> 00:09:42.420
how to really set up and run micro whiskey in production and was like this


00:09:42.420 --> 00:09:45.980
huge, long, deep list of like, here's a bunch of flags you probably never


00:09:45.980 --> 00:09:48.200
thought about, and here's why you should care about them in Python.


00:09:48.200 --> 00:09:49.200
Really good stuff.


00:09:49.200 --> 00:09:55.000
So they're back with another thing that they use that is cool called memory.


00:09:55.360 --> 00:10:00.360
Like memory, but memory, it is a memory profile for Python.


00:10:00.360 --> 00:10:03.760
So if you want to understand the performance


00:10:03.760 --> 00:10:06.520
of your application, especially around memory,


00:10:06.520 --> 00:10:09.340
here's a pretty neat tool.


00:10:09.340 --> 00:10:11.200
Now let me just get this right out of the way


00:10:11.200 --> 00:10:13.400
before I forget, Linux only.


00:10:13.400 --> 00:10:15.580
So if you're not using Linux, just close your ears.


00:10:15.580 --> 00:10:16.420
No, just kidding.


00:10:16.420 --> 00:10:18.400
Like you could all, if you're on Windows,


00:10:18.400 --> 00:10:21.340
you could just run your Python app under WSL


00:10:21.340 --> 00:10:24.000
and then profile it and then go back to running on Windows.


00:10:24.000 --> 00:10:27.040
or if you're on Mac, just do a VM or something, right?


00:10:27.040 --> 00:10:28.840
Anyway, it only runs on Linux,


00:10:28.840 --> 00:10:32.160
but because Python is so similar across the platforms,


00:10:32.160 --> 00:10:33.840
I'm sure you could just test your code there,


00:10:33.840 --> 00:10:35.820
even if that's not the main use case.


00:10:35.820 --> 00:10:38.200
All right, so you get all these different visualizations


00:10:38.200 --> 00:10:39.840
of memory usage.


00:10:39.840 --> 00:10:42.480
It can track allocations for Python code


00:10:42.480 --> 00:10:44.320
in native extension modules,


00:10:44.320 --> 00:10:46.400
like NumPy or something like that,


00:10:46.400 --> 00:10:48.620
and even within CPython itself.


00:10:48.620 --> 00:10:51.680
So you get sort of a holistic view of the memory,


00:10:51.680 --> 00:10:52.840
which is pretty awesome.


00:10:52.840 --> 00:10:53.680
- Yeah.


00:10:53.680 --> 00:10:55.880
And it'll give you different memory reports.


00:10:55.880 --> 00:10:57.160
We'll talk about them a little bit.


00:10:57.160 --> 00:10:59.480
And you can use it as a CLI tool,


00:10:59.480 --> 00:11:01.160
just like kind of like time it or whatever.


00:11:01.160 --> 00:11:04.160
You can just say, memory run my app.


00:11:04.160 --> 00:11:06.080
And then when your app exits, it's like,


00:11:06.080 --> 00:11:07.160
and here's what happened.


00:11:07.160 --> 00:11:09.000
One of the things that's super challenging


00:11:09.000 --> 00:11:12.840
about complicated applications and web apps and stuff


00:11:12.840 --> 00:11:15.920
is you wanna focus on a particular scenario


00:11:15.920 --> 00:11:18.540
and there's so much overhead of like startup


00:11:18.540 --> 00:11:19.880
and other things.


00:11:19.880 --> 00:11:24.120
So for example, if I just want to profile a fast API,


00:11:24.120 --> 00:11:26.280
API call, if I just say run it up


00:11:26.280 --> 00:11:27.960
and then I go hit that API,


00:11:27.960 --> 00:11:30.160
all of the infrastructure starting up,


00:11:30.160 --> 00:11:33.440
UVicorn and fast API and Python,


00:11:33.440 --> 00:11:34.920
it just like, it just dwarfs


00:11:34.920 --> 00:11:36.680
whatever that little thing is usually.


00:11:36.680 --> 00:11:39.200
So there's also a programmable API that says,


00:11:39.200 --> 00:11:41.080
you know, you could create like a context manager,


00:11:41.080 --> 00:11:42.880
like, I don't know if it actually is that way,


00:11:42.880 --> 00:11:44.840
but you could certainly build it if it doesn't exist,


00:11:44.840 --> 00:11:47.120
like with memory profile here


00:11:47.120 --> 00:11:49.680
and just do a little block of code and then get an answer,


00:11:49.680 --> 00:11:51.080
which I think is pretty neat.


00:11:51.080 --> 00:11:53.960
Alvaro asks if it accepts an entry point.


00:11:53.960 --> 00:11:57.160
I suspect you could call an entry point


00:11:57.160 --> 00:12:00.280
because you just do the run on the command prompt.


00:12:00.280 --> 00:12:02.120
So you could probably pass it over.


00:12:02.120 --> 00:12:03.340
- Whatever you run, yeah.


00:12:03.340 --> 00:12:04.280
- Yeah, exactly.


00:12:04.280 --> 00:12:06.880
But the problem is there's still like the startup


00:12:06.880 --> 00:12:08.720
of just CPython itself, right?


00:12:08.720 --> 00:12:12.320
Like I always find just the imports and all that


00:12:12.320 --> 00:12:14.680
is just way more overhead than, you know,


00:12:14.680 --> 00:12:15.980
it clutters it up.


00:12:15.980 --> 00:12:18.640
Anyway, let's hit some notable features of Memray.


00:12:18.640 --> 00:12:22.520
It traces every function call as opposed to sampling it.


00:12:22.520 --> 00:12:25.320
So instead of just going every millisecond,


00:12:25.320 --> 00:12:26.160
what are you doing now?


00:12:26.160 --> 00:12:26.980
What are you doing now?


00:12:26.980 --> 00:12:28.040
Let's just record that, right?


00:12:28.040 --> 00:12:31.300
It actually exactly traces so you don't miss


00:12:31.300 --> 00:12:33.960
any functions being called, even if they're brief.


00:12:33.960 --> 00:12:36.640
It handles native calls in C++ libraries.


00:12:36.640 --> 00:12:39.320
So the entire stack is represented in the results,


00:12:39.320 --> 00:12:40.320
which is pretty cool.


00:12:40.320 --> 00:12:41.160
- That's pretty neat.


00:12:41.160 --> 00:12:42.760
- Yeah, that's pretty dope.


00:12:42.760 --> 00:12:44.520
Apparently it's blazing fast.


00:12:44.520 --> 00:12:45.520
There's some kind of character,


00:12:45.520 --> 00:12:47.240
I think it's a race car there.


00:12:47.240 --> 00:12:49.400
It causes minimal slowdown in the app.


00:12:49.400 --> 00:12:53.360
If you're doing Python tracing, if you do the native code stuff, it's a little bit slower.


00:12:53.360 --> 00:12:54.880
It says, but that's optional.


00:12:54.880 --> 00:12:55.880
You get a bunch of reports.


00:12:55.880 --> 00:12:56.880
We'll see those in a minute.


00:12:56.880 --> 00:12:58.480
It works on Python threads.


00:12:58.480 --> 00:13:03.040
So you can see, I know all these people watching, but you check out the webpage.


00:13:03.040 --> 00:13:05.440
There's a little thread, like a sewing thread emoji.


00:13:05.440 --> 00:13:07.440
>> Or a Twitter thread.


00:13:07.440 --> 00:13:09.000
>> Yeah, indeed.


00:13:09.000 --> 00:13:14.200
So it also works on native threads like C++ threads and native extensions, which it represents


00:13:14.200 --> 00:13:18.160
as an alien plus the thread icon.


00:13:18.160 --> 00:13:18.600
I love it.


00:13:18.600 --> 00:13:19.800
>> Alien threads, yeah.


00:13:19.800 --> 00:13:22.880
>> Yeah. Let's look over here real quick.


00:13:22.880 --> 00:13:24.760
We'll look at just, I guess the reporting.


00:13:24.760 --> 00:13:26.920
I mean, the running is super simple as I said,


00:13:26.920 --> 00:13:29.520
memory run Python file with arguments or


00:13:29.520 --> 00:13:32.840
memory run -m module with arguments.


00:13:32.840 --> 00:13:36.080
These are the places you could put your entry point and so on.


00:13:36.080 --> 00:13:38.040
Dean in the audience says,


00:13:38.040 --> 00:13:39.840
"We've had a rich spotting."


00:13:39.840 --> 00:13:42.760
I haven't pulled that up yet, but very nice.


00:13:42.760 --> 00:13:44.720
So there's different ways in which you can view it.


00:13:44.720 --> 00:13:46.440
And the first one that I ran across,


00:13:46.440 --> 00:13:48.440
which is pretty interesting if you're familiar with


00:13:48.440 --> 00:13:50.520
glances or you want to go old school like


00:13:50.520 --> 00:13:54.080
top or one of these things you can run in just the terminal and get,


00:13:54.080 --> 00:13:58.400
I got not rich with top,


00:13:58.400 --> 00:14:03.240
but rich output like glances is you can run it in


00:14:03.240 --> 00:14:05.820
a live mode where while it's running,


00:14:05.820 --> 00:14:07.760
it'll show you what's happening with the memory.


00:14:07.760 --> 00:14:09.040
That is so awesome.


00:14:09.040 --> 00:14:09.800
>> That's pretty cool.


00:14:09.800 --> 00:14:10.440
>> Yeah.


00:14:10.440 --> 00:14:10.800
>> Yeah.


00:14:10.800 --> 00:14:12.680
>> Yeah. So instead of just showing you a memory graph,


00:14:12.680 --> 00:14:17.420
It's like, guess what? We're running here right now with this many allocations and so on.


00:14:17.420 --> 00:14:19.060
Yeah, that looks super neat.


00:14:19.060 --> 00:14:19.100
>> Yeah.


00:14:19.100 --> 00:14:20.260
>> Just give it the dash dash life.


00:14:20.260 --> 00:14:21.620
>> If you've got something interactive,


00:14:21.620 --> 00:14:24.820
you can interact with it and watch the memory change then.


00:14:24.820 --> 00:14:27.900
>> Yeah. You can cycle through threads.


00:14:27.900 --> 00:14:32.260
You can sort by total memory or its own memory.


00:14:32.260 --> 00:14:35.540
That's a common thing you do in profiling like this and


00:14:35.540 --> 00:14:38.380
all the stuff it's called or just this method itself.


00:14:38.380 --> 00:14:42.020
Sort by allocations versus memory usage is all kinds of stuff.


00:14:42.020 --> 00:14:43.180
So that's really neat.


00:14:43.180 --> 00:14:49.300
It will track the allocations across forks, as in process, subprocess.


00:14:49.300 --> 00:14:50.460
>> Okay. >> Why would you care?


00:14:50.460 --> 00:14:52.140
Because multi-processing.


00:14:52.140 --> 00:14:54.980
If you wanna track some kind of multi-processing memory workflow,


00:14:54.980 --> 00:14:56.180
it'll actually do that.


00:14:56.180 --> 00:14:58.300
Just you do dash dash follow fork and


00:14:58.300 --> 00:15:01.700
it'll aggregate the stats across the different processes.


00:15:01.700 --> 00:15:02.460
Kind of insane.


00:15:02.460 --> 00:15:05.460
Let's see if we can get down here.


00:15:05.460 --> 00:15:09.620
You can do, they have the summary reporter, which is kind of a nice just,


00:15:09.620 --> 00:15:11.220
this is probably what you would expect.


00:15:11.220 --> 00:15:13.820
If I can get down here somewhere,


00:15:13.820 --> 00:15:17.280
it'll show the color and the width of these bars.


00:15:17.280 --> 00:15:19.260
I'll show you how significant it is.


00:15:19.260 --> 00:15:21.380
There's a nice tree version


00:15:21.380 --> 00:15:23.380
that'll show you the biggest 10 allocations,


00:15:23.380 --> 00:15:25.740
and then a call stack in and out with trees,


00:15:25.740 --> 00:15:30.020
and how much memory is being allocated in each one of those and so on.


00:15:30.020 --> 00:15:30.660
>> That's nice.


00:15:30.660 --> 00:15:32.380
>> This is a nice app, right?


00:15:32.380 --> 00:15:33.820
Nice little utility.


00:15:33.820 --> 00:15:34.980
>> Definitely. Cool.


00:15:34.980 --> 00:15:36.660
>> Yeah, indeed.


00:15:36.660 --> 00:15:40.820
If you want to track down memory leaks or you're just wondering,


00:15:40.820 --> 00:15:43.780
like why is my program using so much memory?


00:15:43.780 --> 00:15:46.580
Fire it up, let it run for a while, see what happens.


00:15:46.580 --> 00:15:47.460
Cool.


00:15:47.460 --> 00:15:49.300
All right, back to you, Ryan.


00:15:49.300 --> 00:15:52.700
- Well, I wanna bring up a pytest tool.


00:15:52.700 --> 00:15:56.100
So it was a, I have,


00:15:56.100 --> 00:16:01.180
I've often used pytest xdist for parallel.


00:16:01.180 --> 00:16:03.380
So xdist is a way you can just say


00:16:03.380 --> 00:16:07.180
that it's the one that I heard about first


00:16:07.180 --> 00:16:08.900
for running pytest in parallel.


00:16:08.900 --> 00:16:11.820
So you've got tons of unit tests maybe,


00:16:11.820 --> 00:16:13.860
and you want to just speed them up,


00:16:13.860 --> 00:16:17.860
you can throw a -n for something like that at it.


00:16:17.860 --> 00:16:21.900
And it'll just launch different processes


00:16:21.900 --> 00:16:25.840
and run pytest in parallel on a bunch of them.


00:16:25.840 --> 00:16:28.380
So it cuts time down, but there's overhead.


00:16:28.380 --> 00:16:31.420
And I was recommending this to somebody on Twitter,


00:16:31.420 --> 00:16:34.860
and I think it was Bruno Olivier


00:16:34.860 --> 00:16:37.940
suggested a couple of alternatives,


00:16:37.940 --> 00:16:39.820
and one of them was pytest Parallel,


00:16:39.820 --> 00:16:42.780
which I know I've run across,


00:16:42.780 --> 00:16:45.420
but I haven't played with it for a while, so I tried it out.


00:16:45.420 --> 00:16:47.820
It's actually really cool.


00:16:47.820 --> 00:16:51.060
One of the pytest X does a lot.


00:16:51.060 --> 00:16:56.060
One of the things it does is it's not just multiprocessor,


00:16:56.060 --> 00:16:58.540
but it can be on actual different computers,


00:16:58.540 --> 00:16:59.660
so you can launch them on.


00:16:59.660 --> 00:17:02.060
>> Oh, nice. Like grid computing almost.


00:17:02.060 --> 00:17:03.620
>> Yeah. You can SSH into


00:17:03.620 --> 00:17:06.460
a different systems and have it run in parallel.


00:17:06.460 --> 00:17:10.700
But I don't usually need that kind of power.


00:17:10.700 --> 00:17:12.940
The one thing it doesn't do is thread,


00:17:12.940 --> 00:17:16.260
so it's process-based and pytestParallel does both.


00:17:16.260 --> 00:17:22.660
You can give it where we have,


00:17:22.660 --> 00:17:24.900
I'm going to go down to the examples.


00:17:24.900 --> 00:17:28.700
You can give it number of workers and that's


00:17:28.700 --> 00:17:33.020
how many processes it'll spin up or how many CPUs.


00:17:33.020 --> 00:17:35.860
Now, you can also give it test per worker,


00:17:35.860 --> 00:17:38.700
and then it'll run in multi-threading mode,


00:17:38.700 --> 00:17:41.460
and you can give it auto on both of these.


00:17:41.460 --> 00:17:45.340
And it's a, this is extremely useful for,


00:17:45.340 --> 00:17:47.740
you have to, by default this is turned off,


00:17:47.740 --> 00:17:50.060
by default the features, if you just say


00:17:50.060 --> 00:17:51.580
workers equals five or something,


00:17:51.580 --> 00:17:54.580
it won't do multiple thread, multi-threading.


00:17:54.580 --> 00:17:55.780
And the reason is,


00:17:55.780 --> 00:17:59.460
because you need to make sure your tests are thread safe,


00:17:59.460 --> 00:18:01.580
and many are not.


00:18:01.580 --> 00:18:03.100
So I tried it on a couple of my--


00:18:03.100 --> 00:18:05.900
- Even if they're isolated, they might not be thread safe, right?


00:18:05.900 --> 00:18:07.100
- Yes.


00:18:07.100 --> 00:18:09.820
- That's another level of consideration.


00:18:09.820 --> 00:18:14.500
- However, if there are, there's a lot of small, especially small,


00:18:14.500 --> 00:18:17.220
not really unit, like system tests, but a lot of unit tests


00:18:17.220 --> 00:18:19.220
are just testing a little Python code.


00:18:19.220 --> 00:18:21.740
If you've got a part of that is a lot of projects,


00:18:21.740 --> 00:18:23.780
that's a big chunk of the test load.


00:18:23.780 --> 00:18:26.740
So being able to do multi-threading is really nice.


00:18:26.740 --> 00:18:29.700
But you know, even with just multi-processing,


00:18:29.700 --> 00:18:31.940
I tried this on a few different projects


00:18:31.940 --> 00:18:35.040
and there were, like I tried it on Flask,


00:18:35.040 --> 00:18:39.340
and the parallel version,


00:18:39.340 --> 00:18:40.840
using pytest parallel,


00:18:40.840 --> 00:18:44.280
was like three times faster than the XDist version.


00:18:44.280 --> 00:18:47.280
>> Oh, wow.


00:18:47.280 --> 00:18:50.260
>> There was another one that Bruno mentioned,


00:18:50.260 --> 00:18:51.960
but I think these two are really solid,


00:18:51.960 --> 00:18:53.360
XDist and parallel.


00:18:53.360 --> 00:18:55.640
If you want to speed up your test run times,


00:18:55.640 --> 00:18:59.140
I would try both on your project and just play with them


00:18:59.140 --> 00:19:02.420
and see which one's faster on.


00:19:02.420 --> 00:19:04.540
Many of the projects I tried parallel


00:19:04.540 --> 00:19:07.780
was at least as fast or faster than Extest.


00:19:07.780 --> 00:19:09.380
So it's kind of nice.


00:19:09.380 --> 00:19:10.220
- Yeah, it's cool.


00:19:10.220 --> 00:19:11.100
This looks great.


00:19:11.100 --> 00:19:12.180
I like it.


00:19:12.180 --> 00:19:15.060
And having your test run faster is always good.


00:19:15.060 --> 00:19:16.140
Do you do anything crazy?


00:19:16.140 --> 00:19:18.840
Like do you set up your editor to auto run tests


00:19:18.840 --> 00:19:20.860
on file change or anything like that?


00:19:20.860 --> 00:19:23.540
- Sometimes.


00:19:23.540 --> 00:19:24.380
One of the things that--


00:19:24.380 --> 00:19:25.500
- I've always, I've done it a few times,


00:19:25.500 --> 00:19:26.660
but it always makes me nervous.


00:19:26.660 --> 00:19:28.380
I'm like, ah, it's unnerving to me


00:19:28.380 --> 00:19:29.380
that it just keeps running.


00:19:29.380 --> 00:19:32.880
>> One of the things that I really like around that


00:19:32.880 --> 00:19:35.380
was added to pytest not too long ago


00:19:35.380 --> 00:19:37.380
was stepwise.


00:19:37.380 --> 00:19:40.380
So that's not really running it all the time,


00:19:40.380 --> 00:19:44.880
but stepwise will, and this would be a handy one to run all the time.


00:19:44.880 --> 00:19:46.880
So what stepwise does is it takes,


00:19:46.880 --> 00:19:49.880
you can run all your tests in stepwise,


00:19:49.880 --> 00:19:51.380
and when you run it again,


00:19:51.380 --> 00:19:54.180
it'll start at the first failing test,


00:19:54.180 --> 00:19:56.180
because it assumes you're trying to fix something.


00:19:56.180 --> 00:19:59.580
it'll start at that and then run until it finds a failure.


00:19:59.580 --> 00:20:02.060
So if you haven't fixed this first failure,


00:20:02.060 --> 00:20:04.580
it'll just keep running that one until you fixed it,


00:20:04.580 --> 00:20:06.660
and it'll go to the next one.


00:20:06.660 --> 00:20:10.220
So I do that a lot while I'm trying to debug something.


00:20:10.220 --> 00:20:11.340
>> That's cool.


00:20:11.340 --> 00:20:13.420
>> Hooking that up with an auto,


00:20:13.420 --> 00:20:14.460
like a watch feature,


00:20:14.460 --> 00:20:17.780
there's a bunch of ways you can watch your code to do that.


00:20:17.780 --> 00:20:18.460
>> Yeah.


00:20:18.460 --> 00:20:19.260
>> Yeah, it's fun.


00:20:19.260 --> 00:20:21.260
>> Nice. Very cool.


00:20:21.260 --> 00:20:23.520
So let's do some real-time follow-up here.


00:20:23.520 --> 00:20:27.160
First, Alvaro is being all mischievous asking,


00:20:27.160 --> 00:20:29.880
"I wonder what would happen if I install both plugins,


00:20:29.880 --> 00:20:32.440
both XDist and Parallel?"


00:20:32.440 --> 00:20:36.260
>> I don't know if you can run them at the same time. I should try.


00:20:36.260 --> 00:20:38.420
I have it installed on the Flask one.


00:20:38.420 --> 00:20:41.180
I installed both of them and then tried them both,


00:20:41.180 --> 00:20:43.000
but not at the same time. I'll have to try that.


00:20:43.000 --> 00:20:45.120
>> Fork the forks. It's going to go so fast.


00:20:45.120 --> 00:20:46.860
Then just going back to PyScript,


00:20:46.860 --> 00:20:49.300
there's tons of excitement about PyScript.


00:20:49.300 --> 00:20:49.600
>> Yeah.


00:20:49.600 --> 00:20:52.080
>> JL is excited, Brandon is excited.


00:20:52.080 --> 00:20:55.140
And David says, "I hope someday I can say,


00:20:55.140 --> 00:20:57.520
"back in my day, you couldn't just learn Python,


00:20:57.520 --> 00:20:59.160
"you had to learn JavaScript too."


00:20:59.160 --> 00:21:00.920
- Yeah, indeed, indeed.


00:21:00.920 --> 00:21:05.360
- Let's see, so I got one more to cover


00:21:05.360 --> 00:21:07.120
that is gonna be fun as well.


00:21:07.120 --> 00:21:12.120
And this one comes to us from former guest co-host,


00:21:12.120 --> 00:21:15.160
Michael Feigert, sorry, Matthew Feigert.


00:21:15.160 --> 00:21:17.640
And Matthew is a great supporter of the show,


00:21:17.640 --> 00:21:21.520
sends all sorts of interesting things in to help us out.


00:21:21.520 --> 00:21:22.920
- Man, good ideas.


00:21:22.920 --> 00:21:24.560
And this is yet another one


00:21:24.560 --> 00:21:27.760
coming from the data science side of things,


00:21:27.760 --> 00:21:30.120
saying, you know, one of the things you have to do often


00:21:30.120 --> 00:21:33.320
in say a Jupyter notebook is go download a file


00:21:33.320 --> 00:21:37.080
off of an API or just some link or S3 bucket or whatever,


00:21:37.080 --> 00:21:38.040
and you want to process it.


00:21:38.040 --> 00:21:41.520
And if you use requests, wow, great.


00:21:41.520 --> 00:21:44.840
You end up making the request, verifying that it worked,


00:21:44.840 --> 00:21:46.280
reading the stream into bytes,


00:21:46.280 --> 00:21:48.980
writing the bytes to a file, picking a file name,


00:21:48.980 --> 00:21:50.680
and then using that file name to open it,


00:21:50.680 --> 00:21:53.160
and then say, now you can process it, right?


00:21:53.160 --> 00:21:56.000
So there's this thing called Pooch,


00:21:56.000 --> 00:21:57.600
a friend to fetch your data files.


00:21:57.600 --> 00:21:59.320
All right, Pooch, go get my files.


00:21:59.320 --> 00:22:01.680
Like a little friendly dog


00:22:01.680 --> 00:22:04.800
that also seems to hold a snake in its mouth.


00:22:04.800 --> 00:22:05.880
So that's pretty cool.


00:22:05.880 --> 00:22:09.440
Anyway, who wouldn't want a dog that can wrangle snakes


00:22:09.440 --> 00:22:11.080
to go help you with your notebooks?


00:22:11.080 --> 00:22:14.720
Anyway, the idea is you can do all of what I described


00:22:14.720 --> 00:22:17.040
with requests, you can do that in one line of code.


00:22:17.040 --> 00:22:17.880
- Oh, wow.


00:22:17.880 --> 00:22:19.640
- Yeah, and you get other cool features as well.


00:22:19.640 --> 00:22:23.780
So it says, look, you can just make this one function call


00:22:23.780 --> 00:22:26.680
and it'll save it and it'll also cache your files locally.


00:22:26.680 --> 00:22:28.520
So some of these files that data scientists


00:22:28.520 --> 00:22:30.600
especially work with are massive, right?


00:22:30.600 --> 00:22:31.480
You know, it's like a gig.


00:22:31.480 --> 00:22:33.040
And every time you run the notebook,


00:22:33.040 --> 00:22:34.960
you don't want it to download the gig again.


00:22:34.960 --> 00:22:36.720
You just want it to run more quickly.


00:22:36.720 --> 00:22:39.480
So you can set up a location for it to cache it.


00:22:39.480 --> 00:22:43.240
You can pass in a hash of the file to say,


00:22:43.240 --> 00:22:47.000
I wanna get this file and I expect it to be this MD5


00:22:47.000 --> 00:22:49.000
or whatever the heck the hash is that they're using


00:22:49.000 --> 00:22:51.080
so that you can be sure it doesn't change, right?


00:22:51.080 --> 00:22:53.960
So if you're doing like reproducible data science,


00:22:53.960 --> 00:22:56.120
you say, what you do is you download this file,


00:22:56.120 --> 00:22:58.440
then you apply this algorithm, then you get this picture.


00:22:58.440 --> 00:23:00.880
Well, if the data changes, I bet the picture changes, right?


00:23:00.880 --> 00:23:04.120
And so you can put it like a layer of verification


00:23:04.120 --> 00:23:06.160
that it's unchanged from the last time


00:23:06.160 --> 00:23:08.240
you decided what it should be.


00:23:08.240 --> 00:23:09.080
That's pretty cool.


00:23:09.080 --> 00:23:11.040
You can do multiple protocols.


00:23:11.040 --> 00:23:14.080
So not just HTTP, HTTPS, but FTP.


00:23:14.080 --> 00:23:15.900
Oh my gosh, SFTP.


00:23:15.900 --> 00:23:18.200
Oh yeah, it's what else basic off.


00:23:18.200 --> 00:23:22.280
It'll also automatically resolve DOIs,


00:23:22.280 --> 00:23:23.960
digital object identifiers,


00:23:23.960 --> 00:23:28.400
which are used in places like Figshare and Zenodo.


00:23:28.400 --> 00:23:30.440
This is about the reproducible science.


00:23:30.440 --> 00:23:33.400
Like here's the file and we've been


00:23:33.400 --> 00:23:36.640
assigned an immutable ID that we can always refer back to it.


00:23:36.640 --> 00:23:38.840
So you can just say, here's the ID and it'll actually get the file,


00:23:38.840 --> 00:23:41.380
and it'll even unzip and decompress files upon download.


00:23:41.380 --> 00:23:41.920
>> Neat.


00:23:41.920 --> 00:23:43.200
>> Pretty neat, huh? Yeah.


00:23:43.200 --> 00:23:43.680
>> Yeah.


00:23:43.680 --> 00:23:46.720
>> Pretty straightforward. Let me see if I can find an example of.


00:23:46.720 --> 00:23:50.560
>> I like the section of learning about it.


00:23:50.560 --> 00:23:53.680
It's called training your Pooch. That's cute.


00:23:53.680 --> 00:23:55.820
>> Nice. I love it.


00:23:55.820 --> 00:23:58.020
Apparently, it has progress bars,


00:23:58.020 --> 00:24:00.180
almost download actions, logging,


00:24:00.180 --> 00:24:01.900
and you get multiple files.


00:24:01.900 --> 00:24:07.780
But the main use case is just file equals Pooch.retrieve URL, done.


00:24:07.780 --> 00:24:08.700
That seems pretty nice.


00:24:08.700 --> 00:24:10.100
>> Yeah, that's great.


00:24:10.100 --> 00:24:11.740
It's my data. Here it is.


00:24:11.740 --> 00:24:15.020
>> Cool. So Pamphil Roy on the audience says, "Hey folks,


00:24:15.020 --> 00:24:20.860
funny we're adding this to SciPy optional to have the SciPy data set sub module.


00:24:20.860 --> 00:24:23.020
Scikit-image is using this as well.


00:24:23.020 --> 00:24:24.220
I had no idea. Very cool.


00:24:24.220 --> 00:24:25.380
Thanks for the extra background there.


00:24:25.380 --> 00:24:25.780
>> Cool.


00:24:25.780 --> 00:24:27.420
>> Yeah. But I think this is great.


00:24:27.420 --> 00:24:30.340
In fact, I know it sells itself,


00:24:30.340 --> 00:24:32.780
it builds itself as being for data science.


00:24:32.780 --> 00:24:35.180
I also like to download files sometimes and


00:24:35.180 --> 00:24:37.860
not go through five or six lines of code. I could use this.


00:24:37.860 --> 00:24:41.020
>> Yeah. There's a lot of stuff that data science people are


00:24:41.020 --> 00:24:44.020
doing that we can use in lots of other fields.


00:24:44.020 --> 00:24:46.580
>> Indeed. I do think that's actually one of


00:24:46.580 --> 00:24:49.820
the really interesting aspects of Python,


00:24:49.820 --> 00:24:52.300
is we have so many people from these different areas that it's


00:24:52.300 --> 00:24:55.260
not just all CS grads doing the same thing.


00:24:55.260 --> 00:24:55.980
>> Yeah.


00:24:55.980 --> 00:24:58.000
>> Yeah, for sure. All right.


00:24:58.000 --> 00:25:01.260
Well, those are my items for today, Brian.


00:25:01.260 --> 00:25:05.220
>> Nice. I don't have any extras today.


00:25:05.220 --> 00:25:07.720
Do you have any extra stuff?


00:25:07.720 --> 00:25:10.700
>> I do. I do have extras.


00:25:10.700 --> 00:25:13.220
This one I'm very, very excited about.


00:25:13.220 --> 00:25:16.860
I have a new course that I just released


00:25:16.860 --> 00:25:18.260
called Up and Running with Git,


00:25:18.260 --> 00:25:21.060
a Pragmatic UI-Based Introduction.


00:25:21.060 --> 00:25:23.260
So I'm really excited, I just released,


00:25:23.260 --> 00:25:24.820
I haven't really even announced it yet,


00:25:24.820 --> 00:25:27.420
but I finished getting it all public and online


00:25:27.420 --> 00:25:29.540
and turned all the GitHub repos public


00:25:29.540 --> 00:25:32.120
and all that stuff right before we jumped on the call today.


00:25:32.120 --> 00:25:34.980
And the idea is there are tons of Git courses,


00:25:34.980 --> 00:25:36.020
so why create a Git course?


00:25:36.020 --> 00:25:38.220
Well, I feel like so many of them are just like,


00:25:38.220 --> 00:25:41.660
okay, we're just gonna work in the terminal


00:25:41.660 --> 00:25:44.100
or the command prompt, and you're just going to assume


00:25:44.100 --> 00:25:46.940
that that's the world of Git that you live in.


00:25:46.940 --> 00:25:47.220
>> Yeah.


00:25:47.220 --> 00:25:48.980
>> At least common denominator approach.


00:25:48.980 --> 00:25:50.700
While that is useful,


00:25:50.700 --> 00:25:52.780
I don't think that's how most people are working.


00:25:52.780 --> 00:25:55.060
If you're in Visual Studio Code or PyCharm,


00:25:55.060 --> 00:25:56.860
there's great hotkeys just to do


00:25:56.860 --> 00:25:58.780
the Git stuff and see the history and whatnot,


00:25:58.780 --> 00:26:01.820
and there's other tools like Sourcetree and Power and others.


00:26:01.820 --> 00:26:04.220
It takes this approach of,


00:26:04.220 --> 00:26:06.080
well, let's take all the modern tools that give you


00:26:06.080 --> 00:26:09.180
the best visibility and teach you Git with that.


00:26:09.180 --> 00:26:10.420
Super fun.


00:26:10.420 --> 00:26:13.500
>> Which GUI tools are you using then? Which ones are you showing?


00:26:13.500 --> 00:26:16.700
>> Visual Studio Code, PyCharm, SourceTree.


00:26:16.700 --> 00:26:17.140
>> Okay.


00:26:17.140 --> 00:26:19.500
>> Those are the thing. I've done a lot of work.


00:26:19.500 --> 00:26:23.340
I've tried to take some of my experience from doing some work on YouTube where I was


00:26:23.340 --> 00:26:27.340
experimenting with setup and presentations and stuff.


00:26:27.340 --> 00:26:31.740
I think I have a really neat polished experience for this course,


00:26:31.740 --> 00:26:35.700
with lots of cool visuals and graphics and video and stuff.


00:26:35.700 --> 00:26:37.220
Hopefully, people will really enjoy it.


00:26:37.220 --> 00:26:38.780
Anyway, this is my extra.


00:26:38.780 --> 00:26:40.660
I just sent this out to the world.


00:26:40.660 --> 00:26:43.000
>> I'm pretty excited about this. Nice. Congrats.


00:26:43.000 --> 00:26:44.860
>> Yeah. Thanks. Thanks so much.


00:26:44.860 --> 00:26:47.680
You have no extras. Does that mean you're ready for some humor?


00:26:47.680 --> 00:26:49.220
>> Yes, always.


00:26:49.220 --> 00:26:51.560
>> All right. This one, I chose this,


00:26:51.560 --> 00:26:54.820
honestly, I chose it just because of the title.


00:26:54.820 --> 00:27:02.900
Is this Robert Downey Jr. looking at somebody in some wizard situation?


00:27:02.900 --> 00:27:05.460
>> Yeah, this is like Endgame or something.


00:27:05.460 --> 00:27:07.020
>> Okay. Yeah, I don't know the movie.


00:27:07.020 --> 00:27:09.440
Apparently, I stopped watching movies at some point.


00:27:09.440 --> 00:27:11.480
Now, I'm out of touch.


00:27:11.480 --> 00:27:13.840
Anyway, the title is,


00:27:13.840 --> 00:27:16.500
when your code stopped working during an interview,


00:27:16.500 --> 00:27:18.920
or it could be a demo presentation or whatever.


00:27:18.920 --> 00:27:20.580
You want to tell us what this is about,


00:27:20.580 --> 00:27:21.560
what's going on here?


00:27:21.560 --> 00:27:26.800
>> He's looking back at Banner, so who's the Hulk.


00:27:26.800 --> 00:27:29.840
He says, "Dude, you're embarrassing me in front of the wizards."


00:27:29.840 --> 00:27:34.200
Yeah, because Banner wasn't able to become the Hulk.


00:27:34.200 --> 00:27:37.320
>> Try to. Don't embarrass me in front of the wizards.


00:27:37.320 --> 00:27:40.520
I love to think of programmers as the modern day wizards.


00:27:40.520 --> 00:27:44.240
We can think of things and then they come into existence.


00:27:44.240 --> 00:27:45.040
>> Yeah.


00:27:45.040 --> 00:27:47.400
>> It's good. Also, while working on that Git course,


00:27:47.400 --> 00:27:49.360
I had this pretty fun experience,


00:27:49.360 --> 00:27:52.120
right while I was recording it.


00:27:52.120 --> 00:27:53.560
>> Nice.


00:27:53.560 --> 00:27:55.360
>> I'm just sitting there and then-


00:27:55.360 --> 00:27:56.280
>> Git was down.


00:27:56.280 --> 00:27:58.640
>> How often does GitHub itself go down?


00:27:58.640 --> 00:28:02.040
But no, there's like the OctaCat is falling,


00:28:02.040 --> 00:28:05.380
like with a 500 sign in his hand,


00:28:05.380 --> 00:28:09.260
which of course made me redo that section of the course.


00:28:09.260 --> 00:28:12.660
>> Yeah. I like the expression on your face for that.


00:28:12.660 --> 00:28:15.660
>> Exactly. People seem to really like that tweet.


00:28:15.660 --> 00:28:17.980
I'll put it in the show notes if people want to check it out.


00:28:17.980 --> 00:28:20.820
Anyway, dude, don't embarrass me in front of the lizards.


00:28:20.820 --> 00:28:22.260
It's what I got for you.


00:28:22.260 --> 00:28:23.740
>> Yeah. Good.


00:28:23.740 --> 00:28:24.860
>> Good.


00:28:24.860 --> 00:28:28.280
>> Well, thanks a lot again. It's a great show.


00:28:28.280 --> 00:28:30.580
>> Yeah, sure was. Thanks, Brian.


00:28:30.580 --> 00:28:31.580
Thanks for everyone who came.

