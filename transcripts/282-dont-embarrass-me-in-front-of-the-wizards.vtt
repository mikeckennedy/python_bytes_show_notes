WEBVTT

00:00:00.140 --> 00:00:05.280
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.280 --> 00:00:11.140
This is episode 282, recorded May 3rd, 2022.

00:00:11.140 --> 00:00:12.080
I'm Michael Kennedy.

00:00:12.080 --> 00:00:13.080
And I am Brian Okken.

00:00:13.080 --> 00:00:16.160
It's great to have you here, Brian. It's just us, just the two of us.

00:00:16.160 --> 00:00:17.800
Yeah, just like old times.

00:00:17.800 --> 00:00:22.360
I know, but we have our friends out in the audience, so we're not entirely alone.

00:00:22.360 --> 00:00:22.900
It's great.

00:00:22.900 --> 00:00:25.380
So let's kick it off.

00:00:25.380 --> 00:00:29.380
I know you have a particularly exciting announcement.

00:00:29.380 --> 00:00:31.460
It's a very important topic to cover here.

00:00:31.460 --> 00:00:33.680
So let's go do it.

00:00:33.680 --> 00:00:35.880
Okay, so PyScript.

00:00:35.880 --> 00:00:43.420
So this was an announcement at PyCon US by Anaconda's CEO, Peter Wang, during a keynote.

00:00:43.420 --> 00:00:46.880
I wasn't there, but everybody was tweeting about it.

00:00:46.880 --> 00:00:49.400
So it almost felt like I was there.

00:00:49.400 --> 00:00:55.740
But I haven't seen the presentation, so I can't wait till that goes online.

00:00:55.740 --> 00:00:57.300
I know.

00:00:57.460 --> 00:01:01.960
Are the videos, I have not seen the videos for the presentations at PyCon out yet.

00:01:01.960 --> 00:01:02.620
Are they out yet?

00:01:02.620 --> 00:01:03.440
And I just missed it?

00:01:03.440 --> 00:01:04.100
I haven't looked.

00:01:04.100 --> 00:01:05.120
Is my YouTube broken?

00:01:05.120 --> 00:01:07.960
It should be full of this stuff.

00:01:07.960 --> 00:01:11.020
Like, what's up with, is it supposed to be next day or something?

00:01:11.020 --> 00:01:11.480
I don't know.

00:01:11.480 --> 00:01:12.840
I know, I know.

00:01:12.840 --> 00:01:13.200
Anyway.

00:01:13.580 --> 00:01:15.940
I would have loved to live stream it, but I didn't see an option.

00:01:15.940 --> 00:01:19.540
So anyway, I'm looking forward to watching this one in particular when it comes out, because

00:01:19.540 --> 00:01:20.200
this is big news.

00:01:20.200 --> 00:01:22.640
So PyScript is Python in the browser.

00:01:22.640 --> 00:01:24.180
So what does that mean?

00:01:24.180 --> 00:01:29.620
It is built on top of Pyodide, which is a port of CPython based on WebAssembly.

00:01:29.820 --> 00:01:32.140
I'm pretty sure we've covered Pyodide before.

00:01:32.140 --> 00:01:34.840
So this is a pretty neat thing.

00:01:34.840 --> 00:01:40.100
And one of the things that this, so the PyScript.net, you go to it, it's got a little, it's kind

00:01:40.100 --> 00:01:43.880
of actually, it's like hype and it sounds neat.

00:01:43.880 --> 00:01:45.220
And you can do Python in the browser.

00:01:45.220 --> 00:01:46.820
Neat with the PyScript tags.

00:01:46.820 --> 00:01:48.040
But what does that mean?

00:01:48.040 --> 00:01:53.620
So there's a, if you go down to the bottom, there's a GitHub repo that you can go look

00:01:53.620 --> 00:01:53.900
at.

00:01:53.900 --> 00:01:55.240
This is what I suggest.

00:01:55.240 --> 00:01:58.400
And this will talk about, there's a getting started guide.

00:01:58.400 --> 00:02:02.040
But what I did is just followed this.

00:02:02.040 --> 00:02:08.760
I cloned the repo and then I went in and did the, into the JavaScript area and then did NPM

00:02:08.760 --> 00:02:12.300
install and then did this dev run, run dev thing.

00:02:12.300 --> 00:02:15.560
So this only take me like five minutes to get this far.

00:02:16.120 --> 00:02:21.520
And, and what you have is you've got one of the things that it has is it has an examples

00:02:21.520 --> 00:02:26.520
folder and you can just open this up now in your local, your local browse, local host.

00:02:26.520 --> 00:02:28.360
And there's all these cool demos.

00:02:28.360 --> 00:02:33.640
Like there's a, a REPL where you can just do, it's kind of like a Jupyter where you can

00:02:33.640 --> 00:02:35.600
say like X equals three.

00:02:35.600 --> 00:02:36.340
Let's do this.

00:02:36.340 --> 00:02:37.480
And then X.

00:02:37.480 --> 00:02:40.360
And then if I do shift enter, it evaluates it.

00:02:40.360 --> 00:02:41.220
How neat is that?

00:02:41.220 --> 00:02:41.880
That's pretty neat.

00:02:41.880 --> 00:02:42.600
That's awesome.

00:02:42.600 --> 00:02:43.380
Yeah.

00:02:43.380 --> 00:02:45.160
To do app here.

00:02:45.440 --> 00:02:49.500
So make sure you listen to our podcasts, go buy Python testing with pytest.

00:02:49.500 --> 00:02:50.080
We'll check that.

00:02:50.080 --> 00:02:51.460
Cause we know you already bought that.

00:02:51.460 --> 00:02:56.640
So, and then there's an example with D3 graphics.

00:02:56.640 --> 00:02:57.440
This is neat.

00:02:57.440 --> 00:02:59.460
I don't think I've ever done this.

00:02:59.460 --> 00:03:00.880
There's an Altair example.

00:03:00.880 --> 00:03:02.220
And this is pretty fun.

00:03:02.220 --> 00:03:04.400
Cause you click around and it changes the above.

00:03:04.400 --> 00:03:06.140
It's like an interactive thing.

00:03:06.140 --> 00:03:07.460
This is fun.

00:03:07.820 --> 00:03:10.460
I, we, we use Altair with a project at work.

00:03:10.460 --> 00:03:11.180
So this is neat.

00:03:11.880 --> 00:03:13.040
The Mandelbrot set.

00:03:13.040 --> 00:03:14.260
So there's some code.

00:03:14.260 --> 00:03:15.980
So all of this code is in the repo.

00:03:15.980 --> 00:03:19.360
So you can look at the examples and look exactly how the code is done.

00:03:19.360 --> 00:03:22.560
There's a HTML file and a Python file for all of these.

00:03:22.980 --> 00:03:24.100
So you can check it out.

00:03:24.100 --> 00:03:25.980
Actually, I don't know about the Python thing.

00:03:25.980 --> 00:03:30.040
It's a, it's, it's HTML and Python within the HTML code embedded.

00:03:30.320 --> 00:03:34.700
So there isn't a separate file, but you have, you can do imports and all this sort of stuff

00:03:34.700 --> 00:03:34.940
too.

00:03:34.940 --> 00:03:39.480
Um, Oh, I went too far, but I wanted to bring up, there's also an article that we're going

00:03:39.480 --> 00:03:45.000
to link to in the show notes that is called, PyScript, unleash the power of Python

00:03:45.000 --> 00:03:45.640
in your browser.

00:03:45.640 --> 00:03:52.240
Um, this is by Eric Lewis Lewinson and, it runs through it's, it's a pretty interesting,

00:03:52.240 --> 00:03:54.100
a little quick read of what it is.

00:03:54.100 --> 00:03:57.720
If you're not familiar with, WebAssembly and pyodide.

00:03:57.720 --> 00:03:58.880
So it's nice.

00:03:59.300 --> 00:04:00.840
What do you think, Michael?

00:04:00.840 --> 00:04:01.700
So excited.

00:04:01.700 --> 00:04:02.760
I am very excited.

00:04:02.760 --> 00:04:10.540
You know, there's been progress on the WebAssembly plus Python side on several occurrences that

00:04:10.540 --> 00:04:15.600
were, they give you a sense of what's possible, but they didn't give you a thing to build with.

00:04:15.600 --> 00:04:16.420
You know what I mean?

00:04:16.420 --> 00:04:16.680
Yeah.

00:04:16.680 --> 00:04:21.740
So for example, pyodide is awesome, but it's kind of like, well, if I want to sort of host

00:04:21.740 --> 00:04:25.460
a Jupyter kernel in my browser, like I can, I can kind of do that.

00:04:25.460 --> 00:04:25.720
Right.

00:04:26.080 --> 00:04:32.120
Um, the WebAssembly Python itself is great, but it doesn't specify a way to have a UI

00:04:32.120 --> 00:04:34.280
of your webpage interact with Python.

00:04:34.280 --> 00:04:36.900
It's just, oh, you could execute Python over here.

00:04:36.900 --> 00:04:38.500
Well, like, and then what, you know what I mean?

00:04:38.500 --> 00:04:43.460
Which is, which is still good, but there's not something where like, I can have a button

00:04:43.460 --> 00:04:46.600
on there that like wires up to this thing in Python.

00:04:46.600 --> 00:04:49.740
And I can have this list that binds in that way and so on.

00:04:49.740 --> 00:04:53.180
And this looks like we might be there.

00:04:53.180 --> 00:04:58.580
Like one of the things they talk about on the page is not just running Python in the browser

00:04:58.580 --> 00:05:03.760
and the Python ecosystem, as you pointed out, but really importantly, two more things, Python

00:05:03.760 --> 00:05:07.740
with JavaScript, bi-directional communication between Python and JavaScript objects.

00:05:07.740 --> 00:05:08.180
Yeah.

00:05:08.180 --> 00:05:13.060
So you can wire into like events on the page and other, DOM type of things.

00:05:13.060 --> 00:05:13.660
Yes.

00:05:13.660 --> 00:05:19.220
And then a visual application development ties in with that with, use readily available

00:05:19.220 --> 00:05:22.740
curated UI components, such as buttons, containers, text boxes, and more.

00:05:22.740 --> 00:05:23.640
Oh yeah.

00:05:23.640 --> 00:05:23.640
Yeah.

00:05:24.780 --> 00:05:25.140
Yeah.

00:05:25.140 --> 00:05:28.940
I mean, like these are just a little quick examples, but I'd love to see some, some,

00:05:28.940 --> 00:05:30.620
uh, bigger examples of things like that.

00:05:30.620 --> 00:05:34.020
Like, being able to connect, it, you know, yeah.

00:05:34.020 --> 00:05:37.800
JavaScript interaction with, stuff on, on the Python side.

00:05:37.800 --> 00:05:38.620
That'll be neat.

00:05:38.620 --> 00:05:39.060
Yeah.

00:05:39.060 --> 00:05:43.120
It's weird to see Python written just straight in the browser, you know?

00:05:43.120 --> 00:05:43.680
Yeah.

00:05:43.680 --> 00:05:48.100
Like here you have like angle bracket, pi dash script, and then just import anti-gravity,

00:05:48.100 --> 00:05:49.240
anti-gravity dot fly.

00:05:49.240 --> 00:05:51.140
Like, wait, what?

00:05:51.140 --> 00:05:53.520
Well, so this, this is a good example.

00:05:53.680 --> 00:05:57.240
I, I picked this example for one is because it does, it does do an import.

00:05:57.240 --> 00:06:00.360
So this, it, there's like a path thing you see, you set up.

00:06:00.360 --> 00:06:04.420
So you can put code, you can put code, all your code doesn't have to be in HTML.

00:06:04.420 --> 00:06:07.180
It can be in, in a Python file.

00:06:07.180 --> 00:06:10.060
So you can debug it there, which that's where you want to debug it.

00:06:10.060 --> 00:06:12.500
And then you can import it and call it within Python.

00:06:12.500 --> 00:06:17.420
And so this is probably more where I would use it is, putting most of my code somewhere

00:06:17.420 --> 00:06:17.780
else.

00:06:17.780 --> 00:06:18.560
And then.

00:06:18.560 --> 00:06:19.060
Yeah.

00:06:19.060 --> 00:06:19.960
That's what I want to see.

00:06:20.040 --> 00:06:25.940
I would want to see just Python files and just, effectively a script tag for it.

00:06:25.940 --> 00:06:29.460
I mean, you probably, maybe you can't do it directly as a script tag, but you could do,

00:06:29.460 --> 00:06:32.340
you know, bracket, high script, and then just import and run.

00:06:32.340 --> 00:06:32.880
Right.

00:06:32.880 --> 00:06:33.400
Yeah.

00:06:33.400 --> 00:06:34.280
So the point, basically.

00:06:34.280 --> 00:06:35.260
I haven't looked at this before.

00:06:35.260 --> 00:06:42.160
So the anti-gravity.py that is, bringing in is bringing in some pyodide stuff and,

00:06:42.160 --> 00:06:43.900
uh, to be able to work it.

00:06:43.900 --> 00:06:50.780
So I'm seeing some from, doc, this is Python code from document or sorry, from JS import

00:06:50.780 --> 00:06:51.440
document.

00:06:51.440 --> 00:06:52.000
Yeah.

00:06:52.000 --> 00:06:52.900
And set interval.

00:06:52.900 --> 00:06:55.680
And so those are the things you do there.

00:06:55.680 --> 00:06:56.400
Uh, let's see.

00:06:56.400 --> 00:06:58.200
Are there any, any callbacks?

00:06:58.200 --> 00:07:00.000
I don't see any callbacks there.

00:07:00.000 --> 00:07:00.520
Oh yeah.

00:07:00.520 --> 00:07:00.720
Yeah.

00:07:00.720 --> 00:07:04.700
This set interval as a callback self.move when the interval, the JavaScript interval

00:07:04.700 --> 00:07:05.140
fires.

00:07:05.140 --> 00:07:09.500
So under, under fly, that is, hooking into a timer there.

00:07:09.500 --> 00:07:10.040
Yeah.

00:07:10.040 --> 00:07:10.660
Timer callback.

00:07:10.660 --> 00:07:11.960
So we should check that out.

00:07:11.960 --> 00:07:12.980
So where's, where's that?

00:07:12.980 --> 00:07:17.540
Um, so the, I should have done this ahead of time.

00:07:17.540 --> 00:07:20.860
The anti-gravity is not linked to, but I'll just like bring it up.

00:07:20.860 --> 00:07:23.260
Anti-gravity based on.

00:07:23.260 --> 00:07:25.340
Wow.

00:07:25.340 --> 00:07:26.500
Oh my gosh.

00:07:26.500 --> 00:07:27.460
This is so amazing.

00:07:27.460 --> 00:07:28.700
People have to do this.

00:07:28.700 --> 00:07:29.820
Oh, this is cool.

00:07:30.500 --> 00:07:35.880
We all know import anti-gravity and we've got to know the XKCD that comes up, but yes,

00:07:35.880 --> 00:07:37.120
this is so good.

00:07:37.120 --> 00:07:37.760
It's great.

00:07:37.760 --> 00:07:38.440
It's alive.

00:07:38.440 --> 00:07:41.120
It's not just, is the person who, who says, how are you flying?

00:07:41.120 --> 00:07:42.800
The person says, I'm playing with Python.

00:07:42.800 --> 00:07:44.960
Like that thing is alive and cruising around.

00:07:44.960 --> 00:07:45.500
I love it.

00:07:45.500 --> 00:07:45.840
Yeah.

00:07:45.840 --> 00:07:47.400
And that's based on the callback, right?

00:07:47.400 --> 00:07:51.460
That's, that's calling Python based on the set interval, timer callback in JavaScript.

00:07:51.460 --> 00:07:51.860
Yep.

00:07:51.860 --> 00:07:52.420
Yeah.

00:07:52.420 --> 00:07:55.140
And, and to me, that has been the missing piece.

00:07:55.140 --> 00:07:56.800
Like how do I wire up?

00:07:56.800 --> 00:08:00.480
It's like great if I can just execute Python and have, you know, like a number of things.

00:08:00.480 --> 00:08:03.640
But what I want is view and Python or reactive.

00:08:03.640 --> 00:08:08.820
I want to build the UI and Python and just not deal with JavaScript and be able to do so

00:08:08.820 --> 00:08:11.100
many more things on the front end.

00:08:11.160 --> 00:08:19.440
I mean, this opens up stuff like, progressive web apps, which could be really amazing for the Python space.

00:08:19.440 --> 00:08:19.660
Right?

00:08:19.660 --> 00:08:21.020
Like I'm here in Vivaldi.

00:08:21.020 --> 00:08:25.820
If I go to my email client, just in the browser, I can right click and install.

00:08:25.820 --> 00:08:28.000
It gets its own app that works offline.

00:08:28.000 --> 00:08:30.660
It like pull this data down into local DB or whatever.

00:08:30.660 --> 00:08:32.280
Theoretically you could do this, right?

00:08:32.280 --> 00:08:35.800
You could pull down the CPython WASM.

00:08:35.800 --> 00:08:43.240
You can pull down the 5k I script file and then just somehow use JavaScript to Python to talk to local

00:08:43.240 --> 00:08:43.620
DBs.

00:08:43.620 --> 00:08:49.160
I mean, what if we get like ORMs in Python going, oh yeah, we have one of our backends is the web

00:08:49.160 --> 00:08:50.720
browser, local DB.

00:08:50.720 --> 00:08:51.280
Yeah.

00:08:51.560 --> 00:08:53.500
Or something that would mean, this is great.

00:08:53.500 --> 00:08:56.340
I would love, I'm very excited for where this might go.

00:08:56.340 --> 00:08:57.640
Sky's the limit, right?

00:08:57.640 --> 00:09:01.280
That's what that little flying character is saying at least.

00:09:01.280 --> 00:09:01.640
Yeah.

00:09:01.640 --> 00:09:03.140
Okay.

00:09:03.140 --> 00:09:05.280
So, well, good job Anaconda folks.

00:09:05.280 --> 00:09:08.000
And I believe this was Fabio and crew.

00:09:08.000 --> 00:09:09.000
So really, really nice.

00:09:09.000 --> 00:09:10.280
That was super psyched.

00:09:10.280 --> 00:09:11.840
How am I going to follow that one up, right?

00:09:11.840 --> 00:09:12.520
I mean, come on.

00:09:12.520 --> 00:09:15.980
It's just, I'll, I'll give it a try.

00:09:15.980 --> 00:09:17.200
No, I've got some good items.

00:09:17.200 --> 00:09:19.160
They're just not flying around.

00:09:19.160 --> 00:09:21.260
Amazing Python in the browser.

00:09:21.400 --> 00:09:21.640
Amazing.

00:09:21.640 --> 00:09:28.280
So Bloomberg has a lot of Python going on and Bloomberg actually has a pretty cool,

00:09:28.280 --> 00:09:32.720
like tech engineering blog where they talk about some of the stuff going on at Bloomberg,

00:09:32.720 --> 00:09:33.020
right?

00:09:33.020 --> 00:09:33.580
Yeah.

00:09:33.580 --> 00:09:39.640
One of the really good articles I read from this, from them was about how to really set

00:09:39.640 --> 00:09:41.640
up and run micro whiskey in production.

00:09:41.640 --> 00:09:45.720
And it was like this huge, long, deep list of like, here's a bunch of flags you probably

00:09:45.720 --> 00:09:46.440
never thought about.

00:09:46.440 --> 00:09:48.140
And here's why you should care about them in Python.

00:09:48.140 --> 00:09:49.180
Really good stuff.

00:09:49.560 --> 00:09:56.260
So they're back with another thing that they use that is cool called memory, like memory,

00:09:56.260 --> 00:09:57.640
but memory.

00:09:57.880 --> 00:10:00.740
It is a memory profile for Python.

00:10:00.740 --> 00:10:06.100
So if you want to understand the performance of your application, especially around memory,

00:10:06.100 --> 00:10:08.900
here's a pretty neat tool.

00:10:09.200 --> 00:10:11.960
Now, let me just get that right out of the way before I forget.

00:10:11.960 --> 00:10:13.020
Linux only.

00:10:13.020 --> 00:10:15.500
So if you're not using Linux, just close your ears.

00:10:15.500 --> 00:10:16.180
No, just kidding.

00:10:16.180 --> 00:10:21.460
Like you could all, if you're on Windows, you could just run your Python app under WSL and

00:10:21.460 --> 00:10:23.680
then profile it and then go back to running on Windows.

00:10:23.680 --> 00:10:26.400
Or if you're on Mac, just do a VM or something, right?

00:10:26.940 --> 00:10:28.760
Anyway, it only runs on Linux.

00:10:28.760 --> 00:10:33.160
But because Python is so similar across the platforms, I'm sure you could just test your

00:10:33.160 --> 00:10:35.480
code there, even if that's not the main use case.

00:10:35.480 --> 00:10:36.100
All right.

00:10:36.100 --> 00:10:39.400
So you get all these different visualizations of memory usage.

00:10:39.560 --> 00:10:45.700
It can track allocations for Python code in native extension modules, like NumPy or something

00:10:45.700 --> 00:10:46.140
like that.

00:10:46.140 --> 00:10:48.120
And even within CPython itself.

00:10:48.120 --> 00:10:52.700
So you get sort of a holistic view of the memory, which is pretty awesome.

00:10:52.700 --> 00:10:53.540
Yeah.

00:10:53.540 --> 00:10:55.760
And it'll give you different memory reports.

00:10:55.760 --> 00:10:57.040
We'll talk about them a little bit.

00:10:57.040 --> 00:11:01.100
And you can use it as a CLI tool, just like kind of like time it or whatever.

00:11:01.100 --> 00:11:03.760
You can just say memory run my app.

00:11:03.760 --> 00:11:06.760
And then when your app exits, it's like, and here's what happened.

00:11:07.040 --> 00:11:12.020
One of the things that's super challenging about complicated applications and web apps

00:11:12.020 --> 00:11:15.660
and stuff is you want to focus on a particular scenario.

00:11:15.660 --> 00:11:19.500
And there's so much overhead of like startup and other things.

00:11:19.500 --> 00:11:26.260
So for example, if I just want to profile a FastAPI API call, if I just say run it up

00:11:26.260 --> 00:11:33.500
and then I go hit that API, all of the infrastructure starting up UVicorn and FastAPI and Python, it

00:11:33.500 --> 00:11:36.280
just like, it just dwarfs whatever that little thing is usually.

00:11:36.640 --> 00:11:41.000
So there's also a programmable API that says, you know, you could create like a context manager.

00:11:41.000 --> 00:11:44.760
Like, I don't know if it actually is that way, but you could certainly build it if it doesn't exist.

00:11:44.760 --> 00:11:49.320
Like with memory profile here and just do a little block of code and then get an answer,

00:11:49.320 --> 00:11:50.760
which I think is pretty neat.

00:11:50.760 --> 00:11:53.120
Alvaro asks if it accepts an entry point.

00:11:53.620 --> 00:12:00.120
I suspect you could call an entry point because you just do the run on the command prompt.

00:12:00.120 --> 00:12:02.040
So you could probably pass it over.

00:12:02.040 --> 00:12:02.600
Whatever you run.

00:12:02.600 --> 00:12:02.980
Yeah.

00:12:02.980 --> 00:12:03.840
Yeah, exactly.

00:12:03.840 --> 00:12:08.680
But the problem is there's still like the startup of just CPython itself, right?

00:12:08.740 --> 00:12:14.620
Like I always find just the imports and all that is just way more overhead than, you know,

00:12:14.620 --> 00:12:15.720
it clutters it up.

00:12:15.720 --> 00:12:18.160
Anyway, let's hit some notable features of Memray.

00:12:18.160 --> 00:12:22.400
It traces every function call as opposed to sampling it.

00:12:22.560 --> 00:12:25.900
So instead of just going every millisecond, what are you doing now?

00:12:25.900 --> 00:12:26.560
What are you doing now?

00:12:26.560 --> 00:12:27.720
Let's just record that, right?

00:12:27.720 --> 00:12:33.600
It actually exactly traces so you don't miss any functions being called, even if they're brief.

00:12:33.600 --> 00:12:36.540
It handles native calls in C++ libraries.

00:12:36.540 --> 00:12:40.200
So the entire stack is represented in the results, which is pretty cool.

00:12:40.200 --> 00:12:40.820
That's pretty neat.

00:12:40.820 --> 00:12:42.440
Yeah, that's pretty dope.

00:12:42.440 --> 00:12:44.340
Apparently it's blazing fast.

00:12:44.340 --> 00:12:45.440
There's some kind of character.

00:12:45.440 --> 00:12:46.600
I think it's a race car there.

00:12:46.600 --> 00:12:51.140
It causes minimal slowdown in the app if you're doing Python tracing.

00:12:51.140 --> 00:12:54.440
If you do the native code stuff, it's a little bit slower, it says, but that's optional.

00:12:54.440 --> 00:12:55.680
You get a bunch of reports.

00:12:55.680 --> 00:12:56.460
We'll see those in a minute.

00:12:56.460 --> 00:12:58.080
It works on Python threads.

00:12:58.080 --> 00:13:02.320
So you can see, I know all these people watching, but you check out the webpage.

00:13:02.320 --> 00:13:05.740
There's a little thread, like a sewing thread emoji.

00:13:05.740 --> 00:13:06.660
Or a Twitter thread.

00:13:06.660 --> 00:13:09.460
Yeah, dude.

00:13:09.460 --> 00:13:12.880
So it also works on native threads, like C++ threads and native extensions,

00:13:12.880 --> 00:13:18.080
which it represents as an alien plus the thread icon.

00:13:18.080 --> 00:13:18.620
I love it.

00:13:18.620 --> 00:13:19.580
Alien threads, yeah.

00:13:19.580 --> 00:13:20.680
Yeah, yeah, yeah.

00:13:20.680 --> 00:13:22.580
So let's look over here real quick.

00:13:22.580 --> 00:13:24.760
We'll look at just, I guess, the reporting, right?

00:13:24.760 --> 00:13:26.800
I mean, the running is super simple, as I said.

00:13:26.800 --> 00:13:29.340
Memory run Python file with arguments.

00:13:29.340 --> 00:13:32.320
Or memory run dash M module with arguments.

00:13:32.320 --> 00:13:35.700
These are the places you could put your entry point and so on.

00:13:35.700 --> 00:13:39.500
And Dean, in the audience, says we've had a rich spotting.

00:13:39.500 --> 00:13:39.900
Okay?

00:13:39.900 --> 00:13:42.440
I haven't pulled that up yet, but very nice.

00:13:42.440 --> 00:13:44.720
So there's different ways in which you can view it.

00:13:44.720 --> 00:13:47.580
And the first one that I ran across, which is pretty interesting,

00:13:47.580 --> 00:13:50.900
if you're familiar with glances or you want to go old school, like top,

00:13:50.900 --> 00:13:53.980
or one of these things you can run in just the terminal and get,

00:13:53.980 --> 00:13:58.320
like, not really with rich, not rich, not rich with top,

00:13:58.320 --> 00:14:00.900
but rich output like glances,

00:14:00.900 --> 00:14:04.420
is you can run it in a live mode where,

00:14:04.420 --> 00:14:05.660
while it's running,

00:14:05.660 --> 00:14:07.620
it'll show you what's happening with the memory.

00:14:07.760 --> 00:14:08.980
That is so awesome.

00:14:08.980 --> 00:14:09.580
That's pretty cool.

00:14:09.580 --> 00:14:10.160
Yeah.

00:14:10.160 --> 00:14:10.760
Yeah.

00:14:10.760 --> 00:14:11.020
Yeah.

00:14:11.020 --> 00:14:12.660
So instead of just showing you a memory graph,

00:14:12.660 --> 00:14:13.360
it's like, guess what?

00:14:13.360 --> 00:14:17.440
We're running here right now with this many allocations and so on.

00:14:17.440 --> 00:14:17.600
Yeah.

00:14:17.600 --> 00:14:19.040
Like that looks super neat.

00:14:19.040 --> 00:14:19.300
Yeah.

00:14:19.300 --> 00:14:21.540
And if you've got something interactive,

00:14:21.540 --> 00:14:24.340
you can interact with it and watch the memory change then.

00:14:24.340 --> 00:14:25.420
Yeah.

00:14:25.420 --> 00:14:25.960
Yeah.

00:14:26.140 --> 00:14:27.780
You can cycle through threads.

00:14:27.780 --> 00:14:32.660
You can sort by total memory or its own memory of the,

00:14:32.660 --> 00:14:36.520
that's a common thing you do in profiling like this and all of the stuff it's called,

00:14:36.520 --> 00:14:38.280
or just this method itself,

00:14:38.280 --> 00:14:40.800
sort by allocations versus memory usages,

00:14:40.800 --> 00:14:41.940
all kinds of stuff.

00:14:41.940 --> 00:14:42.760
So that's really neat.

00:14:42.760 --> 00:14:47.040
It will track the allocations across forks,

00:14:47.040 --> 00:14:48.320
as in process,

00:14:48.320 --> 00:14:49.040
sub process.

00:14:49.040 --> 00:14:49.300
Oh,

00:14:49.300 --> 00:14:49.540
okay.

00:14:49.600 --> 00:14:50.300
Why would you care?

00:14:50.300 --> 00:14:51.780
Because multi-processing.

00:14:51.780 --> 00:14:54.800
If you want to track some kind of multi-processing memory workflow,

00:14:54.800 --> 00:14:56.000
it'll actually do that.

00:14:56.000 --> 00:14:57.160
Just you do dash,

00:14:57.160 --> 00:14:57.400
dash,

00:14:57.400 --> 00:14:58.040
follow fork,

00:14:58.040 --> 00:15:01.220
and it'll like aggregate the stats across the different processes.

00:15:01.220 --> 00:15:02.320
Kind of insane.

00:15:02.320 --> 00:15:05.140
Let's see if we can get down here.

00:15:05.140 --> 00:15:06.100
You can do,

00:15:06.100 --> 00:15:07.300
they have the summary reporter,

00:15:07.300 --> 00:15:08.900
which is kind of a nice,

00:15:08.900 --> 00:15:09.220
just,

00:15:09.220 --> 00:15:09.700
you know,

00:15:09.700 --> 00:15:11.020
this is probably what you would expect.

00:15:11.020 --> 00:15:11.900
Flame graphs.

00:15:11.900 --> 00:15:13.620
If I can get down here somewhere,

00:15:13.620 --> 00:15:17.060
it'll show like sort of the color and the width of these bars.

00:15:17.060 --> 00:15:19.080
It'll show you how significant it is.

00:15:19.380 --> 00:15:23.280
there's a nice tree version that'll show you the biggest 10 allocations.

00:15:23.280 --> 00:15:30.000
And then a call stack sort of in and out with trees and like how much memory is being allocated in each one of those and so on.

00:15:30.000 --> 00:15:30.320
That's nice.

00:15:30.320 --> 00:15:30.960
Yeah.

00:15:30.960 --> 00:15:32.120
This is a nice app,

00:15:32.120 --> 00:15:32.320
right?

00:15:32.320 --> 00:15:33.600
Nice utility.

00:15:33.600 --> 00:15:34.140
Definitely.

00:15:34.140 --> 00:15:34.740
Cool.

00:15:34.740 --> 00:15:35.300
Yeah.

00:15:35.300 --> 00:15:36.060
Indeed.

00:15:36.060 --> 00:15:36.320
Indeed.

00:15:36.320 --> 00:15:36.380
Indeed.

00:15:36.380 --> 00:15:40.920
So if you want to track down memory leaks or you're just wondering like,

00:15:40.920 --> 00:15:43.380
why is my program using so much memory?

00:15:43.380 --> 00:15:44.120
Fire it up.

00:15:44.120 --> 00:15:44.940
Let it run for a while.

00:15:44.940 --> 00:15:45.680
See what happens.

00:15:45.680 --> 00:15:46.220
Yeah.

00:15:46.220 --> 00:15:46.680
Cool.

00:15:46.680 --> 00:15:47.740
All right.

00:15:47.740 --> 00:15:48.420
Back to you,

00:15:48.420 --> 00:15:48.580
Brian.

00:15:49.160 --> 00:15:49.520
Well,

00:15:49.520 --> 00:15:51.020
I want to bring up a,

00:15:51.020 --> 00:15:52.560
a pie test tool.

00:15:52.560 --> 00:15:52.960
So,

00:15:52.960 --> 00:15:53.480
um,

00:15:53.480 --> 00:15:54.340
it was a,

00:15:54.340 --> 00:15:55.280
I,

00:15:55.280 --> 00:15:56.880
I have a recent,

00:15:56.880 --> 00:15:59.580
I've often used a pie test X dist,

00:15:59.580 --> 00:16:00.320
uh,

00:16:00.320 --> 00:16:01.020
for parallel.

00:16:01.020 --> 00:16:04.120
So X dist is a way you can just say that it's,

00:16:04.120 --> 00:16:04.260
it's,

00:16:04.260 --> 00:16:08.740
it's the one that I heard about first for running pie tests in parallel.

00:16:08.740 --> 00:16:09.360
So you've got,

00:16:09.360 --> 00:16:09.880
you know,

00:16:09.880 --> 00:16:11.360
like tons of tons of unit tests,

00:16:11.360 --> 00:16:11.700
maybe,

00:16:11.700 --> 00:16:13.340
and you want to just speed them up.

00:16:13.340 --> 00:16:13.740
Um,

00:16:13.740 --> 00:16:14.660
you can throw them,

00:16:14.660 --> 00:16:17.560
throw a dash in for something like that at it.

00:16:17.560 --> 00:16:18.280
and it'll,

00:16:18.280 --> 00:16:18.500
uh,

00:16:18.500 --> 00:16:30.320
and it'll,

00:16:30.320 --> 00:16:31.300
it'll just throw them,

00:16:31.300 --> 00:16:31.600
uh,

00:16:31.600 --> 00:16:31.780
and,

00:16:31.780 --> 00:16:32.380
um,

00:16:32.380 --> 00:16:32.980
and there was,

00:16:32.980 --> 00:16:33.160
uh,

00:16:33.160 --> 00:16:34.440
I think it was Bruno Olivier,

00:16:34.440 --> 00:16:35.520
um,

00:16:35.520 --> 00:16:37.640
suggested a couple of alternatives.

00:16:37.640 --> 00:16:39.520
And one of them was pie test parallel,

00:16:39.520 --> 00:16:40.060
which,

00:16:40.060 --> 00:16:40.500
um,

00:16:40.500 --> 00:16:41.120
I,

00:16:41.120 --> 00:16:41.440
I,

00:16:41.440 --> 00:16:42.680
I know I've run across,

00:16:42.680 --> 00:16:43.960
but I haven't played with it for a while.

00:16:43.960 --> 00:16:47.660
So I tried it out and it's actually like really cool.

00:16:47.660 --> 00:16:48.360
So one of the,

00:16:48.360 --> 00:16:50.980
one of the pie test X does does a lot.

00:16:50.980 --> 00:16:52.860
One of the things it does is it not just,

00:16:52.860 --> 00:16:53.660
uh,

00:16:53.660 --> 00:16:54.400
uh,

00:16:54.400 --> 00:16:55.920
it's not just multi-processor,

00:16:55.920 --> 00:16:58.420
but it can be on different actual different computers.

00:16:58.420 --> 00:16:59.460
So you can launch them on.

00:16:59.460 --> 00:16:59.900
Oh,

00:16:59.900 --> 00:17:00.220
nice.

00:17:00.220 --> 00:17:01.920
Like grid computing almost.

00:17:01.920 --> 00:17:02.240
Yeah.

00:17:02.240 --> 00:17:05.980
You can SSH into different systems and have it run in parallel.

00:17:05.980 --> 00:17:06.660
Um,

00:17:06.660 --> 00:17:07.160
but that,

00:17:07.160 --> 00:17:07.580
you know,

00:17:07.620 --> 00:17:07.920
you don't,

00:17:07.920 --> 00:17:10.060
I don't usually need that kind of power.

00:17:10.060 --> 00:17:10.820
Um,

00:17:10.820 --> 00:17:12.840
the one thing it doesn't do is thread.

00:17:12.840 --> 00:17:13.360
So it's,

00:17:13.360 --> 00:17:16.080
it's process based and pie test parallel does both.

00:17:16.080 --> 00:17:17.340
So you can say,

00:17:17.340 --> 00:17:18.080
um,

00:17:18.080 --> 00:17:18.900
you can give it,

00:17:18.900 --> 00:17:19.820
uh,

00:17:19.820 --> 00:17:20.840
you can give it,

00:17:20.840 --> 00:17:21.120
uh,

00:17:21.120 --> 00:17:21.580
well,

00:17:21.580 --> 00:17:22.600
where we have,

00:17:22.600 --> 00:17:24.620
I'm going to go down to the examples.

00:17:24.620 --> 00:17:27.980
So you can give it number of workers and it'll tell it to,

00:17:27.980 --> 00:17:28.340
um,

00:17:28.340 --> 00:17:29.180
that's how many,

00:17:29.180 --> 00:17:29.480
uh,

00:17:29.480 --> 00:17:32.500
processes it'll spin up or how many CPUs.

00:17:32.500 --> 00:17:33.160
Um,

00:17:33.160 --> 00:17:37.440
now you can also give it test per worker and then it'll run in

00:17:37.440 --> 00:17:38.460
multi-threading mode.

00:17:38.460 --> 00:17:39.220
Um,

00:17:39.220 --> 00:17:41.260
and you can give it auto on both of these.

00:17:41.260 --> 00:17:42.280
And it's,

00:17:42.280 --> 00:17:42.640
uh,

00:17:42.640 --> 00:17:45.240
this is extremely useful for,

00:17:45.240 --> 00:17:46.120
you have to,

00:17:46.120 --> 00:17:46.880
by default,

00:17:46.880 --> 00:17:48.220
this is turned off by default.

00:17:48.220 --> 00:17:48.460
The,

00:17:48.460 --> 00:17:48.680
the,

00:17:48.680 --> 00:17:49.260
the features,

00:17:49.260 --> 00:17:51.560
if you just say workers equals five or something,

00:17:51.560 --> 00:17:53.580
it won't do multiple threat,

00:17:53.580 --> 00:17:54.300
multi-threading.

00:17:54.300 --> 00:17:56.120
And the reason is it,

00:17:56.120 --> 00:17:59.360
because you need to make sure your tests are thread safe.

00:17:59.360 --> 00:17:59.720
Um,

00:17:59.720 --> 00:18:01.440
and many are not.

00:18:01.440 --> 00:18:02.880
So I tried it on a couple of my,

00:18:02.880 --> 00:18:04.120
even if they're isolated,

00:18:04.120 --> 00:18:05.640
they might not be thread safe,

00:18:05.640 --> 00:18:05.920
right?

00:18:05.920 --> 00:18:06.380
Yes.

00:18:06.720 --> 00:18:07.040
Um,

00:18:07.040 --> 00:18:07.720
that's,

00:18:07.720 --> 00:18:09.520
that's another level of consideration.

00:18:09.520 --> 00:18:10.280
However,

00:18:10.280 --> 00:18:11.600
if there are,

00:18:11.600 --> 00:18:13.100
there's a lot of small,

00:18:13.100 --> 00:18:14.100
especially small,

00:18:14.100 --> 00:18:14.500
uh,

00:18:14.500 --> 00:18:16.200
not really unit like system tests,

00:18:16.200 --> 00:18:18.900
but a lot of unit tests are just testing a little Python code.

00:18:18.900 --> 00:18:21.720
If you've got a part of that is a lot of projects,

00:18:21.720 --> 00:18:23.520
that's a big chunk of the test load.

00:18:23.520 --> 00:18:26.240
So being able to do multi-threading is really nice,

00:18:26.240 --> 00:18:27.240
but you know,

00:18:27.240 --> 00:18:29.380
even with just multi-processing,

00:18:29.460 --> 00:18:33.660
I tried this on a few different projects and there were like,

00:18:33.660 --> 00:18:35.940
I tried it on flask and the,

00:18:35.940 --> 00:18:36.420
um,

00:18:36.420 --> 00:18:37.220
uh,

00:18:37.220 --> 00:18:37.660
the,

00:18:37.660 --> 00:18:43.280
the parallel version using pytest parallel was like three times faster than the

00:18:43.280 --> 00:18:44.180
ex-dist version.

00:18:44.180 --> 00:18:44.680
So,

00:18:44.680 --> 00:18:45.400
um,

00:18:45.400 --> 00:18:47.040
so based on your,

00:18:47.040 --> 00:18:47.320
I,

00:18:47.320 --> 00:18:48.060
there's,

00:18:48.060 --> 00:18:49.280
there was another one that,

00:18:49.280 --> 00:18:49.520
uh,

00:18:49.520 --> 00:18:50.200
Bruno mentioned,

00:18:50.200 --> 00:18:53.020
but I think these two are really solid ex-dist and parallel.

00:18:53.020 --> 00:18:55.600
So if you want to speed up your test run times,

00:18:55.600 --> 00:18:58.520
I would try both on your project and just see,

00:18:58.520 --> 00:18:59.140
play with them.

00:18:59.240 --> 00:18:59.760
And see,

00:18:59.760 --> 00:19:01.680
see which one's faster on,

00:19:01.680 --> 00:19:02.360
uh,

00:19:02.360 --> 00:19:06.920
many of the projects I tried parallel was at least as fast or faster than

00:19:06.920 --> 00:19:07.540
ex-dist.

00:19:07.540 --> 00:19:08.820
So it's kind of nice.

00:19:08.820 --> 00:19:09.600
Yeah,

00:19:09.600 --> 00:19:10.120
it's cool.

00:19:10.120 --> 00:19:10.820
This looks great.

00:19:10.820 --> 00:19:11.600
I like it.

00:19:11.600 --> 00:19:15.020
And having your test run faster is always good.

00:19:15.020 --> 00:19:16.100
Do you do anything crazy?

00:19:16.100 --> 00:19:16.400
Like,

00:19:16.400 --> 00:19:20.500
do you set up your editor to auto run tests on file change or anything like

00:19:20.500 --> 00:19:20.840
that?

00:19:20.840 --> 00:19:21.220
Um,

00:19:21.220 --> 00:19:22.500
sometimes,

00:19:22.500 --> 00:19:23.560
uh,

00:19:23.560 --> 00:19:24.620
one of the things that I've always,

00:19:24.620 --> 00:19:25.480
I've done it a few times,

00:19:25.480 --> 00:19:26.580
but it always makes me nervous.

00:19:26.580 --> 00:19:26.920
I'm like,

00:19:26.920 --> 00:19:27.220
ah,

00:19:27.220 --> 00:19:29.220
just like it's unnerving to me that it just keeps running.

00:19:29.220 --> 00:19:34.320
One of the things that I really like around that was added to PI test not

00:19:34.320 --> 00:19:35.820
too long ago was,

00:19:35.820 --> 00:19:36.240
um,

00:19:36.240 --> 00:19:37.320
is stepwise.

00:19:37.320 --> 00:19:40.080
So that's not really all the running it all the time,

00:19:40.080 --> 00:19:40.720
but,

00:19:40.720 --> 00:19:41.200
um,

00:19:41.200 --> 00:19:42.540
stepwise will,

00:19:42.740 --> 00:19:43.860
and this would be a handy one to,

00:19:43.860 --> 00:19:44.700
to run all the time.

00:19:44.700 --> 00:19:46.680
So what stepwise does is it takes,

00:19:46.680 --> 00:19:49.580
you can run all your tests in stepwise.

00:19:49.580 --> 00:19:51.080
And when you run it again,

00:19:51.080 --> 00:19:55.540
it'll start at the first failing test because it assumes you're trying to fix

00:19:55.540 --> 00:19:55.900
something.

00:19:55.900 --> 00:19:59.420
It'll start at that and then run until it finds a failure.

00:19:59.420 --> 00:20:00.180
So if you,

00:20:00.180 --> 00:20:01.980
if you haven't fixed this first failure,

00:20:01.980 --> 00:20:05.720
it'll just keep running that one until you fixed it and it'll go to the next one.

00:20:05.720 --> 00:20:06.420
Um,

00:20:06.420 --> 00:20:07.020
and,

00:20:07.020 --> 00:20:07.380
uh,

00:20:07.380 --> 00:20:09.880
so I do that a lot while I'm trying to debug something.

00:20:09.880 --> 00:20:10.460
Um,

00:20:10.460 --> 00:20:11.240
and,

00:20:11.240 --> 00:20:13.260
and hooking that up with like an auto,

00:20:13.260 --> 00:20:14.400
like a watch feature.

00:20:14.400 --> 00:20:16.480
There's a bunch of ways you can watch your code to,

00:20:16.480 --> 00:20:17.300
to do that.

00:20:17.300 --> 00:20:17.780
Um,

00:20:17.780 --> 00:20:18.380
yeah,

00:20:18.380 --> 00:20:19.100
it's fun.

00:20:19.100 --> 00:20:19.660
Nice.

00:20:19.660 --> 00:20:21.160
Very cool.

00:20:21.160 --> 00:20:23.280
So let's do some real time follow up here.

00:20:23.280 --> 00:20:24.120
First,

00:20:24.120 --> 00:20:27.020
Alvaro is being all mischievous asking,

00:20:27.020 --> 00:20:29.780
I wonder what would happen if I install both plugins,

00:20:29.780 --> 00:20:30.480
both X,

00:20:30.480 --> 00:20:31.500
just in parallel.

00:20:31.500 --> 00:20:32.080
I,

00:20:32.080 --> 00:20:32.980
you can,

00:20:32.980 --> 00:20:34.020
I don't know if I've,

00:20:34.020 --> 00:20:35.380
you can run them at the same time.

00:20:35.380 --> 00:20:36.020
I should try.

00:20:36.020 --> 00:20:38.400
I have it installed on like the flask one.

00:20:38.400 --> 00:20:38.900
I ran it.

00:20:38.900 --> 00:20:40.200
I installed both of them.

00:20:40.280 --> 00:20:41.040
And then try it in both,

00:20:41.040 --> 00:20:42.360
but not at the same time.

00:20:42.360 --> 00:20:43.620
I'll have to try the forks.

00:20:43.620 --> 00:20:44.840
It's going to go so fast.

00:20:44.840 --> 00:20:46.740
And then just going back to PyScript,

00:20:46.740 --> 00:20:49.060
there's like tons of excitement about PyScript.

00:20:49.060 --> 00:20:49.500
Yeah.

00:20:49.500 --> 00:20:50.500
Dale's excited.

00:20:50.500 --> 00:20:51.500
Brandon's excited.

00:20:51.500 --> 00:20:52.300
Um,

00:20:52.300 --> 00:20:53.140
and David says,

00:20:53.140 --> 00:20:54.220
I hope someday I,

00:20:54.220 --> 00:20:56.080
I can say back in my day,

00:20:56.080 --> 00:20:57.460
you couldn't just learn Python.

00:20:57.460 --> 00:20:59.020
You had to learn JavaScript too.

00:20:59.020 --> 00:20:59.360
Yeah.

00:20:59.360 --> 00:21:00.140
Indeed.

00:21:00.140 --> 00:21:00.660
Indeed.

00:21:00.660 --> 00:21:01.360
Uh,

00:21:01.360 --> 00:21:02.140
let's see.

00:21:02.140 --> 00:21:07.000
So I got one more to cover that is going to be fun as well.

00:21:07.000 --> 00:21:09.140
And this one comes to us from former,

00:21:09.780 --> 00:21:10.360
uh,

00:21:10.360 --> 00:21:11.620
guest co-host,

00:21:11.620 --> 00:21:12.500
uh,

00:21:12.500 --> 00:21:13.320
Michael Feigert,

00:21:13.320 --> 00:21:13.860
uh,

00:21:13.860 --> 00:21:14.080
sorry,

00:21:14.080 --> 00:21:14.800
Matthew Feigert.

00:21:14.800 --> 00:21:17.560
And Matthew is a great support of the show.

00:21:17.560 --> 00:21:22.820
It sends all sorts of interesting things in to help us out and good ideas.

00:21:22.820 --> 00:21:27.960
And this is yet another one coming from the data science side of things saying,

00:21:27.960 --> 00:21:28.360
you know,

00:21:28.360 --> 00:21:33.440
one of the things you have to do often in say a Jupyter notebook is go download a file off

00:21:33.440 --> 00:21:36.920
of an API or just some link or S3 bucket or whatever.

00:21:36.920 --> 00:21:37.980
And you want to process it.

00:21:37.980 --> 00:21:41.400
And if you use requests while great,

00:21:41.400 --> 00:21:43.240
you end up making the request,

00:21:43.240 --> 00:21:44.420
verifying that it worked,

00:21:44.420 --> 00:21:46.160
reading the stream into bytes,

00:21:46.160 --> 00:21:47.460
writing the bytes to a file,

00:21:47.460 --> 00:21:48.120
uh,

00:21:48.120 --> 00:21:50.620
picking a file name and then using that file name to open it.

00:21:50.620 --> 00:21:51.240
And then say,

00:21:51.240 --> 00:21:52.480
now you can process it.

00:21:52.480 --> 00:21:52.680
Right.

00:21:52.680 --> 00:21:52.940
Yeah.

00:21:53.120 --> 00:21:55.180
So there's this thing called pooch,

00:21:55.180 --> 00:21:57.520
a friend to fetch your data files.

00:21:57.520 --> 00:21:57.780
All right,

00:21:57.780 --> 00:21:58.060
pooch,

00:21:58.060 --> 00:21:58.600
go get,

00:21:58.600 --> 00:21:59.280
go get my files.

00:21:59.280 --> 00:21:59.640
Like a little,

00:21:59.640 --> 00:22:00.380
a little,

00:22:00.380 --> 00:22:04.440
a friendly dog that also seems to hold a snake in its mouth.

00:22:04.440 --> 00:22:05.560
So that's pretty cool.

00:22:05.560 --> 00:22:06.160
Anyway,

00:22:06.160 --> 00:22:10.600
who wouldn't want a dog that can wrangle snakes to go help you with your notebooks?

00:22:10.600 --> 00:22:11.260
Anyway,

00:22:11.260 --> 00:22:15.260
the idea is you can do all of what I described with requests.

00:22:15.260 --> 00:22:16.700
You can do that in one line of code.

00:22:16.700 --> 00:22:17.140
Oh,

00:22:17.140 --> 00:22:17.360
wow.

00:22:17.360 --> 00:22:17.900
Yeah.

00:22:17.900 --> 00:22:19.560
And you get other cool features as well.

00:22:19.560 --> 00:22:19.880
So,

00:22:19.880 --> 00:22:20.700
um,

00:22:20.700 --> 00:22:21.560
it says,

00:22:21.560 --> 00:22:21.820
look,

00:22:21.860 --> 00:22:24.480
you can just make this one function call and it'll save it.

00:22:24.480 --> 00:22:26.580
And it'll also cache your files locally.

00:22:26.580 --> 00:22:30.000
So some of these files that data scientists especially work with are massive,

00:22:30.000 --> 00:22:30.580
right?

00:22:30.580 --> 00:22:30.800
You know,

00:22:30.800 --> 00:22:31.420
it's like a gig.

00:22:31.420 --> 00:22:32.900
And every time you run the notebook,

00:22:32.900 --> 00:22:34.600
you don't want it to download the gig again.

00:22:34.600 --> 00:22:36.260
You just want it to run more quickly.

00:22:36.260 --> 00:22:38.960
So you can set up a location for it to cache it.

00:22:38.960 --> 00:22:39.480
Uh,

00:22:39.480 --> 00:22:43.020
you can pass in a hash of the file to say,

00:22:43.020 --> 00:22:47.640
I want to get this file and I expect it to be this MD five or whatever the heck

00:22:47.640 --> 00:22:50.580
the hash is that they're using so that you can be sure it doesn't change.

00:22:50.580 --> 00:22:51.020
Right.

00:22:51.060 --> 00:22:53.860
So if you're doing like reproducible data science,

00:22:53.860 --> 00:22:54.300
you say,

00:22:54.300 --> 00:22:56.060
what you do is you download this file,

00:22:56.060 --> 00:22:57.100
then you apply this algorithm,

00:22:57.100 --> 00:22:58.060
then you get this picture.

00:22:58.060 --> 00:22:58.600
Well,

00:22:58.600 --> 00:22:59.500
if the data changes,

00:22:59.500 --> 00:23:00.560
I bet the picture changes.

00:23:00.560 --> 00:23:00.820
Right.

00:23:00.820 --> 00:23:05.760
And so you can put it like a layer of verification that it's unchanged from the

00:23:05.760 --> 00:23:07.580
last time you decided what it should be.

00:23:07.580 --> 00:23:08.800
That's pretty cool.

00:23:08.800 --> 00:23:10.940
You can do multiple protocols.

00:23:10.940 --> 00:23:11.920
So not just HTTP,

00:23:11.920 --> 00:23:12.600
HTTPS,

00:23:12.600 --> 00:23:13.360
but FTP.

00:23:13.360 --> 00:23:14.620
Oh my gosh.

00:23:14.620 --> 00:23:15.540
S FTP.

00:23:15.540 --> 00:23:16.260
Oh yeah.

00:23:16.260 --> 00:23:17.280
It's what else.

00:23:17.280 --> 00:23:17.900
Basic off.

00:23:17.900 --> 00:23:21.780
It'll also automatically resolve DOIs,

00:23:21.780 --> 00:23:23.880
digital object identifiers,

00:23:23.880 --> 00:23:28.020
which are used in places like big share and Zen Zenodo.

00:23:28.020 --> 00:23:30.380
And this is about the reproducible science.

00:23:30.380 --> 00:23:31.060
Like here's that,

00:23:31.060 --> 00:23:32.220
here's the file.

00:23:32.220 --> 00:23:32.740
And like,

00:23:32.740 --> 00:23:36.640
we've been assigned an immutable ID that we can always refer back to it.

00:23:36.640 --> 00:23:37.100
So you can just say,

00:23:37.100 --> 00:23:39.900
here's the ID and it'll actually get the file and it'll even unzip and

00:23:39.900 --> 00:23:41.220
decompress files upon download.

00:23:41.220 --> 00:23:41.780
Neat.

00:23:41.780 --> 00:23:42.360
Pretty neat.

00:23:42.360 --> 00:23:42.560
Huh?

00:23:42.560 --> 00:23:43.040
Yeah.

00:23:43.040 --> 00:23:43.600
Yeah.

00:23:43.600 --> 00:23:44.160
Pretty straightforward.

00:23:44.160 --> 00:23:44.560
Let's,

00:23:44.560 --> 00:23:46.600
let me see if I can find an example of.

00:23:46.600 --> 00:23:47.060
I love,

00:23:47.060 --> 00:23:47.900
I like the,

00:23:47.900 --> 00:23:48.460
the,

00:23:48.460 --> 00:23:50.460
the section of learning about it.

00:23:50.460 --> 00:23:51.860
It's called training your pooch.

00:23:51.860 --> 00:23:52.760
That's cute.

00:23:52.760 --> 00:23:53.940
Oh,

00:23:53.940 --> 00:23:55.020
nice.

00:23:55.020 --> 00:23:55.680
I love it.

00:23:55.680 --> 00:23:57.600
Apparently it has progress bars.

00:23:57.600 --> 00:23:59.260
Always download actions,

00:23:59.260 --> 00:23:59.760
logging,

00:23:59.760 --> 00:24:01.840
and you get multiple files,

00:24:01.920 --> 00:24:07.540
but the main use case is just file equals pooch.retrieve URL done.

00:24:07.540 --> 00:24:08.640
That seems pretty nice.

00:24:08.640 --> 00:24:09.000
Yeah.

00:24:09.000 --> 00:24:09.920
That's great.

00:24:09.920 --> 00:24:10.760
It's my data.

00:24:10.760 --> 00:24:11.500
Here it is.

00:24:11.500 --> 00:24:12.020
Oh,

00:24:12.020 --> 00:24:12.280
cool.

00:24:12.280 --> 00:24:14.580
So Pamphill Roy on the audience says,

00:24:14.580 --> 00:24:14.980
Hey folks,

00:24:14.980 --> 00:24:15.220
funny.

00:24:15.220 --> 00:24:20.660
We're adding this to scipy optional to have a scipy dataset sub module.

00:24:20.660 --> 00:24:22.900
scikit image is using this as well.

00:24:22.900 --> 00:24:23.640
I had no idea.

00:24:23.640 --> 00:24:24.200
Very cool.

00:24:24.200 --> 00:24:25.340
Thanks for the extra background there.

00:24:25.340 --> 00:24:25.580
Cool.

00:24:25.580 --> 00:24:26.080
Yeah.

00:24:26.080 --> 00:24:27.360
But I think this is great.

00:24:27.360 --> 00:24:27.860
In fact,

00:24:27.860 --> 00:24:30.260
I know it's sells itself.

00:24:30.360 --> 00:24:32.560
It bills itself as being for data science.

00:24:32.560 --> 00:24:37.120
I also like to download files sometimes and not go through five or six lines of code.

00:24:37.120 --> 00:24:37.860
I could use this.

00:24:37.860 --> 00:24:38.220
Yeah.

00:24:38.220 --> 00:24:38.940
Yeah.

00:24:38.940 --> 00:24:39.260
There's,

00:24:39.260 --> 00:24:43.140
there's a lot of stuff that data science people are doing that we can use in lots of other

00:24:43.140 --> 00:24:43.600
fields.

00:24:43.600 --> 00:24:44.020
So.

00:24:44.020 --> 00:24:44.680
Indeed.

00:24:44.680 --> 00:24:50.260
I do think that's actually one of the really interesting aspects of Python is we have so

00:24:50.260 --> 00:24:54.560
many people from these different areas that it's not just all, you know, CS grads doing

00:24:54.560 --> 00:24:55.100
the same thing.

00:24:55.100 --> 00:24:55.560
Yeah.

00:24:55.560 --> 00:24:56.560
Yeah,

00:24:56.560 --> 00:24:56.960
for sure.

00:24:56.960 --> 00:24:57.720
All right.

00:24:58.140 --> 00:25:00.800
Well, those are my items for today, Brian.

00:25:00.800 --> 00:25:01.980
Nice.

00:25:01.980 --> 00:25:05.080
I don't have any extras today.

00:25:05.080 --> 00:25:07.460
Do you have any extra information in stuff?

00:25:07.460 --> 00:25:08.340
I do.

00:25:08.340 --> 00:25:10.120
I do have extras.

00:25:10.120 --> 00:25:13.140
So this one I'm very, very excited about.

00:25:13.260 --> 00:25:19.880
I have a new course that I just released called up and running with Git, a pragmatic UI based

00:25:19.880 --> 00:25:20.560
introduction.

00:25:20.560 --> 00:25:22.100
So I'm really excited.

00:25:22.100 --> 00:25:23.200
I just released.

00:25:23.200 --> 00:25:27.320
I haven't really even announced it yet, but I finished getting it all public and online

00:25:27.320 --> 00:25:31.340
and turned all the GitHub repos public and all that stuff right before we jumped on the

00:25:31.340 --> 00:25:31.760
call today.

00:25:31.820 --> 00:25:34.800
And the idea is there are tons of Git courses.

00:25:34.800 --> 00:25:35.980
So why create a Git course?

00:25:35.980 --> 00:25:41.120
Well, I feel like so many of them are just like, okay, we're just going to work in the

00:25:41.120 --> 00:25:42.520
terminal or the command prompt.

00:25:42.520 --> 00:25:47.260
And you're just going to assume that like, that's the world of Git that you live in, like

00:25:47.260 --> 00:25:48.940
kind of a least common denominator approach.

00:25:48.940 --> 00:25:50.460
And while that, that is useful.

00:25:50.460 --> 00:25:52.880
Like, I don't think that's how most people are working, right?

00:25:52.880 --> 00:25:57.000
If you're in Visual Studio Code or PyCharm, like there's great hotkeys just to do the

00:25:57.000 --> 00:25:58.640
Git stuff and see the history and whatnot.

00:25:58.640 --> 00:26:01.660
And there's other tools like SourceTree and Power and others.

00:26:01.660 --> 00:26:06.000
So it kind of takes this approach of like, well, let's take all the modern tools that give

00:26:06.000 --> 00:26:08.760
you the best visibility and teach you Git with that.

00:26:08.760 --> 00:26:10.260
So super fun.

00:26:10.260 --> 00:26:12.060
Which GUI tools are you using then?

00:26:12.060 --> 00:26:13.180
Which ones are you using?

00:26:13.180 --> 00:26:14.560
Visual Studio Code.

00:26:14.560 --> 00:26:14.960
Okay.

00:26:14.960 --> 00:26:15.660
PyCharm.

00:26:15.660 --> 00:26:16.560
SourceTree.

00:26:16.560 --> 00:26:16.960
Okay.

00:26:16.960 --> 00:26:17.900
Those are the things.

00:26:17.900 --> 00:26:19.480
And so I've done a lot of work.

00:26:19.560 --> 00:26:23.380
I've tried to take some of my experience from doing some work on YouTube where I was

00:26:23.380 --> 00:26:27.300
experimenting with like setup and presentations and stuff.

00:26:27.300 --> 00:26:32.380
And I think I have a really neat, polished experience for this course with like lots of

00:26:32.380 --> 00:26:35.500
cool visuals and graphics and video and stuff.

00:26:35.500 --> 00:26:37.080
So hopefully people really enjoy it.

00:26:37.080 --> 00:26:38.620
Anyway, this is my extra.

00:26:38.620 --> 00:26:40.600
I just sent this out to the world.

00:26:40.600 --> 00:26:41.640
I'm pretty excited about this.

00:26:41.640 --> 00:26:42.060
Nice.

00:26:42.060 --> 00:26:42.780
Congrats.

00:26:42.780 --> 00:26:43.320
Yeah.

00:26:43.320 --> 00:26:43.920
Thanks.

00:26:43.920 --> 00:26:44.540
Thanks so much.

00:26:44.540 --> 00:26:45.820
You have no extras.

00:26:45.820 --> 00:26:47.560
Does that mean you're ready for some humor?

00:26:47.560 --> 00:26:48.060
Yes.

00:26:48.060 --> 00:26:48.620
Always.

00:26:48.980 --> 00:26:49.540
All right.

00:26:49.540 --> 00:26:49.940
All right.

00:26:49.940 --> 00:26:50.380
This one.

00:26:50.380 --> 00:26:51.560
I chose this.

00:26:51.560 --> 00:26:53.740
Honestly, I just chose it just because of the title.

00:26:53.740 --> 00:26:57.340
So there's Robert.

00:26:57.340 --> 00:27:02.120
Is this Robert Downey Jr. looking at somebody in like some kind of wizard situation?

00:27:02.120 --> 00:27:02.580
Right?

00:27:02.580 --> 00:27:02.920
Like.

00:27:02.920 --> 00:27:03.520
Yeah.

00:27:03.520 --> 00:27:05.060
This is like Endgame or something.

00:27:05.060 --> 00:27:05.840
Okay.

00:27:05.840 --> 00:27:06.100
Yeah.

00:27:06.100 --> 00:27:06.880
I don't know the movie.

00:27:06.880 --> 00:27:09.360
Like apparently I stopped watching movies at some point.

00:27:09.360 --> 00:27:09.840
Now I don't.

00:27:09.840 --> 00:27:10.640
I'm out of touch.

00:27:11.920 --> 00:27:16.980
So anyway, the title is when your code stopped working during an interview or it could be

00:27:16.980 --> 00:27:18.420
a demo presentation or whatever.

00:27:18.420 --> 00:27:21.260
Like you want to, you want to tell us what this is about, what that's going on here?

00:27:21.400 --> 00:27:25.460
So he's, he's, he's looking back at Banner.

00:27:25.460 --> 00:27:26.620
So who's the Hulk?

00:27:26.620 --> 00:27:29.640
He says, dude, you're embarrassing me in front of the wizards.

00:27:29.640 --> 00:27:30.080
Yeah.

00:27:30.080 --> 00:27:31.000
Because, yeah.

00:27:31.000 --> 00:27:33.240
Because Banner wasn't able to become the Hulk.

00:27:33.240 --> 00:27:34.440
So at the time.

00:27:34.840 --> 00:27:35.280
Right, dude.

00:27:35.280 --> 00:27:37.260
Don't, don't embarrass me in front of the wizards.

00:27:37.260 --> 00:27:40.380
I just, I love to think of programmers as kind of like the modern day wizards.

00:27:40.380 --> 00:27:43.760
Like we can think of things and then poof, they, they kind of come into existence.

00:27:43.760 --> 00:27:44.780
Yeah.

00:27:44.780 --> 00:27:45.480
It's good.

00:27:45.480 --> 00:27:49.020
And also while working on that Git course, I had this pretty fun experience.

00:27:49.020 --> 00:27:51.720
Like right while I was recording it.

00:27:51.720 --> 00:27:53.020
Nice.

00:27:53.020 --> 00:27:55.140
And I'm just sitting there and then.

00:27:55.140 --> 00:27:56.080
Git was down.

00:27:56.080 --> 00:27:58.600
How often does GitHub itself go down?

00:27:58.600 --> 00:27:59.060
But no.

00:27:59.060 --> 00:27:59.420
Oh no.

00:27:59.420 --> 00:28:04.540
There's like an, the Octa cat is falling like with a 500 sign in its hands.

00:28:04.540 --> 00:28:05.740
Toops.

00:28:05.740 --> 00:28:07.320
Which of course made me.

00:28:07.320 --> 00:28:07.900
I love the.

00:28:07.900 --> 00:28:09.200
Redo that section of the course.

00:28:09.200 --> 00:28:09.460
Yeah.

00:28:09.460 --> 00:28:11.920
I like the expression on your face for that.

00:28:11.920 --> 00:28:12.480
It's like.

00:28:12.480 --> 00:28:13.020
Yes.

00:28:13.020 --> 00:28:13.680
Exactly.

00:28:13.680 --> 00:28:15.060
People seem to really like that tweet.

00:28:15.060 --> 00:28:17.980
I'll, I'll put it in the show notes if people can check it out.

00:28:17.980 --> 00:28:20.460
Anyway, dude, don't embarrass me in front of the wizards.

00:28:20.460 --> 00:28:21.960
That's what I got for you.

00:28:21.960 --> 00:28:22.800
Yeah.

00:28:22.800 --> 00:28:23.360
Good.

00:28:23.360 --> 00:28:24.580
Good, good.

00:28:24.580 --> 00:28:25.620
Well, thanks.

00:28:25.620 --> 00:28:26.960
Thanks a lot again.

00:28:26.960 --> 00:28:28.080
It's a great show.

00:28:28.080 --> 00:28:28.620
Yeah.

00:28:28.620 --> 00:28:29.280
Sure was.

00:28:29.280 --> 00:28:29.640
Thanks.

00:28:29.640 --> 00:28:30.520
Thanks, Brian.

00:28:30.520 --> 00:28:31.420
Thanks for everyone who came.

