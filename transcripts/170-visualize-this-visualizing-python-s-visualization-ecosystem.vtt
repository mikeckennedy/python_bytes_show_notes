
00:00:00.000 --> 00:00:05.200
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.200 --> 00:00:11.360
This is episode 170 recorded February 19th, 2020. I am Brian Okken.


00:00:11.360 --> 00:00:12.480
And I'm Michael Kennedy.


00:00:12.480 --> 00:00:16.960
And this episode is brought to you by DigitalOcean. They've got something cool we're going to share


00:00:16.960 --> 00:00:21.360
with you a little later. But first, tell me about whatever you're going to tell me about first.


00:00:21.360 --> 00:00:29.360
I want to kick things off by building a picture for you. A picture of something awesome and yet


00:00:29.360 --> 00:00:35.120
something fairly complex. The Python visualization space. I don't know how you feel about it,


00:00:35.120 --> 00:00:39.540
but whenever I think, "Oh my gosh, I gotta go make some cool pictures and do neat things


00:00:39.540 --> 00:00:46.560
with Python," I'm like, "Map, plot, lib, bokeh, pyplot, what else should I learn? All


00:00:46.560 --> 00:00:51.320
these other things." And then if I want to do this graph, there's a lot of stuff out


00:00:51.320 --> 00:00:57.140
there. So, Prace and Daniel sent across a website, a resource for anyone who feels like


00:00:57.140 --> 00:01:02.740
and says, "Ah, there's an overwhelming sense of all the things happening."


00:01:02.740 --> 00:01:05.940
This is called pyviz at pyviz.org.


00:01:05.940 --> 00:01:14.340
Basically, the idea with pyviz is they've categorized and mind-mapped


00:01:14.340 --> 00:01:18.740
all the things around Python data visualization,


00:01:18.740 --> 00:01:20.140
and they've grouped it into different stuff.


00:01:20.140 --> 00:01:21.540
The way they describe it is they say,


00:01:21.540 --> 00:01:25.140
"It's an open platform for helping users decide on the best open-source


00:01:25.140 --> 00:01:28.140
Python data visualization tools for their purpose with links,


00:01:28.140 --> 00:01:30.660
overviews, comparisons, examples, and tutorials.


00:01:30.660 --> 00:01:31.180
>> That's cool.


00:01:31.180 --> 00:01:32.260
>> Yeah, it sounds good, right?


00:01:32.260 --> 00:01:34.860
So they have different sections that you can go check out.


00:01:34.860 --> 00:01:36.380
Overview of all the packages,


00:01:36.380 --> 00:01:39.820
which is like a nice visual graph relationship thing.


00:01:39.820 --> 00:01:41.620
High-level overview of the tools,


00:01:41.620 --> 00:01:45.620
a live table comparing maturity, popularity, and support.


00:01:45.620 --> 00:01:48.620
Also, a special focus on building dashboards that are


00:01:48.620 --> 00:01:51.980
like interactive web things that people can interact with,


00:01:51.980 --> 00:02:05.560
for scientific visualization for rendering embedded three-dimensional objects and I said some tutorials and examples also some examples talking about if you have this kind of data here's how you visualize it.


00:02:05.560 --> 00:02:11.980
What do you think yeah I like it that the subset is still a lot of work if you know what you want to do and you still to try to figure out.


00:02:11.980 --> 00:02:19.660
What you want to do with it but at least it's broken it down into just a handful of things that you have to figure out absolutely well.


00:02:19.760 --> 00:02:24.100
It doesn't entirely alleviate the challenge of this.


00:02:24.100 --> 00:02:26.600
But like for example, if you go to the overview section,


00:02:26.600 --> 00:02:29.480
you can see there's three main sections,


00:02:29.480 --> 00:02:31.820
JavaScript, Matplotlib, and OpenGL.


00:02:31.820 --> 00:02:33.320
And that might sound like,


00:02:33.320 --> 00:02:35.120
I thought this was Python, what's up?


00:02:35.120 --> 00:02:37.240
Like these are, I'm going to work with Python


00:02:37.240 --> 00:02:40.540
and get the outcome as a JavaScript thing on a web page


00:02:40.540 --> 00:02:43.340
or something I can get into Matplotlib


00:02:43.340 --> 00:02:47.000
or something I can get into like an OpenGL window


00:02:47.000 --> 00:02:48.960
for interaction and whatnot.


00:02:48.960 --> 00:02:51.960
So yeah, there's a bunch of stuff here that you can work with.


00:02:51.960 --> 00:02:54.880
But I think it's interesting to see the relationships as well.


00:02:54.880 --> 00:02:59.000
>> Well, we had a visualization thing that we used at work that we had


00:02:59.000 --> 00:03:02.920
originally done a JavaScript side one.


00:03:02.920 --> 00:03:07.320
And I think that we're going to switch and go back to a Matlab plant plot


00:03:07.320 --> 00:03:10.120
website, mostly because it's whether or


00:03:10.120 --> 00:03:12.800
not it's happening on the front end or the back end.


00:03:12.800 --> 00:03:14.560
>> Yeah. >> That's a division that we have to


00:03:14.560 --> 00:03:16.880
make, made that decision.


00:03:16.880 --> 00:03:19.160
But you know, it's only software, you can change it.


00:03:19.160 --> 00:03:20.280
- That's right.


00:03:20.280 --> 00:03:21.120
It's not concrete.


00:03:21.120 --> 00:03:22.680
- Yeah, just get another intern.


00:03:22.680 --> 00:03:24.040
(laughing)


00:03:24.040 --> 00:03:25.080
- Indeed, indeed.


00:03:25.080 --> 00:03:27.640
All right, well, I definitely am gonna make use of this site


00:03:27.640 --> 00:03:29.360
if I've got some visualization to do.


00:03:29.360 --> 00:03:31.380
And yeah, there's a couple of things


00:03:31.380 --> 00:03:36.380
I really would like to up the reporting exploration game


00:03:36.380 --> 00:03:38.480
for both the core side of things,


00:03:38.480 --> 00:03:39.880
understanding what users are up to,


00:03:39.880 --> 00:03:41.840
but also for the podcasts, right?


00:03:41.840 --> 00:03:43.700
So we can understand how our listeners


00:03:43.700 --> 00:03:45.440
are listening a little bit better.


00:03:45.440 --> 00:03:47.360
So I'll see what I can do around that for us.


00:03:47.360 --> 00:03:48.240
It might involve one of these.


00:03:48.240 --> 00:03:49.360
- Yeah, that'd be cool.


00:03:49.360 --> 00:03:52.600
I'm intrigued by the breakdown of some of the dashboard ones.


00:03:52.600 --> 00:03:54.680
- Yeah, would you say that that project's awesome


00:03:54.680 --> 00:03:55.520
that I was thinking about?


00:03:55.520 --> 00:03:56.920
- I think so, yeah.


00:03:56.920 --> 00:03:58.480
It's probably gonna be an awesome project.


00:03:58.480 --> 00:03:59.320
- What else is awesome?


00:03:59.320 --> 00:04:01.760
- Oh, well, Xan is awesome.


00:04:01.760 --> 00:04:03.400
I actually like a lot of these.


00:04:03.400 --> 00:04:05.320
I have to admit it, I like the awesome sites,


00:04:05.320 --> 00:04:08.640
the collections, awesome collections of different things


00:04:08.640 --> 00:04:11.800
usually thrown up on GitHub, and this one's also on GitHub.


00:04:11.800 --> 00:04:13.200
- They're usually more concrete, though.


00:04:13.200 --> 00:04:19.080
They're more like awesome async servers in Python or awesome web frameworks.


00:04:19.080 --> 00:04:22.400
>> Right. But we want to be a little reflective here.


00:04:22.400 --> 00:04:26.440
We've got a rabbit hole of Zen with the awesome Zen of Python.


00:04:26.440 --> 00:04:30.440
Yeah, I was trying to make a bad pun of a rabbit hole lot of Zen.


00:04:30.440 --> 00:04:33.160
So anyway, so the Zen of Python is a thing.


00:04:33.160 --> 00:04:35.640
So you import this and you see it.


00:04:35.640 --> 00:04:37.320
We've covered, I think,


00:04:37.320 --> 00:04:39.820
at least one article talking about that.


00:04:39.820 --> 00:04:48.020
But somebody put together a collection of articles and videos and talks and some other things about the Zen of Python,


00:04:48.020 --> 00:04:51.620
because people have thought about it and written about it. And I like it.


00:04:51.620 --> 00:04:57.620
A couple of things I wanted to point out, Al Swigert has a nice one that's Zen of Python explained.


00:04:57.620 --> 00:05:06.420
It's a really quick reference if you're new and are curious about the Zen of Python and you read it and you don't quite get what the heck that is.


00:05:06.420 --> 00:05:11.940
I think that he did a good start. I'll probably get his name wrong but Moshe Zadka has a


00:05:11.940 --> 00:05:16.180
meditations on the Zen of Python which is probably a longer couple paragraphs


00:05:16.180 --> 00:05:21.060
per item a little bit longer but I like his take on it as well. And one of the


00:05:21.060 --> 00:05:25.900
things I just learned recently is that there's a reference to the increment and


00:05:25.900 --> 00:05:30.540
decrement operator within the Zen of Python or not the increment and decrement


00:05:30.540 --> 00:05:35.500
but post decrement and pre decrement from C is like something that trips up


00:05:35.500 --> 00:05:39.500
see people. There's actually a joke embedded in the Zen of Python about that.


00:05:39.500 --> 00:05:44.380
How nice. Yeah, if it has to be an interview question about what


00:05:44.380 --> 00:05:51.180
incrementing a variable does, it might be too complicated. Yeah. What happens if


00:05:51.180 --> 00:05:56.540
you test if, you know, plus plus X of this thing or whatever, right? Like that's


00:05:56.540 --> 00:06:03.100
not good. So, although I do wish Python had a X plus plus, you know, sometimes I


00:06:03.100 --> 00:06:04.100
I could go.


00:06:04.100 --> 00:06:08.700
Yeah, just an easy increment or decrement operator would be good, but we don't need


00:06:08.700 --> 00:06:09.700
two.


00:06:09.700 --> 00:06:10.700
No, that's right.


00:06:10.700 --> 00:06:16.140
I got to admit, I read in, now we're getting down the C world, in a for loop, it's recommended


00:06:16.140 --> 00:06:20.800
that you do a pre-increment because there's a little bit of savings on complex objects


00:06:20.800 --> 00:06:23.780
to do pre-increment, but give me a break.


00:06:23.780 --> 00:06:25.700
It's I++ at the end of a for loop.


00:06:25.700 --> 00:06:26.700
I always do that.


00:06:26.700 --> 00:06:27.700
Yeah, it is.


00:06:27.700 --> 00:06:28.700
Definitely is.


00:06:28.700 --> 00:06:31.840
I'm glad Python doesn't even have a for loop.


00:06:31.840 --> 00:06:34.760
- We have four loops, just not the same.


00:06:34.760 --> 00:06:37.220
- Yeah, not for i equals zero.


00:06:37.220 --> 00:06:39.400
Yep, pretty sweet.


00:06:39.400 --> 00:06:41.500
Yeah, no, this is a cool find here.


00:06:41.500 --> 00:06:42.580
I like this.


00:06:42.580 --> 00:06:46.560
The Xenopython is something that's frequently spoken about,


00:06:46.560 --> 00:06:49.520
but it's very terse,


00:06:49.520 --> 00:06:51.320
and there's not a lot of explanation about it.


00:06:51.320 --> 00:06:53.300
So, you know, it's like one of those things,


00:06:53.300 --> 00:06:54.280
I remember being new, going,


00:06:54.280 --> 00:06:56.360
"Oh, the Xenopython, how cool."


00:06:56.360 --> 00:06:57.760
What does it mean?


00:06:57.760 --> 00:06:58.600
You know what I mean?


00:06:58.600 --> 00:07:01.240
Like, could I get an example for each line, please?


00:07:01.240 --> 00:07:02.240
It would be nice, you know?


00:07:02.240 --> 00:07:03.080
- Yeah.


00:07:03.080 --> 00:07:04.240
I'm also including a link.


00:07:04.240 --> 00:07:07.000
I think it's important to read the Zen of Python as a joke


00:07:07.000 --> 00:07:08.480
and here's why.


00:07:08.480 --> 00:07:10.800
And it talks about a few aspects of it


00:07:10.800 --> 00:07:13.700
as to basically don't take it too seriously.


00:07:13.700 --> 00:07:16.200
And Python is a language that you're


00:07:16.200 --> 00:07:18.080
really not supposed to take too seriously.


00:07:18.080 --> 00:07:18.920
Yes, it's serious.


00:07:18.920 --> 00:07:20.580
We can get a lot of work done,


00:07:20.580 --> 00:07:22.200
but don't get freaked out on stuff.


00:07:22.200 --> 00:07:24.880
- It's named after Monty Python after all.


00:07:24.880 --> 00:07:25.720
Come on.


00:07:25.720 --> 00:07:26.540
- Yeah, exactly.


00:07:26.540 --> 00:07:27.380
Lighten up, people.


00:07:27.380 --> 00:07:30.880
You know what else is awesome?


00:07:30.880 --> 00:07:32.880
- Kubernetes. - Kubernetes and DigitalOcean.


00:07:32.880 --> 00:07:35.180
- And DigitalOcean, yes. - Yep.


00:07:35.180 --> 00:07:38.260
So there is an enormous amount of material on the web


00:07:38.260 --> 00:07:42.200
about Kubernetes available both online and in print.


00:07:42.200 --> 00:07:45.280
So the DigitalOcean community realized that it's a little,


00:07:45.280 --> 00:07:47.660
you know, you might have trouble figuring it all out,


00:07:47.660 --> 00:07:49.640
even though there's a lot of information.


00:07:49.640 --> 00:07:51.960
So they developed a Kubernetes


00:07:51.960 --> 00:07:54.660
for full-stack developers course


00:07:54.660 --> 00:07:56.460
to provide a thorough, well-maintained,


00:07:56.460 --> 00:07:59.240
and approachable reference set of tutorials


00:07:59.240 --> 00:08:02.520
for anyone who would like to start learning about Kubernetes.


00:08:02.520 --> 00:08:04.680
And if that wasn't cool enough,


00:08:04.680 --> 00:08:06.840
they also realized that some people


00:08:06.840 --> 00:08:08.760
don't want to take courses, they want to read about it.


00:08:08.760 --> 00:08:11.940
So they compiled the course curriculum into an ebook


00:08:11.940 --> 00:08:14.400
to make it available for more people.


00:08:14.400 --> 00:08:19.400
So you can see that if you go to pythonbytes.fm/do-kube


00:08:19.400 --> 00:08:24.280
and you can download the book and visit the course.


00:08:24.280 --> 00:08:28.480
And as always, you can visit pythonbytes.fm/digitalocean


00:08:28.480 --> 00:08:30.600
to get a hundred dollar credit for new users


00:08:30.600 --> 00:08:31.720
to build something awesome.


00:08:31.720 --> 00:08:33.000
- I think we should just keep rolling things


00:08:33.000 --> 00:08:33.840
that are awesome.


00:08:33.840 --> 00:08:34.660
- Yeah, yeah.


00:08:34.660 --> 00:08:37.680
- So Matt Harrison inadvertently recommended


00:08:37.680 --> 00:08:38.880
this next item to us.


00:08:38.880 --> 00:08:39.720
- Really?


00:08:39.720 --> 00:08:42.520
- I mean like very indirectly, but he did.


00:08:42.520 --> 00:08:46.920
So he posted on Twitter how he is absolutely loving


00:08:46.920 --> 00:08:51.680
Juptext, J-U-P-T-E-X, Juptext.


00:08:51.680 --> 00:08:54.360
And I didn't even see it on Twitter.


00:08:54.360 --> 00:08:57.920
No, Twitter emailed me a summary of popular tweets


00:08:57.920 --> 00:08:59.680
which said Matt Harrison liked this.


00:08:59.680 --> 00:09:01.040
So, thank you, Matt.


00:09:01.040 --> 00:09:03.040
- Interesting, okay.


00:09:03.040 --> 00:09:05.160
- Okay, so, Jupyter Notebooks are awesome.


00:09:05.160 --> 00:09:07.040
They're super cool for exploring data,


00:09:07.040 --> 00:09:08.800
and they're really powerful for people


00:09:08.800 --> 00:09:11.120
who are doing more exploration


00:09:11.120 --> 00:09:12.920
rather than writing software, right?


00:09:12.920 --> 00:09:15.400
You can run the first bits, they might take a while,


00:09:15.400 --> 00:09:17.280
but then you can slice and dice stuff


00:09:17.280 --> 00:09:20.160
to visualize it and explore it as much as you want.


00:09:20.160 --> 00:09:22.080
However, they're not all the way awesome


00:09:22.080 --> 00:09:26.160
because if I put one of those things into, say, GitHub,


00:09:26.160 --> 00:09:27.600
and you were to check it out,


00:09:27.600 --> 00:09:30.100
and I were to be messing with running it,


00:09:30.100 --> 00:09:31.580
and that was getting live data,


00:09:31.580 --> 00:09:33.320
so non-deterministic results,


00:09:33.320 --> 00:09:35.780
and you did the same, and then we both put it back,


00:09:35.780 --> 00:09:37.540
it keeps those results and stuff,


00:09:37.540 --> 00:09:40.020
and it's not very friendly in Git.


00:09:40.020 --> 00:09:43.180
Another thing that would be nice


00:09:43.180 --> 00:09:45.700
would be sometimes you want to explore stuff in Jupyter,


00:09:45.700 --> 00:09:47.620
but then productize it,


00:09:47.620 --> 00:09:50.500
turn it into a script of its natural language.


00:09:50.500 --> 00:09:52.180
It supports a bunch of languages now.


00:09:52.180 --> 00:09:53.140
It would be nice to be able to go,


00:09:53.140 --> 00:09:55.100
and here's the one we run


00:09:55.100 --> 00:09:58.620
where the comment, the text becomes comments or whatever.


00:09:58.620 --> 00:10:01.460
So basically that's what Jupyter Text does.


00:10:01.460 --> 00:10:03.560
It will take Jupyter Notebooks


00:10:03.560 --> 00:10:07.900
and turn them into Markdown documents or Python scripts.


00:10:07.900 --> 00:10:10.140
And then you put those in source control or whatever,


00:10:10.140 --> 00:10:11.500
right, you can work with those.


00:10:11.500 --> 00:10:13.300
So you could then export it out


00:10:13.300 --> 00:10:16.500
and work with it in like PyCharm or something like that.


00:10:16.500 --> 00:10:19.300
You also get meaningful diffs of what changed


00:10:19.300 --> 00:10:21.380
when you look at the differences of those.


00:10:21.380 --> 00:10:23.180
So this thing's really cool.


00:10:23.180 --> 00:10:25.840
You can export the Jupyter notebooks


00:10:25.840 --> 00:10:27.660
in all these different script languages.


00:10:27.660 --> 00:10:30.380
Currently it supports, ready for this,


00:10:30.380 --> 00:10:32.680
Julia, Python, R, Bash, Scheme, Closure,


00:10:32.680 --> 00:10:35.740
MATLAB, Octave, which is the open source MATLAB,


00:10:35.740 --> 00:10:40.740
C++, Q, KDB+, IDL, TypeScript, JavaScript, Scala, Rust,


00:10:40.740 --> 00:10:44.780
PowerShell, C#, F#, and my favorite,


00:10:44.780 --> 00:10:46.980
behind Python, Robot Framework.


00:10:46.980 --> 00:10:48.820
- Nice.


00:10:48.820 --> 00:10:50.340
- I just wanna work in the Robot Framework.


00:10:50.340 --> 00:10:51.460
What languages do you know?


00:10:51.460 --> 00:10:53.820
I know robot, oh really, cool.


00:10:53.820 --> 00:10:55.980
Yeah, anyway, people who are working in Jupyter Notebooks,


00:10:55.980 --> 00:10:57.700
this looks super helpful.


00:10:57.700 --> 00:10:59.920
And Matt, thanks for having a popular tweet


00:10:59.920 --> 00:11:00.900
that got emailed to me.


00:11:00.900 --> 00:11:03.760
- Yeah, so can you do Scheme in Jupyter?


00:11:03.760 --> 00:11:04.820
You must be able to.


00:11:04.820 --> 00:11:06.300
- You must be able to.


00:11:06.300 --> 00:11:09.420
I did Scheme as my CS 101 course.


00:11:09.420 --> 00:11:12.180
- Yeah, me too. - A couple of CS courses.


00:11:12.180 --> 00:11:15.260
And I'm not a fan of all the close parentheses,


00:11:15.260 --> 00:11:16.100
to be honest.


00:11:16.100 --> 00:11:18.500
I'm like, what a crazy language this is.


00:11:18.500 --> 00:11:20.060
But yeah, apparently you can.


00:11:20.060 --> 00:11:20.900
- Nice.


00:11:20.900 --> 00:11:22.220
I'd rather do that over like,


00:11:22.220 --> 00:11:24.660
rather than through like an X term or whatever,


00:11:24.660 --> 00:11:27.100
but yeah, apparently I can.


00:11:27.100 --> 00:11:27.940
- Nice.


00:11:27.940 --> 00:11:28.760
- Pretty cool, anyway,


00:11:28.760 --> 00:11:29.600
so if you work on Jupyter notebooks


00:11:29.600 --> 00:11:31.480
and you want to be able to export them in these cool ways


00:11:31.480 --> 00:11:33.180
and do other stuff as well, check that out.


00:11:33.180 --> 00:11:35.100
- Well, one of the things I want to talk about


00:11:35.100 --> 00:11:37.800
is stuff that we iterate over.


00:11:37.800 --> 00:11:38.700
(laughing)


00:11:38.700 --> 00:11:39.540
- Okay.


00:11:39.540 --> 00:11:41.980
- This is a failed attempt as a transition.


00:11:41.980 --> 00:11:46.820
So a great article called "A Tour of Python IterTools"


00:11:46.820 --> 00:11:50.100
and IterTools is one of those things that you kind of,


00:11:50.100 --> 00:11:53.060
It's so cool, but you kind of blast past it


00:11:53.060 --> 00:11:55.660
when you learn it and when you're learning Python,


00:11:55.660 --> 00:11:58.740
it's a little bit more advanced than you want,


00:11:58.740 --> 00:12:00.420
but this is cool stuff.


00:12:00.420 --> 00:12:02.540
This article is by Martin Hines,


00:12:02.540 --> 00:12:05.360
and he's just kind of briefly describes


00:12:05.360 --> 00:12:08.500
what a handful of the different tools within IterTools


00:12:08.500 --> 00:12:11.480
and a library called More IterTools does.


00:12:11.480 --> 00:12:13.660
And all of these are around iterables


00:12:13.660 --> 00:12:15.860
and iterating over things.


00:12:15.860 --> 00:12:18.100
And you wouldn't think right off the bat


00:12:18.100 --> 00:12:19.260
that you could do so much,


00:12:19.260 --> 00:12:22.380
but I'm going to highlight a few of these, not all of them.


00:12:22.380 --> 00:12:25.260
For iter tools, he talks about compress,


00:12:25.260 --> 00:12:28.780
accumulate, cycle, and T. I had


00:12:28.780 --> 00:12:31.780
not been familiar with cycle and T, but they're pretty cool.


00:12:31.780 --> 00:12:33.780
So iterables, some of them,


00:12:33.780 --> 00:12:37.940
they're empty once you go over it once.


00:12:37.940 --> 00:12:41.420
T allows you to make multiple references to one interval.


00:12:41.420 --> 00:12:44.780
That's pretty neat. Cycle is so cool.


00:12:44.780 --> 00:12:58.580
It allows you to like so you if you iterate over like say a set or a list of items you can just iterate through it once but cycle allows you to just keep going over and over and over again it's like a never ending repeating herbal


00:12:58.580 --> 00:13:02.600
and the little example in the document or in this article.


00:13:02.600 --> 00:13:09.340
This shows you how to easily iterate through characters to make a never ending spinner on a command line.


00:13:09.620 --> 00:13:10.820
So it's kind of fun.


00:13:10.820 --> 00:13:12.300
>> Oh, yeah. That's cool. Yeah. You just put


00:13:12.300 --> 00:13:16.020
the different ones and a list and then you just cycle it.


00:13:16.020 --> 00:13:20.220
>> Yeah. The note is that for things like games and stuff like that,


00:13:20.220 --> 00:13:23.860
if you iterate through different players, you might have to do that.


00:13:23.860 --> 00:13:28.740
But there's a lot of cases where I want to maybe zip through a couple of lists,


00:13:28.740 --> 00:13:32.740
but it's really just one of the lists is a cycle.


00:13:32.740 --> 00:13:34.540
You can do that. It's cool.


00:13:34.540 --> 00:13:37.740
More Iter tools has a whole bunch of things like he's


00:13:37.740 --> 00:13:41.980
highlighting different things that are different ways to chop up your iterations.


00:13:41.980 --> 00:13:45.940
Like there's a divide that just divides it into different sub-iterables.


00:13:45.940 --> 00:13:47.420
>> Like paging almost, right?


00:13:47.420 --> 00:13:49.580
Like process them 25 at a time or something.


00:13:49.580 --> 00:13:51.420
>> Yeah. So there's a whole bunch of different ones.


00:13:51.420 --> 00:13:54.220
In partition is like if you have an expression


00:13:54.220 --> 00:13:58.260
to that can be mapped to true or false on any of your elements,


00:13:58.260 --> 00:14:03.180
it'll split the iterable into two iterables based on that predicate,


00:14:03.180 --> 00:14:04.340
which is pretty cool.


00:14:04.340 --> 00:14:06.300
Side effect that I never knew about.


00:14:06.300 --> 00:14:12.500
So if you want to add another function that gets called with each element during iteration,


00:14:12.500 --> 00:14:14.080
wow, this is cool.


00:14:14.080 --> 00:14:16.220
I think that's neat. I don't know what to use it for,


00:14:16.220 --> 00:14:17.860
but I'm going to come up with a use.


00:14:17.860 --> 00:14:21.740
There's bucketizing to be able to do a bunch of buckets,


00:14:21.740 --> 00:14:24.660
MapReduce, just a whole bunch of neat things.


00:14:24.660 --> 00:14:25.980
I think this is a good,


00:14:25.980 --> 00:14:31.500
if you think you've sunk your teeth into Python and you want to take it to the next level,


00:14:31.500 --> 00:14:33.900
this is a good article to learn IterTools.


00:14:33.900 --> 00:14:37.140
- This is super interesting and IterTools is definitely


00:14:37.140 --> 00:14:39.380
one of those things where you feel like,


00:14:39.380 --> 00:14:43.380
I'm always surprised that there's extra stuff.


00:14:43.380 --> 00:14:45.380
Collections as well, you know, it's just like,


00:14:45.380 --> 00:14:46.740
wow, there's also that thing?


00:14:46.740 --> 00:14:48.940
Why did I not ever use that thing, you know?


00:14:48.940 --> 00:14:50.580
- There's some things about programming


00:14:50.580 --> 00:14:52.620
that I know some people say they'll,


00:14:52.620 --> 00:14:55.540
when they come to a problem and they need a solution for it,


00:14:55.540 --> 00:14:58.460
then they'll look up, that's how they learn new things.


00:14:58.460 --> 00:15:01.760
But you're right, with collections and IterTools,


00:15:01.760 --> 00:15:03.820
you don't know to look it up because you don't know


00:15:03.820 --> 00:15:04.780
there's a solution there.


00:15:04.780 --> 00:15:07.380
So these are good things to skim through


00:15:07.380 --> 00:15:09.060
so that you just have seen them once


00:15:09.060 --> 00:15:11.540
so that later when you run into a problem,


00:15:11.540 --> 00:15:13.660
you're like, oh, there's a thing in IterTools


00:15:13.660 --> 00:15:14.980
that I can use for this.


00:15:14.980 --> 00:15:17.780
- Yeah, I know that that's true even before I look,


00:15:17.780 --> 00:15:19.180
but I don't know what it is.


00:15:19.180 --> 00:15:22.060
I just know if I go dive around there,


00:15:22.060 --> 00:15:24.260
it's probably something I can use at some point.


00:15:24.260 --> 00:15:25.100
But yeah, that's a cool one,


00:15:25.100 --> 00:15:26.620
and it's nice to see it put together


00:15:26.620 --> 00:15:27.780
and highlighted like that.


00:15:27.780 --> 00:15:29.780
I just really wanna talk about this next one, okay?


00:15:29.780 --> 00:15:30.620
- Okay. - All right.


00:15:30.620 --> 00:15:32.220
So this next one is called JustPy,


00:15:32.220 --> 00:15:37.220
And the idea is I want to create a web application


00:15:37.220 --> 00:15:41.420
that allows me to do single page app,


00:15:41.420 --> 00:15:44.020
cool interactive front end framework type stuff


00:15:44.020 --> 00:15:46.780
that I would do with something like say Vue.js,


00:15:46.780 --> 00:15:48.540
but I don't want to write JavaScript.


00:15:48.540 --> 00:15:50.820
So it's pretty interesting.


00:15:50.820 --> 00:15:54.020
It's a web framework that lives on a server.


00:15:54.020 --> 00:15:58.300
So you put it on your standard,


00:15:58.300 --> 00:16:00.840
it actually supports async stuff.


00:16:00.840 --> 00:16:04.800
So you'd put it on like a async server like Starlet


00:16:04.800 --> 00:16:06.560
or something like that or Uviacorn.


00:16:06.560 --> 00:16:11.120
And then you express how the pages are supposed to look


00:16:11.120 --> 00:16:15.480
in Python and it creates the JavaScript


00:16:15.480 --> 00:16:17.000
that's going to make that happen.


00:16:17.000 --> 00:16:21.400
And then I guess web sockets or some form of back and forth


00:16:21.400 --> 00:16:24.420
back to the server to run your Python code


00:16:24.420 --> 00:16:25.960
as people interact with it.


00:16:25.960 --> 00:16:30.120
Using effectively like Ajax type of interaction.


00:16:30.120 --> 00:16:35.860
So yeah, it lets you create these front end and sort of full stack web apps with no front


00:16:35.860 --> 00:16:37.660
end programming.


00:16:37.660 --> 00:16:41.700
And the way it works is like I said, it has no front end back end distinction.


00:16:41.700 --> 00:16:45.960
All the programming is done on the back end, allowing a simpler, more productive way and


00:16:45.960 --> 00:16:48.360
more Pythonic way to create a web app.


00:16:48.360 --> 00:16:52.160
But it intercepts the relevant events on the front end and sends them back to the back


00:16:52.160 --> 00:16:56.680
end to be processed either talking to a database or just like having the Python logic there.


00:16:56.680 --> 00:16:57.680
Neat.


00:16:57.680 --> 00:16:59.440
Yeah, it's a really, really different take.


00:16:59.440 --> 00:17:02.200
And it's been getting a lot of traction.


00:17:02.200 --> 00:17:05.140
My personal thought on it, the verdict's a little bit out.


00:17:05.140 --> 00:17:08.340
I'm not sure how I feel about it, but I definitely think it's interesting and people should check


00:17:08.340 --> 00:17:10.460
it out to see what they think about it.


00:17:10.460 --> 00:17:13.800
It's really based on like classes and components.


00:17:13.800 --> 00:17:17.380
So you can create these components, which then can be put onto the page.


00:17:17.380 --> 00:17:22.680
So like here's a login component or like a component that displays a list of podcast


00:17:22.680 --> 00:17:26.340
episodes or whatever, you put those in different places.


00:17:26.340 --> 00:17:28.460
and you can create these custom components.


00:17:28.460 --> 00:17:31.460
And that can either be just straight Python


00:17:31.460 --> 00:17:33.700
where you create kind of the DOM in Python.


00:17:33.700 --> 00:17:36.020
That's part of the, if it was more HTML based,


00:17:36.020 --> 00:17:40.880
I'd be happier, but it does also support HTML components


00:17:40.880 --> 00:17:42.060
that then work with it.


00:17:42.060 --> 00:17:44.700
And even has like interactive charts and grids.


00:17:44.700 --> 00:17:45.520
So that's pretty cool.


00:17:45.520 --> 00:17:47.020
- Yeah, I see what you're saying.


00:17:47.020 --> 00:17:50.920
It's kind of neat, but also if you don't want to learn HTML


00:17:50.920 --> 00:17:53.660
and JavaScript, learn this instead.


00:17:53.660 --> 00:17:54.500
- Yes, exactly.


00:17:54.500 --> 00:17:55.320
It's kind of like that.


00:17:55.320 --> 00:18:00.060
too much avoiding HTML. I think it's awesome that the logic of it is in Python


00:18:00.060 --> 00:18:04.380
and this no distinction stuff is really cool about the front and back end.


00:18:04.380 --> 00:18:09.380
I just wish I would design the site in HTML and CSS and then plug in the


00:18:09.380 --> 00:18:16.700
liveness through this, not as much of the content definition. That said, Quasar,


00:18:16.700 --> 00:18:20.520
I suspect many listeners are not familiar with the Quasar library, but the


00:18:20.520 --> 00:18:23.280
Quasar library is a cool library


00:18:23.280 --> 00:18:26.960
that's got all sorts of stuff built on top of Vue.js.


00:18:26.960 --> 00:18:29.080
So their little slogan is,


00:18:29.080 --> 00:18:31.800
"Build high-performance Vue.js user interfaces


00:18:31.800 --> 00:18:33.620
"in record time."


00:18:33.620 --> 00:18:35.440
So you can see they've got like,


00:18:35.440 --> 00:18:38.520
think of kind of like what Bootstrap did for web design


00:18:38.520 --> 00:18:40.580
is kind of doing that for Vue.js, right?


00:18:40.580 --> 00:18:42.840
You get some like cool stuff going on there.


00:18:42.840 --> 00:18:46.020
And the reason I randomly diverted sideways


00:18:46.020 --> 00:18:48.040
and started talking about Vue.js and Quasar


00:18:48.040 --> 00:18:53.040
is because JustPy is built on libraries that you would know,


00:18:53.040 --> 00:18:55.560
so Starlet and uvicorn for the server side,


00:18:55.560 --> 00:18:57.720
but vue.js for the front end,


00:18:57.720 --> 00:19:01.640
that means the Quasar library automatically plugs in


00:19:01.640 --> 00:19:03.960
its components and functionalities into JustPy.


00:19:03.960 --> 00:19:05.840
So that gives it actually a huge boost,


00:19:05.840 --> 00:19:07.860
like oh, there's already this really cool library


00:19:07.860 --> 00:19:08.800
that just plugs into it.


00:19:08.800 --> 00:19:10.080
- Oh, nice, okay.


00:19:10.080 --> 00:19:11.400
- That gives it a boost.


00:19:11.400 --> 00:19:15.120
But yeah, I wish you could define more stuff in HTML


00:19:15.120 --> 00:19:15.960
and then bring it.


00:19:15.960 --> 00:19:17.840
Now you can say like, here's an HTML page,


00:19:17.840 --> 00:19:19.840
I'm going to import it and work with it.


00:19:19.840 --> 00:19:25.340
But it doesn't seem to be my first reading that that's the natural way to go.


00:19:25.340 --> 00:19:26.860
>> Yeah. Okay.


00:19:26.860 --> 00:19:28.720
>> But nonetheless, I love that this exists.


00:19:28.720 --> 00:19:31.140
It looks really interesting and people should check it out.


00:19:31.140 --> 00:19:31.520
>> Nice.


00:19:31.520 --> 00:19:34.100
>> Nice. I wonder what the maintenance story is around it though.


00:19:34.100 --> 00:19:35.460
>> Yeah, I'm curious.


00:19:35.460 --> 00:19:38.360
So we want to talk about maintenance.


00:19:38.360 --> 00:19:42.640
I'm not sure why this article is titled Modularity for Maintenance.


00:19:42.640 --> 00:19:44.340
So Modularity for Maintenance,


00:19:44.340 --> 00:19:48.060
It's a bunch of automation tools that you can use


00:19:48.060 --> 00:19:50.320
to help maintain your open source projects.


00:19:50.320 --> 00:19:52.320
And it's really terse with links,


00:19:52.320 --> 00:19:55.140
but it's got continuous integration and talks


00:19:55.140 --> 00:19:58.500
and linting tools and type checking and dependencies


00:19:58.500 --> 00:20:02.620
and security scanning and using code coverage


00:20:02.620 --> 00:20:04.460
and formatting help and releasing


00:20:04.460 --> 00:20:06.820
and all these automation tools that help you,


00:20:06.820 --> 00:20:08.900
which is actually, it's really cool


00:20:08.900 --> 00:20:11.940
to have all these listed down in one place.


00:20:11.940 --> 00:20:12.920
And I like that.


00:20:12.920 --> 00:20:16.280
if you've done all this for a bunch of projects,


00:20:16.280 --> 00:20:17.760
and then you start a new project,


00:20:17.760 --> 00:20:20.620
or maybe you split one project into two projects,


00:20:20.620 --> 00:20:24.480
just the overhead of setting all that stuff up again


00:20:24.480 --> 00:20:27.720
for another project is in itself a lot of work.


00:20:27.720 --> 00:20:31.740
And so he's hoping for some sort of cookie cutter-like thing


00:20:31.740 --> 00:20:34.120
or something for somebody to make


00:20:34.120 --> 00:20:35.880
so that he can save some time.


00:20:35.880 --> 00:20:37.940
But all of us also, I never really thought about


00:20:37.940 --> 00:20:40.600
all of these time-saving things you actually end up


00:20:40.600 --> 00:20:43.440
of having to set up again for each project.


00:20:43.440 --> 00:20:45.480
- Are they actually saving you time?


00:20:45.480 --> 00:20:46.320
- Yeah, right.


00:20:46.320 --> 00:20:48.080
- It depends how long you use the project.


00:20:48.080 --> 00:20:49.320
Probably they are, but yeah.


00:20:49.320 --> 00:20:51.480
- Probably, but I guess it is interesting


00:20:51.480 --> 00:20:52.800
to think about the extra overhead


00:20:52.800 --> 00:20:56.680
and you have to have some of these require


00:20:56.680 --> 00:21:01.080
like login credentials and stuff that you have to set up.


00:21:01.080 --> 00:21:03.040
But actually I really like all this list


00:21:03.040 --> 00:21:05.200
and I kind of want to go take one of my projects


00:21:05.200 --> 00:21:07.600
and make sure, see if I can make sure


00:21:07.600 --> 00:21:08.840
I'm hitting all of these things.


00:21:08.840 --> 00:21:09.800
- Yeah, it's super cool.


00:21:09.800 --> 00:21:13.760
And I just last night used cookie cutter,


00:21:13.760 --> 00:21:18.760
rent the new Python package template from cookie cutter


00:21:18.760 --> 00:21:21.980
to create a Python package that I'm working on.


00:21:21.980 --> 00:21:23.560
So yeah, this is super real.


00:21:23.560 --> 00:21:25.440
I'm like, oh, I bet there's a cookie cutter thing


00:21:25.440 --> 00:21:27.880
to set up like the setup file, just write


00:21:27.880 --> 00:21:29.480
and integrate talks and whatnot.


00:21:29.480 --> 00:21:30.880
And yeah, let's hit it with that.


00:21:30.880 --> 00:21:32.800
- Where was this new cookie cutter thing?


00:21:32.800 --> 00:21:33.640
- It's not super new.


00:21:33.640 --> 00:21:38.440
If you go to cookie cutter, there's like a place called,


00:21:38.440 --> 00:21:41.520
a part called pantry full of cookies or something like that.


00:21:41.520 --> 00:21:43.540
Let me go, I'll pull up really quick.


00:21:43.540 --> 00:21:45.960
Under the documentation on cookiecutter.readthedocs,


00:21:45.960 --> 00:21:47.760
there's a pantry full of cookie cutters


00:21:47.760 --> 00:21:52.760
and then the first four are for making packages.


00:21:52.760 --> 00:21:57.460
So there's Audrey's ultimate Python package project


00:21:57.460 --> 00:21:59.200
template creator thing.


00:21:59.200 --> 00:22:02.520
There's a minimal package for pip installable projects


00:22:02.520 --> 00:22:03.520
and a couple of others.


00:22:03.520 --> 00:22:06.600
The one I used was the second one, I believe.


00:22:07.520 --> 00:22:08.980
No, third one.


00:22:08.980 --> 00:22:10.240
I don't know, I can't remember anymore.


00:22:10.240 --> 00:22:11.560
And it was on a different computer,


00:22:11.560 --> 00:22:13.360
so I can't get to the history of it.


00:22:13.360 --> 00:22:14.640
- Okay, that's cool. - But yeah, anyway,


00:22:14.640 --> 00:22:16.960
these are really cool because basically it sets it up,


00:22:16.960 --> 00:22:18.920
and I used the one that was the minimal,


00:22:18.920 --> 00:22:20.680
PyPackage minimal, that it already


00:22:20.680 --> 00:22:23.400
mathematically sets it up to work with PyTest,


00:22:23.400 --> 00:22:26.400
and it has the setup PY all generated


00:22:26.400 --> 00:22:27.920
based on what you tell it, and stuff like that.


00:22:27.920 --> 00:22:28.760
It's pretty cool.


00:22:28.760 --> 00:22:31.720
- Okay, well, if it's not using flit,


00:22:31.720 --> 00:22:33.480
I don't know if it's really minimal, but.


00:22:33.480 --> 00:22:34.640
(laughing)


00:22:34.640 --> 00:22:37.280
- But the thing is, it doesn't have all these things


00:22:37.280 --> 00:22:39.000
that Glyph's talking about, right?


00:22:39.000 --> 00:22:43.200
It does have Travis CI integration in there,


00:22:43.200 --> 00:22:45.160
but there's a lot of things that it could be added,


00:22:45.160 --> 00:22:46.520
and it's pretty neat.


00:22:46.520 --> 00:22:48.120
Somebody could fork that and then make it.


00:22:48.120 --> 00:22:49.880
- Yeah, I definitely think so.


00:22:49.880 --> 00:22:51.400
So yeah, hopefully.


00:22:51.400 --> 00:22:52.440
- Yeah, nice.


00:22:52.440 --> 00:22:53.760
All right, well, I guess that's it, huh?


00:22:53.760 --> 00:22:54.580
What else we got?


00:22:54.580 --> 00:22:55.580
What do you wanna let people know about?


00:22:55.580 --> 00:22:57.040
- Here's a quick one,


00:22:57.040 --> 00:22:59.480
not really big enough to warrant a whole topic,


00:22:59.480 --> 00:23:02.760
but I noticed that Sentry is helping


00:23:02.760 --> 00:23:04.840
to fund some open source projects.


00:23:04.840 --> 00:23:06.720
They got some money from somebody else.


00:23:06.720 --> 00:23:10.640
They decided to match it and pass it along.


00:23:10.640 --> 00:23:14.520
And they're gonna help fund Black, PyPI, PyTest,


00:23:14.520 --> 00:23:18.160
StructLog, and a Rust tool called Gimli.


00:23:18.160 --> 00:23:19.760
- Cool. - And that's pretty neat.


00:23:19.760 --> 00:23:22.360
I like the, actually, I haven't played


00:23:22.360 --> 00:23:23.440
with StructLog too much.


00:23:23.440 --> 00:23:24.480
I've played with it a little bit,


00:23:24.480 --> 00:23:26.160
but all the others I use all the time.


00:23:26.160 --> 00:23:27.240
- Oh yeah, very nice.


00:23:27.240 --> 00:23:30.920
Yeah, Sentry, a nice open source based company,


00:23:30.920 --> 00:23:33.040
funding open source, pretty nice.


00:23:33.040 --> 00:23:34.480
The circle of life.


00:23:34.480 --> 00:23:36.540
Except for Sentry's not eating any of these,


00:23:36.540 --> 00:23:37.540
but other than that.


00:23:37.540 --> 00:23:40.220
(laughing)


00:23:40.220 --> 00:23:41.480
- Nice.


00:23:41.480 --> 00:23:42.740
- Thanks.


00:23:42.740 --> 00:23:46.100
All right, a couple quick announcements on my end.


00:23:46.100 --> 00:23:48.660
Just launched a new course, Python for Absolute Beginners.


00:23:48.660 --> 00:23:51.580
So this is like, hey, I didn't take CS at college,


00:23:51.580 --> 00:23:53.100
what the heck is all this stuff about


00:23:53.100 --> 00:23:55.540
when people talk about memory allocation


00:23:55.540 --> 00:23:57.700
and variables and data structures,


00:23:57.700 --> 00:23:59.580
but actually really getting started with Python.


00:23:59.580 --> 00:24:00.700
So that's a super fun one.


00:24:00.700 --> 00:24:02.740
People can check that out, build a lot of games,


00:24:02.740 --> 00:24:04.540
but learn a lot of Python.


00:24:04.540 --> 00:24:06.880
And then also related on TalkByThon training,


00:24:06.880 --> 00:24:10.460
started streaming a couple of our latest courses


00:24:10.460 --> 00:24:13.280
where possible, including this one I just announced,


00:24:13.280 --> 00:24:16.780
is high DPI, so almost 4K streams,


00:24:16.780 --> 00:24:19.780
and it's like night and day.


00:24:19.780 --> 00:24:21.920
It's so awesome to sit there and look at the screen


00:24:21.920 --> 00:24:25.920
and go, that is like as if I'm looking at a real monitor,


00:24:25.920 --> 00:24:27.080
just back in time.


00:24:27.080 --> 00:24:28.540
So anyway, I'm trying that out.


00:24:28.540 --> 00:24:30.640
Hopefully, so far it's been working well for people,


00:24:30.640 --> 00:24:34.140
but if for some reason people can send me a note.


00:24:34.140 --> 00:24:37.460
Here's an interesting one that comes from Anthony Sotili.


00:24:37.460 --> 00:24:41.100
Amazon Web Services has decided to no longer publish


00:24:41.100 --> 00:24:45.180
AWS CLI, their package, AWS CLI, to PyPI,


00:24:45.180 --> 00:24:50.180
pulling a 700 million download package off of PyPI.


00:24:50.180 --> 00:24:52.700
Think of all the bandwidth they're saving.


00:24:52.700 --> 00:24:53.980
- That's weird.


00:24:53.980 --> 00:24:58.440
- So this is not their Python library, potentially.


00:24:58.440 --> 00:25:01.060
This is the CLI tool that people


00:25:01.060 --> 00:25:04.060
who don't even do Python would use.


00:25:04.060 --> 00:25:05.520
It's just implemented in there.


00:25:05.520 --> 00:25:08.440
So it's not a huge deal, it's not like a giant,


00:25:08.440 --> 00:25:11.040
oh my gosh, what's happening to the world sort of thing,


00:25:11.040 --> 00:25:12.120
but it's also strange.


00:25:12.120 --> 00:25:15.320
So what's more strange is I'm linking to


00:25:15.320 --> 00:25:18.240
Anthony Sotile's Twitter thread that talks about this,


00:25:18.240 --> 00:25:20.040
but then that links over to GitHub


00:25:20.040 --> 00:25:21.920
where there's more conversation.


00:25:21.920 --> 00:25:24.320
On one hand, it makes sense, right?


00:25:24.320 --> 00:25:28.480
Why use pip to distribute a library


00:25:28.480 --> 00:25:31.280
that is not specifically for Python developers.


00:25:31.280 --> 00:25:34.040
But the other bit is, well, the replacement's


00:25:34.040 --> 00:25:35.720
an unversioned zip file of script.


00:25:35.720 --> 00:25:39.920
So, hmm, I don't know which is better.


00:25:39.920 --> 00:25:41.240
It's a little bit funky.


00:25:41.240 --> 00:25:43.720
And then finally, people might have noticed


00:25:43.720 --> 00:25:45.440
some weirdness with the podcast.


00:25:45.440 --> 00:25:48.440
I don't know what has gone on, but something happened.


00:25:48.440 --> 00:25:50.560
I think it was at Apple.


00:25:50.560 --> 00:25:53.280
On Talk Python, it all of a sudden started showing


00:25:53.280 --> 00:25:57.440
four episodes, some from three or four years ago,


00:25:57.440 --> 00:25:58.940
as the latest.


00:25:58.940 --> 00:26:00.780
And you might say, well, maybe something changed


00:26:00.780 --> 00:26:02.920
in the database and the dates got wrong or the number,


00:26:02.920 --> 00:26:04.800
like we changed nothing.


00:26:04.800 --> 00:26:07.940
Didn't change the RSS feed generator.


00:26:07.940 --> 00:26:09.140
We didn't change the data.


00:26:09.140 --> 00:26:11.700
It just all of a sudden started going crazy.


00:26:11.700 --> 00:26:14.900
And my theory is they've put some kind of limit


00:26:14.900 --> 00:26:18.540
on the size 'cause we were shipping like 2.5 megs


00:26:18.540 --> 00:26:22.340
of XML for each request, especially for Python bytes


00:26:22.340 --> 00:26:24.900
'cause the show notes are large.


00:26:24.900 --> 00:26:27.740
And I think it just went like, no.


00:26:27.740 --> 00:26:29.980
But it's response to no was just


00:26:29.980 --> 00:26:30.940
to do something really weird.


00:26:30.940 --> 00:26:34.580
So on Python Bytes, we now are showing


00:26:34.580 --> 00:26:37.660
just the last half year, because the alternative


00:26:37.660 --> 00:26:40.940
was to have things massively broken in the RSS,


00:26:40.940 --> 00:26:42.300
in the podcast players.


00:26:42.300 --> 00:26:44.540
So if you want the older ones,


00:26:44.540 --> 00:26:45.860
they're still available on the website.


00:26:45.860 --> 00:26:47.180
We're not doing anything like that,


00:26:47.180 --> 00:26:49.580
but this was the fix that I had to put in


00:26:49.580 --> 00:26:52.340
to get things to work again on the teams.


00:26:52.340 --> 00:26:53.180
I don't know what happened.


00:26:53.180 --> 00:26:54.620
- I think it's a fair trade-off.


00:26:54.620 --> 00:26:57.100
- Yeah, I do too, and also it means stuff


00:26:57.100 --> 00:26:59.020
to refresh us faster for people.


00:26:59.020 --> 00:27:01.460
They're not pulling 2.5 megs all day long


00:27:01.460 --> 00:27:03.000
with their podcast players.


00:27:03.000 --> 00:27:04.100
I don't mind on the web server,


00:27:04.100 --> 00:27:05.540
but for them, they might mind.


00:27:05.540 --> 00:27:07.180
- Yeah, they don't pull at all


00:27:07.180 --> 00:27:09.740
unless they download every episode or something, right?


00:27:09.740 --> 00:27:12.900
- Well, it's constantly pulling that 2.5 megs


00:27:12.900 --> 00:27:14.660
over and over and over, right?


00:27:14.660 --> 00:27:16.620
If you pull up the tail of the web server,


00:27:16.620 --> 00:27:17.840
it's just going choom, choom, choom


00:27:17.840 --> 00:27:19.780
against that over and over and over.


00:27:19.780 --> 00:27:23.300
Then it pulls the actual episodes it finds


00:27:23.300 --> 00:27:24.380
that are different, so.


00:27:24.380 --> 00:27:25.780
- Oh right, okay, got it.


00:27:25.780 --> 00:27:27.780
- But it's hitting the full on RSS.


00:27:27.780 --> 00:27:29.900
So now the RSS speed is like 250K,


00:27:29.900 --> 00:27:32.420
which is still pretty big, but it's not 2.5 megs.


00:27:32.420 --> 00:27:33.820
- Oh yeah, sounds smaller.


00:27:33.820 --> 00:27:38.260
- Are you a fan of physics, Einstein, relatively?


00:27:38.260 --> 00:27:39.340
- I like gravity, it's good.


00:27:39.340 --> 00:27:43.180
- Yeah, yeah, and you're also a fan of software quality,


00:27:43.180 --> 00:27:46.320
as most software people should be, I suspect.


00:27:46.320 --> 00:27:49.620
But did you know that E equals MC squared is--


00:27:49.620 --> 00:27:52.260
- I have heard that on T-shirts before.


00:27:52.260 --> 00:27:55.420
- It's a statement about programming, really.


00:27:55.420 --> 00:27:56.960
I didn't realize Einstein was into this,


00:27:56.960 --> 00:27:59.820
but it's about testing and code quality


00:27:59.820 --> 00:28:01.100
and bug rates and whatnot.


00:28:01.100 --> 00:28:01.940
- How?


00:28:01.940 --> 00:28:04.740
- Because E equals MC squared is errors


00:28:04.740 --> 00:28:07.060
equals more code squared.


00:28:07.060 --> 00:28:09.900
So as you add code, the errors increase


00:28:09.900 --> 00:28:13.060
at the square of the amount of code, basically.


00:28:13.060 --> 00:28:15.020
And that seems not totally untrue.


00:28:15.020 --> 00:28:16.740
- Yeah, that's funny, but yeah, you're right.


00:28:16.740 --> 00:28:19.340
It's sort of kind of true, yeah.


00:28:19.340 --> 00:28:21.100
- I'm not sure if it's the square


00:28:21.100 --> 00:28:23.860
or it's like 1.5 or maybe it's like--


00:28:23.860 --> 00:28:26.020
- It's definitely nonlinear though.


00:28:26.020 --> 00:28:29.100
- You know, some polynomial, but it's nonlinear


00:28:29.100 --> 00:28:30.820
and it grows, yeah, for sure.


00:28:30.820 --> 00:28:32.860
For sure, anyway, E equals MC squared.


00:28:32.860 --> 00:28:33.900
That's the joke for the week.


00:28:33.900 --> 00:28:36.460
First law of software quality, E equals MC squared.


00:28:36.460 --> 00:28:37.980
- Nice, I like it.


00:28:37.980 --> 00:28:38.820
- Awesome.


00:28:38.820 --> 00:28:40.060
All right, yeah, thanks, bye.


00:28:40.060 --> 00:28:40.940
- Bye.


00:28:40.940 --> 00:28:42.660
Thank you for listening to Python Bytes.


00:28:42.660 --> 00:28:45.140
Follow the show on Twitter @pythonbytes.


00:28:45.140 --> 00:28:48.220
That's Python Bytes as in B-Y-T-E-S.


00:28:48.220 --> 00:28:51.140
and get the full show notes at pythonbytes.fm.


00:28:51.140 --> 00:28:53.340
If you have a news item you want featured,


00:28:53.340 --> 00:28:56.100
just visit pythonbytes.fm and send it our way.


00:28:56.100 --> 00:28:58.220
We're always on the lookout for sharing something cool.


00:28:58.220 --> 00:28:59.300
This is Brian Okken,


00:28:59.300 --> 00:29:01.380
and on behalf of myself and Michael Kennedy,


00:29:01.380 --> 00:29:03.500
thank you for listening and sharing this podcast


00:29:03.500 --> 00:29:05.140
with your friends and colleagues.

