
00:00:00.000 --> 00:00:07.760
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 94 recorded September 5th


00:00:07.760 --> 00:00:11.960
2018 I'm Michael Kennedy and I'm Brian Atkin. Hey Brian. How you doing? I'm doing really good


00:00:11.960 --> 00:00:17.200
Yeah, yeah, excellent doing very well. The Sun is shining summer has not left us yet


00:00:17.200 --> 00:00:21.560
It's not that great for productivity, but it's definitely good for keeping the spirits up


00:00:21.560 --> 00:00:25.080
Yeah, you know what else is keeping my spirits up is my digital ocean servers


00:00:25.080 --> 00:00:28.620
the ones running this site and many others,


00:00:28.620 --> 00:00:29.620
they've been working perfectly.


00:00:29.620 --> 00:00:31.820
So they've been going really, really strong


00:00:31.820 --> 00:00:33.460
and we'll tell you more about them later.


00:00:33.460 --> 00:00:35.380
But in the meantime, if you wanna check them out,


00:00:35.380 --> 00:00:37.120
pythonbytes.fm/digitalocean,


00:00:37.120 --> 00:00:39.740
get $100 credit for new users.


00:00:39.740 --> 00:00:44.380
Brian, when I was in the C++ world,


00:00:44.380 --> 00:00:47.860
the C# world, design patterns were like this massive thing


00:00:47.860 --> 00:00:50.020
and you had to know all the design patterns


00:00:50.020 --> 00:00:51.980
and there was like dependency injection


00:00:51.980 --> 00:00:53.980
and IOC containers and all this stuff.


00:00:53.980 --> 00:00:58.160
But I feel like Python doesn't have as much rigor around it


00:00:58.160 --> 00:01:00.580
because you don't have to jump through so many hoops


00:01:00.580 --> 00:01:02.780
to make certain things happen, I guess.


00:01:02.780 --> 00:01:03.620
What do you think?


00:01:03.620 --> 00:01:04.940
- Yeah, I think so.


00:01:04.940 --> 00:01:06.420
It's actually something that's interesting


00:01:06.420 --> 00:01:08.260
'cause I came from the C++ world.


00:01:08.260 --> 00:01:10.740
So C patterns were a thing in C# also?


00:01:10.740 --> 00:01:11.580
- Oh yeah.


00:01:11.580 --> 00:01:12.420
- Okay.


00:01:12.420 --> 00:01:16.300
Well, I don't even know who the gang of four are,


00:01:16.300 --> 00:01:18.020
but there were four authors that wrote


00:01:18.020 --> 00:01:21.500
the A Design Patterns book.


00:01:21.500 --> 00:01:24.900
Let's see, Eric Gamma, Richard Helm, Ralph Johnson,


00:01:24.900 --> 00:01:27.500
and I'm not gonna try to pronounce that last one,


00:01:27.500 --> 00:01:28.740
John something.


00:01:28.740 --> 00:01:31.380
Anyway, in, gosh, in the '90s,


00:01:31.380 --> 00:01:33.620
if you were in C++ or C#, apparently,


00:01:33.620 --> 00:01:38.140
you read this book or others around design patterns.


00:01:38.140 --> 00:01:39.980
And then when I got into Python,


00:01:39.980 --> 00:01:42.380
I was a little curious whether that was a thing


00:01:42.380 --> 00:01:46.220
in Python or not, but I haven't really heard much


00:01:46.220 --> 00:01:48.380
other than I haven't really needed it.


00:01:48.380 --> 00:01:49.900
A lot of this stuff isn't really needed.


00:01:49.900 --> 00:01:53.340
What I think is interesting is there's those patterns that you see from the


00:01:53.340 --> 00:01:58.140
Gang of Four and the sort of derivative ones, derivative books and thinking.


00:01:58.140 --> 00:02:01.360
And a lot of it, like you say, is not needed, but there are other patterns


00:02:01.360 --> 00:02:05.340
that are really useful and like come in, like for example, meta classes,


00:02:05.340 --> 00:02:08.880
for example, or decorators, there's other stuff, right?


00:02:08.880 --> 00:02:12.860
Generator methods, all sorts of stuff that is in here that don't appear in


00:02:12.860 --> 00:02:17.620
the Gang of Four because you know, C++ or Smalltalk just didn't do that.


00:02:17.620 --> 00:02:19.740
They were highly based on Smalltalk actually.


00:02:19.740 --> 00:02:25.660
their patterns. Right. Well, one of the things that caught my attention today was a tweet by,


00:02:25.660 --> 00:02:28.300
gosh, who's this? Brandon Rhodes.


00:02:28.300 --> 00:02:33.900
Brandon Rhodes. Yep. And he's doing, he's got a site called pythonpatterns.guide.


00:02:33.900 --> 00:02:41.900
And it has, he's sort of going through a lot of, a lot of different, I think he's going through


00:02:41.900 --> 00:02:47.500
the Gang of Four book, but he might be also doing other, pulling together other design pattern


00:02:48.460 --> 00:02:53.020
things that he's talked, yeah, he's pulling together information from talks and writing,


00:02:53.020 --> 00:02:57.820
and I think he's creating more information too. But there are a whole bunch of these,


00:02:57.820 --> 00:03:03.740
trying to apply some of these patterns to Python and kind of sometimes different ways to do it.


00:03:03.740 --> 00:03:09.100
So you can do things in different ways. And so far, he's got abstract factory pattern,


00:03:09.100 --> 00:03:15.100
the builder pattern, factory method, composite decorator. Yeah, we definitely have decorators.


00:03:15.660 --> 00:03:20.860
And then things like monkey patches and iterators, things like that.


00:03:20.860 --> 00:03:25.500
And how that applies, I'm glad that somebody that knows what they're talking about is


00:03:25.500 --> 00:03:28.540
trying to figure out how does this all apply in Python.


00:03:28.540 --> 00:03:30.940
And I haven't really dug too much into this.


00:03:30.940 --> 00:03:34.940
I just think it's a neat resource to try to read about some of these.


00:03:34.940 --> 00:03:37.020
Yeah, I definitely think it's a really neat resource.


00:03:37.020 --> 00:03:41.660
And Brandon has some interesting thinking on design patterns and architectures.


00:03:41.660 --> 00:03:47.860
He gave a super not counterintuitive talk called clean architecture.


00:03:47.860 --> 00:03:49.700
I think it was at PI Ohio a couple years ago.


00:03:49.700 --> 00:03:52.380
And when I first started watching it, I was like, I just disagree


00:03:52.380 --> 00:03:53.420
with everything you're saying.


00:03:53.420 --> 00:03:55.180
This just seems so wrong.


00:03:55.180 --> 00:03:58.580
And then after 10 minutes, I'm like, but wait a minute.


00:03:58.580 --> 00:03:59.780
I think it's right.


00:03:59.780 --> 00:04:01.980
Like, I think I've been thinking about this all wrong.


00:04:01.980 --> 00:04:07.820
And it really, really caught my attention because I, I didn't agree with it so much.


00:04:07.820 --> 00:04:10.940
But then I I'm like, wow, this is really compelling what you're telling me.


00:04:10.940 --> 00:04:12.700
So maybe I need to rethink what I'm thinking.


00:04:12.700 --> 00:04:15.700
And whenever I have that feeling, I'm like, whoa, I need to pay attention


00:04:15.700 --> 00:04:18.540
because, you know, I might learn something really good here.


00:04:18.540 --> 00:04:18.780
Yeah.


00:04:18.780 --> 00:04:20.700
And yeah, so that's a that's a good point.


00:04:20.700 --> 00:04:24.700
I'm not necessarily saying I since I haven't really dug through this too much.


00:04:24.700 --> 00:04:26.060
I'm not sure.


00:04:26.060 --> 00:04:28.900
I mean, I respect Brandon is a is a smart guy.


00:04:28.900 --> 00:04:32.660
I expect that there's some really great stuff in here, but you may not


00:04:32.660 --> 00:04:34.420
may not agree with all of it.


00:04:34.420 --> 00:04:37.020
So we'll try to dig up a link to that clean architecture, too,


00:04:37.020 --> 00:04:38.340
because that sounds interesting.


00:04:38.340 --> 00:04:39.140
It's super interesting.


00:04:39.140 --> 00:04:40.580
Yeah, it's definitely a good one.


00:04:40.580 --> 00:04:41.580
Cool.


00:04:41.580 --> 00:04:43.220
Well, thanks for bringing this up.


00:04:43.220 --> 00:04:48.140
I love these Python patterns and I love sort of the how would, you know, these traditional


00:04:48.140 --> 00:04:52.180
more formalized patterns actually look in our language.


00:04:52.180 --> 00:04:53.620
And there's a lot of interesting examples there.


00:04:53.620 --> 00:04:54.620
Yeah.


00:04:54.620 --> 00:04:55.620
What we got next?


00:04:55.620 --> 00:04:57.440
Well, we got this thing called Arctic.


00:04:57.440 --> 00:05:06.060
And Arctic is an API framework over top of MongoDB and pandas.


00:05:06.060 --> 00:05:11.340
The idea is this is a thing that's been around since around 2012.


00:05:11.340 --> 00:05:18.220
Its sole purpose is analyzing time series data super fast.


00:05:18.220 --> 00:05:24.740
One of their headline is basically, "Archic millions of rows per second of time data in


00:05:24.740 --> 00:05:25.740
Python."


00:05:25.740 --> 00:05:27.660
That is really quite impressive.


00:05:27.660 --> 00:05:31.220
I can tell you a lot of the ODMs and ORMs and stuff, they don't do millions of records


00:05:31.220 --> 00:05:32.220
per second.


00:05:32.220 --> 00:05:37.820
So the idea is that it basically bakes in pandas and num pies and all those kinds of


00:05:37.820 --> 00:05:39.100
things.


00:05:39.100 --> 00:05:42.100
And it has an underlying data store that's backed by MongoDB.


00:05:42.100 --> 00:05:46.320
And it actually uses like the binary low level communication.


00:05:46.320 --> 00:05:51.760
So instead of trying to like store all the data, and then bringing it back and de serializing


00:05:51.760 --> 00:05:57.540
each row, I think what it does is it actually just stores the binary data of pandas and


00:05:57.540 --> 00:06:00.540
and it'll pickle like NumPy arrays and stuff like that


00:06:00.540 --> 00:06:03.300
and just exchanges like the memory structure


00:06:03.300 --> 00:06:04.820
and just pulls it straight back and go,


00:06:04.820 --> 00:06:06.300
yep, here it is, let's look at it.


00:06:06.300 --> 00:06:07.260
And it's pretty cool.


00:06:07.260 --> 00:06:09.340
- Yeah, yeah, definitely.


00:06:09.340 --> 00:06:11.900
And there's a lot of applications that use


00:06:11.900 --> 00:06:14.260
just huge amounts of time series data.


00:06:14.260 --> 00:06:16.420
- Yeah, so they say the two big areas


00:06:16.420 --> 00:06:21.080
they think it's useful is IoT, little tiny IoT devices


00:06:21.080 --> 00:06:25.740
that maybe Python is running on, and financial analysis.


00:06:25.740 --> 00:06:28.180
So they're, you know, it's sort of been extracted


00:06:28.180 --> 00:06:31.860
out of the work that this financial company called MAN,


00:06:31.860 --> 00:06:33.300
A-H-L, I've never heard of them,


00:06:33.300 --> 00:06:35.300
but I think they're mostly an Asian company,


00:06:35.300 --> 00:06:38.800
but also in the US, around investment and so on.


00:06:38.800 --> 00:06:40.220
So they've been working on this


00:06:40.220 --> 00:06:41.980
and they actually have some numbers


00:06:41.980 --> 00:06:46.980
on how this thing performs relative to other types


00:06:46.980 --> 00:06:48.300
of projects that they pursued


00:06:48.300 --> 00:06:50.260
or other things that were available.


00:06:50.260 --> 00:06:52.380
So they talk about the different kinds of data


00:06:52.380 --> 00:06:55.060
that they store and analyze for stock trading and analysis.


00:06:55.060 --> 00:06:57.380
And they say, look, we have this sort of data


00:06:57.380 --> 00:07:00.020
that's for one day, a whole bunch of it,


00:07:00.020 --> 00:07:02.340
maybe 10,000 rows, and they can work


00:07:02.340 --> 00:07:05.420
with those 10,000 rows in four milliseconds.


00:07:05.420 --> 00:07:07.600
And they say, compare that to what we were getting


00:07:07.600 --> 00:07:11.420
out of SQL Server, which was 2.2 seconds.


00:07:11.420 --> 00:07:15.140
So, you know, 500 times slower, which is pretty incredible.


00:07:15.140 --> 00:07:16.820
And they have this other like tick data,


00:07:16.820 --> 00:07:19.820
like, you know, the stock ticker type of data.


00:07:19.820 --> 00:07:23.700
They can say in one second, they can process 3.5 megs


00:07:23.700 --> 00:07:27.140
worth of that data in Python or 15 megs in Java.


00:07:27.140 --> 00:07:28.980
And there were some other projects


00:07:28.980 --> 00:07:30.940
that they were trying to improve over called OtherTig,


00:07:30.940 --> 00:07:33.720
which took like 40 seconds versus one.


00:07:33.720 --> 00:07:37.020
So really, really interesting,


00:07:37.020 --> 00:07:40.700
high-performance, database-backed time series.


00:07:40.700 --> 00:07:41.660
- Hmm, neat.


00:07:41.660 --> 00:07:43.700
- Yeah, so if you're into pandas, NumPy,


00:07:43.700 --> 00:07:46.660
and you've got to store and query a bunch of time series,


00:07:46.660 --> 00:07:49.300
whatever the reason, this is probably worth checking out.


00:07:49.300 --> 00:07:51.260
And it's also tested with pytest,


00:07:51.260 --> 00:07:52.180
which is pretty cool, right?


00:07:52.180 --> 00:07:53.580
- Oh, well, of course.


00:07:53.580 --> 00:07:56.540
Any real project's tested with pytest.


00:07:56.540 --> 00:07:58.020
- That's right, of course.


00:07:58.020 --> 00:08:00.900
So, one of the things I really like


00:08:00.900 --> 00:08:03.420
about the Python community is the fact that


00:08:03.420 --> 00:08:06.020
there's so much sharing of information


00:08:06.020 --> 00:08:09.140
out of conferences and meetups and things like that.


00:08:09.140 --> 00:08:13.360
So we have another thing you found here for PyCon, right?


00:08:13.360 --> 00:08:16.180
- Yeah, so the PyCon, I don't remember when it was,


00:08:16.180 --> 00:08:19.540
but PyCon Australia wasn't too long ago,


00:08:19.540 --> 00:08:22.780
And they've already got all the videos up.


00:08:22.780 --> 00:08:25.820
And we have a link to the PyCon Australia videos.


00:08:25.820 --> 00:08:28.780
And I've got quite a few of them queued up


00:08:28.780 --> 00:08:31.380
that I'd like to listen to.


00:08:31.380 --> 00:08:33.500
I'm kind of bad about videos, actually.


00:08:33.500 --> 00:08:37.060
I often just listen to them and then go back


00:08:37.060 --> 00:08:39.940
and look at the slide parts of information


00:08:39.940 --> 00:08:41.060
that I wanted to capture.


00:08:41.060 --> 00:08:43.700
But I like listening to talks as well.


00:08:43.700 --> 00:08:45.980
But there's one from Mark Smith,


00:08:45.980 --> 00:08:47.300
which he always amuses me


00:08:47.300 --> 00:08:51.300
his Twitter handle is Judy2k and he won't tell me why.


00:08:51.300 --> 00:08:57.300
But his talk is how to publish a package on PyPI and that's the one I've watched so far.


00:08:57.300 --> 00:09:01.100
There's a lot of great talks there though, but I think this one's a great one that it


00:09:01.100 --> 00:09:05.020
the end punchline is use cookie cutter.


00:09:05.020 --> 00:09:09.300
But he blasts through not using cookie cutter, all the sort of stuff you have to do to get


00:09:09.300 --> 00:09:13.260
up and you know it's every little piece makes sense and it's not difficult, but there are


00:09:13.260 --> 00:09:14.860
a lot of different little pieces.


00:09:14.860 --> 00:09:18.300
But he goes through this entire thing in like less than half an hour.


00:09:18.300 --> 00:09:23.100
And so that's pretty impressive to watch him talk about all the different pieces and why


00:09:23.100 --> 00:09:25.200
they're there and what they're used for.


00:09:25.200 --> 00:09:30.280
So that's a good one to sort of understand what's going on in the packaging world in


00:09:30.280 --> 00:09:31.540
a very short amount of time.


00:09:31.540 --> 00:09:32.540
Oh, that's really cool.


00:09:32.540 --> 00:09:34.660
Yeah, there's a bunch of cool ones here.


00:09:34.660 --> 00:09:36.680
A couple in MicroPython, actually.


00:09:36.680 --> 00:09:42.460
So one writing fast and efficient MicroPython code, and the other is asyncio in MicroPython.


00:09:42.460 --> 00:09:43.860
Both of those are pretty cool.


00:09:43.860 --> 00:09:48.580
I'm kind of tying to what we were just talking about previously. Yeah, and then there's like gosh, there's


00:09:48.580 --> 00:09:51.220
solid api's and there's


00:09:51.220 --> 00:09:53.620
Looks like a real a lot of good stuff


00:09:53.620 --> 00:10:00.200
And I know that Australia is since it's big travel burden to other places other pythons


00:10:00.200 --> 00:10:04.340
There you'll you'll see some speakers there that you're not gonna see other places. So that's cool


00:10:04.340 --> 00:10:08.700
Yeah, absolutely, and they have 88 videos. So that's pretty solid. Yeah, quite cool. That's a good one


00:10:09.580 --> 00:10:12.380
So before we move on, I'll tell you about another cool thing,


00:10:12.380 --> 00:10:13.740
DigitalOcean.


00:10:13.740 --> 00:10:15.180
So big fan.


00:10:15.180 --> 00:10:17.820
And so one of the things that they've released--


00:10:17.820 --> 00:10:20.460
we talked about this just a couple of times, not very much--


00:10:20.460 --> 00:10:22.380
is this idea of projects.


00:10:22.380 --> 00:10:25.020
So when you go into your--


00:10:25.020 --> 00:10:28.100
name your cloud provider, you might have a bunch of servers,


00:10:28.100 --> 00:10:33.860
a bunch of ESP storage type things, virtual storage blocks,


00:10:33.860 --> 00:10:35.940
load balancers, all sorts of stuff.


00:10:35.940 --> 00:10:38.540
And it's really hard to know what goes with what.


00:10:38.540 --> 00:10:39.660
Do you have a staging environment,


00:10:39.660 --> 00:10:42.060
a production environment, all that kind of stuff, right?


00:10:42.060 --> 00:10:43.020
So how do you organize that?


00:10:43.020 --> 00:10:45.940
So DigitalOcean has come up with this feature called Projects


00:10:45.940 --> 00:10:48.620
that lets you group things like your droplets,


00:10:48.620 --> 00:10:51.040
that's virtual machines, and floating IPs,


00:10:51.040 --> 00:10:53.660
and back storage, like spaces,


00:10:53.660 --> 00:10:55.840
into these different use cases.


00:10:55.840 --> 00:10:59.260
So, you know, yeah, actually we're done with this project


00:10:59.260 --> 00:11:01.020
so we can turn that server off and destroy it,


00:11:01.020 --> 00:11:02.780
and not like the fear of,


00:11:02.780 --> 00:11:05.100
"I don't think we're using this one,


00:11:05.100 --> 00:11:06.140
"but I'm not gonna destroy,


00:11:06.140 --> 00:11:08.860
I'm not going to delete it because what if I'm wrong, right?


00:11:08.860 --> 00:11:12.420
So a very cool feature you can take advantage of for all of their stuff.


00:11:12.420 --> 00:11:18.340
Check them out at Python bytes.fm/digitalocean and I'll give you a hundred dollars credit for new users.


00:11:18.340 --> 00:11:18.980
That's awesome.


00:11:18.980 --> 00:11:20.620
Hey, let's talk about another cloud provider.


00:11:20.620 --> 00:11:22.140
Right.


00:11:22.140 --> 00:11:23.180
I'm right on the back of that.


00:11:23.180 --> 00:11:29.660
So one of the ways that you can run your code on the internet is like I just described with digital ocean.


00:11:29.660 --> 00:11:33.940
like I do for our stuff, is to create some virtual machines and various other pieces


00:11:33.940 --> 00:11:38.140
and sort of use it as so-called infrastructure as a service, right?


00:11:38.140 --> 00:11:39.140
IaaS.


00:11:39.140 --> 00:11:42.400
But you might also use platform as a service, like here's my code, run it.


00:11:42.400 --> 00:11:45.980
So Google App Engine, Heroku, those types of things.


00:11:45.980 --> 00:11:51.820
So Google App Engine has a pretty interesting announcement, and it's interesting for both


00:11:51.820 --> 00:11:55.380
it's good now and like, oh my gosh, I can't believe it was like that.


00:11:55.380 --> 00:12:00.440
So the announcement is that Google App Engine has released their second generation runtimes


00:12:00.440 --> 00:12:03.900
which the Python one is now based on Python 3.7.


00:12:03.900 --> 00:12:04.900
That's pretty awesome, right?


00:12:04.900 --> 00:12:05.900
It is.


00:12:05.900 --> 00:12:06.900
You want to run some code.


00:12:06.900 --> 00:12:07.900
Boom.


00:12:07.900 --> 00:12:08.900
Here's my Python 3.7.


00:12:08.900 --> 00:12:09.900
So that's really good.


00:12:09.900 --> 00:12:11.820
You might think, "Oh, Michael, what was the previous one?


00:12:11.820 --> 00:12:12.820
3.6?


00:12:12.820 --> 00:12:13.820
3.5?"


00:12:13.820 --> 00:12:15.820
No, I believe the previous one was 2.7.


00:12:15.820 --> 00:12:16.820
Oh, no.


00:12:16.820 --> 00:12:17.820
Until now.


00:12:17.820 --> 00:12:23.100
Like if you were using Google App Engine, I believe you had to use a legacy Python, period.


00:12:23.100 --> 00:12:28.500
Yeah, that was like mid 2018 that I just said that that wasn't like a statement around 2012


00:12:28.500 --> 00:12:31.540
or something that was just now.


00:12:31.540 --> 00:12:33.780
But let bygones be bygones.


00:12:33.780 --> 00:12:36.580
And now it's Python 3.7, which is pretty awesome.


00:12:36.580 --> 00:12:41.580
So apparently, it's a pretty big upgrade, you get a bunch of new things like for example,


00:12:41.580 --> 00:12:47.780
it's based on their new sandbox container sort of Docker like things.


00:12:47.780 --> 00:12:52.420
It removes a bunch of restrictions, like, in addition to only running on the old Python,


00:12:52.420 --> 00:12:57.300
legacy Python, you could only use a white labeled set of packages.


00:12:57.300 --> 00:13:00.620
And now in the new Google App Engine, you can use arbitrary packages, just put them


00:13:00.620 --> 00:13:03.380
in a requirements file, which is pretty sweet.


00:13:03.380 --> 00:13:04.380
That's a big change.


00:13:04.380 --> 00:13:06.420
It is a big, pretty big change.


00:13:06.420 --> 00:13:09.380
So a lot of cool things like auto scaling and things that are a little bit easier as


00:13:09.380 --> 00:13:10.380
well.


00:13:10.380 --> 00:13:14.380
So anyway, if you're interested in Google App Engine's platform as a service for Python,


00:13:14.380 --> 00:13:16.900
it just got many, many times better.


00:13:16.900 --> 00:13:17.900
Yeah.


00:13:17.900 --> 00:13:18.900
Yeah.


00:13:18.900 --> 00:13:21.980
So Brian, I typically write my code in Python files,


00:13:21.980 --> 00:13:24.980
not really in notebooks per se.


00:13:24.980 --> 00:13:25.820
How about you?


00:13:25.820 --> 00:13:27.100
- Yeah, mostly in files,


00:13:27.100 --> 00:13:30.100
but I'm trying to learn Jupyter notebooks some


00:13:30.100 --> 00:13:31.460
and utilize them.


00:13:31.460 --> 00:13:35.980
They're kind of fun, especially in data science realms


00:13:35.980 --> 00:13:38.100
or looking at plotting data and stuff,


00:13:38.100 --> 00:13:39.660
notebooks are fun.


00:13:39.660 --> 00:13:43.820
But there was a person named Joel Gruse


00:13:43.820 --> 00:13:46.940
that says he does not like notebooks.


00:13:46.940 --> 00:13:47.820
- And Joel is notable


00:13:47.820 --> 00:13:50.140
'cause he's not like a random dude on the internet.


00:13:50.140 --> 00:13:52.820
But Joel Grus has written a book


00:13:52.820 --> 00:13:54.580
called Data Science from Scratch.


00:13:54.580 --> 00:13:56.580
He's done a lot of work in data science,


00:13:56.580 --> 00:13:57.420
things like that.


00:13:57.420 --> 00:13:59.980
I've even had him on Talk Python many moons ago.


00:13:59.980 --> 00:14:04.140
- Yeah, and this wasn't just like a one-off comment.


00:14:04.140 --> 00:14:07.820
He gave this talk at JupyterCon,


00:14:07.820 --> 00:14:10.220
and that's kind of hilarious.


00:14:10.220 --> 00:14:12.620
But the video for that is not available yet


00:14:12.620 --> 00:14:14.800
as far as I couldn't find it.


00:14:14.800 --> 00:14:17.140
So because that was just recently or still going on,


00:14:17.140 --> 00:14:20.820
I'm not sure but the the slides are up. He put the slides up and


00:14:20.820 --> 00:14:23.520
For one puts me to shame of it


00:14:23.520 --> 00:14:30.180
You know this presentation is got so many animations and pictures and stuff plus it's like I haven't even got through it yet


00:14:30.180 --> 00:14:33.760
It's like a hundred pages long or more, but it's really good


00:14:33.760 --> 00:14:38.860
but but it's a serious a serious discussion about some of the issues with


00:14:38.860 --> 00:14:44.580
with the problems with notebooks that people new to notebooks don't quite get and


00:14:45.080 --> 00:14:49.800
People old to notebooks just sort of know it and don't really think about it anymore. And one of the big ones is


00:14:49.800 --> 00:14:56.120
that the there's hidden state and so like all and essentially we think of files as


00:14:56.120 --> 00:15:01.520
Like you said we normally work in files. So they they get run from top to bottom


00:15:01.520 --> 00:15:03.960
Except for you know functions don't get run


00:15:03.960 --> 00:15:09.200
they get interpreted as functions and then when they are run that run top to bottom essentially and


00:15:09.760 --> 00:15:16.040
Notebooks are not like that. You can jump around and execute different bits of code in different orders if you feel like it and


00:15:16.040 --> 00:15:21.060
That stateness can lead to weird confusing things


00:15:21.060 --> 00:15:27.680
So it's just like a gotcha to know about and then he goes on to talk about some of the issues where if you


00:15:27.680 --> 00:15:30.500
Start learning how to code with notebooks


00:15:30.500 --> 00:15:38.720
You may end up, you know developing some bad habits like importing notebooks instead of just trying to I mean like that's a thing


00:15:38.720 --> 00:15:42.720
apparently you can do is you can define some functions in a notebook and then import them


00:15:42.720 --> 00:15:43.720
into another notebook.


00:15:43.720 --> 00:15:48.640
Well, I mean, wouldn't it be better to just put them in a different library, in a package


00:15:48.640 --> 00:15:49.640
or a library?


00:15:49.640 --> 00:15:51.640
>> Use the package, use the library, exactly.


00:15:51.640 --> 00:15:52.640
>> Yeah.


00:15:52.640 --> 00:15:57.720
So some of those, and I'm highlighting this not because I think notebooks are evil, but


00:15:57.720 --> 00:16:04.240
because I think it's important to listen to people saying, listen to a voice that says


00:16:04.240 --> 00:16:05.800
they aren't a silver bullet.


00:16:05.800 --> 00:16:08.560
they have their issues also.


00:16:08.560 --> 00:16:10.200
And we just need to be careful and talk,


00:16:10.200 --> 00:16:12.200
and make sure you don't fall into those traps.


00:16:12.200 --> 00:16:13.360
- Yeah, these are really interesting,


00:16:13.360 --> 00:16:16.120
and these are certainly issues to look out for.


00:16:16.120 --> 00:16:17.920
And wow, this is a funny presentation.


00:16:17.920 --> 00:16:19.660
I cannot wait to watch this video.


00:16:19.660 --> 00:16:21.560
Joel, if you're listening, please let us know when it's out,


00:16:21.560 --> 00:16:22.840
or if someone else sees it come out,


00:16:22.840 --> 00:16:25.520
shoot us a note, either email or Twitter,


00:16:25.520 --> 00:16:26.760
'cause this is fantastic.


00:16:26.760 --> 00:16:29.360
- Yeah, plus, also, I can't even imagine


00:16:29.360 --> 00:16:32.400
how long it took to put together this presentation,


00:16:32.400 --> 00:16:35.280
because it's, yeah, there's a lot of animations in there,


00:16:35.280 --> 00:16:36.820
it's quite a riot.


00:16:36.820 --> 00:16:37.660
- It is quite a riot.


00:16:37.660 --> 00:16:38.900
- Yeah, anyway, there's that.


00:16:38.900 --> 00:16:42.320
Just the other side of maybe notebooks aren't awesome.


00:16:42.320 --> 00:16:45.520
- Yeah, it's pretty interesting.


00:16:45.520 --> 00:16:48.460
So we've had a couple of conversations


00:16:48.460 --> 00:16:51.000
around the various PEPs and stuff


00:16:51.000 --> 00:16:56.000
that have been maybe causing some kerfuffle in the community.


00:16:56.000 --> 00:17:00.520
Obviously the biggest one was PEP 572


00:17:00.520 --> 00:17:02.960
about the in-place assignments,


00:17:02.960 --> 00:17:05.600
and that was the thing with all the stress around it


00:17:05.600 --> 00:17:08.280
that Guido said, "Hey, after this, this is my last one.


00:17:08.280 --> 00:17:09.840
"I've given my all, I'm out of here.


00:17:09.840 --> 00:17:11.880
"You guys, it's up to you."


00:17:11.880 --> 00:17:13.920
We actually had Brett Cannon and Carol Willing


00:17:13.920 --> 00:17:16.680
on episode 87 to talk all about that, right?


00:17:16.680 --> 00:17:19.680
And one of the things that we talked about


00:17:19.680 --> 00:17:22.560
was what comes next, right?


00:17:22.560 --> 00:17:26.060
If it's not down to Guido to make the final decisions,


00:17:26.060 --> 00:17:27.680
which is how it has worked,


00:17:27.680 --> 00:17:32.040
how will the Python community decide what it's up to?


00:17:32.040 --> 00:17:39.160
So yeah, so Barry Warsaw has published five peps at least around this.


00:17:39.160 --> 00:17:41.160
And I don't think this is a decision.


00:17:41.160 --> 00:17:46.680
It's sort of a structure to further the conversation and make a decision.


00:17:46.680 --> 00:17:52.280
So he just published not too long ago, PEP 8000, which is Python language, government


00:17:52.280 --> 00:17:53.280
proposal overview.


00:17:53.280 --> 00:17:55.880
And I don't know if this is common in peps.


00:17:55.880 --> 00:17:57.120
I haven't seen it that much.


00:17:57.120 --> 00:18:01.340
But it's like a gathering of other peps that are specific details.


00:18:01.340 --> 00:18:06.200
So there's PEP 8001, 8002, 810, and 811.


00:18:06.200 --> 00:18:11.680
The first two are about voting and ways in which this government might work.


00:18:11.680 --> 00:18:16.980
And then the higher ones, the 810s, are actual proposed models.


00:18:16.980 --> 00:18:20.500
And there's a third one, an 812, that I forgot to put in the notes.


00:18:20.500 --> 00:18:27.580
And so there's for the government styles, government styles, we have the BDFL governance


00:18:27.580 --> 00:18:31.880
is one of the proposed options, which is to elect a new person


00:18:31.880 --> 00:18:34.720
who is the final decider.


00:18:34.720 --> 00:18:36.760
Basically, get your step down, who


00:18:36.760 --> 00:18:41.320
is going to take that place to now participate in that way?


00:18:41.320 --> 00:18:43.120
We also have the council governance model,


00:18:43.120 --> 00:18:44.860
which we talked about interesting things,


00:18:44.860 --> 00:18:46.820
should there be an even or odd number of people


00:18:46.820 --> 00:18:47.760
on the council?


00:18:47.760 --> 00:18:49.680
And then the last one, I think--


00:18:49.680 --> 00:18:53.320
let me pull it up real quick-- I think it is community--


00:18:53.320 --> 00:18:55.480
yeah, the community governance model.


00:18:55.480 --> 00:18:57.680
and that one's a little more freeform.


00:18:57.680 --> 00:19:01.600
So these are all different ways of possibly arranging


00:19:01.600 --> 00:19:02.640
and solving that problem.


00:19:02.640 --> 00:19:04.240
And there's a lot of examples like,


00:19:04.240 --> 00:19:05.440
let's see how Rust did it.


00:19:05.440 --> 00:19:08.940
Let's see how OpenStack manages their organization


00:19:08.940 --> 00:19:09.800
and so on.


00:19:09.800 --> 00:19:12.200
So there's a lot of concrete stuff there.


00:19:12.200 --> 00:19:14.200
So anyway, that's pretty cool.


00:19:14.200 --> 00:19:16.360
If you have a strong thought on this


00:19:16.360 --> 00:19:19.880
and you wanna participate, get in there, make comments,


00:19:19.880 --> 00:19:22.120
let people know what you're thinking


00:19:22.120 --> 00:19:23.280
because it's still open.


00:19:23.280 --> 00:19:25.280
It's not anything decided, right?


00:19:25.280 --> 00:19:26.640
it's still up in the air.


00:19:26.640 --> 00:19:27.920
So if you wanna have a say,


00:19:27.920 --> 00:19:30.080
now is the time to make statements.


00:19:30.080 --> 00:19:34.600
- Wow, it's like government working in our own community.


00:19:34.600 --> 00:19:35.680
- What?


00:19:35.680 --> 00:19:37.600
Incredible, incredible.


00:19:37.600 --> 00:19:38.840
- Okay.


00:19:38.840 --> 00:19:39.740
- Yeah, so this is pretty cool.


00:19:39.740 --> 00:19:41.300
I don't know where it's gonna go,


00:19:41.300 --> 00:19:44.160
but I like that it's all laid out like this.


00:19:44.160 --> 00:19:47.400
My guess is it's gonna go down the council model,


00:19:47.400 --> 00:19:49.560
maybe with, I don't know,


00:19:49.560 --> 00:19:50.760
I think it's gonna go down the council model,


00:19:50.760 --> 00:19:51.600
but we'll see.


00:19:51.600 --> 00:19:52.560
- Yeah.


00:19:52.560 --> 00:19:54.920
- I think that whatever they do, they need,


00:19:54.920 --> 00:19:56.320
they should, if there's a council,


00:19:56.320 --> 00:19:59.960
they should have to meet together to make decisions


00:19:59.960 --> 00:20:04.960
and pass around a talking stick or something.


00:20:04.960 --> 00:20:05.800
- Yes.


00:20:05.800 --> 00:20:07.680
(laughing)


00:20:07.680 --> 00:20:08.680
I love it.


00:20:08.680 --> 00:20:10.680
- Oh, we could come up with something weird


00:20:10.680 --> 00:20:12.040
that they have to follow.


00:20:12.040 --> 00:20:14.040
- How about the Python Staff of Power


00:20:14.040 --> 00:20:15.200
that you were carrying around?


00:20:15.200 --> 00:20:19.200
- Yeah, but then, should it be the blue and yellow one


00:20:19.200 --> 00:20:21.720
or should it be the green and yellow one?


00:20:21.720 --> 00:20:23.720
That is a big question.


00:20:23.720 --> 00:20:25.720
Yeah, I don't know.


00:20:25.720 --> 00:20:27.720
So, sorry, green and gold.


00:20:27.720 --> 00:20:30.720
People in Australia say it's gold, not yellow.


00:20:30.720 --> 00:20:31.720
But it looks yellow to me.


00:20:31.720 --> 00:20:33.720
Yeah, I definitely thought that stick was a big hit.


00:20:33.720 --> 00:20:35.720
I don't know if people don't know what you're talking about.


00:20:35.720 --> 00:20:37.720
What should they Google to find this stick?


00:20:37.720 --> 00:20:39.720
I think it's Pythonic Staff of Enlightenment.


00:20:39.720 --> 00:20:40.720
I don't know.


00:20:40.720 --> 00:20:42.720
That's got to do it.


00:20:42.720 --> 00:20:44.720
How many hits on Google can there be for that?


00:20:44.720 --> 00:20:45.720
I don't know.


00:20:45.720 --> 00:20:46.720
Awesome.


00:20:46.720 --> 00:20:48.720
So, yeah, they should have to pass that thing around.


00:20:48.720 --> 00:20:50.720
All right, well, that's it for our items this week.


00:20:50.720 --> 00:20:51.560
this week.


00:20:51.560 --> 00:20:53.280
You got anything extra you wanna share with folks?


00:20:53.280 --> 00:20:54.920
- I don't, actually.


00:20:54.920 --> 00:20:58.960
Just trudging along, we got a couple more testing codes out.


00:20:58.960 --> 00:20:59.920
- Yeah, very nice.


00:20:59.920 --> 00:21:00.760
- How about you?


00:21:00.760 --> 00:21:02.620
- I've got, of course, some Talkpilot stuff queued up


00:21:02.620 --> 00:21:04.280
to be released shortly.


00:21:04.280 --> 00:21:06.820
I have been recording some courses,


00:21:06.820 --> 00:21:07.720
which are gonna be awesome,


00:21:07.720 --> 00:21:09.200
and I'm very excited about them,


00:21:09.200 --> 00:21:10.540
doing a bunch of stuff in parallel.


00:21:10.540 --> 00:21:13.380
So I'll let you know when that's sort of further along.


00:21:13.380 --> 00:21:15.880
But I do have two things I wanna talk about this week


00:21:15.880 --> 00:21:17.120
really quickly.


00:21:17.120 --> 00:21:20.020
One is we got a message on Twitter,


00:21:20.020 --> 00:21:23.620
I don't have the name of who sent us this was John actually


00:21:23.620 --> 00:21:26.560
Thanks, John who sent us this heads up that?


00:21:26.560 --> 00:21:33.260
Brian Granger one of the guys behind I Python and Jupyter and all that stuff from the very early days is


00:21:33.260 --> 00:21:36.860
Giving a free webcast and it's a ACM


00:21:36.860 --> 00:21:43.340
Sponsored thing says project Jupyter from computational notebooks to large-scale data science with sensitive data


00:21:43.340 --> 00:21:48.260
So that sounds interesting to you. I put the link in there. It's this Friday this episode


00:21:48.580 --> 00:21:53.060
Probably will come out on Thursday. So you got to take action right away. If you're listening,


00:21:53.060 --> 00:21:56.020
there's probably a recording or something afterwards, you can check that out. The other


00:21:56.020 --> 00:22:00.580
thing is, you know, we talk sometimes about the popularity of Python. Yeah, so I don't want to


00:22:00.580 --> 00:22:05.460
beat this one to death too much. It's not really worth its own item. But Python continues to climb


00:22:05.460 --> 00:22:11.780
yet another ranking. So the T o B index is one of the more well respected, more long running


00:22:11.780 --> 00:22:17.780
ways of ranking programming languages. And I think when we started this podcast, Python was either


00:22:17.780 --> 00:22:21.140
Fifth or sixth, I think it was sixth on this list.


00:22:21.140 --> 00:22:22.940
It is now third.


00:22:22.940 --> 00:22:24.380
- Probably because of the podcast.


00:22:24.380 --> 00:22:26.220
- Certainly, partly because of it.


00:22:26.220 --> 00:22:27.420
- Yeah.


00:22:27.420 --> 00:22:29.660
- But that may be a very small part of it,


00:22:29.660 --> 00:22:30.900
or maybe it's meaningful.


00:22:30.900 --> 00:22:35.900
But what's really interesting is it's now above C++, C#,


00:22:35.900 --> 00:22:37.860
JavaScript is way above JavaScript,


00:22:37.860 --> 00:22:40.140
and JavaScript's going down.


00:22:40.140 --> 00:22:43.560
It's above Ruby, it's above many, many things.


00:22:43.560 --> 00:22:47.800
What it's not above is it is not above Java or C.


00:22:47.800 --> 00:22:51.860
And not only is it not above them, but it's like half.


00:22:51.860 --> 00:22:55.400
So it's like 7.6% to C is 15.4%.


00:22:55.400 --> 00:22:57.680
It's gonna be a long time, if ever,


00:22:57.680 --> 00:23:00.320
till it gets to a two or a one.


00:23:00.320 --> 00:23:02.920
But it's definitely doing quite well.


00:23:02.920 --> 00:23:06.520
- Yeah, so yeah, what is the Tyobi index?


00:23:06.520 --> 00:23:10.160
- If you look into it, they talk about their philosophy


00:23:10.160 --> 00:23:12.880
and where they measure stuff from and so on.


00:23:12.880 --> 00:23:15.640
It's been a long time since I read it, so I don't remember the details, but they do


00:23:15.640 --> 00:23:17.720
lay out where the ranking comes from.


00:23:17.720 --> 00:23:18.720
Okay, cool.


00:23:18.720 --> 00:23:19.720
Yeah.


00:23:19.720 --> 00:23:20.720
All right.


00:23:20.720 --> 00:23:21.720
Well, that's it for this week.


00:23:21.720 --> 00:23:22.720
Thanks for chatting with me, Brian.


00:23:22.720 --> 00:23:23.720
Thank you.


00:23:23.720 --> 00:23:24.720
Bye.


00:23:24.720 --> 00:23:25.720
Bye.


00:23:25.720 --> 00:23:26.720
Thank you for listening to Python Bytes.


00:23:26.720 --> 00:23:27.720
Follow the show on Twitter via @pythonbytes.


00:23:27.720 --> 00:23:31.160
That's Python Bytes as in B-Y-T-E-S.


00:23:31.160 --> 00:23:34.460
And get the full show notes at pythonbytes.fm.


00:23:34.460 --> 00:23:38.160
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:23:38.160 --> 00:23:39.160
way.


00:23:39.160 --> 00:23:41.680
We're always on the lookout for sharing something cool.


00:23:41.680 --> 00:23:45.140
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:23:45.140 --> 00:23:48.180
Thank you for listening and sharing this podcast with your friends and colleagues.

