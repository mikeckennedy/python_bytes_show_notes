
00:00:00.000 --> 00:00:06.680
Hello and welcome to Python bites where we deliver Python news and headlines directly to your earbuds. This is episode 73


00:00:06.680 --> 00:00:08.960
recorded April 4th


00:00:08.960 --> 00:00:13.460
2018 I'm Michael Kennedy number and this episode is brought to you by data dog


00:00:13.460 --> 00:00:20.600
Check them out at Python bytes FM slash data dog. Tell you more about them later right now. I want to relive my math


00:00:20.600 --> 00:00:23.600
education Brian and my


00:00:23.600 --> 00:00:27.920
Set theory and all these sorts of fun number theory things, right?


00:00:27.920 --> 00:00:35.260
So there's a there's an article called I think I truncated it set theory and Python tips and tricks


00:00:35.260 --> 00:00:38.340
Actually, that's one of the classes. I loved I loved


00:00:38.340 --> 00:00:43.380
The discrete math class I had in college that was early in my computer science days


00:00:43.380 --> 00:00:49.480
To talk and learn about set theory and then you use it a lot you to it's a useful tool


00:00:49.480 --> 00:00:55.520
But there's a lot of people that come to Python that haven't taken that or really not sure what set theory is


00:00:55.520 --> 00:01:02.560
it's really not that complicated. And this is a good introduction article on really what set theory is, or some of the set theory


00:01:02.560 --> 00:01:10.200
concepts, and then how to do that in Python, including things like checking to see if something's in a set and unions and


00:01:10.200 --> 00:01:14.440
intersections and differences and things. And it's just a lot of fun.


00:01:14.440 --> 00:01:19.600
Yeah, I think this is awesome. And this is one of those things where the right data structure can just make all the


00:01:19.600 --> 00:01:24.160
difference in terms of performance and simple code, right? Like if you try to model this with


00:01:24.160 --> 00:01:30.400
lists, which you totally could do, then you're writing basically implementing is this set


00:01:30.400 --> 00:01:35.280
contained within that set? What is the intersection, the actual performance of checking if something's


00:01:35.280 --> 00:01:40.240
in there, making sure you don't get duplicates, all that stuff, it just falls apart. But if you


00:01:40.240 --> 00:01:45.920
use sets, well, then it flies, right? And anytime you need something distinct, right, I want a


00:01:45.920 --> 00:01:51.480
a distinct number of IDs or usernames or emails or whatever, and where there might be duplication,


00:01:51.480 --> 00:01:52.480
set.


00:01:52.480 --> 00:01:53.480
It's all about the set.


00:01:53.480 --> 00:01:57.720
- Right, and yeah, that's the thing to take away from, if you're not familiar with sets,


00:01:57.720 --> 00:02:03.480
sets are a container that only have unique elements in it.


00:02:03.480 --> 00:02:07.240
So if you add, like if you're adding words, you're going through an article and you add


00:02:07.240 --> 00:02:12.600
words to a set, if the word "the" is already in there, it's only gonna be added once.


00:02:12.600 --> 00:02:13.600
- Right.


00:02:13.600 --> 00:02:15.840
- If you had a list that contained like every word


00:02:15.840 --> 00:02:18.200
in order of a play or something,


00:02:18.200 --> 00:02:19.040
you threw it into a set,


00:02:19.040 --> 00:02:21.480
that would just give you all the words used distinctly.


00:02:21.480 --> 00:02:22.320
Yeah.


00:02:22.320 --> 00:02:24.120
- It's simple data structure built into Python


00:02:24.120 --> 00:02:26.640
and it's a good thing to know how to use.


00:02:26.640 --> 00:02:27.480
- Yeah, I love it.


00:02:27.480 --> 00:02:29.240
And it's super, super fast for containment,


00:02:29.240 --> 00:02:30.720
a little bit like dictionaries in that sense.


00:02:30.720 --> 00:02:32.800
So, nice one, I'm glad you found that.


00:02:32.800 --> 00:02:35.720
- The syntax for how to do math,


00:02:35.720 --> 00:02:38.480
set theory math is not obvious.


00:02:38.480 --> 00:02:41.240
It's not complicated, but it's something


00:02:41.240 --> 00:02:43.200
that's good to review so that you know


00:02:43.200 --> 00:02:46.920
what those are. Yeah, very, very nice. So the next thing that I want to talk about,


00:02:46.920 --> 00:02:51.640
in fact, you're going to notice a little bit of a trend this week, Brian. I'm on


00:02:51.640 --> 00:02:57.320
some kind of like rant on async programming this week. So all three of my


00:02:57.320 --> 00:03:01.320
items have to do with async programming in one way or another. Generally each one


00:03:01.320 --> 00:03:05.600
of them in like improving what already exists. Oh great. Yeah, so the first one is


00:03:05.600 --> 00:03:11.960
called Trio, T-R-I-O, and it says async programming for humans and snake people.


00:03:11.960 --> 00:03:12.800
(laughing)


00:03:12.800 --> 00:03:14.060
So it's interesting, right?


00:03:14.060 --> 00:03:17.560
Like in Python 3 and 3.4 we got async.io,


00:03:17.560 --> 00:03:19.220
in 3.5 we got async and await,


00:03:19.220 --> 00:03:23.740
the keywords that build upon the async.io foundation,


00:03:23.740 --> 00:03:25.840
which is really coroutines and functions


00:03:25.840 --> 00:03:27.280
and stuff like that.


00:03:27.280 --> 00:03:30.460
And so this guy who created this is like,


00:03:30.460 --> 00:03:31.620
this thing already exists,


00:03:31.620 --> 00:03:33.320
but the API for it's really crummy.


00:03:33.320 --> 00:03:35.140
And you'll hear this as like a theme over and over


00:03:35.140 --> 00:03:36.700
with slightly different takes.


00:03:36.700 --> 00:03:38.700
But so like, why does this exist, right?


00:03:38.700 --> 00:03:40.900
So it says basically the trio of projects goals


00:03:40.900 --> 00:03:47.260
produce production quality, async and await native IO libraries for Python.


00:03:47.260 --> 00:03:54.900
And like all the other stuff, it allows you to do sort of IO block stuff in parallel in really nice, nice ways.


00:03:54.900 --> 00:03:59.900
But the API on how you do that is quite a bit nicer.


00:03:59.900 --> 00:04:05.900
And it supports advanced concepts like canceling a task that started while you're still waiting for it.


00:04:05.900 --> 00:04:17.300
right? Things like that. Like if you're doing a web service call in a database transaction and the database fails, you want to roll back or cancel the web call or vice versa, something like that.


00:04:17.300 --> 00:04:28.740
So it really tries to distinguish itself by being like really focused on this usability thing. And it's built like entirely from the ground up. And what's really interesting is they have this like these are our sources for inspiration.


00:04:29.340 --> 00:04:32.580
a link like a GitHub issue.


00:04:32.580 --> 00:04:33.900
Maybe it's in the wiki, I can't remember.


00:04:33.900 --> 00:04:36.540
But a big long part where they talk about all the places.


00:04:36.540 --> 00:04:39.100
There's a lot of Erlang, there's C#,


00:04:39.100 --> 00:04:41.900
there's Go that makes a big appearance there.


00:04:41.900 --> 00:04:44.780
But in particular it's based on David Beasley's Curio,


00:04:44.780 --> 00:04:46.960
which is kind of a similar project as well.


00:04:46.960 --> 00:04:47.800
Interesting, right?


00:04:47.800 --> 00:04:50.220
- Yeah, and I like the, like the API's actually pretty nice.


00:04:50.220 --> 00:04:52.220
Things like start soon.


00:04:52.220 --> 00:04:53.040
- Yeah, exactly.


00:04:53.040 --> 00:04:54.800
I love the things you can do.


00:04:54.800 --> 00:04:58.420
So like async I/O stuff is really fairly complicated.


00:04:58.420 --> 00:05:00.720
It's like three, four lines of code.


00:05:00.720 --> 00:05:02.760
You always have to do just a transition


00:05:02.760 --> 00:05:06.040
from synchronous mode into the asynchronous world.


00:05:06.040 --> 00:05:07.680
You've always got to create this async loop


00:05:07.680 --> 00:05:10.460
and then begin running an async method to do it.


00:05:10.460 --> 00:05:13.040
But here you just say trio.run and you give it a function.


00:05:13.040 --> 00:05:14.260
Boom, done.


00:05:14.260 --> 00:05:16.820
If you want to like pause but not block


00:05:16.820 --> 00:05:17.760
the rest of the program,


00:05:17.760 --> 00:05:19.600
you can instead of saying time.sleep,


00:05:19.600 --> 00:05:21.460
which will totally block that thread,


00:05:21.460 --> 00:05:23.600
you can say trio.sleep.


00:05:23.600 --> 00:05:25.720
And that will basically release the main thread


00:05:25.720 --> 00:05:28.220
to go do more work as if you're doing IO.


00:05:28.220 --> 00:05:29.620
- Nice. - That's nice.


00:05:29.620 --> 00:05:31.660
But like you said, the main part is,


00:05:31.660 --> 00:05:34.820
you can say, create an async with block,


00:05:34.820 --> 00:05:36.660
which already is like mind bending,


00:05:36.660 --> 00:05:38.500
and create this thing called a nursery.


00:05:38.500 --> 00:05:39.860
And then you go to the nursery and say,


00:05:39.860 --> 00:05:42.060
start this task soon, start that task soon.


00:05:42.060 --> 00:05:44.380
And then the with block will wait


00:05:44.380 --> 00:05:46.740
and block at the very end until all of the things


00:05:46.740 --> 00:05:48.220
you started within it are done.


00:05:48.220 --> 00:05:51.300
- Yeah, and the nursery thing confused me at first


00:05:51.300 --> 00:05:54.380
until I remembered that we're doing child tasks.


00:05:54.380 --> 00:05:58.160
So you get your child's children


00:05:58.160 --> 00:05:59.520
from a nursery, nice.


00:05:59.520 --> 00:06:00.680
- That's right, you put them in the nursery,


00:06:00.680 --> 00:06:02.280
they can grow up, and when they're done,


00:06:02.280 --> 00:06:05.320
then you're out of, but this like adaptation


00:06:05.320 --> 00:06:07.440
of the async with block is really, really interesting,


00:06:07.440 --> 00:06:09.720
which I believe requires Python 3.6.


00:06:09.720 --> 00:06:13.080
So they have a bunch of tools for like inspecting


00:06:13.080 --> 00:06:16.640
and debugging your programs, and like the async flow,


00:06:16.640 --> 00:06:17.480
how all this stuff is working,


00:06:17.480 --> 00:06:19.600
which is I think a really nice addition.


00:06:19.600 --> 00:06:21.560
One of the problems that you run into with this


00:06:21.560 --> 00:06:25.280
is if you've got like say an async Postgres


00:06:25.280 --> 00:06:27.840
data access layer, it's probably built on asyncio,


00:06:27.840 --> 00:06:29.300
not on Trio.


00:06:29.300 --> 00:06:32.120
So you can't, even though they are effectively the same,


00:06:32.120 --> 00:06:34.300
they're not compatible, right?


00:06:34.300 --> 00:06:37.700
So there's this other project called Trio AsyncIO


00:06:37.700 --> 00:06:40.280
that puts a layer, a compatibility layer,


00:06:40.280 --> 00:06:42.840
so anything that supports AsyncIO can run on Trio.


00:06:42.840 --> 00:06:43.680
- Oh, cool.


00:06:43.680 --> 00:06:45.360
- Yeah, so this is a really cool project.


00:06:45.360 --> 00:06:46.560
I'm super impressed with this.


00:06:46.560 --> 00:06:47.520
- I'd love to check that out too,


00:06:47.520 --> 00:06:49.880
but just a slight correction,


00:06:49.880 --> 00:06:53.280
it says a three, five and above and also pi, pi.


00:06:53.280 --> 00:06:57.200
- Yes, that's true, but I think the async with block,


00:06:57.200 --> 00:07:01.520
I'm not sure that structure itself is supported in Python 3.5.


00:07:01.520 --> 00:07:02.760
I don't think so.


00:07:02.760 --> 00:07:06.040
I know more things became async in 3.6,


00:07:06.040 --> 00:07:10.480
like async generator expressions and list comprehensions came in 3.6.


00:07:10.480 --> 00:07:14.400
So there's like, it might be a slightly different context there.


00:07:14.400 --> 00:07:19.240
>> And whatever, f strings came in 3.6, so nothing exists to me before 3.6.


00:07:19.240 --> 00:07:20.440
>> 3.5, you're dead to me.


00:07:20.440 --> 00:07:21.840
[LAUGH]


00:07:21.840 --> 00:07:22.600
>> Awesome.


00:07:22.600 --> 00:07:25.660
So I've been hearing a lot on the social medias


00:07:25.660 --> 00:07:27.460
about this thing called Black.


00:07:27.460 --> 00:07:29.260
- Yeah, so I thought we'd better cover it


00:07:29.260 --> 00:07:31.860
even though it's been around for a little while,


00:07:31.860 --> 00:07:34.900
not like a long time, but you're right,


00:07:34.900 --> 00:07:37.200
it has had a lot of social media attention.


00:07:37.200 --> 00:07:41.200
So Black is the uncompromising Python code formatter,


00:07:41.200 --> 00:07:45.020
but I thought it was just sort of an amusing take


00:07:45.020 --> 00:07:48.480
on something like, so we have linters and everything,


00:07:48.480 --> 00:07:51.280
but they just tell you what is wrong


00:07:51.280 --> 00:07:54.320
or what doesn't comply with PEP 8 standards


00:07:54.320 --> 00:07:55.560
or other standards.


00:07:55.560 --> 00:07:58.120
And this one just goes and changes your code for you


00:07:58.120 --> 00:07:59.440
and doesn't tell you anything.


00:07:59.440 --> 00:08:01.080
Well, I'm not sure if it tells you or not.


00:08:01.080 --> 00:08:02.960
- Is it like a black box?


00:08:02.960 --> 00:08:04.920
- I'm not sure why the name black,


00:08:04.920 --> 00:08:07.440
but it is amusing that you can also,


00:08:07.440 --> 00:08:09.420
now that after you run it on your code,


00:08:09.420 --> 00:08:11.520
your code is blackened code,


00:08:11.520 --> 00:08:13.360
which actually makes me just hungry


00:08:13.360 --> 00:08:15.400
because I really like blackened salmon.


00:08:15.400 --> 00:08:17.240
- Yeah, a good little sauce on it, yeah.


00:08:17.240 --> 00:08:19.120
- It is an interesting take to say,


00:08:19.120 --> 00:08:22.300
If you're gonna say our code needs to follow


00:08:22.300 --> 00:08:25.500
certain standards, if this one works for you,


00:08:25.500 --> 00:08:26.980
just put that in your tool chain


00:08:26.980 --> 00:08:28.940
and it'll just automatically format everything


00:08:28.940 --> 00:08:30.980
and you don't need to argue about it anymore.


00:08:30.980 --> 00:08:34.620
- Make it part of like a GitHub, a Git check-in hook


00:08:34.620 --> 00:08:37.460
or part of your automated build that just formats it


00:08:37.460 --> 00:08:38.580
and checks it back in.


00:08:38.580 --> 00:08:41.980
- The GitHub repo has some amusing stuff in it also.


00:08:41.980 --> 00:08:44.580
So poke around in there because like for instance


00:08:44.580 --> 00:08:47.020
in the tests, there's a comments file


00:08:47.020 --> 00:08:48.620
and it has examples of comments


00:08:48.620 --> 00:08:50.020
that should be removed.


00:08:50.020 --> 00:08:54.460
And it's sort of funny stuff like some comment


00:08:54.460 --> 00:08:56.100
about why this function doesn't work


00:08:56.100 --> 00:08:58.440
and it's still in production anyway.


00:08:58.440 --> 00:09:00.180
Things like that that should just be removed.


00:09:00.180 --> 00:09:01.300
It's funny.


00:09:01.300 --> 00:09:02.140
It's a good read.


00:09:02.140 --> 00:09:03.580
- Yeah, I think this is pretty interesting.


00:09:03.580 --> 00:09:04.540
I haven't done anything with it,


00:09:04.540 --> 00:09:06.580
but it's definitely worth checking out,


00:09:06.580 --> 00:09:07.980
especially if you have a team of people


00:09:07.980 --> 00:09:09.700
and you want to try to make it


00:09:09.700 --> 00:09:11.780
continuously format stuff the same, right?


00:09:11.780 --> 00:09:13.660
- I don't really have an opinion on it


00:09:13.660 --> 00:09:15.180
other than it's interesting.


00:09:15.180 --> 00:09:16.180
- Sounds pretty good.


00:09:16.180 --> 00:09:17.120
All right, before we get to the next one,


00:09:17.120 --> 00:09:18.260
let me tell you about Datadog.


00:09:18.260 --> 00:09:21.620
So if you run any sort of distributed app,


00:09:21.620 --> 00:09:25.220
understanding how a request flows from one part


00:09:25.220 --> 00:09:28.100
through the whole thing, what the performance of those are,


00:09:28.100 --> 00:09:30.100
what the bottlenecks around those are,


00:09:30.100 --> 00:09:31.060
can be really tricky.


00:09:31.060 --> 00:09:33.660
So you can plug in Datadog, in just a few minutes,


00:09:33.660 --> 00:09:36.180
you'll be able to investigate those bottlenecks


00:09:36.180 --> 00:09:38.780
and explore dashboards that show you


00:09:38.780 --> 00:09:40.660
where you're spending your time in the app.


00:09:40.660 --> 00:09:43.740
And you get to visualize your Python performance,


00:09:43.740 --> 00:09:46.300
super easy and nice, get a free trial


00:09:46.300 --> 00:09:49.660
and a free Datadog t-shirt with a cute little dog on it.


00:09:49.660 --> 00:09:53.820
So just check them out at pythonbytes.fm/datadog.


00:09:53.820 --> 00:09:55.060
We gotta get our shirts, right Brian?


00:09:55.060 --> 00:09:56.100
- Yeah, definitely.


00:09:56.100 --> 00:09:56.940
- Definitely.


00:09:56.940 --> 00:09:57.860
I'm looking at PyCon.


00:09:57.860 --> 00:09:59.860
I'm gonna try to get a shirt from them at PyCon.


00:09:59.860 --> 00:10:01.220
- I'm gonna try to get one before that.


00:10:01.220 --> 00:10:02.220
- Nice.


00:10:02.220 --> 00:10:05.020
Back onto my rant on async stuff.


00:10:05.020 --> 00:10:07.820
So there's this thing called gain.


00:10:07.820 --> 00:10:12.820
And the point of gain is you can give it a base URL,


00:10:12.940 --> 00:10:17.940
a set of regular expressions of types of links in there


00:10:17.940 --> 00:10:23.020
to traverse and follow, and then just tell it to go,


00:10:23.020 --> 00:10:26.620
and it will basically spider an entire site.


00:10:26.620 --> 00:10:29.900
Think Google Web Spider, but yours.


00:10:29.900 --> 00:10:34.740
Yeah, and it's all based on AsyncIO, UVLoop, and AIOHCP,


00:10:34.740 --> 00:10:35.560
which is pretty cool.


00:10:35.560 --> 00:10:37.740
So all you gotta do is you define a class


00:10:37.740 --> 00:10:40.660
that has a CSS selectors and what you wanna do,


00:10:40.660 --> 00:10:43.880
like save the data to a file or a database or whatever.


00:10:43.880 --> 00:10:47.020
How many concurrent connections you want it to go spider on


00:10:47.020 --> 00:10:50.100
with its async aspect, where to start,


00:10:50.100 --> 00:10:53.100
the URL, things to match, like anything on the page


00:10:53.100 --> 00:10:55.500
or anything that's under the catalog section or whatever,


00:10:55.500 --> 00:10:56.740
and you say go.


00:10:56.740 --> 00:10:59.140
And then you wait a little bit and all sorts of stuff


00:10:59.140 --> 00:11:01.620
has been downloaded, processed, and saved.


00:11:01.620 --> 00:11:03.180
- Right, and it's very terse.


00:11:03.180 --> 00:11:04.820
I mean, you don't really have to put that much code


00:11:04.820 --> 00:11:06.060
in place to get this done.


00:11:06.060 --> 00:11:08.180
- No, it's like 10, 15 lines of code


00:11:08.180 --> 00:11:10.540
and you've completely analyzed


00:11:10.540 --> 00:11:12.820
somebody's entire website structure.


00:11:12.820 --> 00:11:13.660
Pretty cool.


00:11:13.660 --> 00:11:14.480
- Yeah.


00:11:14.480 --> 00:11:16.740
- And 'cause it's based on asyncio and AIO HTTP,


00:11:16.740 --> 00:11:18.100
it should totally fly.


00:11:18.100 --> 00:11:18.940
- Neat.


00:11:18.940 --> 00:11:19.760
- Yeah, very neat.


00:11:19.760 --> 00:11:20.600
So not a whole lot to do on that one,


00:11:20.600 --> 00:11:22.820
but if you're doing like screen scraping,


00:11:22.820 --> 00:11:26.180
web analysis of more than just one page,


00:11:26.180 --> 00:11:27.840
this is pretty cool 'cause you can sort of


00:11:27.840 --> 00:11:31.220
just set up patterns and say, go forth and do that.


00:11:31.220 --> 00:11:33.220
- I was thinking it'd be fun to do something like that,


00:11:33.220 --> 00:11:36.420
to hook up with a website you're running


00:11:36.420 --> 00:11:41.420
to just even attach it to a post project of checking


00:11:41.420 --> 00:11:43.860
to make sure the link using a request or something I grab.


00:11:43.860 --> 00:11:44.740
- Yeah, that's a good point.


00:11:44.740 --> 00:11:46.900
Like link validation to make sure every link


00:11:46.900 --> 00:11:49.300
on the page works correctly, things like that, right?


00:11:49.300 --> 00:11:51.660
- Yeah, and set up a notifier or something like that


00:11:51.660 --> 00:11:53.700
to let you know if something's broken.


00:11:53.700 --> 00:11:55.140
- All right, so what is this next one you got


00:11:55.140 --> 00:11:57.980
with these decorators, single dispatch?


00:11:57.980 --> 00:12:00.460
- Yeah, actually, so this is an article


00:12:00.460 --> 00:12:04.140
called Generic Functions in Python with Single Dispatch.


00:12:04.140 --> 00:12:06.480
And I didn't know this was a thing.


00:12:06.480 --> 00:12:09.360
Apparently in Python 3.4 it was added,


00:12:09.360 --> 00:12:12.660
this decorator, a single dispatch decorator.


00:12:12.660 --> 00:12:14.720
And we'll talk about it and read it,


00:12:14.720 --> 00:12:17.360
but you kind of need to see the code.


00:12:17.360 --> 00:12:20.440
You can decorate a function with single dispatch


00:12:20.440 --> 00:12:24.800
and that makes that function the default function.


00:12:24.800 --> 00:12:29.360
Then you can use a decorator to register other functions


00:12:29.360 --> 00:12:30.960
to be the non-default.


00:12:30.960 --> 00:12:32.280
>>Oh, this is interesting.


00:12:32.280 --> 00:12:35.040
- Yeah, so that you can have one function name


00:12:35.040 --> 00:12:38.720
that does, calls different functions based on the type


00:12:38.720 --> 00:12:41.520
of the first element in the parameter list.


00:12:41.520 --> 00:12:46.520
- So it's basically like declarative function


00:12:46.520 --> 00:12:48.960
overloading polymorphism based on the type,


00:12:48.960 --> 00:12:50.200
which we don't have in Python.


00:12:50.200 --> 00:12:52.440
- Right, which apparently we do have in Python,


00:12:52.440 --> 00:12:54.440
I just didn't know about it.


00:12:54.440 --> 00:12:56.760
- It just requires decorators, but it's built in.


00:12:56.760 --> 00:12:57.640
Built in decorators.


00:12:57.640 --> 00:12:58.480
- Yeah.


00:12:58.480 --> 00:12:59.300
- Yeah, this is wild.


00:12:59.300 --> 00:13:00.140
So you've got like one function


00:13:00.140 --> 00:13:01.480
and you say that single dispatch,


00:13:01.480 --> 00:13:07.480
And then you have other functions that just have docstrings, but you would basically wrap them with,


00:13:07.480 --> 00:13:11.980
this one takes a list setter tuple called this version, if it takes a dictionary called this other version.


00:13:11.980 --> 00:13:15.380
Yeah, this is interesting. It's a little non-obvious, but it's interesting.


00:13:15.380 --> 00:13:19.380
I took the example out of the article and trimmed it down.


00:13:19.380 --> 00:13:23.980
So those docstrings are just to make our code example and our notes small.


00:13:23.980 --> 00:13:28.880
But yeah, it has an example of like building your own fprintf function


00:13:28.880 --> 00:13:31.280
that can print differently.


00:13:31.280 --> 00:13:35.000
Like the default is just to print the string representation.


00:13:35.000 --> 00:13:38.760
But for instance, lists and sets and dictionaries


00:13:38.760 --> 00:13:42.280
can be printed differently and having elements on each line.


00:13:42.280 --> 00:13:43.760
I'm sure there's other reasons,


00:13:43.760 --> 00:13:45.720
but I know I've run across times


00:13:45.720 --> 00:13:50.000
where I wished Python had function overloading and it doesn't.


00:13:50.000 --> 00:13:51.800
- I've implemented function overloading


00:13:51.800 --> 00:13:55.040
with a if is instance of this type,


00:13:55.040 --> 00:13:58.120
else if instance of this type, you know,


00:13:58.120 --> 00:14:01.120
which is not really great but it's what you got.


00:14:01.120 --> 00:14:03.160
But apparently you've got this as well,


00:14:03.160 --> 00:14:04.080
which is pretty awesome.


00:14:04.080 --> 00:14:05.440
All right, you ready for another rant?


00:14:05.440 --> 00:14:07.240
Another thing on async?


00:14:07.240 --> 00:14:08.080
Final one.


00:14:08.080 --> 00:14:09.440
- We haven't talked about async for a while.


00:14:09.440 --> 00:14:10.440
- No, let's talk about that.


00:14:10.440 --> 00:14:14.320
So there's this thing by a guy named Alex Sherman


00:14:14.320 --> 00:14:19.080
and he wrote a library called unsync, async, unsync,


00:14:19.080 --> 00:14:22.560
called Unsynchronizing Async and Await in Python 3.6.


00:14:22.560 --> 00:14:26.840
So he says, "I'm a big fan of async and await,


00:14:26.840 --> 00:14:31.000
But there's two major problems with this.


00:14:31.000 --> 00:14:34.440
First of all, it's difficult to do fire and forget async stuff, right?


00:14:34.440 --> 00:14:37.880
You can't just go to an async function and call it and let it run.


00:14:37.880 --> 00:14:42.120
You have to do this weird sort of series of creating the async loop,


00:14:42.120 --> 00:14:43.800
blocking on the async loop.


00:14:43.800 --> 00:14:48.920
So you create a loop, and you ensure the future by giving it a function,


00:14:48.920 --> 00:14:49.960
a loop function to call.


00:14:49.960 --> 00:14:55.000
But it's really not obvious to just run a basic asynchronous thing


00:14:55.000 --> 00:14:56.360
from a synchronous task, okay?


00:14:56.360 --> 00:15:00.900
So if you look at the article right at the top, it links sort of that code there.


00:15:00.900 --> 00:15:02.600
You also can't block.


00:15:02.600 --> 00:15:05.160
You can't say, "Well, I've gotten this thing back from an async thing.


00:15:05.160 --> 00:15:07.960
I just want to stop here and just wait until its answer comes back."


00:15:07.960 --> 00:15:09.720
It'll throw an exception, right?


00:15:09.720 --> 00:15:11.360
So this is all kind of weird.


00:15:11.360 --> 00:15:13.980
This guy says, "Hey, what can we do about this?"


00:15:13.980 --> 00:15:16.080
So he kind of solves it in a sense.


00:15:16.080 --> 00:15:21.920
He says, "C# had this idea of asyncing away in these tasks that run almost identical to


00:15:21.920 --> 00:15:23.320
what Python has.


00:15:23.320 --> 00:15:28.440
The way they fixed it was by creating this ambient thread pool that will capture and


00:15:28.440 --> 00:15:29.440
run.


00:15:29.440 --> 00:15:32.280
Basically the async I/O loop is like this thing behind the scenes you never see and


00:15:32.280 --> 00:15:37.760
internally Python or C# would find it, just put it in the default one.


00:15:37.760 --> 00:15:41.520
And they said Python didn't take this approach and his hunch is the maintainers didn't want


00:15:41.520 --> 00:15:44.560
to add an ambient thread pool to their language, which makes sense.


00:15:44.560 --> 00:15:51.680
He says, "I, however, am not a Python maintainer and I did add an ambient thread to mine and


00:15:51.680 --> 00:15:53.280
And here's how it works.


00:15:53.280 --> 00:15:58.040
So you just take any async function and you put an @unsync decorator.


00:15:58.040 --> 00:16:00.320
We also have a big decorator theme going on here.


00:16:00.320 --> 00:16:03.200
Put an @unsync decorator on it and then you just call it.


00:16:03.200 --> 00:16:07.840
And it sounds real simple, like so what it does is it will basically wrap it up and do


00:16:07.840 --> 00:16:11.380
all that async I/O initialization stuff for you.


00:16:11.380 --> 00:16:15.480
And then you can wait on the result or not wait on the result, however you like.


00:16:15.480 --> 00:16:17.800
That alone is pretty cool.


00:16:17.800 --> 00:16:21.840
But then if you put that on a regular function, not an async one, it'll cause it to run on


00:16:21.840 --> 00:16:24.920
a thread pool thread, on thread pool executor.


00:16:24.920 --> 00:16:29.800
If you flip a bit and say, at unsync your decorator, but it's CPU bound, it'll actually


00:16:29.800 --> 00:16:33.540
run it on the process pool executor in a separate process.


00:16:33.540 --> 00:16:35.400
So you can get around the gill.


00:16:35.400 --> 00:16:36.400
Oh, interesting.


00:16:36.400 --> 00:16:39.160
And it's all just one decorator.


00:16:39.160 --> 00:16:43.960
And it'll like traverse, it'll sort of manage those dependencies as async, how does it run?


00:16:43.960 --> 00:16:47.960
it's really pretty slick on how it detects the different ways in which


00:16:47.960 --> 00:16:49.960
asynchrony can be manifest in Python.


00:16:49.960 --> 00:16:53.960
To be fair, my first thought is that this might be,


00:16:53.960 --> 00:16:56.960
if I'm writing an asynchronous library,


00:16:56.960 --> 00:17:01.960
that synchronizing my asynchronous library, for instance,


00:17:01.960 --> 00:17:05.960
might be helpful during just a functional test, for example.


00:17:05.960 --> 00:17:08.960
Yeah, you want to wait for it to go, yeah.


00:17:08.960 --> 00:17:11.960
Definitely. So I think there's a lot of interesting use cases for this,


00:17:11.960 --> 00:17:15.780
this and it definitely provides a lot of flexibility. It's not, it doesn't have a


00:17:15.780 --> 00:17:19.620
huge number of GitHub stars. I think it's pretty new but you know people can


00:17:19.620 --> 00:17:24.100
think about it and maybe there's even some tie-ins like maybe somehow Trio and


00:17:24.100 --> 00:17:28.760
its Trio async I/O could plug together with this. I don't know but a lot of


00:17:28.760 --> 00:17:34.040
interesting news around the async I/O space or async await space. Very amusing


00:17:34.040 --> 00:17:40.880
code example of things like return I hate event loops and naming is event


00:17:40.880 --> 00:17:45.500
loop, annoying event loop. Yeah, he's got some great naming. And then his async


00:17:45.500 --> 00:17:49.880
function that he calls by putting the unsync decorator on it, its return value is


00:17:49.880 --> 00:17:54.560
I like decorators. Yeah, it's pretty light-hearted. It's nice, but it's a cool


00:17:54.560 --> 00:17:58.120
project. People can check it out and see if it works for them. All right, well


00:17:58.120 --> 00:18:01.080
thanks. Yeah, you got anything else to share with the Brian? I'm out of news for


00:18:01.080 --> 00:18:06.000
the week. No, I'm out as well. All right, how about that? Well, thanks for


00:18:06.000 --> 00:18:09.160
finding all these things and sharing them, and thanks everyone for listening.


00:18:09.160 --> 00:18:14.040
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes.


00:18:14.040 --> 00:18:20.400
That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm.


00:18:20.400 --> 00:18:24.720
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.


00:18:24.720 --> 00:18:29.680
We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken,


00:18:29.680 --> 00:18:34.560
this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

