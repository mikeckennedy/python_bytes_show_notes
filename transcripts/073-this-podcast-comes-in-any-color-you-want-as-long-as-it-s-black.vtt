WEBVTT

00:00:00.001 --> 00:00:05.420
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.420 --> 00:00:09.340
This is episode 73, recorded April 4th, 2018.

00:00:09.340 --> 00:00:10.280
I'm Michael Kennedy.

00:00:10.280 --> 00:00:11.140
And I'm Brian Okken.

00:00:11.140 --> 00:00:13.000
And this episode is brought to you by Datadog.

00:00:13.000 --> 00:00:16.220
Check them out at pythonbytes.fm/datadog.

00:00:16.220 --> 00:00:17.400
I'll tell you more about them later.

00:00:17.400 --> 00:00:27.620
Right now, I want to relive my math education, Brian, and my set theory and all these sorts of fun number theory things.

00:00:27.620 --> 00:00:28.040
Right.

00:00:28.040 --> 00:00:35.360
So there's an article called, I think I truncated it, set theory and Python tips and tricks.

00:00:35.360 --> 00:00:38.040
Actually, that's one of the classes I loved.

00:00:38.040 --> 00:00:45.620
I loved the discrete math class I had in college that was early in my computer science days to talk and learn about set theory.

00:00:45.620 --> 00:00:47.240
And then you use it a lot.

00:00:47.240 --> 00:00:49.600
It's a useful tool.

00:00:49.600 --> 00:00:55.560
But there's a lot of people that come to Python that haven't taken that or really not sure what set theory is.

00:00:55.560 --> 00:00:56.760
It's really not that complicated.

00:00:56.760 --> 00:01:02.960
And this is a good introduction article on really what set theory is or some of the set theory concepts.

00:01:02.960 --> 00:01:12.560
And then how to do that in Python, including things like checking to see if something's in a set and unions and intersections and differences and things.

00:01:13.020 --> 00:01:14.460
And it's just a lot of fun.

00:01:14.460 --> 00:01:15.520
Yeah, I think this is awesome.

00:01:15.520 --> 00:01:22.080
And this is one of those things where the right data structure can just make all the difference in terms of performance and simple code.

00:01:22.300 --> 00:01:22.700
Right.

00:01:22.700 --> 00:01:29.260
Like if you try to model this with lists, which you totally could do, then you're writing basically implementing.

00:01:29.260 --> 00:01:31.540
Is this set contained within that set?

00:01:31.540 --> 00:01:32.420
What is the intersection?

00:01:32.420 --> 00:01:38.380
The actual performance of checking if something's in there, making sure you don't get duplicates, all that stuff.

00:01:38.380 --> 00:01:39.900
It just falls apart.

00:01:39.980 --> 00:01:42.840
But if you use sets, well, then it flies, right?

00:01:42.840 --> 00:01:52.020
And anytime you need something distinct, all right, I want a distinct number of IDs or usernames or emails or whatever where there might be duplication, set.

00:01:52.020 --> 00:01:52.840
It's all about the set.

00:01:52.840 --> 00:01:53.200
Right.

00:01:53.340 --> 00:01:57.400
And yeah, that's the thing to take away from if you're not familiar with sets.

00:01:57.400 --> 00:02:03.240
Sets are a container that only have unique elements in it.

00:02:03.240 --> 00:02:08.140
So if you're adding words, you're going through an article and you add words to a set.

00:02:08.140 --> 00:02:12.460
If the word the is already in there, it's only going to be added once.

00:02:12.460 --> 00:02:12.840
Right.

00:02:12.840 --> 00:02:21.280
If you had a list that contained every word in order of a play or something, you threw it into a set, that would just give you all the words used distinctly.

00:02:21.280 --> 00:02:21.600
Yeah.

00:02:21.600 --> 00:02:26.560
It's simple data structure built into Python, and it's a good thing to know how to use.

00:02:26.560 --> 00:02:27.180
Yeah, I love it.

00:02:27.180 --> 00:02:30.680
And it's super, super fast for containment, a little bit like dictionaries in that sense.

00:02:30.680 --> 00:02:31.840
So nice one.

00:02:31.840 --> 00:02:32.680
I'm glad you found that.

00:02:32.680 --> 00:02:38.240
The syntax for how to do math, set theory math, is not obvious.

00:02:38.240 --> 00:02:43.720
It's not complicated, but it's something that's good to review so that you know what those are.

00:02:43.720 --> 00:02:44.580
Yeah, very, very nice.

00:02:44.580 --> 00:02:50.620
So the next thing that I want to talk about, in fact, you're going to notice a little bit of a trend this week, Brian.

00:02:51.280 --> 00:02:54.740
I'm on some kind of rant on async programming this week.

00:02:54.740 --> 00:03:00.080
So all three of my items have to do with async programming in one way or another.

00:03:00.080 --> 00:03:03.020
Generally, each one of them and improving what already exists.

00:03:03.020 --> 00:03:03.680
Oh, great.

00:03:03.840 --> 00:03:03.980
Yeah.

00:03:03.980 --> 00:03:11.540
So the first one is called Trio, T-R-I-O, and it says async programming for humans and snake people.

00:03:11.540 --> 00:03:14.020
So it's interesting, right?

00:03:14.020 --> 00:03:17.460
Like in Python 3 and 3.4, we got asyncio.

00:03:17.460 --> 00:03:26.620
In 3.5, we got async and await, the keywords that built upon the asyncio foundation, which is really coroutines and functions and stuff like that.

00:03:27.060 --> 00:03:33.220
And so this guy who created this is like, this thing already exists, but the API for it is really crummy.

00:03:33.220 --> 00:03:36.100
And you'll hear this is like a theme over and over with slightly different takes.

00:03:36.100 --> 00:03:38.220
But so like, why does this exist?

00:03:38.220 --> 00:03:38.640
Right.

00:03:38.680 --> 00:03:47.040
So it says basically the Trio project's goal is to produce production quality, async and await native IO libraries for Python.

00:03:47.040 --> 00:03:54.700
And like all the other stuff, it allows you to do sort of IO block stuff in parallel in really nice ways.

00:03:55.340 --> 00:03:59.580
But the API on how you do that is quite a bit nicer.

00:03:59.580 --> 00:04:05.480
And it supports advanced concepts like canceling a task that started while you're still waiting for it.

00:04:05.480 --> 00:04:06.420
Right.

00:04:06.420 --> 00:04:07.440
Things like that.

00:04:07.440 --> 00:04:17.300
Like if you're doing a web service call and a database transaction and the database fails, you want to roll back or cancel the web call or vice versa, something like that.

00:04:17.820 --> 00:04:22.240
So it really tries to distinguish itself by being like really focused on this usability thing.

00:04:22.240 --> 00:04:24.960
And it's built like entirely from the ground up.

00:04:24.960 --> 00:04:28.600
And what's really interesting is they have this like, these are our sources for inspiration.

00:04:28.600 --> 00:04:32.100
A link like a GitHub issue.

00:04:32.100 --> 00:04:33.260
Maybe it's in the wiki.

00:04:33.260 --> 00:04:33.820
I can't remember.

00:04:33.820 --> 00:04:36.420
But a big long part where they talk about all the places.

00:04:36.420 --> 00:04:37.420
There's a lot of Erlang.

00:04:37.420 --> 00:04:38.420
There's C Sharp.

00:04:38.420 --> 00:04:41.440
There's Go that makes a big appearance there.

00:04:41.440 --> 00:04:46.540
But in particular, it's based on David Beasley's Curio, which is kind of a similar project as well.

00:04:46.540 --> 00:04:47.520
Interesting, right?

00:04:47.520 --> 00:04:47.860
Yeah.

00:04:47.860 --> 00:04:50.140
And I like the API is actually pretty nice.

00:04:50.140 --> 00:04:52.020
Things like start soon.

00:04:52.020 --> 00:04:52.680
Yeah, exactly.

00:04:52.680 --> 00:04:54.800
I love the things you can do.

00:04:54.800 --> 00:04:58.360
So like asyncio stuff is really fairly complicated.

00:04:58.360 --> 00:05:00.320
It's like three, four lines of code.

00:05:00.320 --> 00:05:05.400
You always have to do just a transition from synchronous mode into the asynchronous world.

00:05:05.400 --> 00:05:10.020
You've always got to create this async loop and then begin running an async method to do it.

00:05:10.020 --> 00:05:12.600
But here you just say trio.run and you give it a function.

00:05:12.600 --> 00:05:13.620
Boom, done.

00:05:14.000 --> 00:05:22.720
If you want to like pause but not block the rest of the program, you can instead of saying time.sleep, which will totally block that thread, you can say trio.sleep.

00:05:23.340 --> 00:05:27.640
And that will basically release the main thread to go do more work as if you're doing IO.

00:05:27.640 --> 00:05:28.460
Nice.

00:05:28.460 --> 00:05:29.220
That's nice.

00:05:29.340 --> 00:05:38.100
But like you said, the main part is you can create an async with block, which already is like mind bending, and create this thing called a nursery.

00:05:38.100 --> 00:05:40.960
And then you go to the nursery and say start this task soon.

00:05:40.960 --> 00:05:41.880
Start that task soon.

00:05:42.100 --> 00:05:48.060
And then the with block will wait and block at the very end until all of the things you started within it are done.

00:05:48.060 --> 00:05:48.520
Yeah.

00:05:48.520 --> 00:05:53.980
And, you know, the nursery thing confused me at first until I remembered that we're doing child tasks.

00:05:53.980 --> 00:05:58.740
So you get your child's children from a nursery.

00:05:58.740 --> 00:05:59.340
Nice.

00:05:59.340 --> 00:05:59.720
That's right.

00:05:59.720 --> 00:06:00.440
You put them in the nursery.

00:06:00.440 --> 00:06:01.680
They can grow up.

00:06:01.680 --> 00:06:03.240
And when they're done, then you're out of it.

00:06:03.320 --> 00:06:09.180
But this like adaptation of the async with block is really, really interesting, which I believe requires Python 3.6.

00:06:09.180 --> 00:06:18.820
So they have a bunch of tools for like inspecting and debugging your programs and like the async flow, how this stuff is working, which is, I think, a really nice addition.

00:06:18.820 --> 00:06:28.400
One of the problems that you run into with this is if you've got like, say, an async Postgres data access layer, it's probably built on asyncio, not on Trio.

00:06:28.940 --> 00:06:33.440
So you can't, even though they are effectively the same, they're not compatible.

00:06:33.440 --> 00:06:33.900
Right.

00:06:33.900 --> 00:06:40.180
So there's this other project called Trio Async IO that puts a layer, a compatibility layer.

00:06:40.180 --> 00:06:42.500
So anything that supports asyncio can run on Trio.

00:06:42.500 --> 00:06:43.300
Oh, cool.

00:06:43.300 --> 00:06:43.600
Yeah.

00:06:43.600 --> 00:06:45.260
So this is a really cool project.

00:06:45.260 --> 00:06:46.420
I'm super impressed with this.

00:06:46.420 --> 00:06:47.440
I'll have to check that out, too.

00:06:47.440 --> 00:06:49.660
But just a slight correction.

00:06:49.660 --> 00:06:53.080
It says 3.5 and above and also PyPy.

00:06:53.080 --> 00:06:54.140
Yes, that's true.

00:06:54.140 --> 00:06:56.540
But I think the async with block.

00:06:56.540 --> 00:06:57.760
I'm not sure.

00:06:57.760 --> 00:06:58.080
Oh, okay.

00:06:58.080 --> 00:07:01.420
That structure itself is supported in Python 3.5.

00:07:01.420 --> 00:07:02.280
I don't think so.

00:07:02.280 --> 00:07:09.120
I know more things became async in 3.6, like async generator expressions and list comprehensions

00:07:09.120 --> 00:07:10.420
came in 3.6.

00:07:10.420 --> 00:07:14.300
So there's like, it might be a slightly different context there.

00:07:14.300 --> 00:07:16.340
And whatever, f-strings came in 3.6.

00:07:16.340 --> 00:07:18.800
So nothing exists to me before 3.6.

00:07:18.800 --> 00:07:20.440
3.5, you're dead to me.

00:07:20.440 --> 00:07:22.080
Awesome.

00:07:22.540 --> 00:07:27.180
So I've been hearing a lot on the social medias about this thing called Black.

00:07:27.240 --> 00:07:27.720
Yeah.

00:07:27.720 --> 00:07:32.320
So I thought we'd better cover it, even though it's been around for a little while, not like

00:07:32.320 --> 00:07:33.100
a long time.

00:07:33.100 --> 00:07:34.800
But you're right.

00:07:34.800 --> 00:07:36.640
It has had a lot of social media attention.

00:07:36.640 --> 00:07:41.900
So Black is the uncompromising Python code for matter.

00:07:42.500 --> 00:07:47.960
But I thought it was just sort of an amusing take on something like, so we have linters and

00:07:47.960 --> 00:07:54.160
everything, but they just tell you what is wrong or what doesn't comply with PEP8 standards

00:07:54.160 --> 00:07:55.080
or other standards.

00:07:55.080 --> 00:07:58.840
And this one just goes and changes your code for you and doesn't tell you anything.

00:07:59.340 --> 00:08:01.000
Well, I'm not sure if it tells you or not.

00:08:01.000 --> 00:08:02.040
Is it like a black box?

00:08:02.040 --> 00:08:08.440
I'm not sure why the name black, but it is amusing that you can also, now that after you

00:08:08.440 --> 00:08:13.560
run it on your code, your code is blackened code, which actually makes me just hungry because

00:08:13.560 --> 00:08:14.980
I really like blackened salmon.

00:08:14.980 --> 00:08:16.780
Yeah, a good little sauce on it, yeah.

00:08:16.780 --> 00:08:22.560
It is an interesting take to say, if you're going to say our code needs to follow certain

00:08:22.560 --> 00:08:27.460
standards, if this one works for you, just put that in your tool chain and it'll just

00:08:27.460 --> 00:08:30.840
automatically format everything and you don't need to argue about it anymore.

00:08:30.840 --> 00:08:36.280
Make it part of like a GitHub, a git check-in hook or part of your automated build that just

00:08:36.280 --> 00:08:38.520
formats it and checks it back in.

00:08:38.520 --> 00:08:41.860
The GitHub repo has some amusing stuff in it also.

00:08:41.860 --> 00:08:47.180
So poke around in there because like, for instance, in the tests, there's a comments file and it

00:08:47.180 --> 00:08:49.420
has examples of comments that should be removed.

00:08:49.420 --> 00:08:55.740
And, you know, it's sort of funny stuff like some comment about why this function doesn't

00:08:55.740 --> 00:08:57.620
work and it's still in production anyway.

00:08:57.620 --> 00:09:00.040
Things like that that should just be removed.

00:09:00.040 --> 00:09:00.540
It's funny.

00:09:00.540 --> 00:09:01.780
It's a good read.

00:09:01.780 --> 00:09:03.440
Yeah, I think this is pretty interesting.

00:09:03.440 --> 00:09:07.300
I haven't done anything with it, but it's definitely worth checking out, especially if you have a

00:09:07.300 --> 00:09:11.520
team of people and you want to try to make it continuously format stuff the same, right?

00:09:11.520 --> 00:09:15.000
I don't really have an opinion on it other than it's interesting.

00:09:15.000 --> 00:09:15.720
Sounds pretty good.

00:09:15.720 --> 00:09:18.140
All right, before we get to the next one, let me tell you about Datadog.

00:09:18.140 --> 00:09:24.600
So if you run any sort of distributed app, understanding how a request flows from one

00:09:24.600 --> 00:09:29.520
part through the whole thing, what the performance of those are, what the bottlenecks around those

00:09:29.520 --> 00:09:30.940
are, can be really tricky.

00:09:30.940 --> 00:09:32.660
So you can plug in Datadog.

00:09:32.660 --> 00:09:38.180
In just a few minutes, you'll be able to investigate those bottlenecks and explore dashboards that

00:09:38.180 --> 00:09:40.440
show you where you're spending your time in the app.

00:09:40.800 --> 00:09:43.540
And you get to visualize your Python performance.

00:09:43.540 --> 00:09:44.900
Super easy and nice.

00:09:44.900 --> 00:09:49.560
Get a free trial and a free Datadog t-shirt with a cute little dog on it.

00:09:49.560 --> 00:09:53.420
So just check them out at pythonbytes.fm/Datadog.

00:09:53.420 --> 00:09:54.900
We've got to get our shirts, right, Brian?

00:09:54.900 --> 00:09:55.860
Yeah, definitely.

00:09:55.860 --> 00:09:56.360
Definitely.

00:09:56.360 --> 00:09:57.620
I'm looking at PyCon.

00:09:57.620 --> 00:09:59.620
I'm going to try to get a shirt from him at PyCon.

00:09:59.620 --> 00:10:01.180
I'm going to try to get one before that.

00:10:01.180 --> 00:10:01.540
Nice.

00:10:01.540 --> 00:10:04.480
Back onto my rant on async stuff.

00:10:04.480 --> 00:10:07.480
So there's this thing called gain.

00:10:07.900 --> 00:10:15.660
And the point of gain is you can give it a base URL, a set of regular expressions of types

00:10:15.660 --> 00:10:22.660
of links in there to traverse and follow, and then just tell it to go.

00:10:22.660 --> 00:10:25.840
And it will basically spider an entire site.

00:10:25.840 --> 00:10:29.180
Think Google Web Spider, but yours.

00:10:29.180 --> 00:10:30.060
Yeah.

00:10:30.060 --> 00:10:35.300
And it's all based on asyncio, UV loop, and AIoHCP, which is pretty cool.

00:10:35.380 --> 00:10:40.340
So all you've got to do is you define a class that has a CSS selectors and what you want

00:10:40.340 --> 00:10:42.820
to do, like save the data to a file or a database or whatever.

00:10:42.820 --> 00:10:48.320
How many concurrent connections you want it to go spider on with its async aspect.

00:10:48.320 --> 00:10:49.600
Where to start.

00:10:49.600 --> 00:10:55.060
The URL things to match, like anything on the page or anything that's under the catalog section

00:10:55.060 --> 00:10:55.400
or whatever.

00:10:55.400 --> 00:10:56.180
And you say go.

00:10:56.620 --> 00:11:01.100
And then you wait a little bit and all sorts of stuff has been downloaded, processed, and

00:11:01.100 --> 00:11:01.400
saved.

00:11:01.400 --> 00:11:01.900
Right.

00:11:01.900 --> 00:11:02.880
And it's very terse.

00:11:02.880 --> 00:11:05.880
I mean, you don't really have to put that much code in place to get this done.

00:11:05.880 --> 00:11:08.100
No, it's like 10, 15 lines of code.

00:11:08.100 --> 00:11:12.580
And you've like completely analyzed somebody's entire website structure.

00:11:12.580 --> 00:11:13.160
Pretty cool.

00:11:13.160 --> 00:11:13.600
Yeah.

00:11:13.780 --> 00:11:17.900
And because it's based on asyncio and AIoHCP, it should totally fly.

00:11:17.900 --> 00:11:18.240
Neat.

00:11:18.240 --> 00:11:18.480
Yeah.

00:11:18.480 --> 00:11:18.880
Very neat.

00:11:18.880 --> 00:11:20.520
So not a whole lot to do on that one.

00:11:20.520 --> 00:11:26.280
But if you're doing like screen scraping, web analysis of more than just one page, this

00:11:26.280 --> 00:11:31.020
is pretty cool because you can sort of just set up patterns and say, go forth and do that.

00:11:31.020 --> 00:11:36.200
I was thinking it'd be fun to do something like that to hook up with a website you run

00:11:36.200 --> 00:11:42.860
in to just even attach it to a post project of checking to make sure the link using a request

00:11:42.860 --> 00:11:43.680
or something to grab.

00:11:43.680 --> 00:11:44.000
Yeah.

00:11:44.000 --> 00:11:44.640
That's a good point.

00:11:44.640 --> 00:11:48.080
Like link validation to make sure every link on the page works correctly.

00:11:48.080 --> 00:11:48.820
Things like that.

00:11:48.820 --> 00:11:48.980
Right.

00:11:48.980 --> 00:11:49.480
Yeah.

00:11:49.480 --> 00:11:53.420
And set up a notifier or something like that to let you know if something's broken.

00:11:53.420 --> 00:11:53.800
All right.

00:11:53.820 --> 00:11:57.520
So what is this next one you got with these decorators, single dispatch?

00:11:57.520 --> 00:11:58.600
Yeah, actually.

00:11:58.600 --> 00:12:03.420
So this is an article called generic functions in Python with single dispatch.

00:12:03.420 --> 00:12:06.400
And I didn't know this was a thing.

00:12:06.400 --> 00:12:12.140
Apparently in Python 3.4, it was added this decorator, a single dispatch decorator.

00:12:12.140 --> 00:12:14.660
And we'll talk about it and read it.

00:12:14.660 --> 00:12:16.840
But you kind of need to see the code.

00:12:16.840 --> 00:12:20.300
You can decorate a function with single dispatch.

00:12:20.580 --> 00:12:24.160
And that makes that function the default function.

00:12:24.160 --> 00:12:30.740
Then you can use a decorator to register other functions to be the non-default.

00:12:30.740 --> 00:12:31.980
Oh, this is interesting.

00:12:31.980 --> 00:12:32.460
Yeah.

00:12:32.460 --> 00:12:38.200
So that you can have one function name that does calls different functions based on the

00:12:38.200 --> 00:12:41.400
type of the first element in the parameter list.

00:12:41.480 --> 00:12:49.400
So it's basically like declarative function overloading polymorphism based on the type, which we don't

00:12:49.400 --> 00:12:49.940
have in Python.

00:12:49.940 --> 00:12:50.440
Right.

00:12:50.440 --> 00:12:52.260
Which apparently we do have in Python.

00:12:52.260 --> 00:12:53.320
I just didn't know about it.

00:12:53.320 --> 00:12:55.500
It just requires decorators.

00:12:55.500 --> 00:12:56.580
But it's built in.

00:12:56.580 --> 00:12:57.440
Built in decorators.

00:12:57.440 --> 00:12:57.780
Yeah.

00:12:57.780 --> 00:12:58.080
Yeah.

00:12:58.080 --> 00:12:58.440
This is wild.

00:12:58.520 --> 00:13:01.160
So you've got like one function and you say single dispatch.

00:13:01.160 --> 00:13:03.740
And then you have other functions that just have doc strings.

00:13:03.740 --> 00:13:09.740
But you would basically wrap them with this one takes a list setter tuple called this version.

00:13:09.740 --> 00:13:11.700
If it takes a dictionary called this other version.

00:13:11.700 --> 00:13:12.280
Yeah.

00:13:12.280 --> 00:13:13.000
This is interesting.

00:13:13.000 --> 00:13:15.240
It's a little non-obvious, but it's interesting.

00:13:15.240 --> 00:13:19.300
I took the example out of the article and trimmed it down.

00:13:19.420 --> 00:13:23.560
So those doc strings are just to make our code example and our notes small.

00:13:23.560 --> 00:13:31.080
But yeah, it has an example of like building your own fprintf function that can print differently.

00:13:31.080 --> 00:13:34.180
Like the default is just to print the string representation.

00:13:34.180 --> 00:13:41.120
But for instance, lists and sets and dictionaries can be printed differently and having elements

00:13:41.120 --> 00:13:41.740
on each line.

00:13:41.740 --> 00:13:43.640
I'm sure there's other reasons.

00:13:43.640 --> 00:13:49.960
But I know I've run across times where I wished Python had function overloading and doesn't.

00:13:49.960 --> 00:13:54.700
I've implemented function overloading with if is instance of this type.

00:13:54.700 --> 00:14:00.920
Else if instance of this type, you know, which is not really great, but it's what you got.

00:14:00.920 --> 00:14:01.320
Right.

00:14:01.320 --> 00:14:03.780
But apparently you've got this as well, which is pretty awesome.

00:14:03.780 --> 00:14:04.020
Yeah.

00:14:04.020 --> 00:14:04.260
All right.

00:14:04.260 --> 00:14:05.060
You ready for another rant?

00:14:05.060 --> 00:14:06.960
Another thing on async?

00:14:06.960 --> 00:14:07.780
Final one.

00:14:07.780 --> 00:14:09.340
We haven't talked about async for a while.

00:14:09.340 --> 00:14:09.620
No.

00:14:09.620 --> 00:14:10.400
Let's talk about that.

00:14:10.400 --> 00:14:13.480
So there's this thing by a guy named Alex.

00:14:13.620 --> 00:14:14.020
Sherman.

00:14:14.020 --> 00:14:21.200
And he wrote a library called unsync, async, unsync, called unsynchronizing async and await

00:14:21.200 --> 00:14:22.160
in Python 3.6.

00:14:22.160 --> 00:14:30.760
So he says, I'm a big fan of async and await, but there's two major problems with this.

00:14:30.760 --> 00:14:34.420
First of all, it's difficult to do fire and forget async stuff, right?

00:14:34.420 --> 00:14:37.200
You can't just go to an async function and call it and let it run.

00:14:37.680 --> 00:14:43.380
You have to do this weird sort of series of creating the async loop, blocking on the async

00:14:43.380 --> 00:14:43.700
loop.

00:14:43.700 --> 00:14:49.700
So you create a loop and you ensure the future by giving it a function and a loop function

00:14:49.700 --> 00:14:49.980
to call.

00:14:49.980 --> 00:14:56.020
But it's really not obvious to just run a basic asynchronous thing from a synchronous task.

00:14:56.020 --> 00:14:56.280
Okay.

00:14:56.440 --> 00:14:56.680
Okay.

00:14:56.840 --> 00:15:00.100
So if you look at the article, like right at the top, it links sort of that, that code

00:15:00.100 --> 00:15:00.360
there.

00:15:00.360 --> 00:15:02.000
You also can't block.

00:15:02.000 --> 00:15:05.160
You can't say, well, I've gotten this thing back from an async thing.

00:15:05.160 --> 00:15:07.900
I just want to stop here and just wait until its answer comes back.

00:15:07.900 --> 00:15:08.760
It'll throw an exception.

00:15:08.760 --> 00:15:09.200
Right?

00:15:09.560 --> 00:15:10.660
So this is all kind of weird.

00:15:10.660 --> 00:15:13.680
This guy says, Hey, well, what can we do about this?

00:15:13.680 --> 00:15:19.580
So he kind of solves it in a sense says, you know, C# had this idea of async and away

00:15:19.580 --> 00:15:22.900
in these tasks that run almost identical to what Python has.

00:15:22.900 --> 00:15:28.440
The way they fixed it was by creating this ambient thread pool that will capture and run.

00:15:28.440 --> 00:15:32.040
Basically the asyncio loop is like this thing behind the scenes you never see.

00:15:32.040 --> 00:15:36.680
And internally Python or C# would like find it, just put it in like the default one.

00:15:37.640 --> 00:15:41.560
And they said, Python didn't take this approach and his hunch is the maintainers didn't want

00:15:41.560 --> 00:15:44.540
to add an ambient thread pool to their language, which makes sense.

00:15:44.540 --> 00:15:48.420
He says, I, however, am not a Python maintainer.

00:15:48.420 --> 00:15:52.440
And I did add an ambient thread to mine and here's how it works.

00:15:52.440 --> 00:15:57.400
So you just take any async function and you put an at unsync decorator.

00:15:57.400 --> 00:15:59.860
We also have a big decorator theme going on here.

00:15:59.860 --> 00:16:02.780
Put an at unsync decorator on it and then you just call it.

00:16:02.780 --> 00:16:04.040
And it sounds real simple.

00:16:04.300 --> 00:16:10.220
So what it does is it will basically wrap it up and do all that asyncio initialization

00:16:10.220 --> 00:16:11.000
stuff for you.

00:16:11.000 --> 00:16:14.380
And then you can wait on the result or not wait on the result, however you like.

00:16:14.380 --> 00:16:17.200
That alone is pretty cool.

00:16:17.200 --> 00:16:22.060
But then if you put that on a regular function, not an async one, it'll cause it to run on a

00:16:22.060 --> 00:16:24.060
thread pool thread on thread pool executor.

00:16:24.640 --> 00:16:30.260
If you flip a bit and say at unsync your decorator, but it's CPU bound, it'll actually run it

00:16:30.260 --> 00:16:33.100
on the process pool executor in a separate process.

00:16:33.100 --> 00:16:34.880
So you can get around the gill.

00:16:34.880 --> 00:16:36.360
Oh, interesting.

00:16:36.360 --> 00:16:40.280
And it's all just one decorator and it'll like traverse.

00:16:40.280 --> 00:16:42.980
It'll like sort of manage those dependencies as async.

00:16:42.980 --> 00:16:43.760
How does it run?

00:16:43.760 --> 00:16:47.900
Where's the, it's really pretty slick on how it like detects the different ways in which

00:16:47.900 --> 00:16:50.320
asynchrony can be like manifest in Python.

00:16:50.500 --> 00:16:56.140
To be fair, I know my first thought is like that this might be, if I'm writing an asynchronous

00:16:56.140 --> 00:17:04.560
library that synchronizing my asynchronous library, for instance, might be helpful during like

00:17:04.560 --> 00:17:06.600
just a functional test, for example.

00:17:06.600 --> 00:17:06.860
Yeah.

00:17:06.860 --> 00:17:08.780
You want to wait for it to go.

00:17:08.780 --> 00:17:09.960
Yeah, definitely.

00:17:09.960 --> 00:17:13.980
So I think there's a lot of interesting use cases for this and it definitely provides a lot

00:17:13.980 --> 00:17:14.520
of flexibility.

00:17:14.520 --> 00:17:17.000
It's not, it doesn't have a huge number of GitHub stars.

00:17:17.000 --> 00:17:20.200
I think it's pretty new, but you know, people can think about it.

00:17:20.340 --> 00:17:26.600
And maybe there's even some tie-ins, like maybe somehow Trio and it's Trio async.io could

00:17:26.600 --> 00:17:27.480
plug together with this.

00:17:27.480 --> 00:17:32.880
I don't know, but a lot of interesting news around the async.io space or async await space.

00:17:32.880 --> 00:17:36.820
Very amusing code example of things like a return.

00:17:36.820 --> 00:17:42.420
I hate event loops and naming his event loop, annoying event loop.

00:17:42.420 --> 00:17:43.360
Yeah.

00:17:43.360 --> 00:17:44.360
He's got some great naming.

00:17:44.360 --> 00:17:49.640
And then his async function that he calls by putting the unsync decorator, it's return value

00:17:49.640 --> 00:17:50.760
is I like decorators.

00:17:50.760 --> 00:17:51.460
Yeah.

00:17:51.460 --> 00:17:53.120
It's pretty lighthearted.

00:17:53.120 --> 00:17:55.020
It's nice, but it's a cool project.

00:17:55.020 --> 00:17:57.200
People can check it out and see if it works for them.

00:17:57.200 --> 00:17:57.620
All right.

00:17:57.620 --> 00:17:58.400
Well, thanks.

00:17:58.400 --> 00:17:58.700
Yeah.

00:17:58.700 --> 00:17:59.960
You got anything else to share with Brian?

00:17:59.960 --> 00:18:01.800
I'm out of news for the week.

00:18:01.800 --> 00:18:03.740
No, I'm out as well.

00:18:03.740 --> 00:18:04.160
All right.

00:18:04.160 --> 00:18:04.600
How about that?

00:18:04.600 --> 00:18:07.780
Well, thanks for finding all these things and sharing them.

00:18:07.780 --> 00:18:08.660
And thanks everyone for listening.

00:18:09.980 --> 00:18:11.580
Thank you for listening to Python Bytes.

00:18:11.580 --> 00:18:14.140
Follow the show on Twitter via at Python Bytes.

00:18:14.140 --> 00:18:17.020
That's Python Bytes as in B-Y-T-E-S.

00:18:17.020 --> 00:18:20.460
And get the full show notes at pythonbytes.fm.

00:18:20.460 --> 00:18:24.780
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:18:24.780 --> 00:18:27.480
We're always on the lookout for sharing something cool.

00:18:27.480 --> 00:18:30.880
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:18:30.880 --> 00:18:34.500
Thank you for listening and sharing this podcast with your friends and colleagues.

