00:00:00 Hey, Brian. Hey, I see that you've come wielding a staff of Yeah, I was cleaning my office and I found the Python staff. So I'm like, I'm working this out for the show. Yeah. Yeah. That was when we used to go to conferences. You remember that? Like people, they'd all get together? I think they might be making a comeback? I think so I think it might be attending some conferences in the future. Awesome. So don't lie I'm looking forward to before we get to our topics. I also want to say thank you to our new sponsor this week are not totally new, but new for recent times, compiler, the podcast from Red Hat. So awesome. Have the support from Red Hat. We're gonna be telling you more about a month later. But Brian, let's just mix it up. Let's make a difference. This is episode 308. Recorded November 1 2022. I'm Michael Kennedy. And I'm Brian neck. And let's let's do it. I did want to talk about PyCon. Yeah, so PyCon is coming up. So when is it it's

00:00:53 I wrote this down even so I could remember, it's April 19. To the 23rd. It's but one of the I, we bring up PyCon. US because the the the site just launched recently, so pretty excited about that linking to a blog post about the site launch and the call for proposals. So again, it's going to be let's just hop over to the big one. It's kind of a cool, cool look to it. Now the it's an homage to some of the old ones. Because there's what's the 20th anniversary special? So it's some of the old pictures. So you can I see. So it's a bunch of tiles, and the different tiles are actually like the hero image or whatever. Yeah, from that year, or bit bits of it or something. So yeah, it's, it's, it looks cool. Um, so PyCon us is going to be April 20, April 19. That is 23rd. Well, that's when the talks are, it's longer. So there's, there's tutorials ahead of time. And then there's, there's like hack days, or whatever they call those afterwards. So if you can stay longer, awesome. But the top part is the 19th to the 23rd. Salt Lake City. The site looks great. The call for proposals is up. And and that's really kind of what I wanted to highlight is. So people start thinking about your talks. And of course, yeah, we've got some more information about talks coming up later in the show. But the deadlines, what are the deadlines? So we've got the CFP just opened, just opened 18th. And then it's through December 9, so but don't wait until December get those get those in early. So anyway, yeah, excellent. I think I'm gonna submit some because I kind of think I want to go to PyCon this year, I didn't go last year you are what do you have you thought about it yet? Michael? Yeah, definitely thought about it. I'm very much considering going. You know, for me, it's like, talk Python gonna get a booth and have like a bunch of presents there. In which case, going into the conference means hanging out at the booth for three days, which is kind of awesome. But also it's like not exactly a conference. Maybe I'll go Loki and submit a talk. And then just like cruise around the halls, I haven't decided, right, do a bunch of podcast recording live there. Right. So there's, there's trade offs to both obviously. So I got to I got to think about what I might want to do. Yeah, I think I'm gonna submit some talks about and one of the things I wanted to bring up with submitting talks is to not to do it. Because it's a good experience to submit a talk, even if you don't get the talk. It's the process of going through that submittal process. I think it's it's, it's a growing growth experience, even if even if it gets rejected it don't feel bad, because tons of people submit talks, and they can't accept all of them, obviously. So yeah, yeah, absolutely. Cool. Cool. Well, would you got, that'd be exciting. I actually want to do a bit of bookkeeping before we move on. Yeah, it's good I do for people who typically attend our live stream recording, which we really appreciate that that's awesome. We see a bunch of familiar faces in the chat already out here. And we do that live on YouTube, and then we polish it up and send it out to the world over the audio channels. So I think you can get a lot out of the video version that said, we're moving the video version, right? We are and it's my fault. But so I've got a, I've got a periodic meeting that happens in my day job. And it happens at noon on Tuesdays. And that's when we usually used to record so we're just shifting it a little bit. So we're gonna do 11am On Tuesdays saying exactly, it's just an hour earlier on Tuesdays. So I want to encourage people to go to item by side FM slash YouTube, and it'll take you over to our channel. If you subscribe and get notified, you'll just get a pop up when we're streaming live and you got time you can drop it, you don't have to plan too much about it. So anyway, encourage people to be part of the YouTube experience here because we got we put a lot of stuff on the screen and it makes it even a little bit cooler, I think. And while we're bookkeeping, and it's 11 if you can make it 11am On Tuesdays, maybe you want to be on the show. So reach out if you'd like to be a guest host we still do those. So yeah, exactly. I do want to forgot anything.

00:05:00 Under Taco Bell, let's see how about any IO? Any IO is a framework that lets you build async things. And when you first hear about it, it's, you know, it's it looks like it's kind of for making network libraries. Like if you were making a low level network app, and you wanted it to be concurrent, and asynchronous like, well, you could use any IO, which would be cool. And it has the ability to be added Alex, the creator of it, put it something like a framework that goes above the async IO frameworks. So it doesn't like if you think of TRIO or curio, those are replacements for async IO, whereas any idea will run on top and integrate with async. Io, or it will run on top of innovate with trio. So you can kind of add it into whatever you're doing, which I think is pretty sweet. But I think it's a little

00:05:47 elevator pitch or whatever here sells it a bit short. So I just wanted to talk about some awesome building blocks that people can use from any IO that I think would make them make it really fun. Alright, so one of the 311 features, actually, is this idea of task groups. And they also have this concept of task groups over they had it originally in intreo. And then it comes over here about these groups. And what you can do is you can basically create a task group do a bunch of work on them. And then when it exits, that with block, it's all finished. So if you're not ready to go to 311, but you want to have task groups, here's one way to get it. So that's one thing that's kind of cool that it supports cancellation and timeout, which is important, especially as a group of related things. But one of the things I want to touch on here, that's pretty cool. Is the synchronization primitives. Remember, a few weeks ago, Guido wrote that article about people at a table and semaphores and stuff. Yeah, yeah. So yeah, exactly. So there's a couple couple of those types of primitives here that are really neat. So they've got events, which allow you to just run up to a point and wait until some other async IO thing comes along and says Now go. And these are similar to the events that are built into the standard library, but they're not reentrant. And I have a little bit a claim to have a better way of presenting a race condition and a little bit closer to trio. So there's those and one of the ones over here that's cool is compacity limiters. I think I did talk about this one before. So you can go over here and just say I want to only do this case, the example says critic capacity learner to only want to do two things at a time. But yeah, then let's see. Another one is this working with threads? Pretty awesome. So you can given some function that is just a regular function, you can turn it into async, but actually have it execute on a background thread with to thread with that. And then you can await it just like other things that makes it into your async. Io world. You can also do it in reverse. If you're over in a thread and you need to run it on the async event loop, you can also push it or you can say from thread and to thread at the to thread is the one that the front thread will push it back back to the async event loop, which is cool. Let's see.

00:08:07 Also subprocesses are pretty awesome. So you can do like you have this idea of running your code in a thread because it's not async. But you want it to be kind of concurrent and mix it in, you can do the same thing with sub process. And this is super cool. So you can say just run process, and then it becomes something that's a task that you can await along with your other things. Suite. And then you can even go as far as to open the process. And then like asynchronously work with it. So here's an example of where you open some process. And then you create a text receive stream from its standard out and you just cruise around and read from it while it's running a waiting all the time. Wow. That's neat, right? Yeah. So it just it grabs it while it's printing. So yeah. So basically, what I think it does is it creates a stream that you can await, and then it's just listening for a process messages to come to come through. And then you know, like the task kind of partially completes, right, because it's a an async for loop. So you asynchronously wait for an item to come in. And then it kicks at one time around the loop. And that waits again. And it's it's pretty cool how juggles that. And then finally, here,

00:09:14 the file support. So you can now instead of saying open, you just say any IO dot open file, but you can async await it. You know, it's crazy async with await. There's a lot of crazy stuff happening. But then you can await the reads and so on. Now, there's not actual asynchronous behavior in Python. So how does it manage this? Basically, it creates a wrapper that uses threads that does the file IO. And then it just sort of coordinates the communication of the IO back and forth on the threads as soon as it comes back from Maya, which should release the GIL because it's off doing its own thing and the OS though it should be pretty good anyway, yeah, it looks like maybe I haven't used this but it looks like it makes things like sub processes and threads and and normal async

00:10:00 Wait, all kinda looks the same. Yeah, exactly. It's like a unifying API across the different scenarios, which is really cool. Once you kind of wrap it, you're like, oh, there's just a bunch of tasks, I just call a weight on them. Good to go. Nice. And then possibly, it wouldn't be too much. If you had to change your mind and have something be a surprise process or thread instead, it might not wreak havoc on your design too much. Yeah, exactly. You almost don't even have to worry about it all along, as long as the parameters are, can be passed, right? They gotta be livable, go across, to go across the wire there. But as long as they can be passed to the process, as well as to a thread then that you just get a task back that talks to you. It's cool, but definitely take a look at this. And just before I move off of this, I just want to say also, I interviewed Alex Granholm over on talk Python, when was that? September, actually released it in October, though, so effectively, October, mid a couple of weeks ago. And people can check that out if they want to dive deep into it and hear like, Oh, I feel like yeah, thanks. I do just feel like any iOS sells itself a bit short. So you know, it's like a network library, like, oh, I don't need a network library. But now, there's like all these little core building blocks. Pretty cool. Um, have you used it? Is it pretty nice to use? I've not used it. I'm still working on, on getting my interesting projects more async capable, you know, we're for, like, for example, some of the web stuff, the front end can be more async. And, and so then, then I can start bringing these fun ideas in more unreal projects. Back to your topic real quick, Brandon and audiences, if one was looking at submitting to PyCon, what's the difference between a tutorial versus a talk time? What else? Right? hands on exercises? Right? So tutorials are? What, like three hours or something? I can't remember how long they're and ends. Okay, so they're three hours. They're also a different time. So they're like, not on the day before or something. I think they're, like two or three days before, I can't remember how many days before they run them. I shouldn't look this up. Yeah, but they're before the conference. So you have to be more hotel tickets to get for instance, but since it's three hours to in a talk is what, like, five minutes.

00:12:14 Since they're more work to prepare for a tutorial, you get paid for him. You get a little little stipend, but also people have to pay to talk go to the tutorial. So you know, but I think they're cool things. I know, I handful of the people we know do like to do tutorials if they can. Yeah, I think it's also a lot more guiding people through hands on coding. And it is I'm here to like present. Yeah, it's not a three hour, it shouldn't be a three hour presentation. It's like, we're going to present something and then have exercises for people to work on. People bring their laptops in and stuff like that. Yeah.

00:12:49 But then there's also, one of the things that people forget about is posters. Posters are also pretty cool. On the last day of the con Sunday, I think it's on Sunday, they have the posters up. And here's in the job fair, right. Yeah, I think so the job fair and the posters at the same time. And it really literally is a poster so that if you if you get one of the poster spots, you get, you get a section where you get to have your poster up, but that you can describe whatever you want on there. Hopefully, it's fairly entertaining pertaining to look at and read, and then you get to hang out. So let's say you've got a project you want to talk to people about. It's not really a presentation, you have your poster up, and you just hang out there. And then people come around and ask you questions. Yeah, that's pretty neat. Yeah, yeah. If you want to have a chance to just have a conversation around something you're working on, but not go all in on a talk. I tried to submit a keynote once it turns out, you can't do it. Oh, are they? Did they ask people or something said keynotes or invite only Michael, you can't submit a keynote. I'm like, Well, I'm submitting one. You can turn it down if you

00:13:46 did. All right. Okay, now, what I want to tell you about one more thing, awesome. One awesome thing we'll move on brain will tell you about a compiler podcast from Red Hat. So super cool to have Red Hat come along and supporting the show. And you know, like pretty much everyone listening. You and I were fans of podcasts. And so it's awesome to have this compiler from Red Hat supporting the show really, really good show that they have themselves as very highly edited and polished. So that's excellent. If you want to stay on top of tech without dedicating tons of time to it. You can listen the compiler they present different perspectives and topics and insights from the tech industry free from jargon and judgment. They want to discover where technology is headed beyond the headlines and create a place for new IT professionals to learn, grow and thrive. They help people break through barriers and challenges turning code into community at all the levels of the enterprise. One recent interesting episode is the one about the great stack debate. I love, love love talking about talking to people about their architecture and the trade offs and choices that they made and what the costs and challenges and you know, smiles and frowns that result from that. So you can definitely check out that debate. That's a fun one. They answer the question of whether software is like an onion

00:15:00 In like it's lasagna or whether it's some other more complicated dish, you can check that that's a lot of fun. And it's good. Looks like the the most recent ones about testing to check that. Yeah, you gotta get in there. They have a whole series on the compiler, the compiler series on software stacks, I guess testing is an important part of that's awesome. Yeah. So learn about compiler at Python bytes, FM slash compiler, the link is in your podcast player show notes. I know, you could just search for compiler and sign up, but follow the link and click on your podcast player there and subscribe that way it would really help us let them know that you heard about them from us. So thanks to compiler for keeping this show going strong. Hi, Brian. What's next? Well, I was going to talk about conference talks.

00:15:45 So some more so I'm, I think everybody should try it. Because I actually, I, I was terrified to do my first talk, and I think is a good experience. So

00:15:55 Ruven learner, Ruven learner, friend of the show, and all around awesome guy wrote an article called How to propose a winning conference talk. So we're linking to that. And what there's a lot of there's a lot of articles on how to do a talk. And what I like, what I really like about this is it's short.

00:16:13 There's a, there's a few things that he focuses on. One of the the first is like, coming up with ideas. And he, like part of his audience is also other trainers. So but I think that more people are trainers than you realize. So maybe you're maybe you actually teach people like Reuven does, or, you know, you have a training gig, but you could teach mentor or lead or coach in other ways just by being the resident Python guy, or girl or woman or whatever, at your company. And when people come to you and ask questions. So one of the some of those things are to come up the list of things to talk about, what questions do people ask you all the time? Those are great things to write talks about maybe what knowledge? What knowledge do you think people should have that they just don't know to ask about? Those are also great topics? And then also, where do you see that people just don't seem to get it. And so somehow, they're not getting some concept. They don't quite get it from whatever they've sought out. Those are also great things. And if, if that if you're still stumped, he says, well check up Stack Overflow, what kind of questions come up there all the time? Those are, those are good things to maybe give a talk about, hey, I got a cheat code for people listening. Okay, what awesome thing did you hear about on Python bytes? That was like new to you. And there's not a target at the conference? I'm serious. Yeah, exactly. You know, rewind a handful episodes and go go through and go, That sounds interesting. And, you know, spend a few hours researching it and come up with a topic, why not? Alright, right. It's me, I want to learn it. And then I could present it, you know, you could test drive these things. Also, at smaller regional conferences, you could test drive them at meetups, you could test drive them as like a YouTube video that you post somewhere, or even a blog post you write like, there's a bunch of let me take a shot at it, and then build some confidence and then submit it to PyCon. US or Europe or whatever. Yeah. And he goes on to talk about using

00:18:10 using an outline. And to it, even if you don't go for a talk, maybe I don't remember if I think PyCon, US does ask for this, but some don't. But even if it's not asked for come up with an outline with times, and that part freaked me out, I'm like, How do I do that. But his example is fairly not scary. It's kind of the bullet points of the sort of stuff you're going to talk about, and how long you intend to talk about it. And this is actually really important. I when I when I finally embraced this and went, I gotta think about this. And I kind of do this hand in hand with this. The next step, the next step, he said, is you don't just need

00:18:52 an outline, you need a summary, and you kind of need a short summary and a long summary, possibly. And that's it, you should include a camera we're rewrite this wrote this down, but you should include what is it? The value that people get, what benefit they'll get from your talk, and what knowledge they'll get, what they'll have when they leave your talk, and how will that help them and think about those and that while you're putting through your your outline together to as to where you want to spend your time. And you know, be paying attention that you do want to have some some wrap up time, possibly. And you might want some introduction time. So include that and think about those times. And then you've got just these little tiny one or two minute one or two or three or four minute segments that you've got to come up with words for. And that's actually a lot easier to deal with than thinking I gotta come up with 25 minutes. So like an example here, it says generate warnings, two minutes. Could you spend two minutes talking about generating warnings? I imagine you could.

00:19:54 Yeah, and if it's important, put Throw, throw some time into it. But the one other thing

00:20:00 So I wanted to highlight on this, I really liked this write up, he also a couple more things. One is submit the same talk to multiple conferences, you can do that. And you don't even it doesn't even have to be new, you could have already submitted, presented it somewhere. And it might already be on YouTube. And you're like, Oh, really? I can do that? Yes, really, you can do that. Some people give talks at multiple conferences, and it's fine, you don't have to come up with a brand new talk for every conference. The other thing is the list of outline the list of topics. My mistake, the first time I gave a talk was I did this, I wait, what are all the things I'd like to talk about? And then I crammed them all into the into one talk. This is not what you want to do. You want to pick like, you know, one focus thing so that you can go at a reasonably comfortable pace, you don't want to be talking 100 miles an hour, or people can't keep up with you. There are some people I'm gonna get me wrong. There's some people that can talk really fast and pack a lot information. And they're really good about it. And it's still entertaining. But I think the average person would be better at trying to go at a little slower pace. Yep. Yeah, totally agree about that. And you know, that could be your like, you could come up with a list of all the things you want to talk about. And then that could be the source for two or three talks. Yeah, I got this too. This is kind of like this all stuff seems about fixtures. So it's had to like five things that are awesome about fixtures you didn't know. And then here's like, why you should care about structuring your to add on or whatever. And if they get rejected, but from every conference that you submitted to, you're still one because you did all that, that work. Just turn it into a like a blog post or, or a YouTube video or something. Yeah, absolutely. A bunch of good feedback from the audience. John out there says a great place to give a talk is that the user group kind of matched exactly the same time they say that, so definitely agree green there. Brandon says, give it a lunch and learn at your company. Great idea. Yeah, that's a really good idea. And casual viewer. Number three, does my team has a show until like meeting on Friday to show off stuff people can talk about, that'd be impactful. Also good place. Yeah, a lot of good ideas. If the venue doesn't exist, you may well be able to create it. Yeah. And you might get you might get promoted because of it. Because you're like, oh, people will know that you're the expert in that company that they didn't know before. It's good to. That's right. That's right. All right, I want to come back to something that I know we talked about before, but a feature of it. So we talked about Sanic when it came out there was Sanic into pronto, and a couple other things. This I Believe predates fast API even. And it was one of the very first high high performance async frameworks for Python. Very cool. I hadn't really been tracking it that much lately. But if you drop over by the

00:22:41 github github.com/sanic-org, but uh, Sanic 16,000 Stars 1500 forks, it's going really strong. I, I totally did not, I have not been tracking it well enough. So this is, this is really fantastic. So cool way to build asynchronous web apps and Python. It's, it claims to be opinionated and flexible. It is the plastic that you build your API's and your web apps out of as you like, rather than being very structured in the way you put stuff together. So if you're looking forward to that good, it's I said super fast. That was its original selling point, and apparently used by millions of people, which is pretty awesome. So what I want to point out here is not Sanic. Exactly, but rather, a new feature that was shared with us by Felix and Felix pointed out that Adam, one of the maintainers, just added this concept of a worker manager into the new version of Sanic. So if you, if you want to run background work, like I want to send an email or I want to send a do other like lots of processing or computational work in the background, it's going to block up not just a single request, but it's going to block up potentially the whole web server, right, you get a bunch of things that are querying tons of data or doing a bunch of computation, then all of a sudden, or even calling other API's, potentially, that could clog up the server, especially if it can't be done asynchronously. So they added this concept of kind of like a lightweight celery type of thing where you can push the work off to it and have it run in the background and manage that. Okay, except for it's just an API inside of Sanic. And it starts a sub process that hangs around and does that background work for you. So it's like you don't have to manage another server. You don't have to set up celery or Redis. And then some worker mechanism to process the messages coming out of there. You just pick the work over to this worker manager and off it goes. Nice. Yeah, that's pretty cool. Cool. Yeah, yeah. And the way that it works is basically you can hook into some lifetime events, like you can use a decorator app dot before server start. And you can go make sure that there's a queue that can be used for the communication, cross that and then you can handle on request, and then when a request comes in, you can like push work over over to it. Anyway, you can even get it to do like some cool

00:25:00 Little printout of like the status of what the workers are up to, and so on. So, anyway, pretty neat. If you need to run asynchronous work, and you're looking at a web framework, you know, maybe check out Sanic. It's got this cool feature. And it's got a lot of nice async and await features as well. Cool.

00:25:16 All right. That's it for our main items, isn't it? I guess it is. Yeah. Before move off this real quick casual viewer says fast API, something similar, called background task. Okay. Yeah, and you can also build those out of your, on your own using like, multiprocessing, or something, but or any IO, or any IO for sure. One of the real challenges of all of those, like roll your own things are usually what happens is you you farm out your web server, so for example, on talk Python training, and we have eight worker processes that are cruising around waiting, and like, as far as they're concerned, they are the website, right? And if all those things start kicking off background work in, they start starting their own processes. It'll be like, why are there 17 worker processes crews around I don't know what's going on. So yeah, it's kind of cool to have something that's little more structured like that. Alright, extras, you said you got some extra tell us about him. Well, stuck on the presentation thing. But I ran across this article called create presentations with from Jupyter Notebooks. And I just wanted to link to it if you if you're thinking about doing a presentation, and you want to possibly just use your Jupyter Notebook. Apparently, it's built in, I didn't know that it was just built in. So this just walks through the built in features of how to so you gotta you've got a Jupyter notebook you walk. But you can even do some markdown, you can do markdown Jupiter anyway, but there's ways to have both code and markdown together with this with IPython display markdown, which is cool. And then it goes through a couple more examples, examples of things. But then there's this drop down, you can just say view, view cell toolbar slideshow, and then you select the select slide for each of your little cells, and they become slides in your presentation. And then you can use,

00:27:09 then you can use the built in NB convert to convert it to presentation. So just nice HTML presentation right there. So that's pretty neat. You can then slide you can say it's a sub slide a fragment, you could skip, you could even make it notes just for like a presentation view that's pretty flexible for per cell in Jupiter as awesome. And then there's ways to either show it by default, it shows the code but you can have a hide the code apparently. And then if you want to be able to instead of doing the command line thing, if you want to toggle back and forth while you're developing it, they're recommending using the Rhys extension. And I tried that I'm like, Is it really this easy? And so I tried it out. And sure enough, it's just I just went through some of the examples. And it's really pretty cool. And with Rhys got, like these examples, and then you can just with rise, you can just select this little, this little icon here, it looks like a graph, and it just enters into slideshow mode. Nice, isn't it? So what happens if you hit space? In that mode? Does it like automatically take you from one to one? Okay, cool. Yeah, very nice. And you can you can do the arrows back and forth and stuff, you can see you kind of it doesn't look as good as the actual presentation at the output. But especially if you're trying to like kind of toggle back and forth to see, isn't it like is my is my stuff too big like right now, I would totally alter this because it looks too, it doesn't look good right now.

00:28:38 But that's kind of what you do with slideshows is you sort of work will work with them until they look at but anyway, so this is something I wanted to share was just this, if you want to try using Jupiter for your presentation, here's a link, kind of maybe take a look at this article. The other thing I wanted to point out as an extra is,

00:28:59 but Python pi test as 7.2 pi to 7.2 released, don't normally like I mean I personally have I'm, like ready to try every new release that comes out. But why I'm bringing this up is there's a couple of things that bid us at work. And I want to if they might bite you, the PI library is now separated from pi tests. So you don't get the PI library by default when you import when you you're installing PI tests. So if you are using the PI library, you just have to make that one of your own requirements. He were cheating and not staging it as a requirement because yeah, it'll always be that way. No, I don't think we were I don't think we were using it at all. But I think we may have declared like, like pi path or something like that. Yeah.

00:29:45 A couple more things that I think is neat. A few releases ago I added the test paths so that you can add import path to your for where like where your source code is and

00:30:00 For this release, they added a shell style wildcard support. So that's pretty cool.

00:30:06 And there's a whole bunch of cool features. So yeah, checkouts pi test if you're up for it. Oh, one of the things. I'm really glad they deprecated knows, I can't remember, I can't remember where it's listed here. But they're, they're not using. So setup this just the keywords setup and teardown, you could define functions, you were able to define function setup and teardown. And those were run automatically. But those were run automatically because they were part of the nose support. So even if you don't know it knows is if you're using those, those are deprecated. So stop using those. There's other ways to do setup and teardown with PI test. And so check that out if you're using that. And I'm in the first edition of the PI test book, I actually talked about setup and teardown. And luckily in the second edition, I took those out. So

00:30:55 cool. Bit of follow up on your Jupiter item here. And Shriner says you can also use this in labs in Jupiter lab, not the old notebook, if you want to use rise live editable presentations that still requires the old notebook theme. Okay. Okay, so you can use Jupiter lab for presentations to awesome. Yeah, yeah, very cool. And then also Brandon points out that background task from when we credited fast API may actually come from starlet for those of you don't know fast API is a layer on top of starlet so a lot of times what people perceive as a fast API feature is actually a starlet feature. And it also entering says it also now the notebooks now warn you

00:31:35 if you return from a test on my desk right now, so warns you've returned from pi dysfunction. This would be an error in PI test eight. Okay. Yeah. Well, yeah, apparently, some people were like returning true or false from their test functions and, and wanting that to like, indicate whether tests passed or failed. Don't do that. Didn't you just parts of the print statements? There? No, it's an exception. If an exception happens. That's a failure. So of course, all right, I got a few extras. And we'll we'll bust out some jokes. These are quick, rich, the colorizing format in awesome tui foundation is great. Now available in PI script. So Oh, Rich. Yeah, you just you can just do rich things and just, you know, print this stuff all out. And guess what it now comes out as like colorized output and HTML, I guess I'm not sure where the the destination is gonna land. But it says repple. So I'm guessing, maybe prints out in the repple. There. Anyway, there's a bunch of notes on how to use rich and pi script. So if you like by script, and you're tracking that project, and you'd like rich, put them together. Also, we talked about YouTube videos, and you could make a talk, you could make a video. So I did a Python 311 in 100 seconds video that I released yesterday, day before I think it was yesterday, actually. Anyway, people can check that out if they've got 100 seconds to spare, and they want to know what's cool about Python 311. And why it's neat. It's fun. links in the show notes there. Alright, ready for some jokes? Yes. Okay. So here's one. It's titled laughter in Linux, but it's about Windows. So you might have to go back aways for people that get this joke. But yeah, let's see, I know you've spent some time in Windows, bring them with you. We think about this. So here's like, sort of a karate master type of scenario. And like the sensei says, just time for you to look inward and start asking yourself the big question, what happened to the ANP? Drive?

00:33:29 Because it's all you see, right? Where do

00:33:33 you make that noise?

00:33:35 Pretty much if it's not a C drive, it makes noise. It's my understanding from my history. It some of them make that sort of a disky noise, other like a CD seeking noise, but there's always a noise associated with a non c drive. I know that's not always true, but it's fun.

00:33:49 All right, other one. This one is not about OSS, and disk but rather databases and it's dating advice. So here's a woman talking to clearly nerdy programmer type, and it says, What do you need for a good relationship? That guy looks are obviously primary keys. Primary Keys.

00:34:11 So bad anyway, that's dude from The IT Crowd. Okay, yeah, I need to watch more TV to fully catch the means don't i?

00:34:19 So yeah, cool. All right. Well, always fun to have you here.

00:34:24 Thanks. Thanks. And thanks, everybody, for showing up an hour early. Really appreciate it. Yeah, absolutely. Try to be the we'll try to stick to that time for a while. And I guess we'll let you know if we do. All right. See y'all later. Thanks.

