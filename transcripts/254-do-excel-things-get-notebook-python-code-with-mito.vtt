
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.360
to you by us over at TalkBython Training, and Brian through his pytest book.


00:00:10.360 --> 00:00:15.480
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.480 --> 00:00:17.340
over at TalkBython Training.


00:00:17.340 --> 00:00:21.080
Visit them via pythonbytes.fm/courses.


00:00:21.080 --> 00:00:25.440
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.440 --> 00:00:28.480
at pythonbytes.fm/pytest.


00:00:28.480 --> 00:00:29.480
Enjoy the episode.


00:00:29.480 --> 00:00:34.480
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:34.480 --> 00:00:39.480
This is episode 254, recorded on October 13th, 2021.


00:00:39.480 --> 00:00:40.480
I'm Michael Kennedy.


00:00:40.480 --> 00:00:41.480
And I'm Brian Okken.


00:00:41.480 --> 00:00:42.480
I'm Mohamed Raza.


00:00:42.480 --> 00:00:44.480
Yeah, hey, Mohamed, welcome.


00:00:44.480 --> 00:00:45.480
It's great to have you here.


00:00:45.480 --> 00:00:46.480
Good to have you on the show.


00:00:46.480 --> 00:00:47.480
Hi, Michael and Brian.


00:00:47.480 --> 00:00:49.480
I'm really excited to be on the show.


00:00:49.480 --> 00:00:50.480
It's been one of my goals.


00:00:50.480 --> 00:00:54.480
Like, I started listening to podcasts when I was in college, back as an undergrad.


00:00:54.480 --> 00:00:55.480
Wow.


00:00:55.480 --> 00:00:58.480
And your podcast, that was one of the reasons I developed a love for Python.


00:00:58.480 --> 00:01:00.760
- That's super amazing.


00:01:00.760 --> 00:01:02.880
Tell people a bit about yourself before we jump into the--


00:01:02.880 --> 00:01:05.500
- I currently work at AWS, Amazon Web Services


00:01:05.500 --> 00:01:07.040
as a professional service consultant.


00:01:07.040 --> 00:01:11.500
So my job is to help our customers in their cloud journey.


00:01:11.500 --> 00:01:14.160
So we basically do help them with our,


00:01:14.160 --> 00:01:17.000
we help them with different cloud services,


00:01:17.000 --> 00:01:19.080
such as if they want to do cloud migration,


00:01:19.080 --> 00:01:21.840
or if they want to put some service on AWS cloud.


00:01:21.840 --> 00:01:24.520
So that's where professional services comes in


00:01:24.520 --> 00:01:27.300
to implement and help them with their cloud journey.


00:01:27.300 --> 00:01:30.020
you must see a lot of different implementations


00:01:30.020 --> 00:01:33.580
and configurations and teams and types of software.


00:01:33.580 --> 00:01:36.100
You get exposed to a lot of things quickly like this, right?


00:01:36.100 --> 00:01:38.300
- Yep, so it's pretty fun job.


00:01:38.300 --> 00:01:41.540
Like you work with different, wide different customers,


00:01:41.540 --> 00:01:43.220
like every customer has a different problem.


00:01:43.220 --> 00:01:46.620
So like you get to touch upon like different problems


00:01:46.620 --> 00:01:49.580
so as a consultant, so it's a really amazing job.


00:01:49.580 --> 00:01:50.420
- Yeah, that's awesome.


00:01:50.420 --> 00:01:52.020
That's one of the things I think,


00:01:52.020 --> 00:01:53.980
for people who are early in their career


00:01:53.980 --> 00:01:56.500
to help them go fast and level up


00:01:56.500 --> 00:01:59.000
is get a lot of exposure to a lot of different things.


00:01:59.000 --> 00:02:01.000
Yep. And I totally agree with you.


00:02:01.000 --> 00:02:03.000
Awesome. Well, I think


00:02:03.000 --> 00:02:06.100
maybe Brian should kick us off with the first item. What do you think, Brian?


00:02:06.100 --> 00:02:08.800
So Python 3.10, we talked about this last week.


00:02:08.800 --> 00:02:12.700
Python 3.10 is out. It came out October 4th, it looks like.


00:02:12.700 --> 00:02:15.700
And I've been using it, and a lot of people have been using it.


00:02:15.700 --> 00:02:17.700
But one of the things we do


00:02:17.700 --> 00:02:20.200
is we update our... with a project.


00:02:20.200 --> 00:02:24.300
If you support a package, you want to make sure to go and change your


00:02:24.300 --> 00:02:28.180
your CI testing to make sure that you're using Python 3.10


00:02:28.180 --> 00:02:30.880
instead of Python 3.10 dev.


00:02:30.880 --> 00:02:33.500
That's what I was testing before.


00:02:33.500 --> 00:02:36.160
But there's an issue.


00:02:36.160 --> 00:02:40.220
Anthony Shaw brought it up on Twitter,


00:02:40.220 --> 00:02:41.860
a bunch of other people did too,


00:02:41.860 --> 00:02:44.740
but I'm grabbing his tweet.


00:02:44.740 --> 00:02:49.220
It says basically, you can use 3.10 on GitHub Actions now,


00:02:49.220 --> 00:02:53.420
but you need to make sure that you quote the 3.10.


00:02:53.420 --> 00:02:55.980
So you don't test on 3.1?


00:02:55.980 --> 00:02:57.980
Yeah, exactly.


00:02:57.980 --> 00:03:00.980
That's insane. The zero at the end matters.


00:03:00.980 --> 00:03:06.300
So I just grabbed one of my projects, I went and changed mine,


00:03:06.300 --> 00:03:10.900
and I just went ahead and put quotes on all of the versions.


00:03:10.900 --> 00:03:14.780
You don't have to do 3.7, 3.8, 3.9, those are fine by themselves.


00:03:14.780 --> 00:03:20.060
But 3.10, if you go from, if I had -dev,


00:03:20.060 --> 00:03:40.580
YAML convert like thinks of it as a string, but as soon as I go to 310, it's 3.1. So yeah, you want to make sure to quote those. That's really it. And that's really what I wanted to cover is to make sure that people change their CI system to be testing with 310. But do it with quotes if you're using YAML.


00:03:40.580 --> 00:03:43.460
Doesn't YAML understand significant digits? Come on.


00:03:43.460 --> 00:03:45.700
(laughing)


00:03:45.700 --> 00:03:47.860
- It's an interesting find though,


00:03:47.860 --> 00:03:50.300
like, yeah, I'm reading a 3.1,


00:03:50.300 --> 00:03:52.540
but it should read as 3.10.


00:03:52.540 --> 00:03:54.540
- Yeah, I mean, I could see how you get there.


00:03:54.540 --> 00:03:55.380
- Yeah.


00:03:55.380 --> 00:03:56.200
- But at the same time,


00:03:56.200 --> 00:03:58.420
if you're talking versions and not just floating points,


00:03:58.420 --> 00:04:00.860
obviously the dots are not, you know,


00:04:00.860 --> 00:04:02.780
not decimal separators,


00:04:02.780 --> 00:04:04.860
they're separating full whole numbers, right?


00:04:04.860 --> 00:04:06.640
Which obviously then the zero matters.


00:04:06.640 --> 00:04:07.480
Interesting.


00:04:07.480 --> 00:04:08.840
That's a good find and good advice.


00:04:08.840 --> 00:04:10.860
I have a quick real-time follow up for you, Brian.


00:04:10.860 --> 00:04:12.180
Remember I had complained


00:04:12.180 --> 00:04:16.260
about not being able to deploy to 3.10 in production.


00:04:16.260 --> 00:04:17.100
- Yeah.


00:04:17.100 --> 00:04:18.260
- Well, guess what?


00:04:18.260 --> 00:04:20.100
This is all 3.10, woo-hoo!


00:04:20.100 --> 00:04:20.940
- Oh, sweet.


00:04:20.940 --> 00:04:22.260
- Yeah, I managed to get it working,


00:04:22.260 --> 00:04:24.740
and MicroWizKey got updated so that it will now work


00:04:24.740 --> 00:04:28.820
on 3.10 install, building a wheel locally on Linux.


00:04:28.820 --> 00:04:31.500
And there was another dependency I couldn't make work,


00:04:31.500 --> 00:04:32.860
but then I realized, oh my gosh,


00:04:32.860 --> 00:04:34.300
I'm not even using this anymore.


00:04:34.300 --> 00:04:36.220
So I just took it out, and then it works.


00:04:36.220 --> 00:04:38.860
So I put it on Talk Python, the podcast page for now,


00:04:38.860 --> 00:04:40.900
and if it doesn't freak out or cause problems,


00:04:40.900 --> 00:04:43.100
and I'll roll out across like talk about training


00:04:43.100 --> 00:04:43.980
and Python bytes and stuff.


00:04:43.980 --> 00:04:46.260
So this is the Guinea pig or the canary out there


00:04:46.260 --> 00:04:48.620
just hanging around, but so far it's perfect.


00:04:48.620 --> 00:04:49.460
- Nice.


00:04:49.460 --> 00:04:52.580
- Yeah, a couple of live stream thoughts here, Sam Morley.


00:04:52.580 --> 00:04:55.740
Hey, Sam says, "Oh my, that is interesting about 3.10."


00:04:55.740 --> 00:04:58.460
And Henry Schreiner, hey Henry,


00:04:58.460 --> 00:05:00.420
Henry and I are gonna be talking on talk Python


00:05:00.420 --> 00:05:01.700
really soon, by the way.


00:05:01.700 --> 00:05:04.420
Many YAML projects choose to accept floats


00:05:04.420 --> 00:05:06.040
and then just convert them to strings,


00:05:06.040 --> 00:05:07.940
not specific to YAML.


00:05:07.940 --> 00:05:10.900
you could disallow floats here if you wrote that,


00:05:10.900 --> 00:05:11.900
if you wrote the action.


00:05:11.900 --> 00:05:12.820
Okay, interesting.


00:05:12.820 --> 00:05:14.020
I didn't realize you could do that.


00:05:14.020 --> 00:05:14.860
Very cool.


00:05:14.860 --> 00:05:15.700
- I didn't know that either.


00:05:15.700 --> 00:05:17.020
- Ah, okay.


00:05:17.020 --> 00:05:19.100
Did you know that Python's popular?


00:05:19.100 --> 00:05:20.260
- Yeah. - Yes.


00:05:20.260 --> 00:05:24.900
- And it has found its way to be a little bit more popular


00:05:24.900 --> 00:05:25.920
than it has been recently.


00:05:25.920 --> 00:05:28.420
So, you know, it continues to grow.


00:05:28.420 --> 00:05:29.740
Brian Skin sent this over.


00:05:29.740 --> 00:05:30.580
Thank you, Brian.


00:05:30.580 --> 00:05:34.020
And the headline here is pretty neat.


00:05:34.020 --> 00:05:37.340
Beating C in Java, Python becomes the most,


00:05:37.340 --> 00:05:39.680
the number one most popular programming language.


00:05:39.680 --> 00:05:40.900
Boom, says Tiobi.


00:05:40.900 --> 00:05:42.940
So the Tiobi index is interesting.


00:05:42.940 --> 00:05:44.380
To me, it feels like a little bit more


00:05:44.380 --> 00:05:46.140
of a lagging indicator.


00:05:46.140 --> 00:05:50.380
And it's also a bit more of a enterprise focused indicator.


00:05:50.380 --> 00:05:55.020
So that's why Java and C have been popular for so long,


00:05:55.020 --> 00:05:57.300
but apparently Python has sort of made its way


00:05:57.300 --> 00:05:59.380
into that world as well.


00:05:59.380 --> 00:06:02.700
And they're quoting this article over here on ZDNet


00:06:02.700 --> 00:06:05.260
and this, the thing I'm linking to.


00:06:05.260 --> 00:06:08.960
And it says, "For the first time in more than 20 years, we have a new leader of the pack.


00:06:08.960 --> 00:06:12.200
The longstanding hegemony of Java and C is over."


00:06:12.200 --> 00:06:15.360
– It's pretty good, right? – It is.


00:06:15.360 --> 00:06:18.300
And I think it's one of the reasons that, like you said,


00:06:18.300 --> 00:06:22.780
the business community is using it a lot more and large companies.


00:06:22.780 --> 00:06:30.480
That might also be why we're seeing the numbers in surveys of Windows users using Python


00:06:30.480 --> 00:06:32.480
staying really high.


00:06:32.480 --> 00:06:34.080
I think maybe it's because of that.


00:06:34.160 --> 00:06:36.400
I think one of the big reasons is like the entry


00:06:36.400 --> 00:06:38.520
to the language, the barrier entry is like pretty easy.


00:06:38.520 --> 00:06:40.040
Like anybody could learn the language


00:06:40.040 --> 00:06:42.160
and get into the language and the ecosystem


00:06:42.160 --> 00:06:43.720
and the libraries around the language.


00:06:43.720 --> 00:06:45.720
It just makes stuff so much easier to do.


00:06:45.720 --> 00:06:48.120
So that's one of the reasons it's at the top.


00:06:48.120 --> 00:06:50.040
I was also reading on Stack Overflow.


00:06:50.040 --> 00:06:53.760
Somebody shared on Reddit that Python has now most number


00:06:53.760 --> 00:06:56.480
of asked questions compared to Java now.


00:06:56.480 --> 00:06:58.920
- How interesting on probably on Stack Overflow.


00:06:58.920 --> 00:06:59.760
- Yeah.


00:06:59.760 --> 00:07:00.580
- Nice.


00:07:00.580 --> 00:07:02.920
- It was somebody shared on Reddit as a discussion.


00:07:02.920 --> 00:07:03.760
- Interesting.


00:07:03.760 --> 00:07:07.960
So if we look here, oh, I want the most popular languages.


00:07:07.960 --> 00:07:08.800
Yeah, this is real time.


00:07:08.800 --> 00:07:09.620
Look at that.


00:07:09.620 --> 00:07:10.960
Oh yeah, it's not even close.


00:07:10.960 --> 00:07:12.320
It's not even close.


00:07:12.320 --> 00:07:13.160
It is.


00:07:13.160 --> 00:07:15.960
I remember seeing that when this was back here,


00:07:15.960 --> 00:07:19.280
back in this area, 2017, and they predicted this


00:07:19.280 --> 00:07:21.000
and they predicted something like a little bit


00:07:21.000 --> 00:07:22.440
even less than reality.


00:07:22.440 --> 00:07:24.280
And people were like, no way, there's no way


00:07:24.280 --> 00:07:25.320
it's gonna just do that.


00:07:25.320 --> 00:07:28.560
And it's even more real, wow, than that.


00:07:28.560 --> 00:07:30.100
So very, very cool.


00:07:30.100 --> 00:07:32.000
So yeah, super neat.


00:07:32.000 --> 00:07:35.260
I'm thinking this is just another sign that,


00:07:35.260 --> 00:07:37.200
you know, focusing on Python is good.


00:07:37.200 --> 00:07:40.240
Mohamed, I think you've touched on a lot of reasons why,


00:07:40.240 --> 00:07:42.540
you know, people get attracted to it because it's easy


00:07:42.540 --> 00:07:43.860
and it's simple and it's clean


00:07:43.860 --> 00:07:45.120
and they just wanna do a small thing.


00:07:45.120 --> 00:07:47.600
But then your small thing, as everyone knows,


00:07:47.600 --> 00:07:50.760
just gets slightly more complicated and more complicated.


00:07:50.760 --> 00:07:52.360
And a lot of times,


00:07:52.360 --> 00:07:54.240
the thing you start with as something simple,


00:07:54.240 --> 00:07:56.960
it can't do, it can't grow to become the thing


00:07:56.960 --> 00:07:58.580
it eventually needs to become.


00:07:58.580 --> 00:08:01.320
But Python allows you to build way more complex software.


00:08:01.320 --> 00:08:02.920
So you don't get ejected into like,


00:08:02.920 --> 00:08:04.540
well, I have to leave because,


00:08:04.540 --> 00:08:06.600
you know, I want to use threads and I'm using VB6


00:08:06.600 --> 00:08:07.560
and it doesn't have threads.


00:08:07.560 --> 00:08:09.660
So I guess I'll go learn C or like,


00:08:09.660 --> 00:08:12.000
there's not that kind of story that happens around Python


00:08:12.000 --> 00:08:12.840
nearly as often.


00:08:12.840 --> 00:08:14.100
So people just stick in it,


00:08:14.100 --> 00:08:16.920
like accumulates like a snowball going downhill.


00:08:16.920 --> 00:08:20.080
- Yeah, so Sam morally brought up that he thinks


00:08:20.080 --> 00:08:21.920
that some of this might be around


00:08:21.920 --> 00:08:25.240
the data science community coming into Python.


00:08:25.240 --> 00:08:26.320
- Oh, I totally agree with that.


00:08:26.320 --> 00:08:27.520
Yeah, yep.


00:08:27.520 --> 00:08:28.600
A very good, very good.


00:08:28.600 --> 00:08:32.960
- Okay, so yeah, Mohamed, I guess we got your item up next.


00:08:32.960 --> 00:08:34.080
It's the first one, right?


00:08:34.080 --> 00:08:37.400
- Yeah, so the item that I chose was newspaper3k.


00:08:37.400 --> 00:08:40.280
Its name is newspaper, but the original name is 3k


00:08:40.280 --> 00:08:42.320
'cause it supports Python 3 now.


00:08:42.320 --> 00:08:43.400
It's an amazing library.


00:08:43.400 --> 00:08:44.640
I use it at work.


00:08:44.640 --> 00:08:47.360
I was helping auditors to generate news reports.


00:08:47.360 --> 00:08:49.560
So what they were doing was like going onto internet,


00:08:49.560 --> 00:08:51.760
finding news reports manually.


00:08:51.760 --> 00:08:53.640
So I was just using,


00:08:53.640 --> 00:08:56.400
my job was to like write a Flask web application


00:08:56.400 --> 00:08:59.440
and using this library and Google RSS feeds


00:08:59.440 --> 00:09:02.160
to find the news articles and then pass those links


00:09:02.160 --> 00:09:04.600
through this library to like generate useful information


00:09:04.600 --> 00:09:07.480
such as the description, the title,


00:09:07.480 --> 00:09:10.420
the length of the article and stuff like that.


00:09:10.420 --> 00:09:13.600
So like it helped me a lot and then it'll help us,


00:09:13.600 --> 00:09:16.720
like it helped me a lot in terms of automating the process


00:09:16.720 --> 00:09:19.040
which people were doing manually where I was working.


00:09:19.040 --> 00:09:20.320
So it's an amazing.


00:09:20.320 --> 00:09:21.160
- Fantastic.


00:09:21.160 --> 00:09:25.220
Yes, so Newspaper 3K, it's like web scraping.


00:09:25.220 --> 00:09:27.500
- Yeah, it's like web-spacing.


00:09:27.500 --> 00:09:31.300
- Yeah, but it has higher level semantics built into it.


00:09:31.300 --> 00:09:34.220
Like you can ask the title, when was it published?


00:09:34.220 --> 00:09:37.540
Not the some sort of e-tag weird thing on the server,


00:09:37.540 --> 00:09:40.060
but like, when did the article declare


00:09:40.060 --> 00:09:41.720
that it was written sort of thing, right?


00:09:41.720 --> 00:09:43.220
And who's the author?


00:09:43.220 --> 00:09:44.340
All sorts of cool stuff in there.


00:09:44.340 --> 00:09:45.660
- And the best thing is like,


00:09:45.660 --> 00:09:47.140
it also does the summary of the article.


00:09:47.140 --> 00:09:50.180
Like it's not to like 100%, right?


00:09:50.180 --> 00:09:52.260
But it's just like extractive summary of the article,


00:09:52.260 --> 00:09:53.660
which is pretty useful.


00:09:53.660 --> 00:09:56.220
Like if you like doing newspaper creation articles


00:09:56.220 --> 00:09:58.620
and stuff like that for like auditors,


00:09:58.620 --> 00:09:59.620
I was doing this way.


00:09:59.620 --> 00:10:01.300
They found it really useful.


00:10:01.300 --> 00:10:02.140
- Yeah.


00:10:02.140 --> 00:10:03.500
- I'm totally gonna use this.


00:10:03.500 --> 00:10:04.340
- Yeah.


00:10:04.340 --> 00:10:05.940
- I'm one of those RSS readers.


00:10:05.940 --> 00:10:07.140
So yeah.


00:10:07.140 --> 00:10:07.980
- Yeah.


00:10:07.980 --> 00:10:08.820
Yeah, super cool.


00:10:08.820 --> 00:10:12.140
So the API is basically you give it a URL


00:10:12.140 --> 00:10:14.100
and you say download and then parse


00:10:14.100 --> 00:10:16.020
and then you have article.authors,


00:10:16.020 --> 00:10:19.860
article.publishedDate, article.text, topImage,


00:10:19.860 --> 00:10:22.620
movies if it contains any embedded video.


00:10:22.620 --> 00:10:24.860
You can even do keyword analysis on it.


00:10:24.860 --> 00:10:27.020
- Keywords and summary, yeah, nice.


00:10:27.020 --> 00:10:28.420
- But you can do all sorts of things


00:10:28.420 --> 00:10:31.100
that might be useful to you.


00:10:31.100 --> 00:10:34.140
- So I can see that this is a cool input


00:10:34.140 --> 00:10:35.980
into other things, right?


00:10:35.980 --> 00:10:39.380
Like not just straight consuming the information,


00:10:39.380 --> 00:10:42.900
but if you're trying to understand trends and stuff, right?


00:10:42.900 --> 00:10:45.940
You could go around and just hit all the main websites


00:10:45.940 --> 00:10:48.060
and go and say, okay, show us the keywords


00:10:48.060 --> 00:10:50.860
and show us anything that's new or that is new


00:10:50.860 --> 00:10:52.900
and also appearing more frequently.


00:10:52.900 --> 00:10:54.880
If I remember correctly with this,


00:10:54.880 --> 00:10:58.500
there's also things you can do where you can follow,


00:10:58.500 --> 00:11:01.060
you can point it at a homepage


00:11:01.060 --> 00:11:02.800
and it'll give you like categories


00:11:02.800 --> 00:11:04.620
and all the articles in the categories.


00:11:04.620 --> 00:11:06.980
Like you could point it at cnn.com or something like that.


00:11:06.980 --> 00:11:08.460
- Yeah, yeah, yeah.


00:11:08.460 --> 00:11:10.820
You can do all sorts of things with this.


00:11:10.820 --> 00:11:12.660
It just makes so much stuff easier


00:11:12.660 --> 00:11:13.980
compared to using BeautifulSoup.


00:11:13.980 --> 00:11:15.820
Like in BeautifulSoup, you like have to do


00:11:15.820 --> 00:11:17.560
and go scrape, rub yourself,


00:11:17.560 --> 00:11:19.940
but like this makes so much stuff easier.


00:11:19.940 --> 00:11:21.940
- Yeah. - It's just an amazing library.


00:11:21.940 --> 00:11:22.940
- Cool. - Awesome.


00:11:22.940 --> 00:11:24.340
A good one for sure.


00:11:24.340 --> 00:11:26.140
All right, Brian, you're up next, I think.


00:11:26.140 --> 00:11:30.260
All right. Well, I'm going to cover something I'm super excited about,


00:11:30.260 --> 00:11:32.260
but it's a little niche.


00:11:32.260 --> 00:11:35.340
Anyway, so, editable install.


00:11:35.340 --> 00:11:39.540
So when you're working with a package, a Python package, and developing it,


00:11:39.540 --> 00:11:44.260
one of the things that I do a lot is I have it open in my editor,


00:11:44.260 --> 00:11:47.900
but I also have a window open where I'm running pytest and stuff.


00:11:47.900 --> 00:11:50.200
So I want the package to be installed,


00:11:50.200 --> 00:11:55.400
and it really helps if it's editable so that when I make changes in the code,


00:11:55.400 --> 00:11:59.800
it instantly appears in my test window or whatever.


00:11:59.800 --> 00:12:03.100
And so pip supports this.


00:12:03.100 --> 00:12:07.700
You say pip install -e and then give it a path to your local project.


00:12:07.700 --> 00:12:11.500
And apparently, you can do Git repos like this too.


00:12:11.500 --> 00:12:13.100
I don't know how that will work.


00:12:13.100 --> 00:12:16.300
Okay, that's interesting because you can do Git for pip.


00:12:16.300 --> 00:12:20.180
And so I guess instead of saying install it as a package installed as edible,


00:12:20.180 --> 00:12:22.580
but does it like clone it locally? What happens there?


00:12:22.580 --> 00:12:26.780
Well, it does. I mean, installing from Git does clone it first,


00:12:26.780 --> 00:12:30.280
but I don't know what the point would be because you're still,


00:12:30.280 --> 00:12:31.740
you're not editing it on Git.


00:12:31.740 --> 00:12:34.340
Anyway, I use it for local directory.


00:12:34.340 --> 00:12:37.780
It's a cool feature, but it didn't.


00:12:37.780 --> 00:12:45.180
And I also like Flit, but Flit uses PyProject.toml and pip installable-e,


00:12:45.180 --> 00:12:52.260
install that she didn't work with with private project until last this week last week really recently


00:12:52.260 --> 00:12:56.920
So a workaround for flit was you would have to install a PTH file


00:12:56.920 --> 00:13:01.980
or with a - and you have to do you have to install flit first then you don't and


00:13:01.980 --> 00:13:06.380
This is a if somebody's if somebody's helping you, but they're not


00:13:06.380 --> 00:13:10.860
They're not used to flit. This is a weird thing to tell them about


00:13:11.300 --> 00:13:13.800
You can do PTH file or sim link,


00:13:13.800 --> 00:13:16.440
but then there came along somebody that said,


00:13:16.440 --> 00:13:18.440
"Hey, a PEP 660 said,


00:13:18.440 --> 00:13:20.720
hey, we should do editable installs for


00:13:20.720 --> 00:13:23.660
project by project automal projects also."


00:13:23.660 --> 00:13:26.720
It requires that the back-end supports this also,


00:13:26.720 --> 00:13:29.720
so there's changes needed to both pip and FLIT.


00:13:29.720 --> 00:13:32.400
However, now we have it.


00:13:32.400 --> 00:13:36.380
Just recently, let's jump back,


00:13:36.380 --> 00:13:39.080
PIP 21.3 came out,


00:13:39.080 --> 00:13:41.040
when was it? October 11th.


00:13:41.040 --> 00:13:45.200
- Yeah, very recently. - And Flit 3.4 came out October 10th.


00:13:45.200 --> 00:13:48.600
And with these two things in place,


00:13:48.600 --> 00:13:52.200
you can now, you have to regenerate your project file


00:13:52.200 --> 00:13:55.200
or change it to use 3.4 for Flit.


00:13:55.200 --> 00:13:58.200
But editable installs work.


00:13:58.200 --> 00:14:00.700
And so I was playing with it. I'm like, this is so cool.


00:14:00.700 --> 00:14:05.000
I love doing this. But I was like, how do I get my


00:14:05.000 --> 00:14:07.700
dependencies in there? So one of the things that


00:14:07.700 --> 00:14:10.200
Flit allows and PyProject.toml allows


00:14:10.200 --> 00:14:12.140
is optional dependencies.


00:14:12.140 --> 00:14:15.140
So the normal dependencies, your project dependencies,


00:14:15.140 --> 00:14:19.340
automatically get installed when you do a install dashi.


00:14:19.340 --> 00:14:21.500
But the optional ones don't.


00:14:21.500 --> 00:14:23.600
So you have to give it a bracket,


00:14:23.600 --> 00:14:25.340
you know, you have to say like,


00:14:25.340 --> 00:14:29.200
install the my thing with the optional like test or doc or something.


00:14:29.200 --> 00:14:32.740
Well, the way you do that with the local directories,


00:14:32.740 --> 00:14:34.540
you have to just make sure you put it in quotes.


00:14:34.540 --> 00:14:35.240
So...


00:14:35.240 --> 00:14:38.700
Quote dot bracket test close bracket close quote.


00:14:38.700 --> 00:14:43.660
Okay, so the obvious not totally obvious, but not bad either.


00:14:43.660 --> 00:14:46.380
So anyway, I'm excited about this a lot.


00:14:46.380 --> 00:14:47.120
Yeah.


00:14:47.120 --> 00:14:48.140
Yeah, that's really cool.


00:14:48.140 --> 00:14:48.920
Good find.


00:14:48.920 --> 00:14:51.740
Uh, let's see, out there follow up for you.


00:14:51.740 --> 00:14:52.380
Muhammad real quick.


00:14:52.380 --> 00:14:55.860
Sam says I still have nightmares of BS four and feed parser.


00:14:55.860 --> 00:14:56.640
Yeah.


00:14:56.640 --> 00:15:01.520
Man, it's really hard to work with BS for BS four is great for what is for, but it's


00:15:01.520 --> 00:15:02.900
like assembly language is great.


00:15:02.900 --> 00:15:04.660
It doesn't mean I should write in it all the time.


00:15:04.660 --> 00:15:05.160
Right?


00:15:05.160 --> 00:15:05.660
I agree.


00:15:05.980 --> 00:15:09.080
And plus, I don't think BS4 does like scraping of dynamic pages.


00:15:09.080 --> 00:15:14.180
For that, you like have to use I forgot the package and Selenium for that.


00:15:14.180 --> 00:15:15.580
Yeah, yeah, you do.


00:15:15.580 --> 00:15:20.480
Okay, so the next one I want to talk about here is pretty cool.


00:15:20.480 --> 00:15:28.180
And it's an unusual project because if you're going to go work on some Python data science,


00:15:28.180 --> 00:15:30.480
you usually want to go do that in notebooks.


00:15:30.480 --> 00:15:34.280
But you might just want to think about it as kind of like an Excel spreadsheet.


00:15:34.280 --> 00:15:35.920
you might wanna walk up to it and go,


00:15:35.920 --> 00:15:37.800
okay, well, let me just see a grid of this.


00:15:37.800 --> 00:15:38.640
I'll filter it this way.


00:15:38.640 --> 00:15:39.940
I'm gonna hide that column.


00:15:39.940 --> 00:15:41.720
I'm gonna like remove,


00:15:41.720 --> 00:15:43.680
you know, only show data with some property


00:15:43.680 --> 00:15:44.800
and then look at it.


00:15:44.800 --> 00:15:46.940
That would be nice if you could visually do that, right?


00:15:46.940 --> 00:15:48.960
So what we've got here,


00:15:48.960 --> 00:15:50.760
this one comes to us from,


00:15:50.760 --> 00:15:54.320
let me make sure to give attribution from Tomas Rolo.


00:15:54.320 --> 00:15:55.560
Thank you for sending that in.


00:15:55.560 --> 00:15:56.960
So it's this thing called Mido.


00:15:56.960 --> 00:15:58.600
And Mido is a spreadsheet


00:15:58.600 --> 00:16:01.320
that helps you complete your Python analysis.


00:16:01.320 --> 00:16:04.020
What you do is you create the Mido sheet,


00:16:04.020 --> 00:16:06.360
which is like an embedded Excel thing,


00:16:06.360 --> 00:16:09.420
like thing or Google Sheets thing into your notebook,


00:16:09.420 --> 00:16:10.260
you play around with that.


00:16:10.260 --> 00:16:12.960
And then the cell below, it writes the code.


00:16:12.960 --> 00:16:14.720
So let me see if I can show you an example here.


00:16:14.720 --> 00:16:17.200
So there's this spreadsheet up at the top.


00:16:17.200 --> 00:16:18.280
And as you interact with it,


00:16:18.280 --> 00:16:20.680
you can see there's this cell down here that says,


00:16:20.680 --> 00:16:22.240
import pandas as PD,


00:16:22.240 --> 00:16:24.680
Netflix titles equals PD.read CSV.


00:16:24.680 --> 00:16:26.560
And it gives it a file because you click the button


00:16:26.560 --> 00:16:30.400
and said, open CSV for your data source in that spreadsheet.


00:16:30.400 --> 00:16:33.600
And then they said, I want to, what did they say?


00:16:33.600 --> 00:16:36.840
They remove some of the columns like rating and type and so on,


00:16:36.840 --> 00:16:40.120
and then create a pivot table off of that.


00:16:40.120 --> 00:16:42.920
And it just writes all the Python code for you below.


00:16:42.920 --> 00:16:43.520
Yeah, I think--


00:16:43.520 --> 00:16:44.400
Right in the notebook.


00:16:44.400 --> 00:16:46.280
I kind of really like this library.


00:16:46.280 --> 00:16:50.280
It's going to make a lot of stuff easy for people who are just doing data analysis.


00:16:50.280 --> 00:16:53.480
Because what they do most of the time is they're browsing Stack Overflow


00:16:53.480 --> 00:16:59.040
to find the right answer to solve their problem.


00:16:59.040 --> 00:17:01.560
So this is going to save them a lot of time.


00:17:01.560 --> 00:17:02.280
I totally agree.


00:17:02.280 --> 00:17:04.840
And if you go and play with it, you'll see a section that says,


00:17:04.840 --> 00:17:06.600
"Mido code start, do not edit.


00:17:06.600 --> 00:17:08.560
Mido code end, do not edit."


00:17:08.560 --> 00:17:11.040
A totally reasonable use case for this,


00:17:11.040 --> 00:17:13.480
which might not be what Mido themselves recommend


00:17:13.480 --> 00:17:15.600
because they want to promote their tool


00:17:15.600 --> 00:17:17.560
and sort of be part of the story.


00:17:17.560 --> 00:17:21.160
But a reasonable thing to do would be to embed this,


00:17:21.160 --> 00:17:23.240
play around with it till you get just the right thing,


00:17:23.240 --> 00:17:25.840
and then strip out the Mido bits


00:17:25.840 --> 00:17:29.040
and just leave the fragments that it wrote in there.


00:17:29.040 --> 00:17:30.920
- Yeah, that would be amazing though.


00:17:30.920 --> 00:17:33.280
- Yeah, yeah, I mean, you don't have to tell anybody,


00:17:33.280 --> 00:17:34.120
he's just read you to do it.


00:17:34.120 --> 00:17:36.840
- Yeah, yeah, no, that would be amazing.


00:17:36.840 --> 00:17:40.700
- Yeah, and it even does really cool comments on the section


00:17:40.700 --> 00:17:42.320
so it puts it all into one cell, right?


00:17:42.320 --> 00:17:43.720
Instead of a whole bunch of cells,


00:17:43.720 --> 00:17:45.880
which I think is reasonable.


00:17:45.880 --> 00:17:47.920
But it does, like the comments that it writes are,


00:17:47.920 --> 00:17:50.720
imported Netflix title CSV,


00:17:50.720 --> 00:17:54.940
pivoted Netflix title CSV into data frame two,


00:17:54.940 --> 00:17:56.320
flattened the column headers,


00:17:56.320 --> 00:17:58.560
reset the column name and indexes.


00:17:58.560 --> 00:18:00.280
Like those are meaningful comments, right?


00:18:00.280 --> 00:18:02.840
This is pretty nice, actually, what it generates.


00:18:02.840 --> 00:18:06.060
It's not horrible code that you would run away from.


00:18:06.060 --> 00:18:06.900
- That's cool.


00:18:06.900 --> 00:18:07.720
- Isn't that neat?


00:18:07.720 --> 00:18:09.420
- So people who are really familiar with spreadsheets


00:18:09.420 --> 00:18:12.780
can kind of ease into data analysis.


00:18:12.780 --> 00:18:14.140
- Yes, exactly.


00:18:14.140 --> 00:18:16.380
- And they can do really easy tasks,


00:18:16.380 --> 00:18:17.820
like if they want to filter out data,


00:18:17.820 --> 00:18:19.620
instead of going out on the internet


00:18:19.620 --> 00:18:22.180
and finding out how to use Pandas to filter out data,


00:18:22.180 --> 00:18:24.060
they can directly use Mito for that.


00:18:24.060 --> 00:18:26.360
So it's going to save them a lot of time on that.


00:18:26.360 --> 00:18:27.200
- I agree.


00:18:27.200 --> 00:18:29.300
I could see myself using this, no doubt.


00:18:29.300 --> 00:18:31.620
I think pandas is great, but I don't know it super well.


00:18:31.620 --> 00:18:35.220
And if I know, like, I kind of want to do this thing, but I don't really know how


00:18:35.220 --> 00:18:36.640
like select, select to do that.


00:18:36.640 --> 00:18:36.940
Yeah.


00:18:36.940 --> 00:18:37.660
Yeah.


00:18:37.660 --> 00:18:39.780
That's, that's the thing about pandas.


00:18:39.780 --> 00:18:43.060
Like pandas is amazing, but there's like so much stuff in pandas that


00:18:43.060 --> 00:18:44.500
you don't know top of your head.


00:18:44.500 --> 00:18:48.140
So you have to be like searching the documentation, like


00:18:48.140 --> 00:18:49.820
Google stack overflow for that.


00:18:49.820 --> 00:18:52.500
And I can see this library being really useful though.


00:18:52.500 --> 00:18:55.580
Like for that specific reason, like you want to do quick analysis,


00:18:55.580 --> 00:18:58.540
you use Mito for that and boom, you have the code.


00:18:58.700 --> 00:19:00.040
write down generate it.


00:19:00.040 --> 00:19:00.880
Yeah, super cool.


00:19:00.880 --> 00:19:04.700
The other thing worth pointing out is you don't have to start your notebook this way.


00:19:04.700 --> 00:19:06.920
You can actually hand it an existing data frame.


00:19:06.920 --> 00:19:08.880
So you could do your work down until you get


00:19:08.880 --> 00:19:11.500
some data frame generated from who knows where


00:19:11.500 --> 00:19:14.220
and then hand that off to Mido and then have it write the


00:19:14.220 --> 00:19:16.600
you know, the next fragment of code that you're going to write.


00:19:16.600 --> 00:19:17.980
So I think this is neat.


00:19:17.980 --> 00:19:19.980
I could totally see myself using it.


00:19:19.980 --> 00:19:21.980
There's a cool tutorial you can go through


00:19:21.980 --> 00:19:25.360
but I recommend you watch the data slicing with Mido 2


00:19:25.360 --> 00:19:27.240
video that's right at the top of that.


00:19:27.240 --> 00:19:28.760
It's like, I don't know, a couple of minutes.


00:19:28.760 --> 00:19:29.600
How long is it?


00:19:29.600 --> 00:19:30.840
It's six and a half minutes.


00:19:30.840 --> 00:19:31.840
It'll give you a really good sense


00:19:31.840 --> 00:19:33.080
of what's happening there.


00:19:33.080 --> 00:19:34.480
The other thing worth pointing out


00:19:34.480 --> 00:19:36.240
is when you see plans at the top,


00:19:36.240 --> 00:19:37.860
that means it costs money.


00:19:37.860 --> 00:19:41.400
But there's a individual one


00:19:41.400 --> 00:19:43.440
that's just totally free forever.


00:19:43.440 --> 00:19:44.800
Works with JupyterLab two and three.


00:19:44.800 --> 00:19:46.360
But if you want like team support,


00:19:46.360 --> 00:19:47.400
there's a paid thing.


00:19:47.400 --> 00:19:48.840
And given that they're creating this


00:19:48.840 --> 00:19:49.760
and giving out to the world,


00:19:49.760 --> 00:19:50.820
it seems fair enough.


00:19:50.820 --> 00:19:51.800
It's something you can plug in.


00:19:51.800 --> 00:19:54.100
You don't depend massively upon it.


00:19:54.100 --> 00:19:55.680
Like I said, you could even like use it


00:19:55.680 --> 00:19:56.520
to generate your code


00:19:56.520 --> 00:19:58.420
and then take it back out if you want.


00:19:58.420 --> 00:19:59.980
- Yeah. - So pretty cool.


00:19:59.980 --> 00:20:03.620
Props to Mido at the team, that's pretty nice.


00:20:03.620 --> 00:20:05.740
Brian, real-time follow-up here


00:20:05.740 --> 00:20:07.760
from Henry out in the audience.


00:20:07.760 --> 00:20:09.980
Editable and star installs aren't niche,


00:20:09.980 --> 00:20:12.700
but since we got editable installs


00:20:12.700 --> 00:20:17.500
for set up CFG-only projects in pip 21.1,


00:20:17.500 --> 00:20:20.380
it's now just supported for arbitrary build backends


00:20:20.380 --> 00:20:22.180
in pip 21.3.


00:20:22.180 --> 00:20:24.100
- Yeah. - Awesome, thanks for the extra info.


00:20:24.100 --> 00:20:28.560
Also, ZDocs says edible installs.


00:20:28.560 --> 00:20:30.420
(laughing)


00:20:30.420 --> 00:20:32.900
- We probably said editable.


00:20:32.900 --> 00:20:34.720
Edible, when we say editable.


00:20:34.720 --> 00:20:35.560
- Editable.


00:20:35.560 --> 00:20:37.780
(laughing)


00:20:37.780 --> 00:20:39.100
- Indeed, indeed.


00:20:39.100 --> 00:20:40.820
All right, let's see.


00:20:40.820 --> 00:20:43.500
So, Mohamed, you got yours.


00:20:43.500 --> 00:20:44.420
You're next, right?


00:20:44.420 --> 00:20:45.260
- Yep.


00:20:45.260 --> 00:20:46.880
So I have this library called Troposwaker.


00:20:46.880 --> 00:20:48.980
It's an amazing library and helps you generate


00:20:48.980 --> 00:20:51.420
CloudFormation templates, writing Python.


00:20:51.420 --> 00:20:53.720
So I do this on my job a lot.


00:20:53.720 --> 00:20:56.320
Like I work with DevOps people writing CloudFormation templates.


00:20:56.320 --> 00:20:58.820
And sometimes it's hard to write CloudFormation templates


00:20:58.820 --> 00:21:01.220
because of the formatting part in YAML.


00:21:01.220 --> 00:21:03.980
YAML can get messy, like you might mess up the format


00:21:03.980 --> 00:21:06.380
and then your file won't even run and then you


00:21:06.380 --> 00:21:08.220
be like hunting down where did I


00:21:08.220 --> 00:21:12.320
add an extra space. So this library solves a specific


00:21:12.320 --> 00:21:15.220
problem like helping you write


00:21:15.220 --> 00:21:18.820
templates using Python language. So like this is an amazing library.


00:21:18.820 --> 00:21:22.420
If you like writing a lot of CloudFormation template, I would definitely recommend using this.


00:21:22.420 --> 00:21:26.060
I see, so normally use an AWS cloud formation JSON.


00:21:26.060 --> 00:21:34.860
Yeah, most people use JSON and some people like, so it's like, it's up to you, like, it's, you can either write in JSON or write in like, yaml.


00:21:34.860 --> 00:21:41.740
But let's say you're writing in JSON and like, say you mess up the format, like, let's say you miss up a bracket or comma somewhere, then you might be like,


00:21:41.740 --> 00:21:48.460
like, if you don't have the right linter, then you might be like, hunting down the file, looking for like, where did I miss the comma to fix this? So like,


00:21:48.460 --> 00:21:53.620
When you like having large templates, it gets harder to like, I would say, debug them.


00:21:53.620 --> 00:21:54.420
Yeah.


00:21:54.420 --> 00:21:57.620
Another thing that's nice is JSON is static, right?


00:21:57.620 --> 00:21:58.980
But Python code executes.


00:21:58.980 --> 00:22:01.780
So you could like loop over stuff and say, I'm going to need 10 of these.


00:22:01.780 --> 00:22:06.340
So let's call it this one, you know, one, two, three, you know, machine one, machine two, machine three or whatever, right?


00:22:06.340 --> 00:22:08.340
Yeah, I was going to actually point that out.


00:22:08.340 --> 00:22:09.980
But like, thank you for pointing that out.


00:22:09.980 --> 00:22:15.180
Like I was going to say, like, you can actually like leverage the power of Python language, like,


00:22:15.180 --> 00:22:19.180
like let's say you need 10 subnets instead of writing 10 subnets in JSON,


00:22:19.180 --> 00:22:22.180
you could just iterate and then produce like 10 subnets.


00:22:22.180 --> 00:22:24.180
Yeah, exactly. That's awesome.


00:22:24.180 --> 00:22:27.180
Yeah, it just makes stuff so much easier. Yeah.


00:22:27.180 --> 00:22:31.180
Yeah. You know, you hear all the time with cloud stuff, infrastructure as code or...


00:22:31.180 --> 00:22:32.180
Yeah.


00:22:32.180 --> 00:22:35.180
You know, that kind of stuff. And this just, it's like another layer, right?


00:22:35.180 --> 00:22:37.180
Yeah. No, I agree. I agree.


00:22:37.180 --> 00:22:39.180
Yeah. Very cool.


00:22:39.180 --> 00:22:41.180
Brian, do you guys do anything with cloud stuff in your world?


00:22:41.180 --> 00:22:43.180
No.


00:22:43.180 --> 00:22:47.540
It's all hardware, all behind the scenes.


00:22:47.540 --> 00:22:49.140
Well, I mean, we use them.


00:22:49.140 --> 00:22:50.940
We've got a lot of servers and stuff,


00:22:50.940 --> 00:22:53.340
and we've got a lot of services running, but they're all


00:22:53.340 --> 00:22:56.220
internal, we don't use a lot of cloud services.


00:22:56.220 --> 00:22:59.020
Some things are easing up a little bit


00:22:59.020 --> 00:23:00.780
that we're using because


00:23:00.780 --> 00:23:02.540
there's a lot of things that are just


00:23:02.540 --> 00:23:05.580
so much easier when you go into the open cloud, but


00:23:05.580 --> 00:23:07.340
there's security issues also.


00:23:07.340 --> 00:23:09.100
Yeah, for sure.


00:23:09.100 --> 00:23:12.620
All right, awesome. Well, another good one for people doing AWS stuff.


00:23:12.620 --> 00:23:16.940
There's also the AWS cloud SDK or something like that.


00:23:16.940 --> 00:23:17.900
Yeah, cloud SDK.


00:23:17.900 --> 00:23:20.620
What's the relationship of these two things?


00:23:20.620 --> 00:23:23.340
It's like pretty similar, but like, if you like,


00:23:23.340 --> 00:23:26.060
it also has support for TypeScript, like it's,


00:23:26.060 --> 00:23:27.580
it also has support for Python and TypeScript,


00:23:27.580 --> 00:23:29.580
but like, it's more like a personal preference.


00:23:29.580 --> 00:23:30.940
So like, I prefer this library


00:23:30.940 --> 00:23:33.180
because it's pretty much supported in Python.


00:23:33.180 --> 00:23:35.660
Like it, from the start, it was built for Python.


00:23:35.660 --> 00:23:40.060
So that's why like, I like this library more than AWS cloud CDKs.


00:23:40.060 --> 00:23:42.860
But they both do the same job basically.


00:23:42.860 --> 00:23:45.780
The only missing part is like what cloud


00:23:45.780 --> 00:23:48.060
whenever the cloud CDK generates a template for you,


00:23:48.060 --> 00:23:49.820
it also allows you to deploy


00:23:49.820 --> 00:23:51.820
directly using the CDKs.


00:23:51.820 --> 00:23:53.620
But what Troposphere does,


00:23:53.620 --> 00:23:55.180
it allows you to generate the template,


00:23:55.180 --> 00:23:57.180
but it doesn't like allow you to like


00:23:57.180 --> 00:23:59.460
deploy it directly on the cloud.


00:23:59.460 --> 00:24:01.300
So like you basically have to


00:24:01.300 --> 00:24:03.580
take the template and put it on to CloudFormation


00:24:03.580 --> 00:24:05.100
to deploy the resources.


00:24:05.100 --> 00:24:06.380
Yeah, that seems reasonable.


00:24:06.380 --> 00:24:08.260
You know, we could store those


00:24:08.260 --> 00:24:10.560
in version control and stuff like that.


00:24:10.560 --> 00:24:13.460
Like here is what we did to change our cloud setup


00:24:13.460 --> 00:24:15.160
and here it is in version control, right?


00:24:15.160 --> 00:24:15.660
Yeah.


00:24:15.660 --> 00:24:16.360
Nice.


00:24:16.360 --> 00:24:19.760
Well, I think that brings us to our extras, Brian.


00:24:19.760 --> 00:24:20.560
Is that right?


00:24:20.560 --> 00:24:21.860
I guess so. Yeah.


00:24:21.860 --> 00:24:23.060
Yeah, I think so.


00:24:23.060 --> 00:24:24.660
You got anything you want to share with folks?


00:24:24.660 --> 00:24:29.360
Just that the PyCon 2022 site is there now.


00:24:29.360 --> 00:24:31.160
You can't sign up yet, but there's


00:24:31.160 --> 00:24:32.760
the 2022 site.


00:24:32.760 --> 00:24:36.260
I've seen some Salt Lake City mountains there.


00:24:36.260 --> 00:24:38.660
Yeah, I'm so excited to go to Salt Lake City.


00:24:38.660 --> 00:24:40.820
I assume you're going, hopefully.


00:24:40.820 --> 00:24:42.460
Hopefully, if I can.


00:24:42.460 --> 00:24:45.260
Yeah, I definitely have plans too.


00:24:45.260 --> 00:24:47.820
I can't wait to see everybody in person again.


00:24:47.820 --> 00:24:50.060
Yeah, it's so interesting to think about


00:24:50.060 --> 00:24:53.180
where we are with conferences and stuff.


00:24:53.180 --> 00:24:55.460
So I was just at Pi Bay,


00:24:55.460 --> 00:24:57.300
which is really cool.


00:24:57.300 --> 00:25:00.620
And I'll go and pull up that on the screen here.


00:25:00.620 --> 00:25:03.380
Like this, this is where the Pi Bay conference was held,


00:25:03.380 --> 00:25:08.180
like literally in this, in this outdoor food cart area where there's a bunch of cabanas,


00:25:08.180 --> 00:25:12.820
then each cabana had its own TV and its audio video feed. So you could be in groups of like


00:25:12.820 --> 00:25:17.780
six or seven outside, but there were hundreds of people there, right, which is really cool.


00:25:17.780 --> 00:25:22.660
And I think that that's kind of a template for, for going forward for a lot of things


00:25:22.660 --> 00:25:26.100
happening these days. I've actually invited Grace, who was one of the people who helped


00:25:26.100 --> 00:25:30.740
put this on, on the show. So maybe we'll have her tell us more about this later, but I don't know


00:25:30.740 --> 00:25:33.620
I don't know how this works into an event as big as PyCon


00:25:33.620 --> 00:25:35.540
or as big as any of those, right?


00:25:35.540 --> 00:25:36.380
- Yeah.


00:25:36.380 --> 00:25:38.260
- I mean, you gotta have a really big outdoor space.


00:25:38.260 --> 00:25:40.580
Would you be awesome, maybe like a theme park?


00:25:40.580 --> 00:25:43.140
Like I'm gonna watch this one from the roller coaster.


00:25:43.140 --> 00:25:45.740
(laughing)


00:25:45.740 --> 00:25:46.980
Yeah, awesome.


00:25:46.980 --> 00:25:49.220
Yeah, so Jose out there says,


00:25:49.220 --> 00:25:50.780
"Looking forward to attending my first PyCon."


00:25:50.780 --> 00:25:52.460
Yeah, it's super fun.


00:25:52.460 --> 00:25:54.820
And Teddy, hey Teddy says, "Whoop, whoop."


00:25:54.820 --> 00:25:56.140
For the PyCon announcement.


00:25:56.140 --> 00:25:56.980
Yeah, that's great.


00:25:56.980 --> 00:25:58.860
- How about you, any extras?


00:25:58.860 --> 00:25:59.700
- You know what?


00:25:59.700 --> 00:26:04.820
any until I did. I actually wanted to just point out this tweet that I saw you put out here about


00:26:04.820 --> 00:26:12.740
um oh I think I just saw the tweet in the morning yeah about Pi Env yeah as uh having a challenge


00:26:12.740 --> 00:26:18.420
for Windows users and if you make that the core part of your tutorial then you're like starting


00:26:18.420 --> 00:26:25.300
out putting Windows users who represent what 45 of the developers or something on the back foot


00:26:25.300 --> 00:26:27.540
on your tutorial. So yeah, what do you think?


00:26:27.540 --> 00:26:34.660
Well, it was just like a comment I saw a tutorial and I was like, why is this? I mean, that's not the default way to


00:26:34.660 --> 00:26:38.980
install Python. So I put this out there and it kind of blew up a little bit.


00:26:38.980 --> 00:26:48.180
So yeah, exactly. Yeah, it's got like 121 likes. So anyway, I think that that's an interesting thing to add. Mohamed. You got any extras as well before we


00:26:48.180 --> 00:26:52.180
get to the next thing. So my extra is like how to learn Unix.


00:26:52.180 --> 00:26:54.280
So I read this article a long time ago,


00:26:54.280 --> 00:26:57.060
but it's an amazing article for especially people


00:26:57.060 --> 00:27:01.300
who are getting to Linux world and learning command line.


00:27:01.300 --> 00:27:05.800
So it talks about how you can use tools like using man pages


00:27:05.800 --> 00:27:08.000
and help flags with the tool.


00:27:08.000 --> 00:27:10.000
So it gives you info and insights


00:27:10.000 --> 00:27:11.840
about how do you actually use the tool.


00:27:11.840 --> 00:27:14.640
And exploring wikis and Stack Overflow questions.


00:27:14.640 --> 00:27:17.080
I think it was an amazing article for beginners


00:27:17.080 --> 00:27:19.880
who want to, we're just getting into command line


00:27:19.880 --> 00:27:21.280
or Linux world.


00:27:21.280 --> 00:27:22.120
- That's cool.


00:27:22.120 --> 00:27:26.000
I find, I found the Linux command line,


00:27:26.000 --> 00:27:27.160
macOS a little bit less


00:27:27.160 --> 00:27:28.600
'cause there's often an alternative,


00:27:28.600 --> 00:27:31.940
but certainly the Linux where the sole access to it


00:27:31.940 --> 00:27:33.760
was through an SSH.


00:27:33.760 --> 00:27:36.320
I found it intimidating when I first got into it.


00:27:36.320 --> 00:27:38.480
- No, I actually got into Linux


00:27:38.480 --> 00:27:40.440
right after my first semester of college.


00:27:40.440 --> 00:27:42.180
I was just trying it out as fun.


00:27:42.180 --> 00:27:43.880
And when I discovered command line,


00:27:43.880 --> 00:27:46.420
I was like, wow, you can do so much in command line.


00:27:46.420 --> 00:27:48.040
And that rest is history.


00:27:48.040 --> 00:27:49.560
Like I've been using Linux for like,


00:27:49.560 --> 00:27:51.080
I would say five years now.


00:27:51.080 --> 00:27:52.920
- Right now I'm recently switched to macOS


00:27:52.920 --> 00:27:53.760
because of my work


00:27:53.760 --> 00:27:55.800
and I'm having hard time managing Windows now.


00:27:55.800 --> 00:27:58.360
- I guess I had trouble switching to PCs


00:27:58.360 --> 00:28:02.440
because I was in Solaris when I was in college.


00:28:02.440 --> 00:28:03.260
- Oh, interesting.


00:28:03.260 --> 00:28:04.640
I remember walking by the Solaris going,


00:28:04.640 --> 00:28:05.840
oh, those are different.


00:28:05.840 --> 00:28:08.120
(laughing)


00:28:08.120 --> 00:28:08.960
Very interesting.


00:28:08.960 --> 00:28:09.780
Yeah, cool.


00:28:09.780 --> 00:28:10.620
But now this will be super helpful,


00:28:10.620 --> 00:28:12.120
especially to a lot of folks out there


00:28:12.120 --> 00:28:13.200
who don't work with a lot.


00:28:13.200 --> 00:28:15.000
I mean, now I'm totally comfortable with Linux,


00:28:15.000 --> 00:28:17.240
but I remember the learning experience.


00:28:17.240 --> 00:28:19.160
So I'm sure this will help others as well.


00:28:19.160 --> 00:28:20.120
Nice, all right.


00:28:20.120 --> 00:28:23.040
Well, I believe it is time for a joke.


00:28:23.040 --> 00:28:25.880
And speaking of real conferences,


00:28:25.880 --> 00:28:29.300
this is something that we've done before at the PyCons.


00:28:29.300 --> 00:28:31.600
We did this at PyCon in Portland


00:28:31.600 --> 00:28:33.920
with the Portland Art Museum there.


00:28:33.920 --> 00:28:34.880
It was really fun.


00:28:34.880 --> 00:28:38.600
And it's the classic programmer paintings.


00:28:38.600 --> 00:28:39.440
Remember these, Brian?


00:28:39.440 --> 00:28:43.880
Yeah, so the idea is you take a legitimate, historical,


00:28:43.880 --> 00:28:46.960
maybe 400-year-old piece of fine art,


00:28:46.960 --> 00:28:49.520
and then you ignore the actual name


00:28:49.520 --> 00:28:53.640
and you put your own sort of techie interpretation upon it.


00:28:53.640 --> 00:28:58.640
So here, this one, we've got this balloon


00:28:58.640 --> 00:29:03.280
taking off into like a dark, cloudy red sky


00:29:03.280 --> 00:29:06.260
and two wolves just like sort of forlorn watching it go.


00:29:06.260 --> 00:29:08.800
The ground is kind of on fire, but it's also snowy.


00:29:08.800 --> 00:29:10.540
I don't really understand that.


00:29:10.540 --> 00:29:13.000
But this is some proper painting


00:29:13.000 --> 00:29:14.600
that who knows what it is, right?


00:29:14.600 --> 00:29:16.120
But if you look at the title,


00:29:16.120 --> 00:29:17.800
- Oh wow.


00:29:17.800 --> 00:29:19.480
Alphabet Cancels Loon, right?


00:29:19.480 --> 00:29:21.600
Loon was their project where they'd put balloons up


00:29:21.600 --> 00:29:23.240
over places without much internet


00:29:23.240 --> 00:29:24.920
and that would beam down internet.


00:29:24.920 --> 00:29:27.160
So here's like the final Loon balloon


00:29:27.160 --> 00:29:29.560
going off into the smoky sky.


00:29:29.560 --> 00:29:34.480
It's in Zdzislaw Bezinski, 1979,


00:29:34.480 --> 00:29:37.200
oil on Masonite, beautiful.


00:29:37.200 --> 00:29:38.160
Alphabet Cancels Loon.


00:29:38.160 --> 00:29:41.720
So we used to go around to the art museum there


00:29:41.720 --> 00:29:43.640
and we would like, at the conference,


00:29:43.640 --> 00:29:44.840
we would have like a dinner there or something.


00:29:44.840 --> 00:29:50.040
and we just go around and like, try to one up each other on doing this to like real paintings.


00:29:50.040 --> 00:29:54.680
It was fun. But this whole classic programmer paintings.com endless joy right there.


00:29:54.680 --> 00:29:58.840
I'm definitely gonna check these guys out.


00:29:58.840 --> 00:30:03.320
Yeah, you can spend a long time going through it's been around for a while. So it's good stuff.


00:30:03.320 --> 00:30:07.320
I'm chuckling at some right now. I gotta stop looking at it.


00:30:07.320 --> 00:30:11.400
Yeah, exactly. I'm strongly resisting the urge to just scroll through them.


00:30:11.400 --> 00:30:13.800
We're doing a show. I'll do it later.


00:30:13.800 --> 00:30:17.080
Thanks, Michael. Yeah, yeah, you bet, Brian. Thanks for being here as always. And Mohammed,


00:30:17.080 --> 00:30:21.880
thank you for joining us. It's been great. And it was a pleasure to be here. Yeah, thank you.


00:30:21.880 --> 00:30:24.600
You're welcome. Bye, everyone out there. Bye, everyone.


00:30:24.600 --> 00:30:29.240
Thanks for listening to Python bites. Follow the show on Twitter via at Python bites.


00:30:29.240 --> 00:30:35.240
That's Python bites as in b y t s. Get the full show notes over at Python by set FM.


00:30:35.240 --> 00:30:40.360
If you have a news item we should cover just visit Python by set FM and click submit in the nav bar.


00:30:40.360 --> 00:30:44.440
we're always on the lookout for sharing something cool. If you want to join us for the live recording,


00:30:44.440 --> 00:30:49.780
just visit the website and click "Live Stream" to get notified of when our next episode goes live.


00:30:49.780 --> 00:30:56.520
That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aukin,


00:30:56.520 --> 00:31:01.480
this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

