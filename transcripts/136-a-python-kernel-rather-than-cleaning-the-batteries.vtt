
00:00:00.000 --> 00:00:05.920
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode


00:00:05.920 --> 00:00:08.620
136 recorded June 19th


00:00:08.620 --> 00:00:14.660
2019 I'm Michael Kennedy and I'm Brian Okken and this episode is brought to you by data dog check them out at Python bytes out


00:00:14.660 --> 00:00:20.980
Of them slash data dog get a cool shirt more on that later Brian. How you been? I am doing well good good same here


00:00:20.980 --> 00:00:26.580
Rolling into summer kids are home working from home is now chaos, but it's it's alright. Yeah


00:00:27.100 --> 00:00:28.860
It's a little cooler today too, it's nice.


00:00:28.860 --> 00:00:31.740
>> Yeah, it's beautiful. You've got some magic trick


00:00:31.740 --> 00:00:33.980
lined up for us for this first thing? What's going on here?


00:00:33.980 --> 00:00:36.340
>> Well, actually, I think it's just going to


00:00:36.340 --> 00:00:39.860
be me trying to pronounce a French word.


00:00:39.860 --> 00:00:43.100
I think, I know it's not voila.


00:00:43.100 --> 00:00:46.140
Voila? Do you pronounce the V? I don't know.


00:00:46.140 --> 00:00:47.380
>> Voila? I think so.


00:00:47.380 --> 00:00:47.820
>> Voila?


00:00:47.820 --> 00:00:49.220
>> Viola. No.


00:00:49.220 --> 00:00:53.260
>> No. Voila is a new project.


00:00:53.260 --> 00:00:55.020
It's a newly announced project


00:00:55.020 --> 00:00:56.820
from the Jupyter Notebook people.


00:00:56.820 --> 00:01:01.820
So the idea is Jupyter Notebooks in standalone applications or dashboards.


00:01:01.820 --> 00:01:08.820
So people that are used to working with notebooks and they want to share what they found with other people


00:01:08.820 --> 00:01:13.820
and you want to have people be able to interact with it and have it be a little bit interactive


00:01:13.820 --> 00:01:17.820
but not allow people to change your code. How do you do that?


00:01:17.820 --> 00:01:20.820
That's where Velocity, voila, steps in.


00:01:20.820 --> 00:01:24.820
It's a pretty cool project. I was playing around with it a little bit.


00:01:24.820 --> 00:01:27.460
You can have custom or at least reading about it,


00:01:27.460 --> 00:01:32.420
custom widgets to set up your page and even like templates and grid layouts.


00:01:32.420 --> 00:01:33.860
But you don't have to be a web developer.


00:01:33.860 --> 00:01:35.060
It's like drag and drop stuff.


00:01:35.060 --> 00:01:35.540
>> This is cool.


00:01:35.540 --> 00:01:41.380
>> I like the idea of presenting the interactive plots and graphs and stuff,


00:01:41.380 --> 00:01:47.220
and also being able to have people be able to run the code and do selectors and things,


00:01:47.220 --> 00:01:48.980
but not let people change the code.


00:01:48.980 --> 00:01:49.940
So that's pretty cool.


00:01:49.940 --> 00:01:53.460
>> Yeah. You just take your notebook and you just turn it into a web application.


00:01:53.460 --> 00:01:55.160
That's pretty awesome.


00:01:55.160 --> 00:02:01.860
And it has nice restrictions like does not permit execution of arbitrary code by consumers of the dashboard.


00:02:01.860 --> 00:02:06.960
It's language agnostic, so you could have C++ code up there in addition to Python or whatever.


00:02:06.960 --> 00:02:08.560
And you know, Jupyter does. That's pretty sweet.


00:02:08.560 --> 00:02:14.060
Yeah, I could see a lot of people using this, even for dashboards for like peeking into databases and stuff.


00:02:14.060 --> 00:02:16.460
Nice. So voila, and you have a website.


00:02:16.460 --> 00:02:16.960
Voila.


00:02:16.960 --> 00:02:22.160
Ha, I have a Jupyter Notebook and here it is. Cool. Awesome.


00:02:22.160 --> 00:02:24.840
So I don't think we covered this.


00:02:24.840 --> 00:02:29.500
I kind of tried to sort of intentionally didn't want to go too far into it


00:02:29.500 --> 00:02:31.340
because it didn't seem super productive.


00:02:31.340 --> 00:02:35.420
But there was a presentation back at the Language Summit called Python,


00:02:35.420 --> 00:02:39.020
something like cleaning up Python's dead batteries or something to that effect.


00:02:39.020 --> 00:02:39.940
Did you catch that?


00:02:39.940 --> 00:02:40.180
Yeah.


00:02:40.180 --> 00:02:45.800
So the idea was there are some modules and parts of Python that are outdated.


00:02:45.800 --> 00:02:52.060
Their existence puts pressure on the core developers in ways that doesn't


00:02:52.060 --> 00:02:53.940
and let them focus on what they need to be doing.


00:02:53.940 --> 00:02:57.020
It also makes it super hard for people to contribute.


00:02:57.020 --> 00:02:59.900
Like, for example, there's a color system module


00:02:59.900 --> 00:03:02.220
in Python in the standard library.


00:03:02.220 --> 00:03:03.540
I'm gonna pick on this thing a lot


00:03:03.540 --> 00:03:05.020
during this little segment.


00:03:05.020 --> 00:03:07.700
And it has the very important purpose


00:03:07.700 --> 00:03:12.500
of converting CSS colors between coordinate systems.


00:03:12.500 --> 00:03:16.540
Super important to have that in the standard library, right?


00:03:16.540 --> 00:03:17.660
I don't know.


00:03:17.660 --> 00:03:18.820
Maybe, maybe not.


00:03:18.820 --> 00:03:21.060
At one point, you know, Python standard library


00:03:21.060 --> 00:03:24.060
was really the goal of it was to come with everything you need


00:03:24.060 --> 00:03:27.700
because installing extra stuff, like downloading it,


00:03:27.700 --> 00:03:29.740
getting it, running the setup and all that,


00:03:29.740 --> 00:03:31.300
was really tricky.


00:03:31.300 --> 00:03:34.060
Now everything's pip install one away.


00:03:34.060 --> 00:03:36.660
So it looks a little bit weird.


00:03:36.660 --> 00:03:39.420
And if, say, you wanted to fix or change the color system


00:03:39.420 --> 00:03:40.900
module, it's not the same as if you


00:03:40.900 --> 00:03:43.260
want to go contribute to some random thing on GitHub.


00:03:43.260 --> 00:03:44.780
No, you've got to be a core developer.


00:03:44.780 --> 00:03:47.380
There's a lot of steps that go through this.


00:03:47.380 --> 00:03:50.880
It only ships every 16 months, or sorry, 18 months


00:03:50.880 --> 00:03:53.800
for new content or new things, changes.


00:03:53.800 --> 00:03:56.700
So how much do you really care to make a contribution


00:03:56.700 --> 00:03:58.200
or a change to ColorSys?


00:03:58.200 --> 00:04:00.640
You probably not very much for all those reasons, right?


00:04:00.640 --> 00:04:04.120
It's slow on purpose, it's hard to make changes to,


00:04:04.120 --> 00:04:04.980
and so on.


00:04:04.980 --> 00:04:07.680
But the problem is like it has things like ColorSys


00:04:07.680 --> 00:04:09.300
that probably don't make a lot of sense


00:04:09.300 --> 00:04:10.520
to be there anymore.


00:04:10.520 --> 00:04:15.100
So Amber Brown and some other folks


00:04:15.100 --> 00:04:17.340
were making a case that maybe we should take


00:04:17.340 --> 00:04:19.340
some stuff away and it was pretty controversial.


00:04:19.340 --> 00:04:21.820
There was some like heated disagreements


00:04:21.820 --> 00:04:23.380
at the actual presentation and stuff.


00:04:23.380 --> 00:04:26.160
And I don't care about that, I don't wanna go into it.


00:04:26.160 --> 00:04:29.500
But that approach was, we have stuff in Python


00:04:29.500 --> 00:04:31.020
that maybe shouldn't be there.


00:04:31.020 --> 00:04:34.140
Let's talk about what we can take out.


00:04:34.140 --> 00:04:37.900
And Glyph wrote a cool article called


00:04:37.900 --> 00:04:40.500
Toward a Kernel Python.


00:04:40.500 --> 00:04:41.700
And I've talked about this before.


00:04:41.700 --> 00:04:43.200
I don't know if I talked about it on Python Bytes


00:04:43.200 --> 00:04:45.340
or on Talk Python.


00:04:45.340 --> 00:04:50.340
But I think there should be some kind of subset of Python


00:04:50.340 --> 00:04:53.760
that is defined to be like the minimum subset of Python


00:04:53.760 --> 00:04:56.000
that is guaranteed to be everywhere.


00:04:56.000 --> 00:04:58.560
So for example, if you work with PyPy,


00:04:58.560 --> 00:05:02.300
you get one variant of mostly Python.


00:05:02.300 --> 00:05:04.480
If you work with CircuitPython or MicroPython,


00:05:04.480 --> 00:05:06.860
you get another variant of mostly Python,


00:05:06.860 --> 00:05:08.180
but not all of it, right?


00:05:08.180 --> 00:05:12.540
If you work with Brython or some of the JavaScript versions


00:05:12.540 --> 00:05:15.960
that run in the browsers, again, similar subset,


00:05:15.960 --> 00:05:17.480
but not the same.


00:05:17.480 --> 00:05:21.560
So if we had like a smaller, sort of essential,


00:05:21.560 --> 00:05:24.840
Python standard language definition and library


00:05:24.840 --> 00:05:27.360
that was like, I don't know what's the right number,


00:05:27.360 --> 00:05:29.840
but a smaller amount that you could guarantee


00:05:29.840 --> 00:05:32.480
was identical across all those platforms,


00:05:32.480 --> 00:05:34.560
and then opt in to bringing the other stuff in.


00:05:34.560 --> 00:05:37.240
So Glyph's main idea was like, could we say,


00:05:37.240 --> 00:05:39.520
instead of like, take what we have and hack away


00:05:39.520 --> 00:05:41.200
a few things that don't make sense,


00:05:41.200 --> 00:05:45.360
rather trim it down to this kernel, to this essence.


00:05:45.360 --> 00:05:46.740
And then, I don't know,


00:05:46.740 --> 00:05:49.020
pip install the rest of the libraries


00:05:49.020 --> 00:05:49.900
or something like that.


00:05:49.900 --> 00:05:51.340
The rest of the standard library,


00:05:51.340 --> 00:05:52.560
you want the networking stack,


00:05:52.560 --> 00:05:53.840
you pip install networking.


00:05:53.840 --> 00:05:55.540
I don't know, like I'm just making up parts


00:05:55.540 --> 00:05:57.780
that we would do that for.


00:05:57.780 --> 00:05:58.620
But that was his idea,


00:05:58.620 --> 00:06:01.060
that basically there's a pep, PEP 594,


00:06:01.060 --> 00:06:04.200
that's about removing obviously obsolete and dead stuff


00:06:04.200 --> 00:06:05.820
from the standard library.


00:06:05.820 --> 00:06:07.260
And that's all well and good,


00:06:07.260 --> 00:06:09.380
but it actually turns out


00:06:09.380 --> 00:06:12.700
that having things like color sys in the standard library


00:06:12.700 --> 00:06:17.060
mean that the core devs have to deal with a bunch of stuff.


00:06:17.060 --> 00:06:18.620
So he talks, he runs Twisted.


00:06:18.620 --> 00:06:20.580
So he talks about like how is Twisted doing


00:06:20.580 --> 00:06:21.420
on keeping up with PRs.


00:06:21.420 --> 00:06:23.700
And let's look at CPython over there.


00:06:23.700 --> 00:06:28.380
And they have 429 tickets currently awaiting review


00:06:28.380 --> 00:06:29.500
over on GitHub.


00:06:29.500 --> 00:06:30.820
I think it's in GitHub.


00:06:30.820 --> 00:06:33.260
It says the oldest PR awaiting review


00:06:33.260 --> 00:06:37.020
hasn't been touched since February 2nd, 2018,


00:06:37.020 --> 00:06:45.420
is almost 500 days old. But when you look at it, the PRs, there's 25 PRs that are out


00:06:45.420 --> 00:06:50.500
on address or whatever, 14 were about the standard library and 10 were about CPython.


00:06:50.500 --> 00:06:54.980
So why are the core devs having to deal with this stuff when there's typically a replacement


00:06:54.980 --> 00:06:59.580
like there is a built in HTTP library, but people just use requests or AI or HTTP or


00:06:59.580 --> 00:07:04.380
whatever, right? Like there's there should be a way to maybe create this essence of it


00:07:04.380 --> 00:07:06.220
and then bring more in.


00:07:06.220 --> 00:07:07.060
What do you think?


00:07:07.060 --> 00:07:08.780
- I definitely think there's an idea there.


00:07:08.780 --> 00:07:12.180
Like you said, there's kind of like a Venn diagram.


00:07:12.180 --> 00:07:15.420
There's a common set that most people need,


00:07:15.420 --> 00:07:18.400
or you'll need for lots of different domains.


00:07:18.400 --> 00:07:21.800
But then for a web domain, for web stuff,


00:07:21.800 --> 00:07:23.140
you're gonna need different stuff


00:07:23.140 --> 00:07:26.060
than for like working with audio files,


00:07:26.060 --> 00:07:28.420
or working with text files,


00:07:28.420 --> 00:07:30.500
or the different problem domains


00:07:30.500 --> 00:07:32.200
are gonna use different bits,


00:07:32.200 --> 00:07:33.980
and you don't need everything else.


00:07:33.980 --> 00:07:42.780
Interesting idea. The install, the how do beginners install stuff is an interesting, how do you deal with that though?


00:07:42.780 --> 00:07:46.860
Yeah, absolutely. And he does address that and I do think it's, it is a challenge.


00:07:46.860 --> 00:07:54.700
He says, look, probably the stuff you go get when you download off python.org or you brew install Python,


00:07:54.700 --> 00:07:57.500
that probably should just be everything, right?


00:07:57.500 --> 00:08:00.620
but it doesn't mean that it can't be comprised


00:08:00.620 --> 00:08:03.460
of smaller things that potentially ship


00:08:03.460 --> 00:08:04.620
on a different schedule.


00:08:04.620 --> 00:08:06.460
- If you're gonna install like Visual Studio


00:08:06.460 --> 00:08:08.580
or something like that, you always have options


00:08:08.580 --> 00:08:10.180
of do you wanna install this stuff


00:08:10.180 --> 00:08:11.460
and this other stuff also?


00:08:11.460 --> 00:08:12.300
- Yeah.


00:08:12.300 --> 00:08:14.300
- You can opt out and we could do something similar


00:08:14.300 --> 00:08:16.660
to that with Python of like, do you wanna install


00:08:16.660 --> 00:08:20.460
the web stuff, do you wanna install the audio stuff


00:08:20.460 --> 00:08:21.300
and whatever.


00:08:21.300 --> 00:08:24.140
- Right, you could have these full distributions


00:08:24.140 --> 00:08:26.020
that you install, but if you look at say Linux,


00:08:26.020 --> 00:08:29.620
For example, if you go to an empty Ubuntu machine


00:08:29.620 --> 00:08:31.540
and you try to create a virtual environment,


00:08:31.540 --> 00:08:33.820
depending on the version you have, it may not work.


00:08:33.820 --> 00:08:35.460
You may get an error that says,


00:08:35.460 --> 00:08:40.140
"You need to apt install Python 3-VENV."


00:08:40.140 --> 00:08:42.420
It's like, wait, that part of Python wasn't shipped?


00:08:42.420 --> 00:08:43.700
Okay, well, we'll do that.


00:08:43.700 --> 00:08:45.260
Or if you try to even pip install something,


00:08:45.260 --> 00:08:47.540
it might say, "You might have to apt install


00:08:47.540 --> 00:08:49.620
"Python 3-PIP," right?


00:08:49.620 --> 00:08:51.920
So they've already done this on Linux.


00:08:51.920 --> 00:08:54.060
There's other examples as well.


00:08:54.060 --> 00:08:58.140
For example, the .NET Core in the Microsoft space


00:08:58.140 --> 00:08:59.740
basically is like this, right?


00:08:59.740 --> 00:09:02.740
Like there's, you use their package manager system


00:09:02.740 --> 00:09:04.760
to bring in like significant parts


00:09:04.760 --> 00:09:07.140
of what is their standard library.


00:09:07.140 --> 00:09:08.620
I do think it's a problem for beginners.


00:09:08.620 --> 00:09:10.380
I think it makes it harder, right?


00:09:10.380 --> 00:09:14.100
It's like saying, "Oh, we just run JavaScript over in Node


00:09:14.100 --> 00:09:16.740
"and it's easy," but then you see all this require JS


00:09:16.740 --> 00:09:17.820
and all these like patterns.


00:09:17.820 --> 00:09:19.420
You're like, "Why is this so hard?


00:09:19.420 --> 00:09:20.800
"What happened to print hello world?"


00:09:20.800 --> 00:09:22.940
You know, like I do think there's a danger,


00:09:22.940 --> 00:09:26.640
but if the standard way that people get Python is


00:09:26.640 --> 00:09:27.780
they get this big bundle,


00:09:27.780 --> 00:09:31.600
but maybe those bundles are not all maintained


00:09:31.600 --> 00:09:34.640
by the same team, which is the core developers, right?


00:09:34.640 --> 00:09:36.760
Maybe if they could be broken apart


00:09:36.760 --> 00:09:39.120
and then brought back together through something like Pip,


00:09:39.120 --> 00:09:41.120
and then more importantly, upgraded,


00:09:41.120 --> 00:09:43.280
like sooner than every 18 months,


00:09:43.280 --> 00:09:44.480
that seems like a good idea.


00:09:44.480 --> 00:09:48.120
And this seems like a way better approach than saying,


00:09:48.120 --> 00:09:50.720
well, what can we hack out of the system?


00:09:50.720 --> 00:09:52.320
Could we hack out Colorsys?


00:09:52.320 --> 00:09:53.640
Yes or no, let's talk about that.


00:09:53.640 --> 00:09:54.760
- Well, right, and also just,


00:09:54.760 --> 00:09:56.760
there's some stuff like Color says,


00:09:56.760 --> 00:09:59.020
it's surprising that it needs to be there.


00:09:59.020 --> 00:10:01.200
And then there's stuff that's not in the core


00:10:01.200 --> 00:10:02.880
or in the standard library that,


00:10:02.880 --> 00:10:03.960
like, why is that not there?


00:10:03.960 --> 00:10:06.280
Like, set up tools in wheel.


00:10:06.280 --> 00:10:08.480
I'm always surprised that I have to pip install wheel


00:10:08.480 --> 00:10:09.320
to create a wheel.


00:10:09.320 --> 00:10:10.160
- Yeah, and speaking of pip,


00:10:10.160 --> 00:10:13.520
Cliff did mention that when you get Python,


00:10:13.520 --> 00:10:14.640
it comes with pip.


00:10:14.640 --> 00:10:18.160
Like, installing Python lets you type pip install a thing,


00:10:18.160 --> 00:10:20.560
but pip is actually maintained by a different group


00:10:20.560 --> 00:10:22.360
and shipped on a different cycle, right?


00:10:22.360 --> 00:10:25.160
That's PyPA, not the core developers, for example.


00:10:25.160 --> 00:10:27.120
So it's like that a little bit,


00:10:27.120 --> 00:10:30.200
but if it was more like that, you could make a change.


00:10:30.200 --> 00:10:32.080
You could join the team for, I don't know,


00:10:32.080 --> 00:10:34.840
the networking or color system, whatever you want,


00:10:34.840 --> 00:10:37.680
work on that and maybe push changes more rapidly


00:10:37.680 --> 00:10:40.480
than the core CPython runtime.


00:10:40.480 --> 00:10:42.200
- Right, we could do something like the PyPA,


00:10:42.200 --> 00:10:45.200
but do like the Python standard library authority


00:10:45.200 --> 00:10:46.280
or something like that.


00:10:46.280 --> 00:10:47.200
- Yeah, exactly.


00:10:47.200 --> 00:10:48.200
It's a pretty interesting idea


00:10:48.200 --> 00:10:50.240
and it definitely seems better than,


00:10:50.240 --> 00:10:52.720
It seems more like the outcome will be better


00:10:52.720 --> 00:10:55.240
than trying to just hack away at a few dead batteries,


00:10:55.240 --> 00:10:56.080
if you will.


00:10:56.080 --> 00:10:57.080
- Yep. - Cool.


00:10:57.080 --> 00:10:58.320
This next one that you're talking about,


00:10:58.320 --> 00:11:00.200
I recently ran into this as an error.


00:11:00.200 --> 00:11:02.000
I'm like, "Wait, what did I type wrong?"


00:11:02.000 --> 00:11:03.940
And then I realized, and this might be a cool feature.


00:11:03.940 --> 00:11:05.240
Why don't you tell people about this?


00:11:05.240 --> 00:11:07.580
- Like for instance, with pytest,


00:11:07.580 --> 00:11:09.780
it comes as a standalone script.


00:11:09.780 --> 00:11:12.980
You can say, you can just write pytest on the command line,


00:11:12.980 --> 00:11:16.280
but you can also say Python-M pytest.


00:11:16.280 --> 00:11:19.160
And a lot of pip installable things, you can do that.


00:11:19.160 --> 00:11:24.040
You can say -m the thing name and it works.


00:11:24.040 --> 00:11:25.760
I didn't know how to do this, actually.


00:11:25.760 --> 00:11:27.440
I never really thought, how do I do this?


00:11:27.440 --> 00:11:28.980
And how do I figure it out?


00:11:28.980 --> 00:11:33.320
And all it is to put a dunder main file in your project.


00:11:33.320 --> 00:11:35.080
I didn't know it was that easy.


00:11:35.080 --> 00:11:37.800
So I'm linking to an article that pretty much says


00:11:37.800 --> 00:11:42.400
we use the convention of if dunder name equals dunder main,


00:11:42.400 --> 00:11:44.740
then run the main program or something.


00:11:44.740 --> 00:11:48.740
But you can use the dunder main.py file itself


00:11:48.740 --> 00:11:52.540
in your project and that -m thing just works.


00:11:52.540 --> 00:11:53.500
- That's pretty simple, right?


00:11:53.500 --> 00:11:55.220
- I'm like, it can't really be that easy.


00:11:55.220 --> 00:11:58.660
So this morning I did a little flit project,


00:11:58.660 --> 00:12:02.460
a flit based project, and then threw a dunder main in there


00:12:02.460 --> 00:12:05.540
with just a print statement and installed it


00:12:05.540 --> 00:12:06.500
and went somewhere else.


00:12:06.500 --> 00:12:08.740
And sure enough, it works just awesome.


00:12:08.740 --> 00:12:09.580
So neat.


00:12:09.580 --> 00:12:10.740
- Oh, that's super cool.


00:12:10.740 --> 00:12:13.740
Yeah, I ran across this by accidentally saying Python


00:12:13.740 --> 00:12:18.540
and saying run a directory instead of a file.


00:12:18.540 --> 00:12:22.340
Like, oh, it said it couldn't find dunder main.py.


00:12:22.340 --> 00:12:24.840
I'm like, wait, it was looking for it?


00:12:24.840 --> 00:12:25.680
That's pretty cool.


00:12:25.680 --> 00:12:26.640
Maybe there's something to be done here.


00:12:26.640 --> 00:12:27.480
Yeah, that's great.


00:12:27.480 --> 00:12:28.300
I'm glad you pointed it out.


00:12:28.300 --> 00:12:29.480
- If you have a dunder main in there,


00:12:29.480 --> 00:12:33.920
you can just say Python and the directory name and it works?


00:12:33.920 --> 00:12:35.160
- I have not verified that,


00:12:35.160 --> 00:12:37.880
but it seems like the error message


00:12:37.880 --> 00:12:39.440
would indicate that it might work, yeah.


00:12:39.440 --> 00:12:40.520
I mean, it was like a full path.


00:12:40.520 --> 00:12:43.080
It wasn't just a standard directory either.


00:12:43.080 --> 00:12:44.720
- Okay. - Yeah, so pretty cool.


00:12:44.720 --> 00:12:45.540
- Neat. - Yeah.


00:12:45.540 --> 00:12:46.600
- I don't know how useful it is to people,


00:12:46.600 --> 00:12:49.000
but I'll run across it every once in a while.


00:12:49.000 --> 00:12:51.240
- Yeah, that and entry points, always really nice.


00:12:51.240 --> 00:12:53.980
Now, speaking of nice, Datadog is supporting our show


00:12:53.980 --> 00:12:55.080
and they got us some nice products,


00:12:55.080 --> 00:12:56.920
so let me tell you about them really quickly.


00:12:56.920 --> 00:13:00.840
And so, they're a cloud-scale monitoring platform


00:13:00.840 --> 00:13:02.920
that unifies metrics, logs, traces,


00:13:02.920 --> 00:13:04.120
all that kind of stuff,


00:13:04.120 --> 00:13:06.840
monitors your Python apps in real time,


00:13:06.840 --> 00:13:10.320
helps you find bottlenecks with detailed flame graphs,


00:13:10.320 --> 00:13:14.400
trace requests as they cross over service boundaries.


00:13:14.400 --> 00:13:15.840
All right, so if you have microservices,


00:13:15.840 --> 00:13:17.840
you're talking to database or queuing, things like that.


00:13:17.840 --> 00:13:21.840
Plus, it also does automatic instrumentation


00:13:21.840 --> 00:13:24.840
for popular frameworks like Django, AsyncIO, and Flask.


00:13:24.840 --> 00:13:27.840
So you can quickly get started without too much setup.


00:13:27.840 --> 00:13:30.840
So, get started today. There's a 14-day free trial


00:13:30.840 --> 00:13:32.840
at pythonbytes.fm/datadog.


00:13:32.840 --> 00:13:35.840
And you get a cool Datadog t-shirt, which is always fun.


00:13:35.840 --> 00:13:36.840
Thanks to Datadog.


00:13:36.840 --> 00:13:39.840
Mine's a nice purple color, and my kids always comment


00:13:39.840 --> 00:13:41.840
when I wear it, they like the shirt.


00:13:41.840 --> 00:13:42.840
Yeah, I love it.


00:13:42.840 --> 00:13:43.840
So this next one I want to talk about,


00:13:43.840 --> 00:13:47.600
The name might sound a little derogatory, but it's not really meant that way.


00:13:47.600 --> 00:13:50.600
Maybe simplistic sounds better.


00:13:50.600 --> 00:13:53.800
But the thing I want to talk about is this article by Chris Wellens entitled


00:13:53.800 --> 00:13:56.800
"The CPython Byte Compiler is Dumb."


00:13:56.800 --> 00:14:01.800
Simplistic is maybe better, but what you might not know,


00:14:01.800 --> 00:14:07.800
depending on how much you dig into it, is there's excruciatingly small amounts of optimization


00:14:07.800 --> 00:14:10.800
when CPython runs your code.


00:14:10.800 --> 00:14:14.200
So there's a compilation step, actually, right?


00:14:14.200 --> 00:14:17.200
The bytecode and compiler talks about some kind of compilation.


00:14:17.200 --> 00:14:18.820
So when you run your code, you probably


00:14:18.820 --> 00:14:21.040
see the dunder pycache folders.


00:14:21.040 --> 00:14:22.580
And in there, you have the pyc files.


00:14:22.580 --> 00:14:25.080
So that's taking your source code, turn it into bytecode,


00:14:25.080 --> 00:14:25.800
and put it there.


00:14:25.800 --> 00:14:27.540
But then instead of, say, compiling that


00:14:27.540 --> 00:14:29.800
onto machine instructions, the interpreter


00:14:29.800 --> 00:14:33.280
takes that, feeds it through this ginormous switch


00:14:33.280 --> 00:14:36.800
statement that's like 3,000 lines long in the CPython


00:14:36.800 --> 00:14:37.720
runtime.


00:14:37.720 --> 00:14:39.680
And it just goes, well, what case is this?


00:14:39.680 --> 00:14:40.880
So we're jumping to that, right?


00:14:40.880 --> 00:14:41.720
It's pretty wild.


00:14:41.720 --> 00:14:44.000
There's a file called cval.c, check it out.


00:14:44.000 --> 00:14:47.280
However, there's very little optimization


00:14:47.280 --> 00:14:48.120
that happens here.


00:14:48.120 --> 00:14:50.840
So Chris decided to compare this against Lua


00:14:50.840 --> 00:14:53.400
and one other similar, maybe Ruby,


00:14:53.400 --> 00:14:54.760
I can't remember what the other one


00:14:54.760 --> 00:14:56.080
that he compared it against was.


00:14:56.080 --> 00:14:57.280
But he talked about, you know,


00:14:57.280 --> 00:15:00.240
like if I write this code, what happens to it?


00:15:00.240 --> 00:15:02.240
So there are optimizations like,


00:15:02.240 --> 00:15:04.560
what are called peephole optimizations


00:15:04.560 --> 00:15:08.220
and a few memory allocation optimizations in CPython,


00:15:08.220 --> 00:15:10.380
but they're pretty limited.


00:15:10.380 --> 00:15:14.580
So if you look at some examples,


00:15:14.580 --> 00:15:16.700
like let's take an example where we have a function.


00:15:16.700 --> 00:15:18.940
It's called foo, defines two variables,


00:15:18.940 --> 00:15:22.740
X equals zero, Y equals one, return X.


00:15:22.740 --> 00:15:23.940
That seems simple, right, Bray?


00:15:23.940 --> 00:15:26.300
- Yeah, except for Y is not needed, but yeah, sure.


00:15:26.300 --> 00:15:29.500
- Exactly, so when you see that, if Y is unused,


00:15:29.500 --> 00:15:31.180
and this is not making any change,


00:15:31.180 --> 00:15:32.980
it's just literally creating a variable


00:15:32.980 --> 00:15:35.060
which is effectively an entry in,


00:15:35.060 --> 00:15:38.660
you know, like a module name lookup or a locals lookup, right?


00:15:38.660 --> 00:15:41.540
Like, why does that need to be done?


00:15:41.540 --> 00:15:43.500
Doesn't seem like a whole lot's happening.


00:15:43.500 --> 00:15:46.460
So for example, the CPython byte code compiler


00:15:46.460 --> 00:15:47.940
could just go, well, forget that line.


00:15:47.940 --> 00:15:51.780
And it could say, well, x never changes its value.


00:15:51.780 --> 00:15:54.860
So why don't we just inline that to say,


00:15:54.860 --> 00:15:58.740
basically, the whole function is return zero, right?


00:15:58.740 --> 00:16:01.760
Inline the x, drop the y, it's good to go.


00:16:01.760 --> 00:16:04.620
But if you go and throw that into the disassembler,


00:16:04.620 --> 00:16:07.260
you'll see that no, that's not what happens.


00:16:07.260 --> 00:16:10.340
It literally just takes it step by step by step.


00:16:10.340 --> 00:16:11.180
- Okay. - Wild, right?


00:16:11.180 --> 00:16:13.180
So it loads the constant, it stores it


00:16:13.180 --> 00:16:14.260
into a field called x.


00:16:14.260 --> 00:16:17.060
It loads the constant, it stores it into a field called y.


00:16:17.060 --> 00:16:20.100
Then it loads the constant again, the value for x again,


00:16:20.100 --> 00:16:23.300
and then it calls returnVal as the bytecode instructions.


00:16:23.300 --> 00:16:26.660
Right, instead of just load constant zero, return value.


00:16:26.660 --> 00:16:28.980
Right, like it could be a lot quicker.


00:16:28.980 --> 00:16:31.160
So I find that this is,


00:16:31.160 --> 00:16:32.620
it's honestly a little bit surprising.


00:16:32.620 --> 00:16:35.860
I mean, Python is 25 years old, and it


00:16:35.860 --> 00:16:37.820
doesn't take steps like this.


00:16:37.820 --> 00:16:41.260
Now, Darius Beacon did point out that Guido himself


00:16:41.260 --> 00:16:45.780
said Python is about having the simplest, dumbest compiler


00:16:45.780 --> 00:16:46.740
imaginable.


00:16:46.740 --> 00:16:49.100
And there's some links to that, some references there


00:16:49.100 --> 00:16:50.480
if you want to go check that out.


00:16:50.480 --> 00:16:54.040
So I think maybe it's by design to keep it simple.


00:16:54.040 --> 00:16:56.620
It's easy for people to contribute to.


00:16:56.620 --> 00:16:59.540
But it certainly seems like there could be a layer


00:16:59.540 --> 00:17:03.860
between parsing the bytecode and executing the bytecode


00:17:03.860 --> 00:17:06.700
that says, we're not running in a debugger


00:17:06.700 --> 00:17:09.080
or something like that, so let's go crazy


00:17:09.080 --> 00:17:12.380
and just convert stuff like that to return zero.


00:17:12.380 --> 00:17:15.340
There's also a bunch of other interesting examples in there.


00:17:15.340 --> 00:17:16.900
This is just one that's really obvious


00:17:16.900 --> 00:17:18.700
that's good for talking, and I pulled out.


00:17:18.700 --> 00:17:22.460
- And optimization levels is something that CS people


00:17:22.460 --> 00:17:24.500
have been doing with compilers for a long time.


00:17:24.500 --> 00:17:27.300
So it's not like we'd have to invent it ourselves.


00:17:27.300 --> 00:17:28.580
- Right.


00:17:28.580 --> 00:17:30.260
- Yeah, C has had plenty of it.


00:17:30.260 --> 00:17:32.780
C#, the JIT compiled languages,


00:17:32.780 --> 00:17:35.380
their JIT compiler is a place where a lot of that happens.


00:17:35.380 --> 00:17:36.380
Things like this, right?


00:17:36.380 --> 00:17:38.100
- Did you say that there was a comparison


00:17:38.100 --> 00:17:39.700
to other languages?


00:17:39.700 --> 00:17:42.580
Do other languages do more optimization?


00:17:42.580 --> 00:17:43.780
- I know, not really.


00:17:43.780 --> 00:17:45.340
(laughing)


00:17:45.340 --> 00:17:47.040
They're all pretty much the same.


00:17:47.040 --> 00:17:49.700
For better or worse, they're all the same.


00:17:49.700 --> 00:17:51.500
So there's an interesting point that he makes


00:17:51.500 --> 00:17:53.100
that I do wanna just comment on real quick.


00:17:53.100 --> 00:17:55.500
It says, "So the consensus seems to be


00:17:55.500 --> 00:17:58.980
that if you want or need better performance,


00:17:58.980 --> 00:18:00.960
don't use Python.


00:18:00.960 --> 00:18:02.320
Go use another language. - No, no, no.


00:18:02.320 --> 00:18:04.860
- I'm like, dude, no, you were like so close.


00:18:04.860 --> 00:18:06.040
You were so close as well.


00:18:06.040 --> 00:18:08.860
You could, maybe don't use CPython, right?


00:18:08.860 --> 00:18:10.860
Maybe use PyPy, P-Y-P-Y.


00:18:10.860 --> 00:18:14.980
But the most obvious optimization to me


00:18:14.980 --> 00:18:17.820
that just can change the game is Cython.


00:18:17.820 --> 00:18:20.900
You could write like one or two slow functions in Cython


00:18:20.900 --> 00:18:22.580
and boom, it goes to machine instructions


00:18:22.580 --> 00:18:25.100
and it's, you know, it's near the speed of C.


00:18:25.100 --> 00:18:28.060
So I like the article, I don't like that it says,


00:18:28.060 --> 00:18:30.220
"Oh, if things are a little bit slow, just run away."


00:18:30.220 --> 00:18:32.820
Like, no, there's probably a package that has a C extension


00:18:32.820 --> 00:18:36.180
that already works better, or there's a data structure


00:18:36.180 --> 00:18:37.900
you should be using that would be better,


00:18:37.900 --> 00:18:40.200
or there's Cython, or on and on.


00:18:40.200 --> 00:18:43.260
There's a lot of improvements before Python's not the answer.


00:18:43.260 --> 00:18:45.580
- Or be aware that this is doing this,


00:18:45.580 --> 00:18:49.780
and do your own optimization, or, and for the most part,


00:18:49.780 --> 00:18:51.620
use a profiler and really tell


00:18:51.620 --> 00:18:53.220
where the optimization needs to be.


00:18:53.220 --> 00:18:56.680
- Exactly, like only 10% of your code needs to be fast


00:18:56.680 --> 00:18:58.840
at all, if that much most of the time, right?


00:18:58.840 --> 00:19:00.240
It's usually like one little bit,


00:19:00.240 --> 00:19:03.260
like oh, if this were faster, it would change the game.


00:19:03.260 --> 00:19:05.880
- Yeah, I mean, I learned assembly in college


00:19:05.880 --> 00:19:08.140
and I'm glad I've never had to use it.


00:19:08.140 --> 00:19:11.020
- For sure.


00:19:11.020 --> 00:19:14.680
So final comment here, Brett Cannon,


00:19:14.680 --> 00:19:16.440
when I interviewed him recently,


00:19:16.440 --> 00:19:17.840
you know, he's on the steering council,


00:19:17.840 --> 00:19:19.640
a core developer and so on,


00:19:19.640 --> 00:19:24.640
He did talk about how would adoption of Python 3 change,


00:19:24.640 --> 00:19:26.720
how would adoption of Python in general change


00:19:26.720 --> 00:19:29.880
if we could make Python two or four times faster


00:19:29.880 --> 00:19:31.520
than it is today?


00:19:31.520 --> 00:19:32.640
Like most of the time it doesn't matter,


00:19:32.640 --> 00:19:36.220
but if it could be faster in some interesting ways,


00:19:36.220 --> 00:19:37.200
what would that mean, right?


00:19:37.200 --> 00:19:39.760
In terms of upgrading more quickly to the new versions


00:19:39.760 --> 00:19:42.360
and just general, like people not saying,


00:19:42.360 --> 00:19:44.480
oh, I have to use Go because I need asyncio


00:19:44.480 --> 00:19:45.560
or something like this.


00:19:45.560 --> 00:19:50.560
So it seems like if the compiler is this absent,


00:19:50.560 --> 00:19:53.520
if optimizations are this absent from the compiler,


00:19:53.520 --> 00:19:55.120
like there's some low hanging fruit


00:19:55.120 --> 00:19:59.120
to like do some simple CS compiler optimizations


00:19:59.120 --> 00:20:00.440
and make stuff faster, right?


00:20:00.440 --> 00:20:03.460
I mean, you could make this silly foo method


00:20:03.460 --> 00:20:05.360
like probably three times as fast, right?


00:20:05.360 --> 00:20:07.800
'Cause you could drop most of the bytecode operations.


00:20:07.800 --> 00:20:09.280
- Yeah, definitely.


00:20:09.280 --> 00:20:11.000
It's worth looking at.


00:20:11.000 --> 00:20:13.760
It's interesting that there is some people


00:20:13.760 --> 00:20:15.040
thinking about performance.


00:20:15.040 --> 00:20:17.080
- Yeah, I mean, we had that conversation around


00:20:17.080 --> 00:20:21.240
the idea of Rust and maybe what if we use Rust


00:20:21.240 --> 00:20:22.760
instead of C in certain situations,


00:20:22.760 --> 00:20:25.540
but this seems like low-hanging fruit already right here,


00:20:25.540 --> 00:20:28.680
and regardless of whether it lands in Rust or C


00:20:28.680 --> 00:20:31.080
when it's executed, not executing code


00:20:31.080 --> 00:20:32.720
is a lot faster than executing it.


00:20:32.720 --> 00:20:33.560
Cool, what's the next one?


00:20:33.560 --> 00:20:37.160
- EdgeDB is something that came up on my radar


00:20:37.160 --> 00:20:38.120
a couple years ago.


00:20:38.120 --> 00:20:42.920
I saw that EdgeDB people had a booth at one of the PyCons,


00:20:42.920 --> 00:20:44.520
and they were talking about it,


00:20:44.520 --> 00:20:48.560
But at the time, it wasn't around for people to actually play with.


00:20:48.560 --> 00:20:54.640
So the other day I saw an article called "A Path to a 10x Database" put out by the EdgeDB


00:20:54.640 --> 00:20:55.640
people.


00:20:55.640 --> 00:20:59.720
One, there was a download link, which I was happy for.


00:20:59.720 --> 00:21:02.000
There's an alpha one available.


00:21:02.000 --> 00:21:05.680
And people that are following along and kind of excited about what they're doing, they've


00:21:05.680 --> 00:21:11.160
published a roadmap of the features they have done, what they're working on.


00:21:11.160 --> 00:21:12.400
And it's kind of cool.


00:21:12.400 --> 00:21:14.940
I'm looking forward to being able to play with it more.


00:21:14.940 --> 00:21:17.260
So people that don't know what it is,


00:21:17.260 --> 00:21:20.400
they call it a next generation relational database.


00:21:20.400 --> 00:21:22.760
It's based on Postgres.


00:21:22.760 --> 00:21:25.040
I don't know what that means if they're using Postgres


00:21:25.040 --> 00:21:28.160
or if they're used the design of Postgres as a base.


00:21:28.160 --> 00:21:29.940
I haven't dug that far,


00:21:29.940 --> 00:21:33.280
but it features a different kind of data model


00:21:33.280 --> 00:21:35.620
and an advanced query language.


00:21:35.620 --> 00:21:37.320
And there are a whole bunch of features


00:21:37.320 --> 00:21:38.800
built into it already.


00:21:38.800 --> 00:21:40.240
And I'm pretty excited about a lot of it.


00:21:40.240 --> 00:21:42.000
But the thing that really excites me


00:21:42.000 --> 00:21:45.440
is that they completely replaced SQL, the query language.


00:21:45.440 --> 00:21:47.840
It's a different kind of language,


00:21:47.840 --> 00:21:50.440
and it looks more natural to me.


00:21:50.440 --> 00:21:53.960
I mean, people aren't really writing SQL a lot of times


00:21:53.960 --> 00:21:58.680
because they're using like what the SQLAlchemy


00:21:58.680 --> 00:22:00.080
or something like that.


00:22:00.080 --> 00:22:01.920
And partly those things exist


00:22:01.920 --> 00:22:03.760
because people don't want to write SQL.


00:22:03.760 --> 00:22:06.520
But maybe if we had a better query language,


00:22:06.520 --> 00:22:08.600
you wouldn't need the middle layer so much.


00:22:08.600 --> 00:22:10.520
- Yeah, it definitely looks interesting.


00:22:10.520 --> 00:22:12.860
I don't have a real good sense of what it,


00:22:12.860 --> 00:22:14.940
like how it compares to both of those.


00:22:14.940 --> 00:22:16.980
The query syntax does look nice.


00:22:16.980 --> 00:22:19.460
Like the joins look super cool.


00:22:19.460 --> 00:22:23.420
Or the subqueries possibly is more like an analogy.


00:22:23.420 --> 00:22:25.420
But yeah, it looks really neat.


00:22:25.420 --> 00:22:29.060
It sort of sells itself as a hybrid


00:22:29.060 --> 00:22:31.180
between document databases like Mongo


00:22:31.180 --> 00:22:33.180
and relational ones like Postgres.


00:22:33.180 --> 00:22:35.900
So yeah, it's cool to see innovation there for sure.


00:22:35.900 --> 00:22:38.280
- Outside of Mongo, seeing some innovation


00:22:38.280 --> 00:22:42.360
on the SQL side or the relational side is nice.


00:22:42.360 --> 00:22:45.460
We'll see if it's really a 10X improvement.


00:22:45.460 --> 00:22:47.440
But yeah, we can't just stick around for nothing.


00:22:47.440 --> 00:22:48.800
I did actually try to play with it


00:22:48.800 --> 00:22:50.160
'cause I'm like, I wanna play with this


00:22:50.160 --> 00:22:52.020
'cause it's got Python bindings,


00:22:52.020 --> 00:22:54.320
but I couldn't get it to install on my Mac.


00:22:54.320 --> 00:22:55.600
So, yeah.


00:22:55.600 --> 00:22:57.640
- Yeah, well, what you have to suffer


00:22:57.640 --> 00:23:00.200
for being out on the cutting edge, Brian.


00:23:00.200 --> 00:23:01.360
Price you pay.


00:23:01.360 --> 00:23:02.400
- Yep.


00:23:02.400 --> 00:23:04.120
- All right, so this last one is gonna be


00:23:04.120 --> 00:23:05.560
just a quick roundup of some stuff.


00:23:05.560 --> 00:23:08.840
maybe this combo will help some folks.


00:23:08.840 --> 00:23:13.840
This guy, Wacwas Yonas, worked for a software,


00:23:13.840 --> 00:23:16.960
sorry, healthcare startup in the US.


00:23:16.960 --> 00:23:18.760
And he wrote this cool blog post called


00:23:18.760 --> 00:23:22.960
16 Python Libraries That Helped a Healthcare Startup Grow.


00:23:22.960 --> 00:23:23.800
- Oh, neat.


00:23:23.800 --> 00:23:25.740
- Yeah, so it's just like a paragraph or two


00:23:25.740 --> 00:23:28.980
about different packages or even modules


00:23:28.980 --> 00:23:31.480
that they use to kind of solve some problem


00:23:31.480 --> 00:23:32.920
within their startup.


00:23:32.920 --> 00:23:36.840
So we have Paramiko, which lets you basically issue commands


00:23:36.840 --> 00:23:39.120
over SSH to other servers.


00:23:39.120 --> 00:23:42.840
So like on my computer, I could like use Python


00:23:42.840 --> 00:23:46.680
and talk over SSH to run processes or copy files,


00:23:46.680 --> 00:23:50.040
stuff between servers, anything I can SSH to,


00:23:50.040 --> 00:23:51.200
that's pretty cool.


00:23:51.200 --> 00:23:53.800
The built-in CSV module, you know,


00:23:53.800 --> 00:23:57.480
that's always good for parsing CSV files, really nice.


00:23:57.480 --> 00:24:00.360
You mentioned SQLAlchemy, so they use SQLAlchemy as well.


00:24:00.360 --> 00:24:04.560
requests and beautiful soup for APIs and web scraping.


00:24:04.560 --> 00:24:08.120
I like to say that every website is an API,


00:24:08.120 --> 00:24:09.440
even if it doesn't know it.


00:24:09.440 --> 00:24:12.520
So if it doesn't have an API, it has data


00:24:12.520 --> 00:24:14.720
and you just have to do the right request to it.


00:24:14.720 --> 00:24:15.840
Now it's an API.


00:24:15.840 --> 00:24:18.160
Here's one for you, Brian, test scenarios,


00:24:18.160 --> 00:24:21.800
which is a PyUnit extension for dependency injection.


00:24:21.800 --> 00:24:23.560
So that's kind of cool.


00:24:23.560 --> 00:24:26.240
Dependency injection is not that huge of a thing


00:24:26.240 --> 00:24:27.600
that people make use of in Python,


00:24:27.600 --> 00:24:30.320
but it has its place, I guess.


00:24:30.320 --> 00:24:33.820
HL7, so a simple library for parsing


00:24:33.820 --> 00:24:38.080
health level seven files into Python objects.


00:24:38.080 --> 00:24:40.200
That's cool, I suppose doing that yourself


00:24:40.200 --> 00:24:42.520
probably is not fun, so having a library


00:24:42.520 --> 00:24:44.020
that does it is great.


00:24:44.020 --> 00:24:45.880
Python phone numbers, which is a library


00:24:45.880 --> 00:24:48.160
for parsing, formatting, and validating


00:24:48.160 --> 00:24:50.000
international phone numbers.


00:24:50.000 --> 00:24:51.920
That's pretty sweet, it's based on a Google library,


00:24:51.920 --> 00:24:53.760
it's like a Python port of it.


00:24:53.760 --> 00:24:57.520
GEvent for networking and asynchronous code.


00:24:57.520 --> 00:25:00.880
Python-DateUtil for parsing date times.


00:25:00.880 --> 00:25:03.160
Like, anytime I have to work with date times,


00:25:03.160 --> 00:25:05.120
I'm like, okay, this project now requires


00:25:05.120 --> 00:25:08.440
Python-DateUtil because parsing date time


00:25:08.440 --> 00:25:10.120
sucks without it, right?


00:25:10.120 --> 00:25:11.400
But this one you just say parse,


00:25:11.400 --> 00:25:13.560
and like that right answer just seems to always come out.


00:25:13.560 --> 00:25:14.400
It's great.


00:25:14.400 --> 00:25:17.000
So matplotlib for graphs, PythonMagic.


00:25:17.000 --> 00:25:18.280
Have you heard of PythonMagic?


00:25:18.280 --> 00:25:19.720
- I don't know.


00:25:19.720 --> 00:25:23.140
- I hadn't, and so what you can do is you can give it a file,


00:25:23.140 --> 00:25:25.720
some random binary file or even text file,


00:25:25.720 --> 00:25:27.520
and it'll tell you what file type it is.


00:25:27.520 --> 00:25:28.360
- Oh, neat.


00:25:28.360 --> 00:25:30.280
- So, like, suppose somebody gives you an image


00:25:30.280 --> 00:25:33.120
and they've named it .jpg, but it's really a PNG.


00:25:33.120 --> 00:25:35.080
Like, you could feed it something,


00:25:35.080 --> 00:25:38.020
to something like Python Magic, it would say PNG.


00:25:38.020 --> 00:25:41.240
So you can give it, like, PDFs or zip files


00:25:41.240 --> 00:25:43.480
and it'll tell you, like, what file it is.


00:25:43.480 --> 00:25:45.240
- Okay, but Magic?


00:25:45.240 --> 00:25:47.480
That seems like a bad name for it, but, yeah.


00:25:47.480 --> 00:25:48.360
- It's Python Magic.


00:25:48.360 --> 00:25:50.480
Well, I mean, the reason is it's based


00:25:50.480 --> 00:25:51.940
on a thing called libMagic.


00:25:51.940 --> 00:25:54.360
But yeah, it's just like, the criticism


00:25:54.360 --> 00:25:56.900
just transitively follows to live magic, I guess.


00:25:56.900 --> 00:25:58.440
(laughing)


00:25:58.440 --> 00:25:59.800
All right, another one, Django,


00:25:59.800 --> 00:26:01.600
obviously that doesn't need a lot of introduction,


00:26:01.600 --> 00:26:03.120
but yeah, they must use Django.


00:26:03.120 --> 00:26:07.000
Bodo, which is the API for interacting with all things AWS.


00:26:07.000 --> 00:26:09.760
So if you're doing anything with that, that's super cool.


00:26:09.760 --> 00:26:13.760
Like I use Bodo for automatic transcoding,


00:26:13.760 --> 00:26:15.440
like re-encoding in different formats,


00:26:15.440 --> 00:26:16.680
videos from my courses,


00:26:16.680 --> 00:26:20.620
or downloading, say, MP3s to a caching server,


00:26:20.620 --> 00:26:21.460
stuff like that.


00:26:21.460 --> 00:26:23.800
And then finally, Mailgun for sending email,


00:26:23.800 --> 00:26:26.280
and Twilio's Python API for sending,


00:26:26.280 --> 00:26:27.680
both of those for sending reminders,


00:26:27.680 --> 00:26:29.760
one over email, one over text.


00:26:29.760 --> 00:26:32.080
But that's kind of a cool combo of things, right?


00:26:32.080 --> 00:26:33.720
- Mailgun's just a great name.


00:26:33.720 --> 00:26:37.200
We've been starting to use Paramiko at work too,


00:26:37.200 --> 00:26:39.320
but for the SSH features, it's good.


00:26:39.320 --> 00:26:40.520
- Oh yeah, nice.


00:26:40.520 --> 00:26:42.440
Yeah, I feel like this, you know,


00:26:42.440 --> 00:26:43.880
you don't necessarily have to pick what he picked,


00:26:43.880 --> 00:26:46.400
but it's cool to see just how those all fit together


00:26:46.400 --> 00:26:48.280
and think of like, well,


00:26:48.280 --> 00:26:51.160
what packages run this company, basically.


00:26:51.160 --> 00:26:52.280
- Articles like this are neat,


00:26:52.280 --> 00:26:54.480
of different people solving different problems.


00:26:54.480 --> 00:26:56.800
What are they using from Python?


00:26:56.800 --> 00:26:57.640
- Yeah, exactly.


00:26:57.640 --> 00:26:58.460
- Like it.


00:26:58.460 --> 00:27:00.000
- All right, so that's it for our main items.


00:27:00.000 --> 00:27:02.320
Got any extras you want to share with us?


00:27:02.320 --> 00:27:03.480
- No, do you?


00:27:03.480 --> 00:27:04.480
- I thought I didn't,


00:27:04.480 --> 00:27:05.800
but I'm going to share one thing with you all.


00:27:05.800 --> 00:27:08.680
I just recorded an episode


00:27:08.680 --> 00:27:12.100
with the United States Digital Service for Talk Python.


00:27:12.100 --> 00:27:13.480
- Okay, what is that?


00:27:13.480 --> 00:27:14.880
- I hadn't heard of that either,


00:27:14.880 --> 00:27:18.200
but this is like a little stealth startup type thing


00:27:18.200 --> 00:27:19.320
inside the government.


00:27:19.320 --> 00:27:20.520
President Obama set it up,


00:27:20.520 --> 00:27:23.160
And it was basically the tech team brought in


00:27:23.160 --> 00:27:26.120
to solve the healthcare.gov crashing problems,


00:27:26.120 --> 00:27:29.820
like that whole big fail to launch for the Obamacare stuff.


00:27:29.820 --> 00:27:31.360
There was a group of people brought in to fix it,


00:27:31.360 --> 00:27:32.560
and then they did, they're like,


00:27:32.560 --> 00:27:34.240
well, why can't we just apply this


00:27:34.240 --> 00:27:36.280
to all the other broken things in the government?


00:27:36.280 --> 00:27:39.640
So it's a really cool service where you can go do


00:27:39.640 --> 00:27:43.160
like a three month tour of duty at the US Digital Service


00:27:43.160 --> 00:27:45.080
and not even have to leave your job,


00:27:45.080 --> 00:27:48.040
just take an unpaid leave to go fix something


00:27:48.040 --> 00:27:48.960
in the government or whatever.


00:27:48.960 --> 00:27:49.800
It's pretty cool.


00:27:49.800 --> 00:27:51.880
I have an episode coming out, but I hadn't heard of it


00:27:51.880 --> 00:27:52.760
and I thought that was kind of cool,


00:27:52.760 --> 00:27:53.800
so I thought I'd throw it out there.


00:27:53.800 --> 00:27:54.960
- Yeah, it is neat.


00:27:54.960 --> 00:27:56.080
- It is for sure.


00:27:56.080 --> 00:27:59.840
I have a, it's almost a joke, it's not exactly a joke,


00:27:59.840 --> 00:28:03.760
it's more maybe mocking, but how can you tell


00:28:03.760 --> 00:28:07.040
the difference between machine learning and AI, Brian?


00:28:07.040 --> 00:28:08.040
- I don't know.


00:28:08.040 --> 00:28:11.540
- If it's written in Python, it's probably machine learning.


00:28:11.540 --> 00:28:14.080
If it's written in PowerPoint, it's probably AI.


00:28:14.080 --> 00:28:16.480
(laughing)


00:28:16.480 --> 00:28:17.880
- Written in PowerPoint?


00:28:17.880 --> 00:28:20.680
- Like as in, it's just like a presentation with ideas,


00:28:20.680 --> 00:28:22.680
but no code and no implementation yet?


00:28:22.680 --> 00:28:25.120
- Ah, okay, yeah, okay, got it.


00:28:25.120 --> 00:28:27.240
- So basically, if it's real, it's machine learning.


00:28:27.240 --> 00:28:31.080
If it's like, we're gonna use magic,


00:28:31.080 --> 00:28:33.080
computer magic to solve this problem,


00:28:33.080 --> 00:28:34.400
it's AI and it's in PowerPoint.


00:28:34.400 --> 00:28:35.240
- That's funny.


00:28:35.240 --> 00:28:36.560
I have a question for you.


00:28:36.560 --> 00:28:39.680
It's not a joke, but way back in the dark ages


00:28:39.680 --> 00:28:41.120
when I was going to college,


00:28:41.120 --> 00:28:43.440
all the AI work was done in like Lisp.


00:28:43.440 --> 00:28:44.440
- Yes, it was.


00:28:44.440 --> 00:28:46.680
- Are there still people doing AI in Lisp


00:28:46.680 --> 00:28:48.280
or is that not a thing anymore?


00:28:48.280 --> 00:28:49.120
Do you know?


00:28:49.120 --> 00:28:51.560
- I think people are still doing it,


00:28:51.560 --> 00:28:54.920
but I don't think the neural network people


00:28:54.920 --> 00:28:55.880
have stayed there, right?


00:28:55.880 --> 00:28:57.000
I think the neural network people


00:28:57.000 --> 00:29:01.280
mostly have moved to Python and things like TensorFlow


00:29:01.280 --> 00:29:02.680
and the other GPU-based things.


00:29:02.680 --> 00:29:07.680
But I'm sure that there's like different kinds of AI.


00:29:07.680 --> 00:29:08.840
'Cause you're right, it was all,


00:29:08.840 --> 00:29:10.420
you had to be a Lisp programmer


00:29:10.420 --> 00:29:12.280
if you wanted to do anything with AI.


00:29:12.280 --> 00:29:15.480
And AI was always this like amorphous, weird thing.


00:29:15.480 --> 00:29:16.600
Like you don't really know what it is,


00:29:16.600 --> 00:29:19.860
but probably if we can like set up a blind chat


00:29:19.860 --> 00:29:23.020
with it over IRC, then it might seem like it's alive


00:29:23.020 --> 00:29:24.460
and then it'll be AI, right?


00:29:24.460 --> 00:29:26.860
Like that, you know, the whole Turing test


00:29:26.860 --> 00:29:28.060
and all that stuff.


00:29:28.060 --> 00:29:30.860
And now it's like, that's cute.


00:29:30.860 --> 00:29:32.740
Car, drive here.


00:29:32.740 --> 00:29:34.980
(laughing)


00:29:34.980 --> 00:29:40.020
That's with Python and like TensorFlow


00:29:40.020 --> 00:29:42.700
and the Lisp one that's doing the chat, right?


00:29:42.700 --> 00:29:44.340
Like I feel like that's kind of where it is,


00:29:44.340 --> 00:29:46.340
but I'm sure people are still doing cool stuff with Lisp


00:29:46.340 --> 00:29:49.020
that I don't know or really want to read the code for.


00:29:49.020 --> 00:29:52.500
Okay, I'm glad there's probably not any Lisp programmers that listen to this.


00:29:52.500 --> 00:29:55.900
No, but we're probably going to be posted in a negative way on some Lisp forum.


00:29:55.900 --> 00:29:56.900
Sorry about that.


00:29:56.900 --> 00:29:57.900
Sorry.


00:29:57.900 --> 00:30:01.580
All right, well, thanks for being here, Brian, and thanks for sharing everything.


00:30:01.580 --> 00:30:02.580
Thank you.


00:30:02.580 --> 00:30:03.580
You bet.


00:30:03.580 --> 00:30:04.580
Bye, everyone.


00:30:04.580 --> 00:30:05.580
Bye.


00:30:05.580 --> 00:30:06.580
Thank you for listening to Python Bytes.


00:30:06.580 --> 00:30:07.780
Follow the show on Twitter via @pythonbytes.


00:30:07.780 --> 00:30:10.740
That's Python Bytes as in B-Y-T-E-S.


00:30:10.740 --> 00:30:13.860
And get the full show notes at pythonbytes.fm.


00:30:13.860 --> 00:30:17.580
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:30:17.580 --> 00:30:18.580
way.


00:30:18.580 --> 00:30:20.780
We're always on the lookout for sharing something cool.


00:30:20.780 --> 00:30:23.820
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:30:23.820 --> 00:30:27.100
Thank you for listening and sharing this podcast with your friends and colleagues.

