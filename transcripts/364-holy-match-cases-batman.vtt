WEBVTT

00:00:00.001 --> 00:00:05.280
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.280 --> 00:00:11.540
This is episode 364, recorded December 12th, 2021. I'm Michael Kennedy.

00:00:11.540 --> 00:00:14.860
2023, and I'm Brian Okken.

00:00:14.860 --> 00:00:18.380
2023, and you are Brian Okken.

00:00:18.380 --> 00:00:23.420
And this episode is brought to you by all the things that we're doing that many of you support,

00:00:23.420 --> 00:00:28.400
and we really appreciate that. Courses over at Talk Python, mine, Brian's, other folks,

00:00:28.400 --> 00:00:35.300
the complete pytest course over at Brian's site. Patreon supporters connect with us on Fosstodon.

00:00:35.300 --> 00:00:42.520
We're all over there, including the podcast. And many of you who are listening at this very moment know,

00:00:42.520 --> 00:00:47.360
but many who are listening later may not. If you hear us say, hey, so-and-so said this in the audience.

00:00:47.360 --> 00:00:51.160
If you would like to be in the audience, check out pythonbytes.fm/live,

00:00:51.160 --> 00:00:55.680
usually Tuesdays at 11 a.m. Pacific time, just as it is now.

00:00:55.680 --> 00:01:02.780
We typically link from each show notes on the website, not as easily in the podcast player show notes,

00:01:02.780 --> 00:01:05.820
but on the website, you can get to the video version if you ever want to.

00:01:05.820 --> 00:01:06.260
Yeah.

00:01:06.260 --> 00:01:09.980
Although, certainly not intended to be required. Brian, let's kick it off.

00:01:09.980 --> 00:01:16.900
Yeah. Let's talk about one of the things that is often around is,

00:01:17.000 --> 00:01:22.580
this was going to be one of my extras, but I'll just bring it up anyway, is the advent of code.

00:01:22.580 --> 00:01:31.060
So we've covered this in years past, but at adventofcode.com, there are a bunch of things you can do

00:01:31.060 --> 00:01:37.620
to a programming exercise, and you can pick any language you want. And a lot of people do this,

00:01:37.680 --> 00:01:44.980
and it's so much fun. But there's other ways to do advent of code. And I really liked, I saw James

00:01:44.980 --> 00:01:52.180
Bennett is doing a Python Django advent calendar. And this is super cool. He's just decided to do

00:01:52.180 --> 00:02:00.620
a short blog post, possibly short, some not so short blog post about Python or Django every day during the

00:02:00.620 --> 00:02:09.040
2023 advent. And it's pretty nice. The first one is talking about enums and just a little, I mean,

00:02:09.040 --> 00:02:15.120
it's a good reminder that Python has enums, but also you can make them nicer by making sure that you

00:02:15.120 --> 00:02:21.760
assign values and it's easier even instead of just using enum to derive a class from enum enum.

00:02:21.760 --> 00:02:28.160
And, and so that they're, they're like, you know, the, they're printable and stuff like that easier.

00:02:28.160 --> 00:02:34.620
The values are good. So that's good. What I really loved seeing a couple of his posts were

00:02:34.620 --> 00:02:43.060
around testing. So there is, this is pretty great. This is a don't mock Python's HTTPX. And I don't,

00:02:43.060 --> 00:02:48.620
I have a plans to use HTTPX on the project, but I I'm not using it right now, but I really thought

00:02:48.620 --> 00:02:55.040
this was a pretty cool little writeup. The, the, the, there is a discussion really about different ways

00:02:55.040 --> 00:03:03.500
you might be able to mock mock using your HTTPX part, but there's the obvious ways are probably not

00:03:03.500 --> 00:03:10.360
the, really the best. His recommendation is to is a, a couple of things, refactoring your code a little

00:03:10.360 --> 00:03:17.360
bit so that you can pass in a HTTPX client, but then also using HTTPX is built in mock transport.

00:03:17.500 --> 00:03:22.980
I didn't know HTTPX had a mock transport in there. You're grinning. Did you already know this or do

00:03:22.980 --> 00:03:27.600
you have an opinion? I did not. I'm just thinking that Kim in the audience has identified the fact

00:03:27.600 --> 00:03:33.940
that HTTPX is very sensitive and we should not mock or tease it. Yeah. That's why I'm laughing.

00:03:33.940 --> 00:03:40.600
Okay. Okay. The joke. so that concludes the joke segment of the podcast. No, I didn't know this.

00:03:40.680 --> 00:03:46.180
Actually, this is really cool. I'm all about HTTPX. It is my default go-to HTTP client these days.

00:03:46.180 --> 00:03:51.060
When you do it request like it's like requests, but it also has async and it's, it's very fine.

00:03:51.060 --> 00:03:56.900
And, yeah, this, this mock transport is pretty neat. anyway, it's a little over my head

00:03:56.900 --> 00:04:02.380
right now cause I don't do this yet, but, I think it's a cool thing to point out. And also I really

00:04:02.380 --> 00:04:07.300
think, I think it's a good idea. A cool idea. I mean, a lot of people do like, writing a novel

00:04:07.300 --> 00:04:12.860
in November, but writing a little blog posts, during advent, that's pretty neat idea also.

00:04:12.860 --> 00:04:18.200
So good job. Yeah. That's a very interesting idea. So I also think it's an interesting idea that library

00:04:18.200 --> 00:04:25.600
creators may decide to provide their own mock stub API rather than just forcing you to guess what the

00:04:25.600 --> 00:04:29.640
internals might need. That's true. Yeah. Right. Cause as a provider of the library, like, well,

00:04:29.640 --> 00:04:32.880
really, this is the thing you need. And really there's these three things you should change,

00:04:32.880 --> 00:04:35.640
but if you call this function, we'll do that or whatever. Right. Like they just know the

00:04:35.640 --> 00:04:41.200
internals better and let them do it. Yeah. And there's an example of using, of having a mock

00:04:41.200 --> 00:04:47.580
transport that just returns a, not found, and being able to do that without going out outside

00:04:47.580 --> 00:04:52.700
of the library. I think that's a really cool idea. No, I mean, and I, and we are seeing that more,

00:04:52.700 --> 00:04:57.620
more frameworks deciding, well, people are going to have to test this. How do they do that?

00:04:57.820 --> 00:05:03.540
and I think it's a good trend. So nice. Tony Sherman points out, saw a similar thing in Bota three for

00:05:03.540 --> 00:05:10.020
AWS. So very cool. Right. Okay. they, I, there's a, the other one that I thought is a short

00:05:10.020 --> 00:05:17.460
one is test your documentation talking about, doc test. And, I love throwing stuff like

00:05:17.460 --> 00:05:24.080
this in, you, you have little, doc string in your, in, in your code to,

00:05:24.080 --> 00:05:28.920
to show how it's used. Why not test those? So you can use either doc test or you,

00:05:28.920 --> 00:05:34.680
py test can run your doc test tests as well. So. Because of course it can. Yeah. It does all the

00:05:34.680 --> 00:05:40.160
things. All right. What you got. I'm going to drop into this next one here. this next one is

00:05:40.180 --> 00:05:48.820
drop base. Now this from what I can tell it right at the top, it has a pricing. So it's not a free

00:05:48.820 --> 00:05:53.780
type of thing for you. However, I think it's interesting enough to talk about it anyway,

00:05:53.780 --> 00:05:59.120
not a sponsorship, just something Michael thinks. Cool. So it says build internal tools with just

00:05:59.120 --> 00:06:05.580
Python. So, so you can build, it says full stack. Let's call them forms over data web apps for your

00:06:05.580 --> 00:06:09.840
internal teams, import existing Python scripts and quickly build layered UIs with gradient

00:06:09.840 --> 00:06:15.420
permissions. So when you look at the thing itself, you're like, huh, I don't really know what this

00:06:15.420 --> 00:06:20.280
means or if this is interesting. Like they don't have a bunch of great, screenshots or whatever

00:06:20.280 --> 00:06:26.420
on their homepage. So what you'll see is like, you can go write a query. It's all sort of starts

00:06:26.420 --> 00:06:31.740
from a database, which is why I'm calling it forms over data. Okay. And that is like a user interface

00:06:31.740 --> 00:06:37.980
that lets you basically access the database with a little bit of rules and such. So the idea, if I

00:06:37.980 --> 00:06:43.740
recall correctly, I looked at this last week is what you do is you write a SQL query against a database

00:06:43.740 --> 00:06:49.240
like Postgres or something. Okay. And that will give you a result that looks kind of like, kind of like

00:06:49.240 --> 00:06:55.900
Excel ish static, doesn't do anything, but then you can click and say, make this a smart table type

00:06:55.900 --> 00:07:01.540
thing. Okay. So then it becomes sortable, editable and so on. Right. So all the results, you can just

00:07:01.540 --> 00:07:07.140
turn that into a grid that people can edit and it goes back to the database. You can create a so-called

00:07:07.140 --> 00:07:13.160
master detail type of view. So in the example, on the homepage, they have a workspaces and then each

00:07:13.160 --> 00:07:18.460
user belongs to a particular, there's a bunch of users that belong to each workspace. So you can do

00:07:18.460 --> 00:07:24.720
a relationship where you say, I'm gonna, if you click on one part of the screen, fill the other part of

00:07:24.720 --> 00:07:30.960
the screen with say the users of that workspace. So if you like select the workspace in the top grid,

00:07:31.340 --> 00:07:35.300
like fill it out, all the users at the bottom, you turn that into a smart thing that you can edit it

00:07:35.300 --> 00:07:41.300
and you can do things like click a button to whatever. In their example, it says, if you assign

00:07:41.300 --> 00:07:45.060
somebody to a workspace or change their role, you can click a button to send them an email,

00:07:45.060 --> 00:07:51.460
like their new status in that workspace, that code is written in Python, right? And you can plug in

00:07:51.460 --> 00:07:57.520
functions behind all this stuff and all that code there is written in Python. So you want kind of a,

00:07:57.520 --> 00:08:04.040
a real quick way to, if you've got a little SQL skill, a little Python skill, build this cascading UI

00:08:04.040 --> 00:08:09.480
type thing. There you go. It's pretty cool. That's pretty neat. Yeah, pretty neat. And you know, they, they also

00:08:09.480 --> 00:08:16.760
have some widgets and stuff, I believe like sidebars, search bars, et cetera. Yeah. Then you write a bunch of

00:08:16.760 --> 00:08:23.280
that in Python and it's, it's super cool. So I think that could be quite useful for folks if they want to go

00:08:23.280 --> 00:08:28.800
and check that out. And you know, you're not trying to build some new super fancy looking app. You just

00:08:28.800 --> 00:08:34.440
like, I just need to provide kind of this relationship stuff and a little bit of Python to do a little bit

00:08:34.440 --> 00:08:40.480
of work on my UI. So people can check that out. I think there's a free tier. Let me look now. There's

00:08:40.480 --> 00:08:45.880
a free tier that has up to three users. And then for a team, it's like, if you want teams, you can pay

00:08:45.880 --> 00:08:50.900
more. So again, not an advertisement, but you know, UIs built with Python, even though we go on and on

00:08:50.900 --> 00:08:55.500
about them, they're often a rarity. So when we get a chance to talk about them, it's kind of cool.

00:08:55.500 --> 00:09:02.440
Yeah. That's neat. Yeah. And semi-related sort of, I'm going to have Samuel, remember last week we

00:09:02.440 --> 00:09:07.820
talked about fast UI? Yeah. Samuel Coleman reached from Pydantic reached out and said, Hey, we should

00:09:07.820 --> 00:09:12.420
talk more about this. It's a brand new thing we're trying to do interesting things with. So I'm going to

00:09:12.420 --> 00:09:17.920
have him on talk Python technically next week, but it's going to be recorded next week and then

00:09:17.920 --> 00:09:22.260
released later. So like in April or something like that. Yeah. Something like that. Right.

00:09:22.260 --> 00:09:29.240
Something probably January. Okay. Anyway, well more on that over there, but drop base people and

00:09:29.240 --> 00:09:34.440
check that out. And if people do, it'd be cool if they could like shoot us a note and see if it's like,

00:09:34.440 --> 00:09:39.480
turns out to be cool or not. Yeah. I would love to hear back. yeah. So maybe, maybe Kim could

00:09:39.480 --> 00:09:45.400
save some time because Kim says, the description of this tool pretty much describes my job, but

00:09:45.400 --> 00:09:54.480
yep. Very cool. Anyway. I'd like to talk about, the structural pattern matching a little bit.

00:09:54.480 --> 00:10:00.240
So we have covered structural pattern matching and talked about it before this came out. When in,

00:10:00.240 --> 00:10:06.060
camera, which three, 10 brought us structural pattern matching way back in three, 10,

00:10:06.060 --> 00:10:13.760
how young were we then Brian? So yeah, different world. Anyway, the tutorial is pretty

00:10:13.760 --> 00:10:21.160
good as a, so this is from Ned Batchelder real world match case. so, the, he comments that

00:10:21.160 --> 00:10:27.700
the tutorial is pretty good and it is however, the example is a little bit of a toy example

00:10:27.700 --> 00:10:35.620
and, and it's nice to see, see this really in action. So here's a real world, use case.

00:10:35.620 --> 00:10:42.660
Ned's got a GitHub bot installed as a web hook and it returns back. So every time something happens on a

00:10:42.660 --> 00:10:48.420
repo, it sends back a payload of Jason data to the bot and the bot's got to figure out what to do with it.

00:10:48.420 --> 00:10:55.180
And it's, so it turns out Jason into a nested set of dictionaries. and anybody that's,

00:10:55.180 --> 00:11:01.140
that's dealt with, Jason return data. that's what you get, you get a bunch of nested

00:11:01.140 --> 00:11:08.000
dictionaries. So how do you deal with that? Well, there, there was, his, his, this example shows

00:11:08.000 --> 00:11:14.480
that the match case, or the structural pattern matching match case works really great to match this.

00:11:14.480 --> 00:11:21.040
So, this example looks, for, for events that happen and for each event, they matches it just

00:11:21.040 --> 00:11:26.820
to look to see if there's an issue and a comment. And, and so one of the cases is looking at the,

00:11:26.820 --> 00:11:31.620
the content of that. So you've got these nested dictionaries you can, and you can deep, dig deep

00:11:31.620 --> 00:11:36.660
into the nested here. It's just one layer down a couple layers of nested dictionaries, but still,

00:11:36.660 --> 00:11:42.140
you could go deeper if you wanted to, to match that. And then not only matching the dictionary and pulling

00:11:42.140 --> 00:11:48.620
out bits of the data, like he's looking at closed ad and created at and comparing those, but using a

00:11:48.620 --> 00:11:55.480
comparison. So you grab the stuff and then say, if some, like if two things are equal and in other,

00:11:55.480 --> 00:12:02.540
in another example of, if the, who, if the login is the bot name, that's the, that's different.

00:12:02.540 --> 00:12:08.700
I don't want to do events that are based on my own actions. do something else,

00:12:08.700 --> 00:12:13.740
but then proceed with it. So kind of some, a couple of cases where you doesn't want to do anything,

00:12:13.740 --> 00:12:20.120
but other cases where some action is required. So the, these are, is a pretty cool use case of,

00:12:20.120 --> 00:12:26.060
uh, I just wanted to highlight that it's really cool use case of using structural pattern matching to,

00:12:26.060 --> 00:12:31.580
to make some code that might be complicated other ways, a little simpler. So this isn't too bad to read.

00:12:31.980 --> 00:12:37.200
So much more interesting than the normal switch type statements I write with match these days.

00:12:37.200 --> 00:12:44.780
Yeah. It's like, we're looking for multiple things within the document and then applying a conditional

00:12:44.780 --> 00:12:48.140
on part of the matched things. And, it's pretty wild.

00:12:48.140 --> 00:12:55.380
Yeah. I'm actually thinking about this in a, I've got sets of data where for each element I'm, I'm looking,

00:12:55.500 --> 00:13:01.900
yeah, it's a bunch of nested if clauses to say if, if this is true, if that's true and something like

00:13:01.900 --> 00:13:03.820
this might work really pretty good. So.

00:13:03.820 --> 00:13:09.760
Indeed. I'm going to try to make that, the conditions here, like, the chapter art for

00:13:09.760 --> 00:13:14.300
this, this chapter, chapter items for all their topics, right? People can use that throughout the

00:13:14.300 --> 00:13:15.220
show. So yeah.

00:13:15.220 --> 00:13:16.600
Very neat. Look nice.

00:13:16.780 --> 00:13:19.060
So look down at your podcast player before now.

00:13:19.060 --> 00:13:25.060
I love that. We, we don't mention that a lot, but a lot of people, do, appreciate the

00:13:25.060 --> 00:13:29.680
chapters. So we jump around. We do multiple topics and you can use the chapters to get to them. So

00:13:29.680 --> 00:13:35.320
or use them as reference. All right. Speaking of reference, Brian, I have extra, extra, extra,

00:13:35.320 --> 00:13:37.460
extra, extra times 10. Okay.

00:13:37.460 --> 00:13:41.760
But I know you've got a lot of things as well. So I have so many extras that my next topic is

00:13:41.760 --> 00:13:45.740
the extra, extra, extra, rather than having some follow-up stuff. Ready for it?

00:13:45.980 --> 00:13:52.480
Yeah. All right. Follow-up number one. We talked about switching DNS and how much of a pain that

00:13:52.480 --> 00:13:58.600
was last time and all the hassles that we could run into. And it occurred to me, and there's some

00:13:58.600 --> 00:14:03.920
people out there like Michael, obviously we do this all the time. I suspect many people don't though.

00:14:03.920 --> 00:14:11.860
It occurred to me that there is your domain registrar, like GoDaddy, Hover, whatever, Namecheap.

00:14:12.000 --> 00:14:17.340
And they often have all the DNS settings for you, but you can create, you can use, there are services

00:14:17.340 --> 00:14:22.780
that are way better. It turns out that host your actual DNS settings that have nothing to do with

00:14:22.780 --> 00:14:29.100
your register. What you got to do is just go to your register and say, use this. So I use bunny.net for

00:14:29.100 --> 00:14:33.840
delivering the podcasts or the courses, all sorts of things. And they have a DNS section that is super

00:14:33.840 --> 00:14:39.420
cool. So check this out, Brian. we've done in the last week, I set this up. We've done over half a

00:14:39.420 --> 00:14:44.060
million DNS queries, not requests to the page, but like, Hey, tell me who this is. And we'll remember

00:14:44.060 --> 00:14:48.600
that for a while to your, for your ISP. That's a lot of DNS queries. A lot of people want to know

00:14:48.600 --> 00:14:53.240
what Python bytes.fm is. That's exciting. But here, why is this so, why am I so excited? Like,

00:14:53.240 --> 00:14:58.760
look how nice and readable this is for people who, are watching the, if you're not, it's like,

00:14:58.760 --> 00:15:04.340
it'll create a view of a TXT record. It'll like create, nested sections go, all of these records

00:15:04.340 --> 00:15:10.160
apply to this domain or that domain and so on. And then look over here at, you can edit all these

00:15:10.160 --> 00:15:14.620
here, but check this out. If I want to say like this, the CDN setting, maybe I'm working on it.

00:15:14.620 --> 00:15:19.840
And you know, what's a super hassle with DNS? Like I make a change, please wait a couple hours and you

00:15:19.840 --> 00:15:24.140
can try it. If it doesn't work, it will be broken for a few hours and then you can fix it. Right?

00:15:24.140 --> 00:15:29.120
What a hassle. cause I don't, I migrated 25 domains. I know I messed some of them up,

00:15:29.260 --> 00:15:33.840
not badly, but a little. So check this out. If you click here, you've got your one day,

00:15:33.840 --> 00:15:39.520
one hour, typical time to live. It goes down to every 15 seconds. So if you're like working on

00:15:39.520 --> 00:15:44.380
something and you want to be able to like, I try, Oh no, go ahead to quick switch it back.

00:15:44.380 --> 00:15:48.520
Just set it to that for a while. Isn't that awesome? Yeah. The other thing you can do with this is you

00:15:48.520 --> 00:15:53.860
can write, unfortunately JavaScript, but you can write JavaScript that runs on every DNS request.

00:15:53.860 --> 00:15:58.480
So you can say things like, I know you asked what this is, but you're in Asia. So we're going to tell

00:15:58.480 --> 00:16:03.220
you that it's this server rather than that server. So you get a faster local machine and all sorts of

00:16:03.220 --> 00:16:11.020
interesting stuff here. This is free. What? Or this is free for the first 20 million DNS lookups.

00:16:11.020 --> 00:16:16.260
And then it's like 10 cents per million. So for us, right, we're going to do, it looks like 2 million

00:16:16.260 --> 00:16:22.460
free, right? We could be 10 times more popular before we pay a few cents. So the reason this is cool

00:16:22.460 --> 00:16:27.540
is you can set this up and then switch your domain. And then as soon as you just change the name,

00:16:27.700 --> 00:16:31.040
you can get it all dialed in and you don't have to have this kind of like awkward downtime in the

00:16:31.040 --> 00:16:34.760
middle. So people can check this out. There's other ones. Cloudflare has something similar.

00:16:34.760 --> 00:16:38.020
DigitalOcean has something similar, but this one is super, super neat.

00:16:38.020 --> 00:16:38.920
That's pretty cool.

00:16:38.920 --> 00:16:42.800
Yeah. And Tony says similar to what you can do in Cloudflare. Yeah. They're both CDN providers.

00:16:42.800 --> 00:16:46.720
They both have like similar stories. Okay. I'm going to go faster now because I have more.

00:16:47.080 --> 00:16:56.980
I wrote a cool, say blog post type thing that shows you how to use warp to hide all your terminal

00:16:56.980 --> 00:17:00.380
secrets. Look at this, Brian. So here, welcome to Ubuntu. I'm not going to say what version.

00:17:00.380 --> 00:17:04.400
And here's your IP addresses. We're not going to say what those are, but if, so if you're doing

00:17:04.400 --> 00:17:10.500
presentations that somehow involve working with terminal stuff that might accidentally reveal

00:17:10.500 --> 00:17:14.520
something like, what is an IP address that you shouldn't have? Or what is an API key or something?

00:17:14.580 --> 00:17:19.160
If you use warp, all you got to do is check a box and say, obscure all my secrets. And now

00:17:19.160 --> 00:17:22.740
your presentations are safer. Isn't that cool? Yeah. That's pretty neat.

00:17:22.740 --> 00:17:27.740
Yeah. So talked about warp before, but I, that is new. I think it's a new feature, but anyway,

00:17:27.740 --> 00:17:34.040
it's cool. We also have a supporting developer in residence. Lukash Lenga says, welcome. We have

00:17:34.040 --> 00:17:40.200
Peter Victorin now as a supporting developer in residence working with Lukash. So we now have

00:17:40.200 --> 00:17:46.620
two times the help over there because Lukash has been so successful keeping Python moving

00:17:46.620 --> 00:17:49.400
forward. They're now getting more folks. So that's pretty awesome, right?

00:17:49.400 --> 00:17:50.860
Yeah. And thank you.

00:17:50.860 --> 00:17:51.840
They successfully cloned him.

00:17:51.840 --> 00:17:57.960
Yeah, they did. He's now an AI. No, just kidding. Also that was sponsored by Bloomberg. So shout

00:17:57.960 --> 00:18:04.800
out to Bloomberg for being excellent. Joe sent us two things that are pretty funny. They're almost

00:18:04.800 --> 00:18:10.220
worthy of like a joke type of thing, but I thought I would just share them. So he decided to embody

00:18:10.220 --> 00:18:17.860
various songs through Python. So we have the Bohemian Rhapsody and we have Money for Nothing by Dire

00:18:17.860 --> 00:18:24.280
Straits. So remember, it's like, I just want my MTV, right? Money for Nothing, all that. So they got the

00:18:24.280 --> 00:18:29.800
class MTV. I'm linking to the show notes. Of course you can pull up, you know, starts out with self.

00:18:29.800 --> 00:18:38.580
Want equals nothing. Print Money for Nothing. And then it goes, all I want is my MTV. And it sort

00:18:38.580 --> 00:18:43.240
of cycles through that. You know, look at those yo-yos. That ain't working. Maybe get a blister on

00:18:43.240 --> 00:18:49.620
your little finger, right? It's got like working, false, do, true, money, cost of zero. It's pretty

00:18:49.620 --> 00:18:54.760
awesome. Guy's dumb, little blister, you know, guy's dumb as false, right? So if you kind of want to

00:18:54.760 --> 00:19:01.840
enjoy this musical melody here. Does it run? I'll have to try it out. I'm sure that it does run. Yeah.

00:19:01.840 --> 00:19:11.020
Yeah. So, well, OS.system. Install microwave dash ovens. Oh. Echo. I mean, you know, custom kitchen

00:19:11.020 --> 00:19:16.580
deliveries, refrigerators, moving color TVs. I don't know if I'd run it actually, but there's a

00:19:16.580 --> 00:19:21.920
similar one from Bohemian Rhapsody. It's pretty funny. So people can check that out. Don't you

00:19:21.920 --> 00:19:26.460
regularly just download random code and run it? Well, when I see OS move, maybe not.

00:19:26.460 --> 00:19:34.300
PyCascades is coming to Seattle in 2024. Their call for proposals is out. So people can check that out.

00:19:34.300 --> 00:19:38.520
It's a fun conference. If you're in the Pacific Northwest or want to go to the Pacific Northwest,

00:19:38.520 --> 00:19:44.380
you can see the little banner wrapper thing. CFP is open. Okay. So some interesting nomenclature

00:19:44.380 --> 00:19:49.820
coming for us in the world is free threaded Python. Have you heard this? Free threaded Python?

00:19:49.820 --> 00:19:55.180
I didn't know we were charging for threads. I know this one is like, it's a total freemium model.

00:19:55.180 --> 00:20:02.180
So with the no gil work, with the sub interpreter work, all these different ways in which Python runs

00:20:02.180 --> 00:20:08.880
more concurrently, especially the no gil stuff, there's a plan to basically call it free threaded

00:20:08.880 --> 00:20:14.100
Python, not no gil. Because no gil is how it's free threaded, but free threaded is the point. You know,

00:20:14.100 --> 00:20:20.300
it's like, okay, yeah, I have a gas exploding mobile. Like I have a thing that drives. I don't

00:20:20.300 --> 00:20:26.560
care about the driving, not the gas exploding, right? Similar type thing here. So Seth, Michael

00:20:26.560 --> 00:20:31.540
Larson points out that this has been blocked on PyPI to make way for this is interesting.

00:20:31.540 --> 00:20:39.020
This redistributions of the Python runtime compiled with the free threaded mode, i.e. no gil. So one,

00:20:39.080 --> 00:20:43.740
we're calling it free threaded Python two, you might be able to pip install Python. I don't know.

00:20:43.740 --> 00:20:51.540
Okay. So that's, that's that one. Next. There's a very interesting letter, open letter to the Python

00:20:51.540 --> 00:20:58.320
South for a foundation from Python, Python, Africa. And apparently there's been a lot of, I don't know

00:20:58.320 --> 00:21:05.660
what the right way to point it, but it is basically not that great a support for Python in Africa.

00:21:05.660 --> 00:21:10.740
I just want to sort of put this out there. They wrote it. People can check it out and read it,

00:21:10.740 --> 00:21:15.700
but would like, just would like to see better support for reaching out to folks in Africa and

00:21:15.700 --> 00:21:20.820
have the PSF maybe be a little bit better supporter for it. There's been a lot of contention around it.

00:21:20.820 --> 00:21:27.920
So check that out. It's worth knowing. Okay. And then we have, oh yeah, it's, it's not super congruent

00:21:27.920 --> 00:21:34.260
with the mission of the PSF on a couple of levels. One, like PSF is there to promote the Python

00:21:34.260 --> 00:21:39.820
language. And this is a lot of like, we need you to make this social change or you're not going to

00:21:39.820 --> 00:21:45.220
have a conference in Africa. Seems a little incongruent with the mission about supporting

00:21:45.220 --> 00:21:54.660
Python. I don't know. Python, moving on Python 3.12.1, the first major update of 3.12 is out. So

00:21:54.660 --> 00:22:00.040
people can check that out. It contains many new features and optimizations with over more than

00:22:00.040 --> 00:22:05.300
400 bug fixes. So we don't like bugs in our code and 400 of them. We definitely don't want that many.

00:22:05.300 --> 00:22:13.680
Yeah. Along with that came the 3.11.7 release. Okay. All right. Update your Pythons. Update your

00:22:13.680 --> 00:22:18.860
Pythons. Everybody gets their new Pythons. Final one. And this one could be a joke, but it's just

00:22:18.860 --> 00:22:26.920
too visual. It's really awesome. Let me make sure I credit this one correctly. So Johannes Lippmann,

00:22:26.920 --> 00:22:33.020
when he heard you talk about the Obfuscated Python code contest, this is the first international one,

00:22:33.020 --> 00:22:39.780
by the way. Okay. Okay. The Obfuscated Python code contest. He's like, I got to be part of this. So not

00:22:39.780 --> 00:22:44.900
only was he part of it, but he won. He won the most introspective of them all.

00:22:45.240 --> 00:22:52.040
It's beautiful too. Check this out. So if we go here, it's literally the letters PY and a bunch of

00:22:52.040 --> 00:22:59.900
insane symbols in the most wild, wild way possible. Like this, if you open it up, it's just like

00:22:59.900 --> 00:23:06.880
ASCII art PY. Yeah. What this does when you run it, is it annotates, oops, go back. When it

00:23:06.880 --> 00:23:10.300
annotates, there's always like, so you don't have to run it. You can just click the image. Is it

00:23:10.300 --> 00:23:16.640
basically annotates and colorizes the Xenopython? Oh, that's so cool. Yeah. And so you can check out

00:23:16.640 --> 00:23:22.240
other ones too, right? I haven't even looked at the most roundabout one. He's also highlighting

00:23:22.240 --> 00:23:29.640
which, which portions of the Xenopython his code is completely ignoring. Yes, exactly. Yeah. So these

00:23:29.640 --> 00:23:34.160
are fun and people can check them out. You got the image, but this one has a movie even. So instead of

00:23:34.160 --> 00:23:37.940
just a picture, the first, the winner, I guess it's not the number one winner. There's just different

00:23:37.940 --> 00:23:44.040
categories. The most puzzling is by Moshe. Oh, wow. And it's like a maze, which is,

00:23:44.040 --> 00:23:49.440
which is amazing. That is amazing. Oh, that was well done. Very well done. Okay. So that's it for

00:23:49.440 --> 00:23:54.920
all of my, my extras. Okay. Over to you. That's my extra, extra, extra segment, which was very extra.

00:23:54.920 --> 00:24:03.240
I just have a couple extras. We've covered this before. Microsoft Python for VS Code has a, has a

00:24:03.240 --> 00:24:09.220
December 23 release. Actually, we haven't covered that, but looking in the, that came out on the

00:24:09.220 --> 00:24:19.080
7th. And the, within this December release has an announcement that, oh, there's a, oh yeah,

00:24:19.080 --> 00:24:26.180
I had it already highlighted. The Python test adapter rewrite experiment. If you don't remember this,

00:24:26.540 --> 00:24:35.900
it was back in, it started in June. They, they did a change where they were working on, you had to,

00:24:35.900 --> 00:24:43.640
you had to opt in to the change of how VS Codes test, how test discovery was working. Anyway,

00:24:43.640 --> 00:24:49.960
I reckon I always, I, we covered it because I recommended everybody turn it on. You, now that is

00:24:49.960 --> 00:24:54.160
being rolled out to a hundred percent of the users. So now you have to opt out of it. If you want to,

00:24:54.160 --> 00:24:59.200
if you don't want it, but don't opt out of it, the test discovery, just update your VS Code and

00:24:59.200 --> 00:25:03.980
you'll have better test discovery. Now, super cool. The test discovery is so much better now than it

00:25:03.980 --> 00:25:09.760
was before. Thank you everybody that worked on Python for VS Code or worked on this part of it. So

00:25:09.760 --> 00:25:17.900
that's pretty cool. The other extra I wanted to, to mention was, was Daniel Roy Greenfield wrote a

00:25:17.900 --> 00:25:23.580
little tip and I always, I kept meaning to do this and I've always forgotten. So now this I'm

00:25:23.580 --> 00:25:32.840
going to do it this time is a set in my shell script RC files, set pip require virtual and to true.

00:25:32.840 --> 00:25:37.960
And that will make it so that if you try to pip install something and you're not in a virtual

00:25:37.960 --> 00:25:44.640
environment, it will, it will not do it. And it will just complain. So I never mean to pip install

00:25:44.640 --> 00:25:49.100
anything unless I'm in a virtual environment. So this is, this is good. I like this.

00:25:49.100 --> 00:25:53.920
Yeah, that's, that's cool. There's a lot of these sort of environmental settings that can control

00:25:53.920 --> 00:25:55.460
things that are not entirely obvious, right?

00:25:55.460 --> 00:26:00.400
Yeah. Big, good, good blog posts. So write up some of the ones you should really know about.

00:26:00.400 --> 00:26:03.980
Absolutely. Well, there you go. Fire up your Hugo. Let's go.

00:26:05.700 --> 00:26:09.940
Yeah. So that's, those are my extras. So would you say you got to do a lot of research to maybe

00:26:09.940 --> 00:26:14.800
find all those particular environment variables stuff might really be overwhelming. So check out

00:26:14.800 --> 00:26:20.300
this joke, Brian. Okay. It comes to us from Ray on Mastodon. It's a sticker and I kind of want this

00:26:20.300 --> 00:26:25.060
sticker. It's got a bunch of tabs at the top. It says my brain has too many tabs open. Four of them

00:26:25.060 --> 00:26:30.920
are frozen and I have no idea where the music is coming from. Oh my gosh. It's amazing. Yeah.

00:26:30.920 --> 00:26:36.260
I have no idea where the music is coming from. That, that happens to be so, I guess it must

00:26:36.260 --> 00:26:40.680
happen to everybody so often. It's like there's music playing and I have no idea which tab is

00:26:40.680 --> 00:26:47.140
playing music. I know it, it, it has like a little like a speaker light icon that you can see

00:26:47.140 --> 00:26:52.260
if it's going, but yeah, I feel like this little sticker describes both my Monday mornings and my

00:26:52.260 --> 00:26:57.360
Friday evenings or afternoons. It's like, Oh, I can't deal. It's like, what is going on here?

00:26:57.360 --> 00:26:59.700
Too much in life. Yeah. That's funny.

00:26:59.860 --> 00:27:06.380
I need this sticker. I do too. So I do too. All right. Well, thank you for the episode as

00:27:06.380 --> 00:27:08.880
always. And thank you everyone for listening. Yes. Thank you.

