WEBVTT

00:00:00.001 --> 00:00:05.800
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.800 --> 00:00:10.960
This is episode 303, recorded September 27th, 2022.

00:00:10.960 --> 00:00:12.380
And I am Brian Okken.

00:00:12.380 --> 00:00:13.580
And I'm Michael Kennedy.

00:00:13.580 --> 00:00:18.220
We've got a lot of great stuff to talk about today, and it's a wonderful September day.

00:00:18.220 --> 00:00:22.680
It's finally kind of not feeling like the blazing summer, but it's still too hot.

00:00:22.680 --> 00:00:27.220
It's that lovely fall before it rains for 120 days straight.

00:00:27.220 --> 00:00:29.040
It's like the pre-fake fall, yeah.

00:00:29.040 --> 00:00:29.760
Exactly.

00:00:30.300 --> 00:00:30.620
Exactly.

00:00:30.620 --> 00:00:35.780
All right, well, the Python news still flows in the fall.

00:00:35.780 --> 00:00:36.460
Yes.

00:00:36.460 --> 00:00:37.420
All sorts of good stuff.

00:00:37.420 --> 00:00:37.940
Yeah.

00:00:37.940 --> 00:00:41.540
But what I got on deck for us is a bit of a follow-up.

00:00:41.540 --> 00:00:49.880
So I got this message from Michael Honkala, who sent over this repo that he put together.

00:00:49.880 --> 00:00:55.940
It says, you spoke about Humre, H-U-M-R-E, H-U-M-R-E.

00:00:55.940 --> 00:00:57.040
And I said, you know what?

00:00:57.120 --> 00:01:00.860
There's a bunch of these projects that I'd really like to kind of get my head around them.

00:01:00.860 --> 00:01:12.300
And so he went to all the trouble to do a whole research project and a categorization or a taxonomy of these different libraries, which is really fantastic.

00:01:12.520 --> 00:01:16.640
So I'm linking to his GitHub repository that is basically a readme.

00:01:16.640 --> 00:01:20.600
I mean, GitHub's kind of the new blog for code analysis, isn't it?

00:01:21.300 --> 00:01:26.240
And it says, R-E for humans, regular expressions for humans.

00:01:26.240 --> 00:01:29.080
And it says, there's a bunch of different options.

00:01:29.080 --> 00:01:31.600
This list could be useful to help you decide.

00:01:31.600 --> 00:01:35.240
You know, if you're looking for a tool, you'll just know what's out there.

00:01:35.280 --> 00:01:39.900
You'll get a quick look and feel of how each library's API is.

00:01:39.900 --> 00:01:47.980
Or if you're thinking about building a tool, you can check out the alternative approaches and either contribute to an existing package or see if your thing is truly unique.

00:01:47.980 --> 00:01:53.780
And if you're building a tool or already have one, you can communicate your differences compared to the other libraries.

00:01:53.780 --> 00:01:54.360
Okay.

00:01:54.360 --> 00:01:58.960
So there's a bunch of packages listed here with some code examples.

00:01:59.260 --> 00:02:05.380
So the first one Mikio calls flow style regular expression generators.

00:02:05.380 --> 00:02:07.620
I would call them fluent style.

00:02:07.620 --> 00:02:12.680
But where you say, you know, function call dot function call dot function call dot function call.

00:02:12.680 --> 00:02:19.380
Basically, the result of working with a library or calling a function, it returns the same thing again and again.

00:02:19.380 --> 00:02:20.860
And you can kind of build it up.

00:02:20.860 --> 00:02:22.460
Like ORMs are a lot like this.

00:02:22.460 --> 00:02:30.000
You know, you say like objects dot filter dot order by dot limit dot sort like that kind of model.

00:02:30.000 --> 00:02:31.100
Okay.

00:02:31.100 --> 00:02:40.060
So these include Python verbal expressions, edify, mre, regularize, and re underscore patterns.

00:02:40.060 --> 00:02:43.160
And they all are similar but not the same.

00:02:43.160 --> 00:02:48.240
So I'll just, I'll read something off the top one, the Python verbal expressions.

00:02:48.240 --> 00:02:59.000
You would say ver x for version expression dot anything dot then space dot then left bracket dot or parenthesis.

00:02:59.000 --> 00:03:02.820
So square bracket or, you know, open square bracket, open parenthesis, then dot anything.

00:03:02.820 --> 00:03:14.120
And that'll generate a regular expression that would then go and, you know, match basically like star and then space and then either square bracket or parenthesis open.

00:03:14.120 --> 00:03:14.680
What do you think?

00:03:14.800 --> 00:03:19.160
I don't know if we're getting better than actual regular expressions at this point.

00:03:19.160 --> 00:03:20.040
All right.

00:03:20.040 --> 00:03:22.160
Well, let's go to the next category then.

00:03:22.160 --> 00:03:27.100
These are categorized as plus style regular expression generators.

00:03:27.100 --> 00:03:31.360
I would call them ones that like overload operators, right?

00:03:31.360 --> 00:03:35.960
They override what plus means and the pipe what that means.

00:03:35.960 --> 00:03:41.720
And it's a little bit like what PathLab does for forward slash or time delta, right?

00:03:42.240 --> 00:03:42.380
Yeah.

00:03:42.380 --> 00:03:45.800
So here I could say, you know, this includes the humorex.

00:03:45.800 --> 00:03:47.500
That's the one from Alstor Weigert.

00:03:47.500 --> 00:03:52.540
So this, the, let's see, which one of these do I think that I like the best.

00:03:52.540 --> 00:03:54.660
I'll probably go with this, this first one here.

00:03:54.660 --> 00:04:01.560
So you could say capture one or more of anything uppercase plus the empty string or the string of the space rather,

00:04:01.560 --> 00:04:05.520
plus either the open parenthesis or the open square bracket.

00:04:05.520 --> 00:04:07.800
Is that one, do you like this style better?

00:04:09.000 --> 00:04:14.520
Well, I'm probably a bad one to ask because I actually, I don't have a problem with regular expressions.

00:04:14.520 --> 00:04:15.200
Sure.

00:04:15.200 --> 00:04:17.900
Well, neither of these two are my favorite style either.

00:04:17.900 --> 00:04:24.260
I actually think I would use the format strings and the reason, which is the third category.

00:04:24.260 --> 00:04:32.060
And the reason I say that is it's really different than regular expressions where these are kind of like a semantic wrapper on regular expressions.

00:04:32.260 --> 00:04:43.480
You know, there's like a way, like I call functions, I give a name to the thing instead of just the symbol, like plus versus, you know, plus star dot star.

00:04:43.480 --> 00:04:45.680
It could be anything or you could say, you know, anything.

00:04:45.680 --> 00:04:49.860
Also with, with all of these, they have a special syntax that they use.

00:04:49.860 --> 00:04:54.660
So you don't have to learn regular expressions exactly, but you still have to learn their syntax.

00:04:55.060 --> 00:04:55.800
Yeah, that's true.

00:04:55.800 --> 00:05:08.640
So when I might use one of these libraries is when it's like not enough to go do full on regular expressions, but, you know, find is not sufficient or index, things like that.

00:05:08.960 --> 00:05:11.760
And that's these string format styles.

00:05:11.760 --> 00:05:21.780
So if you knew I had like a log file or something and it said power colon, some number, a percent, a string, and then a temperature, then another number.

00:05:21.780 --> 00:05:24.440
You could just say power.

00:05:24.440 --> 00:05:32.360
This is the scan F library, power colon, percent F bracket, percent, percent S comma, and then temp.

00:05:32.360 --> 00:05:40.460
So you, you would basically, the format string you would use to generate this thing can now be used to parse it in reverse.

00:05:40.460 --> 00:05:44.600
And so it'll say, you have to have the word power colon and then a floating point number.

00:05:44.600 --> 00:05:45.960
And then, and so on.

00:05:45.960 --> 00:05:50.100
That's the older, that's, that's the Python two style, I suppose.

00:05:50.100 --> 00:05:58.760
Then you have pars and simple match, which are both much more F string style.

00:05:58.760 --> 00:06:00.720
So you, so they have a.

00:06:00.720 --> 00:06:01.780
These are great.

00:06:01.780 --> 00:06:04.080
So like, I'm looking at parse and that looks.

00:06:04.080 --> 00:06:04.580
Yeah.

00:06:04.580 --> 00:06:05.660
That looks pretty cool.

00:06:05.660 --> 00:06:06.840
So here, yeah.

00:06:06.840 --> 00:06:11.320
Parse the, it says, here's the regular expression pattern thing you would make.

00:06:11.320 --> 00:06:20.040
You would say just as a string to get curly bracket amount, colon D item, colon W comma, meet me at curly time.

00:06:20.040 --> 00:06:20.280
Right.

00:06:20.280 --> 00:06:29.440
And it just goes and finds the amount, the time and the item as a beautiful, you know, it just like is a, basically it's a reverse F string is what it is.

00:06:29.440 --> 00:06:34.320
So if you can express what you're looking for as an F string, then all of a sudden you can get it back.

00:06:34.320 --> 00:06:40.100
And so for those kinds of matches, I think this is really, this is a, it's pretty different than a regular expression.

00:06:40.100 --> 00:06:48.040
It is, but it's, it's especially those ones where you're, you're not just trying to match a string, but you're trying to pull data out.

00:06:48.040 --> 00:06:48.500
Yes.

00:06:48.620 --> 00:06:50.720
Where the regular expressions really get ugly.

00:06:50.720 --> 00:06:51.500
They do.

00:06:51.500 --> 00:06:54.060
You got like, I got to have a capture group and all this stuff.

00:06:54.060 --> 00:06:56.520
And you're like, oh, geez, like how do I do that again?

00:06:56.520 --> 00:06:57.440
Exactly.

00:06:57.440 --> 00:07:03.620
And the, and the capture groups and it's guaranteed to confuse somebody on your team, but something like this, I think it's pretty neat.

00:07:03.620 --> 00:07:04.180
Yeah.

00:07:04.500 --> 00:07:09.960
It does mean the data has to be more structured, but if it's highly unstructured, go crazy with regular expressions.

00:07:09.960 --> 00:07:14.040
If you just need more than, like I said, a little more than find or index, this is pretty cool.

00:07:14.040 --> 00:07:14.660
Yeah.

00:07:14.660 --> 00:07:15.060
Yeah.

00:07:15.060 --> 00:07:22.100
There's some wacky things that really you need to jump into regular expressions or, or the, the other kinds.

00:07:22.100 --> 00:07:23.360
Indeed.

00:07:23.360 --> 00:07:24.280
All right.

00:07:24.280 --> 00:07:33.820
Well, Mikkel put his thoughts on which ones to pick and when, and then a little bit more diving into each of these and some, some comparisons and whatnot.

00:07:33.820 --> 00:07:36.040
So you can check this out.

00:07:36.040 --> 00:07:36.940
It's really good work.

00:07:36.940 --> 00:07:42.540
If you know of other ones, maybe contribute to them or add some more explanations, but there you have it.

00:07:42.540 --> 00:07:43.100
This is really nice.

00:07:43.100 --> 00:07:43.480
Yeah.

00:07:43.480 --> 00:07:43.720
Yeah.

00:07:43.720 --> 00:07:44.380
This is real nice.

00:07:44.500 --> 00:07:45.080
I'm going to start.

00:07:45.080 --> 00:07:46.740
I looks like I may have already started.

00:07:46.740 --> 00:07:47.200
So let's go.

00:07:47.200 --> 00:07:48.620
Cool.

00:07:48.620 --> 00:07:50.760
Thanks Mikkel for sending that in and creating it.

00:07:50.760 --> 00:07:52.200
Well, what do I got?

00:07:52.200 --> 00:07:55.920
I got, it's just some sort of news ish sort of things.

00:07:55.920 --> 00:08:03.360
So I've been playing with a Pydantic and FastAPI and a lot.

00:08:03.360 --> 00:08:06.100
And with that, you've got types.

00:08:06.100 --> 00:08:13.940
So you're, you're intentionally adding types, not just because you want my pie to pass, but you're adding types

00:08:13.940 --> 00:08:14.920
types because it helps you.

00:08:14.920 --> 00:08:18.400
You can't have to for FastAPI and stuff and Pydantic.

00:08:18.400 --> 00:08:29.160
So one of the things I, one of the things I was curious about is the whole, the optional part, because somebody actually caught me on this.

00:08:29.200 --> 00:08:34.660
I tend to say, I tend to say, like, int x equals none.

00:08:35.660 --> 00:08:38.580
Or no, x of type int equals none.

00:08:38.580 --> 00:08:46.280
And that means it's supposed to be an integer or it's supposed to be a string or something, but it doesn't have anything yet.

00:08:46.280 --> 00:08:47.740
So the default value is none.

00:08:47.740 --> 00:08:50.460
But none is obviously not a string or an integer.

00:08:50.460 --> 00:08:52.700
So what do you do?

00:08:53.500 --> 00:08:56.580
And so there's like a bunch of options.

00:08:56.580 --> 00:08:58.680
One, you could just say, well, the language allows it.

00:08:58.680 --> 00:08:59.460
So I'm going to do it anyway.

00:08:59.460 --> 00:09:01.900
But I don't recommend that.

00:09:01.900 --> 00:09:07.580
The other, the other is one option is to use optional, but there's some issues with that.

00:09:07.580 --> 00:09:08.780
We'll talk about those in a sec.

00:09:08.960 --> 00:09:13.600
And then another is just to union or in.

00:09:13.600 --> 00:09:21.460
So you can use, you use like int or int bar none or union of int and none, and then assign it to none.

00:09:21.460 --> 00:09:30.600
And, and so I, for a while, like when I, I, I'm like the language allows it just go find.

00:09:30.600 --> 00:09:36.720
Cause what I really mean, my intent is I expect somebody to pass in, in this case, an integer.

00:09:37.000 --> 00:09:44.420
But if, if the, if nobody passed, if they don't pass anything in, I want to, I want the function to handle that case also.

00:09:44.420 --> 00:09:46.400
And so that's what the none is for.

00:09:46.400 --> 00:09:50.800
The union is a little weird because it says you can pass in a none.

00:09:50.800 --> 00:09:57.420
And, and I, that would be weird for somebody to pass in none, but that's what our language is also.

00:09:57.420 --> 00:09:59.240
It like, that's the default.

00:09:59.240 --> 00:10:05.820
So I put out this, I put out a little survey, the recommendation that of the 630 votes,

00:10:06.020 --> 00:10:09.340
the, was either use the union or optional.

00:10:09.340 --> 00:10:11.640
It's kind of, people are kind of on the fence about with that.

00:10:11.640 --> 00:10:21.600
but, so Adam Johnson says, replied to just the other day said, well, my pie just released and they,

00:10:21.600 --> 00:10:27.680
they don't deprecate this yet, but there's going to be a future deprecation of implicit optional types.

00:10:27.680 --> 00:10:29.780
So you kind of can't use the old style.

00:10:29.780 --> 00:10:32.300
If you're using my pie also, you should.

00:10:32.300 --> 00:10:34.300
The old style being int equals none.

00:10:34.300 --> 00:10:35.140
Yeah.

00:10:35.140 --> 00:10:38.020
of just like ignore the type.

00:10:38.020 --> 00:10:38.660
Yeah.

00:10:38.660 --> 00:10:38.940
Yeah.

00:10:38.940 --> 00:10:39.880
For the default value.

00:10:40.320 --> 00:10:47.380
so, my pie, the my pie 0.9, 0.981.

00:10:47.380 --> 00:10:51.700
I don't know why we're not where it's zero version still, but, whatever.

00:10:51.700 --> 00:10:55.820
but it has, it talks about implicit optional types.

00:10:55.820 --> 00:11:01.000
So this, yeah, of saying it's a string, but the default value is none.

00:11:01.000 --> 00:11:02.440
That's, that's bad.

00:11:02.440 --> 00:11:03.780
we don't want that anymore.

00:11:03.780 --> 00:11:07.500
What we want is, optional.

00:11:07.500 --> 00:11:12.600
We'll say we'll work and it'll say, you know, what, then this is the weird part.

00:11:12.600 --> 00:11:15.760
So the weird part is optional, isn't optional.

00:11:15.760 --> 00:11:24.480
So what, what I'd like to use as optional, like in, in, in FastAPI, it looks nice to say this, this variable is optional,

00:11:24.480 --> 00:11:32.440
but it, what really optional means is, is just that it optional just translates to the type or none.

00:11:32.440 --> 00:11:32.860
Yeah.

00:11:32.860 --> 00:11:33.220
That's it.

00:11:33.220 --> 00:11:34.100
Those are the types.

00:11:34.100 --> 00:11:36.160
It doesn't say it's actually optional.

00:11:36.160 --> 00:11:37.060
It's only optional.

00:11:37.060 --> 00:11:42.680
If you, if you have a default value, the default value makes a right option.

00:11:42.680 --> 00:11:42.840
Yeah.

00:11:42.840 --> 00:11:48.140
You can have a thing that explicitly says this type is optional, but it's a required parameter, which is a little odd, right?

00:11:48.140 --> 00:11:49.260
Yeah.

00:11:49.260 --> 00:11:51.180
What's up with that?

00:11:51.180 --> 00:11:51.880
Yeah.

00:11:51.880 --> 00:11:53.400
So a required optional.

00:11:53.400 --> 00:12:00.900
so anyway, the third parameter named such and such of this type is required, like, but it's literally of type optional.

00:12:00.900 --> 00:12:01.200
Yeah.

00:12:01.200 --> 00:12:01.760
I hear you.

00:12:01.760 --> 00:12:01.940
Okay.

00:12:01.940 --> 00:12:02.500
That makes sense.

00:12:02.500 --> 00:12:12.560
So the basic just is you have to pick, you got to pick either optional, use an optional and then assign it to none or use, use a union.

00:12:12.800 --> 00:12:18.600
But another, you know, another, option is just to actually assign something other than none.

00:12:18.600 --> 00:12:23.240
So if it's a string, you could have a, a flag value to say like sentinel.

00:12:23.400 --> 00:12:23.840
Yeah.

00:12:23.840 --> 00:12:23.880
Yeah.

00:12:23.880 --> 00:12:27.720
That means like an empty string, like a, a, a great one for a string is empty string.

00:12:27.720 --> 00:12:28.320
Yeah.

00:12:28.320 --> 00:12:31.660
The problem is with numbers like a floating point or an integer number.

00:12:31.660 --> 00:12:33.800
There aren't any sentils, sentinels.

00:12:33.880 --> 00:12:38.580
I mean, I guess you could use Nan, not a number, but it's weird.

00:12:38.580 --> 00:12:42.300
anyway, wanted to reference typing.

00:12:42.300 --> 00:12:48.860
So just to say my proof that optional is really just the union of the type or none, it doesn't say anything.

00:12:48.860 --> 00:13:01.900
And there, and they, they explicitly say in the Python documentation that you can, you basically, you don't have to use option, the keyword option or you could just put a default value that makes it optional.

00:13:01.900 --> 00:13:04.080
But yeah, it's only a type anyway.

00:13:04.080 --> 00:13:09.580
but the other thing, the last bit I wanted to talk about with this is the best introduction.

00:13:09.580 --> 00:13:21.040
If you're confused, like I still am apparently about this, the best discussion that I've found is in the FastAPI docs, and go to, there's a Python types intro.

00:13:21.040 --> 00:13:26.600
And, like at the top part way down, it says possibly none.

00:13:26.600 --> 00:13:34.180
and it discusses all of this and the FastAPI recommendation is, is to use union instead of optional.

00:13:34.180 --> 00:13:41.920
And I think I've finally gotten there that I think I prefer just the either union or if you're in the bar thing.

00:13:41.920 --> 00:13:45.240
So you can say type or like type bar none.

00:13:45.240 --> 00:13:49.100
And that that's, if you're only in, if you're Python three 10, that works.

00:13:49.100 --> 00:13:53.200
But, if you're, the, on the others, I would use union.

00:13:53.200 --> 00:13:59.340
So, ah, there's a bit of a, a voting and the audience.

00:13:59.420 --> 00:14:03.500
Alvaro says int or none, which is a voting for that one.

00:14:03.500 --> 00:14:07.480
Anthony says, I prefer optional of int equals none myself.

00:14:07.480 --> 00:14:15.940
I also concur with Anthony, but I still very much would love to see some language syntax.

00:14:16.180 --> 00:14:27.300
It's a little bit cleaner, like in C# in Swift, they just have question mark at the end to say it's either can be none or it can be its value.

00:14:27.300 --> 00:14:30.480
And it's just such a common thing to set something to none.

00:14:30.480 --> 00:14:39.060
And then, or alternatively have its value that I would just, I would love to see some kind of simpler syntax there than, than we see now.

00:14:39.060 --> 00:14:46.880
But yeah, or some other, some other Sentinel that like, like SQL doesn't SQL have like null or something like that.

00:14:46.880 --> 00:14:49.800
That's just, that's not a legitimate value for anything.

00:14:49.800 --> 00:14:51.380
yeah.

00:14:51.380 --> 00:14:57.800
And also if we use, by the way, one more reason, I think people would want the question mark or something.

00:14:57.800 --> 00:15:02.620
I think it would be cool is, is it gives you this tonal inflection, right?

00:15:02.620 --> 00:15:06.260
Like this function takes an int boom, hard, hard stop.

00:15:06.260 --> 00:15:09.000
Like that means it has to be an int where it's like a, an int.

00:15:09.000 --> 00:15:10.620
Well, then you're not sure it's optional.

00:15:10.620 --> 00:15:12.960
Or you're not sure what type it is.

00:15:12.960 --> 00:15:13.460
Yeah.

00:15:13.460 --> 00:15:14.960
I think it's an int.

00:15:14.960 --> 00:15:16.180
Yeah.

00:15:16.180 --> 00:15:17.620
So in question mark, come on.

00:15:17.620 --> 00:15:23.140
It's in all, it's in a lot of the other languages that have this, like things that can't be nullable unless you express their null.

00:15:23.140 --> 00:15:26.140
You say they can possibly take on their value or null.

00:15:26.800 --> 00:15:32.760
Anyway, I know this has been discussed and, and shot down, but yeah, we make it happen.

00:15:32.760 --> 00:15:34.460
And I was pretty sure you could do this.

00:15:34.460 --> 00:15:34.940
Thank you.

00:15:34.940 --> 00:15:43.860
Alvaro mentioned that you can use, you can use from future important annotations to use the bar for everything on three, eight and above.

00:15:43.860 --> 00:15:45.980
So that that's good.

00:15:45.980 --> 00:15:51.400
And, but like, like for, like if I'm doing a FastAPI, the optional is really what I mean.

00:15:51.400 --> 00:15:58.480
And that, that I mean it's optional, but it's frustrating that the type optional doesn't actually fill in anything.

00:15:58.480 --> 00:15:59.040
Yeah.

00:15:59.040 --> 00:15:59.720
Yeah.

00:15:59.720 --> 00:16:01.840
So a bit of a mismatch there.

00:16:01.840 --> 00:16:03.680
Okay.

00:16:03.680 --> 00:16:04.840
That's enough.

00:16:04.840 --> 00:16:05.840
That is enough.

00:16:05.840 --> 00:16:06.540
Enough on that.

00:16:06.540 --> 00:16:08.580
It's, it is so good though.

00:16:08.580 --> 00:16:10.040
Good, good stuff that those types are there.

00:16:10.040 --> 00:16:12.860
Brian, you want to tell us about our sponsor for the week?

00:16:12.860 --> 00:16:13.680
Sure.

00:16:13.680 --> 00:16:18.800
so Microsoft start Microsoft for startups founders hub.

00:16:18.800 --> 00:16:20.340
It's, it's very cool.

00:16:20.340 --> 00:16:36.260
So Microsoft, this episode of Python bites is brought to you for micro by Microsoft for startups and the Microsoft for startups founders hub provides all founders at any stage with free resources to help you solve startup challenges, challenges.

00:16:36.260 --> 00:16:38.800
and it, it's a platform.

00:16:39.120 --> 00:16:47.860
The platform provides technology benefits, access to expert guidance and skill resources, mentorship and networking connections, and so much more.

00:16:47.860 --> 00:16:54.140
and those skilled resources and the one-on-ones and the networking, it's so valuable.

00:16:54.140 --> 00:17:00.080
So unlike others in the industry, Microsoft for Startup Founders Hub doesn't require startups to

00:17:00.080 --> 00:17:06.720
be investor backed or third party validated to participate. It's truly open and you don't have

00:17:06.720 --> 00:17:12.100
to live in San Francisco. So what do you get? You get free access to GitHub and Microsoft Cloud with

00:17:12.100 --> 00:17:17.260
the ability to unlock credits over time. And they also have partnered with innovative companies like

00:17:17.260 --> 00:17:23.680
OpenAI, a global leader in AI research and deployment to provide exclusive benefits and

00:17:23.680 --> 00:17:30.580
discounts. Through the Founders Hub, becoming a founder is no longer about who you know. You'll

00:17:30.580 --> 00:17:36.180
have access to their mentorship network, giving you access to a pool of hundreds of mentors across a

00:17:36.180 --> 00:17:41.800
range of disciplines, across areas like validation, fundraising, management, and coaching, sales and

00:17:41.800 --> 00:17:46.660
marketing, as well as specific technical stress points. And you know that there's at least one or

00:17:46.660 --> 00:17:51.280
two of those fields that you need help in. You'll be able to book a one-on-one meeting with the

00:17:51.280 --> 00:17:56.440
mentors, many of whom were former founders themselves. Make your ideas a reality today with

00:17:56.440 --> 00:18:02.320
the critical support you'll get from the Founders Hub. To join the program, visit pythonbytes.fm

00:18:02.320 --> 00:18:07.240
slash foundershub 2022. And of course, the link is in our show notes.

00:18:07.240 --> 00:18:12.440
Absolutely. Thank you, Microsoft. All right. Let's talk about linters. I know you're a fan of

00:18:12.760 --> 00:18:19.560
linting code and making it look good, as am I. But if you did Cython, you might not be able to get

00:18:19.560 --> 00:18:28.080
great information about it. So Marco Gorelli sent in this project that he's just getting started called

00:18:28.080 --> 00:18:34.760
Cython Lint. So have you done much Cython? I know you do C and you do Python, but you live in this weird

00:18:34.760 --> 00:18:39.060
middle ground. I don't, but I want to. Or maybe I don't. I don't know.

00:18:39.380 --> 00:18:45.040
It's, I think it's pretty neat. You know, there's, there's a bit of a build, like a bit of a build

00:18:45.040 --> 00:18:50.080
step you got to go through to get code that will run. But the ability to just say, I wrote Python,

00:18:50.080 --> 00:18:54.720
it has type in. It's like, oh, let's just do a little bit different code. And now it runs at C speed

00:18:54.720 --> 00:18:58.780
for just like a function or two. I think that's a pretty appealing idea. And, you know, Cython is

00:18:58.780 --> 00:19:05.440
definitely a good way to do that. So Cython Lint, we'll go through and, you know, just pip install

00:19:05.440 --> 00:19:11.860
it and then run it as a command line, give it your files, or you can even install it as a pre-commit

00:19:11.860 --> 00:19:17.780
hook. And then, you know, it'll just, whenever you commit, it'll obviously run as well. Just like the,

00:19:17.780 --> 00:19:24.260
the no QA and flake eight, there's a hash new Cython Lint to turn off the lines. And it right now,

00:19:24.260 --> 00:19:29.780
mostly checks things around variables, but he's working on more and hopefully other people out

00:19:29.780 --> 00:19:35.620
there are interested in this and can add some ideas too. This is really cool. And I'm, I hope that he

00:19:35.620 --> 00:19:40.720
does get people helping out and adding to this. It's a, definitely it was something needed.

00:19:40.720 --> 00:19:48.720
Yeah. He said he ran it on pandas, numpy, scikit learn, and Qpy and found ways in which all those

00:19:48.720 --> 00:19:53.080
libraries could be cleaned up. So pretty neat. And all those libraries are notable because they're

00:19:53.760 --> 00:19:59.020
really highly, highly used and have been around for a long time. So if this is finding issues with

00:19:59.020 --> 00:20:03.540
them, then, you know, maybe it points out that something like this should exist. Yeah, definitely.

00:20:03.540 --> 00:20:08.160
Yeah. Cool. So not a whole lot more to say about it. You know, Cython's cool. Having some more tools

00:20:08.160 --> 00:20:15.980
to support it. Also cool. Yeah. I've got another sort of possibly short topic. I found out about

00:20:15.980 --> 00:20:21.700
this cool diff tool called diff tastic. Have you seen this before? Diff tastic? I don't think so.

00:20:22.200 --> 00:20:26.560
So I'm always looking for a better diff tool. I'm never really content with my diff tools. I use one

00:20:26.560 --> 00:20:30.760
called beyond compare. It looks like it's coding edge out of the early nineties.

00:20:30.760 --> 00:20:33.880
It's useful, but boy.

00:20:34.540 --> 00:20:41.340
So, I found, I'm finding that also, so I use diff a lot, but I also use it a lot within it with it,

00:20:41.340 --> 00:20:48.240
with respect, like within, with get. So I do, you know, you're doing a get diff of, of older

00:20:48.240 --> 00:20:55.340
versions or something. So diff tastic is, the, what's what, how it stands out against other diff

00:20:55.340 --> 00:21:02.500
tools is it's not line based. So it's a, it's a structural diff tool that understands syntax.

00:21:02.500 --> 00:21:08.200
So what it does is it evaluates, the language and tries to determine what language the file is in.

00:21:08.340 --> 00:21:14.280
And then, if it like, and it's got a ton of languages and if you, it figures out like it's

00:21:14.280 --> 00:21:19.740
Python for instance, or any other language, it creates an abstract abstract syntax tree of the

00:21:19.740 --> 00:21:26.880
files and then checks the differences of those. So, in the past, like one of the things that

00:21:26.880 --> 00:21:32.520
messes things up is just spacing problems. Like in, in, in something like C or C++,

00:21:32.580 --> 00:21:36.500
where spacing doesn't matter. You can just say, well, ignore white space, but in Python,

00:21:36.500 --> 00:21:42.880
you really can't say ignore white space because white space is significant, but with a diff tastic,

00:21:42.880 --> 00:21:48.900
uh, the diffs, we'll, we'll know you can, if it's significant white space, it'll tell you.

00:21:48.900 --> 00:21:56.780
So, I tried this out this morning and it's, it's pretty amazing. So, I tried it. So the,

00:21:56.780 --> 00:22:02.280
the thing I tried was, replacing with the diff tool. So there's a, with get, so in get,

00:22:02.280 --> 00:22:07.300
you can, you can say, and I just tried this single line thing to just temporarily say,

00:22:07.300 --> 00:22:16.240
I want to try get diff. It has, is diff T instead of, instead of get diff. so, what this

00:22:16.240 --> 00:22:22.540
does is it does a diff and you, and there's ways on in the, in the documentation that where you can

00:22:22.540 --> 00:22:29.060
permanently turn it on, but it's colorized. So you've got like syntax highlighted files side by side,

00:22:29.060 --> 00:22:33.060
and it'll show you what's different and it highlights the difference. Well, I got a little

00:22:33.060 --> 00:22:39.760
bit confused. because the syntax, there's syntax highlighting and highlighting to show you the

00:22:39.760 --> 00:22:44.980
difference. So, there's a flag and I, I'm not sure where it is in the documentation, but basically

00:22:44.980 --> 00:22:52.060
you just turn off, you say --syntax highlight equals off. So it turned, it turns off the file

00:22:52.060 --> 00:22:58.420
syntax, but it shows, so all the highlights are just diffs. and so like, if you, if you normally

00:22:58.420 --> 00:23:04.620
say get diff just without anything, it'll say what's different about my, my file versus the last version

00:23:04.620 --> 00:23:12.880
or the working directory or whatever, like what, what it usually does the right thing. And, and then,

00:23:12.880 --> 00:23:17.280
but it's like on top of each other, it's not side by side. So having it side by side, it's cool.

00:23:17.280 --> 00:23:23.380
And having it highlight. So I had a, some code where I changed stuff and I've been working

00:23:23.380 --> 00:23:29.500
at a month ago or so, and I forgot what I did and get diff show me just tons of changes, but diff

00:23:29.500 --> 00:23:36.220
tastic showed me that I was just changing some, some minor things like adding types, a couple types here

00:23:36.220 --> 00:23:42.520
and there or changing, double quotes or single quotes, double quotes. So I apparently ran black on

00:23:42.520 --> 00:23:48.940
it at one point. And, and there was like, Oh, sin AST wise, there's really nothing different. So I can

00:23:48.940 --> 00:23:54.480
just commit this and be done with it. so it was really helpful. It is a pretty interesting idea,

00:23:54.480 --> 00:23:58.380
right? Sometimes you really care about those little formatting differences and you want to make sure they

00:23:58.380 --> 00:24:03.720
get merged and committed. And other times you want to know what is the essence of the change. And this

00:24:03.720 --> 00:24:08.080
sounds like that'll answer that. That's pretty cool. And it showed me a bunch of stuff that get

00:24:08.080 --> 00:24:14.080
says change. There were file changes, but get, but diff tastic said there's no, there's no syntax

00:24:14.080 --> 00:24:20.640
change. So I apparently had changed some, you know, light, some formatting or something or ran black

00:24:20.640 --> 00:24:27.580
on it, but there was nothing significant change. So interesting on that. and apparently this was

00:24:27.580 --> 00:24:33.900
a huge pain in the butt to make, and, and there's a, we're going to link to a blog or blog

00:24:33.900 --> 00:24:40.680
article called, diff tastic, the fantastic diff, by, Wilfred Hughes, who wrote it that

00:24:40.680 --> 00:24:45.980
basically said he thought this was going to be sort of a minor thing to build. And it was a big thing to

00:24:45.980 --> 00:24:53.060
build. so six months later. Yeah. I'm not sure how long he spent on it, but yeah, but yeah. And

00:24:53.060 --> 00:24:57.840
here's a, here's a image of the little different highlighting the colors and changes and stuff.

00:24:57.840 --> 00:25:01.940
So anyway, it's nice. Yeah. Looks like a great tool. I've never heard of it. Thanks for,

00:25:01.940 --> 00:25:08.940
thanks for finding it. Alvaro out there says code --diff. I'm guessing that's VS Code diff.

00:25:08.940 --> 00:25:13.420
I've never, never done anything. I've never used that for my command line. I should try that.

00:25:13.420 --> 00:25:19.500
Yeah, perhaps. okay. also one that I've been looking at, I haven't gone into uses this one

00:25:19.500 --> 00:25:24.140
called kaleidoscope. That's just for Mac only, but it looks, it looks pretty interesting. It's

00:25:24.140 --> 00:25:30.920
supposed to work on code, but also on like, directories, but you know, images and other

00:25:30.920 --> 00:25:37.060
documents as well. So I don't know, maybe someday the only challenge, it looks beautiful. The only

00:25:37.060 --> 00:25:42.600
problem is a problem. It's the thing that has held me back is it's $150. So it better be darn good.

00:25:42.600 --> 00:25:45.260
At least there's a free trial. Maybe I'll try it someday.

00:25:45.260 --> 00:25:50.600
I volunteer you to try it out and get back to us. Exactly. Let me know how that goes.

00:25:50.600 --> 00:25:57.340
Yeah. All right. Well, that's our items, right? I got, I got an extra. If you're ready.

00:25:57.340 --> 00:26:01.380
Yeah. Let's go to extras. So this is not a Python thing, but a thing that

00:26:01.380 --> 00:26:08.160
developers may be interested in. Have you heard of next DNS? No. So one of the things that's a big

00:26:08.160 --> 00:26:17.660
hassle is spyware tracking, you know, all sorts of trackers like finger printers and, you know,

00:26:17.660 --> 00:26:25.540
Facebook cookies and all these different things that are trackers, which is not lovely. but also

00:26:25.540 --> 00:26:32.160
malware as well. And a lot of those are being served off of third party domains. So there's this product

00:26:32.380 --> 00:26:39.900
called next DNS and I'd never heard of it, but apparently it more or less acts like a firewall by

00:26:39.900 --> 00:26:46.780
not allowing malicious or unwanted things to resolve over DNS. Wow. So what you do is you just,

00:26:46.780 --> 00:26:52.620
you set it up and you just set your DNS server to be, you know, one, seven, two, four, or whatever their

00:26:52.620 --> 00:26:58.180
DNS server number is. And then it goes, everything goes through there. And if it says, Hey, we're trying

00:26:58.180 --> 00:27:01.420
to go to double click, you know, like, no, we don't know what double click is. It's not on the

00:27:01.420 --> 00:27:06.100
internet. I'm sorry. And just, there's no more ads. So it blocks a lot of the ads and trackers.

00:27:06.100 --> 00:27:13.000
And because it's a DNS service and not like, an ad blocker in your browser, it works on whole

00:27:13.000 --> 00:27:18.900
devices. So you could set it up on say your router and then everything, including your television and

00:27:18.900 --> 00:27:24.220
the mobile apps and everything on, they would all get this blocking, which I think is pretty cool.

00:27:24.220 --> 00:27:27.740
Pretty interesting. Yeah. I'm definitely going to check this out.

00:27:27.740 --> 00:27:34.680
I'm not quite ready to set it up on my, my router yet because every now and then you,

00:27:34.680 --> 00:27:42.280
you basically are forced to turn off your ad blocker for some small weird website. Or do I

00:27:42.280 --> 00:27:49.220
want to impose this on my wife? Maybe, maybe not. Do I want the tech support that like, so I'm on the

00:27:49.220 --> 00:27:53.740
fence, but I think it's a neat idea and I might play with it as well. You can always get it and just

00:27:53.740 --> 00:27:58.820
set it on your, your computer. Right. But if you wanted to like every device I have automatically gets

00:27:58.820 --> 00:28:05.580
malware and ad tracker blocking to put it on your router. Yeah. So, so one of the things, oh, do you

00:28:05.580 --> 00:28:11.300
have any other extras? No, that's it. Okay. So one of the things I've been trying, to block ads and

00:28:11.300 --> 00:28:17.880
stuff is, is I found out about this, a VPN called mall that mall VAD, I don't even know how to

00:28:17.880 --> 00:28:24.160
pronounce that. but it's pretty, it's been pretty good. it, it blocks a whole bunch of

00:28:24.160 --> 00:28:29.480
stuff. of course, switching to Vivaldi helps, you can turn, you can have a Vivaldi block stuff,

00:28:29.480 --> 00:28:39.380
but mall VAD is so, so, like, into security that it doesn't even ask for a password

00:28:39.380 --> 00:28:44.880
or, or an email account or anything. So what you do is when you sign up, it gives you an account number

00:28:44.880 --> 00:28:51.720
and you just have to write that down and use that. and to pay for things you can use there. They

00:28:51.720 --> 00:28:56.760
encourage you to use cryptocurrency or something, but you can use cards or whatever, but that potentially

00:28:56.760 --> 00:29:03.900
could tie you to them. Right. So they also allow you to, just put money in a, in an envelope

00:29:03.900 --> 00:29:09.840
with your account number and just mail it to them. That's awesome. They'll add money to your account.

00:29:09.840 --> 00:29:16.240
So anyway, that's pretty neat. I've done a massive amount of research on VPNs and there's a really

00:29:16.240 --> 00:29:23.380
whole bunch of shady ones out there, but mall VAD and Nord VPN, those two come out really, really good.

00:29:23.960 --> 00:29:29.060
And so I've heard of great stuff from all that I use Nord VPN. And the reason I'm not using next DNS or

00:29:29.060 --> 00:29:33.620
something like it is I just run Nord VPN and everything and check the block, all the ads

00:29:33.620 --> 00:29:39.480
over that as well. So it's very, very similar. So yeah, this, I've, I think this is a great solution

00:29:39.480 --> 00:29:44.780
and basically do the same thing. I also want, I wanted to remind everybody that, the current,

00:29:44.780 --> 00:29:52.680
this is a little bit old news, but the current Python 311 is, Python 311 0 RC2 definitely

00:29:52.680 --> 00:29:57.240
worth people trying out. And definitely if you've got a module that you're, it should have been doing

00:29:57.240 --> 00:30:01.760
this already. Shame on you. But if you've got a package out there on pipe PI and people are using

00:30:01.760 --> 00:30:06.900
it, it, you should be updating your testing to make sure that it's testing, the latest Python 311,

00:30:06.900 --> 00:30:13.000
uh, to make sure it continues to work. the last extra I wanted to bring up is I saw this

00:30:13.000 --> 00:30:20.880
the other day called, Oh my get. And so this ends up being what it is, is it's a little game

00:30:20.880 --> 00:30:27.660
and it's a little weird. but I tried it out, downloaded and tried it out. And so you've

00:30:27.660 --> 00:30:33.960
got most of it's like this sort of a view. And so you got a, like a, there's a workspace area in the

00:30:33.960 --> 00:30:39.120
middle, there's cards at the bottom and the cards are skills that you get, but it's in the, and on the

00:30:39.120 --> 00:30:45.440
right, there's a description of what you want to do. And you have to like, learn the get commands to do

00:30:45.440 --> 00:30:53.900
something, like, rebasing or merging or whatever. And, the, I started out at the,

00:30:53.900 --> 00:30:59.600
trying out at the very beginning, the basic stuff. And it actually was, the introduction was pretty cool.

00:30:59.600 --> 00:31:07.440
And then, but what I really like is that you can just go to the course, the, the available,

00:31:07.440 --> 00:31:13.040
available lessons. You don't have to do it in order. You can jump out of order and just hop ahead to

00:31:13.040 --> 00:31:18.720
something else that you're having problems with and sort of have a visual introduction to,

00:31:18.720 --> 00:31:24.280
to get. So it's kind of neat. That's weird and kind of wonderful.

00:31:24.280 --> 00:31:27.320
It is a little weird too. Yeah. Yeah.

00:31:27.320 --> 00:31:33.380
But wonderful. Yeah. Very cool. All right. one more, a quick follow-up, wagon race

00:31:33.380 --> 00:31:37.840
out there says, I know, but we don't add, but ads are the reason most stuff is free. Or do you want

00:31:37.840 --> 00:31:41.740
to make a donate or, you know, do you make donations to sites that you block ads from?

00:31:42.140 --> 00:31:46.980
I just want to comment on that real quick. I understand that there's a lot of services

00:31:46.980 --> 00:31:50.780
that do need support. I mean, I was just listening to an interview with the guys from the verge.

00:31:50.780 --> 00:31:57.760
They have a hundred person team at the verge working on stuff. And yet there is so much like

00:31:57.760 --> 00:32:04.900
collection and triangulation, triangulation of who you are and what you are by these ad networks

00:32:04.900 --> 00:32:10.740
through like data brokers and behind the scenes stuff that is just, it is a plague on society.

00:32:10.740 --> 00:32:18.240
I mean, think about, the 2016 election and, the Facebook stuff. God, what is that name

00:32:18.240 --> 00:32:19.340
of that company? Do you remember Brian?

00:32:19.340 --> 00:32:25.800
But don't, but yeah. So they were using all those things to basically that kind of information

00:32:25.800 --> 00:32:31.020
collected from those ad networks to target and manipulate people. So it's not just about like,

00:32:31.100 --> 00:32:38.140
do I not really want to see this ad for a new program programming book, whatever it's, it's not,

00:32:38.140 --> 00:32:43.780
it's the fact that they're using these terrible third-party networks to deliver it. So for example,

00:32:43.780 --> 00:32:50.900
Brian, check this out, pythonbytes.fm, right? If we go here and we go to our episodes and let's just

00:32:50.900 --> 00:32:55.920
pick one here. I got to zoom it back out a little bit. There we go. Look, this one right here. It has an

00:32:55.920 --> 00:33:01.480
ad that's being, there's an ad blocker on my VPN on the network and there's an ad block blocker in my

00:33:01.480 --> 00:33:06.200
browser. And right here we have an ad with no blocking. It shows up just fine. Do you know why?

00:33:06.520 --> 00:33:11.960
Because we're not using an evil third-party network. There's no tracking. There's no retargeting.

00:33:11.960 --> 00:33:19.120
We show you things from people who support us. We, we ask you to please check them out and at least

00:33:19.120 --> 00:33:26.420
consider it to support our show. And yet there's as much ad blocking here as there is on somewhere like

00:33:26.420 --> 00:33:33.680
CNN or, you know, you pick your spot. These places have like 30, 40 different tracking networks on you,

00:33:34.380 --> 00:33:39.720
triangulating stuff and reselling it. And it is a plague on society. And if CNN wanted to show you

00:33:39.720 --> 00:33:43.780
ads, they could do just what we do. I'm sure they have better relationships with advertisers than we

00:33:43.780 --> 00:33:50.040
do. So Cambridge Analytica, thank you for letting me know. Yeah. So I'm not against ads. I mean,

00:33:50.040 --> 00:33:56.780
to a large degree, we are ad supported. I'm against people building behind the scenes information and

00:33:56.780 --> 00:34:01.160
using it to manipulate society. Bit of a rant. Sorry. Sorry, Brian, if I went too far there.

00:34:01.160 --> 00:34:05.820
No, they had, and some people just don't realize that, that the ads are not just,

00:34:05.820 --> 00:34:11.460
there's a product that we think that you might like based on the content of this page. That totally

00:34:11.460 --> 00:34:16.140
makes sense. Like this, the people that are listening to Python bites, they might be interested

00:34:16.140 --> 00:34:21.480
in Python for, or Microsoft for starters, founder or something. Magazines used to be like this all the

00:34:21.480 --> 00:34:26.860
time, right? So you buy a magazine. It's not tracking you that whether or not you looked at something or

00:34:26.860 --> 00:34:33.380
looked up somebody's website because of a magazine ad. there's it, there's just stuff collected

00:34:33.380 --> 00:34:38.140
about you that I don't think is necessary. And I think, like for instance, read the docs has like

00:34:38.140 --> 00:34:45.420
the ethical ads that, they don't do, yeah, they don't do tracking. So yeah, exactly.

00:34:45.600 --> 00:34:51.280
And neither do we on purpose. It probably we've had to turn down sponsors. People said,

00:34:51.280 --> 00:34:56.500
we want to sponsor you, but we need you to install this tracking thing for your MP3 downloads. We need

00:34:56.500 --> 00:34:59.700
to install this Facebook pixel and these other things are like, you know what? We don't want your

00:34:59.700 --> 00:35:05.400
money. Like, no, we're happy to sell your product because it's irrelevant, but we're not going

00:35:05.400 --> 00:35:12.200
to spy on our users. So thanks for no thanks. All right. And, wagon race, just quick follow-up

00:35:12.200 --> 00:35:15.900
says, thanks for the explanation. I do understand you better. And I'm glad you guys are big enough

00:35:15.900 --> 00:35:22.300
to direct, to have direct sponsors without trackers. so are we. Thank you. Okay. With all that,

00:35:22.300 --> 00:35:26.480
let's flip the table and make something, close out with a joke. What do you think, Brian?

00:35:26.480 --> 00:35:28.020
Yeah, I'm ready for something funny.

00:35:28.020 --> 00:35:34.680
All right. So this one comes from somebody who had to go through this online multiple choice

00:35:34.680 --> 00:35:40.840
prove to me, you know, JavaScript test to be hired. Okay. And it says, so I got this wrong

00:35:40.840 --> 00:35:45.280
because the person who typed in the question made a mistake. So here, check this out. The,

00:35:45.280 --> 00:35:50.980
it's one of these multi-choice question things that says, what is the result of the function call

00:35:50.980 --> 00:35:57.940
shown below? And it's just super simple JavaScript. It's, creating, one of these little Lambda

00:35:57.940 --> 00:36:04.940
expressions here. And it has, the equivalent of an F string and a interpolated string is really

00:36:04.940 --> 00:36:10.480
the essence of it. And it says console.log open parenthesis. This is important as you would

00:36:10.480 --> 00:36:17.560
open parenthesis quote. Hi, my name is, you know, dollar curly first name close off the curly. And then

00:36:17.560 --> 00:36:24.960
it closes out console log instead of with the closing parenthesis with a closing curly brace.

00:36:24.960 --> 00:36:29.540
And so the options are like, hi, my name is John. I'm logged into the console. Hi, my name is

00:36:29.540 --> 00:36:34.840
undefined. I'm logged into the console. And this, what the machine thought was a correct answer is,

00:36:34.840 --> 00:36:40.220
hi, my name is John Jr. I'm, cause that's the name of the, the variable or the value variable.

00:36:40.220 --> 00:36:46.140
I'm logged into the console and they, you answered uncaught syntax errors logged a console.

00:36:46.140 --> 00:36:52.500
Like no wrong. It was supposed to say John Jr. No wrong. You typed it in wrong.

00:36:52.500 --> 00:36:59.560
Wouldn't that be frustrating if you're trying to apply for a job and they put syntax errors in there

00:36:59.560 --> 00:37:04.540
and you're like, nope, because they may be checking whether or not you're finding that closing curly

00:37:04.540 --> 00:37:11.380
brace, right? That's a legitimate test, I guess, but no. Yeah. And it, I think it's fine that you don't

00:37:11.380 --> 00:37:15.920
get to work for them because they're probably not someplace you want to work for. They've got syntax

00:37:15.920 --> 00:37:23.460
errors in their onboarding. Exactly. In their application process, but. Exactly. Oh, well,

00:37:23.460 --> 00:37:27.380
anyway, I thought that was pretty funny and I'm sure people have been through the, like, there's all

00:37:27.380 --> 00:37:33.020
these sort of weird go home and write this test or take this thing to prove, you know, how to write

00:37:33.020 --> 00:37:36.600
code sort of things. I'm sure people have been through, so they'll probably get a laugh out of

00:37:36.600 --> 00:37:45.460
this. Yeah, that's pretty funny. All right. It was. Well, should we wrap it up? Let's. Cool. So,

00:37:45.700 --> 00:37:51.340
thanks everybody for coming and watching the show and also everybody that listens. We love all of you

00:37:51.340 --> 00:37:56.040
and thanks, Michael. Indeed. Thank you, everyone. Thank you, Brian. Yeah. See you next week.

