
00:00:00.000 --> 00:00:02.520
>> Hello and welcome to Python Bytes,


00:00:02.520 --> 00:00:05.920
where we deliver Python news and headlines directly to your earbuds.


00:00:05.920 --> 00:00:08.460
This is Episode 303,


00:00:08.460 --> 00:00:11.380
recorded September 27th, 2022.


00:00:11.380 --> 00:00:12.580
I'm Brian Okken.


00:00:12.580 --> 00:00:14.040
>> I'm Michael Kennedy.


00:00:14.040 --> 00:00:16.680
>> We've got a lot of great stuff to talk about today,


00:00:16.680 --> 00:00:18.320
and it's a wonderful September day.


00:00:18.320 --> 00:00:21.600
It's finally not feeling like the blazing summer,


00:00:21.600 --> 00:00:22.840
but it's still too hot.


00:00:22.840 --> 00:00:27.280
>> It's that lovely fall before it rains for 120 days straight.


00:00:27.280 --> 00:00:28.760
>> It's like the pre-fake fall.


00:00:28.760 --> 00:00:29.260
>> Yeah.


00:00:29.260 --> 00:00:31.340
>> Exactly.


00:00:31.340 --> 00:00:36.040
>> All right. Well, the Python news still flows in the fall.


00:00:36.040 --> 00:00:36.480
>> Yes.


00:00:36.480 --> 00:00:37.640
>> All sorts of good stuff.


00:00:37.640 --> 00:00:37.960
>> Yeah.


00:00:37.960 --> 00:00:41.840
>> But what I got on deck for us is a bit of a follow-up.


00:00:41.840 --> 00:00:46.000
So I got this message from Mikhail Honkala,


00:00:46.000 --> 00:00:50.280
who sent over this repo that he put together.


00:00:50.280 --> 00:00:53.600
Says, you spoke about Humre,


00:00:53.600 --> 00:00:56.200
Humre, Humre, H-U-M-R-E.


00:00:56.200 --> 00:00:58.000
I said, you know what? There's a bunch of


00:00:58.000 --> 00:01:00.880
these projects I'd really like to kind of get my head around them.


00:01:00.880 --> 00:01:06.500
And so he went to all the trouble to like do a whole research project and a


00:01:06.500 --> 00:01:11.880
categorization or a taxonomy of these different libraries, which is really


00:01:11.880 --> 00:01:12.500
fantastic.


00:01:12.500 --> 00:01:14.640
So I'm linking to his GitHub repository.


00:01:14.640 --> 00:01:16.760
That's basically a read me.


00:01:16.760 --> 00:01:20.100
I mean, get ups kind of the new blog for code analysis.


00:01:20.100 --> 00:01:20.480
Isn't it?


00:01:20.480 --> 00:01:26.360
And it, it says Ari for humans, a reg regular expressions for humans.


00:01:26.720 --> 00:01:29.280
And it says, there's a bunch of different options.


00:01:29.280 --> 00:01:31.680
This list could be useful to help you decide,


00:01:31.680 --> 00:01:33.120
you know, if you're looking for a tool,


00:01:33.120 --> 00:01:35.240
you'll just know what's out there


00:01:35.240 --> 00:01:37.480
and you'll get a quick look and feel


00:01:37.480 --> 00:01:40.240
of how each library's API is.


00:01:40.240 --> 00:01:41.940
Or if you're thinking about building a tool,


00:01:41.940 --> 00:01:43.760
you can check out the alternative approaches


00:01:43.760 --> 00:01:45.820
and either contribute to an existing package


00:01:45.820 --> 00:01:48.340
or see if your thing is truly unique.


00:01:48.340 --> 00:01:50.160
And if you're building a tool or already have one,


00:01:50.160 --> 00:01:52.640
you can communicate your differences


00:01:52.640 --> 00:01:54.160
compared to the other libraries.


00:01:54.160 --> 00:01:57.200
Okay, so there's a bunch of packages listed here


00:01:57.200 --> 00:01:59.680
with some code examples.


00:01:59.680 --> 00:02:02.440
So the first one Mikio calls


00:02:02.440 --> 00:02:05.860
flow style regular expression generators.


00:02:05.860 --> 00:02:07.720
I would call them fluent style,


00:02:07.720 --> 00:02:09.680
but where you say, you know,


00:02:09.680 --> 00:02:11.400
function call dot function call dot


00:02:11.400 --> 00:02:12.800
function call dot function call.


00:02:12.800 --> 00:02:16.240
Basically the result of working with a library


00:02:16.240 --> 00:02:17.640
or calling a function,


00:02:17.640 --> 00:02:19.800
it returns the same thing again and again,


00:02:19.800 --> 00:02:20.880
and you can kind of build it up.


00:02:20.880 --> 00:02:22.520
Like ORMs are a lot like this.


00:02:22.520 --> 00:02:27.520
you know, you'd say like objects.filter.orderby.limit.sort,


00:02:27.520 --> 00:02:30.920
like that kind of model.


00:02:30.920 --> 00:02:34.640
Okay, so these include Python verbal expressions,


00:02:34.640 --> 00:02:39.640
edify, MRE, regularize, and RE_patterns.


00:02:39.640 --> 00:02:43.720
And they all are similar, but not the same.


00:02:43.720 --> 00:02:46.400
So I'll just, I'll read something off the top one,


00:02:46.400 --> 00:02:48.400
the Python verbal expressions.


00:02:48.400 --> 00:02:52.320
You would say verX for version expression,


00:02:52.320 --> 00:02:59.160
dot anything dot then space dot then left bracket dot or parenthesis.


00:02:59.160 --> 00:03:02.960
So square bracket or open square bracket, open parenthesis, then dot anything.


00:03:02.960 --> 00:03:07.760
And that'll generate a regular expression that would then go and, you know, match


00:03:07.760 --> 00:03:14.200
basically like star and then space and then either square bracket or parenthesis open.


00:03:14.200 --> 00:03:14.760
What do you think?


00:03:14.760 --> 00:03:19.160
I don't know if we're getting better than actual regular expressions at this point.


00:03:19.160 --> 00:03:20.080
All right.


00:03:20.080 --> 00:03:22.200
Well, let's go to the next category then.


00:03:22.240 --> 00:03:27.200
the, these are categorized as plus style, regular expression generators.


00:03:27.200 --> 00:03:31.400
Oh, I would call them ones that like overload operators, right?


00:03:31.400 --> 00:03:36.040
They use, they override what plus means and the pipe, what that means.


00:03:36.040 --> 00:03:39.720
And it's a little bit like what path lab does for forward slash


00:03:39.720 --> 00:03:41.760
or time time Delta, right?


00:03:41.760 --> 00:03:42.400
Yeah.


00:03:42.400 --> 00:03:45.720
So here I could say, you know, this includes the humor.


00:03:45.720 --> 00:03:47.600
That's the one from Al Swaggart.


00:03:47.600 --> 00:03:52.120
So this, the, let's see, which one of these do I, I think that I like


00:03:52.120 --> 00:03:54.680
the best. I'll probably go with this first one here.


00:03:54.680 --> 00:03:58.240
So you could say capture one or more of anything uppercase


00:03:58.240 --> 00:04:01.760
plus the empty string or the string of the space rather


00:04:01.760 --> 00:04:05.800
plus either the open preface or the open square bracket.


00:04:05.800 --> 00:04:08.600
Is that one? Do you like this style better?


00:04:08.600 --> 00:04:12.200
>> Well, I'm probably a bad one to ask because I


00:04:12.200 --> 00:04:14.840
actually I don't have a problem with regular expressions.


00:04:14.840 --> 00:04:18.040
>> Sure. Well, neither of these two are my favorite style either.


00:04:18.040 --> 00:04:22.460
I actually think I would use the format strings,


00:04:22.460 --> 00:04:24.340
which is the third category.


00:04:24.340 --> 00:04:27.900
The reason I say that is it's really different than regular expressions,


00:04:27.900 --> 00:04:32.820
where these are like a semantic wrapper on regular expressions.


00:04:32.820 --> 00:04:35.100
There's a way I call functions,


00:04:35.100 --> 00:04:38.100
I give a name to the thing instead of just the symbol,


00:04:38.100 --> 00:04:42.820
like plus versus plus star,


00:04:42.820 --> 00:04:45.900
dot star, it could be anything or you could say anything.


00:04:45.900 --> 00:04:47.860
>> Also, with all of these,


00:04:47.860 --> 00:04:49.940
they have a special syntax that they use.


00:04:49.940 --> 00:04:52.480
You don't have to learn regular expressions exactly,


00:04:52.480 --> 00:04:54.900
but you still have to learn their syntax.


00:04:54.900 --> 00:04:59.120
>> Yeah, that's true. When I might use one of these libraries,


00:04:59.120 --> 00:05:03.340
is when it's not enough to go do full-on regular expressions,


00:05:03.340 --> 00:05:09.020
but find is not sufficient or index, things like that.


00:05:09.020 --> 00:05:12.380
That's these string format styles.


00:05:12.380 --> 00:05:15.660
If you knew I had a log file or something,


00:05:15.660 --> 00:05:19.300
and it said power colon, some number,


00:05:19.300 --> 00:05:20.940
percent, a string, and then a temperature,


00:05:20.940 --> 00:05:24.700
then another number, you could just say power,


00:05:24.700 --> 00:05:26.340
this is the scanf library,


00:05:26.340 --> 00:05:30.260
power colon, percent f, bracket percent,


00:05:30.260 --> 00:05:32.740
percent s, comma, and then temp.


00:05:32.740 --> 00:05:34.260
So you would basically,


00:05:34.260 --> 00:05:38.160
the format string you would use to generate this thing


00:05:38.160 --> 00:05:41.020
can now be used to parse it in reverse.


00:05:41.020 --> 00:05:43.140
And so it'll say, you have to have the word power colon,


00:05:43.140 --> 00:05:44.660
and then a floating point number,


00:05:44.660 --> 00:05:46.380
and then and so on.


00:05:46.380 --> 00:05:50.680
That's the older, that's the Python 2 style, I suppose.


00:05:50.680 --> 00:05:54.180
Then you have pars and simple match,


00:05:54.180 --> 00:05:59.860
which are both much more F-string style.


00:05:59.860 --> 00:06:06.060
>> These are great. I'm looking at parse and that looks pretty cool.


00:06:06.060 --> 00:06:08.060
>> Here, yeah, it says,


00:06:08.060 --> 00:06:11.340
here's the regular expression pattern thing you would make.


00:06:11.340 --> 00:06:18.060
you would say just as a string to get curly bracket amount colon D item colon W comma


00:06:18.060 --> 00:06:20.060
meet me at curly time.


00:06:20.060 --> 00:06:20.300
Right?


00:06:20.300 --> 00:06:26.300
And it just goes and finds the amount, the time and the item as a beautiful, you know,


00:06:26.300 --> 00:06:29.380
just like is a basically it's a reverse F string is what it is.


00:06:29.380 --> 00:06:33.740
So if you can express what you're looking for as an F string, then all of a sudden you


00:06:33.740 --> 00:06:34.340
can get it back.


00:06:34.340 --> 00:06:39.220
And so for those kinds of matches, I think this is really, this is a, it's pretty different


00:06:39.220 --> 00:06:40.140
than a regular expression.


00:06:40.380 --> 00:06:45.300
>> It is, but it's especially those ones where you're not just trying to match a string,


00:06:45.300 --> 00:06:48.100
but you're trying to pull data out.


00:06:48.100 --> 00:06:48.540
>> Yes.


00:06:48.540 --> 00:06:50.960
>> Where the regular expressions really get ugly.


00:06:50.960 --> 00:06:54.100
>> They do. I got to have a capture group and all this stuff.


00:06:54.100 --> 00:06:55.300
You're like, "Oh, geez,


00:06:55.300 --> 00:06:56.780
how do I do that again?"


00:06:56.780 --> 00:06:59.060
>> Exactly. The capture groups,


00:06:59.060 --> 00:07:01.380
and it's guaranteed to confuse somebody on your team,


00:07:01.380 --> 00:07:03.820
but something like this, I think it's pretty neat.


00:07:03.820 --> 00:07:07.060
>> Yeah. It does mean the data has to be more structured.


00:07:07.060 --> 00:07:08.740
But if it's highly unstructured,


00:07:08.740 --> 00:07:10.120
go crazy with regular expressions.


00:07:10.120 --> 00:07:11.560
If you just need more than,


00:07:11.560 --> 00:07:13.280
like I said, a little more than finder index,


00:07:13.280 --> 00:07:14.240
this is pretty cool.


00:07:14.240 --> 00:07:17.800
>> Yeah. There's some wacky things that really you need to jump into


00:07:17.800 --> 00:07:22.620
regular expressions or the other kinds.


00:07:22.620 --> 00:07:24.320
>> Indeed. All right.


00:07:24.320 --> 00:07:29.640
Well, Mikhail put his thoughts on which ones to pick and when,


00:07:29.640 --> 00:07:31.800
and then a little bit more diving into each of


00:07:31.800 --> 00:07:34.520
these and some comparisons and whatnot.


00:07:34.520 --> 00:07:36.960
You can check this out. It's really good work.


00:07:36.960 --> 00:07:38.160
If you know of other ones,


00:07:38.160 --> 00:07:41.420
maybe contribute to them or add some more explanations,


00:07:41.420 --> 00:07:42.460
but there you have it.


00:07:42.460 --> 00:07:43.260
>> This is really nice.


00:07:43.260 --> 00:07:45.120
>> Yeah, this is real nice. I'm going to start.


00:07:45.120 --> 00:07:47.900
It looks like I may have already started, so let's go.


00:07:47.900 --> 00:07:48.660
>> Cool.


00:07:48.660 --> 00:07:51.060
>> Thanks, Mikhail, for sending that in and creating it.


00:07:51.060 --> 00:07:56.740
>> Well, what do I got? I got just some newsish things.


00:07:56.740 --> 00:08:04.020
I've been playing with Pydantic and FastAPI a lot.


00:08:04.020 --> 00:08:06.540
With that, you've got types.


00:08:06.540 --> 00:08:08.480
you're intentionally adding types,


00:08:08.480 --> 00:08:11.940
not just because you want my PI to pass,


00:08:11.940 --> 00:08:15.220
but you're adding types because it helps you.


00:08:15.220 --> 00:08:19.020
You kind of have to for FastAPI and stuff and paydantic.


00:08:19.020 --> 00:08:23.400
So one of the things I was curious about


00:08:23.400 --> 00:08:26.020
is the whole, the optional part,


00:08:26.020 --> 00:08:29.260
because somebody actually caught me on this.


00:08:29.260 --> 00:08:33.420
I have this, I tend to just say like,


00:08:33.420 --> 00:08:38.420
int x equals none, or no, x of type int equals none.


00:08:38.420 --> 00:08:41.760
And that means it's supposed to be an integer


00:08:41.760 --> 00:08:44.180
or it's supposed to be a string or something,


00:08:44.180 --> 00:08:46.380
but it doesn't have anything yet.


00:08:46.380 --> 00:08:48.160
So the default value is none,


00:08:48.160 --> 00:08:50.800
but none is obviously not a string or an integer.


00:08:50.800 --> 00:08:53.700
So what do you do?


00:08:53.700 --> 00:08:56.700
And so there's like a bunch of options.


00:08:56.700 --> 00:08:58.740
One, you could just say, well, the language allows it.


00:08:58.740 --> 00:09:01.980
So I'm gonna do it anyway, but I don't recommend that.


00:09:01.980 --> 00:09:05.540
The other is, one option is to use optional,


00:09:05.540 --> 00:09:07.700
but there's some issues with that.


00:09:07.700 --> 00:09:09.340
We'll talk about those in a sec.


00:09:09.340 --> 00:09:13.940
And then another is just to union or in,


00:09:13.940 --> 00:09:18.000
so you can either use like int or int bar none


00:09:18.000 --> 00:09:21.980
or union of int and none, and then assign it to none.


00:09:21.980 --> 00:09:26.980
And so I, for a while, like when I,


00:09:26.980 --> 00:09:30.740
I'm like, the language allows it, just go fine.


00:09:30.740 --> 00:09:33.580
because what I really mean, my intent is,


00:09:33.580 --> 00:09:35.620
I expect somebody to pass in,


00:09:35.620 --> 00:09:37.060
in this case, an integer.


00:09:37.060 --> 00:09:41.180
But if they don't pass anything in,


00:09:41.180 --> 00:09:44.860
I want the function to handle that case also.


00:09:44.860 --> 00:09:46.640
That's what the none is for.


00:09:46.640 --> 00:09:51.740
The union is a little weird because it says you can pass in a none.


00:09:51.740 --> 00:09:54.780
That would be weird for somebody to pass in none,


00:09:54.780 --> 00:09:57.960
but that's what our language is also.


00:09:57.960 --> 00:10:00.500
That's the default. I put out this,


00:10:00.500 --> 00:10:08.260
I put out a little survey, the recommendation that of the 630 votes, it was either use the


00:10:08.260 --> 00:10:10.260
union or optional.


00:10:10.260 --> 00:10:13.820
People are kind of on the fence about that.


00:10:13.820 --> 00:10:22.220
So Adam Johnson replied to just the other day, said, "Well, mypy just released and they


00:10:22.220 --> 00:10:27.580
don't deprecate this yet, but there's going to be a future deprecation of implicit optional


00:10:27.580 --> 00:10:28.580
types.


00:10:28.580 --> 00:10:30.140
I can't use the old style.


00:10:30.140 --> 00:10:32.380
If you're using mypy also, you should--


00:10:32.380 --> 00:10:34.860
- The old style being int equals none.


00:10:34.860 --> 00:10:38.980
- Yeah, of just like ignore the type


00:10:38.980 --> 00:10:40.120
for the default value.


00:10:40.120 --> 00:10:46.220
So mypy, the mypy 0.981,


00:10:46.220 --> 00:10:49.000
I don't know why we're not,


00:10:49.000 --> 00:10:52.820
where it's zero version still, but whatever.


00:10:52.820 --> 00:10:55.860
But it has, it talks about implicit optional type.


00:10:55.860 --> 00:10:59.560
So this, yeah, of saying it's a string,


00:10:59.560 --> 00:11:02.900
but the default value is none, that's bad.


00:11:02.900 --> 00:11:04.240
We don't want that anymore.


00:11:04.240 --> 00:11:09.240
What we want is optional, we'll say will work,


00:11:09.240 --> 00:11:12.700
and we'll say, you know, then this is the weird part.


00:11:12.700 --> 00:11:16.180
So the weird part is optional isn't optional.


00:11:16.180 --> 00:11:19.140
So what I'd like to use is optional.


00:11:19.140 --> 00:11:23.000
Like in FastAPI, it looks nice to say


00:11:23.000 --> 00:11:25.160
this variable is optional,


00:11:25.160 --> 00:11:29.560
But what really optional means is just that


00:11:29.560 --> 00:11:32.760
optional just translates to the type or none.


00:11:32.760 --> 00:11:33.600
That's it.


00:11:33.600 --> 00:11:34.620
Those are the types.


00:11:34.620 --> 00:11:36.300
It doesn't say it's actually optional.


00:11:36.300 --> 00:11:40.700
It's only optional if you have a default value.


00:11:40.700 --> 00:11:42.920
Default value makes it optional.


00:11:42.920 --> 00:11:44.760
- You can have a thing that explicitly says


00:11:44.760 --> 00:11:46.980
this type is optional, but it's a required parameter,


00:11:46.980 --> 00:11:49.040
which is a little odd, right?


00:11:49.040 --> 00:11:49.880
- Yeah.


00:11:49.880 --> 00:11:50.720
(laughing)


00:11:50.720 --> 00:11:51.680
What's up with that?


00:11:51.680 --> 00:11:54.180
Yeah, so a required optional.


00:11:54.180 --> 00:11:55.020
So anyway.


00:11:55.020 --> 00:11:58.580
- The third parameter name such and such of this type


00:11:58.580 --> 00:12:01.060
is required, but it's literally of type optional.


00:12:01.060 --> 00:12:01.900
Yeah, I hear you.


00:12:01.900 --> 00:12:02.940
Okay, that makes sense.


00:12:02.940 --> 00:12:05.760
- So the basic gist is you have to pick.


00:12:05.760 --> 00:12:08.340
You gotta pick either optional, use an optional


00:12:08.340 --> 00:12:13.020
and then assign it to none or use a union.


00:12:13.020 --> 00:12:17.820
But another option is just to actually assign


00:12:17.820 --> 00:12:18.700
something other than none.


00:12:18.700 --> 00:12:22.140
So if it's a string, you could have a flag value


00:12:22.140 --> 00:12:22.980
to say like--


00:12:22.980 --> 00:12:23.800
- Sentinel.


00:12:23.800 --> 00:12:25.240
>> That means like an empty string,


00:12:25.240 --> 00:12:28.020
like a great one for a string is empty string.


00:12:28.020 --> 00:12:31.900
The problem is with numbers like a floating pointer and integer number,


00:12:31.900 --> 00:12:33.840
there aren't any sentinels.


00:12:33.840 --> 00:12:36.200
I mean, I guess you could use nan,


00:12:36.200 --> 00:12:39.240
not a number, but that's weird.


00:12:39.240 --> 00:12:42.440
Anyway, I wanted to reference typing.


00:12:42.440 --> 00:12:47.720
So just to say my proof that optional is really just the union of the type or none.


00:12:47.720 --> 00:12:49.280
It doesn't say anything.


00:12:49.280 --> 00:12:53.200
They explicitly say in the Python documentation


00:12:53.200 --> 00:12:58.960
that you can, basically you don't have to use the keyword option,


00:12:58.960 --> 00:13:02.040
you can just put a default value that makes it optional.


00:13:02.040 --> 00:13:02.720
>> Yeah.


00:13:02.720 --> 00:13:06.000
>> It's only a type. Anyway, the other thing,


00:13:06.000 --> 00:13:09.800
the last bit I wanted to talk about with this is the best introduction.


00:13:09.800 --> 00:13:13.720
If you're confused, like I still am apparently about this,


00:13:13.720 --> 00:13:16.220
the best discussion that I've found is in


00:13:16.220 --> 00:13:19.480
the FastAPI docs and go to,


00:13:19.480 --> 00:13:22.120
there's a Python types intro.


00:13:22.120 --> 00:13:26.920
like at the top partway down it says possibly none.


00:13:26.920 --> 00:13:30.760
And it discusses all of this and the FastAPI


00:13:30.760 --> 00:13:34.320
recommendation is to use union instead of optional.


00:13:34.320 --> 00:13:37.620
And I think I've finally gotten there that I think I prefer


00:13:37.620 --> 00:13:41.960
just the either union or if you're in the bar thing.


00:13:41.960 --> 00:13:45.520
So you can say type or like type bar none.


00:13:45.520 --> 00:13:49.320
And that's if you're only if you're Python 3.10 that works.


00:13:49.320 --> 00:13:52.340
But if you're on the others,


00:13:52.340 --> 00:13:54.300
I would use union.


00:13:54.300 --> 00:13:59.380
>> There's a bit of a voting in the audience.


00:13:59.380 --> 00:14:01.580
Alvaro says, "Int or none,"


00:14:01.580 --> 00:14:03.620
which is a voting for that one.


00:14:03.620 --> 00:14:07.840
Anthony says, "I prefer optional of int equals none myself."


00:14:07.840 --> 00:14:10.100
I also concur with Anthony,


00:14:10.100 --> 00:14:16.300
but I still very much would love to see some language syntax.


00:14:16.300 --> 00:14:19.440
it's a little bit cleaner, like in C#,


00:14:19.440 --> 00:14:24.400
in Swift, they just have question mark at the end to say,


00:14:24.400 --> 00:14:27.600
it's either can be none or it can be its value.


00:14:27.600 --> 00:14:30.820
It's just such a common thing to set something to none,


00:14:30.820 --> 00:14:33.220
and then or alternatively have its value that I would


00:14:33.220 --> 00:14:39.440
just love to see some simpler syntax there than we see now.


00:14:39.440 --> 00:14:44.540
>> Yeah, or some other Sentinel that like SQL,


00:14:44.540 --> 00:14:46.900
doesn't SQL have null or something like that?


00:14:46.900 --> 00:14:50.500
That's not a legitimate value for anything.


00:14:50.500 --> 00:14:53.120
>> Yeah. Also, if we use, by the way,


00:14:53.120 --> 00:14:57.180
one more reason I think people would want the question mark,


00:14:57.180 --> 00:15:02.500
or something I think would be cool is it gives you this tonal inflection.


00:15:02.500 --> 00:15:06.340
This function takes an int, boom, hard stop.


00:15:06.340 --> 00:15:07.800
That means it has to be an int,


00:15:07.800 --> 00:15:09.240
or it's like an int.


00:15:09.240 --> 00:15:11.060
Well, then you're not sure, it's optional.


00:15:11.060 --> 00:15:13.060
>> Or you're not sure what type it is.


00:15:13.060 --> 00:15:13.860
>> Yeah.


00:15:13.860 --> 00:15:15.560
>> I think it's an end.


00:15:15.560 --> 00:15:17.700
>> Yeah. In question mark, come on.


00:15:17.700 --> 00:15:20.340
It's in a lot of the other languages that have this,


00:15:20.340 --> 00:15:23.300
things that can't be nullable unless you express their null,


00:15:23.300 --> 00:15:26.580
you say they can possibly take on their value or null.


00:15:26.580 --> 00:15:30.180
Anyway, I know this has been discussed and shot down,


00:15:30.180 --> 00:15:33.020
but we make it happen.


00:15:33.020 --> 00:15:34.460
>> I was pretty sure you could do this.


00:15:34.460 --> 00:15:36.020
Thank you, Alvaro.


00:15:36.020 --> 00:15:40.740
Mentioned that you can use from future import annotations to use


00:15:40.740 --> 00:15:44.060
the bar for everything on three, eight and above.


00:15:44.060 --> 00:15:46.260
So that's good.


00:15:46.260 --> 00:15:49.860
But if I'm doing a FastAPI,


00:15:49.860 --> 00:15:51.860
the optional is really what I mean.


00:15:51.860 --> 00:15:54.300
I mean, it's optional,


00:15:54.300 --> 00:15:56.140
but it's frustrating that the type


00:15:56.140 --> 00:15:58.660
optional doesn't actually fill in anything.


00:15:58.660 --> 00:16:02.740
>> Yeah. Bit of a mismatch there.


00:16:02.740 --> 00:16:05.060
>> Okay. That's enough.


00:16:05.060 --> 00:16:06.980
>> That is enough. Enough on that.


00:16:06.980 --> 00:16:08.700
It is so good though.


00:16:08.700 --> 00:16:10.380
Good stuff that those types are there.


00:16:10.380 --> 00:16:13.220
Brian, you want to tell us about our sponsor for the week?


00:16:13.220 --> 00:16:14.500
- Sure.


00:16:14.500 --> 00:16:19.500
So Microsoft for Startups Founders Hub, it's very cool.


00:16:19.500 --> 00:16:22.980
So Microsoft, this episode of Python Bytes


00:16:22.980 --> 00:16:26.260
is brought to you by Microsoft for Startups.


00:16:26.260 --> 00:16:29.340
And the Microsoft for Startups Founders Hub


00:16:29.340 --> 00:16:31.580
provides all founders at any stage


00:16:31.580 --> 00:16:36.580
with free resources to help you solve startup challenges.


00:16:37.300 --> 00:16:39.560
And it's a platform,


00:16:39.560 --> 00:16:41.760
the platform provides technology benefits,


00:16:41.760 --> 00:16:45.140
access to expert guidance and skilled resources,


00:16:45.140 --> 00:16:47.960
mentorship and networking connections and so much more.


00:16:47.960 --> 00:16:51.060
And those skilled resources and the one-on-ones


00:16:51.060 --> 00:16:54.720
and the networking, it's so valuable.


00:16:54.720 --> 00:16:56.400
So unlike others in the industry,


00:16:56.400 --> 00:16:58.600
Microsoft for Startup Founders Hub


00:16:58.600 --> 00:17:01.360
doesn't require startups to be investor backed


00:17:01.360 --> 00:17:05.080
or third party validated to participate.


00:17:05.080 --> 00:17:05.960
It's truly open.


00:17:05.960 --> 00:17:08.380
and you don't have to live in San Francisco.


00:17:08.380 --> 00:17:09.220
So what do you get?


00:17:09.220 --> 00:17:11.940
You get free access to GitHub and Microsoft Cloud


00:17:11.940 --> 00:17:14.760
with the ability to unlock credits over time.


00:17:14.760 --> 00:17:17.120
And they also have partnered with innovative companies


00:17:17.120 --> 00:17:21.880
like OpenAI, a global leader in AI research and deployment


00:17:21.880 --> 00:17:24.520
to provide exclusive benefits and discounts.


00:17:24.520 --> 00:17:27.160
Through the Founders Hub,


00:17:27.160 --> 00:17:30.440
becoming a founder is no longer about who you know.


00:17:30.440 --> 00:17:33.060
You'll have access to their mentorship network,


00:17:33.060 --> 00:17:35.760
giving you access to a pool of hundreds of mentors


00:17:35.760 --> 00:17:37.680
across a range of disciplines,


00:17:37.680 --> 00:17:40.560
across areas like validation, fundraising, management,


00:17:40.560 --> 00:17:42.260
and coaching, sales and marketing,


00:17:42.260 --> 00:17:44.640
as well as specific technical stress points.


00:17:44.640 --> 00:17:47.000
And you know that there's at least one or two


00:17:47.000 --> 00:17:49.280
of those fields that you need help in.


00:17:49.280 --> 00:17:51.040
You'll be able to book a one-on-one meeting


00:17:51.040 --> 00:17:53.640
with the mentors, many of whom were former founders


00:17:53.640 --> 00:17:54.560
themselves.


00:17:54.560 --> 00:17:56.340
Make your ideas a reality today


00:17:56.340 --> 00:17:59.920
with the critical support you'll get from the Founders Hub.


00:17:59.920 --> 00:18:00.840
To join the program,


00:18:00.840 --> 00:18:05.240
visit pythonbytes.fm/foundershub2022.


00:18:05.240 --> 00:18:07.700
and of course the link is in our show notes.


00:18:07.700 --> 00:18:09.520
- Absolutely, thank you Microsoft.


00:18:09.520 --> 00:18:11.280
All right, let's talk about linters.


00:18:11.280 --> 00:18:13.640
I know you're a fan of linting code


00:18:13.640 --> 00:18:16.080
and making it look good as am I,


00:18:16.080 --> 00:18:18.240
but if you did Cython,


00:18:18.240 --> 00:18:22.120
you might not be able to get great information about it.


00:18:22.120 --> 00:18:25.600
So Marco Gorelli sent in this project


00:18:25.600 --> 00:18:30.280
that he's just getting started called Cython Lint.


00:18:30.280 --> 00:18:32.400
So have you done much Cython?


00:18:32.400 --> 00:18:33.880
I know you do C and you do Python,


00:18:33.880 --> 00:18:35.920
but you live in this weird middle ground.


00:18:35.920 --> 00:18:39.280
- I don't, but I want to, or maybe I don't, I don't know.


00:18:39.280 --> 00:18:42.000
- I think it's pretty neat.


00:18:42.000 --> 00:18:44.080
There's a bit of a build,


00:18:44.080 --> 00:18:45.960
like a bit of a build step you gotta go through


00:18:45.960 --> 00:18:47.800
to get code that will run,


00:18:47.800 --> 00:18:51.200
but the ability to just say, I wrote Python, it has type-ins,


00:18:51.200 --> 00:18:53.240
like, oh, let's just do a little bit different code,


00:18:53.240 --> 00:18:56.440
and now it runs at C speed for just like a function or two,


00:18:56.440 --> 00:18:58.040
I think that's a pretty appealing idea,


00:18:58.040 --> 00:19:00.400
and Cython is definitely a good way to do that.


00:19:00.400 --> 00:19:02.680
So Cython-lint will go through,


00:19:02.680 --> 00:19:05.680
and you can just pip install it


00:19:05.680 --> 00:19:08.760
and then run it as a command line, give it your files,


00:19:08.760 --> 00:19:12.500
or you can even install it as a pre-commit hook,


00:19:12.500 --> 00:19:14.720
and then just whenever you commit,


00:19:14.720 --> 00:19:16.840
it'll obviously run as well.


00:19:16.840 --> 00:19:20.040
Just like the no QA in Flake 8,


00:19:20.040 --> 00:19:23.440
there's a hash no Cython lint to turn off the lines,


00:19:23.440 --> 00:19:26.400
and right now it mostly checks things around variables,


00:19:26.400 --> 00:19:28.400
but he's working on more,


00:19:28.400 --> 00:19:30.000
and hopefully other people out there


00:19:30.000 --> 00:19:32.600
are interested in this and can add some ideas too.


00:19:32.600 --> 00:19:33.900
This is really cool.


00:19:33.900 --> 00:19:37.300
And I hope that he does get people helping out


00:19:37.300 --> 00:19:38.300
and adding to this.


00:19:38.300 --> 00:19:41.620
Definitely it was something needed.


00:19:41.620 --> 00:19:44.100
- Yeah, he said he ran it on Pandas, NumPy,


00:19:44.100 --> 00:19:48.140
Scikit-learn and QPy and found ways


00:19:48.140 --> 00:19:49.940
in which all those libraries could be cleaned up.


00:19:49.940 --> 00:19:51.300
So pretty neat.


00:19:51.300 --> 00:19:52.660
And all those libraries are notable


00:19:52.660 --> 00:19:55.900
because they're really highly, highly used


00:19:55.900 --> 00:19:57.280
and have been around for a long time.


00:19:57.280 --> 00:19:59.260
So if this is finding issues with them,


00:19:59.260 --> 00:20:01.020
then maybe it points out


00:20:01.020 --> 00:20:02.720
that something like this should exist.


00:20:02.720 --> 00:20:03.980
- Yeah, definitely.


00:20:03.980 --> 00:20:04.820
- Yeah, cool.


00:20:04.820 --> 00:20:06.220
So not a whole lot more to say about it.


00:20:06.220 --> 00:20:07.380
You know, Cython's cool.


00:20:07.380 --> 00:20:09.700
Having some more tools to support it, also cool.


00:20:09.700 --> 00:20:10.940
- Yeah.


00:20:10.940 --> 00:20:14.380
I've got another sort of possibly short topic.


00:20:14.380 --> 00:20:19.040
I found out about this cool diff tool called Difftastic.


00:20:19.040 --> 00:20:20.380
Have you seen this before?


00:20:20.380 --> 00:20:21.200
- Diftastic?


00:20:21.200 --> 00:20:22.180
I don't think so.


00:20:22.180 --> 00:20:23.820
I'm always looking for a better diff tool.


00:20:23.820 --> 00:20:25.860
I'm never really content with my diff tools.


00:20:25.860 --> 00:20:27.500
I use one called Beyond Compare.


00:20:27.500 --> 00:20:31.780
It looks like it's cutting edge out of the early '90s.


00:20:31.780 --> 00:20:34.900
It's useful, but boy.


00:20:34.900 --> 00:20:37.580
>> I'm finding that also,


00:20:37.580 --> 00:20:38.700
I use diff a lot,


00:20:38.700 --> 00:20:42.220
but I also use it a lot with respect,


00:20:42.220 --> 00:20:44.260
like with Git.


00:20:44.260 --> 00:20:49.460
I do a Git diff of older versions or something.


00:20:49.460 --> 00:20:55.820
Diff-tastic, how it stands out against other diff tools is,


00:20:55.820 --> 00:20:57.580
It's not line-based.


00:20:57.580 --> 00:21:02.580
So it's a structural diff tool that understands syntax.


00:21:02.580 --> 00:21:05.700
So what it does is it evaluates the language


00:21:05.700 --> 00:21:08.740
and tries to determine what language the file is in.


00:21:08.740 --> 00:21:11.980
And then if it, like, and it's got a ton of languages.


00:21:11.980 --> 00:21:15.600
And if you, it figures out like it's Python, for instance,


00:21:15.600 --> 00:21:16.820
or any other language,


00:21:16.820 --> 00:21:20.940
it creates an abstract syntax tree of the files


00:21:20.940 --> 00:21:23.940
and then checks the differences of those.


00:21:23.940 --> 00:21:27.740
So in the past, like one of the things that messes things up


00:21:27.740 --> 00:21:29.780
is just spacing problems.


00:21:29.780 --> 00:21:32.580
Like in something like C or C++


00:21:32.580 --> 00:21:33.700
where spacing doesn't matter,


00:21:33.700 --> 00:21:35.860
you can just say, well, ignore white space.


00:21:35.860 --> 00:21:38.940
But in Python, you really can't say ignore white space


00:21:38.940 --> 00:21:41.400
because white space is significant.


00:21:41.400 --> 00:21:46.400
But with the Difftastic, the diffs will know,


00:21:46.400 --> 00:21:48.980
if it's significant white space, it'll tell you.


00:21:48.980 --> 00:21:51.880
So I tried this out this morning


00:21:51.880 --> 00:21:54.320
And it's pretty amazing.


00:21:54.320 --> 00:21:56.480
So I tried it.


00:21:56.480 --> 00:22:00.040
So the thing I tried was replacing with the diff tool.


00:22:00.040 --> 00:22:01.320
So there's a with get.


00:22:01.320 --> 00:22:04.080
So in get, you can say,


00:22:04.080 --> 00:22:05.960
and I just tried this single line thing


00:22:05.960 --> 00:22:09.280
to just temporarily say, I wanna try get diff.


00:22:09.280 --> 00:22:13.960
It has is diff T instead of get diff.


00:22:13.960 --> 00:22:18.000
So what this does is it does a diff.


00:22:18.000 --> 00:22:22.080
And there's ways in the documentation


00:22:22.080 --> 00:22:25.420
where you can permanently turn it on, but it's colorized.


00:22:25.420 --> 00:22:29.440
So you've got like syntax highlighted files side by side


00:22:29.440 --> 00:22:31.080
and it'll show you what's different


00:22:31.080 --> 00:22:32.180
and it highlights the difference.


00:22:32.180 --> 00:22:34.320
Well, I got a little bit confused


00:22:34.320 --> 00:22:38.100
because there's syntax highlighting


00:22:38.100 --> 00:22:40.660
and highlighting to show you the difference.


00:22:40.660 --> 00:22:42.180
So there's a flag


00:22:42.180 --> 00:22:44.500
and I'm not sure where it is in the documentation,


00:22:44.500 --> 00:22:46.200
but basically you just turn off,


00:22:46.200 --> 00:22:49.480
you say dash test syntax highlight equals off.


00:22:49.480 --> 00:22:50.240
>> Wow.


00:22:50.240 --> 00:22:52.900
>> It turns off the file syntax,


00:22:52.900 --> 00:22:56.600
but it shows all the highlights are just diffs.


00:22:56.600 --> 00:23:00.800
If you normally say get diff just without anything,


00:23:00.800 --> 00:23:03.840
it'll say what's different about my file versus


00:23:03.840 --> 00:23:08.080
the last version or the working directory or whatever.


00:23:08.080 --> 00:23:11.240
It usually does the right thing.


00:23:11.240 --> 00:23:15.760
But it's on top of each other, it's not side by side.


00:23:15.760 --> 00:23:18.480
having it side by side is cool and having a highlight.


00:23:18.480 --> 00:23:22.480
So I had some code where I changed stuff


00:23:22.480 --> 00:23:24.440
and I've been working on it a month ago or so


00:23:24.440 --> 00:23:26.040
and I forgot what I did


00:23:26.040 --> 00:23:28.860
and Git diff showed me just tons of changes.


00:23:28.860 --> 00:23:32.600
But Difftastic showed me that I was just changing


00:23:32.600 --> 00:23:35.560
some minor things like adding types,


00:23:35.560 --> 00:23:37.040
a couple of types here and there


00:23:37.040 --> 00:23:40.680
or changing double quotes or single quotes to double quotes.


00:23:40.680 --> 00:23:43.800
So I apparently ran black on it at one point


00:23:43.800 --> 00:23:45.960
and there was like, oh,


00:23:45.960 --> 00:23:48.640
since AST wise, there's really nothing different.


00:23:48.640 --> 00:23:51.520
So I can just commit this and be done with it.


00:23:51.520 --> 00:23:53.040
So it was really helpful.


00:23:53.040 --> 00:23:54.920
- It is a pretty interesting idea, right?


00:23:54.920 --> 00:23:56.280
Sometimes you really care about


00:23:56.280 --> 00:23:57.600
those little formatting differences


00:23:57.600 --> 00:23:59.900
and you wanna make sure they get merged and committed.


00:23:59.900 --> 00:24:01.920
And other times you wanna know


00:24:01.920 --> 00:24:03.480
what is the essence of the change?


00:24:03.480 --> 00:24:04.880
And this sounds like that'll answer that.


00:24:04.880 --> 00:24:05.720
That's pretty cool.


00:24:05.720 --> 00:24:09.000
- And it showed me a bunch of stuff that Git says,


00:24:09.000 --> 00:24:12.520
there were file changes, but Difftastic said,


00:24:12.520 --> 00:24:14.480
there's no syntax change.


00:24:14.480 --> 00:24:17.520
So I apparently had changed some, you know,


00:24:17.520 --> 00:24:19.840
line, some formatting or something,


00:24:19.840 --> 00:24:21.400
or ran black on it,


00:24:21.400 --> 00:24:23.640
but there was nothing significant change.


00:24:23.640 --> 00:24:25.440
So interesting on that.


00:24:25.440 --> 00:24:29.980
And apparently this was a huge pain in the butt to make.


00:24:29.980 --> 00:24:34.400
And there's a, we're going to link to a blog article


00:24:34.400 --> 00:24:38.120
called "Difftastic the Fantastic Diff"


00:24:38.120 --> 00:24:40.600
by Wilfred Hughes, who wrote it,


00:24:40.600 --> 00:24:42.820
that basically said he thought this was gonna be


00:24:42.820 --> 00:24:44.620
sort of a minor thing to build


00:24:44.620 --> 00:24:47.220
and it was a big thing to build.


00:24:47.220 --> 00:24:48.480
- Six months later.


00:24:48.480 --> 00:24:52.520
- Yeah, I'm not sure how long he spent on it, but yeah.


00:24:52.520 --> 00:24:54.380
But yeah, and here's an image


00:24:54.380 --> 00:24:56.260
of the little different highlighting,


00:24:56.260 --> 00:24:57.900
the colors and changes and stuff.


00:24:57.900 --> 00:24:59.540
So anyway, it's nice.


00:24:59.540 --> 00:25:00.880
- Yeah, looks like a great tool.


00:25:00.880 --> 00:25:01.720
I've never heard of it.


00:25:01.720 --> 00:25:03.940
Thanks for finding it.


00:25:03.940 --> 00:25:07.540
Alvaro out there says code --diff.


00:25:07.540 --> 00:25:09.220
I'm guessing that's VS Code diff.


00:25:09.220 --> 00:25:11.060
I've never done anything.


00:25:11.060 --> 00:25:12.780
- I haven't used that for my command line.


00:25:12.780 --> 00:25:13.620
I should try that.


00:25:13.620 --> 00:25:15.540
- Yeah, perhaps.


00:25:15.540 --> 00:25:17.780
Okay, also one that I've been looking at


00:25:17.780 --> 00:25:19.140
that I haven't gone and used


00:25:19.140 --> 00:25:20.560
is this one called Kaleidoscope.


00:25:20.560 --> 00:25:22.100
That's just for Mac only,


00:25:22.100 --> 00:25:23.940
but it looks pretty interesting.


00:25:23.940 --> 00:25:25.780
It's supposed to work on code,


00:25:25.780 --> 00:25:28.520
but also on like directories,


00:25:28.520 --> 00:25:32.300
but you know, images and other documents as well.


00:25:32.300 --> 00:25:35.100
So I don't know, maybe someday.


00:25:35.100 --> 00:25:36.820
The only challenge, it looks beautiful.


00:25:36.820 --> 00:25:38.380
The only problem, that's not a problem,


00:25:38.380 --> 00:25:41.540
The thing that has held me back is it's $150.


00:25:41.540 --> 00:25:43.140
So it better be darn good.


00:25:43.140 --> 00:25:44.460
At least there's a free trial.


00:25:44.460 --> 00:25:45.580
Maybe I'll try it someday.


00:25:45.580 --> 00:25:48.500
- I volunteer you to try it out and get back to us.


00:25:48.500 --> 00:25:49.460
(laughing)


00:25:49.460 --> 00:25:51.100
- Exactly, let me know how that goes.


00:25:51.100 --> 00:25:53.700
(laughing)


00:25:53.700 --> 00:25:54.540
- Yeah.


00:25:54.540 --> 00:25:55.980
- All right, well, that's our items, right?


00:25:55.980 --> 00:25:57.780
I got an extra if you're ready.


00:25:57.780 --> 00:25:59.460
- Yeah, let's go to extras.


00:25:59.460 --> 00:26:00.540
- So this is not a Python thing,


00:26:00.540 --> 00:26:03.620
but a thing that developers may be interested in.


00:26:03.620 --> 00:26:06.060
Have you heard of Next DNS?


00:26:06.060 --> 00:26:06.880
- No.


00:26:06.880 --> 00:26:10.380
One of the things that's a big hassle is spyware,


00:26:10.380 --> 00:26:16.760
tracking, all sorts of trackers like fingerprinters


00:26:16.760 --> 00:26:21.000
and Facebook cookies and all these different things


00:26:21.000 --> 00:26:23.880
that are trackers, which is not lovely,


00:26:23.880 --> 00:26:27.020
but also malware as well.


00:26:27.020 --> 00:26:28.920
And a lot of those are being served


00:26:28.920 --> 00:26:30.880
off of third-party domains.


00:26:30.880 --> 00:26:34.440
So there's this product called NextDNS,


00:26:34.440 --> 00:26:36.080
and I'd never heard of it,


00:26:36.080 --> 00:26:39.600
but apparently it more or less acts like a firewall


00:26:39.600 --> 00:26:43.520
by not allowing malicious or unwanted things


00:26:43.520 --> 00:26:45.080
to resolve over DNS.


00:26:45.080 --> 00:26:45.980
- Wow.


00:26:45.980 --> 00:26:47.800
- So what you do is you just, you set it up,


00:26:47.800 --> 00:26:52.000
you just set your DNS server to be, you know, 1724,


00:26:52.000 --> 00:26:54.600
or whatever their DNS server number is.


00:26:54.600 --> 00:26:56.640
And then it goes, everything goes through there.


00:26:56.640 --> 00:26:59.040
And if it says, hey, we're trying to go to DoubleClick,


00:26:59.040 --> 00:27:00.920
you know, like, no, we don't know what DoubleClick is.


00:27:00.920 --> 00:27:02.360
It's not on the internet, I'm sorry.


00:27:02.360 --> 00:27:03.800
And just, there's no more ads.


00:27:03.800 --> 00:27:06.400
So it blocks a lot of the ads and trackers.


00:27:06.400 --> 00:27:08.720
And because it's a DNS service


00:27:08.720 --> 00:27:11.680
and not like an ad blocker in your browser,


00:27:11.680 --> 00:27:14.280
it works on whole devices.


00:27:14.280 --> 00:27:16.320
So you could set it up on say your router


00:27:16.320 --> 00:27:18.800
and then everything including your television


00:27:18.800 --> 00:27:20.880
and the mobile apps and everything on,


00:27:20.880 --> 00:27:23.060
they would all get this blocking,


00:27:23.060 --> 00:27:25.560
which I think is pretty cool, pretty interesting.


00:27:25.560 --> 00:27:28.080
- Yeah, I'm definitely gonna check this out.


00:27:28.080 --> 00:27:28.920
It looks great.


00:27:28.920 --> 00:27:32.200
- I'm not quite ready to set it up on my router yet


00:27:32.200 --> 00:27:36.720
because every now and then you basically are forced


00:27:36.720 --> 00:27:41.060
to turn off your ad blocker for some small weird website


00:27:41.060 --> 00:27:44.440
or do I wanna impose this on my wife?


00:27:44.440 --> 00:27:46.760
Maybe, maybe not.


00:27:46.760 --> 00:27:48.600
Do I want the tech support that like,


00:27:48.600 --> 00:27:50.960
so I'm on the fence, but I think it's a neat idea


00:27:50.960 --> 00:27:52.800
and I might play with it as well.


00:27:52.800 --> 00:27:55.200
You can always get it and just set it on your computer,


00:27:55.200 --> 00:27:56.840
right, but if you wanted to like,


00:27:56.840 --> 00:27:59.680
every device I have automatically gets malware


00:27:59.680 --> 00:28:03.240
and add tracker blocking to put it on your router.


00:28:03.240 --> 00:28:05.360
- Yeah, so one of the things,


00:28:05.360 --> 00:28:06.700
oh, do you have any other extras?


00:28:06.700 --> 00:28:07.560
- No, that's it.


00:28:07.560 --> 00:28:10.000
- Okay, so one of the things I've been trying


00:28:10.000 --> 00:28:13.240
to block ads and stuff is I found out about this


00:28:13.240 --> 00:28:15.880
a VPN called Malvad.


00:28:15.880 --> 00:28:19.640
I don't even know how to pronounce that.


00:28:19.640 --> 00:28:22.400
But it's been pretty good.


00:28:22.400 --> 00:28:25.080
It blocks a whole bunch of stuff.


00:28:25.080 --> 00:28:27.160
Of course, switching to Vivaldi helps.


00:28:27.160 --> 00:28:29.520
You can have Vivaldi block stuff.


00:28:29.520 --> 00:28:33.760
but Movad is so, so like


00:28:33.760 --> 00:28:39.720
into security that it doesn't even ask for a password


00:28:39.720 --> 00:28:42.040
or an email account or anything.


00:28:42.040 --> 00:28:43.760
So what you do is when you sign up,


00:28:43.760 --> 00:28:45.200
it gives you an account number


00:28:45.200 --> 00:28:48.480
and you just have to write that down and use that.


00:28:48.480 --> 00:28:51.600
And to pay for things you can use,


00:28:51.600 --> 00:28:53.640
they encourage you to use cryptocurrency or something,


00:28:53.640 --> 00:28:55.560
but you can use cards or whatever,


00:28:55.560 --> 00:28:58.660
but that potentially could tie you to them, right?


00:28:58.660 --> 00:29:03.660
So they also allow you to just put money in an envelope


00:29:03.660 --> 00:29:06.540
with your account number and just mail it to them.


00:29:06.540 --> 00:29:07.380
(laughing)


00:29:07.380 --> 00:29:08.660
- That's awesome.


00:29:08.660 --> 00:29:09.900
- They'll add money to your account.


00:29:09.900 --> 00:29:12.340
So anyway, that's pretty neat.


00:29:12.340 --> 00:29:15.380
- I've done a massive amount of research on VPNs


00:29:15.380 --> 00:29:18.500
and there's a really whole bunch of shady ones out there,


00:29:18.500 --> 00:29:20.980
but Mulvand and NordVPN,


00:29:20.980 --> 00:29:23.660
those two come out really, really good.


00:29:23.660 --> 00:29:26.080
And so I've heard of great stuff from all that.


00:29:26.080 --> 00:29:29.000
I use Nord VPN and the reason I'm not using Next DNS


00:29:29.000 --> 00:29:31.840
or something like it is I just run Nord VPN and everything


00:29:31.840 --> 00:29:34.880
and check the block all the ads over that as well.


00:29:34.880 --> 00:29:37.320
So it's very, very similar.


00:29:37.320 --> 00:29:39.640
So yeah, I think this is a great solution


00:29:39.640 --> 00:29:41.440
and basically do the same thing.


00:29:41.440 --> 00:29:44.920
- I also wanted to remind everybody that the current,


00:29:44.920 --> 00:29:46.820
this is got a little bit old news,


00:29:46.820 --> 00:29:51.820
but the current Python 3.11 is Python 3.11.0 RC2,


00:29:51.820 --> 00:29:54.040
definitely worth people trying out.


00:29:54.040 --> 00:29:56.640
and definitely if you've got a module that you're,


00:29:56.640 --> 00:29:58.480
you should have been doing this already, shame on you.


00:29:58.480 --> 00:30:01.160
But if you've got a package out there on PyPI


00:30:01.160 --> 00:30:02.640
and people are using it,


00:30:02.640 --> 00:30:04.160
you should be updating your testing


00:30:04.160 --> 00:30:07.780
to make sure that it's testing the latest Python 3.11


00:30:07.780 --> 00:30:10.060
to make sure it continues to work.


00:30:10.060 --> 00:30:12.120
The last extra I wanted to bring up is,


00:30:12.120 --> 00:30:15.640
I saw this the other day called Oh My Git.


00:30:15.640 --> 00:30:19.640
And so this ends up being, what it is,


00:30:19.640 --> 00:30:22.940
is it's a little game and it's a little weird.


00:30:23.960 --> 00:30:26.800
But I tried it out, downloaded and tried it out.


00:30:26.800 --> 00:30:28.720
You've got most of it,


00:30:28.720 --> 00:30:31.440
it's like this view.


00:30:31.440 --> 00:30:34.400
There's a workspace area in the middle,


00:30:34.400 --> 00:30:35.860
there's cards at the bottom,


00:30:35.860 --> 00:30:37.880
and the cards are skills that you get.


00:30:37.880 --> 00:30:39.400
But on the right,


00:30:39.400 --> 00:30:41.520
there's a description of what you want to do,


00:30:41.520 --> 00:30:46.400
and you have to learn the Git commands to do something,


00:30:46.400 --> 00:30:51.400
like rebasing or merging or whatever.


00:30:51.640 --> 00:30:55.440
I started out at the trying out at the very beginning,


00:30:55.440 --> 00:30:57.960
the basic stuff, and it actually was,


00:30:57.960 --> 00:31:00.100
the introduction was pretty cool.


00:31:00.100 --> 00:31:03.160
And then, but what I really like is that you can just go


00:31:03.160 --> 00:31:08.160
to the course, the available, available lessons.


00:31:08.160 --> 00:31:10.360
You don't have to do it in order.


00:31:10.360 --> 00:31:12.920
You can jump out of order and just hop ahead


00:31:12.920 --> 00:31:15.840
to something else that you're having problems with


00:31:15.840 --> 00:31:19.920
and sort of have a visual introduction to get.


00:31:19.920 --> 00:31:21.620
So it's kind of neat.


00:31:21.620 --> 00:31:24.560
That's weird and kind of wonderful.


00:31:24.560 --> 00:31:27.740
- It is a little weird too, yeah.


00:31:27.740 --> 00:31:29.860
- But wonderful, yeah, very cool.


00:31:29.860 --> 00:31:32.940
All right, one more quick follow-up.


00:31:32.940 --> 00:31:35.180
Wagon Race says, "I know we don't want ads,


00:31:35.180 --> 00:31:37.440
"but ads are the reason most stuff is free.


00:31:37.440 --> 00:31:40.620
"Or do you make donations to sites


00:31:40.620 --> 00:31:42.420
"that you block ads from?"


00:31:42.420 --> 00:31:44.620
I just wanted to comment on that real quick.


00:31:44.620 --> 00:31:47.180
I understand that there's a lot of services


00:31:47.180 --> 00:31:48.220
that do need support.


00:31:48.220 --> 00:31:49.620
I mean, I was just listening to an interview


00:31:49.620 --> 00:31:50.980
with the guys from The Verge.


00:31:50.980 --> 00:31:54.100
We have a hundred person team at The Verge working on stuff.


00:31:54.100 --> 00:31:58.660
And yet there is so much like collection


00:31:58.660 --> 00:32:03.660
and triangulation of who you are and what you are


00:32:03.660 --> 00:32:06.340
by these ad networks through like data brokers


00:32:06.340 --> 00:32:08.520
and behind the scenes stuff that is just,


00:32:08.520 --> 00:32:10.860
it is a plague on society.


00:32:10.860 --> 00:32:14.940
I mean, think about the 2016 election


00:32:14.940 --> 00:32:17.500
and the Facebook stuff.


00:32:17.500 --> 00:32:18.780
God, what is that name of that company?


00:32:18.780 --> 00:32:19.780
Do you remember Brian?


00:32:19.780 --> 00:32:21.380
- I don't.


00:32:21.380 --> 00:32:23.420
- Yeah, so they were using all those things


00:32:23.420 --> 00:32:26.380
to basically, that kind of information collected


00:32:26.380 --> 00:32:29.960
from those ad networks to target and manipulate people.


00:32:29.960 --> 00:32:31.460
So it's not just about like,


00:32:31.460 --> 00:32:34.540
do I not really want to see this ad


00:32:34.540 --> 00:32:37.220
for a new programming book, whatever.


00:32:37.220 --> 00:32:39.580
It's the fact that they're using


00:32:39.580 --> 00:32:43.120
these terrible third-party networks to deliver it.


00:32:43.120 --> 00:32:44.780
So for example, Brian, check this out,


00:32:44.780 --> 00:32:47.540
pythonbytes.fm, right?


00:32:47.540 --> 00:32:50.400
If we go here and we go to our episodes


00:32:50.400 --> 00:32:52.100
and let's just pick one here.


00:32:52.100 --> 00:32:53.660
I got to zoom it back out a little bit.


00:32:53.660 --> 00:32:54.620
There we go.


00:32:54.620 --> 00:32:56.740
Look, this one right here, it has an ad.


00:32:56.740 --> 00:32:59.300
That's been, there's an ad blocker on my VPN


00:32:59.300 --> 00:33:01.820
on the network and there's an ad block blocker in my browser.


00:33:01.820 --> 00:33:03.980
And right here, we have an ad with no blocking.


00:33:03.980 --> 00:33:05.580
It shows up just fine.


00:33:05.580 --> 00:33:06.580
Do you know why?


00:33:06.580 --> 00:33:10.060
Because we're not using an evil third party network.


00:33:10.060 --> 00:33:12.440
There's no tracking, there's no retargeting.


00:33:12.440 --> 00:33:15.420
We show you things from people who support us.


00:33:15.420 --> 00:33:18.860
We ask you to please check them out


00:33:18.860 --> 00:33:21.720
and at least consider it to support our show.


00:33:21.720 --> 00:33:23.960
And yet there's as much ad blocking here


00:33:23.960 --> 00:33:27.640
as there is on somewhere like CNN,


00:33:27.640 --> 00:33:29.520
or you pick your spot.


00:33:29.520 --> 00:33:32.240
These places have like 30, 40 different


00:33:32.240 --> 00:33:35.200
tracking networks on you, triangulating stuff


00:33:35.200 --> 00:33:38.340
and reselling it, and it is a plague on society.


00:33:38.340 --> 00:33:40.340
And if CNN wanted to show you ads,


00:33:40.340 --> 00:33:41.480
they could do just what we do.


00:33:41.480 --> 00:33:42.860
I'm sure they have better relationships


00:33:42.860 --> 00:33:44.000
with advertisers than we do.


00:33:44.000 --> 00:33:47.760
So Cambridge Analytica, thank you for letting me know.


00:33:47.760 --> 00:33:49.800
So I'm not against ads.


00:33:49.800 --> 00:33:52.980
I mean, to a large degree, we are ad supported.


00:33:52.980 --> 00:33:56.700
I'm against people building behind the scenes information


00:33:56.700 --> 00:33:58.740
and using it to manipulate society.


00:33:58.740 --> 00:34:00.340
Bit of a rant, sorry, sorry, Brian,


00:34:00.340 --> 00:34:01.180
if I went too far there.


00:34:01.180 --> 00:34:04.480
- But no, and some people just don't realize that,


00:34:04.480 --> 00:34:06.940
that the ads are not just, there's a product


00:34:06.940 --> 00:34:08.340
that we think that you might like


00:34:08.340 --> 00:34:10.880
based on the content of this page.


00:34:10.880 --> 00:34:12.060
That totally makes sense.


00:34:12.060 --> 00:34:15.460
Like this, the people that are listening to Python Bytes,


00:34:15.460 --> 00:34:17.140
they might be interested in Python


00:34:17.140 --> 00:34:19.980
or Microsoft Restarters Founders Hub or something.


00:34:19.980 --> 00:34:22.100
Magazines used to be like this all the time, right?


00:34:22.100 --> 00:34:24.700
So you buy a magazine, it's not tracking you,


00:34:24.700 --> 00:34:26.640
that whether or not you looked at something


00:34:26.640 --> 00:34:29.980
or looked up somebody's website because of a magazine ad.


00:34:29.980 --> 00:34:33.780
There's just stuff collected about you


00:34:33.780 --> 00:34:35.180
that I don't think is necessary.


00:34:35.180 --> 00:34:37.720
And I think, like for instance, Read the Docs


00:34:37.720 --> 00:34:41.700
has like the ethical ads that they don't do,


00:34:41.700 --> 00:34:45.060
yeah, they don't do tracking, so yeah.


00:34:45.060 --> 00:34:47.560
- Exactly, and neither do we.


00:34:47.560 --> 00:34:49.360
On purpose, it probably,


00:34:49.360 --> 00:34:50.900
we've had to turn down sponsors.


00:34:50.900 --> 00:34:52.900
People said, "We want to sponsor you,


00:34:52.900 --> 00:34:54.900
"but we need you to install this tracking thing


00:34:54.900 --> 00:34:56.220
"for your MP3 downloads,


00:34:56.220 --> 00:34:58.220
"we need to install this Facebook pixel


00:34:58.220 --> 00:34:59.060
"and these other things."


00:34:59.060 --> 00:35:00.280
We're like, "You know what, we don't want your money."


00:35:00.280 --> 00:35:01.220
Like, no.


00:35:01.220 --> 00:35:04.760
We're happy to sell your product 'cause it's relevant,


00:35:04.760 --> 00:35:07.300
but we're not gonna spy on our users.


00:35:07.300 --> 00:35:09.540
So thanks, but no thanks.


00:35:09.540 --> 00:35:12.380
All right, and WagonRace, just a quick follow up,


00:35:12.380 --> 00:35:13.380
says, "Thanks for the explanation.


00:35:13.380 --> 00:35:14.340
"I do understand you better,


00:35:14.340 --> 00:35:16.040
"and I'm glad you guys are big enough


00:35:16.040 --> 00:35:19.420
"to have direct sponsors without trackers."


00:35:19.420 --> 00:35:21.060
So are we, thank you.


00:35:21.060 --> 00:35:23.780
Okay, with all that, let's flip the table


00:35:23.780 --> 00:35:26.020
and make something, fill it out with a joke.


00:35:26.020 --> 00:35:26.840
What do you think, Brian?


00:35:26.840 --> 00:35:28.860
- Yeah, I'm ready for something funny.


00:35:28.860 --> 00:35:31.260
- All right, so this one comes from somebody


00:35:31.260 --> 00:35:35.020
who had to go through this online, multiple choice,


00:35:35.020 --> 00:35:37.960
"Prove to me you know JavaScript test to be hired."


00:35:37.960 --> 00:35:38.800
Okay?


00:35:38.800 --> 00:35:41.160
And it says, "So I got this wrong


00:35:41.160 --> 00:35:43.120
because the person who typed in the question


00:35:43.120 --> 00:35:44.320
made a mistake."


00:35:44.320 --> 00:35:45.360
So here, check this out.


00:35:45.360 --> 00:35:47.940
It's one of these multi-choice question things.


00:35:47.940 --> 00:35:51.100
It says, "What is the result of the function call


00:35:51.100 --> 00:35:51.940
shown below?"


00:35:51.940 --> 00:35:54.120
And it's just super simple JavaScript.


00:35:54.120 --> 00:35:59.120
It's creating one of these little Lambda expressions here


00:35:59.120 --> 00:36:02.600
and it has the equivalent of an F string,


00:36:02.600 --> 00:36:04.320
an interpolated string.


00:36:04.320 --> 00:36:05.720
is really the essence of it.


00:36:05.720 --> 00:36:09.160
And it says console.log, open parenthesis,


00:36:09.160 --> 00:36:11.240
this is important, as you would, open parenthesis,


00:36:11.240 --> 00:36:15.760
quote, hi, my name is, you know, dollar curly first name,


00:36:15.760 --> 00:36:18.920
close off the curly, and then it closes out


00:36:18.920 --> 00:36:19.760
(laughs)


00:36:19.760 --> 00:36:20.720
- Oh no.


00:36:20.720 --> 00:36:23.440
- Console.log, instead of with the closing parenthesis,


00:36:23.440 --> 00:36:25.520
with a closing curly brace.


00:36:25.520 --> 00:36:27.800
And so the options are like, hi, my name is John,


00:36:27.800 --> 00:36:28.920
I'm logged into the console.


00:36:28.920 --> 00:36:31.880
Hi, my name is undefined, I'm logged into the console.


00:36:31.880 --> 00:36:34.800
And what the machine thought was the correct answer is,


00:36:34.800 --> 00:36:36.520
"Hi, my name is John Jr."


00:36:36.520 --> 00:36:39.480
'Cause that's the name of the variable,


00:36:39.480 --> 00:36:40.520
the value variable.


00:36:40.520 --> 00:36:41.800
"I'm logged into console."


00:36:41.800 --> 00:36:46.800
And you answered, "Uncaught syntax errors logged to console."


00:36:46.800 --> 00:36:48.520
(laughs)


00:36:48.520 --> 00:36:49.440
And you're like, "No, wrong.


00:36:49.440 --> 00:36:50.800
"It was supposed to say John Jr."


00:36:50.800 --> 00:36:52.840
"No, wrong, you typed it in wrong."


00:36:52.840 --> 00:36:55.600
(both laugh)


00:36:55.600 --> 00:36:56.720
Wouldn't that be frustrating


00:36:56.720 --> 00:36:58.040
if you're trying to apply for a job


00:36:58.040 --> 00:37:00.520
and they put syntax errors in there and you're like,


00:37:00.520 --> 00:37:02.220
>> Nope. Because they may be


00:37:02.220 --> 00:37:03.220
checking whether or not you're


00:37:03.220 --> 00:37:04.940
finding that closing curly brace.


00:37:04.940 --> 00:37:07.700
That's a legitimate test, I guess.


00:37:07.700 --> 00:37:08.500
But no.


00:37:08.500 --> 00:37:12.020
>> Yeah. I think it's fine that you don't get to work for


00:37:12.020 --> 00:37:14.900
them because they're probably not someplace you want to work for.


00:37:14.900 --> 00:37:17.740
They've got syntax errors in their on-boarding.


00:37:17.740 --> 00:37:19.220
>> Exactly.


00:37:19.220 --> 00:37:21.060
>> In their application process.


00:37:21.060 --> 00:37:23.700
>> Exactly. Oh, well.


00:37:23.700 --> 00:37:25.260
Anyway, I thought that was pretty funny,


00:37:25.260 --> 00:37:26.940
and I'm sure people have been through that.


00:37:26.940 --> 00:37:29.780
There's all these weird go home and write


00:37:29.780 --> 00:37:32.280
this test or take this thing to prove,


00:37:32.280 --> 00:37:34.000
you know how to write code sort of things.


00:37:34.000 --> 00:37:35.520
I'm sure people have been through so,


00:37:35.520 --> 00:37:37.880
they'll probably get a laugh out of this.


00:37:37.880 --> 00:37:41.160
>> Yeah, that's pretty funny.


00:37:41.160 --> 00:37:42.720
>> It was.


00:37:42.720 --> 00:37:44.040
>> Shall we wrap it up?


00:37:44.040 --> 00:37:44.800
>> Let's.


00:37:44.800 --> 00:37:48.240
>> Cool. So thanks everybody for coming and watching the show,


00:37:48.240 --> 00:37:50.240
and also everybody that listens.


00:37:50.240 --> 00:37:52.960
We love all of you. Thanks Michael.


00:37:52.960 --> 00:37:55.200
>> Indeed. Thank you everyone. Thank you Brian.


00:37:55.200 --> 00:37:56.160
Yeah. See you next week.

