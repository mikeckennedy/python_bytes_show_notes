
00:00:00.000 --> 00:00:04.240
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your buds.


00:00:04.240 --> 00:00:09.040
This is episode 181, recorded May 6, 2020. I'm Michael Kennedy.


00:00:09.040 --> 00:00:10.000
And I am Brian Otkin.


00:00:10.000 --> 00:00:13.680
And this episode is brought to you by Datadog. Tell you more about them later.


00:00:13.680 --> 00:00:18.240
Brian, this first item that you picked here, I saw this going around the Twitterverse and I was


00:00:18.240 --> 00:00:20.560
like, "Oh, that looks really cool. Tell us about it."


00:00:20.560 --> 00:00:26.240
Yes, Interrogate. So it's a new little tool. I think it's kind of new, new to me at least.


00:00:26.800 --> 00:00:29.500
It checks your code base for missing docstrings,


00:00:29.500 --> 00:00:31.300
or the presence of docstrings.


00:00:31.300 --> 00:00:33.540
So it's written and maintained by Linroot,


00:00:33.540 --> 00:00:37.040
and we were notified by Herbert Beamster,


00:00:37.040 --> 00:00:38.740
suggested it to us.


00:00:38.740 --> 00:00:39.700
I like docstrings.


00:00:39.700 --> 00:00:42.820
I don't have a policy of having them everywhere,


00:00:42.820 --> 00:00:45.940
but docstrings can help you understand the code quite a bit.


00:00:45.940 --> 00:00:48.860
I really love how a function docstring


00:00:48.860 --> 00:00:51.740
is utilized by VS Code and PyCharm


00:00:51.740 --> 00:00:53.620
and other editors to do things like,


00:00:53.620 --> 00:00:54.860
if you hover over a function,


00:00:54.860 --> 00:00:57.860
and it just pops up a little window with like,


00:00:57.860 --> 00:00:59.700
you know, what parameters you can send to it,


00:00:59.700 --> 00:01:01.460
but it also sends the docstring,


00:01:01.460 --> 00:01:03.300
shows the docstring if there is one.


00:01:03.300 --> 00:01:06.980
There's also other tools like Sphinx or PyDoc or Docutils


00:01:06.980 --> 00:01:09.380
that can use that amongst other things


00:01:09.380 --> 00:01:11.140
to generate documentation.


00:01:11.140 --> 00:01:12.300
I don't really use those.


00:01:12.300 --> 00:01:14.100
I know a lot of people do though.


00:01:14.100 --> 00:01:16.700
So it's a problem if you've got some missing,


00:01:16.700 --> 00:01:18.580
if you really need to have docstring someplace


00:01:18.580 --> 00:01:19.660
and they're missing.


00:01:19.660 --> 00:01:21.700
So interrogate is a command line tool


00:01:21.700 --> 00:01:23.280
that you can use to check your code


00:01:23.280 --> 00:01:26.340
to make sure everything has a doc string that needs to.


00:01:26.340 --> 00:01:27.340
- I think this is great. - It's so cool.


00:01:27.340 --> 00:01:28.240
- Yeah, it's super cool.


00:01:28.240 --> 00:01:29.240
And well done, Lynn.


00:01:29.240 --> 00:01:30.300
Nice work on this one.


00:01:30.300 --> 00:01:31.540
I think this is really nice


00:01:31.540 --> 00:01:34.960
because if you have a public library,


00:01:34.960 --> 00:01:36.920
that should be documented, right?


00:01:36.920 --> 00:01:40.160
That should be covered with nice doc strings


00:01:40.160 --> 00:01:42.760
that give you all sorts of help in your editor,


00:01:42.760 --> 00:01:43.600
like you mentioned,


00:01:43.600 --> 00:01:46.720
but also if you generate the documentation,


00:01:46.720 --> 00:01:49.880
you don't wanna have just some random empty,


00:01:49.880 --> 00:01:51.120
either completely missing


00:01:51.120 --> 00:01:53.700
or just the, you know, like the function name


00:01:53.700 --> 00:01:56.660
and just an empty body or whatever it gets generated there.


00:01:56.660 --> 00:01:57.840
So this is really cool.


00:01:57.840 --> 00:02:01.220
And I could see if you were doing a package that was public,


00:02:01.220 --> 00:02:03.960
having this part of your CI/CD process


00:02:03.960 --> 00:02:07.860
that if somebody introduces something into say like a PR,


00:02:07.860 --> 00:02:10.200
here's a new function we wrote, like great.


00:02:10.200 --> 00:02:13.840
It failed the CI because it doesn't have a docstring.


00:02:13.840 --> 00:02:14.680
That'd be awesome.


00:02:14.680 --> 00:02:17.100
- Yeah, and then there's also some common,


00:02:17.100 --> 00:02:18.580
there's some common like caveats,


00:02:18.580 --> 00:02:21.300
Like, yes, all public functions should have docstrings.


00:02:21.300 --> 00:02:24.420
But what about like private functions and stuff?


00:02:24.420 --> 00:02:27.580
There's options to be able to turn off things


00:02:27.580 --> 00:02:30.460
where you might not need a docstring


00:02:30.460 --> 00:02:32.740
for just an internal helper function or something.


00:02:32.740 --> 00:02:33.740
- Yeah, I totally agree.


00:02:33.740 --> 00:02:36.500
Like if it's not really meant to be included,


00:02:36.500 --> 00:02:38.340
you know, in the public API,


00:02:38.340 --> 00:02:41.060
then it shouldn't necessarily have a docstring.


00:02:41.060 --> 00:02:43.240
- Yeah, it can if it helps to understand it,


00:02:43.240 --> 00:02:44.740
but you don't, maybe you don't need it.


00:02:44.740 --> 00:02:45.980
So this is nice.


00:02:45.980 --> 00:02:47.660
- Yeah, yeah, this is super cool.


00:02:47.660 --> 00:02:48.500
Well done, Lynn.


00:02:48.500 --> 00:02:53.620
I wanted to mention also there is information on the readme about how to use the tool within


00:02:53.620 --> 00:02:57.300
talks and within CI workflows, so that's helpful.


00:02:57.300 --> 00:03:02.580
Yeah, this one seems like a super easy thing to adopt if you already have a CI process


00:03:02.580 --> 00:03:08.780
in place and you're working on something that's public, whether that's public to your people


00:03:08.780 --> 00:03:14.340
within your company or it's a package that is used by other projects, or it's public


00:03:14.340 --> 00:03:16.220
as in on pypi.org.


00:03:16.220 --> 00:03:18.180
I still think it makes sense to just document it


00:03:18.180 --> 00:03:20.500
for whoever's consuming it who's not writing it.


00:03:20.500 --> 00:03:21.860
Yep, very cool.


00:03:21.860 --> 00:03:24.960
Now, this next one I've been holding off on talking about


00:03:24.960 --> 00:03:27.660
for a long time because it's really interesting,


00:03:27.660 --> 00:03:31.460
but I didn't feel like I was able to do it justice.


00:03:31.460 --> 00:03:34.900
So the thing I wanna talk about is Streamlet.


00:03:34.900 --> 00:03:38.100
With Streamlet, the idea is it allows you to build


00:03:38.100 --> 00:03:42.580
much simpler data science applications


00:03:42.580 --> 00:03:45.320
and web apps, I guess you would say.


00:03:45.320 --> 00:03:49.300
So many people come to Python from,


00:03:49.300 --> 00:03:52.460
I've got a little bit of computation that I gotta do,


00:03:52.460 --> 00:03:56.500
and so I'm going to write a script that does like 10 things.


00:03:56.500 --> 00:03:57.740
Maybe it doesn't even have a function,


00:03:57.740 --> 00:04:02.260
it just does, you know, load data, transform data,


00:04:02.260 --> 00:04:04.980
pivot data, show graph, or something like that, right?


00:04:04.980 --> 00:04:05.820
Really, really simple.


00:04:05.820 --> 00:04:08.060
They're not like pro web developers


00:04:08.060 --> 00:04:10.180
that are like busting out Vue or React


00:04:10.180 --> 00:04:12.220
or something like that to build cool apps.


00:04:12.220 --> 00:04:15.040
But they've got this really cool outcome with Python,


00:04:15.040 --> 00:04:17.400
and they're happy, but at the same time,


00:04:17.400 --> 00:04:20.220
they would like to have this publicly shareable.


00:04:20.220 --> 00:04:21.720
They maybe wanna put it on the internet.


00:04:21.720 --> 00:04:23.120
They wanna make a web app out of it.


00:04:23.120 --> 00:04:26.120
And the gap from I've got 10 lines of code


00:04:26.120 --> 00:04:30.120
that outputs a graph to I have a fully interactive,


00:04:30.120 --> 00:04:33.840
dynamic, server-backed, JavaScript front-end


00:04:33.840 --> 00:04:36.920
type of visual website, that's a big gap, right?


00:04:36.920 --> 00:04:38.760
- Yeah. - So, Streamlit--


00:04:38.760 --> 00:04:40.520
- Even for me, yeah. - Yeah, well,


00:04:40.520 --> 00:04:41.740
yeah, for me as well.


00:04:41.740 --> 00:04:45.700
Now for Streamlit, the idea is that you write the code


00:04:45.700 --> 00:04:48.960
in the simple straightforward style that I talked about,


00:04:48.960 --> 00:04:53.140
but then it turns it into an interactive web application.


00:04:53.140 --> 00:04:53.980
- That's neat.


00:04:53.980 --> 00:04:54.800
- That sounds neat, right?


00:04:54.800 --> 00:04:57.860
And it does a whole bunch of really interesting tricks


00:04:57.860 --> 00:05:00.680
to let you continue to write code


00:05:00.680 --> 00:05:03.220
in this simple straightforward way,


00:05:03.220 --> 00:05:06.300
and yet interact with like callbacks and stuff.


00:05:06.300 --> 00:05:08.060
So you might have a function that comes along


00:05:08.060 --> 00:05:10.900
and says, okay, what I need to do is I wanna show,


00:05:10.900 --> 00:05:13.540
I don't know, a dropdown list in a web app


00:05:13.540 --> 00:05:15.760
or a slider bar or something like that.


00:05:15.760 --> 00:05:17.100
And then you write your code that says,


00:05:17.100 --> 00:05:19.700
get the value from the slider bar.


00:05:19.700 --> 00:05:22.060
And you might think, okay, well,


00:05:22.060 --> 00:05:23.880
normally that's a wait for the user


00:05:23.880 --> 00:05:24.980
to click on the slider bar.


00:05:24.980 --> 00:05:27.300
And when there's a change or some kind of callback,


00:05:27.300 --> 00:05:29.380
and then you have some function that runs on the callback


00:05:29.380 --> 00:05:31.080
and then it updates the DOM, right?


00:05:31.080 --> 00:05:34.260
But this is like straightforward procedural code


00:05:34.260 --> 00:05:36.340
or imperative code that doesn't have


00:05:36.340 --> 00:05:37.420
any of those ideas in it.


00:05:37.420 --> 00:05:40.860
So what it does is it uses interesting caching


00:05:40.860 --> 00:05:43.120
on your function so that if it were to rerun it


00:05:43.120 --> 00:05:44.940
with the same inputs, it gives you the same answer


00:05:44.940 --> 00:05:48.000
instantly, like LRU cache type of stuff.


00:05:48.000 --> 00:05:51.320
And then if any of those controls on the webpage change,


00:05:51.320 --> 00:05:52.960
it just reruns the whole script.


00:05:52.960 --> 00:05:55.360
And when you say, "Get me the value from the slider,"


00:05:55.360 --> 00:05:58.560
it says, "Well, currently the slider's set at this."


00:05:58.560 --> 00:06:00.280
And if it happens to change, it just reruns


00:06:00.280 --> 00:06:02.000
the entire thing from beginning to end.


00:06:02.000 --> 00:06:04.080
But because everything's cached,


00:06:04.080 --> 00:06:07.000
it only recomputes the parts that are needed.


00:06:07.000 --> 00:06:09.120
So you don't have to think about callbacks,


00:06:09.120 --> 00:06:10.840
you don't have to think about user interaction,


00:06:10.840 --> 00:06:12.680
You just write top to bottom code.


00:06:12.680 --> 00:06:15.240
And here you've got multiple parts of your application


00:06:15.240 --> 00:06:16.640
that can be changed dynamically


00:06:16.640 --> 00:06:18.000
that just continue to refresh.


00:06:18.000 --> 00:06:21.440
And it refreshes it by using JavaScript.


00:06:21.440 --> 00:06:23.120
So it doesn't even reload the page.


00:06:23.120 --> 00:06:24.880
It just looks like parts of the page


00:06:24.880 --> 00:06:26.520
are dynamic and coming alive.


00:06:26.520 --> 00:06:27.520
- Oh, wow.


00:06:27.520 --> 00:06:28.360
This is neat.


00:06:28.360 --> 00:06:29.180
- Yeah, so it's super cool.


00:06:29.180 --> 00:06:31.960
Basically, if you can write like straightforward


00:06:31.960 --> 00:06:35.840
top to bottom code that works with like graphing


00:06:35.840 --> 00:06:37.740
or pandas or something like that,


00:06:37.740 --> 00:06:41.060
you now can create a single page, a spa app.


00:06:41.060 --> 00:06:43.820
And I don't remember what JavaScript framework it uses.


00:06:43.820 --> 00:06:45.980
It's like React or Vue or something like that.


00:06:45.980 --> 00:06:47.880
I think it might be React.


00:06:47.880 --> 00:06:49.020
Anyway, it's not super relevant,


00:06:49.020 --> 00:06:53.160
but it does all of that work with like hosting it


00:06:53.160 --> 00:06:55.180
and creating the server callbacks


00:06:55.180 --> 00:06:57.380
and setting up the JavaScript and the UI widgets


00:06:57.380 --> 00:06:58.660
and all that kind of stuff.


00:06:58.660 --> 00:07:01.300
And all you do is write basically procedural code.


00:07:01.300 --> 00:07:02.940
One thing that I think is a danger


00:07:02.940 --> 00:07:06.740
of these types of applications is it's easy to say,


00:07:06.740 --> 00:07:09.700
if you use our magic graphing library


00:07:09.700 --> 00:07:12.740
and our magic UI widgets and our magic,


00:07:12.740 --> 00:07:14.800
you know, data processing library,


00:07:14.800 --> 00:07:17.900
not a real database, but our magic server database


00:07:17.900 --> 00:07:19.540
that we create, then it works, right?


00:07:19.540 --> 00:07:22.380
What I like about this is it doesn't do any of those things.


00:07:22.380 --> 00:07:25.300
It just says, you want to use pandas and NumPy


00:07:25.300 --> 00:07:27.500
and Plotly or something like that?


00:07:27.500 --> 00:07:31.020
Use those and then use them in your script


00:07:31.020 --> 00:07:33.220
and then we just make it this single page app,


00:07:33.220 --> 00:07:34.060
which is pretty awesome.


00:07:34.060 --> 00:07:34.980
- Yeah, that was my question.


00:07:34.980 --> 00:07:39.140
Is this a hosted thing or can I do it like behind a firewall or a local thing?


00:07:39.140 --> 00:07:39.780
Or do you know?


00:07:39.780 --> 00:07:40.140
>> Yes.


00:07:40.140 --> 00:07:44.020
So with Streamlet, you have a couple of options.


00:07:44.020 --> 00:07:50.300
I haven't done anything myself, but you can self-host it or they'll host it for you, I believe.


00:07:50.300 --> 00:07:50.700
>> Okay.


00:07:50.700 --> 00:07:57.100
>> And if you -- they have this thing called four teams, which is like they automatically deploy


00:07:57.100 --> 00:08:00.700
and manage the apps and you just create them and say, here's the code and run it.


00:08:00.700 --> 00:08:04.660
It's like kind of a platform as a service for Streamlet apps type of thing.


00:08:04.660 --> 00:08:06.420
That's a paid part of what they're doing,


00:08:06.420 --> 00:08:08.980
but the stuff I described up until then,


00:08:08.980 --> 00:08:11.480
that is free and open source.


00:08:11.480 --> 00:08:13.300
So it's still pretty usable.


00:08:13.300 --> 00:08:16.540
Yeah, so you have to basically deploy them yourself.


00:08:16.540 --> 00:08:18.100
But they talk about how to do it.


00:08:18.100 --> 00:08:19.180
You know, it's not super hard.


00:08:19.180 --> 00:08:20.100
- Okay, thanks.


00:08:20.100 --> 00:08:22.520
- Yeah, so I had one of the guys, Adrian,


00:08:22.520 --> 00:08:24.540
on who was behind this and has also done


00:08:24.540 --> 00:08:27.580
some other interesting technical programming stuff


00:08:27.580 --> 00:08:30.200
and with self-driving cars and folding a home,


00:08:30.200 --> 00:08:32.260
those types of things, on Talk Python


00:08:32.260 --> 00:08:33.660
just a couple episodes ago.


00:08:33.660 --> 00:08:40.780
I don't remember exactly what number it was, but I guess 260-ish, something like that.


00:08:40.780 --> 00:08:43.600
So just check out that episode if people want to go much deeper.


00:08:43.600 --> 00:08:44.600
But this is really cool.


00:08:44.600 --> 00:08:48.400
If you're writing these imperative, simple little scripting apps and you're like, "I


00:08:48.400 --> 00:08:51.400
would really like to share this or make it better," Streamlet's cool.


00:08:51.400 --> 00:08:52.400
Yeah, nice.


00:08:52.400 --> 00:08:53.400
Okay.


00:08:53.400 --> 00:08:54.940
I feel like we both have themes for ours.


00:08:54.940 --> 00:08:59.500
Your theme is continuous documenting and whatnot, and you'll see my theme develop as well.


00:08:59.500 --> 00:09:05.820
This is interesting because I ran across this interrogate second, but after I ran across


00:09:05.820 --> 00:09:12.540
this article by Heenik that says why you should document your tests.


00:09:12.540 --> 00:09:14.540
He makes a lot of good points.


00:09:14.540 --> 00:09:21.140
So I believe, and we have this policy where I work, tests should have doc strings on them


00:09:21.140 --> 00:09:25.580
to tell you what the test is doing and why it's there.


00:09:25.580 --> 00:09:30.300
There's a lot of reasons that I have never really been able to describe clearly.


00:09:30.300 --> 00:09:35.380
Because ideally your test name should be descriptive and the code should be clear.


00:09:35.380 --> 00:09:37.700
So why do you need a doc string?


00:09:37.700 --> 00:09:40.460
That's not something that you're going to call from an API or anything.


00:09:40.460 --> 00:09:44.580
You probably won't type help function, test function, right?


00:09:44.580 --> 00:09:45.860
Maybe, probably not.


00:09:45.860 --> 00:09:47.340
And you also don't call it.


00:09:47.340 --> 00:09:51.100
I mean, like test methods that you run pytest with, pytest calls it.


00:09:51.100 --> 00:09:52.500
You don't call those tests.


00:09:52.500 --> 00:09:55.960
But you can get confused in the future and one of the explanations is


00:09:55.960 --> 00:09:58.780
Hinnick has a good example where he shows


00:09:58.780 --> 00:10:01.660
some simple code with a simple test name


00:10:01.660 --> 00:10:05.300
but the thing he's asserting on doesn't really make sense and


00:10:05.300 --> 00:10:10.780
the reason if you don't know what's going on under the hood and the reason is because tests often are


00:10:10.780 --> 00:10:17.880
testing for a side effect of an action. If you're testing the output of a function, that's obvious.


00:10:17.880 --> 00:10:22.240
It's kind of obvious of the, if I pass in functional tests,


00:10:22.240 --> 00:10:24.600
if you pass in certain parameters


00:10:24.600 --> 00:10:26.160
and you get a certain expected output,


00:10:26.160 --> 00:10:27.760
you can assert against that.


00:10:27.760 --> 00:10:29.960
But what about actions that have side effects


00:10:29.960 --> 00:10:31.700
and you need to test for those?


00:10:31.700 --> 00:10:34.040
That might need some more explanation.


00:10:34.040 --> 00:10:36.920
And he writes, this is quite common in testing.


00:10:36.920 --> 00:10:39.760
Very often you can't ask questions directly.


00:10:39.760 --> 00:10:42.600
Instead, you verify certain properties


00:10:42.600 --> 00:10:46.100
that prove that your code is achieving its goals


00:10:46.100 --> 00:10:48.780
by checking side effects and stuff like that.


00:10:48.780 --> 00:10:51.520
It's a short little article and I was just happy


00:10:51.520 --> 00:10:56.520
to have some of that expressed of why you should document.


00:10:56.520 --> 00:10:58.920
And it might be you that's confused in the future.


00:10:58.920 --> 00:11:02.120
And then it ties back into the interrogate because,


00:11:02.120 --> 00:11:03.620
so I was just thinking when I was reading


00:11:03.620 --> 00:11:05.660
about interrogate, I'm like, oh, awesome.


00:11:05.660 --> 00:11:07.380
I really want to put something in place


00:11:07.380 --> 00:11:10.060
to just make sure all my tests have doc strings.


00:11:10.060 --> 00:11:12.920
And he lists in the article,


00:11:12.920 --> 00:11:15.200
the exact command line that you need


00:11:15.200 --> 00:11:18.220
to make sure that all, just text to make sure


00:11:18.220 --> 00:11:21.360
that your tests have doc strings and nothing else.


00:11:21.360 --> 00:11:22.480
So this is cool.


00:11:22.480 --> 00:11:23.720
- Yeah, it looks really nice.


00:11:23.720 --> 00:11:26.180
And I can see how this would lead you down


00:11:26.180 --> 00:11:31.180
to finding a library that searches for or evaluates these.


00:11:31.180 --> 00:11:34.220
Yeah, so the test example he has here is testing


00:11:34.220 --> 00:11:36.600
that the hash, like creating the same object,


00:11:36.600 --> 00:11:39.740
an instance of a class twice and taking the hash


00:11:39.740 --> 00:11:42.160
and making sure that those are not the same


00:11:42.160 --> 00:11:44.480
because he's trying to test that adders


00:11:44.480 --> 00:11:46.760
is not implementing false on the class


00:11:46.760 --> 00:11:48.040
or something to that effect, right?


00:11:48.040 --> 00:11:51.120
So, like what the heck is going on with this?


00:11:51.120 --> 00:11:52.720
Like why would you check the hash of a thing


00:11:52.720 --> 00:11:54.600
is not equal to the hash of a thing,


00:11:54.600 --> 00:11:55.920
but it's looking like you said


00:11:55.920 --> 00:11:57.960
for this sort of like hidden layer


00:11:57.960 --> 00:12:00.280
that's operating below it, right?


00:12:00.280 --> 00:12:02.400
- Yeah, and then also my reasoning,


00:12:02.400 --> 00:12:03.840
and I think he brings it up,


00:12:03.840 --> 00:12:07.480
is that often when you're looking at a test,


00:12:07.480 --> 00:12:10.600
it's because you really got to get a release out


00:12:10.600 --> 00:12:12.360
and one of the tests is failing.


00:12:12.360 --> 00:12:14.080
So you got to go look at the test


00:12:14.080 --> 00:12:17.480
and figure out what it's testing for and why it's failing.


00:12:17.480 --> 00:12:21.600
And if you don't have it clear why the test is important,


00:12:21.600 --> 00:12:24.240
you run the risk of the person at the time going,


00:12:24.240 --> 00:12:26.760
well, I don't even understand what this test does.


00:12:26.760 --> 00:12:27.720
Maybe it's not important.


00:12:27.720 --> 00:12:28.760
- Comment it out.


00:12:28.760 --> 00:12:29.880
- Comment it out.


00:12:29.880 --> 00:12:30.720
- Passes. - You don't want that.


00:12:30.720 --> 00:12:32.320
- CI's good, we're going home.


00:12:32.320 --> 00:12:37.600
- I don't do that, but I've heard it done before, of course.


00:12:37.600 --> 00:12:39.040
- I would never do anything like that,


00:12:39.040 --> 00:12:41.000
but I can imagine that it has been done.


00:12:41.000 --> 00:12:43.400
Now, I actually have some experiences in the past


00:12:43.400 --> 00:12:45.240
where there was some project


00:12:45.240 --> 00:12:49.200
and it had a beautiful set of tests and CI and stuff


00:12:49.200 --> 00:12:50.360
and I wasn't working on it anymore


00:12:50.360 --> 00:12:52.000
and whoever took it over was like,


00:12:52.000 --> 00:12:55.040
oh, those tests were really annoying, so I turned them off.


00:12:55.040 --> 00:12:58.280
You're like, oh my gosh, those were there for a reason.


00:12:58.280 --> 00:12:59.640
What just happened?


00:12:59.640 --> 00:13:02.020
So at least if this gives you some description


00:13:02.020 --> 00:13:03.400
about what's up, that would be good.


00:13:03.400 --> 00:13:07.860
Is there anything where pytest will show the docstring


00:13:07.860 --> 00:13:09.040
as part of the error report?


00:13:09.040 --> 00:13:11.460
- I think there was somebody that wrote a tool


00:13:11.460 --> 00:13:13.140
that would do, I don't remember the name of it.


00:13:13.140 --> 00:13:18.860
I remember running across a plugin that would pop out the doc string for failed tests, which


00:13:18.860 --> 00:13:19.860
would be pretty cool.


00:13:19.860 --> 00:13:20.860
Yeah, that would be pretty cool.


00:13:20.860 --> 00:13:25.500
Hopefully, the person evaluating the test failures has access to the code they can go


00:13:25.500 --> 00:13:26.500
look.


00:13:26.500 --> 00:13:29.980
Yeah, I'm thinking more of like a CI/CD, like you're not really, you don't have it like


00:13:29.980 --> 00:13:31.740
loaded up right there, right?


00:13:31.740 --> 00:13:34.060
You're just like, "Oh, I'm cruising on GitHub, checking a PR.


00:13:34.060 --> 00:13:35.060
What the heck is this?"


00:13:35.060 --> 00:13:40.060
Yeah, I actually wrote a, it was an internal thing, but a quick plugin for pytest that


00:13:40.060 --> 00:13:42.780
that would just before every test function,


00:13:42.780 --> 00:13:47.540
print out the test name and print out the doc string.


00:13:47.540 --> 00:13:49.940
If we can look at the logs, it's there.


00:13:49.940 --> 00:13:50.780
- Yeah, that's cool.


00:13:50.780 --> 00:13:51.620
Very nice.


00:13:51.620 --> 00:13:53.160
Also cool, Datadog.


00:13:53.160 --> 00:13:56.060
So this episode is brought to you by Datadog.


00:13:56.060 --> 00:13:57.180
And let me ask you a question.


00:13:57.180 --> 00:13:59.100
Do you have an app in production that's slower


00:13:59.100 --> 00:13:59.940
than you like?


00:13:59.940 --> 00:14:01.420
Is performance all over the place?


00:14:01.420 --> 00:14:03.620
Maybe sometimes fast, sometimes slow.


00:14:03.620 --> 00:14:04.820
Here's the important question.


00:14:04.820 --> 00:14:06.800
Do you know why it does that?


00:14:06.800 --> 00:14:07.820
With Datadog, you will.


00:14:07.820 --> 00:14:09.880
You can troubleshoot your app's performance


00:14:09.880 --> 00:14:11.760
with their end-to-end tracing.


00:14:11.760 --> 00:14:13.320
Check out their detailed flame graphs


00:14:13.320 --> 00:14:14.640
to find bottlenecks and latency


00:14:14.640 --> 00:14:16.500
in that finicky app of yours.


00:14:16.500 --> 00:14:19.720
Be the hero that got your app back on track at your company.


00:14:19.720 --> 00:14:23.940
Get started with a free trial at pythonbytes.fm/datadog


00:14:23.940 --> 00:14:26.320
and get a cool little t-shirt as well.


00:14:26.320 --> 00:14:29.340
All right, so your theme so far has been pretty clear.


00:14:29.340 --> 00:14:30.180
Next one of mine,


00:14:30.180 --> 00:14:33.280
I wanna talk about a project called HoloViz.


00:14:33.280 --> 00:14:34.400
Have you heard of HoloViz?


00:14:34.400 --> 00:14:35.240
- I have not.


00:14:35.240 --> 00:14:38.160
- I'm sure you've heard of SciPy and those types of things.


00:14:38.160 --> 00:14:43.760
So there's kind of a grouping of other projects, right, under that general banner with like


00:14:43.760 --> 00:14:46.800
NumPy, Matplotlib, and whatnot.


00:14:46.800 --> 00:14:53.240
But HoloViz is kind of like that for data processing and visualization.


00:14:53.240 --> 00:14:58.560
And one of its features acts very much like Streamlet, but in a more general, probably


00:14:58.560 --> 00:15:02.680
a little more work to set up and like, right, you got to work more on its framework, but


00:15:02.680 --> 00:15:05.880
in a very similar way to what Streamlet is doing as well.


00:15:05.880 --> 00:15:10.880
So HoloViz is a coordinated effort


00:15:10.880 --> 00:15:14.320
to make browser-based data visualization


00:15:14.320 --> 00:15:16.600
in Python easier to use,


00:15:16.600 --> 00:15:18.180
easier to learn, and more powerful.


00:15:18.180 --> 00:15:20.080
- Very cool.


00:15:20.080 --> 00:15:21.120
- So what does it do?


00:15:21.120 --> 00:15:22.060
So it has a bunch of tools


00:15:22.060 --> 00:15:24.220
that make it easier to apply


00:15:24.220 --> 00:15:26.220
Python plotting libraries to your data,


00:15:26.220 --> 00:15:28.600
a bunch of tutorials,


00:15:28.600 --> 00:15:30.060
conda, like meta package


00:15:30.060 --> 00:15:31.820
that when you conda install,


00:15:31.820 --> 00:15:34.480
HoloViz, it actually installs


00:15:34.480 --> 00:15:35.800
a whole bunch of things.


00:15:31.840 --> 00:15:34.720
tell you about a second, even has some sample data sets. So you can like go


00:15:34.720 --> 00:15:39.160
through the tutorials and actually get the outcome, right? So it's made up of a


00:15:39.160 --> 00:15:43.160
bunch of different things. One called panel and that one makes creating apps


00:15:43.160 --> 00:15:47.960
and dashboards for your plots using any of the supported plotting libraries,


00:15:47.960 --> 00:15:53.120
which is pretty awesome. It has HV plot to quickly generate interactive plots, as


00:15:53.120 --> 00:16:00.040
hollow views to make your data instantly visualizable, Geo views for visualizing


00:16:00.040 --> 00:16:04.680
and geographic data, data shader for rendering huge datasets,


00:16:04.680 --> 00:16:08.400
param for creating user configurable objects,


00:16:08.400 --> 00:16:12.800
like config stuff, and then color set for like color maps.


00:16:12.800 --> 00:16:15.340
So yeah, you want to have like nice colors


00:16:15.340 --> 00:16:17.380
that flow together for your plots.


00:16:17.380 --> 00:16:20.020
And panel is the main thing that I was thinking of


00:16:20.020 --> 00:16:22.660
that lets you create these single page apps


00:16:22.660 --> 00:16:26.200
around interactive sliders and dropdowns,


00:16:26.200 --> 00:16:28.400
around your graphs and other kinds of stuff.


00:16:28.400 --> 00:16:30.880
And yeah, very cool project as well.


00:16:30.880 --> 00:16:33.680
- Yeah, I was looking at the data shader


00:16:33.680 --> 00:16:35.440
and they have some really pretty pictures


00:16:35.440 --> 00:16:40.440
'cause of the examples of overlaying data plots


00:16:40.440 --> 00:16:43.560
over the map of the US, things like that.


00:16:43.560 --> 00:16:44.400
It's cool.


00:16:44.400 --> 00:16:46.120
- Yeah, or you can plot attractors


00:16:46.120 --> 00:16:48.000
with 10 million points each.


00:16:48.000 --> 00:16:49.360
Oh, is that all?


00:16:49.360 --> 00:16:50.960
(laughing)


00:16:50.960 --> 00:16:53.440
And these graphs, the resulting pictures are,


00:16:53.440 --> 00:16:55.800
I don't know what, they're like 400 by 400 pixels


00:16:55.800 --> 00:16:56.640
or smaller.


00:16:56.640 --> 00:16:58.440
Yeah, that came from 10 million points.


00:16:58.440 --> 00:17:03.440
Or here's the United States plotting each person


00:17:03.440 --> 00:17:06.840
in the United States where they're physically located


00:17:06.840 --> 00:17:08.200
from the 2010 census.


00:17:08.200 --> 00:17:11.280
So 300 million points of data


00:17:11.280 --> 00:17:13.840
overlaid onto the United States map.


00:17:13.840 --> 00:17:15.640
Yeah, it's like a sun.


00:17:15.640 --> 00:17:17.580
Really is pretty interesting, actually.


00:17:17.580 --> 00:17:19.320
I think I can see you over there, Brian.


00:17:19.320 --> 00:17:20.160
You're on the left.


00:17:20.160 --> 00:17:21.280
(Brian laughs)


00:17:21.280 --> 00:17:22.400
- You are too.


00:17:22.400 --> 00:17:23.320
- That's right.


00:17:23.320 --> 00:17:25.160
Awesome, anyway, yeah, so this is a cool project.


00:17:25.160 --> 00:17:27.800
there's a whole bunch of different little libraries


00:17:27.800 --> 00:17:28.680
that are pretty neat.


00:17:28.680 --> 00:17:31.240
So if you wanna try to visualize your data


00:17:31.240 --> 00:17:32.420
and we'll come back and talk some more


00:17:32.420 --> 00:17:33.560
about both of these projects


00:17:33.560 --> 00:17:35.320
towards the end of the show as well.


00:17:35.320 --> 00:17:36.960
But bunch of cool libraries,


00:17:36.960 --> 00:17:39.300
like all brought together under this HoloViz project


00:17:39.300 --> 00:17:40.640
to make them work together.


00:17:40.640 --> 00:17:41.480
- Yeah, nice.


00:17:41.480 --> 00:17:42.600
- Nice, what'd you got next?


00:17:42.600 --> 00:17:44.600
- I have another command line tool.


00:17:44.600 --> 00:17:48.080
So this was by, oh gosh, Rosario.


00:17:48.080 --> 00:17:50.000
And he wrote a little blog post about it,


00:17:50.000 --> 00:17:53.400
but there's a project called Live Progress.


00:17:53.400 --> 00:17:55.920
And it's a progress bar for Python.


00:17:55.920 --> 00:17:57.920
And it's really cool.


00:17:57.920 --> 00:17:58.760
So--


00:17:58.760 --> 00:17:59.580
- It is pretty cool.


00:17:59.580 --> 00:18:01.120
- Command line interface progress bar.


00:18:01.120 --> 00:18:05.440
So often, I mean, like even like pytest has added


00:18:05.440 --> 00:18:08.240
progress bars for, you know, watching your test finish


00:18:08.240 --> 00:18:09.060
and things like that.


00:18:09.060 --> 00:18:10.840
And it's nice to have progress bars.


00:18:10.840 --> 00:18:12.900
It gives you good feedback and whatnot,


00:18:12.900 --> 00:18:15.280
but there's limits to what you can do,


00:18:15.280 --> 00:18:17.620
except for this seems unlimited.


00:18:17.620 --> 00:18:20.320
It's got a whole bunch of different animations


00:18:20.320 --> 00:18:22.640
and spinners and things you can combine


00:18:22.640 --> 00:18:25.200
to make a more entertaining progress bar.


00:18:25.200 --> 00:18:26.040
So it's fun.


00:18:26.040 --> 00:18:27.540
- Yeah, these are really nice.


00:18:27.540 --> 00:18:28.880
And you know, these little touches,


00:18:28.880 --> 00:18:30.840
they probably don't seem like much,


00:18:30.840 --> 00:18:32.720
but they can definitely make your app feel


00:18:32.720 --> 00:18:34.440
more professional and more polished,


00:18:34.440 --> 00:18:36.240
rather than just, you know, the answer is seven


00:18:36.240 --> 00:18:37.640
or like whatever, we're done.


00:18:37.640 --> 00:18:39.600
- Yeah, some of the, like, what was it?


00:18:39.600 --> 00:18:41.520
Pipenv, I don't use it,


00:18:41.520 --> 00:18:44.120
but I appreciated some of the fun


00:18:44.120 --> 00:18:46.500
command line interface stuff that they've added to it.


00:18:46.500 --> 00:18:49.740
And I think adding some fun to a tool is nice.


00:18:49.740 --> 00:18:51.720
One of the things I wanted to comment on also


00:18:51.720 --> 00:18:55.080
was just about the repo itself.


00:18:55.080 --> 00:18:58.600
So the code is up on GitHub, and the readme


00:18:58.600 --> 00:19:01.080
has some nice thing features I wanted to call out.


00:19:01.080 --> 00:19:05.520
So the animated pictures of what it does is a nice touch.


00:19:05.520 --> 00:19:08.120
We've said this before, we love things like this.


00:19:08.120 --> 00:19:10.040
I liked that there was a to-do list,


00:19:10.040 --> 00:19:13.360
so it encourages having a short to-do list,


00:19:13.360 --> 00:19:14.920
encourages contributions.


00:19:14.920 --> 00:19:18.800
And I think even listing things that I've gotten done recently


00:19:18.800 --> 00:19:21.120
so that people that might not know about those features


00:19:21.120 --> 00:19:22.900
don't try to go work on them.


00:19:22.900 --> 00:19:25.740
And then just a short list of things you'd like to have done.


00:19:25.740 --> 00:19:28.100
And then it has an interesting facts section,


00:19:28.100 --> 00:19:29.420
which is kind of cool.


00:19:29.420 --> 00:19:31.140
The code is in a functional style.


00:19:31.140 --> 00:19:33.060
It uses closures and generators.


00:19:33.060 --> 00:19:37.140
So I mean, actually, a lot of times I'll look at code not--


00:19:37.140 --> 00:19:39.540
as an example of how to do something.


00:19:39.540 --> 00:19:42.100
So if somebody is proud of their use of generators,


00:19:42.100 --> 00:19:43.680
maybe it's worth code checking out


00:19:43.680 --> 00:19:45.460
if you're trying to learn generators.


00:19:45.460 --> 00:19:47.340
And then another feature that I'm definitely


00:19:47.340 --> 00:19:50.340
going to pick up for things that I work on


00:19:50.340 --> 00:19:52.260
is change log highlights.


00:19:52.260 --> 00:19:54.340
So not the entire change log in the readme,


00:19:54.340 --> 00:19:59.300
but just one or two lines of semicolon separated features


00:19:59.300 --> 00:20:01.300
per version of change.


00:20:01.300 --> 00:20:03.300
So this is kind of a nice thing to add.


00:20:03.300 --> 00:20:04.900
- Oh yeah, that is really nice.


00:20:04.900 --> 00:20:06.460
Cool, I think it's a great project.


00:20:06.460 --> 00:20:07.580
If I need a progress bar,


00:20:07.580 --> 00:20:09.980
I'm definitely gonna consider this one.


00:20:09.980 --> 00:20:11.460
But like I said, I do think they're neat


00:20:11.460 --> 00:20:12.460
and I do use them sometimes.


00:20:12.460 --> 00:20:14.820
So yeah, it's cool, very nice.


00:20:14.820 --> 00:20:16.500
All right, last one's a quick one.


00:20:16.500 --> 00:20:18.420
So we talked about HoloViz,


00:20:18.420 --> 00:20:20.320
talked about Streamlit and Panel


00:20:20.320 --> 00:20:22.640
and how those are kind of similar.


00:20:22.640 --> 00:20:26.340
So there's this other project called Awesome Panel,


00:20:26.340 --> 00:20:29.560
which is kind of like an awesome list for Panel,


00:20:29.560 --> 00:20:32.800
that way to build interactive data science,


00:20:32.800 --> 00:20:36.100
single page apps, or not even single page apps.


00:20:36.100 --> 00:20:40.040
This is run by Mark Skolv-Madsen.


00:20:40.040 --> 00:20:41.320
Like I got that close to right Mark.


00:20:41.320 --> 00:20:43.460
And yeah, it's a cool project to just show


00:20:43.460 --> 00:20:46.080
a bunch of examples and a curated list of these.


00:20:46.080 --> 00:20:47.900
So yeah, if you just open that up,


00:20:47.900 --> 00:20:50.980
You can go see there's an app that comes up.


00:20:50.980 --> 00:20:53.140
It takes just a second, come to life.


00:20:53.140 --> 00:20:54.740
And then on the left, there's like a gallery.


00:20:54.740 --> 00:20:56.080
There's all sorts of cool pictures.


00:20:56.080 --> 00:20:57.460
There's also a nice talk.


00:20:57.460 --> 00:20:59.260
I can't remember who gave the talk,


00:20:59.260 --> 00:21:02.340
but yeah, there's like a talk from one of the conferences.


00:21:02.340 --> 00:21:04.020
But if you go to the gallery,


00:21:04.020 --> 00:21:05.980
you'll see like as you navigate around,


00:21:05.980 --> 00:21:07.880
it's kind of like this single page app.


00:21:07.880 --> 00:21:08.900
So you click gallery,


00:21:08.900 --> 00:21:10.300
you'll see like the main part of the app


00:21:10.300 --> 00:21:11.980
sort of spin for a second and then come up.


00:21:11.980 --> 00:21:13.340
And then you can go and say,


00:21:13.340 --> 00:21:15.140
oh, there's like one of the things that's really cool


00:21:15.140 --> 00:21:16.180
that I'll point you guys at


00:21:16.180 --> 00:21:18.580
is this thing called the image classifier in there.


00:21:18.580 --> 00:21:22.200
So I went in there and it lets you,


00:21:22.200 --> 00:21:24.420
if you just scroll down, it says upload an image


00:21:24.420 --> 00:21:26.800
and you can grab some JPEG and upload it.


00:21:26.800 --> 00:21:29.260
I grabbed some like random microphone picture


00:21:29.260 --> 00:21:31.220
that I had laying around and threw it in there.


00:21:31.220 --> 00:21:33.740
And then it ran, you can pick different neural networks


00:21:33.740 --> 00:21:34.560
to run against it.


00:21:34.560 --> 00:21:37.380
Do you wanna run NAS net mobile, NAS net large,


00:21:37.380 --> 00:21:39.500
mobile net V2, like I don't know what these are,


00:21:39.500 --> 00:21:41.940
these classifiers, but you can pick from them.


00:21:41.940 --> 00:21:43.780
And then it'll tell you in a cool little graph


00:21:43.780 --> 00:21:46.080
at the bottom, like what it thinks that is.


00:21:46.080 --> 00:21:49.120
And it thought the microphone was most likely a microphone,


00:21:49.120 --> 00:21:50.280
but it could have been a shield,


00:21:50.280 --> 00:21:53.040
'cause it had like a big metal guard on the front of it.


00:21:53.040 --> 00:21:53.880
It's just really cool.


00:21:53.880 --> 00:21:56.840
And so this whole website is built,


00:21:56.840 --> 00:21:59.000
if I got it right, in panel,


00:21:59.000 --> 00:22:01.000
to show you how you can build a cool panel app.


00:22:01.000 --> 00:22:03.400
But then as you dive into the gallery,


00:22:03.400 --> 00:22:06.440
each one of these pieces is like an interactive sub panel


00:22:06.440 --> 00:22:07.280
or something like that.


00:22:07.280 --> 00:22:09.680
So it's kind of, it's a little bit meta in that regard,


00:22:09.680 --> 00:22:10.840
but it's pretty cool actually.


00:22:10.840 --> 00:22:13.080
- Yeah, it's really cool.


00:22:13.080 --> 00:22:15.880
- Yeah, and yeah, it's apparently super easy


00:22:15.880 --> 00:22:17.680
to work with, again, I haven't built anything with it,


00:22:17.680 --> 00:22:20.200
but it seems like a much simpler way


00:22:20.200 --> 00:22:24.080
to get your interactive data science stuff on the internet


00:22:24.080 --> 00:22:28.600
than learning Vue.js, JavaScript, Flask,


00:22:28.600 --> 00:22:30.360
SQLAlchemy, et cetera, et cetera.


00:22:30.360 --> 00:22:31.200
- Yeah.


00:22:31.200 --> 00:22:32.680
- Yeah, so anyway, pretty cool.


00:22:32.680 --> 00:22:34.820
I recommend if you want to check this out,


00:22:34.820 --> 00:22:35.800
just go browse the gallery.


00:22:35.800 --> 00:22:37.920
That's the best way to see what this thing can do.


00:22:37.920 --> 00:22:39.400
- I love pretty pictures.


00:22:39.400 --> 00:22:43.140
- I know, yeah, this one definitely passes our test


00:22:43.140 --> 00:22:45.080
for you must have pretty pictures.


00:22:45.080 --> 00:22:46.280
(laughing)


00:22:46.280 --> 00:22:49.440
in order to talk about graphical stuff.


00:22:49.440 --> 00:22:51.680
Yeah, so Brian, really quick, on this next one,


00:22:51.680 --> 00:22:53.600
click on the app for it,


00:22:53.600 --> 00:22:54.980
'cause it's take just a second to load up.


00:22:54.980 --> 00:22:57.120
So that's it for our main items.


00:22:57.120 --> 00:22:59.560
I wanna tell you about a couple of things,


00:22:59.560 --> 00:23:00.940
then we'll get to yours as well.


00:23:00.940 --> 00:23:03.840
First, one of the features that I really like


00:23:03.840 --> 00:23:06.640
about Visual Studio Code, I haven't really used,


00:23:06.640 --> 00:23:08.080
'cause I don't use Visual Studio Code


00:23:08.080 --> 00:23:10.120
in like a meaningful way.


00:23:10.120 --> 00:23:12.200
I use it all the time for like little bits of editing,


00:23:12.200 --> 00:23:14.440
but not, if I'm like doing real projects,


00:23:14.440 --> 00:23:16.160
I'd probably use PyCharm.


00:23:16.160 --> 00:23:20.100
But it has Live Share, which is a pretty killer feature.


00:23:20.100 --> 00:23:24.600
So you can say, I would like to share my coding environment


00:23:24.600 --> 00:23:26.720
with someone else who's going to look over my shoulder,


00:23:26.720 --> 00:23:29.080
do paired programming, just code review, whatever,


00:23:29.080 --> 00:23:31.060
and they can actually debug and step through


00:23:31.060 --> 00:23:34.640
and see your code in their editor.


00:23:34.640 --> 00:23:36.200
And it could even be a different editor.


00:23:36.200 --> 00:23:37.380
I think there's other stuff supported,


00:23:37.380 --> 00:23:41.360
like proper Visual Studio versus VS Code and whatnot.


00:23:41.360 --> 00:23:42.320
So that's really cool.


00:23:42.320 --> 00:23:43.960
And I've always thought, well, that would be awesome


00:23:43.960 --> 00:23:47.480
for PyCharm, but no.


00:23:47.480 --> 00:23:49.080
So someone on Twitter,


00:23:49.080 --> 00:23:50.720
sorry, I don't remember who sent this to me,


00:23:50.720 --> 00:23:51.800
but thank you,


00:23:51.800 --> 00:23:55.880
sent up this link to this project called CodeTogether.


00:23:55.880 --> 00:23:59.880
So CodeTogether is a freemium product.


00:23:59.880 --> 00:24:01.440
So this is not an open source thing.


00:24:01.440 --> 00:24:03.000
It's like a paid project.


00:24:03.000 --> 00:24:06.480
You can go sign up, pay dollars a month for certain features


00:24:06.480 --> 00:24:08.920
or you can just use the free version.


00:24:08.920 --> 00:24:11.360
But it has that type of experience


00:24:11.360 --> 00:24:12.280
that I just talked about,


00:24:12.280 --> 00:24:13.840
but for many different editors, right?


00:24:13.840 --> 00:24:15.640
So it comes for all the IntelliJ stuff.


00:24:15.640 --> 00:24:18.040
So like WebStorm, PyCharm, and so on.


00:24:18.040 --> 00:24:19.680
Also works with VS Code.


00:24:19.680 --> 00:24:21.120
It works with other things.


00:24:21.120 --> 00:24:24.080
I don't know exactly all the things that it covers,


00:24:24.080 --> 00:24:27.040
but certainly Eclipse, IntelliJ, and VS Code,


00:24:27.040 --> 00:24:28.740
which covers quite a bit.


00:24:28.740 --> 00:24:29.660
So if you're looking for that


00:24:29.660 --> 00:24:31.620
and you weren't using Live Share,


00:24:31.620 --> 00:24:33.600
'cause it didn't exist for what you were doing,


00:24:33.600 --> 00:24:34.540
you could check this out.


00:24:34.540 --> 00:24:36.240
I have not used it, I'm not endorsing it.


00:24:36.240 --> 00:24:37.400
I'm just saying it looks interesting


00:24:37.400 --> 00:24:38.720
and it might help people.


00:24:38.720 --> 00:24:40.720
- Cool. - Yeah, yeah.


00:24:40.720 --> 00:24:41.840
Cool, and then the other one


00:24:41.840 --> 00:24:43.720
that I wanna just quickly mention


00:24:43.720 --> 00:24:46.500
is related to the first thing.


00:24:46.500 --> 00:24:48.380
These are totally different things.


00:24:48.380 --> 00:24:52.020
But Kevin Van Der Veen sent over a message a week ago


00:24:52.020 --> 00:24:54.300
and said, "Hey, I built a cool data explorer


00:24:54.300 --> 00:24:59.300
"to help you understand the whole COVID pandemic stuff


00:24:59.300 --> 00:25:01.400
"in a local way."


00:25:01.400 --> 00:25:03.160
And he built it using Streamlet.


00:25:03.160 --> 00:25:04.640
So I thought, "Hey, here's an app


00:25:04.640 --> 00:25:05.680
"that someone just sent over


00:25:05.680 --> 00:25:09.800
"that's like a cool running on Heroku Streamlet app."


00:25:09.800 --> 00:25:10.880
That would be a nice example


00:25:10.880 --> 00:25:12.080
of what I talked about at the beginning.


00:25:12.080 --> 00:25:15.040
And it also has the GitHub repo there as well.


00:25:15.040 --> 00:25:16.520
So if you go and check out that app,


00:25:16.520 --> 00:25:17.440
like for example, Brian,


00:25:17.440 --> 00:25:20.240
you scroll down to the second, to the third graph,


00:25:20.240 --> 00:25:21.080
below the third graph,


00:25:21.080 --> 00:25:23.300
there's like a dropdown that lets you pick Oregon,


00:25:23.300 --> 00:25:24.280
and you can go pick that.


00:25:24.280 --> 00:25:25.440
And wow, it looks like we're flattening


00:25:25.440 --> 00:25:26.600
the curve really well.


00:25:26.600 --> 00:25:27.680
That's pretty awesome.


00:25:27.680 --> 00:25:30.160
Although the last two days have been rough, I guess.


00:25:30.160 --> 00:25:31.280
Or you can go down a little farther


00:25:31.280 --> 00:25:32.800
and compare it against different states.


00:25:32.800 --> 00:25:34.920
You could go in there and type like, it's Colorado.


00:25:34.920 --> 00:25:38.080
You could type Oregon or New York or whatever you want.


00:25:38.080 --> 00:25:40.200
And then it'll like auto-complete that out of the list


00:25:40.200 --> 00:25:41.480
and then regenerate.


00:25:41.480 --> 00:25:43.360
And this is exactly like what I was saying.


00:25:43.360 --> 00:25:45.200
There's some line in the Streamlet code


00:25:45.200 --> 00:25:50.040
that's just saying, get the tags from the tag selector.


00:25:50.040 --> 00:25:52.960
And then if you type in there, it just reruns the whole thing,


00:25:52.960 --> 00:25:55.920
but most of the stuff's cached, and then it'll redraw the graph.


00:25:55.920 --> 00:25:56.960
It's super cool.


00:25:56.960 --> 00:25:59.740
So this is both useful, I think, for if you


00:25:59.740 --> 00:26:01.200
want to try to understand that.


00:26:01.200 --> 00:26:02.580
It's a cool data science project.


00:26:02.580 --> 00:26:04.480
The source is on GitHub.


00:26:04.480 --> 00:26:06.440
But also, it's just a cool example of Streamlet


00:26:06.440 --> 00:26:07.560
if people want to see that going.


00:26:07.560 --> 00:26:09.260
-And the graphs are fun, too, because you


00:26:09.260 --> 00:26:12.300
box select and zooming and stuff like that.


00:26:12.300 --> 00:26:13.620
Yeah, these are just plotly.


00:26:13.620 --> 00:26:16.700
So they do all the standard plotly stuff, which is pretty cool.


00:26:16.700 --> 00:26:20.660
That's kind of what I like about the Streamlet thing, not forcing you to use their random


00:26:20.660 --> 00:26:23.820
graphing thing, but just other graphs that you might like.


00:26:23.820 --> 00:26:24.820
Yeah.


00:26:24.820 --> 00:26:25.820
Yeah.


00:26:25.820 --> 00:26:26.820
All right, well, that's it for my extras.


00:26:26.820 --> 00:26:27.820
What else do you got?


00:26:27.820 --> 00:26:31.900
Well, I wanted to remind people that PyCon 2020 online is available and new content is


00:26:31.900 --> 00:26:34.940
still being posted through the first few weeks of May.


00:26:34.940 --> 00:26:37.380
I think that's when they're wrapping things up.


00:26:37.380 --> 00:26:38.380
Yeah, that's cool.


00:26:38.380 --> 00:26:42.940
videos go up there yeah? Yeah one of the new videos that just came up was my talk


00:26:42.940 --> 00:26:48.160
so multiply your testing effectiveness with parameterized testing. Oh yeah there


00:26:48.160 --> 00:26:51.700
it is right at the bottom with a couple of new tags on it. Yeah so I'm excited to


00:26:51.700 --> 00:26:55.340
have people get feedback from people to see what they thought. So it looks good I


00:26:55.340 --> 00:26:59.340
like it yeah well done. While I was there I was looking around there's tons of


00:26:59.340 --> 00:27:04.020
great talks there's a bunch of tutorials there there's Charla's is that new this


00:27:04.020 --> 00:27:08.260
year? They did it last year maybe okay the last two years but it's the Spanish


00:27:08.260 --> 00:27:12.820
language track. Yeah it's neat I'm glad they're doing it. Sponsor workshops


00:27:12.820 --> 00:27:16.960
that's kind of nice to have and then even an online poster hall so that's


00:27:16.960 --> 00:27:21.460
there so it's cool. The other thing I wanted to bring up a quick extra if


00:27:21.460 --> 00:27:27.460
anybody's following the drama in pytest the drama is over and I'm happy with the


00:27:27.460 --> 00:27:32.380
resolution so hopefully there will be peace in the family. I hope so. A link to


00:27:32.380 --> 00:27:36.620
the Twitter announcement from pytest. Yeah they got the whole public statement


00:27:36.620 --> 00:27:41.720
there. So the folks who had dropped out, are they dropping back in or what's or


00:27:41.720 --> 00:27:45.860
is there just permanent fallout from that? I don't know that any more details.


00:27:45.860 --> 00:27:51.440
I know at least one person is back in but all the people I was worried about


00:27:51.440 --> 00:27:56.360
are signers of this message so yeah so probably kind of seems like maybe they're


00:27:56.360 --> 00:27:59.060
back in. Yeah all right well that's awesome I'm really glad to hear that


00:27:59.060 --> 00:28:03.500
got solved and it sounds like exactly the outcome that I would have voted for


00:28:03.500 --> 00:28:09.740
for as well. Okay, so you ready for some jokes? I don't know, are these jokes? How about you?


00:28:09.740 --> 00:28:10.740
Are you ready for humor?


00:28:10.740 --> 00:28:12.620
Yes, humor is good.


00:28:12.620 --> 00:28:19.620
Humor is definitely good. So I found a couple of funny pictures and I'm going to put the


00:28:19.620 --> 00:28:23.160
pictures in the show notes. I don't know if they'll come up in your podcast players. Some


00:28:23.160 --> 00:28:27.740
of them do, some of them don't. Some of you guys say allow pictures in this podcast feed


00:28:27.740 --> 00:28:31.420
just like in the player as you're looking at the show notes. But certainly on the website


00:28:31.420 --> 00:28:37.660
they'll be there. And these are O'Reilly book covers. I love these. They're like


00:28:37.660 --> 00:28:43.180
O'Reilly and just if you've forgotten the O'Reilly books always have the title


00:28:43.180 --> 00:28:47.900
and then they have an animal that goes with it right so if you wrote a book for


00:28:47.900 --> 00:28:52.620
O'Reilly the thing is like what's your animal on your book and whatnot. Yeah. So


00:28:52.620 --> 00:28:57.780
these are like take those ideas put an animal on it but make it silly.


00:28:57.780 --> 00:29:02.100
There's also usually like some sort of saying at the top of the book.


00:29:02.100 --> 00:29:04.660
So for these you definitely have to read the top also.


00:29:04.660 --> 00:29:05.660
Yeah, that's right.


00:29:05.660 --> 00:29:06.660
Like sort of the subtitle.


00:29:06.660 --> 00:29:08.700
Okay, so how about this?


00:29:08.700 --> 00:29:11.300
I'll read the first one, you do the second one and so on.


00:29:11.300 --> 00:29:15.580
So this one has like a badger or something on it, on the front of it and it's kind of


00:29:15.580 --> 00:29:21.300
like sneaky head down and the title is Pointless Meetings, the Survival Guide.


00:29:21.300 --> 00:29:23.420
How to survive all pointless meetings.


00:29:23.420 --> 00:29:30.920
I feel like many, many things that used to be meetings these days are now in email.


00:29:30.920 --> 00:29:33.260
And people are like, "Oh my gosh, they really can just be emails.


00:29:33.260 --> 00:29:34.780
Why have we been going to all these meetings?"


00:29:34.780 --> 00:29:35.780
Right?


00:29:35.780 --> 00:29:36.780
Yeah.


00:29:36.780 --> 00:29:37.780
All right.


00:29:37.780 --> 00:29:38.780
You want to get the next one?


00:29:38.780 --> 00:29:40.660
Next one is overriding your teammates code.


00:29:40.660 --> 00:29:42.900
My code is better than yours anyway.


00:29:42.900 --> 00:29:46.580
It's got a horse on the front.


00:29:46.580 --> 00:29:47.580
I don't know what the horse is.


00:29:47.580 --> 00:29:48.580
I don't know either.


00:29:48.580 --> 00:29:50.340
I really love this one.


00:29:50.340 --> 00:29:53.540
This one is the essential semicolon, parenthesis,


00:29:53.540 --> 00:29:56.460
sorry, quote, semicolon, parenthesis,


00:29:56.460 --> 00:29:59.780
drop table animals, semicolon, dash dash,


00:29:59.780 --> 00:30:02.340
and there's no animal, because, well,


00:30:02.340 --> 00:30:04.620
this is a SQL injection that has deleted it,


00:30:04.620 --> 00:30:07.780
and it says, now with user-generated content.


00:30:07.780 --> 00:30:09.740
(laughing)


00:30:09.740 --> 00:30:11.100
That one's, that may be the best.


00:30:11.100 --> 00:30:13.060
- Yes, now with a security hole.


00:30:13.060 --> 00:30:14.340
- Exactly.


00:30:14.340 --> 00:30:15.340
Related, what's next?


00:30:15.340 --> 00:30:17.780
- Okay, this one has a fish on the cover.


00:30:17.780 --> 00:30:20.180
Expert hoping nobody hacks you.


00:30:20.180 --> 00:30:23.180
security by optimism and prayer.


00:30:23.180 --> 00:30:24.540
- I don't know what the fish has to do with it.


00:30:24.540 --> 00:30:25.380
I must be missing it.


00:30:25.380 --> 00:30:27.740
- But, no, but that's good.


00:30:27.740 --> 00:30:30.780
That's most people's security solution, right?


00:30:30.780 --> 00:30:31.700
- That's true.


00:30:31.700 --> 00:30:34.540
So, the next one is an octopus.


00:30:34.540 --> 00:30:37.660
Obviously, many legs that can type many things.


00:30:37.660 --> 00:30:39.980
And the title of the entire book


00:30:39.980 --> 00:30:42.740
is Exiting Vim, Eventually.


00:30:42.740 --> 00:30:45.960
Just memorize the 14 contextual dependent instructions.


00:30:45.960 --> 00:30:48.300
(laughing)


00:30:48.300 --> 00:30:49.820
- Exiting Vim, Eventually.


00:30:49.820 --> 00:30:51.220
- Oh, I love it, I love it.


00:30:51.220 --> 00:30:53.220
Yeah, so you'll have to visit the website


00:30:53.220 --> 00:30:56.140
and check out these because they're pretty sweet.


00:30:56.140 --> 00:30:57.260
Awesome, speaking of sweet,


00:30:57.260 --> 00:30:59.580
it's been great to be here with you, Brian, thanks.


00:30:59.580 --> 00:31:00.740
- It's been great, thanks.


00:31:00.740 --> 00:31:02.180
- Yep, bye. - Bye.

