00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 423, recorded March 10, 2025.

00:00:09 And I am Brian Okken.

00:00:11 And I'm Michael Kennedy.

00:00:12 And thanks everybody again for supporting us through training courses at pythontest.com and at talkpython.fm.

00:00:23 So lots of great courses there.

00:00:25 And our Patreon supporters, of course.

00:00:28 Thank you.

00:00:28 And for people that'd like to get a hold of us, we'd love to get here.

00:00:31 If you've got a suggestion for the show or have a question about it or correction, you can reach the show at pythontest.fm.

00:00:40 And there's also in the show notes, there's links to our Blue Sky and Mastodon links.

00:00:48 And you can also sign up at pythontest.fm.

00:00:51 You can go to live to see when the next live show is going to go on.

00:00:56 Or you can sign up for the newsletter and get everything we talked about sent directly to your inbox, which is cool.

00:01:03 Yeah.

00:01:04 And they can crush that bell on YouTube, too.

00:01:06 Oh, yeah.

00:01:07 Subscribing on YouTube.

00:01:08 That would be great.

00:01:09 Yeah.

00:01:09 Yeah.

00:01:11 So speaking of subscribing or scribing, what are we talking about first?

00:01:16 Well, how's your SQL game, Brian?

00:01:20 A little weak, actually.

00:01:22 Yeah.

00:01:22 Mine's a little weak as well.

00:01:23 It's atrophied a bit.

00:01:24 You know, I've got its table and I got another table and I want to do a join on that table.

00:01:29 And then maybe I want to use an aggregation function.

00:01:31 How do I do that again?

00:01:32 Well, there's a lot of cool tools and libraries around there to solve that.

00:01:37 For example, you can use SQLAlchemy or SQL Model and then you just talk in Python terms and classes and stuff.

00:01:44 And then somehow magically deep down when it docs the database, it'll do that kind of stuff for you.

00:01:49 You still kind of got to know the queries.

00:01:51 So it's not perfect, but it doesn't perfectly solve it for you.

00:01:55 But I want to introduce everyone to a new tool called PySQL Scribe.

00:02:00 And the idea here is similar to that, except for you use it for real SQL.

00:02:04 So, for example, if you want to know how to do one of these joins or you want to get some support doing that and you're not already using SQLAlchemy, it's not reasonable to say, well, let me re-implement everything I'm doing in SQLAlchemy.

00:02:17 So I can ask it a question to get a simple SQL statement that I just want to use outside of SQLAlchemy.

00:02:23 Right.

00:02:23 Okay.

00:02:24 So that's kind of what this is.

00:02:24 So you can take this thing and you teach it about different things, which database you're using.

00:02:30 Because even though SQL is a general query language, it does not generally work against any database.

00:02:37 Right.

00:02:37 Each database has its own dialect.

00:02:41 Right.

00:02:41 So the way you say, for example, specify parameters for MySQL is different than the way you do for Microsoft SQL Server.

00:02:47 And while they are similar, they're not the same.

00:02:50 So what you do is with this is you say, I'm working with this particular database.

00:02:53 And then you say, you give it information about your tables.

00:02:57 Right.

00:02:57 So here's a table name.

00:02:59 Here it's columns and so on.

00:03:01 And then you can just say, create a little builder and say, builder.select this column, that column from this table build.

00:03:08 And what it builds is it outputs a select or a SQL statement of some sort.

00:03:13 So in this case, select the various columns from the table.

00:03:16 Cool, right?

00:03:17 Yeah.

00:03:18 Yeah.

00:03:18 But you can do more than that.

00:03:21 You can, let's see, you can create your own class by creating a class that is decorated.

00:03:28 And then it will know that, you know, basically you can create either your own queries or you can create your own dialect.

00:03:35 So for example, here's a MySQL table.

00:03:38 So you don't have to specify the dialect because it's a MySQL table.

00:03:41 It knows the dialect.

00:03:42 And if you go further down here, you can see it understands more complicated things like join.

00:03:49 Like first I want to select this thing.

00:03:50 Then I want to join on that table on this thing and then build and it'll write the join statement for you.

00:03:56 Just pretty neat.

00:03:58 You can also do, like I said, functions.

00:04:00 Let me scroll down a tad to that.

00:04:02 So for example, if you wanted to write something that did, you know, uppercase in the select statement or max of some value out of there, right?

00:04:11 And a group by type of thing.

00:04:13 So you could just go and write that in terms of the SQL scribe, the PySQL scribe, and then it will actually generate all that for you.

00:04:22 So that's pretty neat.

00:04:23 And finally, you can combine them if you have one builder inside of another builder type of thing.

00:04:29 And it'll join.

00:04:30 It's a more complicated thing.

00:04:32 So the more you do with the SQL, you know, probably the more helpful this is.

00:04:36 If you're just doing real simple select and where statements, maybe not that helpful.

00:04:40 But that is my first item.

00:04:42 I think it might help some folks.

00:04:43 Yeah.

00:04:43 Yeah.

00:04:44 I guess you're probably the wrong person to ask, but I was just curious about the use case.

00:04:49 So like, for instance, I guess if you had an application that the user could select which database they're connecting to, and then you could create the different features based on that and just, I guess.

00:05:03 Yeah.

00:05:03 I don't think it's operational in a sense.

00:05:06 I think it's more, because if you're doing it operationally, just use an ORM.

00:05:09 Okay.

00:05:09 Because it does that, right?

00:05:11 I think it's, I would like this thing to help me write the queries because I'm, sometimes I forget.

00:05:18 Like if you're doing data science, you might be connecting to different data sources.

00:05:21 You might be going, oh, I want to ask this question, but oh, that's probably a join.

00:05:25 How do I do that again?

00:05:26 And so on.

00:05:27 Okay.

00:05:27 Yeah.

00:05:28 I was actually, because I was just thinking about putting an application together and I was like, it's pretty lightweight.

00:05:33 I don't really want an ORM.

00:05:34 So I was going to do raw SQL, but then I.

00:05:38 Yeah.

00:05:38 So what you might do is you might run this one, you might give it your specification, run it one time, and then hard code the responses as parameterized queries in your Python code.

00:05:49 And don't revisit it again until you might need to change the query in a sufficiently complicated way that you can't just like type another column or something.

00:05:56 You know what I mean?

00:05:57 Yeah.

00:05:57 Okay.

00:05:57 Yeah.

00:05:58 Interesting.

00:05:58 Cool.

00:05:59 One addition that I added here, added sort of an idea I added, I guess, is I, I just, as getting ready for this, I'd thought, you know what?

00:06:08 This is like typing in the names of the columns and the available tables seems like that should be automated.

00:06:16 So I don't know if Daniel, the guy who created it, is any, has any interest in this, but I said, Hey, wouldn't it be cool if you could give it a create script?

00:06:23 You know, you can go to your database and say, create an entire create script for the entire database with all the columns and the relationships and indexes and all that kind of stuff.

00:06:32 If you could just point it at that, and then it could generate all the tables as an thing you pull in by table name.

00:06:40 And then it just automatically knows the structure of everything of all your tables.

00:06:45 Right. So I said, Hey, maybe you can make it pars a SQL data, create a data definition language, create script sort of thing.

00:06:51 So I gave a little example of something that you might be able to do there.

00:06:54 So who knows if that comes around, if he likes the idea or not, but I think there's some cool ways to expand this.

00:07:00 Cool. Nice.

00:07:01 Yeah. All right.

00:07:01 Over to you.

00:07:03 Well, I'm going to add, I'm going to look at a map of Python.

00:07:08 So I ran across this article.

00:07:12 It's kind of cool.

00:07:14 So the idea is around looking at PyPI has got tons of packages there, but there's a lot of dependencies between them.

00:07:24 And visualizing kind of how, what would it look like if we visualize all of this?

00:07:30 So there's a couple of visualizations here.

00:07:33 And I actually got a little lost in trying to interpret this, but it's pretty dots.

00:07:40 But you can, you know, you can zoom in a little bit on, on some of these, the scroll wheel works on this to zoom in.

00:07:47 And I'm not, I couldn't figure out what the spacing meant, but anyway, I, the, why I'm okay.

00:07:53 So since I don't really know what this is doing, why am I covering it?

00:07:56 One of the things I thought was great was it was just sort of a discussion around dealing with large data.

00:08:02 And, you know, the, the big, the data set of PyPI is a pretty big data set.

00:08:08 There is big, there's copies in BigQuery so that you can query that instead of, instead of querying PyPI all the time, which is something that I've done with the Python or pytest plugin list as well.

00:08:22 But the, it's, but then there's some discussions.

00:08:27 Well, there's, there's some junk in there.

00:08:28 There's, there's, there's packages that don't have like source code listed or there's, you know, other things that make them really not,

00:08:38 they're not really open source.

00:08:39 They're just utilizing PyPI or something.

00:08:41 Sometimes companies do that.

00:08:43 Anyway, so there's some discussion around filtering that, which is an interesting discussion.

00:08:48 And then a little bit of discussion about deciding what graphing mechanism to use and, and how to visualize it.

00:08:55 So I, I just really appreciated the discussion.

00:08:57 So if you're into visualizing data, I think this might be an interesting thing.

00:09:02 Plus it's just a really fun visualization.

00:09:04 And then at the end, there's a link that said, oh yeah, by the way, there's a better UI for this.

00:09:09 I'm like, oh, okay.

00:09:10 Let's take a look at that.

00:09:11 And this is just cool.

00:09:12 It's the spaceship, I don't know, spaceship operating manual.

00:09:16 Wow.

00:09:18 So this is like the galaxy of Python.

00:09:20 And let's see if we have W and S for forward and back.

00:09:23 Yeah.

00:09:23 The first one was kind of like, I don't know, old school maps.

00:09:26 It was really cool.

00:09:27 But old school maps and like, you know, the days of like sailing and exploring.

00:09:31 And this is like Hubble.

00:09:33 Yeah.

00:09:33 So look, look at this.

00:09:35 We move forward and back.

00:09:36 Oops.

00:09:36 Let's see.

00:09:38 W.

00:09:38 See if we can get this to go.

00:09:40 This is great.

00:09:41 So for people listening, I'm zooming in and it's like you're going through a star field.

00:09:45 And these are, these are Python dependencies that we're going around in.

00:09:49 It's just, it's, it's a fun, I don't know, video game, video visualization thing.

00:09:54 So.

00:09:54 I'm going to play with, I haven't seen this before.

00:09:56 I'm going to play this later.

00:09:57 Thanks.

00:09:57 You're just wasting like a half an hour of my day.

00:09:59 You're welcome.

00:10:00 Yeah.

00:10:01 And so this, this is, this is all on, on GitHub also.

00:10:07 So if you want to take a look at how he did the filtering and I'm, I'm linked to this because

00:10:12 I'm going to take a look at how he's doing.

00:10:13 So even a reproduction guide said there's the SQL query.

00:10:18 So if you, if you'd like to do some big query stuff for around PyPI, there's an example.

00:10:23 There's a process Jason.

00:10:25 So how he's using the filters and stuff and then converting it to a graph.

00:10:29 So some great, nice open source or nice examples of how to do data and visualization and stuff.

00:10:37 So.

00:10:37 Yeah.

00:10:38 I love it.

00:10:39 It's beautiful.

00:10:39 Very, very cool.

00:10:40 Yeah.

00:10:40 You all have to follow the links to explore it.

00:10:43 Yeah.

00:10:44 And play with, play with the, the space one.

00:10:47 That's fun.

00:10:48 So.

00:10:48 Yeah.

00:10:48 The space one is the one I was thinking of.

00:10:50 Awesome.

00:10:51 I want to talk Rust, C++ and Python.

00:10:53 I heard Bjorn was saying that C++ is under attack, Brian.

00:10:57 How do you feel about that?

00:10:58 It's under attack.

00:10:59 I think so.

00:11:00 I heard people say that I've heard a lot of, we really, you know, new software should be

00:11:06 written in a memory safe language.

00:11:07 And that's, you know, that doesn't work with C++.

00:11:10 Anyway, that's not the point of this.

00:11:12 Yeah.

00:11:12 The point is.

00:11:13 I'll have a comment later that we'll have to add.

00:11:15 So.

00:11:15 Yeah.

00:11:15 Okay.

00:11:16 I'm here for it.

00:11:17 I'm here for it.

00:11:18 But that's not what it's about.

00:11:19 This is by Martin Otsiak.

00:11:21 And it is Rust, C++ and Python trends in jobs on Hacker News.

00:11:27 Interesting.

00:11:28 Yeah.

00:11:29 So there's, I don't know how he found this data, but somehow, hey, look, maybe just conversations

00:11:34 on Hacker News might serve as a proxy for programming language job demand.

00:11:40 So there's two questions, you know, ask Hacker News who is hiring and ask Hacker News who

00:11:46 wants to be hired for February, 2025.

00:11:49 And then there's graphs of how many times those appear for Python, Rust and C++.

00:11:55 So if you look at it and this data actually goes back, I don't know what, I guess it's

00:12:00 as of February, but this goes all the way back to 2021.

00:12:03 So this is pretty long-term data, five years, four years.

00:12:08 And so if you look at Python, it's trending downward pretty sharply.

00:12:12 So are C++ and Rust, although they're starting to take up, I guess they're all a little bit

00:12:18 starting to take up here at the very end.

00:12:19 But the Python one is trending downward faster than the other two.

00:12:24 So what does that mean?

00:12:25 Like that people more and more at a higher rate of speed, people are not asking who is

00:12:31 hiring in a particular language, right?

00:12:33 Now, if you look at the other one, the inverse, who wants to be hired?

00:12:37 Hey, we need people.

00:12:38 We need people in this.

00:12:39 They're all going up a little bit generally, but Python is going up way faster.

00:12:44 So fewer people asking to be hired.

00:12:45 More and more people are going, where do I find Python people?

00:12:48 It looks like there's more demand for Python people over time.

00:12:54 There's still more demand for C++ and more demand for Rust people, but at a slower rate

00:12:58 of speed.

00:12:59 Interesting, huh?

00:13:00 Yeah.

00:13:00 Yeah.

00:13:00 And I was totally depressed for a while looking at this graph because of the sharp downward

00:13:08 trend of all programmers, at least for C++, Rust and Python.

00:13:11 I'm like, oh no.

00:13:12 But it looks like if you just look at it from 2021 to now, it's a downward slope.

00:13:20 But if it's kind of...

00:13:22 Which one though?

00:13:23 Who's hiring or who wants to be hired?

00:13:25 Well, I guess I don't get it.

00:13:27 Like the who's hiring.

00:13:28 If that's individuals trying to find a job or don't have a job, they either have or want.

00:13:34 Okay.

00:13:34 Right.

00:13:35 They don't have a job at all, or they have a job that they don't want.

00:13:37 They want one in that technology.

00:13:40 Okay.

00:13:40 Who's trying to hire Python?

00:13:42 Oh, right.

00:13:42 Okay.

00:13:43 So the fact that that's going down means fewer people are not in a job that they want, right?

00:13:48 They're like, they're employed.

00:13:49 That's a good thing.

00:13:50 And they're employed kind of happily.

00:13:51 So the fact that that goes down is good.

00:13:52 And then you look at the next one.

00:13:53 I don't know if this is good or bad, but there's fewer people per...

00:13:57 They're not easily filling the jobs.

00:13:58 It's getting harder and harder to fill the Python jobs at a faster rate than it is for the others.

00:14:03 That means basically there's more employer demand, I'm pretty sure.

00:14:06 That makes sense.

00:14:07 Per candidate, I guess, if you can somehow...

00:14:10 That's more optimistic then.

00:14:11 Yeah, I think it's optimistic on both graphs.

00:14:13 It just depends how you read it.

00:14:14 Yeah.

00:14:15 Yeah.

00:14:15 I mean, it's hacker news, right?

00:14:17 But it's still an interesting angle, you know?

00:14:19 Yeah.

00:14:20 I guess my take on the C++ versus other things or the demise of C++ or whatever, I don't think

00:14:29 we're going to see a demise of C++.

00:14:30 But there's a lot of stuff.

00:14:33 It is difficult to learn.

00:14:35 No doubt about it.

00:14:38 Rust, I think, is difficult to learn too.

00:14:40 But it's, I think, more manageable for people to come up to speed on a small project with

00:14:46 Rust than Python.

00:14:47 But maybe I'm wrong about that.

00:14:49 But I think one of the gains of Rust is we need a way...

00:14:57 It's around Python.

00:14:58 We have this great Python project, but there's a little bit of it here that needs to be sped

00:15:03 up.

00:15:03 What do we do?

00:15:04 Do we jump into C++ that we don't know about or Rust that we don't know about?

00:15:07 And I think people are choosing Rust.

00:15:09 So anyway, that's my take on that.

00:15:12 Yeah, I listen to a couple of cybersecurity, computer security podcasts.

00:15:16 And there's some really interesting conversations about like, if you're going to, you know, they

00:15:21 just did one of them just did an analysis and said, I think 70% of all, 70 or 80% of all security problems with

00:15:30 iOS were memory corruption, memory failure issues, right?

00:15:36 Off by one on an array, use after free, right?

00:15:40 Like the whole category of like things that happen because you're in a memory unsafe language.

00:15:44 Microsoft was something like in the 60 to 70% of all security problems with the software

00:15:49 has to do with memory issues.

00:15:51 Oh, yeah.

00:15:52 And he goes, you can just go through them like one after another.

00:15:54 And they're all, they've all got that flavor, if not the exact same numbers.

00:15:58 You know what I mean?

00:15:58 Yeah.

00:15:59 And so if you're choosing new, you're choosing new projects to start from scratch and you're

00:16:05 picking some systems level language like C, C++, Rust, whatever, and you don't choose

00:16:11 a memory safe language, you're basically choosing to have, you know, two and a half times as

00:16:16 many vulnerabilities in your software.

00:16:19 And that, I think that's what the, my language is under attack feel is.

00:16:25 It's like, yeah, but that fact is still a fact that I'm sorry, but it is, you know?

00:16:29 Yeah.

00:16:30 And you can do stuff, you can do stuff in say C++, right?

00:16:33 Right.

00:16:33 And you need like smart pointers and things that will automatically free them and so on, but

00:16:37 probably not for C, but it's still present, you know?

00:16:40 There's still S print F that was, you know, print F that was wrong or whatever.

00:16:43 Yeah.

00:16:44 And I guess I've spent so much of my life in the low level world of like device drivers

00:16:49 and stuff that that's one of the beautiful things about C++ is a memory mapped hardware

00:16:55 access system is really easy to put together in C++ and I don't know how to do it somewhere

00:17:00 else.

00:17:00 I mean, I'm sure there's ways, but so, and we're always going to have software talk to

00:17:05 hardware.

00:17:06 So unless it gets really easy to do that in another language, we'll have C++.

00:17:11 Yeah.

00:17:12 Or someone builds a little layer.

00:17:14 Well, it probably already is.

00:17:16 We just don't know.

00:17:17 I don't know Matt.

00:17:17 Yeah.

00:17:18 Yeah.

00:17:18 Yeah.

00:17:18 I don't either.

00:17:19 I don't live, I don't live in that world these days.

00:17:21 Anyway, that's pretty interesting stuff.

00:17:23 Yeah.

00:17:23 Yeah.

00:17:23 All right.

00:17:24 Over to you for your final thing.

00:17:26 Well, so there is help and it is only a keyword away.

00:17:30 So I, you know, occasionally I forget about this.

00:17:35 So it's so tempting if you have a question about the world of Python or anything is to just

00:17:40 Google something more.

00:17:41 I mean, what am I using now?

00:17:43 Not Google, something else, some Google alternative.

00:17:47 And, but there's help there and it's pretty good.

00:17:50 So linking to Trey Hunter's article, features of Python's help function.

00:17:55 And help is, is really pretty good with Python.

00:17:59 And it's part of built in.

00:18:00 I don't know if it was built in from the language at the beginning, but it's been there for as

00:18:03 long as I've been using it.

00:18:04 But if you say help, you can give it a string and you can give it a, you can say help on

00:18:09 a function.

00:18:09 You can say help on a module, symbols, keywords, topics, objects, and there's useful stuff that

00:18:16 often comes out.

00:18:16 So this article is talking through some of the things you can do.

00:18:20 One of the things that I like is looking at meta help.

00:18:23 The meta help is pretty interesting.

00:18:24 You can have basically there's a, if you say help and give it the quote topics, you get a

00:18:31 list of available topics and you've got stuff like strings.

00:18:35 I looked up strings.

00:18:36 I'm like, well, I don't use strings, but I looked it up.

00:18:38 And one of the things that strings has is all these scapegoats.

00:18:41 So like, what is a, what does the line feed code look like?

00:18:45 And what's a, you know, all of those, those are in the.

00:18:49 Like the backslash T, the backslash N, but there's got to be some that I don't know.

00:18:52 Yeah.

00:18:53 There's a bunch of others.

00:18:54 And so there's, there's a lot of interesting information in here.

00:18:58 And I think I remember looking at, I don't know, like literals and some of the, some of

00:19:05 the other things in here.

00:19:06 Namespaces is a good one.

00:19:07 Just probably a really good discussion around none and, and numbers and objects.

00:19:13 And there's a lot of great information around, around Python just available with the help

00:19:17 utility.

00:19:18 So here we go.

00:19:20 Help symbols.

00:19:21 So here's all the symbols of Python.

00:19:23 So if you're curious what all the keywords, oh yeah, you can just have a list of all the

00:19:28 keywords there.

00:19:28 There's really not that many Python keywords.

00:19:30 Wow.

00:19:31 That's pretty interesting.

00:19:32 Anyway.

00:19:32 Yeah.

00:19:33 Don't forget help.

00:19:34 And those keywords are things that you can't use as variables or functions or let's say symbols

00:19:40 more broadly in Python.

00:19:42 I just realized that from this PySQL scribe, I was like, why do you have to say select thing

00:19:47 than dot from underscore.

00:19:49 Oh.

00:19:50 And I, and I knew that the old parser, that would probably be the case, right?

00:19:54 Yeah.

00:19:54 Because it's just looks for the word from, but with the new like peg parser forward looking

00:19:58 thing, I thought, oh, it's going to be smart enough to know that this is being used in an

00:20:01 expression and not keyword.

00:20:02 No.

00:20:03 So you can say help symbols and keywords.

00:20:05 And those are the things you can't name symbols at all.

00:20:09 Yeah.

00:20:10 You don't really have to memorize them though, because Python will not let you.

00:20:13 Like it's just.

00:20:14 It's going to be like, Hey, that's a keyword.

00:20:15 Yeah.

00:20:16 Don't do that.

00:20:17 Can't do that.

00:20:17 Yeah, for sure.

00:20:19 For sure.

00:20:19 All right.

00:20:20 Extras.

00:20:20 What do you think?

00:20:21 Yeah.

00:20:22 Extras would be great.

00:20:22 Do you got any?

00:20:23 Got any?

00:20:23 Yeah.

00:20:24 Yeah.

00:20:24 I got one quick, quick, quick.

00:20:25 So last week I mentioned that granion, granion is going strong.

00:20:32 How many stars?

00:20:33 3,200.

00:20:34 This is the rust based one.

00:20:36 Oh yeah.

00:20:37 That is based.

00:20:37 That basically is like a handy wrapper around hyper, right?

00:20:43 Which hyper is a rust HTTP engine.

00:20:46 And that has 15,000 stars.

00:20:48 So quite popular.

00:20:49 But that they released 2.0 and that meant FastAPI and probably a lot of starlet stuff as

00:20:56 well.

00:20:56 Just stopped working categorically.

00:20:58 Whoops.

00:20:59 Well, the next day out rolls patch release 2.0 and that was a good idea.

00:21:11 And FastAPI makes heavy use of any IO.

00:21:16 So that seems like that was probably the problem.

00:21:18 Give it another go.

00:21:20 And all the FastAPI things are happy again.

00:21:22 Cool.

00:21:22 So just as a follow up from last week, really.

00:21:25 Yeah.

00:21:25 I wouldn't point it out that normally, but because since I said it didn't work, I'll put it back

00:21:29 on the checkbox.

00:21:30 If now it works again.

00:21:31 All right.

00:21:31 That's all I got.

00:21:32 Quick and easy.

00:21:33 I got no extras.

00:21:34 Although it just reminded me, I guess I don't have a page for this, but looking at dependencies,

00:21:39 I had to pull up.

00:21:42 I was looking for like I had a big, large, large set of packages that work together, internal

00:21:48 thing.

00:21:49 And something was using Greenlit.

00:21:51 And I'm like, what is using Greenlit?

00:21:53 And I pulled out pip dep tree.

00:21:57 So I love pip dep tree to quickly take a look at what, if you run that, if you just pip install

00:22:05 it and run it, and it'll show you in a tree form what all you have installed and what dependencies

00:22:11 there are.

00:22:12 And so I searched, easily searched through that and found out that Playwright was using

00:22:17 Greenlit.

00:22:17 And I'm like, oh, well, I'll trust them that they have a good reason to use it.

00:22:21 So I just needed to update my Playwright and we were good to go.

00:22:25 Excellent.

00:22:26 Yeah.

00:22:27 I've used that a lot.

00:22:28 It's really nice.

00:22:28 I use the UV pip compile thing, which now embeds that information into the requirements.txt file,

00:22:36 which is nice as well.

00:22:38 Oh, yeah.

00:22:38 Okay.

00:22:39 Yeah.

00:22:39 Yeah.

00:22:39 So I haven't used it that much lately.

00:22:41 But yeah, if you're in any project that doesn't have one of those generated files, then it's...

00:22:46 And another problem you can run into with just having it generate the stuff is, I don't know

00:22:51 about you, but when you add stuff to your requirements file, it'd be that piproject.toml

00:22:55 or requirements.txt equivalent or whatever.

00:22:58 It's easy to put stuff in there and then not take it out because it's like, I don't think

00:23:02 I've used it anymore, but it could break stuff and let's just...

00:23:05 What's it hurting in there?

00:23:06 You know, like it can become real easy for that to become stale.

00:23:09 So, you know, you get a little better look of it from piped up tree maybe.

00:23:15 Anyway, how about a joke?

00:23:17 Sounds good.

00:23:18 I brought a series of battling conspiracy theories to do with technology here.

00:23:23 That sounds fun, right?

00:23:24 Yeah.

00:23:25 So here's a flat earther.

00:23:27 I'm all here for making fun of flat earthers.

00:23:30 I'm a computer engineer and I affirm that the earth is flat.

00:23:34 But apparently John Davis, the secretary of the Flat Earth Society, you are not alone, Brian.

00:23:40 Just because no one else around you thinks the earth is flat, that doesn't mean there's not

00:23:45 a whole hive of people on the internet.

00:23:48 All over the globe.

00:23:49 All over the globe.

00:23:50 So what is the response?

00:23:53 Okay.

00:23:53 I'm a geologist and I say that computers work because there are very small people inside

00:23:58 doing all the work.

00:23:59 Yeah.

00:24:00 I gotcha.

00:24:01 I think right back atcha.

00:24:03 And then the subtitle, or if this is not, but if it weren't, XKCD, the hover, whatever that

00:24:08 is, says this earth is flat versus computers work because there are very small people inside

00:24:13 doing all the work.

00:24:14 Was the geologist inspired by Amazon's just walk out technology?

00:24:19 Remember, do you know the story behind that?

00:24:22 No.

00:24:23 You know the Amazon walk in, pick up wherever you want, you register your card, pick up

00:24:27 wherever you want, you walk out and they just charge you?

00:24:29 Yeah.

00:24:30 I'm pretty sure that, I don't have any good sources off the top of my head right now,

00:24:35 but that that was actually, instead of being super smart AI, which is what it was billed

00:24:40 as there were just people in countries where it was cheap enough, just paid to sit there and watch

00:24:45 a camera and just like mark down what you got.

00:24:47 And then like, and someday maybe it was supposed to eventually become powered by AI and video

00:24:56 recognition.

00:24:56 But the working versions were just people watching you on camera and marking it down

00:25:01 as you picked up and put down stuff.

00:25:03 Yeah.

00:25:03 Interesting.

00:25:04 Okay.

00:25:05 Anyway, I think that's the reference there.

00:25:06 That is funny.

00:25:07 There was a, somebody posted the other day about some studies that people are doing.

00:25:14 So a lot of people are using AI for stuff and I'm using it for some things as well, but the,

00:25:19 but for some things companies are doing like they're putting together lists of tasks and having

00:25:25 like, if they were going to like hire a person to do this, a person should be able to do this

00:25:30 task and this is kind of the output they should get.

00:25:33 And, and then putting that, those tests to AI, like agents and just other ways to use AI

00:25:40 and rating them that way.

00:25:42 And if you do that and have, have domain experts come up with these tests, like AI is not doing

00:25:49 well.

00:25:49 And, and, but one of the results was about like 16% correct on a lot of these.

00:25:55 And if the comment was, while impressive and that went on and I'm like, while impressive,

00:26:01 that's just not, I've never got a 16% score in, in school and had somebody say, wow, that's

00:26:07 impressive, but you need to grade on a good curve there.

00:26:10 There you go.

00:26:12 Business Insider.

00:26:12 Oh, go away cookies.

00:26:14 Amazon's just walk out technology relies on hundreds of workers in India watching you

00:26:18 shop.

00:26:19 That, that is ridiculous.

00:26:23 Yeah.

00:26:24 I thought it was RFID or something like that.

00:26:26 No, it's magic.

00:26:28 It's magic.

00:26:29 Yeah.

00:26:31 What a boring job or maybe interesting.

00:26:33 I don't know.

00:26:34 Watching people shop.

00:26:35 Yeah.

00:26:36 Maybe.

00:26:37 Anyway.

00:26:40 All right.

00:26:40 Well, good episode as usual.

00:26:43 good to talk with you.

00:26:44 Thanks to everybody for tuning in and we'll see you next week.

00:26:47 Yeah.

