00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 47, recorded October 11th, 2017.

00:00:09 I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:12 And we've got a bunch of cool stuff lined up for you.

00:00:13 So, hey, Brian, how's it going?

00:00:15 It's going really good.

00:00:15 Yeah, yeah, great.

00:00:16 Hey, before we get to your first item, I want to say thanks to DigitalOcean.

00:00:19 They've sponsored a bunch of episodes coming up.

00:00:21 They're really supporting the show.

00:00:22 And the thing they want me to tell you about is Spaces, which is like Amazon S3,

00:00:27 but like literally three times better and you get a two-month trial.

00:00:30 So check it out at do.co slash Python.

00:00:34 And we'll talk more about that later.

00:00:35 How about Fast?

00:00:37 Fast Python, Brian.

00:00:38 What do you think?

00:00:38 I'm excited.

00:00:39 So PyPy is fast implementation.

00:00:42 And it's good to see that there's still work coming out.

00:00:46 And one of the exciting bits of news just recently is version 5.9, at least on the PyPy 2.7 version of this release,

00:00:56 has Pandas and NumPy in it as well, which is super exciting.

00:01:00 That's actually a really big deal because they had not been supported.

00:01:04 That's one of the things that was a challenge with PyPy.

00:01:06 Like it was great.

00:01:08 It was much faster.

00:01:08 In many ways, it was like five times faster than regular CPython.

00:01:13 However, it didn't support any of the C extensions.

00:01:15 You couldn't integrate things like NumPy and stuff.

00:01:18 And so it was like you get a subset of Python that's super fast, but there might be things you don't want to do.

00:01:23 And oh, by the way, a lot of those are computational and where people care about when it's fast.

00:01:26 Yeah.

00:01:27 So it's awesome to see that coming on.

00:01:28 So getting NumPy and Pandas come on, and I'm sure that eventually it'll come on the 3.5 branch as well.

00:01:35 Yeah, for sure.

00:01:36 And you also have notes about Cython as well, right?

00:01:39 Yeah.

00:01:39 So it includes the part of the help with this, and what it includes is Cython 0.27.1,

00:01:47 which supports a lot more Cython projects on PyPy.

00:01:52 I'm not sure what the Cython story was before this release, but that's pretty exciting.

00:01:57 Yeah, that's cool.

00:01:58 Yeah, I think the biggest news here is that CFFI has been updated and the C API extensions for many, many projects now work with PyPy,

00:02:08 whereas previously they did not.

00:02:10 And so it's not just Pandas and NumPy.

00:02:13 Those are the headline ones.

00:02:14 But there's a bunch of things that previously couldn't work with PyPy because of the C extensions.

00:02:18 Well, guess what?

00:02:18 Now they can.

00:02:19 That's pretty awesome.

00:02:20 Yeah.

00:02:20 And then another bit of news with this release is the optimized JSON parser

00:02:26 for both memory and speed, which should help for people trying to pull in JSON.

00:02:31 So that's good.

00:02:32 Yeah, that's awesome.

00:02:33 I think people use JSON every now and then.

00:02:35 Not really sure.

00:02:35 All the microservices, it's just like the network lights are above those JSON messages.

00:02:40 So that's really cool, and that's all pretty straightforward.

00:02:43 I want to show you some stuff that is not straightforward.

00:02:47 So there's this project on GitHub that has really taken off.

00:02:51 There's a ton of people contributing to it.

00:02:53 So let me pull up the main page and see.

00:02:56 There's 17 contributors who are doing a lot of work on this project, and it has about 3,600 stars called WTF Python.

00:03:06 So if you've heard of, have you seen the Watt video about JavaScript and Ruby,

00:03:11 which is hilarious?

00:03:12 You know, Python is lucky in that there's not that many weird edge cases,

00:03:15 but this repository will show you, actually, there's some weird cases.

00:03:20 So have you seen this, Brian?

00:03:22 No, I haven't.

00:03:23 This is pretty funny.

00:03:24 Yeah, I pulled out four items, but there's a bunch, and this is super active on GitHub.

00:03:28 I'm getting all these notifications from it.

00:03:29 That's cool.

00:03:30 Like, one is about skipping lines.

00:03:33 You say, like, value equals 11.

00:03:35 Value equals 32.

00:03:36 What is value?

00:03:37 It's 11.

00:03:38 Huh?

00:03:38 What is going on here?

00:03:40 There's another one that's similar in the same section.

00:03:43 It says, quote E, equal, equal, quote E, false.

00:03:47 Okay.

00:03:48 And things like that.

00:03:50 And it's about encoding and some interesting stuff.

00:03:53 So each one of these has, like, a really simple, you know, like, three or four lines of code and then the explanation.

00:03:58 And the explanation, I think, is where this gets interesting.

00:04:01 So another one is modifying dictionaries.

00:04:04 Like, these are super good ways to trick people.

00:04:07 Like, create a dictionary with one item.

00:04:08 Go through for each item in it.

00:04:11 Delete that item and add a new one.

00:04:13 And then print that out.

00:04:14 How many times did that loop run, do you think?

00:04:15 I have no idea.

00:04:16 It's either one or error or something is what I would guess, right?

00:04:20 But the answer is eight.

00:04:21 Exactly eight.

00:04:22 You're like, what?

00:04:23 Why does it run eight?

00:04:25 Why doesn't it run one, infinite, or zero, or error?

00:04:31 Like, those are the three.

00:04:32 Zero, one, or infinity.

00:04:33 Eight doesn't make any sense.

00:04:34 But if you look at the implementation, the dictionaries are pre-allocated

00:04:37 because you're typically adding stuff.

00:04:39 They want to grow in, like, a doubling sort of way.

00:04:41 Not a every time you add something, it's got to reallocate and copy around things.

00:04:46 And so what they do is they pre-allocate a certain number of items.

00:04:49 And this trick, like, leverages assigning into those new slots until it runs out.

00:04:55 So this is crazy.

00:04:57 I'll give you one more example.

00:04:58 Is, let's go with the is.

00:05:00 Is is not what it is.

00:05:02 So if you say A equals 256, B equals 256, A is B is true.

00:05:07 However, if you say A is 257 and B is 257, A is B is false.

00:05:14 Do you know why?

00:05:14 It's another crazy one.

00:05:16 This is insane.

00:05:17 And the reason is, I believe the first 126 numbers, maybe negative as well, I'm not sure,

00:05:23 are pre-allocated for performance reasons.

00:05:25 And every time you, like, literally say the number seven, like, that points to this pre-allocated

00:05:31 flywheel pattern type thing.

00:05:33 But beyond that, these get allocated on demand.

00:05:36 So you're basically asking, is the pointer to 257 equal to the other pointer 257?

00:05:40 And there's no longer this tracking between them and they get dropped.

00:05:43 So there's just, there's tons of this craziness going on here.

00:05:47 That's pretty fun.

00:05:47 Yeah, that's nice.

00:05:49 So I think this is a fun project.

00:05:50 I really commend the people working on it.

00:05:52 It's great.

00:05:53 And I definitely, I want to do something with this later.

00:05:55 I just haven't figured out quite what the details are yet, but there's got to be something

00:05:58 fun here.

00:05:58 So this makes me feel like I should go practice my Python.

00:06:01 Like, maybe I'm not as good as I thought I was because that dictionary thing going eight

00:06:04 times kind of like took me for a loop for a bit.

00:06:07 Anything in the WTF Python would be evil to try to bring up at a job interview.

00:06:12 But it'd be very evil.

00:06:14 Yeah.

00:06:14 But if they answered it, think of that.

00:06:16 Yeah, that'd be good.

00:06:17 I ran across this, it's a recent article called Python Exercises.

00:06:22 And I've done this before.

00:06:24 So as a trying to either brush up on Python skills or trying to do, find some questions to ask

00:06:31 at an interview or something, trying to come up with some decent questions.

00:06:35 And a lot of the questions out there are, they seem to be sort of generic questions around

00:06:41 like any language.

00:06:42 And they just happen to be do it in Python.

00:06:44 This is a collection of questions that are, some of them are pretty easy to start off

00:06:50 with, like basic syntax stuff.

00:06:51 But they're some things that check actually just Python and some use of the standard library.

00:06:57 And I think it's a nice collection.

00:07:00 It goes through syntax, of course, and then some text processing and OS integration and decorators,

00:07:08 generators.

00:07:09 And you can get into quite a few things.

00:07:12 But I think it's a nice set.

00:07:14 It's not too huge.

00:07:15 It's a good one to look at.

00:07:16 Yeah, yeah.

00:07:16 And they don't seem too trivial.

00:07:18 They're like, given this set of data, parse it into a CSV file, start the subprocess, things

00:07:24 like that.

00:07:24 It's really, it's pretty nice, actually.

00:07:25 Yeah.

00:07:26 And then at the end, the last thing they talk about is testing, which I very much appreciate.

00:07:30 I think it's important to make sure.

00:07:33 I've started with trying to do, send out code examples to, before I bring somebody in for

00:07:39 an interview, ask them to solve some coding problem, but also to write a test to prove

00:07:44 it works.

00:07:44 And I think that's a good thing to add.

00:07:45 Absolutely.

00:07:46 Yeah, that's really cool.

00:07:47 Great that they include that at the end as well.

00:07:49 So I've got another thing you should test for.

00:07:51 Before I tell you about it, though, I want to tell you about Spaces.

00:07:54 So Spaces is DigitalOcean's new service, which lets you basically store files on the internet

00:08:01 and either privately or publicly pass them around, right?

00:08:04 So kind of like Amazon S3, but much, much more affordable.

00:08:08 So instead of charging you nine cents per gigabyte, they charge you one cent.

00:08:12 And you can use exactly the same tools.

00:08:14 So, you know, like I use Transmit for my Mac.

00:08:17 I love that to manage all my stuff in the cloud.

00:08:20 And when I switched to DigitalOcean Spaces, which I did just because I saw the offer, I'm

00:08:24 like, this is so much better before we even talked about this.

00:08:27 I just pointed my Transmit at that and it just kept on working.

00:08:31 Just said, hey, there's an S3 thing over here and here's the key.

00:08:33 So if you are using S3 or some other sort of shared cloud storage for files and things

00:08:40 like that, you definitely should check out DigitalOcean Spaces at do.co slash Python

00:08:46 and check it out.

00:08:47 There's a two month free trial and then it's really, really affordable and straightforward.

00:08:51 I love it.

00:08:51 Nice.

00:08:52 The audio you're listening to right now came straight out of there.

00:08:54 So beautiful.

00:08:55 Have you heard of Pickle?

00:08:57 Oh, yeah.

00:08:57 Not the gherkins, but the built in a way to serialize stuff.

00:09:03 I don't remember why, but I try to avoid it because I've heard there's problems.

00:09:06 Yeah.

00:09:07 There's two major problems with Pickle.

00:09:08 One of them is it stores a binary representation of your objects.

00:09:13 And so if you do things like rename a field or maybe even reorder stuff, right?

00:09:18 If you add a field, remove a field, there's all sorts of stuff where like just the versioning

00:09:22 of your classes or your data, if that changes, you can no longer properly serialize these things.

00:09:28 It's not great.

00:09:29 So that can be a problem.

00:09:31 And that's probably reason enough to use JSON or some other format.

00:09:34 However, right in the documentation, it says, warning, the Pickle module is not intended to be secure against erroneous or maliciously constructed data.

00:09:43 Never unpickle data received from an untrusted or unauthenticated source.

00:09:49 All right.

00:09:49 So I think people see this like, okay, that looks bad.

00:09:51 Let's get out of here.

00:09:52 And they just bail as they should.

00:09:54 Like, I think even the versioning stuff alone is already an issue.

00:09:58 So like, I think there was an issue with somebody caching stuff.

00:10:01 And when they were switching from Python 2 to Python 3, the in-memory representation of like

00:10:06 date time or some part of the memory was a different representation and the Pickle and stuff

00:10:11 started to conflict with each other.

00:10:13 Anyway, this article I want to talk about is called Exploiting Misuse of Python's Pickle.

00:10:19 So if you've ever read that warning and gone, huh, that sounds bad.

00:10:23 I can kind of imagine what that might look like.

00:10:25 I'm going to stay away from it.

00:10:26 This one shows you exactly how to do bad things.

00:10:30 And bad things begin with, let's create a remote shell and start executing code.

00:10:37 And maybe even let us log in remotely over SSH to this machine by sending a little bit of binary data,

00:10:43 like 50 bytes, 100 bytes, something super small, over to this machine.

00:10:48 And then we'll just log in and go from there.

00:10:49 That sounds bad, right?

00:10:50 Yeah.

00:10:51 Jeez.

00:10:51 So the idea is when you unpickle something, there's a way, there's a few hooks where you

00:10:55 can run arbitrary Python code.

00:10:57 And so they say, well, let's just use subprocess.popen and create a shell for us.

00:11:04 So you just put that command in like your dunder reduce, I think it's called.

00:11:07 And then you've got shells and that's bad.

00:11:10 So for those of you out there wondering, what is this warning about?

00:11:14 Exactly.

00:11:14 Why should I be super scared?

00:11:16 Here's why.

00:11:17 Great little example.

00:11:18 Super approachable.

00:11:19 Yeah.

00:11:19 Wacky.

00:11:19 Yeah.

00:11:20 Wacky.

00:11:20 So if I was running like a Django website, I probably wouldn't want to like use that

00:11:24 as my exchange format on my services, right?

00:11:26 No.

00:11:26 And there's so many other better formats anyway.

00:11:28 So.

00:11:29 JSON, JSON.

00:11:29 JSON.

00:11:30 Yeah.

00:11:31 For sure.

00:11:31 All right.

00:11:32 So what do you got next for us?

00:11:33 I've got a complete beginner's guide to Django.

00:11:35 Awesome.

00:11:36 This is a seven part series and it looks like six parts are done already.

00:11:41 And the seventh part is coming up soon.

00:11:43 And it's, it kind of goes through quite a bit of Django.

00:11:47 I know there's already a lot of Django tutorials out there, but the interesting thing I think that

00:11:52 makes this one stand out is it's kind of, it has an academic feel to it, I think.

00:11:58 And if that's kind of your thing, you might like this.

00:12:01 Well, it has a chalkboard.

00:12:02 It has a beaker and it has a Superman flying.

00:12:05 So these are all good signs.

00:12:06 Yeah.

00:12:07 Well, it has some like comic like drawings in it too and stuff.

00:12:10 Yeah.

00:12:10 Yeah.

00:12:10 Yeah.

00:12:10 Actually, I think this is really nice.

00:12:12 The graphics are wonderful.

00:12:14 They've got little, wireframes to help you design the web pieces, some nice graphics

00:12:19 for file structure.

00:12:20 It seems super approachable to me.

00:12:22 I kind of got lost with some of the UML diagrams and whatnot, but, it's well written.

00:12:27 People should check it out if you're want to learn Django.

00:12:30 So maybe.

00:12:31 Yep.

00:12:31 Absolutely.

00:12:32 And it's based on Python, not legacy Python.

00:12:34 So this is all good as well.

00:12:35 Yeah.

00:12:36 So if you're looking to, pick up Django, that's a good place to do it.

00:12:40 All right.

00:12:41 So do you remember when we talked about the malicious packages being uploaded?

00:12:46 Yes.

00:12:47 PyPI?

00:12:47 Yeah.

00:12:48 Do you remember what they were targeting?

00:12:50 Like how were they making those, getting people to install them?

00:12:52 Well, there were a couple of ways.

00:12:54 There were naming standard library things in PyPI and then also misspellings.

00:12:59 Exactly.

00:13:00 So we have a new GitHub project called PyPI dash Parker.

00:13:05 So this is a cool project by a guy named Matt.

00:13:08 And he sent this over and said, Hey, you should check this out.

00:13:10 I don't think a lot of people know about it yet, but it's, it's really cool.

00:13:13 So the idea is, you know, we had this debate about how do people check and how people verify

00:13:18 what gets uploaded to PyPI.

00:13:20 Should there be like a committee that reviews it?

00:13:22 And all that sounded really bad.

00:13:24 And so he's created this library that says, look, the self-serve ability of people to just

00:13:31 upload things to PyPI.

00:13:33 This is a good thing.

00:13:34 Let's not get rid of it.

00:13:36 Let's just try to solve this typo squatting problem.

00:13:39 So what he's done is he's created this thing called the PyPI Parker and it's an extension to

00:13:45 dist utils.

00:13:46 So it's a separate command that you can run on it.

00:13:50 So if I was like Kenneth writes and I create a request, you do this and I could run the

00:13:56 setup PY and give it, I think it's park.

00:13:59 And it will actually generate additional packages that I can upload to PyPI.

00:14:04 And there'll be the various reasonable misspellings of requests.

00:14:08 And when you import them, it'll raise an error, an import error and says, no, no, no.

00:14:14 This thing that you pip installed, you misspelled that.

00:14:16 Go get the real one over here.

00:14:18 So it gives them like a help message and all that kind of stuff.

00:14:20 So it one blocks the ownership or provide, it gives the ownership of these misspellings to the

00:14:26 original package owner.

00:14:27 And then for the people trying to accidentally use those, it will give them the warning to say,

00:14:34 you've misspelled this, but here's what you actually should be looking for.

00:14:37 I think that's great.

00:14:38 Yeah.

00:14:38 That's cool.

00:14:39 Yeah.

00:14:40 So well done, Matt.

00:14:40 If you're a package owner, check this out.

00:14:42 It might be helpful.

00:14:43 Since I'm not writing so much anymore, I'm thinking about writing a couple new open source projects.

00:14:48 So I'll probably be in that boat soon.

00:14:50 Yeah.

00:14:51 Nice.

00:14:51 So you should use PyPI Parker and then give us a report.

00:14:53 Okay.

00:14:54 Awesome.

00:14:54 That's our six items for the week.

00:14:55 So hopefully everyone enjoyed them.

00:14:57 Brian, what else is going on?

00:14:58 Well, I'm just getting ready for Halloween actually.

00:15:00 So.

00:15:01 I know.

00:15:01 Houses around here getting scary.

00:15:02 A lot of creatures and various cobwebs.

00:15:05 But I have not been as busy as you have lately.

00:15:07 What have you been up to?

00:15:08 I have just released a brand new course and you can find it at freemongodbcourse.com and

00:15:15 that should give you pretty much all you need to know about it.

00:15:18 So I have this paid course, which is like a seven hour, super in-depth thing.

00:15:21 And I wanted to come up with a way for people to get started with Python, get started with

00:15:26 MongoDB.

00:15:26 And then if you want to learn more, you can like take the paid course or things like that.

00:15:31 So just drop over at freemongodbcourse.com and sign up.

00:15:35 There's really no strings attached.

00:15:36 You just have to create an account and then you can go take the class.

00:15:39 Oh, another thing I wanted to point out, this is maybe not worth a whole item.

00:15:42 And this is not my thing.

00:15:44 This is just something I saw is Donald Stuffed, who runs PyPI and the website and all that kind

00:15:51 of stuff.

00:15:51 He sent out a tweet that said, Python 3 usage has doubled in the past year according to

00:15:57 download stats on PyPI.

00:15:59 Oh, that's cool.

00:16:00 Yeah.

00:16:00 So legacy Python is definitely on the downward trend, even though it's still the majority

00:16:05 of things that get downloaded.

00:16:06 Yeah.

00:16:07 So way to go, Donald, for putting that out there and nice to see that trend continuing.

00:16:11 All right.

00:16:13 Well, thank you everyone for listening.

00:16:14 Brian, thanks for finding these things and sharing with everyone.

00:16:17 Yeah.

00:16:17 Thank you.

00:16:17 Thank you for listening to Python Bytes.

00:16:21 Follow the show on Twitter via at Python Bytes.

00:16:23 That's Python Bytes as in B-Y-T-E-S.

00:16:26 And get the full show notes at Pythonbytes.fm.

00:16:29 If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:16:34 We're always on the lookout for sharing something cool.

00:16:37 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:16:40 Thank you for listening and sharing this podcast with your friends and colleagues.

