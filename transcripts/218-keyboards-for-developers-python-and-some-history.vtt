
00:00:00.000 --> 00:00:02.200
- Hello and welcome to Python Bytes,


00:00:02.200 --> 00:00:03.880
where we deliver Python news and headlines


00:00:03.880 --> 00:00:05.480
directly to your earbuds.


00:00:05.480 --> 00:00:10.480
This is episode 218, recorded January 27th, 2021.


00:00:10.480 --> 00:00:11.480
I'm Michael Kennedy.


00:00:11.480 --> 00:00:12.680
- And I'm Brian Rotkin.


00:00:12.680 --> 00:00:14.720
- And Brian, we have a special guest, Jeremy Tanner.


00:00:14.720 --> 00:00:15.560
Welcome, man.


00:00:15.560 --> 00:00:16.800
- Thank you, thank you for having me.


00:00:16.800 --> 00:00:18.600
- Yeah, it's really great to have you here.


00:00:18.600 --> 00:00:20.400
You know, we've got to talk a little bit


00:00:20.400 --> 00:00:21.480
at conferences and stuff,


00:00:21.480 --> 00:00:23.880
and now that we just don't seem to have conferences


00:00:23.880 --> 00:00:25.560
in the world anymore,


00:00:25.560 --> 00:00:27.720
we're gonna have to like drag you into our world


00:00:27.720 --> 00:00:28.880
to actually get to catch up.


00:00:28.880 --> 00:00:31.320
It's good. I need a tiny bit of that Portland fix.


00:00:31.320 --> 00:00:32.640
I loved being up there,


00:00:32.640 --> 00:00:34.260
but I mean the entire Pacific Northwest,


00:00:34.260 --> 00:00:35.640
but Portland in particular.


00:00:35.640 --> 00:00:36.560
And so, yeah.


00:00:36.560 --> 00:00:37.560
- So where are you at?


00:00:37.560 --> 00:00:39.240
- I am in Austin, Texas.


00:00:39.240 --> 00:00:40.800
- He's in the Portland of the South.


00:00:40.800 --> 00:00:42.920
- I thought that was, oh yeah.


00:00:42.920 --> 00:00:43.880
- Nice. All right.


00:00:43.880 --> 00:00:46.120
Well, maybe real quick,


00:00:46.120 --> 00:00:48.300
tell us about yourself, Jeremy,


00:00:48.300 --> 00:00:49.480
people who don't know you.


00:00:49.480 --> 00:00:50.600
- Absolutely.


00:00:50.600 --> 00:00:52.040
I like motorcycles.


00:00:52.040 --> 00:00:53.240
I like suede shoes.


00:00:53.240 --> 00:00:56.880
I like smoked meat, like Python.


00:00:56.880 --> 00:01:00.940
Currently working in developer advocacy at Equinix Metal


00:01:00.940 --> 00:01:04.040
and living in Austin, Texas,


00:01:04.040 --> 00:01:07.440
raising two awesome tiny copies of myself


00:01:07.440 --> 00:01:10.200
and trying to sort of ride it out


00:01:10.200 --> 00:01:12.620
while the world is melting, I assume like everyone else is.


00:01:12.620 --> 00:01:13.460
- Yeah, yeah.


00:01:13.460 --> 00:01:15.440
And you know, we share a lot of interests


00:01:15.440 --> 00:01:17.120
like you and I both do motorcycle riding


00:01:17.120 --> 00:01:20.120
and just a sidebar, like the ability to just jump out


00:01:20.120 --> 00:01:22.540
on a bike, get away, cruise through the mountains


00:01:22.540 --> 00:01:24.400
and just pull back into the garage and have,


00:01:24.400 --> 00:01:26.360
you know, somewhere outside of your four walls,


00:01:26.360 --> 00:01:27.520
a really cool experience.


00:01:27.520 --> 00:01:29.200
Like that's a really neat,


00:01:29.200 --> 00:01:31.480
a neat thing to do when you're otherwise just stuck at home.


00:01:31.480 --> 00:01:32.560
- It's a, we have,


00:01:32.560 --> 00:01:34.680
there's so many like technology guardrails, right?


00:01:34.680 --> 00:01:37.080
Like turning your phone screen to gray scale.


00:01:37.080 --> 00:01:38.320
So it'll be less enticing,


00:01:38.320 --> 00:01:40.440
turning off your notifications, whatever else.


00:01:40.440 --> 00:01:43.800
But the really nice thing about riding a motorcycle


00:01:43.800 --> 00:01:46.700
is the guardrails aren't there


00:01:46.700 --> 00:01:50.120
and you absolutely have to be paying full attention.


00:01:50.120 --> 00:01:52.800
So it's not all, I'm also thinking about something else.


00:01:52.800 --> 00:01:54.440
You're like, well, do you not want to die?


00:01:54.440 --> 00:01:58.340
then like watch the road, be aware of everything.


00:01:58.340 --> 00:02:00.420
And so it forces everything to the background


00:02:00.420 --> 00:02:01.900
for however long you can manage it.


00:02:01.900 --> 00:02:03.600
- Yeah, that's such an interesting idea of like,


00:02:03.600 --> 00:02:04.880
I'm just going to put the world out


00:02:04.880 --> 00:02:07.700
because I really have to focus on this situation,


00:02:07.700 --> 00:02:09.400
on this curvy road, or whatever, fantastic.


00:02:09.400 --> 00:02:12.980
All right, well, Brian, I believe you have the first item.


00:02:12.980 --> 00:02:16.240
Something, is this about laundry or what is up here?


00:02:16.240 --> 00:02:18.580
- Constant folding, of course, yeah, laundry.


00:02:18.580 --> 00:02:21.780
Well, I do like the little animated sloth


00:02:21.780 --> 00:02:24.340
holding something, it's nice.


00:02:24.340 --> 00:02:26.140
- No, I brought this up because,


00:02:26.140 --> 00:02:29.660
so it's an interesting article about constant folding.


00:02:29.660 --> 00:02:32.300
So constant folding is when a language


00:02:32.300 --> 00:02:36.420
replaces your constant expressions at compile time


00:02:36.420 --> 00:02:38.500
rather than computing them at runtime.


00:02:38.500 --> 00:02:40.260
So if I say something like, you know,


00:02:40.260 --> 00:02:44.020
24 times 60 or whatever, it'll just replace that.


00:02:44.020 --> 00:02:47.060
- Wait, wait, wait, let me, did you just say compiling?


00:02:47.060 --> 00:02:48.940
- Yeah, so that's-- - Like when I compile,


00:02:48.940 --> 00:02:51.860
like what is that, GCPY, GPY?


00:02:51.860 --> 00:02:54.220
Like how do I, no, I mean, this is a misconception.


00:02:54.220 --> 00:02:57.920
I think a lot of people have is like languages like Python don't actually get compiled.


00:02:57.920 --> 00:02:58.420
They do.


00:02:58.420 --> 00:03:00.420
Well, there's the bytecode compiler, right?


00:03:00.420 --> 00:03:03.120
So and I and that happens.


00:03:03.120 --> 00:03:08.620
I mean for a lot of I guess if you just have a script that's just one file that'll happen every time you run it.


00:03:08.620 --> 00:03:11.220
So that doesn't really there's not really a pre thing.


00:03:11.220 --> 00:03:18.420
But if you've got an installed package or or lots of stuff that gets run for a long time.


00:03:18.420 --> 00:03:21.520
Yeah, that bytecode will happen once bytecode conversion.


00:03:21.520 --> 00:03:22.220
What is that called?


00:03:22.220 --> 00:03:23.220
Is that compiling?


00:03:23.220 --> 00:03:24.620
>> Yeah, I think so.


00:03:24.620 --> 00:03:26.820
But it just doesn't compile to machine instructions.


00:03:26.820 --> 00:03:29.060
It compiles a byte code like Java or .NET,


00:03:29.060 --> 00:03:31.220
but then what happens is it doesn't JIT compile,


00:03:31.220 --> 00:03:32.780
it just interprets it from there on.


00:03:32.780 --> 00:03:34.860
Yeah, I think there's levels,


00:03:34.860 --> 00:03:36.780
but it's automatic and hidden, which is cool.


00:03:36.780 --> 00:03:41.120
>> Well, CPython at the very least has this notion of


00:03:41.120 --> 00:03:44.580
constant folding where it just comes up with


00:03:44.580 --> 00:03:48.700
your expressions and does it at the compile time instead.


00:03:48.700 --> 00:03:52.340
It's something that I don't really think about in Python.


00:03:52.340 --> 00:03:57.340
I definitely think I know what's happening in C, in C++.


00:03:57.340 --> 00:03:59.260
We got the pre-compiler going on,


00:03:59.260 --> 00:04:02.200
but it does happen and you can see it in action


00:04:02.200 --> 00:04:04.980
in this article talks about it.


00:04:04.980 --> 00:04:08.540
You can use the disassembler to disassemble


00:04:08.540 --> 00:04:12.380
a bit of Python code and see what it would look like


00:04:12.380 --> 00:04:15.660
outside of, you know, after the conversion.


00:04:15.660 --> 00:04:18.780
And so something like, you know, if you recommend,


00:04:18.780 --> 00:04:23.060
One of the examples was the days in seconds


00:04:23.060 --> 00:04:25.580
is 24 times 60 times 60.


00:04:25.580 --> 00:04:29.860
And then the Python will just convert that to,


00:04:29.860 --> 00:04:31.940
what is it, 86400.


00:04:31.940 --> 00:04:33.900
Now, I'm bringing this up,


00:04:33.900 --> 00:04:34.740
like one of the things,


00:04:34.740 --> 00:04:36.060
this is kind of an interesting article


00:04:36.060 --> 00:04:38.060
about really how it does it.


00:04:38.060 --> 00:04:40.500
And the rest of the article kind of goes into,


00:04:40.500 --> 00:04:43.580
you know, the implementation on CPython


00:04:43.580 --> 00:04:45.140
of how the folding happens.


00:04:45.140 --> 00:04:46.660
And that's interesting,


00:04:46.660 --> 00:04:50.260
But mostly the reason why I brought this up is because I want people to remember that


00:04:50.260 --> 00:04:51.420
this happens.


00:04:51.420 --> 00:04:58.260
So if like for this example, it is way better to put in your code days in seconds equals


00:04:58.260 --> 00:05:00.420
24 times 60 times 60.


00:05:00.420 --> 00:05:01.420
That's really clear.


00:05:01.420 --> 00:05:04.780
You don't really have to comment it much because people can just look at it.


00:05:04.780 --> 00:05:10.540
But if you were to manually replace that with 86400, it's suddenly a magic number then and


00:05:10.540 --> 00:05:14.380
people won't, you know, in the future, you'll be like, where did this number come from?


00:05:14.380 --> 00:05:15.740
What happens if I change it?


00:05:15.740 --> 00:05:21.380
it's going to mock everything up. So I think things like this are great. I use it. It talks


00:05:21.380 --> 00:05:26.180
about it's not just math expressions, things like string expressions too. So you can, you


00:05:26.180 --> 00:05:32.100
know, if you're going to do a, you know, 30 different dash marks to print across the screen,


00:05:32.100 --> 00:05:37.620
you can say like dash, you know, the dash character times 30 and Python will just convert


00:05:37.620 --> 00:05:39.500
that for you at bytecode time.


00:05:39.500 --> 00:05:50.380
Yeah, I just checked it for strings and yeah, it definitely says, you know, the final result of the calculation of a bunch of constants involving strings is the answer.


00:05:50.380 --> 00:05:56.460
You know, the benefit is if it's always going to be the same outcome, why compute it every time you run that function or do an import?


00:05:56.460 --> 00:06:07.180
Yeah, and there's some size optimization that happens that Python realizes that some things are so in the article talks about some of the constraints.


00:06:07.180 --> 00:06:09.400
So if you end up with like, you know,


00:06:09.400 --> 00:06:12.280
a 4,000 character string after doing it,


00:06:12.280 --> 00:06:15.080
or, you know, I think they found the limit was,


00:06:15.080 --> 00:06:19.040
it'll go up to 4096, but if you make it 4097,


00:06:19.040 --> 00:06:22.040
it doesn't do the folding at that point.


00:06:22.040 --> 00:06:23.400
I don't think you have to memorize that.


00:06:23.400 --> 00:06:26.000
Just know that Python does has some optimization


00:06:26.000 --> 00:06:29.040
where it says if the pre-computed value is too big,


00:06:29.040 --> 00:06:31.440
then don't worry about pre-computing, do it at runtime.


00:06:31.440 --> 00:06:32.920
- Yeah, yeah, it makes a lot of sense.


00:06:32.920 --> 00:06:33.980
Perfect, I like it.


00:06:33.980 --> 00:06:35.920
And you know, it's another cool chance


00:06:35.920 --> 00:06:38.720
just play with the disassembler and understand that a little bit better.


00:06:38.720 --> 00:06:40.600
Jeremy, you ever play with disassemble things?


00:06:40.600 --> 00:06:47.080
No, but was appreciated that the it was a way to avoid a little of the magic


00:06:47.080 --> 00:06:51.400
number disaster where had looked back and reviewed a bunch of I think it was


00:06:51.400 --> 00:06:55.640
physics code. And so often there will be like, oh, if you're if you're a domain


00:06:55.640 --> 00:06:59.840
expert and you're like and you're familiar with nuclear reactors, then yeah,


00:06:59.840 --> 00:07:02.240
you'll you'll know you'll know why these pieces are here.


00:07:02.240 --> 00:07:04.760
I please name them things.


00:07:04.840 --> 00:07:05.840
Yes, exactly.


00:07:05.840 --> 00:07:10.200
Here's the number of moles of or whatever in chemistry.


00:07:10.200 --> 00:07:11.680
Like it doesn't make any sense, right?


00:07:11.680 --> 00:07:14.640
So if you kind of do a calculation, but you don't have to pay for the calculation.


00:07:14.640 --> 00:07:15.840
That's, that's really nice.


00:07:15.840 --> 00:07:20.840
I used to do this all the time with the days and seconds, like the seconds and days,


00:07:20.840 --> 00:07:23.000
because what I would do is I would go to like a date time.


00:07:23.000 --> 00:07:26.680
I would say date time dot total seconds divided by seconds and days.


00:07:26.680 --> 00:07:32.960
Well, that's how many days it is until Paul was on talk Python, the guy behind the


00:07:33.000 --> 00:07:35.360
date time stuff and says, do you know,


00:07:35.360 --> 00:07:38.920
you can go to a time delta and say it has days equal one


00:07:38.920 --> 00:07:40.480
and then divide the date time,


00:07:40.480 --> 00:07:42.480
another time delta by days equals one


00:07:42.480 --> 00:07:44.100
and it'll tell you the same answer.


00:07:44.100 --> 00:07:45.300
Like that's just crazy.


00:07:45.300 --> 00:07:46.800
(laughing)


00:07:46.800 --> 00:07:48.600
How was I supposed to know I could do that?


00:07:48.600 --> 00:07:50.920
So, but yeah, this is definitely a cool one


00:07:50.920 --> 00:07:53.180
and the disassemblers need to really understand


00:07:53.180 --> 00:07:55.280
what's happening, like these little constants,


00:07:55.280 --> 00:07:57.480
you know, load const, store name, load const,


00:07:57.480 --> 00:08:00.720
just get fed straight through this huge C of L.C,


00:08:00.720 --> 00:08:03.020
which loop and that's your program.


00:08:03.020 --> 00:08:03.860
All right.


00:08:03.860 --> 00:08:05.680
- One of the things I want to bring up is


00:08:05.680 --> 00:08:07.700
these are fun little tiny examples


00:08:07.700 --> 00:08:10.220
of using the disassembler, which is a fun thing to do


00:08:10.220 --> 00:08:13.020
because when you, and if you're trying to do a larger


00:08:13.020 --> 00:08:16.140
function and disassemble it, it's going to be


00:08:16.140 --> 00:08:18.780
more complicated, but it's kind of fun to look


00:08:18.780 --> 00:08:20.380
at the output of the disassembler.


00:08:20.380 --> 00:08:21.460
- Yeah, yeah, definitely.


00:08:21.460 --> 00:08:22.820
It gives you that inside view.


00:08:22.820 --> 00:08:23.660
All right.


00:08:23.660 --> 00:08:24.620
I stole this from you, Brian.


00:08:24.620 --> 00:08:25.460
It's a good one.


00:08:25.460 --> 00:08:26.460
- It's a good one.


00:08:26.460 --> 00:08:30.500
- So this one is called hip review.


00:08:30.500 --> 00:08:32.000
And PipReview is really cool.


00:08:32.000 --> 00:08:34.300
I learned about this from PyCoders, the newsletter.


00:08:34.300 --> 00:08:37.900
And the idea is that updating all of your packages


00:08:37.900 --> 00:08:39.720
that you've got in a virtual environment


00:08:39.720 --> 00:08:41.720
is a hassle in various ways.


00:08:41.720 --> 00:08:44.980
One way is I could just not set,


00:08:44.980 --> 00:08:47.020
you know, I could not pin the version numbers


00:08:47.020 --> 00:08:48.700
and just install the latest, right?


00:08:48.700 --> 00:08:50.500
But then if I try to reinstall,


00:08:50.500 --> 00:08:53.160
it just says, you know, those are up to date.


00:08:53.160 --> 00:08:56.820
Maybe I see, oh, I know that there's an update for HTTPX.


00:08:56.820 --> 00:08:59.780
So I'll do a pip install -u pipx, right?


00:08:59.780 --> 00:09:04.340
upgrade and it'll upgrade it, but it won't upgrade the things that pipx installed.


00:09:04.340 --> 00:09:08.340
Even if I ask pipx to upgrade itself, you know what I mean? So there's like this,


00:09:08.340 --> 00:09:13.700
the dependencies of the dependencies and all that become just a hassle. So there's this thing called


00:09:13.700 --> 00:09:20.500
pip review, which lets you smoothly see all the available updates and then apply those. This used


00:09:20.500 --> 00:09:25.540
to be part of pip tools, but it's now its own standalone thing that just directly uses pip.


00:09:25.540 --> 00:09:29.040
So like all good things, you pip install pip review,


00:09:29.040 --> 00:09:31.420
which is very meta, and then you have pip review.


00:09:31.420 --> 00:09:33.580
And then you can just ask it to do things


00:09:33.580 --> 00:09:38.080
like just run pip dash review on the command prompt terminal.


00:09:38.080 --> 00:09:40.500
And it'll tell you, you've got this version of this library,


00:09:40.500 --> 00:09:41.740
there's a new one available.


00:09:41.740 --> 00:09:42.960
And that's pretty much equivalent


00:09:42.960 --> 00:09:45.200
to doing pip list dash outdated.


00:09:45.200 --> 00:09:47.820
But then you can also just say, and fix it.


00:09:47.820 --> 00:09:49.900
So pip dash review --auto,


00:09:49.900 --> 00:09:51.660
which will just find all the things out of date


00:09:51.660 --> 00:09:54.080
and update them, including the dependency


00:09:54.080 --> 00:09:56.580
of the dependency of the dependency, which is pretty awesome.


00:09:56.580 --> 00:09:59.040
It'll also let you do this in an interactive way.


00:09:59.040 --> 00:10:02.260
So you can say --interactive and it'll say this is out of date.


00:10:02.260 --> 00:10:02.920
Do you want to upgrade it?


00:10:02.920 --> 00:10:03.420
Yes or no.


00:10:03.420 --> 00:10:04.460
NumPy is out of date.


00:10:04.460 --> 00:10:05.040
Do you want to update it?


00:10:05.040 --> 00:10:06.020
Pandas is out of date.


00:10:06.020 --> 00:10:06.760
Do you want to update it?


00:10:06.760 --> 00:10:07.220
And so on.


00:10:07.220 --> 00:10:09.560
And you can selectively opt into those.


00:10:09.560 --> 00:10:13.260
And then you can even come up with a constants file that says, you know,


00:10:13.260 --> 00:10:15.320
please don't update these automatically.


00:10:15.320 --> 00:10:18.940
They're stuck in an old version for whatever reason, pinned to a certain version.


00:10:18.940 --> 00:10:19.560
What do you guys think?


00:10:19.760 --> 00:10:23.240
I hear NumPy and Pandas and Matplotlib.


00:10:23.240 --> 00:10:25.280
And it's all the flashbacks, right?


00:10:25.280 --> 00:10:30.600
I think we met before time when I was at Anaconda.


00:10:30.600 --> 00:10:34.720
And so I mean, since this certainly looks interesting


00:10:34.720 --> 00:10:37.920
and solving problems.


00:10:37.920 --> 00:10:41.040
But on my end, still very much, especially


00:10:41.040 --> 00:10:46.800
for scientific Python bits, a conda loyalist,


00:10:46.800 --> 00:10:50.480
both for package management and for environment management.


00:10:50.480 --> 00:10:52.180
- Yeah, that's a whole different side of things.


00:10:52.180 --> 00:10:55.440
And Konda definitely managed that quite a bit, right?


00:10:55.440 --> 00:10:58.520
Like it's all about, you can open up your navigator


00:10:58.520 --> 00:11:00.940
and create your environments and interact with those


00:11:00.940 --> 00:11:01.820
in that way as well.


00:11:01.820 --> 00:11:03.700
So yeah, I think this probably applies more


00:11:03.700 --> 00:11:05.860
to if you're just doing straight pip


00:11:05.860 --> 00:11:08.540
or maybe you're thinking, well, pipenv or whatever.


00:11:08.540 --> 00:11:10.280
The other alternative would be to use something


00:11:10.280 --> 00:11:13.040
like Dependabot where it finds those changes,


00:11:13.040 --> 00:11:15.620
you pin your version, it says there's now a new version


00:11:15.620 --> 00:11:16.460
and then it upgrades it.


00:11:16.460 --> 00:11:18.880
but that's always going through like some external workflow.


00:11:18.880 --> 00:11:20.760
And this is just like, well, I don't want to go through that.


00:11:20.760 --> 00:11:24.200
I just want to right now find the new stuff and change it or don't.


00:11:24.200 --> 00:11:24.600
Yeah.


00:11:24.600 --> 00:11:28.700
I tried this out on a project of mine that uses, uses, you know,


00:11:28.700 --> 00:11:33.800
flit and, the PI project atomal to define, the, a couple


00:11:33.800 --> 00:11:35.280
pinned versions of things.


00:11:35.280 --> 00:11:37.520
So I wanted to check to see if they're out of date.


00:11:37.520 --> 00:11:41.360
Um, and I tried the pip review auto, to just auto update them.


00:11:41.540 --> 00:11:45.340
And now that pip has this dependency resolver,


00:11:45.340 --> 00:11:48.340
it noticed that my project had some pinned


00:11:48.340 --> 00:11:50.380
and it said, there is a new version,


00:11:50.380 --> 00:11:52.980
but there's a conflict with your project.


00:11:52.980 --> 00:11:54.380
So just be aware,


00:11:54.380 --> 00:11:56.580
you need to figure out that conflict on your own.


00:11:56.580 --> 00:11:57.780
- Oh, interesting.


00:11:57.780 --> 00:11:58.620
Okay.


00:11:58.620 --> 00:11:59.820
Yeah, yeah, very nice.


00:11:59.820 --> 00:12:02.460
Yeah, I've recently run into some issues with the resolver


00:12:02.460 --> 00:12:04.780
and the new, yeah, we've gone over that.


00:12:04.780 --> 00:12:06.300
Nice, all right.


00:12:06.300 --> 00:12:07.660
Jeremy, what's your first one?


00:12:07.660 --> 00:12:08.500
Keyboards.


00:12:08.500 --> 00:12:09.380
- My first one is keyboards.


00:12:09.380 --> 00:12:14.380
And so I have fallen well down the mechanical keyboard rabbit hole.


00:12:14.380 --> 00:12:18.020
You want a loud clackity, clackity, clackity, clack version?


00:12:18.020 --> 00:12:21.340
Just like such, yes.


00:12:21.340 --> 00:12:27.180
So I suppose the Python tie-in is first of all, like, yes, your keyboard is probably


00:12:27.180 --> 00:12:30.580
the way that the bulk of the Python gets into your computer.


00:12:30.580 --> 00:12:31.460
And so...


00:12:31.460 --> 00:12:35.500
As much as we would like to just plug up Jack straight into the brain and think


00:12:35.500 --> 00:12:36.940
code, it doesn't work that way yet.


00:12:37.660 --> 00:12:38.980
So it makes sense.


00:12:38.980 --> 00:12:40.820
So I've fallen to mechanical keyboards


00:12:40.820 --> 00:12:43.660
mostly to try and get my wrists to be less hurdy.


00:12:43.660 --> 00:12:46.600
I suppose for our viewers who are watching with their ears


00:12:46.600 --> 00:12:49.580
in the future, the listeners, if this is on audio,


00:12:49.580 --> 00:12:50.620
I've just shown you my hands.


00:12:50.620 --> 00:12:52.120
I may show you keyboards, but I'll


00:12:52.120 --> 00:12:55.140
have to remember to describe those.


00:12:55.140 --> 00:12:56.020
That's right.


00:12:56.020 --> 00:12:59.500
Have started to really love mechanical keyboards


00:12:59.500 --> 00:13:03.100
for ergonomic improvements and ability


00:13:03.100 --> 00:13:08.100
to sort of restructure the way that they work for my benefit.


00:13:08.100 --> 00:13:10.340
Most of the keyboards that you'll see connected


00:13:10.340 --> 00:13:14.020
to computers are using that, are like a flat bar shape,


00:13:14.020 --> 00:13:16.700
use QWERTY, which actually dates back to--


00:13:16.700 --> 00:13:18.620
- Everything wrong, everything wrong


00:13:18.620 --> 00:13:20.460
that you could do, right?


00:13:20.460 --> 00:13:23.900
- Do you know when QWERTY came into usage?


00:13:23.900 --> 00:13:25.500
- Yeah, I mean, very clackety, right?


00:13:25.500 --> 00:13:28.300
For the, to slow down the typewriter.


00:13:28.300 --> 00:13:32.380
- Yeah, but in, it was in 1873, and so like Civil War era.


00:13:32.380 --> 00:13:37.300
Like back in a back in, I mean, within 10 years of the first American Civil War.


00:13:37.300 --> 00:13:43.620
So when, we were still like settling our disputes with like swords on


00:13:43.620 --> 00:13:45.860
horses and, and so on.


00:13:45.860 --> 00:13:49.660
And, just like there's always a continues to be a better way of doing


00:13:49.660 --> 00:13:49.960
things.


00:13:49.960 --> 00:13:51.980
And we keep on working towards the better way.


00:13:51.980 --> 00:13:56.100
Like, the layout of keyboards is sort of a vestige of a pastime with


00:13:56.100 --> 00:13:56.980
different requirements.


00:13:56.980 --> 00:13:58.860
Kind of like wearing pants now, right?


00:13:58.860 --> 00:14:01.020
Like we used to be going out and seeing people now.


00:14:01.020 --> 00:14:02.180
Uh, shorts.


00:14:02.200 --> 00:14:03.580
>> Let the missions breathe.


00:14:03.580 --> 00:14:04.900
>> Exactly.


00:14:04.900 --> 00:14:08.660
>> Anyway, what's useful on the keyboards is,


00:14:08.660 --> 00:14:10.700
in addition to getting ergonomic benefits,


00:14:10.700 --> 00:14:12.620
you can change up your key map.


00:14:12.620 --> 00:14:15.640
Normal keyboards have maybe 100 keys on them or so,


00:14:15.640 --> 00:14:17.220
but they really have 200,


00:14:17.220 --> 00:14:18.620
maybe 300 keys.


00:14:18.620 --> 00:14:19.900
You have modifier keys.


00:14:19.900 --> 00:14:21.180
You push shift and you're like, "Okay,


00:14:21.180 --> 00:14:24.460
now all the letter keys are now capitals.


00:14:24.460 --> 00:14:27.620
The one is an exclamation point," and so on.


00:14:27.620 --> 00:14:30.620
Key maps are the ways that you can take and change


00:14:30.620 --> 00:14:33.980
the those keys to what you wanted to do.


00:14:33.980 --> 00:14:39.220
Like, yeah, if you want to say switch to Dvorak or something along those lines, right?


00:14:39.220 --> 00:14:43.980
I had a friend who taught himself to Dvorak, but seeing the QWERTY keys was so impossible for him.


00:14:43.980 --> 00:14:49.500
He shaved all of the letters off of his keyboard because it was either easier to have nothing rather than have the wrong thing there.


00:14:49.500 --> 00:14:51.940
That's that's sort of what's going on over here.


00:14:51.940 --> 00:14:56.700
This is a, a 44 key split.


00:14:56.700 --> 00:14:58.500
And you got to describe that to people.


00:14:58.500 --> 00:14:59.620
First of all, what is that?


00:14:59.620 --> 00:15:04.620
So a company keyboardio, just keyboard.io,


00:15:04.620 --> 00:15:08.380
has made a, I think a gentleman in the, yes,


00:15:08.380 --> 00:15:11.260
Pacific Northwest also made a hand-wired version of this.


00:15:11.260 --> 00:15:17.040
Jesse and Kai at keyboardio made a mass market version


00:15:17.040 --> 00:15:19.480
that's manufactured that instead of soldering


00:15:19.480 --> 00:15:21.500
everything together and ordering the pieces,


00:15:21.500 --> 00:15:25.580
you can just get a completed keyboard, which is very nice.


00:15:25.580 --> 00:15:28.340
And so for this keyboard,


00:15:28.340 --> 00:15:30.220
you're going to operate largely with layers.


00:15:30.220 --> 00:15:33.300
And so you don't see as many symbols or numbers here.


00:15:33.300 --> 00:15:37.980
And so when you hold down maybe super or function,


00:15:37.980 --> 00:15:39.980
it's going to change one of the sides to arrows,


00:15:39.980 --> 00:15:42.580
change one of the sides to a number pad,


00:15:42.580 --> 00:15:47.020
change one of the other sides to the symbols,


00:15:47.020 --> 00:15:50.080
exclamation point at symbol asterisk.


00:15:50.080 --> 00:15:53.020
And instead of reaching and twisting,


00:15:53.020 --> 00:15:54.460
like you might on a normal keyboard,


00:15:54.460 --> 00:15:56.060
where every time we thought of a new thing,


00:15:56.060 --> 00:15:57.580
you're like, oh, that the hash symbol,


00:15:57.580 --> 00:15:59.900
That's going to need to go somewhere.


00:15:59.900 --> 00:16:03.500
Well, you need to add it on and the keyboard keeps growing.


00:16:03.500 --> 00:16:06.160
Here, your hands stay in about the same position,


00:16:06.160 --> 00:16:10.840
but when you put your ring finger down on the home row,


00:16:10.840 --> 00:16:13.820
the of your left hand,


00:16:13.820 --> 00:16:17.060
the entire right side changes to different keys.


00:16:17.060 --> 00:16:21.280
The way, suppose the Python tie in there is that


00:16:21.280 --> 00:16:25.060
most of these keyboard firmwares are written in C because you


00:16:25.060 --> 00:16:30.660
the little microcontrollers under that's telling what key is what to be. But there are Python


00:16:30.660 --> 00:16:37.460
portions. And so the command line interface that QMK, this project on GitHub, quantum mechanical


00:16:37.460 --> 00:16:46.020
keyboard uses, is written in Python. Some of the tools that your key maps are sort of always in


00:16:46.020 --> 00:16:52.980
flux. And so you can evaluate the ways that you're using your keyboard. So Python can help out there


00:16:52.980 --> 00:16:54.540
to help you make a heat map of,


00:16:54.540 --> 00:16:56.920
"Okay, which keys am I pressing most frequently?


00:16:56.920 --> 00:17:00.380
Let me move those to a stronger finger."


00:17:00.380 --> 00:17:05.160
Again, because we're home in quarantine, pandemic time,


00:17:05.160 --> 00:17:09.180
it's fun to have this escape room to get yourself out of,


00:17:09.180 --> 00:17:10.600
and there's a little bit of a challenge


00:17:10.600 --> 00:17:12.820
to remember where that new key is.


00:17:12.820 --> 00:17:14.360
Or even assembling,


00:17:14.360 --> 00:17:16.780
you've got key caps coming from one place


00:17:16.780 --> 00:17:19.760
and trying to find out what new features


00:17:19.760 --> 00:17:20.900
you might be able to pull down in


00:17:20.900 --> 00:17:22.560
the firmware from GitHub on another,


00:17:22.560 --> 00:17:25.200
and folks are making different designs.


00:17:25.200 --> 00:17:27.860
You can go with split hand boards.


00:17:27.860 --> 00:17:30.060
They center that up into the interview.


00:17:30.060 --> 00:17:32.100
This is for those who are listening.


00:17:32.100 --> 00:17:34.940
RGB, KB,


00:17:34.940 --> 00:17:36.760
Sol, the like the sun.


00:17:36.760 --> 00:17:39.940
So you basically have two separate pieces.


00:17:39.940 --> 00:17:42.300
Oh, and it has LEDs. Beautiful.


00:17:42.300 --> 00:17:44.740
So you have two chunks, one for each hand.


00:17:44.740 --> 00:17:45.500
You can position them.


00:17:45.500 --> 00:17:46.900
Yes, it's for you. OK.


00:17:46.900 --> 00:17:49.760
Yeah. And so it can open up your open up your shoulders,


00:17:49.760 --> 00:17:51.840
open up your upper body a little bit.


00:17:51.840 --> 00:17:54.080
Hopefully make your wrists less hurty was the.


00:17:54.080 --> 00:18:02.040
Yeah, well, I used to I've struggled for and I gotta do math for 20 years, maybe 15 years with RSI issues.


00:18:02.040 --> 00:18:06.520
And it's mean it was to the point where I had surgery on my right hand for carpal tunnel stuff.


00:18:06.520 --> 00:18:10.800
And man, what am I going to do? I did physical therapy, it was really quite scary, actually.


00:18:10.800 --> 00:18:21.080
And I just what I did two things, I got a much, much better, more ergonomical keyboard and only use that like I never type on my laptop, because that thing is a kiss of death for my hands.


00:18:21.200 --> 00:18:32.120
And the other one is I force my I'm right handed. I force myself to become left handed for mousing because I use my right hand for the arrows and page down and insert and all that. And I figure it's already doing all that stuff might as well.


00:18:32.120 --> 00:18:33.760
Do you use one of the sideways?


00:18:33.760 --> 00:18:50.120
The I cannot find a good sideways left handed one. Oh, that's so super hard. It's tricky. Yes, I could either go vertical, or I could go left handed and left handed is working super well for me. But I'm using the little Microsoft ergonomic


00:18:50.920 --> 00:18:53.320
Travel and I love that this thing goes with me everywhere.


00:18:53.320 --> 00:18:54.600
I don't go anywhere without it.


00:18:54.600 --> 00:18:56.920
So yeah, I think that's an important thing.


00:18:56.920 --> 00:18:57.480
You're good.


00:18:57.480 --> 00:19:00.280
The best way to fix it is to touch your computer less.


00:19:00.280 --> 00:19:02.760
But if that's not an option.


00:19:02.760 --> 00:19:06.040
So I mean, the other things that have beat my hands up


00:19:06.040 --> 00:19:07.640
and I'm trying to be better about are


00:19:07.640 --> 00:19:10.120
if you hold your phone and you just scroll


00:19:10.120 --> 00:19:11.960
and you scroll some more and you scroll some more,


00:19:11.960 --> 00:19:13.560
you can do it with your left hand instead.


00:19:13.560 --> 00:19:17.400
Or you can try and not look into the abyss so often.


00:19:17.400 --> 00:19:19.880
Yeah, I've used voice typing.


00:19:19.880 --> 00:19:20.600
Go ahead, Brian.


00:19:20.600 --> 00:19:25.640
doing a lot of less doom scrolling now than I used to. So yeah, I think they're less crazy.


00:19:25.640 --> 00:19:29.320
Brian, what do you got for your setup? You just type on your MacBook or you got something


00:19:29.320 --> 00:19:29.880
better?


00:19:29.880 --> 00:19:30.360
Me?


00:19:30.360 --> 00:19:30.760
Yeah.


00:19:30.760 --> 00:19:32.200
Oh, Kinesis.


00:19:32.200 --> 00:19:34.920
Oh my gosh, you are full on over there, dude.


00:19:34.920 --> 00:19:36.280
Yeah, so...


00:19:36.280 --> 00:19:36.600
Okay.


00:19:36.600 --> 00:19:37.480
Dishes. Yeah.


00:19:37.480 --> 00:19:37.800
So I've...


00:19:37.800 --> 00:19:40.920
Yeah, those are like the hollowed out, like typing in a crater.


00:19:40.920 --> 00:19:44.600
Yeah. So I've been using Kinesis for like 30 years, 25 years.


00:19:44.600 --> 00:19:44.920
Wow.


00:19:45.800 --> 00:19:50.720
And similar, I had problems with my arms.


00:19:50.720 --> 00:19:53.900
And I was just a couple of years into my career.


00:19:53.900 --> 00:19:56.960
And I'm like, oh my god, I finally get a programming job


00:19:56.960 --> 00:19:59.360
and I can't do it anymore.


00:19:59.360 --> 00:20:01.520
But I switched to the left-handed mouse.


00:20:01.520 --> 00:20:03.920
And now I don't even think about it.


00:20:03.920 --> 00:20:07.040
Some people say, I don't switch the mappings.


00:20:07.040 --> 00:20:08.380
I don't switch the left to right.


00:20:08.380 --> 00:20:11.320
I just move the mouse over and use it with my left hand.


00:20:11.320 --> 00:20:13.120
And then also the kinesis.


00:20:13.120 --> 00:20:17.680
And then when the whole mechanical keyboard thing started,


00:20:17.680 --> 00:20:18.960
people were talking about that.


00:20:18.960 --> 00:20:20.600
Like, what's all this about?


00:20:20.600 --> 00:20:22.160
And then I found out that the Kinesis


00:20:22.160 --> 00:20:25.160
has been mechanical since it started.


00:20:25.160 --> 00:20:26.200
Yeah.


00:20:26.200 --> 00:20:28.920
Kinesis is definitely an interesting one.


00:20:28.920 --> 00:20:32.320
Although I think I want to get a new one because the key,


00:20:32.320 --> 00:20:34.800
whatever the mechanics behind it,


00:20:34.800 --> 00:20:38.080
are the wrong color or something.


00:20:38.080 --> 00:20:40.640
I want to get ones that I have to push down a little harder


00:20:40.640 --> 00:20:43.240
'cause I find that I rest my hands on my keyboard


00:20:43.240 --> 00:20:45.040
and it'll start typing stuff.


00:20:45.040 --> 00:20:49.240
So I'd like to have it be more hard to push down.


00:20:49.240 --> 00:20:51.320
- I think there's probably three things that you can do.


00:20:51.320 --> 00:20:53.480
You can either crack your switches open


00:20:53.480 --> 00:20:55.200
and put in heavier springs.


00:20:55.200 --> 00:20:58.080
You can get a key switch puller


00:20:58.080 --> 00:21:00.760
and pull out the switches and plug in.


00:21:00.760 --> 00:21:02.680
Depends if they're hot swappable


00:21:02.680 --> 00:21:04.440
or if they're soldered down into the board.


00:21:04.440 --> 00:21:08.040
And so I am not certain how that one's constructed,


00:21:08.040 --> 00:21:13.880
But oftentimes when there's a, if there's a greater investment in getting the board in the first place,


00:21:13.880 --> 00:21:17.320
like the ErgoDex ones are hot swappable.


00:21:17.320 --> 00:21:18.800
So you can take a puller in.


00:21:18.800 --> 00:21:24.320
I have not in front of me, but over and over in a bin, different key switches that I've tried.


00:21:24.320 --> 00:21:29.600
Some that are quieter, some that are louder, some that are heavier, some, some that are really light.


00:21:29.600 --> 00:21:33.680
And yeah, eventually you figure out the sort of the Goldilocks situation.


00:21:33.840 --> 00:21:37.340
And instead of a keyboard that's made for to sell millions and millions of units,


00:21:37.340 --> 00:21:39.900
you've got one that maybe are out of billions of people.


00:21:39.900 --> 00:21:42.240
There's maybe three like it that are just like you.


00:21:42.240 --> 00:21:44.800
Fantastic. Yeah.


00:21:44.800 --> 00:21:48.940
Magnus Carlsen, Magnus Carlsen says he has a old


00:21:48.940 --> 00:21:51.240
ergo docks over in the corner right on.


00:21:51.240 --> 00:21:52.700
Why is it in the corner?


00:21:52.700 --> 00:21:54.740
Don't put baby in the corner.


00:21:54.740 --> 00:21:55.840
Yes. Get those.


00:21:55.840 --> 00:21:56.940
Love those wrists.


00:21:56.940 --> 00:21:57.940
Yeah, the one that I love.


00:21:57.940 --> 00:22:01.100
The thing I love about this one is it has such short keystrokes


00:22:01.100 --> 00:22:03.800
like you barely have to move your fingers, which to me, a lot of these


00:22:03.800 --> 00:22:05.400
really nice ergonomic ones.


00:22:05.400 --> 00:22:06.920
I feel like you've got to move them a lot,


00:22:06.920 --> 00:22:07.880
which I don't know.


00:22:07.880 --> 00:22:08.760
It's always a balance.


00:22:08.760 --> 00:22:09.640
This one works well for me,


00:22:09.640 --> 00:22:11.840
but all of these things are super fascinating.


00:22:11.840 --> 00:22:15.280
- Yeah, there's switches with adjustable travel.


00:22:15.280 --> 00:22:17.920
And so over, you can cut probably more


00:22:17.920 --> 00:22:19.640
than a millimeter out of it going from two


00:22:19.640 --> 00:22:22.600
down to either one or maybe even 0.8.


00:22:22.600 --> 00:22:23.440
- Oh wow.


00:22:23.440 --> 00:22:26.880
- So you can tune it exactly to what you're after.


00:22:26.880 --> 00:22:28.240
- I tried yours, Michael.


00:22:28.240 --> 00:22:32.320
I have one of those, whatever that you've got.


00:22:32.320 --> 00:22:35.000
- Yeah, the scoped ergonomic or whatever it's called.


00:22:35.000 --> 00:22:37.520
- But it's a Bluetooth one


00:22:37.520 --> 00:22:39.380
and I can't do Bluetooth keyboards.


00:22:39.380 --> 00:22:42.180
The Bluetooth delay gets me.


00:22:42.180 --> 00:22:43.820
You'd think that I wouldn't be able to notice,


00:22:43.820 --> 00:22:46.320
but I notice and I don't like it.


00:22:46.320 --> 00:22:48.600
- Yeah, wouldn't it be nice if you could buy keyboards,


00:22:48.600 --> 00:22:49.440
wires?


00:22:49.440 --> 00:22:53.320
- And then I suppose we didn't talk about mousing either.


00:22:53.320 --> 00:22:55.040
We talked about like the actual device,


00:22:55.040 --> 00:22:59.800
but in QMK, that firmware and other keyboard firmwares,


00:22:59.800 --> 00:23:01.040
if you hold down a button,


00:23:01.040 --> 00:23:03.480
the other side of your keyboard can become a mouse.


00:23:03.480 --> 00:23:05.600
And so both any of your keyboard keys


00:23:05.600 --> 00:23:08.160
can make it travel diagonally or up and down


00:23:08.160 --> 00:23:09.440
or can be used as click.


00:23:09.440 --> 00:23:12.200
And so you can replace your, especially for traveling,


00:23:12.200 --> 00:23:15.580
you can replace your mouse with being able to navigate,


00:23:15.580 --> 00:23:18.200
move the mouse around with the keyboard.


00:23:18.200 --> 00:23:19.040
- Sounds awesome.


00:23:19.040 --> 00:23:19.860
If you could ever fly again,


00:23:19.860 --> 00:23:21.200
I could see setting a little laptop


00:23:21.200 --> 00:23:24.020
on like the little fold down tray,


00:23:24.020 --> 00:23:25.080
put that keyboard on top


00:23:25.080 --> 00:23:26.920
and you're good to actually get some stuff done.


00:23:26.920 --> 00:23:28.580
All right, now before we get on the next item,


00:23:28.580 --> 00:23:31.140
Let me tell you all about our sponsor for this week,


00:23:31.140 --> 00:23:31.980
Datadog.


00:23:31.980 --> 00:23:34.140
Thank you Datadog for sponsoring the show.


00:23:34.140 --> 00:23:36.940
If you're having trouble visualizing latency


00:23:36.940 --> 00:23:38.940
or CPU or memory bottlenecks in your apps


00:23:38.940 --> 00:23:40.540
and you're not sure where it's coming from


00:23:40.540 --> 00:23:42.180
or how to solve it, check out Datadog.


00:23:42.180 --> 00:23:44.180
They seamlessly correlate logs


00:23:44.180 --> 00:23:46.780
and traces across individual requests


00:23:46.780 --> 00:23:49.020
and you can quickly troubleshoot your Python app.


00:23:49.020 --> 00:23:51.380
Plus their continuous profiler allows you


00:23:51.380 --> 00:23:54.460
to find the most memory and CPU consuming parts


00:23:54.460 --> 00:23:56.660
of your production code continuously.


00:23:56.660 --> 00:23:59.380
Just run it all the time, minimum overhead, pretty awesome.


00:23:59.380 --> 00:24:01.300
You'll be the hero that got that app back on track


00:24:01.300 --> 00:24:02.140
at your company.


00:24:02.140 --> 00:24:03.540
Get started today with a free trial


00:24:03.540 --> 00:24:05.700
at pythonbytes.fm/datadog,


00:24:05.700 --> 00:24:08.460
or just click the link in your podcast player show notes.


00:24:08.460 --> 00:24:10.580
Brian, let's talk about logos.


00:24:10.580 --> 00:24:11.420
- Sure.


00:24:11.420 --> 00:24:12.260
Oh, I appreciate it.


00:24:12.260 --> 00:24:13.700
- I tried to pull this up,


00:24:13.700 --> 00:24:16.220
but we're suffering some downtime.


00:24:16.220 --> 00:24:18.060
There we go, there we go.


00:24:18.060 --> 00:24:22.340
- So there's a article called "Reinventing the Python Logo,"


00:24:22.340 --> 00:24:25.540
and I thought it was interesting mostly


00:24:25.540 --> 00:24:30.780
by the about the history. I guess I hadn't I hadn't thought about it too much. So the


00:24:30.780 --> 00:24:35.340
history really is there have been only two Python logos, the original one, which I'm


00:24:35.340 --> 00:24:40.420
not sure when that came into existence. But it's just sort of some, it looks like a bunch


00:24:40.420 --> 00:24:45.940
of marshmallows stuck together or something. It's, it's not like marshmallows. I get light


00:24:45.940 --> 00:24:50.680
bright vibes. Light, bright. Oh, yeah, yeah, yeah, you're right. Yeah. So it's like white


00:24:50.680 --> 00:24:56.400
dots and with like black dots around the outside making the Python word and


00:24:56.400 --> 00:25:02.300
really that's it and apparently that passed for a while and then the


00:25:02.300 --> 00:25:09.600
current logo came into into play in 2006 by and it was designed by Tim Parkland


00:25:09.600 --> 00:25:16.800
and it's the logo that we have right now and I was you know I kind of got the the


00:25:16.800 --> 00:25:23.640
a Mayan vibe from the Python icon also, or the two Pythons.


00:25:23.640 --> 00:25:25.200
But there's a quote from Tim.


00:25:25.200 --> 00:25:27.400
It said, "The logo is actually based


00:25:27.400 --> 00:25:30.360
on a Mayan representation of snakes, which is very often


00:25:30.360 --> 00:25:31.600
represented only--


00:25:31.600 --> 00:25:34.520
represent only the head and perhaps a short length of tail.


00:25:34.520 --> 00:25:36.560
The structure of the snake represents


00:25:36.560 --> 00:25:40.920
the natural coiling nesting of a snake as seen on the side."


00:25:40.920 --> 00:25:41.420
I don't know.


00:25:41.420 --> 00:25:44.280
But having the symmetry also kind of


00:25:44.280 --> 00:25:47.280
reminds me of a yin-yang symbol or something.


00:25:47.280 --> 00:25:49.340
Anyway, I like it, it's good.


00:25:49.340 --> 00:25:54.340
But the article then goes on to talk to a designer


00:25:54.340 --> 00:25:57.500
who came up with a possible change


00:25:57.500 --> 00:26:01.080
and proposed a change in 2020, Jessica Williamson,


00:26:01.080 --> 00:26:04.080
and it's pretty.


00:26:04.080 --> 00:26:05.760
But I didn't really read the rest,


00:26:05.760 --> 00:26:07.520
I just thought it was curious to think about,


00:26:07.520 --> 00:26:08.580
should we change it?


00:26:08.580 --> 00:26:10.520
And I guess I'm on the side of,


00:26:10.520 --> 00:26:11.720
I kind of like the way it is,


00:26:11.720 --> 00:26:13.400
but I was curious what you guys thought.


00:26:13.400 --> 00:26:23.280
I mean, I've grown so used to the other one, but I try not to be a curmudgeon and like


00:26:23.280 --> 00:26:28.920
new things. I know Burger King just did their rebrand, and even though I'm not on the Whopper


00:26:28.920 --> 00:26:34.140
train, I'm like, "Yeah, you get something fresh." I suppose Python, even, there's going


00:26:34.140 --> 00:26:40.160
to be more people using it in the future than have ever used it up to this point. And so,


00:26:40.160 --> 00:26:42.880
what the existing folks think is less of a concern


00:26:42.880 --> 00:26:45.160
if it feels newer or more welcoming.


00:26:45.160 --> 00:26:47.240
- Yeah, if it pulls people in


00:26:47.240 --> 00:26:48.080
and it makes them feel like,


00:26:48.080 --> 00:26:49.320
oh, this is a fresh language, right?


00:26:49.320 --> 00:26:50.720
This is like one of the most popular,


00:26:50.720 --> 00:26:52.140
fastest growing languages in the world.


00:26:52.140 --> 00:26:54.000
Of course it has this logo.


00:26:54.000 --> 00:26:55.240
I don't dislike it.


00:26:55.240 --> 00:26:56.060
I think it's pretty nice.


00:26:56.060 --> 00:26:57.080
I like the colors.


00:26:57.080 --> 00:27:00.060
I like the flair, but I feel like those gradients,


00:27:00.060 --> 00:27:01.520
those gradients are hard to combine.


00:27:01.520 --> 00:27:03.560
Whereas like this sort of flat color,


00:27:03.560 --> 00:27:04.940
you can put it in with other things.


00:27:04.940 --> 00:27:06.800
But like, imagine like the thing you're trying


00:27:06.800 --> 00:27:08.480
to put the logo on also as a gradient.


00:27:08.480 --> 00:27:09.880
Then you got gradients on gradients.


00:27:09.880 --> 00:27:12.440
It just, it seems a little slightly less versatile.


00:27:12.440 --> 00:27:13.120
I like that.


00:27:13.120 --> 00:27:17.640
So, what I would just like to point out though, is there are like rules and


00:27:17.640 --> 00:27:22.920
laws about this logo in ways that are way beyond what the normal person would think.


00:27:22.920 --> 00:27:26.960
For example, I used to have a logo that looked like the main Python


00:27:26.960 --> 00:27:28.960
logo, but it had earbuds on.


00:27:28.960 --> 00:27:31.080
However, it didn't have those little holes, right?


00:27:31.080 --> 00:27:32.400
You see those little holes, there's the eyes.


00:27:32.400 --> 00:27:33.880
It didn't happen to have those.


00:27:33.880 --> 00:27:39.080
Well, I happened to be on vacation at a beach with my family and got a


00:27:39.280 --> 00:27:42.680
cease and desist letter from the PSF because I was violating their trademark.


00:27:42.680 --> 00:27:43.280
Oh, wow.


00:27:43.280 --> 00:27:46.180
Because I used a logo that wasn't an exact,


00:27:46.180 --> 00:27:48.480
it was an alteration of the Python logo,


00:27:48.480 --> 00:27:49.980
not the exact one.


00:27:49.980 --> 00:27:50.680
Fair.


00:27:50.680 --> 00:27:54.280
I kind of felt like, you know, it could have been a little nicer


00:27:54.280 --> 00:27:57.080
rather than a, you know, full-on legal, like,


00:27:57.080 --> 00:27:58.780
you must stop this now or else.


00:27:58.780 --> 00:28:00.880
We just have a conversation instead of started that way.


00:28:00.880 --> 00:28:03.480
Well, those are one of those things where if you don't,


00:28:03.480 --> 00:28:05.180
if you don't defend it, then they have,


00:28:05.180 --> 00:28:07.480
you have a case that you can, you can start to lose it


00:28:07.480 --> 00:28:08.380
as to where you like.


00:28:08.380 --> 00:28:10.480
Well, you never you never made a case of it before,


00:28:10.480 --> 00:28:11.720
and so you you kind of have to.


00:28:11.720 --> 00:28:12.780
Yeah, exactly.


00:28:12.780 --> 00:28:14.080
Don't separate the snakes.


00:28:14.080 --> 00:28:15.420
Don't make one snake bigger.


00:28:15.420 --> 00:28:15.980
You can't.


00:28:15.980 --> 00:28:16.480
Right.


00:28:16.480 --> 00:28:19.840
When I put my app in the app store for the training courses,


00:28:19.840 --> 00:28:23.480
I had to go back and forth and prove that my my new logo,


00:28:23.480 --> 00:28:27.380
which is approved by the PSF, I actually had permission to do that.


00:28:27.380 --> 00:28:31.120
And yet, have you all looked at what is in the app stores?


00:28:31.120 --> 00:28:32.120
I they are.


00:28:32.120 --> 00:28:33.820
They are change of colors.


00:28:33.820 --> 00:28:37.180
They are, you know, funky redesigns.


00:28:37.180 --> 00:28:40.380
that are like these weird things are slightly different shape like this one.


00:28:40.380 --> 00:28:41.980
Oh, not OK.


00:28:41.980 --> 00:28:43.620
There's just a couple of pages.


00:28:43.620 --> 00:28:46.660
There's like 15 companies violating the trademark.


00:28:46.660 --> 00:28:50.360
And yet with these all presently here, I still had to fight for a week


00:28:50.360 --> 00:28:52.660
with the app store people to allow my approved one in there.


00:28:52.660 --> 00:28:56.160
Anyway, the exercises one is not is not OK.


00:28:56.160 --> 00:28:58.900
The one with the barbell.


00:28:58.900 --> 00:29:01.460
Yeah, the one is totally not good.


00:29:01.460 --> 00:29:02.760
They're all not good.


00:29:02.760 --> 00:29:05.440
I'll put the link in the show notes for those of you guys who can't see it.


00:29:05.500 --> 00:29:08.460
But boy, it's long story short,


00:29:08.460 --> 00:29:12.060
there's a lot around this logo stuff that is just,


00:29:12.060 --> 00:29:13.260
oh, that's cute, right?


00:29:13.260 --> 00:29:15.940
It's quite a bit of stuff around it legally speaking.


00:29:15.940 --> 00:29:19.980
>> Yeah. The rules aren't really that complicated though.


00:29:19.980 --> 00:29:24.300
They're mostly the logo has to appear in the same colors and it


00:29:24.300 --> 00:29:28.820
has to be visible and in its whole without something in front of it.


00:29:28.820 --> 00:29:31.260
>> You can't shift though, it can't be squished.


00:29:31.260 --> 00:29:34.060
Mine, the perspective was slightly off for some reason,


00:29:34.060 --> 00:29:35.380
and that was also part of the complaint.


00:29:35.380 --> 00:29:37.700
- And they're also fairly good about like,


00:29:37.700 --> 00:29:40.420
you can send stuff to them ahead of time and say,


00:29:40.420 --> 00:29:42.620
this is what I'm thinking about doing, is this okay?


00:29:42.620 --> 00:29:45.280
And you can get pre-approval for stuff.


00:29:45.280 --> 00:29:47.040
- Yeah, so now mine is approved


00:29:47.040 --> 00:29:48.060
and I feel much better about it.


00:29:48.060 --> 00:29:50.380
But I had no idea, I just came out of the blue.


00:29:50.380 --> 00:29:52.220
So there it is.


00:29:52.220 --> 00:29:54.060
But if anyone wants to start forcing those,


00:29:54.060 --> 00:29:55.540
they should go have a look at the app stores,


00:29:55.540 --> 00:29:56.540
they're out of control.


00:29:56.540 --> 00:30:00.100
All right, what's not out of control is somewhat related


00:30:00.100 --> 00:30:02.420
is pypi.org, it's pretty awesome, right?


00:30:02.420 --> 00:30:05.820
So we go to PyPI and our use pip it indirectly


00:30:05.820 --> 00:30:08.660
behind the scenes goes to PyPI and does all of its magic.


00:30:08.660 --> 00:30:10.340
You pip install this, install that.


00:30:10.340 --> 00:30:12.480
And it would be great if we could put,


00:30:12.480 --> 00:30:14.580
use that as a mechanism to communicate


00:30:14.580 --> 00:30:17.660
across teams or companies, right?


00:30:17.660 --> 00:30:21.580
One team built some sort of API interface layer


00:30:21.580 --> 00:30:24.020
and some other part wants to consume it at your company.


00:30:24.020 --> 00:30:25.520
But you probably don't want to put that


00:30:25.520 --> 00:30:27.140
in the public repository.


00:30:27.140 --> 00:30:28.500
It might have secrets.


00:30:28.500 --> 00:30:31.300
It might just be inappropriate, all those kinds of things.


00:30:31.300 --> 00:30:33.740
So it would be nice to have your very own, right?


00:30:33.740 --> 00:30:35.100
- Yeah, absolutely.


00:30:35.100 --> 00:30:39.620
- Yeah, so introducing AWS Lambda PyPI.


00:30:39.620 --> 00:30:42.460
So it takes PyPI Cloud,


00:30:42.460 --> 00:30:46.060
which is a way to do self-hosting PyPI,


00:30:46.060 --> 00:30:47.900
basically a private repository,


00:30:47.900 --> 00:30:51.360
but then lets you run that over AWS Lambda


00:30:51.360 --> 00:30:52.420
in a serverless way.


00:30:52.420 --> 00:30:54.580
So it's basically free unless it's being used


00:30:54.580 --> 00:30:56.740
and there's a ton of free requests you get at AWS Lambda


00:30:56.740 --> 00:30:57.900
before you get charged


00:30:57.900 --> 00:31:00.100
and you don't have to have servers to maintain.


00:31:00.100 --> 00:31:03.900
So you can basically set up PyPI Cloud to run automatically


00:31:03.900 --> 00:31:07.300
as an AWS Lambda, which then you can lock down.


00:31:07.300 --> 00:31:08.380
That's pretty awesome, right?


00:31:08.380 --> 00:31:09.220
- Yeah. - Yeah.


00:31:09.220 --> 00:31:13.380
So there's not a whole lot to talk about it.


00:31:13.380 --> 00:31:16.700
- You know if it acts like a caching server as well,


00:31:16.700 --> 00:31:18.060
so can you get-


00:31:18.060 --> 00:31:19.000
- You probably could.


00:31:19.000 --> 00:31:22.140
You probably could do that with PyPI Cloud.


00:31:22.140 --> 00:31:24.940
It's just rehosting PyPI Cloud, which I'm guessing it can.


00:31:24.940 --> 00:31:27.000
I don't know for certain, but so you're saying like,


00:31:27.000 --> 00:31:29.500
you'd like to just set that as the global destination.


00:31:29.500 --> 00:31:32.500
- Oh right, I wanted to store my private stuff.


00:31:32.500 --> 00:31:35.060
- Yeah, you wanted to pull the public stuff in plus,


00:31:35.060 --> 00:31:37.500
like sort of merge your private stuff with it, right?


00:31:37.500 --> 00:31:38.340
- Yeah.


00:31:38.340 --> 00:31:39.160
- I haven't tried that,


00:31:39.160 --> 00:31:41.020
but I suspect PyPI Cloud does allow that.


00:31:41.020 --> 00:31:45.200
So the security wise, it says the session keys


00:31:45.200 --> 00:31:47.300
are auto-generated and stored in a secret.


00:31:47.300 --> 00:31:51.220
The server configuration contains those generated on the fly.


00:31:51.220 --> 00:31:52.820
The Lambda functions can be limited


00:31:52.820 --> 00:31:54.500
to accessing only what it needs.


00:31:54.500 --> 00:31:57.260
And then of course you can configure PyPI Cloud


00:31:57.260 --> 00:31:59.940
to display nothing to non-authenticated users.


00:31:59.940 --> 00:32:01.540
So you basically have to log into it


00:32:01.540 --> 00:32:02.420
and then you're good to go.


00:32:02.420 --> 00:32:04.180
So I think this is a pretty neat solution.


00:32:04.180 --> 00:32:05.700
I mean, you've been able to do stuff


00:32:05.700 --> 00:32:07.060
with PyPI Cloud already,


00:32:07.060 --> 00:32:10.060
but being able to put it in a cloud for free at scale


00:32:10.060 --> 00:32:10.900
is pretty neat.


00:32:10.900 --> 00:32:11.720
- Yeah.


00:32:11.720 --> 00:32:12.560
- All right.


00:32:12.560 --> 00:32:16.060
Next up we have not just the basics, but beyond.


00:32:16.060 --> 00:32:16.900
- Yeah.


00:32:16.900 --> 00:32:21.740
So if you've read some of L. Sweigart's other Python books,


00:32:21.740 --> 00:32:25.600
there's a new one, I believe dropped January.


00:32:25.600 --> 00:32:29.360
that's the month that we're in, can grab from NoStarchPress


00:32:29.360 --> 00:32:33.120
or can give a look over at the URL above.


00:32:33.120 --> 00:32:37.280
And so many other books and references are like,


00:32:37.280 --> 00:32:38.560
here's how to do the thing, go on.


00:32:38.560 --> 00:32:40.000
Here's how to do the thing, go on.


00:32:40.000 --> 00:32:42.960
And when looking through beyond the basic stuff,


00:32:42.960 --> 00:32:46.160
a lot of it is a look through the Python lens,


00:32:46.160 --> 00:32:49.080
but at being a better developer and being,


00:32:49.080 --> 00:32:51.800
I don't think he said, but for myself,


00:32:51.800 --> 00:32:54.160
definitely like a less feral developer.


00:32:54.160 --> 00:32:57.160
And so, so often it's easy to get into that.


00:32:57.160 --> 00:32:58.720
- Give us your interpretation of that.


00:32:58.720 --> 00:33:00.640
That's like, you've just been out on your own,


00:33:00.640 --> 00:33:01.920
you've figured out how to make it work,


00:33:01.920 --> 00:33:04.600
but you don't necessarily follow the community.


00:33:04.600 --> 00:33:09.040
- Raised by technical wolves.


00:33:09.040 --> 00:33:11.640
So, so often when you-


00:33:11.640 --> 00:33:13.600
- I love that way of thinking, that's awesome.


00:33:13.600 --> 00:33:16.080
- When you join a team that's been


00:33:16.080 --> 00:33:17.520
either working together already


00:33:17.520 --> 00:33:20.160
or has been in industry for a while,


00:33:20.160 --> 00:33:22.800
there's those things that you don't know that you're doing


00:33:22.800 --> 00:33:27.800
that make you look less polished,


00:33:27.800 --> 00:33:30.500
whether that's in a code interview.


00:33:30.500 --> 00:33:33.800
And so when Al goes over,


00:33:33.800 --> 00:33:36.100
what are reasonable variable names?


00:33:36.100 --> 00:33:38.060
What are code smells?


00:33:38.060 --> 00:33:41.860
Talking about like the duplicating code or what are...


00:33:41.860 --> 00:33:44.100
So you can write something that works very easily,


00:33:44.100 --> 00:33:48.500
but here are things that it's gonna be so much nicer


00:33:48.500 --> 00:33:49.940
to hear from Al, like,


00:33:49.940 --> 00:33:52.200
"Hey, you probably don't wanna do this,"


00:33:52.200 --> 00:33:56.800
as opposed to hearing from a teammate in a code review, like, "What is 86,000?"


00:33:56.800 --> 00:34:00.320
You're like, "Oh, that's the number of seconds when you multiply by 60."


00:34:00.320 --> 00:34:03.880
And you do the, yeah, I guess back to the magic number earlier.


00:34:03.880 --> 00:34:06.360
You're like, "Well, why is that bad?


00:34:06.360 --> 00:34:07.360
I did the math already.


00:34:07.360 --> 00:34:09.240
It doesn't make sense to do the math the extra times."


00:34:09.240 --> 00:34:12.760
But you're like, "Well, someone's going to have to come behind you and read that later.


00:34:12.760 --> 00:34:16.240
And no one hates you as much as future you hates you, because it's probably going to


00:34:16.240 --> 00:34:20.760
be you who comes behind you and reads that later and doesn't remember."


00:34:20.760 --> 00:34:25.920
And so, yeah, chapter after chapter, it's just so many things that are like, "Oh," again,


00:34:25.920 --> 00:34:28.040
like code formatting.


00:34:28.040 --> 00:34:34.720
If you haven't been using formatting and linting prior, and makes it so much easier to interact


00:34:34.720 --> 00:34:39.400
with other folks and sort of helps you knock those rough edges off that aren't necessarily


00:34:39.400 --> 00:34:44.680
like, "This is how you Python, but this is how you become a good open source contributor


00:34:44.680 --> 00:34:49.960
citizen," or, "These are the things that you need to know to work, but you didn't know


00:34:49.960 --> 00:34:50.960
you needed to know.


00:34:50.960 --> 00:34:51.960
- Right, right.


00:34:51.960 --> 00:34:55.440
Even probably things like continuous integration and stuff you should probably know or get


00:34:55.440 --> 00:34:59.440
or PRs or all those, like if you've kind of been doing it on your own, like you can in


00:34:59.440 --> 00:35:02.480
some organizations do, but many people don't create PRs for themselves.


00:35:02.480 --> 00:35:05.240
They just check in and carry on, right?


00:35:05.240 --> 00:35:06.240
So those kinds of things.


00:35:06.240 --> 00:35:07.240
Yeah, this is great.


00:35:07.240 --> 00:35:11.240
And you can read it online or with the link in the show notes, or you can go buy it online.


00:35:11.240 --> 00:35:12.960
- Yeah, it's on NoStarch.


00:35:12.960 --> 00:35:16.600
You can either get like the ebook, you can get printed copy, whatever you're into.


00:35:16.600 --> 00:35:19.840
>> Yeah, and I think that I was just looking through the code smells one,


00:35:19.840 --> 00:35:23.320
even people just review that, anything else.


00:35:23.320 --> 00:35:24.840
This is some pretty good stuff.


00:35:24.840 --> 00:35:27.800
>> Yeah, I love the idea of code smells so much.


00:35:27.800 --> 00:35:29.280
Because it's not wrong,


00:35:29.280 --> 00:35:31.000
just turns you know that,


00:35:31.000 --> 00:35:34.400
"Ew, this isn't so good, but it does work."


00:35:34.400 --> 00:35:40.720
>> Yeah. One of the big ones that I run into at work even a lot is commented out code.


00:35:40.720 --> 00:35:43.160
People comment something out and then check it in.


00:35:43.160 --> 00:35:44.840
If it's dead, delete it.


00:35:44.840 --> 00:35:46.000
Well, we might need it later.


00:35:46.000 --> 00:35:48.800
That's our version controls for we can go back and get it later.


00:35:48.800 --> 00:35:50.540
>> If you really, really, really don't lose it,


00:35:50.540 --> 00:35:53.600
tag it or something or maybe create a branch with a name,


00:35:53.600 --> 00:35:55.540
but just don't leave it in there. Come on.


00:35:55.540 --> 00:35:56.040
>> Yeah.


00:35:56.040 --> 00:35:57.820
>> Yeah, or worse, don't comment it out,


00:35:57.820 --> 00:35:59.940
just stop using it, but don't delete it either.


00:35:59.940 --> 00:36:01.000
>> Or dead functions.


00:36:01.000 --> 00:36:03.380
>> Yeah, a dead function or dead class. Oh my goodness.


00:36:03.380 --> 00:36:05.140
>> Oh yeah, I'll see that occasionally.


00:36:05.140 --> 00:36:09.220
Somebody will rename a function like function foo old.


00:36:09.220 --> 00:36:12.040
Why did you do that? Well, we're not using it right now.


00:36:12.040 --> 00:36:14.260
There's better ways to remove some.


00:36:14.260 --> 00:36:15.700
That hoarder type code base.


00:36:15.700 --> 00:36:16.540
(laughing)


00:36:16.540 --> 00:36:18.020
- Exactly, exactly.


00:36:18.020 --> 00:36:19.820
I don't have a problem, I just have 23 cats.


00:36:19.820 --> 00:36:20.980
It's gonna be all good.


00:36:20.980 --> 00:36:22.540
(laughing)


00:36:22.540 --> 00:36:23.900
All right, oh, awesome.


00:36:23.900 --> 00:36:26.500
Well, so let's talk about just a few extra things


00:36:26.500 --> 00:36:27.420
that he wants to throw out there.


00:36:27.420 --> 00:36:29.060
Brian, anything else?


00:36:29.060 --> 00:36:33.260
- We got a feedback, sorry, I can't remember the guy's name,


00:36:33.260 --> 00:36:36.500
but in episode 208, we covered pipchill,


00:36:36.500 --> 00:36:39.060
which is a way to list out your dependencies,


00:36:39.060 --> 00:36:40.700
but only the top level ones.


00:36:40.700 --> 00:36:44.220
And I made a comment that it'd be cool to have this,


00:36:44.220 --> 00:36:45.960
but not have it list pip Chill


00:36:45.960 --> 00:36:48.060
'cause I only installed it for this.


00:36:48.060 --> 00:36:50.420
And so yeah, he added a no chill option.


00:36:50.420 --> 00:36:51.260
So that's nice.


00:36:51.260 --> 00:36:52.340
(laughing)


00:36:52.340 --> 00:36:54.340
- And self-aware pip Chill.


00:36:54.340 --> 00:36:55.740
- And then just before this,


00:36:55.740 --> 00:36:59.860
I was on these Microsoft Developer Twitch channel.


00:36:59.860 --> 00:37:01.780
So that's a fun thing,


00:37:01.780 --> 00:37:04.960
the Microsoft Developer Twitch TV, they do it weekly,


00:37:04.960 --> 00:37:06.500
but don't watch them


00:37:06.500 --> 00:37:08.380
because you'll collide with watching us.


00:37:08.380 --> 00:37:09.540
So, you know.


00:37:09.540 --> 00:37:11.300
- Oh yeah, well, they need to move their time


00:37:11.300 --> 00:37:12.140
or something like that.


00:37:12.140 --> 00:37:14.340
(laughing)


00:37:14.340 --> 00:37:17.220
- It's both recorded, it's all good, it's all good.


00:37:17.220 --> 00:37:20.620
Oh, and yeah, PyLang says he's been using PipJill.


00:37:20.620 --> 00:37:21.900
So cool, cool, cool.


00:37:21.900 --> 00:37:23.020
Yeah, I love the idea of it,


00:37:23.020 --> 00:37:25.380
but I haven't yet made it into my workflow.


00:37:25.380 --> 00:37:26.580
Jeremy, you got any quick extras


00:37:26.580 --> 00:37:27.420
you wanna throw out there?


00:37:27.420 --> 00:37:28.260
We covered it all.


00:37:28.260 --> 00:37:29.820
- Yeah, I think the other thing was


00:37:29.820 --> 00:37:30.660
Brian's Twitter I looked at,


00:37:30.660 --> 00:37:32.100
and it was either today or yesterday,


00:37:32.100 --> 00:37:33.540
that there was the joke about


00:37:33.540 --> 00:37:36.100
the machine learning Twitter bots.


00:37:36.100 --> 00:37:38.940
And yeah, if like any of those


00:37:38.940 --> 00:37:40.860
that can be cooked up, always a good time.


00:37:40.860 --> 00:37:45.900
It made me think of one of the previous times I was in Portland at one of the conferences.


00:37:45.900 --> 00:37:54.220
There was talks on Nate Smith had made prosaic, which is a Python for doing cut and paste


00:37:54.220 --> 00:37:55.220
poetry.


00:37:55.220 --> 00:37:59.620
And so you have any corpus of information you can take and chunk it down.


00:37:59.620 --> 00:38:01.020
That's paired with a Twitter bot.


00:38:01.020 --> 00:38:03.700
So I went to look back because it's been a while.


00:38:03.700 --> 00:38:08.540
I have a Twitter bot that's still running, just called Hitch_Haiku on Twitter.


00:38:08.540 --> 00:38:14.640
So every hour on the 42nd minute, it takes all five books from the trilogy and pulls


00:38:14.640 --> 00:38:22.340
a five syllables, seven syllables, five syllables out, combines them all together and puts that


00:38:22.340 --> 00:38:26.840
into the world, I think about 24, 25,000 times at this point.


00:38:26.840 --> 00:38:29.440
And the machine learning is more wisdom of crowds.


00:38:29.440 --> 00:38:33.100
Like I'll get notifications like, "Oh, someone put favorites on them.


00:38:33.100 --> 00:38:37.360
Maybe it happened upon a good one in the large pile of terrible ones."


00:38:37.360 --> 00:38:38.360
Fantastic.


00:38:38.360 --> 00:38:39.760
I'll have to put that in the show notes.


00:38:39.760 --> 00:38:40.960
- The machine learning was funny.


00:38:40.960 --> 00:38:42.640
I just found out that like there's a bot


00:38:42.640 --> 00:38:45.840
that if you say machine learning, it'll retweet you.


00:38:45.840 --> 00:38:49.920
So I tried to install machine learning as much as I could


00:38:49.920 --> 00:38:53.120
and have it retweet, you know, the insights.


00:38:53.120 --> 00:38:53.960
- Fantastic.


00:38:53.960 --> 00:38:55.560
- Like you're gonna Beetlejuice the bot.


00:38:55.560 --> 00:38:58.180
(laughing)


00:38:58.180 --> 00:39:01.100
And then I suppose also on the Twitter front,


00:39:01.100 --> 00:39:04.840
yeah, we just told you not to scroll forever,


00:39:04.840 --> 00:39:08.160
but my favorite client just got a refresh.


00:39:08.160 --> 00:39:10.680
if you use iOS devices,


00:39:10.680 --> 00:39:13.680
the Tapbots folks have put out a tweet bot


00:39:13.680 --> 00:39:15.120
number six yesterday.


00:39:15.120 --> 00:39:15.960
- Ooh, nice.


00:39:15.960 --> 00:39:16.840
- Yeah.


00:39:16.840 --> 00:39:17.680
- That's cool.


00:39:17.680 --> 00:39:20.040
Yeah, I got to explore more Twitter clients.


00:39:20.040 --> 00:39:22.820
I'm still just a web browser kind of guy,


00:39:22.820 --> 00:39:23.660
but it works for me.


00:39:23.660 --> 00:39:24.480
It works for me.


00:39:24.480 --> 00:39:25.640
All right, I got a quick couple of releases for everyone.


00:39:25.640 --> 00:39:28.880
Django 3.2 alpha one was just released.


00:39:28.880 --> 00:39:30.280
So that's pretty awesome.


00:39:30.280 --> 00:39:32.400
A bunch of cool new features coming in Django.


00:39:32.400 --> 00:39:33.480
You can check those out.


00:39:33.480 --> 00:39:36.820
Mypy 0.8 has just come out


00:39:36.820 --> 00:39:38.820
that has Python 3.9 support.


00:39:38.820 --> 00:39:42.560
PIP 21 is out and that drops Python 2 support.


00:39:42.560 --> 00:39:47.000
So that's also a good one more step away from legacy Python.


00:39:47.000 --> 00:39:50.760
And then real quickly, there's Elastic, Elasticsearch.


00:39:50.760 --> 00:39:52.700
They changed their open source model,


00:39:52.700 --> 00:39:55.100
which is a very, I'm not gonna say is bad.


00:39:55.100 --> 00:39:57.500
I kind of support them in this path, I think,


00:39:57.500 --> 00:39:59.500
but it's a very big deal.


00:39:59.500 --> 00:40:03.580
You know, AWS and some of the other cloud vendors


00:40:03.580 --> 00:40:06.460
are like basically selling Elastic as a service,


00:40:06.460 --> 00:40:07.960
to last six searches of service.


00:40:07.960 --> 00:40:10.620
And they're like, wait, you just took our stuff


00:40:10.620 --> 00:40:12.220
and are selling it to other people.


00:40:12.220 --> 00:40:14.800
Whereas we have a corporate sort of thing,


00:40:14.800 --> 00:40:16.580
but we have no relationship with these people


00:40:16.580 --> 00:40:17.780
and that doesn't seem real fair.


00:40:17.780 --> 00:40:19.620
MongoDB had exactly the same problem.


00:40:19.620 --> 00:40:21.540
And so they adopted the same license,


00:40:21.540 --> 00:40:24.580
the SSDL or something like this.


00:40:24.580 --> 00:40:26.460
Basically, it's still open source


00:40:26.460 --> 00:40:28.460
unless you want to resell it as a cloud vendor,


00:40:28.460 --> 00:40:29.740
then it's not.


00:40:29.740 --> 00:40:30.580
I don't know.


00:40:30.580 --> 00:40:31.500
How do you guys feel about this?


00:40:31.500 --> 00:40:33.460
- Open source business models are hard.


00:40:33.460 --> 00:40:34.340
- Yeah, yeah.


00:40:34.340 --> 00:40:37.700
And it's really hard to attempt to put the genie


00:40:37.700 --> 00:40:39.420
back into the bottle after.


00:40:39.420 --> 00:40:42.100
And so I think the part of that was unsaid


00:40:42.100 --> 00:40:44.660
was that Amazon said, "Fine, take your toys


00:40:44.660 --> 00:40:47.960
"and sell your service, but we'll just fork it


00:40:47.960 --> 00:40:49.300
"and continue to do the thing that we're doing."


00:40:49.300 --> 00:40:50.580
- They forked it with the old model


00:40:50.580 --> 00:40:52.940
before it's changed and got in there.


00:40:52.940 --> 00:40:54.160
And that was that, right?


00:40:54.160 --> 00:40:56.140
And that was similar to what they did with Mongo, I think.


00:40:56.140 --> 00:40:57.620
They basically said, "We have a thing


00:40:57.620 --> 00:41:00.820
"that is API compatible at 3.6,"


00:41:00.820 --> 00:41:02.660
or whatever level it froze at, right?


00:41:02.660 --> 00:41:03.800
And then they went on from there.


00:41:03.800 --> 00:41:04.660
- Yeah, it's tricky.


00:41:04.660 --> 00:41:05.740
I think for some reason,


00:41:05.740 --> 00:41:09.740
Elastic has a relationship with Google Cloud and Azure.


00:41:09.740 --> 00:41:11.460
And so they don't have that challenge with Azure,


00:41:11.460 --> 00:41:13.300
but they have no relationship with AWS.


00:41:13.300 --> 00:41:14.300
So here it is.


00:41:14.300 --> 00:41:16.060
Anyway, I don't wanna go that long onto it.


00:41:16.060 --> 00:41:16.980
I just wanted to throw that out there


00:41:16.980 --> 00:41:18.700
as something people would be paying attention to.


00:41:18.700 --> 00:41:20.340
- But people that use it internally


00:41:20.340 --> 00:41:22.380
or on their own servers,


00:41:22.380 --> 00:41:24.220
there's no problem with it, right?


00:41:24.220 --> 00:41:25.820
- Yeah, yeah, that's my understanding.


00:41:25.820 --> 00:41:26.820
You guys ready for a joke?


00:41:26.820 --> 00:41:27.660
- Yes.


00:41:27.660 --> 00:41:28.480
- Always.


00:41:28.480 --> 00:41:29.420
- All right.


00:41:29.420 --> 00:41:30.940
Brian, I feel like being a manager today.


00:41:30.940 --> 00:41:31.900
Can you be the developer?


00:41:31.900 --> 00:41:34.780
This comes to us from Kate Maddox.


00:41:34.780 --> 00:41:37.700
Well, it comes to us via a guy named Wolf.


00:41:37.700 --> 00:41:38.700
Send it over, thank you for that.


00:41:38.700 --> 00:41:40.620
And it's written by Kate Maddox.


00:41:40.620 --> 00:41:42.900
So all right, you be the developer, I'll be the manager.


00:41:42.900 --> 00:41:45.300
- So I have good news and bad news.


00:41:45.300 --> 00:41:46.580
- Oh, what's the good news?


00:41:46.580 --> 00:41:48.780
- I've discovered that the five second rule


00:41:48.780 --> 00:41:50.980
only applies to food.


00:41:50.980 --> 00:41:53.140
- Fantastic, but what's the bad news?


00:41:53.140 --> 00:41:54.620
- I dropped our tables.


00:41:54.620 --> 00:41:56.900
(laughing)


00:41:56.900 --> 00:41:57.740
- Whoops.


00:41:57.740 --> 00:41:59.860
Hope you all had backups.


00:42:00.980 --> 00:42:02.820
- Oh boy, well.


00:42:02.820 --> 00:42:05.180
- Did you hear that like, I probably have this wrong,


00:42:05.180 --> 00:42:07.260
but I think that the five second rule,


00:42:07.260 --> 00:42:09.020
I thought it was 10 second rule.


00:42:09.020 --> 00:42:09.860
Anyway.


00:42:09.860 --> 00:42:10.980
- It depends, it varies by age.


00:42:10.980 --> 00:42:12.500
You know, if you're a little kid and it's candy,


00:42:12.500 --> 00:42:14.720
it's probably a good 30 second rule.


00:42:14.720 --> 00:42:17.700
- But I think it used to be a lot longer.


00:42:17.700 --> 00:42:21.560
And I think that it came, stemmed from Genghis Khan,


00:42:21.560 --> 00:42:23.780
or at least I heard this story that Genghis Khan


00:42:23.780 --> 00:42:26.460
had a rule about how long he would eat,


00:42:26.460 --> 00:42:29.180
how long after, how many numbers of days


00:42:29.180 --> 00:42:31.980
he would eat meat that had been left on the floor


00:42:31.980 --> 00:42:34.180
or left on the ground or something like that.


00:42:34.180 --> 00:42:36.200
So, you know, probably not good to eat meat


00:42:36.200 --> 00:42:38.200
that's been laying around for a few days.


00:42:38.200 --> 00:42:40.380
The three day rule.


00:42:40.380 --> 00:42:42.300
- Yeah, you wanna keep that pretty short.


00:42:42.300 --> 00:42:43.500
- Is it warm? - Get the magic number


00:42:43.500 --> 00:42:45.280
for number of seconds by number of days


00:42:45.280 --> 00:42:46.500
by cleanliness of floor.


00:42:46.500 --> 00:42:49.140
- That's right, it's only 150,000 seconds,


00:42:49.140 --> 00:42:50.540
no more than that, come on.


00:42:50.540 --> 00:42:52.820
Oh boy, all right guys.


00:42:52.820 --> 00:42:55.660
- Maybe somebody can correct me with the real story.


00:42:55.660 --> 00:42:57.460
- Yeah, that's what happens on the show.


00:42:57.460 --> 00:43:00.380
We threw out bits of information and our listeners back us up.


00:43:00.380 --> 00:43:02.860
All right, Brian, thanks as always.


00:43:02.860 --> 00:43:04.300
Jeremy, it's great to catch up with you.


00:43:04.300 --> 00:43:05.300
Thanks for being here.


00:43:05.300 --> 00:43:06.300
>> Absolutely.


00:43:06.300 --> 00:43:07.300
Thanks for having me.


00:43:07.300 --> 00:43:08.300
>> You bet.


00:43:08.300 --> 00:43:09.300
Bye.


00:43:09.300 --> 00:43:10.580
Thank you for listening to Python Bytes.


00:43:10.580 --> 00:43:13.420
Follow the show on Twitter via @PythonBytes.


00:43:13.420 --> 00:43:16.540
That's Python Bytes as in B-Y-T-E-S.


00:43:16.540 --> 00:43:19.820
And get the full show notes at PythonBytes.fm.


00:43:19.820 --> 00:43:23.540
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:43:23.540 --> 00:43:24.540
way.


00:43:24.540 --> 00:43:27.020
We're always on the lookout for sharing something cool.


00:43:27.020 --> 00:43:30.500
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:43:30.500 --> 00:43:33.500
Thank you for listening and sharing this podcast with your friends and colleagues.

